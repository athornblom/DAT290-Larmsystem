
./Debug/Door.elf:     file format elf32-littlearm


Disassembly of section .text:

20000000 <startup>:

void startup(void) __attribute__((naked)) __attribute__((section(".start_section")));

void startup(void)
{
	__asm volatile(
20000000:	4802      	ldr	r0, [pc, #8]	; (2000000c <_exit+0x4>)
20000002:	4685      	mov	sp, r0
20000004:	f000 ff2a 	bl	20000e5c <main>

20000008 <_exit>:
20000008:	e7fe      	b.n	20000008 <_exit>
		" LDR R0,=0x2001C000\n" /* set stack */
		" MOV SP,R0\n"
		" BL main\n"   /* call main */
		"_exit: B .\n" /* never return */
	);
}
2000000a:	46c0      	nop			; (mov r8, r8)
2000000c:	2001c000 	andcs	ip, r1, r0

20000010 <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
20000010:	b580      	push	{r7, lr}
20000012:	b082      	sub	sp, #8
20000014:	af00      	add	r7, sp, #0
20000016:	0002      	movs	r2, r0
20000018:	6039      	str	r1, [r7, #0]
2000001a:	1dfb      	adds	r3, r7, #7
2000001c:	701a      	strb	r2, [r3, #0]
  if((int32_t)IRQn < 0) {
2000001e:	1dfb      	adds	r3, r7, #7
20000020:	781b      	ldrb	r3, [r3, #0]
20000022:	2b7f      	cmp	r3, #127	; 0x7f
20000024:	d90d      	bls.n	20000042 <NVIC_SetPriority+0x32>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
20000026:	683b      	ldr	r3, [r7, #0]
20000028:	b2da      	uxtb	r2, r3
2000002a:	490f      	ldr	r1, [pc, #60]	; (20000068 <NVIC_SetPriority+0x58>)
2000002c:	1dfb      	adds	r3, r7, #7
2000002e:	781b      	ldrb	r3, [r3, #0]
20000030:	0018      	movs	r0, r3
20000032:	230f      	movs	r3, #15
20000034:	4003      	ands	r3, r0
20000036:	3b04      	subs	r3, #4
20000038:	0112      	lsls	r2, r2, #4
2000003a:	b2d2      	uxtb	r2, r2
2000003c:	18cb      	adds	r3, r1, r3
2000003e:	761a      	strb	r2, [r3, #24]
  }
  else {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
20000040:	e00d      	b.n	2000005e <NVIC_SetPriority+0x4e>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
20000042:	683b      	ldr	r3, [r7, #0]
20000044:	b2db      	uxtb	r3, r3
20000046:	4909      	ldr	r1, [pc, #36]	; (2000006c <NVIC_SetPriority+0x5c>)
20000048:	1dfa      	adds	r2, r7, #7
2000004a:	7812      	ldrb	r2, [r2, #0]
2000004c:	b252      	sxtb	r2, r2
2000004e:	011b      	lsls	r3, r3, #4
20000050:	b2d8      	uxtb	r0, r3
20000052:	23c0      	movs	r3, #192	; 0xc0
20000054:	009b      	lsls	r3, r3, #2
20000056:	188a      	adds	r2, r1, r2
20000058:	18d3      	adds	r3, r2, r3
2000005a:	1c02      	adds	r2, r0, #0
2000005c:	701a      	strb	r2, [r3, #0]
}
2000005e:	46c0      	nop			; (mov r8, r8)
20000060:	46bd      	mov	sp, r7
20000062:	b002      	add	sp, #8
20000064:	bd80      	pop	{r7, pc}
20000066:	46c0      	nop			; (mov r8, r8)
20000068:	e000ed00 	and	lr, r0, r0, lsl #26
2000006c:	e000e100 	and	lr, r0, r0, lsl #2

20000070 <SysTick_Config>:
    function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
20000070:	b580      	push	{r7, lr}
20000072:	b082      	sub	sp, #8
20000074:	af00      	add	r7, sp, #0
20000076:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk) { return (1UL); }    /* Reload value impossible */
20000078:	687b      	ldr	r3, [r7, #4]
2000007a:	3b01      	subs	r3, #1
2000007c:	4a0c      	ldr	r2, [pc, #48]	; (200000b0 <SysTick_Config+0x40>)
2000007e:	4293      	cmp	r3, r2
20000080:	d901      	bls.n	20000086 <SysTick_Config+0x16>
20000082:	2301      	movs	r3, #1
20000084:	e010      	b.n	200000a8 <SysTick_Config+0x38>

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
20000086:	4b0b      	ldr	r3, [pc, #44]	; (200000b4 <SysTick_Config+0x44>)
20000088:	687a      	ldr	r2, [r7, #4]
2000008a:	3a01      	subs	r2, #1
2000008c:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
2000008e:	2301      	movs	r3, #1
20000090:	425b      	negs	r3, r3
20000092:	210f      	movs	r1, #15
20000094:	0018      	movs	r0, r3
20000096:	f7ff ffbb 	bl	20000010 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
2000009a:	4b06      	ldr	r3, [pc, #24]	; (200000b4 <SysTick_Config+0x44>)
2000009c:	2200      	movs	r2, #0
2000009e:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
200000a0:	4b04      	ldr	r3, [pc, #16]	; (200000b4 <SysTick_Config+0x44>)
200000a2:	2207      	movs	r2, #7
200000a4:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
200000a6:	2300      	movs	r3, #0
}
200000a8:	0018      	movs	r0, r3
200000aa:	46bd      	mov	sp, r7
200000ac:	b002      	add	sp, #8
200000ae:	bd80      	pop	{r7, pc}
200000b0:	00ffffff 	ldrshteq	pc, [pc], #255	; <UNPREDICTABLE>
200000b4:	e000e010 	and	lr, r0, r0, lsl r0

200000b8 <RCC_DeInit>:
  *            - LSI, LSE and RTC clocks 
  * @param  None
  * @retval None
  */
void RCC_DeInit(void)
{
200000b8:	b580      	push	{r7, lr}
200000ba:	af00      	add	r7, sp, #0
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
200000bc:	4b14      	ldr	r3, [pc, #80]	; (20000110 <RCC_DeInit+0x58>)
200000be:	681a      	ldr	r2, [r3, #0]
200000c0:	4b13      	ldr	r3, [pc, #76]	; (20000110 <RCC_DeInit+0x58>)
200000c2:	2101      	movs	r1, #1
200000c4:	430a      	orrs	r2, r1
200000c6:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
200000c8:	4b11      	ldr	r3, [pc, #68]	; (20000110 <RCC_DeInit+0x58>)
200000ca:	2200      	movs	r2, #0
200000cc:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON, PLLON, PLLI2S and PLLSAI(STM32F42xxx/43xxx/446xx/469xx/479xx devices) bits */
  RCC->CR &= (uint32_t)0xEAF6FFFF;
200000ce:	4b10      	ldr	r3, [pc, #64]	; (20000110 <RCC_DeInit+0x58>)
200000d0:	681a      	ldr	r2, [r3, #0]
200000d2:	4b0f      	ldr	r3, [pc, #60]	; (20000110 <RCC_DeInit+0x58>)
200000d4:	490f      	ldr	r1, [pc, #60]	; (20000114 <RCC_DeInit+0x5c>)
200000d6:	400a      	ands	r2, r1
200000d8:	601a      	str	r2, [r3, #0]
  
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
200000da:	4b0d      	ldr	r3, [pc, #52]	; (20000110 <RCC_DeInit+0x58>)
200000dc:	4a0e      	ldr	r2, [pc, #56]	; (20000118 <RCC_DeInit+0x60>)
200000de:	605a      	str	r2, [r3, #4]

#if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F401xx) || defined(STM32F411xE) || defined(STM32F446xx) || defined(STM32F413_423xx) || defined(STM32F469_479xx)  
  /* Reset PLLI2SCFGR register */
  RCC->PLLI2SCFGR = 0x20003000;
200000e0:	4a0b      	ldr	r2, [pc, #44]	; (20000110 <RCC_DeInit+0x58>)
200000e2:	2384      	movs	r3, #132	; 0x84
200000e4:	490d      	ldr	r1, [pc, #52]	; (2000011c <RCC_DeInit+0x64>)
200000e6:	50d1      	str	r1, [r2, r3]
#endif /* STM32F40_41xxx || STM32F427_437xx || STM32F429_439xx || STM32F401xx || STM32F411xE || STM32F446xx || STM32F413_423xx || STM32F469_479xx */

#if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F446xx) || defined(STM32F469_479xx) 
  /* Reset PLLSAICFGR register, only available for STM32F42xxx/43xxx/446xx/469xx/479xx devices */
  RCC->PLLSAICFGR = 0x24003000;
200000e8:	4a09      	ldr	r2, [pc, #36]	; (20000110 <RCC_DeInit+0x58>)
200000ea:	2388      	movs	r3, #136	; 0x88
200000ec:	490c      	ldr	r1, [pc, #48]	; (20000120 <RCC_DeInit+0x68>)
200000ee:	50d1      	str	r1, [r2, r3]
#endif /* STM32F40_41xxx || STM32F427_437xx || STM32F429_439xx || STM32F446xx || STM32F469_479xx */
  
  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
200000f0:	4b07      	ldr	r3, [pc, #28]	; (20000110 <RCC_DeInit+0x58>)
200000f2:	681a      	ldr	r2, [r3, #0]
200000f4:	4b06      	ldr	r3, [pc, #24]	; (20000110 <RCC_DeInit+0x58>)
200000f6:	490b      	ldr	r1, [pc, #44]	; (20000124 <RCC_DeInit+0x6c>)
200000f8:	400a      	ands	r2, r1
200000fa:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
200000fc:	4b04      	ldr	r3, [pc, #16]	; (20000110 <RCC_DeInit+0x58>)
200000fe:	2200      	movs	r2, #0
20000100:	60da      	str	r2, [r3, #12]

  /* Disable Timers clock prescalers selection, only available for STM32F42/43xxx and STM32F413_423xx devices */
  RCC->DCKCFGR = 0x00000000;
20000102:	4a03      	ldr	r2, [pc, #12]	; (20000110 <RCC_DeInit+0x58>)
20000104:	238c      	movs	r3, #140	; 0x8c
20000106:	2100      	movs	r1, #0
20000108:	50d1      	str	r1, [r2, r3]
  
#if defined(STM32F410xx) || defined(STM32F413_423xx)
  /* Disable LPTIM and FMPI2C clock prescalers selection, only available for STM32F410xx and STM32F413_423xx devices */
  RCC->DCKCFGR2 = 0x00000000;
#endif /* STM32F410xx || STM32F413_423xx */  
}
2000010a:	46c0      	nop			; (mov r8, r8)
2000010c:	46bd      	mov	sp, r7
2000010e:	bd80      	pop	{r7, pc}
20000110:	40023800 	andmi	r3, r2, r0, lsl #16
20000114:	eaf6ffff 	b	1fdc0118 <startup-0x23fee8>
20000118:	24003010 	strcs	r3, [r0], #-16
2000011c:	20003000 	andcs	r3, r0, r0
20000120:	24003000 	strcs	r3, [r0], #-0
20000124:	fffbffff 			; <UNDEFINED> instruction: 0xfffbffff

20000128 <RCC_HSEConfig>:
  *            @arg RCC_HSE_ON: turn ON the HSE oscillator
  *            @arg RCC_HSE_Bypass: HSE oscillator bypassed with external clock
  * @retval None
  */
void RCC_HSEConfig(uint8_t RCC_HSE)
{
20000128:	b580      	push	{r7, lr}
2000012a:	b082      	sub	sp, #8
2000012c:	af00      	add	r7, sp, #0
2000012e:	0002      	movs	r2, r0
20000130:	1dfb      	adds	r3, r7, #7
20000132:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_HSE(RCC_HSE));

  /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
  *(__IO uint8_t *) CR_BYTE3_ADDRESS = RCC_HSE_OFF;
20000134:	4b05      	ldr	r3, [pc, #20]	; (2000014c <RCC_HSEConfig+0x24>)
20000136:	2200      	movs	r2, #0
20000138:	701a      	strb	r2, [r3, #0]

  /* Set the new HSE configuration -------------------------------------------*/
  *(__IO uint8_t *) CR_BYTE3_ADDRESS = RCC_HSE;
2000013a:	4a04      	ldr	r2, [pc, #16]	; (2000014c <RCC_HSEConfig+0x24>)
2000013c:	1dfb      	adds	r3, r7, #7
2000013e:	781b      	ldrb	r3, [r3, #0]
20000140:	7013      	strb	r3, [r2, #0]
}
20000142:	46c0      	nop			; (mov r8, r8)
20000144:	46bd      	mov	sp, r7
20000146:	b002      	add	sp, #8
20000148:	bd80      	pop	{r7, pc}
2000014a:	46c0      	nop			; (mov r8, r8)
2000014c:	40023802 	andmi	r3, r2, r2, lsl #16

20000150 <RCC_WaitForHSEStartUp>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: HSE oscillator is stable and ready to use
  *          - ERROR: HSE oscillator not yet ready
  */
ErrorStatus RCC_WaitForHSEStartUp(void)
{
20000150:	b590      	push	{r4, r7, lr}
20000152:	b083      	sub	sp, #12
20000154:	af00      	add	r7, sp, #0
  __IO uint32_t startupcounter = 0;
20000156:	2300      	movs	r3, #0
20000158:	603b      	str	r3, [r7, #0]
  ErrorStatus status = ERROR;
2000015a:	1dfb      	adds	r3, r7, #7
2000015c:	2200      	movs	r2, #0
2000015e:	701a      	strb	r2, [r3, #0]
  FlagStatus hsestatus = RESET;
20000160:	1dbb      	adds	r3, r7, #6
20000162:	2200      	movs	r2, #0
20000164:	701a      	strb	r2, [r3, #0]
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    hsestatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
20000166:	1dbc      	adds	r4, r7, #6
20000168:	2031      	movs	r0, #49	; 0x31
2000016a:	f000 fd9b 	bl	20000ca4 <RCC_GetFlagStatus>
2000016e:	0003      	movs	r3, r0
20000170:	7023      	strb	r3, [r4, #0]
    startupcounter++;
20000172:	683b      	ldr	r3, [r7, #0]
20000174:	3301      	adds	r3, #1
20000176:	603b      	str	r3, [r7, #0]
  } while((startupcounter != HSE_STARTUP_TIMEOUT) && (hsestatus == RESET));
20000178:	683a      	ldr	r2, [r7, #0]
2000017a:	23a0      	movs	r3, #160	; 0xa0
2000017c:	01db      	lsls	r3, r3, #7
2000017e:	429a      	cmp	r2, r3
20000180:	d003      	beq.n	2000018a <RCC_WaitForHSEStartUp+0x3a>
20000182:	1dbb      	adds	r3, r7, #6
20000184:	781b      	ldrb	r3, [r3, #0]
20000186:	2b00      	cmp	r3, #0
20000188:	d0ed      	beq.n	20000166 <RCC_WaitForHSEStartUp+0x16>

  if (RCC_GetFlagStatus(RCC_FLAG_HSERDY) != RESET)
2000018a:	2031      	movs	r0, #49	; 0x31
2000018c:	f000 fd8a 	bl	20000ca4 <RCC_GetFlagStatus>
20000190:	1e03      	subs	r3, r0, #0
20000192:	d003      	beq.n	2000019c <RCC_WaitForHSEStartUp+0x4c>
  {
    status = SUCCESS;
20000194:	1dfb      	adds	r3, r7, #7
20000196:	2201      	movs	r2, #1
20000198:	701a      	strb	r2, [r3, #0]
2000019a:	e002      	b.n	200001a2 <RCC_WaitForHSEStartUp+0x52>
  }
  else
  {
    status = ERROR;
2000019c:	1dfb      	adds	r3, r7, #7
2000019e:	2200      	movs	r2, #0
200001a0:	701a      	strb	r2, [r3, #0]
  }
  return (status);
200001a2:	1dfb      	adds	r3, r7, #7
200001a4:	781b      	ldrb	r3, [r3, #0]
}
200001a6:	0018      	movs	r0, r3
200001a8:	46bd      	mov	sp, r7
200001aa:	b003      	add	sp, #12
200001ac:	bd90      	pop	{r4, r7, pc}

200001ae <RCC_AdjustHSICalibrationValue>:
  * @param  HSICalibrationValue: specifies the calibration trimming value.
  *         This parameter must be a number between 0 and 0x1F.
  * @retval None
  */
void RCC_AdjustHSICalibrationValue(uint8_t HSICalibrationValue)
{
200001ae:	b580      	push	{r7, lr}
200001b0:	b084      	sub	sp, #16
200001b2:	af00      	add	r7, sp, #0
200001b4:	0002      	movs	r2, r0
200001b6:	1dfb      	adds	r3, r7, #7
200001b8:	701a      	strb	r2, [r3, #0]
  uint32_t tmpreg = 0;
200001ba:	2300      	movs	r3, #0
200001bc:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_CALIBRATION_VALUE(HSICalibrationValue));

  tmpreg = RCC->CR;
200001be:	4b0a      	ldr	r3, [pc, #40]	; (200001e8 <RCC_AdjustHSICalibrationValue+0x3a>)
200001c0:	681b      	ldr	r3, [r3, #0]
200001c2:	60fb      	str	r3, [r7, #12]

  /* Clear HSITRIM[4:0] bits */
  tmpreg &= ~RCC_CR_HSITRIM;
200001c4:	68fb      	ldr	r3, [r7, #12]
200001c6:	22f8      	movs	r2, #248	; 0xf8
200001c8:	4393      	bics	r3, r2
200001ca:	60fb      	str	r3, [r7, #12]

  /* Set the HSITRIM[4:0] bits according to HSICalibrationValue value */
  tmpreg |= (uint32_t)HSICalibrationValue << 3;
200001cc:	1dfb      	adds	r3, r7, #7
200001ce:	781b      	ldrb	r3, [r3, #0]
200001d0:	00db      	lsls	r3, r3, #3
200001d2:	68fa      	ldr	r2, [r7, #12]
200001d4:	4313      	orrs	r3, r2
200001d6:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CR = tmpreg;
200001d8:	4b03      	ldr	r3, [pc, #12]	; (200001e8 <RCC_AdjustHSICalibrationValue+0x3a>)
200001da:	68fa      	ldr	r2, [r7, #12]
200001dc:	601a      	str	r2, [r3, #0]
}
200001de:	46c0      	nop			; (mov r8, r8)
200001e0:	46bd      	mov	sp, r7
200001e2:	b004      	add	sp, #16
200001e4:	bd80      	pop	{r7, pc}
200001e6:	46c0      	nop			; (mov r8, r8)
200001e8:	40023800 	andmi	r3, r2, r0, lsl #16

200001ec <RCC_HSICmd>:
  * @note   When the HSI is stopped, HSIRDY flag goes low after 6 HSI oscillator
  *         clock cycles.  
  * @retval None
  */
void RCC_HSICmd(FunctionalState NewState)
{
200001ec:	b580      	push	{r7, lr}
200001ee:	b082      	sub	sp, #8
200001f0:	af00      	add	r7, sp, #0
200001f2:	0002      	movs	r2, r0
200001f4:	1dfb      	adds	r3, r7, #7
200001f6:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CR_HSION_BB = (uint32_t)NewState;
200001f8:	4b03      	ldr	r3, [pc, #12]	; (20000208 <RCC_HSICmd+0x1c>)
200001fa:	1dfa      	adds	r2, r7, #7
200001fc:	7812      	ldrb	r2, [r2, #0]
200001fe:	601a      	str	r2, [r3, #0]
}
20000200:	46c0      	nop			; (mov r8, r8)
20000202:	46bd      	mov	sp, r7
20000204:	b002      	add	sp, #8
20000206:	bd80      	pop	{r7, pc}
20000208:	42470000 	submi	r0, r7, #0

2000020c <RCC_LSEConfig>:
  *            @arg RCC_LSE_ON: turn ON the LSE oscillator
  *            @arg RCC_LSE_Bypass: LSE oscillator bypassed with external clock
  * @retval None
  */
void RCC_LSEConfig(uint8_t RCC_LSE)
{
2000020c:	b580      	push	{r7, lr}
2000020e:	b082      	sub	sp, #8
20000210:	af00      	add	r7, sp, #0
20000212:	0002      	movs	r2, r0
20000214:	1dfb      	adds	r3, r7, #7
20000216:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_LSE(RCC_LSE));

  /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
  /* Reset LSEON bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
20000218:	4b0c      	ldr	r3, [pc, #48]	; (2000024c <RCC_LSEConfig+0x40>)
2000021a:	2200      	movs	r2, #0
2000021c:	701a      	strb	r2, [r3, #0]

  /* Reset LSEBYP bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
2000021e:	4b0b      	ldr	r3, [pc, #44]	; (2000024c <RCC_LSEConfig+0x40>)
20000220:	2200      	movs	r2, #0
20000222:	701a      	strb	r2, [r3, #0]

  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch (RCC_LSE)
20000224:	1dfb      	adds	r3, r7, #7
20000226:	781b      	ldrb	r3, [r3, #0]
20000228:	2b01      	cmp	r3, #1
2000022a:	d002      	beq.n	20000232 <RCC_LSEConfig+0x26>
2000022c:	2b04      	cmp	r3, #4
2000022e:	d004      	beq.n	2000023a <RCC_LSEConfig+0x2e>
    case RCC_LSE_Bypass:
      /* Set LSEBYP and LSEON bits */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
      break;
    default:
      break;
20000230:	e007      	b.n	20000242 <RCC_LSEConfig+0x36>
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_ON;
20000232:	4b06      	ldr	r3, [pc, #24]	; (2000024c <RCC_LSEConfig+0x40>)
20000234:	2201      	movs	r2, #1
20000236:	701a      	strb	r2, [r3, #0]
      break;
20000238:	e003      	b.n	20000242 <RCC_LSEConfig+0x36>
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
2000023a:	4b04      	ldr	r3, [pc, #16]	; (2000024c <RCC_LSEConfig+0x40>)
2000023c:	2205      	movs	r2, #5
2000023e:	701a      	strb	r2, [r3, #0]
      break;
20000240:	46c0      	nop			; (mov r8, r8)
  }
}
20000242:	46c0      	nop			; (mov r8, r8)
20000244:	46bd      	mov	sp, r7
20000246:	b002      	add	sp, #8
20000248:	bd80      	pop	{r7, pc}
2000024a:	46c0      	nop			; (mov r8, r8)
2000024c:	40023870 	andmi	r3, r2, r0, ror r8

20000250 <RCC_LSICmd>:
  * @note   When the LSI is stopped, LSIRDY flag goes low after 6 LSI oscillator
  *         clock cycles. 
  * @retval None
  */
void RCC_LSICmd(FunctionalState NewState)
{
20000250:	b580      	push	{r7, lr}
20000252:	b082      	sub	sp, #8
20000254:	af00      	add	r7, sp, #0
20000256:	0002      	movs	r2, r0
20000258:	1dfb      	adds	r3, r7, #7
2000025a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CSR_LSION_BB = (uint32_t)NewState;
2000025c:	4b03      	ldr	r3, [pc, #12]	; (2000026c <RCC_LSICmd+0x1c>)
2000025e:	1dfa      	adds	r2, r7, #7
20000260:	7812      	ldrb	r2, [r2, #0]
20000262:	601a      	str	r2, [r3, #0]
}
20000264:	46c0      	nop			; (mov r8, r8)
20000266:	46bd      	mov	sp, r7
20000268:	b002      	add	sp, #8
2000026a:	bd80      	pop	{r7, pc}
2000026c:	42470e80 	submi	r0, r7, #128, 28	; 0x800

20000270 <RCC_PLLConfig>:
  *         correctly.
  *   
  * @retval None
  */
void RCC_PLLConfig(uint32_t RCC_PLLSource, uint32_t PLLM, uint32_t PLLN, uint32_t PLLP, uint32_t PLLQ)
{
20000270:	b580      	push	{r7, lr}
20000272:	b084      	sub	sp, #16
20000274:	af00      	add	r7, sp, #0
20000276:	60f8      	str	r0, [r7, #12]
20000278:	60b9      	str	r1, [r7, #8]
2000027a:	607a      	str	r2, [r7, #4]
2000027c:	603b      	str	r3, [r7, #0]
  assert_param(IS_RCC_PLLM_VALUE(PLLM));
  assert_param(IS_RCC_PLLN_VALUE(PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLP));
  assert_param(IS_RCC_PLLQ_VALUE(PLLQ));

  RCC->PLLCFGR = PLLM | (PLLN << 6) | (((PLLP >> 1) -1) << 16) | (RCC_PLLSource) |
2000027e:	687b      	ldr	r3, [r7, #4]
20000280:	019a      	lsls	r2, r3, #6
20000282:	68bb      	ldr	r3, [r7, #8]
20000284:	431a      	orrs	r2, r3
20000286:	683b      	ldr	r3, [r7, #0]
20000288:	085b      	lsrs	r3, r3, #1
2000028a:	3b01      	subs	r3, #1
2000028c:	041b      	lsls	r3, r3, #16
2000028e:	431a      	orrs	r2, r3
20000290:	68fb      	ldr	r3, [r7, #12]
20000292:	431a      	orrs	r2, r3
20000294:	0011      	movs	r1, r2
                 (PLLQ << 24);
20000296:	69bb      	ldr	r3, [r7, #24]
20000298:	061a      	lsls	r2, r3, #24
  RCC->PLLCFGR = PLLM | (PLLN << 6) | (((PLLP >> 1) -1) << 16) | (RCC_PLLSource) |
2000029a:	4b03      	ldr	r3, [pc, #12]	; (200002a8 <RCC_PLLConfig+0x38>)
2000029c:	430a      	orrs	r2, r1
2000029e:	605a      	str	r2, [r3, #4]
}
200002a0:	46c0      	nop			; (mov r8, r8)
200002a2:	46bd      	mov	sp, r7
200002a4:	b004      	add	sp, #16
200002a6:	bd80      	pop	{r7, pc}
200002a8:	40023800 	andmi	r3, r2, r0, lsl #16

200002ac <RCC_PLLCmd>:
  * @note   The main PLL is disabled by hardware when entering STOP and STANDBY modes.
  * @param  NewState: new state of the main PLL. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_PLLCmd(FunctionalState NewState)
{
200002ac:	b580      	push	{r7, lr}
200002ae:	b082      	sub	sp, #8
200002b0:	af00      	add	r7, sp, #0
200002b2:	0002      	movs	r2, r0
200002b4:	1dfb      	adds	r3, r7, #7
200002b6:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_PLLON_BB = (uint32_t)NewState;
200002b8:	4b03      	ldr	r3, [pc, #12]	; (200002c8 <RCC_PLLCmd+0x1c>)
200002ba:	1dfa      	adds	r2, r7, #7
200002bc:	7812      	ldrb	r2, [r2, #0]
200002be:	601a      	str	r2, [r3, #0]
}
200002c0:	46c0      	nop			; (mov r8, r8)
200002c2:	46bd      	mov	sp, r7
200002c4:	b002      	add	sp, #8
200002c6:	bd80      	pop	{r7, pc}
200002c8:	42470060 	submi	r0, r7, #96	; 0x60

200002cc <RCC_PLLI2SConfig>:
  *         on the I2S clock frequency.
  *   
  * @retval None
  */
void RCC_PLLI2SConfig(uint32_t PLLI2SN, uint32_t PLLI2SR)
{
200002cc:	b580      	push	{r7, lr}
200002ce:	b082      	sub	sp, #8
200002d0:	af00      	add	r7, sp, #0
200002d2:	6078      	str	r0, [r7, #4]
200002d4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RCC_PLLI2SN_VALUE(PLLI2SN));
  assert_param(IS_RCC_PLLI2SR_VALUE(PLLI2SR));

  RCC->PLLI2SCFGR = (PLLI2SN << 6) | (PLLI2SR << 28);
200002d6:	687b      	ldr	r3, [r7, #4]
200002d8:	019a      	lsls	r2, r3, #6
200002da:	683b      	ldr	r3, [r7, #0]
200002dc:	071b      	lsls	r3, r3, #28
200002de:	4904      	ldr	r1, [pc, #16]	; (200002f0 <RCC_PLLI2SConfig+0x24>)
200002e0:	4313      	orrs	r3, r2
200002e2:	2284      	movs	r2, #132	; 0x84
200002e4:	508b      	str	r3, [r1, r2]
}
200002e6:	46c0      	nop			; (mov r8, r8)
200002e8:	46bd      	mov	sp, r7
200002ea:	b002      	add	sp, #8
200002ec:	bd80      	pop	{r7, pc}
200002ee:	46c0      	nop			; (mov r8, r8)
200002f0:	40023800 	andmi	r3, r2, r0, lsl #16

200002f4 <RCC_PLLI2SCmd>:
  * @note   The PLLI2S is disabled by hardware when entering STOP and STANDBY modes.  
  * @param  NewState: new state of the PLLI2S. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_PLLI2SCmd(FunctionalState NewState)
{
200002f4:	b580      	push	{r7, lr}
200002f6:	b082      	sub	sp, #8
200002f8:	af00      	add	r7, sp, #0
200002fa:	0002      	movs	r2, r0
200002fc:	1dfb      	adds	r3, r7, #7
200002fe:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_PLLI2SON_BB = (uint32_t)NewState;
20000300:	4b03      	ldr	r3, [pc, #12]	; (20000310 <RCC_PLLI2SCmd+0x1c>)
20000302:	1dfa      	adds	r2, r7, #7
20000304:	7812      	ldrb	r2, [r2, #0]
20000306:	601a      	str	r2, [r3, #0]
}
20000308:	46c0      	nop			; (mov r8, r8)
2000030a:	46bd      	mov	sp, r7
2000030c:	b002      	add	sp, #8
2000030e:	bd80      	pop	{r7, pc}
20000310:	42470068 	submi	r0, r7, #104	; 0x68

20000314 <RCC_PLLSAIConfig>:
  *          This parameter must be a number between 2 and 7.
  *   
  * @retval None
  */
void RCC_PLLSAIConfig(uint32_t PLLSAIN, uint32_t PLLSAIQ, uint32_t PLLSAIR)
{
20000314:	b580      	push	{r7, lr}
20000316:	b084      	sub	sp, #16
20000318:	af00      	add	r7, sp, #0
2000031a:	60f8      	str	r0, [r7, #12]
2000031c:	60b9      	str	r1, [r7, #8]
2000031e:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_PLLSAIN_VALUE(PLLSAIN));
  assert_param(IS_RCC_PLLSAIR_VALUE(PLLSAIR));
  assert_param(IS_RCC_PLLSAIQ_VALUE(PLLSAIQ));
  
  RCC->PLLSAICFGR = (PLLSAIN << 6) | (PLLSAIQ << 24) | (PLLSAIR << 28);
20000320:	68fb      	ldr	r3, [r7, #12]
20000322:	019a      	lsls	r2, r3, #6
20000324:	68bb      	ldr	r3, [r7, #8]
20000326:	061b      	lsls	r3, r3, #24
20000328:	431a      	orrs	r2, r3
2000032a:	687b      	ldr	r3, [r7, #4]
2000032c:	071b      	lsls	r3, r3, #28
2000032e:	4904      	ldr	r1, [pc, #16]	; (20000340 <RCC_PLLSAIConfig+0x2c>)
20000330:	4313      	orrs	r3, r2
20000332:	2288      	movs	r2, #136	; 0x88
20000334:	508b      	str	r3, [r1, r2]
}
20000336:	46c0      	nop			; (mov r8, r8)
20000338:	46bd      	mov	sp, r7
2000033a:	b004      	add	sp, #16
2000033c:	bd80      	pop	{r7, pc}
2000033e:	46c0      	nop			; (mov r8, r8)
20000340:	40023800 	andmi	r3, r2, r0, lsl #16

20000344 <RCC_PLLSAICmd>:
  * @note   The PLLSAI is disabled by hardware when entering STOP and STANDBY modes.  
  * @param  NewState: new state of the PLLSAI. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_PLLSAICmd(FunctionalState NewState)
{
20000344:	b580      	push	{r7, lr}
20000346:	b082      	sub	sp, #8
20000348:	af00      	add	r7, sp, #0
2000034a:	0002      	movs	r2, r0
2000034c:	1dfb      	adds	r3, r7, #7
2000034e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_PLLSAION_BB = (uint32_t)NewState;
20000350:	4b03      	ldr	r3, [pc, #12]	; (20000360 <RCC_PLLSAICmd+0x1c>)
20000352:	1dfa      	adds	r2, r7, #7
20000354:	7812      	ldrb	r2, [r2, #0]
20000356:	601a      	str	r2, [r3, #0]
}
20000358:	46c0      	nop			; (mov r8, r8)
2000035a:	46bd      	mov	sp, r7
2000035c:	b002      	add	sp, #8
2000035e:	bd80      	pop	{r7, pc}
20000360:	42470070 	submi	r0, r7, #112	; 0x70

20000364 <RCC_ClockSecuritySystemCmd>:
  * @param  NewState: new state of the Clock Security System.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_ClockSecuritySystemCmd(FunctionalState NewState)
{
20000364:	b580      	push	{r7, lr}
20000366:	b082      	sub	sp, #8
20000368:	af00      	add	r7, sp, #0
2000036a:	0002      	movs	r2, r0
2000036c:	1dfb      	adds	r3, r7, #7
2000036e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_CSSON_BB = (uint32_t)NewState;
20000370:	4b03      	ldr	r3, [pc, #12]	; (20000380 <RCC_ClockSecuritySystemCmd+0x1c>)
20000372:	1dfa      	adds	r2, r7, #7
20000374:	7812      	ldrb	r2, [r2, #0]
20000376:	601a      	str	r2, [r3, #0]
}
20000378:	46c0      	nop			; (mov r8, r8)
2000037a:	46bd      	mov	sp, r7
2000037c:	b002      	add	sp, #8
2000037e:	bd80      	pop	{r7, pc}
20000380:	4247004c 	submi	r0, r7, #76	; 0x4c

20000384 <RCC_MCO1Config>:
  *            @arg RCC_MCO1Div_4: division by 4 applied to MCO1 clock
  *            @arg RCC_MCO1Div_5: division by 5 applied to MCO1 clock
  * @retval None
  */
void RCC_MCO1Config(uint32_t RCC_MCO1Source, uint32_t RCC_MCO1Div)
{
20000384:	b580      	push	{r7, lr}
20000386:	b084      	sub	sp, #16
20000388:	af00      	add	r7, sp, #0
2000038a:	6078      	str	r0, [r7, #4]
2000038c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
2000038e:	2300      	movs	r3, #0
20000390:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_MCO1SOURCE(RCC_MCO1Source));
  assert_param(IS_RCC_MCO1DIV(RCC_MCO1Div));  

  tmpreg = RCC->CFGR;
20000392:	4b0a      	ldr	r3, [pc, #40]	; (200003bc <RCC_MCO1Config+0x38>)
20000394:	689b      	ldr	r3, [r3, #8]
20000396:	60fb      	str	r3, [r7, #12]

  /* Clear MCO1[1:0] and MCO1PRE[2:0] bits */
  tmpreg &= CFGR_MCO1_RESET_MASK;
20000398:	68fb      	ldr	r3, [r7, #12]
2000039a:	4a09      	ldr	r2, [pc, #36]	; (200003c0 <RCC_MCO1Config+0x3c>)
2000039c:	4013      	ands	r3, r2
2000039e:	60fb      	str	r3, [r7, #12]

  /* Select MCO1 clock source and prescaler */
  tmpreg |= RCC_MCO1Source | RCC_MCO1Div;
200003a0:	687a      	ldr	r2, [r7, #4]
200003a2:	683b      	ldr	r3, [r7, #0]
200003a4:	4313      	orrs	r3, r2
200003a6:	68fa      	ldr	r2, [r7, #12]
200003a8:	4313      	orrs	r3, r2
200003aa:	60fb      	str	r3, [r7, #12]
  
  /* Store the new value */
  RCC->CFGR = tmpreg;
200003ac:	4b03      	ldr	r3, [pc, #12]	; (200003bc <RCC_MCO1Config+0x38>)
200003ae:	68fa      	ldr	r2, [r7, #12]
200003b0:	609a      	str	r2, [r3, #8]

#if defined(STM32F410xx)
  RCC_MCO1Cmd(ENABLE);
#endif /* STM32F410xx */   
}
200003b2:	46c0      	nop			; (mov r8, r8)
200003b4:	46bd      	mov	sp, r7
200003b6:	b004      	add	sp, #16
200003b8:	bd80      	pop	{r7, pc}
200003ba:	46c0      	nop			; (mov r8, r8)
200003bc:	40023800 	andmi	r3, r2, r0, lsl #16
200003c0:	f89fffff 			; <UNDEFINED> instruction: 0xf89fffff

200003c4 <RCC_MCO2Config>:
  * @note  For STM32F410xx devices to output I2SCLK clock on MCO2 you should have
  *        at last one of the SPI clocks enabled (SPI1, SPI2 or SPI5).
  * @retval None
  */
void RCC_MCO2Config(uint32_t RCC_MCO2Source, uint32_t RCC_MCO2Div)
{
200003c4:	b580      	push	{r7, lr}
200003c6:	b084      	sub	sp, #16
200003c8:	af00      	add	r7, sp, #0
200003ca:	6078      	str	r0, [r7, #4]
200003cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
200003ce:	2300      	movs	r3, #0
200003d0:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_MCO2SOURCE(RCC_MCO2Source));
  assert_param(IS_RCC_MCO2DIV(RCC_MCO2Div));
  
  tmpreg = RCC->CFGR;
200003d2:	4b0a      	ldr	r3, [pc, #40]	; (200003fc <RCC_MCO2Config+0x38>)
200003d4:	689b      	ldr	r3, [r3, #8]
200003d6:	60fb      	str	r3, [r7, #12]
  
  /* Clear MCO2 and MCO2PRE[2:0] bits */
  tmpreg &= CFGR_MCO2_RESET_MASK;
200003d8:	68fb      	ldr	r3, [r7, #12]
200003da:	015b      	lsls	r3, r3, #5
200003dc:	095b      	lsrs	r3, r3, #5
200003de:	60fb      	str	r3, [r7, #12]

  /* Select MCO2 clock source and prescaler */
  tmpreg |= RCC_MCO2Source | RCC_MCO2Div;
200003e0:	687a      	ldr	r2, [r7, #4]
200003e2:	683b      	ldr	r3, [r7, #0]
200003e4:	4313      	orrs	r3, r2
200003e6:	68fa      	ldr	r2, [r7, #12]
200003e8:	4313      	orrs	r3, r2
200003ea:	60fb      	str	r3, [r7, #12]
  
  /* Store the new value */
  RCC->CFGR = tmpreg;
200003ec:	4b03      	ldr	r3, [pc, #12]	; (200003fc <RCC_MCO2Config+0x38>)
200003ee:	68fa      	ldr	r2, [r7, #12]
200003f0:	609a      	str	r2, [r3, #8]

#if defined(STM32F410xx)
  RCC_MCO2Cmd(ENABLE);
#endif /* STM32F410xx */   
}
200003f2:	46c0      	nop			; (mov r8, r8)
200003f4:	46bd      	mov	sp, r7
200003f6:	b004      	add	sp, #16
200003f8:	bd80      	pop	{r7, pc}
200003fa:	46c0      	nop			; (mov r8, r8)
200003fc:	40023800 	andmi	r3, r2, r0, lsl #16

20000400 <RCC_SYSCLKConfig>:
  *            @arg RCC_SYSCLKSource_PLLCLK: PLL selected as system clock source (RCC_SYSCLKSource_PLLPCLK for STM32F446xx devices)
  *            @arg RCC_SYSCLKSource_PLLRCLK: PLL R selected as system clock source only for STM32F412xG, STM32F413_423xx and STM32F446xx devices
  * @retval None
  */
void RCC_SYSCLKConfig(uint32_t RCC_SYSCLKSource)
{
20000400:	b580      	push	{r7, lr}
20000402:	b084      	sub	sp, #16
20000404:	af00      	add	r7, sp, #0
20000406:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
20000408:	2300      	movs	r3, #0
2000040a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_SYSCLK_SOURCE(RCC_SYSCLKSource));

  tmpreg = RCC->CFGR;
2000040c:	4b08      	ldr	r3, [pc, #32]	; (20000430 <RCC_SYSCLKConfig+0x30>)
2000040e:	689b      	ldr	r3, [r3, #8]
20000410:	60fb      	str	r3, [r7, #12]

  /* Clear SW[1:0] bits */
  tmpreg &= ~RCC_CFGR_SW;
20000412:	68fb      	ldr	r3, [r7, #12]
20000414:	2203      	movs	r2, #3
20000416:	4393      	bics	r3, r2
20000418:	60fb      	str	r3, [r7, #12]

  /* Set SW[1:0] bits according to RCC_SYSCLKSource value */
  tmpreg |= RCC_SYSCLKSource;
2000041a:	68fa      	ldr	r2, [r7, #12]
2000041c:	687b      	ldr	r3, [r7, #4]
2000041e:	4313      	orrs	r3, r2
20000420:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;
20000422:	4b03      	ldr	r3, [pc, #12]	; (20000430 <RCC_SYSCLKConfig+0x30>)
20000424:	68fa      	ldr	r2, [r7, #12]
20000426:	609a      	str	r2, [r3, #8]
}
20000428:	46c0      	nop			; (mov r8, r8)
2000042a:	46bd      	mov	sp, r7
2000042c:	b004      	add	sp, #16
2000042e:	bd80      	pop	{r7, pc}
20000430:	40023800 	andmi	r3, r2, r0, lsl #16

20000434 <RCC_GetSYSCLKSource>:
  *              - 0x04: HSE used as system clock
  *              - 0x08: PLL used as system clock (PLL P for STM32F446xx devices)
  *              - 0x0C: PLL R used as system clock (only for STM32F412xG, STM32F413_423xx and STM32F446xx devices)
  */
uint8_t RCC_GetSYSCLKSource(void)
{
20000434:	b580      	push	{r7, lr}
20000436:	af00      	add	r7, sp, #0
  return ((uint8_t)(RCC->CFGR & RCC_CFGR_SWS));
20000438:	4b04      	ldr	r3, [pc, #16]	; (2000044c <RCC_GetSYSCLKSource+0x18>)
2000043a:	689b      	ldr	r3, [r3, #8]
2000043c:	b2db      	uxtb	r3, r3
2000043e:	220c      	movs	r2, #12
20000440:	4013      	ands	r3, r2
20000442:	b2db      	uxtb	r3, r3
}
20000444:	0018      	movs	r0, r3
20000446:	46bd      	mov	sp, r7
20000448:	bd80      	pop	{r7, pc}
2000044a:	46c0      	nop			; (mov r8, r8)
2000044c:	40023800 	andmi	r3, r2, r0, lsl #16

20000450 <RCC_HCLKConfig>:
  *            @arg RCC_SYSCLK_Div256: AHB clock = SYSCLK/256
  *            @arg RCC_SYSCLK_Div512: AHB clock = SYSCLK/512
  * @retval None
  */
void RCC_HCLKConfig(uint32_t RCC_SYSCLK)
{
20000450:	b580      	push	{r7, lr}
20000452:	b084      	sub	sp, #16
20000454:	af00      	add	r7, sp, #0
20000456:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
20000458:	2300      	movs	r3, #0
2000045a:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_HCLK(RCC_SYSCLK));

  tmpreg = RCC->CFGR;
2000045c:	4b08      	ldr	r3, [pc, #32]	; (20000480 <RCC_HCLKConfig+0x30>)
2000045e:	689b      	ldr	r3, [r3, #8]
20000460:	60fb      	str	r3, [r7, #12]

  /* Clear HPRE[3:0] bits */
  tmpreg &= ~RCC_CFGR_HPRE;
20000462:	68fb      	ldr	r3, [r7, #12]
20000464:	22f0      	movs	r2, #240	; 0xf0
20000466:	4393      	bics	r3, r2
20000468:	60fb      	str	r3, [r7, #12]

  /* Set HPRE[3:0] bits according to RCC_SYSCLK value */
  tmpreg |= RCC_SYSCLK;
2000046a:	68fa      	ldr	r2, [r7, #12]
2000046c:	687b      	ldr	r3, [r7, #4]
2000046e:	4313      	orrs	r3, r2
20000470:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;
20000472:	4b03      	ldr	r3, [pc, #12]	; (20000480 <RCC_HCLKConfig+0x30>)
20000474:	68fa      	ldr	r2, [r7, #12]
20000476:	609a      	str	r2, [r3, #8]
}
20000478:	46c0      	nop			; (mov r8, r8)
2000047a:	46bd      	mov	sp, r7
2000047c:	b004      	add	sp, #16
2000047e:	bd80      	pop	{r7, pc}
20000480:	40023800 	andmi	r3, r2, r0, lsl #16

20000484 <RCC_PCLK1Config>:
  *            @arg RCC_HCLK_Div8:  APB1 clock = HCLK/8
  *            @arg RCC_HCLK_Div16: APB1 clock = HCLK/16
  * @retval None
  */
void RCC_PCLK1Config(uint32_t RCC_HCLK)
{
20000484:	b580      	push	{r7, lr}
20000486:	b084      	sub	sp, #16
20000488:	af00      	add	r7, sp, #0
2000048a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
2000048c:	2300      	movs	r3, #0
2000048e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));

  tmpreg = RCC->CFGR;
20000490:	4b08      	ldr	r3, [pc, #32]	; (200004b4 <RCC_PCLK1Config+0x30>)
20000492:	689b      	ldr	r3, [r3, #8]
20000494:	60fb      	str	r3, [r7, #12]

  /* Clear PPRE1[2:0] bits */
  tmpreg &= ~RCC_CFGR_PPRE1;
20000496:	68fb      	ldr	r3, [r7, #12]
20000498:	4a07      	ldr	r2, [pc, #28]	; (200004b8 <RCC_PCLK1Config+0x34>)
2000049a:	4013      	ands	r3, r2
2000049c:	60fb      	str	r3, [r7, #12]

  /* Set PPRE1[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK;
2000049e:	68fa      	ldr	r2, [r7, #12]
200004a0:	687b      	ldr	r3, [r7, #4]
200004a2:	4313      	orrs	r3, r2
200004a4:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;
200004a6:	4b03      	ldr	r3, [pc, #12]	; (200004b4 <RCC_PCLK1Config+0x30>)
200004a8:	68fa      	ldr	r2, [r7, #12]
200004aa:	609a      	str	r2, [r3, #8]
}
200004ac:	46c0      	nop			; (mov r8, r8)
200004ae:	46bd      	mov	sp, r7
200004b0:	b004      	add	sp, #16
200004b2:	bd80      	pop	{r7, pc}
200004b4:	40023800 	andmi	r3, r2, r0, lsl #16
200004b8:	ffffe3ff 			; <UNDEFINED> instruction: 0xffffe3ff

200004bc <RCC_PCLK2Config>:
  *            @arg RCC_HCLK_Div8:  APB2 clock = HCLK/8
  *            @arg RCC_HCLK_Div16: APB2 clock = HCLK/16
  * @retval None
  */
void RCC_PCLK2Config(uint32_t RCC_HCLK)
{
200004bc:	b580      	push	{r7, lr}
200004be:	b084      	sub	sp, #16
200004c0:	af00      	add	r7, sp, #0
200004c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
200004c4:	2300      	movs	r3, #0
200004c6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));

  tmpreg = RCC->CFGR;
200004c8:	4b09      	ldr	r3, [pc, #36]	; (200004f0 <RCC_PCLK2Config+0x34>)
200004ca:	689b      	ldr	r3, [r3, #8]
200004cc:	60fb      	str	r3, [r7, #12]

  /* Clear PPRE2[2:0] bits */
  tmpreg &= ~RCC_CFGR_PPRE2;
200004ce:	68fb      	ldr	r3, [r7, #12]
200004d0:	4a08      	ldr	r2, [pc, #32]	; (200004f4 <RCC_PCLK2Config+0x38>)
200004d2:	4013      	ands	r3, r2
200004d4:	60fb      	str	r3, [r7, #12]

  /* Set PPRE2[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK << 3;
200004d6:	687b      	ldr	r3, [r7, #4]
200004d8:	00db      	lsls	r3, r3, #3
200004da:	68fa      	ldr	r2, [r7, #12]
200004dc:	4313      	orrs	r3, r2
200004de:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;
200004e0:	4b03      	ldr	r3, [pc, #12]	; (200004f0 <RCC_PCLK2Config+0x34>)
200004e2:	68fa      	ldr	r2, [r7, #12]
200004e4:	609a      	str	r2, [r3, #8]
}
200004e6:	46c0      	nop			; (mov r8, r8)
200004e8:	46bd      	mov	sp, r7
200004ea:	b004      	add	sp, #16
200004ec:	bd80      	pop	{r7, pc}
200004ee:	46c0      	nop			; (mov r8, r8)
200004f0:	40023800 	andmi	r3, r2, r0, lsl #16
200004f4:	ffff1fff 			; <UNDEFINED> instruction: 0xffff1fff

200004f8 <RCC_GetClocksFreq>:
  *         configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
200004f8:	b580      	push	{r7, lr}
200004fa:	b088      	sub	sp, #32
200004fc:	af00      	add	r7, sp, #0
200004fe:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
20000500:	2300      	movs	r3, #0
20000502:	61bb      	str	r3, [r7, #24]
20000504:	2300      	movs	r3, #0
20000506:	617b      	str	r3, [r7, #20]
20000508:	2300      	movs	r3, #0
2000050a:	61fb      	str	r3, [r7, #28]
2000050c:	2302      	movs	r3, #2
2000050e:	613b      	str	r3, [r7, #16]
20000510:	2300      	movs	r3, #0
20000512:	60fb      	str	r3, [r7, #12]
20000514:	2302      	movs	r3, #2
20000516:	60bb      	str	r3, [r7, #8]
#if defined(STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F446xx)  
  uint32_t pllr = 2;
#endif /* STM32F412xG || STM32F413_423xx || STM32F446xx */
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
20000518:	4b49      	ldr	r3, [pc, #292]	; (20000640 <RCC_GetClocksFreq+0x148>)
2000051a:	689b      	ldr	r3, [r3, #8]
2000051c:	220c      	movs	r2, #12
2000051e:	4013      	ands	r3, r2
20000520:	61bb      	str	r3, [r7, #24]
  
  switch (tmp)
20000522:	69bb      	ldr	r3, [r7, #24]
20000524:	2b04      	cmp	r3, #4
20000526:	d007      	beq.n	20000538 <RCC_GetClocksFreq+0x40>
20000528:	2b08      	cmp	r3, #8
2000052a:	d009      	beq.n	20000540 <RCC_GetClocksFreq+0x48>
2000052c:	2b00      	cmp	r3, #0
2000052e:	d141      	bne.n	200005b4 <RCC_GetClocksFreq+0xbc>
  {
  case 0x00:  /* HSI used as system clock source */
    RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
20000530:	687b      	ldr	r3, [r7, #4]
20000532:	4a44      	ldr	r2, [pc, #272]	; (20000644 <RCC_GetClocksFreq+0x14c>)
20000534:	601a      	str	r2, [r3, #0]
    break;
20000536:	e041      	b.n	200005bc <RCC_GetClocksFreq+0xc4>
  case 0x04:  /* HSE used as system clock  source */
    RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
20000538:	687b      	ldr	r3, [r7, #4]
2000053a:	4a43      	ldr	r2, [pc, #268]	; (20000648 <RCC_GetClocksFreq+0x150>)
2000053c:	601a      	str	r2, [r3, #0]
    break;
2000053e:	e03d      	b.n	200005bc <RCC_GetClocksFreq+0xc4>
  case 0x08:  /* PLL P used as system clock  source */
    
    /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLP
    */    
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
20000540:	4b3f      	ldr	r3, [pc, #252]	; (20000640 <RCC_GetClocksFreq+0x148>)
20000542:	685b      	ldr	r3, [r3, #4]
20000544:	0d9b      	lsrs	r3, r3, #22
20000546:	2201      	movs	r2, #1
20000548:	4013      	ands	r3, r2
2000054a:	60fb      	str	r3, [r7, #12]
    pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
2000054c:	4b3c      	ldr	r3, [pc, #240]	; (20000640 <RCC_GetClocksFreq+0x148>)
2000054e:	685b      	ldr	r3, [r3, #4]
20000550:	223f      	movs	r2, #63	; 0x3f
20000552:	4013      	ands	r3, r2
20000554:	60bb      	str	r3, [r7, #8]
    
    if (pllsource != 0)
20000556:	68fb      	ldr	r3, [r7, #12]
20000558:	2b00      	cmp	r3, #0
2000055a:	d00d      	beq.n	20000578 <RCC_GetClocksFreq+0x80>
    {
      /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
2000055c:	68b9      	ldr	r1, [r7, #8]
2000055e:	483a      	ldr	r0, [pc, #232]	; (20000648 <RCC_GetClocksFreq+0x150>)
20000560:	f002 f83a 	bl	200025d8 <__udivsi3>
20000564:	0003      	movs	r3, r0
20000566:	001a      	movs	r2, r3
20000568:	4b35      	ldr	r3, [pc, #212]	; (20000640 <RCC_GetClocksFreq+0x148>)
2000056a:	685b      	ldr	r3, [r3, #4]
2000056c:	099b      	lsrs	r3, r3, #6
2000056e:	05db      	lsls	r3, r3, #23
20000570:	0ddb      	lsrs	r3, r3, #23
20000572:	4353      	muls	r3, r2
20000574:	61fb      	str	r3, [r7, #28]
20000576:	e00c      	b.n	20000592 <RCC_GetClocksFreq+0x9a>
    }
    else
    {
      /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
20000578:	68b9      	ldr	r1, [r7, #8]
2000057a:	4832      	ldr	r0, [pc, #200]	; (20000644 <RCC_GetClocksFreq+0x14c>)
2000057c:	f002 f82c 	bl	200025d8 <__udivsi3>
20000580:	0003      	movs	r3, r0
20000582:	001a      	movs	r2, r3
20000584:	4b2e      	ldr	r3, [pc, #184]	; (20000640 <RCC_GetClocksFreq+0x148>)
20000586:	685b      	ldr	r3, [r3, #4]
20000588:	099b      	lsrs	r3, r3, #6
2000058a:	05db      	lsls	r3, r3, #23
2000058c:	0ddb      	lsrs	r3, r3, #23
2000058e:	4353      	muls	r3, r2
20000590:	61fb      	str	r3, [r7, #28]
    }
    
    pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
20000592:	4b2b      	ldr	r3, [pc, #172]	; (20000640 <RCC_GetClocksFreq+0x148>)
20000594:	685b      	ldr	r3, [r3, #4]
20000596:	0c1b      	lsrs	r3, r3, #16
20000598:	2203      	movs	r2, #3
2000059a:	4013      	ands	r3, r2
2000059c:	3301      	adds	r3, #1
2000059e:	005b      	lsls	r3, r3, #1
200005a0:	613b      	str	r3, [r7, #16]
    RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
200005a2:	6939      	ldr	r1, [r7, #16]
200005a4:	69f8      	ldr	r0, [r7, #28]
200005a6:	f002 f817 	bl	200025d8 <__udivsi3>
200005aa:	0003      	movs	r3, r0
200005ac:	001a      	movs	r2, r3
200005ae:	687b      	ldr	r3, [r7, #4]
200005b0:	601a      	str	r2, [r3, #0]
    break;
200005b2:	e003      	b.n	200005bc <RCC_GetClocksFreq+0xc4>
    RCC_Clocks->SYSCLK_Frequency = pllvco/pllr;    
    break;
#endif /* STM32F412xG || STM32F413_423xx || STM32F446xx */
    
  default:
    RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
200005b4:	687b      	ldr	r3, [r7, #4]
200005b6:	4a23      	ldr	r2, [pc, #140]	; (20000644 <RCC_GetClocksFreq+0x14c>)
200005b8:	601a      	str	r2, [r3, #0]
    break;
200005ba:	46c0      	nop			; (mov r8, r8)
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/
  
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
200005bc:	4b20      	ldr	r3, [pc, #128]	; (20000640 <RCC_GetClocksFreq+0x148>)
200005be:	689b      	ldr	r3, [r3, #8]
200005c0:	22f0      	movs	r2, #240	; 0xf0
200005c2:	4013      	ands	r3, r2
200005c4:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 4;
200005c6:	69bb      	ldr	r3, [r7, #24]
200005c8:	091b      	lsrs	r3, r3, #4
200005ca:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
200005cc:	4a1f      	ldr	r2, [pc, #124]	; (2000064c <RCC_GetClocksFreq+0x154>)
200005ce:	69bb      	ldr	r3, [r7, #24]
200005d0:	18d3      	adds	r3, r2, r3
200005d2:	781b      	ldrb	r3, [r3, #0]
200005d4:	b2db      	uxtb	r3, r3
200005d6:	617b      	str	r3, [r7, #20]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
200005d8:	687b      	ldr	r3, [r7, #4]
200005da:	681a      	ldr	r2, [r3, #0]
200005dc:	697b      	ldr	r3, [r7, #20]
200005de:	40da      	lsrs	r2, r3
200005e0:	687b      	ldr	r3, [r7, #4]
200005e2:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
200005e4:	4b16      	ldr	r3, [pc, #88]	; (20000640 <RCC_GetClocksFreq+0x148>)
200005e6:	689a      	ldr	r2, [r3, #8]
200005e8:	23e0      	movs	r3, #224	; 0xe0
200005ea:	015b      	lsls	r3, r3, #5
200005ec:	4013      	ands	r3, r2
200005ee:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 10;
200005f0:	69bb      	ldr	r3, [r7, #24]
200005f2:	0a9b      	lsrs	r3, r3, #10
200005f4:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
200005f6:	4a15      	ldr	r2, [pc, #84]	; (2000064c <RCC_GetClocksFreq+0x154>)
200005f8:	69bb      	ldr	r3, [r7, #24]
200005fa:	18d3      	adds	r3, r2, r3
200005fc:	781b      	ldrb	r3, [r3, #0]
200005fe:	b2db      	uxtb	r3, r3
20000600:	617b      	str	r3, [r7, #20]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
20000602:	687b      	ldr	r3, [r7, #4]
20000604:	685a      	ldr	r2, [r3, #4]
20000606:	697b      	ldr	r3, [r7, #20]
20000608:	40da      	lsrs	r2, r3
2000060a:	687b      	ldr	r3, [r7, #4]
2000060c:	609a      	str	r2, [r3, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
2000060e:	4b0c      	ldr	r3, [pc, #48]	; (20000640 <RCC_GetClocksFreq+0x148>)
20000610:	689a      	ldr	r2, [r3, #8]
20000612:	23e0      	movs	r3, #224	; 0xe0
20000614:	021b      	lsls	r3, r3, #8
20000616:	4013      	ands	r3, r2
20000618:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 13;
2000061a:	69bb      	ldr	r3, [r7, #24]
2000061c:	0b5b      	lsrs	r3, r3, #13
2000061e:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
20000620:	4a0a      	ldr	r2, [pc, #40]	; (2000064c <RCC_GetClocksFreq+0x154>)
20000622:	69bb      	ldr	r3, [r7, #24]
20000624:	18d3      	adds	r3, r2, r3
20000626:	781b      	ldrb	r3, [r3, #0]
20000628:	b2db      	uxtb	r3, r3
2000062a:	617b      	str	r3, [r7, #20]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
2000062c:	687b      	ldr	r3, [r7, #4]
2000062e:	685a      	ldr	r2, [r3, #4]
20000630:	697b      	ldr	r3, [r7, #20]
20000632:	40da      	lsrs	r2, r3
20000634:	687b      	ldr	r3, [r7, #4]
20000636:	60da      	str	r2, [r3, #12]
}
20000638:	46c0      	nop			; (mov r8, r8)
2000063a:	46bd      	mov	sp, r7
2000063c:	b008      	add	sp, #32
2000063e:	bd80      	pop	{r7, pc}
20000640:	40023800 	andmi	r3, r2, r0, lsl #16
20000644:	00f42400 	rscseq	r2, r4, r0, lsl #8
20000648:	017d7840 	cmneq	sp, r0, asr #16
2000064c:	200027cc 	andcs	r2, r0, ip, asr #15

20000650 <RCC_RTCCLKConfig>:
  *         RTC clock source).
  *  
  * @retval None
  */
void RCC_RTCCLKConfig(uint32_t RCC_RTCCLKSource)
{
20000650:	b580      	push	{r7, lr}
20000652:	b084      	sub	sp, #16
20000654:	af00      	add	r7, sp, #0
20000656:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
20000658:	2300      	movs	r3, #0
2000065a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_RTCCLK_SOURCE(RCC_RTCCLKSource));

  if ((RCC_RTCCLKSource & 0x00000300) == 0x00000300)
2000065c:	687a      	ldr	r2, [r7, #4]
2000065e:	23c0      	movs	r3, #192	; 0xc0
20000660:	009b      	lsls	r3, r3, #2
20000662:	401a      	ands	r2, r3
20000664:	23c0      	movs	r3, #192	; 0xc0
20000666:	009b      	lsls	r3, r3, #2
20000668:	429a      	cmp	r2, r3
2000066a:	d10f      	bne.n	2000068c <RCC_RTCCLKConfig+0x3c>
  { /* If HSE is selected as RTC clock source, configure HSE division factor for RTC clock */
    tmpreg = RCC->CFGR;
2000066c:	4b0d      	ldr	r3, [pc, #52]	; (200006a4 <RCC_RTCCLKConfig+0x54>)
2000066e:	689b      	ldr	r3, [r3, #8]
20000670:	60fb      	str	r3, [r7, #12]

    /* Clear RTCPRE[4:0] bits */
    tmpreg &= ~RCC_CFGR_RTCPRE;
20000672:	68fb      	ldr	r3, [r7, #12]
20000674:	4a0c      	ldr	r2, [pc, #48]	; (200006a8 <RCC_RTCCLKConfig+0x58>)
20000676:	4013      	ands	r3, r2
20000678:	60fb      	str	r3, [r7, #12]

    /* Configure HSE division factor for RTC clock */
    tmpreg |= (RCC_RTCCLKSource & 0xFFFFCFF);
2000067a:	687b      	ldr	r3, [r7, #4]
2000067c:	4a0b      	ldr	r2, [pc, #44]	; (200006ac <RCC_RTCCLKConfig+0x5c>)
2000067e:	4013      	ands	r3, r2
20000680:	68fa      	ldr	r2, [r7, #12]
20000682:	4313      	orrs	r3, r2
20000684:	60fb      	str	r3, [r7, #12]

    /* Store the new value */
    RCC->CFGR = tmpreg;
20000686:	4b07      	ldr	r3, [pc, #28]	; (200006a4 <RCC_RTCCLKConfig+0x54>)
20000688:	68fa      	ldr	r2, [r7, #12]
2000068a:	609a      	str	r2, [r3, #8]
  }
    
  /* Select the RTC clock source */
  RCC->BDCR |= (RCC_RTCCLKSource & 0x00000FFF);
2000068c:	4b05      	ldr	r3, [pc, #20]	; (200006a4 <RCC_RTCCLKConfig+0x54>)
2000068e:	6f19      	ldr	r1, [r3, #112]	; 0x70
20000690:	687b      	ldr	r3, [r7, #4]
20000692:	051b      	lsls	r3, r3, #20
20000694:	0d1a      	lsrs	r2, r3, #20
20000696:	4b03      	ldr	r3, [pc, #12]	; (200006a4 <RCC_RTCCLKConfig+0x54>)
20000698:	430a      	orrs	r2, r1
2000069a:	671a      	str	r2, [r3, #112]	; 0x70
}
2000069c:	46c0      	nop			; (mov r8, r8)
2000069e:	46bd      	mov	sp, r7
200006a0:	b004      	add	sp, #16
200006a2:	bd80      	pop	{r7, pc}
200006a4:	40023800 	andmi	r3, r2, r0, lsl #16
200006a8:	ffe0ffff 			; <UNDEFINED> instruction: 0xffe0ffff
200006ac:	0ffffcff 	svceq	0x00fffcff

200006b0 <RCC_RTCCLKCmd>:
  *         using the RCC_RTCCLKConfig function.
  * @param  NewState: new state of the RTC clock. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_RTCCLKCmd(FunctionalState NewState)
{
200006b0:	b580      	push	{r7, lr}
200006b2:	b082      	sub	sp, #8
200006b4:	af00      	add	r7, sp, #0
200006b6:	0002      	movs	r2, r0
200006b8:	1dfb      	adds	r3, r7, #7
200006ba:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) BDCR_RTCEN_BB = (uint32_t)NewState;
200006bc:	4b03      	ldr	r3, [pc, #12]	; (200006cc <RCC_RTCCLKCmd+0x1c>)
200006be:	1dfa      	adds	r2, r7, #7
200006c0:	7812      	ldrb	r2, [r2, #0]
200006c2:	601a      	str	r2, [r3, #0]
}
200006c4:	46c0      	nop			; (mov r8, r8)
200006c6:	46bd      	mov	sp, r7
200006c8:	b002      	add	sp, #8
200006ca:	bd80      	pop	{r7, pc}
200006cc:	42470e3c 	submi	r0, r7, #60, 28	; 0x3c0

200006d0 <RCC_BackupResetCmd>:
  * @param  NewState: new state of the Backup domain reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_BackupResetCmd(FunctionalState NewState)
{
200006d0:	b580      	push	{r7, lr}
200006d2:	b082      	sub	sp, #8
200006d4:	af00      	add	r7, sp, #0
200006d6:	0002      	movs	r2, r0
200006d8:	1dfb      	adds	r3, r7, #7
200006da:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) BDCR_BDRST_BB = (uint32_t)NewState;
200006dc:	4b03      	ldr	r3, [pc, #12]	; (200006ec <RCC_BackupResetCmd+0x1c>)
200006de:	1dfa      	adds	r2, r7, #7
200006e0:	7812      	ldrb	r2, [r2, #0]
200006e2:	601a      	str	r2, [r3, #0]
}
200006e4:	46c0      	nop			; (mov r8, r8)
200006e6:	46bd      	mov	sp, r7
200006e8:	b002      	add	sp, #8
200006ea:	bd80      	pop	{r7, pc}
200006ec:	42470e40 	submi	r0, r7, #64, 28	; 0x400

200006f0 <RCC_I2SCLKConfig>:
  *            @arg RCC_I2S2CLKSource_Ext: External clock mapped on the I2S_CKIN pin
  *                                        used as I2S clock source
  * @retval None
  */
void RCC_I2SCLKConfig(uint32_t RCC_I2SCLKSource)
{
200006f0:	b580      	push	{r7, lr}
200006f2:	b082      	sub	sp, #8
200006f4:	af00      	add	r7, sp, #0
200006f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_I2SCLK_SOURCE(RCC_I2SCLKSource));

  *(__IO uint32_t *) CFGR_I2SSRC_BB = RCC_I2SCLKSource;  
200006f8:	4b03      	ldr	r3, [pc, #12]	; (20000708 <RCC_I2SCLKConfig+0x18>)
200006fa:	687a      	ldr	r2, [r7, #4]
200006fc:	601a      	str	r2, [r3, #0]
}
200006fe:	46c0      	nop			; (mov r8, r8)
20000700:	46bd      	mov	sp, r7
20000702:	b002      	add	sp, #8
20000704:	bd80      	pop	{r7, pc}
20000706:	46c0      	nop			; (mov r8, r8)
20000708:	4247015c 	submi	r0, r7, #92, 2

2000070c <RCC_SAIBlockACLKConfig>:
  *            @arg RCC_SAIACLKSource_Ext: External clock mapped on the I2S_CKIN pin
  *                                        used as SAI1 Block A clock
  * @retval None
  */
void RCC_SAIBlockACLKConfig(uint32_t RCC_SAIBlockACLKSource)
{
2000070c:	b580      	push	{r7, lr}
2000070e:	b084      	sub	sp, #16
20000710:	af00      	add	r7, sp, #0
20000712:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
20000714:	2300      	movs	r3, #0
20000716:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_SAIACLK_SOURCE(RCC_SAIBlockACLKSource));
  
  tmpreg = RCC->DCKCFGR;
20000718:	4a09      	ldr	r2, [pc, #36]	; (20000740 <RCC_SAIBlockACLKConfig+0x34>)
2000071a:	238c      	movs	r3, #140	; 0x8c
2000071c:	58d3      	ldr	r3, [r2, r3]
2000071e:	60fb      	str	r3, [r7, #12]

  /* Clear RCC_DCKCFGR_SAI1ASRC[1:0] bits */
  tmpreg &= ~RCC_DCKCFGR_SAI1ASRC;
20000720:	68fb      	ldr	r3, [r7, #12]
20000722:	4a08      	ldr	r2, [pc, #32]	; (20000744 <RCC_SAIBlockACLKConfig+0x38>)
20000724:	4013      	ands	r3, r2
20000726:	60fb      	str	r3, [r7, #12]

  /* Set SAI Block A source selection value */
  tmpreg |= RCC_SAIBlockACLKSource;
20000728:	68fa      	ldr	r2, [r7, #12]
2000072a:	687b      	ldr	r3, [r7, #4]
2000072c:	4313      	orrs	r3, r2
2000072e:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->DCKCFGR = tmpreg;
20000730:	4903      	ldr	r1, [pc, #12]	; (20000740 <RCC_SAIBlockACLKConfig+0x34>)
20000732:	228c      	movs	r2, #140	; 0x8c
20000734:	68fb      	ldr	r3, [r7, #12]
20000736:	508b      	str	r3, [r1, r2]
}
20000738:	46c0      	nop			; (mov r8, r8)
2000073a:	46bd      	mov	sp, r7
2000073c:	b004      	add	sp, #16
2000073e:	bd80      	pop	{r7, pc}
20000740:	40023800 	andmi	r3, r2, r0, lsl #16
20000744:	ffcfffff 			; <UNDEFINED> instruction: 0xffcfffff

20000748 <RCC_SAIBlockBCLKConfig>:
  *            @arg RCC_SAIBCLKSource_Ext: External clock mapped on the I2S_CKIN pin
  *                                        used as SAI1 Block B clock
  * @retval None
  */
void RCC_SAIBlockBCLKConfig(uint32_t RCC_SAIBlockBCLKSource)
{
20000748:	b580      	push	{r7, lr}
2000074a:	b084      	sub	sp, #16
2000074c:	af00      	add	r7, sp, #0
2000074e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
20000750:	2300      	movs	r3, #0
20000752:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_SAIBCLK_SOURCE(RCC_SAIBlockBCLKSource));
  
  tmpreg = RCC->DCKCFGR;
20000754:	4a09      	ldr	r2, [pc, #36]	; (2000077c <RCC_SAIBlockBCLKConfig+0x34>)
20000756:	238c      	movs	r3, #140	; 0x8c
20000758:	58d3      	ldr	r3, [r2, r3]
2000075a:	60fb      	str	r3, [r7, #12]

  /* Clear RCC_DCKCFGR_SAI1BSRC[1:0] bits */
  tmpreg &= ~RCC_DCKCFGR_SAI1BSRC;
2000075c:	68fb      	ldr	r3, [r7, #12]
2000075e:	4a08      	ldr	r2, [pc, #32]	; (20000780 <RCC_SAIBlockBCLKConfig+0x38>)
20000760:	4013      	ands	r3, r2
20000762:	60fb      	str	r3, [r7, #12]

  /* Set SAI Block B source selection value */
  tmpreg |= RCC_SAIBlockBCLKSource;
20000764:	68fa      	ldr	r2, [r7, #12]
20000766:	687b      	ldr	r3, [r7, #4]
20000768:	4313      	orrs	r3, r2
2000076a:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->DCKCFGR = tmpreg;
2000076c:	4903      	ldr	r1, [pc, #12]	; (2000077c <RCC_SAIBlockBCLKConfig+0x34>)
2000076e:	228c      	movs	r2, #140	; 0x8c
20000770:	68fb      	ldr	r3, [r7, #12]
20000772:	508b      	str	r3, [r1, r2]
}
20000774:	46c0      	nop			; (mov r8, r8)
20000776:	46bd      	mov	sp, r7
20000778:	b004      	add	sp, #16
2000077a:	bd80      	pop	{r7, pc}
2000077c:	40023800 	andmi	r3, r2, r0, lsl #16
20000780:	ff3fffff 			; <UNDEFINED> instruction: 0xff3fffff

20000784 <RCC_SAIPLLI2SClkDivConfig>:
  *          SAI1 clock frequency = f(PLLI2S_Q) / RCC_PLLI2SDivQ 
  *              
  * @retval None
  */
void RCC_SAIPLLI2SClkDivConfig(uint32_t RCC_PLLI2SDivQ)  
{
20000784:	b580      	push	{r7, lr}
20000786:	b084      	sub	sp, #16
20000788:	af00      	add	r7, sp, #0
2000078a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
2000078c:	2300      	movs	r3, #0
2000078e:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(RCC_PLLI2SDivQ));
  
  tmpreg = RCC->DCKCFGR;
20000790:	4a0a      	ldr	r2, [pc, #40]	; (200007bc <RCC_SAIPLLI2SClkDivConfig+0x38>)
20000792:	238c      	movs	r3, #140	; 0x8c
20000794:	58d3      	ldr	r3, [r2, r3]
20000796:	60fb      	str	r3, [r7, #12]

  /* Clear PLLI2SDIVQ[4:0] bits */
  tmpreg &= ~(RCC_DCKCFGR_PLLI2SDIVQ);
20000798:	68fb      	ldr	r3, [r7, #12]
2000079a:	221f      	movs	r2, #31
2000079c:	4393      	bics	r3, r2
2000079e:	60fb      	str	r3, [r7, #12]

  /* Set PLLI2SDIVQ values */
  tmpreg |= (RCC_PLLI2SDivQ - 1);
200007a0:	687b      	ldr	r3, [r7, #4]
200007a2:	3b01      	subs	r3, #1
200007a4:	68fa      	ldr	r2, [r7, #12]
200007a6:	4313      	orrs	r3, r2
200007a8:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->DCKCFGR = tmpreg;
200007aa:	4904      	ldr	r1, [pc, #16]	; (200007bc <RCC_SAIPLLI2SClkDivConfig+0x38>)
200007ac:	228c      	movs	r2, #140	; 0x8c
200007ae:	68fb      	ldr	r3, [r7, #12]
200007b0:	508b      	str	r3, [r1, r2]
}
200007b2:	46c0      	nop			; (mov r8, r8)
200007b4:	46bd      	mov	sp, r7
200007b6:	b004      	add	sp, #16
200007b8:	bd80      	pop	{r7, pc}
200007ba:	46c0      	nop			; (mov r8, r8)
200007bc:	40023800 	andmi	r3, r2, r0, lsl #16

200007c0 <RCC_SAIPLLSAIClkDivConfig>:
  *          SAI1 clock frequency = f(PLLSAI_Q) / RCC_PLLSAIDivQ  
  *              
  * @retval None
  */
void RCC_SAIPLLSAIClkDivConfig(uint32_t RCC_PLLSAIDivQ)  
{
200007c0:	b580      	push	{r7, lr}
200007c2:	b084      	sub	sp, #16
200007c4:	af00      	add	r7, sp, #0
200007c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
200007c8:	2300      	movs	r3, #0
200007ca:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(RCC_PLLSAIDivQ));
  
  tmpreg = RCC->DCKCFGR;
200007cc:	4a0a      	ldr	r2, [pc, #40]	; (200007f8 <RCC_SAIPLLSAIClkDivConfig+0x38>)
200007ce:	238c      	movs	r3, #140	; 0x8c
200007d0:	58d3      	ldr	r3, [r2, r3]
200007d2:	60fb      	str	r3, [r7, #12]

  /* Clear PLLI2SDIVQ[4:0] and PLLSAIDIVQ[4:0] bits */
  tmpreg &= ~(RCC_DCKCFGR_PLLSAIDIVQ);
200007d4:	68fb      	ldr	r3, [r7, #12]
200007d6:	4a09      	ldr	r2, [pc, #36]	; (200007fc <RCC_SAIPLLSAIClkDivConfig+0x3c>)
200007d8:	4013      	ands	r3, r2
200007da:	60fb      	str	r3, [r7, #12]

  /* Set PLLSAIDIVQ values */
  tmpreg |= ((RCC_PLLSAIDivQ - 1) << 8);
200007dc:	687b      	ldr	r3, [r7, #4]
200007de:	3b01      	subs	r3, #1
200007e0:	021b      	lsls	r3, r3, #8
200007e2:	68fa      	ldr	r2, [r7, #12]
200007e4:	4313      	orrs	r3, r2
200007e6:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->DCKCFGR = tmpreg;
200007e8:	4903      	ldr	r1, [pc, #12]	; (200007f8 <RCC_SAIPLLSAIClkDivConfig+0x38>)
200007ea:	228c      	movs	r2, #140	; 0x8c
200007ec:	68fb      	ldr	r3, [r7, #12]
200007ee:	508b      	str	r3, [r1, r2]
}
200007f0:	46c0      	nop			; (mov r8, r8)
200007f2:	46bd      	mov	sp, r7
200007f4:	b004      	add	sp, #16
200007f6:	bd80      	pop	{r7, pc}
200007f8:	40023800 	andmi	r3, r2, r0, lsl #16
200007fc:	ffffe0ff 			; <UNDEFINED> instruction: 0xffffe0ff

20000800 <RCC_LTDCCLKDivConfig>:
  *            @arg RCC_PLLSAIDivR_Div16: LTDC clock = f(PLLSAI_R)/16
  *            
  * @retval None
  */
void RCC_LTDCCLKDivConfig(uint32_t RCC_PLLSAIDivR)
{
20000800:	b580      	push	{r7, lr}
20000802:	b084      	sub	sp, #16
20000804:	af00      	add	r7, sp, #0
20000806:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
20000808:	2300      	movs	r3, #0
2000080a:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_PLLSAI_DIVR_VALUE(RCC_PLLSAIDivR));
  
  tmpreg = RCC->DCKCFGR;
2000080c:	4a09      	ldr	r2, [pc, #36]	; (20000834 <RCC_LTDCCLKDivConfig+0x34>)
2000080e:	238c      	movs	r3, #140	; 0x8c
20000810:	58d3      	ldr	r3, [r2, r3]
20000812:	60fb      	str	r3, [r7, #12]

  /* Clear PLLSAIDIVR[2:0] bits */
  tmpreg &= ~RCC_DCKCFGR_PLLSAIDIVR;
20000814:	68fb      	ldr	r3, [r7, #12]
20000816:	4a08      	ldr	r2, [pc, #32]	; (20000838 <RCC_LTDCCLKDivConfig+0x38>)
20000818:	4013      	ands	r3, r2
2000081a:	60fb      	str	r3, [r7, #12]

  /* Set PLLSAIDIVR values */
  tmpreg |= RCC_PLLSAIDivR;
2000081c:	68fa      	ldr	r2, [r7, #12]
2000081e:	687b      	ldr	r3, [r7, #4]
20000820:	4313      	orrs	r3, r2
20000822:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->DCKCFGR = tmpreg;
20000824:	4903      	ldr	r1, [pc, #12]	; (20000834 <RCC_LTDCCLKDivConfig+0x34>)
20000826:	228c      	movs	r2, #140	; 0x8c
20000828:	68fb      	ldr	r3, [r7, #12]
2000082a:	508b      	str	r3, [r1, r2]
}
2000082c:	46c0      	nop			; (mov r8, r8)
2000082e:	46bd      	mov	sp, r7
20000830:	b004      	add	sp, #16
20000832:	bd80      	pop	{r7, pc}
20000834:	40023800 	andmi	r3, r2, r0, lsl #16
20000838:	fffcffff 			; <UNDEFINED> instruction: 0xfffcffff

2000083c <RCC_TIMCLKPresConfig>:
  *                 else it is equal to [(HPRE * PPREx) / 4] if PPREx is corresponding 
  *                 to division by 8 or more.
  * @retval None
  */
void RCC_TIMCLKPresConfig(uint32_t RCC_TIMCLKPrescaler)
{
2000083c:	b580      	push	{r7, lr}
2000083e:	b082      	sub	sp, #8
20000840:	af00      	add	r7, sp, #0
20000842:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_TIMCLK_PRESCALER(RCC_TIMCLKPrescaler));

  *(__IO uint32_t *) DCKCFGR_TIMPRE_BB = RCC_TIMCLKPrescaler;
20000844:	4b03      	ldr	r3, [pc, #12]	; (20000854 <RCC_TIMCLKPresConfig+0x18>)
20000846:	687a      	ldr	r2, [r7, #4]
20000848:	601a      	str	r2, [r3, #0]
}
2000084a:	46c0      	nop			; (mov r8, r8)
2000084c:	46bd      	mov	sp, r7
2000084e:	b002      	add	sp, #8
20000850:	bd80      	pop	{r7, pc}
20000852:	46c0      	nop			; (mov r8, r8)
20000854:	424711e0 	submi	r1, r7, #224, 2	; 0x38

20000858 <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
20000858:	b580      	push	{r7, lr}
2000085a:	b082      	sub	sp, #8
2000085c:	af00      	add	r7, sp, #0
2000085e:	6078      	str	r0, [r7, #4]
20000860:	000a      	movs	r2, r1
20000862:	1cfb      	adds	r3, r7, #3
20000864:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
20000866:	1cfb      	adds	r3, r7, #3
20000868:	781b      	ldrb	r3, [r3, #0]
2000086a:	2b00      	cmp	r3, #0
2000086c:	d006      	beq.n	2000087c <RCC_AHB1PeriphClockCmd+0x24>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
2000086e:	4b09      	ldr	r3, [pc, #36]	; (20000894 <RCC_AHB1PeriphClockCmd+0x3c>)
20000870:	6b19      	ldr	r1, [r3, #48]	; 0x30
20000872:	4b08      	ldr	r3, [pc, #32]	; (20000894 <RCC_AHB1PeriphClockCmd+0x3c>)
20000874:	687a      	ldr	r2, [r7, #4]
20000876:	430a      	orrs	r2, r1
20000878:	631a      	str	r2, [r3, #48]	; 0x30
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
  }
}
2000087a:	e006      	b.n	2000088a <RCC_AHB1PeriphClockCmd+0x32>
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
2000087c:	4b05      	ldr	r3, [pc, #20]	; (20000894 <RCC_AHB1PeriphClockCmd+0x3c>)
2000087e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
20000880:	687b      	ldr	r3, [r7, #4]
20000882:	43d9      	mvns	r1, r3
20000884:	4b03      	ldr	r3, [pc, #12]	; (20000894 <RCC_AHB1PeriphClockCmd+0x3c>)
20000886:	400a      	ands	r2, r1
20000888:	631a      	str	r2, [r3, #48]	; 0x30
}
2000088a:	46c0      	nop			; (mov r8, r8)
2000088c:	46bd      	mov	sp, r7
2000088e:	b002      	add	sp, #8
20000890:	bd80      	pop	{r7, pc}
20000892:	46c0      	nop			; (mov r8, r8)
20000894:	40023800 	andmi	r3, r2, r0, lsl #16

20000898 <RCC_AHB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB2PeriphClockCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
{
20000898:	b580      	push	{r7, lr}
2000089a:	b082      	sub	sp, #8
2000089c:	af00      	add	r7, sp, #0
2000089e:	6078      	str	r0, [r7, #4]
200008a0:	000a      	movs	r2, r1
200008a2:	1cfb      	adds	r3, r7, #3
200008a4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
200008a6:	1cfb      	adds	r3, r7, #3
200008a8:	781b      	ldrb	r3, [r3, #0]
200008aa:	2b00      	cmp	r3, #0
200008ac:	d006      	beq.n	200008bc <RCC_AHB2PeriphClockCmd+0x24>
  {
    RCC->AHB2ENR |= RCC_AHB2Periph;
200008ae:	4b09      	ldr	r3, [pc, #36]	; (200008d4 <RCC_AHB2PeriphClockCmd+0x3c>)
200008b0:	6b59      	ldr	r1, [r3, #52]	; 0x34
200008b2:	4b08      	ldr	r3, [pc, #32]	; (200008d4 <RCC_AHB2PeriphClockCmd+0x3c>)
200008b4:	687a      	ldr	r2, [r7, #4]
200008b6:	430a      	orrs	r2, r1
200008b8:	635a      	str	r2, [r3, #52]	; 0x34
  }
  else
  {
    RCC->AHB2ENR &= ~RCC_AHB2Periph;
  }
}
200008ba:	e006      	b.n	200008ca <RCC_AHB2PeriphClockCmd+0x32>
    RCC->AHB2ENR &= ~RCC_AHB2Periph;
200008bc:	4b05      	ldr	r3, [pc, #20]	; (200008d4 <RCC_AHB2PeriphClockCmd+0x3c>)
200008be:	6b5a      	ldr	r2, [r3, #52]	; 0x34
200008c0:	687b      	ldr	r3, [r7, #4]
200008c2:	43d9      	mvns	r1, r3
200008c4:	4b03      	ldr	r3, [pc, #12]	; (200008d4 <RCC_AHB2PeriphClockCmd+0x3c>)
200008c6:	400a      	ands	r2, r1
200008c8:	635a      	str	r2, [r3, #52]	; 0x34
}
200008ca:	46c0      	nop			; (mov r8, r8)
200008cc:	46bd      	mov	sp, r7
200008ce:	b002      	add	sp, #8
200008d0:	bd80      	pop	{r7, pc}
200008d2:	46c0      	nop			; (mov r8, r8)
200008d4:	40023800 	andmi	r3, r2, r0, lsl #16

200008d8 <RCC_AHB3PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB3PeriphClockCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
{
200008d8:	b580      	push	{r7, lr}
200008da:	b082      	sub	sp, #8
200008dc:	af00      	add	r7, sp, #0
200008de:	6078      	str	r0, [r7, #4]
200008e0:	000a      	movs	r2, r1
200008e2:	1cfb      	adds	r3, r7, #3
200008e4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
200008e6:	1cfb      	adds	r3, r7, #3
200008e8:	781b      	ldrb	r3, [r3, #0]
200008ea:	2b00      	cmp	r3, #0
200008ec:	d006      	beq.n	200008fc <RCC_AHB3PeriphClockCmd+0x24>
  {
    RCC->AHB3ENR |= RCC_AHB3Periph;
200008ee:	4b09      	ldr	r3, [pc, #36]	; (20000914 <RCC_AHB3PeriphClockCmd+0x3c>)
200008f0:	6b99      	ldr	r1, [r3, #56]	; 0x38
200008f2:	4b08      	ldr	r3, [pc, #32]	; (20000914 <RCC_AHB3PeriphClockCmd+0x3c>)
200008f4:	687a      	ldr	r2, [r7, #4]
200008f6:	430a      	orrs	r2, r1
200008f8:	639a      	str	r2, [r3, #56]	; 0x38
  }
  else
  {
    RCC->AHB3ENR &= ~RCC_AHB3Periph;
  }
}
200008fa:	e006      	b.n	2000090a <RCC_AHB3PeriphClockCmd+0x32>
    RCC->AHB3ENR &= ~RCC_AHB3Periph;
200008fc:	4b05      	ldr	r3, [pc, #20]	; (20000914 <RCC_AHB3PeriphClockCmd+0x3c>)
200008fe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
20000900:	687b      	ldr	r3, [r7, #4]
20000902:	43d9      	mvns	r1, r3
20000904:	4b03      	ldr	r3, [pc, #12]	; (20000914 <RCC_AHB3PeriphClockCmd+0x3c>)
20000906:	400a      	ands	r2, r1
20000908:	639a      	str	r2, [r3, #56]	; 0x38
}
2000090a:	46c0      	nop			; (mov r8, r8)
2000090c:	46bd      	mov	sp, r7
2000090e:	b002      	add	sp, #8
20000910:	bd80      	pop	{r7, pc}
20000912:	46c0      	nop			; (mov r8, r8)
20000914:	40023800 	andmi	r3, r2, r0, lsl #16

20000918 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
20000918:	b580      	push	{r7, lr}
2000091a:	b082      	sub	sp, #8
2000091c:	af00      	add	r7, sp, #0
2000091e:	6078      	str	r0, [r7, #4]
20000920:	000a      	movs	r2, r1
20000922:	1cfb      	adds	r3, r7, #3
20000924:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
20000926:	1cfb      	adds	r3, r7, #3
20000928:	781b      	ldrb	r3, [r3, #0]
2000092a:	2b00      	cmp	r3, #0
2000092c:	d006      	beq.n	2000093c <RCC_APB1PeriphClockCmd+0x24>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
2000092e:	4b09      	ldr	r3, [pc, #36]	; (20000954 <RCC_APB1PeriphClockCmd+0x3c>)
20000930:	6c19      	ldr	r1, [r3, #64]	; 0x40
20000932:	4b08      	ldr	r3, [pc, #32]	; (20000954 <RCC_APB1PeriphClockCmd+0x3c>)
20000934:	687a      	ldr	r2, [r7, #4]
20000936:	430a      	orrs	r2, r1
20000938:	641a      	str	r2, [r3, #64]	; 0x40
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
2000093a:	e006      	b.n	2000094a <RCC_APB1PeriphClockCmd+0x32>
    RCC->APB1ENR &= ~RCC_APB1Periph;
2000093c:	4b05      	ldr	r3, [pc, #20]	; (20000954 <RCC_APB1PeriphClockCmd+0x3c>)
2000093e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
20000940:	687b      	ldr	r3, [r7, #4]
20000942:	43d9      	mvns	r1, r3
20000944:	4b03      	ldr	r3, [pc, #12]	; (20000954 <RCC_APB1PeriphClockCmd+0x3c>)
20000946:	400a      	ands	r2, r1
20000948:	641a      	str	r2, [r3, #64]	; 0x40
}
2000094a:	46c0      	nop			; (mov r8, r8)
2000094c:	46bd      	mov	sp, r7
2000094e:	b002      	add	sp, #8
20000950:	bd80      	pop	{r7, pc}
20000952:	46c0      	nop			; (mov r8, r8)
20000954:	40023800 	andmi	r3, r2, r0, lsl #16

20000958 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
20000958:	b580      	push	{r7, lr}
2000095a:	b082      	sub	sp, #8
2000095c:	af00      	add	r7, sp, #0
2000095e:	6078      	str	r0, [r7, #4]
20000960:	000a      	movs	r2, r1
20000962:	1cfb      	adds	r3, r7, #3
20000964:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
20000966:	1cfb      	adds	r3, r7, #3
20000968:	781b      	ldrb	r3, [r3, #0]
2000096a:	2b00      	cmp	r3, #0
2000096c:	d006      	beq.n	2000097c <RCC_APB2PeriphClockCmd+0x24>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
2000096e:	4b09      	ldr	r3, [pc, #36]	; (20000994 <RCC_APB2PeriphClockCmd+0x3c>)
20000970:	6c59      	ldr	r1, [r3, #68]	; 0x44
20000972:	4b08      	ldr	r3, [pc, #32]	; (20000994 <RCC_APB2PeriphClockCmd+0x3c>)
20000974:	687a      	ldr	r2, [r7, #4]
20000976:	430a      	orrs	r2, r1
20000978:	645a      	str	r2, [r3, #68]	; 0x44
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
2000097a:	e006      	b.n	2000098a <RCC_APB2PeriphClockCmd+0x32>
    RCC->APB2ENR &= ~RCC_APB2Periph;
2000097c:	4b05      	ldr	r3, [pc, #20]	; (20000994 <RCC_APB2PeriphClockCmd+0x3c>)
2000097e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
20000980:	687b      	ldr	r3, [r7, #4]
20000982:	43d9      	mvns	r1, r3
20000984:	4b03      	ldr	r3, [pc, #12]	; (20000994 <RCC_APB2PeriphClockCmd+0x3c>)
20000986:	400a      	ands	r2, r1
20000988:	645a      	str	r2, [r3, #68]	; 0x44
}
2000098a:	46c0      	nop			; (mov r8, r8)
2000098c:	46bd      	mov	sp, r7
2000098e:	b002      	add	sp, #8
20000990:	bd80      	pop	{r7, pc}
20000992:	46c0      	nop			; (mov r8, r8)
20000994:	40023800 	andmi	r3, r2, r0, lsl #16

20000998 <RCC_AHB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphResetCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
20000998:	b580      	push	{r7, lr}
2000099a:	b082      	sub	sp, #8
2000099c:	af00      	add	r7, sp, #0
2000099e:	6078      	str	r0, [r7, #4]
200009a0:	000a      	movs	r2, r1
200009a2:	1cfb      	adds	r3, r7, #3
200009a4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_RESET_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
200009a6:	1cfb      	adds	r3, r7, #3
200009a8:	781b      	ldrb	r3, [r3, #0]
200009aa:	2b00      	cmp	r3, #0
200009ac:	d006      	beq.n	200009bc <RCC_AHB1PeriphResetCmd+0x24>
  {
    RCC->AHB1RSTR |= RCC_AHB1Periph;
200009ae:	4b09      	ldr	r3, [pc, #36]	; (200009d4 <RCC_AHB1PeriphResetCmd+0x3c>)
200009b0:	6919      	ldr	r1, [r3, #16]
200009b2:	4b08      	ldr	r3, [pc, #32]	; (200009d4 <RCC_AHB1PeriphResetCmd+0x3c>)
200009b4:	687a      	ldr	r2, [r7, #4]
200009b6:	430a      	orrs	r2, r1
200009b8:	611a      	str	r2, [r3, #16]
  }
  else
  {
    RCC->AHB1RSTR &= ~RCC_AHB1Periph;
  }
}
200009ba:	e006      	b.n	200009ca <RCC_AHB1PeriphResetCmd+0x32>
    RCC->AHB1RSTR &= ~RCC_AHB1Periph;
200009bc:	4b05      	ldr	r3, [pc, #20]	; (200009d4 <RCC_AHB1PeriphResetCmd+0x3c>)
200009be:	691a      	ldr	r2, [r3, #16]
200009c0:	687b      	ldr	r3, [r7, #4]
200009c2:	43d9      	mvns	r1, r3
200009c4:	4b03      	ldr	r3, [pc, #12]	; (200009d4 <RCC_AHB1PeriphResetCmd+0x3c>)
200009c6:	400a      	ands	r2, r1
200009c8:	611a      	str	r2, [r3, #16]
}
200009ca:	46c0      	nop			; (mov r8, r8)
200009cc:	46bd      	mov	sp, r7
200009ce:	b002      	add	sp, #8
200009d0:	bd80      	pop	{r7, pc}
200009d2:	46c0      	nop			; (mov r8, r8)
200009d4:	40023800 	andmi	r3, r2, r0, lsl #16

200009d8 <RCC_AHB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB2PeriphResetCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
{
200009d8:	b580      	push	{r7, lr}
200009da:	b082      	sub	sp, #8
200009dc:	af00      	add	r7, sp, #0
200009de:	6078      	str	r0, [r7, #4]
200009e0:	000a      	movs	r2, r1
200009e2:	1cfb      	adds	r3, r7, #3
200009e4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
200009e6:	1cfb      	adds	r3, r7, #3
200009e8:	781b      	ldrb	r3, [r3, #0]
200009ea:	2b00      	cmp	r3, #0
200009ec:	d006      	beq.n	200009fc <RCC_AHB2PeriphResetCmd+0x24>
  {
    RCC->AHB2RSTR |= RCC_AHB2Periph;
200009ee:	4b09      	ldr	r3, [pc, #36]	; (20000a14 <RCC_AHB2PeriphResetCmd+0x3c>)
200009f0:	6959      	ldr	r1, [r3, #20]
200009f2:	4b08      	ldr	r3, [pc, #32]	; (20000a14 <RCC_AHB2PeriphResetCmd+0x3c>)
200009f4:	687a      	ldr	r2, [r7, #4]
200009f6:	430a      	orrs	r2, r1
200009f8:	615a      	str	r2, [r3, #20]
  }
  else
  {
    RCC->AHB2RSTR &= ~RCC_AHB2Periph;
  }
}
200009fa:	e006      	b.n	20000a0a <RCC_AHB2PeriphResetCmd+0x32>
    RCC->AHB2RSTR &= ~RCC_AHB2Periph;
200009fc:	4b05      	ldr	r3, [pc, #20]	; (20000a14 <RCC_AHB2PeriphResetCmd+0x3c>)
200009fe:	695a      	ldr	r2, [r3, #20]
20000a00:	687b      	ldr	r3, [r7, #4]
20000a02:	43d9      	mvns	r1, r3
20000a04:	4b03      	ldr	r3, [pc, #12]	; (20000a14 <RCC_AHB2PeriphResetCmd+0x3c>)
20000a06:	400a      	ands	r2, r1
20000a08:	615a      	str	r2, [r3, #20]
}
20000a0a:	46c0      	nop			; (mov r8, r8)
20000a0c:	46bd      	mov	sp, r7
20000a0e:	b002      	add	sp, #8
20000a10:	bd80      	pop	{r7, pc}
20000a12:	46c0      	nop			; (mov r8, r8)
20000a14:	40023800 	andmi	r3, r2, r0, lsl #16

20000a18 <RCC_AHB3PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB3PeriphResetCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
{
20000a18:	b580      	push	{r7, lr}
20000a1a:	b082      	sub	sp, #8
20000a1c:	af00      	add	r7, sp, #0
20000a1e:	6078      	str	r0, [r7, #4]
20000a20:	000a      	movs	r2, r1
20000a22:	1cfb      	adds	r3, r7, #3
20000a24:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
20000a26:	1cfb      	adds	r3, r7, #3
20000a28:	781b      	ldrb	r3, [r3, #0]
20000a2a:	2b00      	cmp	r3, #0
20000a2c:	d006      	beq.n	20000a3c <RCC_AHB3PeriphResetCmd+0x24>
  {
    RCC->AHB3RSTR |= RCC_AHB3Periph;
20000a2e:	4b09      	ldr	r3, [pc, #36]	; (20000a54 <RCC_AHB3PeriphResetCmd+0x3c>)
20000a30:	6999      	ldr	r1, [r3, #24]
20000a32:	4b08      	ldr	r3, [pc, #32]	; (20000a54 <RCC_AHB3PeriphResetCmd+0x3c>)
20000a34:	687a      	ldr	r2, [r7, #4]
20000a36:	430a      	orrs	r2, r1
20000a38:	619a      	str	r2, [r3, #24]
  }
  else
  {
    RCC->AHB3RSTR &= ~RCC_AHB3Periph;
  }
}
20000a3a:	e006      	b.n	20000a4a <RCC_AHB3PeriphResetCmd+0x32>
    RCC->AHB3RSTR &= ~RCC_AHB3Periph;
20000a3c:	4b05      	ldr	r3, [pc, #20]	; (20000a54 <RCC_AHB3PeriphResetCmd+0x3c>)
20000a3e:	699a      	ldr	r2, [r3, #24]
20000a40:	687b      	ldr	r3, [r7, #4]
20000a42:	43d9      	mvns	r1, r3
20000a44:	4b03      	ldr	r3, [pc, #12]	; (20000a54 <RCC_AHB3PeriphResetCmd+0x3c>)
20000a46:	400a      	ands	r2, r1
20000a48:	619a      	str	r2, [r3, #24]
}
20000a4a:	46c0      	nop			; (mov r8, r8)
20000a4c:	46bd      	mov	sp, r7
20000a4e:	b002      	add	sp, #8
20000a50:	bd80      	pop	{r7, pc}
20000a52:	46c0      	nop			; (mov r8, r8)
20000a54:	40023800 	andmi	r3, r2, r0, lsl #16

20000a58 <RCC_APB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
20000a58:	b580      	push	{r7, lr}
20000a5a:	b082      	sub	sp, #8
20000a5c:	af00      	add	r7, sp, #0
20000a5e:	6078      	str	r0, [r7, #4]
20000a60:	000a      	movs	r2, r1
20000a62:	1cfb      	adds	r3, r7, #3
20000a64:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
20000a66:	1cfb      	adds	r3, r7, #3
20000a68:	781b      	ldrb	r3, [r3, #0]
20000a6a:	2b00      	cmp	r3, #0
20000a6c:	d006      	beq.n	20000a7c <RCC_APB1PeriphResetCmd+0x24>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
20000a6e:	4b09      	ldr	r3, [pc, #36]	; (20000a94 <RCC_APB1PeriphResetCmd+0x3c>)
20000a70:	6a19      	ldr	r1, [r3, #32]
20000a72:	4b08      	ldr	r3, [pc, #32]	; (20000a94 <RCC_APB1PeriphResetCmd+0x3c>)
20000a74:	687a      	ldr	r2, [r7, #4]
20000a76:	430a      	orrs	r2, r1
20000a78:	621a      	str	r2, [r3, #32]
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
  }
}
20000a7a:	e006      	b.n	20000a8a <RCC_APB1PeriphResetCmd+0x32>
    RCC->APB1RSTR &= ~RCC_APB1Periph;
20000a7c:	4b05      	ldr	r3, [pc, #20]	; (20000a94 <RCC_APB1PeriphResetCmd+0x3c>)
20000a7e:	6a1a      	ldr	r2, [r3, #32]
20000a80:	687b      	ldr	r3, [r7, #4]
20000a82:	43d9      	mvns	r1, r3
20000a84:	4b03      	ldr	r3, [pc, #12]	; (20000a94 <RCC_APB1PeriphResetCmd+0x3c>)
20000a86:	400a      	ands	r2, r1
20000a88:	621a      	str	r2, [r3, #32]
}
20000a8a:	46c0      	nop			; (mov r8, r8)
20000a8c:	46bd      	mov	sp, r7
20000a8e:	b002      	add	sp, #8
20000a90:	bd80      	pop	{r7, pc}
20000a92:	46c0      	nop			; (mov r8, r8)
20000a94:	40023800 	andmi	r3, r2, r0, lsl #16

20000a98 <RCC_APB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
20000a98:	b580      	push	{r7, lr}
20000a9a:	b082      	sub	sp, #8
20000a9c:	af00      	add	r7, sp, #0
20000a9e:	6078      	str	r0, [r7, #4]
20000aa0:	000a      	movs	r2, r1
20000aa2:	1cfb      	adds	r3, r7, #3
20000aa4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_RESET_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
20000aa6:	1cfb      	adds	r3, r7, #3
20000aa8:	781b      	ldrb	r3, [r3, #0]
20000aaa:	2b00      	cmp	r3, #0
20000aac:	d006      	beq.n	20000abc <RCC_APB2PeriphResetCmd+0x24>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
20000aae:	4b09      	ldr	r3, [pc, #36]	; (20000ad4 <RCC_APB2PeriphResetCmd+0x3c>)
20000ab0:	6a59      	ldr	r1, [r3, #36]	; 0x24
20000ab2:	4b08      	ldr	r3, [pc, #32]	; (20000ad4 <RCC_APB2PeriphResetCmd+0x3c>)
20000ab4:	687a      	ldr	r2, [r7, #4]
20000ab6:	430a      	orrs	r2, r1
20000ab8:	625a      	str	r2, [r3, #36]	; 0x24
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
  }
}
20000aba:	e006      	b.n	20000aca <RCC_APB2PeriphResetCmd+0x32>
    RCC->APB2RSTR &= ~RCC_APB2Periph;
20000abc:	4b05      	ldr	r3, [pc, #20]	; (20000ad4 <RCC_APB2PeriphResetCmd+0x3c>)
20000abe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
20000ac0:	687b      	ldr	r3, [r7, #4]
20000ac2:	43d9      	mvns	r1, r3
20000ac4:	4b03      	ldr	r3, [pc, #12]	; (20000ad4 <RCC_APB2PeriphResetCmd+0x3c>)
20000ac6:	400a      	ands	r2, r1
20000ac8:	625a      	str	r2, [r3, #36]	; 0x24
}
20000aca:	46c0      	nop			; (mov r8, r8)
20000acc:	46bd      	mov	sp, r7
20000ace:	b002      	add	sp, #8
20000ad0:	bd80      	pop	{r7, pc}
20000ad2:	46c0      	nop			; (mov r8, r8)
20000ad4:	40023800 	andmi	r3, r2, r0, lsl #16

20000ad8 <RCC_AHB1PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockLPModeCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
20000ad8:	b580      	push	{r7, lr}
20000ada:	b082      	sub	sp, #8
20000adc:	af00      	add	r7, sp, #0
20000ade:	6078      	str	r0, [r7, #4]
20000ae0:	000a      	movs	r2, r1
20000ae2:	1cfb      	adds	r3, r7, #3
20000ae4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_LPMODE_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
20000ae6:	1cfb      	adds	r3, r7, #3
20000ae8:	781b      	ldrb	r3, [r3, #0]
20000aea:	2b00      	cmp	r3, #0
20000aec:	d006      	beq.n	20000afc <RCC_AHB1PeriphClockLPModeCmd+0x24>
  {
    RCC->AHB1LPENR |= RCC_AHB1Periph;
20000aee:	4b09      	ldr	r3, [pc, #36]	; (20000b14 <RCC_AHB1PeriphClockLPModeCmd+0x3c>)
20000af0:	6d19      	ldr	r1, [r3, #80]	; 0x50
20000af2:	4b08      	ldr	r3, [pc, #32]	; (20000b14 <RCC_AHB1PeriphClockLPModeCmd+0x3c>)
20000af4:	687a      	ldr	r2, [r7, #4]
20000af6:	430a      	orrs	r2, r1
20000af8:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    RCC->AHB1LPENR &= ~RCC_AHB1Periph;
  }
}
20000afa:	e006      	b.n	20000b0a <RCC_AHB1PeriphClockLPModeCmd+0x32>
    RCC->AHB1LPENR &= ~RCC_AHB1Periph;
20000afc:	4b05      	ldr	r3, [pc, #20]	; (20000b14 <RCC_AHB1PeriphClockLPModeCmd+0x3c>)
20000afe:	6d1a      	ldr	r2, [r3, #80]	; 0x50
20000b00:	687b      	ldr	r3, [r7, #4]
20000b02:	43d9      	mvns	r1, r3
20000b04:	4b03      	ldr	r3, [pc, #12]	; (20000b14 <RCC_AHB1PeriphClockLPModeCmd+0x3c>)
20000b06:	400a      	ands	r2, r1
20000b08:	651a      	str	r2, [r3, #80]	; 0x50
}
20000b0a:	46c0      	nop			; (mov r8, r8)
20000b0c:	46bd      	mov	sp, r7
20000b0e:	b002      	add	sp, #8
20000b10:	bd80      	pop	{r7, pc}
20000b12:	46c0      	nop			; (mov r8, r8)
20000b14:	40023800 	andmi	r3, r2, r0, lsl #16

20000b18 <RCC_AHB2PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB2PeriphClockLPModeCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
{
20000b18:	b580      	push	{r7, lr}
20000b1a:	b082      	sub	sp, #8
20000b1c:	af00      	add	r7, sp, #0
20000b1e:	6078      	str	r0, [r7, #4]
20000b20:	000a      	movs	r2, r1
20000b22:	1cfb      	adds	r3, r7, #3
20000b24:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
20000b26:	1cfb      	adds	r3, r7, #3
20000b28:	781b      	ldrb	r3, [r3, #0]
20000b2a:	2b00      	cmp	r3, #0
20000b2c:	d006      	beq.n	20000b3c <RCC_AHB2PeriphClockLPModeCmd+0x24>
  {
    RCC->AHB2LPENR |= RCC_AHB2Periph;
20000b2e:	4b09      	ldr	r3, [pc, #36]	; (20000b54 <RCC_AHB2PeriphClockLPModeCmd+0x3c>)
20000b30:	6d59      	ldr	r1, [r3, #84]	; 0x54
20000b32:	4b08      	ldr	r3, [pc, #32]	; (20000b54 <RCC_AHB2PeriphClockLPModeCmd+0x3c>)
20000b34:	687a      	ldr	r2, [r7, #4]
20000b36:	430a      	orrs	r2, r1
20000b38:	655a      	str	r2, [r3, #84]	; 0x54
  }
  else
  {
    RCC->AHB2LPENR &= ~RCC_AHB2Periph;
  }
}
20000b3a:	e006      	b.n	20000b4a <RCC_AHB2PeriphClockLPModeCmd+0x32>
    RCC->AHB2LPENR &= ~RCC_AHB2Periph;
20000b3c:	4b05      	ldr	r3, [pc, #20]	; (20000b54 <RCC_AHB2PeriphClockLPModeCmd+0x3c>)
20000b3e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
20000b40:	687b      	ldr	r3, [r7, #4]
20000b42:	43d9      	mvns	r1, r3
20000b44:	4b03      	ldr	r3, [pc, #12]	; (20000b54 <RCC_AHB2PeriphClockLPModeCmd+0x3c>)
20000b46:	400a      	ands	r2, r1
20000b48:	655a      	str	r2, [r3, #84]	; 0x54
}
20000b4a:	46c0      	nop			; (mov r8, r8)
20000b4c:	46bd      	mov	sp, r7
20000b4e:	b002      	add	sp, #8
20000b50:	bd80      	pop	{r7, pc}
20000b52:	46c0      	nop			; (mov r8, r8)
20000b54:	40023800 	andmi	r3, r2, r0, lsl #16

20000b58 <RCC_AHB3PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB3PeriphClockLPModeCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
{
20000b58:	b580      	push	{r7, lr}
20000b5a:	b082      	sub	sp, #8
20000b5c:	af00      	add	r7, sp, #0
20000b5e:	6078      	str	r0, [r7, #4]
20000b60:	000a      	movs	r2, r1
20000b62:	1cfb      	adds	r3, r7, #3
20000b64:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
20000b66:	1cfb      	adds	r3, r7, #3
20000b68:	781b      	ldrb	r3, [r3, #0]
20000b6a:	2b00      	cmp	r3, #0
20000b6c:	d006      	beq.n	20000b7c <RCC_AHB3PeriphClockLPModeCmd+0x24>
  {
    RCC->AHB3LPENR |= RCC_AHB3Periph;
20000b6e:	4b09      	ldr	r3, [pc, #36]	; (20000b94 <RCC_AHB3PeriphClockLPModeCmd+0x3c>)
20000b70:	6d99      	ldr	r1, [r3, #88]	; 0x58
20000b72:	4b08      	ldr	r3, [pc, #32]	; (20000b94 <RCC_AHB3PeriphClockLPModeCmd+0x3c>)
20000b74:	687a      	ldr	r2, [r7, #4]
20000b76:	430a      	orrs	r2, r1
20000b78:	659a      	str	r2, [r3, #88]	; 0x58
  }
  else
  {
    RCC->AHB3LPENR &= ~RCC_AHB3Periph;
  }
}
20000b7a:	e006      	b.n	20000b8a <RCC_AHB3PeriphClockLPModeCmd+0x32>
    RCC->AHB3LPENR &= ~RCC_AHB3Periph;
20000b7c:	4b05      	ldr	r3, [pc, #20]	; (20000b94 <RCC_AHB3PeriphClockLPModeCmd+0x3c>)
20000b7e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
20000b80:	687b      	ldr	r3, [r7, #4]
20000b82:	43d9      	mvns	r1, r3
20000b84:	4b03      	ldr	r3, [pc, #12]	; (20000b94 <RCC_AHB3PeriphClockLPModeCmd+0x3c>)
20000b86:	400a      	ands	r2, r1
20000b88:	659a      	str	r2, [r3, #88]	; 0x58
}
20000b8a:	46c0      	nop			; (mov r8, r8)
20000b8c:	46bd      	mov	sp, r7
20000b8e:	b002      	add	sp, #8
20000b90:	bd80      	pop	{r7, pc}
20000b92:	46c0      	nop			; (mov r8, r8)
20000b94:	40023800 	andmi	r3, r2, r0, lsl #16

20000b98 <RCC_APB1PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockLPModeCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
20000b98:	b580      	push	{r7, lr}
20000b9a:	b082      	sub	sp, #8
20000b9c:	af00      	add	r7, sp, #0
20000b9e:	6078      	str	r0, [r7, #4]
20000ba0:	000a      	movs	r2, r1
20000ba2:	1cfb      	adds	r3, r7, #3
20000ba4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
20000ba6:	1cfb      	adds	r3, r7, #3
20000ba8:	781b      	ldrb	r3, [r3, #0]
20000baa:	2b00      	cmp	r3, #0
20000bac:	d006      	beq.n	20000bbc <RCC_APB1PeriphClockLPModeCmd+0x24>
  {
    RCC->APB1LPENR |= RCC_APB1Periph;
20000bae:	4b09      	ldr	r3, [pc, #36]	; (20000bd4 <RCC_APB1PeriphClockLPModeCmd+0x3c>)
20000bb0:	6e19      	ldr	r1, [r3, #96]	; 0x60
20000bb2:	4b08      	ldr	r3, [pc, #32]	; (20000bd4 <RCC_APB1PeriphClockLPModeCmd+0x3c>)
20000bb4:	687a      	ldr	r2, [r7, #4]
20000bb6:	430a      	orrs	r2, r1
20000bb8:	661a      	str	r2, [r3, #96]	; 0x60
  }
  else
  {
    RCC->APB1LPENR &= ~RCC_APB1Periph;
  }
}
20000bba:	e006      	b.n	20000bca <RCC_APB1PeriphClockLPModeCmd+0x32>
    RCC->APB1LPENR &= ~RCC_APB1Periph;
20000bbc:	4b05      	ldr	r3, [pc, #20]	; (20000bd4 <RCC_APB1PeriphClockLPModeCmd+0x3c>)
20000bbe:	6e1a      	ldr	r2, [r3, #96]	; 0x60
20000bc0:	687b      	ldr	r3, [r7, #4]
20000bc2:	43d9      	mvns	r1, r3
20000bc4:	4b03      	ldr	r3, [pc, #12]	; (20000bd4 <RCC_APB1PeriphClockLPModeCmd+0x3c>)
20000bc6:	400a      	ands	r2, r1
20000bc8:	661a      	str	r2, [r3, #96]	; 0x60
}
20000bca:	46c0      	nop			; (mov r8, r8)
20000bcc:	46bd      	mov	sp, r7
20000bce:	b002      	add	sp, #8
20000bd0:	bd80      	pop	{r7, pc}
20000bd2:	46c0      	nop			; (mov r8, r8)
20000bd4:	40023800 	andmi	r3, r2, r0, lsl #16

20000bd8 <RCC_APB2PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockLPModeCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
20000bd8:	b580      	push	{r7, lr}
20000bda:	b082      	sub	sp, #8
20000bdc:	af00      	add	r7, sp, #0
20000bde:	6078      	str	r0, [r7, #4]
20000be0:	000a      	movs	r2, r1
20000be2:	1cfb      	adds	r3, r7, #3
20000be4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
20000be6:	1cfb      	adds	r3, r7, #3
20000be8:	781b      	ldrb	r3, [r3, #0]
20000bea:	2b00      	cmp	r3, #0
20000bec:	d006      	beq.n	20000bfc <RCC_APB2PeriphClockLPModeCmd+0x24>
  {
    RCC->APB2LPENR |= RCC_APB2Periph;
20000bee:	4b09      	ldr	r3, [pc, #36]	; (20000c14 <RCC_APB2PeriphClockLPModeCmd+0x3c>)
20000bf0:	6e59      	ldr	r1, [r3, #100]	; 0x64
20000bf2:	4b08      	ldr	r3, [pc, #32]	; (20000c14 <RCC_APB2PeriphClockLPModeCmd+0x3c>)
20000bf4:	687a      	ldr	r2, [r7, #4]
20000bf6:	430a      	orrs	r2, r1
20000bf8:	665a      	str	r2, [r3, #100]	; 0x64
  }
  else
  {
    RCC->APB2LPENR &= ~RCC_APB2Periph;
  }
}
20000bfa:	e006      	b.n	20000c0a <RCC_APB2PeriphClockLPModeCmd+0x32>
    RCC->APB2LPENR &= ~RCC_APB2Periph;
20000bfc:	4b05      	ldr	r3, [pc, #20]	; (20000c14 <RCC_APB2PeriphClockLPModeCmd+0x3c>)
20000bfe:	6e5a      	ldr	r2, [r3, #100]	; 0x64
20000c00:	687b      	ldr	r3, [r7, #4]
20000c02:	43d9      	mvns	r1, r3
20000c04:	4b03      	ldr	r3, [pc, #12]	; (20000c14 <RCC_APB2PeriphClockLPModeCmd+0x3c>)
20000c06:	400a      	ands	r2, r1
20000c08:	665a      	str	r2, [r3, #100]	; 0x64
}
20000c0a:	46c0      	nop			; (mov r8, r8)
20000c0c:	46bd      	mov	sp, r7
20000c0e:	b002      	add	sp, #8
20000c10:	bd80      	pop	{r7, pc}
20000c12:	46c0      	nop			; (mov r8, r8)
20000c14:	40023800 	andmi	r3, r2, r0, lsl #16

20000c18 <RCC_LSEModeConfig>:
  *            @arg RCC_LSE_LOWPOWER_MODE:  LSE oscillator in low power mode.
  *            @arg RCC_LSE_HIGHDRIVE_MODE: LSE oscillator in High Drive mode.
  * @retval None
  */
void RCC_LSEModeConfig(uint8_t RCC_Mode)
{
20000c18:	b580      	push	{r7, lr}
20000c1a:	b082      	sub	sp, #8
20000c1c:	af00      	add	r7, sp, #0
20000c1e:	0002      	movs	r2, r0
20000c20:	1dfb      	adds	r3, r7, #7
20000c22:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_LSE_MODE(RCC_Mode));
  
  if(RCC_Mode == RCC_LSE_HIGHDRIVE_MODE)
20000c24:	1dfb      	adds	r3, r7, #7
20000c26:	781b      	ldrb	r3, [r3, #0]
20000c28:	2b01      	cmp	r3, #1
20000c2a:	d106      	bne.n	20000c3a <RCC_LSEModeConfig+0x22>
  {
    SET_BIT(RCC->BDCR, RCC_BDCR_LSEMOD);
20000c2c:	4b08      	ldr	r3, [pc, #32]	; (20000c50 <RCC_LSEModeConfig+0x38>)
20000c2e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
20000c30:	4b07      	ldr	r3, [pc, #28]	; (20000c50 <RCC_LSEModeConfig+0x38>)
20000c32:	2108      	movs	r1, #8
20000c34:	430a      	orrs	r2, r1
20000c36:	671a      	str	r2, [r3, #112]	; 0x70
  }
  else
  {
    CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEMOD);
  }
}
20000c38:	e005      	b.n	20000c46 <RCC_LSEModeConfig+0x2e>
    CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEMOD);
20000c3a:	4b05      	ldr	r3, [pc, #20]	; (20000c50 <RCC_LSEModeConfig+0x38>)
20000c3c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
20000c3e:	4b04      	ldr	r3, [pc, #16]	; (20000c50 <RCC_LSEModeConfig+0x38>)
20000c40:	2108      	movs	r1, #8
20000c42:	438a      	bics	r2, r1
20000c44:	671a      	str	r2, [r3, #112]	; 0x70
}
20000c46:	46c0      	nop			; (mov r8, r8)
20000c48:	46bd      	mov	sp, r7
20000c4a:	b002      	add	sp, #8
20000c4c:	bd80      	pop	{r7, pc}
20000c4e:	46c0      	nop			; (mov r8, r8)
20000c50:	40023800 	andmi	r3, r2, r0, lsl #16

20000c54 <RCC_ITConfig>:
  * @param  NewState: new state of the specified RCC interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_ITConfig(uint8_t RCC_IT, FunctionalState NewState)
{
20000c54:	b580      	push	{r7, lr}
20000c56:	b082      	sub	sp, #8
20000c58:	af00      	add	r7, sp, #0
20000c5a:	0002      	movs	r2, r0
20000c5c:	1dfb      	adds	r3, r7, #7
20000c5e:	701a      	strb	r2, [r3, #0]
20000c60:	1dbb      	adds	r3, r7, #6
20000c62:	1c0a      	adds	r2, r1, #0
20000c64:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_IT(RCC_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
20000c66:	1dbb      	adds	r3, r7, #6
20000c68:	781b      	ldrb	r3, [r3, #0]
20000c6a:	2b00      	cmp	r3, #0
20000c6c:	d009      	beq.n	20000c82 <RCC_ITConfig+0x2e>
  {
    /* Perform Byte access to RCC_CIR[14:8] bits to enable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS |= RCC_IT;
20000c6e:	4b0c      	ldr	r3, [pc, #48]	; (20000ca0 <RCC_ITConfig+0x4c>)
20000c70:	781b      	ldrb	r3, [r3, #0]
20000c72:	b2da      	uxtb	r2, r3
20000c74:	490a      	ldr	r1, [pc, #40]	; (20000ca0 <RCC_ITConfig+0x4c>)
20000c76:	1dfb      	adds	r3, r7, #7
20000c78:	781b      	ldrb	r3, [r3, #0]
20000c7a:	4313      	orrs	r3, r2
20000c7c:	b2db      	uxtb	r3, r3
20000c7e:	700b      	strb	r3, [r1, #0]
  else
  {
    /* Perform Byte access to RCC_CIR[14:8] bits to disable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS &= (uint8_t)~RCC_IT;
  }
}
20000c80:	e00a      	b.n	20000c98 <RCC_ITConfig+0x44>
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS &= (uint8_t)~RCC_IT;
20000c82:	4b07      	ldr	r3, [pc, #28]	; (20000ca0 <RCC_ITConfig+0x4c>)
20000c84:	781b      	ldrb	r3, [r3, #0]
20000c86:	b2db      	uxtb	r3, r3
20000c88:	1dfa      	adds	r2, r7, #7
20000c8a:	7812      	ldrb	r2, [r2, #0]
20000c8c:	43d2      	mvns	r2, r2
20000c8e:	b2d2      	uxtb	r2, r2
20000c90:	4903      	ldr	r1, [pc, #12]	; (20000ca0 <RCC_ITConfig+0x4c>)
20000c92:	4013      	ands	r3, r2
20000c94:	b2db      	uxtb	r3, r3
20000c96:	700b      	strb	r3, [r1, #0]
}
20000c98:	46c0      	nop			; (mov r8, r8)
20000c9a:	46bd      	mov	sp, r7
20000c9c:	b002      	add	sp, #8
20000c9e:	bd80      	pop	{r7, pc}
20000ca0:	4002380d 	andmi	r3, r2, sp, lsl #16

20000ca4 <RCC_GetFlagStatus>:
  *            @arg RCC_FLAG_WWDGRST: Window Watchdog reset
  *            @arg RCC_FLAG_LPWRRST: Low Power reset
  * @retval The new state of RCC_FLAG (SET or RESET).
  */
FlagStatus RCC_GetFlagStatus(uint8_t RCC_FLAG)
{
20000ca4:	b580      	push	{r7, lr}
20000ca6:	b086      	sub	sp, #24
20000ca8:	af00      	add	r7, sp, #0
20000caa:	0002      	movs	r2, r0
20000cac:	1dfb      	adds	r3, r7, #7
20000cae:	701a      	strb	r2, [r3, #0]
  uint32_t tmp = 0;
20000cb0:	2300      	movs	r3, #0
20000cb2:	60fb      	str	r3, [r7, #12]
  uint32_t statusreg = 0;
20000cb4:	2300      	movs	r3, #0
20000cb6:	617b      	str	r3, [r7, #20]
  FlagStatus bitstatus = RESET;
20000cb8:	2313      	movs	r3, #19
20000cba:	18fb      	adds	r3, r7, r3
20000cbc:	2200      	movs	r2, #0
20000cbe:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_FLAG(RCC_FLAG));

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
20000cc0:	1dfb      	adds	r3, r7, #7
20000cc2:	781b      	ldrb	r3, [r3, #0]
20000cc4:	095b      	lsrs	r3, r3, #5
20000cc6:	b2db      	uxtb	r3, r3
20000cc8:	60fb      	str	r3, [r7, #12]
  if (tmp == 1)               /* The flag to check is in CR register */
20000cca:	68fb      	ldr	r3, [r7, #12]
20000ccc:	2b01      	cmp	r3, #1
20000cce:	d103      	bne.n	20000cd8 <RCC_GetFlagStatus+0x34>
  {
    statusreg = RCC->CR;
20000cd0:	4b14      	ldr	r3, [pc, #80]	; (20000d24 <RCC_GetFlagStatus+0x80>)
20000cd2:	681b      	ldr	r3, [r3, #0]
20000cd4:	617b      	str	r3, [r7, #20]
20000cd6:	e009      	b.n	20000cec <RCC_GetFlagStatus+0x48>
  }
  else if (tmp == 2)          /* The flag to check is in BDCR register */
20000cd8:	68fb      	ldr	r3, [r7, #12]
20000cda:	2b02      	cmp	r3, #2
20000cdc:	d103      	bne.n	20000ce6 <RCC_GetFlagStatus+0x42>
  {
    statusreg = RCC->BDCR;
20000cde:	4b11      	ldr	r3, [pc, #68]	; (20000d24 <RCC_GetFlagStatus+0x80>)
20000ce0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
20000ce2:	617b      	str	r3, [r7, #20]
20000ce4:	e002      	b.n	20000cec <RCC_GetFlagStatus+0x48>
  }
  else                       /* The flag to check is in CSR register */
  {
    statusreg = RCC->CSR;
20000ce6:	4b0f      	ldr	r3, [pc, #60]	; (20000d24 <RCC_GetFlagStatus+0x80>)
20000ce8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
20000cea:	617b      	str	r3, [r7, #20]
  }

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_MASK;
20000cec:	1dfb      	adds	r3, r7, #7
20000cee:	781b      	ldrb	r3, [r3, #0]
20000cf0:	221f      	movs	r2, #31
20000cf2:	4013      	ands	r3, r2
20000cf4:	60fb      	str	r3, [r7, #12]
  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
20000cf6:	697a      	ldr	r2, [r7, #20]
20000cf8:	68fb      	ldr	r3, [r7, #12]
20000cfa:	40da      	lsrs	r2, r3
20000cfc:	0013      	movs	r3, r2
20000cfe:	2201      	movs	r2, #1
20000d00:	4013      	ands	r3, r2
20000d02:	d004      	beq.n	20000d0e <RCC_GetFlagStatus+0x6a>
  {
    bitstatus = SET;
20000d04:	2313      	movs	r3, #19
20000d06:	18fb      	adds	r3, r7, r3
20000d08:	2201      	movs	r2, #1
20000d0a:	701a      	strb	r2, [r3, #0]
20000d0c:	e003      	b.n	20000d16 <RCC_GetFlagStatus+0x72>
  }
  else
  {
    bitstatus = RESET;
20000d0e:	2313      	movs	r3, #19
20000d10:	18fb      	adds	r3, r7, r3
20000d12:	2200      	movs	r2, #0
20000d14:	701a      	strb	r2, [r3, #0]
  }
  /* Return the flag status */
  return bitstatus;
20000d16:	2313      	movs	r3, #19
20000d18:	18fb      	adds	r3, r7, r3
20000d1a:	781b      	ldrb	r3, [r3, #0]
}
20000d1c:	0018      	movs	r0, r3
20000d1e:	46bd      	mov	sp, r7
20000d20:	b006      	add	sp, #24
20000d22:	bd80      	pop	{r7, pc}
20000d24:	40023800 	andmi	r3, r2, r0, lsl #16

20000d28 <RCC_ClearFlag>:
  *         RCC_FLAG_IWDGRST, RCC_FLAG_WWDGRST, RCC_FLAG_LPWRRST
  * @param  None
  * @retval None
  */
void RCC_ClearFlag(void)
{
20000d28:	b580      	push	{r7, lr}
20000d2a:	af00      	add	r7, sp, #0
  /* Set RMVF bit to clear the reset flags */
  RCC->CSR |= RCC_CSR_RMVF;
20000d2c:	4b04      	ldr	r3, [pc, #16]	; (20000d40 <RCC_ClearFlag+0x18>)
20000d2e:	6f5a      	ldr	r2, [r3, #116]	; 0x74
20000d30:	4b03      	ldr	r3, [pc, #12]	; (20000d40 <RCC_ClearFlag+0x18>)
20000d32:	2180      	movs	r1, #128	; 0x80
20000d34:	0449      	lsls	r1, r1, #17
20000d36:	430a      	orrs	r2, r1
20000d38:	675a      	str	r2, [r3, #116]	; 0x74
}
20000d3a:	46c0      	nop			; (mov r8, r8)
20000d3c:	46bd      	mov	sp, r7
20000d3e:	bd80      	pop	{r7, pc}
20000d40:	40023800 	andmi	r3, r2, r0, lsl #16

20000d44 <RCC_GetITStatus>:
  *            @arg RCC_IT_PLLSAIRDY: PLLSAI clock ready interrupt (only for STM32F42xxx/43xxx/446xx/469xx/479xx devices)
  *            @arg RCC_IT_CSS: Clock Security System interrupt
  * @retval The new state of RCC_IT (SET or RESET).
  */
ITStatus RCC_GetITStatus(uint8_t RCC_IT)
{
20000d44:	b580      	push	{r7, lr}
20000d46:	b084      	sub	sp, #16
20000d48:	af00      	add	r7, sp, #0
20000d4a:	0002      	movs	r2, r0
20000d4c:	1dfb      	adds	r3, r7, #7
20000d4e:	701a      	strb	r2, [r3, #0]
  ITStatus bitstatus = RESET;
20000d50:	230f      	movs	r3, #15
20000d52:	18fb      	adds	r3, r7, r3
20000d54:	2200      	movs	r2, #0
20000d56:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_GET_IT(RCC_IT));

  /* Check the status of the specified RCC interrupt */
  if ((RCC->CIR & RCC_IT) != (uint32_t)RESET)
20000d58:	4b0a      	ldr	r3, [pc, #40]	; (20000d84 <RCC_GetITStatus+0x40>)
20000d5a:	68db      	ldr	r3, [r3, #12]
20000d5c:	1dfa      	adds	r2, r7, #7
20000d5e:	7812      	ldrb	r2, [r2, #0]
20000d60:	4013      	ands	r3, r2
20000d62:	d004      	beq.n	20000d6e <RCC_GetITStatus+0x2a>
  {
    bitstatus = SET;
20000d64:	230f      	movs	r3, #15
20000d66:	18fb      	adds	r3, r7, r3
20000d68:	2201      	movs	r2, #1
20000d6a:	701a      	strb	r2, [r3, #0]
20000d6c:	e003      	b.n	20000d76 <RCC_GetITStatus+0x32>
  }
  else
  {
    bitstatus = RESET;
20000d6e:	230f      	movs	r3, #15
20000d70:	18fb      	adds	r3, r7, r3
20000d72:	2200      	movs	r2, #0
20000d74:	701a      	strb	r2, [r3, #0]
  }
  /* Return the RCC_IT status */
  return  bitstatus;
20000d76:	230f      	movs	r3, #15
20000d78:	18fb      	adds	r3, r7, r3
20000d7a:	781b      	ldrb	r3, [r3, #0]
}
20000d7c:	0018      	movs	r0, r3
20000d7e:	46bd      	mov	sp, r7
20000d80:	b004      	add	sp, #16
20000d82:	bd80      	pop	{r7, pc}
20000d84:	40023800 	andmi	r3, r2, r0, lsl #16

20000d88 <RCC_ClearITPendingBit>:
  *            @arg RCC_IT_PLLSAIRDY: PLLSAI ready interrupt (only for STM32F42xxx/43xxx/446xx/469xx/479xx devices) 
  *            @arg RCC_IT_CSS: Clock Security System interrupt
  * @retval None
  */
void RCC_ClearITPendingBit(uint8_t RCC_IT)
{
20000d88:	b580      	push	{r7, lr}
20000d8a:	b082      	sub	sp, #8
20000d8c:	af00      	add	r7, sp, #0
20000d8e:	0002      	movs	r2, r0
20000d90:	1dfb      	adds	r3, r7, #7
20000d92:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_CLEAR_IT(RCC_IT));

  /* Perform Byte access to RCC_CIR[23:16] bits to clear the selected interrupt
     pending bits */
  *(__IO uint8_t *) CIR_BYTE3_ADDRESS = RCC_IT;
20000d94:	4a03      	ldr	r2, [pc, #12]	; (20000da4 <RCC_ClearITPendingBit+0x1c>)
20000d96:	1dfb      	adds	r3, r7, #7
20000d98:	781b      	ldrb	r3, [r3, #0]
20000d9a:	7013      	strb	r3, [r2, #0]
}
20000d9c:	46c0      	nop			; (mov r8, r8)
20000d9e:	46bd      	mov	sp, r7
20000da0:	b002      	add	sp, #8
20000da2:	bd80      	pop	{r7, pc}
20000da4:	4002380e 	andmi	r3, r2, lr, lsl #16

20000da8 <app_init>:

volatile uint32_t msTicks = 0; /* Variable to store millisecond ticks */
void app_init(void){
20000da8:	b580      	push	{r7, lr}
20000daa:	af00      	add	r7, sp, #0
	//TEST 123
}
20000dac:	46c0      	nop			; (mov r8, r8)
20000dae:	46bd      	mov	sp, r7
20000db0:	bd80      	pop	{r7, pc}

20000db2 <init_GPIO_Ports>:
void init_GPIO_Ports()
{
20000db2:	b580      	push	{r7, lr}
20000db4:	b082      	sub	sp, #8
20000db6:	af00      	add	r7, sp, #0
	/*  Function used to set the GPIO configuration to the default reset state ****/
	GPIO_InitTypeDef init;
	//GPIO A UTPORTAR
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
20000db8:	2101      	movs	r1, #1
20000dba:	2001      	movs	r0, #1
20000dbc:	f7ff fd4c 	bl	20000858 <RCC_AHB1PeriphClockCmd>
	GPIO_StructInit(&init);
20000dc0:	003b      	movs	r3, r7
20000dc2:	0018      	movs	r0, r3
20000dc4:	f000 face 	bl	20001364 <GPIO_StructInit>
	init.GPIO_Pin = GPIO_Pin_1 | GPIO_Pin_3 | GPIO_Pin_5 | GPIO_Pin_7;
20000dc8:	003b      	movs	r3, r7
20000dca:	22aa      	movs	r2, #170	; 0xaa
20000dcc:	601a      	str	r2, [r3, #0]
	init.GPIO_Mode = GPIO_Mode_OUT;
20000dce:	003b      	movs	r3, r7
20000dd0:	2201      	movs	r2, #1
20000dd2:	711a      	strb	r2, [r3, #4]
	init.GPIO_OType = GPIO_OType_PP;
20000dd4:	003b      	movs	r3, r7
20000dd6:	2200      	movs	r2, #0
20000dd8:	719a      	strb	r2, [r3, #6]
	GPIO_Init(GPIOA, &init);
20000dda:	003b      	movs	r3, r7
20000ddc:	4a0d      	ldr	r2, [pc, #52]	; (20000e14 <init_GPIO_Ports+0x62>)
20000dde:	0019      	movs	r1, r3
20000de0:	0010      	movs	r0, r2
20000de2:	f000 fa33 	bl	2000124c <GPIO_Init>

	//konfigurerar inport GPIO A
	GPIO_StructInit(&init);
20000de6:	003b      	movs	r3, r7
20000de8:	0018      	movs	r0, r3
20000dea:	f000 fabb 	bl	20001364 <GPIO_StructInit>
	init.GPIO_Pin = GPIO_Pin_0 | GPIO_Pin_2 | GPIO_Pin_4 | GPIO_Pin_6;
20000dee:	003b      	movs	r3, r7
20000df0:	2255      	movs	r2, #85	; 0x55
20000df2:	601a      	str	r2, [r3, #0]
	init.GPIO_Mode = GPIO_Mode_IN;
20000df4:	003b      	movs	r3, r7
20000df6:	2200      	movs	r2, #0
20000df8:	711a      	strb	r2, [r3, #4]
	init.GPIO_PuPd = GPIO_PuPd_UP;
20000dfa:	003b      	movs	r3, r7
20000dfc:	2201      	movs	r2, #1
20000dfe:	71da      	strb	r2, [r3, #7]
	GPIO_Init(GPIOA, &init);
20000e00:	003b      	movs	r3, r7
20000e02:	4a04      	ldr	r2, [pc, #16]	; (20000e14 <init_GPIO_Ports+0x62>)
20000e04:	0019      	movs	r1, r3
20000e06:	0010      	movs	r0, r2
20000e08:	f000 fa20 	bl	2000124c <GPIO_Init>
}
20000e0c:	46c0      	nop			; (mov r8, r8)
20000e0e:	46bd      	mov	sp, r7
20000e10:	b002      	add	sp, #8
20000e12:	bd80      	pop	{r7, pc}
20000e14:	40020000 	andmi	r0, r2, r0

20000e18 <SysTick_Handler>:
void SysTick_Handler(void)
{ /* SysTick interrupt Handler. */
20000e18:	b580      	push	{r7, lr}
20000e1a:	af00      	add	r7, sp, #0
	msTicks++;
20000e1c:	4b03      	ldr	r3, [pc, #12]	; (20000e2c <SysTick_Handler+0x14>)
20000e1e:	681b      	ldr	r3, [r3, #0]
20000e20:	1c5a      	adds	r2, r3, #1
20000e22:	4b02      	ldr	r3, [pc, #8]	; (20000e2c <SysTick_Handler+0x14>)
20000e24:	601a      	str	r2, [r3, #0]
}
20000e26:	46c0      	nop			; (mov r8, r8)
20000e28:	46bd      	mov	sp, r7
20000e2a:	bd80      	pop	{r7, pc}
20000e2c:	200026f0 	strdcs	r2, [r0], -r0

20000e30 <systick_Init>:

void systick_Init(void)
{
20000e30:	b580      	push	{r7, lr}
20000e32:	b082      	sub	sp, #8
20000e34:	af00      	add	r7, sp, #0
	// Initiera SysTick.
	*((void (**)(void))0x2001C03C) = SysTick_Handler;
20000e36:	4b06      	ldr	r3, [pc, #24]	; (20000e50 <systick_Init+0x20>)
20000e38:	4a06      	ldr	r2, [pc, #24]	; (20000e54 <systick_Init+0x24>)
20000e3a:	601a      	str	r2, [r3, #0]
	uint32_t returnCode;
	returnCode = SysTick_Config(168000000 / 1000); // Genererar ett SysTick-avbrott varje ms.
20000e3c:	4b06      	ldr	r3, [pc, #24]	; (20000e58 <systick_Init+0x28>)
20000e3e:	0018      	movs	r0, r3
20000e40:	f7ff f916 	bl	20000070 <SysTick_Config>
20000e44:	0003      	movs	r3, r0
20000e46:	607b      	str	r3, [r7, #4]

	if (returnCode != 0)
	{   // Om inte SysTick_Config lyckas...
		//typ reboot? bootloops är alltid kul
	}
}
20000e48:	46c0      	nop			; (mov r8, r8)
20000e4a:	46bd      	mov	sp, r7
20000e4c:	b002      	add	sp, #8
20000e4e:	bd80      	pop	{r7, pc}
20000e50:	2001c03c 	andcs	ip, r1, ip, lsr r0
20000e54:	20000e19 	andcs	r0, r0, r9, lsl lr
20000e58:	00029040 	andeq	r9, r2, r0, asr #32

20000e5c <main>:

void main(void)
{
20000e5c:	b5f0      	push	{r4, r5, r6, r7, lr}
20000e5e:	b0bb      	sub	sp, #236	; 0xec
20000e60:	af00      	add	r7, sp, #0
	init_GPIO_Ports();
20000e62:	f7ff ffa6 	bl	20000db2 <init_GPIO_Ports>
	systick_Init();
20000e66:	f7ff ffe3 	bl	20000e30 <systick_Init>
//	DebugPrintInit();

	door test1 = {.id = 0, .controlbits = 0, .time_larm = 1, .time_central_larm = 2, .password = 0, .GPIO_lamp = GPIO_Pin_3, .GPIO_read = GPIO_Pin_2, .larmTick = 0};
20000e6a:	21c4      	movs	r1, #196	; 0xc4
20000e6c:	187b      	adds	r3, r7, r1
20000e6e:	4a93      	ldr	r2, [pc, #588]	; (200010bc <main+0x260>)
20000e70:	ca31      	ldmia	r2!, {r0, r4, r5}
20000e72:	c331      	stmia	r3!, {r0, r4, r5}
20000e74:	ca31      	ldmia	r2!, {r0, r4, r5}
20000e76:	c331      	stmia	r3!, {r0, r4, r5}
20000e78:	6812      	ldr	r2, [r2, #0]
20000e7a:	601a      	str	r2, [r3, #0]
	door test2 = {.id = 1, .controlbits = 0, .time_larm = 1, .time_central_larm = 2, .password = 0, .GPIO_lamp = GPIO_Pin_5, .GPIO_read = GPIO_Pin_4, .larmTick = 0};
20000e7c:	20a8      	movs	r0, #168	; 0xa8
20000e7e:	183b      	adds	r3, r7, r0
20000e80:	4a8f      	ldr	r2, [pc, #572]	; (200010c0 <main+0x264>)
20000e82:	ca70      	ldmia	r2!, {r4, r5, r6}
20000e84:	c370      	stmia	r3!, {r4, r5, r6}
20000e86:	ca70      	ldmia	r2!, {r4, r5, r6}
20000e88:	c370      	stmia	r3!, {r4, r5, r6}
20000e8a:	6812      	ldr	r2, [r2, #0]
20000e8c:	601a      	str	r2, [r3, #0]
	door test3 = {.id = 2, .controlbits = 0, .time_larm = 1, .time_central_larm = 2, .password = 0, .GPIO_lamp = GPIO_Pin_1, .GPIO_read = GPIO_Pin_0, .larmTick = 0};
20000e8e:	248c      	movs	r4, #140	; 0x8c
20000e90:	193b      	adds	r3, r7, r4
20000e92:	4a8c      	ldr	r2, [pc, #560]	; (200010c4 <main+0x268>)
20000e94:	ca62      	ldmia	r2!, {r1, r5, r6}
20000e96:	c362      	stmia	r3!, {r1, r5, r6}
20000e98:	ca62      	ldmia	r2!, {r1, r5, r6}
20000e9a:	c362      	stmia	r3!, {r1, r5, r6}
20000e9c:	6812      	ldr	r2, [r2, #0]
20000e9e:	601a      	str	r2, [r3, #0]
	door test4 = {.id = 3, .controlbits = 0, .time_larm = 1, .time_central_larm = 2, .password = 0, .GPIO_lamp = GPIO_Pin_7, .GPIO_read = GPIO_Pin_6, .larmTick = 0};
20000ea0:	2570      	movs	r5, #112	; 0x70
20000ea2:	197b      	adds	r3, r7, r5
20000ea4:	4a88      	ldr	r2, [pc, #544]	; (200010c8 <main+0x26c>)
20000ea6:	ca43      	ldmia	r2!, {r0, r1, r6}
20000ea8:	c343      	stmia	r3!, {r0, r1, r6}
20000eaa:	ca43      	ldmia	r2!, {r0, r1, r6}
20000eac:	c343      	stmia	r3!, {r0, r1, r6}
20000eae:	6812      	ldr	r2, [r2, #0]
20000eb0:	601a      	str	r2, [r3, #0]

	door active_doors[4] = {test1,test2,test3,test4};
20000eb2:	003b      	movs	r3, r7
20000eb4:	21c4      	movs	r1, #196	; 0xc4
20000eb6:	187a      	adds	r2, r7, r1
20000eb8:	ca43      	ldmia	r2!, {r0, r1, r6}
20000eba:	c343      	stmia	r3!, {r0, r1, r6}
20000ebc:	ca43      	ldmia	r2!, {r0, r1, r6}
20000ebe:	c343      	stmia	r3!, {r0, r1, r6}
20000ec0:	6812      	ldr	r2, [r2, #0]
20000ec2:	601a      	str	r2, [r3, #0]
20000ec4:	003b      	movs	r3, r7
20000ec6:	20a8      	movs	r0, #168	; 0xa8
20000ec8:	183a      	adds	r2, r7, r0
20000eca:	331c      	adds	r3, #28
20000ecc:	ca43      	ldmia	r2!, {r0, r1, r6}
20000ece:	c343      	stmia	r3!, {r0, r1, r6}
20000ed0:	ca43      	ldmia	r2!, {r0, r1, r6}
20000ed2:	c343      	stmia	r3!, {r0, r1, r6}
20000ed4:	6812      	ldr	r2, [r2, #0]
20000ed6:	601a      	str	r2, [r3, #0]
20000ed8:	003b      	movs	r3, r7
20000eda:	193a      	adds	r2, r7, r4
20000edc:	3338      	adds	r3, #56	; 0x38
20000ede:	ca13      	ldmia	r2!, {r0, r1, r4}
20000ee0:	c313      	stmia	r3!, {r0, r1, r4}
20000ee2:	ca13      	ldmia	r2!, {r0, r1, r4}
20000ee4:	c313      	stmia	r3!, {r0, r1, r4}
20000ee6:	6812      	ldr	r2, [r2, #0]
20000ee8:	601a      	str	r2, [r3, #0]
20000eea:	003b      	movs	r3, r7
20000eec:	197a      	adds	r2, r7, r5
20000eee:	3354      	adds	r3, #84	; 0x54
20000ef0:	ca13      	ldmia	r2!, {r0, r1, r4}
20000ef2:	c313      	stmia	r3!, {r0, r1, r4}
20000ef4:	ca13      	ldmia	r2!, {r0, r1, r4}
20000ef6:	c313      	stmia	r3!, {r0, r1, r4}
20000ef8:	6812      	ldr	r2, [r2, #0]
20000efa:	601a      	str	r2, [r3, #0]

	while (1)
	{
		for (int i = 0; i < sizeof(active_doors); i++)
20000efc:	2300      	movs	r3, #0
20000efe:	22e4      	movs	r2, #228	; 0xe4
20000f00:	18ba      	adds	r2, r7, r2
20000f02:	6013      	str	r3, [r2, #0]
20000f04:	e0d3      	b.n	200010ae <main+0x252>
		{
			if(GPIO_ReadInputDataBit(GPIOA, active_doors[i].GPIO_read)){
20000f06:	0039      	movs	r1, r7
20000f08:	23e4      	movs	r3, #228	; 0xe4
20000f0a:	18fb      	adds	r3, r7, r3
20000f0c:	681a      	ldr	r2, [r3, #0]
20000f0e:	0013      	movs	r3, r2
20000f10:	00db      	lsls	r3, r3, #3
20000f12:	1a9b      	subs	r3, r3, r2
20000f14:	009b      	lsls	r3, r3, #2
20000f16:	18cb      	adds	r3, r1, r3
20000f18:	3314      	adds	r3, #20
20000f1a:	681b      	ldr	r3, [r3, #0]
20000f1c:	b29b      	uxth	r3, r3
20000f1e:	4a6b      	ldr	r2, [pc, #428]	; (200010cc <main+0x270>)
20000f20:	0019      	movs	r1, r3
20000f22:	0010      	movs	r0, r2
20000f24:	f000 fa5b 	bl	200013de <GPIO_ReadInputDataBit>
20000f28:	1e03      	subs	r3, r0, #0
20000f2a:	d018      	beq.n	20000f5e <main+0x102>
				active_doors[i].controlbits &= 0xFFFE; //borde va så!
20000f2c:	0039      	movs	r1, r7
20000f2e:	24e4      	movs	r4, #228	; 0xe4
20000f30:	193b      	adds	r3, r7, r4
20000f32:	681a      	ldr	r2, [r3, #0]
20000f34:	0013      	movs	r3, r2
20000f36:	00db      	lsls	r3, r3, #3
20000f38:	1a9b      	subs	r3, r3, r2
20000f3a:	009b      	lsls	r3, r3, #2
20000f3c:	18cb      	adds	r3, r1, r3
20000f3e:	3304      	adds	r3, #4
20000f40:	681b      	ldr	r3, [r3, #0]
20000f42:	4a63      	ldr	r2, [pc, #396]	; (200010d0 <main+0x274>)
20000f44:	4013      	ands	r3, r2
20000f46:	0019      	movs	r1, r3
20000f48:	0038      	movs	r0, r7
20000f4a:	193b      	adds	r3, r7, r4
20000f4c:	681a      	ldr	r2, [r3, #0]
20000f4e:	0013      	movs	r3, r2
20000f50:	00db      	lsls	r3, r3, #3
20000f52:	1a9b      	subs	r3, r3, r2
20000f54:	009b      	lsls	r3, r3, #2
20000f56:	18c3      	adds	r3, r0, r3
20000f58:	3304      	adds	r3, #4
20000f5a:	6019      	str	r1, [r3, #0]
20000f5c:	e032      	b.n	20000fc4 <main+0x168>
				//GPIO_ResetBits(GPIOA, active_doors[i].GPIO_lamp);
			} else{
				if(!active_doors[i].controlbits & 1){
20000f5e:	0039      	movs	r1, r7
20000f60:	23e4      	movs	r3, #228	; 0xe4
20000f62:	18fb      	adds	r3, r7, r3
20000f64:	681a      	ldr	r2, [r3, #0]
20000f66:	0013      	movs	r3, r2
20000f68:	00db      	lsls	r3, r3, #3
20000f6a:	1a9b      	subs	r3, r3, r2
20000f6c:	009b      	lsls	r3, r3, #2
20000f6e:	18cb      	adds	r3, r1, r3
20000f70:	3304      	adds	r3, #4
20000f72:	681b      	ldr	r3, [r3, #0]
20000f74:	2b00      	cmp	r3, #0
20000f76:	d10d      	bne.n	20000f94 <main+0x138>
					active_doors[i].larmTick = msTicks;
20000f78:	4b56      	ldr	r3, [pc, #344]	; (200010d4 <main+0x278>)
20000f7a:	681b      	ldr	r3, [r3, #0]
20000f7c:	0018      	movs	r0, r3
20000f7e:	0039      	movs	r1, r7
20000f80:	23e4      	movs	r3, #228	; 0xe4
20000f82:	18fb      	adds	r3, r7, r3
20000f84:	681a      	ldr	r2, [r3, #0]
20000f86:	0013      	movs	r3, r2
20000f88:	00db      	lsls	r3, r3, #3
20000f8a:	1a9b      	subs	r3, r3, r2
20000f8c:	009b      	lsls	r3, r3, #2
20000f8e:	18cb      	adds	r3, r1, r3
20000f90:	3318      	adds	r3, #24
20000f92:	6018      	str	r0, [r3, #0]
				}
				active_doors[i].controlbits |= 1;
20000f94:	0039      	movs	r1, r7
20000f96:	24e4      	movs	r4, #228	; 0xe4
20000f98:	193b      	adds	r3, r7, r4
20000f9a:	681a      	ldr	r2, [r3, #0]
20000f9c:	0013      	movs	r3, r2
20000f9e:	00db      	lsls	r3, r3, #3
20000fa0:	1a9b      	subs	r3, r3, r2
20000fa2:	009b      	lsls	r3, r3, #2
20000fa4:	18cb      	adds	r3, r1, r3
20000fa6:	3304      	adds	r3, #4
20000fa8:	681b      	ldr	r3, [r3, #0]
20000faa:	2201      	movs	r2, #1
20000fac:	431a      	orrs	r2, r3
20000fae:	0011      	movs	r1, r2
20000fb0:	0038      	movs	r0, r7
20000fb2:	193b      	adds	r3, r7, r4
20000fb4:	681a      	ldr	r2, [r3, #0]
20000fb6:	0013      	movs	r3, r2
20000fb8:	00db      	lsls	r3, r3, #3
20000fba:	1a9b      	subs	r3, r3, r2
20000fbc:	009b      	lsls	r3, r3, #2
20000fbe:	18c3      	adds	r3, r0, r3
20000fc0:	3304      	adds	r3, #4
20000fc2:	6019      	str	r1, [r3, #0]

				//GPIO_SetBits(GPIOA, active_doors[i].GPIO_lamp);
				}
				
		for (int i = 0; i < sizeof(active_doors); i++)
20000fc4:	2300      	movs	r3, #0
20000fc6:	22e0      	movs	r2, #224	; 0xe0
20000fc8:	18ba      	adds	r2, r7, r2
20000fca:	6013      	str	r3, [r2, #0]
20000fcc:	e064      	b.n	20001098 <main+0x23c>
		{ 
			if (active_doors[i].controlbits & 1 && msTicks > (active_doors[i].larmTick + 1000*10* active_doors[i].time_larm))
20000fce:	0039      	movs	r1, r7
20000fd0:	23e0      	movs	r3, #224	; 0xe0
20000fd2:	18fb      	adds	r3, r7, r3
20000fd4:	681a      	ldr	r2, [r3, #0]
20000fd6:	0013      	movs	r3, r2
20000fd8:	00db      	lsls	r3, r3, #3
20000fda:	1a9b      	subs	r3, r3, r2
20000fdc:	009b      	lsls	r3, r3, #2
20000fde:	18cb      	adds	r3, r1, r3
20000fe0:	3304      	adds	r3, #4
20000fe2:	681b      	ldr	r3, [r3, #0]
20000fe4:	2201      	movs	r2, #1
20000fe6:	4013      	ands	r3, r2
20000fe8:	d02f      	beq.n	2000104a <main+0x1ee>
20000fea:	0039      	movs	r1, r7
20000fec:	24e0      	movs	r4, #224	; 0xe0
20000fee:	193b      	adds	r3, r7, r4
20000ff0:	681a      	ldr	r2, [r3, #0]
20000ff2:	0013      	movs	r3, r2
20000ff4:	00db      	lsls	r3, r3, #3
20000ff6:	1a9b      	subs	r3, r3, r2
20000ff8:	009b      	lsls	r3, r3, #2
20000ffa:	18cb      	adds	r3, r1, r3
20000ffc:	3318      	adds	r3, #24
20000ffe:	6819      	ldr	r1, [r3, #0]
20001000:	0038      	movs	r0, r7
20001002:	193b      	adds	r3, r7, r4
20001004:	681a      	ldr	r2, [r3, #0]
20001006:	0013      	movs	r3, r2
20001008:	00db      	lsls	r3, r3, #3
2000100a:	1a9b      	subs	r3, r3, r2
2000100c:	009b      	lsls	r3, r3, #2
2000100e:	18c3      	adds	r3, r0, r3
20001010:	3308      	adds	r3, #8
20001012:	781b      	ldrb	r3, [r3, #0]
20001014:	001a      	movs	r2, r3
20001016:	4b30      	ldr	r3, [pc, #192]	; (200010d8 <main+0x27c>)
20001018:	4353      	muls	r3, r2
2000101a:	18cb      	adds	r3, r1, r3
2000101c:	001a      	movs	r2, r3
2000101e:	4b2d      	ldr	r3, [pc, #180]	; (200010d4 <main+0x278>)
20001020:	681b      	ldr	r3, [r3, #0]
20001022:	429a      	cmp	r2, r3
20001024:	d211      	bcs.n	2000104a <main+0x1ee>
			{
				GPIO_SetBits(GPIOA, active_doors[i].GPIO_lamp);
20001026:	0039      	movs	r1, r7
20001028:	23e0      	movs	r3, #224	; 0xe0
2000102a:	18fb      	adds	r3, r7, r3
2000102c:	681a      	ldr	r2, [r3, #0]
2000102e:	0013      	movs	r3, r2
20001030:	00db      	lsls	r3, r3, #3
20001032:	1a9b      	subs	r3, r3, r2
20001034:	009b      	lsls	r3, r3, #2
20001036:	18cb      	adds	r3, r1, r3
20001038:	3310      	adds	r3, #16
2000103a:	681b      	ldr	r3, [r3, #0]
2000103c:	b29b      	uxth	r3, r3
2000103e:	4a23      	ldr	r2, [pc, #140]	; (200010cc <main+0x270>)
20001040:	0019      	movs	r1, r3
20001042:	0010      	movs	r0, r2
20001044:	f000 fa23 	bl	2000148e <GPIO_SetBits>
20001048:	e010      	b.n	2000106c <main+0x210>
			}
			
			else{
				GPIO_ResetBits(GPIOA, active_doors[i].GPIO_lamp);
2000104a:	0039      	movs	r1, r7
2000104c:	23e0      	movs	r3, #224	; 0xe0
2000104e:	18fb      	adds	r3, r7, r3
20001050:	681a      	ldr	r2, [r3, #0]
20001052:	0013      	movs	r3, r2
20001054:	00db      	lsls	r3, r3, #3
20001056:	1a9b      	subs	r3, r3, r2
20001058:	009b      	lsls	r3, r3, #2
2000105a:	18cb      	adds	r3, r1, r3
2000105c:	3310      	adds	r3, #16
2000105e:	681b      	ldr	r3, [r3, #0]
20001060:	b29b      	uxth	r3, r3
20001062:	4a1a      	ldr	r2, [pc, #104]	; (200010cc <main+0x270>)
20001064:	0019      	movs	r1, r3
20001066:	0010      	movs	r0, r2
20001068:	f000 fa20 	bl	200014ac <GPIO_ResetBits>
			}
			if (active_doors[i].controlbits & 1 && msTicks > (active_doors[i].larmTick + 1000*10* active_doors[i].time_central_larm))
2000106c:	0039      	movs	r1, r7
2000106e:	23e0      	movs	r3, #224	; 0xe0
20001070:	18fb      	adds	r3, r7, r3
20001072:	681a      	ldr	r2, [r3, #0]
20001074:	0013      	movs	r3, r2
20001076:	00db      	lsls	r3, r3, #3
20001078:	1a9b      	subs	r3, r3, r2
2000107a:	009b      	lsls	r3, r3, #2
2000107c:	18cb      	adds	r3, r1, r3
2000107e:	3304      	adds	r3, #4
20001080:	681b      	ldr	r3, [r3, #0]
20001082:	2201      	movs	r2, #1
20001084:	4013      	ands	r3, r2
20001086:	d001      	beq.n	2000108c <main+0x230>
20001088:	4b12      	ldr	r3, [pc, #72]	; (200010d4 <main+0x278>)
2000108a:	681b      	ldr	r3, [r3, #0]
		for (int i = 0; i < sizeof(active_doors); i++)
2000108c:	22e0      	movs	r2, #224	; 0xe0
2000108e:	18bb      	adds	r3, r7, r2
20001090:	681b      	ldr	r3, [r3, #0]
20001092:	3301      	adds	r3, #1
20001094:	18ba      	adds	r2, r7, r2
20001096:	6013      	str	r3, [r2, #0]
20001098:	23e0      	movs	r3, #224	; 0xe0
2000109a:	18fb      	adds	r3, r7, r3
2000109c:	681b      	ldr	r3, [r3, #0]
2000109e:	2b6f      	cmp	r3, #111	; 0x6f
200010a0:	d995      	bls.n	20000fce <main+0x172>
		for (int i = 0; i < sizeof(active_doors); i++)
200010a2:	22e4      	movs	r2, #228	; 0xe4
200010a4:	18bb      	adds	r3, r7, r2
200010a6:	681b      	ldr	r3, [r3, #0]
200010a8:	3301      	adds	r3, #1
200010aa:	18ba      	adds	r2, r7, r2
200010ac:	6013      	str	r3, [r2, #0]
200010ae:	23e4      	movs	r3, #228	; 0xe4
200010b0:	18fb      	adds	r3, r7, r3
200010b2:	681b      	ldr	r3, [r3, #0]
200010b4:	2b6f      	cmp	r3, #111	; 0x6f
200010b6:	d800      	bhi.n	200010ba <main+0x25e>
200010b8:	e725      	b.n	20000f06 <main+0xaa>
200010ba:	e71f      	b.n	20000efc <main+0xa0>
200010bc:	200027dc 	ldrdcs	r2, [r0], -ip
200010c0:	200027f8 	strdcs	r2, [r0], -r8
200010c4:	20002814 	andcs	r2, r0, r4, lsl r8
200010c8:	20002830 	andcs	r2, r0, r0, lsr r8
200010cc:	40020000 	andmi	r0, r2, r0
200010d0:	0000fffe 	strdeq	pc, [r0], -lr
200010d4:	200026f0 	strdcs	r2, [r0], -r0
200010d8:	00002710 	andeq	r2, r0, r0, lsl r7

200010dc <GPIO_DeInit>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F42xxx/43xxx devices.
  *                      x can be (A, B, C, D and H) to select the GPIO peripheral for STM32F401xx devices.  
  * @retval None
  */
void GPIO_DeInit(GPIO_TypeDef* GPIOx)
{
200010dc:	b580      	push	{r7, lr}
200010de:	b082      	sub	sp, #8
200010e0:	af00      	add	r7, sp, #0
200010e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  if (GPIOx == GPIOA)
200010e4:	687b      	ldr	r3, [r7, #4]
200010e6:	4a4e      	ldr	r2, [pc, #312]	; (20001220 <GPIO_DeInit+0x144>)
200010e8:	4293      	cmp	r3, r2
200010ea:	d108      	bne.n	200010fe <GPIO_DeInit+0x22>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, ENABLE);
200010ec:	2101      	movs	r1, #1
200010ee:	2001      	movs	r0, #1
200010f0:	f7ff fc52 	bl	20000998 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, DISABLE);
200010f4:	2100      	movs	r1, #0
200010f6:	2001      	movs	r0, #1
200010f8:	f7ff fc4e 	bl	20000998 <RCC_AHB1PeriphResetCmd>
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, ENABLE);
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, DISABLE);
    }
  }
}
200010fc:	e08c      	b.n	20001218 <GPIO_DeInit+0x13c>
  else if (GPIOx == GPIOB)
200010fe:	687b      	ldr	r3, [r7, #4]
20001100:	4a48      	ldr	r2, [pc, #288]	; (20001224 <GPIO_DeInit+0x148>)
20001102:	4293      	cmp	r3, r2
20001104:	d108      	bne.n	20001118 <GPIO_DeInit+0x3c>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, ENABLE);
20001106:	2101      	movs	r1, #1
20001108:	2002      	movs	r0, #2
2000110a:	f7ff fc45 	bl	20000998 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, DISABLE);
2000110e:	2100      	movs	r1, #0
20001110:	2002      	movs	r0, #2
20001112:	f7ff fc41 	bl	20000998 <RCC_AHB1PeriphResetCmd>
}
20001116:	e07f      	b.n	20001218 <GPIO_DeInit+0x13c>
  else if (GPIOx == GPIOC)
20001118:	687b      	ldr	r3, [r7, #4]
2000111a:	4a43      	ldr	r2, [pc, #268]	; (20001228 <GPIO_DeInit+0x14c>)
2000111c:	4293      	cmp	r3, r2
2000111e:	d108      	bne.n	20001132 <GPIO_DeInit+0x56>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, ENABLE);
20001120:	2101      	movs	r1, #1
20001122:	2004      	movs	r0, #4
20001124:	f7ff fc38 	bl	20000998 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, DISABLE);
20001128:	2100      	movs	r1, #0
2000112a:	2004      	movs	r0, #4
2000112c:	f7ff fc34 	bl	20000998 <RCC_AHB1PeriphResetCmd>
}
20001130:	e072      	b.n	20001218 <GPIO_DeInit+0x13c>
  else if (GPIOx == GPIOD)
20001132:	687b      	ldr	r3, [r7, #4]
20001134:	4a3d      	ldr	r2, [pc, #244]	; (2000122c <GPIO_DeInit+0x150>)
20001136:	4293      	cmp	r3, r2
20001138:	d108      	bne.n	2000114c <GPIO_DeInit+0x70>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, ENABLE);
2000113a:	2101      	movs	r1, #1
2000113c:	2008      	movs	r0, #8
2000113e:	f7ff fc2b 	bl	20000998 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, DISABLE);
20001142:	2100      	movs	r1, #0
20001144:	2008      	movs	r0, #8
20001146:	f7ff fc27 	bl	20000998 <RCC_AHB1PeriphResetCmd>
}
2000114a:	e065      	b.n	20001218 <GPIO_DeInit+0x13c>
  else if (GPIOx == GPIOE)
2000114c:	687b      	ldr	r3, [r7, #4]
2000114e:	4a38      	ldr	r2, [pc, #224]	; (20001230 <GPIO_DeInit+0x154>)
20001150:	4293      	cmp	r3, r2
20001152:	d108      	bne.n	20001166 <GPIO_DeInit+0x8a>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, ENABLE);
20001154:	2101      	movs	r1, #1
20001156:	2010      	movs	r0, #16
20001158:	f7ff fc1e 	bl	20000998 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, DISABLE);
2000115c:	2100      	movs	r1, #0
2000115e:	2010      	movs	r0, #16
20001160:	f7ff fc1a 	bl	20000998 <RCC_AHB1PeriphResetCmd>
}
20001164:	e058      	b.n	20001218 <GPIO_DeInit+0x13c>
  else if (GPIOx == GPIOF)
20001166:	687b      	ldr	r3, [r7, #4]
20001168:	4a32      	ldr	r2, [pc, #200]	; (20001234 <GPIO_DeInit+0x158>)
2000116a:	4293      	cmp	r3, r2
2000116c:	d108      	bne.n	20001180 <GPIO_DeInit+0xa4>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, ENABLE);
2000116e:	2101      	movs	r1, #1
20001170:	2020      	movs	r0, #32
20001172:	f7ff fc11 	bl	20000998 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, DISABLE);
20001176:	2100      	movs	r1, #0
20001178:	2020      	movs	r0, #32
2000117a:	f7ff fc0d 	bl	20000998 <RCC_AHB1PeriphResetCmd>
}
2000117e:	e04b      	b.n	20001218 <GPIO_DeInit+0x13c>
  else if (GPIOx == GPIOG)
20001180:	687b      	ldr	r3, [r7, #4]
20001182:	4a2d      	ldr	r2, [pc, #180]	; (20001238 <GPIO_DeInit+0x15c>)
20001184:	4293      	cmp	r3, r2
20001186:	d108      	bne.n	2000119a <GPIO_DeInit+0xbe>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, ENABLE);
20001188:	2101      	movs	r1, #1
2000118a:	2040      	movs	r0, #64	; 0x40
2000118c:	f7ff fc04 	bl	20000998 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, DISABLE);
20001190:	2100      	movs	r1, #0
20001192:	2040      	movs	r0, #64	; 0x40
20001194:	f7ff fc00 	bl	20000998 <RCC_AHB1PeriphResetCmd>
}
20001198:	e03e      	b.n	20001218 <GPIO_DeInit+0x13c>
  else if (GPIOx == GPIOH)
2000119a:	687b      	ldr	r3, [r7, #4]
2000119c:	4a27      	ldr	r2, [pc, #156]	; (2000123c <GPIO_DeInit+0x160>)
2000119e:	4293      	cmp	r3, r2
200011a0:	d108      	bne.n	200011b4 <GPIO_DeInit+0xd8>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOH, ENABLE);
200011a2:	2101      	movs	r1, #1
200011a4:	2080      	movs	r0, #128	; 0x80
200011a6:	f7ff fbf7 	bl	20000998 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOH, DISABLE);
200011aa:	2100      	movs	r1, #0
200011ac:	2080      	movs	r0, #128	; 0x80
200011ae:	f7ff fbf3 	bl	20000998 <RCC_AHB1PeriphResetCmd>
}
200011b2:	e031      	b.n	20001218 <GPIO_DeInit+0x13c>
  else if (GPIOx == GPIOI)
200011b4:	687b      	ldr	r3, [r7, #4]
200011b6:	4a22      	ldr	r2, [pc, #136]	; (20001240 <GPIO_DeInit+0x164>)
200011b8:	4293      	cmp	r3, r2
200011ba:	d10c      	bne.n	200011d6 <GPIO_DeInit+0xfa>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, ENABLE);
200011bc:	2380      	movs	r3, #128	; 0x80
200011be:	005b      	lsls	r3, r3, #1
200011c0:	2101      	movs	r1, #1
200011c2:	0018      	movs	r0, r3
200011c4:	f7ff fbe8 	bl	20000998 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, DISABLE);
200011c8:	2380      	movs	r3, #128	; 0x80
200011ca:	005b      	lsls	r3, r3, #1
200011cc:	2100      	movs	r1, #0
200011ce:	0018      	movs	r0, r3
200011d0:	f7ff fbe2 	bl	20000998 <RCC_AHB1PeriphResetCmd>
}
200011d4:	e020      	b.n	20001218 <GPIO_DeInit+0x13c>
  else if (GPIOx == GPIOJ)
200011d6:	687b      	ldr	r3, [r7, #4]
200011d8:	4a1a      	ldr	r2, [pc, #104]	; (20001244 <GPIO_DeInit+0x168>)
200011da:	4293      	cmp	r3, r2
200011dc:	d10c      	bne.n	200011f8 <GPIO_DeInit+0x11c>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOJ, ENABLE);
200011de:	2380      	movs	r3, #128	; 0x80
200011e0:	009b      	lsls	r3, r3, #2
200011e2:	2101      	movs	r1, #1
200011e4:	0018      	movs	r0, r3
200011e6:	f7ff fbd7 	bl	20000998 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOJ, DISABLE);
200011ea:	2380      	movs	r3, #128	; 0x80
200011ec:	009b      	lsls	r3, r3, #2
200011ee:	2100      	movs	r1, #0
200011f0:	0018      	movs	r0, r3
200011f2:	f7ff fbd1 	bl	20000998 <RCC_AHB1PeriphResetCmd>
}
200011f6:	e00f      	b.n	20001218 <GPIO_DeInit+0x13c>
    if (GPIOx == GPIOK)
200011f8:	687b      	ldr	r3, [r7, #4]
200011fa:	4a13      	ldr	r2, [pc, #76]	; (20001248 <GPIO_DeInit+0x16c>)
200011fc:	4293      	cmp	r3, r2
200011fe:	d10b      	bne.n	20001218 <GPIO_DeInit+0x13c>
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, ENABLE);
20001200:	2380      	movs	r3, #128	; 0x80
20001202:	00db      	lsls	r3, r3, #3
20001204:	2101      	movs	r1, #1
20001206:	0018      	movs	r0, r3
20001208:	f7ff fbc6 	bl	20000998 <RCC_AHB1PeriphResetCmd>
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, DISABLE);
2000120c:	2380      	movs	r3, #128	; 0x80
2000120e:	00db      	lsls	r3, r3, #3
20001210:	2100      	movs	r1, #0
20001212:	0018      	movs	r0, r3
20001214:	f7ff fbc0 	bl	20000998 <RCC_AHB1PeriphResetCmd>
}
20001218:	46c0      	nop			; (mov r8, r8)
2000121a:	46bd      	mov	sp, r7
2000121c:	b002      	add	sp, #8
2000121e:	bd80      	pop	{r7, pc}
20001220:	40020000 	andmi	r0, r2, r0
20001224:	40020400 	andmi	r0, r2, r0, lsl #8
20001228:	40020800 	andmi	r0, r2, r0, lsl #16
2000122c:	40020c00 	andmi	r0, r2, r0, lsl #24
20001230:	40021000 	andmi	r1, r2, r0
20001234:	40021400 	andmi	r1, r2, r0, lsl #8
20001238:	40021800 	andmi	r1, r2, r0, lsl #16
2000123c:	40021c00 	andmi	r1, r2, r0, lsl #24
20001240:	40022000 	andmi	r2, r2, r0
20001244:	40022400 	andmi	r2, r2, r0, lsl #8
20001248:	40022800 	andmi	r2, r2, r0, lsl #16

2000124c <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
2000124c:	b580      	push	{r7, lr}
2000124e:	b086      	sub	sp, #24
20001250:	af00      	add	r7, sp, #0
20001252:	6078      	str	r0, [r7, #4]
20001254:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
20001256:	2300      	movs	r3, #0
20001258:	617b      	str	r3, [r7, #20]
2000125a:	2300      	movs	r3, #0
2000125c:	613b      	str	r3, [r7, #16]
2000125e:	2300      	movs	r3, #0
20001260:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
20001262:	2300      	movs	r3, #0
20001264:	617b      	str	r3, [r7, #20]
20001266:	e076      	b.n	20001356 <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
20001268:	2201      	movs	r2, #1
2000126a:	697b      	ldr	r3, [r7, #20]
2000126c:	409a      	lsls	r2, r3
2000126e:	0013      	movs	r3, r2
20001270:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
20001272:	683b      	ldr	r3, [r7, #0]
20001274:	681a      	ldr	r2, [r3, #0]
20001276:	693b      	ldr	r3, [r7, #16]
20001278:	4013      	ands	r3, r2
2000127a:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
2000127c:	68fa      	ldr	r2, [r7, #12]
2000127e:	693b      	ldr	r3, [r7, #16]
20001280:	429a      	cmp	r2, r3
20001282:	d165      	bne.n	20001350 <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
20001284:	687b      	ldr	r3, [r7, #4]
20001286:	681b      	ldr	r3, [r3, #0]
20001288:	697a      	ldr	r2, [r7, #20]
2000128a:	0052      	lsls	r2, r2, #1
2000128c:	2103      	movs	r1, #3
2000128e:	4091      	lsls	r1, r2
20001290:	000a      	movs	r2, r1
20001292:	43d2      	mvns	r2, r2
20001294:	401a      	ands	r2, r3
20001296:	687b      	ldr	r3, [r7, #4]
20001298:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
2000129a:	687b      	ldr	r3, [r7, #4]
2000129c:	681a      	ldr	r2, [r3, #0]
2000129e:	683b      	ldr	r3, [r7, #0]
200012a0:	791b      	ldrb	r3, [r3, #4]
200012a2:	0019      	movs	r1, r3
200012a4:	697b      	ldr	r3, [r7, #20]
200012a6:	005b      	lsls	r3, r3, #1
200012a8:	4099      	lsls	r1, r3
200012aa:	000b      	movs	r3, r1
200012ac:	431a      	orrs	r2, r3
200012ae:	687b      	ldr	r3, [r7, #4]
200012b0:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
200012b2:	683b      	ldr	r3, [r7, #0]
200012b4:	791b      	ldrb	r3, [r3, #4]
200012b6:	2b01      	cmp	r3, #1
200012b8:	d003      	beq.n	200012c2 <GPIO_Init+0x76>
200012ba:	683b      	ldr	r3, [r7, #0]
200012bc:	791b      	ldrb	r3, [r3, #4]
200012be:	2b02      	cmp	r3, #2
200012c0:	d12e      	bne.n	20001320 <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
200012c2:	687b      	ldr	r3, [r7, #4]
200012c4:	689b      	ldr	r3, [r3, #8]
200012c6:	697a      	ldr	r2, [r7, #20]
200012c8:	0052      	lsls	r2, r2, #1
200012ca:	2103      	movs	r1, #3
200012cc:	4091      	lsls	r1, r2
200012ce:	000a      	movs	r2, r1
200012d0:	43d2      	mvns	r2, r2
200012d2:	401a      	ands	r2, r3
200012d4:	687b      	ldr	r3, [r7, #4]
200012d6:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
200012d8:	687b      	ldr	r3, [r7, #4]
200012da:	689a      	ldr	r2, [r3, #8]
200012dc:	683b      	ldr	r3, [r7, #0]
200012de:	795b      	ldrb	r3, [r3, #5]
200012e0:	0019      	movs	r1, r3
200012e2:	697b      	ldr	r3, [r7, #20]
200012e4:	005b      	lsls	r3, r3, #1
200012e6:	4099      	lsls	r1, r3
200012e8:	000b      	movs	r3, r1
200012ea:	431a      	orrs	r2, r3
200012ec:	687b      	ldr	r3, [r7, #4]
200012ee:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
200012f0:	687b      	ldr	r3, [r7, #4]
200012f2:	685b      	ldr	r3, [r3, #4]
200012f4:	697a      	ldr	r2, [r7, #20]
200012f6:	b292      	uxth	r2, r2
200012f8:	0011      	movs	r1, r2
200012fa:	2201      	movs	r2, #1
200012fc:	408a      	lsls	r2, r1
200012fe:	43d2      	mvns	r2, r2
20001300:	401a      	ands	r2, r3
20001302:	687b      	ldr	r3, [r7, #4]
20001304:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
20001306:	687b      	ldr	r3, [r7, #4]
20001308:	685b      	ldr	r3, [r3, #4]
2000130a:	683a      	ldr	r2, [r7, #0]
2000130c:	7992      	ldrb	r2, [r2, #6]
2000130e:	0011      	movs	r1, r2
20001310:	697a      	ldr	r2, [r7, #20]
20001312:	b292      	uxth	r2, r2
20001314:	4091      	lsls	r1, r2
20001316:	000a      	movs	r2, r1
20001318:	b292      	uxth	r2, r2
2000131a:	431a      	orrs	r2, r3
2000131c:	687b      	ldr	r3, [r7, #4]
2000131e:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
20001320:	687b      	ldr	r3, [r7, #4]
20001322:	68db      	ldr	r3, [r3, #12]
20001324:	697a      	ldr	r2, [r7, #20]
20001326:	b292      	uxth	r2, r2
20001328:	0052      	lsls	r2, r2, #1
2000132a:	2103      	movs	r1, #3
2000132c:	4091      	lsls	r1, r2
2000132e:	000a      	movs	r2, r1
20001330:	43d2      	mvns	r2, r2
20001332:	401a      	ands	r2, r3
20001334:	687b      	ldr	r3, [r7, #4]
20001336:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
20001338:	687b      	ldr	r3, [r7, #4]
2000133a:	68da      	ldr	r2, [r3, #12]
2000133c:	683b      	ldr	r3, [r7, #0]
2000133e:	79db      	ldrb	r3, [r3, #7]
20001340:	0019      	movs	r1, r3
20001342:	697b      	ldr	r3, [r7, #20]
20001344:	005b      	lsls	r3, r3, #1
20001346:	4099      	lsls	r1, r3
20001348:	000b      	movs	r3, r1
2000134a:	431a      	orrs	r2, r3
2000134c:	687b      	ldr	r3, [r7, #4]
2000134e:	60da      	str	r2, [r3, #12]
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
20001350:	697b      	ldr	r3, [r7, #20]
20001352:	3301      	adds	r3, #1
20001354:	617b      	str	r3, [r7, #20]
20001356:	697b      	ldr	r3, [r7, #20]
20001358:	2b0f      	cmp	r3, #15
2000135a:	d985      	bls.n	20001268 <GPIO_Init+0x1c>
    }
  }
}
2000135c:	46c0      	nop			; (mov r8, r8)
2000135e:	46bd      	mov	sp, r7
20001360:	b006      	add	sp, #24
20001362:	bd80      	pop	{r7, pc}

20001364 <GPIO_StructInit>:
  * @brief  Fills each GPIO_InitStruct member with its default value.
  * @param  GPIO_InitStruct : pointer to a GPIO_InitTypeDef structure which will be initialized.
  * @retval None
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
20001364:	b580      	push	{r7, lr}
20001366:	b082      	sub	sp, #8
20001368:	af00      	add	r7, sp, #0
2000136a:	6078      	str	r0, [r7, #4]
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
2000136c:	687b      	ldr	r3, [r7, #4]
2000136e:	4a09      	ldr	r2, [pc, #36]	; (20001394 <GPIO_StructInit+0x30>)
20001370:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN;
20001372:	687b      	ldr	r3, [r7, #4]
20001374:	2200      	movs	r2, #0
20001376:	711a      	strb	r2, [r3, #4]
  GPIO_InitStruct->GPIO_Speed = GPIO_Speed_2MHz;
20001378:	687b      	ldr	r3, [r7, #4]
2000137a:	2200      	movs	r2, #0
2000137c:	715a      	strb	r2, [r3, #5]
  GPIO_InitStruct->GPIO_OType = GPIO_OType_PP;
2000137e:	687b      	ldr	r3, [r7, #4]
20001380:	2200      	movs	r2, #0
20001382:	719a      	strb	r2, [r3, #6]
  GPIO_InitStruct->GPIO_PuPd = GPIO_PuPd_NOPULL;
20001384:	687b      	ldr	r3, [r7, #4]
20001386:	2200      	movs	r2, #0
20001388:	71da      	strb	r2, [r3, #7]
}
2000138a:	46c0      	nop			; (mov r8, r8)
2000138c:	46bd      	mov	sp, r7
2000138e:	b002      	add	sp, #8
20001390:	bd80      	pop	{r7, pc}
20001392:	46c0      	nop			; (mov r8, r8)
20001394:	0000ffff 	strdeq	pc, [r0], -pc	; <UNPREDICTABLE>

20001398 <GPIO_PinLockConfig>:
  * @param  GPIO_Pin: specifies the port bit to be locked.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_PinLockConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
20001398:	b580      	push	{r7, lr}
2000139a:	b084      	sub	sp, #16
2000139c:	af00      	add	r7, sp, #0
2000139e:	6078      	str	r0, [r7, #4]
200013a0:	000a      	movs	r2, r1
200013a2:	1cbb      	adds	r3, r7, #2
200013a4:	801a      	strh	r2, [r3, #0]
  __IO uint32_t tmp = 0x00010000;
200013a6:	2380      	movs	r3, #128	; 0x80
200013a8:	025b      	lsls	r3, r3, #9
200013aa:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  tmp |= GPIO_Pin;
200013ac:	1cbb      	adds	r3, r7, #2
200013ae:	881a      	ldrh	r2, [r3, #0]
200013b0:	68fb      	ldr	r3, [r7, #12]
200013b2:	4313      	orrs	r3, r2
200013b4:	60fb      	str	r3, [r7, #12]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
200013b6:	68fa      	ldr	r2, [r7, #12]
200013b8:	687b      	ldr	r3, [r7, #4]
200013ba:	61da      	str	r2, [r3, #28]
  /* Reset LCKK bit */
  GPIOx->LCKR =  GPIO_Pin;
200013bc:	1cbb      	adds	r3, r7, #2
200013be:	881a      	ldrh	r2, [r3, #0]
200013c0:	687b      	ldr	r3, [r7, #4]
200013c2:	61da      	str	r2, [r3, #28]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
200013c4:	68fa      	ldr	r2, [r7, #12]
200013c6:	687b      	ldr	r3, [r7, #4]
200013c8:	61da      	str	r2, [r3, #28]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
200013ca:	687b      	ldr	r3, [r7, #4]
200013cc:	69db      	ldr	r3, [r3, #28]
200013ce:	60fb      	str	r3, [r7, #12]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
200013d0:	687b      	ldr	r3, [r7, #4]
200013d2:	69db      	ldr	r3, [r3, #28]
200013d4:	60fb      	str	r3, [r7, #12]
}
200013d6:	46c0      	nop			; (mov r8, r8)
200013d8:	46bd      	mov	sp, r7
200013da:	b004      	add	sp, #16
200013dc:	bd80      	pop	{r7, pc}

200013de <GPIO_ReadInputDataBit>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
uint8_t GPIO_ReadInputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
200013de:	b580      	push	{r7, lr}
200013e0:	b084      	sub	sp, #16
200013e2:	af00      	add	r7, sp, #0
200013e4:	6078      	str	r0, [r7, #4]
200013e6:	000a      	movs	r2, r1
200013e8:	1cbb      	adds	r3, r7, #2
200013ea:	801a      	strh	r2, [r3, #0]
  uint8_t bitstatus = 0x00;
200013ec:	230f      	movs	r3, #15
200013ee:	18fb      	adds	r3, r7, r3
200013f0:	2200      	movs	r2, #0
200013f2:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
200013f4:	687b      	ldr	r3, [r7, #4]
200013f6:	691b      	ldr	r3, [r3, #16]
200013f8:	1cba      	adds	r2, r7, #2
200013fa:	8812      	ldrh	r2, [r2, #0]
200013fc:	4013      	ands	r3, r2
200013fe:	d004      	beq.n	2000140a <GPIO_ReadInputDataBit+0x2c>
  {
    bitstatus = (uint8_t)Bit_SET;
20001400:	230f      	movs	r3, #15
20001402:	18fb      	adds	r3, r7, r3
20001404:	2201      	movs	r2, #1
20001406:	701a      	strb	r2, [r3, #0]
20001408:	e003      	b.n	20001412 <GPIO_ReadInputDataBit+0x34>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
2000140a:	230f      	movs	r3, #15
2000140c:	18fb      	adds	r3, r7, r3
2000140e:	2200      	movs	r2, #0
20001410:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
20001412:	230f      	movs	r3, #15
20001414:	18fb      	adds	r3, r7, r3
20001416:	781b      	ldrb	r3, [r3, #0]
}
20001418:	0018      	movs	r0, r3
2000141a:	46bd      	mov	sp, r7
2000141c:	b004      	add	sp, #16
2000141e:	bd80      	pop	{r7, pc}

20001420 <GPIO_ReadInputData>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F42xxx/43xxx devices.
  *                      x can be (A, B, C, D and H) to select the GPIO peripheral for STM32F401xx devices. 
  * @retval GPIO input data port value.
  */
uint16_t GPIO_ReadInputData(GPIO_TypeDef* GPIOx)
{
20001420:	b580      	push	{r7, lr}
20001422:	b082      	sub	sp, #8
20001424:	af00      	add	r7, sp, #0
20001426:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  return ((uint16_t)GPIOx->IDR);
20001428:	687b      	ldr	r3, [r7, #4]
2000142a:	691b      	ldr	r3, [r3, #16]
2000142c:	b29b      	uxth	r3, r3
}
2000142e:	0018      	movs	r0, r3
20001430:	46bd      	mov	sp, r7
20001432:	b002      	add	sp, #8
20001434:	bd80      	pop	{r7, pc}

20001436 <GPIO_ReadOutputDataBit>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *          This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The output port pin value.
  */
uint8_t GPIO_ReadOutputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
20001436:	b580      	push	{r7, lr}
20001438:	b084      	sub	sp, #16
2000143a:	af00      	add	r7, sp, #0
2000143c:	6078      	str	r0, [r7, #4]
2000143e:	000a      	movs	r2, r1
20001440:	1cbb      	adds	r3, r7, #2
20001442:	801a      	strh	r2, [r3, #0]
  uint8_t bitstatus = 0x00;
20001444:	230f      	movs	r3, #15
20001446:	18fb      	adds	r3, r7, r3
20001448:	2200      	movs	r2, #0
2000144a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if (((GPIOx->ODR) & GPIO_Pin) != (uint32_t)Bit_RESET)
2000144c:	687b      	ldr	r3, [r7, #4]
2000144e:	695b      	ldr	r3, [r3, #20]
20001450:	1cba      	adds	r2, r7, #2
20001452:	8812      	ldrh	r2, [r2, #0]
20001454:	4013      	ands	r3, r2
20001456:	d004      	beq.n	20001462 <GPIO_ReadOutputDataBit+0x2c>
  {
    bitstatus = (uint8_t)Bit_SET;
20001458:	230f      	movs	r3, #15
2000145a:	18fb      	adds	r3, r7, r3
2000145c:	2201      	movs	r2, #1
2000145e:	701a      	strb	r2, [r3, #0]
20001460:	e003      	b.n	2000146a <GPIO_ReadOutputDataBit+0x34>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
20001462:	230f      	movs	r3, #15
20001464:	18fb      	adds	r3, r7, r3
20001466:	2200      	movs	r2, #0
20001468:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
2000146a:	230f      	movs	r3, #15
2000146c:	18fb      	adds	r3, r7, r3
2000146e:	781b      	ldrb	r3, [r3, #0]
}
20001470:	0018      	movs	r0, r3
20001472:	46bd      	mov	sp, r7
20001474:	b004      	add	sp, #16
20001476:	bd80      	pop	{r7, pc}

20001478 <GPIO_ReadOutputData>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F42xxx/43xxx devices.
  *                      x can be (A, B, C, D and H) to select the GPIO peripheral for STM32F401xx devices. 
  * @retval GPIO output data port value.
  */
uint16_t GPIO_ReadOutputData(GPIO_TypeDef* GPIOx)
{
20001478:	b580      	push	{r7, lr}
2000147a:	b082      	sub	sp, #8
2000147c:	af00      	add	r7, sp, #0
2000147e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  return ((uint16_t)GPIOx->ODR);
20001480:	687b      	ldr	r3, [r7, #4]
20001482:	695b      	ldr	r3, [r3, #20]
20001484:	b29b      	uxth	r3, r3
}
20001486:	0018      	movs	r0, r3
20001488:	46bd      	mov	sp, r7
2000148a:	b002      	add	sp, #8
2000148c:	bd80      	pop	{r7, pc}

2000148e <GPIO_SetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
2000148e:	b580      	push	{r7, lr}
20001490:	b082      	sub	sp, #8
20001492:	af00      	add	r7, sp, #0
20001494:	6078      	str	r0, [r7, #4]
20001496:	000a      	movs	r2, r1
20001498:	1cbb      	adds	r3, r7, #2
2000149a:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRL = GPIO_Pin;
2000149c:	687b      	ldr	r3, [r7, #4]
2000149e:	1cba      	adds	r2, r7, #2
200014a0:	8812      	ldrh	r2, [r2, #0]
200014a2:	831a      	strh	r2, [r3, #24]
}
200014a4:	46c0      	nop			; (mov r8, r8)
200014a6:	46bd      	mov	sp, r7
200014a8:	b002      	add	sp, #8
200014aa:	bd80      	pop	{r7, pc}

200014ac <GPIO_ResetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
200014ac:	b580      	push	{r7, lr}
200014ae:	b082      	sub	sp, #8
200014b0:	af00      	add	r7, sp, #0
200014b2:	6078      	str	r0, [r7, #4]
200014b4:	000a      	movs	r2, r1
200014b6:	1cbb      	adds	r3, r7, #2
200014b8:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRH = GPIO_Pin;
200014ba:	687b      	ldr	r3, [r7, #4]
200014bc:	1cba      	adds	r2, r7, #2
200014be:	8812      	ldrh	r2, [r2, #0]
200014c0:	835a      	strh	r2, [r3, #26]
}
200014c2:	46c0      	nop			; (mov r8, r8)
200014c4:	46bd      	mov	sp, r7
200014c6:	b002      	add	sp, #8
200014c8:	bd80      	pop	{r7, pc}

200014ca <GPIO_WriteBit>:
  *            @arg Bit_RESET: to clear the port pin
  *            @arg Bit_SET: to set the port pin
  * @retval None
  */
void GPIO_WriteBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, BitAction BitVal)
{
200014ca:	b580      	push	{r7, lr}
200014cc:	b082      	sub	sp, #8
200014ce:	af00      	add	r7, sp, #0
200014d0:	6078      	str	r0, [r7, #4]
200014d2:	0008      	movs	r0, r1
200014d4:	0011      	movs	r1, r2
200014d6:	1cbb      	adds	r3, r7, #2
200014d8:	1c02      	adds	r2, r0, #0
200014da:	801a      	strh	r2, [r3, #0]
200014dc:	1c7b      	adds	r3, r7, #1
200014de:	1c0a      	adds	r2, r1, #0
200014e0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal));

  if (BitVal != Bit_RESET)
200014e2:	1c7b      	adds	r3, r7, #1
200014e4:	781b      	ldrb	r3, [r3, #0]
200014e6:	2b00      	cmp	r3, #0
200014e8:	d004      	beq.n	200014f4 <GPIO_WriteBit+0x2a>
  {
    GPIOx->BSRRL = GPIO_Pin;
200014ea:	687b      	ldr	r3, [r7, #4]
200014ec:	1cba      	adds	r2, r7, #2
200014ee:	8812      	ldrh	r2, [r2, #0]
200014f0:	831a      	strh	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRRH = GPIO_Pin ;
  }
}
200014f2:	e003      	b.n	200014fc <GPIO_WriteBit+0x32>
    GPIOx->BSRRH = GPIO_Pin ;
200014f4:	687b      	ldr	r3, [r7, #4]
200014f6:	1cba      	adds	r2, r7, #2
200014f8:	8812      	ldrh	r2, [r2, #0]
200014fa:	835a      	strh	r2, [r3, #26]
}
200014fc:	46c0      	nop			; (mov r8, r8)
200014fe:	46bd      	mov	sp, r7
20001500:	b002      	add	sp, #8
20001502:	bd80      	pop	{r7, pc}

20001504 <GPIO_Write>:
  *                      x can be (A, B, C, D and H) to select the GPIO peripheral for STM32F401xx devices. 
  * @param  PortVal: specifies the value to be written to the port output data register.
  * @retval None
  */
void GPIO_Write(GPIO_TypeDef* GPIOx, uint16_t PortVal)
{
20001504:	b580      	push	{r7, lr}
20001506:	b082      	sub	sp, #8
20001508:	af00      	add	r7, sp, #0
2000150a:	6078      	str	r0, [r7, #4]
2000150c:	000a      	movs	r2, r1
2000150e:	1cbb      	adds	r3, r7, #2
20001510:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR = PortVal;
20001512:	1cbb      	adds	r3, r7, #2
20001514:	881a      	ldrh	r2, [r3, #0]
20001516:	687b      	ldr	r3, [r7, #4]
20001518:	615a      	str	r2, [r3, #20]
}
2000151a:	46c0      	nop			; (mov r8, r8)
2000151c:	46bd      	mov	sp, r7
2000151e:	b002      	add	sp, #8
20001520:	bd80      	pop	{r7, pc}

20001522 <GPIO_ToggleBits>:
  *                      x can be (A, B, C, D and H) to select the GPIO peripheral for STM32F401xx devices. 
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void GPIO_ToggleBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
20001522:	b580      	push	{r7, lr}
20001524:	b082      	sub	sp, #8
20001526:	af00      	add	r7, sp, #0
20001528:	6078      	str	r0, [r7, #4]
2000152a:	000a      	movs	r2, r1
2000152c:	1cbb      	adds	r3, r7, #2
2000152e:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR ^= GPIO_Pin;
20001530:	687b      	ldr	r3, [r7, #4]
20001532:	695a      	ldr	r2, [r3, #20]
20001534:	1cbb      	adds	r3, r7, #2
20001536:	881b      	ldrh	r3, [r3, #0]
20001538:	405a      	eors	r2, r3
2000153a:	687b      	ldr	r3, [r7, #4]
2000153c:	615a      	str	r2, [r3, #20]
}
2000153e:	46c0      	nop			; (mov r8, r8)
20001540:	46bd      	mov	sp, r7
20001542:	b002      	add	sp, #8
20001544:	bd80      	pop	{r7, pc}

20001546 <GPIO_PinAFConfig>:
  *            @arg GPIO_AF_LTDC: Connect LTDC pins to AF14 for STM32F429xx/439xx devices. 
  *            @arg GPIO_AF_EVENTOUT: Connect EVENTOUT pins to AF15
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
20001546:	b580      	push	{r7, lr}
20001548:	b084      	sub	sp, #16
2000154a:	af00      	add	r7, sp, #0
2000154c:	6078      	str	r0, [r7, #4]
2000154e:	0008      	movs	r0, r1
20001550:	0011      	movs	r1, r2
20001552:	1cbb      	adds	r3, r7, #2
20001554:	1c02      	adds	r2, r0, #0
20001556:	801a      	strh	r2, [r3, #0]
20001558:	1c7b      	adds	r3, r7, #1
2000155a:	1c0a      	adds	r2, r1, #0
2000155c:	701a      	strb	r2, [r3, #0]
  uint32_t temp = 0x00;
2000155e:	2300      	movs	r3, #0
20001560:	60fb      	str	r3, [r7, #12]
  uint32_t temp_2 = 0x00;
20001562:	2300      	movs	r3, #0
20001564:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
20001566:	1c7b      	adds	r3, r7, #1
20001568:	781a      	ldrb	r2, [r3, #0]
2000156a:	1cbb      	adds	r3, r7, #2
2000156c:	881b      	ldrh	r3, [r3, #0]
2000156e:	2107      	movs	r1, #7
20001570:	400b      	ands	r3, r1
20001572:	009b      	lsls	r3, r3, #2
20001574:	409a      	lsls	r2, r3
20001576:	0013      	movs	r3, r2
20001578:	60fb      	str	r3, [r7, #12]
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
2000157a:	1cbb      	adds	r3, r7, #2
2000157c:	881b      	ldrh	r3, [r3, #0]
2000157e:	08db      	lsrs	r3, r3, #3
20001580:	b29b      	uxth	r3, r3
20001582:	001a      	movs	r2, r3
20001584:	687b      	ldr	r3, [r7, #4]
20001586:	3208      	adds	r2, #8
20001588:	0092      	lsls	r2, r2, #2
2000158a:	58d3      	ldr	r3, [r2, r3]
2000158c:	1cba      	adds	r2, r7, #2
2000158e:	8812      	ldrh	r2, [r2, #0]
20001590:	2107      	movs	r1, #7
20001592:	400a      	ands	r2, r1
20001594:	0092      	lsls	r2, r2, #2
20001596:	210f      	movs	r1, #15
20001598:	4091      	lsls	r1, r2
2000159a:	000a      	movs	r2, r1
2000159c:	43d2      	mvns	r2, r2
2000159e:	1cb9      	adds	r1, r7, #2
200015a0:	8809      	ldrh	r1, [r1, #0]
200015a2:	08c9      	lsrs	r1, r1, #3
200015a4:	b289      	uxth	r1, r1
200015a6:	0008      	movs	r0, r1
200015a8:	401a      	ands	r2, r3
200015aa:	0011      	movs	r1, r2
200015ac:	687b      	ldr	r3, [r7, #4]
200015ae:	0002      	movs	r2, r0
200015b0:	3208      	adds	r2, #8
200015b2:	0092      	lsls	r2, r2, #2
200015b4:	50d1      	str	r1, [r2, r3]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
200015b6:	1cbb      	adds	r3, r7, #2
200015b8:	881b      	ldrh	r3, [r3, #0]
200015ba:	08db      	lsrs	r3, r3, #3
200015bc:	b29b      	uxth	r3, r3
200015be:	001a      	movs	r2, r3
200015c0:	687b      	ldr	r3, [r7, #4]
200015c2:	3208      	adds	r2, #8
200015c4:	0092      	lsls	r2, r2, #2
200015c6:	58d3      	ldr	r3, [r2, r3]
200015c8:	68fa      	ldr	r2, [r7, #12]
200015ca:	4313      	orrs	r3, r2
200015cc:	60bb      	str	r3, [r7, #8]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
200015ce:	1cbb      	adds	r3, r7, #2
200015d0:	881b      	ldrh	r3, [r3, #0]
200015d2:	08db      	lsrs	r3, r3, #3
200015d4:	b29b      	uxth	r3, r3
200015d6:	001a      	movs	r2, r3
200015d8:	687b      	ldr	r3, [r7, #4]
200015da:	3208      	adds	r2, #8
200015dc:	0092      	lsls	r2, r2, #2
200015de:	68b9      	ldr	r1, [r7, #8]
200015e0:	50d1      	str	r1, [r2, r3]
}
200015e2:	46c0      	nop			; (mov r8, r8)
200015e4:	46bd      	mov	sp, r7
200015e6:	b004      	add	sp, #16
200015e8:	bd80      	pop	{r7, pc}
200015ea:	46c0      	nop			; (mov r8, r8)

200015ec <NVIC_PriorityGroupConfig>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void NVIC_PriorityGroupConfig(uint32_t NVIC_PriorityGroup)
{
200015ec:	b580      	push	{r7, lr}
200015ee:	b082      	sub	sp, #8
200015f0:	af00      	add	r7, sp, #0
200015f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
200015f4:	4b04      	ldr	r3, [pc, #16]	; (20001608 <NVIC_PriorityGroupConfig+0x1c>)
200015f6:	687a      	ldr	r2, [r7, #4]
200015f8:	4904      	ldr	r1, [pc, #16]	; (2000160c <NVIC_PriorityGroupConfig+0x20>)
200015fa:	430a      	orrs	r2, r1
200015fc:	60da      	str	r2, [r3, #12]
}
200015fe:	46c0      	nop			; (mov r8, r8)
20001600:	46bd      	mov	sp, r7
20001602:	b002      	add	sp, #8
20001604:	bd80      	pop	{r7, pc}
20001606:	46c0      	nop			; (mov r8, r8)
20001608:	e000ed00 	and	lr, r0, r0, lsl #26
2000160c:	05fa0000 	ldrbeq	r0, [sl, #0]!

20001610 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
20001610:	b5b0      	push	{r4, r5, r7, lr}
20001612:	b084      	sub	sp, #16
20001614:	af00      	add	r7, sp, #0
20001616:	6078      	str	r0, [r7, #4]
  uint8_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
20001618:	230f      	movs	r3, #15
2000161a:	18fb      	adds	r3, r7, r3
2000161c:	2200      	movs	r2, #0
2000161e:	701a      	strb	r2, [r3, #0]
20001620:	230e      	movs	r3, #14
20001622:	18fb      	adds	r3, r7, r3
20001624:	2200      	movs	r2, #0
20001626:	701a      	strb	r2, [r3, #0]
20001628:	230d      	movs	r3, #13
2000162a:	18fb      	adds	r3, r7, r3
2000162c:	220f      	movs	r2, #15
2000162e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
20001630:	687b      	ldr	r3, [r7, #4]
20001632:	78db      	ldrb	r3, [r3, #3]
20001634:	2b00      	cmp	r3, #0
20001636:	d04d      	beq.n	200016d4 <NVIC_Init+0xc4>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
20001638:	4b31      	ldr	r3, [pc, #196]	; (20001700 <NVIC_Init+0xf0>)
2000163a:	68db      	ldr	r3, [r3, #12]
2000163c:	43db      	mvns	r3, r3
2000163e:	0a1b      	lsrs	r3, r3, #8
20001640:	b2da      	uxtb	r2, r3
20001642:	200f      	movs	r0, #15
20001644:	183b      	adds	r3, r7, r0
20001646:	2107      	movs	r1, #7
20001648:	400a      	ands	r2, r1
2000164a:	701a      	strb	r2, [r3, #0]
    tmppre = (0x4 - tmppriority);
2000164c:	250e      	movs	r5, #14
2000164e:	197b      	adds	r3, r7, r5
20001650:	183a      	adds	r2, r7, r0
20001652:	7812      	ldrb	r2, [r2, #0]
20001654:	2104      	movs	r1, #4
20001656:	1a8a      	subs	r2, r1, r2
20001658:	701a      	strb	r2, [r3, #0]
    tmpsub = tmpsub >> tmppriority;
2000165a:	240d      	movs	r4, #13
2000165c:	193b      	adds	r3, r7, r4
2000165e:	781a      	ldrb	r2, [r3, #0]
20001660:	0001      	movs	r1, r0
20001662:	187b      	adds	r3, r7, r1
20001664:	781b      	ldrb	r3, [r3, #0]
20001666:	411a      	asrs	r2, r3
20001668:	193b      	adds	r3, r7, r4
2000166a:	701a      	strb	r2, [r3, #0]

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
2000166c:	687b      	ldr	r3, [r7, #4]
2000166e:	785b      	ldrb	r3, [r3, #1]
20001670:	001a      	movs	r2, r3
20001672:	197b      	adds	r3, r7, r5
20001674:	781b      	ldrb	r3, [r3, #0]
20001676:	409a      	lsls	r2, r3
20001678:	0008      	movs	r0, r1
2000167a:	187b      	adds	r3, r7, r1
2000167c:	701a      	strb	r2, [r3, #0]
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
2000167e:	687b      	ldr	r3, [r7, #4]
20001680:	789b      	ldrb	r3, [r3, #2]
20001682:	193a      	adds	r2, r7, r4
20001684:	7812      	ldrb	r2, [r2, #0]
20001686:	4013      	ands	r3, r2
20001688:	b2d9      	uxtb	r1, r3
2000168a:	183b      	adds	r3, r7, r0
2000168c:	183a      	adds	r2, r7, r0
2000168e:	7812      	ldrb	r2, [r2, #0]
20001690:	430a      	orrs	r2, r1
20001692:	701a      	strb	r2, [r3, #0]
        
    tmppriority = tmppriority << 0x04;
20001694:	183b      	adds	r3, r7, r0
20001696:	183a      	adds	r2, r7, r0
20001698:	7812      	ldrb	r2, [r2, #0]
2000169a:	0112      	lsls	r2, r2, #4
2000169c:	701a      	strb	r2, [r3, #0]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
2000169e:	4a19      	ldr	r2, [pc, #100]	; (20001704 <NVIC_Init+0xf4>)
200016a0:	687b      	ldr	r3, [r7, #4]
200016a2:	781b      	ldrb	r3, [r3, #0]
200016a4:	0019      	movs	r1, r3
200016a6:	23c0      	movs	r3, #192	; 0xc0
200016a8:	009b      	lsls	r3, r3, #2
200016aa:	1852      	adds	r2, r2, r1
200016ac:	18d3      	adds	r3, r2, r3
200016ae:	183a      	adds	r2, r7, r0
200016b0:	7812      	ldrb	r2, [r2, #0]
200016b2:	701a      	strb	r2, [r3, #0]
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
200016b4:	687b      	ldr	r3, [r7, #4]
200016b6:	781b      	ldrb	r3, [r3, #0]
200016b8:	001a      	movs	r2, r3
200016ba:	231f      	movs	r3, #31
200016bc:	4013      	ands	r3, r2
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
200016be:	4911      	ldr	r1, [pc, #68]	; (20001704 <NVIC_Init+0xf4>)
200016c0:	687a      	ldr	r2, [r7, #4]
200016c2:	7812      	ldrb	r2, [r2, #0]
200016c4:	0952      	lsrs	r2, r2, #5
200016c6:	b2d2      	uxtb	r2, r2
200016c8:	0010      	movs	r0, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
200016ca:	2201      	movs	r2, #1
200016cc:	409a      	lsls	r2, r3
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
200016ce:	0083      	lsls	r3, r0, #2
200016d0:	505a      	str	r2, [r3, r1]
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
200016d2:	e010      	b.n	200016f6 <NVIC_Init+0xe6>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
200016d4:	687b      	ldr	r3, [r7, #4]
200016d6:	781b      	ldrb	r3, [r3, #0]
200016d8:	001a      	movs	r2, r3
200016da:	231f      	movs	r3, #31
200016dc:	4013      	ands	r3, r2
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
200016de:	4909      	ldr	r1, [pc, #36]	; (20001704 <NVIC_Init+0xf4>)
200016e0:	687a      	ldr	r2, [r7, #4]
200016e2:	7812      	ldrb	r2, [r2, #0]
200016e4:	0952      	lsrs	r2, r2, #5
200016e6:	b2d2      	uxtb	r2, r2
200016e8:	0010      	movs	r0, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
200016ea:	2201      	movs	r2, #1
200016ec:	409a      	lsls	r2, r3
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
200016ee:	0003      	movs	r3, r0
200016f0:	3320      	adds	r3, #32
200016f2:	009b      	lsls	r3, r3, #2
200016f4:	505a      	str	r2, [r3, r1]
}
200016f6:	46c0      	nop			; (mov r8, r8)
200016f8:	46bd      	mov	sp, r7
200016fa:	b004      	add	sp, #16
200016fc:	bdb0      	pop	{r4, r5, r7, pc}
200016fe:	46c0      	nop			; (mov r8, r8)
20001700:	e000ed00 	and	lr, r0, r0, lsl #26
20001704:	e000e100 	and	lr, r0, r0, lsl #2

20001708 <NVIC_SetVectorTable>:
  *     @arg NVIC_VectTab_FLASH: Vector Table in internal FLASH.
  * @param  Offset: Vector Table base offset field. This value must be a multiple of 0x200.
  * @retval None
  */
void NVIC_SetVectorTable(uint32_t NVIC_VectTab, uint32_t Offset)
{ 
20001708:	b580      	push	{r7, lr}
2000170a:	b082      	sub	sp, #8
2000170c:	af00      	add	r7, sp, #0
2000170e:	6078      	str	r0, [r7, #4]
20001710:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_VECTTAB(NVIC_VectTab));
  assert_param(IS_NVIC_OFFSET(Offset));  
   
  SCB->VTOR = NVIC_VectTab | (Offset & (uint32_t)0x1FFFFF80);
20001712:	683b      	ldr	r3, [r7, #0]
20001714:	4a05      	ldr	r2, [pc, #20]	; (2000172c <NVIC_SetVectorTable+0x24>)
20001716:	4013      	ands	r3, r2
20001718:	0019      	movs	r1, r3
2000171a:	4b05      	ldr	r3, [pc, #20]	; (20001730 <NVIC_SetVectorTable+0x28>)
2000171c:	687a      	ldr	r2, [r7, #4]
2000171e:	430a      	orrs	r2, r1
20001720:	609a      	str	r2, [r3, #8]
}
20001722:	46c0      	nop			; (mov r8, r8)
20001724:	46bd      	mov	sp, r7
20001726:	b002      	add	sp, #8
20001728:	bd80      	pop	{r7, pc}
2000172a:	46c0      	nop			; (mov r8, r8)
2000172c:	1fffff80 	svcne	0x00ffff80
20001730:	e000ed00 	and	lr, r0, r0, lsl #26

20001734 <NVIC_SystemLPConfig>:
  *     @arg NVIC_LP_SLEEPONEXIT: Low Power Sleep on Exit.
  * @param  NewState: new state of LP condition. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void NVIC_SystemLPConfig(uint8_t LowPowerMode, FunctionalState NewState)
{
20001734:	b580      	push	{r7, lr}
20001736:	b082      	sub	sp, #8
20001738:	af00      	add	r7, sp, #0
2000173a:	0002      	movs	r2, r0
2000173c:	1dfb      	adds	r3, r7, #7
2000173e:	701a      	strb	r2, [r3, #0]
20001740:	1dbb      	adds	r3, r7, #6
20001742:	1c0a      	adds	r2, r1, #0
20001744:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_LP(LowPowerMode));
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  if (NewState != DISABLE)
20001746:	1dbb      	adds	r3, r7, #6
20001748:	781b      	ldrb	r3, [r3, #0]
2000174a:	2b00      	cmp	r3, #0
2000174c:	d007      	beq.n	2000175e <NVIC_SystemLPConfig+0x2a>
  {
    SCB->SCR |= LowPowerMode;
2000174e:	4b0a      	ldr	r3, [pc, #40]	; (20001778 <NVIC_SystemLPConfig+0x44>)
20001750:	6919      	ldr	r1, [r3, #16]
20001752:	1dfb      	adds	r3, r7, #7
20001754:	781a      	ldrb	r2, [r3, #0]
20001756:	4b08      	ldr	r3, [pc, #32]	; (20001778 <NVIC_SystemLPConfig+0x44>)
20001758:	430a      	orrs	r2, r1
2000175a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    SCB->SCR &= (uint32_t)(~(uint32_t)LowPowerMode);
  }
}
2000175c:	e007      	b.n	2000176e <NVIC_SystemLPConfig+0x3a>
    SCB->SCR &= (uint32_t)(~(uint32_t)LowPowerMode);
2000175e:	4b06      	ldr	r3, [pc, #24]	; (20001778 <NVIC_SystemLPConfig+0x44>)
20001760:	691a      	ldr	r2, [r3, #16]
20001762:	1dfb      	adds	r3, r7, #7
20001764:	781b      	ldrb	r3, [r3, #0]
20001766:	43d9      	mvns	r1, r3
20001768:	4b03      	ldr	r3, [pc, #12]	; (20001778 <NVIC_SystemLPConfig+0x44>)
2000176a:	400a      	ands	r2, r1
2000176c:	611a      	str	r2, [r3, #16]
}
2000176e:	46c0      	nop			; (mov r8, r8)
20001770:	46bd      	mov	sp, r7
20001772:	b002      	add	sp, #8
20001774:	bd80      	pop	{r7, pc}
20001776:	46c0      	nop			; (mov r8, r8)
20001778:	e000ed00 	and	lr, r0, r0, lsl #26

2000177c <SysTick_CLKSourceConfig>:
  *     @arg SysTick_CLKSource_HCLK_Div8: AHB clock divided by 8 selected as SysTick clock source.
  *     @arg SysTick_CLKSource_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void SysTick_CLKSourceConfig(uint32_t SysTick_CLKSource)
{
2000177c:	b580      	push	{r7, lr}
2000177e:	b082      	sub	sp, #8
20001780:	af00      	add	r7, sp, #0
20001782:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(SysTick_CLKSource));
  if (SysTick_CLKSource == SysTick_CLKSource_HCLK)
20001784:	687b      	ldr	r3, [r7, #4]
20001786:	2b04      	cmp	r3, #4
20001788:	d106      	bne.n	20001798 <SysTick_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SysTick_CLKSource_HCLK;
2000178a:	4b08      	ldr	r3, [pc, #32]	; (200017ac <SysTick_CLKSourceConfig+0x30>)
2000178c:	681a      	ldr	r2, [r3, #0]
2000178e:	4b07      	ldr	r3, [pc, #28]	; (200017ac <SysTick_CLKSourceConfig+0x30>)
20001790:	2104      	movs	r1, #4
20001792:	430a      	orrs	r2, r1
20001794:	601a      	str	r2, [r3, #0]
  }
  else
  {
    SysTick->CTRL &= SysTick_CLKSource_HCLK_Div8;
  }
}
20001796:	e005      	b.n	200017a4 <SysTick_CLKSourceConfig+0x28>
    SysTick->CTRL &= SysTick_CLKSource_HCLK_Div8;
20001798:	4b04      	ldr	r3, [pc, #16]	; (200017ac <SysTick_CLKSourceConfig+0x30>)
2000179a:	681a      	ldr	r2, [r3, #0]
2000179c:	4b03      	ldr	r3, [pc, #12]	; (200017ac <SysTick_CLKSourceConfig+0x30>)
2000179e:	2104      	movs	r1, #4
200017a0:	438a      	bics	r2, r1
200017a2:	601a      	str	r2, [r3, #0]
}
200017a4:	46c0      	nop			; (mov r8, r8)
200017a6:	46bd      	mov	sp, r7
200017a8:	b002      	add	sp, #8
200017aa:	bd80      	pop	{r7, pc}
200017ac:	e000e010 	and	lr, r0, r0, lsl r0

200017b0 <bufferInit>:
#include "buffer.h"

//Nollställer bufferten
void bufferInit(FIFO *buffer) {
200017b0:	b580      	push	{r7, lr}
200017b2:	b082      	sub	sp, #8
200017b4:	af00      	add	r7, sp, #0
200017b6:	6078      	str	r0, [r7, #4]
    buffer->count = 0;
200017b8:	687b      	ldr	r3, [r7, #4]
200017ba:	2264      	movs	r2, #100	; 0x64
200017bc:	2100      	movs	r1, #0
200017be:	5499      	strb	r1, [r3, r2]
    buffer->in = 0;
200017c0:	687b      	ldr	r3, [r7, #4]
200017c2:	2265      	movs	r2, #101	; 0x65
200017c4:	2100      	movs	r1, #0
200017c6:	5499      	strb	r1, [r3, r2]
    buffer->out = 0;
200017c8:	687b      	ldr	r3, [r7, #4]
200017ca:	2266      	movs	r2, #102	; 0x66
200017cc:	2100      	movs	r1, #0
200017ce:	5499      	strb	r1, [r3, r2]
}
200017d0:	46c0      	nop			; (mov r8, r8)
200017d2:	46bd      	mov	sp, r7
200017d4:	b002      	add	sp, #8
200017d6:	bd80      	pop	{r7, pc}

200017d8 <bufferPut>:

//Lägger till ett elem i buffern.
//Returnerar 1 om det lyckades, 0 annars.
uint8_t bufferPut ( FIFO *buffer, uint8_t elem) {
200017d8:	b580      	push	{r7, lr}
200017da:	b082      	sub	sp, #8
200017dc:	af00      	add	r7, sp, #0
200017de:	6078      	str	r0, [r7, #4]
200017e0:	000a      	movs	r2, r1
200017e2:	1cfb      	adds	r3, r7, #3
200017e4:	701a      	strb	r2, [r3, #0]
    //Kollar om bufferten är full.
    if (buffer->count == BUFFERSIZE){
200017e6:	687b      	ldr	r3, [r7, #4]
200017e8:	2264      	movs	r2, #100	; 0x64
200017ea:	5c9b      	ldrb	r3, [r3, r2]
200017ec:	2b64      	cmp	r3, #100	; 0x64
200017ee:	d101      	bne.n	200017f4 <bufferPut+0x1c>
        return 0;
200017f0:	2300      	movs	r3, #0
200017f2:	e01e      	b.n	20001832 <bufferPut+0x5a>
    }

    //Lägger elem i bufferten
    buffer->buff[buffer->in++] = elem;
200017f4:	687b      	ldr	r3, [r7, #4]
200017f6:	2265      	movs	r2, #101	; 0x65
200017f8:	5c9b      	ldrb	r3, [r3, r2]
200017fa:	1c5a      	adds	r2, r3, #1
200017fc:	b2d0      	uxtb	r0, r2
200017fe:	687a      	ldr	r2, [r7, #4]
20001800:	2165      	movs	r1, #101	; 0x65
20001802:	5450      	strb	r0, [r2, r1]
20001804:	0019      	movs	r1, r3
20001806:	687b      	ldr	r3, [r7, #4]
20001808:	1cfa      	adds	r2, r7, #3
2000180a:	7812      	ldrb	r2, [r2, #0]
2000180c:	545a      	strb	r2, [r3, r1]
    buffer->count++;
2000180e:	687b      	ldr	r3, [r7, #4]
20001810:	2264      	movs	r2, #100	; 0x64
20001812:	5c9b      	ldrb	r3, [r3, r2]
20001814:	3301      	adds	r3, #1
20001816:	b2d9      	uxtb	r1, r3
20001818:	687b      	ldr	r3, [r7, #4]
2000181a:	2264      	movs	r2, #100	; 0x64
2000181c:	5499      	strb	r1, [r3, r2]

    //Justerar pekaren om vi nått slutet
    if (buffer->in == BUFFERSIZE)
2000181e:	687b      	ldr	r3, [r7, #4]
20001820:	2265      	movs	r2, #101	; 0x65
20001822:	5c9b      	ldrb	r3, [r3, r2]
20001824:	2b64      	cmp	r3, #100	; 0x64
20001826:	d103      	bne.n	20001830 <bufferPut+0x58>
        buffer->in = 0;
20001828:	687b      	ldr	r3, [r7, #4]
2000182a:	2265      	movs	r2, #101	; 0x65
2000182c:	2100      	movs	r1, #0
2000182e:	5499      	strb	r1, [r3, r2]

    return 1;
20001830:	2301      	movs	r3, #1
}
20001832:	0018      	movs	r0, r3
20001834:	46bd      	mov	sp, r7
20001836:	b002      	add	sp, #8
20001838:	bd80      	pop	{r7, pc}

2000183a <bufferGet>:

//Hämtar ett element från buffern till dest.
//Returnerar 1 om det lyckades, 0 annars.
uint8_t bufferGet ( FIFO *buffer, uint8_t *dest) {
2000183a:	b580      	push	{r7, lr}
2000183c:	b082      	sub	sp, #8
2000183e:	af00      	add	r7, sp, #0
20001840:	6078      	str	r0, [r7, #4]
20001842:	6039      	str	r1, [r7, #0]
    //Kollar om bufferten är tom
    if (!buffer->count){
20001844:	687b      	ldr	r3, [r7, #4]
20001846:	2264      	movs	r2, #100	; 0x64
20001848:	5c9b      	ldrb	r3, [r3, r2]
2000184a:	2b00      	cmp	r3, #0
2000184c:	d101      	bne.n	20001852 <bufferGet+0x18>
        return 0;
2000184e:	2300      	movs	r3, #0
20001850:	e01e      	b.n	20001890 <bufferGet+0x56>
    }

    //Hämtar element ur buffern till dest
    *dest = buffer->buff[buffer->out++];
20001852:	687b      	ldr	r3, [r7, #4]
20001854:	2266      	movs	r2, #102	; 0x66
20001856:	5c9b      	ldrb	r3, [r3, r2]
20001858:	1c5a      	adds	r2, r3, #1
2000185a:	b2d0      	uxtb	r0, r2
2000185c:	687a      	ldr	r2, [r7, #4]
2000185e:	2166      	movs	r1, #102	; 0x66
20001860:	5450      	strb	r0, [r2, r1]
20001862:	001a      	movs	r2, r3
20001864:	687b      	ldr	r3, [r7, #4]
20001866:	5c9a      	ldrb	r2, [r3, r2]
20001868:	683b      	ldr	r3, [r7, #0]
2000186a:	701a      	strb	r2, [r3, #0]
    buffer->count--;
2000186c:	687b      	ldr	r3, [r7, #4]
2000186e:	2264      	movs	r2, #100	; 0x64
20001870:	5c9b      	ldrb	r3, [r3, r2]
20001872:	3b01      	subs	r3, #1
20001874:	b2d9      	uxtb	r1, r3
20001876:	687b      	ldr	r3, [r7, #4]
20001878:	2264      	movs	r2, #100	; 0x64
2000187a:	5499      	strb	r1, [r3, r2]

    //Justerar pekaren om vi nått slutet
    if (buffer->out == BUFFERSIZE)
2000187c:	687b      	ldr	r3, [r7, #4]
2000187e:	2266      	movs	r2, #102	; 0x66
20001880:	5c9b      	ldrb	r3, [r3, r2]
20001882:	2b64      	cmp	r3, #100	; 0x64
20001884:	d103      	bne.n	2000188e <bufferGet+0x54>
        buffer->out = 0;
20001886:	687b      	ldr	r3, [r7, #4]
20001888:	2266      	movs	r2, #102	; 0x66
2000188a:	2100      	movs	r1, #0
2000188c:	5499      	strb	r1, [r3, r2]

    return 1;
2000188e:	2301      	movs	r3, #1
20001890:	0018      	movs	r0, r3
20001892:	46bd      	mov	sp, r7
20001894:	b002      	add	sp, #8
20001896:	bd80      	pop	{r7, pc}

20001898 <USART_DeInit>:
  * @param  USARTx: where x can be 1, 2, 3, 4, 5, 6, 7 or 8 to select the USART or 
  *         UART peripheral.
  * @retval None
  */
void USART_DeInit(USART_TypeDef* USARTx)
{
20001898:	b580      	push	{r7, lr}
2000189a:	b082      	sub	sp, #8
2000189c:	af00      	add	r7, sp, #0
2000189e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  if (USARTx == USART1)
200018a0:	687b      	ldr	r3, [r7, #4]
200018a2:	4a41      	ldr	r2, [pc, #260]	; (200019a8 <USART_DeInit+0x110>)
200018a4:	4293      	cmp	r3, r2
200018a6:	d108      	bne.n	200018ba <USART_DeInit+0x22>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, ENABLE);
200018a8:	2101      	movs	r1, #1
200018aa:	2010      	movs	r0, #16
200018ac:	f7ff f8f4 	bl	20000a98 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, DISABLE);
200018b0:	2100      	movs	r1, #0
200018b2:	2010      	movs	r0, #16
200018b4:	f7ff f8f0 	bl	20000a98 <RCC_APB2PeriphResetCmd>
    { 
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART8, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART8, DISABLE);
    }
  }
}
200018b8:	e071      	b.n	2000199e <USART_DeInit+0x106>
  else if (USARTx == USART2)
200018ba:	687b      	ldr	r3, [r7, #4]
200018bc:	4a3b      	ldr	r2, [pc, #236]	; (200019ac <USART_DeInit+0x114>)
200018be:	4293      	cmp	r3, r2
200018c0:	d10c      	bne.n	200018dc <USART_DeInit+0x44>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, ENABLE);
200018c2:	2380      	movs	r3, #128	; 0x80
200018c4:	029b      	lsls	r3, r3, #10
200018c6:	2101      	movs	r1, #1
200018c8:	0018      	movs	r0, r3
200018ca:	f7ff f8c5 	bl	20000a58 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, DISABLE);
200018ce:	2380      	movs	r3, #128	; 0x80
200018d0:	029b      	lsls	r3, r3, #10
200018d2:	2100      	movs	r1, #0
200018d4:	0018      	movs	r0, r3
200018d6:	f7ff f8bf 	bl	20000a58 <RCC_APB1PeriphResetCmd>
}
200018da:	e060      	b.n	2000199e <USART_DeInit+0x106>
  else if (USARTx == USART3)
200018dc:	687b      	ldr	r3, [r7, #4]
200018de:	4a34      	ldr	r2, [pc, #208]	; (200019b0 <USART_DeInit+0x118>)
200018e0:	4293      	cmp	r3, r2
200018e2:	d10c      	bne.n	200018fe <USART_DeInit+0x66>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, ENABLE);
200018e4:	2380      	movs	r3, #128	; 0x80
200018e6:	02db      	lsls	r3, r3, #11
200018e8:	2101      	movs	r1, #1
200018ea:	0018      	movs	r0, r3
200018ec:	f7ff f8b4 	bl	20000a58 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, DISABLE);
200018f0:	2380      	movs	r3, #128	; 0x80
200018f2:	02db      	lsls	r3, r3, #11
200018f4:	2100      	movs	r1, #0
200018f6:	0018      	movs	r0, r3
200018f8:	f7ff f8ae 	bl	20000a58 <RCC_APB1PeriphResetCmd>
}
200018fc:	e04f      	b.n	2000199e <USART_DeInit+0x106>
  else if (USARTx == UART4)
200018fe:	687b      	ldr	r3, [r7, #4]
20001900:	4a2c      	ldr	r2, [pc, #176]	; (200019b4 <USART_DeInit+0x11c>)
20001902:	4293      	cmp	r3, r2
20001904:	d10c      	bne.n	20001920 <USART_DeInit+0x88>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, ENABLE);
20001906:	2380      	movs	r3, #128	; 0x80
20001908:	031b      	lsls	r3, r3, #12
2000190a:	2101      	movs	r1, #1
2000190c:	0018      	movs	r0, r3
2000190e:	f7ff f8a3 	bl	20000a58 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, DISABLE);
20001912:	2380      	movs	r3, #128	; 0x80
20001914:	031b      	lsls	r3, r3, #12
20001916:	2100      	movs	r1, #0
20001918:	0018      	movs	r0, r3
2000191a:	f7ff f89d 	bl	20000a58 <RCC_APB1PeriphResetCmd>
}
2000191e:	e03e      	b.n	2000199e <USART_DeInit+0x106>
  else if (USARTx == UART5)
20001920:	687b      	ldr	r3, [r7, #4]
20001922:	4a25      	ldr	r2, [pc, #148]	; (200019b8 <USART_DeInit+0x120>)
20001924:	4293      	cmp	r3, r2
20001926:	d10c      	bne.n	20001942 <USART_DeInit+0xaa>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, ENABLE);
20001928:	2380      	movs	r3, #128	; 0x80
2000192a:	035b      	lsls	r3, r3, #13
2000192c:	2101      	movs	r1, #1
2000192e:	0018      	movs	r0, r3
20001930:	f7ff f892 	bl	20000a58 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, DISABLE);
20001934:	2380      	movs	r3, #128	; 0x80
20001936:	035b      	lsls	r3, r3, #13
20001938:	2100      	movs	r1, #0
2000193a:	0018      	movs	r0, r3
2000193c:	f7ff f88c 	bl	20000a58 <RCC_APB1PeriphResetCmd>
}
20001940:	e02d      	b.n	2000199e <USART_DeInit+0x106>
  else if (USARTx == USART6)
20001942:	687b      	ldr	r3, [r7, #4]
20001944:	4a1d      	ldr	r2, [pc, #116]	; (200019bc <USART_DeInit+0x124>)
20001946:	4293      	cmp	r3, r2
20001948:	d108      	bne.n	2000195c <USART_DeInit+0xc4>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, ENABLE);
2000194a:	2101      	movs	r1, #1
2000194c:	2020      	movs	r0, #32
2000194e:	f7ff f8a3 	bl	20000a98 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, DISABLE);
20001952:	2100      	movs	r1, #0
20001954:	2020      	movs	r0, #32
20001956:	f7ff f89f 	bl	20000a98 <RCC_APB2PeriphResetCmd>
}
2000195a:	e020      	b.n	2000199e <USART_DeInit+0x106>
  else if (USARTx == UART7)
2000195c:	687b      	ldr	r3, [r7, #4]
2000195e:	4a18      	ldr	r2, [pc, #96]	; (200019c0 <USART_DeInit+0x128>)
20001960:	4293      	cmp	r3, r2
20001962:	d10c      	bne.n	2000197e <USART_DeInit+0xe6>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART7, ENABLE);
20001964:	2380      	movs	r3, #128	; 0x80
20001966:	05db      	lsls	r3, r3, #23
20001968:	2101      	movs	r1, #1
2000196a:	0018      	movs	r0, r3
2000196c:	f7ff f874 	bl	20000a58 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART7, DISABLE);
20001970:	2380      	movs	r3, #128	; 0x80
20001972:	05db      	lsls	r3, r3, #23
20001974:	2100      	movs	r1, #0
20001976:	0018      	movs	r0, r3
20001978:	f7ff f86e 	bl	20000a58 <RCC_APB1PeriphResetCmd>
}
2000197c:	e00f      	b.n	2000199e <USART_DeInit+0x106>
    if (USARTx == UART8)
2000197e:	687b      	ldr	r3, [r7, #4]
20001980:	4a10      	ldr	r2, [pc, #64]	; (200019c4 <USART_DeInit+0x12c>)
20001982:	4293      	cmp	r3, r2
20001984:	d10b      	bne.n	2000199e <USART_DeInit+0x106>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART8, ENABLE);
20001986:	2380      	movs	r3, #128	; 0x80
20001988:	061b      	lsls	r3, r3, #24
2000198a:	2101      	movs	r1, #1
2000198c:	0018      	movs	r0, r3
2000198e:	f7ff f863 	bl	20000a58 <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART8, DISABLE);
20001992:	2380      	movs	r3, #128	; 0x80
20001994:	061b      	lsls	r3, r3, #24
20001996:	2100      	movs	r1, #0
20001998:	0018      	movs	r0, r3
2000199a:	f7ff f85d 	bl	20000a58 <RCC_APB1PeriphResetCmd>
}
2000199e:	46c0      	nop			; (mov r8, r8)
200019a0:	46bd      	mov	sp, r7
200019a2:	b002      	add	sp, #8
200019a4:	bd80      	pop	{r7, pc}
200019a6:	46c0      	nop			; (mov r8, r8)
200019a8:	40011000 	andmi	r1, r1, r0
200019ac:	40004400 	andmi	r4, r0, r0, lsl #8
200019b0:	40004800 	andmi	r4, r0, r0, lsl #16
200019b4:	40004c00 	andmi	r4, r0, r0, lsl #24
200019b8:	40005000 	andmi	r5, r0, r0
200019bc:	40011400 	andmi	r1, r1, r0, lsl #8
200019c0:	40007800 	andmi	r7, r0, r0, lsl #16
200019c4:	40007c00 	andmi	r7, r0, r0, lsl #24

200019c8 <USART_Init>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
200019c8:	b580      	push	{r7, lr}
200019ca:	b08a      	sub	sp, #40	; 0x28
200019cc:	af00      	add	r7, sp, #0
200019ce:	6078      	str	r0, [r7, #4]
200019d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00, apbclock = 0x00;
200019d2:	2300      	movs	r3, #0
200019d4:	627b      	str	r3, [r7, #36]	; 0x24
200019d6:	2300      	movs	r3, #0
200019d8:	623b      	str	r3, [r7, #32]
  uint32_t integerdivider = 0x00;
200019da:	2300      	movs	r3, #0
200019dc:	61fb      	str	r3, [r7, #28]
  uint32_t fractionaldivider = 0x00;
200019de:	2300      	movs	r3, #0
200019e0:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  }

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
200019e2:	687b      	ldr	r3, [r7, #4]
200019e4:	8a1b      	ldrh	r3, [r3, #16]
200019e6:	b29b      	uxth	r3, r3
200019e8:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
200019ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
200019ec:	4a56      	ldr	r2, [pc, #344]	; (20001b48 <USART_Init+0x180>)
200019ee:	4013      	ands	r3, r2
200019f0:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit :
      Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
200019f2:	683b      	ldr	r3, [r7, #0]
200019f4:	88db      	ldrh	r3, [r3, #6]
200019f6:	001a      	movs	r2, r3
200019f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
200019fa:	4313      	orrs	r3, r2
200019fc:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
200019fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20001a00:	b29a      	uxth	r2, r3
20001a02:	687b      	ldr	r3, [r7, #4]
20001a04:	821a      	strh	r2, [r3, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
20001a06:	687b      	ldr	r3, [r7, #4]
20001a08:	899b      	ldrh	r3, [r3, #12]
20001a0a:	b29b      	uxth	r3, r3
20001a0c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
20001a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20001a10:	4a4e      	ldr	r2, [pc, #312]	; (20001b4c <USART_Init+0x184>)
20001a12:	4013      	ands	r3, r2
20001a14:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
20001a16:	683b      	ldr	r3, [r7, #0]
20001a18:	889a      	ldrh	r2, [r3, #4]
20001a1a:	683b      	ldr	r3, [r7, #0]
20001a1c:	891b      	ldrh	r3, [r3, #8]
20001a1e:	4313      	orrs	r3, r2
20001a20:	b29a      	uxth	r2, r3
            USART_InitStruct->USART_Mode;
20001a22:	683b      	ldr	r3, [r7, #0]
20001a24:	895b      	ldrh	r3, [r3, #10]
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
20001a26:	4313      	orrs	r3, r2
20001a28:	b29b      	uxth	r3, r3
20001a2a:	001a      	movs	r2, r3
20001a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20001a2e:	4313      	orrs	r3, r2
20001a30:	627b      	str	r3, [r7, #36]	; 0x24

  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
20001a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20001a34:	b29a      	uxth	r2, r3
20001a36:	687b      	ldr	r3, [r7, #4]
20001a38:	819a      	strh	r2, [r3, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
20001a3a:	687b      	ldr	r3, [r7, #4]
20001a3c:	8a9b      	ldrh	r3, [r3, #20]
20001a3e:	b29b      	uxth	r3, r3
20001a40:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);
20001a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20001a44:	4a42      	ldr	r2, [pc, #264]	; (20001b50 <USART_Init+0x188>)
20001a46:	4013      	ands	r3, r2
20001a48:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART HFC : 
      Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
20001a4a:	683b      	ldr	r3, [r7, #0]
20001a4c:	899b      	ldrh	r3, [r3, #12]
20001a4e:	001a      	movs	r2, r3
20001a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20001a52:	4313      	orrs	r3, r2
20001a54:	627b      	str	r3, [r7, #36]	; 0x24

  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
20001a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20001a58:	b29a      	uxth	r2, r3
20001a5a:	687b      	ldr	r3, [r7, #4]
20001a5c:	829a      	strh	r2, [r3, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate */
  RCC_GetClocksFreq(&RCC_ClocksStatus);
20001a5e:	2308      	movs	r3, #8
20001a60:	18fb      	adds	r3, r7, r3
20001a62:	0018      	movs	r0, r3
20001a64:	f7fe fd48 	bl	200004f8 <RCC_GetClocksFreq>

  if ((USARTx == USART1) || (USARTx == USART6))
20001a68:	687b      	ldr	r3, [r7, #4]
20001a6a:	4a3a      	ldr	r2, [pc, #232]	; (20001b54 <USART_Init+0x18c>)
20001a6c:	4293      	cmp	r3, r2
20001a6e:	d003      	beq.n	20001a78 <USART_Init+0xb0>
20001a70:	687b      	ldr	r3, [r7, #4]
20001a72:	4a39      	ldr	r2, [pc, #228]	; (20001b58 <USART_Init+0x190>)
20001a74:	4293      	cmp	r3, r2
20001a76:	d104      	bne.n	20001a82 <USART_Init+0xba>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
20001a78:	2308      	movs	r3, #8
20001a7a:	18fb      	adds	r3, r7, r3
20001a7c:	68db      	ldr	r3, [r3, #12]
20001a7e:	623b      	str	r3, [r7, #32]
20001a80:	e003      	b.n	20001a8a <USART_Init+0xc2>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
20001a82:	2308      	movs	r3, #8
20001a84:	18fb      	adds	r3, r7, r3
20001a86:	689b      	ldr	r3, [r3, #8]
20001a88:	623b      	str	r3, [r7, #32]
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
20001a8a:	687b      	ldr	r3, [r7, #4]
20001a8c:	899b      	ldrh	r3, [r3, #12]
20001a8e:	b29b      	uxth	r3, r3
20001a90:	b21b      	sxth	r3, r3
20001a92:	2b00      	cmp	r3, #0
20001a94:	da0f      	bge.n	20001ab6 <USART_Init+0xee>
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
20001a96:	6a3a      	ldr	r2, [r7, #32]
20001a98:	0013      	movs	r3, r2
20001a9a:	009b      	lsls	r3, r3, #2
20001a9c:	189b      	adds	r3, r3, r2
20001a9e:	009a      	lsls	r2, r3, #2
20001aa0:	189a      	adds	r2, r3, r2
20001aa2:	683b      	ldr	r3, [r7, #0]
20001aa4:	681b      	ldr	r3, [r3, #0]
20001aa6:	005b      	lsls	r3, r3, #1
20001aa8:	0019      	movs	r1, r3
20001aaa:	0010      	movs	r0, r2
20001aac:	f000 fd94 	bl	200025d8 <__udivsi3>
20001ab0:	0003      	movs	r3, r0
20001ab2:	61fb      	str	r3, [r7, #28]
20001ab4:	e00e      	b.n	20001ad4 <USART_Init+0x10c>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
20001ab6:	6a3a      	ldr	r2, [r7, #32]
20001ab8:	0013      	movs	r3, r2
20001aba:	009b      	lsls	r3, r3, #2
20001abc:	189b      	adds	r3, r3, r2
20001abe:	009a      	lsls	r2, r3, #2
20001ac0:	189a      	adds	r2, r3, r2
20001ac2:	683b      	ldr	r3, [r7, #0]
20001ac4:	681b      	ldr	r3, [r3, #0]
20001ac6:	009b      	lsls	r3, r3, #2
20001ac8:	0019      	movs	r1, r3
20001aca:	0010      	movs	r0, r2
20001acc:	f000 fd84 	bl	200025d8 <__udivsi3>
20001ad0:	0003      	movs	r3, r0
20001ad2:	61fb      	str	r3, [r7, #28]
  }
  tmpreg = (integerdivider / 100) << 4;
20001ad4:	69fb      	ldr	r3, [r7, #28]
20001ad6:	2164      	movs	r1, #100	; 0x64
20001ad8:	0018      	movs	r0, r3
20001ada:	f000 fd7d 	bl	200025d8 <__udivsi3>
20001ade:	0003      	movs	r3, r0
20001ae0:	011b      	lsls	r3, r3, #4
20001ae2:	627b      	str	r3, [r7, #36]	; 0x24

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
20001ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20001ae6:	091b      	lsrs	r3, r3, #4
20001ae8:	2264      	movs	r2, #100	; 0x64
20001aea:	4353      	muls	r3, r2
20001aec:	69fa      	ldr	r2, [r7, #28]
20001aee:	1ad3      	subs	r3, r2, r3
20001af0:	61bb      	str	r3, [r7, #24]

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
20001af2:	687b      	ldr	r3, [r7, #4]
20001af4:	899b      	ldrh	r3, [r3, #12]
20001af6:	b29b      	uxth	r3, r3
20001af8:	b21b      	sxth	r3, r3
20001afa:	2b00      	cmp	r3, #0
20001afc:	da0e      	bge.n	20001b1c <USART_Init+0x154>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
20001afe:	69bb      	ldr	r3, [r7, #24]
20001b00:	00db      	lsls	r3, r3, #3
20001b02:	3332      	adds	r3, #50	; 0x32
20001b04:	2164      	movs	r1, #100	; 0x64
20001b06:	0018      	movs	r0, r3
20001b08:	f000 fd66 	bl	200025d8 <__udivsi3>
20001b0c:	0003      	movs	r3, r0
20001b0e:	001a      	movs	r2, r3
20001b10:	2307      	movs	r3, #7
20001b12:	4013      	ands	r3, r2
20001b14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
20001b16:	4313      	orrs	r3, r2
20001b18:	627b      	str	r3, [r7, #36]	; 0x24
20001b1a:	e00d      	b.n	20001b38 <USART_Init+0x170>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
20001b1c:	69bb      	ldr	r3, [r7, #24]
20001b1e:	011b      	lsls	r3, r3, #4
20001b20:	3332      	adds	r3, #50	; 0x32
20001b22:	2164      	movs	r1, #100	; 0x64
20001b24:	0018      	movs	r0, r3
20001b26:	f000 fd57 	bl	200025d8 <__udivsi3>
20001b2a:	0003      	movs	r3, r0
20001b2c:	001a      	movs	r2, r3
20001b2e:	230f      	movs	r3, #15
20001b30:	4013      	ands	r3, r2
20001b32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
20001b34:	4313      	orrs	r3, r2
20001b36:	627b      	str	r3, [r7, #36]	; 0x24
  }
  
  /* Write to USART BRR register */
  USARTx->BRR = (uint16_t)tmpreg;
20001b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20001b3a:	b29a      	uxth	r2, r3
20001b3c:	687b      	ldr	r3, [r7, #4]
20001b3e:	811a      	strh	r2, [r3, #8]
}
20001b40:	46c0      	nop			; (mov r8, r8)
20001b42:	46bd      	mov	sp, r7
20001b44:	b00a      	add	sp, #40	; 0x28
20001b46:	bd80      	pop	{r7, pc}
20001b48:	ffffcfff 			; <UNDEFINED> instruction: 0xffffcfff
20001b4c:	ffffe9f3 			; <UNDEFINED> instruction: 0xffffe9f3
20001b50:	fffffcff 			; <UNDEFINED> instruction: 0xfffffcff
20001b54:	40011000 	andmi	r1, r1, r0
20001b58:	40011400 	andmi	r1, r1, r0, lsl #8

20001b5c <USART_StructInit>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void USART_StructInit(USART_InitTypeDef* USART_InitStruct)
{
20001b5c:	b580      	push	{r7, lr}
20001b5e:	b082      	sub	sp, #8
20001b60:	af00      	add	r7, sp, #0
20001b62:	6078      	str	r0, [r7, #4]
  /* USART_InitStruct members default value */
  USART_InitStruct->USART_BaudRate = 9600;
20001b64:	687b      	ldr	r3, [r7, #4]
20001b66:	2296      	movs	r2, #150	; 0x96
20001b68:	0192      	lsls	r2, r2, #6
20001b6a:	601a      	str	r2, [r3, #0]
  USART_InitStruct->USART_WordLength = USART_WordLength_8b;
20001b6c:	687b      	ldr	r3, [r7, #4]
20001b6e:	2200      	movs	r2, #0
20001b70:	809a      	strh	r2, [r3, #4]
  USART_InitStruct->USART_StopBits = USART_StopBits_1;
20001b72:	687b      	ldr	r3, [r7, #4]
20001b74:	2200      	movs	r2, #0
20001b76:	80da      	strh	r2, [r3, #6]
  USART_InitStruct->USART_Parity = USART_Parity_No ;
20001b78:	687b      	ldr	r3, [r7, #4]
20001b7a:	2200      	movs	r2, #0
20001b7c:	811a      	strh	r2, [r3, #8]
  USART_InitStruct->USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
20001b7e:	687b      	ldr	r3, [r7, #4]
20001b80:	220c      	movs	r2, #12
20001b82:	815a      	strh	r2, [r3, #10]
  USART_InitStruct->USART_HardwareFlowControl = USART_HardwareFlowControl_None;  
20001b84:	687b      	ldr	r3, [r7, #4]
20001b86:	2200      	movs	r2, #0
20001b88:	819a      	strh	r2, [r3, #12]
}
20001b8a:	46c0      	nop			; (mov r8, r8)
20001b8c:	46bd      	mov	sp, r7
20001b8e:	b002      	add	sp, #8
20001b90:	bd80      	pop	{r7, pc}

20001b92 <USART_ClockInit>:
  *         contains the configuration information for the specified  USART peripheral.
  * @note   The Smart Card and Synchronous modes are not available for UART4 and UART5.    
  * @retval None
  */
void USART_ClockInit(USART_TypeDef* USARTx, USART_ClockInitTypeDef* USART_ClockInitStruct)
{
20001b92:	b580      	push	{r7, lr}
20001b94:	b084      	sub	sp, #16
20001b96:	af00      	add	r7, sp, #0
20001b98:	6078      	str	r0, [r7, #4]
20001b9a:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00;
20001b9c:	2300      	movs	r3, #0
20001b9e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_USART_CPOL(USART_ClockInitStruct->USART_CPOL));
  assert_param(IS_USART_CPHA(USART_ClockInitStruct->USART_CPHA));
  assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));
  
/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
20001ba0:	687b      	ldr	r3, [r7, #4]
20001ba2:	8a1b      	ldrh	r3, [r3, #16]
20001ba4:	b29b      	uxth	r3, r3
20001ba6:	60fb      	str	r3, [r7, #12]
  /* Clear CLKEN, CPOL, CPHA and LBCL bits */
  tmpreg &= (uint32_t)~((uint32_t)CR2_CLOCK_CLEAR_MASK);
20001ba8:	68fb      	ldr	r3, [r7, #12]
20001baa:	4a0e      	ldr	r2, [pc, #56]	; (20001be4 <USART_ClockInit+0x52>)
20001bac:	4013      	ands	r3, r2
20001bae:	60fb      	str	r3, [r7, #12]
  /* Configure the USART Clock, CPOL, CPHA and LastBit ------------*/
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
20001bb0:	683b      	ldr	r3, [r7, #0]
20001bb2:	881a      	ldrh	r2, [r3, #0]
20001bb4:	683b      	ldr	r3, [r7, #0]
20001bb6:	885b      	ldrh	r3, [r3, #2]
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
20001bb8:	4313      	orrs	r3, r2
20001bba:	b29a      	uxth	r2, r3
20001bbc:	683b      	ldr	r3, [r7, #0]
20001bbe:	889b      	ldrh	r3, [r3, #4]
20001bc0:	4313      	orrs	r3, r2
20001bc2:	b29a      	uxth	r2, r3
20001bc4:	683b      	ldr	r3, [r7, #0]
20001bc6:	88db      	ldrh	r3, [r3, #6]
20001bc8:	4313      	orrs	r3, r2
20001bca:	b29b      	uxth	r3, r3
20001bcc:	001a      	movs	r2, r3
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
20001bce:	68fb      	ldr	r3, [r7, #12]
20001bd0:	4313      	orrs	r3, r2
20001bd2:	60fb      	str	r3, [r7, #12]
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
20001bd4:	68fb      	ldr	r3, [r7, #12]
20001bd6:	b29a      	uxth	r2, r3
20001bd8:	687b      	ldr	r3, [r7, #4]
20001bda:	821a      	strh	r2, [r3, #16]
}
20001bdc:	46c0      	nop			; (mov r8, r8)
20001bde:	46bd      	mov	sp, r7
20001be0:	b004      	add	sp, #16
20001be2:	bd80      	pop	{r7, pc}
20001be4:	fffff0ff 			; <UNDEFINED> instruction: 0xfffff0ff

20001be8 <USART_ClockStructInit>:
  * @param  USART_ClockInitStruct: pointer to a USART_ClockInitTypeDef structure
  *         which will be initialized.
  * @retval None
  */
void USART_ClockStructInit(USART_ClockInitTypeDef* USART_ClockInitStruct)
{
20001be8:	b580      	push	{r7, lr}
20001bea:	b082      	sub	sp, #8
20001bec:	af00      	add	r7, sp, #0
20001bee:	6078      	str	r0, [r7, #4]
  /* USART_ClockInitStruct members default value */
  USART_ClockInitStruct->USART_Clock = USART_Clock_Disable;
20001bf0:	687b      	ldr	r3, [r7, #4]
20001bf2:	2200      	movs	r2, #0
20001bf4:	801a      	strh	r2, [r3, #0]
  USART_ClockInitStruct->USART_CPOL = USART_CPOL_Low;
20001bf6:	687b      	ldr	r3, [r7, #4]
20001bf8:	2200      	movs	r2, #0
20001bfa:	805a      	strh	r2, [r3, #2]
  USART_ClockInitStruct->USART_CPHA = USART_CPHA_1Edge;
20001bfc:	687b      	ldr	r3, [r7, #4]
20001bfe:	2200      	movs	r2, #0
20001c00:	809a      	strh	r2, [r3, #4]
  USART_ClockInitStruct->USART_LastBit = USART_LastBit_Disable;
20001c02:	687b      	ldr	r3, [r7, #4]
20001c04:	2200      	movs	r2, #0
20001c06:	80da      	strh	r2, [r3, #6]
}
20001c08:	46c0      	nop			; (mov r8, r8)
20001c0a:	46bd      	mov	sp, r7
20001c0c:	b002      	add	sp, #8
20001c0e:	bd80      	pop	{r7, pc}

20001c10 <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
20001c10:	b580      	push	{r7, lr}
20001c12:	b082      	sub	sp, #8
20001c14:	af00      	add	r7, sp, #0
20001c16:	6078      	str	r0, [r7, #4]
20001c18:	000a      	movs	r2, r1
20001c1a:	1cfb      	adds	r3, r7, #3
20001c1c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
20001c1e:	1cfb      	adds	r3, r7, #3
20001c20:	781b      	ldrb	r3, [r3, #0]
20001c22:	2b00      	cmp	r3, #0
20001c24:	d009      	beq.n	20001c3a <USART_Cmd+0x2a>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_UE;
20001c26:	687b      	ldr	r3, [r7, #4]
20001c28:	899b      	ldrh	r3, [r3, #12]
20001c2a:	b29b      	uxth	r3, r3
20001c2c:	2280      	movs	r2, #128	; 0x80
20001c2e:	0192      	lsls	r2, r2, #6
20001c30:	4313      	orrs	r3, r2
20001c32:	b29a      	uxth	r2, r3
20001c34:	687b      	ldr	r3, [r7, #4]
20001c36:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
  }
}
20001c38:	e007      	b.n	20001c4a <USART_Cmd+0x3a>
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
20001c3a:	687b      	ldr	r3, [r7, #4]
20001c3c:	899b      	ldrh	r3, [r3, #12]
20001c3e:	b29b      	uxth	r3, r3
20001c40:	4a04      	ldr	r2, [pc, #16]	; (20001c54 <USART_Cmd+0x44>)
20001c42:	4013      	ands	r3, r2
20001c44:	b29a      	uxth	r2, r3
20001c46:	687b      	ldr	r3, [r7, #4]
20001c48:	819a      	strh	r2, [r3, #12]
}
20001c4a:	46c0      	nop			; (mov r8, r8)
20001c4c:	46bd      	mov	sp, r7
20001c4e:	b002      	add	sp, #8
20001c50:	bd80      	pop	{r7, pc}
20001c52:	46c0      	nop			; (mov r8, r8)
20001c54:	ffffdfff 			; <UNDEFINED> instruction: 0xffffdfff

20001c58 <USART_SetPrescaler>:
  * @param  USART_Prescaler: specifies the prescaler clock. 
  * @note   The function is used for IrDA mode with UART4 and UART5.   
  * @retval None
  */
void USART_SetPrescaler(USART_TypeDef* USARTx, uint8_t USART_Prescaler)
{ 
20001c58:	b580      	push	{r7, lr}
20001c5a:	b082      	sub	sp, #8
20001c5c:	af00      	add	r7, sp, #0
20001c5e:	6078      	str	r0, [r7, #4]
20001c60:	000a      	movs	r2, r1
20001c62:	1cfb      	adds	r3, r7, #3
20001c64:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Clear the USART prescaler */
  USARTx->GTPR &= USART_GTPR_GT;
20001c66:	687b      	ldr	r3, [r7, #4]
20001c68:	8b1b      	ldrh	r3, [r3, #24]
20001c6a:	b29b      	uxth	r3, r3
20001c6c:	22ff      	movs	r2, #255	; 0xff
20001c6e:	4393      	bics	r3, r2
20001c70:	b29a      	uxth	r2, r3
20001c72:	687b      	ldr	r3, [r7, #4]
20001c74:	831a      	strh	r2, [r3, #24]
  /* Set the USART prescaler */
  USARTx->GTPR |= USART_Prescaler;
20001c76:	687b      	ldr	r3, [r7, #4]
20001c78:	8b1b      	ldrh	r3, [r3, #24]
20001c7a:	b29a      	uxth	r2, r3
20001c7c:	1cfb      	adds	r3, r7, #3
20001c7e:	781b      	ldrb	r3, [r3, #0]
20001c80:	b29b      	uxth	r3, r3
20001c82:	4313      	orrs	r3, r2
20001c84:	b29a      	uxth	r2, r3
20001c86:	687b      	ldr	r3, [r7, #4]
20001c88:	831a      	strh	r2, [r3, #24]
}
20001c8a:	46c0      	nop			; (mov r8, r8)
20001c8c:	46bd      	mov	sp, r7
20001c8e:	b002      	add	sp, #8
20001c90:	bd80      	pop	{r7, pc}

20001c92 <USART_OverSampling8Cmd>:
  * @param  NewState: new state of the USART 8x oversampling mode.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_OverSampling8Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
20001c92:	b580      	push	{r7, lr}
20001c94:	b082      	sub	sp, #8
20001c96:	af00      	add	r7, sp, #0
20001c98:	6078      	str	r0, [r7, #4]
20001c9a:	000a      	movs	r2, r1
20001c9c:	1cfb      	adds	r3, r7, #3
20001c9e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
20001ca0:	1cfb      	adds	r3, r7, #3
20001ca2:	781b      	ldrb	r3, [r3, #0]
20001ca4:	2b00      	cmp	r3, #0
20001ca6:	d008      	beq.n	20001cba <USART_OverSampling8Cmd+0x28>
  {
    /* Enable the 8x Oversampling mode by setting the OVER8 bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_OVER8;
20001ca8:	687b      	ldr	r3, [r7, #4]
20001caa:	899b      	ldrh	r3, [r3, #12]
20001cac:	b29b      	uxth	r3, r3
20001cae:	4a09      	ldr	r2, [pc, #36]	; (20001cd4 <USART_OverSampling8Cmd+0x42>)
20001cb0:	4313      	orrs	r3, r2
20001cb2:	b29a      	uxth	r2, r3
20001cb4:	687b      	ldr	r3, [r7, #4]
20001cb6:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the 8x Oversampling mode by clearing the OVER8 bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_OVER8);
  }
}  
20001cb8:	e007      	b.n	20001cca <USART_OverSampling8Cmd+0x38>
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_OVER8);
20001cba:	687b      	ldr	r3, [r7, #4]
20001cbc:	899b      	ldrh	r3, [r3, #12]
20001cbe:	b29b      	uxth	r3, r3
20001cc0:	045b      	lsls	r3, r3, #17
20001cc2:	0c5b      	lsrs	r3, r3, #17
20001cc4:	b29a      	uxth	r2, r3
20001cc6:	687b      	ldr	r3, [r7, #4]
20001cc8:	819a      	strh	r2, [r3, #12]
}  
20001cca:	46c0      	nop			; (mov r8, r8)
20001ccc:	46bd      	mov	sp, r7
20001cce:	b002      	add	sp, #8
20001cd0:	bd80      	pop	{r7, pc}
20001cd2:	46c0      	nop			; (mov r8, r8)
20001cd4:	ffff8000 			; <UNDEFINED> instruction: 0xffff8000

20001cd8 <USART_OneBitMethodCmd>:
  * @param  NewState: new state of the USART one bit sampling method.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_OneBitMethodCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
20001cd8:	b580      	push	{r7, lr}
20001cda:	b082      	sub	sp, #8
20001cdc:	af00      	add	r7, sp, #0
20001cde:	6078      	str	r0, [r7, #4]
20001ce0:	000a      	movs	r2, r1
20001ce2:	1cfb      	adds	r3, r7, #3
20001ce4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
20001ce6:	1cfb      	adds	r3, r7, #3
20001ce8:	781b      	ldrb	r3, [r3, #0]
20001cea:	2b00      	cmp	r3, #0
20001cec:	d009      	beq.n	20001d02 <USART_OneBitMethodCmd+0x2a>
  {
    /* Enable the one bit method by setting the ONEBITE bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_ONEBIT;
20001cee:	687b      	ldr	r3, [r7, #4]
20001cf0:	8a9b      	ldrh	r3, [r3, #20]
20001cf2:	b29b      	uxth	r3, r3
20001cf4:	2280      	movs	r2, #128	; 0x80
20001cf6:	0112      	lsls	r2, r2, #4
20001cf8:	4313      	orrs	r3, r2
20001cfa:	b29a      	uxth	r2, r3
20001cfc:	687b      	ldr	r3, [r7, #4]
20001cfe:	829a      	strh	r2, [r3, #20]
  else
  {
    /* Disable the one bit method by clearing the ONEBITE bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_ONEBIT);
  }
}
20001d00:	e007      	b.n	20001d12 <USART_OneBitMethodCmd+0x3a>
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_ONEBIT);
20001d02:	687b      	ldr	r3, [r7, #4]
20001d04:	8a9b      	ldrh	r3, [r3, #20]
20001d06:	b29b      	uxth	r3, r3
20001d08:	4a04      	ldr	r2, [pc, #16]	; (20001d1c <USART_OneBitMethodCmd+0x44>)
20001d0a:	4013      	ands	r3, r2
20001d0c:	b29a      	uxth	r2, r3
20001d0e:	687b      	ldr	r3, [r7, #4]
20001d10:	829a      	strh	r2, [r3, #20]
}
20001d12:	46c0      	nop			; (mov r8, r8)
20001d14:	46bd      	mov	sp, r7
20001d16:	b002      	add	sp, #8
20001d18:	bd80      	pop	{r7, pc}
20001d1a:	46c0      	nop			; (mov r8, r8)
20001d1c:	fffff7ff 			; <UNDEFINED> instruction: 0xfffff7ff

20001d20 <USART_SendData>:
  *         UART peripheral.
  * @param  Data: the data to transmit.
  * @retval None
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
20001d20:	b580      	push	{r7, lr}
20001d22:	b082      	sub	sp, #8
20001d24:	af00      	add	r7, sp, #0
20001d26:	6078      	str	r0, [r7, #4]
20001d28:	000a      	movs	r2, r1
20001d2a:	1cbb      	adds	r3, r7, #2
20001d2c:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 
    
  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
20001d2e:	1cbb      	adds	r3, r7, #2
20001d30:	881b      	ldrh	r3, [r3, #0]
20001d32:	05db      	lsls	r3, r3, #23
20001d34:	0ddb      	lsrs	r3, r3, #23
20001d36:	b29a      	uxth	r2, r3
20001d38:	687b      	ldr	r3, [r7, #4]
20001d3a:	809a      	strh	r2, [r3, #4]
}
20001d3c:	46c0      	nop			; (mov r8, r8)
20001d3e:	46bd      	mov	sp, r7
20001d40:	b002      	add	sp, #8
20001d42:	bd80      	pop	{r7, pc}

20001d44 <USART_ReceiveData>:
  * @param  USARTx: where x can be 1, 2, 3, 4, 5, 6, 7 or 8 to select the USART or 
  *         UART peripheral.
  * @retval The received data.
  */
uint16_t USART_ReceiveData(USART_TypeDef* USARTx)
{
20001d44:	b580      	push	{r7, lr}
20001d46:	b082      	sub	sp, #8
20001d48:	af00      	add	r7, sp, #0
20001d4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Receive Data */
  return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);
20001d4c:	687b      	ldr	r3, [r7, #4]
20001d4e:	889b      	ldrh	r3, [r3, #4]
20001d50:	b29b      	uxth	r3, r3
20001d52:	05db      	lsls	r3, r3, #23
20001d54:	0ddb      	lsrs	r3, r3, #23
20001d56:	b29b      	uxth	r3, r3
}
20001d58:	0018      	movs	r0, r3
20001d5a:	46bd      	mov	sp, r7
20001d5c:	b002      	add	sp, #8
20001d5e:	bd80      	pop	{r7, pc}

20001d60 <USART_SetAddress>:
  *         UART peripheral.
  * @param  USART_Address: Indicates the address of the USART node.
  * @retval None
  */
void USART_SetAddress(USART_TypeDef* USARTx, uint8_t USART_Address)
{
20001d60:	b580      	push	{r7, lr}
20001d62:	b082      	sub	sp, #8
20001d64:	af00      	add	r7, sp, #0
20001d66:	6078      	str	r0, [r7, #4]
20001d68:	000a      	movs	r2, r1
20001d6a:	1cfb      	adds	r3, r7, #3
20001d6c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_ADDRESS(USART_Address)); 
    
  /* Clear the USART address */
  USARTx->CR2 &= (uint16_t)~((uint16_t)USART_CR2_ADD);
20001d6e:	687b      	ldr	r3, [r7, #4]
20001d70:	8a1b      	ldrh	r3, [r3, #16]
20001d72:	b29b      	uxth	r3, r3
20001d74:	220f      	movs	r2, #15
20001d76:	4393      	bics	r3, r2
20001d78:	b29a      	uxth	r2, r3
20001d7a:	687b      	ldr	r3, [r7, #4]
20001d7c:	821a      	strh	r2, [r3, #16]
  /* Set the USART address node */
  USARTx->CR2 |= USART_Address;
20001d7e:	687b      	ldr	r3, [r7, #4]
20001d80:	8a1b      	ldrh	r3, [r3, #16]
20001d82:	b29a      	uxth	r2, r3
20001d84:	1cfb      	adds	r3, r7, #3
20001d86:	781b      	ldrb	r3, [r3, #0]
20001d88:	b29b      	uxth	r3, r3
20001d8a:	4313      	orrs	r3, r2
20001d8c:	b29a      	uxth	r2, r3
20001d8e:	687b      	ldr	r3, [r7, #4]
20001d90:	821a      	strh	r2, [r3, #16]
}
20001d92:	46c0      	nop			; (mov r8, r8)
20001d94:	46bd      	mov	sp, r7
20001d96:	b002      	add	sp, #8
20001d98:	bd80      	pop	{r7, pc}

20001d9a <USART_ReceiverWakeUpCmd>:
  * @param  NewState: new state of the USART mute mode.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ReceiverWakeUpCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
20001d9a:	b580      	push	{r7, lr}
20001d9c:	b082      	sub	sp, #8
20001d9e:	af00      	add	r7, sp, #0
20001da0:	6078      	str	r0, [r7, #4]
20001da2:	000a      	movs	r2, r1
20001da4:	1cfb      	adds	r3, r7, #3
20001da6:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 
  
  if (NewState != DISABLE)
20001da8:	1cfb      	adds	r3, r7, #3
20001daa:	781b      	ldrb	r3, [r3, #0]
20001dac:	2b00      	cmp	r3, #0
20001dae:	d008      	beq.n	20001dc2 <USART_ReceiverWakeUpCmd+0x28>
  {
    /* Enable the USART mute mode  by setting the RWU bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_RWU;
20001db0:	687b      	ldr	r3, [r7, #4]
20001db2:	899b      	ldrh	r3, [r3, #12]
20001db4:	b29b      	uxth	r3, r3
20001db6:	2202      	movs	r2, #2
20001db8:	4313      	orrs	r3, r2
20001dba:	b29a      	uxth	r2, r3
20001dbc:	687b      	ldr	r3, [r7, #4]
20001dbe:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the USART mute mode by clearing the RWU bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_RWU);
  }
}
20001dc0:	e007      	b.n	20001dd2 <USART_ReceiverWakeUpCmd+0x38>
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_RWU);
20001dc2:	687b      	ldr	r3, [r7, #4]
20001dc4:	899b      	ldrh	r3, [r3, #12]
20001dc6:	b29b      	uxth	r3, r3
20001dc8:	2202      	movs	r2, #2
20001dca:	4393      	bics	r3, r2
20001dcc:	b29a      	uxth	r2, r3
20001dce:	687b      	ldr	r3, [r7, #4]
20001dd0:	819a      	strh	r2, [r3, #12]
}
20001dd2:	46c0      	nop			; (mov r8, r8)
20001dd4:	46bd      	mov	sp, r7
20001dd6:	b002      	add	sp, #8
20001dd8:	bd80      	pop	{r7, pc}

20001dda <USART_WakeUpConfig>:
  *            @arg USART_WakeUp_IdleLine: WakeUp by an idle line detection
  *            @arg USART_WakeUp_AddressMark: WakeUp by an address mark
  * @retval None
  */
void USART_WakeUpConfig(USART_TypeDef* USARTx, uint16_t USART_WakeUp)
{
20001dda:	b580      	push	{r7, lr}
20001ddc:	b082      	sub	sp, #8
20001dde:	af00      	add	r7, sp, #0
20001de0:	6078      	str	r0, [r7, #4]
20001de2:	000a      	movs	r2, r1
20001de4:	1cbb      	adds	r3, r7, #2
20001de6:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_WAKEUP(USART_WakeUp));
  
  USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_WAKE);
20001de8:	687b      	ldr	r3, [r7, #4]
20001dea:	899b      	ldrh	r3, [r3, #12]
20001dec:	b29b      	uxth	r3, r3
20001dee:	4a09      	ldr	r2, [pc, #36]	; (20001e14 <USART_WakeUpConfig+0x3a>)
20001df0:	4013      	ands	r3, r2
20001df2:	b29a      	uxth	r2, r3
20001df4:	687b      	ldr	r3, [r7, #4]
20001df6:	819a      	strh	r2, [r3, #12]
  USARTx->CR1 |= USART_WakeUp;
20001df8:	687b      	ldr	r3, [r7, #4]
20001dfa:	899b      	ldrh	r3, [r3, #12]
20001dfc:	b29a      	uxth	r2, r3
20001dfe:	1cbb      	adds	r3, r7, #2
20001e00:	881b      	ldrh	r3, [r3, #0]
20001e02:	4313      	orrs	r3, r2
20001e04:	b29a      	uxth	r2, r3
20001e06:	687b      	ldr	r3, [r7, #4]
20001e08:	819a      	strh	r2, [r3, #12]
}
20001e0a:	46c0      	nop			; (mov r8, r8)
20001e0c:	46bd      	mov	sp, r7
20001e0e:	b002      	add	sp, #8
20001e10:	bd80      	pop	{r7, pc}
20001e12:	46c0      	nop			; (mov r8, r8)
20001e14:	fffff7ff 			; <UNDEFINED> instruction: 0xfffff7ff

20001e18 <USART_LINBreakDetectLengthConfig>:
  *            @arg USART_LINBreakDetectLength_10b: 10-bit break detection
  *            @arg USART_LINBreakDetectLength_11b: 11-bit break detection
  * @retval None
  */
void USART_LINBreakDetectLengthConfig(USART_TypeDef* USARTx, uint16_t USART_LINBreakDetectLength)
{
20001e18:	b580      	push	{r7, lr}
20001e1a:	b082      	sub	sp, #8
20001e1c:	af00      	add	r7, sp, #0
20001e1e:	6078      	str	r0, [r7, #4]
20001e20:	000a      	movs	r2, r1
20001e22:	1cbb      	adds	r3, r7, #2
20001e24:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_LIN_BREAK_DETECT_LENGTH(USART_LINBreakDetectLength));
  
  USARTx->CR2 &= (uint16_t)~((uint16_t)USART_CR2_LBDL);
20001e26:	687b      	ldr	r3, [r7, #4]
20001e28:	8a1b      	ldrh	r3, [r3, #16]
20001e2a:	b29b      	uxth	r3, r3
20001e2c:	2220      	movs	r2, #32
20001e2e:	4393      	bics	r3, r2
20001e30:	b29a      	uxth	r2, r3
20001e32:	687b      	ldr	r3, [r7, #4]
20001e34:	821a      	strh	r2, [r3, #16]
  USARTx->CR2 |= USART_LINBreakDetectLength;  
20001e36:	687b      	ldr	r3, [r7, #4]
20001e38:	8a1b      	ldrh	r3, [r3, #16]
20001e3a:	b29a      	uxth	r2, r3
20001e3c:	1cbb      	adds	r3, r7, #2
20001e3e:	881b      	ldrh	r3, [r3, #0]
20001e40:	4313      	orrs	r3, r2
20001e42:	b29a      	uxth	r2, r3
20001e44:	687b      	ldr	r3, [r7, #4]
20001e46:	821a      	strh	r2, [r3, #16]
}
20001e48:	46c0      	nop			; (mov r8, r8)
20001e4a:	46bd      	mov	sp, r7
20001e4c:	b002      	add	sp, #8
20001e4e:	bd80      	pop	{r7, pc}

20001e50 <USART_LINCmd>:
  * @param  NewState: new state of the USART LIN mode.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_LINCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
20001e50:	b580      	push	{r7, lr}
20001e52:	b082      	sub	sp, #8
20001e54:	af00      	add	r7, sp, #0
20001e56:	6078      	str	r0, [r7, #4]
20001e58:	000a      	movs	r2, r1
20001e5a:	1cfb      	adds	r3, r7, #3
20001e5c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
20001e5e:	1cfb      	adds	r3, r7, #3
20001e60:	781b      	ldrb	r3, [r3, #0]
20001e62:	2b00      	cmp	r3, #0
20001e64:	d009      	beq.n	20001e7a <USART_LINCmd+0x2a>
  {
    /* Enable the LIN mode by setting the LINEN bit in the CR2 register */
    USARTx->CR2 |= USART_CR2_LINEN;
20001e66:	687b      	ldr	r3, [r7, #4]
20001e68:	8a1b      	ldrh	r3, [r3, #16]
20001e6a:	b29b      	uxth	r3, r3
20001e6c:	2280      	movs	r2, #128	; 0x80
20001e6e:	01d2      	lsls	r2, r2, #7
20001e70:	4313      	orrs	r3, r2
20001e72:	b29a      	uxth	r2, r3
20001e74:	687b      	ldr	r3, [r7, #4]
20001e76:	821a      	strh	r2, [r3, #16]
  else
  {
    /* Disable the LIN mode by clearing the LINEN bit in the CR2 register */
    USARTx->CR2 &= (uint16_t)~((uint16_t)USART_CR2_LINEN);
  }
}
20001e78:	e007      	b.n	20001e8a <USART_LINCmd+0x3a>
    USARTx->CR2 &= (uint16_t)~((uint16_t)USART_CR2_LINEN);
20001e7a:	687b      	ldr	r3, [r7, #4]
20001e7c:	8a1b      	ldrh	r3, [r3, #16]
20001e7e:	b29b      	uxth	r3, r3
20001e80:	4a04      	ldr	r2, [pc, #16]	; (20001e94 <USART_LINCmd+0x44>)
20001e82:	4013      	ands	r3, r2
20001e84:	b29a      	uxth	r2, r3
20001e86:	687b      	ldr	r3, [r7, #4]
20001e88:	821a      	strh	r2, [r3, #16]
}
20001e8a:	46c0      	nop			; (mov r8, r8)
20001e8c:	46bd      	mov	sp, r7
20001e8e:	b002      	add	sp, #8
20001e90:	bd80      	pop	{r7, pc}
20001e92:	46c0      	nop			; (mov r8, r8)
20001e94:	ffffbfff 			; <UNDEFINED> instruction: 0xffffbfff

20001e98 <USART_SendBreak>:
  * @param  USARTx: where x can be 1, 2, 3, 4, 5, 6, 7 or 8 to select the USART or 
  *         UART peripheral.
  * @retval None
  */
void USART_SendBreak(USART_TypeDef* USARTx)
{
20001e98:	b580      	push	{r7, lr}
20001e9a:	b082      	sub	sp, #8
20001e9c:	af00      	add	r7, sp, #0
20001e9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Send break characters */
  USARTx->CR1 |= USART_CR1_SBK;
20001ea0:	687b      	ldr	r3, [r7, #4]
20001ea2:	899b      	ldrh	r3, [r3, #12]
20001ea4:	b29b      	uxth	r3, r3
20001ea6:	2201      	movs	r2, #1
20001ea8:	4313      	orrs	r3, r2
20001eaa:	b29a      	uxth	r2, r3
20001eac:	687b      	ldr	r3, [r7, #4]
20001eae:	819a      	strh	r2, [r3, #12]
}
20001eb0:	46c0      	nop			; (mov r8, r8)
20001eb2:	46bd      	mov	sp, r7
20001eb4:	b002      	add	sp, #8
20001eb6:	bd80      	pop	{r7, pc}

20001eb8 <USART_HalfDuplexCmd>:
  * @param  NewState: new state of the USART Communication.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_HalfDuplexCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
20001eb8:	b580      	push	{r7, lr}
20001eba:	b082      	sub	sp, #8
20001ebc:	af00      	add	r7, sp, #0
20001ebe:	6078      	str	r0, [r7, #4]
20001ec0:	000a      	movs	r2, r1
20001ec2:	1cfb      	adds	r3, r7, #3
20001ec4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
20001ec6:	1cfb      	adds	r3, r7, #3
20001ec8:	781b      	ldrb	r3, [r3, #0]
20001eca:	2b00      	cmp	r3, #0
20001ecc:	d008      	beq.n	20001ee0 <USART_HalfDuplexCmd+0x28>
  {
    /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_HDSEL;
20001ece:	687b      	ldr	r3, [r7, #4]
20001ed0:	8a9b      	ldrh	r3, [r3, #20]
20001ed2:	b29b      	uxth	r3, r3
20001ed4:	2208      	movs	r2, #8
20001ed6:	4313      	orrs	r3, r2
20001ed8:	b29a      	uxth	r2, r3
20001eda:	687b      	ldr	r3, [r7, #4]
20001edc:	829a      	strh	r2, [r3, #20]
  else
  {
    /* Disable the Half-Duplex mode by clearing the HDSEL bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_HDSEL);
  }
}
20001ede:	e007      	b.n	20001ef0 <USART_HalfDuplexCmd+0x38>
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_HDSEL);
20001ee0:	687b      	ldr	r3, [r7, #4]
20001ee2:	8a9b      	ldrh	r3, [r3, #20]
20001ee4:	b29b      	uxth	r3, r3
20001ee6:	2208      	movs	r2, #8
20001ee8:	4393      	bics	r3, r2
20001eea:	b29a      	uxth	r2, r3
20001eec:	687b      	ldr	r3, [r7, #4]
20001eee:	829a      	strh	r2, [r3, #20]
}
20001ef0:	46c0      	nop			; (mov r8, r8)
20001ef2:	46bd      	mov	sp, r7
20001ef4:	b002      	add	sp, #8
20001ef6:	bd80      	pop	{r7, pc}

20001ef8 <USART_SetGuardTime>:
  *         UART peripheral.
  * @param  USART_GuardTime: specifies the guard time.   
  * @retval None
  */
void USART_SetGuardTime(USART_TypeDef* USARTx, uint8_t USART_GuardTime)
{    
20001ef8:	b580      	push	{r7, lr}
20001efa:	b082      	sub	sp, #8
20001efc:	af00      	add	r7, sp, #0
20001efe:	6078      	str	r0, [r7, #4]
20001f00:	000a      	movs	r2, r1
20001f02:	1cfb      	adds	r3, r7, #3
20001f04:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_USART_1236_PERIPH(USARTx));
  
  /* Clear the USART Guard time */
  USARTx->GTPR &= USART_GTPR_PSC;
20001f06:	687b      	ldr	r3, [r7, #4]
20001f08:	8b1b      	ldrh	r3, [r3, #24]
20001f0a:	b29b      	uxth	r3, r3
20001f0c:	22ff      	movs	r2, #255	; 0xff
20001f0e:	4013      	ands	r3, r2
20001f10:	b29a      	uxth	r2, r3
20001f12:	687b      	ldr	r3, [r7, #4]
20001f14:	831a      	strh	r2, [r3, #24]
  /* Set the USART guard time */
  USARTx->GTPR |= (uint16_t)((uint16_t)USART_GuardTime << 0x08);
20001f16:	687b      	ldr	r3, [r7, #4]
20001f18:	8b1b      	ldrh	r3, [r3, #24]
20001f1a:	b29a      	uxth	r2, r3
20001f1c:	1cfb      	adds	r3, r7, #3
20001f1e:	781b      	ldrb	r3, [r3, #0]
20001f20:	b29b      	uxth	r3, r3
20001f22:	021b      	lsls	r3, r3, #8
20001f24:	b29b      	uxth	r3, r3
20001f26:	4313      	orrs	r3, r2
20001f28:	b29a      	uxth	r2, r3
20001f2a:	687b      	ldr	r3, [r7, #4]
20001f2c:	831a      	strh	r2, [r3, #24]
}
20001f2e:	46c0      	nop			; (mov r8, r8)
20001f30:	46bd      	mov	sp, r7
20001f32:	b002      	add	sp, #8
20001f34:	bd80      	pop	{r7, pc}

20001f36 <USART_SmartCardCmd>:
  * @param  NewState: new state of the Smart Card mode.
  *          This parameter can be: ENABLE or DISABLE.      
  * @retval None
  */
void USART_SmartCardCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
20001f36:	b580      	push	{r7, lr}
20001f38:	b082      	sub	sp, #8
20001f3a:	af00      	add	r7, sp, #0
20001f3c:	6078      	str	r0, [r7, #4]
20001f3e:	000a      	movs	r2, r1
20001f40:	1cfb      	adds	r3, r7, #3
20001f42:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_USART_1236_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
20001f44:	1cfb      	adds	r3, r7, #3
20001f46:	781b      	ldrb	r3, [r3, #0]
20001f48:	2b00      	cmp	r3, #0
20001f4a:	d008      	beq.n	20001f5e <USART_SmartCardCmd+0x28>
  {
    /* Enable the SC mode by setting the SCEN bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_SCEN;
20001f4c:	687b      	ldr	r3, [r7, #4]
20001f4e:	8a9b      	ldrh	r3, [r3, #20]
20001f50:	b29b      	uxth	r3, r3
20001f52:	2220      	movs	r2, #32
20001f54:	4313      	orrs	r3, r2
20001f56:	b29a      	uxth	r2, r3
20001f58:	687b      	ldr	r3, [r7, #4]
20001f5a:	829a      	strh	r2, [r3, #20]
  else
  {
    /* Disable the SC mode by clearing the SCEN bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_SCEN);
  }
}
20001f5c:	e007      	b.n	20001f6e <USART_SmartCardCmd+0x38>
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_SCEN);
20001f5e:	687b      	ldr	r3, [r7, #4]
20001f60:	8a9b      	ldrh	r3, [r3, #20]
20001f62:	b29b      	uxth	r3, r3
20001f64:	2220      	movs	r2, #32
20001f66:	4393      	bics	r3, r2
20001f68:	b29a      	uxth	r2, r3
20001f6a:	687b      	ldr	r3, [r7, #4]
20001f6c:	829a      	strh	r2, [r3, #20]
}
20001f6e:	46c0      	nop			; (mov r8, r8)
20001f70:	46bd      	mov	sp, r7
20001f72:	b002      	add	sp, #8
20001f74:	bd80      	pop	{r7, pc}

20001f76 <USART_SmartCardNACKCmd>:
  * @param  NewState: new state of the NACK transmission.
  *          This parameter can be: ENABLE or DISABLE.  
  * @retval None
  */
void USART_SmartCardNACKCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
20001f76:	b580      	push	{r7, lr}
20001f78:	b082      	sub	sp, #8
20001f7a:	af00      	add	r7, sp, #0
20001f7c:	6078      	str	r0, [r7, #4]
20001f7e:	000a      	movs	r2, r1
20001f80:	1cfb      	adds	r3, r7, #3
20001f82:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_USART_1236_PERIPH(USARTx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
20001f84:	1cfb      	adds	r3, r7, #3
20001f86:	781b      	ldrb	r3, [r3, #0]
20001f88:	2b00      	cmp	r3, #0
20001f8a:	d008      	beq.n	20001f9e <USART_SmartCardNACKCmd+0x28>
  {
    /* Enable the NACK transmission by setting the NACK bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_NACK;
20001f8c:	687b      	ldr	r3, [r7, #4]
20001f8e:	8a9b      	ldrh	r3, [r3, #20]
20001f90:	b29b      	uxth	r3, r3
20001f92:	2210      	movs	r2, #16
20001f94:	4313      	orrs	r3, r2
20001f96:	b29a      	uxth	r2, r3
20001f98:	687b      	ldr	r3, [r7, #4]
20001f9a:	829a      	strh	r2, [r3, #20]
  else
  {
    /* Disable the NACK transmission by clearing the NACK bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_NACK);
  }
}
20001f9c:	e007      	b.n	20001fae <USART_SmartCardNACKCmd+0x38>
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_NACK);
20001f9e:	687b      	ldr	r3, [r7, #4]
20001fa0:	8a9b      	ldrh	r3, [r3, #20]
20001fa2:	b29b      	uxth	r3, r3
20001fa4:	2210      	movs	r2, #16
20001fa6:	4393      	bics	r3, r2
20001fa8:	b29a      	uxth	r2, r3
20001faa:	687b      	ldr	r3, [r7, #4]
20001fac:	829a      	strh	r2, [r3, #20]
}
20001fae:	46c0      	nop			; (mov r8, r8)
20001fb0:	46bd      	mov	sp, r7
20001fb2:	b002      	add	sp, #8
20001fb4:	bd80      	pop	{r7, pc}

20001fb6 <USART_IrDAConfig>:
  *            @arg USART_IrDAMode_LowPower
  *            @arg USART_IrDAMode_Normal
  * @retval None
  */
void USART_IrDAConfig(USART_TypeDef* USARTx, uint16_t USART_IrDAMode)
{
20001fb6:	b580      	push	{r7, lr}
20001fb8:	b082      	sub	sp, #8
20001fba:	af00      	add	r7, sp, #0
20001fbc:	6078      	str	r0, [r7, #4]
20001fbe:	000a      	movs	r2, r1
20001fc0:	1cbb      	adds	r3, r7, #2
20001fc2:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_IRDA_MODE(USART_IrDAMode));
    
  USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_IRLP);
20001fc4:	687b      	ldr	r3, [r7, #4]
20001fc6:	8a9b      	ldrh	r3, [r3, #20]
20001fc8:	b29b      	uxth	r3, r3
20001fca:	2204      	movs	r2, #4
20001fcc:	4393      	bics	r3, r2
20001fce:	b29a      	uxth	r2, r3
20001fd0:	687b      	ldr	r3, [r7, #4]
20001fd2:	829a      	strh	r2, [r3, #20]
  USARTx->CR3 |= USART_IrDAMode;
20001fd4:	687b      	ldr	r3, [r7, #4]
20001fd6:	8a9b      	ldrh	r3, [r3, #20]
20001fd8:	b29a      	uxth	r2, r3
20001fda:	1cbb      	adds	r3, r7, #2
20001fdc:	881b      	ldrh	r3, [r3, #0]
20001fde:	4313      	orrs	r3, r2
20001fe0:	b29a      	uxth	r2, r3
20001fe2:	687b      	ldr	r3, [r7, #4]
20001fe4:	829a      	strh	r2, [r3, #20]
}
20001fe6:	46c0      	nop			; (mov r8, r8)
20001fe8:	46bd      	mov	sp, r7
20001fea:	b002      	add	sp, #8
20001fec:	bd80      	pop	{r7, pc}

20001fee <USART_IrDACmd>:
  * @param  NewState: new state of the IrDA mode.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_IrDACmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
20001fee:	b580      	push	{r7, lr}
20001ff0:	b082      	sub	sp, #8
20001ff2:	af00      	add	r7, sp, #0
20001ff4:	6078      	str	r0, [r7, #4]
20001ff6:	000a      	movs	r2, r1
20001ff8:	1cfb      	adds	r3, r7, #3
20001ffa:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
    
  if (NewState != DISABLE)
20001ffc:	1cfb      	adds	r3, r7, #3
20001ffe:	781b      	ldrb	r3, [r3, #0]
20002000:	2b00      	cmp	r3, #0
20002002:	d008      	beq.n	20002016 <USART_IrDACmd+0x28>
  {
    /* Enable the IrDA mode by setting the IREN bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_IREN;
20002004:	687b      	ldr	r3, [r7, #4]
20002006:	8a9b      	ldrh	r3, [r3, #20]
20002008:	b29b      	uxth	r3, r3
2000200a:	2202      	movs	r2, #2
2000200c:	4313      	orrs	r3, r2
2000200e:	b29a      	uxth	r2, r3
20002010:	687b      	ldr	r3, [r7, #4]
20002012:	829a      	strh	r2, [r3, #20]
  else
  {
    /* Disable the IrDA mode by clearing the IREN bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_IREN);
  }
}
20002014:	e007      	b.n	20002026 <USART_IrDACmd+0x38>
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_IREN);
20002016:	687b      	ldr	r3, [r7, #4]
20002018:	8a9b      	ldrh	r3, [r3, #20]
2000201a:	b29b      	uxth	r3, r3
2000201c:	2202      	movs	r2, #2
2000201e:	4393      	bics	r3, r2
20002020:	b29a      	uxth	r2, r3
20002022:	687b      	ldr	r3, [r7, #4]
20002024:	829a      	strh	r2, [r3, #20]
}
20002026:	46c0      	nop			; (mov r8, r8)
20002028:	46bd      	mov	sp, r7
2000202a:	b002      	add	sp, #8
2000202c:	bd80      	pop	{r7, pc}

2000202e <USART_DMACmd>:
  * @param  NewState: new state of the DMA Request sources.
  *          This parameter can be: ENABLE or DISABLE.   
  * @retval None
  */
void USART_DMACmd(USART_TypeDef* USARTx, uint16_t USART_DMAReq, FunctionalState NewState)
{
2000202e:	b580      	push	{r7, lr}
20002030:	b082      	sub	sp, #8
20002032:	af00      	add	r7, sp, #0
20002034:	6078      	str	r0, [r7, #4]
20002036:	0008      	movs	r0, r1
20002038:	0011      	movs	r1, r2
2000203a:	1cbb      	adds	r3, r7, #2
2000203c:	1c02      	adds	r2, r0, #0
2000203e:	801a      	strh	r2, [r3, #0]
20002040:	1c7b      	adds	r3, r7, #1
20002042:	1c0a      	adds	r2, r1, #0
20002044:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DMAREQ(USART_DMAReq));  
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 

  if (NewState != DISABLE)
20002046:	1c7b      	adds	r3, r7, #1
20002048:	781b      	ldrb	r3, [r3, #0]
2000204a:	2b00      	cmp	r3, #0
2000204c:	d009      	beq.n	20002062 <USART_DMACmd+0x34>
  {
    /* Enable the DMA transfer for selected requests by setting the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 |= USART_DMAReq;
2000204e:	687b      	ldr	r3, [r7, #4]
20002050:	8a9b      	ldrh	r3, [r3, #20]
20002052:	b29a      	uxth	r2, r3
20002054:	1cbb      	adds	r3, r7, #2
20002056:	881b      	ldrh	r3, [r3, #0]
20002058:	4313      	orrs	r3, r2
2000205a:	b29a      	uxth	r2, r3
2000205c:	687b      	ldr	r3, [r7, #4]
2000205e:	829a      	strh	r2, [r3, #20]
  {
    /* Disable the DMA transfer for selected requests by clearing the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 &= (uint16_t)~USART_DMAReq;
  }
}
20002060:	e00a      	b.n	20002078 <USART_DMACmd+0x4a>
    USARTx->CR3 &= (uint16_t)~USART_DMAReq;
20002062:	687b      	ldr	r3, [r7, #4]
20002064:	8a9b      	ldrh	r3, [r3, #20]
20002066:	b29b      	uxth	r3, r3
20002068:	1cba      	adds	r2, r7, #2
2000206a:	8812      	ldrh	r2, [r2, #0]
2000206c:	43d2      	mvns	r2, r2
2000206e:	b292      	uxth	r2, r2
20002070:	4013      	ands	r3, r2
20002072:	b29a      	uxth	r2, r3
20002074:	687b      	ldr	r3, [r7, #4]
20002076:	829a      	strh	r2, [r3, #20]
}
20002078:	46c0      	nop			; (mov r8, r8)
2000207a:	46bd      	mov	sp, r7
2000207c:	b002      	add	sp, #8
2000207e:	bd80      	pop	{r7, pc}

20002080 <USART_ITConfig>:
  * @param  NewState: new state of the specified USARTx interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState)
{
20002080:	b580      	push	{r7, lr}
20002082:	b086      	sub	sp, #24
20002084:	af00      	add	r7, sp, #0
20002086:	6078      	str	r0, [r7, #4]
20002088:	0008      	movs	r0, r1
2000208a:	0011      	movs	r1, r2
2000208c:	1cbb      	adds	r3, r7, #2
2000208e:	1c02      	adds	r2, r0, #0
20002090:	801a      	strh	r2, [r3, #0]
20002092:	1c7b      	adds	r3, r7, #1
20002094:	1c0a      	adds	r2, r1, #0
20002096:	701a      	strb	r2, [r3, #0]
  uint32_t usartreg = 0x00, itpos = 0x00, itmask = 0x00;
20002098:	2300      	movs	r3, #0
2000209a:	613b      	str	r3, [r7, #16]
2000209c:	2300      	movs	r3, #0
2000209e:	60fb      	str	r3, [r7, #12]
200020a0:	2300      	movs	r3, #0
200020a2:	60bb      	str	r3, [r7, #8]
  uint32_t usartxbase = 0x00;
200020a4:	2300      	movs	r3, #0
200020a6:	617b      	str	r3, [r7, #20]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  usartxbase = (uint32_t)USARTx;
200020a8:	687b      	ldr	r3, [r7, #4]
200020aa:	617b      	str	r3, [r7, #20]

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
200020ac:	1cbb      	adds	r3, r7, #2
200020ae:	881b      	ldrh	r3, [r3, #0]
200020b0:	b2db      	uxtb	r3, r3
200020b2:	095b      	lsrs	r3, r3, #5
200020b4:	b2db      	uxtb	r3, r3
200020b6:	613b      	str	r3, [r7, #16]

  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
200020b8:	1cbb      	adds	r3, r7, #2
200020ba:	881b      	ldrh	r3, [r3, #0]
200020bc:	221f      	movs	r2, #31
200020be:	4013      	ands	r3, r2
200020c0:	60fb      	str	r3, [r7, #12]
  itmask = (((uint32_t)0x01) << itpos);
200020c2:	2201      	movs	r2, #1
200020c4:	68fb      	ldr	r3, [r7, #12]
200020c6:	409a      	lsls	r2, r3
200020c8:	0013      	movs	r3, r2
200020ca:	60bb      	str	r3, [r7, #8]
    
  if (usartreg == 0x01) /* The IT is in CR1 register */
200020cc:	693b      	ldr	r3, [r7, #16]
200020ce:	2b01      	cmp	r3, #1
200020d0:	d103      	bne.n	200020da <USART_ITConfig+0x5a>
  {
    usartxbase += 0x0C;
200020d2:	697b      	ldr	r3, [r7, #20]
200020d4:	330c      	adds	r3, #12
200020d6:	617b      	str	r3, [r7, #20]
200020d8:	e009      	b.n	200020ee <USART_ITConfig+0x6e>
  }
  else if (usartreg == 0x02) /* The IT is in CR2 register */
200020da:	693b      	ldr	r3, [r7, #16]
200020dc:	2b02      	cmp	r3, #2
200020de:	d103      	bne.n	200020e8 <USART_ITConfig+0x68>
  {
    usartxbase += 0x10;
200020e0:	697b      	ldr	r3, [r7, #20]
200020e2:	3310      	adds	r3, #16
200020e4:	617b      	str	r3, [r7, #20]
200020e6:	e002      	b.n	200020ee <USART_ITConfig+0x6e>
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14; 
200020e8:	697b      	ldr	r3, [r7, #20]
200020ea:	3314      	adds	r3, #20
200020ec:	617b      	str	r3, [r7, #20]
  }
  if (NewState != DISABLE)
200020ee:	1c7b      	adds	r3, r7, #1
200020f0:	781b      	ldrb	r3, [r3, #0]
200020f2:	2b00      	cmp	r3, #0
200020f4:	d006      	beq.n	20002104 <USART_ITConfig+0x84>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
200020f6:	697b      	ldr	r3, [r7, #20]
200020f8:	6819      	ldr	r1, [r3, #0]
200020fa:	697b      	ldr	r3, [r7, #20]
200020fc:	68ba      	ldr	r2, [r7, #8]
200020fe:	430a      	orrs	r2, r1
20002100:	601a      	str	r2, [r3, #0]
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
  }
}
20002102:	e006      	b.n	20002112 <USART_ITConfig+0x92>
    *(__IO uint32_t*)usartxbase &= ~itmask;
20002104:	697b      	ldr	r3, [r7, #20]
20002106:	681a      	ldr	r2, [r3, #0]
20002108:	68bb      	ldr	r3, [r7, #8]
2000210a:	43d9      	mvns	r1, r3
2000210c:	697b      	ldr	r3, [r7, #20]
2000210e:	400a      	ands	r2, r1
20002110:	601a      	str	r2, [r3, #0]
}
20002112:	46c0      	nop			; (mov r8, r8)
20002114:	46bd      	mov	sp, r7
20002116:	b006      	add	sp, #24
20002118:	bd80      	pop	{r7, pc}

2000211a <USART_GetFlagStatus>:
  *            @arg USART_FLAG_FE:   Framing Error flag
  *            @arg USART_FLAG_PE:   Parity Error flag
  * @retval The new state of USART_FLAG (SET or RESET).
  */
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
2000211a:	b580      	push	{r7, lr}
2000211c:	b084      	sub	sp, #16
2000211e:	af00      	add	r7, sp, #0
20002120:	6078      	str	r0, [r7, #4]
20002122:	000a      	movs	r2, r1
20002124:	1cbb      	adds	r3, r7, #2
20002126:	801a      	strh	r2, [r3, #0]
  FlagStatus bitstatus = RESET;
20002128:	230f      	movs	r3, #15
2000212a:	18fb      	adds	r3, r7, r3
2000212c:	2200      	movs	r2, #0
2000212e:	701a      	strb	r2, [r3, #0]
  if (USART_FLAG == USART_FLAG_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  if ((USARTx->SR & USART_FLAG) != (uint16_t)RESET)
20002130:	687b      	ldr	r3, [r7, #4]
20002132:	881b      	ldrh	r3, [r3, #0]
20002134:	b29b      	uxth	r3, r3
20002136:	1cba      	adds	r2, r7, #2
20002138:	8812      	ldrh	r2, [r2, #0]
2000213a:	4013      	ands	r3, r2
2000213c:	b29b      	uxth	r3, r3
2000213e:	2b00      	cmp	r3, #0
20002140:	d004      	beq.n	2000214c <USART_GetFlagStatus+0x32>
  {
    bitstatus = SET;
20002142:	230f      	movs	r3, #15
20002144:	18fb      	adds	r3, r7, r3
20002146:	2201      	movs	r2, #1
20002148:	701a      	strb	r2, [r3, #0]
2000214a:	e003      	b.n	20002154 <USART_GetFlagStatus+0x3a>
  }
  else
  {
    bitstatus = RESET;
2000214c:	230f      	movs	r3, #15
2000214e:	18fb      	adds	r3, r7, r3
20002150:	2200      	movs	r2, #0
20002152:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
20002154:	230f      	movs	r3, #15
20002156:	18fb      	adds	r3, r7, r3
20002158:	781b      	ldrb	r3, [r3, #0]
}
2000215a:	0018      	movs	r0, r3
2000215c:	46bd      	mov	sp, r7
2000215e:	b004      	add	sp, #16
20002160:	bd80      	pop	{r7, pc}

20002162 <USART_ClearFlag>:
  *          (USART_SendData()).
  *   
  * @retval None
  */
void USART_ClearFlag(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
20002162:	b580      	push	{r7, lr}
20002164:	b082      	sub	sp, #8
20002166:	af00      	add	r7, sp, #0
20002168:	6078      	str	r0, [r7, #4]
2000216a:	000a      	movs	r2, r1
2000216c:	1cbb      	adds	r3, r7, #2
2000216e:	801a      	strh	r2, [r3, #0]
  if ((USART_FLAG & USART_FLAG_CTS) == USART_FLAG_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
       
  USARTx->SR = (uint16_t)~USART_FLAG;
20002170:	1cbb      	adds	r3, r7, #2
20002172:	881b      	ldrh	r3, [r3, #0]
20002174:	43db      	mvns	r3, r3
20002176:	b29a      	uxth	r2, r3
20002178:	687b      	ldr	r3, [r7, #4]
2000217a:	801a      	strh	r2, [r3, #0]
}
2000217c:	46c0      	nop			; (mov r8, r8)
2000217e:	46bd      	mov	sp, r7
20002180:	b002      	add	sp, #8
20002182:	bd80      	pop	{r7, pc}

20002184 <USART_GetITStatus>:
  *            @arg USART_IT_FE:   Framing Error interrupt
  *            @arg USART_IT_PE:   Parity Error interrupt
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT)
{
20002184:	b580      	push	{r7, lr}
20002186:	b086      	sub	sp, #24
20002188:	af00      	add	r7, sp, #0
2000218a:	6078      	str	r0, [r7, #4]
2000218c:	000a      	movs	r2, r1
2000218e:	1cbb      	adds	r3, r7, #2
20002190:	801a      	strh	r2, [r3, #0]
  uint32_t bitpos = 0x00, itmask = 0x00, usartreg = 0x00;
20002192:	2300      	movs	r3, #0
20002194:	60fb      	str	r3, [r7, #12]
20002196:	2300      	movs	r3, #0
20002198:	617b      	str	r3, [r7, #20]
2000219a:	2300      	movs	r3, #0
2000219c:	60bb      	str	r3, [r7, #8]
  ITStatus bitstatus = RESET;
2000219e:	2313      	movs	r3, #19
200021a0:	18fb      	adds	r3, r7, r3
200021a2:	2200      	movs	r2, #0
200021a4:	701a      	strb	r2, [r3, #0]
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
200021a6:	1cbb      	adds	r3, r7, #2
200021a8:	881b      	ldrh	r3, [r3, #0]
200021aa:	b2db      	uxtb	r3, r3
200021ac:	095b      	lsrs	r3, r3, #5
200021ae:	b2db      	uxtb	r3, r3
200021b0:	60bb      	str	r3, [r7, #8]
  /* Get the interrupt position */
  itmask = USART_IT & IT_MASK;
200021b2:	1cbb      	adds	r3, r7, #2
200021b4:	881b      	ldrh	r3, [r3, #0]
200021b6:	221f      	movs	r2, #31
200021b8:	4013      	ands	r3, r2
200021ba:	617b      	str	r3, [r7, #20]
  itmask = (uint32_t)0x01 << itmask;
200021bc:	2201      	movs	r2, #1
200021be:	697b      	ldr	r3, [r7, #20]
200021c0:	409a      	lsls	r2, r3
200021c2:	0013      	movs	r3, r2
200021c4:	617b      	str	r3, [r7, #20]
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
200021c6:	68bb      	ldr	r3, [r7, #8]
200021c8:	2b01      	cmp	r3, #1
200021ca:	d107      	bne.n	200021dc <USART_GetITStatus+0x58>
  {
    itmask &= USARTx->CR1;
200021cc:	687b      	ldr	r3, [r7, #4]
200021ce:	899b      	ldrh	r3, [r3, #12]
200021d0:	b29b      	uxth	r3, r3
200021d2:	001a      	movs	r2, r3
200021d4:	697b      	ldr	r3, [r7, #20]
200021d6:	4013      	ands	r3, r2
200021d8:	617b      	str	r3, [r7, #20]
200021da:	e011      	b.n	20002200 <USART_GetITStatus+0x7c>
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
200021dc:	68bb      	ldr	r3, [r7, #8]
200021de:	2b02      	cmp	r3, #2
200021e0:	d107      	bne.n	200021f2 <USART_GetITStatus+0x6e>
  {
    itmask &= USARTx->CR2;
200021e2:	687b      	ldr	r3, [r7, #4]
200021e4:	8a1b      	ldrh	r3, [r3, #16]
200021e6:	b29b      	uxth	r3, r3
200021e8:	001a      	movs	r2, r3
200021ea:	697b      	ldr	r3, [r7, #20]
200021ec:	4013      	ands	r3, r2
200021ee:	617b      	str	r3, [r7, #20]
200021f0:	e006      	b.n	20002200 <USART_GetITStatus+0x7c>
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
200021f2:	687b      	ldr	r3, [r7, #4]
200021f4:	8a9b      	ldrh	r3, [r3, #20]
200021f6:	b29b      	uxth	r3, r3
200021f8:	001a      	movs	r2, r3
200021fa:	697b      	ldr	r3, [r7, #20]
200021fc:	4013      	ands	r3, r2
200021fe:	617b      	str	r3, [r7, #20]
  }
  
  bitpos = USART_IT >> 0x08;
20002200:	1cbb      	adds	r3, r7, #2
20002202:	881b      	ldrh	r3, [r3, #0]
20002204:	0a1b      	lsrs	r3, r3, #8
20002206:	b29b      	uxth	r3, r3
20002208:	60fb      	str	r3, [r7, #12]
  bitpos = (uint32_t)0x01 << bitpos;
2000220a:	2201      	movs	r2, #1
2000220c:	68fb      	ldr	r3, [r7, #12]
2000220e:	409a      	lsls	r2, r3
20002210:	0013      	movs	r3, r2
20002212:	60fb      	str	r3, [r7, #12]
  bitpos &= USARTx->SR;
20002214:	687b      	ldr	r3, [r7, #4]
20002216:	881b      	ldrh	r3, [r3, #0]
20002218:	b29b      	uxth	r3, r3
2000221a:	001a      	movs	r2, r3
2000221c:	68fb      	ldr	r3, [r7, #12]
2000221e:	4013      	ands	r3, r2
20002220:	60fb      	str	r3, [r7, #12]
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
20002222:	697b      	ldr	r3, [r7, #20]
20002224:	2b00      	cmp	r3, #0
20002226:	d007      	beq.n	20002238 <USART_GetITStatus+0xb4>
20002228:	68fb      	ldr	r3, [r7, #12]
2000222a:	2b00      	cmp	r3, #0
2000222c:	d004      	beq.n	20002238 <USART_GetITStatus+0xb4>
  {
    bitstatus = SET;
2000222e:	2313      	movs	r3, #19
20002230:	18fb      	adds	r3, r7, r3
20002232:	2201      	movs	r2, #1
20002234:	701a      	strb	r2, [r3, #0]
20002236:	e003      	b.n	20002240 <USART_GetITStatus+0xbc>
  }
  else
  {
    bitstatus = RESET;
20002238:	2313      	movs	r3, #19
2000223a:	18fb      	adds	r3, r7, r3
2000223c:	2200      	movs	r2, #0
2000223e:	701a      	strb	r2, [r3, #0]
  }
  
  return bitstatus;  
20002240:	2313      	movs	r3, #19
20002242:	18fb      	adds	r3, r7, r3
20002244:	781b      	ldrb	r3, [r3, #0]
}
20002246:	0018      	movs	r0, r3
20002248:	46bd      	mov	sp, r7
2000224a:	b006      	add	sp, #24
2000224c:	bd80      	pop	{r7, pc}

2000224e <USART_ClearITPendingBit>:
  *          (USART_SendData()).
  *  
  * @retval None
  */
void USART_ClearITPendingBit(USART_TypeDef* USARTx, uint16_t USART_IT)
{
2000224e:	b580      	push	{r7, lr}
20002250:	b084      	sub	sp, #16
20002252:	af00      	add	r7, sp, #0
20002254:	6078      	str	r0, [r7, #4]
20002256:	000a      	movs	r2, r1
20002258:	1cbb      	adds	r3, r7, #2
2000225a:	801a      	strh	r2, [r3, #0]
  uint16_t bitpos = 0x00, itmask = 0x00;
2000225c:	210e      	movs	r1, #14
2000225e:	187b      	adds	r3, r7, r1
20002260:	2200      	movs	r2, #0
20002262:	801a      	strh	r2, [r3, #0]
20002264:	200c      	movs	r0, #12
20002266:	183b      	adds	r3, r7, r0
20002268:	2200      	movs	r2, #0
2000226a:	801a      	strh	r2, [r3, #0]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  bitpos = USART_IT >> 0x08;
2000226c:	187b      	adds	r3, r7, r1
2000226e:	1cba      	adds	r2, r7, #2
20002270:	8812      	ldrh	r2, [r2, #0]
20002272:	0a12      	lsrs	r2, r2, #8
20002274:	801a      	strh	r2, [r3, #0]
  itmask = ((uint16_t)0x01 << (uint16_t)bitpos);
20002276:	187b      	adds	r3, r7, r1
20002278:	881b      	ldrh	r3, [r3, #0]
2000227a:	2201      	movs	r2, #1
2000227c:	409a      	lsls	r2, r3
2000227e:	183b      	adds	r3, r7, r0
20002280:	801a      	strh	r2, [r3, #0]
  USARTx->SR = (uint16_t)~itmask;
20002282:	183b      	adds	r3, r7, r0
20002284:	881b      	ldrh	r3, [r3, #0]
20002286:	43db      	mvns	r3, r3
20002288:	b29a      	uxth	r2, r3
2000228a:	687b      	ldr	r3, [r7, #4]
2000228c:	801a      	strh	r2, [r3, #0]
}
2000228e:	46c0      	nop			; (mov r8, r8)
20002290:	46bd      	mov	sp, r7
20002292:	b004      	add	sp, #16
20002294:	bd80      	pop	{r7, pc}
20002296:	46c0      	nop			; (mov r8, r8)

20002298 <USART1_IRQHandler>:
static FIFO *txBuffer, *rxBuffer, realTxBuffer, realRxBuffer;
/*uint8_t digitToPrintable(uint8_t inDigit);
uint8_t charToPrintable(uint8_t inChar);*/

//Avbrottshantering för USART1
void USART1_IRQHandler(void){
20002298:	b590      	push	{r4, r7, lr}
2000229a:	b083      	sub	sp, #12
2000229c:	af00      	add	r7, sp, #0
    //Avbrott orsakat av mottaget meddelande
    if(USART_GetITStatus(USART1, USART_IT_RXNE) == SET){
2000229e:	4a1f      	ldr	r2, [pc, #124]	; (2000231c <USART1_IRQHandler+0x84>)
200022a0:	4b1f      	ldr	r3, [pc, #124]	; (20002320 <USART1_IRQHandler+0x88>)
200022a2:	0011      	movs	r1, r2
200022a4:	0018      	movs	r0, r3
200022a6:	f7ff ff6d 	bl	20002184 <USART_GetITStatus>
200022aa:	0003      	movs	r3, r0
200022ac:	2b01      	cmp	r3, #1
200022ae:	d10b      	bne.n	200022c8 <USART1_IRQHandler+0x30>
        //Skriver inkommen medelande till rxBuffer
        bufferPut(rxBuffer, USART_ReceiveData(USART1));
200022b0:	4b1c      	ldr	r3, [pc, #112]	; (20002324 <USART1_IRQHandler+0x8c>)
200022b2:	681c      	ldr	r4, [r3, #0]
200022b4:	4b1a      	ldr	r3, [pc, #104]	; (20002320 <USART1_IRQHandler+0x88>)
200022b6:	0018      	movs	r0, r3
200022b8:	f7ff fd44 	bl	20001d44 <USART_ReceiveData>
200022bc:	0003      	movs	r3, r0
200022be:	b2db      	uxtb	r3, r3
200022c0:	0019      	movs	r1, r3
200022c2:	0020      	movs	r0, r4
200022c4:	f7ff fa88 	bl	200017d8 <bufferPut>
        //Fundering ska vi ha något sätt att meddela att vi
        //har missat meddelande på grund av full buffer?
    }

    //Avbrott orsakat av att registret för sändning är tomt
    if(USART_GetITStatus(USART1, USART_IT_TXE) == SET){
200022c8:	4a17      	ldr	r2, [pc, #92]	; (20002328 <USART1_IRQHandler+0x90>)
200022ca:	4b15      	ldr	r3, [pc, #84]	; (20002320 <USART1_IRQHandler+0x88>)
200022cc:	0011      	movs	r1, r2
200022ce:	0018      	movs	r0, r3
200022d0:	f7ff ff58 	bl	20002184 <USART_GetITStatus>
200022d4:	0003      	movs	r3, r0
200022d6:	2b01      	cmp	r3, #1
200022d8:	d11c      	bne.n	20002314 <USART1_IRQHandler+0x7c>
        //Försöker läsa från txBuffer
        uint8_t data;
        uint8_t readOk = bufferGet(txBuffer,&data);
200022da:	4b14      	ldr	r3, [pc, #80]	; (2000232c <USART1_IRQHandler+0x94>)
200022dc:	681b      	ldr	r3, [r3, #0]
200022de:	1dfc      	adds	r4, r7, #7
200022e0:	1dba      	adds	r2, r7, #6
200022e2:	0011      	movs	r1, r2
200022e4:	0018      	movs	r0, r3
200022e6:	f7ff faa8 	bl	2000183a <bufferGet>
200022ea:	0003      	movs	r3, r0
200022ec:	7023      	strb	r3, [r4, #0]

        //Om vi lyckades skickar vi data
        //Annars är buffern tom och vi avativerar avbrott för att skicka
        if(readOk) {
200022ee:	1dfb      	adds	r3, r7, #7
200022f0:	781b      	ldrb	r3, [r3, #0]
200022f2:	2b00      	cmp	r3, #0
200022f4:	d008      	beq.n	20002308 <USART1_IRQHandler+0x70>
            USART_SendData(USART1,data);
200022f6:	1dbb      	adds	r3, r7, #6
200022f8:	781b      	ldrb	r3, [r3, #0]
200022fa:	b29b      	uxth	r3, r3
200022fc:	4a08      	ldr	r2, [pc, #32]	; (20002320 <USART1_IRQHandler+0x88>)
200022fe:	0019      	movs	r1, r3
20002300:	0010      	movs	r0, r2
20002302:	f7ff fd0d 	bl	20001d20 <USART_SendData>
        } else{
            USART_ITConfig(USART1, USART_IT_TXE, DISABLE);
        }
    }
}
20002306:	e005      	b.n	20002314 <USART1_IRQHandler+0x7c>
            USART_ITConfig(USART1, USART_IT_TXE, DISABLE);
20002308:	4907      	ldr	r1, [pc, #28]	; (20002328 <USART1_IRQHandler+0x90>)
2000230a:	4b05      	ldr	r3, [pc, #20]	; (20002320 <USART1_IRQHandler+0x88>)
2000230c:	2200      	movs	r2, #0
2000230e:	0018      	movs	r0, r3
20002310:	f7ff feb6 	bl	20002080 <USART_ITConfig>
}
20002314:	46c0      	nop			; (mov r8, r8)
20002316:	46bd      	mov	sp, r7
20002318:	b003      	add	sp, #12
2000231a:	bd90      	pop	{r4, r7, pc}
2000231c:	00000525 	andeq	r0, r0, r5, lsr #10
20002320:	40011000 	andmi	r1, r1, r0
20002324:	200026f8 	strdcs	r2, [r0], -r8
20002328:	00000727 	andeq	r0, r0, r7, lsr #14
2000232c:	200026f4 	strdcs	r2, [r0], -r4

20002330 <USARTConfig>:

//Sätter upp USART1
void USARTConfig(void){
20002330:	b590      	push	{r4, r7, lr}
20002332:	b089      	sub	sp, #36	; 0x24
20002334:	af00      	add	r7, sp, #0
    //Sätter bufferpekarna
    txBuffer = &realTxBuffer;
20002336:	4b3f      	ldr	r3, [pc, #252]	; (20002434 <USARTConfig+0x104>)
20002338:	4a3f      	ldr	r2, [pc, #252]	; (20002438 <USARTConfig+0x108>)
2000233a:	601a      	str	r2, [r3, #0]
    rxBuffer = &realRxBuffer;
2000233c:	4b3f      	ldr	r3, [pc, #252]	; (2000243c <USARTConfig+0x10c>)
2000233e:	4a40      	ldr	r2, [pc, #256]	; (20002440 <USARTConfig+0x110>)
20002340:	601a      	str	r2, [r3, #0]

    //Nollställer vår buffertar
    bufferInit(txBuffer);
20002342:	4b3c      	ldr	r3, [pc, #240]	; (20002434 <USARTConfig+0x104>)
20002344:	681b      	ldr	r3, [r3, #0]
20002346:	0018      	movs	r0, r3
20002348:	f7ff fa32 	bl	200017b0 <bufferInit>
    bufferInit(rxBuffer);
2000234c:	4b3b      	ldr	r3, [pc, #236]	; (2000243c <USARTConfig+0x10c>)
2000234e:	681b      	ldr	r3, [r3, #0]
20002350:	0018      	movs	r0, r3
20002352:	f7ff fa2d 	bl	200017b0 <bufferInit>

    //Aktiverar klockorna för USART1, Port A
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1, ENABLE);
20002356:	2101      	movs	r1, #1
20002358:	2010      	movs	r0, #16
2000235a:	f7fe fafd 	bl	20000958 <RCC_APB2PeriphClockCmd>
    RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
2000235e:	2101      	movs	r1, #1
20002360:	2001      	movs	r0, #1
20002362:	f7fe fa79 	bl	20000858 <RCC_AHB1PeriphClockCmd>

    //Aktiverar alternativ funktion USART1 för port A pinnar 9 och 10
    GPIO_PinAFConfig(GPIOA, GPIO_Pin_9, GPIO_AF_USART1);
20002366:	2380      	movs	r3, #128	; 0x80
20002368:	009b      	lsls	r3, r3, #2
2000236a:	4836      	ldr	r0, [pc, #216]	; (20002444 <USARTConfig+0x114>)
2000236c:	2207      	movs	r2, #7
2000236e:	0019      	movs	r1, r3
20002370:	f7ff f8e9 	bl	20001546 <GPIO_PinAFConfig>
    GPIO_PinAFConfig(GPIOA, GPIO_Pin_10, GPIO_AF_USART1);
20002374:	2380      	movs	r3, #128	; 0x80
20002376:	00db      	lsls	r3, r3, #3
20002378:	4832      	ldr	r0, [pc, #200]	; (20002444 <USARTConfig+0x114>)
2000237a:	2207      	movs	r2, #7
2000237c:	0019      	movs	r1, r3
2000237e:	f7ff f8e2 	bl	20001546 <GPIO_PinAFConfig>

    //Konfigurerar USART1 Tx och Rx som alternativ funktion push-pull
    GPIO_InitTypeDef GPIO_InitStructure;
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
20002382:	2118      	movs	r1, #24
20002384:	187b      	adds	r3, r7, r1
20002386:	2202      	movs	r2, #2
20002388:	711a      	strb	r2, [r3, #4]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
2000238a:	187b      	adds	r3, r7, r1
2000238c:	2203      	movs	r2, #3
2000238e:	715a      	strb	r2, [r3, #5]
    GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
20002390:	187b      	adds	r3, r7, r1
20002392:	2200      	movs	r2, #0
20002394:	719a      	strb	r2, [r3, #6]
    GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
20002396:	187b      	adds	r3, r7, r1
20002398:	2201      	movs	r2, #1
2000239a:	71da      	strb	r2, [r3, #7]
    //Pinne 9 är TX
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_9;
2000239c:	187b      	adds	r3, r7, r1
2000239e:	2280      	movs	r2, #128	; 0x80
200023a0:	0092      	lsls	r2, r2, #2
200023a2:	601a      	str	r2, [r3, #0]
    GPIO_Init(GPIOA, &GPIO_InitStructure);
200023a4:	000c      	movs	r4, r1
200023a6:	187b      	adds	r3, r7, r1
200023a8:	4a26      	ldr	r2, [pc, #152]	; (20002444 <USARTConfig+0x114>)
200023aa:	0019      	movs	r1, r3
200023ac:	0010      	movs	r0, r2
200023ae:	f7fe ff4d 	bl	2000124c <GPIO_Init>
    //Pinne 10 är RX
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_10;
200023b2:	0021      	movs	r1, r4
200023b4:	187b      	adds	r3, r7, r1
200023b6:	2280      	movs	r2, #128	; 0x80
200023b8:	00d2      	lsls	r2, r2, #3
200023ba:	601a      	str	r2, [r3, #0]
    GPIO_Init(GPIOA, &GPIO_InitStructure);
200023bc:	187b      	adds	r3, r7, r1
200023be:	4a21      	ldr	r2, [pc, #132]	; (20002444 <USARTConfig+0x114>)
200023c0:	0019      	movs	r1, r3
200023c2:	0010      	movs	r0, r2
200023c4:	f7fe ff42 	bl	2000124c <GPIO_Init>
    - Word Length = 8 Bits
    - One Stop Bit
    - No parity
    - Hardware flow control disabled (RTS and CTS signals)
    - Receive and transmit enabled*/
    USART_InitStructure.USART_BaudRate = 115200;
200023c8:	2108      	movs	r1, #8
200023ca:	187b      	adds	r3, r7, r1
200023cc:	22e1      	movs	r2, #225	; 0xe1
200023ce:	0252      	lsls	r2, r2, #9
200023d0:	601a      	str	r2, [r3, #0]
    USART_InitStructure.USART_WordLength = USART_WordLength_8b;
200023d2:	187b      	adds	r3, r7, r1
200023d4:	2200      	movs	r2, #0
200023d6:	809a      	strh	r2, [r3, #4]
    USART_InitStructure.USART_StopBits = USART_StopBits_1;
200023d8:	187b      	adds	r3, r7, r1
200023da:	2200      	movs	r2, #0
200023dc:	80da      	strh	r2, [r3, #6]
    USART_InitStructure.USART_Parity = USART_Parity_No;
200023de:	187b      	adds	r3, r7, r1
200023e0:	2200      	movs	r2, #0
200023e2:	811a      	strh	r2, [r3, #8]
    USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
200023e4:	187b      	adds	r3, r7, r1
200023e6:	2200      	movs	r2, #0
200023e8:	819a      	strh	r2, [r3, #12]
    USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
200023ea:	187b      	adds	r3, r7, r1
200023ec:	220c      	movs	r2, #12
200023ee:	815a      	strh	r2, [r3, #10]
    //Konfigurerar avbrott för USART
    NVIC_InitTypeDef NVIC_InitStructure;
    //4 möjliga gruppprioriteringar
    //4 möjliga undergruppsprioriterinar
    //NVIC_PriorityGroupConfig(NVIC_PriorityGroup_2);
    NVIC_InitStructure.NVIC_IRQChannel = USART1_IRQn;
200023f0:	1d3b      	adds	r3, r7, #4
200023f2:	2225      	movs	r2, #37	; 0x25
200023f4:	701a      	strb	r2, [r3, #0]
    NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
200023f6:	1d3b      	adds	r3, r7, #4
200023f8:	2200      	movs	r2, #0
200023fa:	705a      	strb	r2, [r3, #1]
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
200023fc:	1d3b      	adds	r3, r7, #4
200023fe:	2200      	movs	r2, #0
20002400:	709a      	strb	r2, [r3, #2]
    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
20002402:	1d3b      	adds	r3, r7, #4
20002404:	2201      	movs	r2, #1
20002406:	70da      	strb	r2, [r3, #3]
    NVIC_Init(&NVIC_InitStructure);
20002408:	1d3b      	adds	r3, r7, #4
2000240a:	0018      	movs	r0, r3
2000240c:	f7ff f900 	bl	20001610 <NVIC_Init>

    //Testar att sätta avbrottsvektorn manuellt
    *((void (**)(void) ) (0x2001C000 + 0xD4) ) = USART1_IRQHandler;
20002410:	4b0d      	ldr	r3, [pc, #52]	; (20002448 <USARTConfig+0x118>)
20002412:	4a0e      	ldr	r2, [pc, #56]	; (2000244c <USARTConfig+0x11c>)
20002414:	601a      	str	r2, [r3, #0]

    //Startar USART1
    USART_Cmd(USART1,ENABLE);
20002416:	4b0e      	ldr	r3, [pc, #56]	; (20002450 <USARTConfig+0x120>)
20002418:	2101      	movs	r1, #1
2000241a:	0018      	movs	r0, r3
2000241c:	f7ff fbf8 	bl	20001c10 <USART_Cmd>

    //Aktiverar avbrott vid mottagning av meddelanden
    USART_ITConfig(USART1, USART_IT_RXNE, ENABLE);
20002420:	490c      	ldr	r1, [pc, #48]	; (20002454 <USARTConfig+0x124>)
20002422:	4b0b      	ldr	r3, [pc, #44]	; (20002450 <USARTConfig+0x120>)
20002424:	2201      	movs	r2, #1
20002426:	0018      	movs	r0, r3
20002428:	f7ff fe2a 	bl	20002080 <USART_ITConfig>
}
2000242c:	46c0      	nop			; (mov r8, r8)
2000242e:	46bd      	mov	sp, r7
20002430:	b009      	add	sp, #36	; 0x24
20002432:	bd90      	pop	{r4, r7, pc}
20002434:	200026f4 	strdcs	r2, [r0], -r4
20002438:	200026fc 	strdcs	r2, [r0], -ip
2000243c:	200026f8 	strdcs	r2, [r0], -r8
20002440:	20002764 	andcs	r2, r0, r4, ror #14
20002444:	40020000 	andmi	r0, r2, r0
20002448:	2001c0d4 	ldrdcs	ip, [r1], -r4
2000244c:	20002299 	mulcs	r0, r9, r2
20002450:	40011000 	andmi	r1, r1, r0
20002454:	00000525 	andeq	r0, r0, r5, lsr #10

20002458 <USARTPut>:

//Lägger till elem till kön för att skicka
//Returnerar 1 om det lyckades, 0 annars.
uint8_t USARTPut (uint8_t elem){
20002458:	b580      	push	{r7, lr}
2000245a:	b082      	sub	sp, #8
2000245c:	af00      	add	r7, sp, #0
2000245e:	0002      	movs	r2, r0
20002460:	1dfb      	adds	r3, r7, #7
20002462:	701a      	strb	r2, [r3, #0]
    //Lägger till den i bufferten om det går
    if (bufferPut(txBuffer, elem)){
20002464:	4b0b      	ldr	r3, [pc, #44]	; (20002494 <USARTPut+0x3c>)
20002466:	681a      	ldr	r2, [r3, #0]
20002468:	1dfb      	adds	r3, r7, #7
2000246a:	781b      	ldrb	r3, [r3, #0]
2000246c:	0019      	movs	r1, r3
2000246e:	0010      	movs	r0, r2
20002470:	f7ff f9b2 	bl	200017d8 <bufferPut>
20002474:	1e03      	subs	r3, r0, #0
20002476:	d007      	beq.n	20002488 <USARTPut+0x30>
        //Aktiverar avbrott för att skicka
        USART_ITConfig(USART1, USART_IT_TXE, ENABLE);
20002478:	4907      	ldr	r1, [pc, #28]	; (20002498 <USARTPut+0x40>)
2000247a:	4b08      	ldr	r3, [pc, #32]	; (2000249c <USARTPut+0x44>)
2000247c:	2201      	movs	r2, #1
2000247e:	0018      	movs	r0, r3
20002480:	f7ff fdfe 	bl	20002080 <USART_ITConfig>
        //Alternativ lösning: hålla koll på om avbrott redan är aktivt
        return 1;
20002484:	2301      	movs	r3, #1
20002486:	e000      	b.n	2000248a <USARTPut+0x32>
    }
    return 0;
20002488:	2300      	movs	r3, #0
}
2000248a:	0018      	movs	r0, r3
2000248c:	46bd      	mov	sp, r7
2000248e:	b002      	add	sp, #8
20002490:	bd80      	pop	{r7, pc}
20002492:	46c0      	nop			; (mov r8, r8)
20002494:	200026f4 	strdcs	r2, [r0], -r4
20002498:	00000727 	andeq	r0, r0, r7, lsr #14
2000249c:	40011000 	andmi	r1, r1, r0

200024a0 <USARTPrint>:

//Lägger till list till kön för att skicka
//Returnerar 1 om det lyckades, 0 annars.
uint8_t USARTPrint(uint8_t *list){
200024a0:	b580      	push	{r7, lr}
200024a2:	b082      	sub	sp, #8
200024a4:	af00      	add	r7, sp, #0
200024a6:	6078      	str	r0, [r7, #4]
    //En sträng avslutas med null så vi
    //läser tills vi hittar den
    while (*list) {
200024a8:	e00a      	b.n	200024c0 <USARTPrint+0x20>
        //Lägg till alla tecken en efter en
        //Misslyckas vi med en avbryter vi resten
        if (!USARTPut(*list++)){
200024aa:	687b      	ldr	r3, [r7, #4]
200024ac:	1c5a      	adds	r2, r3, #1
200024ae:	607a      	str	r2, [r7, #4]
200024b0:	781b      	ldrb	r3, [r3, #0]
200024b2:	0018      	movs	r0, r3
200024b4:	f7ff ffd0 	bl	20002458 <USARTPut>
200024b8:	1e03      	subs	r3, r0, #0
200024ba:	d101      	bne.n	200024c0 <USARTPrint+0x20>
            return 0;
200024bc:	2300      	movs	r3, #0
200024be:	e004      	b.n	200024ca <USARTPrint+0x2a>
    while (*list) {
200024c0:	687b      	ldr	r3, [r7, #4]
200024c2:	781b      	ldrb	r3, [r3, #0]
200024c4:	2b00      	cmp	r3, #0
200024c6:	d1f0      	bne.n	200024aa <USARTPrint+0xa>
        }
    }
    return 1;
200024c8:	2301      	movs	r3, #1
}
200024ca:	0018      	movs	r0, r3
200024cc:	46bd      	mov	sp, r7
200024ce:	b002      	add	sp, #8
200024d0:	bd80      	pop	{r7, pc}

200024d2 <USARTPrintNumBase>:

//Lägger till num som enskilda nummer
//base anger vilken bas
//Returnerar 1 om det lyckades, 0 annars.
uint8_t USARTPrintNumBase(uint32_t num, uint8_t base){
200024d2:	b580      	push	{r7, lr}
200024d4:	b08c      	sub	sp, #48	; 0x30
200024d6:	af00      	add	r7, sp, #0
200024d8:	6078      	str	r0, [r7, #4]
200024da:	000a      	movs	r2, r1
200024dc:	1cfb      	adds	r3, r7, #3
200024de:	701a      	strb	r2, [r3, #0]
    if (base == 0 || base == 1){
200024e0:	1cfb      	adds	r3, r7, #3
200024e2:	781b      	ldrb	r3, [r3, #0]
200024e4:	2b00      	cmp	r3, #0
200024e6:	d003      	beq.n	200024f0 <USARTPrintNumBase+0x1e>
200024e8:	1cfb      	adds	r3, r7, #3
200024ea:	781b      	ldrb	r3, [r3, #0]
200024ec:	2b01      	cmp	r3, #1
200024ee:	d101      	bne.n	200024f4 <USARTPrintNumBase+0x22>
        return 0;
200024f0:	2300      	movs	r3, #0
200024f2:	e04c      	b.n	2000258e <USARTPrintNumBase+0xbc>
    }

    //Max längd är 32 bitar vid base = 2
    uint8_t index = 0,digitArr[32];
200024f4:	232f      	movs	r3, #47	; 0x2f
200024f6:	18fb      	adds	r3, r7, r3
200024f8:	2200      	movs	r2, #0
200024fa:	701a      	strb	r2, [r3, #0]

    //Sparar tecknen i arrayn
    do {
        uint8_t digit = num % base;
200024fc:	1cfb      	adds	r3, r7, #3
200024fe:	781a      	ldrb	r2, [r3, #0]
20002500:	687b      	ldr	r3, [r7, #4]
20002502:	0011      	movs	r1, r2
20002504:	0018      	movs	r0, r3
20002506:	f000 f8ed 	bl	200026e4 <__aeabi_uidivmod>
2000250a:	000b      	movs	r3, r1
2000250c:	001a      	movs	r2, r3
2000250e:	212e      	movs	r1, #46	; 0x2e
20002510:	187b      	adds	r3, r7, r1
20002512:	701a      	strb	r2, [r3, #0]
        digitArr[index++] = digit >= 10 ? 'A' + digit - 10 : '0' + digit;
20002514:	187b      	adds	r3, r7, r1
20002516:	781b      	ldrb	r3, [r3, #0]
20002518:	2b09      	cmp	r3, #9
2000251a:	d905      	bls.n	20002528 <USARTPrintNumBase+0x56>
2000251c:	232e      	movs	r3, #46	; 0x2e
2000251e:	18fb      	adds	r3, r7, r3
20002520:	781b      	ldrb	r3, [r3, #0]
20002522:	3337      	adds	r3, #55	; 0x37
20002524:	b2db      	uxtb	r3, r3
20002526:	e004      	b.n	20002532 <USARTPrintNumBase+0x60>
20002528:	232e      	movs	r3, #46	; 0x2e
2000252a:	18fb      	adds	r3, r7, r3
2000252c:	781b      	ldrb	r3, [r3, #0]
2000252e:	3330      	adds	r3, #48	; 0x30
20002530:	b2db      	uxtb	r3, r3
20002532:	212f      	movs	r1, #47	; 0x2f
20002534:	187a      	adds	r2, r7, r1
20002536:	7812      	ldrb	r2, [r2, #0]
20002538:	1879      	adds	r1, r7, r1
2000253a:	1c50      	adds	r0, r2, #1
2000253c:	7008      	strb	r0, [r1, #0]
2000253e:	0011      	movs	r1, r2
20002540:	220c      	movs	r2, #12
20002542:	18ba      	adds	r2, r7, r2
20002544:	5453      	strb	r3, [r2, r1]
        num /= base;
20002546:	1cfb      	adds	r3, r7, #3
20002548:	781b      	ldrb	r3, [r3, #0]
2000254a:	0019      	movs	r1, r3
2000254c:	6878      	ldr	r0, [r7, #4]
2000254e:	f000 f843 	bl	200025d8 <__udivsi3>
20002552:	0003      	movs	r3, r0
20002554:	607b      	str	r3, [r7, #4]
    } while (num);
20002556:	687b      	ldr	r3, [r7, #4]
20002558:	2b00      	cmp	r3, #0
2000255a:	d1cf      	bne.n	200024fc <USARTPrintNumBase+0x2a>

    //Printar
    while(index){
2000255c:	e011      	b.n	20002582 <USARTPrintNumBase+0xb0>
         if(!USARTPut(digitArr[--index])){
2000255e:	212f      	movs	r1, #47	; 0x2f
20002560:	187b      	adds	r3, r7, r1
20002562:	187a      	adds	r2, r7, r1
20002564:	7812      	ldrb	r2, [r2, #0]
20002566:	3a01      	subs	r2, #1
20002568:	701a      	strb	r2, [r3, #0]
2000256a:	187b      	adds	r3, r7, r1
2000256c:	781b      	ldrb	r3, [r3, #0]
2000256e:	220c      	movs	r2, #12
20002570:	18ba      	adds	r2, r7, r2
20002572:	5cd3      	ldrb	r3, [r2, r3]
20002574:	0018      	movs	r0, r3
20002576:	f7ff ff6f 	bl	20002458 <USARTPut>
2000257a:	1e03      	subs	r3, r0, #0
2000257c:	d101      	bne.n	20002582 <USARTPrintNumBase+0xb0>
             return 0;
2000257e:	2300      	movs	r3, #0
20002580:	e005      	b.n	2000258e <USARTPrintNumBase+0xbc>
    while(index){
20002582:	232f      	movs	r3, #47	; 0x2f
20002584:	18fb      	adds	r3, r7, r3
20002586:	781b      	ldrb	r3, [r3, #0]
20002588:	2b00      	cmp	r3, #0
2000258a:	d1e8      	bne.n	2000255e <USARTPrintNumBase+0x8c>
         }
     }

    return 1;
2000258c:	2301      	movs	r3, #1
}
2000258e:	0018      	movs	r0, r3
20002590:	46bd      	mov	sp, r7
20002592:	b00c      	add	sp, #48	; 0x30
20002594:	bd80      	pop	{r7, pc}

20002596 <USARTPrintNum>:

//Lägger till num som enskilda nummer
//0-9 till kön för att skicka
//Returnerar 1 om det lyckades, 0 annars.
uint8_t USARTPrintNum(uint32_t num){
20002596:	b580      	push	{r7, lr}
20002598:	b082      	sub	sp, #8
2000259a:	af00      	add	r7, sp, #0
2000259c:	6078      	str	r0, [r7, #4]
    USARTPrintNumBase(num, 10);
2000259e:	687b      	ldr	r3, [r7, #4]
200025a0:	210a      	movs	r1, #10
200025a2:	0018      	movs	r0, r3
200025a4:	f7ff ff95 	bl	200024d2 <USARTPrintNumBase>
}
200025a8:	46c0      	nop			; (mov r8, r8)
200025aa:	0018      	movs	r0, r3
200025ac:	46bd      	mov	sp, r7
200025ae:	b002      	add	sp, #8
200025b0:	bd80      	pop	{r7, pc}

200025b2 <USARTGet>:

//Hämta senaste mottagna meddelandet till dest
//Gör ingen omvandling, dvs returnerar det tal som skickades över USART
//Returnerar 1 om det lyckades, dvs det fanns ett meddelande att hämta 0 annars.
uint8_t USARTGet(uint8_t *dest){
200025b2:	b580      	push	{r7, lr}
200025b4:	b082      	sub	sp, #8
200025b6:	af00      	add	r7, sp, #0
200025b8:	6078      	str	r0, [r7, #4]
    return bufferGet (rxBuffer, dest);
200025ba:	4b06      	ldr	r3, [pc, #24]	; (200025d4 <USARTGet+0x22>)
200025bc:	681b      	ldr	r3, [r3, #0]
200025be:	687a      	ldr	r2, [r7, #4]
200025c0:	0011      	movs	r1, r2
200025c2:	0018      	movs	r0, r3
200025c4:	f7ff f939 	bl	2000183a <bufferGet>
200025c8:	0003      	movs	r3, r0
}
200025ca:	0018      	movs	r0, r3
200025cc:	46bd      	mov	sp, r7
200025ce:	b002      	add	sp, #8
200025d0:	bd80      	pop	{r7, pc}
200025d2:	46c0      	nop			; (mov r8, r8)
200025d4:	200026f8 	strdcs	r2, [r0], -r8

200025d8 <__udivsi3>:
200025d8:	2200      	movs	r2, #0
200025da:	0843      	lsrs	r3, r0, #1
200025dc:	428b      	cmp	r3, r1
200025de:	d374      	bcc.n	200026ca <__udivsi3+0xf2>
200025e0:	0903      	lsrs	r3, r0, #4
200025e2:	428b      	cmp	r3, r1
200025e4:	d35f      	bcc.n	200026a6 <__udivsi3+0xce>
200025e6:	0a03      	lsrs	r3, r0, #8
200025e8:	428b      	cmp	r3, r1
200025ea:	d344      	bcc.n	20002676 <__udivsi3+0x9e>
200025ec:	0b03      	lsrs	r3, r0, #12
200025ee:	428b      	cmp	r3, r1
200025f0:	d328      	bcc.n	20002644 <__udivsi3+0x6c>
200025f2:	0c03      	lsrs	r3, r0, #16
200025f4:	428b      	cmp	r3, r1
200025f6:	d30d      	bcc.n	20002614 <__udivsi3+0x3c>
200025f8:	22ff      	movs	r2, #255	; 0xff
200025fa:	0209      	lsls	r1, r1, #8
200025fc:	ba12      	rev	r2, r2
200025fe:	0c03      	lsrs	r3, r0, #16
20002600:	428b      	cmp	r3, r1
20002602:	d302      	bcc.n	2000260a <__udivsi3+0x32>
20002604:	1212      	asrs	r2, r2, #8
20002606:	0209      	lsls	r1, r1, #8
20002608:	d065      	beq.n	200026d6 <__udivsi3+0xfe>
2000260a:	0b03      	lsrs	r3, r0, #12
2000260c:	428b      	cmp	r3, r1
2000260e:	d319      	bcc.n	20002644 <__udivsi3+0x6c>
20002610:	e000      	b.n	20002614 <__udivsi3+0x3c>
20002612:	0a09      	lsrs	r1, r1, #8
20002614:	0bc3      	lsrs	r3, r0, #15
20002616:	428b      	cmp	r3, r1
20002618:	d301      	bcc.n	2000261e <__udivsi3+0x46>
2000261a:	03cb      	lsls	r3, r1, #15
2000261c:	1ac0      	subs	r0, r0, r3
2000261e:	4152      	adcs	r2, r2
20002620:	0b83      	lsrs	r3, r0, #14
20002622:	428b      	cmp	r3, r1
20002624:	d301      	bcc.n	2000262a <__udivsi3+0x52>
20002626:	038b      	lsls	r3, r1, #14
20002628:	1ac0      	subs	r0, r0, r3
2000262a:	4152      	adcs	r2, r2
2000262c:	0b43      	lsrs	r3, r0, #13
2000262e:	428b      	cmp	r3, r1
20002630:	d301      	bcc.n	20002636 <__udivsi3+0x5e>
20002632:	034b      	lsls	r3, r1, #13
20002634:	1ac0      	subs	r0, r0, r3
20002636:	4152      	adcs	r2, r2
20002638:	0b03      	lsrs	r3, r0, #12
2000263a:	428b      	cmp	r3, r1
2000263c:	d301      	bcc.n	20002642 <__udivsi3+0x6a>
2000263e:	030b      	lsls	r3, r1, #12
20002640:	1ac0      	subs	r0, r0, r3
20002642:	4152      	adcs	r2, r2
20002644:	0ac3      	lsrs	r3, r0, #11
20002646:	428b      	cmp	r3, r1
20002648:	d301      	bcc.n	2000264e <__udivsi3+0x76>
2000264a:	02cb      	lsls	r3, r1, #11
2000264c:	1ac0      	subs	r0, r0, r3
2000264e:	4152      	adcs	r2, r2
20002650:	0a83      	lsrs	r3, r0, #10
20002652:	428b      	cmp	r3, r1
20002654:	d301      	bcc.n	2000265a <__udivsi3+0x82>
20002656:	028b      	lsls	r3, r1, #10
20002658:	1ac0      	subs	r0, r0, r3
2000265a:	4152      	adcs	r2, r2
2000265c:	0a43      	lsrs	r3, r0, #9
2000265e:	428b      	cmp	r3, r1
20002660:	d301      	bcc.n	20002666 <__udivsi3+0x8e>
20002662:	024b      	lsls	r3, r1, #9
20002664:	1ac0      	subs	r0, r0, r3
20002666:	4152      	adcs	r2, r2
20002668:	0a03      	lsrs	r3, r0, #8
2000266a:	428b      	cmp	r3, r1
2000266c:	d301      	bcc.n	20002672 <__udivsi3+0x9a>
2000266e:	020b      	lsls	r3, r1, #8
20002670:	1ac0      	subs	r0, r0, r3
20002672:	4152      	adcs	r2, r2
20002674:	d2cd      	bcs.n	20002612 <__udivsi3+0x3a>
20002676:	09c3      	lsrs	r3, r0, #7
20002678:	428b      	cmp	r3, r1
2000267a:	d301      	bcc.n	20002680 <__udivsi3+0xa8>
2000267c:	01cb      	lsls	r3, r1, #7
2000267e:	1ac0      	subs	r0, r0, r3
20002680:	4152      	adcs	r2, r2
20002682:	0983      	lsrs	r3, r0, #6
20002684:	428b      	cmp	r3, r1
20002686:	d301      	bcc.n	2000268c <__udivsi3+0xb4>
20002688:	018b      	lsls	r3, r1, #6
2000268a:	1ac0      	subs	r0, r0, r3
2000268c:	4152      	adcs	r2, r2
2000268e:	0943      	lsrs	r3, r0, #5
20002690:	428b      	cmp	r3, r1
20002692:	d301      	bcc.n	20002698 <__udivsi3+0xc0>
20002694:	014b      	lsls	r3, r1, #5
20002696:	1ac0      	subs	r0, r0, r3
20002698:	4152      	adcs	r2, r2
2000269a:	0903      	lsrs	r3, r0, #4
2000269c:	428b      	cmp	r3, r1
2000269e:	d301      	bcc.n	200026a4 <__udivsi3+0xcc>
200026a0:	010b      	lsls	r3, r1, #4
200026a2:	1ac0      	subs	r0, r0, r3
200026a4:	4152      	adcs	r2, r2
200026a6:	08c3      	lsrs	r3, r0, #3
200026a8:	428b      	cmp	r3, r1
200026aa:	d301      	bcc.n	200026b0 <__udivsi3+0xd8>
200026ac:	00cb      	lsls	r3, r1, #3
200026ae:	1ac0      	subs	r0, r0, r3
200026b0:	4152      	adcs	r2, r2
200026b2:	0883      	lsrs	r3, r0, #2
200026b4:	428b      	cmp	r3, r1
200026b6:	d301      	bcc.n	200026bc <__udivsi3+0xe4>
200026b8:	008b      	lsls	r3, r1, #2
200026ba:	1ac0      	subs	r0, r0, r3
200026bc:	4152      	adcs	r2, r2
200026be:	0843      	lsrs	r3, r0, #1
200026c0:	428b      	cmp	r3, r1
200026c2:	d301      	bcc.n	200026c8 <__udivsi3+0xf0>
200026c4:	004b      	lsls	r3, r1, #1
200026c6:	1ac0      	subs	r0, r0, r3
200026c8:	4152      	adcs	r2, r2
200026ca:	1a41      	subs	r1, r0, r1
200026cc:	d200      	bcs.n	200026d0 <__udivsi3+0xf8>
200026ce:	4601      	mov	r1, r0
200026d0:	4152      	adcs	r2, r2
200026d2:	4610      	mov	r0, r2
200026d4:	4770      	bx	lr
200026d6:	e7ff      	b.n	200026d8 <__udivsi3+0x100>
200026d8:	b501      	push	{r0, lr}
200026da:	2000      	movs	r0, #0
200026dc:	f000 f806 	bl	200026ec <__aeabi_idiv0>
200026e0:	bd02      	pop	{r1, pc}
200026e2:	46c0      	nop			; (mov r8, r8)

200026e4 <__aeabi_uidivmod>:
200026e4:	2900      	cmp	r1, #0
200026e6:	d0f7      	beq.n	200026d8 <__udivsi3+0x100>
200026e8:	e776      	b.n	200025d8 <__udivsi3>
200026ea:	4770      	bx	lr

200026ec <__aeabi_idiv0>:
200026ec:	4770      	bx	lr
200026ee:	46c0      	nop			; (mov r8, r8)

200026f0 <msTicks>:
200026f0:	00000000 	andeq	r0, r0, r0

200026f4 <txBuffer>:
200026f4:	00000000 	andeq	r0, r0, r0

200026f8 <rxBuffer>:
200026f8:	00000000 	andeq	r0, r0, r0

200026fc <realTxBuffer>:
	...

20002764 <realRxBuffer>:
	...

200027cc <APBAHBPrescTable>:
200027cc:	00000000 	andeq	r0, r0, r0
200027d0:	04030201 	streq	r0, [r3], #-513	; 0xfffffdff
200027d4:	04030201 	streq	r0, [r3], #-513	; 0xfffffdff
200027d8:	09080706 	stmdbeq	r8, {r1, r2, r8, r9, sl}
	...
200027e4:	00000201 	andeq	r0, r0, r1, lsl #4
200027e8:	00000000 	andeq	r0, r0, r0
200027ec:	00000008 	andeq	r0, r0, r8
200027f0:	00000004 	andeq	r0, r0, r4
200027f4:	00000000 	andeq	r0, r0, r0
200027f8:	00000001 	andeq	r0, r0, r1
200027fc:	00000000 	andeq	r0, r0, r0
20002800:	00000201 	andeq	r0, r0, r1, lsl #4
20002804:	00000000 	andeq	r0, r0, r0
20002808:	00000020 	andeq	r0, r0, r0, lsr #32
2000280c:	00000010 	andeq	r0, r0, r0, lsl r0
20002810:	00000000 	andeq	r0, r0, r0
20002814:	00000002 	andeq	r0, r0, r2
20002818:	00000000 	andeq	r0, r0, r0
2000281c:	00000201 	andeq	r0, r0, r1, lsl #4
20002820:	00000000 	andeq	r0, r0, r0
20002824:	00000002 	andeq	r0, r0, r2
20002828:	00000001 	andeq	r0, r0, r1
2000282c:	00000000 	andeq	r0, r0, r0
20002830:	00000003 	andeq	r0, r0, r3
20002834:	00000000 	andeq	r0, r0, r0
20002838:	00000201 	andeq	r0, r0, r1, lsl #4
2000283c:	00000000 	andeq	r0, r0, r0
20002840:	00000080 	andeq	r0, r0, r0, lsl #1
20002844:	00000040 	andeq	r0, r0, r0, asr #32
20002848:	00000000 	andeq	r0, r0, r0

Disassembly of section .debug_info:

00000000 <.debug_info>:
       0:	0000175f 	andeq	r1, r0, pc, asr r7
       4:	00000004 	andeq	r0, r0, r4
       8:	01040000 	mrseq	r0, (UNDEF: 4)
       c:	000005e7 	andeq	r0, r0, r7, ror #11
      10:	000d920c 	andeq	r9, sp, ip, lsl #4
      14:	00054700 	andeq	r4, r5, r0, lsl #14
	...
      24:	0f9b0200 	svceq	0x009b0200
      28:	01050000 	mrseq	r0, (UNDEF: 5)
      2c:	00000253 	andeq	r0, r0, r3, asr r2
      30:	0253c804 	subseq	ip, r3, #4, 16	; 0x40000
      34:	af030000 	svcge	0x00030000
      38:	72000007 	andvc	r0, r0, #7
      3c:	00082a03 	andeq	r2, r8, r3, lsl #20
      40:	ef037400 	svc	0x00037400
      44:	75000008 	strvc	r0, [r0, #-8]
      48:	00048a03 	andeq	r8, r4, r3, lsl #20
      4c:	cc037600 	stcgt	6, cr7, [r3], {-0}
      50:	7b000009 	blvc	7c <startup-0x1fffff84>
      54:	000e8103 	andeq	r8, lr, r3, lsl #2
      58:	dc037c00 	stcle	12, cr7, [r3], {-0}
      5c:	7e000010 	mcrvc	0, 0, r0, cr0, cr0, {0}
      60:	00033603 	andeq	r3, r3, r3, lsl #12
      64:	c3047f00 	movwgt	r7, #20224	; 0x4f00
      68:	00000007 	andeq	r0, r0, r7
      6c:	0006b504 	andeq	fp, r6, r4, lsl #10
      70:	50040100 	andpl	r0, r4, r0, lsl #2
      74:	02000008 	andeq	r0, r0, #8
      78:	00000e04 	andeq	r0, r0, r4, lsl #28
      7c:	bb040300 	bllt	100c84 <startup-0x1feff37c>
      80:	04000000 	streq	r0, [r0], #-0
      84:	000f1804 	andeq	r1, pc, r4, lsl #16
      88:	02040500 	andeq	r0, r4, #0, 10
      8c:	0600000e 	streq	r0, [r0], -lr
      90:	00073804 	andeq	r3, r7, r4, lsl #16
      94:	1c040700 	stcne	7, cr0, [r4], {-0}
      98:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
      9c:	0010d104 	andseq	sp, r0, r4, lsl #2
      a0:	b8040900 	stmdalt	r4, {r8, fp}
      a4:	0a00000a 	beq	d4 <startup-0x1fffff2c>
      a8:	000c5004 	andeq	r5, ip, r4
      ac:	74040b00 	strvc	r0, [r4], #-2816	; 0xfffff500
      b0:	0c00000b 	stceq	0, cr0, [r0], {11}
      b4:	0003a704 	andeq	sl, r3, r4, lsl #14
      b8:	2d040d00 	stccs	13, cr0, [r4, #-0]
      bc:	0e00000f 	cdpeq	0, 0, cr0, cr0, cr15, {0}
      c0:	000e3404 	andeq	r3, lr, r4, lsl #8
      c4:	50040f00 	andpl	r0, r4, r0, lsl #30
      c8:	10000007 	andne	r0, r0, r7
      cc:	00002704 	andeq	r2, r0, r4, lsl #14
      d0:	48041100 	stmdami	r4, {r8, ip}
      d4:	1200000d 	andne	r0, r0, #13
      d8:	00074304 	andeq	r4, r7, r4, lsl #6
      dc:	39041300 	stmdbcc	r4, {r8, r9, ip}
      e0:	14000005 	strne	r0, [r0], #-5
      e4:	00102104 	andseq	r2, r0, r4, lsl #2
      e8:	60041500 	andvs	r1, r4, r0, lsl #10
      ec:	16000008 	strne	r0, [r0], -r8
      f0:	00104b04 	andseq	r4, r0, r4, lsl #22
      f4:	16041700 	strne	r1, [r4], -r0, lsl #14
      f8:	18000009 	stmdane	r0, {r0, r3}
      fc:	000f8d04 	andeq	r8, pc, r4, lsl #26
     100:	9e041900 	vmlals.f16	s2, s8, s0	; <UNPREDICTABLE>
     104:	1a000002 	bne	114 <startup-0x1ffffeec>
     108:	00071d04 	andeq	r1, r7, r4, lsl #26
     10c:	45041b00 	strmi	r1, [r4, #-2816]	; 0xfffff500
     110:	1c000001 	stcne	0, cr0, [r0], {1}
     114:	000cfc04 	andeq	pc, ip, r4, lsl #24
     118:	dd041d00 	stcle	13, cr1, [r4, #-0]
     11c:	1e000005 	cdpne	0, 0, cr0, cr0, cr5, {0}
     120:	0006cb04 	andeq	ip, r6, r4, lsl #22
     124:	43041f00 	movwmi	r1, #20224	; 0x4f00
     128:	20000004 	andcs	r0, r0, r4
     12c:	000aea04 	andeq	lr, sl, r4, lsl #20
     130:	c2042100 	andgt	r2, r4, #0, 2
     134:	22000008 	andcs	r0, r0, #8
     138:	0009ba04 	andeq	fp, r9, r4, lsl #20
     13c:	d6042300 	strle	r2, [r4], -r0, lsl #6
     140:	24000001 	strcs	r0, [r0], #-1
     144:	000d0604 	andeq	r0, sp, r4, lsl #12
     148:	3f042500 	svccc	0x00042500
     14c:	2600000f 	strcs	r0, [r0], -pc
     150:	00035204 	andeq	r5, r3, r4, lsl #4
     154:	ca042700 	bgt	109d5c <startup-0x1fef62a4>
     158:	2800000c 	stmdacs	r0, {r2, r3}
     15c:	000c8204 	andeq	r8, ip, r4, lsl #4
     160:	8e042900 	vmlahi.f16	s4, s8, s0	; <UNPREDICTABLE>
     164:	2a00000a 	bcs	194 <startup-0x1ffffe6c>
     168:	0001e004 	andeq	lr, r1, r4
     16c:	39042b00 	stmdbcc	r4, {r8, r9, fp, sp}
     170:	2c000000 	stccs	0, cr0, [r0], {-0}
     174:	00077904 	andeq	r7, r7, r4, lsl #18
     178:	9e042d00 	cdpls	13, 0, cr2, cr4, cr0, {0}
     17c:	2e000010 	mcrcs	0, 0, r0, cr0, cr0, {0}
     180:	00110d04 	andseq	r0, r1, r4, lsl #26
     184:	f8042f00 			; <UNDEFINED> instruction: 0xf8042f00
     188:	3000000d 	andcc	r0, r0, sp
     18c:	0010ab04 	andseq	sl, r0, r4, lsl #22
     190:	80043100 	andhi	r3, r4, r0, lsl #2
     194:	32000004 	andcc	r0, r0, #4
     198:	0000b104 	andeq	fp, r0, r4, lsl #2
     19c:	59043300 	stmdbpl	r4, {r8, r9, ip, sp}
     1a0:	3400000a 	strcc	r0, [r0], #-10
     1a4:	00090b04 	andeq	r0, r9, r4, lsl #22
     1a8:	c8043500 	stmdagt	r4, {r8, sl, ip, sp}
     1ac:	3600000a 	strcc	r0, [r0], -sl
     1b0:	00097c04 	andeq	r7, r9, r4, lsl #24
     1b4:	85043700 	strhi	r3, [r4, #-1792]	; 0xfffff900
     1b8:	38000008 	stmdacc	r0, {r3}
     1bc:	00007a04 	andeq	r7, r0, r4, lsl #20
     1c0:	86043900 	strhi	r3, [r4], -r0, lsl #18
     1c4:	3a000011 	bcc	210 <startup-0x1ffffdf0>
     1c8:	000b9304 	andeq	r9, fp, r4, lsl #6
     1cc:	00043b00 	andeq	r3, r4, r0, lsl #22
     1d0:	3c000004 	stccc	0, cr0, [r0], {4}
     1d4:	000ed304 	andeq	sp, lr, r4, lsl #6
     1d8:	94043d00 	strls	r3, [r4], #-3328	; 0xfffff300
     1dc:	3e000009 	cdpcc	0, 0, cr0, cr0, cr9, {0}
     1e0:	000bae04 	andeq	sl, fp, r4, lsl #28
     1e4:	a8043f00 	stmdage	r4, {r8, r9, sl, fp, ip, sp}
     1e8:	40000001 	andmi	r0, r0, r1
     1ec:	000d3a04 	andeq	r3, sp, r4, lsl #20
     1f0:	50044100 	andpl	r4, r4, r0, lsl #2
     1f4:	42000004 	andmi	r0, r0, #4
     1f8:	0007a304 	andeq	sl, r7, r4, lsl #6
     1fc:	68044300 	stmdavs	r4, {r8, r9, lr}
     200:	44000002 	strmi	r0, [r0], #-2
     204:	000e5004 	andeq	r5, lr, r4
     208:	91044500 	tstls	r4, r0, lsl #10
     20c:	46000007 	strmi	r0, [r0], -r7
     210:	0001b604 	andeq	fp, r1, r4, lsl #12
     214:	b3044700 	movwlt	r4, #18176	; 0x4700
     218:	4800000e 	stmdami	r0, {r1, r2, r3}
     21c:	000cb304 	andeq	fp, ip, r4, lsl #6
     220:	df044900 	svcle	0x00044900
     224:	4a00000f 	bmi	268 <startup-0x1ffffd98>
     228:	0010fa04 	andseq	pc, r0, r4, lsl #20
     22c:	cd044b00 	vstrgt	d4, [r4, #-0]
     230:	4c000007 	stcmi	0, cr0, [r0], {7}
     234:	0009a204 	andeq	sl, r9, r4, lsl #4
     238:	cf044d00 	svcgt	0x00044d00
     23c:	4e000000 	cdpmi	0, 0, cr0, cr0, cr0, {0}
     240:	000cc004 	andeq	ip, ip, r4
     244:	2a044f00 	bcs	113e4c <startup-0x1feec1b4>
     248:	50000007 	andpl	r0, r0, r7
     24c:	000a3204 	andeq	r3, sl, r4, lsl #4
     250:	05005100 	streq	r5, [r0, #-256]	; 0xffffff00
     254:	03f40601 	mvnseq	r0, #1048576	; 0x100000
     258:	6e060000 	cdpvs	0, 0, cr0, cr6, cr0, {0}
     25c:	04000008 	streq	r0, [r0], #-8
     260:	0025032f 	eoreq	r0, r5, pc, lsr #6
     264:	cc070000 	stcgt	0, cr0, [r7], {-0}
     268:	05000001 	streq	r0, [r0, #-1]
     26c:	0002712b 	andeq	r7, r2, fp, lsr #2
     270:	08010500 	stmdaeq	r1, {r8, sl}
     274:	000003f2 	strdeq	r0, [r0], -r2
     278:	05050205 	streq	r0, [r5, #-517]	; 0xfffffdfb
     27c:	0700000f 	streq	r0, [r0, -pc]
     280:	00000507 	andeq	r0, r0, r7, lsl #10
     284:	028a3905 	addeq	r3, sl, #81920	; 0x14000
     288:	02050000 	andeq	r0, r5, #0
     28c:	00107a07 	andseq	r7, r0, r7, lsl #20
     290:	111f0700 	tstne	pc, r0, lsl #14
     294:	4d050000 	stcmi	0, cr0, [r5, #-0]
     298:	0000029c 	muleq	r0, ip, r2
     29c:	8b050405 	blhi	1412b8 <startup-0x1febed48>
     2a0:	07000009 	streq	r0, [r0, -r9]
     2a4:	00000934 	andeq	r0, r0, r4, lsr r9
     2a8:	02ae4f05 	adceq	r4, lr, #5, 30
     2ac:	04050000 	streq	r0, [r5], #-0
     2b0:	000cde07 	andeq	sp, ip, r7, lsl #28
     2b4:	05080500 	streq	r0, [r8, #-1280]	; 0xfffffb00
     2b8:	00000986 	andeq	r0, r0, r6, lsl #19
     2bc:	d9070805 	stmdble	r7, {r0, r2, fp}
     2c0:	0800000c 	stmdaeq	r0, {r2, r3}
     2c4:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
     2c8:	04050074 	streq	r0, [r5], #-116	; 0xffffff8c
     2cc:	000ce307 	andeq	lr, ip, r7, lsl #6
     2d0:	01ce0700 	biceq	r0, lr, r0, lsl #14
     2d4:	18060000 	stmdane	r6, {}	; <UNPREDICTABLE>
     2d8:	00000266 	andeq	r0, r0, r6, ror #4
     2dc:	0002d109 	andeq	sp, r2, r9, lsl #2
     2e0:	02d10a00 	sbcseq	r0, r1, #0, 20
     2e4:	e1090000 	mrs	r0, (UNDEF: 9)
     2e8:	07000002 	streq	r0, [r0, -r2]
     2ec:	00000509 	andeq	r0, r0, r9, lsl #10
     2f0:	027f2406 	rsbseq	r2, pc, #100663296	; 0x6000000
     2f4:	eb090000 	bl	2402fc <startup-0x1fdbfd04>
     2f8:	07000002 	streq	r0, [r0, -r2]
     2fc:	00001121 	andeq	r1, r0, r1, lsr #2
     300:	02912c06 	addseq	r2, r1, #1536	; 0x600
     304:	fb090000 	blx	24030e <startup-0x1fdbfcf2>
     308:	07000002 	streq	r0, [r0, -r2]
     30c:	00000936 	andeq	r0, r0, r6, lsr r9
     310:	02a33006 	adceq	r3, r3, #6
     314:	0b090000 	bleq	24031c <startup-0x1fdbfce4>
     318:	0a000003 	beq	32c <startup-0x1ffffcd4>
     31c:	00000316 	andeq	r0, r0, r6, lsl r3
     320:	010e040b 	tsteq	lr, fp, lsl #8
     324:	03dc01a0 	bicseq	r0, ip, #160, 2	; 0x28
     328:	3d0c0000 	stccc	0, cr0, [ip, #-0]
     32c:	01000011 	tsteq	r0, r1, lsl r0
     330:	03ec01a2 	mvneq	r0, #-2147483608	; 0x80000028
     334:	0c000000 	stceq	0, cr0, [r0], {-0}
     338:	000003de 	ldrdeq	r0, [r0], -lr
     33c:	f101a301 			; <UNDEFINED> instruction: 0xf101a301
     340:	20000003 	andcs	r0, r0, r3
     344:	000d630c 	andeq	r6, sp, ip, lsl #6
     348:	01a40100 			; <UNDEFINED> instruction: 0x01a40100
     34c:	000003ec 	andeq	r0, r0, ip, ror #7
     350:	00050c80 	andeq	r0, r5, r0, lsl #25
     354:	a5010000 	strge	r0, [r1, #-0]
     358:	0003f101 	andeq	pc, r3, r1, lsl #2
     35c:	bb0da000 	bllt	368364 <startup-0x1fc97c9c>
     360:	01000010 	tsteq	r0, r0, lsl r0
     364:	03ec01a6 	mvneq	r0, #-2147483607	; 0x80000029
     368:	01000000 	mrseq	r0, (UNDEF: 0)
     36c:	00046c0d 	andeq	r6, r4, sp, lsl #24
     370:	01a70100 			; <UNDEFINED> instruction: 0x01a70100
     374:	000003f1 	strdeq	r0, [r0], -r1
     378:	770d0120 	strvc	r0, [sp, -r0, lsr #2]
     37c:	01000001 	tsteq	r0, r1
     380:	03ec01a8 	mvneq	r0, #168, 2	; 0x2a
     384:	01800000 	orreq	r0, r0, r0
     388:	0004760d 	andeq	r7, r4, sp, lsl #12
     38c:	01a90100 			; <UNDEFINED> instruction: 0x01a90100
     390:	000003f1 	strdeq	r0, [r0], -r1
     394:	300d01a0 	andcc	r0, sp, r0, lsr #3
     398:	01000004 	tsteq	r0, r4
     39c:	03ec01aa 	mvneq	r0, #-2147483606	; 0x8000002a
     3a0:	02000000 	andeq	r0, r0, #0
     3a4:	0004120d 	andeq	r1, r4, sp, lsl #4
     3a8:	01ab0100 			; <UNDEFINED> instruction: 0x01ab0100
     3ac:	00000401 	andeq	r0, r0, r1, lsl #8
     3b0:	490e0220 	stmdbmi	lr, {r5, r9}
     3b4:	ac010050 	stcge	0, cr0, [r1], {80}	; 0x50
     3b8:	00042101 	andeq	r2, r4, r1, lsl #2
     3bc:	0d030000 	stceq	0, cr0, [r3, #-0]
     3c0:	0000041c 	andeq	r0, r0, ip, lsl r4
     3c4:	2601ad01 	strcs	sl, [r1], -r1, lsl #26
     3c8:	f0000004 			; <UNDEFINED> instruction: 0xf0000004
     3cc:	06c60d03 	strbeq	r0, [r6], r3, lsl #26
     3d0:	ae010000 	cdpge	0, 0, cr0, cr1, cr0, {0}
     3d4:	00031601 	andeq	r1, r3, r1, lsl #12
     3d8:	000e0000 	andeq	r0, lr, r0
     3dc:	0003160f 	andeq	r1, r3, pc, lsl #12
     3e0:	0003ec00 	andeq	lr, r3, r0, lsl #24
     3e4:	02ca1000 	sbceq	r1, sl, #0
     3e8:	00070000 	andeq	r0, r7, r0
     3ec:	0003dc09 	andeq	sp, r3, r9, lsl #24
     3f0:	030b0f00 	movweq	r0, #48896	; 0xbf00
     3f4:	04010000 	streq	r0, [r1], #-0
     3f8:	ca100000 	bgt	400400 <startup-0x1fbffc00>
     3fc:	17000002 	strne	r0, [r0, -r2]
     400:	030b0f00 	movweq	r0, #48896	; 0xbf00
     404:	04110000 	ldreq	r0, [r1], #-0
     408:	ca100000 	bgt	400410 <startup-0x1fbffbf0>
     40c:	37000002 	strcc	r0, [r0, -r2]
     410:	02dc0f00 	sbcseq	r0, ip, #0, 30
     414:	04210000 	strteq	r0, [r1], #-0
     418:	ca100000 	bgt	400420 <startup-0x1fbffbe0>
     41c:	ef000002 	svc	0x00000002
     420:	04110900 	ldreq	r0, [r1], #-2304	; 0xfffff700
     424:	0b0f0000 	bleq	3c042c <startup-0x1fc3fbd4>
     428:	37000003 	strcc	r0, [r0, -r3]
     42c:	11000004 	tstne	r0, r4
     430:	000002ca 	andeq	r0, r0, sl, asr #5
     434:	06000283 	streq	r0, [r0], -r3, lsl #5
     438:	00000c99 	muleq	r0, r9, ip
     43c:	2001af01 	andcs	sl, r1, r1, lsl #30
     440:	12000003 	andne	r0, r0, #3
     444:	01c0018c 	biceq	r0, r0, ip, lsl #3
     448:	0000055e 	andeq	r0, r0, lr, asr r5
     44c:	00023d0c 	andeq	r3, r2, ip, lsl #26
     450:	01c20100 	biceq	r0, r2, r0, lsl #2
     454:	0000031b 	andeq	r0, r0, fp, lsl r3
     458:	03660c00 	cmneq	r6, #0, 24
     45c:	c3010000 	movwgt	r0, #4096	; 0x1000
     460:	00031601 	andeq	r1, r3, r1, lsl #12
     464:	ac0c0400 	cfstrsge	mvf0, [ip], {-0}
     468:	01000000 	mrseq	r0, (UNDEF: 0)
     46c:	031601c4 	tsteq	r6, #196, 2	; 0x31
     470:	0c080000 	stceq	0, cr0, [r8], {-0}
     474:	0000020d 	andeq	r0, r0, sp, lsl #4
     478:	1601c501 	strne	ip, [r1], -r1, lsl #10
     47c:	0c000003 	stceq	0, cr0, [r0], {3}
     480:	52435313 	subpl	r5, r3, #1275068416	; 0x4c000000
     484:	01c60100 	biceq	r0, r6, r0, lsl #2
     488:	00000316 	andeq	r0, r0, r6, lsl r3
     48c:	43431310 	movtmi	r1, #13072	; 0x3310
     490:	c7010052 	smlsdgt	r1, r2, r0, r0
     494:	00031601 	andeq	r1, r3, r1, lsl #12
     498:	53131400 	tstpl	r3, #0, 8
     49c:	01005048 	tsteq	r0, r8, asr #32
     4a0:	056e01c8 	strbeq	r0, [lr, #-456]!	; 0xfffffe38
     4a4:	0c180000 	ldceq	0, cr0, [r8], {-0}
     4a8:	000006af 	andeq	r0, r0, pc, lsr #13
     4ac:	1601c901 	strne	ip, [r1], -r1, lsl #18
     4b0:	24000003 	strcs	r0, [r0], #-3
     4b4:	000e160c 	andeq	r1, lr, ip, lsl #12
     4b8:	01ca0100 	biceq	r0, sl, r0, lsl #2
     4bc:	00000316 	andeq	r0, r0, r6, lsl r3
     4c0:	058a0c28 	streq	r0, [sl, #3112]	; 0xc28
     4c4:	cb010000 	blgt	404cc <startup-0x1ffbfb34>
     4c8:	00031601 	andeq	r1, r3, r1, lsl #12
     4cc:	ba0c2c00 	blt	30b4d4 <startup-0x1fcf4b2c>
     4d0:	01000004 	tsteq	r0, r4
     4d4:	031601cc 	tsteq	r6, #204, 2	; 0x33
     4d8:	0c300000 	ldceq	0, cr0, [r0], #-0
     4dc:	00000eff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
     4e0:	1601cd01 	strne	ip, [r1], -r1, lsl #26
     4e4:	34000003 	strcc	r0, [r0], #-3
     4e8:	000b650c 	andeq	r6, fp, ip, lsl #10
     4ec:	01ce0100 	biceq	r0, lr, r0, lsl #2
     4f0:	00000316 	andeq	r0, r0, r6, lsl r3
     4f4:	0ddf0c38 	ldcleq	12, cr0, [pc, #224]	; 5dc <startup-0x1ffffa24>
     4f8:	cf010000 	svcgt	0x00010000
     4fc:	00031601 	andeq	r1, r3, r1, lsl #12
     500:	50133c00 	andspl	r3, r3, r0, lsl #24
     504:	01005246 	tsteq	r0, r6, asr #4
     508:	058801d0 	streq	r0, [r8, #464]	; 0x1d0
     50c:	13400000 	movtne	r0, #0
     510:	00524644 	subseq	r4, r2, r4, asr #12
     514:	1b01d101 	blne	74920 <startup-0x1ff8b6e0>
     518:	48000003 	stmdami	r0, {r0, r1}
     51c:	52444113 	subpl	r4, r4, #-1073741820	; 0xc0000004
     520:	01d20100 	bicseq	r0, r2, r0, lsl #2
     524:	0000031b 	andeq	r0, r0, fp, lsl r3
     528:	0eee0c4c 	cdpeq	12, 14, cr0, cr14, cr12, {2}
     52c:	d3010000 	movwle	r0, #4096	; 0x1000
     530:	0005a201 	andeq	sl, r5, r1, lsl #4
     534:	280c5000 	stmdacs	ip, {ip, lr}
     538:	0100000f 	tsteq	r0, pc
     53c:	05bc01d4 	ldreq	r0, [ip, #468]!	; 0x1d4
     540:	0c600000 	stcleq	0, cr0, [r0], #-0
     544:	000003de 	ldrdeq	r0, [r0], -lr
     548:	c101d501 	tstgt	r1, r1, lsl #10
     54c:	74000005 	strvc	r0, [r0], #-5
     550:	0010b50c 	andseq	fp, r0, ip, lsl #10
     554:	01d60100 	bicseq	r0, r6, r0, lsl #2
     558:	00000316 	andeq	r0, r0, r6, lsl r3
     55c:	dc0f0088 	stcle	0, cr0, [pc], {136}	; 0x88
     560:	6e000002 	cdpvs	0, 0, cr0, cr0, cr2, {0}
     564:	10000005 	andne	r0, r0, r5
     568:	000002ca 	andeq	r0, r0, sl, asr #5
     56c:	5e09000b 	cdppl	0, 0, cr0, cr9, cr11, {0}
     570:	0f000005 	svceq	0x00000005
     574:	0000031b 	andeq	r0, r0, fp, lsl r3
     578:	00000583 	andeq	r0, r0, r3, lsl #11
     57c:	0002ca10 	andeq	ip, r2, r0, lsl sl
     580:	0a000100 	beq	988 <startup-0x1ffff678>
     584:	00000573 	andeq	r0, r0, r3, ror r5
     588:	00058309 	andeq	r8, r5, r9, lsl #6
     58c:	031b0f00 	tsteq	fp, #0, 30
     590:	059d0000 	ldreq	r0, [sp]
     594:	ca100000 	bgt	40059c <startup-0x1fbffa64>
     598:	03000002 	movweq	r0, #2
     59c:	058d0a00 	streq	r0, [sp, #2560]	; 0xa00
     5a0:	9d090000 	stcls	0, cr0, [r9, #-0]
     5a4:	0f000005 	svceq	0x00000005
     5a8:	0000031b 	andeq	r0, r0, fp, lsl r3
     5ac:	000005b7 			; <UNDEFINED> instruction: 0x000005b7
     5b0:	0002ca10 	andeq	ip, r2, r0, lsl sl
     5b4:	0a000400 	beq	15bc <startup-0x1fffea44>
     5b8:	000005a7 	andeq	r0, r0, r7, lsr #11
     5bc:	0005b709 	andeq	fp, r5, r9, lsl #14
     5c0:	030b0f00 	movweq	r0, #48896	; 0xbf00
     5c4:	05d10000 	ldrbeq	r0, [r1]
     5c8:	ca100000 	bgt	4005d0 <startup-0x1fbffa30>
     5cc:	04000002 	streq	r0, [r0], #-2
     5d0:	04a00600 	strteq	r0, [r0], #1536	; 0x600
     5d4:	d7010000 	strle	r0, [r1, -r0]
     5d8:	00044301 	andeq	r4, r4, r1, lsl #6
     5dc:	01101200 	tsteq	r0, r0, lsl #4
     5e0:	061b02bf 			; <UNDEFINED> instruction: 0x061b02bf
     5e4:	c30c0000 	movwgt	r0, #49152	; 0xc000
     5e8:	0100000a 	tsteq	r0, sl
     5ec:	031602c1 	tsteq	r6, #268435468	; 0x1000000c
     5f0:	0c000000 	stceq	0, cr0, [r0], {-0}
     5f4:	00000e6a 	andeq	r0, r0, sl, ror #28
     5f8:	1602c201 	strne	ip, [r2], -r1, lsl #4
     5fc:	04000003 	streq	r0, [r0], #-3
     600:	4c415613 	mcrrmi	6, 1, r5, r1, cr3
     604:	02c30100 	sbceq	r0, r3, #0, 2
     608:	00000316 	andeq	r0, r0, r6, lsl r3
     60c:	0deb0c08 	stcleq	12, cr0, [fp, #32]!
     610:	c4010000 	strgt	r0, [r1], #-0
     614:	00031b02 	andeq	r1, r3, r2, lsl #22
     618:	06000c00 	streq	r0, [r0], -r0, lsl #24
     61c:	00000bf9 	strdeq	r0, [r0], -r9
     620:	dd02c501 	cfstr32le	mvfx12, [r2, #-4]
     624:	0f000005 	svceq	0x00000005
     628:	0000030b 	andeq	r0, r0, fp, lsl #6
     62c:	00000637 	andeq	r0, r0, r7, lsr r6
     630:	0002ca10 	andeq	ip, r2, r0, lsl sl
     634:	14000100 	strne	r0, [r0], #-256	; 0xffffff00
     638:	00000fa0 	andeq	r0, r0, r0, lsr #31
     63c:	0606fa01 	streq	pc, [r6], -r1, lsl #20
     640:	15000003 	strne	r0, [r0, #-3]
     644:	00000840 	andeq	r0, r0, r0, asr #16
     648:	030b3b07 	movweq	r3, #47879	; 0xbb07
     64c:	07160000 	ldreq	r0, [r6, -r0]
     650:	00027101 	andeq	r7, r2, r1, lsl #2
     654:	035d0400 	cmpeq	sp, #0, 8
     658:	00000669 	andeq	r0, r0, r9, ror #12
     65c:	00120604 	andseq	r0, r2, r4, lsl #12
     660:	53170000 	tstpl	r7, #0
     664:	01005445 	tsteq	r0, r5, asr #8
     668:	09ee0600 	stmibeq	lr!, {r9, sl}^
     66c:	5d040000 	stcpl	0, cr0, [r4, #-0]
     670:	00064e03 	andeq	r4, r6, r3, lsl #28
     674:	0aaf0600 	beq	febc1e7c <APBAHBPrescTable+0xdebbf6b0>
     678:	5d040000 	stcpl	0, cr0, [r4, #-0]
     67c:	00064e03 	andeq	r4, r6, r3, lsl #28
     680:	01071600 	tsteq	r7, r0, lsl #12
     684:	00000271 	andeq	r0, r0, r1, ror r2
     688:	9c035f04 	stcls	15, cr5, [r3], {4}
     68c:	04000006 	streq	r0, [r0], #-6
     690:	000009c4 	andeq	r0, r0, r4, asr #19
     694:	0f550400 	svceq	0x00550400
     698:	00010000 	andeq	r0, r1, r0
     69c:	000ca306 	andeq	sl, ip, r6, lsl #6
     6a0:	035f0400 	cmpeq	pc, #0, 8
     6a4:	00000681 	andeq	r0, r0, r1, lsl #13
     6a8:	71010716 	tstvc	r1, r6, lsl r7
     6ac:	04000002 	streq	r0, [r0], #-2
     6b0:	06c30362 	strbeq	r0, [r3], r2, ror #6
     6b4:	bc040000 	stclt	0, cr0, [r4], {-0}
     6b8:	00000008 	andeq	r0, r0, r8
     6bc:	000d2804 	andeq	r2, sp, r4, lsl #16
     6c0:	06000100 	streq	r0, [r0], -r0, lsl #2
     6c4:	00000c44 	andeq	r0, r0, r4, asr #24
     6c8:	a8036204 	stmdage	r3, {r2, r9, sp, lr}
     6cc:	12000006 	andne	r0, r0, #6
     6d0:	05c30428 	strbeq	r0, [r3, #1064]	; 0x428
     6d4:	0000075b 	andeq	r0, r0, fp, asr r7
     6d8:	00100a0c 	andseq	r0, r0, ip, lsl #20
     6dc:	05c50400 	strbeq	r0, [r5, #1024]	; 0x400
     6e0:	00000316 	andeq	r0, r0, r6, lsl r3
     6e4:	0de40c00 	stcleq	12, cr0, [r4]
     6e8:	c6040000 	strgt	r0, [r4], -r0
     6ec:	00031605 	andeq	r1, r3, r5, lsl #12
     6f0:	e70c0400 	str	r0, [ip, -r0, lsl #8]
     6f4:	04000008 	streq	r0, [r0], #-8
     6f8:	031605c7 	tsteq	r6, #834666496	; 0x31c00000
     6fc:	0c080000 	stceq	0, cr0, [r8], {-0}
     700:	000009ae 	andeq	r0, r0, lr, lsr #19
     704:	1605c804 	strne	ip, [r5], -r4, lsl #16
     708:	0c000003 	stceq	0, cr0, [r0], {3}
     70c:	52444913 	subpl	r4, r4, #311296	; 0x4c000
     710:	05c90400 	strbeq	r0, [r9, #1024]	; 0x400
     714:	00000316 	andeq	r0, r0, r6, lsl r3
     718:	444f1310 	strbmi	r1, [pc], #-784	; 720 <startup-0x1ffff8e0>
     71c:	ca040052 	bgt	10086c <startup-0x1feff794>
     720:	00031605 	andeq	r1, r3, r5, lsl #12
     724:	040c1400 	streq	r1, [ip], #-1024	; 0xfffffc00
     728:	0400000a 	streq	r0, [r0], #-10
     72c:	02f605cb 	rscseq	r0, r6, #851443712	; 0x32c00000
     730:	0c180000 	ldceq	0, cr0, [r8], {-0}
     734:	000009e1 	andeq	r0, r0, r1, ror #19
     738:	f605cc04 			; <UNDEFINED> instruction: 0xf605cc04
     73c:	1a000002 	bne	74c <startup-0x1ffff8b4>
     740:	0008a60c 	andeq	sl, r8, ip, lsl #12
     744:	05cd0400 	strbeq	r0, [sp, #1024]	; 0x400
     748:	00000316 	andeq	r0, r0, r6, lsl r3
     74c:	4641131c 			; <UNDEFINED> instruction: 0x4641131c
     750:	ce040052 	mcrgt	0, 0, r0, cr4, cr2, {2}
     754:	00076b05 	andeq	r6, r7, r5, lsl #22
     758:	0f002000 	svceq	0x00002000
     75c:	00000316 	andeq	r0, r0, r6, lsl r3
     760:	0000076b 	andeq	r0, r0, fp, ror #14
     764:	0002ca10 	andeq	ip, r2, r0, lsl sl
     768:	09000100 	stmdbeq	r0, {r8}
     76c:	0000075b 	andeq	r0, r0, fp, asr r7
     770:	000f8006 	andeq	r8, pc, r6
     774:	05cf0400 	strbeq	r0, [pc, #1024]	; b7c <startup-0x1ffff484>
     778:	000006cf 	andeq	r0, r0, pc, asr #13
     77c:	64049812 	strvs	r9, [r4], #-2066	; 0xfffff7ee
     780:	00093f06 	andeq	r3, r9, r6, lsl #30
     784:	52431300 	subpl	r1, r3, #0, 6
     788:	06660400 	strbteq	r0, [r6], -r0, lsl #8
     78c:	00000316 	andeq	r0, r0, r6, lsl r3
     790:	09030c00 	stmdbeq	r3, {sl, fp}
     794:	67040000 	strvs	r0, [r4, -r0]
     798:	00031606 	andeq	r1, r3, r6, lsl #12
     79c:	5e0c0400 	cfcpyspl	mvf0, mvf12
     7a0:	04000010 	streq	r0, [r0], #-16
     7a4:	03160668 	tsteq	r6, #104, 12	; 0x6800000
     7a8:	13080000 	movwne	r0, #32768	; 0x8000
     7ac:	00524943 	subseq	r4, r2, r3, asr #18
     7b0:	16066904 	strne	r6, [r6], -r4, lsl #18
     7b4:	0c000003 	stceq	0, cr0, [r0], {3}
     7b8:	0004bf0c 	andeq	fp, r4, ip, lsl #30
     7bc:	066a0400 	strbteq	r0, [sl], -r0, lsl #8
     7c0:	00000316 	andeq	r0, r0, r6, lsl r3
     7c4:	0eca0c10 	mcreq	12, 6, r0, cr10, cr0, {0}
     7c8:	6b040000 	blvs	1007d0 <startup-0x1feff830>
     7cc:	00031606 	andeq	r1, r3, r6, lsl #12
     7d0:	360c1400 	strcc	r1, [ip], -r0, lsl #8
     7d4:	0400000c 	streq	r0, [r0], #-12
     7d8:	0316066c 	tsteq	r6, #108, 12	; 0x6c00000
     7dc:	0c180000 	ldceq	0, cr0, [r8], {-0}
     7e0:	000003de 	ldrdeq	r0, [r0], -lr
     7e4:	0b066d04 	bleq	19bbfc <startup-0x1fe64404>
     7e8:	1c000003 	stcne	0, cr0, [r0], {3}
     7ec:	000c790c 	andeq	r7, ip, ip, lsl #18
     7f0:	066e0400 	strbteq	r0, [lr], -r0, lsl #8
     7f4:	00000316 	andeq	r0, r0, r6, lsl r3
     7f8:	09d80c20 	ldmibeq	r8, {r5, sl, fp}^
     7fc:	6f040000 	svcvs	0x00040000
     800:	00031606 	andeq	r1, r3, r6, lsl #12
     804:	e80c2400 	stmda	ip, {sl, sp}
     808:	04000003 	streq	r0, [r0], #-3
     80c:	06270670 			; <UNDEFINED> instruction: 0x06270670
     810:	0c280000 	stceq	0, cr0, [r8], #-0
     814:	00000e62 	andeq	r0, r0, r2, ror #28
     818:	16067104 	strne	r7, [r6], -r4, lsl #2
     81c:	30000003 	andcc	r0, r0, r3
     820:	0005120c 	andeq	r1, r5, ip, lsl #4
     824:	06720400 	ldrbteq	r0, [r2], -r0, lsl #8
     828:	00000316 	andeq	r0, r0, r6, lsl r3
     82c:	116d0c34 	cmnne	sp, r4, lsr ip
     830:	73040000 	movwvc	r0, #16384	; 0x4000
     834:	00031606 	andeq	r1, r3, r6, lsl #12
     838:	6c0c3800 	stcvs	8, cr3, [ip], {-0}
     83c:	04000004 	streq	r0, [r0], #-4
     840:	030b0674 	movweq	r0, #46708	; 0xb674
     844:	0c3c0000 	ldceq	0, cr0, [ip], #-0
     848:	00000c91 	muleq	r0, r1, ip
     84c:	16067504 	strne	r7, [r6], -r4, lsl #10
     850:	40000003 	andmi	r0, r0, r3
     854:	0003010c 	andeq	r0, r3, ip, lsl #2
     858:	06760400 	ldrbteq	r0, [r6], -r0, lsl #8
     85c:	00000316 	andeq	r0, r0, r6, lsl r3
     860:	04760c44 	ldrbteq	r0, [r6], #-3140	; 0xfffff3bc
     864:	77040000 	strvc	r0, [r4, -r0]
     868:	00062706 	andeq	r2, r6, r6, lsl #14
     86c:	1d0c4800 	stcne	8, cr4, [ip, #-0]
     870:	04000003 	streq	r0, [r0], #-3
     874:	03160678 	tsteq	r6, #120, 12	; 0x7800000
     878:	0c500000 	mraeq	r0, r0, acc0
     87c:	000001f4 	strdeq	r0, [r0], -r4
     880:	16067904 	strne	r7, [r6], -r4, lsl #18
     884:	54000003 	strpl	r0, [r0], #-3
     888:	000d680c 	andeq	r6, sp, ip, lsl #16
     88c:	067a0400 	ldrbteq	r0, [sl], -r0, lsl #8
     890:	00000316 	andeq	r0, r0, r6, lsl r3
     894:	04120c58 	ldreq	r0, [r2], #-3160	; 0xfffff3a8
     898:	7b040000 	blvc	1008a0 <startup-0x1feff760>
     89c:	00030b06 	andeq	r0, r3, r6, lsl #22
     8a0:	6a0c5c00 	bvs	3178a8 <startup-0x1fce8758>
     8a4:	0400000b 	streq	r0, [r0], #-11
     8a8:	0316067c 	tsteq	r6, #124, 12	; 0x7c00000
     8ac:	0c600000 	stcleq	0, cr0, [r0], #-0
     8b0:	00000a64 	andeq	r0, r0, r4, ror #20
     8b4:	16067d04 	strne	r7, [r6], -r4, lsl #26
     8b8:	64000003 	strvs	r0, [r0], #-3
     8bc:	00041c0c 	andeq	r1, r4, ip, lsl #24
     8c0:	067e0400 	ldrbteq	r0, [lr], -r0, lsl #8
     8c4:	00000627 	andeq	r0, r0, r7, lsr #12
     8c8:	06aa0c68 	strteq	r0, [sl], r8, ror #24
     8cc:	7f040000 	svcvc	0x00040000
     8d0:	00031606 	andeq	r1, r3, r6, lsl #12
     8d4:	43137000 	tstmi	r3, #0
     8d8:	04005253 	streq	r5, [r0], #-595	; 0xfffffdad
     8dc:	03160680 	tsteq	r6, #128, 12	; 0x8000000
     8e0:	0c740000 	ldcleq	0, cr0, [r4], #-0
     8e4:	00000426 	andeq	r0, r0, r6, lsr #8
     8e8:	27068104 	strcs	r8, [r6, -r4, lsl #2]
     8ec:	78000006 	stmdavc	r0, {r1, r2}
     8f0:	0009b40c 	andeq	fp, r9, ip, lsl #8
     8f4:	06820400 	streq	r0, [r2], r0, lsl #8
     8f8:	00000316 	andeq	r0, r0, r6, lsl r3
     8fc:	004c0c80 	subeq	r0, ip, r0, lsl #25
     900:	83040000 	movwhi	r0, #16384	; 0x4000
     904:	00031606 	andeq	r1, r3, r6, lsl #12
     908:	580c8400 	stmdapl	ip, {sl, pc}
     90c:	04000010 	streq	r0, [r0], #-16
     910:	03160684 	tsteq	r6, #132, 12	; 0x8400000
     914:	0c880000 	stceq	0, cr0, [r8], {0}
     918:	0000035e 	andeq	r0, r0, lr, asr r3
     91c:	16068504 	strne	r8, [r6], -r4, lsl #10
     920:	8c000003 	stchi	0, cr0, [r0], {3}
     924:	000ba50c 	andeq	sl, fp, ip, lsl #10
     928:	06860400 	streq	r0, [r6], r0, lsl #8
     92c:	00000316 	andeq	r0, r0, r6, lsl r3
     930:	0e0d0c90 	mcreq	12, 0, r0, cr13, cr0, {4}
     934:	87040000 	strhi	r0, [r4, -r0]
     938:	00031606 	andeq	r1, r3, r6, lsl #12
     93c:	06009400 	streq	r9, [r0], -r0, lsl #8
     940:	00000ef3 	strdeq	r0, [r0], -r3
     944:	7c068904 			; <UNDEFINED> instruction: 0x7c068904
     948:	18000007 	stmdane	r0, {r0, r1, r2}
     94c:	84300810 	ldrthi	r0, [r0], #-2064	; 0xfffff7f0
     950:	19000009 	stmdbne	r0, {r0, r3}
     954:	000010c0 	andeq	r1, r0, r0, asr #1
     958:	030b3208 	movweq	r3, #45576	; 0xb208
     95c:	19000000 	stmdbne	r0, {}	; <UNPREDICTABLE>
     960:	0000008c 	andeq	r0, r0, ip, lsl #1
     964:	030b3308 	movweq	r3, #45832	; 0xb308
     968:	19040000 	stmdbne	r4, {}	; <UNPREDICTABLE>
     96c:	000005a4 	andeq	r0, r0, r4, lsr #11
     970:	030b3408 	movweq	r3, #46088	; 0xb408
     974:	19080000 	stmdbne	r8, {}	; <UNPREDICTABLE>
     978:	0000051a 	andeq	r0, r0, sl, lsl r5
     97c:	030b3508 	movweq	r3, #46344	; 0xb508
     980:	000c0000 	andeq	r0, ip, r0
     984:	000edc07 	andeq	sp, lr, r7, lsl #24
     988:	4b360800 	blmi	d82990 <startup-0x1f27d670>
     98c:	0f000009 	svceq	0x00000009
     990:	000002e6 	andeq	r0, r0, r6, ror #5
     994:	0000099f 	muleq	r0, pc, r9	; <UNPREDICTABLE>
     998:	0002ca10 	andeq	ip, r2, r0, lsl sl
     99c:	0a000f00 	beq	45a4 <startup-0x1fffba5c>
     9a0:	0000098f 	andeq	r0, r0, pc, lsl #19
     9a4:	00099f09 	andeq	r9, r9, r9, lsl #30
     9a8:	093f1a00 	ldmdbeq	pc!, {r9, fp, ip}	; <UNPREDICTABLE>
     9ac:	99020000 	stmdbls	r2, {}	; <UNPREDICTABLE>
     9b0:	000009a4 	andeq	r0, r0, r4, lsr #19
     9b4:	27cc0305 	strbcs	r0, [ip, r5, lsl #6]
     9b8:	071b2000 	ldreq	r2, [fp, -r0]
     9bc:	00027101 	andeq	r7, r2, r1, lsl #2
     9c0:	e0420900 	sub	r0, r2, r0, lsl #18
     9c4:	04000009 	streq	r0, [r0], #-9
     9c8:	00000878 	andeq	r0, r0, r8, ror r8
     9cc:	070f0400 	streq	r0, [pc, -r0, lsl #8]
     9d0:	04010000 	streq	r0, [r1], #-0
     9d4:	0000027a 	andeq	r0, r0, sl, ror r2
     9d8:	02b60402 	adcseq	r0, r6, #33554432	; 0x2000000
     9dc:	00030000 	andeq	r0, r3, r0
     9e0:	000d7207 	andeq	r7, sp, r7, lsl #4
     9e4:	ba470900 	blt	11c2dec <startup-0x1ee3d214>
     9e8:	1b000009 	blne	a14 <startup-0x1ffff5ec>
     9ec:	02710107 	rsbseq	r0, r1, #-1073741823	; 0xc0000001
     9f0:	4f090000 	svcmi	0x00090000
     9f4:	00000a05 	andeq	r0, r0, r5, lsl #20
     9f8:	00043504 	andeq	r3, r4, r4, lsl #10
     9fc:	77040000 	strvc	r0, [r4, -r0]
     a00:	01000003 	tsteq	r0, r3
     a04:	01130700 	tsteq	r3, r0, lsl #14
     a08:	52090000 	andpl	r0, r9, #0
     a0c:	000009eb 	andeq	r0, r0, fp, ror #19
     a10:	7101071b 	tstvc	r1, fp, lsl r7
     a14:	09000002 	stmdbeq	r0, {r1}
     a18:	000a365a 	andeq	r3, sl, sl, asr r6
     a1c:	052a0400 	streq	r0, [sl, #-1024]!	; 0xfffffc00
     a20:	04000000 	streq	r0, [r0], #-0
     a24:	00000950 	andeq	r0, r0, r0, asr r9
     a28:	11980401 	orrsne	r0, r8, r1, lsl #8
     a2c:	04020000 	streq	r0, [r2], #-0
     a30:	00000a0a 	andeq	r0, r0, sl, lsl #20
     a34:	6f070003 	svcvs	0x00070003
     a38:	0900000e 	stmdbeq	r0, {r1, r2, r3}
     a3c:	000a105f 	andeq	r1, sl, pc, asr r0
     a40:	01071b00 	tsteq	r7, r0, lsl #22
     a44:	00000271 	andeq	r0, r0, r1, ror r2
     a48:	0a616e09 	beq	185c274 <startup-0x1e7a3d8c>
     a4c:	9b040000 	blls	100a54 <startup-0x1feff5ac>
     a50:	00000000 	andeq	r0, r0, r0
     a54:	00103e04 	andseq	r3, r0, r4, lsl #28
     a58:	fe040100 	cdp2	1, 0, cr0, cr4, cr0, {0}
     a5c:	02000001 	andeq	r0, r0, #1
     a60:	04a90700 	strteq	r0, [r9], #1792	; 0x700
     a64:	72090000 	andvc	r0, r9, #0
     a68:	00000a41 	andeq	r0, r0, r1, asr #20
     a6c:	84090818 	strhi	r0, [r9], #-2072	; 0xfffff7e8
     a70:	00000ab1 			; <UNDEFINED> instruction: 0x00000ab1
     a74:	000e9319 	andeq	r9, lr, r9, lsl r3
     a78:	0b860900 	bleq	fe182e80 <APBAHBPrescTable+0xde1806b4>
     a7c:	00000003 	andeq	r0, r0, r3
     a80:	000d3019 	andeq	r3, sp, r9, lsl r0
     a84:	e0890900 	add	r0, r9, r0, lsl #18
     a88:	04000009 	streq	r0, [r0], #-9
     a8c:	000adf19 	andeq	sp, sl, r9, lsl pc
     a90:	368c0900 	strcc	r0, [ip], r0, lsl #18
     a94:	0500000a 	streq	r0, [r0, #-10]
     a98:	00092919 	andeq	r2, r9, r9, lsl r9
     a9c:	058f0900 	streq	r0, [pc, #2304]	; 13a4 <startup-0x1fffec5c>
     aa0:	0600000a 	streq	r0, [r0], -sl
     aa4:	000ec019 	andeq	ip, lr, r9, lsl r0
     aa8:	61920900 	orrsvs	r0, r2, r0, lsl #18
     aac:	0700000a 	streq	r0, [r0, -sl]
     ab0:	03850700 	orreq	r0, r5, #0, 14
     ab4:	94090000 	strls	r0, [r9], #-0
     ab8:	00000a6c 	andeq	r0, r0, ip, ror #20
     abc:	000c3f1c 	andeq	r3, ip, ip, lsl pc
     ac0:	010a1c00 	tsteq	sl, r0, lsl #24
     ac4:	00000b28 	andeq	r0, r0, r8, lsr #22
     ac8:	0064691d 	rsbeq	r6, r4, sp, lsl r9
     acc:	0b28030a 	bleq	a016fc <startup-0x1f5fe904>
     ad0:	19000000 	stmdbne	r0, {}	; <UNPREDICTABLE>
     ad4:	000002d3 	ldrdeq	r0, [r0], -r3
     ad8:	02c3040a 	sbceq	r0, r3, #167772160	; 0xa000000
     adc:	19040000 	stmdbne	r4, {}	; <UNPREDICTABLE>
     ae0:	000001c2 	andeq	r0, r0, r2, asr #3
     ae4:	0b28050a 	bleq	a01f14 <startup-0x1f5fe0ec>
     ae8:	19080000 	stmdbne	r8, {}	; <UNPREDICTABLE>
     aec:	00000c06 	andeq	r0, r0, r6, lsl #24
     af0:	0b28060a 	bleq	a02320 <startup-0x1f5fdce0>
     af4:	19090000 	stmdbne	r9, {}	; <UNPREDICTABLE>
     af8:	00000f0f 	andeq	r0, r0, pc, lsl #30
     afc:	02c3070a 	sbceq	r0, r3, #2621440	; 0x280000
     b00:	190c0000 	stmdbne	ip, {}	; <UNPREDICTABLE>
     b04:	00000e46 	andeq	r0, r0, r6, asr #28
     b08:	02c3080a 	sbceq	r0, r3, #655360	; 0xa0000
     b0c:	19100000 	ldmdbne	r0, {}	; <UNPREDICTABLE>
     b10:	0000058f 	andeq	r0, r0, pc, lsl #11
     b14:	02c3090a 	sbceq	r0, r3, #163840	; 0x28000
     b18:	19140000 	ldmdbne	r4, {}	; <UNPREDICTABLE>
     b1c:	00000ff3 	strdeq	r0, [r0], -r3
     b20:	02c30a0a 	sbceq	r0, r3, #40960	; 0xa000
     b24:	00180000 	andseq	r0, r8, r0
     b28:	fb080105 	blx	200f46 <startup-0x1fdff0ba>
     b2c:	07000003 	streq	r0, [r0, -r3]
     b30:	00000c3f 	andeq	r0, r0, pc, lsr ip
     b34:	0abc0b0a 	beq	fef03764 <APBAHBPrescTable+0xdef00f98>
     b38:	cf1e0000 	svcgt	0x001e0000
     b3c:	03000008 	movweq	r0, #8
     b40:	0003161d 	andeq	r1, r3, sp, lsl r6
     b44:	f0030500 			; <UNDEFINED> instruction: 0xf0030500
     b48:	1f200026 	svcne	0x00200026
     b4c:	00000fda 	ldrdeq	r0, [r0], -sl
     b50:	0e5c4603 	cdpeq	6, 5, cr4, cr12, cr3, {0}
     b54:	02802000 	addeq	r2, r0, #0
     b58:	9c010000 	stcls	0, cr0, [r1], {-0}
     b5c:	00000bd7 	ldrdeq	r0, [r0], -r7
     b60:	0010e81a 	andseq	lr, r0, sl, lsl r8
     b64:	2f4c0300 	svccs	0x004c0300
     b68:	0200000b 	andeq	r0, r0, #11
     b6c:	ee1a4491 	cfcmps	r4, mvf10, mvf1
     b70:	03000010 	movweq	r0, #16
     b74:	000b2f4d 	andeq	r2, fp, sp, asr #30
     b78:	a8910300 	ldmge	r1, {r8, r9}
     b7c:	10f41a7f 	rscsne	r1, r4, pc, ror sl
     b80:	4e030000 	cdpmi	0, 0, cr0, cr3, cr0, {0}
     b84:	00000b2f 	andeq	r0, r0, pc, lsr #22
     b88:	7f8c9103 	svcvc	0x008c9103
     b8c:	00049a1a 	andeq	r9, r4, sl, lsl sl
     b90:	2f4f0300 	svccs	0x004f0300
     b94:	0300000b 	movweq	r0, #11
     b98:	1a7ef091 	bne	1fbcde4 <startup-0x1e04321c>
     b9c:	00000b86 	andeq	r0, r0, r6, lsl #23
     ba0:	0bd75103 	bleq	ff5d4fb4 <APBAHBPrescTable+0xdf5d27e8>
     ba4:	91030000 	mrsls	r0, (UNDEF: 3)
     ba8:	fc207e80 	stc2	14, cr7, [r0], #-512	; 0xfffffe00
     bac:	be20000e 	cdplt	0, 2, cr0, cr0, cr14, {0}
     bb0:	21000001 	tstcs	r0, r1
     bb4:	55030069 	strpl	r0, [r3, #-105]	; 0xffffff97
     bb8:	000002c3 	andeq	r0, r0, r3, asr #5
     bbc:	20649102 	rsbcs	r9, r4, r2, lsl #2
     bc0:	20000fc4 	andcs	r0, r0, r4, asr #31
     bc4:	000000de 	ldrdeq	r0, [r0], -lr
     bc8:	03006921 	movweq	r6, #2337	; 0x921
     bcc:	0002c363 	andeq	ip, r2, r3, ror #6
     bd0:	60910200 	addsvs	r0, r1, r0, lsl #4
     bd4:	0f000000 	svceq	0x00000000
     bd8:	00000b2f 	andeq	r0, r0, pc, lsr #22
     bdc:	00000be7 	andeq	r0, r0, r7, ror #23
     be0:	0002ca10 	andeq	ip, r2, r0, lsl sl
     be4:	1f000300 	svcne	0x00000300
     be8:	00000b3f 	andeq	r0, r0, pc, lsr fp
     bec:	0e303903 	vaddeq.f16	s6, s0, s6	; <UNPREDICTABLE>
     bf0:	002c2000 	eoreq	r2, ip, r0
     bf4:	9c010000 	stcls	0, cr0, [r1], {-0}
     bf8:	00000c0b 	andeq	r0, r0, fp, lsl #24
     bfc:	0004df1a 	andeq	sp, r4, sl, lsl pc
     c00:	0b3d0300 	bleq	f41808 <startup-0x1f0be7f8>
     c04:	02000003 	andeq	r0, r0, #3
     c08:	22007491 	andcs	r7, r0, #-1862270976	; 0x91000000
     c0c:	00000243 	andeq	r0, r0, r3, asr #4
     c10:	0e183403 	cfmulseq	mvf3, mvf8, mvf3
     c14:	00182000 	andseq	r2, r8, r0
     c18:	9c010000 	stcls	0, cr0, [r1], {-0}
     c1c:	00022d23 	andeq	r2, r2, r3, lsr #26
     c20:	b2210300 	eorlt	r0, r1, #0, 6
     c24:	6620000d 	strtvs	r0, [r0], -sp
     c28:	01000000 	mrseq	r0, (UNDEF: 0)
     c2c:	000c409c 	muleq	ip, ip, r0
     c30:	00ca1a00 	sbceq	r1, sl, r0, lsl #20
     c34:	24030000 	strcs	r0, [r3], #-0
     c38:	00000ab1 			; <UNDEFINED> instruction: 0x00000ab1
     c3c:	00709102 	rsbseq	r9, r0, r2, lsl #2
     c40:	0000c622 	andeq	ip, r0, r2, lsr #12
     c44:	a81e0300 	ldmdage	lr, {r8, r9}
     c48:	0a20000d 	beq	800c84 <startup-0x1f7ff37c>
     c4c:	01000000 	mrseq	r0, (UNDEF: 0)
     c50:	0c62229c 	sfmeq	f2, 2, [r2], #-624	; 0xfffffd90
     c54:	13030000 	movwne	r0, #12288	; 0x3000
     c58:	20000000 	andcs	r0, r0, r0
     c5c:	0000000c 	andeq	r0, r0, ip
     c60:	f7249c01 			; <UNDEFINED> instruction: 0xf7249c01
     c64:	0200000a 	andeq	r0, r0, #10
     c68:	0d880c5e 	stceq	12, cr0, [r8, #376]	; 0x178
     c6c:	00202000 	eoreq	r2, r0, r0
     c70:	9c010000 	stcls	0, cr0, [r1], {-0}
     c74:	00000c88 	andeq	r0, r0, r8, lsl #25
     c78:	000f2125 	andeq	r2, pc, r5, lsr #2
     c7c:	0c5e0200 	lfmeq	f0, 2, [lr], {-0}
     c80:	000002d1 	ldrdeq	r0, [r0], -r1
     c84:	00779102 	rsbseq	r9, r7, r2, lsl #2
     c88:	000aa826 	andeq	sl, sl, r6, lsr #16
     c8c:	0c3c0200 	lfmeq	f0, 4, [ip], #-0
     c90:	00000675 	andeq	r0, r0, r5, ror r6
     c94:	20000d44 	andcs	r0, r0, r4, asr #26
     c98:	00000044 	andeq	r0, r0, r4, asr #32
     c9c:	0cc19c01 	stcleq	12, cr9, [r1], {1}
     ca0:	21250000 			; <UNDEFINED> instruction: 0x21250000
     ca4:	0200000f 	andeq	r0, r0, #15
     ca8:	02d10c3c 	sbcseq	r0, r1, #60, 24	; 0x3c00
     cac:	91020000 	mrsls	r0, (UNDEF: 2)
     cb0:	0f4b276f 	svceq	0x004b276f
     cb4:	3e020000 	cdpcc	0, 0, cr0, cr2, cr0, {0}
     cb8:	0006750c 	andeq	r7, r6, ip, lsl #10
     cbc:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
     cc0:	068e2800 	streq	r2, [lr], r0, lsl #16
     cc4:	28020000 	stmdacs	r2, {}	; <UNPREDICTABLE>
     cc8:	000d280c 	andeq	r2, sp, ip, lsl #16
     ccc:	00001c20 	andeq	r1, r0, r0, lsr #24
     cd0:	269c0100 	ldrcs	r0, [ip], r0, lsl #2
     cd4:	000009e7 	andeq	r0, r0, r7, ror #19
     cd8:	690bfb02 	stmdbvs	fp, {r1, r8, r9, fp, ip, sp, lr, pc}
     cdc:	a4000006 	strge	r0, [r0], #-6
     ce0:	8420000c 	strthi	r0, [r0], #-12
     ce4:	01000000 	mrseq	r0, (UNDEF: 0)
     ce8:	000d2a9c 	muleq	sp, ip, sl
     cec:	0a9f2500 	beq	fe7ca0f4 <APBAHBPrescTable+0xde7c7928>
     cf0:	fb020000 	blx	80cfa <startup-0x1ff7f306>
     cf4:	0002d10b 	andeq	sp, r2, fp, lsl #2
     cf8:	67910200 	ldrvs	r0, [r1, r0, lsl #4]
     cfc:	706d7429 	rsbvc	r7, sp, r9, lsr #8
     d00:	0bfd0200 	bleq	fff41508 <APBAHBPrescTable+0xdff3ed3c>
     d04:	0000030b 	andeq	r0, r0, fp, lsl #6
     d08:	276c9102 	strbcs	r9, [ip, -r2, lsl #2]!
     d0c:	00000b4c 	andeq	r0, r0, ip, asr #22
     d10:	0b0bfe02 	bleq	300520 <startup-0x1fcffae0>
     d14:	02000003 	andeq	r0, r0, #3
     d18:	4b277491 	blmi	9ddf64 <startup-0x1f62209c>
     d1c:	0200000f 	andeq	r0, r0, #15
     d20:	06690bff 			; <UNDEFINED> instruction: 0x06690bff
     d24:	91020000 	mrsls	r0, (UNDEF: 2)
     d28:	1a240073 	bne	900efc <startup-0x1f6ff104>
     d2c:	0200000a 	andeq	r0, r0, #10
     d30:	0c540bd6 	mrrceq	11, 13, r0, r4, cr6
     d34:	00502000 	subseq	r2, r0, r0
     d38:	9c010000 	stcls	0, cr0, [r1], {-0}
     d3c:	00000d5f 	andeq	r0, r0, pc, asr sp
     d40:	000f2125 	andeq	r2, pc, r5, lsr #2
     d44:	0bd60200 	bleq	ff58154c <APBAHBPrescTable+0xdf57ed80>
     d48:	000002d1 	ldrdeq	r0, [r0], -r1
     d4c:	25779102 	ldrbcs	r9, [r7, #-258]!	; 0xfffffefe
     d50:	00000ad6 	ldrdeq	r0, [r0], -r6
     d54:	9c0bd602 	stcls	6, cr13, [fp], {2}
     d58:	02000006 	andeq	r0, r0, #6
     d5c:	24007691 	strcs	r7, [r0], #-1681	; 0xfffff96f
     d60:	00000d51 	andeq	r0, r0, r1, asr sp
     d64:	180a9e02 	stmdane	sl, {r1, r9, sl, fp, ip, pc}
     d68:	3c20000c 	stccc	0, cr0, [r0], #-48	; 0xffffffd0
     d6c:	01000000 	mrseq	r0, (UNDEF: 0)
     d70:	000d859c 	muleq	sp, ip, r5
     d74:	013c2500 	teqeq	ip, r0, lsl #10
     d78:	9e020000 	cdpls	0, 0, cr0, cr2, cr0, {0}
     d7c:	0002d10a 	andeq	sp, r2, sl, lsl #2
     d80:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
     d84:	00d92400 	sbcseq	r2, r9, r0, lsl #8
     d88:	86020000 	strhi	r0, [r2], -r0
     d8c:	000bd80a 	andeq	sp, fp, sl, lsl #16
     d90:	00004020 	andeq	r4, r0, r0, lsr #32
     d94:	ba9c0100 	blt	fe70119c <APBAHBPrescTable+0xde6fe9d0>
     d98:	2500000d 	strcs	r0, [r0, #-13]
     d9c:	00000b56 	andeq	r0, r0, r6, asr fp
     da0:	0b0a8602 	bleq	2a25b0 <startup-0x1fd5da50>
     da4:	02000003 	andeq	r0, r0, #3
     da8:	d6257491 			; <UNDEFINED> instruction: 0xd6257491
     dac:	0200000a 	andeq	r0, r0, #10
     db0:	069c0a86 	ldreq	r0, [ip], r6, lsl #21
     db4:	91020000 	mrsls	r0, (UNDEF: 2)
     db8:	63240073 			; <UNDEFINED> instruction: 0x63240073
     dbc:	0200000f 	andeq	r0, r0, #15
     dc0:	0b980a52 	bleq	fe603710 <APBAHBPrescTable+0xde600f44>
     dc4:	00402000 	subeq	r2, r0, r0
     dc8:	9c010000 	stcls	0, cr0, [r1], {-0}
     dcc:	00000def 	andeq	r0, r0, pc, ror #27
     dd0:	000a6e25 	andeq	r6, sl, r5, lsr #28
     dd4:	0a520200 	beq	14815dc <startup-0x1eb7ea24>
     dd8:	0000030b 	andeq	r0, r0, fp, lsl #6
     ddc:	25749102 	ldrbcs	r9, [r4, #-258]!	; 0xfffffefe
     de0:	00000ad6 	ldrdeq	r0, [r0], -r6
     de4:	9c0a5202 	sfmls	f5, 4, [sl], {2}
     de8:	02000006 	andeq	r0, r0, #6
     dec:	24007391 	strcs	r7, [r0], #-913	; 0xfffffc6f
     df0:	000004ea 	andeq	r0, r0, sl, ror #9
     df4:	580a1902 	stmdapl	sl, {r1, r8, fp, ip}
     df8:	4020000b 	eormi	r0, r0, fp
     dfc:	01000000 	mrseq	r0, (UNDEF: 0)
     e00:	000e249c 	muleq	lr, ip, r4
     e04:	03432500 	movteq	r2, #13568	; 0x3500
     e08:	19020000 	stmdbne	r2, {}	; <UNPREDICTABLE>
     e0c:	00030b0a 	andeq	r0, r3, sl, lsl #22
     e10:	74910200 	ldrvc	r0, [r1], #512	; 0x200
     e14:	000ad625 	andeq	sp, sl, r5, lsr #12
     e18:	0a190200 	beq	641620 <startup-0x1f9be9e0>
     e1c:	0000069c 	muleq	r0, ip, r6
     e20:	00739102 	rsbseq	r9, r3, r2, lsl #2
     e24:	0000f624 	andeq	pc, r0, r4, lsr #12
     e28:	09fb0200 	ldmibeq	fp!, {r9}^
     e2c:	20000b18 	andcs	r0, r0, r8, lsl fp
     e30:	00000040 	andeq	r0, r0, r0, asr #32
     e34:	0e599c01 	cdpeq	12, 5, cr9, cr9, cr1, {0}
     e38:	2f250000 	svccs	0x00250000
     e3c:	02000010 	andeq	r0, r0, #16
     e40:	030b09fb 	movweq	r0, #47611	; 0xb9fb
     e44:	91020000 	mrsls	r0, (UNDEF: 2)
     e48:	0ad62574 	beq	ff58a420 <APBAHBPrescTable+0xdf587c54>
     e4c:	fb020000 	blx	80e56 <startup-0x1ff7f1aa>
     e50:	00069c09 	andeq	r9, r6, r9, lsl #24
     e54:	73910200 	orrsvc	r0, r1, #0, 4
     e58:	0fb52400 	svceq	0x00b52400
     e5c:	db020000 	blle	80e64 <startup-0x1ff7f19c>
     e60:	000ad809 	andeq	sp, sl, r9, lsl #16
     e64:	00004020 	andeq	r4, r0, r0, lsr #32
     e68:	8e9c0100 	fmlhie	f0, f4, f0
     e6c:	2500000e 	strcs	r0, [r0, #-14]
     e70:	00000e1b 	andeq	r0, r0, fp, lsl lr
     e74:	0b09db02 	bleq	277a84 <startup-0x1fd8857c>
     e78:	02000003 	andeq	r0, r0, #3
     e7c:	d6257491 			; <UNDEFINED> instruction: 0xd6257491
     e80:	0200000a 	andeq	r0, r0, #10
     e84:	069c09db 			; <UNDEFINED> instruction: 0x069c09db
     e88:	91020000 	mrsls	r0, (UNDEF: 2)
     e8c:	c8240073 	stmdagt	r4!, {r0, r1, r4, r5, r6}
     e90:	02000004 	andeq	r0, r0, #4
     e94:	0a9809aa 	beq	fe603544 <APBAHBPrescTable+0xde600d78>
     e98:	00402000 	subeq	r2, r0, r0
     e9c:	9c010000 	stcls	0, cr0, [r1], {-0}
     ea0:	00000ec3 	andeq	r0, r0, r3, asr #29
     ea4:	000b5625 	andeq	r5, fp, r5, lsr #12
     ea8:	09aa0200 	stmibeq	sl!, {r9}
     eac:	0000030b 	andeq	r0, r0, fp, lsl #6
     eb0:	25749102 	ldrbcs	r9, [r4, #-258]!	; 0xfffffefe
     eb4:	00000ad6 	ldrdeq	r0, [r0], -r6
     eb8:	9c09aa02 			; <UNDEFINED> instruction: 0x9c09aa02
     ebc:	02000006 	andeq	r0, r0, #6
     ec0:	24007391 	strcs	r7, [r0], #-913	; 0xfffffc6f
     ec4:	00000125 	andeq	r0, r0, r5, lsr #2
     ec8:	58097b02 	stmdapl	r9, {r1, r8, r9, fp, ip, sp, lr}
     ecc:	4020000a 	eormi	r0, r0, sl
     ed0:	01000000 	mrseq	r0, (UNDEF: 0)
     ed4:	000ef89c 	muleq	lr, ip, r8
     ed8:	0a6e2500 	beq	1b8a2e0 <startup-0x1e475d20>
     edc:	7b020000 	blvc	80ee4 <startup-0x1ff7f11c>
     ee0:	00030b09 	andeq	r0, r3, r9, lsl #22
     ee4:	74910200 	ldrvc	r0, [r1], #512	; 0x200
     ee8:	000ad625 	andeq	sp, sl, r5, lsr #12
     eec:	097b0200 	ldmdbeq	fp!, {r9}^
     ef0:	0000069c 	muleq	r0, ip, r6
     ef4:	00739102 	rsbseq	r9, r3, r2, lsl #2
     ef8:	00028724 	andeq	r8, r2, r4, lsr #14
     efc:	09450200 	stmdbeq	r5, {r9}^
     f00:	20000a18 	andcs	r0, r0, r8, lsl sl
     f04:	00000040 	andeq	r0, r0, r0, asr #32
     f08:	0f2d9c01 	svceq	0x002d9c01
     f0c:	43250000 			; <UNDEFINED> instruction: 0x43250000
     f10:	02000003 	andeq	r0, r0, #3
     f14:	030b0945 	movweq	r0, #47429	; 0xb945
     f18:	91020000 	mrsls	r0, (UNDEF: 2)
     f1c:	0ad62574 	beq	ff58a4f4 <APBAHBPrescTable+0xdf587d28>
     f20:	45020000 	strmi	r0, [r2, #-0]
     f24:	00069c09 	andeq	r9, r6, r9, lsl #24
     f28:	73910200 	orrsvc	r0, r1, #0, 4
     f2c:	11482400 	cmpne	r8, r0, lsl #8
     f30:	2a020000 	bcs	80f38 <startup-0x1ff7f0c8>
     f34:	0009d809 	andeq	sp, r9, r9, lsl #16
     f38:	00004020 	andeq	r4, r0, r0, lsr #32
     f3c:	629c0100 	addsvs	r0, ip, #0, 2
     f40:	2500000f 	strcs	r0, [r0, #-15]
     f44:	0000102f 	andeq	r1, r0, pc, lsr #32
     f48:	0b092a02 	bleq	24b758 <startup-0x1fdb48a8>
     f4c:	02000003 	andeq	r0, r0, #3
     f50:	d6257491 			; <UNDEFINED> instruction: 0xd6257491
     f54:	0200000a 	andeq	r0, r0, #10
     f58:	069c092a 	ldreq	r0, [ip], sl, lsr #18
     f5c:	91020000 	mrsls	r0, (UNDEF: 2)
     f60:	9c240073 	stcls	0, cr0, [r4], #-460	; 0xfffffe34
     f64:	0200000e 	andeq	r0, r0, #14
     f68:	0998090d 	ldmibeq	r8, {r0, r2, r3, r8, fp}
     f6c:	00402000 	subeq	r2, r0, r0
     f70:	9c010000 	stcls	0, cr0, [r1], {-0}
     f74:	00000f97 	muleq	r0, r7, pc	; <UNPREDICTABLE>
     f78:	000e1b25 	andeq	r1, lr, r5, lsr #22
     f7c:	090d0200 	stmdbeq	sp, {r9}
     f80:	0000030b 	andeq	r0, r0, fp, lsl #6
     f84:	25749102 	ldrbcs	r9, [r4, #-258]!	; 0xfffffefe
     f88:	00000ad6 	ldrdeq	r0, [r0], -r6
     f8c:	9c090d02 	stcls	13, cr0, [r9], {2}
     f90:	02000006 	andeq	r0, r0, #6
     f94:	24007391 	strcs	r7, [r0], #-913	; 0xfffffc6f
     f98:	000007de 	ldrdeq	r0, [r0], -lr
     f9c:	5808e302 	stmdapl	r8, {r1, r8, r9, sp, lr, pc}
     fa0:	40200009 	eormi	r0, r0, r9
     fa4:	01000000 	mrseq	r0, (UNDEF: 0)
     fa8:	000fcc9c 	muleq	pc, ip, ip	; <UNPREDICTABLE>
     fac:	0b562500 	bleq	158a3b4 <startup-0x1ea75c4c>
     fb0:	e3020000 	movw	r0, #8192	; 0x2000
     fb4:	00030b08 	andeq	r0, r3, r8, lsl #22
     fb8:	74910200 	ldrvc	r0, [r1], #512	; 0x200
     fbc:	000ad625 	andeq	sp, sl, r5, lsr #12
     fc0:	08e30200 	stmiaeq	r3!, {r9}^
     fc4:	0000069c 	muleq	r0, ip, r6
     fc8:	00739102 	rsbseq	r9, r3, r2, lsl #2
     fcc:	0003c724 	andeq	ip, r3, r4, lsr #14
     fd0:	08af0200 	stmiaeq	pc!, {r9}	; <UNPREDICTABLE>
     fd4:	20000918 	andcs	r0, r0, r8, lsl r9
     fd8:	00000040 	andeq	r0, r0, r0, asr #32
     fdc:	10019c01 	andne	r9, r1, r1, lsl #24
     fe0:	6e250000 	cdpvs	0, 2, cr0, cr5, cr0, {0}
     fe4:	0200000a 	andeq	r0, r0, #10
     fe8:	030b08af 	movweq	r0, #47279	; 0xb8af
     fec:	91020000 	mrsls	r0, (UNDEF: 2)
     ff0:	0ad62574 	beq	ff58a5c8 <APBAHBPrescTable+0xdf587dfc>
     ff4:	af020000 	svcge	0x00020000
     ff8:	00069c08 	andeq	r9, r6, r8, lsl #24
     ffc:	73910200 	orrsvc	r0, r1, #0, 4
    1000:	0be22400 	bleq	ff88a008 <APBAHBPrescTable+0xdf88783c>
    1004:	76020000 	strvc	r0, [r2], -r0
    1008:	0008d808 	andeq	sp, r8, r8, lsl #16
    100c:	00004020 	andeq	r4, r0, r0, lsr #32
    1010:	369c0100 	ldrcc	r0, [ip], r0, lsl #2
    1014:	25000010 	strcs	r0, [r0, #-16]
    1018:	00000343 	andeq	r0, r0, r3, asr #6
    101c:	0b087602 	bleq	21e82c <startup-0x1fde17d4>
    1020:	02000003 	andeq	r0, r0, #3
    1024:	d6257491 			; <UNDEFINED> instruction: 0xd6257491
    1028:	0200000a 	andeq	r0, r0, #10
    102c:	069c0876 			; <UNDEFINED> instruction: 0x069c0876
    1030:	91020000 	mrsls	r0, (UNDEF: 2)
    1034:	60240073 	eorvs	r0, r4, r3, ror r0
    1038:	02000001 	andeq	r0, r0, #1
    103c:	08980858 	ldmeq	r8, {r3, r4, r6, fp}
    1040:	00402000 	subeq	r2, r0, r0
    1044:	9c010000 	stcls	0, cr0, [r1], {-0}
    1048:	0000106b 	andeq	r1, r0, fp, rrx
    104c:	00102f25 	andseq	r2, r0, r5, lsr #30
    1050:	08580200 	ldmdaeq	r8, {r9}^
    1054:	0000030b 	andeq	r0, r0, fp, lsl #6
    1058:	25749102 	ldrbcs	r9, [r4, #-258]!	; 0xfffffefe
    105c:	00000ad6 	ldrdeq	r0, [r0], -r6
    1060:	9c085802 	stcls	8, cr5, [r8], {2}
    1064:	02000006 	andeq	r0, r0, #6
    1068:	24007391 	strcs	r7, [r0], #-913	; 0xfffffc6f
    106c:	00001063 	andeq	r1, r0, r3, rrx
    1070:	58083802 	stmdapl	r8, {r1, fp, ip, sp}
    1074:	40200008 	eormi	r0, r0, r8
    1078:	01000000 	mrseq	r0, (UNDEF: 0)
    107c:	0010a09c 	mulseq	r0, ip, r0
    1080:	0e1b2500 	cfmul32eq	mvfx2, mvfx11, mvfx0
    1084:	38020000 	stmdacc	r2, {}	; <UNPREDICTABLE>
    1088:	00030b08 	andeq	r0, r3, r8, lsl #22
    108c:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    1090:	000ad625 	andeq	sp, sl, r5, lsr #12
    1094:	08380200 	ldmdaeq	r8!, {r9}
    1098:	0000069c 	muleq	r0, ip, r6
    109c:	00739102 	rsbseq	r9, r3, r2, lsl #2
    10a0:	00017c24 	andeq	r7, r1, r4, lsr #24
    10a4:	080e0200 	stmdaeq	lr, {r9}
    10a8:	2000083c 	andcs	r0, r0, ip, lsr r8
    10ac:	0000001c 	andeq	r0, r0, ip, lsl r0
    10b0:	10c69c01 	sbcne	r9, r6, r1, lsl #24
    10b4:	29250000 	stmdbcs	r5!, {}	; <UNPREDICTABLE>
    10b8:	02000011 	andeq	r0, r0, #17
    10bc:	030b080e 	movweq	r0, #47118	; 0xb80e
    10c0:	91020000 	mrsls	r0, (UNDEF: 2)
    10c4:	53240074 			; <UNDEFINED> instruction: 0x53240074
    10c8:	02000002 	andeq	r0, r0, #2
    10cc:	0800078e 	stmdaeq	r0, {r1, r2, r3, r7, r8, r9, sl}
    10d0:	003c2000 	eorseq	r2, ip, r0
    10d4:	9c010000 	stcls	0, cr0, [r1], {-0}
    10d8:	000010fb 	strdeq	r1, [r0], -fp
    10dc:	00080425 	andeq	r0, r8, r5, lsr #8
    10e0:	078e0200 	streq	r0, [lr, r0, lsl #4]
    10e4:	0000030b 	andeq	r0, r0, fp, lsl #6
    10e8:	276c9102 	strbcs	r9, [ip, -r2, lsl #2]!
    10ec:	00000df1 	strdeq	r0, [r0], -r1
    10f0:	0b079002 	bleq	1e5100 <startup-0x1fe1af00>
    10f4:	02000003 	andeq	r0, r0, #3
    10f8:	24007491 	strcs	r7, [r0], #-1169	; 0xfffffb6f
    10fc:	00000213 	andeq	r0, r0, r3, lsl r2
    1100:	c0072b02 	andgt	r2, r7, r2, lsl #22
    1104:	40200007 	eormi	r0, r0, r7
    1108:	01000000 	mrseq	r0, (UNDEF: 0)
    110c:	0011309c 	mulseq	r1, ip, r0
    1110:	07f52500 	ldrbeq	r2, [r5, r0, lsl #10]!
    1114:	2b020000 	blcs	8111c <startup-0x1ff7eee4>
    1118:	00030b07 	andeq	r0, r3, r7, lsl #22
    111c:	6c910200 	lfmvs	f0, 4, [r1], {0}
    1120:	000df127 	andeq	pc, sp, r7, lsr #2
    1124:	072d0200 	streq	r0, [sp, -r0, lsl #4]!
    1128:	0000030b 	andeq	r0, r0, fp, lsl #6
    112c:	00749102 	rsbseq	r9, r4, r2, lsl #2
    1130:	00096224 	andeq	r6, r9, r4, lsr #4
    1134:	070b0200 	streq	r0, [fp, -r0, lsl #4]
    1138:	20000784 	andcs	r0, r0, r4, lsl #15
    113c:	0000003c 	andeq	r0, r0, ip, lsr r0
    1140:	11659c01 	cmnne	r5, r1, lsl #24
    1144:	27250000 	strcs	r0, [r5, -r0]!
    1148:	02000003 	andeq	r0, r0, #3
    114c:	030b070b 	movweq	r0, #46859	; 0xb70b
    1150:	91020000 	mrsls	r0, (UNDEF: 2)
    1154:	0df1276c 	ldcleq	7, cr2, [r1, #432]!	; 0x1b0
    1158:	0d020000 	stceq	0, cr0, [r2, #-0]
    115c:	00030b07 	andeq	r0, r3, r7, lsl #22
    1160:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    1164:	02ea2400 	rsceq	r2, sl, #0, 8
    1168:	ea020000 	b	81170 <startup-0x1ff7ee90>
    116c:	00074806 	andeq	r4, r7, r6, lsl #16
    1170:	00003c20 	andeq	r3, r0, r0, lsr #24
    1174:	9a9c0100 	bls	fe70157c <APBAHBPrescTable+0xde6fedb0>
    1178:	25000011 	strcs	r0, [r0, #-17]	; 0xffffffef
    117c:	00000813 	andeq	r0, r0, r3, lsl r8
    1180:	0b06ea02 	bleq	1bb990 <startup-0x1fe44670>
    1184:	02000003 	andeq	r0, r0, #3
    1188:	f1276c91 			; <UNDEFINED> instruction: 0xf1276c91
    118c:	0200000d 	andeq	r0, r0, #13
    1190:	030b06ec 	movweq	r0, #46828	; 0xb6ec
    1194:	91020000 	mrsls	r0, (UNDEF: 2)
    1198:	d8240074 	stmdale	r4!, {r2, r4, r5, r6}
    119c:	02000006 	andeq	r0, r0, #6
    11a0:	070c06c6 	streq	r0, [ip, -r6, asr #13]
    11a4:	003c2000 	eorseq	r2, ip, r0
    11a8:	9c010000 	stcls	0, cr0, [r1], {-0}
    11ac:	000011cf 	andeq	r1, r0, pc, asr #3
    11b0:	000b2825 	andeq	r2, fp, r5, lsr #16
    11b4:	06c60200 	strbeq	r0, [r6], r0, lsl #4
    11b8:	0000030b 	andeq	r0, r0, fp, lsl #6
    11bc:	276c9102 	strbcs	r9, [ip, -r2, lsl #2]!
    11c0:	00000df1 	strdeq	r0, [r0], -r1
    11c4:	0b06c802 	bleq	1b31d4 <startup-0x1fe4ce2c>
    11c8:	02000003 	andeq	r0, r0, #3
    11cc:	24007491 	strcs	r7, [r0], #-1169	; 0xfffffb6f
    11d0:	00000057 	andeq	r0, r0, r7, asr r0
    11d4:	f006ab02 			; <UNDEFINED> instruction: 0xf006ab02
    11d8:	1c200006 	stcne	0, cr0, [r0], #-24	; 0xffffffe8
    11dc:	01000000 	mrseq	r0, (UNDEF: 0)
    11e0:	0011f59c 	mulseq	r1, ip, r5
    11e4:	08ab2500 	stmiaeq	fp!, {r8, sl, sp}
    11e8:	ab020000 	blge	811f0 <startup-0x1ff7ee10>
    11ec:	00030b06 	andeq	r0, r3, r6, lsl #22
    11f0:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    11f4:	0c232400 	cfstrseq	mvf2, [r3], #-0
    11f8:	ef020000 	svc	0x00020000
    11fc:	0006d005 	andeq	sp, r6, r5
    1200:	00002020 	andeq	r2, r0, r0, lsr #32
    1204:	1b9c0100 	blne	fe70160c <APBAHBPrescTable+0xde6fee40>
    1208:	25000012 	strcs	r0, [r0, #-18]	; 0xffffffee
    120c:	00000ad6 	ldrdeq	r0, [r0], -r6
    1210:	9c05ef02 	stcls	15, cr14, [r5], {2}
    1214:	02000006 	andeq	r0, r0, #6
    1218:	24007791 	strcs	r7, [r0], #-1937	; 0xfffff86f
    121c:	00000ffc 	strdeq	r0, [r0], -ip
    1220:	b005de02 	andlt	sp, r5, r2, lsl #28
    1224:	20200006 	eorcs	r0, r0, r6
    1228:	01000000 	mrseq	r0, (UNDEF: 0)
    122c:	0012419c 	mulseq	r2, ip, r1
    1230:	0ad62500 	beq	ff58a638 <APBAHBPrescTable+0xdf587e6c>
    1234:	de020000 	cdple	0, 0, cr0, cr2, cr0, {0}
    1238:	00069c05 	andeq	r9, r6, r5, lsl #24
    123c:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    1240:	0a7d2400 	beq	1f4a248 <startup-0x1e0b5db8>
    1244:	be020000 	cdplt	0, 0, cr0, cr2, cr0, {0}
    1248:	00065005 	andeq	r5, r6, r5
    124c:	00006020 	andeq	r6, r0, r0, lsr #32
    1250:	769c0100 	ldrvc	r0, [ip], r0, lsl #2
    1254:	25000012 	strcs	r0, [r0, #-18]	; 0xffffffee
    1258:	0000014f 	andeq	r0, r0, pc, asr #2
    125c:	0b05be02 	bleq	170a6c <startup-0x1fe8f594>
    1260:	02000003 	andeq	r0, r0, #3
    1264:	f1276c91 			; <UNDEFINED> instruction: 0xf1276c91
    1268:	0200000d 	andeq	r0, r0, #13
    126c:	030b05c0 	movweq	r0, #46528	; 0xb5c0
    1270:	91020000 	mrsls	r0, (UNDEF: 2)
    1274:	682a0074 	stmdavs	sl!, {r2, r4, r5, r6}
    1278:	02000000 	andeq	r0, r0, #0
    127c:	04f80525 	ldrbteq	r0, [r8], #1317	; 0x525
    1280:	01582000 	cmpeq	r8, r0
    1284:	9c010000 	stcls	0, cr0, [r1], {-0}
    1288:	000012f6 	strdeq	r1, [r0], -r6
    128c:	0009f925 	andeq	pc, r9, r5, lsr #18
    1290:	05250200 	streq	r0, [r5, #-512]!	; 0xfffffe00
    1294:	000012f6 	strdeq	r1, [r0], -r6
    1298:	295c9102 	ldmdbcs	ip, {r1, r8, ip, pc}^
    129c:	00706d74 	rsbseq	r6, r0, r4, ror sp
    12a0:	0b052702 	bleq	14aeb0 <startup-0x1feb5150>
    12a4:	02000003 	andeq	r0, r0, #3
    12a8:	42277091 	eormi	r7, r7, #145	; 0x91
    12ac:	02000011 	andeq	r0, r0, #17
    12b0:	030b0527 	movweq	r0, #46375	; 0xb527
    12b4:	91020000 	mrsls	r0, (UNDEF: 2)
    12b8:	0f5c276c 	svceq	0x005c276c
    12bc:	27020000 	strcs	r0, [r2, -r0]
    12c0:	00030b05 	andeq	r0, r3, r5, lsl #22
    12c4:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    12c8:	00000027 	andeq	r0, r0, r7, lsr #32
    12cc:	05270200 	streq	r0, [r7, #-512]!	; 0xfffffe00
    12d0:	0000030b 	andeq	r0, r0, fp, lsl #6
    12d4:	27689102 	strbcs	r9, [r8, -r2, lsl #2]!
    12d8:	000005d3 	ldrdeq	r0, [r0], -r3
    12dc:	0b052702 	bleq	14aeec <startup-0x1feb5114>
    12e0:	02000003 	andeq	r0, r0, #3
    12e4:	b6276491 			; <UNDEFINED> instruction: 0xb6276491
    12e8:	02000011 	andeq	r0, r0, #17
    12ec:	030b0527 	movweq	r0, #46375	; 0xb527
    12f0:	91020000 	mrsls	r0, (UNDEF: 2)
    12f4:	042b0060 	strteq	r0, [fp], #-96	; 0xffffffa0
    12f8:	00000984 	andeq	r0, r0, r4, lsl #19
    12fc:	0002c324 	andeq	ip, r2, r4, lsr #6
    1300:	04f10200 	ldrbteq	r0, [r1], #512	; 0x200
    1304:	200004bc 			; <UNDEFINED> instruction: 0x200004bc
    1308:	0000003c 	andeq	r0, r0, ip, lsr r0
    130c:	13319c01 	teqne	r1, #256	; 0x100
    1310:	9f250000 	svcls	0x00250000
    1314:	02000001 	andeq	r0, r0, #1
    1318:	030b04f1 	movweq	r0, #46321	; 0xb4f1
    131c:	91020000 	mrsls	r0, (UNDEF: 2)
    1320:	0df1276c 	ldcleq	7, cr2, [r1, #432]!	; 0x1b0
    1324:	f3020000 	vhadd.u8	d0, d2, d0
    1328:	00030b04 	andeq	r0, r3, r4, lsl #22
    132c:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    1330:	08d72400 	ldmeq	r7, {sl, sp}^
    1334:	d2020000 	andle	r0, r2, #0
    1338:	00048404 	andeq	r8, r4, r4, lsl #8
    133c:	00003820 	andeq	r3, r0, r0, lsr #16
    1340:	669c0100 	ldrvs	r0, [ip], r0, lsl #2
    1344:	25000013 	strcs	r0, [r0, #-19]	; 0xffffffed
    1348:	0000019f 	muleq	r0, pc, r1	; <UNPREDICTABLE>
    134c:	0b04d202 	bleq	135b5c <startup-0x1feca4a4>
    1350:	02000003 	andeq	r0, r0, #3
    1354:	f1276c91 			; <UNDEFINED> instruction: 0xf1276c91
    1358:	0200000d 	andeq	r0, r0, #13
    135c:	030b04d4 	movweq	r0, #46292	; 0xb4d4
    1360:	91020000 	mrsls	r0, (UNDEF: 2)
    1364:	7f240074 	svcvc	0x00240074
    1368:	02000006 	andeq	r0, r0, #6
    136c:	045004b3 	ldrbeq	r0, [r0], #-1203	; 0xfffffb4d
    1370:	00342000 	eorseq	r2, r4, r0
    1374:	9c010000 	stcls	0, cr0, [r1], {-0}
    1378:	0000139b 	muleq	r0, fp, r3
    137c:	00059925 	andeq	r9, r5, r5, lsr #18
    1380:	04b30200 	ldrteq	r0, [r3], #512	; 0x200
    1384:	0000030b 	andeq	r0, r0, fp, lsl #6
    1388:	276c9102 	strbcs	r9, [ip, -r2, lsl #2]!
    138c:	00000df1 	strdeq	r0, [r0], -r1
    1390:	0b04b502 	bleq	12e7a0 <startup-0x1fed1860>
    1394:	02000003 	andeq	r0, r0, #3
    1398:	2c007491 	cfstrscs	mvf7, [r0], {145}	; 0x91
    139c:	00000309 	andeq	r0, r0, r9, lsl #6
    13a0:	d1049a02 	tstle	r4, r2, lsl #20
    13a4:	34000002 	strcc	r0, [r0], #-2
    13a8:	1c200004 	stcne	0, cr0, [r0], #-16
    13ac:	01000000 	mrseq	r0, (UNDEF: 0)
    13b0:	1175249c 			; <UNDEFINED> instruction: 0x1175249c
    13b4:	7d020000 	stcvc	0, cr0, [r2, #-0]
    13b8:	00040004 	andeq	r0, r4, r4
    13bc:	00003420 	andeq	r3, r0, r0, lsr #8
    13c0:	e69c0100 	ldr	r0, [ip], r0, lsl #2
    13c4:	25000013 	strcs	r0, [r0, #-19]	; 0xffffffed
    13c8:	00000396 	muleq	r0, r6, r3
    13cc:	0b047d02 	bleq	1207dc <startup-0x1fedf824>
    13d0:	02000003 	andeq	r0, r0, #3
    13d4:	f1276c91 			; <UNDEFINED> instruction: 0xf1276c91
    13d8:	0200000d 	andeq	r0, r0, #13
    13dc:	030b047f 	movweq	r0, #46207	; 0xb47f
    13e0:	91020000 	mrsls	r0, (UNDEF: 2)
    13e4:	97240074 			; <UNDEFINED> instruction: 0x97240074
    13e8:	02000008 	andeq	r0, r0, #8
    13ec:	03c403b5 	biceq	r0, r4, #-738197502	; 0xd4000002
    13f0:	003c2000 	eorseq	r2, ip, r0
    13f4:	9c010000 	stcls	0, cr0, [r1], {-0}
    13f8:	0000142a 	andeq	r1, r0, sl, lsr #8
    13fc:	000c6a25 	andeq	r6, ip, r5, lsr #20
    1400:	03b50200 			; <UNDEFINED> instruction: 0x03b50200
    1404:	0000030b 	andeq	r0, r0, fp, lsl #6
    1408:	256c9102 	strbcs	r9, [ip, #-258]!	; 0xfffffefe
    140c:	0000036b 	andeq	r0, r0, fp, ror #6
    1410:	0b03b502 	bleq	ee820 <startup-0x1ff117e0>
    1414:	02000003 	andeq	r0, r0, #3
    1418:	f1276891 			; <UNDEFINED> instruction: 0xf1276891
    141c:	0200000d 	andeq	r0, r0, #13
    1420:	030b03b7 	movweq	r0, #46007	; 0xb3b7
    1424:	91020000 	mrsls	r0, (UNDEF: 2)
    1428:	6a240074 	bvs	901600 <startup-0x1f6fea00>
    142c:	02000007 	andeq	r0, r0, #7
    1430:	03840388 	orreq	r0, r4, #136, 6	; 0x20000002
    1434:	00402000 	subeq	r2, r0, r0
    1438:	9c010000 	stcls	0, cr0, [r1], {-0}
    143c:	0000146e 	andeq	r1, r0, lr, ror #8
    1440:	000bd325 	andeq	sp, fp, r5, lsr #6
    1444:	03880200 	orreq	r0, r8, #0, 4
    1448:	0000030b 	andeq	r0, r0, fp, lsl #6
    144c:	256c9102 	strbcs	r9, [ip, #-258]!	; 0xfffffefe
    1450:	00000cf0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    1454:	0b038802 	bleq	e3464 <startup-0x1ff1cb9c>
    1458:	02000003 	andeq	r0, r0, #3
    145c:	f1276891 			; <UNDEFINED> instruction: 0xf1276891
    1460:	0200000d 	andeq	r0, r0, #13
    1464:	030b038a 	movweq	r0, #45962	; 0xb38a
    1468:	91020000 	mrsls	r0, (UNDEF: 2)
    146c:	0d240074 	stceq	0, cr0, [r4, #-464]!	; 0xfffffe30
    1470:	0200000b 	andeq	r0, r0, #11
    1474:	0364036f 	cmneq	r4, #-1140850687	; 0xbc000001
    1478:	00202000 	eoreq	r2, r0, r0
    147c:	9c010000 	stcls	0, cr0, [r1], {-0}
    1480:	00001494 	muleq	r0, r4, r4
    1484:	000ad625 	andeq	sp, sl, r5, lsr #12
    1488:	036f0200 	cmneq	pc, #0, 4
    148c:	0000069c 	muleq	r0, ip, r6
    1490:	00779102 	rsbseq	r9, r7, r2, lsl #2
    1494:	00115f24 	andseq	r5, r1, r4, lsr #30
    1498:	035d0200 	cmpeq	sp, #0, 4
    149c:	20000344 	andcs	r0, r0, r4, asr #6
    14a0:	00000020 	andeq	r0, r0, r0, lsr #32
    14a4:	14ba9c01 	ldrtne	r9, [sl], #3073	; 0xc01
    14a8:	d6250000 	strtle	r0, [r5], -r0
    14ac:	0200000a 	andeq	r0, r0, #10
    14b0:	069c035d 			; <UNDEFINED> instruction: 0x069c035d
    14b4:	91020000 	mrsls	r0, (UNDEF: 2)
    14b8:	fe240077 	mcr2	0, 1, r0, cr4, cr7, {3}
    14bc:	02000006 	andeq	r0, r0, #6
    14c0:	03140349 	tsteq	r4, #603979777	; 0x24000001
    14c4:	00302000 	eorseq	r2, r0, r0
    14c8:	9c010000 	stcls	0, cr0, [r1], {-0}
    14cc:	000014fe 	strdeq	r1, [r0], -lr
    14d0:	000bbb25 	andeq	fp, fp, r5, lsr #22
    14d4:	03490200 	movteq	r0, #37376	; 0x9200
    14d8:	0000030b 	andeq	r0, r0, fp, lsl #6
    14dc:	25749102 	ldrbcs	r9, [r4, #-258]!	; 0xfffffefe
    14e0:	00000bc3 	andeq	r0, r0, r3, asr #23
    14e4:	0b034902 	bleq	d38f4 <startup-0x1ff2c70c>
    14e8:	02000003 	andeq	r0, r0, #3
    14ec:	cb257091 	blgt	95d738 <startup-0x1f6a28c8>
    14f0:	0200000b 	andeq	r0, r0, #11
    14f4:	030b0349 	movweq	r0, #45897	; 0xb349
    14f8:	91020000 	mrsls	r0, (UNDEF: 2)
    14fc:	9124006c 			; <UNDEFINED> instruction: 0x9124006c
    1500:	02000001 	andeq	r0, r0, #1
    1504:	02f402dc 	rscseq	r0, r4, #220, 4	; 0xc000000d
    1508:	00202000 	eoreq	r2, r0, r0
    150c:	9c010000 	stcls	0, cr0, [r1], {-0}
    1510:	00001524 	andeq	r1, r0, r4, lsr #10
    1514:	000ad625 	andeq	sp, sl, r5, lsr #12
    1518:	02dc0200 	sbcseq	r0, ip, #0, 4
    151c:	0000069c 	muleq	r0, ip, r6
    1520:	00779102 	rsbseq	r9, r7, r2, lsl #2
    1524:	00108d24 	andseq	r8, r0, r4, lsr #26
    1528:	02510200 	subseq	r0, r1, #0, 4
    152c:	200002cc 	andcs	r0, r0, ip, asr #5
    1530:	00000028 	andeq	r0, r0, r8, lsr #32
    1534:	15599c01 	ldrbne	r9, [r9, #-3073]	; 0xfffff3ff
    1538:	ad250000 	stcge	0, cr0, [r5, #-0]
    153c:	0200000f 	andeq	r0, r0, #15
    1540:	030b0251 	movweq	r0, #45649	; 0xb251
    1544:	91020000 	mrsls	r0, (UNDEF: 2)
    1548:	0fd22574 	svceq	0x00d22574
    154c:	51020000 	mrspl	r0, (UNDEF: 2)
    1550:	00030b02 	andeq	r0, r3, r2, lsl #22
    1554:	70910200 	addsvc	r0, r1, r0, lsl #4
    1558:	0c182400 	cfldrseq	mvf2, [r8], {-0}
    155c:	33020000 	movwcc	r0, #8192	; 0x2000
    1560:	0002ac02 	andeq	sl, r2, r2, lsl #24
    1564:	00002020 	andeq	r2, r0, r0, lsr #32
    1568:	7f9c0100 	svcvc	0x009c0100
    156c:	25000015 	strcs	r0, [r0, #-21]	; 0xffffffeb
    1570:	00000ad6 	ldrdeq	r0, [r0], -r6
    1574:	9c023302 	stcls	3, cr3, [r2], {2}
    1578:	02000006 	andeq	r0, r0, #6
    157c:	24007791 	strcs	r7, [r0], #-1937	; 0xfffff86f
    1580:	000011a8 	andeq	r1, r0, r8, lsr #3
    1584:	70021b02 	andvc	r1, r2, r2, lsl #22
    1588:	3c200002 	stccc	0, cr0, [r0], #-8
    158c:	01000000 	mrseq	r0, (UNDEF: 0)
    1590:	0015e19c 	mulseq	r5, ip, r1
    1594:	03b92500 			; <UNDEFINED> instruction: 0x03b92500
    1598:	1b020000 	blne	815a0 <startup-0x1ff7ea60>
    159c:	00030b02 	andeq	r0, r3, r2, lsl #22
    15a0:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    15a4:	0005b425 	andeq	fp, r5, r5, lsr #8
    15a8:	021b0200 	andseq	r0, fp, #0, 4
    15ac:	0000030b 	andeq	r0, r0, fp, lsl #6
    15b0:	25709102 	ldrbcs	r9, [r0, #-258]!	; 0xfffffefe
    15b4:	000005b9 			; <UNDEFINED> instruction: 0x000005b9
    15b8:	0b021b02 	bleq	881c8 <startup-0x1ff77e38>
    15bc:	02000003 	andeq	r0, r0, #3
    15c0:	be256c91 	mcrlt	12, 1, r6, cr5, cr1, {4}
    15c4:	02000005 	andeq	r0, r0, #5
    15c8:	030b021b 	movweq	r0, #45595	; 0xb21b
    15cc:	91020000 	mrsls	r0, (UNDEF: 2)
    15d0:	05c32568 	strbeq	r2, [r3, #1384]	; 0x568
    15d4:	1b020000 	blne	815dc <startup-0x1ff7ea24>
    15d8:	00030b02 	andeq	r0, r3, r2, lsl #22
    15dc:	00910200 	addseq	r0, r1, r0, lsl #4
    15e0:	05c82400 	strbeq	r2, [r8, #1024]	; 0x400
    15e4:	b8020000 	stmdalt	r2, {}	; <UNPREDICTABLE>
    15e8:	00025001 	andeq	r5, r2, r1
    15ec:	00002020 	andeq	r2, r0, r0, lsr #32
    15f0:	079c0100 	ldreq	r0, [ip, r0, lsl #2]
    15f4:	25000016 	strcs	r0, [r0, #-22]	; 0xffffffea
    15f8:	00000ad6 	ldrdeq	r0, [r0], -r6
    15fc:	9c01b802 	stcls	8, cr11, [r1], {2}
    1600:	02000006 	andeq	r0, r0, #6
    1604:	24007791 	strcs	r7, [r0], #-1937	; 0xfffff86f
    1608:	0000045e 	andeq	r0, r0, lr, asr r4
    160c:	0c019002 	stceq	0, cr9, [r1], {2}
    1610:	44200002 	strtmi	r0, [r0], #-2
    1614:	01000000 	mrseq	r0, (UNDEF: 0)
    1618:	00162d9c 	mulseq	r6, ip, sp
    161c:	06be2500 	ldrteq	r2, [lr], r0, lsl #10
    1620:	90020000 	andls	r0, r2, r0
    1624:	0002d101 	andeq	sp, r2, r1, lsl #2
    1628:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    162c:	0a272400 	beq	9ca634 <startup-0x1f6359cc>
    1630:	77020000 	strvc	r0, [r2, -r0]
    1634:	0001ec01 	andeq	lr, r1, r1, lsl #24
    1638:	00002020 	andeq	r2, r0, r0, lsr #32
    163c:	539c0100 	orrspl	r0, ip, #0, 2
    1640:	25000016 	strcs	r0, [r0, #-22]	; 0xffffffea
    1644:	00000ad6 	ldrdeq	r0, [r0], -r6
    1648:	9c017702 	stcls	7, cr7, [r1], {2}
    164c:	02000006 	andeq	r0, r0, #6
    1650:	24007791 	strcs	r7, [r0], #-1937	; 0xfffff86f
    1654:	00000a3b 	andeq	r0, r0, fp, lsr sl
    1658:	ae015302 	cdpge	3, 0, cr5, cr1, cr2, {0}
    165c:	3e200001 	cdpcc	0, 2, cr0, cr0, cr1, {0}
    1660:	01000000 	mrseq	r0, (UNDEF: 0)
    1664:	0016889c 	mulseq	r6, ip, r8
    1668:	0a452500 	beq	114aa70 <startup-0x1eeb5590>
    166c:	53020000 	movwpl	r0, #8192	; 0x2000
    1670:	0002d101 	andeq	sp, r2, r1, lsl #2
    1674:	6f910200 	svcvs	0x00910200
    1678:	000df127 	andeq	pc, sp, r7, lsr #2
    167c:	01550200 	cmpeq	r5, r0, lsl #4
    1680:	0000030b 	andeq	r0, r0, fp, lsl #6
    1684:	00749102 	rsbseq	r9, r4, r2, lsl #2
    1688:	000d122d 	andeq	r1, sp, sp, lsr #4
    168c:	01340200 	teqeq	r4, r0, lsl #4
    1690:	000006c3 	andeq	r0, r0, r3, asr #13
    1694:	20000150 	andcs	r0, r0, r0, asr r1
    1698:	0000005e 	andeq	r0, r0, lr, asr r0
    169c:	16d09c01 	ldrbne	r9, [r0], r1, lsl #24
    16a0:	ef270000 	svc	0x00270000
    16a4:	02000006 	andeq	r0, r0, #6
    16a8:	03160136 	tsteq	r6, #-2147483635	; 0x8000000d
    16ac:	91020000 	mrsls	r0, (UNDEF: 2)
    16b0:	0e2d2768 	cdpeq	7, 2, cr2, cr13, cr8, {3}
    16b4:	37020000 	strcc	r0, [r2, -r0]
    16b8:	0006c301 	andeq	ip, r6, r1, lsl #6
    16bc:	6f910200 	svcvs	0x00910200
    16c0:	000e2a27 	andeq	r2, lr, r7, lsr #20
    16c4:	01380200 	teqeq	r8, r0, lsl #4
    16c8:	00000669 	andeq	r0, r0, r9, ror #12
    16cc:	006e9102 	rsbeq	r9, lr, r2, lsl #2
    16d0:	00069c24 	andeq	r9, r6, r4, lsr #24
    16d4:	011c0200 	tsteq	ip, r0, lsl #4
    16d8:	20000128 	andcs	r0, r0, r8, lsr #2
    16dc:	00000028 	andeq	r0, r0, r8, lsr #32
    16e0:	16f69c01 	ldrbtne	r9, [r6], r1, lsl #24
    16e4:	62250000 	eorvs	r0, r5, #0
    16e8:	02000007 	andeq	r0, r0, #7
    16ec:	02d1011c 	sbcseq	r0, r1, #28, 2
    16f0:	91020000 	mrsls	r0, (UNDEF: 2)
    16f4:	df220077 	svcle	0x00220077
    16f8:	02000002 	andeq	r0, r0, #2
    16fc:	0000b8e1 	andeq	fp, r0, r1, ror #17
    1700:	00007020 	andeq	r7, r0, r0, lsr #32
    1704:	2e9c0100 	fmlcse	f0, f4, f0
    1708:	00000d83 	andeq	r0, r0, r3, lsl #27
    170c:	0b06e001 	bleq	1b9718 <startup-0x1fe468e8>
    1710:	70000003 	andvc	r0, r0, r3
    1714:	48200000 	stmdami	r0!, {}	; <UNPREDICTABLE>
    1718:	01000000 	mrseq	r0, (UNDEF: 0)
    171c:	0017319c 	mulseq	r7, ip, r1
    1720:	08fd2500 	ldmeq	sp!, {r8, sl, sp}^
    1724:	e0010000 	and	r0, r1, r0
    1728:	00030b06 	andeq	r0, r3, r6, lsl #22
    172c:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    1730:	10102f00 	andsne	r2, r0, r0, lsl #30
    1734:	5d010000 	stcpl	0, cr0, [r1, #-0]
    1738:	00001006 	andeq	r1, r0, r6
    173c:	00006020 	andeq	r6, r0, r0, lsr #32
    1740:	259c0100 	ldrcs	r0, [ip, #256]	; 0x100
    1744:	00000f9b 	muleq	r0, fp, pc	; <UNPREDICTABLE>
    1748:	5a065d01 	bpl	198b54 <startup-0x1fe674ac>
    174c:	02000002 	andeq	r0, r0, #2
    1750:	4d257791 	stcmi	7, cr7, [r5, #-580]!	; 0xfffffdbc
    1754:	01000014 	tsteq	r0, r4, lsl r0
    1758:	030b065d 	movweq	r0, #46685	; 0xb65d
    175c:	91020000 	mrsls	r0, (UNDEF: 2)
    1760:	23000070 	movwcs	r0, #112	; 0x70
    1764:	04000006 	streq	r0, [r0], #-6
    1768:	0002f500 	andeq	pc, r2, r0, lsl #10
    176c:	e7010400 	str	r0, [r1, -r0, lsl #8]
    1770:	0c000005 	stceq	0, cr0, [r0], {5}
    1774:	00001240 	andeq	r1, r0, r0, asr #4
    1778:	00000547 	andeq	r0, r0, r7, asr #10
    177c:	200010dc 	ldrdcs	r1, [r0], -ip
    1780:	0000050e 	andeq	r0, r0, lr, lsl #10
    1784:	0000047e 	andeq	r0, r0, lr, ror r4
    1788:	f4060102 	vst4.8	{d0,d2,d4,d6}, [r6], r2
    178c:	03000003 	movweq	r0, #3
    1790:	000001cc 	andeq	r0, r0, ip, asr #3
    1794:	00372b02 	eorseq	r2, r7, r2, lsl #22
    1798:	01020000 	mrseq	r0, (UNDEF: 2)
    179c:	0003f208 	andeq	pc, r3, r8, lsl #4
    17a0:	05020200 	streq	r0, [r2, #-512]	; 0xfffffe00
    17a4:	00000f05 	andeq	r0, r0, r5, lsl #30
    17a8:	00050703 	andeq	r0, r5, r3, lsl #14
    17ac:	50390200 	eorspl	r0, r9, r0, lsl #4
    17b0:	02000000 	andeq	r0, r0, #0
    17b4:	107a0702 	rsbsne	r0, sl, r2, lsl #14
    17b8:	1f030000 	svcne	0x00030000
    17bc:	02000011 	andeq	r0, r0, #17
    17c0:	0000624d 	andeq	r6, r0, sp, asr #4
    17c4:	05040200 	streq	r0, [r4, #-512]	; 0xfffffe00
    17c8:	0000098b 	andeq	r0, r0, fp, lsl #19
    17cc:	00093403 	andeq	r3, r9, r3, lsl #8
    17d0:	744f0200 	strbvc	r0, [pc], #-512	; 17d8 <startup-0x1fffe828>
    17d4:	02000000 	andeq	r0, r0, #0
    17d8:	0cde0704 	ldcleq	7, cr0, [lr], {4}
    17dc:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    17e0:	00098605 	andeq	r8, r9, r5, lsl #12
    17e4:	07080200 	streq	r0, [r8, -r0, lsl #4]
    17e8:	00000cd9 	ldrdeq	r0, [r0], -r9
    17ec:	69050404 	stmdbvs	r5, {r2, sl}
    17f0:	0200746e 	andeq	r7, r0, #1845493760	; 0x6e000000
    17f4:	0ce30704 	stcleq	7, cr0, [r3], #16
    17f8:	ce030000 	cdpgt	0, 0, cr0, cr3, cr0, {0}
    17fc:	03000001 	movweq	r0, #1
    1800:	00002c18 	andeq	r2, r0, r8, lsl ip
    1804:	05090300 	streq	r0, [r9, #-768]	; 0xfffffd00
    1808:	24030000 	strcs	r0, [r3], #-0
    180c:	00000045 	andeq	r0, r0, r5, asr #32
    1810:	0000a205 	andeq	sl, r0, r5, lsl #4
    1814:	11210300 			; <UNDEFINED> instruction: 0x11210300
    1818:	2c030000 	stccs	0, cr0, [r3], {-0}
    181c:	00000057 	andeq	r0, r0, r7, asr r0
    1820:	0000b205 	andeq	fp, r0, r5, lsl #4
    1824:	09360300 	ldmdbeq	r6!, {r8, r9}
    1828:	30030000 	andcc	r0, r3, r0
    182c:	00000069 	andeq	r0, r0, r9, rrx
    1830:	0000c205 	andeq	ip, r0, r5, lsl #4
    1834:	0fa00600 	svceq	0x00a00600
    1838:	fa040000 	blx	101840 <startup-0x1fefe7c0>
    183c:	0000bd06 	andeq	fp, r0, r6, lsl #26
    1840:	08400700 	stmdaeq	r0, {r8, r9, sl}^
    1844:	3b050000 	blcc	14184c <startup-0x1febe7b4>
    1848:	000000c2 	andeq	r0, r0, r2, asr #1
    184c:	37010708 	strcc	r0, [r1, -r8, lsl #14]
    1850:	06000000 	streq	r0, [r0], -r0
    1854:	0104035f 	tsteq	r4, pc, asr r3
    1858:	c4090000 	strgt	r0, [r9], #-0
    185c:	00000009 	andeq	r0, r0, r9
    1860:	000f5509 	andeq	r5, pc, r9, lsl #10
    1864:	0a000100 	beq	1c6c <startup-0x1fffe394>
    1868:	05c30628 	strbeq	r0, [r3, #1576]	; 0x628
    186c:	00000190 	muleq	r0, r0, r1
    1870:	00100a0b 	andseq	r0, r0, fp, lsl #20
    1874:	05c50600 	strbeq	r0, [r5, #1536]	; 0x600
    1878:	000000cd 	andeq	r0, r0, sp, asr #1
    187c:	0de40b00 			; <UNDEFINED> instruction: 0x0de40b00
    1880:	c6060000 	strgt	r0, [r6], -r0
    1884:	0000cd05 	andeq	ip, r0, r5, lsl #26
    1888:	e70b0400 	str	r0, [fp, -r0, lsl #8]
    188c:	06000008 	streq	r0, [r0], -r8
    1890:	00cd05c7 	sbceq	r0, sp, r7, asr #11
    1894:	0b080000 	bleq	20189c <startup-0x1fdfe764>
    1898:	000009ae 	andeq	r0, r0, lr, lsr #19
    189c:	cd05c806 	stcgt	8, cr12, [r5, #-24]	; 0xffffffe8
    18a0:	0c000000 	stceq	0, cr0, [r0], {-0}
    18a4:	5244490c 	subpl	r4, r4, #12, 18	; 0x30000
    18a8:	05c90600 	strbeq	r0, [r9, #1536]	; 0x600
    18ac:	000000cd 	andeq	r0, r0, sp, asr #1
    18b0:	444f0c10 	strbmi	r0, [pc], #-3088	; 18b8 <startup-0x1fffe748>
    18b4:	ca060052 	bgt	181a04 <startup-0x1fe7e5fc>
    18b8:	0000cd05 	andeq	ip, r0, r5, lsl #26
    18bc:	040b1400 	streq	r1, [fp], #-1024	; 0xfffffc00
    18c0:	0600000a 	streq	r0, [r0], -sl
    18c4:	00ad05cb 	adceq	r0, sp, fp, asr #11
    18c8:	0b180000 	bleq	6018d0 <startup-0x1f9fe730>
    18cc:	000009e1 	andeq	r0, r0, r1, ror #19
    18d0:	ad05cc06 	stcge	12, cr12, [r5, #-24]	; 0xffffffe8
    18d4:	1a000000 	bne	18dc <startup-0x1fffe724>
    18d8:	0008a60b 	andeq	sl, r8, fp, lsl #12
    18dc:	05cd0600 	strbeq	r0, [sp, #1536]	; 0x600
    18e0:	000000cd 	andeq	r0, r0, sp, asr #1
    18e4:	46410c1c 			; <UNDEFINED> instruction: 0x46410c1c
    18e8:	ce060052 	mcrgt	0, 0, r0, cr6, cr2, {2}
    18ec:	0001a005 	andeq	sl, r1, r5
    18f0:	0d002000 	stceq	0, cr2, [r0, #-0]
    18f4:	000000cd 	andeq	r0, r0, sp, asr #1
    18f8:	000001a0 	andeq	r0, r0, r0, lsr #3
    18fc:	0000900e 	andeq	r9, r0, lr
    1900:	05000100 	streq	r0, [r0, #-256]	; 0xffffff00
    1904:	00000190 	muleq	r0, r0, r1
    1908:	000f800f 	andeq	r8, pc, pc
    190c:	05cf0600 	strbeq	r0, [pc, #1536]	; 1f14 <startup-0x1fffe0ec>
    1910:	00000104 	andeq	r0, r0, r4, lsl #2
    1914:	37010710 	smladcc	r1, r0, r7, r0
    1918:	07000000 	streq	r0, [r0, -r0]
    191c:	0001d742 	andeq	sp, r1, r2, asr #14
    1920:	08780900 	ldmdaeq	r8!, {r8, fp}^
    1924:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    1928:	0000070f 	andeq	r0, r0, pc, lsl #14
    192c:	027a0901 	rsbseq	r0, sl, #16384	; 0x4000
    1930:	09020000 	stmdbeq	r2, {}	; <UNPREDICTABLE>
    1934:	000002b6 			; <UNDEFINED> instruction: 0x000002b6
    1938:	72030003 	andvc	r0, r3, #3
    193c:	0700000d 	streq	r0, [r0, -sp]
    1940:	0001b147 	andeq	fp, r1, r7, asr #2
    1944:	01071000 	mrseq	r1, (UNDEF: 7)
    1948:	00000037 	andeq	r0, r0, r7, lsr r0
    194c:	01fc4f07 	mvnseq	r4, r7, lsl #30
    1950:	35090000 	strcc	r0, [r9, #-0]
    1954:	00000004 	andeq	r0, r0, r4
    1958:	00037709 	andeq	r7, r3, r9, lsl #14
    195c:	03000100 	movweq	r0, #256	; 0x100
    1960:	00000113 	andeq	r0, r0, r3, lsl r1
    1964:	01e25207 	mvneq	r5, r7, lsl #4
    1968:	07100000 	ldreq	r0, [r0, -r0]
    196c:	00003701 	andeq	r3, r0, r1, lsl #14
    1970:	2d5a0700 	ldclcs	7, cr0, [sl, #-0]
    1974:	09000002 	stmdbeq	r0, {r1}
    1978:	0000052a 	andeq	r0, r0, sl, lsr #10
    197c:	09500900 	ldmdbeq	r0, {r8, fp}^
    1980:	09010000 	stmdbeq	r1, {}	; <UNPREDICTABLE>
    1984:	00001198 	muleq	r0, r8, r1
    1988:	0a0a0902 	beq	283d98 <startup-0x1fd7c268>
    198c:	00030000 	andeq	r0, r3, r0
    1990:	000e6f03 	andeq	r6, lr, r3, lsl #30
    1994:	075f0700 	ldrbeq	r0, [pc, -r0, lsl #14]
    1998:	10000002 	andne	r0, r0, r2
    199c:	00370107 	eorseq	r0, r7, r7, lsl #2
    19a0:	6e070000 	cdpvs	0, 0, cr0, cr7, cr0, {0}
    19a4:	00000258 	andeq	r0, r0, r8, asr r2
    19a8:	00009b09 	andeq	r9, r0, r9, lsl #22
    19ac:	3e090000 	cdpcc	0, 0, cr0, cr9, cr0, {0}
    19b0:	01000010 	tsteq	r0, r0, lsl r0
    19b4:	0001fe09 	andeq	pc, r1, r9, lsl #28
    19b8:	03000200 	movweq	r0, #512	; 0x200
    19bc:	000004a9 	andeq	r0, r0, r9, lsr #9
    19c0:	02387207 	eorseq	r7, r8, #1879048192	; 0x70000000
    19c4:	07100000 	ldreq	r0, [r0, -r0]
    19c8:	00003701 	andeq	r3, r0, r1, lsl #14
    19cc:	7d7a0700 	ldclvc	7, cr0, [sl, #-0]
    19d0:	09000002 	stmdbeq	r0, {r1}
    19d4:	00001202 	andeq	r1, r0, r2, lsl #4
    19d8:	11c20900 	bicne	r0, r2, r0, lsl #18
    19dc:	00010000 	andeq	r0, r1, r0
    19e0:	00132d03 	andseq	r2, r3, r3, lsl #26
    19e4:	637d0700 	cmnvs	sp, #0, 14
    19e8:	11000002 	tstne	r0, r2
    19ec:	cd840708 	stcgt	7, cr0, [r4, #32]
    19f0:	12000002 	andne	r0, r0, #2
    19f4:	00000e93 	muleq	r0, r3, lr
    19f8:	00c28607 	sbceq	r8, r2, r7, lsl #12
    19fc:	12000000 	andne	r0, r0, #0
    1a00:	00000d30 	andeq	r0, r0, r0, lsr sp
    1a04:	01d78907 	bicseq	r8, r7, r7, lsl #18
    1a08:	12040000 	andne	r0, r4, #0
    1a0c:	00000adf 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    1a10:	022d8c07 	eoreq	r8, sp, #1792	; 0x700
    1a14:	12050000 	andne	r0, r5, #0
    1a18:	00000929 	andeq	r0, r0, r9, lsr #18
    1a1c:	01fc8f07 	mvnseq	r8, r7, lsl #30
    1a20:	12060000 	andne	r0, r6, #0
    1a24:	00000ec0 	andeq	r0, r0, r0, asr #29
    1a28:	02589207 	subseq	r9, r8, #1879048192	; 0x70000000
    1a2c:	00070000 	andeq	r0, r7, r0
    1a30:	00038503 	andeq	r8, r3, r3, lsl #10
    1a34:	88940700 	ldmhi	r4, {r8, r9, sl}
    1a38:	13000002 	movwne	r0, #2
    1a3c:	0000136a 	andeq	r1, r0, sl, ror #6
    1a40:	46024301 	strmi	r4, [r2], -r1, lsl #6
    1a44:	a4200015 	strtge	r0, [r0], #-21	; 0xffffffeb
    1a48:	01000000 	mrseq	r0, (UNDEF: 0)
    1a4c:	00033a9c 	muleq	r3, ip, sl
    1a50:	134d1400 	movtne	r1, #54272	; 0xd400
    1a54:	43010000 	movwmi	r0, #4096	; 0x1000
    1a58:	00033a02 	andeq	r3, r3, r2, lsl #20
    1a5c:	6c910200 	lfmvs	f0, 4, [r1], {0}
    1a60:	0012f814 	andseq	pc, r2, r4, lsl r8	; <UNPREDICTABLE>
    1a64:	02430100 	subeq	r0, r3, #0, 2
    1a68:	000000a2 	andeq	r0, r0, r2, lsr #1
    1a6c:	146a9102 	strbtne	r9, [sl], #-258	; 0xfffffefe
    1a70:	000011de 	ldrdeq	r1, [r0], -lr
    1a74:	97024301 	strls	r4, [r2, -r1, lsl #6]
    1a78:	02000000 	andeq	r0, r0, #0
    1a7c:	e6156991 			; <UNDEFINED> instruction: 0xe6156991
    1a80:	01000011 	tsteq	r0, r1, lsl r0
    1a84:	00c20245 	sbceq	r0, r2, r5, asr #4
    1a88:	91020000 	mrsls	r0, (UNDEF: 2)
    1a8c:	13631574 	cmnne	r3, #116, 10	; 0x1d000000
    1a90:	46010000 	strmi	r0, [r1], -r0
    1a94:	0000c202 	andeq	ip, r0, r2, lsl #4
    1a98:	70910200 	addsvc	r0, r1, r0, lsl #4
    1a9c:	a5041600 	strge	r1, [r4, #-1536]	; 0xfffffa00
    1aa0:	13000001 	movwne	r0, #1
    1aa4:	00001353 	andeq	r1, r0, r3, asr r3
    1aa8:	2201f001 	andcs	pc, r1, #1
    1aac:	24200015 	strtcs	r0, [r0], #-21	; 0xffffffeb
    1ab0:	01000000 	mrseq	r0, (UNDEF: 0)
    1ab4:	0003759c 	muleq	r3, ip, r5
    1ab8:	134d1400 	movtne	r1, #54272	; 0xd400
    1abc:	f0010000 			; <UNDEFINED> instruction: 0xf0010000
    1ac0:	00033a01 	andeq	r3, r3, r1, lsl #20
    1ac4:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    1ac8:	000e9314 	andeq	r9, lr, r4, lsl r3
    1acc:	01f00100 	mvnseq	r0, r0, lsl #2
    1ad0:	000000a2 	andeq	r0, r0, r2, lsr #1
    1ad4:	00729102 	rsbseq	r9, r2, r2, lsl #2
    1ad8:	00134213 	andseq	r4, r3, r3, lsl r2
    1adc:	01e00100 	mvneq	r0, r0, lsl #2
    1ae0:	20001504 	andcs	r1, r0, r4, lsl #10
    1ae4:	0000001e 	andeq	r0, r0, lr, lsl r0
    1ae8:	03aa9c01 			; <UNDEFINED> instruction: 0x03aa9c01
    1aec:	4d140000 	ldcmi	0, cr0, [r4, #-0]
    1af0:	01000013 	tsteq	r0, r3, lsl r0
    1af4:	033a01e0 	teqeq	sl, #224, 2	; 0x38
    1af8:	91020000 	mrsls	r0, (UNDEF: 2)
    1afc:	12f01474 	rscsne	r1, r0, #116, 8	; 0x74000000
    1b00:	e0010000 	and	r0, r1, r0
    1b04:	0000a201 	andeq	sl, r0, r1, lsl #4
    1b08:	72910200 	addsvc	r0, r1, #0, 4
    1b0c:	120c1300 	andne	r1, ip, #0, 6
    1b10:	c7010000 	strgt	r0, [r1, -r0]
    1b14:	0014ca01 	andseq	ip, r4, r1, lsl #20
    1b18:	00003a20 	andeq	r3, r0, r0, lsr #20
    1b1c:	ee9c0100 	fmle	f0, f4, f0
    1b20:	14000003 	strne	r0, [r0], #-3
    1b24:	0000134d 	andeq	r1, r0, sp, asr #6
    1b28:	3a01c701 	bcc	73734 <startup-0x1ff8c8cc>
    1b2c:	02000003 	andeq	r0, r0, #3
    1b30:	93147491 	tstls	r4, #-1862270976	; 0x91000000
    1b34:	0100000e 	tsteq	r0, lr
    1b38:	00a201c7 	adceq	r0, r2, r7, asr #3
    1b3c:	91020000 	mrsls	r0, (UNDEF: 2)
    1b40:	11fb1472 	mvnsne	r1, r2, ror r4
    1b44:	c7010000 	strgt	r0, [r1, -r0]
    1b48:	00027d01 	andeq	r7, r2, r1, lsl #26
    1b4c:	71910200 	orrsvc	r0, r1, r0, lsl #4
    1b50:	12311300 	eorsne	r1, r1, #0, 6
    1b54:	b1010000 	mrslt	r0, (UNDEF: 1)
    1b58:	0014ac01 	andseq	sl, r4, r1, lsl #24
    1b5c:	00001e20 	andeq	r1, r0, r0, lsr #28
    1b60:	239c0100 	orrscs	r0, ip, #0, 2
    1b64:	14000004 	strne	r0, [r0], #-4
    1b68:	0000134d 	andeq	r1, r0, sp, asr #6
    1b6c:	3a01b101 	bcc	6df78 <startup-0x1ff92088>
    1b70:	02000003 	andeq	r0, r0, #3
    1b74:	93147491 	tstls	r4, #-1862270976	; 0x91000000
    1b78:	0100000e 	tsteq	r0, lr
    1b7c:	00a201b1 	strhteq	r0, [r2], r1
    1b80:	91020000 	mrsls	r0, (UNDEF: 2)
    1b84:	1a130072 	bne	4c1d54 <startup-0x1fb3e2ac>
    1b88:	01000012 	tsteq	r0, r2, lsl r0
    1b8c:	148e019c 	strne	r0, [lr], #412	; 0x19c
    1b90:	001e2000 	andseq	r2, lr, r0
    1b94:	9c010000 	stcls	0, cr0, [r1], {-0}
    1b98:	00000458 	andeq	r0, r0, r8, asr r4
    1b9c:	00134d14 	andseq	r4, r3, r4, lsl sp
    1ba0:	019c0100 	orrseq	r0, ip, r0, lsl #2
    1ba4:	0000033a 	andeq	r0, r0, sl, lsr r3
    1ba8:	14749102 	ldrbtne	r9, [r4], #-258	; 0xfffffefe
    1bac:	00000e93 	muleq	r0, r3, lr
    1bb0:	a2019c01 	andge	r9, r1, #256	; 0x100
    1bb4:	02000000 	andeq	r0, r0, #0
    1bb8:	17007291 			; <UNDEFINED> instruction: 0x17007291
    1bbc:	000011ca 	andeq	r1, r0, sl, asr #3
    1bc0:	a2018801 	andge	r8, r1, #65536	; 0x10000
    1bc4:	78000000 	stmdavc	r0, {}	; <UNPREDICTABLE>
    1bc8:	16200014 			; <UNDEFINED> instruction: 0x16200014
    1bcc:	01000000 	mrseq	r0, (UNDEF: 0)
    1bd0:	0004829c 	muleq	r4, ip, r2
    1bd4:	134d1400 	movtne	r1, #54272	; 0xd400
    1bd8:	88010000 	stmdahi	r1, {}	; <UNPREDICTABLE>
    1bdc:	00033a01 	andeq	r3, r3, r1, lsl #20
    1be0:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    1be4:	137b1700 	cmnne	fp, #0, 14
    1be8:	6e010000 	cdpvs	0, 0, cr0, cr1, cr0, {0}
    1bec:	00009701 	andeq	r9, r0, r1, lsl #14
    1bf0:	00143600 	andseq	r3, r4, r0, lsl #12
    1bf4:	00004220 	andeq	r4, r0, r0, lsr #4
    1bf8:	ca9c0100 	bgt	fe702000 <APBAHBPrescTable+0xde6ff834>
    1bfc:	14000004 	strne	r0, [r0], #-4
    1c00:	0000134d 	andeq	r1, r0, sp, asr #6
    1c04:	3a016e01 	bcc	5d410 <startup-0x1ffa2bf0>
    1c08:	02000003 	andeq	r0, r0, #3
    1c0c:	93146c91 	tstls	r4, #37120	; 0x9100
    1c10:	0100000e 	tsteq	r0, lr
    1c14:	00a2016e 	adceq	r0, r2, lr, ror #2
    1c18:	91020000 	mrsls	r0, (UNDEF: 2)
    1c1c:	0f4b156a 	svceq	0x004b156a
    1c20:	70010000 	andvc	r0, r1, r0
    1c24:	00009701 	andeq	r9, r0, r1, lsl #14
    1c28:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    1c2c:	13071700 	movwne	r1, #30464	; 0x7700
    1c30:	5d010000 	stcpl	0, cr0, [r1, #-0]
    1c34:	0000a201 	andeq	sl, r0, r1, lsl #4
    1c38:	00142000 	andseq	r2, r4, r0
    1c3c:	00001620 	andeq	r1, r0, r0, lsr #12
    1c40:	f49c0100 			; <UNDEFINED> instruction: 0xf49c0100
    1c44:	14000004 	strne	r0, [r0], #-4
    1c48:	0000134d 	andeq	r1, r0, sp, asr #6
    1c4c:	3a015d01 	bcc	59058 <startup-0x1ffa6fa8>
    1c50:	02000003 	andeq	r0, r0, #3
    1c54:	17007491 			; <UNDEFINED> instruction: 0x17007491
    1c58:	000012ca 	andeq	r1, r0, sl, asr #5
    1c5c:	97014301 	strls	r4, [r1, -r1, lsl #6]
    1c60:	de000000 	cdple	0, 0, cr0, cr0, cr0, {0}
    1c64:	42200013 	eormi	r0, r0, #19
    1c68:	01000000 	mrseq	r0, (UNDEF: 0)
    1c6c:	00053c9c 	muleq	r5, ip, ip
    1c70:	134d1400 	movtne	r1, #54272	; 0xd400
    1c74:	43010000 	movwmi	r0, #4096	; 0x1000
    1c78:	00033a01 	andeq	r3, r3, r1, lsl #20
    1c7c:	6c910200 	lfmvs	f0, 4, [r1], {0}
    1c80:	000e9314 	andeq	r9, lr, r4, lsl r3
    1c84:	01430100 	mrseq	r0, (UNDEF: 83)
    1c88:	000000a2 	andeq	r0, r0, r2, lsr #1
    1c8c:	156a9102 	strbne	r9, [sl, #-258]!	; 0xfffffefe
    1c90:	00000f4b 	andeq	r0, r0, fp, asr #30
    1c94:	97014501 	strls	r4, [r1, -r1, lsl #10]
    1c98:	02000000 	andeq	r0, r0, #0
    1c9c:	13007791 	movwne	r7, #1937	; 0x791
    1ca0:	0000131a 	andeq	r1, r0, sl, lsl r3
    1ca4:	98011501 	stmdals	r1, {r0, r8, sl, ip}
    1ca8:	46200013 			; <UNDEFINED> instruction: 0x46200013
    1cac:	01000000 	mrseq	r0, (UNDEF: 0)
    1cb0:	0005809c 	muleq	r5, ip, r0
    1cb4:	134d1400 	movtne	r1, #54272	; 0xd400
    1cb8:	15010000 	strne	r0, [r1, #-0]
    1cbc:	00033a01 	andeq	r3, r3, r1, lsl #20
    1cc0:	6c910200 	lfmvs	f0, 4, [r1], {0}
    1cc4:	000e9314 	andeq	r9, lr, r4, lsl r3
    1cc8:	01150100 	tsteq	r5, r0, lsl #2
    1ccc:	000000a2 	andeq	r0, r0, r2, lsr #1
    1cd0:	186a9102 	stmdane	sl!, {r1, r8, ip, pc}^
    1cd4:	00706d74 	rsbseq	r6, r0, r4, ror sp
    1cd8:	cd011701 	stcgt	7, cr1, [r1, #-4]
    1cdc:	02000000 	andeq	r0, r0, #0
    1ce0:	19007491 	stmdbne	r0, {r0, r4, r7, sl, ip, sp, lr}
    1ce4:	000011eb 	andeq	r1, r0, fp, ror #3
    1ce8:	1364fe01 	msrne	SPSR_s, #1, 28
    1cec:	00342000 	eorseq	r2, r4, r0
    1cf0:	9c010000 	stcls	0, cr0, [r1], {-0}
    1cf4:	000005a4 	andeq	r0, r0, r4, lsr #11
    1cf8:	0012e01a 	andseq	lr, r2, sl, lsl r0
    1cfc:	a4fe0100 	ldrbtge	r0, [lr], #256	; 0x100
    1d00:	02000005 	andeq	r0, r0, #5
    1d04:	16007491 			; <UNDEFINED> instruction: 0x16007491
    1d08:	0002cd04 	andeq	ip, r2, r4, lsl #26
    1d0c:	12271900 	eorne	r1, r7, #0, 18
    1d10:	ca010000 	bgt	41d18 <startup-0x1ffbe2e8>
    1d14:	2000124c 	andcs	r1, r0, ip, asr #4
    1d18:	00000118 	andeq	r0, r0, r8, lsl r1
    1d1c:	06069c01 	streq	r9, [r6], -r1, lsl #24
    1d20:	4d1a0000 	ldcmi	0, cr0, [sl, #-0]
    1d24:	01000013 	tsteq	r0, r3, lsl r0
    1d28:	00033aca 	andeq	r3, r3, sl, asr #21
    1d2c:	64910200 	ldrvs	r0, [r1], #512	; 0x200
    1d30:	0012e01a 	andseq	lr, r2, sl, lsl r0
    1d34:	a4ca0100 	strbge	r0, [sl], #256	; 0x100
    1d38:	02000005 	andeq	r0, r0, #5
    1d3c:	bb1b6091 	bllt	6d9f88 <startup-0x1f926078>
    1d40:	01000011 	tsteq	r0, r1, lsl r0
    1d44:	0000c2cc 	andeq	ip, r0, ip, asr #5
    1d48:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    1d4c:	736f701c 	cmnvc	pc, #28
    1d50:	c2cc0100 	sbcgt	r0, ip, #0, 2
    1d54:	02000000 	andeq	r0, r0, #0
    1d58:	371b7091 			; <UNDEFINED> instruction: 0x371b7091
    1d5c:	01000013 	tsteq	r0, r3, lsl r0
    1d60:	0000c2cc 	andeq	ip, r0, ip, asr #5
    1d64:	6c910200 	lfmvs	f0, 4, [r1], {0}
    1d68:	12be1d00 	adcsne	r1, lr, #0, 26
    1d6c:	7f010000 	svcvc	0x00010000
    1d70:	200010dc 	ldrdcs	r1, [r0], -ip
    1d74:	00000170 	andeq	r0, r0, r0, ror r1
    1d78:	4d1a9c01 	ldcmi	12, cr9, [sl, #-4]
    1d7c:	01000013 	tsteq	r0, r3, lsl r0
    1d80:	00033a7f 	andeq	r3, r3, pc, ror sl
    1d84:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    1d88:	05430000 	strbeq	r0, [r3, #-0]
    1d8c:	00040000 	andeq	r0, r4, r0
    1d90:	000004b1 			; <UNDEFINED> instruction: 0x000004b1
    1d94:	05e70104 	strbeq	r0, [r7, #260]!	; 0x104
    1d98:	b00c0000 	andlt	r0, ip, r0
    1d9c:	47000014 	smladmi	r0, r4, r0, r0
    1da0:	ec000005 	stc	0, cr0, [r0], {5}
    1da4:	c4200015 	strtgt	r0, [r0], #-21	; 0xffffffeb
    1da8:	37000001 	strcc	r0, [r0, -r1]
    1dac:	02000007 	andeq	r0, r0, #7
    1db0:	03f40601 	mvnseq	r0, #1048576	; 0x100000
    1db4:	cc030000 	stcgt	0, cr0, [r3], {-0}
    1db8:	02000001 	andeq	r0, r0, #1
    1dbc:	0000372b 	andeq	r3, r0, fp, lsr #14
    1dc0:	08010200 	stmdaeq	r1, {r9}
    1dc4:	000003f2 	strdeq	r0, [r0], -r2
    1dc8:	05050202 	streq	r0, [r5, #-514]	; 0xfffffdfe
    1dcc:	0200000f 	andeq	r0, r0, #15
    1dd0:	107a0702 	rsbsne	r0, sl, r2, lsl #14
    1dd4:	1f030000 	svcne	0x00030000
    1dd8:	02000011 	andeq	r0, r0, #17
    1ddc:	0000574d 	andeq	r5, r0, sp, asr #14
    1de0:	05040200 	streq	r0, [r4, #-512]	; 0xfffffe00
    1de4:	0000098b 	andeq	r0, r0, fp, lsl #19
    1de8:	00093403 	andeq	r3, r9, r3, lsl #8
    1dec:	694f0200 	stmdbvs	pc, {r9}^	; <UNPREDICTABLE>
    1df0:	02000000 	andeq	r0, r0, #0
    1df4:	0cde0704 	ldcleq	7, cr0, [lr], {4}
    1df8:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    1dfc:	00098605 	andeq	r8, r9, r5, lsl #12
    1e00:	07080200 	streq	r0, [r8, -r0, lsl #4]
    1e04:	00000cd9 	ldrdeq	r0, [r0], -r9
    1e08:	69050404 	stmdbvs	r5, {r2, sl}
    1e0c:	0200746e 	andeq	r7, r0, #1845493760	; 0x6e000000
    1e10:	0ce30704 	stcleq	7, cr0, [r3], #16
    1e14:	ce030000 	cdpgt	0, 0, cr0, cr3, cr0, {0}
    1e18:	03000001 	movweq	r0, #1
    1e1c:	00002c18 	andeq	r2, r0, r8, lsl ip
    1e20:	008c0500 	addeq	r0, ip, r0, lsl #10
    1e24:	21030000 	mrscs	r0, (UNDEF: 3)
    1e28:	03000011 	movweq	r0, #17
    1e2c:	00004c2c 	andeq	r4, r0, ip, lsr #24
    1e30:	009c0500 	addseq	r0, ip, r0, lsl #10
    1e34:	36030000 	strcc	r0, [r3], -r0
    1e38:	03000009 	movweq	r0, #9
    1e3c:	00005e30 	andeq	r5, r0, r0, lsr lr
    1e40:	00ac0500 	adceq	r0, ip, r0, lsl #10
    1e44:	b7060000 	strlt	r0, [r6, -r0]
    1e48:	07000000 	streq	r0, [r0, -r0]
    1e4c:	a0040e04 	andge	r0, r4, r4, lsl #28
    1e50:	00017d01 	andeq	r7, r1, r1, lsl #26
    1e54:	113d0800 	teqne	sp, r0, lsl #16
    1e58:	a2040000 	andge	r0, r4, #0
    1e5c:	00018d01 	andeq	r8, r1, r1, lsl #26
    1e60:	de080000 	cdple	0, 0, cr0, cr8, cr0, {0}
    1e64:	04000003 	streq	r0, [r0], #-3
    1e68:	019201a3 	orrseq	r0, r2, r3, lsr #3
    1e6c:	08200000 	stmdaeq	r0!, {}	; <UNPREDICTABLE>
    1e70:	00000d63 	andeq	r0, r0, r3, ror #26
    1e74:	8d01a404 	cfstrshi	mvf10, [r1, #-16]
    1e78:	80000001 	andhi	r0, r0, r1
    1e7c:	00000508 	andeq	r0, r0, r8, lsl #10
    1e80:	01a50400 			; <UNDEFINED> instruction: 0x01a50400
    1e84:	00000192 	muleq	r0, r2, r1
    1e88:	10bb09a0 	adcsne	r0, fp, r0, lsr #19
    1e8c:	a6040000 	strge	r0, [r4], -r0
    1e90:	00018d01 	andeq	r8, r1, r1, lsl #26
    1e94:	09010000 	stmdbeq	r1, {}	; <UNPREDICTABLE>
    1e98:	0000046c 	andeq	r0, r0, ip, ror #8
    1e9c:	9201a704 	andls	sl, r1, #4, 14	; 0x100000
    1ea0:	20000001 	andcs	r0, r0, r1
    1ea4:	01770901 	cmneq	r7, r1, lsl #18
    1ea8:	a8040000 	stmdage	r4, {}	; <UNPREDICTABLE>
    1eac:	00018d01 	andeq	r8, r1, r1, lsl #26
    1eb0:	09018000 	stmdbeq	r1, {pc}
    1eb4:	00000476 	andeq	r0, r0, r6, ror r4
    1eb8:	9201a904 	andls	sl, r1, #4, 18	; 0x10000
    1ebc:	a0000001 	andge	r0, r0, r1
    1ec0:	04300901 	ldrteq	r0, [r0], #-2305	; 0xfffff6ff
    1ec4:	aa040000 	bge	101ecc <startup-0x1fefe134>
    1ec8:	00018d01 	andeq	r8, r1, r1, lsl #26
    1ecc:	09020000 	stmdbeq	r2, {}	; <UNPREDICTABLE>
    1ed0:	00000412 	andeq	r0, r0, r2, lsl r4
    1ed4:	a201ab04 	andge	sl, r1, #4, 22	; 0x1000
    1ed8:	20000001 	andcs	r0, r0, r1
    1edc:	50490a02 	subpl	r0, r9, r2, lsl #20
    1ee0:	01ac0400 			; <UNDEFINED> instruction: 0x01ac0400
    1ee4:	000001c2 	andeq	r0, r0, r2, asr #3
    1ee8:	1c090300 	stcne	3, cr0, [r9], {-0}
    1eec:	04000004 	streq	r0, [r0], #-4
    1ef0:	01c701ad 	biceq	r0, r7, sp, lsr #3
    1ef4:	03f00000 	mvnseq	r0, #0
    1ef8:	0006c609 	andeq	ip, r6, r9, lsl #12
    1efc:	01ae0400 			; <UNDEFINED> instruction: 0x01ae0400
    1f00:	000000b7 	strheq	r0, [r0], -r7
    1f04:	0b000e00 	bleq	570c <startup-0x1fffa8f4>
    1f08:	000000b7 	strheq	r0, [r0], -r7
    1f0c:	0000018d 	andeq	r0, r0, sp, lsl #3
    1f10:	0000850c 	andeq	r8, r0, ip, lsl #10
    1f14:	05000700 	streq	r0, [r0, #-1792]	; 0xfffff900
    1f18:	0000017d 	andeq	r0, r0, sp, ror r1
    1f1c:	0000ac0b 	andeq	sl, r0, fp, lsl #24
    1f20:	0001a200 	andeq	sl, r1, r0, lsl #4
    1f24:	00850c00 	addeq	r0, r5, r0, lsl #24
    1f28:	00170000 	andseq	r0, r7, r0
    1f2c:	0000ac0b 	andeq	sl, r0, fp, lsl #24
    1f30:	0001b200 	andeq	fp, r1, r0, lsl #4
    1f34:	00850c00 	addeq	r0, r5, r0, lsl #24
    1f38:	00370000 	eorseq	r0, r7, r0
    1f3c:	0000970b 	andeq	r9, r0, fp, lsl #14
    1f40:	0001c200 	andeq	ip, r1, r0, lsl #4
    1f44:	00850c00 	addeq	r0, r5, r0, lsl #24
    1f48:	00ef0000 	rsceq	r0, pc, r0
    1f4c:	0001b205 	andeq	fp, r1, r5, lsl #4
    1f50:	00ac0b00 	adceq	r0, ip, r0, lsl #22
    1f54:	01d80000 	bicseq	r0, r8, r0
    1f58:	850d0000 	strhi	r0, [sp, #-0]
    1f5c:	83000000 	movwhi	r0, #0
    1f60:	990e0002 	stmdbls	lr, {r1}
    1f64:	0400000c 	streq	r0, [r0], #-12
    1f68:	00c101af 	sbceq	r0, r1, pc, lsr #3
    1f6c:	8c0f0000 	stchi	0, cr0, [pc], {-0}
    1f70:	ff01c004 			; <UNDEFINED> instruction: 0xff01c004
    1f74:	08000002 	stmdaeq	r0, {r1}
    1f78:	0000023d 	andeq	r0, r0, sp, lsr r2
    1f7c:	bc01c204 	sfmlt	f4, 1, [r1], {4}
    1f80:	00000000 	andeq	r0, r0, r0
    1f84:	00036608 	andeq	r6, r3, r8, lsl #12
    1f88:	01c30400 	biceq	r0, r3, r0, lsl #8
    1f8c:	000000b7 	strheq	r0, [r0], -r7
    1f90:	00ac0804 	adceq	r0, ip, r4, lsl #16
    1f94:	c4040000 	strgt	r0, [r4], #-0
    1f98:	0000b701 	andeq	fp, r0, r1, lsl #14
    1f9c:	0d080800 	stceq	8, cr0, [r8, #-0]
    1fa0:	04000002 	streq	r0, [r0], #-2
    1fa4:	00b701c5 	adcseq	r0, r7, r5, asr #3
    1fa8:	100c0000 	andne	r0, ip, r0
    1fac:	00524353 	subseq	r4, r2, r3, asr r3
    1fb0:	b701c604 	strlt	ip, [r1, -r4, lsl #12]
    1fb4:	10000000 	andne	r0, r0, r0
    1fb8:	52434310 	subpl	r4, r3, #16, 6	; 0x40000000
    1fbc:	01c70400 	biceq	r0, r7, r0, lsl #8
    1fc0:	000000b7 	strheq	r0, [r0], -r7
    1fc4:	48531014 	ldmdami	r3, {r2, r4, ip}^
    1fc8:	c8040050 	stmdagt	r4, {r4, r6}
    1fcc:	00030f01 	andeq	r0, r3, r1, lsl #30
    1fd0:	af081800 	svcge	0x00081800
    1fd4:	04000006 	streq	r0, [r0], #-6
    1fd8:	00b701c9 	adcseq	r0, r7, r9, asr #3
    1fdc:	08240000 	stmdaeq	r4!, {}	; <UNPREDICTABLE>
    1fe0:	00000e16 	andeq	r0, r0, r6, lsl lr
    1fe4:	b701ca04 	strlt	ip, [r1, -r4, lsl #20]
    1fe8:	28000000 	stmdacs	r0, {}	; <UNPREDICTABLE>
    1fec:	00058a08 	andeq	r8, r5, r8, lsl #20
    1ff0:	01cb0400 	biceq	r0, fp, r0, lsl #8
    1ff4:	000000b7 	strheq	r0, [r0], -r7
    1ff8:	04ba082c 	ldrteq	r0, [sl], #2092	; 0x82c
    1ffc:	cc040000 	stcgt	0, cr0, [r4], {-0}
    2000:	0000b701 	andeq	fp, r0, r1, lsl #14
    2004:	ff083000 			; <UNDEFINED> instruction: 0xff083000
    2008:	0400000e 	streq	r0, [r0], #-14
    200c:	00b701cd 	adcseq	r0, r7, sp, asr #3
    2010:	08340000 	ldmdaeq	r4!, {}	; <UNPREDICTABLE>
    2014:	00000b65 	andeq	r0, r0, r5, ror #22
    2018:	b701ce04 	strlt	ip, [r1, -r4, lsl #28]
    201c:	38000000 	stmdacc	r0, {}	; <UNPREDICTABLE>
    2020:	000ddf08 	andeq	sp, sp, r8, lsl #30
    2024:	01cf0400 	biceq	r0, pc, r0, lsl #8
    2028:	000000b7 	strheq	r0, [r0], -r7
    202c:	4650103c 			; <UNDEFINED> instruction: 0x4650103c
    2030:	d0040052 	andle	r0, r4, r2, asr r0
    2034:	00032901 	andeq	r2, r3, r1, lsl #18
    2038:	44104000 	ldrmi	r4, [r0], #-0
    203c:	04005246 	streq	r5, [r0], #-582	; 0xfffffdba
    2040:	00bc01d1 	ldrsbteq	r0, [ip], r1
    2044:	10480000 	subne	r0, r8, r0
    2048:	00524441 	subseq	r4, r2, r1, asr #8
    204c:	bc01d204 	sfmlt	f5, 1, [r1], {4}
    2050:	4c000000 	stcmi	0, cr0, [r0], {-0}
    2054:	000eee08 	andeq	lr, lr, r8, lsl #28
    2058:	01d30400 	bicseq	r0, r3, r0, lsl #8
    205c:	00000343 	andeq	r0, r0, r3, asr #6
    2060:	0f280850 	svceq	0x00280850
    2064:	d4040000 	strle	r0, [r4], #-0
    2068:	00035d01 	andeq	r5, r3, r1, lsl #26
    206c:	de086000 	cdple	0, 0, cr6, cr8, cr0, {0}
    2070:	04000003 	streq	r0, [r0], #-3
    2074:	036201d5 	cmneq	r2, #1073741877	; 0x40000035
    2078:	08740000 	ldmdaeq	r4!, {}^	; <UNPREDICTABLE>
    207c:	000010b5 	strheq	r1, [r0], -r5
    2080:	b701d604 	strlt	sp, [r1, -r4, lsl #12]
    2084:	88000000 	stmdahi	r0, {}	; <UNPREDICTABLE>
    2088:	00970b00 	addseq	r0, r7, r0, lsl #22
    208c:	030f0000 	movweq	r0, #61440	; 0xf000
    2090:	850c0000 	strhi	r0, [ip, #-0]
    2094:	0b000000 	bleq	209c <startup-0x1fffdf64>
    2098:	02ff0500 	rscseq	r0, pc, #0, 10
    209c:	bc0b0000 	stclt	0, cr0, [fp], {-0}
    20a0:	24000000 	strcs	r0, [r0], #-0
    20a4:	0c000003 	stceq	0, cr0, [r0], {3}
    20a8:	00000085 	andeq	r0, r0, r5, lsl #1
    20ac:	14060001 	strne	r0, [r6], #-1
    20b0:	05000003 	streq	r0, [r0, #-3]
    20b4:	00000324 	andeq	r0, r0, r4, lsr #6
    20b8:	0000bc0b 	andeq	fp, r0, fp, lsl #24
    20bc:	00033e00 	andeq	r3, r3, r0, lsl #28
    20c0:	00850c00 	addeq	r0, r5, r0, lsl #24
    20c4:	00030000 	andeq	r0, r3, r0
    20c8:	00032e06 	andeq	r2, r3, r6, lsl #28
    20cc:	033e0500 	teqeq	lr, #0, 10
    20d0:	bc0b0000 	stclt	0, cr0, [fp], {-0}
    20d4:	58000000 	stmdapl	r0, {}	; <UNPREDICTABLE>
    20d8:	0c000003 	stceq	0, cr0, [r0], {3}
    20dc:	00000085 	andeq	r0, r0, r5, lsl #1
    20e0:	48060004 	stmdami	r6, {r2}
    20e4:	05000003 	streq	r0, [r0, #-3]
    20e8:	00000358 	andeq	r0, r0, r8, asr r3
    20ec:	0000ac0b 	andeq	sl, r0, fp, lsl #24
    20f0:	00037200 	andeq	r7, r3, r0, lsl #4
    20f4:	00850c00 	addeq	r0, r5, r0, lsl #24
    20f8:	00040000 	andeq	r0, r4, r0
    20fc:	0004a00e 	andeq	sl, r4, lr
    2100:	01d70400 	bicseq	r0, r7, r0, lsl #8
    2104:	000001e4 	andeq	r0, r0, r4, ror #3
    2108:	bf04100f 	svclt	0x0004100f
    210c:	0003bc02 	andeq	fp, r3, r2, lsl #24
    2110:	0ac30800 	beq	ff0c4118 <APBAHBPrescTable+0xdf0c194c>
    2114:	c1040000 	mrsgt	r0, (UNDEF: 4)
    2118:	0000b702 	andeq	fp, r0, r2, lsl #14
    211c:	6a080000 	bvs	202124 <startup-0x1fdfdedc>
    2120:	0400000e 	streq	r0, [r0], #-14
    2124:	00b702c2 	adcseq	r0, r7, r2, asr #5
    2128:	10040000 	andne	r0, r4, r0
    212c:	004c4156 	subeq	r4, ip, r6, asr r1
    2130:	b702c304 	strlt	ip, [r2, -r4, lsl #6]
    2134:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    2138:	000deb08 	andeq	lr, sp, r8, lsl #22
    213c:	02c40400 	sbceq	r0, r4, #0, 8
    2140:	000000bc 	strheq	r0, [r0], -ip
    2144:	f90e000c 			; <UNDEFINED> instruction: 0xf90e000c
    2148:	0400000b 	streq	r0, [r0], #-11
    214c:	037e02c5 	cmneq	lr, #1342177292	; 0x5000000c
    2150:	a0110000 	andsge	r0, r1, r0
    2154:	0400000f 	streq	r0, [r0], #-15
    2158:	00a706fa 	strdeq	r0, [r7], sl	; <UNPREDICTABLE>
    215c:	40120000 	andsmi	r0, r2, r0
    2160:	05000008 	streq	r0, [r0, #-8]
    2164:	0000ac3b 	andeq	sl, r0, fp, lsr ip
    2168:	01071300 	mrseq	r1, SP_und
    216c:	00000037 	andeq	r0, r0, r7, lsr r0
    2170:	fa035f06 	blx	d9d90 <startup-0x1ff26270>
    2174:	14000003 	strne	r0, [r0], #-3
    2178:	000009c4 	andeq	r0, r0, r4, asr #19
    217c:	0f551400 	svceq	0x00551400
    2180:	00010000 	andeq	r0, r1, r0
    2184:	000ca30e 	andeq	sl, ip, lr, lsl #6
    2188:	035f0600 	cmpeq	pc, #0, 12
    218c:	000003df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    2190:	36070415 			; <UNDEFINED> instruction: 0x36070415
    2194:	0000043f 	andeq	r0, r0, pc, lsr r4
    2198:	00145616 	andseq	r5, r4, r6, lsl r6
    219c:	8c380700 	ldchi	7, cr0, [r8], #-0
    21a0:	00000000 	andeq	r0, r0, r0
    21a4:	00148116 	andseq	r8, r4, r6, lsl r1
    21a8:	8c3d0700 	ldchi	7, cr0, [sp], #-0
    21ac:	01000000 	mrseq	r0, (UNDEF: 0)
    21b0:	00146616 	andseq	r6, r4, r6, lsl r6
    21b4:	8c420700 	mcrrhi	7, 0, r0, r2, cr0
    21b8:	02000000 	andeq	r0, r0, #0
    21bc:	0013a316 	andseq	sl, r3, r6, lsl r3
    21c0:	fa470700 	blx	11c3dc8 <startup-0x1ee3c238>
    21c4:	03000003 	movweq	r0, #3
    21c8:	13920300 	orrsne	r0, r2, #0, 6
    21cc:	4a070000 	bmi	1c21d4 <startup-0x1fe3de2c>
    21d0:	00000406 	andeq	r0, r0, r6, lsl #8
    21d4:	00143217 	andseq	r3, r4, r7, lsl r2
    21d8:	7cdf0100 	ldfvce	f0, [pc], {0}
    21dc:	34200017 	strtcc	r0, [r0], #-23	; 0xffffffe9
    21e0:	01000000 	mrseq	r0, (UNDEF: 0)
    21e4:	00046e9c 	muleq	r4, ip, lr
    21e8:	13b61800 			; <UNDEFINED> instruction: 0x13b61800
    21ec:	df010000 	svcle	0x00010000
    21f0:	000000ac 	andeq	r0, r0, ip, lsr #1
    21f4:	00749102 	rsbseq	r9, r4, r2, lsl #2
    21f8:	00141e17 	andseq	r1, r4, r7, lsl lr
    21fc:	34c70100 	strbcc	r0, [r7], #256	; 0x100
    2200:	48200017 	stmdami	r0!, {r0, r1, r2, r4}
    2204:	01000000 	mrseq	r0, (UNDEF: 0)
    2208:	0004a09c 	muleq	r4, ip, r0
    220c:	15241800 	strne	r1, [r4, #-2048]!	; 0xfffff800
    2210:	c7010000 	strgt	r0, [r1, -r0]
    2214:	0000008c 	andeq	r0, r0, ip, lsl #1
    2218:	18779102 	ldmdane	r7!, {r1, r8, ip, pc}^
    221c:	00000ad6 	ldrdeq	r0, [r0], -r6
    2220:	03fac701 	mvnseq	ip, #262144	; 0x40000
    2224:	91020000 	mrsls	r0, (UNDEF: 2)
    2228:	03170076 	tsteq	r7, #118	; 0x76
    222c:	01000014 	tsteq	r0, r4, lsl r0
    2230:	001708b4 			; <UNDEFINED> instruction: 0x001708b4
    2234:	00002c20 	andeq	r2, r0, r0, lsr #24
    2238:	d29c0100 	addsle	r0, ip, #0, 2
    223c:	18000004 	stmdane	r0, {r2}
    2240:	000014a3 	andeq	r1, r0, r3, lsr #9
    2244:	00acb401 	adceq	fp, ip, r1, lsl #8
    2248:	91020000 	mrsls	r0, (UNDEF: 2)
    224c:	13fc1874 	mvnsne	r1, #116, 16	; 0x740000
    2250:	b4010000 	strlt	r0, [r1], #-0
    2254:	000000ac 	andeq	r0, r0, ip, lsr #1
    2258:	00709102 	rsbseq	r9, r0, r2, lsl #2
    225c:	0013eb17 	andseq	lr, r3, r7, lsl fp
    2260:	10880100 	addne	r0, r8, r0, lsl #2
    2264:	f8200016 			; <UNDEFINED> instruction: 0xf8200016
    2268:	01000000 	mrseq	r0, (UNDEF: 0)
    226c:	0005209c 	muleq	r5, ip, r0
    2270:	13c81800 	bicne	r1, r8, #0, 16
    2274:	88010000 	stmdahi	r1, {}	; <UNPREDICTABLE>
    2278:	00000520 	andeq	r0, r0, r0, lsr #10
    227c:	19649102 	stmdbne	r4!, {r1, r8, ip, pc}^
    2280:	0000144a 	andeq	r1, r0, sl, asr #8
    2284:	008c8a01 	addeq	r8, ip, r1, lsl #20
    2288:	91020000 	mrsls	r0, (UNDEF: 2)
    228c:	13f5196f 	mvnsne	r1, #1818624	; 0x1bc000
    2290:	8a010000 	bhi	42298 <startup-0x1ffbdd68>
    2294:	0000008c 	andeq	r0, r0, ip, lsl #1
    2298:	196e9102 	stmdbne	lr!, {r1, r8, ip, pc}^
    229c:	00001417 	andeq	r1, r0, r7, lsl r4
    22a0:	008c8a01 	addeq	r8, ip, r1, lsl #20
    22a4:	91020000 	mrsls	r0, (UNDEF: 2)
    22a8:	041a006d 	ldreq	r0, [sl], #-109	; 0xffffff93
    22ac:	0000043f 	andeq	r0, r0, pc, lsr r4
    22b0:	0015311b 	andseq	r3, r5, fp, lsl r1
    22b4:	ec760100 	ldfe	f0, [r6], #-0
    22b8:	24200015 	strtcs	r0, [r0], #-21	; 0xffffffeb
    22bc:	01000000 	mrseq	r0, (UNDEF: 0)
    22c0:	13d8189c 	bicsne	r1, r8, #156, 16	; 0x9c0000
    22c4:	76010000 	strvc	r0, [r1], -r0
    22c8:	000000ac 	andeq	r0, r0, ip, lsr #1
    22cc:	00749102 	rsbseq	r9, r4, r2, lsl #2
    22d0:	00016900 	andeq	r6, r1, r0, lsl #18
    22d4:	25000400 	strcs	r0, [r0, #-1024]	; 0xfffffc00
    22d8:	04000006 	streq	r0, [r0], #-6
    22dc:	0005e701 	andeq	lr, r5, r1, lsl #14
    22e0:	15540c00 	ldrbne	r0, [r4, #-3072]	; 0xfffff400
    22e4:	05470000 	strbeq	r0, [r7, #-0]
    22e8:	17b00000 	ldrne	r0, [r0, r0]!
    22ec:	00e82000 	rsceq	r2, r8, r0
    22f0:	09350000 	ldmdbeq	r5!, {}	; <UNPREDICTABLE>
    22f4:	01020000 	mrseq	r0, (UNDEF: 2)
    22f8:	0003f406 	andeq	pc, r3, r6, lsl #8
    22fc:	01cc0300 	biceq	r0, ip, r0, lsl #6
    2300:	2b020000 	blcs	82308 <startup-0x1ff7dcf8>
    2304:	00000037 	andeq	r0, r0, r7, lsr r0
    2308:	f2080102 	vrhadd.s8	d0, d8, d2
    230c:	02000003 	andeq	r0, r0, #3
    2310:	0f050502 	svceq	0x00050502
    2314:	02020000 	andeq	r0, r2, #0
    2318:	00107a07 	andseq	r7, r0, r7, lsl #20
    231c:	05040200 	streq	r0, [r4, #-512]	; 0xfffffe00
    2320:	0000098b 	andeq	r0, r0, fp, lsl #19
    2324:	de070402 	cdple	4, 0, cr0, cr7, cr2, {0}
    2328:	0200000c 	andeq	r0, r0, #12
    232c:	09860508 	stmibeq	r6, {r3, r8, sl}
    2330:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    2334:	000cd907 	andeq	sp, ip, r7, lsl #18
    2338:	05040400 	streq	r0, [r4, #-1024]	; 0xfffffc00
    233c:	00746e69 	rsbseq	r6, r4, r9, ror #28
    2340:	e3070402 	movw	r0, #29698	; 0x7402
    2344:	0300000c 	movweq	r0, #12
    2348:	000001ce 	andeq	r0, r0, lr, asr #3
    234c:	002c1803 	eoreq	r1, ip, r3, lsl #16
    2350:	67050000 	strvs	r0, [r5, -r0]
    2354:	00b90c04 	adcseq	r0, r9, r4, lsl #24
    2358:	a9060000 	stmdbge	r6, {}	; <UNPREDICTABLE>
    235c:	04000015 	streq	r0, [r0], #-21	; 0xffffffeb
    2360:	0000b90e 	andeq	fp, r0, lr, lsl #18
    2364:	55060000 	strpl	r0, [r6, #-0]
    2368:	0400001d 	streq	r0, [r0], #-29	; 0xffffffe3
    236c:	00007611 	andeq	r7, r0, r1, lsl r6
    2370:	69076400 	stmdbvs	r7, {sl, sp, lr}
    2374:	1404006e 	strne	r0, [r4], #-110	; 0xffffff92
    2378:	00000076 	andeq	r0, r0, r6, ror r0
    237c:	756f0765 	strbvc	r0, [pc, #-1893]!	; 1c1f <startup-0x1fffe3e1>
    2380:	17040074 	smlsdxne	r4, r4, r0, r0
    2384:	00000076 	andeq	r0, r0, r6, ror r0
    2388:	76080066 	strvc	r0, [r8], -r6, rrx
    238c:	c9000000 	stmdbgt	r0, {}	; <UNPREDICTABLE>
    2390:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    2394:	0000006f 	andeq	r0, r0, pc, rrx
    2398:	9f030063 	svcls	0x00030063
    239c:	04000015 	streq	r0, [r0], #-21	; 0xffffffeb
    23a0:	00008118 	andeq	r8, r0, r8, lsl r1
    23a4:	15b30a00 	ldrne	r0, [r3, #2560]!	; 0xa00
    23a8:	1f010000 	svcne	0x00010000
    23ac:	00000076 	andeq	r0, r0, r6, ror r0
    23b0:	2000183a 	andcs	r1, r0, sl, lsr r8
    23b4:	0000005e 	andeq	r0, r0, lr, asr r0
    23b8:	010a9c01 	tsteq	sl, r1, lsl #24
    23bc:	c80b0000 	stmdagt	fp, {}	; <UNPREDICTABLE>
    23c0:	01000015 	tsteq	r0, r5, lsl r0
    23c4:	00010a1f 	andeq	r0, r1, pc, lsl sl
    23c8:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    23cc:	0015a40b 	andseq	sl, r5, fp, lsl #8
    23d0:	101f0100 	andsne	r0, pc, r0, lsl #2
    23d4:	02000001 	andeq	r0, r0, #1
    23d8:	0c007091 	stceq	0, cr7, [r0], {145}	; 0x91
    23dc:	0000c904 	andeq	ip, r0, r4, lsl #18
    23e0:	76040c00 	strvc	r0, [r4], -r0, lsl #24
    23e4:	0a000000 	beq	23ec <startup-0x1fffdc14>
    23e8:	0000154a 	andeq	r1, r0, sl, asr #10
    23ec:	00760c01 	rsbseq	r0, r6, r1, lsl #24
    23f0:	17d80000 	ldrbne	r0, [r8, r0]
    23f4:	00622000 	rsbeq	r2, r2, r0
    23f8:	9c010000 	stcls	0, cr0, [r1], {-0}
    23fc:	0000014c 	andeq	r0, r0, ip, asr #2
    2400:	0015c80b 	andseq	ip, r5, fp, lsl #16
    2404:	0a0c0100 	beq	30280c <startup-0x1fcfd7f4>
    2408:	02000001 	andeq	r0, r0, #1
    240c:	ae0b7491 	mcrge	4, 0, r7, cr11, cr1, {4}
    2410:	01000015 	tsteq	r0, r5, lsl r0
    2414:	0000760c 	andeq	r7, r0, ip, lsl #12
    2418:	73910200 	orrsvc	r0, r1, #0, 4
    241c:	15bd0d00 	ldrne	r0, [sp, #3328]!	; 0xd00
    2420:	04010000 	streq	r0, [r1], #-0
    2424:	200017b0 			; <UNDEFINED> instruction: 0x200017b0
    2428:	00000028 	andeq	r0, r0, r8, lsr #32
    242c:	c80b9c01 	stmdagt	fp, {r0, sl, fp, ip, pc}
    2430:	01000015 	tsteq	r0, r5, lsl r0
    2434:	00010a04 	andeq	r0, r1, r4, lsl #20
    2438:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    243c:	09cc0000 	stmibeq	ip, {}^	; <UNPREDICTABLE>
    2440:	00040000 	andeq	r0, r4, r0
    2444:	000006e5 	andeq	r0, r0, r5, ror #13
    2448:	05e70104 	strbeq	r0, [r7, #260]!	; 0x104
    244c:	a00c0000 	andge	r0, ip, r0
    2450:	47000019 	smladmi	r0, r9, r0, r0
    2454:	98000005 	stmdals	r0, {r0, r2}
    2458:	fe200018 	mcr2	0, 1, r0, cr0, cr8, {0}
    245c:	6a000009 	bvs	2488 <startup-0x1fffdb78>
    2460:	0200000a 	andeq	r0, r0, #10
    2464:	03f40601 	mvnseq	r0, #1048576	; 0x100000
    2468:	cc030000 	stcgt	0, cr0, [r3], {-0}
    246c:	02000001 	andeq	r0, r0, #1
    2470:	0000372b 	andeq	r3, r0, fp, lsr #14
    2474:	08010200 	stmdaeq	r1, {r9}
    2478:	000003f2 	strdeq	r0, [r0], -r2
    247c:	05050202 	streq	r0, [r5, #-514]	; 0xfffffdfe
    2480:	0300000f 	movweq	r0, #15
    2484:	00000507 	andeq	r0, r0, r7, lsl #10
    2488:	00503902 	subseq	r3, r0, r2, lsl #18
    248c:	02020000 	andeq	r0, r2, #0
    2490:	00107a07 	andseq	r7, r0, r7, lsl #20
    2494:	111f0300 	tstne	pc, r0, lsl #6
    2498:	4d020000 	stcmi	0, cr0, [r2, #-0]
    249c:	00000062 	andeq	r0, r0, r2, rrx
    24a0:	8b050402 	blhi	1434b0 <startup-0x1febcb50>
    24a4:	03000009 	movweq	r0, #9
    24a8:	00000934 	andeq	r0, r0, r4, lsr r9
    24ac:	00744f02 	rsbseq	r4, r4, r2, lsl #30
    24b0:	04020000 	streq	r0, [r2], #-0
    24b4:	000cde07 	andeq	sp, ip, r7, lsl #28
    24b8:	05080200 	streq	r0, [r8, #-512]	; 0xfffffe00
    24bc:	00000986 	andeq	r0, r0, r6, lsl #19
    24c0:	d9070802 	stmdble	r7, {r1, fp}
    24c4:	0400000c 	streq	r0, [r0], #-12
    24c8:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    24cc:	04020074 	streq	r0, [r2], #-116	; 0xffffff8c
    24d0:	000ce307 	andeq	lr, ip, r7, lsl #6
    24d4:	01ce0300 	biceq	r0, lr, r0, lsl #6
    24d8:	18030000 	stmdane	r3, {}	; <UNPREDICTABLE>
    24dc:	0000002c 	andeq	r0, r0, ip, lsr #32
    24e0:	00050903 	andeq	r0, r5, r3, lsl #18
    24e4:	45240300 	strmi	r0, [r4, #-768]!	; 0xfffffd00
    24e8:	05000000 	streq	r0, [r0, #-0]
    24ec:	000000a2 	andeq	r0, r0, r2, lsr #1
    24f0:	00112103 	andseq	r2, r1, r3, lsl #2
    24f4:	572c0300 	strpl	r0, [ip, -r0, lsl #6]!
    24f8:	05000000 	streq	r0, [r0, #-0]
    24fc:	000000b2 	strheq	r0, [r0], -r2
    2500:	00093603 	andeq	r3, r9, r3, lsl #12
    2504:	69300300 	ldmdbvs	r0!, {r8, r9}
    2508:	06000000 	streq	r0, [r0], -r0
    250c:	00000fa0 	andeq	r0, r0, r0, lsr #31
    2510:	bd06fa04 	vstrlt	s30, [r6, #-16]
    2514:	07000000 	streq	r0, [r0, -r0]
    2518:	00000840 	andeq	r0, r0, r0, asr #16
    251c:	00c23b05 	sbceq	r3, r2, r5, lsl #22
    2520:	07080000 	streq	r0, [r8, -r0]
    2524:	00003701 	andeq	r3, r0, r1, lsl #14
    2528:	035d0600 	cmpeq	sp, #0, 12
    252c:	000000ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    2530:	00120609 	andseq	r0, r2, r9, lsl #12
    2534:	530a0000 	movwpl	r0, #40960	; 0xa000
    2538:	01005445 	tsteq	r0, r5, asr #8
    253c:	09ee0b00 	stmibeq	lr!, {r8, r9, fp}^
    2540:	5d060000 	stcpl	0, cr0, [r6, #-0]
    2544:	0000e403 	andeq	lr, r0, r3, lsl #8
    2548:	0aaf0b00 	beq	febc5150 <APBAHBPrescTable+0xdebc2984>
    254c:	5d060000 	stcpl	0, cr0, [r6, #-0]
    2550:	0000e403 	andeq	lr, r0, r3, lsl #8
    2554:	01070800 	tsteq	r7, r0, lsl #16
    2558:	00000037 	andeq	r0, r0, r7, lsr r0
    255c:	32035f06 	andcc	r5, r3, #6, 30
    2560:	09000001 	stmdbeq	r0, {r0}
    2564:	000009c4 	andeq	r0, r0, r4, asr #19
    2568:	0f550900 	svceq	0x00550900
    256c:	00010000 	andeq	r0, r1, r0
    2570:	000ca30b 	andeq	sl, ip, fp, lsl #6
    2574:	035f0600 	cmpeq	pc, #0, 12
    2578:	00000117 	andeq	r0, r0, r7, lsl r1
    257c:	73061c0c 	movwvc	r1, #27660	; 0x6c0c
    2580:	0001fc07 	andeq	pc, r1, r7, lsl #24
    2584:	52530d00 	subspl	r0, r3, #0, 26
    2588:	07750600 	ldrbeq	r0, [r5, -r0, lsl #12]!
    258c:	000000ad 	andeq	r0, r0, sp, lsr #1
    2590:	03de0e00 	bicseq	r0, lr, #0, 28
    2594:	76060000 	strvc	r0, [r6], -r0
    2598:	0000a207 	andeq	sl, r0, r7, lsl #4
    259c:	440d0200 	strmi	r0, [sp], #-512	; 0xfffffe00
    25a0:	77060052 	smlsdvc	r6, r2, r0, r0
    25a4:	0000ad07 	andeq	sl, r0, r7, lsl #26
    25a8:	e80e0400 	stmda	lr, {sl}
    25ac:	06000003 	streq	r0, [r0], -r3
    25b0:	00a20778 	adceq	r0, r2, r8, ror r7
    25b4:	0d060000 	stceq	0, cr0, [r6, #-0]
    25b8:	00525242 	subseq	r5, r2, r2, asr #4
    25bc:	ad077906 	vstrge.16	s14, [r7, #-12]	; <UNPREDICTABLE>
    25c0:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    25c4:	00046c0e 	andeq	r6, r4, lr, lsl #24
    25c8:	077a0600 	ldrbeq	r0, [sl, -r0, lsl #12]!
    25cc:	000000a2 	andeq	r0, r0, r2, lsr #1
    25d0:	52430d0a 	subpl	r0, r3, #640	; 0x280
    25d4:	7b060031 	blvc	1826a0 <startup-0x1fe7d960>
    25d8:	0000ad07 	andeq	sl, r0, r7, lsl #26
    25dc:	760e0c00 	strvc	r0, [lr], -r0, lsl #24
    25e0:	06000004 	streq	r0, [r0], -r4
    25e4:	00a2077c 	adceq	r0, r2, ip, ror r7
    25e8:	0d0e0000 	stceq	0, cr0, [lr, #-0]
    25ec:	00325243 	eorseq	r5, r2, r3, asr #4
    25f0:	ad077d06 	stcge	13, cr7, [r7, #-24]	; 0xffffffe8
    25f4:	10000000 	andne	r0, r0, r0
    25f8:	0004120e 	andeq	r1, r4, lr, lsl #4
    25fc:	077e0600 	ldrbeq	r0, [lr, -r0, lsl #12]!
    2600:	000000a2 	andeq	r0, r0, r2, lsr #1
    2604:	52430d12 	subpl	r0, r3, #1152	; 0x480
    2608:	7f060033 	svcvc	0x00060033
    260c:	0000ad07 	andeq	sl, r0, r7, lsl #26
    2610:	1c0e1400 	cfstrsne	mvf1, [lr], {-0}
    2614:	06000004 	streq	r0, [r0], -r4
    2618:	00a20780 	adceq	r0, r2, r0, lsl #15
    261c:	0e160000 	cdpeq	0, 1, cr0, cr6, cr0, {0}
    2620:	000015e9 	andeq	r1, r0, r9, ror #11
    2624:	ad078106 	stfged	f0, [r7, #-24]	; 0xffffffe8
    2628:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    262c:	0004260e 	andeq	r2, r4, lr, lsl #12
    2630:	07820600 	streq	r0, [r2, r0, lsl #12]
    2634:	000000a2 	andeq	r0, r0, r2, lsr #1
    2638:	550b001a 	strpl	r0, [fp, #-26]	; 0xffffffe6
    263c:	06000016 			; <UNDEFINED> instruction: 0x06000016
    2640:	013e0783 	teqeq	lr, r3, lsl #15
    2644:	100f0000 	andne	r0, pc, r0
    2648:	02593607 	subseq	r3, r9, #7340032	; 0x700000
    264c:	db100000 	blle	402654 <startup-0x1fbfd9ac>
    2650:	07000016 	smladeq	r0, r6, r0, r0
    2654:	0000c238 	andeq	ip, r0, r8, lsr r2
    2658:	af100000 	svcge	0x00100000
    265c:	07000016 	smladeq	r0, r6, r0, r0
    2660:	0000a23e 	andeq	sl, r0, lr, lsr r2
    2664:	63100400 	tstvs	r0, #0, 8
    2668:	07000016 	smladeq	r0, r6, r0, r0
    266c:	0000a241 	andeq	sl, r0, r1, asr #4
    2670:	79100600 	ldmdbvc	r0, {r9, sl}
    2674:	07000017 	smladeq	r0, r7, r0, r0
    2678:	0000a244 	andeq	sl, r0, r4, asr #4
    267c:	4d100800 	ldcmi	8, cr0, [r0, #-0]
    2680:	07000018 	smladeq	r0, r8, r0, r0
    2684:	0000a24b 	andeq	sl, r0, fp, asr #4
    2688:	20100a00 	andscs	r0, r0, r0, lsl #20
    268c:	07000018 	smladeq	r0, r8, r0, r0
    2690:	0000a24e 	andeq	sl, r0, lr, asr #4
    2694:	03000c00 	movweq	r0, #3072	; 0xc00
    2698:	000017eb 	andeq	r1, r0, fp, ror #15
    269c:	02085107 	andeq	r5, r8, #-1073741823	; 0xc0000001
    26a0:	080f0000 	stmdaeq	pc, {}	; <UNPREDICTABLE>
    26a4:	029d5707 	addseq	r5, sp, #1835008	; 0x1c0000
    26a8:	b4100000 	ldrlt	r0, [r0], #-0
    26ac:	07000018 	smladeq	r0, r8, r0, r0
    26b0:	0000a25a 	andeq	sl, r0, sl, asr r2
    26b4:	8e100000 	cdphi	0, 1, cr0, cr0, cr0, {0}
    26b8:	07000019 	smladeq	r0, r9, r0, r0
    26bc:	0000a25d 	andeq	sl, r0, sp, asr r2
    26c0:	de100200 	cdple	2, 1, cr0, cr0, cr0, {0}
    26c4:	07000015 	smladeq	r0, r5, r0, r0
    26c8:	0000a260 	andeq	sl, r0, r0, ror #4
    26cc:	cd100400 	cfldrsgt	mvf0, [r0, #-0]
    26d0:	07000016 	smladeq	r0, r6, r0, r0
    26d4:	0000a263 	andeq	sl, r0, r3, ror #4
    26d8:	03000600 	movweq	r0, #1536	; 0x600
    26dc:	00001672 	andeq	r1, r0, r2, ror r6
    26e0:	02646607 	rsbeq	r6, r4, #7340032	; 0x700000
    26e4:	100f0000 	andne	r0, pc, r0
    26e8:	02e13008 	rsceq	r3, r1, #8
    26ec:	c0100000 	andsgt	r0, r0, r0
    26f0:	08000010 	stmdaeq	r0, {r4}
    26f4:	0000c232 	andeq	ip, r0, r2, lsr r2
    26f8:	8c100000 	ldchi	0, cr0, [r0], {-0}
    26fc:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    2700:	0000c233 	andeq	ip, r0, r3, lsr r2
    2704:	a4100400 	ldrge	r0, [r0], #-1024	; 0xfffffc00
    2708:	08000005 	stmdaeq	r0, {r0, r2}
    270c:	0000c234 	andeq	ip, r0, r4, lsr r2
    2710:	1a100800 	bne	404718 <startup-0x1fbfb8e8>
    2714:	08000005 	stmdaeq	r0, {r0, r2}
    2718:	0000c235 	andeq	ip, r0, r5, lsr r2
    271c:	03000c00 	movweq	r0, #3072	; 0xc00
    2720:	00000edc 	ldrdeq	r0, [r0], -ip
    2724:	02a83608 	adceq	r3, r8, #8, 12	; 0x800000
    2728:	02110000 	andseq	r0, r1, #0
    272c:	01000017 	tsteq	r0, r7, lsl r0
    2730:	224e05ac 	subcs	r0, lr, #172, 10	; 0x2b000000
    2734:	00482000 	subeq	r2, r8, r0
    2738:	9c010000 	stcls	0, cr0, [r1], {-0}
    273c:	0000033f 	andeq	r0, r0, pc, lsr r3
    2740:	00181912 	andseq	r1, r8, r2, lsl r9
    2744:	05ac0100 	streq	r0, [ip, #256]!	; 0x100
    2748:	0000033f 	andeq	r0, r0, pc, lsr r3
    274c:	126c9102 	rsbne	r9, ip, #-2147483648	; 0x80000000
    2750:	0000190b 	andeq	r1, r0, fp, lsl #18
    2754:	a205ac01 	andge	sl, r5, #256	; 0x100
    2758:	02000000 	andeq	r0, r0, #0
    275c:	66136a91 			; <UNDEFINED> instruction: 0x66136a91
    2760:	01000018 	tsteq	r0, r8, lsl r0
    2764:	00a205ae 	adceq	r0, r2, lr, lsr #11
    2768:	91020000 	mrsls	r0, (UNDEF: 2)
    276c:	19991376 	ldmibne	r9, {r1, r2, r4, r5, r6, r8, r9, ip}
    2770:	ae010000 	cdpge	0, 0, cr0, cr1, cr0, {0}
    2774:	0000a205 	andeq	sl, r0, r5, lsl #4
    2778:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    277c:	fc041400 	stc2	4, cr1, [r4], {-0}
    2780:	15000001 	strne	r0, [r0, #-1]
    2784:	00001884 	andeq	r1, r0, r4, lsl #17
    2788:	0b056201 	bleq	15af94 <startup-0x1fea506c>
    278c:	84000001 	strhi	r0, [r0], #-1
    2790:	ca200021 	bgt	80281c <startup-0x1f7fd7e4>
    2794:	01000000 	mrseq	r0, (UNDEF: 0)
    2798:	0003ba9c 	muleq	r3, ip, sl
    279c:	18191200 	ldmdane	r9, {r9, ip}
    27a0:	62010000 	andvs	r0, r1, #0
    27a4:	00033f05 	andeq	r3, r3, r5, lsl #30
    27a8:	64910200 	ldrvs	r0, [r1], #512	; 0x200
    27ac:	00190b12 	andseq	r0, r9, r2, lsl fp
    27b0:	05620100 	strbeq	r0, [r2, #-256]!	; 0xffffff00
    27b4:	000000a2 	andeq	r0, r0, r2, lsr #1
    27b8:	13629102 	cmnne	r2, #-2147483648	; 0x80000000
    27bc:	00001866 	andeq	r1, r0, r6, ror #16
    27c0:	c2056401 	andgt	r6, r5, #16777216	; 0x1000000
    27c4:	02000000 	andeq	r0, r0, #0
    27c8:	99136c91 	ldmdbls	r3, {r0, r4, r7, sl, fp, sp, lr}
    27cc:	01000019 	tsteq	r0, r9, lsl r0
    27d0:	00c20564 	sbceq	r0, r2, r4, ror #10
    27d4:	91020000 	mrsls	r0, (UNDEF: 2)
    27d8:	1a311374 	bne	c475b0 <startup-0x1f3b8a50>
    27dc:	64010000 	strvs	r0, [r1], #-0
    27e0:	0000c205 	andeq	ip, r0, r5, lsl #4
    27e4:	68910200 	ldmvs	r1, {r9}
    27e8:	000f4b13 	andeq	r4, pc, r3, lsl fp	; <UNPREDICTABLE>
    27ec:	05650100 	strbeq	r0, [r5, #-256]!	; 0xffffff00
    27f0:	0000010b 	andeq	r0, r0, fp, lsl #2
    27f4:	00739102 	rsbseq	r9, r3, r2, lsl #2
    27f8:	0017a711 	andseq	sl, r7, r1, lsl r7
    27fc:	05400100 	strbeq	r0, [r0, #-256]	; 0xffffff00
    2800:	20002162 	andcs	r2, r0, r2, ror #2
    2804:	00000022 	andeq	r0, r0, r2, lsr #32
    2808:	03ef9c01 	mvneq	r9, #256	; 0x100
    280c:	19120000 	ldmdbne	r2, {}	; <UNPREDICTABLE>
    2810:	01000018 	tsteq	r0, r8, lsl r0
    2814:	033f0540 	teqeq	pc, #64, 10	; 0x10000000
    2818:	91020000 	mrsls	r0, (UNDEF: 2)
    281c:	174b1274 	smlsldxne	r1, fp, r4, r2
    2820:	40010000 	andmi	r0, r1, r0
    2824:	0000a205 	andeq	sl, r0, r5, lsl #4
    2828:	72910200 	addsvc	r0, r1, #0, 4
    282c:	18f71500 	ldmne	r7!, {r8, sl, ip}^
    2830:	0f010000 	svceq	0x00010000
    2834:	0000ff05 	andeq	pc, r0, r5, lsl #30
    2838:	00211a00 	eoreq	r1, r1, r0, lsl #20
    283c:	00004820 	andeq	r4, r0, r0, lsr #16
    2840:	379c0100 	ldrcc	r0, [ip, r0, lsl #2]
    2844:	12000004 	andne	r0, r0, #4
    2848:	00001819 	andeq	r1, r0, r9, lsl r8
    284c:	3f050f01 	svccc	0x00050f01
    2850:	02000003 	andeq	r0, r0, #3
    2854:	4b126c91 	blmi	49daa0 <startup-0x1fb62560>
    2858:	01000017 	tsteq	r0, r7, lsl r0
    285c:	00a2050f 	adceq	r0, r2, pc, lsl #10
    2860:	91020000 	mrsls	r0, (UNDEF: 2)
    2864:	0f4b136a 	svceq	0x004b136a
    2868:	11010000 	mrsne	r0, (UNDEF: 1)
    286c:	0000ff05 	andeq	pc, r0, r5, lsl #30
    2870:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    2874:	17fd1100 	ldrbne	r1, [sp, r0, lsl #2]!
    2878:	cf010000 	svcgt	0x00010000
    287c:	00208004 	eoreq	r8, r0, r4
    2880:	00009a20 	andeq	r9, r0, r0, lsr #20
    2884:	b79c0100 	ldrlt	r0, [ip, r0, lsl #2]
    2888:	12000004 	andne	r0, r0, #4
    288c:	00001819 	andeq	r1, r0, r9, lsl r8
    2890:	3f04cf01 	svccc	0x0004cf01
    2894:	02000003 	andeq	r0, r0, #3
    2898:	0b126491 	bleq	49bae4 <startup-0x1fb6451c>
    289c:	01000019 	tsteq	r0, r9, lsl r0
    28a0:	00a204cf 	adceq	r0, r2, pc, asr #9
    28a4:	91020000 	mrsls	r0, (UNDEF: 2)
    28a8:	0ad61262 	beq	ff587238 <APBAHBPrescTable+0xdf584a6c>
    28ac:	cf010000 	svcgt	0x00010000
    28b0:	00013204 	andeq	r3, r1, r4, lsl #4
    28b4:	61910200 	orrsvs	r0, r1, r0, lsl #4
    28b8:	001a3113 	andseq	r3, sl, r3, lsl r1
    28bc:	04d10100 	ldrbeq	r0, [r1], #256	; 0x100
    28c0:	000000c2 	andeq	r0, r0, r2, asr #1
    28c4:	13709102 	cmnne	r0, #-2147483648	; 0x80000000
    28c8:	00001867 	andeq	r1, r0, r7, ror #16
    28cc:	c204d101 	andgt	sp, r4, #1073741824	; 0x40000000
    28d0:	02000000 	andeq	r0, r0, #0
    28d4:	99136c91 	ldmdbls	r3, {r0, r4, r7, sl, fp, sp, lr}
    28d8:	01000019 	tsteq	r0, r9, lsl r0
    28dc:	00c204d1 	ldrdeq	r0, [r2], #65	; 0x41
    28e0:	91020000 	mrsls	r0, (UNDEF: 2)
    28e4:	179c1368 	ldrne	r1, [ip, r8, ror #6]
    28e8:	d2010000 	andle	r0, r1, #0
    28ec:	0000c204 	andeq	ip, r0, r4, lsl #4
    28f0:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    28f4:	16c01100 	strbne	r1, [r0], r0, lsl #2
    28f8:	4b010000 	blmi	42900 <startup-0x1ffbd700>
    28fc:	00202e04 	eoreq	r2, r0, r4, lsl #28
    2900:	00005220 	andeq	r5, r0, r0, lsr #4
    2904:	fb9c0100 	blx	fe702d0e <APBAHBPrescTable+0xde700542>
    2908:	12000004 	andne	r0, r0, #4
    290c:	00001819 	andeq	r1, r0, r9, lsl r8
    2910:	3f044b01 	svccc	0x00044b01
    2914:	02000003 	andeq	r0, r0, #3
    2918:	0c127491 	cfldrseq	mvf7, [r2], {145}	; 0x91
    291c:	01000018 	tsteq	r0, r8, lsl r0
    2920:	00a2044b 	adceq	r0, r2, fp, asr #8
    2924:	91020000 	mrsls	r0, (UNDEF: 2)
    2928:	0ad61272 	beq	ff5872f8 <APBAHBPrescTable+0xdf584b2c>
    292c:	4b010000 	blmi	42934 <startup-0x1ffbd6cc>
    2930:	00013204 	andeq	r3, r1, r4, lsl #4
    2934:	71910200 	orrsvc	r0, r1, r0, lsl #4
    2938:	18c01100 	stmiane	r0, {r8, ip}^
    293c:	1d010000 	stcne	0, cr0, [r1, #-0]
    2940:	001fee04 	andseq	lr, pc, r4, lsl #28
    2944:	00004020 	andeq	r4, r0, r0, lsr #32
    2948:	309c0100 	addscc	r0, ip, r0, lsl #2
    294c:	12000005 	andne	r0, r0, #5
    2950:	00001819 	andeq	r1, r0, r9, lsl r8
    2954:	3f041d01 	svccc	0x00041d01
    2958:	02000003 	andeq	r0, r0, #3
    295c:	d6127491 			; <UNDEFINED> instruction: 0xd6127491
    2960:	0100000a 	tsteq	r0, sl
    2964:	0132041d 	teqeq	r2, sp, lsl r4
    2968:	91020000 	mrsls	r0, (UNDEF: 2)
    296c:	a3110073 	tstge	r1, #115	; 0x73
    2970:	01000018 	tsteq	r0, r8, lsl r0
    2974:	1fb6040b 	svcne	0x00b6040b
    2978:	00382000 	eorseq	r2, r8, r0
    297c:	9c010000 	stcls	0, cr0, [r1], {-0}
    2980:	00000565 	andeq	r0, r0, r5, ror #10
    2984:	00181912 	andseq	r1, r8, r2, lsl r9
    2988:	040b0100 	streq	r0, [fp], #-256	; 0xffffff00
    298c:	0000033f 	andeq	r0, r0, pc, lsr r3
    2990:	12749102 	rsbsne	r9, r4, #-2147483648	; 0x80000000
    2994:	000016ea 	andeq	r1, r0, sl, ror #13
    2998:	a2040b01 	andge	r0, r4, #1024	; 0x400
    299c:	02000000 	andeq	r0, r0, #0
    29a0:	11007291 			; <UNDEFINED> instruction: 0x11007291
    29a4:	000018e0 	andeq	r1, r0, r0, ror #17
    29a8:	7603c401 	strvc	ip, [r3], -r1, lsl #8
    29ac:	4020001f 	eormi	r0, r0, pc, lsl r0
    29b0:	01000000 	mrseq	r0, (UNDEF: 0)
    29b4:	00059a9c 	muleq	r5, ip, sl
    29b8:	18191200 	ldmdane	r9, {r9, ip}
    29bc:	c4010000 	strgt	r0, [r1], #-0
    29c0:	00033f03 	andeq	r3, r3, r3, lsl #30
    29c4:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    29c8:	000ad612 	andeq	sp, sl, r2, lsl r6
    29cc:	03c40100 	biceq	r0, r4, #0, 2
    29d0:	00000132 	andeq	r0, r0, r2, lsr r1
    29d4:	00739102 	rsbseq	r9, r3, r2, lsl #2
    29d8:	00183a11 	andseq	r3, r8, r1, lsl sl
    29dc:	03ab0100 			; <UNDEFINED> instruction: 0x03ab0100
    29e0:	20001f36 	andcs	r1, r0, r6, lsr pc
    29e4:	00000040 	andeq	r0, r0, r0, asr #32
    29e8:	05cf9c01 	strbeq	r9, [pc, #3073]	; 35f1 <startup-0x1fffca0f>
    29ec:	19120000 	ldmdbne	r2, {}	; <UNPREDICTABLE>
    29f0:	01000018 	tsteq	r0, r8, lsl r0
    29f4:	033f03ab 	teqeq	pc, #-1409286142	; 0xac000002
    29f8:	91020000 	mrsls	r0, (UNDEF: 2)
    29fc:	0ad61274 	beq	ff5873d4 <APBAHBPrescTable+0xdf584c08>
    2a00:	ab010000 	blge	42a08 <startup-0x1ffbd5f8>
    2a04:	00013203 	andeq	r3, r1, r3, lsl #4
    2a08:	73910200 	orrsvc	r0, r1, #0, 4
    2a0c:	17c81100 	strbne	r1, [r8, r0, lsl #2]
    2a10:	98010000 	stmdals	r1, {}	; <UNPREDICTABLE>
    2a14:	001ef803 	andseq	pc, lr, r3, lsl #16
    2a18:	00003e20 	andeq	r3, r0, r0, lsr #28
    2a1c:	049c0100 	ldreq	r0, [ip], #256	; 0x100
    2a20:	12000006 	andne	r0, r0, #6
    2a24:	00001819 	andeq	r1, r0, r9, lsl r8
    2a28:	3f039801 	svccc	0x00039801
    2a2c:	02000003 	andeq	r0, r0, #3
    2a30:	1a127491 	bne	49fc7c <startup-0x1fb60384>
    2a34:	01000017 	tsteq	r0, r7, lsl r0
    2a38:	00970398 	umullseq	r0, r7, r8, r3
    2a3c:	91020000 	mrsls	r0, (UNDEF: 2)
    2a40:	59110073 	ldmdbpl	r1, {r0, r1, r4, r5, r6}
    2a44:	01000019 	tsteq	r0, r9, lsl r0
    2a48:	1eb80344 	cdpne	3, 11, cr0, cr8, cr4, {2}
    2a4c:	00402000 	subeq	r2, r0, r0
    2a50:	9c010000 	stcls	0, cr0, [r1], {-0}
    2a54:	00000639 	andeq	r0, r0, r9, lsr r6
    2a58:	00181912 	andseq	r1, r8, r2, lsl r9
    2a5c:	03440100 	movteq	r0, #16640	; 0x4100
    2a60:	0000033f 	andeq	r0, r0, pc, lsr r3
    2a64:	12749102 	rsbsne	r9, r4, #-2147483648	; 0x80000000
    2a68:	00000ad6 	ldrdeq	r0, [r0], -r6
    2a6c:	32034401 	andcc	r4, r3, #16777216	; 0x1000000
    2a70:	02000001 	andeq	r0, r0, #1
    2a74:	11007391 			; <UNDEFINED> instruction: 0x11007391
    2a78:	000017db 	ldrdeq	r1, [r0], -fp
    2a7c:	98030f01 	stmdals	r3, {r0, r8, r9, sl, fp}
    2a80:	2020001e 	eorcs	r0, r0, lr, lsl r0
    2a84:	01000000 	mrseq	r0, (UNDEF: 0)
    2a88:	00065f9c 	muleq	r6, ip, pc	; <UNPREDICTABLE>
    2a8c:	18191200 	ldmdane	r9, {r9, ip}
    2a90:	0f010000 	svceq	0x00010000
    2a94:	00033f03 	andeq	r3, r3, r3, lsl #30
    2a98:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    2a9c:	18961100 	ldmne	r6, {r8, ip}
    2aa0:	f7010000 			; <UNDEFINED> instruction: 0xf7010000
    2aa4:	001e5002 	andseq	r5, lr, r2
    2aa8:	00004820 	andeq	r4, r0, r0, lsr #16
    2aac:	949c0100 	ldrls	r0, [ip], #256	; 0x100
    2ab0:	12000006 	andne	r0, r0, #6
    2ab4:	00001819 	andeq	r1, r0, r9, lsl r8
    2ab8:	3f02f701 	svccc	0x0002f701
    2abc:	02000003 	andeq	r0, r0, #3
    2ac0:	d6127491 			; <UNDEFINED> instruction: 0xd6127491
    2ac4:	0100000a 	tsteq	r0, sl
    2ac8:	013202f7 	teqeq	r2, r7	; <illegal shifter operand>
    2acc:	91020000 	mrsls	r0, (UNDEF: 2)
    2ad0:	2a110073 	bcs	442ca4 <startup-0x1fbbd35c>
    2ad4:	01000017 	tsteq	r0, r7, lsl r0
    2ad8:	1e1802e5 	cdpne	2, 1, cr0, cr8, cr5, {7}
    2adc:	00382000 	eorseq	r2, r8, r0
    2ae0:	9c010000 	stcls	0, cr0, [r1], {-0}
    2ae4:	000006c9 	andeq	r0, r0, r9, asr #13
    2ae8:	00181912 	andseq	r1, r8, r2, lsl r9
    2aec:	02e50100 	rsceq	r0, r5, #0, 2
    2af0:	0000033f 	andeq	r0, r0, pc, lsr r3
    2af4:	12749102 	rsbsne	r9, r4, #-2147483648	; 0x80000000
    2af8:	00001624 	andeq	r1, r0, r4, lsr #12
    2afc:	a202e501 	andge	lr, r2, #4194304	; 0x400000
    2b00:	02000000 	andeq	r0, r0, #0
    2b04:	11007291 			; <UNDEFINED> instruction: 0x11007291
    2b08:	00001946 	andeq	r1, r0, r6, asr #18
    2b0c:	da02a001 	ble	aab18 <startup-0x1ff554e8>
    2b10:	3e20001d 	miacc	acc0, sp, r0
    2b14:	01000000 	mrseq	r0, (UNDEF: 0)
    2b18:	0006fe9c 	muleq	r6, ip, lr
    2b1c:	18191200 	ldmdane	r9, {r9, ip}
    2b20:	a0010000 	andge	r0, r1, r0
    2b24:	00033f02 	andeq	r3, r3, r2, lsl #30
    2b28:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    2b2c:	0016a212 	andseq	sl, r6, r2, lsl r2
    2b30:	02a00100 	adceq	r0, r0, #0, 2
    2b34:	000000a2 	andeq	r0, r0, r2, lsr #1
    2b38:	00729102 	rsbseq	r9, r2, r2, lsl #2
    2b3c:	0015ee11 	andseq	lr, r5, r1, lsl lr
    2b40:	02850100 	addeq	r0, r5, #0, 2
    2b44:	20001d9a 	mulcs	r0, sl, sp
    2b48:	00000040 	andeq	r0, r0, r0, asr #32
    2b4c:	07339c01 	ldreq	r9, [r3, -r1, lsl #24]!
    2b50:	19120000 	ldmdbne	r2, {}	; <UNPREDICTABLE>
    2b54:	01000018 	tsteq	r0, r8, lsl r0
    2b58:	033f0285 	teqeq	pc, #1342177288	; 0x50000008
    2b5c:	91020000 	mrsls	r0, (UNDEF: 2)
    2b60:	0ad61274 	beq	ff587538 <APBAHBPrescTable+0xdf584d6c>
    2b64:	85010000 	strhi	r0, [r1, #-0]
    2b68:	00013202 	andeq	r3, r1, r2, lsl #4
    2b6c:	73910200 	orrsvc	r0, r1, #0, 4
    2b70:	17b71100 	ldrne	r1, [r7, r0, lsl #2]!
    2b74:	71010000 	mrsvc	r0, (UNDEF: 1)
    2b78:	001d6002 	andseq	r6, sp, r2
    2b7c:	00003a20 	andeq	r3, r0, r0, lsr #20
    2b80:	689c0100 	ldmvs	ip, {r8}
    2b84:	12000007 	andne	r0, r0, #7
    2b88:	00001819 	andeq	r1, r0, r9, lsl r8
    2b8c:	3f027101 	svccc	0x00027101
    2b90:	02000003 	andeq	r0, r0, #3
    2b94:	58127491 	ldmdapl	r2, {r0, r4, r7, sl, ip, sp, lr}
    2b98:	01000018 	tsteq	r0, r8, lsl r0
    2b9c:	00970271 	addseq	r0, r7, r1, ror r2
    2ba0:	91020000 	mrsls	r0, (UNDEF: 2)
    2ba4:	1f150073 	svcne	0x00150073
    2ba8:	0100001a 	tsteq	r0, sl, lsl r0
    2bac:	00a2023d 	adceq	r0, r2, sp, lsr r2
    2bb0:	1d440000 	stclne	0, cr0, [r4, #-0]
    2bb4:	001c2000 	andseq	r2, ip, r0
    2bb8:	9c010000 	stcls	0, cr0, [r1], {-0}
    2bbc:	00000792 	muleq	r0, r2, r7
    2bc0:	00181912 	andseq	r1, r8, r2, lsl r9
    2bc4:	023d0100 	eorseq	r0, sp, #0, 2
    2bc8:	0000033f 	andeq	r0, r0, pc, lsr r3
    2bcc:	00749102 	rsbseq	r9, r4, r2, lsl #2
    2bd0:	00169311 	andseq	r9, r6, r1, lsl r3
    2bd4:	022d0100 	eoreq	r0, sp, #0, 2
    2bd8:	20001d20 	andcs	r1, r0, r0, lsr #26
    2bdc:	00000024 	andeq	r0, r0, r4, lsr #32
    2be0:	07c79c01 	strbeq	r9, [r7, r1, lsl #24]
    2be4:	19120000 	ldmdbne	r2, {}	; <UNPREDICTABLE>
    2be8:	01000018 	tsteq	r0, r8, lsl r0
    2bec:	033f022d 	teqeq	pc, #-805306366	; 0xd0000002
    2bf0:	91020000 	mrsls	r0, (UNDEF: 2)
    2bf4:	169d1274 			; <UNDEFINED> instruction: 0x169d1274
    2bf8:	2d010000 	stccs	0, cr0, [r1, #-0]
    2bfc:	0000a202 	andeq	sl, r0, r2, lsl #4
    2c00:	72910200 	addsvc	r0, r1, #0, 4
    2c04:	163f1100 	ldrtne	r1, [pc], -r0, lsl #2
    2c08:	f4010000 	vst4.8	{d0-d3}, [r1], r0
    2c0c:	001cd801 	andseq	sp, ip, r1, lsl #16
    2c10:	00004820 	andeq	r4, r0, r0, lsr #16
    2c14:	fc9c0100 	ldc2	1, cr0, [ip], {0}
    2c18:	12000007 	andne	r0, r0, #7
    2c1c:	00001819 	andeq	r1, r0, r9, lsl r8
    2c20:	3f01f401 	svccc	0x0001f401
    2c24:	02000003 	andeq	r0, r0, #3
    2c28:	d6127491 			; <UNDEFINED> instruction: 0xd6127491
    2c2c:	0100000a 	tsteq	r0, sl
    2c30:	013201f4 	teqeq	r2, r4	; <illegal shifter operand>
    2c34:	91020000 	mrsls	r0, (UNDEF: 2)
    2c38:	6d110073 	ldcvs	0, cr0, [r1, #-460]	; 0xfffffe34
    2c3c:	01000018 	tsteq	r0, r8, lsl r0
    2c40:	1c9201da 	ldfnes	f0, [r2], {218}	; 0xda
    2c44:	00462000 	subeq	r2, r6, r0
    2c48:	9c010000 	stcls	0, cr0, [r1], {-0}
    2c4c:	00000831 	andeq	r0, r0, r1, lsr r8
    2c50:	00181912 	andseq	r1, r8, r2, lsl r9
    2c54:	01da0100 	bicseq	r0, sl, r0, lsl #2
    2c58:	0000033f 	andeq	r0, r0, pc, lsr r3
    2c5c:	12749102 	rsbsne	r9, r4, #-2147483648	; 0x80000000
    2c60:	00000ad6 	ldrdeq	r0, [r0], -r6
    2c64:	3201da01 	andcc	sp, r1, #4096	; 0x1000
    2c68:	02000001 	andeq	r0, r0, #1
    2c6c:	11007391 			; <UNDEFINED> instruction: 0x11007391
    2c70:	00001606 	andeq	r1, r0, r6, lsl #12
    2c74:	5801c501 	stmdapl	r1, {r0, r8, sl, lr, pc}
    2c78:	3a20001c 	bcc	802cf0 <startup-0x1f7fd310>
    2c7c:	01000000 	mrseq	r0, (UNDEF: 0)
    2c80:	0008669c 	muleq	r8, ip, r6
    2c84:	18191200 	ldmdane	r9, {r9, ip}
    2c88:	c5010000 	strgt	r0, [r1, #-0]
    2c8c:	00033f01 	andeq	r3, r3, r1, lsl #30
    2c90:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    2c94:	00197e12 	andseq	r7, r9, r2, lsl lr
    2c98:	01c50100 	biceq	r0, r5, r0, lsl #2
    2c9c:	00000097 	muleq	r0, r7, r0
    2ca0:	00739102 	rsbseq	r9, r3, r2, lsl #2
    2ca4:	00168911 	andseq	r8, r6, r1, lsl r9
    2ca8:	01ab0100 			; <UNDEFINED> instruction: 0x01ab0100
    2cac:	20001c10 	andcs	r1, r0, r0, lsl ip
    2cb0:	00000048 	andeq	r0, r0, r8, asr #32
    2cb4:	089b9c01 	ldmeq	fp, {r0, sl, fp, ip, pc}
    2cb8:	19120000 	ldmdbne	r2, {}	; <UNPREDICTABLE>
    2cbc:	01000018 	tsteq	r0, r8, lsl r0
    2cc0:	033f01ab 	teqeq	pc, #-1073741782	; 0xc000002a
    2cc4:	91020000 	mrsls	r0, (UNDEF: 2)
    2cc8:	0ad61274 	beq	ff5876a0 <APBAHBPrescTable+0xdf584ed4>
    2ccc:	ab010000 	blge	42cd4 <startup-0x1ffbd32c>
    2cd0:	00013201 	andeq	r3, r1, r1, lsl #4
    2cd4:	73910200 	orrsvc	r0, r1, #0, 4
    2cd8:	17861100 	strne	r1, [r6, r0, lsl #2]
    2cdc:	9a010000 	bls	42ce4 <startup-0x1ffbd31c>
    2ce0:	001be801 	andseq	lr, fp, r1, lsl #16
    2ce4:	00002820 	andeq	r2, r0, r0, lsr #16
    2ce8:	c19c0100 	orrsgt	r0, ip, r0, lsl #2
    2cec:	12000008 	andne	r0, r0, #8
    2cf0:	00001763 	andeq	r1, r0, r3, ror #14
    2cf4:	c1019a01 	tstgt	r1, r1, lsl #20
    2cf8:	02000008 	andeq	r0, r0, #8
    2cfc:	14007491 	strne	r7, [r0], #-1169	; 0xfffffb6f
    2d00:	00029d04 	andeq	r9, r2, r4, lsl #26
    2d04:	19361100 	ldmdbne	r6!, {r8, ip}
    2d08:	7b010000 	blvc	42d10 <startup-0x1ffbd2f0>
    2d0c:	001b9201 	andseq	r9, fp, r1, lsl #4
    2d10:	00005620 	andeq	r5, r0, r0, lsr #12
    2d14:	0b9c0100 	bleq	fe70311c <APBAHBPrescTable+0xde700950>
    2d18:	12000009 	andne	r0, r0, #9
    2d1c:	00001819 	andeq	r1, r0, r9, lsl r8
    2d20:	3f017b01 	svccc	0x00017b01
    2d24:	02000003 	andeq	r0, r0, #3
    2d28:	63126c91 	tstvs	r2, #37120	; 0x9100
    2d2c:	01000017 	tsteq	r0, r7, lsl r0
    2d30:	08c1017b 	stmiaeq	r1, {r0, r1, r3, r4, r5, r6, r8}^
    2d34:	91020000 	mrsls	r0, (UNDEF: 2)
    2d38:	0df11368 	ldcleq	3, cr1, [r1, #416]!	; 0x1a0
    2d3c:	7d010000 	stcvc	0, cr0, [r1, #-0]
    2d40:	0000c201 	andeq	ip, r0, r1, lsl #4
    2d44:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    2d48:	196d1100 	stmdbne	sp!, {r8, ip}^
    2d4c:	67010000 	strvs	r0, [r1, -r0]
    2d50:	001b5c01 	andseq	r5, fp, r1, lsl #24
    2d54:	00003620 	andeq	r3, r0, r0, lsr #12
    2d58:	319c0100 	orrscc	r0, ip, r0, lsl #2
    2d5c:	12000009 	andne	r0, r0, #9
    2d60:	00001914 	andeq	r1, r0, r4, lsl r9
    2d64:	31016701 	tstcc	r1, r1, lsl #14
    2d68:	02000009 	andeq	r0, r0, #9
    2d6c:	14007491 	strne	r7, [r0], #-1169	; 0xfffffb6f
    2d70:	00025904 	andeq	r5, r2, r4, lsl #18
    2d74:	16191600 	ldrne	r1, [r9], -r0, lsl #12
    2d78:	f6010000 			; <UNDEFINED> instruction: 0xf6010000
    2d7c:	200019c8 	andcs	r1, r0, r8, asr #19
    2d80:	00000194 	muleq	r0, r4, r1
    2d84:	09af9c01 	stmibeq	pc!, {r0, sl, fp, ip, pc}	; <UNPREDICTABLE>
    2d88:	19170000 	ldmdbne	r7, {}	; <UNPREDICTABLE>
    2d8c:	01000018 	tsteq	r0, r8, lsl r0
    2d90:	00033ff6 	strdeq	r3, [r3], -r6
    2d94:	54910200 	ldrpl	r0, [r1], #512	; 0x200
    2d98:	00191417 	andseq	r1, r9, r7, lsl r4
    2d9c:	31f60100 	mvnscc	r0, r0, lsl #2
    2da0:	02000009 	andeq	r0, r0, #9
    2da4:	f1185091 			; <UNDEFINED> instruction: 0xf1185091
    2da8:	0100000d 	tsteq	r0, sp
    2dac:	0000c2f8 	strdeq	ip, [r0], -r8
    2db0:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    2db4:	0016f918 	andseq	pc, r6, r8, lsl r9	; <UNPREDICTABLE>
    2db8:	c2f80100 	rscsgt	r0, r8, #0, 2
    2dbc:	02000000 	andeq	r0, r0, #0
    2dc0:	cf187091 	svcgt	0x00187091
    2dc4:	01000015 	tsteq	r0, r5, lsl r0
    2dc8:	0000c2f9 	strdeq	ip, [r0], -r9
    2dcc:	6c910200 	lfmvs	f0, 4, [r1], {0}
    2dd0:	0018ce18 	andseq	ip, r8, r8, lsl lr
    2dd4:	c2fa0100 	rscsgt	r0, sl, #0, 2
    2dd8:	02000000 	andeq	r0, r0, #0
    2ddc:	25186891 	ldrcs	r6, [r8, #-2193]	; 0xfffff76f
    2de0:	01000019 	tsteq	r0, r9, lsl r0
    2de4:	0002e1fb 	strdeq	lr, [r2], -fp
    2de8:	58910200 	ldmpl	r1, {r9}
    2dec:	17561900 	ldrbne	r1, [r6, -r0, lsl #18]
    2df0:	bb010000 	bllt	42df8 <startup-0x1ffbd208>
    2df4:	20001898 	mulcs	r0, r8, r8
    2df8:	00000130 	andeq	r0, r0, r0, lsr r1
    2dfc:	19179c01 	ldmdbne	r7, {r0, sl, fp, ip, pc}
    2e00:	01000018 	tsteq	r0, r8, lsl r0
    2e04:	00033fbb 			; <UNDEFINED> instruction: 0x00033fbb
    2e08:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    2e0c:	10d00000 	sbcsne	r0, r0, r0
    2e10:	00040000 	andeq	r0, r4, r0
    2e14:	00000869 	andeq	r0, r0, r9, ror #16
    2e18:	05e70104 	strbeq	r0, [r7, #260]!	; 0x104
    2e1c:	5b0c0000 	blpl	302e24 <startup-0x1fcfd1dc>
    2e20:	4700001a 	smladmi	r0, sl, r0, r0
    2e24:	98000005 	stmdals	r0, {r0, r2}
    2e28:	40200022 	eormi	r0, r0, r2, lsr #32
    2e2c:	bd000003 	stclt	0, cr0, [r0, #-12]
    2e30:	0200000d 	andeq	r0, r0, #13
    2e34:	03f40601 	mvnseq	r0, #1048576	; 0x100000
    2e38:	cc030000 	stcgt	0, cr0, [r3], {-0}
    2e3c:	02000001 	andeq	r0, r0, #1
    2e40:	0000372b 	andeq	r3, r0, fp, lsr #14
    2e44:	08010200 	stmdaeq	r1, {r9}
    2e48:	000003f2 	strdeq	r0, [r0], -r2
    2e4c:	05050202 	streq	r0, [r5, #-514]	; 0xfffffdfe
    2e50:	0300000f 	movweq	r0, #15
    2e54:	00000507 	andeq	r0, r0, r7, lsl #10
    2e58:	00503902 	subseq	r3, r0, r2, lsl #18
    2e5c:	02020000 	andeq	r0, r2, #0
    2e60:	00107a07 	andseq	r7, r0, r7, lsl #20
    2e64:	111f0300 	tstne	pc, r0, lsl #6
    2e68:	4d020000 	stcmi	0, cr0, [r2, #-0]
    2e6c:	00000062 	andeq	r0, r0, r2, rrx
    2e70:	8b050402 	blhi	143e80 <startup-0x1febc180>
    2e74:	03000009 	movweq	r0, #9
    2e78:	00000934 	andeq	r0, r0, r4, lsr r9
    2e7c:	00744f02 	rsbseq	r4, r4, r2, lsl #30
    2e80:	04020000 	streq	r0, [r2], #-0
    2e84:	000cde07 	andeq	sp, ip, r7, lsl #28
    2e88:	05080200 	streq	r0, [r8, #-512]	; 0xfffffe00
    2e8c:	00000986 	andeq	r0, r0, r6, lsl #19
    2e90:	d9070802 	stmdble	r7, {r1, fp}
    2e94:	0400000c 	streq	r0, [r0], #-12
    2e98:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    2e9c:	04020074 	streq	r0, [r2], #-116	; 0xffffff8c
    2ea0:	000ce307 	andeq	lr, ip, r7, lsl #6
    2ea4:	01ce0300 	biceq	r0, lr, r0, lsl #6
    2ea8:	18030000 	stmdane	r3, {}	; <UNPREDICTABLE>
    2eac:	0000002c 	andeq	r0, r0, ip, lsr #32
    2eb0:	00050903 	andeq	r0, r5, r3, lsl #18
    2eb4:	45240300 	strmi	r0, [r4, #-768]!	; 0xfffffd00
    2eb8:	05000000 	streq	r0, [r0, #-0]
    2ebc:	000000a2 	andeq	r0, r0, r2, lsr #1
    2ec0:	00112103 	andseq	r2, r1, r3, lsl #2
    2ec4:	572c0300 	strpl	r0, [ip, -r0, lsl #6]!
    2ec8:	05000000 	streq	r0, [r0, #-0]
    2ecc:	000000b2 	strheq	r0, [r0], -r2
    2ed0:	00093603 	andeq	r3, r9, r3, lsl #12
    2ed4:	69300300 	ldmdbvs	r0!, {r8, r9}
    2ed8:	05000000 	streq	r0, [r0, #-0]
    2edc:	000000c2 	andeq	r0, r0, r2, asr #1
    2ee0:	0c046706 	stceq	7, cr6, [r4], {6}
    2ee4:	0000010a 	andeq	r0, r0, sl, lsl #2
    2ee8:	0015a907 	andseq	sl, r5, r7, lsl #18
    2eec:	0a0e0400 	beq	383ef4 <startup-0x1fc7c10c>
    2ef0:	00000001 	andeq	r0, r0, r1
    2ef4:	001d5507 	andseq	r5, sp, r7, lsl #10
    2ef8:	97110400 	ldrls	r0, [r1, -r0, lsl #8]
    2efc:	64000000 	strvs	r0, [r0], #-0
    2f00:	006e6908 	rsbeq	r6, lr, r8, lsl #18
    2f04:	00971404 	addseq	r1, r7, r4, lsl #8
    2f08:	08650000 	stmdaeq	r5!, {}^	; <UNPREDICTABLE>
    2f0c:	0074756f 	rsbseq	r7, r4, pc, ror #10
    2f10:	00971704 	addseq	r1, r7, r4, lsl #14
    2f14:	00660000 	rsbeq	r0, r6, r0
    2f18:	00009709 	andeq	r9, r0, r9, lsl #14
    2f1c:	00011a00 	andeq	r1, r1, r0, lsl #20
    2f20:	00900a00 	addseq	r0, r0, r0, lsl #20
    2f24:	00630000 	rsbeq	r0, r3, r0
    2f28:	00159f03 	andseq	r9, r5, r3, lsl #30
    2f2c:	d2180400 	andsle	r0, r8, #0, 8
    2f30:	0b000000 	bleq	2f38 <startup-0x1fffd0c8>
    2f34:	00000f9b 	muleq	r0, fp, pc	; <UNPREDICTABLE>
    2f38:	00250105 	eoreq	r0, r5, r5, lsl #2
    2f3c:	c8070000 	stmdagt	r7, {}	; <UNPREDICTABLE>
    2f40:	00000353 	andeq	r0, r0, r3, asr r3
    2f44:	0007af0c 	andeq	sl, r7, ip, lsl #30
    2f48:	2a0c7200 	bcs	31f750 <startup-0x1fce08b0>
    2f4c:	74000008 	strvc	r0, [r0], #-8
    2f50:	0008ef0c 	andeq	lr, r8, ip, lsl #30
    2f54:	8a0c7500 	bhi	32035c <startup-0x1fcdfca4>
    2f58:	76000004 	strvc	r0, [r0], -r4
    2f5c:	0009cc0c 	andeq	ip, r9, ip, lsl #24
    2f60:	810c7b00 	tsthi	ip, r0, lsl #22
    2f64:	7c00000e 	stcvc	0, cr0, [r0], {14}
    2f68:	0010dc0c 	andseq	sp, r0, ip, lsl #24
    2f6c:	360c7e00 	strcc	r7, [ip], -r0, lsl #28
    2f70:	7f000003 	svcvc	0x00000003
    2f74:	0007c30d 	andeq	ip, r7, sp, lsl #6
    2f78:	b50d0000 	strlt	r0, [sp, #-0]
    2f7c:	01000006 	tsteq	r0, r6
    2f80:	0008500d 	andeq	r5, r8, sp
    2f84:	0e0d0200 	cdpeq	2, 0, cr0, cr13, cr0, {0}
    2f88:	03000000 	movweq	r0, #0
    2f8c:	0000bb0d 	andeq	fp, r0, sp, lsl #22
    2f90:	180d0400 	stmdane	sp, {sl}
    2f94:	0500000f 	streq	r0, [r0, #-15]
    2f98:	000e020d 	andeq	r0, lr, sp, lsl #4
    2f9c:	380d0600 	stmdacc	sp, {r9, sl}
    2fa0:	07000007 	streq	r0, [r0, -r7]
    2fa4:	00001c0d 	andeq	r1, r0, sp, lsl #24
    2fa8:	d10d0800 	tstle	sp, r0, lsl #16
    2fac:	09000010 	stmdbeq	r0, {r4}
    2fb0:	000ab80d 	andeq	fp, sl, sp, lsl #16
    2fb4:	500d0a00 	andpl	r0, sp, r0, lsl #20
    2fb8:	0b00000c 	bleq	2ff0 <startup-0x1fffd010>
    2fbc:	000b740d 	andeq	r7, fp, sp, lsl #8
    2fc0:	a70d0c00 	strge	r0, [sp, -r0, lsl #24]
    2fc4:	0d000003 	stceq	0, cr0, [r0, #-12]
    2fc8:	000f2d0d 	andeq	r2, pc, sp, lsl #26
    2fcc:	340d0e00 	strcc	r0, [sp], #-3584	; 0xfffff200
    2fd0:	0f00000e 	svceq	0x0000000e
    2fd4:	0007500d 	andeq	r5, r7, sp
    2fd8:	270d1000 	strcs	r1, [sp, -r0]
    2fdc:	11000000 	mrsne	r0, (UNDEF: 0)
    2fe0:	000d480d 	andeq	r4, sp, sp, lsl #16
    2fe4:	430d1200 	movwmi	r1, #53760	; 0xd200
    2fe8:	13000007 	movwne	r0, #7
    2fec:	0005390d 	andeq	r3, r5, sp, lsl #18
    2ff0:	210d1400 	tstcs	sp, r0, lsl #8
    2ff4:	15000010 	strne	r0, [r0, #-16]
    2ff8:	0008600d 	andeq	r6, r8, sp
    2ffc:	4b0d1600 	blmi	348804 <startup-0x1fcb77fc>
    3000:	17000010 	smladne	r0, r0, r0, r0
    3004:	0009160d 	andeq	r1, r9, sp, lsl #12
    3008:	8d0d1800 	stchi	8, cr1, [sp, #-0]
    300c:	1900000f 	stmdbne	r0, {r0, r1, r2, r3}
    3010:	00029e0d 	andeq	r9, r2, sp, lsl #28
    3014:	1d0d1a00 	vstrne	s2, [sp, #-0]
    3018:	1b000007 	blne	303c <startup-0x1fffcfc4>
    301c:	0001450d 	andeq	r4, r1, sp, lsl #10
    3020:	fc0d1c00 	stc2	12, cr1, [sp], {-0}
    3024:	1d00000c 	stcne	0, cr0, [r0, #-48]	; 0xffffffd0
    3028:	0005dd0d 	andeq	sp, r5, sp, lsl #26
    302c:	cb0d1e00 	blgt	34a834 <startup-0x1fcb57cc>
    3030:	1f000006 	svcne	0x00000006
    3034:	0004430d 	andeq	r4, r4, sp, lsl #6
    3038:	ea0d2000 	b	34b040 <startup-0x1fcb4fc0>
    303c:	2100000a 	tstcs	r0, sl
    3040:	0008c20d 	andeq	ip, r8, sp, lsl #4
    3044:	ba0d2200 	blt	34b84c <startup-0x1fcb47b4>
    3048:	23000009 	movwcs	r0, #9
    304c:	0001d60d 	andeq	sp, r1, sp, lsl #12
    3050:	060d2400 	streq	r2, [sp], -r0, lsl #8
    3054:	2500000d 	strcs	r0, [r0, #-13]
    3058:	000f3f0d 	andeq	r3, pc, sp, lsl #30
    305c:	520d2600 	andpl	r2, sp, #0, 12
    3060:	27000003 	strcs	r0, [r0, -r3]
    3064:	000cca0d 	andeq	ip, ip, sp, lsl #20
    3068:	820d2800 	andhi	r2, sp, #0, 16
    306c:	2900000c 	stmdbcs	r0, {r2, r3}
    3070:	000a8e0d 	andeq	r8, sl, sp, lsl #28
    3074:	e00d2a00 	and	r2, sp, r0, lsl #20
    3078:	2b000001 	blcs	3084 <startup-0x1fffcf7c>
    307c:	0000390d 	andeq	r3, r0, sp, lsl #18
    3080:	790d2c00 	stmdbvc	sp, {sl, fp, sp}
    3084:	2d000007 	stccs	0, cr0, [r0, #-28]	; 0xffffffe4
    3088:	00109e0d 	andseq	r9, r0, sp, lsl #28
    308c:	0d0d2e00 	stceq	14, cr2, [sp, #-0]
    3090:	2f000011 	svccs	0x00000011
    3094:	000df80d 	andeq	pc, sp, sp, lsl #16
    3098:	ab0d3000 	blge	34f0a0 <startup-0x1fcb0f60>
    309c:	31000010 	tstcc	r0, r0, lsl r0
    30a0:	0004800d 	andeq	r8, r4, sp
    30a4:	b10d3200 	mrslt	r3, SP_fiq
    30a8:	33000000 	movwcc	r0, #0
    30ac:	000a590d 	andeq	r5, sl, sp, lsl #18
    30b0:	0b0d3400 	bleq	3500b8 <startup-0x1fcaff48>
    30b4:	35000009 	strcc	r0, [r0, #-9]
    30b8:	000ac80d 	andeq	ip, sl, sp, lsl #16
    30bc:	7c0d3600 	stcvc	6, cr3, [sp], {-0}
    30c0:	37000009 	strcc	r0, [r0, -r9]
    30c4:	0008850d 	andeq	r8, r8, sp, lsl #10
    30c8:	7a0d3800 	bvc	3510d0 <startup-0x1fcaef30>
    30cc:	39000000 	stmdbcc	r0, {}	; <UNPREDICTABLE>
    30d0:	0011860d 	andseq	r8, r1, sp, lsl #12
    30d4:	930d3a00 	movwls	r3, #55808	; 0xda00
    30d8:	3b00000b 	blcc	310c <startup-0x1fffcef4>
    30dc:	0004000d 	andeq	r0, r4, sp
    30e0:	d30d3c00 	movwle	r3, #56320	; 0xdc00
    30e4:	3d00000e 	stccc	0, cr0, [r0, #-56]	; 0xffffffc8
    30e8:	0009940d 	andeq	r9, r9, sp, lsl #8
    30ec:	ae0d3e00 	cdpge	14, 0, cr3, cr13, cr0, {0}
    30f0:	3f00000b 	svccc	0x0000000b
    30f4:	0001a80d 	andeq	sl, r1, sp, lsl #16
    30f8:	3a0d4000 	bcc	353100 <startup-0x1fcacf00>
    30fc:	4100000d 	tstmi	r0, sp
    3100:	0004500d 	andeq	r5, r4, sp
    3104:	a30d4200 	movwge	r4, #53760	; 0xd200
    3108:	43000007 	movwmi	r0, #7
    310c:	0002680d 	andeq	r6, r2, sp, lsl #16
    3110:	500d4400 	andpl	r4, sp, r0, lsl #8
    3114:	4500000e 	strmi	r0, [r0, #-14]
    3118:	0007910d 	andeq	r9, r7, sp, lsl #2
    311c:	b60d4600 	strlt	r4, [sp], -r0, lsl #12
    3120:	47000001 	strmi	r0, [r0, -r1]
    3124:	000eb30d 	andeq	fp, lr, sp, lsl #6
    3128:	b30d4800 	movwlt	r4, #55296	; 0xd800
    312c:	4900000c 	stmdbmi	r0, {r2, r3}
    3130:	000fdf0d 	andeq	sp, pc, sp, lsl #30
    3134:	fa0d4a00 	blx	35593c <startup-0x1fcaa6c4>
    3138:	4b000010 	blmi	3180 <startup-0x1fffce80>
    313c:	0007cd0d 	andeq	ip, r7, sp, lsl #26
    3140:	a20d4c00 	andge	r4, sp, #0, 24
    3144:	4d000009 	stcmi	0, cr0, [r0, #-36]	; 0xffffffdc
    3148:	0000cf0d 	andeq	ip, r0, sp, lsl #30
    314c:	c00d4e00 	andgt	r4, sp, r0, lsl #28
    3150:	4f00000c 	svcmi	0x0000000c
    3154:	00072a0d 	andeq	r2, r7, sp, lsl #20
    3158:	320d5000 	andcc	r5, sp, #0
    315c:	5100000a 	tstpl	r0, sl
    3160:	0fa00e00 	svceq	0x00a00e00
    3164:	fa050000 	blx	14316c <startup-0x1febce94>
    3168:	0000bd06 	andeq	fp, r0, r6, lsl #26
    316c:	08400f00 	stmdaeq	r0, {r8, r9, sl, fp}^
    3170:	3b060000 	blcc	183178 <startup-0x1fe7ce88>
    3174:	000000c2 	andeq	r0, r0, r2, asr #1
    3178:	37010710 	smladcc	r1, r0, r7, r0
    317c:	07000000 	streq	r0, [r0, -r0]
    3180:	0385035d 	orreq	r0, r5, #1946157057	; 0x74000001
    3184:	060d0000 	streq	r0, [sp], -r0
    3188:	00000012 	andeq	r0, r0, r2, lsl r0
    318c:	54455311 	strbpl	r5, [r5], #-785	; 0xfffffcef
    3190:	10000100 	andne	r0, r0, r0, lsl #2
    3194:	00370107 	eorseq	r0, r7, r7, lsl #2
    3198:	5f070000 	svcpl	0x00070000
    319c:	0003a003 	andeq	sl, r3, r3
    31a0:	09c40d00 	stmibeq	r4, {r8, sl, fp}^
    31a4:	0d000000 	stceq	0, cr0, [r0, #-0]
    31a8:	00000f55 	andeq	r0, r0, r5, asr pc
    31ac:	a3120001 	tstge	r2, #1
    31b0:	0700000c 	streq	r0, [r0, -ip]
    31b4:	0385035f 	orreq	r0, r5, #2080374785	; 0x7c000001
    31b8:	28130000 	ldmdacs	r3, {}	; <UNPREDICTABLE>
    31bc:	3805c307 	stmdacc	r5, {r0, r1, r2, r8, r9, lr, pc}
    31c0:	14000004 	strne	r0, [r0], #-4
    31c4:	0000100a 	andeq	r1, r0, sl
    31c8:	cd05c507 	cfstr32gt	mvfx12, [r5, #-28]	; 0xffffffe4
    31cc:	00000000 	andeq	r0, r0, r0
    31d0:	000de414 	andeq	lr, sp, r4, lsl r4
    31d4:	05c60700 	strbeq	r0, [r6, #1792]	; 0x700
    31d8:	000000cd 	andeq	r0, r0, sp, asr #1
    31dc:	08e71404 	stmiaeq	r7!, {r2, sl, ip}^
    31e0:	c7070000 	strgt	r0, [r7, -r0]
    31e4:	0000cd05 	andeq	ip, r0, r5, lsl #26
    31e8:	ae140800 	cdpge	8, 1, cr0, cr4, cr0, {0}
    31ec:	07000009 	streq	r0, [r0, -r9]
    31f0:	00cd05c8 	sbceq	r0, sp, r8, asr #11
    31f4:	150c0000 	strne	r0, [ip, #-0]
    31f8:	00524449 	subseq	r4, r2, r9, asr #8
    31fc:	cd05c907 	vstrgt.16	s24, [r5, #-14]	; <UNPREDICTABLE>
    3200:	10000000 	andne	r0, r0, r0
    3204:	52444f15 	subpl	r4, r4, #21, 30	; 0x54
    3208:	05ca0700 	strbeq	r0, [sl, #1792]	; 0x700
    320c:	000000cd 	andeq	r0, r0, sp, asr #1
    3210:	0a041414 	beq	108268 <startup-0x1fef7d98>
    3214:	cb070000 	blgt	1c321c <startup-0x1fe3cde4>
    3218:	0000ad05 	andeq	sl, r0, r5, lsl #26
    321c:	e1141800 	tst	r4, r0, lsl #16
    3220:	07000009 	streq	r0, [r0, -r9]
    3224:	00ad05cc 	adceq	r0, sp, ip, asr #11
    3228:	141a0000 	ldrne	r0, [sl], #-0
    322c:	000008a6 	andeq	r0, r0, r6, lsr #17
    3230:	cd05cd07 	stcgt	13, cr12, [r5, #-28]	; 0xffffffe4
    3234:	1c000000 	stcne	0, cr0, [r0], {-0}
    3238:	52464115 	subpl	r4, r6, #1073741829	; 0x40000005
    323c:	05ce0700 	strbeq	r0, [lr, #1792]	; 0x700
    3240:	00000448 	andeq	r0, r0, r8, asr #8
    3244:	cd090020 	stcgt	0, cr0, [r9, #-128]	; 0xffffff80
    3248:	48000000 	stmdami	r0, {}	; <UNPREDICTABLE>
    324c:	0a000004 	beq	3264 <startup-0x1fffcd9c>
    3250:	00000090 	muleq	r0, r0, r0
    3254:	38050001 	stmdacc	r5, {r0}
    3258:	12000004 	andne	r0, r0, #4
    325c:	00000f80 	andeq	r0, r0, r0, lsl #31
    3260:	ac05cf07 	stcge	15, cr12, [r5], {7}
    3264:	13000003 	movwne	r0, #3
    3268:	0773071c 			; <UNDEFINED> instruction: 0x0773071c
    326c:	00000517 	andeq	r0, r0, r7, lsl r5
    3270:	00525315 	subseq	r5, r2, r5, lsl r3
    3274:	ad077507 	cfstr32ge	mvfx7, [r7, #-28]	; 0xffffffe4
    3278:	00000000 	andeq	r0, r0, r0
    327c:	0003de14 	andeq	sp, r3, r4, lsl lr
    3280:	07760700 	ldrbeq	r0, [r6, -r0, lsl #14]!
    3284:	000000a2 	andeq	r0, r0, r2, lsr #1
    3288:	52441502 	subpl	r1, r4, #8388608	; 0x800000
    328c:	07770700 	ldrbeq	r0, [r7, -r0, lsl #14]!
    3290:	000000ad 	andeq	r0, r0, sp, lsr #1
    3294:	03e81404 	mvneq	r1, #4, 8	; 0x4000000
    3298:	78070000 	stmdavc	r7, {}	; <UNPREDICTABLE>
    329c:	0000a207 	andeq	sl, r0, r7, lsl #4
    32a0:	42150600 	andsmi	r0, r5, #0, 12
    32a4:	07005252 	smlsdeq	r0, r2, r2, r5
    32a8:	00ad0779 	adceq	r0, sp, r9, ror r7
    32ac:	14080000 	strne	r0, [r8], #-0
    32b0:	0000046c 	andeq	r0, r0, ip, ror #8
    32b4:	a2077a07 	andge	r7, r7, #28672	; 0x7000
    32b8:	0a000000 	beq	32c0 <startup-0x1fffcd40>
    32bc:	31524315 	cmpcc	r2, r5, lsl r3
    32c0:	077b0700 	ldrbeq	r0, [fp, -r0, lsl #14]!
    32c4:	000000ad 	andeq	r0, r0, sp, lsr #1
    32c8:	0476140c 	ldrbteq	r1, [r6], #-1036	; 0xfffffbf4
    32cc:	7c070000 	stcvc	0, cr0, [r7], {-0}
    32d0:	0000a207 	andeq	sl, r0, r7, lsl #4
    32d4:	43150e00 	tstmi	r5, #0, 28
    32d8:	07003252 	smlsdeq	r0, r2, r2, r3
    32dc:	00ad077d 	adceq	r0, sp, sp, ror r7
    32e0:	14100000 	ldrne	r0, [r0], #-0
    32e4:	00000412 	andeq	r0, r0, r2, lsl r4
    32e8:	a2077e07 	andge	r7, r7, #7, 28	; 0x70
    32ec:	12000000 	andne	r0, r0, #0
    32f0:	33524315 	cmpcc	r2, #1409286144	; 0x54000000
    32f4:	077f0700 	ldrbeq	r0, [pc, -r0, lsl #14]!
    32f8:	000000ad 	andeq	r0, r0, sp, lsr #1
    32fc:	041c1414 	ldreq	r1, [ip], #-1044	; 0xfffffbec
    3300:	80070000 	andhi	r0, r7, r0
    3304:	0000a207 	andeq	sl, r0, r7, lsl #4
    3308:	e9141600 	ldmdb	r4, {r9, sl, ip}
    330c:	07000015 	smladeq	r0, r5, r0, r0
    3310:	00ad0781 	adceq	r0, sp, r1, lsl #15
    3314:	14180000 	ldrne	r0, [r8], #-0
    3318:	00000426 	andeq	r0, r0, r6, lsr #8
    331c:	a2078207 	andge	r8, r7, #1879048192	; 0x70000000
    3320:	1a000000 	bne	3328 <startup-0x1fffccd8>
    3324:	16551200 	ldrbne	r1, [r5], -r0, lsl #4
    3328:	83070000 	movwhi	r0, #28672	; 0x7000
    332c:	00045907 	andeq	r5, r4, r7, lsl #18
    3330:	08040600 	stmdaeq	r4, {r9, sl}
    3334:	00055c36 	andeq	r5, r5, r6, lsr ip
    3338:	14560700 	ldrbne	r0, [r6], #-1792	; 0xfffff900
    333c:	38080000 	stmdacc	r8, {}	; <UNPREDICTABLE>
    3340:	00000097 	muleq	r0, r7, r0
    3344:	14810700 	strne	r0, [r1], #1792	; 0x700
    3348:	3d080000 	stccc	0, cr0, [r8, #-0]
    334c:	00000097 	muleq	r0, r7, r0
    3350:	14660701 	strbtne	r0, [r6], #-1793	; 0xfffff8ff
    3354:	42080000 	andmi	r0, r8, #0
    3358:	00000097 	muleq	r0, r7, r0
    335c:	13a30702 			; <UNDEFINED> instruction: 0x13a30702
    3360:	47080000 	strmi	r0, [r8, -r0]
    3364:	000003a0 	andeq	r0, r0, r0, lsr #7
    3368:	92030003 	andls	r0, r3, #3
    336c:	08000013 	stmdaeq	r0, {r0, r1, r4}
    3370:	0005234a 	andeq	r2, r5, sl, asr #6
    3374:	09100600 	ldmdbeq	r0, {r9, sl}
    3378:	0005b836 	andeq	fp, r5, r6, lsr r8
    337c:	16db0700 	ldrbne	r0, [fp], r0, lsl #14
    3380:	38090000 	stmdacc	r9, {}	; <UNPREDICTABLE>
    3384:	000000c2 	andeq	r0, r0, r2, asr #1
    3388:	16af0700 	strtne	r0, [pc], r0, lsl #14
    338c:	3e090000 	cdpcc	0, 0, cr0, cr9, cr0, {0}
    3390:	000000a2 	andeq	r0, r0, r2, lsr #1
    3394:	16630704 	strbtne	r0, [r3], -r4, lsl #14
    3398:	41090000 	mrsmi	r0, (UNDEF: 9)
    339c:	000000a2 	andeq	r0, r0, r2, lsr #1
    33a0:	17790706 	ldrbne	r0, [r9, -r6, lsl #14]!
    33a4:	44090000 	strmi	r0, [r9], #-0
    33a8:	000000a2 	andeq	r0, r0, r2, lsr #1
    33ac:	184d0708 	stmdane	sp, {r3, r8, r9, sl}^
    33b0:	4b090000 	blmi	2433b8 <startup-0x1fdbcc48>
    33b4:	000000a2 	andeq	r0, r0, r2, lsr #1
    33b8:	1820070a 	stmdane	r0!, {r1, r3, r8, r9, sl}
    33bc:	4e090000 	cdpmi	0, 0, cr0, cr9, cr0, {0}
    33c0:	000000a2 	andeq	r0, r0, r2, lsr #1
    33c4:	eb03000c 	bl	c33fc <startup-0x1ff3cc04>
    33c8:	09000017 	stmdbeq	r0, {r0, r1, r2, r4}
    33cc:	00056751 	andeq	r6, r5, r1, asr r7
    33d0:	01071600 	tsteq	r7, r0, lsl #12
    33d4:	00000037 	andeq	r0, r0, r7, lsr r0
    33d8:	05e9420a 	strbeq	r4, [r9, #522]!	; 0x20a
    33dc:	780d0000 	stmdavc	sp, {}	; <UNPREDICTABLE>
    33e0:	00000008 	andeq	r0, r0, r8
    33e4:	00070f0d 	andeq	r0, r7, sp, lsl #30
    33e8:	7a0d0100 	bvc	3437f0 <startup-0x1fcbc810>
    33ec:	02000002 	andeq	r0, r0, #2
    33f0:	0002b60d 	andeq	fp, r2, sp, lsl #12
    33f4:	03000300 	movweq	r0, #768	; 0x300
    33f8:	00000d72 	andeq	r0, r0, r2, ror sp
    33fc:	05c3470a 	strbeq	r4, [r3, #1802]	; 0x70a
    3400:	07160000 	ldreq	r0, [r6, -r0]
    3404:	00003701 	andeq	r3, r0, r1, lsl #14
    3408:	0e4f0a00 	vmlaeq.f32	s1, s30, s0
    340c:	0d000006 	stceq	0, cr0, [r0, #-24]	; 0xffffffe8
    3410:	00000435 	andeq	r0, r0, r5, lsr r4
    3414:	03770d00 	cmneq	r7, #0, 26
    3418:	00010000 	andeq	r0, r1, r0
    341c:	00011303 	andeq	r1, r1, r3, lsl #6
    3420:	f4520a00 			; <UNDEFINED> instruction: 0xf4520a00
    3424:	16000005 	strne	r0, [r0], -r5
    3428:	00370107 	eorseq	r0, r7, r7, lsl #2
    342c:	5a0a0000 	bpl	283434 <startup-0x1fd7cbcc>
    3430:	0000063f 	andeq	r0, r0, pc, lsr r6
    3434:	00052a0d 	andeq	r2, r5, sp, lsl #20
    3438:	500d0000 	andpl	r0, sp, r0
    343c:	01000009 	tsteq	r0, r9
    3440:	0011980d 	andseq	r9, r1, sp, lsl #16
    3444:	0a0d0200 	beq	343c4c <startup-0x1fcbc3b4>
    3448:	0300000a 	movweq	r0, #10
    344c:	0e6f0300 	cdpeq	3, 6, cr0, cr15, cr0, {0}
    3450:	5f0a0000 	svcpl	0x000a0000
    3454:	00000619 	andeq	r0, r0, r9, lsl r6
    3458:	37010716 	smladcc	r1, r6, r7, r0
    345c:	0a000000 	beq	3464 <startup-0x1fffcb9c>
    3460:	00066a6e 	andeq	r6, r6, lr, ror #20
    3464:	009b0d00 	addseq	r0, fp, r0, lsl #26
    3468:	0d000000 	stceq	0, cr0, [r0, #-0]
    346c:	0000103e 	andeq	r1, r0, lr, lsr r0
    3470:	01fe0d01 	mvnseq	r0, r1, lsl #26
    3474:	00020000 	andeq	r0, r2, r0
    3478:	0004a903 	andeq	sl, r4, r3, lsl #18
    347c:	4a720a00 	bmi	1c85c84 <startup-0x1e37a37c>
    3480:	06000006 	streq	r0, [r0], -r6
    3484:	ba840a08 	blt	fe105cac <APBAHBPrescTable+0xde1034e0>
    3488:	07000006 	streq	r0, [r0, -r6]
    348c:	00000e93 	muleq	r0, r3, lr
    3490:	00c2860a 	sbceq	r8, r2, sl, lsl #12
    3494:	07000000 	streq	r0, [r0, -r0]
    3498:	00000d30 	andeq	r0, r0, r0, lsr sp
    349c:	05e9890a 	strbeq	r8, [r9, #2314]!	; 0x90a
    34a0:	07040000 	streq	r0, [r4, -r0]
    34a4:	00000adf 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    34a8:	063f8c0a 	ldrteq	r8, [pc], -sl, lsl #24
    34ac:	07050000 	streq	r0, [r5, -r0]
    34b0:	00000929 	andeq	r0, r0, r9, lsr #18
    34b4:	060e8f0a 	streq	r8, [lr], -sl, lsl #30
    34b8:	07060000 	streq	r0, [r6, -r0]
    34bc:	00000ec0 	andeq	r0, r0, r0, asr #29
    34c0:	066a920a 	strbteq	r9, [sl], -sl, lsl #4
    34c4:	00070000 	andeq	r0, r7, r0
    34c8:	00038503 	andeq	r8, r3, r3, lsl #10
    34cc:	75940a00 	ldrvc	r0, [r4, #2560]	; 0xa00
    34d0:	03000006 	movweq	r0, #6
    34d4:	00001e93 	muleq	r0, r3, lr
    34d8:	06d0220b 	ldrbeq	r2, [r0], fp, lsl #4
    34dc:	04170000 	ldreq	r0, [r7], #-0
    34e0:	000006d6 	ldrdeq	r0, [r0], -r6
    34e4:	001bef18 	andseq	lr, fp, r8, lsl pc
    34e8:	1eba0300 	cdpne	3, 11, cr0, cr10, cr0, {0}
    34ec:	2c0c0000 	stccs	0, cr0, [ip], {-0}
    34f0:	00000062 	andeq	r0, r0, r2, rrx
    34f4:	001d9a03 	andseq	r9, sp, r3, lsl #20
    34f8:	62720c00 	rsbsvs	r0, r2, #0, 24
    34fc:	12000000 	andne	r0, r0, #0
    3500:	00001e31 	andeq	r1, r0, r1, lsr lr
    3504:	9001650d 	andls	r6, r1, sp, lsl #10
    3508:	19000000 	stmdbne	r0, {}	; <UNPREDICTABLE>
    350c:	1ca60c04 	stcne	12, cr0, [r6], #16
    3510:	1a000007 	bne	3534 <startup-0x1fffcacc>
    3514:	00001b1b 	andeq	r1, r0, fp, lsl fp
    3518:	06f1a80c 	ldrbteq	sl, [r1], ip, lsl #16
    351c:	a21a0000 	andsge	r0, sl, #0
    3520:	0c00001d 	stceq	0, cr0, [r0], {29}
    3524:	00071ca9 	andeq	r1, r7, r9, lsr #25
    3528:	37090000 	strcc	r0, [r9, -r0]
    352c:	2c000000 	stccs	0, cr0, [r0], {-0}
    3530:	0a000007 	beq	3554 <startup-0x1fffcaac>
    3534:	00000090 	muleq	r0, r0, r0
    3538:	08060003 	stmdaeq	r6, {r0, r1}
    353c:	074da30c 	strbeq	sl, [sp, -ip, lsl #6]
    3540:	53070000 	movwpl	r0, #28672	; 0x7000
    3544:	0c00001d 	stceq	0, cr0, [r0], {29}
    3548:	000089a5 	andeq	r8, r0, r5, lsr #19
    354c:	4e070000 	cdpmi	0, 0, cr0, cr7, cr0, {0}
    3550:	0c00001a 	stceq	0, cr0, [r0], {26}
    3554:	0006fdaa 	andeq	pc, r6, sl, lsr #27
    3558:	03000400 	movweq	r0, #1024	; 0x400
    355c:	00001e21 	andeq	r1, r0, r1, lsr #28
    3560:	072cab0c 	streq	sl, [ip, -ip, lsl #22]!
    3564:	11030000 	mrsne	r0, (UNDEF: 3)
    3568:	0c00001e 	stceq	0, cr0, [r0], {30}
    356c:	0006c5af 	andeq	ip, r6, pc, lsr #11
    3570:	17041b00 	strne	r1, [r4, -r0, lsl #22]
    3574:	00076b04 	andeq	r6, r7, r4, lsl #22
    3578:	08010200 	stmdaeq	r1, {r9}
    357c:	000003fb 	strdeq	r0, [r0], -fp
    3580:	00076b1c 	andeq	r6, r7, ip, lsl fp
    3584:	1eaa0300 	cdpne	3, 10, cr0, cr10, cr0, {0}
    3588:	160e0000 	strne	r0, [lr], -r0
    358c:	00000074 	andeq	r0, r0, r4, ror r0
    3590:	001c4f1d 	andseq	r4, ip, sp, lsl pc
    3594:	2f0e1800 	svccs	0x000e1800
    3598:	000007d5 	ldrdeq	r0, [r0], -r5
    359c:	001d3e07 	andseq	r3, sp, r7, lsl #28
    35a0:	d5310e00 	ldrle	r0, [r1, #-3584]!	; 0xfffff200
    35a4:	00000007 	andeq	r0, r0, r7
    35a8:	006b5f08 	rsbeq	r5, fp, r8, lsl #30
    35ac:	0089320e 	addeq	r3, r9, lr, lsl #4
    35b0:	07040000 	streq	r0, [r4, -r0]
    35b4:	00001c57 	andeq	r1, r0, r7, asr ip
    35b8:	0089320e 	addeq	r3, r9, lr, lsl #4
    35bc:	07080000 	streq	r0, [r8, -r0]
    35c0:	00001cd4 	ldrdeq	r1, [r0], -r4
    35c4:	0089320e 	addeq	r3, r9, lr, lsl #4
    35c8:	070c0000 	streq	r0, [ip, -r0]
    35cc:	00001bea 	andeq	r1, r0, sl, ror #23
    35d0:	0089320e 	addeq	r3, r9, lr, lsl #4
    35d4:	08100000 	ldmdaeq	r0, {}	; <UNPREDICTABLE>
    35d8:	0e00785f 	mcreq	8, 0, r7, cr0, cr15, {2}
    35dc:	0007db33 	andeq	sp, r7, r3, lsr fp
    35e0:	17001400 	strne	r1, [r0, -r0, lsl #8]
    35e4:	00078204 	andeq	r8, r7, r4, lsl #4
    35e8:	07770900 	ldrbeq	r0, [r7, -r0, lsl #18]!
    35ec:	07eb0000 	strbeq	r0, [fp, r0]!
    35f0:	900a0000 	andls	r0, sl, r0
    35f4:	00000000 	andeq	r0, r0, r0
    35f8:	1ad31d00 	bne	ff4caa00 <APBAHBPrescTable+0xdf4c8234>
    35fc:	0e240000 	cdpeq	0, 2, cr0, cr4, cr0, {0}
    3600:	00086437 	andeq	r6, r8, r7, lsr r4
    3604:	1aef0700 	bne	ffbc520c <APBAHBPrescTable+0xdfbc2a40>
    3608:	390e0000 	stmdbcc	lr, {}	; <UNPREDICTABLE>
    360c:	00000089 	andeq	r0, r0, r9, lsl #1
    3610:	1f0f0700 	svcne	0x000f0700
    3614:	3a0e0000 	bcc	38361c <startup-0x1fc7c9e4>
    3618:	00000089 	andeq	r0, r0, r9, lsl #1
    361c:	1ec60704 	cdpne	7, 12, cr0, cr6, cr4, {0}
    3620:	3b0e0000 	blcc	383628 <startup-0x1fc7c9d8>
    3624:	00000089 	andeq	r0, r0, r9, lsl #1
    3628:	1d050708 	stcne	7, cr0, [r5, #-32]	; 0xffffffe0
    362c:	3c0e0000 	stccc	0, cr0, [lr], {-0}
    3630:	00000089 	andeq	r0, r0, r9, lsl #1
    3634:	1b62070c 	blne	188526c <startup-0x1e77ad94>
    3638:	3d0e0000 	stccc	0, cr0, [lr, #-0]
    363c:	00000089 	andeq	r0, r0, r9, lsl #1
    3640:	1e670710 	mcrne	7, 3, r0, cr7, cr0, {0}
    3644:	3e0e0000 	cdpcc	0, 0, cr0, cr14, cr0, {0}
    3648:	00000089 	andeq	r0, r0, r9, lsl #1
    364c:	1ed00714 	mrcne	7, 6, r0, cr0, cr4, {0}
    3650:	3f0e0000 	svccc	0x000e0000
    3654:	00000089 	andeq	r0, r0, r9, lsl #1
    3658:	1d7d0718 	ldclne	7, cr0, [sp, #-96]!	; 0xffffffa0
    365c:	400e0000 	andmi	r0, lr, r0
    3660:	00000089 	andeq	r0, r0, r9, lsl #1
    3664:	1efb071c 	mrcne	7, 7, r0, cr11, cr12, {0}
    3668:	410e0000 	mrsmi	r0, (UNDEF: 14)
    366c:	00000089 	andeq	r0, r0, r9, lsl #1
    3670:	271e0020 	ldrcs	r0, [lr, -r0, lsr #32]
    3674:	0800001b 	stmdaeq	r0, {r0, r1, r3, r4}
    3678:	a44a0e01 	strbge	r0, [sl], #-3585	; 0xfffff1ff
    367c:	07000008 	streq	r0, [r0, -r8]
    3680:	00001ef3 	strdeq	r1, [r0], -r3
    3684:	08a44b0e 	stmiaeq	r4!, {r1, r2, r3, r8, r9, fp, lr}
    3688:	07000000 	streq	r0, [r0, -r0]
    368c:	00001db7 			; <UNDEFINED> instruction: 0x00001db7
    3690:	08a44c0e 	stmiaeq	r4!, {r1, r2, r3, sl, fp, lr}
    3694:	1f800000 	svcne	0x00800000
    3698:	00001e58 	andeq	r1, r0, r8, asr lr
    369c:	07774e0e 	ldrbeq	r4, [r7, -lr, lsl #28]!
    36a0:	01000000 	mrseq	r0, (UNDEF: 0)
    36a4:	001e8b1f 	andseq	r8, lr, pc, lsl fp
    36a8:	77510e00 	ldrbvc	r0, [r1, -r0, lsl #28]
    36ac:	04000007 	streq	r0, [r0], #-7
    36b0:	63090001 	movwvs	r0, #36865	; 0x9001
    36b4:	b4000007 	strlt	r0, [r0], #-7
    36b8:	0a000008 	beq	36e0 <startup-0x1fffc920>
    36bc:	00000090 	muleq	r0, r0, r0
    36c0:	4b1e001f 	blmi	783744 <startup-0x1f87c8bc>
    36c4:	9000001d 	andls	r0, r0, sp, lsl r0
    36c8:	f25d0e01 	vceq.f16	d16, d13, d1
    36cc:	07000008 	streq	r0, [r0, -r8]
    36d0:	00001d3e 	andeq	r1, r0, lr, lsr sp
    36d4:	08f25e0e 	ldmeq	r2!, {r1, r2, r3, r9, sl, fp, ip, lr}^
    36d8:	07000000 	streq	r0, [r0, -r0]
    36dc:	00001e7f 	andeq	r1, r0, pc, ror lr
    36e0:	00895f0e 	addeq	r5, r9, lr, lsl #30
    36e4:	07040000 	streq	r0, [r4, -r0]
    36e8:	00001bcd 	andeq	r1, r0, sp, asr #23
    36ec:	08f8610e 	ldmeq	r8!, {r1, r2, r3, r8, sp, lr}^
    36f0:	07080000 	streq	r0, [r8, -r0]
    36f4:	00001b27 	andeq	r1, r0, r7, lsr #22
    36f8:	0864620e 	stmdaeq	r4!, {r1, r2, r3, r9, sp, lr}^
    36fc:	00880000 	addeq	r0, r8, r0
    3700:	08b40417 	ldmeq	r4!, {r0, r1, r2, r4, sl}
    3704:	08090000 	stmdaeq	r9, {}	; <UNPREDICTABLE>
    3708:	08000009 	stmdaeq	r0, {r0, r3}
    370c:	0a000009 	beq	3738 <startup-0x1fffc8c8>
    3710:	00000090 	muleq	r0, r0, r0
    3714:	0417001f 	ldreq	r0, [r7], #-31	; 0xffffffe1
    3718:	0000090e 	andeq	r0, r0, lr, lsl #18
    371c:	1e841d20 	cdpne	13, 8, cr1, cr4, cr0, {1}
    3720:	0e080000 	cdpeq	0, 0, cr0, cr8, cr0, {0}
    3724:	00093475 	andeq	r3, r9, r5, ror r4
    3728:	1def0700 	stclne	7, cr0, [pc]	; 3730 <startup-0x1fffc8d0>
    372c:	760e0000 	strvc	r0, [lr], -r0
    3730:	00000934 	andeq	r0, r0, r4, lsr r9
    3734:	1b4d0700 	blne	134533c <startup-0x1ecbacc4>
    3738:	770e0000 	strvc	r0, [lr, -r0]
    373c:	00000089 	andeq	r0, r0, r9, lsl #1
    3740:	04170004 	ldreq	r0, [r7], #-4
    3744:	00000037 	andeq	r0, r0, r7, lsr r0
    3748:	001c1c1d 	andseq	r1, ip, sp, lsl ip
    374c:	b50e6800 	strlt	r6, [lr, #-2048]	; 0xfffff800
    3750:	00000a64 	andeq	r0, r0, r4, ror #20
    3754:	00705f08 	rsbseq	r5, r0, r8, lsl #30
    3758:	0934b60e 	ldmdbeq	r4!, {r1, r2, r3, r9, sl, ip, sp, pc}
    375c:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    3760:	0e00725f 	mcreq	2, 0, r7, cr0, cr15, {2}
    3764:	000089b7 			; <UNDEFINED> instruction: 0x000089b7
    3768:	5f080400 	svcpl	0x00080400
    376c:	b80e0077 	stmdalt	lr, {r0, r1, r2, r4, r5, r6}
    3770:	00000089 	andeq	r0, r0, r9, lsl #1
    3774:	1d440708 	stclne	7, cr0, [r4, #-32]	; 0xffffffe0
    3778:	b90e0000 	stmdblt	lr, {}	; <UNPREDICTABLE>
    377c:	0000003e 	andeq	r0, r0, lr, lsr r0
    3780:	1b21070c 	blne	8453b8 <startup-0x1f7bac48>
    3784:	ba0e0000 	blt	38378c <startup-0x1fc7c874>
    3788:	0000003e 	andeq	r0, r0, lr, lsr r0
    378c:	625f080e 	subsvs	r0, pc, #917504	; 0xe0000
    3790:	bb0e0066 	bllt	383930 <startup-0x1fc7c6d0>
    3794:	0000090f 	andeq	r0, r0, pc, lsl #18
    3798:	1e710710 	mrcne	7, 3, r0, cr1, cr0, {0}
    379c:	bc0e0000 	stclt	0, cr0, [lr], {-0}
    37a0:	00000089 	andeq	r0, r0, r9, lsl #1
    37a4:	1be20718 	blne	ff88540c <APBAHBPrescTable+0xdf882c40>
    37a8:	c30e0000 	movwgt	r0, #57344	; 0xe000
    37ac:	00000763 	andeq	r0, r0, r3, ror #14
    37b0:	0593071c 	ldreq	r0, [r3, #1820]	; 0x71c
    37b4:	c50e0000 	strgt	r0, [lr, #-0]
    37b8:	00000bbf 			; <UNDEFINED> instruction: 0x00000bbf
    37bc:	1aaf0720 	bne	febc5444 <APBAHBPrescTable+0xdebc2c78>
    37c0:	c70e0000 	strgt	r0, [lr, -r0]
    37c4:	00000be9 	andeq	r0, r0, r9, ror #23
    37c8:	1d940724 	ldcne	7, cr0, [r4, #144]	; 0x90
    37cc:	ca0e0000 	bgt	3837d4 <startup-0x1fc7c82c>
    37d0:	00000c0d 	andeq	r0, r0, sp, lsl #24
    37d4:	1d760728 	ldclne	7, cr0, [r6, #-160]!	; 0xffffff60
    37d8:	cb0e0000 	blgt	3837e0 <startup-0x1fc7c820>
    37dc:	00000c27 	andeq	r0, r0, r7, lsr #24
    37e0:	755f082c 	ldrbvc	r0, [pc, #-2092]	; 2fbc <startup-0x1fffd044>
    37e4:	ce0e0062 	cdpgt	0, 0, cr0, cr14, cr2, {3}
    37e8:	0000090f 	andeq	r0, r0, pc, lsl #18
    37ec:	755f0830 	ldrbvc	r0, [pc, #-2096]	; 2fc4 <startup-0x1fffd03c>
    37f0:	cf0e0070 	svcgt	0x000e0070
    37f4:	00000934 	andeq	r0, r0, r4, lsr r9
    37f8:	755f0838 	ldrbvc	r0, [pc, #-2104]	; 2fc8 <startup-0x1fffd038>
    37fc:	d00e0072 	andle	r0, lr, r2, ror r0
    3800:	00000089 	andeq	r0, r0, r9, lsl #1
    3804:	1d14073c 	ldcne	7, cr0, [r4, #-240]	; 0xffffff10
    3808:	d30e0000 	movwle	r0, #57344	; 0xe000
    380c:	00000c2d 	andeq	r0, r0, sp, lsr #24
    3810:	1ae90740 	bne	ffa45518 <APBAHBPrescTable+0xdfa42d4c>
    3814:	d40e0000 	strle	r0, [lr], #-0
    3818:	00000c3d 	andeq	r0, r0, sp, lsr ip
    381c:	6c5f0843 	mrrcvs	8, 4, r0, pc, cr3	; <UNPREDICTABLE>
    3820:	d70e0062 	strle	r0, [lr, -r2, rrx]
    3824:	0000090f 	andeq	r0, r0, pc, lsl #18
    3828:	1dd30744 	ldclne	7, cr0, [r3, #272]	; 0x110
    382c:	da0e0000 	ble	383834 <startup-0x1fc7c7cc>
    3830:	00000089 	andeq	r0, r0, r9, lsl #1
    3834:	1eeb074c 	cdpne	7, 14, cr0, cr11, cr12, {2}
    3838:	db0e0000 	blle	383840 <startup-0x1fc7c7c0>
    383c:	000006db 	ldrdeq	r0, [r0], -fp
    3840:	1e380750 	mrcne	7, 1, r0, cr8, cr0, {2}
    3844:	de0e0000 	cdple	0, 0, cr0, cr14, cr0, {0}
    3848:	00000a82 	andeq	r0, r0, r2, lsl #21
    384c:	1bf00754 	blne	ffc055a4 <APBAHBPrescTable+0xdfc02dd8>
    3850:	e20e0000 	and	r0, lr, #0
    3854:	00000758 	andeq	r0, r0, r8, asr r7
    3858:	1d300758 	ldcne	7, cr0, [r0, #-352]!	; 0xfffffea0
    385c:	e40e0000 	str	r0, [lr], #-0
    3860:	0000074d 	andeq	r0, r0, sp, asr #14
    3864:	1c2f075c 	stcne	7, cr0, [pc], #-368	; 36fc <startup-0x1fffc904>
    3868:	e50e0000 	str	r0, [lr, #-0]
    386c:	00000089 	andeq	r0, r0, r9, lsl #1
    3870:	89210064 	stmdbhi	r1!, {r2, r5, r6}
    3874:	82000000 	andhi	r0, r0, #0
    3878:	2200000a 	andcs	r0, r0, #10
    387c:	00000a82 	andeq	r0, r0, r2, lsl #21
    3880:	00076322 	andeq	r6, r7, r2, lsr #6
    3884:	07652200 	strbeq	r2, [r5, -r0, lsl #4]!
    3888:	89220000 	stmdbhi	r2!, {}	; <UNPREDICTABLE>
    388c:	00000000 	andeq	r0, r0, r0
    3890:	0a8d0417 	beq	fe3448f4 <APBAHBPrescTable+0xde342128>
    3894:	821c0000 	andshi	r0, ip, #0
    3898:	2300000a 	movwcs	r0, #10
    389c:	00001bb3 			; <UNDEFINED> instruction: 0x00001bb3
    38a0:	390e0428 	stmdbcc	lr, {r3, r5, sl}
    38a4:	000bbf02 	andeq	fp, fp, r2, lsl #30
    38a8:	1cef1400 	cfstrdne	mvd1, [pc]	; 38b0 <startup-0x1fffc750>
    38ac:	3b0e0000 	blcc	3838b4 <startup-0x1fc7c74c>
    38b0:	00008902 	andeq	r8, r0, r2, lsl #18
    38b4:	d2140000 	andsle	r0, r4, #0
    38b8:	0e00001b 	mcreq	0, 0, r0, cr0, cr11, {0}
    38bc:	0c940240 	lfmeq	f0, 4, [r4], {64}	; 0x40
    38c0:	14040000 	strne	r0, [r4], #-0
    38c4:	00001dcb 	andeq	r1, r0, fp, asr #27
    38c8:	9402400e 	strls	r4, [r2], #-14
    38cc:	0800000c 	stmdaeq	r0, {r2, r3}
    38d0:	001d1a14 	andseq	r1, sp, r4, lsl sl
    38d4:	02400e00 	subeq	r0, r0, #0, 28
    38d8:	00000c94 	muleq	r0, r4, ip
    38dc:	1e7a140c 	cdpne	4, 7, cr1, cr10, cr12, {0}
    38e0:	420e0000 	andmi	r0, lr, #0
    38e4:	00008902 	andeq	r8, r0, r2, lsl #18
    38e8:	68141000 	ldmdavs	r4, {ip}
    38ec:	0e00001c 	mcreq	0, 0, r0, cr0, cr12, {0}
    38f0:	0e760243 	cdpeq	2, 7, cr0, cr6, cr3, {2}
    38f4:	14140000 	ldrne	r0, [r4], #-0
    38f8:	00001b9a 	muleq	r0, sl, fp
    38fc:	8902460e 	stmdbhi	r2, {r1, r2, r3, r9, sl, lr}
    3900:	30000000 	andcc	r0, r0, r0
    3904:	001ea214 	andseq	sl, lr, r4, lsl r2
    3908:	02470e00 	subeq	r0, r7, #0, 28
    390c:	00000e8b 	andeq	r0, r0, fp, lsl #29
    3910:	1c241434 	cfstrsne	mvf1, [r4], #-208	; 0xffffff30
    3914:	490e0000 	stmdbmi	lr, {}	; <UNPREDICTABLE>
    3918:	00008902 	andeq	r8, r0, r2, lsl #18
    391c:	a5143800 	ldrge	r3, [r4, #-2048]	; 0xfffff800
    3920:	0e00001a 	mcreq	0, 0, r0, cr0, cr10, {0}
    3924:	0e9c024b 	cdpeq	2, 9, cr0, cr12, cr11, {2}
    3928:	143c0000 	ldrtne	r0, [ip], #-0
    392c:	00001eb2 			; <UNDEFINED> instruction: 0x00001eb2
    3930:	d5024e0e 	strle	r4, [r2, #-3598]	; 0xfffff1f2
    3934:	40000007 	andmi	r0, r0, r7
    3938:	001b4314 	andseq	r4, fp, r4, lsl r3
    393c:	024f0e00 	subeq	r0, pc, #0, 28
    3940:	00000089 	andeq	r0, r0, r9, lsl #1
    3944:	1c171444 	cfldrsne	mvf1, [r7], {68}	; 0x44
    3948:	500e0000 	andpl	r0, lr, r0
    394c:	0007d502 	andeq	sp, r7, r2, lsl #10
    3950:	be144800 	cdplt	8, 1, cr4, cr4, cr0, {0}
    3954:	0e00001c 	mcreq	0, 0, r0, cr0, cr12, {0}
    3958:	0ea20251 	mcreq	2, 5, r0, cr2, cr1, {2}
    395c:	144c0000 	strbne	r0, [ip], #-0
    3960:	00001ac3 	andeq	r1, r0, r3, asr #21
    3964:	8902540e 	stmdbhi	r2, {r1, r2, r3, sl, ip, lr}
    3968:	50000000 	andpl	r0, r0, r0
    396c:	001c0614 	andseq	r0, ip, r4, lsl r6
    3970:	02550e00 	subseq	r0, r5, #0, 28
    3974:	00000765 	andeq	r0, r0, r5, ror #14
    3978:	1d0f1454 	cfstrsne	mvf1, [pc, #-336]	; 3830 <startup-0x1fffc7d0>
    397c:	780e0000 	stmdavc	lr, {}	; <UNPREDICTABLE>
    3980:	000e5402 	andeq	r5, lr, r2, lsl #8
    3984:	4b245800 	blmi	91998c <startup-0x1f6e6674>
    3988:	0e00001d 	mcreq	0, 0, r0, cr0, cr13, {0}
    398c:	08f2027c 	ldmeq	r2!, {r2, r3, r4, r5, r6, r9}^
    3990:	01480000 	mrseq	r0, (UNDEF: 72)
    3994:	001c5f24 	andseq	r5, ip, r4, lsr #30
    3998:	027d0e00 	rsbseq	r0, sp, #0, 28
    399c:	000008b4 			; <UNDEFINED> instruction: 0x000008b4
    39a0:	fc24014c 	stc2	1, cr0, [r4], #-304	; 0xfffffed0
    39a4:	0e00001b 	mcreq	0, 0, r0, cr0, cr11, {0}
    39a8:	0eb30281 	cdpeq	2, 11, cr0, cr3, cr1, {4}
    39ac:	02dc0000 	sbcseq	r0, ip, #0
    39b0:	001c8c24 	andseq	r8, ip, r4, lsr #24
    39b4:	02860e00 	addeq	r0, r6, #0, 28
    39b8:	00000c59 	andeq	r0, r0, r9, asr ip
    39bc:	562402e0 	strtpl	r0, [r4], -r0, ror #5
    39c0:	0e00001a 	mcreq	0, 0, r0, cr0, cr10, {0}
    39c4:	0ebf0288 	cdpeq	2, 11, cr0, cr15, cr8, {4}
    39c8:	02ec0000 	rsceq	r0, ip, #0
    39cc:	64041700 	strvs	r1, [r4], #-1792	; 0xfffff900
    39d0:	2100000a 	tstcs	r0, sl
    39d4:	00000089 	andeq	r0, r0, r9, lsl #1
    39d8:	00000be3 	andeq	r0, r0, r3, ror #23
    39dc:	000a8222 	andeq	r8, sl, r2, lsr #4
    39e0:	07632200 	strbeq	r2, [r3, -r0, lsl #4]!
    39e4:	e3220000 			; <UNDEFINED> instruction: 0xe3220000
    39e8:	2200000b 	andcs	r0, r0, #11
    39ec:	00000089 	andeq	r0, r0, r9, lsl #1
    39f0:	72041700 	andvc	r1, r4, #0, 14
    39f4:	17000007 	strne	r0, [r0, -r7]
    39f8:	000bc504 	andeq	ip, fp, r4, lsl #10
    39fc:	06e62100 	strbteq	r2, [r6], r0, lsl #2
    3a00:	0c0d0000 	stceq	0, cr0, [sp], {-0}
    3a04:	82220000 	eorhi	r0, r2, #0
    3a08:	2200000a 	andcs	r0, r0, #10
    3a0c:	00000763 	andeq	r0, r0, r3, ror #14
    3a10:	0006e622 	andeq	lr, r6, r2, lsr #12
    3a14:	00892200 	addeq	r2, r9, r0, lsl #4
    3a18:	17000000 	strne	r0, [r0, -r0]
    3a1c:	000bef04 	andeq	lr, fp, r4, lsl #30
    3a20:	00892100 	addeq	r2, r9, r0, lsl #2
    3a24:	0c270000 	stceq	0, cr0, [r7], #-0
    3a28:	82220000 	eorhi	r0, r2, #0
    3a2c:	2200000a 	andcs	r0, r0, #10
    3a30:	00000763 	andeq	r0, r0, r3, ror #14
    3a34:	13041700 	movwne	r1, #18176	; 0x4700
    3a38:	0900000c 	stmdbeq	r0, {r2, r3}
    3a3c:	00000037 	andeq	r0, r0, r7, lsr r0
    3a40:	00000c3d 	andeq	r0, r0, sp, lsr ip
    3a44:	0000900a 	andeq	r9, r0, sl
    3a48:	09000200 	stmdbeq	r0, {r9}
    3a4c:	00000037 	andeq	r0, r0, r7, lsr r0
    3a50:	00000c4d 	andeq	r0, r0, sp, asr #24
    3a54:	0000900a 	andeq	r9, r0, sl
    3a58:	12000000 	andne	r0, r0, #0
    3a5c:	00001e1a 	andeq	r1, r0, sl, lsl lr
    3a60:	3a011f0e 	bcc	4b6a0 <startup-0x1ffb4960>
    3a64:	25000009 	strcs	r0, [r0, #-9]
    3a68:	00001cce 	andeq	r1, r0, lr, asr #25
    3a6c:	01230e0c 			; <UNDEFINED> instruction: 0x01230e0c
    3a70:	00000c8e 	andeq	r0, r0, lr, lsl #25
    3a74:	001d3e14 	andseq	r3, sp, r4, lsl lr
    3a78:	01250e00 			; <UNDEFINED> instruction: 0x01250e00
    3a7c:	00000c8e 	andeq	r0, r0, lr, lsl #25
    3a80:	1c731400 	cfldrdne	mvd1, [r3], #-0
    3a84:	260e0000 	strcs	r0, [lr], -r0
    3a88:	00008901 	andeq	r8, r0, r1, lsl #18
    3a8c:	c8140400 	ldmdagt	r4, {sl}
    3a90:	0e00001c 	mcreq	0, 0, r0, cr0, cr12, {0}
    3a94:	0c940127 	ldfeqs	f0, [r4], {39}	; 0x27
    3a98:	00080000 	andeq	r0, r8, r0
    3a9c:	0c590417 	cfldrdeq	mvd0, [r9], {23}
    3aa0:	04170000 	ldreq	r0, [r7], #-0
    3aa4:	00000c4d 	andeq	r0, r0, sp, asr #24
    3aa8:	001dc325 	andseq	ip, sp, r5, lsr #6
    3aac:	3f0e0e00 	svccc	0x000e0e00
    3ab0:	000ccf01 	andeq	ip, ip, r1, lsl #30
    3ab4:	1d8e1400 	cfstrsne	mvf1, [lr]
    3ab8:	400e0000 	andmi	r0, lr, r0
    3abc:	000ccf01 	andeq	ip, ip, r1, lsl #30
    3ac0:	02140000 	andseq	r0, r4, #0
    3ac4:	0e00001b 	mcreq	0, 0, r0, cr0, cr11, {0}
    3ac8:	0ccf0141 	stfeqe	f0, [pc], {65}	; 0x41
    3acc:	14060000 	strne	r0, [r6], #-0
    3ad0:	00001ec1 	andeq	r1, r0, r1, asr #29
    3ad4:	5001420e 	andpl	r4, r1, lr, lsl #4
    3ad8:	0c000000 	stceq	0, cr0, [r0], {-0}
    3adc:	00500900 	subseq	r0, r0, r0, lsl #18
    3ae0:	0cdf0000 	ldcleq	0, cr0, [pc], {0}
    3ae4:	900a0000 	andls	r0, sl, r0
    3ae8:	02000000 	andeq	r0, r0, #0
    3aec:	0ed01300 	cdpeq	3, 13, cr1, cr0, cr0, {0}
    3af0:	0de00259 	sfmeq	f0, 2, [r0, #356]!	; 0x164
    3af4:	7f140000 	svcvc	0x00140000
    3af8:	0e00001b 	mcreq	0, 0, r0, cr0, cr11, {0}
    3afc:	0090025b 	addseq	r0, r0, fp, asr r2
    3b00:	14000000 	strne	r0, [r0], #-0
    3b04:	00001df5 	strdeq	r1, [r0], -r5
    3b08:	65025c0e 	strvs	r5, [r2, #-3086]	; 0xfffff3f2
    3b0c:	04000007 	streq	r0, [r0], #-7
    3b10:	001ab614 	andseq	fp, sl, r4, lsl r6
    3b14:	025d0e00 	subseq	r0, sp, #0, 28
    3b18:	00000de0 	andeq	r0, r0, r0, ror #27
    3b1c:	1b531408 	blne	14c8b44 <startup-0x1eb374bc>
    3b20:	5e0e0000 	cdppl	0, 0, cr0, cr14, cr0, {0}
    3b24:	0007eb02 	andeq	lr, r7, r2, lsl #22
    3b28:	a4142400 	ldrge	r2, [r4], #-1024	; 0xfffffc00
    3b2c:	0e00001c 	mcreq	0, 0, r0, cr0, cr12, {0}
    3b30:	0089025f 	addeq	r0, r9, pc, asr r2
    3b34:	14480000 	strbne	r0, [r8], #-0
    3b38:	00001d39 	andeq	r1, r0, r9, lsr sp
    3b3c:	8202600e 	andhi	r6, r2, #14
    3b40:	50000000 	andpl	r0, r0, r0
    3b44:	001e2c14 	andseq	r2, lr, r4, lsl ip
    3b48:	02610e00 	rsbeq	r0, r1, #0, 28
    3b4c:	00000c9a 	muleq	r0, sl, ip
    3b50:	1e3e1458 	mrcne	4, 1, r1, cr14, cr8, {2}
    3b54:	620e0000 	andvs	r0, lr, #0
    3b58:	00074d02 	andeq	r4, r7, r2, lsl #26
    3b5c:	a9146800 	ldmdbge	r4, {fp, sp, lr}
    3b60:	0e00001d 	mcreq	0, 0, r0, cr0, cr13, {0}
    3b64:	074d0263 	strbeq	r0, [sp, -r3, ror #4]
    3b68:	14700000 	ldrbtne	r0, [r0], #-0
    3b6c:	00001d22 	andeq	r1, r0, r2, lsr #26
    3b70:	4d02640e 	cfstrsmi	mvf6, [r2, #-56]	; 0xffffffc8
    3b74:	78000007 	stmdavc	r0, {r0, r1, r2}
    3b78:	001af814 	andseq	pc, sl, r4, lsl r8	; <UNPREDICTABLE>
    3b7c:	02650e00 	rsbeq	r0, r5, #0, 28
    3b80:	00000df0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    3b84:	1c431480 	cfstrdne	mvd1, [r3], {128}	; 0x80
    3b88:	660e0000 	strvs	r0, [lr], -r0
    3b8c:	000e0002 	andeq	r0, lr, r2
    3b90:	18148800 	ldmdane	r4, {fp, pc}
    3b94:	0e00001f 	mcreq	0, 0, r0, cr0, cr15, {0}
    3b98:	00890267 	addeq	r0, r9, r7, ror #4
    3b9c:	14a00000 	strtne	r0, [r0], #0
    3ba0:	00001b35 	andeq	r1, r0, r5, lsr fp
    3ba4:	4d02680e 	stcmi	8, cr6, [r2, #-56]	; 0xffffffc8
    3ba8:	a4000007 	strge	r0, [r0], #-7
    3bac:	001e0214 	andseq	r0, lr, r4, lsl r2
    3bb0:	02690e00 	rsbeq	r0, r9, #0, 28
    3bb4:	0000074d 	andeq	r0, r0, sp, asr #14
    3bb8:	1eda14ac 	cdpne	4, 13, cr1, cr10, cr12, {5}
    3bbc:	6a0e0000 	bvs	383bc4 <startup-0x1fc7c43c>
    3bc0:	00074d02 	andeq	r4, r7, r2, lsl #26
    3bc4:	f614b400 			; <UNDEFINED> instruction: 0xf614b400
    3bc8:	0e00001c 	mcreq	0, 0, r0, cr0, cr12, {0}
    3bcc:	074d026b 	strbeq	r0, [sp, -fp, ror #4]
    3bd0:	14bc0000 	ldrtne	r0, [ip], #0
    3bd4:	00001ad8 	ldrdeq	r1, [r0], -r8
    3bd8:	4d026c0e 	stcmi	12, cr6, [r2, #-56]	; 0xffffffc8
    3bdc:	c4000007 	strgt	r0, [r0], #-7
    3be0:	001ced14 	andseq	lr, ip, r4, lsl sp
    3be4:	026d0e00 	rsbeq	r0, sp, #0, 28
    3be8:	00000089 	andeq	r0, r0, r9, lsl #1
    3bec:	6b0900cc 	blvs	243f24 <startup-0x1fdbc0dc>
    3bf0:	f0000007 			; <UNDEFINED> instruction: 0xf0000007
    3bf4:	0a00000d 	beq	3c30 <startup-0x1fffc3d0>
    3bf8:	00000090 	muleq	r0, r0, r0
    3bfc:	6b090019 	blvs	243c68 <startup-0x1fdbc398>
    3c00:	00000007 	andeq	r0, r0, r7
    3c04:	0a00000e 	beq	3c44 <startup-0x1fffc3bc>
    3c08:	00000090 	muleq	r0, r0, r0
    3c0c:	6b090007 	blvs	243c30 <startup-0x1fdbc3d0>
    3c10:	10000007 	andne	r0, r0, r7
    3c14:	0a00000e 	beq	3c54 <startup-0x1fffc3ac>
    3c18:	00000090 	muleq	r0, r0, r0
    3c1c:	f0130017 			; <UNDEFINED> instruction: 0xf0130017
    3c20:	3402720e 	strcc	r7, [r2], #-526	; 0xfffffdf2
    3c24:	1400000e 	strne	r0, [r0], #-14
    3c28:	00001e9b 	muleq	r0, fp, lr
    3c2c:	3402750e 	strcc	r7, [r2], #-1294	; 0xfffffaf2
    3c30:	0000000e 	andeq	r0, r0, lr
    3c34:	001c9414 	andseq	r9, ip, r4, lsl r4
    3c38:	02760e00 	rsbseq	r0, r6, #0, 28
    3c3c:	00000e44 	andeq	r0, r0, r4, asr #28
    3c40:	34090078 	strcc	r0, [r9], #-120	; 0xffffff88
    3c44:	44000009 	strmi	r0, [r0], #-9
    3c48:	0a00000e 	beq	3c88 <startup-0x1fffc378>
    3c4c:	00000090 	muleq	r0, r0, r0
    3c50:	9009001d 	andls	r0, r9, sp, lsl r0
    3c54:	54000000 	strpl	r0, [r0], #-0
    3c58:	0a00000e 	beq	3c98 <startup-0x1fffc368>
    3c5c:	00000090 	muleq	r0, r0, r0
    3c60:	f026001d 			; <UNDEFINED> instruction: 0xf026001d
    3c64:	7602570e 	strvc	r5, [r2], -lr, lsl #14
    3c68:	2700000e 	strcs	r0, [r0, -lr]
    3c6c:	00001bb3 			; <UNDEFINED> instruction: 0x00001bb3
    3c70:	df026e0e 	svcle	0x00026e0e
    3c74:	2700000c 	strcs	r0, [r0, -ip]
    3c78:	00001acb 	andeq	r1, r0, fp, asr #21
    3c7c:	1002770e 	andne	r7, r2, lr, lsl #14
    3c80:	0000000e 	andeq	r0, r0, lr
    3c84:	00076b09 	andeq	r6, r7, r9, lsl #22
    3c88:	000e8600 	andeq	r8, lr, r0, lsl #12
    3c8c:	00900a00 	addseq	r0, r0, r0, lsl #20
    3c90:	00180000 	andseq	r0, r8, r0
    3c94:	001a4318 	andseq	r4, sl, r8, lsl r3
    3c98:	86041700 	strhi	r1, [r4], -r0, lsl #14
    3c9c:	2800000e 	stmdacs	r0, {r1, r2, r3}
    3ca0:	00000e9c 	muleq	r0, ip, lr
    3ca4:	000a8222 	andeq	r8, sl, r2, lsr #4
    3ca8:	04170000 	ldreq	r0, [r7], #-0
    3cac:	00000e91 	muleq	r0, r1, lr
    3cb0:	07d50417 	bfieq	r0, r7, #8, #14
    3cb4:	b3280000 			; <UNDEFINED> instruction: 0xb3280000
    3cb8:	2200000e 	andcs	r0, r0, #14
    3cbc:	00000089 	andeq	r0, r0, r9, lsl #1
    3cc0:	b9041700 	stmdblt	r4, {r8, r9, sl, ip}
    3cc4:	1700000e 	strne	r0, [r0, -lr]
    3cc8:	000ea804 	andeq	sl, lr, r4, lsl #16
    3ccc:	0c4d0900 	mcrreq	9, 0, r0, sp, cr0	; <UNPREDICTABLE>
    3cd0:	0ecf0000 	cdpeq	0, 12, cr0, cr15, cr0, {0}
    3cd4:	900a0000 	andls	r0, sl, r0
    3cd8:	02000000 	andeq	r0, r0, #0
    3cdc:	1bc10e00 	blne	ff0474e4 <APBAHBPrescTable+0xdf044d18>
    3ce0:	070e0000 	streq	r0, [lr, -r0]
    3ce4:	000a8203 	andeq	r8, sl, r3, lsl #4
    3ce8:	1bba0e00 	blne	fee874f0 <APBAHBPrescTable+0xdee84d24>
    3cec:	080e0000 	stmdaeq	lr, {}	; <UNPREDICTABLE>
    3cf0:	000a8803 	andeq	r8, sl, r3, lsl #16
    3cf4:	04040200 	streq	r0, [r4], #-512	; 0xfffffe00
    3cf8:	00001cda 	ldrdeq	r1, [r0], -sl
    3cfc:	9d040802 	stcls	8, cr0, [r4, #-8]
    3d00:	2900001c 	stmdbcs	r0, {r2, r3, r4}
    3d04:	00001a3a 	andeq	r1, r0, sl, lsr sl
    3d08:	0f060e01 	svceq	0x00060e01
    3d0c:	03050000 	movweq	r0, #20480	; 0x5000
    3d10:	200026f4 	strdcs	r2, [r0], -r4
    3d14:	011a0417 	tsteq	sl, r7, lsl r4
    3d18:	0e290000 	cdpeq	0, 2, cr0, cr9, cr0, {0}
    3d1c:	0100001c 	tsteq	r0, ip, lsl r0
    3d20:	000f060e 	andeq	r0, pc, lr, lsl #12
    3d24:	f8030500 			; <UNDEFINED> instruction: 0xf8030500
    3d28:	29200026 	stmdbcs	r0!, {r1, r2, r5}
    3d2c:	00001e4b 	andeq	r1, r0, fp, asr #28
    3d30:	011a0e01 	tsteq	sl, r1, lsl #28
    3d34:	03050000 	movweq	r0, #20480	; 0x5000
    3d38:	200026fc 	strdcs	r2, [r0], -ip
    3d3c:	001ce029 	andseq	lr, ip, r9, lsr #32
    3d40:	1a0e0100 	bne	384148 <startup-0x1fc7beb8>
    3d44:	05000001 	streq	r0, [r0, #-1]
    3d48:	00276403 	eoreq	r6, r7, r3, lsl #8
    3d4c:	1d6d2a20 	vpushne	{s5-s36}
    3d50:	b4010000 	strlt	r0, [r1], #-0
    3d54:	00000097 	muleq	r0, r7, r0
    3d58:	200025b2 			; <UNDEFINED> instruction: 0x200025b2
    3d5c:	00000026 	andeq	r0, r0, r6, lsr #32
    3d60:	0f679c01 	svceq	0x00679c01
    3d64:	a42b0000 	strtge	r0, [fp], #-0
    3d68:	01000015 	tsteq	r0, r5, lsl r0
    3d6c:	000f67b4 			; <UNDEFINED> instruction: 0x000f67b4
    3d70:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    3d74:	97041700 	strls	r1, [r4, -r0, lsl #14]
    3d78:	2a000000 	bcs	3d80 <startup-0x1fffc280>
    3d7c:	00001b8c 	andeq	r1, r0, ip, lsl #23
    3d80:	0097ad01 	addseq	sl, r7, r1, lsl #26
    3d84:	25960000 	ldrcs	r0, [r6]
    3d88:	001c2000 	andseq	r2, ip, r0
    3d8c:	9c010000 	stcls	0, cr0, [r1], {-0}
    3d90:	00000f95 	muleq	r0, r5, pc	; <UNPREDICTABLE>
    3d94:	6d756e2c 	ldclvs	14, cr6, [r5, #-176]!	; 0xffffff50
    3d98:	c2ad0100 	adcgt	r0, sp, #0, 2
    3d9c:	02000000 	andeq	r0, r0, #0
    3da0:	2a007491 	bcs	20fec <startup-0x1ffdf014>
    3da4:	00001d5b 	andeq	r1, r0, fp, asr sp
    3da8:	00979101 	addseq	r9, r7, r1, lsl #2
    3dac:	24d20000 	ldrbcs	r0, [r2], #0
    3db0:	00c42000 	sbceq	r2, r4, r0
    3db4:	9c010000 	stcls	0, cr0, [r1], {-0}
    3db8:	00000fff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    3dbc:	6d756e2c 	ldclvs	14, cr6, [r5, #-176]!	; 0xffffff50
    3dc0:	c2910100 	addsgt	r0, r1, #0, 2
    3dc4:	02000000 	andeq	r0, r0, #0
    3dc8:	f02b4c91 			; <UNDEFINED> instruction: 0xf02b4c91
    3dcc:	0100001d 	tsteq	r0, sp, lsl r0
    3dd0:	00009791 	muleq	r0, r1, r7
    3dd4:	4b910200 	blmi	fe4445dc <APBAHBPrescTable+0xde441e10>
    3dd8:	001e6129 	andseq	r6, lr, r9, lsr #2
    3ddc:	97970100 	ldrls	r0, [r7, r0, lsl #2]
    3de0:	02000000 	andeq	r0, r0, #0
    3de4:	d9297791 	stmdble	r9!, {r0, r4, r7, r8, r9, sl, ip, sp, lr}
    3de8:	0100001b 	tsteq	r0, fp, lsl r0
    3dec:	000fff97 	muleq	pc, r7, pc	; <UNPREDICTABLE>
    3df0:	54910200 	ldrpl	r0, [r1], #512	; 0x200
    3df4:	0024fc2d 	eoreq	pc, r4, sp, lsr #24
    3df8:	00005a20 	andeq	r5, r0, r0, lsr #20
    3dfc:	1bf62900 	blne	ffd8e204 <APBAHBPrescTable+0xdfd8ba38>
    3e00:	9b010000 	blls	43e08 <startup-0x1ffbc1f8>
    3e04:	00000097 	muleq	r0, r7, r0
    3e08:	00769102 	rsbseq	r9, r6, r2, lsl #2
    3e0c:	00970900 	addseq	r0, r7, r0, lsl #18
    3e10:	100f0000 	andne	r0, pc, r0
    3e14:	900a0000 	andls	r0, sl, r0
    3e18:	1f000000 	svcne	0x00000000
    3e1c:	1cb32a00 	vldmiane	r3!, {s4-s3}
    3e20:	81010000 	mrshi	r0, (UNDEF: 1)
    3e24:	00000097 	muleq	r0, r7, r0
    3e28:	200024a0 	andcs	r2, r0, r0, lsr #9
    3e2c:	00000032 	andeq	r0, r0, r2, lsr r0
    3e30:	10379c01 	eorsne	r9, r7, r1, lsl #24
    3e34:	c32b0000 			; <UNDEFINED> instruction: 0xc32b0000
    3e38:	0100001c 	tsteq	r0, ip, lsl r0
    3e3c:	000f6781 	andeq	r6, pc, r1, lsl #15
    3e40:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    3e44:	1f062a00 	svcne	0x00062a00
    3e48:	74010000 	strvc	r0, [r1], #-0
    3e4c:	00000097 	muleq	r0, r7, r0
    3e50:	20002458 	andcs	r2, r0, r8, asr r4
    3e54:	00000048 	andeq	r0, r0, r8, asr #32
    3e58:	105f9c01 	subsne	r9, pc, r1, lsl #24
    3e5c:	ae2b0000 	cdpge	0, 2, cr0, cr11, cr0, {0}
    3e60:	01000015 	tsteq	r0, r5, lsl r0
    3e64:	00009774 	andeq	r9, r0, r4, ror r7
    3e68:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    3e6c:	1c372e00 	ldcne	14, cr2, [r7], #-0
    3e70:	2d010000 	stccs	0, cr0, [r1, #-0]
    3e74:	20002330 	andcs	r2, r0, r0, lsr r3
    3e78:	00000128 	andeq	r0, r0, r8, lsr #2
    3e7c:	109f9c01 	addsne	r9, pc, r1, lsl #24
    3e80:	dc290000 	stcle	0, cr0, [r9], #-0
    3e84:	0100001d 	tsteq	r0, sp, lsl r0
    3e88:	0006ba3f 	andeq	fp, r6, pc, lsr sl
    3e8c:	68910200 	ldmvs	r1, {r9}
    3e90:	001b6b29 	andseq	r6, fp, r9, lsr #22
    3e94:	b84c0100 	stmdalt	ip, {r8}^
    3e98:	02000005 	andeq	r0, r0, #5
    3e9c:	08295891 	stmdaeq	r9!, {r0, r4, r7, fp, ip, lr}
    3ea0:	0100001b 	tsteq	r0, fp, lsl r0
    3ea4:	00055c5e 	andeq	r5, r5, lr, asr ip
    3ea8:	54910200 	ldrpl	r0, [r1], #512	; 0x200
    3eac:	1c7a2f00 	ldclne	15, cr2, [sl], #-0
    3eb0:	13010000 	movwne	r0, #4096	; 0x1000
    3eb4:	20002298 	mulcs	r0, r8, r2
    3eb8:	00000098 	muleq	r0, r8, r0
    3ebc:	18309c01 	ldmdane	r0!, {r0, sl, fp, ip, pc}
    3ec0:	29000000 	stmdbcs	r0, {}	; <UNPREDICTABLE>
    3ec4:	00001e39 	andeq	r1, r0, r9, lsr lr
    3ec8:	00971f01 	addseq	r1, r7, r1, lsl #30
    3ecc:	91020000 	mrsls	r0, (UNDEF: 2)
    3ed0:	1d87296e 	vstrne.16	s4, [r7, #220]	; 0xdc	; <UNPREDICTABLE>
    3ed4:	20010000 	andcs	r0, r1, r0
    3ed8:	00000097 	muleq	r0, r7, r0
    3edc:	006f9102 	rsbeq	r9, pc, r2, lsl #2
	...

Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
   0:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
   4:	030b130e 	movweq	r1, #45838	; 0xb30e
   8:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xfffff4f2
   c:	10011117 	andne	r1, r1, r7, lsl r1
  10:	02000017 	andeq	r0, r0, #23
  14:	0e030104 	adfeqs	f0, f3, f4
  18:	0b0b0b3e 	bleq	2c2d18 <startup-0x1fd3d2e8>
  1c:	0b3a1349 	bleq	e84d48 <startup-0x1f17b2b8>
  20:	13010b3b 	movwne	r0, #6971	; 0x1b3b
  24:	28030000 	stmdacs	r3, {}	; <UNPREDICTABLE>
  28:	1c0e0300 	stcne	3, cr0, [lr], {-0}
  2c:	0400000d 	streq	r0, [r0], #-13
  30:	0e030028 	cdpeq	0, 0, cr0, cr3, cr8, {1}
  34:	00000b1c 	andeq	r0, r0, ip, lsl fp
  38:	0b002405 	bleq	9054 <startup-0x1fff6fac>
  3c:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
  40:	0600000e 	streq	r0, [r0], -lr
  44:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
  48:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
  4c:	00001349 	andeq	r1, r0, r9, asr #6
  50:	03001607 	movweq	r1, #1543	; 0x607
  54:	3b0b3a0e 	blcc	2ce894 <startup-0x1fd3176c>
  58:	0013490b 	andseq	r4, r3, fp, lsl #18
  5c:	00240800 	eoreq	r0, r4, r0, lsl #16
  60:	0b3e0b0b 	bleq	f82c94 <startup-0x1f07d36c>
  64:	00000803 	andeq	r0, r0, r3, lsl #16
  68:	49003509 	stmdbmi	r0, {r0, r3, r8, sl, ip, sp}
  6c:	0a000013 	beq	c0 <startup-0x1fffff40>
  70:	13490026 	movtne	r0, #36902	; 0x9026
  74:	130b0000 	movwne	r0, #45056	; 0xb000
  78:	3a050b01 	bcc	142c84 <startup-0x1febd37c>
  7c:	01053b0b 	tsteq	r5, fp, lsl #22
  80:	0c000013 	stceq	0, cr0, [r0], {19}
  84:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
  88:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
  8c:	0b381349 	bleq	e04db8 <startup-0x1f1fb248>
  90:	0d0d0000 	stceq	0, cr0, [sp, #-0]
  94:	3a0e0300 	bcc	380c9c <startup-0x1fc7f364>
  98:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
  9c:	00053813 	andeq	r3, r5, r3, lsl r8
  a0:	000d0e00 	andeq	r0, sp, r0, lsl #28
  a4:	0b3a0803 	bleq	e820b8 <startup-0x1f17df48>
  a8:	1349053b 	movtne	r0, #38203	; 0x953b
  ac:	00000538 	andeq	r0, r0, r8, lsr r5
  b0:	4901010f 	stmdbmi	r1, {r0, r1, r2, r3, r8}
  b4:	00130113 	andseq	r0, r3, r3, lsl r1
  b8:	00211000 	eoreq	r1, r1, r0
  bc:	0b2f1349 	bleq	bc4de8 <startup-0x1f43b218>
  c0:	21110000 	tstcs	r1, r0
  c4:	2f134900 	svccs	0x00134900
  c8:	12000005 	andne	r0, r0, #5
  cc:	0b0b0113 	bleq	2c0520 <startup-0x1fd3fae0>
  d0:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
  d4:	00001301 	andeq	r1, r0, r1, lsl #6
  d8:	03000d13 	movweq	r0, #3347	; 0xd13
  dc:	3b0b3a08 	blcc	2ce904 <startup-0x1fd316fc>
  e0:	38134905 	ldmdacc	r3, {r0, r2, r8, fp, lr}
  e4:	1400000b 	strne	r0, [r0], #-11
  e8:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
  ec:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
  f0:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
  f4:	0000193c 	andeq	r1, r0, ip, lsr r9
  f8:	03003415 	movweq	r3, #1045	; 0x415
  fc:	3b0b3a0e 	blcc	2ce93c <startup-0x1fd316c4>
 100:	3f13490b 	svccc	0x0013490b
 104:	00193c19 	andseq	r3, r9, r9, lsl ip
 108:	01041600 	tsteq	r4, r0, lsl #12
 10c:	0b0b0b3e 	bleq	2c2e0c <startup-0x1fd3d1f4>
 110:	0b3a1349 	bleq	e84e3c <startup-0x1f17b1c4>
 114:	1301053b 	movwne	r0, #5435	; 0x153b
 118:	28170000 	ldmdacs	r7, {}	; <UNPREDICTABLE>
 11c:	1c080300 	stcne	3, cr0, [r8], {-0}
 120:	1800000b 	stmdane	r0, {r0, r1, r3}
 124:	0b0b0113 	bleq	2c0578 <startup-0x1fd3fa88>
 128:	0b3b0b3a 	bleq	ec2e18 <startup-0x1f13d1e8>
 12c:	00001301 	andeq	r1, r0, r1, lsl #6
 130:	03000d19 	movweq	r0, #3353	; 0xd19
 134:	3b0b3a0e 	blcc	2ce974 <startup-0x1fd3168c>
 138:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
 13c:	1a00000b 	bne	170 <startup-0x1ffffe90>
 140:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 144:	0b3b0b3a 	bleq	ec2e34 <startup-0x1f13d1cc>
 148:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 14c:	041b0000 	ldreq	r0, [fp], #-0
 150:	0b0b3e01 	bleq	2cf95c <startup-0x1fd306a4>
 154:	3a13490b 	bcc	4d2588 <startup-0x1fb2da78>
 158:	010b3b0b 	tsteq	fp, fp, lsl #22
 15c:	1c000013 	stcne	0, cr0, [r0], {19}
 160:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
 164:	0b3a0b0b 	bleq	e82d98 <startup-0x1f17d268>
 168:	13010b3b 	movwne	r0, #6971	; 0x1b3b
 16c:	0d1d0000 	ldceq	0, cr0, [sp, #-0]
 170:	3a080300 	bcc	200d78 <startup-0x1fdff288>
 174:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 178:	000b3813 	andeq	r3, fp, r3, lsl r8
 17c:	00341e00 	eorseq	r1, r4, r0, lsl #28
 180:	0b3a0e03 	bleq	e83994 <startup-0x1f17c66c>
 184:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 188:	1802193f 	stmdane	r2, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
 18c:	2e1f0000 	cdpcs	0, 1, cr0, cr15, cr0, {0}
 190:	03193f01 	tsteq	r9, #1, 30
 194:	3b0b3a0e 	blcc	2ce9d4 <startup-0x1fd3162c>
 198:	1119270b 	tstne	r9, fp, lsl #14
 19c:	40061201 	andmi	r1, r6, r1, lsl #4
 1a0:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 1a4:	00001301 	andeq	r1, r0, r1, lsl #6
 1a8:	11010b20 	tstne	r1, r0, lsr #22
 1ac:	00061201 	andeq	r1, r6, r1, lsl #4
 1b0:	00342100 	eorseq	r2, r4, r0, lsl #2
 1b4:	0b3a0803 	bleq	e821c8 <startup-0x1f17de38>
 1b8:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 1bc:	00001802 	andeq	r1, r0, r2, lsl #16
 1c0:	3f002e22 	svccc	0x00002e22
 1c4:	3a0e0319 	bcc	380e30 <startup-0x1fc7f1d0>
 1c8:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 1cc:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 1d0:	97184006 	ldrls	r4, [r8, -r6]
 1d4:	00001942 	andeq	r1, r0, r2, asr #18
 1d8:	3f012e23 	svccc	0x00012e23
 1dc:	3a0e0319 	bcc	380e48 <startup-0x1fc7f1b8>
 1e0:	110b3b0b 	tstne	fp, fp, lsl #22
 1e4:	40061201 	andmi	r1, r6, r1, lsl #4
 1e8:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 1ec:	00001301 	andeq	r1, r0, r1, lsl #6
 1f0:	3f012e24 	svccc	0x00012e24
 1f4:	3a0e0319 	bcc	380e60 <startup-0x1fc7f1a0>
 1f8:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
 1fc:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 200:	97184006 	ldrls	r4, [r8, -r6]
 204:	13011942 	movwne	r1, #6466	; 0x1942
 208:	05250000 	streq	r0, [r5, #-0]!
 20c:	3a0e0300 	bcc	380e14 <startup-0x1fc7f1ec>
 210:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 214:	00180213 	andseq	r0, r8, r3, lsl r2
 218:	012e2600 			; <UNDEFINED> instruction: 0x012e2600
 21c:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 220:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 224:	13491927 	movtne	r1, #39207	; 0x9927
 228:	06120111 			; <UNDEFINED> instruction: 0x06120111
 22c:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 230:	00130119 	andseq	r0, r3, r9, lsl r1
 234:	00342700 	eorseq	r2, r4, r0, lsl #14
 238:	0b3a0e03 	bleq	e83a4c <startup-0x1f17c5b4>
 23c:	1349053b 	movtne	r0, #38203	; 0x953b
 240:	00001802 	andeq	r1, r0, r2, lsl #16
 244:	3f002e28 	svccc	0x00002e28
 248:	3a0e0319 	bcc	380eb4 <startup-0x1fc7f14c>
 24c:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
 250:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 254:	97184006 	ldrls	r4, [r8, -r6]
 258:	00001942 	andeq	r1, r0, r2, asr #18
 25c:	03003429 	movweq	r3, #1065	; 0x429
 260:	3b0b3a08 	blcc	2cea88 <startup-0x1fd31578>
 264:	02134905 	andseq	r4, r3, #81920	; 0x14000
 268:	2a000018 	bcs	2d0 <startup-0x1ffffd30>
 26c:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 270:	0b3a0e03 	bleq	e83a84 <startup-0x1f17c57c>
 274:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
 278:	06120111 			; <UNDEFINED> instruction: 0x06120111
 27c:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 280:	00130119 	andseq	r0, r3, r9, lsl r1
 284:	000f2b00 	andeq	r2, pc, r0, lsl #22
 288:	13490b0b 	movtne	r0, #39691	; 0x9b0b
 28c:	2e2c0000 	cdpcs	0, 2, cr0, cr12, cr0, {0}
 290:	03193f00 	tsteq	r9, #0, 30
 294:	3b0b3a0e 	blcc	2cead4 <startup-0x1fd3152c>
 298:	49192705 	ldmdbmi	r9, {r0, r2, r8, r9, sl, sp}
 29c:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
 2a0:	97184006 	ldrls	r4, [r8, -r6]
 2a4:	00001942 	andeq	r1, r0, r2, asr #18
 2a8:	3f012e2d 	svccc	0x00012e2d
 2ac:	3a0e0319 	bcc	380f18 <startup-0x1fc7f0e8>
 2b0:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
 2b4:	11134919 	tstne	r3, r9, lsl r9
 2b8:	40061201 	andmi	r1, r6, r1, lsl #4
 2bc:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 2c0:	00001301 	andeq	r1, r0, r1, lsl #6
 2c4:	03012e2e 	movweq	r2, #7726	; 0x1e2e
 2c8:	3b0b3a0e 	blcc	2ceb08 <startup-0x1fd314f8>
 2cc:	49192705 	ldmdbmi	r9, {r0, r2, r8, r9, sl, sp}
 2d0:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
 2d4:	96184006 	ldrls	r4, [r8], -r6
 2d8:	13011942 	movwne	r1, #6466	; 0x1942
 2dc:	2e2f0000 	cdpcs	0, 2, cr0, cr15, cr0, {0}
 2e0:	3a0e0301 	bcc	380eec <startup-0x1fc7f114>
 2e4:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
 2e8:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 2ec:	97184006 	ldrls	r4, [r8, -r6]
 2f0:	00001942 	andeq	r1, r0, r2, asr #18
 2f4:	01110100 	tsteq	r1, r0, lsl #2
 2f8:	0b130e25 	bleq	4c3b94 <startup-0x1fb3c46c>
 2fc:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
 300:	06120111 			; <UNDEFINED> instruction: 0x06120111
 304:	00001710 	andeq	r1, r0, r0, lsl r7
 308:	0b002402 	bleq	9318 <startup-0x1fff6ce8>
 30c:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
 310:	0300000e 	movweq	r0, #14
 314:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
 318:	0b3b0b3a 	bleq	ec3008 <startup-0x1f13cff8>
 31c:	00001349 	andeq	r1, r0, r9, asr #6
 320:	0b002404 	bleq	9338 <startup-0x1fff6cc8>
 324:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
 328:	05000008 	streq	r0, [r0, #-8]
 32c:	13490035 	movtne	r0, #36917	; 0x9035
 330:	34060000 	strcc	r0, [r6], #-0
 334:	3a0e0300 	bcc	380f3c <startup-0x1fc7f0c4>
 338:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 33c:	3c193f13 	ldccc	15, cr3, [r9], {19}
 340:	07000019 	smladeq	r0, r9, r0, r0
 344:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 348:	0b3b0b3a 	bleq	ec3038 <startup-0x1f13cfc8>
 34c:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
 350:	0000193c 	andeq	r1, r0, ip, lsr r9
 354:	3e010408 	cdpcc	4, 0, cr0, cr1, cr8, {0}
 358:	490b0b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp}
 35c:	3b0b3a13 	blcc	2cebb0 <startup-0x1fd31450>
 360:	00130105 	andseq	r0, r3, r5, lsl #2
 364:	00280900 	eoreq	r0, r8, r0, lsl #18
 368:	0b1c0e03 	bleq	703b7c <startup-0x1f8fc484>
 36c:	130a0000 	movwne	r0, #40960	; 0xa000
 370:	3a0b0b01 	bcc	2c2f7c <startup-0x1fd3d084>
 374:	01053b0b 	tsteq	r5, fp, lsl #22
 378:	0b000013 	bleq	3cc <startup-0x1ffffc34>
 37c:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
 380:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 384:	0b381349 	bleq	e050b0 <startup-0x1f1faf50>
 388:	0d0c0000 	stceq	0, cr0, [ip, #-0]
 38c:	3a080300 	bcc	200f94 <startup-0x1fdff06c>
 390:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 394:	000b3813 	andeq	r3, fp, r3, lsl r8
 398:	01010d00 	tsteq	r1, r0, lsl #26
 39c:	13011349 	movwne	r1, #4937	; 0x1349
 3a0:	210e0000 	mrscs	r0, (UNDEF: 14)
 3a4:	2f134900 	svccs	0x00134900
 3a8:	0f00000b 	svceq	0x0000000b
 3ac:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
 3b0:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 3b4:	00001349 	andeq	r1, r0, r9, asr #6
 3b8:	3e010410 	cfmvdlrcc	mvd1, r0
 3bc:	490b0b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp}
 3c0:	3b0b3a13 	blcc	2cec14 <startup-0x1fd313ec>
 3c4:	0013010b 	andseq	r0, r3, fp, lsl #2
 3c8:	01131100 	tsteq	r3, r0, lsl #2
 3cc:	0b3a0b0b 	bleq	e83000 <startup-0x1f17d000>
 3d0:	13010b3b 	movwne	r0, #6971	; 0x1b3b
 3d4:	0d120000 	ldceq	0, cr0, [r2, #-0]
 3d8:	3a0e0300 	bcc	380fe0 <startup-0x1fc7f020>
 3dc:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 3e0:	000b3813 	andeq	r3, fp, r3, lsl r8
 3e4:	012e1300 			; <UNDEFINED> instruction: 0x012e1300
 3e8:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 3ec:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 3f0:	01111927 	tsteq	r1, r7, lsr #18
 3f4:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 3f8:	01194297 			; <UNDEFINED> instruction: 0x01194297
 3fc:	14000013 	strne	r0, [r0], #-19	; 0xffffffed
 400:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
 404:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 408:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 40c:	34150000 	ldrcc	r0, [r5], #-0
 410:	3a0e0300 	bcc	381018 <startup-0x1fc7efe8>
 414:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 418:	00180213 	andseq	r0, r8, r3, lsl r2
 41c:	000f1600 	andeq	r1, pc, r0, lsl #12
 420:	13490b0b 	movtne	r0, #39691	; 0x9b0b
 424:	2e170000 	cdpcs	0, 1, cr0, cr7, cr0, {0}
 428:	03193f01 	tsteq	r9, #1, 30
 42c:	3b0b3a0e 	blcc	2cec6c <startup-0x1fd31394>
 430:	49192705 	ldmdbmi	r9, {r0, r2, r8, r9, sl, sp}
 434:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
 438:	97184006 	ldrls	r4, [r8, -r6]
 43c:	13011942 	movwne	r1, #6466	; 0x1942
 440:	34180000 	ldrcc	r0, [r8], #-0
 444:	3a080300 	bcc	20104c <startup-0x1fdfefb4>
 448:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 44c:	00180213 	andseq	r0, r8, r3, lsl r2
 450:	012e1900 			; <UNDEFINED> instruction: 0x012e1900
 454:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 458:	0b3b0b3a 	bleq	ec3148 <startup-0x1f13ceb8>
 45c:	01111927 	tsteq	r1, r7, lsr #18
 460:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 464:	01194297 			; <UNDEFINED> instruction: 0x01194297
 468:	1a000013 	bne	4bc <startup-0x1ffffb44>
 46c:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
 470:	0b3b0b3a 	bleq	ec3160 <startup-0x1f13cea0>
 474:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 478:	341b0000 	ldrcc	r0, [fp], #-0
 47c:	3a0e0300 	bcc	381084 <startup-0x1fc7ef7c>
 480:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 484:	00180213 	andseq	r0, r8, r3, lsl r2
 488:	00341c00 	eorseq	r1, r4, r0, lsl #24
 48c:	0b3a0803 	bleq	e824a0 <startup-0x1f17db60>
 490:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 494:	00001802 	andeq	r1, r0, r2, lsl #16
 498:	3f012e1d 	svccc	0x00012e1d
 49c:	3a0e0319 	bcc	381108 <startup-0x1fc7eef8>
 4a0:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 4a4:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 4a8:	96184006 	ldrls	r4, [r8], -r6
 4ac:	00001942 	andeq	r1, r0, r2, asr #18
 4b0:	01110100 	tsteq	r1, r0, lsl #2
 4b4:	0b130e25 	bleq	4c3d50 <startup-0x1fb3c2b0>
 4b8:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
 4bc:	06120111 			; <UNDEFINED> instruction: 0x06120111
 4c0:	00001710 	andeq	r1, r0, r0, lsl r7
 4c4:	0b002402 	bleq	94d4 <startup-0x1fff6b2c>
 4c8:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
 4cc:	0300000e 	movweq	r0, #14
 4d0:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
 4d4:	0b3b0b3a 	bleq	ec31c4 <startup-0x1f13ce3c>
 4d8:	00001349 	andeq	r1, r0, r9, asr #6
 4dc:	0b002404 	bleq	94f4 <startup-0x1fff6b0c>
 4e0:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
 4e4:	05000008 	streq	r0, [r0, #-8]
 4e8:	13490035 	movtne	r0, #36917	; 0x9035
 4ec:	26060000 	strcs	r0, [r6], -r0
 4f0:	00134900 	andseq	r4, r3, r0, lsl #18
 4f4:	01130700 	tsteq	r3, r0, lsl #14
 4f8:	0b3a050b 	bleq	e8192c <startup-0x1f17e6d4>
 4fc:	1301053b 	movwne	r0, #5435	; 0x153b
 500:	0d080000 	stceq	0, cr0, [r8, #-0]
 504:	3a0e0300 	bcc	38110c <startup-0x1fc7eef4>
 508:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 50c:	000b3813 	andeq	r3, fp, r3, lsl r8
 510:	000d0900 	andeq	r0, sp, r0, lsl #18
 514:	0b3a0e03 	bleq	e83d28 <startup-0x1f17c2d8>
 518:	1349053b 	movtne	r0, #38203	; 0x953b
 51c:	00000538 	andeq	r0, r0, r8, lsr r5
 520:	03000d0a 	movweq	r0, #3338	; 0xd0a
 524:	3b0b3a08 	blcc	2ced4c <startup-0x1fd312b4>
 528:	38134905 	ldmdacc	r3, {r0, r2, r8, fp, lr}
 52c:	0b000005 	bleq	548 <startup-0x1ffffab8>
 530:	13490101 	movtne	r0, #37121	; 0x9101
 534:	00001301 	andeq	r1, r0, r1, lsl #6
 538:	4900210c 	stmdbmi	r0, {r2, r3, r8, sp}
 53c:	000b2f13 	andeq	r2, fp, r3, lsl pc
 540:	00210d00 	eoreq	r0, r1, r0, lsl #26
 544:	052f1349 	streq	r1, [pc, #-841]!	; 203 <startup-0x1ffffdfd>
 548:	160e0000 	strne	r0, [lr], -r0
 54c:	3a0e0300 	bcc	381154 <startup-0x1fc7eeac>
 550:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 554:	0f000013 	svceq	0x00000013
 558:	0b0b0113 	bleq	2c09ac <startup-0x1fd3f654>
 55c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 560:	00001301 	andeq	r1, r0, r1, lsl #6
 564:	03000d10 	movweq	r0, #3344	; 0xd10
 568:	3b0b3a08 	blcc	2ced90 <startup-0x1fd31270>
 56c:	38134905 	ldmdacc	r3, {r0, r2, r8, fp, lr}
 570:	1100000b 	tstne	r0, fp
 574:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 578:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 57c:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
 580:	0000193c 	andeq	r1, r0, ip, lsr r9
 584:	03003412 	movweq	r3, #1042	; 0x412
 588:	3b0b3a0e 	blcc	2cedc8 <startup-0x1fd31238>
 58c:	3f13490b 	svccc	0x0013490b
 590:	00193c19 	andseq	r3, r9, r9, lsl ip
 594:	01041300 	mrseq	r1, LR_abt
 598:	0b0b0b3e 	bleq	2c3298 <startup-0x1fd3cd68>
 59c:	0b3a1349 	bleq	e852c8 <startup-0x1f17ad38>
 5a0:	1301053b 	movwne	r0, #5435	; 0x153b
 5a4:	28140000 	ldmdacs	r4, {}	; <UNPREDICTABLE>
 5a8:	1c0e0300 	stcne	3, cr0, [lr], {-0}
 5ac:	1500000b 	strne	r0, [r0, #-11]
 5b0:	0b0b0113 	bleq	2c0a04 <startup-0x1fd3f5fc>
 5b4:	0b3b0b3a 	bleq	ec32a4 <startup-0x1f13cd5c>
 5b8:	00001301 	andeq	r1, r0, r1, lsl #6
 5bc:	03000d16 	movweq	r0, #3350	; 0xd16
 5c0:	3b0b3a0e 	blcc	2cee00 <startup-0x1fd31200>
 5c4:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
 5c8:	1700000b 	strne	r0, [r0, -fp]
 5cc:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 5d0:	0b3a0e03 	bleq	e83de4 <startup-0x1f17c21c>
 5d4:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 5d8:	06120111 			; <UNDEFINED> instruction: 0x06120111
 5dc:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 5e0:	00130119 	andseq	r0, r3, r9, lsl r1
 5e4:	00051800 	andeq	r1, r5, r0, lsl #16
 5e8:	0b3a0e03 	bleq	e83dfc <startup-0x1f17c204>
 5ec:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 5f0:	00001802 	andeq	r1, r0, r2, lsl #16
 5f4:	03003419 	movweq	r3, #1049	; 0x419
 5f8:	3b0b3a0e 	blcc	2cee38 <startup-0x1fd311c8>
 5fc:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 600:	1a000018 	bne	668 <startup-0x1ffff998>
 604:	0b0b000f 	bleq	2c0648 <startup-0x1fd3f9b8>
 608:	00001349 	andeq	r1, r0, r9, asr #6
 60c:	3f012e1b 	svccc	0x00012e1b
 610:	3a0e0319 	bcc	38127c <startup-0x1fc7ed84>
 614:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 618:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 61c:	97184006 	ldrls	r4, [r8, -r6]
 620:	00001942 	andeq	r1, r0, r2, asr #18
 624:	01110100 	tsteq	r1, r0, lsl #2
 628:	0b130e25 	bleq	4c3ec4 <startup-0x1fb3c13c>
 62c:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
 630:	06120111 			; <UNDEFINED> instruction: 0x06120111
 634:	00001710 	andeq	r1, r0, r0, lsl r7
 638:	0b002402 	bleq	9648 <startup-0x1fff69b8>
 63c:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
 640:	0300000e 	movweq	r0, #14
 644:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
 648:	0b3b0b3a 	bleq	ec3338 <startup-0x1f13ccc8>
 64c:	00001349 	andeq	r1, r0, r9, asr #6
 650:	0b002404 	bleq	9668 <startup-0x1fff6998>
 654:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
 658:	05000008 	streq	r0, [r0, #-8]
 65c:	0b0b0113 	bleq	2c0ab0 <startup-0x1fd3f550>
 660:	0b3b0b3a 	bleq	ec3350 <startup-0x1f13ccb0>
 664:	00001301 	andeq	r1, r0, r1, lsl #6
 668:	03000d06 	movweq	r0, #3334	; 0xd06
 66c:	3b0b3a0e 	blcc	2ceeac <startup-0x1fd31154>
 670:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
 674:	0700000b 	streq	r0, [r0, -fp]
 678:	0803000d 	stmdaeq	r3, {r0, r2, r3}
 67c:	0b3b0b3a 	bleq	ec336c <startup-0x1f13cc94>
 680:	0b381349 	bleq	e053ac <startup-0x1f1fac54>
 684:	01080000 	mrseq	r0, (UNDEF: 8)
 688:	01134901 	tsteq	r3, r1, lsl #18
 68c:	09000013 	stmdbeq	r0, {r0, r1, r4}
 690:	13490021 	movtne	r0, #36897	; 0x9021
 694:	00000b2f 	andeq	r0, r0, pc, lsr #22
 698:	3f012e0a 	svccc	0x00012e0a
 69c:	3a0e0319 	bcc	381308 <startup-0x1fc7ecf8>
 6a0:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 6a4:	11134919 	tstne	r3, r9, lsl r9
 6a8:	40061201 	andmi	r1, r6, r1, lsl #4
 6ac:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 6b0:	00001301 	andeq	r1, r0, r1, lsl #6
 6b4:	0300050b 	movweq	r0, #1291	; 0x50b
 6b8:	3b0b3a0e 	blcc	2ceef8 <startup-0x1fd31108>
 6bc:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 6c0:	0c000018 	stceq	0, cr0, [r0], {24}
 6c4:	0b0b000f 	bleq	2c0708 <startup-0x1fd3f8f8>
 6c8:	00001349 	andeq	r1, r0, r9, asr #6
 6cc:	3f012e0d 	svccc	0x00012e0d
 6d0:	3a0e0319 	bcc	38133c <startup-0x1fc7ecc4>
 6d4:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 6d8:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 6dc:	97184006 	ldrls	r4, [r8, -r6]
 6e0:	00001942 	andeq	r1, r0, r2, asr #18
 6e4:	01110100 	tsteq	r1, r0, lsl #2
 6e8:	0b130e25 	bleq	4c3f84 <startup-0x1fb3c07c>
 6ec:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
 6f0:	06120111 			; <UNDEFINED> instruction: 0x06120111
 6f4:	00001710 	andeq	r1, r0, r0, lsl r7
 6f8:	0b002402 	bleq	9708 <startup-0x1fff68f8>
 6fc:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
 700:	0300000e 	movweq	r0, #14
 704:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
 708:	0b3b0b3a 	bleq	ec33f8 <startup-0x1f13cc08>
 70c:	00001349 	andeq	r1, r0, r9, asr #6
 710:	0b002404 	bleq	9728 <startup-0x1fff68d8>
 714:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
 718:	05000008 	streq	r0, [r0, #-8]
 71c:	13490035 	movtne	r0, #36917	; 0x9035
 720:	34060000 	strcc	r0, [r6], #-0
 724:	3a0e0300 	bcc	38132c <startup-0x1fc7ecd4>
 728:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 72c:	3c193f13 	ldccc	15, cr3, [r9], {19}
 730:	07000019 	smladeq	r0, r9, r0, r0
 734:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 738:	0b3b0b3a 	bleq	ec3428 <startup-0x1f13cbd8>
 73c:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
 740:	0000193c 	andeq	r1, r0, ip, lsr r9
 744:	3e010408 	cdpcc	4, 0, cr0, cr1, cr8, {0}
 748:	490b0b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp}
 74c:	3b0b3a13 	blcc	2cefa0 <startup-0x1fd31060>
 750:	00130105 	andseq	r0, r3, r5, lsl #2
 754:	00280900 	eoreq	r0, r8, r0, lsl #18
 758:	0b1c0e03 	bleq	703f6c <startup-0x1f8fc094>
 75c:	280a0000 	stmdacs	sl, {}	; <UNPREDICTABLE>
 760:	1c080300 	stcne	3, cr0, [r8], {-0}
 764:	0b00000b 	bleq	798 <startup-0x1ffff868>
 768:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
 76c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 770:	00001349 	andeq	r1, r0, r9, asr #6
 774:	0b01130c 	bleq	453ac <startup-0x1ffbac54>
 778:	3b0b3a0b 	blcc	2cefac <startup-0x1fd31054>
 77c:	00130105 	andseq	r0, r3, r5, lsl #2
 780:	000d0d00 	andeq	r0, sp, r0, lsl #26
 784:	0b3a0803 	bleq	e82798 <startup-0x1f17d868>
 788:	1349053b 	movtne	r0, #38203	; 0x953b
 78c:	00000b38 	andeq	r0, r0, r8, lsr fp
 790:	03000d0e 	movweq	r0, #3342	; 0xd0e
 794:	3b0b3a0e 	blcc	2cefd4 <startup-0x1fd3102c>
 798:	38134905 	ldmdacc	r3, {r0, r2, r8, fp, lr}
 79c:	0f00000b 	svceq	0x0000000b
 7a0:	0b0b0113 	bleq	2c0bf4 <startup-0x1fd3f40c>
 7a4:	0b3b0b3a 	bleq	ec3494 <startup-0x1f13cb6c>
 7a8:	00001301 	andeq	r1, r0, r1, lsl #6
 7ac:	03000d10 	movweq	r0, #3344	; 0xd10
 7b0:	3b0b3a0e 	blcc	2ceff0 <startup-0x1fd31010>
 7b4:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
 7b8:	1100000b 	tstne	r0, fp
 7bc:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 7c0:	0b3a0e03 	bleq	e83fd4 <startup-0x1f17c02c>
 7c4:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
 7c8:	06120111 			; <UNDEFINED> instruction: 0x06120111
 7cc:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 7d0:	00130119 	andseq	r0, r3, r9, lsl r1
 7d4:	00051200 	andeq	r1, r5, r0, lsl #4
 7d8:	0b3a0e03 	bleq	e83fec <startup-0x1f17c014>
 7dc:	1349053b 	movtne	r0, #38203	; 0x953b
 7e0:	00001802 	andeq	r1, r0, r2, lsl #16
 7e4:	03003413 	movweq	r3, #1043	; 0x413
 7e8:	3b0b3a0e 	blcc	2cf028 <startup-0x1fd30fd8>
 7ec:	02134905 	andseq	r4, r3, #81920	; 0x14000
 7f0:	14000018 	strne	r0, [r0], #-24	; 0xffffffe8
 7f4:	0b0b000f 	bleq	2c0838 <startup-0x1fd3f7c8>
 7f8:	00001349 	andeq	r1, r0, r9, asr #6
 7fc:	3f012e15 	svccc	0x00012e15
 800:	3a0e0319 	bcc	38146c <startup-0x1fc7eb94>
 804:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
 808:	11134919 	tstne	r3, r9, lsl r9
 80c:	40061201 	andmi	r1, r6, r1, lsl #4
 810:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 814:	00001301 	andeq	r1, r0, r1, lsl #6
 818:	3f012e16 	svccc	0x00012e16
 81c:	3a0e0319 	bcc	381488 <startup-0x1fc7eb78>
 820:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 824:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 828:	96184006 	ldrls	r4, [r8], -r6
 82c:	13011942 	movwne	r1, #6466	; 0x1942
 830:	05170000 	ldreq	r0, [r7, #-0]
 834:	3a0e0300 	bcc	38143c <startup-0x1fc7ebc4>
 838:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 83c:	00180213 	andseq	r0, r8, r3, lsl r2
 840:	00341800 	eorseq	r1, r4, r0, lsl #16
 844:	0b3a0e03 	bleq	e84058 <startup-0x1f17bfa8>
 848:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 84c:	00001802 	andeq	r1, r0, r2, lsl #16
 850:	3f012e19 	svccc	0x00012e19
 854:	3a0e0319 	bcc	3814c0 <startup-0x1fc7eb40>
 858:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 85c:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 860:	96184006 	ldrls	r4, [r8], -r6
 864:	00001942 	andeq	r1, r0, r2, asr #18
 868:	01110100 	tsteq	r1, r0, lsl #2
 86c:	0b130e25 	bleq	4c4108 <startup-0x1fb3bef8>
 870:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
 874:	06120111 			; <UNDEFINED> instruction: 0x06120111
 878:	00001710 	andeq	r1, r0, r0, lsl r7
 87c:	0b002402 	bleq	988c <startup-0x1fff6774>
 880:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
 884:	0300000e 	movweq	r0, #14
 888:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
 88c:	0b3b0b3a 	bleq	ec357c <startup-0x1f13ca84>
 890:	00001349 	andeq	r1, r0, r9, asr #6
 894:	0b002404 	bleq	98ac <startup-0x1fff6754>
 898:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
 89c:	05000008 	streq	r0, [r0, #-8]
 8a0:	13490035 	movtne	r0, #36917	; 0x9035
 8a4:	13060000 	movwne	r0, #24576	; 0x6000
 8a8:	3a0b0b01 	bcc	2c34b4 <startup-0x1fd3cb4c>
 8ac:	010b3b0b 	tsteq	fp, fp, lsl #22
 8b0:	07000013 	smladeq	r0, r3, r0, r0
 8b4:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
 8b8:	0b3b0b3a 	bleq	ec35a8 <startup-0x1f13ca58>
 8bc:	0b381349 	bleq	e055e8 <startup-0x1f1faa18>
 8c0:	0d080000 	stceq	0, cr0, [r8, #-0]
 8c4:	3a080300 	bcc	2014cc <startup-0x1fdfeb34>
 8c8:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 8cc:	000b3813 	andeq	r3, fp, r3, lsl r8
 8d0:	01010900 	tsteq	r1, r0, lsl #18
 8d4:	13011349 	movwne	r1, #4937	; 0x1349
 8d8:	210a0000 	mrscs	r0, (UNDEF: 10)
 8dc:	2f134900 	svccs	0x00134900
 8e0:	0b00000b 	bleq	914 <startup-0x1ffff6ec>
 8e4:	0e030104 	adfeqs	f0, f3, f4
 8e8:	0b0b0b3e 	bleq	2c35e8 <startup-0x1fd3ca18>
 8ec:	0b3a1349 	bleq	e85618 <startup-0x1f17a9e8>
 8f0:	13010b3b 	movwne	r0, #6971	; 0x1b3b
 8f4:	280c0000 	stmdacs	ip, {}	; <UNPREDICTABLE>
 8f8:	1c0e0300 	stcne	3, cr0, [lr], {-0}
 8fc:	0d00000d 	stceq	0, cr0, [r0, #-52]	; 0xffffffcc
 900:	0e030028 	cdpeq	0, 0, cr0, cr3, cr8, {1}
 904:	00000b1c 	andeq	r0, r0, ip, lsl fp
 908:	0300340e 	movweq	r3, #1038	; 0x40e
 90c:	3b0b3a0e 	blcc	2cf14c <startup-0x1fd30eb4>
 910:	3f134905 	svccc	0x00134905
 914:	00193c19 	andseq	r3, r9, r9, lsl ip
 918:	00340f00 	eorseq	r0, r4, r0, lsl #30
 91c:	0b3a0e03 	bleq	e84130 <startup-0x1f17bed0>
 920:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 924:	193c193f 	ldmdbne	ip!, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
 928:	04100000 	ldreq	r0, [r0], #-0
 92c:	0b0b3e01 	bleq	2d0138 <startup-0x1fd2fec8>
 930:	3a13490b 	bcc	4d2d64 <startup-0x1fb2d29c>
 934:	01053b0b 	tsteq	r5, fp, lsl #22
 938:	11000013 	tstne	r0, r3, lsl r0
 93c:	08030028 	stmdaeq	r3, {r3, r5}
 940:	00000b1c 	andeq	r0, r0, ip, lsl fp
 944:	03001612 	movweq	r1, #1554	; 0x612
 948:	3b0b3a0e 	blcc	2cf188 <startup-0x1fd30e78>
 94c:	00134905 	andseq	r4, r3, r5, lsl #18
 950:	01131300 	tsteq	r3, r0, lsl #6
 954:	0b3a0b0b 	bleq	e83588 <startup-0x1f17ca78>
 958:	1301053b 	movwne	r0, #5435	; 0x153b
 95c:	0d140000 	ldceq	0, cr0, [r4, #-0]
 960:	3a0e0300 	bcc	381568 <startup-0x1fc7ea98>
 964:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 968:	000b3813 	andeq	r3, fp, r3, lsl r8
 96c:	000d1500 	andeq	r1, sp, r0, lsl #10
 970:	0b3a0803 	bleq	e82984 <startup-0x1f17d67c>
 974:	1349053b 	movtne	r0, #38203	; 0x953b
 978:	00000b38 	andeq	r0, r0, r8, lsr fp
 97c:	3e010416 	cfmvdlrcc	mvd1, r0
 980:	490b0b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp}
 984:	3b0b3a13 	blcc	2cf1d8 <startup-0x1fd30e28>
 988:	0013010b 	andseq	r0, r3, fp, lsl #2
 98c:	000f1700 	andeq	r1, pc, r0, lsl #14
 990:	13490b0b 	movtne	r0, #39691	; 0x9b0b
 994:	13180000 	tstne	r8, #0
 998:	3c0e0300 	stccc	3, cr0, [lr], {-0}
 99c:	19000019 	stmdbne	r0, {r0, r3, r4}
 9a0:	0b0b0117 	bleq	2c0e04 <startup-0x1fd3f1fc>
 9a4:	0b3b0b3a 	bleq	ec3694 <startup-0x1f13c96c>
 9a8:	00001301 	andeq	r1, r0, r1, lsl #6
 9ac:	03000d1a 	movweq	r0, #3354	; 0xd1a
 9b0:	3b0b3a0e 	blcc	2cf1f0 <startup-0x1fd30e10>
 9b4:	0013490b 	andseq	r4, r3, fp, lsl #18
 9b8:	000f1b00 	andeq	r1, pc, r0, lsl #22
 9bc:	00000b0b 	andeq	r0, r0, fp, lsl #22
 9c0:	4900261c 	stmdbmi	r0, {r2, r3, r4, r9, sl, sp}
 9c4:	1d000013 	stcne	0, cr0, [r0, #-76]	; 0xffffffb4
 9c8:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
 9cc:	0b3a0b0b 	bleq	e83600 <startup-0x1f17ca00>
 9d0:	13010b3b 	movwne	r0, #6971	; 0x1b3b
 9d4:	131e0000 	tstne	lr, #0
 9d8:	0b0e0301 	bleq	3815e4 <startup-0x1fc7ea1c>
 9dc:	3b0b3a05 	blcc	2cf1f8 <startup-0x1fd30e08>
 9e0:	0013010b 	andseq	r0, r3, fp, lsl #2
 9e4:	000d1f00 	andeq	r1, sp, r0, lsl #30
 9e8:	0b3a0e03 	bleq	e841fc <startup-0x1f17be04>
 9ec:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 9f0:	00000538 	andeq	r0, r0, r8, lsr r5
 9f4:	27001520 	strcs	r1, [r0, -r0, lsr #10]
 9f8:	21000019 	tstcs	r0, r9, lsl r0
 9fc:	19270115 	stmdbne	r7!, {r0, r2, r4, r8}
 a00:	13011349 	movwne	r1, #4937	; 0x1349
 a04:	05220000 	streq	r0, [r2, #-0]!
 a08:	00134900 	andseq	r4, r3, r0, lsl #18
 a0c:	01132300 	tsteq	r3, r0, lsl #6
 a10:	050b0e03 	streq	r0, [fp, #-3587]	; 0xfffff1fd
 a14:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 a18:	00001301 	andeq	r1, r0, r1, lsl #6
 a1c:	03000d24 	movweq	r0, #3364	; 0xd24
 a20:	3b0b3a0e 	blcc	2cf260 <startup-0x1fd30da0>
 a24:	38134905 	ldmdacc	r3, {r0, r2, r8, fp, lr}
 a28:	25000005 	strcs	r0, [r0, #-5]
 a2c:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
 a30:	0b3a0b0b 	bleq	e83664 <startup-0x1f17c99c>
 a34:	1301053b 	movwne	r0, #5435	; 0x153b
 a38:	17260000 	strne	r0, [r6, -r0]!
 a3c:	3a0b0b01 	bcc	2c3648 <startup-0x1fd3c9b8>
 a40:	01053b0b 	tsteq	r5, fp, lsl #22
 a44:	27000013 	smladcs	r0, r3, r0, r0
 a48:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
 a4c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 a50:	00001349 	andeq	r1, r0, r9, asr #6
 a54:	27011528 	strcs	r1, [r1, -r8, lsr #10]
 a58:	00130119 	andseq	r0, r3, r9, lsl r1
 a5c:	00342900 	eorseq	r2, r4, r0, lsl #18
 a60:	0b3a0e03 	bleq	e84274 <startup-0x1f17bd8c>
 a64:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 a68:	00001802 	andeq	r1, r0, r2, lsl #16
 a6c:	3f012e2a 	svccc	0x00012e2a
 a70:	3a0e0319 	bcc	3816dc <startup-0x1fc7e924>
 a74:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 a78:	11134919 	tstne	r3, r9, lsl r9
 a7c:	40061201 	andmi	r1, r6, r1, lsl #4
 a80:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 a84:	00001301 	andeq	r1, r0, r1, lsl #6
 a88:	0300052b 	movweq	r0, #1323	; 0x52b
 a8c:	3b0b3a0e 	blcc	2cf2cc <startup-0x1fd30d34>
 a90:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 a94:	2c000018 	stccs	0, cr0, [r0], {24}
 a98:	08030005 	stmdaeq	r3, {r0, r2}
 a9c:	0b3b0b3a 	bleq	ec378c <startup-0x1f13c874>
 aa0:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 aa4:	0b2d0000 	bleq	b40aac <startup-0x1f4bf554>
 aa8:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
 aac:	2e000006 	cdpcs	0, 0, cr0, cr0, cr6, {0}
 ab0:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 ab4:	0b3a0e03 	bleq	e842c8 <startup-0x1f17bd38>
 ab8:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 abc:	06120111 			; <UNDEFINED> instruction: 0x06120111
 ac0:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 ac4:	00130119 	andseq	r0, r3, r9, lsl r1
 ac8:	012e2f00 			; <UNDEFINED> instruction: 0x012e2f00
 acc:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 ad0:	0b3b0b3a 	bleq	ec37c0 <startup-0x1f13c840>
 ad4:	01111927 	tsteq	r1, r7, lsr #18
 ad8:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 adc:	00194296 	mulseq	r9, r6, r2
 ae0:	010b3000 	mrseq	r3, (UNDEF: 11)
 ae4:	00001755 	andeq	r1, r0, r5, asr r7
	...

Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	00000024 	andeq	r0, r0, r4, lsr #32
   4:	00000002 	andeq	r0, r0, r2
   8:	00040000 	andeq	r0, r4, r0
   c:	00000000 	andeq	r0, r0, r0
  10:	20000010 	andcs	r0, r0, r0, lsl r0
  14:	000010cc 	andeq	r1, r0, ip, asr #1
  18:	20000000 	andcs	r0, r0, r0
  1c:	0000000c 	andeq	r0, r0, ip
	...
  28:	0000001c 	andeq	r0, r0, ip, lsl r0
  2c:	17630002 	strbne	r0, [r3, -r2]!
  30:	00040000 	andeq	r0, r4, r0
  34:	00000000 	andeq	r0, r0, r0
  38:	200010dc 	ldrdcs	r1, [r0], -ip
  3c:	0000050e 	andeq	r0, r0, lr, lsl #10
	...
  48:	0000001c 	andeq	r0, r0, ip, lsl r0
  4c:	1d8a0002 	stcne	0, cr0, [sl, #8]
  50:	00040000 	andeq	r0, r4, r0
  54:	00000000 	andeq	r0, r0, r0
  58:	200015ec 	andcs	r1, r0, ip, ror #11
  5c:	000001c4 	andeq	r0, r0, r4, asr #3
	...
  68:	0000001c 	andeq	r0, r0, ip, lsl r0
  6c:	22d10002 	sbcscs	r0, r1, #2
  70:	00040000 	andeq	r0, r4, r0
  74:	00000000 	andeq	r0, r0, r0
  78:	200017b0 			; <UNDEFINED> instruction: 0x200017b0
  7c:	000000e8 	andeq	r0, r0, r8, ror #1
	...
  88:	0000001c 	andeq	r0, r0, ip, lsl r0
  8c:	243e0002 	ldrtcs	r0, [lr], #-2
  90:	00040000 	andeq	r0, r4, r0
  94:	00000000 	andeq	r0, r0, r0
  98:	20001898 	mulcs	r0, r8, r8
  9c:	000009fe 	strdeq	r0, [r0], -lr
	...
  a8:	0000001c 	andeq	r0, r0, ip, lsl r0
  ac:	2e0e0002 	cdpcs	0, 0, cr0, cr14, cr2, {0}
  b0:	00040000 	andeq	r0, r4, r0
  b4:	00000000 	andeq	r0, r0, r0
  b8:	20002298 	mulcs	r0, r8, r2
  bc:	00000340 	andeq	r0, r0, r0, asr #6
	...

Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
   0:	20000010 	andcs	r0, r0, r0, lsl r0
   4:	200010dc 	ldrdcs	r1, [r0], -ip
   8:	20000000 	andcs	r0, r0, r0
   c:	2000000c 	andcs	r0, r0, ip
	...
  18:	00000042 	andeq	r0, r0, r2, asr #32
  1c:	0000006e 	andeq	r0, r0, lr, rrx
  20:	00000070 	andeq	r0, r0, r0, ror r0
  24:	0000007c 	andeq	r0, r0, ip, ror r0
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
       0:	0000047a 	andeq	r0, r0, sl, ror r4
       4:	01fd0002 	mvnseq	r0, r2
       8:	01020000 	mrseq	r0, (UNDEF: 2)
       c:	000d0efb 	strdeq	r0, [sp], -fp
      10:	01010101 	tsteq	r1, r1, lsl #2
      14:	01000000 	mrseq	r0, (UNDEF: 0)
      18:	2e010000 	cdpcs	0, 0, cr0, cr1, cr0, {0}
      1c:	696c2f2e 	stmdbvs	ip!, {r1, r2, r3, r5, r8, r9, sl, fp, sp}^
      20:	54532f62 	ldrbpl	r2, [r3], #-3938	; 0xfffff09e
      24:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
      28:	696c5f34 	stmdbvs	ip!, {r2, r4, r5, r8, r9, sl, fp, ip, lr}^
      2c:	4d432f62 	stclmi	15, cr2, [r3, #-392]	; 0xfffffe78
      30:	2f534953 	svccs	0x00534953
      34:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
      38:	00656475 	rsbeq	r6, r5, r5, ror r4
      3c:	6c2f2e2e 	stcvs	14, cr2, [pc], #-184	; ffffff8c <APBAHBPrescTable+0xdfffd7c0>
      40:	532f6269 			; <UNDEFINED> instruction: 0x532f6269
      44:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
      48:	6c5f3446 	cfldrdvs	mvd3, [pc], {70}	; 0x46
      4c:	532f6269 			; <UNDEFINED> instruction: 0x532f6269
      50:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
      54:	78783446 	ldmdavc	r8!, {r1, r2, r6, sl, ip, sp}^
      58:	6474535f 	ldrbtvs	r5, [r4], #-863	; 0xfffffca1
      5c:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
      60:	445f6870 	ldrbmi	r6, [pc], #-2160	; 68 <startup-0x1fffff98>
      64:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
      68:	72732f72 	rsbsvc	r2, r3, #456	; 0x1c8
      6c:	3a430063 	bcc	10c0200 <startup-0x1ef3fe00>
      70:	6573552f 	ldrbvs	r5, [r3, #-1327]!	; 0xfffffad1
      74:	412f7372 			; <UNDEFINED> instruction: 0x412f7372
      78:	746d6164 	strbtvc	r6, [sp], #-356	; 0xfffffe9c
      7c:	656e4f2f 	strbvs	r4, [lr, #-3887]!	; 0xfffff0d1
      80:	76697244 	strbtvc	r7, [r9], -r4, asr #4
      84:	6f442f65 	svcvs	0x00442f65
      88:	656d756b 	strbvs	r7, [sp, #-1387]!	; 0xfffffa95
      8c:	472f746e 	strmi	r7, [pc, -lr, ror #8]!
      90:	75487469 	strbvc	r7, [r8, #-1129]	; 0xfffffb97
      94:	41442f62 	cmpmi	r4, r2, ror #30
      98:	30393254 	eorscc	r3, r9, r4, asr r2
      9c:	72614c2d 	rsbvc	r4, r1, #11520	; 0x2d00
      a0:	7379736d 	cmnvc	r9, #-1275068415	; 0xb4000001
      a4:	2f6d6574 	svccs	0x006d6574
      a8:	2f646f6b 	svccs	0x00646f6b
      ac:	726f6f44 	rsbvc	r6, pc, #68, 30	; 0x110
      b0:	2f2e2e00 	svccs	0x002e2e00
      b4:	2f62696c 	svccs	0x0062696c
      b8:	334d5453 	movtcc	r5, #54355	; 0xd453
      bc:	5f344632 	svcpl	0x00344632
      c0:	2f62696c 	svccs	0x0062696c
      c4:	334d5453 	movtcc	r5, #54355	; 0xd453
      c8:	78344632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, lr}
      cc:	74535f78 	ldrbvc	r5, [r3], #-3960	; 0xfffff088
      d0:	72655064 	rsbvc	r5, r5, #100	; 0x64
      d4:	5f687069 	svcpl	0x00687069
      d8:	76697244 	strbtvc	r7, [r9], -r4, asr #4
      dc:	692f7265 	stmdbvs	pc!, {r0, r2, r5, r6, r9, ip, sp, lr}	; <UNPREDICTABLE>
      e0:	6300636e 	movwvs	r6, #878	; 0x36e
      e4:	73635c3a 	cmnvc	r3, #14848	; 0x3a00
      e8:	70706165 	rsbsvc	r6, r0, r5, ror #2
      ec:	646f635c 	strbtvs	r6, [pc], #-860	; f4 <startup-0x1fffff0c>
      f0:	74696c65 	strbtvc	r6, [r9], #-3173	; 0xfffff39b
      f4:	6f745c65 	svcvs	0x00745c65
      f8:	5c736c6f 	ldclpl	12, cr6, [r3], #-444	; 0xfffffe44
      fc:	2d636367 	stclcs	3, cr6, [r3, #-412]!	; 0xfffffe64
     100:	5c6d7261 	sfmpl	f7, 2, [sp], #-388	; 0xfffffe7c
     104:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
     108:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
     10c:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
     110:	6e695c69 	cdpvs	12, 6, cr5, cr9, cr9, {3}
     114:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
     118:	616d5c65 	cmnvs	sp, r5, ror #24
     11c:	6e696863 	cdpvs	8, 6, cr6, cr9, cr3, {3}
     120:	3a630065 	bcc	18c02bc <startup-0x1e73fd44>
     124:	6573635c 	ldrbvs	r6, [r3, #-860]!	; 0xfffffca4
     128:	5c707061 	ldclpl	0, cr7, [r0], #-388	; 0xfffffe7c
     12c:	65646f63 	strbvs	r6, [r4, #-3939]!	; 0xfffff09d
     130:	6574696c 	ldrbvs	r6, [r4, #-2412]!	; 0xfffff694
     134:	6f6f745c 	svcvs	0x006f745c
     138:	675c736c 	ldrbvs	r7, [ip, -ip, ror #6]
     13c:	612d6363 			; <UNDEFINED> instruction: 0x612d6363
     140:	615c6d72 	cmpvs	ip, r2, ror sp
     144:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
     148:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
     14c:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
     150:	636e695c 	cmnvs	lr, #92, 18	; 0x170000
     154:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
     158:	7379735c 	cmnvc	r9, #92, 6	; 0x70000001
     15c:	6f630000 	svcvs	0x00630000
     160:	635f6572 	cmpvs	pc, #478150656	; 0x1c800000
     164:	682e346d 	stmdavs	lr!, {r0, r2, r3, r5, r6, sl, ip, sp}
     168:	00000100 	andeq	r0, r0, r0, lsl #2
     16c:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
     170:	78346632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, sp, lr}
     174:	63725f78 	cmnvs	r2, #120, 30	; 0x1e0
     178:	00632e63 	rsbeq	r2, r3, r3, ror #28
     17c:	73000002 	movwvc	r0, #2
     180:	74726174 	ldrbtvc	r6, [r2], #-372	; 0xfffffe8c
     184:	632e7075 			; <UNDEFINED> instruction: 0x632e7075
     188:	00000300 	andeq	r0, r0, r0, lsl #6
     18c:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
     190:	78346632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, sp, lr}
     194:	00682e78 	rsbeq	r2, r8, r8, ror lr
     198:	5f000004 	svcpl	0x00000004
     19c:	61666564 	cmnvs	r6, r4, ror #10
     1a0:	5f746c75 	svcpl	0x00746c75
     1a4:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
     1a8:	00682e73 	rsbeq	r2, r8, r3, ror lr
     1ac:	5f000005 	svcpl	0x00000005
     1b0:	69647473 	stmdbvs	r4!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
     1b4:	682e746e 	stmdavs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
     1b8:	00000600 	andeq	r0, r0, r0, lsl #12
     1bc:	74737973 	ldrbtvc	r7, [r3], #-2419	; 0xfffff68d
     1c0:	735f6d65 	cmpvc	pc, #6464	; 0x1940
     1c4:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
     1c8:	78783466 	ldmdavc	r8!, {r1, r2, r5, r6, sl, ip, sp}^
     1cc:	0400682e 	streq	r6, [r0], #-2094	; 0xfffff7d2
     1d0:	74730000 	ldrbtvc	r0, [r3], #-0
     1d4:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
     1d8:	5f787834 	svcpl	0x00787834
     1dc:	2e636372 	mcrcs	3, 3, r6, cr3, cr2, {3}
     1e0:	00040068 	andeq	r0, r4, r8, rrx
     1e4:	6d747300 	ldclvs	3, cr7, [r4, #-0]
     1e8:	34663233 	strbtcc	r3, [r6], #-563	; 0xfffffdcd
     1ec:	675f7878 			; <UNDEFINED> instruction: 0x675f7878
     1f0:	2e6f6970 			; <UNDEFINED> instruction: 0x2e6f6970
     1f4:	00040068 	andeq	r0, r4, r8, rrx
     1f8:	61747300 	cmnvs	r4, r0, lsl #6
     1fc:	70757472 	rsbsvc	r7, r5, r2, ror r4
     200:	0300682e 	movweq	r6, #2094	; 0x82e
     204:	00000000 	andeq	r0, r0, r0
     208:	00100205 	andseq	r0, r0, r5, lsl #4
     20c:	dd032000 	stcle	0, cr2, [r3, #-0]
     210:	4b75010c 	blmi	1d40648 <startup-0x1e2bf9b8>
     214:	03d81ecd 	bicseq	r1, r8, #3280	; 0xcd0
     218:	4b9000fc 	blmi	fe400610 <APBAHBPrescTable+0xde3fde44>
     21c:	01040200 	mrseq	r0, R12_usr
     220:	30065806 	andcc	r5, r6, r6, lsl #16
     224:	3f3d674b 	svccc	0x003d674b
     228:	03020421 	movweq	r0, #9249	; 0x2421
     22c:	308273f7 	strdcc	r7, [r2], r7	; <UNPREDICTABLE>
     230:	40693f69 	rsbmi	r3, r9, r9, ror #30
     234:	3f694e4f 	svccc	0x00694e4f
     238:	e4170350 	ldr	r0, [r7], #-848	; 0xfffffcb0
     23c:	034b3f6b 	movteq	r3, #49003	; 0xbf6b
     240:	2f3d740f 	svccs	0x003d740f
     244:	0402003d 	streq	r0, [r2], #-61	; 0xffffffc3
     248:	02004002 	andeq	r4, r0, #2
     24c:	00670204 	rsbeq	r0, r7, r4, lsl #4
     250:	3d020402 	cfstrscc	mvf0, [r2, #-8]
     254:	01040200 	mrseq	r0, R12_usr
     258:	4c065806 	stcmi	8, cr5, [r6], {6}
     25c:	2f3e4e5a 	svccs	0x003e4e5a
     260:	674a0b03 	strbvs	r0, [sl, -r3, lsl #22]
     264:	694d3f32 	stmdbvs	sp, {r1, r4, r5, r8, r9, sl, fp, ip, sp}^
     268:	7415033d 	ldrvc	r0, [r5], #-829	; 0xfffffcc3
     26c:	14034b6a 	strne	r4, [r3], #-2922	; 0xfffff496
     270:	3f3f6c66 	svccc	0x003f6c66
     274:	03660b03 	cmneq	r6, #3072	; 0xc00
     278:	233d2079 	teqcs	sp, #121	; 0x79
     27c:	0f03243d 	svceq	0x0003243d
     280:	034b6a74 	movteq	r6, #47732	; 0xba74
     284:	7c6600de 	stclvc	0, cr0, [r6], #-888	; 0xfffffc88
     288:	033e2dbb 	teqeq	lr, #11968	; 0x2ec0
     28c:	4b69660e 	blmi	1a59acc <startup-0x1e5a6534>
     290:	5d661a03 	vstmdbpl	r6!, {s3-s5}
     294:	01850383 	orreq	r0, r5, r3, lsl #7
     298:	034b6974 	movteq	r6, #47476	; 0xb974
     29c:	6c6600e9 	stclvs	0, cr0, [r6], #-932	; 0xfffffc5c
     2a0:	740d03ad 	strvc	r0, [sp], #-941	; 0xfffffc53
     2a4:	0e034b69 	vmlseq.f64	d4, d3, d25
     2a8:	034b6966 	movteq	r6, #47462	; 0xb966
     2ac:	34596615 	ldrbcc	r6, [r9], #-1557	; 0xfffff9eb
     2b0:	41694d3f 	cmnmi	r9, pc, lsr sp
     2b4:	59901803 	ldmibpl	r0, {r0, r1, fp, ip}
     2b8:	694d3f34 	stmdbvs	sp, {r2, r4, r5, r8, r9, sl, fp, ip, sp}^
     2bc:	01b30341 			; <UNDEFINED> instruction: 0x01b30341
     2c0:	3f334b74 	svccc	0x00334b74
     2c4:	033d4d4d 	teqeq	sp, #4928	; 0x1340
     2c8:	672f660d 	strvs	r6, [pc, -sp, lsl #12]!
     2cc:	4b661703 	blmi	1985ee0 <startup-0x1e67a120>
     2d0:	4d4d3f33 	stclmi	15, cr3, [sp, #-204]	; 0xffffff34
     2d4:	660f033d 			; <UNDEFINED> instruction: 0x660f033d
     2d8:	4d3f334b 	ldcmi	3, cr3, [pc, #-300]!	; 1b4 <startup-0x1ffffe4c>
     2dc:	0f033d4d 	svceq	0x00033d4d
     2e0:	3f334b82 	svccc	0x00334b82
     2e4:	033d5b4d 	teqeq	sp, #78848	; 0x13400
     2e8:	c04b9024 	subgt	r9, fp, r4, lsr #32
     2ec:	223d775a 	eorscs	r7, sp, #23592960	; 0x1680000
     2f0:	5a67263d 	bpl	19c9bec <startup-0x1e636414>
     2f4:	83cbdb3f 	bichi	sp, fp, #64512	; 0xfc00
     2f8:	201b0383 	andscs	r0, fp, r3, lsl #7
     2fc:	3d59253d 	cfldr64cc	mvdx2, [r9, #-244]	; 0xffffff0c
     300:	3d676968 			; <UNDEFINED> instruction: 0x3d676968
     304:	3d676968 			; <UNDEFINED> instruction: 0x3d676968
     308:	3f036768 	svccc	0x00036768
     30c:	84334bba 	ldrthi	r4, [r3], #-3002	; 0xfffff446
     310:	40694d3f 	rsbmi	r4, r9, pc, lsr sp
     314:	9e0a0383 	cdpls	3, 0, cr0, cr10, cr3, {4}
     318:	0c034b6a 			; <UNDEFINED> instruction: 0x0c034b6a
     31c:	034b6966 	movteq	r6, #47462	; 0xb966
     320:	4e6601b8 	mcrmi	1, 3, r0, cr6, cr8, {5}
     324:	7416033d 	ldrvc	r0, [r6], #-829	; 0xfffffcc3
     328:	4d4d334b 	stclmi	3, cr3, [sp, #-300]	; 0xfffffed4
     32c:	14034b4d 	strne	r4, [r3], #-2893	; 0xfffff4b3
     330:	4d334b82 	vldmdbmi	r3!, {d4}
     334:	034b4d4d 	movteq	r4, #48461	; 0xbd4d
     338:	334b8211 	movtcc	r8, #45585	; 0xb211
     33c:	4b5b4d4d 	blmi	16d3878 <startup-0x1e92c788>
     340:	4b741003 	blmi	1d04354 <startup-0x1e2fbcac>
     344:	694d4d33 	stmdbvs	sp, {r0, r1, r4, r5, r8, sl, fp, lr}^
     348:	00d3034b 	sbcseq	r0, r3, fp, asr #6
     34c:	4d334b82 	vldmdbmi	r3!, {d4}
     350:	034b4d4d 	movteq	r4, #48461	; 0xbd4d
     354:	4e8200f0 	mcrmi	0, 4, r0, cr2, cr0, {7}
     358:	7425033d 	strtvc	r0, [r5], #-829	; 0xfffffcc3
     35c:	1e6c4c79 	mcrne	12, 3, r4, cr12, cr9, {3}
     360:	74130376 	ldrvc	r0, [r3], #-886	; 0xfffffc8a
     364:	1e6c4c79 	mcrne	12, 3, r4, cr12, cr9, {3}
     368:	74110376 	ldrvc	r0, [r1], #-886	; 0xfffffc8a
     36c:	1e6c4c79 	mcrne	12, 3, r4, cr12, cr9, {3}
     370:	742c0376 	strtvc	r0, [ip], #-886	; 0xfffffc8a
     374:	1e6c4c79 	mcrne	12, 3, r4, cr12, cr9, {3}
     378:	74270376 	strtvc	r0, [r7], #-886	; 0xfffffc8a
     37c:	1e6c4c79 	mcrne	12, 3, r4, cr12, cr9, {3}
     380:	741d0376 	ldrvc	r0, [sp], #-886	; 0xfffffc8a
     384:	1e6c4c79 	mcrne	12, 3, r4, cr12, cr9, {3}
     388:	74100376 	ldrvc	r0, [r0], #-886	; 0xfffffc8a
     38c:	1e6c4c79 	mcrne	12, 3, r4, cr12, cr9, {3}
     390:	740e0376 	strvc	r0, [lr], #-886	; 0xfffffc8a
     394:	1e6c4c79 	mcrne	12, 3, r4, cr12, cr9, {3}
     398:	74290376 	strtvc	r0, [r9], #-886	; 0xfffffc8a
     39c:	1e6c4c78 	mcrne	12, 3, r4, cr12, cr8, {3}
     3a0:	74230376 	strtvc	r0, [r3], #-886	; 0xfffffc8a
     3a4:	1e6c4c78 	mcrne	12, 3, r4, cr12, cr8, {3}
     3a8:	74250376 	strtvc	r0, [r5], #-886	; 0xfffffc8a
     3ac:	1e6c4c78 	mcrne	12, 3, r4, cr12, cr8, {3}
     3b0:	74140376 	ldrvc	r0, [r4], #-886	; 0xfffffc8a
     3b4:	1e6c4c78 	mcrne	12, 3, r4, cr12, cr8, {3}
     3b8:	74120376 	ldrvc	r0, [r2], #-886	; 0xfffffc8a
     3bc:	1e6c4c78 	mcrne	12, 3, r4, cr12, cr8, {3}
     3c0:	742d0376 	strtvc	r0, [sp], #-886	; 0xfffffc8a
     3c4:	1e6c4c78 	mcrne	12, 3, r4, cr12, cr8, {3}
     3c8:	74280376 	strtvc	r0, [r8], #-886	; 0xfffffc8a
     3cc:	1e6c4c78 	mcrne	12, 3, r4, cr12, cr8, {3}
     3d0:	740c0376 	strvc	r0, [ip], #-886	; 0xfffffc8a
     3d4:	1e6c4c6a 	cdpne	12, 6, cr4, cr12, cr10, {3}
     3d8:	02ac0368 	adceq	r0, ip, #104, 6	; 0xa0000001
     3dc:	974d9474 	smlsldxls	r9, sp, r4, r4
     3e0:	1703ae1e 	smladne	r3, lr, lr, sl
     3e4:	2f2f6766 	svccs	0x002f6766
     3e8:	4c3e5950 			; <UNDEFINED> instruction: 0x4c3e5950
     3ec:	59404e3e 	stmdbpl	r0, {r1, r2, r3, r4, r5, r9, sl, fp, lr}^
     3f0:	3d4d5c76 	stclcc	12, cr5, [sp, #-472]	; 0xfffffe28
     3f4:	30660a03 	rsbcc	r0, r6, r3, lsl #20
     3f8:	58110375 	ldmdapl	r1, {r0, r2, r4, r5, r6, r8, r9}
     3fc:	5c685067 	stclpl	0, cr5, [r8], #-412	; 0xfffffe64
     400:	11033d4d 	tstne	r3, sp, asr #26
     404:	044b6c66 	strbeq	r6, [fp], #-3174	; 0xfffff39a
     408:	67b80303 	ldrvs	r0, [r8, r3, lsl #6]!
     40c:	403e3066 	eorsmi	r3, lr, r6, rrx
     410:	3d3d4b4b 	fldmdbxcc	sp!, {d4-d40}	;@ Deprecated
     414:	3d4b693d 	vstrcc.16	s13, [fp, #-122]	; 0xffffff86	; <UNPREDICTABLE>
     418:	68673d3d 	stmdavs	r7!, {r0, r2, r3, r4, r5, r8, sl, fp, ip, sp}^
     41c:	3e5b592f 	vnmlscc.f16	s11, s22, s31	; <UNPREDICTABLE>
     420:	3da16c3e 	stccc	12, cr6, [r1, #248]!	; 0xf8
     424:	9191312f 	orrsls	r3, r1, pc, lsr #2
     428:	25029291 	strcs	r9, [r2, #-657]	; 0xfffffd6f
     42c:	2f085a16 	svccs	0x00085a16
     430:	d8c98508 	stmiale	r9, {r3, r8, sl, pc}^
     434:	005a7908 	subseq	r7, sl, r8, lsl #18
     438:	06010402 	streq	r0, [r1], -r2, lsl #8
     43c:	ca0806d6 	bgt	201f9c <startup-0x1fdfe064>
     440:	14082408 	strne	r2, [r8], #-1032	; 0xfffffbf8
     444:	01040200 	mrseq	r0, R12_usr
     448:	0200d606 	andeq	sp, r0, #6291456	; 0x600000
     44c:	03060204 	movweq	r0, #25092	; 0x6204
     450:	02002e76 	andeq	r2, r0, #1888	; 0x760
     454:	66060104 	strvs	r0, [r6], -r4, lsl #2
     458:	02040200 	andeq	r0, r4, #0, 4
     45c:	58720306 	ldmdapl	r2!, {r1, r2, r8, r9}^
     460:	01040200 	mrseq	r0, R12_usr
     464:	08666606 	stmdaeq	r6!, {r1, r2, r9, sl, sp, lr}^
     468:	04010100 	streq	r0, [r1], #-256	; 0xffffff00
     46c:	02050003 	andeq	r0, r5, #3
     470:	20000000 	andcs	r0, r0, r0
     474:	13011303 	movwne	r1, #4867	; 0x1303
     478:	0003025e 	andeq	r0, r3, lr, asr r2
     47c:	02b50101 	adcseq	r0, r5, #1073741824	; 0x40000000
     480:	00020000 	andeq	r0, r2, r0
     484:	000001c9 	andeq	r0, r0, r9, asr #3
     488:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
     48c:	0101000d 	tsteq	r1, sp
     490:	00000101 	andeq	r0, r0, r1, lsl #2
     494:	00000100 	andeq	r0, r0, r0, lsl #2
     498:	2f3a4301 	svccs	0x003a4301
     49c:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
     4a0:	64412f73 	strbvs	r2, [r1], #-3955	; 0xfffff08d
     4a4:	2f746d61 	svccs	0x00746d61
     4a8:	44656e4f 	strbtmi	r6, [r5], #-3663	; 0xfffff1b1
     4ac:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
     4b0:	6b6f442f 	blvs	1bd1574 <startup-0x1e42ea8c>
     4b4:	6e656d75 	mcrvs	13, 3, r6, cr5, cr5, {3}
     4b8:	69472f74 	stmdbvs	r7, {r2, r4, r5, r6, r8, r9, sl, fp, sp}^
     4bc:	62754874 	rsbsvs	r4, r5, #116, 16	; 0x740000
     4c0:	5441442f 	strbpl	r4, [r1], #-1071	; 0xfffffbd1
     4c4:	2d303932 			; <UNDEFINED> instruction: 0x2d303932
     4c8:	6d72614c 	ldfvse	f6, [r2, #-304]!	; 0xfffffed0
     4cc:	74737973 	ldrbtvc	r7, [r3], #-2419	; 0xfffff68d
     4d0:	6b2f6d65 	blvs	bdba6c <startup-0x1f424594>
     4d4:	6c2f646f 	cfstrsvs	mvf6, [pc], #-444	; 320 <startup-0x1ffffce0>
     4d8:	532f6269 			; <UNDEFINED> instruction: 0x532f6269
     4dc:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
     4e0:	6c5f3446 	cfldrdvs	mvd3, [pc], {70}	; 0x46
     4e4:	532f6269 			; <UNDEFINED> instruction: 0x532f6269
     4e8:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
     4ec:	78783446 	ldmdavc	r8!, {r1, r2, r6, sl, ip, sp}^
     4f0:	6474535f 	ldrbtvs	r5, [r4], #-863	; 0xfffffca1
     4f4:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
     4f8:	445f6870 	ldrbmi	r6, [pc], #-2160	; 500 <startup-0x1ffffb00>
     4fc:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
     500:	72732f72 	rsbsvc	r2, r3, #456	; 0x1c8
     504:	3a630063 	bcc	18c0698 <startup-0x1e73f968>
     508:	6573635c 	ldrbvs	r6, [r3, #-860]!	; 0xfffffca4
     50c:	5c707061 	ldclpl	0, cr7, [r0], #-388	; 0xfffffe7c
     510:	65646f63 	strbvs	r6, [r4, #-3939]!	; 0xfffff09d
     514:	6574696c 	ldrbvs	r6, [r4, #-2412]!	; 0xfffff694
     518:	6f6f745c 	svcvs	0x006f745c
     51c:	675c736c 	ldrbvs	r7, [ip, -ip, ror #6]
     520:	612d6363 			; <UNDEFINED> instruction: 0x612d6363
     524:	615c6d72 	cmpvs	ip, r2, ror sp
     528:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
     52c:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
     530:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
     534:	636e695c 	cmnvs	lr, #92, 18	; 0x170000
     538:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
     53c:	63616d5c 	cmnvs	r1, #92, 26	; 0x1700
     540:	656e6968 	strbvs	r6, [lr, #-2408]!	; 0xfffff698
     544:	5c3a6300 	ldcpl	3, cr6, [sl], #-0
     548:	61657363 	cmnvs	r5, r3, ror #6
     54c:	635c7070 	cmpvs	ip, #112	; 0x70
     550:	6c65646f 	cfstrdvs	mvd6, [r5], #-444	; 0xfffffe44
     554:	5c657469 	cfstrdpl	mvd7, [r5], #-420	; 0xfffffe5c
     558:	6c6f6f74 	stclvs	15, cr6, [pc], #-464	; 390 <startup-0x1ffffc70>
     55c:	63675c73 	cmnvs	r7, #29440	; 0x7300
     560:	72612d63 	rsbvc	r2, r1, #6336	; 0x18c0
     564:	72615c6d 	rsbvc	r5, r1, #27904	; 0x6d00
     568:	6f6e2d6d 	svcvs	0x006e2d6d
     56c:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
     570:	5c696261 	sfmpl	f6, 2, [r9], #-388	; 0xfffffe7c
     574:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
     578:	5c656475 	cfstrdpl	mvd6, [r5], #-468	; 0xfffffe2c
     57c:	00737973 	rsbseq	r7, r3, r3, ror r9
     580:	6c2f2e2e 	stcvs	14, cr2, [pc], #-184	; 4d0 <startup-0x1ffffb30>
     584:	532f6269 			; <UNDEFINED> instruction: 0x532f6269
     588:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
     58c:	6c5f3446 	cfldrdvs	mvd3, [pc], {70}	; 0x46
     590:	432f6269 			; <UNDEFINED> instruction: 0x432f6269
     594:	5349534d 	movtpl	r5, #37709	; 0x934d
     598:	636e692f 	cmnvs	lr, #770048	; 0xbc000
     59c:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
     5a0:	2f2e2e00 	svccs	0x002e2e00
     5a4:	2f62696c 	svccs	0x0062696c
     5a8:	334d5453 	movtcc	r5, #54355	; 0xd453
     5ac:	5f344632 	svcpl	0x00344632
     5b0:	2f62696c 	svccs	0x0062696c
     5b4:	334d5453 	movtcc	r5, #54355	; 0xd453
     5b8:	78344632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, lr}
     5bc:	74535f78 	ldrbvc	r5, [r3], #-3960	; 0xfffff088
     5c0:	72655064 	rsbvc	r5, r5, #100	; 0x64
     5c4:	5f687069 	svcpl	0x00687069
     5c8:	76697244 	strbtvc	r7, [r9], -r4, asr #4
     5cc:	692f7265 	stmdbvs	pc!, {r0, r2, r5, r6, r9, ip, sp, lr}	; <UNPREDICTABLE>
     5d0:	0000636e 	andeq	r6, r0, lr, ror #6
     5d4:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
     5d8:	78346632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, sp, lr}
     5dc:	70675f78 	rsbvc	r5, r7, r8, ror pc
     5e0:	632e6f69 			; <UNDEFINED> instruction: 0x632e6f69
     5e4:	00000100 	andeq	r0, r0, r0, lsl #2
     5e8:	6665645f 			; <UNDEFINED> instruction: 0x6665645f
     5ec:	746c7561 	strbtvc	r7, [ip], #-1377	; 0xfffffa9f
     5f0:	7079745f 	rsbsvc	r7, r9, pc, asr r4
     5f4:	682e7365 	stmdavs	lr!, {r0, r2, r5, r6, r8, r9, ip, sp, lr}
     5f8:	00000200 	andeq	r0, r0, r0, lsl #4
     5fc:	6474735f 	ldrbtvs	r7, [r4], #-863	; 0xfffffca1
     600:	2e746e69 	cdpcs	14, 7, cr6, cr4, cr9, {3}
     604:	00030068 	andeq	r0, r3, r8, rrx
     608:	726f6300 	rsbvc	r6, pc, #0, 6
     60c:	6d635f65 	stclvs	15, cr5, [r3, #-404]!	; 0xfffffe6c
     610:	00682e34 	rsbeq	r2, r8, r4, lsr lr
     614:	73000004 	movwvc	r0, #4
     618:	65747379 	ldrbvs	r7, [r4, #-889]!	; 0xfffffc87
     61c:	74735f6d 	ldrbtvc	r5, [r3], #-3949	; 0xfffff093
     620:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
     624:	2e787834 	mrccs	8, 3, r7, cr8, cr4, {1}
     628:	00050068 	andeq	r0, r5, r8, rrx
     62c:	6d747300 	ldclvs	3, cr7, [r4, #-0]
     630:	34663233 	strbtcc	r3, [r6], #-563	; 0xfffffdcd
     634:	682e7878 	stmdavs	lr!, {r3, r4, r5, r6, fp, ip, sp, lr}
     638:	00000500 	andeq	r0, r0, r0, lsl #10
     63c:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
     640:	78346632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, sp, lr}
     644:	70675f78 	rsbvc	r5, r7, r8, ror pc
     648:	682e6f69 	stmdavs	lr!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}
     64c:	00000500 	andeq	r0, r0, r0, lsl #10
     650:	02050000 	andeq	r0, r5, #0
     654:	200010dc 	ldrdcs	r1, [r0], -ip
     658:	0100ff03 	tsteq	r0, r3, lsl #30	; <UNPREDICTABLE>
     65c:	034b4c4e 	movteq	r4, #48206	; 0xbc4e
     660:	4a034a38 	bmi	d2f48 <startup-0x1ff2d0b8>
     664:	034b4c20 	movteq	r4, #48160	; 0xbc20
     668:	4f034a33 	svcmi	0x00034a33
     66c:	034b4c20 	movteq	r4, #48160	; 0xbc20
     670:	54034a2e 	strpl	r4, [r3], #-2606	; 0xfffff5d2
     674:	034b4c20 	movteq	r4, #48160	; 0xbc20
     678:	59034a29 	stmdbpl	r3, {r0, r3, r5, r9, fp, lr}
     67c:	034b4c20 	movteq	r4, #48160	; 0xbc20
     680:	5e034a24 	vmlapl.f32	s8, s6, s9
     684:	034b4c20 	movteq	r4, #48160	; 0xbc20
     688:	63034a1f 	movwvs	r4, #14879	; 0x3a1f
     68c:	034b4c20 	movteq	r4, #48160	; 0xbc20
     690:	68034a1a 	stmdavs	r3, {r1, r3, r4, r9, fp, lr}
     694:	034b4c20 	movteq	r4, #48160	; 0xbc20
     698:	6e034a15 			; <UNDEFINED> instruction: 0x6e034a15
     69c:	03674c20 	cmneq	r7, #32, 24	; 0x2000
     6a0:	7303660f 	movwvc	r6, #13839	; 0x360f
     6a4:	03674c20 	cmneq	r7, #32, 24	; 0x2000
     6a8:	7a03660a 	bvc	d9ed8 <startup-0x1ff26128>
     6ac:	69674c20 	stmdbvs	r7!, {r5, sl, fp, lr}^
     6b0:	90080c03 	andls	r0, r8, r3, lsl #24
     6b4:	660a0359 			; <UNDEFINED> instruction: 0x660a0359
     6b8:	4c5a5a3e 	vmovmi	r5, sl, s29, s30
     6bc:	0200bcad 	andeq	fp, r0, #44288	; 0xad00
     6c0:	4a060104 	bmi	180ad8 <startup-0x1fe7f528>
     6c4:	c0ad5006 	adcgt	r5, sp, r6
     6c8:	00bbccad 	adcseq	ip, fp, sp, lsr #25
     6cc:	03020402 	movweq	r0, #9218	; 0x2402
     6d0:	0200ba62 	andeq	fp, r0, #401408	; 0x62000
     6d4:	3c060104 	stfccs	f0, [r6], {4}
     6d8:	3c210306 	stccc	3, cr0, [r1], #-24	; 0xffffffe8
     6dc:	3d3d4c52 	ldccc	12, cr4, [sp, #-328]!	; 0xfffffeb8
     6e0:	033d3d3d 	teqeq	sp, #3904	; 0xf40
     6e4:	42757410 	rsbsmi	r7, r5, #16, 8	; 0x10000000
     6e8:	3e4c3e5a 	mcrcc	14, 2, r3, cr12, cr10, {2}
     6ec:	1c033d3e 	stcne	13, cr3, [r3], {62}	; 0x3e
     6f0:	6850754a 	ldmdavs	r0, {r1, r3, r6, r8, sl, ip, sp, lr}^
     6f4:	033d4c5c 	teqeq	sp, #92, 24	; 0x5c00
     6f8:	3d4e4a0a 	vstrcc	s9, [lr, #-40]	; 0xffffffd8
     6fc:	754a0c03 	strbvc	r0, [sl, #-3075]	; 0xfffff3fd
     700:	4c5c6850 	mrrcmi	8, 5, r6, ip, cr0
     704:	4a0a033d 	bmi	281400 <startup-0x1fd7ec00>
     708:	0f033d4e 	svceq	0x00033d4e
     70c:	034b794a 	movteq	r7, #47434	; 0xb94a
     710:	4b794a0f 	blmi	1e52f54 <startup-0x1e1ad0ac>
     714:	c04a1003 	subgt	r1, sl, r3
     718:	4c1e504c 	ldcmi	0, cr5, [lr], {76}	; 0x4c
     71c:	784a0b03 	stmdavc	sl, {r0, r1, r8, r9, fp}^
     720:	4a0b034b 	bmi	2c1454 <startup-0x1fd3ebac>
     724:	ce037578 	cfrshl64gt	mvdx3, mvdx8, r7
     728:	2fbb4a00 	svccs	0x00bb4a00
     72c:	c9089f35 	stmdbgt	r8, {r0, r2, r4, r5, r8, r9, sl, fp, ip, pc}
     730:	04029fbb 	streq	r9, [r2], #-4027	; 0xfffff045
     734:	fa010100 	blx	40b3c <startup-0x1ffbf4c4>
     738:	02000001 	andeq	r0, r0, #1
     73c:	0001b500 	andeq	fp, r1, r0, lsl #10
     740:	fb010200 	blx	40f4a <startup-0x1ffbf0b6>
     744:	01000d0e 	tsteq	r0, lr, lsl #26
     748:	00010101 	andeq	r0, r1, r1, lsl #2
     74c:	00010000 	andeq	r0, r1, r0
     750:	3a430100 	bcc	10c0b58 <startup-0x1ef3f4a8>
     754:	6573552f 	ldrbvs	r5, [r3, #-1327]!	; 0xfffffad1
     758:	412f7372 			; <UNDEFINED> instruction: 0x412f7372
     75c:	746d6164 	strbtvc	r6, [sp], #-356	; 0xfffffe9c
     760:	656e4f2f 	strbvs	r4, [lr, #-3887]!	; 0xfffff0d1
     764:	76697244 	strbtvc	r7, [r9], -r4, asr #4
     768:	6f442f65 	svcvs	0x00442f65
     76c:	656d756b 	strbvs	r7, [sp, #-1387]!	; 0xfffffa95
     770:	472f746e 	strmi	r7, [pc, -lr, ror #8]!
     774:	75487469 	strbvc	r7, [r8, #-1129]	; 0xfffffb97
     778:	41442f62 	cmpmi	r4, r2, ror #30
     77c:	30393254 	eorscc	r3, r9, r4, asr r2
     780:	72614c2d 	rsbvc	r4, r1, #11520	; 0x2d00
     784:	7379736d 	cmnvc	r9, #-1275068415	; 0xb4000001
     788:	2f6d6574 	svccs	0x006d6574
     78c:	2f646f6b 	svccs	0x00646f6b
     790:	2f62696c 	svccs	0x0062696c
     794:	334d5453 	movtcc	r5, #54355	; 0xd453
     798:	5f344632 	svcpl	0x00344632
     79c:	2f62696c 	svccs	0x0062696c
     7a0:	334d5453 	movtcc	r5, #54355	; 0xd453
     7a4:	78344632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, lr}
     7a8:	74535f78 	ldrbvc	r5, [r3], #-3960	; 0xfffff088
     7ac:	72655064 	rsbvc	r5, r5, #100	; 0x64
     7b0:	5f687069 	svcpl	0x00687069
     7b4:	76697244 	strbtvc	r7, [r9], -r4, asr #4
     7b8:	732f7265 			; <UNDEFINED> instruction: 0x732f7265
     7bc:	63006372 	movwvs	r6, #882	; 0x372
     7c0:	73635c3a 	cmnvc	r3, #14848	; 0x3a00
     7c4:	70706165 	rsbsvc	r6, r0, r5, ror #2
     7c8:	646f635c 	strbtvs	r6, [pc], #-860	; 7d0 <startup-0x1ffff830>
     7cc:	74696c65 	strbtvc	r6, [r9], #-3173	; 0xfffff39b
     7d0:	6f745c65 	svcvs	0x00745c65
     7d4:	5c736c6f 	ldclpl	12, cr6, [r3], #-444	; 0xfffffe44
     7d8:	2d636367 	stclcs	3, cr6, [r3, #-412]!	; 0xfffffe64
     7dc:	5c6d7261 	sfmpl	f7, 2, [sp], #-388	; 0xfffffe7c
     7e0:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
     7e4:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
     7e8:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
     7ec:	6e695c69 	cdpvs	12, 6, cr5, cr9, cr9, {3}
     7f0:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
     7f4:	616d5c65 	cmnvs	sp, r5, ror #24
     7f8:	6e696863 	cdpvs	8, 6, cr6, cr9, cr3, {3}
     7fc:	3a630065 	bcc	18c0998 <startup-0x1e73f668>
     800:	6573635c 	ldrbvs	r6, [r3, #-860]!	; 0xfffffca4
     804:	5c707061 	ldclpl	0, cr7, [r0], #-388	; 0xfffffe7c
     808:	65646f63 	strbvs	r6, [r4, #-3939]!	; 0xfffff09d
     80c:	6574696c 	ldrbvs	r6, [r4, #-2412]!	; 0xfffff694
     810:	6f6f745c 	svcvs	0x006f745c
     814:	675c736c 	ldrbvs	r7, [ip, -ip, ror #6]
     818:	612d6363 			; <UNDEFINED> instruction: 0x612d6363
     81c:	615c6d72 	cmpvs	ip, r2, ror sp
     820:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
     824:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
     828:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
     82c:	636e695c 	cmnvs	lr, #92, 18	; 0x170000
     830:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
     834:	7379735c 	cmnvc	r9, #92, 6	; 0x70000001
     838:	2f2e2e00 	svccs	0x002e2e00
     83c:	2f62696c 	svccs	0x0062696c
     840:	334d5453 	movtcc	r5, #54355	; 0xd453
     844:	5f344632 	svcpl	0x00344632
     848:	2f62696c 	svccs	0x0062696c
     84c:	49534d43 	ldmdbmi	r3, {r0, r1, r6, r8, sl, fp, lr}^
     850:	6e692f53 	mcrvs	15, 3, r2, cr9, cr3, {2}
     854:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
     858:	2e2e0065 	cdpcs	0, 2, cr0, cr14, cr5, {3}
     85c:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
     860:	4d54532f 	ldclmi	3, cr5, [r4, #-188]	; 0xffffff44
     864:	34463233 	strbcc	r3, [r6], #-563	; 0xfffffdcd
     868:	62696c5f 	rsbvs	r6, r9, #24320	; 0x5f00
     86c:	4d54532f 	ldclmi	3, cr5, [r4, #-188]	; 0xffffff44
     870:	34463233 	strbcc	r3, [r6], #-563	; 0xfffffdcd
     874:	535f7878 	cmppl	pc, #120, 16	; 0x780000
     878:	65506474 	ldrbvs	r6, [r0, #-1140]	; 0xfffffb8c
     87c:	68706972 	ldmdavs	r0!, {r1, r4, r5, r6, r8, fp, sp, lr}^
     880:	6972445f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, sl, lr}^
     884:	2f726576 	svccs	0x00726576
     888:	00636e69 	rsbeq	r6, r3, r9, ror #28
     88c:	73696d00 	cmnvc	r9, #0, 26
     890:	00632e63 	rsbeq	r2, r3, r3, ror #28
     894:	5f000001 	svcpl	0x00000001
     898:	61666564 	cmnvs	r6, r4, ror #10
     89c:	5f746c75 	svcpl	0x00746c75
     8a0:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
     8a4:	00682e73 	rsbeq	r2, r8, r3, ror lr
     8a8:	5f000002 	svcpl	0x00000002
     8ac:	69647473 	stmdbvs	r4!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
     8b0:	682e746e 	stmdavs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
     8b4:	00000300 	andeq	r0, r0, r0, lsl #6
     8b8:	65726f63 	ldrbvs	r6, [r2, #-3939]!	; 0xfffff09d
     8bc:	346d635f 	strbtcc	r6, [sp], #-863	; 0xfffffca1
     8c0:	0400682e 	streq	r6, [r0], #-2094	; 0xfffff7d2
     8c4:	79730000 	ldmdbvc	r3!, {}^	; <UNPREDICTABLE>
     8c8:	6d657473 	cfstrdvs	mvd7, [r5, #-460]!	; 0xfffffe34
     8cc:	6d74735f 	ldclvs	3, cr7, [r4, #-380]!	; 0xfffffe84
     8d0:	34663233 	strbtcc	r3, [r6], #-563	; 0xfffffdcd
     8d4:	682e7878 	stmdavs	lr!, {r3, r4, r5, r6, fp, ip, sp, lr}
     8d8:	00000500 	andeq	r0, r0, r0, lsl #10
     8dc:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
     8e0:	78346632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, sp, lr}
     8e4:	00682e78 	rsbeq	r2, r8, r8, ror lr
     8e8:	6d000005 	stcvs	0, cr0, [r0, #-20]	; 0xffffffec
     8ec:	2e637369 	cdpcs	3, 6, cr7, cr3, cr9, {3}
     8f0:	00050068 	andeq	r0, r5, r8, rrx
     8f4:	05000000 	streq	r0, [r0, #-0]
     8f8:	0015ec02 	andseq	lr, r5, r2, lsl #24
     8fc:	00f60320 	rscseq	r0, r6, r0, lsr #6
     900:	03594f01 	cmpeq	r9, #1, 30
     904:	c14b900c 	cmpgt	fp, ip
     908:	92759f4d 	rsbsls	r9, r5, #308	; 0x134
     90c:	b05aae91 			; <UNDEFINED> instruction: 0xb05aae91
     910:	032d6757 			; <UNDEFINED> instruction: 0x032d6757
     914:	571e2e09 	ldrpl	r2, [lr, -r9, lsl #28]
     918:	034d2d67 	movteq	r2, #56679	; 0xdd67
     91c:	835d900c 	cmphi	sp, #12
     920:	95900d03 	ldrls	r0, [r0, #3331]	; 0xd03
     924:	841e7a4c 	ldrhi	r7, [lr], #-2636	; 0xfffff5b4
     928:	4d740b03 	fldmdbxmi	r4!, {d16}	;@ Deprecated
     92c:	681e6c3e 	ldmdavs	lr, {r1, r2, r3, r4, r5, sl, fp, sp, lr}
     930:	01000602 	tsteq	r0, r2, lsl #12
     934:	00013101 	andeq	r3, r1, r1, lsl #2
     938:	08000200 	stmdaeq	r0, {r9}
     93c:	02000001 	andeq	r0, r0, #1
     940:	0d0efb01 	vstreq	d15, [lr, #-4]
     944:	01010100 	mrseq	r0, (UNDEF: 17)
     948:	00000001 	andeq	r0, r0, r1
     94c:	01000001 	tsteq	r0, r1
     950:	552f3a43 	strpl	r3, [pc, #-2627]!	; ffffff15 <APBAHBPrescTable+0xdfffd749>
     954:	73726573 	cmnvc	r2, #482344960	; 0x1cc00000
     958:	6164412f 	cmnvs	r4, pc, lsr #2
     95c:	4f2f746d 	svcmi	0x002f746d
     960:	7244656e 	subvc	r6, r4, #461373440	; 0x1b800000
     964:	2f657669 	svccs	0x00657669
     968:	756b6f44 	strbvc	r6, [fp, #-3908]!	; 0xfffff0bc
     96c:	746e656d 	strbtvc	r6, [lr], #-1389	; 0xfffffa93
     970:	7469472f 	strbtvc	r4, [r9], #-1839	; 0xfffff8d1
     974:	2f627548 	svccs	0x00627548
     978:	32544144 	subscc	r4, r4, #68, 2
     97c:	4c2d3039 	stcmi	0, cr3, [sp], #-228	; 0xffffff1c
     980:	736d7261 	cmnvc	sp, #268435462	; 0x10000006
     984:	65747379 	ldrbvs	r7, [r4, #-889]!	; 0xfffffc87
     988:	6f6b2f6d 	svcvs	0x006b2f6d
     98c:	696c2f64 	stmdbvs	ip!, {r2, r5, r6, r8, r9, sl, fp, sp}^
     990:	3a630062 	bcc	18c0b20 <startup-0x1e73f4e0>
     994:	6573635c 	ldrbvs	r6, [r3, #-860]!	; 0xfffffca4
     998:	5c707061 	ldclpl	0, cr7, [r0], #-388	; 0xfffffe7c
     99c:	65646f63 	strbvs	r6, [r4, #-3939]!	; 0xfffff09d
     9a0:	6574696c 	ldrbvs	r6, [r4, #-2412]!	; 0xfffff694
     9a4:	6f6f745c 	svcvs	0x006f745c
     9a8:	675c736c 	ldrbvs	r7, [ip, -ip, ror #6]
     9ac:	612d6363 			; <UNDEFINED> instruction: 0x612d6363
     9b0:	615c6d72 	cmpvs	ip, r2, ror sp
     9b4:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
     9b8:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
     9bc:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
     9c0:	636e695c 	cmnvs	lr, #92, 18	; 0x170000
     9c4:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
     9c8:	63616d5c 	cmnvs	r1, #92, 26	; 0x1700
     9cc:	656e6968 	strbvs	r6, [lr, #-2408]!	; 0xfffff698
     9d0:	5c3a6300 	ldcpl	3, cr6, [sl], #-0
     9d4:	61657363 	cmnvs	r5, r3, ror #6
     9d8:	635c7070 	cmpvs	ip, #112	; 0x70
     9dc:	6c65646f 	cfstrdvs	mvd6, [r5], #-444	; 0xfffffe44
     9e0:	5c657469 	cfstrdpl	mvd7, [r5], #-420	; 0xfffffe5c
     9e4:	6c6f6f74 	stclvs	15, cr6, [pc], #-464	; 81c <startup-0x1ffff7e4>
     9e8:	63675c73 	cmnvs	r7, #29440	; 0x7300
     9ec:	72612d63 	rsbvc	r2, r1, #6336	; 0x18c0
     9f0:	72615c6d 	rsbvc	r5, r1, #27904	; 0x6d00
     9f4:	6f6e2d6d 	svcvs	0x006e2d6d
     9f8:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
     9fc:	5c696261 	sfmpl	f6, 2, [r9], #-388	; 0xfffffe7c
     a00:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
     a04:	5c656475 	cfstrdpl	mvd6, [r5], #-468	; 0xfffffe2c
     a08:	00737973 	rsbseq	r7, r3, r3, ror r9
     a0c:	66756200 	ldrbtvs	r6, [r5], -r0, lsl #4
     a10:	2e726566 	cdpcs	5, 7, cr6, cr2, cr6, {3}
     a14:	00010063 	andeq	r0, r1, r3, rrx
     a18:	65645f00 	strbvs	r5, [r4, #-3840]!	; 0xfffff100
     a1c:	6c756166 	ldfvse	f6, [r5], #-408	; 0xfffffe68
     a20:	79745f74 	ldmdbvc	r4!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
     a24:	2e736570 	mrccs	5, 3, r6, cr3, cr0, {3}
     a28:	00020068 	andeq	r0, r2, r8, rrx
     a2c:	74735f00 	ldrbtvc	r5, [r3], #-3840	; 0xfffff100
     a30:	746e6964 	strbtvc	r6, [lr], #-2404	; 0xfffff69c
     a34:	0300682e 	movweq	r6, #2094	; 0x82e
     a38:	75620000 	strbvc	r0, [r2, #-0]!
     a3c:	72656666 	rsbvc	r6, r5, #106954752	; 0x6600000
     a40:	0100682e 	tsteq	r0, lr, lsr #16
     a44:	00000000 	andeq	r0, r0, r0
     a48:	17b00205 	ldrne	r0, [r0, r5, lsl #4]!
     a4c:	4b152000 	blmi	548a54 <startup-0x1fab75ac>
     a50:	4e4b4b4b 	vmlsmi.f64	d20, d11, d11
     a54:	c9325976 	ldmdbgt	r2!, {r1, r2, r4, r5, r6, r8, fp, ip, lr}
     a58:	214c5985 	smlalbbcs	r5, ip, r5, r9
     a5c:	32595a4e 	subscc	r5, r9, #319488	; 0x4e000
     a60:	4c5985c9 	cfldr64mi	mvdx8, [r9], {201}	; 0xc9
     a64:	00040221 	andeq	r0, r4, r1, lsr #4
     a68:	034f0101 	movteq	r0, #61697	; 0xf101
     a6c:	00020000 	andeq	r0, r2, r0
     a70:	000001de 	ldrdeq	r0, [r0], -lr
     a74:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
     a78:	0101000d 	tsteq	r1, sp
     a7c:	00000101 	andeq	r0, r0, r1, lsl #2
     a80:	00000100 	andeq	r0, r0, r0, lsl #2
     a84:	2f3a4301 	svccs	0x003a4301
     a88:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
     a8c:	64412f73 	strbvs	r2, [r1], #-3955	; 0xfffff08d
     a90:	2f746d61 	svccs	0x00746d61
     a94:	44656e4f 	strbtmi	r6, [r5], #-3663	; 0xfffff1b1
     a98:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
     a9c:	6b6f442f 	blvs	1bd1b60 <startup-0x1e42e4a0>
     aa0:	6e656d75 	mcrvs	13, 3, r6, cr5, cr5, {3}
     aa4:	69472f74 	stmdbvs	r7, {r2, r4, r5, r6, r8, r9, sl, fp, sp}^
     aa8:	62754874 	rsbsvs	r4, r5, #116, 16	; 0x740000
     aac:	5441442f 	strbpl	r4, [r1], #-1071	; 0xfffffbd1
     ab0:	2d303932 			; <UNDEFINED> instruction: 0x2d303932
     ab4:	6d72614c 	ldfvse	f6, [r2, #-304]!	; 0xfffffed0
     ab8:	74737973 	ldrbtvc	r7, [r3], #-2419	; 0xfffff68d
     abc:	6b2f6d65 	blvs	bdc058 <startup-0x1f423fa8>
     ac0:	6c2f646f 	cfstrsvs	mvf6, [pc], #-444	; 90c <startup-0x1ffff6f4>
     ac4:	532f6269 			; <UNDEFINED> instruction: 0x532f6269
     ac8:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
     acc:	6c5f3446 	cfldrdvs	mvd3, [pc], {70}	; 0x46
     ad0:	532f6269 			; <UNDEFINED> instruction: 0x532f6269
     ad4:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
     ad8:	78783446 	ldmdavc	r8!, {r1, r2, r6, sl, ip, sp}^
     adc:	6474535f 	ldrbtvs	r5, [r4], #-863	; 0xfffffca1
     ae0:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
     ae4:	445f6870 	ldrbmi	r6, [pc], #-2160	; aec <startup-0x1ffff514>
     ae8:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
     aec:	72732f72 	rsbsvc	r2, r3, #456	; 0x1c8
     af0:	3a630063 	bcc	18c0c84 <startup-0x1e73f37c>
     af4:	6573635c 	ldrbvs	r6, [r3, #-860]!	; 0xfffffca4
     af8:	5c707061 	ldclpl	0, cr7, [r0], #-388	; 0xfffffe7c
     afc:	65646f63 	strbvs	r6, [r4, #-3939]!	; 0xfffff09d
     b00:	6574696c 	ldrbvs	r6, [r4, #-2412]!	; 0xfffff694
     b04:	6f6f745c 	svcvs	0x006f745c
     b08:	675c736c 	ldrbvs	r7, [ip, -ip, ror #6]
     b0c:	612d6363 			; <UNDEFINED> instruction: 0x612d6363
     b10:	615c6d72 	cmpvs	ip, r2, ror sp
     b14:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
     b18:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
     b1c:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
     b20:	636e695c 	cmnvs	lr, #92, 18	; 0x170000
     b24:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
     b28:	63616d5c 	cmnvs	r1, #92, 26	; 0x1700
     b2c:	656e6968 	strbvs	r6, [lr, #-2408]!	; 0xfffff698
     b30:	5c3a6300 	ldcpl	3, cr6, [sl], #-0
     b34:	61657363 	cmnvs	r5, r3, ror #6
     b38:	635c7070 	cmpvs	ip, #112	; 0x70
     b3c:	6c65646f 	cfstrdvs	mvd6, [r5], #-444	; 0xfffffe44
     b40:	5c657469 	cfstrdpl	mvd7, [r5], #-420	; 0xfffffe5c
     b44:	6c6f6f74 	stclvs	15, cr6, [pc], #-464	; 97c <startup-0x1ffff684>
     b48:	63675c73 	cmnvs	r7, #29440	; 0x7300
     b4c:	72612d63 	rsbvc	r2, r1, #6336	; 0x18c0
     b50:	72615c6d 	rsbvc	r5, r1, #27904	; 0x6d00
     b54:	6f6e2d6d 	svcvs	0x006e2d6d
     b58:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
     b5c:	5c696261 	sfmpl	f6, 2, [r9], #-388	; 0xfffffe7c
     b60:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
     b64:	5c656475 	cfstrdpl	mvd6, [r5], #-468	; 0xfffffe2c
     b68:	00737973 	rsbseq	r7, r3, r3, ror r9
     b6c:	6c2f2e2e 	stcvs	14, cr2, [pc], #-184	; abc <startup-0x1ffff544>
     b70:	532f6269 			; <UNDEFINED> instruction: 0x532f6269
     b74:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
     b78:	6c5f3446 	cfldrdvs	mvd3, [pc], {70}	; 0x46
     b7c:	432f6269 			; <UNDEFINED> instruction: 0x432f6269
     b80:	5349534d 	movtpl	r5, #37709	; 0x934d
     b84:	636e692f 	cmnvs	lr, #770048	; 0xbc000
     b88:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
     b8c:	2f2e2e00 	svccs	0x002e2e00
     b90:	2f62696c 	svccs	0x0062696c
     b94:	334d5453 	movtcc	r5, #54355	; 0xd453
     b98:	5f344632 	svcpl	0x00344632
     b9c:	2f62696c 	svccs	0x0062696c
     ba0:	334d5453 	movtcc	r5, #54355	; 0xd453
     ba4:	78344632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, lr}
     ba8:	74535f78 	ldrbvc	r5, [r3], #-3960	; 0xfffff088
     bac:	72655064 	rsbvc	r5, r5, #100	; 0x64
     bb0:	5f687069 	svcpl	0x00687069
     bb4:	76697244 	strbtvc	r7, [r9], -r4, asr #4
     bb8:	692f7265 	stmdbvs	pc!, {r0, r2, r5, r6, r9, ip, sp, lr}	; <UNPREDICTABLE>
     bbc:	0000636e 	andeq	r6, r0, lr, ror #6
     bc0:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
     bc4:	78346632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, sp, lr}
     bc8:	73755f78 	cmnvc	r5, #120, 30	; 0x1e0
     bcc:	2e747261 	cdpcs	2, 7, cr7, cr4, cr1, {3}
     bd0:	00010063 	andeq	r0, r1, r3, rrx
     bd4:	65645f00 	strbvs	r5, [r4, #-3840]!	; 0xfffff100
     bd8:	6c756166 	ldfvse	f6, [r5], #-408	; 0xfffffe68
     bdc:	79745f74 	ldmdbvc	r4!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
     be0:	2e736570 	mrccs	5, 3, r6, cr3, cr0, {3}
     be4:	00020068 	andeq	r0, r2, r8, rrx
     be8:	74735f00 	ldrbtvc	r5, [r3], #-3840	; 0xfffff100
     bec:	746e6964 	strbtvc	r6, [lr], #-2404	; 0xfffff69c
     bf0:	0300682e 	movweq	r6, #2094	; 0x82e
     bf4:	6f630000 	svcvs	0x00630000
     bf8:	635f6572 	cmpvs	pc, #478150656	; 0x1c800000
     bfc:	682e346d 	stmdavs	lr!, {r0, r2, r3, r5, r6, sl, ip, sp}
     c00:	00000400 	andeq	r0, r0, r0, lsl #8
     c04:	74737973 	ldrbtvc	r7, [r3], #-2419	; 0xfffff68d
     c08:	735f6d65 	cmpvc	pc, #6464	; 0x1940
     c0c:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
     c10:	78783466 	ldmdavc	r8!, {r1, r2, r5, r6, sl, ip, sp}^
     c14:	0500682e 	streq	r6, [r0, #-2094]	; 0xfffff7d2
     c18:	74730000 	ldrbtvc	r0, [r3], #-0
     c1c:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
     c20:	2e787834 	mrccs	8, 3, r7, cr8, cr4, {1}
     c24:	00050068 	andeq	r0, r5, r8, rrx
     c28:	6d747300 	ldclvs	3, cr7, [r4, #-0]
     c2c:	34663233 	strbtcc	r3, [r6], #-563	; 0xfffffdcd
     c30:	755f7878 	ldrbvc	r7, [pc, #-2168]	; 3c0 <startup-0x1ffffc40>
     c34:	74726173 	ldrbtvc	r6, [r2], #-371	; 0xfffffe8d
     c38:	0500682e 	streq	r6, [r0, #-2094]	; 0xfffff7d2
     c3c:	74730000 	ldrbtvc	r0, [r3], #-0
     c40:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
     c44:	5f787834 	svcpl	0x00787834
     c48:	2e636372 	mcrcs	3, 3, r6, cr3, cr2, {3}
     c4c:	00050068 	andeq	r0, r5, r8, rrx
     c50:	05000000 	streq	r0, [r0, #-0]
     c54:	00189802 	andseq	r9, r8, r2, lsl #16
     c58:	01bb0320 			; <UNDEFINED> instruction: 0x01bb0320
     c5c:	4b4c4e01 	blmi	1314468 <startup-0x1ecebb98>
     c60:	034a2803 	movteq	r2, #43011	; 0xa803
     c64:	674c205a 	smlsldvs	r2, ip, sl, r0
     c68:	03662303 	cmneq	r6, #201326592	; 0xc000000
     c6c:	674c205f 	smlsldvs	r2, ip, pc, r0	; <UNPREDICTABLE>
     c70:	03661e03 	cmneq	r6, #3, 28	; 0x30
     c74:	674c2064 	strbvs	r2, [ip, -r4, rrx]
     c78:	03661903 	cmneq	r6, #49152	; 0xc000
     c7c:	674c2069 	strbvs	r2, [ip, -r9, rrx]
     c80:	03661403 	cmneq	r6, #50331648	; 0x3000000
     c84:	4b4c206e 	blmi	1308e44 <startup-0x1ecf71bc>
     c88:	034a0f03 	movteq	r0, #44803	; 0xaf03
     c8c:	674c2073 	smlsldxvs	r2, ip, r3, r0
     c90:	03660a03 	cmneq	r6, #12288	; 0x3000
     c94:	674c207a 	smlsldxvs	r2, ip, sl, r0
     c98:	080c0369 	stmdaeq	ip, {r0, r3, r5, r6, r8, r9}
     c9c:	2f4b594a 	svccs	0x004b594a
     ca0:	4d2e1303 	stcmi	3, cr1, [lr, #-12]!
     ca4:	4d4d694e 	vstrmi.16	s13, [sp, #-156]	; 0xffffff64	; <UNPREDICTABLE>
     ca8:	6a2d6750 	bvs	b5a9f0 <startup-0x1f4a5610>
     cac:	694e4d4d 	stmdbvs	lr, {r0, r2, r3, r6, r8, sl, fp, lr}^
     cb0:	02005a4e 	andeq	r5, r0, #319488	; 0x4e000
     cb4:	4a060104 	bmi	1810cc <startup-0x1fe7ef34>
     cb8:	4e5c4c06 	cdpmi	12, 5, cr4, cr12, cr6, {0}
     cbc:	85e6f769 	strbhi	pc, [r6, #1897]!	; 0x769	; <UNPREDICTABLE>
     cc0:	dae86877 	ble	ffa1aea4 <APBAHBPrescTable+0xdfa186d8>
     cc4:	d609034b 	strle	r0, [r9], -fp, asr #6
     cc8:	3d3d4b4c 	vldmdbcc	sp!, {d4-<overflow reg d41>}
     ccc:	033d3d3d 	teqeq	sp, #3904	; 0xf40
     cd0:	03594a0c 	cmpeq	r9, #12, 20	; 0xc000
     cd4:	504c2e09 	subpl	r2, ip, r9, lsl #28
     cd8:	4b3fab4b 	blmi	feba0c <startup-0x1f0145f4>
     cdc:	4c660903 			; <UNDEFINED> instruction: 0x4c660903
     ce0:	3d3d3d3d 	ldccc	13, cr3, [sp, #-244]!	; 0xffffff0c
     ce4:	794a0b03 	stmdbvc	sl, {r0, r1, r8, r9, fp}^
     ce8:	841e974d 	ldrhi	r9, [lr], #-1869	; 0xfffff8b3
     cec:	79740b03 	ldmdbvc	r4!, {r0, r1, r8, r9, fp}^
     cf0:	0d039f84 	stceq	15, cr9, [r3, #-528]	; 0xfffffdf0
     cf4:	894d794a 	stmdbhi	sp, {r1, r3, r6, r8, fp, ip, sp, lr}^
     cf8:	0b03841e 	bleq	e1d78 <startup-0x1ff1e288>
     cfc:	974d7974 	smlsldxls	r7, sp, r4, r9
     d00:	2a03841e 	bcs	e1d80 <startup-0x1ff1e280>
     d04:	03757a74 	cmneq	r5, #116, 20	; 0x74000
     d08:	674f4a09 	strbvs	r4, [pc, -r9, lsl #20]
     d0c:	7a4a2e03 	bvc	128c520 <startup-0x1ed73ae0>
     d10:	0b039f84 	bleq	e8b28 <startup-0x1ff174d8>
     d14:	894d794a 	stmdbhi	sp, {r1, r3, r6, r8, fp, ip, sp, lr}^
     d18:	0c03841e 	cfstrseq	mvf8, [r3], {30}
     d1c:	9183794a 	orrls	r7, r3, sl, asr #18
     d20:	79743e03 	ldmdbvc	r4!, {r0, r1, r9, sl, fp, ip, sp}^
     d24:	0b039183 	bleq	e5338 <startup-0x1ff1acc8>
     d28:	974d794a 	strbls	r7, [sp, -sl, asr #18]
     d2c:	0903841e 	stmdbeq	r3, {r1, r2, r3, r4, sl, pc}
     d30:	03834f74 	orreq	r4, r3, #116, 30	; 0x1d0
     d34:	4d794a2f 	vldmdbmi	r9!, {s9-s55}
     d38:	03841e89 	orreq	r1, r4, #2192	; 0x890
     d3c:	794a00c5 	stmdbvc	sl, {r0, r2, r6, r7}^
     d40:	0b03bb84 	bleq	efb58 <startup-0x1ff104a8>
     d44:	894d784a 	stmdbhi	sp, {r1, r3, r6, fp, ip, sp, lr}^
     d48:	0b03841e 	bleq	e1dc8 <startup-0x1ff1e238>
     d4c:	894d784a 	stmdbhi	sp, {r1, r3, r6, fp, ip, sp, lr}^
     d50:	3903841e 	stmdbcc	r3, {r1, r2, r3, r4, sl, pc}
     d54:	9183794a 	orrls	r7, r3, sl, asr #18
     d58:	794a0b03 	stmdbvc	sl, {r0, r1, r8, r9, fp}^
     d5c:	841e894d 	ldrhi	r8, [lr], #-2381	; 0xfffff6b3
     d60:	c04a1f03 	subgt	r1, sl, r3, lsl #30
     d64:	ae1e984e 	cdpge	8, 1, cr9, cr14, cr14, {2}
     d68:	4a00f203 	bmi	3d57c <startup-0x1ffc2a84>
     d6c:	0c0367bb 	stceq	7, cr6, [r3], {187}	; 0xbb
     d70:	5969312e 	stmdbpl	r9!, {r1, r2, r3, r5, r8, ip, sp}^
     d74:	3e4c3e5a 	mcrcc	14, 2, r3, cr12, cr10, {2}
     d78:	6c4c3e4e 	mcrrvs	14, 4, r3, ip, cr14
     d7c:	1503761e 	strne	r7, [r3, #-1566]	; 0xfffff9e2
     d80:	0b03754a 	bleq	de2b0 <startup-0x1ff21d50>
     d84:	4c5c924a 	lfmmi	f1, 3, [ip], {74}	; 0x4a
     d88:	4a1c033d 	bmi	701a84 <startup-0x1f8fe57c>
     d8c:	67740b03 	ldrbvs	r0, [r4, -r3, lsl #22]!
     d90:	754a1603 	strbvc	r1, [sl, #-1539]	; 0xfffff9fd
     d94:	4a0c0367 	bmi	301b38 <startup-0x1fcfe4c8>
     d98:	3e5a5968 	vnmlacc.f16	s11, s20, s17	; <UNPREDICTABLE>
     d9c:	77863e84 	strvc	r3, [r6, r4, lsl #29]
     da0:	00755959 	rsbseq	r5, r5, r9, asr r9
     da4:	06010402 	streq	r0, [r1], -r2, lsl #8
     da8:	5c3e063c 	ldcpl	6, cr0, [lr], #-240	; 0xffffff10
     dac:	1d033d4d 	stcne	13, cr3, [r3, #-308]	; 0xfffffecc
     db0:	0b03754a 	bleq	de2e0 <startup-0x1ff21d20>
     db4:	67675982 	strbvs	r5, [r7, -r2, lsl #19]!
     db8:	01000402 	tsteq	r0, r2, lsl #8
     dbc:	0002ba01 	andeq	fp, r2, r1, lsl #20
     dc0:	32000200 	andcc	r0, r0, #0, 4
     dc4:	02000002 	andeq	r0, r0, #2
     dc8:	0d0efb01 	vstreq	d15, [lr, #-4]
     dcc:	01010100 	mrseq	r0, (UNDEF: 17)
     dd0:	00000001 	andeq	r0, r0, r1
     dd4:	01000001 	tsteq	r0, r1
     dd8:	552f3a43 	strpl	r3, [pc, #-2627]!	; 39d <startup-0x1ffffc63>
     ddc:	73726573 	cmnvc	r2, #482344960	; 0x1cc00000
     de0:	6164412f 	cmnvs	r4, pc, lsr #2
     de4:	4f2f746d 	svcmi	0x002f746d
     de8:	7244656e 	subvc	r6, r4, #461373440	; 0x1b800000
     dec:	2f657669 	svccs	0x00657669
     df0:	756b6f44 	strbvc	r6, [fp, #-3908]!	; 0xfffff0bc
     df4:	746e656d 	strbtvc	r6, [lr], #-1389	; 0xfffffa93
     df8:	7469472f 	strbtvc	r4, [r9], #-1839	; 0xfffff8d1
     dfc:	2f627548 	svccs	0x00627548
     e00:	32544144 	subscc	r4, r4, #68, 2
     e04:	4c2d3039 	stcmi	0, cr3, [sp], #-228	; 0xffffff1c
     e08:	736d7261 	cmnvc	sp, #268435462	; 0x10000006
     e0c:	65747379 	ldrbvs	r7, [r4, #-889]!	; 0xfffffc87
     e10:	6f6b2f6d 	svcvs	0x006b2f6d
     e14:	696c2f64 	stmdbvs	ip!, {r2, r5, r6, r8, r9, sl, fp, sp}^
     e18:	3a630062 	bcc	18c0fa8 <startup-0x1e73f058>
     e1c:	6573635c 	ldrbvs	r6, [r3, #-860]!	; 0xfffffca4
     e20:	5c707061 	ldclpl	0, cr7, [r0], #-388	; 0xfffffe7c
     e24:	65646f63 	strbvs	r6, [r4, #-3939]!	; 0xfffff09d
     e28:	6574696c 	ldrbvs	r6, [r4, #-2412]!	; 0xfffff694
     e2c:	6f6f745c 	svcvs	0x006f745c
     e30:	675c736c 	ldrbvs	r7, [ip, -ip, ror #6]
     e34:	612d6363 			; <UNDEFINED> instruction: 0x612d6363
     e38:	615c6d72 	cmpvs	ip, r2, ror sp
     e3c:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
     e40:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
     e44:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
     e48:	636e695c 	cmnvs	lr, #92, 18	; 0x170000
     e4c:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
     e50:	63616d5c 	cmnvs	r1, #92, 26	; 0x1700
     e54:	656e6968 	strbvs	r6, [lr, #-2408]!	; 0xfffff698
     e58:	5c3a6300 	ldcpl	3, cr6, [sl], #-0
     e5c:	61657363 	cmnvs	r5, r3, ror #6
     e60:	635c7070 	cmpvs	ip, #112	; 0x70
     e64:	6c65646f 	cfstrdvs	mvd6, [r5], #-444	; 0xfffffe44
     e68:	5c657469 	cfstrdpl	mvd7, [r5], #-420	; 0xfffffe5c
     e6c:	6c6f6f74 	stclvs	15, cr6, [pc], #-464	; ca4 <startup-0x1ffff35c>
     e70:	63675c73 	cmnvs	r7, #29440	; 0x7300
     e74:	72612d63 	rsbvc	r2, r1, #6336	; 0x18c0
     e78:	72615c6d 	rsbvc	r5, r1, #27904	; 0x6d00
     e7c:	6f6e2d6d 	svcvs	0x006e2d6d
     e80:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
     e84:	5c696261 	sfmpl	f6, 2, [r9], #-388	; 0xfffffe7c
     e88:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
     e8c:	5c656475 	cfstrdpl	mvd6, [r5], #-468	; 0xfffffe2c
     e90:	00737973 	rsbseq	r7, r3, r3, ror r9
     e94:	6c2f2e2e 	stcvs	14, cr2, [pc], #-184	; de4 <startup-0x1ffff21c>
     e98:	532f6269 			; <UNDEFINED> instruction: 0x532f6269
     e9c:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
     ea0:	6c5f3446 	cfldrdvs	mvd3, [pc], {70}	; 0x46
     ea4:	432f6269 			; <UNDEFINED> instruction: 0x432f6269
     ea8:	5349534d 	movtpl	r5, #37709	; 0x934d
     eac:	636e692f 	cmnvs	lr, #770048	; 0xbc000
     eb0:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
     eb4:	2f2e2e00 	svccs	0x002e2e00
     eb8:	2f62696c 	svccs	0x0062696c
     ebc:	334d5453 	movtcc	r5, #54355	; 0xd453
     ec0:	5f344632 	svcpl	0x00344632
     ec4:	2f62696c 	svccs	0x0062696c
     ec8:	334d5453 	movtcc	r5, #54355	; 0xd453
     ecc:	78344632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, lr}
     ed0:	74535f78 	ldrbvc	r5, [r3], #-3960	; 0xfffff088
     ed4:	72655064 	rsbvc	r5, r5, #100	; 0x64
     ed8:	5f687069 	svcpl	0x00687069
     edc:	76697244 	strbtvc	r7, [r9], -r4, asr #4
     ee0:	692f7265 	stmdbvs	pc!, {r0, r2, r5, r6, r9, ip, sp, lr}	; <UNPREDICTABLE>
     ee4:	6300636e 	movwvs	r6, #878	; 0x36e
     ee8:	73635c3a 	cmnvc	r3, #14848	; 0x3a00
     eec:	70706165 	rsbsvc	r6, r0, r5, ror #2
     ef0:	646f635c 	strbtvs	r6, [pc], #-860	; ef8 <startup-0x1ffff108>
     ef4:	74696c65 	strbtvc	r6, [r9], #-3173	; 0xfffff39b
     ef8:	6f745c65 	svcvs	0x00745c65
     efc:	5c736c6f 	ldclpl	12, cr6, [r3], #-444	; 0xfffffe44
     f00:	2d636367 	stclcs	3, cr6, [r3, #-412]!	; 0xfffffe64
     f04:	5c6d7261 	sfmpl	f7, 2, [sp], #-388	; 0xfffffe7c
     f08:	5c62696c 			; <UNDEFINED> instruction: 0x5c62696c
     f0c:	5c636367 	stclpl	3, cr6, [r3], #-412	; 0xfffffe64
     f10:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
     f14:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
     f18:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
     f1c:	2e375c69 	cdpcs	12, 3, cr5, cr7, cr9, {3}
     f20:	5c312e32 	ldcpl	14, cr2, [r1], #-200	; 0xffffff38
     f24:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
     f28:	00656475 	rsbeq	r6, r5, r5, ror r4
     f2c:	41535500 	cmpmi	r3, r0, lsl #10
     f30:	632e5452 			; <UNDEFINED> instruction: 0x632e5452
     f34:	00000100 	andeq	r0, r0, r0, lsl #2
     f38:	6665645f 			; <UNDEFINED> instruction: 0x6665645f
     f3c:	746c7561 	strbtvc	r7, [ip], #-1377	; 0xfffffa9f
     f40:	7079745f 	rsbsvc	r7, r9, pc, asr r4
     f44:	682e7365 	stmdavs	lr!, {r0, r2, r5, r6, r8, r9, ip, sp, lr}
     f48:	00000200 	andeq	r0, r0, r0, lsl #4
     f4c:	6474735f 	ldrbtvs	r7, [r4], #-863	; 0xfffffca1
     f50:	2e746e69 	cdpcs	14, 7, cr6, cr4, cr9, {3}
     f54:	00030068 	andeq	r0, r3, r8, rrx
     f58:	66756200 	ldrbtvs	r6, [r5], -r0, lsl #4
     f5c:	2e726566 	cdpcs	5, 7, cr6, cr2, cr6, {3}
     f60:	00010068 	andeq	r0, r1, r8, rrx
     f64:	726f6300 	rsbvc	r6, pc, #0, 6
     f68:	6d635f65 	stclvs	15, cr5, [r3, #-404]!	; 0xfffffe6c
     f6c:	00682e34 	rsbeq	r2, r8, r4, lsr lr
     f70:	73000004 	movwvc	r0, #4
     f74:	65747379 	ldrbvs	r7, [r4, #-889]!	; 0xfffffc87
     f78:	74735f6d 	ldrbtvc	r5, [r3], #-3949	; 0xfffff093
     f7c:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
     f80:	2e787834 	mrccs	8, 3, r7, cr8, cr4, {1}
     f84:	00050068 	andeq	r0, r5, r8, rrx
     f88:	6d747300 	ldclvs	3, cr7, [r4, #-0]
     f8c:	34663233 	strbtcc	r3, [r6], #-563	; 0xfffffdcd
     f90:	682e7878 	stmdavs	lr!, {r3, r4, r5, r6, fp, ip, sp, lr}
     f94:	00000500 	andeq	r0, r0, r0, lsl #10
     f98:	6373696d 	cmnvs	r3, #1785856	; 0x1b4000
     f9c:	0500682e 	streq	r6, [r0, #-2094]	; 0xfffff7d2
     fa0:	74730000 	ldrbtvc	r0, [r3], #-0
     fa4:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
     fa8:	5f787834 	svcpl	0x00787834
     fac:	72617375 	rsbvc	r7, r1, #-738197503	; 0xd4000001
     fb0:	00682e74 	rsbeq	r2, r8, r4, ror lr
     fb4:	73000005 	movwvc	r0, #5
     fb8:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
     fbc:	78783466 	ldmdavc	r8!, {r1, r2, r5, r6, sl, ip, sp}^
     fc0:	6970675f 	ldmdbvs	r0!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, sp, lr}^
     fc4:	00682e6f 	rsbeq	r2, r8, pc, ror #28
     fc8:	6c000005 	stcvs	0, cr0, [r0], {5}
     fcc:	2e6b636f 	cdpcs	3, 6, cr6, cr11, cr15, {3}
     fd0:	00030068 	andeq	r0, r3, r8, rrx
     fd4:	79745f00 	ldmdbvc	r4!, {r8, r9, sl, fp, ip, lr}^
     fd8:	2e736570 	mrccs	5, 3, r6, cr3, cr0, {3}
     fdc:	00030068 	andeq	r0, r3, r8, rrx
     fe0:	64747300 	ldrbtvs	r7, [r4], #-768	; 0xfffffd00
     fe4:	2e666564 	cdpcs	5, 6, cr6, cr6, cr4, {3}
     fe8:	00060068 	andeq	r0, r6, r8, rrx
     fec:	65657200 	strbvs	r7, [r5, #-512]!	; 0xfffffe00
     ff0:	682e746e 	stmdavs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
     ff4:	00000300 	andeq	r0, r0, r0, lsl #6
     ff8:	02050000 	andeq	r0, r5, #0
     ffc:	20002298 	mulcs	r0, r8, r2
    1000:	3e011203 	cdpcc	2, 0, cr1, cr1, cr3, {0}
    1004:	a293c092 	addsge	ip, r3, #146	; 0x92
    1008:	691d874b 	ldmdbvs	sp, {r0, r1, r3, r6, r8, r9, sl, pc}
    100c:	3f3d3ed9 	svccc	0x003d3ed9
    1010:	4d4b5b59 	vstrmi	d21, [fp, #-356]	; 0xfffffe9c
    1014:	3d4b7875 	stclcc	8, cr7, [fp, #-468]	; 0xfffffe2c
    1018:	764b3e3d 			; <UNDEFINED> instruction: 0x764b3e3d
    101c:	660b0359 			; <UNDEFINED> instruction: 0x660b0359
    1020:	3d3d3d59 	ldccc	13, cr3, [sp, #-356]!	; 0xfffffe9c
    1024:	3c09033d 	stccc	3, cr0, [r9], {61}	; 0x3d
    1028:	3d3d3d3d 	ldccc	13, cr3, [sp, #-244]!	; 0xffffff0c
    102c:	675b3f4d 	ldrbvs	r3, [fp, -sp, asr #30]
    1030:	a0685c08 	rsbge	r5, r8, r8, lsl #24
    1034:	b0213068 	eorlt	r3, r1, r8, rrx
    1038:	2a91234d 	bcs	fe449d74 <APBAHBPrescTable+0xde4475a8>
    103c:	754f2151 	strbvc	r2, [pc, #-337]	; ef3 <startup-0x1ffff10d>
    1040:	01040200 	mrseq	r0, R12_usr
    1044:	4b064a06 	blmi	193864 <startup-0x1fe6c79c>
    1048:	00bb4e32 	adcseq	r4, fp, r2, lsr lr
    104c:	06010402 	streq	r0, [r1], -r2, lsl #8
    1050:	0402004a 	streq	r0, [r2], #-74	; 0xffffffb6
    1054:	02006602 	andeq	r6, r0, #2097152	; 0x200000
    1058:	00580404 	subseq	r0, r8, r4, lsl #8
    105c:	06040402 	streq	r0, [r4], -r2, lsl #8
    1060:	0402009f 	streq	r0, [r2], #-159	; 0xffffff61
    1064:	213f8304 	teqcs	pc, r4, lsl #6
    1068:	005e2cf3 	ldrsheq	r2, [lr], #-195	; 0xffffff3d
    106c:	21010402 	tstcs	r1, r2, lsl #8
    1070:	5d594b4f 	vldrpl	d20, [r9, #-316]	; 0xfffffec4
    1074:	0702834b 	streq	r8, [r2, -fp, asr #6]
    1078:	Address 0x00001078 is out of bounds.


Disassembly of section .debug_str:

00000000 <.debug_str>:
       0:	706c6c70 	rsbvc	r6, ip, r0, ror ip
       4:	45535200 	ldrbmi	r5, [r3, #-512]	; 0xfffffe00
       8:	44455652 	strbmi	r5, [r5], #-1618	; 0xfffff9ae
       c:	54520031 	ldrbpl	r0, [r2], #-49	; 0xffffffcf
      10:	4b575f43 	blmi	15d7d24 <startup-0x1ea282dc>
      14:	495f5055 	ldmdbmi	pc, {r0, r2, r4, r6, ip, lr}^	; <UNPREDICTABLE>
      18:	006e5152 	rsbeq	r5, lr, r2, asr r1
      1c:	49545845 	ldmdbmi	r4, {r0, r2, r6, fp, ip, lr}^
      20:	52495f32 	subpl	r5, r9, #50, 30	; 0xc8
      24:	44006e51 	strmi	r6, [r0], #-3665	; 0xfffff1af
      28:	5f31414d 	svcpl	0x0031414d
      2c:	65727453 	ldrbvs	r7, [r2, #-1107]!	; 0xfffffbad
      30:	5f366d61 	svcpl	0x00366d61
      34:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
      38:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
      3c:	50555f38 	subspl	r5, r5, r8, lsr pc
      40:	4d49545f 	cfstrdmi	mvd5, [r9, #-380]	; 0xfffffe84
      44:	495f3331 	ldmdbmi	pc, {r0, r4, r5, r8, r9, ip, sp}^	; <UNPREDICTABLE>
      48:	006e5152 	rsbeq	r5, lr, r2, asr r1
      4c:	494c4c50 	stmdbmi	ip, {r4, r6, sl, fp, lr}^
      50:	46435332 			; <UNDEFINED> instruction: 0x46435332
      54:	52005247 	andpl	r5, r0, #1879048196	; 0x70000004
      58:	495f4343 	ldmdbmi	pc, {r0, r1, r6, r8, r9, lr}^	; <UNPREDICTABLE>
      5c:	4c435332 	mcrrmi	3, 3, r5, r3, cr2
      60:	6e6f434b 	cdpvs	3, 6, cr4, cr15, cr11, {2}
      64:	00676966 	rsbeq	r6, r7, r6, ror #18
      68:	5f434352 	svcpl	0x00434352
      6c:	43746547 	cmnmi	r4, #297795584	; 0x11c00000
      70:	6b636f6c 	blvs	18dbe28 <startup-0x1e7241d8>
      74:	65724673 	ldrbvs	r4, [r2, #-1651]!	; 0xfffff98d
      78:	4d440071 	stclmi	0, cr0, [r4, #-452]	; 0xfffffe3c
      7c:	535f3241 	cmppl	pc, #268435460	; 0x10000004
      80:	61657274 	smcvs	22308	; 0x5724
      84:	495f316d 	ldmdbmi	pc, {r0, r2, r3, r5, r6, r8, ip, sp}^	; <UNPREDICTABLE>
      88:	006e5152 	rsbeq	r5, lr, r2, asr r1
      8c:	4b4c4348 	blmi	1310db4 <startup-0x1ecef24c>
      90:	6572465f 	ldrbvs	r4, [r2, #-1631]!	; 0xfffff9a1
      94:	6e657571 	mcrvs	5, 3, r7, cr5, cr1, {3}
      98:	47007963 	strmi	r7, [r0, -r3, ror #18]
      9c:	5f4f4950 	svcpl	0x004f4950
      a0:	64507550 	ldrbvs	r7, [r0], #-1360	; 0xfffffab0
      a4:	504f4e5f 	subpl	r4, pc, pc, asr lr	; <UNPREDICTABLE>
      a8:	004c4c55 	subeq	r4, ip, r5, asr ip
      ac:	524f5456 	subpl	r5, pc, #1442840576	; 0x56000000
      b0:	49505300 	ldmdbmi	r0, {r8, r9, ip, lr}^
      b4:	52495f33 	subpl	r5, r9, #51, 30	; 0xcc
      b8:	46006e51 			; <UNDEFINED> instruction: 0x46006e51
      bc:	4853414c 	ldmdami	r3, {r2, r3, r6, r8, lr}^
      c0:	5152495f 	cmppl	r2, pc, asr r9
      c4:	7061006e 	rsbvc	r0, r1, lr, rrx
      c8:	6e695f70 	mcrvs	15, 3, r5, cr9, cr0, {3}
      cc:	44007469 	strmi	r7, [r0], #-1129	; 0xfffffb97
      d0:	5f494d43 	svcpl	0x00494d43
      d4:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
      d8:	43435200 	movtmi	r5, #12800	; 0x3200
      dc:	4250415f 	subsmi	r4, r0, #-1073741801	; 0xc0000017
      e0:	72655032 	rsbvc	r5, r5, #50	; 0x32
      e4:	43687069 	cmnmi	r8, #105	; 0x69
      e8:	6b636f6c 	blvs	18dbea0 <startup-0x1e724160>
      ec:	6f4d504c 	svcvs	0x004d504c
      f0:	6d436564 	cfstr64vs	mvdx6, [r3, #-400]	; 0xfffffe70
      f4:	43520064 	cmpmi	r2, #100	; 0x64
      f8:	48415f43 	stmdami	r1, {r0, r1, r6, r8, r9, sl, fp, ip, lr}^
      fc:	65503242 	ldrbvs	r3, [r0, #-578]	; 0xfffffdbe
     100:	68706972 	ldmdavs	r0!, {r1, r4, r5, r6, r8, fp, sp, lr}^
     104:	636f6c43 	cmnvs	pc, #17152	; 0x4300
     108:	4d504c6b 	ldclmi	12, cr4, [r0, #-428]	; 0xfffffe54
     10c:	4365646f 	cmnmi	r5, #1862270976	; 0x6f000000
     110:	4700646d 	strmi	r6, [r0, -sp, ror #8]
     114:	4f4f4950 	svcmi	0x004f4950
     118:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0xfffff6ac
     11c:	7079545f 	rsbsvc	r5, r9, pc, asr r4
     120:	66654465 	strbtvs	r4, [r5], -r5, ror #8
     124:	43435200 	movtmi	r5, #12800	; 0x3200
     128:	4250415f 	subsmi	r4, r0, #-1073741801	; 0xc0000017
     12c:	72655031 	rsbvc	r5, r5, #49	; 0x31
     130:	52687069 	rsbpl	r7, r8, #105	; 0x69
     134:	74657365 	strbtvc	r7, [r5], #-869	; 0xfffffc9b
     138:	00646d43 	rsbeq	r6, r4, r3, asr #26
     13c:	5f434352 	svcpl	0x00434352
     140:	65646f4d 	strbvs	r6, [r4, #-3917]!	; 0xfffff0b3
     144:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
     148:	52495f32 	subpl	r5, r9, #50, 30	; 0xc8
     14c:	52006e51 	andpl	r6, r0, #1296	; 0x510
     150:	525f4343 	subspl	r4, pc, #201326593	; 0xc000001
     154:	4c434354 	mcrrmi	3, 5, r4, r3, cr4
     158:	756f534b 	strbvc	r5, [pc, #-843]!	; fffffe15 <APBAHBPrescTable+0xdfffd649>
     15c:	00656372 	rsbeq	r6, r5, r2, ror r3
     160:	5f434352 	svcpl	0x00434352
     164:	32424841 	subcc	r4, r2, #4259840	; 0x410000
     168:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
     16c:	6c436870 	mcrrvs	8, 7, r6, r3, cr0
     170:	436b636f 	cmnmi	fp, #-1140850687	; 0xbc000001
     174:	4900646d 	stmdbmi	r0, {r0, r2, r3, r5, r6, sl, sp, lr}
     178:	00525043 	subseq	r5, r2, r3, asr #32
     17c:	5f434352 	svcpl	0x00434352
     180:	434d4954 	movtmi	r4, #55636	; 0xd954
     184:	72504b4c 	subsvc	r4, r0, #76, 22	; 0x13000
     188:	6f437365 	svcvs	0x00437365
     18c:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
     190:	43435200 	movtmi	r5, #12800	; 0x3200
     194:	4c4c505f 	mcrrmi	0, 5, r5, ip, cr15
     198:	43533249 	cmpmi	r3, #-1879048188	; 0x90000004
     19c:	5200646d 	andpl	r6, r0, #1828716544	; 0x6d000000
     1a0:	485f4343 	ldmdami	pc, {r0, r1, r6, r8, r9, lr}^	; <UNPREDICTABLE>
     1a4:	004b4c43 	subeq	r4, fp, r3, asr #24
     1a8:	324e4143 	subcc	r4, lr, #-1073741808	; 0xc0000010
     1ac:	3058525f 	subscc	r5, r8, pc, asr r2
     1b0:	5152495f 	cmppl	r2, pc, asr r9
     1b4:	5355006e 	cmppl	r5, #110	; 0x6e
     1b8:	36545241 	ldrbcc	r5, [r4], -r1, asr #4
     1bc:	5152495f 	cmppl	r2, pc, asr r9
     1c0:	6974006e 	ldmdbvs	r4!, {r1, r2, r3, r5, r6}^
     1c4:	6c5f656d 	cfldr64vs	mvdx6, [pc], {109}	; 0x6d
     1c8:	006d7261 	rsbeq	r7, sp, r1, ror #4
     1cc:	69755f5f 	ldmdbvs	r5!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, ip, lr}^
     1d0:	5f38746e 	svcpl	0x0038746e
     1d4:	50530074 	subspl	r0, r3, r4, ror r0
     1d8:	495f3249 	ldmdbmi	pc, {r0, r3, r6, r9, ip, sp}^	; <UNPREDICTABLE>
     1dc:	006e5152 	rsbeq	r5, lr, r2, asr r1
     1e0:	384d4954 	stmdacc	sp, {r2, r4, r6, r8, fp, lr}^
     1e4:	4b52425f 	blmi	1490b68 <startup-0x1eb6f498>
     1e8:	4d49545f 	cfstrdmi	mvd5, [r9, #-380]	; 0xfffffe84
     1ec:	495f3231 	ldmdbmi	pc, {r0, r4, r5, r9, ip, sp}^	; <UNPREDICTABLE>
     1f0:	006e5152 	rsbeq	r5, lr, r2, asr r1
     1f4:	32424841 	subcc	r4, r2, #4259840	; 0x410000
     1f8:	4e45504c 	cdpmi	0, 4, cr5, cr5, cr12, {2}
     1fc:	50470052 	subpl	r0, r7, r2, asr r0
     200:	505f4f49 	subspl	r4, pc, r9, asr #30
     204:	5f645075 	svcpl	0x00645075
     208:	4e574f44 	cdpmi	15, 5, cr4, cr7, cr4, {2}
     20c:	52494100 	subpl	r4, r9, #0, 2
     210:	52005243 	andpl	r5, r0, #805306372	; 0x30000004
     214:	535f4343 	cmppl	pc, #201326593	; 0xc000001
     218:	4c504941 	mrrcmi	9, 4, r4, r0, cr1	; <UNPREDICTABLE>
     21c:	4941534c 	stmdbmi	r1, {r2, r3, r6, r8, r9, ip, lr}^
     220:	446b6c43 	strbtmi	r6, [fp], #-3139	; 0xfffff3bd
     224:	6f437669 	svcvs	0x00437669
     228:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
     22c:	696e6900 	stmdbvs	lr!, {r8, fp, sp, lr}^
     230:	50475f74 	subpl	r5, r7, r4, ror pc
     234:	505f4f49 	subspl	r4, pc, r9, asr #30
     238:	7374726f 	cmnvc	r4, #-268435450	; 0xf0000006
     23c:	55504300 	ldrbpl	r4, [r0, #-768]	; 0xfffffd00
     240:	53004449 	movwpl	r4, #1097	; 0x449
     244:	69547379 	ldmdbvs	r4, {r0, r3, r4, r5, r6, r8, r9, ip, sp, lr}^
     248:	485f6b63 	ldmdami	pc, {r0, r1, r5, r6, r8, r9, fp, sp, lr}^	; <UNPREDICTABLE>
     24c:	6c646e61 	stclvs	14, cr6, [r4], #-388	; 0xfffffe7c
     250:	52007265 	andpl	r7, r0, #1342177286	; 0x50000006
     254:	4c5f4343 	mrrcmi	3, 4, r4, pc, cr3	; <UNPREDICTABLE>
     258:	43434454 	movtmi	r4, #13396	; 0x3454
     25c:	69444b4c 	stmdbvs	r4, {r2, r3, r6, r8, r9, fp, lr}^
     260:	6e6f4376 	mcrvs	3, 3, r4, cr15, cr6, {3}
     264:	00676966 	rsbeq	r6, r7, r6, ror #18
     268:	32414d44 	subcc	r4, r1, #68, 26	; 0x1100
     26c:	7274535f 	rsbsvc	r5, r4, #2080374785	; 0x7c000001
     270:	356d6165 	strbcc	r6, [sp, #-357]!	; 0xfffffe9b
     274:	5152495f 	cmppl	r2, pc, asr r9
     278:	5047006e 	subpl	r0, r7, lr, rrx
     27c:	4d5f4f49 	ldclmi	15, cr4, [pc, #-292]	; 160 <startup-0x1ffffea0>
     280:	5f65646f 	svcpl	0x0065646f
     284:	52004641 	andpl	r4, r0, #68157440	; 0x4100000
     288:	415f4343 	cmpmi	pc, r3, asr #6
     28c:	50334248 	eorspl	r4, r3, r8, asr #4
     290:	70697265 	rsbvc	r7, r9, r5, ror #4
     294:	73655268 	cmnvc	r5, #104, 4	; 0x80000006
     298:	6d437465 	cfstrdvs	mvd7, [r3, #-404]	; 0xfffffe6c
     29c:	49540064 	ldmdbmi	r4, {r2, r5, r6}^
     2a0:	545f314d 	ldrbpl	r3, [pc], #-333	; 2a8 <startup-0x1ffffd58>
     2a4:	435f4752 	cmpmi	pc, #21495808	; 0x1480000
     2a8:	545f4d4f 	ldrbpl	r4, [pc], #-3407	; 2b0 <startup-0x1ffffd50>
     2ac:	31314d49 	teqcc	r1, r9, asr #26
     2b0:	5152495f 	cmppl	r2, pc, asr r9
     2b4:	5047006e 	subpl	r0, r7, lr, rrx
     2b8:	4d5f4f49 	ldclmi	15, cr4, [pc, #-292]	; 19c <startup-0x1ffffe64>
     2bc:	5f65646f 	svcpl	0x0065646f
     2c0:	52004e41 	andpl	r4, r0, #1040	; 0x410
     2c4:	505f4343 	subspl	r4, pc, r3, asr #6
     2c8:	324b4c43 	subcc	r4, fp, #17152	; 0x4300
     2cc:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
     2d0:	63006769 	movwvs	r6, #1897	; 0x769
     2d4:	72746e6f 	rsbsvc	r6, r4, #1776	; 0x6f0
     2d8:	69626c6f 	stmdbvs	r2!, {r0, r1, r2, r3, r5, r6, sl, fp, sp, lr}^
     2dc:	52007374 	andpl	r7, r0, #116, 6	; 0xd0000001
     2e0:	445f4343 	ldrbmi	r4, [pc], #-835	; 2e8 <startup-0x1ffffd18>
     2e4:	696e4965 	stmdbvs	lr!, {r0, r2, r5, r6, r8, fp, lr}^
     2e8:	43520074 	cmpmi	r2, #116	; 0x74
     2ec:	41535f43 	cmpmi	r3, r3, asr #30
     2f0:	6f6c4249 	svcvs	0x006c4249
     2f4:	43426b63 	movtmi	r6, #11107	; 0x2b63
     2f8:	6f434b4c 	svcvs	0x00434b4c
     2fc:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
     300:	42504100 	subsmi	r4, r0, #0, 2
     304:	524e4532 	subpl	r4, lr, #209715200	; 0xc800000
     308:	43435200 	movtmi	r5, #12800	; 0x3200
     30c:	7465475f 	strbtvc	r4, [r5], #-1887	; 0xfffff8a1
     310:	43535953 	cmpmi	r3, #1359872	; 0x14c000
     314:	6f534b4c 	svcvs	0x00534b4c
     318:	65637275 	strbvs	r7, [r3, #-629]!	; 0xfffffd8b
     31c:	42484100 	submi	r4, r8, #0, 2
     320:	45504c31 	ldrbmi	r4, [r0, #-3121]	; 0xfffff3cf
     324:	5200524e 	andpl	r5, r0, #-536870908	; 0xe0000004
     328:	505f4343 	subspl	r4, pc, r3, asr #6
     32c:	32494c4c 	subcc	r4, r9, #76, 24	; 0x4c00
     330:	76694453 			; <UNDEFINED> instruction: 0x76694453
     334:	79530051 	ldmdbvc	r3, {r0, r4, r6}^
     338:	63695473 	cmnvs	r9, #1929379840	; 0x73000000
     33c:	52495f6b 	subpl	r5, r9, #428	; 0x1ac
     340:	52006e51 	andpl	r6, r0, #1296	; 0x510
     344:	415f4343 	cmpmi	pc, r3, asr #6
     348:	50334248 	eorspl	r4, r3, r8, asr #4
     34c:	70697265 	rsbvc	r7, r9, r5, ror #4
     350:	53550068 	cmppl	r5, #104	; 0x68
     354:	33545241 	cmpcc	r4, #268435460	; 0x10000004
     358:	5152495f 	cmppl	r2, pc, asr r9
     35c:	4344006e 	movtmi	r0, #16494	; 0x406e
     360:	4746434b 	strbmi	r4, [r6, -fp, asr #6]
     364:	43490052 	movtmi	r0, #36946	; 0x9052
     368:	52005253 	andpl	r5, r0, #805306373	; 0x30000005
     36c:	4d5f4343 	ldclmi	3, cr4, [pc, #-268]	; 268 <startup-0x1ffffd98>
     370:	44324f43 	ldrtmi	r4, [r2], #-3907	; 0xfffff0bd
     374:	47007669 	strmi	r7, [r0, -r9, ror #12]
     378:	5f4f4950 	svcpl	0x004f4950
     37c:	7079544f 	rsbsvc	r5, r9, pc, asr #8
     380:	444f5f65 	strbmi	r5, [pc], #-3941	; 388 <startup-0x1ffffc78>
     384:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
     388:	6e495f4f 	cdpvs	15, 4, cr5, cr9, cr15, {2}
     38c:	79547469 	ldmdbvc	r4, {r0, r3, r5, r6, sl, ip, sp, lr}^
     390:	65446570 	strbvs	r6, [r4, #-1392]	; 0xfffffa90
     394:	43520066 	cmpmi	r2, #102	; 0x66
     398:	59535f43 	ldmdbpl	r3, {r0, r1, r6, r8, r9, sl, fp, ip, lr}^
     39c:	4b4c4353 	blmi	13110f0 <startup-0x1eceef10>
     3a0:	72756f53 	rsbsvc	r6, r5, #332	; 0x14c
     3a4:	44006563 	strmi	r6, [r0], #-1379	; 0xfffffa9d
     3a8:	5f31414d 	svcpl	0x0031414d
     3ac:	65727453 	ldrbvs	r7, [r2, #-1107]!	; 0xfffffbad
     3b0:	5f326d61 	svcpl	0x00326d61
     3b4:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     3b8:	43435200 	movtmi	r5, #12800	; 0x3200
     3bc:	4c4c505f 	mcrrmi	0, 5, r5, ip, cr15
     3c0:	72756f53 	rsbsvc	r6, r5, #332	; 0x14c
     3c4:	52006563 	andpl	r6, r0, #415236096	; 0x18c00000
     3c8:	415f4343 	cmpmi	pc, r3, asr #6
     3cc:	50314250 	eorspl	r4, r1, r0, asr r2
     3d0:	70697265 	rsbvc	r7, r9, r5, ror #4
     3d4:	6f6c4368 	svcvs	0x006c4368
     3d8:	6d436b63 	vstrvs	d22, [r3, #-396]	; 0xfffffe74
     3dc:	45520064 	ldrbmi	r0, [r2, #-100]	; 0xffffff9c
     3e0:	56524553 			; <UNDEFINED> instruction: 0x56524553
     3e4:	00304445 	eorseq	r4, r0, r5, asr #8
     3e8:	45534552 	ldrbmi	r4, [r3, #-1362]	; 0xfffffaae
     3ec:	44455652 	strbmi	r5, [r5], #-1618	; 0xfffff9ae
     3f0:	6e750031 	mrcvs	0, 3, r0, cr5, cr1, {1}
     3f4:	6e676973 			; <UNDEFINED> instruction: 0x6e676973
     3f8:	63206465 			; <UNDEFINED> instruction: 0x63206465
     3fc:	00726168 	rsbseq	r6, r2, r8, ror #2
     400:	32414d44 	subcc	r4, r1, #68, 26	; 0x1100
     404:	7274535f 	rsbsvc	r5, r4, #2080374785	; 0x7c000001
     408:	346d6165 	strbtcc	r6, [sp], #-357	; 0xfffffe9b
     40c:	5152495f 	cmppl	r2, pc, asr r9
     410:	4552006e 	ldrbmi	r0, [r2, #-110]	; 0xffffff92
     414:	56524553 			; <UNDEFINED> instruction: 0x56524553
     418:	00344445 	eorseq	r4, r4, r5, asr #8
     41c:	45534552 	ldrbmi	r4, [r3, #-1362]	; 0xfffffaae
     420:	44455652 	strbmi	r5, [r5], #-1618	; 0xfffff9ae
     424:	45520035 	ldrbmi	r0, [r2, #-53]	; 0xffffffcb
     428:	56524553 			; <UNDEFINED> instruction: 0x56524553
     42c:	00364445 	eorseq	r4, r6, r5, asr #8
     430:	52424149 	subpl	r4, r2, #1073741842	; 0x40000012
     434:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
     438:	544f5f4f 	strbpl	r5, [pc], #-3919	; 440 <startup-0x1ffffbc0>
     43c:	5f657079 	svcpl	0x00657079
     440:	49005050 	stmdbmi	r0, {r4, r6, ip, lr}
     444:	5f314332 	svcpl	0x00314332
     448:	495f5245 	ldmdbmi	pc, {r0, r2, r6, r9, ip, lr}^	; <UNPREDICTABLE>
     44c:	006e5152 	rsbeq	r5, lr, r2, asr r1
     450:	324e4143 	subcc	r4, lr, #-1073741808	; 0xc0000010
     454:	4543535f 	strbmi	r5, [r3, #-863]	; 0xfffffca1
     458:	5152495f 	cmppl	r2, pc, asr r9
     45c:	4352006e 	cmpmi	r2, #110	; 0x6e
     460:	534c5f43 	movtpl	r5, #53059	; 0xcf43
     464:	6e6f4345 	cdpvs	3, 6, cr4, cr15, cr5, {2}
     468:	00676966 	rsbeq	r6, r7, r6, ror #18
     46c:	45534552 	ldrbmi	r4, [r3, #-1362]	; 0xfffffaae
     470:	44455652 	strbmi	r5, [r5], #-1618	; 0xfffff9ae
     474:	45520032 	ldrbmi	r0, [r2, #-50]	; 0xffffffce
     478:	56524553 			; <UNDEFINED> instruction: 0x56524553
     47c:	00334445 	eorseq	r4, r3, r5, asr #8
     480:	354d4954 	strbcc	r4, [sp, #-2388]	; 0xfffff6ac
     484:	5152495f 	cmppl	r2, pc, asr r9
     488:	7355006e 	cmpvc	r5, #110	; 0x6e
     48c:	46656761 	strbtmi	r6, [r5], -r1, ror #14
     490:	746c7561 	strbtvc	r7, [ip], #-1377	; 0xfffffa9f
     494:	5152495f 	cmppl	r2, pc, asr r9
     498:	6574006e 	ldrbvs	r0, [r4, #-110]!	; 0xffffff92
     49c:	00347473 	eorseq	r7, r4, r3, ror r4
     4a0:	5f424353 	svcpl	0x00424353
     4a4:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0xfffff6ac
     4a8:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
     4ac:	5075504f 	rsbspl	r5, r5, pc, asr #32
     4b0:	79545f64 	ldmdbvc	r4, {r2, r5, r6, r8, r9, sl, fp, ip, lr}^
     4b4:	65446570 	strbvs	r6, [r4, #-1392]	; 0xfffffa90
     4b8:	46440066 	strbmi	r0, [r4], -r6, rrx
     4bc:	41005253 	tstmi	r0, r3, asr r2
     4c0:	52314248 	eorspl	r4, r1, #72, 4	; 0x80000004
     4c4:	00525453 	subseq	r5, r2, r3, asr r4
     4c8:	5f434352 	svcpl	0x00434352
     4cc:	32425041 	subcc	r5, r2, #65	; 0x41
     4d0:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
     4d4:	65526870 	ldrbvs	r6, [r2, #-2160]	; 0xfffff790
     4d8:	43746573 	cmnmi	r4, #482344960	; 0x1cc00000
     4dc:	7200646d 	andvc	r6, r0, #1828716544	; 0x6d000000
     4e0:	72757465 	rsbsvc	r7, r5, #1694498816	; 0x65000000
     4e4:	646f436e 	strbtvs	r4, [pc], #-878	; 4ec <startup-0x1ffffb14>
     4e8:	43520065 	cmpmi	r2, #101	; 0x65
     4ec:	48415f43 	stmdami	r1, {r0, r1, r6, r8, r9, sl, fp, ip, lr}^
     4f0:	65503342 	ldrbvs	r3, [r0, #-834]	; 0xfffffcbe
     4f4:	68706972 	ldmdavs	r0!, {r1, r4, r5, r6, r8, fp, sp, lr}^
     4f8:	636f6c43 	cmnvs	pc, #17152	; 0x4300
     4fc:	4d504c6b 	ldclmi	12, cr4, [r0, #-428]	; 0xfffffe54
     500:	4365646f 	cmnmi	r5, #1862270976	; 0x6f000000
     504:	5f00646d 	svcpl	0x0000646d
     508:	6e69755f 	mcrvs	5, 3, r7, cr9, cr15, {2}
     50c:	5f363174 	svcpl	0x00363174
     510:	48410074 	stmdami	r1, {r2, r4, r5, r6}^
     514:	4e453242 	cdpmi	2, 4, cr3, cr5, cr2, {2}
     518:	43500052 	cmpmi	r0, #82	; 0x52
     51c:	5f324b4c 	svcpl	0x00324b4c
     520:	71657246 	cmnvc	r5, r6, asr #4
     524:	636e6575 	cmnvs	lr, #490733568	; 0x1d400000
     528:	50470079 	subpl	r0, r7, r9, ror r0
     52c:	4c5f4f49 	mrrcmi	15, 4, r4, pc, cr9	; <UNPREDICTABLE>
     530:	535f776f 	cmppl	pc, #29097984	; 0x1bc0000
     534:	64656570 	strbtvs	r6, [r5], #-1392	; 0xfffffa90
     538:	4e414300 	cdpmi	3, 4, cr4, cr1, cr0, {0}
     53c:	58525f31 	ldmdapl	r2, {r0, r4, r5, r8, r9, sl, fp, ip, lr}^
     540:	52495f30 	subpl	r5, r9, #48, 30	; 0xc0
     544:	43006e51 	movwmi	r6, #3665	; 0xe51
     548:	73555c3a 	cmpvc	r5, #14848	; 0x3a00
     54c:	5c737265 	lfmpl	f7, 2, [r3], #-404	; 0xfffffe6c
     550:	6d616441 	cfstrdvs	mvd6, [r1, #-260]!	; 0xfffffefc
     554:	6e4f5c74 	mcrvs	12, 2, r5, cr15, cr4, {3}
     558:	69724465 	ldmdbvs	r2!, {r0, r2, r5, r6, sl, lr}^
     55c:	445c6576 	ldrbmi	r6, [ip], #-1398	; 0xfffffa8a
     560:	6d756b6f 	fldmdbxvs	r5!, {d22-d76}	;@ Deprecated
     564:	5c746e65 	ldclpl	14, cr6, [r4], #-404	; 0xfffffe6c
     568:	48746947 	ldmdami	r4!, {r0, r1, r2, r6, r8, fp, sp, lr}^
     56c:	445c6275 	ldrbmi	r6, [ip], #-629	; 0xfffffd8b
     570:	39325441 	ldmdbcc	r2!, {r0, r6, sl, ip, lr}
     574:	614c2d30 	cmpvs	ip, r0, lsr sp
     578:	79736d72 	ldmdbvc	r3!, {r1, r4, r5, r6, r8, sl, fp, sp, lr}^
     57c:	6d657473 	cfstrdvs	mvd7, [r5, #-460]!	; 0xfffffe34
     580:	646f6b5c 	strbtvs	r6, [pc], #-2908	; 588 <startup-0x1ffffa78>
     584:	6f6f445c 	svcvs	0x006f445c
     588:	46480072 			; <UNDEFINED> instruction: 0x46480072
     58c:	47005253 	smlsdmi	r0, r3, r2, r5
     590:	5f4f4950 	svcpl	0x004f4950
     594:	64616572 	strbtvs	r6, [r1], #-1394	; 0xfffffa8e
     598:	43435200 	movtmi	r5, #12800	; 0x3200
     59c:	5359535f 	cmppl	r9, #2080374785	; 0x7c000001
     5a0:	004b4c43 	subeq	r4, fp, r3, asr #24
     5a4:	4b4c4350 	blmi	13112ec <startup-0x1eceed14>
     5a8:	72465f31 	subvc	r5, r6, #49, 30	; 0xc4
     5ac:	65757165 	ldrbvs	r7, [r5, #-357]!	; 0xfffffe9b
     5b0:	0079636e 	rsbseq	r6, r9, lr, ror #6
     5b4:	4d4c4c50 	stclmi	12, cr4, [ip, #-320]	; 0xfffffec0
     5b8:	4c4c5000 	marmi	acc0, r5, ip
     5bc:	4c50004e 	mrrcmi	0, 4, r0, r0, cr14	; <UNPREDICTABLE>
     5c0:	5000504c 	andpl	r5, r0, ip, asr #32
     5c4:	00514c4c 	subseq	r4, r1, ip, asr #24
     5c8:	5f434352 	svcpl	0x00434352
     5cc:	4349534c 	movtmi	r5, #37708	; 0x934c
     5d0:	7000646d 	andvc	r6, r0, sp, ror #8
     5d4:	6f736c6c 	svcvs	0x00736c6c
     5d8:	65637275 	strbvs	r7, [r3, #-629]!	; 0xfffffd8b
     5dc:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
     5e0:	52495f34 	subpl	r5, r9, #52, 30	; 0xd0
     5e4:	47006e51 	smlsdmi	r0, r1, lr, r6
     5e8:	4320554e 			; <UNDEFINED> instruction: 0x4320554e
     5ec:	37203939 			; <UNDEFINED> instruction: 0x37203939
     5f0:	312e322e 			; <UNDEFINED> instruction: 0x312e322e
     5f4:	31303220 	teqcc	r0, r0, lsr #4
     5f8:	30393037 	eorscc	r3, r9, r7, lsr r0
     5fc:	72282034 	eorvc	r2, r8, #52	; 0x34
     600:	61656c65 	cmnvs	r5, r5, ror #24
     604:	20296573 	eorcs	r6, r9, r3, ror r5
     608:	4d52415b 	ldfmie	f4, [r2, #-364]	; 0xfffffe94
     60c:	626d652f 	rsbvs	r6, sp, #197132288	; 0xbc00000
     610:	65646465 	strbvs	r6, [r4, #-1125]!	; 0xfffffb9b
     614:	2d372d64 	ldccs	13, cr2, [r7, #-400]!	; 0xfffffe70
     618:	6e617262 	cdpvs	2, 6, cr7, cr1, cr2, {3}
     61c:	72206863 	eorvc	r6, r0, #6488064	; 0x630000
     620:	73697665 	cmnvc	r9, #105906176	; 0x6500000
     624:	206e6f69 	rsbcs	r6, lr, r9, ror #30
     628:	32353532 	eorscc	r3, r5, #209715200	; 0xc800000
     62c:	205d3430 	subscs	r3, sp, r0, lsr r4
     630:	68746d2d 	ldmdavs	r4!, {r0, r2, r3, r5, r8, sl, fp, sp, lr}^
     634:	20626d75 	rsbcs	r6, r2, r5, ror sp
     638:	72616d2d 	rsbvc	r6, r1, #2880	; 0xb40
     63c:	613d6863 	teqvs	sp, r3, ror #16
     640:	36766d72 			; <UNDEFINED> instruction: 0x36766d72
     644:	2d206d2d 	stccs	13, cr6, [r0, #-180]!	; 0xffffff4c
     648:	6f6c666d 	svcvs	0x006c666d
     64c:	612d7461 			; <UNDEFINED> instruction: 0x612d7461
     650:	733d6962 	teqvc	sp, #1605632	; 0x188000
     654:	2074666f 	rsbscs	r6, r4, pc, ror #12
     658:	68746d2d 	ldmdavs	r4!, {r0, r2, r3, r5, r8, sl, fp, sp, lr}^
     65c:	20626d75 	rsbcs	r6, r2, r5, ror sp
     660:	72616d2d 	rsbvc	r6, r1, #2880	; 0xb40
     664:	613d6863 	teqvs	sp, r3, ror #16
     668:	36766d72 			; <UNDEFINED> instruction: 0x36766d72
     66c:	2d206d2d 	stccs	13, cr6, [r0, #-180]!	; 0xffffff4c
     670:	4f2d2067 	svcmi	0x002d2067
     674:	732d2030 			; <UNDEFINED> instruction: 0x732d2030
     678:	633d6474 	teqvs	sp, #116, 8	; 0x74000000
     67c:	52003939 	andpl	r3, r0, #933888	; 0xe4000
     680:	485f4343 	ldmdami	pc, {r0, r1, r6, r8, r9, lr}^	; <UNPREDICTABLE>
     684:	434b4c43 	movtmi	r4, #48195	; 0xbc43
     688:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
     68c:	43520067 	cmpmi	r2, #103	; 0x67
     690:	6c435f43 	mcrrvs	15, 4, r5, r3, cr3
     694:	46726165 	ldrbtmi	r6, [r2], -r5, ror #2
     698:	0067616c 	rsbeq	r6, r7, ip, ror #2
     69c:	5f434352 	svcpl	0x00434352
     6a0:	43455348 	movtmi	r5, #21320	; 0x5348
     6a4:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
     6a8:	44420067 	strbmi	r0, [r2], #-103	; 0xffffff99
     6ac:	53005243 	movwpl	r5, #579	; 0x243
     6b0:	52534348 	subspl	r4, r3, #72, 6	; 0x20000001
     6b4:	44565000 	ldrbmi	r5, [r6], #-0
     6b8:	5152495f 	cmppl	r2, pc, asr r9
     6bc:	4352006e 	cmpmi	r2, #110	; 0x6e
     6c0:	534c5f43 	movtpl	r5, #53059	; 0xcf43
     6c4:	54530045 	ldrbpl	r0, [r3], #-69	; 0xffffffbb
     6c8:	49005249 	stmdbmi	r0, {r0, r3, r6, r9, ip, lr}
     6cc:	5f314332 	svcpl	0x00314332
     6d0:	495f5645 	ldmdbmi	pc, {r0, r2, r6, r9, sl, ip, lr}^	; <UNPREDICTABLE>
     6d4:	006e5152 	rsbeq	r5, lr, r2, asr r1
     6d8:	5f434352 	svcpl	0x00434352
     6dc:	42494153 	submi	r4, r9, #-1073741804	; 0xc0000014
     6e0:	6b636f6c 	blvs	18dc498 <startup-0x1e723b68>
     6e4:	4b4c4341 	blmi	13113f0 <startup-0x1eceec10>
     6e8:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
     6ec:	73006769 	movwvc	r6, #1897	; 0x769
     6f0:	74726174 	ldrbtvc	r6, [r2], #-372	; 0xfffffe8c
     6f4:	6f637075 	svcvs	0x00637075
     6f8:	65746e75 	ldrbvs	r6, [r4, #-3701]!	; 0xfffff18b
     6fc:	43520072 	cmpmi	r2, #114	; 0x72
     700:	4c505f43 	mrrcmi	15, 4, r5, r0, cr3
     704:	4941534c 	stmdbmi	r1, {r2, r3, r6, r8, r9, ip, lr}^
     708:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
     70c:	47006769 	strmi	r6, [r0, -r9, ror #14]
     710:	5f4f4950 	svcpl	0x004f4950
     714:	65646f4d 	strbvs	r6, [r4, #-3917]!	; 0xfffff0b3
     718:	54554f5f 	ldrbpl	r4, [r5], #-3935	; 0xfffff0a1
     71c:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
     720:	43435f31 	movtmi	r5, #16177	; 0x3f31
     724:	5152495f 	cmppl	r2, pc, asr r9
     728:	4148006e 	cmpmi	r8, lr, rrx
     72c:	525f4853 	subspl	r4, pc, #5439488	; 0x530000
     730:	495f474e 	ldmdbmi	pc, {r1, r2, r3, r6, r8, r9, sl, lr}^	; <UNPREDICTABLE>
     734:	006e5152 	rsbeq	r5, lr, r2, asr r1
     738:	49545845 	ldmdbmi	r4, {r0, r2, r6, fp, ip, lr}^
     73c:	52495f31 	subpl	r5, r9, #49, 30	; 0xc4
     740:	43006e51 	movwmi	r6, #3665	; 0xe51
     744:	5f314e41 	svcpl	0x00314e41
     748:	495f5854 	ldmdbmi	pc, {r2, r4, r6, fp, ip, lr}^	; <UNPREDICTABLE>
     74c:	006e5152 	rsbeq	r5, lr, r2, asr r1
     750:	31414d44 	cmpcc	r1, r4, asr #26
     754:	7274535f 	rsbsvc	r5, r4, #2080374785	; 0x7c000001
     758:	356d6165 	strbcc	r6, [sp, #-357]!	; 0xfffffe9b
     75c:	5152495f 	cmppl	r2, pc, asr r9
     760:	4352006e 	cmpmi	r2, #110	; 0x6e
     764:	53485f43 	movtpl	r5, #36675	; 0x8f43
     768:	43520045 	cmpmi	r2, #69	; 0x45
     76c:	434d5f43 	movtmi	r5, #57155	; 0xdf43
     770:	6f43314f 	svcvs	0x0043314f
     774:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
     778:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
     77c:	52545f38 	subspl	r5, r4, #56, 30	; 0xe0
     780:	4f435f47 	svcmi	0x00435f47
     784:	49545f4d 	ldmdbmi	r4, {r0, r2, r3, r6, r8, r9, sl, fp, ip, lr}^
     788:	5f34314d 	svcpl	0x0034314d
     78c:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     790:	414d4400 	cmpmi	sp, r0, lsl #8
     794:	74535f32 	ldrbvc	r5, [r3], #-3890	; 0xfffff0ce
     798:	6d616572 	cfstr64vs	mvdx6, [r1, #-456]!	; 0xfffffe38
     79c:	52495f37 	subpl	r5, r9, #55, 30	; 0xdc
     7a0:	4f006e51 	svcmi	0x00006e51
     7a4:	465f4754 			; <UNDEFINED> instruction: 0x465f4754
     7a8:	52495f53 	subpl	r5, r9, #332	; 0x14c
     7ac:	4e006e51 	mcrmi	14, 0, r6, cr0, cr1, {2}
     7b0:	614d6e6f 	cmpvs	sp, pc, ror #28
     7b4:	62616b73 	rsbvs	r6, r1, #117760	; 0x1cc00
     7b8:	6e49656c 	cdpvs	5, 4, cr6, cr9, cr12, {3}
     7bc:	52495f74 	subpl	r5, r9, #116, 30	; 0x1d0
     7c0:	57006e51 	smlsdpl	r0, r1, lr, r6
     7c4:	5f474457 	svcpl	0x00474457
     7c8:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     7cc:	47544f00 	ldrbmi	r4, [r4, -r0, lsl #30]
     7d0:	5f53485f 	svcpl	0x0053485f
     7d4:	50554b57 	subspl	r4, r5, r7, asr fp
     7d8:	5152495f 	cmppl	r2, pc, asr r9
     7dc:	4352006e 	cmpmi	r2, #110	; 0x6e
     7e0:	50415f43 	subpl	r5, r1, r3, asr #30
     7e4:	65503242 	ldrbvs	r3, [r0, #-578]	; 0xfffffdbe
     7e8:	68706972 	ldmdavs	r0!, {r1, r4, r5, r6, r8, fp, sp, lr}^
     7ec:	636f6c43 	cmnvs	pc, #17152	; 0x4300
     7f0:	646d436b 	strbtvs	r4, [sp], #-875	; 0xfffffc95
     7f4:	43435200 	movtmi	r5, #12800	; 0x3200
     7f8:	4c4c505f 	mcrrmi	0, 5, r5, ip, cr15
     7fc:	44494153 	strbmi	r4, [r9], #-339	; 0xfffffead
     800:	00517669 	subseq	r7, r1, r9, ror #12
     804:	5f434352 	svcpl	0x00434352
     808:	534c4c50 	movtpl	r4, #52304	; 0xcc50
     80c:	69444941 	stmdbvs	r4, {r0, r6, r8, fp, lr}^
     810:	52005276 	andpl	r5, r0, #1610612743	; 0x60000007
     814:	535f4343 	cmppl	pc, #201326593	; 0xc000001
     818:	6c424941 	mcrrvs	9, 4, r4, r2, cr1	; <UNPREDICTABLE>
     81c:	426b636f 	rsbmi	r6, fp, #-1140850687	; 0xbc000001
     820:	534b4c43 	movtpl	r4, #48195	; 0xbc43
     824:	6372756f 	cmnvs	r2, #465567744	; 0x1bc00000
     828:	654d0065 	strbvs	r0, [sp, #-101]	; 0xffffff9b
     82c:	79726f6d 	ldmdbvc	r2!, {r0, r2, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
     830:	616e614d 	cmnvs	lr, sp, asr #2
     834:	656d6567 	strbvs	r6, [sp, #-1383]!	; 0xfffffa99
     838:	495f746e 	ldmdbmi	pc, {r1, r2, r3, r5, r6, sl, ip, sp, lr}^	; <UNPREDICTABLE>
     83c:	006e5152 	rsbeq	r5, lr, r2, asr r1
     840:	74737953 	ldrbtvc	r7, [r3], #-2387	; 0xfffff6ad
     844:	6f436d65 	svcvs	0x00436d65
     848:	6c436572 	cfstr64vs	mvdx6, [r3], {114}	; 0x72
     84c:	006b636f 	rsbeq	r6, fp, pc, ror #6
     850:	504d4154 	subpl	r4, sp, r4, asr r1
     854:	4154535f 	cmpmi	r4, pc, asr r3
     858:	495f504d 	ldmdbmi	pc, {r0, r2, r3, r6, ip, lr}^	; <UNPREDICTABLE>
     85c:	006e5152 	rsbeq	r5, lr, r2, asr r1
     860:	314e4143 	cmpcc	lr, r3, asr #2
     864:	4543535f 	strbmi	r5, [r3, #-863]	; 0xfffffca1
     868:	5152495f 	cmppl	r2, pc, asr r9
     86c:	5249006e 	subpl	r0, r9, #110	; 0x6e
     870:	545f6e51 	ldrbpl	r6, [pc], #-3665	; 878 <startup-0x1ffff788>
     874:	00657079 	rsbeq	r7, r5, r9, ror r0
     878:	4f495047 	svcmi	0x00495047
     87c:	646f4d5f 	strbtvs	r4, [pc], #-3423	; 884 <startup-0x1ffff77c>
     880:	4e495f65 	cdpmi	15, 4, cr5, cr9, cr5, {3}
     884:	414d4400 	cmpmi	sp, r0, lsl #8
     888:	74535f32 	ldrbvc	r5, [r3], #-3890	; 0xfffff0ce
     88c:	6d616572 	cfstr64vs	mvdx6, [r1, #-456]!	; 0xfffffe38
     890:	52495f30 	subpl	r5, r9, #48, 30	; 0xc0
     894:	52006e51 	andpl	r6, r0, #1296	; 0x510
     898:	4d5f4343 	ldclmi	3, cr4, [pc, #-268]	; 794 <startup-0x1ffff86c>
     89c:	43324f43 	teqmi	r2, #268	; 0x10c
     8a0:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
     8a4:	434c0067 	movtmi	r0, #49255	; 0xc067
     8a8:	5200524b 	andpl	r5, r0, #-1342177276	; 0xb0000004
     8ac:	495f4343 	ldmdbmi	pc, {r0, r1, r6, r8, r9, lr}^	; <UNPREDICTABLE>
     8b0:	4c435332 	mcrrmi	3, 3, r5, r3, cr2
     8b4:	756f534b 	strbvc	r5, [pc, #-843]!	; 571 <startup-0x1ffffa8f>
     8b8:	00656372 	rsbeq	r6, r5, r2, ror r3
     8bc:	4f525245 	svcmi	0x00525245
     8c0:	32490052 	subcc	r0, r9, #82	; 0x52
     8c4:	455f3243 	ldrbmi	r3, [pc, #-579]	; 689 <startup-0x1ffff977>
     8c8:	52495f52 	subpl	r5, r9, #328	; 0x148
     8cc:	6d006e51 	stcvs	14, cr6, [r0, #-324]	; 0xfffffebc
     8d0:	63695473 	cmnvs	r9, #1929379840	; 0x73000000
     8d4:	5200736b 	andpl	r7, r0, #-1409286143	; 0xac000001
     8d8:	505f4343 	subspl	r4, pc, r3, asr #6
     8dc:	314b4c43 	cmpcc	fp, r3, asr #24
     8e0:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
     8e4:	4f006769 	svcmi	0x00006769
     8e8:	45455053 	strbmi	r5, [r5, #-83]	; 0xffffffad
     8ec:	42005244 	andmi	r5, r0, #68, 4	; 0x40000004
     8f0:	61467375 	hvcvs	26421	; 0x6735
     8f4:	5f746c75 	svcpl	0x00746c75
     8f8:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     8fc:	63697400 	cmnvs	r9, #0, 8
     900:	5000736b 	andpl	r7, r0, fp, ror #6
     904:	46434c4c 	strbmi	r4, [r3], -ip, asr #24
     908:	55005247 	strpl	r5, [r0, #-583]	; 0xfffffdb9
     90c:	35545241 	ldrbcc	r5, [r4, #-577]	; 0xfffffdbf
     910:	5152495f 	cmppl	r2, pc, asr r9
     914:	4954006e 	ldmdbmi	r4, {r1, r2, r3, r5, r6}^
     918:	425f314d 	subsmi	r3, pc, #1073741843	; 0x40000013
     91c:	545f4b52 	ldrbpl	r4, [pc], #-2898	; 924 <startup-0x1ffff6dc>
     920:	5f394d49 	svcpl	0x00394d49
     924:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     928:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
     92c:	544f5f4f 	strbpl	r5, [pc], #-3919	; 934 <startup-0x1ffff6cc>
     930:	00657079 	rsbeq	r7, r5, r9, ror r0
     934:	69755f5f 	ldmdbvs	r5!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, ip, lr}^
     938:	3233746e 	eorscc	r7, r3, #1845493760	; 0x6e000000
     93c:	4100745f 	tstmi	r0, pc, asr r4
     940:	48414250 	stmdami	r1, {r4, r6, r9, lr}^
     944:	65725042 	ldrbvs	r5, [r2, #-66]!	; 0xffffffbe
     948:	61546373 	cmpvs	r4, r3, ror r3
     94c:	00656c62 	rsbeq	r6, r5, r2, ror #24
     950:	4f495047 	svcmi	0x00495047
     954:	64654d5f 	strbtvs	r4, [r5], #-3423	; 0xfffff2a1
     958:	5f6d7569 	svcpl	0x006d7569
     95c:	65657053 	strbvs	r7, [r5, #-83]!	; 0xffffffad
     960:	43520064 	cmpmi	r2, #100	; 0x64
     964:	41535f43 	cmpmi	r3, r3, asr #30
     968:	4c4c5049 	mcrrmi	0, 4, r5, ip, cr9
     96c:	43533249 	cmpmi	r3, #-1879048188	; 0x90000004
     970:	69446b6c 	stmdbvs	r4, {r2, r3, r5, r6, r8, r9, fp, sp, lr}^
     974:	6e6f4376 	mcrvs	3, 3, r4, cr15, cr6, {3}
     978:	00676966 	rsbeq	r6, r7, r6, ror #18
     97c:	374d4954 	smlsldcc	r4, sp, r4, r9
     980:	5152495f 	cmppl	r2, pc, asr r9
     984:	6f6c006e 	svcvs	0x006c006e
     988:	6c20676e 	stcvs	7, cr6, [r0], #-440	; 0xfffffe48
     98c:	20676e6f 	rsbcs	r6, r7, pc, ror #28
     990:	00746e69 	rsbseq	r6, r4, r9, ror #28
     994:	5f485445 	svcpl	0x00485445
     998:	50554b57 	subspl	r4, r5, r7, asr fp
     99c:	5152495f 	cmppl	r2, pc, asr r9
     9a0:	544f006e 	strbpl	r0, [pc], #-110	; 9a8 <startup-0x1ffff658>
     9a4:	53485f47 	movtpl	r5, #36679	; 0x8f47
     9a8:	5152495f 	cmppl	r2, pc, asr r9
     9ac:	5550006e 	ldrbpl	r0, [r0, #-110]	; 0xffffff92
     9b0:	00524450 	subseq	r4, r2, r0, asr r4
     9b4:	47435353 	smlsldmi	r5, r3, r3, r3
     9b8:	50530052 	subspl	r0, r3, r2, asr r0
     9bc:	495f3149 	ldmdbmi	pc, {r0, r3, r6, r8, ip, sp}^	; <UNPREDICTABLE>
     9c0:	006e5152 	rsbeq	r5, lr, r2, asr r1
     9c4:	41534944 	cmpmi	r3, r4, asr #18
     9c8:	00454c42 	subeq	r4, r5, r2, asr #24
     9cc:	61435653 	cmpvs	r3, r3, asr r6
     9d0:	495f6c6c 	ldmdbmi	pc, {r2, r3, r5, r6, sl, fp, sp, lr}^	; <UNPREDICTABLE>
     9d4:	006e5152 	rsbeq	r5, lr, r2, asr r1
     9d8:	32425041 	subcc	r5, r2, #65	; 0x41
     9dc:	52545352 	subspl	r5, r4, #1207959553	; 0x48000001
     9e0:	52534200 	subspl	r4, r3, #0, 4
     9e4:	52004852 	andpl	r4, r0, #5373952	; 0x520000
     9e8:	475f4343 	ldrbmi	r4, [pc, -r3, asr #6]
     9ec:	6c467465 	cfstrdvs	mvd7, [r6], {101}	; 0x65
     9f0:	74536761 	ldrbvc	r6, [r3], #-1889	; 0xfffff89f
     9f4:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
     9f8:	43435200 	movtmi	r5, #12800	; 0x3200
     9fc:	6f6c435f 	svcvs	0x006c435f
     a00:	00736b63 	rsbseq	r6, r3, r3, ror #22
     a04:	52525342 	subspl	r5, r2, #134217729	; 0x8000001
     a08:	5047004c 	subpl	r0, r7, ip, asr #32
     a0c:	485f4f49 	ldmdami	pc, {r0, r3, r6, r8, r9, sl, fp, lr}^	; <UNPREDICTABLE>
     a10:	5f686769 	svcpl	0x00686769
     a14:	65657053 	strbvs	r7, [r5, #-83]!	; 0xffffffad
     a18:	43520064 	cmpmi	r2, #100	; 0x64
     a1c:	54495f43 	strbpl	r5, [r9], #-3907	; 0xfffff0bd
     a20:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
     a24:	52006769 	andpl	r6, r0, #27525120	; 0x1a40000
     a28:	485f4343 	ldmdami	pc, {r0, r1, r6, r8, r9, lr}^	; <UNPREDICTABLE>
     a2c:	6d434953 	vstrvs.16	s9, [r3, #-166]	; 0xffffff5a	; <UNPREDICTABLE>
     a30:	50460064 	subpl	r0, r6, r4, rrx
     a34:	52495f55 	subpl	r5, r9, #340	; 0x154
     a38:	52006e51 	andpl	r6, r0, #1296	; 0x510
     a3c:	415f4343 	cmpmi	pc, r3, asr #6
     a40:	73756a64 	cmnvc	r5, #100, 20	; 0x64000
     a44:	49534874 	ldmdbmi	r3, {r2, r4, r5, r6, fp, lr}^
     a48:	696c6143 	stmdbvs	ip!, {r0, r1, r6, r8, sp, lr}^
     a4c:	74617262 	strbtvc	r7, [r1], #-610	; 0xfffffd9e
     a50:	566e6f69 	strbtpl	r6, [lr], -r9, ror #30
     a54:	65756c61 	ldrbvs	r6, [r5, #-3169]!	; 0xfffff39f
     a58:	52415500 	subpl	r5, r1, #0, 10
     a5c:	495f3454 	ldmdbmi	pc, {r2, r4, r6, sl, ip, sp}^	; <UNPREDICTABLE>
     a60:	006e5152 	rsbeq	r5, lr, r2, asr r1
     a64:	32425041 	subcc	r5, r2, #65	; 0x41
     a68:	4e45504c 	cdpmi	0, 4, cr5, cr5, cr12, {2}
     a6c:	43520052 	cmpmi	r2, #82	; 0x52
     a70:	50415f43 	subpl	r5, r1, r3, asr #30
     a74:	65503142 	ldrbvs	r3, [r0, #-322]	; 0xfffffebe
     a78:	68706972 	ldmdavs	r0!, {r1, r4, r5, r6, r8, fp, sp, lr}^
     a7c:	43435200 	movtmi	r5, #12800	; 0x3200
     a80:	4354525f 	cmpmi	r4, #-268435451	; 0xf0000005
     a84:	434b4c43 	movtmi	r4, #48195	; 0xbc43
     a88:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
     a8c:	544f0067 	strbpl	r0, [pc], #-103	; a94 <startup-0x1ffff56c>
     a90:	53465f47 	movtpl	r5, #28487	; 0x6f47
     a94:	554b575f 	strbpl	r5, [fp, #-1887]	; 0xfffff8a1
     a98:	52495f50 	subpl	r5, r9, #80, 30	; 0x140
     a9c:	52006e51 	andpl	r6, r0, #1296	; 0x510
     aa0:	465f4343 	ldrbmi	r4, [pc], -r3, asr #6
     aa4:	0047414c 	subeq	r4, r7, ip, asr #2
     aa8:	5f434352 	svcpl	0x00434352
     aac:	49746547 	ldmdbmi	r4!, {r0, r1, r2, r6, r8, sl, sp, lr}^
     ab0:	61745354 	cmnvs	r4, r4, asr r3
     ab4:	00737574 	rsbseq	r7, r3, r4, ror r5
     ab8:	49545845 	ldmdbmi	r4, {r0, r2, r6, fp, ip, lr}^
     abc:	52495f34 	subpl	r5, r9, #52, 30	; 0xd0
     ac0:	43006e51 	movwmi	r6, #3665	; 0xe51
     ac4:	004c5254 	subeq	r5, ip, r4, asr r2
     ac8:	364d4954 			; <UNDEFINED> instruction: 0x364d4954
     acc:	4341445f 	movtmi	r4, #5215	; 0x145f
     ad0:	5152495f 	cmppl	r2, pc, asr r9
     ad4:	654e006e 	strbvs	r0, [lr, #-110]	; 0xffffff92
     ad8:	61745377 	cmnvs	r4, r7, ror r3
     adc:	47006574 	smlsdxmi	r0, r4, r5, r6
     ae0:	5f4f4950 	svcpl	0x004f4950
     ae4:	65657053 	strbvs	r7, [r5, #-83]!	; 0xffffffad
     ae8:	32490064 	subcc	r0, r9, #100	; 0x64
     aec:	455f3243 	ldrbmi	r3, [pc, #-579]	; 8b1 <startup-0x1ffff74f>
     af0:	52495f56 	subpl	r5, r9, #344	; 0x158
     af4:	52006e51 	andpl	r6, r0, #1296	; 0x510
     af8:	435f4343 	cmpmi	pc, #201326593	; 0xc000001
     afc:	7261656c 	rsbvc	r6, r1, #108, 10	; 0x1b000000
     b00:	65505449 	ldrbvs	r5, [r0, #-1097]	; 0xfffffbb7
     b04:	6e69646e 	cdpvs	4, 6, cr6, cr9, cr14, {3}
     b08:	74694267 	strbtvc	r4, [r9], #-615	; 0xfffffd99
     b0c:	43435200 	movtmi	r5, #12800	; 0x3200
     b10:	6f6c435f 	svcvs	0x006c435f
     b14:	65536b63 	ldrbvs	r6, [r3, #-2915]	; 0xfffff49d
     b18:	69727563 	ldmdbvs	r2!, {r0, r1, r5, r6, r8, sl, ip, sp, lr}^
     b1c:	79537974 	ldmdbvc	r3, {r2, r4, r5, r6, r8, fp, ip, sp, lr}^
     b20:	6d657473 	cfstrdvs	mvd7, [r5, #-460]!	; 0xfffffe34
     b24:	00646d43 	rsbeq	r6, r4, r3, asr #26
     b28:	5f434352 	svcpl	0x00434352
     b2c:	42494153 	submi	r4, r9, #-1073741804	; 0xc0000014
     b30:	6b636f6c 	blvs	18dc8e8 <startup-0x1e723718>
     b34:	4b4c4341 	blmi	1311840 <startup-0x1ecee7c0>
     b38:	72756f53 	rsbsvc	r6, r5, #332	; 0x14c
     b3c:	73006563 	movwvc	r6, #1379	; 0x563
     b40:	69747379 	ldmdbvs	r4!, {r0, r3, r4, r5, r6, r8, r9, ip, sp, lr}^
     b44:	495f6b63 	ldmdbmi	pc, {r0, r1, r5, r6, r8, r9, fp, sp, lr}^	; <UNPREDICTABLE>
     b48:	0074696e 	rsbseq	r6, r4, lr, ror #18
     b4c:	74617473 	strbtvc	r7, [r1], #-1139	; 0xfffffb8d
     b50:	65727375 	ldrbvs	r7, [r2, #-885]!	; 0xfffffc8b
     b54:	43520067 	cmpmi	r2, #103	; 0x67
     b58:	50415f43 	subpl	r5, r1, r3, asr #30
     b5c:	65503242 	ldrbvs	r3, [r0, #-578]	; 0xfffffdbe
     b60:	68706972 	ldmdavs	r0!, {r1, r4, r5, r6, r8, fp, sp, lr}^
     b64:	41464200 	mrsmi	r4, (UNDEF: 102)
     b68:	50410052 	subpl	r0, r1, r2, asr r0
     b6c:	504c3142 	subpl	r3, ip, r2, asr #2
     b70:	00524e45 	subseq	r4, r2, r5, asr #28
     b74:	31414d44 	cmpcc	r1, r4, asr #26
     b78:	7274535f 	rsbsvc	r5, r4, #2080374785	; 0x7c000001
     b7c:	316d6165 	cmncc	sp, r5, ror #2
     b80:	5152495f 	cmppl	r2, pc, asr r9
     b84:	6361006e 	cmnvs	r1, #110	; 0x6e
     b88:	65766974 	ldrbvs	r6, [r6, #-2420]!	; 0xfffff68c
     b8c:	6f6f645f 	svcvs	0x006f645f
     b90:	44007372 	strmi	r7, [r0], #-882	; 0xfffffc8e
     b94:	5f32414d 	svcpl	0x0032414d
     b98:	65727453 	ldrbvs	r7, [r2, #-1107]!	; 0xfffffbad
     b9c:	5f336d61 	svcpl	0x00336d61
     ba0:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     ba4:	474b4300 	strbmi	r4, [fp, -r0, lsl #6]
     ba8:	4e455441 	cdpmi	4, 4, cr5, cr5, cr1, {2}
     bac:	41430052 	qdaddmi	r0, r2, r3
     bb0:	545f324e 	ldrbpl	r3, [pc], #-590	; bb8 <startup-0x1ffff448>
     bb4:	52495f58 	subpl	r5, r9, #88, 30	; 0x160
     bb8:	50006e51 	andpl	r6, r0, r1, asr lr
     bbc:	41534c4c 	cmpmi	r3, ip, asr #24
     bc0:	50004e49 	andpl	r4, r0, r9, asr #28
     bc4:	41534c4c 	cmpmi	r3, ip, asr #24
     bc8:	50005149 	andpl	r5, r0, r9, asr #2
     bcc:	41534c4c 	cmpmi	r3, ip, asr #24
     bd0:	52005249 	andpl	r5, r0, #-1879048188	; 0x90000004
     bd4:	4d5f4343 	ldclmi	3, cr4, [pc, #-268]	; ad0 <startup-0x1ffff530>
     bd8:	53314f43 	teqpl	r1, #268	; 0x10c
     bdc:	6372756f 	cmnvs	r2, #465567744	; 0x1bc00000
     be0:	43520065 	cmpmi	r2, #101	; 0x65
     be4:	48415f43 	stmdami	r1, {r0, r1, r6, r8, r9, sl, fp, ip, lr}^
     be8:	65503342 	ldrbvs	r3, [r0, #-834]	; 0xfffffcbe
     bec:	68706972 	ldmdavs	r0!, {r1, r4, r5, r6, r8, fp, sp, lr}^
     bf0:	636f6c43 	cmnvs	pc, #17152	; 0x4300
     bf4:	646d436b 	strbtvs	r4, [sp], #-875	; 0xfffffc95
     bf8:	73795300 	cmnvc	r9, #0, 6
     bfc:	6b636954 	blvs	18db154 <startup-0x1e724eac>
     c00:	7079545f 	rsbsvc	r5, r9, pc, asr r4
     c04:	69740065 	ldmdbvs	r4!, {r0, r2, r5, r6}^
     c08:	635f656d 	cmpvs	pc, #457179136	; 0x1b400000
     c0c:	72746e65 	rsbsvc	r6, r4, #1616	; 0x650
     c10:	6c5f6c61 	mrrcvs	12, 6, r6, pc, cr1	; <UNPREDICTABLE>
     c14:	006d7261 	rsbeq	r7, sp, r1, ror #4
     c18:	5f434352 	svcpl	0x00434352
     c1c:	434c4c50 	movtmi	r4, #52304	; 0xcc50
     c20:	5200646d 	andpl	r6, r0, #1828716544	; 0x6d000000
     c24:	425f4343 	subsmi	r4, pc, #201326593	; 0xc000001
     c28:	756b6361 	strbvc	r6, [fp, #-865]!	; 0xfffffc9f
     c2c:	73655270 	cmnvc	r5, #112, 4
     c30:	6d437465 	cfstrdvs	mvd7, [r3, #-404]	; 0xfffffe6c
     c34:	48410064 	stmdami	r1, {r2, r5, r6}^
     c38:	53523342 	cmppl	r2, #134217729	; 0x8000001
     c3c:	64005254 	strvs	r5, [r0], #-596	; 0xfffffdac
     c40:	00726f6f 	rsbseq	r6, r2, pc, ror #30
     c44:	6f727245 	svcvs	0x00727245
     c48:	61745372 	cmnvs	r4, r2, ror r3
     c4c:	00737574 	rsbseq	r7, r3, r4, ror r5
     c50:	31414d44 	cmpcc	r1, r4, asr #26
     c54:	7274535f 	rsbsvc	r5, r4, #2080374785	; 0x7c000001
     c58:	306d6165 	rsbcc	r6, sp, r5, ror #2
     c5c:	5152495f 	cmppl	r2, pc, asr r9
     c60:	7473006e 	ldrbtvc	r0, [r3], #-110	; 0xffffff92
     c64:	75747261 	ldrbvc	r7, [r4, #-609]!	; 0xfffffd9f
     c68:	43520070 	cmpmi	r2, #112	; 0x70
     c6c:	434d5f43 	movtmi	r5, #57155	; 0xdf43
     c70:	6f53324f 	svcvs	0x0053324f
     c74:	65637275 	strbvs	r7, [r3, #-629]!	; 0xfffffd8b
     c78:	42504100 	subsmi	r4, r0, #0, 2
     c7c:	54535231 	ldrbpl	r5, [r3], #-561	; 0xfffffdcf
     c80:	54520052 	ldrbpl	r0, [r2], #-82	; 0xffffffae
     c84:	6c415f43 	mcrrvs	15, 4, r5, r1, cr3
     c88:	5f6d7261 	svcpl	0x006d7261
     c8c:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     c90:	42504100 	subsmi	r4, r0, #0, 2
     c94:	524e4531 	subpl	r4, lr, #205520896	; 0xc400000
     c98:	49564e00 	ldmdbmi	r6, {r9, sl, fp, lr}^
     c9c:	79545f43 	ldmdbvc	r4, {r0, r1, r6, r8, r9, sl, fp, ip, lr}^
     ca0:	46006570 			; <UNDEFINED> instruction: 0x46006570
     ca4:	74636e75 	strbtvc	r6, [r3], #-3701	; 0xfffff18b
     ca8:	616e6f69 	cmnvs	lr, r9, ror #30
     cac:	6174536c 	cmnvs	r4, ip, ror #6
     cb0:	49006574 	stmdbmi	r0, {r2, r4, r5, r6, r8, sl, sp, lr}
     cb4:	5f334332 	svcpl	0x00334332
     cb8:	495f5245 	ldmdbmi	pc, {r0, r2, r6, r9, ip, lr}^	; <UNPREDICTABLE>
     cbc:	006e5152 	rsbeq	r5, lr, r2, asr r1
     cc0:	50595243 	subspl	r5, r9, r3, asr #4
     cc4:	5152495f 	cmppl	r2, pc, asr r9
     cc8:	5845006e 	stmdapl	r5, {r1, r2, r3, r5, r6}^
     ccc:	35314954 	ldrcc	r4, [r1, #-2388]!	; 0xfffff6ac
     cd0:	5f30315f 	svcpl	0x0030315f
     cd4:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     cd8:	6e6f6c00 	cdpvs	12, 6, cr6, cr15, cr0, {0}
     cdc:	6f6c2067 	svcvs	0x006c2067
     ce0:	7520676e 	strvc	r6, [r0, #-1902]!	; 0xfffff892
     ce4:	6769736e 	strbvs	r7, [r9, -lr, ror #6]!
     ce8:	2064656e 	rsbcs	r6, r4, lr, ror #10
     cec:	00746e69 	rsbseq	r6, r4, r9, ror #28
     cf0:	5f434352 	svcpl	0x00434352
     cf4:	314f434d 	cmpcc	pc, sp, asr #6
     cf8:	00766944 	rsbseq	r6, r6, r4, asr #18
     cfc:	334d4954 	movtcc	r4, #55636	; 0xd954
     d00:	5152495f 	cmppl	r2, pc, asr r9
     d04:	5355006e 	cmppl	r5, #110	; 0x6e
     d08:	31545241 	cmpcc	r4, r1, asr #4
     d0c:	5152495f 	cmppl	r2, pc, asr r9
     d10:	4352006e 	cmpmi	r2, #110	; 0x6e
     d14:	61575f43 	cmpvs	r7, r3, asr #30
     d18:	6f467469 	svcvs	0x00467469
     d1c:	45534872 	ldrbmi	r4, [r3, #-2162]	; 0xfffff78e
     d20:	72617453 	rsbvc	r7, r1, #1392508928	; 0x53000000
     d24:	00705574 	rsbseq	r5, r0, r4, ror r5
     d28:	43435553 	movtmi	r5, #13651	; 0x3553
     d2c:	00535345 	subseq	r5, r3, r5, asr #6
     d30:	4f495047 	svcmi	0x00495047
     d34:	646f4d5f 	strbtvs	r4, [pc], #-3423	; d3c <startup-0x1ffff2c4>
     d38:	41430065 	cmpmi	r3, r5, rrx
     d3c:	525f324e 	subspl	r3, pc, #-536870908	; 0xe0000004
     d40:	495f3158 	ldmdbmi	pc, {r3, r4, r6, r8, ip, sp}^	; <UNPREDICTABLE>
     d44:	006e5152 	rsbeq	r5, lr, r2, asr r1
     d48:	5f434441 	svcpl	0x00434441
     d4c:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     d50:	43435200 	movtmi	r5, #12800	; 0x3200
     d54:	45534c5f 	ldrbmi	r4, [r3, #-3167]	; 0xfffff3a1
     d58:	65646f4d 	strbvs	r6, [r4, #-3917]!	; 0xfffff0b3
     d5c:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
     d60:	49006769 	stmdbmi	r0, {r0, r3, r5, r6, r8, r9, sl, sp, lr}
     d64:	00524543 	subseq	r4, r2, r3, asr #10
     d68:	33424841 	movtcc	r4, #10305	; 0x2841
     d6c:	4e45504c 	cdpmi	0, 4, cr5, cr5, cr12, {2}
     d70:	50470052 	subpl	r0, r7, r2, asr r0
     d74:	6f4d4f49 	svcvs	0x004d4f49
     d78:	545f6564 	ldrbpl	r6, [pc], #-1380	; d80 <startup-0x1ffff280>
     d7c:	44657079 	strbtmi	r7, [r5], #-121	; 0xffffff87
     d80:	53006665 	movwpl	r6, #1637	; 0x665
     d84:	69547379 	ldmdbvs	r4, {r0, r3, r4, r5, r6, r8, r9, ip, sp, lr}^
     d88:	435f6b63 	cmpmi	pc, #101376	; 0x18c00
     d8c:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
     d90:	3a430067 	bcc	10c0f34 <startup-0x1ef3f0cc>
     d94:	6573552f 	ldrbvs	r5, [r3, #-1327]!	; 0xfffffad1
     d98:	412f7372 			; <UNDEFINED> instruction: 0x412f7372
     d9c:	746d6164 	strbtvc	r6, [sp], #-356	; 0xfffffe9c
     da0:	656e4f2f 	strbvs	r4, [lr, #-3887]!	; 0xfffff0d1
     da4:	76697244 	strbtvc	r7, [r9], -r4, asr #4
     da8:	6f442f65 	svcvs	0x00442f65
     dac:	656d756b 	strbvs	r7, [sp, #-1387]!	; 0xfffffa95
     db0:	472f746e 	strmi	r7, [pc, -lr, ror #8]!
     db4:	75487469 	strbvc	r7, [r8, #-1129]	; 0xfffffb97
     db8:	41442f62 	cmpmi	r4, r2, ror #30
     dbc:	30393254 	eorscc	r3, r9, r4, asr r2
     dc0:	72614c2d 	rsbvc	r4, r1, #11520	; 0x2d00
     dc4:	7379736d 	cmnvc	r9, #-1275068415	; 0xb4000001
     dc8:	2f6d6574 	svccs	0x006d6574
     dcc:	2f646f6b 	svccs	0x00646f6b
     dd0:	726f6f44 	rsbvc	r6, pc, #68, 30	; 0x110
     dd4:	6174732f 	cmnvs	r4, pc, lsr #6
     dd8:	70757472 	rsbsvc	r7, r5, r2, ror r4
     ddc:	4100632e 	tstmi	r0, lr, lsr #6
     de0:	00525346 	subseq	r5, r2, r6, asr #6
     de4:	5059544f 	subspl	r5, r9, pc, asr #8
     de8:	43005245 	movwmi	r5, #581	; 0x245
     dec:	42494c41 	submi	r4, r9, #16640	; 0x4100
     df0:	706d7400 	rsbvc	r7, sp, r0, lsl #8
     df4:	00676572 	rsbeq	r6, r7, r2, ror r5
     df8:	434d5346 	movtmi	r5, #54086	; 0xd346
     dfc:	5152495f 	cmppl	r2, pc, asr r9
     e00:	5845006e 	stmdapl	r5, {r1, r2, r3, r5, r6}^
     e04:	5f304954 	svcpl	0x00304954
     e08:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     e0c:	4b434400 	blmi	10d1e14 <startup-0x1ef2e1ec>
     e10:	52474643 	subpl	r4, r7, #70254592	; 0x4300000
     e14:	46430032 			; <UNDEFINED> instruction: 0x46430032
     e18:	52005253 	andpl	r5, r0, #805306373	; 0x30000005
     e1c:	415f4343 	cmpmi	pc, r3, asr #6
     e20:	50314248 	eorspl	r4, r1, r8, asr #4
     e24:	70697265 	rsbvc	r7, r9, r5, ror #4
     e28:	73680068 	cmnvc	r8, #104	; 0x68
     e2c:	61747365 	cmnvs	r4, r5, ror #6
     e30:	00737574 	rsbseq	r7, r3, r4, ror r5
     e34:	31414d44 	cmpcc	r1, r4, asr #26
     e38:	7274535f 	rsbsvc	r5, r4, #2080374785	; 0x7c000001
     e3c:	346d6165 	strbtcc	r6, [sp], #-357	; 0xfffffe9b
     e40:	5152495f 	cmppl	r2, pc, asr r9
     e44:	5047006e 	subpl	r0, r7, lr, rrx
     e48:	6c5f4f49 	mrrcvs	15, 4, r4, pc, cr9	; <UNPREDICTABLE>
     e4c:	00706d61 	rsbseq	r6, r0, r1, ror #26
     e50:	32414d44 	subcc	r4, r1, #68, 26	; 0x1100
     e54:	7274535f 	rsbsvc	r5, r4, #2080374785	; 0x7c000001
     e58:	366d6165 	strbtcc	r6, [sp], -r5, ror #2
     e5c:	5152495f 	cmppl	r2, pc, asr r9
     e60:	4841006e 	stmdami	r1, {r1, r2, r3, r5, r6}^
     e64:	4e453142 	dvfmism	f3, f5, f2
     e68:	4f4c0052 	svcmi	0x004c0052
     e6c:	47004441 	strmi	r4, [r0, -r1, asr #8]
     e70:	534f4950 	movtpl	r4, #63824	; 0xf950
     e74:	64656570 	strbtvs	r6, [r5], #-1392	; 0xfffffa90
     e78:	7079545f 	rsbsvc	r5, r9, pc, asr r4
     e7c:	66654465 	strbtvs	r4, [r5], -r5, ror #8
     e80:	62654400 	rsbvs	r4, r5, #0, 8
     e84:	6f4d6775 	svcvs	0x004d6775
     e88:	6f74696e 	svcvs	0x0074696e
     e8c:	52495f72 	subpl	r5, r9, #456	; 0x1c8
     e90:	47006e51 	smlsdmi	r0, r1, lr, r6
     e94:	5f4f4950 	svcpl	0x004f4950
     e98:	006e6950 	rsbeq	r6, lr, r0, asr r9
     e9c:	5f434352 	svcpl	0x00434352
     ea0:	31424841 	cmpcc	r2, r1, asr #16
     ea4:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
     ea8:	65526870 	ldrbvs	r6, [r2, #-2160]	; 0xfffff790
     eac:	43746573 	cmnmi	r4, #482344960	; 0x1cc00000
     eb0:	4900646d 	stmdbmi	r0, {r0, r2, r3, r5, r6, sl, sp, lr}
     eb4:	5f334332 	svcpl	0x00334332
     eb8:	495f5645 	ldmdbmi	pc, {r0, r2, r6, r9, sl, ip, lr}^	; <UNPREDICTABLE>
     ebc:	006e5152 	rsbeq	r5, lr, r2, asr r1
     ec0:	4f495047 	svcmi	0x00495047
     ec4:	5075505f 	rsbspl	r5, r5, pc, asr r0
     ec8:	48410064 	stmdami	r1, {r2, r5, r6}^
     ecc:	53523242 	cmppl	r2, #536870916	; 0x20000004
     ed0:	45005254 	strmi	r5, [r0, #-596]	; 0xfffffdac
     ed4:	495f4854 	ldmdbmi	pc, {r2, r4, r6, fp, lr}^	; <UNPREDICTABLE>
     ed8:	006e5152 	rsbeq	r5, lr, r2, asr r1
     edc:	5f434352 	svcpl	0x00434352
     ee0:	636f6c43 	cmnvs	pc, #17152	; 0x4300
     ee4:	7954736b 	ldmdbvc	r4, {r0, r1, r3, r5, r6, r8, r9, ip, sp, lr}^
     ee8:	65446570 	strbvs	r6, [r4, #-1392]	; 0xfffffa90
     eec:	4d4d0066 	stclmi	0, cr0, [sp, #-408]	; 0xfffffe68
     ef0:	52005246 	andpl	r5, r0, #1610612740	; 0x60000004
     ef4:	545f4343 	ldrbpl	r4, [pc], #-835	; efc <startup-0x1ffff104>
     ef8:	44657079 	strbtmi	r7, [r5], #-121	; 0xffffff87
     efc:	4d006665 	stcmi	6, cr6, [r0, #-404]	; 0xfffffe6c
     f00:	5241464d 	subpl	r4, r1, #80740352	; 0x4d00000
     f04:	6f687300 	svcvs	0x00687300
     f08:	69207472 	stmdbvs	r0!, {r1, r4, r5, r6, sl, ip, sp, lr}
     f0c:	7000746e 	andvc	r7, r0, lr, ror #8
     f10:	77737361 	ldrbvc	r7, [r3, -r1, ror #6]!
     f14:	0064726f 	rsbeq	r7, r4, pc, ror #4
     f18:	5f434352 	svcpl	0x00434352
     f1c:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     f20:	43435200 	movtmi	r5, #12800	; 0x3200
     f24:	0054495f 	subseq	r4, r4, pc, asr r9
     f28:	52415349 	subpl	r5, r1, #603979777	; 0x24000001
     f2c:	414d4400 	cmpmi	sp, r0, lsl #8
     f30:	74535f31 	ldrbvc	r5, [r3], #-3889	; 0xfffff0cf
     f34:	6d616572 	cfstr64vs	mvdx6, [r1, #-456]!	; 0xfffffe38
     f38:	52495f33 	subpl	r5, r9, #51, 30	; 0xcc
     f3c:	55006e51 	strpl	r6, [r0, #-3665]	; 0xfffff1af
     f40:	54524153 	ldrbpl	r4, [r2], #-339	; 0xfffffead
     f44:	52495f32 	subpl	r5, r9, #50, 30	; 0xc8
     f48:	62006e51 	andvs	r6, r0, #1296	; 0x510
     f4c:	74737469 	ldrbtvc	r7, [r3], #-1129	; 0xfffffb97
     f50:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
     f54:	414e4500 	cmpmi	lr, r0, lsl #10
     f58:	00454c42 	subeq	r4, r5, r2, asr #24
     f5c:	766c6c70 			; <UNDEFINED> instruction: 0x766c6c70
     f60:	52006f63 	andpl	r6, r0, #396	; 0x18c
     f64:	415f4343 	cmpmi	pc, r3, asr #6
     f68:	50314250 	eorspl	r4, r1, r0, asr r2
     f6c:	70697265 	rsbvc	r7, r9, r5, ror #4
     f70:	6f6c4368 	svcvs	0x006c4368
     f74:	504c6b63 	subpl	r6, ip, r3, ror #22
     f78:	65646f4d 	strbvs	r6, [r4, #-3917]!	; 0xfffff0b3
     f7c:	00646d43 	rsbeq	r6, r4, r3, asr #26
     f80:	4f495047 	svcmi	0x00495047
     f84:	7079545f 	rsbsvc	r5, r9, pc, asr r4
     f88:	66654465 	strbtvs	r4, [r5], -r5, ror #8
     f8c:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
     f90:	50555f31 	subspl	r5, r5, r1, lsr pc
     f94:	4d49545f 	cfstrdmi	mvd5, [r9, #-380]	; 0xfffffe84
     f98:	495f3031 	ldmdbmi	pc, {r0, r4, r5, ip, sp}^	; <UNPREDICTABLE>
     f9c:	006e5152 	rsbeq	r5, lr, r2, asr r1
     fa0:	5f4d5449 	svcpl	0x004d5449
     fa4:	75427852 	strbvc	r7, [r2, #-2130]	; 0xfffff7ae
     fa8:	72656666 	rsbvc	r6, r5, #106954752	; 0x6600000
     fac:	4c4c5000 	marmi	acc0, r5, ip
     fb0:	4e533249 	cdpmi	2, 5, cr3, cr3, cr9, {2}
     fb4:	43435200 	movtmi	r5, #12800	; 0x3200
     fb8:	4248415f 	submi	r4, r8, #-1073741801	; 0xc0000017
     fbc:	72655031 	rsbvc	r5, r5, #49	; 0x31
     fc0:	43687069 	cmnmi	r8, #105	; 0x69
     fc4:	6b636f6c 	blvs	18dcd7c <startup-0x1e723284>
     fc8:	6f4d504c 	svcvs	0x004d504c
     fcc:	6d436564 	cfstr64vs	mvdx6, [r3, #-400]	; 0xfffffe70
     fd0:	4c500064 	mrrcmi	0, 6, r0, r0, cr4	; <UNPREDICTABLE>
     fd4:	5332494c 	teqpl	r2, #76, 18	; 0x130000
     fd8:	616d0052 	qdsubvs	r0, r2, sp
     fdc:	4f006e69 	svcmi	0x00006e69
     fe0:	485f4754 	ldmdami	pc, {r2, r4, r6, r8, r9, sl, lr}^	; <UNPREDICTABLE>
     fe4:	50455f53 	subpl	r5, r5, r3, asr pc
     fe8:	554f5f31 	strbpl	r5, [pc, #-3889]	; bf <startup-0x1fffff41>
     fec:	52495f54 	subpl	r5, r9, #84, 30	; 0x150
     ff0:	6c006e51 	stcvs	14, cr6, [r0], {81}	; 0x51
     ff4:	546d7261 	strbtpl	r7, [sp], #-609	; 0xfffffd9f
     ff8:	006b6369 	rsbeq	r6, fp, r9, ror #6
     ffc:	5f434352 	svcpl	0x00434352
    1000:	43435452 	movtmi	r5, #13394	; 0x3452
    1004:	6d434b4c 	vstrvs	d20, [r3, #-304]	; 0xfffffed0
    1008:	4f4d0064 	svcmi	0x004d0064
    100c:	00524544 	subseq	r4, r2, r4, asr #10
    1010:	4349564e 	movtmi	r5, #38478	; 0x964e
    1014:	7465535f 	strbtvc	r5, [r5], #-863	; 0xfffffca1
    1018:	6f697250 	svcvs	0x00697250
    101c:	79746972 	ldmdbvc	r4!, {r1, r4, r5, r6, r8, fp, sp, lr}^
    1020:	4e414300 	cdpmi	3, 4, cr4, cr1, cr0, {0}
    1024:	58525f31 	ldmdapl	r2, {r0, r4, r5, r8, r9, sl, fp, ip, lr}^
    1028:	52495f31 	subpl	r5, r9, #49, 30	; 0xc4
    102c:	52006e51 	andpl	r6, r0, #1296	; 0x510
    1030:	415f4343 	cmpmi	pc, r3, asr #6
    1034:	50324248 	eorspl	r4, r2, r8, asr #4
    1038:	70697265 	rsbvc	r7, r9, r5, ror #4
    103c:	50470068 	subpl	r0, r7, r8, rrx
    1040:	505f4f49 	subspl	r4, pc, r9, asr #30
    1044:	5f645075 	svcpl	0x00645075
    1048:	45005055 	strmi	r5, [r0, #-85]	; 0xffffffab
    104c:	39495458 	stmdbcc	r9, {r3, r4, r6, sl, ip, lr}^
    1050:	495f355f 	ldmdbmi	pc, {r0, r1, r2, r3, r4, r6, r8, sl, ip, sp}^	; <UNPREDICTABLE>
    1054:	006e5152 	rsbeq	r5, lr, r2, asr r1
    1058:	534c4c50 	movtpl	r4, #52304	; 0xcc50
    105c:	46434941 	strbmi	r4, [r3], -r1, asr #18
    1060:	52005247 	andpl	r5, r0, #1879048196	; 0x70000004
    1064:	415f4343 	cmpmi	pc, r3, asr #6
    1068:	50314248 	eorspl	r4, r1, r8, asr #4
    106c:	70697265 	rsbvc	r7, r9, r5, ror #4
    1070:	6f6c4368 	svcvs	0x006c4368
    1074:	6d436b63 	vstrvs	d22, [r3, #-396]	; 0xfffffe74
    1078:	68730064 	ldmdavs	r3!, {r2, r5, r6}^
    107c:	2074726f 	rsbscs	r7, r4, pc, ror #4
    1080:	69736e75 	ldmdbvs	r3!, {r0, r2, r4, r5, r6, r9, sl, fp, sp, lr}^
    1084:	64656e67 	strbtvs	r6, [r5], #-3687	; 0xfffff199
    1088:	746e6920 	strbtvc	r6, [lr], #-2336	; 0xfffff6e0
    108c:	43435200 	movtmi	r5, #12800	; 0x3200
    1090:	4c4c505f 	mcrrmi	0, 5, r5, ip, cr15
    1094:	43533249 	cmpmi	r3, #-1879048188	; 0x90000004
    1098:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    109c:	49540067 	ldmdbmi	r4, {r0, r1, r2, r5, r6}^
    10a0:	435f384d 	cmpmi	pc, #5046272	; 0x4d0000
    10a4:	52495f43 	subpl	r5, r9, #268	; 0x10c
    10a8:	53006e51 	movwpl	r6, #3665	; 0xe51
    10ac:	5f4f4944 	svcpl	0x004f4944
    10b0:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
    10b4:	41504300 	cmpmi	r0, r0, lsl #6
    10b8:	49005243 	stmdbmi	r0, {r0, r1, r6, r9, ip, lr}
    10bc:	00525053 	subseq	r5, r2, r3, asr r0
    10c0:	43535953 	cmpmi	r3, #1359872	; 0x14c000
    10c4:	465f4b4c 	ldrbmi	r4, [pc], -ip, asr #22
    10c8:	75716572 	ldrbvc	r6, [r1, #-1394]!	; 0xfffffa8e
    10cc:	79636e65 	stmdbvc	r3!, {r0, r2, r5, r6, r9, sl, fp, sp, lr}^
    10d0:	54584500 	ldrbpl	r4, [r8], #-1280	; 0xfffffb00
    10d4:	495f3349 	ldmdbmi	pc, {r0, r3, r6, r8, r9, ip, sp}^	; <UNPREDICTABLE>
    10d8:	006e5152 	rsbeq	r5, lr, r2, asr r1
    10dc:	646e6550 	strbtvs	r6, [lr], #-1360	; 0xfffffab0
    10e0:	495f5653 	ldmdbmi	pc, {r0, r1, r4, r6, r9, sl, ip, lr}^	; <UNPREDICTABLE>
    10e4:	006e5152 	rsbeq	r5, lr, r2, asr r1
    10e8:	74736574 	ldrbtvc	r6, [r3], #-1396	; 0xfffffa8c
    10ec:	65740031 	ldrbvs	r0, [r4, #-49]!	; 0xffffffcf
    10f0:	00327473 	eorseq	r7, r2, r3, ror r4
    10f4:	74736574 	ldrbtvc	r6, [r3], #-1396	; 0xfffffa8c
    10f8:	544f0033 	strbpl	r0, [pc], #-51	; 1100 <startup-0x1fffef00>
    10fc:	53485f47 	movtpl	r5, #36679	; 0x8f47
    1100:	3150455f 	cmpcc	r0, pc, asr r5
    1104:	5f4e495f 	svcpl	0x004e495f
    1108:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
    110c:	414d4400 	cmpmi	sp, r0, lsl #8
    1110:	74535f31 	ldrbvc	r5, [r3], #-3889	; 0xfffff0cf
    1114:	6d616572 	cfstr64vs	mvdx6, [r1, #-456]!	; 0xfffffe38
    1118:	52495f37 	subpl	r5, r9, #55, 30	; 0xdc
    111c:	5f006e51 	svcpl	0x00006e51
    1120:	746e695f 	strbtvc	r6, [lr], #-2399	; 0xfffff6a1
    1124:	745f3233 	ldrbvc	r3, [pc], #-563	; 112c <startup-0x1fffeed4>
    1128:	43435200 	movtmi	r5, #12800	; 0x3200
    112c:	4d49545f 	cfstrdmi	mvd5, [r9, #-380]	; 0xfffffe84
    1130:	504b4c43 	subpl	r4, fp, r3, asr #24
    1134:	63736572 	cmnvs	r3, #478150656	; 0x1c800000
    1138:	72656c61 	rsbvc	r6, r5, #24832	; 0x6100
    113c:	45534900 	ldrbmi	r4, [r3, #-2304]	; 0xfffff700
    1140:	72700052 	rsbsvc	r0, r0, #82	; 0x52
    1144:	00637365 	rsbeq	r7, r3, r5, ror #6
    1148:	5f434352 	svcpl	0x00434352
    114c:	32424841 	subcc	r4, r2, #4259840	; 0x410000
    1150:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
    1154:	65526870 	ldrbvs	r6, [r2, #-2160]	; 0xfffff790
    1158:	43746573 	cmnmi	r4, #482344960	; 0x1cc00000
    115c:	5200646d 	andpl	r6, r0, #1828716544	; 0x6d000000
    1160:	505f4343 	subspl	r4, pc, r3, asr #6
    1164:	41534c4c 	cmpmi	r3, ip, asr #24
    1168:	646d4349 	strbtvs	r4, [sp], #-841	; 0xfffffcb7
    116c:	42484100 	submi	r4, r8, #0, 2
    1170:	524e4533 	subpl	r4, lr, #213909504	; 0xcc00000
    1174:	43435200 	movtmi	r5, #12800	; 0x3200
    1178:	5359535f 	cmppl	r9, #2080374785	; 0x7c000001
    117c:	434b4c43 	movtmi	r4, #48195	; 0xbc43
    1180:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    1184:	4d440067 	stclmi	0, cr0, [r4, #-412]	; 0xfffffe64
    1188:	535f3241 	cmppl	pc, #268435460	; 0x10000004
    118c:	61657274 	smcvs	22308	; 0x5724
    1190:	495f326d 	ldmdbmi	pc, {r0, r2, r3, r5, r6, r9, ip, sp}^	; <UNPREDICTABLE>
    1194:	006e5152 	rsbeq	r5, lr, r2, asr r1
    1198:	4f495047 	svcmi	0x00495047
    119c:	7361465f 	cmnvc	r1, #99614720	; 0x5f00000
    11a0:	70535f74 	subsvc	r5, r3, r4, ror pc
    11a4:	00646565 	rsbeq	r6, r4, r5, ror #10
    11a8:	5f434352 	svcpl	0x00434352
    11ac:	434c4c50 	movtmi	r4, #52304	; 0xcc50
    11b0:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    11b4:	6c700067 	ldclvs	0, cr0, [r0], #-412	; 0xfffffe64
    11b8:	70006d6c 	andvc	r6, r0, ip, ror #26
    11bc:	6f706e69 	svcvs	0x00706e69
    11c0:	69420073 	stmdbvs	r2, {r0, r1, r4, r5, r6}^
    11c4:	45535f74 	ldrbmi	r5, [r3, #-3956]	; 0xfffff08c
    11c8:	50470054 	subpl	r0, r7, r4, asr r0
    11cc:	525f4f49 	subspl	r4, pc, #292	; 0x124
    11d0:	4f646165 	svcmi	0x00646165
    11d4:	75707475 	ldrbvc	r7, [r0, #-1141]!	; 0xfffffb8b
    11d8:	74614474 	strbtvc	r4, [r1], #-1140	; 0xfffffb8c
    11dc:	50470061 	subpl	r0, r7, r1, rrx
    11e0:	415f4f49 	cmpmi	pc, r9, asr #30
    11e4:	65740046 	ldrbvs	r0, [r4, #-70]!	; 0xffffffba
    11e8:	4700706d 	strmi	r7, [r0, -sp, rrx]
    11ec:	5f4f4950 	svcpl	0x004f4950
    11f0:	75727453 	ldrbvc	r7, [r2, #-1107]!	; 0xfffffbad
    11f4:	6e497463 	cdpvs	4, 4, cr7, cr9, cr3, {3}
    11f8:	42007469 	andmi	r7, r0, #1761607680	; 0x69000000
    11fc:	61567469 	cmpvs	r6, r9, ror #8
    1200:	6942006c 	stmdbvs	r2, {r2, r3, r5, r6}^
    1204:	45525f74 	ldrbmi	r5, [r2, #-3956]	; 0xfffff08c
    1208:	00544553 	subseq	r4, r4, r3, asr r5
    120c:	4f495047 	svcmi	0x00495047
    1210:	6972575f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, lr}^
    1214:	69426574 	stmdbvs	r2, {r2, r4, r5, r6, r8, sl, sp, lr}^
    1218:	50470074 	subpl	r0, r7, r4, ror r0
    121c:	535f4f49 	cmppl	pc, #292	; 0x124
    1220:	69427465 	stmdbvs	r2, {r0, r2, r5, r6, sl, ip, sp, lr}^
    1224:	47007374 	smlsdxmi	r0, r4, r3, r7
    1228:	5f4f4950 	svcpl	0x004f4950
    122c:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xfffff1b7
    1230:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
    1234:	65525f4f 	ldrbvs	r5, [r2, #-3919]	; 0xfffff0b1
    1238:	42746573 	rsbsmi	r6, r4, #482344960	; 0x1cc00000
    123c:	00737469 	rsbseq	r7, r3, r9, ror #8
    1240:	552f3a43 	strpl	r3, [pc, #-2627]!	; 805 <startup-0x1ffff7fb>
    1244:	73726573 	cmnvc	r2, #482344960	; 0x1cc00000
    1248:	6164412f 	cmnvs	r4, pc, lsr #2
    124c:	4f2f746d 	svcmi	0x002f746d
    1250:	7244656e 	subvc	r6, r4, #461373440	; 0x1b800000
    1254:	2f657669 	svccs	0x00657669
    1258:	756b6f44 	strbvc	r6, [fp, #-3908]!	; 0xfffff0bc
    125c:	746e656d 	strbtvc	r6, [lr], #-1389	; 0xfffffa93
    1260:	7469472f 	strbtvc	r4, [r9], #-1839	; 0xfffff8d1
    1264:	2f627548 	svccs	0x00627548
    1268:	32544144 	subscc	r4, r4, #68, 2
    126c:	4c2d3039 	stcmi	0, cr3, [sp], #-228	; 0xffffff1c
    1270:	736d7261 	cmnvc	sp, #268435462	; 0x10000006
    1274:	65747379 	ldrbvs	r7, [r4, #-889]!	; 0xfffffc87
    1278:	6f6b2f6d 	svcvs	0x006b2f6d
    127c:	696c2f64 	stmdbvs	ip!, {r2, r5, r6, r8, r9, sl, fp, sp}^
    1280:	54532f62 	ldrbpl	r2, [r3], #-3938	; 0xfffff09e
    1284:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
    1288:	696c5f34 	stmdbvs	ip!, {r2, r4, r5, r8, r9, sl, fp, ip, lr}^
    128c:	54532f62 	ldrbpl	r2, [r3], #-3938	; 0xfffff09e
    1290:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
    1294:	5f787834 	svcpl	0x00787834
    1298:	50647453 	rsbpl	r7, r4, r3, asr r4
    129c:	70697265 	rsbvc	r7, r9, r5, ror #4
    12a0:	72445f68 	subvc	r5, r4, #104, 30	; 0x1a0
    12a4:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
    12a8:	6372732f 	cmnvs	r2, #-1140850688	; 0xbc000000
    12ac:	6d74732f 	ldclvs	3, cr7, [r4, #-188]!	; 0xffffff44
    12b0:	34663233 	strbtcc	r3, [r6], #-563	; 0xfffffdcd
    12b4:	675f7878 			; <UNDEFINED> instruction: 0x675f7878
    12b8:	2e6f6970 			; <UNDEFINED> instruction: 0x2e6f6970
    12bc:	50470063 	subpl	r0, r7, r3, rrx
    12c0:	445f4f49 	ldrbmi	r4, [pc], #-3913	; 12c8 <startup-0x1fffed38>
    12c4:	696e4965 	stmdbvs	lr!, {r0, r2, r5, r6, r8, fp, lr}^
    12c8:	50470074 	subpl	r0, r7, r4, ror r0
    12cc:	525f4f49 	subspl	r4, pc, #292	; 0x124
    12d0:	49646165 	stmdbmi	r4!, {r0, r2, r5, r6, r8, sp, lr}^
    12d4:	7475706e 	ldrbtvc	r7, [r5], #-110	; 0xffffff92
    12d8:	61746144 	cmnvs	r4, r4, asr #2
    12dc:	00746942 	rsbseq	r6, r4, r2, asr #18
    12e0:	4f495047 	svcmi	0x00495047
    12e4:	696e495f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, lr}^
    12e8:	72745374 	rsbsvc	r5, r4, #116, 6	; 0xd0000001
    12ec:	00746375 	rsbseq	r6, r4, r5, ror r3
    12f0:	74726f50 	ldrbtvc	r6, [r2], #-3920	; 0xfffff0b0
    12f4:	006c6156 	rsbeq	r6, ip, r6, asr r1
    12f8:	4f495047 	svcmi	0x00495047
    12fc:	6e69505f 	mcrvs	0, 3, r5, cr9, cr15, {2}
    1300:	72756f53 	rsbsvc	r6, r5, #332	; 0x14c
    1304:	47006563 	strmi	r6, [r0, -r3, ror #10]
    1308:	5f4f4950 	svcpl	0x004f4950
    130c:	64616552 	strbtvs	r6, [r1], #-1362	; 0xfffffaae
    1310:	75706e49 	ldrbvc	r6, [r0, #-3657]!	; 0xfffff1b7
    1314:	74614474 	strbtvc	r4, [r1], #-1140	; 0xfffffb8c
    1318:	50470061 	subpl	r0, r7, r1, rrx
    131c:	505f4f49 	subspl	r4, pc, r9, asr #30
    1320:	6f4c6e69 	svcvs	0x004c6e69
    1324:	6f436b63 	svcvs	0x00436b63
    1328:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    132c:	74694200 	strbtvc	r4, [r9], #-512	; 0xfffffe00
    1330:	69746341 	ldmdbvs	r4!, {r0, r6, r8, r9, sp, lr}^
    1334:	63006e6f 	movwvs	r6, #3695	; 0xe6f
    1338:	65727275 	ldrbvs	r7, [r2, #-629]!	; 0xfffffd8b
    133c:	6970746e 	ldmdbvs	r0!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}^
    1340:	5047006e 	subpl	r0, r7, lr, rrx
    1344:	575f4f49 	ldrbpl	r4, [pc, -r9, asr #30]
    1348:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
    134c:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
    1350:	4700784f 	strmi	r7, [r0, -pc, asr #16]
    1354:	5f4f4950 	svcpl	0x004f4950
    1358:	67676f54 			; <UNDEFINED> instruction: 0x67676f54
    135c:	6942656c 	stmdbvs	r2, {r2, r3, r5, r6, r8, sl, sp, lr}^
    1360:	74007374 	strvc	r7, [r0], #-884	; 0xfffffc8c
    1364:	5f706d65 	svcpl	0x00706d65
    1368:	50470032 	subpl	r0, r7, r2, lsr r0
    136c:	505f4f49 	subspl	r4, pc, r9, asr #30
    1370:	46416e69 	strbmi	r6, [r1], -r9, ror #28
    1374:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    1378:	47006769 	strmi	r6, [r0, -r9, ror #14]
    137c:	5f4f4950 	svcpl	0x004f4950
    1380:	64616552 	strbtvs	r6, [r1], #-1362	; 0xfffffaae
    1384:	7074754f 	rsbsvc	r7, r4, pc, asr #10
    1388:	61447475 	hvcvs	18245	; 0x4745
    138c:	69426174 	stmdbvs	r2, {r2, r4, r5, r6, r8, sp, lr}^
    1390:	564e0074 			; <UNDEFINED> instruction: 0x564e0074
    1394:	495f4349 	ldmdbmi	pc, {r0, r3, r6, r8, r9, lr}^	; <UNPREDICTABLE>
    1398:	5474696e 	ldrbtpl	r6, [r4], #-2414	; 0xfffff692
    139c:	44657079 	strbtmi	r7, [r5], #-121	; 0xffffff87
    13a0:	4e006665 	cfmadd32mi	mvax3, mvfx6, mvfx0, mvfx5
    13a4:	5f434956 	svcpl	0x00434956
    13a8:	43515249 	cmpmi	r1, #-1879048188	; 0x90000004
    13ac:	6e6e6168 	powvsez	f6, f6, #0.0
    13b0:	6d436c65 	stclvs	12, cr6, [r3, #-404]	; 0xfffffe6c
    13b4:	79530064 	ldmdbvc	r3, {r2, r5, r6}^
    13b8:	63695473 	cmnvs	r9, #1929379840	; 0x73000000
    13bc:	4c435f6b 	mcrrmi	15, 6, r5, r3, cr11
    13c0:	756f534b 	strbvc	r5, [pc, #-843]!	; 107d <startup-0x1fffef83>
    13c4:	00656372 	rsbeq	r6, r5, r2, ror r3
    13c8:	4349564e 	movtmi	r5, #38478	; 0x964e
    13cc:	696e495f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, lr}^
    13d0:	72745374 	rsbsvc	r5, r4, #116, 6	; 0xd0000001
    13d4:	00746375 	rsbseq	r6, r4, r5, ror r3
    13d8:	4349564e 	movtmi	r5, #38478	; 0x964e
    13dc:	6972505f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, ip, lr}^
    13e0:	7469726f 	strbtvc	r7, [r9], #-623	; 0xfffffd91
    13e4:	6f724779 	svcvs	0x00724779
    13e8:	4e007075 	mcrmi	0, 0, r7, cr0, cr5, {3}
    13ec:	5f434956 	svcpl	0x00434956
    13f0:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xfffff1b7
    13f4:	706d7400 	rsbvc	r7, sp, r0, lsl #8
    13f8:	00657270 	rsbeq	r7, r5, r0, ror r2
    13fc:	7366664f 	cmnvc	r6, #82837504	; 0x4f00000
    1400:	4e007465 	cdpmi	4, 0, cr7, cr0, cr5, {3}
    1404:	5f434956 	svcpl	0x00434956
    1408:	56746553 			; <UNDEFINED> instruction: 0x56746553
    140c:	6f746365 	svcvs	0x00746365
    1410:	62615472 	rsbvs	r5, r1, #1912602624	; 0x72000000
    1414:	7400656c 	strvc	r6, [r0], #-1388	; 0xfffffa94
    1418:	7573706d 	ldrbvc	r7, [r3, #-109]!	; 0xffffff93
    141c:	564e0062 	strbpl	r0, [lr], -r2, rrx
    1420:	535f4349 	cmppl	pc, #603979777	; 0x24000001
    1424:	65747379 	ldrbvs	r7, [r4, #-889]!	; 0xfffffc87
    1428:	43504c6d 	cmpmi	r0, #27904	; 0x6d00
    142c:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    1430:	79530067 	ldmdbvc	r3, {r0, r1, r2, r5, r6}^
    1434:	63695473 	cmnvs	r9, #1929379840	; 0x73000000
    1438:	4c435f6b 	mcrrmi	15, 6, r5, r3, cr11
    143c:	756f534b 	strbvc	r5, [pc, #-843]!	; 10f9 <startup-0x1fffef07>
    1440:	43656372 	cmnmi	r5, #-939524095	; 0xc8000001
    1444:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    1448:	6d740067 	ldclvs	0, cr0, [r4, #-412]!	; 0xfffffe64
    144c:	69727070 	ldmdbvs	r2!, {r4, r5, r6, ip, sp, lr}^
    1450:	7469726f 	strbtvc	r7, [r9], #-623	; 0xfffffd91
    1454:	564e0079 			; <UNDEFINED> instruction: 0x564e0079
    1458:	495f4349 	ldmdbmi	pc, {r0, r3, r6, r8, r9, lr}^	; <UNPREDICTABLE>
    145c:	68435152 	stmdavs	r3, {r1, r4, r6, r8, ip, lr}^
    1460:	656e6e61 	strbvs	r6, [lr, #-3681]!	; 0xfffff19f
    1464:	564e006c 	strbpl	r0, [lr], -ip, rrx
    1468:	495f4349 	ldmdbmi	pc, {r0, r3, r6, r8, r9, lr}^	; <UNPREDICTABLE>
    146c:	68435152 	stmdavs	r3, {r1, r4, r6, r8, ip, lr}^
    1470:	656e6e61 	strbvs	r6, [lr, #-3681]!	; 0xfffff19f
    1474:	6275536c 	rsbsvs	r5, r5, #108, 6	; 0xb0000001
    1478:	6f697250 	svcvs	0x00697250
    147c:	79746972 	ldmdbvc	r4!, {r1, r4, r5, r6, r8, fp, sp, lr}^
    1480:	49564e00 	ldmdbmi	r6, {r9, sl, fp, lr}^
    1484:	52495f43 	subpl	r5, r9, #268	; 0x10c
    1488:	61684351 	cmnvs	r8, r1, asr r3
    148c:	6c656e6e 	stclvs	14, cr6, [r5], #-440	; 0xfffffe48
    1490:	65657250 	strbvs	r7, [r5, #-592]!	; 0xfffffdb0
    1494:	6974706d 	ldmdbvs	r4!, {r0, r2, r3, r5, r6, ip, sp, lr}^
    1498:	72506e6f 	subsvc	r6, r0, #1776	; 0x6f0
    149c:	69726f69 	ldmdbvs	r2!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
    14a0:	4e007974 			; <UNDEFINED> instruction: 0x4e007974
    14a4:	5f434956 	svcpl	0x00434956
    14a8:	74636556 	strbtvc	r6, [r3], #-1366	; 0xfffffaaa
    14ac:	00626154 	rsbeq	r6, r2, r4, asr r1
    14b0:	552f3a43 	strpl	r3, [pc, #-2627]!	; a75 <startup-0x1ffff58b>
    14b4:	73726573 	cmnvc	r2, #482344960	; 0x1cc00000
    14b8:	6164412f 	cmnvs	r4, pc, lsr #2
    14bc:	4f2f746d 	svcmi	0x002f746d
    14c0:	7244656e 	subvc	r6, r4, #461373440	; 0x1b800000
    14c4:	2f657669 	svccs	0x00657669
    14c8:	756b6f44 	strbvc	r6, [fp, #-3908]!	; 0xfffff0bc
    14cc:	746e656d 	strbtvc	r6, [lr], #-1389	; 0xfffffa93
    14d0:	7469472f 	strbtvc	r4, [r9], #-1839	; 0xfffff8d1
    14d4:	2f627548 	svccs	0x00627548
    14d8:	32544144 	subscc	r4, r4, #68, 2
    14dc:	4c2d3039 	stcmi	0, cr3, [sp], #-228	; 0xffffff1c
    14e0:	736d7261 	cmnvc	sp, #268435462	; 0x10000006
    14e4:	65747379 	ldrbvs	r7, [r4, #-889]!	; 0xfffffc87
    14e8:	6f6b2f6d 	svcvs	0x006b2f6d
    14ec:	696c2f64 	stmdbvs	ip!, {r2, r5, r6, r8, r9, sl, fp, sp}^
    14f0:	54532f62 	ldrbpl	r2, [r3], #-3938	; 0xfffff09e
    14f4:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
    14f8:	696c5f34 	stmdbvs	ip!, {r2, r4, r5, r8, r9, sl, fp, ip, lr}^
    14fc:	54532f62 	ldrbpl	r2, [r3], #-3938	; 0xfffff09e
    1500:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
    1504:	5f787834 	svcpl	0x00787834
    1508:	50647453 	rsbpl	r7, r4, r3, asr r4
    150c:	70697265 	rsbvc	r7, r9, r5, ror #4
    1510:	72445f68 	subvc	r5, r4, #104, 30	; 0x1a0
    1514:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
    1518:	6372732f 	cmnvs	r2, #-1140850688	; 0xbc000000
    151c:	73696d2f 	cmnvc	r9, #3008	; 0xbc0
    1520:	00632e63 	rsbeq	r2, r3, r3, ror #28
    1524:	50776f4c 	rsbspl	r6, r7, ip, asr #30
    1528:	7265776f 	rsbvc	r7, r5, #29097984	; 0x1bc0000
    152c:	65646f4d 	strbvs	r6, [r4, #-3917]!	; 0xfffff0b3
    1530:	49564e00 	ldmdbmi	r6, {r9, sl, fp, lr}^
    1534:	72505f43 	subsvc	r5, r0, #268	; 0x10c
    1538:	69726f69 	ldmdbvs	r2!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
    153c:	72477974 	subvc	r7, r7, #116, 18	; 0x1d0000
    1540:	4370756f 	cmnmi	r0, #465567744	; 0x1bc00000
    1544:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    1548:	75620067 	strbvc	r0, [r2, #-103]!	; 0xffffff99
    154c:	72656666 	rsbvc	r6, r5, #106954752	; 0x6600000
    1550:	00747550 	rsbseq	r7, r4, r0, asr r5
    1554:	552f3a43 	strpl	r3, [pc, #-2627]!	; b19 <startup-0x1ffff4e7>
    1558:	73726573 	cmnvc	r2, #482344960	; 0x1cc00000
    155c:	6164412f 	cmnvs	r4, pc, lsr #2
    1560:	4f2f746d 	svcmi	0x002f746d
    1564:	7244656e 	subvc	r6, r4, #461373440	; 0x1b800000
    1568:	2f657669 	svccs	0x00657669
    156c:	756b6f44 	strbvc	r6, [fp, #-3908]!	; 0xfffff0bc
    1570:	746e656d 	strbtvc	r6, [lr], #-1389	; 0xfffffa93
    1574:	7469472f 	strbtvc	r4, [r9], #-1839	; 0xfffff8d1
    1578:	2f627548 	svccs	0x00627548
    157c:	32544144 	subscc	r4, r4, #68, 2
    1580:	4c2d3039 	stcmi	0, cr3, [sp], #-228	; 0xffffff1c
    1584:	736d7261 	cmnvc	sp, #268435462	; 0x10000006
    1588:	65747379 	ldrbvs	r7, [r4, #-889]!	; 0xfffffc87
    158c:	6f6b2f6d 	svcvs	0x006b2f6d
    1590:	696c2f64 	stmdbvs	ip!, {r2, r5, r6, r8, r9, sl, fp, sp}^
    1594:	75622f62 	strbvc	r2, [r2, #-3938]!	; 0xfffff09e
    1598:	72656666 	rsbvc	r6, r5, #106954752	; 0x6600000
    159c:	4600632e 	strmi	r6, [r0], -lr, lsr #6
    15a0:	004f4649 	subeq	r4, pc, r9, asr #12
    15a4:	74736564 	ldrbtvc	r6, [r3], #-1380	; 0xfffffa9c
    15a8:	66756200 	ldrbtvs	r6, [r5], -r0, lsl #4
    15ac:	6c650066 	stclvs	0, cr0, [r5], #-408	; 0xfffffe68
    15b0:	62006d65 	andvs	r6, r0, #6464	; 0x1940
    15b4:	65666675 	strbvs	r6, [r6, #-1653]!	; 0xfffff98b
    15b8:	74654772 	strbtvc	r4, [r5], #-1906	; 0xfffff88e
    15bc:	66756200 	ldrbtvs	r6, [r5], -r0, lsl #4
    15c0:	49726566 	ldmdbmi	r2!, {r1, r2, r5, r6, r8, sl, sp, lr}^
    15c4:	0074696e 	rsbseq	r6, r4, lr, ror #18
    15c8:	66667562 	strbtvs	r7, [r6], -r2, ror #10
    15cc:	69007265 	stmdbvs	r0, {r0, r2, r5, r6, r9, ip, sp, lr}
    15d0:	6765746e 	strbvs	r7, [r5, -lr, ror #8]!
    15d4:	69647265 	stmdbvs	r4!, {r0, r2, r5, r6, r9, ip, sp, lr}^
    15d8:	65646976 	strbvs	r6, [r4, #-2422]!	; 0xfffff68a
    15dc:	53550072 	cmppl	r5, #114	; 0x72
    15e0:	5f545241 	svcpl	0x00545241
    15e4:	41485043 	cmpmi	r8, r3, asr #32
    15e8:	50544700 	subspl	r4, r4, r0, lsl #14
    15ec:	53550052 	cmppl	r5, #82	; 0x52
    15f0:	5f545241 	svcpl	0x00545241
    15f4:	65636552 	strbvs	r6, [r3, #-1362]!	; 0xfffffaae
    15f8:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
    15fc:	656b6157 	strbvs	r6, [fp, #-343]!	; 0xfffffea9
    1600:	6d437055 	stclvs	0, cr7, [r3, #-340]	; 0xfffffeac
    1604:	53550064 	cmppl	r5, #100	; 0x64
    1608:	5f545241 	svcpl	0x00545241
    160c:	50746553 	rsbspl	r6, r4, r3, asr r5
    1610:	63736572 	cmnvs	r3, #478150656	; 0x1c800000
    1614:	72656c61 	rsbvc	r6, r5, #24832	; 0x6100
    1618:	41535500 	cmpmi	r3, r0, lsl #10
    161c:	495f5452 	ldmdbmi	pc, {r1, r4, r6, sl, ip, lr}^	; <UNPREDICTABLE>
    1620:	0074696e 	rsbseq	r6, r4, lr, ror #18
    1624:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    1628:	494c5f54 	stmdbmi	ip, {r2, r4, r6, r8, r9, sl, fp, ip, lr}^
    162c:	6572424e 	ldrbvs	r4, [r2, #-590]!	; 0xfffffdb2
    1630:	65446b61 	strbvs	r6, [r4, #-2913]	; 0xfffff49f
    1634:	74636574 	strbtvc	r6, [r3], #-1396	; 0xfffffa8c
    1638:	676e654c 	strbvs	r6, [lr, -ip, asr #10]!
    163c:	55006874 	strpl	r6, [r0, #-2164]	; 0xfffff78c
    1640:	54524153 	ldrbpl	r4, [r2], #-339	; 0xfffffead
    1644:	656e4f5f 	strbvs	r4, [lr, #-3935]!	; 0xfffff0a1
    1648:	4d746942 			; <UNDEFINED> instruction: 0x4d746942
    164c:	6f687465 	svcvs	0x00687465
    1650:	646d4364 	strbtvs	r4, [sp], #-868	; 0xfffffc9c
    1654:	41535500 	cmpmi	r3, r0, lsl #10
    1658:	545f5452 	ldrbpl	r5, [pc], #-1106	; 1660 <startup-0x1fffe9a0>
    165c:	44657079 	strbtmi	r7, [r5], #-121	; 0xffffff87
    1660:	55006665 	strpl	r6, [r0, #-1637]	; 0xfffff99b
    1664:	54524153 	ldrbpl	r4, [r2], #-339	; 0xfffffead
    1668:	6f74535f 	svcvs	0x0074535f
    166c:	74694270 	strbtvc	r4, [r9], #-624	; 0xfffffd90
    1670:	53550073 	cmppl	r5, #115	; 0x73
    1674:	5f545241 	svcpl	0x00545241
    1678:	636f6c43 	cmnvs	pc, #17152	; 0x4300
    167c:	696e496b 	stmdbvs	lr!, {r0, r1, r3, r5, r6, r8, fp, lr}^
    1680:	70795474 	rsbsvc	r5, r9, r4, ror r4
    1684:	66654465 	strbtvs	r4, [r5], -r5, ror #8
    1688:	41535500 	cmpmi	r3, r0, lsl #10
    168c:	435f5452 	cmpmi	pc, #1375731712	; 0x52000000
    1690:	5500646d 	strpl	r6, [r0, #-1133]	; 0xfffffb93
    1694:	54524153 	ldrbpl	r4, [r2], #-339	; 0xfffffead
    1698:	6e65535f 	mcrvs	3, 3, r5, cr5, cr15, {2}
    169c:	74614464 	strbtvc	r4, [r1], #-1124	; 0xfffffb9c
    16a0:	53550061 	cmppl	r5, #97	; 0x61
    16a4:	5f545241 	svcpl	0x00545241
    16a8:	656b6157 	strbvs	r6, [fp, #-343]!	; 0xfffffea9
    16ac:	55007055 	strpl	r7, [r0, #-85]	; 0xffffffab
    16b0:	54524153 	ldrbpl	r4, [r2], #-339	; 0xfffffead
    16b4:	726f575f 	rsbvc	r5, pc, #24903680	; 0x17c0000
    16b8:	6e654c64 	cdpvs	12, 6, cr4, cr5, cr4, {3}
    16bc:	00687467 	rsbeq	r7, r8, r7, ror #8
    16c0:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    16c4:	4d445f54 	stclmi	15, cr5, [r4, #-336]	; 0xfffffeb0
    16c8:	646d4341 	strbtvs	r4, [sp], #-833	; 0xfffffcbf
    16cc:	41535500 	cmpmi	r3, r0, lsl #10
    16d0:	4c5f5452 	cfldrdmi	mvd5, [pc], {82}	; 0x52
    16d4:	42747361 	rsbsmi	r7, r4, #-2080374783	; 0x84000001
    16d8:	55007469 	strpl	r7, [r0, #-1129]	; 0xfffffb97
    16dc:	54524153 	ldrbpl	r4, [r2], #-339	; 0xfffffead
    16e0:	7561425f 	strbvc	r4, [r1, #-607]!	; 0xfffffda1
    16e4:	74615264 	strbtvc	r5, [r1], #-612	; 0xfffffd9c
    16e8:	53550065 	cmppl	r5, #101	; 0x65
    16ec:	5f545241 	svcpl	0x00545241
    16f0:	41447249 	cmpmi	r4, r9, asr #4
    16f4:	65646f4d 	strbvs	r6, [r4, #-3917]!	; 0xfffff0b3
    16f8:	62706100 	rsbsvs	r6, r0, #0, 2
    16fc:	636f6c63 	cmnvs	pc, #25344	; 0x6300
    1700:	5355006b 	cmppl	r5, #107	; 0x6b
    1704:	5f545241 	svcpl	0x00545241
    1708:	61656c43 	cmnvs	r5, r3, asr #24
    170c:	50544972 	subspl	r4, r4, r2, ror r9
    1710:	69646e65 	stmdbvs	r4!, {r0, r2, r5, r6, r9, sl, fp, sp, lr}^
    1714:	6942676e 	stmdbvs	r2, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}^
    1718:	53550074 	cmppl	r5, #116	; 0x74
    171c:	5f545241 	svcpl	0x00545241
    1720:	72617547 	rsbvc	r7, r1, #297795584	; 0x11c00000
    1724:	6d695464 	cfstrdvs	mvd5, [r9, #-400]!	; 0xfffffe70
    1728:	53550065 	cmppl	r5, #101	; 0x65
    172c:	5f545241 	svcpl	0x00545241
    1730:	424e494c 	submi	r4, lr, #76, 18	; 0x130000
    1734:	6b616572 	blvs	185ad04 <startup-0x1e7a52fc>
    1738:	65746544 	ldrbvs	r6, [r4, #-1348]!	; 0xfffffabc
    173c:	654c7463 	strbvs	r7, [ip, #-1123]	; 0xfffffb9d
    1740:	6874676e 	ldmdavs	r4!, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}^
    1744:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    1748:	55006769 	strpl	r6, [r0, #-1897]	; 0xfffff897
    174c:	54524153 	ldrbpl	r4, [r2], #-339	; 0xfffffead
    1750:	414c465f 	cmpmi	ip, pc, asr r6
    1754:	53550047 	cmppl	r5, #71	; 0x47
    1758:	5f545241 	svcpl	0x00545241
    175c:	6e496544 	cdpvs	5, 4, cr6, cr9, cr4, {2}
    1760:	55007469 	strpl	r7, [r0, #-1129]	; 0xfffffb97
    1764:	54524153 	ldrbpl	r4, [r2], #-339	; 0xfffffead
    1768:	6f6c435f 	svcvs	0x006c435f
    176c:	6e496b63 	vmlsvs.f64	d22, d9, d19
    1770:	74537469 	ldrbvc	r7, [r3], #-1129	; 0xfffffb97
    1774:	74637572 	strbtvc	r7, [r3], #-1394	; 0xfffffa8e
    1778:	41535500 	cmpmi	r3, r0, lsl #10
    177c:	505f5452 	subspl	r5, pc, r2, asr r4	; <UNPREDICTABLE>
    1780:	74697261 	strbtvc	r7, [r9], #-609	; 0xfffffd9f
    1784:	53550079 	cmppl	r5, #121	; 0x79
    1788:	5f545241 	svcpl	0x00545241
    178c:	636f6c43 	cmnvs	pc, #17152	; 0x4300
    1790:	7274536b 	rsbsvc	r5, r4, #-1409286143	; 0xac000001
    1794:	49746375 	ldmdbmi	r4!, {r0, r2, r4, r5, r6, r8, r9, sp, lr}^
    1798:	0074696e 	rsbseq	r6, r4, lr, ror #18
    179c:	72617375 	rsbvc	r7, r1, #-738197503	; 0xd4000001
    17a0:	61627874 	smcvs	10116	; 0x2784
    17a4:	55006573 	strpl	r6, [r0, #-1395]	; 0xfffffa8d
    17a8:	54524153 	ldrbpl	r4, [r2], #-339	; 0xfffffead
    17ac:	656c435f 	strbvs	r4, [ip, #-863]!	; 0xfffffca1
    17b0:	6c467261 	sfmvs	f7, 2, [r6], {97}	; 0x61
    17b4:	55006761 	strpl	r6, [r0, #-1889]	; 0xfffff89f
    17b8:	54524153 	ldrbpl	r4, [r2], #-339	; 0xfffffead
    17bc:	7465535f 	strbtvc	r5, [r5], #-863	; 0xfffffca1
    17c0:	72646441 	rsbvc	r6, r4, #1090519040	; 0x41000000
    17c4:	00737365 	rsbseq	r7, r3, r5, ror #6
    17c8:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    17cc:	65535f54 	ldrbvs	r5, [r3, #-3924]	; 0xfffff0ac
    17d0:	61754774 	cmnvs	r5, r4, ror r7
    17d4:	69546472 	ldmdbvs	r4, {r1, r4, r5, r6, sl, sp, lr}^
    17d8:	5500656d 	strpl	r6, [r0, #-1389]	; 0xfffffa93
    17dc:	54524153 	ldrbpl	r4, [r2], #-339	; 0xfffffead
    17e0:	6e65535f 	mcrvs	3, 3, r5, cr5, cr15, {2}
    17e4:	65724264 	ldrbvs	r4, [r2, #-612]!	; 0xfffffd9c
    17e8:	55006b61 	strpl	r6, [r0, #-2913]	; 0xfffff49f
    17ec:	54524153 	ldrbpl	r4, [r2], #-339	; 0xfffffead
    17f0:	696e495f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, lr}^
    17f4:	70795474 	rsbsvc	r5, r9, r4, ror r4
    17f8:	66654465 	strbtvs	r4, [r5], -r5, ror #8
    17fc:	41535500 	cmpmi	r3, r0, lsl #10
    1800:	495f5452 	ldmdbmi	pc, {r1, r4, r6, sl, ip, lr}^	; <UNPREDICTABLE>
    1804:	6e6f4354 	mcrvs	3, 3, r4, cr15, cr4, {2}
    1808:	00676966 	rsbeq	r6, r7, r6, ror #18
    180c:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    1810:	4d445f54 	stclmi	15, cr5, [r4, #-336]	; 0xfffffeb0
    1814:	71655241 	cmnvc	r5, r1, asr #4
    1818:	41535500 	cmpmi	r3, r0, lsl #10
    181c:	00785452 	rsbseq	r5, r8, r2, asr r4
    1820:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    1824:	61485f54 	cmpvs	r8, r4, asr pc
    1828:	61776472 	cmnvs	r7, r2, ror r4
    182c:	6c466572 	cfstr64vs	mvdx6, [r6], {114}	; 0x72
    1830:	6f43776f 	svcvs	0x0043776f
    1834:	6f72746e 	svcvs	0x0072746e
    1838:	5355006c 	cmppl	r5, #108	; 0x6c
    183c:	5f545241 	svcpl	0x00545241
    1840:	72616d53 	rsbvc	r6, r1, #5312	; 0x14c0
    1844:	72614374 	rsbvc	r4, r1, #116, 6	; 0xd0000001
    1848:	646d4364 	strbtvs	r4, [sp], #-868	; 0xfffffc9c
    184c:	41535500 	cmpmi	r3, r0, lsl #10
    1850:	4d5f5452 	cfldrdmi	mvd5, [pc, #-328]	; 1710 <startup-0x1fffe8f0>
    1854:	0065646f 	rsbeq	r6, r5, pc, ror #8
    1858:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    185c:	64415f54 	strbvs	r5, [r1], #-3924	; 0xfffff0ac
    1860:	73657264 	cmnvc	r5, #100, 4	; 0x40000006
    1864:	69620073 	stmdbvs	r2!, {r0, r1, r4, r5, r6}^
    1868:	736f7074 	cmnvc	pc, #116	; 0x74
    186c:	41535500 	cmpmi	r3, r0, lsl #10
    1870:	4f5f5452 	svcmi	0x005f5452
    1874:	53726576 	cmnpl	r2, #494927872	; 0x1d800000
    1878:	6c706d61 	ldclvs	13, cr6, [r0], #-388	; 0xfffffe7c
    187c:	38676e69 	stmdacc	r7!, {r0, r3, r5, r6, r9, sl, fp, sp, lr}^
    1880:	00646d43 	rsbeq	r6, r4, r3, asr #26
    1884:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    1888:	65475f54 	strbvs	r5, [r7, #-3924]	; 0xfffff0ac
    188c:	53544974 	cmppl	r4, #116, 18	; 0x1d0000
    1890:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0xfffffe8c
    1894:	53550073 	cmppl	r5, #115	; 0x73
    1898:	5f545241 	svcpl	0x00545241
    189c:	434e494c 	movtmi	r4, #59724	; 0xe94c
    18a0:	5500646d 	strpl	r6, [r0, #-1133]	; 0xfffffb93
    18a4:	54524153 	ldrbpl	r4, [r2], #-339	; 0xfffffead
    18a8:	4472495f 	ldrbtmi	r4, [r2], #-2399	; 0xfffff6a1
    18ac:	6e6f4341 	cdpvs	3, 6, cr4, cr15, cr1, {2}
    18b0:	00676966 	rsbeq	r6, r7, r6, ror #18
    18b4:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    18b8:	6c435f54 	mcrrvs	15, 5, r5, r3, cr4
    18bc:	006b636f 	rsbeq	r6, fp, pc, ror #6
    18c0:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    18c4:	72495f54 	subvc	r5, r9, #84, 30	; 0x150
    18c8:	6d434144 	stfvse	f4, [r3, #-272]	; 0xfffffef0
    18cc:	72660064 	rsbvc	r0, r6, #100	; 0x64
    18d0:	69746361 	ldmdbvs	r4!, {r0, r5, r6, r8, r9, sp, lr}^
    18d4:	6c616e6f 	stclvs	14, cr6, [r1], #-444	; 0xfffffe44
    18d8:	69766964 	ldmdbvs	r6!, {r2, r5, r6, r8, fp, sp, lr}^
    18dc:	00726564 	rsbseq	r6, r2, r4, ror #10
    18e0:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    18e4:	6d535f54 	ldclvs	15, cr5, [r3, #-336]	; 0xfffffeb0
    18e8:	43747261 	cmnmi	r4, #268435462	; 0x10000006
    18ec:	4e647261 	cdpmi	2, 6, cr7, cr4, cr1, {3}
    18f0:	434b4341 	movtmi	r4, #45889	; 0xb341
    18f4:	5500646d 	strpl	r6, [r0, #-1133]	; 0xfffffb93
    18f8:	54524153 	ldrbpl	r4, [r2], #-339	; 0xfffffead
    18fc:	7465475f 	strbtvc	r4, [r5], #-1887	; 0xfffff8a1
    1900:	67616c46 	strbvs	r6, [r1, -r6, asr #24]!
    1904:	74617453 	strbtvc	r7, [r1], #-1107	; 0xfffffbad
    1908:	55007375 	strpl	r7, [r0, #-885]	; 0xfffffc8b
    190c:	54524153 	ldrbpl	r4, [r2], #-339	; 0xfffffead
    1910:	0054495f 	subseq	r4, r4, pc, asr r9
    1914:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    1918:	6e495f54 	mcrvs	15, 2, r5, cr9, cr4, {2}
    191c:	74537469 	ldrbvc	r7, [r3], #-1129	; 0xfffffb97
    1920:	74637572 	strbtvc	r7, [r3], #-1394	; 0xfffffa8e
    1924:	43435200 	movtmi	r5, #12800	; 0x3200
    1928:	6f6c435f 	svcvs	0x006c435f
    192c:	53736b63 	cmnpl	r3, #101376	; 0x18c00
    1930:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0xfffffe8c
    1934:	53550073 	cmppl	r5, #115	; 0x73
    1938:	5f545241 	svcpl	0x00545241
    193c:	636f6c43 	cmnvs	pc, #17152	; 0x4300
    1940:	696e496b 	stmdbvs	lr!, {r0, r1, r3, r5, r6, r8, fp, lr}^
    1944:	53550074 	cmppl	r5, #116	; 0x74
    1948:	5f545241 	svcpl	0x00545241
    194c:	656b6157 	strbvs	r6, [fp, #-343]!	; 0xfffffea9
    1950:	6f437055 	svcvs	0x00437055
    1954:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    1958:	41535500 	cmpmi	r3, r0, lsl #10
    195c:	485f5452 	ldmdami	pc, {r1, r4, r6, sl, ip, lr}^	; <UNPREDICTABLE>
    1960:	44666c61 	strbtmi	r6, [r6], #-3169	; 0xfffff39f
    1964:	656c7075 	strbvs	r7, [ip, #-117]!	; 0xffffff8b
    1968:	646d4378 	strbtvs	r4, [sp], #-888	; 0xfffffc88
    196c:	41535500 	cmpmi	r3, r0, lsl #10
    1970:	535f5452 	cmppl	pc, #1375731712	; 0x52000000
    1974:	63757274 	cmnvs	r5, #116, 4	; 0x40000007
    1978:	696e4974 	stmdbvs	lr!, {r2, r4, r5, r6, r8, fp, lr}^
    197c:	53550074 	cmppl	r5, #116	; 0x74
    1980:	5f545241 	svcpl	0x00545241
    1984:	73657250 	cmnvc	r5, #80, 4
    1988:	656c6163 	strbvs	r6, [ip, #-355]!	; 0xfffffe9d
    198c:	53550072 	cmppl	r5, #114	; 0x72
    1990:	5f545241 	svcpl	0x00545241
    1994:	4c4f5043 	mcrrmi	0, 4, r5, pc, cr3
    1998:	6d746900 			; <UNDEFINED> instruction: 0x6d746900
    199c:	006b7361 	rsbeq	r7, fp, r1, ror #6
    19a0:	552f3a43 	strpl	r3, [pc, #-2627]!	; f65 <startup-0x1ffff09b>
    19a4:	73726573 	cmnvc	r2, #482344960	; 0x1cc00000
    19a8:	6164412f 	cmnvs	r4, pc, lsr #2
    19ac:	4f2f746d 	svcmi	0x002f746d
    19b0:	7244656e 	subvc	r6, r4, #461373440	; 0x1b800000
    19b4:	2f657669 	svccs	0x00657669
    19b8:	756b6f44 	strbvc	r6, [fp, #-3908]!	; 0xfffff0bc
    19bc:	746e656d 	strbtvc	r6, [lr], #-1389	; 0xfffffa93
    19c0:	7469472f 	strbtvc	r4, [r9], #-1839	; 0xfffff8d1
    19c4:	2f627548 	svccs	0x00627548
    19c8:	32544144 	subscc	r4, r4, #68, 2
    19cc:	4c2d3039 	stcmi	0, cr3, [sp], #-228	; 0xffffff1c
    19d0:	736d7261 	cmnvc	sp, #268435462	; 0x10000006
    19d4:	65747379 	ldrbvs	r7, [r4, #-889]!	; 0xfffffc87
    19d8:	6f6b2f6d 	svcvs	0x006b2f6d
    19dc:	696c2f64 	stmdbvs	ip!, {r2, r5, r6, r8, r9, sl, fp, sp}^
    19e0:	54532f62 	ldrbpl	r2, [r3], #-3938	; 0xfffff09e
    19e4:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
    19e8:	696c5f34 	stmdbvs	ip!, {r2, r4, r5, r8, r9, sl, fp, ip, lr}^
    19ec:	54532f62 	ldrbpl	r2, [r3], #-3938	; 0xfffff09e
    19f0:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
    19f4:	5f787834 	svcpl	0x00787834
    19f8:	50647453 	rsbpl	r7, r4, r3, asr r4
    19fc:	70697265 	rsbvc	r7, r9, r5, ror #4
    1a00:	72445f68 	subvc	r5, r4, #104, 30	; 0x1a0
    1a04:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
    1a08:	6372732f 	cmnvs	r2, #-1140850688	; 0xbc000000
    1a0c:	6d74732f 	ldclvs	3, cr7, [r4, #-188]!	; 0xffffff44
    1a10:	34663233 	strbtcc	r3, [r6], #-563	; 0xfffffdcd
    1a14:	755f7878 	ldrbvc	r7, [pc, #-2168]	; 11a4 <startup-0x1fffee5c>
    1a18:	74726173 	ldrbtvc	r6, [r2], #-371	; 0xfffffe8d
    1a1c:	5500632e 	strpl	r6, [r0, #-814]	; 0xfffffcd2
    1a20:	54524153 	ldrbpl	r4, [r2], #-339	; 0xfffffead
    1a24:	6365525f 	cmnvs	r5, #-268435451	; 0xf0000005
    1a28:	65766965 	ldrbvs	r6, [r6, #-2405]!	; 0xfffff69b
    1a2c:	61746144 	cmnvs	r4, r4, asr #2
    1a30:	61737500 	cmnvs	r3, r0, lsl #10
    1a34:	65727472 	ldrbvs	r7, [r2, #-1138]!	; 0xfffffb8e
    1a38:	78740067 	ldmdavc	r4!, {r0, r1, r2, r5, r6}^
    1a3c:	66667542 	strbtvs	r7, [r6], -r2, asr #10
    1a40:	5f007265 	svcpl	0x00007265
    1a44:	636f6c5f 	cmnvs	pc, #24320	; 0x5f00
    1a48:	5f656c61 	svcpl	0x00656c61
    1a4c:	5f5f0074 	svcpl	0x005f0074
    1a50:	756c6176 	strbvc	r6, [ip, #-374]!	; 0xfffffe8a
    1a54:	5f5f0065 	svcpl	0x005f0065
    1a58:	43006673 	movwmi	r6, #1651	; 0x673
    1a5c:	73552f3a 	cmpvc	r5, #58, 30	; 0xe8
    1a60:	2f737265 	svccs	0x00737265
    1a64:	6d616441 	cfstrdvs	mvd6, [r1, #-260]!	; 0xfffffefc
    1a68:	6e4f2f74 	mcrvs	15, 2, r2, cr15, cr4, {3}
    1a6c:	69724465 	ldmdbvs	r2!, {r0, r2, r5, r6, sl, lr}^
    1a70:	442f6576 	strtmi	r6, [pc], #-1398	; 1a78 <startup-0x1fffe588>
    1a74:	6d756b6f 	fldmdbxvs	r5!, {d22-d76}	;@ Deprecated
    1a78:	2f746e65 	svccs	0x00746e65
    1a7c:	48746947 	ldmdami	r4!, {r0, r1, r2, r6, r8, fp, sp, lr}^
    1a80:	442f6275 	strtmi	r6, [pc], #-629	; 1a88 <startup-0x1fffe578>
    1a84:	39325441 	ldmdbcc	r2!, {r0, r6, sl, ip, lr}
    1a88:	614c2d30 	cmpvs	ip, r0, lsr sp
    1a8c:	79736d72 	ldmdbvc	r3!, {r1, r4, r5, r6, r8, sl, fp, sp, lr}^
    1a90:	6d657473 	cfstrdvs	mvd7, [r5, #-460]!	; 0xfffffe34
    1a94:	646f6b2f 	strbtvs	r6, [pc], #-2863	; 1a9c <startup-0x1fffe564>
    1a98:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    1a9c:	4153552f 	cmpmi	r3, pc, lsr #10
    1aa0:	632e5452 			; <UNDEFINED> instruction: 0x632e5452
    1aa4:	635f5f00 	cmpvs	pc, #0, 30
    1aa8:	6e61656c 	cdpvs	5, 6, cr6, cr1, cr12, {3}
    1aac:	5f007075 	svcpl	0x00007075
    1ab0:	74697277 	strbtvc	r7, [r9], #-631	; 0xfffffd89
    1ab4:	615f0065 	cmpvs	pc, r5, rrx
    1ab8:	69746373 	ldmdbvs	r4!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
    1abc:	625f656d 	subsvs	r6, pc, #457179136	; 0x1b400000
    1ac0:	5f006675 	svcpl	0x00006675
    1ac4:	6c747663 	ldclvs	6, cr7, [r4], #-396	; 0xfffffe74
    1ac8:	5f006e65 	svcpl	0x00006e65
    1acc:	73756e75 	cmnvc	r5, #1872	; 0x750
    1ad0:	5f006465 	svcpl	0x00006465
    1ad4:	006d745f 	rsbeq	r7, sp, pc, asr r4
    1ad8:	7363775f 	cmnvc	r3, #24903680	; 0x17c0000
    1adc:	6d6f7472 	cfstrdvs	mvd7, [pc, #-456]!	; 191c <startup-0x1fffe6e4>
    1ae0:	735f7362 	cmpvc	pc, #-2013265919	; 0x88000001
    1ae4:	65746174 	ldrbvs	r6, [r4, #-372]!	; 0xfffffe8c
    1ae8:	626e5f00 	rsbvs	r5, lr, #0, 30
    1aec:	5f006675 	svcpl	0x00006675
    1af0:	5f6d745f 	svcpl	0x006d745f
    1af4:	00636573 	rsbeq	r6, r3, r3, ror r5
    1af8:	34366c5f 	ldrtcc	r6, [r6], #-3167	; 0xfffff3a1
    1afc:	75625f61 	strbvc	r5, [r2, #-3937]!	; 0xfffff09f
    1b00:	6d5f0066 	ldclvs	0, cr0, [pc, #-408]	; 1970 <startup-0x1fffe690>
    1b04:	00746c75 	rsbseq	r6, r4, r5, ror ip
    1b08:	4349564e 	movtmi	r5, #38478	; 0x964e
    1b0c:	696e495f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, lr}^
    1b10:	72745374 	rsbsvc	r5, r4, #116, 6	; 0xd0000001
    1b14:	75746375 	ldrbvc	r6, [r4, #-885]!	; 0xfffffc8b
    1b18:	5f006572 	svcpl	0x00006572
    1b1c:	6863775f 	stmdavs	r3!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, sp, lr}^
    1b20:	69665f00 	stmdbvs	r6!, {r8, r9, sl, fp, ip, lr}^
    1b24:	5f00656c 	svcpl	0x0000656c
    1b28:	655f6e6f 	ldrbvs	r6, [pc, #-3695]	; cc1 <startup-0x1ffff33f>
    1b2c:	5f746978 	svcpl	0x00746978
    1b30:	73677261 	cmnvc	r7, #268435462	; 0x10000006
    1b34:	626d5f00 	rsbvs	r5, sp, #0, 30
    1b38:	6e656c72 	mcrvs	12, 3, r6, cr5, cr2, {3}
    1b3c:	6174735f 	cmnvs	r4, pc, asr r3
    1b40:	5f006574 	svcpl	0x00006574
    1b44:	75736572 	ldrbvc	r6, [r3, #-1394]!	; 0xfffffa8e
    1b48:	6b5f746c 	blvs	17ded00 <startup-0x1e821300>
    1b4c:	69735f00 	ldmdbvs	r3!, {r8, r9, sl, fp, ip, lr}^
    1b50:	5f00657a 	svcpl	0x0000657a
    1b54:	61636f6c 	cmnvs	r3, ip, ror #30
    1b58:	6d69746c 	cfstrdvs	mvd7, [r9, #-432]!	; 0xfffffe50
    1b5c:	75625f65 	strbvc	r5, [r2, #-3941]!	; 0xfffff09b
    1b60:	5f5f0066 	svcpl	0x005f0066
    1b64:	6d5f6d74 	ldclvs	13, cr6, [pc, #-464]	; 199c <startup-0x1fffe664>
    1b68:	55006e6f 	strpl	r6, [r0, #-3695]	; 0xfffff191
    1b6c:	54524153 	ldrbpl	r4, [r2], #-339	; 0xfffffead
    1b70:	696e495f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, lr}^
    1b74:	72745374 	rsbsvc	r5, r4, #116, 6	; 0xd0000001
    1b78:	75746375 	ldrbvc	r6, [r4, #-885]!	; 0xfffffc8b
    1b7c:	5f006572 	svcpl	0x00006572
    1b80:	73756e75 	cmnvc	r5, #1872	; 0x750
    1b84:	725f6465 	subsvc	r6, pc, #1694498816	; 0x65000000
    1b88:	00646e61 	rsbeq	r6, r4, r1, ror #28
    1b8c:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    1b90:	69725054 	ldmdbvs	r2!, {r2, r4, r6, ip, lr}^
    1b94:	754e746e 	strbvc	r7, [lr, #-1134]	; 0xfffffb92
    1b98:	755f006d 	ldrbvc	r0, [pc, #-109]	; 1b33 <startup-0x1fffe4cd>
    1b9c:	6570736e 	ldrbvs	r7, [r0, #-878]!	; 0xfffffc92
    1ba0:	69666963 	stmdbvs	r6!, {r0, r1, r5, r6, r8, fp, sp, lr}^
    1ba4:	6c5f6465 	cfldrdvs	mvd6, [pc], {101}	; 0x65
    1ba8:	6c61636f 	stclvs	3, cr6, [r1], #-444	; 0xfffffe44
    1bac:	6e695f65 	cdpvs	15, 6, cr5, cr9, cr5, {3}
    1bb0:	5f006f66 	svcpl	0x00006f66
    1bb4:	6e656572 	mcrvs	5, 3, r6, cr5, cr2, {3}
    1bb8:	675f0074 			; <UNDEFINED> instruction: 0x675f0074
    1bbc:	61626f6c 	cmnvs	r2, ip, ror #30
    1bc0:	6d695f6c 	stclvs	15, cr5, [r9, #-432]!	; 0xfffffe50
    1bc4:	65727570 	ldrbvs	r7, [r2, #-1392]!	; 0xfffffa90
    1bc8:	7274705f 	rsbsvc	r7, r4, #95	; 0x5f
    1bcc:	6e665f00 	cdpvs	15, 6, cr5, cr6, cr0, {0}
    1bd0:	735f0073 	cmpvc	pc, #115	; 0x73
    1bd4:	6e696474 	mcrvs	4, 3, r6, cr9, cr4, {3}
    1bd8:	67696400 	strbvs	r6, [r9, -r0, lsl #8]!
    1bdc:	72417469 	subvc	r7, r1, #1761607680	; 0x69000000
    1be0:	635f0072 	cmpvs	pc, #114	; 0x72
    1be4:	696b6f6f 	stmdbvs	fp!, {r0, r1, r2, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
    1be8:	775f0065 	ldrbvc	r0, [pc, -r5, rrx]
    1bec:	5f007364 	svcpl	0x00007364
    1bf0:	636f6c5f 	cmnvs	pc, #24320	; 0x5f00
    1bf4:	6964006b 	stmdbvs	r4!, {r0, r1, r3, r5, r6}^
    1bf8:	00746967 	rsbseq	r6, r4, r7, ror #18
    1bfc:	6769735f 			; <UNDEFINED> instruction: 0x6769735f
    1c00:	6e75665f 	mrcvs	6, 3, r6, cr5, cr15, {2}
    1c04:	635f0063 	cmpvs	pc, #99	; 0x63
    1c08:	75627476 	strbvc	r7, [r2, #-1142]!	; 0xfffffb8a
    1c0c:	78720066 	ldmdavc	r2!, {r1, r2, r5, r6}^
    1c10:	66667542 	strbtvs	r7, [r6], -r2, asr #10
    1c14:	5f007265 	svcpl	0x00007265
    1c18:	00733570 	rsbseq	r3, r3, r0, ror r5
    1c1c:	46735f5f 	uhsaxmi	r5, r3, pc	; <UNPREDICTABLE>
    1c20:	00454c49 	subeq	r4, r5, r9, asr #24
    1c24:	64735f5f 	ldrbtvs	r5, [r3], #-3935	; 0xfffff0a1
    1c28:	6e696469 	cdpvs	4, 6, cr6, cr9, cr9, {3}
    1c2c:	5f007469 	svcpl	0x00007469
    1c30:	67616c66 	strbvs	r6, [r1, -r6, ror #24]!
    1c34:	55003273 	strpl	r3, [r0, #-627]	; 0xfffffd8d
    1c38:	54524153 	ldrbpl	r4, [r2], #-339	; 0xfffffead
    1c3c:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    1c40:	5f006769 	svcpl	0x00006769
    1c44:	6e676973 			; <UNDEFINED> instruction: 0x6e676973
    1c48:	625f6c61 	subsvs	r6, pc, #24832	; 0x6100
    1c4c:	5f006675 	svcpl	0x00006675
    1c50:	69676942 	stmdbvs	r7!, {r1, r6, r8, fp, sp, lr}^
    1c54:	5f00746e 	svcpl	0x0000746e
    1c58:	7778616d 	ldrbvc	r6, [r8, -sp, ror #2]!
    1c5c:	5f007364 	svcpl	0x00007364
    1c60:	78657461 	stmdavc	r5!, {r0, r5, r6, sl, ip, sp, lr}^
    1c64:	00307469 	eorseq	r7, r0, r9, ror #8
    1c68:	656d655f 	strbvs	r6, [sp, #-1375]!	; 0xfffffaa1
    1c6c:	6e656772 	mcrvs	7, 3, r6, cr5, cr2, {3}
    1c70:	5f007963 	svcpl	0x00007963
    1c74:	626f696e 	rsbvs	r6, pc, #1802240	; 0x1b8000
    1c78:	53550073 	cmppl	r5, #115	; 0x73
    1c7c:	31545241 	cmpcc	r4, r1, asr #4
    1c80:	5152495f 	cmppl	r2, pc, asr r9
    1c84:	646e6148 	strbtvs	r6, [lr], #-328	; 0xfffffeb8
    1c88:	0072656c 	rsbseq	r6, r2, ip, ror #10
    1c8c:	67735f5f 			; <UNDEFINED> instruction: 0x67735f5f
    1c90:	0065756c 	rsbeq	r7, r5, ip, ror #10
    1c94:	616d6e5f 	cmnvs	sp, pc, asr lr
    1c98:	636f6c6c 	cmnvs	pc, #108, 24	; 0x6c00
    1c9c:	756f6400 	strbvc	r6, [pc, #-1024]!	; 18a4 <startup-0x1fffe75c>
    1ca0:	00656c62 	rsbeq	r6, r5, r2, ror #24
    1ca4:	6d61675f 	stclvs	7, cr6, [r1, #-380]!	; 0xfffffe84
    1ca8:	735f616d 	cmpvc	pc, #1073741851	; 0x4000001b
    1cac:	676e6769 	strbvs	r6, [lr, -r9, ror #14]!
    1cb0:	55006d61 	strpl	r6, [r0, #-3425]	; 0xfffff29f
    1cb4:	54524153 	ldrbpl	r4, [r2], #-339	; 0xfffffead
    1cb8:	6e697250 	mcrvs	2, 3, r7, cr9, cr0, {2}
    1cbc:	665f0074 			; <UNDEFINED> instruction: 0x665f0074
    1cc0:	6c656572 	cfstr64vs	mvdx6, [r5], #-456	; 0xfffffe38
    1cc4:	00747369 	rsbseq	r7, r4, r9, ror #6
    1cc8:	626f695f 	rsbvs	r6, pc, #1556480	; 0x17c000
    1ccc:	675f0073 			; <UNDEFINED> instruction: 0x675f0073
    1cd0:	0065756c 	rsbeq	r7, r5, ip, ror #10
    1cd4:	6769735f 			; <UNDEFINED> instruction: 0x6769735f
    1cd8:	6c66006e 	stclvs	0, cr0, [r6], #-440	; 0xfffffe48
    1cdc:	0074616f 	rsbseq	r6, r4, pc, ror #2
    1ce0:	6c616572 	cfstr64vs	mvdx6, [r1], #-456	; 0xfffffe38
    1ce4:	75427852 	strbvc	r7, [r2, #-2130]	; 0xfffff7ae
    1ce8:	72656666 	rsbvc	r6, r5, #106954752	; 0x6600000
    1cec:	5f685f00 	svcpl	0x00685f00
    1cf0:	6e727265 	cdpvs	2, 7, cr7, cr2, cr5, {3}
    1cf4:	775f006f 	ldrbvc	r0, [pc, -pc, rrx]
    1cf8:	6f747263 	svcvs	0x00747263
    1cfc:	735f626d 	cmpvc	pc, #-805306362	; 0xd0000006
    1d00:	65746174 	ldrbvs	r6, [r4, #-372]!	; 0xfffffe8c
    1d04:	745f5f00 	ldrbvc	r5, [pc], #-3840	; 1d0c <startup-0x1fffe2f4>
    1d08:	646d5f6d 	strbtvs	r5, [sp], #-3949	; 0xfffff093
    1d0c:	5f007961 	svcpl	0x00007961
    1d10:	0077656e 	rsbseq	r6, r7, lr, ror #10
    1d14:	7562755f 	strbvc	r7, [r2, #-1375]!	; 0xfffffaa1
    1d18:	735f0066 	cmpvc	pc, #102	; 0x66
    1d1c:	72656474 	rsbvc	r6, r5, #116, 8	; 0x74000000
    1d20:	775f0072 			; <UNDEFINED> instruction: 0x775f0072
    1d24:	6d6f7463 	cfstrdvs	mvd7, [pc, #-396]!	; 1ba0 <startup-0x1fffe460>
    1d28:	74735f62 	ldrbtvc	r5, [r3], #-3938	; 0xfffff09e
    1d2c:	00657461 	rsbeq	r7, r5, r1, ror #8
    1d30:	73626d5f 	cmnvc	r2, #6080	; 0x17c0
    1d34:	65746174 	ldrbvs	r6, [r4, #-372]!	; 0xfffffe8c
    1d38:	61725f00 	cmnvs	r2, r0, lsl #30
    1d3c:	6e5f646e 	cdpvs	4, 5, cr6, cr15, cr14, {3}
    1d40:	00747865 	rsbseq	r7, r4, r5, ror #16
    1d44:	616c665f 	cmnvs	ip, pc, asr r6
    1d48:	5f007367 	svcpl	0x00007367
    1d4c:	78657461 	stmdavc	r5!, {r0, r5, r6, sl, ip, sp, lr}^
    1d50:	5f007469 	svcpl	0x00007469
    1d54:	756f635f 	strbvc	r6, [pc, #-863]!	; 19fd <startup-0x1fffe603>
    1d58:	5500746e 	strpl	r7, [r0, #-1134]	; 0xfffffb92
    1d5c:	54524153 	ldrbpl	r4, [r2], #-339	; 0xfffffead
    1d60:	6e697250 	mcrvs	2, 3, r7, cr9, cr0, {2}
    1d64:	6d754e74 	ldclvs	14, cr4, [r5, #-464]!	; 0xfffffe30
    1d68:	65736142 	ldrbvs	r6, [r3, #-322]!	; 0xfffffebe
    1d6c:	41535500 	cmpmi	r3, r0, lsl #10
    1d70:	65475452 	strbvs	r5, [r7, #-1106]	; 0xfffffbae
    1d74:	635f0074 	cmpvs	pc, #116	; 0x74
    1d78:	65736f6c 	ldrbvs	r6, [r3, #-3948]!	; 0xfffff094
    1d7c:	745f5f00 	ldrbvc	r5, [pc], #-3840	; 1d84 <startup-0x1fffe27c>
    1d80:	64795f6d 	ldrbtvs	r5, [r9], #-3949	; 0xfffff093
    1d84:	72007961 	andvc	r7, r0, #1589248	; 0x184000
    1d88:	4f646165 	svcmi	0x00646165
    1d8c:	735f006b 	cmpvc	pc, #107	; 0x6b
    1d90:	00646565 	rsbeq	r6, r4, r5, ror #10
    1d94:	6565735f 	strbvs	r7, [r5, #-863]!	; 0xfffffca1
    1d98:	665f006b 	ldrbvs	r0, [pc], -fp, rrx
    1d9c:	5f736f70 	svcpl	0x00736f70
    1da0:	5f5f0074 	svcpl	0x005f0074
    1da4:	62686377 	rsbvs	r6, r8, #-603979775	; 0xdc000001
    1da8:	626d5f00 	rsbvs	r5, sp, #0, 30
    1dac:	63776f74 	cmnvs	r7, #116, 30	; 0x1d0
    1db0:	6174735f 	cmnvs	r4, pc, asr r3
    1db4:	5f006574 	svcpl	0x00006574
    1db8:	5f6f7364 	svcpl	0x006f7364
    1dbc:	646e6168 	strbtvs	r6, [lr], #-360	; 0xfffffe98
    1dc0:	5f00656c 	svcpl	0x0000656c
    1dc4:	646e6172 	strbtvs	r6, [lr], #-370	; 0xfffffe8e
    1dc8:	5f003834 	svcpl	0x00003834
    1dcc:	6f647473 	svcvs	0x00647473
    1dd0:	5f007475 	svcpl	0x00007475
    1dd4:	736b6c62 	cmnvc	fp, #25088	; 0x6200
    1dd8:	00657a69 	rsbeq	r7, r5, r9, ror #20
    1ddc:	4f495047 	svcmi	0x00495047
    1de0:	696e495f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, lr}^
    1de4:	72745374 	rsbsvc	r5, r4, #116, 6	; 0xd0000001
    1de8:	75746375 	ldrbvc	r6, [r4, #-885]!	; 0xfffffc8b
    1dec:	5f006572 	svcpl	0x00006572
    1df0:	65736162 	ldrbvs	r6, [r3, #-354]!	; 0xfffffe9e
    1df4:	74735f00 	ldrbtvc	r5, [r3], #-3840	; 0xfffff100
    1df8:	6b6f7472 	blvs	1bdefc8 <startup-0x1e421038>
    1dfc:	73616c5f 	cmnvc	r1, #24320	; 0x5f00
    1e00:	6d5f0074 	ldclvs	0, cr0, [pc, #-464]	; 1c38 <startup-0x1fffe3c8>
    1e04:	6f747262 	svcvs	0x00747262
    1e08:	735f6377 	cmpvc	pc, #-603979775	; 0xdc000001
    1e0c:	65746174 	ldrbvs	r6, [r4, #-372]!	; 0xfffffe8c
    1e10:	6c665f00 	stclvs	15, cr5, [r6], #-0
    1e14:	5f6b636f 	svcpl	0x006b636f
    1e18:	5f5f0074 	svcpl	0x005f0074
    1e1c:	454c4946 	strbmi	r4, [ip, #-2374]	; 0xfffff6ba
    1e20:	626d5f00 	rsbvs	r5, sp, #0, 30
    1e24:	74617473 	strbtvc	r7, [r1], #-1139	; 0xfffffb8d
    1e28:	00745f65 	rsbseq	r5, r4, r5, ror #30
    1e2c:	3834725f 	ldmdacc	r4!, {r0, r1, r2, r3, r4, r6, r9, ip, sp, lr}
    1e30:	6e697700 	cdpvs	7, 6, cr7, cr9, cr0, {0}
    1e34:	00745f74 	rsbseq	r5, r4, r4, ror pc
    1e38:	7461645f 	strbtvc	r6, [r1], #-1119	; 0xfffffba1
    1e3c:	6d5f0061 	ldclvs	0, cr0, [pc, #-388]	; 1cc0 <startup-0x1fffe340>
    1e40:	6e656c62 	cdpvs	12, 6, cr6, cr5, cr2, {3}
    1e44:	6174735f 	cmnvs	r4, pc, asr r3
    1e48:	72006574 	andvc	r6, r0, #116, 10	; 0x1d000000
    1e4c:	546c6165 	strbtpl	r6, [ip], #-357	; 0xfffffe9b
    1e50:	66754278 			; <UNDEFINED> instruction: 0x66754278
    1e54:	00726566 	rsbseq	r6, r2, r6, ror #10
    1e58:	746e665f 	strbtvc	r6, [lr], #-1631	; 0xfffff9a1
    1e5c:	73657079 	cmnvc	r5, #121	; 0x79
    1e60:	646e6900 	strbtvs	r6, [lr], #-2304	; 0xfffff700
    1e64:	5f007865 	svcpl	0x00007865
    1e68:	5f6d745f 	svcpl	0x006d745f
    1e6c:	72616579 	rsbvc	r6, r1, #507510784	; 0x1e400000
    1e70:	626c5f00 	rsbvs	r5, ip, #0, 30
    1e74:	7a697366 	bvc	1a5ec14 <startup-0x1e5a13ec>
    1e78:	695f0065 	ldmdbvs	pc, {r0, r2, r5, r6}^	; <UNPREDICTABLE>
    1e7c:	5f00636e 	svcpl	0x0000636e
    1e80:	00646e69 	rsbeq	r6, r4, r9, ror #28
    1e84:	62735f5f 	rsbsvs	r5, r3, #380	; 0x17c
    1e88:	5f006675 	svcpl	0x00006675
    1e8c:	635f7369 	cmpvs	pc, #-1543503871	; 0xa4000001
    1e90:	5f006178 	svcpl	0x00006178
    1e94:	4b434f4c 	blmi	10d5bcc <startup-0x1ef2a434>
    1e98:	5f00545f 	svcpl	0x0000545f
    1e9c:	7478656e 	ldrbtvc	r6, [r8], #-1390	; 0xfffffa92
    1ea0:	6c5f0066 	mrrcvs	0, 6, r0, pc, cr6	; <UNPREDICTABLE>
    1ea4:	6c61636f 	stclvs	3, cr6, [r1], #-444	; 0xfffffe44
    1ea8:	5f5f0065 	svcpl	0x005f0065
    1eac:	6e6f4c55 	mcrvs	12, 3, r4, cr15, cr5, {2}
    1eb0:	725f0067 	subsvc	r0, pc, #103	; 0x67
    1eb4:	6c757365 	ldclvs	3, cr7, [r5], #-404	; 0xfffffe6c
    1eb8:	6f5f0074 	svcvs	0x005f0074
    1ebc:	745f6666 	ldrbvc	r6, [pc], #-1638	; 1ec4 <startup-0x1fffe13c>
    1ec0:	64615f00 	strbtvs	r5, [r1], #-3840	; 0xfffff100
    1ec4:	5f5f0064 	svcpl	0x005f0064
    1ec8:	685f6d74 	ldmdavs	pc, {r2, r4, r5, r6, r8, sl, fp, sp, lr}^	; <UNPREDICTABLE>
    1ecc:	0072756f 	rsbseq	r7, r2, pc, ror #10
    1ed0:	6d745f5f 	ldclvs	15, cr5, [r4, #-380]!	; 0xfffffe84
    1ed4:	6164775f 	cmnvs	r4, pc, asr r7
    1ed8:	6d5f0079 	ldclvs	0, cr0, [pc, #-484]	; 1cfc <startup-0x1fffe304>
    1edc:	74727362 	ldrbtvc	r7, [r2], #-866	; 0xfffffc9e
    1ee0:	7363776f 	cmnvc	r3, #29097984	; 0x1bc0000
    1ee4:	6174735f 	cmnvs	r4, pc, asr r3
    1ee8:	5f006574 	svcpl	0x00006574
    1eec:	7366666f 	cmnvc	r6, #116391936	; 0x6f00000
    1ef0:	5f007465 	svcpl	0x00007465
    1ef4:	72616e66 	rsbvc	r6, r1, #1632	; 0x660
    1ef8:	5f007367 	svcpl	0x00007367
    1efc:	5f6d745f 	svcpl	0x006d745f
    1f00:	73647369 	cmnvc	r4, #-1543503871	; 0xa4000001
    1f04:	53550074 	cmppl	r5, #116	; 0x74
    1f08:	50545241 	subspl	r5, r4, r1, asr #4
    1f0c:	5f007475 	svcpl	0x00007475
    1f10:	5f6d745f 	svcpl	0x006d745f
    1f14:	006e696d 	rsbeq	r6, lr, sp, ror #18
    1f18:	7465675f 	strbtvc	r6, [r5], #-1887	; 0xfffff8a1
    1f1c:	65746164 	ldrbvs	r6, [r4, #-356]!	; 0xfffffe9c
    1f20:	7272655f 	rsbsvc	r6, r2, #398458880	; 0x17c00000
	...

Disassembly of section .comment:

00000000 <.comment>:
   0:	3a434347 	bcc	10d0d24 <startup-0x1ef2f2dc>
   4:	4e472820 	cdpmi	8, 4, cr2, cr7, cr0, {1}
   8:	6f542055 	svcvs	0x00542055
   c:	20736c6f 	rsbscs	r6, r3, pc, ror #24
  10:	20726f66 	rsbscs	r6, r2, r6, ror #30
  14:	206d7241 	rsbcs	r7, sp, r1, asr #4
  18:	65626d45 	strbvs	r6, [r2, #-3397]!	; 0xfffff2bb
  1c:	64656464 	strbtvs	r6, [r5], #-1124	; 0xfffffb9c
  20:	6f725020 	svcvs	0x00725020
  24:	73736563 	cmnvc	r3, #415236096	; 0x18c00000
  28:	2073726f 	rsbscs	r7, r3, pc, ror #4
  2c:	30322d37 	eorscc	r2, r2, r7, lsr sp
  30:	712d3731 			; <UNDEFINED> instruction: 0x712d3731
  34:	616d2d34 	cmnvs	sp, r4, lsr sp
  38:	29726f6a 	ldmdbcs	r2!, {r1, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
  3c:	322e3720 	eorcc	r3, lr, #32, 14	; 0x800000
  40:	3220312e 	eorcc	r3, r0, #-2147483637	; 0x8000000b
  44:	30373130 	eorscc	r3, r7, r0, lsr r1
  48:	20343039 	eorscs	r3, r4, r9, lsr r0
  4c:	6c657228 	sfmvs	f7, 2, [r5], #-160	; 0xffffff60
  50:	65736165 	ldrbvs	r6, [r3, #-357]!	; 0xfffffe9b
  54:	415b2029 	cmpmi	fp, r9, lsr #32
  58:	652f4d52 	strvs	r4, [pc, #-3410]!	; fffff30e <APBAHBPrescTable+0xdfffcb42>
  5c:	6465626d 	strbtvs	r6, [r5], #-621	; 0xfffffd93
  60:	2d646564 	cfstr64cs	mvdx6, [r4, #-400]!	; 0xfffffe70
  64:	72622d37 	rsbvc	r2, r2, #3520	; 0xdc0
  68:	68636e61 	stmdavs	r3!, {r0, r5, r6, r9, sl, fp, sp, lr}^
  6c:	76657220 	strbtvc	r7, [r5], -r0, lsr #4
  70:	6f697369 	svcvs	0x00697369
  74:	3532206e 	ldrcc	r2, [r2, #-110]!	; 0xffffff92
  78:	34303235 	ldrtcc	r3, [r0], #-565	; 0xfffffdcb
  7c:	Address 0x0000007c is out of bounds.


Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00002b41 	andeq	r2, r0, r1, asr #22
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	00000021 	andeq	r0, r0, r1, lsr #32
  10:	2d533605 	ldclcs	6, cr3, [r3, #-20]	; 0xffffffec
  14:	0c06004d 	stceq	0, cr0, [r6], {77}	; 0x4d
  18:	01094d07 	tsteq	r9, r7, lsl #26
  1c:	01140412 	tsteq	r4, r2, lsl r4
  20:	03170115 	tsteq	r7, #1073741829	; 0x40000005
  24:	01190118 	tsteq	r9, r8, lsl r1
  28:	061e011a 			; <UNDEFINED> instruction: 0x061e011a

Disassembly of section .debug_frame:

00000000 <.debug_frame>:
   0:	0000000c 	andeq	r0, r0, ip
   4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   8:	7c020001 	stcvc	0, cr0, [r2], {1}
   c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  10:	0000001c 	andeq	r0, r0, ip, lsl r0
  14:	00000000 	andeq	r0, r0, r0
  18:	20000010 	andcs	r0, r0, r0, lsl r0
  1c:	00000060 	andeq	r0, r0, r0, rrx
  20:	40080e41 	andmi	r0, r8, r1, asr #28
  24:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  28:	100e4101 	andne	r4, lr, r1, lsl #2
  2c:	00070d41 	andeq	r0, r7, r1, asr #26
  30:	0000001c 	andeq	r0, r0, ip, lsl r0
  34:	00000000 	andeq	r0, r0, r0
  38:	20000070 	andcs	r0, r0, r0, ror r0
  3c:	00000048 	andeq	r0, r0, r8, asr #32
  40:	40080e41 	andmi	r0, r8, r1, asr #28
  44:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  48:	100e4101 	andne	r4, lr, r1, lsl #2
  4c:	00070d41 	andeq	r0, r7, r1, asr #26
  50:	00000018 	andeq	r0, r0, r8, lsl r0
  54:	00000000 	andeq	r0, r0, r0
  58:	200000b8 	strhcs	r0, [r0], -r8
  5c:	00000070 	andeq	r0, r0, r0, ror r0
  60:	40080e41 	andmi	r0, r8, r1, asr #28
  64:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  68:	070d4101 	streq	r4, [sp, -r1, lsl #2]
  6c:	0000001c 	andeq	r0, r0, ip, lsl r0
  70:	00000000 	andeq	r0, r0, r0
  74:	20000128 	andcs	r0, r0, r8, lsr #2
  78:	00000028 	andeq	r0, r0, r8, lsr #32
  7c:	40080e41 	andmi	r0, r8, r1, asr #28
  80:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  84:	100e4101 	andne	r4, lr, r1, lsl #2
  88:	00070d41 	andeq	r0, r7, r1, asr #26
  8c:	00000020 	andeq	r0, r0, r0, lsr #32
  90:	00000000 	andeq	r0, r0, r0
  94:	20000150 	andcs	r0, r0, r0, asr r1
  98:	0000005e 	andeq	r0, r0, lr, asr r0
  9c:	400c0e41 	andmi	r0, ip, r1, asr #28
  a0:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
  a4:	018e4002 	orreq	r4, lr, r2
  a8:	41180e41 	tstmi	r8, r1, asr #28
  ac:	0000070d 	andeq	r0, r0, sp, lsl #14
  b0:	0000001c 	andeq	r0, r0, ip, lsl r0
  b4:	00000000 	andeq	r0, r0, r0
  b8:	200001ae 	andcs	r0, r0, lr, lsr #3
  bc:	0000003e 	andeq	r0, r0, lr, lsr r0
  c0:	40080e41 	andmi	r0, r8, r1, asr #28
  c4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  c8:	180e4101 	stmdane	lr, {r0, r8, lr}
  cc:	00070d41 	andeq	r0, r7, r1, asr #26
  d0:	0000001c 	andeq	r0, r0, ip, lsl r0
  d4:	00000000 	andeq	r0, r0, r0
  d8:	200001ec 	andcs	r0, r0, ip, ror #3
  dc:	00000020 	andeq	r0, r0, r0, lsr #32
  e0:	40080e41 	andmi	r0, r8, r1, asr #28
  e4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  e8:	100e4101 	andne	r4, lr, r1, lsl #2
  ec:	00070d41 	andeq	r0, r7, r1, asr #26
  f0:	0000001c 	andeq	r0, r0, ip, lsl r0
  f4:	00000000 	andeq	r0, r0, r0
  f8:	2000020c 	andcs	r0, r0, ip, lsl #4
  fc:	00000044 	andeq	r0, r0, r4, asr #32
 100:	40080e41 	andmi	r0, r8, r1, asr #28
 104:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 108:	100e4101 	andne	r4, lr, r1, lsl #2
 10c:	00070d41 	andeq	r0, r7, r1, asr #26
 110:	0000001c 	andeq	r0, r0, ip, lsl r0
 114:	00000000 	andeq	r0, r0, r0
 118:	20000250 	andcs	r0, r0, r0, asr r2
 11c:	00000020 	andeq	r0, r0, r0, lsr #32
 120:	40080e41 	andmi	r0, r8, r1, asr #28
 124:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 128:	100e4101 	andne	r4, lr, r1, lsl #2
 12c:	00070d41 	andeq	r0, r7, r1, asr #26
 130:	0000001c 	andeq	r0, r0, ip, lsl r0
 134:	00000000 	andeq	r0, r0, r0
 138:	20000270 	andcs	r0, r0, r0, ror r2
 13c:	0000003c 	andeq	r0, r0, ip, lsr r0
 140:	40080e41 	andmi	r0, r8, r1, asr #28
 144:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 148:	180e4101 	stmdane	lr, {r0, r8, lr}
 14c:	00070d41 	andeq	r0, r7, r1, asr #26
 150:	0000001c 	andeq	r0, r0, ip, lsl r0
 154:	00000000 	andeq	r0, r0, r0
 158:	200002ac 	andcs	r0, r0, ip, lsr #5
 15c:	00000020 	andeq	r0, r0, r0, lsr #32
 160:	40080e41 	andmi	r0, r8, r1, asr #28
 164:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 168:	100e4101 	andne	r4, lr, r1, lsl #2
 16c:	00070d41 	andeq	r0, r7, r1, asr #26
 170:	0000001c 	andeq	r0, r0, ip, lsl r0
 174:	00000000 	andeq	r0, r0, r0
 178:	200002cc 	andcs	r0, r0, ip, asr #5
 17c:	00000028 	andeq	r0, r0, r8, lsr #32
 180:	40080e41 	andmi	r0, r8, r1, asr #28
 184:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 188:	100e4101 	andne	r4, lr, r1, lsl #2
 18c:	00070d41 	andeq	r0, r7, r1, asr #26
 190:	0000001c 	andeq	r0, r0, ip, lsl r0
 194:	00000000 	andeq	r0, r0, r0
 198:	200002f4 	strdcs	r0, [r0], -r4
 19c:	00000020 	andeq	r0, r0, r0, lsr #32
 1a0:	40080e41 	andmi	r0, r8, r1, asr #28
 1a4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 1a8:	100e4101 	andne	r4, lr, r1, lsl #2
 1ac:	00070d41 	andeq	r0, r7, r1, asr #26
 1b0:	0000001c 	andeq	r0, r0, ip, lsl r0
 1b4:	00000000 	andeq	r0, r0, r0
 1b8:	20000314 	andcs	r0, r0, r4, lsl r3
 1bc:	00000030 	andeq	r0, r0, r0, lsr r0
 1c0:	40080e41 	andmi	r0, r8, r1, asr #28
 1c4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 1c8:	180e4101 	stmdane	lr, {r0, r8, lr}
 1cc:	00070d41 	andeq	r0, r7, r1, asr #26
 1d0:	0000001c 	andeq	r0, r0, ip, lsl r0
 1d4:	00000000 	andeq	r0, r0, r0
 1d8:	20000344 	andcs	r0, r0, r4, asr #6
 1dc:	00000020 	andeq	r0, r0, r0, lsr #32
 1e0:	40080e41 	andmi	r0, r8, r1, asr #28
 1e4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 1e8:	100e4101 	andne	r4, lr, r1, lsl #2
 1ec:	00070d41 	andeq	r0, r7, r1, asr #26
 1f0:	0000001c 	andeq	r0, r0, ip, lsl r0
 1f4:	00000000 	andeq	r0, r0, r0
 1f8:	20000364 	andcs	r0, r0, r4, ror #6
 1fc:	00000020 	andeq	r0, r0, r0, lsr #32
 200:	40080e41 	andmi	r0, r8, r1, asr #28
 204:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 208:	100e4101 	andne	r4, lr, r1, lsl #2
 20c:	00070d41 	andeq	r0, r7, r1, asr #26
 210:	0000001c 	andeq	r0, r0, ip, lsl r0
 214:	00000000 	andeq	r0, r0, r0
 218:	20000384 	andcs	r0, r0, r4, lsl #7
 21c:	00000040 	andeq	r0, r0, r0, asr #32
 220:	40080e41 	andmi	r0, r8, r1, asr #28
 224:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 228:	180e4101 	stmdane	lr, {r0, r8, lr}
 22c:	00070d41 	andeq	r0, r7, r1, asr #26
 230:	0000001c 	andeq	r0, r0, ip, lsl r0
 234:	00000000 	andeq	r0, r0, r0
 238:	200003c4 	andcs	r0, r0, r4, asr #7
 23c:	0000003c 	andeq	r0, r0, ip, lsr r0
 240:	40080e41 	andmi	r0, r8, r1, asr #28
 244:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 248:	180e4101 	stmdane	lr, {r0, r8, lr}
 24c:	00070d41 	andeq	r0, r7, r1, asr #26
 250:	0000001c 	andeq	r0, r0, ip, lsl r0
 254:	00000000 	andeq	r0, r0, r0
 258:	20000400 	andcs	r0, r0, r0, lsl #8
 25c:	00000034 	andeq	r0, r0, r4, lsr r0
 260:	40080e41 	andmi	r0, r8, r1, asr #28
 264:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 268:	180e4101 	stmdane	lr, {r0, r8, lr}
 26c:	00070d41 	andeq	r0, r7, r1, asr #26
 270:	00000018 	andeq	r0, r0, r8, lsl r0
 274:	00000000 	andeq	r0, r0, r0
 278:	20000434 	andcs	r0, r0, r4, lsr r4
 27c:	0000001c 	andeq	r0, r0, ip, lsl r0
 280:	40080e41 	andmi	r0, r8, r1, asr #28
 284:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 288:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 28c:	0000001c 	andeq	r0, r0, ip, lsl r0
 290:	00000000 	andeq	r0, r0, r0
 294:	20000450 	andcs	r0, r0, r0, asr r4
 298:	00000034 	andeq	r0, r0, r4, lsr r0
 29c:	40080e41 	andmi	r0, r8, r1, asr #28
 2a0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 2a4:	180e4101 	stmdane	lr, {r0, r8, lr}
 2a8:	00070d41 	andeq	r0, r7, r1, asr #26
 2ac:	0000001c 	andeq	r0, r0, ip, lsl r0
 2b0:	00000000 	andeq	r0, r0, r0
 2b4:	20000484 	andcs	r0, r0, r4, lsl #9
 2b8:	00000038 	andeq	r0, r0, r8, lsr r0
 2bc:	40080e41 	andmi	r0, r8, r1, asr #28
 2c0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 2c4:	180e4101 	stmdane	lr, {r0, r8, lr}
 2c8:	00070d41 	andeq	r0, r7, r1, asr #26
 2cc:	0000001c 	andeq	r0, r0, ip, lsl r0
 2d0:	00000000 	andeq	r0, r0, r0
 2d4:	200004bc 			; <UNDEFINED> instruction: 0x200004bc
 2d8:	0000003c 	andeq	r0, r0, ip, lsr r0
 2dc:	40080e41 	andmi	r0, r8, r1, asr #28
 2e0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 2e4:	180e4101 	stmdane	lr, {r0, r8, lr}
 2e8:	00070d41 	andeq	r0, r7, r1, asr #26
 2ec:	0000001c 	andeq	r0, r0, ip, lsl r0
 2f0:	00000000 	andeq	r0, r0, r0
 2f4:	200004f8 	strdcs	r0, [r0], -r8
 2f8:	00000158 	andeq	r0, r0, r8, asr r1
 2fc:	40080e41 	andmi	r0, r8, r1, asr #28
 300:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 304:	280e4101 	stmdacs	lr, {r0, r8, lr}
 308:	00070d41 	andeq	r0, r7, r1, asr #26
 30c:	0000001c 	andeq	r0, r0, ip, lsl r0
 310:	00000000 	andeq	r0, r0, r0
 314:	20000650 	andcs	r0, r0, r0, asr r6
 318:	00000060 	andeq	r0, r0, r0, rrx
 31c:	40080e41 	andmi	r0, r8, r1, asr #28
 320:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 324:	180e4101 	stmdane	lr, {r0, r8, lr}
 328:	00070d41 	andeq	r0, r7, r1, asr #26
 32c:	0000001c 	andeq	r0, r0, ip, lsl r0
 330:	00000000 	andeq	r0, r0, r0
 334:	200006b0 			; <UNDEFINED> instruction: 0x200006b0
 338:	00000020 	andeq	r0, r0, r0, lsr #32
 33c:	40080e41 	andmi	r0, r8, r1, asr #28
 340:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 344:	100e4101 	andne	r4, lr, r1, lsl #2
 348:	00070d41 	andeq	r0, r7, r1, asr #26
 34c:	0000001c 	andeq	r0, r0, ip, lsl r0
 350:	00000000 	andeq	r0, r0, r0
 354:	200006d0 	ldrdcs	r0, [r0], -r0	; <UNPREDICTABLE>
 358:	00000020 	andeq	r0, r0, r0, lsr #32
 35c:	40080e41 	andmi	r0, r8, r1, asr #28
 360:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 364:	100e4101 	andne	r4, lr, r1, lsl #2
 368:	00070d41 	andeq	r0, r7, r1, asr #26
 36c:	0000001c 	andeq	r0, r0, ip, lsl r0
 370:	00000000 	andeq	r0, r0, r0
 374:	200006f0 	strdcs	r0, [r0], -r0	; <UNPREDICTABLE>
 378:	0000001c 	andeq	r0, r0, ip, lsl r0
 37c:	40080e41 	andmi	r0, r8, r1, asr #28
 380:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 384:	100e4101 	andne	r4, lr, r1, lsl #2
 388:	00070d41 	andeq	r0, r7, r1, asr #26
 38c:	0000001c 	andeq	r0, r0, ip, lsl r0
 390:	00000000 	andeq	r0, r0, r0
 394:	2000070c 	andcs	r0, r0, ip, lsl #14
 398:	0000003c 	andeq	r0, r0, ip, lsr r0
 39c:	40080e41 	andmi	r0, r8, r1, asr #28
 3a0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 3a4:	180e4101 	stmdane	lr, {r0, r8, lr}
 3a8:	00070d41 	andeq	r0, r7, r1, asr #26
 3ac:	0000001c 	andeq	r0, r0, ip, lsl r0
 3b0:	00000000 	andeq	r0, r0, r0
 3b4:	20000748 	andcs	r0, r0, r8, asr #14
 3b8:	0000003c 	andeq	r0, r0, ip, lsr r0
 3bc:	40080e41 	andmi	r0, r8, r1, asr #28
 3c0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 3c4:	180e4101 	stmdane	lr, {r0, r8, lr}
 3c8:	00070d41 	andeq	r0, r7, r1, asr #26
 3cc:	0000001c 	andeq	r0, r0, ip, lsl r0
 3d0:	00000000 	andeq	r0, r0, r0
 3d4:	20000784 	andcs	r0, r0, r4, lsl #15
 3d8:	0000003c 	andeq	r0, r0, ip, lsr r0
 3dc:	40080e41 	andmi	r0, r8, r1, asr #28
 3e0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 3e4:	180e4101 	stmdane	lr, {r0, r8, lr}
 3e8:	00070d41 	andeq	r0, r7, r1, asr #26
 3ec:	0000001c 	andeq	r0, r0, ip, lsl r0
 3f0:	00000000 	andeq	r0, r0, r0
 3f4:	200007c0 	andcs	r0, r0, r0, asr #15
 3f8:	00000040 	andeq	r0, r0, r0, asr #32
 3fc:	40080e41 	andmi	r0, r8, r1, asr #28
 400:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 404:	180e4101 	stmdane	lr, {r0, r8, lr}
 408:	00070d41 	andeq	r0, r7, r1, asr #26
 40c:	0000001c 	andeq	r0, r0, ip, lsl r0
 410:	00000000 	andeq	r0, r0, r0
 414:	20000800 	andcs	r0, r0, r0, lsl #16
 418:	0000003c 	andeq	r0, r0, ip, lsr r0
 41c:	40080e41 	andmi	r0, r8, r1, asr #28
 420:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 424:	180e4101 	stmdane	lr, {r0, r8, lr}
 428:	00070d41 	andeq	r0, r7, r1, asr #26
 42c:	0000001c 	andeq	r0, r0, ip, lsl r0
 430:	00000000 	andeq	r0, r0, r0
 434:	2000083c 	andcs	r0, r0, ip, lsr r8
 438:	0000001c 	andeq	r0, r0, ip, lsl r0
 43c:	40080e41 	andmi	r0, r8, r1, asr #28
 440:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 444:	100e4101 	andne	r4, lr, r1, lsl #2
 448:	00070d41 	andeq	r0, r7, r1, asr #26
 44c:	0000001c 	andeq	r0, r0, ip, lsl r0
 450:	00000000 	andeq	r0, r0, r0
 454:	20000858 	andcs	r0, r0, r8, asr r8
 458:	00000040 	andeq	r0, r0, r0, asr #32
 45c:	40080e41 	andmi	r0, r8, r1, asr #28
 460:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 464:	100e4101 	andne	r4, lr, r1, lsl #2
 468:	00070d41 	andeq	r0, r7, r1, asr #26
 46c:	0000001c 	andeq	r0, r0, ip, lsl r0
 470:	00000000 	andeq	r0, r0, r0
 474:	20000898 	mulcs	r0, r8, r8
 478:	00000040 	andeq	r0, r0, r0, asr #32
 47c:	40080e41 	andmi	r0, r8, r1, asr #28
 480:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 484:	100e4101 	andne	r4, lr, r1, lsl #2
 488:	00070d41 	andeq	r0, r7, r1, asr #26
 48c:	0000001c 	andeq	r0, r0, ip, lsl r0
 490:	00000000 	andeq	r0, r0, r0
 494:	200008d8 	ldrdcs	r0, [r0], -r8
 498:	00000040 	andeq	r0, r0, r0, asr #32
 49c:	40080e41 	andmi	r0, r8, r1, asr #28
 4a0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 4a4:	100e4101 	andne	r4, lr, r1, lsl #2
 4a8:	00070d41 	andeq	r0, r7, r1, asr #26
 4ac:	0000001c 	andeq	r0, r0, ip, lsl r0
 4b0:	00000000 	andeq	r0, r0, r0
 4b4:	20000918 	andcs	r0, r0, r8, lsl r9
 4b8:	00000040 	andeq	r0, r0, r0, asr #32
 4bc:	40080e41 	andmi	r0, r8, r1, asr #28
 4c0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 4c4:	100e4101 	andne	r4, lr, r1, lsl #2
 4c8:	00070d41 	andeq	r0, r7, r1, asr #26
 4cc:	0000001c 	andeq	r0, r0, ip, lsl r0
 4d0:	00000000 	andeq	r0, r0, r0
 4d4:	20000958 	andcs	r0, r0, r8, asr r9
 4d8:	00000040 	andeq	r0, r0, r0, asr #32
 4dc:	40080e41 	andmi	r0, r8, r1, asr #28
 4e0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 4e4:	100e4101 	andne	r4, lr, r1, lsl #2
 4e8:	00070d41 	andeq	r0, r7, r1, asr #26
 4ec:	0000001c 	andeq	r0, r0, ip, lsl r0
 4f0:	00000000 	andeq	r0, r0, r0
 4f4:	20000998 	mulcs	r0, r8, r9
 4f8:	00000040 	andeq	r0, r0, r0, asr #32
 4fc:	40080e41 	andmi	r0, r8, r1, asr #28
 500:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 504:	100e4101 	andne	r4, lr, r1, lsl #2
 508:	00070d41 	andeq	r0, r7, r1, asr #26
 50c:	0000001c 	andeq	r0, r0, ip, lsl r0
 510:	00000000 	andeq	r0, r0, r0
 514:	200009d8 	ldrdcs	r0, [r0], -r8
 518:	00000040 	andeq	r0, r0, r0, asr #32
 51c:	40080e41 	andmi	r0, r8, r1, asr #28
 520:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 524:	100e4101 	andne	r4, lr, r1, lsl #2
 528:	00070d41 	andeq	r0, r7, r1, asr #26
 52c:	0000001c 	andeq	r0, r0, ip, lsl r0
 530:	00000000 	andeq	r0, r0, r0
 534:	20000a18 	andcs	r0, r0, r8, lsl sl
 538:	00000040 	andeq	r0, r0, r0, asr #32
 53c:	40080e41 	andmi	r0, r8, r1, asr #28
 540:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 544:	100e4101 	andne	r4, lr, r1, lsl #2
 548:	00070d41 	andeq	r0, r7, r1, asr #26
 54c:	0000001c 	andeq	r0, r0, ip, lsl r0
 550:	00000000 	andeq	r0, r0, r0
 554:	20000a58 	andcs	r0, r0, r8, asr sl
 558:	00000040 	andeq	r0, r0, r0, asr #32
 55c:	40080e41 	andmi	r0, r8, r1, asr #28
 560:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 564:	100e4101 	andne	r4, lr, r1, lsl #2
 568:	00070d41 	andeq	r0, r7, r1, asr #26
 56c:	0000001c 	andeq	r0, r0, ip, lsl r0
 570:	00000000 	andeq	r0, r0, r0
 574:	20000a98 	mulcs	r0, r8, sl
 578:	00000040 	andeq	r0, r0, r0, asr #32
 57c:	40080e41 	andmi	r0, r8, r1, asr #28
 580:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 584:	100e4101 	andne	r4, lr, r1, lsl #2
 588:	00070d41 	andeq	r0, r7, r1, asr #26
 58c:	0000001c 	andeq	r0, r0, ip, lsl r0
 590:	00000000 	andeq	r0, r0, r0
 594:	20000ad8 	ldrdcs	r0, [r0], -r8
 598:	00000040 	andeq	r0, r0, r0, asr #32
 59c:	40080e41 	andmi	r0, r8, r1, asr #28
 5a0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 5a4:	100e4101 	andne	r4, lr, r1, lsl #2
 5a8:	00070d41 	andeq	r0, r7, r1, asr #26
 5ac:	0000001c 	andeq	r0, r0, ip, lsl r0
 5b0:	00000000 	andeq	r0, r0, r0
 5b4:	20000b18 	andcs	r0, r0, r8, lsl fp
 5b8:	00000040 	andeq	r0, r0, r0, asr #32
 5bc:	40080e41 	andmi	r0, r8, r1, asr #28
 5c0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 5c4:	100e4101 	andne	r4, lr, r1, lsl #2
 5c8:	00070d41 	andeq	r0, r7, r1, asr #26
 5cc:	0000001c 	andeq	r0, r0, ip, lsl r0
 5d0:	00000000 	andeq	r0, r0, r0
 5d4:	20000b58 	andcs	r0, r0, r8, asr fp
 5d8:	00000040 	andeq	r0, r0, r0, asr #32
 5dc:	40080e41 	andmi	r0, r8, r1, asr #28
 5e0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 5e4:	100e4101 	andne	r4, lr, r1, lsl #2
 5e8:	00070d41 	andeq	r0, r7, r1, asr #26
 5ec:	0000001c 	andeq	r0, r0, ip, lsl r0
 5f0:	00000000 	andeq	r0, r0, r0
 5f4:	20000b98 	mulcs	r0, r8, fp
 5f8:	00000040 	andeq	r0, r0, r0, asr #32
 5fc:	40080e41 	andmi	r0, r8, r1, asr #28
 600:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 604:	100e4101 	andne	r4, lr, r1, lsl #2
 608:	00070d41 	andeq	r0, r7, r1, asr #26
 60c:	0000001c 	andeq	r0, r0, ip, lsl r0
 610:	00000000 	andeq	r0, r0, r0
 614:	20000bd8 	ldrdcs	r0, [r0], -r8
 618:	00000040 	andeq	r0, r0, r0, asr #32
 61c:	40080e41 	andmi	r0, r8, r1, asr #28
 620:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 624:	100e4101 	andne	r4, lr, r1, lsl #2
 628:	00070d41 	andeq	r0, r7, r1, asr #26
 62c:	0000001c 	andeq	r0, r0, ip, lsl r0
 630:	00000000 	andeq	r0, r0, r0
 634:	20000c18 	andcs	r0, r0, r8, lsl ip
 638:	0000003c 	andeq	r0, r0, ip, lsr r0
 63c:	40080e41 	andmi	r0, r8, r1, asr #28
 640:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 644:	100e4101 	andne	r4, lr, r1, lsl #2
 648:	00070d41 	andeq	r0, r7, r1, asr #26
 64c:	0000001c 	andeq	r0, r0, ip, lsl r0
 650:	00000000 	andeq	r0, r0, r0
 654:	20000c54 	andcs	r0, r0, r4, asr ip
 658:	00000050 	andeq	r0, r0, r0, asr r0
 65c:	40080e41 	andmi	r0, r8, r1, asr #28
 660:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 664:	100e4101 	andne	r4, lr, r1, lsl #2
 668:	00070d41 	andeq	r0, r7, r1, asr #26
 66c:	0000001c 	andeq	r0, r0, ip, lsl r0
 670:	00000000 	andeq	r0, r0, r0
 674:	20000ca4 	andcs	r0, r0, r4, lsr #25
 678:	00000084 	andeq	r0, r0, r4, lsl #1
 67c:	40080e41 	andmi	r0, r8, r1, asr #28
 680:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 684:	200e4101 	andcs	r4, lr, r1, lsl #2
 688:	00070d41 	andeq	r0, r7, r1, asr #26
 68c:	00000018 	andeq	r0, r0, r8, lsl r0
 690:	00000000 	andeq	r0, r0, r0
 694:	20000d28 	andcs	r0, r0, r8, lsr #26
 698:	0000001c 	andeq	r0, r0, ip, lsl r0
 69c:	40080e41 	andmi	r0, r8, r1, asr #28
 6a0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 6a4:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 6a8:	0000001c 	andeq	r0, r0, ip, lsl r0
 6ac:	00000000 	andeq	r0, r0, r0
 6b0:	20000d44 	andcs	r0, r0, r4, asr #26
 6b4:	00000044 	andeq	r0, r0, r4, asr #32
 6b8:	40080e41 	andmi	r0, r8, r1, asr #28
 6bc:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 6c0:	180e4101 	stmdane	lr, {r0, r8, lr}
 6c4:	00070d41 	andeq	r0, r7, r1, asr #26
 6c8:	0000001c 	andeq	r0, r0, ip, lsl r0
 6cc:	00000000 	andeq	r0, r0, r0
 6d0:	20000d88 	andcs	r0, r0, r8, lsl #27
 6d4:	00000020 	andeq	r0, r0, r0, lsr #32
 6d8:	40080e41 	andmi	r0, r8, r1, asr #28
 6dc:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 6e0:	100e4101 	andne	r4, lr, r1, lsl #2
 6e4:	00070d41 	andeq	r0, r7, r1, asr #26
 6e8:	0000000c 	andeq	r0, r0, ip
 6ec:	00000000 	andeq	r0, r0, r0
 6f0:	20000000 	andcs	r0, r0, r0
 6f4:	0000000c 	andeq	r0, r0, ip
 6f8:	00000018 	andeq	r0, r0, r8, lsl r0
 6fc:	00000000 	andeq	r0, r0, r0
 700:	20000da8 	andcs	r0, r0, r8, lsr #27
 704:	0000000a 	andeq	r0, r0, sl
 708:	40080e41 	andmi	r0, r8, r1, asr #28
 70c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 710:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 714:	0000001c 	andeq	r0, r0, ip, lsl r0
 718:	00000000 	andeq	r0, r0, r0
 71c:	20000db2 			; <UNDEFINED> instruction: 0x20000db2
 720:	00000066 	andeq	r0, r0, r6, rrx
 724:	40080e41 	andmi	r0, r8, r1, asr #28
 728:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 72c:	100e4101 	andne	r4, lr, r1, lsl #2
 730:	00070d41 	andeq	r0, r7, r1, asr #26
 734:	00000018 	andeq	r0, r0, r8, lsl r0
 738:	00000000 	andeq	r0, r0, r0
 73c:	20000e18 	andcs	r0, r0, r8, lsl lr
 740:	00000018 	andeq	r0, r0, r8, lsl r0
 744:	40080e41 	andmi	r0, r8, r1, asr #28
 748:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 74c:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 750:	0000001c 	andeq	r0, r0, ip, lsl r0
 754:	00000000 	andeq	r0, r0, r0
 758:	20000e30 	andcs	r0, r0, r0, lsr lr
 75c:	0000002c 	andeq	r0, r0, ip, lsr #32
 760:	40080e41 	andmi	r0, r8, r1, asr #28
 764:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 768:	100e4101 	andne	r4, lr, r1, lsl #2
 76c:	00070d41 	andeq	r0, r7, r1, asr #26
 770:	00000028 	andeq	r0, r0, r8, lsr #32
 774:	00000000 	andeq	r0, r0, r0
 778:	20000e5c 	andcs	r0, r0, ip, asr lr
 77c:	00000280 	andeq	r0, r0, r0, lsl #5
 780:	40140e41 	andsmi	r0, r4, r1, asr #28
 784:	85400584 	strbhi	r0, [r0, #-1412]	; 0xfffffa7c
 788:	03864004 	orreq	r4, r6, #4
 78c:	40028740 	andmi	r8, r2, r0, asr #14
 790:	0e41018e 	dvfeqd	f0, f1, #0.5
 794:	0d410280 	sfmeq	f0, 2, [r1, #-512]	; 0xfffffe00
 798:	00000007 	andeq	r0, r0, r7
 79c:	0000000c 	andeq	r0, r0, ip
 7a0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 7a4:	7c020001 	stcvc	0, cr0, [r2], {1}
 7a8:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 7ac:	0000001c 	andeq	r0, r0, ip, lsl r0
 7b0:	0000079c 	muleq	r0, ip, r7
 7b4:	200010dc 	ldrdcs	r1, [r0], -ip
 7b8:	00000170 	andeq	r0, r0, r0, ror r1
 7bc:	40080e41 	andmi	r0, r8, r1, asr #28
 7c0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 7c4:	100e4101 	andne	r4, lr, r1, lsl #2
 7c8:	00070d41 	andeq	r0, r7, r1, asr #26
 7cc:	0000001c 	andeq	r0, r0, ip, lsl r0
 7d0:	0000079c 	muleq	r0, ip, r7
 7d4:	2000124c 	andcs	r1, r0, ip, asr #4
 7d8:	00000118 	andeq	r0, r0, r8, lsl r1
 7dc:	40080e41 	andmi	r0, r8, r1, asr #28
 7e0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 7e4:	200e4101 	andcs	r4, lr, r1, lsl #2
 7e8:	00070d41 	andeq	r0, r7, r1, asr #26
 7ec:	0000001c 	andeq	r0, r0, ip, lsl r0
 7f0:	0000079c 	muleq	r0, ip, r7
 7f4:	20001364 	andcs	r1, r0, r4, ror #6
 7f8:	00000034 	andeq	r0, r0, r4, lsr r0
 7fc:	40080e41 	andmi	r0, r8, r1, asr #28
 800:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 804:	100e4101 	andne	r4, lr, r1, lsl #2
 808:	00070d41 	andeq	r0, r7, r1, asr #26
 80c:	0000001c 	andeq	r0, r0, ip, lsl r0
 810:	0000079c 	muleq	r0, ip, r7
 814:	20001398 	mulcs	r0, r8, r3
 818:	00000046 	andeq	r0, r0, r6, asr #32
 81c:	40080e41 	andmi	r0, r8, r1, asr #28
 820:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 824:	180e4101 	stmdane	lr, {r0, r8, lr}
 828:	00070d41 	andeq	r0, r7, r1, asr #26
 82c:	0000001c 	andeq	r0, r0, ip, lsl r0
 830:	0000079c 	muleq	r0, ip, r7
 834:	200013de 	ldrdcs	r1, [r0], -lr
 838:	00000042 	andeq	r0, r0, r2, asr #32
 83c:	40080e41 	andmi	r0, r8, r1, asr #28
 840:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 844:	180e4101 	stmdane	lr, {r0, r8, lr}
 848:	00070d41 	andeq	r0, r7, r1, asr #26
 84c:	0000001c 	andeq	r0, r0, ip, lsl r0
 850:	0000079c 	muleq	r0, ip, r7
 854:	20001420 	andcs	r1, r0, r0, lsr #8
 858:	00000016 	andeq	r0, r0, r6, lsl r0
 85c:	40080e41 	andmi	r0, r8, r1, asr #28
 860:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 864:	100e4101 	andne	r4, lr, r1, lsl #2
 868:	00070d41 	andeq	r0, r7, r1, asr #26
 86c:	0000001c 	andeq	r0, r0, ip, lsl r0
 870:	0000079c 	muleq	r0, ip, r7
 874:	20001436 	andcs	r1, r0, r6, lsr r4
 878:	00000042 	andeq	r0, r0, r2, asr #32
 87c:	40080e41 	andmi	r0, r8, r1, asr #28
 880:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 884:	180e4101 	stmdane	lr, {r0, r8, lr}
 888:	00070d41 	andeq	r0, r7, r1, asr #26
 88c:	0000001c 	andeq	r0, r0, ip, lsl r0
 890:	0000079c 	muleq	r0, ip, r7
 894:	20001478 	andcs	r1, r0, r8, ror r4
 898:	00000016 	andeq	r0, r0, r6, lsl r0
 89c:	40080e41 	andmi	r0, r8, r1, asr #28
 8a0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 8a4:	100e4101 	andne	r4, lr, r1, lsl #2
 8a8:	00070d41 	andeq	r0, r7, r1, asr #26
 8ac:	0000001c 	andeq	r0, r0, ip, lsl r0
 8b0:	0000079c 	muleq	r0, ip, r7
 8b4:	2000148e 	andcs	r1, r0, lr, lsl #9
 8b8:	0000001e 	andeq	r0, r0, lr, lsl r0
 8bc:	40080e41 	andmi	r0, r8, r1, asr #28
 8c0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 8c4:	100e4101 	andne	r4, lr, r1, lsl #2
 8c8:	00070d41 	andeq	r0, r7, r1, asr #26
 8cc:	0000001c 	andeq	r0, r0, ip, lsl r0
 8d0:	0000079c 	muleq	r0, ip, r7
 8d4:	200014ac 	andcs	r1, r0, ip, lsr #9
 8d8:	0000001e 	andeq	r0, r0, lr, lsl r0
 8dc:	40080e41 	andmi	r0, r8, r1, asr #28
 8e0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 8e4:	100e4101 	andne	r4, lr, r1, lsl #2
 8e8:	00070d41 	andeq	r0, r7, r1, asr #26
 8ec:	0000001c 	andeq	r0, r0, ip, lsl r0
 8f0:	0000079c 	muleq	r0, ip, r7
 8f4:	200014ca 	andcs	r1, r0, sl, asr #9
 8f8:	0000003a 	andeq	r0, r0, sl, lsr r0
 8fc:	40080e41 	andmi	r0, r8, r1, asr #28
 900:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 904:	100e4101 	andne	r4, lr, r1, lsl #2
 908:	00070d41 	andeq	r0, r7, r1, asr #26
 90c:	0000001c 	andeq	r0, r0, ip, lsl r0
 910:	0000079c 	muleq	r0, ip, r7
 914:	20001504 	andcs	r1, r0, r4, lsl #10
 918:	0000001e 	andeq	r0, r0, lr, lsl r0
 91c:	40080e41 	andmi	r0, r8, r1, asr #28
 920:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 924:	100e4101 	andne	r4, lr, r1, lsl #2
 928:	00070d41 	andeq	r0, r7, r1, asr #26
 92c:	0000001c 	andeq	r0, r0, ip, lsl r0
 930:	0000079c 	muleq	r0, ip, r7
 934:	20001522 	andcs	r1, r0, r2, lsr #10
 938:	00000024 	andeq	r0, r0, r4, lsr #32
 93c:	40080e41 	andmi	r0, r8, r1, asr #28
 940:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 944:	100e4101 	andne	r4, lr, r1, lsl #2
 948:	00070d41 	andeq	r0, r7, r1, asr #26
 94c:	0000001c 	andeq	r0, r0, ip, lsl r0
 950:	0000079c 	muleq	r0, ip, r7
 954:	20001546 	andcs	r1, r0, r6, asr #10
 958:	000000a4 	andeq	r0, r0, r4, lsr #1
 95c:	40080e41 	andmi	r0, r8, r1, asr #28
 960:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 964:	180e4101 	stmdane	lr, {r0, r8, lr}
 968:	00070d41 	andeq	r0, r7, r1, asr #26
 96c:	0000000c 	andeq	r0, r0, ip
 970:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 974:	7c020001 	stcvc	0, cr0, [r2], {1}
 978:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 97c:	0000001c 	andeq	r0, r0, ip, lsl r0
 980:	0000096c 	andeq	r0, r0, ip, ror #18
 984:	200015ec 	andcs	r1, r0, ip, ror #11
 988:	00000024 	andeq	r0, r0, r4, lsr #32
 98c:	40080e41 	andmi	r0, r8, r1, asr #28
 990:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 994:	100e4101 	andne	r4, lr, r1, lsl #2
 998:	00070d41 	andeq	r0, r7, r1, asr #26
 99c:	00000024 	andeq	r0, r0, r4, lsr #32
 9a0:	0000096c 	andeq	r0, r0, ip, ror #18
 9a4:	20001610 	andcs	r1, r0, r0, lsl r6
 9a8:	000000f8 	strdeq	r0, [r0], -r8
 9ac:	40100e41 	andsmi	r0, r0, r1, asr #28
 9b0:	85400484 	strbhi	r0, [r0, #-1156]	; 0xfffffb7c
 9b4:	02874003 	addeq	r4, r7, #3
 9b8:	41018e40 	tstmi	r1, r0, asr #28
 9bc:	0d41200e 	stcleq	0, cr2, [r1, #-56]	; 0xffffffc8
 9c0:	00000007 	andeq	r0, r0, r7
 9c4:	0000001c 	andeq	r0, r0, ip, lsl r0
 9c8:	0000096c 	andeq	r0, r0, ip, ror #18
 9cc:	20001708 	andcs	r1, r0, r8, lsl #14
 9d0:	0000002c 	andeq	r0, r0, ip, lsr #32
 9d4:	40080e41 	andmi	r0, r8, r1, asr #28
 9d8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 9dc:	100e4101 	andne	r4, lr, r1, lsl #2
 9e0:	00070d41 	andeq	r0, r7, r1, asr #26
 9e4:	0000001c 	andeq	r0, r0, ip, lsl r0
 9e8:	0000096c 	andeq	r0, r0, ip, ror #18
 9ec:	20001734 	andcs	r1, r0, r4, lsr r7
 9f0:	00000048 	andeq	r0, r0, r8, asr #32
 9f4:	40080e41 	andmi	r0, r8, r1, asr #28
 9f8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 9fc:	100e4101 	andne	r4, lr, r1, lsl #2
 a00:	00070d41 	andeq	r0, r7, r1, asr #26
 a04:	0000001c 	andeq	r0, r0, ip, lsl r0
 a08:	0000096c 	andeq	r0, r0, ip, ror #18
 a0c:	2000177c 	andcs	r1, r0, ip, ror r7
 a10:	00000034 	andeq	r0, r0, r4, lsr r0
 a14:	40080e41 	andmi	r0, r8, r1, asr #28
 a18:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 a1c:	100e4101 	andne	r4, lr, r1, lsl #2
 a20:	00070d41 	andeq	r0, r7, r1, asr #26
 a24:	0000000c 	andeq	r0, r0, ip
 a28:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 a2c:	7c020001 	stcvc	0, cr0, [r2], {1}
 a30:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 a34:	0000001c 	andeq	r0, r0, ip, lsl r0
 a38:	00000a24 	andeq	r0, r0, r4, lsr #20
 a3c:	200017b0 			; <UNDEFINED> instruction: 0x200017b0
 a40:	00000028 	andeq	r0, r0, r8, lsr #32
 a44:	40080e41 	andmi	r0, r8, r1, asr #28
 a48:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 a4c:	100e4101 	andne	r4, lr, r1, lsl #2
 a50:	00070d41 	andeq	r0, r7, r1, asr #26
 a54:	0000001c 	andeq	r0, r0, ip, lsl r0
 a58:	00000a24 	andeq	r0, r0, r4, lsr #20
 a5c:	200017d8 	ldrdcs	r1, [r0], -r8
 a60:	00000062 	andeq	r0, r0, r2, rrx
 a64:	40080e41 	andmi	r0, r8, r1, asr #28
 a68:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 a6c:	100e4101 	andne	r4, lr, r1, lsl #2
 a70:	00070d41 	andeq	r0, r7, r1, asr #26
 a74:	0000001c 	andeq	r0, r0, ip, lsl r0
 a78:	00000a24 	andeq	r0, r0, r4, lsr #20
 a7c:	2000183a 	andcs	r1, r0, sl, lsr r8
 a80:	0000005e 	andeq	r0, r0, lr, asr r0
 a84:	40080e41 	andmi	r0, r8, r1, asr #28
 a88:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 a8c:	100e4101 	andne	r4, lr, r1, lsl #2
 a90:	00070d41 	andeq	r0, r7, r1, asr #26
 a94:	0000000c 	andeq	r0, r0, ip
 a98:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 a9c:	7c020001 	stcvc	0, cr0, [r2], {1}
 aa0:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 aa4:	0000001c 	andeq	r0, r0, ip, lsl r0
 aa8:	00000a94 	muleq	r0, r4, sl
 aac:	20001898 	mulcs	r0, r8, r8
 ab0:	00000130 	andeq	r0, r0, r0, lsr r1
 ab4:	40080e41 	andmi	r0, r8, r1, asr #28
 ab8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 abc:	100e4101 	andne	r4, lr, r1, lsl #2
 ac0:	00070d41 	andeq	r0, r7, r1, asr #26
 ac4:	0000001c 	andeq	r0, r0, ip, lsl r0
 ac8:	00000a94 	muleq	r0, r4, sl
 acc:	200019c8 	andcs	r1, r0, r8, asr #19
 ad0:	00000194 	muleq	r0, r4, r1
 ad4:	40080e41 	andmi	r0, r8, r1, asr #28
 ad8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 adc:	300e4101 	andcc	r4, lr, r1, lsl #2
 ae0:	00070d41 	andeq	r0, r7, r1, asr #26
 ae4:	0000001c 	andeq	r0, r0, ip, lsl r0
 ae8:	00000a94 	muleq	r0, r4, sl
 aec:	20001b5c 	andcs	r1, r0, ip, asr fp
 af0:	00000036 	andeq	r0, r0, r6, lsr r0
 af4:	40080e41 	andmi	r0, r8, r1, asr #28
 af8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 afc:	100e4101 	andne	r4, lr, r1, lsl #2
 b00:	00070d41 	andeq	r0, r7, r1, asr #26
 b04:	0000001c 	andeq	r0, r0, ip, lsl r0
 b08:	00000a94 	muleq	r0, r4, sl
 b0c:	20001b92 	mulcs	r0, r2, fp
 b10:	00000056 	andeq	r0, r0, r6, asr r0
 b14:	40080e41 	andmi	r0, r8, r1, asr #28
 b18:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 b1c:	180e4101 	stmdane	lr, {r0, r8, lr}
 b20:	00070d41 	andeq	r0, r7, r1, asr #26
 b24:	0000001c 	andeq	r0, r0, ip, lsl r0
 b28:	00000a94 	muleq	r0, r4, sl
 b2c:	20001be8 	andcs	r1, r0, r8, ror #23
 b30:	00000028 	andeq	r0, r0, r8, lsr #32
 b34:	40080e41 	andmi	r0, r8, r1, asr #28
 b38:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 b3c:	100e4101 	andne	r4, lr, r1, lsl #2
 b40:	00070d41 	andeq	r0, r7, r1, asr #26
 b44:	0000001c 	andeq	r0, r0, ip, lsl r0
 b48:	00000a94 	muleq	r0, r4, sl
 b4c:	20001c10 	andcs	r1, r0, r0, lsl ip
 b50:	00000048 	andeq	r0, r0, r8, asr #32
 b54:	40080e41 	andmi	r0, r8, r1, asr #28
 b58:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 b5c:	100e4101 	andne	r4, lr, r1, lsl #2
 b60:	00070d41 	andeq	r0, r7, r1, asr #26
 b64:	0000001c 	andeq	r0, r0, ip, lsl r0
 b68:	00000a94 	muleq	r0, r4, sl
 b6c:	20001c58 	andcs	r1, r0, r8, asr ip
 b70:	0000003a 	andeq	r0, r0, sl, lsr r0
 b74:	40080e41 	andmi	r0, r8, r1, asr #28
 b78:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 b7c:	100e4101 	andne	r4, lr, r1, lsl #2
 b80:	00070d41 	andeq	r0, r7, r1, asr #26
 b84:	0000001c 	andeq	r0, r0, ip, lsl r0
 b88:	00000a94 	muleq	r0, r4, sl
 b8c:	20001c92 	mulcs	r0, r2, ip
 b90:	00000046 	andeq	r0, r0, r6, asr #32
 b94:	40080e41 	andmi	r0, r8, r1, asr #28
 b98:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 b9c:	100e4101 	andne	r4, lr, r1, lsl #2
 ba0:	00070d41 	andeq	r0, r7, r1, asr #26
 ba4:	0000001c 	andeq	r0, r0, ip, lsl r0
 ba8:	00000a94 	muleq	r0, r4, sl
 bac:	20001cd8 	ldrdcs	r1, [r0], -r8
 bb0:	00000048 	andeq	r0, r0, r8, asr #32
 bb4:	40080e41 	andmi	r0, r8, r1, asr #28
 bb8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 bbc:	100e4101 	andne	r4, lr, r1, lsl #2
 bc0:	00070d41 	andeq	r0, r7, r1, asr #26
 bc4:	0000001c 	andeq	r0, r0, ip, lsl r0
 bc8:	00000a94 	muleq	r0, r4, sl
 bcc:	20001d20 	andcs	r1, r0, r0, lsr #26
 bd0:	00000024 	andeq	r0, r0, r4, lsr #32
 bd4:	40080e41 	andmi	r0, r8, r1, asr #28
 bd8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 bdc:	100e4101 	andne	r4, lr, r1, lsl #2
 be0:	00070d41 	andeq	r0, r7, r1, asr #26
 be4:	0000001c 	andeq	r0, r0, ip, lsl r0
 be8:	00000a94 	muleq	r0, r4, sl
 bec:	20001d44 	andcs	r1, r0, r4, asr #26
 bf0:	0000001c 	andeq	r0, r0, ip, lsl r0
 bf4:	40080e41 	andmi	r0, r8, r1, asr #28
 bf8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 bfc:	100e4101 	andne	r4, lr, r1, lsl #2
 c00:	00070d41 	andeq	r0, r7, r1, asr #26
 c04:	0000001c 	andeq	r0, r0, ip, lsl r0
 c08:	00000a94 	muleq	r0, r4, sl
 c0c:	20001d60 	andcs	r1, r0, r0, ror #26
 c10:	0000003a 	andeq	r0, r0, sl, lsr r0
 c14:	40080e41 	andmi	r0, r8, r1, asr #28
 c18:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 c1c:	100e4101 	andne	r4, lr, r1, lsl #2
 c20:	00070d41 	andeq	r0, r7, r1, asr #26
 c24:	0000001c 	andeq	r0, r0, ip, lsl r0
 c28:	00000a94 	muleq	r0, r4, sl
 c2c:	20001d9a 	mulcs	r0, sl, sp
 c30:	00000040 	andeq	r0, r0, r0, asr #32
 c34:	40080e41 	andmi	r0, r8, r1, asr #28
 c38:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 c3c:	100e4101 	andne	r4, lr, r1, lsl #2
 c40:	00070d41 	andeq	r0, r7, r1, asr #26
 c44:	0000001c 	andeq	r0, r0, ip, lsl r0
 c48:	00000a94 	muleq	r0, r4, sl
 c4c:	20001dda 	ldrdcs	r1, [r0], -sl
 c50:	0000003e 	andeq	r0, r0, lr, lsr r0
 c54:	40080e41 	andmi	r0, r8, r1, asr #28
 c58:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 c5c:	100e4101 	andne	r4, lr, r1, lsl #2
 c60:	00070d41 	andeq	r0, r7, r1, asr #26
 c64:	0000001c 	andeq	r0, r0, ip, lsl r0
 c68:	00000a94 	muleq	r0, r4, sl
 c6c:	20001e18 	andcs	r1, r0, r8, lsl lr
 c70:	00000038 	andeq	r0, r0, r8, lsr r0
 c74:	40080e41 	andmi	r0, r8, r1, asr #28
 c78:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 c7c:	100e4101 	andne	r4, lr, r1, lsl #2
 c80:	00070d41 	andeq	r0, r7, r1, asr #26
 c84:	0000001c 	andeq	r0, r0, ip, lsl r0
 c88:	00000a94 	muleq	r0, r4, sl
 c8c:	20001e50 	andcs	r1, r0, r0, asr lr
 c90:	00000048 	andeq	r0, r0, r8, asr #32
 c94:	40080e41 	andmi	r0, r8, r1, asr #28
 c98:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 c9c:	100e4101 	andne	r4, lr, r1, lsl #2
 ca0:	00070d41 	andeq	r0, r7, r1, asr #26
 ca4:	0000001c 	andeq	r0, r0, ip, lsl r0
 ca8:	00000a94 	muleq	r0, r4, sl
 cac:	20001e98 	mulcs	r0, r8, lr
 cb0:	00000020 	andeq	r0, r0, r0, lsr #32
 cb4:	40080e41 	andmi	r0, r8, r1, asr #28
 cb8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 cbc:	100e4101 	andne	r4, lr, r1, lsl #2
 cc0:	00070d41 	andeq	r0, r7, r1, asr #26
 cc4:	0000001c 	andeq	r0, r0, ip, lsl r0
 cc8:	00000a94 	muleq	r0, r4, sl
 ccc:	20001eb8 			; <UNDEFINED> instruction: 0x20001eb8
 cd0:	00000040 	andeq	r0, r0, r0, asr #32
 cd4:	40080e41 	andmi	r0, r8, r1, asr #28
 cd8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 cdc:	100e4101 	andne	r4, lr, r1, lsl #2
 ce0:	00070d41 	andeq	r0, r7, r1, asr #26
 ce4:	0000001c 	andeq	r0, r0, ip, lsl r0
 ce8:	00000a94 	muleq	r0, r4, sl
 cec:	20001ef8 	strdcs	r1, [r0], -r8
 cf0:	0000003e 	andeq	r0, r0, lr, lsr r0
 cf4:	40080e41 	andmi	r0, r8, r1, asr #28
 cf8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 cfc:	100e4101 	andne	r4, lr, r1, lsl #2
 d00:	00070d41 	andeq	r0, r7, r1, asr #26
 d04:	0000001c 	andeq	r0, r0, ip, lsl r0
 d08:	00000a94 	muleq	r0, r4, sl
 d0c:	20001f36 	andcs	r1, r0, r6, lsr pc
 d10:	00000040 	andeq	r0, r0, r0, asr #32
 d14:	40080e41 	andmi	r0, r8, r1, asr #28
 d18:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 d1c:	100e4101 	andne	r4, lr, r1, lsl #2
 d20:	00070d41 	andeq	r0, r7, r1, asr #26
 d24:	0000001c 	andeq	r0, r0, ip, lsl r0
 d28:	00000a94 	muleq	r0, r4, sl
 d2c:	20001f76 	andcs	r1, r0, r6, ror pc
 d30:	00000040 	andeq	r0, r0, r0, asr #32
 d34:	40080e41 	andmi	r0, r8, r1, asr #28
 d38:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 d3c:	100e4101 	andne	r4, lr, r1, lsl #2
 d40:	00070d41 	andeq	r0, r7, r1, asr #26
 d44:	0000001c 	andeq	r0, r0, ip, lsl r0
 d48:	00000a94 	muleq	r0, r4, sl
 d4c:	20001fb6 			; <UNDEFINED> instruction: 0x20001fb6
 d50:	00000038 	andeq	r0, r0, r8, lsr r0
 d54:	40080e41 	andmi	r0, r8, r1, asr #28
 d58:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 d5c:	100e4101 	andne	r4, lr, r1, lsl #2
 d60:	00070d41 	andeq	r0, r7, r1, asr #26
 d64:	0000001c 	andeq	r0, r0, ip, lsl r0
 d68:	00000a94 	muleq	r0, r4, sl
 d6c:	20001fee 	andcs	r1, r0, lr, ror #31
 d70:	00000040 	andeq	r0, r0, r0, asr #32
 d74:	40080e41 	andmi	r0, r8, r1, asr #28
 d78:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 d7c:	100e4101 	andne	r4, lr, r1, lsl #2
 d80:	00070d41 	andeq	r0, r7, r1, asr #26
 d84:	0000001c 	andeq	r0, r0, ip, lsl r0
 d88:	00000a94 	muleq	r0, r4, sl
 d8c:	2000202e 	andcs	r2, r0, lr, lsr #32
 d90:	00000052 	andeq	r0, r0, r2, asr r0
 d94:	40080e41 	andmi	r0, r8, r1, asr #28
 d98:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 d9c:	100e4101 	andne	r4, lr, r1, lsl #2
 da0:	00070d41 	andeq	r0, r7, r1, asr #26
 da4:	0000001c 	andeq	r0, r0, ip, lsl r0
 da8:	00000a94 	muleq	r0, r4, sl
 dac:	20002080 	andcs	r2, r0, r0, lsl #1
 db0:	0000009a 	muleq	r0, sl, r0
 db4:	40080e41 	andmi	r0, r8, r1, asr #28
 db8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 dbc:	200e4101 	andcs	r4, lr, r1, lsl #2
 dc0:	00070d41 	andeq	r0, r7, r1, asr #26
 dc4:	0000001c 	andeq	r0, r0, ip, lsl r0
 dc8:	00000a94 	muleq	r0, r4, sl
 dcc:	2000211a 	andcs	r2, r0, sl, lsl r1
 dd0:	00000048 	andeq	r0, r0, r8, asr #32
 dd4:	40080e41 	andmi	r0, r8, r1, asr #28
 dd8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 ddc:	180e4101 	stmdane	lr, {r0, r8, lr}
 de0:	00070d41 	andeq	r0, r7, r1, asr #26
 de4:	0000001c 	andeq	r0, r0, ip, lsl r0
 de8:	00000a94 	muleq	r0, r4, sl
 dec:	20002162 	andcs	r2, r0, r2, ror #2
 df0:	00000022 	andeq	r0, r0, r2, lsr #32
 df4:	40080e41 	andmi	r0, r8, r1, asr #28
 df8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 dfc:	100e4101 	andne	r4, lr, r1, lsl #2
 e00:	00070d41 	andeq	r0, r7, r1, asr #26
 e04:	0000001c 	andeq	r0, r0, ip, lsl r0
 e08:	00000a94 	muleq	r0, r4, sl
 e0c:	20002184 	andcs	r2, r0, r4, lsl #3
 e10:	000000ca 	andeq	r0, r0, sl, asr #1
 e14:	40080e41 	andmi	r0, r8, r1, asr #28
 e18:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 e1c:	200e4101 	andcs	r4, lr, r1, lsl #2
 e20:	00070d41 	andeq	r0, r7, r1, asr #26
 e24:	0000001c 	andeq	r0, r0, ip, lsl r0
 e28:	00000a94 	muleq	r0, r4, sl
 e2c:	2000224e 	andcs	r2, r0, lr, asr #4
 e30:	00000048 	andeq	r0, r0, r8, asr #32
 e34:	40080e41 	andmi	r0, r8, r1, asr #28
 e38:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 e3c:	180e4101 	stmdane	lr, {r0, r8, lr}
 e40:	00070d41 	andeq	r0, r7, r1, asr #26
 e44:	0000000c 	andeq	r0, r0, ip
 e48:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 e4c:	7c020001 	stcvc	0, cr0, [r2], {1}
 e50:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 e54:	00000020 	andeq	r0, r0, r0, lsr #32
 e58:	00000e44 	andeq	r0, r0, r4, asr #28
 e5c:	20002298 	mulcs	r0, r8, r2
 e60:	00000098 	muleq	r0, r8, r0
 e64:	400c0e41 	andmi	r0, ip, r1, asr #28
 e68:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 e6c:	018e4002 	orreq	r4, lr, r2
 e70:	41180e41 	tstmi	r8, r1, asr #28
 e74:	0000070d 	andeq	r0, r0, sp, lsl #14
 e78:	00000020 	andeq	r0, r0, r0, lsr #32
 e7c:	00000e44 	andeq	r0, r0, r4, asr #28
 e80:	20002330 	andcs	r2, r0, r0, lsr r3
 e84:	00000128 	andeq	r0, r0, r8, lsr #2
 e88:	400c0e41 	andmi	r0, ip, r1, asr #28
 e8c:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 e90:	018e4002 	orreq	r4, lr, r2
 e94:	41300e41 	teqmi	r0, r1, asr #28
 e98:	0000070d 	andeq	r0, r0, sp, lsl #14
 e9c:	0000001c 	andeq	r0, r0, ip, lsl r0
 ea0:	00000e44 	andeq	r0, r0, r4, asr #28
 ea4:	20002458 	andcs	r2, r0, r8, asr r4
 ea8:	00000048 	andeq	r0, r0, r8, asr #32
 eac:	40080e41 	andmi	r0, r8, r1, asr #28
 eb0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 eb4:	100e4101 	andne	r4, lr, r1, lsl #2
 eb8:	00070d41 	andeq	r0, r7, r1, asr #26
 ebc:	0000001c 	andeq	r0, r0, ip, lsl r0
 ec0:	00000e44 	andeq	r0, r0, r4, asr #28
 ec4:	200024a0 	andcs	r2, r0, r0, lsr #9
 ec8:	00000032 	andeq	r0, r0, r2, lsr r0
 ecc:	40080e41 	andmi	r0, r8, r1, asr #28
 ed0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 ed4:	100e4101 	andne	r4, lr, r1, lsl #2
 ed8:	00070d41 	andeq	r0, r7, r1, asr #26
 edc:	0000001c 	andeq	r0, r0, ip, lsl r0
 ee0:	00000e44 	andeq	r0, r0, r4, asr #28
 ee4:	200024d2 	ldrdcs	r2, [r0], -r2	; <UNPREDICTABLE>
 ee8:	000000c4 	andeq	r0, r0, r4, asr #1
 eec:	40080e41 	andmi	r0, r8, r1, asr #28
 ef0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 ef4:	380e4101 	stmdacc	lr, {r0, r8, lr}
 ef8:	00070d41 	andeq	r0, r7, r1, asr #26
 efc:	0000001c 	andeq	r0, r0, ip, lsl r0
 f00:	00000e44 	andeq	r0, r0, r4, asr #28
 f04:	20002596 	mulcs	r0, r6, r5
 f08:	0000001c 	andeq	r0, r0, ip, lsl r0
 f0c:	40080e41 	andmi	r0, r8, r1, asr #28
 f10:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 f14:	100e4101 	andne	r4, lr, r1, lsl #2
 f18:	00070d41 	andeq	r0, r7, r1, asr #26
 f1c:	0000001c 	andeq	r0, r0, ip, lsl r0
 f20:	00000e44 	andeq	r0, r0, r4, asr #28
 f24:	200025b2 			; <UNDEFINED> instruction: 0x200025b2
 f28:	00000026 	andeq	r0, r0, r6, lsr #32
 f2c:	40080e41 	andmi	r0, r8, r1, asr #28
 f30:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 f34:	100e4101 	andne	r4, lr, r1, lsl #2
 f38:	00070d41 	andeq	r0, r7, r1, asr #26
 f3c:	0000000c 	andeq	r0, r0, ip
 f40:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 f44:	7c010001 	stcvc	0, cr0, [r1], {1}
 f48:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 f4c:	0000000c 	andeq	r0, r0, ip
 f50:	00000f3c 	andeq	r0, r0, ip, lsr pc
 f54:	200025d9 	ldrdcs	r2, [r0], -r9
 f58:	0000010a 	andeq	r0, r0, sl, lsl #2
