
./Debug/Door.elf:     file format elf32-littlearm


Disassembly of section .text:

20000000 <startup>:

void startup(void) __attribute__((naked)) __attribute__((section (".start_section")) );

void startup ( void )
{
__asm volatile(
20000000:	4802      	ldr	r0, [pc, #8]	; (2000000c <_exit+0x4>)
20000002:	4685      	mov	sp, r0
20000004:	f001 f938 	bl	20001278 <main>

20000008 <_exit>:
20000008:	e7fe      	b.n	20000008 <_exit>
	" LDR R0,=0x2001C000\n"		/* set stack */
	" MOV SP,R0\n"
	" BL main\n"				/* call main */
	"_exit: B .\n"				/* never return */
	) ;
}
2000000a:	46c0      	nop			; (mov r8, r8)
2000000c:	2001c000 	andcs	ip, r1, r0

20000010 <RCC_DeInit>:
  *            - LSI, LSE and RTC clocks 
  * @param  None
  * @retval None
  */
void RCC_DeInit(void)
{
20000010:	b580      	push	{r7, lr}
20000012:	af00      	add	r7, sp, #0
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
20000014:	4b14      	ldr	r3, [pc, #80]	; (20000068 <RCC_DeInit+0x58>)
20000016:	681a      	ldr	r2, [r3, #0]
20000018:	4b13      	ldr	r3, [pc, #76]	; (20000068 <RCC_DeInit+0x58>)
2000001a:	2101      	movs	r1, #1
2000001c:	430a      	orrs	r2, r1
2000001e:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
20000020:	4b11      	ldr	r3, [pc, #68]	; (20000068 <RCC_DeInit+0x58>)
20000022:	2200      	movs	r2, #0
20000024:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON, PLLON, PLLI2S and PLLSAI(STM32F42xxx/43xxx/446xx/469xx/479xx devices) bits */
  RCC->CR &= (uint32_t)0xEAF6FFFF;
20000026:	4b10      	ldr	r3, [pc, #64]	; (20000068 <RCC_DeInit+0x58>)
20000028:	681a      	ldr	r2, [r3, #0]
2000002a:	4b0f      	ldr	r3, [pc, #60]	; (20000068 <RCC_DeInit+0x58>)
2000002c:	490f      	ldr	r1, [pc, #60]	; (2000006c <RCC_DeInit+0x5c>)
2000002e:	400a      	ands	r2, r1
20000030:	601a      	str	r2, [r3, #0]
  
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
20000032:	4b0d      	ldr	r3, [pc, #52]	; (20000068 <RCC_DeInit+0x58>)
20000034:	4a0e      	ldr	r2, [pc, #56]	; (20000070 <RCC_DeInit+0x60>)
20000036:	605a      	str	r2, [r3, #4]

#if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F401xx) || defined(STM32F411xE) || defined(STM32F446xx) || defined(STM32F413_423xx) || defined(STM32F469_479xx)  
  /* Reset PLLI2SCFGR register */
  RCC->PLLI2SCFGR = 0x20003000;
20000038:	4a0b      	ldr	r2, [pc, #44]	; (20000068 <RCC_DeInit+0x58>)
2000003a:	2384      	movs	r3, #132	; 0x84
2000003c:	490d      	ldr	r1, [pc, #52]	; (20000074 <RCC_DeInit+0x64>)
2000003e:	50d1      	str	r1, [r2, r3]
#endif /* STM32F40_41xxx || STM32F427_437xx || STM32F429_439xx || STM32F401xx || STM32F411xE || STM32F446xx || STM32F413_423xx || STM32F469_479xx */

#if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F446xx) || defined(STM32F469_479xx) 
  /* Reset PLLSAICFGR register, only available for STM32F42xxx/43xxx/446xx/469xx/479xx devices */
  RCC->PLLSAICFGR = 0x24003000;
20000040:	4a09      	ldr	r2, [pc, #36]	; (20000068 <RCC_DeInit+0x58>)
20000042:	2388      	movs	r3, #136	; 0x88
20000044:	490c      	ldr	r1, [pc, #48]	; (20000078 <RCC_DeInit+0x68>)
20000046:	50d1      	str	r1, [r2, r3]
#endif /* STM32F40_41xxx || STM32F427_437xx || STM32F429_439xx || STM32F446xx || STM32F469_479xx */
  
  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
20000048:	4b07      	ldr	r3, [pc, #28]	; (20000068 <RCC_DeInit+0x58>)
2000004a:	681a      	ldr	r2, [r3, #0]
2000004c:	4b06      	ldr	r3, [pc, #24]	; (20000068 <RCC_DeInit+0x58>)
2000004e:	490b      	ldr	r1, [pc, #44]	; (2000007c <RCC_DeInit+0x6c>)
20000050:	400a      	ands	r2, r1
20000052:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
20000054:	4b04      	ldr	r3, [pc, #16]	; (20000068 <RCC_DeInit+0x58>)
20000056:	2200      	movs	r2, #0
20000058:	60da      	str	r2, [r3, #12]

  /* Disable Timers clock prescalers selection, only available for STM32F42/43xxx and STM32F413_423xx devices */
  RCC->DCKCFGR = 0x00000000;
2000005a:	4a03      	ldr	r2, [pc, #12]	; (20000068 <RCC_DeInit+0x58>)
2000005c:	238c      	movs	r3, #140	; 0x8c
2000005e:	2100      	movs	r1, #0
20000060:	50d1      	str	r1, [r2, r3]
  
#if defined(STM32F410xx) || defined(STM32F413_423xx)
  /* Disable LPTIM and FMPI2C clock prescalers selection, only available for STM32F410xx and STM32F413_423xx devices */
  RCC->DCKCFGR2 = 0x00000000;
#endif /* STM32F410xx || STM32F413_423xx */  
}
20000062:	46c0      	nop			; (mov r8, r8)
20000064:	46bd      	mov	sp, r7
20000066:	bd80      	pop	{r7, pc}
20000068:	40023800 	andmi	r3, r2, r0, lsl #16
2000006c:	eaf6ffff 	b	1fdc0070 <startup-0x23ff90>
20000070:	24003010 	strcs	r3, [r0], #-16
20000074:	20003000 	andcs	r3, r0, r0
20000078:	24003000 	strcs	r3, [r0], #-0
2000007c:	fffbffff 			; <UNDEFINED> instruction: 0xfffbffff

20000080 <RCC_HSEConfig>:
  *            @arg RCC_HSE_ON: turn ON the HSE oscillator
  *            @arg RCC_HSE_Bypass: HSE oscillator bypassed with external clock
  * @retval None
  */
void RCC_HSEConfig(uint8_t RCC_HSE)
{
20000080:	b580      	push	{r7, lr}
20000082:	b082      	sub	sp, #8
20000084:	af00      	add	r7, sp, #0
20000086:	0002      	movs	r2, r0
20000088:	1dfb      	adds	r3, r7, #7
2000008a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_HSE(RCC_HSE));

  /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
  *(__IO uint8_t *) CR_BYTE3_ADDRESS = RCC_HSE_OFF;
2000008c:	4b05      	ldr	r3, [pc, #20]	; (200000a4 <RCC_HSEConfig+0x24>)
2000008e:	2200      	movs	r2, #0
20000090:	701a      	strb	r2, [r3, #0]

  /* Set the new HSE configuration -------------------------------------------*/
  *(__IO uint8_t *) CR_BYTE3_ADDRESS = RCC_HSE;
20000092:	4a04      	ldr	r2, [pc, #16]	; (200000a4 <RCC_HSEConfig+0x24>)
20000094:	1dfb      	adds	r3, r7, #7
20000096:	781b      	ldrb	r3, [r3, #0]
20000098:	7013      	strb	r3, [r2, #0]
}
2000009a:	46c0      	nop			; (mov r8, r8)
2000009c:	46bd      	mov	sp, r7
2000009e:	b002      	add	sp, #8
200000a0:	bd80      	pop	{r7, pc}
200000a2:	46c0      	nop			; (mov r8, r8)
200000a4:	40023802 	andmi	r3, r2, r2, lsl #16

200000a8 <RCC_WaitForHSEStartUp>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: HSE oscillator is stable and ready to use
  *          - ERROR: HSE oscillator not yet ready
  */
ErrorStatus RCC_WaitForHSEStartUp(void)
{
200000a8:	b590      	push	{r4, r7, lr}
200000aa:	b083      	sub	sp, #12
200000ac:	af00      	add	r7, sp, #0
  __IO uint32_t startupcounter = 0;
200000ae:	2300      	movs	r3, #0
200000b0:	603b      	str	r3, [r7, #0]
  ErrorStatus status = ERROR;
200000b2:	1dfb      	adds	r3, r7, #7
200000b4:	2200      	movs	r2, #0
200000b6:	701a      	strb	r2, [r3, #0]
  FlagStatus hsestatus = RESET;
200000b8:	1dbb      	adds	r3, r7, #6
200000ba:	2200      	movs	r2, #0
200000bc:	701a      	strb	r2, [r3, #0]
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    hsestatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
200000be:	1dbc      	adds	r4, r7, #6
200000c0:	2031      	movs	r0, #49	; 0x31
200000c2:	f000 fd9b 	bl	20000bfc <RCC_GetFlagStatus>
200000c6:	0003      	movs	r3, r0
200000c8:	7023      	strb	r3, [r4, #0]
    startupcounter++;
200000ca:	683b      	ldr	r3, [r7, #0]
200000cc:	3301      	adds	r3, #1
200000ce:	603b      	str	r3, [r7, #0]
  } while((startupcounter != HSE_STARTUP_TIMEOUT) && (hsestatus == RESET));
200000d0:	683a      	ldr	r2, [r7, #0]
200000d2:	23a0      	movs	r3, #160	; 0xa0
200000d4:	01db      	lsls	r3, r3, #7
200000d6:	429a      	cmp	r2, r3
200000d8:	d003      	beq.n	200000e2 <RCC_WaitForHSEStartUp+0x3a>
200000da:	1dbb      	adds	r3, r7, #6
200000dc:	781b      	ldrb	r3, [r3, #0]
200000de:	2b00      	cmp	r3, #0
200000e0:	d0ed      	beq.n	200000be <RCC_WaitForHSEStartUp+0x16>

  if (RCC_GetFlagStatus(RCC_FLAG_HSERDY) != RESET)
200000e2:	2031      	movs	r0, #49	; 0x31
200000e4:	f000 fd8a 	bl	20000bfc <RCC_GetFlagStatus>
200000e8:	1e03      	subs	r3, r0, #0
200000ea:	d003      	beq.n	200000f4 <RCC_WaitForHSEStartUp+0x4c>
  {
    status = SUCCESS;
200000ec:	1dfb      	adds	r3, r7, #7
200000ee:	2201      	movs	r2, #1
200000f0:	701a      	strb	r2, [r3, #0]
200000f2:	e002      	b.n	200000fa <RCC_WaitForHSEStartUp+0x52>
  }
  else
  {
    status = ERROR;
200000f4:	1dfb      	adds	r3, r7, #7
200000f6:	2200      	movs	r2, #0
200000f8:	701a      	strb	r2, [r3, #0]
  }
  return (status);
200000fa:	1dfb      	adds	r3, r7, #7
200000fc:	781b      	ldrb	r3, [r3, #0]
}
200000fe:	0018      	movs	r0, r3
20000100:	46bd      	mov	sp, r7
20000102:	b003      	add	sp, #12
20000104:	bd90      	pop	{r4, r7, pc}

20000106 <RCC_AdjustHSICalibrationValue>:
  * @param  HSICalibrationValue: specifies the calibration trimming value.
  *         This parameter must be a number between 0 and 0x1F.
  * @retval None
  */
void RCC_AdjustHSICalibrationValue(uint8_t HSICalibrationValue)
{
20000106:	b580      	push	{r7, lr}
20000108:	b084      	sub	sp, #16
2000010a:	af00      	add	r7, sp, #0
2000010c:	0002      	movs	r2, r0
2000010e:	1dfb      	adds	r3, r7, #7
20000110:	701a      	strb	r2, [r3, #0]
  uint32_t tmpreg = 0;
20000112:	2300      	movs	r3, #0
20000114:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_CALIBRATION_VALUE(HSICalibrationValue));

  tmpreg = RCC->CR;
20000116:	4b0a      	ldr	r3, [pc, #40]	; (20000140 <RCC_AdjustHSICalibrationValue+0x3a>)
20000118:	681b      	ldr	r3, [r3, #0]
2000011a:	60fb      	str	r3, [r7, #12]

  /* Clear HSITRIM[4:0] bits */
  tmpreg &= ~RCC_CR_HSITRIM;
2000011c:	68fb      	ldr	r3, [r7, #12]
2000011e:	22f8      	movs	r2, #248	; 0xf8
20000120:	4393      	bics	r3, r2
20000122:	60fb      	str	r3, [r7, #12]

  /* Set the HSITRIM[4:0] bits according to HSICalibrationValue value */
  tmpreg |= (uint32_t)HSICalibrationValue << 3;
20000124:	1dfb      	adds	r3, r7, #7
20000126:	781b      	ldrb	r3, [r3, #0]
20000128:	00db      	lsls	r3, r3, #3
2000012a:	68fa      	ldr	r2, [r7, #12]
2000012c:	4313      	orrs	r3, r2
2000012e:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CR = tmpreg;
20000130:	4b03      	ldr	r3, [pc, #12]	; (20000140 <RCC_AdjustHSICalibrationValue+0x3a>)
20000132:	68fa      	ldr	r2, [r7, #12]
20000134:	601a      	str	r2, [r3, #0]
}
20000136:	46c0      	nop			; (mov r8, r8)
20000138:	46bd      	mov	sp, r7
2000013a:	b004      	add	sp, #16
2000013c:	bd80      	pop	{r7, pc}
2000013e:	46c0      	nop			; (mov r8, r8)
20000140:	40023800 	andmi	r3, r2, r0, lsl #16

20000144 <RCC_HSICmd>:
  * @note   When the HSI is stopped, HSIRDY flag goes low after 6 HSI oscillator
  *         clock cycles.  
  * @retval None
  */
void RCC_HSICmd(FunctionalState NewState)
{
20000144:	b580      	push	{r7, lr}
20000146:	b082      	sub	sp, #8
20000148:	af00      	add	r7, sp, #0
2000014a:	0002      	movs	r2, r0
2000014c:	1dfb      	adds	r3, r7, #7
2000014e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CR_HSION_BB = (uint32_t)NewState;
20000150:	4b03      	ldr	r3, [pc, #12]	; (20000160 <RCC_HSICmd+0x1c>)
20000152:	1dfa      	adds	r2, r7, #7
20000154:	7812      	ldrb	r2, [r2, #0]
20000156:	601a      	str	r2, [r3, #0]
}
20000158:	46c0      	nop			; (mov r8, r8)
2000015a:	46bd      	mov	sp, r7
2000015c:	b002      	add	sp, #8
2000015e:	bd80      	pop	{r7, pc}
20000160:	42470000 	submi	r0, r7, #0

20000164 <RCC_LSEConfig>:
  *            @arg RCC_LSE_ON: turn ON the LSE oscillator
  *            @arg RCC_LSE_Bypass: LSE oscillator bypassed with external clock
  * @retval None
  */
void RCC_LSEConfig(uint8_t RCC_LSE)
{
20000164:	b580      	push	{r7, lr}
20000166:	b082      	sub	sp, #8
20000168:	af00      	add	r7, sp, #0
2000016a:	0002      	movs	r2, r0
2000016c:	1dfb      	adds	r3, r7, #7
2000016e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_LSE(RCC_LSE));

  /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
  /* Reset LSEON bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
20000170:	4b0c      	ldr	r3, [pc, #48]	; (200001a4 <RCC_LSEConfig+0x40>)
20000172:	2200      	movs	r2, #0
20000174:	701a      	strb	r2, [r3, #0]

  /* Reset LSEBYP bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
20000176:	4b0b      	ldr	r3, [pc, #44]	; (200001a4 <RCC_LSEConfig+0x40>)
20000178:	2200      	movs	r2, #0
2000017a:	701a      	strb	r2, [r3, #0]

  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch (RCC_LSE)
2000017c:	1dfb      	adds	r3, r7, #7
2000017e:	781b      	ldrb	r3, [r3, #0]
20000180:	2b01      	cmp	r3, #1
20000182:	d002      	beq.n	2000018a <RCC_LSEConfig+0x26>
20000184:	2b04      	cmp	r3, #4
20000186:	d004      	beq.n	20000192 <RCC_LSEConfig+0x2e>
    case RCC_LSE_Bypass:
      /* Set LSEBYP and LSEON bits */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
      break;
    default:
      break;
20000188:	e007      	b.n	2000019a <RCC_LSEConfig+0x36>
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_ON;
2000018a:	4b06      	ldr	r3, [pc, #24]	; (200001a4 <RCC_LSEConfig+0x40>)
2000018c:	2201      	movs	r2, #1
2000018e:	701a      	strb	r2, [r3, #0]
      break;
20000190:	e003      	b.n	2000019a <RCC_LSEConfig+0x36>
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
20000192:	4b04      	ldr	r3, [pc, #16]	; (200001a4 <RCC_LSEConfig+0x40>)
20000194:	2205      	movs	r2, #5
20000196:	701a      	strb	r2, [r3, #0]
      break;
20000198:	46c0      	nop			; (mov r8, r8)
  }
}
2000019a:	46c0      	nop			; (mov r8, r8)
2000019c:	46bd      	mov	sp, r7
2000019e:	b002      	add	sp, #8
200001a0:	bd80      	pop	{r7, pc}
200001a2:	46c0      	nop			; (mov r8, r8)
200001a4:	40023870 	andmi	r3, r2, r0, ror r8

200001a8 <RCC_LSICmd>:
  * @note   When the LSI is stopped, LSIRDY flag goes low after 6 LSI oscillator
  *         clock cycles. 
  * @retval None
  */
void RCC_LSICmd(FunctionalState NewState)
{
200001a8:	b580      	push	{r7, lr}
200001aa:	b082      	sub	sp, #8
200001ac:	af00      	add	r7, sp, #0
200001ae:	0002      	movs	r2, r0
200001b0:	1dfb      	adds	r3, r7, #7
200001b2:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CSR_LSION_BB = (uint32_t)NewState;
200001b4:	4b03      	ldr	r3, [pc, #12]	; (200001c4 <RCC_LSICmd+0x1c>)
200001b6:	1dfa      	adds	r2, r7, #7
200001b8:	7812      	ldrb	r2, [r2, #0]
200001ba:	601a      	str	r2, [r3, #0]
}
200001bc:	46c0      	nop			; (mov r8, r8)
200001be:	46bd      	mov	sp, r7
200001c0:	b002      	add	sp, #8
200001c2:	bd80      	pop	{r7, pc}
200001c4:	42470e80 	submi	r0, r7, #128, 28	; 0x800

200001c8 <RCC_PLLConfig>:
  *         correctly.
  *   
  * @retval None
  */
void RCC_PLLConfig(uint32_t RCC_PLLSource, uint32_t PLLM, uint32_t PLLN, uint32_t PLLP, uint32_t PLLQ)
{
200001c8:	b580      	push	{r7, lr}
200001ca:	b084      	sub	sp, #16
200001cc:	af00      	add	r7, sp, #0
200001ce:	60f8      	str	r0, [r7, #12]
200001d0:	60b9      	str	r1, [r7, #8]
200001d2:	607a      	str	r2, [r7, #4]
200001d4:	603b      	str	r3, [r7, #0]
  assert_param(IS_RCC_PLLM_VALUE(PLLM));
  assert_param(IS_RCC_PLLN_VALUE(PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLP));
  assert_param(IS_RCC_PLLQ_VALUE(PLLQ));

  RCC->PLLCFGR = PLLM | (PLLN << 6) | (((PLLP >> 1) -1) << 16) | (RCC_PLLSource) |
200001d6:	687b      	ldr	r3, [r7, #4]
200001d8:	019a      	lsls	r2, r3, #6
200001da:	68bb      	ldr	r3, [r7, #8]
200001dc:	431a      	orrs	r2, r3
200001de:	683b      	ldr	r3, [r7, #0]
200001e0:	085b      	lsrs	r3, r3, #1
200001e2:	3b01      	subs	r3, #1
200001e4:	041b      	lsls	r3, r3, #16
200001e6:	431a      	orrs	r2, r3
200001e8:	68fb      	ldr	r3, [r7, #12]
200001ea:	431a      	orrs	r2, r3
200001ec:	0011      	movs	r1, r2
                 (PLLQ << 24);
200001ee:	69bb      	ldr	r3, [r7, #24]
200001f0:	061a      	lsls	r2, r3, #24
  RCC->PLLCFGR = PLLM | (PLLN << 6) | (((PLLP >> 1) -1) << 16) | (RCC_PLLSource) |
200001f2:	4b03      	ldr	r3, [pc, #12]	; (20000200 <RCC_PLLConfig+0x38>)
200001f4:	430a      	orrs	r2, r1
200001f6:	605a      	str	r2, [r3, #4]
}
200001f8:	46c0      	nop			; (mov r8, r8)
200001fa:	46bd      	mov	sp, r7
200001fc:	b004      	add	sp, #16
200001fe:	bd80      	pop	{r7, pc}
20000200:	40023800 	andmi	r3, r2, r0, lsl #16

20000204 <RCC_PLLCmd>:
  * @note   The main PLL is disabled by hardware when entering STOP and STANDBY modes.
  * @param  NewState: new state of the main PLL. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_PLLCmd(FunctionalState NewState)
{
20000204:	b580      	push	{r7, lr}
20000206:	b082      	sub	sp, #8
20000208:	af00      	add	r7, sp, #0
2000020a:	0002      	movs	r2, r0
2000020c:	1dfb      	adds	r3, r7, #7
2000020e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_PLLON_BB = (uint32_t)NewState;
20000210:	4b03      	ldr	r3, [pc, #12]	; (20000220 <RCC_PLLCmd+0x1c>)
20000212:	1dfa      	adds	r2, r7, #7
20000214:	7812      	ldrb	r2, [r2, #0]
20000216:	601a      	str	r2, [r3, #0]
}
20000218:	46c0      	nop			; (mov r8, r8)
2000021a:	46bd      	mov	sp, r7
2000021c:	b002      	add	sp, #8
2000021e:	bd80      	pop	{r7, pc}
20000220:	42470060 	submi	r0, r7, #96	; 0x60

20000224 <RCC_PLLI2SConfig>:
  *         on the I2S clock frequency.
  *   
  * @retval None
  */
void RCC_PLLI2SConfig(uint32_t PLLI2SN, uint32_t PLLI2SR)
{
20000224:	b580      	push	{r7, lr}
20000226:	b082      	sub	sp, #8
20000228:	af00      	add	r7, sp, #0
2000022a:	6078      	str	r0, [r7, #4]
2000022c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RCC_PLLI2SN_VALUE(PLLI2SN));
  assert_param(IS_RCC_PLLI2SR_VALUE(PLLI2SR));

  RCC->PLLI2SCFGR = (PLLI2SN << 6) | (PLLI2SR << 28);
2000022e:	687b      	ldr	r3, [r7, #4]
20000230:	019a      	lsls	r2, r3, #6
20000232:	683b      	ldr	r3, [r7, #0]
20000234:	071b      	lsls	r3, r3, #28
20000236:	4904      	ldr	r1, [pc, #16]	; (20000248 <RCC_PLLI2SConfig+0x24>)
20000238:	4313      	orrs	r3, r2
2000023a:	2284      	movs	r2, #132	; 0x84
2000023c:	508b      	str	r3, [r1, r2]
}
2000023e:	46c0      	nop			; (mov r8, r8)
20000240:	46bd      	mov	sp, r7
20000242:	b002      	add	sp, #8
20000244:	bd80      	pop	{r7, pc}
20000246:	46c0      	nop			; (mov r8, r8)
20000248:	40023800 	andmi	r3, r2, r0, lsl #16

2000024c <RCC_PLLI2SCmd>:
  * @note   The PLLI2S is disabled by hardware when entering STOP and STANDBY modes.  
  * @param  NewState: new state of the PLLI2S. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_PLLI2SCmd(FunctionalState NewState)
{
2000024c:	b580      	push	{r7, lr}
2000024e:	b082      	sub	sp, #8
20000250:	af00      	add	r7, sp, #0
20000252:	0002      	movs	r2, r0
20000254:	1dfb      	adds	r3, r7, #7
20000256:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_PLLI2SON_BB = (uint32_t)NewState;
20000258:	4b03      	ldr	r3, [pc, #12]	; (20000268 <RCC_PLLI2SCmd+0x1c>)
2000025a:	1dfa      	adds	r2, r7, #7
2000025c:	7812      	ldrb	r2, [r2, #0]
2000025e:	601a      	str	r2, [r3, #0]
}
20000260:	46c0      	nop			; (mov r8, r8)
20000262:	46bd      	mov	sp, r7
20000264:	b002      	add	sp, #8
20000266:	bd80      	pop	{r7, pc}
20000268:	42470068 	submi	r0, r7, #104	; 0x68

2000026c <RCC_PLLSAIConfig>:
  *          This parameter must be a number between 2 and 7.
  *   
  * @retval None
  */
void RCC_PLLSAIConfig(uint32_t PLLSAIN, uint32_t PLLSAIQ, uint32_t PLLSAIR)
{
2000026c:	b580      	push	{r7, lr}
2000026e:	b084      	sub	sp, #16
20000270:	af00      	add	r7, sp, #0
20000272:	60f8      	str	r0, [r7, #12]
20000274:	60b9      	str	r1, [r7, #8]
20000276:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_PLLSAIN_VALUE(PLLSAIN));
  assert_param(IS_RCC_PLLSAIR_VALUE(PLLSAIR));
  assert_param(IS_RCC_PLLSAIQ_VALUE(PLLSAIQ));
  
  RCC->PLLSAICFGR = (PLLSAIN << 6) | (PLLSAIQ << 24) | (PLLSAIR << 28);
20000278:	68fb      	ldr	r3, [r7, #12]
2000027a:	019a      	lsls	r2, r3, #6
2000027c:	68bb      	ldr	r3, [r7, #8]
2000027e:	061b      	lsls	r3, r3, #24
20000280:	431a      	orrs	r2, r3
20000282:	687b      	ldr	r3, [r7, #4]
20000284:	071b      	lsls	r3, r3, #28
20000286:	4904      	ldr	r1, [pc, #16]	; (20000298 <RCC_PLLSAIConfig+0x2c>)
20000288:	4313      	orrs	r3, r2
2000028a:	2288      	movs	r2, #136	; 0x88
2000028c:	508b      	str	r3, [r1, r2]
}
2000028e:	46c0      	nop			; (mov r8, r8)
20000290:	46bd      	mov	sp, r7
20000292:	b004      	add	sp, #16
20000294:	bd80      	pop	{r7, pc}
20000296:	46c0      	nop			; (mov r8, r8)
20000298:	40023800 	andmi	r3, r2, r0, lsl #16

2000029c <RCC_PLLSAICmd>:
  * @note   The PLLSAI is disabled by hardware when entering STOP and STANDBY modes.  
  * @param  NewState: new state of the PLLSAI. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_PLLSAICmd(FunctionalState NewState)
{
2000029c:	b580      	push	{r7, lr}
2000029e:	b082      	sub	sp, #8
200002a0:	af00      	add	r7, sp, #0
200002a2:	0002      	movs	r2, r0
200002a4:	1dfb      	adds	r3, r7, #7
200002a6:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_PLLSAION_BB = (uint32_t)NewState;
200002a8:	4b03      	ldr	r3, [pc, #12]	; (200002b8 <RCC_PLLSAICmd+0x1c>)
200002aa:	1dfa      	adds	r2, r7, #7
200002ac:	7812      	ldrb	r2, [r2, #0]
200002ae:	601a      	str	r2, [r3, #0]
}
200002b0:	46c0      	nop			; (mov r8, r8)
200002b2:	46bd      	mov	sp, r7
200002b4:	b002      	add	sp, #8
200002b6:	bd80      	pop	{r7, pc}
200002b8:	42470070 	submi	r0, r7, #112	; 0x70

200002bc <RCC_ClockSecuritySystemCmd>:
  * @param  NewState: new state of the Clock Security System.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_ClockSecuritySystemCmd(FunctionalState NewState)
{
200002bc:	b580      	push	{r7, lr}
200002be:	b082      	sub	sp, #8
200002c0:	af00      	add	r7, sp, #0
200002c2:	0002      	movs	r2, r0
200002c4:	1dfb      	adds	r3, r7, #7
200002c6:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_CSSON_BB = (uint32_t)NewState;
200002c8:	4b03      	ldr	r3, [pc, #12]	; (200002d8 <RCC_ClockSecuritySystemCmd+0x1c>)
200002ca:	1dfa      	adds	r2, r7, #7
200002cc:	7812      	ldrb	r2, [r2, #0]
200002ce:	601a      	str	r2, [r3, #0]
}
200002d0:	46c0      	nop			; (mov r8, r8)
200002d2:	46bd      	mov	sp, r7
200002d4:	b002      	add	sp, #8
200002d6:	bd80      	pop	{r7, pc}
200002d8:	4247004c 	submi	r0, r7, #76	; 0x4c

200002dc <RCC_MCO1Config>:
  *            @arg RCC_MCO1Div_4: division by 4 applied to MCO1 clock
  *            @arg RCC_MCO1Div_5: division by 5 applied to MCO1 clock
  * @retval None
  */
void RCC_MCO1Config(uint32_t RCC_MCO1Source, uint32_t RCC_MCO1Div)
{
200002dc:	b580      	push	{r7, lr}
200002de:	b084      	sub	sp, #16
200002e0:	af00      	add	r7, sp, #0
200002e2:	6078      	str	r0, [r7, #4]
200002e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
200002e6:	2300      	movs	r3, #0
200002e8:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_MCO1SOURCE(RCC_MCO1Source));
  assert_param(IS_RCC_MCO1DIV(RCC_MCO1Div));  

  tmpreg = RCC->CFGR;
200002ea:	4b0a      	ldr	r3, [pc, #40]	; (20000314 <RCC_MCO1Config+0x38>)
200002ec:	689b      	ldr	r3, [r3, #8]
200002ee:	60fb      	str	r3, [r7, #12]

  /* Clear MCO1[1:0] and MCO1PRE[2:0] bits */
  tmpreg &= CFGR_MCO1_RESET_MASK;
200002f0:	68fb      	ldr	r3, [r7, #12]
200002f2:	4a09      	ldr	r2, [pc, #36]	; (20000318 <RCC_MCO1Config+0x3c>)
200002f4:	4013      	ands	r3, r2
200002f6:	60fb      	str	r3, [r7, #12]

  /* Select MCO1 clock source and prescaler */
  tmpreg |= RCC_MCO1Source | RCC_MCO1Div;
200002f8:	687a      	ldr	r2, [r7, #4]
200002fa:	683b      	ldr	r3, [r7, #0]
200002fc:	4313      	orrs	r3, r2
200002fe:	68fa      	ldr	r2, [r7, #12]
20000300:	4313      	orrs	r3, r2
20000302:	60fb      	str	r3, [r7, #12]
  
  /* Store the new value */
  RCC->CFGR = tmpreg;
20000304:	4b03      	ldr	r3, [pc, #12]	; (20000314 <RCC_MCO1Config+0x38>)
20000306:	68fa      	ldr	r2, [r7, #12]
20000308:	609a      	str	r2, [r3, #8]

#if defined(STM32F410xx)
  RCC_MCO1Cmd(ENABLE);
#endif /* STM32F410xx */   
}
2000030a:	46c0      	nop			; (mov r8, r8)
2000030c:	46bd      	mov	sp, r7
2000030e:	b004      	add	sp, #16
20000310:	bd80      	pop	{r7, pc}
20000312:	46c0      	nop			; (mov r8, r8)
20000314:	40023800 	andmi	r3, r2, r0, lsl #16
20000318:	f89fffff 			; <UNDEFINED> instruction: 0xf89fffff

2000031c <RCC_MCO2Config>:
  * @note  For STM32F410xx devices to output I2SCLK clock on MCO2 you should have
  *        at last one of the SPI clocks enabled (SPI1, SPI2 or SPI5).
  * @retval None
  */
void RCC_MCO2Config(uint32_t RCC_MCO2Source, uint32_t RCC_MCO2Div)
{
2000031c:	b580      	push	{r7, lr}
2000031e:	b084      	sub	sp, #16
20000320:	af00      	add	r7, sp, #0
20000322:	6078      	str	r0, [r7, #4]
20000324:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
20000326:	2300      	movs	r3, #0
20000328:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_MCO2SOURCE(RCC_MCO2Source));
  assert_param(IS_RCC_MCO2DIV(RCC_MCO2Div));
  
  tmpreg = RCC->CFGR;
2000032a:	4b0a      	ldr	r3, [pc, #40]	; (20000354 <RCC_MCO2Config+0x38>)
2000032c:	689b      	ldr	r3, [r3, #8]
2000032e:	60fb      	str	r3, [r7, #12]
  
  /* Clear MCO2 and MCO2PRE[2:0] bits */
  tmpreg &= CFGR_MCO2_RESET_MASK;
20000330:	68fb      	ldr	r3, [r7, #12]
20000332:	015b      	lsls	r3, r3, #5
20000334:	095b      	lsrs	r3, r3, #5
20000336:	60fb      	str	r3, [r7, #12]

  /* Select MCO2 clock source and prescaler */
  tmpreg |= RCC_MCO2Source | RCC_MCO2Div;
20000338:	687a      	ldr	r2, [r7, #4]
2000033a:	683b      	ldr	r3, [r7, #0]
2000033c:	4313      	orrs	r3, r2
2000033e:	68fa      	ldr	r2, [r7, #12]
20000340:	4313      	orrs	r3, r2
20000342:	60fb      	str	r3, [r7, #12]
  
  /* Store the new value */
  RCC->CFGR = tmpreg;
20000344:	4b03      	ldr	r3, [pc, #12]	; (20000354 <RCC_MCO2Config+0x38>)
20000346:	68fa      	ldr	r2, [r7, #12]
20000348:	609a      	str	r2, [r3, #8]

#if defined(STM32F410xx)
  RCC_MCO2Cmd(ENABLE);
#endif /* STM32F410xx */   
}
2000034a:	46c0      	nop			; (mov r8, r8)
2000034c:	46bd      	mov	sp, r7
2000034e:	b004      	add	sp, #16
20000350:	bd80      	pop	{r7, pc}
20000352:	46c0      	nop			; (mov r8, r8)
20000354:	40023800 	andmi	r3, r2, r0, lsl #16

20000358 <RCC_SYSCLKConfig>:
  *            @arg RCC_SYSCLKSource_PLLCLK: PLL selected as system clock source (RCC_SYSCLKSource_PLLPCLK for STM32F446xx devices)
  *            @arg RCC_SYSCLKSource_PLLRCLK: PLL R selected as system clock source only for STM32F412xG, STM32F413_423xx and STM32F446xx devices
  * @retval None
  */
void RCC_SYSCLKConfig(uint32_t RCC_SYSCLKSource)
{
20000358:	b580      	push	{r7, lr}
2000035a:	b084      	sub	sp, #16
2000035c:	af00      	add	r7, sp, #0
2000035e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
20000360:	2300      	movs	r3, #0
20000362:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_SYSCLK_SOURCE(RCC_SYSCLKSource));

  tmpreg = RCC->CFGR;
20000364:	4b08      	ldr	r3, [pc, #32]	; (20000388 <RCC_SYSCLKConfig+0x30>)
20000366:	689b      	ldr	r3, [r3, #8]
20000368:	60fb      	str	r3, [r7, #12]

  /* Clear SW[1:0] bits */
  tmpreg &= ~RCC_CFGR_SW;
2000036a:	68fb      	ldr	r3, [r7, #12]
2000036c:	2203      	movs	r2, #3
2000036e:	4393      	bics	r3, r2
20000370:	60fb      	str	r3, [r7, #12]

  /* Set SW[1:0] bits according to RCC_SYSCLKSource value */
  tmpreg |= RCC_SYSCLKSource;
20000372:	68fa      	ldr	r2, [r7, #12]
20000374:	687b      	ldr	r3, [r7, #4]
20000376:	4313      	orrs	r3, r2
20000378:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;
2000037a:	4b03      	ldr	r3, [pc, #12]	; (20000388 <RCC_SYSCLKConfig+0x30>)
2000037c:	68fa      	ldr	r2, [r7, #12]
2000037e:	609a      	str	r2, [r3, #8]
}
20000380:	46c0      	nop			; (mov r8, r8)
20000382:	46bd      	mov	sp, r7
20000384:	b004      	add	sp, #16
20000386:	bd80      	pop	{r7, pc}
20000388:	40023800 	andmi	r3, r2, r0, lsl #16

2000038c <RCC_GetSYSCLKSource>:
  *              - 0x04: HSE used as system clock
  *              - 0x08: PLL used as system clock (PLL P for STM32F446xx devices)
  *              - 0x0C: PLL R used as system clock (only for STM32F412xG, STM32F413_423xx and STM32F446xx devices)
  */
uint8_t RCC_GetSYSCLKSource(void)
{
2000038c:	b580      	push	{r7, lr}
2000038e:	af00      	add	r7, sp, #0
  return ((uint8_t)(RCC->CFGR & RCC_CFGR_SWS));
20000390:	4b04      	ldr	r3, [pc, #16]	; (200003a4 <RCC_GetSYSCLKSource+0x18>)
20000392:	689b      	ldr	r3, [r3, #8]
20000394:	b2db      	uxtb	r3, r3
20000396:	220c      	movs	r2, #12
20000398:	4013      	ands	r3, r2
2000039a:	b2db      	uxtb	r3, r3
}
2000039c:	0018      	movs	r0, r3
2000039e:	46bd      	mov	sp, r7
200003a0:	bd80      	pop	{r7, pc}
200003a2:	46c0      	nop			; (mov r8, r8)
200003a4:	40023800 	andmi	r3, r2, r0, lsl #16

200003a8 <RCC_HCLKConfig>:
  *            @arg RCC_SYSCLK_Div256: AHB clock = SYSCLK/256
  *            @arg RCC_SYSCLK_Div512: AHB clock = SYSCLK/512
  * @retval None
  */
void RCC_HCLKConfig(uint32_t RCC_SYSCLK)
{
200003a8:	b580      	push	{r7, lr}
200003aa:	b084      	sub	sp, #16
200003ac:	af00      	add	r7, sp, #0
200003ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
200003b0:	2300      	movs	r3, #0
200003b2:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_HCLK(RCC_SYSCLK));

  tmpreg = RCC->CFGR;
200003b4:	4b08      	ldr	r3, [pc, #32]	; (200003d8 <RCC_HCLKConfig+0x30>)
200003b6:	689b      	ldr	r3, [r3, #8]
200003b8:	60fb      	str	r3, [r7, #12]

  /* Clear HPRE[3:0] bits */
  tmpreg &= ~RCC_CFGR_HPRE;
200003ba:	68fb      	ldr	r3, [r7, #12]
200003bc:	22f0      	movs	r2, #240	; 0xf0
200003be:	4393      	bics	r3, r2
200003c0:	60fb      	str	r3, [r7, #12]

  /* Set HPRE[3:0] bits according to RCC_SYSCLK value */
  tmpreg |= RCC_SYSCLK;
200003c2:	68fa      	ldr	r2, [r7, #12]
200003c4:	687b      	ldr	r3, [r7, #4]
200003c6:	4313      	orrs	r3, r2
200003c8:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;
200003ca:	4b03      	ldr	r3, [pc, #12]	; (200003d8 <RCC_HCLKConfig+0x30>)
200003cc:	68fa      	ldr	r2, [r7, #12]
200003ce:	609a      	str	r2, [r3, #8]
}
200003d0:	46c0      	nop			; (mov r8, r8)
200003d2:	46bd      	mov	sp, r7
200003d4:	b004      	add	sp, #16
200003d6:	bd80      	pop	{r7, pc}
200003d8:	40023800 	andmi	r3, r2, r0, lsl #16

200003dc <RCC_PCLK1Config>:
  *            @arg RCC_HCLK_Div8:  APB1 clock = HCLK/8
  *            @arg RCC_HCLK_Div16: APB1 clock = HCLK/16
  * @retval None
  */
void RCC_PCLK1Config(uint32_t RCC_HCLK)
{
200003dc:	b580      	push	{r7, lr}
200003de:	b084      	sub	sp, #16
200003e0:	af00      	add	r7, sp, #0
200003e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
200003e4:	2300      	movs	r3, #0
200003e6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));

  tmpreg = RCC->CFGR;
200003e8:	4b08      	ldr	r3, [pc, #32]	; (2000040c <RCC_PCLK1Config+0x30>)
200003ea:	689b      	ldr	r3, [r3, #8]
200003ec:	60fb      	str	r3, [r7, #12]

  /* Clear PPRE1[2:0] bits */
  tmpreg &= ~RCC_CFGR_PPRE1;
200003ee:	68fb      	ldr	r3, [r7, #12]
200003f0:	4a07      	ldr	r2, [pc, #28]	; (20000410 <RCC_PCLK1Config+0x34>)
200003f2:	4013      	ands	r3, r2
200003f4:	60fb      	str	r3, [r7, #12]

  /* Set PPRE1[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK;
200003f6:	68fa      	ldr	r2, [r7, #12]
200003f8:	687b      	ldr	r3, [r7, #4]
200003fa:	4313      	orrs	r3, r2
200003fc:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;
200003fe:	4b03      	ldr	r3, [pc, #12]	; (2000040c <RCC_PCLK1Config+0x30>)
20000400:	68fa      	ldr	r2, [r7, #12]
20000402:	609a      	str	r2, [r3, #8]
}
20000404:	46c0      	nop			; (mov r8, r8)
20000406:	46bd      	mov	sp, r7
20000408:	b004      	add	sp, #16
2000040a:	bd80      	pop	{r7, pc}
2000040c:	40023800 	andmi	r3, r2, r0, lsl #16
20000410:	ffffe3ff 			; <UNDEFINED> instruction: 0xffffe3ff

20000414 <RCC_PCLK2Config>:
  *            @arg RCC_HCLK_Div8:  APB2 clock = HCLK/8
  *            @arg RCC_HCLK_Div16: APB2 clock = HCLK/16
  * @retval None
  */
void RCC_PCLK2Config(uint32_t RCC_HCLK)
{
20000414:	b580      	push	{r7, lr}
20000416:	b084      	sub	sp, #16
20000418:	af00      	add	r7, sp, #0
2000041a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
2000041c:	2300      	movs	r3, #0
2000041e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));

  tmpreg = RCC->CFGR;
20000420:	4b09      	ldr	r3, [pc, #36]	; (20000448 <RCC_PCLK2Config+0x34>)
20000422:	689b      	ldr	r3, [r3, #8]
20000424:	60fb      	str	r3, [r7, #12]

  /* Clear PPRE2[2:0] bits */
  tmpreg &= ~RCC_CFGR_PPRE2;
20000426:	68fb      	ldr	r3, [r7, #12]
20000428:	4a08      	ldr	r2, [pc, #32]	; (2000044c <RCC_PCLK2Config+0x38>)
2000042a:	4013      	ands	r3, r2
2000042c:	60fb      	str	r3, [r7, #12]

  /* Set PPRE2[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK << 3;
2000042e:	687b      	ldr	r3, [r7, #4]
20000430:	00db      	lsls	r3, r3, #3
20000432:	68fa      	ldr	r2, [r7, #12]
20000434:	4313      	orrs	r3, r2
20000436:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;
20000438:	4b03      	ldr	r3, [pc, #12]	; (20000448 <RCC_PCLK2Config+0x34>)
2000043a:	68fa      	ldr	r2, [r7, #12]
2000043c:	609a      	str	r2, [r3, #8]
}
2000043e:	46c0      	nop			; (mov r8, r8)
20000440:	46bd      	mov	sp, r7
20000442:	b004      	add	sp, #16
20000444:	bd80      	pop	{r7, pc}
20000446:	46c0      	nop			; (mov r8, r8)
20000448:	40023800 	andmi	r3, r2, r0, lsl #16
2000044c:	ffff1fff 			; <UNDEFINED> instruction: 0xffff1fff

20000450 <RCC_GetClocksFreq>:
  *         configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
20000450:	b580      	push	{r7, lr}
20000452:	b088      	sub	sp, #32
20000454:	af00      	add	r7, sp, #0
20000456:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
20000458:	2300      	movs	r3, #0
2000045a:	61bb      	str	r3, [r7, #24]
2000045c:	2300      	movs	r3, #0
2000045e:	617b      	str	r3, [r7, #20]
20000460:	2300      	movs	r3, #0
20000462:	61fb      	str	r3, [r7, #28]
20000464:	2302      	movs	r3, #2
20000466:	613b      	str	r3, [r7, #16]
20000468:	2300      	movs	r3, #0
2000046a:	60fb      	str	r3, [r7, #12]
2000046c:	2302      	movs	r3, #2
2000046e:	60bb      	str	r3, [r7, #8]
#if defined(STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F446xx)  
  uint32_t pllr = 2;
#endif /* STM32F412xG || STM32F413_423xx || STM32F446xx */
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
20000470:	4b49      	ldr	r3, [pc, #292]	; (20000598 <RCC_GetClocksFreq+0x148>)
20000472:	689b      	ldr	r3, [r3, #8]
20000474:	220c      	movs	r2, #12
20000476:	4013      	ands	r3, r2
20000478:	61bb      	str	r3, [r7, #24]
  
  switch (tmp)
2000047a:	69bb      	ldr	r3, [r7, #24]
2000047c:	2b04      	cmp	r3, #4
2000047e:	d007      	beq.n	20000490 <RCC_GetClocksFreq+0x40>
20000480:	2b08      	cmp	r3, #8
20000482:	d009      	beq.n	20000498 <RCC_GetClocksFreq+0x48>
20000484:	2b00      	cmp	r3, #0
20000486:	d141      	bne.n	2000050c <RCC_GetClocksFreq+0xbc>
  {
  case 0x00:  /* HSI used as system clock source */
    RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
20000488:	687b      	ldr	r3, [r7, #4]
2000048a:	4a44      	ldr	r2, [pc, #272]	; (2000059c <RCC_GetClocksFreq+0x14c>)
2000048c:	601a      	str	r2, [r3, #0]
    break;
2000048e:	e041      	b.n	20000514 <RCC_GetClocksFreq+0xc4>
  case 0x04:  /* HSE used as system clock  source */
    RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
20000490:	687b      	ldr	r3, [r7, #4]
20000492:	4a43      	ldr	r2, [pc, #268]	; (200005a0 <RCC_GetClocksFreq+0x150>)
20000494:	601a      	str	r2, [r3, #0]
    break;
20000496:	e03d      	b.n	20000514 <RCC_GetClocksFreq+0xc4>
  case 0x08:  /* PLL P used as system clock  source */
    
    /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLP
    */    
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
20000498:	4b3f      	ldr	r3, [pc, #252]	; (20000598 <RCC_GetClocksFreq+0x148>)
2000049a:	685b      	ldr	r3, [r3, #4]
2000049c:	0d9b      	lsrs	r3, r3, #22
2000049e:	2201      	movs	r2, #1
200004a0:	4013      	ands	r3, r2
200004a2:	60fb      	str	r3, [r7, #12]
    pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
200004a4:	4b3c      	ldr	r3, [pc, #240]	; (20000598 <RCC_GetClocksFreq+0x148>)
200004a6:	685b      	ldr	r3, [r3, #4]
200004a8:	223f      	movs	r2, #63	; 0x3f
200004aa:	4013      	ands	r3, r2
200004ac:	60bb      	str	r3, [r7, #8]
    
    if (pllsource != 0)
200004ae:	68fb      	ldr	r3, [r7, #12]
200004b0:	2b00      	cmp	r3, #0
200004b2:	d00d      	beq.n	200004d0 <RCC_GetClocksFreq+0x80>
    {
      /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
200004b4:	68b9      	ldr	r1, [r7, #8]
200004b6:	483a      	ldr	r0, [pc, #232]	; (200005a0 <RCC_GetClocksFreq+0x150>)
200004b8:	f000 fefa 	bl	200012b0 <__udivsi3>
200004bc:	0003      	movs	r3, r0
200004be:	001a      	movs	r2, r3
200004c0:	4b35      	ldr	r3, [pc, #212]	; (20000598 <RCC_GetClocksFreq+0x148>)
200004c2:	685b      	ldr	r3, [r3, #4]
200004c4:	099b      	lsrs	r3, r3, #6
200004c6:	05db      	lsls	r3, r3, #23
200004c8:	0ddb      	lsrs	r3, r3, #23
200004ca:	4353      	muls	r3, r2
200004cc:	61fb      	str	r3, [r7, #28]
200004ce:	e00c      	b.n	200004ea <RCC_GetClocksFreq+0x9a>
    }
    else
    {
      /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
200004d0:	68b9      	ldr	r1, [r7, #8]
200004d2:	4832      	ldr	r0, [pc, #200]	; (2000059c <RCC_GetClocksFreq+0x14c>)
200004d4:	f000 feec 	bl	200012b0 <__udivsi3>
200004d8:	0003      	movs	r3, r0
200004da:	001a      	movs	r2, r3
200004dc:	4b2e      	ldr	r3, [pc, #184]	; (20000598 <RCC_GetClocksFreq+0x148>)
200004de:	685b      	ldr	r3, [r3, #4]
200004e0:	099b      	lsrs	r3, r3, #6
200004e2:	05db      	lsls	r3, r3, #23
200004e4:	0ddb      	lsrs	r3, r3, #23
200004e6:	4353      	muls	r3, r2
200004e8:	61fb      	str	r3, [r7, #28]
    }
    
    pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
200004ea:	4b2b      	ldr	r3, [pc, #172]	; (20000598 <RCC_GetClocksFreq+0x148>)
200004ec:	685b      	ldr	r3, [r3, #4]
200004ee:	0c1b      	lsrs	r3, r3, #16
200004f0:	2203      	movs	r2, #3
200004f2:	4013      	ands	r3, r2
200004f4:	3301      	adds	r3, #1
200004f6:	005b      	lsls	r3, r3, #1
200004f8:	613b      	str	r3, [r7, #16]
    RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
200004fa:	6939      	ldr	r1, [r7, #16]
200004fc:	69f8      	ldr	r0, [r7, #28]
200004fe:	f000 fed7 	bl	200012b0 <__udivsi3>
20000502:	0003      	movs	r3, r0
20000504:	001a      	movs	r2, r3
20000506:	687b      	ldr	r3, [r7, #4]
20000508:	601a      	str	r2, [r3, #0]
    break;
2000050a:	e003      	b.n	20000514 <RCC_GetClocksFreq+0xc4>
    RCC_Clocks->SYSCLK_Frequency = pllvco/pllr;    
    break;
#endif /* STM32F412xG || STM32F413_423xx || STM32F446xx */
    
  default:
    RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
2000050c:	687b      	ldr	r3, [r7, #4]
2000050e:	4a23      	ldr	r2, [pc, #140]	; (2000059c <RCC_GetClocksFreq+0x14c>)
20000510:	601a      	str	r2, [r3, #0]
    break;
20000512:	46c0      	nop			; (mov r8, r8)
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/
  
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
20000514:	4b20      	ldr	r3, [pc, #128]	; (20000598 <RCC_GetClocksFreq+0x148>)
20000516:	689b      	ldr	r3, [r3, #8]
20000518:	22f0      	movs	r2, #240	; 0xf0
2000051a:	4013      	ands	r3, r2
2000051c:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 4;
2000051e:	69bb      	ldr	r3, [r7, #24]
20000520:	091b      	lsrs	r3, r3, #4
20000522:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
20000524:	4a1f      	ldr	r2, [pc, #124]	; (200005a4 <RCC_GetClocksFreq+0x154>)
20000526:	69bb      	ldr	r3, [r7, #24]
20000528:	18d3      	adds	r3, r2, r3
2000052a:	781b      	ldrb	r3, [r3, #0]
2000052c:	b2db      	uxtb	r3, r3
2000052e:	617b      	str	r3, [r7, #20]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
20000530:	687b      	ldr	r3, [r7, #4]
20000532:	681a      	ldr	r2, [r3, #0]
20000534:	697b      	ldr	r3, [r7, #20]
20000536:	40da      	lsrs	r2, r3
20000538:	687b      	ldr	r3, [r7, #4]
2000053a:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
2000053c:	4b16      	ldr	r3, [pc, #88]	; (20000598 <RCC_GetClocksFreq+0x148>)
2000053e:	689a      	ldr	r2, [r3, #8]
20000540:	23e0      	movs	r3, #224	; 0xe0
20000542:	015b      	lsls	r3, r3, #5
20000544:	4013      	ands	r3, r2
20000546:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 10;
20000548:	69bb      	ldr	r3, [r7, #24]
2000054a:	0a9b      	lsrs	r3, r3, #10
2000054c:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
2000054e:	4a15      	ldr	r2, [pc, #84]	; (200005a4 <RCC_GetClocksFreq+0x154>)
20000550:	69bb      	ldr	r3, [r7, #24]
20000552:	18d3      	adds	r3, r2, r3
20000554:	781b      	ldrb	r3, [r3, #0]
20000556:	b2db      	uxtb	r3, r3
20000558:	617b      	str	r3, [r7, #20]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
2000055a:	687b      	ldr	r3, [r7, #4]
2000055c:	685a      	ldr	r2, [r3, #4]
2000055e:	697b      	ldr	r3, [r7, #20]
20000560:	40da      	lsrs	r2, r3
20000562:	687b      	ldr	r3, [r7, #4]
20000564:	609a      	str	r2, [r3, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
20000566:	4b0c      	ldr	r3, [pc, #48]	; (20000598 <RCC_GetClocksFreq+0x148>)
20000568:	689a      	ldr	r2, [r3, #8]
2000056a:	23e0      	movs	r3, #224	; 0xe0
2000056c:	021b      	lsls	r3, r3, #8
2000056e:	4013      	ands	r3, r2
20000570:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 13;
20000572:	69bb      	ldr	r3, [r7, #24]
20000574:	0b5b      	lsrs	r3, r3, #13
20000576:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
20000578:	4a0a      	ldr	r2, [pc, #40]	; (200005a4 <RCC_GetClocksFreq+0x154>)
2000057a:	69bb      	ldr	r3, [r7, #24]
2000057c:	18d3      	adds	r3, r2, r3
2000057e:	781b      	ldrb	r3, [r3, #0]
20000580:	b2db      	uxtb	r3, r3
20000582:	617b      	str	r3, [r7, #20]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
20000584:	687b      	ldr	r3, [r7, #4]
20000586:	685a      	ldr	r2, [r3, #4]
20000588:	697b      	ldr	r3, [r7, #20]
2000058a:	40da      	lsrs	r2, r3
2000058c:	687b      	ldr	r3, [r7, #4]
2000058e:	60da      	str	r2, [r3, #12]
}
20000590:	46c0      	nop			; (mov r8, r8)
20000592:	46bd      	mov	sp, r7
20000594:	b008      	add	sp, #32
20000596:	bd80      	pop	{r7, pc}
20000598:	40023800 	andmi	r3, r2, r0, lsl #16
2000059c:	00f42400 	rscseq	r2, r4, r0, lsl #8
200005a0:	017d7840 	cmneq	sp, r0, asr #16
200005a4:	200013c8 	andcs	r1, r0, r8, asr #7

200005a8 <RCC_RTCCLKConfig>:
  *         RTC clock source).
  *  
  * @retval None
  */
void RCC_RTCCLKConfig(uint32_t RCC_RTCCLKSource)
{
200005a8:	b580      	push	{r7, lr}
200005aa:	b084      	sub	sp, #16
200005ac:	af00      	add	r7, sp, #0
200005ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
200005b0:	2300      	movs	r3, #0
200005b2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_RTCCLK_SOURCE(RCC_RTCCLKSource));

  if ((RCC_RTCCLKSource & 0x00000300) == 0x00000300)
200005b4:	687a      	ldr	r2, [r7, #4]
200005b6:	23c0      	movs	r3, #192	; 0xc0
200005b8:	009b      	lsls	r3, r3, #2
200005ba:	401a      	ands	r2, r3
200005bc:	23c0      	movs	r3, #192	; 0xc0
200005be:	009b      	lsls	r3, r3, #2
200005c0:	429a      	cmp	r2, r3
200005c2:	d10f      	bne.n	200005e4 <RCC_RTCCLKConfig+0x3c>
  { /* If HSE is selected as RTC clock source, configure HSE division factor for RTC clock */
    tmpreg = RCC->CFGR;
200005c4:	4b0d      	ldr	r3, [pc, #52]	; (200005fc <RCC_RTCCLKConfig+0x54>)
200005c6:	689b      	ldr	r3, [r3, #8]
200005c8:	60fb      	str	r3, [r7, #12]

    /* Clear RTCPRE[4:0] bits */
    tmpreg &= ~RCC_CFGR_RTCPRE;
200005ca:	68fb      	ldr	r3, [r7, #12]
200005cc:	4a0c      	ldr	r2, [pc, #48]	; (20000600 <RCC_RTCCLKConfig+0x58>)
200005ce:	4013      	ands	r3, r2
200005d0:	60fb      	str	r3, [r7, #12]

    /* Configure HSE division factor for RTC clock */
    tmpreg |= (RCC_RTCCLKSource & 0xFFFFCFF);
200005d2:	687b      	ldr	r3, [r7, #4]
200005d4:	4a0b      	ldr	r2, [pc, #44]	; (20000604 <RCC_RTCCLKConfig+0x5c>)
200005d6:	4013      	ands	r3, r2
200005d8:	68fa      	ldr	r2, [r7, #12]
200005da:	4313      	orrs	r3, r2
200005dc:	60fb      	str	r3, [r7, #12]

    /* Store the new value */
    RCC->CFGR = tmpreg;
200005de:	4b07      	ldr	r3, [pc, #28]	; (200005fc <RCC_RTCCLKConfig+0x54>)
200005e0:	68fa      	ldr	r2, [r7, #12]
200005e2:	609a      	str	r2, [r3, #8]
  }
    
  /* Select the RTC clock source */
  RCC->BDCR |= (RCC_RTCCLKSource & 0x00000FFF);
200005e4:	4b05      	ldr	r3, [pc, #20]	; (200005fc <RCC_RTCCLKConfig+0x54>)
200005e6:	6f19      	ldr	r1, [r3, #112]	; 0x70
200005e8:	687b      	ldr	r3, [r7, #4]
200005ea:	051b      	lsls	r3, r3, #20
200005ec:	0d1a      	lsrs	r2, r3, #20
200005ee:	4b03      	ldr	r3, [pc, #12]	; (200005fc <RCC_RTCCLKConfig+0x54>)
200005f0:	430a      	orrs	r2, r1
200005f2:	671a      	str	r2, [r3, #112]	; 0x70
}
200005f4:	46c0      	nop			; (mov r8, r8)
200005f6:	46bd      	mov	sp, r7
200005f8:	b004      	add	sp, #16
200005fa:	bd80      	pop	{r7, pc}
200005fc:	40023800 	andmi	r3, r2, r0, lsl #16
20000600:	ffe0ffff 			; <UNDEFINED> instruction: 0xffe0ffff
20000604:	0ffffcff 	svceq	0x00fffcff

20000608 <RCC_RTCCLKCmd>:
  *         using the RCC_RTCCLKConfig function.
  * @param  NewState: new state of the RTC clock. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_RTCCLKCmd(FunctionalState NewState)
{
20000608:	b580      	push	{r7, lr}
2000060a:	b082      	sub	sp, #8
2000060c:	af00      	add	r7, sp, #0
2000060e:	0002      	movs	r2, r0
20000610:	1dfb      	adds	r3, r7, #7
20000612:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) BDCR_RTCEN_BB = (uint32_t)NewState;
20000614:	4b03      	ldr	r3, [pc, #12]	; (20000624 <RCC_RTCCLKCmd+0x1c>)
20000616:	1dfa      	adds	r2, r7, #7
20000618:	7812      	ldrb	r2, [r2, #0]
2000061a:	601a      	str	r2, [r3, #0]
}
2000061c:	46c0      	nop			; (mov r8, r8)
2000061e:	46bd      	mov	sp, r7
20000620:	b002      	add	sp, #8
20000622:	bd80      	pop	{r7, pc}
20000624:	42470e3c 	submi	r0, r7, #60, 28	; 0x3c0

20000628 <RCC_BackupResetCmd>:
  * @param  NewState: new state of the Backup domain reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_BackupResetCmd(FunctionalState NewState)
{
20000628:	b580      	push	{r7, lr}
2000062a:	b082      	sub	sp, #8
2000062c:	af00      	add	r7, sp, #0
2000062e:	0002      	movs	r2, r0
20000630:	1dfb      	adds	r3, r7, #7
20000632:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) BDCR_BDRST_BB = (uint32_t)NewState;
20000634:	4b03      	ldr	r3, [pc, #12]	; (20000644 <RCC_BackupResetCmd+0x1c>)
20000636:	1dfa      	adds	r2, r7, #7
20000638:	7812      	ldrb	r2, [r2, #0]
2000063a:	601a      	str	r2, [r3, #0]
}
2000063c:	46c0      	nop			; (mov r8, r8)
2000063e:	46bd      	mov	sp, r7
20000640:	b002      	add	sp, #8
20000642:	bd80      	pop	{r7, pc}
20000644:	42470e40 	submi	r0, r7, #64, 28	; 0x400

20000648 <RCC_I2SCLKConfig>:
  *            @arg RCC_I2S2CLKSource_Ext: External clock mapped on the I2S_CKIN pin
  *                                        used as I2S clock source
  * @retval None
  */
void RCC_I2SCLKConfig(uint32_t RCC_I2SCLKSource)
{
20000648:	b580      	push	{r7, lr}
2000064a:	b082      	sub	sp, #8
2000064c:	af00      	add	r7, sp, #0
2000064e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_I2SCLK_SOURCE(RCC_I2SCLKSource));

  *(__IO uint32_t *) CFGR_I2SSRC_BB = RCC_I2SCLKSource;  
20000650:	4b03      	ldr	r3, [pc, #12]	; (20000660 <RCC_I2SCLKConfig+0x18>)
20000652:	687a      	ldr	r2, [r7, #4]
20000654:	601a      	str	r2, [r3, #0]
}
20000656:	46c0      	nop			; (mov r8, r8)
20000658:	46bd      	mov	sp, r7
2000065a:	b002      	add	sp, #8
2000065c:	bd80      	pop	{r7, pc}
2000065e:	46c0      	nop			; (mov r8, r8)
20000660:	4247015c 	submi	r0, r7, #92, 2

20000664 <RCC_SAIBlockACLKConfig>:
  *            @arg RCC_SAIACLKSource_Ext: External clock mapped on the I2S_CKIN pin
  *                                        used as SAI1 Block A clock
  * @retval None
  */
void RCC_SAIBlockACLKConfig(uint32_t RCC_SAIBlockACLKSource)
{
20000664:	b580      	push	{r7, lr}
20000666:	b084      	sub	sp, #16
20000668:	af00      	add	r7, sp, #0
2000066a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
2000066c:	2300      	movs	r3, #0
2000066e:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_SAIACLK_SOURCE(RCC_SAIBlockACLKSource));
  
  tmpreg = RCC->DCKCFGR;
20000670:	4a09      	ldr	r2, [pc, #36]	; (20000698 <RCC_SAIBlockACLKConfig+0x34>)
20000672:	238c      	movs	r3, #140	; 0x8c
20000674:	58d3      	ldr	r3, [r2, r3]
20000676:	60fb      	str	r3, [r7, #12]

  /* Clear RCC_DCKCFGR_SAI1ASRC[1:0] bits */
  tmpreg &= ~RCC_DCKCFGR_SAI1ASRC;
20000678:	68fb      	ldr	r3, [r7, #12]
2000067a:	4a08      	ldr	r2, [pc, #32]	; (2000069c <RCC_SAIBlockACLKConfig+0x38>)
2000067c:	4013      	ands	r3, r2
2000067e:	60fb      	str	r3, [r7, #12]

  /* Set SAI Block A source selection value */
  tmpreg |= RCC_SAIBlockACLKSource;
20000680:	68fa      	ldr	r2, [r7, #12]
20000682:	687b      	ldr	r3, [r7, #4]
20000684:	4313      	orrs	r3, r2
20000686:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->DCKCFGR = tmpreg;
20000688:	4903      	ldr	r1, [pc, #12]	; (20000698 <RCC_SAIBlockACLKConfig+0x34>)
2000068a:	228c      	movs	r2, #140	; 0x8c
2000068c:	68fb      	ldr	r3, [r7, #12]
2000068e:	508b      	str	r3, [r1, r2]
}
20000690:	46c0      	nop			; (mov r8, r8)
20000692:	46bd      	mov	sp, r7
20000694:	b004      	add	sp, #16
20000696:	bd80      	pop	{r7, pc}
20000698:	40023800 	andmi	r3, r2, r0, lsl #16
2000069c:	ffcfffff 			; <UNDEFINED> instruction: 0xffcfffff

200006a0 <RCC_SAIBlockBCLKConfig>:
  *            @arg RCC_SAIBCLKSource_Ext: External clock mapped on the I2S_CKIN pin
  *                                        used as SAI1 Block B clock
  * @retval None
  */
void RCC_SAIBlockBCLKConfig(uint32_t RCC_SAIBlockBCLKSource)
{
200006a0:	b580      	push	{r7, lr}
200006a2:	b084      	sub	sp, #16
200006a4:	af00      	add	r7, sp, #0
200006a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
200006a8:	2300      	movs	r3, #0
200006aa:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_SAIBCLK_SOURCE(RCC_SAIBlockBCLKSource));
  
  tmpreg = RCC->DCKCFGR;
200006ac:	4a09      	ldr	r2, [pc, #36]	; (200006d4 <RCC_SAIBlockBCLKConfig+0x34>)
200006ae:	238c      	movs	r3, #140	; 0x8c
200006b0:	58d3      	ldr	r3, [r2, r3]
200006b2:	60fb      	str	r3, [r7, #12]

  /* Clear RCC_DCKCFGR_SAI1BSRC[1:0] bits */
  tmpreg &= ~RCC_DCKCFGR_SAI1BSRC;
200006b4:	68fb      	ldr	r3, [r7, #12]
200006b6:	4a08      	ldr	r2, [pc, #32]	; (200006d8 <RCC_SAIBlockBCLKConfig+0x38>)
200006b8:	4013      	ands	r3, r2
200006ba:	60fb      	str	r3, [r7, #12]

  /* Set SAI Block B source selection value */
  tmpreg |= RCC_SAIBlockBCLKSource;
200006bc:	68fa      	ldr	r2, [r7, #12]
200006be:	687b      	ldr	r3, [r7, #4]
200006c0:	4313      	orrs	r3, r2
200006c2:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->DCKCFGR = tmpreg;
200006c4:	4903      	ldr	r1, [pc, #12]	; (200006d4 <RCC_SAIBlockBCLKConfig+0x34>)
200006c6:	228c      	movs	r2, #140	; 0x8c
200006c8:	68fb      	ldr	r3, [r7, #12]
200006ca:	508b      	str	r3, [r1, r2]
}
200006cc:	46c0      	nop			; (mov r8, r8)
200006ce:	46bd      	mov	sp, r7
200006d0:	b004      	add	sp, #16
200006d2:	bd80      	pop	{r7, pc}
200006d4:	40023800 	andmi	r3, r2, r0, lsl #16
200006d8:	ff3fffff 			; <UNDEFINED> instruction: 0xff3fffff

200006dc <RCC_SAIPLLI2SClkDivConfig>:
  *          SAI1 clock frequency = f(PLLI2S_Q) / RCC_PLLI2SDivQ 
  *              
  * @retval None
  */
void RCC_SAIPLLI2SClkDivConfig(uint32_t RCC_PLLI2SDivQ)  
{
200006dc:	b580      	push	{r7, lr}
200006de:	b084      	sub	sp, #16
200006e0:	af00      	add	r7, sp, #0
200006e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
200006e4:	2300      	movs	r3, #0
200006e6:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(RCC_PLLI2SDivQ));
  
  tmpreg = RCC->DCKCFGR;
200006e8:	4a0a      	ldr	r2, [pc, #40]	; (20000714 <RCC_SAIPLLI2SClkDivConfig+0x38>)
200006ea:	238c      	movs	r3, #140	; 0x8c
200006ec:	58d3      	ldr	r3, [r2, r3]
200006ee:	60fb      	str	r3, [r7, #12]

  /* Clear PLLI2SDIVQ[4:0] bits */
  tmpreg &= ~(RCC_DCKCFGR_PLLI2SDIVQ);
200006f0:	68fb      	ldr	r3, [r7, #12]
200006f2:	221f      	movs	r2, #31
200006f4:	4393      	bics	r3, r2
200006f6:	60fb      	str	r3, [r7, #12]

  /* Set PLLI2SDIVQ values */
  tmpreg |= (RCC_PLLI2SDivQ - 1);
200006f8:	687b      	ldr	r3, [r7, #4]
200006fa:	3b01      	subs	r3, #1
200006fc:	68fa      	ldr	r2, [r7, #12]
200006fe:	4313      	orrs	r3, r2
20000700:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->DCKCFGR = tmpreg;
20000702:	4904      	ldr	r1, [pc, #16]	; (20000714 <RCC_SAIPLLI2SClkDivConfig+0x38>)
20000704:	228c      	movs	r2, #140	; 0x8c
20000706:	68fb      	ldr	r3, [r7, #12]
20000708:	508b      	str	r3, [r1, r2]
}
2000070a:	46c0      	nop			; (mov r8, r8)
2000070c:	46bd      	mov	sp, r7
2000070e:	b004      	add	sp, #16
20000710:	bd80      	pop	{r7, pc}
20000712:	46c0      	nop			; (mov r8, r8)
20000714:	40023800 	andmi	r3, r2, r0, lsl #16

20000718 <RCC_SAIPLLSAIClkDivConfig>:
  *          SAI1 clock frequency = f(PLLSAI_Q) / RCC_PLLSAIDivQ  
  *              
  * @retval None
  */
void RCC_SAIPLLSAIClkDivConfig(uint32_t RCC_PLLSAIDivQ)  
{
20000718:	b580      	push	{r7, lr}
2000071a:	b084      	sub	sp, #16
2000071c:	af00      	add	r7, sp, #0
2000071e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
20000720:	2300      	movs	r3, #0
20000722:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(RCC_PLLSAIDivQ));
  
  tmpreg = RCC->DCKCFGR;
20000724:	4a0a      	ldr	r2, [pc, #40]	; (20000750 <RCC_SAIPLLSAIClkDivConfig+0x38>)
20000726:	238c      	movs	r3, #140	; 0x8c
20000728:	58d3      	ldr	r3, [r2, r3]
2000072a:	60fb      	str	r3, [r7, #12]

  /* Clear PLLI2SDIVQ[4:0] and PLLSAIDIVQ[4:0] bits */
  tmpreg &= ~(RCC_DCKCFGR_PLLSAIDIVQ);
2000072c:	68fb      	ldr	r3, [r7, #12]
2000072e:	4a09      	ldr	r2, [pc, #36]	; (20000754 <RCC_SAIPLLSAIClkDivConfig+0x3c>)
20000730:	4013      	ands	r3, r2
20000732:	60fb      	str	r3, [r7, #12]

  /* Set PLLSAIDIVQ values */
  tmpreg |= ((RCC_PLLSAIDivQ - 1) << 8);
20000734:	687b      	ldr	r3, [r7, #4]
20000736:	3b01      	subs	r3, #1
20000738:	021b      	lsls	r3, r3, #8
2000073a:	68fa      	ldr	r2, [r7, #12]
2000073c:	4313      	orrs	r3, r2
2000073e:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->DCKCFGR = tmpreg;
20000740:	4903      	ldr	r1, [pc, #12]	; (20000750 <RCC_SAIPLLSAIClkDivConfig+0x38>)
20000742:	228c      	movs	r2, #140	; 0x8c
20000744:	68fb      	ldr	r3, [r7, #12]
20000746:	508b      	str	r3, [r1, r2]
}
20000748:	46c0      	nop			; (mov r8, r8)
2000074a:	46bd      	mov	sp, r7
2000074c:	b004      	add	sp, #16
2000074e:	bd80      	pop	{r7, pc}
20000750:	40023800 	andmi	r3, r2, r0, lsl #16
20000754:	ffffe0ff 			; <UNDEFINED> instruction: 0xffffe0ff

20000758 <RCC_LTDCCLKDivConfig>:
  *            @arg RCC_PLLSAIDivR_Div16: LTDC clock = f(PLLSAI_R)/16
  *            
  * @retval None
  */
void RCC_LTDCCLKDivConfig(uint32_t RCC_PLLSAIDivR)
{
20000758:	b580      	push	{r7, lr}
2000075a:	b084      	sub	sp, #16
2000075c:	af00      	add	r7, sp, #0
2000075e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
20000760:	2300      	movs	r3, #0
20000762:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_PLLSAI_DIVR_VALUE(RCC_PLLSAIDivR));
  
  tmpreg = RCC->DCKCFGR;
20000764:	4a09      	ldr	r2, [pc, #36]	; (2000078c <RCC_LTDCCLKDivConfig+0x34>)
20000766:	238c      	movs	r3, #140	; 0x8c
20000768:	58d3      	ldr	r3, [r2, r3]
2000076a:	60fb      	str	r3, [r7, #12]

  /* Clear PLLSAIDIVR[2:0] bits */
  tmpreg &= ~RCC_DCKCFGR_PLLSAIDIVR;
2000076c:	68fb      	ldr	r3, [r7, #12]
2000076e:	4a08      	ldr	r2, [pc, #32]	; (20000790 <RCC_LTDCCLKDivConfig+0x38>)
20000770:	4013      	ands	r3, r2
20000772:	60fb      	str	r3, [r7, #12]

  /* Set PLLSAIDIVR values */
  tmpreg |= RCC_PLLSAIDivR;
20000774:	68fa      	ldr	r2, [r7, #12]
20000776:	687b      	ldr	r3, [r7, #4]
20000778:	4313      	orrs	r3, r2
2000077a:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->DCKCFGR = tmpreg;
2000077c:	4903      	ldr	r1, [pc, #12]	; (2000078c <RCC_LTDCCLKDivConfig+0x34>)
2000077e:	228c      	movs	r2, #140	; 0x8c
20000780:	68fb      	ldr	r3, [r7, #12]
20000782:	508b      	str	r3, [r1, r2]
}
20000784:	46c0      	nop			; (mov r8, r8)
20000786:	46bd      	mov	sp, r7
20000788:	b004      	add	sp, #16
2000078a:	bd80      	pop	{r7, pc}
2000078c:	40023800 	andmi	r3, r2, r0, lsl #16
20000790:	fffcffff 			; <UNDEFINED> instruction: 0xfffcffff

20000794 <RCC_TIMCLKPresConfig>:
  *                 else it is equal to [(HPRE * PPREx) / 4] if PPREx is corresponding 
  *                 to division by 8 or more.
  * @retval None
  */
void RCC_TIMCLKPresConfig(uint32_t RCC_TIMCLKPrescaler)
{
20000794:	b580      	push	{r7, lr}
20000796:	b082      	sub	sp, #8
20000798:	af00      	add	r7, sp, #0
2000079a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_TIMCLK_PRESCALER(RCC_TIMCLKPrescaler));

  *(__IO uint32_t *) DCKCFGR_TIMPRE_BB = RCC_TIMCLKPrescaler;
2000079c:	4b03      	ldr	r3, [pc, #12]	; (200007ac <RCC_TIMCLKPresConfig+0x18>)
2000079e:	687a      	ldr	r2, [r7, #4]
200007a0:	601a      	str	r2, [r3, #0]
}
200007a2:	46c0      	nop			; (mov r8, r8)
200007a4:	46bd      	mov	sp, r7
200007a6:	b002      	add	sp, #8
200007a8:	bd80      	pop	{r7, pc}
200007aa:	46c0      	nop			; (mov r8, r8)
200007ac:	424711e0 	submi	r1, r7, #224, 2	; 0x38

200007b0 <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
200007b0:	b580      	push	{r7, lr}
200007b2:	b082      	sub	sp, #8
200007b4:	af00      	add	r7, sp, #0
200007b6:	6078      	str	r0, [r7, #4]
200007b8:	000a      	movs	r2, r1
200007ba:	1cfb      	adds	r3, r7, #3
200007bc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
200007be:	1cfb      	adds	r3, r7, #3
200007c0:	781b      	ldrb	r3, [r3, #0]
200007c2:	2b00      	cmp	r3, #0
200007c4:	d006      	beq.n	200007d4 <RCC_AHB1PeriphClockCmd+0x24>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
200007c6:	4b09      	ldr	r3, [pc, #36]	; (200007ec <RCC_AHB1PeriphClockCmd+0x3c>)
200007c8:	6b19      	ldr	r1, [r3, #48]	; 0x30
200007ca:	4b08      	ldr	r3, [pc, #32]	; (200007ec <RCC_AHB1PeriphClockCmd+0x3c>)
200007cc:	687a      	ldr	r2, [r7, #4]
200007ce:	430a      	orrs	r2, r1
200007d0:	631a      	str	r2, [r3, #48]	; 0x30
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
  }
}
200007d2:	e006      	b.n	200007e2 <RCC_AHB1PeriphClockCmd+0x32>
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
200007d4:	4b05      	ldr	r3, [pc, #20]	; (200007ec <RCC_AHB1PeriphClockCmd+0x3c>)
200007d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
200007d8:	687b      	ldr	r3, [r7, #4]
200007da:	43d9      	mvns	r1, r3
200007dc:	4b03      	ldr	r3, [pc, #12]	; (200007ec <RCC_AHB1PeriphClockCmd+0x3c>)
200007de:	400a      	ands	r2, r1
200007e0:	631a      	str	r2, [r3, #48]	; 0x30
}
200007e2:	46c0      	nop			; (mov r8, r8)
200007e4:	46bd      	mov	sp, r7
200007e6:	b002      	add	sp, #8
200007e8:	bd80      	pop	{r7, pc}
200007ea:	46c0      	nop			; (mov r8, r8)
200007ec:	40023800 	andmi	r3, r2, r0, lsl #16

200007f0 <RCC_AHB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB2PeriphClockCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
{
200007f0:	b580      	push	{r7, lr}
200007f2:	b082      	sub	sp, #8
200007f4:	af00      	add	r7, sp, #0
200007f6:	6078      	str	r0, [r7, #4]
200007f8:	000a      	movs	r2, r1
200007fa:	1cfb      	adds	r3, r7, #3
200007fc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
200007fe:	1cfb      	adds	r3, r7, #3
20000800:	781b      	ldrb	r3, [r3, #0]
20000802:	2b00      	cmp	r3, #0
20000804:	d006      	beq.n	20000814 <RCC_AHB2PeriphClockCmd+0x24>
  {
    RCC->AHB2ENR |= RCC_AHB2Periph;
20000806:	4b09      	ldr	r3, [pc, #36]	; (2000082c <RCC_AHB2PeriphClockCmd+0x3c>)
20000808:	6b59      	ldr	r1, [r3, #52]	; 0x34
2000080a:	4b08      	ldr	r3, [pc, #32]	; (2000082c <RCC_AHB2PeriphClockCmd+0x3c>)
2000080c:	687a      	ldr	r2, [r7, #4]
2000080e:	430a      	orrs	r2, r1
20000810:	635a      	str	r2, [r3, #52]	; 0x34
  }
  else
  {
    RCC->AHB2ENR &= ~RCC_AHB2Periph;
  }
}
20000812:	e006      	b.n	20000822 <RCC_AHB2PeriphClockCmd+0x32>
    RCC->AHB2ENR &= ~RCC_AHB2Periph;
20000814:	4b05      	ldr	r3, [pc, #20]	; (2000082c <RCC_AHB2PeriphClockCmd+0x3c>)
20000816:	6b5a      	ldr	r2, [r3, #52]	; 0x34
20000818:	687b      	ldr	r3, [r7, #4]
2000081a:	43d9      	mvns	r1, r3
2000081c:	4b03      	ldr	r3, [pc, #12]	; (2000082c <RCC_AHB2PeriphClockCmd+0x3c>)
2000081e:	400a      	ands	r2, r1
20000820:	635a      	str	r2, [r3, #52]	; 0x34
}
20000822:	46c0      	nop			; (mov r8, r8)
20000824:	46bd      	mov	sp, r7
20000826:	b002      	add	sp, #8
20000828:	bd80      	pop	{r7, pc}
2000082a:	46c0      	nop			; (mov r8, r8)
2000082c:	40023800 	andmi	r3, r2, r0, lsl #16

20000830 <RCC_AHB3PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB3PeriphClockCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
{
20000830:	b580      	push	{r7, lr}
20000832:	b082      	sub	sp, #8
20000834:	af00      	add	r7, sp, #0
20000836:	6078      	str	r0, [r7, #4]
20000838:	000a      	movs	r2, r1
2000083a:	1cfb      	adds	r3, r7, #3
2000083c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
2000083e:	1cfb      	adds	r3, r7, #3
20000840:	781b      	ldrb	r3, [r3, #0]
20000842:	2b00      	cmp	r3, #0
20000844:	d006      	beq.n	20000854 <RCC_AHB3PeriphClockCmd+0x24>
  {
    RCC->AHB3ENR |= RCC_AHB3Periph;
20000846:	4b09      	ldr	r3, [pc, #36]	; (2000086c <RCC_AHB3PeriphClockCmd+0x3c>)
20000848:	6b99      	ldr	r1, [r3, #56]	; 0x38
2000084a:	4b08      	ldr	r3, [pc, #32]	; (2000086c <RCC_AHB3PeriphClockCmd+0x3c>)
2000084c:	687a      	ldr	r2, [r7, #4]
2000084e:	430a      	orrs	r2, r1
20000850:	639a      	str	r2, [r3, #56]	; 0x38
  }
  else
  {
    RCC->AHB3ENR &= ~RCC_AHB3Periph;
  }
}
20000852:	e006      	b.n	20000862 <RCC_AHB3PeriphClockCmd+0x32>
    RCC->AHB3ENR &= ~RCC_AHB3Periph;
20000854:	4b05      	ldr	r3, [pc, #20]	; (2000086c <RCC_AHB3PeriphClockCmd+0x3c>)
20000856:	6b9a      	ldr	r2, [r3, #56]	; 0x38
20000858:	687b      	ldr	r3, [r7, #4]
2000085a:	43d9      	mvns	r1, r3
2000085c:	4b03      	ldr	r3, [pc, #12]	; (2000086c <RCC_AHB3PeriphClockCmd+0x3c>)
2000085e:	400a      	ands	r2, r1
20000860:	639a      	str	r2, [r3, #56]	; 0x38
}
20000862:	46c0      	nop			; (mov r8, r8)
20000864:	46bd      	mov	sp, r7
20000866:	b002      	add	sp, #8
20000868:	bd80      	pop	{r7, pc}
2000086a:	46c0      	nop			; (mov r8, r8)
2000086c:	40023800 	andmi	r3, r2, r0, lsl #16

20000870 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
20000870:	b580      	push	{r7, lr}
20000872:	b082      	sub	sp, #8
20000874:	af00      	add	r7, sp, #0
20000876:	6078      	str	r0, [r7, #4]
20000878:	000a      	movs	r2, r1
2000087a:	1cfb      	adds	r3, r7, #3
2000087c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
2000087e:	1cfb      	adds	r3, r7, #3
20000880:	781b      	ldrb	r3, [r3, #0]
20000882:	2b00      	cmp	r3, #0
20000884:	d006      	beq.n	20000894 <RCC_APB1PeriphClockCmd+0x24>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
20000886:	4b09      	ldr	r3, [pc, #36]	; (200008ac <RCC_APB1PeriphClockCmd+0x3c>)
20000888:	6c19      	ldr	r1, [r3, #64]	; 0x40
2000088a:	4b08      	ldr	r3, [pc, #32]	; (200008ac <RCC_APB1PeriphClockCmd+0x3c>)
2000088c:	687a      	ldr	r2, [r7, #4]
2000088e:	430a      	orrs	r2, r1
20000890:	641a      	str	r2, [r3, #64]	; 0x40
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
20000892:	e006      	b.n	200008a2 <RCC_APB1PeriphClockCmd+0x32>
    RCC->APB1ENR &= ~RCC_APB1Periph;
20000894:	4b05      	ldr	r3, [pc, #20]	; (200008ac <RCC_APB1PeriphClockCmd+0x3c>)
20000896:	6c1a      	ldr	r2, [r3, #64]	; 0x40
20000898:	687b      	ldr	r3, [r7, #4]
2000089a:	43d9      	mvns	r1, r3
2000089c:	4b03      	ldr	r3, [pc, #12]	; (200008ac <RCC_APB1PeriphClockCmd+0x3c>)
2000089e:	400a      	ands	r2, r1
200008a0:	641a      	str	r2, [r3, #64]	; 0x40
}
200008a2:	46c0      	nop			; (mov r8, r8)
200008a4:	46bd      	mov	sp, r7
200008a6:	b002      	add	sp, #8
200008a8:	bd80      	pop	{r7, pc}
200008aa:	46c0      	nop			; (mov r8, r8)
200008ac:	40023800 	andmi	r3, r2, r0, lsl #16

200008b0 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
200008b0:	b580      	push	{r7, lr}
200008b2:	b082      	sub	sp, #8
200008b4:	af00      	add	r7, sp, #0
200008b6:	6078      	str	r0, [r7, #4]
200008b8:	000a      	movs	r2, r1
200008ba:	1cfb      	adds	r3, r7, #3
200008bc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
200008be:	1cfb      	adds	r3, r7, #3
200008c0:	781b      	ldrb	r3, [r3, #0]
200008c2:	2b00      	cmp	r3, #0
200008c4:	d006      	beq.n	200008d4 <RCC_APB2PeriphClockCmd+0x24>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
200008c6:	4b09      	ldr	r3, [pc, #36]	; (200008ec <RCC_APB2PeriphClockCmd+0x3c>)
200008c8:	6c59      	ldr	r1, [r3, #68]	; 0x44
200008ca:	4b08      	ldr	r3, [pc, #32]	; (200008ec <RCC_APB2PeriphClockCmd+0x3c>)
200008cc:	687a      	ldr	r2, [r7, #4]
200008ce:	430a      	orrs	r2, r1
200008d0:	645a      	str	r2, [r3, #68]	; 0x44
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
200008d2:	e006      	b.n	200008e2 <RCC_APB2PeriphClockCmd+0x32>
    RCC->APB2ENR &= ~RCC_APB2Periph;
200008d4:	4b05      	ldr	r3, [pc, #20]	; (200008ec <RCC_APB2PeriphClockCmd+0x3c>)
200008d6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
200008d8:	687b      	ldr	r3, [r7, #4]
200008da:	43d9      	mvns	r1, r3
200008dc:	4b03      	ldr	r3, [pc, #12]	; (200008ec <RCC_APB2PeriphClockCmd+0x3c>)
200008de:	400a      	ands	r2, r1
200008e0:	645a      	str	r2, [r3, #68]	; 0x44
}
200008e2:	46c0      	nop			; (mov r8, r8)
200008e4:	46bd      	mov	sp, r7
200008e6:	b002      	add	sp, #8
200008e8:	bd80      	pop	{r7, pc}
200008ea:	46c0      	nop			; (mov r8, r8)
200008ec:	40023800 	andmi	r3, r2, r0, lsl #16

200008f0 <RCC_AHB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphResetCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
200008f0:	b580      	push	{r7, lr}
200008f2:	b082      	sub	sp, #8
200008f4:	af00      	add	r7, sp, #0
200008f6:	6078      	str	r0, [r7, #4]
200008f8:	000a      	movs	r2, r1
200008fa:	1cfb      	adds	r3, r7, #3
200008fc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_RESET_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
200008fe:	1cfb      	adds	r3, r7, #3
20000900:	781b      	ldrb	r3, [r3, #0]
20000902:	2b00      	cmp	r3, #0
20000904:	d006      	beq.n	20000914 <RCC_AHB1PeriphResetCmd+0x24>
  {
    RCC->AHB1RSTR |= RCC_AHB1Periph;
20000906:	4b09      	ldr	r3, [pc, #36]	; (2000092c <RCC_AHB1PeriphResetCmd+0x3c>)
20000908:	6919      	ldr	r1, [r3, #16]
2000090a:	4b08      	ldr	r3, [pc, #32]	; (2000092c <RCC_AHB1PeriphResetCmd+0x3c>)
2000090c:	687a      	ldr	r2, [r7, #4]
2000090e:	430a      	orrs	r2, r1
20000910:	611a      	str	r2, [r3, #16]
  }
  else
  {
    RCC->AHB1RSTR &= ~RCC_AHB1Periph;
  }
}
20000912:	e006      	b.n	20000922 <RCC_AHB1PeriphResetCmd+0x32>
    RCC->AHB1RSTR &= ~RCC_AHB1Periph;
20000914:	4b05      	ldr	r3, [pc, #20]	; (2000092c <RCC_AHB1PeriphResetCmd+0x3c>)
20000916:	691a      	ldr	r2, [r3, #16]
20000918:	687b      	ldr	r3, [r7, #4]
2000091a:	43d9      	mvns	r1, r3
2000091c:	4b03      	ldr	r3, [pc, #12]	; (2000092c <RCC_AHB1PeriphResetCmd+0x3c>)
2000091e:	400a      	ands	r2, r1
20000920:	611a      	str	r2, [r3, #16]
}
20000922:	46c0      	nop			; (mov r8, r8)
20000924:	46bd      	mov	sp, r7
20000926:	b002      	add	sp, #8
20000928:	bd80      	pop	{r7, pc}
2000092a:	46c0      	nop			; (mov r8, r8)
2000092c:	40023800 	andmi	r3, r2, r0, lsl #16

20000930 <RCC_AHB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB2PeriphResetCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
{
20000930:	b580      	push	{r7, lr}
20000932:	b082      	sub	sp, #8
20000934:	af00      	add	r7, sp, #0
20000936:	6078      	str	r0, [r7, #4]
20000938:	000a      	movs	r2, r1
2000093a:	1cfb      	adds	r3, r7, #3
2000093c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
2000093e:	1cfb      	adds	r3, r7, #3
20000940:	781b      	ldrb	r3, [r3, #0]
20000942:	2b00      	cmp	r3, #0
20000944:	d006      	beq.n	20000954 <RCC_AHB2PeriphResetCmd+0x24>
  {
    RCC->AHB2RSTR |= RCC_AHB2Periph;
20000946:	4b09      	ldr	r3, [pc, #36]	; (2000096c <RCC_AHB2PeriphResetCmd+0x3c>)
20000948:	6959      	ldr	r1, [r3, #20]
2000094a:	4b08      	ldr	r3, [pc, #32]	; (2000096c <RCC_AHB2PeriphResetCmd+0x3c>)
2000094c:	687a      	ldr	r2, [r7, #4]
2000094e:	430a      	orrs	r2, r1
20000950:	615a      	str	r2, [r3, #20]
  }
  else
  {
    RCC->AHB2RSTR &= ~RCC_AHB2Periph;
  }
}
20000952:	e006      	b.n	20000962 <RCC_AHB2PeriphResetCmd+0x32>
    RCC->AHB2RSTR &= ~RCC_AHB2Periph;
20000954:	4b05      	ldr	r3, [pc, #20]	; (2000096c <RCC_AHB2PeriphResetCmd+0x3c>)
20000956:	695a      	ldr	r2, [r3, #20]
20000958:	687b      	ldr	r3, [r7, #4]
2000095a:	43d9      	mvns	r1, r3
2000095c:	4b03      	ldr	r3, [pc, #12]	; (2000096c <RCC_AHB2PeriphResetCmd+0x3c>)
2000095e:	400a      	ands	r2, r1
20000960:	615a      	str	r2, [r3, #20]
}
20000962:	46c0      	nop			; (mov r8, r8)
20000964:	46bd      	mov	sp, r7
20000966:	b002      	add	sp, #8
20000968:	bd80      	pop	{r7, pc}
2000096a:	46c0      	nop			; (mov r8, r8)
2000096c:	40023800 	andmi	r3, r2, r0, lsl #16

20000970 <RCC_AHB3PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB3PeriphResetCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
{
20000970:	b580      	push	{r7, lr}
20000972:	b082      	sub	sp, #8
20000974:	af00      	add	r7, sp, #0
20000976:	6078      	str	r0, [r7, #4]
20000978:	000a      	movs	r2, r1
2000097a:	1cfb      	adds	r3, r7, #3
2000097c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
2000097e:	1cfb      	adds	r3, r7, #3
20000980:	781b      	ldrb	r3, [r3, #0]
20000982:	2b00      	cmp	r3, #0
20000984:	d006      	beq.n	20000994 <RCC_AHB3PeriphResetCmd+0x24>
  {
    RCC->AHB3RSTR |= RCC_AHB3Periph;
20000986:	4b09      	ldr	r3, [pc, #36]	; (200009ac <RCC_AHB3PeriphResetCmd+0x3c>)
20000988:	6999      	ldr	r1, [r3, #24]
2000098a:	4b08      	ldr	r3, [pc, #32]	; (200009ac <RCC_AHB3PeriphResetCmd+0x3c>)
2000098c:	687a      	ldr	r2, [r7, #4]
2000098e:	430a      	orrs	r2, r1
20000990:	619a      	str	r2, [r3, #24]
  }
  else
  {
    RCC->AHB3RSTR &= ~RCC_AHB3Periph;
  }
}
20000992:	e006      	b.n	200009a2 <RCC_AHB3PeriphResetCmd+0x32>
    RCC->AHB3RSTR &= ~RCC_AHB3Periph;
20000994:	4b05      	ldr	r3, [pc, #20]	; (200009ac <RCC_AHB3PeriphResetCmd+0x3c>)
20000996:	699a      	ldr	r2, [r3, #24]
20000998:	687b      	ldr	r3, [r7, #4]
2000099a:	43d9      	mvns	r1, r3
2000099c:	4b03      	ldr	r3, [pc, #12]	; (200009ac <RCC_AHB3PeriphResetCmd+0x3c>)
2000099e:	400a      	ands	r2, r1
200009a0:	619a      	str	r2, [r3, #24]
}
200009a2:	46c0      	nop			; (mov r8, r8)
200009a4:	46bd      	mov	sp, r7
200009a6:	b002      	add	sp, #8
200009a8:	bd80      	pop	{r7, pc}
200009aa:	46c0      	nop			; (mov r8, r8)
200009ac:	40023800 	andmi	r3, r2, r0, lsl #16

200009b0 <RCC_APB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
200009b0:	b580      	push	{r7, lr}
200009b2:	b082      	sub	sp, #8
200009b4:	af00      	add	r7, sp, #0
200009b6:	6078      	str	r0, [r7, #4]
200009b8:	000a      	movs	r2, r1
200009ba:	1cfb      	adds	r3, r7, #3
200009bc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
200009be:	1cfb      	adds	r3, r7, #3
200009c0:	781b      	ldrb	r3, [r3, #0]
200009c2:	2b00      	cmp	r3, #0
200009c4:	d006      	beq.n	200009d4 <RCC_APB1PeriphResetCmd+0x24>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
200009c6:	4b09      	ldr	r3, [pc, #36]	; (200009ec <RCC_APB1PeriphResetCmd+0x3c>)
200009c8:	6a19      	ldr	r1, [r3, #32]
200009ca:	4b08      	ldr	r3, [pc, #32]	; (200009ec <RCC_APB1PeriphResetCmd+0x3c>)
200009cc:	687a      	ldr	r2, [r7, #4]
200009ce:	430a      	orrs	r2, r1
200009d0:	621a      	str	r2, [r3, #32]
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
  }
}
200009d2:	e006      	b.n	200009e2 <RCC_APB1PeriphResetCmd+0x32>
    RCC->APB1RSTR &= ~RCC_APB1Periph;
200009d4:	4b05      	ldr	r3, [pc, #20]	; (200009ec <RCC_APB1PeriphResetCmd+0x3c>)
200009d6:	6a1a      	ldr	r2, [r3, #32]
200009d8:	687b      	ldr	r3, [r7, #4]
200009da:	43d9      	mvns	r1, r3
200009dc:	4b03      	ldr	r3, [pc, #12]	; (200009ec <RCC_APB1PeriphResetCmd+0x3c>)
200009de:	400a      	ands	r2, r1
200009e0:	621a      	str	r2, [r3, #32]
}
200009e2:	46c0      	nop			; (mov r8, r8)
200009e4:	46bd      	mov	sp, r7
200009e6:	b002      	add	sp, #8
200009e8:	bd80      	pop	{r7, pc}
200009ea:	46c0      	nop			; (mov r8, r8)
200009ec:	40023800 	andmi	r3, r2, r0, lsl #16

200009f0 <RCC_APB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
200009f0:	b580      	push	{r7, lr}
200009f2:	b082      	sub	sp, #8
200009f4:	af00      	add	r7, sp, #0
200009f6:	6078      	str	r0, [r7, #4]
200009f8:	000a      	movs	r2, r1
200009fa:	1cfb      	adds	r3, r7, #3
200009fc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_RESET_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
200009fe:	1cfb      	adds	r3, r7, #3
20000a00:	781b      	ldrb	r3, [r3, #0]
20000a02:	2b00      	cmp	r3, #0
20000a04:	d006      	beq.n	20000a14 <RCC_APB2PeriphResetCmd+0x24>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
20000a06:	4b09      	ldr	r3, [pc, #36]	; (20000a2c <RCC_APB2PeriphResetCmd+0x3c>)
20000a08:	6a59      	ldr	r1, [r3, #36]	; 0x24
20000a0a:	4b08      	ldr	r3, [pc, #32]	; (20000a2c <RCC_APB2PeriphResetCmd+0x3c>)
20000a0c:	687a      	ldr	r2, [r7, #4]
20000a0e:	430a      	orrs	r2, r1
20000a10:	625a      	str	r2, [r3, #36]	; 0x24
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
  }
}
20000a12:	e006      	b.n	20000a22 <RCC_APB2PeriphResetCmd+0x32>
    RCC->APB2RSTR &= ~RCC_APB2Periph;
20000a14:	4b05      	ldr	r3, [pc, #20]	; (20000a2c <RCC_APB2PeriphResetCmd+0x3c>)
20000a16:	6a5a      	ldr	r2, [r3, #36]	; 0x24
20000a18:	687b      	ldr	r3, [r7, #4]
20000a1a:	43d9      	mvns	r1, r3
20000a1c:	4b03      	ldr	r3, [pc, #12]	; (20000a2c <RCC_APB2PeriphResetCmd+0x3c>)
20000a1e:	400a      	ands	r2, r1
20000a20:	625a      	str	r2, [r3, #36]	; 0x24
}
20000a22:	46c0      	nop			; (mov r8, r8)
20000a24:	46bd      	mov	sp, r7
20000a26:	b002      	add	sp, #8
20000a28:	bd80      	pop	{r7, pc}
20000a2a:	46c0      	nop			; (mov r8, r8)
20000a2c:	40023800 	andmi	r3, r2, r0, lsl #16

20000a30 <RCC_AHB1PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockLPModeCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
20000a30:	b580      	push	{r7, lr}
20000a32:	b082      	sub	sp, #8
20000a34:	af00      	add	r7, sp, #0
20000a36:	6078      	str	r0, [r7, #4]
20000a38:	000a      	movs	r2, r1
20000a3a:	1cfb      	adds	r3, r7, #3
20000a3c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_LPMODE_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
20000a3e:	1cfb      	adds	r3, r7, #3
20000a40:	781b      	ldrb	r3, [r3, #0]
20000a42:	2b00      	cmp	r3, #0
20000a44:	d006      	beq.n	20000a54 <RCC_AHB1PeriphClockLPModeCmd+0x24>
  {
    RCC->AHB1LPENR |= RCC_AHB1Periph;
20000a46:	4b09      	ldr	r3, [pc, #36]	; (20000a6c <RCC_AHB1PeriphClockLPModeCmd+0x3c>)
20000a48:	6d19      	ldr	r1, [r3, #80]	; 0x50
20000a4a:	4b08      	ldr	r3, [pc, #32]	; (20000a6c <RCC_AHB1PeriphClockLPModeCmd+0x3c>)
20000a4c:	687a      	ldr	r2, [r7, #4]
20000a4e:	430a      	orrs	r2, r1
20000a50:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    RCC->AHB1LPENR &= ~RCC_AHB1Periph;
  }
}
20000a52:	e006      	b.n	20000a62 <RCC_AHB1PeriphClockLPModeCmd+0x32>
    RCC->AHB1LPENR &= ~RCC_AHB1Periph;
20000a54:	4b05      	ldr	r3, [pc, #20]	; (20000a6c <RCC_AHB1PeriphClockLPModeCmd+0x3c>)
20000a56:	6d1a      	ldr	r2, [r3, #80]	; 0x50
20000a58:	687b      	ldr	r3, [r7, #4]
20000a5a:	43d9      	mvns	r1, r3
20000a5c:	4b03      	ldr	r3, [pc, #12]	; (20000a6c <RCC_AHB1PeriphClockLPModeCmd+0x3c>)
20000a5e:	400a      	ands	r2, r1
20000a60:	651a      	str	r2, [r3, #80]	; 0x50
}
20000a62:	46c0      	nop			; (mov r8, r8)
20000a64:	46bd      	mov	sp, r7
20000a66:	b002      	add	sp, #8
20000a68:	bd80      	pop	{r7, pc}
20000a6a:	46c0      	nop			; (mov r8, r8)
20000a6c:	40023800 	andmi	r3, r2, r0, lsl #16

20000a70 <RCC_AHB2PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB2PeriphClockLPModeCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
{
20000a70:	b580      	push	{r7, lr}
20000a72:	b082      	sub	sp, #8
20000a74:	af00      	add	r7, sp, #0
20000a76:	6078      	str	r0, [r7, #4]
20000a78:	000a      	movs	r2, r1
20000a7a:	1cfb      	adds	r3, r7, #3
20000a7c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
20000a7e:	1cfb      	adds	r3, r7, #3
20000a80:	781b      	ldrb	r3, [r3, #0]
20000a82:	2b00      	cmp	r3, #0
20000a84:	d006      	beq.n	20000a94 <RCC_AHB2PeriphClockLPModeCmd+0x24>
  {
    RCC->AHB2LPENR |= RCC_AHB2Periph;
20000a86:	4b09      	ldr	r3, [pc, #36]	; (20000aac <RCC_AHB2PeriphClockLPModeCmd+0x3c>)
20000a88:	6d59      	ldr	r1, [r3, #84]	; 0x54
20000a8a:	4b08      	ldr	r3, [pc, #32]	; (20000aac <RCC_AHB2PeriphClockLPModeCmd+0x3c>)
20000a8c:	687a      	ldr	r2, [r7, #4]
20000a8e:	430a      	orrs	r2, r1
20000a90:	655a      	str	r2, [r3, #84]	; 0x54
  }
  else
  {
    RCC->AHB2LPENR &= ~RCC_AHB2Periph;
  }
}
20000a92:	e006      	b.n	20000aa2 <RCC_AHB2PeriphClockLPModeCmd+0x32>
    RCC->AHB2LPENR &= ~RCC_AHB2Periph;
20000a94:	4b05      	ldr	r3, [pc, #20]	; (20000aac <RCC_AHB2PeriphClockLPModeCmd+0x3c>)
20000a96:	6d5a      	ldr	r2, [r3, #84]	; 0x54
20000a98:	687b      	ldr	r3, [r7, #4]
20000a9a:	43d9      	mvns	r1, r3
20000a9c:	4b03      	ldr	r3, [pc, #12]	; (20000aac <RCC_AHB2PeriphClockLPModeCmd+0x3c>)
20000a9e:	400a      	ands	r2, r1
20000aa0:	655a      	str	r2, [r3, #84]	; 0x54
}
20000aa2:	46c0      	nop			; (mov r8, r8)
20000aa4:	46bd      	mov	sp, r7
20000aa6:	b002      	add	sp, #8
20000aa8:	bd80      	pop	{r7, pc}
20000aaa:	46c0      	nop			; (mov r8, r8)
20000aac:	40023800 	andmi	r3, r2, r0, lsl #16

20000ab0 <RCC_AHB3PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB3PeriphClockLPModeCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
{
20000ab0:	b580      	push	{r7, lr}
20000ab2:	b082      	sub	sp, #8
20000ab4:	af00      	add	r7, sp, #0
20000ab6:	6078      	str	r0, [r7, #4]
20000ab8:	000a      	movs	r2, r1
20000aba:	1cfb      	adds	r3, r7, #3
20000abc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
20000abe:	1cfb      	adds	r3, r7, #3
20000ac0:	781b      	ldrb	r3, [r3, #0]
20000ac2:	2b00      	cmp	r3, #0
20000ac4:	d006      	beq.n	20000ad4 <RCC_AHB3PeriphClockLPModeCmd+0x24>
  {
    RCC->AHB3LPENR |= RCC_AHB3Periph;
20000ac6:	4b09      	ldr	r3, [pc, #36]	; (20000aec <RCC_AHB3PeriphClockLPModeCmd+0x3c>)
20000ac8:	6d99      	ldr	r1, [r3, #88]	; 0x58
20000aca:	4b08      	ldr	r3, [pc, #32]	; (20000aec <RCC_AHB3PeriphClockLPModeCmd+0x3c>)
20000acc:	687a      	ldr	r2, [r7, #4]
20000ace:	430a      	orrs	r2, r1
20000ad0:	659a      	str	r2, [r3, #88]	; 0x58
  }
  else
  {
    RCC->AHB3LPENR &= ~RCC_AHB3Periph;
  }
}
20000ad2:	e006      	b.n	20000ae2 <RCC_AHB3PeriphClockLPModeCmd+0x32>
    RCC->AHB3LPENR &= ~RCC_AHB3Periph;
20000ad4:	4b05      	ldr	r3, [pc, #20]	; (20000aec <RCC_AHB3PeriphClockLPModeCmd+0x3c>)
20000ad6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
20000ad8:	687b      	ldr	r3, [r7, #4]
20000ada:	43d9      	mvns	r1, r3
20000adc:	4b03      	ldr	r3, [pc, #12]	; (20000aec <RCC_AHB3PeriphClockLPModeCmd+0x3c>)
20000ade:	400a      	ands	r2, r1
20000ae0:	659a      	str	r2, [r3, #88]	; 0x58
}
20000ae2:	46c0      	nop			; (mov r8, r8)
20000ae4:	46bd      	mov	sp, r7
20000ae6:	b002      	add	sp, #8
20000ae8:	bd80      	pop	{r7, pc}
20000aea:	46c0      	nop			; (mov r8, r8)
20000aec:	40023800 	andmi	r3, r2, r0, lsl #16

20000af0 <RCC_APB1PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockLPModeCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
20000af0:	b580      	push	{r7, lr}
20000af2:	b082      	sub	sp, #8
20000af4:	af00      	add	r7, sp, #0
20000af6:	6078      	str	r0, [r7, #4]
20000af8:	000a      	movs	r2, r1
20000afa:	1cfb      	adds	r3, r7, #3
20000afc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
20000afe:	1cfb      	adds	r3, r7, #3
20000b00:	781b      	ldrb	r3, [r3, #0]
20000b02:	2b00      	cmp	r3, #0
20000b04:	d006      	beq.n	20000b14 <RCC_APB1PeriphClockLPModeCmd+0x24>
  {
    RCC->APB1LPENR |= RCC_APB1Periph;
20000b06:	4b09      	ldr	r3, [pc, #36]	; (20000b2c <RCC_APB1PeriphClockLPModeCmd+0x3c>)
20000b08:	6e19      	ldr	r1, [r3, #96]	; 0x60
20000b0a:	4b08      	ldr	r3, [pc, #32]	; (20000b2c <RCC_APB1PeriphClockLPModeCmd+0x3c>)
20000b0c:	687a      	ldr	r2, [r7, #4]
20000b0e:	430a      	orrs	r2, r1
20000b10:	661a      	str	r2, [r3, #96]	; 0x60
  }
  else
  {
    RCC->APB1LPENR &= ~RCC_APB1Periph;
  }
}
20000b12:	e006      	b.n	20000b22 <RCC_APB1PeriphClockLPModeCmd+0x32>
    RCC->APB1LPENR &= ~RCC_APB1Periph;
20000b14:	4b05      	ldr	r3, [pc, #20]	; (20000b2c <RCC_APB1PeriphClockLPModeCmd+0x3c>)
20000b16:	6e1a      	ldr	r2, [r3, #96]	; 0x60
20000b18:	687b      	ldr	r3, [r7, #4]
20000b1a:	43d9      	mvns	r1, r3
20000b1c:	4b03      	ldr	r3, [pc, #12]	; (20000b2c <RCC_APB1PeriphClockLPModeCmd+0x3c>)
20000b1e:	400a      	ands	r2, r1
20000b20:	661a      	str	r2, [r3, #96]	; 0x60
}
20000b22:	46c0      	nop			; (mov r8, r8)
20000b24:	46bd      	mov	sp, r7
20000b26:	b002      	add	sp, #8
20000b28:	bd80      	pop	{r7, pc}
20000b2a:	46c0      	nop			; (mov r8, r8)
20000b2c:	40023800 	andmi	r3, r2, r0, lsl #16

20000b30 <RCC_APB2PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockLPModeCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
20000b30:	b580      	push	{r7, lr}
20000b32:	b082      	sub	sp, #8
20000b34:	af00      	add	r7, sp, #0
20000b36:	6078      	str	r0, [r7, #4]
20000b38:	000a      	movs	r2, r1
20000b3a:	1cfb      	adds	r3, r7, #3
20000b3c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
20000b3e:	1cfb      	adds	r3, r7, #3
20000b40:	781b      	ldrb	r3, [r3, #0]
20000b42:	2b00      	cmp	r3, #0
20000b44:	d006      	beq.n	20000b54 <RCC_APB2PeriphClockLPModeCmd+0x24>
  {
    RCC->APB2LPENR |= RCC_APB2Periph;
20000b46:	4b09      	ldr	r3, [pc, #36]	; (20000b6c <RCC_APB2PeriphClockLPModeCmd+0x3c>)
20000b48:	6e59      	ldr	r1, [r3, #100]	; 0x64
20000b4a:	4b08      	ldr	r3, [pc, #32]	; (20000b6c <RCC_APB2PeriphClockLPModeCmd+0x3c>)
20000b4c:	687a      	ldr	r2, [r7, #4]
20000b4e:	430a      	orrs	r2, r1
20000b50:	665a      	str	r2, [r3, #100]	; 0x64
  }
  else
  {
    RCC->APB2LPENR &= ~RCC_APB2Periph;
  }
}
20000b52:	e006      	b.n	20000b62 <RCC_APB2PeriphClockLPModeCmd+0x32>
    RCC->APB2LPENR &= ~RCC_APB2Periph;
20000b54:	4b05      	ldr	r3, [pc, #20]	; (20000b6c <RCC_APB2PeriphClockLPModeCmd+0x3c>)
20000b56:	6e5a      	ldr	r2, [r3, #100]	; 0x64
20000b58:	687b      	ldr	r3, [r7, #4]
20000b5a:	43d9      	mvns	r1, r3
20000b5c:	4b03      	ldr	r3, [pc, #12]	; (20000b6c <RCC_APB2PeriphClockLPModeCmd+0x3c>)
20000b5e:	400a      	ands	r2, r1
20000b60:	665a      	str	r2, [r3, #100]	; 0x64
}
20000b62:	46c0      	nop			; (mov r8, r8)
20000b64:	46bd      	mov	sp, r7
20000b66:	b002      	add	sp, #8
20000b68:	bd80      	pop	{r7, pc}
20000b6a:	46c0      	nop			; (mov r8, r8)
20000b6c:	40023800 	andmi	r3, r2, r0, lsl #16

20000b70 <RCC_LSEModeConfig>:
  *            @arg RCC_LSE_LOWPOWER_MODE:  LSE oscillator in low power mode.
  *            @arg RCC_LSE_HIGHDRIVE_MODE: LSE oscillator in High Drive mode.
  * @retval None
  */
void RCC_LSEModeConfig(uint8_t RCC_Mode)
{
20000b70:	b580      	push	{r7, lr}
20000b72:	b082      	sub	sp, #8
20000b74:	af00      	add	r7, sp, #0
20000b76:	0002      	movs	r2, r0
20000b78:	1dfb      	adds	r3, r7, #7
20000b7a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_LSE_MODE(RCC_Mode));
  
  if(RCC_Mode == RCC_LSE_HIGHDRIVE_MODE)
20000b7c:	1dfb      	adds	r3, r7, #7
20000b7e:	781b      	ldrb	r3, [r3, #0]
20000b80:	2b01      	cmp	r3, #1
20000b82:	d106      	bne.n	20000b92 <RCC_LSEModeConfig+0x22>
  {
    SET_BIT(RCC->BDCR, RCC_BDCR_LSEMOD);
20000b84:	4b08      	ldr	r3, [pc, #32]	; (20000ba8 <RCC_LSEModeConfig+0x38>)
20000b86:	6f1a      	ldr	r2, [r3, #112]	; 0x70
20000b88:	4b07      	ldr	r3, [pc, #28]	; (20000ba8 <RCC_LSEModeConfig+0x38>)
20000b8a:	2108      	movs	r1, #8
20000b8c:	430a      	orrs	r2, r1
20000b8e:	671a      	str	r2, [r3, #112]	; 0x70
  }
  else
  {
    CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEMOD);
  }
}
20000b90:	e005      	b.n	20000b9e <RCC_LSEModeConfig+0x2e>
    CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEMOD);
20000b92:	4b05      	ldr	r3, [pc, #20]	; (20000ba8 <RCC_LSEModeConfig+0x38>)
20000b94:	6f1a      	ldr	r2, [r3, #112]	; 0x70
20000b96:	4b04      	ldr	r3, [pc, #16]	; (20000ba8 <RCC_LSEModeConfig+0x38>)
20000b98:	2108      	movs	r1, #8
20000b9a:	438a      	bics	r2, r1
20000b9c:	671a      	str	r2, [r3, #112]	; 0x70
}
20000b9e:	46c0      	nop			; (mov r8, r8)
20000ba0:	46bd      	mov	sp, r7
20000ba2:	b002      	add	sp, #8
20000ba4:	bd80      	pop	{r7, pc}
20000ba6:	46c0      	nop			; (mov r8, r8)
20000ba8:	40023800 	andmi	r3, r2, r0, lsl #16

20000bac <RCC_ITConfig>:
  * @param  NewState: new state of the specified RCC interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_ITConfig(uint8_t RCC_IT, FunctionalState NewState)
{
20000bac:	b580      	push	{r7, lr}
20000bae:	b082      	sub	sp, #8
20000bb0:	af00      	add	r7, sp, #0
20000bb2:	0002      	movs	r2, r0
20000bb4:	1dfb      	adds	r3, r7, #7
20000bb6:	701a      	strb	r2, [r3, #0]
20000bb8:	1dbb      	adds	r3, r7, #6
20000bba:	1c0a      	adds	r2, r1, #0
20000bbc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_IT(RCC_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
20000bbe:	1dbb      	adds	r3, r7, #6
20000bc0:	781b      	ldrb	r3, [r3, #0]
20000bc2:	2b00      	cmp	r3, #0
20000bc4:	d009      	beq.n	20000bda <RCC_ITConfig+0x2e>
  {
    /* Perform Byte access to RCC_CIR[14:8] bits to enable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS |= RCC_IT;
20000bc6:	4b0c      	ldr	r3, [pc, #48]	; (20000bf8 <RCC_ITConfig+0x4c>)
20000bc8:	781b      	ldrb	r3, [r3, #0]
20000bca:	b2da      	uxtb	r2, r3
20000bcc:	490a      	ldr	r1, [pc, #40]	; (20000bf8 <RCC_ITConfig+0x4c>)
20000bce:	1dfb      	adds	r3, r7, #7
20000bd0:	781b      	ldrb	r3, [r3, #0]
20000bd2:	4313      	orrs	r3, r2
20000bd4:	b2db      	uxtb	r3, r3
20000bd6:	700b      	strb	r3, [r1, #0]
  else
  {
    /* Perform Byte access to RCC_CIR[14:8] bits to disable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS &= (uint8_t)~RCC_IT;
  }
}
20000bd8:	e00a      	b.n	20000bf0 <RCC_ITConfig+0x44>
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS &= (uint8_t)~RCC_IT;
20000bda:	4b07      	ldr	r3, [pc, #28]	; (20000bf8 <RCC_ITConfig+0x4c>)
20000bdc:	781b      	ldrb	r3, [r3, #0]
20000bde:	b2db      	uxtb	r3, r3
20000be0:	1dfa      	adds	r2, r7, #7
20000be2:	7812      	ldrb	r2, [r2, #0]
20000be4:	43d2      	mvns	r2, r2
20000be6:	b2d2      	uxtb	r2, r2
20000be8:	4903      	ldr	r1, [pc, #12]	; (20000bf8 <RCC_ITConfig+0x4c>)
20000bea:	4013      	ands	r3, r2
20000bec:	b2db      	uxtb	r3, r3
20000bee:	700b      	strb	r3, [r1, #0]
}
20000bf0:	46c0      	nop			; (mov r8, r8)
20000bf2:	46bd      	mov	sp, r7
20000bf4:	b002      	add	sp, #8
20000bf6:	bd80      	pop	{r7, pc}
20000bf8:	4002380d 	andmi	r3, r2, sp, lsl #16

20000bfc <RCC_GetFlagStatus>:
  *            @arg RCC_FLAG_WWDGRST: Window Watchdog reset
  *            @arg RCC_FLAG_LPWRRST: Low Power reset
  * @retval The new state of RCC_FLAG (SET or RESET).
  */
FlagStatus RCC_GetFlagStatus(uint8_t RCC_FLAG)
{
20000bfc:	b580      	push	{r7, lr}
20000bfe:	b086      	sub	sp, #24
20000c00:	af00      	add	r7, sp, #0
20000c02:	0002      	movs	r2, r0
20000c04:	1dfb      	adds	r3, r7, #7
20000c06:	701a      	strb	r2, [r3, #0]
  uint32_t tmp = 0;
20000c08:	2300      	movs	r3, #0
20000c0a:	60fb      	str	r3, [r7, #12]
  uint32_t statusreg = 0;
20000c0c:	2300      	movs	r3, #0
20000c0e:	617b      	str	r3, [r7, #20]
  FlagStatus bitstatus = RESET;
20000c10:	2313      	movs	r3, #19
20000c12:	18fb      	adds	r3, r7, r3
20000c14:	2200      	movs	r2, #0
20000c16:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_FLAG(RCC_FLAG));

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
20000c18:	1dfb      	adds	r3, r7, #7
20000c1a:	781b      	ldrb	r3, [r3, #0]
20000c1c:	095b      	lsrs	r3, r3, #5
20000c1e:	b2db      	uxtb	r3, r3
20000c20:	60fb      	str	r3, [r7, #12]
  if (tmp == 1)               /* The flag to check is in CR register */
20000c22:	68fb      	ldr	r3, [r7, #12]
20000c24:	2b01      	cmp	r3, #1
20000c26:	d103      	bne.n	20000c30 <RCC_GetFlagStatus+0x34>
  {
    statusreg = RCC->CR;
20000c28:	4b14      	ldr	r3, [pc, #80]	; (20000c7c <RCC_GetFlagStatus+0x80>)
20000c2a:	681b      	ldr	r3, [r3, #0]
20000c2c:	617b      	str	r3, [r7, #20]
20000c2e:	e009      	b.n	20000c44 <RCC_GetFlagStatus+0x48>
  }
  else if (tmp == 2)          /* The flag to check is in BDCR register */
20000c30:	68fb      	ldr	r3, [r7, #12]
20000c32:	2b02      	cmp	r3, #2
20000c34:	d103      	bne.n	20000c3e <RCC_GetFlagStatus+0x42>
  {
    statusreg = RCC->BDCR;
20000c36:	4b11      	ldr	r3, [pc, #68]	; (20000c7c <RCC_GetFlagStatus+0x80>)
20000c38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
20000c3a:	617b      	str	r3, [r7, #20]
20000c3c:	e002      	b.n	20000c44 <RCC_GetFlagStatus+0x48>
  }
  else                       /* The flag to check is in CSR register */
  {
    statusreg = RCC->CSR;
20000c3e:	4b0f      	ldr	r3, [pc, #60]	; (20000c7c <RCC_GetFlagStatus+0x80>)
20000c40:	6f5b      	ldr	r3, [r3, #116]	; 0x74
20000c42:	617b      	str	r3, [r7, #20]
  }

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_MASK;
20000c44:	1dfb      	adds	r3, r7, #7
20000c46:	781b      	ldrb	r3, [r3, #0]
20000c48:	221f      	movs	r2, #31
20000c4a:	4013      	ands	r3, r2
20000c4c:	60fb      	str	r3, [r7, #12]
  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
20000c4e:	697a      	ldr	r2, [r7, #20]
20000c50:	68fb      	ldr	r3, [r7, #12]
20000c52:	40da      	lsrs	r2, r3
20000c54:	0013      	movs	r3, r2
20000c56:	2201      	movs	r2, #1
20000c58:	4013      	ands	r3, r2
20000c5a:	d004      	beq.n	20000c66 <RCC_GetFlagStatus+0x6a>
  {
    bitstatus = SET;
20000c5c:	2313      	movs	r3, #19
20000c5e:	18fb      	adds	r3, r7, r3
20000c60:	2201      	movs	r2, #1
20000c62:	701a      	strb	r2, [r3, #0]
20000c64:	e003      	b.n	20000c6e <RCC_GetFlagStatus+0x72>
  }
  else
  {
    bitstatus = RESET;
20000c66:	2313      	movs	r3, #19
20000c68:	18fb      	adds	r3, r7, r3
20000c6a:	2200      	movs	r2, #0
20000c6c:	701a      	strb	r2, [r3, #0]
  }
  /* Return the flag status */
  return bitstatus;
20000c6e:	2313      	movs	r3, #19
20000c70:	18fb      	adds	r3, r7, r3
20000c72:	781b      	ldrb	r3, [r3, #0]
}
20000c74:	0018      	movs	r0, r3
20000c76:	46bd      	mov	sp, r7
20000c78:	b006      	add	sp, #24
20000c7a:	bd80      	pop	{r7, pc}
20000c7c:	40023800 	andmi	r3, r2, r0, lsl #16

20000c80 <RCC_ClearFlag>:
  *         RCC_FLAG_IWDGRST, RCC_FLAG_WWDGRST, RCC_FLAG_LPWRRST
  * @param  None
  * @retval None
  */
void RCC_ClearFlag(void)
{
20000c80:	b580      	push	{r7, lr}
20000c82:	af00      	add	r7, sp, #0
  /* Set RMVF bit to clear the reset flags */
  RCC->CSR |= RCC_CSR_RMVF;
20000c84:	4b04      	ldr	r3, [pc, #16]	; (20000c98 <RCC_ClearFlag+0x18>)
20000c86:	6f5a      	ldr	r2, [r3, #116]	; 0x74
20000c88:	4b03      	ldr	r3, [pc, #12]	; (20000c98 <RCC_ClearFlag+0x18>)
20000c8a:	2180      	movs	r1, #128	; 0x80
20000c8c:	0449      	lsls	r1, r1, #17
20000c8e:	430a      	orrs	r2, r1
20000c90:	675a      	str	r2, [r3, #116]	; 0x74
}
20000c92:	46c0      	nop			; (mov r8, r8)
20000c94:	46bd      	mov	sp, r7
20000c96:	bd80      	pop	{r7, pc}
20000c98:	40023800 	andmi	r3, r2, r0, lsl #16

20000c9c <RCC_GetITStatus>:
  *            @arg RCC_IT_PLLSAIRDY: PLLSAI clock ready interrupt (only for STM32F42xxx/43xxx/446xx/469xx/479xx devices)
  *            @arg RCC_IT_CSS: Clock Security System interrupt
  * @retval The new state of RCC_IT (SET or RESET).
  */
ITStatus RCC_GetITStatus(uint8_t RCC_IT)
{
20000c9c:	b580      	push	{r7, lr}
20000c9e:	b084      	sub	sp, #16
20000ca0:	af00      	add	r7, sp, #0
20000ca2:	0002      	movs	r2, r0
20000ca4:	1dfb      	adds	r3, r7, #7
20000ca6:	701a      	strb	r2, [r3, #0]
  ITStatus bitstatus = RESET;
20000ca8:	230f      	movs	r3, #15
20000caa:	18fb      	adds	r3, r7, r3
20000cac:	2200      	movs	r2, #0
20000cae:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_GET_IT(RCC_IT));

  /* Check the status of the specified RCC interrupt */
  if ((RCC->CIR & RCC_IT) != (uint32_t)RESET)
20000cb0:	4b0a      	ldr	r3, [pc, #40]	; (20000cdc <RCC_GetITStatus+0x40>)
20000cb2:	68db      	ldr	r3, [r3, #12]
20000cb4:	1dfa      	adds	r2, r7, #7
20000cb6:	7812      	ldrb	r2, [r2, #0]
20000cb8:	4013      	ands	r3, r2
20000cba:	d004      	beq.n	20000cc6 <RCC_GetITStatus+0x2a>
  {
    bitstatus = SET;
20000cbc:	230f      	movs	r3, #15
20000cbe:	18fb      	adds	r3, r7, r3
20000cc0:	2201      	movs	r2, #1
20000cc2:	701a      	strb	r2, [r3, #0]
20000cc4:	e003      	b.n	20000cce <RCC_GetITStatus+0x32>
  }
  else
  {
    bitstatus = RESET;
20000cc6:	230f      	movs	r3, #15
20000cc8:	18fb      	adds	r3, r7, r3
20000cca:	2200      	movs	r2, #0
20000ccc:	701a      	strb	r2, [r3, #0]
  }
  /* Return the RCC_IT status */
  return  bitstatus;
20000cce:	230f      	movs	r3, #15
20000cd0:	18fb      	adds	r3, r7, r3
20000cd2:	781b      	ldrb	r3, [r3, #0]
}
20000cd4:	0018      	movs	r0, r3
20000cd6:	46bd      	mov	sp, r7
20000cd8:	b004      	add	sp, #16
20000cda:	bd80      	pop	{r7, pc}
20000cdc:	40023800 	andmi	r3, r2, r0, lsl #16

20000ce0 <RCC_ClearITPendingBit>:
  *            @arg RCC_IT_PLLSAIRDY: PLLSAI ready interrupt (only for STM32F42xxx/43xxx/446xx/469xx/479xx devices) 
  *            @arg RCC_IT_CSS: Clock Security System interrupt
  * @retval None
  */
void RCC_ClearITPendingBit(uint8_t RCC_IT)
{
20000ce0:	b580      	push	{r7, lr}
20000ce2:	b082      	sub	sp, #8
20000ce4:	af00      	add	r7, sp, #0
20000ce6:	0002      	movs	r2, r0
20000ce8:	1dfb      	adds	r3, r7, #7
20000cea:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_CLEAR_IT(RCC_IT));

  /* Perform Byte access to RCC_CIR[23:16] bits to clear the selected interrupt
     pending bits */
  *(__IO uint8_t *) CIR_BYTE3_ADDRESS = RCC_IT;
20000cec:	4a03      	ldr	r2, [pc, #12]	; (20000cfc <RCC_ClearITPendingBit+0x1c>)
20000cee:	1dfb      	adds	r3, r7, #7
20000cf0:	781b      	ldrb	r3, [r3, #0]
20000cf2:	7013      	strb	r3, [r2, #0]
}
20000cf4:	46c0      	nop			; (mov r8, r8)
20000cf6:	46bd      	mov	sp, r7
20000cf8:	b002      	add	sp, #8
20000cfa:	bd80      	pop	{r7, pc}
20000cfc:	4002380e 	andmi	r3, r2, lr, lsl #16

20000d00 <GPIO_DeInit>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F42xxx/43xxx devices.
  *                      x can be (A, B, C, D and H) to select the GPIO peripheral for STM32F401xx devices.  
  * @retval None
  */
void GPIO_DeInit(GPIO_TypeDef* GPIOx)
{
20000d00:	b580      	push	{r7, lr}
20000d02:	b082      	sub	sp, #8
20000d04:	af00      	add	r7, sp, #0
20000d06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  if (GPIOx == GPIOA)
20000d08:	687b      	ldr	r3, [r7, #4]
20000d0a:	4a4e      	ldr	r2, [pc, #312]	; (20000e44 <GPIO_DeInit+0x144>)
20000d0c:	4293      	cmp	r3, r2
20000d0e:	d108      	bne.n	20000d22 <GPIO_DeInit+0x22>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, ENABLE);
20000d10:	2101      	movs	r1, #1
20000d12:	2001      	movs	r0, #1
20000d14:	f7ff fdec 	bl	200008f0 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, DISABLE);
20000d18:	2100      	movs	r1, #0
20000d1a:	2001      	movs	r0, #1
20000d1c:	f7ff fde8 	bl	200008f0 <RCC_AHB1PeriphResetCmd>
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, ENABLE);
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, DISABLE);
    }
  }
}
20000d20:	e08c      	b.n	20000e3c <GPIO_DeInit+0x13c>
  else if (GPIOx == GPIOB)
20000d22:	687b      	ldr	r3, [r7, #4]
20000d24:	4a48      	ldr	r2, [pc, #288]	; (20000e48 <GPIO_DeInit+0x148>)
20000d26:	4293      	cmp	r3, r2
20000d28:	d108      	bne.n	20000d3c <GPIO_DeInit+0x3c>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, ENABLE);
20000d2a:	2101      	movs	r1, #1
20000d2c:	2002      	movs	r0, #2
20000d2e:	f7ff fddf 	bl	200008f0 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, DISABLE);
20000d32:	2100      	movs	r1, #0
20000d34:	2002      	movs	r0, #2
20000d36:	f7ff fddb 	bl	200008f0 <RCC_AHB1PeriphResetCmd>
}
20000d3a:	e07f      	b.n	20000e3c <GPIO_DeInit+0x13c>
  else if (GPIOx == GPIOC)
20000d3c:	687b      	ldr	r3, [r7, #4]
20000d3e:	4a43      	ldr	r2, [pc, #268]	; (20000e4c <GPIO_DeInit+0x14c>)
20000d40:	4293      	cmp	r3, r2
20000d42:	d108      	bne.n	20000d56 <GPIO_DeInit+0x56>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, ENABLE);
20000d44:	2101      	movs	r1, #1
20000d46:	2004      	movs	r0, #4
20000d48:	f7ff fdd2 	bl	200008f0 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, DISABLE);
20000d4c:	2100      	movs	r1, #0
20000d4e:	2004      	movs	r0, #4
20000d50:	f7ff fdce 	bl	200008f0 <RCC_AHB1PeriphResetCmd>
}
20000d54:	e072      	b.n	20000e3c <GPIO_DeInit+0x13c>
  else if (GPIOx == GPIOD)
20000d56:	687b      	ldr	r3, [r7, #4]
20000d58:	4a3d      	ldr	r2, [pc, #244]	; (20000e50 <GPIO_DeInit+0x150>)
20000d5a:	4293      	cmp	r3, r2
20000d5c:	d108      	bne.n	20000d70 <GPIO_DeInit+0x70>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, ENABLE);
20000d5e:	2101      	movs	r1, #1
20000d60:	2008      	movs	r0, #8
20000d62:	f7ff fdc5 	bl	200008f0 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, DISABLE);
20000d66:	2100      	movs	r1, #0
20000d68:	2008      	movs	r0, #8
20000d6a:	f7ff fdc1 	bl	200008f0 <RCC_AHB1PeriphResetCmd>
}
20000d6e:	e065      	b.n	20000e3c <GPIO_DeInit+0x13c>
  else if (GPIOx == GPIOE)
20000d70:	687b      	ldr	r3, [r7, #4]
20000d72:	4a38      	ldr	r2, [pc, #224]	; (20000e54 <GPIO_DeInit+0x154>)
20000d74:	4293      	cmp	r3, r2
20000d76:	d108      	bne.n	20000d8a <GPIO_DeInit+0x8a>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, ENABLE);
20000d78:	2101      	movs	r1, #1
20000d7a:	2010      	movs	r0, #16
20000d7c:	f7ff fdb8 	bl	200008f0 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, DISABLE);
20000d80:	2100      	movs	r1, #0
20000d82:	2010      	movs	r0, #16
20000d84:	f7ff fdb4 	bl	200008f0 <RCC_AHB1PeriphResetCmd>
}
20000d88:	e058      	b.n	20000e3c <GPIO_DeInit+0x13c>
  else if (GPIOx == GPIOF)
20000d8a:	687b      	ldr	r3, [r7, #4]
20000d8c:	4a32      	ldr	r2, [pc, #200]	; (20000e58 <GPIO_DeInit+0x158>)
20000d8e:	4293      	cmp	r3, r2
20000d90:	d108      	bne.n	20000da4 <GPIO_DeInit+0xa4>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, ENABLE);
20000d92:	2101      	movs	r1, #1
20000d94:	2020      	movs	r0, #32
20000d96:	f7ff fdab 	bl	200008f0 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, DISABLE);
20000d9a:	2100      	movs	r1, #0
20000d9c:	2020      	movs	r0, #32
20000d9e:	f7ff fda7 	bl	200008f0 <RCC_AHB1PeriphResetCmd>
}
20000da2:	e04b      	b.n	20000e3c <GPIO_DeInit+0x13c>
  else if (GPIOx == GPIOG)
20000da4:	687b      	ldr	r3, [r7, #4]
20000da6:	4a2d      	ldr	r2, [pc, #180]	; (20000e5c <GPIO_DeInit+0x15c>)
20000da8:	4293      	cmp	r3, r2
20000daa:	d108      	bne.n	20000dbe <GPIO_DeInit+0xbe>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, ENABLE);
20000dac:	2101      	movs	r1, #1
20000dae:	2040      	movs	r0, #64	; 0x40
20000db0:	f7ff fd9e 	bl	200008f0 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, DISABLE);
20000db4:	2100      	movs	r1, #0
20000db6:	2040      	movs	r0, #64	; 0x40
20000db8:	f7ff fd9a 	bl	200008f0 <RCC_AHB1PeriphResetCmd>
}
20000dbc:	e03e      	b.n	20000e3c <GPIO_DeInit+0x13c>
  else if (GPIOx == GPIOH)
20000dbe:	687b      	ldr	r3, [r7, #4]
20000dc0:	4a27      	ldr	r2, [pc, #156]	; (20000e60 <GPIO_DeInit+0x160>)
20000dc2:	4293      	cmp	r3, r2
20000dc4:	d108      	bne.n	20000dd8 <GPIO_DeInit+0xd8>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOH, ENABLE);
20000dc6:	2101      	movs	r1, #1
20000dc8:	2080      	movs	r0, #128	; 0x80
20000dca:	f7ff fd91 	bl	200008f0 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOH, DISABLE);
20000dce:	2100      	movs	r1, #0
20000dd0:	2080      	movs	r0, #128	; 0x80
20000dd2:	f7ff fd8d 	bl	200008f0 <RCC_AHB1PeriphResetCmd>
}
20000dd6:	e031      	b.n	20000e3c <GPIO_DeInit+0x13c>
  else if (GPIOx == GPIOI)
20000dd8:	687b      	ldr	r3, [r7, #4]
20000dda:	4a22      	ldr	r2, [pc, #136]	; (20000e64 <GPIO_DeInit+0x164>)
20000ddc:	4293      	cmp	r3, r2
20000dde:	d10c      	bne.n	20000dfa <GPIO_DeInit+0xfa>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, ENABLE);
20000de0:	2380      	movs	r3, #128	; 0x80
20000de2:	005b      	lsls	r3, r3, #1
20000de4:	2101      	movs	r1, #1
20000de6:	0018      	movs	r0, r3
20000de8:	f7ff fd82 	bl	200008f0 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, DISABLE);
20000dec:	2380      	movs	r3, #128	; 0x80
20000dee:	005b      	lsls	r3, r3, #1
20000df0:	2100      	movs	r1, #0
20000df2:	0018      	movs	r0, r3
20000df4:	f7ff fd7c 	bl	200008f0 <RCC_AHB1PeriphResetCmd>
}
20000df8:	e020      	b.n	20000e3c <GPIO_DeInit+0x13c>
  else if (GPIOx == GPIOJ)
20000dfa:	687b      	ldr	r3, [r7, #4]
20000dfc:	4a1a      	ldr	r2, [pc, #104]	; (20000e68 <GPIO_DeInit+0x168>)
20000dfe:	4293      	cmp	r3, r2
20000e00:	d10c      	bne.n	20000e1c <GPIO_DeInit+0x11c>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOJ, ENABLE);
20000e02:	2380      	movs	r3, #128	; 0x80
20000e04:	009b      	lsls	r3, r3, #2
20000e06:	2101      	movs	r1, #1
20000e08:	0018      	movs	r0, r3
20000e0a:	f7ff fd71 	bl	200008f0 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOJ, DISABLE);
20000e0e:	2380      	movs	r3, #128	; 0x80
20000e10:	009b      	lsls	r3, r3, #2
20000e12:	2100      	movs	r1, #0
20000e14:	0018      	movs	r0, r3
20000e16:	f7ff fd6b 	bl	200008f0 <RCC_AHB1PeriphResetCmd>
}
20000e1a:	e00f      	b.n	20000e3c <GPIO_DeInit+0x13c>
    if (GPIOx == GPIOK)
20000e1c:	687b      	ldr	r3, [r7, #4]
20000e1e:	4a13      	ldr	r2, [pc, #76]	; (20000e6c <GPIO_DeInit+0x16c>)
20000e20:	4293      	cmp	r3, r2
20000e22:	d10b      	bne.n	20000e3c <GPIO_DeInit+0x13c>
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, ENABLE);
20000e24:	2380      	movs	r3, #128	; 0x80
20000e26:	00db      	lsls	r3, r3, #3
20000e28:	2101      	movs	r1, #1
20000e2a:	0018      	movs	r0, r3
20000e2c:	f7ff fd60 	bl	200008f0 <RCC_AHB1PeriphResetCmd>
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, DISABLE);
20000e30:	2380      	movs	r3, #128	; 0x80
20000e32:	00db      	lsls	r3, r3, #3
20000e34:	2100      	movs	r1, #0
20000e36:	0018      	movs	r0, r3
20000e38:	f7ff fd5a 	bl	200008f0 <RCC_AHB1PeriphResetCmd>
}
20000e3c:	46c0      	nop			; (mov r8, r8)
20000e3e:	46bd      	mov	sp, r7
20000e40:	b002      	add	sp, #8
20000e42:	bd80      	pop	{r7, pc}
20000e44:	40020000 	andmi	r0, r2, r0
20000e48:	40020400 	andmi	r0, r2, r0, lsl #8
20000e4c:	40020800 	andmi	r0, r2, r0, lsl #16
20000e50:	40020c00 	andmi	r0, r2, r0, lsl #24
20000e54:	40021000 	andmi	r1, r2, r0
20000e58:	40021400 	andmi	r1, r2, r0, lsl #8
20000e5c:	40021800 	andmi	r1, r2, r0, lsl #16
20000e60:	40021c00 	andmi	r1, r2, r0, lsl #24
20000e64:	40022000 	andmi	r2, r2, r0
20000e68:	40022400 	andmi	r2, r2, r0, lsl #8
20000e6c:	40022800 	andmi	r2, r2, r0, lsl #16

20000e70 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
20000e70:	b580      	push	{r7, lr}
20000e72:	b086      	sub	sp, #24
20000e74:	af00      	add	r7, sp, #0
20000e76:	6078      	str	r0, [r7, #4]
20000e78:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
20000e7a:	2300      	movs	r3, #0
20000e7c:	617b      	str	r3, [r7, #20]
20000e7e:	2300      	movs	r3, #0
20000e80:	613b      	str	r3, [r7, #16]
20000e82:	2300      	movs	r3, #0
20000e84:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
20000e86:	2300      	movs	r3, #0
20000e88:	617b      	str	r3, [r7, #20]
20000e8a:	e076      	b.n	20000f7a <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
20000e8c:	2201      	movs	r2, #1
20000e8e:	697b      	ldr	r3, [r7, #20]
20000e90:	409a      	lsls	r2, r3
20000e92:	0013      	movs	r3, r2
20000e94:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
20000e96:	683b      	ldr	r3, [r7, #0]
20000e98:	681a      	ldr	r2, [r3, #0]
20000e9a:	693b      	ldr	r3, [r7, #16]
20000e9c:	4013      	ands	r3, r2
20000e9e:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
20000ea0:	68fa      	ldr	r2, [r7, #12]
20000ea2:	693b      	ldr	r3, [r7, #16]
20000ea4:	429a      	cmp	r2, r3
20000ea6:	d165      	bne.n	20000f74 <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
20000ea8:	687b      	ldr	r3, [r7, #4]
20000eaa:	681b      	ldr	r3, [r3, #0]
20000eac:	697a      	ldr	r2, [r7, #20]
20000eae:	0052      	lsls	r2, r2, #1
20000eb0:	2103      	movs	r1, #3
20000eb2:	4091      	lsls	r1, r2
20000eb4:	000a      	movs	r2, r1
20000eb6:	43d2      	mvns	r2, r2
20000eb8:	401a      	ands	r2, r3
20000eba:	687b      	ldr	r3, [r7, #4]
20000ebc:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
20000ebe:	687b      	ldr	r3, [r7, #4]
20000ec0:	681a      	ldr	r2, [r3, #0]
20000ec2:	683b      	ldr	r3, [r7, #0]
20000ec4:	791b      	ldrb	r3, [r3, #4]
20000ec6:	0019      	movs	r1, r3
20000ec8:	697b      	ldr	r3, [r7, #20]
20000eca:	005b      	lsls	r3, r3, #1
20000ecc:	4099      	lsls	r1, r3
20000ece:	000b      	movs	r3, r1
20000ed0:	431a      	orrs	r2, r3
20000ed2:	687b      	ldr	r3, [r7, #4]
20000ed4:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
20000ed6:	683b      	ldr	r3, [r7, #0]
20000ed8:	791b      	ldrb	r3, [r3, #4]
20000eda:	2b01      	cmp	r3, #1
20000edc:	d003      	beq.n	20000ee6 <GPIO_Init+0x76>
20000ede:	683b      	ldr	r3, [r7, #0]
20000ee0:	791b      	ldrb	r3, [r3, #4]
20000ee2:	2b02      	cmp	r3, #2
20000ee4:	d12e      	bne.n	20000f44 <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
20000ee6:	687b      	ldr	r3, [r7, #4]
20000ee8:	689b      	ldr	r3, [r3, #8]
20000eea:	697a      	ldr	r2, [r7, #20]
20000eec:	0052      	lsls	r2, r2, #1
20000eee:	2103      	movs	r1, #3
20000ef0:	4091      	lsls	r1, r2
20000ef2:	000a      	movs	r2, r1
20000ef4:	43d2      	mvns	r2, r2
20000ef6:	401a      	ands	r2, r3
20000ef8:	687b      	ldr	r3, [r7, #4]
20000efa:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
20000efc:	687b      	ldr	r3, [r7, #4]
20000efe:	689a      	ldr	r2, [r3, #8]
20000f00:	683b      	ldr	r3, [r7, #0]
20000f02:	795b      	ldrb	r3, [r3, #5]
20000f04:	0019      	movs	r1, r3
20000f06:	697b      	ldr	r3, [r7, #20]
20000f08:	005b      	lsls	r3, r3, #1
20000f0a:	4099      	lsls	r1, r3
20000f0c:	000b      	movs	r3, r1
20000f0e:	431a      	orrs	r2, r3
20000f10:	687b      	ldr	r3, [r7, #4]
20000f12:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
20000f14:	687b      	ldr	r3, [r7, #4]
20000f16:	685b      	ldr	r3, [r3, #4]
20000f18:	697a      	ldr	r2, [r7, #20]
20000f1a:	b292      	uxth	r2, r2
20000f1c:	0011      	movs	r1, r2
20000f1e:	2201      	movs	r2, #1
20000f20:	408a      	lsls	r2, r1
20000f22:	43d2      	mvns	r2, r2
20000f24:	401a      	ands	r2, r3
20000f26:	687b      	ldr	r3, [r7, #4]
20000f28:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
20000f2a:	687b      	ldr	r3, [r7, #4]
20000f2c:	685b      	ldr	r3, [r3, #4]
20000f2e:	683a      	ldr	r2, [r7, #0]
20000f30:	7992      	ldrb	r2, [r2, #6]
20000f32:	0011      	movs	r1, r2
20000f34:	697a      	ldr	r2, [r7, #20]
20000f36:	b292      	uxth	r2, r2
20000f38:	4091      	lsls	r1, r2
20000f3a:	000a      	movs	r2, r1
20000f3c:	b292      	uxth	r2, r2
20000f3e:	431a      	orrs	r2, r3
20000f40:	687b      	ldr	r3, [r7, #4]
20000f42:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
20000f44:	687b      	ldr	r3, [r7, #4]
20000f46:	68db      	ldr	r3, [r3, #12]
20000f48:	697a      	ldr	r2, [r7, #20]
20000f4a:	b292      	uxth	r2, r2
20000f4c:	0052      	lsls	r2, r2, #1
20000f4e:	2103      	movs	r1, #3
20000f50:	4091      	lsls	r1, r2
20000f52:	000a      	movs	r2, r1
20000f54:	43d2      	mvns	r2, r2
20000f56:	401a      	ands	r2, r3
20000f58:	687b      	ldr	r3, [r7, #4]
20000f5a:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
20000f5c:	687b      	ldr	r3, [r7, #4]
20000f5e:	68da      	ldr	r2, [r3, #12]
20000f60:	683b      	ldr	r3, [r7, #0]
20000f62:	79db      	ldrb	r3, [r3, #7]
20000f64:	0019      	movs	r1, r3
20000f66:	697b      	ldr	r3, [r7, #20]
20000f68:	005b      	lsls	r3, r3, #1
20000f6a:	4099      	lsls	r1, r3
20000f6c:	000b      	movs	r3, r1
20000f6e:	431a      	orrs	r2, r3
20000f70:	687b      	ldr	r3, [r7, #4]
20000f72:	60da      	str	r2, [r3, #12]
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
20000f74:	697b      	ldr	r3, [r7, #20]
20000f76:	3301      	adds	r3, #1
20000f78:	617b      	str	r3, [r7, #20]
20000f7a:	697b      	ldr	r3, [r7, #20]
20000f7c:	2b0f      	cmp	r3, #15
20000f7e:	d985      	bls.n	20000e8c <GPIO_Init+0x1c>
    }
  }
}
20000f80:	46c0      	nop			; (mov r8, r8)
20000f82:	46bd      	mov	sp, r7
20000f84:	b006      	add	sp, #24
20000f86:	bd80      	pop	{r7, pc}

20000f88 <GPIO_StructInit>:
  * @brief  Fills each GPIO_InitStruct member with its default value.
  * @param  GPIO_InitStruct : pointer to a GPIO_InitTypeDef structure which will be initialized.
  * @retval None
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
20000f88:	b580      	push	{r7, lr}
20000f8a:	b082      	sub	sp, #8
20000f8c:	af00      	add	r7, sp, #0
20000f8e:	6078      	str	r0, [r7, #4]
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
20000f90:	687b      	ldr	r3, [r7, #4]
20000f92:	4a09      	ldr	r2, [pc, #36]	; (20000fb8 <GPIO_StructInit+0x30>)
20000f94:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN;
20000f96:	687b      	ldr	r3, [r7, #4]
20000f98:	2200      	movs	r2, #0
20000f9a:	711a      	strb	r2, [r3, #4]
  GPIO_InitStruct->GPIO_Speed = GPIO_Speed_2MHz;
20000f9c:	687b      	ldr	r3, [r7, #4]
20000f9e:	2200      	movs	r2, #0
20000fa0:	715a      	strb	r2, [r3, #5]
  GPIO_InitStruct->GPIO_OType = GPIO_OType_PP;
20000fa2:	687b      	ldr	r3, [r7, #4]
20000fa4:	2200      	movs	r2, #0
20000fa6:	719a      	strb	r2, [r3, #6]
  GPIO_InitStruct->GPIO_PuPd = GPIO_PuPd_NOPULL;
20000fa8:	687b      	ldr	r3, [r7, #4]
20000faa:	2200      	movs	r2, #0
20000fac:	71da      	strb	r2, [r3, #7]
}
20000fae:	46c0      	nop			; (mov r8, r8)
20000fb0:	46bd      	mov	sp, r7
20000fb2:	b002      	add	sp, #8
20000fb4:	bd80      	pop	{r7, pc}
20000fb6:	46c0      	nop			; (mov r8, r8)
20000fb8:	0000ffff 	strdeq	pc, [r0], -pc	; <UNPREDICTABLE>

20000fbc <GPIO_PinLockConfig>:
  * @param  GPIO_Pin: specifies the port bit to be locked.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_PinLockConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
20000fbc:	b580      	push	{r7, lr}
20000fbe:	b084      	sub	sp, #16
20000fc0:	af00      	add	r7, sp, #0
20000fc2:	6078      	str	r0, [r7, #4]
20000fc4:	000a      	movs	r2, r1
20000fc6:	1cbb      	adds	r3, r7, #2
20000fc8:	801a      	strh	r2, [r3, #0]
  __IO uint32_t tmp = 0x00010000;
20000fca:	2380      	movs	r3, #128	; 0x80
20000fcc:	025b      	lsls	r3, r3, #9
20000fce:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  tmp |= GPIO_Pin;
20000fd0:	1cbb      	adds	r3, r7, #2
20000fd2:	881a      	ldrh	r2, [r3, #0]
20000fd4:	68fb      	ldr	r3, [r7, #12]
20000fd6:	4313      	orrs	r3, r2
20000fd8:	60fb      	str	r3, [r7, #12]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
20000fda:	68fa      	ldr	r2, [r7, #12]
20000fdc:	687b      	ldr	r3, [r7, #4]
20000fde:	61da      	str	r2, [r3, #28]
  /* Reset LCKK bit */
  GPIOx->LCKR =  GPIO_Pin;
20000fe0:	1cbb      	adds	r3, r7, #2
20000fe2:	881a      	ldrh	r2, [r3, #0]
20000fe4:	687b      	ldr	r3, [r7, #4]
20000fe6:	61da      	str	r2, [r3, #28]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
20000fe8:	68fa      	ldr	r2, [r7, #12]
20000fea:	687b      	ldr	r3, [r7, #4]
20000fec:	61da      	str	r2, [r3, #28]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
20000fee:	687b      	ldr	r3, [r7, #4]
20000ff0:	69db      	ldr	r3, [r3, #28]
20000ff2:	60fb      	str	r3, [r7, #12]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
20000ff4:	687b      	ldr	r3, [r7, #4]
20000ff6:	69db      	ldr	r3, [r3, #28]
20000ff8:	60fb      	str	r3, [r7, #12]
}
20000ffa:	46c0      	nop			; (mov r8, r8)
20000ffc:	46bd      	mov	sp, r7
20000ffe:	b004      	add	sp, #16
20001000:	bd80      	pop	{r7, pc}

20001002 <GPIO_ReadInputDataBit>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
uint8_t GPIO_ReadInputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
20001002:	b580      	push	{r7, lr}
20001004:	b084      	sub	sp, #16
20001006:	af00      	add	r7, sp, #0
20001008:	6078      	str	r0, [r7, #4]
2000100a:	000a      	movs	r2, r1
2000100c:	1cbb      	adds	r3, r7, #2
2000100e:	801a      	strh	r2, [r3, #0]
  uint8_t bitstatus = 0x00;
20001010:	230f      	movs	r3, #15
20001012:	18fb      	adds	r3, r7, r3
20001014:	2200      	movs	r2, #0
20001016:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
20001018:	687b      	ldr	r3, [r7, #4]
2000101a:	691b      	ldr	r3, [r3, #16]
2000101c:	1cba      	adds	r2, r7, #2
2000101e:	8812      	ldrh	r2, [r2, #0]
20001020:	4013      	ands	r3, r2
20001022:	d004      	beq.n	2000102e <GPIO_ReadInputDataBit+0x2c>
  {
    bitstatus = (uint8_t)Bit_SET;
20001024:	230f      	movs	r3, #15
20001026:	18fb      	adds	r3, r7, r3
20001028:	2201      	movs	r2, #1
2000102a:	701a      	strb	r2, [r3, #0]
2000102c:	e003      	b.n	20001036 <GPIO_ReadInputDataBit+0x34>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
2000102e:	230f      	movs	r3, #15
20001030:	18fb      	adds	r3, r7, r3
20001032:	2200      	movs	r2, #0
20001034:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
20001036:	230f      	movs	r3, #15
20001038:	18fb      	adds	r3, r7, r3
2000103a:	781b      	ldrb	r3, [r3, #0]
}
2000103c:	0018      	movs	r0, r3
2000103e:	46bd      	mov	sp, r7
20001040:	b004      	add	sp, #16
20001042:	bd80      	pop	{r7, pc}

20001044 <GPIO_ReadInputData>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F42xxx/43xxx devices.
  *                      x can be (A, B, C, D and H) to select the GPIO peripheral for STM32F401xx devices. 
  * @retval GPIO input data port value.
  */
uint16_t GPIO_ReadInputData(GPIO_TypeDef* GPIOx)
{
20001044:	b580      	push	{r7, lr}
20001046:	b082      	sub	sp, #8
20001048:	af00      	add	r7, sp, #0
2000104a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  return ((uint16_t)GPIOx->IDR);
2000104c:	687b      	ldr	r3, [r7, #4]
2000104e:	691b      	ldr	r3, [r3, #16]
20001050:	b29b      	uxth	r3, r3
}
20001052:	0018      	movs	r0, r3
20001054:	46bd      	mov	sp, r7
20001056:	b002      	add	sp, #8
20001058:	bd80      	pop	{r7, pc}

2000105a <GPIO_ReadOutputDataBit>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *          This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The output port pin value.
  */
uint8_t GPIO_ReadOutputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
2000105a:	b580      	push	{r7, lr}
2000105c:	b084      	sub	sp, #16
2000105e:	af00      	add	r7, sp, #0
20001060:	6078      	str	r0, [r7, #4]
20001062:	000a      	movs	r2, r1
20001064:	1cbb      	adds	r3, r7, #2
20001066:	801a      	strh	r2, [r3, #0]
  uint8_t bitstatus = 0x00;
20001068:	230f      	movs	r3, #15
2000106a:	18fb      	adds	r3, r7, r3
2000106c:	2200      	movs	r2, #0
2000106e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if (((GPIOx->ODR) & GPIO_Pin) != (uint32_t)Bit_RESET)
20001070:	687b      	ldr	r3, [r7, #4]
20001072:	695b      	ldr	r3, [r3, #20]
20001074:	1cba      	adds	r2, r7, #2
20001076:	8812      	ldrh	r2, [r2, #0]
20001078:	4013      	ands	r3, r2
2000107a:	d004      	beq.n	20001086 <GPIO_ReadOutputDataBit+0x2c>
  {
    bitstatus = (uint8_t)Bit_SET;
2000107c:	230f      	movs	r3, #15
2000107e:	18fb      	adds	r3, r7, r3
20001080:	2201      	movs	r2, #1
20001082:	701a      	strb	r2, [r3, #0]
20001084:	e003      	b.n	2000108e <GPIO_ReadOutputDataBit+0x34>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
20001086:	230f      	movs	r3, #15
20001088:	18fb      	adds	r3, r7, r3
2000108a:	2200      	movs	r2, #0
2000108c:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
2000108e:	230f      	movs	r3, #15
20001090:	18fb      	adds	r3, r7, r3
20001092:	781b      	ldrb	r3, [r3, #0]
}
20001094:	0018      	movs	r0, r3
20001096:	46bd      	mov	sp, r7
20001098:	b004      	add	sp, #16
2000109a:	bd80      	pop	{r7, pc}

2000109c <GPIO_ReadOutputData>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F42xxx/43xxx devices.
  *                      x can be (A, B, C, D and H) to select the GPIO peripheral for STM32F401xx devices. 
  * @retval GPIO output data port value.
  */
uint16_t GPIO_ReadOutputData(GPIO_TypeDef* GPIOx)
{
2000109c:	b580      	push	{r7, lr}
2000109e:	b082      	sub	sp, #8
200010a0:	af00      	add	r7, sp, #0
200010a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  return ((uint16_t)GPIOx->ODR);
200010a4:	687b      	ldr	r3, [r7, #4]
200010a6:	695b      	ldr	r3, [r3, #20]
200010a8:	b29b      	uxth	r3, r3
}
200010aa:	0018      	movs	r0, r3
200010ac:	46bd      	mov	sp, r7
200010ae:	b002      	add	sp, #8
200010b0:	bd80      	pop	{r7, pc}

200010b2 <GPIO_SetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
200010b2:	b580      	push	{r7, lr}
200010b4:	b082      	sub	sp, #8
200010b6:	af00      	add	r7, sp, #0
200010b8:	6078      	str	r0, [r7, #4]
200010ba:	000a      	movs	r2, r1
200010bc:	1cbb      	adds	r3, r7, #2
200010be:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRL = GPIO_Pin;
200010c0:	687b      	ldr	r3, [r7, #4]
200010c2:	1cba      	adds	r2, r7, #2
200010c4:	8812      	ldrh	r2, [r2, #0]
200010c6:	831a      	strh	r2, [r3, #24]
}
200010c8:	46c0      	nop			; (mov r8, r8)
200010ca:	46bd      	mov	sp, r7
200010cc:	b002      	add	sp, #8
200010ce:	bd80      	pop	{r7, pc}

200010d0 <GPIO_ResetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
200010d0:	b580      	push	{r7, lr}
200010d2:	b082      	sub	sp, #8
200010d4:	af00      	add	r7, sp, #0
200010d6:	6078      	str	r0, [r7, #4]
200010d8:	000a      	movs	r2, r1
200010da:	1cbb      	adds	r3, r7, #2
200010dc:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRH = GPIO_Pin;
200010de:	687b      	ldr	r3, [r7, #4]
200010e0:	1cba      	adds	r2, r7, #2
200010e2:	8812      	ldrh	r2, [r2, #0]
200010e4:	835a      	strh	r2, [r3, #26]
}
200010e6:	46c0      	nop			; (mov r8, r8)
200010e8:	46bd      	mov	sp, r7
200010ea:	b002      	add	sp, #8
200010ec:	bd80      	pop	{r7, pc}

200010ee <GPIO_WriteBit>:
  *            @arg Bit_RESET: to clear the port pin
  *            @arg Bit_SET: to set the port pin
  * @retval None
  */
void GPIO_WriteBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, BitAction BitVal)
{
200010ee:	b580      	push	{r7, lr}
200010f0:	b082      	sub	sp, #8
200010f2:	af00      	add	r7, sp, #0
200010f4:	6078      	str	r0, [r7, #4]
200010f6:	0008      	movs	r0, r1
200010f8:	0011      	movs	r1, r2
200010fa:	1cbb      	adds	r3, r7, #2
200010fc:	1c02      	adds	r2, r0, #0
200010fe:	801a      	strh	r2, [r3, #0]
20001100:	1c7b      	adds	r3, r7, #1
20001102:	1c0a      	adds	r2, r1, #0
20001104:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal));

  if (BitVal != Bit_RESET)
20001106:	1c7b      	adds	r3, r7, #1
20001108:	781b      	ldrb	r3, [r3, #0]
2000110a:	2b00      	cmp	r3, #0
2000110c:	d004      	beq.n	20001118 <GPIO_WriteBit+0x2a>
  {
    GPIOx->BSRRL = GPIO_Pin;
2000110e:	687b      	ldr	r3, [r7, #4]
20001110:	1cba      	adds	r2, r7, #2
20001112:	8812      	ldrh	r2, [r2, #0]
20001114:	831a      	strh	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRRH = GPIO_Pin ;
  }
}
20001116:	e003      	b.n	20001120 <GPIO_WriteBit+0x32>
    GPIOx->BSRRH = GPIO_Pin ;
20001118:	687b      	ldr	r3, [r7, #4]
2000111a:	1cba      	adds	r2, r7, #2
2000111c:	8812      	ldrh	r2, [r2, #0]
2000111e:	835a      	strh	r2, [r3, #26]
}
20001120:	46c0      	nop			; (mov r8, r8)
20001122:	46bd      	mov	sp, r7
20001124:	b002      	add	sp, #8
20001126:	bd80      	pop	{r7, pc}

20001128 <GPIO_Write>:
  *                      x can be (A, B, C, D and H) to select the GPIO peripheral for STM32F401xx devices. 
  * @param  PortVal: specifies the value to be written to the port output data register.
  * @retval None
  */
void GPIO_Write(GPIO_TypeDef* GPIOx, uint16_t PortVal)
{
20001128:	b580      	push	{r7, lr}
2000112a:	b082      	sub	sp, #8
2000112c:	af00      	add	r7, sp, #0
2000112e:	6078      	str	r0, [r7, #4]
20001130:	000a      	movs	r2, r1
20001132:	1cbb      	adds	r3, r7, #2
20001134:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR = PortVal;
20001136:	1cbb      	adds	r3, r7, #2
20001138:	881a      	ldrh	r2, [r3, #0]
2000113a:	687b      	ldr	r3, [r7, #4]
2000113c:	615a      	str	r2, [r3, #20]
}
2000113e:	46c0      	nop			; (mov r8, r8)
20001140:	46bd      	mov	sp, r7
20001142:	b002      	add	sp, #8
20001144:	bd80      	pop	{r7, pc}

20001146 <GPIO_ToggleBits>:
  *                      x can be (A, B, C, D and H) to select the GPIO peripheral for STM32F401xx devices. 
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void GPIO_ToggleBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
20001146:	b580      	push	{r7, lr}
20001148:	b082      	sub	sp, #8
2000114a:	af00      	add	r7, sp, #0
2000114c:	6078      	str	r0, [r7, #4]
2000114e:	000a      	movs	r2, r1
20001150:	1cbb      	adds	r3, r7, #2
20001152:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR ^= GPIO_Pin;
20001154:	687b      	ldr	r3, [r7, #4]
20001156:	695a      	ldr	r2, [r3, #20]
20001158:	1cbb      	adds	r3, r7, #2
2000115a:	881b      	ldrh	r3, [r3, #0]
2000115c:	405a      	eors	r2, r3
2000115e:	687b      	ldr	r3, [r7, #4]
20001160:	615a      	str	r2, [r3, #20]
}
20001162:	46c0      	nop			; (mov r8, r8)
20001164:	46bd      	mov	sp, r7
20001166:	b002      	add	sp, #8
20001168:	bd80      	pop	{r7, pc}

2000116a <GPIO_PinAFConfig>:
  *            @arg GPIO_AF_LTDC: Connect LTDC pins to AF14 for STM32F429xx/439xx devices. 
  *            @arg GPIO_AF_EVENTOUT: Connect EVENTOUT pins to AF15
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
2000116a:	b580      	push	{r7, lr}
2000116c:	b084      	sub	sp, #16
2000116e:	af00      	add	r7, sp, #0
20001170:	6078      	str	r0, [r7, #4]
20001172:	0008      	movs	r0, r1
20001174:	0011      	movs	r1, r2
20001176:	1cbb      	adds	r3, r7, #2
20001178:	1c02      	adds	r2, r0, #0
2000117a:	801a      	strh	r2, [r3, #0]
2000117c:	1c7b      	adds	r3, r7, #1
2000117e:	1c0a      	adds	r2, r1, #0
20001180:	701a      	strb	r2, [r3, #0]
  uint32_t temp = 0x00;
20001182:	2300      	movs	r3, #0
20001184:	60fb      	str	r3, [r7, #12]
  uint32_t temp_2 = 0x00;
20001186:	2300      	movs	r3, #0
20001188:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
2000118a:	1c7b      	adds	r3, r7, #1
2000118c:	781a      	ldrb	r2, [r3, #0]
2000118e:	1cbb      	adds	r3, r7, #2
20001190:	881b      	ldrh	r3, [r3, #0]
20001192:	2107      	movs	r1, #7
20001194:	400b      	ands	r3, r1
20001196:	009b      	lsls	r3, r3, #2
20001198:	409a      	lsls	r2, r3
2000119a:	0013      	movs	r3, r2
2000119c:	60fb      	str	r3, [r7, #12]
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
2000119e:	1cbb      	adds	r3, r7, #2
200011a0:	881b      	ldrh	r3, [r3, #0]
200011a2:	08db      	lsrs	r3, r3, #3
200011a4:	b29b      	uxth	r3, r3
200011a6:	001a      	movs	r2, r3
200011a8:	687b      	ldr	r3, [r7, #4]
200011aa:	3208      	adds	r2, #8
200011ac:	0092      	lsls	r2, r2, #2
200011ae:	58d3      	ldr	r3, [r2, r3]
200011b0:	1cba      	adds	r2, r7, #2
200011b2:	8812      	ldrh	r2, [r2, #0]
200011b4:	2107      	movs	r1, #7
200011b6:	400a      	ands	r2, r1
200011b8:	0092      	lsls	r2, r2, #2
200011ba:	210f      	movs	r1, #15
200011bc:	4091      	lsls	r1, r2
200011be:	000a      	movs	r2, r1
200011c0:	43d2      	mvns	r2, r2
200011c2:	1cb9      	adds	r1, r7, #2
200011c4:	8809      	ldrh	r1, [r1, #0]
200011c6:	08c9      	lsrs	r1, r1, #3
200011c8:	b289      	uxth	r1, r1
200011ca:	0008      	movs	r0, r1
200011cc:	401a      	ands	r2, r3
200011ce:	0011      	movs	r1, r2
200011d0:	687b      	ldr	r3, [r7, #4]
200011d2:	0002      	movs	r2, r0
200011d4:	3208      	adds	r2, #8
200011d6:	0092      	lsls	r2, r2, #2
200011d8:	50d1      	str	r1, [r2, r3]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
200011da:	1cbb      	adds	r3, r7, #2
200011dc:	881b      	ldrh	r3, [r3, #0]
200011de:	08db      	lsrs	r3, r3, #3
200011e0:	b29b      	uxth	r3, r3
200011e2:	001a      	movs	r2, r3
200011e4:	687b      	ldr	r3, [r7, #4]
200011e6:	3208      	adds	r2, #8
200011e8:	0092      	lsls	r2, r2, #2
200011ea:	58d3      	ldr	r3, [r2, r3]
200011ec:	68fa      	ldr	r2, [r7, #12]
200011ee:	4313      	orrs	r3, r2
200011f0:	60bb      	str	r3, [r7, #8]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
200011f2:	1cbb      	adds	r3, r7, #2
200011f4:	881b      	ldrh	r3, [r3, #0]
200011f6:	08db      	lsrs	r3, r3, #3
200011f8:	b29b      	uxth	r3, r3
200011fa:	001a      	movs	r2, r3
200011fc:	687b      	ldr	r3, [r7, #4]
200011fe:	3208      	adds	r2, #8
20001200:	0092      	lsls	r2, r2, #2
20001202:	68b9      	ldr	r1, [r7, #8]
20001204:	50d1      	str	r1, [r2, r3]
}
20001206:	46c0      	nop			; (mov r8, r8)
20001208:	46bd      	mov	sp, r7
2000120a:	b004      	add	sp, #16
2000120c:	bd80      	pop	{r7, pc}
2000120e:	46c0      	nop			; (mov r8, r8)

20001210 <app_init>:

void app_init(){
20001210:	b580      	push	{r7, lr}
20001212:	b082      	sub	sp, #8
20001214:	af00      	add	r7, sp, #0
/*  Function used to set the GPIO configuration to the default reset state ****/
	GPIO_InitTypeDef init;
	
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
20001216:	2101      	movs	r1, #1
20001218:	2001      	movs	r0, #1
2000121a:	f7ff fac9 	bl	200007b0 <RCC_AHB1PeriphClockCmd>
	GPIO_StructInit(&init);
2000121e:	003b      	movs	r3, r7
20001220:	0018      	movs	r0, r3
20001222:	f7ff feb1 	bl	20000f88 <GPIO_StructInit>
	
	init.GPIO_Pin = GPIO_Pin_1;
20001226:	003b      	movs	r3, r7
20001228:	2202      	movs	r2, #2
2000122a:	601a      	str	r2, [r3, #0]
	init.GPIO_Mode = GPIO_Mode_OUT;
2000122c:	003b      	movs	r3, r7
2000122e:	2201      	movs	r2, #1
20001230:	711a      	strb	r2, [r3, #4]
	init.GPIO_OType = GPIO_OType_PP;
20001232:	003b      	movs	r3, r7
20001234:	2200      	movs	r2, #0
20001236:	719a      	strb	r2, [r3, #6]
	
	
	GPIO_Init(GPIOA,&init);
20001238:	003b      	movs	r3, r7
2000123a:	4a0e      	ldr	r2, [pc, #56]	; (20001274 <app_init+0x64>)
2000123c:	0019      	movs	r1, r3
2000123e:	0010      	movs	r0, r2
20001240:	f7ff fe16 	bl	20000e70 <GPIO_Init>

//konfigurerar inport
	GPIO_StructInit(&init);
20001244:	003b      	movs	r3, r7
20001246:	0018      	movs	r0, r3
20001248:	f7ff fe9e 	bl	20000f88 <GPIO_StructInit>
	init.GPIO_Pin = GPIO_Pin_2;
2000124c:	003b      	movs	r3, r7
2000124e:	2204      	movs	r2, #4
20001250:	601a      	str	r2, [r3, #0]
	init.GPIO_Mode = GPIO_Mode_IN;
20001252:	003b      	movs	r3, r7
20001254:	2200      	movs	r2, #0
20001256:	711a      	strb	r2, [r3, #4]
	init.GPIO_PuPd = GPIO_PuPd_UP;
20001258:	003b      	movs	r3, r7
2000125a:	2201      	movs	r2, #1
2000125c:	71da      	strb	r2, [r3, #7]
	GPIO_Init(GPIOA,&init);
2000125e:	003b      	movs	r3, r7
20001260:	4a04      	ldr	r2, [pc, #16]	; (20001274 <app_init+0x64>)
20001262:	0019      	movs	r1, r3
20001264:	0010      	movs	r0, r2
20001266:	f7ff fe03 	bl	20000e70 <GPIO_Init>
}
2000126a:	46c0      	nop			; (mov r8, r8)
2000126c:	46bd      	mov	sp, r7
2000126e:	b002      	add	sp, #8
20001270:	bd80      	pop	{r7, pc}
20001272:	46c0      	nop			; (mov r8, r8)
20001274:	40020000 	andmi	r0, r2, r0

20001278 <main>:
void main(void)
{
20001278:	b580      	push	{r7, lr}
2000127a:	af00      	add	r7, sp, #0
	app_init();
2000127c:	f7ff ffc8 	bl	20001210 <app_init>
	
	while (1) {
		if (GPIO_ReadInputData(GPIOA) & (1<<2)) {
20001280:	4b0a      	ldr	r3, [pc, #40]	; (200012ac <main+0x34>)
20001282:	0018      	movs	r0, r3
20001284:	f7ff fede 	bl	20001044 <GPIO_ReadInputData>
20001288:	0003      	movs	r3, r0
2000128a:	001a      	movs	r2, r3
2000128c:	2304      	movs	r3, #4
2000128e:	4013      	ands	r3, r2
20001290:	d005      	beq.n	2000129e <main+0x26>
			GPIO_SetBits(GPIOA,GPIO_Pin_1);
20001292:	4b06      	ldr	r3, [pc, #24]	; (200012ac <main+0x34>)
20001294:	2102      	movs	r1, #2
20001296:	0018      	movs	r0, r3
20001298:	f7ff ff0b 	bl	200010b2 <GPIO_SetBits>
2000129c:	e7f0      	b.n	20001280 <main+0x8>
		} else {
			GPIO_ResetBits(GPIOA,GPIO_Pin_1);
2000129e:	4b03      	ldr	r3, [pc, #12]	; (200012ac <main+0x34>)
200012a0:	2102      	movs	r1, #2
200012a2:	0018      	movs	r0, r3
200012a4:	f7ff ff14 	bl	200010d0 <GPIO_ResetBits>
		if (GPIO_ReadInputData(GPIOA) & (1<<2)) {
200012a8:	e7ea      	b.n	20001280 <main+0x8>
200012aa:	46c0      	nop			; (mov r8, r8)
200012ac:	40020000 	andmi	r0, r2, r0

200012b0 <__udivsi3>:
200012b0:	2200      	movs	r2, #0
200012b2:	0843      	lsrs	r3, r0, #1
200012b4:	428b      	cmp	r3, r1
200012b6:	d374      	bcc.n	200013a2 <__udivsi3+0xf2>
200012b8:	0903      	lsrs	r3, r0, #4
200012ba:	428b      	cmp	r3, r1
200012bc:	d35f      	bcc.n	2000137e <__udivsi3+0xce>
200012be:	0a03      	lsrs	r3, r0, #8
200012c0:	428b      	cmp	r3, r1
200012c2:	d344      	bcc.n	2000134e <__udivsi3+0x9e>
200012c4:	0b03      	lsrs	r3, r0, #12
200012c6:	428b      	cmp	r3, r1
200012c8:	d328      	bcc.n	2000131c <__udivsi3+0x6c>
200012ca:	0c03      	lsrs	r3, r0, #16
200012cc:	428b      	cmp	r3, r1
200012ce:	d30d      	bcc.n	200012ec <__udivsi3+0x3c>
200012d0:	22ff      	movs	r2, #255	; 0xff
200012d2:	0209      	lsls	r1, r1, #8
200012d4:	ba12      	rev	r2, r2
200012d6:	0c03      	lsrs	r3, r0, #16
200012d8:	428b      	cmp	r3, r1
200012da:	d302      	bcc.n	200012e2 <__udivsi3+0x32>
200012dc:	1212      	asrs	r2, r2, #8
200012de:	0209      	lsls	r1, r1, #8
200012e0:	d065      	beq.n	200013ae <__udivsi3+0xfe>
200012e2:	0b03      	lsrs	r3, r0, #12
200012e4:	428b      	cmp	r3, r1
200012e6:	d319      	bcc.n	2000131c <__udivsi3+0x6c>
200012e8:	e000      	b.n	200012ec <__udivsi3+0x3c>
200012ea:	0a09      	lsrs	r1, r1, #8
200012ec:	0bc3      	lsrs	r3, r0, #15
200012ee:	428b      	cmp	r3, r1
200012f0:	d301      	bcc.n	200012f6 <__udivsi3+0x46>
200012f2:	03cb      	lsls	r3, r1, #15
200012f4:	1ac0      	subs	r0, r0, r3
200012f6:	4152      	adcs	r2, r2
200012f8:	0b83      	lsrs	r3, r0, #14
200012fa:	428b      	cmp	r3, r1
200012fc:	d301      	bcc.n	20001302 <__udivsi3+0x52>
200012fe:	038b      	lsls	r3, r1, #14
20001300:	1ac0      	subs	r0, r0, r3
20001302:	4152      	adcs	r2, r2
20001304:	0b43      	lsrs	r3, r0, #13
20001306:	428b      	cmp	r3, r1
20001308:	d301      	bcc.n	2000130e <__udivsi3+0x5e>
2000130a:	034b      	lsls	r3, r1, #13
2000130c:	1ac0      	subs	r0, r0, r3
2000130e:	4152      	adcs	r2, r2
20001310:	0b03      	lsrs	r3, r0, #12
20001312:	428b      	cmp	r3, r1
20001314:	d301      	bcc.n	2000131a <__udivsi3+0x6a>
20001316:	030b      	lsls	r3, r1, #12
20001318:	1ac0      	subs	r0, r0, r3
2000131a:	4152      	adcs	r2, r2
2000131c:	0ac3      	lsrs	r3, r0, #11
2000131e:	428b      	cmp	r3, r1
20001320:	d301      	bcc.n	20001326 <__udivsi3+0x76>
20001322:	02cb      	lsls	r3, r1, #11
20001324:	1ac0      	subs	r0, r0, r3
20001326:	4152      	adcs	r2, r2
20001328:	0a83      	lsrs	r3, r0, #10
2000132a:	428b      	cmp	r3, r1
2000132c:	d301      	bcc.n	20001332 <__udivsi3+0x82>
2000132e:	028b      	lsls	r3, r1, #10
20001330:	1ac0      	subs	r0, r0, r3
20001332:	4152      	adcs	r2, r2
20001334:	0a43      	lsrs	r3, r0, #9
20001336:	428b      	cmp	r3, r1
20001338:	d301      	bcc.n	2000133e <__udivsi3+0x8e>
2000133a:	024b      	lsls	r3, r1, #9
2000133c:	1ac0      	subs	r0, r0, r3
2000133e:	4152      	adcs	r2, r2
20001340:	0a03      	lsrs	r3, r0, #8
20001342:	428b      	cmp	r3, r1
20001344:	d301      	bcc.n	2000134a <__udivsi3+0x9a>
20001346:	020b      	lsls	r3, r1, #8
20001348:	1ac0      	subs	r0, r0, r3
2000134a:	4152      	adcs	r2, r2
2000134c:	d2cd      	bcs.n	200012ea <__udivsi3+0x3a>
2000134e:	09c3      	lsrs	r3, r0, #7
20001350:	428b      	cmp	r3, r1
20001352:	d301      	bcc.n	20001358 <__udivsi3+0xa8>
20001354:	01cb      	lsls	r3, r1, #7
20001356:	1ac0      	subs	r0, r0, r3
20001358:	4152      	adcs	r2, r2
2000135a:	0983      	lsrs	r3, r0, #6
2000135c:	428b      	cmp	r3, r1
2000135e:	d301      	bcc.n	20001364 <__udivsi3+0xb4>
20001360:	018b      	lsls	r3, r1, #6
20001362:	1ac0      	subs	r0, r0, r3
20001364:	4152      	adcs	r2, r2
20001366:	0943      	lsrs	r3, r0, #5
20001368:	428b      	cmp	r3, r1
2000136a:	d301      	bcc.n	20001370 <__udivsi3+0xc0>
2000136c:	014b      	lsls	r3, r1, #5
2000136e:	1ac0      	subs	r0, r0, r3
20001370:	4152      	adcs	r2, r2
20001372:	0903      	lsrs	r3, r0, #4
20001374:	428b      	cmp	r3, r1
20001376:	d301      	bcc.n	2000137c <__udivsi3+0xcc>
20001378:	010b      	lsls	r3, r1, #4
2000137a:	1ac0      	subs	r0, r0, r3
2000137c:	4152      	adcs	r2, r2
2000137e:	08c3      	lsrs	r3, r0, #3
20001380:	428b      	cmp	r3, r1
20001382:	d301      	bcc.n	20001388 <__udivsi3+0xd8>
20001384:	00cb      	lsls	r3, r1, #3
20001386:	1ac0      	subs	r0, r0, r3
20001388:	4152      	adcs	r2, r2
2000138a:	0883      	lsrs	r3, r0, #2
2000138c:	428b      	cmp	r3, r1
2000138e:	d301      	bcc.n	20001394 <__udivsi3+0xe4>
20001390:	008b      	lsls	r3, r1, #2
20001392:	1ac0      	subs	r0, r0, r3
20001394:	4152      	adcs	r2, r2
20001396:	0843      	lsrs	r3, r0, #1
20001398:	428b      	cmp	r3, r1
2000139a:	d301      	bcc.n	200013a0 <__udivsi3+0xf0>
2000139c:	004b      	lsls	r3, r1, #1
2000139e:	1ac0      	subs	r0, r0, r3
200013a0:	4152      	adcs	r2, r2
200013a2:	1a41      	subs	r1, r0, r1
200013a4:	d200      	bcs.n	200013a8 <__udivsi3+0xf8>
200013a6:	4601      	mov	r1, r0
200013a8:	4152      	adcs	r2, r2
200013aa:	4610      	mov	r0, r2
200013ac:	4770      	bx	lr
200013ae:	e7ff      	b.n	200013b0 <__udivsi3+0x100>
200013b0:	b501      	push	{r0, lr}
200013b2:	2000      	movs	r0, #0
200013b4:	f000 f806 	bl	200013c4 <__aeabi_idiv0>
200013b8:	bd02      	pop	{r1, pc}
200013ba:	46c0      	nop			; (mov r8, r8)

200013bc <__aeabi_uidivmod>:
200013bc:	2900      	cmp	r1, #0
200013be:	d0f7      	beq.n	200013b0 <__udivsi3+0x100>
200013c0:	e776      	b.n	200012b0 <__udivsi3>
200013c2:	4770      	bx	lr

200013c4 <__aeabi_idiv0>:
200013c4:	4770      	bx	lr
200013c6:	46c0      	nop			; (mov r8, r8)

200013c8 <APBAHBPrescTable>:
200013c8:	00000000 	andeq	r0, r0, r0
200013cc:	04030201 	streq	r0, [r3], #-513	; 0xfffffdff
200013d0:	04030201 	streq	r0, [r3], #-513	; 0xfffffdff
200013d4:	09080706 	stmdbeq	r8, {r1, r2, r8, r9, sl}

Disassembly of section .debug_info:

00000000 <.debug_info>:
       0:	00000e5f 	andeq	r0, r0, pc, asr lr
       4:	00000004 	andeq	r0, r0, r4
       8:	01040000 	mrseq	r0, (UNDEF: 4)
       c:	000004bd 			; <UNDEFINED> instruction: 0x000004bd
      10:	0002360c 	andeq	r3, r2, ip, lsl #12
      14:	00091200 	andeq	r1, r9, r0, lsl #4
      18:	00001000 	andeq	r1, r0, r0
      1c:	000cf020 	andeq	pc, ip, r0, lsr #32
      20:	00000000 	andeq	r0, r0, r0
      24:	06010200 	streq	r0, [r1], -r0, lsl #4
      28:	00000855 	andeq	r0, r0, r5, asr r8
      2c:	00006c03 	andeq	r6, r0, r3, lsl #24
      30:	372b0200 	strcc	r0, [fp, -r0, lsl #4]!
      34:	02000000 	andeq	r0, r0, #0
      38:	08530801 	ldmdaeq	r3, {r0, fp}^
      3c:	02020000 	andeq	r0, r2, #0
      40:	0006b405 	andeq	fp, r6, r5, lsl #8
      44:	07e50300 	strbeq	r0, [r5, r0, lsl #6]!
      48:	39020000 	stmdbcc	r2, {}	; <UNPREDICTABLE>
      4c:	00000050 	andeq	r0, r0, r0, asr r0
      50:	04070202 	streq	r0, [r7], #-514	; 0xfffffdfe
      54:	03000004 	movweq	r0, #4
      58:	0000080c 	andeq	r0, r0, ip, lsl #16
      5c:	00624d02 	rsbeq	r4, r2, r2, lsl #26
      60:	04020000 	streq	r0, [r2], #-0
      64:	00020e05 	andeq	r0, r2, r5, lsl #28
      68:	02d70300 	sbcseq	r0, r7, #0, 6
      6c:	4f020000 	svcmi	0x00020000
      70:	00000074 	andeq	r0, r0, r4, ror r0
      74:	e0070402 	and	r0, r7, r2, lsl #8
      78:	02000000 	andeq	r0, r0, #0
      7c:	02090508 	andeq	r0, r9, #8, 10	; 0x2000000
      80:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
      84:	0000db07 	andeq	sp, r0, r7, lsl #22
      88:	05040400 	streq	r0, [r4, #-1024]	; 0xfffffc00
      8c:	00746e69 	rsbseq	r6, r4, r9, ror #28
      90:	e5070402 	str	r0, [r7, #-1026]	; 0xfffffbfe
      94:	03000000 	movweq	r0, #0
      98:	0000006e 	andeq	r0, r0, lr, rrx
      9c:	002c1803 	eoreq	r1, ip, r3, lsl #16
      a0:	97050000 	strls	r0, [r5, -r0]
      a4:	06000000 	streq	r0, [r0], -r0
      a8:	000000a2 	andeq	r0, r0, r2, lsr #1
      ac:	0007e703 	andeq	lr, r7, r3, lsl #14
      b0:	45240300 	strmi	r0, [r4, #-768]!	; 0xfffffd00
      b4:	03000000 	movweq	r0, #0
      b8:	0000080e 	andeq	r0, r0, lr, lsl #16
      bc:	00572c03 	subseq	r2, r7, r3, lsl #24
      c0:	b7060000 	strlt	r0, [r6, -r0]
      c4:	03000000 	movweq	r0, #0
      c8:	000002d9 	ldrdeq	r0, [r0], -r9
      cc:	00693003 	rsbeq	r3, r9, r3
      d0:	c7060000 	strgt	r0, [r6, -r0]
      d4:	07000000 	streq	r0, [r0, -r0]
      d8:	000000c7 	andeq	r0, r0, r7, asr #1
      dc:	000000e7 	andeq	r0, r0, r7, ror #1
      e0:	00009008 	andeq	r9, r0, r8
      e4:	09000100 	stmdbeq	r0, {r8}
      e8:	00000697 	muleq	r0, r7, r6
      ec:	c206fa04 	andgt	pc, r6, #4, 20	; 0x4000
      f0:	0a000000 	beq	f8 <startup-0x1fffff08>
      f4:	0000035d 	andeq	r0, r0, sp, asr r3
      f8:	00c73b05 	sbceq	r3, r7, r5, lsl #22
      fc:	070b0000 	streq	r0, [fp, -r0]
     100:	00003701 	andeq	r3, r0, r1, lsl #14
     104:	035d0600 	cmpeq	sp, #0, 12
     108:	00000119 	andeq	r0, r0, r9, lsl r1
     10c:	000a4c0c 	andeq	r4, sl, ip, lsl #24
     110:	530d0000 	movwpl	r0, #53248	; 0xd000
     114:	01005445 	tsteq	r0, r5, asr #8
     118:	065f0e00 	ldrbeq	r0, [pc], -r0, lsl #28
     11c:	5d060000 	stcpl	0, cr0, [r6, #-0]
     120:	0000fe03 	andeq	pc, r0, r3, lsl #28
     124:	081d0e00 	ldmdaeq	sp, {r9, sl, fp}
     128:	5d060000 	stcpl	0, cr0, [r6, #-0]
     12c:	0000fe03 	andeq	pc, r0, r3, lsl #28
     130:	01070b00 	tsteq	r7, r0, lsl #22
     134:	00000037 	andeq	r0, r0, r7, lsr r0
     138:	4c035f06 	stcmi	15, cr5, [r3], {6}
     13c:	0c000001 	stceq	0, cr0, [r0], {1}
     140:	00000355 	andeq	r0, r0, r5, asr r3
     144:	01950c00 	orrseq	r0, r5, r0, lsl #24
     148:	00010000 	andeq	r0, r1, r0
     14c:	0005b40e 	andeq	fp, r5, lr, lsl #8
     150:	035f0600 	cmpeq	pc, #0, 12
     154:	00000131 	andeq	r0, r0, r1, lsr r1
     158:	3701070b 	strcc	r0, [r1, -fp, lsl #14]
     15c:	06000000 	streq	r0, [r0], -r0
     160:	01730362 	cmneq	r3, r2, ror #6
     164:	b70c0000 	strlt	r0, [ip, -r0]
     168:	00000004 	andeq	r0, r0, r4
     16c:	00090a0c 	andeq	r0, r9, ip, lsl #20
     170:	0e000100 	adfeqs	f0, f0, f0
     174:	000002e2 	andeq	r0, r0, r2, ror #5
     178:	58036206 	stmdapl	r3, {r1, r2, r9, sp, lr}
     17c:	0f000001 	svceq	0x00000001
     180:	06640698 			; <UNDEFINED> instruction: 0x06640698
     184:	00000342 	andeq	r0, r0, r2, asr #6
     188:	00524310 	subseq	r4, r2, r0, lsl r3
     18c:	d2066606 	andle	r6, r6, #6291456	; 0x600000
     190:	00000000 	andeq	r0, r0, r0
     194:	0002bc11 	andeq	fp, r2, r1, lsl ip
     198:	06670600 	strbteq	r0, [r7], -r0, lsl #12
     19c:	000000d2 	ldrdeq	r0, [r0], -r2
     1a0:	060d1104 	streq	r1, [sp], -r4, lsl #2
     1a4:	68060000 	stmdavs	r6, {}	; <UNPREDICTABLE>
     1a8:	0000d206 	andeq	sp, r0, r6, lsl #4
     1ac:	43100800 	tstmi	r0, #0, 16
     1b0:	06005249 	streq	r5, [r0], -r9, asr #4
     1b4:	00d20669 	sbcseq	r0, r2, r9, ror #12
     1b8:	110c0000 	mrsne	r0, (UNDEF: 12)
     1bc:	00000155 	andeq	r0, r0, r5, asr r1
     1c0:	d2066a06 	andle	r6, r6, #24576	; 0x6000
     1c4:	10000000 	andne	r0, r0, r0
     1c8:	0007f011 	andeq	pc, r7, r1, lsl r0	; <UNPREDICTABLE>
     1cc:	066b0600 	strbteq	r0, [fp], -r0, lsl #12
     1d0:	000000d2 	ldrdeq	r0, [r0], -r2
     1d4:	06fc1114 	usateq	r1, #28, r4, lsl #2
     1d8:	6c060000 	stcvs	0, cr0, [r6], {-0}
     1dc:	0000d206 	andeq	sp, r0, r6, lsl #4
     1e0:	12111800 	andsne	r1, r1, #0, 16
     1e4:	06000006 	streq	r0, [r0], -r6
     1e8:	00c7066d 	sbceq	r0, r7, sp, ror #12
     1ec:	111c0000 	tstne	ip, r0
     1f0:	000008c4 	andeq	r0, r0, r4, asr #17
     1f4:	d2066e06 	andle	r6, r6, #6, 28	; 0x60
     1f8:	20000000 	andcs	r0, r0, r0
     1fc:	00019c11 	andeq	r9, r1, r1, lsl ip
     200:	066f0600 	strbteq	r0, [pc], -r0, lsl #12
     204:	000000d2 	ldrdeq	r0, [r0], -r2
     208:	061c1124 	ldreq	r1, [ip], -r4, lsr #2
     20c:	70060000 	andvc	r0, r6, r0
     210:	0000d706 	andeq	sp, r0, r6, lsl #14
     214:	75112800 	ldrvc	r2, [r1, #-2048]	; 0xfffff800
     218:	06000009 	streq	r0, [r0], -r9
     21c:	00d20671 	sbcseq	r0, r2, r1, ror r6
     220:	11300000 	teqne	r0, r0
     224:	0000082e 	andeq	r0, r0, lr, lsr #16
     228:	d2067206 	andle	r7, r6, #1610612736	; 0x60000000
     22c:	34000000 	strcc	r0, [r0], #-0
     230:	00059011 	andeq	r9, r5, r1, lsl r0
     234:	06730600 	ldrbteq	r0, [r3], -r0, lsl #12
     238:	000000d2 	ldrdeq	r0, [r0], -r2
     23c:	06261138 			; <UNDEFINED> instruction: 0x06261138
     240:	74060000 	strvc	r0, [r6], #-0
     244:	0000c706 	andeq	ip, r0, r6, lsl #14
     248:	26113c00 	ldrcs	r3, [r1], -r0, lsl #24
     24c:	06000008 	streq	r0, [r0], -r8
     250:	00d20675 	sbcseq	r0, r2, r5, ror r6
     254:	11400000 	mrsne	r0, (UNDEF: 64)
     258:	000006f4 	strdeq	r0, [r0], -r4
     25c:	d2067606 	andle	r7, r6, #6291456	; 0x600000
     260:	44000000 	strmi	r0, [r0], #-0
     264:	00063011 	andeq	r3, r6, r1, lsl r0
     268:	06770600 	ldrbteq	r0, [r7], -r0, lsl #12
     26c:	000000d7 	ldrdeq	r0, [r0], -r7
     270:	010d1148 	tsteq	sp, r8, asr #2
     274:	78060000 	stmdavc	r6, {}	; <UNPREDICTABLE>
     278:	0000d206 	andeq	sp, r0, r6, lsl #4
     27c:	aa115000 	bge	454284 <startup-0x1fbabd7c>
     280:	06000005 	streq	r0, [r0], -r5
     284:	00d20679 	sbcseq	r0, r2, r9, ror r6
     288:	11540000 	cmpne	r4, r0
     28c:	000008ba 			; <UNDEFINED> instruction: 0x000008ba
     290:	d2067a06 	andle	r7, r6, #24576	; 0x6000
     294:	58000000 	stmdapl	r0, {}	; <UNPREDICTABLE>
     298:	00063a11 	andeq	r3, r6, r1, lsl sl
     29c:	067b0600 	ldrbteq	r0, [fp], -r0, lsl #12
     2a0:	000000c7 	andeq	r0, r0, r7, asr #1
     2a4:	0011115c 	andseq	r1, r1, ip, asr r1
     2a8:	7c060000 	stcvc	0, cr0, [r6], {-0}
     2ac:	0000d206 	andeq	sp, r0, r6, lsl #4
     2b0:	6a116000 	bvs	4582b8 <startup-0x1fba7d48>
     2b4:	06000004 	streq	r0, [r0], -r4
     2b8:	00d2067d 	sbcseq	r0, r2, sp, ror r6
     2bc:	11640000 	cmnne	r4, r0
     2c0:	00000644 	andeq	r0, r0, r4, asr #12
     2c4:	d7067e06 	strle	r7, [r6, -r6, lsl #28]
     2c8:	68000000 	stmdavs	r0, {}	; <UNPREDICTABLE>
     2cc:	0008e111 	andeq	lr, r8, r1, lsl r1
     2d0:	067f0600 	ldrbteq	r0, [pc], -r0, lsl #12
     2d4:	000000d2 	ldrdeq	r0, [r0], -r2
     2d8:	53431070 	movtpl	r1, #12400	; 0x3070
     2dc:	80060052 	andhi	r0, r6, r2, asr r0
     2e0:	0000d206 	andeq	sp, r0, r6, lsl #4
     2e4:	4e117400 	cfmulsmi	mvf7, mvf1, mvf0
     2e8:	06000006 	streq	r0, [r0], -r6
     2ec:	00d70681 	sbcseq	r0, r7, r1, lsl #13
     2f0:	11780000 	cmnne	r8, r0
     2f4:	000008b4 			; <UNDEFINED> instruction: 0x000008b4
     2f8:	d2068206 	andle	r8, r6, #1610612736	; 0x60000000
     2fc:	80000000 	andhi	r0, r0, r0
     300:	00041711 	andeq	r1, r4, r1, lsl r7
     304:	06830600 	streq	r0, [r3], r0, lsl #12
     308:	000000d2 	ldrdeq	r0, [r0], -r2
     30c:	06071184 	streq	r1, [r7], -r4, lsl #3
     310:	84060000 	strhi	r0, [r6], #-0
     314:	0000d206 	andeq	sp, r0, r6, lsl #4
     318:	3f118800 	svccc	0x00118800
     31c:	06000001 	streq	r0, [r0], -r1
     320:	00d20685 	sbcseq	r0, r2, r5, lsl #13
     324:	118c0000 	orrne	r0, ip, r0
     328:	000008d8 	ldrdeq	r0, [r0], -r8
     32c:	d2068606 	andle	r8, r6, #6291456	; 0x600000
     330:	90000000 	andls	r0, r0, r0
     334:	00015e11 	andeq	r5, r1, r1, lsl lr
     338:	06870600 	streq	r0, [r7], r0, lsl #12
     33c:	000000d2 	ldrdeq	r0, [r0], -r2
     340:	9e0e0094 	mcrls	0, 0, r0, cr14, cr4, {4}
     344:	06000003 	streq	r0, [r0], -r3
     348:	017f0689 	cmneq	pc, r9, lsl #13
     34c:	10120000 	andsne	r0, r2, r0
     350:	03873007 	orreq	r3, r7, #7
     354:	51130000 	tstpl	r3, r0
     358:	07000000 	streq	r0, [r0, -r0]
     35c:	0000c732 	andeq	ip, r0, r2, lsr r7
     360:	30130000 	andscc	r0, r3, r0
     364:	07000003 	streq	r0, [r0, -r3]
     368:	0000c733 	andeq	ip, r0, r3, lsr r7
     36c:	6b130400 	blvs	4c1374 <startup-0x1fb3ec8c>
     370:	07000007 	streq	r0, [r0, -r7]
     374:	0000c734 	andeq	ip, r0, r4, lsr r7
     378:	6e130800 	cdpvs	8, 1, cr0, cr3, cr0, {0}
     37c:	07000001 	streq	r0, [r0, -r1]
     380:	0000c735 	andeq	ip, r0, r5, lsr r7
     384:	03000c00 	movweq	r0, #3072	; 0xc00
     388:	00000963 	andeq	r0, r0, r3, ror #18
     38c:	034e3607 	movteq	r3, #58887	; 0xe607
     390:	a7070000 	strge	r0, [r7, -r0]
     394:	a2000000 	andge	r0, r0, #0
     398:	08000003 	stmdaeq	r0, {r0, r1}
     39c:	00000090 	muleq	r0, r0, r0
     3a0:	9205000f 	andls	r0, r5, #15
     3a4:	06000003 	streq	r0, [r0], -r3
     3a8:	000003a2 	andeq	r0, r0, r2, lsr #7
     3ac:	00077b14 	andeq	r7, r7, r4, lsl fp
     3b0:	a7990100 	ldrge	r0, [r9, r0, lsl #2]
     3b4:	05000003 	streq	r0, [r0, #-3]
     3b8:	0013c803 	andseq	ip, r3, r3, lsl #16
     3bc:	00c51520 	sbceq	r1, r5, r0, lsr #10
     3c0:	5e010000 	cdppl	0, 0, cr0, cr1, cr0, {0}
     3c4:	000ce00c 	andeq	lr, ip, ip
     3c8:	00002020 	andeq	r2, r0, r0, lsr #32
     3cc:	e39c0100 	orrs	r0, ip, #0, 2
     3d0:	16000003 	strne	r0, [r0], -r3
     3d4:	000000f2 	strdeq	r0, [r0], -r2
     3d8:	970c5e01 	strls	r5, [ip, -r1, lsl #28]
     3dc:	02000000 	andeq	r0, r0, #0
     3e0:	17007791 			; <UNDEFINED> instruction: 0x17007791
     3e4:	00000816 	andeq	r0, r0, r6, lsl r8
     3e8:	250c3c01 	strcs	r3, [ip, #-3073]	; 0xfffff3ff
     3ec:	9c000001 	stcls	0, cr0, [r0], {1}
     3f0:	4420000c 	strtmi	r0, [r0], #-12
     3f4:	01000000 	mrseq	r0, (UNDEF: 0)
     3f8:	00041c9c 	muleq	r4, ip, ip
     3fc:	00f21600 	rscseq	r1, r2, r0, lsl #12
     400:	3c010000 	stccc	0, cr0, [r1], {-0}
     404:	0000970c 	andeq	r9, r0, ip, lsl #14
     408:	6f910200 	svcvs	0x00910200
     40c:	00032618 	andeq	r2, r3, r8, lsl r6
     410:	0c3e0100 	ldfeqs	f0, [lr], #-0
     414:	00000125 	andeq	r0, r0, r5, lsr #2
     418:	00779102 	rsbseq	r9, r7, r2, lsl #2
     41c:	00014719 	andeq	r4, r1, r9, lsl r7
     420:	0c280100 	stfeqs	f0, [r8], #-0
     424:	20000c80 	andcs	r0, r0, r0, lsl #25
     428:	0000001c 	andeq	r0, r0, ip, lsl r0
     42c:	58179c01 	ldmdapl	r7, {r0, sl, fp, ip, pc}
     430:	01000006 	tsteq	r0, r6
     434:	01190bfb 			; <UNDEFINED> instruction: 0x01190bfb
     438:	0bfc0000 	bleq	fff00440 <APBAHBPrescTable+0xdfeff078>
     43c:	00842000 	addeq	r2, r4, r0
     440:	9c010000 	stcls	0, cr0, [r1], {-0}
     444:	00000485 	andeq	r0, r0, r5, lsl #9
     448:	00036d16 	andeq	r6, r3, r6, lsl sp
     44c:	0bfb0100 	bleq	ffec0854 <APBAHBPrescTable+0xdfebf48c>
     450:	00000097 	muleq	r0, r7, r0
     454:	1a679102 	bne	19e4864 <startup-0x1e61b79c>
     458:	00706d74 	rsbseq	r6, r0, r4, ror sp
     45c:	c70bfd01 	strgt	pc, [fp, -r1, lsl #26]
     460:	02000000 	andeq	r0, r0, #0
     464:	47186c91 			; <UNDEFINED> instruction: 0x47186c91
     468:	01000000 	mrseq	r0, (UNDEF: 0)
     46c:	00c70bfe 	strdeq	r0, [r7], #190	; 0xbe
     470:	91020000 	mrsls	r0, (UNDEF: 2)
     474:	03261874 			; <UNDEFINED> instruction: 0x03261874
     478:	ff010000 			; <UNDEFINED> instruction: 0xff010000
     47c:	0001190b 	andeq	r1, r1, fp, lsl #18
     480:	73910200 	orrsvc	r0, r1, #0, 4
     484:	08fd1500 	ldmeq	sp!, {r8, sl, ip}^
     488:	d6010000 	strle	r0, [r1], -r0
     48c:	000bac0b 	andeq	sl, fp, fp, lsl #24
     490:	00005020 	andeq	r5, r0, r0, lsr #32
     494:	ba9c0100 	blt	fe70089c <APBAHBPrescTable+0xde6ff4d4>
     498:	16000004 	strne	r0, [r0], -r4
     49c:	000000f2 	strdeq	r0, [r0], -r2
     4a0:	970bd601 	strls	sp, [fp, -r1, lsl #12]
     4a4:	02000000 	andeq	r0, r0, #0
     4a8:	b3167791 	tstlt	r6, #38010880	; 0x2440000
     4ac:	01000002 	tsteq	r0, r2
     4b0:	014c0bd6 	ldrdeq	r0, [ip, #-182]	; 0xffffff4a
     4b4:	91020000 	mrsls	r0, (UNDEF: 2)
     4b8:	98150076 	ldmdals	r5, {r1, r2, r4, r5, r6}
     4bc:	01000005 	tsteq	r0, r5
     4c0:	0b700a9e 	bleq	1c02f40 <startup-0x1e3fd0c0>
     4c4:	003c2000 	eorseq	r2, ip, r0
     4c8:	9c010000 	stcls	0, cr0, [r1], {-0}
     4cc:	000004e0 	andeq	r0, r0, r0, ror #9
     4d0:	00070516 	andeq	r0, r7, r6, lsl r5
     4d4:	0a9e0100 	beq	fe7808dc <APBAHBPrescTable+0xde77f514>
     4d8:	00000097 	muleq	r0, r7, r0
     4dc:	00779102 	rsbseq	r9, r7, r2, lsl #2
     4e0:	00012215 	andeq	r2, r1, r5, lsl r2
     4e4:	0a860100 	beq	fe1808ec <APBAHBPrescTable+0xde17f524>
     4e8:	20000b30 	andcs	r0, r0, r0, lsr fp
     4ec:	00000040 	andeq	r0, r0, r0, asr #32
     4f0:	05159c01 	ldreq	r9, [r5, #-3073]	; 0xfffff3ff
     4f4:	70160000 	andsvc	r0, r6, r0
     4f8:	01000008 	tsteq	r0, r8
     4fc:	00c70a86 	sbceq	r0, r7, r6, lsl #21
     500:	91020000 	mrsls	r0, (UNDEF: 2)
     504:	02b31674 	adcseq	r1, r3, #116, 12	; 0x7400000
     508:	86010000 	strhi	r0, [r1], -r0
     50c:	00014c0a 	andeq	r4, r1, sl, lsl #24
     510:	73910200 	orrsvc	r0, r1, #0, 4
     514:	07251500 	streq	r1, [r5, -r0, lsl #10]!
     518:	52010000 	andpl	r0, r1, #0
     51c:	000af00a 	andeq	pc, sl, sl
     520:	00004020 	andeq	r4, r0, r0, lsr #32
     524:	4a9c0100 	bmi	fe70092c <APBAHBPrescTable+0xde6ff564>
     528:	16000005 	strne	r0, [r0], -r5
     52c:	0000033f 	andeq	r0, r0, pc, lsr r3
     530:	c70a5201 	strgt	r5, [sl, -r1, lsl #4]
     534:	02000000 	andeq	r0, r0, #0
     538:	b3167491 	tstlt	r6, #-1862270976	; 0x91000000
     53c:	01000002 	tsteq	r0, r2
     540:	014c0a52 	cmpeq	ip, r2, asr sl
     544:	91020000 	mrsls	r0, (UNDEF: 2)
     548:	36150073 			; <UNDEFINED> instruction: 0x36150073
     54c:	01000008 	tsteq	r0, r8
     550:	0ab00a19 	beq	fec02dbc <APBAHBPrescTable+0xdec019f4>
     554:	00402000 	subeq	r2, r0, r0
     558:	9c010000 	stcls	0, cr0, [r1], {-0}
     55c:	0000057f 	andeq	r0, r0, pc, ror r5
     560:	00047416 	andeq	r7, r4, r6, lsl r4
     564:	0a190100 	beq	64096c <startup-0x1f9bf694>
     568:	000000c7 	andeq	r0, r0, r7, asr #1
     56c:	16749102 	ldrbtne	r9, [r4], -r2, lsl #2
     570:	000002b3 			; <UNDEFINED> instruction: 0x000002b3
     574:	4c0a1901 			; <UNDEFINED> instruction: 0x4c0a1901
     578:	02000001 	andeq	r0, r0, #1
     57c:	15007391 	strne	r7, [r0, #-913]	; 0xfffffc6f
     580:	00000422 	andeq	r0, r0, r2, lsr #8
     584:	7009fb01 	andvc	pc, r9, r1, lsl #22
     588:	4020000a 	eormi	r0, r0, sl
     58c:	01000000 	mrseq	r0, (UNDEF: 0)
     590:	0005b49c 	muleq	r5, ip, r4
     594:	045b1600 	ldrbeq	r1, [fp], #-1536	; 0xfffffa00
     598:	fb010000 	blx	405a2 <startup-0x1ffbfa5e>
     59c:	0000c709 	andeq	ip, r0, r9, lsl #14
     5a0:	74910200 	ldrvc	r0, [r1], #512	; 0x200
     5a4:	0002b316 	andeq	fp, r2, r6, lsl r3
     5a8:	09fb0100 	ldmibeq	fp!, {r8}^
     5ac:	0000014c 	andeq	r0, r0, ip, asr #2
     5b0:	00739102 	rsbseq	r9, r3, r2, lsl #2
     5b4:	00099815 	andeq	r9, r9, r5, lsl r8
     5b8:	09db0100 	ldmibeq	fp, {r8}^
     5bc:	20000a30 	andcs	r0, r0, r0, lsr sl
     5c0:	00000040 	andeq	r0, r0, r0, asr #32
     5c4:	05e99c01 	strbeq	r9, [r9, #3073]!	; 0xc01
     5c8:	fe160000 	cdp2	0, 1, cr0, cr6, cr0, {0}
     5cc:	01000000 	mrseq	r0, (UNDEF: 0)
     5d0:	00c709db 	ldrdeq	r0, [r7], #155	; 0x9b
     5d4:	91020000 	mrsls	r0, (UNDEF: 2)
     5d8:	02b31674 	adcseq	r1, r3, #116, 12	; 0x7400000
     5dc:	db010000 	blle	405e4 <startup-0x1ffbfa1c>
     5e0:	00014c09 	andeq	r4, r1, r9, lsl #24
     5e4:	73910200 	orrsvc	r0, r1, #0, 4
     5e8:	05d01500 	ldrbeq	r1, [r0, #1280]	; 0x500
     5ec:	aa010000 	bge	405f4 <startup-0x1ffbfa0c>
     5f0:	0009f009 	andeq	pc, r9, r9
     5f4:	00004020 	andeq	r4, r0, r0, lsr #32
     5f8:	1e9c0100 	fmlnee	f0, f4, f0
     5fc:	16000006 	strne	r0, [r0], -r6
     600:	00000870 	andeq	r0, r0, r0, ror r8
     604:	c709aa01 	strgt	sl, [r9, -r1, lsl #20]
     608:	02000000 	andeq	r0, r0, #0
     60c:	b3167491 	tstlt	r6, #-1862270976	; 0x91000000
     610:	01000002 	tsteq	r0, r2
     614:	014c09aa 	smlaltbeq	r0, ip, sl, r9
     618:	91020000 	mrsls	r0, (UNDEF: 2)
     61c:	85150073 	ldrhi	r0, [r5, #-115]	; 0xffffff8d
     620:	01000000 	mrseq	r0, (UNDEF: 0)
     624:	09b0097b 	ldmibeq	r0!, {r0, r1, r3, r4, r5, r6, r8, fp}
     628:	00402000 	subeq	r2, r0, r0
     62c:	9c010000 	stcls	0, cr0, [r1], {-0}
     630:	00000653 	andeq	r0, r0, r3, asr r6
     634:	00033f16 	andeq	r3, r3, r6, lsl pc
     638:	097b0100 	ldmdbeq	fp!, {r8}^
     63c:	000000c7 	andeq	r0, r0, r7, asr #1
     640:	16749102 	ldrbtne	r9, [r4], -r2, lsl #2
     644:	000002b3 			; <UNDEFINED> instruction: 0x000002b3
     648:	4c097b01 			; <UNDEFINED> instruction: 0x4c097b01
     64c:	02000001 	andeq	r0, r0, #1
     650:	15007391 	strne	r7, [r0, #-913]	; 0xfffffc6f
     654:	000001b5 			; <UNDEFINED> instruction: 0x000001b5
     658:	70094501 	andvc	r4, r9, r1, lsl #10
     65c:	40200009 	eormi	r0, r0, r9
     660:	01000000 	mrseq	r0, (UNDEF: 0)
     664:	0006889c 	muleq	r6, ip, r8
     668:	04741600 	ldrbteq	r1, [r4], #-1536	; 0xfffffa00
     66c:	45010000 	strmi	r0, [r1, #-0]
     670:	0000c709 	andeq	ip, r0, r9, lsl #14
     674:	74910200 	ldrvc	r0, [r1], #512	; 0x200
     678:	0002b316 	andeq	fp, r2, r6, lsl r3
     67c:	09450100 	stmdbeq	r5, {r8}^
     680:	0000014c 	andeq	r0, r0, ip, asr #2
     684:	00739102 	rsbseq	r9, r3, r2, lsl #2
     688:	00070e15 	andeq	r0, r7, r5, lsl lr
     68c:	092a0100 	stmdbeq	sl!, {r8}
     690:	20000930 	andcs	r0, r0, r0, lsr r9
     694:	00000040 	andeq	r0, r0, r0, asr #32
     698:	06bd9c01 	ldrteq	r9, [sp], r1, lsl #24
     69c:	5b160000 	blpl	5806a4 <startup-0x1fa7f95c>
     6a0:	01000004 	tsteq	r0, r4
     6a4:	00c7092a 	sbceq	r0, r7, sl, lsr #18
     6a8:	91020000 	mrsls	r0, (UNDEF: 2)
     6ac:	02b31674 	adcseq	r1, r3, #116, 12	; 0x7400000
     6b0:	2a010000 	bcs	406b8 <startup-0x1ffbf948>
     6b4:	00014c09 	andeq	r4, r1, r9, lsl #24
     6b8:	73910200 	orrsvc	r0, r1, #0, 4
     6bc:	01e31500 	mvneq	r1, r0, lsl #10
     6c0:	0d010000 	stceq	0, cr0, [r1, #-0]
     6c4:	0008f009 	andeq	pc, r8, r9
     6c8:	00004020 	andeq	r4, r0, r0, lsr #32
     6cc:	f29c0100 	vaddw.s16	q0, q6, d0
     6d0:	16000006 	strne	r0, [r0], -r6
     6d4:	000000fe 	strdeq	r0, [r0], -lr
     6d8:	c7090d01 	strgt	r0, [r9, -r1, lsl #26]
     6dc:	02000000 	andeq	r0, r0, #0
     6e0:	b3167491 	tstlt	r6, #-1862270976	; 0x91000000
     6e4:	01000002 	tsteq	r0, r2
     6e8:	014c090d 	cmpeq	ip, sp, lsl #18
     6ec:	91020000 	mrsls	r0, (UNDEF: 2)
     6f0:	ce150073 	mrcgt	0, 0, r0, cr5, cr3, {3}
     6f4:	01000007 	tsteq	r0, r7
     6f8:	08b008e3 	ldmeq	r0!, {r0, r1, r5, r6, r7, fp}
     6fc:	00402000 	subeq	r2, r0, r0
     700:	9c010000 	stcls	0, cr0, [r1], {-0}
     704:	00000727 	andeq	r0, r0, r7, lsr #14
     708:	00087016 	andeq	r7, r8, r6, lsl r0
     70c:	08e30100 	stmiaeq	r3!, {r8}^
     710:	000000c7 	andeq	r0, r0, r7, asr #1
     714:	16749102 	ldrbtne	r9, [r4], -r2, lsl #2
     718:	000002b3 			; <UNDEFINED> instruction: 0x000002b3
     71c:	4c08e301 	stcmi	3, cr14, [r8], {1}
     720:	02000001 	andeq	r0, r0, #1
     724:	15007391 	strne	r7, [r0, #-913]	; 0xfffffc6f
     728:	000008e6 	andeq	r0, r0, r6, ror #17
     72c:	7008af01 	andvc	sl, r8, r1, lsl #30
     730:	40200008 	eormi	r0, r0, r8
     734:	01000000 	mrseq	r0, (UNDEF: 0)
     738:	00075c9c 	muleq	r7, ip, ip
     73c:	033f1600 	teqeq	pc, #0, 12
     740:	af010000 	svcge	0x00010000
     744:	0000c708 	andeq	ip, r0, r8, lsl #14
     748:	74910200 	ldrvc	r0, [r1], #512	; 0x200
     74c:	0002b316 	andeq	fp, r2, r6, lsl r3
     750:	08af0100 	stmiaeq	pc!, {r8}	; <UNPREDICTABLE>
     754:	0000014c 	andeq	r0, r0, ip, asr #2
     758:	00739102 	rsbseq	r9, r3, r2, lsl #2
     75c:	0009b515 	andeq	fp, r9, r5, lsl r5
     760:	08760100 	ldmdaeq	r6!, {r8}^
     764:	20000830 	andcs	r0, r0, r0, lsr r8
     768:	00000040 	andeq	r0, r0, r0, asr #32
     76c:	07919c01 	ldreq	r9, [r1, r1, lsl #24]
     770:	74160000 	ldrvc	r0, [r6], #-0
     774:	01000004 	tsteq	r0, r4
     778:	00c70876 	sbceq	r0, r7, r6, ror r8
     77c:	91020000 	mrsls	r0, (UNDEF: 2)
     780:	02b31674 	adcseq	r1, r3, #116, 12	; 0x7400000
     784:	76010000 	strvc	r0, [r1], -r0
     788:	00014c08 	andeq	r4, r1, r8, lsl #24
     78c:	73910200 	orrsvc	r0, r1, #0, 4
     790:	017e1500 	cmneq	lr, r0, lsl #10
     794:	58010000 	stmdapl	r1, {}	; <UNPREDICTABLE>
     798:	0007f008 	andeq	pc, r7, r8
     79c:	00004020 	andeq	r4, r0, r0, lsr #32
     7a0:	c69c0100 	ldrgt	r0, [ip], r0, lsl #2
     7a4:	16000007 	strne	r0, [r0], -r7
     7a8:	0000045b 	andeq	r0, r0, fp, asr r4
     7ac:	c7085801 	strgt	r5, [r8, -r1, lsl #16]
     7b0:	02000000 	andeq	r0, r0, #0
     7b4:	b3167491 	tstlt	r6, #-1862270976	; 0x91000000
     7b8:	01000002 	tsteq	r0, r2
     7bc:	014c0858 	cmpeq	ip, r8, asr r8
     7c0:	91020000 	mrsls	r0, (UNDEF: 2)
     7c4:	dd150073 	ldcle	0, cr0, [r5, #-460]	; 0xfffffe34
     7c8:	01000006 	tsteq	r0, r6
     7cc:	07b00838 			; <UNDEFINED> instruction: 0x07b00838
     7d0:	00402000 	subeq	r2, r0, r0
     7d4:	9c010000 	stcls	0, cr0, [r1], {-0}
     7d8:	000007fb 	strdeq	r0, [r0], -fp
     7dc:	0000fe16 	andeq	pc, r0, r6, lsl lr	; <UNPREDICTABLE>
     7e0:	08380100 	ldmdaeq	r8!, {r8}
     7e4:	000000c7 	andeq	r0, r0, r7, asr #1
     7e8:	16749102 	ldrbtne	r9, [r4], -r2, lsl #2
     7ec:	000002b3 			; <UNDEFINED> instruction: 0x000002b3
     7f0:	4c083801 	stcmi	8, cr3, [r8], {1}
     7f4:	02000001 	andeq	r0, r0, #1
     7f8:	15007391 	strne	r7, [r0, #-913]	; 0xfffffc6f
     7fc:	0000087f 	andeq	r0, r0, pc, ror r8
     800:	94080e01 	strls	r0, [r8], #-3585	; 0xfffff1ff
     804:	1c200007 	stcne	0, cr0, [r0], #-28	; 0xffffffe4
     808:	01000000 	mrseq	r0, (UNDEF: 0)
     80c:	0008219c 	muleq	r8, ip, r1
     810:	06be1600 	ldrteq	r1, [lr], r0, lsl #12
     814:	0e010000 	cdpeq	0, 0, cr0, cr1, cr0, {0}
     818:	0000c708 	andeq	ip, r0, r8, lsl #14
     81c:	74910200 	ldrvc	r0, [r1], #512	; 0x200
     820:	03ef1500 	mvneq	r1, #0, 10
     824:	8e010000 	cdphi	0, 0, cr0, cr1, cr0, {0}
     828:	00075807 	andeq	r5, r7, r7, lsl #16
     82c:	00003c20 	andeq	r3, r0, r0, lsr #24
     830:	569c0100 	ldrpl	r0, [ip], r0, lsl #2
     834:	16000008 	strne	r0, [r0], -r8
     838:	00000038 	andeq	r0, r0, r8, lsr r0
     83c:	c7078e01 	strgt	r8, [r7, -r1, lsl #28]
     840:	02000000 	andeq	r0, r0, #0
     844:	67186c91 			; <UNDEFINED> instruction: 0x67186c91
     848:	01000001 	tsteq	r0, r1
     84c:	00c70790 	smulleq	r0, r7, r0, r7
     850:	91020000 	mrsls	r0, (UNDEF: 2)
     854:	a1150074 	tstge	r5, r4, ror r0
     858:	01000000 	mrseq	r0, (UNDEF: 0)
     85c:	0718072b 	ldreq	r0, [r8, -fp, lsr #14]
     860:	00402000 	subeq	r2, r0, r0
     864:	9c010000 	stcls	0, cr0, [r1], {-0}
     868:	0000088b 	andeq	r0, r0, fp, lsl #17
     86c:	00002916 	andeq	r2, r0, r6, lsl r9
     870:	072b0100 	streq	r0, [fp, -r0, lsl #2]!
     874:	000000c7 	andeq	r0, r0, r7, asr #1
     878:	186c9102 	stmdane	ip!, {r1, r8, ip, pc}^
     87c:	00000167 	andeq	r0, r0, r7, ror #2
     880:	c7072d01 	strgt	r2, [r7, -r1, lsl #26]
     884:	02000000 	andeq	r0, r0, #0
     888:	15007491 	strne	r7, [r0, #-1169]	; 0xfffffb6f
     88c:	0000048f 	andeq	r0, r0, pc, lsl #9
     890:	dc070b01 			; <UNDEFINED> instruction: 0xdc070b01
     894:	3c200006 	stccc	0, cr0, [r0], #-24	; 0xffffffe8
     898:	01000000 	mrseq	r0, (UNDEF: 0)
     89c:	0008c09c 	muleq	r8, ip, r0
     8a0:	05701600 	ldrbeq	r1, [r0, #-1536]!	; 0xfffffa00
     8a4:	0b010000 	bleq	408ac <startup-0x1ffbf754>
     8a8:	0000c707 	andeq	ip, r0, r7, lsl #14
     8ac:	6c910200 	lfmvs	f0, 4, [r1], {0}
     8b0:	00016718 	andeq	r6, r1, r8, lsl r7
     8b4:	070d0100 	streq	r0, [sp, -r0, lsl #2]
     8b8:	000000c7 	andeq	r0, r0, r7, asr #1
     8bc:	00749102 	rsbseq	r9, r4, r2, lsl #2
     8c0:	00067815 	andeq	r7, r6, r5, lsl r8
     8c4:	06ea0100 	strbteq	r0, [sl], r0, lsl #2
     8c8:	200006a0 	andcs	r0, r0, r0, lsr #13
     8cc:	0000003c 	andeq	r0, r0, ip, lsr r0
     8d0:	08f59c01 	ldmeq	r5!, {r0, sl, fp, ip, pc}^
     8d4:	d8160000 	ldmdale	r6, {}	; <UNPREDICTABLE>
     8d8:	01000003 	tsteq	r0, r3
     8dc:	00c706ea 	sbceq	r0, r7, sl, ror #13
     8e0:	91020000 	mrsls	r0, (UNDEF: 2)
     8e4:	0167186c 	cmneq	r7, ip, ror #16
     8e8:	ec010000 	stc	0, cr0, [r1], {-0}
     8ec:	0000c706 	andeq	ip, r0, r6, lsl #14
     8f0:	74910200 	ldrvc	r0, [r1], #512	; 0x200
     8f4:	01cc1500 	biceq	r1, ip, r0, lsl #10
     8f8:	c6010000 	strgt	r0, [r1], -r0
     8fc:	00066406 	andeq	r6, r6, r6, lsl #8
     900:	00003c20 	andeq	r3, r0, r0, lsr #24
     904:	2a9c0100 	bcs	fe700d0c <APBAHBPrescTable+0xde6ff944>
     908:	16000009 	strne	r0, [r0], -r9
     90c:	000003c1 	andeq	r0, r0, r1, asr #7
     910:	c706c601 	strgt	ip, [r6, -r1, lsl #12]
     914:	02000000 	andeq	r0, r0, #0
     918:	67186c91 			; <UNDEFINED> instruction: 0x67186c91
     91c:	01000001 	tsteq	r0, r1
     920:	00c706c8 	sbceq	r0, r7, r8, asr #13
     924:	91020000 	mrsls	r0, (UNDEF: 2)
     928:	94150074 	ldrls	r0, [r5], #-116	; 0xffffff8c
     92c:	01000008 	tsteq	r0, r8
     930:	064806ab 	strbeq	r0, [r8], -fp, lsr #13
     934:	001c2000 	andseq	r2, ip, r0
     938:	9c010000 	stcls	0, cr0, [r1], {-0}
     93c:	00000950 	andeq	r0, r0, r0, asr r9
     940:	0005f616 	andeq	pc, r5, r6, lsl r6	; <UNPREDICTABLE>
     944:	06ab0100 	strteq	r0, [fp], r0, lsl #2
     948:	000000c7 	andeq	r0, r0, r7, asr #1
     94c:	00749102 	rsbseq	r9, r4, r2, lsl #2
     950:	0002c415 	andeq	ip, r2, r5, lsl r4
     954:	05ef0100 	strbeq	r0, [pc, #256]!	; a5c <startup-0x1ffff5a4>
     958:	20000628 	andcs	r0, r0, r8, lsr #12
     95c:	00000020 	andeq	r0, r0, r0, lsr #32
     960:	09769c01 	ldmdbeq	r6!, {r0, sl, fp, ip, pc}^
     964:	b3160000 	tstlt	r6, #0
     968:	01000002 	tsteq	r0, r2
     96c:	014c05ef 	smlaltteq	r0, ip, pc, r5	; <UNPREDICTABLE>
     970:	91020000 	mrsls	r0, (UNDEF: 2)
     974:	a9150077 	ldmdbge	r5, {r0, r1, r2, r4, r5, r6}
     978:	01000004 	tsteq	r0, r4
     97c:	060805de 			; <UNDEFINED> instruction: 0x060805de
     980:	00202000 	eoreq	r2, r0, r0
     984:	9c010000 	stcls	0, cr0, [r1], {-0}
     988:	0000099c 	muleq	r0, ip, r9
     98c:	0002b316 	andeq	fp, r2, r6, lsl r3
     990:	05de0100 	ldrbeq	r0, [lr, #256]	; 0x100
     994:	0000014c 	andeq	r0, r0, ip, asr #2
     998:	00779102 	rsbseq	r9, r7, r2, lsl #2
     99c:	00097d15 	andeq	r7, r9, r5, lsl sp
     9a0:	05be0100 	ldreq	r0, [lr, #256]!	; 0x100
     9a4:	200005a8 	andcs	r0, r0, r8, lsr #11
     9a8:	00000060 	andeq	r0, r0, r0, rrx
     9ac:	09d19c01 	ldmibeq	r1, {r0, sl, fp, ip, pc}^
     9b0:	b0160000 	andslt	r0, r6, r0
     9b4:	01000003 	tsteq	r0, r3
     9b8:	00c705be 	strheq	r0, [r7], #94	; 0x5e
     9bc:	91020000 	mrsls	r0, (UNDEF: 2)
     9c0:	0167186c 	cmneq	r7, ip, ror #16
     9c4:	c0010000 	andgt	r0, r1, r0
     9c8:	0000c705 	andeq	ip, r0, r5, lsl #14
     9cc:	74910200 	ldrvc	r0, [r1], #512	; 0x200
     9d0:	07bc1b00 	ldreq	r1, [ip, r0, lsl #22]!
     9d4:	25010000 	strcs	r0, [r1, #-0]
     9d8:	00045005 	andeq	r5, r4, r5
     9dc:	00015820 	andeq	r5, r1, r0, lsr #16
     9e0:	519c0100 	orrspl	r0, ip, r0, lsl #2
     9e4:	1600000a 	strne	r0, [r0], -sl
     9e8:	00000117 	andeq	r0, r0, r7, lsl r1
     9ec:	51052501 	tstpl	r5, r1, lsl #10
     9f0:	0200000a 	andeq	r0, r0, #10
     9f4:	741a5c91 	ldrvc	r5, [sl], #-3217	; 0xfffff36f
     9f8:	0100706d 	tsteq	r0, sp, rrx
     9fc:	00c70527 	sbceq	r0, r7, r7, lsr #10
     a00:	91020000 	mrsls	r0, (UNDEF: 2)
     a04:	03aa1870 			; <UNDEFINED> instruction: 0x03aa1870
     a08:	27010000 	strcs	r0, [r1, -r0]
     a0c:	0000c705 	andeq	ip, r0, r5, lsl #14
     a10:	6c910200 	lfmvs	f0, 4, [r1], {0}
     a14:	00034e18 	andeq	r4, r3, r8, lsl lr
     a18:	05270100 	streq	r0, [r7, #-256]!	; 0xffffff00
     a1c:	000000c7 	andeq	r0, r0, r7, asr #1
     a20:	18749102 	ldmdane	r4!, {r1, r8, ip, pc}^
     a24:	00000067 	andeq	r0, r0, r7, rrx
     a28:	c7052701 	strgt	r2, [r5, -r1, lsl #14]
     a2c:	02000000 	andeq	r0, r0, #0
     a30:	8e186891 	mrchi	8, 0, r6, cr8, cr1, {4}
     a34:	01000009 	tsteq	r0, r9
     a38:	00c70527 	sbceq	r0, r7, r7, lsr #10
     a3c:	91020000 	mrsls	r0, (UNDEF: 2)
     a40:	00621864 	rsbeq	r1, r2, r4, ror #16
     a44:	27010000 	strcs	r0, [r1, -r0]
     a48:	0000c705 	andeq	ip, r0, r5, lsl #14
     a4c:	60910200 	addsvs	r0, r1, r0, lsl #4
     a50:	87041c00 	strhi	r1, [r4, -r0, lsl #24]
     a54:	15000003 	strne	r0, [r0, #-3]
     a58:	00000742 	andeq	r0, r0, r2, asr #14
     a5c:	1404f101 	strne	pc, [r4], #-257	; 0xfffffeff
     a60:	3c200004 	stccc	0, cr0, [r0], #-16
     a64:	01000000 	mrseq	r0, (UNDEF: 0)
     a68:	000a8c9c 	muleq	sl, ip, ip
     a6c:	00001600 	andeq	r1, r0, r0, lsl #12
     a70:	f1010000 	setend	le
     a74:	0000c704 	andeq	ip, r0, r4, lsl #14
     a78:	6c910200 	lfmvs	f0, 4, [r1], {0}
     a7c:	00016718 	andeq	r6, r1, r8, lsl r7
     a80:	04f30100 	ldrbteq	r0, [r3], #256	; 0x100
     a84:	000000c7 	andeq	r0, r0, r7, asr #1
     a88:	00749102 	rsbseq	r9, r4, r2, lsl #2
     a8c:	0001a515 	andeq	sl, r1, r5, lsl r5
     a90:	04d20100 	ldrbeq	r0, [r2], #256	; 0x100
     a94:	200003dc 	ldrdcs	r0, [r0], -ip
     a98:	00000038 	andeq	r0, r0, r8, lsr r0
     a9c:	0ac19c01 	beq	ff067aa8 <APBAHBPrescTable+0xdf0666e0>
     aa0:	00160000 	andseq	r0, r6, r0
     aa4:	01000000 	mrseq	r0, (UNDEF: 0)
     aa8:	00c704d2 	ldrdeq	r0, [r7], #66	; 0x42
     aac:	91020000 	mrsls	r0, (UNDEF: 2)
     ab0:	0167186c 	cmneq	r7, ip, ror #16
     ab4:	d4010000 	strle	r0, [r1], #-0
     ab8:	0000c704 	andeq	ip, r0, r4, lsl #14
     abc:	74910200 	ldrvc	r0, [r1], #512	; 0x200
     ac0:	01fa1500 	mvnseq	r1, r0, lsl #10
     ac4:	b3010000 	movwlt	r0, #4096	; 0x1000
     ac8:	0003a804 	andeq	sl, r3, r4, lsl #16
     acc:	00003420 	andeq	r3, r0, r0, lsr #8
     ad0:	f69c0100 			; <UNDEFINED> instruction: 0xf69c0100
     ad4:	1600000a 	strne	r0, [r0], -sl
     ad8:	00000385 	andeq	r0, r0, r5, lsl #7
     adc:	c704b301 	strgt	fp, [r4, -r1, lsl #6]
     ae0:	02000000 	andeq	r0, r0, #0
     ae4:	67186c91 			; <UNDEFINED> instruction: 0x67186c91
     ae8:	01000001 	tsteq	r0, r1
     aec:	00c704b5 	strheq	r0, [r7], #69	; 0x45
     af0:	91020000 	mrsls	r0, (UNDEF: 2)
     af4:	fc1d0074 	ldc2	0, cr0, [sp], {116}	; 0x74
     af8:	01000002 	tsteq	r0, r2
     afc:	0097049a 	umullseq	r0, r7, sl, r4
     b00:	038c0000 	orreq	r0, ip, #0
     b04:	001c2000 	andseq	r2, ip, r0
     b08:	9c010000 	stcls	0, cr0, [r1], {-0}
     b0c:	00021715 	andeq	r1, r2, r5, lsl r7
     b10:	047d0100 	ldrbteq	r0, [sp], #-256	; 0xffffff00
     b14:	20000358 	andcs	r0, r0, r8, asr r3
     b18:	00000034 	andeq	r0, r0, r4, lsr r0
     b1c:	0b419c01 	bleq	1067b28 <startup-0x1ef984d8>
     b20:	52160000 	andspl	r0, r6, #0
     b24:	01000007 	tsteq	r0, r7
     b28:	00c7047d 	sbceq	r0, r7, sp, ror r4
     b2c:	91020000 	mrsls	r0, (UNDEF: 2)
     b30:	0167186c 	cmneq	r7, ip, ror #16
     b34:	7f010000 	svcvc	0x00010000
     b38:	0000c704 	andeq	ip, r0, r4, lsl #14
     b3c:	74910200 	ldrvc	r0, [r1], #512	; 0x200
     b40:	08a51500 	stmiaeq	r5!, {r8, sl, ip}
     b44:	b5010000 	strlt	r0, [r1, #-0]
     b48:	00031c03 	andeq	r1, r3, r3, lsl #24
     b4c:	00003c20 	andeq	r3, r0, r0, lsr #24
     b50:	859c0100 	ldrhi	r0, [ip, #256]	; 0x100
     b54:	1600000b 	strne	r0, [r0], -fp
     b58:	000005e7 	andeq	r0, r0, r7, ror #11
     b5c:	c703b501 	strgt	fp, [r3, -r1, lsl #10]
     b60:	02000000 	andeq	r0, r0, #0
     b64:	83166c91 	tsthi	r6, #37120	; 0x9100
     b68:	01000004 	tsteq	r0, r4
     b6c:	00c703b5 	strheq	r0, [r7], #53	; 0x35
     b70:	91020000 	mrsls	r0, (UNDEF: 2)
     b74:	01671868 	cmneq	r7, r8, ror #16
     b78:	b7010000 	strlt	r0, [r1, -r0]
     b7c:	0000c703 	andeq	ip, r0, r3, lsl #14
     b80:	74910200 	ldrvc	r0, [r1], #512	; 0x200
     b84:	03761500 	cmneq	r6, #0, 10
     b88:	88010000 	stmdahi	r1, {}	; <UNPREDICTABLE>
     b8c:	0002dc03 	andeq	sp, r2, r3, lsl #24
     b90:	00004020 	andeq	r4, r0, r0, lsr #32
     b94:	c99c0100 	ldmibgt	ip, {r8}
     b98:	1600000b 	strne	r0, [r0], -fp
     b9c:	00000076 	andeq	r0, r0, r6, ror r0
     ba0:	c7038801 	strgt	r8, [r3, -r1, lsl #16]
     ba4:	02000000 	andeq	r0, r0, #0
     ba8:	c4166c91 	ldrgt	r6, [r6], #-3217	; 0xfffff36f
     bac:	01000005 	tsteq	r0, r5
     bb0:	00c70388 	sbceq	r0, r7, r8, lsl #7
     bb4:	91020000 	mrsls	r0, (UNDEF: 2)
     bb8:	01671868 	cmneq	r7, r8, ror #16
     bbc:	8a010000 	bhi	40bc4 <startup-0x1ffbf43c>
     bc0:	0000c703 	andeq	ip, r0, r3, lsl #14
     bc4:	74910200 	ldrvc	r0, [r1], #512	; 0x200
     bc8:	05551500 	ldrbeq	r1, [r5, #-1280]	; 0xfffffb00
     bcc:	6f010000 	svcvs	0x00010000
     bd0:	0002bc03 	andeq	fp, r2, r3, lsl #24
     bd4:	00002020 	andeq	r2, r0, r0, lsr #32
     bd8:	ef9c0100 	svc	0x009c0100
     bdc:	1600000b 	strne	r0, [r0], -fp
     be0:	000002b3 			; <UNDEFINED> instruction: 0x000002b3
     be4:	4c036f01 	stcmi	15, cr6, [r3], {1}
     be8:	02000001 	andeq	r0, r0, #1
     bec:	15007791 	strne	r7, [r0, #-1937]	; 0xfffff86f
     bf0:	0000001b 	andeq	r0, r0, fp, lsl r0
     bf4:	9c035d01 	stcls	13, cr5, [r3], {1}
     bf8:	20200002 	eorcs	r0, r0, r2
     bfc:	01000000 	mrseq	r0, (UNDEF: 0)
     c00:	000c159c 	muleq	ip, ip, r5
     c04:	02b31600 	adcseq	r1, r3, #0, 12
     c08:	5d010000 	stcpl	0, cr0, [r1, #-0]
     c0c:	00014c03 	andeq	r4, r1, r3, lsl #24
     c10:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
     c14:	057f1500 	ldrbeq	r1, [pc, #-1280]!	; 71c <startup-0x1ffff8e4>
     c18:	49010000 	stmdbmi	r1, {}	; <UNPREDICTABLE>
     c1c:	00026c03 	andeq	r6, r2, r3, lsl #24
     c20:	00003020 	andeq	r3, r0, r0, lsr #32
     c24:	599c0100 	ldmibpl	ip, {r8}
     c28:	1600000c 	strne	r0, [r0], -ip
     c2c:	0000068f 	andeq	r0, r0, pc, lsl #13
     c30:	c7034901 	strgt	r4, [r3, -r1, lsl #18]
     c34:	02000000 	andeq	r0, r0, #0
     c38:	a4167491 	ldrge	r7, [r6], #-1169	; 0xfffffb6f
     c3c:	01000006 	tsteq	r0, r6
     c40:	00c70349 	sbceq	r0, r7, r9, asr #6
     c44:	91020000 	mrsls	r0, (UNDEF: 2)
     c48:	06ac1670 			; <UNDEFINED> instruction: 0x06ac1670
     c4c:	49010000 	stmdbmi	r1, {}	; <UNPREDICTABLE>
     c50:	0000c703 	andeq	ip, r0, r3, lsl #14
     c54:	6c910200 	lfmvs	f0, 4, [r1], {0}
     c58:	03901500 	orrseq	r1, r0, #0, 10
     c5c:	dc010000 	stcle	0, cr0, [r1], {-0}
     c60:	00024c02 	andeq	r4, r2, r2, lsl #24
     c64:	00002020 	andeq	r2, r0, r0, lsr #32
     c68:	7f9c0100 	svcvc	0x009c0100
     c6c:	1600000c 	strne	r0, [r0], -ip
     c70:	000002b3 			; <UNDEFINED> instruction: 0x000002b3
     c74:	4c02dc01 	stcmi	12, cr13, [r2], {1}
     c78:	02000001 	andeq	r0, r0, #1
     c7c:	15007791 	strne	r7, [r0, #-1937]	; 0xfffff86f
     c80:	0000043f 	andeq	r0, r0, pc, lsr r4
     c84:	24025101 	strcs	r5, [r2], #-257	; 0xfffffeff
     c88:	28200002 	stmdacs	r0!, {r1}
     c8c:	01000000 	mrseq	r0, (UNDEF: 0)
     c90:	000cb49c 	muleq	ip, ip, r4
     c94:	07b41600 	ldreq	r1, [r4, r0, lsl #12]!
     c98:	51010000 	mrspl	r0, (UNDEF: 1)
     c9c:	0000c702 	andeq	ip, r0, r2, lsl #14
     ca0:	74910200 	ldrvc	r0, [r1], #512	; 0x200
     ca4:	00080416 	andeq	r0, r8, r6, lsl r4
     ca8:	02510100 	subseq	r0, r1, #0, 2
     cac:	000000c7 	andeq	r0, r0, r7, asr #1
     cb0:	00709102 	rsbseq	r9, r0, r2, lsl #2
     cb4:	0006d215 	andeq	sp, r6, r5, lsl r2
     cb8:	02330100 	eorseq	r0, r3, #0, 2
     cbc:	20000204 	andcs	r0, r0, r4, lsl #4
     cc0:	00000020 	andeq	r0, r0, r0, lsr #32
     cc4:	0cda9c01 	ldcleq	12, cr9, [sl], {1}
     cc8:	b3160000 	tstlt	r6, #0
     ccc:	01000002 	tsteq	r0, r2
     cd0:	014c0233 	cmpeq	ip, r3, lsr r2
     cd4:	91020000 	mrsls	r0, (UNDEF: 2)
     cd8:	55150077 	ldrpl	r0, [r5, #-119]	; 0xffffff89
     cdc:	01000009 	tsteq	r0, r9
     ce0:	01c8021b 	biceq	r0, r8, fp, lsl r2
     ce4:	003c2000 	eorseq	r2, ip, r0
     ce8:	9c010000 	stcls	0, cr0, [r1], {-0}
     cec:	00000d3c 	andeq	r0, r0, ip, lsr sp
     cf0:	0002ee16 	andeq	lr, r2, r6, lsl lr
     cf4:	021b0100 	andseq	r0, fp, #0, 2
     cf8:	000000c7 	andeq	r0, r0, r7, asr #1
     cfc:	16749102 	ldrbtne	r9, [r4], -r2, lsl #2
     d00:	000000f9 	strdeq	r0, [r0], -r9
     d04:	c7021b01 	strgt	r1, [r2, -r1, lsl #22]
     d08:	02000000 	andeq	r0, r0, #0
     d0c:	9c167091 	ldcls	0, cr7, [r6], {145}	; 0x91
     d10:	01000000 	mrseq	r0, (UNDEF: 0)
     d14:	00c7021b 	sbceq	r0, r7, fp, lsl r2
     d18:	91020000 	mrsls	r0, (UNDEF: 2)
     d1c:	00bb166c 	adcseq	r1, fp, ip, ror #12
     d20:	1b010000 	blne	40d28 <startup-0x1ffbf2d8>
     d24:	0000c702 	andeq	ip, r0, r2, lsl #14
     d28:	68910200 	ldmvs	r1, {r9}
     d2c:	0000c016 	andeq	ip, r0, r6, lsl r0
     d30:	021b0100 	andseq	r0, fp, #0, 2
     d34:	000000c7 	andeq	r0, r0, r7, asr #1
     d38:	00009102 	andeq	r9, r0, r2, lsl #2
     d3c:	0008cd15 	andeq	ip, r8, r5, lsl sp
     d40:	01b80100 			; <UNDEFINED> instruction: 0x01b80100
     d44:	200001a8 	andcs	r0, r0, r8, lsr #3
     d48:	00000020 	andeq	r0, r0, r0, lsr #32
     d4c:	0d629c01 	stcleq	12, cr9, [r2, #-4]!
     d50:	b3160000 	tstlt	r6, #0
     d54:	01000002 	tsteq	r0, r2
     d58:	014c01b8 	strheq	r0, [ip, #-24]	; 0xffffffe8
     d5c:	91020000 	mrsls	r0, (UNDEF: 2)
     d60:	28150077 	ldmdacs	r5, {r0, r1, r2, r4, r5, r6}
     d64:	01000002 	tsteq	r0, r2
     d68:	01640190 			; <UNDEFINED> instruction: 0x01640190
     d6c:	00442000 	subeq	r2, r4, r0
     d70:	9c010000 	stcls	0, cr0, [r1], {-0}
     d74:	00000d88 	andeq	r0, r0, r8, lsl #27
     d78:	00000916 	andeq	r0, r0, r6, lsl r9
     d7c:	01900100 	orrseq	r0, r0, r0, lsl #2
     d80:	00000097 	muleq	r0, r7, r0
     d84:	00779102 	rsbseq	r9, r7, r2, lsl #2
     d88:	00045015 	andeq	r5, r4, r5, lsl r0
     d8c:	01770100 	cmneq	r7, r0, lsl #2
     d90:	20000144 	andcs	r0, r0, r4, asr #2
     d94:	00000020 	andeq	r0, r0, r0, lsr #32
     d98:	0dae9c01 	stceq	12, cr9, [lr, #4]!
     d9c:	b3160000 	tstlt	r6, #0
     da0:	01000002 	tsteq	r0, r2
     da4:	014c0177 	hvceq	49175	; 0xc017
     da8:	91020000 	mrsls	r0, (UNDEF: 2)
     dac:	8c150077 	ldchi	0, cr0, [r5], {119}	; 0x77
     db0:	01000007 	tsteq	r0, r7
     db4:	01060153 	tsteq	r6, r3, asr r1
     db8:	003e2000 	eorseq	r2, lr, r0
     dbc:	9c010000 	stcls	0, cr0, [r1], {-0}
     dc0:	00000de3 	andeq	r0, r0, r3, ror #27
     dc4:	00079616 	andeq	r9, r7, r6, lsl r6
     dc8:	01530100 	cmpeq	r3, r0, lsl #2
     dcc:	00000097 	muleq	r0, r7, r0
     dd0:	186f9102 	stmdane	pc!, {r1, r8, ip, pc}^	; <UNPREDICTABLE>
     dd4:	00000167 	andeq	r0, r0, r7, ror #2
     dd8:	c7015501 	strgt	r5, [r1, -r1, lsl #10]
     ddc:	02000000 	andeq	r0, r0, #0
     de0:	1e007491 	mcrne	4, 0, r7, cr0, cr1, {4}
     de4:	00000310 	andeq	r0, r0, r0, lsl r3
     de8:	73013401 	movwvc	r3, #5121	; 0x1401
     dec:	a8000001 	stmdage	r0, {r0}
     df0:	5e200000 	cdppl	0, 2, cr0, cr0, cr0, {0}
     df4:	01000000 	mrseq	r0, (UNDEF: 0)
     df8:	000e2b9c 	muleq	lr, ip, fp
     dfc:	08611800 	stmdaeq	r1!, {fp, ip}^
     e00:	36010000 	strcc	r0, [r1], -r0
     e04:	0000d201 	andeq	sp, r0, r1, lsl #4
     e08:	68910200 	ldmvs	r1, {r9}
     e0c:	0007ad18 	andeq	sl, r7, r8, lsl sp
     e10:	01370100 	teqeq	r7, r0, lsl #2
     e14:	00000173 	andeq	r0, r0, r3, ror r1
     e18:	186f9102 	stmdane	pc!, {r1, r8, ip, pc}^	; <UNPREDICTABLE>
     e1c:	000007aa 	andeq	r0, r0, sl, lsr #15
     e20:	19013801 	stmdbne	r1, {r0, fp, ip, sp}
     e24:	02000001 	andeq	r0, r0, #1
     e28:	15006e91 	strne	r6, [r0, #-3729]	; 0xfffff16f
     e2c:	0000066a 	andeq	r0, r0, sl, ror #12
     e30:	80011c01 	andhi	r1, r1, r1, lsl #24
     e34:	28200000 	stmdacs	r0!, {}	; <UNPREDICTABLE>
     e38:	01000000 	mrseq	r0, (UNDEF: 0)
     e3c:	000e519c 	muleq	lr, ip, r1
     e40:	07631600 	strbeq	r1, [r3, -r0, lsl #12]!
     e44:	1c010000 	stcne	0, cr0, [r1], {-0}
     e48:	00009701 	andeq	r9, r0, r1, lsl #14
     e4c:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
     e50:	07f91f00 	ldrbeq	r1, [r9, r0, lsl #30]!
     e54:	e1010000 	mrs	r0, (UNDEF: 1)
     e58:	20000010 	andcs	r0, r0, r0, lsl r0
     e5c:	00000070 	andeq	r0, r0, r0, ror r0
     e60:	23009c01 	movwcs	r9, #3073	; 0xc01
     e64:	04000006 	streq	r0, [r0], #-6
     e68:	0001eb00 	andeq	lr, r1, r0, lsl #22
     e6c:	bd010400 	cfstrslt	mvf0, [r1, #-0]
     e70:	0c000004 	stceq	0, cr0, [r0], {4}
     e74:	00000ad4 	ldrdeq	r0, [r0], -r4
     e78:	00000912 	andeq	r0, r0, r2, lsl r9
     e7c:	20000d00 	andcs	r0, r0, r0, lsl #26
     e80:	0000050e 	andeq	r0, r0, lr, lsl #10
     e84:	000003b9 			; <UNDEFINED> instruction: 0x000003b9
     e88:	55060102 	strpl	r0, [r6, #-258]	; 0xfffffefe
     e8c:	03000008 	movweq	r0, #8
     e90:	0000006c 	andeq	r0, r0, ip, rrx
     e94:	00372b02 	eorseq	r2, r7, r2, lsl #22
     e98:	01020000 	mrseq	r0, (UNDEF: 2)
     e9c:	00085308 	andeq	r5, r8, r8, lsl #6
     ea0:	05020200 	streq	r0, [r2, #-512]	; 0xfffffe00
     ea4:	000006b4 			; <UNDEFINED> instruction: 0x000006b4
     ea8:	0007e503 	andeq	lr, r7, r3, lsl #10
     eac:	50390200 	eorspl	r0, r9, r0, lsl #4
     eb0:	02000000 	andeq	r0, r0, #0
     eb4:	04040702 	streq	r0, [r4], #-1794	; 0xfffff8fe
     eb8:	0c030000 	stceq	0, cr0, [r3], {-0}
     ebc:	02000008 	andeq	r0, r0, #8
     ec0:	0000624d 	andeq	r6, r0, sp, asr #4
     ec4:	05040200 	streq	r0, [r4, #-512]	; 0xfffffe00
     ec8:	0000020e 	andeq	r0, r0, lr, lsl #4
     ecc:	0002d703 	andeq	sp, r2, r3, lsl #14
     ed0:	744f0200 	strbvc	r0, [pc], #-512	; ed8 <startup-0x1ffff128>
     ed4:	02000000 	andeq	r0, r0, #0
     ed8:	00e00704 	rsceq	r0, r0, r4, lsl #14
     edc:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
     ee0:	00020905 	andeq	r0, r2, r5, lsl #18
     ee4:	07080200 	streq	r0, [r8, -r0, lsl #4]
     ee8:	000000db 	ldrdeq	r0, [r0], -fp
     eec:	69050404 	stmdbvs	r5, {r2, sl}
     ef0:	0200746e 	andeq	r7, r0, #1845493760	; 0x6e000000
     ef4:	00e50704 	rsceq	r0, r5, r4, lsl #14
     ef8:	6e030000 	cdpvs	0, 0, cr0, cr3, cr0, {0}
     efc:	03000000 	movweq	r0, #0
     f00:	00002c18 	andeq	r2, r0, r8, lsl ip
     f04:	07e70300 	strbeq	r0, [r7, r0, lsl #6]!
     f08:	24030000 	strcs	r0, [r3], #-0
     f0c:	00000045 	andeq	r0, r0, r5, asr #32
     f10:	0000a205 	andeq	sl, r0, r5, lsl #4
     f14:	080e0300 	stmdaeq	lr, {r8, r9}
     f18:	2c030000 	stccs	0, cr0, [r3], {-0}
     f1c:	00000057 	andeq	r0, r0, r7, asr r0
     f20:	0000b205 	andeq	fp, r0, r5, lsl #4
     f24:	02d90300 	sbcseq	r0, r9, #0, 6
     f28:	30030000 	andcc	r0, r3, r0
     f2c:	00000069 	andeq	r0, r0, r9, rrx
     f30:	0000c205 	andeq	ip, r0, r5, lsl #4
     f34:	06970600 	ldreq	r0, [r7], r0, lsl #12
     f38:	fa040000 	blx	100f40 <startup-0x1feff0c0>
     f3c:	0000bd06 	andeq	fp, r0, r6, lsl #26
     f40:	035d0700 	cmpeq	sp, #0, 14
     f44:	3b050000 	blcc	140f4c <startup-0x1febf0b4>
     f48:	000000c2 	andeq	r0, r0, r2, asr #1
     f4c:	37010708 	strcc	r0, [r1, -r8, lsl #14]
     f50:	06000000 	streq	r0, [r0], -r0
     f54:	0104035f 	tsteq	r4, pc, asr r3
     f58:	55090000 	strpl	r0, [r9, #-0]
     f5c:	00000003 	andeq	r0, r0, r3
     f60:	00019509 	andeq	r9, r1, r9, lsl #10
     f64:	0a000100 	beq	136c <startup-0x1fffec94>
     f68:	05c30628 	strbeq	r0, [r3, #1576]	; 0x628
     f6c:	00000190 	muleq	r0, r0, r1
     f70:	000b850b 	andeq	r8, fp, fp, lsl #10
     f74:	05c50600 	strbeq	r0, [r5, #1536]	; 0x600
     f78:	000000cd 	andeq	r0, r0, sp, asr #1
     f7c:	0acd0b00 	beq	ff343b84 <APBAHBPrescTable+0xdf3427bc>
     f80:	c6060000 	strgt	r0, [r6], -r0
     f84:	0000cd05 	andeq	ip, r0, r5, lsl #26
     f88:	4d0b0400 	cfstrsmi	mvf0, [fp, #-0]
     f8c:	0600000c 	streq	r0, [r0], -ip
     f90:	00cd05c7 	sbceq	r0, sp, r7, asr #11
     f94:	0b080000 	bleq	200f9c <startup-0x1fdff064>
     f98:	00000b60 	andeq	r0, r0, r0, ror #22
     f9c:	cd05c806 	stcgt	8, cr12, [r5, #-24]	; 0xffffffe8
     fa0:	0c000000 	stceq	0, cr0, [r0], {-0}
     fa4:	5244490c 	subpl	r4, r4, #12, 18	; 0x30000
     fa8:	05c90600 	strbeq	r0, [r9, #1536]	; 0x600
     fac:	000000cd 	andeq	r0, r0, sp, asr #1
     fb0:	444f0c10 	strbmi	r0, [pc], #-3088	; fb8 <startup-0x1ffff048>
     fb4:	ca060052 	bgt	181104 <startup-0x1fe7eefc>
     fb8:	0000cd05 	andeq	ip, r0, r5, lsl #26
     fbc:	fe0b1400 	cdp2	4, 0, cr1, cr11, cr0, {0}
     fc0:	0600000c 	streq	r0, [r0], -ip
     fc4:	00ad05cb 	adceq	r0, sp, fp, asr #11
     fc8:	0b180000 	bleq	600fd0 <startup-0x1f9ff030>
     fcc:	00000b7f 	andeq	r0, r0, pc, ror fp
     fd0:	ad05cc06 	stcge	12, cr12, [r5, #-24]	; 0xffffffe8
     fd4:	1a000000 	bne	fdc <startup-0x1ffff024>
     fd8:	000ab60b 	andeq	fp, sl, fp, lsl #12
     fdc:	05cd0600 	strbeq	r0, [sp, #1536]	; 0x600
     fe0:	000000cd 	andeq	r0, r0, sp, asr #1
     fe4:	46410c1c 			; <UNDEFINED> instruction: 0x46410c1c
     fe8:	ce060052 	mcrgt	0, 0, r0, cr6, cr2, {2}
     fec:	0001a005 	andeq	sl, r1, r5
     ff0:	0d002000 	stceq	0, cr2, [r0, #-0]
     ff4:	000000cd 	andeq	r0, r0, sp, asr #1
     ff8:	000001a0 	andeq	r0, r0, r0, lsr #3
     ffc:	0000900e 	andeq	r9, r0, lr
    1000:	05000100 	streq	r0, [r0, #-256]	; 0xffffff00
    1004:	00000190 	muleq	r0, r0, r1
    1008:	0009cc0f 	andeq	ip, r9, pc, lsl #24
    100c:	05cf0600 	strbeq	r0, [pc, #1536]	; 1614 <startup-0x1fffe9ec>
    1010:	00000104 	andeq	r0, r0, r4, lsl #2
    1014:	37010710 	smladcc	r1, r0, r7, r0
    1018:	07000000 	streq	r0, [r0, -r0]
    101c:	0001d742 	andeq	sp, r1, r2, asr #14
    1020:	0b660900 	bleq	1983428 <startup-0x1e67cbd8>
    1024:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    1028:	00000b52 	andeq	r0, r0, r2, asr fp
    102c:	0a6b0901 	beq	1ac3438 <startup-0x1e53cbc8>
    1030:	09020000 	stmdbeq	r2, {}	; <UNPREDICTABLE>
    1034:	00000a9a 	muleq	r0, sl, sl
    1038:	05030003 	streq	r0, [r3, #-3]
    103c:	0700000a 	streq	r0, [r0, -sl]
    1040:	0001b147 	andeq	fp, r1, r7, asr #2
    1044:	01071000 	mrseq	r1, (UNDEF: 7)
    1048:	00000037 	andeq	r0, r0, r7, lsr r0
    104c:	01fc4f07 	mvnseq	r4, r7, lsl #30
    1050:	a1090000 	mrsge	r0, (UNDEF: 9)
    1054:	0000000b 	andeq	r0, r0, fp
    1058:	000a3a09 	andeq	r3, sl, r9, lsl #20
    105c:	03000100 	movweq	r0, #256	; 0x100
    1060:	00000abb 			; <UNDEFINED> instruction: 0x00000abb
    1064:	01e25207 	mvneq	r5, r7, lsl #4
    1068:	07100000 	ldreq	r0, [r0, -r0]
    106c:	00003701 	andeq	r3, r0, r1, lsl #14
    1070:	2d5a0700 	ldclcs	7, cr0, [sl, #-0]
    1074:	09000002 	stmdbeq	r0, {r1}
    1078:	00000c2c 	andeq	r0, r0, ip, lsr #24
    107c:	0c3b0900 			; <UNDEFINED> instruction: 0x0c3b0900
    1080:	09010000 	stmdbeq	r1, {}	; <UNPREDICTABLE>
    1084:	00000be9 	andeq	r0, r0, r9, ror #23
    1088:	0cbf0902 			; <UNDEFINED> instruction: 0x0cbf0902
    108c:	00030000 	andeq	r0, r3, r0
    1090:	000c5b03 	andeq	r5, ip, r3, lsl #22
    1094:	075f0700 	ldrbeq	r0, [pc, -r0, lsl #14]
    1098:	10000002 	andne	r0, r0, r2
    109c:	00370107 	eorseq	r0, r7, r7, lsl #2
    10a0:	6e070000 	cdpvs	0, 0, cr0, cr7, cr0, {0}
    10a4:	00000258 	andeq	r0, r0, r8, asr r2
    10a8:	000c7c09 	andeq	r7, ip, r9, lsl #24
    10ac:	e0090000 	and	r0, r9, r0
    10b0:	0100000c 	tsteq	r0, ip
    10b4:	000c6d09 	andeq	r6, ip, r9, lsl #26
    10b8:	03000200 	movweq	r0, #512	; 0x200
    10bc:	00000ccf 	andeq	r0, r0, pc, asr #25
    10c0:	02387207 	eorseq	r7, r8, #1879048192	; 0x70000000
    10c4:	07100000 	ldreq	r0, [r0, -r0]
    10c8:	00003701 	andeq	r3, r0, r1, lsl #14
    10cc:	7d7a0700 	ldclvc	7, cr0, [sl, #-0]
    10d0:	09000002 	stmdbeq	r0, {r1}
    10d4:	00000a48 	andeq	r0, r0, r8, asr #20
    10d8:	09e90900 	stmibeq	r9!, {r8, fp}^
    10dc:	00010000 	andeq	r0, r1, r0
    10e0:	000c0c03 	andeq	r0, ip, r3, lsl #24
    10e4:	637d0700 	cmnvs	sp, #0, 14
    10e8:	11000002 	tstne	r0, r2
    10ec:	cd840708 	stcgt	7, cr0, [r4, #32]
    10f0:	12000002 	andne	r0, r0, #2
    10f4:	000009e0 	andeq	r0, r0, r0, ror #19
    10f8:	00c28607 	sbceq	r8, r2, r7, lsl #12
    10fc:	12000000 	andne	r0, r0, #0
    1100:	00000d1b 	andeq	r0, r0, fp, lsl sp
    1104:	01d78907 	bicseq	r8, r7, r7, lsl #18
    1108:	12040000 	andne	r0, r4, #0
    110c:	00000a85 	andeq	r0, r0, r5, lsl #21
    1110:	022d8c07 	eoreq	r8, sp, #1792	; 0x700
    1114:	12050000 	andne	r0, r5, #0
    1118:	00000a60 	andeq	r0, r0, r0, ror #20
    111c:	01fc8f07 	mvnseq	r8, r7, lsl #30
    1120:	12060000 	andne	r0, r6, #0
    1124:	00000ca4 	andeq	r0, r0, r4, lsr #25
    1128:	02589207 	subseq	r9, r8, #1879048192	; 0x70000000
    112c:	00070000 	andeq	r0, r7, r0
    1130:	000cae03 	andeq	sl, ip, r3, lsl #28
    1134:	88940700 	ldmhi	r4, {r8, r9, sl}
    1138:	13000002 	movwne	r0, #2
    113c:	00000ced 	andeq	r0, r0, sp, ror #25
    1140:	6a024301 	bvs	91d4c <startup-0x1ff6e2b4>
    1144:	a4200011 	strtge	r0, [r0], #-17	; 0xffffffef
    1148:	01000000 	mrseq	r0, (UNDEF: 0)
    114c:	00033a9c 	muleq	r3, ip, sl
    1150:	0c551400 	cfldrdeq	mvd1, [r5], {-0}
    1154:	43010000 	movwmi	r0, #4096	; 0x1000
    1158:	00033a02 	andeq	r3, r3, r2, lsl #20
    115c:	6c910200 	lfmvs	f0, 4, [r1], {0}
    1160:	000bc714 	andeq	ip, fp, r4, lsl r7
    1164:	02430100 	subeq	r0, r3, #0, 2
    1168:	000000a2 	andeq	r0, r0, r2, lsr #1
    116c:	146a9102 	strbtne	r9, [sl], #-258	; 0xfffffefe
    1170:	00000a16 	andeq	r0, r0, r6, lsl sl
    1174:	97024301 	strls	r4, [r2, -r1, lsl #6]
    1178:	02000000 	andeq	r0, r0, #0
    117c:	1e156991 			; <UNDEFINED> instruction: 0x1e156991
    1180:	0100000a 	tsteq	r0, sl
    1184:	00c20245 	sbceq	r0, r2, r5, asr #4
    1188:	91020000 	mrsls	r0, (UNDEF: 2)
    118c:	0c9d1574 	cfldr32eq	mvfx1, [sp], {116}	; 0x74
    1190:	46010000 	strmi	r0, [r1], -r0
    1194:	0000c202 	andeq	ip, r0, r2, lsl #4
    1198:	70910200 	addsvc	r0, r1, r0, lsl #4
    119c:	a5041600 	strge	r1, [r4, #-1536]	; 0xfffffa00
    11a0:	13000001 	movwne	r0, #1
    11a4:	00000c8d 	andeq	r0, r0, sp, lsl #25
    11a8:	4601f001 	strmi	pc, [r1], -r1
    11ac:	24200011 	strtcs	r0, [r0], #-17	; 0xffffffef
    11b0:	01000000 	mrseq	r0, (UNDEF: 0)
    11b4:	0003759c 	muleq	r3, ip, r5
    11b8:	0c551400 	cfldrdeq	mvd1, [r5], {-0}
    11bc:	f0010000 			; <UNDEFINED> instruction: 0xf0010000
    11c0:	00033a01 	andeq	r3, r3, r1, lsl #20
    11c4:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    11c8:	0009e014 	andeq	lr, r9, r4, lsl r0
    11cc:	01f00100 	mvnseq	r0, r0, lsl #2
    11d0:	000000a2 	andeq	r0, r0, r2, lsr #1
    11d4:	00729102 	rsbseq	r9, r2, r2, lsl #2
    11d8:	000c2113 	andeq	r2, ip, r3, lsl r1
    11dc:	01e00100 	mvneq	r0, r0, lsl #2
    11e0:	20001128 	andcs	r1, r0, r8, lsr #2
    11e4:	0000001e 	andeq	r0, r0, lr, lsl r0
    11e8:	03aa9c01 			; <UNDEFINED> instruction: 0x03aa9c01
    11ec:	55140000 	ldrpl	r0, [r4, #-0]
    11f0:	0100000c 	tsteq	r0, ip
    11f4:	033a01e0 	teqeq	sl, #224, 2	; 0x38
    11f8:	91020000 	mrsls	r0, (UNDEF: 2)
    11fc:	0bbf1474 	bleq	fefc63d4 <APBAHBPrescTable+0xdefc500c>
    1200:	e0010000 	and	r0, r1, r0
    1204:	0000a201 	andeq	sl, r0, r1, lsl #4
    1208:	72910200 	addsvc	r0, r1, #0, 4
    120c:	0a521300 	beq	1485e14 <startup-0x1eb7a1ec>
    1210:	c7010000 	strgt	r0, [r1, -r0]
    1214:	0010ee01 	andseq	lr, r0, r1, lsl #28
    1218:	00003a20 	andeq	r3, r0, r0, lsr #20
    121c:	ee9c0100 	fmle	f0, f4, f0
    1220:	14000003 	strne	r0, [r0], #-3
    1224:	00000c55 	andeq	r0, r0, r5, asr ip
    1228:	3a01c701 	bcc	72e34 <startup-0x1ff8d1cc>
    122c:	02000003 	andeq	r0, r0, #3
    1230:	e0147491 	muls	r4, r1, r4
    1234:	01000009 	tsteq	r0, r9
    1238:	00a201c7 	adceq	r0, r2, r7, asr #3
    123c:	91020000 	mrsls	r0, (UNDEF: 2)
    1240:	0a331472 	beq	cc6410 <startup-0x1f339bf0>
    1244:	c7010000 	strgt	r0, [r1, -r0]
    1248:	00027d01 	andeq	r7, r2, r1, lsl #26
    124c:	71910200 	orrsvc	r0, r1, r0, lsl #4
    1250:	0aa71300 	beq	fe9c5e58 <APBAHBPrescTable+0xde9c4a90>
    1254:	b1010000 	mrslt	r0, (UNDEF: 1)
    1258:	0010d001 	andseq	sp, r0, r1
    125c:	00001e20 	andeq	r1, r0, r0, lsr #28
    1260:	239c0100 	orrscs	r0, ip, #0, 2
    1264:	14000004 	strne	r0, [r0], #-4
    1268:	00000c55 	andeq	r0, r0, r5, asr ip
    126c:	3a01b101 	bcc	6d678 <startup-0x1ff92988>
    1270:	02000003 	andeq	r0, r0, #3
    1274:	e0147491 	muls	r4, r1, r4
    1278:	01000009 	tsteq	r0, r9
    127c:	00a201b1 	strhteq	r0, [r2], r1
    1280:	91020000 	mrsls	r0, (UNDEF: 2)
    1284:	78130072 	ldmdavc	r3, {r1, r4, r5, r6}
    1288:	0100000a 	tsteq	r0, sl
    128c:	10b2019c 	umlalsne	r0, r2, ip, r1
    1290:	001e2000 	andseq	r2, lr, r0
    1294:	9c010000 	stcls	0, cr0, [r1], {-0}
    1298:	00000458 	andeq	r0, r0, r8, asr r4
    129c:	000c5514 	andeq	r5, ip, r4, lsl r5
    12a0:	019c0100 	orrseq	r0, ip, r0, lsl #2
    12a4:	0000033a 	andeq	r0, r0, sl, lsr r3
    12a8:	14749102 	ldrbtne	r9, [r4], #-258	; 0xfffffefe
    12ac:	000009e0 	andeq	r0, r0, r0, ror #19
    12b0:	a2019c01 	andge	r9, r1, #256	; 0x100
    12b4:	02000000 	andeq	r0, r0, #0
    12b8:	17007291 			; <UNDEFINED> instruction: 0x17007291
    12bc:	000009f1 	strdeq	r0, [r0], -r1
    12c0:	a2018801 	andge	r8, r1, #65536	; 0x10000
    12c4:	9c000000 	stcls	0, cr0, [r0], {-0}
    12c8:	16200010 			; <UNDEFINED> instruction: 0x16200010
    12cc:	01000000 	mrseq	r0, (UNDEF: 0)
    12d0:	0004829c 	muleq	r4, ip, r2
    12d4:	0c551400 	cfldrdeq	mvd1, [r5], {-0}
    12d8:	88010000 	stmdahi	r1, {}	; <UNPREDICTABLE>
    12dc:	00033a01 	andeq	r3, r3, r1, lsl #20
    12e0:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    12e4:	0d041700 	stceq	7, cr1, [r4, #-0]
    12e8:	6e010000 	cdpvs	0, 0, cr0, cr1, cr0, {0}
    12ec:	00009701 	andeq	r9, r0, r1, lsl #14
    12f0:	00105a00 	andseq	r5, r0, r0, lsl #20
    12f4:	00004220 	andeq	r4, r0, r0, lsr #4
    12f8:	ca9c0100 	bgt	fe701700 <APBAHBPrescTable+0xde700338>
    12fc:	14000004 	strne	r0, [r0], #-4
    1300:	00000c55 	andeq	r0, r0, r5, asr ip
    1304:	3a016e01 	bcc	5cb10 <startup-0x1ffa34f0>
    1308:	02000003 	andeq	r0, r0, #3
    130c:	e0146c91 	muls	r4, r1, ip
    1310:	01000009 	tsteq	r0, r9
    1314:	00a2016e 	adceq	r0, r2, lr, ror #2
    1318:	91020000 	mrsls	r0, (UNDEF: 2)
    131c:	0326156a 			; <UNDEFINED> instruction: 0x0326156a
    1320:	70010000 	andvc	r0, r1, r0
    1324:	00009701 	andeq	r9, r0, r1, lsl #14
    1328:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    132c:	0bd61700 	bleq	ff586f34 <APBAHBPrescTable+0xdf585b6c>
    1330:	5d010000 	stcpl	0, cr0, [r1, #-0]
    1334:	0000a201 	andeq	sl, r0, r1, lsl #4
    1338:	00104400 	andseq	r4, r0, r0, lsl #8
    133c:	00001620 	andeq	r1, r0, r0, lsr #12
    1340:	f49c0100 			; <UNDEFINED> instruction: 0xf49c0100
    1344:	14000004 	strne	r0, [r0], #-4
    1348:	00000c55 	andeq	r0, r0, r5, asr ip
    134c:	3a015d01 	bcc	58758 <startup-0x1ffa78a8>
    1350:	02000003 	andeq	r0, r0, #3
    1354:	17007491 			; <UNDEFINED> instruction: 0x17007491
    1358:	00000b8b 	andeq	r0, r0, fp, lsl #23
    135c:	97014301 	strls	r4, [r1, -r1, lsl #6]
    1360:	02000000 	andeq	r0, r0, #0
    1364:	42200010 	eormi	r0, r0, #16
    1368:	01000000 	mrseq	r0, (UNDEF: 0)
    136c:	00053c9c 	muleq	r5, ip, ip
    1370:	0c551400 	cfldrdeq	mvd1, [r5], {-0}
    1374:	43010000 	movwmi	r0, #4096	; 0x1000
    1378:	00033a01 	andeq	r3, r3, r1, lsl #20
    137c:	6c910200 	lfmvs	f0, 4, [r1], {0}
    1380:	0009e014 	andeq	lr, r9, r4, lsl r0
    1384:	01430100 	mrseq	r0, (UNDEF: 83)
    1388:	000000a2 	andeq	r0, r0, r2, lsr #1
    138c:	156a9102 	strbne	r9, [sl, #-258]!	; 0xfffffefe
    1390:	00000326 	andeq	r0, r0, r6, lsr #6
    1394:	97014501 	strls	r4, [r1, -r1, lsl #10]
    1398:	02000000 	andeq	r0, r0, #0
    139c:	13007791 	movwne	r7, #1937	; 0x791
    13a0:	00000bf9 	strdeq	r0, [r0], -r9
    13a4:	bc011501 	cfstr32lt	mvfx1, [r1], {1}
    13a8:	4620000f 	strtmi	r0, [r0], -pc
    13ac:	01000000 	mrseq	r0, (UNDEF: 0)
    13b0:	0005809c 	muleq	r5, ip, r0
    13b4:	0c551400 	cfldrdeq	mvd1, [r5], {-0}
    13b8:	15010000 	strne	r0, [r1, #-0]
    13bc:	00033a01 	andeq	r3, r3, r1, lsl #20
    13c0:	6c910200 	lfmvs	f0, 4, [r1], {0}
    13c4:	0009e014 	andeq	lr, r9, r4, lsl r0
    13c8:	01150100 	tsteq	r5, r0, lsl #2
    13cc:	000000a2 	andeq	r0, r0, r2, lsr #1
    13d0:	186a9102 	stmdane	sl!, {r1, r8, ip, pc}^
    13d4:	00706d74 	rsbseq	r6, r0, r4, ror sp
    13d8:	cd011701 	stcgt	7, cr1, [r1, #-4]
    13dc:	02000000 	andeq	r0, r0, #0
    13e0:	19007491 	stmdbne	r0, {r0, r4, r7, sl, ip, sp, lr}
    13e4:	00000a23 	andeq	r0, r0, r3, lsr #20
    13e8:	0f88fe01 	svceq	0x0088fe01
    13ec:	00342000 	eorseq	r2, r4, r0
    13f0:	9c010000 	stcls	0, cr0, [r1], {-0}
    13f4:	000005a4 	andeq	r0, r0, r4, lsr #11
    13f8:	000baf1a 	andeq	sl, fp, sl, lsl pc
    13fc:	a4fe0100 	ldrbtge	r0, [lr], #256	; 0x100
    1400:	02000005 	andeq	r0, r0, #5
    1404:	16007491 			; <UNDEFINED> instruction: 0x16007491
    1408:	0002cd04 	andeq	ip, r2, r4, lsl #26
    140c:	0a901900 	beq	fe407814 <APBAHBPrescTable+0xde40644c>
    1410:	ca010000 	bgt	41418 <startup-0x1ffbebe8>
    1414:	20000e70 	andcs	r0, r0, r0, ror lr
    1418:	00000118 	andeq	r0, r0, r8, lsl r1
    141c:	06069c01 	streq	r9, [r6], -r1, lsl #24
    1420:	551a0000 	ldrpl	r0, [sl, #-0]
    1424:	0100000c 	tsteq	r0, ip
    1428:	00033aca 	andeq	r3, r3, sl, asr #21
    142c:	64910200 	ldrvs	r0, [r1], #512	; 0x200
    1430:	000baf1a 	andeq	sl, fp, sl, lsl pc
    1434:	a4ca0100 	strbge	r0, [sl], #256	; 0x100
    1438:	02000005 	andeq	r0, r0, #5
    143c:	d91b6091 	ldmdble	fp, {r0, r4, r7, sp, lr}
    1440:	01000009 	tsteq	r0, r9
    1444:	0000c2cc 	andeq	ip, r0, ip, asr #5
    1448:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    144c:	736f701c 	cmnvc	pc, #28
    1450:	c2cc0100 	sbcgt	r0, ip, #0, 2
    1454:	02000000 	andeq	r0, r0, #0
    1458:	161b7091 			; <UNDEFINED> instruction: 0x161b7091
    145c:	0100000c 	tsteq	r0, ip
    1460:	0000c2cc 	andeq	ip, r0, ip, asr #5
    1464:	6c910200 	lfmvs	f0, 4, [r1], {0}
    1468:	0b731d00 	bleq	1cc8870 <startup-0x1e337790>
    146c:	7f010000 	svcvc	0x00010000
    1470:	20000d00 	andcs	r0, r0, r0, lsl #26
    1474:	00000170 	andeq	r0, r0, r0, ror r1
    1478:	551a9c01 	ldrpl	r9, [sl, #-3073]	; 0xfffff3ff
    147c:	0100000c 	tsteq	r0, ip
    1480:	00033a7f 	andeq	r3, r3, pc, ror sl
    1484:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    1488:	02e70000 	rsceq	r0, r7, #0
    148c:	00040000 	andeq	r0, r4, r0
    1490:	000003a7 	andeq	r0, r0, r7, lsr #7
    1494:	04bd0104 	ldrteq	r0, [sp], #260	; 0x104
    1498:	3b0c0000 	blcc	3014a0 <startup-0x1fcfeb60>
    149c:	1200000d 	andne	r0, r0, #13
    14a0:	00000009 	andeq	r0, r0, r9
    14a4:	00000000 	andeq	r0, r0, r0
    14a8:	72000000 	andvc	r0, r0, #0
    14ac:	02000006 	andeq	r0, r0, #6
    14b0:	08550601 	ldmdaeq	r5, {r0, r9, sl}^
    14b4:	01020000 	mrseq	r0, (UNDEF: 2)
    14b8:	00085308 	andeq	r5, r8, r8, lsl #6
    14bc:	05020200 	streq	r0, [r2, #-512]	; 0xfffffe00
    14c0:	000006b4 			; <UNDEFINED> instruction: 0x000006b4
    14c4:	0007e503 	andeq	lr, r7, r3, lsl #10
    14c8:	45390200 	ldrmi	r0, [r9, #-512]!	; 0xfffffe00
    14cc:	02000000 	andeq	r0, r0, #0
    14d0:	04040702 	streq	r0, [r4], #-1794	; 0xfffff8fe
    14d4:	0c030000 	stceq	0, cr0, [r3], {-0}
    14d8:	02000008 	andeq	r0, r0, #8
    14dc:	0000574d 	andeq	r5, r0, sp, asr #14
    14e0:	05040200 	streq	r0, [r4, #-512]	; 0xfffffe00
    14e4:	0000020e 	andeq	r0, r0, lr, lsl #4
    14e8:	0002d703 	andeq	sp, r2, r3, lsl #14
    14ec:	694f0200 	stmdbvs	pc, {r9}^	; <UNPREDICTABLE>
    14f0:	02000000 	andeq	r0, r0, #0
    14f4:	00e00704 	rsceq	r0, r0, r4, lsl #14
    14f8:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    14fc:	00020905 	andeq	r0, r2, r5, lsl #18
    1500:	07080200 	streq	r0, [r8, -r0, lsl #4]
    1504:	000000db 	ldrdeq	r0, [r0], -fp
    1508:	69050404 	stmdbvs	r5, {r2, sl}
    150c:	0200746e 	andeq	r7, r0, #1845493760	; 0x6e000000
    1510:	00e50704 	rsceq	r0, r5, r4, lsl #14
    1514:	e7030000 	str	r0, [r3, -r0]
    1518:	03000007 	movweq	r0, #7
    151c:	00003a24 	andeq	r3, r0, r4, lsr #20
    1520:	008c0500 	addeq	r0, ip, r0, lsl #10
    1524:	0e030000 	cdpeq	0, 0, cr0, cr3, cr0, {0}
    1528:	03000008 	movweq	r0, #8
    152c:	00004c2c 	andeq	r4, r0, ip, lsr #24
    1530:	009c0500 	addseq	r0, ip, r0, lsl #10
    1534:	d9030000 	stmdble	r3, {}	; <UNPREDICTABLE>
    1538:	03000002 	movweq	r0, #2
    153c:	00005e30 	andeq	r5, r0, r0, lsr lr
    1540:	00ac0500 	adceq	r0, ip, r0, lsl #10
    1544:	97060000 	strls	r0, [r6, -r0]
    1548:	04000006 	streq	r0, [r0], #-6
    154c:	00a706fa 	strdeq	r0, [r7], sl	; <UNPREDICTABLE>
    1550:	5d070000 	stcpl	0, cr0, [r7, #-0]
    1554:	05000003 	streq	r0, [r0, #-3]
    1558:	0000ac3b 	andeq	sl, r0, fp, lsr ip
    155c:	01070800 	tsteq	r7, r0, lsl #16
    1560:	0000002c 	andeq	r0, r0, ip, lsr #32
    1564:	ee035f06 	cdp	15, 0, cr5, cr3, cr6, {0}
    1568:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    156c:	00000355 	andeq	r0, r0, r5, asr r3
    1570:	01950900 	orrseq	r0, r5, r0, lsl #18
    1574:	00010000 	andeq	r0, r1, r0
    1578:	c306280a 	movwgt	r2, #26634	; 0x680a
    157c:	00017a05 	andeq	r7, r1, r5, lsl #20
    1580:	0b850b00 	bleq	fe144188 <APBAHBPrescTable+0xde142dc0>
    1584:	c5060000 	strgt	r0, [r6, #-0]
    1588:	0000b705 	andeq	fp, r0, r5, lsl #14
    158c:	cd0b0000 	stcgt	0, cr0, [fp, #-0]
    1590:	0600000a 	streq	r0, [r0], -sl
    1594:	00b705c6 	adcseq	r0, r7, r6, asr #11
    1598:	0b040000 	bleq	1015a0 <startup-0x1fefea60>
    159c:	00000c4d 	andeq	r0, r0, sp, asr #24
    15a0:	b705c706 	strlt	ip, [r5, -r6, lsl #14]
    15a4:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    15a8:	000b600b 	andeq	r6, fp, fp
    15ac:	05c80600 	strbeq	r0, [r8, #1536]	; 0x600
    15b0:	000000b7 	strheq	r0, [r0], -r7
    15b4:	44490c0c 	strbmi	r0, [r9], #-3084	; 0xfffff3f4
    15b8:	c9060052 	stmdbgt	r6, {r1, r4, r6}
    15bc:	0000b705 	andeq	fp, r0, r5, lsl #14
    15c0:	4f0c1000 	svcmi	0x000c1000
    15c4:	06005244 	streq	r5, [r0], -r4, asr #4
    15c8:	00b705ca 	adcseq	r0, r7, sl, asr #11
    15cc:	0b140000 	bleq	5015d4 <startup-0x1fafea2c>
    15d0:	00000cfe 	strdeq	r0, [r0], -lr
    15d4:	9705cb06 	strls	ip, [r5, -r6, lsl #22]
    15d8:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    15dc:	000b7f0b 	andeq	r7, fp, fp, lsl #30
    15e0:	05cc0600 	strbeq	r0, [ip, #1536]	; 0x600
    15e4:	00000097 	muleq	r0, r7, r0
    15e8:	0ab60b1a 	beq	fed84258 <APBAHBPrescTable+0xded82e90>
    15ec:	cd060000 	stcgt	0, cr0, [r6, #-0]
    15f0:	0000b705 	andeq	fp, r0, r5, lsl #14
    15f4:	410c1c00 	tstmi	ip, r0, lsl #24
    15f8:	06005246 	streq	r5, [r0], -r6, asr #4
    15fc:	018a05ce 	orreq	r0, sl, lr, asr #11
    1600:	00200000 	eoreq	r0, r0, r0
    1604:	0000b70d 	andeq	fp, r0, sp, lsl #14
    1608:	00018a00 	andeq	r8, r1, r0, lsl #20
    160c:	00850e00 	addeq	r0, r5, r0, lsl #28
    1610:	00010000 	andeq	r0, r1, r0
    1614:	00017a05 	andeq	r7, r1, r5, lsl #20
    1618:	09cc0f00 	stmibeq	ip, {r8, r9, sl, fp}^
    161c:	cf060000 	svcgt	0x00060000
    1620:	0000ee05 	andeq	lr, r0, r5, lsl #28
    1624:	01071000 	mrseq	r1, (UNDEF: 7)
    1628:	0000002c 	andeq	r0, r0, ip, lsr #32
    162c:	01c14207 	biceq	r4, r1, r7, lsl #4
    1630:	66090000 	strvs	r0, [r9], -r0
    1634:	0000000b 	andeq	r0, r0, fp
    1638:	000b5209 	andeq	r5, fp, r9, lsl #4
    163c:	6b090100 	blvs	241a44 <startup-0x1fdbe5bc>
    1640:	0200000a 	andeq	r0, r0, #10
    1644:	000a9a09 	andeq	r9, sl, r9, lsl #20
    1648:	03000300 	movweq	r0, #768	; 0x300
    164c:	00000a05 	andeq	r0, r0, r5, lsl #20
    1650:	019b4707 	orrseq	r4, fp, r7, lsl #14
    1654:	07100000 	ldreq	r0, [r0, -r0]
    1658:	00002c01 	andeq	r2, r0, r1, lsl #24
    165c:	e64f0700 	strb	r0, [pc], -r0, lsl #14
    1660:	09000001 	stmdbeq	r0, {r0}
    1664:	00000ba1 	andeq	r0, r0, r1, lsr #23
    1668:	0a3a0900 	beq	e83a70 <startup-0x1f17c590>
    166c:	00010000 	andeq	r0, r1, r0
    1670:	000abb03 	andeq	fp, sl, r3, lsl #22
    1674:	cc520700 	mrrcgt	7, 0, r0, r2, cr0
    1678:	10000001 	andne	r0, r0, r1
    167c:	002c0107 	eoreq	r0, ip, r7, lsl #2
    1680:	5a070000 	bpl	1c1688 <startup-0x1fe3e978>
    1684:	00000217 	andeq	r0, r0, r7, lsl r2
    1688:	000c2c09 	andeq	r2, ip, r9, lsl #24
    168c:	3b090000 	blcc	241694 <startup-0x1fdbe96c>
    1690:	0100000c 	tsteq	r0, ip
    1694:	000be909 	andeq	lr, fp, r9, lsl #18
    1698:	bf090200 	svclt	0x00090200
    169c:	0300000c 	movweq	r0, #12
    16a0:	0c5b0300 	mrrceq	3, 0, r0, fp, cr0
    16a4:	5f070000 	svcpl	0x00070000
    16a8:	000001f1 	strdeq	r0, [r0], -r1
    16ac:	2c010710 	stccs	7, cr0, [r1], {16}
    16b0:	07000000 	streq	r0, [r0, -r0]
    16b4:	0002426e 	andeq	r4, r2, lr, ror #4
    16b8:	0c7c0900 			; <UNDEFINED> instruction: 0x0c7c0900
    16bc:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    16c0:	00000ce0 	andeq	r0, r0, r0, ror #25
    16c4:	0c6d0901 			; <UNDEFINED> instruction: 0x0c6d0901
    16c8:	00020000 	andeq	r0, r2, r0
    16cc:	000ccf03 	andeq	ip, ip, r3, lsl #30
    16d0:	22720700 	rsbscs	r0, r2, #0, 14
    16d4:	11000002 	tstne	r0, r2
    16d8:	92840708 	addls	r0, r4, #8, 14	; 0x200000
    16dc:	12000002 	andne	r0, r0, #2
    16e0:	000009e0 	andeq	r0, r0, r0, ror #19
    16e4:	00ac8607 	adceq	r8, ip, r7, lsl #12
    16e8:	12000000 	andne	r0, r0, #0
    16ec:	00000d1b 	andeq	r0, r0, fp, lsl sp
    16f0:	01c18907 	biceq	r8, r1, r7, lsl #18
    16f4:	12040000 	andne	r0, r4, #0
    16f8:	00000a85 	andeq	r0, r0, r5, lsl #21
    16fc:	02178c07 	andseq	r8, r7, #1792	; 0x700
    1700:	12050000 	andne	r0, r5, #0
    1704:	00000a60 	andeq	r0, r0, r0, ror #20
    1708:	01e68f07 	mvneq	r8, r7, lsl #30
    170c:	12060000 	andne	r0, r6, #0
    1710:	00000ca4 	andeq	r0, r0, r4, lsr #25
    1714:	02429207 	subeq	r9, r2, #1879048192	; 0x70000000
    1718:	00070000 	andeq	r0, r7, r0
    171c:	000cae03 	andeq	sl, ip, r3, lsl #28
    1720:	4d940700 	ldcmi	7, cr0, [r4]
    1724:	02000002 	andeq	r0, r0, #2
    1728:	085c0801 	ldmdaeq	ip, {r0, fp}^
    172c:	36130000 	ldrcc	r0, [r3], -r0
    1730:	0100000d 	tsteq	r0, sp
    1734:	0012782b 	andseq	r7, r2, fp, lsr #16
    1738:	00003820 	andeq	r3, r0, r0, lsr #16
    173c:	149c0100 	ldrne	r0, [ip], #256	; 0x100
    1740:	00000d2d 	andeq	r0, r0, sp, lsr #26
    1744:	12101601 	andsne	r1, r0, #1048576	; 0x100000
    1748:	00682000 	rsbeq	r2, r8, r0
    174c:	9c010000 	stcls	0, cr0, [r1], {-0}
    1750:	000002d9 	ldrdeq	r0, [r0], -r9
    1754:	000d3115 	andeq	r3, sp, r5, lsl r1
    1758:	92180100 	andsls	r0, r8, #0, 2
    175c:	02000002 	andeq	r0, r0, #2
    1760:	16007091 			; <UNDEFINED> instruction: 0x16007091
    1764:	00000d25 	andeq	r0, r0, r5, lsr #26
    1768:	00000c01 	andeq	r0, r0, r1, lsl #24
    176c:	000c2000 	andeq	r2, ip, r0
    1770:	9c010000 	stcls	0, cr0, [r1], {-0}
	...

Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
   0:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
   4:	030b130e 	movweq	r1, #45838	; 0xb30e
   8:	110e1b0e 	tstne	lr, lr, lsl #22
   c:	10061201 	andne	r1, r6, r1, lsl #4
  10:	02000017 	andeq	r0, r0, #23
  14:	0b0b0024 	bleq	2c00ac <startup-0x1fd3ff54>
  18:	0e030b3e 	vmoveq.16	d3[0], r0
  1c:	16030000 	strne	r0, [r3], -r0
  20:	3a0e0300 	bcc	380c28 <startup-0x1fc7f3d8>
  24:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
  28:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
  2c:	0b0b0024 	bleq	2c00c4 <startup-0x1fd3ff3c>
  30:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
  34:	26050000 	strcs	r0, [r5], -r0
  38:	00134900 	andseq	r4, r3, r0, lsl #18
  3c:	00350600 	eorseq	r0, r5, r0, lsl #12
  40:	00001349 	andeq	r1, r0, r9, asr #6
  44:	49010107 	stmdbmi	r1, {r0, r1, r2, r8}
  48:	00130113 	andseq	r0, r3, r3, lsl r1
  4c:	00210800 	eoreq	r0, r1, r0, lsl #16
  50:	0b2f1349 	bleq	bc4d7c <startup-0x1f43b284>
  54:	34090000 	strcc	r0, [r9], #-0
  58:	3a0e0300 	bcc	380c60 <startup-0x1fc7f3a0>
  5c:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
  60:	3c193f13 	ldccc	15, cr3, [r9], {19}
  64:	0a000019 	beq	d0 <startup-0x1fffff30>
  68:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
  6c:	0b3b0b3a 	bleq	ec2d5c <startup-0x1f13d2a4>
  70:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
  74:	0000193c 	andeq	r1, r0, ip, lsr r9
  78:	3e01040b 	cdpcc	4, 0, cr0, cr1, cr11, {0}
  7c:	490b0b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp}
  80:	3b0b3a13 	blcc	2ce8d4 <startup-0x1fd3172c>
  84:	00130105 	andseq	r0, r3, r5, lsl #2
  88:	00280c00 	eoreq	r0, r8, r0, lsl #24
  8c:	0b1c0e03 	bleq	7038a0 <startup-0x1f8fc760>
  90:	280d0000 	stmdacs	sp, {}	; <UNPREDICTABLE>
  94:	1c080300 	stcne	3, cr0, [r8], {-0}
  98:	0e00000b 	cdpeq	0, 0, cr0, cr0, cr11, {0}
  9c:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
  a0:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
  a4:	00001349 	andeq	r1, r0, r9, asr #6
  a8:	0b01130f 	bleq	44cec <startup-0x1ffbb314>
  ac:	3b0b3a0b 	blcc	2ce8e0 <startup-0x1fd31720>
  b0:	00130105 	andseq	r0, r3, r5, lsl #2
  b4:	000d1000 	andeq	r1, sp, r0
  b8:	0b3a0803 	bleq	e820cc <startup-0x1f17df34>
  bc:	1349053b 	movtne	r0, #38203	; 0x953b
  c0:	00000b38 	andeq	r0, r0, r8, lsr fp
  c4:	03000d11 	movweq	r0, #3345	; 0xd11
  c8:	3b0b3a0e 	blcc	2ce908 <startup-0x1fd316f8>
  cc:	38134905 	ldmdacc	r3, {r0, r2, r8, fp, lr}
  d0:	1200000b 	andne	r0, r0, #11
  d4:	0b0b0113 	bleq	2c0528 <startup-0x1fd3fad8>
  d8:	0b3b0b3a 	bleq	ec2dc8 <startup-0x1f13d238>
  dc:	00001301 	andeq	r1, r0, r1, lsl #6
  e0:	03000d13 	movweq	r0, #3347	; 0xd13
  e4:	3b0b3a0e 	blcc	2ce924 <startup-0x1fd316dc>
  e8:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
  ec:	1400000b 	strne	r0, [r0], #-11
  f0:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
  f4:	0b3b0b3a 	bleq	ec2de4 <startup-0x1f13d21c>
  f8:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
  fc:	2e150000 	cdpcs	0, 1, cr0, cr5, cr0, {0}
 100:	03193f01 	tsteq	r9, #1, 30
 104:	3b0b3a0e 	blcc	2ce944 <startup-0x1fd316bc>
 108:	11192705 	tstne	r9, r5, lsl #14
 10c:	40061201 	andmi	r1, r6, r1, lsl #4
 110:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 114:	00001301 	andeq	r1, r0, r1, lsl #6
 118:	03000516 	movweq	r0, #1302	; 0x516
 11c:	3b0b3a0e 	blcc	2ce95c <startup-0x1fd316a4>
 120:	02134905 	andseq	r4, r3, #81920	; 0x14000
 124:	17000018 	smladne	r0, r8, r0, r0
 128:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 12c:	0b3a0e03 	bleq	e83940 <startup-0x1f17c6c0>
 130:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
 134:	01111349 	tsteq	r1, r9, asr #6
 138:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 13c:	01194297 			; <UNDEFINED> instruction: 0x01194297
 140:	18000013 	stmdane	r0, {r0, r1, r4}
 144:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 148:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 14c:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 150:	2e190000 	cdpcs	0, 1, cr0, cr9, cr0, {0}
 154:	03193f00 	tsteq	r9, #0, 30
 158:	3b0b3a0e 	blcc	2ce998 <startup-0x1fd31668>
 15c:	11192705 	tstne	r9, r5, lsl #14
 160:	40061201 	andmi	r1, r6, r1, lsl #4
 164:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 168:	341a0000 	ldrcc	r0, [sl], #-0
 16c:	3a080300 	bcc	200d74 <startup-0x1fdff28c>
 170:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 174:	00180213 	andseq	r0, r8, r3, lsl r2
 178:	012e1b00 			; <UNDEFINED> instruction: 0x012e1b00
 17c:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 180:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 184:	01111927 	tsteq	r1, r7, lsr #18
 188:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 18c:	01194296 			; <UNDEFINED> instruction: 0x01194296
 190:	1c000013 	stcne	0, cr0, [r0], {19}
 194:	0b0b000f 	bleq	2c01d8 <startup-0x1fd3fe28>
 198:	00001349 	andeq	r1, r0, r9, asr #6
 19c:	3f002e1d 	svccc	0x00002e1d
 1a0:	3a0e0319 	bcc	380e0c <startup-0x1fc7f1f4>
 1a4:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
 1a8:	11134919 	tstne	r3, r9, lsl r9
 1ac:	40061201 	andmi	r1, r6, r1, lsl #4
 1b0:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 1b4:	2e1e0000 	cdpcs	0, 1, cr0, cr14, cr0, {0}
 1b8:	03193f01 	tsteq	r9, #1, 30
 1bc:	3b0b3a0e 	blcc	2ce9fc <startup-0x1fd31604>
 1c0:	49192705 	ldmdbmi	r9, {r0, r2, r8, r9, sl, sp}
 1c4:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
 1c8:	96184006 	ldrls	r4, [r8], -r6
 1cc:	13011942 	movwne	r1, #6466	; 0x1942
 1d0:	2e1f0000 	cdpcs	0, 1, cr0, cr15, cr0, {0}
 1d4:	03193f00 	tsteq	r9, #0, 30
 1d8:	3b0b3a0e 	blcc	2cea18 <startup-0x1fd315e8>
 1dc:	1119270b 	tstne	r9, fp, lsl #14
 1e0:	40061201 	andmi	r1, r6, r1, lsl #4
 1e4:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 1e8:	01000000 	mrseq	r0, (UNDEF: 0)
 1ec:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
 1f0:	0e030b13 	vmoveq.32	d3[0], r0
 1f4:	01110e1b 	tsteq	r1, fp, lsl lr
 1f8:	17100612 			; <UNDEFINED> instruction: 0x17100612
 1fc:	24020000 	strcs	r0, [r2], #-0
 200:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 204:	000e030b 	andeq	r0, lr, fp, lsl #6
 208:	00160300 	andseq	r0, r6, r0, lsl #6
 20c:	0b3a0e03 	bleq	e83a20 <startup-0x1f17c5e0>
 210:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 214:	24040000 	strcs	r0, [r4], #-0
 218:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 21c:	0008030b 	andeq	r0, r8, fp, lsl #6
 220:	00350500 	eorseq	r0, r5, r0, lsl #10
 224:	00001349 	andeq	r1, r0, r9, asr #6
 228:	03003406 	movweq	r3, #1030	; 0x406
 22c:	3b0b3a0e 	blcc	2cea6c <startup-0x1fd31594>
 230:	3f134905 	svccc	0x00134905
 234:	00193c19 	andseq	r3, r9, r9, lsl ip
 238:	00340700 	eorseq	r0, r4, r0, lsl #14
 23c:	0b3a0e03 	bleq	e83a50 <startup-0x1f17c5b0>
 240:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 244:	193c193f 	ldmdbne	ip!, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
 248:	04080000 	streq	r0, [r8], #-0
 24c:	0b0b3e01 	bleq	2cfa58 <startup-0x1fd305a8>
 250:	3a13490b 	bcc	4d2684 <startup-0x1fb2d97c>
 254:	01053b0b 	tsteq	r5, fp, lsl #22
 258:	09000013 	stmdbeq	r0, {r0, r1, r4}
 25c:	0e030028 	cdpeq	0, 0, cr0, cr3, cr8, {1}
 260:	00000b1c 	andeq	r0, r0, ip, lsl fp
 264:	0b01130a 	bleq	44e94 <startup-0x1ffbb16c>
 268:	3b0b3a0b 	blcc	2cea9c <startup-0x1fd31564>
 26c:	00130105 	andseq	r0, r3, r5, lsl #2
 270:	000d0b00 	andeq	r0, sp, r0, lsl #22
 274:	0b3a0e03 	bleq	e83a88 <startup-0x1f17c578>
 278:	1349053b 	movtne	r0, #38203	; 0x953b
 27c:	00000b38 	andeq	r0, r0, r8, lsr fp
 280:	03000d0c 	movweq	r0, #3340	; 0xd0c
 284:	3b0b3a08 	blcc	2ceaac <startup-0x1fd31554>
 288:	38134905 	ldmdacc	r3, {r0, r2, r8, fp, lr}
 28c:	0d00000b 	stceq	0, cr0, [r0, #-44]	; 0xffffffd4
 290:	13490101 	movtne	r0, #37121	; 0x9101
 294:	00001301 	andeq	r1, r0, r1, lsl #6
 298:	4900210e 	stmdbmi	r0, {r1, r2, r3, r8, sp}
 29c:	000b2f13 	andeq	r2, fp, r3, lsl pc
 2a0:	00160f00 	andseq	r0, r6, r0, lsl #30
 2a4:	0b3a0e03 	bleq	e83ab8 <startup-0x1f17c548>
 2a8:	1349053b 	movtne	r0, #38203	; 0x953b
 2ac:	04100000 	ldreq	r0, [r0], #-0
 2b0:	0b0b3e01 	bleq	2cfabc <startup-0x1fd30544>
 2b4:	3a13490b 	bcc	4d26e8 <startup-0x1fb2d918>
 2b8:	010b3b0b 	tsteq	fp, fp, lsl #22
 2bc:	11000013 	tstne	r0, r3, lsl r0
 2c0:	0b0b0113 	bleq	2c0714 <startup-0x1fd3f8ec>
 2c4:	0b3b0b3a 	bleq	ec2fb4 <startup-0x1f13d04c>
 2c8:	00001301 	andeq	r1, r0, r1, lsl #6
 2cc:	03000d12 	movweq	r0, #3346	; 0xd12
 2d0:	3b0b3a0e 	blcc	2ceb10 <startup-0x1fd314f0>
 2d4:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
 2d8:	1300000b 	movwne	r0, #11
 2dc:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 2e0:	0b3a0e03 	bleq	e83af4 <startup-0x1f17c50c>
 2e4:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
 2e8:	06120111 			; <UNDEFINED> instruction: 0x06120111
 2ec:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 2f0:	00130119 	andseq	r0, r3, r9, lsl r1
 2f4:	00051400 	andeq	r1, r5, r0, lsl #8
 2f8:	0b3a0e03 	bleq	e83b0c <startup-0x1f17c4f4>
 2fc:	1349053b 	movtne	r0, #38203	; 0x953b
 300:	00001802 	andeq	r1, r0, r2, lsl #16
 304:	03003415 	movweq	r3, #1045	; 0x415
 308:	3b0b3a0e 	blcc	2ceb48 <startup-0x1fd314b8>
 30c:	02134905 	andseq	r4, r3, #81920	; 0x14000
 310:	16000018 			; <UNDEFINED> instruction: 0x16000018
 314:	0b0b000f 	bleq	2c0358 <startup-0x1fd3fca8>
 318:	00001349 	andeq	r1, r0, r9, asr #6
 31c:	3f012e17 	svccc	0x00012e17
 320:	3a0e0319 	bcc	380f8c <startup-0x1fc7f074>
 324:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
 328:	11134919 	tstne	r3, r9, lsl r9
 32c:	40061201 	andmi	r1, r6, r1, lsl #4
 330:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 334:	00001301 	andeq	r1, r0, r1, lsl #6
 338:	03003418 	movweq	r3, #1048	; 0x418
 33c:	3b0b3a08 	blcc	2ceb64 <startup-0x1fd3149c>
 340:	02134905 	andseq	r4, r3, #81920	; 0x14000
 344:	19000018 	stmdbne	r0, {r3, r4}
 348:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 34c:	0b3a0e03 	bleq	e83b60 <startup-0x1f17c4a0>
 350:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 354:	06120111 			; <UNDEFINED> instruction: 0x06120111
 358:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 35c:	00130119 	andseq	r0, r3, r9, lsl r1
 360:	00051a00 	andeq	r1, r5, r0, lsl #20
 364:	0b3a0e03 	bleq	e83b78 <startup-0x1f17c488>
 368:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 36c:	00001802 	andeq	r1, r0, r2, lsl #16
 370:	0300341b 	movweq	r3, #1051	; 0x41b
 374:	3b0b3a0e 	blcc	2cebb4 <startup-0x1fd3144c>
 378:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 37c:	1c000018 	stcne	0, cr0, [r0], {24}
 380:	08030034 	stmdaeq	r3, {r2, r4, r5}
 384:	0b3b0b3a 	bleq	ec3074 <startup-0x1f13cf8c>
 388:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 38c:	2e1d0000 	cdpcs	0, 1, cr0, cr13, cr0, {0}
 390:	03193f01 	tsteq	r9, #1, 30
 394:	3b0b3a0e 	blcc	2cebd4 <startup-0x1fd3142c>
 398:	1119270b 	tstne	r9, fp, lsl #14
 39c:	40061201 	andmi	r1, r6, r1, lsl #4
 3a0:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 3a4:	01000000 	mrseq	r0, (UNDEF: 0)
 3a8:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
 3ac:	0e030b13 	vmoveq.32	d3[0], r0
 3b0:	17550e1b 	smmlane	r5, fp, lr, r0
 3b4:	17100111 			; <UNDEFINED> instruction: 0x17100111
 3b8:	24020000 	strcs	r0, [r2], #-0
 3bc:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 3c0:	000e030b 	andeq	r0, lr, fp, lsl #6
 3c4:	00160300 	andseq	r0, r6, r0, lsl #6
 3c8:	0b3a0e03 	bleq	e83bdc <startup-0x1f17c424>
 3cc:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 3d0:	24040000 	strcs	r0, [r4], #-0
 3d4:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 3d8:	0008030b 	andeq	r0, r8, fp, lsl #6
 3dc:	00350500 	eorseq	r0, r5, r0, lsl #10
 3e0:	00001349 	andeq	r1, r0, r9, asr #6
 3e4:	03003406 	movweq	r3, #1030	; 0x406
 3e8:	3b0b3a0e 	blcc	2cec28 <startup-0x1fd313d8>
 3ec:	3f134905 	svccc	0x00134905
 3f0:	00193c19 	andseq	r3, r9, r9, lsl ip
 3f4:	00340700 	eorseq	r0, r4, r0, lsl #14
 3f8:	0b3a0e03 	bleq	e83c0c <startup-0x1f17c3f4>
 3fc:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 400:	193c193f 	ldmdbne	ip!, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
 404:	04080000 	streq	r0, [r8], #-0
 408:	0b0b3e01 	bleq	2cfc14 <startup-0x1fd303ec>
 40c:	3a13490b 	bcc	4d2840 <startup-0x1fb2d7c0>
 410:	01053b0b 	tsteq	r5, fp, lsl #22
 414:	09000013 	stmdbeq	r0, {r0, r1, r4}
 418:	0e030028 	cdpeq	0, 0, cr0, cr3, cr8, {1}
 41c:	00000b1c 	andeq	r0, r0, ip, lsl fp
 420:	0b01130a 	bleq	45050 <startup-0x1ffbafb0>
 424:	3b0b3a0b 	blcc	2cec58 <startup-0x1fd313a8>
 428:	00130105 	andseq	r0, r3, r5, lsl #2
 42c:	000d0b00 	andeq	r0, sp, r0, lsl #22
 430:	0b3a0e03 	bleq	e83c44 <startup-0x1f17c3bc>
 434:	1349053b 	movtne	r0, #38203	; 0x953b
 438:	00000b38 	andeq	r0, r0, r8, lsr fp
 43c:	03000d0c 	movweq	r0, #3340	; 0xd0c
 440:	3b0b3a08 	blcc	2cec68 <startup-0x1fd31398>
 444:	38134905 	ldmdacc	r3, {r0, r2, r8, fp, lr}
 448:	0d00000b 	stceq	0, cr0, [r0, #-44]	; 0xffffffd4
 44c:	13490101 	movtne	r0, #37121	; 0x9101
 450:	00001301 	andeq	r1, r0, r1, lsl #6
 454:	4900210e 	stmdbmi	r0, {r1, r2, r3, r8, sp}
 458:	000b2f13 	andeq	r2, fp, r3, lsl pc
 45c:	00160f00 	andseq	r0, r6, r0, lsl #30
 460:	0b3a0e03 	bleq	e83c74 <startup-0x1f17c38c>
 464:	1349053b 	movtne	r0, #38203	; 0x953b
 468:	04100000 	ldreq	r0, [r0], #-0
 46c:	0b0b3e01 	bleq	2cfc78 <startup-0x1fd30388>
 470:	3a13490b 	bcc	4d28a4 <startup-0x1fb2d75c>
 474:	010b3b0b 	tsteq	fp, fp, lsl #22
 478:	11000013 	tstne	r0, r3, lsl r0
 47c:	0b0b0113 	bleq	2c08d0 <startup-0x1fd3f730>
 480:	0b3b0b3a 	bleq	ec3170 <startup-0x1f13ce90>
 484:	00001301 	andeq	r1, r0, r1, lsl #6
 488:	03000d12 	movweq	r0, #3346	; 0xd12
 48c:	3b0b3a0e 	blcc	2ceccc <startup-0x1fd31334>
 490:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
 494:	1300000b 	movwne	r0, #11
 498:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
 49c:	0b3a0e03 	bleq	e83cb0 <startup-0x1f17c350>
 4a0:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 4a4:	06120111 			; <UNDEFINED> instruction: 0x06120111
 4a8:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 4ac:	14000019 	strne	r0, [r0], #-25	; 0xffffffe7
 4b0:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 4b4:	0b3a0e03 	bleq	e83cc8 <startup-0x1f17c338>
 4b8:	01110b3b 	tsteq	r1, fp, lsr fp
 4bc:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 4c0:	01194296 			; <UNDEFINED> instruction: 0x01194296
 4c4:	15000013 	strne	r0, [r0, #-19]	; 0xffffffed
 4c8:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 4cc:	0b3b0b3a 	bleq	ec31bc <startup-0x1f13ce44>
 4d0:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 4d4:	2e160000 	cdpcs	0, 1, cr0, cr6, cr0, {0}
 4d8:	03193f00 	tsteq	r9, #0, 30
 4dc:	3b0b3a0e 	blcc	2ced1c <startup-0x1fd312e4>
 4e0:	1119270b 	tstne	r9, fp, lsl #14
 4e4:	40061201 	andmi	r1, r6, r1, lsl #4
 4e8:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 4ec:	Address 0x000004ec is out of bounds.


Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	0000001c 	andeq	r0, r0, ip, lsl r0
   4:	00000002 	andeq	r0, r0, r2
   8:	00040000 	andeq	r0, r4, r0
   c:	00000000 	andeq	r0, r0, r0
  10:	20000010 	andcs	r0, r0, r0, lsl r0
  14:	00000cf0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
	...
  20:	0000001c 	andeq	r0, r0, ip, lsl r0
  24:	0e630002 	cdpeq	0, 6, cr0, cr3, cr2, {0}
  28:	00040000 	andeq	r0, r4, r0
  2c:	00000000 	andeq	r0, r0, r0
  30:	20000d00 	andcs	r0, r0, r0, lsl #26
  34:	0000050e 	andeq	r0, r0, lr, lsl #10
	...
  40:	00000024 	andeq	r0, r0, r4, lsr #32
  44:	148a0002 	strne	r0, [sl], #2
  48:	00040000 	andeq	r0, r4, r0
  4c:	00000000 	andeq	r0, r0, r0
  50:	20001210 	andcs	r1, r0, r0, lsl r2
  54:	000000a0 	andeq	r0, r0, r0, lsr #1
  58:	20000000 	andcs	r0, r0, r0
  5c:	0000000c 	andeq	r0, r0, ip
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
   0:	000003b5 			; <UNDEFINED> instruction: 0x000003b5
   4:	01c70002 	biceq	r0, r7, r2
   8:	01020000 	mrseq	r0, (UNDEF: 2)
   c:	000d0efb 	strdeq	r0, [sp], -fp
  10:	01010101 	tsteq	r1, r1, lsl #2
  14:	01000000 	mrseq	r0, (UNDEF: 0)
  18:	43010000 	movwmi	r0, #4096	; 0x1000
  1c:	73552f3a 	cmpvc	r5, #58, 30	; 0xe8
  20:	2f737265 	svccs	0x00737265
  24:	6d616441 	cfstrdvs	mvd6, [r1, #-260]!	; 0xfffffefc
  28:	6e4f2f74 	mcrvs	15, 2, r2, cr15, cr4, {3}
  2c:	69724465 	ldmdbvs	r2!, {r0, r2, r5, r6, sl, lr}^
  30:	442f6576 	strtmi	r6, [pc], #-1398	; 38 <startup-0x1fffffc8>
  34:	6d756b6f 	fldmdbxvs	r5!, {d22-d76}	;@ Deprecated
  38:	2f746e65 	svccs	0x00746e65
  3c:	48746947 	ldmdami	r4!, {r0, r1, r2, r6, r8, fp, sp, lr}^
  40:	442f6275 	strtmi	r6, [pc], #-629	; 48 <startup-0x1fffffb8>
  44:	39325441 	ldmdbcc	r2!, {r0, r6, sl, ip, lr}
  48:	614c2d30 	cmpvs	ip, r0, lsr sp
  4c:	79736d72 	ldmdbvc	r3!, {r1, r4, r5, r6, r8, sl, fp, sp, lr}^
  50:	6d657473 	cfstrdvs	mvd7, [r5, #-460]!	; 0xfffffe34
  54:	646f6b2f 	strbtvs	r6, [pc], #-2863	; 5c <startup-0x1fffffa4>
  58:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
  5c:	4d54532f 	ldclmi	3, cr5, [r4, #-188]	; 0xffffff44
  60:	34463233 	strbcc	r3, [r6], #-563	; 0xfffffdcd
  64:	62696c5f 	rsbvs	r6, r9, #24320	; 0x5f00
  68:	4d54532f 	ldclmi	3, cr5, [r4, #-188]	; 0xffffff44
  6c:	34463233 	strbcc	r3, [r6], #-563	; 0xfffffdcd
  70:	535f7878 	cmppl	pc, #120, 16	; 0x780000
  74:	65506474 	ldrbvs	r6, [r0, #-1140]	; 0xfffffb8c
  78:	68706972 	ldmdavs	r0!, {r1, r4, r5, r6, r8, fp, sp, lr}^
  7c:	6972445f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, sl, lr}^
  80:	2f726576 	svccs	0x00726576
  84:	00637273 	rsbeq	r7, r3, r3, ror r2
  88:	635c3a63 	cmpvs	ip, #405504	; 0x63000
  8c:	70616573 	rsbvc	r6, r1, r3, ror r5
  90:	6f635c70 	svcvs	0x00635c70
  94:	696c6564 	stmdbvs	ip!, {r2, r5, r6, r8, sl, sp, lr}^
  98:	745c6574 	ldrbvc	r6, [ip], #-1396	; 0xfffffa8c
  9c:	736c6f6f 	cmnvc	ip, #444	; 0x1bc
  a0:	6363675c 	cmnvs	r3, #92, 14	; 0x1700000
  a4:	6d72612d 	ldfvse	f6, [r2, #-180]!	; 0xffffff4c
  a8:	6d72615c 	ldfvse	f6, [r2, #-368]!	; 0xfffffe90
  ac:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
  b0:	61652d65 	cmnvs	r5, r5, ror #26
  b4:	695c6962 	ldmdbvs	ip, {r1, r5, r6, r8, fp, sp, lr}^
  b8:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
  bc:	6d5c6564 	cfldr64vs	mvdx6, [ip, #-400]	; 0xfffffe70
  c0:	69686361 	stmdbvs	r8!, {r0, r5, r6, r8, r9, sp, lr}^
  c4:	6300656e 	movwvs	r6, #1390	; 0x56e
  c8:	73635c3a 	cmnvc	r3, #14848	; 0x3a00
  cc:	70706165 	rsbsvc	r6, r0, r5, ror #2
  d0:	646f635c 	strbtvs	r6, [pc], #-860	; d8 <startup-0x1fffff28>
  d4:	74696c65 	strbtvc	r6, [r9], #-3173	; 0xfffff39b
  d8:	6f745c65 	svcvs	0x00745c65
  dc:	5c736c6f 	ldclpl	12, cr6, [r3], #-444	; 0xfffffe44
  e0:	2d636367 	stclcs	3, cr6, [r3, #-412]!	; 0xfffffe64
  e4:	5c6d7261 	sfmpl	f7, 2, [sp], #-388	; 0xfffffe7c
  e8:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
  ec:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
  f0:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
  f4:	6e695c69 	cdpvs	12, 6, cr5, cr9, cr9, {3}
  f8:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
  fc:	79735c65 	ldmdbvc	r3!, {r0, r2, r5, r6, sl, fp, ip, lr}^
 100:	2e2e0073 	mcrcs	0, 1, r0, cr14, cr3, {3}
 104:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
 108:	4d54532f 	ldclmi	3, cr5, [r4, #-188]	; 0xffffff44
 10c:	34463233 	strbcc	r3, [r6], #-563	; 0xfffffdcd
 110:	62696c5f 	rsbvs	r6, r9, #24320	; 0x5f00
 114:	534d432f 	movtpl	r4, #54063	; 0xd32f
 118:	692f5349 	stmdbvs	pc!, {r0, r3, r6, r8, r9, ip, lr}	; <UNPREDICTABLE>
 11c:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
 120:	2e006564 	cfsh32cs	mvfx6, mvfx0, #52
 124:	696c2f2e 	stmdbvs	ip!, {r1, r2, r3, r5, r8, r9, sl, fp, sp}^
 128:	54532f62 	ldrbpl	r2, [r3], #-3938	; 0xfffff09e
 12c:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
 130:	696c5f34 	stmdbvs	ip!, {r2, r4, r5, r8, r9, sl, fp, ip, lr}^
 134:	54532f62 	ldrbpl	r2, [r3], #-3938	; 0xfffff09e
 138:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
 13c:	5f787834 	svcpl	0x00787834
 140:	50647453 	rsbpl	r7, r4, r3, asr r4
 144:	70697265 	rsbvc	r7, r9, r5, ror #4
 148:	72445f68 	subvc	r5, r4, #104, 30	; 0x1a0
 14c:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
 150:	636e692f 	cmnvs	lr, #770048	; 0xbc000
 154:	74730000 	ldrbtvc	r0, [r3], #-0
 158:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
 15c:	5f787834 	svcpl	0x00787834
 160:	2e636372 	mcrcs	3, 3, r6, cr3, cr2, {3}
 164:	00010063 	andeq	r0, r1, r3, rrx
 168:	65645f00 	strbvs	r5, [r4, #-3840]!	; 0xfffff100
 16c:	6c756166 	ldfvse	f6, [r5], #-408	; 0xfffffe68
 170:	79745f74 	ldmdbvc	r4!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
 174:	2e736570 	mrccs	5, 3, r6, cr3, cr0, {3}
 178:	00020068 	andeq	r0, r2, r8, rrx
 17c:	74735f00 	ldrbtvc	r5, [r3], #-3840	; 0xfffff100
 180:	746e6964 	strbtvc	r6, [lr], #-2404	; 0xfffff69c
 184:	0300682e 	movweq	r6, #2094	; 0x82e
 188:	6f630000 	svcvs	0x00630000
 18c:	635f6572 	cmpvs	pc, #478150656	; 0x1c800000
 190:	682e346d 	stmdavs	lr!, {r0, r2, r3, r5, r6, sl, ip, sp}
 194:	00000400 	andeq	r0, r0, r0, lsl #8
 198:	74737973 	ldrbtvc	r7, [r3], #-2419	; 0xfffff68d
 19c:	735f6d65 	cmpvc	pc, #6464	; 0x1940
 1a0:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
 1a4:	78783466 	ldmdavc	r8!, {r1, r2, r5, r6, sl, ip, sp}^
 1a8:	0500682e 	streq	r6, [r0, #-2094]	; 0xfffff7d2
 1ac:	74730000 	ldrbtvc	r0, [r3], #-0
 1b0:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
 1b4:	2e787834 	mrccs	8, 3, r7, cr8, cr4, {1}
 1b8:	00050068 	andeq	r0, r5, r8, rrx
 1bc:	6d747300 	ldclvs	3, cr7, [r4, #-0]
 1c0:	34663233 	strbtcc	r3, [r6], #-563	; 0xfffffdcd
 1c4:	725f7878 	subsvc	r7, pc, #120, 16	; 0x780000
 1c8:	682e6363 	stmdavs	lr!, {r0, r1, r5, r6, r8, r9, sp, lr}
 1cc:	00000500 	andeq	r0, r0, r0, lsl #10
 1d0:	02050000 	andeq	r0, r5, #0
 1d4:	20000010 	andcs	r0, r0, r0, lsl r0
 1d8:	0101e103 	tsteq	r1, r3, lsl #2
 1dc:	693f6930 	ldmdbvs	pc!, {r4, r5, r8, fp, sp, lr}	; <UNPREDICTABLE>
 1e0:	694e4f40 	stmdbvs	lr, {r6, r8, r9, sl, fp, lr}^
 1e4:	1703503f 	smladxne	r3, pc, r0, r5	; <UNPREDICTABLE>
 1e8:	4b3f6be4 	blmi	fdb180 <startup-0x1f024e80>
 1ec:	3d740f03 	ldclcc	15, cr0, [r4, #-12]!
 1f0:	02003d2f 	andeq	r3, r0, #3008	; 0xbc0
 1f4:	00400204 	subeq	r0, r0, r4, lsl #4
 1f8:	67020402 	strvs	r0, [r2, -r2, lsl #8]
 1fc:	02040200 	andeq	r0, r4, #0, 4
 200:	0402003d 	streq	r0, [r2], #-61	; 0xffffffc3
 204:	06580601 	ldrbeq	r0, [r8], -r1, lsl #12
 208:	3e4e5a4c 	vmlscc.f32	s11, s28, s24
 20c:	4a0b032f 	bmi	2c0ed0 <startup-0x1fd3f130>
 210:	4d3f3267 	lfmmi	f3, 4, [pc, #-412]!	; 7c <startup-0x1fffff84>
 214:	15033d69 	strne	r3, [r3, #-3433]	; 0xfffff297
 218:	034b6a74 	movteq	r6, #47732	; 0xba74
 21c:	3f6c6614 	svccc	0x006c6614
 220:	660b033f 			; <UNDEFINED> instruction: 0x660b033f
 224:	3d207903 			; <UNDEFINED> instruction: 0x3d207903
 228:	03243d23 			; <UNDEFINED> instruction: 0x03243d23
 22c:	4b6a740f 	blmi	1a9d270 <startup-0x1e562d90>
 230:	6600de03 	strvs	sp, [r0], -r3, lsl #28
 234:	3e2dbb7c 	vmovcc.16	d13[3], fp
 238:	69660e03 	stmdbvs	r6!, {r0, r1, r9, sl, fp}^
 23c:	661a034b 	ldrvs	r0, [sl], -fp, asr #6
 240:	8503835d 	strhi	r8, [r3, #-861]	; 0xfffffca3
 244:	4b697401 	blmi	1a5d250 <startup-0x1e5a2db0>
 248:	6600e903 	strvs	lr, [r0], -r3, lsl #18
 24c:	0d03ad6c 	stceq	13, cr10, [r3, #-432]	; 0xfffffe50
 250:	034b6974 	movteq	r6, #47476	; 0xb974
 254:	4b69660e 	blmi	1a59a94 <startup-0x1e5a656c>
 258:	59661503 	stmdbpl	r6!, {r0, r1, r8, sl, ip}^
 25c:	694d3f34 	stmdbvs	sp, {r2, r4, r5, r8, r9, sl, fp, ip, sp}^
 260:	90180341 	andsls	r0, r8, r1, asr #6
 264:	4d3f3459 	cfldrsmi	mvf3, [pc, #-356]!	; 108 <startup-0x1ffffef8>
 268:	b3034169 	movwlt	r4, #12649	; 0x3169
 26c:	334b7401 	movtcc	r7, #46081	; 0xb401
 270:	3d4d4d3f 	stclcc	13, cr4, [sp, #-252]	; 0xffffff04
 274:	2f660d03 	svccs	0x00660d03
 278:	66170367 	ldrvs	r0, [r7], -r7, ror #6
 27c:	4d3f334b 	ldcmi	3, cr3, [pc, #-300]!	; 158 <startup-0x1ffffea8>
 280:	0f033d4d 	svceq	0x00033d4d
 284:	3f334b66 	svccc	0x00334b66
 288:	033d4d4d 	teqeq	sp, #4928	; 0x1340
 28c:	334b820f 	movtcc	r8, #45583	; 0xb20f
 290:	3d5b4d3f 	ldclcc	13, cr4, [fp, #-252]	; 0xffffff04
 294:	4b902403 	blmi	fe4092a8 <APBAHBPrescTable+0xde407ee0>
 298:	3d775ac0 	vldmdbcc	r7!, {s11-s202}
 29c:	67263d22 	strvs	r3, [r6, -r2, lsr #26]!
 2a0:	cbdb3f5a 	blgt	ff6d0010 <APBAHBPrescTable+0xdf6cec48>
 2a4:	1b038383 	blne	e10b8 <startup-0x1ff1ef48>
 2a8:	59253d20 	stmdbpl	r5!, {r5, r8, sl, fp, ip, sp}
 2ac:	6769683d 			; <UNDEFINED> instruction: 0x6769683d
 2b0:	6769683d 			; <UNDEFINED> instruction: 0x6769683d
 2b4:	0367683d 	cmneq	r7, #3997696	; 0x3d0000
 2b8:	334bba3f 	movtcc	fp, #47679	; 0xba3f
 2bc:	694d3f84 	stmdbvs	sp, {r2, r7, r8, r9, sl, fp, ip, sp}^
 2c0:	0a038340 	beq	e0fc8 <startup-0x1ff1f038>
 2c4:	034b6a9e 	movteq	r6, #47774	; 0xba9e
 2c8:	4b69660c 	blmi	1a59b00 <startup-0x1e5a6500>
 2cc:	6601b803 	strvs	fp, [r1], -r3, lsl #16
 2d0:	16033d4e 	strne	r3, [r3], -lr, asr #26
 2d4:	4d334b74 	vldmdbmi	r3!, {d4-<overflow reg d61>}
 2d8:	034b4d4d 	movteq	r4, #48461	; 0xbd4d
 2dc:	334b8214 	movtcc	r8, #45588	; 0xb214
 2e0:	4b4d4d4d 	blmi	135381c <startup-0x1ecac7e4>
 2e4:	4b821103 	blmi	fe0846f8 <APBAHBPrescTable+0xde083330>
 2e8:	5b4d4d33 	blpl	13537bc <startup-0x1ecac844>
 2ec:	7410034b 	ldrvc	r0, [r0], #-843	; 0xfffffcb5
 2f0:	4d4d334b 	stclmi	3, cr3, [sp, #-300]	; 0xfffffed4
 2f4:	d3034b69 	movwle	r4, #15209	; 0x3b69
 2f8:	334b8200 	movtcc	r8, #45568	; 0xb200
 2fc:	4b4d4d4d 	blmi	1353838 <startup-0x1ecac7c8>
 300:	8200f003 	andhi	pc, r0, #3
 304:	25033d4e 	strcs	r3, [r3, #-3406]	; 0xfffff2b2
 308:	6c4c7974 	mcrrvs	9, 7, r7, ip, cr4	; <UNPREDICTABLE>
 30c:	1303761e 	movwne	r7, #13854	; 0x361e
 310:	6c4c7974 	mcrrvs	9, 7, r7, ip, cr4	; <UNPREDICTABLE>
 314:	1103761e 	tstne	r3, lr, lsl r6
 318:	6c4c7974 	mcrrvs	9, 7, r7, ip, cr4	; <UNPREDICTABLE>
 31c:	2c03761e 	stccs	6, cr7, [r3], {30}
 320:	6c4c7974 	mcrrvs	9, 7, r7, ip, cr4	; <UNPREDICTABLE>
 324:	2703761e 	smladcs	r3, lr, r6, r7
 328:	6c4c7974 	mcrrvs	9, 7, r7, ip, cr4	; <UNPREDICTABLE>
 32c:	1d03761e 	stcne	6, cr7, [r3, #-120]	; 0xffffff88
 330:	6c4c7974 	mcrrvs	9, 7, r7, ip, cr4	; <UNPREDICTABLE>
 334:	1003761e 	andne	r7, r3, lr, lsl r6
 338:	6c4c7974 	mcrrvs	9, 7, r7, ip, cr4	; <UNPREDICTABLE>
 33c:	0e03761e 	mcreq	6, 0, r7, cr3, cr14, {0}
 340:	6c4c7974 	mcrrvs	9, 7, r7, ip, cr4	; <UNPREDICTABLE>
 344:	2903761e 	stmdbcs	r3, {r1, r2, r3, r4, r9, sl, ip, sp, lr}
 348:	6c4c7874 	mcrrvs	8, 7, r7, ip, cr4
 34c:	2303761e 	movwcs	r7, #13854	; 0x361e
 350:	6c4c7874 	mcrrvs	8, 7, r7, ip, cr4
 354:	2503761e 	strcs	r7, [r3, #-1566]	; 0xfffff9e2
 358:	6c4c7874 	mcrrvs	8, 7, r7, ip, cr4
 35c:	1403761e 	strne	r7, [r3], #-1566	; 0xfffff9e2
 360:	6c4c7874 	mcrrvs	8, 7, r7, ip, cr4
 364:	1203761e 	andne	r7, r3, #31457280	; 0x1e00000
 368:	6c4c7874 	mcrrvs	8, 7, r7, ip, cr4
 36c:	2d03761e 	stccs	6, cr7, [r3, #-120]	; 0xffffff88
 370:	6c4c7874 	mcrrvs	8, 7, r7, ip, cr4
 374:	2803761e 	stmdacs	r3, {r1, r2, r3, r4, r9, sl, ip, sp, lr}
 378:	6c4c7874 	mcrrvs	8, 7, r7, ip, cr4
 37c:	0c03761e 	stceq	6, cr7, [r3], {30}
 380:	6c4c6a74 	mcrrvs	10, 7, r6, ip, cr4
 384:	ac03681e 	stcge	8, cr6, [r3], {30}
 388:	4d947402 	cfldrsmi	mvf7, [r4, #8]
 38c:	03ae1e97 			; <UNDEFINED> instruction: 0x03ae1e97
 390:	2f676617 	svccs	0x00676617
 394:	3e59502f 	cdpcc	0, 5, cr5, cr9, cr15, {1}
 398:	404e3e4c 	submi	r3, lr, ip, asr #28
 39c:	4d5c7659 	ldclmi	6, cr7, [ip, #-356]	; 0xfffffe9c
 3a0:	660a033d 			; <UNDEFINED> instruction: 0x660a033d
 3a4:	11037530 	tstne	r3, r0, lsr r5
 3a8:	68506758 	ldmdavs	r0, {r3, r4, r6, r8, r9, sl, sp, lr}^
 3ac:	033d4d5c 	teqeq	sp, #92, 26	; 0x1700
 3b0:	4b6c6611 	blmi	1b19bfc <startup-0x1e4e6404>
 3b4:	01000602 	tsteq	r0, r2, lsl #12
 3b8:	0002b501 	andeq	fp, r2, r1, lsl #10
 3bc:	c9000200 	stmdbgt	r0, {r9}
 3c0:	02000001 	andeq	r0, r0, #1
 3c4:	0d0efb01 	vstreq	d15, [lr, #-4]
 3c8:	01010100 	mrseq	r0, (UNDEF: 17)
 3cc:	00000001 	andeq	r0, r0, r1
 3d0:	01000001 	tsteq	r0, r1
 3d4:	552f3a43 	strpl	r3, [pc, #-2627]!	; fffff999 <APBAHBPrescTable+0xdfffe5d1>
 3d8:	73726573 	cmnvc	r2, #482344960	; 0x1cc00000
 3dc:	6164412f 	cmnvs	r4, pc, lsr #2
 3e0:	4f2f746d 	svcmi	0x002f746d
 3e4:	7244656e 	subvc	r6, r4, #461373440	; 0x1b800000
 3e8:	2f657669 	svccs	0x00657669
 3ec:	756b6f44 	strbvc	r6, [fp, #-3908]!	; 0xfffff0bc
 3f0:	746e656d 	strbtvc	r6, [lr], #-1389	; 0xfffffa93
 3f4:	7469472f 	strbtvc	r4, [r9], #-1839	; 0xfffff8d1
 3f8:	2f627548 	svccs	0x00627548
 3fc:	32544144 	subscc	r4, r4, #68, 2
 400:	4c2d3039 	stcmi	0, cr3, [sp], #-228	; 0xffffff1c
 404:	736d7261 	cmnvc	sp, #268435462	; 0x10000006
 408:	65747379 	ldrbvs	r7, [r4, #-889]!	; 0xfffffc87
 40c:	6f6b2f6d 	svcvs	0x006b2f6d
 410:	696c2f64 	stmdbvs	ip!, {r2, r5, r6, r8, r9, sl, fp, sp}^
 414:	54532f62 	ldrbpl	r2, [r3], #-3938	; 0xfffff09e
 418:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
 41c:	696c5f34 	stmdbvs	ip!, {r2, r4, r5, r8, r9, sl, fp, ip, lr}^
 420:	54532f62 	ldrbpl	r2, [r3], #-3938	; 0xfffff09e
 424:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
 428:	5f787834 	svcpl	0x00787834
 42c:	50647453 	rsbpl	r7, r4, r3, asr r4
 430:	70697265 	rsbvc	r7, r9, r5, ror #4
 434:	72445f68 	subvc	r5, r4, #104, 30	; 0x1a0
 438:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
 43c:	6372732f 	cmnvs	r2, #-1140850688	; 0xbc000000
 440:	5c3a6300 	ldcpl	3, cr6, [sl], #-0
 444:	61657363 	cmnvs	r5, r3, ror #6
 448:	635c7070 	cmpvs	ip, #112	; 0x70
 44c:	6c65646f 	cfstrdvs	mvd6, [r5], #-444	; 0xfffffe44
 450:	5c657469 	cfstrdpl	mvd7, [r5], #-420	; 0xfffffe5c
 454:	6c6f6f74 	stclvs	15, cr6, [pc], #-464	; 28c <startup-0x1ffffd74>
 458:	63675c73 	cmnvs	r7, #29440	; 0x7300
 45c:	72612d63 	rsbvc	r2, r1, #6336	; 0x18c0
 460:	72615c6d 	rsbvc	r5, r1, #27904	; 0x6d00
 464:	6f6e2d6d 	svcvs	0x006e2d6d
 468:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
 46c:	5c696261 	sfmpl	f6, 2, [r9], #-388	; 0xfffffe7c
 470:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
 474:	5c656475 	cfstrdpl	mvd6, [r5], #-468	; 0xfffffe2c
 478:	6863616d 	stmdavs	r3!, {r0, r2, r3, r5, r6, r8, sp, lr}^
 47c:	00656e69 	rsbeq	r6, r5, r9, ror #28
 480:	635c3a63 	cmpvs	ip, #405504	; 0x63000
 484:	70616573 	rsbvc	r6, r1, r3, ror r5
 488:	6f635c70 	svcvs	0x00635c70
 48c:	696c6564 	stmdbvs	ip!, {r2, r5, r6, r8, sl, sp, lr}^
 490:	745c6574 	ldrbvc	r6, [ip], #-1396	; 0xfffffa8c
 494:	736c6f6f 	cmnvc	ip, #444	; 0x1bc
 498:	6363675c 	cmnvs	r3, #92, 14	; 0x1700000
 49c:	6d72612d 	ldfvse	f6, [r2, #-180]!	; 0xffffff4c
 4a0:	6d72615c 	ldfvse	f6, [r2, #-368]!	; 0xfffffe90
 4a4:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
 4a8:	61652d65 	cmnvs	r5, r5, ror #26
 4ac:	695c6962 	ldmdbvs	ip, {r1, r5, r6, r8, fp, sp, lr}^
 4b0:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
 4b4:	735c6564 	cmpvc	ip, #100, 10	; 0x19000000
 4b8:	2e007379 	mcrcs	3, 0, r7, cr0, cr9, {3}
 4bc:	696c2f2e 	stmdbvs	ip!, {r1, r2, r3, r5, r8, r9, sl, fp, sp}^
 4c0:	54532f62 	ldrbpl	r2, [r3], #-3938	; 0xfffff09e
 4c4:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
 4c8:	696c5f34 	stmdbvs	ip!, {r2, r4, r5, r8, r9, sl, fp, ip, lr}^
 4cc:	4d432f62 	stclmi	15, cr2, [r3, #-392]	; 0xfffffe78
 4d0:	2f534953 	svccs	0x00534953
 4d4:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
 4d8:	00656475 	rsbeq	r6, r5, r5, ror r4
 4dc:	6c2f2e2e 	stcvs	14, cr2, [pc], #-184	; 42c <startup-0x1ffffbd4>
 4e0:	532f6269 			; <UNDEFINED> instruction: 0x532f6269
 4e4:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
 4e8:	6c5f3446 	cfldrdvs	mvd3, [pc], {70}	; 0x46
 4ec:	532f6269 			; <UNDEFINED> instruction: 0x532f6269
 4f0:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
 4f4:	78783446 	ldmdavc	r8!, {r1, r2, r6, sl, ip, sp}^
 4f8:	6474535f 	ldrbtvs	r5, [r4], #-863	; 0xfffffca1
 4fc:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
 500:	445f6870 	ldrbmi	r6, [pc], #-2160	; 508 <startup-0x1ffffaf8>
 504:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
 508:	6e692f72 	mcrvs	15, 3, r2, cr9, cr2, {3}
 50c:	73000063 	movwvc	r0, #99	; 0x63
 510:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
 514:	78783466 	ldmdavc	r8!, {r1, r2, r5, r6, sl, ip, sp}^
 518:	6970675f 	ldmdbvs	r0!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, sp, lr}^
 51c:	00632e6f 	rsbeq	r2, r3, pc, ror #28
 520:	5f000001 	svcpl	0x00000001
 524:	61666564 	cmnvs	r6, r4, ror #10
 528:	5f746c75 	svcpl	0x00746c75
 52c:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
 530:	00682e73 	rsbeq	r2, r8, r3, ror lr
 534:	5f000002 	svcpl	0x00000002
 538:	69647473 	stmdbvs	r4!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
 53c:	682e746e 	stmdavs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
 540:	00000300 	andeq	r0, r0, r0, lsl #6
 544:	65726f63 	ldrbvs	r6, [r2, #-3939]!	; 0xfffff09d
 548:	346d635f 	strbtcc	r6, [sp], #-863	; 0xfffffca1
 54c:	0400682e 	streq	r6, [r0], #-2094	; 0xfffff7d2
 550:	79730000 	ldmdbvc	r3!, {}^	; <UNPREDICTABLE>
 554:	6d657473 	cfstrdvs	mvd7, [r5, #-460]!	; 0xfffffe34
 558:	6d74735f 	ldclvs	3, cr7, [r4, #-380]!	; 0xfffffe84
 55c:	34663233 	strbtcc	r3, [r6], #-563	; 0xfffffdcd
 560:	682e7878 	stmdavs	lr!, {r3, r4, r5, r6, fp, ip, sp, lr}
 564:	00000500 	andeq	r0, r0, r0, lsl #10
 568:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
 56c:	78346632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, sp, lr}
 570:	00682e78 	rsbeq	r2, r8, r8, ror lr
 574:	73000005 	movwvc	r0, #5
 578:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
 57c:	78783466 	ldmdavc	r8!, {r1, r2, r5, r6, sl, ip, sp}^
 580:	6970675f 	ldmdbvs	r0!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, sp, lr}^
 584:	00682e6f 	rsbeq	r2, r8, pc, ror #28
 588:	00000005 	andeq	r0, r0, r5
 58c:	00020500 	andeq	r0, r2, r0, lsl #10
 590:	0320000d 			; <UNDEFINED> instruction: 0x0320000d
 594:	4e0100ff 	mcrmi	0, 0, r0, cr1, cr15, {7}
 598:	38034b4c 	stmdacc	r3, {r2, r3, r6, r8, r9, fp, lr}
 59c:	204a034a 	subcs	r0, sl, sl, asr #6
 5a0:	33034b4c 	movwcc	r4, #15180	; 0x3b4c
 5a4:	204f034a 	subcs	r0, pc, sl, asr #6
 5a8:	2e034b4c 	vmlscs.f64	d4, d3, d12
 5ac:	2054034a 	subscs	r0, r4, sl, asr #6
 5b0:	29034b4c 	stmdbcs	r3, {r2, r3, r6, r8, r9, fp, lr}
 5b4:	2059034a 	subscs	r0, r9, sl, asr #6
 5b8:	24034b4c 	strcs	r4, [r3], #-2892	; 0xfffff4b4
 5bc:	205e034a 	subscs	r0, lr, sl, asr #6
 5c0:	1f034b4c 	svcne	0x00034b4c
 5c4:	2063034a 	rsbcs	r0, r3, sl, asr #6
 5c8:	1a034b4c 	bne	d3300 <startup-0x1ff2cd00>
 5cc:	2068034a 	rsbcs	r0, r8, sl, asr #6
 5d0:	15034b4c 	strne	r4, [r3, #-2892]	; 0xfffff4b4
 5d4:	206e034a 	rsbcs	r0, lr, sl, asr #6
 5d8:	0f03674c 	svceq	0x0003674c
 5dc:	20730366 	rsbscs	r0, r3, r6, ror #6
 5e0:	0a03674c 	beq	da318 <startup-0x1ff25ce8>
 5e4:	207a0366 	rsbscs	r0, sl, r6, ror #6
 5e8:	0369674c 	cmneq	r9, #76, 14	; 0x1300000
 5ec:	5990080c 	ldmibpl	r0, {r2, r3, fp}
 5f0:	3e660a03 	vmulcc.f32	s1, s12, s6
 5f4:	ad4c5a5a 	vstrge	s11, [ip, #-360]	; 0xfffffe98
 5f8:	040200bc 	streq	r0, [r2], #-188	; 0xffffff44
 5fc:	064a0601 	strbeq	r0, [sl], -r1, lsl #12
 600:	adc0ad50 	stclge	13, cr10, [r0, #320]	; 0x140
 604:	0200bbcc 	andeq	fp, r0, #204, 22	; 0x33000
 608:	62030204 	andvs	r0, r3, #4, 4	; 0x40000000
 60c:	040200ba 	streq	r0, [r2], #-186	; 0xffffff46
 610:	063c0601 	ldrteq	r0, [ip], -r1, lsl #12
 614:	523c2103 	eorspl	r2, ip, #-1073741824	; 0xc0000000
 618:	3d3d3d4c 	ldccc	13, cr3, [sp, #-304]!	; 0xfffffed0
 61c:	10033d3d 	andne	r3, r3, sp, lsr sp
 620:	5a427574 	bpl	109dbf8 <startup-0x1ef62408>
 624:	3e3e4c3e 	mrccc	12, 1, r4, cr14, cr14, {1}
 628:	4a1c033d 	bmi	701324 <startup-0x1f8fecdc>
 62c:	5c685075 	stclpl	0, cr5, [r8], #-468	; 0xfffffe2c
 630:	0a033d4c 	beq	cfb68 <startup-0x1ff30498>
 634:	033d4e4a 	teqeq	sp, #1184	; 0x4a0
 638:	50754a0c 	rsbspl	r4, r5, ip, lsl #20
 63c:	3d4c5c68 	stclcc	12, cr5, [ip, #-416]	; 0xfffffe60
 640:	4e4a0a03 	vmlami.f32	s1, s20, s6
 644:	4a0f033d 	bmi	3c1340 <startup-0x1fc3ecc0>
 648:	0f034b79 	svceq	0x00034b79
 64c:	034b794a 	movteq	r7, #47434	; 0xb94a
 650:	4cc04a10 	vstmiami	r0, {s9-s24}
 654:	034c1e50 	movteq	r1, #52816	; 0xce50
 658:	4b784a0b 	blmi	1e12e8c <startup-0x1e1ed174>
 65c:	784a0b03 	stmdavc	sl, {r0, r1, r8, r9, fp}^
 660:	00ce0375 	sbceq	r0, lr, r5, ror r3
 664:	352fbb4a 	strcc	fp, [pc, #-2890]!	; fffffb22 <APBAHBPrescTable+0xdfffe75a>
 668:	bbc9089f 	bllt	ff2428ec <APBAHBPrescTable+0xdf241524>
 66c:	0004029f 	muleq	r4, pc, r2	; <UNPREDICTABLE>
 670:	01d00101 	bicseq	r0, r0, r1, lsl #2
 674:	00020000 	andeq	r0, r2, r0
 678:	00000198 	muleq	r0, r8, r1
 67c:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
 680:	0101000d 	tsteq	r1, sp
 684:	00000101 	andeq	r0, r0, r1, lsl #2
 688:	00000100 	andeq	r0, r0, r0, lsl #2
 68c:	2f3a4301 	svccs	0x003a4301
 690:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
 694:	64412f73 	strbvs	r2, [r1], #-3955	; 0xfffff08d
 698:	2f746d61 	svccs	0x00746d61
 69c:	44656e4f 	strbtmi	r6, [r5], #-3663	; 0xfffff1b1
 6a0:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
 6a4:	6b6f442f 	blvs	1bd1768 <startup-0x1e42e898>
 6a8:	6e656d75 	mcrvs	13, 3, r6, cr5, cr5, {3}
 6ac:	69472f74 	stmdbvs	r7, {r2, r4, r5, r6, r8, r9, sl, fp, sp}^
 6b0:	62754874 	rsbsvs	r4, r5, #116, 16	; 0x740000
 6b4:	5441442f 	strbpl	r4, [r1], #-1071	; 0xfffffbd1
 6b8:	2d303932 			; <UNDEFINED> instruction: 0x2d303932
 6bc:	6d72614c 	ldfvse	f6, [r2, #-304]!	; 0xfffffed0
 6c0:	74737973 	ldrbtvc	r7, [r3], #-2419	; 0xfffff68d
 6c4:	6b2f6d65 	blvs	bdbc60 <startup-0x1f4243a0>
 6c8:	442f646f 	strtmi	r6, [pc], #-1135	; 6d0 <startup-0x1ffff930>
 6cc:	00726f6f 	rsbseq	r6, r2, pc, ror #30
 6d0:	635c3a63 	cmpvs	ip, #405504	; 0x63000
 6d4:	70616573 	rsbvc	r6, r1, r3, ror r5
 6d8:	6f635c70 	svcvs	0x00635c70
 6dc:	696c6564 	stmdbvs	ip!, {r2, r5, r6, r8, sl, sp, lr}^
 6e0:	745c6574 	ldrbvc	r6, [ip], #-1396	; 0xfffffa8c
 6e4:	736c6f6f 	cmnvc	ip, #444	; 0x1bc
 6e8:	6363675c 	cmnvs	r3, #92, 14	; 0x1700000
 6ec:	6d72612d 	ldfvse	f6, [r2, #-180]!	; 0xffffff4c
 6f0:	6d72615c 	ldfvse	f6, [r2, #-368]!	; 0xfffffe90
 6f4:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
 6f8:	61652d65 	cmnvs	r5, r5, ror #26
 6fc:	695c6962 	ldmdbvs	ip, {r1, r5, r6, r8, fp, sp, lr}^
 700:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
 704:	6d5c6564 	cfldr64vs	mvdx6, [ip, #-400]	; 0xfffffe70
 708:	69686361 	stmdbvs	r8!, {r0, r5, r6, r8, r9, sp, lr}^
 70c:	6300656e 	movwvs	r6, #1390	; 0x56e
 710:	73635c3a 	cmnvc	r3, #14848	; 0x3a00
 714:	70706165 	rsbsvc	r6, r0, r5, ror #2
 718:	646f635c 	strbtvs	r6, [pc], #-860	; 720 <startup-0x1ffff8e0>
 71c:	74696c65 	strbtvc	r6, [r9], #-3173	; 0xfffff39b
 720:	6f745c65 	svcvs	0x00745c65
 724:	5c736c6f 	ldclpl	12, cr6, [r3], #-444	; 0xfffffe44
 728:	2d636367 	stclcs	3, cr6, [r3, #-412]!	; 0xfffffe64
 72c:	5c6d7261 	sfmpl	f7, 2, [sp], #-388	; 0xfffffe7c
 730:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
 734:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
 738:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
 73c:	6e695c69 	cdpvs	12, 6, cr5, cr9, cr9, {3}
 740:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
 744:	79735c65 	ldmdbvc	r3!, {r0, r2, r5, r6, sl, fp, ip, lr}^
 748:	2e2e0073 	mcrcs	0, 1, r0, cr14, cr3, {3}
 74c:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
 750:	4d54532f 	ldclmi	3, cr5, [r4, #-188]	; 0xffffff44
 754:	34463233 	strbcc	r3, [r6], #-563	; 0xfffffdcd
 758:	62696c5f 	rsbvs	r6, r9, #24320	; 0x5f00
 75c:	534d432f 	movtpl	r4, #54063	; 0xd32f
 760:	692f5349 	stmdbvs	pc!, {r0, r3, r6, r8, r9, ip, lr}	; <UNPREDICTABLE>
 764:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
 768:	2e006564 	cfsh32cs	mvfx6, mvfx0, #52
 76c:	696c2f2e 	stmdbvs	ip!, {r1, r2, r3, r5, r8, r9, sl, fp, sp}^
 770:	54532f62 	ldrbpl	r2, [r3], #-3938	; 0xfffff09e
 774:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
 778:	696c5f34 	stmdbvs	ip!, {r2, r4, r5, r8, r9, sl, fp, ip, lr}^
 77c:	54532f62 	ldrbpl	r2, [r3], #-3938	; 0xfffff09e
 780:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
 784:	5f787834 	svcpl	0x00787834
 788:	50647453 	rsbpl	r7, r4, r3, asr r4
 78c:	70697265 	rsbvc	r7, r9, r5, ror #4
 790:	72445f68 	subvc	r5, r4, #104, 30	; 0x1a0
 794:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
 798:	636e692f 	cmnvs	lr, #770048	; 0xbc000
 79c:	74730000 	ldrbtvc	r0, [r3], #-0
 7a0:	75747261 	ldrbvc	r7, [r4, #-609]!	; 0xfffffd9f
 7a4:	00632e70 	rsbeq	r2, r3, r0, ror lr
 7a8:	5f000001 	svcpl	0x00000001
 7ac:	61666564 	cmnvs	r6, r4, ror #10
 7b0:	5f746c75 	svcpl	0x00746c75
 7b4:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
 7b8:	00682e73 	rsbeq	r2, r8, r3, ror lr
 7bc:	5f000002 	svcpl	0x00000002
 7c0:	69647473 	stmdbvs	r4!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
 7c4:	682e746e 	stmdavs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
 7c8:	00000300 	andeq	r0, r0, r0, lsl #6
 7cc:	65726f63 	ldrbvs	r6, [r2, #-3939]!	; 0xfffff09d
 7d0:	346d635f 	strbtcc	r6, [sp], #-863	; 0xfffffca1
 7d4:	0400682e 	streq	r6, [r0], #-2094	; 0xfffff7d2
 7d8:	79730000 	ldmdbvc	r3!, {}^	; <UNPREDICTABLE>
 7dc:	6d657473 	cfstrdvs	mvd7, [r5, #-460]!	; 0xfffffe34
 7e0:	6d74735f 	ldclvs	3, cr7, [r4, #-380]!	; 0xfffffe84
 7e4:	34663233 	strbtcc	r3, [r6], #-563	; 0xfffffdcd
 7e8:	682e7878 	stmdavs	lr!, {r3, r4, r5, r6, fp, ip, sp, lr}
 7ec:	00000500 	andeq	r0, r0, r0, lsl #10
 7f0:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
 7f4:	78346632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, sp, lr}
 7f8:	00682e78 	rsbeq	r2, r8, r8, ror lr
 7fc:	73000005 	movwvc	r0, #5
 800:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
 804:	78783466 	ldmdavc	r8!, {r1, r2, r5, r6, sl, ip, sp}^
 808:	6970675f 	ldmdbvs	r0!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, sp, lr}^
 80c:	00682e6f 	rsbeq	r2, r8, pc, ror #28
 810:	00000005 	andeq	r0, r0, r5
 814:	00020500 	andeq	r0, r2, r0, lsl #10
 818:	03200000 	nopeq	{0}	; <UNPREDICTABLE>
 81c:	5e13010c 	mufpls	f0, f3, #4.0
 820:	01000302 	tsteq	r0, r2, lsl #6
 824:	02050001 	andeq	r0, r5, #1
 828:	20001210 	andcs	r1, r0, r0, lsl r2
 82c:	40011503 	andmi	r1, r1, r3, lsl #10
 830:	3d3d4c4b 	ldccc	12, cr4, [sp, #-300]!	; 0xfffffed4
 834:	3d4b693f 	vstrcc.16	s13, [fp, #-126]	; 0xffffff82	; <UNPREDICTABLE>
 838:	76673d3d 			; <UNDEFINED> instruction: 0x76673d3d
 83c:	6891312f 	ldmvs	r1, {r0, r1, r2, r3, r5, r8, ip, sp}
 840:	00040255 	andeq	r0, r4, r5, asr r2
 844:	Address 0x00000844 is out of bounds.


Disassembly of section .debug_str:

00000000 <.debug_str>:
   0:	5f434352 	svcpl	0x00434352
   4:	4b4c4348 	blmi	1310d2c <startup-0x1ecef2d4>
   8:	43435200 	movtmi	r5, #12800	; 0x3200
   c:	45534c5f 	ldrbmi	r4, [r3, #-3167]	; 0xfffff3a1
  10:	42504100 	subsmi	r4, r0, #0, 2
  14:	45504c31 	ldrbmi	r4, [r0, #-3121]	; 0xfffff3cf
  18:	5200524e 	andpl	r5, r0, #-536870908	; 0xe0000004
  1c:	505f4343 	subspl	r4, pc, r3, asr #6
  20:	41534c4c 	cmpmi	r3, ip, asr #24
  24:	646d4349 	strbtvs	r4, [sp], #-841	; 0xfffffcb7
  28:	43435200 	movtmi	r5, #12800	; 0x3200
  2c:	4c4c505f 	mcrrmi	0, 5, r5, ip, cr15
  30:	44494153 	strbmi	r4, [r9], #-339	; 0xfffffead
  34:	00517669 	subseq	r7, r1, r9, ror #12
  38:	5f434352 	svcpl	0x00434352
  3c:	534c4c50 	movtpl	r4, #52304	; 0xcc50
  40:	69444941 	stmdbvs	r4, {r0, r6, r8, fp, lr}^
  44:	73005276 	movwvc	r5, #630	; 0x276
  48:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0xfffffe8c
  4c:	67657273 			; <UNDEFINED> instruction: 0x67657273
  50:	53595300 	cmppl	r9, #0, 6
  54:	5f4b4c43 	svcpl	0x004b4c43
  58:	71657246 	cmnvc	r5, r6, asr #4
  5c:	636e6575 	cmnvs	lr, #490733568	; 0x1d400000
  60:	6c700079 	ldclvs	0, cr0, [r0], #-484	; 0xfffffe1c
  64:	70006d6c 	andvc	r6, r0, ip, ror #26
  68:	00706c6c 	rsbseq	r6, r0, ip, ror #24
  6c:	69755f5f 	ldmdbvs	r5!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, ip, lr}^
  70:	5f38746e 	svcpl	0x0038746e
  74:	43520074 	cmpmi	r2, #116	; 0x74
  78:	434d5f43 	movtmi	r5, #57155	; 0xdf43
  7c:	6f53314f 	svcvs	0x0053314f
  80:	65637275 	strbvs	r7, [r3, #-629]!	; 0xfffffd8b
  84:	43435200 	movtmi	r5, #12800	; 0x3200
  88:	4250415f 	subsmi	r4, r0, #-1073741801	; 0xc0000017
  8c:	72655031 	rsbvc	r5, r5, #49	; 0x31
  90:	52687069 	rsbpl	r7, r8, #105	; 0x69
  94:	74657365 	strbtvc	r7, [r5], #-869	; 0xfffffc9b
  98:	00646d43 	rsbeq	r6, r4, r3, asr #26
  9c:	4e4c4c50 	mcrmi	12, 2, r4, cr12, cr0, {2}
  a0:	43435200 	movtmi	r5, #12800	; 0x3200
  a4:	4941535f 	stmdbmi	r1, {r0, r1, r2, r3, r4, r6, r8, r9, ip, lr}^
  a8:	534c4c50 	movtpl	r4, #52304	; 0xcc50
  ac:	6c434941 	mcrrvs	9, 4, r4, r3, cr1	; <UNPREDICTABLE>
  b0:	7669446b 	strbtvc	r4, [r9], -fp, ror #8
  b4:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
  b8:	50006769 	andpl	r6, r0, r9, ror #14
  bc:	00504c4c 	subseq	r4, r0, ip, asr #24
  c0:	514c4c50 	cmppl	ip, r0, asr ip
  c4:	43435200 	movtmi	r5, #12800	; 0x3200
  c8:	656c435f 	strbvs	r4, [ip, #-863]!	; 0xfffffca1
  cc:	54497261 	strbpl	r7, [r9], #-609	; 0xfffffd9f
  d0:	646e6550 	strbtvs	r6, [lr], #-1360	; 0xfffffab0
  d4:	42676e69 	rsbmi	r6, r7, #1680	; 0x690
  d8:	6c007469 	cfstrsvs	mvf7, [r0], {105}	; 0x69
  dc:	20676e6f 	rsbcs	r6, r7, pc, ror #28
  e0:	676e6f6c 	strbvs	r6, [lr, -ip, ror #30]!
  e4:	736e7520 	cmnvc	lr, #32, 10	; 0x8000000
  e8:	656e6769 	strbvs	r6, [lr, #-1897]!	; 0xfffff897
  ec:	6e692064 	cdpvs	0, 6, cr2, cr9, cr4, {3}
  f0:	43520074 	cmpmi	r2, #116	; 0x74
  f4:	54495f43 	strbpl	r5, [r9], #-3907	; 0xfffff0bd
  f8:	4c4c5000 	marmi	acc0, r5, ip
  fc:	4352004d 	cmpmi	r2, #77	; 0x4d
 100:	48415f43 	stmdami	r1, {r0, r1, r6, r8, r9, sl, fp, ip, lr}^
 104:	65503142 	ldrbvs	r3, [r0, #-322]	; 0xfffffebe
 108:	68706972 	ldmdavs	r0!, {r1, r4, r5, r6, r8, fp, sp, lr}^
 10c:	42484100 	submi	r4, r8, #0, 2
 110:	45504c31 	ldrbmi	r4, [r0, #-3121]	; 0xfffff3cf
 114:	5200524e 	andpl	r5, r0, #-536870908	; 0xe0000004
 118:	435f4343 	cmpmi	pc, #201326593	; 0xc000001
 11c:	6b636f6c 	blvs	18dbed4 <startup-0x1e72412c>
 120:	43520073 	cmpmi	r2, #115	; 0x73
 124:	50415f43 	subpl	r5, r1, r3, asr #30
 128:	65503242 	ldrbvs	r3, [r0, #-578]	; 0xfffffdbe
 12c:	68706972 	ldmdavs	r0!, {r1, r4, r5, r6, r8, fp, sp, lr}^
 130:	636f6c43 	cmnvs	pc, #17152	; 0x4300
 134:	4d504c6b 	ldclmi	12, cr4, [r0, #-428]	; 0xfffffe54
 138:	4365646f 	cmnmi	r5, #1862270976	; 0x6f000000
 13c:	4400646d 	strmi	r6, [r0], #-1133	; 0xfffffb93
 140:	46434b43 	strbmi	r4, [r3], -r3, asr #22
 144:	52005247 	andpl	r5, r0, #1879048196	; 0x70000004
 148:	435f4343 	cmpmi	pc, #201326593	; 0xc000001
 14c:	7261656c 	rsbvc	r6, r1, #108, 10	; 0x1b000000
 150:	67616c46 	strbvs	r6, [r1, -r6, asr #24]!
 154:	42484100 	submi	r4, r8, #0, 2
 158:	54535231 	ldrbpl	r5, [r3], #-561	; 0xfffffdcf
 15c:	43440052 	movtmi	r0, #16466	; 0x4052
 160:	4746434b 	strbmi	r4, [r6, -fp, asr #6]
 164:	74003252 	strvc	r3, [r0], #-594	; 0xfffffdae
 168:	6572706d 	ldrbvs	r7, [r2, #-109]!	; 0xffffff93
 16c:	43500067 	cmpmi	r0, #103	; 0x67
 170:	5f324b4c 	svcpl	0x00324b4c
 174:	71657246 	cmnvc	r5, r6, asr #4
 178:	636e6575 	cmnvs	lr, #490733568	; 0x1d400000
 17c:	43520079 	cmpmi	r2, #121	; 0x79
 180:	48415f43 	stmdami	r1, {r0, r1, r6, r8, r9, sl, fp, ip, lr}^
 184:	65503242 	ldrbvs	r3, [r0, #-578]	; 0xfffffdbe
 188:	68706972 	ldmdavs	r0!, {r1, r4, r5, r6, r8, fp, sp, lr}^
 18c:	636f6c43 	cmnvs	pc, #17152	; 0x4300
 190:	646d436b 	strbtvs	r4, [sp], #-875	; 0xfffffc95
 194:	414e4500 	cmpmi	lr, r0, lsl #10
 198:	00454c42 	subeq	r4, r5, r2, asr #24
 19c:	32425041 	subcc	r5, r2, #65	; 0x41
 1a0:	52545352 	subspl	r5, r4, #1207959553	; 0x48000001
 1a4:	43435200 	movtmi	r5, #12800	; 0x3200
 1a8:	4c43505f 	mcrrmi	0, 5, r5, r3, cr15
 1ac:	6f43314b 	svcvs	0x0043314b
 1b0:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
 1b4:	43435200 	movtmi	r5, #12800	; 0x3200
 1b8:	4248415f 	submi	r4, r8, #-1073741801	; 0xc0000017
 1bc:	72655033 	rsbvc	r5, r5, #51	; 0x33
 1c0:	52687069 	rsbpl	r7, r8, #105	; 0x69
 1c4:	74657365 	strbtvc	r7, [r5], #-869	; 0xfffffc9b
 1c8:	00646d43 	rsbeq	r6, r4, r3, asr #26
 1cc:	5f434352 	svcpl	0x00434352
 1d0:	42494153 	submi	r4, r9, #-1073741804	; 0xc0000014
 1d4:	6b636f6c 	blvs	18dbf8c <startup-0x1e724074>
 1d8:	4b4c4341 	blmi	1310ee4 <startup-0x1ecef11c>
 1dc:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
 1e0:	52006769 	andpl	r6, r0, #27525120	; 0x1a40000
 1e4:	415f4343 	cmpmi	pc, r3, asr #6
 1e8:	50314248 	eorspl	r4, r1, r8, asr #4
 1ec:	70697265 	rsbvc	r7, r9, r5, ror #4
 1f0:	73655268 	cmnvc	r5, #104, 4	; 0x80000006
 1f4:	6d437465 	cfstrdvs	mvd7, [r3, #-404]	; 0xfffffe6c
 1f8:	43520064 	cmpmi	r2, #100	; 0x64
 1fc:	43485f43 	movtmi	r5, #36675	; 0x8f43
 200:	6f434b4c 	svcvs	0x00434b4c
 204:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
 208:	6e6f6c00 	cdpvs	12, 6, cr6, cr15, cr0, {0}
 20c:	6f6c2067 	svcvs	0x006c2067
 210:	6920676e 	stmdbvs	r0!, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}
 214:	5200746e 	andpl	r7, r0, #1845493760	; 0x6e000000
 218:	535f4343 	cmppl	pc, #201326593	; 0xc000001
 21c:	4c435359 	mcrrmi	3, 5, r5, r3, cr9
 220:	6e6f434b 	cdpvs	3, 6, cr4, cr15, cr11, {2}
 224:	00676966 	rsbeq	r6, r7, r6, ror #18
 228:	5f434352 	svcpl	0x00434352
 22c:	4345534c 	movtmi	r5, #21324	; 0x534c
 230:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
 234:	3a430067 	bcc	10c03d8 <startup-0x1ef3fc28>
 238:	6573552f 	ldrbvs	r5, [r3, #-1327]!	; 0xfffffad1
 23c:	412f7372 			; <UNDEFINED> instruction: 0x412f7372
 240:	746d6164 	strbtvc	r6, [sp], #-356	; 0xfffffe9c
 244:	656e4f2f 	strbvs	r4, [lr, #-3887]!	; 0xfffff0d1
 248:	76697244 	strbtvc	r7, [r9], -r4, asr #4
 24c:	6f442f65 	svcvs	0x00442f65
 250:	656d756b 	strbvs	r7, [sp, #-1387]!	; 0xfffffa95
 254:	472f746e 	strmi	r7, [pc, -lr, ror #8]!
 258:	75487469 	strbvc	r7, [r8, #-1129]	; 0xfffffb97
 25c:	41442f62 	cmpmi	r4, r2, ror #30
 260:	30393254 	eorscc	r3, r9, r4, asr r2
 264:	72614c2d 	rsbvc	r4, r1, #11520	; 0x2d00
 268:	7379736d 	cmnvc	r9, #-1275068415	; 0xb4000001
 26c:	2f6d6574 	svccs	0x006d6574
 270:	2f646f6b 	svccs	0x00646f6b
 274:	2f62696c 	svccs	0x0062696c
 278:	334d5453 	movtcc	r5, #54355	; 0xd453
 27c:	5f344632 	svcpl	0x00344632
 280:	2f62696c 	svccs	0x0062696c
 284:	334d5453 	movtcc	r5, #54355	; 0xd453
 288:	78344632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, lr}
 28c:	74535f78 	ldrbvc	r5, [r3], #-3960	; 0xfffff088
 290:	72655064 	rsbvc	r5, r5, #100	; 0x64
 294:	5f687069 	svcpl	0x00687069
 298:	76697244 	strbtvc	r7, [r9], -r4, asr #4
 29c:	732f7265 			; <UNDEFINED> instruction: 0x732f7265
 2a0:	732f6372 			; <UNDEFINED> instruction: 0x732f6372
 2a4:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
 2a8:	78783466 	ldmdavc	r8!, {r1, r2, r5, r6, sl, ip, sp}^
 2ac:	6363725f 	cmnvs	r3, #-268435451	; 0xf0000005
 2b0:	4e00632e 	cdpmi	3, 0, cr6, cr0, cr14, {1}
 2b4:	74537765 	ldrbvc	r7, [r3], #-1893	; 0xfffff89b
 2b8:	00657461 	rsbeq	r7, r5, r1, ror #8
 2bc:	434c4c50 	movtmi	r4, #52304	; 0xcc50
 2c0:	00524746 	subseq	r4, r2, r6, asr #14
 2c4:	5f434352 	svcpl	0x00434352
 2c8:	6b636142 	blvs	18d87d8 <startup-0x1e727828>
 2cc:	65527075 	ldrbvs	r7, [r2, #-117]	; 0xffffff8b
 2d0:	43746573 	cmnmi	r4, #482344960	; 0x1cc00000
 2d4:	5f00646d 	svcpl	0x0000646d
 2d8:	6e69755f 	mcrvs	5, 3, r7, cr9, cr15, {2}
 2dc:	5f323374 	svcpl	0x00323374
 2e0:	72450074 	subvc	r0, r5, #116	; 0x74
 2e4:	53726f72 	cmnpl	r2, #456	; 0x1c8
 2e8:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0xfffffe8c
 2ec:	43520073 	cmpmi	r2, #115	; 0x73
 2f0:	4c505f43 	mrrcmi	15, 4, r5, r0, cr3
 2f4:	756f534c 	strbvc	r5, [pc, #-844]!	; ffffffb0 <APBAHBPrescTable+0xdfffebe8>
 2f8:	00656372 	rsbeq	r6, r5, r2, ror r3
 2fc:	5f434352 	svcpl	0x00434352
 300:	53746547 	cmnpl	r4, #297795584	; 0x11c00000
 304:	4c435359 	mcrrmi	3, 5, r5, r3, cr9
 308:	756f534b 	strbvc	r5, [pc, #-843]!	; ffffffc5 <APBAHBPrescTable+0xdfffebfd>
 30c:	00656372 	rsbeq	r6, r5, r2, ror r3
 310:	5f434352 	svcpl	0x00434352
 314:	74696157 	strbtvc	r6, [r9], #-343	; 0xfffffea9
 318:	48726f46 	ldmdami	r2!, {r1, r2, r6, r8, r9, sl, fp, sp, lr}^
 31c:	74534553 	ldrbvc	r4, [r3], #-1363	; 0xfffffaad
 320:	55747261 	ldrbpl	r7, [r4, #-609]!	; 0xfffffd9f
 324:	69620070 	stmdbvs	r2!, {r4, r5, r6}^
 328:	61747374 	cmnvs	r4, r4, ror r3
 32c:	00737574 	rsbseq	r7, r3, r4, ror r5
 330:	4b4c4348 	blmi	1311058 <startup-0x1eceefa8>
 334:	6572465f 	ldrbvs	r4, [r2, #-1631]!	; 0xfffff9a1
 338:	6e657571 	mcrvs	5, 3, r7, cr5, cr1, {3}
 33c:	52007963 	andpl	r7, r0, #1622016	; 0x18c000
 340:	415f4343 	cmpmi	pc, r3, asr #6
 344:	50314250 	eorspl	r4, r1, r0, asr r2
 348:	70697265 	rsbvc	r7, r9, r5, ror #4
 34c:	6c700068 	ldclvs	0, cr0, [r0], #-416	; 0xfffffe60
 350:	6f63766c 	svcvs	0x0063766c
 354:	53494400 	movtpl	r4, #37888	; 0x9400
 358:	454c4241 	strbmi	r4, [ip, #-577]	; 0xfffffdbf
 35c:	73795300 	cmnvc	r9, #0, 6
 360:	436d6574 	cmnmi	sp, #116, 10	; 0x1d000000
 364:	4365726f 	cmnmi	r5, #-268435450	; 0xf0000006
 368:	6b636f6c 	blvs	18dc120 <startup-0x1e723ee0>
 36c:	43435200 	movtmi	r5, #12800	; 0x3200
 370:	414c465f 	cmpmi	ip, pc, asr r6
 374:	43520047 	cmpmi	r2, #71	; 0x47
 378:	434d5f43 	movtmi	r5, #57155	; 0xdf43
 37c:	6f43314f 	svcvs	0x0043314f
 380:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
 384:	43435200 	movtmi	r5, #12800	; 0x3200
 388:	5359535f 	cmppl	r9, #2080374785	; 0x7c000001
 38c:	004b4c43 	subeq	r4, fp, r3, asr #24
 390:	5f434352 	svcpl	0x00434352
 394:	494c4c50 	stmdbmi	ip, {r4, r6, sl, fp, lr}^
 398:	6d435332 	stclvs	3, cr5, [r3, #-200]	; 0xffffff38
 39c:	43520064 	cmpmi	r2, #100	; 0x64
 3a0:	79545f43 	ldmdbvc	r4, {r0, r1, r6, r8, r9, sl, fp, ip, lr}^
 3a4:	65446570 	strbvs	r6, [r4, #-1392]	; 0xfffffa90
 3a8:	72700066 	rsbsvc	r0, r0, #102	; 0x66
 3ac:	00637365 	rsbeq	r7, r3, r5, ror #6
 3b0:	5f434352 	svcpl	0x00434352
 3b4:	43435452 	movtmi	r5, #13394	; 0x3452
 3b8:	6f534b4c 	svcvs	0x00534b4c
 3bc:	65637275 	strbvs	r7, [r3, #-629]!	; 0xfffffd8b
 3c0:	43435200 	movtmi	r5, #12800	; 0x3200
 3c4:	4941535f 	stmdbmi	r1, {r0, r1, r2, r3, r4, r6, r8, r9, ip, lr}^
 3c8:	636f6c42 	cmnvs	pc, #16896	; 0x4200
 3cc:	4c43416b 	stfmie	f4, [r3], {107}	; 0x6b
 3d0:	756f534b 	strbvc	r5, [pc, #-843]!	; 8d <startup-0x1fffff73>
 3d4:	00656372 	rsbeq	r6, r5, r2, ror r3
 3d8:	5f434352 	svcpl	0x00434352
 3dc:	42494153 	submi	r4, r9, #-1073741804	; 0xc0000014
 3e0:	6b636f6c 	blvs	18dc198 <startup-0x1e723e68>
 3e4:	4b4c4342 	blmi	13110f4 <startup-0x1eceef0c>
 3e8:	72756f53 	rsbsvc	r6, r5, #332	; 0x14c
 3ec:	52006563 	andpl	r6, r0, #415236096	; 0x18c00000
 3f0:	4c5f4343 	mrrcmi	3, 4, r4, pc, cr3	; <UNPREDICTABLE>
 3f4:	43434454 	movtmi	r4, #13396	; 0x3454
 3f8:	69444b4c 	stmdbvs	r4, {r2, r3, r6, r8, r9, fp, lr}^
 3fc:	6e6f4376 	mcrvs	3, 3, r4, cr15, cr6, {3}
 400:	00676966 	rsbeq	r6, r7, r6, ror #18
 404:	726f6873 	rsbvc	r6, pc, #7536640	; 0x730000
 408:	6e752074 	mrcvs	0, 3, r2, cr5, cr4, {3}
 40c:	6e676973 			; <UNDEFINED> instruction: 0x6e676973
 410:	69206465 	stmdbvs	r0!, {r0, r2, r5, r6, sl, sp, lr}
 414:	5000746e 	andpl	r7, r0, lr, ror #8
 418:	32494c4c 	subcc	r4, r9, #76, 24	; 0x4c00
 41c:	47464353 	smlsldmi	r4, r6, r3, r3
 420:	43520052 	cmpmi	r2, #82	; 0x52
 424:	48415f43 	stmdami	r1, {r0, r1, r6, r8, r9, sl, fp, ip, lr}^
 428:	65503242 	ldrbvs	r3, [r0, #-578]	; 0xfffffdbe
 42c:	68706972 	ldmdavs	r0!, {r1, r4, r5, r6, r8, fp, sp, lr}^
 430:	636f6c43 	cmnvs	pc, #17152	; 0x4300
 434:	4d504c6b 	ldclmi	12, cr4, [r0, #-428]	; 0xfffffe54
 438:	4365646f 	cmnmi	r5, #1862270976	; 0x6f000000
 43c:	5200646d 	andpl	r6, r0, #1828716544	; 0x6d000000
 440:	505f4343 	subspl	r4, pc, r3, asr #6
 444:	32494c4c 	subcc	r4, r9, #76, 24	; 0x4c00
 448:	6e6f4353 	mcrvs	3, 3, r4, cr15, cr3, {2}
 44c:	00676966 	rsbeq	r6, r7, r6, ror #18
 450:	5f434352 	svcpl	0x00434352
 454:	43495348 	movtmi	r5, #37704	; 0x9348
 458:	5200646d 	andpl	r6, r0, #1828716544	; 0x6d000000
 45c:	415f4343 	cmpmi	pc, r3, asr #6
 460:	50324248 	eorspl	r4, r2, r8, asr #4
 464:	70697265 	rsbvc	r7, r9, r5, ror #4
 468:	50410068 	subpl	r0, r1, r8, rrx
 46c:	504c3242 	subpl	r3, ip, r2, asr #4
 470:	00524e45 	subseq	r4, r2, r5, asr #28
 474:	5f434352 	svcpl	0x00434352
 478:	33424841 	movtcc	r4, #10305	; 0x2841
 47c:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
 480:	52006870 	andpl	r6, r0, #112, 16	; 0x700000
 484:	4d5f4343 	ldclmi	3, cr4, [pc, #-268]	; 380 <startup-0x1ffffc80>
 488:	44324f43 	ldrtmi	r4, [r2], #-3907	; 0xfffff0bd
 48c:	52007669 	andpl	r7, r0, #110100480	; 0x6900000
 490:	535f4343 	cmppl	pc, #201326593	; 0xc000001
 494:	4c504941 	mrrcmi	9, 4, r4, r0, cr1	; <UNPREDICTABLE>
 498:	5332494c 	teqpl	r2, #76, 18	; 0x130000
 49c:	446b6c43 	strbtmi	r6, [fp], #-3139	; 0xfffff3bd
 4a0:	6f437669 	svcvs	0x00437669
 4a4:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
 4a8:	43435200 	movtmi	r5, #12800	; 0x3200
 4ac:	4354525f 	cmpmi	r4, #-268435451	; 0xf0000005
 4b0:	434b4c43 	movtmi	r4, #48195	; 0xbc43
 4b4:	4500646d 	strmi	r6, [r0, #-1133]	; 0xfffffb93
 4b8:	524f5252 	subpl	r5, pc, #536870917	; 0x20000005
 4bc:	554e4700 	strbpl	r4, [lr, #-1792]	; 0xfffff900
 4c0:	39394320 	ldmdbcc	r9!, {r5, r8, r9, lr}
 4c4:	322e3720 	eorcc	r3, lr, #32, 14	; 0x800000
 4c8:	3220312e 	eorcc	r3, r0, #-2147483637	; 0x8000000b
 4cc:	30373130 	eorscc	r3, r7, r0, lsr r1
 4d0:	20343039 	eorscs	r3, r4, r9, lsr r0
 4d4:	6c657228 	sfmvs	f7, 2, [r5], #-160	; 0xffffff60
 4d8:	65736165 	ldrbvs	r6, [r3, #-357]!	; 0xfffffe9b
 4dc:	415b2029 	cmpmi	fp, r9, lsr #32
 4e0:	652f4d52 	strvs	r4, [pc, #-3410]!	; fffff796 <APBAHBPrescTable+0xdfffe3ce>
 4e4:	6465626d 	strbtvs	r6, [r5], #-621	; 0xfffffd93
 4e8:	2d646564 	cfstr64cs	mvdx6, [r4, #-400]!	; 0xfffffe70
 4ec:	72622d37 	rsbvc	r2, r2, #3520	; 0xdc0
 4f0:	68636e61 	stmdavs	r3!, {r0, r5, r6, r9, sl, fp, sp, lr}^
 4f4:	76657220 	strbtvc	r7, [r5], -r0, lsr #4
 4f8:	6f697369 	svcvs	0x00697369
 4fc:	3532206e 	ldrcc	r2, [r2, #-110]!	; 0xffffff92
 500:	34303235 	ldrtcc	r3, [r0], #-565	; 0xfffffdcb
 504:	6d2d205d 	stcvs	0, cr2, [sp, #-372]!	; 0xfffffe8c
 508:	6d756874 	ldclvs	8, cr6, [r5, #-464]!	; 0xfffffe30
 50c:	6d2d2062 	stcvs	0, cr2, [sp, #-392]!	; 0xfffffe78
 510:	68637261 	stmdavs	r3!, {r0, r5, r6, r9, ip, sp, lr}^
 514:	6d72613d 	ldfvse	f6, [r2, #-244]!	; 0xffffff0c
 518:	6d2d3676 	stcvs	6, cr3, [sp, #-472]!	; 0xfffffe28
 51c:	666d2d20 	strbtvs	r2, [sp], -r0, lsr #26
 520:	74616f6c 	strbtvc	r6, [r1], #-3948	; 0xfffff094
 524:	6962612d 	stmdbvs	r2!, {r0, r2, r3, r5, r8, sp, lr}^
 528:	666f733d 			; <UNDEFINED> instruction: 0x666f733d
 52c:	6d2d2074 	stcvs	0, cr2, [sp, #-464]!	; 0xfffffe30
 530:	6d756874 	ldclvs	8, cr6, [r5, #-464]!	; 0xfffffe30
 534:	6d2d2062 	stcvs	0, cr2, [sp, #-392]!	; 0xfffffe78
 538:	68637261 	stmdavs	r3!, {r0, r5, r6, r9, ip, sp, lr}^
 53c:	6d72613d 	ldfvse	f6, [r2, #-244]!	; 0xffffff0c
 540:	6d2d3676 	stcvs	6, cr3, [sp, #-472]!	; 0xfffffe28
 544:	20672d20 	rsbcs	r2, r7, r0, lsr #26
 548:	20304f2d 	eorscs	r4, r0, sp, lsr #30
 54c:	6474732d 	ldrbtvs	r7, [r4], #-813	; 0xfffffcd3
 550:	3939633d 	ldmdbcc	r9!, {r0, r2, r3, r4, r5, r8, r9, sp, lr}
 554:	43435200 	movtmi	r5, #12800	; 0x3200
 558:	6f6c435f 	svcvs	0x006c435f
 55c:	65536b63 	ldrbvs	r6, [r3, #-2915]	; 0xfffff49d
 560:	69727563 	ldmdbvs	r2!, {r0, r1, r5, r6, r8, sl, ip, sp, lr}^
 564:	79537974 	ldmdbvc	r3, {r2, r4, r5, r6, r8, fp, ip, sp, lr}^
 568:	6d657473 	cfstrdvs	mvd7, [r5, #-460]!	; 0xfffffe34
 56c:	00646d43 	rsbeq	r6, r4, r3, asr #26
 570:	5f434352 	svcpl	0x00434352
 574:	494c4c50 	stmdbmi	ip, {r4, r6, sl, fp, lr}^
 578:	69445332 	stmdbvs	r4, {r1, r4, r5, r8, r9, ip, lr}^
 57c:	52005176 	andpl	r5, r0, #-2147483619	; 0x8000001d
 580:	505f4343 	subspl	r4, pc, r3, asr #6
 584:	41534c4c 	cmpmi	r3, ip, asr #24
 588:	6e6f4349 	cdpvs	3, 6, cr4, cr15, cr9, {2}
 58c:	00676966 	rsbeq	r6, r7, r6, ror #18
 590:	33424841 	movtcc	r4, #10305	; 0x2841
 594:	00524e45 	subseq	r4, r2, r5, asr #28
 598:	5f434352 	svcpl	0x00434352
 59c:	4d45534c 	stclmi	3, cr5, [r5, #-304]	; 0xfffffed0
 5a0:	4365646f 	cmnmi	r5, #1862270976	; 0x6f000000
 5a4:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
 5a8:	48410067 	stmdami	r1, {r0, r1, r2, r5, r6}^
 5ac:	504c3242 	subpl	r3, ip, r2, asr #4
 5b0:	00524e45 	subseq	r4, r2, r5, asr #28
 5b4:	636e7546 	cmnvs	lr, #293601280	; 0x11800000
 5b8:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
 5bc:	74536c61 	ldrbvc	r6, [r3], #-3169	; 0xfffff39f
 5c0:	00657461 	rsbeq	r7, r5, r1, ror #8
 5c4:	5f434352 	svcpl	0x00434352
 5c8:	314f434d 	cmpcc	pc, sp, asr #6
 5cc:	00766944 	rsbseq	r6, r6, r4, asr #18
 5d0:	5f434352 	svcpl	0x00434352
 5d4:	32425041 	subcc	r5, r2, #65	; 0x41
 5d8:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
 5dc:	65526870 	ldrbvs	r6, [r2, #-2160]	; 0xfffff790
 5e0:	43746573 	cmnmi	r4, #482344960	; 0x1cc00000
 5e4:	5200646d 	andpl	r6, r0, #1828716544	; 0x6d000000
 5e8:	4d5f4343 	ldclmi	3, cr4, [pc, #-268]	; 4e4 <startup-0x1ffffb1c>
 5ec:	53324f43 	teqpl	r2, #268	; 0x10c
 5f0:	6372756f 	cmnvs	r2, #465567744	; 0x1bc00000
 5f4:	43520065 	cmpmi	r2, #101	; 0x65
 5f8:	32495f43 	subcc	r5, r9, #268	; 0x10c
 5fc:	4b4c4353 	blmi	1311350 <startup-0x1eceecb0>
 600:	72756f53 	rsbsvc	r6, r5, #332	; 0x14c
 604:	50006563 	andpl	r6, r0, r3, ror #10
 608:	41534c4c 	cmpmi	r3, ip, asr #24
 60c:	47464349 	strbmi	r4, [r6, -r9, asr #6]
 610:	45520052 	ldrbmi	r0, [r2, #-82]	; 0xffffffae
 614:	56524553 			; <UNDEFINED> instruction: 0x56524553
 618:	00304445 	eorseq	r4, r0, r5, asr #8
 61c:	45534552 	ldrbmi	r4, [r3, #-1362]	; 0xfffffaae
 620:	44455652 	strbmi	r5, [r5], #-1618	; 0xfffff9ae
 624:	45520031 	ldrbmi	r0, [r2, #-49]	; 0xffffffcf
 628:	56524553 			; <UNDEFINED> instruction: 0x56524553
 62c:	00324445 	eorseq	r4, r2, r5, asr #8
 630:	45534552 	ldrbmi	r4, [r3, #-1362]	; 0xfffffaae
 634:	44455652 	strbmi	r5, [r5], #-1618	; 0xfffff9ae
 638:	45520033 	ldrbmi	r0, [r2, #-51]	; 0xffffffcd
 63c:	56524553 			; <UNDEFINED> instruction: 0x56524553
 640:	00344445 	eorseq	r4, r4, r5, asr #8
 644:	45534552 	ldrbmi	r4, [r3, #-1362]	; 0xfffffaae
 648:	44455652 	strbmi	r5, [r5], #-1618	; 0xfffff9ae
 64c:	45520035 	ldrbmi	r0, [r2, #-53]	; 0xffffffcb
 650:	56524553 			; <UNDEFINED> instruction: 0x56524553
 654:	00364445 	eorseq	r4, r6, r5, asr #8
 658:	5f434352 	svcpl	0x00434352
 65c:	46746547 	ldrbtmi	r6, [r4], -r7, asr #10
 660:	5367616c 	cmnpl	r7, #108, 2
 664:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0xfffffe8c
 668:	43520073 	cmpmi	r2, #115	; 0x73
 66c:	53485f43 	movtpl	r5, #36675	; 0x8f43
 670:	6e6f4345 	cdpvs	3, 6, cr4, cr15, cr5, {2}
 674:	00676966 	rsbeq	r6, r7, r6, ror #18
 678:	5f434352 	svcpl	0x00434352
 67c:	42494153 	submi	r4, r9, #-1073741804	; 0xc0000014
 680:	6b636f6c 	blvs	18dc438 <startup-0x1e723bc8>
 684:	4b4c4342 	blmi	1311394 <startup-0x1eceec6c>
 688:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
 68c:	50006769 	andpl	r6, r0, r9, ror #14
 690:	41534c4c 	cmpmi	r3, ip, asr #24
 694:	49004e49 	stmdbmi	r0, {r0, r3, r6, r9, sl, fp, lr}
 698:	525f4d54 	subspl	r4, pc, #84, 26	; 0x1500
 69c:	66754278 			; <UNDEFINED> instruction: 0x66754278
 6a0:	00726566 	rsbseq	r6, r2, r6, ror #10
 6a4:	534c4c50 	movtpl	r4, #52304	; 0xcc50
 6a8:	00514941 	subseq	r4, r1, r1, asr #18
 6ac:	534c4c50 	movtpl	r4, #52304	; 0xcc50
 6b0:	00524941 	subseq	r4, r2, r1, asr #18
 6b4:	726f6873 	rsbvc	r6, pc, #7536640	; 0x730000
 6b8:	6e692074 	mcrvs	0, 3, r2, cr9, cr4, {3}
 6bc:	43520074 	cmpmi	r2, #116	; 0x74
 6c0:	49545f43 	ldmdbmi	r4, {r0, r1, r6, r8, r9, sl, fp, ip, lr}^
 6c4:	4b4c434d 	blmi	1311400 <startup-0x1eceec00>
 6c8:	73657250 	cmnvc	r5, #80, 4
 6cc:	656c6163 	strbvs	r6, [ip, #-355]!	; 0xfffffe9d
 6d0:	43520072 	cmpmi	r2, #114	; 0x72
 6d4:	4c505f43 	mrrcmi	15, 4, r5, r0, cr3
 6d8:	646d434c 	strbtvs	r4, [sp], #-844	; 0xfffffcb4
 6dc:	43435200 	movtmi	r5, #12800	; 0x3200
 6e0:	4248415f 	submi	r4, r8, #-1073741801	; 0xc0000017
 6e4:	72655031 	rsbvc	r5, r5, #49	; 0x31
 6e8:	43687069 	cmnmi	r8, #105	; 0x69
 6ec:	6b636f6c 	blvs	18dc4a4 <startup-0x1e723b5c>
 6f0:	00646d43 	rsbeq	r6, r4, r3, asr #26
 6f4:	32425041 	subcc	r5, r2, #65	; 0x41
 6f8:	00524e45 	subseq	r4, r2, r5, asr #28
 6fc:	33424841 	movtcc	r4, #10305	; 0x2841
 700:	52545352 	subspl	r5, r4, #1207959553	; 0x48000001
 704:	43435200 	movtmi	r5, #12800	; 0x3200
 708:	646f4d5f 	strbtvs	r4, [pc], #-3423	; 710 <startup-0x1ffff8f0>
 70c:	43520065 	cmpmi	r2, #101	; 0x65
 710:	48415f43 	stmdami	r1, {r0, r1, r6, r8, r9, sl, fp, ip, lr}^
 714:	65503242 	ldrbvs	r3, [r0, #-578]	; 0xfffffdbe
 718:	68706972 	ldmdavs	r0!, {r1, r4, r5, r6, r8, fp, sp, lr}^
 71c:	65736552 	ldrbvs	r6, [r3, #-1362]!	; 0xfffffaae
 720:	646d4374 	strbtvs	r4, [sp], #-884	; 0xfffffc8c
 724:	43435200 	movtmi	r5, #12800	; 0x3200
 728:	4250415f 	subsmi	r4, r0, #-1073741801	; 0xc0000017
 72c:	72655031 	rsbvc	r5, r5, #49	; 0x31
 730:	43687069 	cmnmi	r8, #105	; 0x69
 734:	6b636f6c 	blvs	18dc4ec <startup-0x1e723b14>
 738:	6f4d504c 	svcvs	0x004d504c
 73c:	6d436564 	cfstr64vs	mvdx6, [r3, #-400]	; 0xfffffe70
 740:	43520064 	cmpmi	r2, #100	; 0x64
 744:	43505f43 	cmpmi	r0, #268	; 0x10c
 748:	43324b4c 	teqmi	r2, #76, 22	; 0x13000
 74c:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
 750:	43520067 	cmpmi	r2, #103	; 0x67
 754:	59535f43 	ldmdbpl	r3, {r0, r1, r6, r8, r9, sl, fp, ip, lr}^
 758:	4b4c4353 	blmi	13114ac <startup-0x1eceeb54>
 75c:	72756f53 	rsbsvc	r6, r5, #332	; 0x14c
 760:	52006563 	andpl	r6, r0, #415236096	; 0x18c00000
 764:	485f4343 	ldmdami	pc, {r0, r1, r6, r8, r9, lr}^	; <UNPREDICTABLE>
 768:	50004553 	andpl	r4, r0, r3, asr r5
 76c:	314b4c43 	cmpcc	fp, r3, asr #24
 770:	6572465f 	ldrbvs	r4, [r2, #-1631]!	; 0xfffff9a1
 774:	6e657571 	mcrvs	5, 3, r7, cr5, cr1, {3}
 778:	41007963 	tstmi	r0, r3, ror #18
 77c:	48414250 	stmdami	r1, {r4, r6, r9, lr}^
 780:	65725042 	ldrbvs	r5, [r2, #-66]!	; 0xffffffbe
 784:	61546373 	cmpvs	r4, r3, ror r3
 788:	00656c62 	rsbeq	r6, r5, r2, ror #24
 78c:	5f434352 	svcpl	0x00434352
 790:	756a6441 	strbvc	r6, [sl, #-1089]!	; 0xfffffbbf
 794:	53487473 	movtpl	r7, #33907	; 0x8473
 798:	6c614349 	stclvs	3, cr4, [r1], #-292	; 0xfffffedc
 79c:	61726269 	cmnvs	r2, r9, ror #4
 7a0:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
 7a4:	756c6156 	strbvc	r6, [ip, #-342]!	; 0xfffffeaa
 7a8:	73680065 	cmnvc	r8, #101	; 0x65
 7ac:	61747365 	cmnvs	r4, r5, ror #6
 7b0:	00737574 	rsbseq	r7, r3, r4, ror r5
 7b4:	494c4c50 	stmdbmi	ip, {r4, r6, sl, fp, lr}^
 7b8:	004e5332 	subeq	r5, lr, r2, lsr r3
 7bc:	5f434352 	svcpl	0x00434352
 7c0:	43746547 	cmnmi	r4, #297795584	; 0x11c00000
 7c4:	6b636f6c 	blvs	18dc57c <startup-0x1e723a84>
 7c8:	65724673 	ldrbvs	r4, [r2, #-1651]!	; 0xfffff98d
 7cc:	43520071 	cmpmi	r2, #113	; 0x71
 7d0:	50415f43 	subpl	r5, r1, r3, asr #30
 7d4:	65503242 	ldrbvs	r3, [r0, #-578]	; 0xfffffdbe
 7d8:	68706972 	ldmdavs	r0!, {r1, r4, r5, r6, r8, fp, sp, lr}^
 7dc:	636f6c43 	cmnvs	pc, #17152	; 0x4300
 7e0:	646d436b 	strbtvs	r4, [sp], #-875	; 0xfffffc95
 7e4:	755f5f00 	ldrbvc	r5, [pc, #-3840]	; fffff8ec <APBAHBPrescTable+0xdfffe524>
 7e8:	31746e69 	cmncc	r4, r9, ror #28
 7ec:	00745f36 	rsbseq	r5, r4, r6, lsr pc
 7f0:	32424841 	subcc	r4, r2, #4259840	; 0x410000
 7f4:	52545352 	subspl	r5, r4, #1207959553	; 0x48000001
 7f8:	43435200 	movtmi	r5, #12800	; 0x3200
 7fc:	4965445f 	stmdbmi	r5!, {r0, r1, r2, r3, r4, r6, sl, lr}^
 800:	0074696e 	rsbseq	r6, r4, lr, ror #18
 804:	494c4c50 	stmdbmi	ip, {r4, r6, sl, fp, lr}^
 808:	00525332 	subseq	r5, r2, r2, lsr r3
 80c:	6e695f5f 	mcrvs	15, 3, r5, cr9, cr15, {2}
 810:	5f323374 	svcpl	0x00323374
 814:	43520074 	cmpmi	r2, #116	; 0x74
 818:	65475f43 	strbvs	r5, [r7, #-3907]	; 0xfffff0bd
 81c:	53544974 	cmppl	r4, #116, 18	; 0x1d0000
 820:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0xfffffe8c
 824:	50410073 	subpl	r0, r1, r3, ror r0
 828:	4e453142 	dvfmism	f3, f5, f2
 82c:	48410052 	stmdami	r1, {r1, r4, r6}^
 830:	4e453242 	cdpmi	2, 4, cr3, cr5, cr2, {2}
 834:	43520052 	cmpmi	r2, #82	; 0x52
 838:	48415f43 	stmdami	r1, {r0, r1, r6, r8, r9, sl, fp, ip, lr}^
 83c:	65503342 	ldrbvs	r3, [r0, #-834]	; 0xfffffcbe
 840:	68706972 	ldmdavs	r0!, {r1, r4, r5, r6, r8, fp, sp, lr}^
 844:	636f6c43 	cmnvs	pc, #17152	; 0x4300
 848:	4d504c6b 	ldclmi	12, cr4, [r0, #-428]	; 0xfffffe54
 84c:	4365646f 	cmnmi	r5, #1862270976	; 0x6f000000
 850:	7500646d 	strvc	r6, [r0, #-1133]	; 0xfffffb93
 854:	6769736e 	strbvs	r7, [r9, -lr, ror #6]!
 858:	2064656e 	rsbcs	r6, r4, lr, ror #10
 85c:	72616863 	rsbvc	r6, r1, #6488064	; 0x630000
 860:	61747300 	cmnvs	r4, r0, lsl #6
 864:	70757472 	rsbsvc	r7, r5, r2, ror r4
 868:	6e756f63 	cdpvs	15, 7, cr6, cr5, cr3, {3}
 86c:	00726574 	rsbseq	r6, r2, r4, ror r5
 870:	5f434352 	svcpl	0x00434352
 874:	32425041 	subcc	r5, r2, #65	; 0x41
 878:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
 87c:	52006870 	andpl	r6, r0, #112, 16	; 0x700000
 880:	545f4343 	ldrbpl	r4, [pc], #-835	; 888 <startup-0x1ffff778>
 884:	4c434d49 	mcrrmi	13, 4, r4, r3, cr9
 888:	6572504b 	ldrbvs	r5, [r2, #-75]!	; 0xffffffb5
 88c:	6e6f4373 	mcrvs	3, 3, r4, cr15, cr3, {3}
 890:	00676966 	rsbeq	r6, r7, r6, ror #18
 894:	5f434352 	svcpl	0x00434352
 898:	43533249 	cmpmi	r3, #-1879048188	; 0x90000004
 89c:	6f434b4c 	svcvs	0x00434b4c
 8a0:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
 8a4:	43435200 	movtmi	r5, #12800	; 0x3200
 8a8:	4f434d5f 	svcmi	0x00434d5f
 8ac:	6e6f4332 	mcrvs	3, 3, r4, cr15, cr2, {1}
 8b0:	00676966 	rsbeq	r6, r7, r6, ror #18
 8b4:	47435353 	smlsldmi	r5, r3, r3, r3
 8b8:	48410052 	stmdami	r1, {r1, r4, r6}^
 8bc:	504c3342 	subpl	r3, ip, r2, asr #6
 8c0:	00524e45 	subseq	r4, r2, r5, asr #28
 8c4:	31425041 	cmpcc	r2, r1, asr #32
 8c8:	52545352 	subspl	r5, r4, #1207959553	; 0x48000001
 8cc:	43435200 	movtmi	r5, #12800	; 0x3200
 8d0:	49534c5f 	ldmdbmi	r3, {r0, r1, r2, r3, r4, r6, sl, fp, lr}^
 8d4:	00646d43 	rsbeq	r6, r4, r3, asr #26
 8d8:	41474b43 	cmpmi	r7, r3, asr #22
 8dc:	524e4554 	subpl	r4, lr, #84, 10	; 0x15000000
 8e0:	43444200 	movtmi	r4, #16896	; 0x4200
 8e4:	43520052 	cmpmi	r2, #82	; 0x52
 8e8:	50415f43 	subpl	r5, r1, r3, asr #30
 8ec:	65503142 	ldrbvs	r3, [r0, #-322]	; 0xfffffebe
 8f0:	68706972 	ldmdavs	r0!, {r1, r4, r5, r6, r8, fp, sp, lr}^
 8f4:	636f6c43 	cmnvs	pc, #17152	; 0x4300
 8f8:	646d436b 	strbtvs	r4, [sp], #-875	; 0xfffffc95
 8fc:	43435200 	movtmi	r5, #12800	; 0x3200
 900:	4354495f 	cmpmi	r4, #1556480	; 0x17c000
 904:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
 908:	55530067 	ldrbpl	r0, [r3, #-103]	; 0xffffff99
 90c:	53454343 	movtpl	r4, #21315	; 0x5343
 910:	3a430053 	bcc	10c0a64 <startup-0x1ef3f59c>
 914:	6573555c 	ldrbvs	r5, [r3, #-1372]!	; 0xfffffaa4
 918:	415c7372 	cmpmi	ip, r2, ror r3
 91c:	746d6164 	strbtvc	r6, [sp], #-356	; 0xfffffe9c
 920:	656e4f5c 	strbvs	r4, [lr, #-3932]!	; 0xfffff0a4
 924:	76697244 	strbtvc	r7, [r9], -r4, asr #4
 928:	6f445c65 	svcvs	0x00445c65
 92c:	656d756b 	strbvs	r7, [sp, #-1387]!	; 0xfffffa95
 930:	475c746e 	ldrbmi	r7, [ip, -lr, ror #8]
 934:	75487469 	strbvc	r7, [r8, #-1129]	; 0xfffffb97
 938:	41445c62 	cmpmi	r4, r2, ror #24
 93c:	30393254 	eorscc	r3, r9, r4, asr r2
 940:	72614c2d 	rsbvc	r4, r1, #11520	; 0x2d00
 944:	7379736d 	cmnvc	r9, #-1275068415	; 0xb4000001
 948:	5c6d6574 	cfstr64pl	mvdx6, [sp], #-464	; 0xfffffe30
 94c:	5c646f6b 	stclpl	15, cr6, [r4], #-428	; 0xfffffe54
 950:	726f6f44 	rsbvc	r6, pc, #68, 30	; 0x110
 954:	43435200 	movtmi	r5, #12800	; 0x3200
 958:	4c4c505f 	mcrrmi	0, 5, r5, ip, cr15
 95c:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
 960:	52006769 	andpl	r6, r0, #27525120	; 0x1a40000
 964:	435f4343 	cmpmi	pc, #201326593	; 0xc000001
 968:	6b636f6c 	blvs	18dc720 <startup-0x1e7238e0>
 96c:	70795473 	rsbsvc	r5, r9, r3, ror r4
 970:	66654465 	strbtvs	r4, [r5], -r5, ror #8
 974:	42484100 	submi	r4, r8, #0, 2
 978:	524e4531 	subpl	r4, lr, #205520896	; 0xc400000
 97c:	43435200 	movtmi	r5, #12800	; 0x3200
 980:	4354525f 	cmpmi	r4, #-268435451	; 0xf0000005
 984:	434b4c43 	movtmi	r4, #48195	; 0xbc43
 988:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
 98c:	6c700067 	ldclvs	0, cr0, [r0], #-412	; 0xfffffe64
 990:	756f736c 	strbvc	r7, [pc, #-876]!	; 62c <startup-0x1ffff9d4>
 994:	00656372 	rsbeq	r6, r5, r2, ror r3
 998:	5f434352 	svcpl	0x00434352
 99c:	31424841 	cmpcc	r2, r1, asr #16
 9a0:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
 9a4:	6c436870 	mcrrvs	8, 7, r6, r3, cr0
 9a8:	4c6b636f 	stclmi	3, cr6, [fp], #-444	; 0xfffffe44
 9ac:	646f4d50 	strbtvs	r4, [pc], #-3408	; 9b4 <startup-0x1ffff64c>
 9b0:	646d4365 	strbtvs	r4, [sp], #-869	; 0xfffffc9b
 9b4:	43435200 	movtmi	r5, #12800	; 0x3200
 9b8:	4248415f 	submi	r4, r8, #-1073741801	; 0xc0000017
 9bc:	72655033 	rsbvc	r5, r5, #51	; 0x33
 9c0:	43687069 	cmnmi	r8, #105	; 0x69
 9c4:	6b636f6c 	blvs	18dc77c <startup-0x1e723884>
 9c8:	00646d43 	rsbeq	r6, r4, r3, asr #26
 9cc:	4f495047 	svcmi	0x00495047
 9d0:	7079545f 	rsbsvc	r5, r9, pc, asr r4
 9d4:	66654465 	strbtvs	r4, [r5], -r5, ror #8
 9d8:	6e697000 	cdpvs	0, 6, cr7, cr9, cr0, {0}
 9dc:	00736f70 	rsbseq	r6, r3, r0, ror pc
 9e0:	4f495047 	svcmi	0x00495047
 9e4:	6e69505f 	mcrvs	0, 3, r5, cr9, cr15, {2}
 9e8:	74694200 	strbtvc	r4, [r9], #-512	; 0xfffffe00
 9ec:	5445535f 	strbpl	r5, [r5], #-863	; 0xfffffca1
 9f0:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
 9f4:	65525f4f 	ldrbvs	r5, [r2, #-3919]	; 0xfffff0b1
 9f8:	754f6461 	strbvc	r6, [pc, #-1121]	; 59f <startup-0x1ffffa61>
 9fc:	74757074 	ldrbtvc	r7, [r5], #-116	; 0xffffff8c
 a00:	61746144 	cmnvs	r4, r4, asr #2
 a04:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
 a08:	646f4d4f 	strbtvs	r4, [pc], #-3407	; a10 <startup-0x1ffff5f0>
 a0c:	79545f65 	ldmdbvc	r4, {r0, r2, r5, r6, r8, r9, sl, fp, ip, lr}^
 a10:	65446570 	strbvs	r6, [r4, #-1392]	; 0xfffffa90
 a14:	50470066 	subpl	r0, r7, r6, rrx
 a18:	415f4f49 	cmpmi	pc, r9, asr #30
 a1c:	65740046 	ldrbvs	r0, [r4, #-70]!	; 0xffffffba
 a20:	4700706d 	strmi	r7, [r0, -sp, rrx]
 a24:	5f4f4950 	svcpl	0x004f4950
 a28:	75727453 	ldrbvc	r7, [r2, #-1107]!	; 0xfffffbad
 a2c:	6e497463 	cdpvs	4, 4, cr7, cr9, cr3, {3}
 a30:	42007469 	andmi	r7, r0, #1761607680	; 0x69000000
 a34:	61567469 	cmpvs	r6, r9, ror #8
 a38:	5047006c 	subpl	r0, r7, ip, rrx
 a3c:	4f5f4f49 	svcmi	0x005f4f49
 a40:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0xfffff6ac
 a44:	00444f5f 	subeq	r4, r4, pc, asr pc
 a48:	5f746942 	svcpl	0x00746942
 a4c:	45534552 	ldrbmi	r4, [r3, #-1362]	; 0xfffffaae
 a50:	50470054 	subpl	r0, r7, r4, asr r0
 a54:	575f4f49 	ldrbpl	r4, [pc, -r9, asr #30]
 a58:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
 a5c:	00746942 	rsbseq	r6, r4, r2, asr #18
 a60:	4f495047 	svcmi	0x00495047
 a64:	79544f5f 	ldmdbvc	r4, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, lr}^
 a68:	47006570 	smlsdxmi	r0, r0, r5, r6
 a6c:	5f4f4950 	svcpl	0x004f4950
 a70:	65646f4d 	strbvs	r6, [r4, #-3917]!	; 0xfffff0b3
 a74:	0046415f 	subeq	r4, r6, pc, asr r1
 a78:	4f495047 	svcmi	0x00495047
 a7c:	7465535f 	strbtvc	r5, [r5], #-863	; 0xfffffca1
 a80:	73746942 	cmnvc	r4, #1081344	; 0x108000
 a84:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
 a88:	70535f4f 	subsvc	r5, r3, pc, asr #30
 a8c:	00646565 	rsbeq	r6, r4, r5, ror #10
 a90:	4f495047 	svcmi	0x00495047
 a94:	696e495f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, lr}^
 a98:	50470074 	subpl	r0, r7, r4, ror r0
 a9c:	4d5f4f49 	ldclmi	15, cr4, [pc, #-292]	; 980 <startup-0x1ffff680>
 aa0:	5f65646f 	svcpl	0x0065646f
 aa4:	47004e41 	strmi	r4, [r0, -r1, asr #28]
 aa8:	5f4f4950 	svcpl	0x004f4950
 aac:	65736552 	ldrbvs	r6, [r3, #-1362]!	; 0xfffffaae
 ab0:	74694274 	strbtvc	r4, [r9], #-628	; 0xfffffd8c
 ab4:	434c0073 	movtmi	r0, #49267	; 0xc073
 ab8:	4700524b 	strmi	r5, [r0, -fp, asr #4]
 abc:	4f4f4950 	svcmi	0x004f4950
 ac0:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0xfffff6ac
 ac4:	7079545f 	rsbsvc	r5, r9, pc, asr r4
 ac8:	66654465 	strbtvs	r4, [r5], -r5, ror #8
 acc:	59544f00 	ldmdbpl	r4, {r8, r9, sl, fp, lr}^
 ad0:	00524550 	subseq	r4, r2, r0, asr r5
 ad4:	552f3a43 	strpl	r3, [pc, #-2627]!	; 99 <startup-0x1fffff67>
 ad8:	73726573 	cmnvc	r2, #482344960	; 0x1cc00000
 adc:	6164412f 	cmnvs	r4, pc, lsr #2
 ae0:	4f2f746d 	svcmi	0x002f746d
 ae4:	7244656e 	subvc	r6, r4, #461373440	; 0x1b800000
 ae8:	2f657669 	svccs	0x00657669
 aec:	756b6f44 	strbvc	r6, [fp, #-3908]!	; 0xfffff0bc
 af0:	746e656d 	strbtvc	r6, [lr], #-1389	; 0xfffffa93
 af4:	7469472f 	strbtvc	r4, [r9], #-1839	; 0xfffff8d1
 af8:	2f627548 	svccs	0x00627548
 afc:	32544144 	subscc	r4, r4, #68, 2
 b00:	4c2d3039 	stcmi	0, cr3, [sp], #-228	; 0xffffff1c
 b04:	736d7261 	cmnvc	sp, #268435462	; 0x10000006
 b08:	65747379 	ldrbvs	r7, [r4, #-889]!	; 0xfffffc87
 b0c:	6f6b2f6d 	svcvs	0x006b2f6d
 b10:	696c2f64 	stmdbvs	ip!, {r2, r5, r6, r8, r9, sl, fp, sp}^
 b14:	54532f62 	ldrbpl	r2, [r3], #-3938	; 0xfffff09e
 b18:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
 b1c:	696c5f34 	stmdbvs	ip!, {r2, r4, r5, r8, r9, sl, fp, ip, lr}^
 b20:	54532f62 	ldrbpl	r2, [r3], #-3938	; 0xfffff09e
 b24:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
 b28:	5f787834 	svcpl	0x00787834
 b2c:	50647453 	rsbpl	r7, r4, r3, asr r4
 b30:	70697265 	rsbvc	r7, r9, r5, ror #4
 b34:	72445f68 	subvc	r5, r4, #104, 30	; 0x1a0
 b38:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
 b3c:	6372732f 	cmnvs	r2, #-1140850688	; 0xbc000000
 b40:	6d74732f 	ldclvs	3, cr7, [r4, #-188]!	; 0xffffff44
 b44:	34663233 	strbtcc	r3, [r6], #-563	; 0xfffffdcd
 b48:	675f7878 			; <UNDEFINED> instruction: 0x675f7878
 b4c:	2e6f6970 			; <UNDEFINED> instruction: 0x2e6f6970
 b50:	50470063 	subpl	r0, r7, r3, rrx
 b54:	4d5f4f49 	ldclmi	15, cr4, [pc, #-292]	; a38 <startup-0x1ffff5c8>
 b58:	5f65646f 	svcpl	0x0065646f
 b5c:	0054554f 	subseq	r5, r4, pc, asr #10
 b60:	44505550 	ldrbmi	r5, [r0], #-1360	; 0xfffffab0
 b64:	50470052 	subpl	r0, r7, r2, asr r0
 b68:	4d5f4f49 	ldclmi	15, cr4, [pc, #-292]	; a4c <startup-0x1ffff5b4>
 b6c:	5f65646f 	svcpl	0x0065646f
 b70:	47004e49 	strmi	r4, [r0, -r9, asr #28]
 b74:	5f4f4950 	svcpl	0x004f4950
 b78:	6e496544 	cdpvs	5, 4, cr6, cr9, cr4, {2}
 b7c:	42007469 	andmi	r7, r0, #1761607680	; 0x69000000
 b80:	48525253 	ldmdami	r2, {r0, r1, r4, r6, r9, ip, lr}^
 b84:	444f4d00 	strbmi	r4, [pc], #-3328	; b8c <startup-0x1ffff474>
 b88:	47005245 	strmi	r5, [r0, -r5, asr #4]
 b8c:	5f4f4950 	svcpl	0x004f4950
 b90:	64616552 	strbtvs	r6, [r1], #-1362	; 0xfffffaae
 b94:	75706e49 	ldrbvc	r6, [r0, #-3657]!	; 0xfffff1b7
 b98:	74614474 	strbtvc	r4, [r1], #-1140	; 0xfffffb8c
 b9c:	74694261 	strbtvc	r4, [r9], #-609	; 0xfffffd9f
 ba0:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
 ba4:	544f5f4f 	strbpl	r5, [pc], #-3919	; bac <startup-0x1ffff454>
 ba8:	5f657079 	svcpl	0x00657079
 bac:	47005050 	smlsdmi	r0, r0, r0, r5
 bb0:	5f4f4950 	svcpl	0x004f4950
 bb4:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xfffff1b7
 bb8:	75727453 	ldrbvc	r7, [r2, #-1107]!	; 0xfffffbad
 bbc:	50007463 	andpl	r7, r0, r3, ror #8
 bc0:	5674726f 	ldrbtpl	r7, [r4], -pc, ror #4
 bc4:	47006c61 	strmi	r6, [r0, -r1, ror #24]
 bc8:	5f4f4950 	svcpl	0x004f4950
 bcc:	536e6950 	cmnpl	lr, #80, 18	; 0x140000
 bd0:	6372756f 	cmnvs	r2, #465567744	; 0x1bc00000
 bd4:	50470065 	subpl	r0, r7, r5, rrx
 bd8:	525f4f49 	subspl	r4, pc, #292	; 0x124
 bdc:	49646165 	stmdbmi	r4!, {r0, r2, r5, r6, r8, sp, lr}^
 be0:	7475706e 	ldrbtvc	r7, [r5], #-110	; 0xffffff92
 be4:	61746144 	cmnvs	r4, r4, asr #2
 be8:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
 bec:	61465f4f 	cmpvs	r6, pc, asr #30
 bf0:	535f7473 	cmppl	pc, #1929379840	; 0x73000000
 bf4:	64656570 	strbtvs	r6, [r5], #-1392	; 0xfffffa90
 bf8:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
 bfc:	69505f4f 	ldmdbvs	r0, {r0, r1, r2, r3, r6, r8, r9, sl, fp, ip, lr}^
 c00:	636f4c6e 	cmnvs	pc, #28160	; 0x6e00
 c04:	6e6f436b 	cdpvs	3, 6, cr4, cr15, cr11, {3}
 c08:	00676966 	rsbeq	r6, r7, r6, ror #18
 c0c:	41746942 	cmnmi	r4, r2, asr #18
 c10:	6f697463 	svcvs	0x00697463
 c14:	7563006e 	strbvc	r0, [r3, #-110]!	; 0xffffff92
 c18:	6e657272 	mcrvs	2, 3, r7, cr5, cr2, {3}
 c1c:	6e697074 	mcrvs	0, 3, r7, cr9, cr4, {3}
 c20:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
 c24:	72575f4f 	subsvc	r5, r7, #316	; 0x13c
 c28:	00657469 	rsbeq	r7, r5, r9, ror #8
 c2c:	4f495047 	svcmi	0x00495047
 c30:	776f4c5f 			; <UNDEFINED> instruction: 0x776f4c5f
 c34:	6570535f 	ldrbvs	r5, [r0, #-863]!	; 0xfffffca1
 c38:	47006465 	strmi	r6, [r0, -r5, ror #8]
 c3c:	5f4f4950 	svcpl	0x004f4950
 c40:	6964654d 	stmdbvs	r4!, {r0, r2, r3, r6, r8, sl, sp, lr}^
 c44:	535f6d75 	cmppl	pc, #7488	; 0x1d40
 c48:	64656570 	strbtvs	r6, [r5], #-1392	; 0xfffffa90
 c4c:	50534f00 	subspl	r4, r3, r0, lsl #30
 c50:	52444545 	subpl	r4, r4, #289406976	; 0x11400000
 c54:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
 c58:	4700784f 	strmi	r7, [r0, -pc, asr #16]
 c5c:	534f4950 	movtpl	r4, #63824	; 0xf950
 c60:	64656570 	strbtvs	r6, [r5], #-1392	; 0xfffffa90
 c64:	7079545f 	rsbsvc	r5, r9, pc, asr r4
 c68:	66654465 	strbtvs	r4, [r5], -r5, ror #8
 c6c:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
 c70:	75505f4f 	ldrbvc	r5, [r0, #-3919]	; 0xfffff0b1
 c74:	445f6450 	ldrbmi	r6, [pc], #-1104	; c7c <startup-0x1ffff384>
 c78:	004e574f 	subeq	r5, lr, pc, asr #14
 c7c:	4f495047 	svcmi	0x00495047
 c80:	5075505f 	rsbspl	r5, r5, pc, asr r0
 c84:	4f4e5f64 	svcmi	0x004e5f64
 c88:	4c4c5550 	cfstr64mi	mvdx5, [ip], {80}	; 0x50
 c8c:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
 c90:	6f545f4f 	svcvs	0x00545f4f
 c94:	656c6767 	strbvs	r6, [ip, #-1895]!	; 0xfffff899
 c98:	73746942 	cmnvc	r4, #1081344	; 0x108000
 c9c:	6d657400 	cfstrdvs	mvd7, [r5, #-0]
 ca0:	00325f70 	eorseq	r5, r2, r0, ror pc
 ca4:	4f495047 	svcmi	0x00495047
 ca8:	5075505f 	rsbspl	r5, r5, pc, asr r0
 cac:	50470064 	subpl	r0, r7, r4, rrx
 cb0:	495f4f49 	ldmdbmi	pc, {r0, r3, r6, r8, r9, sl, fp, lr}^	; <UNPREDICTABLE>
 cb4:	5474696e 	ldrbtpl	r6, [r4], #-2414	; 0xfffff692
 cb8:	44657079 	strbtmi	r7, [r5], #-121	; 0xffffff87
 cbc:	47006665 	strmi	r6, [r0, -r5, ror #12]
 cc0:	5f4f4950 	svcpl	0x004f4950
 cc4:	68676948 	stmdavs	r7!, {r3, r6, r8, fp, sp, lr}^
 cc8:	6570535f 	ldrbvs	r5, [r0, #-863]!	; 0xfffffca1
 ccc:	47006465 	strmi	r6, [r0, -r5, ror #8]
 cd0:	504f4950 	subpl	r4, pc, r0, asr r9	; <UNPREDICTABLE>
 cd4:	5f645075 	svcpl	0x00645075
 cd8:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0xfffff6ac
 cdc:	00666544 	rsbeq	r6, r6, r4, asr #10
 ce0:	4f495047 	svcmi	0x00495047
 ce4:	5075505f 	rsbspl	r5, r5, pc, asr r0
 ce8:	50555f64 	subspl	r5, r5, r4, ror #30
 cec:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
 cf0:	69505f4f 	ldmdbvs	r0, {r0, r1, r2, r3, r6, r8, r9, sl, fp, ip, lr}^
 cf4:	4346416e 	movtmi	r4, #24942	; 0x616e
 cf8:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
 cfc:	53420067 	movtpl	r0, #8295	; 0x2067
 d00:	004c5252 	subeq	r5, ip, r2, asr r2
 d04:	4f495047 	svcmi	0x00495047
 d08:	6165525f 	cmnvs	r5, pc, asr r2
 d0c:	74754f64 	ldrbtvc	r4, [r5], #-3940	; 0xfffff09c
 d10:	44747570 	ldrbtmi	r7, [r4], #-1392	; 0xfffffa90
 d14:	42617461 	rsbmi	r7, r1, #1627389952	; 0x61000000
 d18:	47007469 	strmi	r7, [r0, -r9, ror #8]
 d1c:	5f4f4950 	svcpl	0x004f4950
 d20:	65646f4d 	strbvs	r6, [r4, #-3917]!	; 0xfffff0b3
 d24:	61747300 	cmnvs	r4, r0, lsl #6
 d28:	70757472 	rsbsvc	r7, r5, r2, ror r4
 d2c:	70706100 	rsbsvc	r6, r0, r0, lsl #2
 d30:	696e695f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, sp, lr}^
 d34:	616d0074 	smcvs	53252	; 0xd004
 d38:	43006e69 	movwmi	r6, #3689	; 0xe69
 d3c:	73552f3a 	cmpvc	r5, #58, 30	; 0xe8
 d40:	2f737265 	svccs	0x00737265
 d44:	6d616441 	cfstrdvs	mvd6, [r1, #-260]!	; 0xfffffefc
 d48:	6e4f2f74 	mcrvs	15, 2, r2, cr15, cr4, {3}
 d4c:	69724465 	ldmdbvs	r2!, {r0, r2, r5, r6, sl, lr}^
 d50:	442f6576 	strtmi	r6, [pc], #-1398	; d58 <startup-0x1ffff2a8>
 d54:	6d756b6f 	fldmdbxvs	r5!, {d22-d76}	;@ Deprecated
 d58:	2f746e65 	svccs	0x00746e65
 d5c:	48746947 	ldmdami	r4!, {r0, r1, r2, r6, r8, fp, sp, lr}^
 d60:	442f6275 	strtmi	r6, [pc], #-629	; d68 <startup-0x1ffff298>
 d64:	39325441 	ldmdbcc	r2!, {r0, r6, sl, ip, lr}
 d68:	614c2d30 	cmpvs	ip, r0, lsr sp
 d6c:	79736d72 	ldmdbvc	r3!, {r1, r4, r5, r6, r8, sl, fp, sp, lr}^
 d70:	6d657473 	cfstrdvs	mvd7, [r5, #-460]!	; 0xfffffe34
 d74:	646f6b2f 	strbtvs	r6, [pc], #-2863	; d7c <startup-0x1ffff284>
 d78:	6f6f442f 	svcvs	0x006f442f
 d7c:	74732f72 	ldrbtvc	r2, [r3], #-3954	; 0xfffff08e
 d80:	75747261 	ldrbvc	r7, [r4, #-609]!	; 0xfffffd9f
 d84:	00632e70 	rsbeq	r2, r3, r0, ror lr

Disassembly of section .comment:

00000000 <.comment>:
   0:	3a434347 	bcc	10d0d24 <startup-0x1ef2f2dc>
   4:	4e472820 	cdpmi	8, 4, cr2, cr7, cr0, {1}
   8:	6f542055 	svcvs	0x00542055
   c:	20736c6f 	rsbscs	r6, r3, pc, ror #24
  10:	20726f66 	rsbscs	r6, r2, r6, ror #30
  14:	206d7241 	rsbcs	r7, sp, r1, asr #4
  18:	65626d45 	strbvs	r6, [r2, #-3397]!	; 0xfffff2bb
  1c:	64656464 	strbtvs	r6, [r5], #-1124	; 0xfffffb9c
  20:	6f725020 	svcvs	0x00725020
  24:	73736563 	cmnvc	r3, #415236096	; 0x18c00000
  28:	2073726f 	rsbscs	r7, r3, pc, ror #4
  2c:	30322d37 	eorscc	r2, r2, r7, lsr sp
  30:	712d3731 			; <UNDEFINED> instruction: 0x712d3731
  34:	616d2d34 	cmnvs	sp, r4, lsr sp
  38:	29726f6a 	ldmdbcs	r2!, {r1, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
  3c:	322e3720 	eorcc	r3, lr, #32, 14	; 0x800000
  40:	3220312e 	eorcc	r3, r0, #-2147483637	; 0x8000000b
  44:	30373130 	eorscc	r3, r7, r0, lsr r1
  48:	20343039 	eorscs	r3, r4, r9, lsr r0
  4c:	6c657228 	sfmvs	f7, 2, [r5], #-160	; 0xffffff60
  50:	65736165 	ldrbvs	r6, [r3, #-357]!	; 0xfffffe9b
  54:	415b2029 	cmpmi	fp, r9, lsr #32
  58:	652f4d52 	strvs	r4, [pc, #-3410]!	; fffff30e <APBAHBPrescTable+0xdfffdf46>
  5c:	6465626d 	strbtvs	r6, [r5], #-621	; 0xfffffd93
  60:	2d646564 	cfstr64cs	mvdx6, [r4, #-400]!	; 0xfffffe70
  64:	72622d37 	rsbvc	r2, r2, #3520	; 0xdc0
  68:	68636e61 	stmdavs	r3!, {r0, r5, r6, r9, sl, fp, sp, lr}^
  6c:	76657220 	strbtvc	r7, [r5], -r0, lsr #4
  70:	6f697369 	svcvs	0x00697369
  74:	3532206e 	ldrcc	r2, [r2, #-110]!	; 0xffffff92
  78:	34303235 	ldrtcc	r3, [r0], #-565	; 0xfffffdcb
  7c:	Address 0x0000007c is out of bounds.


Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00002b41 	andeq	r2, r0, r1, asr #22
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	00000021 	andeq	r0, r0, r1, lsr #32
  10:	2d533605 	ldclcs	6, cr3, [r3, #-20]	; 0xffffffec
  14:	0c06004d 	stceq	0, cr0, [r6], {77}	; 0x4d
  18:	01094d07 	tsteq	r9, r7, lsl #26
  1c:	01140412 	tsteq	r4, r2, lsl r4
  20:	03170115 	tsteq	r7, #1073741829	; 0x40000005
  24:	01190118 	tsteq	r9, r8, lsl r1
  28:	061e011a 			; <UNDEFINED> instruction: 0x061e011a

Disassembly of section .debug_frame:

00000000 <.debug_frame>:
   0:	0000000c 	andeq	r0, r0, ip
   4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   8:	7c020001 	stcvc	0, cr0, [r2], {1}
   c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  10:	00000018 	andeq	r0, r0, r8, lsl r0
  14:	00000000 	andeq	r0, r0, r0
  18:	20000010 	andcs	r0, r0, r0, lsl r0
  1c:	00000070 	andeq	r0, r0, r0, ror r0
  20:	40080e41 	andmi	r0, r8, r1, asr #28
  24:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  28:	070d4101 	streq	r4, [sp, -r1, lsl #2]
  2c:	0000001c 	andeq	r0, r0, ip, lsl r0
  30:	00000000 	andeq	r0, r0, r0
  34:	20000080 	andcs	r0, r0, r0, lsl #1
  38:	00000028 	andeq	r0, r0, r8, lsr #32
  3c:	40080e41 	andmi	r0, r8, r1, asr #28
  40:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  44:	100e4101 	andne	r4, lr, r1, lsl #2
  48:	00070d41 	andeq	r0, r7, r1, asr #26
  4c:	00000020 	andeq	r0, r0, r0, lsr #32
  50:	00000000 	andeq	r0, r0, r0
  54:	200000a8 	andcs	r0, r0, r8, lsr #1
  58:	0000005e 	andeq	r0, r0, lr, asr r0
  5c:	400c0e41 	andmi	r0, ip, r1, asr #28
  60:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
  64:	018e4002 	orreq	r4, lr, r2
  68:	41180e41 	tstmi	r8, r1, asr #28
  6c:	0000070d 	andeq	r0, r0, sp, lsl #14
  70:	0000001c 	andeq	r0, r0, ip, lsl r0
  74:	00000000 	andeq	r0, r0, r0
  78:	20000106 	andcs	r0, r0, r6, lsl #2
  7c:	0000003e 	andeq	r0, r0, lr, lsr r0
  80:	40080e41 	andmi	r0, r8, r1, asr #28
  84:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  88:	180e4101 	stmdane	lr, {r0, r8, lr}
  8c:	00070d41 	andeq	r0, r7, r1, asr #26
  90:	0000001c 	andeq	r0, r0, ip, lsl r0
  94:	00000000 	andeq	r0, r0, r0
  98:	20000144 	andcs	r0, r0, r4, asr #2
  9c:	00000020 	andeq	r0, r0, r0, lsr #32
  a0:	40080e41 	andmi	r0, r8, r1, asr #28
  a4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  a8:	100e4101 	andne	r4, lr, r1, lsl #2
  ac:	00070d41 	andeq	r0, r7, r1, asr #26
  b0:	0000001c 	andeq	r0, r0, ip, lsl r0
  b4:	00000000 	andeq	r0, r0, r0
  b8:	20000164 	andcs	r0, r0, r4, ror #2
  bc:	00000044 	andeq	r0, r0, r4, asr #32
  c0:	40080e41 	andmi	r0, r8, r1, asr #28
  c4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  c8:	100e4101 	andne	r4, lr, r1, lsl #2
  cc:	00070d41 	andeq	r0, r7, r1, asr #26
  d0:	0000001c 	andeq	r0, r0, ip, lsl r0
  d4:	00000000 	andeq	r0, r0, r0
  d8:	200001a8 	andcs	r0, r0, r8, lsr #3
  dc:	00000020 	andeq	r0, r0, r0, lsr #32
  e0:	40080e41 	andmi	r0, r8, r1, asr #28
  e4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  e8:	100e4101 	andne	r4, lr, r1, lsl #2
  ec:	00070d41 	andeq	r0, r7, r1, asr #26
  f0:	0000001c 	andeq	r0, r0, ip, lsl r0
  f4:	00000000 	andeq	r0, r0, r0
  f8:	200001c8 	andcs	r0, r0, r8, asr #3
  fc:	0000003c 	andeq	r0, r0, ip, lsr r0
 100:	40080e41 	andmi	r0, r8, r1, asr #28
 104:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 108:	180e4101 	stmdane	lr, {r0, r8, lr}
 10c:	00070d41 	andeq	r0, r7, r1, asr #26
 110:	0000001c 	andeq	r0, r0, ip, lsl r0
 114:	00000000 	andeq	r0, r0, r0
 118:	20000204 	andcs	r0, r0, r4, lsl #4
 11c:	00000020 	andeq	r0, r0, r0, lsr #32
 120:	40080e41 	andmi	r0, r8, r1, asr #28
 124:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 128:	100e4101 	andne	r4, lr, r1, lsl #2
 12c:	00070d41 	andeq	r0, r7, r1, asr #26
 130:	0000001c 	andeq	r0, r0, ip, lsl r0
 134:	00000000 	andeq	r0, r0, r0
 138:	20000224 	andcs	r0, r0, r4, lsr #4
 13c:	00000028 	andeq	r0, r0, r8, lsr #32
 140:	40080e41 	andmi	r0, r8, r1, asr #28
 144:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 148:	100e4101 	andne	r4, lr, r1, lsl #2
 14c:	00070d41 	andeq	r0, r7, r1, asr #26
 150:	0000001c 	andeq	r0, r0, ip, lsl r0
 154:	00000000 	andeq	r0, r0, r0
 158:	2000024c 	andcs	r0, r0, ip, asr #4
 15c:	00000020 	andeq	r0, r0, r0, lsr #32
 160:	40080e41 	andmi	r0, r8, r1, asr #28
 164:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 168:	100e4101 	andne	r4, lr, r1, lsl #2
 16c:	00070d41 	andeq	r0, r7, r1, asr #26
 170:	0000001c 	andeq	r0, r0, ip, lsl r0
 174:	00000000 	andeq	r0, r0, r0
 178:	2000026c 	andcs	r0, r0, ip, ror #4
 17c:	00000030 	andeq	r0, r0, r0, lsr r0
 180:	40080e41 	andmi	r0, r8, r1, asr #28
 184:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 188:	180e4101 	stmdane	lr, {r0, r8, lr}
 18c:	00070d41 	andeq	r0, r7, r1, asr #26
 190:	0000001c 	andeq	r0, r0, ip, lsl r0
 194:	00000000 	andeq	r0, r0, r0
 198:	2000029c 	mulcs	r0, ip, r2
 19c:	00000020 	andeq	r0, r0, r0, lsr #32
 1a0:	40080e41 	andmi	r0, r8, r1, asr #28
 1a4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 1a8:	100e4101 	andne	r4, lr, r1, lsl #2
 1ac:	00070d41 	andeq	r0, r7, r1, asr #26
 1b0:	0000001c 	andeq	r0, r0, ip, lsl r0
 1b4:	00000000 	andeq	r0, r0, r0
 1b8:	200002bc 			; <UNDEFINED> instruction: 0x200002bc
 1bc:	00000020 	andeq	r0, r0, r0, lsr #32
 1c0:	40080e41 	andmi	r0, r8, r1, asr #28
 1c4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 1c8:	100e4101 	andne	r4, lr, r1, lsl #2
 1cc:	00070d41 	andeq	r0, r7, r1, asr #26
 1d0:	0000001c 	andeq	r0, r0, ip, lsl r0
 1d4:	00000000 	andeq	r0, r0, r0
 1d8:	200002dc 	ldrdcs	r0, [r0], -ip
 1dc:	00000040 	andeq	r0, r0, r0, asr #32
 1e0:	40080e41 	andmi	r0, r8, r1, asr #28
 1e4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 1e8:	180e4101 	stmdane	lr, {r0, r8, lr}
 1ec:	00070d41 	andeq	r0, r7, r1, asr #26
 1f0:	0000001c 	andeq	r0, r0, ip, lsl r0
 1f4:	00000000 	andeq	r0, r0, r0
 1f8:	2000031c 	andcs	r0, r0, ip, lsl r3
 1fc:	0000003c 	andeq	r0, r0, ip, lsr r0
 200:	40080e41 	andmi	r0, r8, r1, asr #28
 204:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 208:	180e4101 	stmdane	lr, {r0, r8, lr}
 20c:	00070d41 	andeq	r0, r7, r1, asr #26
 210:	0000001c 	andeq	r0, r0, ip, lsl r0
 214:	00000000 	andeq	r0, r0, r0
 218:	20000358 	andcs	r0, r0, r8, asr r3
 21c:	00000034 	andeq	r0, r0, r4, lsr r0
 220:	40080e41 	andmi	r0, r8, r1, asr #28
 224:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 228:	180e4101 	stmdane	lr, {r0, r8, lr}
 22c:	00070d41 	andeq	r0, r7, r1, asr #26
 230:	00000018 	andeq	r0, r0, r8, lsl r0
 234:	00000000 	andeq	r0, r0, r0
 238:	2000038c 	andcs	r0, r0, ip, lsl #7
 23c:	0000001c 	andeq	r0, r0, ip, lsl r0
 240:	40080e41 	andmi	r0, r8, r1, asr #28
 244:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 248:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 24c:	0000001c 	andeq	r0, r0, ip, lsl r0
 250:	00000000 	andeq	r0, r0, r0
 254:	200003a8 	andcs	r0, r0, r8, lsr #7
 258:	00000034 	andeq	r0, r0, r4, lsr r0
 25c:	40080e41 	andmi	r0, r8, r1, asr #28
 260:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 264:	180e4101 	stmdane	lr, {r0, r8, lr}
 268:	00070d41 	andeq	r0, r7, r1, asr #26
 26c:	0000001c 	andeq	r0, r0, ip, lsl r0
 270:	00000000 	andeq	r0, r0, r0
 274:	200003dc 	ldrdcs	r0, [r0], -ip
 278:	00000038 	andeq	r0, r0, r8, lsr r0
 27c:	40080e41 	andmi	r0, r8, r1, asr #28
 280:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 284:	180e4101 	stmdane	lr, {r0, r8, lr}
 288:	00070d41 	andeq	r0, r7, r1, asr #26
 28c:	0000001c 	andeq	r0, r0, ip, lsl r0
 290:	00000000 	andeq	r0, r0, r0
 294:	20000414 	andcs	r0, r0, r4, lsl r4
 298:	0000003c 	andeq	r0, r0, ip, lsr r0
 29c:	40080e41 	andmi	r0, r8, r1, asr #28
 2a0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 2a4:	180e4101 	stmdane	lr, {r0, r8, lr}
 2a8:	00070d41 	andeq	r0, r7, r1, asr #26
 2ac:	0000001c 	andeq	r0, r0, ip, lsl r0
 2b0:	00000000 	andeq	r0, r0, r0
 2b4:	20000450 	andcs	r0, r0, r0, asr r4
 2b8:	00000158 	andeq	r0, r0, r8, asr r1
 2bc:	40080e41 	andmi	r0, r8, r1, asr #28
 2c0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 2c4:	280e4101 	stmdacs	lr, {r0, r8, lr}
 2c8:	00070d41 	andeq	r0, r7, r1, asr #26
 2cc:	0000001c 	andeq	r0, r0, ip, lsl r0
 2d0:	00000000 	andeq	r0, r0, r0
 2d4:	200005a8 	andcs	r0, r0, r8, lsr #11
 2d8:	00000060 	andeq	r0, r0, r0, rrx
 2dc:	40080e41 	andmi	r0, r8, r1, asr #28
 2e0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 2e4:	180e4101 	stmdane	lr, {r0, r8, lr}
 2e8:	00070d41 	andeq	r0, r7, r1, asr #26
 2ec:	0000001c 	andeq	r0, r0, ip, lsl r0
 2f0:	00000000 	andeq	r0, r0, r0
 2f4:	20000608 	andcs	r0, r0, r8, lsl #12
 2f8:	00000020 	andeq	r0, r0, r0, lsr #32
 2fc:	40080e41 	andmi	r0, r8, r1, asr #28
 300:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 304:	100e4101 	andne	r4, lr, r1, lsl #2
 308:	00070d41 	andeq	r0, r7, r1, asr #26
 30c:	0000001c 	andeq	r0, r0, ip, lsl r0
 310:	00000000 	andeq	r0, r0, r0
 314:	20000628 	andcs	r0, r0, r8, lsr #12
 318:	00000020 	andeq	r0, r0, r0, lsr #32
 31c:	40080e41 	andmi	r0, r8, r1, asr #28
 320:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 324:	100e4101 	andne	r4, lr, r1, lsl #2
 328:	00070d41 	andeq	r0, r7, r1, asr #26
 32c:	0000001c 	andeq	r0, r0, ip, lsl r0
 330:	00000000 	andeq	r0, r0, r0
 334:	20000648 	andcs	r0, r0, r8, asr #12
 338:	0000001c 	andeq	r0, r0, ip, lsl r0
 33c:	40080e41 	andmi	r0, r8, r1, asr #28
 340:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 344:	100e4101 	andne	r4, lr, r1, lsl #2
 348:	00070d41 	andeq	r0, r7, r1, asr #26
 34c:	0000001c 	andeq	r0, r0, ip, lsl r0
 350:	00000000 	andeq	r0, r0, r0
 354:	20000664 	andcs	r0, r0, r4, ror #12
 358:	0000003c 	andeq	r0, r0, ip, lsr r0
 35c:	40080e41 	andmi	r0, r8, r1, asr #28
 360:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 364:	180e4101 	stmdane	lr, {r0, r8, lr}
 368:	00070d41 	andeq	r0, r7, r1, asr #26
 36c:	0000001c 	andeq	r0, r0, ip, lsl r0
 370:	00000000 	andeq	r0, r0, r0
 374:	200006a0 	andcs	r0, r0, r0, lsr #13
 378:	0000003c 	andeq	r0, r0, ip, lsr r0
 37c:	40080e41 	andmi	r0, r8, r1, asr #28
 380:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 384:	180e4101 	stmdane	lr, {r0, r8, lr}
 388:	00070d41 	andeq	r0, r7, r1, asr #26
 38c:	0000001c 	andeq	r0, r0, ip, lsl r0
 390:	00000000 	andeq	r0, r0, r0
 394:	200006dc 	ldrdcs	r0, [r0], -ip
 398:	0000003c 	andeq	r0, r0, ip, lsr r0
 39c:	40080e41 	andmi	r0, r8, r1, asr #28
 3a0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 3a4:	180e4101 	stmdane	lr, {r0, r8, lr}
 3a8:	00070d41 	andeq	r0, r7, r1, asr #26
 3ac:	0000001c 	andeq	r0, r0, ip, lsl r0
 3b0:	00000000 	andeq	r0, r0, r0
 3b4:	20000718 	andcs	r0, r0, r8, lsl r7
 3b8:	00000040 	andeq	r0, r0, r0, asr #32
 3bc:	40080e41 	andmi	r0, r8, r1, asr #28
 3c0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 3c4:	180e4101 	stmdane	lr, {r0, r8, lr}
 3c8:	00070d41 	andeq	r0, r7, r1, asr #26
 3cc:	0000001c 	andeq	r0, r0, ip, lsl r0
 3d0:	00000000 	andeq	r0, r0, r0
 3d4:	20000758 	andcs	r0, r0, r8, asr r7
 3d8:	0000003c 	andeq	r0, r0, ip, lsr r0
 3dc:	40080e41 	andmi	r0, r8, r1, asr #28
 3e0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 3e4:	180e4101 	stmdane	lr, {r0, r8, lr}
 3e8:	00070d41 	andeq	r0, r7, r1, asr #26
 3ec:	0000001c 	andeq	r0, r0, ip, lsl r0
 3f0:	00000000 	andeq	r0, r0, r0
 3f4:	20000794 	mulcs	r0, r4, r7
 3f8:	0000001c 	andeq	r0, r0, ip, lsl r0
 3fc:	40080e41 	andmi	r0, r8, r1, asr #28
 400:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 404:	100e4101 	andne	r4, lr, r1, lsl #2
 408:	00070d41 	andeq	r0, r7, r1, asr #26
 40c:	0000001c 	andeq	r0, r0, ip, lsl r0
 410:	00000000 	andeq	r0, r0, r0
 414:	200007b0 			; <UNDEFINED> instruction: 0x200007b0
 418:	00000040 	andeq	r0, r0, r0, asr #32
 41c:	40080e41 	andmi	r0, r8, r1, asr #28
 420:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 424:	100e4101 	andne	r4, lr, r1, lsl #2
 428:	00070d41 	andeq	r0, r7, r1, asr #26
 42c:	0000001c 	andeq	r0, r0, ip, lsl r0
 430:	00000000 	andeq	r0, r0, r0
 434:	200007f0 	strdcs	r0, [r0], -r0	; <UNPREDICTABLE>
 438:	00000040 	andeq	r0, r0, r0, asr #32
 43c:	40080e41 	andmi	r0, r8, r1, asr #28
 440:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 444:	100e4101 	andne	r4, lr, r1, lsl #2
 448:	00070d41 	andeq	r0, r7, r1, asr #26
 44c:	0000001c 	andeq	r0, r0, ip, lsl r0
 450:	00000000 	andeq	r0, r0, r0
 454:	20000830 	andcs	r0, r0, r0, lsr r8
 458:	00000040 	andeq	r0, r0, r0, asr #32
 45c:	40080e41 	andmi	r0, r8, r1, asr #28
 460:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 464:	100e4101 	andne	r4, lr, r1, lsl #2
 468:	00070d41 	andeq	r0, r7, r1, asr #26
 46c:	0000001c 	andeq	r0, r0, ip, lsl r0
 470:	00000000 	andeq	r0, r0, r0
 474:	20000870 	andcs	r0, r0, r0, ror r8
 478:	00000040 	andeq	r0, r0, r0, asr #32
 47c:	40080e41 	andmi	r0, r8, r1, asr #28
 480:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 484:	100e4101 	andne	r4, lr, r1, lsl #2
 488:	00070d41 	andeq	r0, r7, r1, asr #26
 48c:	0000001c 	andeq	r0, r0, ip, lsl r0
 490:	00000000 	andeq	r0, r0, r0
 494:	200008b0 			; <UNDEFINED> instruction: 0x200008b0
 498:	00000040 	andeq	r0, r0, r0, asr #32
 49c:	40080e41 	andmi	r0, r8, r1, asr #28
 4a0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 4a4:	100e4101 	andne	r4, lr, r1, lsl #2
 4a8:	00070d41 	andeq	r0, r7, r1, asr #26
 4ac:	0000001c 	andeq	r0, r0, ip, lsl r0
 4b0:	00000000 	andeq	r0, r0, r0
 4b4:	200008f0 	strdcs	r0, [r0], -r0	; <UNPREDICTABLE>
 4b8:	00000040 	andeq	r0, r0, r0, asr #32
 4bc:	40080e41 	andmi	r0, r8, r1, asr #28
 4c0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 4c4:	100e4101 	andne	r4, lr, r1, lsl #2
 4c8:	00070d41 	andeq	r0, r7, r1, asr #26
 4cc:	0000001c 	andeq	r0, r0, ip, lsl r0
 4d0:	00000000 	andeq	r0, r0, r0
 4d4:	20000930 	andcs	r0, r0, r0, lsr r9
 4d8:	00000040 	andeq	r0, r0, r0, asr #32
 4dc:	40080e41 	andmi	r0, r8, r1, asr #28
 4e0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 4e4:	100e4101 	andne	r4, lr, r1, lsl #2
 4e8:	00070d41 	andeq	r0, r7, r1, asr #26
 4ec:	0000001c 	andeq	r0, r0, ip, lsl r0
 4f0:	00000000 	andeq	r0, r0, r0
 4f4:	20000970 	andcs	r0, r0, r0, ror r9
 4f8:	00000040 	andeq	r0, r0, r0, asr #32
 4fc:	40080e41 	andmi	r0, r8, r1, asr #28
 500:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 504:	100e4101 	andne	r4, lr, r1, lsl #2
 508:	00070d41 	andeq	r0, r7, r1, asr #26
 50c:	0000001c 	andeq	r0, r0, ip, lsl r0
 510:	00000000 	andeq	r0, r0, r0
 514:	200009b0 			; <UNDEFINED> instruction: 0x200009b0
 518:	00000040 	andeq	r0, r0, r0, asr #32
 51c:	40080e41 	andmi	r0, r8, r1, asr #28
 520:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 524:	100e4101 	andne	r4, lr, r1, lsl #2
 528:	00070d41 	andeq	r0, r7, r1, asr #26
 52c:	0000001c 	andeq	r0, r0, ip, lsl r0
 530:	00000000 	andeq	r0, r0, r0
 534:	200009f0 	strdcs	r0, [r0], -r0	; <UNPREDICTABLE>
 538:	00000040 	andeq	r0, r0, r0, asr #32
 53c:	40080e41 	andmi	r0, r8, r1, asr #28
 540:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 544:	100e4101 	andne	r4, lr, r1, lsl #2
 548:	00070d41 	andeq	r0, r7, r1, asr #26
 54c:	0000001c 	andeq	r0, r0, ip, lsl r0
 550:	00000000 	andeq	r0, r0, r0
 554:	20000a30 	andcs	r0, r0, r0, lsr sl
 558:	00000040 	andeq	r0, r0, r0, asr #32
 55c:	40080e41 	andmi	r0, r8, r1, asr #28
 560:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 564:	100e4101 	andne	r4, lr, r1, lsl #2
 568:	00070d41 	andeq	r0, r7, r1, asr #26
 56c:	0000001c 	andeq	r0, r0, ip, lsl r0
 570:	00000000 	andeq	r0, r0, r0
 574:	20000a70 	andcs	r0, r0, r0, ror sl
 578:	00000040 	andeq	r0, r0, r0, asr #32
 57c:	40080e41 	andmi	r0, r8, r1, asr #28
 580:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 584:	100e4101 	andne	r4, lr, r1, lsl #2
 588:	00070d41 	andeq	r0, r7, r1, asr #26
 58c:	0000001c 	andeq	r0, r0, ip, lsl r0
 590:	00000000 	andeq	r0, r0, r0
 594:	20000ab0 			; <UNDEFINED> instruction: 0x20000ab0
 598:	00000040 	andeq	r0, r0, r0, asr #32
 59c:	40080e41 	andmi	r0, r8, r1, asr #28
 5a0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 5a4:	100e4101 	andne	r4, lr, r1, lsl #2
 5a8:	00070d41 	andeq	r0, r7, r1, asr #26
 5ac:	0000001c 	andeq	r0, r0, ip, lsl r0
 5b0:	00000000 	andeq	r0, r0, r0
 5b4:	20000af0 	strdcs	r0, [r0], -r0	; <UNPREDICTABLE>
 5b8:	00000040 	andeq	r0, r0, r0, asr #32
 5bc:	40080e41 	andmi	r0, r8, r1, asr #28
 5c0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 5c4:	100e4101 	andne	r4, lr, r1, lsl #2
 5c8:	00070d41 	andeq	r0, r7, r1, asr #26
 5cc:	0000001c 	andeq	r0, r0, ip, lsl r0
 5d0:	00000000 	andeq	r0, r0, r0
 5d4:	20000b30 	andcs	r0, r0, r0, lsr fp
 5d8:	00000040 	andeq	r0, r0, r0, asr #32
 5dc:	40080e41 	andmi	r0, r8, r1, asr #28
 5e0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 5e4:	100e4101 	andne	r4, lr, r1, lsl #2
 5e8:	00070d41 	andeq	r0, r7, r1, asr #26
 5ec:	0000001c 	andeq	r0, r0, ip, lsl r0
 5f0:	00000000 	andeq	r0, r0, r0
 5f4:	20000b70 	andcs	r0, r0, r0, ror fp
 5f8:	0000003c 	andeq	r0, r0, ip, lsr r0
 5fc:	40080e41 	andmi	r0, r8, r1, asr #28
 600:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 604:	100e4101 	andne	r4, lr, r1, lsl #2
 608:	00070d41 	andeq	r0, r7, r1, asr #26
 60c:	0000001c 	andeq	r0, r0, ip, lsl r0
 610:	00000000 	andeq	r0, r0, r0
 614:	20000bac 	andcs	r0, r0, ip, lsr #23
 618:	00000050 	andeq	r0, r0, r0, asr r0
 61c:	40080e41 	andmi	r0, r8, r1, asr #28
 620:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 624:	100e4101 	andne	r4, lr, r1, lsl #2
 628:	00070d41 	andeq	r0, r7, r1, asr #26
 62c:	0000001c 	andeq	r0, r0, ip, lsl r0
 630:	00000000 	andeq	r0, r0, r0
 634:	20000bfc 	strdcs	r0, [r0], -ip
 638:	00000084 	andeq	r0, r0, r4, lsl #1
 63c:	40080e41 	andmi	r0, r8, r1, asr #28
 640:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 644:	200e4101 	andcs	r4, lr, r1, lsl #2
 648:	00070d41 	andeq	r0, r7, r1, asr #26
 64c:	00000018 	andeq	r0, r0, r8, lsl r0
 650:	00000000 	andeq	r0, r0, r0
 654:	20000c80 	andcs	r0, r0, r0, lsl #25
 658:	0000001c 	andeq	r0, r0, ip, lsl r0
 65c:	40080e41 	andmi	r0, r8, r1, asr #28
 660:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 664:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 668:	0000001c 	andeq	r0, r0, ip, lsl r0
 66c:	00000000 	andeq	r0, r0, r0
 670:	20000c9c 	mulcs	r0, ip, ip
 674:	00000044 	andeq	r0, r0, r4, asr #32
 678:	40080e41 	andmi	r0, r8, r1, asr #28
 67c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 680:	180e4101 	stmdane	lr, {r0, r8, lr}
 684:	00070d41 	andeq	r0, r7, r1, asr #26
 688:	0000001c 	andeq	r0, r0, ip, lsl r0
 68c:	00000000 	andeq	r0, r0, r0
 690:	20000ce0 	andcs	r0, r0, r0, ror #25
 694:	00000020 	andeq	r0, r0, r0, lsr #32
 698:	40080e41 	andmi	r0, r8, r1, asr #28
 69c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 6a0:	100e4101 	andne	r4, lr, r1, lsl #2
 6a4:	00070d41 	andeq	r0, r7, r1, asr #26
 6a8:	0000000c 	andeq	r0, r0, ip
 6ac:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 6b0:	7c020001 	stcvc	0, cr0, [r2], {1}
 6b4:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 6b8:	0000001c 	andeq	r0, r0, ip, lsl r0
 6bc:	000006a8 	andeq	r0, r0, r8, lsr #13
 6c0:	20000d00 	andcs	r0, r0, r0, lsl #26
 6c4:	00000170 	andeq	r0, r0, r0, ror r1
 6c8:	40080e41 	andmi	r0, r8, r1, asr #28
 6cc:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 6d0:	100e4101 	andne	r4, lr, r1, lsl #2
 6d4:	00070d41 	andeq	r0, r7, r1, asr #26
 6d8:	0000001c 	andeq	r0, r0, ip, lsl r0
 6dc:	000006a8 	andeq	r0, r0, r8, lsr #13
 6e0:	20000e70 	andcs	r0, r0, r0, ror lr
 6e4:	00000118 	andeq	r0, r0, r8, lsl r1
 6e8:	40080e41 	andmi	r0, r8, r1, asr #28
 6ec:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 6f0:	200e4101 	andcs	r4, lr, r1, lsl #2
 6f4:	00070d41 	andeq	r0, r7, r1, asr #26
 6f8:	0000001c 	andeq	r0, r0, ip, lsl r0
 6fc:	000006a8 	andeq	r0, r0, r8, lsr #13
 700:	20000f88 	andcs	r0, r0, r8, lsl #31
 704:	00000034 	andeq	r0, r0, r4, lsr r0
 708:	40080e41 	andmi	r0, r8, r1, asr #28
 70c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 710:	100e4101 	andne	r4, lr, r1, lsl #2
 714:	00070d41 	andeq	r0, r7, r1, asr #26
 718:	0000001c 	andeq	r0, r0, ip, lsl r0
 71c:	000006a8 	andeq	r0, r0, r8, lsr #13
 720:	20000fbc 			; <UNDEFINED> instruction: 0x20000fbc
 724:	00000046 	andeq	r0, r0, r6, asr #32
 728:	40080e41 	andmi	r0, r8, r1, asr #28
 72c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 730:	180e4101 	stmdane	lr, {r0, r8, lr}
 734:	00070d41 	andeq	r0, r7, r1, asr #26
 738:	0000001c 	andeq	r0, r0, ip, lsl r0
 73c:	000006a8 	andeq	r0, r0, r8, lsr #13
 740:	20001002 	andcs	r1, r0, r2
 744:	00000042 	andeq	r0, r0, r2, asr #32
 748:	40080e41 	andmi	r0, r8, r1, asr #28
 74c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 750:	180e4101 	stmdane	lr, {r0, r8, lr}
 754:	00070d41 	andeq	r0, r7, r1, asr #26
 758:	0000001c 	andeq	r0, r0, ip, lsl r0
 75c:	000006a8 	andeq	r0, r0, r8, lsr #13
 760:	20001044 	andcs	r1, r0, r4, asr #32
 764:	00000016 	andeq	r0, r0, r6, lsl r0
 768:	40080e41 	andmi	r0, r8, r1, asr #28
 76c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 770:	100e4101 	andne	r4, lr, r1, lsl #2
 774:	00070d41 	andeq	r0, r7, r1, asr #26
 778:	0000001c 	andeq	r0, r0, ip, lsl r0
 77c:	000006a8 	andeq	r0, r0, r8, lsr #13
 780:	2000105a 	andcs	r1, r0, sl, asr r0
 784:	00000042 	andeq	r0, r0, r2, asr #32
 788:	40080e41 	andmi	r0, r8, r1, asr #28
 78c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 790:	180e4101 	stmdane	lr, {r0, r8, lr}
 794:	00070d41 	andeq	r0, r7, r1, asr #26
 798:	0000001c 	andeq	r0, r0, ip, lsl r0
 79c:	000006a8 	andeq	r0, r0, r8, lsr #13
 7a0:	2000109c 	mulcs	r0, ip, r0
 7a4:	00000016 	andeq	r0, r0, r6, lsl r0
 7a8:	40080e41 	andmi	r0, r8, r1, asr #28
 7ac:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 7b0:	100e4101 	andne	r4, lr, r1, lsl #2
 7b4:	00070d41 	andeq	r0, r7, r1, asr #26
 7b8:	0000001c 	andeq	r0, r0, ip, lsl r0
 7bc:	000006a8 	andeq	r0, r0, r8, lsr #13
 7c0:	200010b2 	strhcs	r1, [r0], -r2
 7c4:	0000001e 	andeq	r0, r0, lr, lsl r0
 7c8:	40080e41 	andmi	r0, r8, r1, asr #28
 7cc:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 7d0:	100e4101 	andne	r4, lr, r1, lsl #2
 7d4:	00070d41 	andeq	r0, r7, r1, asr #26
 7d8:	0000001c 	andeq	r0, r0, ip, lsl r0
 7dc:	000006a8 	andeq	r0, r0, r8, lsr #13
 7e0:	200010d0 	ldrdcs	r1, [r0], -r0
 7e4:	0000001e 	andeq	r0, r0, lr, lsl r0
 7e8:	40080e41 	andmi	r0, r8, r1, asr #28
 7ec:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 7f0:	100e4101 	andne	r4, lr, r1, lsl #2
 7f4:	00070d41 	andeq	r0, r7, r1, asr #26
 7f8:	0000001c 	andeq	r0, r0, ip, lsl r0
 7fc:	000006a8 	andeq	r0, r0, r8, lsr #13
 800:	200010ee 	andcs	r1, r0, lr, ror #1
 804:	0000003a 	andeq	r0, r0, sl, lsr r0
 808:	40080e41 	andmi	r0, r8, r1, asr #28
 80c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 810:	100e4101 	andne	r4, lr, r1, lsl #2
 814:	00070d41 	andeq	r0, r7, r1, asr #26
 818:	0000001c 	andeq	r0, r0, ip, lsl r0
 81c:	000006a8 	andeq	r0, r0, r8, lsr #13
 820:	20001128 	andcs	r1, r0, r8, lsr #2
 824:	0000001e 	andeq	r0, r0, lr, lsl r0
 828:	40080e41 	andmi	r0, r8, r1, asr #28
 82c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 830:	100e4101 	andne	r4, lr, r1, lsl #2
 834:	00070d41 	andeq	r0, r7, r1, asr #26
 838:	0000001c 	andeq	r0, r0, ip, lsl r0
 83c:	000006a8 	andeq	r0, r0, r8, lsr #13
 840:	20001146 	andcs	r1, r0, r6, asr #2
 844:	00000024 	andeq	r0, r0, r4, lsr #32
 848:	40080e41 	andmi	r0, r8, r1, asr #28
 84c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 850:	100e4101 	andne	r4, lr, r1, lsl #2
 854:	00070d41 	andeq	r0, r7, r1, asr #26
 858:	0000001c 	andeq	r0, r0, ip, lsl r0
 85c:	000006a8 	andeq	r0, r0, r8, lsr #13
 860:	2000116a 	andcs	r1, r0, sl, ror #2
 864:	000000a4 	andeq	r0, r0, r4, lsr #1
 868:	40080e41 	andmi	r0, r8, r1, asr #28
 86c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 870:	180e4101 	stmdane	lr, {r0, r8, lr}
 874:	00070d41 	andeq	r0, r7, r1, asr #26
 878:	0000000c 	andeq	r0, r0, ip
 87c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 880:	7c020001 	stcvc	0, cr0, [r2], {1}
 884:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 888:	0000000c 	andeq	r0, r0, ip
 88c:	00000878 	andeq	r0, r0, r8, ror r8
 890:	20000000 	andcs	r0, r0, r0
 894:	0000000c 	andeq	r0, r0, ip
 898:	0000001c 	andeq	r0, r0, ip, lsl r0
 89c:	00000878 	andeq	r0, r0, r8, ror r8
 8a0:	20001210 	andcs	r1, r0, r0, lsl r2
 8a4:	00000068 	andeq	r0, r0, r8, rrx
 8a8:	40080e41 	andmi	r0, r8, r1, asr #28
 8ac:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 8b0:	100e4101 	andne	r4, lr, r1, lsl #2
 8b4:	00070d41 	andeq	r0, r7, r1, asr #26
 8b8:	00000018 	andeq	r0, r0, r8, lsl r0
 8bc:	00000878 	andeq	r0, r0, r8, ror r8
 8c0:	20001278 	andcs	r1, r0, r8, ror r2
 8c4:	00000038 	andeq	r0, r0, r8, lsr r0
 8c8:	40080e41 	andmi	r0, r8, r1, asr #28
 8cc:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 8d0:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 8d4:	0000000c 	andeq	r0, r0, ip
 8d8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 8dc:	7c010001 	stcvc	0, cr0, [r1], {1}
 8e0:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 8e4:	0000000c 	andeq	r0, r0, ip
 8e8:	000008d4 	ldrdeq	r0, [r0], -r4
 8ec:	200012b1 			; <UNDEFINED> instruction: 0x200012b1
 8f0:	0000010a 	andeq	r0, r0, sl, lsl #2

Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
   0:	20001210 	andcs	r1, r0, r0, lsl r2
   4:	200012b0 			; <UNDEFINED> instruction: 0x200012b0
   8:	20000000 	andcs	r0, r0, r0
   c:	2000000c 	andcs	r0, r0, ip
	...
