
./Debug/Door.elf:     file format elf32-littlearm


Disassembly of section .text:

20000000 <startup>:

void startup(void) __attribute__((naked)) __attribute__((section(".start_section")));

void startup(void)
{
	__asm volatile(
20000000:	4802      	ldr	r0, [pc, #8]	; (2000000c <_exit+0x4>)
20000002:	4685      	mov	sp, r0
20000004:	f000 ffa2 	bl	20000f4c <main>

20000008 <_exit>:
20000008:	e7fe      	b.n	20000008 <_exit>
		" LDR R0,=0x2001C000\n" /* set stack */
		" MOV SP,R0\n"
		" BL main\n"   /* call main */
		"_exit: B .\n" /* never return */
	);
}
2000000a:	46c0      	nop			; (mov r8, r8)
2000000c:	2001c000 	andcs	ip, r1, r0

20000010 <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
20000010:	b580      	push	{r7, lr}
20000012:	b082      	sub	sp, #8
20000014:	af00      	add	r7, sp, #0
20000016:	0002      	movs	r2, r0
20000018:	6039      	str	r1, [r7, #0]
2000001a:	1dfb      	adds	r3, r7, #7
2000001c:	701a      	strb	r2, [r3, #0]
  if((int32_t)IRQn < 0) {
2000001e:	1dfb      	adds	r3, r7, #7
20000020:	781b      	ldrb	r3, [r3, #0]
20000022:	2b7f      	cmp	r3, #127	; 0x7f
20000024:	d90d      	bls.n	20000042 <NVIC_SetPriority+0x32>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
20000026:	683b      	ldr	r3, [r7, #0]
20000028:	b2da      	uxtb	r2, r3
2000002a:	490f      	ldr	r1, [pc, #60]	; (20000068 <NVIC_SetPriority+0x58>)
2000002c:	1dfb      	adds	r3, r7, #7
2000002e:	781b      	ldrb	r3, [r3, #0]
20000030:	0018      	movs	r0, r3
20000032:	230f      	movs	r3, #15
20000034:	4003      	ands	r3, r0
20000036:	3b04      	subs	r3, #4
20000038:	0112      	lsls	r2, r2, #4
2000003a:	b2d2      	uxtb	r2, r2
2000003c:	18cb      	adds	r3, r1, r3
2000003e:	761a      	strb	r2, [r3, #24]
  }
  else {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
20000040:	e00d      	b.n	2000005e <NVIC_SetPriority+0x4e>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
20000042:	683b      	ldr	r3, [r7, #0]
20000044:	b2db      	uxtb	r3, r3
20000046:	4909      	ldr	r1, [pc, #36]	; (2000006c <NVIC_SetPriority+0x5c>)
20000048:	1dfa      	adds	r2, r7, #7
2000004a:	7812      	ldrb	r2, [r2, #0]
2000004c:	b252      	sxtb	r2, r2
2000004e:	011b      	lsls	r3, r3, #4
20000050:	b2d8      	uxtb	r0, r3
20000052:	23c0      	movs	r3, #192	; 0xc0
20000054:	009b      	lsls	r3, r3, #2
20000056:	188a      	adds	r2, r1, r2
20000058:	18d3      	adds	r3, r2, r3
2000005a:	1c02      	adds	r2, r0, #0
2000005c:	701a      	strb	r2, [r3, #0]
}
2000005e:	46c0      	nop			; (mov r8, r8)
20000060:	46bd      	mov	sp, r7
20000062:	b002      	add	sp, #8
20000064:	bd80      	pop	{r7, pc}
20000066:	46c0      	nop			; (mov r8, r8)
20000068:	e000ed00 	and	lr, r0, r0, lsl #26
2000006c:	e000e100 	and	lr, r0, r0, lsl #2

20000070 <SysTick_Config>:
    function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
20000070:	b580      	push	{r7, lr}
20000072:	b082      	sub	sp, #8
20000074:	af00      	add	r7, sp, #0
20000076:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk) { return (1UL); }    /* Reload value impossible */
20000078:	687b      	ldr	r3, [r7, #4]
2000007a:	3b01      	subs	r3, #1
2000007c:	4a0c      	ldr	r2, [pc, #48]	; (200000b0 <SysTick_Config+0x40>)
2000007e:	4293      	cmp	r3, r2
20000080:	d901      	bls.n	20000086 <SysTick_Config+0x16>
20000082:	2301      	movs	r3, #1
20000084:	e010      	b.n	200000a8 <SysTick_Config+0x38>

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
20000086:	4b0b      	ldr	r3, [pc, #44]	; (200000b4 <SysTick_Config+0x44>)
20000088:	687a      	ldr	r2, [r7, #4]
2000008a:	3a01      	subs	r2, #1
2000008c:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
2000008e:	2301      	movs	r3, #1
20000090:	425b      	negs	r3, r3
20000092:	210f      	movs	r1, #15
20000094:	0018      	movs	r0, r3
20000096:	f7ff ffbb 	bl	20000010 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
2000009a:	4b06      	ldr	r3, [pc, #24]	; (200000b4 <SysTick_Config+0x44>)
2000009c:	2200      	movs	r2, #0
2000009e:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
200000a0:	4b04      	ldr	r3, [pc, #16]	; (200000b4 <SysTick_Config+0x44>)
200000a2:	2207      	movs	r2, #7
200000a4:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
200000a6:	2300      	movs	r3, #0
}
200000a8:	0018      	movs	r0, r3
200000aa:	46bd      	mov	sp, r7
200000ac:	b002      	add	sp, #8
200000ae:	bd80      	pop	{r7, pc}
200000b0:	00ffffff 	ldrshteq	pc, [pc], #255	; <UNPREDICTABLE>
200000b4:	e000e010 	and	lr, r0, r0, lsl r0

200000b8 <RCC_DeInit>:
  *            - LSI, LSE and RTC clocks 
  * @param  None
  * @retval None
  */
void RCC_DeInit(void)
{
200000b8:	b580      	push	{r7, lr}
200000ba:	af00      	add	r7, sp, #0
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
200000bc:	4b14      	ldr	r3, [pc, #80]	; (20000110 <RCC_DeInit+0x58>)
200000be:	681a      	ldr	r2, [r3, #0]
200000c0:	4b13      	ldr	r3, [pc, #76]	; (20000110 <RCC_DeInit+0x58>)
200000c2:	2101      	movs	r1, #1
200000c4:	430a      	orrs	r2, r1
200000c6:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
200000c8:	4b11      	ldr	r3, [pc, #68]	; (20000110 <RCC_DeInit+0x58>)
200000ca:	2200      	movs	r2, #0
200000cc:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON, PLLON, PLLI2S and PLLSAI(STM32F42xxx/43xxx/446xx/469xx/479xx devices) bits */
  RCC->CR &= (uint32_t)0xEAF6FFFF;
200000ce:	4b10      	ldr	r3, [pc, #64]	; (20000110 <RCC_DeInit+0x58>)
200000d0:	681a      	ldr	r2, [r3, #0]
200000d2:	4b0f      	ldr	r3, [pc, #60]	; (20000110 <RCC_DeInit+0x58>)
200000d4:	490f      	ldr	r1, [pc, #60]	; (20000114 <RCC_DeInit+0x5c>)
200000d6:	400a      	ands	r2, r1
200000d8:	601a      	str	r2, [r3, #0]
  
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
200000da:	4b0d      	ldr	r3, [pc, #52]	; (20000110 <RCC_DeInit+0x58>)
200000dc:	4a0e      	ldr	r2, [pc, #56]	; (20000118 <RCC_DeInit+0x60>)
200000de:	605a      	str	r2, [r3, #4]

#if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F401xx) || defined(STM32F411xE) || defined(STM32F446xx) || defined(STM32F413_423xx) || defined(STM32F469_479xx)  
  /* Reset PLLI2SCFGR register */
  RCC->PLLI2SCFGR = 0x20003000;
200000e0:	4a0b      	ldr	r2, [pc, #44]	; (20000110 <RCC_DeInit+0x58>)
200000e2:	2384      	movs	r3, #132	; 0x84
200000e4:	490d      	ldr	r1, [pc, #52]	; (2000011c <RCC_DeInit+0x64>)
200000e6:	50d1      	str	r1, [r2, r3]
#endif /* STM32F40_41xxx || STM32F427_437xx || STM32F429_439xx || STM32F401xx || STM32F411xE || STM32F446xx || STM32F413_423xx || STM32F469_479xx */

#if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F446xx) || defined(STM32F469_479xx) 
  /* Reset PLLSAICFGR register, only available for STM32F42xxx/43xxx/446xx/469xx/479xx devices */
  RCC->PLLSAICFGR = 0x24003000;
200000e8:	4a09      	ldr	r2, [pc, #36]	; (20000110 <RCC_DeInit+0x58>)
200000ea:	2388      	movs	r3, #136	; 0x88
200000ec:	490c      	ldr	r1, [pc, #48]	; (20000120 <RCC_DeInit+0x68>)
200000ee:	50d1      	str	r1, [r2, r3]
#endif /* STM32F40_41xxx || STM32F427_437xx || STM32F429_439xx || STM32F446xx || STM32F469_479xx */
  
  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
200000f0:	4b07      	ldr	r3, [pc, #28]	; (20000110 <RCC_DeInit+0x58>)
200000f2:	681a      	ldr	r2, [r3, #0]
200000f4:	4b06      	ldr	r3, [pc, #24]	; (20000110 <RCC_DeInit+0x58>)
200000f6:	490b      	ldr	r1, [pc, #44]	; (20000124 <RCC_DeInit+0x6c>)
200000f8:	400a      	ands	r2, r1
200000fa:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
200000fc:	4b04      	ldr	r3, [pc, #16]	; (20000110 <RCC_DeInit+0x58>)
200000fe:	2200      	movs	r2, #0
20000100:	60da      	str	r2, [r3, #12]

  /* Disable Timers clock prescalers selection, only available for STM32F42/43xxx and STM32F413_423xx devices */
  RCC->DCKCFGR = 0x00000000;
20000102:	4a03      	ldr	r2, [pc, #12]	; (20000110 <RCC_DeInit+0x58>)
20000104:	238c      	movs	r3, #140	; 0x8c
20000106:	2100      	movs	r1, #0
20000108:	50d1      	str	r1, [r2, r3]
  
#if defined(STM32F410xx) || defined(STM32F413_423xx)
  /* Disable LPTIM and FMPI2C clock prescalers selection, only available for STM32F410xx and STM32F413_423xx devices */
  RCC->DCKCFGR2 = 0x00000000;
#endif /* STM32F410xx || STM32F413_423xx */  
}
2000010a:	46c0      	nop			; (mov r8, r8)
2000010c:	46bd      	mov	sp, r7
2000010e:	bd80      	pop	{r7, pc}
20000110:	40023800 	andmi	r3, r2, r0, lsl #16
20000114:	eaf6ffff 	b	1fdc0118 <startup-0x23fee8>
20000118:	24003010 	strcs	r3, [r0], #-16
2000011c:	20003000 	andcs	r3, r0, r0
20000120:	24003000 	strcs	r3, [r0], #-0
20000124:	fffbffff 			; <UNDEFINED> instruction: 0xfffbffff

20000128 <RCC_HSEConfig>:
  *            @arg RCC_HSE_ON: turn ON the HSE oscillator
  *            @arg RCC_HSE_Bypass: HSE oscillator bypassed with external clock
  * @retval None
  */
void RCC_HSEConfig(uint8_t RCC_HSE)
{
20000128:	b580      	push	{r7, lr}
2000012a:	b082      	sub	sp, #8
2000012c:	af00      	add	r7, sp, #0
2000012e:	0002      	movs	r2, r0
20000130:	1dfb      	adds	r3, r7, #7
20000132:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_HSE(RCC_HSE));

  /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
  *(__IO uint8_t *) CR_BYTE3_ADDRESS = RCC_HSE_OFF;
20000134:	4b05      	ldr	r3, [pc, #20]	; (2000014c <RCC_HSEConfig+0x24>)
20000136:	2200      	movs	r2, #0
20000138:	701a      	strb	r2, [r3, #0]

  /* Set the new HSE configuration -------------------------------------------*/
  *(__IO uint8_t *) CR_BYTE3_ADDRESS = RCC_HSE;
2000013a:	4a04      	ldr	r2, [pc, #16]	; (2000014c <RCC_HSEConfig+0x24>)
2000013c:	1dfb      	adds	r3, r7, #7
2000013e:	781b      	ldrb	r3, [r3, #0]
20000140:	7013      	strb	r3, [r2, #0]
}
20000142:	46c0      	nop			; (mov r8, r8)
20000144:	46bd      	mov	sp, r7
20000146:	b002      	add	sp, #8
20000148:	bd80      	pop	{r7, pc}
2000014a:	46c0      	nop			; (mov r8, r8)
2000014c:	40023802 	andmi	r3, r2, r2, lsl #16

20000150 <RCC_WaitForHSEStartUp>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: HSE oscillator is stable and ready to use
  *          - ERROR: HSE oscillator not yet ready
  */
ErrorStatus RCC_WaitForHSEStartUp(void)
{
20000150:	b590      	push	{r4, r7, lr}
20000152:	b083      	sub	sp, #12
20000154:	af00      	add	r7, sp, #0
  __IO uint32_t startupcounter = 0;
20000156:	2300      	movs	r3, #0
20000158:	603b      	str	r3, [r7, #0]
  ErrorStatus status = ERROR;
2000015a:	1dfb      	adds	r3, r7, #7
2000015c:	2200      	movs	r2, #0
2000015e:	701a      	strb	r2, [r3, #0]
  FlagStatus hsestatus = RESET;
20000160:	1dbb      	adds	r3, r7, #6
20000162:	2200      	movs	r2, #0
20000164:	701a      	strb	r2, [r3, #0]
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    hsestatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
20000166:	1dbc      	adds	r4, r7, #6
20000168:	2031      	movs	r0, #49	; 0x31
2000016a:	f000 fd9b 	bl	20000ca4 <RCC_GetFlagStatus>
2000016e:	0003      	movs	r3, r0
20000170:	7023      	strb	r3, [r4, #0]
    startupcounter++;
20000172:	683b      	ldr	r3, [r7, #0]
20000174:	3301      	adds	r3, #1
20000176:	603b      	str	r3, [r7, #0]
  } while((startupcounter != HSE_STARTUP_TIMEOUT) && (hsestatus == RESET));
20000178:	683a      	ldr	r2, [r7, #0]
2000017a:	23a0      	movs	r3, #160	; 0xa0
2000017c:	01db      	lsls	r3, r3, #7
2000017e:	429a      	cmp	r2, r3
20000180:	d003      	beq.n	2000018a <RCC_WaitForHSEStartUp+0x3a>
20000182:	1dbb      	adds	r3, r7, #6
20000184:	781b      	ldrb	r3, [r3, #0]
20000186:	2b00      	cmp	r3, #0
20000188:	d0ed      	beq.n	20000166 <RCC_WaitForHSEStartUp+0x16>

  if (RCC_GetFlagStatus(RCC_FLAG_HSERDY) != RESET)
2000018a:	2031      	movs	r0, #49	; 0x31
2000018c:	f000 fd8a 	bl	20000ca4 <RCC_GetFlagStatus>
20000190:	1e03      	subs	r3, r0, #0
20000192:	d003      	beq.n	2000019c <RCC_WaitForHSEStartUp+0x4c>
  {
    status = SUCCESS;
20000194:	1dfb      	adds	r3, r7, #7
20000196:	2201      	movs	r2, #1
20000198:	701a      	strb	r2, [r3, #0]
2000019a:	e002      	b.n	200001a2 <RCC_WaitForHSEStartUp+0x52>
  }
  else
  {
    status = ERROR;
2000019c:	1dfb      	adds	r3, r7, #7
2000019e:	2200      	movs	r2, #0
200001a0:	701a      	strb	r2, [r3, #0]
  }
  return (status);
200001a2:	1dfb      	adds	r3, r7, #7
200001a4:	781b      	ldrb	r3, [r3, #0]
}
200001a6:	0018      	movs	r0, r3
200001a8:	46bd      	mov	sp, r7
200001aa:	b003      	add	sp, #12
200001ac:	bd90      	pop	{r4, r7, pc}

200001ae <RCC_AdjustHSICalibrationValue>:
  * @param  HSICalibrationValue: specifies the calibration trimming value.
  *         This parameter must be a number between 0 and 0x1F.
  * @retval None
  */
void RCC_AdjustHSICalibrationValue(uint8_t HSICalibrationValue)
{
200001ae:	b580      	push	{r7, lr}
200001b0:	b084      	sub	sp, #16
200001b2:	af00      	add	r7, sp, #0
200001b4:	0002      	movs	r2, r0
200001b6:	1dfb      	adds	r3, r7, #7
200001b8:	701a      	strb	r2, [r3, #0]
  uint32_t tmpreg = 0;
200001ba:	2300      	movs	r3, #0
200001bc:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_CALIBRATION_VALUE(HSICalibrationValue));

  tmpreg = RCC->CR;
200001be:	4b0a      	ldr	r3, [pc, #40]	; (200001e8 <RCC_AdjustHSICalibrationValue+0x3a>)
200001c0:	681b      	ldr	r3, [r3, #0]
200001c2:	60fb      	str	r3, [r7, #12]

  /* Clear HSITRIM[4:0] bits */
  tmpreg &= ~RCC_CR_HSITRIM;
200001c4:	68fb      	ldr	r3, [r7, #12]
200001c6:	22f8      	movs	r2, #248	; 0xf8
200001c8:	4393      	bics	r3, r2
200001ca:	60fb      	str	r3, [r7, #12]

  /* Set the HSITRIM[4:0] bits according to HSICalibrationValue value */
  tmpreg |= (uint32_t)HSICalibrationValue << 3;
200001cc:	1dfb      	adds	r3, r7, #7
200001ce:	781b      	ldrb	r3, [r3, #0]
200001d0:	00db      	lsls	r3, r3, #3
200001d2:	68fa      	ldr	r2, [r7, #12]
200001d4:	4313      	orrs	r3, r2
200001d6:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CR = tmpreg;
200001d8:	4b03      	ldr	r3, [pc, #12]	; (200001e8 <RCC_AdjustHSICalibrationValue+0x3a>)
200001da:	68fa      	ldr	r2, [r7, #12]
200001dc:	601a      	str	r2, [r3, #0]
}
200001de:	46c0      	nop			; (mov r8, r8)
200001e0:	46bd      	mov	sp, r7
200001e2:	b004      	add	sp, #16
200001e4:	bd80      	pop	{r7, pc}
200001e6:	46c0      	nop			; (mov r8, r8)
200001e8:	40023800 	andmi	r3, r2, r0, lsl #16

200001ec <RCC_HSICmd>:
  * @note   When the HSI is stopped, HSIRDY flag goes low after 6 HSI oscillator
  *         clock cycles.  
  * @retval None
  */
void RCC_HSICmd(FunctionalState NewState)
{
200001ec:	b580      	push	{r7, lr}
200001ee:	b082      	sub	sp, #8
200001f0:	af00      	add	r7, sp, #0
200001f2:	0002      	movs	r2, r0
200001f4:	1dfb      	adds	r3, r7, #7
200001f6:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CR_HSION_BB = (uint32_t)NewState;
200001f8:	4b03      	ldr	r3, [pc, #12]	; (20000208 <RCC_HSICmd+0x1c>)
200001fa:	1dfa      	adds	r2, r7, #7
200001fc:	7812      	ldrb	r2, [r2, #0]
200001fe:	601a      	str	r2, [r3, #0]
}
20000200:	46c0      	nop			; (mov r8, r8)
20000202:	46bd      	mov	sp, r7
20000204:	b002      	add	sp, #8
20000206:	bd80      	pop	{r7, pc}
20000208:	42470000 	submi	r0, r7, #0

2000020c <RCC_LSEConfig>:
  *            @arg RCC_LSE_ON: turn ON the LSE oscillator
  *            @arg RCC_LSE_Bypass: LSE oscillator bypassed with external clock
  * @retval None
  */
void RCC_LSEConfig(uint8_t RCC_LSE)
{
2000020c:	b580      	push	{r7, lr}
2000020e:	b082      	sub	sp, #8
20000210:	af00      	add	r7, sp, #0
20000212:	0002      	movs	r2, r0
20000214:	1dfb      	adds	r3, r7, #7
20000216:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_LSE(RCC_LSE));

  /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
  /* Reset LSEON bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
20000218:	4b0c      	ldr	r3, [pc, #48]	; (2000024c <RCC_LSEConfig+0x40>)
2000021a:	2200      	movs	r2, #0
2000021c:	701a      	strb	r2, [r3, #0]

  /* Reset LSEBYP bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
2000021e:	4b0b      	ldr	r3, [pc, #44]	; (2000024c <RCC_LSEConfig+0x40>)
20000220:	2200      	movs	r2, #0
20000222:	701a      	strb	r2, [r3, #0]

  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch (RCC_LSE)
20000224:	1dfb      	adds	r3, r7, #7
20000226:	781b      	ldrb	r3, [r3, #0]
20000228:	2b01      	cmp	r3, #1
2000022a:	d002      	beq.n	20000232 <RCC_LSEConfig+0x26>
2000022c:	2b04      	cmp	r3, #4
2000022e:	d004      	beq.n	2000023a <RCC_LSEConfig+0x2e>
    case RCC_LSE_Bypass:
      /* Set LSEBYP and LSEON bits */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
      break;
    default:
      break;
20000230:	e007      	b.n	20000242 <RCC_LSEConfig+0x36>
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_ON;
20000232:	4b06      	ldr	r3, [pc, #24]	; (2000024c <RCC_LSEConfig+0x40>)
20000234:	2201      	movs	r2, #1
20000236:	701a      	strb	r2, [r3, #0]
      break;
20000238:	e003      	b.n	20000242 <RCC_LSEConfig+0x36>
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
2000023a:	4b04      	ldr	r3, [pc, #16]	; (2000024c <RCC_LSEConfig+0x40>)
2000023c:	2205      	movs	r2, #5
2000023e:	701a      	strb	r2, [r3, #0]
      break;
20000240:	46c0      	nop			; (mov r8, r8)
  }
}
20000242:	46c0      	nop			; (mov r8, r8)
20000244:	46bd      	mov	sp, r7
20000246:	b002      	add	sp, #8
20000248:	bd80      	pop	{r7, pc}
2000024a:	46c0      	nop			; (mov r8, r8)
2000024c:	40023870 	andmi	r3, r2, r0, ror r8

20000250 <RCC_LSICmd>:
  * @note   When the LSI is stopped, LSIRDY flag goes low after 6 LSI oscillator
  *         clock cycles. 
  * @retval None
  */
void RCC_LSICmd(FunctionalState NewState)
{
20000250:	b580      	push	{r7, lr}
20000252:	b082      	sub	sp, #8
20000254:	af00      	add	r7, sp, #0
20000256:	0002      	movs	r2, r0
20000258:	1dfb      	adds	r3, r7, #7
2000025a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CSR_LSION_BB = (uint32_t)NewState;
2000025c:	4b03      	ldr	r3, [pc, #12]	; (2000026c <RCC_LSICmd+0x1c>)
2000025e:	1dfa      	adds	r2, r7, #7
20000260:	7812      	ldrb	r2, [r2, #0]
20000262:	601a      	str	r2, [r3, #0]
}
20000264:	46c0      	nop			; (mov r8, r8)
20000266:	46bd      	mov	sp, r7
20000268:	b002      	add	sp, #8
2000026a:	bd80      	pop	{r7, pc}
2000026c:	42470e80 	submi	r0, r7, #128, 28	; 0x800

20000270 <RCC_PLLConfig>:
  *         correctly.
  *   
  * @retval None
  */
void RCC_PLLConfig(uint32_t RCC_PLLSource, uint32_t PLLM, uint32_t PLLN, uint32_t PLLP, uint32_t PLLQ)
{
20000270:	b580      	push	{r7, lr}
20000272:	b084      	sub	sp, #16
20000274:	af00      	add	r7, sp, #0
20000276:	60f8      	str	r0, [r7, #12]
20000278:	60b9      	str	r1, [r7, #8]
2000027a:	607a      	str	r2, [r7, #4]
2000027c:	603b      	str	r3, [r7, #0]
  assert_param(IS_RCC_PLLM_VALUE(PLLM));
  assert_param(IS_RCC_PLLN_VALUE(PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLP));
  assert_param(IS_RCC_PLLQ_VALUE(PLLQ));

  RCC->PLLCFGR = PLLM | (PLLN << 6) | (((PLLP >> 1) -1) << 16) | (RCC_PLLSource) |
2000027e:	687b      	ldr	r3, [r7, #4]
20000280:	019a      	lsls	r2, r3, #6
20000282:	68bb      	ldr	r3, [r7, #8]
20000284:	431a      	orrs	r2, r3
20000286:	683b      	ldr	r3, [r7, #0]
20000288:	085b      	lsrs	r3, r3, #1
2000028a:	3b01      	subs	r3, #1
2000028c:	041b      	lsls	r3, r3, #16
2000028e:	431a      	orrs	r2, r3
20000290:	68fb      	ldr	r3, [r7, #12]
20000292:	431a      	orrs	r2, r3
20000294:	0011      	movs	r1, r2
                 (PLLQ << 24);
20000296:	69bb      	ldr	r3, [r7, #24]
20000298:	061a      	lsls	r2, r3, #24
  RCC->PLLCFGR = PLLM | (PLLN << 6) | (((PLLP >> 1) -1) << 16) | (RCC_PLLSource) |
2000029a:	4b03      	ldr	r3, [pc, #12]	; (200002a8 <RCC_PLLConfig+0x38>)
2000029c:	430a      	orrs	r2, r1
2000029e:	605a      	str	r2, [r3, #4]
}
200002a0:	46c0      	nop			; (mov r8, r8)
200002a2:	46bd      	mov	sp, r7
200002a4:	b004      	add	sp, #16
200002a6:	bd80      	pop	{r7, pc}
200002a8:	40023800 	andmi	r3, r2, r0, lsl #16

200002ac <RCC_PLLCmd>:
  * @note   The main PLL is disabled by hardware when entering STOP and STANDBY modes.
  * @param  NewState: new state of the main PLL. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_PLLCmd(FunctionalState NewState)
{
200002ac:	b580      	push	{r7, lr}
200002ae:	b082      	sub	sp, #8
200002b0:	af00      	add	r7, sp, #0
200002b2:	0002      	movs	r2, r0
200002b4:	1dfb      	adds	r3, r7, #7
200002b6:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_PLLON_BB = (uint32_t)NewState;
200002b8:	4b03      	ldr	r3, [pc, #12]	; (200002c8 <RCC_PLLCmd+0x1c>)
200002ba:	1dfa      	adds	r2, r7, #7
200002bc:	7812      	ldrb	r2, [r2, #0]
200002be:	601a      	str	r2, [r3, #0]
}
200002c0:	46c0      	nop			; (mov r8, r8)
200002c2:	46bd      	mov	sp, r7
200002c4:	b002      	add	sp, #8
200002c6:	bd80      	pop	{r7, pc}
200002c8:	42470060 	submi	r0, r7, #96	; 0x60

200002cc <RCC_PLLI2SConfig>:
  *         on the I2S clock frequency.
  *   
  * @retval None
  */
void RCC_PLLI2SConfig(uint32_t PLLI2SN, uint32_t PLLI2SR)
{
200002cc:	b580      	push	{r7, lr}
200002ce:	b082      	sub	sp, #8
200002d0:	af00      	add	r7, sp, #0
200002d2:	6078      	str	r0, [r7, #4]
200002d4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RCC_PLLI2SN_VALUE(PLLI2SN));
  assert_param(IS_RCC_PLLI2SR_VALUE(PLLI2SR));

  RCC->PLLI2SCFGR = (PLLI2SN << 6) | (PLLI2SR << 28);
200002d6:	687b      	ldr	r3, [r7, #4]
200002d8:	019a      	lsls	r2, r3, #6
200002da:	683b      	ldr	r3, [r7, #0]
200002dc:	071b      	lsls	r3, r3, #28
200002de:	4904      	ldr	r1, [pc, #16]	; (200002f0 <RCC_PLLI2SConfig+0x24>)
200002e0:	4313      	orrs	r3, r2
200002e2:	2284      	movs	r2, #132	; 0x84
200002e4:	508b      	str	r3, [r1, r2]
}
200002e6:	46c0      	nop			; (mov r8, r8)
200002e8:	46bd      	mov	sp, r7
200002ea:	b002      	add	sp, #8
200002ec:	bd80      	pop	{r7, pc}
200002ee:	46c0      	nop			; (mov r8, r8)
200002f0:	40023800 	andmi	r3, r2, r0, lsl #16

200002f4 <RCC_PLLI2SCmd>:
  * @note   The PLLI2S is disabled by hardware when entering STOP and STANDBY modes.  
  * @param  NewState: new state of the PLLI2S. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_PLLI2SCmd(FunctionalState NewState)
{
200002f4:	b580      	push	{r7, lr}
200002f6:	b082      	sub	sp, #8
200002f8:	af00      	add	r7, sp, #0
200002fa:	0002      	movs	r2, r0
200002fc:	1dfb      	adds	r3, r7, #7
200002fe:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_PLLI2SON_BB = (uint32_t)NewState;
20000300:	4b03      	ldr	r3, [pc, #12]	; (20000310 <RCC_PLLI2SCmd+0x1c>)
20000302:	1dfa      	adds	r2, r7, #7
20000304:	7812      	ldrb	r2, [r2, #0]
20000306:	601a      	str	r2, [r3, #0]
}
20000308:	46c0      	nop			; (mov r8, r8)
2000030a:	46bd      	mov	sp, r7
2000030c:	b002      	add	sp, #8
2000030e:	bd80      	pop	{r7, pc}
20000310:	42470068 	submi	r0, r7, #104	; 0x68

20000314 <RCC_PLLSAIConfig>:
  *          This parameter must be a number between 2 and 7.
  *   
  * @retval None
  */
void RCC_PLLSAIConfig(uint32_t PLLSAIN, uint32_t PLLSAIQ, uint32_t PLLSAIR)
{
20000314:	b580      	push	{r7, lr}
20000316:	b084      	sub	sp, #16
20000318:	af00      	add	r7, sp, #0
2000031a:	60f8      	str	r0, [r7, #12]
2000031c:	60b9      	str	r1, [r7, #8]
2000031e:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_PLLSAIN_VALUE(PLLSAIN));
  assert_param(IS_RCC_PLLSAIR_VALUE(PLLSAIR));
  assert_param(IS_RCC_PLLSAIQ_VALUE(PLLSAIQ));
  
  RCC->PLLSAICFGR = (PLLSAIN << 6) | (PLLSAIQ << 24) | (PLLSAIR << 28);
20000320:	68fb      	ldr	r3, [r7, #12]
20000322:	019a      	lsls	r2, r3, #6
20000324:	68bb      	ldr	r3, [r7, #8]
20000326:	061b      	lsls	r3, r3, #24
20000328:	431a      	orrs	r2, r3
2000032a:	687b      	ldr	r3, [r7, #4]
2000032c:	071b      	lsls	r3, r3, #28
2000032e:	4904      	ldr	r1, [pc, #16]	; (20000340 <RCC_PLLSAIConfig+0x2c>)
20000330:	4313      	orrs	r3, r2
20000332:	2288      	movs	r2, #136	; 0x88
20000334:	508b      	str	r3, [r1, r2]
}
20000336:	46c0      	nop			; (mov r8, r8)
20000338:	46bd      	mov	sp, r7
2000033a:	b004      	add	sp, #16
2000033c:	bd80      	pop	{r7, pc}
2000033e:	46c0      	nop			; (mov r8, r8)
20000340:	40023800 	andmi	r3, r2, r0, lsl #16

20000344 <RCC_PLLSAICmd>:
  * @note   The PLLSAI is disabled by hardware when entering STOP and STANDBY modes.  
  * @param  NewState: new state of the PLLSAI. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_PLLSAICmd(FunctionalState NewState)
{
20000344:	b580      	push	{r7, lr}
20000346:	b082      	sub	sp, #8
20000348:	af00      	add	r7, sp, #0
2000034a:	0002      	movs	r2, r0
2000034c:	1dfb      	adds	r3, r7, #7
2000034e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_PLLSAION_BB = (uint32_t)NewState;
20000350:	4b03      	ldr	r3, [pc, #12]	; (20000360 <RCC_PLLSAICmd+0x1c>)
20000352:	1dfa      	adds	r2, r7, #7
20000354:	7812      	ldrb	r2, [r2, #0]
20000356:	601a      	str	r2, [r3, #0]
}
20000358:	46c0      	nop			; (mov r8, r8)
2000035a:	46bd      	mov	sp, r7
2000035c:	b002      	add	sp, #8
2000035e:	bd80      	pop	{r7, pc}
20000360:	42470070 	submi	r0, r7, #112	; 0x70

20000364 <RCC_ClockSecuritySystemCmd>:
  * @param  NewState: new state of the Clock Security System.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_ClockSecuritySystemCmd(FunctionalState NewState)
{
20000364:	b580      	push	{r7, lr}
20000366:	b082      	sub	sp, #8
20000368:	af00      	add	r7, sp, #0
2000036a:	0002      	movs	r2, r0
2000036c:	1dfb      	adds	r3, r7, #7
2000036e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_CSSON_BB = (uint32_t)NewState;
20000370:	4b03      	ldr	r3, [pc, #12]	; (20000380 <RCC_ClockSecuritySystemCmd+0x1c>)
20000372:	1dfa      	adds	r2, r7, #7
20000374:	7812      	ldrb	r2, [r2, #0]
20000376:	601a      	str	r2, [r3, #0]
}
20000378:	46c0      	nop			; (mov r8, r8)
2000037a:	46bd      	mov	sp, r7
2000037c:	b002      	add	sp, #8
2000037e:	bd80      	pop	{r7, pc}
20000380:	4247004c 	submi	r0, r7, #76	; 0x4c

20000384 <RCC_MCO1Config>:
  *            @arg RCC_MCO1Div_4: division by 4 applied to MCO1 clock
  *            @arg RCC_MCO1Div_5: division by 5 applied to MCO1 clock
  * @retval None
  */
void RCC_MCO1Config(uint32_t RCC_MCO1Source, uint32_t RCC_MCO1Div)
{
20000384:	b580      	push	{r7, lr}
20000386:	b084      	sub	sp, #16
20000388:	af00      	add	r7, sp, #0
2000038a:	6078      	str	r0, [r7, #4]
2000038c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
2000038e:	2300      	movs	r3, #0
20000390:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_MCO1SOURCE(RCC_MCO1Source));
  assert_param(IS_RCC_MCO1DIV(RCC_MCO1Div));  

  tmpreg = RCC->CFGR;
20000392:	4b0a      	ldr	r3, [pc, #40]	; (200003bc <RCC_MCO1Config+0x38>)
20000394:	689b      	ldr	r3, [r3, #8]
20000396:	60fb      	str	r3, [r7, #12]

  /* Clear MCO1[1:0] and MCO1PRE[2:0] bits */
  tmpreg &= CFGR_MCO1_RESET_MASK;
20000398:	68fb      	ldr	r3, [r7, #12]
2000039a:	4a09      	ldr	r2, [pc, #36]	; (200003c0 <RCC_MCO1Config+0x3c>)
2000039c:	4013      	ands	r3, r2
2000039e:	60fb      	str	r3, [r7, #12]

  /* Select MCO1 clock source and prescaler */
  tmpreg |= RCC_MCO1Source | RCC_MCO1Div;
200003a0:	687a      	ldr	r2, [r7, #4]
200003a2:	683b      	ldr	r3, [r7, #0]
200003a4:	4313      	orrs	r3, r2
200003a6:	68fa      	ldr	r2, [r7, #12]
200003a8:	4313      	orrs	r3, r2
200003aa:	60fb      	str	r3, [r7, #12]
  
  /* Store the new value */
  RCC->CFGR = tmpreg;
200003ac:	4b03      	ldr	r3, [pc, #12]	; (200003bc <RCC_MCO1Config+0x38>)
200003ae:	68fa      	ldr	r2, [r7, #12]
200003b0:	609a      	str	r2, [r3, #8]

#if defined(STM32F410xx)
  RCC_MCO1Cmd(ENABLE);
#endif /* STM32F410xx */   
}
200003b2:	46c0      	nop			; (mov r8, r8)
200003b4:	46bd      	mov	sp, r7
200003b6:	b004      	add	sp, #16
200003b8:	bd80      	pop	{r7, pc}
200003ba:	46c0      	nop			; (mov r8, r8)
200003bc:	40023800 	andmi	r3, r2, r0, lsl #16
200003c0:	f89fffff 			; <UNDEFINED> instruction: 0xf89fffff

200003c4 <RCC_MCO2Config>:
  * @note  For STM32F410xx devices to output I2SCLK clock on MCO2 you should have
  *        at last one of the SPI clocks enabled (SPI1, SPI2 or SPI5).
  * @retval None
  */
void RCC_MCO2Config(uint32_t RCC_MCO2Source, uint32_t RCC_MCO2Div)
{
200003c4:	b580      	push	{r7, lr}
200003c6:	b084      	sub	sp, #16
200003c8:	af00      	add	r7, sp, #0
200003ca:	6078      	str	r0, [r7, #4]
200003cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
200003ce:	2300      	movs	r3, #0
200003d0:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_MCO2SOURCE(RCC_MCO2Source));
  assert_param(IS_RCC_MCO2DIV(RCC_MCO2Div));
  
  tmpreg = RCC->CFGR;
200003d2:	4b0a      	ldr	r3, [pc, #40]	; (200003fc <RCC_MCO2Config+0x38>)
200003d4:	689b      	ldr	r3, [r3, #8]
200003d6:	60fb      	str	r3, [r7, #12]
  
  /* Clear MCO2 and MCO2PRE[2:0] bits */
  tmpreg &= CFGR_MCO2_RESET_MASK;
200003d8:	68fb      	ldr	r3, [r7, #12]
200003da:	015b      	lsls	r3, r3, #5
200003dc:	095b      	lsrs	r3, r3, #5
200003de:	60fb      	str	r3, [r7, #12]

  /* Select MCO2 clock source and prescaler */
  tmpreg |= RCC_MCO2Source | RCC_MCO2Div;
200003e0:	687a      	ldr	r2, [r7, #4]
200003e2:	683b      	ldr	r3, [r7, #0]
200003e4:	4313      	orrs	r3, r2
200003e6:	68fa      	ldr	r2, [r7, #12]
200003e8:	4313      	orrs	r3, r2
200003ea:	60fb      	str	r3, [r7, #12]
  
  /* Store the new value */
  RCC->CFGR = tmpreg;
200003ec:	4b03      	ldr	r3, [pc, #12]	; (200003fc <RCC_MCO2Config+0x38>)
200003ee:	68fa      	ldr	r2, [r7, #12]
200003f0:	609a      	str	r2, [r3, #8]

#if defined(STM32F410xx)
  RCC_MCO2Cmd(ENABLE);
#endif /* STM32F410xx */   
}
200003f2:	46c0      	nop			; (mov r8, r8)
200003f4:	46bd      	mov	sp, r7
200003f6:	b004      	add	sp, #16
200003f8:	bd80      	pop	{r7, pc}
200003fa:	46c0      	nop			; (mov r8, r8)
200003fc:	40023800 	andmi	r3, r2, r0, lsl #16

20000400 <RCC_SYSCLKConfig>:
  *            @arg RCC_SYSCLKSource_PLLCLK: PLL selected as system clock source (RCC_SYSCLKSource_PLLPCLK for STM32F446xx devices)
  *            @arg RCC_SYSCLKSource_PLLRCLK: PLL R selected as system clock source only for STM32F412xG, STM32F413_423xx and STM32F446xx devices
  * @retval None
  */
void RCC_SYSCLKConfig(uint32_t RCC_SYSCLKSource)
{
20000400:	b580      	push	{r7, lr}
20000402:	b084      	sub	sp, #16
20000404:	af00      	add	r7, sp, #0
20000406:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
20000408:	2300      	movs	r3, #0
2000040a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_SYSCLK_SOURCE(RCC_SYSCLKSource));

  tmpreg = RCC->CFGR;
2000040c:	4b08      	ldr	r3, [pc, #32]	; (20000430 <RCC_SYSCLKConfig+0x30>)
2000040e:	689b      	ldr	r3, [r3, #8]
20000410:	60fb      	str	r3, [r7, #12]

  /* Clear SW[1:0] bits */
  tmpreg &= ~RCC_CFGR_SW;
20000412:	68fb      	ldr	r3, [r7, #12]
20000414:	2203      	movs	r2, #3
20000416:	4393      	bics	r3, r2
20000418:	60fb      	str	r3, [r7, #12]

  /* Set SW[1:0] bits according to RCC_SYSCLKSource value */
  tmpreg |= RCC_SYSCLKSource;
2000041a:	68fa      	ldr	r2, [r7, #12]
2000041c:	687b      	ldr	r3, [r7, #4]
2000041e:	4313      	orrs	r3, r2
20000420:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;
20000422:	4b03      	ldr	r3, [pc, #12]	; (20000430 <RCC_SYSCLKConfig+0x30>)
20000424:	68fa      	ldr	r2, [r7, #12]
20000426:	609a      	str	r2, [r3, #8]
}
20000428:	46c0      	nop			; (mov r8, r8)
2000042a:	46bd      	mov	sp, r7
2000042c:	b004      	add	sp, #16
2000042e:	bd80      	pop	{r7, pc}
20000430:	40023800 	andmi	r3, r2, r0, lsl #16

20000434 <RCC_GetSYSCLKSource>:
  *              - 0x04: HSE used as system clock
  *              - 0x08: PLL used as system clock (PLL P for STM32F446xx devices)
  *              - 0x0C: PLL R used as system clock (only for STM32F412xG, STM32F413_423xx and STM32F446xx devices)
  */
uint8_t RCC_GetSYSCLKSource(void)
{
20000434:	b580      	push	{r7, lr}
20000436:	af00      	add	r7, sp, #0
  return ((uint8_t)(RCC->CFGR & RCC_CFGR_SWS));
20000438:	4b04      	ldr	r3, [pc, #16]	; (2000044c <RCC_GetSYSCLKSource+0x18>)
2000043a:	689b      	ldr	r3, [r3, #8]
2000043c:	b2db      	uxtb	r3, r3
2000043e:	220c      	movs	r2, #12
20000440:	4013      	ands	r3, r2
20000442:	b2db      	uxtb	r3, r3
}
20000444:	0018      	movs	r0, r3
20000446:	46bd      	mov	sp, r7
20000448:	bd80      	pop	{r7, pc}
2000044a:	46c0      	nop			; (mov r8, r8)
2000044c:	40023800 	andmi	r3, r2, r0, lsl #16

20000450 <RCC_HCLKConfig>:
  *            @arg RCC_SYSCLK_Div256: AHB clock = SYSCLK/256
  *            @arg RCC_SYSCLK_Div512: AHB clock = SYSCLK/512
  * @retval None
  */
void RCC_HCLKConfig(uint32_t RCC_SYSCLK)
{
20000450:	b580      	push	{r7, lr}
20000452:	b084      	sub	sp, #16
20000454:	af00      	add	r7, sp, #0
20000456:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
20000458:	2300      	movs	r3, #0
2000045a:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_HCLK(RCC_SYSCLK));

  tmpreg = RCC->CFGR;
2000045c:	4b08      	ldr	r3, [pc, #32]	; (20000480 <RCC_HCLKConfig+0x30>)
2000045e:	689b      	ldr	r3, [r3, #8]
20000460:	60fb      	str	r3, [r7, #12]

  /* Clear HPRE[3:0] bits */
  tmpreg &= ~RCC_CFGR_HPRE;
20000462:	68fb      	ldr	r3, [r7, #12]
20000464:	22f0      	movs	r2, #240	; 0xf0
20000466:	4393      	bics	r3, r2
20000468:	60fb      	str	r3, [r7, #12]

  /* Set HPRE[3:0] bits according to RCC_SYSCLK value */
  tmpreg |= RCC_SYSCLK;
2000046a:	68fa      	ldr	r2, [r7, #12]
2000046c:	687b      	ldr	r3, [r7, #4]
2000046e:	4313      	orrs	r3, r2
20000470:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;
20000472:	4b03      	ldr	r3, [pc, #12]	; (20000480 <RCC_HCLKConfig+0x30>)
20000474:	68fa      	ldr	r2, [r7, #12]
20000476:	609a      	str	r2, [r3, #8]
}
20000478:	46c0      	nop			; (mov r8, r8)
2000047a:	46bd      	mov	sp, r7
2000047c:	b004      	add	sp, #16
2000047e:	bd80      	pop	{r7, pc}
20000480:	40023800 	andmi	r3, r2, r0, lsl #16

20000484 <RCC_PCLK1Config>:
  *            @arg RCC_HCLK_Div8:  APB1 clock = HCLK/8
  *            @arg RCC_HCLK_Div16: APB1 clock = HCLK/16
  * @retval None
  */
void RCC_PCLK1Config(uint32_t RCC_HCLK)
{
20000484:	b580      	push	{r7, lr}
20000486:	b084      	sub	sp, #16
20000488:	af00      	add	r7, sp, #0
2000048a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
2000048c:	2300      	movs	r3, #0
2000048e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));

  tmpreg = RCC->CFGR;
20000490:	4b08      	ldr	r3, [pc, #32]	; (200004b4 <RCC_PCLK1Config+0x30>)
20000492:	689b      	ldr	r3, [r3, #8]
20000494:	60fb      	str	r3, [r7, #12]

  /* Clear PPRE1[2:0] bits */
  tmpreg &= ~RCC_CFGR_PPRE1;
20000496:	68fb      	ldr	r3, [r7, #12]
20000498:	4a07      	ldr	r2, [pc, #28]	; (200004b8 <RCC_PCLK1Config+0x34>)
2000049a:	4013      	ands	r3, r2
2000049c:	60fb      	str	r3, [r7, #12]

  /* Set PPRE1[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK;
2000049e:	68fa      	ldr	r2, [r7, #12]
200004a0:	687b      	ldr	r3, [r7, #4]
200004a2:	4313      	orrs	r3, r2
200004a4:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;
200004a6:	4b03      	ldr	r3, [pc, #12]	; (200004b4 <RCC_PCLK1Config+0x30>)
200004a8:	68fa      	ldr	r2, [r7, #12]
200004aa:	609a      	str	r2, [r3, #8]
}
200004ac:	46c0      	nop			; (mov r8, r8)
200004ae:	46bd      	mov	sp, r7
200004b0:	b004      	add	sp, #16
200004b2:	bd80      	pop	{r7, pc}
200004b4:	40023800 	andmi	r3, r2, r0, lsl #16
200004b8:	ffffe3ff 			; <UNDEFINED> instruction: 0xffffe3ff

200004bc <RCC_PCLK2Config>:
  *            @arg RCC_HCLK_Div8:  APB2 clock = HCLK/8
  *            @arg RCC_HCLK_Div16: APB2 clock = HCLK/16
  * @retval None
  */
void RCC_PCLK2Config(uint32_t RCC_HCLK)
{
200004bc:	b580      	push	{r7, lr}
200004be:	b084      	sub	sp, #16
200004c0:	af00      	add	r7, sp, #0
200004c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
200004c4:	2300      	movs	r3, #0
200004c6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));

  tmpreg = RCC->CFGR;
200004c8:	4b09      	ldr	r3, [pc, #36]	; (200004f0 <RCC_PCLK2Config+0x34>)
200004ca:	689b      	ldr	r3, [r3, #8]
200004cc:	60fb      	str	r3, [r7, #12]

  /* Clear PPRE2[2:0] bits */
  tmpreg &= ~RCC_CFGR_PPRE2;
200004ce:	68fb      	ldr	r3, [r7, #12]
200004d0:	4a08      	ldr	r2, [pc, #32]	; (200004f4 <RCC_PCLK2Config+0x38>)
200004d2:	4013      	ands	r3, r2
200004d4:	60fb      	str	r3, [r7, #12]

  /* Set PPRE2[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK << 3;
200004d6:	687b      	ldr	r3, [r7, #4]
200004d8:	00db      	lsls	r3, r3, #3
200004da:	68fa      	ldr	r2, [r7, #12]
200004dc:	4313      	orrs	r3, r2
200004de:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;
200004e0:	4b03      	ldr	r3, [pc, #12]	; (200004f0 <RCC_PCLK2Config+0x34>)
200004e2:	68fa      	ldr	r2, [r7, #12]
200004e4:	609a      	str	r2, [r3, #8]
}
200004e6:	46c0      	nop			; (mov r8, r8)
200004e8:	46bd      	mov	sp, r7
200004ea:	b004      	add	sp, #16
200004ec:	bd80      	pop	{r7, pc}
200004ee:	46c0      	nop			; (mov r8, r8)
200004f0:	40023800 	andmi	r3, r2, r0, lsl #16
200004f4:	ffff1fff 			; <UNDEFINED> instruction: 0xffff1fff

200004f8 <RCC_GetClocksFreq>:
  *         configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
200004f8:	b580      	push	{r7, lr}
200004fa:	b088      	sub	sp, #32
200004fc:	af00      	add	r7, sp, #0
200004fe:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
20000500:	2300      	movs	r3, #0
20000502:	61bb      	str	r3, [r7, #24]
20000504:	2300      	movs	r3, #0
20000506:	617b      	str	r3, [r7, #20]
20000508:	2300      	movs	r3, #0
2000050a:	61fb      	str	r3, [r7, #28]
2000050c:	2302      	movs	r3, #2
2000050e:	613b      	str	r3, [r7, #16]
20000510:	2300      	movs	r3, #0
20000512:	60fb      	str	r3, [r7, #12]
20000514:	2302      	movs	r3, #2
20000516:	60bb      	str	r3, [r7, #8]
#if defined(STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F446xx)  
  uint32_t pllr = 2;
#endif /* STM32F412xG || STM32F413_423xx || STM32F446xx */
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
20000518:	4b49      	ldr	r3, [pc, #292]	; (20000640 <RCC_GetClocksFreq+0x148>)
2000051a:	689b      	ldr	r3, [r3, #8]
2000051c:	220c      	movs	r2, #12
2000051e:	4013      	ands	r3, r2
20000520:	61bb      	str	r3, [r7, #24]
  
  switch (tmp)
20000522:	69bb      	ldr	r3, [r7, #24]
20000524:	2b04      	cmp	r3, #4
20000526:	d007      	beq.n	20000538 <RCC_GetClocksFreq+0x40>
20000528:	2b08      	cmp	r3, #8
2000052a:	d009      	beq.n	20000540 <RCC_GetClocksFreq+0x48>
2000052c:	2b00      	cmp	r3, #0
2000052e:	d141      	bne.n	200005b4 <RCC_GetClocksFreq+0xbc>
  {
  case 0x00:  /* HSI used as system clock source */
    RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
20000530:	687b      	ldr	r3, [r7, #4]
20000532:	4a44      	ldr	r2, [pc, #272]	; (20000644 <RCC_GetClocksFreq+0x14c>)
20000534:	601a      	str	r2, [r3, #0]
    break;
20000536:	e041      	b.n	200005bc <RCC_GetClocksFreq+0xc4>
  case 0x04:  /* HSE used as system clock  source */
    RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
20000538:	687b      	ldr	r3, [r7, #4]
2000053a:	4a43      	ldr	r2, [pc, #268]	; (20000648 <RCC_GetClocksFreq+0x150>)
2000053c:	601a      	str	r2, [r3, #0]
    break;
2000053e:	e03d      	b.n	200005bc <RCC_GetClocksFreq+0xc4>
  case 0x08:  /* PLL P used as system clock  source */
    
    /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLP
    */    
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
20000540:	4b3f      	ldr	r3, [pc, #252]	; (20000640 <RCC_GetClocksFreq+0x148>)
20000542:	685b      	ldr	r3, [r3, #4]
20000544:	0d9b      	lsrs	r3, r3, #22
20000546:	2201      	movs	r2, #1
20000548:	4013      	ands	r3, r2
2000054a:	60fb      	str	r3, [r7, #12]
    pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
2000054c:	4b3c      	ldr	r3, [pc, #240]	; (20000640 <RCC_GetClocksFreq+0x148>)
2000054e:	685b      	ldr	r3, [r3, #4]
20000550:	223f      	movs	r2, #63	; 0x3f
20000552:	4013      	ands	r3, r2
20000554:	60bb      	str	r3, [r7, #8]
    
    if (pllsource != 0)
20000556:	68fb      	ldr	r3, [r7, #12]
20000558:	2b00      	cmp	r3, #0
2000055a:	d00d      	beq.n	20000578 <RCC_GetClocksFreq+0x80>
    {
      /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
2000055c:	68b9      	ldr	r1, [r7, #8]
2000055e:	483a      	ldr	r0, [pc, #232]	; (20000648 <RCC_GetClocksFreq+0x150>)
20000560:	f001 ff0a 	bl	20002378 <__udivsi3>
20000564:	0003      	movs	r3, r0
20000566:	001a      	movs	r2, r3
20000568:	4b35      	ldr	r3, [pc, #212]	; (20000640 <RCC_GetClocksFreq+0x148>)
2000056a:	685b      	ldr	r3, [r3, #4]
2000056c:	099b      	lsrs	r3, r3, #6
2000056e:	05db      	lsls	r3, r3, #23
20000570:	0ddb      	lsrs	r3, r3, #23
20000572:	4353      	muls	r3, r2
20000574:	61fb      	str	r3, [r7, #28]
20000576:	e00c      	b.n	20000592 <RCC_GetClocksFreq+0x9a>
    }
    else
    {
      /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
20000578:	68b9      	ldr	r1, [r7, #8]
2000057a:	4832      	ldr	r0, [pc, #200]	; (20000644 <RCC_GetClocksFreq+0x14c>)
2000057c:	f001 fefc 	bl	20002378 <__udivsi3>
20000580:	0003      	movs	r3, r0
20000582:	001a      	movs	r2, r3
20000584:	4b2e      	ldr	r3, [pc, #184]	; (20000640 <RCC_GetClocksFreq+0x148>)
20000586:	685b      	ldr	r3, [r3, #4]
20000588:	099b      	lsrs	r3, r3, #6
2000058a:	05db      	lsls	r3, r3, #23
2000058c:	0ddb      	lsrs	r3, r3, #23
2000058e:	4353      	muls	r3, r2
20000590:	61fb      	str	r3, [r7, #28]
    }
    
    pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
20000592:	4b2b      	ldr	r3, [pc, #172]	; (20000640 <RCC_GetClocksFreq+0x148>)
20000594:	685b      	ldr	r3, [r3, #4]
20000596:	0c1b      	lsrs	r3, r3, #16
20000598:	2203      	movs	r2, #3
2000059a:	4013      	ands	r3, r2
2000059c:	3301      	adds	r3, #1
2000059e:	005b      	lsls	r3, r3, #1
200005a0:	613b      	str	r3, [r7, #16]
    RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
200005a2:	6939      	ldr	r1, [r7, #16]
200005a4:	69f8      	ldr	r0, [r7, #28]
200005a6:	f001 fee7 	bl	20002378 <__udivsi3>
200005aa:	0003      	movs	r3, r0
200005ac:	001a      	movs	r2, r3
200005ae:	687b      	ldr	r3, [r7, #4]
200005b0:	601a      	str	r2, [r3, #0]
    break;
200005b2:	e003      	b.n	200005bc <RCC_GetClocksFreq+0xc4>
    RCC_Clocks->SYSCLK_Frequency = pllvco/pllr;    
    break;
#endif /* STM32F412xG || STM32F413_423xx || STM32F446xx */
    
  default:
    RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
200005b4:	687b      	ldr	r3, [r7, #4]
200005b6:	4a23      	ldr	r2, [pc, #140]	; (20000644 <RCC_GetClocksFreq+0x14c>)
200005b8:	601a      	str	r2, [r3, #0]
    break;
200005ba:	46c0      	nop			; (mov r8, r8)
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/
  
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
200005bc:	4b20      	ldr	r3, [pc, #128]	; (20000640 <RCC_GetClocksFreq+0x148>)
200005be:	689b      	ldr	r3, [r3, #8]
200005c0:	22f0      	movs	r2, #240	; 0xf0
200005c2:	4013      	ands	r3, r2
200005c4:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 4;
200005c6:	69bb      	ldr	r3, [r7, #24]
200005c8:	091b      	lsrs	r3, r3, #4
200005ca:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
200005cc:	4a1f      	ldr	r2, [pc, #124]	; (2000064c <RCC_GetClocksFreq+0x154>)
200005ce:	69bb      	ldr	r3, [r7, #24]
200005d0:	18d3      	adds	r3, r2, r3
200005d2:	781b      	ldrb	r3, [r3, #0]
200005d4:	b2db      	uxtb	r3, r3
200005d6:	617b      	str	r3, [r7, #20]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
200005d8:	687b      	ldr	r3, [r7, #4]
200005da:	681a      	ldr	r2, [r3, #0]
200005dc:	697b      	ldr	r3, [r7, #20]
200005de:	40da      	lsrs	r2, r3
200005e0:	687b      	ldr	r3, [r7, #4]
200005e2:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
200005e4:	4b16      	ldr	r3, [pc, #88]	; (20000640 <RCC_GetClocksFreq+0x148>)
200005e6:	689a      	ldr	r2, [r3, #8]
200005e8:	23e0      	movs	r3, #224	; 0xe0
200005ea:	015b      	lsls	r3, r3, #5
200005ec:	4013      	ands	r3, r2
200005ee:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 10;
200005f0:	69bb      	ldr	r3, [r7, #24]
200005f2:	0a9b      	lsrs	r3, r3, #10
200005f4:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
200005f6:	4a15      	ldr	r2, [pc, #84]	; (2000064c <RCC_GetClocksFreq+0x154>)
200005f8:	69bb      	ldr	r3, [r7, #24]
200005fa:	18d3      	adds	r3, r2, r3
200005fc:	781b      	ldrb	r3, [r3, #0]
200005fe:	b2db      	uxtb	r3, r3
20000600:	617b      	str	r3, [r7, #20]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
20000602:	687b      	ldr	r3, [r7, #4]
20000604:	685a      	ldr	r2, [r3, #4]
20000606:	697b      	ldr	r3, [r7, #20]
20000608:	40da      	lsrs	r2, r3
2000060a:	687b      	ldr	r3, [r7, #4]
2000060c:	609a      	str	r2, [r3, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
2000060e:	4b0c      	ldr	r3, [pc, #48]	; (20000640 <RCC_GetClocksFreq+0x148>)
20000610:	689a      	ldr	r2, [r3, #8]
20000612:	23e0      	movs	r3, #224	; 0xe0
20000614:	021b      	lsls	r3, r3, #8
20000616:	4013      	ands	r3, r2
20000618:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 13;
2000061a:	69bb      	ldr	r3, [r7, #24]
2000061c:	0b5b      	lsrs	r3, r3, #13
2000061e:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
20000620:	4a0a      	ldr	r2, [pc, #40]	; (2000064c <RCC_GetClocksFreq+0x154>)
20000622:	69bb      	ldr	r3, [r7, #24]
20000624:	18d3      	adds	r3, r2, r3
20000626:	781b      	ldrb	r3, [r3, #0]
20000628:	b2db      	uxtb	r3, r3
2000062a:	617b      	str	r3, [r7, #20]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
2000062c:	687b      	ldr	r3, [r7, #4]
2000062e:	685a      	ldr	r2, [r3, #4]
20000630:	697b      	ldr	r3, [r7, #20]
20000632:	40da      	lsrs	r2, r3
20000634:	687b      	ldr	r3, [r7, #4]
20000636:	60da      	str	r2, [r3, #12]
}
20000638:	46c0      	nop			; (mov r8, r8)
2000063a:	46bd      	mov	sp, r7
2000063c:	b008      	add	sp, #32
2000063e:	bd80      	pop	{r7, pc}
20000640:	40023800 	andmi	r3, r2, r0, lsl #16
20000644:	00f42400 	rscseq	r2, r4, r0, lsl #8
20000648:	017d7840 	cmneq	sp, r0, asr #16
2000064c:	20002504 	andcs	r2, r0, r4, lsl #10

20000650 <RCC_RTCCLKConfig>:
  *         RTC clock source).
  *  
  * @retval None
  */
void RCC_RTCCLKConfig(uint32_t RCC_RTCCLKSource)
{
20000650:	b580      	push	{r7, lr}
20000652:	b084      	sub	sp, #16
20000654:	af00      	add	r7, sp, #0
20000656:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
20000658:	2300      	movs	r3, #0
2000065a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_RTCCLK_SOURCE(RCC_RTCCLKSource));

  if ((RCC_RTCCLKSource & 0x00000300) == 0x00000300)
2000065c:	687a      	ldr	r2, [r7, #4]
2000065e:	23c0      	movs	r3, #192	; 0xc0
20000660:	009b      	lsls	r3, r3, #2
20000662:	401a      	ands	r2, r3
20000664:	23c0      	movs	r3, #192	; 0xc0
20000666:	009b      	lsls	r3, r3, #2
20000668:	429a      	cmp	r2, r3
2000066a:	d10f      	bne.n	2000068c <RCC_RTCCLKConfig+0x3c>
  { /* If HSE is selected as RTC clock source, configure HSE division factor for RTC clock */
    tmpreg = RCC->CFGR;
2000066c:	4b0d      	ldr	r3, [pc, #52]	; (200006a4 <RCC_RTCCLKConfig+0x54>)
2000066e:	689b      	ldr	r3, [r3, #8]
20000670:	60fb      	str	r3, [r7, #12]

    /* Clear RTCPRE[4:0] bits */
    tmpreg &= ~RCC_CFGR_RTCPRE;
20000672:	68fb      	ldr	r3, [r7, #12]
20000674:	4a0c      	ldr	r2, [pc, #48]	; (200006a8 <RCC_RTCCLKConfig+0x58>)
20000676:	4013      	ands	r3, r2
20000678:	60fb      	str	r3, [r7, #12]

    /* Configure HSE division factor for RTC clock */
    tmpreg |= (RCC_RTCCLKSource & 0xFFFFCFF);
2000067a:	687b      	ldr	r3, [r7, #4]
2000067c:	4a0b      	ldr	r2, [pc, #44]	; (200006ac <RCC_RTCCLKConfig+0x5c>)
2000067e:	4013      	ands	r3, r2
20000680:	68fa      	ldr	r2, [r7, #12]
20000682:	4313      	orrs	r3, r2
20000684:	60fb      	str	r3, [r7, #12]

    /* Store the new value */
    RCC->CFGR = tmpreg;
20000686:	4b07      	ldr	r3, [pc, #28]	; (200006a4 <RCC_RTCCLKConfig+0x54>)
20000688:	68fa      	ldr	r2, [r7, #12]
2000068a:	609a      	str	r2, [r3, #8]
  }
    
  /* Select the RTC clock source */
  RCC->BDCR |= (RCC_RTCCLKSource & 0x00000FFF);
2000068c:	4b05      	ldr	r3, [pc, #20]	; (200006a4 <RCC_RTCCLKConfig+0x54>)
2000068e:	6f19      	ldr	r1, [r3, #112]	; 0x70
20000690:	687b      	ldr	r3, [r7, #4]
20000692:	051b      	lsls	r3, r3, #20
20000694:	0d1a      	lsrs	r2, r3, #20
20000696:	4b03      	ldr	r3, [pc, #12]	; (200006a4 <RCC_RTCCLKConfig+0x54>)
20000698:	430a      	orrs	r2, r1
2000069a:	671a      	str	r2, [r3, #112]	; 0x70
}
2000069c:	46c0      	nop			; (mov r8, r8)
2000069e:	46bd      	mov	sp, r7
200006a0:	b004      	add	sp, #16
200006a2:	bd80      	pop	{r7, pc}
200006a4:	40023800 	andmi	r3, r2, r0, lsl #16
200006a8:	ffe0ffff 			; <UNDEFINED> instruction: 0xffe0ffff
200006ac:	0ffffcff 	svceq	0x00fffcff

200006b0 <RCC_RTCCLKCmd>:
  *         using the RCC_RTCCLKConfig function.
  * @param  NewState: new state of the RTC clock. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_RTCCLKCmd(FunctionalState NewState)
{
200006b0:	b580      	push	{r7, lr}
200006b2:	b082      	sub	sp, #8
200006b4:	af00      	add	r7, sp, #0
200006b6:	0002      	movs	r2, r0
200006b8:	1dfb      	adds	r3, r7, #7
200006ba:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) BDCR_RTCEN_BB = (uint32_t)NewState;
200006bc:	4b03      	ldr	r3, [pc, #12]	; (200006cc <RCC_RTCCLKCmd+0x1c>)
200006be:	1dfa      	adds	r2, r7, #7
200006c0:	7812      	ldrb	r2, [r2, #0]
200006c2:	601a      	str	r2, [r3, #0]
}
200006c4:	46c0      	nop			; (mov r8, r8)
200006c6:	46bd      	mov	sp, r7
200006c8:	b002      	add	sp, #8
200006ca:	bd80      	pop	{r7, pc}
200006cc:	42470e3c 	submi	r0, r7, #60, 28	; 0x3c0

200006d0 <RCC_BackupResetCmd>:
  * @param  NewState: new state of the Backup domain reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_BackupResetCmd(FunctionalState NewState)
{
200006d0:	b580      	push	{r7, lr}
200006d2:	b082      	sub	sp, #8
200006d4:	af00      	add	r7, sp, #0
200006d6:	0002      	movs	r2, r0
200006d8:	1dfb      	adds	r3, r7, #7
200006da:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) BDCR_BDRST_BB = (uint32_t)NewState;
200006dc:	4b03      	ldr	r3, [pc, #12]	; (200006ec <RCC_BackupResetCmd+0x1c>)
200006de:	1dfa      	adds	r2, r7, #7
200006e0:	7812      	ldrb	r2, [r2, #0]
200006e2:	601a      	str	r2, [r3, #0]
}
200006e4:	46c0      	nop			; (mov r8, r8)
200006e6:	46bd      	mov	sp, r7
200006e8:	b002      	add	sp, #8
200006ea:	bd80      	pop	{r7, pc}
200006ec:	42470e40 	submi	r0, r7, #64, 28	; 0x400

200006f0 <RCC_I2SCLKConfig>:
  *            @arg RCC_I2S2CLKSource_Ext: External clock mapped on the I2S_CKIN pin
  *                                        used as I2S clock source
  * @retval None
  */
void RCC_I2SCLKConfig(uint32_t RCC_I2SCLKSource)
{
200006f0:	b580      	push	{r7, lr}
200006f2:	b082      	sub	sp, #8
200006f4:	af00      	add	r7, sp, #0
200006f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_I2SCLK_SOURCE(RCC_I2SCLKSource));

  *(__IO uint32_t *) CFGR_I2SSRC_BB = RCC_I2SCLKSource;  
200006f8:	4b03      	ldr	r3, [pc, #12]	; (20000708 <RCC_I2SCLKConfig+0x18>)
200006fa:	687a      	ldr	r2, [r7, #4]
200006fc:	601a      	str	r2, [r3, #0]
}
200006fe:	46c0      	nop			; (mov r8, r8)
20000700:	46bd      	mov	sp, r7
20000702:	b002      	add	sp, #8
20000704:	bd80      	pop	{r7, pc}
20000706:	46c0      	nop			; (mov r8, r8)
20000708:	4247015c 	submi	r0, r7, #92, 2

2000070c <RCC_SAIBlockACLKConfig>:
  *            @arg RCC_SAIACLKSource_Ext: External clock mapped on the I2S_CKIN pin
  *                                        used as SAI1 Block A clock
  * @retval None
  */
void RCC_SAIBlockACLKConfig(uint32_t RCC_SAIBlockACLKSource)
{
2000070c:	b580      	push	{r7, lr}
2000070e:	b084      	sub	sp, #16
20000710:	af00      	add	r7, sp, #0
20000712:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
20000714:	2300      	movs	r3, #0
20000716:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_SAIACLK_SOURCE(RCC_SAIBlockACLKSource));
  
  tmpreg = RCC->DCKCFGR;
20000718:	4a09      	ldr	r2, [pc, #36]	; (20000740 <RCC_SAIBlockACLKConfig+0x34>)
2000071a:	238c      	movs	r3, #140	; 0x8c
2000071c:	58d3      	ldr	r3, [r2, r3]
2000071e:	60fb      	str	r3, [r7, #12]

  /* Clear RCC_DCKCFGR_SAI1ASRC[1:0] bits */
  tmpreg &= ~RCC_DCKCFGR_SAI1ASRC;
20000720:	68fb      	ldr	r3, [r7, #12]
20000722:	4a08      	ldr	r2, [pc, #32]	; (20000744 <RCC_SAIBlockACLKConfig+0x38>)
20000724:	4013      	ands	r3, r2
20000726:	60fb      	str	r3, [r7, #12]

  /* Set SAI Block A source selection value */
  tmpreg |= RCC_SAIBlockACLKSource;
20000728:	68fa      	ldr	r2, [r7, #12]
2000072a:	687b      	ldr	r3, [r7, #4]
2000072c:	4313      	orrs	r3, r2
2000072e:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->DCKCFGR = tmpreg;
20000730:	4903      	ldr	r1, [pc, #12]	; (20000740 <RCC_SAIBlockACLKConfig+0x34>)
20000732:	228c      	movs	r2, #140	; 0x8c
20000734:	68fb      	ldr	r3, [r7, #12]
20000736:	508b      	str	r3, [r1, r2]
}
20000738:	46c0      	nop			; (mov r8, r8)
2000073a:	46bd      	mov	sp, r7
2000073c:	b004      	add	sp, #16
2000073e:	bd80      	pop	{r7, pc}
20000740:	40023800 	andmi	r3, r2, r0, lsl #16
20000744:	ffcfffff 			; <UNDEFINED> instruction: 0xffcfffff

20000748 <RCC_SAIBlockBCLKConfig>:
  *            @arg RCC_SAIBCLKSource_Ext: External clock mapped on the I2S_CKIN pin
  *                                        used as SAI1 Block B clock
  * @retval None
  */
void RCC_SAIBlockBCLKConfig(uint32_t RCC_SAIBlockBCLKSource)
{
20000748:	b580      	push	{r7, lr}
2000074a:	b084      	sub	sp, #16
2000074c:	af00      	add	r7, sp, #0
2000074e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
20000750:	2300      	movs	r3, #0
20000752:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_SAIBCLK_SOURCE(RCC_SAIBlockBCLKSource));
  
  tmpreg = RCC->DCKCFGR;
20000754:	4a09      	ldr	r2, [pc, #36]	; (2000077c <RCC_SAIBlockBCLKConfig+0x34>)
20000756:	238c      	movs	r3, #140	; 0x8c
20000758:	58d3      	ldr	r3, [r2, r3]
2000075a:	60fb      	str	r3, [r7, #12]

  /* Clear RCC_DCKCFGR_SAI1BSRC[1:0] bits */
  tmpreg &= ~RCC_DCKCFGR_SAI1BSRC;
2000075c:	68fb      	ldr	r3, [r7, #12]
2000075e:	4a08      	ldr	r2, [pc, #32]	; (20000780 <RCC_SAIBlockBCLKConfig+0x38>)
20000760:	4013      	ands	r3, r2
20000762:	60fb      	str	r3, [r7, #12]

  /* Set SAI Block B source selection value */
  tmpreg |= RCC_SAIBlockBCLKSource;
20000764:	68fa      	ldr	r2, [r7, #12]
20000766:	687b      	ldr	r3, [r7, #4]
20000768:	4313      	orrs	r3, r2
2000076a:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->DCKCFGR = tmpreg;
2000076c:	4903      	ldr	r1, [pc, #12]	; (2000077c <RCC_SAIBlockBCLKConfig+0x34>)
2000076e:	228c      	movs	r2, #140	; 0x8c
20000770:	68fb      	ldr	r3, [r7, #12]
20000772:	508b      	str	r3, [r1, r2]
}
20000774:	46c0      	nop			; (mov r8, r8)
20000776:	46bd      	mov	sp, r7
20000778:	b004      	add	sp, #16
2000077a:	bd80      	pop	{r7, pc}
2000077c:	40023800 	andmi	r3, r2, r0, lsl #16
20000780:	ff3fffff 			; <UNDEFINED> instruction: 0xff3fffff

20000784 <RCC_SAIPLLI2SClkDivConfig>:
  *          SAI1 clock frequency = f(PLLI2S_Q) / RCC_PLLI2SDivQ 
  *              
  * @retval None
  */
void RCC_SAIPLLI2SClkDivConfig(uint32_t RCC_PLLI2SDivQ)  
{
20000784:	b580      	push	{r7, lr}
20000786:	b084      	sub	sp, #16
20000788:	af00      	add	r7, sp, #0
2000078a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
2000078c:	2300      	movs	r3, #0
2000078e:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(RCC_PLLI2SDivQ));
  
  tmpreg = RCC->DCKCFGR;
20000790:	4a0a      	ldr	r2, [pc, #40]	; (200007bc <RCC_SAIPLLI2SClkDivConfig+0x38>)
20000792:	238c      	movs	r3, #140	; 0x8c
20000794:	58d3      	ldr	r3, [r2, r3]
20000796:	60fb      	str	r3, [r7, #12]

  /* Clear PLLI2SDIVQ[4:0] bits */
  tmpreg &= ~(RCC_DCKCFGR_PLLI2SDIVQ);
20000798:	68fb      	ldr	r3, [r7, #12]
2000079a:	221f      	movs	r2, #31
2000079c:	4393      	bics	r3, r2
2000079e:	60fb      	str	r3, [r7, #12]

  /* Set PLLI2SDIVQ values */
  tmpreg |= (RCC_PLLI2SDivQ - 1);
200007a0:	687b      	ldr	r3, [r7, #4]
200007a2:	3b01      	subs	r3, #1
200007a4:	68fa      	ldr	r2, [r7, #12]
200007a6:	4313      	orrs	r3, r2
200007a8:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->DCKCFGR = tmpreg;
200007aa:	4904      	ldr	r1, [pc, #16]	; (200007bc <RCC_SAIPLLI2SClkDivConfig+0x38>)
200007ac:	228c      	movs	r2, #140	; 0x8c
200007ae:	68fb      	ldr	r3, [r7, #12]
200007b0:	508b      	str	r3, [r1, r2]
}
200007b2:	46c0      	nop			; (mov r8, r8)
200007b4:	46bd      	mov	sp, r7
200007b6:	b004      	add	sp, #16
200007b8:	bd80      	pop	{r7, pc}
200007ba:	46c0      	nop			; (mov r8, r8)
200007bc:	40023800 	andmi	r3, r2, r0, lsl #16

200007c0 <RCC_SAIPLLSAIClkDivConfig>:
  *          SAI1 clock frequency = f(PLLSAI_Q) / RCC_PLLSAIDivQ  
  *              
  * @retval None
  */
void RCC_SAIPLLSAIClkDivConfig(uint32_t RCC_PLLSAIDivQ)  
{
200007c0:	b580      	push	{r7, lr}
200007c2:	b084      	sub	sp, #16
200007c4:	af00      	add	r7, sp, #0
200007c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
200007c8:	2300      	movs	r3, #0
200007ca:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(RCC_PLLSAIDivQ));
  
  tmpreg = RCC->DCKCFGR;
200007cc:	4a0a      	ldr	r2, [pc, #40]	; (200007f8 <RCC_SAIPLLSAIClkDivConfig+0x38>)
200007ce:	238c      	movs	r3, #140	; 0x8c
200007d0:	58d3      	ldr	r3, [r2, r3]
200007d2:	60fb      	str	r3, [r7, #12]

  /* Clear PLLI2SDIVQ[4:0] and PLLSAIDIVQ[4:0] bits */
  tmpreg &= ~(RCC_DCKCFGR_PLLSAIDIVQ);
200007d4:	68fb      	ldr	r3, [r7, #12]
200007d6:	4a09      	ldr	r2, [pc, #36]	; (200007fc <RCC_SAIPLLSAIClkDivConfig+0x3c>)
200007d8:	4013      	ands	r3, r2
200007da:	60fb      	str	r3, [r7, #12]

  /* Set PLLSAIDIVQ values */
  tmpreg |= ((RCC_PLLSAIDivQ - 1) << 8);
200007dc:	687b      	ldr	r3, [r7, #4]
200007de:	3b01      	subs	r3, #1
200007e0:	021b      	lsls	r3, r3, #8
200007e2:	68fa      	ldr	r2, [r7, #12]
200007e4:	4313      	orrs	r3, r2
200007e6:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->DCKCFGR = tmpreg;
200007e8:	4903      	ldr	r1, [pc, #12]	; (200007f8 <RCC_SAIPLLSAIClkDivConfig+0x38>)
200007ea:	228c      	movs	r2, #140	; 0x8c
200007ec:	68fb      	ldr	r3, [r7, #12]
200007ee:	508b      	str	r3, [r1, r2]
}
200007f0:	46c0      	nop			; (mov r8, r8)
200007f2:	46bd      	mov	sp, r7
200007f4:	b004      	add	sp, #16
200007f6:	bd80      	pop	{r7, pc}
200007f8:	40023800 	andmi	r3, r2, r0, lsl #16
200007fc:	ffffe0ff 			; <UNDEFINED> instruction: 0xffffe0ff

20000800 <RCC_LTDCCLKDivConfig>:
  *            @arg RCC_PLLSAIDivR_Div16: LTDC clock = f(PLLSAI_R)/16
  *            
  * @retval None
  */
void RCC_LTDCCLKDivConfig(uint32_t RCC_PLLSAIDivR)
{
20000800:	b580      	push	{r7, lr}
20000802:	b084      	sub	sp, #16
20000804:	af00      	add	r7, sp, #0
20000806:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
20000808:	2300      	movs	r3, #0
2000080a:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_PLLSAI_DIVR_VALUE(RCC_PLLSAIDivR));
  
  tmpreg = RCC->DCKCFGR;
2000080c:	4a09      	ldr	r2, [pc, #36]	; (20000834 <RCC_LTDCCLKDivConfig+0x34>)
2000080e:	238c      	movs	r3, #140	; 0x8c
20000810:	58d3      	ldr	r3, [r2, r3]
20000812:	60fb      	str	r3, [r7, #12]

  /* Clear PLLSAIDIVR[2:0] bits */
  tmpreg &= ~RCC_DCKCFGR_PLLSAIDIVR;
20000814:	68fb      	ldr	r3, [r7, #12]
20000816:	4a08      	ldr	r2, [pc, #32]	; (20000838 <RCC_LTDCCLKDivConfig+0x38>)
20000818:	4013      	ands	r3, r2
2000081a:	60fb      	str	r3, [r7, #12]

  /* Set PLLSAIDIVR values */
  tmpreg |= RCC_PLLSAIDivR;
2000081c:	68fa      	ldr	r2, [r7, #12]
2000081e:	687b      	ldr	r3, [r7, #4]
20000820:	4313      	orrs	r3, r2
20000822:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->DCKCFGR = tmpreg;
20000824:	4903      	ldr	r1, [pc, #12]	; (20000834 <RCC_LTDCCLKDivConfig+0x34>)
20000826:	228c      	movs	r2, #140	; 0x8c
20000828:	68fb      	ldr	r3, [r7, #12]
2000082a:	508b      	str	r3, [r1, r2]
}
2000082c:	46c0      	nop			; (mov r8, r8)
2000082e:	46bd      	mov	sp, r7
20000830:	b004      	add	sp, #16
20000832:	bd80      	pop	{r7, pc}
20000834:	40023800 	andmi	r3, r2, r0, lsl #16
20000838:	fffcffff 			; <UNDEFINED> instruction: 0xfffcffff

2000083c <RCC_TIMCLKPresConfig>:
  *                 else it is equal to [(HPRE * PPREx) / 4] if PPREx is corresponding 
  *                 to division by 8 or more.
  * @retval None
  */
void RCC_TIMCLKPresConfig(uint32_t RCC_TIMCLKPrescaler)
{
2000083c:	b580      	push	{r7, lr}
2000083e:	b082      	sub	sp, #8
20000840:	af00      	add	r7, sp, #0
20000842:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_TIMCLK_PRESCALER(RCC_TIMCLKPrescaler));

  *(__IO uint32_t *) DCKCFGR_TIMPRE_BB = RCC_TIMCLKPrescaler;
20000844:	4b03      	ldr	r3, [pc, #12]	; (20000854 <RCC_TIMCLKPresConfig+0x18>)
20000846:	687a      	ldr	r2, [r7, #4]
20000848:	601a      	str	r2, [r3, #0]
}
2000084a:	46c0      	nop			; (mov r8, r8)
2000084c:	46bd      	mov	sp, r7
2000084e:	b002      	add	sp, #8
20000850:	bd80      	pop	{r7, pc}
20000852:	46c0      	nop			; (mov r8, r8)
20000854:	424711e0 	submi	r1, r7, #224, 2	; 0x38

20000858 <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
20000858:	b580      	push	{r7, lr}
2000085a:	b082      	sub	sp, #8
2000085c:	af00      	add	r7, sp, #0
2000085e:	6078      	str	r0, [r7, #4]
20000860:	000a      	movs	r2, r1
20000862:	1cfb      	adds	r3, r7, #3
20000864:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
20000866:	1cfb      	adds	r3, r7, #3
20000868:	781b      	ldrb	r3, [r3, #0]
2000086a:	2b00      	cmp	r3, #0
2000086c:	d006      	beq.n	2000087c <RCC_AHB1PeriphClockCmd+0x24>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
2000086e:	4b09      	ldr	r3, [pc, #36]	; (20000894 <RCC_AHB1PeriphClockCmd+0x3c>)
20000870:	6b19      	ldr	r1, [r3, #48]	; 0x30
20000872:	4b08      	ldr	r3, [pc, #32]	; (20000894 <RCC_AHB1PeriphClockCmd+0x3c>)
20000874:	687a      	ldr	r2, [r7, #4]
20000876:	430a      	orrs	r2, r1
20000878:	631a      	str	r2, [r3, #48]	; 0x30
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
  }
}
2000087a:	e006      	b.n	2000088a <RCC_AHB1PeriphClockCmd+0x32>
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
2000087c:	4b05      	ldr	r3, [pc, #20]	; (20000894 <RCC_AHB1PeriphClockCmd+0x3c>)
2000087e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
20000880:	687b      	ldr	r3, [r7, #4]
20000882:	43d9      	mvns	r1, r3
20000884:	4b03      	ldr	r3, [pc, #12]	; (20000894 <RCC_AHB1PeriphClockCmd+0x3c>)
20000886:	400a      	ands	r2, r1
20000888:	631a      	str	r2, [r3, #48]	; 0x30
}
2000088a:	46c0      	nop			; (mov r8, r8)
2000088c:	46bd      	mov	sp, r7
2000088e:	b002      	add	sp, #8
20000890:	bd80      	pop	{r7, pc}
20000892:	46c0      	nop			; (mov r8, r8)
20000894:	40023800 	andmi	r3, r2, r0, lsl #16

20000898 <RCC_AHB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB2PeriphClockCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
{
20000898:	b580      	push	{r7, lr}
2000089a:	b082      	sub	sp, #8
2000089c:	af00      	add	r7, sp, #0
2000089e:	6078      	str	r0, [r7, #4]
200008a0:	000a      	movs	r2, r1
200008a2:	1cfb      	adds	r3, r7, #3
200008a4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
200008a6:	1cfb      	adds	r3, r7, #3
200008a8:	781b      	ldrb	r3, [r3, #0]
200008aa:	2b00      	cmp	r3, #0
200008ac:	d006      	beq.n	200008bc <RCC_AHB2PeriphClockCmd+0x24>
  {
    RCC->AHB2ENR |= RCC_AHB2Periph;
200008ae:	4b09      	ldr	r3, [pc, #36]	; (200008d4 <RCC_AHB2PeriphClockCmd+0x3c>)
200008b0:	6b59      	ldr	r1, [r3, #52]	; 0x34
200008b2:	4b08      	ldr	r3, [pc, #32]	; (200008d4 <RCC_AHB2PeriphClockCmd+0x3c>)
200008b4:	687a      	ldr	r2, [r7, #4]
200008b6:	430a      	orrs	r2, r1
200008b8:	635a      	str	r2, [r3, #52]	; 0x34
  }
  else
  {
    RCC->AHB2ENR &= ~RCC_AHB2Periph;
  }
}
200008ba:	e006      	b.n	200008ca <RCC_AHB2PeriphClockCmd+0x32>
    RCC->AHB2ENR &= ~RCC_AHB2Periph;
200008bc:	4b05      	ldr	r3, [pc, #20]	; (200008d4 <RCC_AHB2PeriphClockCmd+0x3c>)
200008be:	6b5a      	ldr	r2, [r3, #52]	; 0x34
200008c0:	687b      	ldr	r3, [r7, #4]
200008c2:	43d9      	mvns	r1, r3
200008c4:	4b03      	ldr	r3, [pc, #12]	; (200008d4 <RCC_AHB2PeriphClockCmd+0x3c>)
200008c6:	400a      	ands	r2, r1
200008c8:	635a      	str	r2, [r3, #52]	; 0x34
}
200008ca:	46c0      	nop			; (mov r8, r8)
200008cc:	46bd      	mov	sp, r7
200008ce:	b002      	add	sp, #8
200008d0:	bd80      	pop	{r7, pc}
200008d2:	46c0      	nop			; (mov r8, r8)
200008d4:	40023800 	andmi	r3, r2, r0, lsl #16

200008d8 <RCC_AHB3PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB3PeriphClockCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
{
200008d8:	b580      	push	{r7, lr}
200008da:	b082      	sub	sp, #8
200008dc:	af00      	add	r7, sp, #0
200008de:	6078      	str	r0, [r7, #4]
200008e0:	000a      	movs	r2, r1
200008e2:	1cfb      	adds	r3, r7, #3
200008e4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
200008e6:	1cfb      	adds	r3, r7, #3
200008e8:	781b      	ldrb	r3, [r3, #0]
200008ea:	2b00      	cmp	r3, #0
200008ec:	d006      	beq.n	200008fc <RCC_AHB3PeriphClockCmd+0x24>
  {
    RCC->AHB3ENR |= RCC_AHB3Periph;
200008ee:	4b09      	ldr	r3, [pc, #36]	; (20000914 <RCC_AHB3PeriphClockCmd+0x3c>)
200008f0:	6b99      	ldr	r1, [r3, #56]	; 0x38
200008f2:	4b08      	ldr	r3, [pc, #32]	; (20000914 <RCC_AHB3PeriphClockCmd+0x3c>)
200008f4:	687a      	ldr	r2, [r7, #4]
200008f6:	430a      	orrs	r2, r1
200008f8:	639a      	str	r2, [r3, #56]	; 0x38
  }
  else
  {
    RCC->AHB3ENR &= ~RCC_AHB3Periph;
  }
}
200008fa:	e006      	b.n	2000090a <RCC_AHB3PeriphClockCmd+0x32>
    RCC->AHB3ENR &= ~RCC_AHB3Periph;
200008fc:	4b05      	ldr	r3, [pc, #20]	; (20000914 <RCC_AHB3PeriphClockCmd+0x3c>)
200008fe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
20000900:	687b      	ldr	r3, [r7, #4]
20000902:	43d9      	mvns	r1, r3
20000904:	4b03      	ldr	r3, [pc, #12]	; (20000914 <RCC_AHB3PeriphClockCmd+0x3c>)
20000906:	400a      	ands	r2, r1
20000908:	639a      	str	r2, [r3, #56]	; 0x38
}
2000090a:	46c0      	nop			; (mov r8, r8)
2000090c:	46bd      	mov	sp, r7
2000090e:	b002      	add	sp, #8
20000910:	bd80      	pop	{r7, pc}
20000912:	46c0      	nop			; (mov r8, r8)
20000914:	40023800 	andmi	r3, r2, r0, lsl #16

20000918 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
20000918:	b580      	push	{r7, lr}
2000091a:	b082      	sub	sp, #8
2000091c:	af00      	add	r7, sp, #0
2000091e:	6078      	str	r0, [r7, #4]
20000920:	000a      	movs	r2, r1
20000922:	1cfb      	adds	r3, r7, #3
20000924:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
20000926:	1cfb      	adds	r3, r7, #3
20000928:	781b      	ldrb	r3, [r3, #0]
2000092a:	2b00      	cmp	r3, #0
2000092c:	d006      	beq.n	2000093c <RCC_APB1PeriphClockCmd+0x24>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
2000092e:	4b09      	ldr	r3, [pc, #36]	; (20000954 <RCC_APB1PeriphClockCmd+0x3c>)
20000930:	6c19      	ldr	r1, [r3, #64]	; 0x40
20000932:	4b08      	ldr	r3, [pc, #32]	; (20000954 <RCC_APB1PeriphClockCmd+0x3c>)
20000934:	687a      	ldr	r2, [r7, #4]
20000936:	430a      	orrs	r2, r1
20000938:	641a      	str	r2, [r3, #64]	; 0x40
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
2000093a:	e006      	b.n	2000094a <RCC_APB1PeriphClockCmd+0x32>
    RCC->APB1ENR &= ~RCC_APB1Periph;
2000093c:	4b05      	ldr	r3, [pc, #20]	; (20000954 <RCC_APB1PeriphClockCmd+0x3c>)
2000093e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
20000940:	687b      	ldr	r3, [r7, #4]
20000942:	43d9      	mvns	r1, r3
20000944:	4b03      	ldr	r3, [pc, #12]	; (20000954 <RCC_APB1PeriphClockCmd+0x3c>)
20000946:	400a      	ands	r2, r1
20000948:	641a      	str	r2, [r3, #64]	; 0x40
}
2000094a:	46c0      	nop			; (mov r8, r8)
2000094c:	46bd      	mov	sp, r7
2000094e:	b002      	add	sp, #8
20000950:	bd80      	pop	{r7, pc}
20000952:	46c0      	nop			; (mov r8, r8)
20000954:	40023800 	andmi	r3, r2, r0, lsl #16

20000958 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
20000958:	b580      	push	{r7, lr}
2000095a:	b082      	sub	sp, #8
2000095c:	af00      	add	r7, sp, #0
2000095e:	6078      	str	r0, [r7, #4]
20000960:	000a      	movs	r2, r1
20000962:	1cfb      	adds	r3, r7, #3
20000964:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
20000966:	1cfb      	adds	r3, r7, #3
20000968:	781b      	ldrb	r3, [r3, #0]
2000096a:	2b00      	cmp	r3, #0
2000096c:	d006      	beq.n	2000097c <RCC_APB2PeriphClockCmd+0x24>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
2000096e:	4b09      	ldr	r3, [pc, #36]	; (20000994 <RCC_APB2PeriphClockCmd+0x3c>)
20000970:	6c59      	ldr	r1, [r3, #68]	; 0x44
20000972:	4b08      	ldr	r3, [pc, #32]	; (20000994 <RCC_APB2PeriphClockCmd+0x3c>)
20000974:	687a      	ldr	r2, [r7, #4]
20000976:	430a      	orrs	r2, r1
20000978:	645a      	str	r2, [r3, #68]	; 0x44
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
2000097a:	e006      	b.n	2000098a <RCC_APB2PeriphClockCmd+0x32>
    RCC->APB2ENR &= ~RCC_APB2Periph;
2000097c:	4b05      	ldr	r3, [pc, #20]	; (20000994 <RCC_APB2PeriphClockCmd+0x3c>)
2000097e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
20000980:	687b      	ldr	r3, [r7, #4]
20000982:	43d9      	mvns	r1, r3
20000984:	4b03      	ldr	r3, [pc, #12]	; (20000994 <RCC_APB2PeriphClockCmd+0x3c>)
20000986:	400a      	ands	r2, r1
20000988:	645a      	str	r2, [r3, #68]	; 0x44
}
2000098a:	46c0      	nop			; (mov r8, r8)
2000098c:	46bd      	mov	sp, r7
2000098e:	b002      	add	sp, #8
20000990:	bd80      	pop	{r7, pc}
20000992:	46c0      	nop			; (mov r8, r8)
20000994:	40023800 	andmi	r3, r2, r0, lsl #16

20000998 <RCC_AHB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphResetCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
20000998:	b580      	push	{r7, lr}
2000099a:	b082      	sub	sp, #8
2000099c:	af00      	add	r7, sp, #0
2000099e:	6078      	str	r0, [r7, #4]
200009a0:	000a      	movs	r2, r1
200009a2:	1cfb      	adds	r3, r7, #3
200009a4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_RESET_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
200009a6:	1cfb      	adds	r3, r7, #3
200009a8:	781b      	ldrb	r3, [r3, #0]
200009aa:	2b00      	cmp	r3, #0
200009ac:	d006      	beq.n	200009bc <RCC_AHB1PeriphResetCmd+0x24>
  {
    RCC->AHB1RSTR |= RCC_AHB1Periph;
200009ae:	4b09      	ldr	r3, [pc, #36]	; (200009d4 <RCC_AHB1PeriphResetCmd+0x3c>)
200009b0:	6919      	ldr	r1, [r3, #16]
200009b2:	4b08      	ldr	r3, [pc, #32]	; (200009d4 <RCC_AHB1PeriphResetCmd+0x3c>)
200009b4:	687a      	ldr	r2, [r7, #4]
200009b6:	430a      	orrs	r2, r1
200009b8:	611a      	str	r2, [r3, #16]
  }
  else
  {
    RCC->AHB1RSTR &= ~RCC_AHB1Periph;
  }
}
200009ba:	e006      	b.n	200009ca <RCC_AHB1PeriphResetCmd+0x32>
    RCC->AHB1RSTR &= ~RCC_AHB1Periph;
200009bc:	4b05      	ldr	r3, [pc, #20]	; (200009d4 <RCC_AHB1PeriphResetCmd+0x3c>)
200009be:	691a      	ldr	r2, [r3, #16]
200009c0:	687b      	ldr	r3, [r7, #4]
200009c2:	43d9      	mvns	r1, r3
200009c4:	4b03      	ldr	r3, [pc, #12]	; (200009d4 <RCC_AHB1PeriphResetCmd+0x3c>)
200009c6:	400a      	ands	r2, r1
200009c8:	611a      	str	r2, [r3, #16]
}
200009ca:	46c0      	nop			; (mov r8, r8)
200009cc:	46bd      	mov	sp, r7
200009ce:	b002      	add	sp, #8
200009d0:	bd80      	pop	{r7, pc}
200009d2:	46c0      	nop			; (mov r8, r8)
200009d4:	40023800 	andmi	r3, r2, r0, lsl #16

200009d8 <RCC_AHB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB2PeriphResetCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
{
200009d8:	b580      	push	{r7, lr}
200009da:	b082      	sub	sp, #8
200009dc:	af00      	add	r7, sp, #0
200009de:	6078      	str	r0, [r7, #4]
200009e0:	000a      	movs	r2, r1
200009e2:	1cfb      	adds	r3, r7, #3
200009e4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
200009e6:	1cfb      	adds	r3, r7, #3
200009e8:	781b      	ldrb	r3, [r3, #0]
200009ea:	2b00      	cmp	r3, #0
200009ec:	d006      	beq.n	200009fc <RCC_AHB2PeriphResetCmd+0x24>
  {
    RCC->AHB2RSTR |= RCC_AHB2Periph;
200009ee:	4b09      	ldr	r3, [pc, #36]	; (20000a14 <RCC_AHB2PeriphResetCmd+0x3c>)
200009f0:	6959      	ldr	r1, [r3, #20]
200009f2:	4b08      	ldr	r3, [pc, #32]	; (20000a14 <RCC_AHB2PeriphResetCmd+0x3c>)
200009f4:	687a      	ldr	r2, [r7, #4]
200009f6:	430a      	orrs	r2, r1
200009f8:	615a      	str	r2, [r3, #20]
  }
  else
  {
    RCC->AHB2RSTR &= ~RCC_AHB2Periph;
  }
}
200009fa:	e006      	b.n	20000a0a <RCC_AHB2PeriphResetCmd+0x32>
    RCC->AHB2RSTR &= ~RCC_AHB2Periph;
200009fc:	4b05      	ldr	r3, [pc, #20]	; (20000a14 <RCC_AHB2PeriphResetCmd+0x3c>)
200009fe:	695a      	ldr	r2, [r3, #20]
20000a00:	687b      	ldr	r3, [r7, #4]
20000a02:	43d9      	mvns	r1, r3
20000a04:	4b03      	ldr	r3, [pc, #12]	; (20000a14 <RCC_AHB2PeriphResetCmd+0x3c>)
20000a06:	400a      	ands	r2, r1
20000a08:	615a      	str	r2, [r3, #20]
}
20000a0a:	46c0      	nop			; (mov r8, r8)
20000a0c:	46bd      	mov	sp, r7
20000a0e:	b002      	add	sp, #8
20000a10:	bd80      	pop	{r7, pc}
20000a12:	46c0      	nop			; (mov r8, r8)
20000a14:	40023800 	andmi	r3, r2, r0, lsl #16

20000a18 <RCC_AHB3PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB3PeriphResetCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
{
20000a18:	b580      	push	{r7, lr}
20000a1a:	b082      	sub	sp, #8
20000a1c:	af00      	add	r7, sp, #0
20000a1e:	6078      	str	r0, [r7, #4]
20000a20:	000a      	movs	r2, r1
20000a22:	1cfb      	adds	r3, r7, #3
20000a24:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
20000a26:	1cfb      	adds	r3, r7, #3
20000a28:	781b      	ldrb	r3, [r3, #0]
20000a2a:	2b00      	cmp	r3, #0
20000a2c:	d006      	beq.n	20000a3c <RCC_AHB3PeriphResetCmd+0x24>
  {
    RCC->AHB3RSTR |= RCC_AHB3Periph;
20000a2e:	4b09      	ldr	r3, [pc, #36]	; (20000a54 <RCC_AHB3PeriphResetCmd+0x3c>)
20000a30:	6999      	ldr	r1, [r3, #24]
20000a32:	4b08      	ldr	r3, [pc, #32]	; (20000a54 <RCC_AHB3PeriphResetCmd+0x3c>)
20000a34:	687a      	ldr	r2, [r7, #4]
20000a36:	430a      	orrs	r2, r1
20000a38:	619a      	str	r2, [r3, #24]
  }
  else
  {
    RCC->AHB3RSTR &= ~RCC_AHB3Periph;
  }
}
20000a3a:	e006      	b.n	20000a4a <RCC_AHB3PeriphResetCmd+0x32>
    RCC->AHB3RSTR &= ~RCC_AHB3Periph;
20000a3c:	4b05      	ldr	r3, [pc, #20]	; (20000a54 <RCC_AHB3PeriphResetCmd+0x3c>)
20000a3e:	699a      	ldr	r2, [r3, #24]
20000a40:	687b      	ldr	r3, [r7, #4]
20000a42:	43d9      	mvns	r1, r3
20000a44:	4b03      	ldr	r3, [pc, #12]	; (20000a54 <RCC_AHB3PeriphResetCmd+0x3c>)
20000a46:	400a      	ands	r2, r1
20000a48:	619a      	str	r2, [r3, #24]
}
20000a4a:	46c0      	nop			; (mov r8, r8)
20000a4c:	46bd      	mov	sp, r7
20000a4e:	b002      	add	sp, #8
20000a50:	bd80      	pop	{r7, pc}
20000a52:	46c0      	nop			; (mov r8, r8)
20000a54:	40023800 	andmi	r3, r2, r0, lsl #16

20000a58 <RCC_APB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
20000a58:	b580      	push	{r7, lr}
20000a5a:	b082      	sub	sp, #8
20000a5c:	af00      	add	r7, sp, #0
20000a5e:	6078      	str	r0, [r7, #4]
20000a60:	000a      	movs	r2, r1
20000a62:	1cfb      	adds	r3, r7, #3
20000a64:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
20000a66:	1cfb      	adds	r3, r7, #3
20000a68:	781b      	ldrb	r3, [r3, #0]
20000a6a:	2b00      	cmp	r3, #0
20000a6c:	d006      	beq.n	20000a7c <RCC_APB1PeriphResetCmd+0x24>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
20000a6e:	4b09      	ldr	r3, [pc, #36]	; (20000a94 <RCC_APB1PeriphResetCmd+0x3c>)
20000a70:	6a19      	ldr	r1, [r3, #32]
20000a72:	4b08      	ldr	r3, [pc, #32]	; (20000a94 <RCC_APB1PeriphResetCmd+0x3c>)
20000a74:	687a      	ldr	r2, [r7, #4]
20000a76:	430a      	orrs	r2, r1
20000a78:	621a      	str	r2, [r3, #32]
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
  }
}
20000a7a:	e006      	b.n	20000a8a <RCC_APB1PeriphResetCmd+0x32>
    RCC->APB1RSTR &= ~RCC_APB1Periph;
20000a7c:	4b05      	ldr	r3, [pc, #20]	; (20000a94 <RCC_APB1PeriphResetCmd+0x3c>)
20000a7e:	6a1a      	ldr	r2, [r3, #32]
20000a80:	687b      	ldr	r3, [r7, #4]
20000a82:	43d9      	mvns	r1, r3
20000a84:	4b03      	ldr	r3, [pc, #12]	; (20000a94 <RCC_APB1PeriphResetCmd+0x3c>)
20000a86:	400a      	ands	r2, r1
20000a88:	621a      	str	r2, [r3, #32]
}
20000a8a:	46c0      	nop			; (mov r8, r8)
20000a8c:	46bd      	mov	sp, r7
20000a8e:	b002      	add	sp, #8
20000a90:	bd80      	pop	{r7, pc}
20000a92:	46c0      	nop			; (mov r8, r8)
20000a94:	40023800 	andmi	r3, r2, r0, lsl #16

20000a98 <RCC_APB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
20000a98:	b580      	push	{r7, lr}
20000a9a:	b082      	sub	sp, #8
20000a9c:	af00      	add	r7, sp, #0
20000a9e:	6078      	str	r0, [r7, #4]
20000aa0:	000a      	movs	r2, r1
20000aa2:	1cfb      	adds	r3, r7, #3
20000aa4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_RESET_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
20000aa6:	1cfb      	adds	r3, r7, #3
20000aa8:	781b      	ldrb	r3, [r3, #0]
20000aaa:	2b00      	cmp	r3, #0
20000aac:	d006      	beq.n	20000abc <RCC_APB2PeriphResetCmd+0x24>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
20000aae:	4b09      	ldr	r3, [pc, #36]	; (20000ad4 <RCC_APB2PeriphResetCmd+0x3c>)
20000ab0:	6a59      	ldr	r1, [r3, #36]	; 0x24
20000ab2:	4b08      	ldr	r3, [pc, #32]	; (20000ad4 <RCC_APB2PeriphResetCmd+0x3c>)
20000ab4:	687a      	ldr	r2, [r7, #4]
20000ab6:	430a      	orrs	r2, r1
20000ab8:	625a      	str	r2, [r3, #36]	; 0x24
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
  }
}
20000aba:	e006      	b.n	20000aca <RCC_APB2PeriphResetCmd+0x32>
    RCC->APB2RSTR &= ~RCC_APB2Periph;
20000abc:	4b05      	ldr	r3, [pc, #20]	; (20000ad4 <RCC_APB2PeriphResetCmd+0x3c>)
20000abe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
20000ac0:	687b      	ldr	r3, [r7, #4]
20000ac2:	43d9      	mvns	r1, r3
20000ac4:	4b03      	ldr	r3, [pc, #12]	; (20000ad4 <RCC_APB2PeriphResetCmd+0x3c>)
20000ac6:	400a      	ands	r2, r1
20000ac8:	625a      	str	r2, [r3, #36]	; 0x24
}
20000aca:	46c0      	nop			; (mov r8, r8)
20000acc:	46bd      	mov	sp, r7
20000ace:	b002      	add	sp, #8
20000ad0:	bd80      	pop	{r7, pc}
20000ad2:	46c0      	nop			; (mov r8, r8)
20000ad4:	40023800 	andmi	r3, r2, r0, lsl #16

20000ad8 <RCC_AHB1PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockLPModeCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
20000ad8:	b580      	push	{r7, lr}
20000ada:	b082      	sub	sp, #8
20000adc:	af00      	add	r7, sp, #0
20000ade:	6078      	str	r0, [r7, #4]
20000ae0:	000a      	movs	r2, r1
20000ae2:	1cfb      	adds	r3, r7, #3
20000ae4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_LPMODE_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
20000ae6:	1cfb      	adds	r3, r7, #3
20000ae8:	781b      	ldrb	r3, [r3, #0]
20000aea:	2b00      	cmp	r3, #0
20000aec:	d006      	beq.n	20000afc <RCC_AHB1PeriphClockLPModeCmd+0x24>
  {
    RCC->AHB1LPENR |= RCC_AHB1Periph;
20000aee:	4b09      	ldr	r3, [pc, #36]	; (20000b14 <RCC_AHB1PeriphClockLPModeCmd+0x3c>)
20000af0:	6d19      	ldr	r1, [r3, #80]	; 0x50
20000af2:	4b08      	ldr	r3, [pc, #32]	; (20000b14 <RCC_AHB1PeriphClockLPModeCmd+0x3c>)
20000af4:	687a      	ldr	r2, [r7, #4]
20000af6:	430a      	orrs	r2, r1
20000af8:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    RCC->AHB1LPENR &= ~RCC_AHB1Periph;
  }
}
20000afa:	e006      	b.n	20000b0a <RCC_AHB1PeriphClockLPModeCmd+0x32>
    RCC->AHB1LPENR &= ~RCC_AHB1Periph;
20000afc:	4b05      	ldr	r3, [pc, #20]	; (20000b14 <RCC_AHB1PeriphClockLPModeCmd+0x3c>)
20000afe:	6d1a      	ldr	r2, [r3, #80]	; 0x50
20000b00:	687b      	ldr	r3, [r7, #4]
20000b02:	43d9      	mvns	r1, r3
20000b04:	4b03      	ldr	r3, [pc, #12]	; (20000b14 <RCC_AHB1PeriphClockLPModeCmd+0x3c>)
20000b06:	400a      	ands	r2, r1
20000b08:	651a      	str	r2, [r3, #80]	; 0x50
}
20000b0a:	46c0      	nop			; (mov r8, r8)
20000b0c:	46bd      	mov	sp, r7
20000b0e:	b002      	add	sp, #8
20000b10:	bd80      	pop	{r7, pc}
20000b12:	46c0      	nop			; (mov r8, r8)
20000b14:	40023800 	andmi	r3, r2, r0, lsl #16

20000b18 <RCC_AHB2PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB2PeriphClockLPModeCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
{
20000b18:	b580      	push	{r7, lr}
20000b1a:	b082      	sub	sp, #8
20000b1c:	af00      	add	r7, sp, #0
20000b1e:	6078      	str	r0, [r7, #4]
20000b20:	000a      	movs	r2, r1
20000b22:	1cfb      	adds	r3, r7, #3
20000b24:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
20000b26:	1cfb      	adds	r3, r7, #3
20000b28:	781b      	ldrb	r3, [r3, #0]
20000b2a:	2b00      	cmp	r3, #0
20000b2c:	d006      	beq.n	20000b3c <RCC_AHB2PeriphClockLPModeCmd+0x24>
  {
    RCC->AHB2LPENR |= RCC_AHB2Periph;
20000b2e:	4b09      	ldr	r3, [pc, #36]	; (20000b54 <RCC_AHB2PeriphClockLPModeCmd+0x3c>)
20000b30:	6d59      	ldr	r1, [r3, #84]	; 0x54
20000b32:	4b08      	ldr	r3, [pc, #32]	; (20000b54 <RCC_AHB2PeriphClockLPModeCmd+0x3c>)
20000b34:	687a      	ldr	r2, [r7, #4]
20000b36:	430a      	orrs	r2, r1
20000b38:	655a      	str	r2, [r3, #84]	; 0x54
  }
  else
  {
    RCC->AHB2LPENR &= ~RCC_AHB2Periph;
  }
}
20000b3a:	e006      	b.n	20000b4a <RCC_AHB2PeriphClockLPModeCmd+0x32>
    RCC->AHB2LPENR &= ~RCC_AHB2Periph;
20000b3c:	4b05      	ldr	r3, [pc, #20]	; (20000b54 <RCC_AHB2PeriphClockLPModeCmd+0x3c>)
20000b3e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
20000b40:	687b      	ldr	r3, [r7, #4]
20000b42:	43d9      	mvns	r1, r3
20000b44:	4b03      	ldr	r3, [pc, #12]	; (20000b54 <RCC_AHB2PeriphClockLPModeCmd+0x3c>)
20000b46:	400a      	ands	r2, r1
20000b48:	655a      	str	r2, [r3, #84]	; 0x54
}
20000b4a:	46c0      	nop			; (mov r8, r8)
20000b4c:	46bd      	mov	sp, r7
20000b4e:	b002      	add	sp, #8
20000b50:	bd80      	pop	{r7, pc}
20000b52:	46c0      	nop			; (mov r8, r8)
20000b54:	40023800 	andmi	r3, r2, r0, lsl #16

20000b58 <RCC_AHB3PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB3PeriphClockLPModeCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
{
20000b58:	b580      	push	{r7, lr}
20000b5a:	b082      	sub	sp, #8
20000b5c:	af00      	add	r7, sp, #0
20000b5e:	6078      	str	r0, [r7, #4]
20000b60:	000a      	movs	r2, r1
20000b62:	1cfb      	adds	r3, r7, #3
20000b64:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
20000b66:	1cfb      	adds	r3, r7, #3
20000b68:	781b      	ldrb	r3, [r3, #0]
20000b6a:	2b00      	cmp	r3, #0
20000b6c:	d006      	beq.n	20000b7c <RCC_AHB3PeriphClockLPModeCmd+0x24>
  {
    RCC->AHB3LPENR |= RCC_AHB3Periph;
20000b6e:	4b09      	ldr	r3, [pc, #36]	; (20000b94 <RCC_AHB3PeriphClockLPModeCmd+0x3c>)
20000b70:	6d99      	ldr	r1, [r3, #88]	; 0x58
20000b72:	4b08      	ldr	r3, [pc, #32]	; (20000b94 <RCC_AHB3PeriphClockLPModeCmd+0x3c>)
20000b74:	687a      	ldr	r2, [r7, #4]
20000b76:	430a      	orrs	r2, r1
20000b78:	659a      	str	r2, [r3, #88]	; 0x58
  }
  else
  {
    RCC->AHB3LPENR &= ~RCC_AHB3Periph;
  }
}
20000b7a:	e006      	b.n	20000b8a <RCC_AHB3PeriphClockLPModeCmd+0x32>
    RCC->AHB3LPENR &= ~RCC_AHB3Periph;
20000b7c:	4b05      	ldr	r3, [pc, #20]	; (20000b94 <RCC_AHB3PeriphClockLPModeCmd+0x3c>)
20000b7e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
20000b80:	687b      	ldr	r3, [r7, #4]
20000b82:	43d9      	mvns	r1, r3
20000b84:	4b03      	ldr	r3, [pc, #12]	; (20000b94 <RCC_AHB3PeriphClockLPModeCmd+0x3c>)
20000b86:	400a      	ands	r2, r1
20000b88:	659a      	str	r2, [r3, #88]	; 0x58
}
20000b8a:	46c0      	nop			; (mov r8, r8)
20000b8c:	46bd      	mov	sp, r7
20000b8e:	b002      	add	sp, #8
20000b90:	bd80      	pop	{r7, pc}
20000b92:	46c0      	nop			; (mov r8, r8)
20000b94:	40023800 	andmi	r3, r2, r0, lsl #16

20000b98 <RCC_APB1PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockLPModeCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
20000b98:	b580      	push	{r7, lr}
20000b9a:	b082      	sub	sp, #8
20000b9c:	af00      	add	r7, sp, #0
20000b9e:	6078      	str	r0, [r7, #4]
20000ba0:	000a      	movs	r2, r1
20000ba2:	1cfb      	adds	r3, r7, #3
20000ba4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
20000ba6:	1cfb      	adds	r3, r7, #3
20000ba8:	781b      	ldrb	r3, [r3, #0]
20000baa:	2b00      	cmp	r3, #0
20000bac:	d006      	beq.n	20000bbc <RCC_APB1PeriphClockLPModeCmd+0x24>
  {
    RCC->APB1LPENR |= RCC_APB1Periph;
20000bae:	4b09      	ldr	r3, [pc, #36]	; (20000bd4 <RCC_APB1PeriphClockLPModeCmd+0x3c>)
20000bb0:	6e19      	ldr	r1, [r3, #96]	; 0x60
20000bb2:	4b08      	ldr	r3, [pc, #32]	; (20000bd4 <RCC_APB1PeriphClockLPModeCmd+0x3c>)
20000bb4:	687a      	ldr	r2, [r7, #4]
20000bb6:	430a      	orrs	r2, r1
20000bb8:	661a      	str	r2, [r3, #96]	; 0x60
  }
  else
  {
    RCC->APB1LPENR &= ~RCC_APB1Periph;
  }
}
20000bba:	e006      	b.n	20000bca <RCC_APB1PeriphClockLPModeCmd+0x32>
    RCC->APB1LPENR &= ~RCC_APB1Periph;
20000bbc:	4b05      	ldr	r3, [pc, #20]	; (20000bd4 <RCC_APB1PeriphClockLPModeCmd+0x3c>)
20000bbe:	6e1a      	ldr	r2, [r3, #96]	; 0x60
20000bc0:	687b      	ldr	r3, [r7, #4]
20000bc2:	43d9      	mvns	r1, r3
20000bc4:	4b03      	ldr	r3, [pc, #12]	; (20000bd4 <RCC_APB1PeriphClockLPModeCmd+0x3c>)
20000bc6:	400a      	ands	r2, r1
20000bc8:	661a      	str	r2, [r3, #96]	; 0x60
}
20000bca:	46c0      	nop			; (mov r8, r8)
20000bcc:	46bd      	mov	sp, r7
20000bce:	b002      	add	sp, #8
20000bd0:	bd80      	pop	{r7, pc}
20000bd2:	46c0      	nop			; (mov r8, r8)
20000bd4:	40023800 	andmi	r3, r2, r0, lsl #16

20000bd8 <RCC_APB2PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockLPModeCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
20000bd8:	b580      	push	{r7, lr}
20000bda:	b082      	sub	sp, #8
20000bdc:	af00      	add	r7, sp, #0
20000bde:	6078      	str	r0, [r7, #4]
20000be0:	000a      	movs	r2, r1
20000be2:	1cfb      	adds	r3, r7, #3
20000be4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
20000be6:	1cfb      	adds	r3, r7, #3
20000be8:	781b      	ldrb	r3, [r3, #0]
20000bea:	2b00      	cmp	r3, #0
20000bec:	d006      	beq.n	20000bfc <RCC_APB2PeriphClockLPModeCmd+0x24>
  {
    RCC->APB2LPENR |= RCC_APB2Periph;
20000bee:	4b09      	ldr	r3, [pc, #36]	; (20000c14 <RCC_APB2PeriphClockLPModeCmd+0x3c>)
20000bf0:	6e59      	ldr	r1, [r3, #100]	; 0x64
20000bf2:	4b08      	ldr	r3, [pc, #32]	; (20000c14 <RCC_APB2PeriphClockLPModeCmd+0x3c>)
20000bf4:	687a      	ldr	r2, [r7, #4]
20000bf6:	430a      	orrs	r2, r1
20000bf8:	665a      	str	r2, [r3, #100]	; 0x64
  }
  else
  {
    RCC->APB2LPENR &= ~RCC_APB2Periph;
  }
}
20000bfa:	e006      	b.n	20000c0a <RCC_APB2PeriphClockLPModeCmd+0x32>
    RCC->APB2LPENR &= ~RCC_APB2Periph;
20000bfc:	4b05      	ldr	r3, [pc, #20]	; (20000c14 <RCC_APB2PeriphClockLPModeCmd+0x3c>)
20000bfe:	6e5a      	ldr	r2, [r3, #100]	; 0x64
20000c00:	687b      	ldr	r3, [r7, #4]
20000c02:	43d9      	mvns	r1, r3
20000c04:	4b03      	ldr	r3, [pc, #12]	; (20000c14 <RCC_APB2PeriphClockLPModeCmd+0x3c>)
20000c06:	400a      	ands	r2, r1
20000c08:	665a      	str	r2, [r3, #100]	; 0x64
}
20000c0a:	46c0      	nop			; (mov r8, r8)
20000c0c:	46bd      	mov	sp, r7
20000c0e:	b002      	add	sp, #8
20000c10:	bd80      	pop	{r7, pc}
20000c12:	46c0      	nop			; (mov r8, r8)
20000c14:	40023800 	andmi	r3, r2, r0, lsl #16

20000c18 <RCC_LSEModeConfig>:
  *            @arg RCC_LSE_LOWPOWER_MODE:  LSE oscillator in low power mode.
  *            @arg RCC_LSE_HIGHDRIVE_MODE: LSE oscillator in High Drive mode.
  * @retval None
  */
void RCC_LSEModeConfig(uint8_t RCC_Mode)
{
20000c18:	b580      	push	{r7, lr}
20000c1a:	b082      	sub	sp, #8
20000c1c:	af00      	add	r7, sp, #0
20000c1e:	0002      	movs	r2, r0
20000c20:	1dfb      	adds	r3, r7, #7
20000c22:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_LSE_MODE(RCC_Mode));
  
  if(RCC_Mode == RCC_LSE_HIGHDRIVE_MODE)
20000c24:	1dfb      	adds	r3, r7, #7
20000c26:	781b      	ldrb	r3, [r3, #0]
20000c28:	2b01      	cmp	r3, #1
20000c2a:	d106      	bne.n	20000c3a <RCC_LSEModeConfig+0x22>
  {
    SET_BIT(RCC->BDCR, RCC_BDCR_LSEMOD);
20000c2c:	4b08      	ldr	r3, [pc, #32]	; (20000c50 <RCC_LSEModeConfig+0x38>)
20000c2e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
20000c30:	4b07      	ldr	r3, [pc, #28]	; (20000c50 <RCC_LSEModeConfig+0x38>)
20000c32:	2108      	movs	r1, #8
20000c34:	430a      	orrs	r2, r1
20000c36:	671a      	str	r2, [r3, #112]	; 0x70
  }
  else
  {
    CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEMOD);
  }
}
20000c38:	e005      	b.n	20000c46 <RCC_LSEModeConfig+0x2e>
    CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEMOD);
20000c3a:	4b05      	ldr	r3, [pc, #20]	; (20000c50 <RCC_LSEModeConfig+0x38>)
20000c3c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
20000c3e:	4b04      	ldr	r3, [pc, #16]	; (20000c50 <RCC_LSEModeConfig+0x38>)
20000c40:	2108      	movs	r1, #8
20000c42:	438a      	bics	r2, r1
20000c44:	671a      	str	r2, [r3, #112]	; 0x70
}
20000c46:	46c0      	nop			; (mov r8, r8)
20000c48:	46bd      	mov	sp, r7
20000c4a:	b002      	add	sp, #8
20000c4c:	bd80      	pop	{r7, pc}
20000c4e:	46c0      	nop			; (mov r8, r8)
20000c50:	40023800 	andmi	r3, r2, r0, lsl #16

20000c54 <RCC_ITConfig>:
  * @param  NewState: new state of the specified RCC interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_ITConfig(uint8_t RCC_IT, FunctionalState NewState)
{
20000c54:	b580      	push	{r7, lr}
20000c56:	b082      	sub	sp, #8
20000c58:	af00      	add	r7, sp, #0
20000c5a:	0002      	movs	r2, r0
20000c5c:	1dfb      	adds	r3, r7, #7
20000c5e:	701a      	strb	r2, [r3, #0]
20000c60:	1dbb      	adds	r3, r7, #6
20000c62:	1c0a      	adds	r2, r1, #0
20000c64:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_IT(RCC_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
20000c66:	1dbb      	adds	r3, r7, #6
20000c68:	781b      	ldrb	r3, [r3, #0]
20000c6a:	2b00      	cmp	r3, #0
20000c6c:	d009      	beq.n	20000c82 <RCC_ITConfig+0x2e>
  {
    /* Perform Byte access to RCC_CIR[14:8] bits to enable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS |= RCC_IT;
20000c6e:	4b0c      	ldr	r3, [pc, #48]	; (20000ca0 <RCC_ITConfig+0x4c>)
20000c70:	781b      	ldrb	r3, [r3, #0]
20000c72:	b2da      	uxtb	r2, r3
20000c74:	490a      	ldr	r1, [pc, #40]	; (20000ca0 <RCC_ITConfig+0x4c>)
20000c76:	1dfb      	adds	r3, r7, #7
20000c78:	781b      	ldrb	r3, [r3, #0]
20000c7a:	4313      	orrs	r3, r2
20000c7c:	b2db      	uxtb	r3, r3
20000c7e:	700b      	strb	r3, [r1, #0]
  else
  {
    /* Perform Byte access to RCC_CIR[14:8] bits to disable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS &= (uint8_t)~RCC_IT;
  }
}
20000c80:	e00a      	b.n	20000c98 <RCC_ITConfig+0x44>
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS &= (uint8_t)~RCC_IT;
20000c82:	4b07      	ldr	r3, [pc, #28]	; (20000ca0 <RCC_ITConfig+0x4c>)
20000c84:	781b      	ldrb	r3, [r3, #0]
20000c86:	b2db      	uxtb	r3, r3
20000c88:	1dfa      	adds	r2, r7, #7
20000c8a:	7812      	ldrb	r2, [r2, #0]
20000c8c:	43d2      	mvns	r2, r2
20000c8e:	b2d2      	uxtb	r2, r2
20000c90:	4903      	ldr	r1, [pc, #12]	; (20000ca0 <RCC_ITConfig+0x4c>)
20000c92:	4013      	ands	r3, r2
20000c94:	b2db      	uxtb	r3, r3
20000c96:	700b      	strb	r3, [r1, #0]
}
20000c98:	46c0      	nop			; (mov r8, r8)
20000c9a:	46bd      	mov	sp, r7
20000c9c:	b002      	add	sp, #8
20000c9e:	bd80      	pop	{r7, pc}
20000ca0:	4002380d 	andmi	r3, r2, sp, lsl #16

20000ca4 <RCC_GetFlagStatus>:
  *            @arg RCC_FLAG_WWDGRST: Window Watchdog reset
  *            @arg RCC_FLAG_LPWRRST: Low Power reset
  * @retval The new state of RCC_FLAG (SET or RESET).
  */
FlagStatus RCC_GetFlagStatus(uint8_t RCC_FLAG)
{
20000ca4:	b580      	push	{r7, lr}
20000ca6:	b086      	sub	sp, #24
20000ca8:	af00      	add	r7, sp, #0
20000caa:	0002      	movs	r2, r0
20000cac:	1dfb      	adds	r3, r7, #7
20000cae:	701a      	strb	r2, [r3, #0]
  uint32_t tmp = 0;
20000cb0:	2300      	movs	r3, #0
20000cb2:	60fb      	str	r3, [r7, #12]
  uint32_t statusreg = 0;
20000cb4:	2300      	movs	r3, #0
20000cb6:	617b      	str	r3, [r7, #20]
  FlagStatus bitstatus = RESET;
20000cb8:	2313      	movs	r3, #19
20000cba:	18fb      	adds	r3, r7, r3
20000cbc:	2200      	movs	r2, #0
20000cbe:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_FLAG(RCC_FLAG));

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
20000cc0:	1dfb      	adds	r3, r7, #7
20000cc2:	781b      	ldrb	r3, [r3, #0]
20000cc4:	095b      	lsrs	r3, r3, #5
20000cc6:	b2db      	uxtb	r3, r3
20000cc8:	60fb      	str	r3, [r7, #12]
  if (tmp == 1)               /* The flag to check is in CR register */
20000cca:	68fb      	ldr	r3, [r7, #12]
20000ccc:	2b01      	cmp	r3, #1
20000cce:	d103      	bne.n	20000cd8 <RCC_GetFlagStatus+0x34>
  {
    statusreg = RCC->CR;
20000cd0:	4b14      	ldr	r3, [pc, #80]	; (20000d24 <RCC_GetFlagStatus+0x80>)
20000cd2:	681b      	ldr	r3, [r3, #0]
20000cd4:	617b      	str	r3, [r7, #20]
20000cd6:	e009      	b.n	20000cec <RCC_GetFlagStatus+0x48>
  }
  else if (tmp == 2)          /* The flag to check is in BDCR register */
20000cd8:	68fb      	ldr	r3, [r7, #12]
20000cda:	2b02      	cmp	r3, #2
20000cdc:	d103      	bne.n	20000ce6 <RCC_GetFlagStatus+0x42>
  {
    statusreg = RCC->BDCR;
20000cde:	4b11      	ldr	r3, [pc, #68]	; (20000d24 <RCC_GetFlagStatus+0x80>)
20000ce0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
20000ce2:	617b      	str	r3, [r7, #20]
20000ce4:	e002      	b.n	20000cec <RCC_GetFlagStatus+0x48>
  }
  else                       /* The flag to check is in CSR register */
  {
    statusreg = RCC->CSR;
20000ce6:	4b0f      	ldr	r3, [pc, #60]	; (20000d24 <RCC_GetFlagStatus+0x80>)
20000ce8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
20000cea:	617b      	str	r3, [r7, #20]
  }

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_MASK;
20000cec:	1dfb      	adds	r3, r7, #7
20000cee:	781b      	ldrb	r3, [r3, #0]
20000cf0:	221f      	movs	r2, #31
20000cf2:	4013      	ands	r3, r2
20000cf4:	60fb      	str	r3, [r7, #12]
  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
20000cf6:	697a      	ldr	r2, [r7, #20]
20000cf8:	68fb      	ldr	r3, [r7, #12]
20000cfa:	40da      	lsrs	r2, r3
20000cfc:	0013      	movs	r3, r2
20000cfe:	2201      	movs	r2, #1
20000d00:	4013      	ands	r3, r2
20000d02:	d004      	beq.n	20000d0e <RCC_GetFlagStatus+0x6a>
  {
    bitstatus = SET;
20000d04:	2313      	movs	r3, #19
20000d06:	18fb      	adds	r3, r7, r3
20000d08:	2201      	movs	r2, #1
20000d0a:	701a      	strb	r2, [r3, #0]
20000d0c:	e003      	b.n	20000d16 <RCC_GetFlagStatus+0x72>
  }
  else
  {
    bitstatus = RESET;
20000d0e:	2313      	movs	r3, #19
20000d10:	18fb      	adds	r3, r7, r3
20000d12:	2200      	movs	r2, #0
20000d14:	701a      	strb	r2, [r3, #0]
  }
  /* Return the flag status */
  return bitstatus;
20000d16:	2313      	movs	r3, #19
20000d18:	18fb      	adds	r3, r7, r3
20000d1a:	781b      	ldrb	r3, [r3, #0]
}
20000d1c:	0018      	movs	r0, r3
20000d1e:	46bd      	mov	sp, r7
20000d20:	b006      	add	sp, #24
20000d22:	bd80      	pop	{r7, pc}
20000d24:	40023800 	andmi	r3, r2, r0, lsl #16

20000d28 <RCC_ClearFlag>:
  *         RCC_FLAG_IWDGRST, RCC_FLAG_WWDGRST, RCC_FLAG_LPWRRST
  * @param  None
  * @retval None
  */
void RCC_ClearFlag(void)
{
20000d28:	b580      	push	{r7, lr}
20000d2a:	af00      	add	r7, sp, #0
  /* Set RMVF bit to clear the reset flags */
  RCC->CSR |= RCC_CSR_RMVF;
20000d2c:	4b04      	ldr	r3, [pc, #16]	; (20000d40 <RCC_ClearFlag+0x18>)
20000d2e:	6f5a      	ldr	r2, [r3, #116]	; 0x74
20000d30:	4b03      	ldr	r3, [pc, #12]	; (20000d40 <RCC_ClearFlag+0x18>)
20000d32:	2180      	movs	r1, #128	; 0x80
20000d34:	0449      	lsls	r1, r1, #17
20000d36:	430a      	orrs	r2, r1
20000d38:	675a      	str	r2, [r3, #116]	; 0x74
}
20000d3a:	46c0      	nop			; (mov r8, r8)
20000d3c:	46bd      	mov	sp, r7
20000d3e:	bd80      	pop	{r7, pc}
20000d40:	40023800 	andmi	r3, r2, r0, lsl #16

20000d44 <RCC_GetITStatus>:
  *            @arg RCC_IT_PLLSAIRDY: PLLSAI clock ready interrupt (only for STM32F42xxx/43xxx/446xx/469xx/479xx devices)
  *            @arg RCC_IT_CSS: Clock Security System interrupt
  * @retval The new state of RCC_IT (SET or RESET).
  */
ITStatus RCC_GetITStatus(uint8_t RCC_IT)
{
20000d44:	b580      	push	{r7, lr}
20000d46:	b084      	sub	sp, #16
20000d48:	af00      	add	r7, sp, #0
20000d4a:	0002      	movs	r2, r0
20000d4c:	1dfb      	adds	r3, r7, #7
20000d4e:	701a      	strb	r2, [r3, #0]
  ITStatus bitstatus = RESET;
20000d50:	230f      	movs	r3, #15
20000d52:	18fb      	adds	r3, r7, r3
20000d54:	2200      	movs	r2, #0
20000d56:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_GET_IT(RCC_IT));

  /* Check the status of the specified RCC interrupt */
  if ((RCC->CIR & RCC_IT) != (uint32_t)RESET)
20000d58:	4b0a      	ldr	r3, [pc, #40]	; (20000d84 <RCC_GetITStatus+0x40>)
20000d5a:	68db      	ldr	r3, [r3, #12]
20000d5c:	1dfa      	adds	r2, r7, #7
20000d5e:	7812      	ldrb	r2, [r2, #0]
20000d60:	4013      	ands	r3, r2
20000d62:	d004      	beq.n	20000d6e <RCC_GetITStatus+0x2a>
  {
    bitstatus = SET;
20000d64:	230f      	movs	r3, #15
20000d66:	18fb      	adds	r3, r7, r3
20000d68:	2201      	movs	r2, #1
20000d6a:	701a      	strb	r2, [r3, #0]
20000d6c:	e003      	b.n	20000d76 <RCC_GetITStatus+0x32>
  }
  else
  {
    bitstatus = RESET;
20000d6e:	230f      	movs	r3, #15
20000d70:	18fb      	adds	r3, r7, r3
20000d72:	2200      	movs	r2, #0
20000d74:	701a      	strb	r2, [r3, #0]
  }
  /* Return the RCC_IT status */
  return  bitstatus;
20000d76:	230f      	movs	r3, #15
20000d78:	18fb      	adds	r3, r7, r3
20000d7a:	781b      	ldrb	r3, [r3, #0]
}
20000d7c:	0018      	movs	r0, r3
20000d7e:	46bd      	mov	sp, r7
20000d80:	b004      	add	sp, #16
20000d82:	bd80      	pop	{r7, pc}
20000d84:	40023800 	andmi	r3, r2, r0, lsl #16

20000d88 <RCC_ClearITPendingBit>:
  *            @arg RCC_IT_PLLSAIRDY: PLLSAI ready interrupt (only for STM32F42xxx/43xxx/446xx/469xx/479xx devices) 
  *            @arg RCC_IT_CSS: Clock Security System interrupt
  * @retval None
  */
void RCC_ClearITPendingBit(uint8_t RCC_IT)
{
20000d88:	b580      	push	{r7, lr}
20000d8a:	b082      	sub	sp, #8
20000d8c:	af00      	add	r7, sp, #0
20000d8e:	0002      	movs	r2, r0
20000d90:	1dfb      	adds	r3, r7, #7
20000d92:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_CLEAR_IT(RCC_IT));

  /* Perform Byte access to RCC_CIR[23:16] bits to clear the selected interrupt
     pending bits */
  *(__IO uint8_t *) CIR_BYTE3_ADDRESS = RCC_IT;
20000d94:	4a03      	ldr	r2, [pc, #12]	; (20000da4 <RCC_ClearITPendingBit+0x1c>)
20000d96:	1dfb      	adds	r3, r7, #7
20000d98:	781b      	ldrb	r3, [r3, #0]
20000d9a:	7013      	strb	r3, [r2, #0]
}
20000d9c:	46c0      	nop			; (mov r8, r8)
20000d9e:	46bd      	mov	sp, r7
20000da0:	b002      	add	sp, #8
20000da2:	bd80      	pop	{r7, pc}
20000da4:	4002380e 	andmi	r3, r2, lr, lsl #16

20000da8 <detect_Closed_Doors>:
	GPIO_Pin_0, GPIO_Pin_1, GPIO_Pin_2, GPIO_Pin_3, GPIO_Pin_4, GPIO_Pin_5,
	GPIO_Pin_6, GPIO_Pin_7, GPIO_Pin_8, GPIO_Pin_9, GPIO_Pin_10, GPIO_Pin_11,
	GPIO_Pin_12, GPIO_Pin_13, GPIO_Pin_14, GPIO_Pin_15};

void detect_Closed_Doors(int *pointer)
{
20000da8:	b580      	push	{r7, lr}
20000daa:	b084      	sub	sp, #16
20000dac:	af00      	add	r7, sp, #0
20000dae:	6078      	str	r0, [r7, #4]
	while ((*pointer) == 0) {
20000db0:	e018      	b.n	20000de4 <detect_Closed_Doors+0x3c>
	for (int i = 0; i < sizeof(GPIO_Pins); i = i + 2)
20000db2:	2300      	movs	r3, #0
20000db4:	60fb      	str	r3, [r7, #12]
20000db6:	e012      	b.n	20000dde <detect_Closed_Doors+0x36>
	{
		if (!(GPIO_ReadInputDataBit(GPIOE, GPIO_Pins[i])))
20000db8:	4b0e      	ldr	r3, [pc, #56]	; (20000df4 <detect_Closed_Doors+0x4c>)
20000dba:	68fa      	ldr	r2, [r7, #12]
20000dbc:	0052      	lsls	r2, r2, #1
20000dbe:	5ad3      	ldrh	r3, [r2, r3]
20000dc0:	4a0d      	ldr	r2, [pc, #52]	; (20000df8 <detect_Closed_Doors+0x50>)
20000dc2:	0019      	movs	r1, r3
20000dc4:	0010      	movs	r0, r2
20000dc6:	f000 fb7a 	bl	200014be <GPIO_ReadInputDataBit>
20000dca:	1e03      	subs	r3, r0, #0
20000dcc:	d104      	bne.n	20000dd8 <detect_Closed_Doors+0x30>
		{
			(*pointer)++;
20000dce:	687b      	ldr	r3, [r7, #4]
20000dd0:	681b      	ldr	r3, [r3, #0]
20000dd2:	1c5a      	adds	r2, r3, #1
20000dd4:	687b      	ldr	r3, [r7, #4]
20000dd6:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < sizeof(GPIO_Pins); i = i + 2)
20000dd8:	68fb      	ldr	r3, [r7, #12]
20000dda:	3302      	adds	r3, #2
20000ddc:	60fb      	str	r3, [r7, #12]
20000dde:	68fb      	ldr	r3, [r7, #12]
20000de0:	2b1f      	cmp	r3, #31
20000de2:	d9e9      	bls.n	20000db8 <detect_Closed_Doors+0x10>
	while ((*pointer) == 0) {
20000de4:	687b      	ldr	r3, [r7, #4]
20000de6:	681b      	ldr	r3, [r3, #0]
20000de8:	2b00      	cmp	r3, #0
20000dea:	d0e2      	beq.n	20000db2 <detect_Closed_Doors+0xa>
		}
	}
	}
	}
20000dec:	46c0      	nop			; (mov r8, r8)
20000dee:	46bd      	mov	sp, r7
20000df0:	b004      	add	sp, #16
20000df2:	bd80      	pop	{r7, pc}
20000df4:	20002514 	andcs	r2, r0, r4, lsl r5
20000df8:	40021000 	andmi	r1, r2, r0

20000dfc <init_Doors>:


void init_Doors(door *pointer, int length)
{
20000dfc:	b580      	push	{r7, lr}
20000dfe:	b084      	sub	sp, #16
20000e00:	af00      	add	r7, sp, #0
20000e02:	6078      	str	r0, [r7, #4]
20000e04:	6039      	str	r1, [r7, #0]
	int SafetyNum = 0;
20000e06:	2300      	movs	r3, #0
20000e08:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < sizeof(GPIO_Pins); i = i+2)
20000e0a:	2300      	movs	r3, #0
20000e0c:	60bb      	str	r3, [r7, #8]
20000e0e:	e035      	b.n	20000e7c <init_Doors+0x80>
	{
		if (!(GPIO_ReadInputDataBit(GPIOE, GPIO_Pins[i])))
20000e10:	4b1e      	ldr	r3, [pc, #120]	; (20000e8c <init_Doors+0x90>)
20000e12:	68ba      	ldr	r2, [r7, #8]
20000e14:	0052      	lsls	r2, r2, #1
20000e16:	5ad3      	ldrh	r3, [r2, r3]
20000e18:	4a1d      	ldr	r2, [pc, #116]	; (20000e90 <init_Doors+0x94>)
20000e1a:	0019      	movs	r1, r3
20000e1c:	0010      	movs	r0, r2
20000e1e:	f000 fb4e 	bl	200014be <GPIO_ReadInputDataBit>
20000e22:	1e03      	subs	r3, r0, #0
20000e24:	d127      	bne.n	20000e76 <init_Doors+0x7a>
		{
		
			SafetyNum++;
20000e26:	68fb      	ldr	r3, [r7, #12]
20000e28:	3301      	adds	r3, #1
20000e2a:	60fb      	str	r3, [r7, #12]
			pointer->id = i;
20000e2c:	68bb      	ldr	r3, [r7, #8]
20000e2e:	b2da      	uxtb	r2, r3
20000e30:	687b      	ldr	r3, [r7, #4]
20000e32:	701a      	strb	r2, [r3, #0]
			pointer->controlbits = 0;
20000e34:	687b      	ldr	r3, [r7, #4]
20000e36:	2200      	movs	r2, #0
20000e38:	605a      	str	r2, [r3, #4]
			pointer->time_larm = 0;
20000e3a:	687b      	ldr	r3, [r7, #4]
20000e3c:	2200      	movs	r2, #0
20000e3e:	721a      	strb	r2, [r3, #8]
			pointer->time_central_larm = 2;
20000e40:	687b      	ldr	r3, [r7, #4]
20000e42:	2202      	movs	r2, #2
20000e44:	725a      	strb	r2, [r3, #9]
			pointer->password = 0;
20000e46:	687b      	ldr	r3, [r7, #4]
20000e48:	2200      	movs	r2, #0
20000e4a:	60da      	str	r2, [r3, #12]
			pointer->GPIO_lamp = GPIO_Pins[i + 1];
20000e4c:	68bb      	ldr	r3, [r7, #8]
20000e4e:	1c5a      	adds	r2, r3, #1
20000e50:	4b0e      	ldr	r3, [pc, #56]	; (20000e8c <init_Doors+0x90>)
20000e52:	0052      	lsls	r2, r2, #1
20000e54:	5ad3      	ldrh	r3, [r2, r3]
20000e56:	001a      	movs	r2, r3
20000e58:	687b      	ldr	r3, [r7, #4]
20000e5a:	611a      	str	r2, [r3, #16]
			pointer->GPIO_read = GPIO_Pins[i];
20000e5c:	4b0b      	ldr	r3, [pc, #44]	; (20000e8c <init_Doors+0x90>)
20000e5e:	68ba      	ldr	r2, [r7, #8]
20000e60:	0052      	lsls	r2, r2, #1
20000e62:	5ad3      	ldrh	r3, [r2, r3]
20000e64:	001a      	movs	r2, r3
20000e66:	687b      	ldr	r3, [r7, #4]
20000e68:	615a      	str	r2, [r3, #20]
			pointer->larmTick = 0;
20000e6a:	687b      	ldr	r3, [r7, #4]
20000e6c:	2200      	movs	r2, #0
20000e6e:	619a      	str	r2, [r3, #24]
			pointer++;
20000e70:	687b      	ldr	r3, [r7, #4]
20000e72:	331c      	adds	r3, #28
20000e74:	607b      	str	r3, [r7, #4]
	for (int i = 0; i < sizeof(GPIO_Pins); i = i+2)
20000e76:	68bb      	ldr	r3, [r7, #8]
20000e78:	3302      	adds	r3, #2
20000e7a:	60bb      	str	r3, [r7, #8]
20000e7c:	68bb      	ldr	r3, [r7, #8]
20000e7e:	2b1f      	cmp	r3, #31
20000e80:	d9c6      	bls.n	20000e10 <init_Doors+0x14>
			
		}
	}
}
20000e82:	46c0      	nop			; (mov r8, r8)
20000e84:	46bd      	mov	sp, r7
20000e86:	b004      	add	sp, #16
20000e88:	bd80      	pop	{r7, pc}
20000e8a:	46c0      	nop			; (mov r8, r8)
20000e8c:	20002514 	andcs	r2, r0, r4, lsl r5
20000e90:	40021000 	andmi	r1, r2, r0

20000e94 <init_GPIO_Ports>:

//======================================GPIO=========================================================
void init_GPIO_Ports()
{
20000e94:	b580      	push	{r7, lr}
20000e96:	b082      	sub	sp, #8
20000e98:	af00      	add	r7, sp, #0
	/*  Function used to set the GPIO configuration to the default reset state ****/
	GPIO_InitTypeDef init;
	//GPIO E UTPORTAR
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOE, ENABLE);
20000e9a:	2101      	movs	r1, #1
20000e9c:	2010      	movs	r0, #16
20000e9e:	f7ff fcdb 	bl	20000858 <RCC_AHB1PeriphClockCmd>
	GPIO_StructInit(&init);
20000ea2:	003b      	movs	r3, r7
20000ea4:	0018      	movs	r0, r3
20000ea6:	f000 facd 	bl	20001444 <GPIO_StructInit>
	init.GPIO_Pin = GPIO_Pin_1 | GPIO_Pin_3 | GPIO_Pin_5 | GPIO_Pin_7 | GPIO_Pin_9 | GPIO_Pin_11 | GPIO_Pin_13 | GPIO_Pin_15;
20000eaa:	003b      	movs	r3, r7
20000eac:	4a13      	ldr	r2, [pc, #76]	; (20000efc <init_GPIO_Ports+0x68>)
20000eae:	601a      	str	r2, [r3, #0]
	init.GPIO_Mode = GPIO_Mode_OUT;
20000eb0:	003b      	movs	r3, r7
20000eb2:	2201      	movs	r2, #1
20000eb4:	711a      	strb	r2, [r3, #4]
	init.GPIO_OType = GPIO_OType_PP;
20000eb6:	003b      	movs	r3, r7
20000eb8:	2200      	movs	r2, #0
20000eba:	719a      	strb	r2, [r3, #6]
	init.GPIO_PuPd = GPIO_PuPd_NOPULL;
20000ebc:	003b      	movs	r3, r7
20000ebe:	2200      	movs	r2, #0
20000ec0:	71da      	strb	r2, [r3, #7]
	GPIO_Init(GPIOE, &init);
20000ec2:	003b      	movs	r3, r7
20000ec4:	4a0e      	ldr	r2, [pc, #56]	; (20000f00 <init_GPIO_Ports+0x6c>)
20000ec6:	0019      	movs	r1, r3
20000ec8:	0010      	movs	r0, r2
20000eca:	f000 fa2f 	bl	2000132c <GPIO_Init>
	
	//konfigurerar inport GPIO E
	GPIO_StructInit(&init);
20000ece:	003b      	movs	r3, r7
20000ed0:	0018      	movs	r0, r3
20000ed2:	f000 fab7 	bl	20001444 <GPIO_StructInit>
	init.GPIO_Pin = GPIO_Pin_0 | GPIO_Pin_2 | GPIO_Pin_4 | GPIO_Pin_6 | GPIO_Pin_8 | GPIO_Pin_10 | GPIO_Pin_12 |GPIO_Pin_14;
20000ed6:	003b      	movs	r3, r7
20000ed8:	4a0a      	ldr	r2, [pc, #40]	; (20000f04 <init_GPIO_Ports+0x70>)
20000eda:	601a      	str	r2, [r3, #0]
	init.GPIO_Mode = GPIO_Mode_IN;
20000edc:	003b      	movs	r3, r7
20000ede:	2200      	movs	r2, #0
20000ee0:	711a      	strb	r2, [r3, #4]
	init.GPIO_PuPd = GPIO_PuPd_UP;
20000ee2:	003b      	movs	r3, r7
20000ee4:	2201      	movs	r2, #1
20000ee6:	71da      	strb	r2, [r3, #7]
	GPIO_Init(GPIOE, &init);
20000ee8:	003b      	movs	r3, r7
20000eea:	4a05      	ldr	r2, [pc, #20]	; (20000f00 <init_GPIO_Ports+0x6c>)
20000eec:	0019      	movs	r1, r3
20000eee:	0010      	movs	r0, r2
20000ef0:	f000 fa1c 	bl	2000132c <GPIO_Init>
}
20000ef4:	46c0      	nop			; (mov r8, r8)
20000ef6:	46bd      	mov	sp, r7
20000ef8:	b002      	add	sp, #8
20000efa:	bd80      	pop	{r7, pc}
20000efc:	0000aaaa 	andeq	sl, r0, sl, lsr #21
20000f00:	40021000 	andmi	r1, r2, r0
20000f04:	00005555 	andeq	r5, r0, r5, asr r5

20000f08 <SysTick_Handler>:


// ========================================= SYSTICK ================================================
volatile uint32_t msTicks = 0; /* Variable to store millisecond ticks */
void SysTick_Handler(void)
{ /* SysTick interrupt Handler. */
20000f08:	b580      	push	{r7, lr}
20000f0a:	af00      	add	r7, sp, #0
	msTicks++;
20000f0c:	4b03      	ldr	r3, [pc, #12]	; (20000f1c <SysTick_Handler+0x14>)
20000f0e:	681b      	ldr	r3, [r3, #0]
20000f10:	1c5a      	adds	r2, r3, #1
20000f12:	4b02      	ldr	r3, [pc, #8]	; (20000f1c <SysTick_Handler+0x14>)
20000f14:	601a      	str	r2, [r3, #0]
}
20000f16:	46c0      	nop			; (mov r8, r8)
20000f18:	46bd      	mov	sp, r7
20000f1a:	bd80      	pop	{r7, pc}
20000f1c:	20002490 	mulcs	r0, r0, r4

20000f20 <systick_Init>:
void systick_Init(void)
{
20000f20:	b580      	push	{r7, lr}
20000f22:	b082      	sub	sp, #8
20000f24:	af00      	add	r7, sp, #0
	// Initiera SysTick.
	*((void (**)(void))0x2001C03C) = SysTick_Handler;
20000f26:	4b06      	ldr	r3, [pc, #24]	; (20000f40 <systick_Init+0x20>)
20000f28:	4a06      	ldr	r2, [pc, #24]	; (20000f44 <systick_Init+0x24>)
20000f2a:	601a      	str	r2, [r3, #0]
	uint32_t returnCode;
	returnCode = SysTick_Config(168000000 / 1000); // Genererar ett SysTick-avbrott varje ms.
20000f2c:	4b06      	ldr	r3, [pc, #24]	; (20000f48 <systick_Init+0x28>)
20000f2e:	0018      	movs	r0, r3
20000f30:	f7ff f89e 	bl	20000070 <SysTick_Config>
20000f34:	0003      	movs	r3, r0
20000f36:	607b      	str	r3, [r7, #4]

	if (returnCode != 0)
	{   // Om inte SysTick_Config lyckas...
		//typ reboot? bootloops är alltid kul
	}
}
20000f38:	46c0      	nop			; (mov r8, r8)
20000f3a:	46bd      	mov	sp, r7
20000f3c:	b002      	add	sp, #8
20000f3e:	bd80      	pop	{r7, pc}
20000f40:	2001c03c 	andcs	ip, r1, ip, lsr r0
20000f44:	20000f09 	andcs	r0, r0, r9, lsl #30
20000f48:	00029040 	andeq	r9, r2, r0, asr #32

20000f4c <main>:
	

}*/
door active_doors[4];
void main(void)
{
20000f4c:	b580      	push	{r7, lr}
20000f4e:	b084      	sub	sp, #16
20000f50:	af00      	add	r7, sp, #0
	init_GPIO_Ports();
20000f52:	f7ff ff9f 	bl	20000e94 <init_GPIO_Ports>
	systick_Init();
20000f56:	f7ff ffe3 	bl	20000f20 <systick_Init>
	while(msTicks < 2000);
20000f5a:	46c0      	nop			; (mov r8, r8)
20000f5c:	4b90      	ldr	r3, [pc, #576]	; (200011a0 <main+0x254>)
20000f5e:	681b      	ldr	r3, [r3, #0]
20000f60:	4a90      	ldr	r2, [pc, #576]	; (200011a4 <main+0x258>)
20000f62:	4293      	cmp	r3, r2
20000f64:	d9fa      	bls.n	20000f5c <main+0x10>
	}
	
	//door active_doors[amountOfActiveDoors];
	 */
	
	int counter = 0;
20000f66:	2300      	movs	r3, #0
20000f68:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < sizeof(GPIO_Pins) / sizeof(uint16_t); i = i + 2)
20000f6a:	2300      	movs	r3, #0
20000f6c:	60bb      	str	r3, [r7, #8]
20000f6e:	e04e      	b.n	2000100e <main+0xc2>
	{
		if((!GPIO_ReadInputDataBit(GPIOE, GPIO_Pins[i])) && (counter < 4 )){
20000f70:	4b8d      	ldr	r3, [pc, #564]	; (200011a8 <main+0x25c>)
20000f72:	68ba      	ldr	r2, [r7, #8]
20000f74:	0052      	lsls	r2, r2, #1
20000f76:	5ad3      	ldrh	r3, [r2, r3]
20000f78:	4a8c      	ldr	r2, [pc, #560]	; (200011ac <main+0x260>)
20000f7a:	0019      	movs	r1, r3
20000f7c:	0010      	movs	r0, r2
20000f7e:	f000 fa9e 	bl	200014be <GPIO_ReadInputDataBit>
20000f82:	1e03      	subs	r3, r0, #0
20000f84:	d140      	bne.n	20001008 <main+0xbc>
20000f86:	68fb      	ldr	r3, [r7, #12]
20000f88:	2b03      	cmp	r3, #3
20000f8a:	dc3d      	bgt.n	20001008 <main+0xbc>
			active_doors[counter].GPIO_read = GPIO_Pins[i];
20000f8c:	4b86      	ldr	r3, [pc, #536]	; (200011a8 <main+0x25c>)
20000f8e:	68ba      	ldr	r2, [r7, #8]
20000f90:	0052      	lsls	r2, r2, #1
20000f92:	5ad3      	ldrh	r3, [r2, r3]
20000f94:	0018      	movs	r0, r3
20000f96:	4986      	ldr	r1, [pc, #536]	; (200011b0 <main+0x264>)
20000f98:	68fa      	ldr	r2, [r7, #12]
20000f9a:	0013      	movs	r3, r2
20000f9c:	00db      	lsls	r3, r3, #3
20000f9e:	1a9b      	subs	r3, r3, r2
20000fa0:	009b      	lsls	r3, r3, #2
20000fa2:	18cb      	adds	r3, r1, r3
20000fa4:	3314      	adds	r3, #20
20000fa6:	6018      	str	r0, [r3, #0]
			active_doors[counter].GPIO_lamp = GPIO_Pins[i+1];
20000fa8:	68bb      	ldr	r3, [r7, #8]
20000faa:	1c5a      	adds	r2, r3, #1
20000fac:	4b7e      	ldr	r3, [pc, #504]	; (200011a8 <main+0x25c>)
20000fae:	0052      	lsls	r2, r2, #1
20000fb0:	5ad3      	ldrh	r3, [r2, r3]
20000fb2:	0018      	movs	r0, r3
20000fb4:	497e      	ldr	r1, [pc, #504]	; (200011b0 <main+0x264>)
20000fb6:	68fa      	ldr	r2, [r7, #12]
20000fb8:	0013      	movs	r3, r2
20000fba:	00db      	lsls	r3, r3, #3
20000fbc:	1a9b      	subs	r3, r3, r2
20000fbe:	009b      	lsls	r3, r3, #2
20000fc0:	18cb      	adds	r3, r1, r3
20000fc2:	3310      	adds	r3, #16
20000fc4:	6018      	str	r0, [r3, #0]
			active_doors[counter].controlbits = 0;
20000fc6:	497a      	ldr	r1, [pc, #488]	; (200011b0 <main+0x264>)
20000fc8:	68fa      	ldr	r2, [r7, #12]
20000fca:	0013      	movs	r3, r2
20000fcc:	00db      	lsls	r3, r3, #3
20000fce:	1a9b      	subs	r3, r3, r2
20000fd0:	009b      	lsls	r3, r3, #2
20000fd2:	18cb      	adds	r3, r1, r3
20000fd4:	3304      	adds	r3, #4
20000fd6:	2200      	movs	r2, #0
20000fd8:	601a      	str	r2, [r3, #0]
			active_doors[counter].time_larm = 0;
20000fda:	4975      	ldr	r1, [pc, #468]	; (200011b0 <main+0x264>)
20000fdc:	68fa      	ldr	r2, [r7, #12]
20000fde:	0013      	movs	r3, r2
20000fe0:	00db      	lsls	r3, r3, #3
20000fe2:	1a9b      	subs	r3, r3, r2
20000fe4:	009b      	lsls	r3, r3, #2
20000fe6:	18cb      	adds	r3, r1, r3
20000fe8:	3308      	adds	r3, #8
20000fea:	2200      	movs	r2, #0
20000fec:	701a      	strb	r2, [r3, #0]
			active_doors[counter].time_central_larm = 2;
20000fee:	4970      	ldr	r1, [pc, #448]	; (200011b0 <main+0x264>)
20000ff0:	68fa      	ldr	r2, [r7, #12]
20000ff2:	0013      	movs	r3, r2
20000ff4:	00db      	lsls	r3, r3, #3
20000ff6:	1a9b      	subs	r3, r3, r2
20000ff8:	009b      	lsls	r3, r3, #2
20000ffa:	18cb      	adds	r3, r1, r3
20000ffc:	3309      	adds	r3, #9
20000ffe:	2202      	movs	r2, #2
20001000:	701a      	strb	r2, [r3, #0]
			counter++;
20001002:	68fb      	ldr	r3, [r7, #12]
20001004:	3301      	adds	r3, #1
20001006:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < sizeof(GPIO_Pins) / sizeof(uint16_t); i = i + 2)
20001008:	68bb      	ldr	r3, [r7, #8]
2000100a:	3302      	adds	r3, #2
2000100c:	60bb      	str	r3, [r7, #8]
2000100e:	68bb      	ldr	r3, [r7, #8]
20001010:	2b0f      	cmp	r3, #15
20001012:	d9ad      	bls.n	20000f70 <main+0x24>
	door active_doors[4] = {test1,test2,test3,test4};
	*/
	
	while (1)
	{
		for (int i = 0; i < sizeof(active_doors); i++)
20001014:	2300      	movs	r3, #0
20001016:	607b      	str	r3, [r7, #4]
20001018:	e0bc      	b.n	20001194 <main+0x248>
		{
			if (!GPIO_ReadInputDataBit(GPIOE, active_doors[i].GPIO_read))
2000101a:	4965      	ldr	r1, [pc, #404]	; (200011b0 <main+0x264>)
2000101c:	687a      	ldr	r2, [r7, #4]
2000101e:	0013      	movs	r3, r2
20001020:	00db      	lsls	r3, r3, #3
20001022:	1a9b      	subs	r3, r3, r2
20001024:	009b      	lsls	r3, r3, #2
20001026:	18cb      	adds	r3, r1, r3
20001028:	3314      	adds	r3, #20
2000102a:	681b      	ldr	r3, [r3, #0]
2000102c:	b29b      	uxth	r3, r3
2000102e:	4a5f      	ldr	r2, [pc, #380]	; (200011ac <main+0x260>)
20001030:	0019      	movs	r1, r3
20001032:	0010      	movs	r0, r2
20001034:	f000 fa43 	bl	200014be <GPIO_ReadInputDataBit>
20001038:	1e03      	subs	r3, r0, #0
2000103a:	d115      	bne.n	20001068 <main+0x11c>
			{
				active_doors[i].controlbits &= 0xFFFE; //borde va så!
2000103c:	495c      	ldr	r1, [pc, #368]	; (200011b0 <main+0x264>)
2000103e:	687a      	ldr	r2, [r7, #4]
20001040:	0013      	movs	r3, r2
20001042:	00db      	lsls	r3, r3, #3
20001044:	1a9b      	subs	r3, r3, r2
20001046:	009b      	lsls	r3, r3, #2
20001048:	18cb      	adds	r3, r1, r3
2000104a:	3304      	adds	r3, #4
2000104c:	681b      	ldr	r3, [r3, #0]
2000104e:	4a59      	ldr	r2, [pc, #356]	; (200011b4 <main+0x268>)
20001050:	4013      	ands	r3, r2
20001052:	0019      	movs	r1, r3
20001054:	4856      	ldr	r0, [pc, #344]	; (200011b0 <main+0x264>)
20001056:	687a      	ldr	r2, [r7, #4]
20001058:	0013      	movs	r3, r2
2000105a:	00db      	lsls	r3, r3, #3
2000105c:	1a9b      	subs	r3, r3, r2
2000105e:	009b      	lsls	r3, r3, #2
20001060:	18c3      	adds	r3, r0, r3
20001062:	3304      	adds	r3, #4
20001064:	6019      	str	r1, [r3, #0]
20001066:	e02b      	b.n	200010c0 <main+0x174>
													   //GPIO_ResetBits(GPIOE, active_doors[i].GPIO_lamp);
			}
			else
			{
				if (!active_doors[i].controlbits & 1)
20001068:	4951      	ldr	r1, [pc, #324]	; (200011b0 <main+0x264>)
2000106a:	687a      	ldr	r2, [r7, #4]
2000106c:	0013      	movs	r3, r2
2000106e:	00db      	lsls	r3, r3, #3
20001070:	1a9b      	subs	r3, r3, r2
20001072:	009b      	lsls	r3, r3, #2
20001074:	18cb      	adds	r3, r1, r3
20001076:	3304      	adds	r3, #4
20001078:	681b      	ldr	r3, [r3, #0]
2000107a:	2b00      	cmp	r3, #0
2000107c:	d10b      	bne.n	20001096 <main+0x14a>
				{
					active_doors[i].larmTick = msTicks;
2000107e:	4b48      	ldr	r3, [pc, #288]	; (200011a0 <main+0x254>)
20001080:	681b      	ldr	r3, [r3, #0]
20001082:	0018      	movs	r0, r3
20001084:	494a      	ldr	r1, [pc, #296]	; (200011b0 <main+0x264>)
20001086:	687a      	ldr	r2, [r7, #4]
20001088:	0013      	movs	r3, r2
2000108a:	00db      	lsls	r3, r3, #3
2000108c:	1a9b      	subs	r3, r3, r2
2000108e:	009b      	lsls	r3, r3, #2
20001090:	18cb      	adds	r3, r1, r3
20001092:	3318      	adds	r3, #24
20001094:	6018      	str	r0, [r3, #0]
				}
				active_doors[i].controlbits |= 1;
20001096:	4946      	ldr	r1, [pc, #280]	; (200011b0 <main+0x264>)
20001098:	687a      	ldr	r2, [r7, #4]
2000109a:	0013      	movs	r3, r2
2000109c:	00db      	lsls	r3, r3, #3
2000109e:	1a9b      	subs	r3, r3, r2
200010a0:	009b      	lsls	r3, r3, #2
200010a2:	18cb      	adds	r3, r1, r3
200010a4:	3304      	adds	r3, #4
200010a6:	681b      	ldr	r3, [r3, #0]
200010a8:	2201      	movs	r2, #1
200010aa:	431a      	orrs	r2, r3
200010ac:	0011      	movs	r1, r2
200010ae:	4840      	ldr	r0, [pc, #256]	; (200011b0 <main+0x264>)
200010b0:	687a      	ldr	r2, [r7, #4]
200010b2:	0013      	movs	r3, r2
200010b4:	00db      	lsls	r3, r3, #3
200010b6:	1a9b      	subs	r3, r3, r2
200010b8:	009b      	lsls	r3, r3, #2
200010ba:	18c3      	adds	r3, r0, r3
200010bc:	3304      	adds	r3, #4
200010be:	6019      	str	r1, [r3, #0]

				//GPIO_SetBits(GPIOE, active_doors[i].GPIO_lamp);
			}

			for (int i = 0; i < sizeof(active_doors); i++)
200010c0:	2300      	movs	r3, #0
200010c2:	603b      	str	r3, [r7, #0]
200010c4:	e060      	b.n	20001188 <main+0x23c>
			{
				if (active_doors[i].controlbits & 1 && msTicks > (active_doors[i].larmTick + 1000 * 10 * active_doors[i].time_larm))
200010c6:	493a      	ldr	r1, [pc, #232]	; (200011b0 <main+0x264>)
200010c8:	683a      	ldr	r2, [r7, #0]
200010ca:	0013      	movs	r3, r2
200010cc:	00db      	lsls	r3, r3, #3
200010ce:	1a9b      	subs	r3, r3, r2
200010d0:	009b      	lsls	r3, r3, #2
200010d2:	18cb      	adds	r3, r1, r3
200010d4:	3304      	adds	r3, #4
200010d6:	681b      	ldr	r3, [r3, #0]
200010d8:	2201      	movs	r2, #1
200010da:	4013      	ands	r3, r2
200010dc:	d02a      	beq.n	20001134 <main+0x1e8>
200010de:	4934      	ldr	r1, [pc, #208]	; (200011b0 <main+0x264>)
200010e0:	683a      	ldr	r2, [r7, #0]
200010e2:	0013      	movs	r3, r2
200010e4:	00db      	lsls	r3, r3, #3
200010e6:	1a9b      	subs	r3, r3, r2
200010e8:	009b      	lsls	r3, r3, #2
200010ea:	18cb      	adds	r3, r1, r3
200010ec:	3318      	adds	r3, #24
200010ee:	6819      	ldr	r1, [r3, #0]
200010f0:	482f      	ldr	r0, [pc, #188]	; (200011b0 <main+0x264>)
200010f2:	683a      	ldr	r2, [r7, #0]
200010f4:	0013      	movs	r3, r2
200010f6:	00db      	lsls	r3, r3, #3
200010f8:	1a9b      	subs	r3, r3, r2
200010fa:	009b      	lsls	r3, r3, #2
200010fc:	18c3      	adds	r3, r0, r3
200010fe:	3308      	adds	r3, #8
20001100:	781b      	ldrb	r3, [r3, #0]
20001102:	001a      	movs	r2, r3
20001104:	4b2c      	ldr	r3, [pc, #176]	; (200011b8 <main+0x26c>)
20001106:	4353      	muls	r3, r2
20001108:	18cb      	adds	r3, r1, r3
2000110a:	001a      	movs	r2, r3
2000110c:	4b24      	ldr	r3, [pc, #144]	; (200011a0 <main+0x254>)
2000110e:	681b      	ldr	r3, [r3, #0]
20001110:	429a      	cmp	r2, r3
20001112:	d20f      	bcs.n	20001134 <main+0x1e8>
				{
					GPIO_SetBits(GPIOE, active_doors[i].GPIO_lamp);
20001114:	4926      	ldr	r1, [pc, #152]	; (200011b0 <main+0x264>)
20001116:	683a      	ldr	r2, [r7, #0]
20001118:	0013      	movs	r3, r2
2000111a:	00db      	lsls	r3, r3, #3
2000111c:	1a9b      	subs	r3, r3, r2
2000111e:	009b      	lsls	r3, r3, #2
20001120:	18cb      	adds	r3, r1, r3
20001122:	3310      	adds	r3, #16
20001124:	681b      	ldr	r3, [r3, #0]
20001126:	b29b      	uxth	r3, r3
20001128:	4a20      	ldr	r2, [pc, #128]	; (200011ac <main+0x260>)
2000112a:	0019      	movs	r1, r3
2000112c:	0010      	movs	r0, r2
2000112e:	f000 fa1e 	bl	2000156e <GPIO_SetBits>
20001132:	e00e      	b.n	20001152 <main+0x206>
				}

				else
				{
					GPIO_ResetBits(GPIOE, active_doors[i].GPIO_lamp);
20001134:	491e      	ldr	r1, [pc, #120]	; (200011b0 <main+0x264>)
20001136:	683a      	ldr	r2, [r7, #0]
20001138:	0013      	movs	r3, r2
2000113a:	00db      	lsls	r3, r3, #3
2000113c:	1a9b      	subs	r3, r3, r2
2000113e:	009b      	lsls	r3, r3, #2
20001140:	18cb      	adds	r3, r1, r3
20001142:	3310      	adds	r3, #16
20001144:	681b      	ldr	r3, [r3, #0]
20001146:	b29b      	uxth	r3, r3
20001148:	4a18      	ldr	r2, [pc, #96]	; (200011ac <main+0x260>)
2000114a:	0019      	movs	r1, r3
2000114c:	0010      	movs	r0, r2
2000114e:	f000 fa1d 	bl	2000158c <GPIO_ResetBits>
				}
				if (active_doors[i].controlbits & 1 && msTicks > (active_doors[i].larmTick + 1000 * 10 * active_doors[i].time_central_larm))
20001152:	4917      	ldr	r1, [pc, #92]	; (200011b0 <main+0x264>)
20001154:	683a      	ldr	r2, [r7, #0]
20001156:	0013      	movs	r3, r2
20001158:	00db      	lsls	r3, r3, #3
2000115a:	1a9b      	subs	r3, r3, r2
2000115c:	009b      	lsls	r3, r3, #2
2000115e:	18cb      	adds	r3, r1, r3
20001160:	3304      	adds	r3, #4
20001162:	681b      	ldr	r3, [r3, #0]
20001164:	2201      	movs	r2, #1
20001166:	4013      	ands	r3, r2
20001168:	d00b      	beq.n	20001182 <main+0x236>
2000116a:	683a      	ldr	r2, [r7, #0]
2000116c:	0013      	movs	r3, r2
2000116e:	00db      	lsls	r3, r3, #3
20001170:	1a9b      	subs	r3, r3, r2
20001172:	009b      	lsls	r3, r3, #2
20001174:	683a      	ldr	r2, [r7, #0]
20001176:	0013      	movs	r3, r2
20001178:	00db      	lsls	r3, r3, #3
2000117a:	1a9b      	subs	r3, r3, r2
2000117c:	009b      	lsls	r3, r3, #2
2000117e:	4b08      	ldr	r3, [pc, #32]	; (200011a0 <main+0x254>)
20001180:	681b      	ldr	r3, [r3, #0]
			for (int i = 0; i < sizeof(active_doors); i++)
20001182:	683b      	ldr	r3, [r7, #0]
20001184:	3301      	adds	r3, #1
20001186:	603b      	str	r3, [r7, #0]
20001188:	683b      	ldr	r3, [r7, #0]
2000118a:	2b6f      	cmp	r3, #111	; 0x6f
2000118c:	d99b      	bls.n	200010c6 <main+0x17a>
		for (int i = 0; i < sizeof(active_doors); i++)
2000118e:	687b      	ldr	r3, [r7, #4]
20001190:	3301      	adds	r3, #1
20001192:	607b      	str	r3, [r7, #4]
20001194:	687b      	ldr	r3, [r7, #4]
20001196:	2b6f      	cmp	r3, #111	; 0x6f
20001198:	d800      	bhi.n	2000119c <main+0x250>
2000119a:	e73e      	b.n	2000101a <main+0xce>
2000119c:	e73a      	b.n	20001014 <main+0xc8>
2000119e:	46c0      	nop			; (mov r8, r8)
200011a0:	20002490 	mulcs	r0, r0, r4
200011a4:	000007cf 	andeq	r0, r0, pc, asr #15
200011a8:	20002514 	andcs	r2, r0, r4, lsl r5
200011ac:	40021000 	andmi	r1, r2, r0
200011b0:	20002494 	mulcs	r0, r4, r4
200011b4:	0000fffe 	strdeq	pc, [r0], -lr
200011b8:	00002710 	andeq	r2, r0, r0, lsl r7

200011bc <GPIO_DeInit>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F42xxx/43xxx devices.
  *                      x can be (A, B, C, D and H) to select the GPIO peripheral for STM32F401xx devices.  
  * @retval None
  */
void GPIO_DeInit(GPIO_TypeDef* GPIOx)
{
200011bc:	b580      	push	{r7, lr}
200011be:	b082      	sub	sp, #8
200011c0:	af00      	add	r7, sp, #0
200011c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  if (GPIOx == GPIOA)
200011c4:	687b      	ldr	r3, [r7, #4]
200011c6:	4a4e      	ldr	r2, [pc, #312]	; (20001300 <GPIO_DeInit+0x144>)
200011c8:	4293      	cmp	r3, r2
200011ca:	d108      	bne.n	200011de <GPIO_DeInit+0x22>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, ENABLE);
200011cc:	2101      	movs	r1, #1
200011ce:	2001      	movs	r0, #1
200011d0:	f7ff fbe2 	bl	20000998 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, DISABLE);
200011d4:	2100      	movs	r1, #0
200011d6:	2001      	movs	r0, #1
200011d8:	f7ff fbde 	bl	20000998 <RCC_AHB1PeriphResetCmd>
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, ENABLE);
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, DISABLE);
    }
  }
}
200011dc:	e08c      	b.n	200012f8 <GPIO_DeInit+0x13c>
  else if (GPIOx == GPIOB)
200011de:	687b      	ldr	r3, [r7, #4]
200011e0:	4a48      	ldr	r2, [pc, #288]	; (20001304 <GPIO_DeInit+0x148>)
200011e2:	4293      	cmp	r3, r2
200011e4:	d108      	bne.n	200011f8 <GPIO_DeInit+0x3c>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, ENABLE);
200011e6:	2101      	movs	r1, #1
200011e8:	2002      	movs	r0, #2
200011ea:	f7ff fbd5 	bl	20000998 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, DISABLE);
200011ee:	2100      	movs	r1, #0
200011f0:	2002      	movs	r0, #2
200011f2:	f7ff fbd1 	bl	20000998 <RCC_AHB1PeriphResetCmd>
}
200011f6:	e07f      	b.n	200012f8 <GPIO_DeInit+0x13c>
  else if (GPIOx == GPIOC)
200011f8:	687b      	ldr	r3, [r7, #4]
200011fa:	4a43      	ldr	r2, [pc, #268]	; (20001308 <GPIO_DeInit+0x14c>)
200011fc:	4293      	cmp	r3, r2
200011fe:	d108      	bne.n	20001212 <GPIO_DeInit+0x56>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, ENABLE);
20001200:	2101      	movs	r1, #1
20001202:	2004      	movs	r0, #4
20001204:	f7ff fbc8 	bl	20000998 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, DISABLE);
20001208:	2100      	movs	r1, #0
2000120a:	2004      	movs	r0, #4
2000120c:	f7ff fbc4 	bl	20000998 <RCC_AHB1PeriphResetCmd>
}
20001210:	e072      	b.n	200012f8 <GPIO_DeInit+0x13c>
  else if (GPIOx == GPIOD)
20001212:	687b      	ldr	r3, [r7, #4]
20001214:	4a3d      	ldr	r2, [pc, #244]	; (2000130c <GPIO_DeInit+0x150>)
20001216:	4293      	cmp	r3, r2
20001218:	d108      	bne.n	2000122c <GPIO_DeInit+0x70>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, ENABLE);
2000121a:	2101      	movs	r1, #1
2000121c:	2008      	movs	r0, #8
2000121e:	f7ff fbbb 	bl	20000998 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, DISABLE);
20001222:	2100      	movs	r1, #0
20001224:	2008      	movs	r0, #8
20001226:	f7ff fbb7 	bl	20000998 <RCC_AHB1PeriphResetCmd>
}
2000122a:	e065      	b.n	200012f8 <GPIO_DeInit+0x13c>
  else if (GPIOx == GPIOE)
2000122c:	687b      	ldr	r3, [r7, #4]
2000122e:	4a38      	ldr	r2, [pc, #224]	; (20001310 <GPIO_DeInit+0x154>)
20001230:	4293      	cmp	r3, r2
20001232:	d108      	bne.n	20001246 <GPIO_DeInit+0x8a>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, ENABLE);
20001234:	2101      	movs	r1, #1
20001236:	2010      	movs	r0, #16
20001238:	f7ff fbae 	bl	20000998 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, DISABLE);
2000123c:	2100      	movs	r1, #0
2000123e:	2010      	movs	r0, #16
20001240:	f7ff fbaa 	bl	20000998 <RCC_AHB1PeriphResetCmd>
}
20001244:	e058      	b.n	200012f8 <GPIO_DeInit+0x13c>
  else if (GPIOx == GPIOF)
20001246:	687b      	ldr	r3, [r7, #4]
20001248:	4a32      	ldr	r2, [pc, #200]	; (20001314 <GPIO_DeInit+0x158>)
2000124a:	4293      	cmp	r3, r2
2000124c:	d108      	bne.n	20001260 <GPIO_DeInit+0xa4>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, ENABLE);
2000124e:	2101      	movs	r1, #1
20001250:	2020      	movs	r0, #32
20001252:	f7ff fba1 	bl	20000998 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, DISABLE);
20001256:	2100      	movs	r1, #0
20001258:	2020      	movs	r0, #32
2000125a:	f7ff fb9d 	bl	20000998 <RCC_AHB1PeriphResetCmd>
}
2000125e:	e04b      	b.n	200012f8 <GPIO_DeInit+0x13c>
  else if (GPIOx == GPIOG)
20001260:	687b      	ldr	r3, [r7, #4]
20001262:	4a2d      	ldr	r2, [pc, #180]	; (20001318 <GPIO_DeInit+0x15c>)
20001264:	4293      	cmp	r3, r2
20001266:	d108      	bne.n	2000127a <GPIO_DeInit+0xbe>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, ENABLE);
20001268:	2101      	movs	r1, #1
2000126a:	2040      	movs	r0, #64	; 0x40
2000126c:	f7ff fb94 	bl	20000998 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, DISABLE);
20001270:	2100      	movs	r1, #0
20001272:	2040      	movs	r0, #64	; 0x40
20001274:	f7ff fb90 	bl	20000998 <RCC_AHB1PeriphResetCmd>
}
20001278:	e03e      	b.n	200012f8 <GPIO_DeInit+0x13c>
  else if (GPIOx == GPIOH)
2000127a:	687b      	ldr	r3, [r7, #4]
2000127c:	4a27      	ldr	r2, [pc, #156]	; (2000131c <GPIO_DeInit+0x160>)
2000127e:	4293      	cmp	r3, r2
20001280:	d108      	bne.n	20001294 <GPIO_DeInit+0xd8>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOH, ENABLE);
20001282:	2101      	movs	r1, #1
20001284:	2080      	movs	r0, #128	; 0x80
20001286:	f7ff fb87 	bl	20000998 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOH, DISABLE);
2000128a:	2100      	movs	r1, #0
2000128c:	2080      	movs	r0, #128	; 0x80
2000128e:	f7ff fb83 	bl	20000998 <RCC_AHB1PeriphResetCmd>
}
20001292:	e031      	b.n	200012f8 <GPIO_DeInit+0x13c>
  else if (GPIOx == GPIOI)
20001294:	687b      	ldr	r3, [r7, #4]
20001296:	4a22      	ldr	r2, [pc, #136]	; (20001320 <GPIO_DeInit+0x164>)
20001298:	4293      	cmp	r3, r2
2000129a:	d10c      	bne.n	200012b6 <GPIO_DeInit+0xfa>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, ENABLE);
2000129c:	2380      	movs	r3, #128	; 0x80
2000129e:	005b      	lsls	r3, r3, #1
200012a0:	2101      	movs	r1, #1
200012a2:	0018      	movs	r0, r3
200012a4:	f7ff fb78 	bl	20000998 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, DISABLE);
200012a8:	2380      	movs	r3, #128	; 0x80
200012aa:	005b      	lsls	r3, r3, #1
200012ac:	2100      	movs	r1, #0
200012ae:	0018      	movs	r0, r3
200012b0:	f7ff fb72 	bl	20000998 <RCC_AHB1PeriphResetCmd>
}
200012b4:	e020      	b.n	200012f8 <GPIO_DeInit+0x13c>
  else if (GPIOx == GPIOJ)
200012b6:	687b      	ldr	r3, [r7, #4]
200012b8:	4a1a      	ldr	r2, [pc, #104]	; (20001324 <GPIO_DeInit+0x168>)
200012ba:	4293      	cmp	r3, r2
200012bc:	d10c      	bne.n	200012d8 <GPIO_DeInit+0x11c>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOJ, ENABLE);
200012be:	2380      	movs	r3, #128	; 0x80
200012c0:	009b      	lsls	r3, r3, #2
200012c2:	2101      	movs	r1, #1
200012c4:	0018      	movs	r0, r3
200012c6:	f7ff fb67 	bl	20000998 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOJ, DISABLE);
200012ca:	2380      	movs	r3, #128	; 0x80
200012cc:	009b      	lsls	r3, r3, #2
200012ce:	2100      	movs	r1, #0
200012d0:	0018      	movs	r0, r3
200012d2:	f7ff fb61 	bl	20000998 <RCC_AHB1PeriphResetCmd>
}
200012d6:	e00f      	b.n	200012f8 <GPIO_DeInit+0x13c>
    if (GPIOx == GPIOK)
200012d8:	687b      	ldr	r3, [r7, #4]
200012da:	4a13      	ldr	r2, [pc, #76]	; (20001328 <GPIO_DeInit+0x16c>)
200012dc:	4293      	cmp	r3, r2
200012de:	d10b      	bne.n	200012f8 <GPIO_DeInit+0x13c>
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, ENABLE);
200012e0:	2380      	movs	r3, #128	; 0x80
200012e2:	00db      	lsls	r3, r3, #3
200012e4:	2101      	movs	r1, #1
200012e6:	0018      	movs	r0, r3
200012e8:	f7ff fb56 	bl	20000998 <RCC_AHB1PeriphResetCmd>
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, DISABLE);
200012ec:	2380      	movs	r3, #128	; 0x80
200012ee:	00db      	lsls	r3, r3, #3
200012f0:	2100      	movs	r1, #0
200012f2:	0018      	movs	r0, r3
200012f4:	f7ff fb50 	bl	20000998 <RCC_AHB1PeriphResetCmd>
}
200012f8:	46c0      	nop			; (mov r8, r8)
200012fa:	46bd      	mov	sp, r7
200012fc:	b002      	add	sp, #8
200012fe:	bd80      	pop	{r7, pc}
20001300:	40020000 	andmi	r0, r2, r0
20001304:	40020400 	andmi	r0, r2, r0, lsl #8
20001308:	40020800 	andmi	r0, r2, r0, lsl #16
2000130c:	40020c00 	andmi	r0, r2, r0, lsl #24
20001310:	40021000 	andmi	r1, r2, r0
20001314:	40021400 	andmi	r1, r2, r0, lsl #8
20001318:	40021800 	andmi	r1, r2, r0, lsl #16
2000131c:	40021c00 	andmi	r1, r2, r0, lsl #24
20001320:	40022000 	andmi	r2, r2, r0
20001324:	40022400 	andmi	r2, r2, r0, lsl #8
20001328:	40022800 	andmi	r2, r2, r0, lsl #16

2000132c <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
2000132c:	b580      	push	{r7, lr}
2000132e:	b086      	sub	sp, #24
20001330:	af00      	add	r7, sp, #0
20001332:	6078      	str	r0, [r7, #4]
20001334:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
20001336:	2300      	movs	r3, #0
20001338:	617b      	str	r3, [r7, #20]
2000133a:	2300      	movs	r3, #0
2000133c:	613b      	str	r3, [r7, #16]
2000133e:	2300      	movs	r3, #0
20001340:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
20001342:	2300      	movs	r3, #0
20001344:	617b      	str	r3, [r7, #20]
20001346:	e076      	b.n	20001436 <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
20001348:	2201      	movs	r2, #1
2000134a:	697b      	ldr	r3, [r7, #20]
2000134c:	409a      	lsls	r2, r3
2000134e:	0013      	movs	r3, r2
20001350:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
20001352:	683b      	ldr	r3, [r7, #0]
20001354:	681a      	ldr	r2, [r3, #0]
20001356:	693b      	ldr	r3, [r7, #16]
20001358:	4013      	ands	r3, r2
2000135a:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
2000135c:	68fa      	ldr	r2, [r7, #12]
2000135e:	693b      	ldr	r3, [r7, #16]
20001360:	429a      	cmp	r2, r3
20001362:	d165      	bne.n	20001430 <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
20001364:	687b      	ldr	r3, [r7, #4]
20001366:	681b      	ldr	r3, [r3, #0]
20001368:	697a      	ldr	r2, [r7, #20]
2000136a:	0052      	lsls	r2, r2, #1
2000136c:	2103      	movs	r1, #3
2000136e:	4091      	lsls	r1, r2
20001370:	000a      	movs	r2, r1
20001372:	43d2      	mvns	r2, r2
20001374:	401a      	ands	r2, r3
20001376:	687b      	ldr	r3, [r7, #4]
20001378:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
2000137a:	687b      	ldr	r3, [r7, #4]
2000137c:	681a      	ldr	r2, [r3, #0]
2000137e:	683b      	ldr	r3, [r7, #0]
20001380:	791b      	ldrb	r3, [r3, #4]
20001382:	0019      	movs	r1, r3
20001384:	697b      	ldr	r3, [r7, #20]
20001386:	005b      	lsls	r3, r3, #1
20001388:	4099      	lsls	r1, r3
2000138a:	000b      	movs	r3, r1
2000138c:	431a      	orrs	r2, r3
2000138e:	687b      	ldr	r3, [r7, #4]
20001390:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
20001392:	683b      	ldr	r3, [r7, #0]
20001394:	791b      	ldrb	r3, [r3, #4]
20001396:	2b01      	cmp	r3, #1
20001398:	d003      	beq.n	200013a2 <GPIO_Init+0x76>
2000139a:	683b      	ldr	r3, [r7, #0]
2000139c:	791b      	ldrb	r3, [r3, #4]
2000139e:	2b02      	cmp	r3, #2
200013a0:	d12e      	bne.n	20001400 <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
200013a2:	687b      	ldr	r3, [r7, #4]
200013a4:	689b      	ldr	r3, [r3, #8]
200013a6:	697a      	ldr	r2, [r7, #20]
200013a8:	0052      	lsls	r2, r2, #1
200013aa:	2103      	movs	r1, #3
200013ac:	4091      	lsls	r1, r2
200013ae:	000a      	movs	r2, r1
200013b0:	43d2      	mvns	r2, r2
200013b2:	401a      	ands	r2, r3
200013b4:	687b      	ldr	r3, [r7, #4]
200013b6:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
200013b8:	687b      	ldr	r3, [r7, #4]
200013ba:	689a      	ldr	r2, [r3, #8]
200013bc:	683b      	ldr	r3, [r7, #0]
200013be:	795b      	ldrb	r3, [r3, #5]
200013c0:	0019      	movs	r1, r3
200013c2:	697b      	ldr	r3, [r7, #20]
200013c4:	005b      	lsls	r3, r3, #1
200013c6:	4099      	lsls	r1, r3
200013c8:	000b      	movs	r3, r1
200013ca:	431a      	orrs	r2, r3
200013cc:	687b      	ldr	r3, [r7, #4]
200013ce:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
200013d0:	687b      	ldr	r3, [r7, #4]
200013d2:	685b      	ldr	r3, [r3, #4]
200013d4:	697a      	ldr	r2, [r7, #20]
200013d6:	b292      	uxth	r2, r2
200013d8:	0011      	movs	r1, r2
200013da:	2201      	movs	r2, #1
200013dc:	408a      	lsls	r2, r1
200013de:	43d2      	mvns	r2, r2
200013e0:	401a      	ands	r2, r3
200013e2:	687b      	ldr	r3, [r7, #4]
200013e4:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
200013e6:	687b      	ldr	r3, [r7, #4]
200013e8:	685b      	ldr	r3, [r3, #4]
200013ea:	683a      	ldr	r2, [r7, #0]
200013ec:	7992      	ldrb	r2, [r2, #6]
200013ee:	0011      	movs	r1, r2
200013f0:	697a      	ldr	r2, [r7, #20]
200013f2:	b292      	uxth	r2, r2
200013f4:	4091      	lsls	r1, r2
200013f6:	000a      	movs	r2, r1
200013f8:	b292      	uxth	r2, r2
200013fa:	431a      	orrs	r2, r3
200013fc:	687b      	ldr	r3, [r7, #4]
200013fe:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
20001400:	687b      	ldr	r3, [r7, #4]
20001402:	68db      	ldr	r3, [r3, #12]
20001404:	697a      	ldr	r2, [r7, #20]
20001406:	b292      	uxth	r2, r2
20001408:	0052      	lsls	r2, r2, #1
2000140a:	2103      	movs	r1, #3
2000140c:	4091      	lsls	r1, r2
2000140e:	000a      	movs	r2, r1
20001410:	43d2      	mvns	r2, r2
20001412:	401a      	ands	r2, r3
20001414:	687b      	ldr	r3, [r7, #4]
20001416:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
20001418:	687b      	ldr	r3, [r7, #4]
2000141a:	68da      	ldr	r2, [r3, #12]
2000141c:	683b      	ldr	r3, [r7, #0]
2000141e:	79db      	ldrb	r3, [r3, #7]
20001420:	0019      	movs	r1, r3
20001422:	697b      	ldr	r3, [r7, #20]
20001424:	005b      	lsls	r3, r3, #1
20001426:	4099      	lsls	r1, r3
20001428:	000b      	movs	r3, r1
2000142a:	431a      	orrs	r2, r3
2000142c:	687b      	ldr	r3, [r7, #4]
2000142e:	60da      	str	r2, [r3, #12]
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
20001430:	697b      	ldr	r3, [r7, #20]
20001432:	3301      	adds	r3, #1
20001434:	617b      	str	r3, [r7, #20]
20001436:	697b      	ldr	r3, [r7, #20]
20001438:	2b0f      	cmp	r3, #15
2000143a:	d985      	bls.n	20001348 <GPIO_Init+0x1c>
    }
  }
}
2000143c:	46c0      	nop			; (mov r8, r8)
2000143e:	46bd      	mov	sp, r7
20001440:	b006      	add	sp, #24
20001442:	bd80      	pop	{r7, pc}

20001444 <GPIO_StructInit>:
  * @brief  Fills each GPIO_InitStruct member with its default value.
  * @param  GPIO_InitStruct : pointer to a GPIO_InitTypeDef structure which will be initialized.
  * @retval None
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
20001444:	b580      	push	{r7, lr}
20001446:	b082      	sub	sp, #8
20001448:	af00      	add	r7, sp, #0
2000144a:	6078      	str	r0, [r7, #4]
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
2000144c:	687b      	ldr	r3, [r7, #4]
2000144e:	4a09      	ldr	r2, [pc, #36]	; (20001474 <GPIO_StructInit+0x30>)
20001450:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN;
20001452:	687b      	ldr	r3, [r7, #4]
20001454:	2200      	movs	r2, #0
20001456:	711a      	strb	r2, [r3, #4]
  GPIO_InitStruct->GPIO_Speed = GPIO_Speed_2MHz;
20001458:	687b      	ldr	r3, [r7, #4]
2000145a:	2200      	movs	r2, #0
2000145c:	715a      	strb	r2, [r3, #5]
  GPIO_InitStruct->GPIO_OType = GPIO_OType_PP;
2000145e:	687b      	ldr	r3, [r7, #4]
20001460:	2200      	movs	r2, #0
20001462:	719a      	strb	r2, [r3, #6]
  GPIO_InitStruct->GPIO_PuPd = GPIO_PuPd_NOPULL;
20001464:	687b      	ldr	r3, [r7, #4]
20001466:	2200      	movs	r2, #0
20001468:	71da      	strb	r2, [r3, #7]
}
2000146a:	46c0      	nop			; (mov r8, r8)
2000146c:	46bd      	mov	sp, r7
2000146e:	b002      	add	sp, #8
20001470:	bd80      	pop	{r7, pc}
20001472:	46c0      	nop			; (mov r8, r8)
20001474:	0000ffff 	strdeq	pc, [r0], -pc	; <UNPREDICTABLE>

20001478 <GPIO_PinLockConfig>:
  * @param  GPIO_Pin: specifies the port bit to be locked.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_PinLockConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
20001478:	b580      	push	{r7, lr}
2000147a:	b084      	sub	sp, #16
2000147c:	af00      	add	r7, sp, #0
2000147e:	6078      	str	r0, [r7, #4]
20001480:	000a      	movs	r2, r1
20001482:	1cbb      	adds	r3, r7, #2
20001484:	801a      	strh	r2, [r3, #0]
  __IO uint32_t tmp = 0x00010000;
20001486:	2380      	movs	r3, #128	; 0x80
20001488:	025b      	lsls	r3, r3, #9
2000148a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  tmp |= GPIO_Pin;
2000148c:	1cbb      	adds	r3, r7, #2
2000148e:	881a      	ldrh	r2, [r3, #0]
20001490:	68fb      	ldr	r3, [r7, #12]
20001492:	4313      	orrs	r3, r2
20001494:	60fb      	str	r3, [r7, #12]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
20001496:	68fa      	ldr	r2, [r7, #12]
20001498:	687b      	ldr	r3, [r7, #4]
2000149a:	61da      	str	r2, [r3, #28]
  /* Reset LCKK bit */
  GPIOx->LCKR =  GPIO_Pin;
2000149c:	1cbb      	adds	r3, r7, #2
2000149e:	881a      	ldrh	r2, [r3, #0]
200014a0:	687b      	ldr	r3, [r7, #4]
200014a2:	61da      	str	r2, [r3, #28]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
200014a4:	68fa      	ldr	r2, [r7, #12]
200014a6:	687b      	ldr	r3, [r7, #4]
200014a8:	61da      	str	r2, [r3, #28]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
200014aa:	687b      	ldr	r3, [r7, #4]
200014ac:	69db      	ldr	r3, [r3, #28]
200014ae:	60fb      	str	r3, [r7, #12]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
200014b0:	687b      	ldr	r3, [r7, #4]
200014b2:	69db      	ldr	r3, [r3, #28]
200014b4:	60fb      	str	r3, [r7, #12]
}
200014b6:	46c0      	nop			; (mov r8, r8)
200014b8:	46bd      	mov	sp, r7
200014ba:	b004      	add	sp, #16
200014bc:	bd80      	pop	{r7, pc}

200014be <GPIO_ReadInputDataBit>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
uint8_t GPIO_ReadInputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
200014be:	b580      	push	{r7, lr}
200014c0:	b084      	sub	sp, #16
200014c2:	af00      	add	r7, sp, #0
200014c4:	6078      	str	r0, [r7, #4]
200014c6:	000a      	movs	r2, r1
200014c8:	1cbb      	adds	r3, r7, #2
200014ca:	801a      	strh	r2, [r3, #0]
  uint8_t bitstatus = 0x00;
200014cc:	230f      	movs	r3, #15
200014ce:	18fb      	adds	r3, r7, r3
200014d0:	2200      	movs	r2, #0
200014d2:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
200014d4:	687b      	ldr	r3, [r7, #4]
200014d6:	691b      	ldr	r3, [r3, #16]
200014d8:	1cba      	adds	r2, r7, #2
200014da:	8812      	ldrh	r2, [r2, #0]
200014dc:	4013      	ands	r3, r2
200014de:	d004      	beq.n	200014ea <GPIO_ReadInputDataBit+0x2c>
  {
    bitstatus = (uint8_t)Bit_SET;
200014e0:	230f      	movs	r3, #15
200014e2:	18fb      	adds	r3, r7, r3
200014e4:	2201      	movs	r2, #1
200014e6:	701a      	strb	r2, [r3, #0]
200014e8:	e003      	b.n	200014f2 <GPIO_ReadInputDataBit+0x34>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
200014ea:	230f      	movs	r3, #15
200014ec:	18fb      	adds	r3, r7, r3
200014ee:	2200      	movs	r2, #0
200014f0:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
200014f2:	230f      	movs	r3, #15
200014f4:	18fb      	adds	r3, r7, r3
200014f6:	781b      	ldrb	r3, [r3, #0]
}
200014f8:	0018      	movs	r0, r3
200014fa:	46bd      	mov	sp, r7
200014fc:	b004      	add	sp, #16
200014fe:	bd80      	pop	{r7, pc}

20001500 <GPIO_ReadInputData>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F42xxx/43xxx devices.
  *                      x can be (A, B, C, D and H) to select the GPIO peripheral for STM32F401xx devices. 
  * @retval GPIO input data port value.
  */
uint16_t GPIO_ReadInputData(GPIO_TypeDef* GPIOx)
{
20001500:	b580      	push	{r7, lr}
20001502:	b082      	sub	sp, #8
20001504:	af00      	add	r7, sp, #0
20001506:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  return ((uint16_t)GPIOx->IDR);
20001508:	687b      	ldr	r3, [r7, #4]
2000150a:	691b      	ldr	r3, [r3, #16]
2000150c:	b29b      	uxth	r3, r3
}
2000150e:	0018      	movs	r0, r3
20001510:	46bd      	mov	sp, r7
20001512:	b002      	add	sp, #8
20001514:	bd80      	pop	{r7, pc}

20001516 <GPIO_ReadOutputDataBit>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *          This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The output port pin value.
  */
uint8_t GPIO_ReadOutputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
20001516:	b580      	push	{r7, lr}
20001518:	b084      	sub	sp, #16
2000151a:	af00      	add	r7, sp, #0
2000151c:	6078      	str	r0, [r7, #4]
2000151e:	000a      	movs	r2, r1
20001520:	1cbb      	adds	r3, r7, #2
20001522:	801a      	strh	r2, [r3, #0]
  uint8_t bitstatus = 0x00;
20001524:	230f      	movs	r3, #15
20001526:	18fb      	adds	r3, r7, r3
20001528:	2200      	movs	r2, #0
2000152a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if (((GPIOx->ODR) & GPIO_Pin) != (uint32_t)Bit_RESET)
2000152c:	687b      	ldr	r3, [r7, #4]
2000152e:	695b      	ldr	r3, [r3, #20]
20001530:	1cba      	adds	r2, r7, #2
20001532:	8812      	ldrh	r2, [r2, #0]
20001534:	4013      	ands	r3, r2
20001536:	d004      	beq.n	20001542 <GPIO_ReadOutputDataBit+0x2c>
  {
    bitstatus = (uint8_t)Bit_SET;
20001538:	230f      	movs	r3, #15
2000153a:	18fb      	adds	r3, r7, r3
2000153c:	2201      	movs	r2, #1
2000153e:	701a      	strb	r2, [r3, #0]
20001540:	e003      	b.n	2000154a <GPIO_ReadOutputDataBit+0x34>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
20001542:	230f      	movs	r3, #15
20001544:	18fb      	adds	r3, r7, r3
20001546:	2200      	movs	r2, #0
20001548:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
2000154a:	230f      	movs	r3, #15
2000154c:	18fb      	adds	r3, r7, r3
2000154e:	781b      	ldrb	r3, [r3, #0]
}
20001550:	0018      	movs	r0, r3
20001552:	46bd      	mov	sp, r7
20001554:	b004      	add	sp, #16
20001556:	bd80      	pop	{r7, pc}

20001558 <GPIO_ReadOutputData>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F42xxx/43xxx devices.
  *                      x can be (A, B, C, D and H) to select the GPIO peripheral for STM32F401xx devices. 
  * @retval GPIO output data port value.
  */
uint16_t GPIO_ReadOutputData(GPIO_TypeDef* GPIOx)
{
20001558:	b580      	push	{r7, lr}
2000155a:	b082      	sub	sp, #8
2000155c:	af00      	add	r7, sp, #0
2000155e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  return ((uint16_t)GPIOx->ODR);
20001560:	687b      	ldr	r3, [r7, #4]
20001562:	695b      	ldr	r3, [r3, #20]
20001564:	b29b      	uxth	r3, r3
}
20001566:	0018      	movs	r0, r3
20001568:	46bd      	mov	sp, r7
2000156a:	b002      	add	sp, #8
2000156c:	bd80      	pop	{r7, pc}

2000156e <GPIO_SetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
2000156e:	b580      	push	{r7, lr}
20001570:	b082      	sub	sp, #8
20001572:	af00      	add	r7, sp, #0
20001574:	6078      	str	r0, [r7, #4]
20001576:	000a      	movs	r2, r1
20001578:	1cbb      	adds	r3, r7, #2
2000157a:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRL = GPIO_Pin;
2000157c:	687b      	ldr	r3, [r7, #4]
2000157e:	1cba      	adds	r2, r7, #2
20001580:	8812      	ldrh	r2, [r2, #0]
20001582:	831a      	strh	r2, [r3, #24]
}
20001584:	46c0      	nop			; (mov r8, r8)
20001586:	46bd      	mov	sp, r7
20001588:	b002      	add	sp, #8
2000158a:	bd80      	pop	{r7, pc}

2000158c <GPIO_ResetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
2000158c:	b580      	push	{r7, lr}
2000158e:	b082      	sub	sp, #8
20001590:	af00      	add	r7, sp, #0
20001592:	6078      	str	r0, [r7, #4]
20001594:	000a      	movs	r2, r1
20001596:	1cbb      	adds	r3, r7, #2
20001598:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRH = GPIO_Pin;
2000159a:	687b      	ldr	r3, [r7, #4]
2000159c:	1cba      	adds	r2, r7, #2
2000159e:	8812      	ldrh	r2, [r2, #0]
200015a0:	835a      	strh	r2, [r3, #26]
}
200015a2:	46c0      	nop			; (mov r8, r8)
200015a4:	46bd      	mov	sp, r7
200015a6:	b002      	add	sp, #8
200015a8:	bd80      	pop	{r7, pc}

200015aa <GPIO_WriteBit>:
  *            @arg Bit_RESET: to clear the port pin
  *            @arg Bit_SET: to set the port pin
  * @retval None
  */
void GPIO_WriteBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, BitAction BitVal)
{
200015aa:	b580      	push	{r7, lr}
200015ac:	b082      	sub	sp, #8
200015ae:	af00      	add	r7, sp, #0
200015b0:	6078      	str	r0, [r7, #4]
200015b2:	0008      	movs	r0, r1
200015b4:	0011      	movs	r1, r2
200015b6:	1cbb      	adds	r3, r7, #2
200015b8:	1c02      	adds	r2, r0, #0
200015ba:	801a      	strh	r2, [r3, #0]
200015bc:	1c7b      	adds	r3, r7, #1
200015be:	1c0a      	adds	r2, r1, #0
200015c0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal));

  if (BitVal != Bit_RESET)
200015c2:	1c7b      	adds	r3, r7, #1
200015c4:	781b      	ldrb	r3, [r3, #0]
200015c6:	2b00      	cmp	r3, #0
200015c8:	d004      	beq.n	200015d4 <GPIO_WriteBit+0x2a>
  {
    GPIOx->BSRRL = GPIO_Pin;
200015ca:	687b      	ldr	r3, [r7, #4]
200015cc:	1cba      	adds	r2, r7, #2
200015ce:	8812      	ldrh	r2, [r2, #0]
200015d0:	831a      	strh	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRRH = GPIO_Pin ;
  }
}
200015d2:	e003      	b.n	200015dc <GPIO_WriteBit+0x32>
    GPIOx->BSRRH = GPIO_Pin ;
200015d4:	687b      	ldr	r3, [r7, #4]
200015d6:	1cba      	adds	r2, r7, #2
200015d8:	8812      	ldrh	r2, [r2, #0]
200015da:	835a      	strh	r2, [r3, #26]
}
200015dc:	46c0      	nop			; (mov r8, r8)
200015de:	46bd      	mov	sp, r7
200015e0:	b002      	add	sp, #8
200015e2:	bd80      	pop	{r7, pc}

200015e4 <GPIO_Write>:
  *                      x can be (A, B, C, D and H) to select the GPIO peripheral for STM32F401xx devices. 
  * @param  PortVal: specifies the value to be written to the port output data register.
  * @retval None
  */
void GPIO_Write(GPIO_TypeDef* GPIOx, uint16_t PortVal)
{
200015e4:	b580      	push	{r7, lr}
200015e6:	b082      	sub	sp, #8
200015e8:	af00      	add	r7, sp, #0
200015ea:	6078      	str	r0, [r7, #4]
200015ec:	000a      	movs	r2, r1
200015ee:	1cbb      	adds	r3, r7, #2
200015f0:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR = PortVal;
200015f2:	1cbb      	adds	r3, r7, #2
200015f4:	881a      	ldrh	r2, [r3, #0]
200015f6:	687b      	ldr	r3, [r7, #4]
200015f8:	615a      	str	r2, [r3, #20]
}
200015fa:	46c0      	nop			; (mov r8, r8)
200015fc:	46bd      	mov	sp, r7
200015fe:	b002      	add	sp, #8
20001600:	bd80      	pop	{r7, pc}

20001602 <GPIO_ToggleBits>:
  *                      x can be (A, B, C, D and H) to select the GPIO peripheral for STM32F401xx devices. 
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void GPIO_ToggleBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
20001602:	b580      	push	{r7, lr}
20001604:	b082      	sub	sp, #8
20001606:	af00      	add	r7, sp, #0
20001608:	6078      	str	r0, [r7, #4]
2000160a:	000a      	movs	r2, r1
2000160c:	1cbb      	adds	r3, r7, #2
2000160e:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR ^= GPIO_Pin;
20001610:	687b      	ldr	r3, [r7, #4]
20001612:	695a      	ldr	r2, [r3, #20]
20001614:	1cbb      	adds	r3, r7, #2
20001616:	881b      	ldrh	r3, [r3, #0]
20001618:	405a      	eors	r2, r3
2000161a:	687b      	ldr	r3, [r7, #4]
2000161c:	615a      	str	r2, [r3, #20]
}
2000161e:	46c0      	nop			; (mov r8, r8)
20001620:	46bd      	mov	sp, r7
20001622:	b002      	add	sp, #8
20001624:	bd80      	pop	{r7, pc}

20001626 <GPIO_PinAFConfig>:
  *            @arg GPIO_AF_LTDC: Connect LTDC pins to AF14 for STM32F429xx/439xx devices. 
  *            @arg GPIO_AF_EVENTOUT: Connect EVENTOUT pins to AF15
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
20001626:	b580      	push	{r7, lr}
20001628:	b084      	sub	sp, #16
2000162a:	af00      	add	r7, sp, #0
2000162c:	6078      	str	r0, [r7, #4]
2000162e:	0008      	movs	r0, r1
20001630:	0011      	movs	r1, r2
20001632:	1cbb      	adds	r3, r7, #2
20001634:	1c02      	adds	r2, r0, #0
20001636:	801a      	strh	r2, [r3, #0]
20001638:	1c7b      	adds	r3, r7, #1
2000163a:	1c0a      	adds	r2, r1, #0
2000163c:	701a      	strb	r2, [r3, #0]
  uint32_t temp = 0x00;
2000163e:	2300      	movs	r3, #0
20001640:	60fb      	str	r3, [r7, #12]
  uint32_t temp_2 = 0x00;
20001642:	2300      	movs	r3, #0
20001644:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
20001646:	1c7b      	adds	r3, r7, #1
20001648:	781a      	ldrb	r2, [r3, #0]
2000164a:	1cbb      	adds	r3, r7, #2
2000164c:	881b      	ldrh	r3, [r3, #0]
2000164e:	2107      	movs	r1, #7
20001650:	400b      	ands	r3, r1
20001652:	009b      	lsls	r3, r3, #2
20001654:	409a      	lsls	r2, r3
20001656:	0013      	movs	r3, r2
20001658:	60fb      	str	r3, [r7, #12]
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
2000165a:	1cbb      	adds	r3, r7, #2
2000165c:	881b      	ldrh	r3, [r3, #0]
2000165e:	08db      	lsrs	r3, r3, #3
20001660:	b29b      	uxth	r3, r3
20001662:	001a      	movs	r2, r3
20001664:	687b      	ldr	r3, [r7, #4]
20001666:	3208      	adds	r2, #8
20001668:	0092      	lsls	r2, r2, #2
2000166a:	58d3      	ldr	r3, [r2, r3]
2000166c:	1cba      	adds	r2, r7, #2
2000166e:	8812      	ldrh	r2, [r2, #0]
20001670:	2107      	movs	r1, #7
20001672:	400a      	ands	r2, r1
20001674:	0092      	lsls	r2, r2, #2
20001676:	210f      	movs	r1, #15
20001678:	4091      	lsls	r1, r2
2000167a:	000a      	movs	r2, r1
2000167c:	43d2      	mvns	r2, r2
2000167e:	1cb9      	adds	r1, r7, #2
20001680:	8809      	ldrh	r1, [r1, #0]
20001682:	08c9      	lsrs	r1, r1, #3
20001684:	b289      	uxth	r1, r1
20001686:	0008      	movs	r0, r1
20001688:	401a      	ands	r2, r3
2000168a:	0011      	movs	r1, r2
2000168c:	687b      	ldr	r3, [r7, #4]
2000168e:	0002      	movs	r2, r0
20001690:	3208      	adds	r2, #8
20001692:	0092      	lsls	r2, r2, #2
20001694:	50d1      	str	r1, [r2, r3]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
20001696:	1cbb      	adds	r3, r7, #2
20001698:	881b      	ldrh	r3, [r3, #0]
2000169a:	08db      	lsrs	r3, r3, #3
2000169c:	b29b      	uxth	r3, r3
2000169e:	001a      	movs	r2, r3
200016a0:	687b      	ldr	r3, [r7, #4]
200016a2:	3208      	adds	r2, #8
200016a4:	0092      	lsls	r2, r2, #2
200016a6:	58d3      	ldr	r3, [r2, r3]
200016a8:	68fa      	ldr	r2, [r7, #12]
200016aa:	4313      	orrs	r3, r2
200016ac:	60bb      	str	r3, [r7, #8]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
200016ae:	1cbb      	adds	r3, r7, #2
200016b0:	881b      	ldrh	r3, [r3, #0]
200016b2:	08db      	lsrs	r3, r3, #3
200016b4:	b29b      	uxth	r3, r3
200016b6:	001a      	movs	r2, r3
200016b8:	687b      	ldr	r3, [r7, #4]
200016ba:	3208      	adds	r2, #8
200016bc:	0092      	lsls	r2, r2, #2
200016be:	68b9      	ldr	r1, [r7, #8]
200016c0:	50d1      	str	r1, [r2, r3]
}
200016c2:	46c0      	nop			; (mov r8, r8)
200016c4:	46bd      	mov	sp, r7
200016c6:	b004      	add	sp, #16
200016c8:	bd80      	pop	{r7, pc}
200016ca:	46c0      	nop			; (mov r8, r8)

200016cc <NVIC_PriorityGroupConfig>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void NVIC_PriorityGroupConfig(uint32_t NVIC_PriorityGroup)
{
200016cc:	b580      	push	{r7, lr}
200016ce:	b082      	sub	sp, #8
200016d0:	af00      	add	r7, sp, #0
200016d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
200016d4:	4b04      	ldr	r3, [pc, #16]	; (200016e8 <NVIC_PriorityGroupConfig+0x1c>)
200016d6:	687a      	ldr	r2, [r7, #4]
200016d8:	4904      	ldr	r1, [pc, #16]	; (200016ec <NVIC_PriorityGroupConfig+0x20>)
200016da:	430a      	orrs	r2, r1
200016dc:	60da      	str	r2, [r3, #12]
}
200016de:	46c0      	nop			; (mov r8, r8)
200016e0:	46bd      	mov	sp, r7
200016e2:	b002      	add	sp, #8
200016e4:	bd80      	pop	{r7, pc}
200016e6:	46c0      	nop			; (mov r8, r8)
200016e8:	e000ed00 	and	lr, r0, r0, lsl #26
200016ec:	05fa0000 	ldrbeq	r0, [sl, #0]!

200016f0 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
200016f0:	b5b0      	push	{r4, r5, r7, lr}
200016f2:	b084      	sub	sp, #16
200016f4:	af00      	add	r7, sp, #0
200016f6:	6078      	str	r0, [r7, #4]
  uint8_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
200016f8:	230f      	movs	r3, #15
200016fa:	18fb      	adds	r3, r7, r3
200016fc:	2200      	movs	r2, #0
200016fe:	701a      	strb	r2, [r3, #0]
20001700:	230e      	movs	r3, #14
20001702:	18fb      	adds	r3, r7, r3
20001704:	2200      	movs	r2, #0
20001706:	701a      	strb	r2, [r3, #0]
20001708:	230d      	movs	r3, #13
2000170a:	18fb      	adds	r3, r7, r3
2000170c:	220f      	movs	r2, #15
2000170e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
20001710:	687b      	ldr	r3, [r7, #4]
20001712:	78db      	ldrb	r3, [r3, #3]
20001714:	2b00      	cmp	r3, #0
20001716:	d04d      	beq.n	200017b4 <NVIC_Init+0xc4>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
20001718:	4b31      	ldr	r3, [pc, #196]	; (200017e0 <NVIC_Init+0xf0>)
2000171a:	68db      	ldr	r3, [r3, #12]
2000171c:	43db      	mvns	r3, r3
2000171e:	0a1b      	lsrs	r3, r3, #8
20001720:	b2da      	uxtb	r2, r3
20001722:	200f      	movs	r0, #15
20001724:	183b      	adds	r3, r7, r0
20001726:	2107      	movs	r1, #7
20001728:	400a      	ands	r2, r1
2000172a:	701a      	strb	r2, [r3, #0]
    tmppre = (0x4 - tmppriority);
2000172c:	250e      	movs	r5, #14
2000172e:	197b      	adds	r3, r7, r5
20001730:	183a      	adds	r2, r7, r0
20001732:	7812      	ldrb	r2, [r2, #0]
20001734:	2104      	movs	r1, #4
20001736:	1a8a      	subs	r2, r1, r2
20001738:	701a      	strb	r2, [r3, #0]
    tmpsub = tmpsub >> tmppriority;
2000173a:	240d      	movs	r4, #13
2000173c:	193b      	adds	r3, r7, r4
2000173e:	781a      	ldrb	r2, [r3, #0]
20001740:	0001      	movs	r1, r0
20001742:	187b      	adds	r3, r7, r1
20001744:	781b      	ldrb	r3, [r3, #0]
20001746:	411a      	asrs	r2, r3
20001748:	193b      	adds	r3, r7, r4
2000174a:	701a      	strb	r2, [r3, #0]

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
2000174c:	687b      	ldr	r3, [r7, #4]
2000174e:	785b      	ldrb	r3, [r3, #1]
20001750:	001a      	movs	r2, r3
20001752:	197b      	adds	r3, r7, r5
20001754:	781b      	ldrb	r3, [r3, #0]
20001756:	409a      	lsls	r2, r3
20001758:	0008      	movs	r0, r1
2000175a:	187b      	adds	r3, r7, r1
2000175c:	701a      	strb	r2, [r3, #0]
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
2000175e:	687b      	ldr	r3, [r7, #4]
20001760:	789b      	ldrb	r3, [r3, #2]
20001762:	193a      	adds	r2, r7, r4
20001764:	7812      	ldrb	r2, [r2, #0]
20001766:	4013      	ands	r3, r2
20001768:	b2d9      	uxtb	r1, r3
2000176a:	183b      	adds	r3, r7, r0
2000176c:	183a      	adds	r2, r7, r0
2000176e:	7812      	ldrb	r2, [r2, #0]
20001770:	430a      	orrs	r2, r1
20001772:	701a      	strb	r2, [r3, #0]
        
    tmppriority = tmppriority << 0x04;
20001774:	183b      	adds	r3, r7, r0
20001776:	183a      	adds	r2, r7, r0
20001778:	7812      	ldrb	r2, [r2, #0]
2000177a:	0112      	lsls	r2, r2, #4
2000177c:	701a      	strb	r2, [r3, #0]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
2000177e:	4a19      	ldr	r2, [pc, #100]	; (200017e4 <NVIC_Init+0xf4>)
20001780:	687b      	ldr	r3, [r7, #4]
20001782:	781b      	ldrb	r3, [r3, #0]
20001784:	0019      	movs	r1, r3
20001786:	23c0      	movs	r3, #192	; 0xc0
20001788:	009b      	lsls	r3, r3, #2
2000178a:	1852      	adds	r2, r2, r1
2000178c:	18d3      	adds	r3, r2, r3
2000178e:	183a      	adds	r2, r7, r0
20001790:	7812      	ldrb	r2, [r2, #0]
20001792:	701a      	strb	r2, [r3, #0]
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
20001794:	687b      	ldr	r3, [r7, #4]
20001796:	781b      	ldrb	r3, [r3, #0]
20001798:	001a      	movs	r2, r3
2000179a:	231f      	movs	r3, #31
2000179c:	4013      	ands	r3, r2
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
2000179e:	4911      	ldr	r1, [pc, #68]	; (200017e4 <NVIC_Init+0xf4>)
200017a0:	687a      	ldr	r2, [r7, #4]
200017a2:	7812      	ldrb	r2, [r2, #0]
200017a4:	0952      	lsrs	r2, r2, #5
200017a6:	b2d2      	uxtb	r2, r2
200017a8:	0010      	movs	r0, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
200017aa:	2201      	movs	r2, #1
200017ac:	409a      	lsls	r2, r3
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
200017ae:	0083      	lsls	r3, r0, #2
200017b0:	505a      	str	r2, [r3, r1]
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
200017b2:	e010      	b.n	200017d6 <NVIC_Init+0xe6>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
200017b4:	687b      	ldr	r3, [r7, #4]
200017b6:	781b      	ldrb	r3, [r3, #0]
200017b8:	001a      	movs	r2, r3
200017ba:	231f      	movs	r3, #31
200017bc:	4013      	ands	r3, r2
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
200017be:	4909      	ldr	r1, [pc, #36]	; (200017e4 <NVIC_Init+0xf4>)
200017c0:	687a      	ldr	r2, [r7, #4]
200017c2:	7812      	ldrb	r2, [r2, #0]
200017c4:	0952      	lsrs	r2, r2, #5
200017c6:	b2d2      	uxtb	r2, r2
200017c8:	0010      	movs	r0, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
200017ca:	2201      	movs	r2, #1
200017cc:	409a      	lsls	r2, r3
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
200017ce:	0003      	movs	r3, r0
200017d0:	3320      	adds	r3, #32
200017d2:	009b      	lsls	r3, r3, #2
200017d4:	505a      	str	r2, [r3, r1]
}
200017d6:	46c0      	nop			; (mov r8, r8)
200017d8:	46bd      	mov	sp, r7
200017da:	b004      	add	sp, #16
200017dc:	bdb0      	pop	{r4, r5, r7, pc}
200017de:	46c0      	nop			; (mov r8, r8)
200017e0:	e000ed00 	and	lr, r0, r0, lsl #26
200017e4:	e000e100 	and	lr, r0, r0, lsl #2

200017e8 <NVIC_SetVectorTable>:
  *     @arg NVIC_VectTab_FLASH: Vector Table in internal FLASH.
  * @param  Offset: Vector Table base offset field. This value must be a multiple of 0x200.
  * @retval None
  */
void NVIC_SetVectorTable(uint32_t NVIC_VectTab, uint32_t Offset)
{ 
200017e8:	b580      	push	{r7, lr}
200017ea:	b082      	sub	sp, #8
200017ec:	af00      	add	r7, sp, #0
200017ee:	6078      	str	r0, [r7, #4]
200017f0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_VECTTAB(NVIC_VectTab));
  assert_param(IS_NVIC_OFFSET(Offset));  
   
  SCB->VTOR = NVIC_VectTab | (Offset & (uint32_t)0x1FFFFF80);
200017f2:	683b      	ldr	r3, [r7, #0]
200017f4:	4a05      	ldr	r2, [pc, #20]	; (2000180c <NVIC_SetVectorTable+0x24>)
200017f6:	4013      	ands	r3, r2
200017f8:	0019      	movs	r1, r3
200017fa:	4b05      	ldr	r3, [pc, #20]	; (20001810 <NVIC_SetVectorTable+0x28>)
200017fc:	687a      	ldr	r2, [r7, #4]
200017fe:	430a      	orrs	r2, r1
20001800:	609a      	str	r2, [r3, #8]
}
20001802:	46c0      	nop			; (mov r8, r8)
20001804:	46bd      	mov	sp, r7
20001806:	b002      	add	sp, #8
20001808:	bd80      	pop	{r7, pc}
2000180a:	46c0      	nop			; (mov r8, r8)
2000180c:	1fffff80 	svcne	0x00ffff80
20001810:	e000ed00 	and	lr, r0, r0, lsl #26

20001814 <NVIC_SystemLPConfig>:
  *     @arg NVIC_LP_SLEEPONEXIT: Low Power Sleep on Exit.
  * @param  NewState: new state of LP condition. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void NVIC_SystemLPConfig(uint8_t LowPowerMode, FunctionalState NewState)
{
20001814:	b580      	push	{r7, lr}
20001816:	b082      	sub	sp, #8
20001818:	af00      	add	r7, sp, #0
2000181a:	0002      	movs	r2, r0
2000181c:	1dfb      	adds	r3, r7, #7
2000181e:	701a      	strb	r2, [r3, #0]
20001820:	1dbb      	adds	r3, r7, #6
20001822:	1c0a      	adds	r2, r1, #0
20001824:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_LP(LowPowerMode));
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  if (NewState != DISABLE)
20001826:	1dbb      	adds	r3, r7, #6
20001828:	781b      	ldrb	r3, [r3, #0]
2000182a:	2b00      	cmp	r3, #0
2000182c:	d007      	beq.n	2000183e <NVIC_SystemLPConfig+0x2a>
  {
    SCB->SCR |= LowPowerMode;
2000182e:	4b0a      	ldr	r3, [pc, #40]	; (20001858 <NVIC_SystemLPConfig+0x44>)
20001830:	6919      	ldr	r1, [r3, #16]
20001832:	1dfb      	adds	r3, r7, #7
20001834:	781a      	ldrb	r2, [r3, #0]
20001836:	4b08      	ldr	r3, [pc, #32]	; (20001858 <NVIC_SystemLPConfig+0x44>)
20001838:	430a      	orrs	r2, r1
2000183a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    SCB->SCR &= (uint32_t)(~(uint32_t)LowPowerMode);
  }
}
2000183c:	e007      	b.n	2000184e <NVIC_SystemLPConfig+0x3a>
    SCB->SCR &= (uint32_t)(~(uint32_t)LowPowerMode);
2000183e:	4b06      	ldr	r3, [pc, #24]	; (20001858 <NVIC_SystemLPConfig+0x44>)
20001840:	691a      	ldr	r2, [r3, #16]
20001842:	1dfb      	adds	r3, r7, #7
20001844:	781b      	ldrb	r3, [r3, #0]
20001846:	43d9      	mvns	r1, r3
20001848:	4b03      	ldr	r3, [pc, #12]	; (20001858 <NVIC_SystemLPConfig+0x44>)
2000184a:	400a      	ands	r2, r1
2000184c:	611a      	str	r2, [r3, #16]
}
2000184e:	46c0      	nop			; (mov r8, r8)
20001850:	46bd      	mov	sp, r7
20001852:	b002      	add	sp, #8
20001854:	bd80      	pop	{r7, pc}
20001856:	46c0      	nop			; (mov r8, r8)
20001858:	e000ed00 	and	lr, r0, r0, lsl #26

2000185c <SysTick_CLKSourceConfig>:
  *     @arg SysTick_CLKSource_HCLK_Div8: AHB clock divided by 8 selected as SysTick clock source.
  *     @arg SysTick_CLKSource_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void SysTick_CLKSourceConfig(uint32_t SysTick_CLKSource)
{
2000185c:	b580      	push	{r7, lr}
2000185e:	b082      	sub	sp, #8
20001860:	af00      	add	r7, sp, #0
20001862:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(SysTick_CLKSource));
  if (SysTick_CLKSource == SysTick_CLKSource_HCLK)
20001864:	687b      	ldr	r3, [r7, #4]
20001866:	2b04      	cmp	r3, #4
20001868:	d106      	bne.n	20001878 <SysTick_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SysTick_CLKSource_HCLK;
2000186a:	4b08      	ldr	r3, [pc, #32]	; (2000188c <SysTick_CLKSourceConfig+0x30>)
2000186c:	681a      	ldr	r2, [r3, #0]
2000186e:	4b07      	ldr	r3, [pc, #28]	; (2000188c <SysTick_CLKSourceConfig+0x30>)
20001870:	2104      	movs	r1, #4
20001872:	430a      	orrs	r2, r1
20001874:	601a      	str	r2, [r3, #0]
  }
  else
  {
    SysTick->CTRL &= SysTick_CLKSource_HCLK_Div8;
  }
}
20001876:	e005      	b.n	20001884 <SysTick_CLKSourceConfig+0x28>
    SysTick->CTRL &= SysTick_CLKSource_HCLK_Div8;
20001878:	4b04      	ldr	r3, [pc, #16]	; (2000188c <SysTick_CLKSourceConfig+0x30>)
2000187a:	681a      	ldr	r2, [r3, #0]
2000187c:	4b03      	ldr	r3, [pc, #12]	; (2000188c <SysTick_CLKSourceConfig+0x30>)
2000187e:	2104      	movs	r1, #4
20001880:	438a      	bics	r2, r1
20001882:	601a      	str	r2, [r3, #0]
}
20001884:	46c0      	nop			; (mov r8, r8)
20001886:	46bd      	mov	sp, r7
20001888:	b002      	add	sp, #8
2000188a:	bd80      	pop	{r7, pc}
2000188c:	e000e010 	and	lr, r0, r0, lsl r0

20001890 <bufferInit>:
#include "buffer.h"

//Nollställer bufferten
void bufferInit(FIFO *buffer) {
20001890:	b580      	push	{r7, lr}
20001892:	b082      	sub	sp, #8
20001894:	af00      	add	r7, sp, #0
20001896:	6078      	str	r0, [r7, #4]
    buffer->count = 0;
20001898:	687b      	ldr	r3, [r7, #4]
2000189a:	2264      	movs	r2, #100	; 0x64
2000189c:	2100      	movs	r1, #0
2000189e:	5499      	strb	r1, [r3, r2]
    buffer->in = 0;
200018a0:	687b      	ldr	r3, [r7, #4]
200018a2:	2265      	movs	r2, #101	; 0x65
200018a4:	2100      	movs	r1, #0
200018a6:	5499      	strb	r1, [r3, r2]
    buffer->out = 0;
200018a8:	687b      	ldr	r3, [r7, #4]
200018aa:	2266      	movs	r2, #102	; 0x66
200018ac:	2100      	movs	r1, #0
200018ae:	5499      	strb	r1, [r3, r2]
}
200018b0:	46c0      	nop			; (mov r8, r8)
200018b2:	46bd      	mov	sp, r7
200018b4:	b002      	add	sp, #8
200018b6:	bd80      	pop	{r7, pc}

200018b8 <bufferPut>:

//Lägger till ett elem i buffern.
//Returnerar 1 om det lyckades, 0 annars.
uint8_t bufferPut ( FIFO *buffer, uint8_t elem) {
200018b8:	b580      	push	{r7, lr}
200018ba:	b082      	sub	sp, #8
200018bc:	af00      	add	r7, sp, #0
200018be:	6078      	str	r0, [r7, #4]
200018c0:	000a      	movs	r2, r1
200018c2:	1cfb      	adds	r3, r7, #3
200018c4:	701a      	strb	r2, [r3, #0]
    //Kollar om bufferten är full.
    if (buffer->count == BUFFERSIZE){
200018c6:	687b      	ldr	r3, [r7, #4]
200018c8:	2264      	movs	r2, #100	; 0x64
200018ca:	5c9b      	ldrb	r3, [r3, r2]
200018cc:	2b64      	cmp	r3, #100	; 0x64
200018ce:	d101      	bne.n	200018d4 <bufferPut+0x1c>
        return 0;
200018d0:	2300      	movs	r3, #0
200018d2:	e01e      	b.n	20001912 <bufferPut+0x5a>
    }

    //Lägger elem i bufferten
    buffer->buff[buffer->in++] = elem;
200018d4:	687b      	ldr	r3, [r7, #4]
200018d6:	2265      	movs	r2, #101	; 0x65
200018d8:	5c9b      	ldrb	r3, [r3, r2]
200018da:	1c5a      	adds	r2, r3, #1
200018dc:	b2d0      	uxtb	r0, r2
200018de:	687a      	ldr	r2, [r7, #4]
200018e0:	2165      	movs	r1, #101	; 0x65
200018e2:	5450      	strb	r0, [r2, r1]
200018e4:	0019      	movs	r1, r3
200018e6:	687b      	ldr	r3, [r7, #4]
200018e8:	1cfa      	adds	r2, r7, #3
200018ea:	7812      	ldrb	r2, [r2, #0]
200018ec:	545a      	strb	r2, [r3, r1]
    buffer->count++;
200018ee:	687b      	ldr	r3, [r7, #4]
200018f0:	2264      	movs	r2, #100	; 0x64
200018f2:	5c9b      	ldrb	r3, [r3, r2]
200018f4:	3301      	adds	r3, #1
200018f6:	b2d9      	uxtb	r1, r3
200018f8:	687b      	ldr	r3, [r7, #4]
200018fa:	2264      	movs	r2, #100	; 0x64
200018fc:	5499      	strb	r1, [r3, r2]

    //Justerar pekaren om vi nått slutet
    if (buffer->in == BUFFERSIZE)
200018fe:	687b      	ldr	r3, [r7, #4]
20001900:	2265      	movs	r2, #101	; 0x65
20001902:	5c9b      	ldrb	r3, [r3, r2]
20001904:	2b64      	cmp	r3, #100	; 0x64
20001906:	d103      	bne.n	20001910 <bufferPut+0x58>
        buffer->in = 0;
20001908:	687b      	ldr	r3, [r7, #4]
2000190a:	2265      	movs	r2, #101	; 0x65
2000190c:	2100      	movs	r1, #0
2000190e:	5499      	strb	r1, [r3, r2]

    return 1;
20001910:	2301      	movs	r3, #1
}
20001912:	0018      	movs	r0, r3
20001914:	46bd      	mov	sp, r7
20001916:	b002      	add	sp, #8
20001918:	bd80      	pop	{r7, pc}

2000191a <bufferGet>:

//Hämtar ett element från buffern till dest.
//Returnerar 1 om det lyckades, 0 annars.
uint8_t bufferGet ( FIFO *buffer, uint8_t *dest) {
2000191a:	b580      	push	{r7, lr}
2000191c:	b082      	sub	sp, #8
2000191e:	af00      	add	r7, sp, #0
20001920:	6078      	str	r0, [r7, #4]
20001922:	6039      	str	r1, [r7, #0]
    //Kollar om bufferten är tom
    if (!buffer->count){
20001924:	687b      	ldr	r3, [r7, #4]
20001926:	2264      	movs	r2, #100	; 0x64
20001928:	5c9b      	ldrb	r3, [r3, r2]
2000192a:	2b00      	cmp	r3, #0
2000192c:	d101      	bne.n	20001932 <bufferGet+0x18>
        return 0;
2000192e:	2300      	movs	r3, #0
20001930:	e01e      	b.n	20001970 <bufferGet+0x56>
    }

    //Hämtar element ur buffern till dest
    *dest = buffer->buff[buffer->out++];
20001932:	687b      	ldr	r3, [r7, #4]
20001934:	2266      	movs	r2, #102	; 0x66
20001936:	5c9b      	ldrb	r3, [r3, r2]
20001938:	1c5a      	adds	r2, r3, #1
2000193a:	b2d0      	uxtb	r0, r2
2000193c:	687a      	ldr	r2, [r7, #4]
2000193e:	2166      	movs	r1, #102	; 0x66
20001940:	5450      	strb	r0, [r2, r1]
20001942:	001a      	movs	r2, r3
20001944:	687b      	ldr	r3, [r7, #4]
20001946:	5c9a      	ldrb	r2, [r3, r2]
20001948:	683b      	ldr	r3, [r7, #0]
2000194a:	701a      	strb	r2, [r3, #0]
    buffer->count--;
2000194c:	687b      	ldr	r3, [r7, #4]
2000194e:	2264      	movs	r2, #100	; 0x64
20001950:	5c9b      	ldrb	r3, [r3, r2]
20001952:	3b01      	subs	r3, #1
20001954:	b2d9      	uxtb	r1, r3
20001956:	687b      	ldr	r3, [r7, #4]
20001958:	2264      	movs	r2, #100	; 0x64
2000195a:	5499      	strb	r1, [r3, r2]

    //Justerar pekaren om vi nått slutet
    if (buffer->out == BUFFERSIZE)
2000195c:	687b      	ldr	r3, [r7, #4]
2000195e:	2266      	movs	r2, #102	; 0x66
20001960:	5c9b      	ldrb	r3, [r3, r2]
20001962:	2b64      	cmp	r3, #100	; 0x64
20001964:	d103      	bne.n	2000196e <bufferGet+0x54>
        buffer->out = 0;
20001966:	687b      	ldr	r3, [r7, #4]
20001968:	2266      	movs	r2, #102	; 0x66
2000196a:	2100      	movs	r1, #0
2000196c:	5499      	strb	r1, [r3, r2]

    return 1;
2000196e:	2301      	movs	r3, #1
20001970:	0018      	movs	r0, r3
20001972:	46bd      	mov	sp, r7
20001974:	b002      	add	sp, #8
20001976:	bd80      	pop	{r7, pc}

20001978 <USART_DeInit>:
  * @param  USARTx: where x can be 1, 2, 3, 4, 5, 6, 7 or 8 to select the USART or 
  *         UART peripheral.
  * @retval None
  */
void USART_DeInit(USART_TypeDef* USARTx)
{
20001978:	b580      	push	{r7, lr}
2000197a:	b082      	sub	sp, #8
2000197c:	af00      	add	r7, sp, #0
2000197e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  if (USARTx == USART1)
20001980:	687b      	ldr	r3, [r7, #4]
20001982:	4a41      	ldr	r2, [pc, #260]	; (20001a88 <USART_DeInit+0x110>)
20001984:	4293      	cmp	r3, r2
20001986:	d108      	bne.n	2000199a <USART_DeInit+0x22>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, ENABLE);
20001988:	2101      	movs	r1, #1
2000198a:	2010      	movs	r0, #16
2000198c:	f7ff f884 	bl	20000a98 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, DISABLE);
20001990:	2100      	movs	r1, #0
20001992:	2010      	movs	r0, #16
20001994:	f7ff f880 	bl	20000a98 <RCC_APB2PeriphResetCmd>
    { 
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART8, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART8, DISABLE);
    }
  }
}
20001998:	e071      	b.n	20001a7e <USART_DeInit+0x106>
  else if (USARTx == USART2)
2000199a:	687b      	ldr	r3, [r7, #4]
2000199c:	4a3b      	ldr	r2, [pc, #236]	; (20001a8c <USART_DeInit+0x114>)
2000199e:	4293      	cmp	r3, r2
200019a0:	d10c      	bne.n	200019bc <USART_DeInit+0x44>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, ENABLE);
200019a2:	2380      	movs	r3, #128	; 0x80
200019a4:	029b      	lsls	r3, r3, #10
200019a6:	2101      	movs	r1, #1
200019a8:	0018      	movs	r0, r3
200019aa:	f7ff f855 	bl	20000a58 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, DISABLE);
200019ae:	2380      	movs	r3, #128	; 0x80
200019b0:	029b      	lsls	r3, r3, #10
200019b2:	2100      	movs	r1, #0
200019b4:	0018      	movs	r0, r3
200019b6:	f7ff f84f 	bl	20000a58 <RCC_APB1PeriphResetCmd>
}
200019ba:	e060      	b.n	20001a7e <USART_DeInit+0x106>
  else if (USARTx == USART3)
200019bc:	687b      	ldr	r3, [r7, #4]
200019be:	4a34      	ldr	r2, [pc, #208]	; (20001a90 <USART_DeInit+0x118>)
200019c0:	4293      	cmp	r3, r2
200019c2:	d10c      	bne.n	200019de <USART_DeInit+0x66>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, ENABLE);
200019c4:	2380      	movs	r3, #128	; 0x80
200019c6:	02db      	lsls	r3, r3, #11
200019c8:	2101      	movs	r1, #1
200019ca:	0018      	movs	r0, r3
200019cc:	f7ff f844 	bl	20000a58 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, DISABLE);
200019d0:	2380      	movs	r3, #128	; 0x80
200019d2:	02db      	lsls	r3, r3, #11
200019d4:	2100      	movs	r1, #0
200019d6:	0018      	movs	r0, r3
200019d8:	f7ff f83e 	bl	20000a58 <RCC_APB1PeriphResetCmd>
}
200019dc:	e04f      	b.n	20001a7e <USART_DeInit+0x106>
  else if (USARTx == UART4)
200019de:	687b      	ldr	r3, [r7, #4]
200019e0:	4a2c      	ldr	r2, [pc, #176]	; (20001a94 <USART_DeInit+0x11c>)
200019e2:	4293      	cmp	r3, r2
200019e4:	d10c      	bne.n	20001a00 <USART_DeInit+0x88>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, ENABLE);
200019e6:	2380      	movs	r3, #128	; 0x80
200019e8:	031b      	lsls	r3, r3, #12
200019ea:	2101      	movs	r1, #1
200019ec:	0018      	movs	r0, r3
200019ee:	f7ff f833 	bl	20000a58 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, DISABLE);
200019f2:	2380      	movs	r3, #128	; 0x80
200019f4:	031b      	lsls	r3, r3, #12
200019f6:	2100      	movs	r1, #0
200019f8:	0018      	movs	r0, r3
200019fa:	f7ff f82d 	bl	20000a58 <RCC_APB1PeriphResetCmd>
}
200019fe:	e03e      	b.n	20001a7e <USART_DeInit+0x106>
  else if (USARTx == UART5)
20001a00:	687b      	ldr	r3, [r7, #4]
20001a02:	4a25      	ldr	r2, [pc, #148]	; (20001a98 <USART_DeInit+0x120>)
20001a04:	4293      	cmp	r3, r2
20001a06:	d10c      	bne.n	20001a22 <USART_DeInit+0xaa>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, ENABLE);
20001a08:	2380      	movs	r3, #128	; 0x80
20001a0a:	035b      	lsls	r3, r3, #13
20001a0c:	2101      	movs	r1, #1
20001a0e:	0018      	movs	r0, r3
20001a10:	f7ff f822 	bl	20000a58 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, DISABLE);
20001a14:	2380      	movs	r3, #128	; 0x80
20001a16:	035b      	lsls	r3, r3, #13
20001a18:	2100      	movs	r1, #0
20001a1a:	0018      	movs	r0, r3
20001a1c:	f7ff f81c 	bl	20000a58 <RCC_APB1PeriphResetCmd>
}
20001a20:	e02d      	b.n	20001a7e <USART_DeInit+0x106>
  else if (USARTx == USART6)
20001a22:	687b      	ldr	r3, [r7, #4]
20001a24:	4a1d      	ldr	r2, [pc, #116]	; (20001a9c <USART_DeInit+0x124>)
20001a26:	4293      	cmp	r3, r2
20001a28:	d108      	bne.n	20001a3c <USART_DeInit+0xc4>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, ENABLE);
20001a2a:	2101      	movs	r1, #1
20001a2c:	2020      	movs	r0, #32
20001a2e:	f7ff f833 	bl	20000a98 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, DISABLE);
20001a32:	2100      	movs	r1, #0
20001a34:	2020      	movs	r0, #32
20001a36:	f7ff f82f 	bl	20000a98 <RCC_APB2PeriphResetCmd>
}
20001a3a:	e020      	b.n	20001a7e <USART_DeInit+0x106>
  else if (USARTx == UART7)
20001a3c:	687b      	ldr	r3, [r7, #4]
20001a3e:	4a18      	ldr	r2, [pc, #96]	; (20001aa0 <USART_DeInit+0x128>)
20001a40:	4293      	cmp	r3, r2
20001a42:	d10c      	bne.n	20001a5e <USART_DeInit+0xe6>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART7, ENABLE);
20001a44:	2380      	movs	r3, #128	; 0x80
20001a46:	05db      	lsls	r3, r3, #23
20001a48:	2101      	movs	r1, #1
20001a4a:	0018      	movs	r0, r3
20001a4c:	f7ff f804 	bl	20000a58 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART7, DISABLE);
20001a50:	2380      	movs	r3, #128	; 0x80
20001a52:	05db      	lsls	r3, r3, #23
20001a54:	2100      	movs	r1, #0
20001a56:	0018      	movs	r0, r3
20001a58:	f7fe fffe 	bl	20000a58 <RCC_APB1PeriphResetCmd>
}
20001a5c:	e00f      	b.n	20001a7e <USART_DeInit+0x106>
    if (USARTx == UART8)
20001a5e:	687b      	ldr	r3, [r7, #4]
20001a60:	4a10      	ldr	r2, [pc, #64]	; (20001aa4 <USART_DeInit+0x12c>)
20001a62:	4293      	cmp	r3, r2
20001a64:	d10b      	bne.n	20001a7e <USART_DeInit+0x106>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART8, ENABLE);
20001a66:	2380      	movs	r3, #128	; 0x80
20001a68:	061b      	lsls	r3, r3, #24
20001a6a:	2101      	movs	r1, #1
20001a6c:	0018      	movs	r0, r3
20001a6e:	f7fe fff3 	bl	20000a58 <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART8, DISABLE);
20001a72:	2380      	movs	r3, #128	; 0x80
20001a74:	061b      	lsls	r3, r3, #24
20001a76:	2100      	movs	r1, #0
20001a78:	0018      	movs	r0, r3
20001a7a:	f7fe ffed 	bl	20000a58 <RCC_APB1PeriphResetCmd>
}
20001a7e:	46c0      	nop			; (mov r8, r8)
20001a80:	46bd      	mov	sp, r7
20001a82:	b002      	add	sp, #8
20001a84:	bd80      	pop	{r7, pc}
20001a86:	46c0      	nop			; (mov r8, r8)
20001a88:	40011000 	andmi	r1, r1, r0
20001a8c:	40004400 	andmi	r4, r0, r0, lsl #8
20001a90:	40004800 	andmi	r4, r0, r0, lsl #16
20001a94:	40004c00 	andmi	r4, r0, r0, lsl #24
20001a98:	40005000 	andmi	r5, r0, r0
20001a9c:	40011400 	andmi	r1, r1, r0, lsl #8
20001aa0:	40007800 	andmi	r7, r0, r0, lsl #16
20001aa4:	40007c00 	andmi	r7, r0, r0, lsl #24

20001aa8 <USART_Init>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
20001aa8:	b580      	push	{r7, lr}
20001aaa:	b08a      	sub	sp, #40	; 0x28
20001aac:	af00      	add	r7, sp, #0
20001aae:	6078      	str	r0, [r7, #4]
20001ab0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00, apbclock = 0x00;
20001ab2:	2300      	movs	r3, #0
20001ab4:	627b      	str	r3, [r7, #36]	; 0x24
20001ab6:	2300      	movs	r3, #0
20001ab8:	623b      	str	r3, [r7, #32]
  uint32_t integerdivider = 0x00;
20001aba:	2300      	movs	r3, #0
20001abc:	61fb      	str	r3, [r7, #28]
  uint32_t fractionaldivider = 0x00;
20001abe:	2300      	movs	r3, #0
20001ac0:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  }

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
20001ac2:	687b      	ldr	r3, [r7, #4]
20001ac4:	8a1b      	ldrh	r3, [r3, #16]
20001ac6:	b29b      	uxth	r3, r3
20001ac8:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
20001aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20001acc:	4a56      	ldr	r2, [pc, #344]	; (20001c28 <USART_Init+0x180>)
20001ace:	4013      	ands	r3, r2
20001ad0:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit :
      Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
20001ad2:	683b      	ldr	r3, [r7, #0]
20001ad4:	88db      	ldrh	r3, [r3, #6]
20001ad6:	001a      	movs	r2, r3
20001ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20001ada:	4313      	orrs	r3, r2
20001adc:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
20001ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20001ae0:	b29a      	uxth	r2, r3
20001ae2:	687b      	ldr	r3, [r7, #4]
20001ae4:	821a      	strh	r2, [r3, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
20001ae6:	687b      	ldr	r3, [r7, #4]
20001ae8:	899b      	ldrh	r3, [r3, #12]
20001aea:	b29b      	uxth	r3, r3
20001aec:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
20001aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20001af0:	4a4e      	ldr	r2, [pc, #312]	; (20001c2c <USART_Init+0x184>)
20001af2:	4013      	ands	r3, r2
20001af4:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
20001af6:	683b      	ldr	r3, [r7, #0]
20001af8:	889a      	ldrh	r2, [r3, #4]
20001afa:	683b      	ldr	r3, [r7, #0]
20001afc:	891b      	ldrh	r3, [r3, #8]
20001afe:	4313      	orrs	r3, r2
20001b00:	b29a      	uxth	r2, r3
            USART_InitStruct->USART_Mode;
20001b02:	683b      	ldr	r3, [r7, #0]
20001b04:	895b      	ldrh	r3, [r3, #10]
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
20001b06:	4313      	orrs	r3, r2
20001b08:	b29b      	uxth	r3, r3
20001b0a:	001a      	movs	r2, r3
20001b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20001b0e:	4313      	orrs	r3, r2
20001b10:	627b      	str	r3, [r7, #36]	; 0x24

  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
20001b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20001b14:	b29a      	uxth	r2, r3
20001b16:	687b      	ldr	r3, [r7, #4]
20001b18:	819a      	strh	r2, [r3, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
20001b1a:	687b      	ldr	r3, [r7, #4]
20001b1c:	8a9b      	ldrh	r3, [r3, #20]
20001b1e:	b29b      	uxth	r3, r3
20001b20:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);
20001b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20001b24:	4a42      	ldr	r2, [pc, #264]	; (20001c30 <USART_Init+0x188>)
20001b26:	4013      	ands	r3, r2
20001b28:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART HFC : 
      Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
20001b2a:	683b      	ldr	r3, [r7, #0]
20001b2c:	899b      	ldrh	r3, [r3, #12]
20001b2e:	001a      	movs	r2, r3
20001b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20001b32:	4313      	orrs	r3, r2
20001b34:	627b      	str	r3, [r7, #36]	; 0x24

  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
20001b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20001b38:	b29a      	uxth	r2, r3
20001b3a:	687b      	ldr	r3, [r7, #4]
20001b3c:	829a      	strh	r2, [r3, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate */
  RCC_GetClocksFreq(&RCC_ClocksStatus);
20001b3e:	2308      	movs	r3, #8
20001b40:	18fb      	adds	r3, r7, r3
20001b42:	0018      	movs	r0, r3
20001b44:	f7fe fcd8 	bl	200004f8 <RCC_GetClocksFreq>

  if ((USARTx == USART1) || (USARTx == USART6))
20001b48:	687b      	ldr	r3, [r7, #4]
20001b4a:	4a3a      	ldr	r2, [pc, #232]	; (20001c34 <USART_Init+0x18c>)
20001b4c:	4293      	cmp	r3, r2
20001b4e:	d003      	beq.n	20001b58 <USART_Init+0xb0>
20001b50:	687b      	ldr	r3, [r7, #4]
20001b52:	4a39      	ldr	r2, [pc, #228]	; (20001c38 <USART_Init+0x190>)
20001b54:	4293      	cmp	r3, r2
20001b56:	d104      	bne.n	20001b62 <USART_Init+0xba>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
20001b58:	2308      	movs	r3, #8
20001b5a:	18fb      	adds	r3, r7, r3
20001b5c:	68db      	ldr	r3, [r3, #12]
20001b5e:	623b      	str	r3, [r7, #32]
20001b60:	e003      	b.n	20001b6a <USART_Init+0xc2>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
20001b62:	2308      	movs	r3, #8
20001b64:	18fb      	adds	r3, r7, r3
20001b66:	689b      	ldr	r3, [r3, #8]
20001b68:	623b      	str	r3, [r7, #32]
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
20001b6a:	687b      	ldr	r3, [r7, #4]
20001b6c:	899b      	ldrh	r3, [r3, #12]
20001b6e:	b29b      	uxth	r3, r3
20001b70:	b21b      	sxth	r3, r3
20001b72:	2b00      	cmp	r3, #0
20001b74:	da0f      	bge.n	20001b96 <USART_Init+0xee>
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
20001b76:	6a3a      	ldr	r2, [r7, #32]
20001b78:	0013      	movs	r3, r2
20001b7a:	009b      	lsls	r3, r3, #2
20001b7c:	189b      	adds	r3, r3, r2
20001b7e:	009a      	lsls	r2, r3, #2
20001b80:	189a      	adds	r2, r3, r2
20001b82:	683b      	ldr	r3, [r7, #0]
20001b84:	681b      	ldr	r3, [r3, #0]
20001b86:	005b      	lsls	r3, r3, #1
20001b88:	0019      	movs	r1, r3
20001b8a:	0010      	movs	r0, r2
20001b8c:	f000 fbf4 	bl	20002378 <__udivsi3>
20001b90:	0003      	movs	r3, r0
20001b92:	61fb      	str	r3, [r7, #28]
20001b94:	e00e      	b.n	20001bb4 <USART_Init+0x10c>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
20001b96:	6a3a      	ldr	r2, [r7, #32]
20001b98:	0013      	movs	r3, r2
20001b9a:	009b      	lsls	r3, r3, #2
20001b9c:	189b      	adds	r3, r3, r2
20001b9e:	009a      	lsls	r2, r3, #2
20001ba0:	189a      	adds	r2, r3, r2
20001ba2:	683b      	ldr	r3, [r7, #0]
20001ba4:	681b      	ldr	r3, [r3, #0]
20001ba6:	009b      	lsls	r3, r3, #2
20001ba8:	0019      	movs	r1, r3
20001baa:	0010      	movs	r0, r2
20001bac:	f000 fbe4 	bl	20002378 <__udivsi3>
20001bb0:	0003      	movs	r3, r0
20001bb2:	61fb      	str	r3, [r7, #28]
  }
  tmpreg = (integerdivider / 100) << 4;
20001bb4:	69fb      	ldr	r3, [r7, #28]
20001bb6:	2164      	movs	r1, #100	; 0x64
20001bb8:	0018      	movs	r0, r3
20001bba:	f000 fbdd 	bl	20002378 <__udivsi3>
20001bbe:	0003      	movs	r3, r0
20001bc0:	011b      	lsls	r3, r3, #4
20001bc2:	627b      	str	r3, [r7, #36]	; 0x24

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
20001bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20001bc6:	091b      	lsrs	r3, r3, #4
20001bc8:	2264      	movs	r2, #100	; 0x64
20001bca:	4353      	muls	r3, r2
20001bcc:	69fa      	ldr	r2, [r7, #28]
20001bce:	1ad3      	subs	r3, r2, r3
20001bd0:	61bb      	str	r3, [r7, #24]

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
20001bd2:	687b      	ldr	r3, [r7, #4]
20001bd4:	899b      	ldrh	r3, [r3, #12]
20001bd6:	b29b      	uxth	r3, r3
20001bd8:	b21b      	sxth	r3, r3
20001bda:	2b00      	cmp	r3, #0
20001bdc:	da0e      	bge.n	20001bfc <USART_Init+0x154>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
20001bde:	69bb      	ldr	r3, [r7, #24]
20001be0:	00db      	lsls	r3, r3, #3
20001be2:	3332      	adds	r3, #50	; 0x32
20001be4:	2164      	movs	r1, #100	; 0x64
20001be6:	0018      	movs	r0, r3
20001be8:	f000 fbc6 	bl	20002378 <__udivsi3>
20001bec:	0003      	movs	r3, r0
20001bee:	001a      	movs	r2, r3
20001bf0:	2307      	movs	r3, #7
20001bf2:	4013      	ands	r3, r2
20001bf4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
20001bf6:	4313      	orrs	r3, r2
20001bf8:	627b      	str	r3, [r7, #36]	; 0x24
20001bfa:	e00d      	b.n	20001c18 <USART_Init+0x170>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
20001bfc:	69bb      	ldr	r3, [r7, #24]
20001bfe:	011b      	lsls	r3, r3, #4
20001c00:	3332      	adds	r3, #50	; 0x32
20001c02:	2164      	movs	r1, #100	; 0x64
20001c04:	0018      	movs	r0, r3
20001c06:	f000 fbb7 	bl	20002378 <__udivsi3>
20001c0a:	0003      	movs	r3, r0
20001c0c:	001a      	movs	r2, r3
20001c0e:	230f      	movs	r3, #15
20001c10:	4013      	ands	r3, r2
20001c12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
20001c14:	4313      	orrs	r3, r2
20001c16:	627b      	str	r3, [r7, #36]	; 0x24
  }
  
  /* Write to USART BRR register */
  USARTx->BRR = (uint16_t)tmpreg;
20001c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20001c1a:	b29a      	uxth	r2, r3
20001c1c:	687b      	ldr	r3, [r7, #4]
20001c1e:	811a      	strh	r2, [r3, #8]
}
20001c20:	46c0      	nop			; (mov r8, r8)
20001c22:	46bd      	mov	sp, r7
20001c24:	b00a      	add	sp, #40	; 0x28
20001c26:	bd80      	pop	{r7, pc}
20001c28:	ffffcfff 			; <UNDEFINED> instruction: 0xffffcfff
20001c2c:	ffffe9f3 			; <UNDEFINED> instruction: 0xffffe9f3
20001c30:	fffffcff 			; <UNDEFINED> instruction: 0xfffffcff
20001c34:	40011000 	andmi	r1, r1, r0
20001c38:	40011400 	andmi	r1, r1, r0, lsl #8

20001c3c <USART_StructInit>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void USART_StructInit(USART_InitTypeDef* USART_InitStruct)
{
20001c3c:	b580      	push	{r7, lr}
20001c3e:	b082      	sub	sp, #8
20001c40:	af00      	add	r7, sp, #0
20001c42:	6078      	str	r0, [r7, #4]
  /* USART_InitStruct members default value */
  USART_InitStruct->USART_BaudRate = 9600;
20001c44:	687b      	ldr	r3, [r7, #4]
20001c46:	2296      	movs	r2, #150	; 0x96
20001c48:	0192      	lsls	r2, r2, #6
20001c4a:	601a      	str	r2, [r3, #0]
  USART_InitStruct->USART_WordLength = USART_WordLength_8b;
20001c4c:	687b      	ldr	r3, [r7, #4]
20001c4e:	2200      	movs	r2, #0
20001c50:	809a      	strh	r2, [r3, #4]
  USART_InitStruct->USART_StopBits = USART_StopBits_1;
20001c52:	687b      	ldr	r3, [r7, #4]
20001c54:	2200      	movs	r2, #0
20001c56:	80da      	strh	r2, [r3, #6]
  USART_InitStruct->USART_Parity = USART_Parity_No ;
20001c58:	687b      	ldr	r3, [r7, #4]
20001c5a:	2200      	movs	r2, #0
20001c5c:	811a      	strh	r2, [r3, #8]
  USART_InitStruct->USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
20001c5e:	687b      	ldr	r3, [r7, #4]
20001c60:	220c      	movs	r2, #12
20001c62:	815a      	strh	r2, [r3, #10]
  USART_InitStruct->USART_HardwareFlowControl = USART_HardwareFlowControl_None;  
20001c64:	687b      	ldr	r3, [r7, #4]
20001c66:	2200      	movs	r2, #0
20001c68:	819a      	strh	r2, [r3, #12]
}
20001c6a:	46c0      	nop			; (mov r8, r8)
20001c6c:	46bd      	mov	sp, r7
20001c6e:	b002      	add	sp, #8
20001c70:	bd80      	pop	{r7, pc}

20001c72 <USART_ClockInit>:
  *         contains the configuration information for the specified  USART peripheral.
  * @note   The Smart Card and Synchronous modes are not available for UART4 and UART5.    
  * @retval None
  */
void USART_ClockInit(USART_TypeDef* USARTx, USART_ClockInitTypeDef* USART_ClockInitStruct)
{
20001c72:	b580      	push	{r7, lr}
20001c74:	b084      	sub	sp, #16
20001c76:	af00      	add	r7, sp, #0
20001c78:	6078      	str	r0, [r7, #4]
20001c7a:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00;
20001c7c:	2300      	movs	r3, #0
20001c7e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_USART_CPOL(USART_ClockInitStruct->USART_CPOL));
  assert_param(IS_USART_CPHA(USART_ClockInitStruct->USART_CPHA));
  assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));
  
/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
20001c80:	687b      	ldr	r3, [r7, #4]
20001c82:	8a1b      	ldrh	r3, [r3, #16]
20001c84:	b29b      	uxth	r3, r3
20001c86:	60fb      	str	r3, [r7, #12]
  /* Clear CLKEN, CPOL, CPHA and LBCL bits */
  tmpreg &= (uint32_t)~((uint32_t)CR2_CLOCK_CLEAR_MASK);
20001c88:	68fb      	ldr	r3, [r7, #12]
20001c8a:	4a0e      	ldr	r2, [pc, #56]	; (20001cc4 <USART_ClockInit+0x52>)
20001c8c:	4013      	ands	r3, r2
20001c8e:	60fb      	str	r3, [r7, #12]
  /* Configure the USART Clock, CPOL, CPHA and LastBit ------------*/
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
20001c90:	683b      	ldr	r3, [r7, #0]
20001c92:	881a      	ldrh	r2, [r3, #0]
20001c94:	683b      	ldr	r3, [r7, #0]
20001c96:	885b      	ldrh	r3, [r3, #2]
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
20001c98:	4313      	orrs	r3, r2
20001c9a:	b29a      	uxth	r2, r3
20001c9c:	683b      	ldr	r3, [r7, #0]
20001c9e:	889b      	ldrh	r3, [r3, #4]
20001ca0:	4313      	orrs	r3, r2
20001ca2:	b29a      	uxth	r2, r3
20001ca4:	683b      	ldr	r3, [r7, #0]
20001ca6:	88db      	ldrh	r3, [r3, #6]
20001ca8:	4313      	orrs	r3, r2
20001caa:	b29b      	uxth	r3, r3
20001cac:	001a      	movs	r2, r3
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
20001cae:	68fb      	ldr	r3, [r7, #12]
20001cb0:	4313      	orrs	r3, r2
20001cb2:	60fb      	str	r3, [r7, #12]
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
20001cb4:	68fb      	ldr	r3, [r7, #12]
20001cb6:	b29a      	uxth	r2, r3
20001cb8:	687b      	ldr	r3, [r7, #4]
20001cba:	821a      	strh	r2, [r3, #16]
}
20001cbc:	46c0      	nop			; (mov r8, r8)
20001cbe:	46bd      	mov	sp, r7
20001cc0:	b004      	add	sp, #16
20001cc2:	bd80      	pop	{r7, pc}
20001cc4:	fffff0ff 			; <UNDEFINED> instruction: 0xfffff0ff

20001cc8 <USART_ClockStructInit>:
  * @param  USART_ClockInitStruct: pointer to a USART_ClockInitTypeDef structure
  *         which will be initialized.
  * @retval None
  */
void USART_ClockStructInit(USART_ClockInitTypeDef* USART_ClockInitStruct)
{
20001cc8:	b580      	push	{r7, lr}
20001cca:	b082      	sub	sp, #8
20001ccc:	af00      	add	r7, sp, #0
20001cce:	6078      	str	r0, [r7, #4]
  /* USART_ClockInitStruct members default value */
  USART_ClockInitStruct->USART_Clock = USART_Clock_Disable;
20001cd0:	687b      	ldr	r3, [r7, #4]
20001cd2:	2200      	movs	r2, #0
20001cd4:	801a      	strh	r2, [r3, #0]
  USART_ClockInitStruct->USART_CPOL = USART_CPOL_Low;
20001cd6:	687b      	ldr	r3, [r7, #4]
20001cd8:	2200      	movs	r2, #0
20001cda:	805a      	strh	r2, [r3, #2]
  USART_ClockInitStruct->USART_CPHA = USART_CPHA_1Edge;
20001cdc:	687b      	ldr	r3, [r7, #4]
20001cde:	2200      	movs	r2, #0
20001ce0:	809a      	strh	r2, [r3, #4]
  USART_ClockInitStruct->USART_LastBit = USART_LastBit_Disable;
20001ce2:	687b      	ldr	r3, [r7, #4]
20001ce4:	2200      	movs	r2, #0
20001ce6:	80da      	strh	r2, [r3, #6]
}
20001ce8:	46c0      	nop			; (mov r8, r8)
20001cea:	46bd      	mov	sp, r7
20001cec:	b002      	add	sp, #8
20001cee:	bd80      	pop	{r7, pc}

20001cf0 <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
20001cf0:	b580      	push	{r7, lr}
20001cf2:	b082      	sub	sp, #8
20001cf4:	af00      	add	r7, sp, #0
20001cf6:	6078      	str	r0, [r7, #4]
20001cf8:	000a      	movs	r2, r1
20001cfa:	1cfb      	adds	r3, r7, #3
20001cfc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
20001cfe:	1cfb      	adds	r3, r7, #3
20001d00:	781b      	ldrb	r3, [r3, #0]
20001d02:	2b00      	cmp	r3, #0
20001d04:	d009      	beq.n	20001d1a <USART_Cmd+0x2a>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_UE;
20001d06:	687b      	ldr	r3, [r7, #4]
20001d08:	899b      	ldrh	r3, [r3, #12]
20001d0a:	b29b      	uxth	r3, r3
20001d0c:	2280      	movs	r2, #128	; 0x80
20001d0e:	0192      	lsls	r2, r2, #6
20001d10:	4313      	orrs	r3, r2
20001d12:	b29a      	uxth	r2, r3
20001d14:	687b      	ldr	r3, [r7, #4]
20001d16:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
  }
}
20001d18:	e007      	b.n	20001d2a <USART_Cmd+0x3a>
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
20001d1a:	687b      	ldr	r3, [r7, #4]
20001d1c:	899b      	ldrh	r3, [r3, #12]
20001d1e:	b29b      	uxth	r3, r3
20001d20:	4a04      	ldr	r2, [pc, #16]	; (20001d34 <USART_Cmd+0x44>)
20001d22:	4013      	ands	r3, r2
20001d24:	b29a      	uxth	r2, r3
20001d26:	687b      	ldr	r3, [r7, #4]
20001d28:	819a      	strh	r2, [r3, #12]
}
20001d2a:	46c0      	nop			; (mov r8, r8)
20001d2c:	46bd      	mov	sp, r7
20001d2e:	b002      	add	sp, #8
20001d30:	bd80      	pop	{r7, pc}
20001d32:	46c0      	nop			; (mov r8, r8)
20001d34:	ffffdfff 			; <UNDEFINED> instruction: 0xffffdfff

20001d38 <USART_SetPrescaler>:
  * @param  USART_Prescaler: specifies the prescaler clock. 
  * @note   The function is used for IrDA mode with UART4 and UART5.   
  * @retval None
  */
void USART_SetPrescaler(USART_TypeDef* USARTx, uint8_t USART_Prescaler)
{ 
20001d38:	b580      	push	{r7, lr}
20001d3a:	b082      	sub	sp, #8
20001d3c:	af00      	add	r7, sp, #0
20001d3e:	6078      	str	r0, [r7, #4]
20001d40:	000a      	movs	r2, r1
20001d42:	1cfb      	adds	r3, r7, #3
20001d44:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Clear the USART prescaler */
  USARTx->GTPR &= USART_GTPR_GT;
20001d46:	687b      	ldr	r3, [r7, #4]
20001d48:	8b1b      	ldrh	r3, [r3, #24]
20001d4a:	b29b      	uxth	r3, r3
20001d4c:	22ff      	movs	r2, #255	; 0xff
20001d4e:	4393      	bics	r3, r2
20001d50:	b29a      	uxth	r2, r3
20001d52:	687b      	ldr	r3, [r7, #4]
20001d54:	831a      	strh	r2, [r3, #24]
  /* Set the USART prescaler */
  USARTx->GTPR |= USART_Prescaler;
20001d56:	687b      	ldr	r3, [r7, #4]
20001d58:	8b1b      	ldrh	r3, [r3, #24]
20001d5a:	b29a      	uxth	r2, r3
20001d5c:	1cfb      	adds	r3, r7, #3
20001d5e:	781b      	ldrb	r3, [r3, #0]
20001d60:	b29b      	uxth	r3, r3
20001d62:	4313      	orrs	r3, r2
20001d64:	b29a      	uxth	r2, r3
20001d66:	687b      	ldr	r3, [r7, #4]
20001d68:	831a      	strh	r2, [r3, #24]
}
20001d6a:	46c0      	nop			; (mov r8, r8)
20001d6c:	46bd      	mov	sp, r7
20001d6e:	b002      	add	sp, #8
20001d70:	bd80      	pop	{r7, pc}

20001d72 <USART_OverSampling8Cmd>:
  * @param  NewState: new state of the USART 8x oversampling mode.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_OverSampling8Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
20001d72:	b580      	push	{r7, lr}
20001d74:	b082      	sub	sp, #8
20001d76:	af00      	add	r7, sp, #0
20001d78:	6078      	str	r0, [r7, #4]
20001d7a:	000a      	movs	r2, r1
20001d7c:	1cfb      	adds	r3, r7, #3
20001d7e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
20001d80:	1cfb      	adds	r3, r7, #3
20001d82:	781b      	ldrb	r3, [r3, #0]
20001d84:	2b00      	cmp	r3, #0
20001d86:	d008      	beq.n	20001d9a <USART_OverSampling8Cmd+0x28>
  {
    /* Enable the 8x Oversampling mode by setting the OVER8 bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_OVER8;
20001d88:	687b      	ldr	r3, [r7, #4]
20001d8a:	899b      	ldrh	r3, [r3, #12]
20001d8c:	b29b      	uxth	r3, r3
20001d8e:	4a09      	ldr	r2, [pc, #36]	; (20001db4 <USART_OverSampling8Cmd+0x42>)
20001d90:	4313      	orrs	r3, r2
20001d92:	b29a      	uxth	r2, r3
20001d94:	687b      	ldr	r3, [r7, #4]
20001d96:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the 8x Oversampling mode by clearing the OVER8 bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_OVER8);
  }
}  
20001d98:	e007      	b.n	20001daa <USART_OverSampling8Cmd+0x38>
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_OVER8);
20001d9a:	687b      	ldr	r3, [r7, #4]
20001d9c:	899b      	ldrh	r3, [r3, #12]
20001d9e:	b29b      	uxth	r3, r3
20001da0:	045b      	lsls	r3, r3, #17
20001da2:	0c5b      	lsrs	r3, r3, #17
20001da4:	b29a      	uxth	r2, r3
20001da6:	687b      	ldr	r3, [r7, #4]
20001da8:	819a      	strh	r2, [r3, #12]
}  
20001daa:	46c0      	nop			; (mov r8, r8)
20001dac:	46bd      	mov	sp, r7
20001dae:	b002      	add	sp, #8
20001db0:	bd80      	pop	{r7, pc}
20001db2:	46c0      	nop			; (mov r8, r8)
20001db4:	ffff8000 			; <UNDEFINED> instruction: 0xffff8000

20001db8 <USART_OneBitMethodCmd>:
  * @param  NewState: new state of the USART one bit sampling method.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_OneBitMethodCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
20001db8:	b580      	push	{r7, lr}
20001dba:	b082      	sub	sp, #8
20001dbc:	af00      	add	r7, sp, #0
20001dbe:	6078      	str	r0, [r7, #4]
20001dc0:	000a      	movs	r2, r1
20001dc2:	1cfb      	adds	r3, r7, #3
20001dc4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
20001dc6:	1cfb      	adds	r3, r7, #3
20001dc8:	781b      	ldrb	r3, [r3, #0]
20001dca:	2b00      	cmp	r3, #0
20001dcc:	d009      	beq.n	20001de2 <USART_OneBitMethodCmd+0x2a>
  {
    /* Enable the one bit method by setting the ONEBITE bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_ONEBIT;
20001dce:	687b      	ldr	r3, [r7, #4]
20001dd0:	8a9b      	ldrh	r3, [r3, #20]
20001dd2:	b29b      	uxth	r3, r3
20001dd4:	2280      	movs	r2, #128	; 0x80
20001dd6:	0112      	lsls	r2, r2, #4
20001dd8:	4313      	orrs	r3, r2
20001dda:	b29a      	uxth	r2, r3
20001ddc:	687b      	ldr	r3, [r7, #4]
20001dde:	829a      	strh	r2, [r3, #20]
  else
  {
    /* Disable the one bit method by clearing the ONEBITE bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_ONEBIT);
  }
}
20001de0:	e007      	b.n	20001df2 <USART_OneBitMethodCmd+0x3a>
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_ONEBIT);
20001de2:	687b      	ldr	r3, [r7, #4]
20001de4:	8a9b      	ldrh	r3, [r3, #20]
20001de6:	b29b      	uxth	r3, r3
20001de8:	4a04      	ldr	r2, [pc, #16]	; (20001dfc <USART_OneBitMethodCmd+0x44>)
20001dea:	4013      	ands	r3, r2
20001dec:	b29a      	uxth	r2, r3
20001dee:	687b      	ldr	r3, [r7, #4]
20001df0:	829a      	strh	r2, [r3, #20]
}
20001df2:	46c0      	nop			; (mov r8, r8)
20001df4:	46bd      	mov	sp, r7
20001df6:	b002      	add	sp, #8
20001df8:	bd80      	pop	{r7, pc}
20001dfa:	46c0      	nop			; (mov r8, r8)
20001dfc:	fffff7ff 			; <UNDEFINED> instruction: 0xfffff7ff

20001e00 <USART_SendData>:
  *         UART peripheral.
  * @param  Data: the data to transmit.
  * @retval None
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
20001e00:	b580      	push	{r7, lr}
20001e02:	b082      	sub	sp, #8
20001e04:	af00      	add	r7, sp, #0
20001e06:	6078      	str	r0, [r7, #4]
20001e08:	000a      	movs	r2, r1
20001e0a:	1cbb      	adds	r3, r7, #2
20001e0c:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 
    
  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
20001e0e:	1cbb      	adds	r3, r7, #2
20001e10:	881b      	ldrh	r3, [r3, #0]
20001e12:	05db      	lsls	r3, r3, #23
20001e14:	0ddb      	lsrs	r3, r3, #23
20001e16:	b29a      	uxth	r2, r3
20001e18:	687b      	ldr	r3, [r7, #4]
20001e1a:	809a      	strh	r2, [r3, #4]
}
20001e1c:	46c0      	nop			; (mov r8, r8)
20001e1e:	46bd      	mov	sp, r7
20001e20:	b002      	add	sp, #8
20001e22:	bd80      	pop	{r7, pc}

20001e24 <USART_ReceiveData>:
  * @param  USARTx: where x can be 1, 2, 3, 4, 5, 6, 7 or 8 to select the USART or 
  *         UART peripheral.
  * @retval The received data.
  */
uint16_t USART_ReceiveData(USART_TypeDef* USARTx)
{
20001e24:	b580      	push	{r7, lr}
20001e26:	b082      	sub	sp, #8
20001e28:	af00      	add	r7, sp, #0
20001e2a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Receive Data */
  return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);
20001e2c:	687b      	ldr	r3, [r7, #4]
20001e2e:	889b      	ldrh	r3, [r3, #4]
20001e30:	b29b      	uxth	r3, r3
20001e32:	05db      	lsls	r3, r3, #23
20001e34:	0ddb      	lsrs	r3, r3, #23
20001e36:	b29b      	uxth	r3, r3
}
20001e38:	0018      	movs	r0, r3
20001e3a:	46bd      	mov	sp, r7
20001e3c:	b002      	add	sp, #8
20001e3e:	bd80      	pop	{r7, pc}

20001e40 <USART_SetAddress>:
  *         UART peripheral.
  * @param  USART_Address: Indicates the address of the USART node.
  * @retval None
  */
void USART_SetAddress(USART_TypeDef* USARTx, uint8_t USART_Address)
{
20001e40:	b580      	push	{r7, lr}
20001e42:	b082      	sub	sp, #8
20001e44:	af00      	add	r7, sp, #0
20001e46:	6078      	str	r0, [r7, #4]
20001e48:	000a      	movs	r2, r1
20001e4a:	1cfb      	adds	r3, r7, #3
20001e4c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_ADDRESS(USART_Address)); 
    
  /* Clear the USART address */
  USARTx->CR2 &= (uint16_t)~((uint16_t)USART_CR2_ADD);
20001e4e:	687b      	ldr	r3, [r7, #4]
20001e50:	8a1b      	ldrh	r3, [r3, #16]
20001e52:	b29b      	uxth	r3, r3
20001e54:	220f      	movs	r2, #15
20001e56:	4393      	bics	r3, r2
20001e58:	b29a      	uxth	r2, r3
20001e5a:	687b      	ldr	r3, [r7, #4]
20001e5c:	821a      	strh	r2, [r3, #16]
  /* Set the USART address node */
  USARTx->CR2 |= USART_Address;
20001e5e:	687b      	ldr	r3, [r7, #4]
20001e60:	8a1b      	ldrh	r3, [r3, #16]
20001e62:	b29a      	uxth	r2, r3
20001e64:	1cfb      	adds	r3, r7, #3
20001e66:	781b      	ldrb	r3, [r3, #0]
20001e68:	b29b      	uxth	r3, r3
20001e6a:	4313      	orrs	r3, r2
20001e6c:	b29a      	uxth	r2, r3
20001e6e:	687b      	ldr	r3, [r7, #4]
20001e70:	821a      	strh	r2, [r3, #16]
}
20001e72:	46c0      	nop			; (mov r8, r8)
20001e74:	46bd      	mov	sp, r7
20001e76:	b002      	add	sp, #8
20001e78:	bd80      	pop	{r7, pc}

20001e7a <USART_ReceiverWakeUpCmd>:
  * @param  NewState: new state of the USART mute mode.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ReceiverWakeUpCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
20001e7a:	b580      	push	{r7, lr}
20001e7c:	b082      	sub	sp, #8
20001e7e:	af00      	add	r7, sp, #0
20001e80:	6078      	str	r0, [r7, #4]
20001e82:	000a      	movs	r2, r1
20001e84:	1cfb      	adds	r3, r7, #3
20001e86:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 
  
  if (NewState != DISABLE)
20001e88:	1cfb      	adds	r3, r7, #3
20001e8a:	781b      	ldrb	r3, [r3, #0]
20001e8c:	2b00      	cmp	r3, #0
20001e8e:	d008      	beq.n	20001ea2 <USART_ReceiverWakeUpCmd+0x28>
  {
    /* Enable the USART mute mode  by setting the RWU bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_RWU;
20001e90:	687b      	ldr	r3, [r7, #4]
20001e92:	899b      	ldrh	r3, [r3, #12]
20001e94:	b29b      	uxth	r3, r3
20001e96:	2202      	movs	r2, #2
20001e98:	4313      	orrs	r3, r2
20001e9a:	b29a      	uxth	r2, r3
20001e9c:	687b      	ldr	r3, [r7, #4]
20001e9e:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the USART mute mode by clearing the RWU bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_RWU);
  }
}
20001ea0:	e007      	b.n	20001eb2 <USART_ReceiverWakeUpCmd+0x38>
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_RWU);
20001ea2:	687b      	ldr	r3, [r7, #4]
20001ea4:	899b      	ldrh	r3, [r3, #12]
20001ea6:	b29b      	uxth	r3, r3
20001ea8:	2202      	movs	r2, #2
20001eaa:	4393      	bics	r3, r2
20001eac:	b29a      	uxth	r2, r3
20001eae:	687b      	ldr	r3, [r7, #4]
20001eb0:	819a      	strh	r2, [r3, #12]
}
20001eb2:	46c0      	nop			; (mov r8, r8)
20001eb4:	46bd      	mov	sp, r7
20001eb6:	b002      	add	sp, #8
20001eb8:	bd80      	pop	{r7, pc}

20001eba <USART_WakeUpConfig>:
  *            @arg USART_WakeUp_IdleLine: WakeUp by an idle line detection
  *            @arg USART_WakeUp_AddressMark: WakeUp by an address mark
  * @retval None
  */
void USART_WakeUpConfig(USART_TypeDef* USARTx, uint16_t USART_WakeUp)
{
20001eba:	b580      	push	{r7, lr}
20001ebc:	b082      	sub	sp, #8
20001ebe:	af00      	add	r7, sp, #0
20001ec0:	6078      	str	r0, [r7, #4]
20001ec2:	000a      	movs	r2, r1
20001ec4:	1cbb      	adds	r3, r7, #2
20001ec6:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_WAKEUP(USART_WakeUp));
  
  USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_WAKE);
20001ec8:	687b      	ldr	r3, [r7, #4]
20001eca:	899b      	ldrh	r3, [r3, #12]
20001ecc:	b29b      	uxth	r3, r3
20001ece:	4a09      	ldr	r2, [pc, #36]	; (20001ef4 <USART_WakeUpConfig+0x3a>)
20001ed0:	4013      	ands	r3, r2
20001ed2:	b29a      	uxth	r2, r3
20001ed4:	687b      	ldr	r3, [r7, #4]
20001ed6:	819a      	strh	r2, [r3, #12]
  USARTx->CR1 |= USART_WakeUp;
20001ed8:	687b      	ldr	r3, [r7, #4]
20001eda:	899b      	ldrh	r3, [r3, #12]
20001edc:	b29a      	uxth	r2, r3
20001ede:	1cbb      	adds	r3, r7, #2
20001ee0:	881b      	ldrh	r3, [r3, #0]
20001ee2:	4313      	orrs	r3, r2
20001ee4:	b29a      	uxth	r2, r3
20001ee6:	687b      	ldr	r3, [r7, #4]
20001ee8:	819a      	strh	r2, [r3, #12]
}
20001eea:	46c0      	nop			; (mov r8, r8)
20001eec:	46bd      	mov	sp, r7
20001eee:	b002      	add	sp, #8
20001ef0:	bd80      	pop	{r7, pc}
20001ef2:	46c0      	nop			; (mov r8, r8)
20001ef4:	fffff7ff 			; <UNDEFINED> instruction: 0xfffff7ff

20001ef8 <USART_LINBreakDetectLengthConfig>:
  *            @arg USART_LINBreakDetectLength_10b: 10-bit break detection
  *            @arg USART_LINBreakDetectLength_11b: 11-bit break detection
  * @retval None
  */
void USART_LINBreakDetectLengthConfig(USART_TypeDef* USARTx, uint16_t USART_LINBreakDetectLength)
{
20001ef8:	b580      	push	{r7, lr}
20001efa:	b082      	sub	sp, #8
20001efc:	af00      	add	r7, sp, #0
20001efe:	6078      	str	r0, [r7, #4]
20001f00:	000a      	movs	r2, r1
20001f02:	1cbb      	adds	r3, r7, #2
20001f04:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_LIN_BREAK_DETECT_LENGTH(USART_LINBreakDetectLength));
  
  USARTx->CR2 &= (uint16_t)~((uint16_t)USART_CR2_LBDL);
20001f06:	687b      	ldr	r3, [r7, #4]
20001f08:	8a1b      	ldrh	r3, [r3, #16]
20001f0a:	b29b      	uxth	r3, r3
20001f0c:	2220      	movs	r2, #32
20001f0e:	4393      	bics	r3, r2
20001f10:	b29a      	uxth	r2, r3
20001f12:	687b      	ldr	r3, [r7, #4]
20001f14:	821a      	strh	r2, [r3, #16]
  USARTx->CR2 |= USART_LINBreakDetectLength;  
20001f16:	687b      	ldr	r3, [r7, #4]
20001f18:	8a1b      	ldrh	r3, [r3, #16]
20001f1a:	b29a      	uxth	r2, r3
20001f1c:	1cbb      	adds	r3, r7, #2
20001f1e:	881b      	ldrh	r3, [r3, #0]
20001f20:	4313      	orrs	r3, r2
20001f22:	b29a      	uxth	r2, r3
20001f24:	687b      	ldr	r3, [r7, #4]
20001f26:	821a      	strh	r2, [r3, #16]
}
20001f28:	46c0      	nop			; (mov r8, r8)
20001f2a:	46bd      	mov	sp, r7
20001f2c:	b002      	add	sp, #8
20001f2e:	bd80      	pop	{r7, pc}

20001f30 <USART_LINCmd>:
  * @param  NewState: new state of the USART LIN mode.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_LINCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
20001f30:	b580      	push	{r7, lr}
20001f32:	b082      	sub	sp, #8
20001f34:	af00      	add	r7, sp, #0
20001f36:	6078      	str	r0, [r7, #4]
20001f38:	000a      	movs	r2, r1
20001f3a:	1cfb      	adds	r3, r7, #3
20001f3c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
20001f3e:	1cfb      	adds	r3, r7, #3
20001f40:	781b      	ldrb	r3, [r3, #0]
20001f42:	2b00      	cmp	r3, #0
20001f44:	d009      	beq.n	20001f5a <USART_LINCmd+0x2a>
  {
    /* Enable the LIN mode by setting the LINEN bit in the CR2 register */
    USARTx->CR2 |= USART_CR2_LINEN;
20001f46:	687b      	ldr	r3, [r7, #4]
20001f48:	8a1b      	ldrh	r3, [r3, #16]
20001f4a:	b29b      	uxth	r3, r3
20001f4c:	2280      	movs	r2, #128	; 0x80
20001f4e:	01d2      	lsls	r2, r2, #7
20001f50:	4313      	orrs	r3, r2
20001f52:	b29a      	uxth	r2, r3
20001f54:	687b      	ldr	r3, [r7, #4]
20001f56:	821a      	strh	r2, [r3, #16]
  else
  {
    /* Disable the LIN mode by clearing the LINEN bit in the CR2 register */
    USARTx->CR2 &= (uint16_t)~((uint16_t)USART_CR2_LINEN);
  }
}
20001f58:	e007      	b.n	20001f6a <USART_LINCmd+0x3a>
    USARTx->CR2 &= (uint16_t)~((uint16_t)USART_CR2_LINEN);
20001f5a:	687b      	ldr	r3, [r7, #4]
20001f5c:	8a1b      	ldrh	r3, [r3, #16]
20001f5e:	b29b      	uxth	r3, r3
20001f60:	4a04      	ldr	r2, [pc, #16]	; (20001f74 <USART_LINCmd+0x44>)
20001f62:	4013      	ands	r3, r2
20001f64:	b29a      	uxth	r2, r3
20001f66:	687b      	ldr	r3, [r7, #4]
20001f68:	821a      	strh	r2, [r3, #16]
}
20001f6a:	46c0      	nop			; (mov r8, r8)
20001f6c:	46bd      	mov	sp, r7
20001f6e:	b002      	add	sp, #8
20001f70:	bd80      	pop	{r7, pc}
20001f72:	46c0      	nop			; (mov r8, r8)
20001f74:	ffffbfff 			; <UNDEFINED> instruction: 0xffffbfff

20001f78 <USART_SendBreak>:
  * @param  USARTx: where x can be 1, 2, 3, 4, 5, 6, 7 or 8 to select the USART or 
  *         UART peripheral.
  * @retval None
  */
void USART_SendBreak(USART_TypeDef* USARTx)
{
20001f78:	b580      	push	{r7, lr}
20001f7a:	b082      	sub	sp, #8
20001f7c:	af00      	add	r7, sp, #0
20001f7e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Send break characters */
  USARTx->CR1 |= USART_CR1_SBK;
20001f80:	687b      	ldr	r3, [r7, #4]
20001f82:	899b      	ldrh	r3, [r3, #12]
20001f84:	b29b      	uxth	r3, r3
20001f86:	2201      	movs	r2, #1
20001f88:	4313      	orrs	r3, r2
20001f8a:	b29a      	uxth	r2, r3
20001f8c:	687b      	ldr	r3, [r7, #4]
20001f8e:	819a      	strh	r2, [r3, #12]
}
20001f90:	46c0      	nop			; (mov r8, r8)
20001f92:	46bd      	mov	sp, r7
20001f94:	b002      	add	sp, #8
20001f96:	bd80      	pop	{r7, pc}

20001f98 <USART_HalfDuplexCmd>:
  * @param  NewState: new state of the USART Communication.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_HalfDuplexCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
20001f98:	b580      	push	{r7, lr}
20001f9a:	b082      	sub	sp, #8
20001f9c:	af00      	add	r7, sp, #0
20001f9e:	6078      	str	r0, [r7, #4]
20001fa0:	000a      	movs	r2, r1
20001fa2:	1cfb      	adds	r3, r7, #3
20001fa4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
20001fa6:	1cfb      	adds	r3, r7, #3
20001fa8:	781b      	ldrb	r3, [r3, #0]
20001faa:	2b00      	cmp	r3, #0
20001fac:	d008      	beq.n	20001fc0 <USART_HalfDuplexCmd+0x28>
  {
    /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_HDSEL;
20001fae:	687b      	ldr	r3, [r7, #4]
20001fb0:	8a9b      	ldrh	r3, [r3, #20]
20001fb2:	b29b      	uxth	r3, r3
20001fb4:	2208      	movs	r2, #8
20001fb6:	4313      	orrs	r3, r2
20001fb8:	b29a      	uxth	r2, r3
20001fba:	687b      	ldr	r3, [r7, #4]
20001fbc:	829a      	strh	r2, [r3, #20]
  else
  {
    /* Disable the Half-Duplex mode by clearing the HDSEL bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_HDSEL);
  }
}
20001fbe:	e007      	b.n	20001fd0 <USART_HalfDuplexCmd+0x38>
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_HDSEL);
20001fc0:	687b      	ldr	r3, [r7, #4]
20001fc2:	8a9b      	ldrh	r3, [r3, #20]
20001fc4:	b29b      	uxth	r3, r3
20001fc6:	2208      	movs	r2, #8
20001fc8:	4393      	bics	r3, r2
20001fca:	b29a      	uxth	r2, r3
20001fcc:	687b      	ldr	r3, [r7, #4]
20001fce:	829a      	strh	r2, [r3, #20]
}
20001fd0:	46c0      	nop			; (mov r8, r8)
20001fd2:	46bd      	mov	sp, r7
20001fd4:	b002      	add	sp, #8
20001fd6:	bd80      	pop	{r7, pc}

20001fd8 <USART_SetGuardTime>:
  *         UART peripheral.
  * @param  USART_GuardTime: specifies the guard time.   
  * @retval None
  */
void USART_SetGuardTime(USART_TypeDef* USARTx, uint8_t USART_GuardTime)
{    
20001fd8:	b580      	push	{r7, lr}
20001fda:	b082      	sub	sp, #8
20001fdc:	af00      	add	r7, sp, #0
20001fde:	6078      	str	r0, [r7, #4]
20001fe0:	000a      	movs	r2, r1
20001fe2:	1cfb      	adds	r3, r7, #3
20001fe4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_USART_1236_PERIPH(USARTx));
  
  /* Clear the USART Guard time */
  USARTx->GTPR &= USART_GTPR_PSC;
20001fe6:	687b      	ldr	r3, [r7, #4]
20001fe8:	8b1b      	ldrh	r3, [r3, #24]
20001fea:	b29b      	uxth	r3, r3
20001fec:	22ff      	movs	r2, #255	; 0xff
20001fee:	4013      	ands	r3, r2
20001ff0:	b29a      	uxth	r2, r3
20001ff2:	687b      	ldr	r3, [r7, #4]
20001ff4:	831a      	strh	r2, [r3, #24]
  /* Set the USART guard time */
  USARTx->GTPR |= (uint16_t)((uint16_t)USART_GuardTime << 0x08);
20001ff6:	687b      	ldr	r3, [r7, #4]
20001ff8:	8b1b      	ldrh	r3, [r3, #24]
20001ffa:	b29a      	uxth	r2, r3
20001ffc:	1cfb      	adds	r3, r7, #3
20001ffe:	781b      	ldrb	r3, [r3, #0]
20002000:	b29b      	uxth	r3, r3
20002002:	021b      	lsls	r3, r3, #8
20002004:	b29b      	uxth	r3, r3
20002006:	4313      	orrs	r3, r2
20002008:	b29a      	uxth	r2, r3
2000200a:	687b      	ldr	r3, [r7, #4]
2000200c:	831a      	strh	r2, [r3, #24]
}
2000200e:	46c0      	nop			; (mov r8, r8)
20002010:	46bd      	mov	sp, r7
20002012:	b002      	add	sp, #8
20002014:	bd80      	pop	{r7, pc}

20002016 <USART_SmartCardCmd>:
  * @param  NewState: new state of the Smart Card mode.
  *          This parameter can be: ENABLE or DISABLE.      
  * @retval None
  */
void USART_SmartCardCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
20002016:	b580      	push	{r7, lr}
20002018:	b082      	sub	sp, #8
2000201a:	af00      	add	r7, sp, #0
2000201c:	6078      	str	r0, [r7, #4]
2000201e:	000a      	movs	r2, r1
20002020:	1cfb      	adds	r3, r7, #3
20002022:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_USART_1236_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
20002024:	1cfb      	adds	r3, r7, #3
20002026:	781b      	ldrb	r3, [r3, #0]
20002028:	2b00      	cmp	r3, #0
2000202a:	d008      	beq.n	2000203e <USART_SmartCardCmd+0x28>
  {
    /* Enable the SC mode by setting the SCEN bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_SCEN;
2000202c:	687b      	ldr	r3, [r7, #4]
2000202e:	8a9b      	ldrh	r3, [r3, #20]
20002030:	b29b      	uxth	r3, r3
20002032:	2220      	movs	r2, #32
20002034:	4313      	orrs	r3, r2
20002036:	b29a      	uxth	r2, r3
20002038:	687b      	ldr	r3, [r7, #4]
2000203a:	829a      	strh	r2, [r3, #20]
  else
  {
    /* Disable the SC mode by clearing the SCEN bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_SCEN);
  }
}
2000203c:	e007      	b.n	2000204e <USART_SmartCardCmd+0x38>
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_SCEN);
2000203e:	687b      	ldr	r3, [r7, #4]
20002040:	8a9b      	ldrh	r3, [r3, #20]
20002042:	b29b      	uxth	r3, r3
20002044:	2220      	movs	r2, #32
20002046:	4393      	bics	r3, r2
20002048:	b29a      	uxth	r2, r3
2000204a:	687b      	ldr	r3, [r7, #4]
2000204c:	829a      	strh	r2, [r3, #20]
}
2000204e:	46c0      	nop			; (mov r8, r8)
20002050:	46bd      	mov	sp, r7
20002052:	b002      	add	sp, #8
20002054:	bd80      	pop	{r7, pc}

20002056 <USART_SmartCardNACKCmd>:
  * @param  NewState: new state of the NACK transmission.
  *          This parameter can be: ENABLE or DISABLE.  
  * @retval None
  */
void USART_SmartCardNACKCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
20002056:	b580      	push	{r7, lr}
20002058:	b082      	sub	sp, #8
2000205a:	af00      	add	r7, sp, #0
2000205c:	6078      	str	r0, [r7, #4]
2000205e:	000a      	movs	r2, r1
20002060:	1cfb      	adds	r3, r7, #3
20002062:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_USART_1236_PERIPH(USARTx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
20002064:	1cfb      	adds	r3, r7, #3
20002066:	781b      	ldrb	r3, [r3, #0]
20002068:	2b00      	cmp	r3, #0
2000206a:	d008      	beq.n	2000207e <USART_SmartCardNACKCmd+0x28>
  {
    /* Enable the NACK transmission by setting the NACK bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_NACK;
2000206c:	687b      	ldr	r3, [r7, #4]
2000206e:	8a9b      	ldrh	r3, [r3, #20]
20002070:	b29b      	uxth	r3, r3
20002072:	2210      	movs	r2, #16
20002074:	4313      	orrs	r3, r2
20002076:	b29a      	uxth	r2, r3
20002078:	687b      	ldr	r3, [r7, #4]
2000207a:	829a      	strh	r2, [r3, #20]
  else
  {
    /* Disable the NACK transmission by clearing the NACK bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_NACK);
  }
}
2000207c:	e007      	b.n	2000208e <USART_SmartCardNACKCmd+0x38>
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_NACK);
2000207e:	687b      	ldr	r3, [r7, #4]
20002080:	8a9b      	ldrh	r3, [r3, #20]
20002082:	b29b      	uxth	r3, r3
20002084:	2210      	movs	r2, #16
20002086:	4393      	bics	r3, r2
20002088:	b29a      	uxth	r2, r3
2000208a:	687b      	ldr	r3, [r7, #4]
2000208c:	829a      	strh	r2, [r3, #20]
}
2000208e:	46c0      	nop			; (mov r8, r8)
20002090:	46bd      	mov	sp, r7
20002092:	b002      	add	sp, #8
20002094:	bd80      	pop	{r7, pc}

20002096 <USART_IrDAConfig>:
  *            @arg USART_IrDAMode_LowPower
  *            @arg USART_IrDAMode_Normal
  * @retval None
  */
void USART_IrDAConfig(USART_TypeDef* USARTx, uint16_t USART_IrDAMode)
{
20002096:	b580      	push	{r7, lr}
20002098:	b082      	sub	sp, #8
2000209a:	af00      	add	r7, sp, #0
2000209c:	6078      	str	r0, [r7, #4]
2000209e:	000a      	movs	r2, r1
200020a0:	1cbb      	adds	r3, r7, #2
200020a2:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_IRDA_MODE(USART_IrDAMode));
    
  USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_IRLP);
200020a4:	687b      	ldr	r3, [r7, #4]
200020a6:	8a9b      	ldrh	r3, [r3, #20]
200020a8:	b29b      	uxth	r3, r3
200020aa:	2204      	movs	r2, #4
200020ac:	4393      	bics	r3, r2
200020ae:	b29a      	uxth	r2, r3
200020b0:	687b      	ldr	r3, [r7, #4]
200020b2:	829a      	strh	r2, [r3, #20]
  USARTx->CR3 |= USART_IrDAMode;
200020b4:	687b      	ldr	r3, [r7, #4]
200020b6:	8a9b      	ldrh	r3, [r3, #20]
200020b8:	b29a      	uxth	r2, r3
200020ba:	1cbb      	adds	r3, r7, #2
200020bc:	881b      	ldrh	r3, [r3, #0]
200020be:	4313      	orrs	r3, r2
200020c0:	b29a      	uxth	r2, r3
200020c2:	687b      	ldr	r3, [r7, #4]
200020c4:	829a      	strh	r2, [r3, #20]
}
200020c6:	46c0      	nop			; (mov r8, r8)
200020c8:	46bd      	mov	sp, r7
200020ca:	b002      	add	sp, #8
200020cc:	bd80      	pop	{r7, pc}

200020ce <USART_IrDACmd>:
  * @param  NewState: new state of the IrDA mode.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_IrDACmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
200020ce:	b580      	push	{r7, lr}
200020d0:	b082      	sub	sp, #8
200020d2:	af00      	add	r7, sp, #0
200020d4:	6078      	str	r0, [r7, #4]
200020d6:	000a      	movs	r2, r1
200020d8:	1cfb      	adds	r3, r7, #3
200020da:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
    
  if (NewState != DISABLE)
200020dc:	1cfb      	adds	r3, r7, #3
200020de:	781b      	ldrb	r3, [r3, #0]
200020e0:	2b00      	cmp	r3, #0
200020e2:	d008      	beq.n	200020f6 <USART_IrDACmd+0x28>
  {
    /* Enable the IrDA mode by setting the IREN bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_IREN;
200020e4:	687b      	ldr	r3, [r7, #4]
200020e6:	8a9b      	ldrh	r3, [r3, #20]
200020e8:	b29b      	uxth	r3, r3
200020ea:	2202      	movs	r2, #2
200020ec:	4313      	orrs	r3, r2
200020ee:	b29a      	uxth	r2, r3
200020f0:	687b      	ldr	r3, [r7, #4]
200020f2:	829a      	strh	r2, [r3, #20]
  else
  {
    /* Disable the IrDA mode by clearing the IREN bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_IREN);
  }
}
200020f4:	e007      	b.n	20002106 <USART_IrDACmd+0x38>
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_IREN);
200020f6:	687b      	ldr	r3, [r7, #4]
200020f8:	8a9b      	ldrh	r3, [r3, #20]
200020fa:	b29b      	uxth	r3, r3
200020fc:	2202      	movs	r2, #2
200020fe:	4393      	bics	r3, r2
20002100:	b29a      	uxth	r2, r3
20002102:	687b      	ldr	r3, [r7, #4]
20002104:	829a      	strh	r2, [r3, #20]
}
20002106:	46c0      	nop			; (mov r8, r8)
20002108:	46bd      	mov	sp, r7
2000210a:	b002      	add	sp, #8
2000210c:	bd80      	pop	{r7, pc}

2000210e <USART_DMACmd>:
  * @param  NewState: new state of the DMA Request sources.
  *          This parameter can be: ENABLE or DISABLE.   
  * @retval None
  */
void USART_DMACmd(USART_TypeDef* USARTx, uint16_t USART_DMAReq, FunctionalState NewState)
{
2000210e:	b580      	push	{r7, lr}
20002110:	b082      	sub	sp, #8
20002112:	af00      	add	r7, sp, #0
20002114:	6078      	str	r0, [r7, #4]
20002116:	0008      	movs	r0, r1
20002118:	0011      	movs	r1, r2
2000211a:	1cbb      	adds	r3, r7, #2
2000211c:	1c02      	adds	r2, r0, #0
2000211e:	801a      	strh	r2, [r3, #0]
20002120:	1c7b      	adds	r3, r7, #1
20002122:	1c0a      	adds	r2, r1, #0
20002124:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DMAREQ(USART_DMAReq));  
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 

  if (NewState != DISABLE)
20002126:	1c7b      	adds	r3, r7, #1
20002128:	781b      	ldrb	r3, [r3, #0]
2000212a:	2b00      	cmp	r3, #0
2000212c:	d009      	beq.n	20002142 <USART_DMACmd+0x34>
  {
    /* Enable the DMA transfer for selected requests by setting the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 |= USART_DMAReq;
2000212e:	687b      	ldr	r3, [r7, #4]
20002130:	8a9b      	ldrh	r3, [r3, #20]
20002132:	b29a      	uxth	r2, r3
20002134:	1cbb      	adds	r3, r7, #2
20002136:	881b      	ldrh	r3, [r3, #0]
20002138:	4313      	orrs	r3, r2
2000213a:	b29a      	uxth	r2, r3
2000213c:	687b      	ldr	r3, [r7, #4]
2000213e:	829a      	strh	r2, [r3, #20]
  {
    /* Disable the DMA transfer for selected requests by clearing the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 &= (uint16_t)~USART_DMAReq;
  }
}
20002140:	e00a      	b.n	20002158 <USART_DMACmd+0x4a>
    USARTx->CR3 &= (uint16_t)~USART_DMAReq;
20002142:	687b      	ldr	r3, [r7, #4]
20002144:	8a9b      	ldrh	r3, [r3, #20]
20002146:	b29b      	uxth	r3, r3
20002148:	1cba      	adds	r2, r7, #2
2000214a:	8812      	ldrh	r2, [r2, #0]
2000214c:	43d2      	mvns	r2, r2
2000214e:	b292      	uxth	r2, r2
20002150:	4013      	ands	r3, r2
20002152:	b29a      	uxth	r2, r3
20002154:	687b      	ldr	r3, [r7, #4]
20002156:	829a      	strh	r2, [r3, #20]
}
20002158:	46c0      	nop			; (mov r8, r8)
2000215a:	46bd      	mov	sp, r7
2000215c:	b002      	add	sp, #8
2000215e:	bd80      	pop	{r7, pc}

20002160 <USART_ITConfig>:
  * @param  NewState: new state of the specified USARTx interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState)
{
20002160:	b580      	push	{r7, lr}
20002162:	b086      	sub	sp, #24
20002164:	af00      	add	r7, sp, #0
20002166:	6078      	str	r0, [r7, #4]
20002168:	0008      	movs	r0, r1
2000216a:	0011      	movs	r1, r2
2000216c:	1cbb      	adds	r3, r7, #2
2000216e:	1c02      	adds	r2, r0, #0
20002170:	801a      	strh	r2, [r3, #0]
20002172:	1c7b      	adds	r3, r7, #1
20002174:	1c0a      	adds	r2, r1, #0
20002176:	701a      	strb	r2, [r3, #0]
  uint32_t usartreg = 0x00, itpos = 0x00, itmask = 0x00;
20002178:	2300      	movs	r3, #0
2000217a:	613b      	str	r3, [r7, #16]
2000217c:	2300      	movs	r3, #0
2000217e:	60fb      	str	r3, [r7, #12]
20002180:	2300      	movs	r3, #0
20002182:	60bb      	str	r3, [r7, #8]
  uint32_t usartxbase = 0x00;
20002184:	2300      	movs	r3, #0
20002186:	617b      	str	r3, [r7, #20]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  usartxbase = (uint32_t)USARTx;
20002188:	687b      	ldr	r3, [r7, #4]
2000218a:	617b      	str	r3, [r7, #20]

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
2000218c:	1cbb      	adds	r3, r7, #2
2000218e:	881b      	ldrh	r3, [r3, #0]
20002190:	b2db      	uxtb	r3, r3
20002192:	095b      	lsrs	r3, r3, #5
20002194:	b2db      	uxtb	r3, r3
20002196:	613b      	str	r3, [r7, #16]

  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
20002198:	1cbb      	adds	r3, r7, #2
2000219a:	881b      	ldrh	r3, [r3, #0]
2000219c:	221f      	movs	r2, #31
2000219e:	4013      	ands	r3, r2
200021a0:	60fb      	str	r3, [r7, #12]
  itmask = (((uint32_t)0x01) << itpos);
200021a2:	2201      	movs	r2, #1
200021a4:	68fb      	ldr	r3, [r7, #12]
200021a6:	409a      	lsls	r2, r3
200021a8:	0013      	movs	r3, r2
200021aa:	60bb      	str	r3, [r7, #8]
    
  if (usartreg == 0x01) /* The IT is in CR1 register */
200021ac:	693b      	ldr	r3, [r7, #16]
200021ae:	2b01      	cmp	r3, #1
200021b0:	d103      	bne.n	200021ba <USART_ITConfig+0x5a>
  {
    usartxbase += 0x0C;
200021b2:	697b      	ldr	r3, [r7, #20]
200021b4:	330c      	adds	r3, #12
200021b6:	617b      	str	r3, [r7, #20]
200021b8:	e009      	b.n	200021ce <USART_ITConfig+0x6e>
  }
  else if (usartreg == 0x02) /* The IT is in CR2 register */
200021ba:	693b      	ldr	r3, [r7, #16]
200021bc:	2b02      	cmp	r3, #2
200021be:	d103      	bne.n	200021c8 <USART_ITConfig+0x68>
  {
    usartxbase += 0x10;
200021c0:	697b      	ldr	r3, [r7, #20]
200021c2:	3310      	adds	r3, #16
200021c4:	617b      	str	r3, [r7, #20]
200021c6:	e002      	b.n	200021ce <USART_ITConfig+0x6e>
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14; 
200021c8:	697b      	ldr	r3, [r7, #20]
200021ca:	3314      	adds	r3, #20
200021cc:	617b      	str	r3, [r7, #20]
  }
  if (NewState != DISABLE)
200021ce:	1c7b      	adds	r3, r7, #1
200021d0:	781b      	ldrb	r3, [r3, #0]
200021d2:	2b00      	cmp	r3, #0
200021d4:	d006      	beq.n	200021e4 <USART_ITConfig+0x84>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
200021d6:	697b      	ldr	r3, [r7, #20]
200021d8:	6819      	ldr	r1, [r3, #0]
200021da:	697b      	ldr	r3, [r7, #20]
200021dc:	68ba      	ldr	r2, [r7, #8]
200021de:	430a      	orrs	r2, r1
200021e0:	601a      	str	r2, [r3, #0]
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
  }
}
200021e2:	e006      	b.n	200021f2 <USART_ITConfig+0x92>
    *(__IO uint32_t*)usartxbase &= ~itmask;
200021e4:	697b      	ldr	r3, [r7, #20]
200021e6:	681a      	ldr	r2, [r3, #0]
200021e8:	68bb      	ldr	r3, [r7, #8]
200021ea:	43d9      	mvns	r1, r3
200021ec:	697b      	ldr	r3, [r7, #20]
200021ee:	400a      	ands	r2, r1
200021f0:	601a      	str	r2, [r3, #0]
}
200021f2:	46c0      	nop			; (mov r8, r8)
200021f4:	46bd      	mov	sp, r7
200021f6:	b006      	add	sp, #24
200021f8:	bd80      	pop	{r7, pc}

200021fa <USART_GetFlagStatus>:
  *            @arg USART_FLAG_FE:   Framing Error flag
  *            @arg USART_FLAG_PE:   Parity Error flag
  * @retval The new state of USART_FLAG (SET or RESET).
  */
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
200021fa:	b580      	push	{r7, lr}
200021fc:	b084      	sub	sp, #16
200021fe:	af00      	add	r7, sp, #0
20002200:	6078      	str	r0, [r7, #4]
20002202:	000a      	movs	r2, r1
20002204:	1cbb      	adds	r3, r7, #2
20002206:	801a      	strh	r2, [r3, #0]
  FlagStatus bitstatus = RESET;
20002208:	230f      	movs	r3, #15
2000220a:	18fb      	adds	r3, r7, r3
2000220c:	2200      	movs	r2, #0
2000220e:	701a      	strb	r2, [r3, #0]
  if (USART_FLAG == USART_FLAG_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  if ((USARTx->SR & USART_FLAG) != (uint16_t)RESET)
20002210:	687b      	ldr	r3, [r7, #4]
20002212:	881b      	ldrh	r3, [r3, #0]
20002214:	b29b      	uxth	r3, r3
20002216:	1cba      	adds	r2, r7, #2
20002218:	8812      	ldrh	r2, [r2, #0]
2000221a:	4013      	ands	r3, r2
2000221c:	b29b      	uxth	r3, r3
2000221e:	2b00      	cmp	r3, #0
20002220:	d004      	beq.n	2000222c <USART_GetFlagStatus+0x32>
  {
    bitstatus = SET;
20002222:	230f      	movs	r3, #15
20002224:	18fb      	adds	r3, r7, r3
20002226:	2201      	movs	r2, #1
20002228:	701a      	strb	r2, [r3, #0]
2000222a:	e003      	b.n	20002234 <USART_GetFlagStatus+0x3a>
  }
  else
  {
    bitstatus = RESET;
2000222c:	230f      	movs	r3, #15
2000222e:	18fb      	adds	r3, r7, r3
20002230:	2200      	movs	r2, #0
20002232:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
20002234:	230f      	movs	r3, #15
20002236:	18fb      	adds	r3, r7, r3
20002238:	781b      	ldrb	r3, [r3, #0]
}
2000223a:	0018      	movs	r0, r3
2000223c:	46bd      	mov	sp, r7
2000223e:	b004      	add	sp, #16
20002240:	bd80      	pop	{r7, pc}

20002242 <USART_ClearFlag>:
  *          (USART_SendData()).
  *   
  * @retval None
  */
void USART_ClearFlag(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
20002242:	b580      	push	{r7, lr}
20002244:	b082      	sub	sp, #8
20002246:	af00      	add	r7, sp, #0
20002248:	6078      	str	r0, [r7, #4]
2000224a:	000a      	movs	r2, r1
2000224c:	1cbb      	adds	r3, r7, #2
2000224e:	801a      	strh	r2, [r3, #0]
  if ((USART_FLAG & USART_FLAG_CTS) == USART_FLAG_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
       
  USARTx->SR = (uint16_t)~USART_FLAG;
20002250:	1cbb      	adds	r3, r7, #2
20002252:	881b      	ldrh	r3, [r3, #0]
20002254:	43db      	mvns	r3, r3
20002256:	b29a      	uxth	r2, r3
20002258:	687b      	ldr	r3, [r7, #4]
2000225a:	801a      	strh	r2, [r3, #0]
}
2000225c:	46c0      	nop			; (mov r8, r8)
2000225e:	46bd      	mov	sp, r7
20002260:	b002      	add	sp, #8
20002262:	bd80      	pop	{r7, pc}

20002264 <USART_GetITStatus>:
  *            @arg USART_IT_FE:   Framing Error interrupt
  *            @arg USART_IT_PE:   Parity Error interrupt
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT)
{
20002264:	b580      	push	{r7, lr}
20002266:	b086      	sub	sp, #24
20002268:	af00      	add	r7, sp, #0
2000226a:	6078      	str	r0, [r7, #4]
2000226c:	000a      	movs	r2, r1
2000226e:	1cbb      	adds	r3, r7, #2
20002270:	801a      	strh	r2, [r3, #0]
  uint32_t bitpos = 0x00, itmask = 0x00, usartreg = 0x00;
20002272:	2300      	movs	r3, #0
20002274:	60fb      	str	r3, [r7, #12]
20002276:	2300      	movs	r3, #0
20002278:	617b      	str	r3, [r7, #20]
2000227a:	2300      	movs	r3, #0
2000227c:	60bb      	str	r3, [r7, #8]
  ITStatus bitstatus = RESET;
2000227e:	2313      	movs	r3, #19
20002280:	18fb      	adds	r3, r7, r3
20002282:	2200      	movs	r2, #0
20002284:	701a      	strb	r2, [r3, #0]
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
20002286:	1cbb      	adds	r3, r7, #2
20002288:	881b      	ldrh	r3, [r3, #0]
2000228a:	b2db      	uxtb	r3, r3
2000228c:	095b      	lsrs	r3, r3, #5
2000228e:	b2db      	uxtb	r3, r3
20002290:	60bb      	str	r3, [r7, #8]
  /* Get the interrupt position */
  itmask = USART_IT & IT_MASK;
20002292:	1cbb      	adds	r3, r7, #2
20002294:	881b      	ldrh	r3, [r3, #0]
20002296:	221f      	movs	r2, #31
20002298:	4013      	ands	r3, r2
2000229a:	617b      	str	r3, [r7, #20]
  itmask = (uint32_t)0x01 << itmask;
2000229c:	2201      	movs	r2, #1
2000229e:	697b      	ldr	r3, [r7, #20]
200022a0:	409a      	lsls	r2, r3
200022a2:	0013      	movs	r3, r2
200022a4:	617b      	str	r3, [r7, #20]
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
200022a6:	68bb      	ldr	r3, [r7, #8]
200022a8:	2b01      	cmp	r3, #1
200022aa:	d107      	bne.n	200022bc <USART_GetITStatus+0x58>
  {
    itmask &= USARTx->CR1;
200022ac:	687b      	ldr	r3, [r7, #4]
200022ae:	899b      	ldrh	r3, [r3, #12]
200022b0:	b29b      	uxth	r3, r3
200022b2:	001a      	movs	r2, r3
200022b4:	697b      	ldr	r3, [r7, #20]
200022b6:	4013      	ands	r3, r2
200022b8:	617b      	str	r3, [r7, #20]
200022ba:	e011      	b.n	200022e0 <USART_GetITStatus+0x7c>
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
200022bc:	68bb      	ldr	r3, [r7, #8]
200022be:	2b02      	cmp	r3, #2
200022c0:	d107      	bne.n	200022d2 <USART_GetITStatus+0x6e>
  {
    itmask &= USARTx->CR2;
200022c2:	687b      	ldr	r3, [r7, #4]
200022c4:	8a1b      	ldrh	r3, [r3, #16]
200022c6:	b29b      	uxth	r3, r3
200022c8:	001a      	movs	r2, r3
200022ca:	697b      	ldr	r3, [r7, #20]
200022cc:	4013      	ands	r3, r2
200022ce:	617b      	str	r3, [r7, #20]
200022d0:	e006      	b.n	200022e0 <USART_GetITStatus+0x7c>
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
200022d2:	687b      	ldr	r3, [r7, #4]
200022d4:	8a9b      	ldrh	r3, [r3, #20]
200022d6:	b29b      	uxth	r3, r3
200022d8:	001a      	movs	r2, r3
200022da:	697b      	ldr	r3, [r7, #20]
200022dc:	4013      	ands	r3, r2
200022de:	617b      	str	r3, [r7, #20]
  }
  
  bitpos = USART_IT >> 0x08;
200022e0:	1cbb      	adds	r3, r7, #2
200022e2:	881b      	ldrh	r3, [r3, #0]
200022e4:	0a1b      	lsrs	r3, r3, #8
200022e6:	b29b      	uxth	r3, r3
200022e8:	60fb      	str	r3, [r7, #12]
  bitpos = (uint32_t)0x01 << bitpos;
200022ea:	2201      	movs	r2, #1
200022ec:	68fb      	ldr	r3, [r7, #12]
200022ee:	409a      	lsls	r2, r3
200022f0:	0013      	movs	r3, r2
200022f2:	60fb      	str	r3, [r7, #12]
  bitpos &= USARTx->SR;
200022f4:	687b      	ldr	r3, [r7, #4]
200022f6:	881b      	ldrh	r3, [r3, #0]
200022f8:	b29b      	uxth	r3, r3
200022fa:	001a      	movs	r2, r3
200022fc:	68fb      	ldr	r3, [r7, #12]
200022fe:	4013      	ands	r3, r2
20002300:	60fb      	str	r3, [r7, #12]
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
20002302:	697b      	ldr	r3, [r7, #20]
20002304:	2b00      	cmp	r3, #0
20002306:	d007      	beq.n	20002318 <USART_GetITStatus+0xb4>
20002308:	68fb      	ldr	r3, [r7, #12]
2000230a:	2b00      	cmp	r3, #0
2000230c:	d004      	beq.n	20002318 <USART_GetITStatus+0xb4>
  {
    bitstatus = SET;
2000230e:	2313      	movs	r3, #19
20002310:	18fb      	adds	r3, r7, r3
20002312:	2201      	movs	r2, #1
20002314:	701a      	strb	r2, [r3, #0]
20002316:	e003      	b.n	20002320 <USART_GetITStatus+0xbc>
  }
  else
  {
    bitstatus = RESET;
20002318:	2313      	movs	r3, #19
2000231a:	18fb      	adds	r3, r7, r3
2000231c:	2200      	movs	r2, #0
2000231e:	701a      	strb	r2, [r3, #0]
  }
  
  return bitstatus;  
20002320:	2313      	movs	r3, #19
20002322:	18fb      	adds	r3, r7, r3
20002324:	781b      	ldrb	r3, [r3, #0]
}
20002326:	0018      	movs	r0, r3
20002328:	46bd      	mov	sp, r7
2000232a:	b006      	add	sp, #24
2000232c:	bd80      	pop	{r7, pc}

2000232e <USART_ClearITPendingBit>:
  *          (USART_SendData()).
  *  
  * @retval None
  */
void USART_ClearITPendingBit(USART_TypeDef* USARTx, uint16_t USART_IT)
{
2000232e:	b580      	push	{r7, lr}
20002330:	b084      	sub	sp, #16
20002332:	af00      	add	r7, sp, #0
20002334:	6078      	str	r0, [r7, #4]
20002336:	000a      	movs	r2, r1
20002338:	1cbb      	adds	r3, r7, #2
2000233a:	801a      	strh	r2, [r3, #0]
  uint16_t bitpos = 0x00, itmask = 0x00;
2000233c:	210e      	movs	r1, #14
2000233e:	187b      	adds	r3, r7, r1
20002340:	2200      	movs	r2, #0
20002342:	801a      	strh	r2, [r3, #0]
20002344:	200c      	movs	r0, #12
20002346:	183b      	adds	r3, r7, r0
20002348:	2200      	movs	r2, #0
2000234a:	801a      	strh	r2, [r3, #0]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  bitpos = USART_IT >> 0x08;
2000234c:	187b      	adds	r3, r7, r1
2000234e:	1cba      	adds	r2, r7, #2
20002350:	8812      	ldrh	r2, [r2, #0]
20002352:	0a12      	lsrs	r2, r2, #8
20002354:	801a      	strh	r2, [r3, #0]
  itmask = ((uint16_t)0x01 << (uint16_t)bitpos);
20002356:	187b      	adds	r3, r7, r1
20002358:	881b      	ldrh	r3, [r3, #0]
2000235a:	2201      	movs	r2, #1
2000235c:	409a      	lsls	r2, r3
2000235e:	183b      	adds	r3, r7, r0
20002360:	801a      	strh	r2, [r3, #0]
  USARTx->SR = (uint16_t)~itmask;
20002362:	183b      	adds	r3, r7, r0
20002364:	881b      	ldrh	r3, [r3, #0]
20002366:	43db      	mvns	r3, r3
20002368:	b29a      	uxth	r2, r3
2000236a:	687b      	ldr	r3, [r7, #4]
2000236c:	801a      	strh	r2, [r3, #0]
}
2000236e:	46c0      	nop			; (mov r8, r8)
20002370:	46bd      	mov	sp, r7
20002372:	b004      	add	sp, #16
20002374:	bd80      	pop	{r7, pc}
20002376:	46c0      	nop			; (mov r8, r8)

20002378 <__udivsi3>:
20002378:	2200      	movs	r2, #0
2000237a:	0843      	lsrs	r3, r0, #1
2000237c:	428b      	cmp	r3, r1
2000237e:	d374      	bcc.n	2000246a <__udivsi3+0xf2>
20002380:	0903      	lsrs	r3, r0, #4
20002382:	428b      	cmp	r3, r1
20002384:	d35f      	bcc.n	20002446 <__udivsi3+0xce>
20002386:	0a03      	lsrs	r3, r0, #8
20002388:	428b      	cmp	r3, r1
2000238a:	d344      	bcc.n	20002416 <__udivsi3+0x9e>
2000238c:	0b03      	lsrs	r3, r0, #12
2000238e:	428b      	cmp	r3, r1
20002390:	d328      	bcc.n	200023e4 <__udivsi3+0x6c>
20002392:	0c03      	lsrs	r3, r0, #16
20002394:	428b      	cmp	r3, r1
20002396:	d30d      	bcc.n	200023b4 <__udivsi3+0x3c>
20002398:	22ff      	movs	r2, #255	; 0xff
2000239a:	0209      	lsls	r1, r1, #8
2000239c:	ba12      	rev	r2, r2
2000239e:	0c03      	lsrs	r3, r0, #16
200023a0:	428b      	cmp	r3, r1
200023a2:	d302      	bcc.n	200023aa <__udivsi3+0x32>
200023a4:	1212      	asrs	r2, r2, #8
200023a6:	0209      	lsls	r1, r1, #8
200023a8:	d065      	beq.n	20002476 <__udivsi3+0xfe>
200023aa:	0b03      	lsrs	r3, r0, #12
200023ac:	428b      	cmp	r3, r1
200023ae:	d319      	bcc.n	200023e4 <__udivsi3+0x6c>
200023b0:	e000      	b.n	200023b4 <__udivsi3+0x3c>
200023b2:	0a09      	lsrs	r1, r1, #8
200023b4:	0bc3      	lsrs	r3, r0, #15
200023b6:	428b      	cmp	r3, r1
200023b8:	d301      	bcc.n	200023be <__udivsi3+0x46>
200023ba:	03cb      	lsls	r3, r1, #15
200023bc:	1ac0      	subs	r0, r0, r3
200023be:	4152      	adcs	r2, r2
200023c0:	0b83      	lsrs	r3, r0, #14
200023c2:	428b      	cmp	r3, r1
200023c4:	d301      	bcc.n	200023ca <__udivsi3+0x52>
200023c6:	038b      	lsls	r3, r1, #14
200023c8:	1ac0      	subs	r0, r0, r3
200023ca:	4152      	adcs	r2, r2
200023cc:	0b43      	lsrs	r3, r0, #13
200023ce:	428b      	cmp	r3, r1
200023d0:	d301      	bcc.n	200023d6 <__udivsi3+0x5e>
200023d2:	034b      	lsls	r3, r1, #13
200023d4:	1ac0      	subs	r0, r0, r3
200023d6:	4152      	adcs	r2, r2
200023d8:	0b03      	lsrs	r3, r0, #12
200023da:	428b      	cmp	r3, r1
200023dc:	d301      	bcc.n	200023e2 <__udivsi3+0x6a>
200023de:	030b      	lsls	r3, r1, #12
200023e0:	1ac0      	subs	r0, r0, r3
200023e2:	4152      	adcs	r2, r2
200023e4:	0ac3      	lsrs	r3, r0, #11
200023e6:	428b      	cmp	r3, r1
200023e8:	d301      	bcc.n	200023ee <__udivsi3+0x76>
200023ea:	02cb      	lsls	r3, r1, #11
200023ec:	1ac0      	subs	r0, r0, r3
200023ee:	4152      	adcs	r2, r2
200023f0:	0a83      	lsrs	r3, r0, #10
200023f2:	428b      	cmp	r3, r1
200023f4:	d301      	bcc.n	200023fa <__udivsi3+0x82>
200023f6:	028b      	lsls	r3, r1, #10
200023f8:	1ac0      	subs	r0, r0, r3
200023fa:	4152      	adcs	r2, r2
200023fc:	0a43      	lsrs	r3, r0, #9
200023fe:	428b      	cmp	r3, r1
20002400:	d301      	bcc.n	20002406 <__udivsi3+0x8e>
20002402:	024b      	lsls	r3, r1, #9
20002404:	1ac0      	subs	r0, r0, r3
20002406:	4152      	adcs	r2, r2
20002408:	0a03      	lsrs	r3, r0, #8
2000240a:	428b      	cmp	r3, r1
2000240c:	d301      	bcc.n	20002412 <__udivsi3+0x9a>
2000240e:	020b      	lsls	r3, r1, #8
20002410:	1ac0      	subs	r0, r0, r3
20002412:	4152      	adcs	r2, r2
20002414:	d2cd      	bcs.n	200023b2 <__udivsi3+0x3a>
20002416:	09c3      	lsrs	r3, r0, #7
20002418:	428b      	cmp	r3, r1
2000241a:	d301      	bcc.n	20002420 <__udivsi3+0xa8>
2000241c:	01cb      	lsls	r3, r1, #7
2000241e:	1ac0      	subs	r0, r0, r3
20002420:	4152      	adcs	r2, r2
20002422:	0983      	lsrs	r3, r0, #6
20002424:	428b      	cmp	r3, r1
20002426:	d301      	bcc.n	2000242c <__udivsi3+0xb4>
20002428:	018b      	lsls	r3, r1, #6
2000242a:	1ac0      	subs	r0, r0, r3
2000242c:	4152      	adcs	r2, r2
2000242e:	0943      	lsrs	r3, r0, #5
20002430:	428b      	cmp	r3, r1
20002432:	d301      	bcc.n	20002438 <__udivsi3+0xc0>
20002434:	014b      	lsls	r3, r1, #5
20002436:	1ac0      	subs	r0, r0, r3
20002438:	4152      	adcs	r2, r2
2000243a:	0903      	lsrs	r3, r0, #4
2000243c:	428b      	cmp	r3, r1
2000243e:	d301      	bcc.n	20002444 <__udivsi3+0xcc>
20002440:	010b      	lsls	r3, r1, #4
20002442:	1ac0      	subs	r0, r0, r3
20002444:	4152      	adcs	r2, r2
20002446:	08c3      	lsrs	r3, r0, #3
20002448:	428b      	cmp	r3, r1
2000244a:	d301      	bcc.n	20002450 <__udivsi3+0xd8>
2000244c:	00cb      	lsls	r3, r1, #3
2000244e:	1ac0      	subs	r0, r0, r3
20002450:	4152      	adcs	r2, r2
20002452:	0883      	lsrs	r3, r0, #2
20002454:	428b      	cmp	r3, r1
20002456:	d301      	bcc.n	2000245c <__udivsi3+0xe4>
20002458:	008b      	lsls	r3, r1, #2
2000245a:	1ac0      	subs	r0, r0, r3
2000245c:	4152      	adcs	r2, r2
2000245e:	0843      	lsrs	r3, r0, #1
20002460:	428b      	cmp	r3, r1
20002462:	d301      	bcc.n	20002468 <__udivsi3+0xf0>
20002464:	004b      	lsls	r3, r1, #1
20002466:	1ac0      	subs	r0, r0, r3
20002468:	4152      	adcs	r2, r2
2000246a:	1a41      	subs	r1, r0, r1
2000246c:	d200      	bcs.n	20002470 <__udivsi3+0xf8>
2000246e:	4601      	mov	r1, r0
20002470:	4152      	adcs	r2, r2
20002472:	4610      	mov	r0, r2
20002474:	4770      	bx	lr
20002476:	e7ff      	b.n	20002478 <__udivsi3+0x100>
20002478:	b501      	push	{r0, lr}
2000247a:	2000      	movs	r0, #0
2000247c:	f000 f806 	bl	2000248c <__aeabi_idiv0>
20002480:	bd02      	pop	{r1, pc}
20002482:	46c0      	nop			; (mov r8, r8)

20002484 <__aeabi_uidivmod>:
20002484:	2900      	cmp	r1, #0
20002486:	d0f7      	beq.n	20002478 <__udivsi3+0x100>
20002488:	e776      	b.n	20002378 <__udivsi3>
2000248a:	4770      	bx	lr

2000248c <__aeabi_idiv0>:
2000248c:	4770      	bx	lr
2000248e:	46c0      	nop			; (mov r8, r8)

20002490 <msTicks>:
20002490:	00000000 	andeq	r0, r0, r0

20002494 <active_doors>:
	...

20002504 <APBAHBPrescTable>:
20002504:	00000000 	andeq	r0, r0, r0
20002508:	04030201 	streq	r0, [r3], #-513	; 0xfffffdff
2000250c:	04030201 	streq	r0, [r3], #-513	; 0xfffffdff
20002510:	09080706 	stmdbeq	r8, {r1, r2, r8, r9, sl}

20002514 <GPIO_Pins>:
20002514:	00020001 	andeq	r0, r2, r1
20002518:	00080004 	andeq	r0, r8, r4
2000251c:	00200010 	eoreq	r0, r0, r0, lsl r0
20002520:	00800040 	addeq	r0, r0, r0, asr #32
20002524:	02000100 	andeq	r0, r0, #0, 2
20002528:	08000400 	stmdaeq	r0, {sl}
2000252c:	20001000 	andcs	r1, r0, r0
20002530:	80004000 	andhi	r4, r0, r0

Disassembly of section .debug_info:

00000000 <.debug_info>:
       0:	000017fa 	strdeq	r1, [r0], -sl
       4:	00000004 	andeq	r0, r0, r4
       8:	01040000 	mrseq	r0, (UNDEF: 4)
       c:	000005d8 	ldrdeq	r0, [r0], -r8
      10:	000dc60c 	andeq	ip, sp, ip, lsl #12
      14:	00053800 	andeq	r3, r5, r0, lsl #16
	...
      24:	0fd40200 	svceq	0x00d40200
      28:	01050000 	mrseq	r0, (UNDEF: 5)
      2c:	00000253 	andeq	r0, r0, r3, asr r2
      30:	0253c804 	subseq	ip, r3, #4, 16	; 0x40000
      34:	a8030000 	stmdage	r3, {}	; <UNPREDICTABLE>
      38:	72000007 	andvc	r0, r0, #7
      3c:	00082e03 	andeq	r2, r8, r3, lsl #28
      40:	f9037400 			; <UNDEFINED> instruction: 0xf9037400
      44:	75000008 	strvc	r0, [r0, #-8]
      48:	00048103 	andeq	r8, r4, r3, lsl #2
      4c:	d6037600 	strle	r7, [r3], -r0, lsl #12
      50:	7b000009 	blvc	7c <startup-0x1fffff84>
      54:	000eba03 	andeq	fp, lr, r3, lsl #20
      58:	15037c00 	strne	r7, [r3, #-3072]	; 0xfffff400
      5c:	7e000011 	mcrvc	0, 0, r0, cr0, cr1, {0}
      60:	00032d03 	andeq	r2, r3, r3, lsl #26
      64:	c7047f00 	strgt	r7, [r4, -r0, lsl #30]
      68:	00000007 	andeq	r0, r0, r7
      6c:	00069f04 	andeq	r9, r6, r4, lsl #30
      70:	54040100 	strpl	r0, [r4], #-256	; 0xffffff00
      74:	02000008 	andeq	r0, r0, #8
      78:	00000e04 	andeq	r0, r0, r4, lsl #28
      7c:	bb040300 	bllt	100c84 <startup-0x1feff37c>
      80:	04000000 	streq	r0, [r0], #-0
      84:	000f5104 	andeq	r5, pc, r4, lsl #2
      88:	3b040500 	blcc	101490 <startup-0x1fefeb70>
      8c:	0600000e 	streq	r0, [r0], -lr
      90:	00072c04 	andeq	r2, r7, r4, lsl #24
      94:	1c040700 	stcne	7, cr0, [r4], {-0}
      98:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
      9c:	00110a04 	andseq	r0, r1, r4, lsl #20
      a0:	d1040900 	tstle	r4, r0, lsl #18
      a4:	0a00000a 	beq	d4 <startup-0x1fffff2c>
      a8:	000c7d04 	andeq	r7, ip, r4, lsl #26
      ac:	9c040b00 			; <UNDEFINED> instruction: 0x9c040b00
      b0:	0c00000b 	stceq	0, cr0, [r0], {11}
      b4:	00039e04 	andeq	r9, r3, r4, lsl #28
      b8:	66040d00 	strvs	r0, [r4], -r0, lsl #26
      bc:	0e00000f 	cdpeq	0, 0, cr0, cr0, cr15, {0}
      c0:	000e6d04 	andeq	r6, lr, r4, lsl #26
      c4:	44040f00 	strmi	r0, [r4], #-3840	; 0xfffff100
      c8:	10000007 	andne	r0, r0, r7
      cc:	00002704 	andeq	r2, r0, r4, lsl #14
      d0:	7c041100 	stfvcs	f1, [r4], {-0}
      d4:	1200000d 	andne	r0, r0, #13
      d8:	00073704 	andeq	r3, r7, r4, lsl #14
      dc:	2a041300 	bcs	104ce4 <startup-0x1fefb31c>
      e0:	14000005 	strne	r0, [r0], #-5
      e4:	00105a04 	andseq	r5, r0, r4, lsl #20
      e8:	64041500 	strvs	r1, [r4], #-1280	; 0xfffffb00
      ec:	16000008 	strne	r0, [r0], -r8
      f0:	00108404 	andseq	r8, r0, r4, lsl #8
      f4:	20041700 	andcs	r1, r4, r0, lsl #14
      f8:	18000009 	stmdane	r0, {r0, r3}
      fc:	000fc604 	andeq	ip, pc, r4, lsl #12
     100:	95041900 	strls	r1, [r4, #-2304]	; 0xfffff700
     104:	1a000002 	bne	114 <startup-0x1ffffeec>
     108:	00071104 	andeq	r1, r7, r4, lsl #2
     10c:	3c041b00 			; <UNDEFINED> instruction: 0x3c041b00
     110:	1c000001 	stcne	0, cr0, [r0], {1}
     114:	000d3004 	andeq	r3, sp, r4
     118:	ce041d00 	cdpgt	13, 0, cr1, cr4, cr0, {0}
     11c:	1e000005 	cdpne	0, 0, cr0, cr0, cr5, {0}
     120:	0006b504 	andeq	fp, r6, r4, lsl #10
     124:	3a041f00 	bcc	107d2c <startup-0x1fef82d4>
     128:	20000004 	andcs	r0, r0, r4
     12c:	000b0304 	andeq	r0, fp, r4, lsl #6
     130:	cc042100 	stfgts	f2, [r4], {-0}
     134:	22000008 	andcs	r0, r0, #8
     138:	0009c404 	andeq	ip, r9, r4, lsl #8
     13c:	cd042300 	stcgt	3, cr2, [r4, #-0]
     140:	24000001 	strcs	r0, [r0], #-1
     144:	000d3a04 	andeq	r3, sp, r4, lsl #20
     148:	78042500 	stmdavc	r4, {r8, sl, sp}
     14c:	2600000f 	strcs	r0, [r0], -pc
     150:	00034904 	andeq	r4, r3, r4, lsl #18
     154:	f7042700 			; <UNDEFINED> instruction: 0xf7042700
     158:	2800000c 	stmdacs	r0, {r2, r3}
     15c:	000caf04 	andeq	sl, ip, r4, lsl #30
     160:	a7042900 	strge	r2, [r4, -r0, lsl #18]
     164:	2a00000a 	bcs	194 <startup-0x1ffffe6c>
     168:	0001d704 	andeq	sp, r1, r4, lsl #14
     16c:	39042b00 	stmdbcc	r4, {r8, r9, fp, sp}
     170:	2c000000 	stccs	0, cr0, [r0], {-0}
     174:	00077204 	andeq	r7, r7, r4, lsl #4
     178:	d7042d00 	strle	r2, [r4, -r0, lsl #26]
     17c:	2e000010 	mcrcs	0, 0, r0, cr0, cr0, {0}
     180:	00113404 	andseq	r3, r1, r4, lsl #8
     184:	2c042f00 	stccs	15, cr2, [r4], {-0}
     188:	3000000e 	andcc	r0, r0, lr
     18c:	0010e404 	andseq	lr, r0, r4, lsl #8
     190:	77043100 	strvc	r3, [r4, -r0, lsl #2]
     194:	32000004 	andcc	r0, r0, #4
     198:	0000b104 	andeq	fp, r0, r4, lsl #2
     19c:	72043300 	andvc	r3, r4, #0, 6
     1a0:	3400000a 	strcc	r0, [r0], #-10
     1a4:	00091504 	andeq	r1, r9, r4, lsl #10
     1a8:	e1043500 	tst	r4, r0, lsl #10
     1ac:	3600000a 	strcc	r0, [r0], -sl
     1b0:	00098604 	andeq	r8, r9, r4, lsl #12
     1b4:	8f043700 	svchi	0x00043700
     1b8:	38000008 	stmdacc	r0, {r3}
     1bc:	00007a04 	andeq	r7, r0, r4, lsl #20
     1c0:	ad043900 	vstrge.16	s6, [r4, #-0]	; <UNPREDICTABLE>
     1c4:	3a000011 	bcc	210 <startup-0x1ffffdf0>
     1c8:	000bbb04 	andeq	fp, fp, r4, lsl #22
     1cc:	f7043b00 			; <UNDEFINED> instruction: 0xf7043b00
     1d0:	3c000003 	stccc	0, cr0, [r0], {3}
     1d4:	000f0c04 	andeq	r0, pc, r4, lsl #24
     1d8:	9e043d00 	cdpls	13, 0, cr3, cr4, cr0, {0}
     1dc:	3e000009 	cdpcc	0, 0, cr0, cr0, cr9, {0}
     1e0:	000bd604 	andeq	sp, fp, r4, lsl #12
     1e4:	9f043f00 	svcls	0x00043f00
     1e8:	40000001 	andmi	r0, r0, r1
     1ec:	000d6e04 	andeq	r6, sp, r4, lsl #28
     1f0:	47044100 	strmi	r4, [r4, -r0, lsl #2]
     1f4:	42000004 	andmi	r0, r0, #4
     1f8:	00079c04 	andeq	r9, r7, r4, lsl #24
     1fc:	5f044300 	svcpl	0x00044300
     200:	44000002 	strmi	r0, [r0], #-2
     204:	000e8904 	andeq	r8, lr, r4, lsl #18
     208:	8a044500 	bhi	111610 <startup-0x1feee9f0>
     20c:	46000007 	strmi	r0, [r0], -r7
     210:	0001ad04 	andeq	sl, r1, r4, lsl #26
     214:	ec044700 	stc	7, cr4, [r4], {-0}
     218:	4800000e 	stmdami	r0, {r1, r2, r3}
     21c:	000ce004 	andeq	lr, ip, r4
     220:	18044900 	stmdane	r4, {r8, fp, lr}
     224:	4a000010 	bmi	26c <startup-0x1ffffd94>
     228:	00112104 	andseq	r2, r1, r4, lsl #2
     22c:	d1044b00 	tstle	r4, r0, lsl #22
     230:	4c000007 	stcmi	0, cr0, [r0], {7}
     234:	0009ac04 	andeq	sl, r9, r4, lsl #24
     238:	c6044d00 	strgt	r4, [r4], -r0, lsl #26
     23c:	4e000000 	cdpmi	0, 0, cr0, cr0, cr0, {0}
     240:	000ced04 	andeq	lr, ip, r4, lsl #26
     244:	1e044f00 	cdpne	15, 0, cr4, cr4, cr0, {0}
     248:	50000007 	andpl	r0, r0, r7
     24c:	000a4b04 	andeq	r4, sl, r4, lsl #22
     250:	05005100 	streq	r5, [r0, #-256]	; 0xffffff00
     254:	03eb0601 	mvneq	r0, #1048576	; 0x100000
     258:	78060000 	stmdavc	r6, {}	; <UNPREDICTABLE>
     25c:	04000008 	streq	r0, [r0], #-8
     260:	0025032f 	eoreq	r0, r5, pc, lsr #6
     264:	c3070000 	movwgt	r0, #28672	; 0x7000
     268:	05000001 	streq	r0, [r0, #-1]
     26c:	0002712b 	andeq	r7, r2, fp, lsr #2
     270:	08010500 	stmdaeq	r1, {r8, sl}
     274:	000003e9 	andeq	r0, r0, r9, ror #7
     278:	3e050205 	cdpcc	2, 0, cr0, cr5, cr5, {0}
     27c:	0700000f 	streq	r0, [r0, -pc]
     280:	000004f8 	strdeq	r0, [r0], -r8
     284:	028a3905 	addeq	r3, sl, #81920	; 0x14000
     288:	02050000 	andeq	r0, r5, #0
     28c:	0010b307 	andseq	fp, r0, r7, lsl #6
     290:	11460700 	cmpne	r6, r0, lsl #14
     294:	4d050000 	stcmi	0, cr0, [r5, #-0]
     298:	0000029c 	muleq	r0, ip, r2
     29c:	95050405 	strls	r0, [r5, #-1029]	; 0xfffffbfb
     2a0:	07000009 	streq	r0, [r0, -r9]
     2a4:	0000093e 	andeq	r0, r0, lr, lsr r9
     2a8:	02ae4f05 	adceq	r4, lr, #5, 30
     2ac:	04050000 	streq	r0, [r5], #-0
     2b0:	000d0b07 	andeq	r0, sp, r7, lsl #22
     2b4:	05080500 	streq	r0, [r8, #-1280]	; 0xfffffb00
     2b8:	00000990 	muleq	r0, r0, r9
     2bc:	06070805 	streq	r0, [r7], -r5, lsl #16
     2c0:	0800000d 	stmdaeq	r0, {r0, r2, r3}
     2c4:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
     2c8:	04050074 	streq	r0, [r5], #-116	; 0xffffff8c
     2cc:	000d1007 	andeq	r1, sp, r7
     2d0:	01c50700 	biceq	r0, r5, r0, lsl #14
     2d4:	18060000 	stmdane	r6, {}	; <UNPREDICTABLE>
     2d8:	00000266 	andeq	r0, r0, r6, ror #4
     2dc:	0002d109 	andeq	sp, r2, r9, lsl #2
     2e0:	02d10a00 	sbcseq	r0, r1, #0, 20
     2e4:	e1090000 	mrs	r0, (UNDEF: 9)
     2e8:	07000002 	streq	r0, [r0, -r2]
     2ec:	000004fa 	strdeq	r0, [r0], -sl
     2f0:	027f2406 	rsbseq	r2, pc, #100663296	; 0x6000000
     2f4:	eb090000 	bl	2402fc <startup-0x1fdbfd04>
     2f8:	07000002 	streq	r0, [r0, -r2]
     2fc:	00001148 	andeq	r1, r0, r8, asr #2
     300:	02912c06 	addseq	r2, r1, #1536	; 0x600
     304:	fb090000 	blx	24030e <startup-0x1fdbfcf2>
     308:	07000002 	streq	r0, [r0, -r2]
     30c:	00000940 	andeq	r0, r0, r0, asr #18
     310:	02a33006 	adceq	r3, r3, #6
     314:	0b090000 	bleq	24031c <startup-0x1fdbfce4>
     318:	0a000003 	beq	32c <startup-0x1ffffcd4>
     31c:	00000316 	andeq	r0, r0, r6, lsl r3
     320:	010e040b 	tsteq	lr, fp, lsl #8
     324:	03dc01a0 	bicseq	r0, ip, #160, 2	; 0x28
     328:	640c0000 	strvs	r0, [ip], #-0
     32c:	01000011 	tsteq	r0, r1, lsl r0
     330:	03ec01a2 	mvneq	r0, #-2147483608	; 0x80000028
     334:	0c000000 	stceq	0, cr0, [r0], {-0}
     338:	000003d5 	ldrdeq	r0, [r0], -r5
     33c:	f101a301 			; <UNDEFINED> instruction: 0xf101a301
     340:	20000003 	andcs	r0, r0, r3
     344:	000d970c 	andeq	r9, sp, ip, lsl #14
     348:	01a40100 			; <UNDEFINED> instruction: 0x01a40100
     34c:	000003ec 	andeq	r0, r0, ip, ror #7
     350:	00050c80 	andeq	r0, r5, r0, lsl #25
     354:	a5010000 	strge	r0, [r1, #-0]
     358:	0003f101 	andeq	pc, r3, r1, lsl #2
     35c:	f40da000 	vst4.8	{d10-d13}, [sp], r0
     360:	01000010 	tsteq	r0, r0, lsl r0
     364:	03ec01a6 	mvneq	r0, #-2147483607	; 0x80000029
     368:	01000000 	mrseq	r0, (UNDEF: 0)
     36c:	0004630d 	andeq	r6, r4, sp, lsl #6
     370:	01a70100 			; <UNDEFINED> instruction: 0x01a70100
     374:	000003f1 	strdeq	r0, [r0], -r1
     378:	6e0d0120 	adfvsep	f0, f5, f0
     37c:	01000001 	tsteq	r0, r1
     380:	03ec01a8 	mvneq	r0, #168, 2	; 0x2a
     384:	01800000 	orreq	r0, r0, r0
     388:	00046d0d 	andeq	r6, r4, sp, lsl #26
     38c:	01a90100 			; <UNDEFINED> instruction: 0x01a90100
     390:	000003f1 	strdeq	r0, [r0], -r1
     394:	270d01a0 	strcs	r0, [sp, -r0, lsr #3]
     398:	01000004 	tsteq	r0, r4
     39c:	03ec01aa 	mvneq	r0, #-2147483606	; 0x8000002a
     3a0:	02000000 	andeq	r0, r0, #0
     3a4:	0004090d 	andeq	r0, r4, sp, lsl #18
     3a8:	01ab0100 			; <UNDEFINED> instruction: 0x01ab0100
     3ac:	00000401 	andeq	r0, r0, r1, lsl #8
     3b0:	490e0220 	stmdbmi	lr, {r5, r9}
     3b4:	ac010050 	stcge	0, cr0, [r1], {80}	; 0x50
     3b8:	00042101 	andeq	r2, r4, r1, lsl #2
     3bc:	0d030000 	stceq	0, cr0, [r3, #-0]
     3c0:	00000413 	andeq	r0, r0, r3, lsl r4
     3c4:	2601ad01 	strcs	sl, [r1], -r1, lsl #26
     3c8:	f0000004 			; <UNDEFINED> instruction: 0xf0000004
     3cc:	06b00d03 	ldrteq	r0, [r0], r3, lsl #26
     3d0:	ae010000 	cdpge	0, 0, cr0, cr1, cr0, {0}
     3d4:	00031601 	andeq	r1, r3, r1, lsl #12
     3d8:	000e0000 	andeq	r0, lr, r0
     3dc:	0003160f 	andeq	r1, r3, pc, lsl #12
     3e0:	0003ec00 	andeq	lr, r3, r0, lsl #24
     3e4:	02ca1000 	sbceq	r1, sl, #0
     3e8:	00070000 	andeq	r0, r7, r0
     3ec:	0003dc09 	andeq	sp, r3, r9, lsl #24
     3f0:	030b0f00 	movweq	r0, #48896	; 0xbf00
     3f4:	04010000 	streq	r0, [r1], #-0
     3f8:	ca100000 	bgt	400400 <startup-0x1fbffc00>
     3fc:	17000002 	strne	r0, [r0, -r2]
     400:	030b0f00 	movweq	r0, #48896	; 0xbf00
     404:	04110000 	ldreq	r0, [r1], #-0
     408:	ca100000 	bgt	400410 <startup-0x1fbffbf0>
     40c:	37000002 	strcc	r0, [r0, -r2]
     410:	02dc0f00 	sbcseq	r0, ip, #0, 30
     414:	04210000 	strteq	r0, [r1], #-0
     418:	ca100000 	bgt	400420 <startup-0x1fbffbe0>
     41c:	ef000002 	svc	0x00000002
     420:	04110900 	ldreq	r0, [r1], #-2304	; 0xfffff700
     424:	0b0f0000 	bleq	3c042c <startup-0x1fc3fbd4>
     428:	37000003 	strcc	r0, [r0, -r3]
     42c:	11000004 	tstne	r0, r4
     430:	000002ca 	andeq	r0, r0, sl, asr #5
     434:	06000283 	streq	r0, [r0], -r3, lsl #5
     438:	00000cc6 	andeq	r0, r0, r6, asr #25
     43c:	2001af01 	andcs	sl, r1, r1, lsl #30
     440:	12000003 	andne	r0, r0, #3
     444:	01c0018c 	biceq	r0, r0, ip, lsl #3
     448:	0000055e 	andeq	r0, r0, lr, asr r5
     44c:	0002340c 	andeq	r3, r2, ip, lsl #8
     450:	01c20100 	biceq	r0, r2, r0, lsl #2
     454:	0000031b 	andeq	r0, r0, fp, lsl r3
     458:	035d0c00 	cmpeq	sp, #0, 24
     45c:	c3010000 	movwgt	r0, #4096	; 0x1000
     460:	00031601 	andeq	r1, r3, r1, lsl #12
     464:	ac0c0400 	cfstrsge	mvf0, [ip], {-0}
     468:	01000000 	mrseq	r0, (UNDEF: 0)
     46c:	031601c4 	tsteq	r6, #196, 2	; 0x31
     470:	0c080000 	stceq	0, cr0, [r8], {-0}
     474:	00000204 	andeq	r0, r0, r4, lsl #4
     478:	1601c501 	strne	ip, [r1], -r1, lsl #10
     47c:	0c000003 	stceq	0, cr0, [r0], {3}
     480:	52435313 	subpl	r5, r3, #1275068416	; 0x4c000000
     484:	01c60100 	biceq	r0, r6, r0, lsl #2
     488:	00000316 	andeq	r0, r0, r6, lsl r3
     48c:	43431310 	movtmi	r1, #13072	; 0x3310
     490:	c7010052 	smlsdgt	r1, r2, r0, r0
     494:	00031601 	andeq	r1, r3, r1, lsl #12
     498:	53131400 	tstpl	r3, #0, 8
     49c:	01005048 	tsteq	r0, r8, asr #32
     4a0:	056e01c8 	strbeq	r0, [lr, #-456]!	; 0xfffffe38
     4a4:	0c180000 	ldceq	0, cr0, [r8], {-0}
     4a8:	00000699 	muleq	r0, r9, r6
     4ac:	1601c901 	strne	ip, [r1], -r1, lsl #18
     4b0:	24000003 	strcs	r0, [r0], #-3
     4b4:	000e4f0c 	andeq	r4, lr, ip, lsl #30
     4b8:	01ca0100 	biceq	r0, sl, r0, lsl #2
     4bc:	00000316 	andeq	r0, r0, r6, lsl r3
     4c0:	057b0c28 	ldrbeq	r0, [fp, #-3112]!	; 0xfffff3d8
     4c4:	cb010000 	blgt	404cc <startup-0x1ffbfb34>
     4c8:	00031601 	andeq	r1, r3, r1, lsl #12
     4cc:	ab0c2c00 	blge	30b4d4 <startup-0x1fcf4b2c>
     4d0:	01000004 	tsteq	r0, r4
     4d4:	031601cc 	tsteq	r6, #204, 2	; 0x33
     4d8:	0c300000 	ldceq	0, cr0, [r0], #-0
     4dc:	00000f38 	andeq	r0, r0, r8, lsr pc
     4e0:	1601cd01 	strne	ip, [r1], -r1, lsl #26
     4e4:	34000003 	strcc	r0, [r0], #-3
     4e8:	000b8d0c 	andeq	r8, fp, ip, lsl #26
     4ec:	01ce0100 	biceq	r0, lr, r0, lsl #2
     4f0:	00000316 	andeq	r0, r0, r6, lsl r3
     4f4:	0e130c38 	mrceq	12, 0, r0, cr3, cr8, {1}
     4f8:	cf010000 	svcgt	0x00010000
     4fc:	00031601 	andeq	r1, r3, r1, lsl #12
     500:	50133c00 	andspl	r3, r3, r0, lsl #24
     504:	01005246 	tsteq	r0, r6, asr #4
     508:	058801d0 	streq	r0, [r8, #464]	; 0x1d0
     50c:	13400000 	movtne	r0, #0
     510:	00524644 	subseq	r4, r2, r4, asr #12
     514:	1b01d101 	blne	74920 <startup-0x1ff8b6e0>
     518:	48000003 	stmdami	r0, {r0, r1}
     51c:	52444113 	subpl	r4, r4, #-1073741820	; 0xc0000004
     520:	01d20100 	bicseq	r0, r2, r0, lsl #2
     524:	0000031b 	andeq	r0, r0, fp, lsl r3
     528:	0f270c4c 	svceq	0x00270c4c
     52c:	d3010000 	movwle	r0, #4096	; 0x1000
     530:	0005a201 	andeq	sl, r5, r1, lsl #4
     534:	610c5000 	mrsvs	r5, (UNDEF: 12)
     538:	0100000f 	tsteq	r0, pc
     53c:	05bc01d4 	ldreq	r0, [ip, #468]!	; 0x1d4
     540:	0c600000 	stcleq	0, cr0, [r0], #-0
     544:	000003d5 	ldrdeq	r0, [r0], -r5
     548:	c101d501 	tstgt	r1, r1, lsl #10
     54c:	74000005 	strvc	r0, [r0], #-5
     550:	0010ee0c 	andseq	lr, r0, ip, lsl #28
     554:	01d60100 	bicseq	r0, r6, r0, lsl #2
     558:	00000316 	andeq	r0, r0, r6, lsl r3
     55c:	dc0f0088 	stcle	0, cr0, [pc], {136}	; 0x88
     560:	6e000002 	cdpvs	0, 0, cr0, cr0, cr2, {0}
     564:	10000005 	andne	r0, r0, r5
     568:	000002ca 	andeq	r0, r0, sl, asr #5
     56c:	5e09000b 	cdppl	0, 0, cr0, cr9, cr11, {0}
     570:	0f000005 	svceq	0x00000005
     574:	0000031b 	andeq	r0, r0, fp, lsl r3
     578:	00000583 	andeq	r0, r0, r3, lsl #11
     57c:	0002ca10 	andeq	ip, r2, r0, lsl sl
     580:	0a000100 	beq	988 <startup-0x1ffff678>
     584:	00000573 	andeq	r0, r0, r3, ror r5
     588:	00058309 	andeq	r8, r5, r9, lsl #6
     58c:	031b0f00 	tsteq	fp, #0, 30
     590:	059d0000 	ldreq	r0, [sp]
     594:	ca100000 	bgt	40059c <startup-0x1fbffa64>
     598:	03000002 	movweq	r0, #2
     59c:	058d0a00 	streq	r0, [sp, #2560]	; 0xa00
     5a0:	9d090000 	stcls	0, cr0, [r9, #-0]
     5a4:	0f000005 	svceq	0x00000005
     5a8:	0000031b 	andeq	r0, r0, fp, lsl r3
     5ac:	000005b7 			; <UNDEFINED> instruction: 0x000005b7
     5b0:	0002ca10 	andeq	ip, r2, r0, lsl sl
     5b4:	0a000400 	beq	15bc <startup-0x1fffea44>
     5b8:	000005a7 	andeq	r0, r0, r7, lsr #11
     5bc:	0005b709 	andeq	fp, r5, r9, lsl #14
     5c0:	030b0f00 	movweq	r0, #48896	; 0xbf00
     5c4:	05d10000 	ldrbeq	r0, [r1]
     5c8:	ca100000 	bgt	4005d0 <startup-0x1fbffa30>
     5cc:	04000002 	streq	r0, [r0], #-2
     5d0:	04910600 	ldreq	r0, [r1], #1536	; 0x600
     5d4:	d7010000 	strle	r0, [r1, -r0]
     5d8:	00044301 	andeq	r4, r4, r1, lsl #6
     5dc:	01101200 	tsteq	r0, r0, lsl #4
     5e0:	061b02bf 			; <UNDEFINED> instruction: 0x061b02bf
     5e4:	dc0c0000 	stcle	0, cr0, [ip], {-0}
     5e8:	0100000a 	tsteq	r0, sl
     5ec:	031602c1 	tsteq	r6, #268435468	; 0x1000000c
     5f0:	0c000000 	stceq	0, cr0, [r0], {-0}
     5f4:	00000ea3 	andeq	r0, r0, r3, lsr #29
     5f8:	1602c201 	strne	ip, [r2], -r1, lsl #4
     5fc:	04000003 	streq	r0, [r0], #-3
     600:	4c415613 	mcrrmi	6, 1, r5, r1, cr3
     604:	02c30100 	sbceq	r0, r3, #0, 2
     608:	00000316 	andeq	r0, r0, r6, lsl r3
     60c:	0e1f0c08 	cdpeq	12, 1, cr0, cr15, cr8, {0}
     610:	c4010000 	strgt	r0, [r1], #-0
     614:	00031b02 	andeq	r1, r3, r2, lsl #22
     618:	06000c00 	streq	r0, [r0], -r0, lsl #24
     61c:	00000c21 	andeq	r0, r0, r1, lsr #24
     620:	dd02c501 	cfstr32le	mvfx12, [r2, #-4]
     624:	0f000005 	svceq	0x00000005
     628:	0000030b 	andeq	r0, r0, fp, lsl #6
     62c:	00000637 	andeq	r0, r0, r7, lsr r6
     630:	0002ca10 	andeq	ip, r2, r0, lsl sl
     634:	14000100 	strne	r0, [r0], #-256	; 0xffffff00
     638:	00000fd9 	ldrdeq	r0, [r0], -r9
     63c:	0606fa01 	streq	pc, [r6], -r1, lsl #20
     640:	15000003 	strne	r0, [r0, #-3]
     644:	00000844 	andeq	r0, r0, r4, asr #16
     648:	030b3b07 	movweq	r3, #47879	; 0xbb07
     64c:	07160000 	ldreq	r0, [r6, -r0]
     650:	00027101 	andeq	r7, r2, r1, lsl #2
     654:	035d0400 	cmpeq	sp, #0, 8
     658:	00000669 	andeq	r0, r0, r9, ror #12
     65c:	00122d04 	andseq	r2, r2, r4, lsl #26
     660:	53170000 	tstpl	r7, #0
     664:	01005445 	tsteq	r0, r5, asr #8
     668:	09f80600 	ldmibeq	r8!, {r9, sl}^
     66c:	5d040000 	stcpl	0, cr0, [r4, #-0]
     670:	00064e03 	andeq	r4, r6, r3, lsl #28
     674:	0ac80600 	beq	ff201e7c <GPIO_Pins+0xdf1ff968>
     678:	5d040000 	stcpl	0, cr0, [r4, #-0]
     67c:	00064e03 	andeq	r4, r6, r3, lsl #28
     680:	01071600 	tsteq	r7, r0, lsl #12
     684:	00000271 	andeq	r0, r0, r1, ror r2
     688:	9c035f04 	stcls	15, cr5, [r3], {4}
     68c:	04000006 	streq	r0, [r0], #-6
     690:	000009ce 	andeq	r0, r0, lr, asr #19
     694:	0f8e0400 	svceq	0x008e0400
     698:	00010000 	andeq	r0, r1, r0
     69c:	000cd006 	andeq	sp, ip, r6
     6a0:	035f0400 	cmpeq	pc, #0, 8
     6a4:	00000681 	andeq	r0, r0, r1, lsl #13
     6a8:	71010716 	tstvc	r1, r6, lsl r7
     6ac:	04000002 	streq	r0, [r0], #-2
     6b0:	06c30362 	strbeq	r0, [r3], r2, ror #6
     6b4:	c6040000 	strgt	r0, [r4], -r0
     6b8:	00000008 	andeq	r0, r0, r8
     6bc:	000d5c04 	andeq	r5, sp, r4, lsl #24
     6c0:	06000100 	streq	r0, [r0], -r0, lsl #2
     6c4:	00000c71 	andeq	r0, r0, r1, ror ip
     6c8:	a8036204 	stmdage	r3, {r2, r9, sp, lr}
     6cc:	12000006 	andne	r0, r0, #6
     6d0:	05c30428 	strbeq	r0, [r3, #1064]	; 0x428
     6d4:	0000075b 	andeq	r0, r0, fp, asr r7
     6d8:	0010430c 	andseq	r4, r0, ip, lsl #6
     6dc:	05c50400 	strbeq	r0, [r5, #1024]	; 0x400
     6e0:	00000316 	andeq	r0, r0, r6, lsl r3
     6e4:	0e180c00 	cdpeq	12, 1, cr0, cr8, cr0, {0}
     6e8:	c6040000 	strgt	r0, [r4], -r0
     6ec:	00031605 	andeq	r1, r3, r5, lsl #12
     6f0:	f10c0400 			; <UNDEFINED> instruction: 0xf10c0400
     6f4:	04000008 	streq	r0, [r0], #-8
     6f8:	031605c7 	tsteq	r6, #834666496	; 0x31c00000
     6fc:	0c080000 	stceq	0, cr0, [r8], {-0}
     700:	000009b8 			; <UNDEFINED> instruction: 0x000009b8
     704:	1605c804 	strne	ip, [r5], -r4, lsl #16
     708:	0c000003 	stceq	0, cr0, [r0], {3}
     70c:	52444913 	subpl	r4, r4, #311296	; 0x4c000
     710:	05c90400 	strbeq	r0, [r9, #1024]	; 0x400
     714:	00000316 	andeq	r0, r0, r6, lsl r3
     718:	444f1310 	strbmi	r1, [pc], #-784	; 720 <startup-0x1ffff8e0>
     71c:	ca040052 	bgt	10086c <startup-0x1feff794>
     720:	00031605 	andeq	r1, r3, r5, lsl #12
     724:	0e0c1400 	cfcpyseq	mvf1, mvf12
     728:	0400000a 	streq	r0, [r0], #-10
     72c:	02f605cb 	rscseq	r0, r6, #851443712	; 0x32c00000
     730:	0c180000 	ldceq	0, cr0, [r8], {-0}
     734:	000009eb 	andeq	r0, r0, fp, ror #19
     738:	f605cc04 			; <UNDEFINED> instruction: 0xf605cc04
     73c:	1a000002 	bne	74c <startup-0x1ffff8b4>
     740:	0008b00c 	andeq	fp, r8, ip
     744:	05cd0400 	strbeq	r0, [sp, #1024]	; 0x400
     748:	00000316 	andeq	r0, r0, r6, lsl r3
     74c:	4641131c 			; <UNDEFINED> instruction: 0x4641131c
     750:	ce040052 	mcrgt	0, 0, r0, cr4, cr2, {2}
     754:	00076b05 	andeq	r6, r7, r5, lsl #22
     758:	0f002000 	svceq	0x00002000
     75c:	00000316 	andeq	r0, r0, r6, lsl r3
     760:	0000076b 	andeq	r0, r0, fp, ror #14
     764:	0002ca10 	andeq	ip, r2, r0, lsl sl
     768:	09000100 	stmdbeq	r0, {r8}
     76c:	0000075b 	andeq	r0, r0, fp, asr r7
     770:	000fb906 	andeq	fp, pc, r6, lsl #18
     774:	05cf0400 	strbeq	r0, [pc, #1024]	; b7c <startup-0x1ffff484>
     778:	000006cf 	andeq	r0, r0, pc, asr #13
     77c:	64049812 	strvs	r9, [r4], #-2066	; 0xfffff7ee
     780:	00093f06 	andeq	r3, r9, r6, lsl #30
     784:	52431300 	subpl	r1, r3, #0, 6
     788:	06660400 	strbteq	r0, [r6], -r0, lsl #8
     78c:	00000316 	andeq	r0, r0, r6, lsl r3
     790:	090d0c00 	stmdbeq	sp, {sl, fp}
     794:	67040000 	strvs	r0, [r4, -r0]
     798:	00031606 	andeq	r1, r3, r6, lsl #12
     79c:	970c0400 	strls	r0, [ip, -r0, lsl #8]
     7a0:	04000010 	streq	r0, [r0], #-16
     7a4:	03160668 	tsteq	r6, #104, 12	; 0x6800000
     7a8:	13080000 	movwne	r0, #32768	; 0x8000
     7ac:	00524943 	subseq	r4, r2, r3, asr #18
     7b0:	16066904 	strne	r6, [r6], -r4, lsl #18
     7b4:	0c000003 	stceq	0, cr0, [r0], {3}
     7b8:	0004b00c 	andeq	fp, r4, ip
     7bc:	066a0400 	strbteq	r0, [sl], -r0, lsl #8
     7c0:	00000316 	andeq	r0, r0, r6, lsl r3
     7c4:	0f030c10 	svceq	0x00030c10
     7c8:	6b040000 	blvs	1007d0 <startup-0x1feff830>
     7cc:	00031606 	andeq	r1, r3, r6, lsl #12
     7d0:	680c1400 	stmdavs	ip, {sl, ip}
     7d4:	0400000c 	streq	r0, [r0], #-12
     7d8:	0316066c 	tsteq	r6, #108, 12	; 0x6c00000
     7dc:	0c180000 	ldceq	0, cr0, [r8], {-0}
     7e0:	000003d5 	ldrdeq	r0, [r0], -r5
     7e4:	0b066d04 	bleq	19bbfc <startup-0x1fe64404>
     7e8:	1c000003 	stcne	0, cr0, [r0], {3}
     7ec:	000ca60c 	andeq	sl, ip, ip, lsl #12
     7f0:	066e0400 	strbteq	r0, [lr], -r0, lsl #8
     7f4:	00000316 	andeq	r0, r0, r6, lsl r3
     7f8:	09e20c20 	stmibeq	r2!, {r5, sl, fp}^
     7fc:	6f040000 	svcvs	0x00040000
     800:	00031606 	andeq	r1, r3, r6, lsl #12
     804:	df0c2400 	svcle	0x000c2400
     808:	04000003 	streq	r0, [r0], #-3
     80c:	06270670 			; <UNDEFINED> instruction: 0x06270670
     810:	0c280000 	stceq	0, cr0, [r8], #-0
     814:	00000e9b 	muleq	r0, fp, lr
     818:	16067104 	strne	r7, [r6], -r4, lsl #2
     81c:	30000003 	andcc	r0, r0, r3
     820:	0005030c 	andeq	r0, r5, ip, lsl #6
     824:	06720400 	ldrbteq	r0, [r2], -r0, lsl #8
     828:	00000316 	andeq	r0, r0, r6, lsl r3
     82c:	11940c34 	orrsne	r0, r4, r4, lsr ip
     830:	73040000 	movwvc	r0, #16384	; 0x4000
     834:	00031606 	andeq	r1, r3, r6, lsl #12
     838:	630c3800 	movwvs	r3, #51200	; 0xc800
     83c:	04000004 	streq	r0, [r0], #-4
     840:	030b0674 	movweq	r0, #46708	; 0xb674
     844:	0c3c0000 	ldceq	0, cr0, [ip], #-0
     848:	00000cbe 			; <UNDEFINED> instruction: 0x00000cbe
     84c:	16067504 	strne	r7, [r6], -r4, lsl #10
     850:	40000003 	andmi	r0, r0, r3
     854:	0002f80c 	andeq	pc, r2, ip, lsl #16
     858:	06760400 	ldrbteq	r0, [r6], -r0, lsl #8
     85c:	00000316 	andeq	r0, r0, r6, lsl r3
     860:	046d0c44 	strbteq	r0, [sp], #-3140	; 0xfffff3bc
     864:	77040000 	strvc	r0, [r4, -r0]
     868:	00062706 	andeq	r2, r6, r6, lsl #14
     86c:	140c4800 	strne	r4, [ip], #-2048	; 0xfffff800
     870:	04000003 	streq	r0, [r0], #-3
     874:	03160678 	tsteq	r6, #120, 12	; 0x7800000
     878:	0c500000 	mraeq	r0, r0, acc0
     87c:	000001eb 	andeq	r0, r0, fp, ror #3
     880:	16067904 	strne	r7, [r6], -r4, lsl #18
     884:	54000003 	strpl	r0, [r0], #-3
     888:	000d9c0c 	andeq	r9, sp, ip, lsl #24
     88c:	067a0400 	ldrbteq	r0, [sl], -r0, lsl #8
     890:	00000316 	andeq	r0, r0, r6, lsl r3
     894:	04090c58 	streq	r0, [r9], #-3160	; 0xfffff3a8
     898:	7b040000 	blvc	1008a0 <startup-0x1feff760>
     89c:	00030b06 	andeq	r0, r3, r6, lsl #22
     8a0:	920c5c00 	andls	r5, ip, #0, 24
     8a4:	0400000b 	streq	r0, [r0], #-11
     8a8:	0316067c 	tsteq	r6, #124, 12	; 0x7c00000
     8ac:	0c600000 	stcleq	0, cr0, [r0], #-0
     8b0:	00000a7d 	andeq	r0, r0, sp, ror sl
     8b4:	16067d04 	strne	r7, [r6], -r4, lsl #26
     8b8:	64000003 	strvs	r0, [r0], #-3
     8bc:	0004130c 	andeq	r1, r4, ip, lsl #6
     8c0:	067e0400 	ldrbteq	r0, [lr], -r0, lsl #8
     8c4:	00000627 	andeq	r0, r0, r7, lsr #12
     8c8:	06940c68 	ldreq	r0, [r4], r8, ror #24
     8cc:	7f040000 	svcvc	0x00040000
     8d0:	00031606 	andeq	r1, r3, r6, lsl #12
     8d4:	43137000 	tstmi	r3, #0
     8d8:	04005253 	streq	r5, [r0], #-595	; 0xfffffdad
     8dc:	03160680 	tsteq	r6, #128, 12	; 0x8000000
     8e0:	0c740000 	ldcleq	0, cr0, [r4], #-0
     8e4:	0000041d 	andeq	r0, r0, sp, lsl r4
     8e8:	27068104 	strcs	r8, [r6, -r4, lsl #2]
     8ec:	78000006 	stmdavc	r0, {r1, r2}
     8f0:	0009be0c 	andeq	fp, r9, ip, lsl #28
     8f4:	06820400 	streq	r0, [r2], r0, lsl #8
     8f8:	00000316 	andeq	r0, r0, r6, lsl r3
     8fc:	004c0c80 	subeq	r0, ip, r0, lsl #25
     900:	83040000 	movwhi	r0, #16384	; 0x4000
     904:	00031606 	andeq	r1, r3, r6, lsl #12
     908:	910c8400 	tstls	ip, r0, lsl #8
     90c:	04000010 	streq	r0, [r0], #-16
     910:	03160684 	tsteq	r6, #132, 12	; 0x8400000
     914:	0c880000 	stceq	0, cr0, [r8], {0}
     918:	00000355 	andeq	r0, r0, r5, asr r3
     91c:	16068504 	strne	r8, [r6], -r4, lsl #10
     920:	8c000003 	stchi	0, cr0, [r0], {3}
     924:	000bcd0c 	andeq	ip, fp, ip, lsl #26
     928:	06860400 	streq	r0, [r6], r0, lsl #8
     92c:	00000316 	andeq	r0, r0, r6, lsl r3
     930:	0e460c90 	mcreq	12, 2, r0, cr6, cr0, {4}
     934:	87040000 	strhi	r0, [r4, -r0]
     938:	00031606 	andeq	r1, r3, r6, lsl #12
     93c:	06009400 	streq	r9, [r0], -r0, lsl #8
     940:	00000f2c 	andeq	r0, r0, ip, lsr #30
     944:	7c068904 			; <UNDEFINED> instruction: 0x7c068904
     948:	18000007 	stmdane	r0, {r0, r1, r2}
     94c:	84300810 	ldrthi	r0, [r0], #-2064	; 0xfffff7f0
     950:	19000009 	stmdbne	r0, {r0, r3}
     954:	000010f9 	strdeq	r1, [r0], -r9
     958:	030b3208 	movweq	r3, #45576	; 0xb208
     95c:	19000000 	stmdbne	r0, {}	; <UNPREDICTABLE>
     960:	0000008c 	andeq	r0, r0, ip, lsl #1
     964:	030b3308 	movweq	r3, #45832	; 0xb308
     968:	19040000 	stmdbne	r4, {}	; <UNPREDICTABLE>
     96c:	00000595 	muleq	r0, r5, r5
     970:	030b3408 	movweq	r3, #46088	; 0xb408
     974:	19080000 	stmdbne	r8, {}	; <UNPREDICTABLE>
     978:	0000050b 	andeq	r0, r0, fp, lsl #10
     97c:	030b3508 	movweq	r3, #46344	; 0xb508
     980:	000c0000 	andeq	r0, ip, r0
     984:	000f1507 	andeq	r1, pc, r7, lsl #10
     988:	4b360800 	blmi	d82990 <startup-0x1f27d670>
     98c:	0f000009 	svceq	0x00000009
     990:	000002e6 	andeq	r0, r0, r6, ror #5
     994:	0000099f 	muleq	r0, pc, r9	; <UNPREDICTABLE>
     998:	0002ca10 	andeq	ip, r2, r0, lsl sl
     99c:	0a000f00 	beq	45a4 <startup-0x1fffba5c>
     9a0:	0000098f 	andeq	r0, r0, pc, lsl #19
     9a4:	00099f09 	andeq	r9, r9, r9, lsl #30
     9a8:	09491a00 	stmdbeq	r9, {r9, fp, ip}^
     9ac:	99020000 	stmdbls	r2, {}	; <UNPREDICTABLE>
     9b0:	000009a4 	andeq	r0, r0, r4, lsr #19
     9b4:	25040305 	strcs	r0, [r4, #-773]	; 0xfffffcfb
     9b8:	071b2000 	ldreq	r2, [fp, -r0]
     9bc:	00027101 	andeq	r7, r2, r1, lsl #2
     9c0:	e0420900 	sub	r0, r2, r0, lsl #18
     9c4:	04000009 	streq	r0, [r0], #-9
     9c8:	00000882 	andeq	r0, r0, r2, lsl #17
     9cc:	07030400 	streq	r0, [r3, -r0, lsl #8]
     9d0:	04010000 	streq	r0, [r1], #-0
     9d4:	00000271 	andeq	r0, r0, r1, ror r2
     9d8:	02ad0402 	adceq	r0, sp, #33554432	; 0x2000000
     9dc:	00030000 	andeq	r0, r3, r0
     9e0:	000da607 	andeq	sl, sp, r7, lsl #12
     9e4:	ba470900 	blt	11c2dec <startup-0x1ee3d214>
     9e8:	1b000009 	blne	a14 <startup-0x1ffff5ec>
     9ec:	02710107 	rsbseq	r0, r1, #-1073741823	; 0xc0000001
     9f0:	4f090000 	svcmi	0x00090000
     9f4:	00000a05 	andeq	r0, r0, r5, lsl #20
     9f8:	00042c04 	andeq	r2, r4, r4, lsl #24
     9fc:	6e040000 	cdpvs	0, 0, cr0, cr4, cr0, {0}
     a00:	01000003 	tsteq	r0, r3
     a04:	010a0700 	tsteq	sl, r0, lsl #14
     a08:	52090000 	andpl	r0, r9, #0
     a0c:	000009eb 	andeq	r0, r0, fp, ror #19
     a10:	7101071b 	tstvc	r1, fp, lsl r7
     a14:	09000002 	stmdbeq	r0, {r1}
     a18:	000a365a 	andeq	r3, sl, sl, asr r6
     a1c:	051b0400 	ldreq	r0, [fp, #-1024]	; 0xfffffc00
     a20:	04000000 	streq	r0, [r0], #-0
     a24:	0000095a 	andeq	r0, r0, sl, asr r9
     a28:	11bf0401 			; <UNDEFINED> instruction: 0x11bf0401
     a2c:	04020000 	streq	r0, [r2], #-0
     a30:	00000a14 	andeq	r0, r0, r4, lsl sl
     a34:	a8070003 	stmdage	r7, {r0, r1}
     a38:	0900000e 	stmdbeq	r0, {r1, r2, r3}
     a3c:	000a105f 	andeq	r1, sl, pc, asr r0
     a40:	01071b00 	tsteq	r7, r0, lsl #22
     a44:	00000271 	andeq	r0, r0, r1, ror r2
     a48:	0a616e09 	beq	185c274 <startup-0x1e7a3d8c>
     a4c:	9b040000 	blls	100a54 <startup-0x1feff5ac>
     a50:	00000000 	andeq	r0, r0, r0
     a54:	00107704 	andseq	r7, r0, r4, lsl #14
     a58:	f5040100 			; <UNDEFINED> instruction: 0xf5040100
     a5c:	02000001 	andeq	r0, r0, #1
     a60:	049a0700 	ldreq	r0, [sl], #1792	; 0x700
     a64:	72090000 	andvc	r0, r9, #0
     a68:	00000a41 	andeq	r0, r0, r1, asr #20
     a6c:	84090818 	strhi	r0, [r9], #-2072	; 0xfffff7e8
     a70:	00000ab1 			; <UNDEFINED> instruction: 0x00000ab1
     a74:	000ecc19 	andeq	ip, lr, r9, lsl ip
     a78:	0b860900 	bleq	fe182e80 <GPIO_Pins+0xde18096c>
     a7c:	00000003 	andeq	r0, r0, r3
     a80:	000d6419 	andeq	r6, sp, r9, lsl r4
     a84:	e0890900 	add	r0, r9, r0, lsl #18
     a88:	04000009 	streq	r0, [r0], #-9
     a8c:	000af819 	andeq	pc, sl, r9, lsl r8	; <UNPREDICTABLE>
     a90:	368c0900 	strcc	r0, [ip], r0, lsl #18
     a94:	0500000a 	streq	r0, [r0, #-10]
     a98:	00093319 	andeq	r3, r9, r9, lsl r3
     a9c:	058f0900 	streq	r0, [pc, #2304]	; 13a4 <startup-0x1fffec5c>
     aa0:	0600000a 	streq	r0, [r0], -sl
     aa4:	000ef919 	andeq	pc, lr, r9, lsl r9	; <UNPREDICTABLE>
     aa8:	61920900 	orrsvs	r0, r2, r0, lsl #18
     aac:	0700000a 	streq	r0, [r0, -sl]
     ab0:	037c0700 	cmneq	ip, #0, 14
     ab4:	94090000 	strls	r0, [r9], #-0
     ab8:	00000a6c 	andeq	r0, r0, ip, ror #20
     abc:	0008721c 	andeq	r7, r8, ip, lsl r2
     ac0:	010a1c00 	tsteq	sl, r0, lsl #24
     ac4:	00000b28 	andeq	r0, r0, r8, lsr #22
     ac8:	0064691d 	rsbeq	r6, r4, sp, lsl r9
     acc:	0b28030a 	bleq	a016fc <startup-0x1f5fe904>
     ad0:	19000000 	stmdbne	r0, {}	; <UNPREDICTABLE>
     ad4:	000002ca 	andeq	r0, r0, sl, asr #5
     ad8:	02c3040a 	sbceq	r0, r3, #167772160	; 0xa000000
     adc:	19040000 	stmdbne	r4, {}	; <UNPREDICTABLE>
     ae0:	000001b9 			; <UNDEFINED> instruction: 0x000001b9
     ae4:	0b28050a 	bleq	a01f14 <startup-0x1f5fe0ec>
     ae8:	19080000 	stmdbne	r8, {}	; <UNPREDICTABLE>
     aec:	00000c38 	andeq	r0, r0, r8, lsr ip
     af0:	0b28060a 	bleq	a02320 <startup-0x1f5fdce0>
     af4:	19090000 	stmdbne	r9, {}	; <UNPREDICTABLE>
     af8:	00000f48 	andeq	r0, r0, r8, asr #30
     afc:	02c3070a 	sbceq	r0, r3, #2621440	; 0x280000
     b00:	190c0000 	stmdbne	ip, {}	; <UNPREDICTABLE>
     b04:	00000e7f 	andeq	r0, r0, pc, ror lr
     b08:	02c3080a 	sbceq	r0, r3, #655360	; 0xa0000
     b0c:	19100000 	ldmdbne	r0, {}	; <UNPREDICTABLE>
     b10:	00000580 	andeq	r0, r0, r0, lsl #11
     b14:	02c3090a 	sbceq	r0, r3, #163840	; 0x28000
     b18:	19140000 	ldmdbne	r4, {}	; <UNPREDICTABLE>
     b1c:	0000102c 	andeq	r1, r0, ip, lsr #32
     b20:	02c30a0a 	sbceq	r0, r3, #40960	; 0xa000
     b24:	00180000 	andseq	r0, r8, r0
     b28:	f2080105 	vrhadd.s8	d0, d8, d5
     b2c:	07000003 	streq	r0, [r0, -r3]
     b30:	00000873 	andeq	r0, r0, r3, ror r8
     b34:	0abc0b0a 	beq	fef03764 <GPIO_Pins+0xdef01250>
     b38:	eb0f0000 	bl	3c0b40 <startup-0x1fc3f4c0>
     b3c:	4a000002 	bmi	b4c <startup-0x1ffff4b4>
     b40:	1000000b 	andne	r0, r0, fp
     b44:	000002ca 	andeq	r0, r0, sl, asr #5
     b48:	f91e000f 			; <UNDEFINED> instruction: 0xf91e000f
     b4c:	03000006 	movweq	r0, #6
     b50:	000b3a16 	andeq	r3, fp, r6, lsl sl
     b54:	14030500 	strne	r0, [r3], #-1280	; 0xfffffb00
     b58:	1e200025 	cdpne	0, 2, cr0, cr0, cr5, {1}
     b5c:	000008d9 	ldrdeq	r0, [r0], -r9
     b60:	03165803 	tsteq	r6, #196608	; 0x30000
     b64:	03050000 	movweq	r0, #20480	; 0x5000
     b68:	20002490 	mulcs	r0, r0, r4
     b6c:	000b2f0f 	andeq	r2, fp, pc, lsl #30
     b70:	000b7c00 	andeq	r7, fp, r0, lsl #24
     b74:	02ca1000 	sbceq	r1, sl, #0
     b78:	00030000 	andeq	r0, r3, r0
     b7c:	000bae1e 	andeq	sl, fp, lr, lsl lr
     b80:	6c7d0300 	ldclvs	3, cr0, [sp], #-0
     b84:	0500000b 	streq	r0, [r0, #-11]
     b88:	00249403 	eoreq	r9, r4, r3, lsl #8
     b8c:	10131f20 	andsne	r1, r3, r0, lsr #30
     b90:	7e030000 	cdpvc	0, 0, cr0, cr3, cr0, {0}
     b94:	20000f4c 	andcs	r0, r0, ip, asr #30
     b98:	00000270 	andeq	r0, r0, r0, ror r2
     b9c:	0bf79c01 	bleq	ffde7ba8 <GPIO_Pins+0xdfde5694>
     ba0:	e01a0000 	ands	r0, sl, r0
     ba4:	03000006 	movweq	r0, #6
     ba8:	0002c393 	muleq	r2, r3, r3
     bac:	74910200 	ldrvc	r0, [r1], #512	; 0x200
     bb0:	000f6a20 	andeq	r6, pc, r0, lsr #20
     bb4:	0000aa20 	andeq	sl, r0, r0, lsr #20
     bb8:	000bca00 	andeq	ip, fp, r0, lsl #20
     bbc:	00692100 	rsbeq	r2, r9, r0, lsl #2
     bc0:	02c39403 	sbceq	r9, r3, #50331648	; 0x3000000
     bc4:	91020000 	mrsls	r0, (UNDEF: 2)
     bc8:	14220070 	strtne	r0, [r2], #-112	; 0xffffff90
     bcc:	88200010 	stmdahi	r0!, {r4}
     bd0:	21000001 	tstcs	r0, r1
     bd4:	b1030069 	tstlt	r3, r9, rrx
     bd8:	000002c3 	andeq	r0, r0, r3, asr #5
     bdc:	226c9102 	rsbcs	r9, ip, #-2147483648	; 0x80000000
     be0:	200010c0 	andcs	r1, r0, r0, asr #1
     be4:	000000ce 	andeq	r0, r0, lr, asr #1
     be8:	03006921 	movweq	r6, #2337	; 0x921
     bec:	0002c3c3 	andeq	ip, r2, r3, asr #7
     bf0:	68910200 	ldmvs	r1, {r9}
     bf4:	1f000000 	svcne	0x00000000
     bf8:	00000b58 	andeq	r0, r0, r8, asr fp
     bfc:	0f205d03 	svceq	0x00205d03
     c00:	002c2000 	eoreq	r2, ip, r0
     c04:	9c010000 	stcls	0, cr0, [r1], {-0}
     c08:	00000c1b 	andeq	r0, r0, fp, lsl ip
     c0c:	0004d01a 	andeq	sp, r4, sl, lsl r0
     c10:	0b610300 	bleq	1841818 <startup-0x1e7be7e8>
     c14:	02000003 	andeq	r0, r0, #3
     c18:	23007491 	movwcs	r7, #1169	; 0x491
     c1c:	0000023a 	andeq	r0, r0, sl, lsr r2
     c20:	0f085903 	svceq	0x00085903
     c24:	00182000 	andseq	r2, r8, r0
     c28:	9c010000 	stcls	0, cr0, [r1], {-0}
     c2c:	00022424 	andeq	r2, r2, r4, lsr #8
     c30:	94410300 	strbls	r0, [r1], #-768	; 0xfffffd00
     c34:	7420000e 	strtvc	r0, [r0], #-14
     c38:	01000000 	mrseq	r0, (UNDEF: 0)
     c3c:	000c509c 	muleq	ip, ip, r0
     c40:	0e361a00 	vaddeq.f32	s2, s12, s0
     c44:	44030000 	strmi	r0, [r3], #-0
     c48:	00000ab1 			; <UNDEFINED> instruction: 0x00000ab1
     c4c:	00709102 	rsbseq	r9, r0, r2, lsl #2
     c50:	0007bc1f 	andeq	fp, r7, pc, lsl ip
     c54:	fc290300 	stc2	3, cr0, [r9], #-0
     c58:	9820000d 	stmdals	r0!, {r0, r2, r3}
     c5c:	01000000 	mrseq	r0, (UNDEF: 0)
     c60:	000ca69c 	muleq	ip, ip, r6
     c64:	06702500 	ldrbteq	r2, [r0], -r0, lsl #10
     c68:	29030000 	stmdbcs	r3, {}	; <UNPREDICTABLE>
     c6c:	00000ca6 	andeq	r0, r0, r6, lsr #25
     c70:	256c9102 	strbcs	r9, [ip, #-258]!	; 0xfffffefe
     c74:	00000d29 	andeq	r0, r0, r9, lsr #26
     c78:	02c32903 	sbceq	r2, r3, #49152	; 0xc000
     c7c:	91020000 	mrsls	r0, (UNDEF: 2)
     c80:	0c2e1a68 			; <UNDEFINED> instruction: 0x0c2e1a68
     c84:	2b030000 	blcs	c0c8c <startup-0x1ff3f374>
     c88:	000002c3 	andeq	r0, r0, r3, asr #5
     c8c:	22749102 	rsbscs	r9, r4, #-2147483648	; 0x80000000
     c90:	20000e0a 	andcs	r0, r0, sl, lsl #28
     c94:	00000078 	andeq	r0, r0, r8, ror r0
     c98:	03006921 	movweq	r6, #2337	; 0x921
     c9c:	0002c32c 	andeq	ip, r2, ip, lsr #6
     ca0:	70910200 	addsvc	r0, r1, r0, lsl #4
     ca4:	04260000 	strteq	r0, [r6], #-0
     ca8:	00000b2f 	andeq	r0, r0, pc, lsr #22
     cac:	00075e1f 	andeq	r5, r7, pc, lsl lr
     cb0:	a81b0300 	ldmdage	fp, {r8, r9}
     cb4:	5420000d 	strtpl	r0, [r0], #-13
     cb8:	01000000 	mrseq	r0, (UNDEF: 0)
     cbc:	000ce69c 	muleq	ip, ip, r6
     cc0:	06702500 	ldrbteq	r2, [r0], -r0, lsl #10
     cc4:	1b030000 	blne	c0ccc <startup-0x1ff3f334>
     cc8:	00000ce6 	andeq	r0, r0, r6, ror #25
     ccc:	226c9102 	rsbcs	r9, ip, #-2147483648	; 0x80000000
     cd0:	20000db2 			; <UNDEFINED> instruction: 0x20000db2
     cd4:	00000032 	andeq	r0, r0, r2, lsr r0
     cd8:	03006921 	movweq	r6, #2337	; 0x921
     cdc:	0002c31e 	andeq	ip, r2, lr, lsl r3
     ce0:	74910200 	ldrvc	r0, [r1], #512	; 0x200
     ce4:	04260000 	strteq	r0, [r6], #-0
     ce8:	000002c3 	andeq	r0, r0, r3, asr #5
     cec:	000c8f23 	andeq	r8, ip, r3, lsr #30
     cf0:	000c0300 	andeq	r0, ip, r0, lsl #6
     cf4:	0c200000 	stceq	0, cr0, [r0], #-0
     cf8:	01000000 	mrseq	r0, (UNDEF: 0)
     cfc:	0b10279c 	bleq	40ab74 <startup-0x1fbf548c>
     d00:	5e020000 	cdppl	0, 0, cr0, cr2, cr0, {0}
     d04:	000d880c 	andeq	r8, sp, ip, lsl #16
     d08:	00002020 	andeq	r2, r0, r0, lsr #32
     d0c:	239c0100 	orrscs	r0, ip, #0, 2
     d10:	2800000d 	stmdacs	r0, {r0, r2, r3}
     d14:	00000f5a 	andeq	r0, r0, sl, asr pc
     d18:	d10c5e02 	tstle	ip, r2, lsl #28
     d1c:	02000002 	andeq	r0, r0, #2
     d20:	29007791 	stmdbcs	r0, {r0, r4, r7, r8, r9, sl, ip, sp, lr}
     d24:	00000ac1 	andeq	r0, r0, r1, asr #21
     d28:	750c3c02 	strvc	r3, [ip, #-3074]	; 0xfffff3fe
     d2c:	44000006 	strmi	r0, [r0], #-6
     d30:	4420000d 	strtmi	r0, [r0], #-13
     d34:	01000000 	mrseq	r0, (UNDEF: 0)
     d38:	000d5c9c 	muleq	sp, ip, ip
     d3c:	0f5a2800 	svceq	0x005a2800
     d40:	3c020000 	stccc	0, cr0, [r2], {-0}
     d44:	0002d10c 	andeq	sp, r2, ip, lsl #2
     d48:	6f910200 	svcvs	0x00910200
     d4c:	000f842a 	andeq	r8, pc, sl, lsr #8
     d50:	0c3e0200 	lfmeq	f0, 4, [lr], #-0
     d54:	00000675 	andeq	r0, r0, r5, ror r6
     d58:	00779102 	rsbseq	r9, r7, r2, lsl #2
     d5c:	0006782b 	andeq	r7, r6, fp, lsr #16
     d60:	0c280200 	sfmeq	f0, 4, [r8], #-0
     d64:	20000d28 	andcs	r0, r0, r8, lsr #26
     d68:	0000001c 	andeq	r0, r0, ip, lsl r0
     d6c:	f1299c01 			; <UNDEFINED> instruction: 0xf1299c01
     d70:	02000009 	andeq	r0, r0, #9
     d74:	06690bfb 			; <UNDEFINED> instruction: 0x06690bfb
     d78:	0ca40000 	stceq	0, cr0, [r4]
     d7c:	00842000 	addeq	r2, r4, r0
     d80:	9c010000 	stcls	0, cr0, [r1], {-0}
     d84:	00000dc5 	andeq	r0, r0, r5, asr #27
     d88:	000ab828 	andeq	fp, sl, r8, lsr #16
     d8c:	0bfb0200 	bleq	ffec1594 <GPIO_Pins+0xdfebf080>
     d90:	000002d1 	ldrdeq	r0, [r0], -r1
     d94:	2c679102 	stfcsp	f1, [r7], #-8
     d98:	00706d74 	rsbseq	r6, r0, r4, ror sp
     d9c:	0b0bfd02 	bleq	3001ac <startup-0x1fcffe54>
     da0:	02000003 	andeq	r0, r0, #3
     da4:	652a6c91 	strvs	r6, [sl, #-3217]!	; 0xfffff36f
     da8:	0200000b 	andeq	r0, r0, #11
     dac:	030b0bfe 	movweq	r0, #48126	; 0xbbfe
     db0:	91020000 	mrsls	r0, (UNDEF: 2)
     db4:	0f842a74 	svceq	0x00842a74
     db8:	ff020000 			; <UNDEFINED> instruction: 0xff020000
     dbc:	0006690b 	andeq	r6, r6, fp, lsl #18
     dc0:	73910200 	orrsvc	r0, r1, #0, 4
     dc4:	0a242700 	beq	90a9cc <startup-0x1f6f5634>
     dc8:	d6020000 	strle	r0, [r2], -r0
     dcc:	000c540b 	andeq	r5, ip, fp, lsl #8
     dd0:	00005020 	andeq	r5, r0, r0, lsr #32
     dd4:	fa9c0100 	blx	fe7011dc <GPIO_Pins+0xde6fecc8>
     dd8:	2800000d 	stmdacs	r0, {r0, r2, r3}
     ddc:	00000f5a 	andeq	r0, r0, sl, asr pc
     de0:	d10bd602 	tstle	fp, r2, lsl #12
     de4:	02000002 	andeq	r0, r0, #2
     de8:	ef287791 	svc	0x00287791
     dec:	0200000a 	andeq	r0, r0, #10
     df0:	069c0bd6 			; <UNDEFINED> instruction: 0x069c0bd6
     df4:	91020000 	mrsls	r0, (UNDEF: 2)
     df8:	85270076 	strhi	r0, [r7, #-118]!	; 0xffffff8a
     dfc:	0200000d 	andeq	r0, r0, #13
     e00:	0c180a9e 			; <UNDEFINED> instruction: 0x0c180a9e
     e04:	003c2000 	eorseq	r2, ip, r0
     e08:	9c010000 	stcls	0, cr0, [r1], {-0}
     e0c:	00000e20 	andeq	r0, r0, r0, lsr #28
     e10:	00013328 	andeq	r3, r1, r8, lsr #6
     e14:	0a9e0200 	beq	fe78161c <GPIO_Pins+0xde77f108>
     e18:	000002d1 	ldrdeq	r0, [r0], -r1
     e1c:	00779102 	rsbseq	r9, r7, r2, lsl #2
     e20:	0000d027 	andeq	sp, r0, r7, lsr #32
     e24:	0a860200 	beq	fe18162c <GPIO_Pins+0xde17f118>
     e28:	20000bd8 	ldrdcs	r0, [r0], -r8
     e2c:	00000040 	andeq	r0, r0, r0, asr #32
     e30:	0e559c01 	cdpeq	12, 5, cr9, cr5, cr1, {0}
     e34:	6f280000 	svcvs	0x00280000
     e38:	0200000b 	andeq	r0, r0, #11
     e3c:	030b0a86 	movweq	r0, #47750	; 0xba86
     e40:	91020000 	mrsls	r0, (UNDEF: 2)
     e44:	0aef2874 	beq	ffbcb01c <GPIO_Pins+0xdfbc8b08>
     e48:	86020000 	strhi	r0, [r2], -r0
     e4c:	00069c0a 	andeq	r9, r6, sl, lsl #24
     e50:	73910200 	orrsvc	r0, r1, #0, 4
     e54:	0f9c2700 	svceq	0x009c2700
     e58:	52020000 	andpl	r0, r2, #0
     e5c:	000b980a 	andeq	r9, fp, sl, lsl #16
     e60:	00004020 	andeq	r4, r0, r0, lsr #32
     e64:	8a9c0100 	bhi	fe70126c <GPIO_Pins+0xde6fed58>
     e68:	2800000e 	stmdacs	r0, {r1, r2, r3}
     e6c:	00000a87 	andeq	r0, r0, r7, lsl #21
     e70:	0b0a5202 	bleq	295680 <startup-0x1fd6a980>
     e74:	02000003 	andeq	r0, r0, #3
     e78:	ef287491 	svc	0x00287491
     e7c:	0200000a 	andeq	r0, r0, #10
     e80:	069c0a52 			; <UNDEFINED> instruction: 0x069c0a52
     e84:	91020000 	mrsls	r0, (UNDEF: 2)
     e88:	db270073 	blle	9c105c <startup-0x1f63efa4>
     e8c:	02000004 	andeq	r0, r0, #4
     e90:	0b580a19 	bleq	16036fc <startup-0x1e9fc904>
     e94:	00402000 	subeq	r2, r0, r0
     e98:	9c010000 	stcls	0, cr0, [r1], {-0}
     e9c:	00000ebf 			; <UNDEFINED> instruction: 0x00000ebf
     ea0:	00033a28 	andeq	r3, r3, r8, lsr #20
     ea4:	0a190200 	beq	6416ac <startup-0x1f9be954>
     ea8:	0000030b 	andeq	r0, r0, fp, lsl #6
     eac:	28749102 	ldmdacs	r4!, {r1, r8, ip, pc}^
     eb0:	00000aef 	andeq	r0, r0, pc, ror #21
     eb4:	9c0a1902 			; <UNDEFINED> instruction: 0x9c0a1902
     eb8:	02000006 	andeq	r0, r0, #6
     ebc:	27007391 			; <UNDEFINED> instruction: 0x27007391
     ec0:	000000ed 	andeq	r0, r0, sp, ror #1
     ec4:	1809fb02 	stmdane	r9, {r1, r8, r9, fp, ip, sp, lr, pc}
     ec8:	4020000b 	eormi	r0, r0, fp
     ecc:	01000000 	mrseq	r0, (UNDEF: 0)
     ed0:	000ef49c 	muleq	lr, ip, r4
     ed4:	10682800 	rsbne	r2, r8, r0, lsl #16
     ed8:	fb020000 	blx	80ee2 <startup-0x1ff7f11e>
     edc:	00030b09 	andeq	r0, r3, r9, lsl #22
     ee0:	74910200 	ldrvc	r0, [r1], #512	; 0x200
     ee4:	000aef28 	andeq	lr, sl, r8, lsr #30
     ee8:	09fb0200 	ldmibeq	fp!, {r9}^
     eec:	0000069c 	muleq	r0, ip, r6
     ef0:	00739102 	rsbseq	r9, r3, r2, lsl #2
     ef4:	000fee27 	andeq	lr, pc, r7, lsr #28
     ef8:	09db0200 	ldmibeq	fp, {r9}^
     efc:	20000ad8 	ldrdcs	r0, [r0], -r8
     f00:	00000040 	andeq	r0, r0, r0, asr #32
     f04:	0f299c01 	svceq	0x00299c01
     f08:	54280000 	strtpl	r0, [r8], #-0
     f0c:	0200000e 	andeq	r0, r0, #14
     f10:	030b09db 	movweq	r0, #47579	; 0xb9db
     f14:	91020000 	mrsls	r0, (UNDEF: 2)
     f18:	0aef2874 	beq	ffbcb0f0 <GPIO_Pins+0xdfbc8bdc>
     f1c:	db020000 	blle	80f24 <startup-0x1ff7f0dc>
     f20:	00069c09 	andeq	r9, r6, r9, lsl #24
     f24:	73910200 	orrsvc	r0, r1, #0, 4
     f28:	04b92700 	ldrteq	r2, [r9], #1792	; 0x700
     f2c:	aa020000 	bge	80f34 <startup-0x1ff7f0cc>
     f30:	000a9809 	andeq	r9, sl, r9, lsl #16
     f34:	00004020 	andeq	r4, r0, r0, lsr #32
     f38:	5e9c0100 	fmlple	f0, f4, f0
     f3c:	2800000f 	stmdacs	r0, {r0, r1, r2, r3}
     f40:	00000b6f 	andeq	r0, r0, pc, ror #22
     f44:	0b09aa02 	bleq	26b754 <startup-0x1fd948ac>
     f48:	02000003 	andeq	r0, r0, #3
     f4c:	ef287491 	svc	0x00287491
     f50:	0200000a 	andeq	r0, r0, #10
     f54:	069c09aa 	ldreq	r0, [ip], sl, lsr #19
     f58:	91020000 	mrsls	r0, (UNDEF: 2)
     f5c:	1c270073 	stcne	0, cr0, [r7], #-460	; 0xfffffe34
     f60:	02000001 	andeq	r0, r0, #1
     f64:	0a58097b 	beq	1603558 <startup-0x1e9fcaa8>
     f68:	00402000 	subeq	r2, r0, r0
     f6c:	9c010000 	stcls	0, cr0, [r1], {-0}
     f70:	00000f93 	muleq	r0, r3, pc	; <UNPREDICTABLE>
     f74:	000a8728 	andeq	r8, sl, r8, lsr #14
     f78:	097b0200 	ldmdbeq	fp!, {r9}^
     f7c:	0000030b 	andeq	r0, r0, fp, lsl #6
     f80:	28749102 	ldmdacs	r4!, {r1, r8, ip, pc}^
     f84:	00000aef 	andeq	r0, r0, pc, ror #21
     f88:	9c097b02 			; <UNDEFINED> instruction: 0x9c097b02
     f8c:	02000006 	andeq	r0, r0, #6
     f90:	27007391 			; <UNDEFINED> instruction: 0x27007391
     f94:	0000027e 	andeq	r0, r0, lr, ror r2
     f98:	18094502 	stmdane	r9, {r1, r8, sl, lr}
     f9c:	4020000a 	eormi	r0, r0, sl
     fa0:	01000000 	mrseq	r0, (UNDEF: 0)
     fa4:	000fc89c 	muleq	pc, ip, r8	; <UNPREDICTABLE>
     fa8:	033a2800 	teqeq	sl, #0, 16
     fac:	45020000 	strmi	r0, [r2, #-0]
     fb0:	00030b09 	andeq	r0, r3, r9, lsl #22
     fb4:	74910200 	ldrvc	r0, [r1], #512	; 0x200
     fb8:	000aef28 	andeq	lr, sl, r8, lsr #30
     fbc:	09450200 	stmdbeq	r5, {r9}^
     fc0:	0000069c 	muleq	r0, ip, r6
     fc4:	00739102 	rsbseq	r9, r3, r2, lsl #2
     fc8:	00116f27 	andseq	r6, r1, r7, lsr #30
     fcc:	092a0200 	stmdbeq	sl!, {r9}
     fd0:	200009d8 	ldrdcs	r0, [r0], -r8
     fd4:	00000040 	andeq	r0, r0, r0, asr #32
     fd8:	0ffd9c01 	svceq	0x00fd9c01
     fdc:	68280000 	stmdavs	r8!, {}	; <UNPREDICTABLE>
     fe0:	02000010 	andeq	r0, r0, #16
     fe4:	030b092a 	movweq	r0, #47402	; 0xb92a
     fe8:	91020000 	mrsls	r0, (UNDEF: 2)
     fec:	0aef2874 	beq	ffbcb1c4 <GPIO_Pins+0xdfbc8cb0>
     ff0:	2a020000 	bcs	80ff8 <startup-0x1ff7f008>
     ff4:	00069c09 	andeq	r9, r6, r9, lsl #24
     ff8:	73910200 	orrsvc	r0, r1, #0, 4
     ffc:	0ed52700 	cdpeq	7, 13, cr2, cr5, cr0, {0}
    1000:	0d020000 	stceq	0, cr0, [r2, #-0]
    1004:	00099809 	andeq	r9, r9, r9, lsl #16
    1008:	00004020 	andeq	r4, r0, r0, lsr #32
    100c:	329c0100 	addscc	r0, ip, #0, 2
    1010:	28000010 	stmdacs	r0, {r4}
    1014:	00000e54 	andeq	r0, r0, r4, asr lr
    1018:	0b090d02 	bleq	244428 <startup-0x1fdbbbd8>
    101c:	02000003 	andeq	r0, r0, #3
    1020:	ef287491 	svc	0x00287491
    1024:	0200000a 	andeq	r0, r0, #10
    1028:	069c090d 	ldreq	r0, [ip], sp, lsl #18
    102c:	91020000 	mrsls	r0, (UNDEF: 2)
    1030:	e2270073 	eor	r0, r7, #115	; 0x73
    1034:	02000007 	andeq	r0, r0, #7
    1038:	095808e3 	ldmdbeq	r8, {r0, r1, r5, r6, r7, fp}^
    103c:	00402000 	subeq	r2, r0, r0
    1040:	9c010000 	stcls	0, cr0, [r1], {-0}
    1044:	00001067 	andeq	r1, r0, r7, rrx
    1048:	000b6f28 	andeq	r6, fp, r8, lsr #30
    104c:	08e30200 	stmiaeq	r3!, {r9}^
    1050:	0000030b 	andeq	r0, r0, fp, lsl #6
    1054:	28749102 	ldmdacs	r4!, {r1, r8, ip, pc}^
    1058:	00000aef 	andeq	r0, r0, pc, ror #21
    105c:	9c08e302 	stcls	3, cr14, [r8], {2}
    1060:	02000006 	andeq	r0, r0, #6
    1064:	27007391 			; <UNDEFINED> instruction: 0x27007391
    1068:	000003be 			; <UNDEFINED> instruction: 0x000003be
    106c:	1808af02 	stmdane	r8, {r1, r8, r9, sl, fp, sp, pc}
    1070:	40200009 	eormi	r0, r0, r9
    1074:	01000000 	mrseq	r0, (UNDEF: 0)
    1078:	00109c9c 	mulseq	r0, ip, ip
    107c:	0a872800 	beq	fe1cb084 <GPIO_Pins+0xde1c8b70>
    1080:	af020000 	svcge	0x00020000
    1084:	00030b08 	andeq	r0, r3, r8, lsl #22
    1088:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    108c:	000aef28 	andeq	lr, sl, r8, lsr #30
    1090:	08af0200 	stmiaeq	pc!, {r9}	; <UNPREDICTABLE>
    1094:	0000069c 	muleq	r0, ip, r6
    1098:	00739102 	rsbseq	r9, r3, r2, lsl #2
    109c:	000c0a27 	andeq	r0, ip, r7, lsr #20
    10a0:	08760200 	ldmdaeq	r6!, {r9}^
    10a4:	200008d8 	ldrdcs	r0, [r0], -r8
    10a8:	00000040 	andeq	r0, r0, r0, asr #32
    10ac:	10d19c01 	sbcsne	r9, r1, r1, lsl #24
    10b0:	3a280000 	bcc	a010b8 <startup-0x1f5fef48>
    10b4:	02000003 	andeq	r0, r0, #3
    10b8:	030b0876 	movweq	r0, #47222	; 0xb876
    10bc:	91020000 	mrsls	r0, (UNDEF: 2)
    10c0:	0aef2874 	beq	ffbcb298 <GPIO_Pins+0xdfbc8d84>
    10c4:	76020000 	strvc	r0, [r2], -r0
    10c8:	00069c08 	andeq	r9, r6, r8, lsl #24
    10cc:	73910200 	orrsvc	r0, r1, #0, 4
    10d0:	01572700 	cmpeq	r7, r0, lsl #14
    10d4:	58020000 	stmdapl	r2, {}	; <UNPREDICTABLE>
    10d8:	00089808 	andeq	r9, r8, r8, lsl #16
    10dc:	00004020 	andeq	r4, r0, r0, lsr #32
    10e0:	069c0100 	ldreq	r0, [ip], r0, lsl #2
    10e4:	28000011 	stmdacs	r0, {r0, r4}
    10e8:	00001068 	andeq	r1, r0, r8, rrx
    10ec:	0b085802 	bleq	2170fc <startup-0x1fde8f04>
    10f0:	02000003 	andeq	r0, r0, #3
    10f4:	ef287491 	svc	0x00287491
    10f8:	0200000a 	andeq	r0, r0, #10
    10fc:	069c0858 			; <UNDEFINED> instruction: 0x069c0858
    1100:	91020000 	mrsls	r0, (UNDEF: 2)
    1104:	9c270073 	stcls	0, cr0, [r7], #-460	; 0xfffffe34
    1108:	02000010 	andeq	r0, r0, #16
    110c:	08580838 	ldmdaeq	r8, {r3, r4, r5, fp}^
    1110:	00402000 	subeq	r2, r0, r0
    1114:	9c010000 	stcls	0, cr0, [r1], {-0}
    1118:	0000113b 	andeq	r1, r0, fp, lsr r1
    111c:	000e5428 	andeq	r5, lr, r8, lsr #8
    1120:	08380200 	ldmdaeq	r8!, {r9}
    1124:	0000030b 	andeq	r0, r0, fp, lsl #6
    1128:	28749102 	ldmdacs	r4!, {r1, r8, ip, pc}^
    112c:	00000aef 	andeq	r0, r0, pc, ror #21
    1130:	9c083802 	stcls	8, cr3, [r8], {2}
    1134:	02000006 	andeq	r0, r0, #6
    1138:	27007391 			; <UNDEFINED> instruction: 0x27007391
    113c:	00000173 	andeq	r0, r0, r3, ror r1
    1140:	3c080e02 	stccc	14, cr0, [r8], {2}
    1144:	1c200008 	stcne	0, cr0, [r0], #-32	; 0xffffffe0
    1148:	01000000 	mrseq	r0, (UNDEF: 0)
    114c:	0011619c 	mulseq	r1, ip, r1
    1150:	11502800 	cmpne	r0, r0, lsl #16
    1154:	0e020000 	cdpeq	0, 0, cr0, cr2, cr0, {0}
    1158:	00030b08 	andeq	r0, r3, r8, lsl #22
    115c:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    1160:	024a2700 	subeq	r2, sl, #0, 14
    1164:	8e020000 	cdphi	0, 0, cr0, cr2, cr0, {0}
    1168:	00080007 	andeq	r0, r8, r7
    116c:	00003c20 	andeq	r3, r0, r0, lsr #24
    1170:	969c0100 	ldrls	r0, [ip], r0, lsl #2
    1174:	28000011 	stmdacs	r0, {r0, r4}
    1178:	00000808 	andeq	r0, r0, r8, lsl #16
    117c:	0b078e02 	bleq	1e498c <startup-0x1fe1b674>
    1180:	02000003 	andeq	r0, r0, #3
    1184:	252a6c91 	strcs	r6, [sl, #-3217]!	; 0xfffff36f
    1188:	0200000e 	andeq	r0, r0, #14
    118c:	030b0790 	movweq	r0, #46992	; 0xb790
    1190:	91020000 	mrsls	r0, (UNDEF: 2)
    1194:	0a270074 	beq	9c136c <startup-0x1f63ec94>
    1198:	02000002 	andeq	r0, r0, #2
    119c:	07c0072b 	strbeq	r0, [r0, fp, lsr #14]
    11a0:	00402000 	subeq	r2, r0, r0
    11a4:	9c010000 	stcls	0, cr0, [r1], {-0}
    11a8:	000011cb 	andeq	r1, r0, fp, asr #3
    11ac:	0007f928 	andeq	pc, r7, r8, lsr #18
    11b0:	072b0200 	streq	r0, [fp, -r0, lsl #4]!
    11b4:	0000030b 	andeq	r0, r0, fp, lsl #6
    11b8:	2a6c9102 	bcs	1b255c8 <startup-0x1e4daa38>
    11bc:	00000e25 	andeq	r0, r0, r5, lsr #28
    11c0:	0b072d02 	bleq	1cc5d0 <startup-0x1fe33a30>
    11c4:	02000003 	andeq	r0, r0, #3
    11c8:	27007491 			; <UNDEFINED> instruction: 0x27007491
    11cc:	0000096c 	andeq	r0, r0, ip, ror #18
    11d0:	84070b02 	strhi	r0, [r7], #-2818	; 0xfffff4fe
    11d4:	3c200007 	stccc	0, cr0, [r0], #-28	; 0xffffffe4
    11d8:	01000000 	mrseq	r0, (UNDEF: 0)
    11dc:	0012009c 	mulseq	r2, ip, r0
    11e0:	031e2800 	tsteq	lr, #0, 16
    11e4:	0b020000 	bleq	811ec <startup-0x1ff7ee14>
    11e8:	00030b07 	andeq	r0, r3, r7, lsl #22
    11ec:	6c910200 	lfmvs	f0, 4, [r1], {0}
    11f0:	000e252a 	andeq	r2, lr, sl, lsr #10
    11f4:	070d0200 	streq	r0, [sp, -r0, lsl #4]
    11f8:	0000030b 	andeq	r0, r0, fp, lsl #6
    11fc:	00749102 	rsbseq	r9, r4, r2, lsl #2
    1200:	0002e127 	andeq	lr, r2, r7, lsr #2
    1204:	06ea0200 	strbteq	r0, [sl], r0, lsl #4
    1208:	20000748 	andcs	r0, r0, r8, asr #14
    120c:	0000003c 	andeq	r0, r0, ip, lsr r0
    1210:	12359c01 	eorsne	r9, r5, #256	; 0x100
    1214:	17280000 	strne	r0, [r8, -r0]!
    1218:	02000008 	andeq	r0, r0, #8
    121c:	030b06ea 	movweq	r0, #46826	; 0xb6ea
    1220:	91020000 	mrsls	r0, (UNDEF: 2)
    1224:	0e252a6c 	vnmuleq.f32	s4, s10, s25
    1228:	ec020000 	stc	0, cr0, [r2], {-0}
    122c:	00030b06 	andeq	r0, r3, r6, lsl #22
    1230:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    1234:	06c22700 	strbeq	r2, [r2], r0, lsl #14
    1238:	c6020000 	strgt	r0, [r2], -r0
    123c:	00070c06 	andeq	r0, r7, r6, lsl #24
    1240:	00003c20 	andeq	r3, r0, r0, lsr #24
    1244:	6a9c0100 	bvs	fe70164c <GPIO_Pins+0xde6ff138>
    1248:	28000012 	stmdacs	r0, {r1, r4}
    124c:	00000b41 	andeq	r0, r0, r1, asr #22
    1250:	0b06c602 	bleq	1b2a60 <startup-0x1fe4d5a0>
    1254:	02000003 	andeq	r0, r0, #3
    1258:	252a6c91 	strcs	r6, [sl, #-3217]!	; 0xfffff36f
    125c:	0200000e 	andeq	r0, r0, #14
    1260:	030b06c8 	movweq	r0, #46792	; 0xb6c8
    1264:	91020000 	mrsls	r0, (UNDEF: 2)
    1268:	57270074 			; <UNDEFINED> instruction: 0x57270074
    126c:	02000000 	andeq	r0, r0, #0
    1270:	06f006ab 	ldrbteq	r0, [r0], fp, lsr #13
    1274:	001c2000 	andseq	r2, ip, r0
    1278:	9c010000 	stcls	0, cr0, [r1], {-0}
    127c:	00001290 	muleq	r0, r0, r2
    1280:	0008b528 	andeq	fp, r8, r8, lsr #10
    1284:	06ab0200 	strteq	r0, [fp], r0, lsl #4
    1288:	0000030b 	andeq	r0, r0, fp, lsl #6
    128c:	00749102 	rsbseq	r9, r4, r2, lsl #2
    1290:	000c5527 	andeq	r5, ip, r7, lsr #10
    1294:	05ef0200 	strbeq	r0, [pc, #512]!	; 149c <startup-0x1fffeb64>
    1298:	200006d0 	ldrdcs	r0, [r0], -r0	; <UNPREDICTABLE>
    129c:	00000020 	andeq	r0, r0, r0, lsr #32
    12a0:	12b69c01 	adcsne	r9, r6, #256	; 0x100
    12a4:	ef280000 	svc	0x00280000
    12a8:	0200000a 	andeq	r0, r0, #10
    12ac:	069c05ef 	ldreq	r0, [ip], pc, ror #11
    12b0:	91020000 	mrsls	r0, (UNDEF: 2)
    12b4:	35270077 	strcc	r0, [r7, #-119]!	; 0xffffff89
    12b8:	02000010 	andeq	r0, r0, #16
    12bc:	06b005de 	ssateq	r0, #17, lr, asr #11
    12c0:	00202000 	eoreq	r2, r0, r0
    12c4:	9c010000 	stcls	0, cr0, [r1], {-0}
    12c8:	000012dc 	ldrdeq	r1, [r0], -ip
    12cc:	000aef28 	andeq	lr, sl, r8, lsr #30
    12d0:	05de0200 	ldrbeq	r0, [lr, #512]	; 0x200
    12d4:	0000069c 	muleq	r0, ip, r6
    12d8:	00779102 	rsbseq	r9, r7, r2, lsl #2
    12dc:	000a9627 	andeq	r9, sl, r7, lsr #12
    12e0:	05be0200 	ldreq	r0, [lr, #512]!	; 0x200
    12e4:	20000650 	andcs	r0, r0, r0, asr r6
    12e8:	00000060 	andeq	r0, r0, r0, rrx
    12ec:	13119c01 	tstne	r1, #256	; 0x100
    12f0:	46280000 	strtmi	r0, [r8], -r0
    12f4:	02000001 	andeq	r0, r0, #1
    12f8:	030b05be 	movweq	r0, #46526	; 0xb5be
    12fc:	91020000 	mrsls	r0, (UNDEF: 2)
    1300:	0e252a6c 	vnmuleq.f32	s4, s10, s25
    1304:	c0020000 	andgt	r0, r2, r0
    1308:	00030b05 	andeq	r0, r3, r5, lsl #22
    130c:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    1310:	00682d00 	rsbeq	r2, r8, r0, lsl #26
    1314:	25020000 	strcs	r0, [r2, #-0]
    1318:	0004f805 	andeq	pc, r4, r5, lsl #16
    131c:	00015820 	andeq	r5, r1, r0, lsr #16
    1320:	919c0100 	orrsls	r0, ip, r0, lsl #2
    1324:	28000013 	stmdacs	r0, {r0, r1, r4}
    1328:	00000a03 	andeq	r0, r0, r3, lsl #20
    132c:	91052502 	tstls	r5, r2, lsl #10
    1330:	02000013 	andeq	r0, r0, #19
    1334:	742c5c91 	strtvc	r5, [ip], #-3217	; 0xfffff36f
    1338:	0200706d 	andeq	r7, r0, #109	; 0x6d
    133c:	030b0527 	movweq	r0, #46375	; 0xb527
    1340:	91020000 	mrsls	r0, (UNDEF: 2)
    1344:	11692a70 	smcne	37536	; 0x92a0
    1348:	27020000 	strcs	r0, [r2, -r0]
    134c:	00030b05 	andeq	r0, r3, r5, lsl #22
    1350:	6c910200 	lfmvs	f0, 4, [r1], {0}
    1354:	000f952a 	andeq	r9, pc, sl, lsr #10
    1358:	05270200 	streq	r0, [r7, #-512]!	; 0xfffffe00
    135c:	0000030b 	andeq	r0, r0, fp, lsl #6
    1360:	2a749102 	bcs	1d25770 <startup-0x1e2da890>
    1364:	00000000 	andeq	r0, r0, r0
    1368:	0b052702 	bleq	14af78 <startup-0x1feb5088>
    136c:	02000003 	andeq	r0, r0, #3
    1370:	c42a6891 	strtgt	r6, [sl], #-2193	; 0xfffff76f
    1374:	02000005 	andeq	r0, r0, #5
    1378:	030b0527 	movweq	r0, #46375	; 0xb527
    137c:	91020000 	mrsls	r0, (UNDEF: 2)
    1380:	11dd2a64 	bicsne	r2, sp, r4, ror #20
    1384:	27020000 	strcs	r0, [r2, -r0]
    1388:	00030b05 	andeq	r0, r3, r5, lsl #22
    138c:	60910200 	addsvs	r0, r1, r0, lsl #4
    1390:	84042600 	strhi	r2, [r4], #-1536	; 0xfffffa00
    1394:	27000009 	strcs	r0, [r0, -r9]
    1398:	000002ba 			; <UNDEFINED> instruction: 0x000002ba
    139c:	bc04f102 	stfltd	f7, [r4], {2}
    13a0:	3c200004 	stccc	0, cr0, [r0], #-16
    13a4:	01000000 	mrseq	r0, (UNDEF: 0)
    13a8:	0013cc9c 	mulseq	r3, ip, ip
    13ac:	01962800 	orrseq	r2, r6, r0, lsl #16
    13b0:	f1020000 	cps	#0
    13b4:	00030b04 	andeq	r0, r3, r4, lsl #22
    13b8:	6c910200 	lfmvs	f0, 4, [r1], {0}
    13bc:	000e252a 	andeq	r2, lr, sl, lsr #10
    13c0:	04f30200 	ldrbteq	r0, [r3], #512	; 0x200
    13c4:	0000030b 	andeq	r0, r0, fp, lsl #6
    13c8:	00749102 	rsbseq	r9, r4, r2, lsl #2
    13cc:	0008e127 	andeq	lr, r8, r7, lsr #2
    13d0:	04d20200 	ldrbeq	r0, [r2], #512	; 0x200
    13d4:	20000484 	andcs	r0, r0, r4, lsl #9
    13d8:	00000038 	andeq	r0, r0, r8, lsr r0
    13dc:	14019c01 	strne	r9, [r1], #-3073	; 0xfffff3ff
    13e0:	96280000 	strtls	r0, [r8], -r0
    13e4:	02000001 	andeq	r0, r0, #1
    13e8:	030b04d2 	movweq	r0, #46290	; 0xb4d2
    13ec:	91020000 	mrsls	r0, (UNDEF: 2)
    13f0:	0e252a6c 	vnmuleq.f32	s4, s10, s25
    13f4:	d4020000 	strle	r0, [r2], #-0
    13f8:	00030b04 	andeq	r0, r3, r4, lsl #22
    13fc:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    1400:	0b7e2700 	bleq	1f8b008 <startup-0x1e074ff8>
    1404:	b3020000 	movwlt	r0, #8192	; 0x2000
    1408:	00045004 	andeq	r5, r4, r4
    140c:	00003420 	andeq	r3, r0, r0, lsr #8
    1410:	369c0100 	ldrcc	r0, [ip], r0, lsl #2
    1414:	28000014 	stmdacs	r0, {r2, r4}
    1418:	0000058a 	andeq	r0, r0, sl, lsl #11
    141c:	0b04b302 	bleq	12e02c <startup-0x1fed1fd4>
    1420:	02000003 	andeq	r0, r0, #3
    1424:	252a6c91 	strcs	r6, [sl, #-3217]!	; 0xfffff36f
    1428:	0200000e 	andeq	r0, r0, #14
    142c:	030b04b5 	movweq	r0, #46261	; 0xb4b5
    1430:	91020000 	mrsls	r0, (UNDEF: 2)
    1434:	002e0074 	eoreq	r0, lr, r4, ror r0
    1438:	02000003 	andeq	r0, r0, #3
    143c:	02d1049a 	sbcseq	r0, r1, #-1711276032	; 0x9a000000
    1440:	04340000 	ldrteq	r0, [r4], #-0
    1444:	001c2000 	andseq	r2, ip, r0
    1448:	9c010000 	stcls	0, cr0, [r1], {-0}
    144c:	00119c27 	andseq	r9, r1, r7, lsr #24
    1450:	047d0200 	ldrbteq	r0, [sp], #-512	; 0xfffffe00
    1454:	20000400 	andcs	r0, r0, r0, lsl #8
    1458:	00000034 	andeq	r0, r0, r4, lsr r0
    145c:	14819c01 	strne	r9, [r1], #3073	; 0xc01
    1460:	8d280000 	stchi	0, cr0, [r8, #-0]
    1464:	02000003 	andeq	r0, r0, #3
    1468:	030b047d 	movweq	r0, #46205	; 0xb47d
    146c:	91020000 	mrsls	r0, (UNDEF: 2)
    1470:	0e252a6c 	vnmuleq.f32	s4, s10, s25
    1474:	7f020000 	svcvc	0x00020000
    1478:	00030b04 	andeq	r0, r3, r4, lsl #22
    147c:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    1480:	08a12700 	stmiaeq	r1!, {r8, r9, sl, sp}
    1484:	b5020000 	strlt	r0, [r2, #-0]
    1488:	0003c403 	andeq	ip, r3, r3, lsl #8
    148c:	00003c20 	andeq	r3, r0, r0, lsr #24
    1490:	c59c0100 	ldrgt	r0, [ip, #256]	; 0x100
    1494:	28000014 	stmdacs	r0, {r2, r4}
    1498:	00000c97 	muleq	r0, r7, ip
    149c:	0b03b502 	bleq	ee8ac <startup-0x1ff11754>
    14a0:	02000003 	andeq	r0, r0, #3
    14a4:	62286c91 	eorvs	r6, r8, #37120	; 0x9100
    14a8:	02000003 	andeq	r0, r0, #3
    14ac:	030b03b5 	movweq	r0, #46005	; 0xb3b5
    14b0:	91020000 	mrsls	r0, (UNDEF: 2)
    14b4:	0e252a68 	vnmuleq.f32	s4, s10, s17
    14b8:	b7020000 	strlt	r0, [r2, -r0]
    14bc:	00030b03 	andeq	r0, r3, r3, lsl #22
    14c0:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    14c4:	0a312700 	beq	c4b0cc <startup-0x1f3b4f34>
    14c8:	88020000 	stmdahi	r2, {}	; <UNPREDICTABLE>
    14cc:	00038403 	andeq	r8, r3, r3, lsl #8
    14d0:	00004020 	andeq	r4, r0, r0, lsr #32
    14d4:	099c0100 	ldmibeq	ip, {r8}
    14d8:	28000015 	stmdacs	r0, {r0, r2, r4}
    14dc:	00000bfb 	strdeq	r0, [r0], -fp
    14e0:	0b038802 	bleq	e34f0 <startup-0x1ff1cb10>
    14e4:	02000003 	andeq	r0, r0, #3
    14e8:	1d286c91 	stcne	12, cr6, [r8, #-580]!	; 0xfffffdbc
    14ec:	0200000d 	andeq	r0, r0, #13
    14f0:	030b0388 	movweq	r0, #45960	; 0xb388
    14f4:	91020000 	mrsls	r0, (UNDEF: 2)
    14f8:	0e252a68 	vnmuleq.f32	s4, s10, s17
    14fc:	8a020000 	bhi	81504 <startup-0x1ff7eafc>
    1500:	00030b03 	andeq	r0, r3, r3, lsl #22
    1504:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    1508:	0b262700 	bleq	98b110 <startup-0x1f674ef0>
    150c:	6f020000 	svcvs	0x00020000
    1510:	00036403 	andeq	r6, r3, r3, lsl #8
    1514:	00002020 	andeq	r2, r0, r0, lsr #32
    1518:	2f9c0100 	svccs	0x009c0100
    151c:	28000015 	stmdacs	r0, {r0, r2, r4}
    1520:	00000aef 	andeq	r0, r0, pc, ror #21
    1524:	9c036f02 	stcls	15, cr6, [r3], {2}
    1528:	02000006 	andeq	r0, r0, #6
    152c:	27007791 			; <UNDEFINED> instruction: 0x27007791
    1530:	00001186 	andeq	r1, r0, r6, lsl #3
    1534:	44035d02 	strmi	r5, [r3], #-3330	; 0xfffff2fe
    1538:	20200003 	eorcs	r0, r0, r3
    153c:	01000000 	mrseq	r0, (UNDEF: 0)
    1540:	0015559c 	mulseq	r5, ip, r5
    1544:	0aef2800 	beq	ffbcb54c <GPIO_Pins+0xdfbc9038>
    1548:	5d020000 	stcpl	0, cr0, [r2, #-0]
    154c:	00069c03 	andeq	r9, r6, r3, lsl #24
    1550:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    1554:	06e82700 	strbteq	r2, [r8], r0, lsl #14
    1558:	49020000 	stmdbmi	r2, {}	; <UNPREDICTABLE>
    155c:	00031403 	andeq	r1, r3, r3, lsl #8
    1560:	00003020 	andeq	r3, r0, r0, lsr #32
    1564:	999c0100 	ldmibls	ip, {r8}
    1568:	28000015 	stmdacs	r0, {r0, r2, r4}
    156c:	00000be3 	andeq	r0, r0, r3, ror #23
    1570:	0b034902 	bleq	d3980 <startup-0x1ff2c680>
    1574:	02000003 	andeq	r0, r0, #3
    1578:	eb287491 	bl	a1e7c4 <startup-0x1f5e183c>
    157c:	0200000b 	andeq	r0, r0, #11
    1580:	030b0349 	movweq	r0, #45897	; 0xb349
    1584:	91020000 	mrsls	r0, (UNDEF: 2)
    1588:	0bf32870 	bleq	ffccb750 <GPIO_Pins+0xdfcc923c>
    158c:	49020000 	stmdbmi	r2, {}	; <UNPREDICTABLE>
    1590:	00030b03 	andeq	r0, r3, r3, lsl #22
    1594:	6c910200 	lfmvs	f0, 4, [r1], {0}
    1598:	01882700 	orreq	r2, r8, r0, lsl #14
    159c:	dc020000 	stcle	0, cr0, [r2], {-0}
    15a0:	0002f402 	andeq	pc, r2, r2, lsl #8
    15a4:	00002020 	andeq	r2, r0, r0, lsr #32
    15a8:	bf9c0100 	svclt	0x009c0100
    15ac:	28000015 	stmdacs	r0, {r0, r2, r4}
    15b0:	00000aef 	andeq	r0, r0, pc, ror #21
    15b4:	9c02dc02 	stcls	12, cr13, [r2], {2}
    15b8:	02000006 	andeq	r0, r0, #6
    15bc:	27007791 			; <UNDEFINED> instruction: 0x27007791
    15c0:	000010c6 	andeq	r1, r0, r6, asr #1
    15c4:	cc025102 	stfgts	f5, [r2], {2}
    15c8:	28200002 	stmdacs	r0!, {r1}
    15cc:	01000000 	mrseq	r0, (UNDEF: 0)
    15d0:	0015f49c 	mulseq	r5, ip, r4
    15d4:	0fe62800 	svceq	0x00e62800
    15d8:	51020000 	mrspl	r0, (UNDEF: 2)
    15dc:	00030b02 	andeq	r0, r3, r2, lsl #22
    15e0:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    15e4:	00100b28 	andseq	r0, r0, r8, lsr #22
    15e8:	02510200 	subseq	r0, r1, #0, 4
    15ec:	0000030b 	andeq	r0, r0, fp, lsl #6
    15f0:	00709102 	rsbseq	r9, r0, r2, lsl #2
    15f4:	000c4a27 	andeq	r4, ip, r7, lsr #20
    15f8:	02330200 	eorseq	r0, r3, #0, 4
    15fc:	200002ac 	andcs	r0, r0, ip, lsr #5
    1600:	00000020 	andeq	r0, r0, r0, lsr #32
    1604:	161a9c01 	ldrne	r9, [sl], -r1, lsl #24
    1608:	ef280000 	svc	0x00280000
    160c:	0200000a 	andeq	r0, r0, #10
    1610:	069c0233 			; <UNDEFINED> instruction: 0x069c0233
    1614:	91020000 	mrsls	r0, (UNDEF: 2)
    1618:	cf270077 	svcgt	0x00270077
    161c:	02000011 	andeq	r0, r0, #17
    1620:	0270021b 	rsbseq	r0, r0, #-1342177279	; 0xb0000001
    1624:	003c2000 	eorseq	r2, ip, r0
    1628:	9c010000 	stcls	0, cr0, [r1], {-0}
    162c:	0000167c 	andeq	r1, r0, ip, ror r6
    1630:	0003b028 	andeq	fp, r3, r8, lsr #32
    1634:	021b0200 	andseq	r0, fp, #0, 4
    1638:	0000030b 	andeq	r0, r0, fp, lsl #6
    163c:	28749102 	ldmdacs	r4!, {r1, r8, ip, pc}^
    1640:	000005a5 	andeq	r0, r0, r5, lsr #11
    1644:	0b021b02 	bleq	88254 <startup-0x1ff77dac>
    1648:	02000003 	andeq	r0, r0, #3
    164c:	aa287091 	bge	a1d898 <startup-0x1f5e2768>
    1650:	02000005 	andeq	r0, r0, #5
    1654:	030b021b 	movweq	r0, #45595	; 0xb21b
    1658:	91020000 	mrsls	r0, (UNDEF: 2)
    165c:	05af286c 	streq	r2, [pc, #2156]!	; 1ed0 <startup-0x1fffe130>
    1660:	1b020000 	blne	81668 <startup-0x1ff7e998>
    1664:	00030b02 	andeq	r0, r3, r2, lsl #22
    1668:	68910200 	ldmvs	r1, {r9}
    166c:	0005b428 	andeq	fp, r5, r8, lsr #8
    1670:	021b0200 	andseq	r0, fp, #0, 4
    1674:	0000030b 	andeq	r0, r0, fp, lsl #6
    1678:	00009102 	andeq	r9, r0, r2, lsl #2
    167c:	0005b927 	andeq	fp, r5, r7, lsr #18
    1680:	01b80200 			; <UNDEFINED> instruction: 0x01b80200
    1684:	20000250 	andcs	r0, r0, r0, asr r2
    1688:	00000020 	andeq	r0, r0, r0, lsr #32
    168c:	16a29c01 	strtne	r9, [r2], r1, lsl #24
    1690:	ef280000 	svc	0x00280000
    1694:	0200000a 	andeq	r0, r0, #10
    1698:	069c01b8 			; <UNDEFINED> instruction: 0x069c01b8
    169c:	91020000 	mrsls	r0, (UNDEF: 2)
    16a0:	55270077 	strpl	r0, [r7, #-119]!	; 0xffffff89
    16a4:	02000004 	andeq	r0, r0, #4
    16a8:	020c0190 	andeq	r0, ip, #144, 2	; 0x24
    16ac:	00442000 	subeq	r2, r4, r0
    16b0:	9c010000 	stcls	0, cr0, [r1], {-0}
    16b4:	000016c8 	andeq	r1, r0, r8, asr #13
    16b8:	0006a828 	andeq	sl, r6, r8, lsr #16
    16bc:	01900200 	orrseq	r0, r0, r0, lsl #4
    16c0:	000002d1 	ldrdeq	r0, [r0], -r1
    16c4:	00779102 	rsbseq	r9, r7, r2, lsl #2
    16c8:	000a4027 	andeq	r4, sl, r7, lsr #32
    16cc:	01770200 	cmneq	r7, r0, lsl #4
    16d0:	200001ec 	andcs	r0, r0, ip, ror #3
    16d4:	00000020 	andeq	r0, r0, r0, lsr #32
    16d8:	16ee9c01 	strbtne	r9, [lr], r1, lsl #24
    16dc:	ef280000 	svc	0x00280000
    16e0:	0200000a 	andeq	r0, r0, #10
    16e4:	069c0177 			; <UNDEFINED> instruction: 0x069c0177
    16e8:	91020000 	mrsls	r0, (UNDEF: 2)
    16ec:	54270077 	strtpl	r0, [r7], #-119	; 0xffffff89
    16f0:	0200000a 	andeq	r0, r0, #10
    16f4:	01ae0153 			; <UNDEFINED> instruction: 0x01ae0153
    16f8:	003e2000 	eorseq	r2, lr, r0
    16fc:	9c010000 	stcls	0, cr0, [r1], {-0}
    1700:	00001723 	andeq	r1, r0, r3, lsr #14
    1704:	000a5e28 	andeq	r5, sl, r8, lsr #28
    1708:	01530200 	cmpeq	r3, r0, lsl #4
    170c:	000002d1 	ldrdeq	r0, [r0], -r1
    1710:	2a6f9102 	bcs	1be5b20 <startup-0x1e41a4e0>
    1714:	00000e25 	andeq	r0, r0, r5, lsr #28
    1718:	0b015502 	bleq	56b28 <startup-0x1ffa94d8>
    171c:	02000003 	andeq	r0, r0, #3
    1720:	2f007491 	svccs	0x00007491
    1724:	00000d46 	andeq	r0, r0, r6, asr #26
    1728:	c3013402 	movwgt	r3, #5122	; 0x1402
    172c:	50000006 	andpl	r0, r0, r6
    1730:	5e200001 	cdppl	0, 2, cr0, cr0, cr1, {0}
    1734:	01000000 	mrseq	r0, (UNDEF: 0)
    1738:	00176b9c 	mulseq	r7, ip, fp
    173c:	06d92a00 	ldrbeq	r2, [r9], r0, lsl #20
    1740:	36020000 	strcc	r0, [r2], -r0
    1744:	00031601 	andeq	r1, r3, r1, lsl #12
    1748:	68910200 	ldmvs	r1, {r9}
    174c:	000e662a 	andeq	r6, lr, sl, lsr #12
    1750:	01370200 	teqeq	r7, r0, lsl #4
    1754:	000006c3 	andeq	r0, r0, r3, asr #13
    1758:	2a6f9102 	bcs	1be5b68 <startup-0x1e41a498>
    175c:	00000e63 	andeq	r0, r0, r3, ror #28
    1760:	69013802 	stmdbvs	r1, {r1, fp, ip, sp}
    1764:	02000006 	andeq	r0, r0, #6
    1768:	27006e91 			; <UNDEFINED> instruction: 0x27006e91
    176c:	00000686 	andeq	r0, r0, r6, lsl #13
    1770:	28011c02 	stmdacs	r1, {r1, sl, fp, ip}
    1774:	28200001 	stmdacs	r0!, {r0}
    1778:	01000000 	mrseq	r0, (UNDEF: 0)
    177c:	0017919c 	mulseq	r7, ip, r1
    1780:	07562800 	ldrbeq	r2, [r6, -r0, lsl #16]
    1784:	1c020000 	stcne	0, cr0, [r2], {-0}
    1788:	0002d101 	andeq	sp, r2, r1, lsl #2
    178c:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    1790:	02d62300 	sbcseq	r2, r6, #0, 6
    1794:	e1020000 	mrs	r0, (UNDEF: 2)
    1798:	200000b8 	strhcs	r0, [r0], -r8
    179c:	00000070 	andeq	r0, r0, r0, ror r0
    17a0:	b7309c01 	ldrlt	r9, [r0, -r1, lsl #24]!
    17a4:	0100000d 	tsteq	r0, sp
    17a8:	030b06e0 	movweq	r0, #46816	; 0xb6e0
    17ac:	00700000 	rsbseq	r0, r0, r0
    17b0:	00482000 	subeq	r2, r8, r0
    17b4:	9c010000 	stcls	0, cr0, [r1], {-0}
    17b8:	000017cc 	andeq	r1, r0, ip, asr #15
    17bc:	00090728 	andeq	r0, r9, r8, lsr #14
    17c0:	06e00100 	strbteq	r0, [r0], r0, lsl #2
    17c4:	0000030b 	andeq	r0, r0, fp, lsl #6
    17c8:	00749102 	rsbseq	r9, r4, r2, lsl #2
    17cc:	00104931 	andseq	r4, r0, r1, lsr r9
    17d0:	065d0100 	ldrbeq	r0, [sp], -r0, lsl #2
    17d4:	20000010 	andcs	r0, r0, r0, lsl r0
    17d8:	00000060 	andeq	r0, r0, r0, rrx
    17dc:	d4289c01 	strtle	r9, [r8], #-3073	; 0xfffff3ff
    17e0:	0100000f 	tsteq	r0, pc
    17e4:	025a065d 	subseq	r0, sl, #97517568	; 0x5d00000
    17e8:	91020000 	mrsls	r0, (UNDEF: 2)
    17ec:	14742877 	ldrbtne	r2, [r4], #-2167	; 0xfffff789
    17f0:	5d010000 	stcpl	0, cr0, [r1, #-0]
    17f4:	00030b06 	andeq	r0, r3, r6, lsl #22
    17f8:	70910200 	addsvc	r0, r1, r0, lsl #4
    17fc:	06230000 	strteq	r0, [r3], -r0
    1800:	00040000 	andeq	r0, r4, r0
    1804:	0000030f 	andeq	r0, r0, pc, lsl #6
    1808:	05d80104 	ldrbeq	r0, [r8, #260]	; 0x104
    180c:	670c0000 	strvs	r0, [ip, -r0]
    1810:	38000012 	stmdacc	r0, {r1, r4}
    1814:	bc000005 	stclt	0, cr0, [r0], {5}
    1818:	0e200011 	miaeq	acc0, r1, r0
    181c:	d5000005 	strle	r0, [r0, #-5]
    1820:	02000004 	andeq	r0, r0, #4
    1824:	03eb0601 	mvneq	r0, #1048576	; 0x100000
    1828:	c3030000 	movwgt	r0, #12288	; 0x3000
    182c:	02000001 	andeq	r0, r0, #1
    1830:	0000372b 	andeq	r3, r0, fp, lsr #14
    1834:	08010200 	stmdaeq	r1, {r9}
    1838:	000003e9 	andeq	r0, r0, r9, ror #7
    183c:	3e050202 	cdpcc	2, 0, cr0, cr5, cr2, {0}
    1840:	0300000f 	movweq	r0, #15
    1844:	000004f8 	strdeq	r0, [r0], -r8
    1848:	00503902 	subseq	r3, r0, r2, lsl #18
    184c:	02020000 	andeq	r0, r2, #0
    1850:	0010b307 	andseq	fp, r0, r7, lsl #6
    1854:	11460300 	mrsne	r0, SPSR_und
    1858:	4d020000 	stcmi	0, cr0, [r2, #-0]
    185c:	00000062 	andeq	r0, r0, r2, rrx
    1860:	95050402 	strls	r0, [r5, #-1026]	; 0xfffffbfe
    1864:	03000009 	movweq	r0, #9
    1868:	0000093e 	andeq	r0, r0, lr, lsr r9
    186c:	00744f02 	rsbseq	r4, r4, r2, lsl #30
    1870:	04020000 	streq	r0, [r2], #-0
    1874:	000d0b07 	andeq	r0, sp, r7, lsl #22
    1878:	05080200 	streq	r0, [r8, #-512]	; 0xfffffe00
    187c:	00000990 	muleq	r0, r0, r9
    1880:	06070802 	streq	r0, [r7], -r2, lsl #16
    1884:	0400000d 	streq	r0, [r0], #-13
    1888:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    188c:	04020074 	streq	r0, [r2], #-116	; 0xffffff8c
    1890:	000d1007 	andeq	r1, sp, r7
    1894:	01c50300 	biceq	r0, r5, r0, lsl #6
    1898:	18030000 	stmdane	r3, {}	; <UNPREDICTABLE>
    189c:	0000002c 	andeq	r0, r0, ip, lsr #32
    18a0:	0004fa03 	andeq	pc, r4, r3, lsl #20
    18a4:	45240300 	strmi	r0, [r4, #-768]!	; 0xfffffd00
    18a8:	05000000 	streq	r0, [r0, #-0]
    18ac:	000000a2 	andeq	r0, r0, r2, lsr #1
    18b0:	00114803 	andseq	r4, r1, r3, lsl #16
    18b4:	572c0300 	strpl	r0, [ip, -r0, lsl #6]!
    18b8:	05000000 	streq	r0, [r0, #-0]
    18bc:	000000b2 	strheq	r0, [r0], -r2
    18c0:	00094003 	andeq	r4, r9, r3
    18c4:	69300300 	ldmdbvs	r0!, {r8, r9}
    18c8:	05000000 	streq	r0, [r0, #-0]
    18cc:	000000c2 	andeq	r0, r0, r2, asr #1
    18d0:	000fd906 	andeq	sp, pc, r6, lsl #18
    18d4:	06fa0400 	ldrbteq	r0, [sl], r0, lsl #8
    18d8:	000000bd 	strheq	r0, [r0], -sp
    18dc:	00084407 	andeq	r4, r8, r7, lsl #8
    18e0:	c23b0500 	eorsgt	r0, fp, #0, 10
    18e4:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    18e8:	00370107 	eorseq	r0, r7, r7, lsl #2
    18ec:	5f060000 	svcpl	0x00060000
    18f0:	00010403 	andeq	r0, r1, r3, lsl #8
    18f4:	09ce0900 	stmibeq	lr, {r8, fp}^
    18f8:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    18fc:	00000f8e 	andeq	r0, r0, lr, lsl #31
    1900:	280a0001 	stmdacs	sl, {r0}
    1904:	9005c306 	andls	ip, r5, r6, lsl #6
    1908:	0b000001 	bleq	1914 <startup-0x1fffe6ec>
    190c:	00001043 	andeq	r1, r0, r3, asr #32
    1910:	cd05c506 	cfstr32gt	mvfx12, [r5, #-24]	; 0xffffffe8
    1914:	00000000 	andeq	r0, r0, r0
    1918:	000e180b 	andeq	r1, lr, fp, lsl #16
    191c:	05c60600 	strbeq	r0, [r6, #1536]	; 0x600
    1920:	000000cd 	andeq	r0, r0, sp, asr #1
    1924:	08f10b04 	ldmeq	r1!, {r2, r8, r9, fp}^
    1928:	c7060000 	strgt	r0, [r6, -r0]
    192c:	0000cd05 	andeq	ip, r0, r5, lsl #26
    1930:	b80b0800 	stmdalt	fp, {fp}
    1934:	06000009 	streq	r0, [r0], -r9
    1938:	00cd05c8 	sbceq	r0, sp, r8, asr #11
    193c:	0c0c0000 	stceq	0, cr0, [ip], {-0}
    1940:	00524449 	subseq	r4, r2, r9, asr #8
    1944:	cd05c906 	vstrgt.16	s24, [r5, #-12]	; <UNPREDICTABLE>
    1948:	10000000 	andne	r0, r0, r0
    194c:	52444f0c 	subpl	r4, r4, #12, 30	; 0x30
    1950:	05ca0600 	strbeq	r0, [sl, #1536]	; 0x600
    1954:	000000cd 	andeq	r0, r0, sp, asr #1
    1958:	0a0e0b14 	beq	3845b0 <startup-0x1fc7ba50>
    195c:	cb060000 	blgt	181964 <startup-0x1fe7e69c>
    1960:	0000ad05 	andeq	sl, r0, r5, lsl #26
    1964:	eb0b1800 	bl	2c796c <startup-0x1fd38694>
    1968:	06000009 	streq	r0, [r0], -r9
    196c:	00ad05cc 	adceq	r0, sp, ip, asr #11
    1970:	0b1a0000 	bleq	681978 <startup-0x1f97e688>
    1974:	000008b0 			; <UNDEFINED> instruction: 0x000008b0
    1978:	cd05cd06 	stcgt	13, cr12, [r5, #-24]	; 0xffffffe8
    197c:	1c000000 	stcne	0, cr0, [r0], {-0}
    1980:	5246410c 	subpl	r4, r6, #12, 2
    1984:	05ce0600 	strbeq	r0, [lr, #1536]	; 0x600
    1988:	000001a0 	andeq	r0, r0, r0, lsr #3
    198c:	cd0d0020 	stcgt	0, cr0, [sp, #-128]	; 0xffffff80
    1990:	a0000000 	andge	r0, r0, r0
    1994:	0e000001 	cdpeq	0, 0, cr0, cr0, cr1, {0}
    1998:	00000090 	muleq	r0, r0, r0
    199c:	90050001 	andls	r0, r5, r1
    19a0:	0f000001 	svceq	0x00000001
    19a4:	00000fb9 			; <UNDEFINED> instruction: 0x00000fb9
    19a8:	0405cf06 	streq	ip, [r5], #-3846	; 0xfffff0fa
    19ac:	10000001 	andne	r0, r0, r1
    19b0:	00370107 	eorseq	r0, r7, r7, lsl #2
    19b4:	42070000 	andmi	r0, r7, #0
    19b8:	000001d7 	ldrdeq	r0, [r0], -r7
    19bc:	00088209 	andeq	r8, r8, r9, lsl #4
    19c0:	03090000 	movweq	r0, #36864	; 0x9000
    19c4:	01000007 	tsteq	r0, r7
    19c8:	00027109 	andeq	r7, r2, r9, lsl #2
    19cc:	ad090200 	sfmge	f0, 4, [r9, #-0]
    19d0:	03000002 	movweq	r0, #2
    19d4:	0da60300 	stceq	3, cr0, [r6]
    19d8:	47070000 	strmi	r0, [r7, -r0]
    19dc:	000001b1 			; <UNDEFINED> instruction: 0x000001b1
    19e0:	37010710 	smladcc	r1, r0, r7, r0
    19e4:	07000000 	streq	r0, [r0, -r0]
    19e8:	0001fc4f 	andeq	pc, r1, pc, asr #24
    19ec:	042c0900 	strteq	r0, [ip], #-2304	; 0xfffff700
    19f0:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    19f4:	0000036e 	andeq	r0, r0, lr, ror #6
    19f8:	0a030001 	beq	c1a04 <startup-0x1ff3e5fc>
    19fc:	07000001 	streq	r0, [r0, -r1]
    1a00:	0001e252 	andeq	lr, r1, r2, asr r2
    1a04:	01071000 	mrseq	r1, (UNDEF: 7)
    1a08:	00000037 	andeq	r0, r0, r7, lsr r0
    1a0c:	022d5a07 	eoreq	r5, sp, #28672	; 0x7000
    1a10:	1b090000 	blne	241a18 <startup-0x1fdbe5e8>
    1a14:	00000005 	andeq	r0, r0, r5
    1a18:	00095a09 	andeq	r5, r9, r9, lsl #20
    1a1c:	bf090100 	svclt	0x00090100
    1a20:	02000011 	andeq	r0, r0, #17
    1a24:	000a1409 	andeq	r1, sl, r9, lsl #8
    1a28:	03000300 	movweq	r0, #768	; 0x300
    1a2c:	00000ea8 	andeq	r0, r0, r8, lsr #29
    1a30:	02075f07 	andeq	r5, r7, #7, 30
    1a34:	07100000 	ldreq	r0, [r0, -r0]
    1a38:	00003701 	andeq	r3, r0, r1, lsl #14
    1a3c:	586e0700 	stmdapl	lr!, {r8, r9, sl}^
    1a40:	09000002 	stmdbeq	r0, {r1}
    1a44:	0000009b 	muleq	r0, fp, r0
    1a48:	10770900 	rsbsne	r0, r7, r0, lsl #18
    1a4c:	09010000 	stmdbeq	r1, {}	; <UNPREDICTABLE>
    1a50:	000001f5 	strdeq	r0, [r0], -r5
    1a54:	9a030002 	bls	c1a64 <startup-0x1ff3e59c>
    1a58:	07000004 	streq	r0, [r0, -r4]
    1a5c:	00023872 	andeq	r3, r2, r2, ror r8
    1a60:	01071000 	mrseq	r1, (UNDEF: 7)
    1a64:	00000037 	andeq	r0, r0, r7, lsr r0
    1a68:	027d7a07 	rsbseq	r7, sp, #28672	; 0x7000
    1a6c:	29090000 	stmdbcs	r9, {}	; <UNPREDICTABLE>
    1a70:	00000012 	andeq	r0, r0, r2, lsl r0
    1a74:	0011e909 	andseq	lr, r1, r9, lsl #18
    1a78:	03000100 	movweq	r0, #256	; 0x100
    1a7c:	00001354 	andeq	r1, r0, r4, asr r3
    1a80:	02637d07 	rsbeq	r7, r3, #448	; 0x1c0
    1a84:	08110000 	ldmdaeq	r1, {}	; <UNPREDICTABLE>
    1a88:	02cd8407 	sbceq	r8, sp, #117440512	; 0x7000000
    1a8c:	cc120000 	ldcgt	0, cr0, [r2], {-0}
    1a90:	0700000e 	streq	r0, [r0, -lr]
    1a94:	0000c286 	andeq	ip, r0, r6, lsl #5
    1a98:	64120000 	ldrvs	r0, [r2], #-0
    1a9c:	0700000d 	streq	r0, [r0, -sp]
    1aa0:	0001d789 	andeq	sp, r1, r9, lsl #15
    1aa4:	f8120400 			; <UNDEFINED> instruction: 0xf8120400
    1aa8:	0700000a 	streq	r0, [r0, -sl]
    1aac:	00022d8c 	andeq	r2, r2, ip, lsl #27
    1ab0:	33120500 	tstcc	r2, #0, 10
    1ab4:	07000009 	streq	r0, [r0, -r9]
    1ab8:	0001fc8f 	andeq	pc, r1, pc, lsl #25
    1abc:	f9120600 			; <UNDEFINED> instruction: 0xf9120600
    1ac0:	0700000e 	streq	r0, [r0, -lr]
    1ac4:	00025892 	muleq	r2, r2, r8
    1ac8:	03000700 	movweq	r0, #1792	; 0x700
    1acc:	0000037c 	andeq	r0, r0, ip, ror r3
    1ad0:	02889407 	addeq	r9, r8, #117440512	; 0x7000000
    1ad4:	91130000 	tstls	r3, r0
    1ad8:	01000013 	tsteq	r0, r3, lsl r0
    1adc:	16260243 	strtne	r0, [r6], -r3, asr #4
    1ae0:	00a42000 	adceq	r2, r4, r0
    1ae4:	9c010000 	stcls	0, cr0, [r1], {-0}
    1ae8:	0000033a 	andeq	r0, r0, sl, lsr r3
    1aec:	00137414 	andseq	r7, r3, r4, lsl r4
    1af0:	02430100 	subeq	r0, r3, #0, 2
    1af4:	0000033a 	andeq	r0, r0, sl, lsr r3
    1af8:	146c9102 	strbtne	r9, [ip], #-258	; 0xfffffefe
    1afc:	0000131f 	andeq	r1, r0, pc, lsl r3
    1b00:	a2024301 	andge	r4, r2, #67108864	; 0x4000000
    1b04:	02000000 	andeq	r0, r0, #0
    1b08:	05146a91 	ldreq	r6, [r4, #-2705]	; 0xfffff56f
    1b0c:	01000012 	tsteq	r0, r2, lsl r0
    1b10:	00970243 	addseq	r0, r7, r3, asr #4
    1b14:	91020000 	mrsls	r0, (UNDEF: 2)
    1b18:	120d1569 	andne	r1, sp, #440401920	; 0x1a400000
    1b1c:	45010000 	strmi	r0, [r1, #-0]
    1b20:	0000c202 	andeq	ip, r0, r2, lsl #4
    1b24:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    1b28:	00138a15 	andseq	r8, r3, r5, lsl sl
    1b2c:	02460100 	subeq	r0, r6, #0, 2
    1b30:	000000c2 	andeq	r0, r0, r2, asr #1
    1b34:	00709102 	rsbseq	r9, r0, r2, lsl #2
    1b38:	01a50416 			; <UNDEFINED> instruction: 0x01a50416
    1b3c:	7a130000 	bvc	4c1b44 <startup-0x1fb3e4bc>
    1b40:	01000013 	tsteq	r0, r3, lsl r0
    1b44:	160201f0 			; <UNDEFINED> instruction: 0x160201f0
    1b48:	00242000 	eoreq	r2, r4, r0
    1b4c:	9c010000 	stcls	0, cr0, [r1], {-0}
    1b50:	00000375 	andeq	r0, r0, r5, ror r3
    1b54:	00137414 	andseq	r7, r3, r4, lsl r4
    1b58:	01f00100 	mvnseq	r0, r0, lsl #2
    1b5c:	0000033a 	andeq	r0, r0, sl, lsr r3
    1b60:	14749102 	ldrbtne	r9, [r4], #-258	; 0xfffffefe
    1b64:	00000ecc 	andeq	r0, r0, ip, asr #29
    1b68:	a201f001 	andge	pc, r1, #1
    1b6c:	02000000 	andeq	r0, r0, #0
    1b70:	13007291 	movwne	r7, #657	; 0x291
    1b74:	00001369 	andeq	r1, r0, r9, ror #6
    1b78:	e401e001 	str	lr, [r1], #-1
    1b7c:	1e200015 	miane	acc0, r5, r0
    1b80:	01000000 	mrseq	r0, (UNDEF: 0)
    1b84:	0003aa9c 	muleq	r3, ip, sl
    1b88:	13741400 	cmnne	r4, #0, 8
    1b8c:	e0010000 	and	r0, r1, r0
    1b90:	00033a01 	andeq	r3, r3, r1, lsl #20
    1b94:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    1b98:	00131714 	andseq	r1, r3, r4, lsl r7
    1b9c:	01e00100 	mvneq	r0, r0, lsl #2
    1ba0:	000000a2 	andeq	r0, r0, r2, lsr #1
    1ba4:	00729102 	rsbseq	r9, r2, r2, lsl #2
    1ba8:	00123313 	andseq	r3, r2, r3, lsl r3
    1bac:	01c70100 	biceq	r0, r7, r0, lsl #2
    1bb0:	200015aa 	andcs	r1, r0, sl, lsr #11
    1bb4:	0000003a 	andeq	r0, r0, sl, lsr r0
    1bb8:	03ee9c01 	mvneq	r9, #256	; 0x100
    1bbc:	74140000 	ldrvc	r0, [r4], #-0
    1bc0:	01000013 	tsteq	r0, r3, lsl r0
    1bc4:	033a01c7 	teqeq	sl, #-1073741775	; 0xc0000031
    1bc8:	91020000 	mrsls	r0, (UNDEF: 2)
    1bcc:	0ecc1474 	mcreq	4, 6, r1, cr12, cr4, {3}
    1bd0:	c7010000 	strgt	r0, [r1, -r0]
    1bd4:	0000a201 	andeq	sl, r0, r1, lsl #4
    1bd8:	72910200 	addsvc	r0, r1, #0, 4
    1bdc:	00122214 	andseq	r2, r2, r4, lsl r2
    1be0:	01c70100 	biceq	r0, r7, r0, lsl #2
    1be4:	0000027d 	andeq	r0, r0, sp, ror r2
    1be8:	00719102 	rsbseq	r9, r1, r2, lsl #2
    1bec:	00125813 	andseq	r5, r2, r3, lsl r8
    1bf0:	01b10100 			; <UNDEFINED> instruction: 0x01b10100
    1bf4:	2000158c 	andcs	r1, r0, ip, lsl #11
    1bf8:	0000001e 	andeq	r0, r0, lr, lsl r0
    1bfc:	04239c01 	strteq	r9, [r3], #-3073	; 0xfffff3ff
    1c00:	74140000 	ldrvc	r0, [r4], #-0
    1c04:	01000013 	tsteq	r0, r3, lsl r0
    1c08:	033a01b1 	teqeq	sl, #1073741868	; 0x4000002c
    1c0c:	91020000 	mrsls	r0, (UNDEF: 2)
    1c10:	0ecc1474 	mcreq	4, 6, r1, cr12, cr4, {3}
    1c14:	b1010000 	mrslt	r0, (UNDEF: 1)
    1c18:	0000a201 	andeq	sl, r0, r1, lsl #4
    1c1c:	72910200 	addsvc	r0, r1, #0, 4
    1c20:	12411300 	subne	r1, r1, #0, 6
    1c24:	9c010000 	stcls	0, cr0, [r1], {-0}
    1c28:	00156e01 	andseq	r6, r5, r1, lsl #28
    1c2c:	00001e20 	andeq	r1, r0, r0, lsr #28
    1c30:	589c0100 	ldmpl	ip, {r8}
    1c34:	14000004 	strne	r0, [r0], #-4
    1c38:	00001374 	andeq	r1, r0, r4, ror r3
    1c3c:	3a019c01 	bcc	68c48 <startup-0x1ff973b8>
    1c40:	02000003 	andeq	r0, r0, #3
    1c44:	cc147491 	cfldrsgt	mvf7, [r4], {145}	; 0x91
    1c48:	0100000e 	tsteq	r0, lr
    1c4c:	00a2019c 	umlaleq	r0, r2, ip, r1
    1c50:	91020000 	mrsls	r0, (UNDEF: 2)
    1c54:	f1170072 			; <UNDEFINED> instruction: 0xf1170072
    1c58:	01000011 	tsteq	r0, r1, lsl r0
    1c5c:	00a20188 	adceq	r0, r2, r8, lsl #3
    1c60:	15580000 	ldrbne	r0, [r8, #-0]
    1c64:	00162000 	andseq	r2, r6, r0
    1c68:	9c010000 	stcls	0, cr0, [r1], {-0}
    1c6c:	00000482 	andeq	r0, r0, r2, lsl #9
    1c70:	00137414 	andseq	r7, r3, r4, lsl r4
    1c74:	01880100 	orreq	r0, r8, r0, lsl #2
    1c78:	0000033a 	andeq	r0, r0, sl, lsr r3
    1c7c:	00749102 	rsbseq	r9, r4, r2, lsl #2
    1c80:	0013a217 	andseq	sl, r3, r7, lsl r2
    1c84:	016e0100 	cmneq	lr, r0, lsl #2
    1c88:	00000097 	muleq	r0, r7, r0
    1c8c:	20001516 	andcs	r1, r0, r6, lsl r5
    1c90:	00000042 	andeq	r0, r0, r2, asr #32
    1c94:	04ca9c01 	strbeq	r9, [sl], #3073	; 0xc01
    1c98:	74140000 	ldrvc	r0, [r4], #-0
    1c9c:	01000013 	tsteq	r0, r3, lsl r0
    1ca0:	033a016e 	teqeq	sl, #-2147483621	; 0x8000001b
    1ca4:	91020000 	mrsls	r0, (UNDEF: 2)
    1ca8:	0ecc146c 	cdpeq	4, 12, cr1, cr12, cr12, {3}
    1cac:	6e010000 	cdpvs	0, 0, cr0, cr1, cr0, {0}
    1cb0:	0000a201 	andeq	sl, r0, r1, lsl #4
    1cb4:	6a910200 	bvs	fe4424bc <GPIO_Pins+0xde43ffa8>
    1cb8:	000f8415 	andeq	r8, pc, r5, lsl r4	; <UNPREDICTABLE>
    1cbc:	01700100 	cmneq	r0, r0, lsl #2
    1cc0:	00000097 	muleq	r0, r7, r0
    1cc4:	00779102 	rsbseq	r9, r7, r2, lsl #2
    1cc8:	00132e17 	andseq	r2, r3, r7, lsl lr
    1ccc:	015d0100 	cmpeq	sp, r0, lsl #2
    1cd0:	000000a2 	andeq	r0, r0, r2, lsr #1
    1cd4:	20001500 	andcs	r1, r0, r0, lsl #10
    1cd8:	00000016 	andeq	r0, r0, r6, lsl r0
    1cdc:	04f49c01 	ldrbteq	r9, [r4], #3073	; 0xc01
    1ce0:	74140000 	ldrvc	r0, [r4], #-0
    1ce4:	01000013 	tsteq	r0, r3, lsl r0
    1ce8:	033a015d 	teqeq	sl, #1073741847	; 0x40000017
    1cec:	91020000 	mrsls	r0, (UNDEF: 2)
    1cf0:	f1170074 			; <UNDEFINED> instruction: 0xf1170074
    1cf4:	01000012 	tsteq	r0, r2, lsl r0
    1cf8:	00970143 	addseq	r0, r7, r3, asr #2
    1cfc:	14be0000 	ldrtne	r0, [lr], #0
    1d00:	00422000 	subeq	r2, r2, r0
    1d04:	9c010000 	stcls	0, cr0, [r1], {-0}
    1d08:	0000053c 	andeq	r0, r0, ip, lsr r5
    1d0c:	00137414 	andseq	r7, r3, r4, lsl r4
    1d10:	01430100 	mrseq	r0, (UNDEF: 83)
    1d14:	0000033a 	andeq	r0, r0, sl, lsr r3
    1d18:	146c9102 	strbtne	r9, [ip], #-258	; 0xfffffefe
    1d1c:	00000ecc 	andeq	r0, r0, ip, asr #29
    1d20:	a2014301 	andge	r4, r1, #67108864	; 0x4000000
    1d24:	02000000 	andeq	r0, r0, #0
    1d28:	84156a91 	ldrhi	r6, [r5], #-2705	; 0xfffff56f
    1d2c:	0100000f 	tsteq	r0, pc
    1d30:	00970145 	addseq	r0, r7, r5, asr #2
    1d34:	91020000 	mrsls	r0, (UNDEF: 2)
    1d38:	41130077 	tstmi	r3, r7, ror r0
    1d3c:	01000013 	tsteq	r0, r3, lsl r0
    1d40:	14780115 	ldrbtne	r0, [r8], #-277	; 0xfffffeeb
    1d44:	00462000 	subeq	r2, r6, r0
    1d48:	9c010000 	stcls	0, cr0, [r1], {-0}
    1d4c:	00000580 	andeq	r0, r0, r0, lsl #11
    1d50:	00137414 	andseq	r7, r3, r4, lsl r4
    1d54:	01150100 	tsteq	r5, r0, lsl #2
    1d58:	0000033a 	andeq	r0, r0, sl, lsr r3
    1d5c:	146c9102 	strbtne	r9, [ip], #-258	; 0xfffffefe
    1d60:	00000ecc 	andeq	r0, r0, ip, asr #29
    1d64:	a2011501 	andge	r1, r1, #4194304	; 0x400000
    1d68:	02000000 	andeq	r0, r0, #0
    1d6c:	74186a91 	ldrvc	r6, [r8], #-2705	; 0xfffff56f
    1d70:	0100706d 	tsteq	r0, sp, rrx
    1d74:	00cd0117 	sbceq	r0, sp, r7, lsl r1
    1d78:	91020000 	mrsls	r0, (UNDEF: 2)
    1d7c:	12190074 	andsne	r0, r9, #116	; 0x74
    1d80:	01000012 	tsteq	r0, r2, lsl r0
    1d84:	001444fe 			; <UNDEFINED> instruction: 0x001444fe
    1d88:	00003420 	andeq	r3, r0, r0, lsr #8
    1d8c:	a49c0100 	ldrge	r0, [ip], #256	; 0x100
    1d90:	1a000005 	bne	1dac <startup-0x1fffe254>
    1d94:	00001307 	andeq	r1, r0, r7, lsl #6
    1d98:	05a4fe01 	streq	pc, [r4, #3585]!	; 0xe01
    1d9c:	91020000 	mrsls	r0, (UNDEF: 2)
    1da0:	04160074 	ldreq	r0, [r6], #-116	; 0xffffff8c
    1da4:	000002cd 	andeq	r0, r0, sp, asr #5
    1da8:	00124e19 	andseq	r4, r2, r9, lsl lr
    1dac:	2cca0100 	stfcse	f0, [sl], {0}
    1db0:	18200013 	stmdane	r0!, {r0, r1, r4}
    1db4:	01000001 	tsteq	r0, r1
    1db8:	0006069c 	muleq	r6, ip, r6
    1dbc:	13741a00 	cmnne	r4, #0, 20
    1dc0:	ca010000 	bgt	41dc8 <startup-0x1ffbe238>
    1dc4:	0000033a 	andeq	r0, r0, sl, lsr r3
    1dc8:	1a649102 	bne	19261d8 <startup-0x1e6d9e28>
    1dcc:	00001307 	andeq	r1, r0, r7, lsl #6
    1dd0:	05a4ca01 	streq	ip, [r4, #2561]!	; 0xa01
    1dd4:	91020000 	mrsls	r0, (UNDEF: 2)
    1dd8:	11e21b60 	mvnne	r1, r0, ror #22
    1ddc:	cc010000 	stcgt	0, cr0, [r1], {-0}
    1de0:	000000c2 	andeq	r0, r0, r2, asr #1
    1de4:	1c749102 	ldfnep	f1, [r4], #-8
    1de8:	00736f70 	rsbseq	r6, r3, r0, ror pc
    1dec:	00c2cc01 	sbceq	ip, r2, r1, lsl #24
    1df0:	91020000 	mrsls	r0, (UNDEF: 2)
    1df4:	135e1b70 	cmpne	lr, #112, 22	; 0x1c000
    1df8:	cc010000 	stcgt	0, cr0, [r1], {-0}
    1dfc:	000000c2 	andeq	r0, r0, r2, asr #1
    1e00:	006c9102 	rsbeq	r9, ip, r2, lsl #2
    1e04:	0012e51d 	andseq	lr, r2, sp, lsl r5
    1e08:	bc7f0100 	ldflte	f0, [pc], #-0	; 1e10 <startup-0x1fffe1f0>
    1e0c:	70200011 	eorvc	r0, r0, r1, lsl r0
    1e10:	01000001 	tsteq	r0, r1
    1e14:	13741a9c 	cmnne	r4, #156, 20	; 0x9c000
    1e18:	7f010000 	svcvc	0x00010000
    1e1c:	0000033a 	andeq	r0, r0, sl, lsr r3
    1e20:	00749102 	rsbseq	r9, r4, r2, lsl #2
    1e24:	00054300 	andeq	r4, r5, r0, lsl #6
    1e28:	cb000400 	blgt	2e30 <startup-0x1fffd1d0>
    1e2c:	04000004 	streq	r0, [r0], #-4
    1e30:	0005d801 	andeq	sp, r5, r1, lsl #16
    1e34:	14d70c00 	ldrbne	r0, [r7], #3072	; 0xc00
    1e38:	05380000 	ldreq	r0, [r8, #-0]!
    1e3c:	16cc0000 	strbne	r0, [ip], r0
    1e40:	01c42000 	biceq	r2, r4, r0
    1e44:	078e0000 	streq	r0, [lr, r0]
    1e48:	01020000 	mrseq	r0, (UNDEF: 2)
    1e4c:	0003eb06 	andeq	lr, r3, r6, lsl #22
    1e50:	01c30300 	biceq	r0, r3, r0, lsl #6
    1e54:	2b020000 	blcs	81e5c <startup-0x1ff7e1a4>
    1e58:	00000037 	andeq	r0, r0, r7, lsr r0
    1e5c:	e9080102 	stmdb	r8, {r1, r8}
    1e60:	02000003 	andeq	r0, r0, #3
    1e64:	0f3e0502 	svceq	0x003e0502
    1e68:	02020000 	andeq	r0, r2, #0
    1e6c:	0010b307 	andseq	fp, r0, r7, lsl #6
    1e70:	11460300 	mrsne	r0, SPSR_und
    1e74:	4d020000 	stcmi	0, cr0, [r2, #-0]
    1e78:	00000057 	andeq	r0, r0, r7, asr r0
    1e7c:	95050402 	strls	r0, [r5, #-1026]	; 0xfffffbfe
    1e80:	03000009 	movweq	r0, #9
    1e84:	0000093e 	andeq	r0, r0, lr, lsr r9
    1e88:	00694f02 	rsbeq	r4, r9, r2, lsl #30
    1e8c:	04020000 	streq	r0, [r2], #-0
    1e90:	000d0b07 	andeq	r0, sp, r7, lsl #22
    1e94:	05080200 	streq	r0, [r8, #-512]	; 0xfffffe00
    1e98:	00000990 	muleq	r0, r0, r9
    1e9c:	06070802 	streq	r0, [r7], -r2, lsl #16
    1ea0:	0400000d 	streq	r0, [r0], #-13
    1ea4:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    1ea8:	04020074 	streq	r0, [r2], #-116	; 0xffffff8c
    1eac:	000d1007 	andeq	r1, sp, r7
    1eb0:	01c50300 	biceq	r0, r5, r0, lsl #6
    1eb4:	18030000 	stmdane	r3, {}	; <UNPREDICTABLE>
    1eb8:	0000002c 	andeq	r0, r0, ip, lsr #32
    1ebc:	00008c05 	andeq	r8, r0, r5, lsl #24
    1ec0:	11480300 	mrsne	r0, (UNDEF: 120)
    1ec4:	2c030000 	stccs	0, cr0, [r3], {-0}
    1ec8:	0000004c 	andeq	r0, r0, ip, asr #32
    1ecc:	00009c05 	andeq	r9, r0, r5, lsl #24
    1ed0:	09400300 	stmdbeq	r0, {r8, r9}^
    1ed4:	30030000 	andcc	r0, r3, r0
    1ed8:	0000005e 	andeq	r0, r0, lr, asr r0
    1edc:	0000ac05 	andeq	sl, r0, r5, lsl #24
    1ee0:	00b70600 	adcseq	r0, r7, r0, lsl #12
    1ee4:	04070000 	streq	r0, [r7], #-0
    1ee8:	01a0040e 	lsleq	r0, lr, #8
    1eec:	0000017d 	andeq	r0, r0, sp, ror r1
    1ef0:	00116408 	andseq	r6, r1, r8, lsl #8
    1ef4:	01a20400 			; <UNDEFINED> instruction: 0x01a20400
    1ef8:	0000018d 	andeq	r0, r0, sp, lsl #3
    1efc:	03d50800 	bicseq	r0, r5, #0, 16
    1f00:	a3040000 	movwge	r0, #16384	; 0x4000
    1f04:	00019201 	andeq	r9, r1, r1, lsl #4
    1f08:	97082000 	strls	r2, [r8, -r0]
    1f0c:	0400000d 	streq	r0, [r0], #-13
    1f10:	018d01a4 	orreq	r0, sp, r4, lsr #3
    1f14:	08800000 	stmeq	r0, {}	; <UNPREDICTABLE>
    1f18:	00000005 	andeq	r0, r0, r5
    1f1c:	9201a504 	andls	sl, r1, #4, 10	; 0x1000000
    1f20:	a0000001 	andge	r0, r0, r1
    1f24:	0010f409 	andseq	pc, r0, r9, lsl #8
    1f28:	01a60400 			; <UNDEFINED> instruction: 0x01a60400
    1f2c:	0000018d 	andeq	r0, r0, sp, lsl #3
    1f30:	63090100 	movwvs	r0, #37120	; 0x9100
    1f34:	04000004 	streq	r0, [r0], #-4
    1f38:	019201a7 	orrseq	r0, r2, r7, lsr #3
    1f3c:	01200000 			; <UNDEFINED> instruction: 0x01200000
    1f40:	00016e09 	andeq	r6, r1, r9, lsl #28
    1f44:	01a80400 			; <UNDEFINED> instruction: 0x01a80400
    1f48:	0000018d 	andeq	r0, r0, sp, lsl #3
    1f4c:	6d090180 	stfvss	f0, [r9, #-512]	; 0xfffffe00
    1f50:	04000004 	streq	r0, [r0], #-4
    1f54:	019201a9 	orrseq	r0, r2, r9, lsr #3
    1f58:	01a00000 	moveq	r0, r0
    1f5c:	00042709 	andeq	r2, r4, r9, lsl #14
    1f60:	01aa0400 			; <UNDEFINED> instruction: 0x01aa0400
    1f64:	0000018d 	andeq	r0, r0, sp, lsl #3
    1f68:	09090200 	stmdbeq	r9, {r9}
    1f6c:	04000004 	streq	r0, [r0], #-4
    1f70:	01a201ab 			; <UNDEFINED> instruction: 0x01a201ab
    1f74:	02200000 	eoreq	r0, r0, #0
    1f78:	0050490a 	subseq	r4, r0, sl, lsl #18
    1f7c:	c201ac04 	andgt	sl, r1, #4, 24	; 0x400
    1f80:	00000001 	andeq	r0, r0, r1
    1f84:	04130903 	ldreq	r0, [r3], #-2307	; 0xfffff6fd
    1f88:	ad040000 	stcge	0, cr0, [r4, #-0]
    1f8c:	0001c701 	andeq	ip, r1, r1, lsl #14
    1f90:	0903f000 	stmdbeq	r3, {ip, sp, lr, pc}
    1f94:	000006b0 			; <UNDEFINED> instruction: 0x000006b0
    1f98:	b701ae04 	strlt	sl, [r1, -r4, lsl #28]
    1f9c:	00000000 	andeq	r0, r0, r0
    1fa0:	b70b000e 	strlt	r0, [fp, -lr]
    1fa4:	8d000000 	stchi	0, cr0, [r0, #-0]
    1fa8:	0c000001 	stceq	0, cr0, [r0], {1}
    1fac:	00000085 	andeq	r0, r0, r5, lsl #1
    1fb0:	7d050007 	stcvc	0, cr0, [r5, #-28]	; 0xffffffe4
    1fb4:	0b000001 	bleq	1fc0 <startup-0x1fffe040>
    1fb8:	000000ac 	andeq	r0, r0, ip, lsr #1
    1fbc:	000001a2 	andeq	r0, r0, r2, lsr #3
    1fc0:	0000850c 	andeq	r8, r0, ip, lsl #10
    1fc4:	0b001700 	bleq	7bcc <startup-0x1fff8434>
    1fc8:	000000ac 	andeq	r0, r0, ip, lsr #1
    1fcc:	000001b2 			; <UNDEFINED> instruction: 0x000001b2
    1fd0:	0000850c 	andeq	r8, r0, ip, lsl #10
    1fd4:	0b003700 	bleq	fbdc <startup-0x1fff0424>
    1fd8:	00000097 	muleq	r0, r7, r0
    1fdc:	000001c2 	andeq	r0, r0, r2, asr #3
    1fe0:	0000850c 	andeq	r8, r0, ip, lsl #10
    1fe4:	0500ef00 	streq	lr, [r0, #-3840]	; 0xfffff100
    1fe8:	000001b2 			; <UNDEFINED> instruction: 0x000001b2
    1fec:	0000ac0b 	andeq	sl, r0, fp, lsl #24
    1ff0:	0001d800 	andeq	sp, r1, r0, lsl #16
    1ff4:	00850d00 	addeq	r0, r5, r0, lsl #26
    1ff8:	02830000 	addeq	r0, r3, #0
    1ffc:	0cc60e00 	stcleq	14, cr0, [r6], {0}
    2000:	af040000 	svcge	0x00040000
    2004:	0000c101 	andeq	ip, r0, r1, lsl #2
    2008:	048c0f00 	streq	r0, [ip], #3840	; 0xf00
    200c:	02ff01c0 	rscseq	r0, pc, #192, 2	; 0x30
    2010:	34080000 	strcc	r0, [r8], #-0
    2014:	04000002 	streq	r0, [r0], #-2
    2018:	00bc01c2 	adcseq	r0, ip, r2, asr #3
    201c:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    2020:	0000035d 	andeq	r0, r0, sp, asr r3
    2024:	b701c304 	strlt	ip, [r1, -r4, lsl #6]
    2028:	04000000 	streq	r0, [r0], #-0
    202c:	0000ac08 	andeq	sl, r0, r8, lsl #24
    2030:	01c40400 	biceq	r0, r4, r0, lsl #8
    2034:	000000b7 	strheq	r0, [r0], -r7
    2038:	02040808 	andeq	r0, r4, #8, 16	; 0x80000
    203c:	c5040000 	strgt	r0, [r4, #-0]
    2040:	0000b701 	andeq	fp, r0, r1, lsl #14
    2044:	53100c00 	tstpl	r0, #0, 24
    2048:	04005243 	streq	r5, [r0], #-579	; 0xfffffdbd
    204c:	00b701c6 	adcseq	r0, r7, r6, asr #3
    2050:	10100000 	andsne	r0, r0, r0
    2054:	00524343 	subseq	r4, r2, r3, asr #6
    2058:	b701c704 	strlt	ip, [r1, -r4, lsl #14]
    205c:	14000000 	strne	r0, [r0], #-0
    2060:	50485310 	subpl	r5, r8, r0, lsl r3
    2064:	01c80400 	biceq	r0, r8, r0, lsl #8
    2068:	0000030f 	andeq	r0, r0, pc, lsl #6
    206c:	06990818 			; <UNDEFINED> instruction: 0x06990818
    2070:	c9040000 	stmdbgt	r4, {}	; <UNPREDICTABLE>
    2074:	0000b701 	andeq	fp, r0, r1, lsl #14
    2078:	4f082400 	svcmi	0x00082400
    207c:	0400000e 	streq	r0, [r0], #-14
    2080:	00b701ca 	adcseq	r0, r7, sl, asr #3
    2084:	08280000 	stmdaeq	r8!, {}	; <UNPREDICTABLE>
    2088:	0000057b 	andeq	r0, r0, fp, ror r5
    208c:	b701cb04 	strlt	ip, [r1, -r4, lsl #22]
    2090:	2c000000 	stccs	0, cr0, [r0], {-0}
    2094:	0004ab08 	andeq	sl, r4, r8, lsl #22
    2098:	01cc0400 	biceq	r0, ip, r0, lsl #8
    209c:	000000b7 	strheq	r0, [r0], -r7
    20a0:	0f380830 	svceq	0x00380830
    20a4:	cd040000 	stcgt	0, cr0, [r4, #-0]
    20a8:	0000b701 	andeq	fp, r0, r1, lsl #14
    20ac:	8d083400 	cfstrshi	mvf3, [r8, #-0]
    20b0:	0400000b 	streq	r0, [r0], #-11
    20b4:	00b701ce 	adcseq	r0, r7, lr, asr #3
    20b8:	08380000 	ldmdaeq	r8!, {}	; <UNPREDICTABLE>
    20bc:	00000e13 	andeq	r0, r0, r3, lsl lr
    20c0:	b701cf04 	strlt	ip, [r1, -r4, lsl #30]
    20c4:	3c000000 	stccc	0, cr0, [r0], {-0}
    20c8:	52465010 	subpl	r5, r6, #16
    20cc:	01d00400 	bicseq	r0, r0, r0, lsl #8
    20d0:	00000329 	andeq	r0, r0, r9, lsr #6
    20d4:	46441040 	strbmi	r1, [r4], -r0, asr #32
    20d8:	d1040052 	qaddle	r0, r2, r4
    20dc:	0000bc01 	andeq	fp, r0, r1, lsl #24
    20e0:	41104800 	tstmi	r0, r0, lsl #16
    20e4:	04005244 	streq	r5, [r0], #-580	; 0xfffffdbc
    20e8:	00bc01d2 	ldrsbteq	r0, [ip], r2
    20ec:	084c0000 	stmdaeq	ip, {}^	; <UNPREDICTABLE>
    20f0:	00000f27 	andeq	r0, r0, r7, lsr #30
    20f4:	4301d304 	movwmi	sp, #4868	; 0x1304
    20f8:	50000003 	andpl	r0, r0, r3
    20fc:	000f6108 	andeq	r6, pc, r8, lsl #2
    2100:	01d40400 	bicseq	r0, r4, r0, lsl #8
    2104:	0000035d 	andeq	r0, r0, sp, asr r3
    2108:	03d50860 	bicseq	r0, r5, #96, 16	; 0x600000
    210c:	d5040000 	strle	r0, [r4, #-0]
    2110:	00036201 	andeq	r6, r3, r1, lsl #4
    2114:	ee087400 	cfcpys	mvf7, mvf8
    2118:	04000010 	streq	r0, [r0], #-16
    211c:	00b701d6 	ldrsbteq	r0, [r7], r6
    2120:	00880000 	addeq	r0, r8, r0
    2124:	0000970b 	andeq	r9, r0, fp, lsl #14
    2128:	00030f00 	andeq	r0, r3, r0, lsl #30
    212c:	00850c00 	addeq	r0, r5, r0, lsl #24
    2130:	000b0000 	andeq	r0, fp, r0
    2134:	0002ff05 	andeq	pc, r2, r5, lsl #30
    2138:	00bc0b00 	adcseq	r0, ip, r0, lsl #22
    213c:	03240000 			; <UNDEFINED> instruction: 0x03240000
    2140:	850c0000 	strhi	r0, [ip, #-0]
    2144:	01000000 	mrseq	r0, (UNDEF: 0)
    2148:	03140600 	tsteq	r4, #0, 12
    214c:	24050000 	strcs	r0, [r5], #-0
    2150:	0b000003 	bleq	2164 <startup-0x1fffde9c>
    2154:	000000bc 	strheq	r0, [r0], -ip
    2158:	0000033e 	andeq	r0, r0, lr, lsr r3
    215c:	0000850c 	andeq	r8, r0, ip, lsl #10
    2160:	06000300 	streq	r0, [r0], -r0, lsl #6
    2164:	0000032e 	andeq	r0, r0, lr, lsr #6
    2168:	00033e05 	andeq	r3, r3, r5, lsl #28
    216c:	00bc0b00 	adcseq	r0, ip, r0, lsl #22
    2170:	03580000 	cmpeq	r8, #0
    2174:	850c0000 	strhi	r0, [ip, #-0]
    2178:	04000000 	streq	r0, [r0], #-0
    217c:	03480600 	movteq	r0, #34304	; 0x8600
    2180:	58050000 	stmdapl	r5, {}	; <UNPREDICTABLE>
    2184:	0b000003 	bleq	2198 <startup-0x1fffde68>
    2188:	000000ac 	andeq	r0, r0, ip, lsr #1
    218c:	00000372 	andeq	r0, r0, r2, ror r3
    2190:	0000850c 	andeq	r8, r0, ip, lsl #10
    2194:	0e000400 	cfcpyseq	mvf0, mvf0
    2198:	00000491 	muleq	r0, r1, r4
    219c:	e401d704 	str	sp, [r1], #-1796	; 0xfffff8fc
    21a0:	0f000001 	svceq	0x00000001
    21a4:	02bf0410 	adcseq	r0, pc, #16, 8	; 0x10000000
    21a8:	000003bc 			; <UNDEFINED> instruction: 0x000003bc
    21ac:	000adc08 	andeq	sp, sl, r8, lsl #24
    21b0:	02c10400 	sbceq	r0, r1, #0, 8
    21b4:	000000b7 	strheq	r0, [r0], -r7
    21b8:	0ea30800 	cdpeq	8, 10, cr0, cr3, cr0, {0}
    21bc:	c2040000 	andgt	r0, r4, #0
    21c0:	0000b702 	andeq	fp, r0, r2, lsl #14
    21c4:	56100400 	ldrpl	r0, [r0], -r0, lsl #8
    21c8:	04004c41 	streq	r4, [r0], #-3137	; 0xfffff3bf
    21cc:	00b702c3 	adcseq	r0, r7, r3, asr #5
    21d0:	08080000 	stmdaeq	r8, {}	; <UNPREDICTABLE>
    21d4:	00000e1f 	andeq	r0, r0, pc, lsl lr
    21d8:	bc02c404 	cfstrslt	mvf12, [r2], {4}
    21dc:	0c000000 	stceq	0, cr0, [r0], {-0}
    21e0:	0c210e00 	stceq	14, cr0, [r1], #-0
    21e4:	c5040000 	strgt	r0, [r4, #-0]
    21e8:	00037e02 	andeq	r7, r3, r2, lsl #28
    21ec:	0fd91100 	svceq	0x00d91100
    21f0:	fa040000 	blx	1021f8 <startup-0x1fefde08>
    21f4:	0000a706 	andeq	sl, r0, r6, lsl #14
    21f8:	08441200 	stmdaeq	r4, {r9, ip}^
    21fc:	3b050000 	blcc	142204 <startup-0x1febddfc>
    2200:	000000ac 	andeq	r0, r0, ip, lsr #1
    2204:	37010713 	smladcc	r1, r3, r7, r0
    2208:	06000000 	streq	r0, [r0], -r0
    220c:	03fa035f 	mvnseq	r0, #2080374785	; 0x7c000001
    2210:	ce140000 	cdpgt	0, 1, cr0, cr4, cr0, {0}
    2214:	00000009 	andeq	r0, r0, r9
    2218:	000f8e14 	andeq	r8, pc, r4, lsl lr	; <UNPREDICTABLE>
    221c:	0e000100 	adfeqs	f0, f0, f0
    2220:	00000cd0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    2224:	df035f06 	svcle	0x00035f06
    2228:	15000003 	strne	r0, [r0, #-3]
    222c:	3f360704 	svccc	0x00360704
    2230:	16000004 	strne	r0, [r0], -r4
    2234:	0000147d 	andeq	r1, r0, sp, ror r4
    2238:	008c3807 	addeq	r3, ip, r7, lsl #16
    223c:	16000000 	strne	r0, [r0], -r0
    2240:	000014a8 	andeq	r1, r0, r8, lsr #9
    2244:	008c3d07 	addeq	r3, ip, r7, lsl #26
    2248:	16010000 	strne	r0, [r1], -r0
    224c:	0000148d 	andeq	r1, r0, sp, lsl #9
    2250:	008c4207 	addeq	r4, ip, r7, lsl #4
    2254:	16020000 	strne	r0, [r2], -r0
    2258:	000013ca 	andeq	r1, r0, sl, asr #7
    225c:	03fa4707 	mvnseq	r4, #1835008	; 0x1c0000
    2260:	00030000 	andeq	r0, r3, r0
    2264:	0013b903 	andseq	fp, r3, r3, lsl #18
    2268:	064a0700 	strbeq	r0, [sl], -r0, lsl #14
    226c:	17000004 	strne	r0, [r0, -r4]
    2270:	00001459 	andeq	r1, r0, r9, asr r4
    2274:	185cdf01 	ldmdane	ip, {r0, r8, r9, sl, fp, ip, lr, pc}^
    2278:	00342000 	eorseq	r2, r4, r0
    227c:	9c010000 	stcls	0, cr0, [r1], {-0}
    2280:	0000046e 	andeq	r0, r0, lr, ror #8
    2284:	0013dd18 	andseq	sp, r3, r8, lsl sp
    2288:	acdf0100 	ldfgee	f0, [pc], {0}
    228c:	02000000 	andeq	r0, r0, #0
    2290:	17007491 			; <UNDEFINED> instruction: 0x17007491
    2294:	00001445 	andeq	r1, r0, r5, asr #8
    2298:	1814c701 	ldmdane	r4, {r0, r8, r9, sl, lr, pc}
    229c:	00482000 	subeq	r2, r8, r0
    22a0:	9c010000 	stcls	0, cr0, [r1], {-0}
    22a4:	000004a0 	andeq	r0, r0, r0, lsr #9
    22a8:	00154b18 	andseq	r4, r5, r8, lsl fp
    22ac:	8cc70100 	stfhie	f0, [r7], {0}
    22b0:	02000000 	andeq	r0, r0, #0
    22b4:	ef187791 	svc	0x00187791
    22b8:	0100000a 	tsteq	r0, sl
    22bc:	0003fac7 	andeq	pc, r3, r7, asr #21
    22c0:	76910200 	ldrvc	r0, [r1], r0, lsl #4
    22c4:	142a1700 	strtne	r1, [sl], #-1792	; 0xfffff900
    22c8:	b4010000 	strlt	r0, [r1], #-0
    22cc:	200017e8 	andcs	r1, r0, r8, ror #15
    22d0:	0000002c 	andeq	r0, r0, ip, lsr #32
    22d4:	04d29c01 	ldrbeq	r9, [r2], #3073	; 0xc01
    22d8:	ca180000 	bgt	6022e0 <startup-0x1f9fdd20>
    22dc:	01000014 	tsteq	r0, r4, lsl r0
    22e0:	0000acb4 			; <UNDEFINED> instruction: 0x0000acb4
    22e4:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    22e8:	00142318 	andseq	r2, r4, r8, lsl r3
    22ec:	acb40100 	ldfges	f0, [r4]
    22f0:	02000000 	andeq	r0, r0, #0
    22f4:	17007091 			; <UNDEFINED> instruction: 0x17007091
    22f8:	00001412 	andeq	r1, r0, r2, lsl r4
    22fc:	16f08801 	ldrbtne	r8, [r0], r1, lsl #16
    2300:	00f82000 	rscseq	r2, r8, r0
    2304:	9c010000 	stcls	0, cr0, [r1], {-0}
    2308:	00000520 	andeq	r0, r0, r0, lsr #10
    230c:	0013ef18 	andseq	lr, r3, r8, lsl pc
    2310:	20880100 	addcs	r0, r8, r0, lsl #2
    2314:	02000005 	andeq	r0, r0, #5
    2318:	71196491 			; <UNDEFINED> instruction: 0x71196491
    231c:	01000014 	tsteq	r0, r4, lsl r0
    2320:	00008c8a 	andeq	r8, r0, sl, lsl #25
    2324:	6f910200 	svcvs	0x00910200
    2328:	00141c19 	andseq	r1, r4, r9, lsl ip
    232c:	8c8a0100 	stfhis	f0, [sl], {0}
    2330:	02000000 	andeq	r0, r0, #0
    2334:	3e196e91 	mrccc	14, 0, r6, cr9, cr1, {4}
    2338:	01000014 	tsteq	r0, r4, lsl r0
    233c:	00008c8a 	andeq	r8, r0, sl, lsl #25
    2340:	6d910200 	lfmvs	f0, 4, [r1]
    2344:	3f041a00 	svccc	0x00041a00
    2348:	1b000004 	blne	2360 <startup-0x1fffdca0>
    234c:	00001558 	andeq	r1, r0, r8, asr r5
    2350:	16cc7601 	strbne	r7, [ip], r1, lsl #12
    2354:	00242000 	eoreq	r2, r4, r0
    2358:	9c010000 	stcls	0, cr0, [r1], {-0}
    235c:	0013ff18 	andseq	pc, r3, r8, lsl pc	; <UNPREDICTABLE>
    2360:	ac760100 	ldfgee	f0, [r6], #-0
    2364:	02000000 	andeq	r0, r0, #0
    2368:	00007491 	muleq	r0, r1, r4
    236c:	00000169 	andeq	r0, r0, r9, ror #2
    2370:	063f0004 	ldrteq	r0, [pc], -r4
    2374:	01040000 	mrseq	r0, (UNDEF: 4)
    2378:	000005d8 	ldrdeq	r0, [r0], -r8
    237c:	0015810c 	andseq	r8, r5, ip, lsl #2
    2380:	00053800 	andeq	r3, r5, r0, lsl #16
    2384:	00189000 	andseq	r9, r8, r0
    2388:	0000e820 	andeq	lr, r0, r0, lsr #16
    238c:	00098c00 	andeq	r8, r9, r0, lsl #24
    2390:	06010200 	streq	r0, [r1], -r0, lsl #4
    2394:	000003eb 	andeq	r0, r0, fp, ror #7
    2398:	0001c303 	andeq	ip, r1, r3, lsl #6
    239c:	372b0200 	strcc	r0, [fp, -r0, lsl #4]!
    23a0:	02000000 	andeq	r0, r0, #0
    23a4:	03e90801 	mvneq	r0, #65536	; 0x10000
    23a8:	02020000 	andeq	r0, r2, #0
    23ac:	000f3e05 	andeq	r3, pc, r5, lsl #28
    23b0:	07020200 	streq	r0, [r2, -r0, lsl #4]
    23b4:	000010b3 	strheq	r1, [r0], -r3
    23b8:	95050402 	strls	r0, [r5, #-1026]	; 0xfffffbfe
    23bc:	02000009 	andeq	r0, r0, #9
    23c0:	0d0b0704 	stceq	7, cr0, [fp, #-16]
    23c4:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    23c8:	00099005 	andeq	r9, r9, r5
    23cc:	07080200 	streq	r0, [r8, -r0, lsl #4]
    23d0:	00000d06 	andeq	r0, r0, r6, lsl #26
    23d4:	69050404 	stmdbvs	r5, {r2, sl}
    23d8:	0200746e 	andeq	r7, r0, #1845493760	; 0x6e000000
    23dc:	0d100704 	ldceq	7, cr0, [r0, #-16]
    23e0:	c5030000 	strgt	r0, [r3, #-0]
    23e4:	03000001 	movweq	r0, #1
    23e8:	00002c18 	andeq	r2, r0, r8, lsl ip
    23ec:	04670500 	strbteq	r0, [r7], #-1280	; 0xfffffb00
    23f0:	0000b90c 	andeq	fp, r0, ip, lsl #18
    23f4:	15d60600 	ldrbne	r0, [r6, #1536]	; 0x600
    23f8:	0e040000 	cdpeq	0, 0, cr0, cr4, cr0, {0}
    23fc:	000000b9 	strheq	r0, [r0], -r9
    2400:	157b0600 	ldrbne	r0, [fp, #-1536]!	; 0xfffffa00
    2404:	11040000 	mrsne	r0, (UNDEF: 4)
    2408:	00000076 	andeq	r0, r0, r6, ror r0
    240c:	6e690764 	cdpvs	7, 6, cr0, cr9, cr4, {3}
    2410:	76140400 	ldrvc	r0, [r4], -r0, lsl #8
    2414:	65000000 	strvs	r0, [r0, #-0]
    2418:	74756f07 	ldrbtvc	r6, [r5], #-3847	; 0xfffff0f9
    241c:	76170400 	ldrvc	r0, [r7], -r0, lsl #8
    2420:	66000000 	strvs	r0, [r0], -r0
    2424:	00760800 	rsbseq	r0, r6, r0, lsl #16
    2428:	00c90000 	sbceq	r0, r9, r0
    242c:	6f090000 	svcvs	0x00090000
    2430:	63000000 	movwvs	r0, #0
    2434:	15cc0300 	strbne	r0, [ip, #768]	; 0x300
    2438:	18040000 	stmdane	r4, {}	; <UNPREDICTABLE>
    243c:	00000081 	andeq	r0, r0, r1, lsl #1
    2440:	0015e00a 	andseq	lr, r5, sl
    2444:	761f0100 	ldrvc	r0, [pc], -r0, lsl #2
    2448:	1a000000 	bne	2450 <startup-0x1fffdbb0>
    244c:	5e200019 	miapl	acc0, r9, r0
    2450:	01000000 	mrseq	r0, (UNDEF: 0)
    2454:	00010a9c 	muleq	r1, ip, sl
    2458:	15f50b00 	ldrbne	r0, [r5, #2816]!	; 0xb00
    245c:	1f010000 	svcne	0x00010000
    2460:	0000010a 	andeq	r0, r0, sl, lsl #2
    2464:	0b749102 	bleq	1d26874 <startup-0x1e2d978c>
    2468:	000015d1 	ldrdeq	r1, [r0], -r1	; <UNPREDICTABLE>
    246c:	01101f01 	tsteq	r0, r1, lsl #30
    2470:	91020000 	mrsls	r0, (UNDEF: 2)
    2474:	040c0070 	streq	r0, [ip], #-112	; 0xffffff90
    2478:	000000c9 	andeq	r0, r0, r9, asr #1
    247c:	0076040c 	rsbseq	r0, r6, ip, lsl #8
    2480:	710a0000 	mrsvc	r0, (UNDEF: 10)
    2484:	01000015 	tsteq	r0, r5, lsl r0
    2488:	0000760c 	andeq	r7, r0, ip, lsl #12
    248c:	0018b800 	andseq	fp, r8, r0, lsl #16
    2490:	00006220 	andeq	r6, r0, r0, lsr #4
    2494:	4c9c0100 	ldfmis	f0, [ip], {0}
    2498:	0b000001 	bleq	24a4 <startup-0x1fffdb5c>
    249c:	000015f5 	strdeq	r1, [r0], -r5
    24a0:	010a0c01 	tsteq	sl, r1, lsl #24
    24a4:	91020000 	mrsls	r0, (UNDEF: 2)
    24a8:	15db0b74 	ldrbne	r0, [fp, #2932]	; 0xb74
    24ac:	0c010000 	stceq	0, cr0, [r1], {-0}
    24b0:	00000076 	andeq	r0, r0, r6, ror r0
    24b4:	00739102 	rsbseq	r9, r3, r2, lsl #2
    24b8:	0015ea0d 	andseq	lr, r5, sp, lsl #20
    24bc:	90040100 	andls	r0, r4, r0, lsl #2
    24c0:	28200018 	stmdacs	r0!, {r3, r4}
    24c4:	01000000 	mrseq	r0, (UNDEF: 0)
    24c8:	15f50b9c 	ldrbne	r0, [r5, #2972]!	; 0xb9c
    24cc:	04010000 	streq	r0, [r1], #-0
    24d0:	0000010a 	andeq	r0, r0, sl, lsl #2
    24d4:	00749102 	rsbseq	r9, r4, r2, lsl #2
    24d8:	0009cc00 	andeq	ip, r9, r0, lsl #24
    24dc:	ff000400 			; <UNDEFINED> instruction: 0xff000400
    24e0:	04000006 	streq	r0, [r0], #-6
    24e4:	0005d801 	andeq	sp, r5, r1, lsl #16
    24e8:	19cd0c00 	stmibne	sp, {sl, fp}^
    24ec:	05380000 	ldreq	r0, [r8, #-0]!
    24f0:	19780000 	ldmdbne	r8!, {}^	; <UNPREDICTABLE>
    24f4:	09fe2000 	ldmibeq	lr!, {sp}^
    24f8:	0ac10000 	beq	ff042500 <GPIO_Pins+0xdf03ffec>
    24fc:	01020000 	mrseq	r0, (UNDEF: 2)
    2500:	0003eb06 	andeq	lr, r3, r6, lsl #22
    2504:	01c30300 	biceq	r0, r3, r0, lsl #6
    2508:	2b020000 	blcs	82510 <startup-0x1ff7daf0>
    250c:	00000037 	andeq	r0, r0, r7, lsr r0
    2510:	e9080102 	stmdb	r8, {r1, r8}
    2514:	02000003 	andeq	r0, r0, #3
    2518:	0f3e0502 	svceq	0x003e0502
    251c:	f8030000 			; <UNDEFINED> instruction: 0xf8030000
    2520:	02000004 	andeq	r0, r0, #4
    2524:	00005039 	andeq	r5, r0, r9, lsr r0
    2528:	07020200 	streq	r0, [r2, -r0, lsl #4]
    252c:	000010b3 	strheq	r1, [r0], -r3
    2530:	00114603 	andseq	r4, r1, r3, lsl #12
    2534:	624d0200 	subvs	r0, sp, #0, 4
    2538:	02000000 	andeq	r0, r0, #0
    253c:	09950504 	ldmibeq	r5, {r2, r8, sl}
    2540:	3e030000 	cdpcc	0, 0, cr0, cr3, cr0, {0}
    2544:	02000009 	andeq	r0, r0, #9
    2548:	0000744f 	andeq	r7, r0, pc, asr #8
    254c:	07040200 	streq	r0, [r4, -r0, lsl #4]
    2550:	00000d0b 	andeq	r0, r0, fp, lsl #26
    2554:	90050802 	andls	r0, r5, r2, lsl #16
    2558:	02000009 	andeq	r0, r0, #9
    255c:	0d060708 	stceq	7, cr0, [r6, #-32]	; 0xffffffe0
    2560:	04040000 	streq	r0, [r4], #-0
    2564:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
    2568:	07040200 	streq	r0, [r4, -r0, lsl #4]
    256c:	00000d10 	andeq	r0, r0, r0, lsl sp
    2570:	0001c503 	andeq	ip, r1, r3, lsl #10
    2574:	2c180300 	ldccs	3, cr0, [r8], {-0}
    2578:	03000000 	movweq	r0, #0
    257c:	000004fa 	strdeq	r0, [r0], -sl
    2580:	00452403 	subeq	r2, r5, r3, lsl #8
    2584:	a2050000 	andge	r0, r5, #0
    2588:	03000000 	movweq	r0, #0
    258c:	00001148 	andeq	r1, r0, r8, asr #2
    2590:	00572c03 	subseq	r2, r7, r3, lsl #24
    2594:	b2050000 	andlt	r0, r5, #0
    2598:	03000000 	movweq	r0, #0
    259c:	00000940 	andeq	r0, r0, r0, asr #18
    25a0:	00693003 	rsbeq	r3, r9, r3
    25a4:	d9060000 	stmdble	r6, {}	; <UNPREDICTABLE>
    25a8:	0400000f 	streq	r0, [r0], #-15
    25ac:	00bd06fa 	ldrshteq	r0, [sp], sl
    25b0:	44070000 	strmi	r0, [r7], #-0
    25b4:	05000008 	streq	r0, [r0, #-8]
    25b8:	0000c23b 	andeq	ip, r0, fp, lsr r2
    25bc:	01070800 	tsteq	r7, r0, lsl #16
    25c0:	00000037 	andeq	r0, r0, r7, lsr r0
    25c4:	ff035d06 			; <UNDEFINED> instruction: 0xff035d06
    25c8:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    25cc:	0000122d 	andeq	r1, r0, sp, lsr #4
    25d0:	45530a00 	ldrbmi	r0, [r3, #-2560]	; 0xfffff600
    25d4:	00010054 	andeq	r0, r1, r4, asr r0
    25d8:	0009f80b 	andeq	pc, r9, fp, lsl #16
    25dc:	035d0600 	cmpeq	sp, #0, 12
    25e0:	000000e4 	andeq	r0, r0, r4, ror #1
    25e4:	000ac80b 	andeq	ip, sl, fp, lsl #16
    25e8:	035d0600 	cmpeq	sp, #0, 12
    25ec:	000000e4 	andeq	r0, r0, r4, ror #1
    25f0:	37010708 	strcc	r0, [r1, -r8, lsl #14]
    25f4:	06000000 	streq	r0, [r0], -r0
    25f8:	0132035f 	teqeq	r2, pc, asr r3
    25fc:	ce090000 	cdpgt	0, 0, cr0, cr9, cr0, {0}
    2600:	00000009 	andeq	r0, r0, r9
    2604:	000f8e09 	andeq	r8, pc, r9, lsl #28
    2608:	0b000100 	bleq	2a10 <startup-0x1fffd5f0>
    260c:	00000cd0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    2610:	17035f06 	strne	r5, [r3, -r6, lsl #30]
    2614:	0c000001 	stceq	0, cr0, [r0], {1}
    2618:	0773061c 			; <UNDEFINED> instruction: 0x0773061c
    261c:	000001fc 	strdeq	r0, [r0], -ip
    2620:	0052530d 	subseq	r5, r2, sp, lsl #6
    2624:	ad077506 	cfstr32ge	mvfx7, [r7, #-24]	; 0xffffffe8
    2628:	00000000 	andeq	r0, r0, r0
    262c:	0003d50e 	andeq	sp, r3, lr, lsl #10
    2630:	07760600 	ldrbeq	r0, [r6, -r0, lsl #12]!
    2634:	000000a2 	andeq	r0, r0, r2, lsr #1
    2638:	52440d02 	subpl	r0, r4, #2, 26	; 0x80
    263c:	07770600 	ldrbeq	r0, [r7, -r0, lsl #12]!
    2640:	000000ad 	andeq	r0, r0, sp, lsr #1
    2644:	03df0e04 	bicseq	r0, pc, #4, 28	; 0x40
    2648:	78060000 	stmdavc	r6, {}	; <UNPREDICTABLE>
    264c:	0000a207 	andeq	sl, r0, r7, lsl #4
    2650:	420d0600 	andmi	r0, sp, #0, 12
    2654:	06005252 			; <UNDEFINED> instruction: 0x06005252
    2658:	00ad0779 	adceq	r0, sp, r9, ror r7
    265c:	0e080000 	cdpeq	0, 0, cr0, cr8, cr0, {0}
    2660:	00000463 	andeq	r0, r0, r3, ror #8
    2664:	a2077a06 	andge	r7, r7, #24576	; 0x6000
    2668:	0a000000 	beq	2670 <startup-0x1fffd990>
    266c:	3152430d 	cmpcc	r2, sp, lsl #6
    2670:	077b0600 	ldrbeq	r0, [fp, -r0, lsl #12]!
    2674:	000000ad 	andeq	r0, r0, sp, lsr #1
    2678:	046d0e0c 	strbteq	r0, [sp], #-3596	; 0xfffff1f4
    267c:	7c060000 	stcvc	0, cr0, [r6], {-0}
    2680:	0000a207 	andeq	sl, r0, r7, lsl #4
    2684:	430d0e00 	movwmi	r0, #56832	; 0xde00
    2688:	06003252 			; <UNDEFINED> instruction: 0x06003252
    268c:	00ad077d 	adceq	r0, sp, sp, ror r7
    2690:	0e100000 	cdpeq	0, 1, cr0, cr0, cr0, {0}
    2694:	00000409 	andeq	r0, r0, r9, lsl #8
    2698:	a2077e06 	andge	r7, r7, #6, 28	; 0x60
    269c:	12000000 	andne	r0, r0, #0
    26a0:	3352430d 	cmpcc	r2, #872415232	; 0x34000000
    26a4:	077f0600 	ldrbeq	r0, [pc, -r0, lsl #12]!
    26a8:	000000ad 	andeq	r0, r0, sp, lsr #1
    26ac:	04130e14 	ldreq	r0, [r3], #-3604	; 0xfffff1ec
    26b0:	80060000 	andhi	r0, r6, r0
    26b4:	0000a207 	andeq	sl, r0, r7, lsl #4
    26b8:	160e1600 	strne	r1, [lr], -r0, lsl #12
    26bc:	06000016 			; <UNDEFINED> instruction: 0x06000016
    26c0:	00ad0781 	adceq	r0, sp, r1, lsl #15
    26c4:	0e180000 	cdpeq	0, 1, cr0, cr8, cr0, {0}
    26c8:	0000041d 	andeq	r0, r0, sp, lsl r4
    26cc:	a2078206 	andge	r8, r7, #1610612736	; 0x60000000
    26d0:	1a000000 	bne	26d8 <startup-0x1fffd928>
    26d4:	16820b00 	strne	r0, [r2], r0, lsl #22
    26d8:	83060000 	movwhi	r0, #24576	; 0x6000
    26dc:	00013e07 	andeq	r3, r1, r7, lsl #28
    26e0:	07100f00 	ldreq	r0, [r0, -r0, lsl #30]
    26e4:	00025936 	andeq	r5, r2, r6, lsr r9
    26e8:	17081000 	strne	r1, [r8, -r0]
    26ec:	38070000 	stmdacc	r7, {}	; <UNPREDICTABLE>
    26f0:	000000c2 	andeq	r0, r0, r2, asr #1
    26f4:	16dc1000 	ldrbne	r1, [ip], r0
    26f8:	3e070000 	cdpcc	0, 0, cr0, cr7, cr0, {0}
    26fc:	000000a2 	andeq	r0, r0, r2, lsr #1
    2700:	16901004 	ldrne	r1, [r0], r4
    2704:	41070000 	mrsmi	r0, (UNDEF: 7)
    2708:	000000a2 	andeq	r0, r0, r2, lsr #1
    270c:	17a61006 	strne	r1, [r6, r6]!
    2710:	44070000 	strmi	r0, [r7], #-0
    2714:	000000a2 	andeq	r0, r0, r2, lsr #1
    2718:	187a1008 	ldmdane	sl!, {r3, ip}^
    271c:	4b070000 	blmi	1c2724 <startup-0x1fe3d8dc>
    2720:	000000a2 	andeq	r0, r0, r2, lsr #1
    2724:	184d100a 	stmdane	sp, {r1, r3, ip}^
    2728:	4e070000 	cdpmi	0, 0, cr0, cr7, cr0, {0}
    272c:	000000a2 	andeq	r0, r0, r2, lsr #1
    2730:	1803000c 	stmdane	r3, {r2, r3}
    2734:	07000018 	smladeq	r0, r8, r0, r0
    2738:	00020851 	andeq	r0, r2, r1, asr r8
    273c:	07080f00 	streq	r0, [r8, -r0, lsl #30]
    2740:	00029d57 	andeq	r9, r2, r7, asr sp
    2744:	18e11000 	stmiane	r1!, {ip}^
    2748:	5a070000 	bpl	1c2750 <startup-0x1fe3d8b0>
    274c:	000000a2 	andeq	r0, r0, r2, lsr #1
    2750:	19bb1000 	ldmibne	fp!, {ip}
    2754:	5d070000 	stcpl	0, cr0, [r7, #-0]
    2758:	000000a2 	andeq	r0, r0, r2, lsr #1
    275c:	160b1002 	strne	r1, [fp], -r2
    2760:	60070000 	andvs	r0, r7, r0
    2764:	000000a2 	andeq	r0, r0, r2, lsr #1
    2768:	16fa1004 	ldrbtne	r1, [sl], r4
    276c:	63070000 	movwvs	r0, #28672	; 0x7000
    2770:	000000a2 	andeq	r0, r0, r2, lsr #1
    2774:	9f030006 	svcls	0x00030006
    2778:	07000016 	smladeq	r0, r6, r0, r0
    277c:	00026466 	andeq	r6, r2, r6, ror #8
    2780:	08100f00 	ldmdaeq	r0, {r8, r9, sl, fp}
    2784:	0002e130 	andeq	lr, r2, r0, lsr r1
    2788:	10f91000 	rscsne	r1, r9, r0
    278c:	32080000 	andcc	r0, r8, #0
    2790:	000000c2 	andeq	r0, r0, r2, asr #1
    2794:	008c1000 	addeq	r1, ip, r0
    2798:	33080000 	movwcc	r0, #32768	; 0x8000
    279c:	000000c2 	andeq	r0, r0, r2, asr #1
    27a0:	05951004 	ldreq	r1, [r5, #4]
    27a4:	34080000 	strcc	r0, [r8], #-0
    27a8:	000000c2 	andeq	r0, r0, r2, asr #1
    27ac:	050b1008 	streq	r1, [fp, #-8]
    27b0:	35080000 	strcc	r0, [r8, #-0]
    27b4:	000000c2 	andeq	r0, r0, r2, asr #1
    27b8:	1503000c 	strne	r0, [r3, #-12]
    27bc:	0800000f 	stmdaeq	r0, {r0, r1, r2, r3}
    27c0:	0002a836 	andeq	sl, r2, r6, lsr r8
    27c4:	172f1100 	strne	r1, [pc, -r0, lsl #2]!
    27c8:	ac010000 	stcge	0, cr0, [r1], {-0}
    27cc:	00232e05 	eoreq	r2, r3, r5, lsl #28
    27d0:	00004820 	andeq	r4, r0, r0, lsr #16
    27d4:	3f9c0100 	svccc	0x009c0100
    27d8:	12000003 	andne	r0, r0, #3
    27dc:	00001846 	andeq	r1, r0, r6, asr #16
    27e0:	3f05ac01 	svccc	0x0005ac01
    27e4:	02000003 	andeq	r0, r0, #3
    27e8:	38126c91 	ldmdacc	r2, {r0, r4, r7, sl, fp, sp, lr}
    27ec:	01000019 	tsteq	r0, r9, lsl r0
    27f0:	00a205ac 	adceq	r0, r2, ip, lsr #11
    27f4:	91020000 	mrsls	r0, (UNDEF: 2)
    27f8:	1893136a 	ldmne	r3, {r1, r3, r5, r6, r8, r9, ip}
    27fc:	ae010000 	cdpge	0, 0, cr0, cr1, cr0, {0}
    2800:	0000a205 	andeq	sl, r0, r5, lsl #4
    2804:	76910200 	ldrvc	r0, [r1], r0, lsl #4
    2808:	0019c613 	andseq	ip, r9, r3, lsl r6
    280c:	05ae0100 	streq	r0, [lr, #256]!	; 0x100
    2810:	000000a2 	andeq	r0, r0, r2, lsr #1
    2814:	00749102 	rsbseq	r9, r4, r2, lsl #2
    2818:	01fc0414 	mvnseq	r0, r4, lsl r4
    281c:	b1150000 	tstlt	r5, r0
    2820:	01000018 	tsteq	r0, r8, lsl r0
    2824:	010b0562 	tsteq	fp, r2, ror #10
    2828:	22640000 	rsbcs	r0, r4, #0
    282c:	00ca2000 	sbceq	r2, sl, r0
    2830:	9c010000 	stcls	0, cr0, [r1], {-0}
    2834:	000003ba 			; <UNDEFINED> instruction: 0x000003ba
    2838:	00184612 	andseq	r4, r8, r2, lsl r6
    283c:	05620100 	strbeq	r0, [r2, #-256]!	; 0xffffff00
    2840:	0000033f 	andeq	r0, r0, pc, lsr r3
    2844:	12649102 	rsbne	r9, r4, #-2147483648	; 0x80000000
    2848:	00001938 	andeq	r1, r0, r8, lsr r9
    284c:	a2056201 	andge	r6, r5, #268435456	; 0x10000000
    2850:	02000000 	andeq	r0, r0, #0
    2854:	93136291 	tstls	r3, #268435465	; 0x10000009
    2858:	01000018 	tsteq	r0, r8, lsl r0
    285c:	00c20564 	sbceq	r0, r2, r4, ror #10
    2860:	91020000 	mrsls	r0, (UNDEF: 2)
    2864:	19c6136c 	stmibne	r6, {r2, r3, r5, r6, r8, r9, ip}^
    2868:	64010000 	strvs	r0, [r1], #-0
    286c:	0000c205 	andeq	ip, r0, r5, lsl #4
    2870:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    2874:	001a5e13 	andseq	r5, sl, r3, lsl lr
    2878:	05640100 	strbeq	r0, [r4, #-256]!	; 0xffffff00
    287c:	000000c2 	andeq	r0, r0, r2, asr #1
    2880:	13689102 	cmnne	r8, #-2147483648	; 0x80000000
    2884:	00000f84 	andeq	r0, r0, r4, lsl #31
    2888:	0b056501 	bleq	15bc94 <startup-0x1fea436c>
    288c:	02000001 	andeq	r0, r0, #1
    2890:	11007391 			; <UNDEFINED> instruction: 0x11007391
    2894:	000017d4 	ldrdeq	r1, [r0], -r4
    2898:	42054001 	andmi	r4, r5, #1
    289c:	22200022 	eorcs	r0, r0, #34	; 0x22
    28a0:	01000000 	mrseq	r0, (UNDEF: 0)
    28a4:	0003ef9c 	muleq	r3, ip, pc	; <UNPREDICTABLE>
    28a8:	18461200 	stmdane	r6, {r9, ip}^
    28ac:	40010000 	andmi	r0, r1, r0
    28b0:	00033f05 	andeq	r3, r3, r5, lsl #30
    28b4:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    28b8:	00177812 	andseq	r7, r7, r2, lsl r8
    28bc:	05400100 	strbeq	r0, [r0, #-256]	; 0xffffff00
    28c0:	000000a2 	andeq	r0, r0, r2, lsr #1
    28c4:	00729102 	rsbseq	r9, r2, r2, lsl #2
    28c8:	00192415 	andseq	r2, r9, r5, lsl r4
    28cc:	050f0100 	streq	r0, [pc, #-256]	; 27d4 <startup-0x1fffd82c>
    28d0:	000000ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    28d4:	200021fa 	strdcs	r2, [r0], -sl
    28d8:	00000048 	andeq	r0, r0, r8, asr #32
    28dc:	04379c01 	ldrteq	r9, [r7], #-3073	; 0xfffff3ff
    28e0:	46120000 	ldrmi	r0, [r2], -r0
    28e4:	01000018 	tsteq	r0, r8, lsl r0
    28e8:	033f050f 	teqeq	pc, #62914560	; 0x3c00000
    28ec:	91020000 	mrsls	r0, (UNDEF: 2)
    28f0:	1778126c 	ldrbne	r1, [r8, -ip, ror #4]!
    28f4:	0f010000 	svceq	0x00010000
    28f8:	0000a205 	andeq	sl, r0, r5, lsl #4
    28fc:	6a910200 	bvs	fe443104 <GPIO_Pins+0xde440bf0>
    2900:	000f8413 	andeq	r8, pc, r3, lsl r4	; <UNPREDICTABLE>
    2904:	05110100 	ldreq	r0, [r1, #-256]	; 0xffffff00
    2908:	000000ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    290c:	00779102 	rsbseq	r9, r7, r2, lsl #2
    2910:	00182a11 	andseq	r2, r8, r1, lsl sl
    2914:	04cf0100 	strbeq	r0, [pc], #256	; 291c <startup-0x1fffd6e4>
    2918:	20002160 	andcs	r2, r0, r0, ror #2
    291c:	0000009a 	muleq	r0, sl, r0
    2920:	04b79c01 	ldrteq	r9, [r7], #3073	; 0xc01
    2924:	46120000 	ldrmi	r0, [r2], -r0
    2928:	01000018 	tsteq	r0, r8, lsl r0
    292c:	033f04cf 	teqeq	pc, #-822083584	; 0xcf000000
    2930:	91020000 	mrsls	r0, (UNDEF: 2)
    2934:	19381264 	ldmdbne	r8!, {r2, r5, r6, r9, ip}
    2938:	cf010000 	svcgt	0x00010000
    293c:	0000a204 	andeq	sl, r0, r4, lsl #4
    2940:	62910200 	addsvs	r0, r1, #0, 4
    2944:	000aef12 	andeq	lr, sl, r2, lsl pc
    2948:	04cf0100 	strbeq	r0, [pc], #256	; 2950 <startup-0x1fffd6b0>
    294c:	00000132 	andeq	r0, r0, r2, lsr r1
    2950:	13619102 	cmnne	r1, #-2147483648	; 0x80000000
    2954:	00001a5e 	andeq	r1, r0, lr, asr sl
    2958:	c204d101 	andgt	sp, r4, #1073741824	; 0x40000000
    295c:	02000000 	andeq	r0, r0, #0
    2960:	94137091 	ldrls	r7, [r3], #-145	; 0xffffff6f
    2964:	01000018 	tsteq	r0, r8, lsl r0
    2968:	00c204d1 	ldrdeq	r0, [r2], #65	; 0x41
    296c:	91020000 	mrsls	r0, (UNDEF: 2)
    2970:	19c6136c 	stmibne	r6, {r2, r3, r5, r6, r8, r9, ip}^
    2974:	d1010000 	mrsle	r0, (UNDEF: 1)
    2978:	0000c204 	andeq	ip, r0, r4, lsl #4
    297c:	68910200 	ldmvs	r1, {r9}
    2980:	0017c913 	andseq	ip, r7, r3, lsl r9
    2984:	04d20100 	ldrbeq	r0, [r2], #256	; 0x100
    2988:	000000c2 	andeq	r0, r0, r2, asr #1
    298c:	00749102 	rsbseq	r9, r4, r2, lsl #2
    2990:	0016ed11 	andseq	lr, r6, r1, lsl sp
    2994:	044b0100 	strbeq	r0, [fp], #-256	; 0xffffff00
    2998:	2000210e 	andcs	r2, r0, lr, lsl #2
    299c:	00000052 	andeq	r0, r0, r2, asr r0
    29a0:	04fb9c01 	ldrbteq	r9, [fp], #3073	; 0xc01
    29a4:	46120000 	ldrmi	r0, [r2], -r0
    29a8:	01000018 	tsteq	r0, r8, lsl r0
    29ac:	033f044b 	teqeq	pc, #1258291200	; 0x4b000000
    29b0:	91020000 	mrsls	r0, (UNDEF: 2)
    29b4:	18391274 	ldmdane	r9!, {r2, r4, r5, r6, r9, ip}
    29b8:	4b010000 	blmi	429c0 <startup-0x1ffbd640>
    29bc:	0000a204 	andeq	sl, r0, r4, lsl #4
    29c0:	72910200 	addsvc	r0, r1, #0, 4
    29c4:	000aef12 	andeq	lr, sl, r2, lsl pc
    29c8:	044b0100 	strbeq	r0, [fp], #-256	; 0xffffff00
    29cc:	00000132 	andeq	r0, r0, r2, lsr r1
    29d0:	00719102 	rsbseq	r9, r1, r2, lsl #2
    29d4:	0018ed11 	andseq	lr, r8, r1, lsl sp
    29d8:	041d0100 	ldreq	r0, [sp], #-256	; 0xffffff00
    29dc:	200020ce 	andcs	r2, r0, lr, asr #1
    29e0:	00000040 	andeq	r0, r0, r0, asr #32
    29e4:	05309c01 	ldreq	r9, [r0, #-3073]!	; 0xfffff3ff
    29e8:	46120000 	ldrmi	r0, [r2], -r0
    29ec:	01000018 	tsteq	r0, r8, lsl r0
    29f0:	033f041d 	teqeq	pc, #486539264	; 0x1d000000
    29f4:	91020000 	mrsls	r0, (UNDEF: 2)
    29f8:	0aef1274 	beq	ffbc73d0 <GPIO_Pins+0xdfbc4ebc>
    29fc:	1d010000 	stcne	0, cr0, [r1, #-0]
    2a00:	00013204 	andeq	r3, r1, r4, lsl #4
    2a04:	73910200 	orrsvc	r0, r1, #0, 4
    2a08:	18d01100 	ldmne	r0, {r8, ip}^
    2a0c:	0b010000 	bleq	42a14 <startup-0x1ffbd5ec>
    2a10:	00209604 	eoreq	r9, r0, r4, lsl #12
    2a14:	00003820 	andeq	r3, r0, r0, lsr #16
    2a18:	659c0100 	ldrvs	r0, [ip, #256]	; 0x100
    2a1c:	12000005 	andne	r0, r0, #5
    2a20:	00001846 	andeq	r1, r0, r6, asr #16
    2a24:	3f040b01 	svccc	0x00040b01
    2a28:	02000003 	andeq	r0, r0, #3
    2a2c:	17127491 			; <UNDEFINED> instruction: 0x17127491
    2a30:	01000017 	tsteq	r0, r7, lsl r0
    2a34:	00a2040b 	adceq	r0, r2, fp, lsl #8
    2a38:	91020000 	mrsls	r0, (UNDEF: 2)
    2a3c:	0d110072 	ldceq	0, cr0, [r1, #-456]	; 0xfffffe38
    2a40:	01000019 	tsteq	r0, r9, lsl r0
    2a44:	205603c4 	subscs	r0, r6, r4, asr #7
    2a48:	00402000 	subeq	r2, r0, r0
    2a4c:	9c010000 	stcls	0, cr0, [r1], {-0}
    2a50:	0000059a 	muleq	r0, sl, r5
    2a54:	00184612 	andseq	r4, r8, r2, lsl r6
    2a58:	03c40100 	biceq	r0, r4, #0, 2
    2a5c:	0000033f 	andeq	r0, r0, pc, lsr r3
    2a60:	12749102 	rsbsne	r9, r4, #-2147483648	; 0x80000000
    2a64:	00000aef 	andeq	r0, r0, pc, ror #21
    2a68:	3203c401 	andcc	ip, r3, #16777216	; 0x1000000
    2a6c:	02000001 	andeq	r0, r0, #1
    2a70:	11007391 			; <UNDEFINED> instruction: 0x11007391
    2a74:	00001867 	andeq	r1, r0, r7, ror #16
    2a78:	1603ab01 	strne	sl, [r3], -r1, lsl #22
    2a7c:	40200020 	eormi	r0, r0, r0, lsr #32
    2a80:	01000000 	mrseq	r0, (UNDEF: 0)
    2a84:	0005cf9c 	muleq	r5, ip, pc	; <UNPREDICTABLE>
    2a88:	18461200 	stmdane	r6, {r9, ip}^
    2a8c:	ab010000 	blge	42a94 <startup-0x1ffbd56c>
    2a90:	00033f03 	andeq	r3, r3, r3, lsl #30
    2a94:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    2a98:	000aef12 	andeq	lr, sl, r2, lsl pc
    2a9c:	03ab0100 			; <UNDEFINED> instruction: 0x03ab0100
    2aa0:	00000132 	andeq	r0, r0, r2, lsr r1
    2aa4:	00739102 	rsbseq	r9, r3, r2, lsl #2
    2aa8:	0017f511 	andseq	pc, r7, r1, lsl r5	; <UNPREDICTABLE>
    2aac:	03980100 	orrseq	r0, r8, #0, 2
    2ab0:	20001fd8 	ldrdcs	r1, [r0], -r8
    2ab4:	0000003e 	andeq	r0, r0, lr, lsr r0
    2ab8:	06049c01 	streq	r9, [r4], -r1, lsl #24
    2abc:	46120000 	ldrmi	r0, [r2], -r0
    2ac0:	01000018 	tsteq	r0, r8, lsl r0
    2ac4:	033f0398 	teqeq	pc, #152, 6	; 0x60000002
    2ac8:	91020000 	mrsls	r0, (UNDEF: 2)
    2acc:	17471274 	smlsldxne	r1, r7, r4, r2
    2ad0:	98010000 	stmdals	r1, {}	; <UNPREDICTABLE>
    2ad4:	00009703 	andeq	r9, r0, r3, lsl #14
    2ad8:	73910200 	orrsvc	r0, r1, #0, 4
    2adc:	19861100 	stmibne	r6, {r8, ip}
    2ae0:	44010000 	strmi	r0, [r1], #-0
    2ae4:	001f9803 	andseq	r9, pc, r3, lsl #16
    2ae8:	00004020 	andeq	r4, r0, r0, lsr #32
    2aec:	399c0100 	ldmibcc	ip, {r8}
    2af0:	12000006 	andne	r0, r0, #6
    2af4:	00001846 	andeq	r1, r0, r6, asr #16
    2af8:	3f034401 	svccc	0x00034401
    2afc:	02000003 	andeq	r0, r0, #3
    2b00:	ef127491 	svc	0x00127491
    2b04:	0100000a 	tsteq	r0, sl
    2b08:	01320344 	teqeq	r2, r4, asr #6
    2b0c:	91020000 	mrsls	r0, (UNDEF: 2)
    2b10:	08110073 	ldmdaeq	r1, {r0, r1, r4, r5, r6}
    2b14:	01000018 	tsteq	r0, r8, lsl r0
    2b18:	1f78030f 	svcne	0x0078030f
    2b1c:	00202000 	eoreq	r2, r0, r0
    2b20:	9c010000 	stcls	0, cr0, [r1], {-0}
    2b24:	0000065f 	andeq	r0, r0, pc, asr r6
    2b28:	00184612 	andseq	r4, r8, r2, lsl r6
    2b2c:	030f0100 	movweq	r0, #61696	; 0xf100
    2b30:	0000033f 	andeq	r0, r0, pc, lsr r3
    2b34:	00749102 	rsbseq	r9, r4, r2, lsl #2
    2b38:	0018c311 	andseq	ip, r8, r1, lsl r3
    2b3c:	02f70100 	rscseq	r0, r7, #0, 2
    2b40:	20001f30 	andcs	r1, r0, r0, lsr pc
    2b44:	00000048 	andeq	r0, r0, r8, asr #32
    2b48:	06949c01 	ldreq	r9, [r4], r1, lsl #24
    2b4c:	46120000 	ldrmi	r0, [r2], -r0
    2b50:	01000018 	tsteq	r0, r8, lsl r0
    2b54:	033f02f7 	teqeq	pc, #1879048207	; 0x7000000f
    2b58:	91020000 	mrsls	r0, (UNDEF: 2)
    2b5c:	0aef1274 	beq	ffbc7534 <GPIO_Pins+0xdfbc5020>
    2b60:	f7010000 			; <UNDEFINED> instruction: 0xf7010000
    2b64:	00013202 	andeq	r3, r1, r2, lsl #4
    2b68:	73910200 	orrsvc	r0, r1, #0, 4
    2b6c:	17571100 	ldrbne	r1, [r7, -r0, lsl #2]
    2b70:	e5010000 	str	r0, [r1, #-0]
    2b74:	001ef802 	andseq	pc, lr, r2, lsl #16
    2b78:	00003820 	andeq	r3, r0, r0, lsr #16
    2b7c:	c99c0100 	ldmibgt	ip, {r8}
    2b80:	12000006 	andne	r0, r0, #6
    2b84:	00001846 	andeq	r1, r0, r6, asr #16
    2b88:	3f02e501 	svccc	0x0002e501
    2b8c:	02000003 	andeq	r0, r0, #3
    2b90:	51127491 			; <UNDEFINED> instruction: 0x51127491
    2b94:	01000016 	tsteq	r0, r6, lsl r0
    2b98:	00a202e5 	adceq	r0, r2, r5, ror #5
    2b9c:	91020000 	mrsls	r0, (UNDEF: 2)
    2ba0:	73110072 	tstvc	r1, #114	; 0x72
    2ba4:	01000019 	tsteq	r0, r9, lsl r0
    2ba8:	1eba02a0 	cdpne	2, 11, cr0, cr10, cr0, {5}
    2bac:	003e2000 	eorseq	r2, lr, r0
    2bb0:	9c010000 	stcls	0, cr0, [r1], {-0}
    2bb4:	000006fe 	strdeq	r0, [r0], -lr
    2bb8:	00184612 	andseq	r4, r8, r2, lsl r6
    2bbc:	02a00100 	adceq	r0, r0, #0, 2
    2bc0:	0000033f 	andeq	r0, r0, pc, lsr r3
    2bc4:	12749102 	rsbsne	r9, r4, #-2147483648	; 0x80000000
    2bc8:	000016cf 	andeq	r1, r0, pc, asr #13
    2bcc:	a202a001 	andge	sl, r2, #1
    2bd0:	02000000 	andeq	r0, r0, #0
    2bd4:	11007291 			; <UNDEFINED> instruction: 0x11007291
    2bd8:	0000161b 	andeq	r1, r0, fp, lsl r6
    2bdc:	7a028501 	bvc	a3fe8 <startup-0x1ff5c018>
    2be0:	4020001e 	eormi	r0, r0, lr, lsl r0
    2be4:	01000000 	mrseq	r0, (UNDEF: 0)
    2be8:	0007339c 	muleq	r7, ip, r3
    2bec:	18461200 	stmdane	r6, {r9, ip}^
    2bf0:	85010000 	strhi	r0, [r1, #-0]
    2bf4:	00033f02 	andeq	r3, r3, r2, lsl #30
    2bf8:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    2bfc:	000aef12 	andeq	lr, sl, r2, lsl pc
    2c00:	02850100 	addeq	r0, r5, #0, 2
    2c04:	00000132 	andeq	r0, r0, r2, lsr r1
    2c08:	00739102 	rsbseq	r9, r3, r2, lsl #2
    2c0c:	0017e411 	andseq	lr, r7, r1, lsl r4
    2c10:	02710100 	rsbseq	r0, r1, #0, 2
    2c14:	20001e40 	andcs	r1, r0, r0, asr #28
    2c18:	0000003a 	andeq	r0, r0, sl, lsr r0
    2c1c:	07689c01 	strbeq	r9, [r8, -r1, lsl #24]!
    2c20:	46120000 	ldrmi	r0, [r2], -r0
    2c24:	01000018 	tsteq	r0, r8, lsl r0
    2c28:	033f0271 	teqeq	pc, #268435463	; 0x10000007
    2c2c:	91020000 	mrsls	r0, (UNDEF: 2)
    2c30:	18851274 	stmne	r5, {r2, r4, r5, r6, r9, ip}
    2c34:	71010000 	mrsvc	r0, (UNDEF: 1)
    2c38:	00009702 	andeq	r9, r0, r2, lsl #14
    2c3c:	73910200 	orrsvc	r0, r1, #0, 4
    2c40:	1a4c1500 	bne	1308048 <startup-0x1ecf7fb8>
    2c44:	3d010000 	stccc	0, cr0, [r1, #-0]
    2c48:	0000a202 	andeq	sl, r0, r2, lsl #4
    2c4c:	001e2400 	andseq	r2, lr, r0, lsl #8
    2c50:	00001c20 	andeq	r1, r0, r0, lsr #24
    2c54:	929c0100 	addsls	r0, ip, #0, 2
    2c58:	12000007 	andne	r0, r0, #7
    2c5c:	00001846 	andeq	r1, r0, r6, asr #16
    2c60:	3f023d01 	svccc	0x00023d01
    2c64:	02000003 	andeq	r0, r0, #3
    2c68:	11007491 			; <UNDEFINED> instruction: 0x11007491
    2c6c:	000016c0 	andeq	r1, r0, r0, asr #13
    2c70:	00022d01 	andeq	r2, r2, r1, lsl #26
    2c74:	2420001e 	strtcs	r0, [r0], #-30	; 0xffffffe2
    2c78:	01000000 	mrseq	r0, (UNDEF: 0)
    2c7c:	0007c79c 	muleq	r7, ip, r7
    2c80:	18461200 	stmdane	r6, {r9, ip}^
    2c84:	2d010000 	stccs	0, cr0, [r1, #-0]
    2c88:	00033f02 	andeq	r3, r3, r2, lsl #30
    2c8c:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    2c90:	0016ca12 	andseq	ip, r6, r2, lsl sl
    2c94:	022d0100 	eoreq	r0, sp, #0, 2
    2c98:	000000a2 	andeq	r0, r0, r2, lsr #1
    2c9c:	00729102 	rsbseq	r9, r2, r2, lsl #2
    2ca0:	00166c11 	andseq	r6, r6, r1, lsl ip
    2ca4:	01f40100 	mvnseq	r0, r0, lsl #2
    2ca8:	20001db8 			; <UNDEFINED> instruction: 0x20001db8
    2cac:	00000048 	andeq	r0, r0, r8, asr #32
    2cb0:	07fc9c01 	ldrbeq	r9, [ip, r1, lsl #24]!
    2cb4:	46120000 	ldrmi	r0, [r2], -r0
    2cb8:	01000018 	tsteq	r0, r8, lsl r0
    2cbc:	033f01f4 	teqeq	pc, #244, 2	; 0x3d
    2cc0:	91020000 	mrsls	r0, (UNDEF: 2)
    2cc4:	0aef1274 	beq	ffbc769c <GPIO_Pins+0xdfbc5188>
    2cc8:	f4010000 	vst4.8	{d0-d3}, [r1], r0
    2ccc:	00013201 	andeq	r3, r1, r1, lsl #4
    2cd0:	73910200 	orrsvc	r0, r1, #0, 4
    2cd4:	189a1100 	ldmne	sl, {r8, ip}
    2cd8:	da010000 	ble	42ce0 <startup-0x1ffbd320>
    2cdc:	001d7201 	andseq	r7, sp, r1, lsl #4
    2ce0:	00004620 	andeq	r4, r0, r0, lsr #12
    2ce4:	319c0100 	orrscc	r0, ip, r0, lsl #2
    2ce8:	12000008 	andne	r0, r0, #8
    2cec:	00001846 	andeq	r1, r0, r6, asr #16
    2cf0:	3f01da01 	svccc	0x0001da01
    2cf4:	02000003 	andeq	r0, r0, #3
    2cf8:	ef127491 	svc	0x00127491
    2cfc:	0100000a 	tsteq	r0, sl
    2d00:	013201da 	teqeq	r2, sl	; <illegal shifter operand>
    2d04:	91020000 	mrsls	r0, (UNDEF: 2)
    2d08:	33110073 	tstcc	r1, #115	; 0x73
    2d0c:	01000016 	tsteq	r0, r6, lsl r0
    2d10:	1d3801c5 	ldfnes	f0, [r8, #-788]!	; 0xfffffcec
    2d14:	003a2000 	eorseq	r2, sl, r0
    2d18:	9c010000 	stcls	0, cr0, [r1], {-0}
    2d1c:	00000866 	andeq	r0, r0, r6, ror #16
    2d20:	00184612 	andseq	r4, r8, r2, lsl r6
    2d24:	01c50100 	biceq	r0, r5, r0, lsl #2
    2d28:	0000033f 	andeq	r0, r0, pc, lsr r3
    2d2c:	12749102 	rsbsne	r9, r4, #-2147483648	; 0x80000000
    2d30:	000019ab 	andeq	r1, r0, fp, lsr #19
    2d34:	9701c501 	strls	ip, [r1, -r1, lsl #10]
    2d38:	02000000 	andeq	r0, r0, #0
    2d3c:	11007391 			; <UNDEFINED> instruction: 0x11007391
    2d40:	000016b6 			; <UNDEFINED> instruction: 0x000016b6
    2d44:	f001ab01 			; <UNDEFINED> instruction: 0xf001ab01
    2d48:	4820001c 	stmdami	r0!, {r2, r3, r4}
    2d4c:	01000000 	mrseq	r0, (UNDEF: 0)
    2d50:	00089b9c 	muleq	r8, ip, fp
    2d54:	18461200 	stmdane	r6, {r9, ip}^
    2d58:	ab010000 	blge	42d60 <startup-0x1ffbd2a0>
    2d5c:	00033f01 	andeq	r3, r3, r1, lsl #30
    2d60:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    2d64:	000aef12 	andeq	lr, sl, r2, lsl pc
    2d68:	01ab0100 			; <UNDEFINED> instruction: 0x01ab0100
    2d6c:	00000132 	andeq	r0, r0, r2, lsr r1
    2d70:	00739102 	rsbseq	r9, r3, r2, lsl #2
    2d74:	0017b311 	andseq	fp, r7, r1, lsl r3
    2d78:	019a0100 	orrseq	r0, sl, r0, lsl #2
    2d7c:	20001cc8 	andcs	r1, r0, r8, asr #25
    2d80:	00000028 	andeq	r0, r0, r8, lsr #32
    2d84:	08c19c01 	stmiaeq	r1, {r0, sl, fp, ip, pc}^
    2d88:	90120000 	andsls	r0, r2, r0
    2d8c:	01000017 	tsteq	r0, r7, lsl r0
    2d90:	08c1019a 	stmiaeq	r1, {r1, r3, r4, r7, r8}^
    2d94:	91020000 	mrsls	r0, (UNDEF: 2)
    2d98:	04140074 	ldreq	r0, [r4], #-116	; 0xffffff8c
    2d9c:	0000029d 	muleq	r0, sp, r2
    2da0:	00196311 	andseq	r6, r9, r1, lsl r3
    2da4:	017b0100 	cmneq	fp, r0, lsl #2
    2da8:	20001c72 	andcs	r1, r0, r2, ror ip
    2dac:	00000056 	andeq	r0, r0, r6, asr r0
    2db0:	090b9c01 	stmdbeq	fp, {r0, sl, fp, ip, pc}
    2db4:	46120000 	ldrmi	r0, [r2], -r0
    2db8:	01000018 	tsteq	r0, r8, lsl r0
    2dbc:	033f017b 	teqeq	pc, #-1073741794	; 0xc000001e
    2dc0:	91020000 	mrsls	r0, (UNDEF: 2)
    2dc4:	1790126c 	ldrne	r1, [r0, ip, ror #4]
    2dc8:	7b010000 	blvc	42dd0 <startup-0x1ffbd230>
    2dcc:	0008c101 	andeq	ip, r8, r1, lsl #2
    2dd0:	68910200 	ldmvs	r1, {r9}
    2dd4:	000e2513 	andeq	r2, lr, r3, lsl r5
    2dd8:	017d0100 	cmneq	sp, r0, lsl #2
    2ddc:	000000c2 	andeq	r0, r0, r2, asr #1
    2de0:	00749102 	rsbseq	r9, r4, r2, lsl #2
    2de4:	00199a11 	andseq	r9, r9, r1, lsl sl
    2de8:	01670100 	cmneq	r7, r0, lsl #2
    2dec:	20001c3c 	andcs	r1, r0, ip, lsr ip
    2df0:	00000036 	andeq	r0, r0, r6, lsr r0
    2df4:	09319c01 	ldmdbeq	r1!, {r0, sl, fp, ip, pc}
    2df8:	41120000 	tstmi	r2, r0
    2dfc:	01000019 	tsteq	r0, r9, lsl r0
    2e00:	09310167 	ldmdbeq	r1!, {r0, r1, r2, r5, r6, r8}
    2e04:	91020000 	mrsls	r0, (UNDEF: 2)
    2e08:	04140074 	ldreq	r0, [r4], #-116	; 0xffffff8c
    2e0c:	00000259 	andeq	r0, r0, r9, asr r2
    2e10:	00164616 	andseq	r4, r6, r6, lsl r6
    2e14:	a8f60100 	ldmge	r6!, {r8}^
    2e18:	9420001a 	strtls	r0, [r0], #-26	; 0xffffffe6
    2e1c:	01000001 	tsteq	r0, r1
    2e20:	0009af9c 	muleq	r9, ip, pc	; <UNPREDICTABLE>
    2e24:	18461700 	stmdane	r6, {r8, r9, sl, ip}^
    2e28:	f6010000 			; <UNDEFINED> instruction: 0xf6010000
    2e2c:	0000033f 	andeq	r0, r0, pc, lsr r3
    2e30:	17549102 	ldrbne	r9, [r4, -r2, lsl #2]
    2e34:	00001941 	andeq	r1, r0, r1, asr #18
    2e38:	0931f601 	ldmdbeq	r1!, {r0, r9, sl, ip, sp, lr, pc}
    2e3c:	91020000 	mrsls	r0, (UNDEF: 2)
    2e40:	0e251850 	mcreq	8, 1, r1, cr5, cr0, {2}
    2e44:	f8010000 			; <UNDEFINED> instruction: 0xf8010000
    2e48:	000000c2 	andeq	r0, r0, r2, asr #1
    2e4c:	18749102 	ldmdane	r4!, {r1, r8, ip, pc}^
    2e50:	00001726 	andeq	r1, r0, r6, lsr #14
    2e54:	00c2f801 	sbceq	pc, r2, r1, lsl #16
    2e58:	91020000 	mrsls	r0, (UNDEF: 2)
    2e5c:	15fc1870 	ldrbne	r1, [ip, #2160]!	; 0x870
    2e60:	f9010000 			; <UNDEFINED> instruction: 0xf9010000
    2e64:	000000c2 	andeq	r0, r0, r2, asr #1
    2e68:	186c9102 	stmdane	ip!, {r1, r8, ip, pc}^
    2e6c:	000018fb 	strdeq	r1, [r0], -fp
    2e70:	00c2fa01 	sbceq	pc, r2, r1, lsl #20
    2e74:	91020000 	mrsls	r0, (UNDEF: 2)
    2e78:	19521868 	ldmdbne	r2, {r3, r5, r6, fp, ip}^
    2e7c:	fb010000 	blx	42e86 <startup-0x1ffbd17a>
    2e80:	000002e1 	andeq	r0, r0, r1, ror #5
    2e84:	00589102 	subseq	r9, r8, r2, lsl #2
    2e88:	00178319 	andseq	r8, r7, r9, lsl r3
    2e8c:	78bb0100 	ldmvc	fp!, {r8}
    2e90:	30200019 	eorcc	r0, r0, r9, lsl r0
    2e94:	01000001 	tsteq	r0, r1
    2e98:	1846179c 	stmdane	r6, {r2, r3, r4, r7, r8, r9, sl, ip}^
    2e9c:	bb010000 	bllt	42ea4 <startup-0x1ffbd15c>
    2ea0:	0000033f 	andeq	r0, r0, pc, lsr r3
    2ea4:	00749102 	rsbseq	r9, r4, r2, lsl #2
	...

Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
   0:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
   4:	030b130e 	movweq	r1, #45838	; 0xb30e
   8:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xfffff4f2
   c:	10011117 	andne	r1, r1, r7, lsl r1
  10:	02000017 	andeq	r0, r0, #23
  14:	0e030104 	adfeqs	f0, f3, f4
  18:	0b0b0b3e 	bleq	2c2d18 <startup-0x1fd3d2e8>
  1c:	0b3a1349 	bleq	e84d48 <startup-0x1f17b2b8>
  20:	13010b3b 	movwne	r0, #6971	; 0x1b3b
  24:	28030000 	stmdacs	r3, {}	; <UNPREDICTABLE>
  28:	1c0e0300 	stcne	3, cr0, [lr], {-0}
  2c:	0400000d 	streq	r0, [r0], #-13
  30:	0e030028 	cdpeq	0, 0, cr0, cr3, cr8, {1}
  34:	00000b1c 	andeq	r0, r0, ip, lsl fp
  38:	0b002405 	bleq	9054 <startup-0x1fff6fac>
  3c:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
  40:	0600000e 	streq	r0, [r0], -lr
  44:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
  48:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
  4c:	00001349 	andeq	r1, r0, r9, asr #6
  50:	03001607 	movweq	r1, #1543	; 0x607
  54:	3b0b3a0e 	blcc	2ce894 <startup-0x1fd3176c>
  58:	0013490b 	andseq	r4, r3, fp, lsl #18
  5c:	00240800 	eoreq	r0, r4, r0, lsl #16
  60:	0b3e0b0b 	bleq	f82c94 <startup-0x1f07d36c>
  64:	00000803 	andeq	r0, r0, r3, lsl #16
  68:	49003509 	stmdbmi	r0, {r0, r3, r8, sl, ip, sp}
  6c:	0a000013 	beq	c0 <startup-0x1fffff40>
  70:	13490026 	movtne	r0, #36902	; 0x9026
  74:	130b0000 	movwne	r0, #45056	; 0xb000
  78:	3a050b01 	bcc	142c84 <startup-0x1febd37c>
  7c:	01053b0b 	tsteq	r5, fp, lsl #22
  80:	0c000013 	stceq	0, cr0, [r0], {19}
  84:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
  88:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
  8c:	0b381349 	bleq	e04db8 <startup-0x1f1fb248>
  90:	0d0d0000 	stceq	0, cr0, [sp, #-0]
  94:	3a0e0300 	bcc	380c9c <startup-0x1fc7f364>
  98:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
  9c:	00053813 	andeq	r3, r5, r3, lsl r8
  a0:	000d0e00 	andeq	r0, sp, r0, lsl #28
  a4:	0b3a0803 	bleq	e820b8 <startup-0x1f17df48>
  a8:	1349053b 	movtne	r0, #38203	; 0x953b
  ac:	00000538 	andeq	r0, r0, r8, lsr r5
  b0:	4901010f 	stmdbmi	r1, {r0, r1, r2, r3, r8}
  b4:	00130113 	andseq	r0, r3, r3, lsl r1
  b8:	00211000 	eoreq	r1, r1, r0
  bc:	0b2f1349 	bleq	bc4de8 <startup-0x1f43b218>
  c0:	21110000 	tstcs	r1, r0
  c4:	2f134900 	svccs	0x00134900
  c8:	12000005 	andne	r0, r0, #5
  cc:	0b0b0113 	bleq	2c0520 <startup-0x1fd3fae0>
  d0:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
  d4:	00001301 	andeq	r1, r0, r1, lsl #6
  d8:	03000d13 	movweq	r0, #3347	; 0xd13
  dc:	3b0b3a08 	blcc	2ce904 <startup-0x1fd316fc>
  e0:	38134905 	ldmdacc	r3, {r0, r2, r8, fp, lr}
  e4:	1400000b 	strne	r0, [r0], #-11
  e8:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
  ec:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
  f0:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
  f4:	0000193c 	andeq	r1, r0, ip, lsr r9
  f8:	03003415 	movweq	r3, #1045	; 0x415
  fc:	3b0b3a0e 	blcc	2ce93c <startup-0x1fd316c4>
 100:	3f13490b 	svccc	0x0013490b
 104:	00193c19 	andseq	r3, r9, r9, lsl ip
 108:	01041600 	tsteq	r4, r0, lsl #12
 10c:	0b0b0b3e 	bleq	2c2e0c <startup-0x1fd3d1f4>
 110:	0b3a1349 	bleq	e84e3c <startup-0x1f17b1c4>
 114:	1301053b 	movwne	r0, #5435	; 0x153b
 118:	28170000 	ldmdacs	r7, {}	; <UNPREDICTABLE>
 11c:	1c080300 	stcne	3, cr0, [r8], {-0}
 120:	1800000b 	stmdane	r0, {r0, r1, r3}
 124:	0b0b0113 	bleq	2c0578 <startup-0x1fd3fa88>
 128:	0b3b0b3a 	bleq	ec2e18 <startup-0x1f13d1e8>
 12c:	00001301 	andeq	r1, r0, r1, lsl #6
 130:	03000d19 	movweq	r0, #3353	; 0xd19
 134:	3b0b3a0e 	blcc	2ce974 <startup-0x1fd3168c>
 138:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
 13c:	1a00000b 	bne	170 <startup-0x1ffffe90>
 140:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 144:	0b3b0b3a 	bleq	ec2e34 <startup-0x1f13d1cc>
 148:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 14c:	041b0000 	ldreq	r0, [fp], #-0
 150:	0b0b3e01 	bleq	2cf95c <startup-0x1fd306a4>
 154:	3a13490b 	bcc	4d2588 <startup-0x1fb2da78>
 158:	010b3b0b 	tsteq	fp, fp, lsl #22
 15c:	1c000013 	stcne	0, cr0, [r0], {19}
 160:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
 164:	0b3a0b0b 	bleq	e82d98 <startup-0x1f17d268>
 168:	13010b3b 	movwne	r0, #6971	; 0x1b3b
 16c:	0d1d0000 	ldceq	0, cr0, [sp, #-0]
 170:	3a080300 	bcc	200d78 <startup-0x1fdff288>
 174:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 178:	000b3813 	andeq	r3, fp, r3, lsl r8
 17c:	00341e00 	eorseq	r1, r4, r0, lsl #28
 180:	0b3a0e03 	bleq	e83994 <startup-0x1f17c66c>
 184:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 188:	1802193f 	stmdane	r2, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
 18c:	2e1f0000 	cdpcs	0, 1, cr0, cr15, cr0, {0}
 190:	03193f01 	tsteq	r9, #1, 30
 194:	3b0b3a0e 	blcc	2ce9d4 <startup-0x1fd3162c>
 198:	1119270b 	tstne	r9, fp, lsl #14
 19c:	40061201 	andmi	r1, r6, r1, lsl #4
 1a0:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 1a4:	00001301 	andeq	r1, r0, r1, lsl #6
 1a8:	11010b20 	tstne	r1, r0, lsr #22
 1ac:	01061201 	tsteq	r6, r1, lsl #4
 1b0:	21000013 	tstcs	r0, r3, lsl r0
 1b4:	08030034 	stmdaeq	r3, {r2, r4, r5}
 1b8:	0b3b0b3a 	bleq	ec2ea8 <startup-0x1f13d158>
 1bc:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 1c0:	0b220000 	bleq	8801c8 <startup-0x1f77fe38>
 1c4:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
 1c8:	23000006 	movwcs	r0, #6
 1cc:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
 1d0:	0b3a0e03 	bleq	e839e4 <startup-0x1f17c61c>
 1d4:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 1d8:	06120111 			; <UNDEFINED> instruction: 0x06120111
 1dc:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 1e0:	24000019 	strcs	r0, [r0], #-25	; 0xffffffe7
 1e4:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 1e8:	0b3a0e03 	bleq	e839fc <startup-0x1f17c604>
 1ec:	01110b3b 	tsteq	r1, fp, lsr fp
 1f0:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 1f4:	01194296 			; <UNDEFINED> instruction: 0x01194296
 1f8:	25000013 	strcs	r0, [r0, #-19]	; 0xffffffed
 1fc:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
 200:	0b3b0b3a 	bleq	ec2ef0 <startup-0x1f13d110>
 204:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 208:	0f260000 	svceq	0x00260000
 20c:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
 210:	27000013 	smladcs	r0, r3, r0, r0
 214:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 218:	0b3a0e03 	bleq	e83a2c <startup-0x1f17c5d4>
 21c:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
 220:	06120111 			; <UNDEFINED> instruction: 0x06120111
 224:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 228:	00130119 	andseq	r0, r3, r9, lsl r1
 22c:	00052800 	andeq	r2, r5, r0, lsl #16
 230:	0b3a0e03 	bleq	e83a44 <startup-0x1f17c5bc>
 234:	1349053b 	movtne	r0, #38203	; 0x953b
 238:	00001802 	andeq	r1, r0, r2, lsl #16
 23c:	3f012e29 	svccc	0x00012e29
 240:	3a0e0319 	bcc	380eac <startup-0x1fc7f154>
 244:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
 248:	11134919 	tstne	r3, r9, lsl r9
 24c:	40061201 	andmi	r1, r6, r1, lsl #4
 250:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 254:	00001301 	andeq	r1, r0, r1, lsl #6
 258:	0300342a 	movweq	r3, #1066	; 0x42a
 25c:	3b0b3a0e 	blcc	2cea9c <startup-0x1fd31564>
 260:	02134905 	andseq	r4, r3, #81920	; 0x14000
 264:	2b000018 	blcs	2cc <startup-0x1ffffd34>
 268:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
 26c:	0b3a0e03 	bleq	e83a80 <startup-0x1f17c580>
 270:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
 274:	06120111 			; <UNDEFINED> instruction: 0x06120111
 278:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 27c:	2c000019 	stccs	0, cr0, [r0], {25}
 280:	08030034 	stmdaeq	r3, {r2, r4, r5}
 284:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 288:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 28c:	2e2d0000 	cdpcs	0, 2, cr0, cr13, cr0, {0}
 290:	03193f01 	tsteq	r9, #1, 30
 294:	3b0b3a0e 	blcc	2cead4 <startup-0x1fd3152c>
 298:	11192705 	tstne	r9, r5, lsl #14
 29c:	40061201 	andmi	r1, r6, r1, lsl #4
 2a0:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 2a4:	00001301 	andeq	r1, r0, r1, lsl #6
 2a8:	3f002e2e 	svccc	0x00002e2e
 2ac:	3a0e0319 	bcc	380f18 <startup-0x1fc7f0e8>
 2b0:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
 2b4:	11134919 	tstne	r3, r9, lsl r9
 2b8:	40061201 	andmi	r1, r6, r1, lsl #4
 2bc:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 2c0:	2e2f0000 	cdpcs	0, 2, cr0, cr15, cr0, {0}
 2c4:	03193f01 	tsteq	r9, #1, 30
 2c8:	3b0b3a0e 	blcc	2ceb08 <startup-0x1fd314f8>
 2cc:	49192705 	ldmdbmi	r9, {r0, r2, r8, r9, sl, sp}
 2d0:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
 2d4:	96184006 	ldrls	r4, [r8], -r6
 2d8:	13011942 	movwne	r1, #6466	; 0x1942
 2dc:	2e300000 	cdpcs	0, 3, cr0, cr0, cr0, {0}
 2e0:	3a0e0301 	bcc	380eec <startup-0x1fc7f114>
 2e4:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
 2e8:	11134919 	tstne	r3, r9, lsl r9
 2ec:	40061201 	andmi	r1, r6, r1, lsl #4
 2f0:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 2f4:	00001301 	andeq	r1, r0, r1, lsl #6
 2f8:	03012e31 	movweq	r2, #7729	; 0x1e31
 2fc:	3b0b3a0e 	blcc	2ceb3c <startup-0x1fd314c4>
 300:	11192705 	tstne	r9, r5, lsl #14
 304:	40061201 	andmi	r1, r6, r1, lsl #4
 308:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 30c:	01000000 	mrseq	r0, (UNDEF: 0)
 310:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
 314:	0e030b13 	vmoveq.32	d3[0], r0
 318:	01110e1b 	tsteq	r1, fp, lsl lr
 31c:	17100612 			; <UNDEFINED> instruction: 0x17100612
 320:	24020000 	strcs	r0, [r2], #-0
 324:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 328:	000e030b 	andeq	r0, lr, fp, lsl #6
 32c:	00160300 	andseq	r0, r6, r0, lsl #6
 330:	0b3a0e03 	bleq	e83b44 <startup-0x1f17c4bc>
 334:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 338:	24040000 	strcs	r0, [r4], #-0
 33c:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 340:	0008030b 	andeq	r0, r8, fp, lsl #6
 344:	00350500 	eorseq	r0, r5, r0, lsl #10
 348:	00001349 	andeq	r1, r0, r9, asr #6
 34c:	03003406 	movweq	r3, #1030	; 0x406
 350:	3b0b3a0e 	blcc	2ceb90 <startup-0x1fd31470>
 354:	3f134905 	svccc	0x00134905
 358:	00193c19 	andseq	r3, r9, r9, lsl ip
 35c:	00340700 	eorseq	r0, r4, r0, lsl #14
 360:	0b3a0e03 	bleq	e83b74 <startup-0x1f17c48c>
 364:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 368:	193c193f 	ldmdbne	ip!, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
 36c:	04080000 	streq	r0, [r8], #-0
 370:	0b0b3e01 	bleq	2cfb7c <startup-0x1fd30484>
 374:	3a13490b 	bcc	4d27a8 <startup-0x1fb2d858>
 378:	01053b0b 	tsteq	r5, fp, lsl #22
 37c:	09000013 	stmdbeq	r0, {r0, r1, r4}
 380:	0e030028 	cdpeq	0, 0, cr0, cr3, cr8, {1}
 384:	00000b1c 	andeq	r0, r0, ip, lsl fp
 388:	0b01130a 	bleq	44fb8 <startup-0x1ffbb048>
 38c:	3b0b3a0b 	blcc	2cebc0 <startup-0x1fd31440>
 390:	00130105 	andseq	r0, r3, r5, lsl #2
 394:	000d0b00 	andeq	r0, sp, r0, lsl #22
 398:	0b3a0e03 	bleq	e83bac <startup-0x1f17c454>
 39c:	1349053b 	movtne	r0, #38203	; 0x953b
 3a0:	00000b38 	andeq	r0, r0, r8, lsr fp
 3a4:	03000d0c 	movweq	r0, #3340	; 0xd0c
 3a8:	3b0b3a08 	blcc	2cebd0 <startup-0x1fd31430>
 3ac:	38134905 	ldmdacc	r3, {r0, r2, r8, fp, lr}
 3b0:	0d00000b 	stceq	0, cr0, [r0, #-44]	; 0xffffffd4
 3b4:	13490101 	movtne	r0, #37121	; 0x9101
 3b8:	00001301 	andeq	r1, r0, r1, lsl #6
 3bc:	4900210e 	stmdbmi	r0, {r1, r2, r3, r8, sp}
 3c0:	000b2f13 	andeq	r2, fp, r3, lsl pc
 3c4:	00160f00 	andseq	r0, r6, r0, lsl #30
 3c8:	0b3a0e03 	bleq	e83bdc <startup-0x1f17c424>
 3cc:	1349053b 	movtne	r0, #38203	; 0x953b
 3d0:	04100000 	ldreq	r0, [r0], #-0
 3d4:	0b0b3e01 	bleq	2cfbe0 <startup-0x1fd30420>
 3d8:	3a13490b 	bcc	4d280c <startup-0x1fb2d7f4>
 3dc:	010b3b0b 	tsteq	fp, fp, lsl #22
 3e0:	11000013 	tstne	r0, r3, lsl r0
 3e4:	0b0b0113 	bleq	2c0838 <startup-0x1fd3f7c8>
 3e8:	0b3b0b3a 	bleq	ec30d8 <startup-0x1f13cf28>
 3ec:	00001301 	andeq	r1, r0, r1, lsl #6
 3f0:	03000d12 	movweq	r0, #3346	; 0xd12
 3f4:	3b0b3a0e 	blcc	2cec34 <startup-0x1fd313cc>
 3f8:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
 3fc:	1300000b 	movwne	r0, #11
 400:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 404:	0b3a0e03 	bleq	e83c18 <startup-0x1f17c3e8>
 408:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
 40c:	06120111 			; <UNDEFINED> instruction: 0x06120111
 410:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 414:	00130119 	andseq	r0, r3, r9, lsl r1
 418:	00051400 	andeq	r1, r5, r0, lsl #8
 41c:	0b3a0e03 	bleq	e83c30 <startup-0x1f17c3d0>
 420:	1349053b 	movtne	r0, #38203	; 0x953b
 424:	00001802 	andeq	r1, r0, r2, lsl #16
 428:	03003415 	movweq	r3, #1045	; 0x415
 42c:	3b0b3a0e 	blcc	2cec6c <startup-0x1fd31394>
 430:	02134905 	andseq	r4, r3, #81920	; 0x14000
 434:	16000018 			; <UNDEFINED> instruction: 0x16000018
 438:	0b0b000f 	bleq	2c047c <startup-0x1fd3fb84>
 43c:	00001349 	andeq	r1, r0, r9, asr #6
 440:	3f012e17 	svccc	0x00012e17
 444:	3a0e0319 	bcc	3810b0 <startup-0x1fc7ef50>
 448:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
 44c:	11134919 	tstne	r3, r9, lsl r9
 450:	40061201 	andmi	r1, r6, r1, lsl #4
 454:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 458:	00001301 	andeq	r1, r0, r1, lsl #6
 45c:	03003418 	movweq	r3, #1048	; 0x418
 460:	3b0b3a08 	blcc	2cec88 <startup-0x1fd31378>
 464:	02134905 	andseq	r4, r3, #81920	; 0x14000
 468:	19000018 	stmdbne	r0, {r3, r4}
 46c:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 470:	0b3a0e03 	bleq	e83c84 <startup-0x1f17c37c>
 474:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 478:	06120111 			; <UNDEFINED> instruction: 0x06120111
 47c:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 480:	00130119 	andseq	r0, r3, r9, lsl r1
 484:	00051a00 	andeq	r1, r5, r0, lsl #20
 488:	0b3a0e03 	bleq	e83c9c <startup-0x1f17c364>
 48c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 490:	00001802 	andeq	r1, r0, r2, lsl #16
 494:	0300341b 	movweq	r3, #1051	; 0x41b
 498:	3b0b3a0e 	blcc	2cecd8 <startup-0x1fd31328>
 49c:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 4a0:	1c000018 	stcne	0, cr0, [r0], {24}
 4a4:	08030034 	stmdaeq	r3, {r2, r4, r5}
 4a8:	0b3b0b3a 	bleq	ec3198 <startup-0x1f13ce68>
 4ac:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 4b0:	2e1d0000 	cdpcs	0, 1, cr0, cr13, cr0, {0}
 4b4:	03193f01 	tsteq	r9, #1, 30
 4b8:	3b0b3a0e 	blcc	2cecf8 <startup-0x1fd31308>
 4bc:	1119270b 	tstne	r9, fp, lsl #14
 4c0:	40061201 	andmi	r1, r6, r1, lsl #4
 4c4:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 4c8:	01000000 	mrseq	r0, (UNDEF: 0)
 4cc:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
 4d0:	0e030b13 	vmoveq.32	d3[0], r0
 4d4:	01110e1b 	tsteq	r1, fp, lsl lr
 4d8:	17100612 			; <UNDEFINED> instruction: 0x17100612
 4dc:	24020000 	strcs	r0, [r2], #-0
 4e0:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 4e4:	000e030b 	andeq	r0, lr, fp, lsl #6
 4e8:	00160300 	andseq	r0, r6, r0, lsl #6
 4ec:	0b3a0e03 	bleq	e83d00 <startup-0x1f17c300>
 4f0:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 4f4:	24040000 	strcs	r0, [r4], #-0
 4f8:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 4fc:	0008030b 	andeq	r0, r8, fp, lsl #6
 500:	00350500 	eorseq	r0, r5, r0, lsl #10
 504:	00001349 	andeq	r1, r0, r9, asr #6
 508:	49002606 	stmdbmi	r0, {r1, r2, r9, sl, sp}
 50c:	07000013 	smladeq	r0, r3, r0, r0
 510:	050b0113 	streq	r0, [fp, #-275]	; 0xfffffeed
 514:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 518:	00001301 	andeq	r1, r0, r1, lsl #6
 51c:	03000d08 	movweq	r0, #3336	; 0xd08
 520:	3b0b3a0e 	blcc	2ced60 <startup-0x1fd312a0>
 524:	38134905 	ldmdacc	r3, {r0, r2, r8, fp, lr}
 528:	0900000b 	stmdbeq	r0, {r0, r1, r3}
 52c:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
 530:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 534:	05381349 	ldreq	r1, [r8, #-841]!	; 0xfffffcb7
 538:	0d0a0000 	stceq	0, cr0, [sl, #-0]
 53c:	3a080300 	bcc	201144 <startup-0x1fdfeebc>
 540:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 544:	00053813 	andeq	r3, r5, r3, lsl r8
 548:	01010b00 	tsteq	r1, r0, lsl #22
 54c:	13011349 	movwne	r1, #4937	; 0x1349
 550:	210c0000 	mrscs	r0, (UNDEF: 12)
 554:	2f134900 	svccs	0x00134900
 558:	0d00000b 	stceq	0, cr0, [r0, #-44]	; 0xffffffd4
 55c:	13490021 	movtne	r0, #36897	; 0x9021
 560:	0000052f 	andeq	r0, r0, pc, lsr #10
 564:	0300160e 	movweq	r1, #1550	; 0x60e
 568:	3b0b3a0e 	blcc	2ceda8 <startup-0x1fd31258>
 56c:	00134905 	andseq	r4, r3, r5, lsl #18
 570:	01130f00 	tsteq	r3, r0, lsl #30
 574:	0b3a0b0b 	bleq	e831a8 <startup-0x1f17ce58>
 578:	1301053b 	movwne	r0, #5435	; 0x153b
 57c:	0d100000 	ldceq	0, cr0, [r0, #-0]
 580:	3a080300 	bcc	201188 <startup-0x1fdfee78>
 584:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 588:	000b3813 	andeq	r3, fp, r3, lsl r8
 58c:	00341100 	eorseq	r1, r4, r0, lsl #2
 590:	0b3a0e03 	bleq	e83da4 <startup-0x1f17c25c>
 594:	1349053b 	movtne	r0, #38203	; 0x953b
 598:	193c193f 	ldmdbne	ip!, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
 59c:	34120000 	ldrcc	r0, [r2], #-0
 5a0:	3a0e0300 	bcc	3811a8 <startup-0x1fc7ee58>
 5a4:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 5a8:	3c193f13 	ldccc	15, cr3, [r9], {19}
 5ac:	13000019 	movwne	r0, #25
 5b0:	0b3e0104 	bleq	f809c8 <startup-0x1f07f638>
 5b4:	13490b0b 	movtne	r0, #39691	; 0x9b0b
 5b8:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 5bc:	00001301 	andeq	r1, r0, r1, lsl #6
 5c0:	03002814 	movweq	r2, #2068	; 0x814
 5c4:	000b1c0e 	andeq	r1, fp, lr, lsl #24
 5c8:	01131500 	tsteq	r3, r0, lsl #10
 5cc:	0b3a0b0b 	bleq	e83200 <startup-0x1f17ce00>
 5d0:	13010b3b 	movwne	r0, #6971	; 0x1b3b
 5d4:	0d160000 	ldceq	0, cr0, [r6, #-0]
 5d8:	3a0e0300 	bcc	3811e0 <startup-0x1fc7ee20>
 5dc:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 5e0:	000b3813 	andeq	r3, fp, r3, lsl r8
 5e4:	012e1700 			; <UNDEFINED> instruction: 0x012e1700
 5e8:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 5ec:	0b3b0b3a 	bleq	ec32dc <startup-0x1f13cd24>
 5f0:	01111927 	tsteq	r1, r7, lsr #18
 5f4:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 5f8:	01194297 			; <UNDEFINED> instruction: 0x01194297
 5fc:	18000013 	stmdane	r0, {r0, r1, r4}
 600:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
 604:	0b3b0b3a 	bleq	ec32f4 <startup-0x1f13cd0c>
 608:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 60c:	34190000 	ldrcc	r0, [r9], #-0
 610:	3a0e0300 	bcc	381218 <startup-0x1fc7ede8>
 614:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 618:	00180213 	andseq	r0, r8, r3, lsl r2
 61c:	000f1a00 	andeq	r1, pc, r0, lsl #20
 620:	13490b0b 	movtne	r0, #39691	; 0x9b0b
 624:	2e1b0000 	cdpcs	0, 1, cr0, cr11, cr0, {0}
 628:	03193f01 	tsteq	r9, #1, 30
 62c:	3b0b3a0e 	blcc	2cee6c <startup-0x1fd31194>
 630:	1119270b 	tstne	r9, fp, lsl #14
 634:	40061201 	andmi	r1, r6, r1, lsl #4
 638:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 63c:	01000000 	mrseq	r0, (UNDEF: 0)
 640:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
 644:	0e030b13 	vmoveq.32	d3[0], r0
 648:	01110e1b 	tsteq	r1, fp, lsl lr
 64c:	17100612 			; <UNDEFINED> instruction: 0x17100612
 650:	24020000 	strcs	r0, [r2], #-0
 654:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 658:	000e030b 	andeq	r0, lr, fp, lsl #6
 65c:	00160300 	andseq	r0, r6, r0, lsl #6
 660:	0b3a0e03 	bleq	e83e74 <startup-0x1f17c18c>
 664:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 668:	24040000 	strcs	r0, [r4], #-0
 66c:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 670:	0008030b 	andeq	r0, r8, fp, lsl #6
 674:	01130500 	tsteq	r3, r0, lsl #10
 678:	0b3a0b0b 	bleq	e832ac <startup-0x1f17cd54>
 67c:	13010b3b 	movwne	r0, #6971	; 0x1b3b
 680:	0d060000 	stceq	0, cr0, [r6, #-0]
 684:	3a0e0300 	bcc	38128c <startup-0x1fc7ed74>
 688:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 68c:	000b3813 	andeq	r3, fp, r3, lsl r8
 690:	000d0700 	andeq	r0, sp, r0, lsl #14
 694:	0b3a0803 	bleq	e826a8 <startup-0x1f17d958>
 698:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 69c:	00000b38 	andeq	r0, r0, r8, lsr fp
 6a0:	49010108 	stmdbmi	r1, {r3, r8}
 6a4:	00130113 	andseq	r0, r3, r3, lsl r1
 6a8:	00210900 	eoreq	r0, r1, r0, lsl #18
 6ac:	0b2f1349 	bleq	bc53d8 <startup-0x1f43ac28>
 6b0:	2e0a0000 	cdpcs	0, 0, cr0, cr10, cr0, {0}
 6b4:	03193f01 	tsteq	r9, #1, 30
 6b8:	3b0b3a0e 	blcc	2ceef8 <startup-0x1fd31108>
 6bc:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
 6c0:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
 6c4:	97184006 	ldrls	r4, [r8, -r6]
 6c8:	13011942 	movwne	r1, #6466	; 0x1942
 6cc:	050b0000 	streq	r0, [fp, #-0]
 6d0:	3a0e0300 	bcc	3812d8 <startup-0x1fc7ed28>
 6d4:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 6d8:	00180213 	andseq	r0, r8, r3, lsl r2
 6dc:	000f0c00 	andeq	r0, pc, r0, lsl #24
 6e0:	13490b0b 	movtne	r0, #39691	; 0x9b0b
 6e4:	2e0d0000 	cdpcs	0, 0, cr0, cr13, cr0, {0}
 6e8:	03193f01 	tsteq	r9, #1, 30
 6ec:	3b0b3a0e 	blcc	2cef2c <startup-0x1fd310d4>
 6f0:	1119270b 	tstne	r9, fp, lsl #14
 6f4:	40061201 	andmi	r1, r6, r1, lsl #4
 6f8:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 6fc:	01000000 	mrseq	r0, (UNDEF: 0)
 700:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
 704:	0e030b13 	vmoveq.32	d3[0], r0
 708:	01110e1b 	tsteq	r1, fp, lsl lr
 70c:	17100612 			; <UNDEFINED> instruction: 0x17100612
 710:	24020000 	strcs	r0, [r2], #-0
 714:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 718:	000e030b 	andeq	r0, lr, fp, lsl #6
 71c:	00160300 	andseq	r0, r6, r0, lsl #6
 720:	0b3a0e03 	bleq	e83f34 <startup-0x1f17c0cc>
 724:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 728:	24040000 	strcs	r0, [r4], #-0
 72c:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 730:	0008030b 	andeq	r0, r8, fp, lsl #6
 734:	00350500 	eorseq	r0, r5, r0, lsl #10
 738:	00001349 	andeq	r1, r0, r9, asr #6
 73c:	03003406 	movweq	r3, #1030	; 0x406
 740:	3b0b3a0e 	blcc	2cef80 <startup-0x1fd31080>
 744:	3f134905 	svccc	0x00134905
 748:	00193c19 	andseq	r3, r9, r9, lsl ip
 74c:	00340700 	eorseq	r0, r4, r0, lsl #14
 750:	0b3a0e03 	bleq	e83f64 <startup-0x1f17c09c>
 754:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 758:	193c193f 	ldmdbne	ip!, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
 75c:	04080000 	streq	r0, [r8], #-0
 760:	0b0b3e01 	bleq	2cff6c <startup-0x1fd30094>
 764:	3a13490b 	bcc	4d2b98 <startup-0x1fb2d468>
 768:	01053b0b 	tsteq	r5, fp, lsl #22
 76c:	09000013 	stmdbeq	r0, {r0, r1, r4}
 770:	0e030028 	cdpeq	0, 0, cr0, cr3, cr8, {1}
 774:	00000b1c 	andeq	r0, r0, ip, lsl fp
 778:	0300280a 	movweq	r2, #2058	; 0x80a
 77c:	000b1c08 	andeq	r1, fp, r8, lsl #24
 780:	00160b00 	andseq	r0, r6, r0, lsl #22
 784:	0b3a0e03 	bleq	e83f98 <startup-0x1f17c068>
 788:	1349053b 	movtne	r0, #38203	; 0x953b
 78c:	130c0000 	movwne	r0, #49152	; 0xc000
 790:	3a0b0b01 	bcc	2c339c <startup-0x1fd3cc64>
 794:	01053b0b 	tsteq	r5, fp, lsl #22
 798:	0d000013 	stceq	0, cr0, [r0, #-76]	; 0xffffffb4
 79c:	0803000d 	stmdaeq	r3, {r0, r2, r3}
 7a0:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 7a4:	0b381349 	bleq	e054d0 <startup-0x1f1fab30>
 7a8:	0d0e0000 	stceq	0, cr0, [lr, #-0]
 7ac:	3a0e0300 	bcc	3813b4 <startup-0x1fc7ec4c>
 7b0:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 7b4:	000b3813 	andeq	r3, fp, r3, lsl r8
 7b8:	01130f00 	tsteq	r3, r0, lsl #30
 7bc:	0b3a0b0b 	bleq	e833f0 <startup-0x1f17cc10>
 7c0:	13010b3b 	movwne	r0, #6971	; 0x1b3b
 7c4:	0d100000 	ldceq	0, cr0, [r0, #-0]
 7c8:	3a0e0300 	bcc	3813d0 <startup-0x1fc7ec30>
 7cc:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 7d0:	000b3813 	andeq	r3, fp, r3, lsl r8
 7d4:	012e1100 			; <UNDEFINED> instruction: 0x012e1100
 7d8:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 7dc:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 7e0:	01111927 	tsteq	r1, r7, lsr #18
 7e4:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 7e8:	01194297 			; <UNDEFINED> instruction: 0x01194297
 7ec:	12000013 	andne	r0, r0, #19
 7f0:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
 7f4:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 7f8:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 7fc:	34130000 	ldrcc	r0, [r3], #-0
 800:	3a0e0300 	bcc	381408 <startup-0x1fc7ebf8>
 804:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 808:	00180213 	andseq	r0, r8, r3, lsl r2
 80c:	000f1400 	andeq	r1, pc, r0, lsl #8
 810:	13490b0b 	movtne	r0, #39691	; 0x9b0b
 814:	2e150000 	cdpcs	0, 1, cr0, cr5, cr0, {0}
 818:	03193f01 	tsteq	r9, #1, 30
 81c:	3b0b3a0e 	blcc	2cf05c <startup-0x1fd30fa4>
 820:	49192705 	ldmdbmi	r9, {r0, r2, r8, r9, sl, sp}
 824:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
 828:	97184006 	ldrls	r4, [r8, -r6]
 82c:	13011942 	movwne	r1, #6466	; 0x1942
 830:	2e160000 	cdpcs	0, 1, cr0, cr6, cr0, {0}
 834:	03193f01 	tsteq	r9, #1, 30
 838:	3b0b3a0e 	blcc	2cf078 <startup-0x1fd30f88>
 83c:	1119270b 	tstne	r9, fp, lsl #14
 840:	40061201 	andmi	r1, r6, r1, lsl #4
 844:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 848:	00001301 	andeq	r1, r0, r1, lsl #6
 84c:	03000517 	movweq	r0, #1303	; 0x517
 850:	3b0b3a0e 	blcc	2cf090 <startup-0x1fd30f70>
 854:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 858:	18000018 	stmdane	r0, {r3, r4}
 85c:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 860:	0b3b0b3a 	bleq	ec3550 <startup-0x1f13cab0>
 864:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 868:	2e190000 	cdpcs	0, 1, cr0, cr9, cr0, {0}
 86c:	03193f01 	tsteq	r9, #1, 30
 870:	3b0b3a0e 	blcc	2cf0b0 <startup-0x1fd30f50>
 874:	1119270b 	tstne	r9, fp, lsl #14
 878:	40061201 	andmi	r1, r6, r1, lsl #4
 87c:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 880:	Address 0x00000880 is out of bounds.


Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	00000024 	andeq	r0, r0, r4, lsr #32
   4:	00000002 	andeq	r0, r0, r2
   8:	00040000 	andeq	r0, r4, r0
   c:	00000000 	andeq	r0, r0, r0
  10:	20000010 	andcs	r0, r0, r0, lsl r0
  14:	000011ac 	andeq	r1, r0, ip, lsr #3
  18:	20000000 	andcs	r0, r0, r0
  1c:	0000000c 	andeq	r0, r0, ip
	...
  28:	0000001c 	andeq	r0, r0, ip, lsl r0
  2c:	17fe0002 	ldrbne	r0, [lr, r2]!
  30:	00040000 	andeq	r0, r4, r0
  34:	00000000 	andeq	r0, r0, r0
  38:	200011bc 			; <UNDEFINED> instruction: 0x200011bc
  3c:	0000050e 	andeq	r0, r0, lr, lsl #10
	...
  48:	0000001c 	andeq	r0, r0, ip, lsl r0
  4c:	1e250002 	cdpne	0, 2, cr0, cr5, cr2, {0}
  50:	00040000 	andeq	r0, r4, r0
  54:	00000000 	andeq	r0, r0, r0
  58:	200016cc 	andcs	r1, r0, ip, asr #13
  5c:	000001c4 	andeq	r0, r0, r4, asr #3
	...
  68:	0000001c 	andeq	r0, r0, ip, lsl r0
  6c:	236c0002 	cmncs	ip, #2
  70:	00040000 	andeq	r0, r4, r0
  74:	00000000 	andeq	r0, r0, r0
  78:	20001890 	mulcs	r0, r0, r8
  7c:	000000e8 	andeq	r0, r0, r8, ror #1
	...
  88:	0000001c 	andeq	r0, r0, ip, lsl r0
  8c:	24d90002 	ldrbcs	r0, [r9], #2
  90:	00040000 	andeq	r0, r4, r0
  94:	00000000 	andeq	r0, r0, r0
  98:	20001978 	andcs	r1, r0, r8, ror r9
  9c:	000009fe 	strdeq	r0, [r0], -lr
	...

Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
   0:	20000010 	andcs	r0, r0, r0, lsl r0
   4:	200011bc 			; <UNDEFINED> instruction: 0x200011bc
   8:	20000000 	andcs	r0, r0, r0
   c:	2000000c 	andcs	r0, r0, ip
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
   0:	000004d1 	ldrdeq	r0, [r0], -r1
   4:	01fd0002 	mvnseq	r0, r2
   8:	01020000 	mrseq	r0, (UNDEF: 2)
   c:	000d0efb 	strdeq	r0, [sp], -fp
  10:	01010101 	tsteq	r1, r1, lsl #2
  14:	01000000 	mrseq	r0, (UNDEF: 0)
  18:	2e010000 	cdpcs	0, 0, cr0, cr1, cr0, {0}
  1c:	696c2f2e 	stmdbvs	ip!, {r1, r2, r3, r5, r8, r9, sl, fp, sp}^
  20:	54532f62 	ldrbpl	r2, [r3], #-3938	; 0xfffff09e
  24:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
  28:	696c5f34 	stmdbvs	ip!, {r2, r4, r5, r8, r9, sl, fp, ip, lr}^
  2c:	4d432f62 	stclmi	15, cr2, [r3, #-392]	; 0xfffffe78
  30:	2f534953 	svccs	0x00534953
  34:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
  38:	00656475 	rsbeq	r6, r5, r5, ror r4
  3c:	6c2f2e2e 	stcvs	14, cr2, [pc], #-184	; ffffff8c <GPIO_Pins+0xdfffda78>
  40:	532f6269 			; <UNDEFINED> instruction: 0x532f6269
  44:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
  48:	6c5f3446 	cfldrdvs	mvd3, [pc], {70}	; 0x46
  4c:	532f6269 			; <UNDEFINED> instruction: 0x532f6269
  50:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
  54:	78783446 	ldmdavc	r8!, {r1, r2, r6, sl, ip, sp}^
  58:	6474535f 	ldrbtvs	r5, [r4], #-863	; 0xfffffca1
  5c:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
  60:	445f6870 	ldrbmi	r6, [pc], #-2160	; 68 <startup-0x1fffff98>
  64:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
  68:	72732f72 	rsbsvc	r2, r3, #456	; 0x1c8
  6c:	3a430063 	bcc	10c0200 <startup-0x1ef3fe00>
  70:	6573552f 	ldrbvs	r5, [r3, #-1327]!	; 0xfffffad1
  74:	412f7372 			; <UNDEFINED> instruction: 0x412f7372
  78:	746d6164 	strbtvc	r6, [sp], #-356	; 0xfffffe9c
  7c:	656e4f2f 	strbvs	r4, [lr, #-3887]!	; 0xfffff0d1
  80:	76697244 	strbtvc	r7, [r9], -r4, asr #4
  84:	6f442f65 	svcvs	0x00442f65
  88:	656d756b 	strbvs	r7, [sp, #-1387]!	; 0xfffffa95
  8c:	472f746e 	strmi	r7, [pc, -lr, ror #8]!
  90:	75487469 	strbvc	r7, [r8, #-1129]	; 0xfffffb97
  94:	41442f62 	cmpmi	r4, r2, ror #30
  98:	30393254 	eorscc	r3, r9, r4, asr r2
  9c:	72614c2d 	rsbvc	r4, r1, #11520	; 0x2d00
  a0:	7379736d 	cmnvc	r9, #-1275068415	; 0xb4000001
  a4:	2f6d6574 	svccs	0x006d6574
  a8:	2f646f6b 	svccs	0x00646f6b
  ac:	726f6f44 	rsbvc	r6, pc, #68, 30	; 0x110
  b0:	2f2e2e00 	svccs	0x002e2e00
  b4:	2f62696c 	svccs	0x0062696c
  b8:	334d5453 	movtcc	r5, #54355	; 0xd453
  bc:	5f344632 	svcpl	0x00344632
  c0:	2f62696c 	svccs	0x0062696c
  c4:	334d5453 	movtcc	r5, #54355	; 0xd453
  c8:	78344632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, lr}
  cc:	74535f78 	ldrbvc	r5, [r3], #-3960	; 0xfffff088
  d0:	72655064 	rsbvc	r5, r5, #100	; 0x64
  d4:	5f687069 	svcpl	0x00687069
  d8:	76697244 	strbtvc	r7, [r9], -r4, asr #4
  dc:	692f7265 	stmdbvs	pc!, {r0, r2, r5, r6, r9, ip, sp, lr}	; <UNPREDICTABLE>
  e0:	6300636e 	movwvs	r6, #878	; 0x36e
  e4:	73635c3a 	cmnvc	r3, #14848	; 0x3a00
  e8:	70706165 	rsbsvc	r6, r0, r5, ror #2
  ec:	646f635c 	strbtvs	r6, [pc], #-860	; f4 <startup-0x1fffff0c>
  f0:	74696c65 	strbtvc	r6, [r9], #-3173	; 0xfffff39b
  f4:	6f745c65 	svcvs	0x00745c65
  f8:	5c736c6f 	ldclpl	12, cr6, [r3], #-444	; 0xfffffe44
  fc:	2d636367 	stclcs	3, cr6, [r3, #-412]!	; 0xfffffe64
 100:	5c6d7261 	sfmpl	f7, 2, [sp], #-388	; 0xfffffe7c
 104:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
 108:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
 10c:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
 110:	6e695c69 	cdpvs	12, 6, cr5, cr9, cr9, {3}
 114:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
 118:	616d5c65 	cmnvs	sp, r5, ror #24
 11c:	6e696863 	cdpvs	8, 6, cr6, cr9, cr3, {3}
 120:	3a630065 	bcc	18c02bc <startup-0x1e73fd44>
 124:	6573635c 	ldrbvs	r6, [r3, #-860]!	; 0xfffffca4
 128:	5c707061 	ldclpl	0, cr7, [r0], #-388	; 0xfffffe7c
 12c:	65646f63 	strbvs	r6, [r4, #-3939]!	; 0xfffff09d
 130:	6574696c 	ldrbvs	r6, [r4, #-2412]!	; 0xfffff694
 134:	6f6f745c 	svcvs	0x006f745c
 138:	675c736c 	ldrbvs	r7, [ip, -ip, ror #6]
 13c:	612d6363 			; <UNDEFINED> instruction: 0x612d6363
 140:	615c6d72 	cmpvs	ip, r2, ror sp
 144:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
 148:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
 14c:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
 150:	636e695c 	cmnvs	lr, #92, 18	; 0x170000
 154:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
 158:	7379735c 	cmnvc	r9, #92, 6	; 0x70000001
 15c:	6f630000 	svcvs	0x00630000
 160:	635f6572 	cmpvs	pc, #478150656	; 0x1c800000
 164:	682e346d 	stmdavs	lr!, {r0, r2, r3, r5, r6, sl, ip, sp}
 168:	00000100 	andeq	r0, r0, r0, lsl #2
 16c:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
 170:	78346632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, sp, lr}
 174:	63725f78 	cmnvs	r2, #120, 30	; 0x1e0
 178:	00632e63 	rsbeq	r2, r3, r3, ror #28
 17c:	73000002 	movwvc	r0, #2
 180:	74726174 	ldrbtvc	r6, [r2], #-372	; 0xfffffe8c
 184:	632e7075 			; <UNDEFINED> instruction: 0x632e7075
 188:	00000300 	andeq	r0, r0, r0, lsl #6
 18c:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
 190:	78346632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, sp, lr}
 194:	00682e78 	rsbeq	r2, r8, r8, ror lr
 198:	5f000004 	svcpl	0x00000004
 19c:	61666564 	cmnvs	r6, r4, ror #10
 1a0:	5f746c75 	svcpl	0x00746c75
 1a4:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
 1a8:	00682e73 	rsbeq	r2, r8, r3, ror lr
 1ac:	5f000005 	svcpl	0x00000005
 1b0:	69647473 	stmdbvs	r4!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
 1b4:	682e746e 	stmdavs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
 1b8:	00000600 	andeq	r0, r0, r0, lsl #12
 1bc:	74737973 	ldrbtvc	r7, [r3], #-2419	; 0xfffff68d
 1c0:	735f6d65 	cmpvc	pc, #6464	; 0x1940
 1c4:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
 1c8:	78783466 	ldmdavc	r8!, {r1, r2, r5, r6, sl, ip, sp}^
 1cc:	0400682e 	streq	r6, [r0], #-2094	; 0xfffff7d2
 1d0:	74730000 	ldrbtvc	r0, [r3], #-0
 1d4:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
 1d8:	5f787834 	svcpl	0x00787834
 1dc:	2e636372 	mcrcs	3, 3, r6, cr3, cr2, {3}
 1e0:	00040068 	andeq	r0, r4, r8, rrx
 1e4:	6d747300 	ldclvs	3, cr7, [r4, #-0]
 1e8:	34663233 	strbtcc	r3, [r6], #-563	; 0xfffffdcd
 1ec:	675f7878 			; <UNDEFINED> instruction: 0x675f7878
 1f0:	2e6f6970 			; <UNDEFINED> instruction: 0x2e6f6970
 1f4:	00040068 	andeq	r0, r4, r8, rrx
 1f8:	61747300 	cmnvs	r4, r0, lsl #6
 1fc:	70757472 	rsbsvc	r7, r5, r2, ror r4
 200:	0300682e 	movweq	r6, #2094	; 0x82e
 204:	00000000 	andeq	r0, r0, r0
 208:	00100205 	andseq	r0, r0, r5, lsl #4
 20c:	dd032000 	stcle	0, cr2, [r3, #-0]
 210:	4b75010c 	blmi	1d40648 <startup-0x1e2bf9b8>
 214:	03d81ecd 	bicseq	r1, r8, #3280	; 0xcd0
 218:	4b9000fc 	blmi	fe400610 <GPIO_Pins+0xde3fe0fc>
 21c:	01040200 	mrseq	r0, R12_usr
 220:	30065806 	andcc	r5, r6, r6, lsl #16
 224:	3f3d674b 	svccc	0x003d674b
 228:	03020421 	movweq	r0, #9249	; 0x2421
 22c:	308273f7 	strdcc	r7, [r2], r7	; <UNPREDICTABLE>
 230:	40693f69 	rsbmi	r3, r9, r9, ror #30
 234:	3f694e4f 	svccc	0x00694e4f
 238:	e4170350 	ldr	r0, [r7], #-848	; 0xfffffcb0
 23c:	034b3f6b 	movteq	r3, #49003	; 0xbf6b
 240:	2f3d740f 	svccs	0x003d740f
 244:	0402003d 	streq	r0, [r2], #-61	; 0xffffffc3
 248:	02004002 	andeq	r4, r0, #2
 24c:	00670204 	rsbeq	r0, r7, r4, lsl #4
 250:	3d020402 	cfstrscc	mvf0, [r2, #-8]
 254:	01040200 	mrseq	r0, R12_usr
 258:	4c065806 	stcmi	8, cr5, [r6], {6}
 25c:	2f3e4e5a 	svccs	0x003e4e5a
 260:	674a0b03 	strbvs	r0, [sl, -r3, lsl #22]
 264:	694d3f32 	stmdbvs	sp, {r1, r4, r5, r8, r9, sl, fp, ip, sp}^
 268:	7415033d 	ldrvc	r0, [r5], #-829	; 0xfffffcc3
 26c:	14034b6a 	strne	r4, [r3], #-2922	; 0xfffff496
 270:	3f3f6c66 	svccc	0x003f6c66
 274:	03660b03 	cmneq	r6, #3072	; 0xc00
 278:	233d2079 	teqcs	sp, #121	; 0x79
 27c:	0f03243d 	svceq	0x0003243d
 280:	034b6a74 	movteq	r6, #47732	; 0xba74
 284:	7c6600de 	stclvc	0, cr0, [r6], #-888	; 0xfffffc88
 288:	033e2dbb 	teqeq	lr, #11968	; 0x2ec0
 28c:	4b69660e 	blmi	1a59acc <startup-0x1e5a6534>
 290:	5d661a03 	vstmdbpl	r6!, {s3-s5}
 294:	01850383 	orreq	r0, r5, r3, lsl #7
 298:	034b6974 	movteq	r6, #47476	; 0xb974
 29c:	6c6600e9 	stclvs	0, cr0, [r6], #-932	; 0xfffffc5c
 2a0:	740d03ad 	strvc	r0, [sp], #-941	; 0xfffffc53
 2a4:	0e034b69 	vmlseq.f64	d4, d3, d25
 2a8:	034b6966 	movteq	r6, #47462	; 0xb966
 2ac:	34596615 	ldrbcc	r6, [r9], #-1557	; 0xfffff9eb
 2b0:	41694d3f 	cmnmi	r9, pc, lsr sp
 2b4:	59901803 	ldmibpl	r0, {r0, r1, fp, ip}
 2b8:	694d3f34 	stmdbvs	sp, {r2, r4, r5, r8, r9, sl, fp, ip, sp}^
 2bc:	01b30341 			; <UNDEFINED> instruction: 0x01b30341
 2c0:	3f334b74 	svccc	0x00334b74
 2c4:	033d4d4d 	teqeq	sp, #4928	; 0x1340
 2c8:	672f660d 	strvs	r6, [pc, -sp, lsl #12]!
 2cc:	4b661703 	blmi	1985ee0 <startup-0x1e67a120>
 2d0:	4d4d3f33 	stclmi	15, cr3, [sp, #-204]	; 0xffffff34
 2d4:	660f033d 			; <UNDEFINED> instruction: 0x660f033d
 2d8:	4d3f334b 	ldcmi	3, cr3, [pc, #-300]!	; 1b4 <startup-0x1ffffe4c>
 2dc:	0f033d4d 	svceq	0x00033d4d
 2e0:	3f334b82 	svccc	0x00334b82
 2e4:	033d5b4d 	teqeq	sp, #78848	; 0x13400
 2e8:	c04b9024 	subgt	r9, fp, r4, lsr #32
 2ec:	223d775a 	eorscs	r7, sp, #23592960	; 0x1680000
 2f0:	5a67263d 	bpl	19c9bec <startup-0x1e636414>
 2f4:	83cbdb3f 	bichi	sp, fp, #64512	; 0xfc00
 2f8:	201b0383 	andscs	r0, fp, r3, lsl #7
 2fc:	3d59253d 	cfldr64cc	mvdx2, [r9, #-244]	; 0xffffff0c
 300:	3d676968 			; <UNDEFINED> instruction: 0x3d676968
 304:	3d676968 			; <UNDEFINED> instruction: 0x3d676968
 308:	3f036768 	svccc	0x00036768
 30c:	84334bba 	ldrthi	r4, [r3], #-3002	; 0xfffff446
 310:	40694d3f 	rsbmi	r4, r9, pc, lsr sp
 314:	9e0a0383 	cdpls	3, 0, cr0, cr10, cr3, {4}
 318:	0c034b6a 			; <UNDEFINED> instruction: 0x0c034b6a
 31c:	034b6966 	movteq	r6, #47462	; 0xb966
 320:	4e6601b8 	mcrmi	1, 3, r0, cr6, cr8, {5}
 324:	7416033d 	ldrvc	r0, [r6], #-829	; 0xfffffcc3
 328:	4d4d334b 	stclmi	3, cr3, [sp, #-300]	; 0xfffffed4
 32c:	14034b4d 	strne	r4, [r3], #-2893	; 0xfffff4b3
 330:	4d334b82 	vldmdbmi	r3!, {d4}
 334:	034b4d4d 	movteq	r4, #48461	; 0xbd4d
 338:	334b8211 	movtcc	r8, #45585	; 0xb211
 33c:	4b5b4d4d 	blmi	16d3878 <startup-0x1e92c788>
 340:	4b741003 	blmi	1d04354 <startup-0x1e2fbcac>
 344:	694d4d33 	stmdbvs	sp, {r0, r1, r4, r5, r8, sl, fp, lr}^
 348:	00d3034b 	sbcseq	r0, r3, fp, asr #6
 34c:	4d334b82 	vldmdbmi	r3!, {d4}
 350:	034b4d4d 	movteq	r4, #48461	; 0xbd4d
 354:	4e8200f0 	mcrmi	0, 4, r0, cr2, cr0, {7}
 358:	7425033d 	strtvc	r0, [r5], #-829	; 0xfffffcc3
 35c:	1e6c4c79 	mcrne	12, 3, r4, cr12, cr9, {3}
 360:	74130376 	ldrvc	r0, [r3], #-886	; 0xfffffc8a
 364:	1e6c4c79 	mcrne	12, 3, r4, cr12, cr9, {3}
 368:	74110376 	ldrvc	r0, [r1], #-886	; 0xfffffc8a
 36c:	1e6c4c79 	mcrne	12, 3, r4, cr12, cr9, {3}
 370:	742c0376 	strtvc	r0, [ip], #-886	; 0xfffffc8a
 374:	1e6c4c79 	mcrne	12, 3, r4, cr12, cr9, {3}
 378:	74270376 	strtvc	r0, [r7], #-886	; 0xfffffc8a
 37c:	1e6c4c79 	mcrne	12, 3, r4, cr12, cr9, {3}
 380:	741d0376 	ldrvc	r0, [sp], #-886	; 0xfffffc8a
 384:	1e6c4c79 	mcrne	12, 3, r4, cr12, cr9, {3}
 388:	74100376 	ldrvc	r0, [r0], #-886	; 0xfffffc8a
 38c:	1e6c4c79 	mcrne	12, 3, r4, cr12, cr9, {3}
 390:	740e0376 	strvc	r0, [lr], #-886	; 0xfffffc8a
 394:	1e6c4c79 	mcrne	12, 3, r4, cr12, cr9, {3}
 398:	74290376 	strtvc	r0, [r9], #-886	; 0xfffffc8a
 39c:	1e6c4c78 	mcrne	12, 3, r4, cr12, cr8, {3}
 3a0:	74230376 	strtvc	r0, [r3], #-886	; 0xfffffc8a
 3a4:	1e6c4c78 	mcrne	12, 3, r4, cr12, cr8, {3}
 3a8:	74250376 	strtvc	r0, [r5], #-886	; 0xfffffc8a
 3ac:	1e6c4c78 	mcrne	12, 3, r4, cr12, cr8, {3}
 3b0:	74140376 	ldrvc	r0, [r4], #-886	; 0xfffffc8a
 3b4:	1e6c4c78 	mcrne	12, 3, r4, cr12, cr8, {3}
 3b8:	74120376 	ldrvc	r0, [r2], #-886	; 0xfffffc8a
 3bc:	1e6c4c78 	mcrne	12, 3, r4, cr12, cr8, {3}
 3c0:	742d0376 	strtvc	r0, [sp], #-886	; 0xfffffc8a
 3c4:	1e6c4c78 	mcrne	12, 3, r4, cr12, cr8, {3}
 3c8:	74280376 	strtvc	r0, [r8], #-886	; 0xfffffc8a
 3cc:	1e6c4c78 	mcrne	12, 3, r4, cr12, cr8, {3}
 3d0:	740c0376 	strvc	r0, [ip], #-886	; 0xfffffc8a
 3d4:	1e6c4c6a 	cdpne	12, 6, cr4, cr12, cr10, {3}
 3d8:	02ac0368 	adceq	r0, ip, #104, 6	; 0xa0000001
 3dc:	974d9474 	smlsldxls	r9, sp, r4, r4
 3e0:	1703ae1e 	smladne	r3, lr, lr, sl
 3e4:	2f2f6766 	svccs	0x002f6766
 3e8:	4c3e5950 			; <UNDEFINED> instruction: 0x4c3e5950
 3ec:	59404e3e 	stmdbpl	r0, {r1, r2, r3, r4, r5, r9, sl, fp, lr}^
 3f0:	3d4d5c76 	stclcc	12, cr5, [sp, #-472]	; 0xfffffe28
 3f4:	30660a03 	rsbcc	r0, r6, r3, lsl #20
 3f8:	58110375 	ldmdapl	r1, {r0, r2, r4, r5, r6, r8, r9}
 3fc:	5c685067 	stclpl	0, cr5, [r8], #-412	; 0xfffffe64
 400:	11033d4d 	tstne	r3, sp, asr #26
 404:	044b6c66 	strbeq	r6, [fp], #-3174	; 0xfffff39a
 408:	67b60303 	ldrvs	r0, [r6, r3, lsl #6]!
 40c:	3e214b66 	vnmulcc.f64	d4, d1, d22
 410:	040200ae 	streq	r0, [r2], #-174	; 0xffffff52
 414:	02005402 	andeq	r5, r0, #33554432	; 0x2000000
 418:	3c060104 	stfccs	f0, [r6], {4}
 41c:	09033b06 	stmdbeq	r3, {r1, r2, r8, r9, fp, ip, sp}
 420:	2f59864a 	svccs	0x0059864a
 424:	4b3daf3e 	blmi	f6c124 <startup-0x1f093edc>
 428:	3d3d3d3d 	ldccc	13, cr3, [sp, #-244]!	; 0xffffff0c
 42c:	003d7583 	eorseq	r7, sp, r3, lsl #11
 430:	03020402 	movweq	r0, #9218	; 0x2402
 434:	02003c72 	andeq	r3, r0, #29184	; 0x7200
 438:	3c060104 	stfccs	f0, [r6], {4}
 43c:	3c120306 	ldccc	3, cr0, [r2], {6}
 440:	4b4b4094 	blmi	12d0698 <startup-0x1ed2f968>
 444:	3d3d3d3d 	ldccc	13, cr3, [sp, #-244]!	; 0xffffff0c
 448:	3d3d4b69 	fldmdbxcc	sp!, {d4-d55}	;@ Deprecated
 44c:	2fa4673d 	svccs	0x00a4673d
 450:	3e3e5a59 			; <UNDEFINED> instruction: 0x3e3e5a59
 454:	9e17036c 	cdpls	3, 1, cr0, cr7, cr12, {3}
 458:	002f2f3d 	eoreq	r2, pc, sp, lsr pc	; <UNPREDICTABLE>
 45c:	06010402 	streq	r0, [r1], -r2, lsl #8
 460:	11030620 	tstne	r3, r0, lsr #12
 464:	003e2f58 	eorseq	r2, lr, r8, asr pc
 468:	06010402 	streq	r0, [r1], -r2, lsl #8
 46c:	d73d06ac 	ldrle	r0, [sp, -ip, lsr #13]!
 470:	9f9f9fe5 	svcls	0x009f9fe5
 474:	02040200 	andeq	r0, r4, #0, 4
 478:	003c7803 	eorseq	r7, ip, r3, lsl #16
 47c:	06010402 	streq	r0, [r1], -r2, lsl #8
 480:	1d03063c 	stcne	6, cr0, [r3, #-240]	; 0xffffff10
 484:	14083e3c 	strne	r3, [r8], #-3644	; 0xfffff1c4
 488:	bcae5d08 	stclt	13, cr5, [lr], #32
 48c:	003e4f08 	eorseq	r4, lr, r8, lsl #30
 490:	06010402 	streq	r0, [r1], -r2, lsl #8
 494:	a00806ba 			; <UNDEFINED> instruction: 0xa00806ba
 498:	0200e6f7 	andeq	lr, r0, #258998272	; 0xf700000
 49c:	ba060104 	blt	1808b4 <startup-0x1fe7f74c>
 4a0:	02040200 	andeq	r0, r4, #0, 4
 4a4:	ba750306 	blt	1d410c4 <startup-0x1e2bef3c>
 4a8:	01040200 	mrseq	r0, R12_usr
 4ac:	02003c06 	andeq	r3, r0, #1536	; 0x600
 4b0:	03060204 	movweq	r0, #25092	; 0x6204
 4b4:	02003c6e 	andeq	r3, r0, #28160	; 0x6e00
 4b8:	3c060104 	stfccs	f0, [r6], {4}
 4bc:	0010024a 	andseq	r0, r0, sl, asr #4
 4c0:	03040101 	movweq	r0, #16641	; 0x4101
 4c4:	00020500 	andeq	r0, r2, r0, lsl #10
 4c8:	03200000 	nopeq	{0}	; <UNPREDICTABLE>
 4cc:	5e13010c 	mufpls	f0, f3, #4.0
 4d0:	01000302 	tsteq	r0, r2, lsl #6
 4d4:	0002b501 	andeq	fp, r2, r1, lsl #10
 4d8:	c9000200 	stmdbgt	r0, {r9}
 4dc:	02000001 	andeq	r0, r0, #1
 4e0:	0d0efb01 	vstreq	d15, [lr, #-4]
 4e4:	01010100 	mrseq	r0, (UNDEF: 17)
 4e8:	00000001 	andeq	r0, r0, r1
 4ec:	01000001 	tsteq	r0, r1
 4f0:	552f3a43 	strpl	r3, [pc, #-2627]!	; fffffab5 <GPIO_Pins+0xdfffd5a1>
 4f4:	73726573 	cmnvc	r2, #482344960	; 0x1cc00000
 4f8:	6164412f 	cmnvs	r4, pc, lsr #2
 4fc:	4f2f746d 	svcmi	0x002f746d
 500:	7244656e 	subvc	r6, r4, #461373440	; 0x1b800000
 504:	2f657669 	svccs	0x00657669
 508:	756b6f44 	strbvc	r6, [fp, #-3908]!	; 0xfffff0bc
 50c:	746e656d 	strbtvc	r6, [lr], #-1389	; 0xfffffa93
 510:	7469472f 	strbtvc	r4, [r9], #-1839	; 0xfffff8d1
 514:	2f627548 	svccs	0x00627548
 518:	32544144 	subscc	r4, r4, #68, 2
 51c:	4c2d3039 	stcmi	0, cr3, [sp], #-228	; 0xffffff1c
 520:	736d7261 	cmnvc	sp, #268435462	; 0x10000006
 524:	65747379 	ldrbvs	r7, [r4, #-889]!	; 0xfffffc87
 528:	6f6b2f6d 	svcvs	0x006b2f6d
 52c:	696c2f64 	stmdbvs	ip!, {r2, r5, r6, r8, r9, sl, fp, sp}^
 530:	54532f62 	ldrbpl	r2, [r3], #-3938	; 0xfffff09e
 534:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
 538:	696c5f34 	stmdbvs	ip!, {r2, r4, r5, r8, r9, sl, fp, ip, lr}^
 53c:	54532f62 	ldrbpl	r2, [r3], #-3938	; 0xfffff09e
 540:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
 544:	5f787834 	svcpl	0x00787834
 548:	50647453 	rsbpl	r7, r4, r3, asr r4
 54c:	70697265 	rsbvc	r7, r9, r5, ror #4
 550:	72445f68 	subvc	r5, r4, #104, 30	; 0x1a0
 554:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
 558:	6372732f 	cmnvs	r2, #-1140850688	; 0xbc000000
 55c:	5c3a6300 	ldcpl	3, cr6, [sl], #-0
 560:	61657363 	cmnvs	r5, r3, ror #6
 564:	635c7070 	cmpvs	ip, #112	; 0x70
 568:	6c65646f 	cfstrdvs	mvd6, [r5], #-444	; 0xfffffe44
 56c:	5c657469 	cfstrdpl	mvd7, [r5], #-420	; 0xfffffe5c
 570:	6c6f6f74 	stclvs	15, cr6, [pc], #-464	; 3a8 <startup-0x1ffffc58>
 574:	63675c73 	cmnvs	r7, #29440	; 0x7300
 578:	72612d63 	rsbvc	r2, r1, #6336	; 0x18c0
 57c:	72615c6d 	rsbvc	r5, r1, #27904	; 0x6d00
 580:	6f6e2d6d 	svcvs	0x006e2d6d
 584:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
 588:	5c696261 	sfmpl	f6, 2, [r9], #-388	; 0xfffffe7c
 58c:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
 590:	5c656475 	cfstrdpl	mvd6, [r5], #-468	; 0xfffffe2c
 594:	6863616d 	stmdavs	r3!, {r0, r2, r3, r5, r6, r8, sp, lr}^
 598:	00656e69 	rsbeq	r6, r5, r9, ror #28
 59c:	635c3a63 	cmpvs	ip, #405504	; 0x63000
 5a0:	70616573 	rsbvc	r6, r1, r3, ror r5
 5a4:	6f635c70 	svcvs	0x00635c70
 5a8:	696c6564 	stmdbvs	ip!, {r2, r5, r6, r8, sl, sp, lr}^
 5ac:	745c6574 	ldrbvc	r6, [ip], #-1396	; 0xfffffa8c
 5b0:	736c6f6f 	cmnvc	ip, #444	; 0x1bc
 5b4:	6363675c 	cmnvs	r3, #92, 14	; 0x1700000
 5b8:	6d72612d 	ldfvse	f6, [r2, #-180]!	; 0xffffff4c
 5bc:	6d72615c 	ldfvse	f6, [r2, #-368]!	; 0xfffffe90
 5c0:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
 5c4:	61652d65 	cmnvs	r5, r5, ror #26
 5c8:	695c6962 	ldmdbvs	ip, {r1, r5, r6, r8, fp, sp, lr}^
 5cc:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
 5d0:	735c6564 	cmpvc	ip, #100, 10	; 0x19000000
 5d4:	2e007379 	mcrcs	3, 0, r7, cr0, cr9, {3}
 5d8:	696c2f2e 	stmdbvs	ip!, {r1, r2, r3, r5, r8, r9, sl, fp, sp}^
 5dc:	54532f62 	ldrbpl	r2, [r3], #-3938	; 0xfffff09e
 5e0:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
 5e4:	696c5f34 	stmdbvs	ip!, {r2, r4, r5, r8, r9, sl, fp, ip, lr}^
 5e8:	4d432f62 	stclmi	15, cr2, [r3, #-392]	; 0xfffffe78
 5ec:	2f534953 	svccs	0x00534953
 5f0:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
 5f4:	00656475 	rsbeq	r6, r5, r5, ror r4
 5f8:	6c2f2e2e 	stcvs	14, cr2, [pc], #-184	; 548 <startup-0x1ffffab8>
 5fc:	532f6269 			; <UNDEFINED> instruction: 0x532f6269
 600:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
 604:	6c5f3446 	cfldrdvs	mvd3, [pc], {70}	; 0x46
 608:	532f6269 			; <UNDEFINED> instruction: 0x532f6269
 60c:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
 610:	78783446 	ldmdavc	r8!, {r1, r2, r6, sl, ip, sp}^
 614:	6474535f 	ldrbtvs	r5, [r4], #-863	; 0xfffffca1
 618:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
 61c:	445f6870 	ldrbmi	r6, [pc], #-2160	; 624 <startup-0x1ffff9dc>
 620:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
 624:	6e692f72 	mcrvs	15, 3, r2, cr9, cr2, {3}
 628:	73000063 	movwvc	r0, #99	; 0x63
 62c:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
 630:	78783466 	ldmdavc	r8!, {r1, r2, r5, r6, sl, ip, sp}^
 634:	6970675f 	ldmdbvs	r0!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, sp, lr}^
 638:	00632e6f 	rsbeq	r2, r3, pc, ror #28
 63c:	5f000001 	svcpl	0x00000001
 640:	61666564 	cmnvs	r6, r4, ror #10
 644:	5f746c75 	svcpl	0x00746c75
 648:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
 64c:	00682e73 	rsbeq	r2, r8, r3, ror lr
 650:	5f000002 	svcpl	0x00000002
 654:	69647473 	stmdbvs	r4!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
 658:	682e746e 	stmdavs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
 65c:	00000300 	andeq	r0, r0, r0, lsl #6
 660:	65726f63 	ldrbvs	r6, [r2, #-3939]!	; 0xfffff09d
 664:	346d635f 	strbtcc	r6, [sp], #-863	; 0xfffffca1
 668:	0400682e 	streq	r6, [r0], #-2094	; 0xfffff7d2
 66c:	79730000 	ldmdbvc	r3!, {}^	; <UNPREDICTABLE>
 670:	6d657473 	cfstrdvs	mvd7, [r5, #-460]!	; 0xfffffe34
 674:	6d74735f 	ldclvs	3, cr7, [r4, #-380]!	; 0xfffffe84
 678:	34663233 	strbtcc	r3, [r6], #-563	; 0xfffffdcd
 67c:	682e7878 	stmdavs	lr!, {r3, r4, r5, r6, fp, ip, sp, lr}
 680:	00000500 	andeq	r0, r0, r0, lsl #10
 684:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
 688:	78346632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, sp, lr}
 68c:	00682e78 	rsbeq	r2, r8, r8, ror lr
 690:	73000005 	movwvc	r0, #5
 694:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
 698:	78783466 	ldmdavc	r8!, {r1, r2, r5, r6, sl, ip, sp}^
 69c:	6970675f 	ldmdbvs	r0!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, sp, lr}^
 6a0:	00682e6f 	rsbeq	r2, r8, pc, ror #28
 6a4:	00000005 	andeq	r0, r0, r5
 6a8:	bc020500 	cfstr32lt	mvfx0, [r2], {-0}
 6ac:	03200011 			; <UNDEFINED> instruction: 0x03200011
 6b0:	4e0100ff 	mcrmi	0, 0, r0, cr1, cr15, {7}
 6b4:	38034b4c 	stmdacc	r3, {r2, r3, r6, r8, r9, fp, lr}
 6b8:	204a034a 	subcs	r0, sl, sl, asr #6
 6bc:	33034b4c 	movwcc	r4, #15180	; 0x3b4c
 6c0:	204f034a 	subcs	r0, pc, sl, asr #6
 6c4:	2e034b4c 	vmlscs.f64	d4, d3, d12
 6c8:	2054034a 	subscs	r0, r4, sl, asr #6
 6cc:	29034b4c 	stmdbcs	r3, {r2, r3, r6, r8, r9, fp, lr}
 6d0:	2059034a 	subscs	r0, r9, sl, asr #6
 6d4:	24034b4c 	strcs	r4, [r3], #-2892	; 0xfffff4b4
 6d8:	205e034a 	subscs	r0, lr, sl, asr #6
 6dc:	1f034b4c 	svcne	0x00034b4c
 6e0:	2063034a 	rsbcs	r0, r3, sl, asr #6
 6e4:	1a034b4c 	bne	d341c <startup-0x1ff2cbe4>
 6e8:	2068034a 	rsbcs	r0, r8, sl, asr #6
 6ec:	15034b4c 	strne	r4, [r3, #-2892]	; 0xfffff4b4
 6f0:	206e034a 	rsbcs	r0, lr, sl, asr #6
 6f4:	0f03674c 	svceq	0x0003674c
 6f8:	20730366 	rsbscs	r0, r3, r6, ror #6
 6fc:	0a03674c 	beq	da434 <startup-0x1ff25bcc>
 700:	207a0366 	rsbscs	r0, sl, r6, ror #6
 704:	0369674c 	cmneq	r9, #76, 14	; 0x1300000
 708:	5990080c 	ldmibpl	r0, {r2, r3, fp}
 70c:	3e660a03 	vmulcc.f32	s1, s12, s6
 710:	ad4c5a5a 	vstrge	s11, [ip, #-360]	; 0xfffffe98
 714:	040200bc 	streq	r0, [r2], #-188	; 0xffffff44
 718:	064a0601 	strbeq	r0, [sl], -r1, lsl #12
 71c:	adc0ad50 	stclge	13, cr10, [r0, #320]	; 0x140
 720:	0200bbcc 	andeq	fp, r0, #204, 22	; 0x33000
 724:	62030204 	andvs	r0, r3, #4, 4	; 0x40000000
 728:	040200ba 	streq	r0, [r2], #-186	; 0xffffff46
 72c:	063c0601 	ldrteq	r0, [ip], -r1, lsl #12
 730:	523c2103 	eorspl	r2, ip, #-1073741824	; 0xc0000000
 734:	3d3d3d4c 	ldccc	13, cr3, [sp, #-304]!	; 0xfffffed0
 738:	10033d3d 	andne	r3, r3, sp, lsr sp
 73c:	5a427574 	bpl	109dd14 <startup-0x1ef622ec>
 740:	3e3e4c3e 	mrccc	12, 1, r4, cr14, cr14, {1}
 744:	4a1c033d 	bmi	701440 <startup-0x1f8febc0>
 748:	5c685075 	stclpl	0, cr5, [r8], #-468	; 0xfffffe2c
 74c:	0a033d4c 	beq	cfc84 <startup-0x1ff3037c>
 750:	033d4e4a 	teqeq	sp, #1184	; 0x4a0
 754:	50754a0c 	rsbspl	r4, r5, ip, lsl #20
 758:	3d4c5c68 	stclcc	12, cr5, [ip, #-416]	; 0xfffffe60
 75c:	4e4a0a03 	vmlami.f32	s1, s20, s6
 760:	4a0f033d 	bmi	3c145c <startup-0x1fc3eba4>
 764:	0f034b79 	svceq	0x00034b79
 768:	034b794a 	movteq	r7, #47434	; 0xb94a
 76c:	4cc04a10 	vstmiami	r0, {s9-s24}
 770:	034c1e50 	movteq	r1, #52816	; 0xce50
 774:	4b784a0b 	blmi	1e12fa8 <startup-0x1e1ed058>
 778:	784a0b03 	stmdavc	sl, {r0, r1, r8, r9, fp}^
 77c:	00ce0375 	sbceq	r0, lr, r5, ror r3
 780:	352fbb4a 	strcc	fp, [pc, #-2890]!	; fffffc3e <GPIO_Pins+0xdfffd72a>
 784:	bbc9089f 	bllt	ff242a08 <GPIO_Pins+0xdf2404f4>
 788:	0004029f 	muleq	r4, pc, r2	; <UNPREDICTABLE>
 78c:	01fa0101 	mvnseq	r0, r1, lsl #2
 790:	00020000 	andeq	r0, r2, r0
 794:	000001b5 			; <UNDEFINED> instruction: 0x000001b5
 798:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
 79c:	0101000d 	tsteq	r1, sp
 7a0:	00000101 	andeq	r0, r0, r1, lsl #2
 7a4:	00000100 	andeq	r0, r0, r0, lsl #2
 7a8:	2f3a4301 	svccs	0x003a4301
 7ac:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
 7b0:	64412f73 	strbvs	r2, [r1], #-3955	; 0xfffff08d
 7b4:	2f746d61 	svccs	0x00746d61
 7b8:	44656e4f 	strbtmi	r6, [r5], #-3663	; 0xfffff1b1
 7bc:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
 7c0:	6b6f442f 	blvs	1bd1884 <startup-0x1e42e77c>
 7c4:	6e656d75 	mcrvs	13, 3, r6, cr5, cr5, {3}
 7c8:	69472f74 	stmdbvs	r7, {r2, r4, r5, r6, r8, r9, sl, fp, sp}^
 7cc:	62754874 	rsbsvs	r4, r5, #116, 16	; 0x740000
 7d0:	5441442f 	strbpl	r4, [r1], #-1071	; 0xfffffbd1
 7d4:	2d303932 			; <UNDEFINED> instruction: 0x2d303932
 7d8:	6d72614c 	ldfvse	f6, [r2, #-304]!	; 0xfffffed0
 7dc:	74737973 	ldrbtvc	r7, [r3], #-2419	; 0xfffff68d
 7e0:	6b2f6d65 	blvs	bdbd7c <startup-0x1f424284>
 7e4:	6c2f646f 	cfstrsvs	mvf6, [pc], #-444	; 630 <startup-0x1ffff9d0>
 7e8:	532f6269 			; <UNDEFINED> instruction: 0x532f6269
 7ec:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
 7f0:	6c5f3446 	cfldrdvs	mvd3, [pc], {70}	; 0x46
 7f4:	532f6269 			; <UNDEFINED> instruction: 0x532f6269
 7f8:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
 7fc:	78783446 	ldmdavc	r8!, {r1, r2, r6, sl, ip, sp}^
 800:	6474535f 	ldrbtvs	r5, [r4], #-863	; 0xfffffca1
 804:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
 808:	445f6870 	ldrbmi	r6, [pc], #-2160	; 810 <startup-0x1ffff7f0>
 80c:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
 810:	72732f72 	rsbsvc	r2, r3, #456	; 0x1c8
 814:	3a630063 	bcc	18c09a8 <startup-0x1e73f658>
 818:	6573635c 	ldrbvs	r6, [r3, #-860]!	; 0xfffffca4
 81c:	5c707061 	ldclpl	0, cr7, [r0], #-388	; 0xfffffe7c
 820:	65646f63 	strbvs	r6, [r4, #-3939]!	; 0xfffff09d
 824:	6574696c 	ldrbvs	r6, [r4, #-2412]!	; 0xfffff694
 828:	6f6f745c 	svcvs	0x006f745c
 82c:	675c736c 	ldrbvs	r7, [ip, -ip, ror #6]
 830:	612d6363 			; <UNDEFINED> instruction: 0x612d6363
 834:	615c6d72 	cmpvs	ip, r2, ror sp
 838:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
 83c:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
 840:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
 844:	636e695c 	cmnvs	lr, #92, 18	; 0x170000
 848:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
 84c:	63616d5c 	cmnvs	r1, #92, 26	; 0x1700
 850:	656e6968 	strbvs	r6, [lr, #-2408]!	; 0xfffff698
 854:	5c3a6300 	ldcpl	3, cr6, [sl], #-0
 858:	61657363 	cmnvs	r5, r3, ror #6
 85c:	635c7070 	cmpvs	ip, #112	; 0x70
 860:	6c65646f 	cfstrdvs	mvd6, [r5], #-444	; 0xfffffe44
 864:	5c657469 	cfstrdpl	mvd7, [r5], #-420	; 0xfffffe5c
 868:	6c6f6f74 	stclvs	15, cr6, [pc], #-464	; 6a0 <startup-0x1ffff960>
 86c:	63675c73 	cmnvs	r7, #29440	; 0x7300
 870:	72612d63 	rsbvc	r2, r1, #6336	; 0x18c0
 874:	72615c6d 	rsbvc	r5, r1, #27904	; 0x6d00
 878:	6f6e2d6d 	svcvs	0x006e2d6d
 87c:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
 880:	5c696261 	sfmpl	f6, 2, [r9], #-388	; 0xfffffe7c
 884:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
 888:	5c656475 	cfstrdpl	mvd6, [r5], #-468	; 0xfffffe2c
 88c:	00737973 	rsbseq	r7, r3, r3, ror r9
 890:	6c2f2e2e 	stcvs	14, cr2, [pc], #-184	; 7e0 <startup-0x1ffff820>
 894:	532f6269 			; <UNDEFINED> instruction: 0x532f6269
 898:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
 89c:	6c5f3446 	cfldrdvs	mvd3, [pc], {70}	; 0x46
 8a0:	432f6269 			; <UNDEFINED> instruction: 0x432f6269
 8a4:	5349534d 	movtpl	r5, #37709	; 0x934d
 8a8:	636e692f 	cmnvs	lr, #770048	; 0xbc000
 8ac:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
 8b0:	2f2e2e00 	svccs	0x002e2e00
 8b4:	2f62696c 	svccs	0x0062696c
 8b8:	334d5453 	movtcc	r5, #54355	; 0xd453
 8bc:	5f344632 	svcpl	0x00344632
 8c0:	2f62696c 	svccs	0x0062696c
 8c4:	334d5453 	movtcc	r5, #54355	; 0xd453
 8c8:	78344632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, lr}
 8cc:	74535f78 	ldrbvc	r5, [r3], #-3960	; 0xfffff088
 8d0:	72655064 	rsbvc	r5, r5, #100	; 0x64
 8d4:	5f687069 	svcpl	0x00687069
 8d8:	76697244 	strbtvc	r7, [r9], -r4, asr #4
 8dc:	692f7265 	stmdbvs	pc!, {r0, r2, r5, r6, r9, ip, sp, lr}	; <UNPREDICTABLE>
 8e0:	0000636e 	andeq	r6, r0, lr, ror #6
 8e4:	6373696d 	cmnvs	r3, #1785856	; 0x1b4000
 8e8:	0100632e 	tsteq	r0, lr, lsr #6
 8ec:	645f0000 	ldrbvs	r0, [pc], #-0	; 8f4 <startup-0x1ffff70c>
 8f0:	75616665 	strbvc	r6, [r1, #-1637]!	; 0xfffff99b
 8f4:	745f746c 	ldrbvc	r7, [pc], #-1132	; 8fc <startup-0x1ffff704>
 8f8:	73657079 	cmnvc	r5, #121	; 0x79
 8fc:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
 900:	735f0000 	cmpvc	pc, #0
 904:	6e696474 	mcrvs	4, 3, r6, cr9, cr4, {3}
 908:	00682e74 	rsbeq	r2, r8, r4, ror lr
 90c:	63000003 	movwvs	r0, #3
 910:	5f65726f 	svcpl	0x0065726f
 914:	2e346d63 	cdpcs	13, 3, cr6, cr4, cr3, {3}
 918:	00040068 	andeq	r0, r4, r8, rrx
 91c:	73797300 	cmnvc	r9, #0, 6
 920:	5f6d6574 	svcpl	0x006d6574
 924:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
 928:	78346632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, sp, lr}
 92c:	00682e78 	rsbeq	r2, r8, r8, ror lr
 930:	73000005 	movwvc	r0, #5
 934:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
 938:	78783466 	ldmdavc	r8!, {r1, r2, r5, r6, sl, ip, sp}^
 93c:	0500682e 	streq	r6, [r0, #-2094]	; 0xfffff7d2
 940:	696d0000 	stmdbvs	sp!, {}^	; <UNPREDICTABLE>
 944:	682e6373 	stmdavs	lr!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}
 948:	00000500 	andeq	r0, r0, r0, lsl #10
 94c:	02050000 	andeq	r0, r5, #0
 950:	200016cc 	andcs	r1, r0, ip, asr #13
 954:	0100f603 	tsteq	r0, r3, lsl #12	; <UNPREDICTABLE>
 958:	0c03594f 			; <UNDEFINED> instruction: 0x0c03594f
 95c:	4dc14b90 	vstrmi	d20, [r1, #576]	; 0x240
 960:	9192759f 			; <UNDEFINED> instruction: 0x9192759f
 964:	57b05aae 	ldrpl	r5, [r0, lr, lsr #21]!
 968:	09032d67 	stmdbeq	r3, {r0, r1, r2, r5, r6, r8, sl, fp, sp}
 96c:	67571e2e 	ldrbvs	r1, [r7, -lr, lsr #28]
 970:	0c034d2d 	stceq	13, cr4, [r3], {45}	; 0x2d
 974:	03835d90 	orreq	r5, r3, #144, 26	; 0x2400
 978:	4c95900d 	ldcmi	0, cr9, [r5], {13}
 97c:	03841e7a 	orreq	r1, r4, #1952	; 0x7a0
 980:	3e4d740b 	cdpcc	4, 4, cr7, cr13, cr11, {0}
 984:	02681e6c 	rsbeq	r1, r8, #108, 28	; 0x6c0
 988:	01010006 	tsteq	r1, r6
 98c:	00000131 	andeq	r0, r0, r1, lsr r1
 990:	01080002 	tsteq	r8, r2
 994:	01020000 	mrseq	r0, (UNDEF: 2)
 998:	000d0efb 	strdeq	r0, [sp], -fp
 99c:	01010101 	tsteq	r1, r1, lsl #2
 9a0:	01000000 	mrseq	r0, (UNDEF: 0)
 9a4:	43010000 	movwmi	r0, #4096	; 0x1000
 9a8:	73552f3a 	cmpvc	r5, #58, 30	; 0xe8
 9ac:	2f737265 	svccs	0x00737265
 9b0:	6d616441 	cfstrdvs	mvd6, [r1, #-260]!	; 0xfffffefc
 9b4:	6e4f2f74 	mcrvs	15, 2, r2, cr15, cr4, {3}
 9b8:	69724465 	ldmdbvs	r2!, {r0, r2, r5, r6, sl, lr}^
 9bc:	442f6576 	strtmi	r6, [pc], #-1398	; 9c4 <startup-0x1ffff63c>
 9c0:	6d756b6f 	fldmdbxvs	r5!, {d22-d76}	;@ Deprecated
 9c4:	2f746e65 	svccs	0x00746e65
 9c8:	48746947 	ldmdami	r4!, {r0, r1, r2, r6, r8, fp, sp, lr}^
 9cc:	442f6275 	strtmi	r6, [pc], #-629	; 9d4 <startup-0x1ffff62c>
 9d0:	39325441 	ldmdbcc	r2!, {r0, r6, sl, ip, lr}
 9d4:	614c2d30 	cmpvs	ip, r0, lsr sp
 9d8:	79736d72 	ldmdbvc	r3!, {r1, r4, r5, r6, r8, sl, fp, sp, lr}^
 9dc:	6d657473 	cfstrdvs	mvd7, [r5, #-460]!	; 0xfffffe34
 9e0:	646f6b2f 	strbtvs	r6, [pc], #-2863	; 9e8 <startup-0x1ffff618>
 9e4:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
 9e8:	5c3a6300 	ldcpl	3, cr6, [sl], #-0
 9ec:	61657363 	cmnvs	r5, r3, ror #6
 9f0:	635c7070 	cmpvs	ip, #112	; 0x70
 9f4:	6c65646f 	cfstrdvs	mvd6, [r5], #-444	; 0xfffffe44
 9f8:	5c657469 	cfstrdpl	mvd7, [r5], #-420	; 0xfffffe5c
 9fc:	6c6f6f74 	stclvs	15, cr6, [pc], #-464	; 834 <startup-0x1ffff7cc>
 a00:	63675c73 	cmnvs	r7, #29440	; 0x7300
 a04:	72612d63 	rsbvc	r2, r1, #6336	; 0x18c0
 a08:	72615c6d 	rsbvc	r5, r1, #27904	; 0x6d00
 a0c:	6f6e2d6d 	svcvs	0x006e2d6d
 a10:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
 a14:	5c696261 	sfmpl	f6, 2, [r9], #-388	; 0xfffffe7c
 a18:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
 a1c:	5c656475 	cfstrdpl	mvd6, [r5], #-468	; 0xfffffe2c
 a20:	6863616d 	stmdavs	r3!, {r0, r2, r3, r5, r6, r8, sp, lr}^
 a24:	00656e69 	rsbeq	r6, r5, r9, ror #28
 a28:	635c3a63 	cmpvs	ip, #405504	; 0x63000
 a2c:	70616573 	rsbvc	r6, r1, r3, ror r5
 a30:	6f635c70 	svcvs	0x00635c70
 a34:	696c6564 	stmdbvs	ip!, {r2, r5, r6, r8, sl, sp, lr}^
 a38:	745c6574 	ldrbvc	r6, [ip], #-1396	; 0xfffffa8c
 a3c:	736c6f6f 	cmnvc	ip, #444	; 0x1bc
 a40:	6363675c 	cmnvs	r3, #92, 14	; 0x1700000
 a44:	6d72612d 	ldfvse	f6, [r2, #-180]!	; 0xffffff4c
 a48:	6d72615c 	ldfvse	f6, [r2, #-368]!	; 0xfffffe90
 a4c:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
 a50:	61652d65 	cmnvs	r5, r5, ror #26
 a54:	695c6962 	ldmdbvs	ip, {r1, r5, r6, r8, fp, sp, lr}^
 a58:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
 a5c:	735c6564 	cmpvc	ip, #100, 10	; 0x19000000
 a60:	00007379 	andeq	r7, r0, r9, ror r3
 a64:	66667562 	strbtvs	r7, [r6], -r2, ror #10
 a68:	632e7265 			; <UNDEFINED> instruction: 0x632e7265
 a6c:	00000100 	andeq	r0, r0, r0, lsl #2
 a70:	6665645f 			; <UNDEFINED> instruction: 0x6665645f
 a74:	746c7561 	strbtvc	r7, [ip], #-1377	; 0xfffffa9f
 a78:	7079745f 	rsbsvc	r7, r9, pc, asr r4
 a7c:	682e7365 	stmdavs	lr!, {r0, r2, r5, r6, r8, r9, ip, sp, lr}
 a80:	00000200 	andeq	r0, r0, r0, lsl #4
 a84:	6474735f 	ldrbtvs	r7, [r4], #-863	; 0xfffffca1
 a88:	2e746e69 	cdpcs	14, 7, cr6, cr4, cr9, {3}
 a8c:	00030068 	andeq	r0, r3, r8, rrx
 a90:	66756200 	ldrbtvs	r6, [r5], -r0, lsl #4
 a94:	2e726566 	cdpcs	5, 7, cr6, cr2, cr6, {3}
 a98:	00010068 	andeq	r0, r1, r8, rrx
 a9c:	05000000 	streq	r0, [r0, #-0]
 aa0:	00189002 	andseq	r9, r8, r2
 aa4:	4b4b1520 	blmi	12c5f2c <startup-0x1ed3a0d4>
 aa8:	764e4b4b 	strbvc	r4, [lr], -fp, asr #22
 aac:	85c93259 	strbhi	r3, [r9, #601]	; 0x259
 ab0:	4e214c59 	mcrmi	12, 1, r4, cr1, cr9, {2}
 ab4:	c932595a 	ldmdbgt	r2!, {r1, r3, r4, r6, r8, fp, ip, lr}
 ab8:	214c5985 	smlalbbcs	r5, ip, r5, r9
 abc:	01000402 	tsteq	r0, r2, lsl #8
 ac0:	00034f01 	andeq	r4, r3, r1, lsl #30
 ac4:	de000200 	cdple	2, 0, cr0, cr0, cr0, {0}
 ac8:	02000001 	andeq	r0, r0, #1
 acc:	0d0efb01 	vstreq	d15, [lr, #-4]
 ad0:	01010100 	mrseq	r0, (UNDEF: 17)
 ad4:	00000001 	andeq	r0, r0, r1
 ad8:	01000001 	tsteq	r0, r1
 adc:	552f3a43 	strpl	r3, [pc, #-2627]!	; a1 <startup-0x1fffff5f>
 ae0:	73726573 	cmnvc	r2, #482344960	; 0x1cc00000
 ae4:	6164412f 	cmnvs	r4, pc, lsr #2
 ae8:	4f2f746d 	svcmi	0x002f746d
 aec:	7244656e 	subvc	r6, r4, #461373440	; 0x1b800000
 af0:	2f657669 	svccs	0x00657669
 af4:	756b6f44 	strbvc	r6, [fp, #-3908]!	; 0xfffff0bc
 af8:	746e656d 	strbtvc	r6, [lr], #-1389	; 0xfffffa93
 afc:	7469472f 	strbtvc	r4, [r9], #-1839	; 0xfffff8d1
 b00:	2f627548 	svccs	0x00627548
 b04:	32544144 	subscc	r4, r4, #68, 2
 b08:	4c2d3039 	stcmi	0, cr3, [sp], #-228	; 0xffffff1c
 b0c:	736d7261 	cmnvc	sp, #268435462	; 0x10000006
 b10:	65747379 	ldrbvs	r7, [r4, #-889]!	; 0xfffffc87
 b14:	6f6b2f6d 	svcvs	0x006b2f6d
 b18:	696c2f64 	stmdbvs	ip!, {r2, r5, r6, r8, r9, sl, fp, sp}^
 b1c:	54532f62 	ldrbpl	r2, [r3], #-3938	; 0xfffff09e
 b20:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
 b24:	696c5f34 	stmdbvs	ip!, {r2, r4, r5, r8, r9, sl, fp, ip, lr}^
 b28:	54532f62 	ldrbpl	r2, [r3], #-3938	; 0xfffff09e
 b2c:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
 b30:	5f787834 	svcpl	0x00787834
 b34:	50647453 	rsbpl	r7, r4, r3, asr r4
 b38:	70697265 	rsbvc	r7, r9, r5, ror #4
 b3c:	72445f68 	subvc	r5, r4, #104, 30	; 0x1a0
 b40:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
 b44:	6372732f 	cmnvs	r2, #-1140850688	; 0xbc000000
 b48:	5c3a6300 	ldcpl	3, cr6, [sl], #-0
 b4c:	61657363 	cmnvs	r5, r3, ror #6
 b50:	635c7070 	cmpvs	ip, #112	; 0x70
 b54:	6c65646f 	cfstrdvs	mvd6, [r5], #-444	; 0xfffffe44
 b58:	5c657469 	cfstrdpl	mvd7, [r5], #-420	; 0xfffffe5c
 b5c:	6c6f6f74 	stclvs	15, cr6, [pc], #-464	; 994 <startup-0x1ffff66c>
 b60:	63675c73 	cmnvs	r7, #29440	; 0x7300
 b64:	72612d63 	rsbvc	r2, r1, #6336	; 0x18c0
 b68:	72615c6d 	rsbvc	r5, r1, #27904	; 0x6d00
 b6c:	6f6e2d6d 	svcvs	0x006e2d6d
 b70:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
 b74:	5c696261 	sfmpl	f6, 2, [r9], #-388	; 0xfffffe7c
 b78:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
 b7c:	5c656475 	cfstrdpl	mvd6, [r5], #-468	; 0xfffffe2c
 b80:	6863616d 	stmdavs	r3!, {r0, r2, r3, r5, r6, r8, sp, lr}^
 b84:	00656e69 	rsbeq	r6, r5, r9, ror #28
 b88:	635c3a63 	cmpvs	ip, #405504	; 0x63000
 b8c:	70616573 	rsbvc	r6, r1, r3, ror r5
 b90:	6f635c70 	svcvs	0x00635c70
 b94:	696c6564 	stmdbvs	ip!, {r2, r5, r6, r8, sl, sp, lr}^
 b98:	745c6574 	ldrbvc	r6, [ip], #-1396	; 0xfffffa8c
 b9c:	736c6f6f 	cmnvc	ip, #444	; 0x1bc
 ba0:	6363675c 	cmnvs	r3, #92, 14	; 0x1700000
 ba4:	6d72612d 	ldfvse	f6, [r2, #-180]!	; 0xffffff4c
 ba8:	6d72615c 	ldfvse	f6, [r2, #-368]!	; 0xfffffe90
 bac:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
 bb0:	61652d65 	cmnvs	r5, r5, ror #26
 bb4:	695c6962 	ldmdbvs	ip, {r1, r5, r6, r8, fp, sp, lr}^
 bb8:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
 bbc:	735c6564 	cmpvc	ip, #100, 10	; 0x19000000
 bc0:	2e007379 	mcrcs	3, 0, r7, cr0, cr9, {3}
 bc4:	696c2f2e 	stmdbvs	ip!, {r1, r2, r3, r5, r8, r9, sl, fp, sp}^
 bc8:	54532f62 	ldrbpl	r2, [r3], #-3938	; 0xfffff09e
 bcc:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
 bd0:	696c5f34 	stmdbvs	ip!, {r2, r4, r5, r8, r9, sl, fp, ip, lr}^
 bd4:	4d432f62 	stclmi	15, cr2, [r3, #-392]	; 0xfffffe78
 bd8:	2f534953 	svccs	0x00534953
 bdc:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
 be0:	00656475 	rsbeq	r6, r5, r5, ror r4
 be4:	6c2f2e2e 	stcvs	14, cr2, [pc], #-184	; b34 <startup-0x1ffff4cc>
 be8:	532f6269 			; <UNDEFINED> instruction: 0x532f6269
 bec:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
 bf0:	6c5f3446 	cfldrdvs	mvd3, [pc], {70}	; 0x46
 bf4:	532f6269 			; <UNDEFINED> instruction: 0x532f6269
 bf8:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
 bfc:	78783446 	ldmdavc	r8!, {r1, r2, r6, sl, ip, sp}^
 c00:	6474535f 	ldrbtvs	r5, [r4], #-863	; 0xfffffca1
 c04:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
 c08:	445f6870 	ldrbmi	r6, [pc], #-2160	; c10 <startup-0x1ffff3f0>
 c0c:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
 c10:	6e692f72 	mcrvs	15, 3, r2, cr9, cr2, {3}
 c14:	73000063 	movwvc	r0, #99	; 0x63
 c18:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
 c1c:	78783466 	ldmdavc	r8!, {r1, r2, r5, r6, sl, ip, sp}^
 c20:	6173755f 	cmnvs	r3, pc, asr r5
 c24:	632e7472 			; <UNDEFINED> instruction: 0x632e7472
 c28:	00000100 	andeq	r0, r0, r0, lsl #2
 c2c:	6665645f 			; <UNDEFINED> instruction: 0x6665645f
 c30:	746c7561 	strbtvc	r7, [ip], #-1377	; 0xfffffa9f
 c34:	7079745f 	rsbsvc	r7, r9, pc, asr r4
 c38:	682e7365 	stmdavs	lr!, {r0, r2, r5, r6, r8, r9, ip, sp, lr}
 c3c:	00000200 	andeq	r0, r0, r0, lsl #4
 c40:	6474735f 	ldrbtvs	r7, [r4], #-863	; 0xfffffca1
 c44:	2e746e69 	cdpcs	14, 7, cr6, cr4, cr9, {3}
 c48:	00030068 	andeq	r0, r3, r8, rrx
 c4c:	726f6300 	rsbvc	r6, pc, #0, 6
 c50:	6d635f65 	stclvs	15, cr5, [r3, #-404]!	; 0xfffffe6c
 c54:	00682e34 	rsbeq	r2, r8, r4, lsr lr
 c58:	73000004 	movwvc	r0, #4
 c5c:	65747379 	ldrbvs	r7, [r4, #-889]!	; 0xfffffc87
 c60:	74735f6d 	ldrbtvc	r5, [r3], #-3949	; 0xfffff093
 c64:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
 c68:	2e787834 	mrccs	8, 3, r7, cr8, cr4, {1}
 c6c:	00050068 	andeq	r0, r5, r8, rrx
 c70:	6d747300 	ldclvs	3, cr7, [r4, #-0]
 c74:	34663233 	strbtcc	r3, [r6], #-563	; 0xfffffdcd
 c78:	682e7878 	stmdavs	lr!, {r3, r4, r5, r6, fp, ip, sp, lr}
 c7c:	00000500 	andeq	r0, r0, r0, lsl #10
 c80:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
 c84:	78346632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, sp, lr}
 c88:	73755f78 	cmnvc	r5, #120, 30	; 0x1e0
 c8c:	2e747261 	cdpcs	2, 7, cr7, cr4, cr1, {3}
 c90:	00050068 	andeq	r0, r5, r8, rrx
 c94:	6d747300 	ldclvs	3, cr7, [r4, #-0]
 c98:	34663233 	strbtcc	r3, [r6], #-563	; 0xfffffdcd
 c9c:	725f7878 	subsvc	r7, pc, #120, 16	; 0x780000
 ca0:	682e6363 	stmdavs	lr!, {r0, r1, r5, r6, r8, r9, sp, lr}
 ca4:	00000500 	andeq	r0, r0, r0, lsl #10
 ca8:	02050000 	andeq	r0, r5, #0
 cac:	20001978 	andcs	r1, r0, r8, ror r9
 cb0:	0101bb03 	tsteq	r1, r3, lsl #22
 cb4:	034b4c4e 	movteq	r4, #48206	; 0xbc4e
 cb8:	5a034a28 	bpl	d3560 <startup-0x1ff2caa0>
 cbc:	03674c20 	cmneq	r7, #32, 24	; 0x2000
 cc0:	5f036623 	svcpl	0x00036623
 cc4:	03674c20 	cmneq	r7, #32, 24	; 0x2000
 cc8:	6403661e 	strvs	r6, [r3], #-1566	; 0xfffff9e2
 ccc:	03674c20 	cmneq	r7, #32, 24	; 0x2000
 cd0:	69036619 	stmdbvs	r3, {r0, r3, r4, r9, sl, sp, lr}
 cd4:	03674c20 	cmneq	r7, #32, 24	; 0x2000
 cd8:	6e036614 	mcrvs	6, 0, r6, cr3, cr4, {0}
 cdc:	034b4c20 	movteq	r4, #48160	; 0xbc20
 ce0:	73034a0f 	movwvc	r4, #14863	; 0x3a0f
 ce4:	03674c20 	cmneq	r7, #32, 24	; 0x2000
 ce8:	7a03660a 	bvc	da518 <startup-0x1ff25ae8>
 cec:	69674c20 	stmdbvs	r7!, {r5, sl, fp, lr}^
 cf0:	4a080c03 	bmi	203d04 <startup-0x1fdfc2fc>
 cf4:	032f4b59 			; <UNDEFINED> instruction: 0x032f4b59
 cf8:	4e4d2e13 	mcrmi	14, 2, r2, cr13, cr3, {0}
 cfc:	504d4d69 	subpl	r4, sp, r9, ror #26
 d00:	4d6a2d67 	stclmi	13, cr2, [sl, #-412]!	; 0xfffffe64
 d04:	4e694e4d 	cdpmi	14, 6, cr4, cr9, cr13, {2}
 d08:	0402005a 	streq	r0, [r2], #-90	; 0xffffffa6
 d0c:	064a0601 	strbeq	r0, [sl], -r1, lsl #12
 d10:	694e5c4c 	stmdbvs	lr, {r2, r3, r6, sl, fp, ip, lr}^
 d14:	7785e6f7 			; <UNDEFINED> instruction: 0x7785e6f7
 d18:	4bdae868 	blmi	ff6baec0 <GPIO_Pins+0xdf6b89ac>
 d1c:	4cd60903 			; <UNDEFINED> instruction: 0x4cd60903
 d20:	3d3d3d4b 	ldccc	13, cr3, [sp, #-300]!	; 0xfffffed4
 d24:	0c033d3d 	stceq	13, cr3, [r3], {61}	; 0x3d
 d28:	0903594a 	stmdbeq	r3, {r1, r3, r6, r8, fp, ip, lr}
 d2c:	4b504c2e 	blmi	1413dec <startup-0x1ebec214>
 d30:	034b3fab 	movteq	r3, #49067	; 0xbfab
 d34:	3d4c6609 	stclcc	6, cr6, [ip, #-36]	; 0xffffffdc
 d38:	033d3d3d 	teqeq	sp, #3904	; 0xf40
 d3c:	4d794a0b 	vldmdbmi	r9!, {s9-s19}
 d40:	03841e97 	orreq	r1, r4, #2416	; 0x970
 d44:	8479740b 	ldrbthi	r7, [r9], #-1035	; 0xfffffbf5
 d48:	4a0d039f 	bmi	341bcc <startup-0x1fcbe434>
 d4c:	1e894d79 	mcrne	13, 4, r4, cr9, cr9, {3}
 d50:	740b0384 	strvc	r0, [fp], #-900	; 0xfffffc7c
 d54:	1e974d79 	mrcne	13, 4, r4, cr7, cr9, {3}
 d58:	742a0384 	strtvc	r0, [sl], #-900	; 0xfffffc7c
 d5c:	0903757a 	stmdbeq	r3, {r1, r3, r4, r5, r6, r8, sl, ip, sp, lr}
 d60:	03674f4a 	cmneq	r7, #296	; 0x128
 d64:	847a4a2e 	ldrbthi	r4, [sl], #-2606	; 0xfffff5d2
 d68:	4a0b039f 	bmi	2c1bec <startup-0x1fd3e414>
 d6c:	1e894d79 	mcrne	13, 4, r4, cr9, cr9, {3}
 d70:	4a0c0384 	bmi	301b88 <startup-0x1fcfe478>
 d74:	03918379 	orrseq	r8, r1, #-469762047	; 0xe4000001
 d78:	8379743e 	cmnhi	r9, #1040187392	; 0x3e000000
 d7c:	4a0b0391 	bmi	2c1bc8 <startup-0x1fd3e438>
 d80:	1e974d79 	mrcne	13, 4, r4, cr7, cr9, {3}
 d84:	74090384 	strvc	r0, [r9], #-900	; 0xfffffc7c
 d88:	2f03834f 	svccs	0x0003834f
 d8c:	894d794a 	stmdbhi	sp, {r1, r3, r6, r8, fp, ip, sp, lr}^
 d90:	c503841e 	strgt	r8, [r3, #-1054]	; 0xfffffbe2
 d94:	84794a00 	ldrbthi	r4, [r9], #-2560	; 0xfffff600
 d98:	4a0b03bb 	bmi	2c1c8c <startup-0x1fd3e374>
 d9c:	1e894d78 	mcrne	13, 4, r4, cr9, cr8, {3}
 da0:	4a0b0384 	bmi	2c1bb8 <startup-0x1fd3e448>
 da4:	1e894d78 	mcrne	13, 4, r4, cr9, cr8, {3}
 da8:	4a390384 	bmi	e41bc0 <startup-0x1f1be440>
 dac:	03918379 	orrseq	r8, r1, #-469762047	; 0xe4000001
 db0:	4d794a0b 	vldmdbmi	r9!, {s9-s19}
 db4:	03841e89 	orreq	r1, r4, #2192	; 0x890
 db8:	4ec04a1f 			; <UNDEFINED> instruction: 0x4ec04a1f
 dbc:	03ae1e98 			; <UNDEFINED> instruction: 0x03ae1e98
 dc0:	bb4a00f2 	bllt	1281190 <startup-0x1ed7ee70>
 dc4:	2e0c0367 	cdpcs	3, 0, cr0, cr12, cr7, {3}
 dc8:	5a596931 	bpl	165b294 <startup-0x1e9a4d6c>
 dcc:	4e3e4c3e 	mrcmi	12, 1, r4, cr14, cr14, {1}
 dd0:	1e6c4c3e 	mcrne	12, 3, r4, cr12, cr14, {1}
 dd4:	4a150376 	bmi	541bb4 <startup-0x1fabe44c>
 dd8:	4a0b0375 	bmi	2c1bb4 <startup-0x1fd3e44c>
 ddc:	3d4c5c92 	stclcc	12, cr5, [ip, #-584]	; 0xfffffdb8
 de0:	034a1c03 	movteq	r1, #44035	; 0xac03
 de4:	0367740b 	cmneq	r7, #184549376	; 0xb000000
 de8:	67754a16 			; <UNDEFINED> instruction: 0x67754a16
 dec:	684a0c03 	stmdavs	sl, {r0, r1, sl, fp}^
 df0:	843e5a59 	ldrthi	r5, [lr], #-2649	; 0xfffff5a7
 df4:	5977863e 	ldmdbpl	r7!, {r1, r2, r3, r4, r5, r9, sl, pc}^
 df8:	02007559 	andeq	r7, r0, #373293056	; 0x16400000
 dfc:	3c060104 	stfccs	f0, [r6], {4}
 e00:	4d5c3e06 	ldclmi	14, cr3, [ip, #-24]	; 0xffffffe8
 e04:	4a1d033d 	bmi	741b00 <startup-0x1f8be500>
 e08:	820b0375 	andhi	r0, fp, #-738197503	; 0xd4000001
 e0c:	02676759 	rsbeq	r6, r7, #23330816	; 0x1640000
 e10:	01010004 	tsteq	r1, r4

Disassembly of section .debug_str:

00000000 <.debug_str>:
       0:	706c6c70 	rsbvc	r6, ip, r0, ror ip
       4:	45535200 	ldrbmi	r5, [r3, #-512]	; 0xfffffe00
       8:	44455652 	strbmi	r5, [r5], #-1618	; 0xfffff9ae
       c:	54520031 	ldrbpl	r0, [r2], #-49	; 0xffffffcf
      10:	4b575f43 	blmi	15d7d24 <startup-0x1ea282dc>
      14:	495f5055 	ldmdbmi	pc, {r0, r2, r4, r6, ip, lr}^	; <UNPREDICTABLE>
      18:	006e5152 	rsbeq	r5, lr, r2, asr r1
      1c:	49545845 	ldmdbmi	r4, {r0, r2, r6, fp, ip, lr}^
      20:	52495f32 	subpl	r5, r9, #50, 30	; 0xc8
      24:	44006e51 	strmi	r6, [r0], #-3665	; 0xfffff1af
      28:	5f31414d 	svcpl	0x0031414d
      2c:	65727453 	ldrbvs	r7, [r2, #-1107]!	; 0xfffffbad
      30:	5f366d61 	svcpl	0x00366d61
      34:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
      38:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
      3c:	50555f38 	subspl	r5, r5, r8, lsr pc
      40:	4d49545f 	cfstrdmi	mvd5, [r9, #-380]	; 0xfffffe84
      44:	495f3331 	ldmdbmi	pc, {r0, r4, r5, r8, r9, ip, sp}^	; <UNPREDICTABLE>
      48:	006e5152 	rsbeq	r5, lr, r2, asr r1
      4c:	494c4c50 	stmdbmi	ip, {r4, r6, sl, fp, lr}^
      50:	46435332 			; <UNDEFINED> instruction: 0x46435332
      54:	52005247 	andpl	r5, r0, #1879048196	; 0x70000004
      58:	495f4343 	ldmdbmi	pc, {r0, r1, r6, r8, r9, lr}^	; <UNPREDICTABLE>
      5c:	4c435332 	mcrrmi	3, 3, r5, r3, cr2
      60:	6e6f434b 	cdpvs	3, 6, cr4, cr15, cr11, {2}
      64:	00676966 	rsbeq	r6, r7, r6, ror #18
      68:	5f434352 	svcpl	0x00434352
      6c:	43746547 	cmnmi	r4, #297795584	; 0x11c00000
      70:	6b636f6c 	blvs	18dbe28 <startup-0x1e7241d8>
      74:	65724673 	ldrbvs	r4, [r2, #-1651]!	; 0xfffff98d
      78:	4d440071 	stclmi	0, cr0, [r4, #-452]	; 0xfffffe3c
      7c:	535f3241 	cmppl	pc, #268435460	; 0x10000004
      80:	61657274 	smcvs	22308	; 0x5724
      84:	495f316d 	ldmdbmi	pc, {r0, r2, r3, r5, r6, r8, ip, sp}^	; <UNPREDICTABLE>
      88:	006e5152 	rsbeq	r5, lr, r2, asr r1
      8c:	4b4c4348 	blmi	1310db4 <startup-0x1ecef24c>
      90:	6572465f 	ldrbvs	r4, [r2, #-1631]!	; 0xfffff9a1
      94:	6e657571 	mcrvs	5, 3, r7, cr5, cr1, {3}
      98:	47007963 	strmi	r7, [r0, -r3, ror #18]
      9c:	5f4f4950 	svcpl	0x004f4950
      a0:	64507550 	ldrbvs	r7, [r0], #-1360	; 0xfffffab0
      a4:	504f4e5f 	subpl	r4, pc, pc, asr lr	; <UNPREDICTABLE>
      a8:	004c4c55 	subeq	r4, ip, r5, asr ip
      ac:	524f5456 	subpl	r5, pc, #1442840576	; 0x56000000
      b0:	49505300 	ldmdbmi	r0, {r8, r9, ip, lr}^
      b4:	52495f33 	subpl	r5, r9, #51, 30	; 0xcc
      b8:	46006e51 			; <UNDEFINED> instruction: 0x46006e51
      bc:	4853414c 	ldmdami	r3, {r2, r3, r6, r8, lr}^
      c0:	5152495f 	cmppl	r2, pc, asr r9
      c4:	4344006e 	movtmi	r0, #16494	; 0x406e
      c8:	495f494d 	ldmdbmi	pc, {r0, r2, r3, r6, r8, fp, lr}^	; <UNPREDICTABLE>
      cc:	006e5152 	rsbeq	r5, lr, r2, asr r1
      d0:	5f434352 	svcpl	0x00434352
      d4:	32425041 	subcc	r5, r2, #65	; 0x41
      d8:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
      dc:	6c436870 	mcrrvs	8, 7, r6, r3, cr0
      e0:	4c6b636f 	stclmi	3, cr6, [fp], #-444	; 0xfffffe44
      e4:	646f4d50 	strbtvs	r4, [pc], #-3408	; ec <startup-0x1fffff14>
      e8:	646d4365 	strbtvs	r4, [sp], #-869	; 0xfffffc9b
      ec:	43435200 	movtmi	r5, #12800	; 0x3200
      f0:	4248415f 	submi	r4, r8, #-1073741801	; 0xc0000017
      f4:	72655032 	rsbvc	r5, r5, #50	; 0x32
      f8:	43687069 	cmnmi	r8, #105	; 0x69
      fc:	6b636f6c 	blvs	18dbeb4 <startup-0x1e72414c>
     100:	6f4d504c 	svcvs	0x004d504c
     104:	6d436564 	cfstr64vs	mvdx6, [r3, #-400]	; 0xfffffe70
     108:	50470064 	subpl	r0, r7, r4, rrx
     10c:	544f4f49 	strbpl	r4, [pc], #-3913	; 114 <startup-0x1ffffeec>
     110:	5f657079 	svcpl	0x00657079
     114:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0xfffff6ac
     118:	00666544 	rsbeq	r6, r6, r4, asr #10
     11c:	5f434352 	svcpl	0x00434352
     120:	31425041 	cmpcc	r2, r1, asr #32
     124:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
     128:	65526870 	ldrbvs	r6, [r2, #-2160]	; 0xfffff790
     12c:	43746573 	cmnmi	r4, #482344960	; 0x1cc00000
     130:	5200646d 	andpl	r6, r0, #1828716544	; 0x6d000000
     134:	4d5f4343 	ldclmi	3, cr4, [pc, #-268]	; 30 <startup-0x1fffffd0>
     138:	0065646f 	rsbeq	r6, r5, pc, ror #8
     13c:	324d4954 	subcc	r4, sp, #84, 18	; 0x150000
     140:	5152495f 	cmppl	r2, pc, asr r9
     144:	4352006e 	cmpmi	r2, #110	; 0x6e
     148:	54525f43 	ldrbpl	r5, [r2], #-3907	; 0xfffff0bd
     14c:	4b4c4343 	blmi	1310e60 <startup-0x1ecef1a0>
     150:	72756f53 	rsbsvc	r6, r5, #332	; 0x14c
     154:	52006563 	andpl	r6, r0, #415236096	; 0x18c00000
     158:	415f4343 	cmpmi	pc, r3, asr #6
     15c:	50324248 	eorspl	r4, r2, r8, asr #4
     160:	70697265 	rsbvc	r7, r9, r5, ror #4
     164:	6f6c4368 	svcvs	0x006c4368
     168:	6d436b63 	vstrvs	d22, [r3, #-396]	; 0xfffffe74
     16c:	43490064 	movtmi	r0, #36964	; 0x9064
     170:	52005250 	andpl	r5, r0, #80, 4
     174:	545f4343 	ldrbpl	r4, [pc], #-835	; 17c <startup-0x1ffffe84>
     178:	4c434d49 	mcrrmi	13, 4, r4, r3, cr9
     17c:	6572504b 	ldrbvs	r5, [r2, #-75]!	; 0xffffffb5
     180:	6e6f4373 	mcrvs	3, 3, r4, cr15, cr3, {3}
     184:	00676966 	rsbeq	r6, r7, r6, ror #18
     188:	5f434352 	svcpl	0x00434352
     18c:	494c4c50 	stmdbmi	ip, {r4, r6, sl, fp, lr}^
     190:	6d435332 	stclvs	3, cr5, [r3, #-200]	; 0xffffff38
     194:	43520064 	cmpmi	r2, #100	; 0x64
     198:	43485f43 	movtmi	r5, #36675	; 0x8f43
     19c:	43004b4c 	movwmi	r4, #2892	; 0xb4c
     1a0:	5f324e41 	svcpl	0x00324e41
     1a4:	5f305852 	svcpl	0x00305852
     1a8:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     1ac:	41535500 	cmpmi	r3, r0, lsl #10
     1b0:	5f365452 	svcpl	0x00365452
     1b4:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     1b8:	6d697400 	cfstrdvs	mvd7, [r9, #-0]
     1bc:	616c5f65 	cmnvs	ip, r5, ror #30
     1c0:	5f006d72 	svcpl	0x00006d72
     1c4:	6e69755f 	mcrvs	5, 3, r7, cr9, cr15, {2}
     1c8:	745f3874 	ldrbvc	r3, [pc], #-2164	; 1d0 <startup-0x1ffffe30>
     1cc:	49505300 	ldmdbmi	r0, {r8, r9, ip, lr}^
     1d0:	52495f32 	subpl	r5, r9, #50, 30	; 0xc8
     1d4:	54006e51 	strpl	r6, [r0], #-3665	; 0xfffff1af
     1d8:	5f384d49 	svcpl	0x00384d49
     1dc:	5f4b5242 	svcpl	0x004b5242
     1e0:	314d4954 	cmpcc	sp, r4, asr r9
     1e4:	52495f32 	subpl	r5, r9, #50, 30	; 0xc8
     1e8:	41006e51 	tstmi	r0, r1, asr lr
     1ec:	4c324248 	lfmmi	f4, 4, [r2], #-288	; 0xfffffee0
     1f0:	524e4550 	subpl	r4, lr, #80, 10	; 0x14000000
     1f4:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
     1f8:	75505f4f 	ldrbvc	r5, [r0, #-3919]	; 0xfffff0b1
     1fc:	445f6450 	ldrbmi	r6, [pc], #-1104	; 204 <startup-0x1ffffdfc>
     200:	004e574f 	subeq	r5, lr, pc, asr #14
     204:	43524941 	cmpmi	r2, #1064960	; 0x104000
     208:	43520052 	cmpmi	r2, #82	; 0x52
     20c:	41535f43 	cmpmi	r3, r3, asr #30
     210:	4c4c5049 	mcrrmi	0, 4, r5, ip, cr9
     214:	43494153 	movtmi	r4, #37203	; 0x9153
     218:	69446b6c 	stmdbvs	r4, {r2, r3, r5, r6, r8, r9, fp, sp, lr}^
     21c:	6e6f4376 	mcrvs	3, 3, r4, cr15, cr6, {3}
     220:	00676966 	rsbeq	r6, r7, r6, ror #18
     224:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xfffff197
     228:	4950475f 	ldmdbmi	r0, {r0, r1, r2, r3, r4, r6, r8, r9, sl, lr}^
     22c:	6f505f4f 	svcvs	0x00505f4f
     230:	00737472 	rsbseq	r7, r3, r2, ror r4
     234:	49555043 	ldmdbmi	r5, {r0, r1, r6, ip, lr}^
     238:	79530044 	ldmdbvc	r3, {r2, r6}^
     23c:	63695473 	cmnvs	r9, #1929379840	; 0x73000000
     240:	61485f6b 	cmpvs	r8, fp, ror #30
     244:	656c646e 	strbvs	r6, [ip, #-1134]!	; 0xfffffb92
     248:	43520072 	cmpmi	r2, #114	; 0x72
     24c:	544c5f43 	strbpl	r5, [ip], #-3907	; 0xfffff0bd
     250:	4c434344 	mcrrmi	3, 4, r4, r3, cr4
     254:	7669444b 	strbtvc	r4, [r9], -fp, asr #8
     258:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
     25c:	44006769 	strmi	r6, [r0], #-1897	; 0xfffff897
     260:	5f32414d 	svcpl	0x0032414d
     264:	65727453 	ldrbvs	r7, [r2, #-1107]!	; 0xfffffbad
     268:	5f356d61 	svcpl	0x00356d61
     26c:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     270:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
     274:	6f4d5f4f 	svcvs	0x004d5f4f
     278:	415f6564 	cmpmi	pc, r4, ror #10
     27c:	43520046 	cmpmi	r2, #70	; 0x46
     280:	48415f43 	stmdami	r1, {r0, r1, r6, r8, r9, sl, fp, ip, lr}^
     284:	65503342 	ldrbvs	r3, [r0, #-834]	; 0xfffffcbe
     288:	68706972 	ldmdavs	r0!, {r1, r4, r5, r6, r8, fp, sp, lr}^
     28c:	65736552 	ldrbvs	r6, [r3, #-1362]!	; 0xfffffaae
     290:	646d4374 	strbtvs	r4, [sp], #-884	; 0xfffffc8c
     294:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
     298:	52545f31 	subspl	r5, r4, #49, 30	; 0xc4
     29c:	4f435f47 	svcmi	0x00435f47
     2a0:	49545f4d 	ldmdbmi	r4, {r0, r2, r3, r6, r8, r9, sl, fp, ip, lr}^
     2a4:	5f31314d 	svcpl	0x0031314d
     2a8:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     2ac:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
     2b0:	6f4d5f4f 	svcvs	0x004d5f4f
     2b4:	415f6564 	cmpmi	pc, r4, ror #10
     2b8:	4352004e 	cmpmi	r2, #78	; 0x4e
     2bc:	43505f43 	cmpmi	r0, #268	; 0x10c
     2c0:	43324b4c 	teqmi	r2, #76, 22	; 0x13000
     2c4:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
     2c8:	6f630067 	svcvs	0x00630067
     2cc:	6f72746e 	svcvs	0x0072746e
     2d0:	7469626c 	strbtvc	r6, [r9], #-620	; 0xfffffd94
     2d4:	43520073 	cmpmi	r2, #115	; 0x73
     2d8:	65445f43 	strbvs	r5, [r4, #-3907]	; 0xfffff0bd
     2dc:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xfffff1b7
     2e0:	43435200 	movtmi	r5, #12800	; 0x3200
     2e4:	4941535f 	stmdbmi	r1, {r0, r1, r2, r3, r4, r6, r8, r9, ip, lr}^
     2e8:	636f6c42 	cmnvs	pc, #16896	; 0x4200
     2ec:	4c43426b 	sfmmi	f4, 2, [r3], {107}	; 0x6b
     2f0:	6e6f434b 	cdpvs	3, 6, cr4, cr15, cr11, {2}
     2f4:	00676966 	rsbeq	r6, r7, r6, ror #18
     2f8:	32425041 	subcc	r5, r2, #65	; 0x41
     2fc:	00524e45 	subseq	r4, r2, r5, asr #28
     300:	5f434352 	svcpl	0x00434352
     304:	53746547 	cmnpl	r4, #297795584	; 0x11c00000
     308:	4c435359 	mcrrmi	3, 5, r5, r3, cr9
     30c:	756f534b 	strbvc	r5, [pc, #-843]!	; ffffffc9 <GPIO_Pins+0xdfffdab5>
     310:	00656372 	rsbeq	r6, r5, r2, ror r3
     314:	31424841 	cmpcc	r2, r1, asr #16
     318:	4e45504c 	cdpmi	0, 4, cr5, cr5, cr12, {2}
     31c:	43520052 	cmpmi	r2, #82	; 0x52
     320:	4c505f43 	mrrcmi	15, 4, r5, r0, cr3
     324:	5332494c 	teqpl	r2, #76, 18	; 0x130000
     328:	51766944 	cmnpl	r6, r4, asr #18
     32c:	73795300 	cmnvc	r9, #0, 6
     330:	6b636954 	blvs	18da888 <startup-0x1e725778>
     334:	5152495f 	cmppl	r2, pc, asr r9
     338:	4352006e 	cmpmi	r2, #110	; 0x6e
     33c:	48415f43 	stmdami	r1, {r0, r1, r6, r8, r9, sl, fp, ip, lr}^
     340:	65503342 	ldrbvs	r3, [r0, #-834]	; 0xfffffcbe
     344:	68706972 	ldmdavs	r0!, {r1, r4, r5, r6, r8, fp, sp, lr}^
     348:	41535500 	cmpmi	r3, r0, lsl #10
     34c:	5f335452 	svcpl	0x00335452
     350:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     354:	4b434400 	blmi	10d135c <startup-0x1ef2eca4>
     358:	52474643 	subpl	r4, r7, #70254592	; 0x4300000
     35c:	53434900 	movtpl	r4, #14592	; 0x3900
     360:	43520052 	cmpmi	r2, #82	; 0x52
     364:	434d5f43 	movtmi	r5, #57155	; 0xdf43
     368:	6944324f 	stmdbvs	r4, {r0, r1, r2, r3, r6, r9, ip, sp}^
     36c:	50470076 	subpl	r0, r7, r6, ror r0
     370:	4f5f4f49 	svcmi	0x005f4f49
     374:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0xfffff6ac
     378:	00444f5f 	subeq	r4, r4, pc, asr pc
     37c:	4f495047 	svcmi	0x00495047
     380:	696e495f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, lr}^
     384:	70795474 	rsbsvc	r5, r9, r4, ror r4
     388:	66654465 	strbtvs	r4, [r5], -r5, ror #8
     38c:	43435200 	movtmi	r5, #12800	; 0x3200
     390:	5359535f 	cmppl	r9, #2080374785	; 0x7c000001
     394:	534b4c43 	movtpl	r4, #48195	; 0xbc43
     398:	6372756f 	cmnvs	r2, #465567744	; 0x1bc00000
     39c:	4d440065 	stclmi	0, cr0, [r4, #-404]	; 0xfffffe6c
     3a0:	535f3141 	cmppl	pc, #1073741840	; 0x40000010
     3a4:	61657274 	smcvs	22308	; 0x5724
     3a8:	495f326d 	ldmdbmi	pc, {r0, r2, r3, r5, r6, r9, ip, sp}^	; <UNPREDICTABLE>
     3ac:	006e5152 	rsbeq	r5, lr, r2, asr r1
     3b0:	5f434352 	svcpl	0x00434352
     3b4:	534c4c50 	movtpl	r4, #52304	; 0xcc50
     3b8:	6372756f 	cmnvs	r2, #465567744	; 0x1bc00000
     3bc:	43520065 	cmpmi	r2, #101	; 0x65
     3c0:	50415f43 	subpl	r5, r1, r3, asr #30
     3c4:	65503142 	ldrbvs	r3, [r0, #-322]	; 0xfffffebe
     3c8:	68706972 	ldmdavs	r0!, {r1, r4, r5, r6, r8, fp, sp, lr}^
     3cc:	636f6c43 	cmnvs	pc, #17152	; 0x4300
     3d0:	646d436b 	strbtvs	r4, [sp], #-875	; 0xfffffc95
     3d4:	53455200 	movtpl	r5, #20992	; 0x5200
     3d8:	45565245 	ldrbmi	r5, [r6, #-581]	; 0xfffffdbb
     3dc:	52003044 	andpl	r3, r0, #68	; 0x44
     3e0:	52455345 	subpl	r5, r5, #335544321	; 0x14000001
     3e4:	31444556 	cmpcc	r4, r6, asr r5
     3e8:	736e7500 	cmnvc	lr, #0, 10
     3ec:	656e6769 	strbvs	r6, [lr, #-1897]!	; 0xfffff897
     3f0:	68632064 	stmdavs	r3!, {r2, r5, r6, sp}^
     3f4:	44007261 	strmi	r7, [r0], #-609	; 0xfffffd9f
     3f8:	5f32414d 	svcpl	0x0032414d
     3fc:	65727453 	ldrbvs	r7, [r2, #-1107]!	; 0xfffffbad
     400:	5f346d61 	svcpl	0x00346d61
     404:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     408:	53455200 	movtpl	r5, #20992	; 0x5200
     40c:	45565245 	ldrbmi	r5, [r6, #-581]	; 0xfffffdbb
     410:	52003444 	andpl	r3, r0, #68, 8	; 0x44000000
     414:	52455345 	subpl	r5, r5, #335544321	; 0x14000001
     418:	35444556 	strbcc	r4, [r4, #-1366]	; 0xfffffaaa
     41c:	53455200 	movtpl	r5, #20992	; 0x5200
     420:	45565245 	ldrbmi	r5, [r6, #-581]	; 0xfffffdbb
     424:	49003644 	stmdbmi	r0, {r2, r6, r9, sl, ip, sp}
     428:	00524241 	subseq	r4, r2, r1, asr #4
     42c:	4f495047 	svcmi	0x00495047
     430:	79544f5f 	ldmdbvc	r4, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, lr}^
     434:	505f6570 	subspl	r6, pc, r0, ror r5	; <UNPREDICTABLE>
     438:	32490050 	subcc	r0, r9, #80	; 0x50
     43c:	455f3143 	ldrbmi	r3, [pc, #-323]	; 301 <startup-0x1ffffcff>
     440:	52495f52 	subpl	r5, r9, #328	; 0x148
     444:	43006e51 	movwmi	r6, #3665	; 0xe51
     448:	5f324e41 	svcpl	0x00324e41
     44c:	5f454353 	svcpl	0x00454353
     450:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     454:	43435200 	movtmi	r5, #12800	; 0x3200
     458:	45534c5f 	ldrbmi	r4, [r3, #-3167]	; 0xfffff3a1
     45c:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
     460:	52006769 	andpl	r6, r0, #27525120	; 0x1a40000
     464:	52455345 	subpl	r5, r5, #335544321	; 0x14000001
     468:	32444556 	subcc	r4, r4, #360710144	; 0x15800000
     46c:	53455200 	movtpl	r5, #20992	; 0x5200
     470:	45565245 	ldrbmi	r5, [r6, #-581]	; 0xfffffdbb
     474:	54003344 	strpl	r3, [r0], #-836	; 0xfffffcbc
     478:	5f354d49 	svcpl	0x00354d49
     47c:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     480:	61735500 	cmnvs	r3, r0, lsl #10
     484:	61466567 	cmpvs	r6, r7, ror #10
     488:	5f746c75 	svcpl	0x00746c75
     48c:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     490:	42435300 	submi	r5, r3, #0, 6
     494:	7079545f 	rsbsvc	r5, r9, pc, asr r4
     498:	50470065 	subpl	r0, r7, r5, rrx
     49c:	75504f49 	ldrbvc	r4, [r0, #-3913]	; 0xfffff0b7
     4a0:	545f6450 	ldrbpl	r6, [pc], #-1104	; 4a8 <startup-0x1ffffb58>
     4a4:	44657079 	strbtmi	r7, [r5], #-121	; 0xffffff87
     4a8:	44006665 	strmi	r6, [r0], #-1637	; 0xfffff99b
     4ac:	00525346 	subseq	r5, r2, r6, asr #6
     4b0:	31424841 	cmpcc	r2, r1, asr #16
     4b4:	52545352 	subspl	r5, r4, #1207959553	; 0x48000001
     4b8:	43435200 	movtmi	r5, #12800	; 0x3200
     4bc:	4250415f 	subsmi	r4, r0, #-1073741801	; 0xc0000017
     4c0:	72655032 	rsbvc	r5, r5, #50	; 0x32
     4c4:	52687069 	rsbpl	r7, r8, #105	; 0x69
     4c8:	74657365 	strbtvc	r7, [r5], #-869	; 0xfffffc9b
     4cc:	00646d43 	rsbeq	r6, r4, r3, asr #26
     4d0:	75746572 	ldrbvc	r6, [r4, #-1394]!	; 0xfffffa8e
     4d4:	6f436e72 	svcvs	0x00436e72
     4d8:	52006564 	andpl	r6, r0, #100, 10	; 0x19000000
     4dc:	415f4343 	cmpmi	pc, r3, asr #6
     4e0:	50334248 	eorspl	r4, r3, r8, asr #4
     4e4:	70697265 	rsbvc	r7, r9, r5, ror #4
     4e8:	6f6c4368 	svcvs	0x006c4368
     4ec:	504c6b63 	subpl	r6, ip, r3, ror #22
     4f0:	65646f4d 	strbvs	r6, [r4, #-3917]!	; 0xfffff0b3
     4f4:	00646d43 	rsbeq	r6, r4, r3, asr #26
     4f8:	69755f5f 	ldmdbvs	r5!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, ip, lr}^
     4fc:	3631746e 	ldrtcc	r7, [r1], -lr, ror #8
     500:	4100745f 	tstmi	r0, pc, asr r4
     504:	45324248 	ldrmi	r4, [r2, #-584]!	; 0xfffffdb8
     508:	5000524e 	andpl	r5, r0, lr, asr #4
     50c:	324b4c43 	subcc	r4, fp, #17152	; 0x4300
     510:	6572465f 	ldrbvs	r4, [r2, #-1631]!	; 0xfffff9a1
     514:	6e657571 	mcrvs	5, 3, r7, cr5, cr1, {3}
     518:	47007963 	strmi	r7, [r0, -r3, ror #18]
     51c:	5f4f4950 	svcpl	0x004f4950
     520:	5f776f4c 	svcpl	0x00776f4c
     524:	65657053 	strbvs	r7, [r5, #-83]!	; 0xffffffad
     528:	41430064 	cmpmi	r3, r4, rrx
     52c:	525f314e 	subspl	r3, pc, #-2147483629	; 0x80000013
     530:	495f3058 	ldmdbmi	pc, {r3, r4, r6, ip, sp}^	; <UNPREDICTABLE>
     534:	006e5152 	rsbeq	r5, lr, r2, asr r1
     538:	555c3a43 	ldrbpl	r3, [ip, #-2627]	; 0xfffff5bd
     53c:	73726573 	cmnvc	r2, #482344960	; 0x1cc00000
     540:	6164415c 	cmnvs	r4, ip, asr r1
     544:	4f5c746d 	svcmi	0x005c746d
     548:	7244656e 	subvc	r6, r4, #461373440	; 0x1b800000
     54c:	5c657669 	stclpl	6, cr7, [r5], #-420	; 0xfffffe5c
     550:	756b6f44 	strbvc	r6, [fp, #-3908]!	; 0xfffff0bc
     554:	746e656d 	strbtvc	r6, [lr], #-1389	; 0xfffffa93
     558:	7469475c 	strbtvc	r4, [r9], #-1884	; 0xfffff8a4
     55c:	5c627548 	cfstr64pl	mvdx7, [r2], #-288	; 0xfffffee0
     560:	32544144 	subscc	r4, r4, #68, 2
     564:	4c2d3039 	stcmi	0, cr3, [sp], #-228	; 0xffffff1c
     568:	736d7261 	cmnvc	sp, #268435462	; 0x10000006
     56c:	65747379 	ldrbvs	r7, [r4, #-889]!	; 0xfffffc87
     570:	6f6b5c6d 	svcvs	0x006b5c6d
     574:	6f445c64 	svcvs	0x00445c64
     578:	4800726f 	stmdami	r0, {r0, r1, r2, r3, r5, r6, r9, ip, sp, lr}
     57c:	00525346 	subseq	r5, r2, r6, asr #6
     580:	4f495047 	svcmi	0x00495047
     584:	6165725f 	cmnvs	r5, pc, asr r2
     588:	43520064 	cmpmi	r2, #100	; 0x64
     58c:	59535f43 	ldmdbpl	r3, {r0, r1, r6, r8, r9, sl, fp, ip, lr}^
     590:	4b4c4353 	blmi	13112e4 <startup-0x1eceed1c>
     594:	4c435000 	marmi	acc0, r5, r3
     598:	465f314b 	ldrbmi	r3, [pc], -fp, asr #2
     59c:	75716572 	ldrbvc	r6, [r1, #-1394]!	; 0xfffffa8e
     5a0:	79636e65 	stmdbvc	r3!, {r0, r2, r5, r6, r9, sl, fp, sp, lr}^
     5a4:	4c4c5000 	marmi	acc0, r5, ip
     5a8:	4c50004d 	mrrcmi	0, 4, r0, r0, cr13	; <UNPREDICTABLE>
     5ac:	50004e4c 	andpl	r4, r0, ip, asr #28
     5b0:	00504c4c 	subseq	r4, r0, ip, asr #24
     5b4:	514c4c50 	cmppl	ip, r0, asr ip
     5b8:	43435200 	movtmi	r5, #12800	; 0x3200
     5bc:	49534c5f 	ldmdbmi	r3, {r0, r1, r2, r3, r4, r6, sl, fp, lr}^
     5c0:	00646d43 	rsbeq	r6, r4, r3, asr #26
     5c4:	736c6c70 	cmnvc	ip, #112, 24	; 0x7000
     5c8:	6372756f 	cmnvs	r2, #465567744	; 0x1bc00000
     5cc:	49540065 	ldmdbmi	r4, {r0, r2, r5, r6}^
     5d0:	495f344d 	ldmdbmi	pc, {r0, r2, r3, r6, sl, ip, sp}^	; <UNPREDICTABLE>
     5d4:	006e5152 	rsbeq	r5, lr, r2, asr r1
     5d8:	20554e47 	subscs	r4, r5, r7, asr #28
     5dc:	20393943 	eorscs	r3, r9, r3, asr #18
     5e0:	2e322e37 	mrccs	14, 1, r2, cr2, cr7, {1}
     5e4:	30322031 	eorscc	r2, r2, r1, lsr r0
     5e8:	39303731 	ldmdbcc	r0!, {r0, r4, r5, r8, r9, sl, ip, sp}
     5ec:	28203430 	stmdacs	r0!, {r4, r5, sl, ip, sp}
     5f0:	656c6572 	strbvs	r6, [ip, #-1394]!	; 0xfffffa8e
     5f4:	29657361 	stmdbcs	r5!, {r0, r5, r6, r8, r9, ip, sp, lr}^
     5f8:	52415b20 	subpl	r5, r1, #32, 22	; 0x8000
     5fc:	6d652f4d 	stclvs	15, cr2, [r5, #-308]!	; 0xfffffecc
     600:	64646562 	strbtvs	r6, [r4], #-1378	; 0xfffffa9e
     604:	372d6465 	strcc	r6, [sp, -r5, ror #8]!
     608:	6172622d 	cmnvs	r2, sp, lsr #4
     60c:	2068636e 	rsbcs	r6, r8, lr, ror #6
     610:	69766572 	ldmdbvs	r6!, {r1, r4, r5, r6, r8, sl, sp, lr}^
     614:	6e6f6973 			; <UNDEFINED> instruction: 0x6e6f6973
     618:	35353220 	ldrcc	r3, [r5, #-544]!	; 0xfffffde0
     61c:	5d343032 	ldcpl	0, cr3, [r4, #-200]!	; 0xffffff38
     620:	746d2d20 	strbtvc	r2, [sp], #-3360	; 0xfffff2e0
     624:	626d7568 	rsbvs	r7, sp, #104, 10	; 0x1a000000
     628:	616d2d20 	cmnvs	sp, r0, lsr #26
     62c:	3d686372 	stclcc	3, cr6, [r8, #-456]!	; 0xfffffe38
     630:	766d7261 	strbtvc	r7, [sp], -r1, ror #4
     634:	206d2d36 	rsbcs	r2, sp, r6, lsr sp
     638:	6c666d2d 	stclvs	13, cr6, [r6], #-180	; 0xffffff4c
     63c:	2d74616f 	ldfcse	f6, [r4, #-444]!	; 0xfffffe44
     640:	3d696261 	sfmcc	f6, 2, [r9, #-388]!	; 0xfffffe7c
     644:	74666f73 	strbtvc	r6, [r6], #-3955	; 0xfffff08d
     648:	746d2d20 	strbtvc	r2, [sp], #-3360	; 0xfffff2e0
     64c:	626d7568 	rsbvs	r7, sp, #104, 10	; 0x1a000000
     650:	616d2d20 	cmnvs	sp, r0, lsr #26
     654:	3d686372 	stclcc	3, cr6, [r8, #-456]!	; 0xfffffe38
     658:	766d7261 	strbtvc	r7, [sp], -r1, ror #4
     65c:	206d2d36 	rsbcs	r2, sp, r6, lsr sp
     660:	2d20672d 	stccs	7, cr6, [r0, #-180]!	; 0xffffff4c
     664:	2d20304f 	stccs	0, cr3, [r0, #-316]!	; 0xfffffec4
     668:	3d647473 	cfstrdcc	mvd7, [r4, #-460]!	; 0xfffffe34
     66c:	00393963 	eorseq	r3, r9, r3, ror #18
     670:	6e696f70 	mcrvs	15, 3, r6, cr9, cr0, {3}
     674:	00726574 	rsbseq	r6, r2, r4, ror r5
     678:	5f434352 	svcpl	0x00434352
     67c:	61656c43 	cmnvs	r5, r3, asr #24
     680:	616c4672 	smcvs	50274	; 0xc462
     684:	43520067 	cmpmi	r2, #103	; 0x67
     688:	53485f43 	movtpl	r5, #36675	; 0x8f43
     68c:	6e6f4345 	cdpvs	3, 6, cr4, cr15, cr5, {2}
     690:	00676966 	rsbeq	r6, r7, r6, ror #18
     694:	52434442 	subpl	r4, r3, #1107296256	; 0x42000000
     698:	43485300 	movtmi	r5, #33536	; 0x8300
     69c:	50005253 	andpl	r5, r0, r3, asr r2
     6a0:	495f4456 	ldmdbmi	pc, {r1, r2, r4, r6, sl, lr}^	; <UNPREDICTABLE>
     6a4:	006e5152 	rsbeq	r5, lr, r2, asr r1
     6a8:	5f434352 	svcpl	0x00434352
     6ac:	0045534c 	subeq	r5, r5, ip, asr #6
     6b0:	52495453 	subpl	r5, r9, #1392508928	; 0x53000000
     6b4:	43324900 	teqmi	r2, #0, 18
     6b8:	56455f31 			; <UNDEFINED> instruction: 0x56455f31
     6bc:	5152495f 	cmppl	r2, pc, asr r9
     6c0:	4352006e 	cmpmi	r2, #110	; 0x6e
     6c4:	41535f43 	cmpmi	r3, r3, asr #30
     6c8:	6f6c4249 	svcvs	0x006c4249
     6cc:	43416b63 	movtmi	r6, #7011	; 0x1b63
     6d0:	6f434b4c 	svcvs	0x00434b4c
     6d4:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
     6d8:	61747300 	cmnvs	r4, r0, lsl #6
     6dc:	70757472 	rsbsvc	r7, r5, r2, ror r4
     6e0:	6e756f63 	cdpvs	15, 7, cr6, cr5, cr3, {3}
     6e4:	00726574 	rsbseq	r6, r2, r4, ror r5
     6e8:	5f434352 	svcpl	0x00434352
     6ec:	534c4c50 	movtpl	r4, #52304	; 0xcc50
     6f0:	6f434941 	svcvs	0x00434941
     6f4:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
     6f8:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
     6fc:	69505f4f 	ldmdbvs	r0, {r0, r1, r2, r3, r6, r8, r9, sl, fp, ip, lr}^
     700:	4700736e 	strmi	r7, [r0, -lr, ror #6]
     704:	5f4f4950 	svcpl	0x004f4950
     708:	65646f4d 	strbvs	r6, [r4, #-3917]!	; 0xfffff0b3
     70c:	54554f5f 	ldrbpl	r4, [r5], #-3935	; 0xfffff0a1
     710:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
     714:	43435f31 	movtmi	r5, #16177	; 0x3f31
     718:	5152495f 	cmppl	r2, pc, asr r9
     71c:	4148006e 	cmpmi	r8, lr, rrx
     720:	525f4853 	subspl	r4, pc, #5439488	; 0x530000
     724:	495f474e 	ldmdbmi	pc, {r1, r2, r3, r6, r8, r9, sl, lr}^	; <UNPREDICTABLE>
     728:	006e5152 	rsbeq	r5, lr, r2, asr r1
     72c:	49545845 	ldmdbmi	r4, {r0, r2, r6, fp, ip, lr}^
     730:	52495f31 	subpl	r5, r9, #49, 30	; 0xc4
     734:	43006e51 	movwmi	r6, #3665	; 0xe51
     738:	5f314e41 	svcpl	0x00314e41
     73c:	495f5854 	ldmdbmi	pc, {r2, r4, r6, fp, ip, lr}^	; <UNPREDICTABLE>
     740:	006e5152 	rsbeq	r5, lr, r2, asr r1
     744:	31414d44 	cmpcc	r1, r4, asr #26
     748:	7274535f 	rsbsvc	r5, r4, #2080374785	; 0x7c000001
     74c:	356d6165 	strbcc	r6, [sp, #-357]!	; 0xfffffe9b
     750:	5152495f 	cmppl	r2, pc, asr r9
     754:	4352006e 	cmpmi	r2, #110	; 0x6e
     758:	53485f43 	movtpl	r5, #36675	; 0x8f43
     75c:	65640045 	strbvs	r0, [r4, #-69]!	; 0xffffffbb
     760:	74636574 	strbtvc	r6, [r3], #-1396	; 0xfffffa8c
     764:	6f6c435f 	svcvs	0x006c435f
     768:	5f646573 	svcpl	0x00646573
     76c:	726f6f44 	rsbvc	r6, pc, #68, 30	; 0x110
     770:	49540073 	ldmdbmi	r4, {r0, r1, r4, r5, r6}^
     774:	545f384d 	ldrbpl	r3, [pc], #-2125	; 77c <startup-0x1ffff884>
     778:	435f4752 	cmpmi	pc, #21495808	; 0x1480000
     77c:	545f4d4f 	ldrbpl	r4, [pc], #-3407	; 784 <startup-0x1ffff87c>
     780:	34314d49 	ldrtcc	r4, [r1], #-3401	; 0xfffff2b7
     784:	5152495f 	cmppl	r2, pc, asr r9
     788:	4d44006e 	stclmi	0, cr0, [r4, #-440]	; 0xfffffe48
     78c:	535f3241 	cmppl	pc, #268435460	; 0x10000004
     790:	61657274 	smcvs	22308	; 0x5724
     794:	495f376d 	ldmdbmi	pc, {r0, r2, r3, r5, r6, r8, r9, sl, ip, sp}^	; <UNPREDICTABLE>
     798:	006e5152 	rsbeq	r5, lr, r2, asr r1
     79c:	5f47544f 	svcpl	0x0047544f
     7a0:	495f5346 	ldmdbmi	pc, {r1, r2, r6, r8, r9, ip, lr}^	; <UNPREDICTABLE>
     7a4:	006e5152 	rsbeq	r5, lr, r2, asr r1
     7a8:	4d6e6f4e 	stclmi	15, cr6, [lr, #-312]!	; 0xfffffec8
     7ac:	616b7361 	cmnvs	fp, r1, ror #6
     7b0:	49656c62 	stmdbmi	r5!, {r1, r5, r6, sl, fp, sp, lr}^
     7b4:	495f746e 	ldmdbmi	pc, {r1, r2, r3, r5, r6, sl, ip, sp, lr}^	; <UNPREDICTABLE>
     7b8:	006e5152 	rsbeq	r5, lr, r2, asr r1
     7bc:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xfffff197
     7c0:	6f6f445f 	svcvs	0x006f445f
     7c4:	57007372 	smlsdxpl	r0, r2, r3, r7
     7c8:	5f474457 	svcpl	0x00474457
     7cc:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     7d0:	47544f00 	ldrbmi	r4, [r4, -r0, lsl #30]
     7d4:	5f53485f 	svcpl	0x0053485f
     7d8:	50554b57 	subspl	r4, r5, r7, asr fp
     7dc:	5152495f 	cmppl	r2, pc, asr r9
     7e0:	4352006e 	cmpmi	r2, #110	; 0x6e
     7e4:	50415f43 	subpl	r5, r1, r3, asr #30
     7e8:	65503242 	ldrbvs	r3, [r0, #-578]	; 0xfffffdbe
     7ec:	68706972 	ldmdavs	r0!, {r1, r4, r5, r6, r8, fp, sp, lr}^
     7f0:	636f6c43 	cmnvs	pc, #17152	; 0x4300
     7f4:	646d436b 	strbtvs	r4, [sp], #-875	; 0xfffffc95
     7f8:	43435200 	movtmi	r5, #12800	; 0x3200
     7fc:	4c4c505f 	mcrrmi	0, 5, r5, ip, cr15
     800:	44494153 	strbmi	r4, [r9], #-339	; 0xfffffead
     804:	00517669 	subseq	r7, r1, r9, ror #12
     808:	5f434352 	svcpl	0x00434352
     80c:	534c4c50 	movtpl	r4, #52304	; 0xcc50
     810:	69444941 	stmdbvs	r4, {r0, r6, r8, fp, lr}^
     814:	52005276 	andpl	r5, r0, #1610612743	; 0x60000007
     818:	535f4343 	cmppl	pc, #201326593	; 0xc000001
     81c:	6c424941 	mcrrvs	9, 4, r4, r2, cr1	; <UNPREDICTABLE>
     820:	426b636f 	rsbmi	r6, fp, #-1140850687	; 0xbc000001
     824:	534b4c43 	movtpl	r4, #48195	; 0xbc43
     828:	6372756f 	cmnvs	r2, #465567744	; 0x1bc00000
     82c:	654d0065 	strbvs	r0, [sp, #-101]	; 0xffffff9b
     830:	79726f6d 	ldmdbvc	r2!, {r0, r2, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
     834:	616e614d 	cmnvs	lr, sp, asr #2
     838:	656d6567 	strbvs	r6, [sp, #-1383]!	; 0xfffffa99
     83c:	495f746e 	ldmdbmi	pc, {r1, r2, r3, r5, r6, sl, ip, sp, lr}^	; <UNPREDICTABLE>
     840:	006e5152 	rsbeq	r5, lr, r2, asr r1
     844:	74737953 	ldrbtvc	r7, [r3], #-2387	; 0xfffff6ad
     848:	6f436d65 	svcvs	0x00436d65
     84c:	6c436572 	cfstr64vs	mvdx6, [r3], {114}	; 0x72
     850:	006b636f 	rsbeq	r6, fp, pc, ror #6
     854:	504d4154 	subpl	r4, sp, r4, asr r1
     858:	4154535f 	cmpmi	r4, pc, asr r3
     85c:	495f504d 	ldmdbmi	pc, {r0, r2, r3, r6, ip, lr}^	; <UNPREDICTABLE>
     860:	006e5152 	rsbeq	r5, lr, r2, asr r1
     864:	314e4143 	cmpcc	lr, r3, asr #2
     868:	4543535f 	strbmi	r5, [r3, #-863]	; 0xfffffca1
     86c:	5152495f 	cmppl	r2, pc, asr r9
     870:	645f006e 	ldrbvs	r0, [pc], #-110	; 878 <startup-0x1ffff788>
     874:	00726f6f 	rsbseq	r6, r2, pc, ror #30
     878:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     87c:	7079545f 	rsbsvc	r5, r9, pc, asr r4
     880:	50470065 	subpl	r0, r7, r5, rrx
     884:	4d5f4f49 	ldclmi	15, cr4, [pc, #-292]	; 768 <startup-0x1ffff898>
     888:	5f65646f 	svcpl	0x0065646f
     88c:	44004e49 	strmi	r4, [r0], #-3657	; 0xfffff1b7
     890:	5f32414d 	svcpl	0x0032414d
     894:	65727453 	ldrbvs	r7, [r2, #-1107]!	; 0xfffffbad
     898:	5f306d61 	svcpl	0x00306d61
     89c:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     8a0:	43435200 	movtmi	r5, #12800	; 0x3200
     8a4:	4f434d5f 	svcmi	0x00434d5f
     8a8:	6e6f4332 	mcrvs	3, 3, r4, cr15, cr2, {1}
     8ac:	00676966 	rsbeq	r6, r7, r6, ror #18
     8b0:	524b434c 	subpl	r4, fp, #76, 6	; 0x30000001
     8b4:	43435200 	movtmi	r5, #12800	; 0x3200
     8b8:	5332495f 	teqpl	r2, #1556480	; 0x17c000
     8bc:	534b4c43 	movtpl	r4, #48195	; 0xbc43
     8c0:	6372756f 	cmnvs	r2, #465567744	; 0x1bc00000
     8c4:	52450065 	subpl	r0, r5, #101	; 0x65
     8c8:	00524f52 	subseq	r4, r2, r2, asr pc
     8cc:	32433249 	subcc	r3, r3, #-1879048188	; 0x90000004
     8d0:	5f52455f 	svcpl	0x0052455f
     8d4:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     8d8:	54736d00 	ldrbtpl	r6, [r3], #-3328	; 0xfffff300
     8dc:	736b6369 	cmnvc	fp, #-1543503871	; 0xa4000001
     8e0:	43435200 	movtmi	r5, #12800	; 0x3200
     8e4:	4c43505f 	mcrrmi	0, 5, r5, r3, cr15
     8e8:	6f43314b 	svcvs	0x0043314b
     8ec:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
     8f0:	50534f00 	subspl	r4, r3, r0, lsl #30
     8f4:	52444545 	subpl	r4, r4, #289406976	; 0x11400000
     8f8:	73754200 	cmnvc	r5, #0, 4
     8fc:	6c756146 	ldfvse	f6, [r5], #-280	; 0xfffffee8
     900:	52495f74 	subpl	r5, r9, #116, 30	; 0x1d0
     904:	74006e51 	strvc	r6, [r0], #-3665	; 0xfffff1af
     908:	736b6369 	cmnvc	fp, #-1543503871	; 0xa4000001
     90c:	4c4c5000 	marmi	acc0, r5, ip
     910:	52474643 	subpl	r4, r7, #70254592	; 0x4300000
     914:	52415500 	subpl	r5, r1, #0, 10
     918:	495f3554 	ldmdbmi	pc, {r2, r4, r6, r8, sl, ip, sp}^	; <UNPREDICTABLE>
     91c:	006e5152 	rsbeq	r5, lr, r2, asr r1
     920:	314d4954 	cmpcc	sp, r4, asr r9
     924:	4b52425f 	blmi	14912a8 <startup-0x1eb6ed58>
     928:	4d49545f 	cfstrdmi	mvd5, [r9, #-380]	; 0xfffffe84
     92c:	52495f39 	subpl	r5, r9, #57, 30	; 0xe4
     930:	47006e51 	smlsdmi	r0, r1, lr, r6
     934:	5f4f4950 	svcpl	0x004f4950
     938:	7079544f 	rsbsvc	r5, r9, pc, asr #8
     93c:	5f5f0065 	svcpl	0x005f0065
     940:	746e6975 	strbtvc	r6, [lr], #-2421	; 0xfffff68b
     944:	745f3233 	ldrbvc	r3, [pc], #-563	; 94c <startup-0x1ffff6b4>
     948:	42504100 	subsmi	r4, r0, #0, 2
     94c:	50424841 	subpl	r4, r2, r1, asr #16
     950:	63736572 	cmnvs	r3, #478150656	; 0x1c800000
     954:	6c626154 	stfvse	f6, [r2], #-336	; 0xfffffeb0
     958:	50470065 	subpl	r0, r7, r5, rrx
     95c:	4d5f4f49 	ldclmi	15, cr4, [pc, #-292]	; 840 <startup-0x1ffff7c0>
     960:	75696465 	strbvc	r6, [r9, #-1125]!	; 0xfffffb9b
     964:	70535f6d 	subsvc	r5, r3, sp, ror #30
     968:	00646565 	rsbeq	r6, r4, r5, ror #10
     96c:	5f434352 	svcpl	0x00434352
     970:	50494153 	subpl	r4, r9, r3, asr r1
     974:	32494c4c 	subcc	r4, r9, #76, 24	; 0x4c00
     978:	6b6c4353 	blvs	1b116cc <startup-0x1e4ee934>
     97c:	43766944 	cmnmi	r6, #68, 18	; 0x110000
     980:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
     984:	49540067 	ldmdbmi	r4, {r0, r1, r2, r5, r6}^
     988:	495f374d 	ldmdbmi	pc, {r0, r2, r3, r6, r8, r9, sl, ip, sp}^	; <UNPREDICTABLE>
     98c:	006e5152 	rsbeq	r5, lr, r2, asr r1
     990:	676e6f6c 	strbvs	r6, [lr, -ip, ror #30]!
     994:	6e6f6c20 	cdpvs	12, 6, cr6, cr15, cr0, {1}
     998:	6e692067 	cdpvs	0, 6, cr2, cr9, cr7, {3}
     99c:	54450074 	strbpl	r0, [r5], #-116	; 0xffffff8c
     9a0:	4b575f48 	blmi	15d86c8 <startup-0x1ea27938>
     9a4:	495f5055 	ldmdbmi	pc, {r0, r2, r4, r6, ip, lr}^	; <UNPREDICTABLE>
     9a8:	006e5152 	rsbeq	r5, lr, r2, asr r1
     9ac:	5f47544f 	svcpl	0x0047544f
     9b0:	495f5348 	ldmdbmi	pc, {r3, r6, r8, r9, ip, lr}^	; <UNPREDICTABLE>
     9b4:	006e5152 	rsbeq	r5, lr, r2, asr r1
     9b8:	44505550 	ldrbmi	r5, [r0], #-1360	; 0xfffffab0
     9bc:	53530052 	cmppl	r3, #82	; 0x52
     9c0:	00524743 	subseq	r4, r2, r3, asr #14
     9c4:	31495053 	qdaddcc	r5, r3, r9
     9c8:	5152495f 	cmppl	r2, pc, asr r9
     9cc:	4944006e 	stmdbmi	r4, {r1, r2, r3, r5, r6}^
     9d0:	4c424153 	stfmie	f4, [r2], {83}	; 0x53
     9d4:	56530045 	ldrbpl	r0, [r3], -r5, asr #32
     9d8:	6c6c6143 	stfvse	f6, [ip], #-268	; 0xfffffef4
     9dc:	5152495f 	cmppl	r2, pc, asr r9
     9e0:	5041006e 	subpl	r0, r1, lr, rrx
     9e4:	53523242 	cmppl	r2, #536870916	; 0x20000004
     9e8:	42005254 	andmi	r5, r0, #84, 4	; 0x40000005
     9ec:	48525253 	ldmdami	r2, {r0, r1, r4, r6, r9, ip, lr}^
     9f0:	43435200 	movtmi	r5, #12800	; 0x3200
     9f4:	7465475f 	strbtvc	r4, [r5], #-1887	; 0xfffff8a1
     9f8:	67616c46 	strbvs	r6, [r1, -r6, asr #24]!
     9fc:	74617453 	strbtvc	r7, [r1], #-1107	; 0xfffffbad
     a00:	52007375 	andpl	r7, r0, #-738197503	; 0xd4000001
     a04:	435f4343 	cmpmi	pc, #201326593	; 0xc000001
     a08:	6b636f6c 	blvs	18dc7c0 <startup-0x1e723840>
     a0c:	53420073 	movtpl	r0, #8307	; 0x2073
     a10:	004c5252 	subeq	r5, ip, r2, asr r2
     a14:	4f495047 	svcmi	0x00495047
     a18:	6769485f 			; <UNDEFINED> instruction: 0x6769485f
     a1c:	70535f68 	subsvc	r5, r3, r8, ror #30
     a20:	00646565 	rsbeq	r6, r4, r5, ror #10
     a24:	5f434352 	svcpl	0x00434352
     a28:	6f435449 	svcvs	0x00435449
     a2c:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
     a30:	43435200 	movtmi	r5, #12800	; 0x3200
     a34:	4f434d5f 	svcmi	0x00434d5f
     a38:	6e6f4331 	mcrvs	3, 3, r4, cr15, cr1, {1}
     a3c:	00676966 	rsbeq	r6, r7, r6, ror #18
     a40:	5f434352 	svcpl	0x00434352
     a44:	43495348 	movtmi	r5, #37704	; 0x9348
     a48:	4600646d 	strmi	r6, [r0], -sp, ror #8
     a4c:	495f5550 	ldmdbmi	pc, {r4, r6, r8, sl, ip, lr}^	; <UNPREDICTABLE>
     a50:	006e5152 	rsbeq	r5, lr, r2, asr r1
     a54:	5f434352 	svcpl	0x00434352
     a58:	756a6441 	strbvc	r6, [sl, #-1089]!	; 0xfffffbbf
     a5c:	53487473 	movtpl	r7, #33907	; 0x8473
     a60:	6c614349 	stclvs	3, cr4, [r1], #-292	; 0xfffffedc
     a64:	61726269 	cmnvs	r2, r9, ror #4
     a68:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
     a6c:	756c6156 	strbvc	r6, [ip, #-342]!	; 0xfffffeaa
     a70:	41550065 	cmpmi	r5, r5, rrx
     a74:	5f345452 	svcpl	0x00345452
     a78:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     a7c:	42504100 	subsmi	r4, r0, #0, 2
     a80:	45504c32 	ldrbmi	r4, [r0, #-3122]	; 0xfffff3ce
     a84:	5200524e 	andpl	r5, r0, #-536870908	; 0xe0000004
     a88:	415f4343 	cmpmi	pc, r3, asr #6
     a8c:	50314250 	eorspl	r4, r1, r0, asr r2
     a90:	70697265 	rsbvc	r7, r9, r5, ror #4
     a94:	43520068 	cmpmi	r2, #104	; 0x68
     a98:	54525f43 	ldrbpl	r5, [r2], #-3907	; 0xfffff0bd
     a9c:	4b4c4343 	blmi	13117b0 <startup-0x1ecee850>
     aa0:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
     aa4:	4f006769 	svcmi	0x00006769
     aa8:	465f4754 			; <UNDEFINED> instruction: 0x465f4754
     aac:	4b575f53 	blmi	15d8800 <startup-0x1ea27800>
     ab0:	495f5055 	ldmdbmi	pc, {r0, r2, r4, r6, ip, lr}^	; <UNPREDICTABLE>
     ab4:	006e5152 	rsbeq	r5, lr, r2, asr r1
     ab8:	5f434352 	svcpl	0x00434352
     abc:	47414c46 	strbmi	r4, [r1, -r6, asr #24]
     ac0:	43435200 	movtmi	r5, #12800	; 0x3200
     ac4:	7465475f 	strbtvc	r4, [r5], #-1887	; 0xfffff8a1
     ac8:	74535449 	ldrbvc	r5, [r3], #-1097	; 0xfffffbb7
     acc:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
     ad0:	54584500 	ldrbpl	r4, [r8], #-1280	; 0xfffffb00
     ad4:	495f3449 	ldmdbmi	pc, {r0, r3, r6, sl, ip, sp}^	; <UNPREDICTABLE>
     ad8:	006e5152 	rsbeq	r5, lr, r2, asr r1
     adc:	4c525443 	cfldrdmi	mvd5, [r2], {67}	; 0x43
     ae0:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
     ae4:	41445f36 	cmpmi	r4, r6, lsr pc
     ae8:	52495f43 	subpl	r5, r9, #268	; 0x10c
     aec:	4e006e51 	mcrmi	14, 0, r6, cr0, cr1, {2}
     af0:	74537765 	ldrbvc	r7, [r3], #-1893	; 0xfffff89b
     af4:	00657461 	rsbeq	r7, r5, r1, ror #8
     af8:	4f495047 	svcmi	0x00495047
     afc:	6570535f 	ldrbvs	r5, [r0, #-863]!	; 0xfffffca1
     b00:	49006465 	stmdbmi	r0, {r0, r2, r5, r6, sl, sp, lr}
     b04:	5f324332 	svcpl	0x00324332
     b08:	495f5645 	ldmdbmi	pc, {r0, r2, r6, r9, sl, ip, lr}^	; <UNPREDICTABLE>
     b0c:	006e5152 	rsbeq	r5, lr, r2, asr r1
     b10:	5f434352 	svcpl	0x00434352
     b14:	61656c43 	cmnvs	r5, r3, asr #24
     b18:	50544972 	subspl	r4, r4, r2, ror r9
     b1c:	69646e65 	stmdbvs	r4!, {r0, r2, r5, r6, r9, sl, fp, sp, lr}^
     b20:	6942676e 	stmdbvs	r2, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}^
     b24:	43520074 	cmpmi	r2, #116	; 0x74
     b28:	6c435f43 	mcrrvs	15, 4, r5, r3, cr3
     b2c:	536b636f 	cmnpl	fp, #-1140850687	; 0xbc000001
     b30:	72756365 	rsbsvc	r6, r5, #-1811939327	; 0x94000001
     b34:	53797469 	cmnpl	r9, #1761607680	; 0x69000000
     b38:	65747379 	ldrbvs	r7, [r4, #-889]!	; 0xfffffc87
     b3c:	646d436d 	strbtvs	r4, [sp], #-877	; 0xfffffc93
     b40:	43435200 	movtmi	r5, #12800	; 0x3200
     b44:	4941535f 	stmdbmi	r1, {r0, r1, r2, r3, r4, r6, r8, r9, ip, lr}^
     b48:	636f6c42 	cmnvs	pc, #16896	; 0x4200
     b4c:	4c43416b 	stfmie	f4, [r3], {107}	; 0x6b
     b50:	756f534b 	strbvc	r5, [pc, #-843]!	; 80d <startup-0x1ffff7f3>
     b54:	00656372 	rsbeq	r6, r5, r2, ror r3
     b58:	74737973 	ldrbtvc	r7, [r3], #-2419	; 0xfffff68d
     b5c:	5f6b6369 	svcpl	0x006b6369
     b60:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xfffff1b7
     b64:	61747300 	cmnvs	r4, r0, lsl #6
     b68:	72737574 	rsbsvc	r7, r3, #116, 10	; 0x1d000000
     b6c:	52006765 	andpl	r6, r0, #26476544	; 0x1940000
     b70:	415f4343 	cmpmi	pc, r3, asr #6
     b74:	50324250 	eorspl	r4, r2, r0, asr r2
     b78:	70697265 	rsbvc	r7, r9, r5, ror #4
     b7c:	43520068 	cmpmi	r2, #104	; 0x68
     b80:	43485f43 	movtmi	r5, #36675	; 0x8f43
     b84:	6f434b4c 	svcvs	0x00434b4c
     b88:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
     b8c:	41464200 	mrsmi	r4, (UNDEF: 102)
     b90:	50410052 	subpl	r0, r1, r2, asr r0
     b94:	504c3142 	subpl	r3, ip, r2, asr #2
     b98:	00524e45 	subseq	r4, r2, r5, asr #28
     b9c:	31414d44 	cmpcc	r1, r4, asr #26
     ba0:	7274535f 	rsbsvc	r5, r4, #2080374785	; 0x7c000001
     ba4:	316d6165 	cmncc	sp, r5, ror #2
     ba8:	5152495f 	cmppl	r2, pc, asr r9
     bac:	6361006e 	cmnvs	r1, #110	; 0x6e
     bb0:	65766974 	ldrbvs	r6, [r6, #-2420]!	; 0xfffff68c
     bb4:	6f6f645f 	svcvs	0x006f645f
     bb8:	44007372 	strmi	r7, [r0], #-882	; 0xfffffc8e
     bbc:	5f32414d 	svcpl	0x0032414d
     bc0:	65727453 	ldrbvs	r7, [r2, #-1107]!	; 0xfffffbad
     bc4:	5f336d61 	svcpl	0x00336d61
     bc8:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     bcc:	474b4300 	strbmi	r4, [fp, -r0, lsl #6]
     bd0:	4e455441 	cdpmi	4, 4, cr5, cr5, cr1, {2}
     bd4:	41430052 	qdaddmi	r0, r2, r3
     bd8:	545f324e 	ldrbpl	r3, [pc], #-590	; be0 <startup-0x1ffff420>
     bdc:	52495f58 	subpl	r5, r9, #88, 30	; 0x160
     be0:	50006e51 	andpl	r6, r0, r1, asr lr
     be4:	41534c4c 	cmpmi	r3, ip, asr #24
     be8:	50004e49 	andpl	r4, r0, r9, asr #28
     bec:	41534c4c 	cmpmi	r3, ip, asr #24
     bf0:	50005149 	andpl	r5, r0, r9, asr #2
     bf4:	41534c4c 	cmpmi	r3, ip, asr #24
     bf8:	52005249 	andpl	r5, r0, #-1879048188	; 0x90000004
     bfc:	4d5f4343 	ldclmi	3, cr4, [pc, #-268]	; af8 <startup-0x1ffff508>
     c00:	53314f43 	teqpl	r1, #268	; 0x10c
     c04:	6372756f 	cmnvs	r2, #465567744	; 0x1bc00000
     c08:	43520065 	cmpmi	r2, #101	; 0x65
     c0c:	48415f43 	stmdami	r1, {r0, r1, r6, r8, r9, sl, fp, ip, lr}^
     c10:	65503342 	ldrbvs	r3, [r0, #-834]	; 0xfffffcbe
     c14:	68706972 	ldmdavs	r0!, {r1, r4, r5, r6, r8, fp, sp, lr}^
     c18:	636f6c43 	cmnvs	pc, #17152	; 0x4300
     c1c:	646d436b 	strbtvs	r4, [sp], #-875	; 0xfffffc95
     c20:	73795300 	cmnvc	r9, #0, 6
     c24:	6b636954 	blvs	18db17c <startup-0x1e724e84>
     c28:	7079545f 	rsbsvc	r5, r9, pc, asr r4
     c2c:	61530065 	cmpvs	r3, r5, rrx
     c30:	79746566 	ldmdbvc	r4!, {r1, r2, r5, r6, r8, sl, sp, lr}^
     c34:	006d754e 	rsbeq	r7, sp, lr, asr #10
     c38:	656d6974 	strbvs	r6, [sp, #-2420]!	; 0xfffff68c
     c3c:	6e65635f 	mcrvs	3, 3, r6, cr5, cr15, {2}
     c40:	6c617274 	sfmvs	f7, 2, [r1], #-464	; 0xfffffe30
     c44:	72616c5f 	rsbvc	r6, r1, #24320	; 0x5f00
     c48:	4352006d 	cmpmi	r2, #109	; 0x6d
     c4c:	4c505f43 	mrrcmi	15, 4, r5, r0, cr3
     c50:	646d434c 	strbtvs	r4, [sp], #-844	; 0xfffffcb4
     c54:	43435200 	movtmi	r5, #12800	; 0x3200
     c58:	6361425f 	cmnvs	r1, #-268435451	; 0xf0000005
     c5c:	5270756b 	rsbspl	r7, r0, #448790528	; 0x1ac00000
     c60:	74657365 	strbtvc	r7, [r5], #-869	; 0xfffffc9b
     c64:	00646d43 	rsbeq	r6, r4, r3, asr #26
     c68:	33424841 	movtcc	r4, #10305	; 0x2841
     c6c:	52545352 	subspl	r5, r4, #1207959553	; 0x48000001
     c70:	72724500 	rsbsvc	r4, r2, #0, 10
     c74:	7453726f 	ldrbvc	r7, [r3], #-623	; 0xfffffd91
     c78:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
     c7c:	414d4400 	cmpmi	sp, r0, lsl #8
     c80:	74535f31 	ldrbvc	r5, [r3], #-3889	; 0xfffff0cf
     c84:	6d616572 	cfstr64vs	mvdx6, [r1, #-456]!	; 0xfffffe38
     c88:	52495f30 	subpl	r5, r9, #48, 30	; 0xc0
     c8c:	73006e51 	movwvc	r6, #3665	; 0xe51
     c90:	74726174 	ldrbtvc	r6, [r2], #-372	; 0xfffffe8c
     c94:	52007075 	andpl	r7, r0, #117	; 0x75
     c98:	4d5f4343 	ldclmi	3, cr4, [pc, #-268]	; b94 <startup-0x1ffff46c>
     c9c:	53324f43 	teqpl	r2, #268	; 0x10c
     ca0:	6372756f 	cmnvs	r2, #465567744	; 0x1bc00000
     ca4:	50410065 	subpl	r0, r1, r5, rrx
     ca8:	53523142 	cmppl	r2, #-2147483632	; 0x80000010
     cac:	52005254 	andpl	r5, r0, #84, 4	; 0x40000005
     cb0:	415f4354 	cmpmi	pc, r4, asr r3	; <UNPREDICTABLE>
     cb4:	6d72616c 	ldfvse	f6, [r2, #-432]!	; 0xfffffe50
     cb8:	5152495f 	cmppl	r2, pc, asr r9
     cbc:	5041006e 	subpl	r0, r1, lr, rrx
     cc0:	4e453142 	dvfmism	f3, f5, f2
     cc4:	564e0052 			; <UNDEFINED> instruction: 0x564e0052
     cc8:	545f4349 	ldrbpl	r4, [pc], #-841	; cd0 <startup-0x1ffff330>
     ccc:	00657079 	rsbeq	r7, r5, r9, ror r0
     cd0:	636e7546 	cmnvs	lr, #293601280	; 0x11800000
     cd4:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
     cd8:	74536c61 	ldrbvc	r6, [r3], #-3169	; 0xfffff39f
     cdc:	00657461 	rsbeq	r7, r5, r1, ror #8
     ce0:	33433249 	movtcc	r3, #12873	; 0x3249
     ce4:	5f52455f 	svcpl	0x0052455f
     ce8:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     cec:	59524300 	ldmdbpl	r2, {r8, r9, lr}^
     cf0:	52495f50 	subpl	r5, r9, #80, 30	; 0x140
     cf4:	45006e51 	strmi	r6, [r0, #-3665]	; 0xfffff1af
     cf8:	31495458 	cmpcc	r9, r8, asr r4
     cfc:	30315f35 	eorscc	r5, r1, r5, lsr pc
     d00:	5152495f 	cmppl	r2, pc, asr r9
     d04:	6f6c006e 	svcvs	0x006c006e
     d08:	6c20676e 	stcvs	7, cr6, [r0], #-440	; 0xfffffe48
     d0c:	20676e6f 	rsbcs	r6, r7, pc, ror #28
     d10:	69736e75 	ldmdbvs	r3!, {r0, r2, r4, r5, r6, r9, sl, fp, sp, lr}^
     d14:	64656e67 	strbtvs	r6, [r5], #-3687	; 0xfffff199
     d18:	746e6920 	strbtvc	r6, [lr], #-2336	; 0xfffff6e0
     d1c:	43435200 	movtmi	r5, #12800	; 0x3200
     d20:	4f434d5f 	svcmi	0x00434d5f
     d24:	76694431 			; <UNDEFINED> instruction: 0x76694431
     d28:	6e656c00 	cdpvs	12, 6, cr6, cr5, cr0, {0}
     d2c:	00687467 	rsbeq	r7, r8, r7, ror #8
     d30:	334d4954 	movtcc	r4, #55636	; 0xd954
     d34:	5152495f 	cmppl	r2, pc, asr r9
     d38:	5355006e 	cmppl	r5, #110	; 0x6e
     d3c:	31545241 	cmpcc	r4, r1, asr #4
     d40:	5152495f 	cmppl	r2, pc, asr r9
     d44:	4352006e 	cmpmi	r2, #110	; 0x6e
     d48:	61575f43 	cmpvs	r7, r3, asr #30
     d4c:	6f467469 	svcvs	0x00467469
     d50:	45534872 	ldrbmi	r4, [r3, #-2162]	; 0xfffff78e
     d54:	72617453 	rsbvc	r7, r1, #1392508928	; 0x53000000
     d58:	00705574 	rsbseq	r5, r0, r4, ror r5
     d5c:	43435553 	movtmi	r5, #13651	; 0x3553
     d60:	00535345 	subseq	r5, r3, r5, asr #6
     d64:	4f495047 	svcmi	0x00495047
     d68:	646f4d5f 	strbtvs	r4, [pc], #-3423	; d70 <startup-0x1ffff290>
     d6c:	41430065 	cmpmi	r3, r5, rrx
     d70:	525f324e 	subspl	r3, pc, #-536870908	; 0xe0000004
     d74:	495f3158 	ldmdbmi	pc, {r3, r4, r6, r8, ip, sp}^	; <UNPREDICTABLE>
     d78:	006e5152 	rsbeq	r5, lr, r2, asr r1
     d7c:	5f434441 	svcpl	0x00434441
     d80:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     d84:	43435200 	movtmi	r5, #12800	; 0x3200
     d88:	45534c5f 	ldrbmi	r4, [r3, #-3167]	; 0xfffff3a1
     d8c:	65646f4d 	strbvs	r6, [r4, #-3917]!	; 0xfffff0b3
     d90:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
     d94:	49006769 	stmdbmi	r0, {r0, r3, r5, r6, r8, r9, sl, sp, lr}
     d98:	00524543 	subseq	r4, r2, r3, asr #10
     d9c:	33424841 	movtcc	r4, #10305	; 0x2841
     da0:	4e45504c 	cdpmi	0, 4, cr5, cr5, cr12, {2}
     da4:	50470052 	subpl	r0, r7, r2, asr r0
     da8:	6f4d4f49 	svcvs	0x004d4f49
     dac:	545f6564 	ldrbpl	r6, [pc], #-1380	; db4 <startup-0x1ffff24c>
     db0:	44657079 	strbtmi	r7, [r5], #-121	; 0xffffff87
     db4:	53006665 	movwpl	r6, #1637	; 0x665
     db8:	69547379 	ldmdbvs	r4, {r0, r3, r4, r5, r6, r8, r9, ip, sp, lr}^
     dbc:	435f6b63 	cmpmi	pc, #101376	; 0x18c00
     dc0:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
     dc4:	3a430067 	bcc	10c0f68 <startup-0x1ef3f098>
     dc8:	6573552f 	ldrbvs	r5, [r3, #-1327]!	; 0xfffffad1
     dcc:	412f7372 			; <UNDEFINED> instruction: 0x412f7372
     dd0:	746d6164 	strbtvc	r6, [sp], #-356	; 0xfffffe9c
     dd4:	656e4f2f 	strbvs	r4, [lr, #-3887]!	; 0xfffff0d1
     dd8:	76697244 	strbtvc	r7, [r9], -r4, asr #4
     ddc:	6f442f65 	svcvs	0x00442f65
     de0:	656d756b 	strbvs	r7, [sp, #-1387]!	; 0xfffffa95
     de4:	472f746e 	strmi	r7, [pc, -lr, ror #8]!
     de8:	75487469 	strbvc	r7, [r8, #-1129]	; 0xfffffb97
     dec:	41442f62 	cmpmi	r4, r2, ror #30
     df0:	30393254 	eorscc	r3, r9, r4, asr r2
     df4:	72614c2d 	rsbvc	r4, r1, #11520	; 0x2d00
     df8:	7379736d 	cmnvc	r9, #-1275068415	; 0xb4000001
     dfc:	2f6d6574 	svccs	0x006d6574
     e00:	2f646f6b 	svccs	0x00646f6b
     e04:	726f6f44 	rsbvc	r6, pc, #68, 30	; 0x110
     e08:	6174732f 	cmnvs	r4, pc, lsr #6
     e0c:	70757472 	rsbsvc	r7, r5, r2, ror r4
     e10:	4100632e 	tstmi	r0, lr, lsr #6
     e14:	00525346 	subseq	r5, r2, r6, asr #6
     e18:	5059544f 	subspl	r5, r9, pc, asr #8
     e1c:	43005245 	movwmi	r5, #581	; 0x245
     e20:	42494c41 	submi	r4, r9, #16640	; 0x4100
     e24:	706d7400 	rsbvc	r7, sp, r0, lsl #8
     e28:	00676572 	rsbeq	r6, r7, r2, ror r5
     e2c:	434d5346 	movtmi	r5, #54086	; 0xd346
     e30:	5152495f 	cmppl	r2, pc, asr r9
     e34:	6e69006e 	cdpvs	0, 6, cr0, cr9, cr14, {3}
     e38:	45007469 	strmi	r7, [r0, #-1129]	; 0xfffffb97
     e3c:	30495458 	subcc	r5, r9, r8, asr r4
     e40:	5152495f 	cmppl	r2, pc, asr r9
     e44:	4344006e 	movtmi	r0, #16494	; 0x406e
     e48:	4746434b 	strbmi	r4, [r6, -fp, asr #6]
     e4c:	43003252 	movwmi	r3, #594	; 0x252
     e50:	00525346 	subseq	r5, r2, r6, asr #6
     e54:	5f434352 	svcpl	0x00434352
     e58:	31424841 	cmpcc	r2, r1, asr #16
     e5c:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
     e60:	68006870 	stmdavs	r0, {r4, r5, r6, fp, sp, lr}
     e64:	74736573 	ldrbtvc	r6, [r3], #-1395	; 0xfffffa8d
     e68:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
     e6c:	414d4400 	cmpmi	sp, r0, lsl #8
     e70:	74535f31 	ldrbvc	r5, [r3], #-3889	; 0xfffff0cf
     e74:	6d616572 	cfstr64vs	mvdx6, [r1, #-456]!	; 0xfffffe38
     e78:	52495f34 	subpl	r5, r9, #52, 30	; 0xd0
     e7c:	47006e51 	smlsdmi	r0, r1, lr, r6
     e80:	5f4f4950 	svcpl	0x004f4950
     e84:	706d616c 	rsbvc	r6, sp, ip, ror #2
     e88:	414d4400 	cmpmi	sp, r0, lsl #8
     e8c:	74535f32 	ldrbvc	r5, [r3], #-3890	; 0xfffff0ce
     e90:	6d616572 	cfstr64vs	mvdx6, [r1, #-456]!	; 0xfffffe38
     e94:	52495f36 	subpl	r5, r9, #54, 30	; 0xd8
     e98:	41006e51 	tstmi	r0, r1, asr lr
     e9c:	45314248 	ldrmi	r4, [r1, #-584]!	; 0xfffffdb8
     ea0:	4c00524e 	sfmmi	f5, 4, [r0], {78}	; 0x4e
     ea4:	0044414f 	subeq	r4, r4, pc, asr #2
     ea8:	4f495047 	svcmi	0x00495047
     eac:	65657053 	strbvs	r7, [r5, #-83]!	; 0xffffffad
     eb0:	79545f64 	ldmdbvc	r4, {r2, r5, r6, r8, r9, sl, fp, ip, lr}^
     eb4:	65446570 	strbvs	r6, [r4, #-1392]	; 0xfffffa90
     eb8:	65440066 	strbvs	r0, [r4, #-102]	; 0xffffff9a
     ebc:	4d677562 	cfstr64mi	mvdx7, [r7, #-392]!	; 0xfffffe78
     ec0:	74696e6f 	strbtvc	r6, [r9], #-3695	; 0xfffff191
     ec4:	495f726f 	ldmdbmi	pc, {r0, r1, r2, r3, r5, r6, r9, ip, sp, lr}^	; <UNPREDICTABLE>
     ec8:	006e5152 	rsbeq	r5, lr, r2, asr r1
     ecc:	4f495047 	svcmi	0x00495047
     ed0:	6e69505f 	mcrvs	0, 3, r5, cr9, cr15, {2}
     ed4:	43435200 	movtmi	r5, #12800	; 0x3200
     ed8:	4248415f 	submi	r4, r8, #-1073741801	; 0xc0000017
     edc:	72655031 	rsbvc	r5, r5, #49	; 0x31
     ee0:	52687069 	rsbpl	r7, r8, #105	; 0x69
     ee4:	74657365 	strbtvc	r7, [r5], #-869	; 0xfffffc9b
     ee8:	00646d43 	rsbeq	r6, r4, r3, asr #26
     eec:	33433249 	movtcc	r3, #12873	; 0x3249
     ef0:	5f56455f 	svcpl	0x0056455f
     ef4:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     ef8:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
     efc:	75505f4f 	ldrbvc	r5, [r0, #-3919]	; 0xfffff0b1
     f00:	41006450 	tstmi	r0, r0, asr r4
     f04:	52324248 	eorspl	r4, r2, #72, 4	; 0x80000004
     f08:	00525453 	subseq	r5, r2, r3, asr r4
     f0c:	5f485445 	svcpl	0x00485445
     f10:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     f14:	43435200 	movtmi	r5, #12800	; 0x3200
     f18:	6f6c435f 	svcvs	0x006c435f
     f1c:	54736b63 	ldrbtpl	r6, [r3], #-2915	; 0xfffff49d
     f20:	44657079 	strbtmi	r7, [r5], #-121	; 0xffffff87
     f24:	4d006665 	stcmi	6, cr6, [r0, #-404]	; 0xfffffe6c
     f28:	0052464d 	subseq	r4, r2, sp, asr #12
     f2c:	5f434352 	svcpl	0x00434352
     f30:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0xfffff6ac
     f34:	00666544 	rsbeq	r6, r6, r4, asr #10
     f38:	41464d4d 	cmpmi	r6, sp, asr #26
     f3c:	68730052 	ldmdavs	r3!, {r1, r4, r6}^
     f40:	2074726f 	rsbscs	r7, r4, pc, ror #4
     f44:	00746e69 	rsbseq	r6, r4, r9, ror #28
     f48:	73736170 	cmnvc	r3, #112, 2
     f4c:	64726f77 	ldrbtvs	r6, [r2], #-3959	; 0xfffff089
     f50:	43435200 	movtmi	r5, #12800	; 0x3200
     f54:	5152495f 	cmppl	r2, pc, asr r9
     f58:	4352006e 	cmpmi	r2, #110	; 0x6e
     f5c:	54495f43 	strbpl	r5, [r9], #-3907	; 0xfffff0bd
     f60:	41534900 	cmpmi	r3, r0, lsl #18
     f64:	4d440052 	stclmi	0, cr0, [r4, #-328]	; 0xfffffeb8
     f68:	535f3141 	cmppl	pc, #1073741840	; 0x40000010
     f6c:	61657274 	smcvs	22308	; 0x5724
     f70:	495f336d 	ldmdbmi	pc, {r0, r2, r3, r5, r6, r8, r9, ip, sp}^	; <UNPREDICTABLE>
     f74:	006e5152 	rsbeq	r5, lr, r2, asr r1
     f78:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
     f7c:	495f3254 	ldmdbmi	pc, {r2, r4, r6, r9, ip, sp}^	; <UNPREDICTABLE>
     f80:	006e5152 	rsbeq	r5, lr, r2, asr r1
     f84:	73746962 	cmnvc	r4, #1605632	; 0x188000
     f88:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0xfffffe8c
     f8c:	4e450073 	mcrmi	0, 2, r0, cr5, cr3, {3}
     f90:	454c4241 	strbmi	r4, [ip, #-577]	; 0xfffffdbf
     f94:	6c6c7000 	stclvs	0, cr7, [ip], #-0
     f98:	006f6376 	rsbeq	r6, pc, r6, ror r3	; <UNPREDICTABLE>
     f9c:	5f434352 	svcpl	0x00434352
     fa0:	31425041 	cmpcc	r2, r1, asr #32
     fa4:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
     fa8:	6c436870 	mcrrvs	8, 7, r6, r3, cr0
     fac:	4c6b636f 	stclmi	3, cr6, [fp], #-444	; 0xfffffe44
     fb0:	646f4d50 	strbtvs	r4, [pc], #-3408	; fb8 <startup-0x1ffff048>
     fb4:	646d4365 	strbtvs	r4, [sp], #-869	; 0xfffffc9b
     fb8:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
     fbc:	79545f4f 	ldmdbvc	r4, {r0, r1, r2, r3, r6, r8, r9, sl, fp, ip, lr}^
     fc0:	65446570 	strbvs	r6, [r4, #-1392]	; 0xfffffa90
     fc4:	49540066 	ldmdbmi	r4, {r1, r2, r5, r6}^
     fc8:	555f314d 	ldrbpl	r3, [pc, #-333]	; e83 <startup-0x1ffff17d>
     fcc:	49545f50 	ldmdbmi	r4, {r4, r6, r8, r9, sl, fp, ip, lr}^
     fd0:	5f30314d 	svcpl	0x0030314d
     fd4:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     fd8:	4d544900 	vldrmi.16	s9, [r4, #-0]	; <UNPREDICTABLE>
     fdc:	4278525f 	rsbsmi	r5, r8, #-268435451	; 0xf0000005
     fe0:	65666675 	strbvs	r6, [r6, #-1653]!	; 0xfffff98b
     fe4:	4c500072 	mrrcmi	0, 7, r0, r0, cr2	; <UNPREDICTABLE>
     fe8:	5332494c 	teqpl	r2, #76, 18	; 0x130000
     fec:	4352004e 	cmpmi	r2, #78	; 0x4e
     ff0:	48415f43 	stmdami	r1, {r0, r1, r6, r8, r9, sl, fp, ip, lr}^
     ff4:	65503142 	ldrbvs	r3, [r0, #-322]	; 0xfffffebe
     ff8:	68706972 	ldmdavs	r0!, {r1, r4, r5, r6, r8, fp, sp, lr}^
     ffc:	636f6c43 	cmnvs	pc, #17152	; 0x4300
    1000:	4d504c6b 	ldclmi	12, cr4, [r0, #-428]	; 0xfffffe54
    1004:	4365646f 	cmnmi	r5, #1862270976	; 0x6f000000
    1008:	5000646d 	andpl	r6, r0, sp, ror #8
    100c:	32494c4c 	subcc	r4, r9, #76, 24	; 0x4c00
    1010:	6d005253 	sfmvs	f5, 4, [r0, #-332]	; 0xfffffeb4
    1014:	006e6961 	rsbeq	r6, lr, r1, ror #18
    1018:	5f47544f 	svcpl	0x0047544f
    101c:	455f5348 	ldrbmi	r5, [pc, #-840]	; cdc <startup-0x1ffff324>
    1020:	4f5f3150 	svcmi	0x005f3150
    1024:	495f5455 	ldmdbmi	pc, {r0, r2, r4, r6, sl, ip, lr}^	; <UNPREDICTABLE>
    1028:	006e5152 	rsbeq	r5, lr, r2, asr r1
    102c:	6d72616c 	ldfvse	f6, [r2, #-432]!	; 0xfffffe50
    1030:	6b636954 	blvs	18db588 <startup-0x1e724a78>
    1034:	43435200 	movtmi	r5, #12800	; 0x3200
    1038:	4354525f 	cmpmi	r4, #-268435451	; 0xf0000005
    103c:	434b4c43 	movtmi	r4, #48195	; 0xbc43
    1040:	4d00646d 	cfstrsmi	mvf6, [r0, #-436]	; 0xfffffe4c
    1044:	5245444f 	subpl	r4, r5, #1325400064	; 0x4f000000
    1048:	49564e00 	ldmdbmi	r6, {r9, sl, fp, lr}^
    104c:	65535f43 	ldrbvs	r5, [r3, #-3907]	; 0xfffff0bd
    1050:	69725074 	ldmdbvs	r2!, {r2, r4, r5, r6, ip, lr}^
    1054:	7469726f 	strbtvc	r7, [r9], #-623	; 0xfffffd91
    1058:	41430079 	hvcmi	12297	; 0x3009
    105c:	525f314e 	subspl	r3, pc, #-2147483629	; 0x80000013
    1060:	495f3158 	ldmdbmi	pc, {r3, r4, r6, r8, ip, sp}^	; <UNPREDICTABLE>
    1064:	006e5152 	rsbeq	r5, lr, r2, asr r1
    1068:	5f434352 	svcpl	0x00434352
    106c:	32424841 	subcc	r4, r2, #4259840	; 0x410000
    1070:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
    1074:	47006870 	smlsdxmi	r0, r0, r8, r6
    1078:	5f4f4950 	svcpl	0x004f4950
    107c:	64507550 	ldrbvs	r7, [r0], #-1360	; 0xfffffab0
    1080:	0050555f 	subseq	r5, r0, pc, asr r5
    1084:	49545845 	ldmdbmi	r4, {r0, r2, r6, fp, ip, lr}^
    1088:	5f355f39 	svcpl	0x00355f39
    108c:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
    1090:	4c4c5000 	marmi	acc0, r5, ip
    1094:	43494153 	movtmi	r4, #37203	; 0x9153
    1098:	00524746 	subseq	r4, r2, r6, asr #14
    109c:	5f434352 	svcpl	0x00434352
    10a0:	31424841 	cmpcc	r2, r1, asr #16
    10a4:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
    10a8:	6c436870 	mcrrvs	8, 7, r6, r3, cr0
    10ac:	436b636f 	cmnmi	fp, #-1140850687	; 0xbc000001
    10b0:	7300646d 	movwvc	r6, #1133	; 0x46d
    10b4:	74726f68 	ldrbtvc	r6, [r2], #-3944	; 0xfffff098
    10b8:	736e7520 	cmnvc	lr, #32, 10	; 0x8000000
    10bc:	656e6769 	strbvs	r6, [lr, #-1897]!	; 0xfffff897
    10c0:	6e692064 	cdpvs	0, 6, cr2, cr9, cr4, {3}
    10c4:	43520074 	cmpmi	r2, #116	; 0x74
    10c8:	4c505f43 	mrrcmi	15, 4, r5, r0, cr3
    10cc:	5332494c 	teqpl	r2, #76, 18	; 0x130000
    10d0:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    10d4:	54006769 	strpl	r6, [r0], #-1897	; 0xfffff897
    10d8:	5f384d49 	svcpl	0x00384d49
    10dc:	495f4343 	ldmdbmi	pc, {r0, r1, r6, r8, r9, lr}^	; <UNPREDICTABLE>
    10e0:	006e5152 	rsbeq	r5, lr, r2, asr r1
    10e4:	4f494453 	svcmi	0x00494453
    10e8:	5152495f 	cmppl	r2, pc, asr r9
    10ec:	5043006e 	subpl	r0, r3, lr, rrx
    10f0:	00524341 	subseq	r4, r2, r1, asr #6
    10f4:	52505349 	subspl	r5, r0, #603979777	; 0x24000001
    10f8:	53595300 	cmppl	r9, #0, 6
    10fc:	5f4b4c43 	svcpl	0x004b4c43
    1100:	71657246 	cmnvc	r5, r6, asr #4
    1104:	636e6575 	cmnvs	lr, #490733568	; 0x1d400000
    1108:	58450079 	stmdapl	r5, {r0, r3, r4, r5, r6}^
    110c:	5f334954 	svcpl	0x00334954
    1110:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
    1114:	6e655000 	cdpvs	0, 6, cr5, cr5, cr0, {0}
    1118:	5f565364 	svcpl	0x00565364
    111c:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
    1120:	47544f00 	ldrbmi	r4, [r4, -r0, lsl #30]
    1124:	5f53485f 	svcpl	0x0053485f
    1128:	5f315045 	svcpl	0x00315045
    112c:	495f4e49 	ldmdbmi	pc, {r0, r3, r6, r9, sl, fp, lr}^	; <UNPREDICTABLE>
    1130:	006e5152 	rsbeq	r5, lr, r2, asr r1
    1134:	31414d44 	cmpcc	r1, r4, asr #26
    1138:	7274535f 	rsbsvc	r5, r4, #2080374785	; 0x7c000001
    113c:	376d6165 	strbcc	r6, [sp, -r5, ror #2]!
    1140:	5152495f 	cmppl	r2, pc, asr r9
    1144:	5f5f006e 	svcpl	0x005f006e
    1148:	33746e69 	cmncc	r4, #1680	; 0x690
    114c:	00745f32 	rsbseq	r5, r4, r2, lsr pc
    1150:	5f434352 	svcpl	0x00434352
    1154:	434d4954 	movtmi	r4, #55636	; 0xd954
    1158:	72504b4c 	subsvc	r4, r0, #76, 22	; 0x13000
    115c:	61637365 	cmnvs	r3, r5, ror #6
    1160:	0072656c 	rsbseq	r6, r2, ip, ror #10
    1164:	52455349 	subpl	r5, r5, #603979777	; 0x24000001
    1168:	65727000 	ldrbvs	r7, [r2, #-0]!
    116c:	52006373 	andpl	r6, r0, #-872415231	; 0xcc000001
    1170:	415f4343 	cmpmi	pc, r3, asr #6
    1174:	50324248 	eorspl	r4, r2, r8, asr #4
    1178:	70697265 	rsbvc	r7, r9, r5, ror #4
    117c:	73655268 	cmnvc	r5, #104, 4	; 0x80000006
    1180:	6d437465 	cfstrdvs	mvd7, [r3, #-404]	; 0xfffffe6c
    1184:	43520064 	cmpmi	r2, #100	; 0x64
    1188:	4c505f43 	mrrcmi	15, 4, r5, r0, cr3
    118c:	4941534c 	stmdbmi	r1, {r2, r3, r6, r8, r9, ip, lr}^
    1190:	00646d43 	rsbeq	r6, r4, r3, asr #26
    1194:	33424841 	movtcc	r4, #10305	; 0x2841
    1198:	00524e45 	subseq	r4, r2, r5, asr #28
    119c:	5f434352 	svcpl	0x00434352
    11a0:	43535953 	cmpmi	r3, #1359872	; 0x14c000
    11a4:	6f434b4c 	svcvs	0x00434b4c
    11a8:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    11ac:	414d4400 	cmpmi	sp, r0, lsl #8
    11b0:	74535f32 	ldrbvc	r5, [r3], #-3890	; 0xfffff0ce
    11b4:	6d616572 	cfstr64vs	mvdx6, [r1, #-456]!	; 0xfffffe38
    11b8:	52495f32 	subpl	r5, r9, #50, 30	; 0xc8
    11bc:	47006e51 	smlsdmi	r0, r1, lr, r6
    11c0:	5f4f4950 	svcpl	0x004f4950
    11c4:	74736146 	ldrbtvc	r6, [r3], #-326	; 0xfffffeba
    11c8:	6570535f 	ldrbvs	r5, [r0, #-863]!	; 0xfffffca1
    11cc:	52006465 	andpl	r6, r0, #1694498816	; 0x65000000
    11d0:	505f4343 	subspl	r4, pc, r3, asr #6
    11d4:	6f434c4c 	svcvs	0x00434c4c
    11d8:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    11dc:	6c6c7000 	stclvs	0, cr7, [ip], #-0
    11e0:	6970006d 	ldmdbvs	r0!, {r0, r2, r3, r5, r6}^
    11e4:	736f706e 	cmnvc	pc, #110	; 0x6e
    11e8:	74694200 	strbtvc	r4, [r9], #-512	; 0xfffffe00
    11ec:	5445535f 	strbpl	r5, [r5], #-863	; 0xfffffca1
    11f0:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
    11f4:	65525f4f 	ldrbvs	r5, [r2, #-3919]	; 0xfffff0b1
    11f8:	754f6461 	strbvc	r6, [pc, #-1121]	; d9f <startup-0x1ffff261>
    11fc:	74757074 	ldrbtvc	r7, [r5], #-116	; 0xffffff8c
    1200:	61746144 	cmnvs	r4, r4, asr #2
    1204:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
    1208:	46415f4f 	strbmi	r5, [r1], -pc, asr #30
    120c:	6d657400 	cfstrdvs	mvd7, [r5, #-0]
    1210:	50470070 	subpl	r0, r7, r0, ror r0
    1214:	535f4f49 	cmppl	pc, #292	; 0x124
    1218:	63757274 	cmnvs	r5, #116, 4	; 0x40000007
    121c:	696e4974 	stmdbvs	lr!, {r2, r4, r5, r6, r8, fp, lr}^
    1220:	69420074 	stmdbvs	r2, {r2, r4, r5, r6}^
    1224:	6c615674 	stclvs	6, cr5, [r1], #-464	; 0xfffffe30
    1228:	74694200 	strbtvc	r4, [r9], #-512	; 0xfffffe00
    122c:	5345525f 	movtpl	r5, #21087	; 0x525f
    1230:	47005445 	strmi	r5, [r0, -r5, asr #8]
    1234:	5f4f4950 	svcpl	0x004f4950
    1238:	74697257 	strbtvc	r7, [r9], #-599	; 0xfffffda9
    123c:	74694265 	strbtvc	r4, [r9], #-613	; 0xfffffd9b
    1240:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
    1244:	65535f4f 	ldrbvs	r5, [r3, #-3919]	; 0xfffff0b1
    1248:	74694274 	strbtvc	r4, [r9], #-628	; 0xfffffd8c
    124c:	50470073 	subpl	r0, r7, r3, ror r0
    1250:	495f4f49 	ldmdbmi	pc, {r0, r3, r6, r8, r9, sl, fp, lr}^	; <UNPREDICTABLE>
    1254:	0074696e 	rsbseq	r6, r4, lr, ror #18
    1258:	4f495047 	svcmi	0x00495047
    125c:	7365525f 	cmnvc	r5, #-268435451	; 0xf0000005
    1260:	69427465 	stmdbvs	r2, {r0, r2, r5, r6, sl, ip, sp, lr}^
    1264:	43007374 	movwmi	r7, #884	; 0x374
    1268:	73552f3a 	cmpvc	r5, #58, 30	; 0xe8
    126c:	2f737265 	svccs	0x00737265
    1270:	6d616441 	cfstrdvs	mvd6, [r1, #-260]!	; 0xfffffefc
    1274:	6e4f2f74 	mcrvs	15, 2, r2, cr15, cr4, {3}
    1278:	69724465 	ldmdbvs	r2!, {r0, r2, r5, r6, sl, lr}^
    127c:	442f6576 	strtmi	r6, [pc], #-1398	; 1284 <startup-0x1fffed7c>
    1280:	6d756b6f 	fldmdbxvs	r5!, {d22-d76}	;@ Deprecated
    1284:	2f746e65 	svccs	0x00746e65
    1288:	48746947 	ldmdami	r4!, {r0, r1, r2, r6, r8, fp, sp, lr}^
    128c:	442f6275 	strtmi	r6, [pc], #-629	; 1294 <startup-0x1fffed6c>
    1290:	39325441 	ldmdbcc	r2!, {r0, r6, sl, ip, lr}
    1294:	614c2d30 	cmpvs	ip, r0, lsr sp
    1298:	79736d72 	ldmdbvc	r3!, {r1, r4, r5, r6, r8, sl, fp, sp, lr}^
    129c:	6d657473 	cfstrdvs	mvd7, [r5, #-460]!	; 0xfffffe34
    12a0:	646f6b2f 	strbtvs	r6, [pc], #-2863	; 12a8 <startup-0x1fffed58>
    12a4:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    12a8:	4d54532f 	ldclmi	3, cr5, [r4, #-188]	; 0xffffff44
    12ac:	34463233 	strbcc	r3, [r6], #-563	; 0xfffffdcd
    12b0:	62696c5f 	rsbvs	r6, r9, #24320	; 0x5f00
    12b4:	4d54532f 	ldclmi	3, cr5, [r4, #-188]	; 0xffffff44
    12b8:	34463233 	strbcc	r3, [r6], #-563	; 0xfffffdcd
    12bc:	535f7878 	cmppl	pc, #120, 16	; 0x780000
    12c0:	65506474 	ldrbvs	r6, [r0, #-1140]	; 0xfffffb8c
    12c4:	68706972 	ldmdavs	r0!, {r1, r4, r5, r6, r8, fp, sp, lr}^
    12c8:	6972445f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, sl, lr}^
    12cc:	2f726576 	svccs	0x00726576
    12d0:	2f637273 	svccs	0x00637273
    12d4:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
    12d8:	78346632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, sp, lr}
    12dc:	70675f78 	rsbvc	r5, r7, r8, ror pc
    12e0:	632e6f69 			; <UNDEFINED> instruction: 0x632e6f69
    12e4:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
    12e8:	65445f4f 	strbvs	r5, [r4, #-3919]	; 0xfffff0b1
    12ec:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xfffff1b7
    12f0:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
    12f4:	65525f4f 	ldrbvs	r5, [r2, #-3919]	; 0xfffff0b1
    12f8:	6e496461 	cdpvs	4, 4, cr6, cr9, cr1, {3}
    12fc:	44747570 	ldrbtmi	r7, [r4], #-1392	; 0xfffffa90
    1300:	42617461 	rsbmi	r7, r1, #1627389952	; 0x61000000
    1304:	47007469 	strmi	r7, [r0, -r9, ror #8]
    1308:	5f4f4950 	svcpl	0x004f4950
    130c:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xfffff1b7
    1310:	75727453 	ldrbvc	r7, [r2, #-1107]!	; 0xfffffbad
    1314:	50007463 	andpl	r7, r0, r3, ror #8
    1318:	5674726f 	ldrbtpl	r7, [r4], -pc, ror #4
    131c:	47006c61 	strmi	r6, [r0, -r1, ror #24]
    1320:	5f4f4950 	svcpl	0x004f4950
    1324:	536e6950 	cmnpl	lr, #80, 18	; 0x140000
    1328:	6372756f 	cmnvs	r2, #465567744	; 0x1bc00000
    132c:	50470065 	subpl	r0, r7, r5, rrx
    1330:	525f4f49 	subspl	r4, pc, #292	; 0x124
    1334:	49646165 	stmdbmi	r4!, {r0, r2, r5, r6, r8, sp, lr}^
    1338:	7475706e 	ldrbtvc	r7, [r5], #-110	; 0xffffff92
    133c:	61746144 	cmnvs	r4, r4, asr #2
    1340:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
    1344:	69505f4f 	ldmdbvs	r0, {r0, r1, r2, r3, r6, r8, r9, sl, fp, ip, lr}^
    1348:	636f4c6e 	cmnvs	pc, #28160	; 0x6e00
    134c:	6e6f436b 	cdpvs	3, 6, cr4, cr15, cr11, {3}
    1350:	00676966 	rsbeq	r6, r7, r6, ror #18
    1354:	41746942 	cmnmi	r4, r2, asr #18
    1358:	6f697463 	svcvs	0x00697463
    135c:	7563006e 	strbvc	r0, [r3, #-110]!	; 0xffffff92
    1360:	6e657272 	mcrvs	2, 3, r7, cr5, cr2, {3}
    1364:	6e697074 	mcrvs	0, 3, r7, cr9, cr4, {3}
    1368:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
    136c:	72575f4f 	subsvc	r5, r7, #316	; 0x13c
    1370:	00657469 	rsbeq	r7, r5, r9, ror #8
    1374:	4f495047 	svcmi	0x00495047
    1378:	50470078 	subpl	r0, r7, r8, ror r0
    137c:	545f4f49 	ldrbpl	r4, [pc], #-3913	; 1384 <startup-0x1fffec7c>
    1380:	6c67676f 	stclvs	7, cr6, [r7], #-444	; 0xfffffe44
    1384:	74694265 	strbtvc	r4, [r9], #-613	; 0xfffffd9b
    1388:	65740073 	ldrbvs	r0, [r4, #-115]!	; 0xffffff8d
    138c:	325f706d 	subscc	r7, pc, #109	; 0x6d
    1390:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
    1394:	69505f4f 	ldmdbvs	r0, {r0, r1, r2, r3, r6, r8, r9, sl, fp, ip, lr}^
    1398:	4346416e 	movtmi	r4, #24942	; 0x616e
    139c:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    13a0:	50470067 	subpl	r0, r7, r7, rrx
    13a4:	525f4f49 	subspl	r4, pc, #292	; 0x124
    13a8:	4f646165 	svcmi	0x00646165
    13ac:	75707475 	ldrbvc	r7, [r0, #-1141]!	; 0xfffffb8b
    13b0:	74614474 	strbtvc	r4, [r1], #-1140	; 0xfffffb8c
    13b4:	74694261 	strbtvc	r4, [r9], #-609	; 0xfffffd9f
    13b8:	49564e00 	ldmdbmi	r6, {r9, sl, fp, lr}^
    13bc:	6e495f43 	cdpvs	15, 4, cr5, cr9, cr3, {2}
    13c0:	79547469 	ldmdbvc	r4, {r0, r3, r5, r6, sl, ip, sp, lr}^
    13c4:	65446570 	strbvs	r6, [r4, #-1392]	; 0xfffffa90
    13c8:	564e0066 	strbpl	r0, [lr], -r6, rrx
    13cc:	495f4349 	ldmdbmi	pc, {r0, r3, r6, r8, r9, lr}^	; <UNPREDICTABLE>
    13d0:	68435152 	stmdavs	r3, {r1, r4, r6, r8, ip, lr}^
    13d4:	656e6e61 	strbvs	r6, [lr, #-3681]!	; 0xfffff19f
    13d8:	646d436c 	strbtvs	r4, [sp], #-876	; 0xfffffc94
    13dc:	73795300 	cmnvc	r9, #0, 6
    13e0:	6b636954 	blvs	18db938 <startup-0x1e7246c8>
    13e4:	4b4c435f 	blmi	1312168 <startup-0x1ecede98>
    13e8:	72756f53 	rsbsvc	r6, r5, #332	; 0x14c
    13ec:	4e006563 	cfsh32mi	mvfx6, mvfx0, #51
    13f0:	5f434956 	svcpl	0x00434956
    13f4:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xfffff1b7
    13f8:	75727453 	ldrbvc	r7, [r2, #-1107]!	; 0xfffffbad
    13fc:	4e007463 	cdpmi	4, 0, cr7, cr0, cr3, {3}
    1400:	5f434956 	svcpl	0x00434956
    1404:	6f697250 	svcvs	0x00697250
    1408:	79746972 	ldmdbvc	r4!, {r1, r4, r5, r6, r8, fp, sp, lr}^
    140c:	756f7247 	strbvc	r7, [pc, #-583]!	; 11cd <startup-0x1fffee33>
    1410:	564e0070 			; <UNDEFINED> instruction: 0x564e0070
    1414:	495f4349 	ldmdbmi	pc, {r0, r3, r6, r8, r9, lr}^	; <UNPREDICTABLE>
    1418:	0074696e 	rsbseq	r6, r4, lr, ror #18
    141c:	70706d74 	rsbsvc	r6, r0, r4, ror sp
    1420:	4f006572 	svcmi	0x00006572
    1424:	65736666 	ldrbvs	r6, [r3, #-1638]!	; 0xfffff99a
    1428:	564e0074 			; <UNDEFINED> instruction: 0x564e0074
    142c:	535f4349 	cmppl	pc, #603979777	; 0x24000001
    1430:	65567465 	ldrbvs	r7, [r6, #-1125]	; 0xfffffb9b
    1434:	726f7463 	rsbvc	r7, pc, #1660944384	; 0x63000000
    1438:	6c626154 	stfvse	f6, [r2], #-336	; 0xfffffeb0
    143c:	6d740065 	ldclvs	0, cr0, [r4, #-404]!	; 0xfffffe6c
    1440:	62757370 	rsbsvs	r7, r5, #112, 6	; 0xc0000001
    1444:	49564e00 	ldmdbmi	r6, {r9, sl, fp, lr}^
    1448:	79535f43 	ldmdbvc	r3, {r0, r1, r6, r8, r9, sl, fp, ip, lr}^
    144c:	6d657473 	cfstrdvs	mvd7, [r5, #-460]!	; 0xfffffe34
    1450:	6f43504c 	svcvs	0x0043504c
    1454:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    1458:	73795300 	cmnvc	r9, #0, 6
    145c:	6b636954 	blvs	18db9b4 <startup-0x1e72464c>
    1460:	4b4c435f 	blmi	13121e4 <startup-0x1ecede1c>
    1464:	72756f53 	rsbsvc	r6, r5, #332	; 0x14c
    1468:	6f436563 	svcvs	0x00436563
    146c:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    1470:	706d7400 	rsbvc	r7, sp, r0, lsl #8
    1474:	6f697270 	svcvs	0x00697270
    1478:	79746972 	ldmdbvc	r4!, {r1, r4, r5, r6, r8, fp, sp, lr}^
    147c:	49564e00 	ldmdbmi	r6, {r9, sl, fp, lr}^
    1480:	52495f43 	subpl	r5, r9, #268	; 0x10c
    1484:	61684351 	cmnvs	r8, r1, asr r3
    1488:	6c656e6e 	stclvs	14, cr6, [r5], #-440	; 0xfffffe48
    148c:	49564e00 	ldmdbmi	r6, {r9, sl, fp, lr}^
    1490:	52495f43 	subpl	r5, r9, #268	; 0x10c
    1494:	61684351 	cmnvs	r8, r1, asr r3
    1498:	6c656e6e 	stclvs	14, cr6, [r5], #-440	; 0xfffffe48
    149c:	50627553 	rsbpl	r7, r2, r3, asr r5
    14a0:	726f6972 	rsbvc	r6, pc, #1867776	; 0x1c8000
    14a4:	00797469 	rsbseq	r7, r9, r9, ror #8
    14a8:	4349564e 	movtmi	r5, #38478	; 0x964e
    14ac:	5152495f 	cmppl	r2, pc, asr r9
    14b0:	6e616843 	cdpvs	8, 6, cr6, cr1, cr3, {2}
    14b4:	506c656e 	rsbpl	r6, ip, lr, ror #10
    14b8:	6d656572 	cfstr64vs	mvdx6, [r5, #-456]!	; 0xfffffe38
    14bc:	6f697470 	svcvs	0x00697470
    14c0:	6972506e 	ldmdbvs	r2!, {r1, r2, r3, r5, r6, ip, lr}^
    14c4:	7469726f 	strbtvc	r7, [r9], #-623	; 0xfffffd91
    14c8:	564e0079 			; <UNDEFINED> instruction: 0x564e0079
    14cc:	565f4349 	ldrbpl	r4, [pc], -r9, asr #6
    14d0:	54746365 	ldrbtpl	r6, [r4], #-869	; 0xfffffc9b
    14d4:	43006261 	movwmi	r6, #609	; 0x261
    14d8:	73552f3a 	cmpvc	r5, #58, 30	; 0xe8
    14dc:	2f737265 	svccs	0x00737265
    14e0:	6d616441 	cfstrdvs	mvd6, [r1, #-260]!	; 0xfffffefc
    14e4:	6e4f2f74 	mcrvs	15, 2, r2, cr15, cr4, {3}
    14e8:	69724465 	ldmdbvs	r2!, {r0, r2, r5, r6, sl, lr}^
    14ec:	442f6576 	strtmi	r6, [pc], #-1398	; 14f4 <startup-0x1fffeb0c>
    14f0:	6d756b6f 	fldmdbxvs	r5!, {d22-d76}	;@ Deprecated
    14f4:	2f746e65 	svccs	0x00746e65
    14f8:	48746947 	ldmdami	r4!, {r0, r1, r2, r6, r8, fp, sp, lr}^
    14fc:	442f6275 	strtmi	r6, [pc], #-629	; 1504 <startup-0x1fffeafc>
    1500:	39325441 	ldmdbcc	r2!, {r0, r6, sl, ip, lr}
    1504:	614c2d30 	cmpvs	ip, r0, lsr sp
    1508:	79736d72 	ldmdbvc	r3!, {r1, r4, r5, r6, r8, sl, fp, sp, lr}^
    150c:	6d657473 	cfstrdvs	mvd7, [r5, #-460]!	; 0xfffffe34
    1510:	646f6b2f 	strbtvs	r6, [pc], #-2863	; 1518 <startup-0x1fffeae8>
    1514:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    1518:	4d54532f 	ldclmi	3, cr5, [r4, #-188]	; 0xffffff44
    151c:	34463233 	strbcc	r3, [r6], #-563	; 0xfffffdcd
    1520:	62696c5f 	rsbvs	r6, r9, #24320	; 0x5f00
    1524:	4d54532f 	ldclmi	3, cr5, [r4, #-188]	; 0xffffff44
    1528:	34463233 	strbcc	r3, [r6], #-563	; 0xfffffdcd
    152c:	535f7878 	cmppl	pc, #120, 16	; 0x780000
    1530:	65506474 	ldrbvs	r6, [r0, #-1140]	; 0xfffffb8c
    1534:	68706972 	ldmdavs	r0!, {r1, r4, r5, r6, r8, fp, sp, lr}^
    1538:	6972445f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, sl, lr}^
    153c:	2f726576 	svccs	0x00726576
    1540:	2f637273 	svccs	0x00637273
    1544:	6373696d 	cmnvs	r3, #1785856	; 0x1b4000
    1548:	4c00632e 	stcmi	3, cr6, [r0], {46}	; 0x2e
    154c:	6f50776f 	svcvs	0x0050776f
    1550:	4d726577 	cfldr64mi	mvdx6, [r2, #-476]!	; 0xfffffe24
    1554:	0065646f 	rsbeq	r6, r5, pc, ror #8
    1558:	4349564e 	movtmi	r5, #38478	; 0x964e
    155c:	6972505f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, ip, lr}^
    1560:	7469726f 	strbtvc	r7, [r9], #-623	; 0xfffffd91
    1564:	6f724779 	svcvs	0x00724779
    1568:	6f437075 	svcvs	0x00437075
    156c:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    1570:	66756200 	ldrbtvs	r6, [r5], -r0, lsl #4
    1574:	50726566 	rsbspl	r6, r2, r6, ror #10
    1578:	63007475 	movwvs	r7, #1141	; 0x475
    157c:	746e756f 	strbtvc	r7, [lr], #-1391	; 0xfffffa91
    1580:	2f3a4300 	svccs	0x003a4300
    1584:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
    1588:	64412f73 	strbvs	r2, [r1], #-3955	; 0xfffff08d
    158c:	2f746d61 	svccs	0x00746d61
    1590:	44656e4f 	strbtmi	r6, [r5], #-3663	; 0xfffff1b1
    1594:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
    1598:	6b6f442f 	blvs	1bd265c <startup-0x1e42d9a4>
    159c:	6e656d75 	mcrvs	13, 3, r6, cr5, cr5, {3}
    15a0:	69472f74 	stmdbvs	r7, {r2, r4, r5, r6, r8, r9, sl, fp, sp}^
    15a4:	62754874 	rsbsvs	r4, r5, #116, 16	; 0x740000
    15a8:	5441442f 	strbpl	r4, [r1], #-1071	; 0xfffffbd1
    15ac:	2d303932 			; <UNDEFINED> instruction: 0x2d303932
    15b0:	6d72614c 	ldfvse	f6, [r2, #-304]!	; 0xfffffed0
    15b4:	74737973 	ldrbtvc	r7, [r3], #-2419	; 0xfffff68d
    15b8:	6b2f6d65 	blvs	bdcb54 <startup-0x1f4234ac>
    15bc:	6c2f646f 	cfstrsvs	mvf6, [pc], #-444	; 1408 <startup-0x1fffebf8>
    15c0:	622f6269 	eorvs	r6, pc, #-1879048186	; 0x90000006
    15c4:	65666675 	strbvs	r6, [r6, #-1653]!	; 0xfffff98b
    15c8:	00632e72 	rsbeq	r2, r3, r2, ror lr
    15cc:	4f464946 	svcmi	0x00464946
    15d0:	73656400 	cmnvc	r5, #0, 8
    15d4:	75620074 	strbvc	r0, [r2, #-116]!	; 0xffffff8c
    15d8:	65006666 	strvs	r6, [r0, #-1638]	; 0xfffff99a
    15dc:	006d656c 	rsbeq	r6, sp, ip, ror #10
    15e0:	66667562 	strbtvs	r7, [r6], -r2, ror #10
    15e4:	65477265 	strbvs	r7, [r7, #-613]	; 0xfffffd9b
    15e8:	75620074 	strbvc	r0, [r2, #-116]!	; 0xffffff8c
    15ec:	72656666 	rsbvc	r6, r5, #106954752	; 0x6600000
    15f0:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xfffff1b7
    15f4:	66756200 	ldrbtvs	r6, [r5], -r0, lsl #4
    15f8:	00726566 	rsbseq	r6, r2, r6, ror #10
    15fc:	65746e69 	ldrbvs	r6, [r4, #-3689]!	; 0xfffff197
    1600:	64726567 	ldrbtvs	r6, [r2], #-1383	; 0xfffffa99
    1604:	64697669 	strbtvs	r7, [r9], #-1641	; 0xfffff997
    1608:	55007265 	strpl	r7, [r0, #-613]	; 0xfffffd9b
    160c:	54524153 	ldrbpl	r4, [r2], #-339	; 0xfffffead
    1610:	4850435f 	ldmdami	r0, {r0, r1, r2, r3, r4, r6, r8, r9, lr}^
    1614:	54470041 	strbpl	r0, [r7], #-65	; 0xffffffbf
    1618:	55005250 	strpl	r5, [r0, #-592]	; 0xfffffdb0
    161c:	54524153 	ldrbpl	r4, [r2], #-339	; 0xfffffead
    1620:	6365525f 	cmnvs	r5, #-268435451	; 0xf0000005
    1624:	65766965 	ldrbvs	r6, [r6, #-2405]!	; 0xfffff69b
    1628:	6b615772 	blvs	18573f8 <startup-0x1e7a8c08>
    162c:	43705565 	cmnmi	r0, #423624704	; 0x19400000
    1630:	5500646d 	strpl	r6, [r0, #-1133]	; 0xfffffb93
    1634:	54524153 	ldrbpl	r4, [r2], #-339	; 0xfffffead
    1638:	7465535f 	strbtvc	r5, [r5], #-863	; 0xfffffca1
    163c:	73657250 	cmnvc	r5, #80, 4
    1640:	656c6163 	strbvs	r6, [ip, #-355]!	; 0xfffffe9d
    1644:	53550072 	cmppl	r5, #114	; 0x72
    1648:	5f545241 	svcpl	0x00545241
    164c:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xfffff1b7
    1650:	41535500 	cmpmi	r3, r0, lsl #10
    1654:	4c5f5452 	cfldrdmi	mvd5, [pc], {82}	; 0x52
    1658:	72424e49 	subvc	r4, r2, #1168	; 0x490
    165c:	446b6165 	strbtmi	r6, [fp], #-357	; 0xfffffe9b
    1660:	63657465 	cmnvs	r5, #1694498816	; 0x65000000
    1664:	6e654c74 	mcrvs	12, 3, r4, cr5, cr4, {3}
    1668:	00687467 	rsbeq	r7, r8, r7, ror #8
    166c:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    1670:	6e4f5f54 	mcrvs	15, 2, r5, cr15, cr4, {2}
    1674:	74694265 	strbtvc	r4, [r9], #-613	; 0xfffffd9b
    1678:	6874654d 	ldmdavs	r4!, {r0, r2, r3, r6, r8, sl, sp, lr}^
    167c:	6d43646f 	cfstrdvs	mvd6, [r3, #-444]	; 0xfffffe44
    1680:	53550064 	cmppl	r5, #100	; 0x64
    1684:	5f545241 	svcpl	0x00545241
    1688:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0xfffff6ac
    168c:	00666544 	rsbeq	r6, r6, r4, asr #10
    1690:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    1694:	74535f54 	ldrbvc	r5, [r3], #-3924	; 0xfffff0ac
    1698:	6942706f 	stmdbvs	r2, {r0, r1, r2, r3, r5, r6, ip, sp, lr}^
    169c:	55007374 	strpl	r7, [r0, #-884]	; 0xfffffc8c
    16a0:	54524153 	ldrbpl	r4, [r2], #-339	; 0xfffffead
    16a4:	6f6c435f 	svcvs	0x006c435f
    16a8:	6e496b63 	vmlsvs.f64	d22, d9, d19
    16ac:	79547469 	ldmdbvc	r4, {r0, r3, r5, r6, sl, ip, sp, lr}^
    16b0:	65446570 	strbvs	r6, [r4, #-1392]	; 0xfffffa90
    16b4:	53550066 	cmppl	r5, #102	; 0x66
    16b8:	5f545241 	svcpl	0x00545241
    16bc:	00646d43 	rsbeq	r6, r4, r3, asr #26
    16c0:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    16c4:	65535f54 	ldrbvs	r5, [r3, #-3924]	; 0xfffff0ac
    16c8:	6144646e 	cmpvs	r4, lr, ror #8
    16cc:	55006174 	strpl	r6, [r0, #-372]	; 0xfffffe8c
    16d0:	54524153 	ldrbpl	r4, [r2], #-339	; 0xfffffead
    16d4:	6b61575f 	blvs	1857458 <startup-0x1e7a8ba8>
    16d8:	00705565 	rsbseq	r5, r0, r5, ror #10
    16dc:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    16e0:	6f575f54 	svcvs	0x00575f54
    16e4:	654c6472 	strbvs	r6, [ip, #-1138]	; 0xfffffb8e
    16e8:	6874676e 	ldmdavs	r4!, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}^
    16ec:	41535500 	cmpmi	r3, r0, lsl #10
    16f0:	445f5452 	ldrbmi	r5, [pc], #-1106	; 16f8 <startup-0x1fffe908>
    16f4:	6d43414d 	stfvse	f4, [r3, #-308]	; 0xfffffecc
    16f8:	53550064 	cmppl	r5, #100	; 0x64
    16fc:	5f545241 	svcpl	0x00545241
    1700:	7473614c 	ldrbtvc	r6, [r3], #-332	; 0xfffffeb4
    1704:	00746942 	rsbseq	r6, r4, r2, asr #18
    1708:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    170c:	61425f54 	cmpvs	r2, r4, asr pc
    1710:	61526475 	cmpvs	r2, r5, ror r4
    1714:	55006574 	strpl	r6, [r0, #-1396]	; 0xfffffa8c
    1718:	54524153 	ldrbpl	r4, [r2], #-339	; 0xfffffead
    171c:	4472495f 	ldrbtmi	r4, [r2], #-2399	; 0xfffff6a1
    1720:	646f4d41 	strbtvs	r4, [pc], #-3393	; 1728 <startup-0x1fffe8d8>
    1724:	70610065 	rsbvc	r0, r1, r5, rrx
    1728:	6f6c6362 	svcvs	0x006c6362
    172c:	55006b63 	strpl	r6, [r0, #-2915]	; 0xfffff49d
    1730:	54524153 	ldrbpl	r4, [r2], #-339	; 0xfffffead
    1734:	656c435f 	strbvs	r4, [ip, #-863]!	; 0xfffffca1
    1738:	54497261 	strbpl	r7, [r9], #-609	; 0xfffffd9f
    173c:	646e6550 	strbtvs	r6, [lr], #-1360	; 0xfffffab0
    1740:	42676e69 	rsbmi	r6, r7, #1680	; 0x690
    1744:	55007469 	strpl	r7, [r0, #-1129]	; 0xfffffb97
    1748:	54524153 	ldrbpl	r4, [r2], #-339	; 0xfffffead
    174c:	6175475f 	cmnvs	r5, pc, asr r7
    1750:	69546472 	ldmdbvs	r4, {r1, r4, r5, r6, sl, sp, lr}^
    1754:	5500656d 	strpl	r6, [r0, #-1389]	; 0xfffffa93
    1758:	54524153 	ldrbpl	r4, [r2], #-339	; 0xfffffead
    175c:	4e494c5f 	mcrmi	12, 2, r4, cr9, cr15, {2}
    1760:	61657242 	cmnvs	r5, r2, asr #4
    1764:	7465446b 	strbtvc	r4, [r5], #-1131	; 0xfffffb95
    1768:	4c746365 	ldclmi	3, cr6, [r4], #-404	; 0xfffffe6c
    176c:	74676e65 	strbtvc	r6, [r7], #-3685	; 0xfffff19b
    1770:	6e6f4368 	cdpvs	3, 6, cr4, cr15, cr8, {3}
    1774:	00676966 	rsbeq	r6, r7, r6, ror #18
    1778:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    177c:	4c465f54 	mcrrmi	15, 5, r5, r6, cr4
    1780:	55004741 	strpl	r4, [r0, #-1857]	; 0xfffff8bf
    1784:	54524153 	ldrbpl	r4, [r2], #-339	; 0xfffffead
    1788:	4965445f 	stmdbmi	r5!, {r0, r1, r2, r3, r4, r6, sl, lr}^
    178c:	0074696e 	rsbseq	r6, r4, lr, ror #18
    1790:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    1794:	6c435f54 	mcrrvs	15, 5, r5, r3, cr4
    1798:	496b636f 	stmdbmi	fp!, {r0, r1, r2, r3, r5, r6, r8, r9, sp, lr}^
    179c:	5374696e 	cmnpl	r4, #1802240	; 0x1b8000
    17a0:	63757274 	cmnvs	r5, #116, 4	; 0x40000007
    17a4:	53550074 	cmppl	r5, #116	; 0x74
    17a8:	5f545241 	svcpl	0x00545241
    17ac:	69726150 	ldmdbvs	r2!, {r4, r6, r8, sp, lr}^
    17b0:	55007974 	strpl	r7, [r0, #-2420]	; 0xfffff68c
    17b4:	54524153 	ldrbpl	r4, [r2], #-339	; 0xfffffead
    17b8:	6f6c435f 	svcvs	0x006c435f
    17bc:	74536b63 	ldrbvc	r6, [r3], #-2915	; 0xfffff49d
    17c0:	74637572 	strbtvc	r7, [r3], #-1394	; 0xfffffa8e
    17c4:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xfffff1b7
    17c8:	61737500 	cmnvs	r3, r0, lsl #10
    17cc:	62787472 	rsbsvs	r7, r8, #1912602624	; 0x72000000
    17d0:	00657361 	rsbeq	r7, r5, r1, ror #6
    17d4:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    17d8:	6c435f54 	mcrrvs	15, 5, r5, r3, cr4
    17dc:	46726165 	ldrbtmi	r6, [r2], -r5, ror #2
    17e0:	0067616c 	rsbeq	r6, r7, ip, ror #2
    17e4:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    17e8:	65535f54 	ldrbvs	r5, [r3, #-3924]	; 0xfffff0ac
    17ec:	64644174 	strbtvs	r4, [r4], #-372	; 0xfffffe8c
    17f0:	73736572 	cmnvc	r3, #478150656	; 0x1c800000
    17f4:	41535500 	cmpmi	r3, r0, lsl #10
    17f8:	535f5452 	cmppl	pc, #1375731712	; 0x52000000
    17fc:	75477465 	strbvc	r7, [r7, #-1125]	; 0xfffffb9b
    1800:	54647261 	strbtpl	r7, [r4], #-609	; 0xfffffd9f
    1804:	00656d69 	rsbeq	r6, r5, r9, ror #26
    1808:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    180c:	65535f54 	ldrbvs	r5, [r3, #-3924]	; 0xfffff0ac
    1810:	7242646e 	subvc	r6, r2, #1845493760	; 0x6e000000
    1814:	006b6165 	rsbeq	r6, fp, r5, ror #2
    1818:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    181c:	6e495f54 	mcrvs	15, 2, r5, cr9, cr4, {2}
    1820:	79547469 	ldmdbvc	r4, {r0, r3, r5, r6, sl, ip, sp, lr}^
    1824:	65446570 	strbvs	r6, [r4, #-1392]	; 0xfffffa90
    1828:	53550066 	cmppl	r5, #102	; 0x66
    182c:	5f545241 	svcpl	0x00545241
    1830:	6f435449 	svcvs	0x00435449
    1834:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    1838:	41535500 	cmpmi	r3, r0, lsl #10
    183c:	445f5452 	ldrbmi	r5, [pc], #-1106	; 1844 <startup-0x1fffe7bc>
    1840:	6552414d 	ldrbvs	r4, [r2, #-333]	; 0xfffffeb3
    1844:	53550071 	cmppl	r5, #113	; 0x71
    1848:	78545241 	ldmdavc	r4, {r0, r6, r9, ip, lr}^
    184c:	41535500 	cmpmi	r3, r0, lsl #10
    1850:	485f5452 	ldmdami	pc, {r1, r4, r6, sl, ip, lr}^	; <UNPREDICTABLE>
    1854:	77647261 	strbvc	r7, [r4, -r1, ror #4]!
    1858:	46657261 	strbtmi	r7, [r5], -r1, ror #4
    185c:	43776f6c 	cmnmi	r7, #108, 30	; 0x1b0
    1860:	72746e6f 	rsbsvc	r6, r4, #1776	; 0x6f0
    1864:	55006c6f 	strpl	r6, [r0, #-3183]	; 0xfffff391
    1868:	54524153 	ldrbpl	r4, [r2], #-339	; 0xfffffead
    186c:	616d535f 	cmnvs	sp, pc, asr r3
    1870:	61437472 	hvcvs	14146	; 0x3742
    1874:	6d436472 	cfstrdvs	mvd6, [r3, #-456]	; 0xfffffe38
    1878:	53550064 	cmppl	r5, #100	; 0x64
    187c:	5f545241 	svcpl	0x00545241
    1880:	65646f4d 	strbvs	r6, [r4, #-3917]!	; 0xfffff0b3
    1884:	41535500 	cmpmi	r3, r0, lsl #10
    1888:	415f5452 	cmpmi	pc, r2, asr r4	; <UNPREDICTABLE>
    188c:	65726464 	ldrbvs	r6, [r2, #-1124]!	; 0xfffffb9c
    1890:	62007373 	andvs	r7, r0, #-872415231	; 0xcc000001
    1894:	6f707469 	svcvs	0x00707469
    1898:	53550073 	cmppl	r5, #115	; 0x73
    189c:	5f545241 	svcpl	0x00545241
    18a0:	7265764f 	rsbvc	r7, r5, #82837504	; 0x4f00000
    18a4:	706d6153 	rsbvc	r6, sp, r3, asr r1
    18a8:	676e696c 	strbvs	r6, [lr, -ip, ror #18]!
    18ac:	646d4338 	strbtvs	r4, [sp], #-824	; 0xfffffcc8
    18b0:	41535500 	cmpmi	r3, r0, lsl #10
    18b4:	475f5452 			; <UNDEFINED> instruction: 0x475f5452
    18b8:	54497465 	strbpl	r7, [r9], #-1125	; 0xfffffb9b
    18bc:	74617453 	strbtvc	r7, [r1], #-1107	; 0xfffffbad
    18c0:	55007375 	strpl	r7, [r0, #-885]	; 0xfffffc8b
    18c4:	54524153 	ldrbpl	r4, [r2], #-339	; 0xfffffead
    18c8:	4e494c5f 	mcrmi	12, 2, r4, cr9, cr15, {2}
    18cc:	00646d43 	rsbeq	r6, r4, r3, asr #26
    18d0:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    18d4:	72495f54 	subvc	r5, r9, #84, 30	; 0x150
    18d8:	6f434144 	svcvs	0x00434144
    18dc:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    18e0:	41535500 	cmpmi	r3, r0, lsl #10
    18e4:	435f5452 	cmpmi	pc, #1375731712	; 0x52000000
    18e8:	6b636f6c 	blvs	18dd6a0 <startup-0x1e722960>
    18ec:	41535500 	cmpmi	r3, r0, lsl #10
    18f0:	495f5452 	ldmdbmi	pc, {r1, r4, r6, sl, ip, lr}^	; <UNPREDICTABLE>
    18f4:	43414472 	movtmi	r4, #5234	; 0x1472
    18f8:	6600646d 	strvs	r6, [r0], -sp, ror #8
    18fc:	74636172 	strbtvc	r6, [r3], #-370	; 0xfffffe8e
    1900:	616e6f69 	cmnvs	lr, r9, ror #30
    1904:	7669646c 	strbtvc	r6, [r9], -ip, ror #8
    1908:	72656469 	rsbvc	r6, r5, #1761607680	; 0x69000000
    190c:	41535500 	cmpmi	r3, r0, lsl #10
    1910:	535f5452 	cmppl	pc, #1375731712	; 0x52000000
    1914:	7472616d 	ldrbtvc	r6, [r2], #-365	; 0xfffffe93
    1918:	64726143 	ldrbtvs	r6, [r2], #-323	; 0xfffffebd
    191c:	4b43414e 	blmi	10d1e5c <startup-0x1ef2e1a4>
    1920:	00646d43 	rsbeq	r6, r4, r3, asr #26
    1924:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    1928:	65475f54 	strbvs	r5, [r7, #-3924]	; 0xfffff0ac
    192c:	616c4674 	smcvs	50276	; 0xc464
    1930:	61745367 	cmnvs	r4, r7, ror #6
    1934:	00737574 	rsbseq	r7, r3, r4, ror r5
    1938:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    193c:	54495f54 	strbpl	r5, [r9], #-3924	; 0xfffff0ac
    1940:	41535500 	cmpmi	r3, r0, lsl #10
    1944:	495f5452 	ldmdbmi	pc, {r1, r4, r6, sl, ip, lr}^	; <UNPREDICTABLE>
    1948:	5374696e 	cmnpl	r4, #1802240	; 0x1b8000
    194c:	63757274 	cmnvs	r5, #116, 4	; 0x40000007
    1950:	43520074 	cmpmi	r2, #116	; 0x74
    1954:	6c435f43 	mcrrvs	15, 4, r5, r3, cr3
    1958:	736b636f 	cmnvc	fp, #-1140850687	; 0xbc000001
    195c:	74617453 	strbtvc	r7, [r1], #-1107	; 0xfffffbad
    1960:	55007375 	strpl	r7, [r0, #-885]	; 0xfffffc8b
    1964:	54524153 	ldrbpl	r4, [r2], #-339	; 0xfffffead
    1968:	6f6c435f 	svcvs	0x006c435f
    196c:	6e496b63 	vmlsvs.f64	d22, d9, d19
    1970:	55007469 	strpl	r7, [r0, #-1129]	; 0xfffffb97
    1974:	54524153 	ldrbpl	r4, [r2], #-339	; 0xfffffead
    1978:	6b61575f 	blvs	18576fc <startup-0x1e7a8904>
    197c:	43705565 	cmnmi	r0, #423624704	; 0x19400000
    1980:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    1984:	53550067 	cmppl	r5, #103	; 0x67
    1988:	5f545241 	svcpl	0x00545241
    198c:	666c6148 	strbtvs	r6, [ip], -r8, asr #2
    1990:	6c707544 	cfldr64vs	mvdx7, [r0], #-272	; 0xfffffef0
    1994:	6d437865 	stclvs	8, cr7, [r3, #-404]	; 0xfffffe6c
    1998:	53550064 	cmppl	r5, #100	; 0x64
    199c:	5f545241 	svcpl	0x00545241
    19a0:	75727453 	ldrbvc	r7, [r2, #-1107]!	; 0xfffffbad
    19a4:	6e497463 	cdpvs	4, 4, cr7, cr9, cr3, {3}
    19a8:	55007469 	strpl	r7, [r0, #-1129]	; 0xfffffb97
    19ac:	54524153 	ldrbpl	r4, [r2], #-339	; 0xfffffead
    19b0:	6572505f 	ldrbvs	r5, [r2, #-95]!	; 0xffffffa1
    19b4:	6c616373 	stclvs	3, cr6, [r1], #-460	; 0xfffffe34
    19b8:	55007265 	strpl	r7, [r0, #-613]	; 0xfffffd9b
    19bc:	54524153 	ldrbpl	r4, [r2], #-339	; 0xfffffead
    19c0:	4f50435f 	svcmi	0x0050435f
    19c4:	7469004c 	strbtvc	r0, [r9], #-76	; 0xffffffb4
    19c8:	6b73616d 	blvs	1cd9f84 <startup-0x1e32607c>
    19cc:	2f3a4300 	svccs	0x003a4300
    19d0:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
    19d4:	64412f73 	strbvs	r2, [r1], #-3955	; 0xfffff08d
    19d8:	2f746d61 	svccs	0x00746d61
    19dc:	44656e4f 	strbtmi	r6, [r5], #-3663	; 0xfffff1b1
    19e0:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
    19e4:	6b6f442f 	blvs	1bd2aa8 <startup-0x1e42d558>
    19e8:	6e656d75 	mcrvs	13, 3, r6, cr5, cr5, {3}
    19ec:	69472f74 	stmdbvs	r7, {r2, r4, r5, r6, r8, r9, sl, fp, sp}^
    19f0:	62754874 	rsbsvs	r4, r5, #116, 16	; 0x740000
    19f4:	5441442f 	strbpl	r4, [r1], #-1071	; 0xfffffbd1
    19f8:	2d303932 			; <UNDEFINED> instruction: 0x2d303932
    19fc:	6d72614c 	ldfvse	f6, [r2, #-304]!	; 0xfffffed0
    1a00:	74737973 	ldrbtvc	r7, [r3], #-2419	; 0xfffff68d
    1a04:	6b2f6d65 	blvs	bdcfa0 <startup-0x1f423060>
    1a08:	6c2f646f 	cfstrsvs	mvf6, [pc], #-444	; 1854 <startup-0x1fffe7ac>
    1a0c:	532f6269 			; <UNDEFINED> instruction: 0x532f6269
    1a10:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
    1a14:	6c5f3446 	cfldrdvs	mvd3, [pc], {70}	; 0x46
    1a18:	532f6269 			; <UNDEFINED> instruction: 0x532f6269
    1a1c:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
    1a20:	78783446 	ldmdavc	r8!, {r1, r2, r6, sl, ip, sp}^
    1a24:	6474535f 	ldrbtvs	r5, [r4], #-863	; 0xfffffca1
    1a28:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
    1a2c:	445f6870 	ldrbmi	r6, [pc], #-2160	; 1a34 <startup-0x1fffe5cc>
    1a30:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
    1a34:	72732f72 	rsbsvc	r2, r3, #456	; 0x1c8
    1a38:	74732f63 	ldrbtvc	r2, [r3], #-3939	; 0xfffff09d
    1a3c:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
    1a40:	5f787834 	svcpl	0x00787834
    1a44:	72617375 	rsbvc	r7, r1, #-738197503	; 0xd4000001
    1a48:	00632e74 	rsbeq	r2, r3, r4, ror lr
    1a4c:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    1a50:	65525f54 	ldrbvs	r5, [r2, #-3924]	; 0xfffff0ac
    1a54:	76696563 	strbtvc	r6, [r9], -r3, ror #10
    1a58:	74614465 	strbtvc	r4, [r1], #-1125	; 0xfffffb9b
    1a5c:	73750061 	cmnvc	r5, #97	; 0x61
    1a60:	72747261 	rsbsvc	r7, r4, #268435462	; 0x10000006
    1a64:	Address 0x00001a64 is out of bounds.


Disassembly of section .comment:

00000000 <.comment>:
   0:	3a434347 	bcc	10d0d24 <startup-0x1ef2f2dc>
   4:	4e472820 	cdpmi	8, 4, cr2, cr7, cr0, {1}
   8:	6f542055 	svcvs	0x00542055
   c:	20736c6f 	rsbscs	r6, r3, pc, ror #24
  10:	20726f66 	rsbscs	r6, r2, r6, ror #30
  14:	206d7241 	rsbcs	r7, sp, r1, asr #4
  18:	65626d45 	strbvs	r6, [r2, #-3397]!	; 0xfffff2bb
  1c:	64656464 	strbtvs	r6, [r5], #-1124	; 0xfffffb9c
  20:	6f725020 	svcvs	0x00725020
  24:	73736563 	cmnvc	r3, #415236096	; 0x18c00000
  28:	2073726f 	rsbscs	r7, r3, pc, ror #4
  2c:	30322d37 	eorscc	r2, r2, r7, lsr sp
  30:	712d3731 			; <UNDEFINED> instruction: 0x712d3731
  34:	616d2d34 	cmnvs	sp, r4, lsr sp
  38:	29726f6a 	ldmdbcs	r2!, {r1, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
  3c:	322e3720 	eorcc	r3, lr, #32, 14	; 0x800000
  40:	3220312e 	eorcc	r3, r0, #-2147483637	; 0x8000000b
  44:	30373130 	eorscc	r3, r7, r0, lsr r1
  48:	20343039 	eorscs	r3, r4, r9, lsr r0
  4c:	6c657228 	sfmvs	f7, 2, [r5], #-160	; 0xffffff60
  50:	65736165 	ldrbvs	r6, [r3, #-357]!	; 0xfffffe9b
  54:	415b2029 	cmpmi	fp, r9, lsr #32
  58:	652f4d52 	strvs	r4, [pc, #-3410]!	; fffff30e <GPIO_Pins+0xdfffcdfa>
  5c:	6465626d 	strbtvs	r6, [r5], #-621	; 0xfffffd93
  60:	2d646564 	cfstr64cs	mvdx6, [r4, #-400]!	; 0xfffffe70
  64:	72622d37 	rsbvc	r2, r2, #3520	; 0xdc0
  68:	68636e61 	stmdavs	r3!, {r0, r5, r6, r9, sl, fp, sp, lr}^
  6c:	76657220 	strbtvc	r7, [r5], -r0, lsr #4
  70:	6f697369 	svcvs	0x00697369
  74:	3532206e 	ldrcc	r2, [r2, #-110]!	; 0xffffff92
  78:	34303235 	ldrtcc	r3, [r0], #-565	; 0xfffffdcb
  7c:	Address 0x0000007c is out of bounds.


Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00002b41 	andeq	r2, r0, r1, asr #22
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	00000021 	andeq	r0, r0, r1, lsr #32
  10:	2d533605 	ldclcs	6, cr3, [r3, #-20]	; 0xffffffec
  14:	0c06004d 	stceq	0, cr0, [r6], {77}	; 0x4d
  18:	01094d07 	tsteq	r9, r7, lsl #26
  1c:	01140412 	tsteq	r4, r2, lsl r4
  20:	03170115 	tsteq	r7, #1073741829	; 0x40000005
  24:	01190118 	tsteq	r9, r8, lsl r1
  28:	061e011a 			; <UNDEFINED> instruction: 0x061e011a

Disassembly of section .debug_frame:

00000000 <.debug_frame>:
   0:	0000000c 	andeq	r0, r0, ip
   4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   8:	7c020001 	stcvc	0, cr0, [r2], {1}
   c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  10:	0000001c 	andeq	r0, r0, ip, lsl r0
  14:	00000000 	andeq	r0, r0, r0
  18:	20000010 	andcs	r0, r0, r0, lsl r0
  1c:	00000060 	andeq	r0, r0, r0, rrx
  20:	40080e41 	andmi	r0, r8, r1, asr #28
  24:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  28:	100e4101 	andne	r4, lr, r1, lsl #2
  2c:	00070d41 	andeq	r0, r7, r1, asr #26
  30:	0000001c 	andeq	r0, r0, ip, lsl r0
  34:	00000000 	andeq	r0, r0, r0
  38:	20000070 	andcs	r0, r0, r0, ror r0
  3c:	00000048 	andeq	r0, r0, r8, asr #32
  40:	40080e41 	andmi	r0, r8, r1, asr #28
  44:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  48:	100e4101 	andne	r4, lr, r1, lsl #2
  4c:	00070d41 	andeq	r0, r7, r1, asr #26
  50:	00000018 	andeq	r0, r0, r8, lsl r0
  54:	00000000 	andeq	r0, r0, r0
  58:	200000b8 	strhcs	r0, [r0], -r8
  5c:	00000070 	andeq	r0, r0, r0, ror r0
  60:	40080e41 	andmi	r0, r8, r1, asr #28
  64:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  68:	070d4101 	streq	r4, [sp, -r1, lsl #2]
  6c:	0000001c 	andeq	r0, r0, ip, lsl r0
  70:	00000000 	andeq	r0, r0, r0
  74:	20000128 	andcs	r0, r0, r8, lsr #2
  78:	00000028 	andeq	r0, r0, r8, lsr #32
  7c:	40080e41 	andmi	r0, r8, r1, asr #28
  80:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  84:	100e4101 	andne	r4, lr, r1, lsl #2
  88:	00070d41 	andeq	r0, r7, r1, asr #26
  8c:	00000020 	andeq	r0, r0, r0, lsr #32
  90:	00000000 	andeq	r0, r0, r0
  94:	20000150 	andcs	r0, r0, r0, asr r1
  98:	0000005e 	andeq	r0, r0, lr, asr r0
  9c:	400c0e41 	andmi	r0, ip, r1, asr #28
  a0:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
  a4:	018e4002 	orreq	r4, lr, r2
  a8:	41180e41 	tstmi	r8, r1, asr #28
  ac:	0000070d 	andeq	r0, r0, sp, lsl #14
  b0:	0000001c 	andeq	r0, r0, ip, lsl r0
  b4:	00000000 	andeq	r0, r0, r0
  b8:	200001ae 	andcs	r0, r0, lr, lsr #3
  bc:	0000003e 	andeq	r0, r0, lr, lsr r0
  c0:	40080e41 	andmi	r0, r8, r1, asr #28
  c4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  c8:	180e4101 	stmdane	lr, {r0, r8, lr}
  cc:	00070d41 	andeq	r0, r7, r1, asr #26
  d0:	0000001c 	andeq	r0, r0, ip, lsl r0
  d4:	00000000 	andeq	r0, r0, r0
  d8:	200001ec 	andcs	r0, r0, ip, ror #3
  dc:	00000020 	andeq	r0, r0, r0, lsr #32
  e0:	40080e41 	andmi	r0, r8, r1, asr #28
  e4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  e8:	100e4101 	andne	r4, lr, r1, lsl #2
  ec:	00070d41 	andeq	r0, r7, r1, asr #26
  f0:	0000001c 	andeq	r0, r0, ip, lsl r0
  f4:	00000000 	andeq	r0, r0, r0
  f8:	2000020c 	andcs	r0, r0, ip, lsl #4
  fc:	00000044 	andeq	r0, r0, r4, asr #32
 100:	40080e41 	andmi	r0, r8, r1, asr #28
 104:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 108:	100e4101 	andne	r4, lr, r1, lsl #2
 10c:	00070d41 	andeq	r0, r7, r1, asr #26
 110:	0000001c 	andeq	r0, r0, ip, lsl r0
 114:	00000000 	andeq	r0, r0, r0
 118:	20000250 	andcs	r0, r0, r0, asr r2
 11c:	00000020 	andeq	r0, r0, r0, lsr #32
 120:	40080e41 	andmi	r0, r8, r1, asr #28
 124:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 128:	100e4101 	andne	r4, lr, r1, lsl #2
 12c:	00070d41 	andeq	r0, r7, r1, asr #26
 130:	0000001c 	andeq	r0, r0, ip, lsl r0
 134:	00000000 	andeq	r0, r0, r0
 138:	20000270 	andcs	r0, r0, r0, ror r2
 13c:	0000003c 	andeq	r0, r0, ip, lsr r0
 140:	40080e41 	andmi	r0, r8, r1, asr #28
 144:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 148:	180e4101 	stmdane	lr, {r0, r8, lr}
 14c:	00070d41 	andeq	r0, r7, r1, asr #26
 150:	0000001c 	andeq	r0, r0, ip, lsl r0
 154:	00000000 	andeq	r0, r0, r0
 158:	200002ac 	andcs	r0, r0, ip, lsr #5
 15c:	00000020 	andeq	r0, r0, r0, lsr #32
 160:	40080e41 	andmi	r0, r8, r1, asr #28
 164:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 168:	100e4101 	andne	r4, lr, r1, lsl #2
 16c:	00070d41 	andeq	r0, r7, r1, asr #26
 170:	0000001c 	andeq	r0, r0, ip, lsl r0
 174:	00000000 	andeq	r0, r0, r0
 178:	200002cc 	andcs	r0, r0, ip, asr #5
 17c:	00000028 	andeq	r0, r0, r8, lsr #32
 180:	40080e41 	andmi	r0, r8, r1, asr #28
 184:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 188:	100e4101 	andne	r4, lr, r1, lsl #2
 18c:	00070d41 	andeq	r0, r7, r1, asr #26
 190:	0000001c 	andeq	r0, r0, ip, lsl r0
 194:	00000000 	andeq	r0, r0, r0
 198:	200002f4 	strdcs	r0, [r0], -r4
 19c:	00000020 	andeq	r0, r0, r0, lsr #32
 1a0:	40080e41 	andmi	r0, r8, r1, asr #28
 1a4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 1a8:	100e4101 	andne	r4, lr, r1, lsl #2
 1ac:	00070d41 	andeq	r0, r7, r1, asr #26
 1b0:	0000001c 	andeq	r0, r0, ip, lsl r0
 1b4:	00000000 	andeq	r0, r0, r0
 1b8:	20000314 	andcs	r0, r0, r4, lsl r3
 1bc:	00000030 	andeq	r0, r0, r0, lsr r0
 1c0:	40080e41 	andmi	r0, r8, r1, asr #28
 1c4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 1c8:	180e4101 	stmdane	lr, {r0, r8, lr}
 1cc:	00070d41 	andeq	r0, r7, r1, asr #26
 1d0:	0000001c 	andeq	r0, r0, ip, lsl r0
 1d4:	00000000 	andeq	r0, r0, r0
 1d8:	20000344 	andcs	r0, r0, r4, asr #6
 1dc:	00000020 	andeq	r0, r0, r0, lsr #32
 1e0:	40080e41 	andmi	r0, r8, r1, asr #28
 1e4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 1e8:	100e4101 	andne	r4, lr, r1, lsl #2
 1ec:	00070d41 	andeq	r0, r7, r1, asr #26
 1f0:	0000001c 	andeq	r0, r0, ip, lsl r0
 1f4:	00000000 	andeq	r0, r0, r0
 1f8:	20000364 	andcs	r0, r0, r4, ror #6
 1fc:	00000020 	andeq	r0, r0, r0, lsr #32
 200:	40080e41 	andmi	r0, r8, r1, asr #28
 204:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 208:	100e4101 	andne	r4, lr, r1, lsl #2
 20c:	00070d41 	andeq	r0, r7, r1, asr #26
 210:	0000001c 	andeq	r0, r0, ip, lsl r0
 214:	00000000 	andeq	r0, r0, r0
 218:	20000384 	andcs	r0, r0, r4, lsl #7
 21c:	00000040 	andeq	r0, r0, r0, asr #32
 220:	40080e41 	andmi	r0, r8, r1, asr #28
 224:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 228:	180e4101 	stmdane	lr, {r0, r8, lr}
 22c:	00070d41 	andeq	r0, r7, r1, asr #26
 230:	0000001c 	andeq	r0, r0, ip, lsl r0
 234:	00000000 	andeq	r0, r0, r0
 238:	200003c4 	andcs	r0, r0, r4, asr #7
 23c:	0000003c 	andeq	r0, r0, ip, lsr r0
 240:	40080e41 	andmi	r0, r8, r1, asr #28
 244:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 248:	180e4101 	stmdane	lr, {r0, r8, lr}
 24c:	00070d41 	andeq	r0, r7, r1, asr #26
 250:	0000001c 	andeq	r0, r0, ip, lsl r0
 254:	00000000 	andeq	r0, r0, r0
 258:	20000400 	andcs	r0, r0, r0, lsl #8
 25c:	00000034 	andeq	r0, r0, r4, lsr r0
 260:	40080e41 	andmi	r0, r8, r1, asr #28
 264:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 268:	180e4101 	stmdane	lr, {r0, r8, lr}
 26c:	00070d41 	andeq	r0, r7, r1, asr #26
 270:	00000018 	andeq	r0, r0, r8, lsl r0
 274:	00000000 	andeq	r0, r0, r0
 278:	20000434 	andcs	r0, r0, r4, lsr r4
 27c:	0000001c 	andeq	r0, r0, ip, lsl r0
 280:	40080e41 	andmi	r0, r8, r1, asr #28
 284:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 288:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 28c:	0000001c 	andeq	r0, r0, ip, lsl r0
 290:	00000000 	andeq	r0, r0, r0
 294:	20000450 	andcs	r0, r0, r0, asr r4
 298:	00000034 	andeq	r0, r0, r4, lsr r0
 29c:	40080e41 	andmi	r0, r8, r1, asr #28
 2a0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 2a4:	180e4101 	stmdane	lr, {r0, r8, lr}
 2a8:	00070d41 	andeq	r0, r7, r1, asr #26
 2ac:	0000001c 	andeq	r0, r0, ip, lsl r0
 2b0:	00000000 	andeq	r0, r0, r0
 2b4:	20000484 	andcs	r0, r0, r4, lsl #9
 2b8:	00000038 	andeq	r0, r0, r8, lsr r0
 2bc:	40080e41 	andmi	r0, r8, r1, asr #28
 2c0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 2c4:	180e4101 	stmdane	lr, {r0, r8, lr}
 2c8:	00070d41 	andeq	r0, r7, r1, asr #26
 2cc:	0000001c 	andeq	r0, r0, ip, lsl r0
 2d0:	00000000 	andeq	r0, r0, r0
 2d4:	200004bc 			; <UNDEFINED> instruction: 0x200004bc
 2d8:	0000003c 	andeq	r0, r0, ip, lsr r0
 2dc:	40080e41 	andmi	r0, r8, r1, asr #28
 2e0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 2e4:	180e4101 	stmdane	lr, {r0, r8, lr}
 2e8:	00070d41 	andeq	r0, r7, r1, asr #26
 2ec:	0000001c 	andeq	r0, r0, ip, lsl r0
 2f0:	00000000 	andeq	r0, r0, r0
 2f4:	200004f8 	strdcs	r0, [r0], -r8
 2f8:	00000158 	andeq	r0, r0, r8, asr r1
 2fc:	40080e41 	andmi	r0, r8, r1, asr #28
 300:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 304:	280e4101 	stmdacs	lr, {r0, r8, lr}
 308:	00070d41 	andeq	r0, r7, r1, asr #26
 30c:	0000001c 	andeq	r0, r0, ip, lsl r0
 310:	00000000 	andeq	r0, r0, r0
 314:	20000650 	andcs	r0, r0, r0, asr r6
 318:	00000060 	andeq	r0, r0, r0, rrx
 31c:	40080e41 	andmi	r0, r8, r1, asr #28
 320:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 324:	180e4101 	stmdane	lr, {r0, r8, lr}
 328:	00070d41 	andeq	r0, r7, r1, asr #26
 32c:	0000001c 	andeq	r0, r0, ip, lsl r0
 330:	00000000 	andeq	r0, r0, r0
 334:	200006b0 			; <UNDEFINED> instruction: 0x200006b0
 338:	00000020 	andeq	r0, r0, r0, lsr #32
 33c:	40080e41 	andmi	r0, r8, r1, asr #28
 340:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 344:	100e4101 	andne	r4, lr, r1, lsl #2
 348:	00070d41 	andeq	r0, r7, r1, asr #26
 34c:	0000001c 	andeq	r0, r0, ip, lsl r0
 350:	00000000 	andeq	r0, r0, r0
 354:	200006d0 	ldrdcs	r0, [r0], -r0	; <UNPREDICTABLE>
 358:	00000020 	andeq	r0, r0, r0, lsr #32
 35c:	40080e41 	andmi	r0, r8, r1, asr #28
 360:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 364:	100e4101 	andne	r4, lr, r1, lsl #2
 368:	00070d41 	andeq	r0, r7, r1, asr #26
 36c:	0000001c 	andeq	r0, r0, ip, lsl r0
 370:	00000000 	andeq	r0, r0, r0
 374:	200006f0 	strdcs	r0, [r0], -r0	; <UNPREDICTABLE>
 378:	0000001c 	andeq	r0, r0, ip, lsl r0
 37c:	40080e41 	andmi	r0, r8, r1, asr #28
 380:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 384:	100e4101 	andne	r4, lr, r1, lsl #2
 388:	00070d41 	andeq	r0, r7, r1, asr #26
 38c:	0000001c 	andeq	r0, r0, ip, lsl r0
 390:	00000000 	andeq	r0, r0, r0
 394:	2000070c 	andcs	r0, r0, ip, lsl #14
 398:	0000003c 	andeq	r0, r0, ip, lsr r0
 39c:	40080e41 	andmi	r0, r8, r1, asr #28
 3a0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 3a4:	180e4101 	stmdane	lr, {r0, r8, lr}
 3a8:	00070d41 	andeq	r0, r7, r1, asr #26
 3ac:	0000001c 	andeq	r0, r0, ip, lsl r0
 3b0:	00000000 	andeq	r0, r0, r0
 3b4:	20000748 	andcs	r0, r0, r8, asr #14
 3b8:	0000003c 	andeq	r0, r0, ip, lsr r0
 3bc:	40080e41 	andmi	r0, r8, r1, asr #28
 3c0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 3c4:	180e4101 	stmdane	lr, {r0, r8, lr}
 3c8:	00070d41 	andeq	r0, r7, r1, asr #26
 3cc:	0000001c 	andeq	r0, r0, ip, lsl r0
 3d0:	00000000 	andeq	r0, r0, r0
 3d4:	20000784 	andcs	r0, r0, r4, lsl #15
 3d8:	0000003c 	andeq	r0, r0, ip, lsr r0
 3dc:	40080e41 	andmi	r0, r8, r1, asr #28
 3e0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 3e4:	180e4101 	stmdane	lr, {r0, r8, lr}
 3e8:	00070d41 	andeq	r0, r7, r1, asr #26
 3ec:	0000001c 	andeq	r0, r0, ip, lsl r0
 3f0:	00000000 	andeq	r0, r0, r0
 3f4:	200007c0 	andcs	r0, r0, r0, asr #15
 3f8:	00000040 	andeq	r0, r0, r0, asr #32
 3fc:	40080e41 	andmi	r0, r8, r1, asr #28
 400:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 404:	180e4101 	stmdane	lr, {r0, r8, lr}
 408:	00070d41 	andeq	r0, r7, r1, asr #26
 40c:	0000001c 	andeq	r0, r0, ip, lsl r0
 410:	00000000 	andeq	r0, r0, r0
 414:	20000800 	andcs	r0, r0, r0, lsl #16
 418:	0000003c 	andeq	r0, r0, ip, lsr r0
 41c:	40080e41 	andmi	r0, r8, r1, asr #28
 420:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 424:	180e4101 	stmdane	lr, {r0, r8, lr}
 428:	00070d41 	andeq	r0, r7, r1, asr #26
 42c:	0000001c 	andeq	r0, r0, ip, lsl r0
 430:	00000000 	andeq	r0, r0, r0
 434:	2000083c 	andcs	r0, r0, ip, lsr r8
 438:	0000001c 	andeq	r0, r0, ip, lsl r0
 43c:	40080e41 	andmi	r0, r8, r1, asr #28
 440:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 444:	100e4101 	andne	r4, lr, r1, lsl #2
 448:	00070d41 	andeq	r0, r7, r1, asr #26
 44c:	0000001c 	andeq	r0, r0, ip, lsl r0
 450:	00000000 	andeq	r0, r0, r0
 454:	20000858 	andcs	r0, r0, r8, asr r8
 458:	00000040 	andeq	r0, r0, r0, asr #32
 45c:	40080e41 	andmi	r0, r8, r1, asr #28
 460:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 464:	100e4101 	andne	r4, lr, r1, lsl #2
 468:	00070d41 	andeq	r0, r7, r1, asr #26
 46c:	0000001c 	andeq	r0, r0, ip, lsl r0
 470:	00000000 	andeq	r0, r0, r0
 474:	20000898 	mulcs	r0, r8, r8
 478:	00000040 	andeq	r0, r0, r0, asr #32
 47c:	40080e41 	andmi	r0, r8, r1, asr #28
 480:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 484:	100e4101 	andne	r4, lr, r1, lsl #2
 488:	00070d41 	andeq	r0, r7, r1, asr #26
 48c:	0000001c 	andeq	r0, r0, ip, lsl r0
 490:	00000000 	andeq	r0, r0, r0
 494:	200008d8 	ldrdcs	r0, [r0], -r8
 498:	00000040 	andeq	r0, r0, r0, asr #32
 49c:	40080e41 	andmi	r0, r8, r1, asr #28
 4a0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 4a4:	100e4101 	andne	r4, lr, r1, lsl #2
 4a8:	00070d41 	andeq	r0, r7, r1, asr #26
 4ac:	0000001c 	andeq	r0, r0, ip, lsl r0
 4b0:	00000000 	andeq	r0, r0, r0
 4b4:	20000918 	andcs	r0, r0, r8, lsl r9
 4b8:	00000040 	andeq	r0, r0, r0, asr #32
 4bc:	40080e41 	andmi	r0, r8, r1, asr #28
 4c0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 4c4:	100e4101 	andne	r4, lr, r1, lsl #2
 4c8:	00070d41 	andeq	r0, r7, r1, asr #26
 4cc:	0000001c 	andeq	r0, r0, ip, lsl r0
 4d0:	00000000 	andeq	r0, r0, r0
 4d4:	20000958 	andcs	r0, r0, r8, asr r9
 4d8:	00000040 	andeq	r0, r0, r0, asr #32
 4dc:	40080e41 	andmi	r0, r8, r1, asr #28
 4e0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 4e4:	100e4101 	andne	r4, lr, r1, lsl #2
 4e8:	00070d41 	andeq	r0, r7, r1, asr #26
 4ec:	0000001c 	andeq	r0, r0, ip, lsl r0
 4f0:	00000000 	andeq	r0, r0, r0
 4f4:	20000998 	mulcs	r0, r8, r9
 4f8:	00000040 	andeq	r0, r0, r0, asr #32
 4fc:	40080e41 	andmi	r0, r8, r1, asr #28
 500:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 504:	100e4101 	andne	r4, lr, r1, lsl #2
 508:	00070d41 	andeq	r0, r7, r1, asr #26
 50c:	0000001c 	andeq	r0, r0, ip, lsl r0
 510:	00000000 	andeq	r0, r0, r0
 514:	200009d8 	ldrdcs	r0, [r0], -r8
 518:	00000040 	andeq	r0, r0, r0, asr #32
 51c:	40080e41 	andmi	r0, r8, r1, asr #28
 520:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 524:	100e4101 	andne	r4, lr, r1, lsl #2
 528:	00070d41 	andeq	r0, r7, r1, asr #26
 52c:	0000001c 	andeq	r0, r0, ip, lsl r0
 530:	00000000 	andeq	r0, r0, r0
 534:	20000a18 	andcs	r0, r0, r8, lsl sl
 538:	00000040 	andeq	r0, r0, r0, asr #32
 53c:	40080e41 	andmi	r0, r8, r1, asr #28
 540:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 544:	100e4101 	andne	r4, lr, r1, lsl #2
 548:	00070d41 	andeq	r0, r7, r1, asr #26
 54c:	0000001c 	andeq	r0, r0, ip, lsl r0
 550:	00000000 	andeq	r0, r0, r0
 554:	20000a58 	andcs	r0, r0, r8, asr sl
 558:	00000040 	andeq	r0, r0, r0, asr #32
 55c:	40080e41 	andmi	r0, r8, r1, asr #28
 560:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 564:	100e4101 	andne	r4, lr, r1, lsl #2
 568:	00070d41 	andeq	r0, r7, r1, asr #26
 56c:	0000001c 	andeq	r0, r0, ip, lsl r0
 570:	00000000 	andeq	r0, r0, r0
 574:	20000a98 	mulcs	r0, r8, sl
 578:	00000040 	andeq	r0, r0, r0, asr #32
 57c:	40080e41 	andmi	r0, r8, r1, asr #28
 580:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 584:	100e4101 	andne	r4, lr, r1, lsl #2
 588:	00070d41 	andeq	r0, r7, r1, asr #26
 58c:	0000001c 	andeq	r0, r0, ip, lsl r0
 590:	00000000 	andeq	r0, r0, r0
 594:	20000ad8 	ldrdcs	r0, [r0], -r8
 598:	00000040 	andeq	r0, r0, r0, asr #32
 59c:	40080e41 	andmi	r0, r8, r1, asr #28
 5a0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 5a4:	100e4101 	andne	r4, lr, r1, lsl #2
 5a8:	00070d41 	andeq	r0, r7, r1, asr #26
 5ac:	0000001c 	andeq	r0, r0, ip, lsl r0
 5b0:	00000000 	andeq	r0, r0, r0
 5b4:	20000b18 	andcs	r0, r0, r8, lsl fp
 5b8:	00000040 	andeq	r0, r0, r0, asr #32
 5bc:	40080e41 	andmi	r0, r8, r1, asr #28
 5c0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 5c4:	100e4101 	andne	r4, lr, r1, lsl #2
 5c8:	00070d41 	andeq	r0, r7, r1, asr #26
 5cc:	0000001c 	andeq	r0, r0, ip, lsl r0
 5d0:	00000000 	andeq	r0, r0, r0
 5d4:	20000b58 	andcs	r0, r0, r8, asr fp
 5d8:	00000040 	andeq	r0, r0, r0, asr #32
 5dc:	40080e41 	andmi	r0, r8, r1, asr #28
 5e0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 5e4:	100e4101 	andne	r4, lr, r1, lsl #2
 5e8:	00070d41 	andeq	r0, r7, r1, asr #26
 5ec:	0000001c 	andeq	r0, r0, ip, lsl r0
 5f0:	00000000 	andeq	r0, r0, r0
 5f4:	20000b98 	mulcs	r0, r8, fp
 5f8:	00000040 	andeq	r0, r0, r0, asr #32
 5fc:	40080e41 	andmi	r0, r8, r1, asr #28
 600:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 604:	100e4101 	andne	r4, lr, r1, lsl #2
 608:	00070d41 	andeq	r0, r7, r1, asr #26
 60c:	0000001c 	andeq	r0, r0, ip, lsl r0
 610:	00000000 	andeq	r0, r0, r0
 614:	20000bd8 	ldrdcs	r0, [r0], -r8
 618:	00000040 	andeq	r0, r0, r0, asr #32
 61c:	40080e41 	andmi	r0, r8, r1, asr #28
 620:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 624:	100e4101 	andne	r4, lr, r1, lsl #2
 628:	00070d41 	andeq	r0, r7, r1, asr #26
 62c:	0000001c 	andeq	r0, r0, ip, lsl r0
 630:	00000000 	andeq	r0, r0, r0
 634:	20000c18 	andcs	r0, r0, r8, lsl ip
 638:	0000003c 	andeq	r0, r0, ip, lsr r0
 63c:	40080e41 	andmi	r0, r8, r1, asr #28
 640:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 644:	100e4101 	andne	r4, lr, r1, lsl #2
 648:	00070d41 	andeq	r0, r7, r1, asr #26
 64c:	0000001c 	andeq	r0, r0, ip, lsl r0
 650:	00000000 	andeq	r0, r0, r0
 654:	20000c54 	andcs	r0, r0, r4, asr ip
 658:	00000050 	andeq	r0, r0, r0, asr r0
 65c:	40080e41 	andmi	r0, r8, r1, asr #28
 660:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 664:	100e4101 	andne	r4, lr, r1, lsl #2
 668:	00070d41 	andeq	r0, r7, r1, asr #26
 66c:	0000001c 	andeq	r0, r0, ip, lsl r0
 670:	00000000 	andeq	r0, r0, r0
 674:	20000ca4 	andcs	r0, r0, r4, lsr #25
 678:	00000084 	andeq	r0, r0, r4, lsl #1
 67c:	40080e41 	andmi	r0, r8, r1, asr #28
 680:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 684:	200e4101 	andcs	r4, lr, r1, lsl #2
 688:	00070d41 	andeq	r0, r7, r1, asr #26
 68c:	00000018 	andeq	r0, r0, r8, lsl r0
 690:	00000000 	andeq	r0, r0, r0
 694:	20000d28 	andcs	r0, r0, r8, lsr #26
 698:	0000001c 	andeq	r0, r0, ip, lsl r0
 69c:	40080e41 	andmi	r0, r8, r1, asr #28
 6a0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 6a4:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 6a8:	0000001c 	andeq	r0, r0, ip, lsl r0
 6ac:	00000000 	andeq	r0, r0, r0
 6b0:	20000d44 	andcs	r0, r0, r4, asr #26
 6b4:	00000044 	andeq	r0, r0, r4, asr #32
 6b8:	40080e41 	andmi	r0, r8, r1, asr #28
 6bc:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 6c0:	180e4101 	stmdane	lr, {r0, r8, lr}
 6c4:	00070d41 	andeq	r0, r7, r1, asr #26
 6c8:	0000001c 	andeq	r0, r0, ip, lsl r0
 6cc:	00000000 	andeq	r0, r0, r0
 6d0:	20000d88 	andcs	r0, r0, r8, lsl #27
 6d4:	00000020 	andeq	r0, r0, r0, lsr #32
 6d8:	40080e41 	andmi	r0, r8, r1, asr #28
 6dc:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 6e0:	100e4101 	andne	r4, lr, r1, lsl #2
 6e4:	00070d41 	andeq	r0, r7, r1, asr #26
 6e8:	0000000c 	andeq	r0, r0, ip
 6ec:	00000000 	andeq	r0, r0, r0
 6f0:	20000000 	andcs	r0, r0, r0
 6f4:	0000000c 	andeq	r0, r0, ip
 6f8:	0000001c 	andeq	r0, r0, ip, lsl r0
 6fc:	00000000 	andeq	r0, r0, r0
 700:	20000da8 	andcs	r0, r0, r8, lsr #27
 704:	00000054 	andeq	r0, r0, r4, asr r0
 708:	40080e41 	andmi	r0, r8, r1, asr #28
 70c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 710:	180e4101 	stmdane	lr, {r0, r8, lr}
 714:	00070d41 	andeq	r0, r7, r1, asr #26
 718:	0000001c 	andeq	r0, r0, ip, lsl r0
 71c:	00000000 	andeq	r0, r0, r0
 720:	20000dfc 	strdcs	r0, [r0], -ip
 724:	00000098 	muleq	r0, r8, r0
 728:	40080e41 	andmi	r0, r8, r1, asr #28
 72c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 730:	180e4101 	stmdane	lr, {r0, r8, lr}
 734:	00070d41 	andeq	r0, r7, r1, asr #26
 738:	0000001c 	andeq	r0, r0, ip, lsl r0
 73c:	00000000 	andeq	r0, r0, r0
 740:	20000e94 	mulcs	r0, r4, lr
 744:	00000074 	andeq	r0, r0, r4, ror r0
 748:	40080e41 	andmi	r0, r8, r1, asr #28
 74c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 750:	100e4101 	andne	r4, lr, r1, lsl #2
 754:	00070d41 	andeq	r0, r7, r1, asr #26
 758:	00000018 	andeq	r0, r0, r8, lsl r0
 75c:	00000000 	andeq	r0, r0, r0
 760:	20000f08 	andcs	r0, r0, r8, lsl #30
 764:	00000018 	andeq	r0, r0, r8, lsl r0
 768:	40080e41 	andmi	r0, r8, r1, asr #28
 76c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 770:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 774:	0000001c 	andeq	r0, r0, ip, lsl r0
 778:	00000000 	andeq	r0, r0, r0
 77c:	20000f20 	andcs	r0, r0, r0, lsr #30
 780:	0000002c 	andeq	r0, r0, ip, lsr #32
 784:	40080e41 	andmi	r0, r8, r1, asr #28
 788:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 78c:	100e4101 	andne	r4, lr, r1, lsl #2
 790:	00070d41 	andeq	r0, r7, r1, asr #26
 794:	0000001c 	andeq	r0, r0, ip, lsl r0
 798:	00000000 	andeq	r0, r0, r0
 79c:	20000f4c 	andcs	r0, r0, ip, asr #30
 7a0:	00000270 	andeq	r0, r0, r0, ror r2
 7a4:	40080e41 	andmi	r0, r8, r1, asr #28
 7a8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 7ac:	180e4101 	stmdane	lr, {r0, r8, lr}
 7b0:	00070d41 	andeq	r0, r7, r1, asr #26
 7b4:	0000000c 	andeq	r0, r0, ip
 7b8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 7bc:	7c020001 	stcvc	0, cr0, [r2], {1}
 7c0:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 7c4:	0000001c 	andeq	r0, r0, ip, lsl r0
 7c8:	000007b4 			; <UNDEFINED> instruction: 0x000007b4
 7cc:	200011bc 			; <UNDEFINED> instruction: 0x200011bc
 7d0:	00000170 	andeq	r0, r0, r0, ror r1
 7d4:	40080e41 	andmi	r0, r8, r1, asr #28
 7d8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 7dc:	100e4101 	andne	r4, lr, r1, lsl #2
 7e0:	00070d41 	andeq	r0, r7, r1, asr #26
 7e4:	0000001c 	andeq	r0, r0, ip, lsl r0
 7e8:	000007b4 			; <UNDEFINED> instruction: 0x000007b4
 7ec:	2000132c 	andcs	r1, r0, ip, lsr #6
 7f0:	00000118 	andeq	r0, r0, r8, lsl r1
 7f4:	40080e41 	andmi	r0, r8, r1, asr #28
 7f8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 7fc:	200e4101 	andcs	r4, lr, r1, lsl #2
 800:	00070d41 	andeq	r0, r7, r1, asr #26
 804:	0000001c 	andeq	r0, r0, ip, lsl r0
 808:	000007b4 			; <UNDEFINED> instruction: 0x000007b4
 80c:	20001444 	andcs	r1, r0, r4, asr #8
 810:	00000034 	andeq	r0, r0, r4, lsr r0
 814:	40080e41 	andmi	r0, r8, r1, asr #28
 818:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 81c:	100e4101 	andne	r4, lr, r1, lsl #2
 820:	00070d41 	andeq	r0, r7, r1, asr #26
 824:	0000001c 	andeq	r0, r0, ip, lsl r0
 828:	000007b4 			; <UNDEFINED> instruction: 0x000007b4
 82c:	20001478 	andcs	r1, r0, r8, ror r4
 830:	00000046 	andeq	r0, r0, r6, asr #32
 834:	40080e41 	andmi	r0, r8, r1, asr #28
 838:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 83c:	180e4101 	stmdane	lr, {r0, r8, lr}
 840:	00070d41 	andeq	r0, r7, r1, asr #26
 844:	0000001c 	andeq	r0, r0, ip, lsl r0
 848:	000007b4 			; <UNDEFINED> instruction: 0x000007b4
 84c:	200014be 			; <UNDEFINED> instruction: 0x200014be
 850:	00000042 	andeq	r0, r0, r2, asr #32
 854:	40080e41 	andmi	r0, r8, r1, asr #28
 858:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 85c:	180e4101 	stmdane	lr, {r0, r8, lr}
 860:	00070d41 	andeq	r0, r7, r1, asr #26
 864:	0000001c 	andeq	r0, r0, ip, lsl r0
 868:	000007b4 			; <UNDEFINED> instruction: 0x000007b4
 86c:	20001500 	andcs	r1, r0, r0, lsl #10
 870:	00000016 	andeq	r0, r0, r6, lsl r0
 874:	40080e41 	andmi	r0, r8, r1, asr #28
 878:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 87c:	100e4101 	andne	r4, lr, r1, lsl #2
 880:	00070d41 	andeq	r0, r7, r1, asr #26
 884:	0000001c 	andeq	r0, r0, ip, lsl r0
 888:	000007b4 			; <UNDEFINED> instruction: 0x000007b4
 88c:	20001516 	andcs	r1, r0, r6, lsl r5
 890:	00000042 	andeq	r0, r0, r2, asr #32
 894:	40080e41 	andmi	r0, r8, r1, asr #28
 898:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 89c:	180e4101 	stmdane	lr, {r0, r8, lr}
 8a0:	00070d41 	andeq	r0, r7, r1, asr #26
 8a4:	0000001c 	andeq	r0, r0, ip, lsl r0
 8a8:	000007b4 			; <UNDEFINED> instruction: 0x000007b4
 8ac:	20001558 	andcs	r1, r0, r8, asr r5
 8b0:	00000016 	andeq	r0, r0, r6, lsl r0
 8b4:	40080e41 	andmi	r0, r8, r1, asr #28
 8b8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 8bc:	100e4101 	andne	r4, lr, r1, lsl #2
 8c0:	00070d41 	andeq	r0, r7, r1, asr #26
 8c4:	0000001c 	andeq	r0, r0, ip, lsl r0
 8c8:	000007b4 			; <UNDEFINED> instruction: 0x000007b4
 8cc:	2000156e 	andcs	r1, r0, lr, ror #10
 8d0:	0000001e 	andeq	r0, r0, lr, lsl r0
 8d4:	40080e41 	andmi	r0, r8, r1, asr #28
 8d8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 8dc:	100e4101 	andne	r4, lr, r1, lsl #2
 8e0:	00070d41 	andeq	r0, r7, r1, asr #26
 8e4:	0000001c 	andeq	r0, r0, ip, lsl r0
 8e8:	000007b4 			; <UNDEFINED> instruction: 0x000007b4
 8ec:	2000158c 	andcs	r1, r0, ip, lsl #11
 8f0:	0000001e 	andeq	r0, r0, lr, lsl r0
 8f4:	40080e41 	andmi	r0, r8, r1, asr #28
 8f8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 8fc:	100e4101 	andne	r4, lr, r1, lsl #2
 900:	00070d41 	andeq	r0, r7, r1, asr #26
 904:	0000001c 	andeq	r0, r0, ip, lsl r0
 908:	000007b4 			; <UNDEFINED> instruction: 0x000007b4
 90c:	200015aa 	andcs	r1, r0, sl, lsr #11
 910:	0000003a 	andeq	r0, r0, sl, lsr r0
 914:	40080e41 	andmi	r0, r8, r1, asr #28
 918:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 91c:	100e4101 	andne	r4, lr, r1, lsl #2
 920:	00070d41 	andeq	r0, r7, r1, asr #26
 924:	0000001c 	andeq	r0, r0, ip, lsl r0
 928:	000007b4 			; <UNDEFINED> instruction: 0x000007b4
 92c:	200015e4 	andcs	r1, r0, r4, ror #11
 930:	0000001e 	andeq	r0, r0, lr, lsl r0
 934:	40080e41 	andmi	r0, r8, r1, asr #28
 938:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 93c:	100e4101 	andne	r4, lr, r1, lsl #2
 940:	00070d41 	andeq	r0, r7, r1, asr #26
 944:	0000001c 	andeq	r0, r0, ip, lsl r0
 948:	000007b4 			; <UNDEFINED> instruction: 0x000007b4
 94c:	20001602 	andcs	r1, r0, r2, lsl #12
 950:	00000024 	andeq	r0, r0, r4, lsr #32
 954:	40080e41 	andmi	r0, r8, r1, asr #28
 958:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 95c:	100e4101 	andne	r4, lr, r1, lsl #2
 960:	00070d41 	andeq	r0, r7, r1, asr #26
 964:	0000001c 	andeq	r0, r0, ip, lsl r0
 968:	000007b4 			; <UNDEFINED> instruction: 0x000007b4
 96c:	20001626 	andcs	r1, r0, r6, lsr #12
 970:	000000a4 	andeq	r0, r0, r4, lsr #1
 974:	40080e41 	andmi	r0, r8, r1, asr #28
 978:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 97c:	180e4101 	stmdane	lr, {r0, r8, lr}
 980:	00070d41 	andeq	r0, r7, r1, asr #26
 984:	0000000c 	andeq	r0, r0, ip
 988:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 98c:	7c020001 	stcvc	0, cr0, [r2], {1}
 990:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 994:	0000001c 	andeq	r0, r0, ip, lsl r0
 998:	00000984 	andeq	r0, r0, r4, lsl #19
 99c:	200016cc 	andcs	r1, r0, ip, asr #13
 9a0:	00000024 	andeq	r0, r0, r4, lsr #32
 9a4:	40080e41 	andmi	r0, r8, r1, asr #28
 9a8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 9ac:	100e4101 	andne	r4, lr, r1, lsl #2
 9b0:	00070d41 	andeq	r0, r7, r1, asr #26
 9b4:	00000024 	andeq	r0, r0, r4, lsr #32
 9b8:	00000984 	andeq	r0, r0, r4, lsl #19
 9bc:	200016f0 	strdcs	r1, [r0], -r0
 9c0:	000000f8 	strdeq	r0, [r0], -r8
 9c4:	40100e41 	andsmi	r0, r0, r1, asr #28
 9c8:	85400484 	strbhi	r0, [r0, #-1156]	; 0xfffffb7c
 9cc:	02874003 	addeq	r4, r7, #3
 9d0:	41018e40 	tstmi	r1, r0, asr #28
 9d4:	0d41200e 	stcleq	0, cr2, [r1, #-56]	; 0xffffffc8
 9d8:	00000007 	andeq	r0, r0, r7
 9dc:	0000001c 	andeq	r0, r0, ip, lsl r0
 9e0:	00000984 	andeq	r0, r0, r4, lsl #19
 9e4:	200017e8 	andcs	r1, r0, r8, ror #15
 9e8:	0000002c 	andeq	r0, r0, ip, lsr #32
 9ec:	40080e41 	andmi	r0, r8, r1, asr #28
 9f0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 9f4:	100e4101 	andne	r4, lr, r1, lsl #2
 9f8:	00070d41 	andeq	r0, r7, r1, asr #26
 9fc:	0000001c 	andeq	r0, r0, ip, lsl r0
 a00:	00000984 	andeq	r0, r0, r4, lsl #19
 a04:	20001814 	andcs	r1, r0, r4, lsl r8
 a08:	00000048 	andeq	r0, r0, r8, asr #32
 a0c:	40080e41 	andmi	r0, r8, r1, asr #28
 a10:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 a14:	100e4101 	andne	r4, lr, r1, lsl #2
 a18:	00070d41 	andeq	r0, r7, r1, asr #26
 a1c:	0000001c 	andeq	r0, r0, ip, lsl r0
 a20:	00000984 	andeq	r0, r0, r4, lsl #19
 a24:	2000185c 	andcs	r1, r0, ip, asr r8
 a28:	00000034 	andeq	r0, r0, r4, lsr r0
 a2c:	40080e41 	andmi	r0, r8, r1, asr #28
 a30:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 a34:	100e4101 	andne	r4, lr, r1, lsl #2
 a38:	00070d41 	andeq	r0, r7, r1, asr #26
 a3c:	0000000c 	andeq	r0, r0, ip
 a40:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 a44:	7c020001 	stcvc	0, cr0, [r2], {1}
 a48:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 a4c:	0000001c 	andeq	r0, r0, ip, lsl r0
 a50:	00000a3c 	andeq	r0, r0, ip, lsr sl
 a54:	20001890 	mulcs	r0, r0, r8
 a58:	00000028 	andeq	r0, r0, r8, lsr #32
 a5c:	40080e41 	andmi	r0, r8, r1, asr #28
 a60:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 a64:	100e4101 	andne	r4, lr, r1, lsl #2
 a68:	00070d41 	andeq	r0, r7, r1, asr #26
 a6c:	0000001c 	andeq	r0, r0, ip, lsl r0
 a70:	00000a3c 	andeq	r0, r0, ip, lsr sl
 a74:	200018b8 			; <UNDEFINED> instruction: 0x200018b8
 a78:	00000062 	andeq	r0, r0, r2, rrx
 a7c:	40080e41 	andmi	r0, r8, r1, asr #28
 a80:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 a84:	100e4101 	andne	r4, lr, r1, lsl #2
 a88:	00070d41 	andeq	r0, r7, r1, asr #26
 a8c:	0000001c 	andeq	r0, r0, ip, lsl r0
 a90:	00000a3c 	andeq	r0, r0, ip, lsr sl
 a94:	2000191a 	andcs	r1, r0, sl, lsl r9
 a98:	0000005e 	andeq	r0, r0, lr, asr r0
 a9c:	40080e41 	andmi	r0, r8, r1, asr #28
 aa0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 aa4:	100e4101 	andne	r4, lr, r1, lsl #2
 aa8:	00070d41 	andeq	r0, r7, r1, asr #26
 aac:	0000000c 	andeq	r0, r0, ip
 ab0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 ab4:	7c020001 	stcvc	0, cr0, [r2], {1}
 ab8:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 abc:	0000001c 	andeq	r0, r0, ip, lsl r0
 ac0:	00000aac 	andeq	r0, r0, ip, lsr #21
 ac4:	20001978 	andcs	r1, r0, r8, ror r9
 ac8:	00000130 	andeq	r0, r0, r0, lsr r1
 acc:	40080e41 	andmi	r0, r8, r1, asr #28
 ad0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 ad4:	100e4101 	andne	r4, lr, r1, lsl #2
 ad8:	00070d41 	andeq	r0, r7, r1, asr #26
 adc:	0000001c 	andeq	r0, r0, ip, lsl r0
 ae0:	00000aac 	andeq	r0, r0, ip, lsr #21
 ae4:	20001aa8 	andcs	r1, r0, r8, lsr #21
 ae8:	00000194 	muleq	r0, r4, r1
 aec:	40080e41 	andmi	r0, r8, r1, asr #28
 af0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 af4:	300e4101 	andcc	r4, lr, r1, lsl #2
 af8:	00070d41 	andeq	r0, r7, r1, asr #26
 afc:	0000001c 	andeq	r0, r0, ip, lsl r0
 b00:	00000aac 	andeq	r0, r0, ip, lsr #21
 b04:	20001c3c 	andcs	r1, r0, ip, lsr ip
 b08:	00000036 	andeq	r0, r0, r6, lsr r0
 b0c:	40080e41 	andmi	r0, r8, r1, asr #28
 b10:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 b14:	100e4101 	andne	r4, lr, r1, lsl #2
 b18:	00070d41 	andeq	r0, r7, r1, asr #26
 b1c:	0000001c 	andeq	r0, r0, ip, lsl r0
 b20:	00000aac 	andeq	r0, r0, ip, lsr #21
 b24:	20001c72 	andcs	r1, r0, r2, ror ip
 b28:	00000056 	andeq	r0, r0, r6, asr r0
 b2c:	40080e41 	andmi	r0, r8, r1, asr #28
 b30:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 b34:	180e4101 	stmdane	lr, {r0, r8, lr}
 b38:	00070d41 	andeq	r0, r7, r1, asr #26
 b3c:	0000001c 	andeq	r0, r0, ip, lsl r0
 b40:	00000aac 	andeq	r0, r0, ip, lsr #21
 b44:	20001cc8 	andcs	r1, r0, r8, asr #25
 b48:	00000028 	andeq	r0, r0, r8, lsr #32
 b4c:	40080e41 	andmi	r0, r8, r1, asr #28
 b50:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 b54:	100e4101 	andne	r4, lr, r1, lsl #2
 b58:	00070d41 	andeq	r0, r7, r1, asr #26
 b5c:	0000001c 	andeq	r0, r0, ip, lsl r0
 b60:	00000aac 	andeq	r0, r0, ip, lsr #21
 b64:	20001cf0 	strdcs	r1, [r0], -r0
 b68:	00000048 	andeq	r0, r0, r8, asr #32
 b6c:	40080e41 	andmi	r0, r8, r1, asr #28
 b70:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 b74:	100e4101 	andne	r4, lr, r1, lsl #2
 b78:	00070d41 	andeq	r0, r7, r1, asr #26
 b7c:	0000001c 	andeq	r0, r0, ip, lsl r0
 b80:	00000aac 	andeq	r0, r0, ip, lsr #21
 b84:	20001d38 	andcs	r1, r0, r8, lsr sp
 b88:	0000003a 	andeq	r0, r0, sl, lsr r0
 b8c:	40080e41 	andmi	r0, r8, r1, asr #28
 b90:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 b94:	100e4101 	andne	r4, lr, r1, lsl #2
 b98:	00070d41 	andeq	r0, r7, r1, asr #26
 b9c:	0000001c 	andeq	r0, r0, ip, lsl r0
 ba0:	00000aac 	andeq	r0, r0, ip, lsr #21
 ba4:	20001d72 	andcs	r1, r0, r2, ror sp
 ba8:	00000046 	andeq	r0, r0, r6, asr #32
 bac:	40080e41 	andmi	r0, r8, r1, asr #28
 bb0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 bb4:	100e4101 	andne	r4, lr, r1, lsl #2
 bb8:	00070d41 	andeq	r0, r7, r1, asr #26
 bbc:	0000001c 	andeq	r0, r0, ip, lsl r0
 bc0:	00000aac 	andeq	r0, r0, ip, lsr #21
 bc4:	20001db8 			; <UNDEFINED> instruction: 0x20001db8
 bc8:	00000048 	andeq	r0, r0, r8, asr #32
 bcc:	40080e41 	andmi	r0, r8, r1, asr #28
 bd0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 bd4:	100e4101 	andne	r4, lr, r1, lsl #2
 bd8:	00070d41 	andeq	r0, r7, r1, asr #26
 bdc:	0000001c 	andeq	r0, r0, ip, lsl r0
 be0:	00000aac 	andeq	r0, r0, ip, lsr #21
 be4:	20001e00 	andcs	r1, r0, r0, lsl #28
 be8:	00000024 	andeq	r0, r0, r4, lsr #32
 bec:	40080e41 	andmi	r0, r8, r1, asr #28
 bf0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 bf4:	100e4101 	andne	r4, lr, r1, lsl #2
 bf8:	00070d41 	andeq	r0, r7, r1, asr #26
 bfc:	0000001c 	andeq	r0, r0, ip, lsl r0
 c00:	00000aac 	andeq	r0, r0, ip, lsr #21
 c04:	20001e24 	andcs	r1, r0, r4, lsr #28
 c08:	0000001c 	andeq	r0, r0, ip, lsl r0
 c0c:	40080e41 	andmi	r0, r8, r1, asr #28
 c10:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 c14:	100e4101 	andne	r4, lr, r1, lsl #2
 c18:	00070d41 	andeq	r0, r7, r1, asr #26
 c1c:	0000001c 	andeq	r0, r0, ip, lsl r0
 c20:	00000aac 	andeq	r0, r0, ip, lsr #21
 c24:	20001e40 	andcs	r1, r0, r0, asr #28
 c28:	0000003a 	andeq	r0, r0, sl, lsr r0
 c2c:	40080e41 	andmi	r0, r8, r1, asr #28
 c30:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 c34:	100e4101 	andne	r4, lr, r1, lsl #2
 c38:	00070d41 	andeq	r0, r7, r1, asr #26
 c3c:	0000001c 	andeq	r0, r0, ip, lsl r0
 c40:	00000aac 	andeq	r0, r0, ip, lsr #21
 c44:	20001e7a 	andcs	r1, r0, sl, ror lr
 c48:	00000040 	andeq	r0, r0, r0, asr #32
 c4c:	40080e41 	andmi	r0, r8, r1, asr #28
 c50:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 c54:	100e4101 	andne	r4, lr, r1, lsl #2
 c58:	00070d41 	andeq	r0, r7, r1, asr #26
 c5c:	0000001c 	andeq	r0, r0, ip, lsl r0
 c60:	00000aac 	andeq	r0, r0, ip, lsr #21
 c64:	20001eba 			; <UNDEFINED> instruction: 0x20001eba
 c68:	0000003e 	andeq	r0, r0, lr, lsr r0
 c6c:	40080e41 	andmi	r0, r8, r1, asr #28
 c70:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 c74:	100e4101 	andne	r4, lr, r1, lsl #2
 c78:	00070d41 	andeq	r0, r7, r1, asr #26
 c7c:	0000001c 	andeq	r0, r0, ip, lsl r0
 c80:	00000aac 	andeq	r0, r0, ip, lsr #21
 c84:	20001ef8 	strdcs	r1, [r0], -r8
 c88:	00000038 	andeq	r0, r0, r8, lsr r0
 c8c:	40080e41 	andmi	r0, r8, r1, asr #28
 c90:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 c94:	100e4101 	andne	r4, lr, r1, lsl #2
 c98:	00070d41 	andeq	r0, r7, r1, asr #26
 c9c:	0000001c 	andeq	r0, r0, ip, lsl r0
 ca0:	00000aac 	andeq	r0, r0, ip, lsr #21
 ca4:	20001f30 	andcs	r1, r0, r0, lsr pc
 ca8:	00000048 	andeq	r0, r0, r8, asr #32
 cac:	40080e41 	andmi	r0, r8, r1, asr #28
 cb0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 cb4:	100e4101 	andne	r4, lr, r1, lsl #2
 cb8:	00070d41 	andeq	r0, r7, r1, asr #26
 cbc:	0000001c 	andeq	r0, r0, ip, lsl r0
 cc0:	00000aac 	andeq	r0, r0, ip, lsr #21
 cc4:	20001f78 	andcs	r1, r0, r8, ror pc
 cc8:	00000020 	andeq	r0, r0, r0, lsr #32
 ccc:	40080e41 	andmi	r0, r8, r1, asr #28
 cd0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 cd4:	100e4101 	andne	r4, lr, r1, lsl #2
 cd8:	00070d41 	andeq	r0, r7, r1, asr #26
 cdc:	0000001c 	andeq	r0, r0, ip, lsl r0
 ce0:	00000aac 	andeq	r0, r0, ip, lsr #21
 ce4:	20001f98 	mulcs	r0, r8, pc	; <UNPREDICTABLE>
 ce8:	00000040 	andeq	r0, r0, r0, asr #32
 cec:	40080e41 	andmi	r0, r8, r1, asr #28
 cf0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 cf4:	100e4101 	andne	r4, lr, r1, lsl #2
 cf8:	00070d41 	andeq	r0, r7, r1, asr #26
 cfc:	0000001c 	andeq	r0, r0, ip, lsl r0
 d00:	00000aac 	andeq	r0, r0, ip, lsr #21
 d04:	20001fd8 	ldrdcs	r1, [r0], -r8
 d08:	0000003e 	andeq	r0, r0, lr, lsr r0
 d0c:	40080e41 	andmi	r0, r8, r1, asr #28
 d10:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 d14:	100e4101 	andne	r4, lr, r1, lsl #2
 d18:	00070d41 	andeq	r0, r7, r1, asr #26
 d1c:	0000001c 	andeq	r0, r0, ip, lsl r0
 d20:	00000aac 	andeq	r0, r0, ip, lsr #21
 d24:	20002016 	andcs	r2, r0, r6, lsl r0
 d28:	00000040 	andeq	r0, r0, r0, asr #32
 d2c:	40080e41 	andmi	r0, r8, r1, asr #28
 d30:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 d34:	100e4101 	andne	r4, lr, r1, lsl #2
 d38:	00070d41 	andeq	r0, r7, r1, asr #26
 d3c:	0000001c 	andeq	r0, r0, ip, lsl r0
 d40:	00000aac 	andeq	r0, r0, ip, lsr #21
 d44:	20002056 	andcs	r2, r0, r6, asr r0
 d48:	00000040 	andeq	r0, r0, r0, asr #32
 d4c:	40080e41 	andmi	r0, r8, r1, asr #28
 d50:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 d54:	100e4101 	andne	r4, lr, r1, lsl #2
 d58:	00070d41 	andeq	r0, r7, r1, asr #26
 d5c:	0000001c 	andeq	r0, r0, ip, lsl r0
 d60:	00000aac 	andeq	r0, r0, ip, lsr #21
 d64:	20002096 	mulcs	r0, r6, r0
 d68:	00000038 	andeq	r0, r0, r8, lsr r0
 d6c:	40080e41 	andmi	r0, r8, r1, asr #28
 d70:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 d74:	100e4101 	andne	r4, lr, r1, lsl #2
 d78:	00070d41 	andeq	r0, r7, r1, asr #26
 d7c:	0000001c 	andeq	r0, r0, ip, lsl r0
 d80:	00000aac 	andeq	r0, r0, ip, lsr #21
 d84:	200020ce 	andcs	r2, r0, lr, asr #1
 d88:	00000040 	andeq	r0, r0, r0, asr #32
 d8c:	40080e41 	andmi	r0, r8, r1, asr #28
 d90:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 d94:	100e4101 	andne	r4, lr, r1, lsl #2
 d98:	00070d41 	andeq	r0, r7, r1, asr #26
 d9c:	0000001c 	andeq	r0, r0, ip, lsl r0
 da0:	00000aac 	andeq	r0, r0, ip, lsr #21
 da4:	2000210e 	andcs	r2, r0, lr, lsl #2
 da8:	00000052 	andeq	r0, r0, r2, asr r0
 dac:	40080e41 	andmi	r0, r8, r1, asr #28
 db0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 db4:	100e4101 	andne	r4, lr, r1, lsl #2
 db8:	00070d41 	andeq	r0, r7, r1, asr #26
 dbc:	0000001c 	andeq	r0, r0, ip, lsl r0
 dc0:	00000aac 	andeq	r0, r0, ip, lsr #21
 dc4:	20002160 	andcs	r2, r0, r0, ror #2
 dc8:	0000009a 	muleq	r0, sl, r0
 dcc:	40080e41 	andmi	r0, r8, r1, asr #28
 dd0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 dd4:	200e4101 	andcs	r4, lr, r1, lsl #2
 dd8:	00070d41 	andeq	r0, r7, r1, asr #26
 ddc:	0000001c 	andeq	r0, r0, ip, lsl r0
 de0:	00000aac 	andeq	r0, r0, ip, lsr #21
 de4:	200021fa 	strdcs	r2, [r0], -sl
 de8:	00000048 	andeq	r0, r0, r8, asr #32
 dec:	40080e41 	andmi	r0, r8, r1, asr #28
 df0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 df4:	180e4101 	stmdane	lr, {r0, r8, lr}
 df8:	00070d41 	andeq	r0, r7, r1, asr #26
 dfc:	0000001c 	andeq	r0, r0, ip, lsl r0
 e00:	00000aac 	andeq	r0, r0, ip, lsr #21
 e04:	20002242 	andcs	r2, r0, r2, asr #4
 e08:	00000022 	andeq	r0, r0, r2, lsr #32
 e0c:	40080e41 	andmi	r0, r8, r1, asr #28
 e10:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 e14:	100e4101 	andne	r4, lr, r1, lsl #2
 e18:	00070d41 	andeq	r0, r7, r1, asr #26
 e1c:	0000001c 	andeq	r0, r0, ip, lsl r0
 e20:	00000aac 	andeq	r0, r0, ip, lsr #21
 e24:	20002264 	andcs	r2, r0, r4, ror #4
 e28:	000000ca 	andeq	r0, r0, sl, asr #1
 e2c:	40080e41 	andmi	r0, r8, r1, asr #28
 e30:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 e34:	200e4101 	andcs	r4, lr, r1, lsl #2
 e38:	00070d41 	andeq	r0, r7, r1, asr #26
 e3c:	0000001c 	andeq	r0, r0, ip, lsl r0
 e40:	00000aac 	andeq	r0, r0, ip, lsr #21
 e44:	2000232e 	andcs	r2, r0, lr, lsr #6
 e48:	00000048 	andeq	r0, r0, r8, asr #32
 e4c:	40080e41 	andmi	r0, r8, r1, asr #28
 e50:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 e54:	180e4101 	stmdane	lr, {r0, r8, lr}
 e58:	00070d41 	andeq	r0, r7, r1, asr #26
 e5c:	0000000c 	andeq	r0, r0, ip
 e60:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 e64:	7c010001 	stcvc	0, cr0, [r1], {1}
 e68:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 e6c:	0000000c 	andeq	r0, r0, ip
 e70:	00000e5c 	andeq	r0, r0, ip, asr lr
 e74:	20002379 	andcs	r2, r0, r9, ror r3
 e78:	0000010a 	andeq	r0, r0, sl, lsl #2
