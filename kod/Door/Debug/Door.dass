
./Debug/Door.elf:     file format elf32-littlearm


Disassembly of section .text:

20000000 <startup>:
#include "stm32f4xx_rng.h"
void startup(void) __attribute__((naked)) __attribute__((section(".start_section")));

void startup(void)
{
	__asm volatile(
20000000:	4802      	ldr	r0, [pc, #8]	; (2000000c <_exit+0x4>)
20000002:	4685      	mov	sp, r0
20000004:	f002 fcda 	bl	200029bc <main>

20000008 <_exit>:
20000008:	e7fe      	b.n	20000008 <_exit>
		" LDR R0,=0x2001C000\n" /* set stack */
		" MOV SP,R0\n"
		" BL main\n"   /* call main */
		"_exit: B .\n" /* never return */
	);
}
2000000a:	46c0      	nop			; (mov r8, r8)
2000000c:	2001c000 	andcs	ip, r1, r0

20000010 <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
20000010:	b580      	push	{r7, lr}
20000012:	b082      	sub	sp, #8
20000014:	af00      	add	r7, sp, #0
20000016:	0002      	movs	r2, r0
20000018:	6039      	str	r1, [r7, #0]
2000001a:	1dfb      	adds	r3, r7, #7
2000001c:	701a      	strb	r2, [r3, #0]
  if((int32_t)IRQn < 0) {
2000001e:	1dfb      	adds	r3, r7, #7
20000020:	781b      	ldrb	r3, [r3, #0]
20000022:	2b7f      	cmp	r3, #127	; 0x7f
20000024:	d90d      	bls.n	20000042 <NVIC_SetPriority+0x32>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
20000026:	683b      	ldr	r3, [r7, #0]
20000028:	b2da      	uxtb	r2, r3
2000002a:	490f      	ldr	r1, [pc, #60]	; (20000068 <NVIC_SetPriority+0x58>)
2000002c:	1dfb      	adds	r3, r7, #7
2000002e:	781b      	ldrb	r3, [r3, #0]
20000030:	0018      	movs	r0, r3
20000032:	230f      	movs	r3, #15
20000034:	4003      	ands	r3, r0
20000036:	3b04      	subs	r3, #4
20000038:	0112      	lsls	r2, r2, #4
2000003a:	b2d2      	uxtb	r2, r2
2000003c:	18cb      	adds	r3, r1, r3
2000003e:	761a      	strb	r2, [r3, #24]
  }
  else {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
20000040:	e00d      	b.n	2000005e <NVIC_SetPriority+0x4e>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
20000042:	683b      	ldr	r3, [r7, #0]
20000044:	b2db      	uxtb	r3, r3
20000046:	4909      	ldr	r1, [pc, #36]	; (2000006c <NVIC_SetPriority+0x5c>)
20000048:	1dfa      	adds	r2, r7, #7
2000004a:	7812      	ldrb	r2, [r2, #0]
2000004c:	b252      	sxtb	r2, r2
2000004e:	011b      	lsls	r3, r3, #4
20000050:	b2d8      	uxtb	r0, r3
20000052:	23c0      	movs	r3, #192	; 0xc0
20000054:	009b      	lsls	r3, r3, #2
20000056:	188a      	adds	r2, r1, r2
20000058:	18d3      	adds	r3, r2, r3
2000005a:	1c02      	adds	r2, r0, #0
2000005c:	701a      	strb	r2, [r3, #0]
}
2000005e:	46c0      	nop			; (mov r8, r8)
20000060:	46bd      	mov	sp, r7
20000062:	b002      	add	sp, #8
20000064:	bd80      	pop	{r7, pc}
20000066:	46c0      	nop			; (mov r8, r8)
20000068:	e000ed00 	and	lr, r0, r0, lsl #26
2000006c:	e000e100 	and	lr, r0, r0, lsl #2

20000070 <CANhandlerListNotFull>:
uint8_t SessionIDActive;
uint32_t SessionID;

//Kollar om det finns plats i handlerList
//Returnerar 1 om det finns plats, 0 annars
uint8_t CANhandlerListNotFull(void){
20000070:	b580      	push	{r7, lr}
20000072:	b082      	sub	sp, #8
20000074:	af00      	add	r7, sp, #0
    for (uint8_t index = 0; index < HANDLERLISTSIZE; index++){
20000076:	1dfb      	adds	r3, r7, #7
20000078:	2200      	movs	r2, #0
2000007a:	701a      	strb	r2, [r3, #0]
2000007c:	e00f      	b.n	2000009e <CANhandlerListNotFull+0x2e>
            if (handlerList[index].state == DISABLE){
2000007e:	1dfb      	adds	r3, r7, #7
20000080:	781b      	ldrb	r3, [r3, #0]
20000082:	4a0b      	ldr	r2, [pc, #44]	; (200000b0 <CANhandlerListNotFull+0x40>)
20000084:	011b      	lsls	r3, r3, #4
20000086:	18d3      	adds	r3, r2, r3
20000088:	330c      	adds	r3, #12
2000008a:	781b      	ldrb	r3, [r3, #0]
2000008c:	2b00      	cmp	r3, #0
2000008e:	d101      	bne.n	20000094 <CANhandlerListNotFull+0x24>
                return 1;
20000090:	2301      	movs	r3, #1
20000092:	e009      	b.n	200000a8 <CANhandlerListNotFull+0x38>
    for (uint8_t index = 0; index < HANDLERLISTSIZE; index++){
20000094:	1dfb      	adds	r3, r7, #7
20000096:	781a      	ldrb	r2, [r3, #0]
20000098:	1dfb      	adds	r3, r7, #7
2000009a:	3201      	adds	r2, #1
2000009c:	701a      	strb	r2, [r3, #0]
2000009e:	1dfb      	adds	r3, r7, #7
200000a0:	781b      	ldrb	r3, [r3, #0]
200000a2:	2b0d      	cmp	r3, #13
200000a4:	d9eb      	bls.n	2000007e <CANhandlerListNotFull+0xe>
            }
    }
    return 0;
200000a6:	2300      	movs	r3, #0
}
200000a8:	0018      	movs	r0, r3
200000aa:	46bd      	mov	sp, r7
200000ac:	b002      	add	sp, #8
200000ae:	bd80      	pop	{r7, pc}
200000b0:	20003cbc 			; <UNDEFINED> instruction: 0x20003cbc

200000b4 <CANactivateFilterHandler>:

//Ativerar ett filtet med index från handlerList
void CANactivateFilterHandler (uint8_t index){
200000b4:	b580      	push	{r7, lr}
200000b6:	b088      	sub	sp, #32
200000b8:	af00      	add	r7, sp, #0
200000ba:	0002      	movs	r2, r0
200000bc:	1dfb      	adds	r3, r7, #7
200000be:	701a      	strb	r2, [r3, #0]
            handlerList[index].state = ENABLE;
200000c0:	1dfb      	adds	r3, r7, #7
200000c2:	781b      	ldrb	r3, [r3, #0]
200000c4:	4a20      	ldr	r2, [pc, #128]	; (20000148 <CANactivateFilterHandler+0x94>)
200000c6:	011b      	lsls	r3, r3, #4
200000c8:	18d3      	adds	r3, r2, r3
200000ca:	330c      	adds	r3, #12
200000cc:	2201      	movs	r2, #1
200000ce:	701a      	strb	r2, [r3, #0]

            //Union för omvandling mellan CANFilter och uint16_t
            filterUnion unionFilter, unionMask;
            unionFilter.filter = handlerList[index].filter;
200000d0:	1dfb      	adds	r3, r7, #7
200000d2:	781b      	ldrb	r3, [r3, #0]
200000d4:	4a1c      	ldr	r2, [pc, #112]	; (20000148 <CANactivateFilterHandler+0x94>)
200000d6:	011b      	lsls	r3, r3, #4
200000d8:	18d3      	adds	r3, r2, r3
200000da:	3304      	adds	r3, #4
200000dc:	681b      	ldr	r3, [r3, #0]
200000de:	61fb      	str	r3, [r7, #28]
            unionMask.filter = handlerList[index].mask;
200000e0:	1dfb      	adds	r3, r7, #7
200000e2:	781b      	ldrb	r3, [r3, #0]
200000e4:	4a18      	ldr	r2, [pc, #96]	; (20000148 <CANactivateFilterHandler+0x94>)
200000e6:	011b      	lsls	r3, r3, #4
200000e8:	18d3      	adds	r3, r2, r3
200000ea:	3308      	adds	r3, #8
200000ec:	681b      	ldr	r3, [r3, #0]
200000ee:	61bb      	str	r3, [r7, #24]

            /* CAN filter init */
            CAN_FilterInitTypeDef CAN_FilterInitStructure;
            CAN_FilterInitStructure.CAN_FilterNumber = index;
200000f0:	2108      	movs	r1, #8
200000f2:	187b      	adds	r3, r7, r1
200000f4:	1dfa      	adds	r2, r7, #7
200000f6:	7812      	ldrb	r2, [r2, #0]
200000f8:	729a      	strb	r2, [r3, #10]
            CAN_FilterInitStructure.CAN_FilterMode = CAN_FilterMode_IdMask;
200000fa:	187b      	adds	r3, r7, r1
200000fc:	2200      	movs	r2, #0
200000fe:	72da      	strb	r2, [r3, #11]
            CAN_FilterInitStructure.CAN_FilterScale = CAN_FilterScale_32bit;
20000100:	187b      	adds	r3, r7, r1
20000102:	2201      	movs	r2, #1
20000104:	731a      	strb	r2, [r3, #12]
            CAN_FilterInitStructure.CAN_FilterIdHigh = unionFilter.u16bits[1];
20000106:	201c      	movs	r0, #28
20000108:	183b      	adds	r3, r7, r0
2000010a:	885a      	ldrh	r2, [r3, #2]
2000010c:	187b      	adds	r3, r7, r1
2000010e:	801a      	strh	r2, [r3, #0]
            CAN_FilterInitStructure.CAN_FilterIdLow = unionFilter.u16bits[0];
20000110:	183b      	adds	r3, r7, r0
20000112:	881a      	ldrh	r2, [r3, #0]
20000114:	187b      	adds	r3, r7, r1
20000116:	805a      	strh	r2, [r3, #2]
            CAN_FilterInitStructure.CAN_FilterMaskIdHigh = unionMask.u16bits[1];
20000118:	2018      	movs	r0, #24
2000011a:	183b      	adds	r3, r7, r0
2000011c:	885a      	ldrh	r2, [r3, #2]
2000011e:	187b      	adds	r3, r7, r1
20000120:	809a      	strh	r2, [r3, #4]
            CAN_FilterInitStructure.CAN_FilterMaskIdLow = unionMask.u16bits[0];
20000122:	183b      	adds	r3, r7, r0
20000124:	881a      	ldrh	r2, [r3, #0]
20000126:	187b      	adds	r3, r7, r1
20000128:	80da      	strh	r2, [r3, #6]
            CAN_FilterInitStructure.CAN_FilterFIFOAssignment = 0;
2000012a:	187b      	adds	r3, r7, r1
2000012c:	2200      	movs	r2, #0
2000012e:	811a      	strh	r2, [r3, #8]
            CAN_FilterInitStructure.CAN_FilterActivation = ENABLE;
20000130:	187b      	adds	r3, r7, r1
20000132:	2201      	movs	r2, #1
20000134:	735a      	strb	r2, [r3, #13]
            CAN_FilterInit(&CAN_FilterInitStructure);
20000136:	187b      	adds	r3, r7, r1
20000138:	0018      	movs	r0, r3
2000013a:	f000 fc65 	bl	20000a08 <CAN_FilterInit>
}
2000013e:	46c0      	nop			; (mov r8, r8)
20000140:	46bd      	mov	sp, r7
20000142:	b008      	add	sp, #32
20000144:	bd80      	pop	{r7, pc}
20000146:	46c0      	nop			; (mov r8, r8)
20000148:	20003cbc 			; <UNDEFINED> instruction: 0x20003cbc

2000014c <CANaddFilterHandler>:

//Lägger till ett filter, returnerar index för filtret i handlerList
//Om session ID är aktiverat läggs det automatiskt till i filtret
//Kolla att det finns plats i handlerList innan med handlerListNotFull()
uint8_t CANaddFilterHandler(void (*newHandler)(CanRxMsg *), CANFilter *filter, CANFilter *mask){
2000014c:	b590      	push	{r4, r7, lr}
2000014e:	b087      	sub	sp, #28
20000150:	af00      	add	r7, sp, #0
20000152:	60f8      	str	r0, [r7, #12]
20000154:	60b9      	str	r1, [r7, #8]
20000156:	607a      	str	r2, [r7, #4]
    for (uint8_t index = 0; index < HANDLERLISTSIZE; index++){
20000158:	2317      	movs	r3, #23
2000015a:	18fb      	adds	r3, r7, r3
2000015c:	2200      	movs	r2, #0
2000015e:	701a      	strb	r2, [r3, #0]
20000160:	e076      	b.n	20000250 <CANaddFilterHandler+0x104>
        if (handlerList[index].state == DISABLE){
20000162:	2317      	movs	r3, #23
20000164:	18fb      	adds	r3, r7, r3
20000166:	781b      	ldrb	r3, [r3, #0]
20000168:	4a3e      	ldr	r2, [pc, #248]	; (20000264 <CANaddFilterHandler+0x118>)
2000016a:	011b      	lsls	r3, r3, #4
2000016c:	18d3      	adds	r3, r2, r3
2000016e:	330c      	adds	r3, #12
20000170:	781b      	ldrb	r3, [r3, #0]
20000172:	2b00      	cmp	r3, #0
20000174:	d166      	bne.n	20000244 <CANaddFilterHandler+0xf8>
            //Aktiverar session ID om det är aktivt
            if (SessionIDActive == SESSIONIDACTIVE){
20000176:	4b3c      	ldr	r3, [pc, #240]	; (20000268 <CANaddFilterHandler+0x11c>)
20000178:	781b      	ldrb	r3, [r3, #0]
2000017a:	2b01      	cmp	r3, #1
2000017c:	d13d      	bne.n	200001fa <CANaddFilterHandler+0xae>
                //Används för omvandling och tilldeling av sessionID
                Header header;

                //Alla meddelanden med sessionID aktivt måste vara extended
                filter->IDE = 1;
2000017e:	68bb      	ldr	r3, [r7, #8]
20000180:	781a      	ldrb	r2, [r3, #0]
20000182:	2104      	movs	r1, #4
20000184:	430a      	orrs	r2, r1
20000186:	701a      	strb	r2, [r3, #0]
                mask->IDE = 1;
20000188:	687b      	ldr	r3, [r7, #4]
2000018a:	781a      	ldrb	r2, [r3, #0]
2000018c:	2104      	movs	r1, #4
2000018e:	430a      	orrs	r2, r1
20000190:	701a      	strb	r2, [r3, #0]

                //Skriver sessionID
                UINT32toHEADER(filter->ID, header);
20000192:	68bb      	ldr	r3, [r7, #8]
20000194:	681b      	ldr	r3, [r3, #0]
20000196:	08da      	lsrs	r2, r3, #3
20000198:	2010      	movs	r0, #16
2000019a:	183b      	adds	r3, r7, r0
2000019c:	601a      	str	r2, [r3, #0]
                header.sessionID = SessionID;
2000019e:	4b33      	ldr	r3, [pc, #204]	; (2000026c <CANaddFilterHandler+0x120>)
200001a0:	681b      	ldr	r3, [r3, #0]
200001a2:	059b      	lsls	r3, r3, #22
200001a4:	0d9b      	lsrs	r3, r3, #22
200001a6:	b29b      	uxth	r3, r3
200001a8:	059b      	lsls	r3, r3, #22
200001aa:	0d9b      	lsrs	r3, r3, #22
200001ac:	021b      	lsls	r3, r3, #8
200001ae:	693a      	ldr	r2, [r7, #16]
200001b0:	492f      	ldr	r1, [pc, #188]	; (20000270 <CANaddFilterHandler+0x124>)
200001b2:	400a      	ands	r2, r1
200001b4:	4313      	orrs	r3, r2
200001b6:	613b      	str	r3, [r7, #16]
                HEADERtoUINT32(header, filter->ID);
200001b8:	0004      	movs	r4, r0
200001ba:	183b      	adds	r3, r7, r0
200001bc:	681b      	ldr	r3, [r3, #0]
200001be:	00db      	lsls	r3, r3, #3
200001c0:	08da      	lsrs	r2, r3, #3
200001c2:	68bb      	ldr	r3, [r7, #8]
200001c4:	00d2      	lsls	r2, r2, #3
200001c6:	6819      	ldr	r1, [r3, #0]
200001c8:	2007      	movs	r0, #7
200001ca:	4001      	ands	r1, r0
200001cc:	430a      	orrs	r2, r1
200001ce:	601a      	str	r2, [r3, #0]

                //Skriver sessionID masken
                UINT32toHEADER(mask->ID, header);
200001d0:	687b      	ldr	r3, [r7, #4]
200001d2:	681b      	ldr	r3, [r3, #0]
200001d4:	08da      	lsrs	r2, r3, #3
200001d6:	0020      	movs	r0, r4
200001d8:	183b      	adds	r3, r7, r0
200001da:	601a      	str	r2, [r3, #0]
                header.sessionID = ~0;
200001dc:	693b      	ldr	r3, [r7, #16]
200001de:	4a25      	ldr	r2, [pc, #148]	; (20000274 <CANaddFilterHandler+0x128>)
200001e0:	4313      	orrs	r3, r2
200001e2:	613b      	str	r3, [r7, #16]
                HEADERtoUINT32(header, mask->ID);
200001e4:	183b      	adds	r3, r7, r0
200001e6:	681b      	ldr	r3, [r3, #0]
200001e8:	00db      	lsls	r3, r3, #3
200001ea:	08da      	lsrs	r2, r3, #3
200001ec:	687b      	ldr	r3, [r7, #4]
200001ee:	00d2      	lsls	r2, r2, #3
200001f0:	6819      	ldr	r1, [r3, #0]
200001f2:	2007      	movs	r0, #7
200001f4:	4001      	ands	r1, r0
200001f6:	430a      	orrs	r2, r1
200001f8:	601a      	str	r2, [r3, #0]
            }

            handlerList[index].filter = *filter;
200001fa:	2117      	movs	r1, #23
200001fc:	187b      	adds	r3, r7, r1
200001fe:	781b      	ldrb	r3, [r3, #0]
20000200:	4a18      	ldr	r2, [pc, #96]	; (20000264 <CANaddFilterHandler+0x118>)
20000202:	011b      	lsls	r3, r3, #4
20000204:	18d3      	adds	r3, r2, r3
20000206:	3304      	adds	r3, #4
20000208:	68ba      	ldr	r2, [r7, #8]
2000020a:	6812      	ldr	r2, [r2, #0]
2000020c:	601a      	str	r2, [r3, #0]
            handlerList[index].mask = *mask;
2000020e:	187b      	adds	r3, r7, r1
20000210:	781b      	ldrb	r3, [r3, #0]
20000212:	4a14      	ldr	r2, [pc, #80]	; (20000264 <CANaddFilterHandler+0x118>)
20000214:	011b      	lsls	r3, r3, #4
20000216:	18d3      	adds	r3, r2, r3
20000218:	3308      	adds	r3, #8
2000021a:	687a      	ldr	r2, [r7, #4]
2000021c:	6812      	ldr	r2, [r2, #0]
2000021e:	601a      	str	r2, [r3, #0]
            handlerList[index].handler = newHandler;
20000220:	0008      	movs	r0, r1
20000222:	187b      	adds	r3, r7, r1
20000224:	781a      	ldrb	r2, [r3, #0]
20000226:	4b0f      	ldr	r3, [pc, #60]	; (20000264 <CANaddFilterHandler+0x118>)
20000228:	0112      	lsls	r2, r2, #4
2000022a:	68f9      	ldr	r1, [r7, #12]
2000022c:	50d1      	str	r1, [r2, r3]

            //Aktiverar filtret
            CANactivateFilterHandler(index);
2000022e:	0001      	movs	r1, r0
20000230:	000c      	movs	r4, r1
20000232:	187b      	adds	r3, r7, r1
20000234:	781b      	ldrb	r3, [r3, #0]
20000236:	0018      	movs	r0, r3
20000238:	f7ff ff3c 	bl	200000b4 <CANactivateFilterHandler>

            return index;
2000023c:	0021      	movs	r1, r4
2000023e:	187b      	adds	r3, r7, r1
20000240:	781b      	ldrb	r3, [r3, #0]
20000242:	e00b      	b.n	2000025c <CANaddFilterHandler+0x110>
    for (uint8_t index = 0; index < HANDLERLISTSIZE; index++){
20000244:	2117      	movs	r1, #23
20000246:	187b      	adds	r3, r7, r1
20000248:	781a      	ldrb	r2, [r3, #0]
2000024a:	187b      	adds	r3, r7, r1
2000024c:	3201      	adds	r2, #1
2000024e:	701a      	strb	r2, [r3, #0]
20000250:	2317      	movs	r3, #23
20000252:	18fb      	adds	r3, r7, r3
20000254:	781b      	ldrb	r3, [r3, #0]
20000256:	2b0d      	cmp	r3, #13
20000258:	d983      	bls.n	20000162 <CANaddFilterHandler+0x16>
        }
    }

    //Detta händer bara om man inte kollat så det finns plats innan man lägger till filtret.
    //Skulle man sedan avaktivera filtret med denna index så händer ingenting, se CANdisableFilterHandler.
    return HANDLERLISTSIZE;
2000025a:	230e      	movs	r3, #14
}
2000025c:	0018      	movs	r0, r3
2000025e:	46bd      	mov	sp, r7
20000260:	b007      	add	sp, #28
20000262:	bd90      	pop	{r4, r7, pc}
20000264:	20003cbc 			; <UNDEFINED> instruction: 0x20003cbc
20000268:	20003d9c 	mulcs	r0, ip, sp
2000026c:	20003cb8 			; <UNDEFINED> instruction: 0x20003cb8
20000270:	fffc00ff 			; <UNDEFINED> instruction: 0xfffc00ff
20000274:	0003ff00 	andeq	pc, r3, r0, lsl #30

20000278 <CANdisableFilterHandler>:

//Avaktiverar CANFilterHandler med index index från handlerList
void CANdisableFilterHandler(uint8_t index){
20000278:	b580      	push	{r7, lr}
2000027a:	b086      	sub	sp, #24
2000027c:	af00      	add	r7, sp, #0
2000027e:	0002      	movs	r2, r0
20000280:	1dfb      	adds	r3, r7, #7
20000282:	701a      	strb	r2, [r3, #0]
    if (index < HANDLERLISTSIZE){
20000284:	1dfb      	adds	r3, r7, #7
20000286:	781b      	ldrb	r3, [r3, #0]
20000288:	2b0d      	cmp	r3, #13
2000028a:	d816      	bhi.n	200002ba <CANdisableFilterHandler+0x42>
        handlerList[index].state = DISABLE;
2000028c:	1dfb      	adds	r3, r7, #7
2000028e:	781b      	ldrb	r3, [r3, #0]
20000290:	4a0c      	ldr	r2, [pc, #48]	; (200002c4 <CANdisableFilterHandler+0x4c>)
20000292:	011b      	lsls	r3, r3, #4
20000294:	18d3      	adds	r3, r2, r3
20000296:	330c      	adds	r3, #12
20000298:	2200      	movs	r2, #0
2000029a:	701a      	strb	r2, [r3, #0]

        //Avaktiverar filtret
        CAN_FilterInitTypeDef CAN_FilterInitStructure;
        CAN_FilterInitStructure.CAN_FilterNumber = index;
2000029c:	2108      	movs	r1, #8
2000029e:	187b      	adds	r3, r7, r1
200002a0:	1dfa      	adds	r2, r7, #7
200002a2:	7812      	ldrb	r2, [r2, #0]
200002a4:	729a      	strb	r2, [r3, #10]
        CAN_FilterInitStructure.CAN_FilterFIFOAssignment = 0;
200002a6:	187b      	adds	r3, r7, r1
200002a8:	2200      	movs	r2, #0
200002aa:	811a      	strh	r2, [r3, #8]
        CAN_FilterInitStructure.CAN_FilterActivation = DISABLE;
200002ac:	187b      	adds	r3, r7, r1
200002ae:	2200      	movs	r2, #0
200002b0:	735a      	strb	r2, [r3, #13]
        CAN_FilterInit(&CAN_FilterInitStructure);
200002b2:	187b      	adds	r3, r7, r1
200002b4:	0018      	movs	r0, r3
200002b6:	f000 fba7 	bl	20000a08 <CAN_FilterInit>
    }
}
200002ba:	46c0      	nop			; (mov r8, r8)
200002bc:	46bd      	mov	sp, r7
200002be:	b006      	add	sp, #24
200002c0:	bd80      	pop	{r7, pc}
200002c2:	46c0      	nop			; (mov r8, r8)
200002c4:	20003cbc 			; <UNDEFINED> instruction: 0x20003cbc

200002c8 <CANdisableAllFilterHandlers>:

//Avaktiverar alla CANFilterHandlers
void CANdisableAllFilterHandlers(void){
200002c8:	b580      	push	{r7, lr}
200002ca:	b082      	sub	sp, #8
200002cc:	af00      	add	r7, sp, #0
    for (uint8_t index = 0; index < HANDLERLISTSIZE; index++){
200002ce:	1dfb      	adds	r3, r7, #7
200002d0:	2200      	movs	r2, #0
200002d2:	701a      	strb	r2, [r3, #0]
200002d4:	e009      	b.n	200002ea <CANdisableAllFilterHandlers+0x22>
        CANdisableFilterHandler(index);
200002d6:	1dfb      	adds	r3, r7, #7
200002d8:	781b      	ldrb	r3, [r3, #0]
200002da:	0018      	movs	r0, r3
200002dc:	f7ff ffcc 	bl	20000278 <CANdisableFilterHandler>
    for (uint8_t index = 0; index < HANDLERLISTSIZE; index++){
200002e0:	1dfb      	adds	r3, r7, #7
200002e2:	781a      	ldrb	r2, [r3, #0]
200002e4:	1dfb      	adds	r3, r7, #7
200002e6:	3201      	adds	r2, #1
200002e8:	701a      	strb	r2, [r3, #0]
200002ea:	1dfb      	adds	r3, r7, #7
200002ec:	781b      	ldrb	r3, [r3, #0]
200002ee:	2b0d      	cmp	r3, #13
200002f0:	d9f1      	bls.n	200002d6 <CANdisableAllFilterHandlers+0xe>
    }
}
200002f2:	46c0      	nop			; (mov r8, r8)
200002f4:	46bd      	mov	sp, r7
200002f6:	b002      	add	sp, #8
200002f8:	bd80      	pop	{r7, pc}

200002fa <CANsendMessage>:

//Skickar ett CAN-meddelande
//Omvandlar till extended om det inte redan är det samt session ID är aktivt
//Returnderar numret för mailboxen som används eller CAN_TxStatus_NoMailBox om det misslyckades
uint8_t CANsendMessage(CanTxMsg *msg){
200002fa:	b580      	push	{r7, lr}
200002fc:	b084      	sub	sp, #16
200002fe:	af00      	add	r7, sp, #0
20000300:	6078      	str	r0, [r7, #4]
    //Justerar endast meddelandet om sessionID är aktivt
    if (SessionIDActive == SESSIONIDACTIVE){
20000302:	4b24      	ldr	r3, [pc, #144]	; (20000394 <CANsendMessage+0x9a>)
20000304:	781b      	ldrb	r3, [r3, #0]
20000306:	2b01      	cmp	r3, #1
20000308:	d138      	bne.n	2000037c <CANsendMessage+0x82>
        //Används för omvandling och tilldeling av session ID
        Header header;

        //Om standardmeddelande omvandla till extended
        if (msg->IDE == CAN_Id_Standard){
2000030a:	687b      	ldr	r3, [r7, #4]
2000030c:	7a1b      	ldrb	r3, [r3, #8]
2000030e:	2b00      	cmp	r3, #0
20000310:	d11a      	bne.n	20000348 <CANsendMessage+0x4e>
            msg->IDE = CAN_Id_Extended;
20000312:	687b      	ldr	r3, [r7, #4]
20000314:	2204      	movs	r2, #4
20000316:	721a      	strb	r2, [r3, #8]

            //Skriver sessionID
            UINT32toHEADER(msg->StdId << STDtoEXTLENGTHDIFF, header);
20000318:	687b      	ldr	r3, [r7, #4]
2000031a:	681a      	ldr	r2, [r3, #0]
2000031c:	200c      	movs	r0, #12
2000031e:	183b      	adds	r3, r7, r0
20000320:	0492      	lsls	r2, r2, #18
20000322:	601a      	str	r2, [r3, #0]
            header.sessionID = SessionID;
20000324:	4b1c      	ldr	r3, [pc, #112]	; (20000398 <CANsendMessage+0x9e>)
20000326:	681b      	ldr	r3, [r3, #0]
20000328:	059b      	lsls	r3, r3, #22
2000032a:	0d9b      	lsrs	r3, r3, #22
2000032c:	b29b      	uxth	r3, r3
2000032e:	059b      	lsls	r3, r3, #22
20000330:	0d9b      	lsrs	r3, r3, #22
20000332:	021b      	lsls	r3, r3, #8
20000334:	68fa      	ldr	r2, [r7, #12]
20000336:	4919      	ldr	r1, [pc, #100]	; (2000039c <CANsendMessage+0xa2>)
20000338:	400a      	ands	r2, r1
2000033a:	4313      	orrs	r3, r2
2000033c:	60fb      	str	r3, [r7, #12]
            HEADERtoUINT32(header, msg->ExtId);
2000033e:	183b      	adds	r3, r7, r0
20000340:	681a      	ldr	r2, [r3, #0]
20000342:	687b      	ldr	r3, [r7, #4]
20000344:	605a      	str	r2, [r3, #4]
20000346:	e019      	b.n	2000037c <CANsendMessage+0x82>
        }

        //Annars om det redan är ett meddelande med extended ID
        //justeras endast sessionsbitarna om sessions ID är aktivt
        else if (msg->IDE == CAN_Id_Extended){
20000348:	687b      	ldr	r3, [r7, #4]
2000034a:	7a1b      	ldrb	r3, [r3, #8]
2000034c:	2b04      	cmp	r3, #4
2000034e:	d115      	bne.n	2000037c <CANsendMessage+0x82>
            UINT32toHEADER(msg->ExtId, header);
20000350:	200c      	movs	r0, #12
20000352:	183b      	adds	r3, r7, r0
20000354:	687a      	ldr	r2, [r7, #4]
20000356:	6852      	ldr	r2, [r2, #4]
20000358:	601a      	str	r2, [r3, #0]
            header.sessionID = SessionID;
2000035a:	4b0f      	ldr	r3, [pc, #60]	; (20000398 <CANsendMessage+0x9e>)
2000035c:	681b      	ldr	r3, [r3, #0]
2000035e:	059b      	lsls	r3, r3, #22
20000360:	0d9b      	lsrs	r3, r3, #22
20000362:	b29b      	uxth	r3, r3
20000364:	059b      	lsls	r3, r3, #22
20000366:	0d9b      	lsrs	r3, r3, #22
20000368:	021b      	lsls	r3, r3, #8
2000036a:	68fa      	ldr	r2, [r7, #12]
2000036c:	490b      	ldr	r1, [pc, #44]	; (2000039c <CANsendMessage+0xa2>)
2000036e:	400a      	ands	r2, r1
20000370:	4313      	orrs	r3, r2
20000372:	60fb      	str	r3, [r7, #12]
            HEADERtoUINT32(header, msg->ExtId);
20000374:	183b      	adds	r3, r7, r0
20000376:	681a      	ldr	r2, [r3, #0]
20000378:	687b      	ldr	r3, [r7, #4]
2000037a:	605a      	str	r2, [r3, #4]
        }
    }

	return CAN_Transmit(CAN1, msg);
2000037c:	687b      	ldr	r3, [r7, #4]
2000037e:	4a08      	ldr	r2, [pc, #32]	; (200003a0 <CANsendMessage+0xa6>)
20000380:	0019      	movs	r1, r3
20000382:	0010      	movs	r0, r2
20000384:	f000 fcfe 	bl	20000d84 <CAN_Transmit>
20000388:	0003      	movs	r3, r0
}
2000038a:	0018      	movs	r0, r3
2000038c:	46bd      	mov	sp, r7
2000038e:	b004      	add	sp, #16
20000390:	bd80      	pop	{r7, pc}
20000392:	46c0      	nop			; (mov r8, r8)
20000394:	20003d9c 	mulcs	r0, ip, sp
20000398:	20003cb8 			; <UNDEFINED> instruction: 0x20003cb8
2000039c:	fffc00ff 			; <UNDEFINED> instruction: 0xfffc00ff
200003a0:	40006400 	andmi	r6, r0, r0, lsl #8

200003a4 <can_irq_handler>:

//Avbrottshanterare för mottagna meddelanden på FIFO 0.
//Anropar meddelandes hanteringsfunktion.
void can_irq_handler(void){
200003a4:	b580      	push	{r7, lr}
200003a6:	b086      	sub	sp, #24
200003a8:	af00      	add	r7, sp, #0
    //Kollar FIFO 0 pending Interrupt
    if(CAN_GetITStatus(CAN1, CAN_IT_FMP0)) {
200003aa:	4b17      	ldr	r3, [pc, #92]	; (20000408 <can_irq_handler+0x64>)
200003ac:	2102      	movs	r1, #2
200003ae:	0018      	movs	r0, r3
200003b0:	f001 f97e 	bl	200016b0 <CAN_GetITStatus>
200003b4:	1e03      	subs	r3, r0, #0
200003b6:	d022      	beq.n	200003fe <can_irq_handler+0x5a>
        //Kollar så att det finns meddelande som väntar i FIFO0
        if (CAN_MessagePending(CAN1, CAN_FIFO0)) {
200003b8:	4b13      	ldr	r3, [pc, #76]	; (20000408 <can_irq_handler+0x64>)
200003ba:	2100      	movs	r1, #0
200003bc:	0018      	movs	r0, r3
200003be:	f000 ff59 	bl	20001274 <CAN_MessagePending>
200003c2:	1e03      	subs	r3, r0, #0
200003c4:	d01b      	beq.n	200003fe <can_irq_handler+0x5a>
            //Läser meddelandet
            CanRxMsg rxMsg;
            CAN_Receive(CAN1, CAN_FIFO0, &rxMsg);
200003c6:	1d3b      	adds	r3, r7, #4
200003c8:	480f      	ldr	r0, [pc, #60]	; (20000408 <can_irq_handler+0x64>)
200003ca:	001a      	movs	r2, r3
200003cc:	2100      	movs	r1, #0
200003ce:	f000 fe60 	bl	20001092 <CAN_Receive>

            //Anropar hanteringsfunktionen för meddelandet
            if (rxMsg.FMI < HANDLERLISTSIZE){
200003d2:	1d3b      	adds	r3, r7, #4
200003d4:	7cdb      	ldrb	r3, [r3, #19]
200003d6:	2b0d      	cmp	r3, #13
200003d8:	d811      	bhi.n	200003fe <can_irq_handler+0x5a>
                if (handlerList[rxMsg.FMI].state == ENABLE){
200003da:	1d3b      	adds	r3, r7, #4
200003dc:	7cdb      	ldrb	r3, [r3, #19]
200003de:	4a0b      	ldr	r2, [pc, #44]	; (2000040c <can_irq_handler+0x68>)
200003e0:	011b      	lsls	r3, r3, #4
200003e2:	18d3      	adds	r3, r2, r3
200003e4:	330c      	adds	r3, #12
200003e6:	781b      	ldrb	r3, [r3, #0]
200003e8:	2b01      	cmp	r3, #1
200003ea:	d108      	bne.n	200003fe <can_irq_handler+0x5a>
                    handlerList[rxMsg.FMI].handler(&rxMsg);
200003ec:	1d3b      	adds	r3, r7, #4
200003ee:	7cdb      	ldrb	r3, [r3, #19]
200003f0:	001a      	movs	r2, r3
200003f2:	4b06      	ldr	r3, [pc, #24]	; (2000040c <can_irq_handler+0x68>)
200003f4:	0112      	lsls	r2, r2, #4
200003f6:	58d3      	ldr	r3, [r2, r3]
200003f8:	1d3a      	adds	r2, r7, #4
200003fa:	0010      	movs	r0, r2
200003fc:	4798      	blx	r3
                }
            }
        }
    }
}
200003fe:	46c0      	nop			; (mov r8, r8)
20000400:	46bd      	mov	sp, r7
20000402:	b006      	add	sp, #24
20000404:	bd80      	pop	{r7, pc}
20000406:	46c0      	nop			; (mov r8, r8)
20000408:	40006400 	andmi	r6, r0, r0, lsl #8
2000040c:	20003cbc 			; <UNDEFINED> instruction: 0x20003cbc

20000410 <setSessionId>:

//Sätter session ID,  ändra även session ID för aktiva filter
//Använder de första 10 bitarna av ID
void setSessionId(uint16_t ID){
20000410:	b5b0      	push	{r4, r5, r7, lr}
20000412:	b084      	sub	sp, #16
20000414:	af00      	add	r7, sp, #0
20000416:	0002      	movs	r2, r0
20000418:	1dbb      	adds	r3, r7, #6
2000041a:	801a      	strh	r2, [r3, #0]
    SessionIDActive = SESSIONIDACTIVE;
2000041c:	4b44      	ldr	r3, [pc, #272]	; (20000530 <setSessionId+0x120>)
2000041e:	2201      	movs	r2, #1
20000420:	701a      	strb	r2, [r3, #0]
    SessionID = ID;
20000422:	1dbb      	adds	r3, r7, #6
20000424:	881a      	ldrh	r2, [r3, #0]
20000426:	4b43      	ldr	r3, [pc, #268]	; (20000534 <setSessionId+0x124>)
20000428:	601a      	str	r2, [r3, #0]

    for (uint8_t index = 0; index < HANDLERLISTSIZE; index++){
2000042a:	230f      	movs	r3, #15
2000042c:	18fb      	adds	r3, r7, r3
2000042e:	2200      	movs	r2, #0
20000430:	701a      	strb	r2, [r3, #0]
20000432:	e073      	b.n	2000051c <setSessionId+0x10c>
        //Justerar filter som är aktiva
        if(handlerList[index].state == ENABLE){
20000434:	230f      	movs	r3, #15
20000436:	18fb      	adds	r3, r7, r3
20000438:	781b      	ldrb	r3, [r3, #0]
2000043a:	4a3f      	ldr	r2, [pc, #252]	; (20000538 <setSessionId+0x128>)
2000043c:	011b      	lsls	r3, r3, #4
2000043e:	18d3      	adds	r3, r2, r3
20000440:	330c      	adds	r3, #12
20000442:	781b      	ldrb	r3, [r3, #0]
20000444:	2b01      	cmp	r3, #1
20000446:	d163      	bne.n	20000510 <setSessionId+0x100>
            //Används för omvandling
            Header header;

            //Filtrer och masken måste vara av typ extended
            handlerList[index].filter.IDE = 1;
20000448:	200f      	movs	r0, #15
2000044a:	183b      	adds	r3, r7, r0
2000044c:	781b      	ldrb	r3, [r3, #0]
2000044e:	4a3a      	ldr	r2, [pc, #232]	; (20000538 <setSessionId+0x128>)
20000450:	011b      	lsls	r3, r3, #4
20000452:	18d3      	adds	r3, r2, r3
20000454:	791a      	ldrb	r2, [r3, #4]
20000456:	2104      	movs	r1, #4
20000458:	430a      	orrs	r2, r1
2000045a:	711a      	strb	r2, [r3, #4]
            handlerList[index].mask.IDE = 1;
2000045c:	183b      	adds	r3, r7, r0
2000045e:	781b      	ldrb	r3, [r3, #0]
20000460:	4a35      	ldr	r2, [pc, #212]	; (20000538 <setSessionId+0x128>)
20000462:	2108      	movs	r1, #8
20000464:	011b      	lsls	r3, r3, #4
20000466:	18d3      	adds	r3, r2, r3
20000468:	185b      	adds	r3, r3, r1
2000046a:	781a      	ldrb	r2, [r3, #0]
2000046c:	2104      	movs	r1, #4
2000046e:	430a      	orrs	r2, r1
20000470:	701a      	strb	r2, [r3, #0]

            //Ändrar filter
            UINT32toHEADER(handlerList[index].filter.ID, header);
20000472:	183b      	adds	r3, r7, r0
20000474:	781b      	ldrb	r3, [r3, #0]
20000476:	4a30      	ldr	r2, [pc, #192]	; (20000538 <setSessionId+0x128>)
20000478:	011b      	lsls	r3, r3, #4
2000047a:	18d3      	adds	r3, r2, r3
2000047c:	685b      	ldr	r3, [r3, #4]
2000047e:	08da      	lsrs	r2, r3, #3
20000480:	2508      	movs	r5, #8
20000482:	197b      	adds	r3, r7, r5
20000484:	601a      	str	r2, [r3, #0]
            header.sessionID = SessionID;
20000486:	4b2b      	ldr	r3, [pc, #172]	; (20000534 <setSessionId+0x124>)
20000488:	681b      	ldr	r3, [r3, #0]
2000048a:	059b      	lsls	r3, r3, #22
2000048c:	0d9b      	lsrs	r3, r3, #22
2000048e:	b29b      	uxth	r3, r3
20000490:	059b      	lsls	r3, r3, #22
20000492:	0d9b      	lsrs	r3, r3, #22
20000494:	021b      	lsls	r3, r3, #8
20000496:	68ba      	ldr	r2, [r7, #8]
20000498:	4928      	ldr	r1, [pc, #160]	; (2000053c <setSessionId+0x12c>)
2000049a:	400a      	ands	r2, r1
2000049c:	4313      	orrs	r3, r2
2000049e:	60bb      	str	r3, [r7, #8]
            HEADERtoUINT32(header, handlerList[index].filter.ID);
200004a0:	197b      	adds	r3, r7, r5
200004a2:	681a      	ldr	r2, [r3, #0]
200004a4:	0004      	movs	r4, r0
200004a6:	183b      	adds	r3, r7, r0
200004a8:	781b      	ldrb	r3, [r3, #0]
200004aa:	00d2      	lsls	r2, r2, #3
200004ac:	08d2      	lsrs	r2, r2, #3
200004ae:	4922      	ldr	r1, [pc, #136]	; (20000538 <setSessionId+0x128>)
200004b0:	011b      	lsls	r3, r3, #4
200004b2:	18cb      	adds	r3, r1, r3
200004b4:	00d2      	lsls	r2, r2, #3
200004b6:	6859      	ldr	r1, [r3, #4]
200004b8:	2007      	movs	r0, #7
200004ba:	4001      	ands	r1, r0
200004bc:	430a      	orrs	r2, r1
200004be:	605a      	str	r2, [r3, #4]

            //Ändrar masken
            UINT32toHEADER(handlerList[index].mask.ID, header);
200004c0:	0020      	movs	r0, r4
200004c2:	183b      	adds	r3, r7, r0
200004c4:	781b      	ldrb	r3, [r3, #0]
200004c6:	4a1c      	ldr	r2, [pc, #112]	; (20000538 <setSessionId+0x128>)
200004c8:	2108      	movs	r1, #8
200004ca:	011b      	lsls	r3, r3, #4
200004cc:	18d3      	adds	r3, r2, r3
200004ce:	185b      	adds	r3, r3, r1
200004d0:	681b      	ldr	r3, [r3, #0]
200004d2:	08da      	lsrs	r2, r3, #3
200004d4:	197b      	adds	r3, r7, r5
200004d6:	601a      	str	r2, [r3, #0]
            header.sessionID = ~0;
200004d8:	68bb      	ldr	r3, [r7, #8]
200004da:	4a19      	ldr	r2, [pc, #100]	; (20000540 <setSessionId+0x130>)
200004dc:	4313      	orrs	r3, r2
200004de:	60bb      	str	r3, [r7, #8]
            HEADERtoUINT32(header, handlerList[index].mask.ID);
200004e0:	197b      	adds	r3, r7, r5
200004e2:	681a      	ldr	r2, [r3, #0]
200004e4:	0004      	movs	r4, r0
200004e6:	183b      	adds	r3, r7, r0
200004e8:	781b      	ldrb	r3, [r3, #0]
200004ea:	00d2      	lsls	r2, r2, #3
200004ec:	08d2      	lsrs	r2, r2, #3
200004ee:	4912      	ldr	r1, [pc, #72]	; (20000538 <setSessionId+0x128>)
200004f0:	2008      	movs	r0, #8
200004f2:	011b      	lsls	r3, r3, #4
200004f4:	18cb      	adds	r3, r1, r3
200004f6:	181b      	adds	r3, r3, r0
200004f8:	00d2      	lsls	r2, r2, #3
200004fa:	6819      	ldr	r1, [r3, #0]
200004fc:	2007      	movs	r0, #7
200004fe:	4001      	ands	r1, r0
20000500:	430a      	orrs	r2, r1
20000502:	601a      	str	r2, [r3, #0]

            CANactivateFilterHandler(index);
20000504:	0020      	movs	r0, r4
20000506:	183b      	adds	r3, r7, r0
20000508:	781b      	ldrb	r3, [r3, #0]
2000050a:	0018      	movs	r0, r3
2000050c:	f7ff fdd2 	bl	200000b4 <CANactivateFilterHandler>
    for (uint8_t index = 0; index < HANDLERLISTSIZE; index++){
20000510:	210f      	movs	r1, #15
20000512:	187b      	adds	r3, r7, r1
20000514:	781a      	ldrb	r2, [r3, #0]
20000516:	187b      	adds	r3, r7, r1
20000518:	3201      	adds	r2, #1
2000051a:	701a      	strb	r2, [r3, #0]
2000051c:	230f      	movs	r3, #15
2000051e:	18fb      	adds	r3, r7, r3
20000520:	781b      	ldrb	r3, [r3, #0]
20000522:	2b0d      	cmp	r3, #13
20000524:	d986      	bls.n	20000434 <setSessionId+0x24>
        }
    }
}
20000526:	46c0      	nop			; (mov r8, r8)
20000528:	46bd      	mov	sp, r7
2000052a:	b004      	add	sp, #16
2000052c:	bdb0      	pop	{r4, r5, r7, pc}
2000052e:	46c0      	nop			; (mov r8, r8)
20000530:	20003d9c 	mulcs	r0, ip, sp
20000534:	20003cb8 			; <UNDEFINED> instruction: 0x20003cb8
20000538:	20003cbc 			; <UNDEFINED> instruction: 0x20003cbc
2000053c:	fffc00ff 			; <UNDEFINED> instruction: 0xfffc00ff
20000540:	0003ff00 	andeq	pc, r3, r0, lsl #30

20000544 <noSessionId>:

//Avaktiverar session ID för aktiva filter och kommande filter
void noSessionId(void){
20000544:	b580      	push	{r7, lr}
20000546:	b082      	sub	sp, #8
20000548:	af00      	add	r7, sp, #0
    SessionIDActive = SESSIONIDINACTIVE;
2000054a:	4b21      	ldr	r3, [pc, #132]	; (200005d0 <noSessionId+0x8c>)
2000054c:	2200      	movs	r2, #0
2000054e:	701a      	strb	r2, [r3, #0]

    for (uint8_t index = 0; index < HANDLERLISTSIZE; index++){
20000550:	1dfb      	adds	r3, r7, #7
20000552:	2200      	movs	r2, #0
20000554:	701a      	strb	r2, [r3, #0]
20000556:	e032      	b.n	200005be <noSessionId+0x7a>
        //Avaktiverar filtering för sessionID på de aktiva filtren
        if(handlerList[index].state == ENABLE){
20000558:	1dfb      	adds	r3, r7, #7
2000055a:	781b      	ldrb	r3, [r3, #0]
2000055c:	4a1d      	ldr	r2, [pc, #116]	; (200005d4 <noSessionId+0x90>)
2000055e:	011b      	lsls	r3, r3, #4
20000560:	18d3      	adds	r3, r2, r3
20000562:	330c      	adds	r3, #12
20000564:	781b      	ldrb	r3, [r3, #0]
20000566:	2b01      	cmp	r3, #1
20000568:	d124      	bne.n	200005b4 <noSessionId+0x70>
            //Används för omvandling
            Header header;

            UINT32toHEADER(handlerList[index].mask.ID, header);
2000056a:	1dfb      	adds	r3, r7, #7
2000056c:	781b      	ldrb	r3, [r3, #0]
2000056e:	4a19      	ldr	r2, [pc, #100]	; (200005d4 <noSessionId+0x90>)
20000570:	2108      	movs	r1, #8
20000572:	011b      	lsls	r3, r3, #4
20000574:	18d3      	adds	r3, r2, r3
20000576:	185b      	adds	r3, r3, r1
20000578:	681b      	ldr	r3, [r3, #0]
2000057a:	08da      	lsrs	r2, r3, #3
2000057c:	003b      	movs	r3, r7
2000057e:	601a      	str	r2, [r3, #0]
            header.sessionID  = 0;
20000580:	683b      	ldr	r3, [r7, #0]
20000582:	4a15      	ldr	r2, [pc, #84]	; (200005d8 <noSessionId+0x94>)
20000584:	4013      	ands	r3, r2
20000586:	603b      	str	r3, [r7, #0]
            HEADERtoUINT32(header, handlerList[index].mask.ID);
20000588:	003b      	movs	r3, r7
2000058a:	681a      	ldr	r2, [r3, #0]
2000058c:	1dfb      	adds	r3, r7, #7
2000058e:	781b      	ldrb	r3, [r3, #0]
20000590:	00d2      	lsls	r2, r2, #3
20000592:	08d2      	lsrs	r2, r2, #3
20000594:	490f      	ldr	r1, [pc, #60]	; (200005d4 <noSessionId+0x90>)
20000596:	2008      	movs	r0, #8
20000598:	011b      	lsls	r3, r3, #4
2000059a:	18cb      	adds	r3, r1, r3
2000059c:	181b      	adds	r3, r3, r0
2000059e:	00d2      	lsls	r2, r2, #3
200005a0:	6819      	ldr	r1, [r3, #0]
200005a2:	2007      	movs	r0, #7
200005a4:	4001      	ands	r1, r0
200005a6:	430a      	orrs	r2, r1
200005a8:	601a      	str	r2, [r3, #0]
            CANactivateFilterHandler(index);
200005aa:	1dfb      	adds	r3, r7, #7
200005ac:	781b      	ldrb	r3, [r3, #0]
200005ae:	0018      	movs	r0, r3
200005b0:	f7ff fd80 	bl	200000b4 <CANactivateFilterHandler>
    for (uint8_t index = 0; index < HANDLERLISTSIZE; index++){
200005b4:	1dfb      	adds	r3, r7, #7
200005b6:	781a      	ldrb	r2, [r3, #0]
200005b8:	1dfb      	adds	r3, r7, #7
200005ba:	3201      	adds	r2, #1
200005bc:	701a      	strb	r2, [r3, #0]
200005be:	1dfb      	adds	r3, r7, #7
200005c0:	781b      	ldrb	r3, [r3, #0]
200005c2:	2b0d      	cmp	r3, #13
200005c4:	d9c8      	bls.n	20000558 <noSessionId+0x14>
        }
    }
}
200005c6:	46c0      	nop			; (mov r8, r8)
200005c8:	46bd      	mov	sp, r7
200005ca:	b002      	add	sp, #8
200005cc:	bd80      	pop	{r7, pc}
200005ce:	46c0      	nop			; (mov r8, r8)
200005d0:	20003d9c 	mulcs	r0, ip, sp
200005d4:	20003cbc 			; <UNDEFINED> instruction: 0x20003cbc
200005d8:	fffc00ff 			; <UNDEFINED> instruction: 0xfffc00ff

200005dc <can_init>:

uint8_t can_init() {
200005dc:	b5f0      	push	{r4, r5, r6, r7, lr}
200005de:	b089      	sub	sp, #36	; 0x24
200005e0:	af00      	add	r7, sp, #0
	CAN_InitTypeDef CAN_InitStructure;
	NVIC_InitTypeDef NVIC_InitStructure;
	GPIO_InitTypeDef GPIO_InitStructure;

	RCC_APB1PeriphClockCmd(RCC_APB1Periph_CAN1, ENABLE);
200005e2:	2380      	movs	r3, #128	; 0x80
200005e4:	049b      	lsls	r3, r3, #18
200005e6:	2101      	movs	r1, #1
200005e8:	0018      	movs	r0, r3
200005ea:	f001 fe71 	bl	200022d0 <RCC_APB1PeriphClockCmd>
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);
200005ee:	2380      	movs	r3, #128	; 0x80
200005f0:	01db      	lsls	r3, r3, #7
200005f2:	2101      	movs	r1, #1
200005f4:	0018      	movs	r0, r3
200005f6:	f001 fe8b 	bl	20002310 <RCC_APB2PeriphClockCmd>
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE);
200005fa:	2101      	movs	r1, #1
200005fc:	2002      	movs	r0, #2
200005fe:	f001 fe07 	bl	20002210 <RCC_AHB1PeriphClockCmd>

	// Connect CAN pins to AF9. See more below
	GPIO_PinAFConfig(GPIOB, GPIO_PinSource9, GPIO_AF_CAN1);
20000602:	4b61      	ldr	r3, [pc, #388]	; (20000788 <can_init+0x1ac>)
20000604:	2209      	movs	r2, #9
20000606:	2109      	movs	r1, #9
20000608:	0018      	movs	r0, r3
2000060a:	f003 fa6a 	bl	20003ae2 <GPIO_PinAFConfig>
    GPIO_PinAFConfig(GPIOB, GPIO_PinSource8, GPIO_AF_CAN1);  
2000060e:	4b5e      	ldr	r3, [pc, #376]	; (20000788 <can_init+0x1ac>)
20000610:	2209      	movs	r2, #9
20000612:	2108      	movs	r1, #8
20000614:	0018      	movs	r0, r3
20000616:	f003 fa64 	bl	20003ae2 <GPIO_PinAFConfig>
	// Configure CAN RX and TX pins
	// See page 41 of MD407 reference manual
	// Connect CAN1 pins to AF
    // PB9 - CAN1 TX
    // PB8 - CAN1 RX
    GPIO_PinAFConfig(GPIOB, GPIO_PinSource9, GPIO_AF_CAN1);  	
2000061a:	4b5b      	ldr	r3, [pc, #364]	; (20000788 <can_init+0x1ac>)
2000061c:	2209      	movs	r2, #9
2000061e:	2109      	movs	r1, #9
20000620:	0018      	movs	r0, r3
20000622:	f003 fa5e 	bl	20003ae2 <GPIO_PinAFConfig>
    GPIO_PinAFConfig(GPIOB, GPIO_PinSource8, GPIO_AF_CAN1);  
20000626:	4b58      	ldr	r3, [pc, #352]	; (20000788 <can_init+0x1ac>)
20000628:	2209      	movs	r2, #9
2000062a:	2108      	movs	r1, #8
2000062c:	0018      	movs	r0, r3
2000062e:	f003 fa58 	bl	20003ae2 <GPIO_PinAFConfig>

    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_9;
20000632:	1d3b      	adds	r3, r7, #4
20000634:	2280      	movs	r2, #128	; 0x80
20000636:	0092      	lsls	r2, r2, #2
20000638:	601a      	str	r2, [r3, #0]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
2000063a:	1d3b      	adds	r3, r7, #4
2000063c:	2202      	movs	r2, #2
2000063e:	711a      	strb	r2, [r3, #4]
    GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
20000640:	1d3b      	adds	r3, r7, #4
20000642:	2200      	movs	r2, #0
20000644:	719a      	strb	r2, [r3, #6]
    GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
20000646:	1d3b      	adds	r3, r7, #4
20000648:	2200      	movs	r2, #0
2000064a:	71da      	strb	r2, [r3, #7]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
2000064c:	1d3b      	adds	r3, r7, #4
2000064e:	2202      	movs	r2, #2
20000650:	715a      	strb	r2, [r3, #5]
    GPIO_Init(GPIOB, &GPIO_InitStructure);	
20000652:	1d3b      	adds	r3, r7, #4
20000654:	4a4c      	ldr	r2, [pc, #304]	; (20000788 <can_init+0x1ac>)
20000656:	0019      	movs	r1, r3
20000658:	0010      	movs	r0, r2
2000065a:	f003 f8c5 	bl	200037e8 <GPIO_Init>

    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_8;	
2000065e:	1d3b      	adds	r3, r7, #4
20000660:	2280      	movs	r2, #128	; 0x80
20000662:	0052      	lsls	r2, r2, #1
20000664:	601a      	str	r2, [r3, #0]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
20000666:	1d3b      	adds	r3, r7, #4
20000668:	2202      	movs	r2, #2
2000066a:	711a      	strb	r2, [r3, #4]
    GPIO_InitStructure.GPIO_OType = GPIO_Mode_IN;
2000066c:	1d3b      	adds	r3, r7, #4
2000066e:	2200      	movs	r2, #0
20000670:	719a      	strb	r2, [r3, #6]
    GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;	
20000672:	1d3b      	adds	r3, r7, #4
20000674:	2201      	movs	r2, #1
20000676:	71da      	strb	r2, [r3, #7]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
20000678:	1d3b      	adds	r3, r7, #4
2000067a:	2202      	movs	r2, #2
2000067c:	715a      	strb	r2, [r3, #5]
    GPIO_Init(GPIOB, &GPIO_InitStructure);
2000067e:	1d3b      	adds	r3, r7, #4
20000680:	4a41      	ldr	r2, [pc, #260]	; (20000788 <can_init+0x1ac>)
20000682:	0019      	movs	r1, r3
20000684:	0010      	movs	r0, r2
20000686:	f003 f8af 	bl	200037e8 <GPIO_Init>
    
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_6;
2000068a:	1d3b      	adds	r3, r7, #4
2000068c:	2240      	movs	r2, #64	; 0x40
2000068e:	601a      	str	r2, [r3, #0]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
20000690:	1d3b      	adds	r3, r7, #4
20000692:	2202      	movs	r2, #2
20000694:	711a      	strb	r2, [r3, #4]
    GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
20000696:	1d3b      	adds	r3, r7, #4
20000698:	2200      	movs	r2, #0
2000069a:	719a      	strb	r2, [r3, #6]
    GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
2000069c:	1d3b      	adds	r3, r7, #4
2000069e:	2200      	movs	r2, #0
200006a0:	71da      	strb	r2, [r3, #7]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
200006a2:	1d3b      	adds	r3, r7, #4
200006a4:	2202      	movs	r2, #2
200006a6:	715a      	strb	r2, [r3, #5]
    GPIO_Init(GPIOB, &GPIO_InitStructure);	
200006a8:	1d3b      	adds	r3, r7, #4
200006aa:	4a37      	ldr	r2, [pc, #220]	; (20000788 <can_init+0x1ac>)
200006ac:	0019      	movs	r1, r3
200006ae:	0010      	movs	r0, r2
200006b0:	f003 f89a 	bl	200037e8 <GPIO_Init>

    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_5;	
200006b4:	1d3b      	adds	r3, r7, #4
200006b6:	2220      	movs	r2, #32
200006b8:	601a      	str	r2, [r3, #0]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
200006ba:	1d3b      	adds	r3, r7, #4
200006bc:	2202      	movs	r2, #2
200006be:	711a      	strb	r2, [r3, #4]
    GPIO_InitStructure.GPIO_OType = GPIO_Mode_IN;
200006c0:	1d3b      	adds	r3, r7, #4
200006c2:	2200      	movs	r2, #0
200006c4:	719a      	strb	r2, [r3, #6]
    GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;	
200006c6:	1d3b      	adds	r3, r7, #4
200006c8:	2201      	movs	r2, #1
200006ca:	71da      	strb	r2, [r3, #7]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
200006cc:	1d3b      	adds	r3, r7, #4
200006ce:	2202      	movs	r2, #2
200006d0:	715a      	strb	r2, [r3, #5]
    GPIO_Init(GPIOB, &GPIO_InitStructure);
200006d2:	1d3b      	adds	r3, r7, #4
200006d4:	4a2c      	ldr	r2, [pc, #176]	; (20000788 <can_init+0x1ac>)
200006d6:	0019      	movs	r1, r3
200006d8:	0010      	movs	r0, r2
200006da:	f003 f885 	bl	200037e8 <GPIO_Init>
	
	NVIC_InitStructure.NVIC_IRQChannel = CAN1_RX0_IRQn;
200006de:	210c      	movs	r1, #12
200006e0:	187b      	adds	r3, r7, r1
200006e2:	2214      	movs	r2, #20
200006e4:	701a      	strb	r2, [r3, #0]
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = __CAN_IRQ_PRIORITY;
200006e6:	187b      	adds	r3, r7, r1
200006e8:	2202      	movs	r2, #2
200006ea:	705a      	strb	r2, [r3, #1]
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0x2;
200006ec:	187b      	adds	r3, r7, r1
200006ee:	2202      	movs	r2, #2
200006f0:	709a      	strb	r2, [r3, #2]
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
200006f2:	187b      	adds	r3, r7, r1
200006f4:	2201      	movs	r2, #1
200006f6:	70da      	strb	r2, [r3, #3]
	NVIC_Init(&NVIC_InitStructure);
200006f8:	187b      	adds	r3, r7, r1
200006fa:	0018      	movs	r0, r3
200006fc:	f002 feec 	bl	200034d8 <NVIC_Init>

	/* CAN register init */
	CAN_DeInit(CAN1);
20000700:	4b22      	ldr	r3, [pc, #136]	; (2000078c <can_init+0x1b0>)
20000702:	0018      	movs	r0, r3
20000704:	f000 f876 	bl	200007f4 <CAN_DeInit>

	/* CAN cell init */
	CAN_InitStructure.CAN_TTCM = DISABLE; // time-triggered communication mode = DISABLED
20000708:	2510      	movs	r5, #16
2000070a:	197b      	adds	r3, r7, r5
2000070c:	2200      	movs	r2, #0
2000070e:	719a      	strb	r2, [r3, #6]
    CAN_InitStructure.CAN_ABOM = DISABLE; // automatic bus-off management mode = DISABLED
20000710:	197b      	adds	r3, r7, r5
20000712:	2200      	movs	r2, #0
20000714:	71da      	strb	r2, [r3, #7]
    CAN_InitStructure.CAN_AWUM = DISABLE; // automatic wake-up mode = DISABLED
20000716:	197b      	adds	r3, r7, r5
20000718:	2200      	movs	r2, #0
2000071a:	721a      	strb	r2, [r3, #8]
    CAN_InitStructure.CAN_NART = DISABLE; // non-automatic retransmission mode = DISABLED
2000071c:	197b      	adds	r3, r7, r5
2000071e:	2200      	movs	r2, #0
20000720:	725a      	strb	r2, [r3, #9]
    CAN_InitStructure.CAN_RFLM = DISABLE; // receive FIFO locked mode = DISABLED
20000722:	197b      	adds	r3, r7, r5
20000724:	2200      	movs	r2, #0
20000726:	729a      	strb	r2, [r3, #10]
    CAN_InitStructure.CAN_TXFP = DISABLE; // transmit FIFO priority = DISABLED
20000728:	197b      	adds	r3, r7, r5
2000072a:	2200      	movs	r2, #0
2000072c:	72da      	strb	r2, [r3, #11]
    CAN_InitStructure.CAN_Mode = CAN_Mode_Normal; // normal CAN mode
2000072e:	197b      	adds	r3, r7, r5
20000730:	2200      	movs	r2, #0
20000732:	709a      	strb	r2, [r3, #2]

	/* CAN Baudrate = 1 MBps (CAN clocked at 30 MHz) */
	CAN_InitStructure.CAN_BS1 = CAN_BS1_3tq;
20000734:	197b      	adds	r3, r7, r5
20000736:	2202      	movs	r2, #2
20000738:	711a      	strb	r2, [r3, #4]
	CAN_InitStructure.CAN_BS2 = CAN_BS2_4tq;
2000073a:	197b      	adds	r3, r7, r5
2000073c:	2203      	movs	r2, #3
2000073e:	715a      	strb	r2, [r3, #5]
	CAN_InitStructure.CAN_Prescaler = 7;
20000740:	197b      	adds	r3, r7, r5
20000742:	2207      	movs	r2, #7
20000744:	801a      	strh	r2, [r3, #0]

    //Avaktiverar alla filter
    CANdisableAllFilterHandlers();
20000746:	f7ff fdbf 	bl	200002c8 <CANdisableAllFilterHandlers>

	uint8_t can_init_status = CAN_Init(CAN1, &CAN_InitStructure);
2000074a:	261f      	movs	r6, #31
2000074c:	19bc      	adds	r4, r7, r6
2000074e:	197b      	adds	r3, r7, r5
20000750:	4a0e      	ldr	r2, [pc, #56]	; (2000078c <can_init+0x1b0>)
20000752:	0019      	movs	r1, r3
20000754:	0010      	movs	r0, r2
20000756:	f000 f875 	bl	20000844 <CAN_Init>
2000075a:	0003      	movs	r3, r0
2000075c:	7023      	strb	r3, [r4, #0]

	*((void (**)(void) ) CAN1_IRQ_VECTOR ) = can_irq_handler;
2000075e:	4b0c      	ldr	r3, [pc, #48]	; (20000790 <can_init+0x1b4>)
20000760:	4a0c      	ldr	r2, [pc, #48]	; (20000794 <can_init+0x1b8>)
20000762:	601a      	str	r2, [r3, #0]
	// We need the following function because it's not equivalent to what NVIC_Init does with respect
	// to IRQ priority. Which seems bananas to me...
    NVIC_SetPriority( CAN1_RX0_IRQn, __CAN_IRQ_PRIORITY);
20000764:	2102      	movs	r1, #2
20000766:	2014      	movs	r0, #20
20000768:	f7ff fc52 	bl	20000010 <NVIC_SetPriority>
	CAN_ITConfig(CAN1, CAN_IT_FMP0, ENABLE);
2000076c:	4b07      	ldr	r3, [pc, #28]	; (2000078c <can_init+0x1b0>)
2000076e:	2201      	movs	r2, #1
20000770:	2102      	movs	r1, #2
20000772:	0018      	movs	r0, r3
20000774:	f000 fecf 	bl	20001516 <CAN_ITConfig>

    //Avaktiverar Session ID
    noSessionId();
20000778:	f7ff fee4 	bl	20000544 <noSessionId>

	return can_init_status;
2000077c:	19bb      	adds	r3, r7, r6
2000077e:	781b      	ldrb	r3, [r3, #0]
}
20000780:	0018      	movs	r0, r3
20000782:	46bd      	mov	sp, r7
20000784:	b009      	add	sp, #36	; 0x24
20000786:	bdf0      	pop	{r4, r5, r6, r7, pc}
20000788:	40020400 	andmi	r0, r2, r0, lsl #8
2000078c:	40006400 	andmi	r6, r0, r0, lsl #8
20000790:	2001c090 	mulcs	r1, r0, r0
20000794:	200003a5 	andcs	r0, r0, r5, lsr #7

20000798 <decode_door_config_msg>:



uint8_t decode_door_config_msg(CanRxMsg *msg, uint8_t *door_id_0, uint8_t *door_id_1, uint16_t *time_0, uint16_t *time_1, uint8_t *locked) {
20000798:	b580      	push	{r7, lr}
2000079a:	b086      	sub	sp, #24
2000079c:	af00      	add	r7, sp, #0
2000079e:	60f8      	str	r0, [r7, #12]
200007a0:	60b9      	str	r1, [r7, #8]
200007a2:	607a      	str	r2, [r7, #4]
200007a4:	603b      	str	r3, [r7, #0]
    uint8_t *data_pointer =  &(msg->Data);
200007a6:	68fb      	ldr	r3, [r7, #12]
200007a8:	330b      	adds	r3, #11
200007aa:	617b      	str	r3, [r7, #20]
    
    door_id_0 = data_pointer;
200007ac:	697b      	ldr	r3, [r7, #20]
200007ae:	60bb      	str	r3, [r7, #8]
    door_id_1 = data_pointer + 1;
200007b0:	697b      	ldr	r3, [r7, #20]
200007b2:	3301      	adds	r3, #1
200007b4:	607b      	str	r3, [r7, #4]
    
    time_0 = data_pointer + 2;
200007b6:	697b      	ldr	r3, [r7, #20]
200007b8:	3302      	adds	r3, #2
200007ba:	603b      	str	r3, [r7, #0]
    time_1 = data_pointer + 4;
200007bc:	697b      	ldr	r3, [r7, #20]
200007be:	3304      	adds	r3, #4
200007c0:	623b      	str	r3, [r7, #32]
    
    locked = data_pointer + 6;
200007c2:	697b      	ldr	r3, [r7, #20]
200007c4:	3306      	adds	r3, #6
200007c6:	627b      	str	r3, [r7, #36]	; 0x24
    
    
    return 1;
200007c8:	2301      	movs	r3, #1
}
200007ca:	0018      	movs	r0, r3
200007cc:	46bd      	mov	sp, r7
200007ce:	b006      	add	sp, #24
200007d0:	bd80      	pop	{r7, pc}

200007d2 <handle_recieve_id_msg>:





uint8_t handle_recieve_id_msg(CanRxMsg *msg) {
200007d2:	b580      	push	{r7, lr}
200007d4:	b084      	sub	sp, #16
200007d6:	af00      	add	r7, sp, #0
200007d8:	6078      	str	r0, [r7, #4]
    uint16_t id;
    uint8_t *data_pointer =  &(msg->Data);
200007da:	687b      	ldr	r3, [r7, #4]
200007dc:	330b      	adds	r3, #11
200007de:	60fb      	str	r3, [r7, #12]
    
    id = *data_pointer;
200007e0:	68fb      	ldr	r3, [r7, #12]
200007e2:	781a      	ldrb	r2, [r3, #0]
200007e4:	230a      	movs	r3, #10
200007e6:	18fb      	adds	r3, r7, r3
200007e8:	801a      	strh	r2, [r3, #0]
    
    //TODO: Gör grejer med id
}
200007ea:	46c0      	nop			; (mov r8, r8)
200007ec:	0018      	movs	r0, r3
200007ee:	46bd      	mov	sp, r7
200007f0:	b004      	add	sp, #16
200007f2:	bd80      	pop	{r7, pc}

200007f4 <CAN_DeInit>:
  * @param  CANx: where x can be 1,2 or 3 to select the CAN peripheral.
  * @note   CAN3 peripheral is available only for STM32F413_423xx devices
  * @retval None.
  */
void CAN_DeInit(CAN_TypeDef* CANx)
{
200007f4:	b580      	push	{r7, lr}
200007f6:	b082      	sub	sp, #8
200007f8:	af00      	add	r7, sp, #0
200007fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
 
  if (CANx == CAN1)
200007fc:	687b      	ldr	r3, [r7, #4]
200007fe:	4a10      	ldr	r2, [pc, #64]	; (20000840 <CAN_DeInit+0x4c>)
20000800:	4293      	cmp	r3, r2
20000802:	d10c      	bne.n	2000081e <CAN_DeInit+0x2a>
  {
    /* Enable CAN1 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_CAN1, ENABLE);
20000804:	2380      	movs	r3, #128	; 0x80
20000806:	049b      	lsls	r3, r3, #18
20000808:	2101      	movs	r1, #1
2000080a:	0018      	movs	r0, r3
2000080c:	f001 fe00 	bl	20002410 <RCC_APB1PeriphResetCmd>
    /* Release CAN1 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_CAN1, DISABLE);
20000810:	2380      	movs	r3, #128	; 0x80
20000812:	049b      	lsls	r3, r3, #18
20000814:	2100      	movs	r1, #0
20000816:	0018      	movs	r0, r3
20000818:	f001 fdfa 	bl	20002410 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_CAN2, ENABLE);
    /* Release CAN2 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_CAN2, DISABLE);
  }
#endif /* STM32F413_423xx */
}
2000081c:	e00b      	b.n	20000836 <CAN_DeInit+0x42>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_CAN2, ENABLE);
2000081e:	2380      	movs	r3, #128	; 0x80
20000820:	04db      	lsls	r3, r3, #19
20000822:	2101      	movs	r1, #1
20000824:	0018      	movs	r0, r3
20000826:	f001 fdf3 	bl	20002410 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_CAN2, DISABLE);
2000082a:	2380      	movs	r3, #128	; 0x80
2000082c:	04db      	lsls	r3, r3, #19
2000082e:	2100      	movs	r1, #0
20000830:	0018      	movs	r0, r3
20000832:	f001 fded 	bl	20002410 <RCC_APB1PeriphResetCmd>
}
20000836:	46c0      	nop			; (mov r8, r8)
20000838:	46bd      	mov	sp, r7
2000083a:	b002      	add	sp, #8
2000083c:	bd80      	pop	{r7, pc}
2000083e:	46c0      	nop			; (mov r8, r8)
20000840:	40006400 	andmi	r6, r0, r0, lsl #8

20000844 <CAN_Init>:
  * @note   CAN3 peripheral is available only for STM32F413_423xx devices
  * @retval Constant indicates initialization succeed which will be 
  *         CAN_InitStatus_Failed or CAN_InitStatus_Success.
  */
uint8_t CAN_Init(CAN_TypeDef* CANx, CAN_InitTypeDef* CAN_InitStruct)
{
20000844:	b580      	push	{r7, lr}
20000846:	b084      	sub	sp, #16
20000848:	af00      	add	r7, sp, #0
2000084a:	6078      	str	r0, [r7, #4]
2000084c:	6039      	str	r1, [r7, #0]
  uint8_t InitStatus = CAN_InitStatus_Failed;
2000084e:	230f      	movs	r3, #15
20000850:	18fb      	adds	r3, r7, r3
20000852:	2200      	movs	r2, #0
20000854:	701a      	strb	r2, [r3, #0]
  uint32_t wait_ack = 0x00000000;
20000856:	2300      	movs	r3, #0
20000858:	60bb      	str	r3, [r7, #8]
  assert_param(IS_CAN_BS1(CAN_InitStruct->CAN_BS1));
  assert_param(IS_CAN_BS2(CAN_InitStruct->CAN_BS2));
  assert_param(IS_CAN_PRESCALER(CAN_InitStruct->CAN_Prescaler));

  /* Exit from sleep mode */
  CANx->MCR &= (~(uint32_t)CAN_MCR_SLEEP);
2000085a:	687b      	ldr	r3, [r7, #4]
2000085c:	681b      	ldr	r3, [r3, #0]
2000085e:	2202      	movs	r2, #2
20000860:	4393      	bics	r3, r2
20000862:	001a      	movs	r2, r3
20000864:	687b      	ldr	r3, [r7, #4]
20000866:	601a      	str	r2, [r3, #0]

  /* Request initialisation */
  CANx->MCR |= CAN_MCR_INRQ ;
20000868:	687b      	ldr	r3, [r7, #4]
2000086a:	681b      	ldr	r3, [r3, #0]
2000086c:	2201      	movs	r2, #1
2000086e:	431a      	orrs	r2, r3
20000870:	687b      	ldr	r3, [r7, #4]
20000872:	601a      	str	r2, [r3, #0]

  /* Wait the acknowledge */
  while (((CANx->MSR & CAN_MSR_INAK) != CAN_MSR_INAK) && (wait_ack != INAK_TIMEOUT))
20000874:	e002      	b.n	2000087c <CAN_Init+0x38>
  {
    wait_ack++;
20000876:	68bb      	ldr	r3, [r7, #8]
20000878:	3301      	adds	r3, #1
2000087a:	60bb      	str	r3, [r7, #8]
  while (((CANx->MSR & CAN_MSR_INAK) != CAN_MSR_INAK) && (wait_ack != INAK_TIMEOUT))
2000087c:	687b      	ldr	r3, [r7, #4]
2000087e:	685b      	ldr	r3, [r3, #4]
20000880:	2201      	movs	r2, #1
20000882:	4013      	ands	r3, r2
20000884:	2b01      	cmp	r3, #1
20000886:	d003      	beq.n	20000890 <CAN_Init+0x4c>
20000888:	68bb      	ldr	r3, [r7, #8]
2000088a:	4a5e      	ldr	r2, [pc, #376]	; (20000a04 <CAN_Init+0x1c0>)
2000088c:	4293      	cmp	r3, r2
2000088e:	d1f2      	bne.n	20000876 <CAN_Init+0x32>
  }

  /* Check acknowledge */
  if ((CANx->MSR & CAN_MSR_INAK) != CAN_MSR_INAK)
20000890:	687b      	ldr	r3, [r7, #4]
20000892:	685b      	ldr	r3, [r3, #4]
20000894:	2201      	movs	r2, #1
20000896:	4013      	ands	r3, r2
20000898:	2b01      	cmp	r3, #1
2000089a:	d004      	beq.n	200008a6 <CAN_Init+0x62>
  {
    InitStatus = CAN_InitStatus_Failed;
2000089c:	230f      	movs	r3, #15
2000089e:	18fb      	adds	r3, r7, r3
200008a0:	2200      	movs	r2, #0
200008a2:	701a      	strb	r2, [r3, #0]
200008a4:	e0a6      	b.n	200009f4 <CAN_Init+0x1b0>
  }
  else 
  {
    /* Set the time triggered communication mode */
    if (CAN_InitStruct->CAN_TTCM == ENABLE)
200008a6:	683b      	ldr	r3, [r7, #0]
200008a8:	799b      	ldrb	r3, [r3, #6]
200008aa:	2b01      	cmp	r3, #1
200008ac:	d106      	bne.n	200008bc <CAN_Init+0x78>
    {
      CANx->MCR |= CAN_MCR_TTCM;
200008ae:	687b      	ldr	r3, [r7, #4]
200008b0:	681b      	ldr	r3, [r3, #0]
200008b2:	2280      	movs	r2, #128	; 0x80
200008b4:	431a      	orrs	r2, r3
200008b6:	687b      	ldr	r3, [r7, #4]
200008b8:	601a      	str	r2, [r3, #0]
200008ba:	e006      	b.n	200008ca <CAN_Init+0x86>
    }
    else
    {
      CANx->MCR &= ~(uint32_t)CAN_MCR_TTCM;
200008bc:	687b      	ldr	r3, [r7, #4]
200008be:	681b      	ldr	r3, [r3, #0]
200008c0:	2280      	movs	r2, #128	; 0x80
200008c2:	4393      	bics	r3, r2
200008c4:	001a      	movs	r2, r3
200008c6:	687b      	ldr	r3, [r7, #4]
200008c8:	601a      	str	r2, [r3, #0]
    }

    /* Set the automatic bus-off management */
    if (CAN_InitStruct->CAN_ABOM == ENABLE)
200008ca:	683b      	ldr	r3, [r7, #0]
200008cc:	79db      	ldrb	r3, [r3, #7]
200008ce:	2b01      	cmp	r3, #1
200008d0:	d106      	bne.n	200008e0 <CAN_Init+0x9c>
    {
      CANx->MCR |= CAN_MCR_ABOM;
200008d2:	687b      	ldr	r3, [r7, #4]
200008d4:	681b      	ldr	r3, [r3, #0]
200008d6:	2240      	movs	r2, #64	; 0x40
200008d8:	431a      	orrs	r2, r3
200008da:	687b      	ldr	r3, [r7, #4]
200008dc:	601a      	str	r2, [r3, #0]
200008de:	e006      	b.n	200008ee <CAN_Init+0xaa>
    }
    else
    {
      CANx->MCR &= ~(uint32_t)CAN_MCR_ABOM;
200008e0:	687b      	ldr	r3, [r7, #4]
200008e2:	681b      	ldr	r3, [r3, #0]
200008e4:	2240      	movs	r2, #64	; 0x40
200008e6:	4393      	bics	r3, r2
200008e8:	001a      	movs	r2, r3
200008ea:	687b      	ldr	r3, [r7, #4]
200008ec:	601a      	str	r2, [r3, #0]
    }

    /* Set the automatic wake-up mode */
    if (CAN_InitStruct->CAN_AWUM == ENABLE)
200008ee:	683b      	ldr	r3, [r7, #0]
200008f0:	7a1b      	ldrb	r3, [r3, #8]
200008f2:	2b01      	cmp	r3, #1
200008f4:	d106      	bne.n	20000904 <CAN_Init+0xc0>
    {
      CANx->MCR |= CAN_MCR_AWUM;
200008f6:	687b      	ldr	r3, [r7, #4]
200008f8:	681b      	ldr	r3, [r3, #0]
200008fa:	2220      	movs	r2, #32
200008fc:	431a      	orrs	r2, r3
200008fe:	687b      	ldr	r3, [r7, #4]
20000900:	601a      	str	r2, [r3, #0]
20000902:	e006      	b.n	20000912 <CAN_Init+0xce>
    }
    else
    {
      CANx->MCR &= ~(uint32_t)CAN_MCR_AWUM;
20000904:	687b      	ldr	r3, [r7, #4]
20000906:	681b      	ldr	r3, [r3, #0]
20000908:	2220      	movs	r2, #32
2000090a:	4393      	bics	r3, r2
2000090c:	001a      	movs	r2, r3
2000090e:	687b      	ldr	r3, [r7, #4]
20000910:	601a      	str	r2, [r3, #0]
    }

    /* Set the no automatic retransmission */
    if (CAN_InitStruct->CAN_NART == ENABLE)
20000912:	683b      	ldr	r3, [r7, #0]
20000914:	7a5b      	ldrb	r3, [r3, #9]
20000916:	2b01      	cmp	r3, #1
20000918:	d106      	bne.n	20000928 <CAN_Init+0xe4>
    {
      CANx->MCR |= CAN_MCR_NART;
2000091a:	687b      	ldr	r3, [r7, #4]
2000091c:	681b      	ldr	r3, [r3, #0]
2000091e:	2210      	movs	r2, #16
20000920:	431a      	orrs	r2, r3
20000922:	687b      	ldr	r3, [r7, #4]
20000924:	601a      	str	r2, [r3, #0]
20000926:	e006      	b.n	20000936 <CAN_Init+0xf2>
    }
    else
    {
      CANx->MCR &= ~(uint32_t)CAN_MCR_NART;
20000928:	687b      	ldr	r3, [r7, #4]
2000092a:	681b      	ldr	r3, [r3, #0]
2000092c:	2210      	movs	r2, #16
2000092e:	4393      	bics	r3, r2
20000930:	001a      	movs	r2, r3
20000932:	687b      	ldr	r3, [r7, #4]
20000934:	601a      	str	r2, [r3, #0]
    }

    /* Set the receive FIFO locked mode */
    if (CAN_InitStruct->CAN_RFLM == ENABLE)
20000936:	683b      	ldr	r3, [r7, #0]
20000938:	7a9b      	ldrb	r3, [r3, #10]
2000093a:	2b01      	cmp	r3, #1
2000093c:	d106      	bne.n	2000094c <CAN_Init+0x108>
    {
      CANx->MCR |= CAN_MCR_RFLM;
2000093e:	687b      	ldr	r3, [r7, #4]
20000940:	681b      	ldr	r3, [r3, #0]
20000942:	2208      	movs	r2, #8
20000944:	431a      	orrs	r2, r3
20000946:	687b      	ldr	r3, [r7, #4]
20000948:	601a      	str	r2, [r3, #0]
2000094a:	e006      	b.n	2000095a <CAN_Init+0x116>
    }
    else
    {
      CANx->MCR &= ~(uint32_t)CAN_MCR_RFLM;
2000094c:	687b      	ldr	r3, [r7, #4]
2000094e:	681b      	ldr	r3, [r3, #0]
20000950:	2208      	movs	r2, #8
20000952:	4393      	bics	r3, r2
20000954:	001a      	movs	r2, r3
20000956:	687b      	ldr	r3, [r7, #4]
20000958:	601a      	str	r2, [r3, #0]
    }

    /* Set the transmit FIFO priority */
    if (CAN_InitStruct->CAN_TXFP == ENABLE)
2000095a:	683b      	ldr	r3, [r7, #0]
2000095c:	7adb      	ldrb	r3, [r3, #11]
2000095e:	2b01      	cmp	r3, #1
20000960:	d106      	bne.n	20000970 <CAN_Init+0x12c>
    {
      CANx->MCR |= CAN_MCR_TXFP;
20000962:	687b      	ldr	r3, [r7, #4]
20000964:	681b      	ldr	r3, [r3, #0]
20000966:	2204      	movs	r2, #4
20000968:	431a      	orrs	r2, r3
2000096a:	687b      	ldr	r3, [r7, #4]
2000096c:	601a      	str	r2, [r3, #0]
2000096e:	e006      	b.n	2000097e <CAN_Init+0x13a>
    }
    else
    {
      CANx->MCR &= ~(uint32_t)CAN_MCR_TXFP;
20000970:	687b      	ldr	r3, [r7, #4]
20000972:	681b      	ldr	r3, [r3, #0]
20000974:	2204      	movs	r2, #4
20000976:	4393      	bics	r3, r2
20000978:	001a      	movs	r2, r3
2000097a:	687b      	ldr	r3, [r7, #4]
2000097c:	601a      	str	r2, [r3, #0]
    }

    /* Set the bit timing register */
    CANx->BTR = (uint32_t)((uint32_t)CAN_InitStruct->CAN_Mode << 30) | \
2000097e:	683b      	ldr	r3, [r7, #0]
20000980:	789b      	ldrb	r3, [r3, #2]
20000982:	079a      	lsls	r2, r3, #30
                ((uint32_t)CAN_InitStruct->CAN_SJW << 24) | \
20000984:	683b      	ldr	r3, [r7, #0]
20000986:	78db      	ldrb	r3, [r3, #3]
20000988:	061b      	lsls	r3, r3, #24
    CANx->BTR = (uint32_t)((uint32_t)CAN_InitStruct->CAN_Mode << 30) | \
2000098a:	431a      	orrs	r2, r3
                ((uint32_t)CAN_InitStruct->CAN_BS1 << 16) | \
2000098c:	683b      	ldr	r3, [r7, #0]
2000098e:	791b      	ldrb	r3, [r3, #4]
20000990:	041b      	lsls	r3, r3, #16
                ((uint32_t)CAN_InitStruct->CAN_SJW << 24) | \
20000992:	431a      	orrs	r2, r3
                ((uint32_t)CAN_InitStruct->CAN_BS2 << 20) | \
20000994:	683b      	ldr	r3, [r7, #0]
20000996:	795b      	ldrb	r3, [r3, #5]
20000998:	051b      	lsls	r3, r3, #20
                ((uint32_t)CAN_InitStruct->CAN_BS1 << 16) | \
2000099a:	431a      	orrs	r2, r3
               ((uint32_t)CAN_InitStruct->CAN_Prescaler - 1);
2000099c:	683b      	ldr	r3, [r7, #0]
2000099e:	881b      	ldrh	r3, [r3, #0]
200009a0:	3b01      	subs	r3, #1
                ((uint32_t)CAN_InitStruct->CAN_BS2 << 20) | \
200009a2:	431a      	orrs	r2, r3
    CANx->BTR = (uint32_t)((uint32_t)CAN_InitStruct->CAN_Mode << 30) | \
200009a4:	687b      	ldr	r3, [r7, #4]
200009a6:	61da      	str	r2, [r3, #28]

    /* Request leave initialisation */
    CANx->MCR &= ~(uint32_t)CAN_MCR_INRQ;
200009a8:	687b      	ldr	r3, [r7, #4]
200009aa:	681b      	ldr	r3, [r3, #0]
200009ac:	2201      	movs	r2, #1
200009ae:	4393      	bics	r3, r2
200009b0:	001a      	movs	r2, r3
200009b2:	687b      	ldr	r3, [r7, #4]
200009b4:	601a      	str	r2, [r3, #0]

   /* Wait the acknowledge */
   wait_ack = 0;
200009b6:	2300      	movs	r3, #0
200009b8:	60bb      	str	r3, [r7, #8]

   while (((CANx->MSR & CAN_MSR_INAK) == CAN_MSR_INAK) && (wait_ack != INAK_TIMEOUT))
200009ba:	e002      	b.n	200009c2 <CAN_Init+0x17e>
   {
     wait_ack++;
200009bc:	68bb      	ldr	r3, [r7, #8]
200009be:	3301      	adds	r3, #1
200009c0:	60bb      	str	r3, [r7, #8]
   while (((CANx->MSR & CAN_MSR_INAK) == CAN_MSR_INAK) && (wait_ack != INAK_TIMEOUT))
200009c2:	687b      	ldr	r3, [r7, #4]
200009c4:	685b      	ldr	r3, [r3, #4]
200009c6:	2201      	movs	r2, #1
200009c8:	4013      	ands	r3, r2
200009ca:	2b01      	cmp	r3, #1
200009cc:	d103      	bne.n	200009d6 <CAN_Init+0x192>
200009ce:	68bb      	ldr	r3, [r7, #8]
200009d0:	4a0c      	ldr	r2, [pc, #48]	; (20000a04 <CAN_Init+0x1c0>)
200009d2:	4293      	cmp	r3, r2
200009d4:	d1f2      	bne.n	200009bc <CAN_Init+0x178>
   }

    /* ...and check acknowledged */
    if ((CANx->MSR & CAN_MSR_INAK) == CAN_MSR_INAK)
200009d6:	687b      	ldr	r3, [r7, #4]
200009d8:	685b      	ldr	r3, [r3, #4]
200009da:	2201      	movs	r2, #1
200009dc:	4013      	ands	r3, r2
200009de:	2b01      	cmp	r3, #1
200009e0:	d104      	bne.n	200009ec <CAN_Init+0x1a8>
    {
      InitStatus = CAN_InitStatus_Failed;
200009e2:	230f      	movs	r3, #15
200009e4:	18fb      	adds	r3, r7, r3
200009e6:	2200      	movs	r2, #0
200009e8:	701a      	strb	r2, [r3, #0]
200009ea:	e003      	b.n	200009f4 <CAN_Init+0x1b0>
    }
    else
    {
      InitStatus = CAN_InitStatus_Success ;
200009ec:	230f      	movs	r3, #15
200009ee:	18fb      	adds	r3, r7, r3
200009f0:	2201      	movs	r2, #1
200009f2:	701a      	strb	r2, [r3, #0]
    }
  }

  /* At this step, return the status of initialization */
  return InitStatus;
200009f4:	230f      	movs	r3, #15
200009f6:	18fb      	adds	r3, r7, r3
200009f8:	781b      	ldrb	r3, [r3, #0]
}
200009fa:	0018      	movs	r0, r3
200009fc:	46bd      	mov	sp, r7
200009fe:	b004      	add	sp, #16
20000a00:	bd80      	pop	{r7, pc}
20000a02:	46c0      	nop			; (mov r8, r8)
20000a04:	0000ffff 	strdeq	pc, [r0], -pc	; <UNPREDICTABLE>

20000a08 <CAN_FilterInit>:
  * @param  CAN_FilterInitStruct: pointer to a CAN_FilterInitTypeDef structure that
  *         contains the configuration information.
  * @retval None
  */
void CAN_FilterInit(CAN_FilterInitTypeDef* CAN_FilterInitStruct)
{
20000a08:	b590      	push	{r4, r7, lr}
20000a0a:	b085      	sub	sp, #20
20000a0c:	af00      	add	r7, sp, #0
20000a0e:	6078      	str	r0, [r7, #4]
  uint32_t filter_number_bit_pos = 0;
20000a10:	2300      	movs	r3, #0
20000a12:	60fb      	str	r3, [r7, #12]
  assert_param(IS_CAN_FILTER_MODE(CAN_FilterInitStruct->CAN_FilterMode));
  assert_param(IS_CAN_FILTER_SCALE(CAN_FilterInitStruct->CAN_FilterScale));
  assert_param(IS_CAN_FILTER_FIFO(CAN_FilterInitStruct->CAN_FilterFIFOAssignment));
  assert_param(IS_FUNCTIONAL_STATE(CAN_FilterInitStruct->CAN_FilterActivation));

  filter_number_bit_pos = ((uint32_t)1) << CAN_FilterInitStruct->CAN_FilterNumber;
20000a14:	687b      	ldr	r3, [r7, #4]
20000a16:	7a9b      	ldrb	r3, [r3, #10]
20000a18:	001a      	movs	r2, r3
20000a1a:	2301      	movs	r3, #1
20000a1c:	4093      	lsls	r3, r2
20000a1e:	60fb      	str	r3, [r7, #12]

  /* Initialisation mode for the filter */
  CAN1->FMR |= FMR_FINIT;
20000a20:	4a64      	ldr	r2, [pc, #400]	; (20000bb4 <CAN_FilterInit+0x1ac>)
20000a22:	2380      	movs	r3, #128	; 0x80
20000a24:	009b      	lsls	r3, r3, #2
20000a26:	58d3      	ldr	r3, [r2, r3]
20000a28:	4962      	ldr	r1, [pc, #392]	; (20000bb4 <CAN_FilterInit+0x1ac>)
20000a2a:	2201      	movs	r2, #1
20000a2c:	431a      	orrs	r2, r3
20000a2e:	2380      	movs	r3, #128	; 0x80
20000a30:	009b      	lsls	r3, r3, #2
20000a32:	50ca      	str	r2, [r1, r3]

  /* Filter Deactivation */
  CAN1->FA1R &= ~(uint32_t)filter_number_bit_pos;
20000a34:	4a5f      	ldr	r2, [pc, #380]	; (20000bb4 <CAN_FilterInit+0x1ac>)
20000a36:	2387      	movs	r3, #135	; 0x87
20000a38:	009b      	lsls	r3, r3, #2
20000a3a:	58d3      	ldr	r3, [r2, r3]
20000a3c:	68fa      	ldr	r2, [r7, #12]
20000a3e:	43d2      	mvns	r2, r2
20000a40:	495c      	ldr	r1, [pc, #368]	; (20000bb4 <CAN_FilterInit+0x1ac>)
20000a42:	401a      	ands	r2, r3
20000a44:	2387      	movs	r3, #135	; 0x87
20000a46:	009b      	lsls	r3, r3, #2
20000a48:	50ca      	str	r2, [r1, r3]

  /* Filter Scale */
  if (CAN_FilterInitStruct->CAN_FilterScale == CAN_FilterScale_16bit)
20000a4a:	687b      	ldr	r3, [r7, #4]
20000a4c:	7b1b      	ldrb	r3, [r3, #12]
20000a4e:	2b00      	cmp	r3, #0
20000a50:	d12c      	bne.n	20000aac <CAN_FilterInit+0xa4>
  {
    /* 16-bit scale for the filter */
    CAN1->FS1R &= ~(uint32_t)filter_number_bit_pos;
20000a52:	4a58      	ldr	r2, [pc, #352]	; (20000bb4 <CAN_FilterInit+0x1ac>)
20000a54:	2383      	movs	r3, #131	; 0x83
20000a56:	009b      	lsls	r3, r3, #2
20000a58:	58d3      	ldr	r3, [r2, r3]
20000a5a:	68fa      	ldr	r2, [r7, #12]
20000a5c:	43d2      	mvns	r2, r2
20000a5e:	4955      	ldr	r1, [pc, #340]	; (20000bb4 <CAN_FilterInit+0x1ac>)
20000a60:	401a      	ands	r2, r3
20000a62:	2383      	movs	r3, #131	; 0x83
20000a64:	009b      	lsls	r3, r3, #2
20000a66:	50ca      	str	r2, [r1, r3]

    /* First 16-bit identifier and First 16-bit mask */
    /* Or First 16-bit identifier and Second 16-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdLow) << 16) |
20000a68:	687b      	ldr	r3, [r7, #4]
20000a6a:	88db      	ldrh	r3, [r3, #6]
20000a6c:	041b      	lsls	r3, r3, #16
        (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdLow);
20000a6e:	687a      	ldr	r2, [r7, #4]
20000a70:	8852      	ldrh	r2, [r2, #2]
20000a72:	0014      	movs	r4, r2
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
20000a74:	494f      	ldr	r1, [pc, #316]	; (20000bb4 <CAN_FilterInit+0x1ac>)
20000a76:	687a      	ldr	r2, [r7, #4]
20000a78:	7a92      	ldrb	r2, [r2, #10]
20000a7a:	0010      	movs	r0, r2
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdLow) << 16) |
20000a7c:	4323      	orrs	r3, r4
20000a7e:	001a      	movs	r2, r3
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
20000a80:	0003      	movs	r3, r0
20000a82:	3348      	adds	r3, #72	; 0x48
20000a84:	00db      	lsls	r3, r3, #3
20000a86:	505a      	str	r2, [r3, r1]

    /* Second 16-bit identifier and Second 16-bit mask */
    /* Or Third 16-bit identifier and Fourth 16-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR2 = 
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdHigh) << 16) |
20000a88:	687b      	ldr	r3, [r7, #4]
20000a8a:	889b      	ldrh	r3, [r3, #4]
20000a8c:	041b      	lsls	r3, r3, #16
        (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdHigh);
20000a8e:	687a      	ldr	r2, [r7, #4]
20000a90:	8812      	ldrh	r2, [r2, #0]
20000a92:	0014      	movs	r4, r2
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR2 = 
20000a94:	4947      	ldr	r1, [pc, #284]	; (20000bb4 <CAN_FilterInit+0x1ac>)
20000a96:	687a      	ldr	r2, [r7, #4]
20000a98:	7a92      	ldrb	r2, [r2, #10]
20000a9a:	0010      	movs	r0, r2
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdHigh) << 16) |
20000a9c:	4323      	orrs	r3, r4
20000a9e:	001a      	movs	r2, r3
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR2 = 
20000aa0:	0003      	movs	r3, r0
20000aa2:	3348      	adds	r3, #72	; 0x48
20000aa4:	00db      	lsls	r3, r3, #3
20000aa6:	18cb      	adds	r3, r1, r3
20000aa8:	3304      	adds	r3, #4
20000aaa:	601a      	str	r2, [r3, #0]
  }

  if (CAN_FilterInitStruct->CAN_FilterScale == CAN_FilterScale_32bit)
20000aac:	687b      	ldr	r3, [r7, #4]
20000aae:	7b1b      	ldrb	r3, [r3, #12]
20000ab0:	2b01      	cmp	r3, #1
20000ab2:	d12b      	bne.n	20000b0c <CAN_FilterInit+0x104>
  {
    /* 32-bit scale for the filter */
    CAN1->FS1R |= filter_number_bit_pos;
20000ab4:	4a3f      	ldr	r2, [pc, #252]	; (20000bb4 <CAN_FilterInit+0x1ac>)
20000ab6:	2383      	movs	r3, #131	; 0x83
20000ab8:	009b      	lsls	r3, r3, #2
20000aba:	58d2      	ldr	r2, [r2, r3]
20000abc:	493d      	ldr	r1, [pc, #244]	; (20000bb4 <CAN_FilterInit+0x1ac>)
20000abe:	68fb      	ldr	r3, [r7, #12]
20000ac0:	431a      	orrs	r2, r3
20000ac2:	2383      	movs	r3, #131	; 0x83
20000ac4:	009b      	lsls	r3, r3, #2
20000ac6:	50ca      	str	r2, [r1, r3]
    /* 32-bit identifier or First 32-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdHigh) << 16) |
20000ac8:	687b      	ldr	r3, [r7, #4]
20000aca:	881b      	ldrh	r3, [r3, #0]
20000acc:	041b      	lsls	r3, r3, #16
        (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdLow);
20000ace:	687a      	ldr	r2, [r7, #4]
20000ad0:	8852      	ldrh	r2, [r2, #2]
20000ad2:	0014      	movs	r4, r2
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
20000ad4:	4937      	ldr	r1, [pc, #220]	; (20000bb4 <CAN_FilterInit+0x1ac>)
20000ad6:	687a      	ldr	r2, [r7, #4]
20000ad8:	7a92      	ldrb	r2, [r2, #10]
20000ada:	0010      	movs	r0, r2
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdHigh) << 16) |
20000adc:	4323      	orrs	r3, r4
20000ade:	001a      	movs	r2, r3
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
20000ae0:	0003      	movs	r3, r0
20000ae2:	3348      	adds	r3, #72	; 0x48
20000ae4:	00db      	lsls	r3, r3, #3
20000ae6:	505a      	str	r2, [r3, r1]
    /* 32-bit mask or Second 32-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR2 = 
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdHigh) << 16) |
20000ae8:	687b      	ldr	r3, [r7, #4]
20000aea:	889b      	ldrh	r3, [r3, #4]
20000aec:	041b      	lsls	r3, r3, #16
        (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdLow);
20000aee:	687a      	ldr	r2, [r7, #4]
20000af0:	88d2      	ldrh	r2, [r2, #6]
20000af2:	0014      	movs	r4, r2
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR2 = 
20000af4:	492f      	ldr	r1, [pc, #188]	; (20000bb4 <CAN_FilterInit+0x1ac>)
20000af6:	687a      	ldr	r2, [r7, #4]
20000af8:	7a92      	ldrb	r2, [r2, #10]
20000afa:	0010      	movs	r0, r2
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdHigh) << 16) |
20000afc:	4323      	orrs	r3, r4
20000afe:	001a      	movs	r2, r3
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR2 = 
20000b00:	0003      	movs	r3, r0
20000b02:	3348      	adds	r3, #72	; 0x48
20000b04:	00db      	lsls	r3, r3, #3
20000b06:	18cb      	adds	r3, r1, r3
20000b08:	3304      	adds	r3, #4
20000b0a:	601a      	str	r2, [r3, #0]
  }

  /* Filter Mode */
  if (CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdMask)
20000b0c:	687b      	ldr	r3, [r7, #4]
20000b0e:	7adb      	ldrb	r3, [r3, #11]
20000b10:	2b00      	cmp	r3, #0
20000b12:	d10b      	bne.n	20000b2c <CAN_FilterInit+0x124>
  {
    /*Id/Mask mode for the filter*/
    CAN1->FM1R &= ~(uint32_t)filter_number_bit_pos;
20000b14:	4a27      	ldr	r2, [pc, #156]	; (20000bb4 <CAN_FilterInit+0x1ac>)
20000b16:	2381      	movs	r3, #129	; 0x81
20000b18:	009b      	lsls	r3, r3, #2
20000b1a:	58d3      	ldr	r3, [r2, r3]
20000b1c:	68fa      	ldr	r2, [r7, #12]
20000b1e:	43d2      	mvns	r2, r2
20000b20:	4924      	ldr	r1, [pc, #144]	; (20000bb4 <CAN_FilterInit+0x1ac>)
20000b22:	401a      	ands	r2, r3
20000b24:	2381      	movs	r3, #129	; 0x81
20000b26:	009b      	lsls	r3, r3, #2
20000b28:	50ca      	str	r2, [r1, r3]
20000b2a:	e009      	b.n	20000b40 <CAN_FilterInit+0x138>
  }
  else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
  {
    /*Identifier list mode for the filter*/
    CAN1->FM1R |= (uint32_t)filter_number_bit_pos;
20000b2c:	4a21      	ldr	r2, [pc, #132]	; (20000bb4 <CAN_FilterInit+0x1ac>)
20000b2e:	2381      	movs	r3, #129	; 0x81
20000b30:	009b      	lsls	r3, r3, #2
20000b32:	58d2      	ldr	r2, [r2, r3]
20000b34:	491f      	ldr	r1, [pc, #124]	; (20000bb4 <CAN_FilterInit+0x1ac>)
20000b36:	68fb      	ldr	r3, [r7, #12]
20000b38:	431a      	orrs	r2, r3
20000b3a:	2381      	movs	r3, #129	; 0x81
20000b3c:	009b      	lsls	r3, r3, #2
20000b3e:	50ca      	str	r2, [r1, r3]
  }

  /* Filter FIFO assignment */
  if (CAN_FilterInitStruct->CAN_FilterFIFOAssignment == CAN_Filter_FIFO0)
20000b40:	687b      	ldr	r3, [r7, #4]
20000b42:	891b      	ldrh	r3, [r3, #8]
20000b44:	2b00      	cmp	r3, #0
20000b46:	d10a      	bne.n	20000b5e <CAN_FilterInit+0x156>
  {
    /* FIFO 0 assignation for the filter */
    CAN1->FFA1R &= ~(uint32_t)filter_number_bit_pos;
20000b48:	4a1a      	ldr	r2, [pc, #104]	; (20000bb4 <CAN_FilterInit+0x1ac>)
20000b4a:	2385      	movs	r3, #133	; 0x85
20000b4c:	009b      	lsls	r3, r3, #2
20000b4e:	58d3      	ldr	r3, [r2, r3]
20000b50:	68fa      	ldr	r2, [r7, #12]
20000b52:	43d2      	mvns	r2, r2
20000b54:	4917      	ldr	r1, [pc, #92]	; (20000bb4 <CAN_FilterInit+0x1ac>)
20000b56:	401a      	ands	r2, r3
20000b58:	2385      	movs	r3, #133	; 0x85
20000b5a:	009b      	lsls	r3, r3, #2
20000b5c:	50ca      	str	r2, [r1, r3]
  }

  if (CAN_FilterInitStruct->CAN_FilterFIFOAssignment == CAN_Filter_FIFO1)
20000b5e:	687b      	ldr	r3, [r7, #4]
20000b60:	891b      	ldrh	r3, [r3, #8]
20000b62:	2b01      	cmp	r3, #1
20000b64:	d109      	bne.n	20000b7a <CAN_FilterInit+0x172>
  {
    /* FIFO 1 assignation for the filter */
    CAN1->FFA1R |= (uint32_t)filter_number_bit_pos;
20000b66:	4a13      	ldr	r2, [pc, #76]	; (20000bb4 <CAN_FilterInit+0x1ac>)
20000b68:	2385      	movs	r3, #133	; 0x85
20000b6a:	009b      	lsls	r3, r3, #2
20000b6c:	58d2      	ldr	r2, [r2, r3]
20000b6e:	4911      	ldr	r1, [pc, #68]	; (20000bb4 <CAN_FilterInit+0x1ac>)
20000b70:	68fb      	ldr	r3, [r7, #12]
20000b72:	431a      	orrs	r2, r3
20000b74:	2385      	movs	r3, #133	; 0x85
20000b76:	009b      	lsls	r3, r3, #2
20000b78:	50ca      	str	r2, [r1, r3]
  }
  
  /* Filter activation */
  if (CAN_FilterInitStruct->CAN_FilterActivation == ENABLE)
20000b7a:	687b      	ldr	r3, [r7, #4]
20000b7c:	7b5b      	ldrb	r3, [r3, #13]
20000b7e:	2b01      	cmp	r3, #1
20000b80:	d109      	bne.n	20000b96 <CAN_FilterInit+0x18e>
  {
    CAN1->FA1R |= filter_number_bit_pos;
20000b82:	4a0c      	ldr	r2, [pc, #48]	; (20000bb4 <CAN_FilterInit+0x1ac>)
20000b84:	2387      	movs	r3, #135	; 0x87
20000b86:	009b      	lsls	r3, r3, #2
20000b88:	58d2      	ldr	r2, [r2, r3]
20000b8a:	490a      	ldr	r1, [pc, #40]	; (20000bb4 <CAN_FilterInit+0x1ac>)
20000b8c:	68fb      	ldr	r3, [r7, #12]
20000b8e:	431a      	orrs	r2, r3
20000b90:	2387      	movs	r3, #135	; 0x87
20000b92:	009b      	lsls	r3, r3, #2
20000b94:	50ca      	str	r2, [r1, r3]
  }

  /* Leave the initialisation mode for the filter */
  CAN1->FMR &= ~FMR_FINIT;
20000b96:	4a07      	ldr	r2, [pc, #28]	; (20000bb4 <CAN_FilterInit+0x1ac>)
20000b98:	2380      	movs	r3, #128	; 0x80
20000b9a:	009b      	lsls	r3, r3, #2
20000b9c:	58d3      	ldr	r3, [r2, r3]
20000b9e:	4905      	ldr	r1, [pc, #20]	; (20000bb4 <CAN_FilterInit+0x1ac>)
20000ba0:	2201      	movs	r2, #1
20000ba2:	4393      	bics	r3, r2
20000ba4:	001a      	movs	r2, r3
20000ba6:	2380      	movs	r3, #128	; 0x80
20000ba8:	009b      	lsls	r3, r3, #2
20000baa:	50ca      	str	r2, [r1, r3]
}
20000bac:	46c0      	nop			; (mov r8, r8)
20000bae:	46bd      	mov	sp, r7
20000bb0:	b005      	add	sp, #20
20000bb2:	bd90      	pop	{r4, r7, pc}
20000bb4:	40006400 	andmi	r6, r0, r0, lsl #8

20000bb8 <CAN_StructInit>:
  * @brief  Fills each CAN_InitStruct member with its default value.
  * @param  CAN_InitStruct: pointer to a CAN_InitTypeDef structure which ill be initialized.
  * @retval None
  */
void CAN_StructInit(CAN_InitTypeDef* CAN_InitStruct)
{
20000bb8:	b580      	push	{r7, lr}
20000bba:	b082      	sub	sp, #8
20000bbc:	af00      	add	r7, sp, #0
20000bbe:	6078      	str	r0, [r7, #4]
  /* Reset CAN init structure parameters values */
  
  /* Initialize the time triggered communication mode */
  CAN_InitStruct->CAN_TTCM = DISABLE;
20000bc0:	687b      	ldr	r3, [r7, #4]
20000bc2:	2200      	movs	r2, #0
20000bc4:	719a      	strb	r2, [r3, #6]
  
  /* Initialize the automatic bus-off management */
  CAN_InitStruct->CAN_ABOM = DISABLE;
20000bc6:	687b      	ldr	r3, [r7, #4]
20000bc8:	2200      	movs	r2, #0
20000bca:	71da      	strb	r2, [r3, #7]
  
  /* Initialize the automatic wake-up mode */
  CAN_InitStruct->CAN_AWUM = DISABLE;
20000bcc:	687b      	ldr	r3, [r7, #4]
20000bce:	2200      	movs	r2, #0
20000bd0:	721a      	strb	r2, [r3, #8]
  
  /* Initialize the no automatic retransmission */
  CAN_InitStruct->CAN_NART = DISABLE;
20000bd2:	687b      	ldr	r3, [r7, #4]
20000bd4:	2200      	movs	r2, #0
20000bd6:	725a      	strb	r2, [r3, #9]
  
  /* Initialize the receive FIFO locked mode */
  CAN_InitStruct->CAN_RFLM = DISABLE;
20000bd8:	687b      	ldr	r3, [r7, #4]
20000bda:	2200      	movs	r2, #0
20000bdc:	729a      	strb	r2, [r3, #10]
  
  /* Initialize the transmit FIFO priority */
  CAN_InitStruct->CAN_TXFP = DISABLE;
20000bde:	687b      	ldr	r3, [r7, #4]
20000be0:	2200      	movs	r2, #0
20000be2:	72da      	strb	r2, [r3, #11]
  
  /* Initialize the CAN_Mode member */
  CAN_InitStruct->CAN_Mode = CAN_Mode_Normal;
20000be4:	687b      	ldr	r3, [r7, #4]
20000be6:	2200      	movs	r2, #0
20000be8:	709a      	strb	r2, [r3, #2]
  
  /* Initialize the CAN_SJW member */
  CAN_InitStruct->CAN_SJW = CAN_SJW_1tq;
20000bea:	687b      	ldr	r3, [r7, #4]
20000bec:	2200      	movs	r2, #0
20000bee:	70da      	strb	r2, [r3, #3]
  
  /* Initialize the CAN_BS1 member */
  CAN_InitStruct->CAN_BS1 = CAN_BS1_4tq;
20000bf0:	687b      	ldr	r3, [r7, #4]
20000bf2:	2203      	movs	r2, #3
20000bf4:	711a      	strb	r2, [r3, #4]
  
  /* Initialize the CAN_BS2 member */
  CAN_InitStruct->CAN_BS2 = CAN_BS2_3tq;
20000bf6:	687b      	ldr	r3, [r7, #4]
20000bf8:	2202      	movs	r2, #2
20000bfa:	715a      	strb	r2, [r3, #5]
  
  /* Initialize the CAN_Prescaler member */
  CAN_InitStruct->CAN_Prescaler = 1;
20000bfc:	687b      	ldr	r3, [r7, #4]
20000bfe:	2201      	movs	r2, #1
20000c00:	801a      	strh	r2, [r3, #0]
}
20000c02:	46c0      	nop			; (mov r8, r8)
20000c04:	46bd      	mov	sp, r7
20000c06:	b002      	add	sp, #8
20000c08:	bd80      	pop	{r7, pc}

20000c0a <CAN_SlaveStartBank>:
  * @brief  Select the start bank filter for slave CAN.
  * @param  CAN_BankNumber: Select the start slave bank filter from 1..27.
  * @retval None
  */
void CAN_SlaveStartBank(uint8_t CAN_BankNumber) 
{
20000c0a:	b580      	push	{r7, lr}
20000c0c:	b082      	sub	sp, #8
20000c0e:	af00      	add	r7, sp, #0
20000c10:	0002      	movs	r2, r0
20000c12:	1dfb      	adds	r3, r7, #7
20000c14:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_CAN_BANKNUMBER(CAN_BankNumber));
  
  /* Enter Initialisation mode for the filter */
  CAN1->FMR |= FMR_FINIT;
20000c16:	4a17      	ldr	r2, [pc, #92]	; (20000c74 <CAN_SlaveStartBank+0x6a>)
20000c18:	2380      	movs	r3, #128	; 0x80
20000c1a:	009b      	lsls	r3, r3, #2
20000c1c:	58d3      	ldr	r3, [r2, r3]
20000c1e:	4915      	ldr	r1, [pc, #84]	; (20000c74 <CAN_SlaveStartBank+0x6a>)
20000c20:	2201      	movs	r2, #1
20000c22:	431a      	orrs	r2, r3
20000c24:	2380      	movs	r3, #128	; 0x80
20000c26:	009b      	lsls	r3, r3, #2
20000c28:	50ca      	str	r2, [r1, r3]
  
  /* Select the start slave bank */
  CAN1->FMR &= (uint32_t)0xFFFFC0F1 ;
20000c2a:	4a12      	ldr	r2, [pc, #72]	; (20000c74 <CAN_SlaveStartBank+0x6a>)
20000c2c:	2380      	movs	r3, #128	; 0x80
20000c2e:	009b      	lsls	r3, r3, #2
20000c30:	58d3      	ldr	r3, [r2, r3]
20000c32:	4910      	ldr	r1, [pc, #64]	; (20000c74 <CAN_SlaveStartBank+0x6a>)
20000c34:	4a10      	ldr	r2, [pc, #64]	; (20000c78 <CAN_SlaveStartBank+0x6e>)
20000c36:	401a      	ands	r2, r3
20000c38:	2380      	movs	r3, #128	; 0x80
20000c3a:	009b      	lsls	r3, r3, #2
20000c3c:	50ca      	str	r2, [r1, r3]
  CAN1->FMR |= (uint32_t)(CAN_BankNumber)<<8;
20000c3e:	4a0d      	ldr	r2, [pc, #52]	; (20000c74 <CAN_SlaveStartBank+0x6a>)
20000c40:	2380      	movs	r3, #128	; 0x80
20000c42:	009b      	lsls	r3, r3, #2
20000c44:	58d2      	ldr	r2, [r2, r3]
20000c46:	1dfb      	adds	r3, r7, #7
20000c48:	781b      	ldrb	r3, [r3, #0]
20000c4a:	021b      	lsls	r3, r3, #8
20000c4c:	4909      	ldr	r1, [pc, #36]	; (20000c74 <CAN_SlaveStartBank+0x6a>)
20000c4e:	431a      	orrs	r2, r3
20000c50:	2380      	movs	r3, #128	; 0x80
20000c52:	009b      	lsls	r3, r3, #2
20000c54:	50ca      	str	r2, [r1, r3]
  
  /* Leave Initialisation mode for the filter */
  CAN1->FMR &= ~FMR_FINIT;
20000c56:	4a07      	ldr	r2, [pc, #28]	; (20000c74 <CAN_SlaveStartBank+0x6a>)
20000c58:	2380      	movs	r3, #128	; 0x80
20000c5a:	009b      	lsls	r3, r3, #2
20000c5c:	58d3      	ldr	r3, [r2, r3]
20000c5e:	4905      	ldr	r1, [pc, #20]	; (20000c74 <CAN_SlaveStartBank+0x6a>)
20000c60:	2201      	movs	r2, #1
20000c62:	4393      	bics	r3, r2
20000c64:	001a      	movs	r2, r3
20000c66:	2380      	movs	r3, #128	; 0x80
20000c68:	009b      	lsls	r3, r3, #2
20000c6a:	50ca      	str	r2, [r1, r3]
}
20000c6c:	46c0      	nop			; (mov r8, r8)
20000c6e:	46bd      	mov	sp, r7
20000c70:	b002      	add	sp, #8
20000c72:	bd80      	pop	{r7, pc}
20000c74:	40006400 	andmi	r6, r0, r0, lsl #8
20000c78:	ffffc0f1 			; <UNDEFINED> instruction: 0xffffc0f1

20000c7c <CAN_DBGFreeze>:
  *          or DISABLE (CAN is working during debug).
  * @note   CAN3 peripheral is available only for STM32F413_423xx devices
  * @retval None
  */
void CAN_DBGFreeze(CAN_TypeDef* CANx, FunctionalState NewState)
{
20000c7c:	b580      	push	{r7, lr}
20000c7e:	b082      	sub	sp, #8
20000c80:	af00      	add	r7, sp, #0
20000c82:	6078      	str	r0, [r7, #4]
20000c84:	000a      	movs	r2, r1
20000c86:	1cfb      	adds	r3, r7, #3
20000c88:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
20000c8a:	1cfb      	adds	r3, r7, #3
20000c8c:	781b      	ldrb	r3, [r3, #0]
20000c8e:	2b00      	cmp	r3, #0
20000c90:	d007      	beq.n	20000ca2 <CAN_DBGFreeze+0x26>
  {
    /* Enable Debug Freeze  */
    CANx->MCR |= MCR_DBF;
20000c92:	687b      	ldr	r3, [r7, #4]
20000c94:	681b      	ldr	r3, [r3, #0]
20000c96:	2280      	movs	r2, #128	; 0x80
20000c98:	0252      	lsls	r2, r2, #9
20000c9a:	431a      	orrs	r2, r3
20000c9c:	687b      	ldr	r3, [r7, #4]
20000c9e:	601a      	str	r2, [r3, #0]
  else
  {
    /* Disable Debug Freeze */
    CANx->MCR &= ~MCR_DBF;
  }
}
20000ca0:	e005      	b.n	20000cae <CAN_DBGFreeze+0x32>
    CANx->MCR &= ~MCR_DBF;
20000ca2:	687b      	ldr	r3, [r7, #4]
20000ca4:	681b      	ldr	r3, [r3, #0]
20000ca6:	4a04      	ldr	r2, [pc, #16]	; (20000cb8 <CAN_DBGFreeze+0x3c>)
20000ca8:	401a      	ands	r2, r3
20000caa:	687b      	ldr	r3, [r7, #4]
20000cac:	601a      	str	r2, [r3, #0]
}
20000cae:	46c0      	nop			; (mov r8, r8)
20000cb0:	46bd      	mov	sp, r7
20000cb2:	b002      	add	sp, #8
20000cb4:	bd80      	pop	{r7, pc}
20000cb6:	46c0      	nop			; (mov r8, r8)
20000cb8:	fffeffff 			; <UNDEFINED> instruction: 0xfffeffff

20000cbc <CAN_TTComModeCmd>:
  *         in data byte 7.
  * @note   CAN3 peripheral is available only for STM32F413_423xx devices
  * @retval None
  */
void CAN_TTComModeCmd(CAN_TypeDef* CANx, FunctionalState NewState)
{
20000cbc:	b580      	push	{r7, lr}
20000cbe:	b082      	sub	sp, #8
20000cc0:	af00      	add	r7, sp, #0
20000cc2:	6078      	str	r0, [r7, #4]
20000cc4:	000a      	movs	r2, r1
20000cc6:	1cfb      	adds	r3, r7, #3
20000cc8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
20000cca:	1cfb      	adds	r3, r7, #3
20000ccc:	781b      	ldrb	r3, [r3, #0]
20000cce:	2b00      	cmp	r3, #0
20000cd0:	d02a      	beq.n	20000d28 <CAN_TTComModeCmd+0x6c>
  {
    /* Enable the TTCM mode */
    CANx->MCR |= CAN_MCR_TTCM;
20000cd2:	687b      	ldr	r3, [r7, #4]
20000cd4:	681b      	ldr	r3, [r3, #0]
20000cd6:	2280      	movs	r2, #128	; 0x80
20000cd8:	431a      	orrs	r2, r3
20000cda:	687b      	ldr	r3, [r7, #4]
20000cdc:	601a      	str	r2, [r3, #0]

    /* Set TGT bits */
    CANx->sTxMailBox[0].TDTR |= ((uint32_t)CAN_TDT0R_TGT);
20000cde:	687a      	ldr	r2, [r7, #4]
20000ce0:	23c2      	movs	r3, #194	; 0xc2
20000ce2:	005b      	lsls	r3, r3, #1
20000ce4:	58d3      	ldr	r3, [r2, r3]
20000ce6:	2280      	movs	r2, #128	; 0x80
20000ce8:	0052      	lsls	r2, r2, #1
20000cea:	431a      	orrs	r2, r3
20000cec:	0011      	movs	r1, r2
20000cee:	687a      	ldr	r2, [r7, #4]
20000cf0:	23c2      	movs	r3, #194	; 0xc2
20000cf2:	005b      	lsls	r3, r3, #1
20000cf4:	50d1      	str	r1, [r2, r3]
    CANx->sTxMailBox[1].TDTR |= ((uint32_t)CAN_TDT1R_TGT);
20000cf6:	687a      	ldr	r2, [r7, #4]
20000cf8:	23ca      	movs	r3, #202	; 0xca
20000cfa:	005b      	lsls	r3, r3, #1
20000cfc:	58d3      	ldr	r3, [r2, r3]
20000cfe:	2280      	movs	r2, #128	; 0x80
20000d00:	0052      	lsls	r2, r2, #1
20000d02:	431a      	orrs	r2, r3
20000d04:	0011      	movs	r1, r2
20000d06:	687a      	ldr	r2, [r7, #4]
20000d08:	23ca      	movs	r3, #202	; 0xca
20000d0a:	005b      	lsls	r3, r3, #1
20000d0c:	50d1      	str	r1, [r2, r3]
    CANx->sTxMailBox[2].TDTR |= ((uint32_t)CAN_TDT2R_TGT);
20000d0e:	687a      	ldr	r2, [r7, #4]
20000d10:	23d2      	movs	r3, #210	; 0xd2
20000d12:	005b      	lsls	r3, r3, #1
20000d14:	58d3      	ldr	r3, [r2, r3]
20000d16:	2280      	movs	r2, #128	; 0x80
20000d18:	0052      	lsls	r2, r2, #1
20000d1a:	431a      	orrs	r2, r3
20000d1c:	0011      	movs	r1, r2
20000d1e:	687a      	ldr	r2, [r7, #4]
20000d20:	23d2      	movs	r3, #210	; 0xd2
20000d22:	005b      	lsls	r3, r3, #1
20000d24:	50d1      	str	r1, [r2, r3]
    /* Reset TGT bits */
    CANx->sTxMailBox[0].TDTR &= ((uint32_t)~CAN_TDT0R_TGT);
    CANx->sTxMailBox[1].TDTR &= ((uint32_t)~CAN_TDT1R_TGT);
    CANx->sTxMailBox[2].TDTR &= ((uint32_t)~CAN_TDT2R_TGT);
  }
}
20000d26:	e027      	b.n	20000d78 <CAN_TTComModeCmd+0xbc>
    CANx->MCR &= (uint32_t)(~(uint32_t)CAN_MCR_TTCM);
20000d28:	687b      	ldr	r3, [r7, #4]
20000d2a:	681b      	ldr	r3, [r3, #0]
20000d2c:	2280      	movs	r2, #128	; 0x80
20000d2e:	4393      	bics	r3, r2
20000d30:	001a      	movs	r2, r3
20000d32:	687b      	ldr	r3, [r7, #4]
20000d34:	601a      	str	r2, [r3, #0]
    CANx->sTxMailBox[0].TDTR &= ((uint32_t)~CAN_TDT0R_TGT);
20000d36:	687a      	ldr	r2, [r7, #4]
20000d38:	23c2      	movs	r3, #194	; 0xc2
20000d3a:	005b      	lsls	r3, r3, #1
20000d3c:	58d3      	ldr	r3, [r2, r3]
20000d3e:	4a10      	ldr	r2, [pc, #64]	; (20000d80 <CAN_TTComModeCmd+0xc4>)
20000d40:	4013      	ands	r3, r2
20000d42:	0019      	movs	r1, r3
20000d44:	687a      	ldr	r2, [r7, #4]
20000d46:	23c2      	movs	r3, #194	; 0xc2
20000d48:	005b      	lsls	r3, r3, #1
20000d4a:	50d1      	str	r1, [r2, r3]
    CANx->sTxMailBox[1].TDTR &= ((uint32_t)~CAN_TDT1R_TGT);
20000d4c:	687a      	ldr	r2, [r7, #4]
20000d4e:	23ca      	movs	r3, #202	; 0xca
20000d50:	005b      	lsls	r3, r3, #1
20000d52:	58d3      	ldr	r3, [r2, r3]
20000d54:	4a0a      	ldr	r2, [pc, #40]	; (20000d80 <CAN_TTComModeCmd+0xc4>)
20000d56:	4013      	ands	r3, r2
20000d58:	0019      	movs	r1, r3
20000d5a:	687a      	ldr	r2, [r7, #4]
20000d5c:	23ca      	movs	r3, #202	; 0xca
20000d5e:	005b      	lsls	r3, r3, #1
20000d60:	50d1      	str	r1, [r2, r3]
    CANx->sTxMailBox[2].TDTR &= ((uint32_t)~CAN_TDT2R_TGT);
20000d62:	687a      	ldr	r2, [r7, #4]
20000d64:	23d2      	movs	r3, #210	; 0xd2
20000d66:	005b      	lsls	r3, r3, #1
20000d68:	58d3      	ldr	r3, [r2, r3]
20000d6a:	4a05      	ldr	r2, [pc, #20]	; (20000d80 <CAN_TTComModeCmd+0xc4>)
20000d6c:	4013      	ands	r3, r2
20000d6e:	0019      	movs	r1, r3
20000d70:	687a      	ldr	r2, [r7, #4]
20000d72:	23d2      	movs	r3, #210	; 0xd2
20000d74:	005b      	lsls	r3, r3, #1
20000d76:	50d1      	str	r1, [r2, r3]
}
20000d78:	46c0      	nop			; (mov r8, r8)
20000d7a:	46bd      	mov	sp, r7
20000d7c:	b002      	add	sp, #8
20000d7e:	bd80      	pop	{r7, pc}
20000d80:	fffffeff 			; <UNDEFINED> instruction: 0xfffffeff

20000d84 <CAN_Transmit>:
  * @note   CAN3 peripheral is available only for STM32F413_423xx devices
  * @retval The number of the mailbox that is used for transmission or
  *         CAN_TxStatus_NoMailBox if there is no empty mailbox.
  */
uint8_t CAN_Transmit(CAN_TypeDef* CANx, CanTxMsg* TxMessage)
{
20000d84:	b590      	push	{r4, r7, lr}
20000d86:	b085      	sub	sp, #20
20000d88:	af00      	add	r7, sp, #0
20000d8a:	6078      	str	r0, [r7, #4]
20000d8c:	6039      	str	r1, [r7, #0]
  uint8_t transmit_mailbox = 0;
20000d8e:	230f      	movs	r3, #15
20000d90:	18fb      	adds	r3, r7, r3
20000d92:	2200      	movs	r2, #0
20000d94:	701a      	strb	r2, [r3, #0]
  assert_param(IS_CAN_IDTYPE(TxMessage->IDE));
  assert_param(IS_CAN_RTR(TxMessage->RTR));
  assert_param(IS_CAN_DLC(TxMessage->DLC));

  /* Select one empty transmit mailbox */
  if ((CANx->TSR&CAN_TSR_TME0) == CAN_TSR_TME0)
20000d96:	687b      	ldr	r3, [r7, #4]
20000d98:	689a      	ldr	r2, [r3, #8]
20000d9a:	2380      	movs	r3, #128	; 0x80
20000d9c:	04db      	lsls	r3, r3, #19
20000d9e:	401a      	ands	r2, r3
20000da0:	2380      	movs	r3, #128	; 0x80
20000da2:	04db      	lsls	r3, r3, #19
20000da4:	429a      	cmp	r2, r3
20000da6:	d104      	bne.n	20000db2 <CAN_Transmit+0x2e>
  {
    transmit_mailbox = 0;
20000da8:	230f      	movs	r3, #15
20000daa:	18fb      	adds	r3, r7, r3
20000dac:	2200      	movs	r2, #0
20000dae:	701a      	strb	r2, [r3, #0]
20000db0:	e01f      	b.n	20000df2 <CAN_Transmit+0x6e>
  }
  else if ((CANx->TSR&CAN_TSR_TME1) == CAN_TSR_TME1)
20000db2:	687b      	ldr	r3, [r7, #4]
20000db4:	689a      	ldr	r2, [r3, #8]
20000db6:	2380      	movs	r3, #128	; 0x80
20000db8:	051b      	lsls	r3, r3, #20
20000dba:	401a      	ands	r2, r3
20000dbc:	2380      	movs	r3, #128	; 0x80
20000dbe:	051b      	lsls	r3, r3, #20
20000dc0:	429a      	cmp	r2, r3
20000dc2:	d104      	bne.n	20000dce <CAN_Transmit+0x4a>
  {
    transmit_mailbox = 1;
20000dc4:	230f      	movs	r3, #15
20000dc6:	18fb      	adds	r3, r7, r3
20000dc8:	2201      	movs	r2, #1
20000dca:	701a      	strb	r2, [r3, #0]
20000dcc:	e011      	b.n	20000df2 <CAN_Transmit+0x6e>
  }
  else if ((CANx->TSR&CAN_TSR_TME2) == CAN_TSR_TME2)
20000dce:	687b      	ldr	r3, [r7, #4]
20000dd0:	689a      	ldr	r2, [r3, #8]
20000dd2:	2380      	movs	r3, #128	; 0x80
20000dd4:	055b      	lsls	r3, r3, #21
20000dd6:	401a      	ands	r2, r3
20000dd8:	2380      	movs	r3, #128	; 0x80
20000dda:	055b      	lsls	r3, r3, #21
20000ddc:	429a      	cmp	r2, r3
20000dde:	d104      	bne.n	20000dea <CAN_Transmit+0x66>
  {
    transmit_mailbox = 2;
20000de0:	230f      	movs	r3, #15
20000de2:	18fb      	adds	r3, r7, r3
20000de4:	2202      	movs	r2, #2
20000de6:	701a      	strb	r2, [r3, #0]
20000de8:	e003      	b.n	20000df2 <CAN_Transmit+0x6e>
  }
  else
  {
    transmit_mailbox = CAN_TxStatus_NoMailBox;
20000dea:	230f      	movs	r3, #15
20000dec:	18fb      	adds	r3, r7, r3
20000dee:	2204      	movs	r2, #4
20000df0:	701a      	strb	r2, [r3, #0]
  }

  if (transmit_mailbox != CAN_TxStatus_NoMailBox)
20000df2:	230f      	movs	r3, #15
20000df4:	18fb      	adds	r3, r7, r3
20000df6:	781b      	ldrb	r3, [r3, #0]
20000df8:	2b04      	cmp	r3, #4
20000dfa:	d100      	bne.n	20000dfe <CAN_Transmit+0x7a>
20000dfc:	e0ac      	b.n	20000f58 <CAN_Transmit+0x1d4>
  {
    /* Set up the Id */
    CANx->sTxMailBox[transmit_mailbox].TIR &= TMIDxR_TXRQ;
20000dfe:	210f      	movs	r1, #15
20000e00:	187b      	adds	r3, r7, r1
20000e02:	781a      	ldrb	r2, [r3, #0]
20000e04:	687b      	ldr	r3, [r7, #4]
20000e06:	3218      	adds	r2, #24
20000e08:	0112      	lsls	r2, r2, #4
20000e0a:	58d3      	ldr	r3, [r2, r3]
20000e0c:	187a      	adds	r2, r7, r1
20000e0e:	7812      	ldrb	r2, [r2, #0]
20000e10:	2101      	movs	r1, #1
20000e12:	4019      	ands	r1, r3
20000e14:	687b      	ldr	r3, [r7, #4]
20000e16:	3218      	adds	r2, #24
20000e18:	0112      	lsls	r2, r2, #4
20000e1a:	50d1      	str	r1, [r2, r3]
    if (TxMessage->IDE == CAN_Id_Standard)
20000e1c:	683b      	ldr	r3, [r7, #0]
20000e1e:	7a1b      	ldrb	r3, [r3, #8]
20000e20:	2b00      	cmp	r3, #0
20000e22:	d114      	bne.n	20000e4e <CAN_Transmit+0xca>
    {
      assert_param(IS_CAN_STDID(TxMessage->StdId));  
      CANx->sTxMailBox[transmit_mailbox].TIR |= ((TxMessage->StdId << 21) | \
20000e24:	200f      	movs	r0, #15
20000e26:	183b      	adds	r3, r7, r0
20000e28:	781a      	ldrb	r2, [r3, #0]
20000e2a:	687b      	ldr	r3, [r7, #4]
20000e2c:	3218      	adds	r2, #24
20000e2e:	0112      	lsls	r2, r2, #4
20000e30:	58d1      	ldr	r1, [r2, r3]
20000e32:	683b      	ldr	r3, [r7, #0]
20000e34:	681b      	ldr	r3, [r3, #0]
20000e36:	055b      	lsls	r3, r3, #21
                                                  TxMessage->RTR);
20000e38:	683a      	ldr	r2, [r7, #0]
20000e3a:	7a52      	ldrb	r2, [r2, #9]
      CANx->sTxMailBox[transmit_mailbox].TIR |= ((TxMessage->StdId << 21) | \
20000e3c:	4313      	orrs	r3, r2
20000e3e:	183a      	adds	r2, r7, r0
20000e40:	7812      	ldrb	r2, [r2, #0]
20000e42:	4319      	orrs	r1, r3
20000e44:	687b      	ldr	r3, [r7, #4]
20000e46:	3218      	adds	r2, #24
20000e48:	0112      	lsls	r2, r2, #4
20000e4a:	50d1      	str	r1, [r2, r3]
20000e4c:	e016      	b.n	20000e7c <CAN_Transmit+0xf8>
    }
    else
    {
      assert_param(IS_CAN_EXTID(TxMessage->ExtId));
      CANx->sTxMailBox[transmit_mailbox].TIR |= ((TxMessage->ExtId << 3) | \
20000e4e:	200f      	movs	r0, #15
20000e50:	183b      	adds	r3, r7, r0
20000e52:	781a      	ldrb	r2, [r3, #0]
20000e54:	687b      	ldr	r3, [r7, #4]
20000e56:	3218      	adds	r2, #24
20000e58:	0112      	lsls	r2, r2, #4
20000e5a:	58d1      	ldr	r1, [r2, r3]
20000e5c:	683b      	ldr	r3, [r7, #0]
20000e5e:	685b      	ldr	r3, [r3, #4]
20000e60:	00db      	lsls	r3, r3, #3
                                                  TxMessage->IDE | \
20000e62:	683a      	ldr	r2, [r7, #0]
20000e64:	7a12      	ldrb	r2, [r2, #8]
      CANx->sTxMailBox[transmit_mailbox].TIR |= ((TxMessage->ExtId << 3) | \
20000e66:	4313      	orrs	r3, r2
                                                  TxMessage->RTR);
20000e68:	683a      	ldr	r2, [r7, #0]
20000e6a:	7a52      	ldrb	r2, [r2, #9]
                                                  TxMessage->IDE | \
20000e6c:	4313      	orrs	r3, r2
      CANx->sTxMailBox[transmit_mailbox].TIR |= ((TxMessage->ExtId << 3) | \
20000e6e:	183a      	adds	r2, r7, r0
20000e70:	7812      	ldrb	r2, [r2, #0]
20000e72:	4319      	orrs	r1, r3
20000e74:	687b      	ldr	r3, [r7, #4]
20000e76:	3218      	adds	r2, #24
20000e78:	0112      	lsls	r2, r2, #4
20000e7a:	50d1      	str	r1, [r2, r3]
    }
    
    /* Set up the DLC */
    TxMessage->DLC &= (uint8_t)0x0000000F;
20000e7c:	683b      	ldr	r3, [r7, #0]
20000e7e:	7a9b      	ldrb	r3, [r3, #10]
20000e80:	220f      	movs	r2, #15
20000e82:	4013      	ands	r3, r2
20000e84:	b2da      	uxtb	r2, r3
20000e86:	683b      	ldr	r3, [r7, #0]
20000e88:	729a      	strb	r2, [r3, #10]
    CANx->sTxMailBox[transmit_mailbox].TDTR &= (uint32_t)0xFFFFFFF0;
20000e8a:	240f      	movs	r4, #15
20000e8c:	193b      	adds	r3, r7, r4
20000e8e:	781b      	ldrb	r3, [r3, #0]
20000e90:	687a      	ldr	r2, [r7, #4]
20000e92:	3318      	adds	r3, #24
20000e94:	011b      	lsls	r3, r3, #4
20000e96:	18d3      	adds	r3, r2, r3
20000e98:	3304      	adds	r3, #4
20000e9a:	681a      	ldr	r2, [r3, #0]
20000e9c:	193b      	adds	r3, r7, r4
20000e9e:	781b      	ldrb	r3, [r3, #0]
20000ea0:	210f      	movs	r1, #15
20000ea2:	438a      	bics	r2, r1
20000ea4:	6879      	ldr	r1, [r7, #4]
20000ea6:	3318      	adds	r3, #24
20000ea8:	011b      	lsls	r3, r3, #4
20000eaa:	18cb      	adds	r3, r1, r3
20000eac:	3304      	adds	r3, #4
20000eae:	601a      	str	r2, [r3, #0]
    CANx->sTxMailBox[transmit_mailbox].TDTR |= TxMessage->DLC;
20000eb0:	193b      	adds	r3, r7, r4
20000eb2:	781b      	ldrb	r3, [r3, #0]
20000eb4:	687a      	ldr	r2, [r7, #4]
20000eb6:	3318      	adds	r3, #24
20000eb8:	011b      	lsls	r3, r3, #4
20000eba:	18d3      	adds	r3, r2, r3
20000ebc:	3304      	adds	r3, #4
20000ebe:	681a      	ldr	r2, [r3, #0]
20000ec0:	683b      	ldr	r3, [r7, #0]
20000ec2:	7a9b      	ldrb	r3, [r3, #10]
20000ec4:	0019      	movs	r1, r3
20000ec6:	193b      	adds	r3, r7, r4
20000ec8:	781b      	ldrb	r3, [r3, #0]
20000eca:	430a      	orrs	r2, r1
20000ecc:	6879      	ldr	r1, [r7, #4]
20000ece:	3318      	adds	r3, #24
20000ed0:	011b      	lsls	r3, r3, #4
20000ed2:	18cb      	adds	r3, r1, r3
20000ed4:	3304      	adds	r3, #4
20000ed6:	601a      	str	r2, [r3, #0]

    /* Set up the data field */
    CANx->sTxMailBox[transmit_mailbox].TDLR = (((uint32_t)TxMessage->Data[3] << 24) | 
20000ed8:	683b      	ldr	r3, [r7, #0]
20000eda:	7b9b      	ldrb	r3, [r3, #14]
20000edc:	061a      	lsls	r2, r3, #24
                                             ((uint32_t)TxMessage->Data[2] << 16) |
20000ede:	683b      	ldr	r3, [r7, #0]
20000ee0:	7b5b      	ldrb	r3, [r3, #13]
20000ee2:	041b      	lsls	r3, r3, #16
    CANx->sTxMailBox[transmit_mailbox].TDLR = (((uint32_t)TxMessage->Data[3] << 24) | 
20000ee4:	431a      	orrs	r2, r3
                                             ((uint32_t)TxMessage->Data[1] << 8) | 
20000ee6:	683b      	ldr	r3, [r7, #0]
20000ee8:	7b1b      	ldrb	r3, [r3, #12]
20000eea:	021b      	lsls	r3, r3, #8
                                             ((uint32_t)TxMessage->Data[2] << 16) |
20000eec:	4313      	orrs	r3, r2
                                             ((uint32_t)TxMessage->Data[0]));
20000eee:	683a      	ldr	r2, [r7, #0]
20000ef0:	7ad2      	ldrb	r2, [r2, #11]
20000ef2:	0010      	movs	r0, r2
    CANx->sTxMailBox[transmit_mailbox].TDLR = (((uint32_t)TxMessage->Data[3] << 24) | 
20000ef4:	193a      	adds	r2, r7, r4
20000ef6:	7811      	ldrb	r1, [r2, #0]
                                             ((uint32_t)TxMessage->Data[1] << 8) | 
20000ef8:	4303      	orrs	r3, r0
20000efa:	001a      	movs	r2, r3
    CANx->sTxMailBox[transmit_mailbox].TDLR = (((uint32_t)TxMessage->Data[3] << 24) | 
20000efc:	6878      	ldr	r0, [r7, #4]
20000efe:	23c4      	movs	r3, #196	; 0xc4
20000f00:	005b      	lsls	r3, r3, #1
20000f02:	0109      	lsls	r1, r1, #4
20000f04:	1841      	adds	r1, r0, r1
20000f06:	18cb      	adds	r3, r1, r3
20000f08:	601a      	str	r2, [r3, #0]
    CANx->sTxMailBox[transmit_mailbox].TDHR = (((uint32_t)TxMessage->Data[7] << 24) | 
20000f0a:	683b      	ldr	r3, [r7, #0]
20000f0c:	7c9b      	ldrb	r3, [r3, #18]
20000f0e:	061a      	lsls	r2, r3, #24
                                             ((uint32_t)TxMessage->Data[6] << 16) |
20000f10:	683b      	ldr	r3, [r7, #0]
20000f12:	7c5b      	ldrb	r3, [r3, #17]
20000f14:	041b      	lsls	r3, r3, #16
    CANx->sTxMailBox[transmit_mailbox].TDHR = (((uint32_t)TxMessage->Data[7] << 24) | 
20000f16:	431a      	orrs	r2, r3
                                             ((uint32_t)TxMessage->Data[5] << 8) |
20000f18:	683b      	ldr	r3, [r7, #0]
20000f1a:	7c1b      	ldrb	r3, [r3, #16]
20000f1c:	021b      	lsls	r3, r3, #8
                                             ((uint32_t)TxMessage->Data[6] << 16) |
20000f1e:	4313      	orrs	r3, r2
                                             ((uint32_t)TxMessage->Data[4]));
20000f20:	683a      	ldr	r2, [r7, #0]
20000f22:	7bd2      	ldrb	r2, [r2, #15]
20000f24:	0010      	movs	r0, r2
    CANx->sTxMailBox[transmit_mailbox].TDHR = (((uint32_t)TxMessage->Data[7] << 24) | 
20000f26:	193a      	adds	r2, r7, r4
20000f28:	7811      	ldrb	r1, [r2, #0]
                                             ((uint32_t)TxMessage->Data[5] << 8) |
20000f2a:	4303      	orrs	r3, r0
20000f2c:	001a      	movs	r2, r3
    CANx->sTxMailBox[transmit_mailbox].TDHR = (((uint32_t)TxMessage->Data[7] << 24) | 
20000f2e:	6878      	ldr	r0, [r7, #4]
20000f30:	23c6      	movs	r3, #198	; 0xc6
20000f32:	005b      	lsls	r3, r3, #1
20000f34:	0109      	lsls	r1, r1, #4
20000f36:	1841      	adds	r1, r0, r1
20000f38:	18cb      	adds	r3, r1, r3
20000f3a:	601a      	str	r2, [r3, #0]
    /* Request transmission */
    CANx->sTxMailBox[transmit_mailbox].TIR |= TMIDxR_TXRQ;
20000f3c:	193b      	adds	r3, r7, r4
20000f3e:	781a      	ldrb	r2, [r3, #0]
20000f40:	687b      	ldr	r3, [r7, #4]
20000f42:	3218      	adds	r2, #24
20000f44:	0112      	lsls	r2, r2, #4
20000f46:	58d3      	ldr	r3, [r2, r3]
20000f48:	193a      	adds	r2, r7, r4
20000f4a:	7812      	ldrb	r2, [r2, #0]
20000f4c:	2101      	movs	r1, #1
20000f4e:	4319      	orrs	r1, r3
20000f50:	687b      	ldr	r3, [r7, #4]
20000f52:	3218      	adds	r2, #24
20000f54:	0112      	lsls	r2, r2, #4
20000f56:	50d1      	str	r1, [r2, r3]
  }
  return transmit_mailbox;
20000f58:	230f      	movs	r3, #15
20000f5a:	18fb      	adds	r3, r7, r3
20000f5c:	781b      	ldrb	r3, [r3, #0]
}
20000f5e:	0018      	movs	r0, r3
20000f60:	46bd      	mov	sp, r7
20000f62:	b005      	add	sp, #20
20000f64:	bd90      	pop	{r4, r7, pc}

20000f66 <CAN_TransmitStatus>:
  * @note   CAN3 peripheral is available only for STM32F413_423xx devices
  * @retval CAN_TxStatus_Ok if the CAN driver transmits the message, 
  *         CAN_TxStatus_Failed in an other case.
  */
uint8_t CAN_TransmitStatus(CAN_TypeDef* CANx, uint8_t TransmitMailbox)
{
20000f66:	b580      	push	{r7, lr}
20000f68:	b084      	sub	sp, #16
20000f6a:	af00      	add	r7, sp, #0
20000f6c:	6078      	str	r0, [r7, #4]
20000f6e:	000a      	movs	r2, r1
20000f70:	1cfb      	adds	r3, r7, #3
20000f72:	701a      	strb	r2, [r3, #0]
  uint32_t state = 0;
20000f74:	2300      	movs	r3, #0
20000f76:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_TRANSMITMAILBOX(TransmitMailbox));
 
  switch (TransmitMailbox)
20000f78:	1cfb      	adds	r3, r7, #3
20000f7a:	781b      	ldrb	r3, [r3, #0]
20000f7c:	2b01      	cmp	r3, #1
20000f7e:	d009      	beq.n	20000f94 <CAN_TransmitStatus+0x2e>
20000f80:	2b02      	cmp	r3, #2
20000f82:	d00d      	beq.n	20000fa0 <CAN_TransmitStatus+0x3a>
20000f84:	2b00      	cmp	r3, #0
20000f86:	d111      	bne.n	20000fac <CAN_TransmitStatus+0x46>
  {
    case (CAN_TXMAILBOX_0): 
      state =   CANx->TSR &  (CAN_TSR_RQCP0 | CAN_TSR_TXOK0 | CAN_TSR_TME0);
20000f88:	687b      	ldr	r3, [r7, #4]
20000f8a:	689b      	ldr	r3, [r3, #8]
20000f8c:	4a25      	ldr	r2, [pc, #148]	; (20001024 <CAN_TransmitStatus+0xbe>)
20000f8e:	4013      	ands	r3, r2
20000f90:	60fb      	str	r3, [r7, #12]
      break;
20000f92:	e00e      	b.n	20000fb2 <CAN_TransmitStatus+0x4c>
    case (CAN_TXMAILBOX_1): 
      state =   CANx->TSR &  (CAN_TSR_RQCP1 | CAN_TSR_TXOK1 | CAN_TSR_TME1);
20000f94:	687b      	ldr	r3, [r7, #4]
20000f96:	689b      	ldr	r3, [r3, #8]
20000f98:	4a23      	ldr	r2, [pc, #140]	; (20001028 <CAN_TransmitStatus+0xc2>)
20000f9a:	4013      	ands	r3, r2
20000f9c:	60fb      	str	r3, [r7, #12]
      break;
20000f9e:	e008      	b.n	20000fb2 <CAN_TransmitStatus+0x4c>
    case (CAN_TXMAILBOX_2): 
      state =   CANx->TSR &  (CAN_TSR_RQCP2 | CAN_TSR_TXOK2 | CAN_TSR_TME2);
20000fa0:	687b      	ldr	r3, [r7, #4]
20000fa2:	689b      	ldr	r3, [r3, #8]
20000fa4:	4a21      	ldr	r2, [pc, #132]	; (2000102c <CAN_TransmitStatus+0xc6>)
20000fa6:	4013      	ands	r3, r2
20000fa8:	60fb      	str	r3, [r7, #12]
      break;
20000faa:	e002      	b.n	20000fb2 <CAN_TransmitStatus+0x4c>
    default:
      state = CAN_TxStatus_Failed;
20000fac:	2300      	movs	r3, #0
20000fae:	60fb      	str	r3, [r7, #12]
      break;
20000fb0:	46c0      	nop			; (mov r8, r8)
  }
  switch (state)
20000fb2:	68fb      	ldr	r3, [r7, #12]
20000fb4:	4a1e      	ldr	r2, [pc, #120]	; (20001030 <CAN_TransmitStatus+0xca>)
20000fb6:	4293      	cmp	r3, r2
20000fb8:	d01b      	beq.n	20000ff2 <CAN_TransmitStatus+0x8c>
20000fba:	4a1d      	ldr	r2, [pc, #116]	; (20001030 <CAN_TransmitStatus+0xca>)
20000fbc:	4293      	cmp	r3, r2
20000fbe:	d808      	bhi.n	20000fd2 <CAN_TransmitStatus+0x6c>
20000fc0:	4a1c      	ldr	r2, [pc, #112]	; (20001034 <CAN_TransmitStatus+0xce>)
20000fc2:	4293      	cmp	r3, r2
20000fc4:	d012      	beq.n	20000fec <CAN_TransmitStatus+0x86>
20000fc6:	4a17      	ldr	r2, [pc, #92]	; (20001024 <CAN_TransmitStatus+0xbe>)
20000fc8:	4293      	cmp	r3, r2
20000fca:	d018      	beq.n	20000ffe <CAN_TransmitStatus+0x98>
20000fcc:	2b00      	cmp	r3, #0
20000fce:	d00a      	beq.n	20000fe6 <CAN_TransmitStatus+0x80>
20000fd0:	e01e      	b.n	20001010 <CAN_TransmitStatus+0xaa>
20000fd2:	4a19      	ldr	r2, [pc, #100]	; (20001038 <CAN_TransmitStatus+0xd2>)
20000fd4:	4293      	cmp	r3, r2
20000fd6:	d00f      	beq.n	20000ff8 <CAN_TransmitStatus+0x92>
20000fd8:	4a14      	ldr	r2, [pc, #80]	; (2000102c <CAN_TransmitStatus+0xc6>)
20000fda:	4293      	cmp	r3, r2
20000fdc:	d015      	beq.n	2000100a <CAN_TransmitStatus+0xa4>
20000fde:	4a12      	ldr	r2, [pc, #72]	; (20001028 <CAN_TransmitStatus+0xc2>)
20000fe0:	4293      	cmp	r3, r2
20000fe2:	d00f      	beq.n	20001004 <CAN_TransmitStatus+0x9e>
20000fe4:	e014      	b.n	20001010 <CAN_TransmitStatus+0xaa>
  {
      /* transmit pending  */
    case (0x0): state = CAN_TxStatus_Pending;
20000fe6:	2302      	movs	r3, #2
20000fe8:	60fb      	str	r3, [r7, #12]
      break;
20000fea:	e014      	b.n	20001016 <CAN_TransmitStatus+0xb0>
      /* transmit failed  */
     case (CAN_TSR_RQCP0 | CAN_TSR_TME0): state = CAN_TxStatus_Failed;
20000fec:	2300      	movs	r3, #0
20000fee:	60fb      	str	r3, [r7, #12]
      break;
20000ff0:	e011      	b.n	20001016 <CAN_TransmitStatus+0xb0>
     case (CAN_TSR_RQCP1 | CAN_TSR_TME1): state = CAN_TxStatus_Failed;
20000ff2:	2300      	movs	r3, #0
20000ff4:	60fb      	str	r3, [r7, #12]
      break;
20000ff6:	e00e      	b.n	20001016 <CAN_TransmitStatus+0xb0>
     case (CAN_TSR_RQCP2 | CAN_TSR_TME2): state = CAN_TxStatus_Failed;
20000ff8:	2300      	movs	r3, #0
20000ffa:	60fb      	str	r3, [r7, #12]
      break;
20000ffc:	e00b      	b.n	20001016 <CAN_TransmitStatus+0xb0>
      /* transmit succeeded  */
    case (CAN_TSR_RQCP0 | CAN_TSR_TXOK0 | CAN_TSR_TME0):state = CAN_TxStatus_Ok;
20000ffe:	2301      	movs	r3, #1
20001000:	60fb      	str	r3, [r7, #12]
      break;
20001002:	e008      	b.n	20001016 <CAN_TransmitStatus+0xb0>
    case (CAN_TSR_RQCP1 | CAN_TSR_TXOK1 | CAN_TSR_TME1):state = CAN_TxStatus_Ok;
20001004:	2301      	movs	r3, #1
20001006:	60fb      	str	r3, [r7, #12]
      break;
20001008:	e005      	b.n	20001016 <CAN_TransmitStatus+0xb0>
    case (CAN_TSR_RQCP2 | CAN_TSR_TXOK2 | CAN_TSR_TME2):state = CAN_TxStatus_Ok;
2000100a:	2301      	movs	r3, #1
2000100c:	60fb      	str	r3, [r7, #12]
      break;
2000100e:	e002      	b.n	20001016 <CAN_TransmitStatus+0xb0>
    default: state = CAN_TxStatus_Failed;
20001010:	2300      	movs	r3, #0
20001012:	60fb      	str	r3, [r7, #12]
      break;
20001014:	46c0      	nop			; (mov r8, r8)
  }
  return (uint8_t) state;
20001016:	68fb      	ldr	r3, [r7, #12]
20001018:	b2db      	uxtb	r3, r3
}
2000101a:	0018      	movs	r0, r3
2000101c:	46bd      	mov	sp, r7
2000101e:	b004      	add	sp, #16
20001020:	bd80      	pop	{r7, pc}
20001022:	46c0      	nop			; (mov r8, r8)
20001024:	04000003 	streq	r0, [r0], #-3
20001028:	08000300 	stmdaeq	r0, {r8, r9}
2000102c:	10030000 	andne	r0, r3, r0
20001030:	08000100 	stmdaeq	r0, {r8}
20001034:	04000001 	streq	r0, [r0], #-1
20001038:	10010000 	andne	r0, r1, r0

2000103c <CAN_CancelTransmit>:
  * @param  Mailbox: Mailbox number.
  * @note   CAN3 peripheral is available only for STM32F413_423xx devices
  * @retval None
  */
void CAN_CancelTransmit(CAN_TypeDef* CANx, uint8_t Mailbox)
{
2000103c:	b580      	push	{r7, lr}
2000103e:	b082      	sub	sp, #8
20001040:	af00      	add	r7, sp, #0
20001042:	6078      	str	r0, [r7, #4]
20001044:	000a      	movs	r2, r1
20001046:	1cfb      	adds	r3, r7, #3
20001048:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_TRANSMITMAILBOX(Mailbox));
  /* abort transmission */
  switch (Mailbox)
2000104a:	1cfb      	adds	r3, r7, #3
2000104c:	781b      	ldrb	r3, [r3, #0]
2000104e:	2b01      	cmp	r3, #1
20001050:	d00b      	beq.n	2000106a <CAN_CancelTransmit+0x2e>
20001052:	2b02      	cmp	r3, #2
20001054:	d011      	beq.n	2000107a <CAN_CancelTransmit+0x3e>
20001056:	2b00      	cmp	r3, #0
20001058:	d000      	beq.n	2000105c <CAN_CancelTransmit+0x20>
    case (CAN_TXMAILBOX_1): CANx->TSR |= CAN_TSR_ABRQ1;
      break;
    case (CAN_TXMAILBOX_2): CANx->TSR |= CAN_TSR_ABRQ2;
      break;
    default:
      break;
2000105a:	e016      	b.n	2000108a <CAN_CancelTransmit+0x4e>
    case (CAN_TXMAILBOX_0): CANx->TSR |= CAN_TSR_ABRQ0;
2000105c:	687b      	ldr	r3, [r7, #4]
2000105e:	689b      	ldr	r3, [r3, #8]
20001060:	2280      	movs	r2, #128	; 0x80
20001062:	431a      	orrs	r2, r3
20001064:	687b      	ldr	r3, [r7, #4]
20001066:	609a      	str	r2, [r3, #8]
      break;
20001068:	e00f      	b.n	2000108a <CAN_CancelTransmit+0x4e>
    case (CAN_TXMAILBOX_1): CANx->TSR |= CAN_TSR_ABRQ1;
2000106a:	687b      	ldr	r3, [r7, #4]
2000106c:	689b      	ldr	r3, [r3, #8]
2000106e:	2280      	movs	r2, #128	; 0x80
20001070:	0212      	lsls	r2, r2, #8
20001072:	431a      	orrs	r2, r3
20001074:	687b      	ldr	r3, [r7, #4]
20001076:	609a      	str	r2, [r3, #8]
      break;
20001078:	e007      	b.n	2000108a <CAN_CancelTransmit+0x4e>
    case (CAN_TXMAILBOX_2): CANx->TSR |= CAN_TSR_ABRQ2;
2000107a:	687b      	ldr	r3, [r7, #4]
2000107c:	689b      	ldr	r3, [r3, #8]
2000107e:	2280      	movs	r2, #128	; 0x80
20001080:	0412      	lsls	r2, r2, #16
20001082:	431a      	orrs	r2, r3
20001084:	687b      	ldr	r3, [r7, #4]
20001086:	609a      	str	r2, [r3, #8]
      break;
20001088:	46c0      	nop			; (mov r8, r8)
  }
}
2000108a:	46c0      	nop			; (mov r8, r8)
2000108c:	46bd      	mov	sp, r7
2000108e:	b002      	add	sp, #8
20001090:	bd80      	pop	{r7, pc}

20001092 <CAN_Receive>:
  *         CAN DLC, CAN data and FMI number.
  * @note   CAN3 peripheral is available only for STM32F413_423xx devices
  * @retval None
  */
void CAN_Receive(CAN_TypeDef* CANx, uint8_t FIFONumber, CanRxMsg* RxMessage)
{
20001092:	b580      	push	{r7, lr}
20001094:	b084      	sub	sp, #16
20001096:	af00      	add	r7, sp, #0
20001098:	60f8      	str	r0, [r7, #12]
2000109a:	607a      	str	r2, [r7, #4]
2000109c:	200b      	movs	r0, #11
2000109e:	183b      	adds	r3, r7, r0
200010a0:	1c0a      	adds	r2, r1, #0
200010a2:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_FIFO(FIFONumber));
  /* Get the Id */
  RxMessage->IDE = (uint8_t)0x04 & CANx->sFIFOMailBox[FIFONumber].RIR;
200010a4:	183b      	adds	r3, r7, r0
200010a6:	781a      	ldrb	r2, [r3, #0]
200010a8:	68fb      	ldr	r3, [r7, #12]
200010aa:	321b      	adds	r2, #27
200010ac:	0112      	lsls	r2, r2, #4
200010ae:	58d3      	ldr	r3, [r2, r3]
200010b0:	b2db      	uxtb	r3, r3
200010b2:	2204      	movs	r2, #4
200010b4:	4013      	ands	r3, r2
200010b6:	b2da      	uxtb	r2, r3
200010b8:	687b      	ldr	r3, [r7, #4]
200010ba:	721a      	strb	r2, [r3, #8]
  if (RxMessage->IDE == CAN_Id_Standard)
200010bc:	687b      	ldr	r3, [r7, #4]
200010be:	7a1b      	ldrb	r3, [r3, #8]
200010c0:	2b00      	cmp	r3, #0
200010c2:	d10c      	bne.n	200010de <CAN_Receive+0x4c>
  {
    RxMessage->StdId = (uint32_t)0x000007FF & (CANx->sFIFOMailBox[FIFONumber].RIR >> 21);
200010c4:	230b      	movs	r3, #11
200010c6:	18fb      	adds	r3, r7, r3
200010c8:	781a      	ldrb	r2, [r3, #0]
200010ca:	68fb      	ldr	r3, [r7, #12]
200010cc:	321b      	adds	r2, #27
200010ce:	0112      	lsls	r2, r2, #4
200010d0:	58d3      	ldr	r3, [r2, r3]
200010d2:	0d5b      	lsrs	r3, r3, #21
200010d4:	055b      	lsls	r3, r3, #21
200010d6:	0d5a      	lsrs	r2, r3, #21
200010d8:	687b      	ldr	r3, [r7, #4]
200010da:	601a      	str	r2, [r3, #0]
200010dc:	e00b      	b.n	200010f6 <CAN_Receive+0x64>
  }
  else
  {
    RxMessage->ExtId = (uint32_t)0x1FFFFFFF & (CANx->sFIFOMailBox[FIFONumber].RIR >> 3);
200010de:	230b      	movs	r3, #11
200010e0:	18fb      	adds	r3, r7, r3
200010e2:	781a      	ldrb	r2, [r3, #0]
200010e4:	68fb      	ldr	r3, [r7, #12]
200010e6:	321b      	adds	r2, #27
200010e8:	0112      	lsls	r2, r2, #4
200010ea:	58d3      	ldr	r3, [r2, r3]
200010ec:	08db      	lsrs	r3, r3, #3
200010ee:	00db      	lsls	r3, r3, #3
200010f0:	08da      	lsrs	r2, r3, #3
200010f2:	687b      	ldr	r3, [r7, #4]
200010f4:	605a      	str	r2, [r3, #4]
  }
  
  RxMessage->RTR = (uint8_t)0x02 & CANx->sFIFOMailBox[FIFONumber].RIR;
200010f6:	210b      	movs	r1, #11
200010f8:	187b      	adds	r3, r7, r1
200010fa:	781a      	ldrb	r2, [r3, #0]
200010fc:	68fb      	ldr	r3, [r7, #12]
200010fe:	321b      	adds	r2, #27
20001100:	0112      	lsls	r2, r2, #4
20001102:	58d3      	ldr	r3, [r2, r3]
20001104:	b2db      	uxtb	r3, r3
20001106:	2202      	movs	r2, #2
20001108:	4013      	ands	r3, r2
2000110a:	b2da      	uxtb	r2, r3
2000110c:	687b      	ldr	r3, [r7, #4]
2000110e:	725a      	strb	r2, [r3, #9]
  /* Get the DLC */
  RxMessage->DLC = (uint8_t)0x0F & CANx->sFIFOMailBox[FIFONumber].RDTR;
20001110:	187b      	adds	r3, r7, r1
20001112:	781b      	ldrb	r3, [r3, #0]
20001114:	68fa      	ldr	r2, [r7, #12]
20001116:	331b      	adds	r3, #27
20001118:	011b      	lsls	r3, r3, #4
2000111a:	18d3      	adds	r3, r2, r3
2000111c:	3304      	adds	r3, #4
2000111e:	681b      	ldr	r3, [r3, #0]
20001120:	b2db      	uxtb	r3, r3
20001122:	220f      	movs	r2, #15
20001124:	4013      	ands	r3, r2
20001126:	b2da      	uxtb	r2, r3
20001128:	687b      	ldr	r3, [r7, #4]
2000112a:	729a      	strb	r2, [r3, #10]
  /* Get the FMI */
  RxMessage->FMI = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDTR >> 8);
2000112c:	0008      	movs	r0, r1
2000112e:	183b      	adds	r3, r7, r0
20001130:	781b      	ldrb	r3, [r3, #0]
20001132:	68fa      	ldr	r2, [r7, #12]
20001134:	331b      	adds	r3, #27
20001136:	011b      	lsls	r3, r3, #4
20001138:	18d3      	adds	r3, r2, r3
2000113a:	3304      	adds	r3, #4
2000113c:	681b      	ldr	r3, [r3, #0]
2000113e:	0a1b      	lsrs	r3, r3, #8
20001140:	b2da      	uxtb	r2, r3
20001142:	687b      	ldr	r3, [r7, #4]
20001144:	74da      	strb	r2, [r3, #19]
  /* Get the data field */
  RxMessage->Data[0] = (uint8_t)0xFF & CANx->sFIFOMailBox[FIFONumber].RDLR;
20001146:	183b      	adds	r3, r7, r0
20001148:	781a      	ldrb	r2, [r3, #0]
2000114a:	68f9      	ldr	r1, [r7, #12]
2000114c:	23dc      	movs	r3, #220	; 0xdc
2000114e:	005b      	lsls	r3, r3, #1
20001150:	0112      	lsls	r2, r2, #4
20001152:	188a      	adds	r2, r1, r2
20001154:	18d3      	adds	r3, r2, r3
20001156:	681b      	ldr	r3, [r3, #0]
20001158:	b2da      	uxtb	r2, r3
2000115a:	687b      	ldr	r3, [r7, #4]
2000115c:	72da      	strb	r2, [r3, #11]
  RxMessage->Data[1] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDLR >> 8);
2000115e:	183b      	adds	r3, r7, r0
20001160:	781a      	ldrb	r2, [r3, #0]
20001162:	68f9      	ldr	r1, [r7, #12]
20001164:	23dc      	movs	r3, #220	; 0xdc
20001166:	005b      	lsls	r3, r3, #1
20001168:	0112      	lsls	r2, r2, #4
2000116a:	188a      	adds	r2, r1, r2
2000116c:	18d3      	adds	r3, r2, r3
2000116e:	681b      	ldr	r3, [r3, #0]
20001170:	0a1b      	lsrs	r3, r3, #8
20001172:	b2da      	uxtb	r2, r3
20001174:	687b      	ldr	r3, [r7, #4]
20001176:	731a      	strb	r2, [r3, #12]
  RxMessage->Data[2] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDLR >> 16);
20001178:	183b      	adds	r3, r7, r0
2000117a:	781a      	ldrb	r2, [r3, #0]
2000117c:	68f9      	ldr	r1, [r7, #12]
2000117e:	23dc      	movs	r3, #220	; 0xdc
20001180:	005b      	lsls	r3, r3, #1
20001182:	0112      	lsls	r2, r2, #4
20001184:	188a      	adds	r2, r1, r2
20001186:	18d3      	adds	r3, r2, r3
20001188:	681b      	ldr	r3, [r3, #0]
2000118a:	0c1b      	lsrs	r3, r3, #16
2000118c:	b2da      	uxtb	r2, r3
2000118e:	687b      	ldr	r3, [r7, #4]
20001190:	735a      	strb	r2, [r3, #13]
  RxMessage->Data[3] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDLR >> 24);
20001192:	183b      	adds	r3, r7, r0
20001194:	781a      	ldrb	r2, [r3, #0]
20001196:	68f9      	ldr	r1, [r7, #12]
20001198:	23dc      	movs	r3, #220	; 0xdc
2000119a:	005b      	lsls	r3, r3, #1
2000119c:	0112      	lsls	r2, r2, #4
2000119e:	188a      	adds	r2, r1, r2
200011a0:	18d3      	adds	r3, r2, r3
200011a2:	681b      	ldr	r3, [r3, #0]
200011a4:	0e1b      	lsrs	r3, r3, #24
200011a6:	b2da      	uxtb	r2, r3
200011a8:	687b      	ldr	r3, [r7, #4]
200011aa:	739a      	strb	r2, [r3, #14]
  RxMessage->Data[4] = (uint8_t)0xFF & CANx->sFIFOMailBox[FIFONumber].RDHR;
200011ac:	183b      	adds	r3, r7, r0
200011ae:	781a      	ldrb	r2, [r3, #0]
200011b0:	68f9      	ldr	r1, [r7, #12]
200011b2:	23de      	movs	r3, #222	; 0xde
200011b4:	005b      	lsls	r3, r3, #1
200011b6:	0112      	lsls	r2, r2, #4
200011b8:	188a      	adds	r2, r1, r2
200011ba:	18d3      	adds	r3, r2, r3
200011bc:	681b      	ldr	r3, [r3, #0]
200011be:	b2da      	uxtb	r2, r3
200011c0:	687b      	ldr	r3, [r7, #4]
200011c2:	73da      	strb	r2, [r3, #15]
  RxMessage->Data[5] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDHR >> 8);
200011c4:	183b      	adds	r3, r7, r0
200011c6:	781a      	ldrb	r2, [r3, #0]
200011c8:	68f9      	ldr	r1, [r7, #12]
200011ca:	23de      	movs	r3, #222	; 0xde
200011cc:	005b      	lsls	r3, r3, #1
200011ce:	0112      	lsls	r2, r2, #4
200011d0:	188a      	adds	r2, r1, r2
200011d2:	18d3      	adds	r3, r2, r3
200011d4:	681b      	ldr	r3, [r3, #0]
200011d6:	0a1b      	lsrs	r3, r3, #8
200011d8:	b2da      	uxtb	r2, r3
200011da:	687b      	ldr	r3, [r7, #4]
200011dc:	741a      	strb	r2, [r3, #16]
  RxMessage->Data[6] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDHR >> 16);
200011de:	183b      	adds	r3, r7, r0
200011e0:	781a      	ldrb	r2, [r3, #0]
200011e2:	68f9      	ldr	r1, [r7, #12]
200011e4:	23de      	movs	r3, #222	; 0xde
200011e6:	005b      	lsls	r3, r3, #1
200011e8:	0112      	lsls	r2, r2, #4
200011ea:	188a      	adds	r2, r1, r2
200011ec:	18d3      	adds	r3, r2, r3
200011ee:	681b      	ldr	r3, [r3, #0]
200011f0:	0c1b      	lsrs	r3, r3, #16
200011f2:	b2da      	uxtb	r2, r3
200011f4:	687b      	ldr	r3, [r7, #4]
200011f6:	745a      	strb	r2, [r3, #17]
  RxMessage->Data[7] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDHR >> 24);
200011f8:	183b      	adds	r3, r7, r0
200011fa:	781a      	ldrb	r2, [r3, #0]
200011fc:	68f9      	ldr	r1, [r7, #12]
200011fe:	23de      	movs	r3, #222	; 0xde
20001200:	005b      	lsls	r3, r3, #1
20001202:	0112      	lsls	r2, r2, #4
20001204:	188a      	adds	r2, r1, r2
20001206:	18d3      	adds	r3, r2, r3
20001208:	681b      	ldr	r3, [r3, #0]
2000120a:	0e1b      	lsrs	r3, r3, #24
2000120c:	b2da      	uxtb	r2, r3
2000120e:	687b      	ldr	r3, [r7, #4]
20001210:	749a      	strb	r2, [r3, #18]
  /* Release the FIFO */
  /* Release FIFO0 */
  if (FIFONumber == CAN_FIFO0)
20001212:	183b      	adds	r3, r7, r0
20001214:	781b      	ldrb	r3, [r3, #0]
20001216:	2b00      	cmp	r3, #0
20001218:	d106      	bne.n	20001228 <CAN_Receive+0x196>
  {
    CANx->RF0R |= CAN_RF0R_RFOM0;
2000121a:	68fb      	ldr	r3, [r7, #12]
2000121c:	68db      	ldr	r3, [r3, #12]
2000121e:	2220      	movs	r2, #32
20001220:	431a      	orrs	r2, r3
20001222:	68fb      	ldr	r3, [r7, #12]
20001224:	60da      	str	r2, [r3, #12]
  /* Release FIFO1 */
  else /* FIFONumber == CAN_FIFO1 */
  {
    CANx->RF1R |= CAN_RF1R_RFOM1;
  }
}
20001226:	e005      	b.n	20001234 <CAN_Receive+0x1a2>
    CANx->RF1R |= CAN_RF1R_RFOM1;
20001228:	68fb      	ldr	r3, [r7, #12]
2000122a:	691b      	ldr	r3, [r3, #16]
2000122c:	2220      	movs	r2, #32
2000122e:	431a      	orrs	r2, r3
20001230:	68fb      	ldr	r3, [r7, #12]
20001232:	611a      	str	r2, [r3, #16]
}
20001234:	46c0      	nop			; (mov r8, r8)
20001236:	46bd      	mov	sp, r7
20001238:	b004      	add	sp, #16
2000123a:	bd80      	pop	{r7, pc}

2000123c <CAN_FIFORelease>:
  * @param  FIFONumber: FIFO to release, CAN_FIFO0 or CAN_FIFO1.
  * @note   CAN3 peripheral is available only for STM32F413_423xx devices
  * @retval None
  */
void CAN_FIFORelease(CAN_TypeDef* CANx, uint8_t FIFONumber)
{
2000123c:	b580      	push	{r7, lr}
2000123e:	b082      	sub	sp, #8
20001240:	af00      	add	r7, sp, #0
20001242:	6078      	str	r0, [r7, #4]
20001244:	000a      	movs	r2, r1
20001246:	1cfb      	adds	r3, r7, #3
20001248:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_FIFO(FIFONumber));
  /* Release FIFO0 */
  if (FIFONumber == CAN_FIFO0)
2000124a:	1cfb      	adds	r3, r7, #3
2000124c:	781b      	ldrb	r3, [r3, #0]
2000124e:	2b00      	cmp	r3, #0
20001250:	d106      	bne.n	20001260 <CAN_FIFORelease+0x24>
  {
    CANx->RF0R |= CAN_RF0R_RFOM0;
20001252:	687b      	ldr	r3, [r7, #4]
20001254:	68db      	ldr	r3, [r3, #12]
20001256:	2220      	movs	r2, #32
20001258:	431a      	orrs	r2, r3
2000125a:	687b      	ldr	r3, [r7, #4]
2000125c:	60da      	str	r2, [r3, #12]
  /* Release FIFO1 */
  else /* FIFONumber == CAN_FIFO1 */
  {
    CANx->RF1R |= CAN_RF1R_RFOM1;
  }
}
2000125e:	e005      	b.n	2000126c <CAN_FIFORelease+0x30>
    CANx->RF1R |= CAN_RF1R_RFOM1;
20001260:	687b      	ldr	r3, [r7, #4]
20001262:	691b      	ldr	r3, [r3, #16]
20001264:	2220      	movs	r2, #32
20001266:	431a      	orrs	r2, r3
20001268:	687b      	ldr	r3, [r7, #4]
2000126a:	611a      	str	r2, [r3, #16]
}
2000126c:	46c0      	nop			; (mov r8, r8)
2000126e:	46bd      	mov	sp, r7
20001270:	b002      	add	sp, #8
20001272:	bd80      	pop	{r7, pc}

20001274 <CAN_MessagePending>:
  * @param  FIFONumber: Receive FIFO number, CAN_FIFO0 or CAN_FIFO1.
  * @note   CAN3 peripheral is available only for STM32F413_423xx devices
  * @retval NbMessage : which is the number of pending message.
  */
uint8_t CAN_MessagePending(CAN_TypeDef* CANx, uint8_t FIFONumber)
{
20001274:	b580      	push	{r7, lr}
20001276:	b084      	sub	sp, #16
20001278:	af00      	add	r7, sp, #0
2000127a:	6078      	str	r0, [r7, #4]
2000127c:	000a      	movs	r2, r1
2000127e:	1cfb      	adds	r3, r7, #3
20001280:	701a      	strb	r2, [r3, #0]
  uint8_t message_pending=0;
20001282:	230f      	movs	r3, #15
20001284:	18fb      	adds	r3, r7, r3
20001286:	2200      	movs	r2, #0
20001288:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_FIFO(FIFONumber));
  if (FIFONumber == CAN_FIFO0)
2000128a:	1cfb      	adds	r3, r7, #3
2000128c:	781b      	ldrb	r3, [r3, #0]
2000128e:	2b00      	cmp	r3, #0
20001290:	d108      	bne.n	200012a4 <CAN_MessagePending+0x30>
  {
    message_pending = (uint8_t)(CANx->RF0R&(uint32_t)0x03);
20001292:	687b      	ldr	r3, [r7, #4]
20001294:	68db      	ldr	r3, [r3, #12]
20001296:	b2da      	uxtb	r2, r3
20001298:	230f      	movs	r3, #15
2000129a:	18fb      	adds	r3, r7, r3
2000129c:	2103      	movs	r1, #3
2000129e:	400a      	ands	r2, r1
200012a0:	701a      	strb	r2, [r3, #0]
200012a2:	e010      	b.n	200012c6 <CAN_MessagePending+0x52>
  }
  else if (FIFONumber == CAN_FIFO1)
200012a4:	1cfb      	adds	r3, r7, #3
200012a6:	781b      	ldrb	r3, [r3, #0]
200012a8:	2b01      	cmp	r3, #1
200012aa:	d108      	bne.n	200012be <CAN_MessagePending+0x4a>
  {
    message_pending = (uint8_t)(CANx->RF1R&(uint32_t)0x03);
200012ac:	687b      	ldr	r3, [r7, #4]
200012ae:	691b      	ldr	r3, [r3, #16]
200012b0:	b2da      	uxtb	r2, r3
200012b2:	230f      	movs	r3, #15
200012b4:	18fb      	adds	r3, r7, r3
200012b6:	2103      	movs	r1, #3
200012b8:	400a      	ands	r2, r1
200012ba:	701a      	strb	r2, [r3, #0]
200012bc:	e003      	b.n	200012c6 <CAN_MessagePending+0x52>
  }
  else
  {
    message_pending = 0;
200012be:	230f      	movs	r3, #15
200012c0:	18fb      	adds	r3, r7, r3
200012c2:	2200      	movs	r2, #0
200012c4:	701a      	strb	r2, [r3, #0]
  }
  return message_pending;
200012c6:	230f      	movs	r3, #15
200012c8:	18fb      	adds	r3, r7, r3
200012ca:	781b      	ldrb	r3, [r3, #0]
}
200012cc:	0018      	movs	r0, r3
200012ce:	46bd      	mov	sp, r7
200012d0:	b004      	add	sp, #16
200012d2:	bd80      	pop	{r7, pc}

200012d4 <CAN_OperatingModeRequest>:
  * @retval status of the requested mode which can be 
  *         - CAN_ModeStatus_Failed:  CAN failed entering the specific mode 
  *         - CAN_ModeStatus_Success: CAN Succeed entering the specific mode 
  */
uint8_t CAN_OperatingModeRequest(CAN_TypeDef* CANx, uint8_t CAN_OperatingMode)
{
200012d4:	b580      	push	{r7, lr}
200012d6:	b084      	sub	sp, #16
200012d8:	af00      	add	r7, sp, #0
200012da:	6078      	str	r0, [r7, #4]
200012dc:	000a      	movs	r2, r1
200012de:	1cfb      	adds	r3, r7, #3
200012e0:	701a      	strb	r2, [r3, #0]
  uint8_t status = CAN_ModeStatus_Failed;
200012e2:	230f      	movs	r3, #15
200012e4:	18fb      	adds	r3, r7, r3
200012e6:	2200      	movs	r2, #0
200012e8:	701a      	strb	r2, [r3, #0]
  
  /* Timeout for INAK or also for SLAK bits*/
  uint32_t timeout = INAK_TIMEOUT; 
200012ea:	4b42      	ldr	r3, [pc, #264]	; (200013f4 <CAN_OperatingModeRequest+0x120>)
200012ec:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_OPERATING_MODE(CAN_OperatingMode));

  if (CAN_OperatingMode == CAN_OperatingMode_Initialization)
200012ee:	1cfb      	adds	r3, r7, #3
200012f0:	781b      	ldrb	r3, [r3, #0]
200012f2:	2b00      	cmp	r3, #0
200012f4:	d124      	bne.n	20001340 <CAN_OperatingModeRequest+0x6c>
  {
    /* Request initialisation */
    CANx->MCR = (uint32_t)((CANx->MCR & (uint32_t)(~(uint32_t)CAN_MCR_SLEEP)) | CAN_MCR_INRQ);
200012f6:	687b      	ldr	r3, [r7, #4]
200012f8:	681b      	ldr	r3, [r3, #0]
200012fa:	2203      	movs	r2, #3
200012fc:	4393      	bics	r3, r2
200012fe:	2201      	movs	r2, #1
20001300:	431a      	orrs	r2, r3
20001302:	687b      	ldr	r3, [r7, #4]
20001304:	601a      	str	r2, [r3, #0]

    /* Wait the acknowledge */
    while (((CANx->MSR & CAN_MODE_MASK) != CAN_MSR_INAK) && (timeout != 0))
20001306:	e002      	b.n	2000130e <CAN_OperatingModeRequest+0x3a>
    {
      timeout--;
20001308:	68bb      	ldr	r3, [r7, #8]
2000130a:	3b01      	subs	r3, #1
2000130c:	60bb      	str	r3, [r7, #8]
    while (((CANx->MSR & CAN_MODE_MASK) != CAN_MSR_INAK) && (timeout != 0))
2000130e:	687b      	ldr	r3, [r7, #4]
20001310:	685b      	ldr	r3, [r3, #4]
20001312:	2203      	movs	r2, #3
20001314:	4013      	ands	r3, r2
20001316:	2b01      	cmp	r3, #1
20001318:	d002      	beq.n	20001320 <CAN_OperatingModeRequest+0x4c>
2000131a:	68bb      	ldr	r3, [r7, #8]
2000131c:	2b00      	cmp	r3, #0
2000131e:	d1f3      	bne.n	20001308 <CAN_OperatingModeRequest+0x34>
    }
    if ((CANx->MSR & CAN_MODE_MASK) != CAN_MSR_INAK)
20001320:	687b      	ldr	r3, [r7, #4]
20001322:	685b      	ldr	r3, [r3, #4]
20001324:	2203      	movs	r2, #3
20001326:	4013      	ands	r3, r2
20001328:	2b01      	cmp	r3, #1
2000132a:	d004      	beq.n	20001336 <CAN_OperatingModeRequest+0x62>
    {
      status = CAN_ModeStatus_Failed;
2000132c:	230f      	movs	r3, #15
2000132e:	18fb      	adds	r3, r7, r3
20001330:	2200      	movs	r2, #0
20001332:	701a      	strb	r2, [r3, #0]
20001334:	e057      	b.n	200013e6 <CAN_OperatingModeRequest+0x112>
    }
    else
    {
      status = CAN_ModeStatus_Success;
20001336:	230f      	movs	r3, #15
20001338:	18fb      	adds	r3, r7, r3
2000133a:	2201      	movs	r2, #1
2000133c:	701a      	strb	r2, [r3, #0]
2000133e:	e052      	b.n	200013e6 <CAN_OperatingModeRequest+0x112>
    }
  }
  else  if (CAN_OperatingMode == CAN_OperatingMode_Normal)
20001340:	1cfb      	adds	r3, r7, #3
20001342:	781b      	ldrb	r3, [r3, #0]
20001344:	2b01      	cmp	r3, #1
20001346:	d121      	bne.n	2000138c <CAN_OperatingModeRequest+0xb8>
  {
    /* Request leave initialisation and sleep mode  and enter Normal mode */
    CANx->MCR &= (uint32_t)(~(CAN_MCR_SLEEP|CAN_MCR_INRQ));
20001348:	687b      	ldr	r3, [r7, #4]
2000134a:	681b      	ldr	r3, [r3, #0]
2000134c:	2203      	movs	r2, #3
2000134e:	4393      	bics	r3, r2
20001350:	001a      	movs	r2, r3
20001352:	687b      	ldr	r3, [r7, #4]
20001354:	601a      	str	r2, [r3, #0]

    /* Wait the acknowledge */
    while (((CANx->MSR & CAN_MODE_MASK) != 0) && (timeout!=0))
20001356:	e002      	b.n	2000135e <CAN_OperatingModeRequest+0x8a>
    {
      timeout--;
20001358:	68bb      	ldr	r3, [r7, #8]
2000135a:	3b01      	subs	r3, #1
2000135c:	60bb      	str	r3, [r7, #8]
    while (((CANx->MSR & CAN_MODE_MASK) != 0) && (timeout!=0))
2000135e:	687b      	ldr	r3, [r7, #4]
20001360:	685b      	ldr	r3, [r3, #4]
20001362:	2203      	movs	r2, #3
20001364:	4013      	ands	r3, r2
20001366:	d002      	beq.n	2000136e <CAN_OperatingModeRequest+0x9a>
20001368:	68bb      	ldr	r3, [r7, #8]
2000136a:	2b00      	cmp	r3, #0
2000136c:	d1f4      	bne.n	20001358 <CAN_OperatingModeRequest+0x84>
    }
    if ((CANx->MSR & CAN_MODE_MASK) != 0)
2000136e:	687b      	ldr	r3, [r7, #4]
20001370:	685b      	ldr	r3, [r3, #4]
20001372:	2203      	movs	r2, #3
20001374:	4013      	ands	r3, r2
20001376:	d004      	beq.n	20001382 <CAN_OperatingModeRequest+0xae>
    {
      status = CAN_ModeStatus_Failed;
20001378:	230f      	movs	r3, #15
2000137a:	18fb      	adds	r3, r7, r3
2000137c:	2200      	movs	r2, #0
2000137e:	701a      	strb	r2, [r3, #0]
20001380:	e031      	b.n	200013e6 <CAN_OperatingModeRequest+0x112>
    }
    else
    {
      status = CAN_ModeStatus_Success;
20001382:	230f      	movs	r3, #15
20001384:	18fb      	adds	r3, r7, r3
20001386:	2201      	movs	r2, #1
20001388:	701a      	strb	r2, [r3, #0]
2000138a:	e02c      	b.n	200013e6 <CAN_OperatingModeRequest+0x112>
    }
  }
  else  if (CAN_OperatingMode == CAN_OperatingMode_Sleep)
2000138c:	1cfb      	adds	r3, r7, #3
2000138e:	781b      	ldrb	r3, [r3, #0]
20001390:	2b02      	cmp	r3, #2
20001392:	d124      	bne.n	200013de <CAN_OperatingModeRequest+0x10a>
  {
    /* Request Sleep mode */
    CANx->MCR = (uint32_t)((CANx->MCR & (uint32_t)(~(uint32_t)CAN_MCR_INRQ)) | CAN_MCR_SLEEP);
20001394:	687b      	ldr	r3, [r7, #4]
20001396:	681b      	ldr	r3, [r3, #0]
20001398:	2203      	movs	r2, #3
2000139a:	4393      	bics	r3, r2
2000139c:	2202      	movs	r2, #2
2000139e:	431a      	orrs	r2, r3
200013a0:	687b      	ldr	r3, [r7, #4]
200013a2:	601a      	str	r2, [r3, #0]

    /* Wait the acknowledge */
    while (((CANx->MSR & CAN_MODE_MASK) != CAN_MSR_SLAK) && (timeout!=0))
200013a4:	e002      	b.n	200013ac <CAN_OperatingModeRequest+0xd8>
    {
      timeout--;
200013a6:	68bb      	ldr	r3, [r7, #8]
200013a8:	3b01      	subs	r3, #1
200013aa:	60bb      	str	r3, [r7, #8]
    while (((CANx->MSR & CAN_MODE_MASK) != CAN_MSR_SLAK) && (timeout!=0))
200013ac:	687b      	ldr	r3, [r7, #4]
200013ae:	685b      	ldr	r3, [r3, #4]
200013b0:	2203      	movs	r2, #3
200013b2:	4013      	ands	r3, r2
200013b4:	2b02      	cmp	r3, #2
200013b6:	d002      	beq.n	200013be <CAN_OperatingModeRequest+0xea>
200013b8:	68bb      	ldr	r3, [r7, #8]
200013ba:	2b00      	cmp	r3, #0
200013bc:	d1f3      	bne.n	200013a6 <CAN_OperatingModeRequest+0xd2>
    }
    if ((CANx->MSR & CAN_MODE_MASK) != CAN_MSR_SLAK)
200013be:	687b      	ldr	r3, [r7, #4]
200013c0:	685b      	ldr	r3, [r3, #4]
200013c2:	2203      	movs	r2, #3
200013c4:	4013      	ands	r3, r2
200013c6:	2b02      	cmp	r3, #2
200013c8:	d004      	beq.n	200013d4 <CAN_OperatingModeRequest+0x100>
    {
      status = CAN_ModeStatus_Failed;
200013ca:	230f      	movs	r3, #15
200013cc:	18fb      	adds	r3, r7, r3
200013ce:	2200      	movs	r2, #0
200013d0:	701a      	strb	r2, [r3, #0]
200013d2:	e008      	b.n	200013e6 <CAN_OperatingModeRequest+0x112>
    }
    else
    {
      status = CAN_ModeStatus_Success;
200013d4:	230f      	movs	r3, #15
200013d6:	18fb      	adds	r3, r7, r3
200013d8:	2201      	movs	r2, #1
200013da:	701a      	strb	r2, [r3, #0]
200013dc:	e003      	b.n	200013e6 <CAN_OperatingModeRequest+0x112>
    }
  }
  else
  {
    status = CAN_ModeStatus_Failed;
200013de:	230f      	movs	r3, #15
200013e0:	18fb      	adds	r3, r7, r3
200013e2:	2200      	movs	r2, #0
200013e4:	701a      	strb	r2, [r3, #0]
  }

  return  (uint8_t) status;
200013e6:	230f      	movs	r3, #15
200013e8:	18fb      	adds	r3, r7, r3
200013ea:	781b      	ldrb	r3, [r3, #0]
}
200013ec:	0018      	movs	r0, r3
200013ee:	46bd      	mov	sp, r7
200013f0:	b004      	add	sp, #16
200013f2:	bd80      	pop	{r7, pc}
200013f4:	0000ffff 	strdeq	pc, [r0], -pc	; <UNPREDICTABLE>

200013f8 <CAN_Sleep>:
  * @param  CANx: where x can be 1,2 or 3 to select the CAN peripheral.
  * @note   CAN3 peripheral is available only for STM32F413_423xx devices
  * @retval CAN_Sleep_Ok if sleep entered, CAN_Sleep_Failed otherwise.
  */
uint8_t CAN_Sleep(CAN_TypeDef* CANx)
{
200013f8:	b580      	push	{r7, lr}
200013fa:	b084      	sub	sp, #16
200013fc:	af00      	add	r7, sp, #0
200013fe:	6078      	str	r0, [r7, #4]
  uint8_t sleepstatus = CAN_Sleep_Failed;
20001400:	230f      	movs	r3, #15
20001402:	18fb      	adds	r3, r7, r3
20001404:	2200      	movs	r2, #0
20001406:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
    
  /* Request Sleep mode */
   CANx->MCR = (((CANx->MCR) & (uint32_t)(~(uint32_t)CAN_MCR_INRQ)) | CAN_MCR_SLEEP);
20001408:	687b      	ldr	r3, [r7, #4]
2000140a:	681b      	ldr	r3, [r3, #0]
2000140c:	2203      	movs	r2, #3
2000140e:	4393      	bics	r3, r2
20001410:	2202      	movs	r2, #2
20001412:	431a      	orrs	r2, r3
20001414:	687b      	ldr	r3, [r7, #4]
20001416:	601a      	str	r2, [r3, #0]
   
  /* Sleep mode status */
  if ((CANx->MSR & (CAN_MSR_SLAK|CAN_MSR_INAK)) == CAN_MSR_SLAK)
20001418:	687b      	ldr	r3, [r7, #4]
2000141a:	685b      	ldr	r3, [r3, #4]
2000141c:	2203      	movs	r2, #3
2000141e:	4013      	ands	r3, r2
20001420:	2b02      	cmp	r3, #2
20001422:	d103      	bne.n	2000142c <CAN_Sleep+0x34>
  {
    /* Sleep mode not entered */
    sleepstatus =  CAN_Sleep_Ok;
20001424:	230f      	movs	r3, #15
20001426:	18fb      	adds	r3, r7, r3
20001428:	2201      	movs	r2, #1
2000142a:	701a      	strb	r2, [r3, #0]
  }
  /* return sleep mode status */
   return (uint8_t)sleepstatus;
2000142c:	230f      	movs	r3, #15
2000142e:	18fb      	adds	r3, r7, r3
20001430:	781b      	ldrb	r3, [r3, #0]
}
20001432:	0018      	movs	r0, r3
20001434:	46bd      	mov	sp, r7
20001436:	b004      	add	sp, #16
20001438:	bd80      	pop	{r7, pc}

2000143a <CAN_WakeUp>:
  * @param  CANx: where x can be 1,2 or 3 to select the CAN peripheral.
  * @note   CAN3 peripheral is available only for STM32F413_423xx devices
  * @retval CAN_WakeUp_Ok if sleep mode left, CAN_WakeUp_Failed otherwise.
  */
uint8_t CAN_WakeUp(CAN_TypeDef* CANx)
{
2000143a:	b580      	push	{r7, lr}
2000143c:	b084      	sub	sp, #16
2000143e:	af00      	add	r7, sp, #0
20001440:	6078      	str	r0, [r7, #4]
  uint32_t wait_slak = SLAK_TIMEOUT;
20001442:	4b15      	ldr	r3, [pc, #84]	; (20001498 <CAN_WakeUp+0x5e>)
20001444:	60fb      	str	r3, [r7, #12]
  uint8_t wakeupstatus = CAN_WakeUp_Failed;
20001446:	230b      	movs	r3, #11
20001448:	18fb      	adds	r3, r7, r3
2000144a:	2200      	movs	r2, #0
2000144c:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
    
  /* Wake up request */
  CANx->MCR &= ~(uint32_t)CAN_MCR_SLEEP;
2000144e:	687b      	ldr	r3, [r7, #4]
20001450:	681b      	ldr	r3, [r3, #0]
20001452:	2202      	movs	r2, #2
20001454:	4393      	bics	r3, r2
20001456:	001a      	movs	r2, r3
20001458:	687b      	ldr	r3, [r7, #4]
2000145a:	601a      	str	r2, [r3, #0]
    
  /* Sleep mode status */
  while(((CANx->MSR & CAN_MSR_SLAK) == CAN_MSR_SLAK)&&(wait_slak!=0x00))
2000145c:	e002      	b.n	20001464 <CAN_WakeUp+0x2a>
  {
   wait_slak--;
2000145e:	68fb      	ldr	r3, [r7, #12]
20001460:	3b01      	subs	r3, #1
20001462:	60fb      	str	r3, [r7, #12]
  while(((CANx->MSR & CAN_MSR_SLAK) == CAN_MSR_SLAK)&&(wait_slak!=0x00))
20001464:	687b      	ldr	r3, [r7, #4]
20001466:	685b      	ldr	r3, [r3, #4]
20001468:	2202      	movs	r2, #2
2000146a:	4013      	ands	r3, r2
2000146c:	2b02      	cmp	r3, #2
2000146e:	d102      	bne.n	20001476 <CAN_WakeUp+0x3c>
20001470:	68fb      	ldr	r3, [r7, #12]
20001472:	2b00      	cmp	r3, #0
20001474:	d1f3      	bne.n	2000145e <CAN_WakeUp+0x24>
  }
  if((CANx->MSR & CAN_MSR_SLAK) != CAN_MSR_SLAK)
20001476:	687b      	ldr	r3, [r7, #4]
20001478:	685b      	ldr	r3, [r3, #4]
2000147a:	2202      	movs	r2, #2
2000147c:	4013      	ands	r3, r2
2000147e:	2b02      	cmp	r3, #2
20001480:	d003      	beq.n	2000148a <CAN_WakeUp+0x50>
  {
   /* wake up done : Sleep mode exited */
    wakeupstatus = CAN_WakeUp_Ok;
20001482:	230b      	movs	r3, #11
20001484:	18fb      	adds	r3, r7, r3
20001486:	2201      	movs	r2, #1
20001488:	701a      	strb	r2, [r3, #0]
  }
  /* return wakeup status */
  return (uint8_t)wakeupstatus;
2000148a:	230b      	movs	r3, #11
2000148c:	18fb      	adds	r3, r7, r3
2000148e:	781b      	ldrb	r3, [r3, #0]
}
20001490:	0018      	movs	r0, r3
20001492:	46bd      	mov	sp, r7
20001494:	b004      	add	sp, #16
20001496:	bd80      	pop	{r7, pc}
20001498:	0000ffff 	strdeq	pc, [r0], -pc	; <UNPREDICTABLE>

2000149c <CAN_GetLastErrorCode>:
  *          - CAN_ERRORCODE_BitDominantErr: Bit Dominant Error
  *          - CAN_ERRORCODE_CRCErr: CRC Error
  *          - CAN_ERRORCODE_SoftwareSetErr: Software Set Error  
  */
uint8_t CAN_GetLastErrorCode(CAN_TypeDef* CANx)
{
2000149c:	b580      	push	{r7, lr}
2000149e:	b084      	sub	sp, #16
200014a0:	af00      	add	r7, sp, #0
200014a2:	6078      	str	r0, [r7, #4]
  uint8_t errorcode=0;
200014a4:	210f      	movs	r1, #15
200014a6:	187b      	adds	r3, r7, r1
200014a8:	2200      	movs	r2, #0
200014aa:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  
  /* Get the error code*/
  errorcode = (((uint8_t)CANx->ESR) & (uint8_t)CAN_ESR_LEC);
200014ac:	687b      	ldr	r3, [r7, #4]
200014ae:	699b      	ldr	r3, [r3, #24]
200014b0:	b2da      	uxtb	r2, r3
200014b2:	0008      	movs	r0, r1
200014b4:	187b      	adds	r3, r7, r1
200014b6:	2170      	movs	r1, #112	; 0x70
200014b8:	400a      	ands	r2, r1
200014ba:	701a      	strb	r2, [r3, #0]
  
  /* Return the error code*/
  return errorcode;
200014bc:	0001      	movs	r1, r0
200014be:	187b      	adds	r3, r7, r1
200014c0:	781b      	ldrb	r3, [r3, #0]
}
200014c2:	0018      	movs	r0, r3
200014c4:	46bd      	mov	sp, r7
200014c6:	b004      	add	sp, #16
200014c8:	bd80      	pop	{r7, pc}

200014ca <CAN_GetReceiveErrorCounter>:
  * @param  CANx: where x can be 1,2 or 3 to select the CAN peripheral.
  * @note   CAN3 peripheral is available only for STM32F413_423xx devices
  * @retval CAN Receive Error Counter. 
  */
uint8_t CAN_GetReceiveErrorCounter(CAN_TypeDef* CANx)
{
200014ca:	b580      	push	{r7, lr}
200014cc:	b084      	sub	sp, #16
200014ce:	af00      	add	r7, sp, #0
200014d0:	6078      	str	r0, [r7, #4]
  uint8_t counter=0;
200014d2:	210f      	movs	r1, #15
200014d4:	187b      	adds	r3, r7, r1
200014d6:	2200      	movs	r2, #0
200014d8:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  
  /* Get the Receive Error Counter*/
  counter = (uint8_t)((CANx->ESR & CAN_ESR_REC)>> 24);
200014da:	687b      	ldr	r3, [r7, #4]
200014dc:	699b      	ldr	r3, [r3, #24]
200014de:	0e1a      	lsrs	r2, r3, #24
200014e0:	187b      	adds	r3, r7, r1
200014e2:	701a      	strb	r2, [r3, #0]
  
  /* Return the Receive Error Counter*/
  return counter;
200014e4:	187b      	adds	r3, r7, r1
200014e6:	781b      	ldrb	r3, [r3, #0]
}
200014e8:	0018      	movs	r0, r3
200014ea:	46bd      	mov	sp, r7
200014ec:	b004      	add	sp, #16
200014ee:	bd80      	pop	{r7, pc}

200014f0 <CAN_GetLSBTransmitErrorCounter>:
  * @param  CANx: where x can be 1,2 or 3 to select the CAN peripheral.
  * @note   CAN3 peripheral is available only for STM32F413_423xx devices
  * @retval LSB of the 9-bit CAN Transmit Error Counter. 
  */
uint8_t CAN_GetLSBTransmitErrorCounter(CAN_TypeDef* CANx)
{
200014f0:	b580      	push	{r7, lr}
200014f2:	b084      	sub	sp, #16
200014f4:	af00      	add	r7, sp, #0
200014f6:	6078      	str	r0, [r7, #4]
  uint8_t counter=0;
200014f8:	210f      	movs	r1, #15
200014fa:	187b      	adds	r3, r7, r1
200014fc:	2200      	movs	r2, #0
200014fe:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  
  /* Get the LSB of the 9-bit CANx Transmit Error Counter(TEC) */
  counter = (uint8_t)((CANx->ESR & CAN_ESR_TEC)>> 16);
20001500:	687b      	ldr	r3, [r7, #4]
20001502:	699b      	ldr	r3, [r3, #24]
20001504:	0c1a      	lsrs	r2, r3, #16
20001506:	187b      	adds	r3, r7, r1
20001508:	701a      	strb	r2, [r3, #0]
  
  /* Return the LSB of the 9-bit CANx Transmit Error Counter(TEC) */
  return counter;
2000150a:	187b      	adds	r3, r7, r1
2000150c:	781b      	ldrb	r3, [r3, #0]
}
2000150e:	0018      	movs	r0, r3
20001510:	46bd      	mov	sp, r7
20001512:	b004      	add	sp, #16
20001514:	bd80      	pop	{r7, pc}

20001516 <CAN_ITConfig>:
  * @note   CAN3 peripheral is available only for STM32F413_423xx devices
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void CAN_ITConfig(CAN_TypeDef* CANx, uint32_t CAN_IT, FunctionalState NewState)
{
20001516:	b580      	push	{r7, lr}
20001518:	b084      	sub	sp, #16
2000151a:	af00      	add	r7, sp, #0
2000151c:	60f8      	str	r0, [r7, #12]
2000151e:	60b9      	str	r1, [r7, #8]
20001520:	1dfb      	adds	r3, r7, #7
20001522:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_IT(CAN_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
20001524:	1dfb      	adds	r3, r7, #7
20001526:	781b      	ldrb	r3, [r3, #0]
20001528:	2b00      	cmp	r3, #0
2000152a:	d006      	beq.n	2000153a <CAN_ITConfig+0x24>
  {
    /* Enable the selected CANx interrupt */
    CANx->IER |= CAN_IT;
2000152c:	68fb      	ldr	r3, [r7, #12]
2000152e:	695a      	ldr	r2, [r3, #20]
20001530:	68bb      	ldr	r3, [r7, #8]
20001532:	431a      	orrs	r2, r3
20001534:	68fb      	ldr	r3, [r7, #12]
20001536:	615a      	str	r2, [r3, #20]
  else
  {
    /* Disable the selected CANx interrupt */
    CANx->IER &= ~CAN_IT;
  }
}
20001538:	e006      	b.n	20001548 <CAN_ITConfig+0x32>
    CANx->IER &= ~CAN_IT;
2000153a:	68fb      	ldr	r3, [r7, #12]
2000153c:	695b      	ldr	r3, [r3, #20]
2000153e:	68ba      	ldr	r2, [r7, #8]
20001540:	43d2      	mvns	r2, r2
20001542:	401a      	ands	r2, r3
20001544:	68fb      	ldr	r3, [r7, #12]
20001546:	615a      	str	r2, [r3, #20]
}
20001548:	46c0      	nop			; (mov r8, r8)
2000154a:	46bd      	mov	sp, r7
2000154c:	b004      	add	sp, #16
2000154e:	bd80      	pop	{r7, pc}

20001550 <CAN_GetFlagStatus>:
  *            @arg CAN_FLAG_LEC: Last error code Flag
  * @note   CAN3 peripheral is available only for STM32F413_423xx devices
  * @retval The new state of CAN_FLAG (SET or RESET).
  */
FlagStatus CAN_GetFlagStatus(CAN_TypeDef* CANx, uint32_t CAN_FLAG)
{
20001550:	b580      	push	{r7, lr}
20001552:	b084      	sub	sp, #16
20001554:	af00      	add	r7, sp, #0
20001556:	6078      	str	r0, [r7, #4]
20001558:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
2000155a:	230f      	movs	r3, #15
2000155c:	18fb      	adds	r3, r7, r3
2000155e:	2200      	movs	r2, #0
20001560:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_GET_FLAG(CAN_FLAG));
  

  if((CAN_FLAG & CAN_FLAGS_ESR) != (uint32_t)RESET)
20001562:	683a      	ldr	r2, [r7, #0]
20001564:	23f0      	movs	r3, #240	; 0xf0
20001566:	041b      	lsls	r3, r3, #16
20001568:	4013      	ands	r3, r2
2000156a:	d010      	beq.n	2000158e <CAN_GetFlagStatus+0x3e>
  { 
    /* Check the status of the specified CAN flag */
    if ((CANx->ESR & (CAN_FLAG & 0x000FFFFF)) != (uint32_t)RESET)
2000156c:	687b      	ldr	r3, [r7, #4]
2000156e:	699b      	ldr	r3, [r3, #24]
20001570:	683a      	ldr	r2, [r7, #0]
20001572:	4013      	ands	r3, r2
20001574:	031b      	lsls	r3, r3, #12
20001576:	0b1b      	lsrs	r3, r3, #12
20001578:	d004      	beq.n	20001584 <CAN_GetFlagStatus+0x34>
    { 
      /* CAN_FLAG is set */
      bitstatus = SET;
2000157a:	230f      	movs	r3, #15
2000157c:	18fb      	adds	r3, r7, r3
2000157e:	2201      	movs	r2, #1
20001580:	701a      	strb	r2, [r3, #0]
20001582:	e056      	b.n	20001632 <CAN_GetFlagStatus+0xe2>
    }
    else
    { 
      /* CAN_FLAG is reset */
      bitstatus = RESET;
20001584:	230f      	movs	r3, #15
20001586:	18fb      	adds	r3, r7, r3
20001588:	2200      	movs	r2, #0
2000158a:	701a      	strb	r2, [r3, #0]
2000158c:	e051      	b.n	20001632 <CAN_GetFlagStatus+0xe2>
    }
  }
  else if((CAN_FLAG & CAN_FLAGS_MSR) != (uint32_t)RESET)
2000158e:	683a      	ldr	r2, [r7, #0]
20001590:	2380      	movs	r3, #128	; 0x80
20001592:	045b      	lsls	r3, r3, #17
20001594:	4013      	ands	r3, r2
20001596:	d010      	beq.n	200015ba <CAN_GetFlagStatus+0x6a>
  { 
    /* Check the status of the specified CAN flag */
    if ((CANx->MSR & (CAN_FLAG & 0x000FFFFF)) != (uint32_t)RESET)
20001598:	687b      	ldr	r3, [r7, #4]
2000159a:	685b      	ldr	r3, [r3, #4]
2000159c:	683a      	ldr	r2, [r7, #0]
2000159e:	4013      	ands	r3, r2
200015a0:	031b      	lsls	r3, r3, #12
200015a2:	0b1b      	lsrs	r3, r3, #12
200015a4:	d004      	beq.n	200015b0 <CAN_GetFlagStatus+0x60>
    { 
      /* CAN_FLAG is set */
      bitstatus = SET;
200015a6:	230f      	movs	r3, #15
200015a8:	18fb      	adds	r3, r7, r3
200015aa:	2201      	movs	r2, #1
200015ac:	701a      	strb	r2, [r3, #0]
200015ae:	e040      	b.n	20001632 <CAN_GetFlagStatus+0xe2>
    }
    else
    { 
      /* CAN_FLAG is reset */
      bitstatus = RESET;
200015b0:	230f      	movs	r3, #15
200015b2:	18fb      	adds	r3, r7, r3
200015b4:	2200      	movs	r2, #0
200015b6:	701a      	strb	r2, [r3, #0]
200015b8:	e03b      	b.n	20001632 <CAN_GetFlagStatus+0xe2>
    }
  }
  else if((CAN_FLAG & CAN_FLAGS_TSR) != (uint32_t)RESET)
200015ba:	683a      	ldr	r2, [r7, #0]
200015bc:	2380      	movs	r3, #128	; 0x80
200015be:	051b      	lsls	r3, r3, #20
200015c0:	4013      	ands	r3, r2
200015c2:	d010      	beq.n	200015e6 <CAN_GetFlagStatus+0x96>
  { 
    /* Check the status of the specified CAN flag */
    if ((CANx->TSR & (CAN_FLAG & 0x000FFFFF)) != (uint32_t)RESET)
200015c4:	687b      	ldr	r3, [r7, #4]
200015c6:	689b      	ldr	r3, [r3, #8]
200015c8:	683a      	ldr	r2, [r7, #0]
200015ca:	4013      	ands	r3, r2
200015cc:	031b      	lsls	r3, r3, #12
200015ce:	0b1b      	lsrs	r3, r3, #12
200015d0:	d004      	beq.n	200015dc <CAN_GetFlagStatus+0x8c>
    { 
      /* CAN_FLAG is set */
      bitstatus = SET;
200015d2:	230f      	movs	r3, #15
200015d4:	18fb      	adds	r3, r7, r3
200015d6:	2201      	movs	r2, #1
200015d8:	701a      	strb	r2, [r3, #0]
200015da:	e02a      	b.n	20001632 <CAN_GetFlagStatus+0xe2>
    }
    else
    { 
      /* CAN_FLAG is reset */
      bitstatus = RESET;
200015dc:	230f      	movs	r3, #15
200015de:	18fb      	adds	r3, r7, r3
200015e0:	2200      	movs	r2, #0
200015e2:	701a      	strb	r2, [r3, #0]
200015e4:	e025      	b.n	20001632 <CAN_GetFlagStatus+0xe2>
    }
  }
  else if((CAN_FLAG & CAN_FLAGS_RF0R) != (uint32_t)RESET)
200015e6:	683a      	ldr	r2, [r7, #0]
200015e8:	2380      	movs	r3, #128	; 0x80
200015ea:	049b      	lsls	r3, r3, #18
200015ec:	4013      	ands	r3, r2
200015ee:	d010      	beq.n	20001612 <CAN_GetFlagStatus+0xc2>
  { 
    /* Check the status of the specified CAN flag */
    if ((CANx->RF0R & (CAN_FLAG & 0x000FFFFF)) != (uint32_t)RESET)
200015f0:	687b      	ldr	r3, [r7, #4]
200015f2:	68db      	ldr	r3, [r3, #12]
200015f4:	683a      	ldr	r2, [r7, #0]
200015f6:	4013      	ands	r3, r2
200015f8:	031b      	lsls	r3, r3, #12
200015fa:	0b1b      	lsrs	r3, r3, #12
200015fc:	d004      	beq.n	20001608 <CAN_GetFlagStatus+0xb8>
    { 
      /* CAN_FLAG is set */
      bitstatus = SET;
200015fe:	230f      	movs	r3, #15
20001600:	18fb      	adds	r3, r7, r3
20001602:	2201      	movs	r2, #1
20001604:	701a      	strb	r2, [r3, #0]
20001606:	e014      	b.n	20001632 <CAN_GetFlagStatus+0xe2>
    }
    else
    { 
      /* CAN_FLAG is reset */
      bitstatus = RESET;
20001608:	230f      	movs	r3, #15
2000160a:	18fb      	adds	r3, r7, r3
2000160c:	2200      	movs	r2, #0
2000160e:	701a      	strb	r2, [r3, #0]
20001610:	e00f      	b.n	20001632 <CAN_GetFlagStatus+0xe2>
    }
  }
  else /* If(CAN_FLAG & CAN_FLAGS_RF1R != (uint32_t)RESET) */
  { 
    /* Check the status of the specified CAN flag */
    if ((uint32_t)(CANx->RF1R & (CAN_FLAG & 0x000FFFFF)) != (uint32_t)RESET)
20001612:	687b      	ldr	r3, [r7, #4]
20001614:	691b      	ldr	r3, [r3, #16]
20001616:	683a      	ldr	r2, [r7, #0]
20001618:	4013      	ands	r3, r2
2000161a:	031b      	lsls	r3, r3, #12
2000161c:	0b1b      	lsrs	r3, r3, #12
2000161e:	d004      	beq.n	2000162a <CAN_GetFlagStatus+0xda>
    { 
      /* CAN_FLAG is set */
      bitstatus = SET;
20001620:	230f      	movs	r3, #15
20001622:	18fb      	adds	r3, r7, r3
20001624:	2201      	movs	r2, #1
20001626:	701a      	strb	r2, [r3, #0]
20001628:	e003      	b.n	20001632 <CAN_GetFlagStatus+0xe2>
    }
    else
    { 
      /* CAN_FLAG is reset */
      bitstatus = RESET;
2000162a:	230f      	movs	r3, #15
2000162c:	18fb      	adds	r3, r7, r3
2000162e:	2200      	movs	r2, #0
20001630:	701a      	strb	r2, [r3, #0]
    }
  }
  /* Return the CAN_FLAG status */
  return  bitstatus;
20001632:	230f      	movs	r3, #15
20001634:	18fb      	adds	r3, r7, r3
20001636:	781b      	ldrb	r3, [r3, #0]
}
20001638:	0018      	movs	r0, r3
2000163a:	46bd      	mov	sp, r7
2000163c:	b004      	add	sp, #16
2000163e:	bd80      	pop	{r7, pc}

20001640 <CAN_ClearFlag>:
  *            @arg CAN_FLAG_LEC: Last error code Flag
  * @note   CAN3 peripheral is available only for STM32F413_423xx devices
  * @retval None
  */
void CAN_ClearFlag(CAN_TypeDef* CANx, uint32_t CAN_FLAG)
{
20001640:	b580      	push	{r7, lr}
20001642:	b084      	sub	sp, #16
20001644:	af00      	add	r7, sp, #0
20001646:	6078      	str	r0, [r7, #4]
20001648:	6039      	str	r1, [r7, #0]
  uint32_t flagtmp=0;
2000164a:	2300      	movs	r3, #0
2000164c:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_CLEAR_FLAG(CAN_FLAG));
  
  if (CAN_FLAG == CAN_FLAG_LEC) /* ESR register */
2000164e:	683b      	ldr	r3, [r7, #0]
20001650:	4a16      	ldr	r2, [pc, #88]	; (200016ac <CAN_ClearFlag+0x6c>)
20001652:	4293      	cmp	r3, r2
20001654:	d103      	bne.n	2000165e <CAN_ClearFlag+0x1e>
  {
    /* Clear the selected CAN flags */
    CANx->ESR = (uint32_t)RESET;
20001656:	687b      	ldr	r3, [r7, #4]
20001658:	2200      	movs	r2, #0
2000165a:	619a      	str	r2, [r3, #24]
    {
      /* Operating mode Flags */
      CANx->MSR = (uint32_t)(flagtmp);
    }
  }
}
2000165c:	e021      	b.n	200016a2 <CAN_ClearFlag+0x62>
    flagtmp = CAN_FLAG & 0x000FFFFF;
2000165e:	683b      	ldr	r3, [r7, #0]
20001660:	031b      	lsls	r3, r3, #12
20001662:	0b1b      	lsrs	r3, r3, #12
20001664:	60fb      	str	r3, [r7, #12]
    if ((CAN_FLAG & CAN_FLAGS_RF0R)!=(uint32_t)RESET)
20001666:	683a      	ldr	r2, [r7, #0]
20001668:	2380      	movs	r3, #128	; 0x80
2000166a:	049b      	lsls	r3, r3, #18
2000166c:	4013      	ands	r3, r2
2000166e:	d003      	beq.n	20001678 <CAN_ClearFlag+0x38>
      CANx->RF0R = (uint32_t)(flagtmp);
20001670:	687b      	ldr	r3, [r7, #4]
20001672:	68fa      	ldr	r2, [r7, #12]
20001674:	60da      	str	r2, [r3, #12]
}
20001676:	e014      	b.n	200016a2 <CAN_ClearFlag+0x62>
    else if ((CAN_FLAG & CAN_FLAGS_RF1R)!=(uint32_t)RESET)
20001678:	683a      	ldr	r2, [r7, #0]
2000167a:	2380      	movs	r3, #128	; 0x80
2000167c:	04db      	lsls	r3, r3, #19
2000167e:	4013      	ands	r3, r2
20001680:	d003      	beq.n	2000168a <CAN_ClearFlag+0x4a>
      CANx->RF1R = (uint32_t)(flagtmp);
20001682:	687b      	ldr	r3, [r7, #4]
20001684:	68fa      	ldr	r2, [r7, #12]
20001686:	611a      	str	r2, [r3, #16]
}
20001688:	e00b      	b.n	200016a2 <CAN_ClearFlag+0x62>
    else if ((CAN_FLAG & CAN_FLAGS_TSR)!=(uint32_t)RESET)
2000168a:	683a      	ldr	r2, [r7, #0]
2000168c:	2380      	movs	r3, #128	; 0x80
2000168e:	051b      	lsls	r3, r3, #20
20001690:	4013      	ands	r3, r2
20001692:	d003      	beq.n	2000169c <CAN_ClearFlag+0x5c>
      CANx->TSR = (uint32_t)(flagtmp);
20001694:	687b      	ldr	r3, [r7, #4]
20001696:	68fa      	ldr	r2, [r7, #12]
20001698:	609a      	str	r2, [r3, #8]
}
2000169a:	e002      	b.n	200016a2 <CAN_ClearFlag+0x62>
      CANx->MSR = (uint32_t)(flagtmp);
2000169c:	687b      	ldr	r3, [r7, #4]
2000169e:	68fa      	ldr	r2, [r7, #12]
200016a0:	605a      	str	r2, [r3, #4]
}
200016a2:	46c0      	nop			; (mov r8, r8)
200016a4:	46bd      	mov	sp, r7
200016a6:	b004      	add	sp, #16
200016a8:	bd80      	pop	{r7, pc}
200016aa:	46c0      	nop			; (mov r8, r8)
200016ac:	30f00070 	rscscc	r0, r0, r0, ror r0

200016b0 <CAN_GetITStatus>:
  *            @arg CAN_IT_ERR: Error Interrupt
  * @note   CAN3 peripheral is available only for STM32F413_423xx devices
  * @retval The current state of CAN_IT (SET or RESET).
  */
ITStatus CAN_GetITStatus(CAN_TypeDef* CANx, uint32_t CAN_IT)
{
200016b0:	b590      	push	{r4, r7, lr}
200016b2:	b085      	sub	sp, #20
200016b4:	af00      	add	r7, sp, #0
200016b6:	6078      	str	r0, [r7, #4]
200016b8:	6039      	str	r1, [r7, #0]
  ITStatus itstatus = RESET;
200016ba:	230f      	movs	r3, #15
200016bc:	18fb      	adds	r3, r7, r3
200016be:	2200      	movs	r2, #0
200016c0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_IT(CAN_IT));
  
  /* check the interrupt enable bit */
 if((CANx->IER & CAN_IT) != RESET)
200016c2:	687b      	ldr	r3, [r7, #4]
200016c4:	695b      	ldr	r3, [r3, #20]
200016c6:	683a      	ldr	r2, [r7, #0]
200016c8:	4013      	ands	r3, r2
200016ca:	d100      	bne.n	200016ce <CAN_GetITStatus+0x1e>
200016cc:	e0db      	b.n	20001886 <CAN_GetITStatus+0x1d6>
 {
   /* in case the Interrupt is enabled, .... */
    switch (CAN_IT)
200016ce:	683b      	ldr	r3, [r7, #0]
200016d0:	2b40      	cmp	r3, #64	; 0x40
200016d2:	d100      	bne.n	200016d6 <CAN_GetITStatus+0x26>
200016d4:	e079      	b.n	200017ca <CAN_GetITStatus+0x11a>
200016d6:	d80e      	bhi.n	200016f6 <CAN_GetITStatus+0x46>
200016d8:	2b04      	cmp	r3, #4
200016da:	d04a      	beq.n	20001772 <CAN_GetITStatus+0xc2>
200016dc:	d804      	bhi.n	200016e8 <CAN_GetITStatus+0x38>
200016de:	2b01      	cmp	r3, #1
200016e0:	d030      	beq.n	20001744 <CAN_GetITStatus+0x94>
200016e2:	2b02      	cmp	r3, #2
200016e4:	d03a      	beq.n	2000175c <CAN_GetITStatus+0xac>
200016e6:	e0c8      	b.n	2000187a <CAN_GetITStatus+0x1ca>
200016e8:	2b10      	cmp	r3, #16
200016ea:	d058      	beq.n	2000179e <CAN_GetITStatus+0xee>
200016ec:	2b20      	cmp	r3, #32
200016ee:	d061      	beq.n	200017b4 <CAN_GetITStatus+0x104>
200016f0:	2b08      	cmp	r3, #8
200016f2:	d049      	beq.n	20001788 <CAN_GetITStatus+0xd8>
200016f4:	e0c1      	b.n	2000187a <CAN_GetITStatus+0x1ca>
200016f6:	2280      	movs	r2, #128	; 0x80
200016f8:	0112      	lsls	r2, r2, #4
200016fa:	4293      	cmp	r3, r2
200016fc:	d100      	bne.n	20001700 <CAN_GetITStatus+0x50>
200016fe:	e0a6      	b.n	2000184e <CAN_GetITStatus+0x19e>
20001700:	2280      	movs	r2, #128	; 0x80
20001702:	0112      	lsls	r2, r2, #4
20001704:	4293      	cmp	r3, r2
20001706:	d80f      	bhi.n	20001728 <CAN_GetITStatus+0x78>
20001708:	2280      	movs	r2, #128	; 0x80
2000170a:	0092      	lsls	r2, r2, #2
2000170c:	4293      	cmp	r3, r2
2000170e:	d100      	bne.n	20001712 <CAN_GetITStatus+0x62>
20001710:	e087      	b.n	20001822 <CAN_GetITStatus+0x172>
20001712:	2280      	movs	r2, #128	; 0x80
20001714:	00d2      	lsls	r2, r2, #3
20001716:	4293      	cmp	r3, r2
20001718:	d100      	bne.n	2000171c <CAN_GetITStatus+0x6c>
2000171a:	e08d      	b.n	20001838 <CAN_GetITStatus+0x188>
2000171c:	2280      	movs	r2, #128	; 0x80
2000171e:	0052      	lsls	r2, r2, #1
20001720:	4293      	cmp	r3, r2
20001722:	d100      	bne.n	20001726 <CAN_GetITStatus+0x76>
20001724:	e072      	b.n	2000180c <CAN_GetITStatus+0x15c>
20001726:	e0a8      	b.n	2000187a <CAN_GetITStatus+0x1ca>
20001728:	2280      	movs	r2, #128	; 0x80
2000172a:	0252      	lsls	r2, r2, #9
2000172c:	4293      	cmp	r3, r2
2000172e:	d057      	beq.n	200017e0 <CAN_GetITStatus+0x130>
20001730:	2280      	movs	r2, #128	; 0x80
20001732:	0292      	lsls	r2, r2, #10
20001734:	4293      	cmp	r3, r2
20001736:	d05e      	beq.n	200017f6 <CAN_GetITStatus+0x146>
20001738:	2280      	movs	r2, #128	; 0x80
2000173a:	0212      	lsls	r2, r2, #8
2000173c:	4293      	cmp	r3, r2
2000173e:	d100      	bne.n	20001742 <CAN_GetITStatus+0x92>
20001740:	e090      	b.n	20001864 <CAN_GetITStatus+0x1b4>
20001742:	e09a      	b.n	2000187a <CAN_GetITStatus+0x1ca>
    {
      case CAN_IT_TME:
        /* Check CAN_TSR_RQCPx bits */
        itstatus = CheckITStatus(CANx->TSR, CAN_TSR_RQCP0|CAN_TSR_RQCP1|CAN_TSR_RQCP2);  
20001744:	687b      	ldr	r3, [r7, #4]
20001746:	689b      	ldr	r3, [r3, #8]
20001748:	220f      	movs	r2, #15
2000174a:	18bc      	adds	r4, r7, r2
2000174c:	4a53      	ldr	r2, [pc, #332]	; (2000189c <CAN_GetITStatus+0x1ec>)
2000174e:	0011      	movs	r1, r2
20001750:	0018      	movs	r0, r3
20001752:	f000 f91b 	bl	2000198c <CheckITStatus>
20001756:	0003      	movs	r3, r0
20001758:	7023      	strb	r3, [r4, #0]
        break;
2000175a:	e098      	b.n	2000188e <CAN_GetITStatus+0x1de>
      case CAN_IT_FMP0:
        /* Check CAN_RF0R_FMP0 bit */
        itstatus = CheckITStatus(CANx->RF0R, CAN_RF0R_FMP0);  
2000175c:	687b      	ldr	r3, [r7, #4]
2000175e:	68db      	ldr	r3, [r3, #12]
20001760:	220f      	movs	r2, #15
20001762:	18bc      	adds	r4, r7, r2
20001764:	2103      	movs	r1, #3
20001766:	0018      	movs	r0, r3
20001768:	f000 f910 	bl	2000198c <CheckITStatus>
2000176c:	0003      	movs	r3, r0
2000176e:	7023      	strb	r3, [r4, #0]
        break;
20001770:	e08d      	b.n	2000188e <CAN_GetITStatus+0x1de>
      case CAN_IT_FF0:
        /* Check CAN_RF0R_FULL0 bit */
        itstatus = CheckITStatus(CANx->RF0R, CAN_RF0R_FULL0);  
20001772:	687b      	ldr	r3, [r7, #4]
20001774:	68db      	ldr	r3, [r3, #12]
20001776:	220f      	movs	r2, #15
20001778:	18bc      	adds	r4, r7, r2
2000177a:	2108      	movs	r1, #8
2000177c:	0018      	movs	r0, r3
2000177e:	f000 f905 	bl	2000198c <CheckITStatus>
20001782:	0003      	movs	r3, r0
20001784:	7023      	strb	r3, [r4, #0]
        break;
20001786:	e082      	b.n	2000188e <CAN_GetITStatus+0x1de>
      case CAN_IT_FOV0:
        /* Check CAN_RF0R_FOVR0 bit */
        itstatus = CheckITStatus(CANx->RF0R, CAN_RF0R_FOVR0);  
20001788:	687b      	ldr	r3, [r7, #4]
2000178a:	68db      	ldr	r3, [r3, #12]
2000178c:	220f      	movs	r2, #15
2000178e:	18bc      	adds	r4, r7, r2
20001790:	2110      	movs	r1, #16
20001792:	0018      	movs	r0, r3
20001794:	f000 f8fa 	bl	2000198c <CheckITStatus>
20001798:	0003      	movs	r3, r0
2000179a:	7023      	strb	r3, [r4, #0]
        break;
2000179c:	e077      	b.n	2000188e <CAN_GetITStatus+0x1de>
      case CAN_IT_FMP1:
        /* Check CAN_RF1R_FMP1 bit */
        itstatus = CheckITStatus(CANx->RF1R, CAN_RF1R_FMP1);  
2000179e:	687b      	ldr	r3, [r7, #4]
200017a0:	691b      	ldr	r3, [r3, #16]
200017a2:	220f      	movs	r2, #15
200017a4:	18bc      	adds	r4, r7, r2
200017a6:	2103      	movs	r1, #3
200017a8:	0018      	movs	r0, r3
200017aa:	f000 f8ef 	bl	2000198c <CheckITStatus>
200017ae:	0003      	movs	r3, r0
200017b0:	7023      	strb	r3, [r4, #0]
        break;
200017b2:	e06c      	b.n	2000188e <CAN_GetITStatus+0x1de>
      case CAN_IT_FF1:
        /* Check CAN_RF1R_FULL1 bit */
        itstatus = CheckITStatus(CANx->RF1R, CAN_RF1R_FULL1);  
200017b4:	687b      	ldr	r3, [r7, #4]
200017b6:	691b      	ldr	r3, [r3, #16]
200017b8:	220f      	movs	r2, #15
200017ba:	18bc      	adds	r4, r7, r2
200017bc:	2108      	movs	r1, #8
200017be:	0018      	movs	r0, r3
200017c0:	f000 f8e4 	bl	2000198c <CheckITStatus>
200017c4:	0003      	movs	r3, r0
200017c6:	7023      	strb	r3, [r4, #0]
        break;
200017c8:	e061      	b.n	2000188e <CAN_GetITStatus+0x1de>
      case CAN_IT_FOV1:
        /* Check CAN_RF1R_FOVR1 bit */
        itstatus = CheckITStatus(CANx->RF1R, CAN_RF1R_FOVR1);  
200017ca:	687b      	ldr	r3, [r7, #4]
200017cc:	691b      	ldr	r3, [r3, #16]
200017ce:	220f      	movs	r2, #15
200017d0:	18bc      	adds	r4, r7, r2
200017d2:	2110      	movs	r1, #16
200017d4:	0018      	movs	r0, r3
200017d6:	f000 f8d9 	bl	2000198c <CheckITStatus>
200017da:	0003      	movs	r3, r0
200017dc:	7023      	strb	r3, [r4, #0]
        break;
200017de:	e056      	b.n	2000188e <CAN_GetITStatus+0x1de>
      case CAN_IT_WKU:
        /* Check CAN_MSR_WKUI bit */
        itstatus = CheckITStatus(CANx->MSR, CAN_MSR_WKUI);  
200017e0:	687b      	ldr	r3, [r7, #4]
200017e2:	685b      	ldr	r3, [r3, #4]
200017e4:	220f      	movs	r2, #15
200017e6:	18bc      	adds	r4, r7, r2
200017e8:	2108      	movs	r1, #8
200017ea:	0018      	movs	r0, r3
200017ec:	f000 f8ce 	bl	2000198c <CheckITStatus>
200017f0:	0003      	movs	r3, r0
200017f2:	7023      	strb	r3, [r4, #0]
        break;
200017f4:	e04b      	b.n	2000188e <CAN_GetITStatus+0x1de>
      case CAN_IT_SLK:
        /* Check CAN_MSR_SLAKI bit */
        itstatus = CheckITStatus(CANx->MSR, CAN_MSR_SLAKI);  
200017f6:	687b      	ldr	r3, [r7, #4]
200017f8:	685b      	ldr	r3, [r3, #4]
200017fa:	220f      	movs	r2, #15
200017fc:	18bc      	adds	r4, r7, r2
200017fe:	2110      	movs	r1, #16
20001800:	0018      	movs	r0, r3
20001802:	f000 f8c3 	bl	2000198c <CheckITStatus>
20001806:	0003      	movs	r3, r0
20001808:	7023      	strb	r3, [r4, #0]
        break;
2000180a:	e040      	b.n	2000188e <CAN_GetITStatus+0x1de>
      case CAN_IT_EWG:
        /* Check CAN_ESR_EWGF bit */
        itstatus = CheckITStatus(CANx->ESR, CAN_ESR_EWGF);  
2000180c:	687b      	ldr	r3, [r7, #4]
2000180e:	699b      	ldr	r3, [r3, #24]
20001810:	220f      	movs	r2, #15
20001812:	18bc      	adds	r4, r7, r2
20001814:	2101      	movs	r1, #1
20001816:	0018      	movs	r0, r3
20001818:	f000 f8b8 	bl	2000198c <CheckITStatus>
2000181c:	0003      	movs	r3, r0
2000181e:	7023      	strb	r3, [r4, #0]
        break;
20001820:	e035      	b.n	2000188e <CAN_GetITStatus+0x1de>
      case CAN_IT_EPV:
        /* Check CAN_ESR_EPVF bit */
        itstatus = CheckITStatus(CANx->ESR, CAN_ESR_EPVF);  
20001822:	687b      	ldr	r3, [r7, #4]
20001824:	699b      	ldr	r3, [r3, #24]
20001826:	220f      	movs	r2, #15
20001828:	18bc      	adds	r4, r7, r2
2000182a:	2102      	movs	r1, #2
2000182c:	0018      	movs	r0, r3
2000182e:	f000 f8ad 	bl	2000198c <CheckITStatus>
20001832:	0003      	movs	r3, r0
20001834:	7023      	strb	r3, [r4, #0]
        break;
20001836:	e02a      	b.n	2000188e <CAN_GetITStatus+0x1de>
      case CAN_IT_BOF:
        /* Check CAN_ESR_BOFF bit */
        itstatus = CheckITStatus(CANx->ESR, CAN_ESR_BOFF);  
20001838:	687b      	ldr	r3, [r7, #4]
2000183a:	699b      	ldr	r3, [r3, #24]
2000183c:	220f      	movs	r2, #15
2000183e:	18bc      	adds	r4, r7, r2
20001840:	2104      	movs	r1, #4
20001842:	0018      	movs	r0, r3
20001844:	f000 f8a2 	bl	2000198c <CheckITStatus>
20001848:	0003      	movs	r3, r0
2000184a:	7023      	strb	r3, [r4, #0]
        break;
2000184c:	e01f      	b.n	2000188e <CAN_GetITStatus+0x1de>
      case CAN_IT_LEC:
        /* Check CAN_ESR_LEC bit */
        itstatus = CheckITStatus(CANx->ESR, CAN_ESR_LEC);  
2000184e:	687b      	ldr	r3, [r7, #4]
20001850:	699b      	ldr	r3, [r3, #24]
20001852:	220f      	movs	r2, #15
20001854:	18bc      	adds	r4, r7, r2
20001856:	2170      	movs	r1, #112	; 0x70
20001858:	0018      	movs	r0, r3
2000185a:	f000 f897 	bl	2000198c <CheckITStatus>
2000185e:	0003      	movs	r3, r0
20001860:	7023      	strb	r3, [r4, #0]
        break;
20001862:	e014      	b.n	2000188e <CAN_GetITStatus+0x1de>
      case CAN_IT_ERR:
        /* Check CAN_MSR_ERRI bit */ 
        itstatus = CheckITStatus(CANx->MSR, CAN_MSR_ERRI); 
20001864:	687b      	ldr	r3, [r7, #4]
20001866:	685b      	ldr	r3, [r3, #4]
20001868:	220f      	movs	r2, #15
2000186a:	18bc      	adds	r4, r7, r2
2000186c:	2104      	movs	r1, #4
2000186e:	0018      	movs	r0, r3
20001870:	f000 f88c 	bl	2000198c <CheckITStatus>
20001874:	0003      	movs	r3, r0
20001876:	7023      	strb	r3, [r4, #0]
        break;
20001878:	e009      	b.n	2000188e <CAN_GetITStatus+0x1de>
      default:
        /* in case of error, return RESET */
        itstatus = RESET;
2000187a:	230f      	movs	r3, #15
2000187c:	18fb      	adds	r3, r7, r3
2000187e:	2200      	movs	r2, #0
20001880:	701a      	strb	r2, [r3, #0]
        break;
20001882:	46c0      	nop			; (mov r8, r8)
20001884:	e003      	b.n	2000188e <CAN_GetITStatus+0x1de>
    }
  }
  else
  {
   /* in case the Interrupt is not enabled, return RESET */
    itstatus  = RESET;
20001886:	230f      	movs	r3, #15
20001888:	18fb      	adds	r3, r7, r3
2000188a:	2200      	movs	r2, #0
2000188c:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return the CAN_IT status */
  return  itstatus;
2000188e:	230f      	movs	r3, #15
20001890:	18fb      	adds	r3, r7, r3
20001892:	781b      	ldrb	r3, [r3, #0]
}
20001894:	0018      	movs	r0, r3
20001896:	46bd      	mov	sp, r7
20001898:	b005      	add	sp, #20
2000189a:	bd90      	pop	{r4, r7, pc}
2000189c:	00010101 	andeq	r0, r1, r1, lsl #2

200018a0 <CAN_ClearITPendingBit>:
  *            @arg CAN_IT_ERR: Error Interrupt
  * @note   CAN3 peripheral is available only for STM32F413_423xx devices
  * @retval None
  */
void CAN_ClearITPendingBit(CAN_TypeDef* CANx, uint32_t CAN_IT)
{
200018a0:	b580      	push	{r7, lr}
200018a2:	b082      	sub	sp, #8
200018a4:	af00      	add	r7, sp, #0
200018a6:	6078      	str	r0, [r7, #4]
200018a8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_CLEAR_IT(CAN_IT));

  switch (CAN_IT)
200018aa:	683b      	ldr	r3, [r7, #0]
200018ac:	2280      	movs	r2, #128	; 0x80
200018ae:	0052      	lsls	r2, r2, #1
200018b0:	4293      	cmp	r3, r2
200018b2:	d04a      	beq.n	2000194a <CAN_ClearITPendingBit+0xaa>
200018b4:	2280      	movs	r2, #128	; 0x80
200018b6:	0052      	lsls	r2, r2, #1
200018b8:	4293      	cmp	r3, r2
200018ba:	d80c      	bhi.n	200018d6 <CAN_ClearITPendingBit+0x36>
200018bc:	2b08      	cmp	r3, #8
200018be:	d030      	beq.n	20001922 <CAN_ClearITPendingBit+0x82>
200018c0:	d804      	bhi.n	200018cc <CAN_ClearITPendingBit+0x2c>
200018c2:	2b01      	cmp	r3, #1
200018c4:	d025      	beq.n	20001912 <CAN_ClearITPendingBit+0x72>
200018c6:	2b04      	cmp	r3, #4
200018c8:	d027      	beq.n	2000191a <CAN_ClearITPendingBit+0x7a>
      /* Clear CAN_MSR_ERRI (rc_w1) */
      CANx->MSR = CAN_MSR_ERRI; 
       /* @note BOFF, EPVF and EWGF Flags are cleared by hardware depending on the CAN Bus status*/
       break;
    default:
       break;
200018ca:	e058      	b.n	2000197e <CAN_ClearITPendingBit+0xde>
  switch (CAN_IT)
200018cc:	2b20      	cmp	r3, #32
200018ce:	d02c      	beq.n	2000192a <CAN_ClearITPendingBit+0x8a>
200018d0:	2b40      	cmp	r3, #64	; 0x40
200018d2:	d02e      	beq.n	20001932 <CAN_ClearITPendingBit+0x92>
       break;
200018d4:	e053      	b.n	2000197e <CAN_ClearITPendingBit+0xde>
  switch (CAN_IT)
200018d6:	2280      	movs	r2, #128	; 0x80
200018d8:	0112      	lsls	r2, r2, #4
200018da:	4293      	cmp	r3, r2
200018dc:	d041      	beq.n	20001962 <CAN_ClearITPendingBit+0xc2>
200018de:	2280      	movs	r2, #128	; 0x80
200018e0:	0112      	lsls	r2, r2, #4
200018e2:	4293      	cmp	r3, r2
200018e4:	d808      	bhi.n	200018f8 <CAN_ClearITPendingBit+0x58>
200018e6:	2280      	movs	r2, #128	; 0x80
200018e8:	0092      	lsls	r2, r2, #2
200018ea:	4293      	cmp	r3, r2
200018ec:	d031      	beq.n	20001952 <CAN_ClearITPendingBit+0xb2>
200018ee:	2280      	movs	r2, #128	; 0x80
200018f0:	00d2      	lsls	r2, r2, #3
200018f2:	4293      	cmp	r3, r2
200018f4:	d031      	beq.n	2000195a <CAN_ClearITPendingBit+0xba>
       break;
200018f6:	e042      	b.n	2000197e <CAN_ClearITPendingBit+0xde>
  switch (CAN_IT)
200018f8:	2280      	movs	r2, #128	; 0x80
200018fa:	0252      	lsls	r2, r2, #9
200018fc:	4293      	cmp	r3, r2
200018fe:	d01c      	beq.n	2000193a <CAN_ClearITPendingBit+0x9a>
20001900:	2280      	movs	r2, #128	; 0x80
20001902:	0292      	lsls	r2, r2, #10
20001904:	4293      	cmp	r3, r2
20001906:	d01c      	beq.n	20001942 <CAN_ClearITPendingBit+0xa2>
20001908:	2280      	movs	r2, #128	; 0x80
2000190a:	0212      	lsls	r2, r2, #8
2000190c:	4293      	cmp	r3, r2
2000190e:	d02f      	beq.n	20001970 <CAN_ClearITPendingBit+0xd0>
       break;
20001910:	e035      	b.n	2000197e <CAN_ClearITPendingBit+0xde>
      CANx->TSR = CAN_TSR_RQCP0|CAN_TSR_RQCP1|CAN_TSR_RQCP2;  
20001912:	687b      	ldr	r3, [r7, #4]
20001914:	4a1c      	ldr	r2, [pc, #112]	; (20001988 <CAN_ClearITPendingBit+0xe8>)
20001916:	609a      	str	r2, [r3, #8]
      break;
20001918:	e031      	b.n	2000197e <CAN_ClearITPendingBit+0xde>
      CANx->RF0R = CAN_RF0R_FULL0; 
2000191a:	687b      	ldr	r3, [r7, #4]
2000191c:	2208      	movs	r2, #8
2000191e:	60da      	str	r2, [r3, #12]
      break;
20001920:	e02d      	b.n	2000197e <CAN_ClearITPendingBit+0xde>
      CANx->RF0R = CAN_RF0R_FOVR0; 
20001922:	687b      	ldr	r3, [r7, #4]
20001924:	2210      	movs	r2, #16
20001926:	60da      	str	r2, [r3, #12]
      break;
20001928:	e029      	b.n	2000197e <CAN_ClearITPendingBit+0xde>
      CANx->RF1R = CAN_RF1R_FULL1;  
2000192a:	687b      	ldr	r3, [r7, #4]
2000192c:	2208      	movs	r2, #8
2000192e:	611a      	str	r2, [r3, #16]
      break;
20001930:	e025      	b.n	2000197e <CAN_ClearITPendingBit+0xde>
      CANx->RF1R = CAN_RF1R_FOVR1; 
20001932:	687b      	ldr	r3, [r7, #4]
20001934:	2210      	movs	r2, #16
20001936:	611a      	str	r2, [r3, #16]
      break;
20001938:	e021      	b.n	2000197e <CAN_ClearITPendingBit+0xde>
      CANx->MSR = CAN_MSR_WKUI;  
2000193a:	687b      	ldr	r3, [r7, #4]
2000193c:	2208      	movs	r2, #8
2000193e:	605a      	str	r2, [r3, #4]
      break;
20001940:	e01d      	b.n	2000197e <CAN_ClearITPendingBit+0xde>
      CANx->MSR = CAN_MSR_SLAKI;   
20001942:	687b      	ldr	r3, [r7, #4]
20001944:	2210      	movs	r2, #16
20001946:	605a      	str	r2, [r3, #4]
      break;
20001948:	e019      	b.n	2000197e <CAN_ClearITPendingBit+0xde>
      CANx->MSR = CAN_MSR_ERRI;
2000194a:	687b      	ldr	r3, [r7, #4]
2000194c:	2204      	movs	r2, #4
2000194e:	605a      	str	r2, [r3, #4]
      break;
20001950:	e015      	b.n	2000197e <CAN_ClearITPendingBit+0xde>
      CANx->MSR = CAN_MSR_ERRI; 
20001952:	687b      	ldr	r3, [r7, #4]
20001954:	2204      	movs	r2, #4
20001956:	605a      	str	r2, [r3, #4]
      break;
20001958:	e011      	b.n	2000197e <CAN_ClearITPendingBit+0xde>
      CANx->MSR = CAN_MSR_ERRI; 
2000195a:	687b      	ldr	r3, [r7, #4]
2000195c:	2204      	movs	r2, #4
2000195e:	605a      	str	r2, [r3, #4]
       break;
20001960:	e00d      	b.n	2000197e <CAN_ClearITPendingBit+0xde>
      CANx->ESR = RESET; 
20001962:	687b      	ldr	r3, [r7, #4]
20001964:	2200      	movs	r2, #0
20001966:	619a      	str	r2, [r3, #24]
      CANx->MSR = CAN_MSR_ERRI; 
20001968:	687b      	ldr	r3, [r7, #4]
2000196a:	2204      	movs	r2, #4
2000196c:	605a      	str	r2, [r3, #4]
      break;
2000196e:	e006      	b.n	2000197e <CAN_ClearITPendingBit+0xde>
      CANx->ESR = RESET; 
20001970:	687b      	ldr	r3, [r7, #4]
20001972:	2200      	movs	r2, #0
20001974:	619a      	str	r2, [r3, #24]
      CANx->MSR = CAN_MSR_ERRI; 
20001976:	687b      	ldr	r3, [r7, #4]
20001978:	2204      	movs	r2, #4
2000197a:	605a      	str	r2, [r3, #4]
       break;
2000197c:	46c0      	nop			; (mov r8, r8)
   }
}
2000197e:	46c0      	nop			; (mov r8, r8)
20001980:	46bd      	mov	sp, r7
20001982:	b002      	add	sp, #8
20001984:	bd80      	pop	{r7, pc}
20001986:	46c0      	nop			; (mov r8, r8)
20001988:	00010101 	andeq	r0, r1, r1, lsl #2

2000198c <CheckITStatus>:
  * @param  CAN_Reg: specifies the CAN interrupt register to check.
  * @param  It_Bit: specifies the interrupt source bit to check.
  * @retval The new state of the CAN Interrupt (SET or RESET).
  */
static ITStatus CheckITStatus(uint32_t CAN_Reg, uint32_t It_Bit)
{
2000198c:	b580      	push	{r7, lr}
2000198e:	b084      	sub	sp, #16
20001990:	af00      	add	r7, sp, #0
20001992:	6078      	str	r0, [r7, #4]
20001994:	6039      	str	r1, [r7, #0]
  ITStatus pendingbitstatus = RESET;
20001996:	230f      	movs	r3, #15
20001998:	18fb      	adds	r3, r7, r3
2000199a:	2200      	movs	r2, #0
2000199c:	701a      	strb	r2, [r3, #0]
  
  if ((CAN_Reg & It_Bit) != (uint32_t)RESET)
2000199e:	687b      	ldr	r3, [r7, #4]
200019a0:	683a      	ldr	r2, [r7, #0]
200019a2:	4013      	ands	r3, r2
200019a4:	d004      	beq.n	200019b0 <CheckITStatus+0x24>
  {
    /* CAN_IT is set */
    pendingbitstatus = SET;
200019a6:	230f      	movs	r3, #15
200019a8:	18fb      	adds	r3, r7, r3
200019aa:	2201      	movs	r2, #1
200019ac:	701a      	strb	r2, [r3, #0]
200019ae:	e003      	b.n	200019b8 <CheckITStatus+0x2c>
  }
  else
  {
    /* CAN_IT is reset */
    pendingbitstatus = RESET;
200019b0:	230f      	movs	r3, #15
200019b2:	18fb      	adds	r3, r7, r3
200019b4:	2200      	movs	r2, #0
200019b6:	701a      	strb	r2, [r3, #0]
  }
  return pendingbitstatus;
200019b8:	230f      	movs	r3, #15
200019ba:	18fb      	adds	r3, r7, r3
200019bc:	781b      	ldrb	r3, [r3, #0]
}
200019be:	0018      	movs	r0, r3
200019c0:	46bd      	mov	sp, r7
200019c2:	b004      	add	sp, #16
200019c4:	bd80      	pop	{r7, pc}
200019c6:	46c0      	nop			; (mov r8, r8)

200019c8 <NVIC_SetPriority>:
{
200019c8:	b580      	push	{r7, lr}
200019ca:	b082      	sub	sp, #8
200019cc:	af00      	add	r7, sp, #0
200019ce:	0002      	movs	r2, r0
200019d0:	6039      	str	r1, [r7, #0]
200019d2:	1dfb      	adds	r3, r7, #7
200019d4:	701a      	strb	r2, [r3, #0]
  if((int32_t)IRQn < 0) {
200019d6:	1dfb      	adds	r3, r7, #7
200019d8:	781b      	ldrb	r3, [r3, #0]
200019da:	2b7f      	cmp	r3, #127	; 0x7f
200019dc:	d90d      	bls.n	200019fa <NVIC_SetPriority+0x32>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
200019de:	683b      	ldr	r3, [r7, #0]
200019e0:	b2da      	uxtb	r2, r3
200019e2:	490f      	ldr	r1, [pc, #60]	; (20001a20 <NVIC_SetPriority+0x58>)
200019e4:	1dfb      	adds	r3, r7, #7
200019e6:	781b      	ldrb	r3, [r3, #0]
200019e8:	0018      	movs	r0, r3
200019ea:	230f      	movs	r3, #15
200019ec:	4003      	ands	r3, r0
200019ee:	3b04      	subs	r3, #4
200019f0:	0112      	lsls	r2, r2, #4
200019f2:	b2d2      	uxtb	r2, r2
200019f4:	18cb      	adds	r3, r1, r3
200019f6:	761a      	strb	r2, [r3, #24]
}
200019f8:	e00d      	b.n	20001a16 <NVIC_SetPriority+0x4e>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
200019fa:	683b      	ldr	r3, [r7, #0]
200019fc:	b2db      	uxtb	r3, r3
200019fe:	4909      	ldr	r1, [pc, #36]	; (20001a24 <NVIC_SetPriority+0x5c>)
20001a00:	1dfa      	adds	r2, r7, #7
20001a02:	7812      	ldrb	r2, [r2, #0]
20001a04:	b252      	sxtb	r2, r2
20001a06:	011b      	lsls	r3, r3, #4
20001a08:	b2d8      	uxtb	r0, r3
20001a0a:	23c0      	movs	r3, #192	; 0xc0
20001a0c:	009b      	lsls	r3, r3, #2
20001a0e:	188a      	adds	r2, r1, r2
20001a10:	18d3      	adds	r3, r2, r3
20001a12:	1c02      	adds	r2, r0, #0
20001a14:	701a      	strb	r2, [r3, #0]
}
20001a16:	46c0      	nop			; (mov r8, r8)
20001a18:	46bd      	mov	sp, r7
20001a1a:	b002      	add	sp, #8
20001a1c:	bd80      	pop	{r7, pc}
20001a1e:	46c0      	nop			; (mov r8, r8)
20001a20:	e000ed00 	and	lr, r0, r0, lsl #26
20001a24:	e000e100 	and	lr, r0, r0, lsl #2

20001a28 <SysTick_Config>:
    function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
20001a28:	b580      	push	{r7, lr}
20001a2a:	b082      	sub	sp, #8
20001a2c:	af00      	add	r7, sp, #0
20001a2e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk) { return (1UL); }    /* Reload value impossible */
20001a30:	687b      	ldr	r3, [r7, #4]
20001a32:	3b01      	subs	r3, #1
20001a34:	4a0c      	ldr	r2, [pc, #48]	; (20001a68 <SysTick_Config+0x40>)
20001a36:	4293      	cmp	r3, r2
20001a38:	d901      	bls.n	20001a3e <SysTick_Config+0x16>
20001a3a:	2301      	movs	r3, #1
20001a3c:	e010      	b.n	20001a60 <SysTick_Config+0x38>

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
20001a3e:	4b0b      	ldr	r3, [pc, #44]	; (20001a6c <SysTick_Config+0x44>)
20001a40:	687a      	ldr	r2, [r7, #4]
20001a42:	3a01      	subs	r2, #1
20001a44:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
20001a46:	2301      	movs	r3, #1
20001a48:	425b      	negs	r3, r3
20001a4a:	210f      	movs	r1, #15
20001a4c:	0018      	movs	r0, r3
20001a4e:	f7ff ffbb 	bl	200019c8 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
20001a52:	4b06      	ldr	r3, [pc, #24]	; (20001a6c <SysTick_Config+0x44>)
20001a54:	2200      	movs	r2, #0
20001a56:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
20001a58:	4b04      	ldr	r3, [pc, #16]	; (20001a6c <SysTick_Config+0x44>)
20001a5a:	2207      	movs	r2, #7
20001a5c:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
20001a5e:	2300      	movs	r3, #0
}
20001a60:	0018      	movs	r0, r3
20001a62:	46bd      	mov	sp, r7
20001a64:	b002      	add	sp, #8
20001a66:	bd80      	pop	{r7, pc}
20001a68:	00ffffff 	ldrshteq	pc, [pc], #255	; <UNPREDICTABLE>
20001a6c:	e000e010 	and	lr, r0, r0, lsl r0

20001a70 <RCC_DeInit>:
  *            - LSI, LSE and RTC clocks 
  * @param  None
  * @retval None
  */
void RCC_DeInit(void)
{
20001a70:	b580      	push	{r7, lr}
20001a72:	af00      	add	r7, sp, #0
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
20001a74:	4b14      	ldr	r3, [pc, #80]	; (20001ac8 <RCC_DeInit+0x58>)
20001a76:	681a      	ldr	r2, [r3, #0]
20001a78:	4b13      	ldr	r3, [pc, #76]	; (20001ac8 <RCC_DeInit+0x58>)
20001a7a:	2101      	movs	r1, #1
20001a7c:	430a      	orrs	r2, r1
20001a7e:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
20001a80:	4b11      	ldr	r3, [pc, #68]	; (20001ac8 <RCC_DeInit+0x58>)
20001a82:	2200      	movs	r2, #0
20001a84:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON, PLLON, PLLI2S and PLLSAI(STM32F42xxx/43xxx/446xx/469xx/479xx devices) bits */
  RCC->CR &= (uint32_t)0xEAF6FFFF;
20001a86:	4b10      	ldr	r3, [pc, #64]	; (20001ac8 <RCC_DeInit+0x58>)
20001a88:	681a      	ldr	r2, [r3, #0]
20001a8a:	4b0f      	ldr	r3, [pc, #60]	; (20001ac8 <RCC_DeInit+0x58>)
20001a8c:	490f      	ldr	r1, [pc, #60]	; (20001acc <RCC_DeInit+0x5c>)
20001a8e:	400a      	ands	r2, r1
20001a90:	601a      	str	r2, [r3, #0]
  
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
20001a92:	4b0d      	ldr	r3, [pc, #52]	; (20001ac8 <RCC_DeInit+0x58>)
20001a94:	4a0e      	ldr	r2, [pc, #56]	; (20001ad0 <RCC_DeInit+0x60>)
20001a96:	605a      	str	r2, [r3, #4]

#if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F401xx) || defined(STM32F411xE) || defined(STM32F446xx) || defined(STM32F413_423xx) || defined(STM32F469_479xx)  
  /* Reset PLLI2SCFGR register */
  RCC->PLLI2SCFGR = 0x20003000;
20001a98:	4a0b      	ldr	r2, [pc, #44]	; (20001ac8 <RCC_DeInit+0x58>)
20001a9a:	2384      	movs	r3, #132	; 0x84
20001a9c:	490d      	ldr	r1, [pc, #52]	; (20001ad4 <RCC_DeInit+0x64>)
20001a9e:	50d1      	str	r1, [r2, r3]
#endif /* STM32F40_41xxx || STM32F427_437xx || STM32F429_439xx || STM32F401xx || STM32F411xE || STM32F446xx || STM32F413_423xx || STM32F469_479xx */

#if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F446xx) || defined(STM32F469_479xx) 
  /* Reset PLLSAICFGR register, only available for STM32F42xxx/43xxx/446xx/469xx/479xx devices */
  RCC->PLLSAICFGR = 0x24003000;
20001aa0:	4a09      	ldr	r2, [pc, #36]	; (20001ac8 <RCC_DeInit+0x58>)
20001aa2:	2388      	movs	r3, #136	; 0x88
20001aa4:	490c      	ldr	r1, [pc, #48]	; (20001ad8 <RCC_DeInit+0x68>)
20001aa6:	50d1      	str	r1, [r2, r3]
#endif /* STM32F40_41xxx || STM32F427_437xx || STM32F429_439xx || STM32F446xx || STM32F469_479xx */
  
  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
20001aa8:	4b07      	ldr	r3, [pc, #28]	; (20001ac8 <RCC_DeInit+0x58>)
20001aaa:	681a      	ldr	r2, [r3, #0]
20001aac:	4b06      	ldr	r3, [pc, #24]	; (20001ac8 <RCC_DeInit+0x58>)
20001aae:	490b      	ldr	r1, [pc, #44]	; (20001adc <RCC_DeInit+0x6c>)
20001ab0:	400a      	ands	r2, r1
20001ab2:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
20001ab4:	4b04      	ldr	r3, [pc, #16]	; (20001ac8 <RCC_DeInit+0x58>)
20001ab6:	2200      	movs	r2, #0
20001ab8:	60da      	str	r2, [r3, #12]

  /* Disable Timers clock prescalers selection, only available for STM32F42/43xxx and STM32F413_423xx devices */
  RCC->DCKCFGR = 0x00000000;
20001aba:	4a03      	ldr	r2, [pc, #12]	; (20001ac8 <RCC_DeInit+0x58>)
20001abc:	238c      	movs	r3, #140	; 0x8c
20001abe:	2100      	movs	r1, #0
20001ac0:	50d1      	str	r1, [r2, r3]
  
#if defined(STM32F410xx) || defined(STM32F413_423xx)
  /* Disable LPTIM and FMPI2C clock prescalers selection, only available for STM32F410xx and STM32F413_423xx devices */
  RCC->DCKCFGR2 = 0x00000000;
#endif /* STM32F410xx || STM32F413_423xx */  
}
20001ac2:	46c0      	nop			; (mov r8, r8)
20001ac4:	46bd      	mov	sp, r7
20001ac6:	bd80      	pop	{r7, pc}
20001ac8:	40023800 	andmi	r3, r2, r0, lsl #16
20001acc:	eaf6ffff 	b	1fdc1ad0 <startup-0x23e530>
20001ad0:	24003010 	strcs	r3, [r0], #-16
20001ad4:	20003000 	andcs	r3, r0, r0
20001ad8:	24003000 	strcs	r3, [r0], #-0
20001adc:	fffbffff 			; <UNDEFINED> instruction: 0xfffbffff

20001ae0 <RCC_HSEConfig>:
  *            @arg RCC_HSE_ON: turn ON the HSE oscillator
  *            @arg RCC_HSE_Bypass: HSE oscillator bypassed with external clock
  * @retval None
  */
void RCC_HSEConfig(uint8_t RCC_HSE)
{
20001ae0:	b580      	push	{r7, lr}
20001ae2:	b082      	sub	sp, #8
20001ae4:	af00      	add	r7, sp, #0
20001ae6:	0002      	movs	r2, r0
20001ae8:	1dfb      	adds	r3, r7, #7
20001aea:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_HSE(RCC_HSE));

  /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
  *(__IO uint8_t *) CR_BYTE3_ADDRESS = RCC_HSE_OFF;
20001aec:	4b05      	ldr	r3, [pc, #20]	; (20001b04 <RCC_HSEConfig+0x24>)
20001aee:	2200      	movs	r2, #0
20001af0:	701a      	strb	r2, [r3, #0]

  /* Set the new HSE configuration -------------------------------------------*/
  *(__IO uint8_t *) CR_BYTE3_ADDRESS = RCC_HSE;
20001af2:	4a04      	ldr	r2, [pc, #16]	; (20001b04 <RCC_HSEConfig+0x24>)
20001af4:	1dfb      	adds	r3, r7, #7
20001af6:	781b      	ldrb	r3, [r3, #0]
20001af8:	7013      	strb	r3, [r2, #0]
}
20001afa:	46c0      	nop			; (mov r8, r8)
20001afc:	46bd      	mov	sp, r7
20001afe:	b002      	add	sp, #8
20001b00:	bd80      	pop	{r7, pc}
20001b02:	46c0      	nop			; (mov r8, r8)
20001b04:	40023802 	andmi	r3, r2, r2, lsl #16

20001b08 <RCC_WaitForHSEStartUp>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: HSE oscillator is stable and ready to use
  *          - ERROR: HSE oscillator not yet ready
  */
ErrorStatus RCC_WaitForHSEStartUp(void)
{
20001b08:	b590      	push	{r4, r7, lr}
20001b0a:	b083      	sub	sp, #12
20001b0c:	af00      	add	r7, sp, #0
  __IO uint32_t startupcounter = 0;
20001b0e:	2300      	movs	r3, #0
20001b10:	603b      	str	r3, [r7, #0]
  ErrorStatus status = ERROR;
20001b12:	1dfb      	adds	r3, r7, #7
20001b14:	2200      	movs	r2, #0
20001b16:	701a      	strb	r2, [r3, #0]
  FlagStatus hsestatus = RESET;
20001b18:	1dbb      	adds	r3, r7, #6
20001b1a:	2200      	movs	r2, #0
20001b1c:	701a      	strb	r2, [r3, #0]
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    hsestatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
20001b1e:	1dbc      	adds	r4, r7, #6
20001b20:	2031      	movs	r0, #49	; 0x31
20001b22:	f000 fd9b 	bl	2000265c <RCC_GetFlagStatus>
20001b26:	0003      	movs	r3, r0
20001b28:	7023      	strb	r3, [r4, #0]
    startupcounter++;
20001b2a:	683b      	ldr	r3, [r7, #0]
20001b2c:	3301      	adds	r3, #1
20001b2e:	603b      	str	r3, [r7, #0]
  } while((startupcounter != HSE_STARTUP_TIMEOUT) && (hsestatus == RESET));
20001b30:	683a      	ldr	r2, [r7, #0]
20001b32:	23a0      	movs	r3, #160	; 0xa0
20001b34:	01db      	lsls	r3, r3, #7
20001b36:	429a      	cmp	r2, r3
20001b38:	d003      	beq.n	20001b42 <RCC_WaitForHSEStartUp+0x3a>
20001b3a:	1dbb      	adds	r3, r7, #6
20001b3c:	781b      	ldrb	r3, [r3, #0]
20001b3e:	2b00      	cmp	r3, #0
20001b40:	d0ed      	beq.n	20001b1e <RCC_WaitForHSEStartUp+0x16>

  if (RCC_GetFlagStatus(RCC_FLAG_HSERDY) != RESET)
20001b42:	2031      	movs	r0, #49	; 0x31
20001b44:	f000 fd8a 	bl	2000265c <RCC_GetFlagStatus>
20001b48:	1e03      	subs	r3, r0, #0
20001b4a:	d003      	beq.n	20001b54 <RCC_WaitForHSEStartUp+0x4c>
  {
    status = SUCCESS;
20001b4c:	1dfb      	adds	r3, r7, #7
20001b4e:	2201      	movs	r2, #1
20001b50:	701a      	strb	r2, [r3, #0]
20001b52:	e002      	b.n	20001b5a <RCC_WaitForHSEStartUp+0x52>
  }
  else
  {
    status = ERROR;
20001b54:	1dfb      	adds	r3, r7, #7
20001b56:	2200      	movs	r2, #0
20001b58:	701a      	strb	r2, [r3, #0]
  }
  return (status);
20001b5a:	1dfb      	adds	r3, r7, #7
20001b5c:	781b      	ldrb	r3, [r3, #0]
}
20001b5e:	0018      	movs	r0, r3
20001b60:	46bd      	mov	sp, r7
20001b62:	b003      	add	sp, #12
20001b64:	bd90      	pop	{r4, r7, pc}

20001b66 <RCC_AdjustHSICalibrationValue>:
  * @param  HSICalibrationValue: specifies the calibration trimming value.
  *         This parameter must be a number between 0 and 0x1F.
  * @retval None
  */
void RCC_AdjustHSICalibrationValue(uint8_t HSICalibrationValue)
{
20001b66:	b580      	push	{r7, lr}
20001b68:	b084      	sub	sp, #16
20001b6a:	af00      	add	r7, sp, #0
20001b6c:	0002      	movs	r2, r0
20001b6e:	1dfb      	adds	r3, r7, #7
20001b70:	701a      	strb	r2, [r3, #0]
  uint32_t tmpreg = 0;
20001b72:	2300      	movs	r3, #0
20001b74:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_CALIBRATION_VALUE(HSICalibrationValue));

  tmpreg = RCC->CR;
20001b76:	4b0a      	ldr	r3, [pc, #40]	; (20001ba0 <RCC_AdjustHSICalibrationValue+0x3a>)
20001b78:	681b      	ldr	r3, [r3, #0]
20001b7a:	60fb      	str	r3, [r7, #12]

  /* Clear HSITRIM[4:0] bits */
  tmpreg &= ~RCC_CR_HSITRIM;
20001b7c:	68fb      	ldr	r3, [r7, #12]
20001b7e:	22f8      	movs	r2, #248	; 0xf8
20001b80:	4393      	bics	r3, r2
20001b82:	60fb      	str	r3, [r7, #12]

  /* Set the HSITRIM[4:0] bits according to HSICalibrationValue value */
  tmpreg |= (uint32_t)HSICalibrationValue << 3;
20001b84:	1dfb      	adds	r3, r7, #7
20001b86:	781b      	ldrb	r3, [r3, #0]
20001b88:	00db      	lsls	r3, r3, #3
20001b8a:	68fa      	ldr	r2, [r7, #12]
20001b8c:	4313      	orrs	r3, r2
20001b8e:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CR = tmpreg;
20001b90:	4b03      	ldr	r3, [pc, #12]	; (20001ba0 <RCC_AdjustHSICalibrationValue+0x3a>)
20001b92:	68fa      	ldr	r2, [r7, #12]
20001b94:	601a      	str	r2, [r3, #0]
}
20001b96:	46c0      	nop			; (mov r8, r8)
20001b98:	46bd      	mov	sp, r7
20001b9a:	b004      	add	sp, #16
20001b9c:	bd80      	pop	{r7, pc}
20001b9e:	46c0      	nop			; (mov r8, r8)
20001ba0:	40023800 	andmi	r3, r2, r0, lsl #16

20001ba4 <RCC_HSICmd>:
  * @note   When the HSI is stopped, HSIRDY flag goes low after 6 HSI oscillator
  *         clock cycles.  
  * @retval None
  */
void RCC_HSICmd(FunctionalState NewState)
{
20001ba4:	b580      	push	{r7, lr}
20001ba6:	b082      	sub	sp, #8
20001ba8:	af00      	add	r7, sp, #0
20001baa:	0002      	movs	r2, r0
20001bac:	1dfb      	adds	r3, r7, #7
20001bae:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CR_HSION_BB = (uint32_t)NewState;
20001bb0:	4b03      	ldr	r3, [pc, #12]	; (20001bc0 <RCC_HSICmd+0x1c>)
20001bb2:	1dfa      	adds	r2, r7, #7
20001bb4:	7812      	ldrb	r2, [r2, #0]
20001bb6:	601a      	str	r2, [r3, #0]
}
20001bb8:	46c0      	nop			; (mov r8, r8)
20001bba:	46bd      	mov	sp, r7
20001bbc:	b002      	add	sp, #8
20001bbe:	bd80      	pop	{r7, pc}
20001bc0:	42470000 	submi	r0, r7, #0

20001bc4 <RCC_LSEConfig>:
  *            @arg RCC_LSE_ON: turn ON the LSE oscillator
  *            @arg RCC_LSE_Bypass: LSE oscillator bypassed with external clock
  * @retval None
  */
void RCC_LSEConfig(uint8_t RCC_LSE)
{
20001bc4:	b580      	push	{r7, lr}
20001bc6:	b082      	sub	sp, #8
20001bc8:	af00      	add	r7, sp, #0
20001bca:	0002      	movs	r2, r0
20001bcc:	1dfb      	adds	r3, r7, #7
20001bce:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_LSE(RCC_LSE));

  /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
  /* Reset LSEON bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
20001bd0:	4b0c      	ldr	r3, [pc, #48]	; (20001c04 <RCC_LSEConfig+0x40>)
20001bd2:	2200      	movs	r2, #0
20001bd4:	701a      	strb	r2, [r3, #0]

  /* Reset LSEBYP bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
20001bd6:	4b0b      	ldr	r3, [pc, #44]	; (20001c04 <RCC_LSEConfig+0x40>)
20001bd8:	2200      	movs	r2, #0
20001bda:	701a      	strb	r2, [r3, #0]

  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch (RCC_LSE)
20001bdc:	1dfb      	adds	r3, r7, #7
20001bde:	781b      	ldrb	r3, [r3, #0]
20001be0:	2b01      	cmp	r3, #1
20001be2:	d002      	beq.n	20001bea <RCC_LSEConfig+0x26>
20001be4:	2b04      	cmp	r3, #4
20001be6:	d004      	beq.n	20001bf2 <RCC_LSEConfig+0x2e>
    case RCC_LSE_Bypass:
      /* Set LSEBYP and LSEON bits */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
      break;
    default:
      break;
20001be8:	e007      	b.n	20001bfa <RCC_LSEConfig+0x36>
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_ON;
20001bea:	4b06      	ldr	r3, [pc, #24]	; (20001c04 <RCC_LSEConfig+0x40>)
20001bec:	2201      	movs	r2, #1
20001bee:	701a      	strb	r2, [r3, #0]
      break;
20001bf0:	e003      	b.n	20001bfa <RCC_LSEConfig+0x36>
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
20001bf2:	4b04      	ldr	r3, [pc, #16]	; (20001c04 <RCC_LSEConfig+0x40>)
20001bf4:	2205      	movs	r2, #5
20001bf6:	701a      	strb	r2, [r3, #0]
      break;
20001bf8:	46c0      	nop			; (mov r8, r8)
  }
}
20001bfa:	46c0      	nop			; (mov r8, r8)
20001bfc:	46bd      	mov	sp, r7
20001bfe:	b002      	add	sp, #8
20001c00:	bd80      	pop	{r7, pc}
20001c02:	46c0      	nop			; (mov r8, r8)
20001c04:	40023870 	andmi	r3, r2, r0, ror r8

20001c08 <RCC_LSICmd>:
  * @note   When the LSI is stopped, LSIRDY flag goes low after 6 LSI oscillator
  *         clock cycles. 
  * @retval None
  */
void RCC_LSICmd(FunctionalState NewState)
{
20001c08:	b580      	push	{r7, lr}
20001c0a:	b082      	sub	sp, #8
20001c0c:	af00      	add	r7, sp, #0
20001c0e:	0002      	movs	r2, r0
20001c10:	1dfb      	adds	r3, r7, #7
20001c12:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CSR_LSION_BB = (uint32_t)NewState;
20001c14:	4b03      	ldr	r3, [pc, #12]	; (20001c24 <RCC_LSICmd+0x1c>)
20001c16:	1dfa      	adds	r2, r7, #7
20001c18:	7812      	ldrb	r2, [r2, #0]
20001c1a:	601a      	str	r2, [r3, #0]
}
20001c1c:	46c0      	nop			; (mov r8, r8)
20001c1e:	46bd      	mov	sp, r7
20001c20:	b002      	add	sp, #8
20001c22:	bd80      	pop	{r7, pc}
20001c24:	42470e80 	submi	r0, r7, #128, 28	; 0x800

20001c28 <RCC_PLLConfig>:
  *         correctly.
  *   
  * @retval None
  */
void RCC_PLLConfig(uint32_t RCC_PLLSource, uint32_t PLLM, uint32_t PLLN, uint32_t PLLP, uint32_t PLLQ)
{
20001c28:	b580      	push	{r7, lr}
20001c2a:	b084      	sub	sp, #16
20001c2c:	af00      	add	r7, sp, #0
20001c2e:	60f8      	str	r0, [r7, #12]
20001c30:	60b9      	str	r1, [r7, #8]
20001c32:	607a      	str	r2, [r7, #4]
20001c34:	603b      	str	r3, [r7, #0]
  assert_param(IS_RCC_PLLM_VALUE(PLLM));
  assert_param(IS_RCC_PLLN_VALUE(PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLP));
  assert_param(IS_RCC_PLLQ_VALUE(PLLQ));

  RCC->PLLCFGR = PLLM | (PLLN << 6) | (((PLLP >> 1) -1) << 16) | (RCC_PLLSource) |
20001c36:	687b      	ldr	r3, [r7, #4]
20001c38:	019a      	lsls	r2, r3, #6
20001c3a:	68bb      	ldr	r3, [r7, #8]
20001c3c:	431a      	orrs	r2, r3
20001c3e:	683b      	ldr	r3, [r7, #0]
20001c40:	085b      	lsrs	r3, r3, #1
20001c42:	3b01      	subs	r3, #1
20001c44:	041b      	lsls	r3, r3, #16
20001c46:	431a      	orrs	r2, r3
20001c48:	68fb      	ldr	r3, [r7, #12]
20001c4a:	431a      	orrs	r2, r3
20001c4c:	0011      	movs	r1, r2
                 (PLLQ << 24);
20001c4e:	69bb      	ldr	r3, [r7, #24]
20001c50:	061a      	lsls	r2, r3, #24
  RCC->PLLCFGR = PLLM | (PLLN << 6) | (((PLLP >> 1) -1) << 16) | (RCC_PLLSource) |
20001c52:	4b03      	ldr	r3, [pc, #12]	; (20001c60 <RCC_PLLConfig+0x38>)
20001c54:	430a      	orrs	r2, r1
20001c56:	605a      	str	r2, [r3, #4]
}
20001c58:	46c0      	nop			; (mov r8, r8)
20001c5a:	46bd      	mov	sp, r7
20001c5c:	b004      	add	sp, #16
20001c5e:	bd80      	pop	{r7, pc}
20001c60:	40023800 	andmi	r3, r2, r0, lsl #16

20001c64 <RCC_PLLCmd>:
  * @note   The main PLL is disabled by hardware when entering STOP and STANDBY modes.
  * @param  NewState: new state of the main PLL. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_PLLCmd(FunctionalState NewState)
{
20001c64:	b580      	push	{r7, lr}
20001c66:	b082      	sub	sp, #8
20001c68:	af00      	add	r7, sp, #0
20001c6a:	0002      	movs	r2, r0
20001c6c:	1dfb      	adds	r3, r7, #7
20001c6e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_PLLON_BB = (uint32_t)NewState;
20001c70:	4b03      	ldr	r3, [pc, #12]	; (20001c80 <RCC_PLLCmd+0x1c>)
20001c72:	1dfa      	adds	r2, r7, #7
20001c74:	7812      	ldrb	r2, [r2, #0]
20001c76:	601a      	str	r2, [r3, #0]
}
20001c78:	46c0      	nop			; (mov r8, r8)
20001c7a:	46bd      	mov	sp, r7
20001c7c:	b002      	add	sp, #8
20001c7e:	bd80      	pop	{r7, pc}
20001c80:	42470060 	submi	r0, r7, #96	; 0x60

20001c84 <RCC_PLLI2SConfig>:
  *         on the I2S clock frequency.
  *   
  * @retval None
  */
void RCC_PLLI2SConfig(uint32_t PLLI2SN, uint32_t PLLI2SR)
{
20001c84:	b580      	push	{r7, lr}
20001c86:	b082      	sub	sp, #8
20001c88:	af00      	add	r7, sp, #0
20001c8a:	6078      	str	r0, [r7, #4]
20001c8c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RCC_PLLI2SN_VALUE(PLLI2SN));
  assert_param(IS_RCC_PLLI2SR_VALUE(PLLI2SR));

  RCC->PLLI2SCFGR = (PLLI2SN << 6) | (PLLI2SR << 28);
20001c8e:	687b      	ldr	r3, [r7, #4]
20001c90:	019a      	lsls	r2, r3, #6
20001c92:	683b      	ldr	r3, [r7, #0]
20001c94:	071b      	lsls	r3, r3, #28
20001c96:	4904      	ldr	r1, [pc, #16]	; (20001ca8 <RCC_PLLI2SConfig+0x24>)
20001c98:	4313      	orrs	r3, r2
20001c9a:	2284      	movs	r2, #132	; 0x84
20001c9c:	508b      	str	r3, [r1, r2]
}
20001c9e:	46c0      	nop			; (mov r8, r8)
20001ca0:	46bd      	mov	sp, r7
20001ca2:	b002      	add	sp, #8
20001ca4:	bd80      	pop	{r7, pc}
20001ca6:	46c0      	nop			; (mov r8, r8)
20001ca8:	40023800 	andmi	r3, r2, r0, lsl #16

20001cac <RCC_PLLI2SCmd>:
  * @note   The PLLI2S is disabled by hardware when entering STOP and STANDBY modes.  
  * @param  NewState: new state of the PLLI2S. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_PLLI2SCmd(FunctionalState NewState)
{
20001cac:	b580      	push	{r7, lr}
20001cae:	b082      	sub	sp, #8
20001cb0:	af00      	add	r7, sp, #0
20001cb2:	0002      	movs	r2, r0
20001cb4:	1dfb      	adds	r3, r7, #7
20001cb6:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_PLLI2SON_BB = (uint32_t)NewState;
20001cb8:	4b03      	ldr	r3, [pc, #12]	; (20001cc8 <RCC_PLLI2SCmd+0x1c>)
20001cba:	1dfa      	adds	r2, r7, #7
20001cbc:	7812      	ldrb	r2, [r2, #0]
20001cbe:	601a      	str	r2, [r3, #0]
}
20001cc0:	46c0      	nop			; (mov r8, r8)
20001cc2:	46bd      	mov	sp, r7
20001cc4:	b002      	add	sp, #8
20001cc6:	bd80      	pop	{r7, pc}
20001cc8:	42470068 	submi	r0, r7, #104	; 0x68

20001ccc <RCC_PLLSAIConfig>:
  *          This parameter must be a number between 2 and 7.
  *   
  * @retval None
  */
void RCC_PLLSAIConfig(uint32_t PLLSAIN, uint32_t PLLSAIQ, uint32_t PLLSAIR)
{
20001ccc:	b580      	push	{r7, lr}
20001cce:	b084      	sub	sp, #16
20001cd0:	af00      	add	r7, sp, #0
20001cd2:	60f8      	str	r0, [r7, #12]
20001cd4:	60b9      	str	r1, [r7, #8]
20001cd6:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_PLLSAIN_VALUE(PLLSAIN));
  assert_param(IS_RCC_PLLSAIR_VALUE(PLLSAIR));
  assert_param(IS_RCC_PLLSAIQ_VALUE(PLLSAIQ));
  
  RCC->PLLSAICFGR = (PLLSAIN << 6) | (PLLSAIQ << 24) | (PLLSAIR << 28);
20001cd8:	68fb      	ldr	r3, [r7, #12]
20001cda:	019a      	lsls	r2, r3, #6
20001cdc:	68bb      	ldr	r3, [r7, #8]
20001cde:	061b      	lsls	r3, r3, #24
20001ce0:	431a      	orrs	r2, r3
20001ce2:	687b      	ldr	r3, [r7, #4]
20001ce4:	071b      	lsls	r3, r3, #28
20001ce6:	4904      	ldr	r1, [pc, #16]	; (20001cf8 <RCC_PLLSAIConfig+0x2c>)
20001ce8:	4313      	orrs	r3, r2
20001cea:	2288      	movs	r2, #136	; 0x88
20001cec:	508b      	str	r3, [r1, r2]
}
20001cee:	46c0      	nop			; (mov r8, r8)
20001cf0:	46bd      	mov	sp, r7
20001cf2:	b004      	add	sp, #16
20001cf4:	bd80      	pop	{r7, pc}
20001cf6:	46c0      	nop			; (mov r8, r8)
20001cf8:	40023800 	andmi	r3, r2, r0, lsl #16

20001cfc <RCC_PLLSAICmd>:
  * @note   The PLLSAI is disabled by hardware when entering STOP and STANDBY modes.  
  * @param  NewState: new state of the PLLSAI. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_PLLSAICmd(FunctionalState NewState)
{
20001cfc:	b580      	push	{r7, lr}
20001cfe:	b082      	sub	sp, #8
20001d00:	af00      	add	r7, sp, #0
20001d02:	0002      	movs	r2, r0
20001d04:	1dfb      	adds	r3, r7, #7
20001d06:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_PLLSAION_BB = (uint32_t)NewState;
20001d08:	4b03      	ldr	r3, [pc, #12]	; (20001d18 <RCC_PLLSAICmd+0x1c>)
20001d0a:	1dfa      	adds	r2, r7, #7
20001d0c:	7812      	ldrb	r2, [r2, #0]
20001d0e:	601a      	str	r2, [r3, #0]
}
20001d10:	46c0      	nop			; (mov r8, r8)
20001d12:	46bd      	mov	sp, r7
20001d14:	b002      	add	sp, #8
20001d16:	bd80      	pop	{r7, pc}
20001d18:	42470070 	submi	r0, r7, #112	; 0x70

20001d1c <RCC_ClockSecuritySystemCmd>:
  * @param  NewState: new state of the Clock Security System.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_ClockSecuritySystemCmd(FunctionalState NewState)
{
20001d1c:	b580      	push	{r7, lr}
20001d1e:	b082      	sub	sp, #8
20001d20:	af00      	add	r7, sp, #0
20001d22:	0002      	movs	r2, r0
20001d24:	1dfb      	adds	r3, r7, #7
20001d26:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_CSSON_BB = (uint32_t)NewState;
20001d28:	4b03      	ldr	r3, [pc, #12]	; (20001d38 <RCC_ClockSecuritySystemCmd+0x1c>)
20001d2a:	1dfa      	adds	r2, r7, #7
20001d2c:	7812      	ldrb	r2, [r2, #0]
20001d2e:	601a      	str	r2, [r3, #0]
}
20001d30:	46c0      	nop			; (mov r8, r8)
20001d32:	46bd      	mov	sp, r7
20001d34:	b002      	add	sp, #8
20001d36:	bd80      	pop	{r7, pc}
20001d38:	4247004c 	submi	r0, r7, #76	; 0x4c

20001d3c <RCC_MCO1Config>:
  *            @arg RCC_MCO1Div_4: division by 4 applied to MCO1 clock
  *            @arg RCC_MCO1Div_5: division by 5 applied to MCO1 clock
  * @retval None
  */
void RCC_MCO1Config(uint32_t RCC_MCO1Source, uint32_t RCC_MCO1Div)
{
20001d3c:	b580      	push	{r7, lr}
20001d3e:	b084      	sub	sp, #16
20001d40:	af00      	add	r7, sp, #0
20001d42:	6078      	str	r0, [r7, #4]
20001d44:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
20001d46:	2300      	movs	r3, #0
20001d48:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_MCO1SOURCE(RCC_MCO1Source));
  assert_param(IS_RCC_MCO1DIV(RCC_MCO1Div));  

  tmpreg = RCC->CFGR;
20001d4a:	4b0a      	ldr	r3, [pc, #40]	; (20001d74 <RCC_MCO1Config+0x38>)
20001d4c:	689b      	ldr	r3, [r3, #8]
20001d4e:	60fb      	str	r3, [r7, #12]

  /* Clear MCO1[1:0] and MCO1PRE[2:0] bits */
  tmpreg &= CFGR_MCO1_RESET_MASK;
20001d50:	68fb      	ldr	r3, [r7, #12]
20001d52:	4a09      	ldr	r2, [pc, #36]	; (20001d78 <RCC_MCO1Config+0x3c>)
20001d54:	4013      	ands	r3, r2
20001d56:	60fb      	str	r3, [r7, #12]

  /* Select MCO1 clock source and prescaler */
  tmpreg |= RCC_MCO1Source | RCC_MCO1Div;
20001d58:	687a      	ldr	r2, [r7, #4]
20001d5a:	683b      	ldr	r3, [r7, #0]
20001d5c:	4313      	orrs	r3, r2
20001d5e:	68fa      	ldr	r2, [r7, #12]
20001d60:	4313      	orrs	r3, r2
20001d62:	60fb      	str	r3, [r7, #12]
  
  /* Store the new value */
  RCC->CFGR = tmpreg;
20001d64:	4b03      	ldr	r3, [pc, #12]	; (20001d74 <RCC_MCO1Config+0x38>)
20001d66:	68fa      	ldr	r2, [r7, #12]
20001d68:	609a      	str	r2, [r3, #8]

#if defined(STM32F410xx)
  RCC_MCO1Cmd(ENABLE);
#endif /* STM32F410xx */   
}
20001d6a:	46c0      	nop			; (mov r8, r8)
20001d6c:	46bd      	mov	sp, r7
20001d6e:	b004      	add	sp, #16
20001d70:	bd80      	pop	{r7, pc}
20001d72:	46c0      	nop			; (mov r8, r8)
20001d74:	40023800 	andmi	r3, r2, r0, lsl #16
20001d78:	f89fffff 			; <UNDEFINED> instruction: 0xf89fffff

20001d7c <RCC_MCO2Config>:
  * @note  For STM32F410xx devices to output I2SCLK clock on MCO2 you should have
  *        at last one of the SPI clocks enabled (SPI1, SPI2 or SPI5).
  * @retval None
  */
void RCC_MCO2Config(uint32_t RCC_MCO2Source, uint32_t RCC_MCO2Div)
{
20001d7c:	b580      	push	{r7, lr}
20001d7e:	b084      	sub	sp, #16
20001d80:	af00      	add	r7, sp, #0
20001d82:	6078      	str	r0, [r7, #4]
20001d84:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
20001d86:	2300      	movs	r3, #0
20001d88:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_MCO2SOURCE(RCC_MCO2Source));
  assert_param(IS_RCC_MCO2DIV(RCC_MCO2Div));
  
  tmpreg = RCC->CFGR;
20001d8a:	4b0a      	ldr	r3, [pc, #40]	; (20001db4 <RCC_MCO2Config+0x38>)
20001d8c:	689b      	ldr	r3, [r3, #8]
20001d8e:	60fb      	str	r3, [r7, #12]
  
  /* Clear MCO2 and MCO2PRE[2:0] bits */
  tmpreg &= CFGR_MCO2_RESET_MASK;
20001d90:	68fb      	ldr	r3, [r7, #12]
20001d92:	015b      	lsls	r3, r3, #5
20001d94:	095b      	lsrs	r3, r3, #5
20001d96:	60fb      	str	r3, [r7, #12]

  /* Select MCO2 clock source and prescaler */
  tmpreg |= RCC_MCO2Source | RCC_MCO2Div;
20001d98:	687a      	ldr	r2, [r7, #4]
20001d9a:	683b      	ldr	r3, [r7, #0]
20001d9c:	4313      	orrs	r3, r2
20001d9e:	68fa      	ldr	r2, [r7, #12]
20001da0:	4313      	orrs	r3, r2
20001da2:	60fb      	str	r3, [r7, #12]
  
  /* Store the new value */
  RCC->CFGR = tmpreg;
20001da4:	4b03      	ldr	r3, [pc, #12]	; (20001db4 <RCC_MCO2Config+0x38>)
20001da6:	68fa      	ldr	r2, [r7, #12]
20001da8:	609a      	str	r2, [r3, #8]

#if defined(STM32F410xx)
  RCC_MCO2Cmd(ENABLE);
#endif /* STM32F410xx */   
}
20001daa:	46c0      	nop			; (mov r8, r8)
20001dac:	46bd      	mov	sp, r7
20001dae:	b004      	add	sp, #16
20001db0:	bd80      	pop	{r7, pc}
20001db2:	46c0      	nop			; (mov r8, r8)
20001db4:	40023800 	andmi	r3, r2, r0, lsl #16

20001db8 <RCC_SYSCLKConfig>:
  *            @arg RCC_SYSCLKSource_PLLCLK: PLL selected as system clock source (RCC_SYSCLKSource_PLLPCLK for STM32F446xx devices)
  *            @arg RCC_SYSCLKSource_PLLRCLK: PLL R selected as system clock source only for STM32F412xG, STM32F413_423xx and STM32F446xx devices
  * @retval None
  */
void RCC_SYSCLKConfig(uint32_t RCC_SYSCLKSource)
{
20001db8:	b580      	push	{r7, lr}
20001dba:	b084      	sub	sp, #16
20001dbc:	af00      	add	r7, sp, #0
20001dbe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
20001dc0:	2300      	movs	r3, #0
20001dc2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_SYSCLK_SOURCE(RCC_SYSCLKSource));

  tmpreg = RCC->CFGR;
20001dc4:	4b08      	ldr	r3, [pc, #32]	; (20001de8 <RCC_SYSCLKConfig+0x30>)
20001dc6:	689b      	ldr	r3, [r3, #8]
20001dc8:	60fb      	str	r3, [r7, #12]

  /* Clear SW[1:0] bits */
  tmpreg &= ~RCC_CFGR_SW;
20001dca:	68fb      	ldr	r3, [r7, #12]
20001dcc:	2203      	movs	r2, #3
20001dce:	4393      	bics	r3, r2
20001dd0:	60fb      	str	r3, [r7, #12]

  /* Set SW[1:0] bits according to RCC_SYSCLKSource value */
  tmpreg |= RCC_SYSCLKSource;
20001dd2:	68fa      	ldr	r2, [r7, #12]
20001dd4:	687b      	ldr	r3, [r7, #4]
20001dd6:	4313      	orrs	r3, r2
20001dd8:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;
20001dda:	4b03      	ldr	r3, [pc, #12]	; (20001de8 <RCC_SYSCLKConfig+0x30>)
20001ddc:	68fa      	ldr	r2, [r7, #12]
20001dde:	609a      	str	r2, [r3, #8]
}
20001de0:	46c0      	nop			; (mov r8, r8)
20001de2:	46bd      	mov	sp, r7
20001de4:	b004      	add	sp, #16
20001de6:	bd80      	pop	{r7, pc}
20001de8:	40023800 	andmi	r3, r2, r0, lsl #16

20001dec <RCC_GetSYSCLKSource>:
  *              - 0x04: HSE used as system clock
  *              - 0x08: PLL used as system clock (PLL P for STM32F446xx devices)
  *              - 0x0C: PLL R used as system clock (only for STM32F412xG, STM32F413_423xx and STM32F446xx devices)
  */
uint8_t RCC_GetSYSCLKSource(void)
{
20001dec:	b580      	push	{r7, lr}
20001dee:	af00      	add	r7, sp, #0
  return ((uint8_t)(RCC->CFGR & RCC_CFGR_SWS));
20001df0:	4b04      	ldr	r3, [pc, #16]	; (20001e04 <RCC_GetSYSCLKSource+0x18>)
20001df2:	689b      	ldr	r3, [r3, #8]
20001df4:	b2db      	uxtb	r3, r3
20001df6:	220c      	movs	r2, #12
20001df8:	4013      	ands	r3, r2
20001dfa:	b2db      	uxtb	r3, r3
}
20001dfc:	0018      	movs	r0, r3
20001dfe:	46bd      	mov	sp, r7
20001e00:	bd80      	pop	{r7, pc}
20001e02:	46c0      	nop			; (mov r8, r8)
20001e04:	40023800 	andmi	r3, r2, r0, lsl #16

20001e08 <RCC_HCLKConfig>:
  *            @arg RCC_SYSCLK_Div256: AHB clock = SYSCLK/256
  *            @arg RCC_SYSCLK_Div512: AHB clock = SYSCLK/512
  * @retval None
  */
void RCC_HCLKConfig(uint32_t RCC_SYSCLK)
{
20001e08:	b580      	push	{r7, lr}
20001e0a:	b084      	sub	sp, #16
20001e0c:	af00      	add	r7, sp, #0
20001e0e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
20001e10:	2300      	movs	r3, #0
20001e12:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_HCLK(RCC_SYSCLK));

  tmpreg = RCC->CFGR;
20001e14:	4b08      	ldr	r3, [pc, #32]	; (20001e38 <RCC_HCLKConfig+0x30>)
20001e16:	689b      	ldr	r3, [r3, #8]
20001e18:	60fb      	str	r3, [r7, #12]

  /* Clear HPRE[3:0] bits */
  tmpreg &= ~RCC_CFGR_HPRE;
20001e1a:	68fb      	ldr	r3, [r7, #12]
20001e1c:	22f0      	movs	r2, #240	; 0xf0
20001e1e:	4393      	bics	r3, r2
20001e20:	60fb      	str	r3, [r7, #12]

  /* Set HPRE[3:0] bits according to RCC_SYSCLK value */
  tmpreg |= RCC_SYSCLK;
20001e22:	68fa      	ldr	r2, [r7, #12]
20001e24:	687b      	ldr	r3, [r7, #4]
20001e26:	4313      	orrs	r3, r2
20001e28:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;
20001e2a:	4b03      	ldr	r3, [pc, #12]	; (20001e38 <RCC_HCLKConfig+0x30>)
20001e2c:	68fa      	ldr	r2, [r7, #12]
20001e2e:	609a      	str	r2, [r3, #8]
}
20001e30:	46c0      	nop			; (mov r8, r8)
20001e32:	46bd      	mov	sp, r7
20001e34:	b004      	add	sp, #16
20001e36:	bd80      	pop	{r7, pc}
20001e38:	40023800 	andmi	r3, r2, r0, lsl #16

20001e3c <RCC_PCLK1Config>:
  *            @arg RCC_HCLK_Div8:  APB1 clock = HCLK/8
  *            @arg RCC_HCLK_Div16: APB1 clock = HCLK/16
  * @retval None
  */
void RCC_PCLK1Config(uint32_t RCC_HCLK)
{
20001e3c:	b580      	push	{r7, lr}
20001e3e:	b084      	sub	sp, #16
20001e40:	af00      	add	r7, sp, #0
20001e42:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
20001e44:	2300      	movs	r3, #0
20001e46:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));

  tmpreg = RCC->CFGR;
20001e48:	4b08      	ldr	r3, [pc, #32]	; (20001e6c <RCC_PCLK1Config+0x30>)
20001e4a:	689b      	ldr	r3, [r3, #8]
20001e4c:	60fb      	str	r3, [r7, #12]

  /* Clear PPRE1[2:0] bits */
  tmpreg &= ~RCC_CFGR_PPRE1;
20001e4e:	68fb      	ldr	r3, [r7, #12]
20001e50:	4a07      	ldr	r2, [pc, #28]	; (20001e70 <RCC_PCLK1Config+0x34>)
20001e52:	4013      	ands	r3, r2
20001e54:	60fb      	str	r3, [r7, #12]

  /* Set PPRE1[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK;
20001e56:	68fa      	ldr	r2, [r7, #12]
20001e58:	687b      	ldr	r3, [r7, #4]
20001e5a:	4313      	orrs	r3, r2
20001e5c:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;
20001e5e:	4b03      	ldr	r3, [pc, #12]	; (20001e6c <RCC_PCLK1Config+0x30>)
20001e60:	68fa      	ldr	r2, [r7, #12]
20001e62:	609a      	str	r2, [r3, #8]
}
20001e64:	46c0      	nop			; (mov r8, r8)
20001e66:	46bd      	mov	sp, r7
20001e68:	b004      	add	sp, #16
20001e6a:	bd80      	pop	{r7, pc}
20001e6c:	40023800 	andmi	r3, r2, r0, lsl #16
20001e70:	ffffe3ff 			; <UNDEFINED> instruction: 0xffffe3ff

20001e74 <RCC_PCLK2Config>:
  *            @arg RCC_HCLK_Div8:  APB2 clock = HCLK/8
  *            @arg RCC_HCLK_Div16: APB2 clock = HCLK/16
  * @retval None
  */
void RCC_PCLK2Config(uint32_t RCC_HCLK)
{
20001e74:	b580      	push	{r7, lr}
20001e76:	b084      	sub	sp, #16
20001e78:	af00      	add	r7, sp, #0
20001e7a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
20001e7c:	2300      	movs	r3, #0
20001e7e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));

  tmpreg = RCC->CFGR;
20001e80:	4b09      	ldr	r3, [pc, #36]	; (20001ea8 <RCC_PCLK2Config+0x34>)
20001e82:	689b      	ldr	r3, [r3, #8]
20001e84:	60fb      	str	r3, [r7, #12]

  /* Clear PPRE2[2:0] bits */
  tmpreg &= ~RCC_CFGR_PPRE2;
20001e86:	68fb      	ldr	r3, [r7, #12]
20001e88:	4a08      	ldr	r2, [pc, #32]	; (20001eac <RCC_PCLK2Config+0x38>)
20001e8a:	4013      	ands	r3, r2
20001e8c:	60fb      	str	r3, [r7, #12]

  /* Set PPRE2[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK << 3;
20001e8e:	687b      	ldr	r3, [r7, #4]
20001e90:	00db      	lsls	r3, r3, #3
20001e92:	68fa      	ldr	r2, [r7, #12]
20001e94:	4313      	orrs	r3, r2
20001e96:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;
20001e98:	4b03      	ldr	r3, [pc, #12]	; (20001ea8 <RCC_PCLK2Config+0x34>)
20001e9a:	68fa      	ldr	r2, [r7, #12]
20001e9c:	609a      	str	r2, [r3, #8]
}
20001e9e:	46c0      	nop			; (mov r8, r8)
20001ea0:	46bd      	mov	sp, r7
20001ea2:	b004      	add	sp, #16
20001ea4:	bd80      	pop	{r7, pc}
20001ea6:	46c0      	nop			; (mov r8, r8)
20001ea8:	40023800 	andmi	r3, r2, r0, lsl #16
20001eac:	ffff1fff 			; <UNDEFINED> instruction: 0xffff1fff

20001eb0 <RCC_GetClocksFreq>:
  *         configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
20001eb0:	b580      	push	{r7, lr}
20001eb2:	b088      	sub	sp, #32
20001eb4:	af00      	add	r7, sp, #0
20001eb6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
20001eb8:	2300      	movs	r3, #0
20001eba:	61bb      	str	r3, [r7, #24]
20001ebc:	2300      	movs	r3, #0
20001ebe:	617b      	str	r3, [r7, #20]
20001ec0:	2300      	movs	r3, #0
20001ec2:	61fb      	str	r3, [r7, #28]
20001ec4:	2302      	movs	r3, #2
20001ec6:	613b      	str	r3, [r7, #16]
20001ec8:	2300      	movs	r3, #0
20001eca:	60fb      	str	r3, [r7, #12]
20001ecc:	2302      	movs	r3, #2
20001ece:	60bb      	str	r3, [r7, #8]
#if defined(STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F446xx)  
  uint32_t pllr = 2;
#endif /* STM32F412xG || STM32F413_423xx || STM32F446xx */
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
20001ed0:	4b49      	ldr	r3, [pc, #292]	; (20001ff8 <RCC_GetClocksFreq+0x148>)
20001ed2:	689b      	ldr	r3, [r3, #8]
20001ed4:	220c      	movs	r2, #12
20001ed6:	4013      	ands	r3, r2
20001ed8:	61bb      	str	r3, [r7, #24]
  
  switch (tmp)
20001eda:	69bb      	ldr	r3, [r7, #24]
20001edc:	2b04      	cmp	r3, #4
20001ede:	d007      	beq.n	20001ef0 <RCC_GetClocksFreq+0x40>
20001ee0:	2b08      	cmp	r3, #8
20001ee2:	d009      	beq.n	20001ef8 <RCC_GetClocksFreq+0x48>
20001ee4:	2b00      	cmp	r3, #0
20001ee6:	d141      	bne.n	20001f6c <RCC_GetClocksFreq+0xbc>
  {
  case 0x00:  /* HSI used as system clock source */
    RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
20001ee8:	687b      	ldr	r3, [r7, #4]
20001eea:	4a44      	ldr	r2, [pc, #272]	; (20001ffc <RCC_GetClocksFreq+0x14c>)
20001eec:	601a      	str	r2, [r3, #0]
    break;
20001eee:	e041      	b.n	20001f74 <RCC_GetClocksFreq+0xc4>
  case 0x04:  /* HSE used as system clock  source */
    RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
20001ef0:	687b      	ldr	r3, [r7, #4]
20001ef2:	4a43      	ldr	r2, [pc, #268]	; (20002000 <RCC_GetClocksFreq+0x150>)
20001ef4:	601a      	str	r2, [r3, #0]
    break;
20001ef6:	e03d      	b.n	20001f74 <RCC_GetClocksFreq+0xc4>
  case 0x08:  /* PLL P used as system clock  source */
    
    /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLP
    */    
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
20001ef8:	4b3f      	ldr	r3, [pc, #252]	; (20001ff8 <RCC_GetClocksFreq+0x148>)
20001efa:	685b      	ldr	r3, [r3, #4]
20001efc:	0d9b      	lsrs	r3, r3, #22
20001efe:	2201      	movs	r2, #1
20001f00:	4013      	ands	r3, r2
20001f02:	60fb      	str	r3, [r7, #12]
    pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
20001f04:	4b3c      	ldr	r3, [pc, #240]	; (20001ff8 <RCC_GetClocksFreq+0x148>)
20001f06:	685b      	ldr	r3, [r3, #4]
20001f08:	223f      	movs	r2, #63	; 0x3f
20001f0a:	4013      	ands	r3, r2
20001f0c:	60bb      	str	r3, [r7, #8]
    
    if (pllsource != 0)
20001f0e:	68fb      	ldr	r3, [r7, #12]
20001f10:	2b00      	cmp	r3, #0
20001f12:	d00d      	beq.n	20001f30 <RCC_GetClocksFreq+0x80>
    {
      /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
20001f14:	68b9      	ldr	r1, [r7, #8]
20001f16:	483a      	ldr	r0, [pc, #232]	; (20002000 <RCC_GetClocksFreq+0x150>)
20001f18:	f001 fe36 	bl	20003b88 <__udivsi3>
20001f1c:	0003      	movs	r3, r0
20001f1e:	001a      	movs	r2, r3
20001f20:	4b35      	ldr	r3, [pc, #212]	; (20001ff8 <RCC_GetClocksFreq+0x148>)
20001f22:	685b      	ldr	r3, [r3, #4]
20001f24:	099b      	lsrs	r3, r3, #6
20001f26:	05db      	lsls	r3, r3, #23
20001f28:	0ddb      	lsrs	r3, r3, #23
20001f2a:	4353      	muls	r3, r2
20001f2c:	61fb      	str	r3, [r7, #28]
20001f2e:	e00c      	b.n	20001f4a <RCC_GetClocksFreq+0x9a>
    }
    else
    {
      /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
20001f30:	68b9      	ldr	r1, [r7, #8]
20001f32:	4832      	ldr	r0, [pc, #200]	; (20001ffc <RCC_GetClocksFreq+0x14c>)
20001f34:	f001 fe28 	bl	20003b88 <__udivsi3>
20001f38:	0003      	movs	r3, r0
20001f3a:	001a      	movs	r2, r3
20001f3c:	4b2e      	ldr	r3, [pc, #184]	; (20001ff8 <RCC_GetClocksFreq+0x148>)
20001f3e:	685b      	ldr	r3, [r3, #4]
20001f40:	099b      	lsrs	r3, r3, #6
20001f42:	05db      	lsls	r3, r3, #23
20001f44:	0ddb      	lsrs	r3, r3, #23
20001f46:	4353      	muls	r3, r2
20001f48:	61fb      	str	r3, [r7, #28]
    }
    
    pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
20001f4a:	4b2b      	ldr	r3, [pc, #172]	; (20001ff8 <RCC_GetClocksFreq+0x148>)
20001f4c:	685b      	ldr	r3, [r3, #4]
20001f4e:	0c1b      	lsrs	r3, r3, #16
20001f50:	2203      	movs	r2, #3
20001f52:	4013      	ands	r3, r2
20001f54:	3301      	adds	r3, #1
20001f56:	005b      	lsls	r3, r3, #1
20001f58:	613b      	str	r3, [r7, #16]
    RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
20001f5a:	6939      	ldr	r1, [r7, #16]
20001f5c:	69f8      	ldr	r0, [r7, #28]
20001f5e:	f001 fe13 	bl	20003b88 <__udivsi3>
20001f62:	0003      	movs	r3, r0
20001f64:	001a      	movs	r2, r3
20001f66:	687b      	ldr	r3, [r7, #4]
20001f68:	601a      	str	r2, [r3, #0]
    break;
20001f6a:	e003      	b.n	20001f74 <RCC_GetClocksFreq+0xc4>
    RCC_Clocks->SYSCLK_Frequency = pllvco/pllr;    
    break;
#endif /* STM32F412xG || STM32F413_423xx || STM32F446xx */
    
  default:
    RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
20001f6c:	687b      	ldr	r3, [r7, #4]
20001f6e:	4a23      	ldr	r2, [pc, #140]	; (20001ffc <RCC_GetClocksFreq+0x14c>)
20001f70:	601a      	str	r2, [r3, #0]
    break;
20001f72:	46c0      	nop			; (mov r8, r8)
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/
  
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
20001f74:	4b20      	ldr	r3, [pc, #128]	; (20001ff8 <RCC_GetClocksFreq+0x148>)
20001f76:	689b      	ldr	r3, [r3, #8]
20001f78:	22f0      	movs	r2, #240	; 0xf0
20001f7a:	4013      	ands	r3, r2
20001f7c:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 4;
20001f7e:	69bb      	ldr	r3, [r7, #24]
20001f80:	091b      	lsrs	r3, r3, #4
20001f82:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
20001f84:	4a1f      	ldr	r2, [pc, #124]	; (20002004 <RCC_GetClocksFreq+0x154>)
20001f86:	69bb      	ldr	r3, [r7, #24]
20001f88:	18d3      	adds	r3, r2, r3
20001f8a:	781b      	ldrb	r3, [r3, #0]
20001f8c:	b2db      	uxtb	r3, r3
20001f8e:	617b      	str	r3, [r7, #20]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
20001f90:	687b      	ldr	r3, [r7, #4]
20001f92:	681a      	ldr	r2, [r3, #0]
20001f94:	697b      	ldr	r3, [r7, #20]
20001f96:	40da      	lsrs	r2, r3
20001f98:	687b      	ldr	r3, [r7, #4]
20001f9a:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
20001f9c:	4b16      	ldr	r3, [pc, #88]	; (20001ff8 <RCC_GetClocksFreq+0x148>)
20001f9e:	689a      	ldr	r2, [r3, #8]
20001fa0:	23e0      	movs	r3, #224	; 0xe0
20001fa2:	015b      	lsls	r3, r3, #5
20001fa4:	4013      	ands	r3, r2
20001fa6:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 10;
20001fa8:	69bb      	ldr	r3, [r7, #24]
20001faa:	0a9b      	lsrs	r3, r3, #10
20001fac:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
20001fae:	4a15      	ldr	r2, [pc, #84]	; (20002004 <RCC_GetClocksFreq+0x154>)
20001fb0:	69bb      	ldr	r3, [r7, #24]
20001fb2:	18d3      	adds	r3, r2, r3
20001fb4:	781b      	ldrb	r3, [r3, #0]
20001fb6:	b2db      	uxtb	r3, r3
20001fb8:	617b      	str	r3, [r7, #20]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
20001fba:	687b      	ldr	r3, [r7, #4]
20001fbc:	685a      	ldr	r2, [r3, #4]
20001fbe:	697b      	ldr	r3, [r7, #20]
20001fc0:	40da      	lsrs	r2, r3
20001fc2:	687b      	ldr	r3, [r7, #4]
20001fc4:	609a      	str	r2, [r3, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
20001fc6:	4b0c      	ldr	r3, [pc, #48]	; (20001ff8 <RCC_GetClocksFreq+0x148>)
20001fc8:	689a      	ldr	r2, [r3, #8]
20001fca:	23e0      	movs	r3, #224	; 0xe0
20001fcc:	021b      	lsls	r3, r3, #8
20001fce:	4013      	ands	r3, r2
20001fd0:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 13;
20001fd2:	69bb      	ldr	r3, [r7, #24]
20001fd4:	0b5b      	lsrs	r3, r3, #13
20001fd6:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
20001fd8:	4a0a      	ldr	r2, [pc, #40]	; (20002004 <RCC_GetClocksFreq+0x154>)
20001fda:	69bb      	ldr	r3, [r7, #24]
20001fdc:	18d3      	adds	r3, r2, r3
20001fde:	781b      	ldrb	r3, [r3, #0]
20001fe0:	b2db      	uxtb	r3, r3
20001fe2:	617b      	str	r3, [r7, #20]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
20001fe4:	687b      	ldr	r3, [r7, #4]
20001fe6:	685a      	ldr	r2, [r3, #4]
20001fe8:	697b      	ldr	r3, [r7, #20]
20001fea:	40da      	lsrs	r2, r3
20001fec:	687b      	ldr	r3, [r7, #4]
20001fee:	60da      	str	r2, [r3, #12]
}
20001ff0:	46c0      	nop			; (mov r8, r8)
20001ff2:	46bd      	mov	sp, r7
20001ff4:	b008      	add	sp, #32
20001ff6:	bd80      	pop	{r7, pc}
20001ff8:	40023800 	andmi	r3, r2, r0, lsl #16
20001ffc:	00f42400 	rscseq	r2, r4, r0, lsl #8
20002000:	017d7840 	cmneq	sp, r0, asr #16
20002004:	20003da0 	andcs	r3, r0, r0, lsr #27

20002008 <RCC_RTCCLKConfig>:
  *         RTC clock source).
  *  
  * @retval None
  */
void RCC_RTCCLKConfig(uint32_t RCC_RTCCLKSource)
{
20002008:	b580      	push	{r7, lr}
2000200a:	b084      	sub	sp, #16
2000200c:	af00      	add	r7, sp, #0
2000200e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
20002010:	2300      	movs	r3, #0
20002012:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_RTCCLK_SOURCE(RCC_RTCCLKSource));

  if ((RCC_RTCCLKSource & 0x00000300) == 0x00000300)
20002014:	687a      	ldr	r2, [r7, #4]
20002016:	23c0      	movs	r3, #192	; 0xc0
20002018:	009b      	lsls	r3, r3, #2
2000201a:	401a      	ands	r2, r3
2000201c:	23c0      	movs	r3, #192	; 0xc0
2000201e:	009b      	lsls	r3, r3, #2
20002020:	429a      	cmp	r2, r3
20002022:	d10f      	bne.n	20002044 <RCC_RTCCLKConfig+0x3c>
  { /* If HSE is selected as RTC clock source, configure HSE division factor for RTC clock */
    tmpreg = RCC->CFGR;
20002024:	4b0d      	ldr	r3, [pc, #52]	; (2000205c <RCC_RTCCLKConfig+0x54>)
20002026:	689b      	ldr	r3, [r3, #8]
20002028:	60fb      	str	r3, [r7, #12]

    /* Clear RTCPRE[4:0] bits */
    tmpreg &= ~RCC_CFGR_RTCPRE;
2000202a:	68fb      	ldr	r3, [r7, #12]
2000202c:	4a0c      	ldr	r2, [pc, #48]	; (20002060 <RCC_RTCCLKConfig+0x58>)
2000202e:	4013      	ands	r3, r2
20002030:	60fb      	str	r3, [r7, #12]

    /* Configure HSE division factor for RTC clock */
    tmpreg |= (RCC_RTCCLKSource & 0xFFFFCFF);
20002032:	687b      	ldr	r3, [r7, #4]
20002034:	4a0b      	ldr	r2, [pc, #44]	; (20002064 <RCC_RTCCLKConfig+0x5c>)
20002036:	4013      	ands	r3, r2
20002038:	68fa      	ldr	r2, [r7, #12]
2000203a:	4313      	orrs	r3, r2
2000203c:	60fb      	str	r3, [r7, #12]

    /* Store the new value */
    RCC->CFGR = tmpreg;
2000203e:	4b07      	ldr	r3, [pc, #28]	; (2000205c <RCC_RTCCLKConfig+0x54>)
20002040:	68fa      	ldr	r2, [r7, #12]
20002042:	609a      	str	r2, [r3, #8]
  }
    
  /* Select the RTC clock source */
  RCC->BDCR |= (RCC_RTCCLKSource & 0x00000FFF);
20002044:	4b05      	ldr	r3, [pc, #20]	; (2000205c <RCC_RTCCLKConfig+0x54>)
20002046:	6f19      	ldr	r1, [r3, #112]	; 0x70
20002048:	687b      	ldr	r3, [r7, #4]
2000204a:	051b      	lsls	r3, r3, #20
2000204c:	0d1a      	lsrs	r2, r3, #20
2000204e:	4b03      	ldr	r3, [pc, #12]	; (2000205c <RCC_RTCCLKConfig+0x54>)
20002050:	430a      	orrs	r2, r1
20002052:	671a      	str	r2, [r3, #112]	; 0x70
}
20002054:	46c0      	nop			; (mov r8, r8)
20002056:	46bd      	mov	sp, r7
20002058:	b004      	add	sp, #16
2000205a:	bd80      	pop	{r7, pc}
2000205c:	40023800 	andmi	r3, r2, r0, lsl #16
20002060:	ffe0ffff 			; <UNDEFINED> instruction: 0xffe0ffff
20002064:	0ffffcff 	svceq	0x00fffcff

20002068 <RCC_RTCCLKCmd>:
  *         using the RCC_RTCCLKConfig function.
  * @param  NewState: new state of the RTC clock. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_RTCCLKCmd(FunctionalState NewState)
{
20002068:	b580      	push	{r7, lr}
2000206a:	b082      	sub	sp, #8
2000206c:	af00      	add	r7, sp, #0
2000206e:	0002      	movs	r2, r0
20002070:	1dfb      	adds	r3, r7, #7
20002072:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) BDCR_RTCEN_BB = (uint32_t)NewState;
20002074:	4b03      	ldr	r3, [pc, #12]	; (20002084 <RCC_RTCCLKCmd+0x1c>)
20002076:	1dfa      	adds	r2, r7, #7
20002078:	7812      	ldrb	r2, [r2, #0]
2000207a:	601a      	str	r2, [r3, #0]
}
2000207c:	46c0      	nop			; (mov r8, r8)
2000207e:	46bd      	mov	sp, r7
20002080:	b002      	add	sp, #8
20002082:	bd80      	pop	{r7, pc}
20002084:	42470e3c 	submi	r0, r7, #60, 28	; 0x3c0

20002088 <RCC_BackupResetCmd>:
  * @param  NewState: new state of the Backup domain reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_BackupResetCmd(FunctionalState NewState)
{
20002088:	b580      	push	{r7, lr}
2000208a:	b082      	sub	sp, #8
2000208c:	af00      	add	r7, sp, #0
2000208e:	0002      	movs	r2, r0
20002090:	1dfb      	adds	r3, r7, #7
20002092:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) BDCR_BDRST_BB = (uint32_t)NewState;
20002094:	4b03      	ldr	r3, [pc, #12]	; (200020a4 <RCC_BackupResetCmd+0x1c>)
20002096:	1dfa      	adds	r2, r7, #7
20002098:	7812      	ldrb	r2, [r2, #0]
2000209a:	601a      	str	r2, [r3, #0]
}
2000209c:	46c0      	nop			; (mov r8, r8)
2000209e:	46bd      	mov	sp, r7
200020a0:	b002      	add	sp, #8
200020a2:	bd80      	pop	{r7, pc}
200020a4:	42470e40 	submi	r0, r7, #64, 28	; 0x400

200020a8 <RCC_I2SCLKConfig>:
  *            @arg RCC_I2S2CLKSource_Ext: External clock mapped on the I2S_CKIN pin
  *                                        used as I2S clock source
  * @retval None
  */
void RCC_I2SCLKConfig(uint32_t RCC_I2SCLKSource)
{
200020a8:	b580      	push	{r7, lr}
200020aa:	b082      	sub	sp, #8
200020ac:	af00      	add	r7, sp, #0
200020ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_I2SCLK_SOURCE(RCC_I2SCLKSource));

  *(__IO uint32_t *) CFGR_I2SSRC_BB = RCC_I2SCLKSource;  
200020b0:	4b03      	ldr	r3, [pc, #12]	; (200020c0 <RCC_I2SCLKConfig+0x18>)
200020b2:	687a      	ldr	r2, [r7, #4]
200020b4:	601a      	str	r2, [r3, #0]
}
200020b6:	46c0      	nop			; (mov r8, r8)
200020b8:	46bd      	mov	sp, r7
200020ba:	b002      	add	sp, #8
200020bc:	bd80      	pop	{r7, pc}
200020be:	46c0      	nop			; (mov r8, r8)
200020c0:	4247015c 	submi	r0, r7, #92, 2

200020c4 <RCC_SAIBlockACLKConfig>:
  *            @arg RCC_SAIACLKSource_Ext: External clock mapped on the I2S_CKIN pin
  *                                        used as SAI1 Block A clock
  * @retval None
  */
void RCC_SAIBlockACLKConfig(uint32_t RCC_SAIBlockACLKSource)
{
200020c4:	b580      	push	{r7, lr}
200020c6:	b084      	sub	sp, #16
200020c8:	af00      	add	r7, sp, #0
200020ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
200020cc:	2300      	movs	r3, #0
200020ce:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_SAIACLK_SOURCE(RCC_SAIBlockACLKSource));
  
  tmpreg = RCC->DCKCFGR;
200020d0:	4a09      	ldr	r2, [pc, #36]	; (200020f8 <RCC_SAIBlockACLKConfig+0x34>)
200020d2:	238c      	movs	r3, #140	; 0x8c
200020d4:	58d3      	ldr	r3, [r2, r3]
200020d6:	60fb      	str	r3, [r7, #12]

  /* Clear RCC_DCKCFGR_SAI1ASRC[1:0] bits */
  tmpreg &= ~RCC_DCKCFGR_SAI1ASRC;
200020d8:	68fb      	ldr	r3, [r7, #12]
200020da:	4a08      	ldr	r2, [pc, #32]	; (200020fc <RCC_SAIBlockACLKConfig+0x38>)
200020dc:	4013      	ands	r3, r2
200020de:	60fb      	str	r3, [r7, #12]

  /* Set SAI Block A source selection value */
  tmpreg |= RCC_SAIBlockACLKSource;
200020e0:	68fa      	ldr	r2, [r7, #12]
200020e2:	687b      	ldr	r3, [r7, #4]
200020e4:	4313      	orrs	r3, r2
200020e6:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->DCKCFGR = tmpreg;
200020e8:	4903      	ldr	r1, [pc, #12]	; (200020f8 <RCC_SAIBlockACLKConfig+0x34>)
200020ea:	228c      	movs	r2, #140	; 0x8c
200020ec:	68fb      	ldr	r3, [r7, #12]
200020ee:	508b      	str	r3, [r1, r2]
}
200020f0:	46c0      	nop			; (mov r8, r8)
200020f2:	46bd      	mov	sp, r7
200020f4:	b004      	add	sp, #16
200020f6:	bd80      	pop	{r7, pc}
200020f8:	40023800 	andmi	r3, r2, r0, lsl #16
200020fc:	ffcfffff 			; <UNDEFINED> instruction: 0xffcfffff

20002100 <RCC_SAIBlockBCLKConfig>:
  *            @arg RCC_SAIBCLKSource_Ext: External clock mapped on the I2S_CKIN pin
  *                                        used as SAI1 Block B clock
  * @retval None
  */
void RCC_SAIBlockBCLKConfig(uint32_t RCC_SAIBlockBCLKSource)
{
20002100:	b580      	push	{r7, lr}
20002102:	b084      	sub	sp, #16
20002104:	af00      	add	r7, sp, #0
20002106:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
20002108:	2300      	movs	r3, #0
2000210a:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_SAIBCLK_SOURCE(RCC_SAIBlockBCLKSource));
  
  tmpreg = RCC->DCKCFGR;
2000210c:	4a09      	ldr	r2, [pc, #36]	; (20002134 <RCC_SAIBlockBCLKConfig+0x34>)
2000210e:	238c      	movs	r3, #140	; 0x8c
20002110:	58d3      	ldr	r3, [r2, r3]
20002112:	60fb      	str	r3, [r7, #12]

  /* Clear RCC_DCKCFGR_SAI1BSRC[1:0] bits */
  tmpreg &= ~RCC_DCKCFGR_SAI1BSRC;
20002114:	68fb      	ldr	r3, [r7, #12]
20002116:	4a08      	ldr	r2, [pc, #32]	; (20002138 <RCC_SAIBlockBCLKConfig+0x38>)
20002118:	4013      	ands	r3, r2
2000211a:	60fb      	str	r3, [r7, #12]

  /* Set SAI Block B source selection value */
  tmpreg |= RCC_SAIBlockBCLKSource;
2000211c:	68fa      	ldr	r2, [r7, #12]
2000211e:	687b      	ldr	r3, [r7, #4]
20002120:	4313      	orrs	r3, r2
20002122:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->DCKCFGR = tmpreg;
20002124:	4903      	ldr	r1, [pc, #12]	; (20002134 <RCC_SAIBlockBCLKConfig+0x34>)
20002126:	228c      	movs	r2, #140	; 0x8c
20002128:	68fb      	ldr	r3, [r7, #12]
2000212a:	508b      	str	r3, [r1, r2]
}
2000212c:	46c0      	nop			; (mov r8, r8)
2000212e:	46bd      	mov	sp, r7
20002130:	b004      	add	sp, #16
20002132:	bd80      	pop	{r7, pc}
20002134:	40023800 	andmi	r3, r2, r0, lsl #16
20002138:	ff3fffff 			; <UNDEFINED> instruction: 0xff3fffff

2000213c <RCC_SAIPLLI2SClkDivConfig>:
  *          SAI1 clock frequency = f(PLLI2S_Q) / RCC_PLLI2SDivQ 
  *              
  * @retval None
  */
void RCC_SAIPLLI2SClkDivConfig(uint32_t RCC_PLLI2SDivQ)  
{
2000213c:	b580      	push	{r7, lr}
2000213e:	b084      	sub	sp, #16
20002140:	af00      	add	r7, sp, #0
20002142:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
20002144:	2300      	movs	r3, #0
20002146:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(RCC_PLLI2SDivQ));
  
  tmpreg = RCC->DCKCFGR;
20002148:	4a0a      	ldr	r2, [pc, #40]	; (20002174 <RCC_SAIPLLI2SClkDivConfig+0x38>)
2000214a:	238c      	movs	r3, #140	; 0x8c
2000214c:	58d3      	ldr	r3, [r2, r3]
2000214e:	60fb      	str	r3, [r7, #12]

  /* Clear PLLI2SDIVQ[4:0] bits */
  tmpreg &= ~(RCC_DCKCFGR_PLLI2SDIVQ);
20002150:	68fb      	ldr	r3, [r7, #12]
20002152:	221f      	movs	r2, #31
20002154:	4393      	bics	r3, r2
20002156:	60fb      	str	r3, [r7, #12]

  /* Set PLLI2SDIVQ values */
  tmpreg |= (RCC_PLLI2SDivQ - 1);
20002158:	687b      	ldr	r3, [r7, #4]
2000215a:	3b01      	subs	r3, #1
2000215c:	68fa      	ldr	r2, [r7, #12]
2000215e:	4313      	orrs	r3, r2
20002160:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->DCKCFGR = tmpreg;
20002162:	4904      	ldr	r1, [pc, #16]	; (20002174 <RCC_SAIPLLI2SClkDivConfig+0x38>)
20002164:	228c      	movs	r2, #140	; 0x8c
20002166:	68fb      	ldr	r3, [r7, #12]
20002168:	508b      	str	r3, [r1, r2]
}
2000216a:	46c0      	nop			; (mov r8, r8)
2000216c:	46bd      	mov	sp, r7
2000216e:	b004      	add	sp, #16
20002170:	bd80      	pop	{r7, pc}
20002172:	46c0      	nop			; (mov r8, r8)
20002174:	40023800 	andmi	r3, r2, r0, lsl #16

20002178 <RCC_SAIPLLSAIClkDivConfig>:
  *          SAI1 clock frequency = f(PLLSAI_Q) / RCC_PLLSAIDivQ  
  *              
  * @retval None
  */
void RCC_SAIPLLSAIClkDivConfig(uint32_t RCC_PLLSAIDivQ)  
{
20002178:	b580      	push	{r7, lr}
2000217a:	b084      	sub	sp, #16
2000217c:	af00      	add	r7, sp, #0
2000217e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
20002180:	2300      	movs	r3, #0
20002182:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(RCC_PLLSAIDivQ));
  
  tmpreg = RCC->DCKCFGR;
20002184:	4a0a      	ldr	r2, [pc, #40]	; (200021b0 <RCC_SAIPLLSAIClkDivConfig+0x38>)
20002186:	238c      	movs	r3, #140	; 0x8c
20002188:	58d3      	ldr	r3, [r2, r3]
2000218a:	60fb      	str	r3, [r7, #12]

  /* Clear PLLI2SDIVQ[4:0] and PLLSAIDIVQ[4:0] bits */
  tmpreg &= ~(RCC_DCKCFGR_PLLSAIDIVQ);
2000218c:	68fb      	ldr	r3, [r7, #12]
2000218e:	4a09      	ldr	r2, [pc, #36]	; (200021b4 <RCC_SAIPLLSAIClkDivConfig+0x3c>)
20002190:	4013      	ands	r3, r2
20002192:	60fb      	str	r3, [r7, #12]

  /* Set PLLSAIDIVQ values */
  tmpreg |= ((RCC_PLLSAIDivQ - 1) << 8);
20002194:	687b      	ldr	r3, [r7, #4]
20002196:	3b01      	subs	r3, #1
20002198:	021b      	lsls	r3, r3, #8
2000219a:	68fa      	ldr	r2, [r7, #12]
2000219c:	4313      	orrs	r3, r2
2000219e:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->DCKCFGR = tmpreg;
200021a0:	4903      	ldr	r1, [pc, #12]	; (200021b0 <RCC_SAIPLLSAIClkDivConfig+0x38>)
200021a2:	228c      	movs	r2, #140	; 0x8c
200021a4:	68fb      	ldr	r3, [r7, #12]
200021a6:	508b      	str	r3, [r1, r2]
}
200021a8:	46c0      	nop			; (mov r8, r8)
200021aa:	46bd      	mov	sp, r7
200021ac:	b004      	add	sp, #16
200021ae:	bd80      	pop	{r7, pc}
200021b0:	40023800 	andmi	r3, r2, r0, lsl #16
200021b4:	ffffe0ff 			; <UNDEFINED> instruction: 0xffffe0ff

200021b8 <RCC_LTDCCLKDivConfig>:
  *            @arg RCC_PLLSAIDivR_Div16: LTDC clock = f(PLLSAI_R)/16
  *            
  * @retval None
  */
void RCC_LTDCCLKDivConfig(uint32_t RCC_PLLSAIDivR)
{
200021b8:	b580      	push	{r7, lr}
200021ba:	b084      	sub	sp, #16
200021bc:	af00      	add	r7, sp, #0
200021be:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
200021c0:	2300      	movs	r3, #0
200021c2:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_PLLSAI_DIVR_VALUE(RCC_PLLSAIDivR));
  
  tmpreg = RCC->DCKCFGR;
200021c4:	4a09      	ldr	r2, [pc, #36]	; (200021ec <RCC_LTDCCLKDivConfig+0x34>)
200021c6:	238c      	movs	r3, #140	; 0x8c
200021c8:	58d3      	ldr	r3, [r2, r3]
200021ca:	60fb      	str	r3, [r7, #12]

  /* Clear PLLSAIDIVR[2:0] bits */
  tmpreg &= ~RCC_DCKCFGR_PLLSAIDIVR;
200021cc:	68fb      	ldr	r3, [r7, #12]
200021ce:	4a08      	ldr	r2, [pc, #32]	; (200021f0 <RCC_LTDCCLKDivConfig+0x38>)
200021d0:	4013      	ands	r3, r2
200021d2:	60fb      	str	r3, [r7, #12]

  /* Set PLLSAIDIVR values */
  tmpreg |= RCC_PLLSAIDivR;
200021d4:	68fa      	ldr	r2, [r7, #12]
200021d6:	687b      	ldr	r3, [r7, #4]
200021d8:	4313      	orrs	r3, r2
200021da:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->DCKCFGR = tmpreg;
200021dc:	4903      	ldr	r1, [pc, #12]	; (200021ec <RCC_LTDCCLKDivConfig+0x34>)
200021de:	228c      	movs	r2, #140	; 0x8c
200021e0:	68fb      	ldr	r3, [r7, #12]
200021e2:	508b      	str	r3, [r1, r2]
}
200021e4:	46c0      	nop			; (mov r8, r8)
200021e6:	46bd      	mov	sp, r7
200021e8:	b004      	add	sp, #16
200021ea:	bd80      	pop	{r7, pc}
200021ec:	40023800 	andmi	r3, r2, r0, lsl #16
200021f0:	fffcffff 			; <UNDEFINED> instruction: 0xfffcffff

200021f4 <RCC_TIMCLKPresConfig>:
  *                 else it is equal to [(HPRE * PPREx) / 4] if PPREx is corresponding 
  *                 to division by 8 or more.
  * @retval None
  */
void RCC_TIMCLKPresConfig(uint32_t RCC_TIMCLKPrescaler)
{
200021f4:	b580      	push	{r7, lr}
200021f6:	b082      	sub	sp, #8
200021f8:	af00      	add	r7, sp, #0
200021fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_TIMCLK_PRESCALER(RCC_TIMCLKPrescaler));

  *(__IO uint32_t *) DCKCFGR_TIMPRE_BB = RCC_TIMCLKPrescaler;
200021fc:	4b03      	ldr	r3, [pc, #12]	; (2000220c <RCC_TIMCLKPresConfig+0x18>)
200021fe:	687a      	ldr	r2, [r7, #4]
20002200:	601a      	str	r2, [r3, #0]
}
20002202:	46c0      	nop			; (mov r8, r8)
20002204:	46bd      	mov	sp, r7
20002206:	b002      	add	sp, #8
20002208:	bd80      	pop	{r7, pc}
2000220a:	46c0      	nop			; (mov r8, r8)
2000220c:	424711e0 	submi	r1, r7, #224, 2	; 0x38

20002210 <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
20002210:	b580      	push	{r7, lr}
20002212:	b082      	sub	sp, #8
20002214:	af00      	add	r7, sp, #0
20002216:	6078      	str	r0, [r7, #4]
20002218:	000a      	movs	r2, r1
2000221a:	1cfb      	adds	r3, r7, #3
2000221c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
2000221e:	1cfb      	adds	r3, r7, #3
20002220:	781b      	ldrb	r3, [r3, #0]
20002222:	2b00      	cmp	r3, #0
20002224:	d006      	beq.n	20002234 <RCC_AHB1PeriphClockCmd+0x24>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
20002226:	4b09      	ldr	r3, [pc, #36]	; (2000224c <RCC_AHB1PeriphClockCmd+0x3c>)
20002228:	6b19      	ldr	r1, [r3, #48]	; 0x30
2000222a:	4b08      	ldr	r3, [pc, #32]	; (2000224c <RCC_AHB1PeriphClockCmd+0x3c>)
2000222c:	687a      	ldr	r2, [r7, #4]
2000222e:	430a      	orrs	r2, r1
20002230:	631a      	str	r2, [r3, #48]	; 0x30
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
  }
}
20002232:	e006      	b.n	20002242 <RCC_AHB1PeriphClockCmd+0x32>
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
20002234:	4b05      	ldr	r3, [pc, #20]	; (2000224c <RCC_AHB1PeriphClockCmd+0x3c>)
20002236:	6b1a      	ldr	r2, [r3, #48]	; 0x30
20002238:	687b      	ldr	r3, [r7, #4]
2000223a:	43d9      	mvns	r1, r3
2000223c:	4b03      	ldr	r3, [pc, #12]	; (2000224c <RCC_AHB1PeriphClockCmd+0x3c>)
2000223e:	400a      	ands	r2, r1
20002240:	631a      	str	r2, [r3, #48]	; 0x30
}
20002242:	46c0      	nop			; (mov r8, r8)
20002244:	46bd      	mov	sp, r7
20002246:	b002      	add	sp, #8
20002248:	bd80      	pop	{r7, pc}
2000224a:	46c0      	nop			; (mov r8, r8)
2000224c:	40023800 	andmi	r3, r2, r0, lsl #16

20002250 <RCC_AHB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB2PeriphClockCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
{
20002250:	b580      	push	{r7, lr}
20002252:	b082      	sub	sp, #8
20002254:	af00      	add	r7, sp, #0
20002256:	6078      	str	r0, [r7, #4]
20002258:	000a      	movs	r2, r1
2000225a:	1cfb      	adds	r3, r7, #3
2000225c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
2000225e:	1cfb      	adds	r3, r7, #3
20002260:	781b      	ldrb	r3, [r3, #0]
20002262:	2b00      	cmp	r3, #0
20002264:	d006      	beq.n	20002274 <RCC_AHB2PeriphClockCmd+0x24>
  {
    RCC->AHB2ENR |= RCC_AHB2Periph;
20002266:	4b09      	ldr	r3, [pc, #36]	; (2000228c <RCC_AHB2PeriphClockCmd+0x3c>)
20002268:	6b59      	ldr	r1, [r3, #52]	; 0x34
2000226a:	4b08      	ldr	r3, [pc, #32]	; (2000228c <RCC_AHB2PeriphClockCmd+0x3c>)
2000226c:	687a      	ldr	r2, [r7, #4]
2000226e:	430a      	orrs	r2, r1
20002270:	635a      	str	r2, [r3, #52]	; 0x34
  }
  else
  {
    RCC->AHB2ENR &= ~RCC_AHB2Periph;
  }
}
20002272:	e006      	b.n	20002282 <RCC_AHB2PeriphClockCmd+0x32>
    RCC->AHB2ENR &= ~RCC_AHB2Periph;
20002274:	4b05      	ldr	r3, [pc, #20]	; (2000228c <RCC_AHB2PeriphClockCmd+0x3c>)
20002276:	6b5a      	ldr	r2, [r3, #52]	; 0x34
20002278:	687b      	ldr	r3, [r7, #4]
2000227a:	43d9      	mvns	r1, r3
2000227c:	4b03      	ldr	r3, [pc, #12]	; (2000228c <RCC_AHB2PeriphClockCmd+0x3c>)
2000227e:	400a      	ands	r2, r1
20002280:	635a      	str	r2, [r3, #52]	; 0x34
}
20002282:	46c0      	nop			; (mov r8, r8)
20002284:	46bd      	mov	sp, r7
20002286:	b002      	add	sp, #8
20002288:	bd80      	pop	{r7, pc}
2000228a:	46c0      	nop			; (mov r8, r8)
2000228c:	40023800 	andmi	r3, r2, r0, lsl #16

20002290 <RCC_AHB3PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB3PeriphClockCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
{
20002290:	b580      	push	{r7, lr}
20002292:	b082      	sub	sp, #8
20002294:	af00      	add	r7, sp, #0
20002296:	6078      	str	r0, [r7, #4]
20002298:	000a      	movs	r2, r1
2000229a:	1cfb      	adds	r3, r7, #3
2000229c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
2000229e:	1cfb      	adds	r3, r7, #3
200022a0:	781b      	ldrb	r3, [r3, #0]
200022a2:	2b00      	cmp	r3, #0
200022a4:	d006      	beq.n	200022b4 <RCC_AHB3PeriphClockCmd+0x24>
  {
    RCC->AHB3ENR |= RCC_AHB3Periph;
200022a6:	4b09      	ldr	r3, [pc, #36]	; (200022cc <RCC_AHB3PeriphClockCmd+0x3c>)
200022a8:	6b99      	ldr	r1, [r3, #56]	; 0x38
200022aa:	4b08      	ldr	r3, [pc, #32]	; (200022cc <RCC_AHB3PeriphClockCmd+0x3c>)
200022ac:	687a      	ldr	r2, [r7, #4]
200022ae:	430a      	orrs	r2, r1
200022b0:	639a      	str	r2, [r3, #56]	; 0x38
  }
  else
  {
    RCC->AHB3ENR &= ~RCC_AHB3Periph;
  }
}
200022b2:	e006      	b.n	200022c2 <RCC_AHB3PeriphClockCmd+0x32>
    RCC->AHB3ENR &= ~RCC_AHB3Periph;
200022b4:	4b05      	ldr	r3, [pc, #20]	; (200022cc <RCC_AHB3PeriphClockCmd+0x3c>)
200022b6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
200022b8:	687b      	ldr	r3, [r7, #4]
200022ba:	43d9      	mvns	r1, r3
200022bc:	4b03      	ldr	r3, [pc, #12]	; (200022cc <RCC_AHB3PeriphClockCmd+0x3c>)
200022be:	400a      	ands	r2, r1
200022c0:	639a      	str	r2, [r3, #56]	; 0x38
}
200022c2:	46c0      	nop			; (mov r8, r8)
200022c4:	46bd      	mov	sp, r7
200022c6:	b002      	add	sp, #8
200022c8:	bd80      	pop	{r7, pc}
200022ca:	46c0      	nop			; (mov r8, r8)
200022cc:	40023800 	andmi	r3, r2, r0, lsl #16

200022d0 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
200022d0:	b580      	push	{r7, lr}
200022d2:	b082      	sub	sp, #8
200022d4:	af00      	add	r7, sp, #0
200022d6:	6078      	str	r0, [r7, #4]
200022d8:	000a      	movs	r2, r1
200022da:	1cfb      	adds	r3, r7, #3
200022dc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
200022de:	1cfb      	adds	r3, r7, #3
200022e0:	781b      	ldrb	r3, [r3, #0]
200022e2:	2b00      	cmp	r3, #0
200022e4:	d006      	beq.n	200022f4 <RCC_APB1PeriphClockCmd+0x24>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
200022e6:	4b09      	ldr	r3, [pc, #36]	; (2000230c <RCC_APB1PeriphClockCmd+0x3c>)
200022e8:	6c19      	ldr	r1, [r3, #64]	; 0x40
200022ea:	4b08      	ldr	r3, [pc, #32]	; (2000230c <RCC_APB1PeriphClockCmd+0x3c>)
200022ec:	687a      	ldr	r2, [r7, #4]
200022ee:	430a      	orrs	r2, r1
200022f0:	641a      	str	r2, [r3, #64]	; 0x40
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
200022f2:	e006      	b.n	20002302 <RCC_APB1PeriphClockCmd+0x32>
    RCC->APB1ENR &= ~RCC_APB1Periph;
200022f4:	4b05      	ldr	r3, [pc, #20]	; (2000230c <RCC_APB1PeriphClockCmd+0x3c>)
200022f6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
200022f8:	687b      	ldr	r3, [r7, #4]
200022fa:	43d9      	mvns	r1, r3
200022fc:	4b03      	ldr	r3, [pc, #12]	; (2000230c <RCC_APB1PeriphClockCmd+0x3c>)
200022fe:	400a      	ands	r2, r1
20002300:	641a      	str	r2, [r3, #64]	; 0x40
}
20002302:	46c0      	nop			; (mov r8, r8)
20002304:	46bd      	mov	sp, r7
20002306:	b002      	add	sp, #8
20002308:	bd80      	pop	{r7, pc}
2000230a:	46c0      	nop			; (mov r8, r8)
2000230c:	40023800 	andmi	r3, r2, r0, lsl #16

20002310 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
20002310:	b580      	push	{r7, lr}
20002312:	b082      	sub	sp, #8
20002314:	af00      	add	r7, sp, #0
20002316:	6078      	str	r0, [r7, #4]
20002318:	000a      	movs	r2, r1
2000231a:	1cfb      	adds	r3, r7, #3
2000231c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
2000231e:	1cfb      	adds	r3, r7, #3
20002320:	781b      	ldrb	r3, [r3, #0]
20002322:	2b00      	cmp	r3, #0
20002324:	d006      	beq.n	20002334 <RCC_APB2PeriphClockCmd+0x24>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
20002326:	4b09      	ldr	r3, [pc, #36]	; (2000234c <RCC_APB2PeriphClockCmd+0x3c>)
20002328:	6c59      	ldr	r1, [r3, #68]	; 0x44
2000232a:	4b08      	ldr	r3, [pc, #32]	; (2000234c <RCC_APB2PeriphClockCmd+0x3c>)
2000232c:	687a      	ldr	r2, [r7, #4]
2000232e:	430a      	orrs	r2, r1
20002330:	645a      	str	r2, [r3, #68]	; 0x44
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
20002332:	e006      	b.n	20002342 <RCC_APB2PeriphClockCmd+0x32>
    RCC->APB2ENR &= ~RCC_APB2Periph;
20002334:	4b05      	ldr	r3, [pc, #20]	; (2000234c <RCC_APB2PeriphClockCmd+0x3c>)
20002336:	6c5a      	ldr	r2, [r3, #68]	; 0x44
20002338:	687b      	ldr	r3, [r7, #4]
2000233a:	43d9      	mvns	r1, r3
2000233c:	4b03      	ldr	r3, [pc, #12]	; (2000234c <RCC_APB2PeriphClockCmd+0x3c>)
2000233e:	400a      	ands	r2, r1
20002340:	645a      	str	r2, [r3, #68]	; 0x44
}
20002342:	46c0      	nop			; (mov r8, r8)
20002344:	46bd      	mov	sp, r7
20002346:	b002      	add	sp, #8
20002348:	bd80      	pop	{r7, pc}
2000234a:	46c0      	nop			; (mov r8, r8)
2000234c:	40023800 	andmi	r3, r2, r0, lsl #16

20002350 <RCC_AHB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphResetCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
20002350:	b580      	push	{r7, lr}
20002352:	b082      	sub	sp, #8
20002354:	af00      	add	r7, sp, #0
20002356:	6078      	str	r0, [r7, #4]
20002358:	000a      	movs	r2, r1
2000235a:	1cfb      	adds	r3, r7, #3
2000235c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_RESET_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
2000235e:	1cfb      	adds	r3, r7, #3
20002360:	781b      	ldrb	r3, [r3, #0]
20002362:	2b00      	cmp	r3, #0
20002364:	d006      	beq.n	20002374 <RCC_AHB1PeriphResetCmd+0x24>
  {
    RCC->AHB1RSTR |= RCC_AHB1Periph;
20002366:	4b09      	ldr	r3, [pc, #36]	; (2000238c <RCC_AHB1PeriphResetCmd+0x3c>)
20002368:	6919      	ldr	r1, [r3, #16]
2000236a:	4b08      	ldr	r3, [pc, #32]	; (2000238c <RCC_AHB1PeriphResetCmd+0x3c>)
2000236c:	687a      	ldr	r2, [r7, #4]
2000236e:	430a      	orrs	r2, r1
20002370:	611a      	str	r2, [r3, #16]
  }
  else
  {
    RCC->AHB1RSTR &= ~RCC_AHB1Periph;
  }
}
20002372:	e006      	b.n	20002382 <RCC_AHB1PeriphResetCmd+0x32>
    RCC->AHB1RSTR &= ~RCC_AHB1Periph;
20002374:	4b05      	ldr	r3, [pc, #20]	; (2000238c <RCC_AHB1PeriphResetCmd+0x3c>)
20002376:	691a      	ldr	r2, [r3, #16]
20002378:	687b      	ldr	r3, [r7, #4]
2000237a:	43d9      	mvns	r1, r3
2000237c:	4b03      	ldr	r3, [pc, #12]	; (2000238c <RCC_AHB1PeriphResetCmd+0x3c>)
2000237e:	400a      	ands	r2, r1
20002380:	611a      	str	r2, [r3, #16]
}
20002382:	46c0      	nop			; (mov r8, r8)
20002384:	46bd      	mov	sp, r7
20002386:	b002      	add	sp, #8
20002388:	bd80      	pop	{r7, pc}
2000238a:	46c0      	nop			; (mov r8, r8)
2000238c:	40023800 	andmi	r3, r2, r0, lsl #16

20002390 <RCC_AHB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB2PeriphResetCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
{
20002390:	b580      	push	{r7, lr}
20002392:	b082      	sub	sp, #8
20002394:	af00      	add	r7, sp, #0
20002396:	6078      	str	r0, [r7, #4]
20002398:	000a      	movs	r2, r1
2000239a:	1cfb      	adds	r3, r7, #3
2000239c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
2000239e:	1cfb      	adds	r3, r7, #3
200023a0:	781b      	ldrb	r3, [r3, #0]
200023a2:	2b00      	cmp	r3, #0
200023a4:	d006      	beq.n	200023b4 <RCC_AHB2PeriphResetCmd+0x24>
  {
    RCC->AHB2RSTR |= RCC_AHB2Periph;
200023a6:	4b09      	ldr	r3, [pc, #36]	; (200023cc <RCC_AHB2PeriphResetCmd+0x3c>)
200023a8:	6959      	ldr	r1, [r3, #20]
200023aa:	4b08      	ldr	r3, [pc, #32]	; (200023cc <RCC_AHB2PeriphResetCmd+0x3c>)
200023ac:	687a      	ldr	r2, [r7, #4]
200023ae:	430a      	orrs	r2, r1
200023b0:	615a      	str	r2, [r3, #20]
  }
  else
  {
    RCC->AHB2RSTR &= ~RCC_AHB2Periph;
  }
}
200023b2:	e006      	b.n	200023c2 <RCC_AHB2PeriphResetCmd+0x32>
    RCC->AHB2RSTR &= ~RCC_AHB2Periph;
200023b4:	4b05      	ldr	r3, [pc, #20]	; (200023cc <RCC_AHB2PeriphResetCmd+0x3c>)
200023b6:	695a      	ldr	r2, [r3, #20]
200023b8:	687b      	ldr	r3, [r7, #4]
200023ba:	43d9      	mvns	r1, r3
200023bc:	4b03      	ldr	r3, [pc, #12]	; (200023cc <RCC_AHB2PeriphResetCmd+0x3c>)
200023be:	400a      	ands	r2, r1
200023c0:	615a      	str	r2, [r3, #20]
}
200023c2:	46c0      	nop			; (mov r8, r8)
200023c4:	46bd      	mov	sp, r7
200023c6:	b002      	add	sp, #8
200023c8:	bd80      	pop	{r7, pc}
200023ca:	46c0      	nop			; (mov r8, r8)
200023cc:	40023800 	andmi	r3, r2, r0, lsl #16

200023d0 <RCC_AHB3PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB3PeriphResetCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
{
200023d0:	b580      	push	{r7, lr}
200023d2:	b082      	sub	sp, #8
200023d4:	af00      	add	r7, sp, #0
200023d6:	6078      	str	r0, [r7, #4]
200023d8:	000a      	movs	r2, r1
200023da:	1cfb      	adds	r3, r7, #3
200023dc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
200023de:	1cfb      	adds	r3, r7, #3
200023e0:	781b      	ldrb	r3, [r3, #0]
200023e2:	2b00      	cmp	r3, #0
200023e4:	d006      	beq.n	200023f4 <RCC_AHB3PeriphResetCmd+0x24>
  {
    RCC->AHB3RSTR |= RCC_AHB3Periph;
200023e6:	4b09      	ldr	r3, [pc, #36]	; (2000240c <RCC_AHB3PeriphResetCmd+0x3c>)
200023e8:	6999      	ldr	r1, [r3, #24]
200023ea:	4b08      	ldr	r3, [pc, #32]	; (2000240c <RCC_AHB3PeriphResetCmd+0x3c>)
200023ec:	687a      	ldr	r2, [r7, #4]
200023ee:	430a      	orrs	r2, r1
200023f0:	619a      	str	r2, [r3, #24]
  }
  else
  {
    RCC->AHB3RSTR &= ~RCC_AHB3Periph;
  }
}
200023f2:	e006      	b.n	20002402 <RCC_AHB3PeriphResetCmd+0x32>
    RCC->AHB3RSTR &= ~RCC_AHB3Periph;
200023f4:	4b05      	ldr	r3, [pc, #20]	; (2000240c <RCC_AHB3PeriphResetCmd+0x3c>)
200023f6:	699a      	ldr	r2, [r3, #24]
200023f8:	687b      	ldr	r3, [r7, #4]
200023fa:	43d9      	mvns	r1, r3
200023fc:	4b03      	ldr	r3, [pc, #12]	; (2000240c <RCC_AHB3PeriphResetCmd+0x3c>)
200023fe:	400a      	ands	r2, r1
20002400:	619a      	str	r2, [r3, #24]
}
20002402:	46c0      	nop			; (mov r8, r8)
20002404:	46bd      	mov	sp, r7
20002406:	b002      	add	sp, #8
20002408:	bd80      	pop	{r7, pc}
2000240a:	46c0      	nop			; (mov r8, r8)
2000240c:	40023800 	andmi	r3, r2, r0, lsl #16

20002410 <RCC_APB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
20002410:	b580      	push	{r7, lr}
20002412:	b082      	sub	sp, #8
20002414:	af00      	add	r7, sp, #0
20002416:	6078      	str	r0, [r7, #4]
20002418:	000a      	movs	r2, r1
2000241a:	1cfb      	adds	r3, r7, #3
2000241c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
2000241e:	1cfb      	adds	r3, r7, #3
20002420:	781b      	ldrb	r3, [r3, #0]
20002422:	2b00      	cmp	r3, #0
20002424:	d006      	beq.n	20002434 <RCC_APB1PeriphResetCmd+0x24>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
20002426:	4b09      	ldr	r3, [pc, #36]	; (2000244c <RCC_APB1PeriphResetCmd+0x3c>)
20002428:	6a19      	ldr	r1, [r3, #32]
2000242a:	4b08      	ldr	r3, [pc, #32]	; (2000244c <RCC_APB1PeriphResetCmd+0x3c>)
2000242c:	687a      	ldr	r2, [r7, #4]
2000242e:	430a      	orrs	r2, r1
20002430:	621a      	str	r2, [r3, #32]
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
  }
}
20002432:	e006      	b.n	20002442 <RCC_APB1PeriphResetCmd+0x32>
    RCC->APB1RSTR &= ~RCC_APB1Periph;
20002434:	4b05      	ldr	r3, [pc, #20]	; (2000244c <RCC_APB1PeriphResetCmd+0x3c>)
20002436:	6a1a      	ldr	r2, [r3, #32]
20002438:	687b      	ldr	r3, [r7, #4]
2000243a:	43d9      	mvns	r1, r3
2000243c:	4b03      	ldr	r3, [pc, #12]	; (2000244c <RCC_APB1PeriphResetCmd+0x3c>)
2000243e:	400a      	ands	r2, r1
20002440:	621a      	str	r2, [r3, #32]
}
20002442:	46c0      	nop			; (mov r8, r8)
20002444:	46bd      	mov	sp, r7
20002446:	b002      	add	sp, #8
20002448:	bd80      	pop	{r7, pc}
2000244a:	46c0      	nop			; (mov r8, r8)
2000244c:	40023800 	andmi	r3, r2, r0, lsl #16

20002450 <RCC_APB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
20002450:	b580      	push	{r7, lr}
20002452:	b082      	sub	sp, #8
20002454:	af00      	add	r7, sp, #0
20002456:	6078      	str	r0, [r7, #4]
20002458:	000a      	movs	r2, r1
2000245a:	1cfb      	adds	r3, r7, #3
2000245c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_RESET_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
2000245e:	1cfb      	adds	r3, r7, #3
20002460:	781b      	ldrb	r3, [r3, #0]
20002462:	2b00      	cmp	r3, #0
20002464:	d006      	beq.n	20002474 <RCC_APB2PeriphResetCmd+0x24>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
20002466:	4b09      	ldr	r3, [pc, #36]	; (2000248c <RCC_APB2PeriphResetCmd+0x3c>)
20002468:	6a59      	ldr	r1, [r3, #36]	; 0x24
2000246a:	4b08      	ldr	r3, [pc, #32]	; (2000248c <RCC_APB2PeriphResetCmd+0x3c>)
2000246c:	687a      	ldr	r2, [r7, #4]
2000246e:	430a      	orrs	r2, r1
20002470:	625a      	str	r2, [r3, #36]	; 0x24
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
  }
}
20002472:	e006      	b.n	20002482 <RCC_APB2PeriphResetCmd+0x32>
    RCC->APB2RSTR &= ~RCC_APB2Periph;
20002474:	4b05      	ldr	r3, [pc, #20]	; (2000248c <RCC_APB2PeriphResetCmd+0x3c>)
20002476:	6a5a      	ldr	r2, [r3, #36]	; 0x24
20002478:	687b      	ldr	r3, [r7, #4]
2000247a:	43d9      	mvns	r1, r3
2000247c:	4b03      	ldr	r3, [pc, #12]	; (2000248c <RCC_APB2PeriphResetCmd+0x3c>)
2000247e:	400a      	ands	r2, r1
20002480:	625a      	str	r2, [r3, #36]	; 0x24
}
20002482:	46c0      	nop			; (mov r8, r8)
20002484:	46bd      	mov	sp, r7
20002486:	b002      	add	sp, #8
20002488:	bd80      	pop	{r7, pc}
2000248a:	46c0      	nop			; (mov r8, r8)
2000248c:	40023800 	andmi	r3, r2, r0, lsl #16

20002490 <RCC_AHB1PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockLPModeCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
20002490:	b580      	push	{r7, lr}
20002492:	b082      	sub	sp, #8
20002494:	af00      	add	r7, sp, #0
20002496:	6078      	str	r0, [r7, #4]
20002498:	000a      	movs	r2, r1
2000249a:	1cfb      	adds	r3, r7, #3
2000249c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_LPMODE_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
2000249e:	1cfb      	adds	r3, r7, #3
200024a0:	781b      	ldrb	r3, [r3, #0]
200024a2:	2b00      	cmp	r3, #0
200024a4:	d006      	beq.n	200024b4 <RCC_AHB1PeriphClockLPModeCmd+0x24>
  {
    RCC->AHB1LPENR |= RCC_AHB1Periph;
200024a6:	4b09      	ldr	r3, [pc, #36]	; (200024cc <RCC_AHB1PeriphClockLPModeCmd+0x3c>)
200024a8:	6d19      	ldr	r1, [r3, #80]	; 0x50
200024aa:	4b08      	ldr	r3, [pc, #32]	; (200024cc <RCC_AHB1PeriphClockLPModeCmd+0x3c>)
200024ac:	687a      	ldr	r2, [r7, #4]
200024ae:	430a      	orrs	r2, r1
200024b0:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    RCC->AHB1LPENR &= ~RCC_AHB1Periph;
  }
}
200024b2:	e006      	b.n	200024c2 <RCC_AHB1PeriphClockLPModeCmd+0x32>
    RCC->AHB1LPENR &= ~RCC_AHB1Periph;
200024b4:	4b05      	ldr	r3, [pc, #20]	; (200024cc <RCC_AHB1PeriphClockLPModeCmd+0x3c>)
200024b6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
200024b8:	687b      	ldr	r3, [r7, #4]
200024ba:	43d9      	mvns	r1, r3
200024bc:	4b03      	ldr	r3, [pc, #12]	; (200024cc <RCC_AHB1PeriphClockLPModeCmd+0x3c>)
200024be:	400a      	ands	r2, r1
200024c0:	651a      	str	r2, [r3, #80]	; 0x50
}
200024c2:	46c0      	nop			; (mov r8, r8)
200024c4:	46bd      	mov	sp, r7
200024c6:	b002      	add	sp, #8
200024c8:	bd80      	pop	{r7, pc}
200024ca:	46c0      	nop			; (mov r8, r8)
200024cc:	40023800 	andmi	r3, r2, r0, lsl #16

200024d0 <RCC_AHB2PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB2PeriphClockLPModeCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
{
200024d0:	b580      	push	{r7, lr}
200024d2:	b082      	sub	sp, #8
200024d4:	af00      	add	r7, sp, #0
200024d6:	6078      	str	r0, [r7, #4]
200024d8:	000a      	movs	r2, r1
200024da:	1cfb      	adds	r3, r7, #3
200024dc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
200024de:	1cfb      	adds	r3, r7, #3
200024e0:	781b      	ldrb	r3, [r3, #0]
200024e2:	2b00      	cmp	r3, #0
200024e4:	d006      	beq.n	200024f4 <RCC_AHB2PeriphClockLPModeCmd+0x24>
  {
    RCC->AHB2LPENR |= RCC_AHB2Periph;
200024e6:	4b09      	ldr	r3, [pc, #36]	; (2000250c <RCC_AHB2PeriphClockLPModeCmd+0x3c>)
200024e8:	6d59      	ldr	r1, [r3, #84]	; 0x54
200024ea:	4b08      	ldr	r3, [pc, #32]	; (2000250c <RCC_AHB2PeriphClockLPModeCmd+0x3c>)
200024ec:	687a      	ldr	r2, [r7, #4]
200024ee:	430a      	orrs	r2, r1
200024f0:	655a      	str	r2, [r3, #84]	; 0x54
  }
  else
  {
    RCC->AHB2LPENR &= ~RCC_AHB2Periph;
  }
}
200024f2:	e006      	b.n	20002502 <RCC_AHB2PeriphClockLPModeCmd+0x32>
    RCC->AHB2LPENR &= ~RCC_AHB2Periph;
200024f4:	4b05      	ldr	r3, [pc, #20]	; (2000250c <RCC_AHB2PeriphClockLPModeCmd+0x3c>)
200024f6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
200024f8:	687b      	ldr	r3, [r7, #4]
200024fa:	43d9      	mvns	r1, r3
200024fc:	4b03      	ldr	r3, [pc, #12]	; (2000250c <RCC_AHB2PeriphClockLPModeCmd+0x3c>)
200024fe:	400a      	ands	r2, r1
20002500:	655a      	str	r2, [r3, #84]	; 0x54
}
20002502:	46c0      	nop			; (mov r8, r8)
20002504:	46bd      	mov	sp, r7
20002506:	b002      	add	sp, #8
20002508:	bd80      	pop	{r7, pc}
2000250a:	46c0      	nop			; (mov r8, r8)
2000250c:	40023800 	andmi	r3, r2, r0, lsl #16

20002510 <RCC_AHB3PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB3PeriphClockLPModeCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
{
20002510:	b580      	push	{r7, lr}
20002512:	b082      	sub	sp, #8
20002514:	af00      	add	r7, sp, #0
20002516:	6078      	str	r0, [r7, #4]
20002518:	000a      	movs	r2, r1
2000251a:	1cfb      	adds	r3, r7, #3
2000251c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
2000251e:	1cfb      	adds	r3, r7, #3
20002520:	781b      	ldrb	r3, [r3, #0]
20002522:	2b00      	cmp	r3, #0
20002524:	d006      	beq.n	20002534 <RCC_AHB3PeriphClockLPModeCmd+0x24>
  {
    RCC->AHB3LPENR |= RCC_AHB3Periph;
20002526:	4b09      	ldr	r3, [pc, #36]	; (2000254c <RCC_AHB3PeriphClockLPModeCmd+0x3c>)
20002528:	6d99      	ldr	r1, [r3, #88]	; 0x58
2000252a:	4b08      	ldr	r3, [pc, #32]	; (2000254c <RCC_AHB3PeriphClockLPModeCmd+0x3c>)
2000252c:	687a      	ldr	r2, [r7, #4]
2000252e:	430a      	orrs	r2, r1
20002530:	659a      	str	r2, [r3, #88]	; 0x58
  }
  else
  {
    RCC->AHB3LPENR &= ~RCC_AHB3Periph;
  }
}
20002532:	e006      	b.n	20002542 <RCC_AHB3PeriphClockLPModeCmd+0x32>
    RCC->AHB3LPENR &= ~RCC_AHB3Periph;
20002534:	4b05      	ldr	r3, [pc, #20]	; (2000254c <RCC_AHB3PeriphClockLPModeCmd+0x3c>)
20002536:	6d9a      	ldr	r2, [r3, #88]	; 0x58
20002538:	687b      	ldr	r3, [r7, #4]
2000253a:	43d9      	mvns	r1, r3
2000253c:	4b03      	ldr	r3, [pc, #12]	; (2000254c <RCC_AHB3PeriphClockLPModeCmd+0x3c>)
2000253e:	400a      	ands	r2, r1
20002540:	659a      	str	r2, [r3, #88]	; 0x58
}
20002542:	46c0      	nop			; (mov r8, r8)
20002544:	46bd      	mov	sp, r7
20002546:	b002      	add	sp, #8
20002548:	bd80      	pop	{r7, pc}
2000254a:	46c0      	nop			; (mov r8, r8)
2000254c:	40023800 	andmi	r3, r2, r0, lsl #16

20002550 <RCC_APB1PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockLPModeCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
20002550:	b580      	push	{r7, lr}
20002552:	b082      	sub	sp, #8
20002554:	af00      	add	r7, sp, #0
20002556:	6078      	str	r0, [r7, #4]
20002558:	000a      	movs	r2, r1
2000255a:	1cfb      	adds	r3, r7, #3
2000255c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
2000255e:	1cfb      	adds	r3, r7, #3
20002560:	781b      	ldrb	r3, [r3, #0]
20002562:	2b00      	cmp	r3, #0
20002564:	d006      	beq.n	20002574 <RCC_APB1PeriphClockLPModeCmd+0x24>
  {
    RCC->APB1LPENR |= RCC_APB1Periph;
20002566:	4b09      	ldr	r3, [pc, #36]	; (2000258c <RCC_APB1PeriphClockLPModeCmd+0x3c>)
20002568:	6e19      	ldr	r1, [r3, #96]	; 0x60
2000256a:	4b08      	ldr	r3, [pc, #32]	; (2000258c <RCC_APB1PeriphClockLPModeCmd+0x3c>)
2000256c:	687a      	ldr	r2, [r7, #4]
2000256e:	430a      	orrs	r2, r1
20002570:	661a      	str	r2, [r3, #96]	; 0x60
  }
  else
  {
    RCC->APB1LPENR &= ~RCC_APB1Periph;
  }
}
20002572:	e006      	b.n	20002582 <RCC_APB1PeriphClockLPModeCmd+0x32>
    RCC->APB1LPENR &= ~RCC_APB1Periph;
20002574:	4b05      	ldr	r3, [pc, #20]	; (2000258c <RCC_APB1PeriphClockLPModeCmd+0x3c>)
20002576:	6e1a      	ldr	r2, [r3, #96]	; 0x60
20002578:	687b      	ldr	r3, [r7, #4]
2000257a:	43d9      	mvns	r1, r3
2000257c:	4b03      	ldr	r3, [pc, #12]	; (2000258c <RCC_APB1PeriphClockLPModeCmd+0x3c>)
2000257e:	400a      	ands	r2, r1
20002580:	661a      	str	r2, [r3, #96]	; 0x60
}
20002582:	46c0      	nop			; (mov r8, r8)
20002584:	46bd      	mov	sp, r7
20002586:	b002      	add	sp, #8
20002588:	bd80      	pop	{r7, pc}
2000258a:	46c0      	nop			; (mov r8, r8)
2000258c:	40023800 	andmi	r3, r2, r0, lsl #16

20002590 <RCC_APB2PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockLPModeCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
20002590:	b580      	push	{r7, lr}
20002592:	b082      	sub	sp, #8
20002594:	af00      	add	r7, sp, #0
20002596:	6078      	str	r0, [r7, #4]
20002598:	000a      	movs	r2, r1
2000259a:	1cfb      	adds	r3, r7, #3
2000259c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
2000259e:	1cfb      	adds	r3, r7, #3
200025a0:	781b      	ldrb	r3, [r3, #0]
200025a2:	2b00      	cmp	r3, #0
200025a4:	d006      	beq.n	200025b4 <RCC_APB2PeriphClockLPModeCmd+0x24>
  {
    RCC->APB2LPENR |= RCC_APB2Periph;
200025a6:	4b09      	ldr	r3, [pc, #36]	; (200025cc <RCC_APB2PeriphClockLPModeCmd+0x3c>)
200025a8:	6e59      	ldr	r1, [r3, #100]	; 0x64
200025aa:	4b08      	ldr	r3, [pc, #32]	; (200025cc <RCC_APB2PeriphClockLPModeCmd+0x3c>)
200025ac:	687a      	ldr	r2, [r7, #4]
200025ae:	430a      	orrs	r2, r1
200025b0:	665a      	str	r2, [r3, #100]	; 0x64
  }
  else
  {
    RCC->APB2LPENR &= ~RCC_APB2Periph;
  }
}
200025b2:	e006      	b.n	200025c2 <RCC_APB2PeriphClockLPModeCmd+0x32>
    RCC->APB2LPENR &= ~RCC_APB2Periph;
200025b4:	4b05      	ldr	r3, [pc, #20]	; (200025cc <RCC_APB2PeriphClockLPModeCmd+0x3c>)
200025b6:	6e5a      	ldr	r2, [r3, #100]	; 0x64
200025b8:	687b      	ldr	r3, [r7, #4]
200025ba:	43d9      	mvns	r1, r3
200025bc:	4b03      	ldr	r3, [pc, #12]	; (200025cc <RCC_APB2PeriphClockLPModeCmd+0x3c>)
200025be:	400a      	ands	r2, r1
200025c0:	665a      	str	r2, [r3, #100]	; 0x64
}
200025c2:	46c0      	nop			; (mov r8, r8)
200025c4:	46bd      	mov	sp, r7
200025c6:	b002      	add	sp, #8
200025c8:	bd80      	pop	{r7, pc}
200025ca:	46c0      	nop			; (mov r8, r8)
200025cc:	40023800 	andmi	r3, r2, r0, lsl #16

200025d0 <RCC_LSEModeConfig>:
  *            @arg RCC_LSE_LOWPOWER_MODE:  LSE oscillator in low power mode.
  *            @arg RCC_LSE_HIGHDRIVE_MODE: LSE oscillator in High Drive mode.
  * @retval None
  */
void RCC_LSEModeConfig(uint8_t RCC_Mode)
{
200025d0:	b580      	push	{r7, lr}
200025d2:	b082      	sub	sp, #8
200025d4:	af00      	add	r7, sp, #0
200025d6:	0002      	movs	r2, r0
200025d8:	1dfb      	adds	r3, r7, #7
200025da:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_LSE_MODE(RCC_Mode));
  
  if(RCC_Mode == RCC_LSE_HIGHDRIVE_MODE)
200025dc:	1dfb      	adds	r3, r7, #7
200025de:	781b      	ldrb	r3, [r3, #0]
200025e0:	2b01      	cmp	r3, #1
200025e2:	d106      	bne.n	200025f2 <RCC_LSEModeConfig+0x22>
  {
    SET_BIT(RCC->BDCR, RCC_BDCR_LSEMOD);
200025e4:	4b08      	ldr	r3, [pc, #32]	; (20002608 <RCC_LSEModeConfig+0x38>)
200025e6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
200025e8:	4b07      	ldr	r3, [pc, #28]	; (20002608 <RCC_LSEModeConfig+0x38>)
200025ea:	2108      	movs	r1, #8
200025ec:	430a      	orrs	r2, r1
200025ee:	671a      	str	r2, [r3, #112]	; 0x70
  }
  else
  {
    CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEMOD);
  }
}
200025f0:	e005      	b.n	200025fe <RCC_LSEModeConfig+0x2e>
    CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEMOD);
200025f2:	4b05      	ldr	r3, [pc, #20]	; (20002608 <RCC_LSEModeConfig+0x38>)
200025f4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
200025f6:	4b04      	ldr	r3, [pc, #16]	; (20002608 <RCC_LSEModeConfig+0x38>)
200025f8:	2108      	movs	r1, #8
200025fa:	438a      	bics	r2, r1
200025fc:	671a      	str	r2, [r3, #112]	; 0x70
}
200025fe:	46c0      	nop			; (mov r8, r8)
20002600:	46bd      	mov	sp, r7
20002602:	b002      	add	sp, #8
20002604:	bd80      	pop	{r7, pc}
20002606:	46c0      	nop			; (mov r8, r8)
20002608:	40023800 	andmi	r3, r2, r0, lsl #16

2000260c <RCC_ITConfig>:
  * @param  NewState: new state of the specified RCC interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_ITConfig(uint8_t RCC_IT, FunctionalState NewState)
{
2000260c:	b580      	push	{r7, lr}
2000260e:	b082      	sub	sp, #8
20002610:	af00      	add	r7, sp, #0
20002612:	0002      	movs	r2, r0
20002614:	1dfb      	adds	r3, r7, #7
20002616:	701a      	strb	r2, [r3, #0]
20002618:	1dbb      	adds	r3, r7, #6
2000261a:	1c0a      	adds	r2, r1, #0
2000261c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_IT(RCC_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
2000261e:	1dbb      	adds	r3, r7, #6
20002620:	781b      	ldrb	r3, [r3, #0]
20002622:	2b00      	cmp	r3, #0
20002624:	d009      	beq.n	2000263a <RCC_ITConfig+0x2e>
  {
    /* Perform Byte access to RCC_CIR[14:8] bits to enable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS |= RCC_IT;
20002626:	4b0c      	ldr	r3, [pc, #48]	; (20002658 <RCC_ITConfig+0x4c>)
20002628:	781b      	ldrb	r3, [r3, #0]
2000262a:	b2da      	uxtb	r2, r3
2000262c:	490a      	ldr	r1, [pc, #40]	; (20002658 <RCC_ITConfig+0x4c>)
2000262e:	1dfb      	adds	r3, r7, #7
20002630:	781b      	ldrb	r3, [r3, #0]
20002632:	4313      	orrs	r3, r2
20002634:	b2db      	uxtb	r3, r3
20002636:	700b      	strb	r3, [r1, #0]
  else
  {
    /* Perform Byte access to RCC_CIR[14:8] bits to disable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS &= (uint8_t)~RCC_IT;
  }
}
20002638:	e00a      	b.n	20002650 <RCC_ITConfig+0x44>
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS &= (uint8_t)~RCC_IT;
2000263a:	4b07      	ldr	r3, [pc, #28]	; (20002658 <RCC_ITConfig+0x4c>)
2000263c:	781b      	ldrb	r3, [r3, #0]
2000263e:	b2db      	uxtb	r3, r3
20002640:	1dfa      	adds	r2, r7, #7
20002642:	7812      	ldrb	r2, [r2, #0]
20002644:	43d2      	mvns	r2, r2
20002646:	b2d2      	uxtb	r2, r2
20002648:	4903      	ldr	r1, [pc, #12]	; (20002658 <RCC_ITConfig+0x4c>)
2000264a:	4013      	ands	r3, r2
2000264c:	b2db      	uxtb	r3, r3
2000264e:	700b      	strb	r3, [r1, #0]
}
20002650:	46c0      	nop			; (mov r8, r8)
20002652:	46bd      	mov	sp, r7
20002654:	b002      	add	sp, #8
20002656:	bd80      	pop	{r7, pc}
20002658:	4002380d 	andmi	r3, r2, sp, lsl #16

2000265c <RCC_GetFlagStatus>:
  *            @arg RCC_FLAG_WWDGRST: Window Watchdog reset
  *            @arg RCC_FLAG_LPWRRST: Low Power reset
  * @retval The new state of RCC_FLAG (SET or RESET).
  */
FlagStatus RCC_GetFlagStatus(uint8_t RCC_FLAG)
{
2000265c:	b580      	push	{r7, lr}
2000265e:	b086      	sub	sp, #24
20002660:	af00      	add	r7, sp, #0
20002662:	0002      	movs	r2, r0
20002664:	1dfb      	adds	r3, r7, #7
20002666:	701a      	strb	r2, [r3, #0]
  uint32_t tmp = 0;
20002668:	2300      	movs	r3, #0
2000266a:	60fb      	str	r3, [r7, #12]
  uint32_t statusreg = 0;
2000266c:	2300      	movs	r3, #0
2000266e:	617b      	str	r3, [r7, #20]
  FlagStatus bitstatus = RESET;
20002670:	2313      	movs	r3, #19
20002672:	18fb      	adds	r3, r7, r3
20002674:	2200      	movs	r2, #0
20002676:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_FLAG(RCC_FLAG));

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
20002678:	1dfb      	adds	r3, r7, #7
2000267a:	781b      	ldrb	r3, [r3, #0]
2000267c:	095b      	lsrs	r3, r3, #5
2000267e:	b2db      	uxtb	r3, r3
20002680:	60fb      	str	r3, [r7, #12]
  if (tmp == 1)               /* The flag to check is in CR register */
20002682:	68fb      	ldr	r3, [r7, #12]
20002684:	2b01      	cmp	r3, #1
20002686:	d103      	bne.n	20002690 <RCC_GetFlagStatus+0x34>
  {
    statusreg = RCC->CR;
20002688:	4b14      	ldr	r3, [pc, #80]	; (200026dc <RCC_GetFlagStatus+0x80>)
2000268a:	681b      	ldr	r3, [r3, #0]
2000268c:	617b      	str	r3, [r7, #20]
2000268e:	e009      	b.n	200026a4 <RCC_GetFlagStatus+0x48>
  }
  else if (tmp == 2)          /* The flag to check is in BDCR register */
20002690:	68fb      	ldr	r3, [r7, #12]
20002692:	2b02      	cmp	r3, #2
20002694:	d103      	bne.n	2000269e <RCC_GetFlagStatus+0x42>
  {
    statusreg = RCC->BDCR;
20002696:	4b11      	ldr	r3, [pc, #68]	; (200026dc <RCC_GetFlagStatus+0x80>)
20002698:	6f1b      	ldr	r3, [r3, #112]	; 0x70
2000269a:	617b      	str	r3, [r7, #20]
2000269c:	e002      	b.n	200026a4 <RCC_GetFlagStatus+0x48>
  }
  else                       /* The flag to check is in CSR register */
  {
    statusreg = RCC->CSR;
2000269e:	4b0f      	ldr	r3, [pc, #60]	; (200026dc <RCC_GetFlagStatus+0x80>)
200026a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
200026a2:	617b      	str	r3, [r7, #20]
  }

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_MASK;
200026a4:	1dfb      	adds	r3, r7, #7
200026a6:	781b      	ldrb	r3, [r3, #0]
200026a8:	221f      	movs	r2, #31
200026aa:	4013      	ands	r3, r2
200026ac:	60fb      	str	r3, [r7, #12]
  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
200026ae:	697a      	ldr	r2, [r7, #20]
200026b0:	68fb      	ldr	r3, [r7, #12]
200026b2:	40da      	lsrs	r2, r3
200026b4:	0013      	movs	r3, r2
200026b6:	2201      	movs	r2, #1
200026b8:	4013      	ands	r3, r2
200026ba:	d004      	beq.n	200026c6 <RCC_GetFlagStatus+0x6a>
  {
    bitstatus = SET;
200026bc:	2313      	movs	r3, #19
200026be:	18fb      	adds	r3, r7, r3
200026c0:	2201      	movs	r2, #1
200026c2:	701a      	strb	r2, [r3, #0]
200026c4:	e003      	b.n	200026ce <RCC_GetFlagStatus+0x72>
  }
  else
  {
    bitstatus = RESET;
200026c6:	2313      	movs	r3, #19
200026c8:	18fb      	adds	r3, r7, r3
200026ca:	2200      	movs	r2, #0
200026cc:	701a      	strb	r2, [r3, #0]
  }
  /* Return the flag status */
  return bitstatus;
200026ce:	2313      	movs	r3, #19
200026d0:	18fb      	adds	r3, r7, r3
200026d2:	781b      	ldrb	r3, [r3, #0]
}
200026d4:	0018      	movs	r0, r3
200026d6:	46bd      	mov	sp, r7
200026d8:	b006      	add	sp, #24
200026da:	bd80      	pop	{r7, pc}
200026dc:	40023800 	andmi	r3, r2, r0, lsl #16

200026e0 <RCC_ClearFlag>:
  *         RCC_FLAG_IWDGRST, RCC_FLAG_WWDGRST, RCC_FLAG_LPWRRST
  * @param  None
  * @retval None
  */
void RCC_ClearFlag(void)
{
200026e0:	b580      	push	{r7, lr}
200026e2:	af00      	add	r7, sp, #0
  /* Set RMVF bit to clear the reset flags */
  RCC->CSR |= RCC_CSR_RMVF;
200026e4:	4b04      	ldr	r3, [pc, #16]	; (200026f8 <RCC_ClearFlag+0x18>)
200026e6:	6f5a      	ldr	r2, [r3, #116]	; 0x74
200026e8:	4b03      	ldr	r3, [pc, #12]	; (200026f8 <RCC_ClearFlag+0x18>)
200026ea:	2180      	movs	r1, #128	; 0x80
200026ec:	0449      	lsls	r1, r1, #17
200026ee:	430a      	orrs	r2, r1
200026f0:	675a      	str	r2, [r3, #116]	; 0x74
}
200026f2:	46c0      	nop			; (mov r8, r8)
200026f4:	46bd      	mov	sp, r7
200026f6:	bd80      	pop	{r7, pc}
200026f8:	40023800 	andmi	r3, r2, r0, lsl #16

200026fc <RCC_GetITStatus>:
  *            @arg RCC_IT_PLLSAIRDY: PLLSAI clock ready interrupt (only for STM32F42xxx/43xxx/446xx/469xx/479xx devices)
  *            @arg RCC_IT_CSS: Clock Security System interrupt
  * @retval The new state of RCC_IT (SET or RESET).
  */
ITStatus RCC_GetITStatus(uint8_t RCC_IT)
{
200026fc:	b580      	push	{r7, lr}
200026fe:	b084      	sub	sp, #16
20002700:	af00      	add	r7, sp, #0
20002702:	0002      	movs	r2, r0
20002704:	1dfb      	adds	r3, r7, #7
20002706:	701a      	strb	r2, [r3, #0]
  ITStatus bitstatus = RESET;
20002708:	230f      	movs	r3, #15
2000270a:	18fb      	adds	r3, r7, r3
2000270c:	2200      	movs	r2, #0
2000270e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_GET_IT(RCC_IT));

  /* Check the status of the specified RCC interrupt */
  if ((RCC->CIR & RCC_IT) != (uint32_t)RESET)
20002710:	4b0a      	ldr	r3, [pc, #40]	; (2000273c <RCC_GetITStatus+0x40>)
20002712:	68db      	ldr	r3, [r3, #12]
20002714:	1dfa      	adds	r2, r7, #7
20002716:	7812      	ldrb	r2, [r2, #0]
20002718:	4013      	ands	r3, r2
2000271a:	d004      	beq.n	20002726 <RCC_GetITStatus+0x2a>
  {
    bitstatus = SET;
2000271c:	230f      	movs	r3, #15
2000271e:	18fb      	adds	r3, r7, r3
20002720:	2201      	movs	r2, #1
20002722:	701a      	strb	r2, [r3, #0]
20002724:	e003      	b.n	2000272e <RCC_GetITStatus+0x32>
  }
  else
  {
    bitstatus = RESET;
20002726:	230f      	movs	r3, #15
20002728:	18fb      	adds	r3, r7, r3
2000272a:	2200      	movs	r2, #0
2000272c:	701a      	strb	r2, [r3, #0]
  }
  /* Return the RCC_IT status */
  return  bitstatus;
2000272e:	230f      	movs	r3, #15
20002730:	18fb      	adds	r3, r7, r3
20002732:	781b      	ldrb	r3, [r3, #0]
}
20002734:	0018      	movs	r0, r3
20002736:	46bd      	mov	sp, r7
20002738:	b004      	add	sp, #16
2000273a:	bd80      	pop	{r7, pc}
2000273c:	40023800 	andmi	r3, r2, r0, lsl #16

20002740 <RCC_ClearITPendingBit>:
  *            @arg RCC_IT_PLLSAIRDY: PLLSAI ready interrupt (only for STM32F42xxx/43xxx/446xx/469xx/479xx devices) 
  *            @arg RCC_IT_CSS: Clock Security System interrupt
  * @retval None
  */
void RCC_ClearITPendingBit(uint8_t RCC_IT)
{
20002740:	b580      	push	{r7, lr}
20002742:	b082      	sub	sp, #8
20002744:	af00      	add	r7, sp, #0
20002746:	0002      	movs	r2, r0
20002748:	1dfb      	adds	r3, r7, #7
2000274a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_CLEAR_IT(RCC_IT));

  /* Perform Byte access to RCC_CIR[23:16] bits to clear the selected interrupt
     pending bits */
  *(__IO uint8_t *) CIR_BYTE3_ADDRESS = RCC_IT;
2000274c:	4a03      	ldr	r2, [pc, #12]	; (2000275c <RCC_ClearITPendingBit+0x1c>)
2000274e:	1dfb      	adds	r3, r7, #7
20002750:	781b      	ldrb	r3, [r3, #0]
20002752:	7013      	strb	r3, [r2, #0]
}
20002754:	46c0      	nop			; (mov r8, r8)
20002756:	46bd      	mov	sp, r7
20002758:	b002      	add	sp, #8
2000275a:	bd80      	pop	{r7, pc}
2000275c:	4002380e 	andmi	r3, r2, lr, lsl #16

20002760 <init_GPIO_Ports>:
//======================================GPIO=========================================================
void init_GPIO_Ports()
{
20002760:	b580      	push	{r7, lr}
20002762:	b082      	sub	sp, #8
20002764:	af00      	add	r7, sp, #0
	/*  Function used to set the GPIO configuration to the default reset state ****/
	GPIO_InitTypeDef init;
	//GPIO E UTPORTAR
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOE, ENABLE);
20002766:	2101      	movs	r1, #1
20002768:	2010      	movs	r0, #16
2000276a:	f7ff fd51 	bl	20002210 <RCC_AHB1PeriphClockCmd>
	GPIO_StructInit(&init);
2000276e:	003b      	movs	r3, r7
20002770:	0018      	movs	r0, r3
20002772:	f001 f8c5 	bl	20003900 <GPIO_StructInit>
	init.GPIO_Pin = GPIO_Pin_1 | GPIO_Pin_3 | GPIO_Pin_5 | GPIO_Pin_7 | GPIO_Pin_9 | GPIO_Pin_11 | GPIO_Pin_13 | GPIO_Pin_15;
20002776:	003b      	movs	r3, r7
20002778:	4a64      	ldr	r2, [pc, #400]	; (2000290c <init_GPIO_Ports+0x1ac>)
2000277a:	601a      	str	r2, [r3, #0]
	init.GPIO_Mode = GPIO_Mode_OUT;
2000277c:	003b      	movs	r3, r7
2000277e:	2201      	movs	r2, #1
20002780:	711a      	strb	r2, [r3, #4]
	init.GPIO_OType = GPIO_OType_PP;
20002782:	003b      	movs	r3, r7
20002784:	2200      	movs	r2, #0
20002786:	719a      	strb	r2, [r3, #6]
	init.GPIO_PuPd = GPIO_PuPd_NOPULL;
20002788:	003b      	movs	r3, r7
2000278a:	2200      	movs	r2, #0
2000278c:	71da      	strb	r2, [r3, #7]
	GPIO_Init(GPIOE, &init);
2000278e:	003b      	movs	r3, r7
20002790:	4a5f      	ldr	r2, [pc, #380]	; (20002910 <init_GPIO_Ports+0x1b0>)
20002792:	0019      	movs	r1, r3
20002794:	0010      	movs	r0, r2
20002796:	f001 f827 	bl	200037e8 <GPIO_Init>
	
	//konfigurerar inport GPIO E
	GPIO_StructInit(&init);
2000279a:	003b      	movs	r3, r7
2000279c:	0018      	movs	r0, r3
2000279e:	f001 f8af 	bl	20003900 <GPIO_StructInit>
	init.GPIO_Pin = GPIO_Pin_0 | GPIO_Pin_2 | GPIO_Pin_4 | GPIO_Pin_6 | GPIO_Pin_8 | GPIO_Pin_10 | GPIO_Pin_12 |GPIO_Pin_14;
200027a2:	003b      	movs	r3, r7
200027a4:	4a5b      	ldr	r2, [pc, #364]	; (20002914 <init_GPIO_Ports+0x1b4>)
200027a6:	601a      	str	r2, [r3, #0]
	init.GPIO_Mode = GPIO_Mode_IN;
200027a8:	003b      	movs	r3, r7
200027aa:	2200      	movs	r2, #0
200027ac:	711a      	strb	r2, [r3, #4]
	init.GPIO_PuPd = GPIO_PuPd_UP;
200027ae:	003b      	movs	r3, r7
200027b0:	2201      	movs	r2, #1
200027b2:	71da      	strb	r2, [r3, #7]
	GPIO_Init(GPIOE, &init);
200027b4:	003b      	movs	r3, r7
200027b6:	4a56      	ldr	r2, [pc, #344]	; (20002910 <init_GPIO_Ports+0x1b0>)
200027b8:	0019      	movs	r1, r3
200027ba:	0010      	movs	r0, r2
200027bc:	f001 f814 	bl	200037e8 <GPIO_Init>

    //GPIOA UTPORTAR
    RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
200027c0:	2101      	movs	r1, #1
200027c2:	2001      	movs	r0, #1
200027c4:	f7ff fd24 	bl	20002210 <RCC_AHB1PeriphClockCmd>
	GPIO_StructInit(&init);
200027c8:	003b      	movs	r3, r7
200027ca:	0018      	movs	r0, r3
200027cc:	f001 f898 	bl	20003900 <GPIO_StructInit>
	init.GPIO_Pin = GPIO_Pin_1 | GPIO_Pin_3 | GPIO_Pin_5 | GPIO_Pin_7 | GPIO_Pin_9 | GPIO_Pin_11 | GPIO_Pin_13 | GPIO_Pin_15;
200027d0:	003b      	movs	r3, r7
200027d2:	4a4e      	ldr	r2, [pc, #312]	; (2000290c <init_GPIO_Ports+0x1ac>)
200027d4:	601a      	str	r2, [r3, #0]
	init.GPIO_Mode = GPIO_Mode_OUT;
200027d6:	003b      	movs	r3, r7
200027d8:	2201      	movs	r2, #1
200027da:	711a      	strb	r2, [r3, #4]
	init.GPIO_OType = GPIO_OType_PP;
200027dc:	003b      	movs	r3, r7
200027de:	2200      	movs	r2, #0
200027e0:	719a      	strb	r2, [r3, #6]
	init.GPIO_PuPd = GPIO_PuPd_NOPULL;
200027e2:	003b      	movs	r3, r7
200027e4:	2200      	movs	r2, #0
200027e6:	71da      	strb	r2, [r3, #7]
	GPIO_Init(GPIOA, &init);
200027e8:	003b      	movs	r3, r7
200027ea:	4a4b      	ldr	r2, [pc, #300]	; (20002918 <init_GPIO_Ports+0x1b8>)
200027ec:	0019      	movs	r1, r3
200027ee:	0010      	movs	r0, r2
200027f0:	f000 fffa 	bl	200037e8 <GPIO_Init>
	
	//konfigurerar inport GPIO a
	GPIO_StructInit(&init);
200027f4:	003b      	movs	r3, r7
200027f6:	0018      	movs	r0, r3
200027f8:	f001 f882 	bl	20003900 <GPIO_StructInit>
	init.GPIO_Pin = GPIO_Pin_0 | GPIO_Pin_2 | GPIO_Pin_4 | GPIO_Pin_6 | GPIO_Pin_8 | GPIO_Pin_10 | GPIO_Pin_12 |GPIO_Pin_14;
200027fc:	003b      	movs	r3, r7
200027fe:	4a45      	ldr	r2, [pc, #276]	; (20002914 <init_GPIO_Ports+0x1b4>)
20002800:	601a      	str	r2, [r3, #0]
	init.GPIO_Mode = GPIO_Mode_IN;
20002802:	003b      	movs	r3, r7
20002804:	2200      	movs	r2, #0
20002806:	711a      	strb	r2, [r3, #4]
	init.GPIO_PuPd = GPIO_PuPd_UP;
20002808:	003b      	movs	r3, r7
2000280a:	2201      	movs	r2, #1
2000280c:	71da      	strb	r2, [r3, #7]
	GPIO_Init(GPIOA, &init);
2000280e:	003b      	movs	r3, r7
20002810:	4a41      	ldr	r2, [pc, #260]	; (20002918 <init_GPIO_Ports+0x1b8>)
20002812:	0019      	movs	r1, r3
20002814:	0010      	movs	r0, r2
20002816:	f000 ffe7 	bl	200037e8 <GPIO_Init>

	//GPIO C UTPORTAR
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC, ENABLE);
2000281a:	2101      	movs	r1, #1
2000281c:	2004      	movs	r0, #4
2000281e:	f7ff fcf7 	bl	20002210 <RCC_AHB1PeriphClockCmd>
	GPIO_StructInit(&init);
20002822:	003b      	movs	r3, r7
20002824:	0018      	movs	r0, r3
20002826:	f001 f86b 	bl	20003900 <GPIO_StructInit>
	init.GPIO_Pin = GPIO_Pin_1 | GPIO_Pin_3 | GPIO_Pin_5 | GPIO_Pin_7 | GPIO_Pin_9 | GPIO_Pin_11 | GPIO_Pin_13 | GPIO_Pin_15;
2000282a:	003b      	movs	r3, r7
2000282c:	4a37      	ldr	r2, [pc, #220]	; (2000290c <init_GPIO_Ports+0x1ac>)
2000282e:	601a      	str	r2, [r3, #0]
	init.GPIO_Mode = GPIO_Mode_OUT;
20002830:	003b      	movs	r3, r7
20002832:	2201      	movs	r2, #1
20002834:	711a      	strb	r2, [r3, #4]
	init.GPIO_OType = GPIO_OType_PP;
20002836:	003b      	movs	r3, r7
20002838:	2200      	movs	r2, #0
2000283a:	719a      	strb	r2, [r3, #6]
	init.GPIO_PuPd = GPIO_PuPd_NOPULL;
2000283c:	003b      	movs	r3, r7
2000283e:	2200      	movs	r2, #0
20002840:	71da      	strb	r2, [r3, #7]
	GPIO_Init(GPIOC, &init);
20002842:	003b      	movs	r3, r7
20002844:	4a35      	ldr	r2, [pc, #212]	; (2000291c <init_GPIO_Ports+0x1bc>)
20002846:	0019      	movs	r1, r3
20002848:	0010      	movs	r0, r2
2000284a:	f000 ffcd 	bl	200037e8 <GPIO_Init>
	
	//konfigurerar inport GPIO C
	GPIO_StructInit(&init);
2000284e:	003b      	movs	r3, r7
20002850:	0018      	movs	r0, r3
20002852:	f001 f855 	bl	20003900 <GPIO_StructInit>
	init.GPIO_Pin = GPIO_Pin_0 | GPIO_Pin_2 | GPIO_Pin_4 | GPIO_Pin_6 | GPIO_Pin_8 | GPIO_Pin_10 | GPIO_Pin_12 |GPIO_Pin_14;
20002856:	003b      	movs	r3, r7
20002858:	4a2e      	ldr	r2, [pc, #184]	; (20002914 <init_GPIO_Ports+0x1b4>)
2000285a:	601a      	str	r2, [r3, #0]
	init.GPIO_Mode = GPIO_Mode_IN;
2000285c:	003b      	movs	r3, r7
2000285e:	2200      	movs	r2, #0
20002860:	711a      	strb	r2, [r3, #4]
	init.GPIO_PuPd = GPIO_PuPd_UP;
20002862:	003b      	movs	r3, r7
20002864:	2201      	movs	r2, #1
20002866:	71da      	strb	r2, [r3, #7]
	GPIO_Init(GPIOC, &init);
20002868:	003b      	movs	r3, r7
2000286a:	4a2c      	ldr	r2, [pc, #176]	; (2000291c <init_GPIO_Ports+0x1bc>)
2000286c:	0019      	movs	r1, r3
2000286e:	0010      	movs	r0, r2
20002870:	f000 ffba 	bl	200037e8 <GPIO_Init>

	//GPIO D UTPORTAR
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOD, ENABLE);
20002874:	2101      	movs	r1, #1
20002876:	2008      	movs	r0, #8
20002878:	f7ff fcca 	bl	20002210 <RCC_AHB1PeriphClockCmd>
	GPIO_StructInit(&init);
2000287c:	003b      	movs	r3, r7
2000287e:	0018      	movs	r0, r3
20002880:	f001 f83e 	bl	20003900 <GPIO_StructInit>
	init.GPIO_Pin = GPIO_Pin_1 | GPIO_Pin_3 | GPIO_Pin_5 | GPIO_Pin_7 | GPIO_Pin_9 | GPIO_Pin_11 | GPIO_Pin_13 | GPIO_Pin_15;
20002884:	003b      	movs	r3, r7
20002886:	4a21      	ldr	r2, [pc, #132]	; (2000290c <init_GPIO_Ports+0x1ac>)
20002888:	601a      	str	r2, [r3, #0]
	init.GPIO_Mode = GPIO_Mode_OUT;
2000288a:	003b      	movs	r3, r7
2000288c:	2201      	movs	r2, #1
2000288e:	711a      	strb	r2, [r3, #4]
	init.GPIO_OType = GPIO_OType_PP;
20002890:	003b      	movs	r3, r7
20002892:	2200      	movs	r2, #0
20002894:	719a      	strb	r2, [r3, #6]
	init.GPIO_PuPd = GPIO_PuPd_NOPULL;
20002896:	003b      	movs	r3, r7
20002898:	2200      	movs	r2, #0
2000289a:	71da      	strb	r2, [r3, #7]
	GPIO_Init(GPIOD, &init);
2000289c:	003b      	movs	r3, r7
2000289e:	4a20      	ldr	r2, [pc, #128]	; (20002920 <init_GPIO_Ports+0x1c0>)
200028a0:	0019      	movs	r1, r3
200028a2:	0010      	movs	r0, r2
200028a4:	f000 ffa0 	bl	200037e8 <GPIO_Init>
	
	//konfigurerar inport GPIO D
	GPIO_StructInit(&init);
200028a8:	003b      	movs	r3, r7
200028aa:	0018      	movs	r0, r3
200028ac:	f001 f828 	bl	20003900 <GPIO_StructInit>
	init.GPIO_Pin = GPIO_Pin_0 | GPIO_Pin_2 | GPIO_Pin_4 | GPIO_Pin_6 | GPIO_Pin_8 | GPIO_Pin_10 | GPIO_Pin_12 |GPIO_Pin_14;
200028b0:	003b      	movs	r3, r7
200028b2:	4a18      	ldr	r2, [pc, #96]	; (20002914 <init_GPIO_Ports+0x1b4>)
200028b4:	601a      	str	r2, [r3, #0]
	init.GPIO_Mode = GPIO_Mode_IN;
200028b6:	003b      	movs	r3, r7
200028b8:	2200      	movs	r2, #0
200028ba:	711a      	strb	r2, [r3, #4]
	init.GPIO_PuPd = GPIO_PuPd_UP;
200028bc:	003b      	movs	r3, r7
200028be:	2201      	movs	r2, #1
200028c0:	71da      	strb	r2, [r3, #7]
	GPIO_Init(GPIOD, &init);
200028c2:	003b      	movs	r3, r7
200028c4:	4a16      	ldr	r2, [pc, #88]	; (20002920 <init_GPIO_Ports+0x1c0>)
200028c6:	0019      	movs	r1, r3
200028c8:	0010      	movs	r0, r2
200028ca:	f000 ff8d 	bl	200037e8 <GPIO_Init>

	//GPIO B UTPORTAR
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE);
200028ce:	2101      	movs	r1, #1
200028d0:	2002      	movs	r0, #2
200028d2:	f7ff fc9d 	bl	20002210 <RCC_AHB1PeriphClockCmd>
	GPIO_StructInit(&init);
200028d6:	003b      	movs	r3, r7
200028d8:	0018      	movs	r0, r3
200028da:	f001 f811 	bl	20003900 <GPIO_StructInit>
	init.GPIO_Pin = GPIO_Pin_2;
200028de:	003b      	movs	r3, r7
200028e0:	2204      	movs	r2, #4
200028e2:	601a      	str	r2, [r3, #0]
	init.GPIO_Mode = GPIO_Mode_OUT;
200028e4:	003b      	movs	r3, r7
200028e6:	2201      	movs	r2, #1
200028e8:	711a      	strb	r2, [r3, #4]
	init.GPIO_OType = GPIO_OType_PP;
200028ea:	003b      	movs	r3, r7
200028ec:	2200      	movs	r2, #0
200028ee:	719a      	strb	r2, [r3, #6]
	init.GPIO_PuPd = GPIO_PuPd_NOPULL;
200028f0:	003b      	movs	r3, r7
200028f2:	2200      	movs	r2, #0
200028f4:	71da      	strb	r2, [r3, #7]
	GPIO_Init(GPIOB, &init);
200028f6:	003b      	movs	r3, r7
200028f8:	4a0a      	ldr	r2, [pc, #40]	; (20002924 <init_GPIO_Ports+0x1c4>)
200028fa:	0019      	movs	r1, r3
200028fc:	0010      	movs	r0, r2
200028fe:	f000 ff73 	bl	200037e8 <GPIO_Init>
20002902:	46c0      	nop			; (mov r8, r8)
20002904:	46bd      	mov	sp, r7
20002906:	b002      	add	sp, #8
20002908:	bd80      	pop	{r7, pc}
2000290a:	46c0      	nop			; (mov r8, r8)
2000290c:	0000aaaa 	andeq	sl, r0, sl, lsr #21
20002910:	40021000 	andmi	r1, r2, r0
20002914:	00005555 	andeq	r5, r0, r5, asr r5
20002918:	40020000 	andmi	r0, r2, r0
2000291c:	40020800 	andmi	r0, r2, r0, lsl #16
20002920:	40020c00 	andmi	r0, r2, r0, lsl #24
20002924:	40020400 	andmi	r0, r2, r0, lsl #8

20002928 <SysTick_Handler>:
GPIO_TypeDef* GPIO_Ports[] = {GPIOE, GPIOA, GPIOC, GPIOD};

// ========================================= SYSTICK ================================================
volatile uint32_t msTicks = 0; /* Variable to store millisecond ticks */
void SysTick_Handler(void)
{ /* SysTick interrupt Handler. */
20002928:	b580      	push	{r7, lr}
2000292a:	af00      	add	r7, sp, #0
	msTicks++;
2000292c:	4b03      	ldr	r3, [pc, #12]	; (2000293c <SysTick_Handler+0x14>)
2000292e:	681b      	ldr	r3, [r3, #0]
20002930:	1c5a      	adds	r2, r3, #1
20002932:	4b02      	ldr	r3, [pc, #8]	; (2000293c <SysTick_Handler+0x14>)
20002934:	601a      	str	r2, [r3, #0]
}
20002936:	46c0      	nop			; (mov r8, r8)
20002938:	46bd      	mov	sp, r7
2000293a:	bd80      	pop	{r7, pc}
2000293c:	20003cb4 			; <UNDEFINED> instruction: 0x20003cb4

20002940 <systick_Init>:
void systick_Init(void)
{
20002940:	b580      	push	{r7, lr}
20002942:	b082      	sub	sp, #8
20002944:	af00      	add	r7, sp, #0
	// Initiera SysTick.
	*((void (**)(void))0x2001C03C) = SysTick_Handler;
20002946:	4b09      	ldr	r3, [pc, #36]	; (2000296c <systick_Init+0x2c>)
20002948:	4a09      	ldr	r2, [pc, #36]	; (20002970 <systick_Init+0x30>)
2000294a:	601a      	str	r2, [r3, #0]
	uint32_t returnCode;
	returnCode = SysTick_Config(168000000 / 1000); // Genererar ett SysTick-avbrott varje ms.
2000294c:	4b09      	ldr	r3, [pc, #36]	; (20002974 <systick_Init+0x34>)
2000294e:	0018      	movs	r0, r3
20002950:	f7ff f86a 	bl	20001a28 <SysTick_Config>
20002954:	0003      	movs	r3, r0
20002956:	607b      	str	r3, [r7, #4]

	if (returnCode != 0)
20002958:	687b      	ldr	r3, [r7, #4]
2000295a:	2b00      	cmp	r3, #0
2000295c:	d001      	beq.n	20002962 <systick_Init+0x22>
	{   
		systick_Init();
2000295e:	f7ff ffef 	bl	20002940 <systick_Init>
	}
}
20002962:	46c0      	nop			; (mov r8, r8)
20002964:	46bd      	mov	sp, r7
20002966:	b002      	add	sp, #8
20002968:	bd80      	pop	{r7, pc}
2000296a:	46c0      	nop			; (mov r8, r8)
2000296c:	2001c03c 	andcs	ip, r1, ip, lsr r0
20002970:	20002929 	andcs	r2, r0, r9, lsr #18
20002974:	00029040 	andeq	r9, r2, r0, asr #32

20002978 <delay>:
void delay (int mili){
20002978:	b580      	push	{r7, lr}
2000297a:	b084      	sub	sp, #16
2000297c:	af00      	add	r7, sp, #0
2000297e:	6078      	str	r0, [r7, #4]
		int time = msTicks + mili;
20002980:	4b07      	ldr	r3, [pc, #28]	; (200029a0 <delay+0x28>)
20002982:	681a      	ldr	r2, [r3, #0]
20002984:	687b      	ldr	r3, [r7, #4]
20002986:	18d3      	adds	r3, r2, r3
20002988:	60fb      	str	r3, [r7, #12]
		while(time > msTicks);
2000298a:	46c0      	nop			; (mov r8, r8)
2000298c:	68fa      	ldr	r2, [r7, #12]
2000298e:	4b04      	ldr	r3, [pc, #16]	; (200029a0 <delay+0x28>)
20002990:	681b      	ldr	r3, [r3, #0]
20002992:	429a      	cmp	r2, r3
20002994:	d8fa      	bhi.n	2000298c <delay+0x14>
	}
20002996:	46c0      	nop			; (mov r8, r8)
20002998:	46bd      	mov	sp, r7
2000299a:	b004      	add	sp, #16
2000299c:	bd80      	pop	{r7, pc}
2000299e:	46c0      	nop			; (mov r8, r8)
200029a0:	20003cb4 			; <UNDEFINED> instruction: 0x20003cb4

200029a4 <init_rng>:
//======================================== Slumptals generator CAN =========================================
void init_rng(void){
200029a4:	b580      	push	{r7, lr}
200029a6:	af00      	add	r7, sp, #0
	RCC_AHB2PeriphClockCmd(RCC_AHB2Periph_RNG, ENABLE);
200029a8:	2101      	movs	r1, #1
200029aa:	2040      	movs	r0, #64	; 0x40
200029ac:	f7ff fc50 	bl	20002250 <RCC_AHB2PeriphClockCmd>
    RNG_Cmd(ENABLE);
200029b0:	2001      	movs	r0, #1
200029b2:	f000 fb50 	bl	20003056 <RNG_Cmd>
}
200029b6:	46c0      	nop			; (mov r8, r8)
200029b8:	46bd      	mov	sp, r7
200029ba:	bd80      	pop	{r7, pc}

200029bc <main>:

void sendAlarm(door);
void getId (int);

void main(void)
{
200029bc:	b5f0      	push	{r4, r5, r6, r7, lr}
200029be:	b099      	sub	sp, #100	; 0x64
200029c0:	af04      	add	r7, sp, #16
	init_GPIO_Ports();
200029c2:	f7ff fecd 	bl	20002760 <init_GPIO_Ports>
	systick_Init();
200029c6:	f7ff ffbb 	bl	20002940 <systick_Init>
	can_init();
200029ca:	f7fd fe07 	bl	200005dc <can_init>
	init_rng();
200029ce:	f7ff ffe9 	bl	200029a4 <init_rng>
	while(msTicks < 2000);
200029d2:	46c0      	nop			; (mov r8, r8)
200029d4:	4bdc      	ldr	r3, [pc, #880]	; (20002d48 <main+0x38c>)
200029d6:	681b      	ldr	r3, [r3, #0]
200029d8:	4adc      	ldr	r2, [pc, #880]	; (20002d4c <main+0x390>)
200029da:	4293      	cmp	r3, r2
200029dc:	d9fa      	bls.n	200029d4 <main+0x18>

	//door door1, door2, door3, door4, door5, door6, door8, door9 ,door10, door11, door12, door13,door14,door15,door16, door17, door18, door19, door20, door21, door22, door23, door24 ,door25, door26, door27, door28,door29,door30,door31,door32;
	//door all_doors[32] = {door1, door2, door3, door4, door5, door6, door8, door9 ,door10, door11, door12, door13,door14,door15,door16, door17, door18, door19, door20, door21, door22, door23, door24 ,door25, door26, door27, door28,door29,door30,door31,door32};

	volatile int amountOfActiveDoors = 0;
200029de:	2300      	movs	r3, #0
200029e0:	61bb      	str	r3, [r7, #24]
	for (int j = 0; j < (sizeof(GPIO_Ports) /sizeof(GPIO_TypeDef *)); j++)
200029e2:	2300      	movs	r3, #0
200029e4:	647b      	str	r3, [r7, #68]	; 0x44
200029e6:	e01b      	b.n	20002a20 <main+0x64>
	{
		for (int i = 0; i < sizeof(GPIO_Pins) / sizeof(uint16_t); i = i + 2)
200029e8:	2300      	movs	r3, #0
200029ea:	64bb      	str	r3, [r7, #72]	; 0x48
200029ec:	e012      	b.n	20002a14 <main+0x58>
		{
			if(!GPIO_ReadInputDataBit(GPIO_Ports[j], GPIO_Pins[i])){
200029ee:	4bd8      	ldr	r3, [pc, #864]	; (20002d50 <main+0x394>)
200029f0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
200029f2:	0092      	lsls	r2, r2, #2
200029f4:	58d0      	ldr	r0, [r2, r3]
200029f6:	4bd7      	ldr	r3, [pc, #860]	; (20002d54 <main+0x398>)
200029f8:	6cba      	ldr	r2, [r7, #72]	; 0x48
200029fa:	0052      	lsls	r2, r2, #1
200029fc:	5ad3      	ldrh	r3, [r2, r3]
200029fe:	0019      	movs	r1, r3
20002a00:	f000 ffbb 	bl	2000397a <GPIO_ReadInputDataBit>
20002a04:	1e03      	subs	r3, r0, #0
20002a06:	d102      	bne.n	20002a0e <main+0x52>
				amountOfActiveDoors++;
20002a08:	69bb      	ldr	r3, [r7, #24]
20002a0a:	3301      	adds	r3, #1
20002a0c:	61bb      	str	r3, [r7, #24]
		for (int i = 0; i < sizeof(GPIO_Pins) / sizeof(uint16_t); i = i + 2)
20002a0e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
20002a10:	3302      	adds	r3, #2
20002a12:	64bb      	str	r3, [r7, #72]	; 0x48
20002a14:	6cbb      	ldr	r3, [r7, #72]	; 0x48
20002a16:	2b0f      	cmp	r3, #15
20002a18:	d9e9      	bls.n	200029ee <main+0x32>
	for (int j = 0; j < (sizeof(GPIO_Ports) /sizeof(GPIO_TypeDef *)); j++)
20002a1a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
20002a1c:	3301      	adds	r3, #1
20002a1e:	647b      	str	r3, [r7, #68]	; 0x44
20002a20:	6c7b      	ldr	r3, [r7, #68]	; 0x44
20002a22:	2b03      	cmp	r3, #3
20002a24:	d9e0      	bls.n	200029e8 <main+0x2c>
			}
		}
	}
	volatile door active_doors[amountOfActiveDoors];
20002a26:	69be      	ldr	r6, [r7, #24]
20002a28:	1e73      	subs	r3, r6, #1
20002a2a:	623b      	str	r3, [r7, #32]
20002a2c:	0033      	movs	r3, r6
20002a2e:	60bb      	str	r3, [r7, #8]
20002a30:	2300      	movs	r3, #0
20002a32:	60fb      	str	r3, [r7, #12]
20002a34:	68b9      	ldr	r1, [r7, #8]
20002a36:	68fa      	ldr	r2, [r7, #12]
20002a38:	000b      	movs	r3, r1
20002a3a:	0e1b      	lsrs	r3, r3, #24
20002a3c:	0010      	movs	r0, r2
20002a3e:	0200      	lsls	r0, r0, #8
20002a40:	6178      	str	r0, [r7, #20]
20002a42:	6978      	ldr	r0, [r7, #20]
20002a44:	4318      	orrs	r0, r3
20002a46:	6178      	str	r0, [r7, #20]
20002a48:	000b      	movs	r3, r1
20002a4a:	021b      	lsls	r3, r3, #8
20002a4c:	613b      	str	r3, [r7, #16]
20002a4e:	0033      	movs	r3, r6
20002a50:	603b      	str	r3, [r7, #0]
20002a52:	2300      	movs	r3, #0
20002a54:	607b      	str	r3, [r7, #4]
20002a56:	6839      	ldr	r1, [r7, #0]
20002a58:	687a      	ldr	r2, [r7, #4]
20002a5a:	000b      	movs	r3, r1
20002a5c:	0e1b      	lsrs	r3, r3, #24
20002a5e:	0010      	movs	r0, r2
20002a60:	0205      	lsls	r5, r0, #8
20002a62:	431d      	orrs	r5, r3
20002a64:	000b      	movs	r3, r1
20002a66:	021c      	lsls	r4, r3, #8
20002a68:	0033      	movs	r3, r6
20002a6a:	015b      	lsls	r3, r3, #5
20002a6c:	3303      	adds	r3, #3
20002a6e:	3307      	adds	r3, #7
20002a70:	08db      	lsrs	r3, r3, #3
20002a72:	00db      	lsls	r3, r3, #3
20002a74:	466a      	mov	r2, sp
20002a76:	1ad3      	subs	r3, r2, r3
20002a78:	469d      	mov	sp, r3
20002a7a:	ab04      	add	r3, sp, #16
20002a7c:	3303      	adds	r3, #3
20002a7e:	089b      	lsrs	r3, r3, #2
20002a80:	009b      	lsls	r3, r3, #2
20002a82:	61fb      	str	r3, [r7, #28]
	int counter = 0;
20002a84:	2300      	movs	r3, #0
20002a86:	64fb      	str	r3, [r7, #76]	; 0x4c
	for (int j = 0; j < (sizeof(GPIO_Ports) /sizeof(GPIO_TypeDef *)); j++)
20002a88:	2300      	movs	r3, #0
20002a8a:	643b      	str	r3, [r7, #64]	; 0x40
20002a8c:	e051      	b.n	20002b32 <main+0x176>
	{
		for (int i = 0; i < sizeof(GPIO_Pins) / sizeof(uint16_t); i = i + 2)
20002a8e:	2300      	movs	r3, #0
20002a90:	63fb      	str	r3, [r7, #60]	; 0x3c
20002a92:	e048      	b.n	20002b26 <main+0x16a>
		{
			if(!GPIO_ReadInputDataBit(GPIO_Ports[j], GPIO_Pins[i])){
20002a94:	4bae      	ldr	r3, [pc, #696]	; (20002d50 <main+0x394>)
20002a96:	6c3a      	ldr	r2, [r7, #64]	; 0x40
20002a98:	0092      	lsls	r2, r2, #2
20002a9a:	58d0      	ldr	r0, [r2, r3]
20002a9c:	4bad      	ldr	r3, [pc, #692]	; (20002d54 <main+0x398>)
20002a9e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
20002aa0:	0052      	lsls	r2, r2, #1
20002aa2:	5ad3      	ldrh	r3, [r2, r3]
20002aa4:	0019      	movs	r1, r3
20002aa6:	f000 ff68 	bl	2000397a <GPIO_ReadInputDataBit>
20002aaa:	1e03      	subs	r3, r0, #0
20002aac:	d138      	bne.n	20002b20 <main+0x164>
				active_doors[counter].GPIO_read = GPIO_Pins[i];
20002aae:	4ba9      	ldr	r3, [pc, #676]	; (20002d54 <main+0x398>)
20002ab0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
20002ab2:	0052      	lsls	r2, r2, #1
20002ab4:	5ad3      	ldrh	r3, [r2, r3]
20002ab6:	0019      	movs	r1, r3
20002ab8:	69fa      	ldr	r2, [r7, #28]
20002aba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
20002abc:	015b      	lsls	r3, r3, #5
20002abe:	18d3      	adds	r3, r2, r3
20002ac0:	3314      	adds	r3, #20
20002ac2:	6019      	str	r1, [r3, #0]
				active_doors[counter].GPIO_lamp = GPIO_Pins[i+1];
20002ac4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
20002ac6:	1c5a      	adds	r2, r3, #1
20002ac8:	4ba2      	ldr	r3, [pc, #648]	; (20002d54 <main+0x398>)
20002aca:	0052      	lsls	r2, r2, #1
20002acc:	5ad3      	ldrh	r3, [r2, r3]
20002ace:	0019      	movs	r1, r3
20002ad0:	69fa      	ldr	r2, [r7, #28]
20002ad2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
20002ad4:	015b      	lsls	r3, r3, #5
20002ad6:	18d3      	adds	r3, r2, r3
20002ad8:	3310      	adds	r3, #16
20002ada:	6019      	str	r1, [r3, #0]
				active_doors[counter].controlbits = 0;
20002adc:	69fa      	ldr	r2, [r7, #28]
20002ade:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
20002ae0:	015b      	lsls	r3, r3, #5
20002ae2:	18d3      	adds	r3, r2, r3
20002ae4:	3304      	adds	r3, #4
20002ae6:	2200      	movs	r2, #0
20002ae8:	601a      	str	r2, [r3, #0]
				active_doors[counter].time_larm = 0;
20002aea:	69fa      	ldr	r2, [r7, #28]
20002aec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
20002aee:	015b      	lsls	r3, r3, #5
20002af0:	18d3      	adds	r3, r2, r3
20002af2:	3308      	adds	r3, #8
20002af4:	2200      	movs	r2, #0
20002af6:	701a      	strb	r2, [r3, #0]
				active_doors[counter].time_central_larm = 1;
20002af8:	69fa      	ldr	r2, [r7, #28]
20002afa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
20002afc:	015b      	lsls	r3, r3, #5
20002afe:	18d3      	adds	r3, r2, r3
20002b00:	3309      	adds	r3, #9
20002b02:	2201      	movs	r2, #1
20002b04:	701a      	strb	r2, [r3, #0]
				active_doors[counter].GPIO_type = GPIO_Ports[j];
20002b06:	4b92      	ldr	r3, [pc, #584]	; (20002d50 <main+0x394>)
20002b08:	6c3a      	ldr	r2, [r7, #64]	; 0x40
20002b0a:	0092      	lsls	r2, r2, #2
20002b0c:	58d2      	ldr	r2, [r2, r3]
20002b0e:	69f9      	ldr	r1, [r7, #28]
20002b10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
20002b12:	015b      	lsls	r3, r3, #5
20002b14:	18cb      	adds	r3, r1, r3
20002b16:	331c      	adds	r3, #28
20002b18:	601a      	str	r2, [r3, #0]
				//active_doors[counter] = all_doors[counter];
				counter++;
20002b1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
20002b1c:	3301      	adds	r3, #1
20002b1e:	64fb      	str	r3, [r7, #76]	; 0x4c
		for (int i = 0; i < sizeof(GPIO_Pins) / sizeof(uint16_t); i = i + 2)
20002b20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
20002b22:	3302      	adds	r3, #2
20002b24:	63fb      	str	r3, [r7, #60]	; 0x3c
20002b26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
20002b28:	2b0f      	cmp	r3, #15
20002b2a:	d9b3      	bls.n	20002a94 <main+0xd8>
	for (int j = 0; j < (sizeof(GPIO_Ports) /sizeof(GPIO_TypeDef *)); j++)
20002b2c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
20002b2e:	3301      	adds	r3, #1
20002b30:	643b      	str	r3, [r7, #64]	; 0x40
20002b32:	6c3b      	ldr	r3, [r7, #64]	; 0x40
20002b34:	2b03      	cmp	r3, #3
20002b36:	d9aa      	bls.n	20002a8e <main+0xd2>
			}
		}
	}
	getId((sizeof(active_doors)/sizeof(active_doors[0])));
20002b38:	0033      	movs	r3, r6
20002b3a:	015b      	lsls	r3, r3, #5
20002b3c:	095b      	lsrs	r3, r3, #5
20002b3e:	0018      	movs	r0, r3
20002b40:	f000 f9a0 	bl	20002e84 <getId>
	// ================================== LIGHTS =========================================================
	for (int i = 0; i < sizeof(active_doors)/sizeof(active_doors[0]); i++) //CHRISTMAST LIGHTS FTW
20002b44:	2300      	movs	r3, #0
20002b46:	63bb      	str	r3, [r7, #56]	; 0x38
20002b48:	e015      	b.n	20002b76 <main+0x1ba>
	{
		GPIO_SetBits(active_doors[i].GPIO_type, active_doors[i].GPIO_lamp);
20002b4a:	69fa      	ldr	r2, [r7, #28]
20002b4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
20002b4e:	015b      	lsls	r3, r3, #5
20002b50:	18d3      	adds	r3, r2, r3
20002b52:	331c      	adds	r3, #28
20002b54:	6818      	ldr	r0, [r3, #0]
20002b56:	69fa      	ldr	r2, [r7, #28]
20002b58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
20002b5a:	015b      	lsls	r3, r3, #5
20002b5c:	18d3      	adds	r3, r2, r3
20002b5e:	3310      	adds	r3, #16
20002b60:	681b      	ldr	r3, [r3, #0]
20002b62:	b29b      	uxth	r3, r3
20002b64:	0019      	movs	r1, r3
20002b66:	f000 ff60 	bl	20003a2a <GPIO_SetBits>
		delay(100);	
20002b6a:	2064      	movs	r0, #100	; 0x64
20002b6c:	f7ff ff04 	bl	20002978 <delay>
	for (int i = 0; i < sizeof(active_doors)/sizeof(active_doors[0]); i++) //CHRISTMAST LIGHTS FTW
20002b70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
20002b72:	3301      	adds	r3, #1
20002b74:	63bb      	str	r3, [r7, #56]	; 0x38
20002b76:	0033      	movs	r3, r6
20002b78:	015b      	lsls	r3, r3, #5
20002b7a:	095a      	lsrs	r2, r3, #5
20002b7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
20002b7e:	429a      	cmp	r2, r3
20002b80:	d8e3      	bhi.n	20002b4a <main+0x18e>
		
	}
	for (int i = sizeof(active_doors)/sizeof(active_doors[0]); i >= 0 ; i--) //CHRISTMAST LIGHTS FTW
20002b82:	0033      	movs	r3, r6
20002b84:	015b      	lsls	r3, r3, #5
20002b86:	095b      	lsrs	r3, r3, #5
20002b88:	637b      	str	r3, [r7, #52]	; 0x34
20002b8a:	e015      	b.n	20002bb8 <main+0x1fc>
	{
		GPIO_ResetBits(active_doors[i].GPIO_type, active_doors[i].GPIO_lamp);
20002b8c:	69fa      	ldr	r2, [r7, #28]
20002b8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
20002b90:	015b      	lsls	r3, r3, #5
20002b92:	18d3      	adds	r3, r2, r3
20002b94:	331c      	adds	r3, #28
20002b96:	6818      	ldr	r0, [r3, #0]
20002b98:	69fa      	ldr	r2, [r7, #28]
20002b9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
20002b9c:	015b      	lsls	r3, r3, #5
20002b9e:	18d3      	adds	r3, r2, r3
20002ba0:	3310      	adds	r3, #16
20002ba2:	681b      	ldr	r3, [r3, #0]
20002ba4:	b29b      	uxth	r3, r3
20002ba6:	0019      	movs	r1, r3
20002ba8:	f000 ff4e 	bl	20003a48 <GPIO_ResetBits>
		delay(100);
20002bac:	2064      	movs	r0, #100	; 0x64
20002bae:	f7ff fee3 	bl	20002978 <delay>
	for (int i = sizeof(active_doors)/sizeof(active_doors[0]); i >= 0 ; i--) //CHRISTMAST LIGHTS FTW
20002bb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
20002bb4:	3b01      	subs	r3, #1
20002bb6:	637b      	str	r3, [r7, #52]	; 0x34
20002bb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
20002bba:	2b00      	cmp	r3, #0
20002bbc:	dae6      	bge.n	20002b8c <main+0x1d0>
	}
	delay(200);
20002bbe:	20c8      	movs	r0, #200	; 0xc8
20002bc0:	f7ff feda 	bl	20002978 <delay>
	for (int i = 0; i < sizeof(active_doors)/sizeof(active_doors[0]); i++) //CHRISTMAST LIGHTS FTW
20002bc4:	2300      	movs	r3, #0
20002bc6:	633b      	str	r3, [r7, #48]	; 0x30
20002bc8:	e012      	b.n	20002bf0 <main+0x234>
	{
		GPIO_SetBits(active_doors[i].GPIO_type, active_doors[i].GPIO_lamp);
20002bca:	69fa      	ldr	r2, [r7, #28]
20002bcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
20002bce:	015b      	lsls	r3, r3, #5
20002bd0:	18d3      	adds	r3, r2, r3
20002bd2:	331c      	adds	r3, #28
20002bd4:	6818      	ldr	r0, [r3, #0]
20002bd6:	69fa      	ldr	r2, [r7, #28]
20002bd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
20002bda:	015b      	lsls	r3, r3, #5
20002bdc:	18d3      	adds	r3, r2, r3
20002bde:	3310      	adds	r3, #16
20002be0:	681b      	ldr	r3, [r3, #0]
20002be2:	b29b      	uxth	r3, r3
20002be4:	0019      	movs	r1, r3
20002be6:	f000 ff20 	bl	20003a2a <GPIO_SetBits>
	for (int i = 0; i < sizeof(active_doors)/sizeof(active_doors[0]); i++) //CHRISTMAST LIGHTS FTW
20002bea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
20002bec:	3301      	adds	r3, #1
20002bee:	633b      	str	r3, [r7, #48]	; 0x30
20002bf0:	0033      	movs	r3, r6
20002bf2:	015b      	lsls	r3, r3, #5
20002bf4:	095a      	lsrs	r2, r3, #5
20002bf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
20002bf8:	429a      	cmp	r2, r3
20002bfa:	d8e6      	bhi.n	20002bca <main+0x20e>
	}
	delay(3000);
20002bfc:	4b56      	ldr	r3, [pc, #344]	; (20002d58 <main+0x39c>)
20002bfe:	0018      	movs	r0, r3
20002c00:	f7ff feba 	bl	20002978 <delay>
	for (int i = 0; i < sizeof(active_doors)/sizeof(active_doors[0]); i++) //CHRISTMAST LIGHTS FTW
20002c04:	2300      	movs	r3, #0
20002c06:	62fb      	str	r3, [r7, #44]	; 0x2c
20002c08:	e012      	b.n	20002c30 <main+0x274>
	{
		GPIO_ResetBits(active_doors[i].GPIO_type, active_doors[i].GPIO_lamp);
20002c0a:	69fa      	ldr	r2, [r7, #28]
20002c0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
20002c0e:	015b      	lsls	r3, r3, #5
20002c10:	18d3      	adds	r3, r2, r3
20002c12:	331c      	adds	r3, #28
20002c14:	6818      	ldr	r0, [r3, #0]
20002c16:	69fa      	ldr	r2, [r7, #28]
20002c18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
20002c1a:	015b      	lsls	r3, r3, #5
20002c1c:	18d3      	adds	r3, r2, r3
20002c1e:	3310      	adds	r3, #16
20002c20:	681b      	ldr	r3, [r3, #0]
20002c22:	b29b      	uxth	r3, r3
20002c24:	0019      	movs	r1, r3
20002c26:	f000 ff0f 	bl	20003a48 <GPIO_ResetBits>
	for (int i = 0; i < sizeof(active_doors)/sizeof(active_doors[0]); i++) //CHRISTMAST LIGHTS FTW
20002c2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
20002c2c:	3301      	adds	r3, #1
20002c2e:	62fb      	str	r3, [r7, #44]	; 0x2c
20002c30:	0033      	movs	r3, r6
20002c32:	015b      	lsls	r3, r3, #5
20002c34:	095a      	lsrs	r2, r3, #5
20002c36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
20002c38:	429a      	cmp	r2, r3
20002c3a:	d8e6      	bhi.n	20002c0a <main+0x24e>
	}
	

	GPIO_SetBits(GPIOB, GPIO_Pin_2);
20002c3c:	4b47      	ldr	r3, [pc, #284]	; (20002d5c <main+0x3a0>)
20002c3e:	2104      	movs	r1, #4
20002c40:	0018      	movs	r0, r3
20002c42:	f000 fef2 	bl	20003a2a <GPIO_SetBits>
	//active_doors[2].controlbits |= 4;
	while (1)
	{
		for (int i = 0; i < sizeof(active_doors)/sizeof(active_doors[0]); i++)
20002c46:	2300      	movs	r3, #0
20002c48:	62bb      	str	r3, [r7, #40]	; 0x28
20002c4a:	e0fa      	b.n	20002e42 <main+0x486>
		{
		
			if (!(active_doors[i].controlbits & 4))
20002c4c:	69fa      	ldr	r2, [r7, #28]
20002c4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
20002c50:	015b      	lsls	r3, r3, #5
20002c52:	18d3      	adds	r3, r2, r3
20002c54:	3304      	adds	r3, #4
20002c56:	681b      	ldr	r3, [r3, #0]
20002c58:	2204      	movs	r2, #4
20002c5a:	4013      	ands	r3, r2
20002c5c:	d000      	beq.n	20002c60 <main+0x2a4>
20002c5e:	e0ed      	b.n	20002e3c <main+0x480>
				{
				if (!GPIO_ReadInputDataBit(active_doors[i].GPIO_type, active_doors[i].GPIO_read)){ //GPIO pinnen är noll ifall dörren är stängd därför !
20002c60:	69fa      	ldr	r2, [r7, #28]
20002c62:	6abb      	ldr	r3, [r7, #40]	; 0x28
20002c64:	015b      	lsls	r3, r3, #5
20002c66:	18d3      	adds	r3, r2, r3
20002c68:	331c      	adds	r3, #28
20002c6a:	6818      	ldr	r0, [r3, #0]
20002c6c:	69fa      	ldr	r2, [r7, #28]
20002c6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
20002c70:	015b      	lsls	r3, r3, #5
20002c72:	18d3      	adds	r3, r2, r3
20002c74:	3314      	adds	r3, #20
20002c76:	681b      	ldr	r3, [r3, #0]
20002c78:	b29b      	uxth	r3, r3
20002c7a:	0019      	movs	r1, r3
20002c7c:	f000 fe7d 	bl	2000397a <GPIO_ReadInputDataBit>
20002c80:	1e03      	subs	r3, r0, #0
20002c82:	d10e      	bne.n	20002ca2 <main+0x2e6>
					active_doors[i].controlbits &= 0xFFFC; //Nollställer kontrollbiten för ifall en dörr är öppen och spam kontrollbiten för 
20002c84:	69fa      	ldr	r2, [r7, #28]
20002c86:	6abb      	ldr	r3, [r7, #40]	; 0x28
20002c88:	015b      	lsls	r3, r3, #5
20002c8a:	18d3      	adds	r3, r2, r3
20002c8c:	3304      	adds	r3, #4
20002c8e:	681b      	ldr	r3, [r3, #0]
20002c90:	4a33      	ldr	r2, [pc, #204]	; (20002d60 <main+0x3a4>)
20002c92:	401a      	ands	r2, r3
20002c94:	69f9      	ldr	r1, [r7, #28]
20002c96:	6abb      	ldr	r3, [r7, #40]	; 0x28
20002c98:	015b      	lsls	r3, r3, #5
20002c9a:	18cb      	adds	r3, r1, r3
20002c9c:	3304      	adds	r3, #4
20002c9e:	601a      	str	r2, [r3, #0]
20002ca0:	e01e      	b.n	20002ce0 <main+0x324>
					//att skicka medelande till centralenheten, när den detekteras som stängd
					
				}
				else{
					if (!active_doors[i].controlbits & 1) // Kollar så att dörren inte larmar sen innan så larmtick inte uppdateras hela tiden
20002ca2:	69fa      	ldr	r2, [r7, #28]
20002ca4:	6abb      	ldr	r3, [r7, #40]	; 0x28
20002ca6:	015b      	lsls	r3, r3, #5
20002ca8:	18d3      	adds	r3, r2, r3
20002caa:	3304      	adds	r3, #4
20002cac:	681b      	ldr	r3, [r3, #0]
20002cae:	2b00      	cmp	r3, #0
20002cb0:	d108      	bne.n	20002cc4 <main+0x308>
					{
						active_doors[i].larmTick = msTicks;
20002cb2:	4b25      	ldr	r3, [pc, #148]	; (20002d48 <main+0x38c>)
20002cb4:	681b      	ldr	r3, [r3, #0]
20002cb6:	0019      	movs	r1, r3
20002cb8:	69fa      	ldr	r2, [r7, #28]
20002cba:	6abb      	ldr	r3, [r7, #40]	; 0x28
20002cbc:	015b      	lsls	r3, r3, #5
20002cbe:	18d3      	adds	r3, r2, r3
20002cc0:	3318      	adds	r3, #24
20002cc2:	6019      	str	r1, [r3, #0]
					}
					active_doors[i].controlbits |= 1; // sätter dörrens larm kontrollbit till 1.
20002cc4:	69fa      	ldr	r2, [r7, #28]
20002cc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
20002cc8:	015b      	lsls	r3, r3, #5
20002cca:	18d3      	adds	r3, r2, r3
20002ccc:	3304      	adds	r3, #4
20002cce:	681b      	ldr	r3, [r3, #0]
20002cd0:	2201      	movs	r2, #1
20002cd2:	431a      	orrs	r2, r3
20002cd4:	69f9      	ldr	r1, [r7, #28]
20002cd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
20002cd8:	015b      	lsls	r3, r3, #5
20002cda:	18cb      	adds	r3, r1, r3
20002cdc:	3304      	adds	r3, #4
20002cde:	601a      	str	r2, [r3, #0]
				}
				for (int i = 0; i < sizeof(active_doors)/sizeof(active_doors[0]); i++)
20002ce0:	2300      	movs	r3, #0
20002ce2:	627b      	str	r3, [r7, #36]	; 0x24
20002ce4:	e0a3      	b.n	20002e2e <main+0x472>
				{
					if (active_doors[i].controlbits & 1 && msTicks > (active_doors[i].larmTick + 1000 * 10 * active_doors[i].time_larm))
20002ce6:	69fa      	ldr	r2, [r7, #28]
20002ce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20002cea:	015b      	lsls	r3, r3, #5
20002cec:	18d3      	adds	r3, r2, r3
20002cee:	3304      	adds	r3, #4
20002cf0:	681b      	ldr	r3, [r3, #0]
20002cf2:	2201      	movs	r2, #1
20002cf4:	4013      	ands	r3, r2
20002cf6:	d037      	beq.n	20002d68 <main+0x3ac>
20002cf8:	69fa      	ldr	r2, [r7, #28]
20002cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20002cfc:	015b      	lsls	r3, r3, #5
20002cfe:	18d3      	adds	r3, r2, r3
20002d00:	3318      	adds	r3, #24
20002d02:	681a      	ldr	r2, [r3, #0]
20002d04:	69f9      	ldr	r1, [r7, #28]
20002d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20002d08:	015b      	lsls	r3, r3, #5
20002d0a:	18cb      	adds	r3, r1, r3
20002d0c:	3308      	adds	r3, #8
20002d0e:	781b      	ldrb	r3, [r3, #0]
20002d10:	b2db      	uxtb	r3, r3
20002d12:	0019      	movs	r1, r3
20002d14:	4b13      	ldr	r3, [pc, #76]	; (20002d64 <main+0x3a8>)
20002d16:	434b      	muls	r3, r1
20002d18:	18d3      	adds	r3, r2, r3
20002d1a:	001a      	movs	r2, r3
20002d1c:	4b0a      	ldr	r3, [pc, #40]	; (20002d48 <main+0x38c>)
20002d1e:	681b      	ldr	r3, [r3, #0]
20002d20:	429a      	cmp	r2, r3
20002d22:	d221      	bcs.n	20002d68 <main+0x3ac>
					{
						GPIO_SetBits(active_doors[i].GPIO_type, active_doors[i].GPIO_lamp); // tänder lampan ifall tiden för att dörren ska larma har gått
20002d24:	69fa      	ldr	r2, [r7, #28]
20002d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20002d28:	015b      	lsls	r3, r3, #5
20002d2a:	18d3      	adds	r3, r2, r3
20002d2c:	331c      	adds	r3, #28
20002d2e:	6818      	ldr	r0, [r3, #0]
20002d30:	69fa      	ldr	r2, [r7, #28]
20002d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20002d34:	015b      	lsls	r3, r3, #5
20002d36:	18d3      	adds	r3, r2, r3
20002d38:	3310      	adds	r3, #16
20002d3a:	681b      	ldr	r3, [r3, #0]
20002d3c:	b29b      	uxth	r3, r3
20002d3e:	0019      	movs	r1, r3
20002d40:	f000 fe73 	bl	20003a2a <GPIO_SetBits>
20002d44:	e020      	b.n	20002d88 <main+0x3cc>
20002d46:	46c0      	nop			; (mov r8, r8)
20002d48:	20003cb4 			; <UNDEFINED> instruction: 0x20003cb4
20002d4c:	000007cf 	andeq	r0, r0, pc, asr #15
20002d50:	20003dd4 	ldrdcs	r3, [r0], -r4
20002d54:	20003db4 			; <UNDEFINED> instruction: 0x20003db4
20002d58:	00000bb8 			; <UNDEFINED> instruction: 0x00000bb8
20002d5c:	40020400 	andmi	r0, r2, r0, lsl #8
20002d60:	0000fffc 	strdeq	pc, [r0], -ip
20002d64:	00002710 	andeq	r2, r0, r0, lsl r7
					}
					else
					{
						GPIO_ResetBits(active_doors[i].GPIO_type, active_doors[i].GPIO_lamp);	// släcker lampan annars
20002d68:	69fa      	ldr	r2, [r7, #28]
20002d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20002d6c:	015b      	lsls	r3, r3, #5
20002d6e:	18d3      	adds	r3, r2, r3
20002d70:	331c      	adds	r3, #28
20002d72:	6818      	ldr	r0, [r3, #0]
20002d74:	69fa      	ldr	r2, [r7, #28]
20002d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20002d78:	015b      	lsls	r3, r3, #5
20002d7a:	18d3      	adds	r3, r2, r3
20002d7c:	3310      	adds	r3, #16
20002d7e:	681b      	ldr	r3, [r3, #0]
20002d80:	b29b      	uxth	r3, r3
20002d82:	0019      	movs	r1, r3
20002d84:	f000 fe60 	bl	20003a48 <GPIO_ResetBits>
					}
					if ((active_doors[i].controlbits & 1 )&& msTicks > (active_doors[i].larmTick + 1000 * 10 * active_doors[i].time_central_larm) && !(active_doors[i].controlbits & 2))
20002d88:	69fa      	ldr	r2, [r7, #28]
20002d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20002d8c:	015b      	lsls	r3, r3, #5
20002d8e:	18d3      	adds	r3, r2, r3
20002d90:	3304      	adds	r3, #4
20002d92:	681b      	ldr	r3, [r3, #0]
20002d94:	2201      	movs	r2, #1
20002d96:	4013      	ands	r3, r2
20002d98:	d046      	beq.n	20002e28 <main+0x46c>
20002d9a:	69fa      	ldr	r2, [r7, #28]
20002d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20002d9e:	015b      	lsls	r3, r3, #5
20002da0:	18d3      	adds	r3, r2, r3
20002da2:	3318      	adds	r3, #24
20002da4:	681a      	ldr	r2, [r3, #0]
20002da6:	69f9      	ldr	r1, [r7, #28]
20002da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20002daa:	015b      	lsls	r3, r3, #5
20002dac:	18cb      	adds	r3, r1, r3
20002dae:	3309      	adds	r3, #9
20002db0:	781b      	ldrb	r3, [r3, #0]
20002db2:	b2db      	uxtb	r3, r3
20002db4:	0019      	movs	r1, r3
20002db6:	4b27      	ldr	r3, [pc, #156]	; (20002e54 <main+0x498>)
20002db8:	434b      	muls	r3, r1
20002dba:	18d3      	adds	r3, r2, r3
20002dbc:	001a      	movs	r2, r3
20002dbe:	4b26      	ldr	r3, [pc, #152]	; (20002e58 <main+0x49c>)
20002dc0:	681b      	ldr	r3, [r3, #0]
20002dc2:	429a      	cmp	r2, r3
20002dc4:	d230      	bcs.n	20002e28 <main+0x46c>
20002dc6:	69fa      	ldr	r2, [r7, #28]
20002dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20002dca:	015b      	lsls	r3, r3, #5
20002dcc:	18d3      	adds	r3, r2, r3
20002dce:	3304      	adds	r3, #4
20002dd0:	681b      	ldr	r3, [r3, #0]
20002dd2:	2202      	movs	r2, #2
20002dd4:	4013      	ands	r3, r2
20002dd6:	d127      	bne.n	20002e28 <main+0x46c>
					{
						active_doors[i].controlbits |= 2;
20002dd8:	69fa      	ldr	r2, [r7, #28]
20002dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20002ddc:	015b      	lsls	r3, r3, #5
20002dde:	18d3      	adds	r3, r2, r3
20002de0:	3304      	adds	r3, #4
20002de2:	681b      	ldr	r3, [r3, #0]
20002de4:	2202      	movs	r2, #2
20002de6:	431a      	orrs	r2, r3
20002de8:	69f9      	ldr	r1, [r7, #28]
20002dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20002dec:	015b      	lsls	r3, r3, #5
20002dee:	18cb      	adds	r3, r1, r3
20002df0:	3304      	adds	r3, #4
20002df2:	601a      	str	r2, [r3, #0]
						sendAlarm(active_doors[i]);
20002df4:	69fc      	ldr	r4, [r7, #28]
20002df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20002df8:	015b      	lsls	r3, r3, #5
20002dfa:	469c      	mov	ip, r3
20002dfc:	2110      	movs	r1, #16
20002dfe:	4663      	mov	r3, ip
20002e00:	18e2      	adds	r2, r4, r3
20002e02:	1851      	adds	r1, r2, r1
20002e04:	466a      	mov	r2, sp
20002e06:	c929      	ldmia	r1!, {r0, r3, r5}
20002e08:	c229      	stmia	r2!, {r0, r3, r5}
20002e0a:	6809      	ldr	r1, [r1, #0]
20002e0c:	6011      	str	r1, [r2, #0]
20002e0e:	4663      	mov	r3, ip
20002e10:	5918      	ldr	r0, [r3, r4]
20002e12:	4663      	mov	r3, ip
20002e14:	18e2      	adds	r2, r4, r3
20002e16:	6851      	ldr	r1, [r2, #4]
20002e18:	4663      	mov	r3, ip
20002e1a:	18e2      	adds	r2, r4, r3
20002e1c:	6892      	ldr	r2, [r2, #8]
20002e1e:	0023      	movs	r3, r4
20002e20:	4463      	add	r3, ip
20002e22:	68db      	ldr	r3, [r3, #12]
20002e24:	f000 f8d8 	bl	20002fd8 <sendAlarm>
				for (int i = 0; i < sizeof(active_doors)/sizeof(active_doors[0]); i++)
20002e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20002e2a:	3301      	adds	r3, #1
20002e2c:	627b      	str	r3, [r7, #36]	; 0x24
20002e2e:	0033      	movs	r3, r6
20002e30:	015b      	lsls	r3, r3, #5
20002e32:	095a      	lsrs	r2, r3, #5
20002e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20002e36:	429a      	cmp	r2, r3
20002e38:	d900      	bls.n	20002e3c <main+0x480>
20002e3a:	e754      	b.n	20002ce6 <main+0x32a>
		for (int i = 0; i < sizeof(active_doors)/sizeof(active_doors[0]); i++)
20002e3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
20002e3e:	3301      	adds	r3, #1
20002e40:	62bb      	str	r3, [r7, #40]	; 0x28
20002e42:	0033      	movs	r3, r6
20002e44:	015b      	lsls	r3, r3, #5
20002e46:	095a      	lsrs	r2, r3, #5
20002e48:	6abb      	ldr	r3, [r7, #40]	; 0x28
20002e4a:	429a      	cmp	r2, r3
20002e4c:	d900      	bls.n	20002e50 <main+0x494>
20002e4e:	e6fd      	b.n	20002c4c <main+0x290>
20002e50:	e6f9      	b.n	20002c46 <main+0x28a>
20002e52:	46c0      	nop			; (mov r8, r8)
20002e54:	00002710 	andeq	r2, r0, r0, lsl r7
20002e58:	20003cb4 			; <UNDEFINED> instruction: 0x20003cb4

20002e5c <idAssign_Handler>:
			}
		}
	}
	}
	
	void idAssign_Handler(CanRxMsg* msg){
20002e5c:	b580      	push	{r7, lr}
20002e5e:	b082      	sub	sp, #8
20002e60:	af00      	add	r7, sp, #0
20002e62:	6078      	str	r0, [r7, #4]
		id = msg->Data[0];
20002e64:	687b      	ldr	r3, [r7, #4]
20002e66:	7ada      	ldrb	r2, [r3, #11]
20002e68:	4b04      	ldr	r3, [pc, #16]	; (20002e7c <idAssign_Handler+0x20>)
20002e6a:	701a      	strb	r2, [r3, #0]
		noid = 0;
20002e6c:	4b04      	ldr	r3, [pc, #16]	; (20002e80 <idAssign_Handler+0x24>)
20002e6e:	2200      	movs	r2, #0
20002e70:	701a      	strb	r2, [r3, #0]
	}
20002e72:	46c0      	nop			; (mov r8, r8)
20002e74:	46bd      	mov	sp, r7
20002e76:	b002      	add	sp, #8
20002e78:	bd80      	pop	{r7, pc}
20002e7a:	46c0      	nop			; (mov r8, r8)
20002e7c:	20003cb0 			; <UNDEFINED> instruction: 0x20003cb0
20002e80:	20003db0 			; <UNDEFINED> instruction: 0x20003db0

20002e84 <getId>:

	void getId (int nDoors){
20002e84:	b5f0      	push	{r4, r5, r6, r7, lr}
20002e86:	b08f      	sub	sp, #60	; 0x3c
20002e88:	af02      	add	r7, sp, #8
20002e8a:	6078      	str	r0, [r7, #4]
		CANFilter filter = empty_mask;
20002e8c:	2300      	movs	r3, #0
20002e8e:	627b      	str	r3, [r7, #36]	; 0x24
		CANFilter mask = empty_mask;
20002e90:	2300      	movs	r3, #0
20002e92:	623b      	str	r3, [r7, #32]

		//används för omvandling
		Header header;

		//skriver mask
		mask.IDE = 1;
20002e94:	2020      	movs	r0, #32
20002e96:	183b      	adds	r3, r7, r0
20002e98:	781a      	ldrb	r2, [r3, #0]
20002e9a:	2104      	movs	r1, #4
20002e9c:	430a      	orrs	r2, r1
20002e9e:	701a      	strb	r2, [r3, #0]
		mask.RTR = 1;
20002ea0:	183b      	adds	r3, r7, r0
20002ea2:	781a      	ldrb	r2, [r3, #0]
20002ea4:	2102      	movs	r1, #2
20002ea6:	430a      	orrs	r2, r1
20002ea8:	701a      	strb	r2, [r3, #0]
		header.msgType = ~0;
20002eaa:	201f      	movs	r0, #31
20002eac:	183b      	adds	r3, r7, r0
20002eae:	781a      	ldrb	r2, [r3, #0]
20002eb0:	211c      	movs	r1, #28
20002eb2:	430a      	orrs	r2, r1
20002eb4:	701a      	strb	r2, [r3, #0]
		header.ID = ~0;
20002eb6:	241e      	movs	r4, #30
20002eb8:	193b      	adds	r3, r7, r4
20002eba:	881a      	ldrh	r2, [r3, #0]
20002ebc:	21fe      	movs	r1, #254	; 0xfe
20002ebe:	0049      	lsls	r1, r1, #1
20002ec0:	430a      	orrs	r2, r1
20002ec2:	801a      	strh	r2, [r3, #0]
		header.toCentral = ~0;
20002ec4:	183b      	adds	r3, r7, r0
20002ec6:	781a      	ldrb	r2, [r3, #0]
20002ec8:	2102      	movs	r1, #2
20002eca:	430a      	orrs	r2, r1
20002ecc:	701a      	strb	r2, [r3, #0]
		HEADERtoUINT32(header, mask.ID);
20002ece:	251c      	movs	r5, #28
20002ed0:	197b      	adds	r3, r7, r5
20002ed2:	681b      	ldr	r3, [r3, #0]
20002ed4:	00db      	lsls	r3, r3, #3
20002ed6:	08db      	lsrs	r3, r3, #3
20002ed8:	00db      	lsls	r3, r3, #3
20002eda:	6a3a      	ldr	r2, [r7, #32]
20002edc:	2107      	movs	r1, #7
20002ede:	400a      	ands	r2, r1
20002ee0:	4313      	orrs	r3, r2
20002ee2:	623b      	str	r3, [r7, #32]

		//Skriver filter
		filter.IDE = 1;
20002ee4:	2624      	movs	r6, #36	; 0x24
20002ee6:	19bb      	adds	r3, r7, r6
20002ee8:	781a      	ldrb	r2, [r3, #0]
20002eea:	2104      	movs	r1, #4
20002eec:	430a      	orrs	r2, r1
20002eee:	701a      	strb	r2, [r3, #0]
		filter.RTR = 0;
20002ef0:	19bb      	adds	r3, r7, r6
20002ef2:	781a      	ldrb	r2, [r3, #0]
20002ef4:	2102      	movs	r1, #2
20002ef6:	438a      	bics	r2, r1
20002ef8:	701a      	strb	r2, [r3, #0]
		header.msgType = assignID_msg_type;
20002efa:	183b      	adds	r3, r7, r0
20002efc:	781a      	ldrb	r2, [r3, #0]
20002efe:	211c      	movs	r1, #28
20002f00:	438a      	bics	r2, r1
20002f02:	1c11      	adds	r1, r2, #0
20002f04:	220c      	movs	r2, #12
20002f06:	430a      	orrs	r2, r1
20002f08:	701a      	strb	r2, [r3, #0]
		header.ID = 0;
20002f0a:	193b      	adds	r3, r7, r4
20002f0c:	881a      	ldrh	r2, [r3, #0]
20002f0e:	492d      	ldr	r1, [pc, #180]	; (20002fc4 <getId+0x140>)
20002f10:	400a      	ands	r2, r1
20002f12:	801a      	strh	r2, [r3, #0]
		header.toCentral = 1;
20002f14:	183b      	adds	r3, r7, r0
20002f16:	781a      	ldrb	r2, [r3, #0]
20002f18:	2102      	movs	r1, #2
20002f1a:	430a      	orrs	r2, r1
20002f1c:	701a      	strb	r2, [r3, #0]
		HEADERtoUINT32(header, filter.ID);
20002f1e:	197b      	adds	r3, r7, r5
20002f20:	681b      	ldr	r3, [r3, #0]
20002f22:	00db      	lsls	r3, r3, #3
20002f24:	08db      	lsrs	r3, r3, #3
20002f26:	00db      	lsls	r3, r3, #3
20002f28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
20002f2a:	2107      	movs	r1, #7
20002f2c:	400a      	ands	r2, r1
20002f2e:	4313      	orrs	r3, r2
20002f30:	627b      	str	r3, [r7, #36]	; 0x24

		if (CANhandlerListNotFull()){
20002f32:	f7fd f89d 	bl	20000070 <CANhandlerListNotFull>
20002f36:	1e03      	subs	r3, r0, #0
20002f38:	d007      	beq.n	20002f4a <getId+0xc6>
			CANaddFilterHandler(idAssign_Handler, &filter, &mask);
20002f3a:	2320      	movs	r3, #32
20002f3c:	18fa      	adds	r2, r7, r3
20002f3e:	2324      	movs	r3, #36	; 0x24
20002f40:	18f9      	adds	r1, r7, r3
20002f42:	4b21      	ldr	r3, [pc, #132]	; (20002fc8 <getId+0x144>)
20002f44:	0018      	movs	r0, r3
20002f46:	f7fd f901 	bl	2000014c <CANaddFilterHandler>
		}


		int timeStamp = msTicks + 60 * 1000; 
20002f4a:	4b20      	ldr	r3, [pc, #128]	; (20002fcc <getId+0x148>)
20002f4c:	681b      	ldr	r3, [r3, #0]
20002f4e:	4a20      	ldr	r2, [pc, #128]	; (20002fd0 <getId+0x14c>)
20002f50:	4694      	mov	ip, r2
20002f52:	4463      	add	r3, ip
20002f54:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (RNG_GetFlagStatus(RNG_FLAG_DRDY) == SET && //Nytt meddelande finns
20002f56:	2001      	movs	r0, #1
20002f58:	f000 f8c2 	bl	200030e0 <RNG_GetFlagStatus>
20002f5c:	0003      	movs	r3, r0
20002f5e:	2b01      	cmp	r3, #1
20002f60:	d12c      	bne.n	20002fbc <getId+0x138>
             RNG_GetFlagStatus(RNG_FLAG_CECS) == RESET && //Inget klockfel
20002f62:	2002      	movs	r0, #2
20002f64:	f000 f8bc 	bl	200030e0 <RNG_GetFlagStatus>
20002f68:	1e03      	subs	r3, r0, #0
		if (RNG_GetFlagStatus(RNG_FLAG_DRDY) == SET && //Nytt meddelande finns
20002f6a:	d127      	bne.n	20002fbc <getId+0x138>
             RNG_GetFlagStatus(RNG_FLAG_SECS) == RESET){ //Inget seedfel
20002f6c:	2004      	movs	r0, #4
20002f6e:	f000 f8b7 	bl	200030e0 <RNG_GetFlagStatus>
20002f72:	1e03      	subs	r3, r0, #0
             RNG_GetFlagStatus(RNG_FLAG_CECS) == RESET && //Inget klockfel
20002f74:	d122      	bne.n	20002fbc <getId+0x138>
                    uint32_t rand = RNG_GetRandomNumber();
20002f76:	f000 f88b 	bl	20003090 <RNG_GetRandomNumber>
20002f7a:	0003      	movs	r3, r0
20002f7c:	62bb      	str	r3, [r7, #40]	; 0x28
			 		CanTxMsg idRequest;
					
					encode_request_id(&idRequest,rand,0, nDoors, 69);
20002f7e:	687b      	ldr	r3, [r7, #4]
20002f80:	b2da      	uxtb	r2, r3
20002f82:	6ab9      	ldr	r1, [r7, #40]	; 0x28
20002f84:	2308      	movs	r3, #8
20002f86:	18f8      	adds	r0, r7, r3
20002f88:	2345      	movs	r3, #69	; 0x45
20002f8a:	9300      	str	r3, [sp, #0]
20002f8c:	0013      	movs	r3, r2
20002f8e:	2200      	movs	r2, #0
20002f90:	f000 f971 	bl	20003276 <encode_request_id>
					while (msTicks < timeStamp && noid)
20002f94:	e009      	b.n	20002faa <getId+0x126>
					{
						CANsendMessage(&idRequest);
20002f96:	2308      	movs	r3, #8
20002f98:	18fb      	adds	r3, r7, r3
20002f9a:	0018      	movs	r0, r3
20002f9c:	f7fd f9ad 	bl	200002fa <CANsendMessage>
						delay(1000);
20002fa0:	23fa      	movs	r3, #250	; 0xfa
20002fa2:	009b      	lsls	r3, r3, #2
20002fa4:	0018      	movs	r0, r3
20002fa6:	f7ff fce7 	bl	20002978 <delay>
					while (msTicks < timeStamp && noid)
20002faa:	4b08      	ldr	r3, [pc, #32]	; (20002fcc <getId+0x148>)
20002fac:	681a      	ldr	r2, [r3, #0]
20002fae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
20002fb0:	429a      	cmp	r2, r3
20002fb2:	d203      	bcs.n	20002fbc <getId+0x138>
20002fb4:	4b07      	ldr	r3, [pc, #28]	; (20002fd4 <getId+0x150>)
20002fb6:	781b      	ldrb	r3, [r3, #0]
20002fb8:	2b00      	cmp	r3, #0
20002fba:	d1ec      	bne.n	20002f96 <getId+0x112>
					}
			 }
	}
20002fbc:	46c0      	nop			; (mov r8, r8)
20002fbe:	46bd      	mov	sp, r7
20002fc0:	b00d      	add	sp, #52	; 0x34
20002fc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
20002fc4:	fffffe03 			; <UNDEFINED> instruction: 0xfffffe03
20002fc8:	20002e5d 	andcs	r2, r0, sp, asr lr
20002fcc:	20003cb4 			; <UNDEFINED> instruction: 0x20003cb4
20002fd0:	0000ea60 	andeq	lr, r0, r0, ror #20
20002fd4:	20003db0 			; <UNDEFINED> instruction: 0x20003db0

20002fd8 <sendAlarm>:

	void sendAlarm (door alarming_door){
20002fd8:	b084      	sub	sp, #16
20002fda:	b590      	push	{r4, r7, lr}
20002fdc:	b087      	sub	sp, #28
20002fde:	af00      	add	r7, sp, #0
20002fe0:	2428      	movs	r4, #40	; 0x28
20002fe2:	193c      	adds	r4, r7, r4
20002fe4:	6020      	str	r0, [r4, #0]
20002fe6:	6061      	str	r1, [r4, #4]
20002fe8:	60a2      	str	r2, [r4, #8]
20002fea:	60e3      	str	r3, [r4, #12]
		CanTxMsg testMsg = {
20002fec:	1d3b      	adds	r3, r7, #4
20002fee:	0018      	movs	r0, r3
20002ff0:	2314      	movs	r3, #20
20002ff2:	001a      	movs	r2, r3
20002ff4:	2100      	movs	r1, #0
20002ff6:	f000 fe53 	bl	20003ca0 <memset>
20002ffa:	1d3b      	adds	r3, r7, #4
20002ffc:	2204      	movs	r2, #4
20002ffe:	605a      	str	r2, [r3, #4]
20003000:	1d3b      	adds	r3, r7, #4
20003002:	2204      	movs	r2, #4
20003004:	721a      	strb	r2, [r3, #8]
20003006:	1d3b      	adds	r3, r7, #4
20003008:	2204      	movs	r2, #4
2000300a:	729a      	strb	r2, [r3, #10]
2000300c:	1d3b      	adds	r3, r7, #4
2000300e:	220a      	movs	r2, #10
20003010:	72da      	strb	r2, [r3, #11]
20003012:	1d3b      	adds	r3, r7, #4
20003014:	220b      	movs	r2, #11
20003016:	731a      	strb	r2, [r3, #12]
20003018:	1d3b      	adds	r3, r7, #4
2000301a:	220c      	movs	r2, #12
2000301c:	735a      	strb	r2, [r3, #13]
2000301e:	1d3b      	adds	r3, r7, #4
20003020:	2201      	movs	r2, #1
20003022:	739a      	strb	r2, [r3, #14]
							0, 0x4, CAN_Id_Extended, CAN_RTR_DATA, 4, {0xa,0xb,0xc,1} 
						};
						CANsendMessage(&testMsg);
20003024:	1d3b      	adds	r3, r7, #4
20003026:	0018      	movs	r0, r3
20003028:	f7fd f967 	bl	200002fa <CANsendMessage>
2000302c:	46c0      	nop			; (mov r8, r8)
2000302e:	46bd      	mov	sp, r7
20003030:	b007      	add	sp, #28
20003032:	bc90      	pop	{r4, r7}
20003034:	bc08      	pop	{r3}
20003036:	b004      	add	sp, #16
20003038:	4718      	bx	r3
2000303a:	46c0      	nop			; (mov r8, r8)

2000303c <RNG_DeInit>:
  * @brief  De-initializes the RNG peripheral registers to their default reset values.
  * @param  None
  * @retval None
  */
void RNG_DeInit(void)
{
2000303c:	b580      	push	{r7, lr}
2000303e:	af00      	add	r7, sp, #0
#if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F469_479xx)  
  /* Enable RNG reset state */
  RCC_AHB2PeriphResetCmd(RCC_AHB2Periph_RNG, ENABLE);
20003040:	2101      	movs	r1, #1
20003042:	2040      	movs	r0, #64	; 0x40
20003044:	f7ff f9a4 	bl	20002390 <RCC_AHB2PeriphResetCmd>

  /* Release RNG from reset state */
  RCC_AHB2PeriphResetCmd(RCC_AHB2Periph_RNG, DISABLE);
20003048:	2100      	movs	r1, #0
2000304a:	2040      	movs	r0, #64	; 0x40
2000304c:	f7ff f9a0 	bl	20002390 <RCC_AHB2PeriphResetCmd>
  RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_RNG, ENABLE);

  /* Release RNG from reset state */
  RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_RNG, DISABLE); 
#endif /* STM32F410xx*/  
}
20003050:	46c0      	nop			; (mov r8, r8)
20003052:	46bd      	mov	sp, r7
20003054:	bd80      	pop	{r7, pc}

20003056 <RNG_Cmd>:
  * @param  NewState: new state of the RNG peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RNG_Cmd(FunctionalState NewState)
{
20003056:	b580      	push	{r7, lr}
20003058:	b082      	sub	sp, #8
2000305a:	af00      	add	r7, sp, #0
2000305c:	0002      	movs	r2, r0
2000305e:	1dfb      	adds	r3, r7, #7
20003060:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
20003062:	1dfb      	adds	r3, r7, #7
20003064:	781b      	ldrb	r3, [r3, #0]
20003066:	2b00      	cmp	r3, #0
20003068:	d006      	beq.n	20003078 <RNG_Cmd+0x22>
  {
    /* Enable the RNG */
    RNG->CR |= RNG_CR_RNGEN;
2000306a:	4b08      	ldr	r3, [pc, #32]	; (2000308c <RNG_Cmd+0x36>)
2000306c:	681a      	ldr	r2, [r3, #0]
2000306e:	4b07      	ldr	r3, [pc, #28]	; (2000308c <RNG_Cmd+0x36>)
20003070:	2104      	movs	r1, #4
20003072:	430a      	orrs	r2, r1
20003074:	601a      	str	r2, [r3, #0]
  else
  {
    /* Disable the RNG */
    RNG->CR &= ~RNG_CR_RNGEN;
  }
}
20003076:	e005      	b.n	20003084 <RNG_Cmd+0x2e>
    RNG->CR &= ~RNG_CR_RNGEN;
20003078:	4b04      	ldr	r3, [pc, #16]	; (2000308c <RNG_Cmd+0x36>)
2000307a:	681a      	ldr	r2, [r3, #0]
2000307c:	4b03      	ldr	r3, [pc, #12]	; (2000308c <RNG_Cmd+0x36>)
2000307e:	2104      	movs	r1, #4
20003080:	438a      	bics	r2, r1
20003082:	601a      	str	r2, [r3, #0]
}
20003084:	46c0      	nop			; (mov r8, r8)
20003086:	46bd      	mov	sp, r7
20003088:	b002      	add	sp, #8
2000308a:	bd80      	pop	{r7, pc}
2000308c:	50060800 	andpl	r0, r6, r0, lsl #16

20003090 <RNG_GetRandomNumber>:
  *         
  * @param  None
  * @retval 32-bit random number.
  */
uint32_t RNG_GetRandomNumber(void)
{
20003090:	b580      	push	{r7, lr}
20003092:	af00      	add	r7, sp, #0
  /* Return the 32 bit random number from the DR register */
  return RNG->DR;
20003094:	4b02      	ldr	r3, [pc, #8]	; (200030a0 <RNG_GetRandomNumber+0x10>)
20003096:	689b      	ldr	r3, [r3, #8]
}
20003098:	0018      	movs	r0, r3
2000309a:	46bd      	mov	sp, r7
2000309c:	bd80      	pop	{r7, pc}
2000309e:	46c0      	nop			; (mov r8, r8)
200030a0:	50060800 	andpl	r0, r6, r0, lsl #16

200030a4 <RNG_ITConfig>:
  * @param  NewState: new state of the RNG interrupt.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RNG_ITConfig(FunctionalState NewState)
{
200030a4:	b580      	push	{r7, lr}
200030a6:	b082      	sub	sp, #8
200030a8:	af00      	add	r7, sp, #0
200030aa:	0002      	movs	r2, r0
200030ac:	1dfb      	adds	r3, r7, #7
200030ae:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
200030b0:	1dfb      	adds	r3, r7, #7
200030b2:	781b      	ldrb	r3, [r3, #0]
200030b4:	2b00      	cmp	r3, #0
200030b6:	d006      	beq.n	200030c6 <RNG_ITConfig+0x22>
  {
    /* Enable the RNG interrupt */
    RNG->CR |= RNG_CR_IE;
200030b8:	4b08      	ldr	r3, [pc, #32]	; (200030dc <RNG_ITConfig+0x38>)
200030ba:	681a      	ldr	r2, [r3, #0]
200030bc:	4b07      	ldr	r3, [pc, #28]	; (200030dc <RNG_ITConfig+0x38>)
200030be:	2108      	movs	r1, #8
200030c0:	430a      	orrs	r2, r1
200030c2:	601a      	str	r2, [r3, #0]
  else
  {
    /* Disable the RNG interrupt */
    RNG->CR &= ~RNG_CR_IE;
  }
}
200030c4:	e005      	b.n	200030d2 <RNG_ITConfig+0x2e>
    RNG->CR &= ~RNG_CR_IE;
200030c6:	4b05      	ldr	r3, [pc, #20]	; (200030dc <RNG_ITConfig+0x38>)
200030c8:	681a      	ldr	r2, [r3, #0]
200030ca:	4b04      	ldr	r3, [pc, #16]	; (200030dc <RNG_ITConfig+0x38>)
200030cc:	2108      	movs	r1, #8
200030ce:	438a      	bics	r2, r1
200030d0:	601a      	str	r2, [r3, #0]
}
200030d2:	46c0      	nop			; (mov r8, r8)
200030d4:	46bd      	mov	sp, r7
200030d6:	b002      	add	sp, #8
200030d8:	bd80      	pop	{r7, pc}
200030da:	46c0      	nop			; (mov r8, r8)
200030dc:	50060800 	andpl	r0, r6, r0, lsl #16

200030e0 <RNG_GetFlagStatus>:
  *            @arg RNG_FLAG_CECS: Clock Error Current flag.
  *            @arg RNG_FLAG_SECS: Seed Error Current flag.
  * @retval The new state of RNG_FLAG (SET or RESET).
  */
FlagStatus RNG_GetFlagStatus(uint8_t RNG_FLAG)
{
200030e0:	b580      	push	{r7, lr}
200030e2:	b084      	sub	sp, #16
200030e4:	af00      	add	r7, sp, #0
200030e6:	0002      	movs	r2, r0
200030e8:	1dfb      	adds	r3, r7, #7
200030ea:	701a      	strb	r2, [r3, #0]
  FlagStatus bitstatus = RESET;
200030ec:	230f      	movs	r3, #15
200030ee:	18fb      	adds	r3, r7, r3
200030f0:	2200      	movs	r2, #0
200030f2:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RNG_GET_FLAG(RNG_FLAG));

  /* Check the status of the specified RNG flag */
  if ((RNG->SR & RNG_FLAG) != (uint8_t)RESET)
200030f4:	4b0a      	ldr	r3, [pc, #40]	; (20003120 <RNG_GetFlagStatus+0x40>)
200030f6:	685b      	ldr	r3, [r3, #4]
200030f8:	1dfa      	adds	r2, r7, #7
200030fa:	7812      	ldrb	r2, [r2, #0]
200030fc:	4013      	ands	r3, r2
200030fe:	d004      	beq.n	2000310a <RNG_GetFlagStatus+0x2a>
  {
    /* RNG_FLAG is set */
    bitstatus = SET;
20003100:	230f      	movs	r3, #15
20003102:	18fb      	adds	r3, r7, r3
20003104:	2201      	movs	r2, #1
20003106:	701a      	strb	r2, [r3, #0]
20003108:	e003      	b.n	20003112 <RNG_GetFlagStatus+0x32>
  }
  else
  {
    /* RNG_FLAG is reset */
    bitstatus = RESET;
2000310a:	230f      	movs	r3, #15
2000310c:	18fb      	adds	r3, r7, r3
2000310e:	2200      	movs	r2, #0
20003110:	701a      	strb	r2, [r3, #0]
  }
  /* Return the RNG_FLAG status */
  return  bitstatus;
20003112:	230f      	movs	r3, #15
20003114:	18fb      	adds	r3, r7, r3
20003116:	781b      	ldrb	r3, [r3, #0]
}
20003118:	0018      	movs	r0, r3
2000311a:	46bd      	mov	sp, r7
2000311c:	b004      	add	sp, #16
2000311e:	bd80      	pop	{r7, pc}
20003120:	50060800 	andpl	r0, r6, r0, lsl #16

20003124 <RNG_ClearFlag>:
  *         This flag is cleared only by reading the Random number data (using 
  *         RNG_GetRandomNumber() function).                           
  * @retval None
  */
void RNG_ClearFlag(uint8_t RNG_FLAG)
{
20003124:	b580      	push	{r7, lr}
20003126:	b082      	sub	sp, #8
20003128:	af00      	add	r7, sp, #0
2000312a:	0002      	movs	r2, r0
2000312c:	1dfb      	adds	r3, r7, #7
2000312e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RNG_CLEAR_FLAG(RNG_FLAG));
  /* Clear the selected RNG flags */
  RNG->SR = ~(uint32_t)(((uint32_t)RNG_FLAG) << 4);
20003130:	1dfb      	adds	r3, r7, #7
20003132:	781b      	ldrb	r3, [r3, #0]
20003134:	011a      	lsls	r2, r3, #4
20003136:	4b03      	ldr	r3, [pc, #12]	; (20003144 <RNG_ClearFlag+0x20>)
20003138:	43d2      	mvns	r2, r2
2000313a:	605a      	str	r2, [r3, #4]
}
2000313c:	46c0      	nop			; (mov r8, r8)
2000313e:	46bd      	mov	sp, r7
20003140:	b002      	add	sp, #8
20003142:	bd80      	pop	{r7, pc}
20003144:	50060800 	andpl	r0, r6, r0, lsl #16

20003148 <RNG_GetITStatus>:
  *            @arg RNG_IT_CEI: Clock Error Interrupt.
  *            @arg RNG_IT_SEI: Seed Error Interrupt.                   
  * @retval The new state of RNG_IT (SET or RESET).
  */
ITStatus RNG_GetITStatus(uint8_t RNG_IT)
{
20003148:	b580      	push	{r7, lr}
2000314a:	b084      	sub	sp, #16
2000314c:	af00      	add	r7, sp, #0
2000314e:	0002      	movs	r2, r0
20003150:	1dfb      	adds	r3, r7, #7
20003152:	701a      	strb	r2, [r3, #0]
  ITStatus bitstatus = RESET;
20003154:	230f      	movs	r3, #15
20003156:	18fb      	adds	r3, r7, r3
20003158:	2200      	movs	r2, #0
2000315a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RNG_GET_IT(RNG_IT));

  /* Check the status of the specified RNG interrupt */
  if ((RNG->SR & RNG_IT) != (uint8_t)RESET)
2000315c:	4b0a      	ldr	r3, [pc, #40]	; (20003188 <RNG_GetITStatus+0x40>)
2000315e:	685b      	ldr	r3, [r3, #4]
20003160:	1dfa      	adds	r2, r7, #7
20003162:	7812      	ldrb	r2, [r2, #0]
20003164:	4013      	ands	r3, r2
20003166:	d004      	beq.n	20003172 <RNG_GetITStatus+0x2a>
  {
    /* RNG_IT is set */
    bitstatus = SET;
20003168:	230f      	movs	r3, #15
2000316a:	18fb      	adds	r3, r7, r3
2000316c:	2201      	movs	r2, #1
2000316e:	701a      	strb	r2, [r3, #0]
20003170:	e003      	b.n	2000317a <RNG_GetITStatus+0x32>
  }
  else
  {
    /* RNG_IT is reset */
    bitstatus = RESET;
20003172:	230f      	movs	r3, #15
20003174:	18fb      	adds	r3, r7, r3
20003176:	2200      	movs	r2, #0
20003178:	701a      	strb	r2, [r3, #0]
  }
  /* Return the RNG_IT status */
  return bitstatus;
2000317a:	230f      	movs	r3, #15
2000317c:	18fb      	adds	r3, r7, r3
2000317e:	781b      	ldrb	r3, [r3, #0]
}
20003180:	0018      	movs	r0, r3
20003182:	46bd      	mov	sp, r7
20003184:	b004      	add	sp, #16
20003186:	bd80      	pop	{r7, pc}
20003188:	50060800 	andpl	r0, r6, r0, lsl #16

2000318c <RNG_ClearITPendingBit>:
  *            @arg RNG_IT_CEI: Clock Error Interrupt.
  *            @arg RNG_IT_SEI: Seed Error Interrupt.
  * @retval None
  */
void RNG_ClearITPendingBit(uint8_t RNG_IT)
{
2000318c:	b580      	push	{r7, lr}
2000318e:	b082      	sub	sp, #8
20003190:	af00      	add	r7, sp, #0
20003192:	0002      	movs	r2, r0
20003194:	1dfb      	adds	r3, r7, #7
20003196:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RNG_IT(RNG_IT));

  /* Clear the selected RNG interrupt pending bit */
  RNG->SR = (uint8_t)~RNG_IT;
20003198:	1dfb      	adds	r3, r7, #7
2000319a:	781b      	ldrb	r3, [r3, #0]
2000319c:	43db      	mvns	r3, r3
2000319e:	b2da      	uxtb	r2, r3
200031a0:	4b02      	ldr	r3, [pc, #8]	; (200031ac <RNG_ClearITPendingBit+0x20>)
200031a2:	605a      	str	r2, [r3, #4]
}
200031a4:	46c0      	nop			; (mov r8, r8)
200031a6:	46bd      	mov	sp, r7
200031a8:	b002      	add	sp, #8
200031aa:	bd80      	pop	{r7, pc}
200031ac:	50060800 	andpl	r0, r6, r0, lsl #16

200031b0 <encode_door_config>:
#include "stm32f4xx.h"
#include "stm32f4xx_rcc.h"
#include "stm32f4xx_gpio.h"


uint8_t encode_door_config(CanTxMsg *msg, uint8_t to_central, uint8_t door_id_0, uint8_t door_id_1, uint16_t time_0, uint16_t time_1, uint8_t locked){
200031b0:	b590      	push	{r4, r7, lr}
200031b2:	b085      	sub	sp, #20
200031b4:	af00      	add	r7, sp, #0
200031b6:	6078      	str	r0, [r7, #4]
200031b8:	000c      	movs	r4, r1
200031ba:	0010      	movs	r0, r2
200031bc:	0019      	movs	r1, r3
200031be:	1cfb      	adds	r3, r7, #3
200031c0:	1c22      	adds	r2, r4, #0
200031c2:	701a      	strb	r2, [r3, #0]
200031c4:	1cbb      	adds	r3, r7, #2
200031c6:	1c02      	adds	r2, r0, #0
200031c8:	701a      	strb	r2, [r3, #0]
200031ca:	1c7b      	adds	r3, r7, #1
200031cc:	1c0a      	adds	r2, r1, #0
200031ce:	701a      	strb	r2, [r3, #0]
    if(door_id_0 > door_id_1 || door_id_1 > 31){
200031d0:	1cba      	adds	r2, r7, #2
200031d2:	1c7b      	adds	r3, r7, #1
200031d4:	7812      	ldrb	r2, [r2, #0]
200031d6:	781b      	ldrb	r3, [r3, #0]
200031d8:	429a      	cmp	r2, r3
200031da:	d803      	bhi.n	200031e4 <encode_door_config+0x34>
200031dc:	1c7b      	adds	r3, r7, #1
200031de:	781b      	ldrb	r3, [r3, #0]
200031e0:	2b1f      	cmp	r3, #31
200031e2:	d901      	bls.n	200031e8 <encode_door_config+0x38>
        return 0;
200031e4:	2300      	movs	r3, #0
200031e6:	e042      	b.n	2000326e <encode_door_config+0xbe>
    }
    
    uint8_t *data_pointer =  &(msg->Data);
200031e8:	687b      	ldr	r3, [r7, #4]
200031ea:	330b      	adds	r3, #11
200031ec:	60fb      	str	r3, [r7, #12]
    
    
    Header header = empty_header;
200031ee:	2300      	movs	r3, #0
200031f0:	60bb      	str	r3, [r7, #8]
    header.msgType = 2;
200031f2:	200b      	movs	r0, #11
200031f4:	183b      	adds	r3, r7, r0
200031f6:	781a      	ldrb	r2, [r3, #0]
200031f8:	211c      	movs	r1, #28
200031fa:	438a      	bics	r2, r1
200031fc:	1c11      	adds	r1, r2, #0
200031fe:	2208      	movs	r2, #8
20003200:	430a      	orrs	r2, r1
20003202:	701a      	strb	r2, [r3, #0]
    header.toCentral = to_central;
20003204:	1cfb      	adds	r3, r7, #3
20003206:	781b      	ldrb	r3, [r3, #0]
20003208:	2201      	movs	r2, #1
2000320a:	4013      	ands	r3, r2
2000320c:	b2da      	uxtb	r2, r3
2000320e:	183b      	adds	r3, r7, r0
20003210:	2101      	movs	r1, #1
20003212:	400a      	ands	r2, r1
20003214:	1890      	adds	r0, r2, r2
20003216:	781a      	ldrb	r2, [r3, #0]
20003218:	2102      	movs	r1, #2
2000321a:	438a      	bics	r2, r1
2000321c:	1c11      	adds	r1, r2, #0
2000321e:	1c02      	adds	r2, r0, #0
20003220:	430a      	orrs	r2, r1
20003222:	701a      	strb	r2, [r3, #0]
    HEADERtoUINT32(header, msg->ExtId);
20003224:	2308      	movs	r3, #8
20003226:	18fb      	adds	r3, r7, r3
20003228:	681a      	ldr	r2, [r3, #0]
2000322a:	687b      	ldr	r3, [r7, #4]
2000322c:	605a      	str	r2, [r3, #4]
    
    msg->DLC = 7;
2000322e:	687b      	ldr	r3, [r7, #4]
20003230:	2207      	movs	r2, #7
20003232:	729a      	strb	r2, [r3, #10]
    
    //Dörrintervall skrivs till de 16 första databitarna
    *data_pointer = door_id_0;
20003234:	68fb      	ldr	r3, [r7, #12]
20003236:	1cba      	adds	r2, r7, #2
20003238:	7812      	ldrb	r2, [r2, #0]
2000323a:	701a      	strb	r2, [r3, #0]
    *(data_pointer + 1) = door_id_1;
2000323c:	68fb      	ldr	r3, [r7, #12]
2000323e:	3301      	adds	r3, #1
20003240:	1c7a      	adds	r2, r7, #1
20003242:	7812      	ldrb	r2, [r2, #0]
20003244:	701a      	strb	r2, [r3, #0]
    
    
    //De två tidsvärdena skrivs till bit 16-47
    *(data_pointer + 2) = time_0;
20003246:	68fb      	ldr	r3, [r7, #12]
20003248:	3302      	adds	r3, #2
2000324a:	2120      	movs	r1, #32
2000324c:	187a      	adds	r2, r7, r1
2000324e:	8812      	ldrh	r2, [r2, #0]
20003250:	b2d2      	uxtb	r2, r2
20003252:	701a      	strb	r2, [r3, #0]
    *(data_pointer + 4) = time_0;
20003254:	68fb      	ldr	r3, [r7, #12]
20003256:	3304      	adds	r3, #4
20003258:	187a      	adds	r2, r7, r1
2000325a:	8812      	ldrh	r2, [r2, #0]
2000325c:	b2d2      	uxtb	r2, r2
2000325e:	701a      	strb	r2, [r3, #0]
    
    //Låsflagga skrivs till bit 48-55
    *(data_pointer + 6) = locked;
20003260:	68fb      	ldr	r3, [r7, #12]
20003262:	3306      	adds	r3, #6
20003264:	2228      	movs	r2, #40	; 0x28
20003266:	18ba      	adds	r2, r7, r2
20003268:	7812      	ldrb	r2, [r2, #0]
2000326a:	701a      	strb	r2, [r3, #0]
    
    return 1;
2000326c:	2301      	movs	r3, #1
}
2000326e:	0018      	movs	r0, r3
20003270:	46bd      	mov	sp, r7
20003272:	b005      	add	sp, #20
20003274:	bd90      	pop	{r4, r7, pc}

20003276 <encode_request_id>:
 * uint32_t temp_id: temporärt, förslagsvis slumpgenererat id
 * uint8_t device_type: 0 för dörrenhet, 1 för rörelseenhet
 * uint8_t value_0: antal dörrar eller avståndssensorer
 * uint8_t value_1: antal vibrationssensorer
 */
uint8_t encode_request_id(CanTxMsg *msg, uint32_t temp_id, uint8_t device_type, uint8_t value_0, uint8_t value_1){
20003276:	b580      	push	{r7, lr}
20003278:	b086      	sub	sp, #24
2000327a:	af00      	add	r7, sp, #0
2000327c:	60f8      	str	r0, [r7, #12]
2000327e:	60b9      	str	r1, [r7, #8]
20003280:	0019      	movs	r1, r3
20003282:	1dfb      	adds	r3, r7, #7
20003284:	701a      	strb	r2, [r3, #0]
20003286:	1dbb      	adds	r3, r7, #6
20003288:	1c0a      	adds	r2, r1, #0
2000328a:	701a      	strb	r2, [r3, #0]
    uint8_t *data_pointer =  &(msg->Data);
2000328c:	68fb      	ldr	r3, [r7, #12]
2000328e:	330b      	adds	r3, #11
20003290:	617b      	str	r3, [r7, #20]
    
    
    Header header = empty_header;
20003292:	2300      	movs	r3, #0
20003294:	613b      	str	r3, [r7, #16]
    header.msgType = 4;
20003296:	2013      	movs	r0, #19
20003298:	183b      	adds	r3, r7, r0
2000329a:	781a      	ldrb	r2, [r3, #0]
2000329c:	211c      	movs	r1, #28
2000329e:	438a      	bics	r2, r1
200032a0:	1c11      	adds	r1, r2, #0
200032a2:	2210      	movs	r2, #16
200032a4:	430a      	orrs	r2, r1
200032a6:	701a      	strb	r2, [r3, #0]
    header.toCentral = 1;
200032a8:	183b      	adds	r3, r7, r0
200032aa:	781a      	ldrb	r2, [r3, #0]
200032ac:	2102      	movs	r1, #2
200032ae:	430a      	orrs	r2, r1
200032b0:	701a      	strb	r2, [r3, #0]
    HEADERtoUINT32(header, msg->ExtId);
200032b2:	2310      	movs	r3, #16
200032b4:	18fb      	adds	r3, r7, r3
200032b6:	681a      	ldr	r2, [r3, #0]
200032b8:	68fb      	ldr	r3, [r7, #12]
200032ba:	605a      	str	r2, [r3, #4]
    
    
    
    msg->DLC = 7;
200032bc:	68fb      	ldr	r3, [r7, #12]
200032be:	2207      	movs	r2, #7
200032c0:	729a      	strb	r2, [r3, #10]
    
    msg->IDE = CAN_Id_Extended;
200032c2:	68fb      	ldr	r3, [r7, #12]
200032c4:	2204      	movs	r2, #4
200032c6:	721a      	strb	r2, [r3, #8]
    msg->RTR = CAN_RTR_Data;
200032c8:	68fb      	ldr	r3, [r7, #12]
200032ca:	2200      	movs	r2, #0
200032cc:	725a      	strb	r2, [r3, #9]
    
    //Id skrivs in i bytearrayen för data
    *data_pointer = temp_id;
200032ce:	68bb      	ldr	r3, [r7, #8]
200032d0:	b2da      	uxtb	r2, r3
200032d2:	697b      	ldr	r3, [r7, #20]
200032d4:	701a      	strb	r2, [r3, #0]
    *(data_pointer + 4) = device_type;
200032d6:	697b      	ldr	r3, [r7, #20]
200032d8:	3304      	adds	r3, #4
200032da:	1dfa      	adds	r2, r7, #7
200032dc:	7812      	ldrb	r2, [r2, #0]
200032de:	701a      	strb	r2, [r3, #0]
    *(data_pointer + 5) = value_0;
200032e0:	697b      	ldr	r3, [r7, #20]
200032e2:	3305      	adds	r3, #5
200032e4:	1dba      	adds	r2, r7, #6
200032e6:	7812      	ldrb	r2, [r2, #0]
200032e8:	701a      	strb	r2, [r3, #0]
    *(data_pointer + 6) = value_1;
200032ea:	697b      	ldr	r3, [r7, #20]
200032ec:	3306      	adds	r3, #6
200032ee:	2220      	movs	r2, #32
200032f0:	18ba      	adds	r2, r7, r2
200032f2:	7812      	ldrb	r2, [r2, #0]
200032f4:	701a      	strb	r2, [r3, #0]
    
    return 1;
200032f6:	2301      	movs	r3, #1
}
200032f8:	0018      	movs	r0, r3
200032fa:	46bd      	mov	sp, r7
200032fc:	b006      	add	sp, #24
200032fe:	bd80      	pop	{r7, pc}

20003300 <encode_assign_id>:

uint8_t encode_assign_id(CanTxMsg *msg, uint8_t id){
20003300:	b580      	push	{r7, lr}
20003302:	b084      	sub	sp, #16
20003304:	af00      	add	r7, sp, #0
20003306:	6078      	str	r0, [r7, #4]
20003308:	000a      	movs	r2, r1
2000330a:	1cfb      	adds	r3, r7, #3
2000330c:	701a      	strb	r2, [r3, #0]
    uint8_t *data_pointer =  &(msg->Data);
2000330e:	687b      	ldr	r3, [r7, #4]
20003310:	330b      	adds	r3, #11
20003312:	60fb      	str	r3, [r7, #12]
    
    
    Header header = empty_header;
20003314:	2300      	movs	r3, #0
20003316:	60bb      	str	r3, [r7, #8]
    header.msgType = 3;
20003318:	200b      	movs	r0, #11
2000331a:	183b      	adds	r3, r7, r0
2000331c:	781a      	ldrb	r2, [r3, #0]
2000331e:	211c      	movs	r1, #28
20003320:	438a      	bics	r2, r1
20003322:	1c11      	adds	r1, r2, #0
20003324:	220c      	movs	r2, #12
20003326:	430a      	orrs	r2, r1
20003328:	701a      	strb	r2, [r3, #0]
    header.toCentral = 0;
2000332a:	183b      	adds	r3, r7, r0
2000332c:	781a      	ldrb	r2, [r3, #0]
2000332e:	2102      	movs	r1, #2
20003330:	438a      	bics	r2, r1
20003332:	701a      	strb	r2, [r3, #0]
    HEADERtoUINT32(header, msg->ExtId);
20003334:	2308      	movs	r3, #8
20003336:	18fb      	adds	r3, r7, r3
20003338:	681a      	ldr	r2, [r3, #0]
2000333a:	687b      	ldr	r3, [r7, #4]
2000333c:	605a      	str	r2, [r3, #4]
    
    msg->DLC = 1;
2000333e:	687b      	ldr	r3, [r7, #4]
20003340:	2201      	movs	r2, #1
20003342:	729a      	strb	r2, [r3, #10]
    
    msg->IDE = CAN_Id_Extended; //Alternativen är CAN_Id_Standard eller FCAN_Id_Extended
20003344:	687b      	ldr	r3, [r7, #4]
20003346:	2204      	movs	r2, #4
20003348:	721a      	strb	r2, [r3, #8]
    msg->RTR = CAN_RTR_Data;
2000334a:	687b      	ldr	r3, [r7, #4]
2000334c:	2200      	movs	r2, #0
2000334e:	725a      	strb	r2, [r3, #9]
    
    //Id skrivs in i bytearrayen för data
    *data_pointer = id;
20003350:	68fb      	ldr	r3, [r7, #12]
20003352:	1cfa      	adds	r2, r7, #3
20003354:	7812      	ldrb	r2, [r2, #0]
20003356:	701a      	strb	r2, [r3, #0]
}
20003358:	46c0      	nop			; (mov r8, r8)
2000335a:	0018      	movs	r0, r3
2000335c:	46bd      	mov	sp, r7
2000335e:	b004      	add	sp, #16
20003360:	bd80      	pop	{r7, pc}

20003362 <encode_distance_config>:

uint8_t encode_distance_config(CanTxMsg *msg, uint32_t dist){
20003362:	b580      	push	{r7, lr}
20003364:	b084      	sub	sp, #16
20003366:	af00      	add	r7, sp, #0
20003368:	6078      	str	r0, [r7, #4]
2000336a:	6039      	str	r1, [r7, #0]
    uint8_t *data_pointer =  &(msg->Data[0]);
2000336c:	687b      	ldr	r3, [r7, #4]
2000336e:	330b      	adds	r3, #11
20003370:	60fb      	str	r3, [r7, #12]
    
    msg->DLC = 4;
20003372:	687b      	ldr	r3, [r7, #4]
20003374:	2204      	movs	r2, #4
20003376:	729a      	strb	r2, [r3, #10]
    
    //Avstånd skrivs in i bytearrayen för data
    *data_pointer = dist;
20003378:	683b      	ldr	r3, [r7, #0]
2000337a:	b2da      	uxtb	r2, r3
2000337c:	68fb      	ldr	r3, [r7, #12]
2000337e:	701a      	strb	r2, [r3, #0]
20003380:	46c0      	nop			; (mov r8, r8)
20003382:	0018      	movs	r0, r3
20003384:	46bd      	mov	sp, r7
20003386:	b004      	add	sp, #16
20003388:	bd80      	pop	{r7, pc}

2000338a <bufferInit>:
#include "buffer.h"

//Nollställer bufferten
void bufferInit(FIFO *buffer) {
2000338a:	b580      	push	{r7, lr}
2000338c:	b082      	sub	sp, #8
2000338e:	af00      	add	r7, sp, #0
20003390:	6078      	str	r0, [r7, #4]
    buffer->count = 0;
20003392:	687b      	ldr	r3, [r7, #4]
20003394:	2264      	movs	r2, #100	; 0x64
20003396:	2100      	movs	r1, #0
20003398:	5499      	strb	r1, [r3, r2]
    buffer->in = 0;
2000339a:	687b      	ldr	r3, [r7, #4]
2000339c:	2265      	movs	r2, #101	; 0x65
2000339e:	2100      	movs	r1, #0
200033a0:	5499      	strb	r1, [r3, r2]
    buffer->out = 0;
200033a2:	687b      	ldr	r3, [r7, #4]
200033a4:	2266      	movs	r2, #102	; 0x66
200033a6:	2100      	movs	r1, #0
200033a8:	5499      	strb	r1, [r3, r2]
}
200033aa:	46c0      	nop			; (mov r8, r8)
200033ac:	46bd      	mov	sp, r7
200033ae:	b002      	add	sp, #8
200033b0:	bd80      	pop	{r7, pc}

200033b2 <bufferPut>:

//Lägger till ett elem i buffern.
//Returnerar 1 om det lyckades, 0 annars.
uint8_t bufferPut ( FIFO *buffer, uint8_t elem) {
200033b2:	b580      	push	{r7, lr}
200033b4:	b082      	sub	sp, #8
200033b6:	af00      	add	r7, sp, #0
200033b8:	6078      	str	r0, [r7, #4]
200033ba:	000a      	movs	r2, r1
200033bc:	1cfb      	adds	r3, r7, #3
200033be:	701a      	strb	r2, [r3, #0]
    //Kollar om bufferten är full.
    if (buffer->count == BUFFERSIZE){
200033c0:	687b      	ldr	r3, [r7, #4]
200033c2:	2264      	movs	r2, #100	; 0x64
200033c4:	5c9b      	ldrb	r3, [r3, r2]
200033c6:	2b64      	cmp	r3, #100	; 0x64
200033c8:	d101      	bne.n	200033ce <bufferPut+0x1c>
        return 0;
200033ca:	2300      	movs	r3, #0
200033cc:	e01e      	b.n	2000340c <bufferPut+0x5a>
    }

    //Lägger elem i bufferten
    buffer->buff[buffer->in++] = elem;
200033ce:	687b      	ldr	r3, [r7, #4]
200033d0:	2265      	movs	r2, #101	; 0x65
200033d2:	5c9b      	ldrb	r3, [r3, r2]
200033d4:	1c5a      	adds	r2, r3, #1
200033d6:	b2d0      	uxtb	r0, r2
200033d8:	687a      	ldr	r2, [r7, #4]
200033da:	2165      	movs	r1, #101	; 0x65
200033dc:	5450      	strb	r0, [r2, r1]
200033de:	0019      	movs	r1, r3
200033e0:	687b      	ldr	r3, [r7, #4]
200033e2:	1cfa      	adds	r2, r7, #3
200033e4:	7812      	ldrb	r2, [r2, #0]
200033e6:	545a      	strb	r2, [r3, r1]
    buffer->count++;
200033e8:	687b      	ldr	r3, [r7, #4]
200033ea:	2264      	movs	r2, #100	; 0x64
200033ec:	5c9b      	ldrb	r3, [r3, r2]
200033ee:	3301      	adds	r3, #1
200033f0:	b2d9      	uxtb	r1, r3
200033f2:	687b      	ldr	r3, [r7, #4]
200033f4:	2264      	movs	r2, #100	; 0x64
200033f6:	5499      	strb	r1, [r3, r2]

    //Justerar pekaren om vi nått slutet
    if (buffer->in == BUFFERSIZE)
200033f8:	687b      	ldr	r3, [r7, #4]
200033fa:	2265      	movs	r2, #101	; 0x65
200033fc:	5c9b      	ldrb	r3, [r3, r2]
200033fe:	2b64      	cmp	r3, #100	; 0x64
20003400:	d103      	bne.n	2000340a <bufferPut+0x58>
        buffer->in = 0;
20003402:	687b      	ldr	r3, [r7, #4]
20003404:	2265      	movs	r2, #101	; 0x65
20003406:	2100      	movs	r1, #0
20003408:	5499      	strb	r1, [r3, r2]

    return 1;
2000340a:	2301      	movs	r3, #1
}
2000340c:	0018      	movs	r0, r3
2000340e:	46bd      	mov	sp, r7
20003410:	b002      	add	sp, #8
20003412:	bd80      	pop	{r7, pc}

20003414 <bufferOverrideLast>:

//Skriver över föregående elem i buffern.
//Ändrar inga indexeringsvariabler
void bufferOverrideLast ( FIFO *buffer, uint8_t elem) {
20003414:	b580      	push	{r7, lr}
20003416:	b084      	sub	sp, #16
20003418:	af00      	add	r7, sp, #0
2000341a:	6078      	str	r0, [r7, #4]
2000341c:	000a      	movs	r2, r1
2000341e:	1cfb      	adds	r3, r7, #3
20003420:	701a      	strb	r2, [r3, #0]
    //Index för föregående element i buffern
    uint8_t prevIndex;

    //Om index för nästa element är 0 så blir föregående BUFFERSIZE - 1
    //annars buffer->in - 1
    prevIndex =  (buffer->in == 0) ? BUFFERSIZE - 1 : buffer->in - 1;
20003422:	687b      	ldr	r3, [r7, #4]
20003424:	2265      	movs	r2, #101	; 0x65
20003426:	5c9b      	ldrb	r3, [r3, r2]
20003428:	2b00      	cmp	r3, #0
2000342a:	d005      	beq.n	20003438 <bufferOverrideLast+0x24>
2000342c:	687b      	ldr	r3, [r7, #4]
2000342e:	2265      	movs	r2, #101	; 0x65
20003430:	5c9b      	ldrb	r3, [r3, r2]
20003432:	3b01      	subs	r3, #1
20003434:	b2da      	uxtb	r2, r3
20003436:	e000      	b.n	2000343a <bufferOverrideLast+0x26>
20003438:	2263      	movs	r2, #99	; 0x63
2000343a:	210f      	movs	r1, #15
2000343c:	187b      	adds	r3, r7, r1
2000343e:	701a      	strb	r2, [r3, #0]

    //Skriver över elem i bufferten
    buffer->buff[prevIndex] = elem;
20003440:	187b      	adds	r3, r7, r1
20003442:	781b      	ldrb	r3, [r3, #0]
20003444:	687a      	ldr	r2, [r7, #4]
20003446:	1cf9      	adds	r1, r7, #3
20003448:	7809      	ldrb	r1, [r1, #0]
2000344a:	54d1      	strb	r1, [r2, r3]
}
2000344c:	46c0      	nop			; (mov r8, r8)
2000344e:	46bd      	mov	sp, r7
20003450:	b004      	add	sp, #16
20003452:	bd80      	pop	{r7, pc}

20003454 <bufferGet>:

//Hämtar ett element från buffern till dest.
//Returnerar 1 om det lyckades, 0 annars.
uint8_t bufferGet ( FIFO *buffer, uint8_t *dest) {
20003454:	b580      	push	{r7, lr}
20003456:	b082      	sub	sp, #8
20003458:	af00      	add	r7, sp, #0
2000345a:	6078      	str	r0, [r7, #4]
2000345c:	6039      	str	r1, [r7, #0]
    //Kollar om bufferten är tom
    if (!buffer->count){
2000345e:	687b      	ldr	r3, [r7, #4]
20003460:	2264      	movs	r2, #100	; 0x64
20003462:	5c9b      	ldrb	r3, [r3, r2]
20003464:	2b00      	cmp	r3, #0
20003466:	d101      	bne.n	2000346c <bufferGet+0x18>
        return 0;
20003468:	2300      	movs	r3, #0
2000346a:	e01e      	b.n	200034aa <bufferGet+0x56>
    }

    //Hämtar element ur buffern till dest
    *dest = buffer->buff[buffer->out++];
2000346c:	687b      	ldr	r3, [r7, #4]
2000346e:	2266      	movs	r2, #102	; 0x66
20003470:	5c9b      	ldrb	r3, [r3, r2]
20003472:	1c5a      	adds	r2, r3, #1
20003474:	b2d0      	uxtb	r0, r2
20003476:	687a      	ldr	r2, [r7, #4]
20003478:	2166      	movs	r1, #102	; 0x66
2000347a:	5450      	strb	r0, [r2, r1]
2000347c:	001a      	movs	r2, r3
2000347e:	687b      	ldr	r3, [r7, #4]
20003480:	5c9a      	ldrb	r2, [r3, r2]
20003482:	683b      	ldr	r3, [r7, #0]
20003484:	701a      	strb	r2, [r3, #0]
    buffer->count--;
20003486:	687b      	ldr	r3, [r7, #4]
20003488:	2264      	movs	r2, #100	; 0x64
2000348a:	5c9b      	ldrb	r3, [r3, r2]
2000348c:	3b01      	subs	r3, #1
2000348e:	b2d9      	uxtb	r1, r3
20003490:	687b      	ldr	r3, [r7, #4]
20003492:	2264      	movs	r2, #100	; 0x64
20003494:	5499      	strb	r1, [r3, r2]

    //Justerar pekaren om vi nått slutet
    if (buffer->out == BUFFERSIZE)
20003496:	687b      	ldr	r3, [r7, #4]
20003498:	2266      	movs	r2, #102	; 0x66
2000349a:	5c9b      	ldrb	r3, [r3, r2]
2000349c:	2b64      	cmp	r3, #100	; 0x64
2000349e:	d103      	bne.n	200034a8 <bufferGet+0x54>
        buffer->out = 0;
200034a0:	687b      	ldr	r3, [r7, #4]
200034a2:	2266      	movs	r2, #102	; 0x66
200034a4:	2100      	movs	r1, #0
200034a6:	5499      	strb	r1, [r3, r2]

    return 1;
200034a8:	2301      	movs	r3, #1
200034aa:	0018      	movs	r0, r3
200034ac:	46bd      	mov	sp, r7
200034ae:	b002      	add	sp, #8
200034b0:	bd80      	pop	{r7, pc}
	...

200034b4 <NVIC_PriorityGroupConfig>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void NVIC_PriorityGroupConfig(uint32_t NVIC_PriorityGroup)
{
200034b4:	b580      	push	{r7, lr}
200034b6:	b082      	sub	sp, #8
200034b8:	af00      	add	r7, sp, #0
200034ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
200034bc:	4b04      	ldr	r3, [pc, #16]	; (200034d0 <NVIC_PriorityGroupConfig+0x1c>)
200034be:	687a      	ldr	r2, [r7, #4]
200034c0:	4904      	ldr	r1, [pc, #16]	; (200034d4 <NVIC_PriorityGroupConfig+0x20>)
200034c2:	430a      	orrs	r2, r1
200034c4:	60da      	str	r2, [r3, #12]
}
200034c6:	46c0      	nop			; (mov r8, r8)
200034c8:	46bd      	mov	sp, r7
200034ca:	b002      	add	sp, #8
200034cc:	bd80      	pop	{r7, pc}
200034ce:	46c0      	nop			; (mov r8, r8)
200034d0:	e000ed00 	and	lr, r0, r0, lsl #26
200034d4:	05fa0000 	ldrbeq	r0, [sl, #0]!

200034d8 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
200034d8:	b5b0      	push	{r4, r5, r7, lr}
200034da:	b084      	sub	sp, #16
200034dc:	af00      	add	r7, sp, #0
200034de:	6078      	str	r0, [r7, #4]
  uint8_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
200034e0:	230f      	movs	r3, #15
200034e2:	18fb      	adds	r3, r7, r3
200034e4:	2200      	movs	r2, #0
200034e6:	701a      	strb	r2, [r3, #0]
200034e8:	230e      	movs	r3, #14
200034ea:	18fb      	adds	r3, r7, r3
200034ec:	2200      	movs	r2, #0
200034ee:	701a      	strb	r2, [r3, #0]
200034f0:	230d      	movs	r3, #13
200034f2:	18fb      	adds	r3, r7, r3
200034f4:	220f      	movs	r2, #15
200034f6:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
200034f8:	687b      	ldr	r3, [r7, #4]
200034fa:	78db      	ldrb	r3, [r3, #3]
200034fc:	2b00      	cmp	r3, #0
200034fe:	d04d      	beq.n	2000359c <NVIC_Init+0xc4>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
20003500:	4b31      	ldr	r3, [pc, #196]	; (200035c8 <NVIC_Init+0xf0>)
20003502:	68db      	ldr	r3, [r3, #12]
20003504:	43db      	mvns	r3, r3
20003506:	0a1b      	lsrs	r3, r3, #8
20003508:	b2da      	uxtb	r2, r3
2000350a:	200f      	movs	r0, #15
2000350c:	183b      	adds	r3, r7, r0
2000350e:	2107      	movs	r1, #7
20003510:	400a      	ands	r2, r1
20003512:	701a      	strb	r2, [r3, #0]
    tmppre = (0x4 - tmppriority);
20003514:	250e      	movs	r5, #14
20003516:	197b      	adds	r3, r7, r5
20003518:	183a      	adds	r2, r7, r0
2000351a:	7812      	ldrb	r2, [r2, #0]
2000351c:	2104      	movs	r1, #4
2000351e:	1a8a      	subs	r2, r1, r2
20003520:	701a      	strb	r2, [r3, #0]
    tmpsub = tmpsub >> tmppriority;
20003522:	240d      	movs	r4, #13
20003524:	193b      	adds	r3, r7, r4
20003526:	781a      	ldrb	r2, [r3, #0]
20003528:	0001      	movs	r1, r0
2000352a:	187b      	adds	r3, r7, r1
2000352c:	781b      	ldrb	r3, [r3, #0]
2000352e:	411a      	asrs	r2, r3
20003530:	193b      	adds	r3, r7, r4
20003532:	701a      	strb	r2, [r3, #0]

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
20003534:	687b      	ldr	r3, [r7, #4]
20003536:	785b      	ldrb	r3, [r3, #1]
20003538:	001a      	movs	r2, r3
2000353a:	197b      	adds	r3, r7, r5
2000353c:	781b      	ldrb	r3, [r3, #0]
2000353e:	409a      	lsls	r2, r3
20003540:	0008      	movs	r0, r1
20003542:	187b      	adds	r3, r7, r1
20003544:	701a      	strb	r2, [r3, #0]
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
20003546:	687b      	ldr	r3, [r7, #4]
20003548:	789b      	ldrb	r3, [r3, #2]
2000354a:	193a      	adds	r2, r7, r4
2000354c:	7812      	ldrb	r2, [r2, #0]
2000354e:	4013      	ands	r3, r2
20003550:	b2d9      	uxtb	r1, r3
20003552:	183b      	adds	r3, r7, r0
20003554:	183a      	adds	r2, r7, r0
20003556:	7812      	ldrb	r2, [r2, #0]
20003558:	430a      	orrs	r2, r1
2000355a:	701a      	strb	r2, [r3, #0]
        
    tmppriority = tmppriority << 0x04;
2000355c:	183b      	adds	r3, r7, r0
2000355e:	183a      	adds	r2, r7, r0
20003560:	7812      	ldrb	r2, [r2, #0]
20003562:	0112      	lsls	r2, r2, #4
20003564:	701a      	strb	r2, [r3, #0]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
20003566:	4a19      	ldr	r2, [pc, #100]	; (200035cc <NVIC_Init+0xf4>)
20003568:	687b      	ldr	r3, [r7, #4]
2000356a:	781b      	ldrb	r3, [r3, #0]
2000356c:	0019      	movs	r1, r3
2000356e:	23c0      	movs	r3, #192	; 0xc0
20003570:	009b      	lsls	r3, r3, #2
20003572:	1852      	adds	r2, r2, r1
20003574:	18d3      	adds	r3, r2, r3
20003576:	183a      	adds	r2, r7, r0
20003578:	7812      	ldrb	r2, [r2, #0]
2000357a:	701a      	strb	r2, [r3, #0]
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
2000357c:	687b      	ldr	r3, [r7, #4]
2000357e:	781b      	ldrb	r3, [r3, #0]
20003580:	001a      	movs	r2, r3
20003582:	231f      	movs	r3, #31
20003584:	4013      	ands	r3, r2
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
20003586:	4911      	ldr	r1, [pc, #68]	; (200035cc <NVIC_Init+0xf4>)
20003588:	687a      	ldr	r2, [r7, #4]
2000358a:	7812      	ldrb	r2, [r2, #0]
2000358c:	0952      	lsrs	r2, r2, #5
2000358e:	b2d2      	uxtb	r2, r2
20003590:	0010      	movs	r0, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
20003592:	2201      	movs	r2, #1
20003594:	409a      	lsls	r2, r3
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
20003596:	0083      	lsls	r3, r0, #2
20003598:	505a      	str	r2, [r3, r1]
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
2000359a:	e010      	b.n	200035be <NVIC_Init+0xe6>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
2000359c:	687b      	ldr	r3, [r7, #4]
2000359e:	781b      	ldrb	r3, [r3, #0]
200035a0:	001a      	movs	r2, r3
200035a2:	231f      	movs	r3, #31
200035a4:	4013      	ands	r3, r2
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
200035a6:	4909      	ldr	r1, [pc, #36]	; (200035cc <NVIC_Init+0xf4>)
200035a8:	687a      	ldr	r2, [r7, #4]
200035aa:	7812      	ldrb	r2, [r2, #0]
200035ac:	0952      	lsrs	r2, r2, #5
200035ae:	b2d2      	uxtb	r2, r2
200035b0:	0010      	movs	r0, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
200035b2:	2201      	movs	r2, #1
200035b4:	409a      	lsls	r2, r3
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
200035b6:	0003      	movs	r3, r0
200035b8:	3320      	adds	r3, #32
200035ba:	009b      	lsls	r3, r3, #2
200035bc:	505a      	str	r2, [r3, r1]
}
200035be:	46c0      	nop			; (mov r8, r8)
200035c0:	46bd      	mov	sp, r7
200035c2:	b004      	add	sp, #16
200035c4:	bdb0      	pop	{r4, r5, r7, pc}
200035c6:	46c0      	nop			; (mov r8, r8)
200035c8:	e000ed00 	and	lr, r0, r0, lsl #26
200035cc:	e000e100 	and	lr, r0, r0, lsl #2

200035d0 <NVIC_SetVectorTable>:
  *     @arg NVIC_VectTab_FLASH: Vector Table in internal FLASH.
  * @param  Offset: Vector Table base offset field. This value must be a multiple of 0x200.
  * @retval None
  */
void NVIC_SetVectorTable(uint32_t NVIC_VectTab, uint32_t Offset)
{ 
200035d0:	b580      	push	{r7, lr}
200035d2:	b082      	sub	sp, #8
200035d4:	af00      	add	r7, sp, #0
200035d6:	6078      	str	r0, [r7, #4]
200035d8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_VECTTAB(NVIC_VectTab));
  assert_param(IS_NVIC_OFFSET(Offset));  
   
  SCB->VTOR = NVIC_VectTab | (Offset & (uint32_t)0x1FFFFF80);
200035da:	683b      	ldr	r3, [r7, #0]
200035dc:	4a05      	ldr	r2, [pc, #20]	; (200035f4 <NVIC_SetVectorTable+0x24>)
200035de:	4013      	ands	r3, r2
200035e0:	0019      	movs	r1, r3
200035e2:	4b05      	ldr	r3, [pc, #20]	; (200035f8 <NVIC_SetVectorTable+0x28>)
200035e4:	687a      	ldr	r2, [r7, #4]
200035e6:	430a      	orrs	r2, r1
200035e8:	609a      	str	r2, [r3, #8]
}
200035ea:	46c0      	nop			; (mov r8, r8)
200035ec:	46bd      	mov	sp, r7
200035ee:	b002      	add	sp, #8
200035f0:	bd80      	pop	{r7, pc}
200035f2:	46c0      	nop			; (mov r8, r8)
200035f4:	1fffff80 	svcne	0x00ffff80
200035f8:	e000ed00 	and	lr, r0, r0, lsl #26

200035fc <NVIC_SystemLPConfig>:
  *     @arg NVIC_LP_SLEEPONEXIT: Low Power Sleep on Exit.
  * @param  NewState: new state of LP condition. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void NVIC_SystemLPConfig(uint8_t LowPowerMode, FunctionalState NewState)
{
200035fc:	b580      	push	{r7, lr}
200035fe:	b082      	sub	sp, #8
20003600:	af00      	add	r7, sp, #0
20003602:	0002      	movs	r2, r0
20003604:	1dfb      	adds	r3, r7, #7
20003606:	701a      	strb	r2, [r3, #0]
20003608:	1dbb      	adds	r3, r7, #6
2000360a:	1c0a      	adds	r2, r1, #0
2000360c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_LP(LowPowerMode));
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  if (NewState != DISABLE)
2000360e:	1dbb      	adds	r3, r7, #6
20003610:	781b      	ldrb	r3, [r3, #0]
20003612:	2b00      	cmp	r3, #0
20003614:	d007      	beq.n	20003626 <NVIC_SystemLPConfig+0x2a>
  {
    SCB->SCR |= LowPowerMode;
20003616:	4b0a      	ldr	r3, [pc, #40]	; (20003640 <NVIC_SystemLPConfig+0x44>)
20003618:	6919      	ldr	r1, [r3, #16]
2000361a:	1dfb      	adds	r3, r7, #7
2000361c:	781a      	ldrb	r2, [r3, #0]
2000361e:	4b08      	ldr	r3, [pc, #32]	; (20003640 <NVIC_SystemLPConfig+0x44>)
20003620:	430a      	orrs	r2, r1
20003622:	611a      	str	r2, [r3, #16]
  }
  else
  {
    SCB->SCR &= (uint32_t)(~(uint32_t)LowPowerMode);
  }
}
20003624:	e007      	b.n	20003636 <NVIC_SystemLPConfig+0x3a>
    SCB->SCR &= (uint32_t)(~(uint32_t)LowPowerMode);
20003626:	4b06      	ldr	r3, [pc, #24]	; (20003640 <NVIC_SystemLPConfig+0x44>)
20003628:	691a      	ldr	r2, [r3, #16]
2000362a:	1dfb      	adds	r3, r7, #7
2000362c:	781b      	ldrb	r3, [r3, #0]
2000362e:	43d9      	mvns	r1, r3
20003630:	4b03      	ldr	r3, [pc, #12]	; (20003640 <NVIC_SystemLPConfig+0x44>)
20003632:	400a      	ands	r2, r1
20003634:	611a      	str	r2, [r3, #16]
}
20003636:	46c0      	nop			; (mov r8, r8)
20003638:	46bd      	mov	sp, r7
2000363a:	b002      	add	sp, #8
2000363c:	bd80      	pop	{r7, pc}
2000363e:	46c0      	nop			; (mov r8, r8)
20003640:	e000ed00 	and	lr, r0, r0, lsl #26

20003644 <SysTick_CLKSourceConfig>:
  *     @arg SysTick_CLKSource_HCLK_Div8: AHB clock divided by 8 selected as SysTick clock source.
  *     @arg SysTick_CLKSource_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void SysTick_CLKSourceConfig(uint32_t SysTick_CLKSource)
{
20003644:	b580      	push	{r7, lr}
20003646:	b082      	sub	sp, #8
20003648:	af00      	add	r7, sp, #0
2000364a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(SysTick_CLKSource));
  if (SysTick_CLKSource == SysTick_CLKSource_HCLK)
2000364c:	687b      	ldr	r3, [r7, #4]
2000364e:	2b04      	cmp	r3, #4
20003650:	d106      	bne.n	20003660 <SysTick_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SysTick_CLKSource_HCLK;
20003652:	4b08      	ldr	r3, [pc, #32]	; (20003674 <SysTick_CLKSourceConfig+0x30>)
20003654:	681a      	ldr	r2, [r3, #0]
20003656:	4b07      	ldr	r3, [pc, #28]	; (20003674 <SysTick_CLKSourceConfig+0x30>)
20003658:	2104      	movs	r1, #4
2000365a:	430a      	orrs	r2, r1
2000365c:	601a      	str	r2, [r3, #0]
  }
  else
  {
    SysTick->CTRL &= SysTick_CLKSource_HCLK_Div8;
  }
}
2000365e:	e005      	b.n	2000366c <SysTick_CLKSourceConfig+0x28>
    SysTick->CTRL &= SysTick_CLKSource_HCLK_Div8;
20003660:	4b04      	ldr	r3, [pc, #16]	; (20003674 <SysTick_CLKSourceConfig+0x30>)
20003662:	681a      	ldr	r2, [r3, #0]
20003664:	4b03      	ldr	r3, [pc, #12]	; (20003674 <SysTick_CLKSourceConfig+0x30>)
20003666:	2104      	movs	r1, #4
20003668:	438a      	bics	r2, r1
2000366a:	601a      	str	r2, [r3, #0]
}
2000366c:	46c0      	nop			; (mov r8, r8)
2000366e:	46bd      	mov	sp, r7
20003670:	b002      	add	sp, #8
20003672:	bd80      	pop	{r7, pc}
20003674:	e000e010 	and	lr, r0, r0, lsl r0

20003678 <GPIO_DeInit>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F42xxx/43xxx devices.
  *                      x can be (A, B, C, D and H) to select the GPIO peripheral for STM32F401xx devices.  
  * @retval None
  */
void GPIO_DeInit(GPIO_TypeDef* GPIOx)
{
20003678:	b580      	push	{r7, lr}
2000367a:	b082      	sub	sp, #8
2000367c:	af00      	add	r7, sp, #0
2000367e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  if (GPIOx == GPIOA)
20003680:	687b      	ldr	r3, [r7, #4]
20003682:	4a4e      	ldr	r2, [pc, #312]	; (200037bc <GPIO_DeInit+0x144>)
20003684:	4293      	cmp	r3, r2
20003686:	d108      	bne.n	2000369a <GPIO_DeInit+0x22>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, ENABLE);
20003688:	2101      	movs	r1, #1
2000368a:	2001      	movs	r0, #1
2000368c:	f7fe fe60 	bl	20002350 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, DISABLE);
20003690:	2100      	movs	r1, #0
20003692:	2001      	movs	r0, #1
20003694:	f7fe fe5c 	bl	20002350 <RCC_AHB1PeriphResetCmd>
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, ENABLE);
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, DISABLE);
    }
  }
}
20003698:	e08c      	b.n	200037b4 <GPIO_DeInit+0x13c>
  else if (GPIOx == GPIOB)
2000369a:	687b      	ldr	r3, [r7, #4]
2000369c:	4a48      	ldr	r2, [pc, #288]	; (200037c0 <GPIO_DeInit+0x148>)
2000369e:	4293      	cmp	r3, r2
200036a0:	d108      	bne.n	200036b4 <GPIO_DeInit+0x3c>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, ENABLE);
200036a2:	2101      	movs	r1, #1
200036a4:	2002      	movs	r0, #2
200036a6:	f7fe fe53 	bl	20002350 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, DISABLE);
200036aa:	2100      	movs	r1, #0
200036ac:	2002      	movs	r0, #2
200036ae:	f7fe fe4f 	bl	20002350 <RCC_AHB1PeriphResetCmd>
}
200036b2:	e07f      	b.n	200037b4 <GPIO_DeInit+0x13c>
  else if (GPIOx == GPIOC)
200036b4:	687b      	ldr	r3, [r7, #4]
200036b6:	4a43      	ldr	r2, [pc, #268]	; (200037c4 <GPIO_DeInit+0x14c>)
200036b8:	4293      	cmp	r3, r2
200036ba:	d108      	bne.n	200036ce <GPIO_DeInit+0x56>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, ENABLE);
200036bc:	2101      	movs	r1, #1
200036be:	2004      	movs	r0, #4
200036c0:	f7fe fe46 	bl	20002350 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, DISABLE);
200036c4:	2100      	movs	r1, #0
200036c6:	2004      	movs	r0, #4
200036c8:	f7fe fe42 	bl	20002350 <RCC_AHB1PeriphResetCmd>
}
200036cc:	e072      	b.n	200037b4 <GPIO_DeInit+0x13c>
  else if (GPIOx == GPIOD)
200036ce:	687b      	ldr	r3, [r7, #4]
200036d0:	4a3d      	ldr	r2, [pc, #244]	; (200037c8 <GPIO_DeInit+0x150>)
200036d2:	4293      	cmp	r3, r2
200036d4:	d108      	bne.n	200036e8 <GPIO_DeInit+0x70>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, ENABLE);
200036d6:	2101      	movs	r1, #1
200036d8:	2008      	movs	r0, #8
200036da:	f7fe fe39 	bl	20002350 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, DISABLE);
200036de:	2100      	movs	r1, #0
200036e0:	2008      	movs	r0, #8
200036e2:	f7fe fe35 	bl	20002350 <RCC_AHB1PeriphResetCmd>
}
200036e6:	e065      	b.n	200037b4 <GPIO_DeInit+0x13c>
  else if (GPIOx == GPIOE)
200036e8:	687b      	ldr	r3, [r7, #4]
200036ea:	4a38      	ldr	r2, [pc, #224]	; (200037cc <GPIO_DeInit+0x154>)
200036ec:	4293      	cmp	r3, r2
200036ee:	d108      	bne.n	20003702 <GPIO_DeInit+0x8a>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, ENABLE);
200036f0:	2101      	movs	r1, #1
200036f2:	2010      	movs	r0, #16
200036f4:	f7fe fe2c 	bl	20002350 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, DISABLE);
200036f8:	2100      	movs	r1, #0
200036fa:	2010      	movs	r0, #16
200036fc:	f7fe fe28 	bl	20002350 <RCC_AHB1PeriphResetCmd>
}
20003700:	e058      	b.n	200037b4 <GPIO_DeInit+0x13c>
  else if (GPIOx == GPIOF)
20003702:	687b      	ldr	r3, [r7, #4]
20003704:	4a32      	ldr	r2, [pc, #200]	; (200037d0 <GPIO_DeInit+0x158>)
20003706:	4293      	cmp	r3, r2
20003708:	d108      	bne.n	2000371c <GPIO_DeInit+0xa4>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, ENABLE);
2000370a:	2101      	movs	r1, #1
2000370c:	2020      	movs	r0, #32
2000370e:	f7fe fe1f 	bl	20002350 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, DISABLE);
20003712:	2100      	movs	r1, #0
20003714:	2020      	movs	r0, #32
20003716:	f7fe fe1b 	bl	20002350 <RCC_AHB1PeriphResetCmd>
}
2000371a:	e04b      	b.n	200037b4 <GPIO_DeInit+0x13c>
  else if (GPIOx == GPIOG)
2000371c:	687b      	ldr	r3, [r7, #4]
2000371e:	4a2d      	ldr	r2, [pc, #180]	; (200037d4 <GPIO_DeInit+0x15c>)
20003720:	4293      	cmp	r3, r2
20003722:	d108      	bne.n	20003736 <GPIO_DeInit+0xbe>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, ENABLE);
20003724:	2101      	movs	r1, #1
20003726:	2040      	movs	r0, #64	; 0x40
20003728:	f7fe fe12 	bl	20002350 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, DISABLE);
2000372c:	2100      	movs	r1, #0
2000372e:	2040      	movs	r0, #64	; 0x40
20003730:	f7fe fe0e 	bl	20002350 <RCC_AHB1PeriphResetCmd>
}
20003734:	e03e      	b.n	200037b4 <GPIO_DeInit+0x13c>
  else if (GPIOx == GPIOH)
20003736:	687b      	ldr	r3, [r7, #4]
20003738:	4a27      	ldr	r2, [pc, #156]	; (200037d8 <GPIO_DeInit+0x160>)
2000373a:	4293      	cmp	r3, r2
2000373c:	d108      	bne.n	20003750 <GPIO_DeInit+0xd8>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOH, ENABLE);
2000373e:	2101      	movs	r1, #1
20003740:	2080      	movs	r0, #128	; 0x80
20003742:	f7fe fe05 	bl	20002350 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOH, DISABLE);
20003746:	2100      	movs	r1, #0
20003748:	2080      	movs	r0, #128	; 0x80
2000374a:	f7fe fe01 	bl	20002350 <RCC_AHB1PeriphResetCmd>
}
2000374e:	e031      	b.n	200037b4 <GPIO_DeInit+0x13c>
  else if (GPIOx == GPIOI)
20003750:	687b      	ldr	r3, [r7, #4]
20003752:	4a22      	ldr	r2, [pc, #136]	; (200037dc <GPIO_DeInit+0x164>)
20003754:	4293      	cmp	r3, r2
20003756:	d10c      	bne.n	20003772 <GPIO_DeInit+0xfa>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, ENABLE);
20003758:	2380      	movs	r3, #128	; 0x80
2000375a:	005b      	lsls	r3, r3, #1
2000375c:	2101      	movs	r1, #1
2000375e:	0018      	movs	r0, r3
20003760:	f7fe fdf6 	bl	20002350 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, DISABLE);
20003764:	2380      	movs	r3, #128	; 0x80
20003766:	005b      	lsls	r3, r3, #1
20003768:	2100      	movs	r1, #0
2000376a:	0018      	movs	r0, r3
2000376c:	f7fe fdf0 	bl	20002350 <RCC_AHB1PeriphResetCmd>
}
20003770:	e020      	b.n	200037b4 <GPIO_DeInit+0x13c>
  else if (GPIOx == GPIOJ)
20003772:	687b      	ldr	r3, [r7, #4]
20003774:	4a1a      	ldr	r2, [pc, #104]	; (200037e0 <GPIO_DeInit+0x168>)
20003776:	4293      	cmp	r3, r2
20003778:	d10c      	bne.n	20003794 <GPIO_DeInit+0x11c>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOJ, ENABLE);
2000377a:	2380      	movs	r3, #128	; 0x80
2000377c:	009b      	lsls	r3, r3, #2
2000377e:	2101      	movs	r1, #1
20003780:	0018      	movs	r0, r3
20003782:	f7fe fde5 	bl	20002350 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOJ, DISABLE);
20003786:	2380      	movs	r3, #128	; 0x80
20003788:	009b      	lsls	r3, r3, #2
2000378a:	2100      	movs	r1, #0
2000378c:	0018      	movs	r0, r3
2000378e:	f7fe fddf 	bl	20002350 <RCC_AHB1PeriphResetCmd>
}
20003792:	e00f      	b.n	200037b4 <GPIO_DeInit+0x13c>
    if (GPIOx == GPIOK)
20003794:	687b      	ldr	r3, [r7, #4]
20003796:	4a13      	ldr	r2, [pc, #76]	; (200037e4 <GPIO_DeInit+0x16c>)
20003798:	4293      	cmp	r3, r2
2000379a:	d10b      	bne.n	200037b4 <GPIO_DeInit+0x13c>
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, ENABLE);
2000379c:	2380      	movs	r3, #128	; 0x80
2000379e:	00db      	lsls	r3, r3, #3
200037a0:	2101      	movs	r1, #1
200037a2:	0018      	movs	r0, r3
200037a4:	f7fe fdd4 	bl	20002350 <RCC_AHB1PeriphResetCmd>
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, DISABLE);
200037a8:	2380      	movs	r3, #128	; 0x80
200037aa:	00db      	lsls	r3, r3, #3
200037ac:	2100      	movs	r1, #0
200037ae:	0018      	movs	r0, r3
200037b0:	f7fe fdce 	bl	20002350 <RCC_AHB1PeriphResetCmd>
}
200037b4:	46c0      	nop			; (mov r8, r8)
200037b6:	46bd      	mov	sp, r7
200037b8:	b002      	add	sp, #8
200037ba:	bd80      	pop	{r7, pc}
200037bc:	40020000 	andmi	r0, r2, r0
200037c0:	40020400 	andmi	r0, r2, r0, lsl #8
200037c4:	40020800 	andmi	r0, r2, r0, lsl #16
200037c8:	40020c00 	andmi	r0, r2, r0, lsl #24
200037cc:	40021000 	andmi	r1, r2, r0
200037d0:	40021400 	andmi	r1, r2, r0, lsl #8
200037d4:	40021800 	andmi	r1, r2, r0, lsl #16
200037d8:	40021c00 	andmi	r1, r2, r0, lsl #24
200037dc:	40022000 	andmi	r2, r2, r0
200037e0:	40022400 	andmi	r2, r2, r0, lsl #8
200037e4:	40022800 	andmi	r2, r2, r0, lsl #16

200037e8 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
200037e8:	b580      	push	{r7, lr}
200037ea:	b086      	sub	sp, #24
200037ec:	af00      	add	r7, sp, #0
200037ee:	6078      	str	r0, [r7, #4]
200037f0:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
200037f2:	2300      	movs	r3, #0
200037f4:	617b      	str	r3, [r7, #20]
200037f6:	2300      	movs	r3, #0
200037f8:	613b      	str	r3, [r7, #16]
200037fa:	2300      	movs	r3, #0
200037fc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
200037fe:	2300      	movs	r3, #0
20003800:	617b      	str	r3, [r7, #20]
20003802:	e076      	b.n	200038f2 <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
20003804:	2201      	movs	r2, #1
20003806:	697b      	ldr	r3, [r7, #20]
20003808:	409a      	lsls	r2, r3
2000380a:	0013      	movs	r3, r2
2000380c:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
2000380e:	683b      	ldr	r3, [r7, #0]
20003810:	681a      	ldr	r2, [r3, #0]
20003812:	693b      	ldr	r3, [r7, #16]
20003814:	4013      	ands	r3, r2
20003816:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
20003818:	68fa      	ldr	r2, [r7, #12]
2000381a:	693b      	ldr	r3, [r7, #16]
2000381c:	429a      	cmp	r2, r3
2000381e:	d165      	bne.n	200038ec <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
20003820:	687b      	ldr	r3, [r7, #4]
20003822:	681b      	ldr	r3, [r3, #0]
20003824:	697a      	ldr	r2, [r7, #20]
20003826:	0052      	lsls	r2, r2, #1
20003828:	2103      	movs	r1, #3
2000382a:	4091      	lsls	r1, r2
2000382c:	000a      	movs	r2, r1
2000382e:	43d2      	mvns	r2, r2
20003830:	401a      	ands	r2, r3
20003832:	687b      	ldr	r3, [r7, #4]
20003834:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
20003836:	687b      	ldr	r3, [r7, #4]
20003838:	681a      	ldr	r2, [r3, #0]
2000383a:	683b      	ldr	r3, [r7, #0]
2000383c:	791b      	ldrb	r3, [r3, #4]
2000383e:	0019      	movs	r1, r3
20003840:	697b      	ldr	r3, [r7, #20]
20003842:	005b      	lsls	r3, r3, #1
20003844:	4099      	lsls	r1, r3
20003846:	000b      	movs	r3, r1
20003848:	431a      	orrs	r2, r3
2000384a:	687b      	ldr	r3, [r7, #4]
2000384c:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
2000384e:	683b      	ldr	r3, [r7, #0]
20003850:	791b      	ldrb	r3, [r3, #4]
20003852:	2b01      	cmp	r3, #1
20003854:	d003      	beq.n	2000385e <GPIO_Init+0x76>
20003856:	683b      	ldr	r3, [r7, #0]
20003858:	791b      	ldrb	r3, [r3, #4]
2000385a:	2b02      	cmp	r3, #2
2000385c:	d12e      	bne.n	200038bc <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
2000385e:	687b      	ldr	r3, [r7, #4]
20003860:	689b      	ldr	r3, [r3, #8]
20003862:	697a      	ldr	r2, [r7, #20]
20003864:	0052      	lsls	r2, r2, #1
20003866:	2103      	movs	r1, #3
20003868:	4091      	lsls	r1, r2
2000386a:	000a      	movs	r2, r1
2000386c:	43d2      	mvns	r2, r2
2000386e:	401a      	ands	r2, r3
20003870:	687b      	ldr	r3, [r7, #4]
20003872:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
20003874:	687b      	ldr	r3, [r7, #4]
20003876:	689a      	ldr	r2, [r3, #8]
20003878:	683b      	ldr	r3, [r7, #0]
2000387a:	795b      	ldrb	r3, [r3, #5]
2000387c:	0019      	movs	r1, r3
2000387e:	697b      	ldr	r3, [r7, #20]
20003880:	005b      	lsls	r3, r3, #1
20003882:	4099      	lsls	r1, r3
20003884:	000b      	movs	r3, r1
20003886:	431a      	orrs	r2, r3
20003888:	687b      	ldr	r3, [r7, #4]
2000388a:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
2000388c:	687b      	ldr	r3, [r7, #4]
2000388e:	685b      	ldr	r3, [r3, #4]
20003890:	697a      	ldr	r2, [r7, #20]
20003892:	b292      	uxth	r2, r2
20003894:	0011      	movs	r1, r2
20003896:	2201      	movs	r2, #1
20003898:	408a      	lsls	r2, r1
2000389a:	43d2      	mvns	r2, r2
2000389c:	401a      	ands	r2, r3
2000389e:	687b      	ldr	r3, [r7, #4]
200038a0:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
200038a2:	687b      	ldr	r3, [r7, #4]
200038a4:	685b      	ldr	r3, [r3, #4]
200038a6:	683a      	ldr	r2, [r7, #0]
200038a8:	7992      	ldrb	r2, [r2, #6]
200038aa:	0011      	movs	r1, r2
200038ac:	697a      	ldr	r2, [r7, #20]
200038ae:	b292      	uxth	r2, r2
200038b0:	4091      	lsls	r1, r2
200038b2:	000a      	movs	r2, r1
200038b4:	b292      	uxth	r2, r2
200038b6:	431a      	orrs	r2, r3
200038b8:	687b      	ldr	r3, [r7, #4]
200038ba:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
200038bc:	687b      	ldr	r3, [r7, #4]
200038be:	68db      	ldr	r3, [r3, #12]
200038c0:	697a      	ldr	r2, [r7, #20]
200038c2:	b292      	uxth	r2, r2
200038c4:	0052      	lsls	r2, r2, #1
200038c6:	2103      	movs	r1, #3
200038c8:	4091      	lsls	r1, r2
200038ca:	000a      	movs	r2, r1
200038cc:	43d2      	mvns	r2, r2
200038ce:	401a      	ands	r2, r3
200038d0:	687b      	ldr	r3, [r7, #4]
200038d2:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
200038d4:	687b      	ldr	r3, [r7, #4]
200038d6:	68da      	ldr	r2, [r3, #12]
200038d8:	683b      	ldr	r3, [r7, #0]
200038da:	79db      	ldrb	r3, [r3, #7]
200038dc:	0019      	movs	r1, r3
200038de:	697b      	ldr	r3, [r7, #20]
200038e0:	005b      	lsls	r3, r3, #1
200038e2:	4099      	lsls	r1, r3
200038e4:	000b      	movs	r3, r1
200038e6:	431a      	orrs	r2, r3
200038e8:	687b      	ldr	r3, [r7, #4]
200038ea:	60da      	str	r2, [r3, #12]
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
200038ec:	697b      	ldr	r3, [r7, #20]
200038ee:	3301      	adds	r3, #1
200038f0:	617b      	str	r3, [r7, #20]
200038f2:	697b      	ldr	r3, [r7, #20]
200038f4:	2b0f      	cmp	r3, #15
200038f6:	d985      	bls.n	20003804 <GPIO_Init+0x1c>
    }
  }
}
200038f8:	46c0      	nop			; (mov r8, r8)
200038fa:	46bd      	mov	sp, r7
200038fc:	b006      	add	sp, #24
200038fe:	bd80      	pop	{r7, pc}

20003900 <GPIO_StructInit>:
  * @brief  Fills each GPIO_InitStruct member with its default value.
  * @param  GPIO_InitStruct : pointer to a GPIO_InitTypeDef structure which will be initialized.
  * @retval None
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
20003900:	b580      	push	{r7, lr}
20003902:	b082      	sub	sp, #8
20003904:	af00      	add	r7, sp, #0
20003906:	6078      	str	r0, [r7, #4]
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
20003908:	687b      	ldr	r3, [r7, #4]
2000390a:	4a09      	ldr	r2, [pc, #36]	; (20003930 <GPIO_StructInit+0x30>)
2000390c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN;
2000390e:	687b      	ldr	r3, [r7, #4]
20003910:	2200      	movs	r2, #0
20003912:	711a      	strb	r2, [r3, #4]
  GPIO_InitStruct->GPIO_Speed = GPIO_Speed_2MHz;
20003914:	687b      	ldr	r3, [r7, #4]
20003916:	2200      	movs	r2, #0
20003918:	715a      	strb	r2, [r3, #5]
  GPIO_InitStruct->GPIO_OType = GPIO_OType_PP;
2000391a:	687b      	ldr	r3, [r7, #4]
2000391c:	2200      	movs	r2, #0
2000391e:	719a      	strb	r2, [r3, #6]
  GPIO_InitStruct->GPIO_PuPd = GPIO_PuPd_NOPULL;
20003920:	687b      	ldr	r3, [r7, #4]
20003922:	2200      	movs	r2, #0
20003924:	71da      	strb	r2, [r3, #7]
}
20003926:	46c0      	nop			; (mov r8, r8)
20003928:	46bd      	mov	sp, r7
2000392a:	b002      	add	sp, #8
2000392c:	bd80      	pop	{r7, pc}
2000392e:	46c0      	nop			; (mov r8, r8)
20003930:	0000ffff 	strdeq	pc, [r0], -pc	; <UNPREDICTABLE>

20003934 <GPIO_PinLockConfig>:
  * @param  GPIO_Pin: specifies the port bit to be locked.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_PinLockConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
20003934:	b580      	push	{r7, lr}
20003936:	b084      	sub	sp, #16
20003938:	af00      	add	r7, sp, #0
2000393a:	6078      	str	r0, [r7, #4]
2000393c:	000a      	movs	r2, r1
2000393e:	1cbb      	adds	r3, r7, #2
20003940:	801a      	strh	r2, [r3, #0]
  __IO uint32_t tmp = 0x00010000;
20003942:	2380      	movs	r3, #128	; 0x80
20003944:	025b      	lsls	r3, r3, #9
20003946:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  tmp |= GPIO_Pin;
20003948:	1cbb      	adds	r3, r7, #2
2000394a:	881a      	ldrh	r2, [r3, #0]
2000394c:	68fb      	ldr	r3, [r7, #12]
2000394e:	4313      	orrs	r3, r2
20003950:	60fb      	str	r3, [r7, #12]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
20003952:	68fa      	ldr	r2, [r7, #12]
20003954:	687b      	ldr	r3, [r7, #4]
20003956:	61da      	str	r2, [r3, #28]
  /* Reset LCKK bit */
  GPIOx->LCKR =  GPIO_Pin;
20003958:	1cbb      	adds	r3, r7, #2
2000395a:	881a      	ldrh	r2, [r3, #0]
2000395c:	687b      	ldr	r3, [r7, #4]
2000395e:	61da      	str	r2, [r3, #28]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
20003960:	68fa      	ldr	r2, [r7, #12]
20003962:	687b      	ldr	r3, [r7, #4]
20003964:	61da      	str	r2, [r3, #28]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
20003966:	687b      	ldr	r3, [r7, #4]
20003968:	69db      	ldr	r3, [r3, #28]
2000396a:	60fb      	str	r3, [r7, #12]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
2000396c:	687b      	ldr	r3, [r7, #4]
2000396e:	69db      	ldr	r3, [r3, #28]
20003970:	60fb      	str	r3, [r7, #12]
}
20003972:	46c0      	nop			; (mov r8, r8)
20003974:	46bd      	mov	sp, r7
20003976:	b004      	add	sp, #16
20003978:	bd80      	pop	{r7, pc}

2000397a <GPIO_ReadInputDataBit>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
uint8_t GPIO_ReadInputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
2000397a:	b580      	push	{r7, lr}
2000397c:	b084      	sub	sp, #16
2000397e:	af00      	add	r7, sp, #0
20003980:	6078      	str	r0, [r7, #4]
20003982:	000a      	movs	r2, r1
20003984:	1cbb      	adds	r3, r7, #2
20003986:	801a      	strh	r2, [r3, #0]
  uint8_t bitstatus = 0x00;
20003988:	230f      	movs	r3, #15
2000398a:	18fb      	adds	r3, r7, r3
2000398c:	2200      	movs	r2, #0
2000398e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
20003990:	687b      	ldr	r3, [r7, #4]
20003992:	691b      	ldr	r3, [r3, #16]
20003994:	1cba      	adds	r2, r7, #2
20003996:	8812      	ldrh	r2, [r2, #0]
20003998:	4013      	ands	r3, r2
2000399a:	d004      	beq.n	200039a6 <GPIO_ReadInputDataBit+0x2c>
  {
    bitstatus = (uint8_t)Bit_SET;
2000399c:	230f      	movs	r3, #15
2000399e:	18fb      	adds	r3, r7, r3
200039a0:	2201      	movs	r2, #1
200039a2:	701a      	strb	r2, [r3, #0]
200039a4:	e003      	b.n	200039ae <GPIO_ReadInputDataBit+0x34>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
200039a6:	230f      	movs	r3, #15
200039a8:	18fb      	adds	r3, r7, r3
200039aa:	2200      	movs	r2, #0
200039ac:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
200039ae:	230f      	movs	r3, #15
200039b0:	18fb      	adds	r3, r7, r3
200039b2:	781b      	ldrb	r3, [r3, #0]
}
200039b4:	0018      	movs	r0, r3
200039b6:	46bd      	mov	sp, r7
200039b8:	b004      	add	sp, #16
200039ba:	bd80      	pop	{r7, pc}

200039bc <GPIO_ReadInputData>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F42xxx/43xxx devices.
  *                      x can be (A, B, C, D and H) to select the GPIO peripheral for STM32F401xx devices. 
  * @retval GPIO input data port value.
  */
uint16_t GPIO_ReadInputData(GPIO_TypeDef* GPIOx)
{
200039bc:	b580      	push	{r7, lr}
200039be:	b082      	sub	sp, #8
200039c0:	af00      	add	r7, sp, #0
200039c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  return ((uint16_t)GPIOx->IDR);
200039c4:	687b      	ldr	r3, [r7, #4]
200039c6:	691b      	ldr	r3, [r3, #16]
200039c8:	b29b      	uxth	r3, r3
}
200039ca:	0018      	movs	r0, r3
200039cc:	46bd      	mov	sp, r7
200039ce:	b002      	add	sp, #8
200039d0:	bd80      	pop	{r7, pc}

200039d2 <GPIO_ReadOutputDataBit>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *          This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The output port pin value.
  */
uint8_t GPIO_ReadOutputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
200039d2:	b580      	push	{r7, lr}
200039d4:	b084      	sub	sp, #16
200039d6:	af00      	add	r7, sp, #0
200039d8:	6078      	str	r0, [r7, #4]
200039da:	000a      	movs	r2, r1
200039dc:	1cbb      	adds	r3, r7, #2
200039de:	801a      	strh	r2, [r3, #0]
  uint8_t bitstatus = 0x00;
200039e0:	230f      	movs	r3, #15
200039e2:	18fb      	adds	r3, r7, r3
200039e4:	2200      	movs	r2, #0
200039e6:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if (((GPIOx->ODR) & GPIO_Pin) != (uint32_t)Bit_RESET)
200039e8:	687b      	ldr	r3, [r7, #4]
200039ea:	695b      	ldr	r3, [r3, #20]
200039ec:	1cba      	adds	r2, r7, #2
200039ee:	8812      	ldrh	r2, [r2, #0]
200039f0:	4013      	ands	r3, r2
200039f2:	d004      	beq.n	200039fe <GPIO_ReadOutputDataBit+0x2c>
  {
    bitstatus = (uint8_t)Bit_SET;
200039f4:	230f      	movs	r3, #15
200039f6:	18fb      	adds	r3, r7, r3
200039f8:	2201      	movs	r2, #1
200039fa:	701a      	strb	r2, [r3, #0]
200039fc:	e003      	b.n	20003a06 <GPIO_ReadOutputDataBit+0x34>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
200039fe:	230f      	movs	r3, #15
20003a00:	18fb      	adds	r3, r7, r3
20003a02:	2200      	movs	r2, #0
20003a04:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
20003a06:	230f      	movs	r3, #15
20003a08:	18fb      	adds	r3, r7, r3
20003a0a:	781b      	ldrb	r3, [r3, #0]
}
20003a0c:	0018      	movs	r0, r3
20003a0e:	46bd      	mov	sp, r7
20003a10:	b004      	add	sp, #16
20003a12:	bd80      	pop	{r7, pc}

20003a14 <GPIO_ReadOutputData>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F42xxx/43xxx devices.
  *                      x can be (A, B, C, D and H) to select the GPIO peripheral for STM32F401xx devices. 
  * @retval GPIO output data port value.
  */
uint16_t GPIO_ReadOutputData(GPIO_TypeDef* GPIOx)
{
20003a14:	b580      	push	{r7, lr}
20003a16:	b082      	sub	sp, #8
20003a18:	af00      	add	r7, sp, #0
20003a1a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  return ((uint16_t)GPIOx->ODR);
20003a1c:	687b      	ldr	r3, [r7, #4]
20003a1e:	695b      	ldr	r3, [r3, #20]
20003a20:	b29b      	uxth	r3, r3
}
20003a22:	0018      	movs	r0, r3
20003a24:	46bd      	mov	sp, r7
20003a26:	b002      	add	sp, #8
20003a28:	bd80      	pop	{r7, pc}

20003a2a <GPIO_SetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
20003a2a:	b580      	push	{r7, lr}
20003a2c:	b082      	sub	sp, #8
20003a2e:	af00      	add	r7, sp, #0
20003a30:	6078      	str	r0, [r7, #4]
20003a32:	000a      	movs	r2, r1
20003a34:	1cbb      	adds	r3, r7, #2
20003a36:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRL = GPIO_Pin;
20003a38:	687b      	ldr	r3, [r7, #4]
20003a3a:	1cba      	adds	r2, r7, #2
20003a3c:	8812      	ldrh	r2, [r2, #0]
20003a3e:	831a      	strh	r2, [r3, #24]
}
20003a40:	46c0      	nop			; (mov r8, r8)
20003a42:	46bd      	mov	sp, r7
20003a44:	b002      	add	sp, #8
20003a46:	bd80      	pop	{r7, pc}

20003a48 <GPIO_ResetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
20003a48:	b580      	push	{r7, lr}
20003a4a:	b082      	sub	sp, #8
20003a4c:	af00      	add	r7, sp, #0
20003a4e:	6078      	str	r0, [r7, #4]
20003a50:	000a      	movs	r2, r1
20003a52:	1cbb      	adds	r3, r7, #2
20003a54:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRH = GPIO_Pin;
20003a56:	687b      	ldr	r3, [r7, #4]
20003a58:	1cba      	adds	r2, r7, #2
20003a5a:	8812      	ldrh	r2, [r2, #0]
20003a5c:	835a      	strh	r2, [r3, #26]
}
20003a5e:	46c0      	nop			; (mov r8, r8)
20003a60:	46bd      	mov	sp, r7
20003a62:	b002      	add	sp, #8
20003a64:	bd80      	pop	{r7, pc}

20003a66 <GPIO_WriteBit>:
  *            @arg Bit_RESET: to clear the port pin
  *            @arg Bit_SET: to set the port pin
  * @retval None
  */
void GPIO_WriteBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, BitAction BitVal)
{
20003a66:	b580      	push	{r7, lr}
20003a68:	b082      	sub	sp, #8
20003a6a:	af00      	add	r7, sp, #0
20003a6c:	6078      	str	r0, [r7, #4]
20003a6e:	0008      	movs	r0, r1
20003a70:	0011      	movs	r1, r2
20003a72:	1cbb      	adds	r3, r7, #2
20003a74:	1c02      	adds	r2, r0, #0
20003a76:	801a      	strh	r2, [r3, #0]
20003a78:	1c7b      	adds	r3, r7, #1
20003a7a:	1c0a      	adds	r2, r1, #0
20003a7c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal));

  if (BitVal != Bit_RESET)
20003a7e:	1c7b      	adds	r3, r7, #1
20003a80:	781b      	ldrb	r3, [r3, #0]
20003a82:	2b00      	cmp	r3, #0
20003a84:	d004      	beq.n	20003a90 <GPIO_WriteBit+0x2a>
  {
    GPIOx->BSRRL = GPIO_Pin;
20003a86:	687b      	ldr	r3, [r7, #4]
20003a88:	1cba      	adds	r2, r7, #2
20003a8a:	8812      	ldrh	r2, [r2, #0]
20003a8c:	831a      	strh	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRRH = GPIO_Pin ;
  }
}
20003a8e:	e003      	b.n	20003a98 <GPIO_WriteBit+0x32>
    GPIOx->BSRRH = GPIO_Pin ;
20003a90:	687b      	ldr	r3, [r7, #4]
20003a92:	1cba      	adds	r2, r7, #2
20003a94:	8812      	ldrh	r2, [r2, #0]
20003a96:	835a      	strh	r2, [r3, #26]
}
20003a98:	46c0      	nop			; (mov r8, r8)
20003a9a:	46bd      	mov	sp, r7
20003a9c:	b002      	add	sp, #8
20003a9e:	bd80      	pop	{r7, pc}

20003aa0 <GPIO_Write>:
  *                      x can be (A, B, C, D and H) to select the GPIO peripheral for STM32F401xx devices. 
  * @param  PortVal: specifies the value to be written to the port output data register.
  * @retval None
  */
void GPIO_Write(GPIO_TypeDef* GPIOx, uint16_t PortVal)
{
20003aa0:	b580      	push	{r7, lr}
20003aa2:	b082      	sub	sp, #8
20003aa4:	af00      	add	r7, sp, #0
20003aa6:	6078      	str	r0, [r7, #4]
20003aa8:	000a      	movs	r2, r1
20003aaa:	1cbb      	adds	r3, r7, #2
20003aac:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR = PortVal;
20003aae:	1cbb      	adds	r3, r7, #2
20003ab0:	881a      	ldrh	r2, [r3, #0]
20003ab2:	687b      	ldr	r3, [r7, #4]
20003ab4:	615a      	str	r2, [r3, #20]
}
20003ab6:	46c0      	nop			; (mov r8, r8)
20003ab8:	46bd      	mov	sp, r7
20003aba:	b002      	add	sp, #8
20003abc:	bd80      	pop	{r7, pc}

20003abe <GPIO_ToggleBits>:
  *                      x can be (A, B, C, D and H) to select the GPIO peripheral for STM32F401xx devices. 
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void GPIO_ToggleBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
20003abe:	b580      	push	{r7, lr}
20003ac0:	b082      	sub	sp, #8
20003ac2:	af00      	add	r7, sp, #0
20003ac4:	6078      	str	r0, [r7, #4]
20003ac6:	000a      	movs	r2, r1
20003ac8:	1cbb      	adds	r3, r7, #2
20003aca:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR ^= GPIO_Pin;
20003acc:	687b      	ldr	r3, [r7, #4]
20003ace:	695a      	ldr	r2, [r3, #20]
20003ad0:	1cbb      	adds	r3, r7, #2
20003ad2:	881b      	ldrh	r3, [r3, #0]
20003ad4:	405a      	eors	r2, r3
20003ad6:	687b      	ldr	r3, [r7, #4]
20003ad8:	615a      	str	r2, [r3, #20]
}
20003ada:	46c0      	nop			; (mov r8, r8)
20003adc:	46bd      	mov	sp, r7
20003ade:	b002      	add	sp, #8
20003ae0:	bd80      	pop	{r7, pc}

20003ae2 <GPIO_PinAFConfig>:
  *            @arg GPIO_AF_LTDC: Connect LTDC pins to AF14 for STM32F429xx/439xx devices. 
  *            @arg GPIO_AF_EVENTOUT: Connect EVENTOUT pins to AF15
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
20003ae2:	b580      	push	{r7, lr}
20003ae4:	b084      	sub	sp, #16
20003ae6:	af00      	add	r7, sp, #0
20003ae8:	6078      	str	r0, [r7, #4]
20003aea:	0008      	movs	r0, r1
20003aec:	0011      	movs	r1, r2
20003aee:	1cbb      	adds	r3, r7, #2
20003af0:	1c02      	adds	r2, r0, #0
20003af2:	801a      	strh	r2, [r3, #0]
20003af4:	1c7b      	adds	r3, r7, #1
20003af6:	1c0a      	adds	r2, r1, #0
20003af8:	701a      	strb	r2, [r3, #0]
  uint32_t temp = 0x00;
20003afa:	2300      	movs	r3, #0
20003afc:	60fb      	str	r3, [r7, #12]
  uint32_t temp_2 = 0x00;
20003afe:	2300      	movs	r3, #0
20003b00:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
20003b02:	1c7b      	adds	r3, r7, #1
20003b04:	781a      	ldrb	r2, [r3, #0]
20003b06:	1cbb      	adds	r3, r7, #2
20003b08:	881b      	ldrh	r3, [r3, #0]
20003b0a:	2107      	movs	r1, #7
20003b0c:	400b      	ands	r3, r1
20003b0e:	009b      	lsls	r3, r3, #2
20003b10:	409a      	lsls	r2, r3
20003b12:	0013      	movs	r3, r2
20003b14:	60fb      	str	r3, [r7, #12]
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
20003b16:	1cbb      	adds	r3, r7, #2
20003b18:	881b      	ldrh	r3, [r3, #0]
20003b1a:	08db      	lsrs	r3, r3, #3
20003b1c:	b29b      	uxth	r3, r3
20003b1e:	001a      	movs	r2, r3
20003b20:	687b      	ldr	r3, [r7, #4]
20003b22:	3208      	adds	r2, #8
20003b24:	0092      	lsls	r2, r2, #2
20003b26:	58d3      	ldr	r3, [r2, r3]
20003b28:	1cba      	adds	r2, r7, #2
20003b2a:	8812      	ldrh	r2, [r2, #0]
20003b2c:	2107      	movs	r1, #7
20003b2e:	400a      	ands	r2, r1
20003b30:	0092      	lsls	r2, r2, #2
20003b32:	210f      	movs	r1, #15
20003b34:	4091      	lsls	r1, r2
20003b36:	000a      	movs	r2, r1
20003b38:	43d2      	mvns	r2, r2
20003b3a:	1cb9      	adds	r1, r7, #2
20003b3c:	8809      	ldrh	r1, [r1, #0]
20003b3e:	08c9      	lsrs	r1, r1, #3
20003b40:	b289      	uxth	r1, r1
20003b42:	0008      	movs	r0, r1
20003b44:	401a      	ands	r2, r3
20003b46:	0011      	movs	r1, r2
20003b48:	687b      	ldr	r3, [r7, #4]
20003b4a:	0002      	movs	r2, r0
20003b4c:	3208      	adds	r2, #8
20003b4e:	0092      	lsls	r2, r2, #2
20003b50:	50d1      	str	r1, [r2, r3]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
20003b52:	1cbb      	adds	r3, r7, #2
20003b54:	881b      	ldrh	r3, [r3, #0]
20003b56:	08db      	lsrs	r3, r3, #3
20003b58:	b29b      	uxth	r3, r3
20003b5a:	001a      	movs	r2, r3
20003b5c:	687b      	ldr	r3, [r7, #4]
20003b5e:	3208      	adds	r2, #8
20003b60:	0092      	lsls	r2, r2, #2
20003b62:	58d3      	ldr	r3, [r2, r3]
20003b64:	68fa      	ldr	r2, [r7, #12]
20003b66:	4313      	orrs	r3, r2
20003b68:	60bb      	str	r3, [r7, #8]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
20003b6a:	1cbb      	adds	r3, r7, #2
20003b6c:	881b      	ldrh	r3, [r3, #0]
20003b6e:	08db      	lsrs	r3, r3, #3
20003b70:	b29b      	uxth	r3, r3
20003b72:	001a      	movs	r2, r3
20003b74:	687b      	ldr	r3, [r7, #4]
20003b76:	3208      	adds	r2, #8
20003b78:	0092      	lsls	r2, r2, #2
20003b7a:	68b9      	ldr	r1, [r7, #8]
20003b7c:	50d1      	str	r1, [r2, r3]
}
20003b7e:	46c0      	nop			; (mov r8, r8)
20003b80:	46bd      	mov	sp, r7
20003b82:	b004      	add	sp, #16
20003b84:	bd80      	pop	{r7, pc}
20003b86:	46c0      	nop			; (mov r8, r8)

20003b88 <__udivsi3>:
20003b88:	2200      	movs	r2, #0
20003b8a:	0843      	lsrs	r3, r0, #1
20003b8c:	428b      	cmp	r3, r1
20003b8e:	d374      	bcc.n	20003c7a <__udivsi3+0xf2>
20003b90:	0903      	lsrs	r3, r0, #4
20003b92:	428b      	cmp	r3, r1
20003b94:	d35f      	bcc.n	20003c56 <__udivsi3+0xce>
20003b96:	0a03      	lsrs	r3, r0, #8
20003b98:	428b      	cmp	r3, r1
20003b9a:	d344      	bcc.n	20003c26 <__udivsi3+0x9e>
20003b9c:	0b03      	lsrs	r3, r0, #12
20003b9e:	428b      	cmp	r3, r1
20003ba0:	d328      	bcc.n	20003bf4 <__udivsi3+0x6c>
20003ba2:	0c03      	lsrs	r3, r0, #16
20003ba4:	428b      	cmp	r3, r1
20003ba6:	d30d      	bcc.n	20003bc4 <__udivsi3+0x3c>
20003ba8:	22ff      	movs	r2, #255	; 0xff
20003baa:	0209      	lsls	r1, r1, #8
20003bac:	ba12      	rev	r2, r2
20003bae:	0c03      	lsrs	r3, r0, #16
20003bb0:	428b      	cmp	r3, r1
20003bb2:	d302      	bcc.n	20003bba <__udivsi3+0x32>
20003bb4:	1212      	asrs	r2, r2, #8
20003bb6:	0209      	lsls	r1, r1, #8
20003bb8:	d065      	beq.n	20003c86 <__udivsi3+0xfe>
20003bba:	0b03      	lsrs	r3, r0, #12
20003bbc:	428b      	cmp	r3, r1
20003bbe:	d319      	bcc.n	20003bf4 <__udivsi3+0x6c>
20003bc0:	e000      	b.n	20003bc4 <__udivsi3+0x3c>
20003bc2:	0a09      	lsrs	r1, r1, #8
20003bc4:	0bc3      	lsrs	r3, r0, #15
20003bc6:	428b      	cmp	r3, r1
20003bc8:	d301      	bcc.n	20003bce <__udivsi3+0x46>
20003bca:	03cb      	lsls	r3, r1, #15
20003bcc:	1ac0      	subs	r0, r0, r3
20003bce:	4152      	adcs	r2, r2
20003bd0:	0b83      	lsrs	r3, r0, #14
20003bd2:	428b      	cmp	r3, r1
20003bd4:	d301      	bcc.n	20003bda <__udivsi3+0x52>
20003bd6:	038b      	lsls	r3, r1, #14
20003bd8:	1ac0      	subs	r0, r0, r3
20003bda:	4152      	adcs	r2, r2
20003bdc:	0b43      	lsrs	r3, r0, #13
20003bde:	428b      	cmp	r3, r1
20003be0:	d301      	bcc.n	20003be6 <__udivsi3+0x5e>
20003be2:	034b      	lsls	r3, r1, #13
20003be4:	1ac0      	subs	r0, r0, r3
20003be6:	4152      	adcs	r2, r2
20003be8:	0b03      	lsrs	r3, r0, #12
20003bea:	428b      	cmp	r3, r1
20003bec:	d301      	bcc.n	20003bf2 <__udivsi3+0x6a>
20003bee:	030b      	lsls	r3, r1, #12
20003bf0:	1ac0      	subs	r0, r0, r3
20003bf2:	4152      	adcs	r2, r2
20003bf4:	0ac3      	lsrs	r3, r0, #11
20003bf6:	428b      	cmp	r3, r1
20003bf8:	d301      	bcc.n	20003bfe <__udivsi3+0x76>
20003bfa:	02cb      	lsls	r3, r1, #11
20003bfc:	1ac0      	subs	r0, r0, r3
20003bfe:	4152      	adcs	r2, r2
20003c00:	0a83      	lsrs	r3, r0, #10
20003c02:	428b      	cmp	r3, r1
20003c04:	d301      	bcc.n	20003c0a <__udivsi3+0x82>
20003c06:	028b      	lsls	r3, r1, #10
20003c08:	1ac0      	subs	r0, r0, r3
20003c0a:	4152      	adcs	r2, r2
20003c0c:	0a43      	lsrs	r3, r0, #9
20003c0e:	428b      	cmp	r3, r1
20003c10:	d301      	bcc.n	20003c16 <__udivsi3+0x8e>
20003c12:	024b      	lsls	r3, r1, #9
20003c14:	1ac0      	subs	r0, r0, r3
20003c16:	4152      	adcs	r2, r2
20003c18:	0a03      	lsrs	r3, r0, #8
20003c1a:	428b      	cmp	r3, r1
20003c1c:	d301      	bcc.n	20003c22 <__udivsi3+0x9a>
20003c1e:	020b      	lsls	r3, r1, #8
20003c20:	1ac0      	subs	r0, r0, r3
20003c22:	4152      	adcs	r2, r2
20003c24:	d2cd      	bcs.n	20003bc2 <__udivsi3+0x3a>
20003c26:	09c3      	lsrs	r3, r0, #7
20003c28:	428b      	cmp	r3, r1
20003c2a:	d301      	bcc.n	20003c30 <__udivsi3+0xa8>
20003c2c:	01cb      	lsls	r3, r1, #7
20003c2e:	1ac0      	subs	r0, r0, r3
20003c30:	4152      	adcs	r2, r2
20003c32:	0983      	lsrs	r3, r0, #6
20003c34:	428b      	cmp	r3, r1
20003c36:	d301      	bcc.n	20003c3c <__udivsi3+0xb4>
20003c38:	018b      	lsls	r3, r1, #6
20003c3a:	1ac0      	subs	r0, r0, r3
20003c3c:	4152      	adcs	r2, r2
20003c3e:	0943      	lsrs	r3, r0, #5
20003c40:	428b      	cmp	r3, r1
20003c42:	d301      	bcc.n	20003c48 <__udivsi3+0xc0>
20003c44:	014b      	lsls	r3, r1, #5
20003c46:	1ac0      	subs	r0, r0, r3
20003c48:	4152      	adcs	r2, r2
20003c4a:	0903      	lsrs	r3, r0, #4
20003c4c:	428b      	cmp	r3, r1
20003c4e:	d301      	bcc.n	20003c54 <__udivsi3+0xcc>
20003c50:	010b      	lsls	r3, r1, #4
20003c52:	1ac0      	subs	r0, r0, r3
20003c54:	4152      	adcs	r2, r2
20003c56:	08c3      	lsrs	r3, r0, #3
20003c58:	428b      	cmp	r3, r1
20003c5a:	d301      	bcc.n	20003c60 <__udivsi3+0xd8>
20003c5c:	00cb      	lsls	r3, r1, #3
20003c5e:	1ac0      	subs	r0, r0, r3
20003c60:	4152      	adcs	r2, r2
20003c62:	0883      	lsrs	r3, r0, #2
20003c64:	428b      	cmp	r3, r1
20003c66:	d301      	bcc.n	20003c6c <__udivsi3+0xe4>
20003c68:	008b      	lsls	r3, r1, #2
20003c6a:	1ac0      	subs	r0, r0, r3
20003c6c:	4152      	adcs	r2, r2
20003c6e:	0843      	lsrs	r3, r0, #1
20003c70:	428b      	cmp	r3, r1
20003c72:	d301      	bcc.n	20003c78 <__udivsi3+0xf0>
20003c74:	004b      	lsls	r3, r1, #1
20003c76:	1ac0      	subs	r0, r0, r3
20003c78:	4152      	adcs	r2, r2
20003c7a:	1a41      	subs	r1, r0, r1
20003c7c:	d200      	bcs.n	20003c80 <__udivsi3+0xf8>
20003c7e:	4601      	mov	r1, r0
20003c80:	4152      	adcs	r2, r2
20003c82:	4610      	mov	r0, r2
20003c84:	4770      	bx	lr
20003c86:	e7ff      	b.n	20003c88 <__udivsi3+0x100>
20003c88:	b501      	push	{r0, lr}
20003c8a:	2000      	movs	r0, #0
20003c8c:	f000 f806 	bl	20003c9c <__aeabi_idiv0>
20003c90:	bd02      	pop	{r1, pc}
20003c92:	46c0      	nop			; (mov r8, r8)

20003c94 <__aeabi_uidivmod>:
20003c94:	2900      	cmp	r1, #0
20003c96:	d0f7      	beq.n	20003c88 <__udivsi3+0x100>
20003c98:	e776      	b.n	20003b88 <__udivsi3>
20003c9a:	4770      	bx	lr

20003c9c <__aeabi_idiv0>:
20003c9c:	4770      	bx	lr
20003c9e:	46c0      	nop			; (mov r8, r8)

20003ca0 <memset>:
20003ca0:	0003      	movs	r3, r0
20003ca2:	1812      	adds	r2, r2, r0
20003ca4:	4293      	cmp	r3, r2
20003ca6:	d100      	bne.n	20003caa <memset+0xa>
20003ca8:	4770      	bx	lr
20003caa:	7019      	strb	r1, [r3, #0]
20003cac:	3301      	adds	r3, #1
20003cae:	e7f9      	b.n	20003ca4 <memset+0x4>

20003cb0 <id>:
20003cb0:	00000000 	andeq	r0, r0, r0

20003cb4 <msTicks>:
20003cb4:	00000000 	andeq	r0, r0, r0

20003cb8 <SessionID>:
20003cb8:	00000000 	andeq	r0, r0, r0

20003cbc <handlerList>:
	...

20003d9c <SessionIDActive>:
20003d9c:	00000000 	andeq	r0, r0, r0

20003da0 <APBAHBPrescTable>:
20003da0:	00000000 	andeq	r0, r0, r0
20003da4:	04030201 	streq	r0, [r3], #-513	; 0xfffffdff
20003da8:	04030201 	streq	r0, [r3], #-513	; 0xfffffdff
20003dac:	09080706 	stmdbeq	r8, {r1, r2, r8, r9, sl}

20003db0 <noid>:
20003db0:	00000001 	andeq	r0, r0, r1

20003db4 <GPIO_Pins>:
20003db4:	00020001 	andeq	r0, r2, r1
20003db8:	00080004 	andeq	r0, r8, r4
20003dbc:	00200010 	eoreq	r0, r0, r0, lsl r0
20003dc0:	00800040 	addeq	r0, r0, r0, asr #32
20003dc4:	02000100 	andeq	r0, r0, #0, 2
20003dc8:	08000400 	stmdaeq	r0, {sl}
20003dcc:	20001000 	andcs	r1, r0, r0
20003dd0:	80004000 	andhi	r4, r0, r0

20003dd4 <GPIO_Ports>:
20003dd4:	40021000 	andmi	r1, r2, r0
20003dd8:	40020000 	andmi	r0, r2, r0
20003ddc:	40020800 	andmi	r0, r2, r0, lsl #16
20003de0:	40020c00 	andmi	r0, r2, r0, lsl #24

Disassembly of section .debug_info:

00000000 <.debug_info>:
       0:	000011b3 			; <UNDEFINED> instruction: 0x000011b3
       4:	00000004 	andeq	r0, r0, r4
       8:	01040000 	mrseq	r0, (UNDEF: 4)
       c:	000004c1 	andeq	r0, r0, r1, asr #9
      10:	0007de0c 	andeq	sp, r7, ip, lsl #28
      14:	00044a00 	andeq	r4, r4, r0, lsl #20
      18:	00001000 	andeq	r1, r0, r0
      1c:	0007e420 	andeq	lr, r7, r0, lsr #8
      20:	00000000 	andeq	r0, r0, r0
      24:	0c5c0200 	lfmeq	f0, 2, [ip], {-0}
      28:	01050000 	mrseq	r0, (UNDEF: 5)
      2c:	00000253 	andeq	r0, r0, r3, asr r2
      30:	0253c803 	subseq	ip, r3, #196608	; 0x30000
      34:	2d030000 	stccs	0, cr0, [r3, #-0]
      38:	72000006 	andvc	r0, r0, #6
      3c:	00065c03 	andeq	r5, r6, r3, lsl #24
      40:	f1037400 			; <UNDEFINED> instruction: 0xf1037400
      44:	75000006 	strvc	r0, [r0, #-6]
      48:	00039303 	andeq	r9, r3, r3, lsl #6
      4c:	b1037600 	tstlt	r3, r0, lsl #12
      50:	7b000007 	blvc	74 <startup-0x1fffff8c>
      54:	000b4903 	andeq	r4, fp, r3, lsl #18
      58:	51037c00 	tstpl	r3, r0, lsl #24
      5c:	7e00000d 	cdpvc	0, 0, cr0, cr0, cr13, {0}
      60:	00024f03 	andeq	r4, r2, r3, lsl #30
      64:	41047f00 	tstmi	r4, r0, lsl #30
      68:	00000006 	andeq	r0, r0, r6
      6c:	000ad304 	andeq	sp, sl, r4, lsl #6
      70:	82040100 	andhi	r0, r4, #0, 2
      74:	02000006 	andeq	r0, r0, #6
      78:	00000904 	andeq	r0, r0, r4, lsl #18
      7c:	cd040300 	stcgt	3, cr0, [r4, #-0]
      80:	04000000 	streq	r0, [r0], #-0
      84:	000bc804 	andeq	ip, fp, r4, lsl #16
      88:	03040500 	movweq	r0, #17664	; 0x4500
      8c:	0600000b 	streq	r0, [r0], -fp
      90:	0005cd04 	andeq	ip, r5, r4, lsl #26
      94:	17040700 	strne	r0, [r4, -r0, lsl #14]
      98:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
      9c:	000d4604 	andeq	r4, sp, r4, lsl #12
      a0:	5e040900 	vmlapl.f16	s0, s8, s0	; <UNPREDICTABLE>
      a4:	0a000008 	beq	cc <startup-0x1fffff34>
      a8:	0009a004 	andeq	sl, r9, r4
      ac:	bf040b00 	svclt	0x00040b00
      b0:	0c000008 	stceq	0, cr0, [r0], {8}
      b4:	0002b904 	andeq	fp, r2, r4, lsl #18
      b8:	dc040d00 	stcle	13, cr0, [r4], {-0}
      bc:	0e00000b 	cdpeq	0, 0, cr0, cr0, cr11, {0}
      c0:	000b1304 	andeq	r1, fp, r4, lsl #6
      c4:	e5040f00 	str	r0, [r4, #-3840]	; 0xfffff100
      c8:	10000005 	andne	r0, r0, r5
      cc:	00002204 	andeq	r2, r0, r4, lsl #4
      d0:	a3041100 	movwge	r1, #16640	; 0x4100
      d4:	1200000a 	andne	r0, r0, #10
      d8:	0005d804 	andeq	sp, r5, r4, lsl #16
      dc:	27041300 	strcs	r1, [r4, -r0, lsl #6]
      e0:	14000004 	strne	r0, [r0], #-4
      e4:	000cd804 	andeq	sp, ip, r4, lsl #16
      e8:	92041500 	andls	r1, r4, #0, 10
      ec:	16000006 	strne	r0, [r0], -r6
      f0:	000cf304 	andeq	pc, ip, r4, lsl #6
      f4:	0a041700 	beq	105cfc <startup-0x1fefa304>
      f8:	18000007 	stmdane	r0, {r0, r1, r2}
      fc:	000c4e04 	andeq	r4, ip, r4, lsl #28
     100:	15041900 	strne	r1, [r4, #-2304]	; 0xfffff700
     104:	1a000002 	bne	114 <startup-0x1ffffeec>
     108:	0005b204 	andeq	fp, r5, r4, lsl #4
     10c:	24041b00 	strcs	r1, [r4], #-2816	; 0xfffff500
     110:	1c000001 	stcne	0, cr0, [r0], {1}
     114:	000a2104 	andeq	r2, sl, r4, lsl #2
     118:	b7041d00 	strlt	r1, [r4, -r0, lsl #26]
     11c:	1e000004 	cdpne	0, 0, cr0, cr0, cr4, {0}
     120:	00056d04 	andeq	r6, r5, r4, lsl #26
     124:	2b041f00 	blcs	107d2c <startup-0x1fef82d4>
     128:	20000003 	andcs	r0, r0, r3
     12c:	00088204 	andeq	r8, r8, r4, lsl #4
     130:	ce042100 	adfgts	f2, f4, f0
     134:	22000006 	andcs	r0, r0, #6
     138:	00078f04 	andeq	r8, r7, r4, lsl #30
     13c:	8e042300 	cdphi	3, 0, cr2, cr4, cr0, {0}
     140:	24000001 	strcs	r0, [r0], #-1
     144:	000a2b04 	andeq	r2, sl, r4, lsl #22
     148:	ee042500 	cfsh32	mvfx2, mvfx4, #0
     14c:	2600000b 	strcs	r0, [r0], -fp
     150:	00025c04 	andeq	r5, r2, r4, lsl #24
     154:	fb042700 	blx	109d5e <startup-0x1fef62a2>
     158:	28000009 	stmdacs	r0, {r0, r3}
     15c:	0009b204 	andeq	fp, r9, r4, lsl #4
     160:	43042900 	movwmi	r2, #18688	; 0x4900
     164:	2a000008 	bcs	18c <startup-0x1ffffe74>
     168:	00019804 	andeq	r9, r1, r4, lsl #16
     16c:	34042b00 	strcc	r2, [r4], #-2816	; 0xfffff500
     170:	2c000000 	stccs	0, cr0, [r0], {-0}
     174:	0005f704 	andeq	pc, r5, r4, lsl #14
     178:	24042d00 	strcs	r2, [r4], #-3328	; 0xfffff300
     17c:	2e00000d 	cdpcs	0, 0, cr0, cr0, cr13, {0}
     180:	000d7b04 	andeq	r7, sp, r4, lsl #22
     184:	f9042f00 			; <UNDEFINED> instruction: 0xf9042f00
     188:	3000000a 	andcc	r0, r0, sl
     18c:	000d3104 	andeq	r3, sp, r4, lsl #2
     190:	89043100 	stmdbhi	r4, {r8, ip, sp}
     194:	32000003 	andcc	r0, r0, #3
     198:	0000c304 	andeq	ip, r0, r4, lsl #6
     19c:	2f043300 	svccs	0x00043300
     1a0:	34000008 	strcc	r0, [r0], #-8
     1a4:	0006ff04 	andeq	pc, r6, r4, lsl #30
     1a8:	69043500 	stmdbvs	r4, {r8, sl, ip, sp}
     1ac:	36000008 	strcc	r0, [r0], -r8
     1b0:	00074f04 	andeq	r4, r7, r4, lsl #30
     1b4:	b7043700 	strlt	r3, [r4, -r0, lsl #14]
     1b8:	38000006 	stmdacc	r0, {r1, r2}
     1bc:	00009b04 	andeq	r9, r0, r4, lsl #22
     1c0:	d2043900 	andle	r3, r4, #0, 18
     1c4:	3a00000d 	bcc	200 <startup-0x1ffffe00>
     1c8:	0008d104 	andeq	sp, r8, r4, lsl #2
     1cc:	ed043b00 	vstr	d3, [r4, #-0]
     1d0:	3c000002 	stccc	0, cr0, [r0], {2}
     1d4:	000b9604 	andeq	r9, fp, r4, lsl #12
     1d8:	67043d00 	strvs	r3, [r4, -r0, lsl #26]
     1dc:	3e000007 	cdpcc	0, 0, cr0, cr0, cr7, {0}
     1e0:	0008e304 	andeq	lr, r8, r4, lsl #6
     1e4:	5a043f00 	bpl	10fdec <startup-0x1fef0214>
     1e8:	40000001 	andmi	r0, r0, r1
     1ec:	000a9504 	andeq	r9, sl, r4, lsl #10
     1f0:	5a044100 	bpl	1105f8 <startup-0x1feefa08>
     1f4:	42000003 	andmi	r0, r0, #3
     1f8:	00062104 	andeq	r2, r6, r4, lsl #2
     1fc:	f6044300 			; <UNDEFINED> instruction: 0xf6044300
     200:	44000001 	strmi	r0, [r0], #-1
     204:	000b2504 	andeq	r2, fp, r4, lsl #10
     208:	0f044500 	svceq	0x00044500
     20c:	46000006 	strmi	r0, [r0], -r6
     210:	00016804 	andeq	r6, r1, r4, lsl #16
     214:	69044700 	stmdbvs	r4, {r8, r9, sl, lr}
     218:	4800000b 	stmdami	r0, {r0, r1, r3}
     21c:	0009e404 	andeq	lr, r9, r4, lsl #8
     220:	99044900 	stmdbls	r4, {r8, fp, lr}
     224:	4a00000c 	bmi	25c <startup-0x1ffffda4>
     228:	000d5d04 	andeq	r5, sp, r4, lsl #26
     22c:	4b044b00 	blmi	112e34 <startup-0x1feed1cc>
     230:	4c000006 	stcmi	0, cr0, [r0], {6}
     234:	00077504 	andeq	r7, r7, r4, lsl #10
     238:	f0044d00 			; <UNDEFINED> instruction: 0xf0044d00
     23c:	4e000000 	cdpmi	0, 0, cr0, cr0, cr0, {0}
     240:	0009f104 	andeq	pc, r9, r4, lsl #2
     244:	bf044f00 	svclt	0x00044f00
     248:	50000005 	andpl	r0, r0, r5
     24c:	00082604 	andeq	r2, r8, r4, lsl #12
     250:	05005100 	streq	r5, [r0, #-256]	; 0xffffff00
     254:	02e10601 	rsceq	r0, r1, #1048576	; 0x100000
     258:	a0060000 	andge	r0, r6, r0
     25c:	03000006 	movweq	r0, #6
     260:	0025032f 	eoreq	r0, r5, pc, lsr #6
     264:	84070000 	strhi	r0, [r7], #-0
     268:	04000001 	streq	r0, [r0], #-1
     26c:	0002712b 	andeq	r7, r2, fp, lsr #2
     270:	08010500 	stmdaeq	r1, {r8, sl}
     274:	000002df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
     278:	be050205 	cdplt	2, 0, cr0, cr5, cr5, {0}
     27c:	0700000b 	streq	r0, [r0, -fp]
     280:	0000040d 	andeq	r0, r0, sp, lsl #8
     284:	028a3904 	addeq	r3, sl, #4, 18	; 0x10000
     288:	02050000 	andeq	r0, r5, #0
     28c:	000d1107 	andeq	r1, sp, r7, lsl #2
     290:	0d8d0700 	stceq	7, cr0, [sp]
     294:	4d040000 	stcmi	0, cr0, [r4, #-0]
     298:	0000029c 	muleq	r0, ip, r2
     29c:	5e050405 	cdppl	4, 0, cr0, cr5, cr5, {0}
     2a0:	07000007 	streq	r0, [r0, -r7]
     2a4:	00000732 	andeq	r0, r0, r2, lsr r7
     2a8:	02ae4f04 	adceq	r4, lr, #4, 30
     2ac:	04050000 	streq	r0, [r5], #-0
     2b0:	000a0f07 	andeq	r0, sl, r7, lsl #30
     2b4:	05080500 	streq	r0, [r8, #-1280]	; 0xfffffb00
     2b8:	00000759 	andeq	r0, r0, r9, asr r7
     2bc:	0a070805 	beq	1c22d8 <startup-0x1fe3dd28>
     2c0:	0800000a 	stmdaeq	r0, {r1, r3}
     2c4:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
     2c8:	04050074 	streq	r0, [r5], #-116	; 0xffffff8c
     2cc:	000a1407 	andeq	r1, sl, r7, lsl #8
     2d0:	01860700 	orreq	r0, r6, r0, lsl #14
     2d4:	18050000 	stmdane	r5, {}	; <UNPREDICTABLE>
     2d8:	00000266 	andeq	r0, r0, r6, ror #4
     2dc:	0002d109 	andeq	sp, r2, r9, lsl #2
     2e0:	040f0700 	streq	r0, [pc], #-1792	; 2e8 <startup-0x1ffffd18>
     2e4:	24050000 	strcs	r0, [r5], #-0
     2e8:	0000027f 	andeq	r0, r0, pc, ror r2
     2ec:	0002e109 	andeq	lr, r2, r9, lsl #2
     2f0:	0d8f0700 	stceq	7, cr0, [pc]	; 2f8 <startup-0x1ffffd08>
     2f4:	2c050000 	stccs	0, cr0, [r5], {-0}
     2f8:	00000291 	muleq	r0, r1, r2
     2fc:	0002f109 	andeq	pc, r2, r9, lsl #2
     300:	07340700 	ldreq	r0, [r4, -r0, lsl #14]!
     304:	30050000 	andcc	r0, r5, r0
     308:	000002a3 	andeq	r0, r0, r3, lsr #5
     30c:	00030109 	andeq	r0, r3, r9, lsl #2
     310:	030c0a00 	movweq	r0, #51712	; 0xca00
     314:	040b0000 	streq	r0, [fp], #-0
     318:	01a0010e 	lsleq	r0, lr, #2
     31c:	000003d2 	ldrdeq	r0, [r0], -r2
     320:	000d970c 	andeq	r9, sp, ip, lsl #14
     324:	01a20100 			; <UNDEFINED> instruction: 0x01a20100
     328:	000003e2 	andeq	r0, r0, r2, ror #7
     32c:	02cb0c00 	sbceq	r0, fp, #0, 24
     330:	a3010000 	movwge	r0, #4096	; 0x1000
     334:	0003e701 	andeq	lr, r3, r1, lsl #14
     338:	bd0c2000 	stclt	0, cr2, [ip, #-0]
     33c:	0100000a 	tsteq	r0, sl
     340:	03e201a4 	mvneq	r0, #164, 2	; 0x29
     344:	0c800000 	stceq	0, cr0, [r0], {0}
     348:	00000000 	andeq	r0, r0, r0
     34c:	e701a501 	str	sl, [r1, -r1, lsl #10]
     350:	a0000003 	andge	r0, r0, r3
     354:	000d410d 	andeq	r4, sp, sp, lsl #2
     358:	01a60100 			; <UNDEFINED> instruction: 0x01a60100
     35c:	000003e2 	andeq	r0, r0, r2, ror #7
     360:	750d0100 	strvc	r0, [sp, #-256]	; 0xffffff00
     364:	01000003 	tsteq	r0, r3
     368:	03e701a7 	mvneq	r0, #-1073741783	; 0xc0000029
     36c:	01200000 			; <UNDEFINED> instruction: 0x01200000
     370:	0001380d 	andeq	r3, r1, sp, lsl #16
     374:	01a80100 			; <UNDEFINED> instruction: 0x01a80100
     378:	000003e2 	andeq	r0, r0, r2, ror #7
     37c:	7f0d0180 	svcvc	0x000d0180
     380:	01000003 	tsteq	r0, r3
     384:	03e701a9 	mvneq	r0, #1073741866	; 0x4000002a
     388:	01a00000 	moveq	r0, r0
     38c:	0003180d 	andeq	r1, r3, sp, lsl #16
     390:	01aa0100 			; <UNDEFINED> instruction: 0x01aa0100
     394:	000003e2 	andeq	r0, r0, r2, ror #7
     398:	ff0d0200 			; <UNDEFINED> instruction: 0xff0d0200
     39c:	01000002 	tsteq	r0, r2
     3a0:	03f701ab 	mvnseq	r0, #-1073741782	; 0xc000002a
     3a4:	02200000 	eoreq	r0, r0, #0
     3a8:	0050490e 	subseq	r4, r0, lr, lsl #18
     3ac:	1701ac01 	strne	sl, [r1, -r1, lsl #24]
     3b0:	00000004 	andeq	r0, r0, r4
     3b4:	03090d03 	movweq	r0, #40195	; 0x9d03
     3b8:	ad010000 	stcge	0, cr0, [r1, #-0]
     3bc:	00041c01 	andeq	r1, r4, r1, lsl #24
     3c0:	0d03f000 	stceq	0, cr15, [r3, #-0]
     3c4:	00000568 	andeq	r0, r0, r8, ror #10
     3c8:	0c01ae01 	stceq	14, cr10, [r1], {1}
     3cc:	00000003 	andeq	r0, r0, r3
     3d0:	0c0f000e 	stceq	0, cr0, [pc], {14}
     3d4:	e2000003 	and	r0, r0, #3
     3d8:	10000003 	andne	r0, r0, r3
     3dc:	000002ca 	andeq	r0, r0, sl, asr #5
     3e0:	d2090007 	andle	r0, r9, #7
     3e4:	0f000003 	svceq	0x00000003
     3e8:	00000301 	andeq	r0, r0, r1, lsl #6
     3ec:	000003f7 	strdeq	r0, [r0], -r7
     3f0:	0002ca10 	andeq	ip, r2, r0, lsl sl
     3f4:	0f001700 	svceq	0x00001700
     3f8:	00000301 	andeq	r0, r0, r1, lsl #6
     3fc:	00000407 	andeq	r0, r0, r7, lsl #8
     400:	0002ca10 	andeq	ip, r2, r0, lsl sl
     404:	0f003700 	svceq	0x00003700
     408:	000002dc 	ldrdeq	r0, [r0], -ip
     40c:	00000417 	andeq	r0, r0, r7, lsl r4
     410:	0002ca10 	andeq	ip, r2, r0, lsl sl
     414:	0900ef00 	stmdbeq	r0, {r8, r9, sl, fp, sp, lr, pc}
     418:	00000407 	andeq	r0, r0, r7, lsl #8
     41c:	0003010f 	andeq	r0, r3, pc, lsl #2
     420:	00042d00 	andeq	r2, r4, r0, lsl #26
     424:	02ca1100 	sbceq	r1, sl, #0, 2
     428:	02830000 	addeq	r0, r3, #0
     42c:	09ca0600 	stmibeq	sl, {r9, sl}^
     430:	af010000 	svcge	0x00010000
     434:	00031601 	andeq	r1, r3, r1, lsl #12
     438:	018c1200 	orreq	r1, ip, r0, lsl #4
     43c:	055401c0 	ldrbeq	r0, [r4, #-448]	; 0xfffffe40
     440:	f00c0000 			; <UNDEFINED> instruction: 0xf00c0000
     444:	01000001 	tsteq	r0, r1
     448:	031101c2 	tsteq	r1, #-2147483600	; 0x80000030
     44c:	0c000000 	stceq	0, cr0, [r0], {-0}
     450:	00000268 	andeq	r0, r0, r8, ror #4
     454:	0c01c301 	stceq	3, cr12, [r1], {1}
     458:	04000003 	streq	r0, [r0], #-3
     45c:	0000be0c 	andeq	fp, r0, ip, lsl #28
     460:	01c40100 	biceq	r0, r4, r0, lsl #2
     464:	0000030c 	andeq	r0, r0, ip, lsl #6
     468:	01de0c08 	bicseq	r0, lr, r8, lsl #24
     46c:	c5010000 	strgt	r0, [r1, #-0]
     470:	00030c01 	andeq	r0, r3, r1, lsl #24
     474:	53130c00 	tstpl	r3, #0, 24
     478:	01005243 	tsteq	r0, r3, asr #4
     47c:	030c01c6 	movweq	r0, #49606	; 0xc1c6
     480:	13100000 	tstne	r0, #0
     484:	00524343 	subseq	r4, r2, r3, asr #6
     488:	0c01c701 	stceq	7, cr12, [r1], {1}
     48c:	14000003 	strne	r0, [r0], #-3
     490:	50485313 	subpl	r5, r8, r3, lsl r3
     494:	01c80100 	biceq	r0, r8, r0, lsl #2
     498:	00000564 	andeq	r0, r0, r4, ror #10
     49c:	05620c18 	strbeq	r0, [r2, #-3096]!	; 0xfffff3e8
     4a0:	c9010000 	stmdbgt	r1, {}	; <UNPREDICTABLE>
     4a4:	00030c01 	andeq	r0, r3, r1, lsl #24
     4a8:	0e0c2400 	cfcpyseq	mvf2, mvf12
     4ac:	0100000b 	tsteq	r0, fp
     4b0:	030c01ca 	movweq	r0, #49610	; 0xc1ca
     4b4:	0c280000 	stceq	0, cr0, [r8], #-0
     4b8:	0000048d 	andeq	r0, r0, sp, lsl #9
     4bc:	0c01cb01 			; <UNDEFINED> instruction: 0x0c01cb01
     4c0:	2c000003 	stccs	0, cr0, [r0], {3}
     4c4:	0003cd0c 	andeq	ip, r3, ip, lsl #26
     4c8:	01cc0100 	biceq	r0, ip, r0, lsl #2
     4cc:	0000030c 	andeq	r0, r0, ip, lsl #6
     4d0:	0bb80c30 	bleq	fee03598 <GPIO_Ports+0xdedff7c4>
     4d4:	cd010000 	stcgt	0, cr0, [r1, #-0]
     4d8:	00030c01 	andeq	r0, r3, r1, lsl #24
     4dc:	9e0c3400 	cfcpysls	mvf3, mvf12
     4e0:	01000008 	tsteq	r0, r8
     4e4:	030c01ce 	movweq	r0, #49614	; 0xc1ce
     4e8:	0c380000 	ldceq	0, cr0, [r8], #-0
     4ec:	00000adc 	ldrdeq	r0, [r0], -ip
     4f0:	0c01cf01 	stceq	15, cr12, [r1], {1}
     4f4:	3c000003 	stccc	0, cr0, [r0], {3}
     4f8:	52465013 	subpl	r5, r6, #19
     4fc:	01d00100 	bicseq	r0, r0, r0, lsl #2
     500:	0000057e 	andeq	r0, r0, lr, ror r5
     504:	46441340 	strbmi	r1, [r4], -r0, asr #6
     508:	d1010052 	qaddle	r0, r2, r1
     50c:	00031101 	andeq	r1, r3, r1, lsl #2
     510:	41134800 	tstmi	r3, r0, lsl #16
     514:	01005244 	tsteq	r0, r4, asr #4
     518:	031101d2 	tsteq	r1, #-2147483596	; 0x80000034
     51c:	0c4c0000 	mareq	acc0, r0, ip
     520:	00000bb3 			; <UNDEFINED> instruction: 0x00000bb3
     524:	9801d301 	stmdals	r1, {r0, r8, r9, ip, lr, pc}
     528:	50000005 	andpl	r0, r0, r5
     52c:	000bd70c 	andeq	sp, fp, ip, lsl #14
     530:	01d40100 	bicseq	r0, r4, r0, lsl #2
     534:	000005b2 			; <UNDEFINED> instruction: 0x000005b2
     538:	02cb0c60 	sbceq	r0, fp, #96, 24	; 0x6000
     53c:	d5010000 	strle	r0, [r1, #-0]
     540:	0005b701 	andeq	fp, r5, r1, lsl #14
     544:	3b0c7400 	blcc	31d54c <startup-0x1fce2ab4>
     548:	0100000d 	tsteq	r0, sp
     54c:	030c01d6 	movweq	r0, #49622	; 0xc1d6
     550:	00880000 	addeq	r0, r8, r0
     554:	0002dc0f 	andeq	sp, r2, pc, lsl #24
     558:	00056400 	andeq	r6, r5, r0, lsl #8
     55c:	02ca1000 	sbceq	r1, sl, #0
     560:	000b0000 	andeq	r0, fp, r0
     564:	00055409 	andeq	r5, r5, r9, lsl #8
     568:	03110f00 	tsteq	r1, #0, 30
     56c:	05790000 	ldrbeq	r0, [r9, #-0]!
     570:	ca100000 	bgt	400578 <startup-0x1fbffa88>
     574:	01000002 	tsteq	r0, r2
     578:	05690a00 	strbeq	r0, [r9, #-2560]!	; 0xfffff600
     57c:	79090000 	stmdbvc	r9, {}	; <UNPREDICTABLE>
     580:	0f000005 	svceq	0x00000005
     584:	00000311 	andeq	r0, r0, r1, lsl r3
     588:	00000593 	muleq	r0, r3, r5
     58c:	0002ca10 	andeq	ip, r2, r0, lsl sl
     590:	0a000300 	beq	1198 <startup-0x1fffee68>
     594:	00000583 	andeq	r0, r0, r3, lsl #11
     598:	00059309 	andeq	r9, r5, r9, lsl #6
     59c:	03110f00 	tsteq	r1, #0, 30
     5a0:	05ad0000 	streq	r0, [sp, #0]!
     5a4:	ca100000 	bgt	4005ac <startup-0x1fbffa54>
     5a8:	04000002 	streq	r0, [r0], #-2
     5ac:	059d0a00 	ldreq	r0, [sp, #2560]	; 0xa00
     5b0:	ad090000 	stcge	0, cr0, [r9, #-0]
     5b4:	0f000005 	svceq	0x00000005
     5b8:	00000301 	andeq	r0, r0, r1, lsl #6
     5bc:	000005c7 	andeq	r0, r0, r7, asr #11
     5c0:	0002ca10 	andeq	ip, r2, r0, lsl sl
     5c4:	06000400 	streq	r0, [r0], -r0, lsl #8
     5c8:	000003b3 			; <UNDEFINED> instruction: 0x000003b3
     5cc:	3901d701 	stmdbcc	r1, {r0, r8, r9, sl, ip, lr, pc}
     5d0:	0f000004 	svceq	0x00000004
     5d4:	00000301 	andeq	r0, r0, r1, lsl #6
     5d8:	000005e3 	andeq	r0, r0, r3, ror #11
     5dc:	0002ca10 	andeq	ip, r2, r0, lsl sl
     5e0:	14000700 	strne	r0, [r0], #-1792	; 0xfffff900
     5e4:	00000c61 	andeq	r0, r0, r1, ror #24
     5e8:	fc06fa01 	stc2	10, cr15, [r6], {1}	; <UNPREDICTABLE>
     5ec:	15000002 	strne	r0, [r0, #-2]
     5f0:	00000672 	andeq	r0, r0, r2, ror r6
     5f4:	03013b06 	movweq	r3, #6918	; 0x1b06
     5f8:	07160000 	ldreq	r0, [r6, -r0]
     5fc:	00027101 	andeq	r7, r2, r1, lsl #2
     600:	035f0300 	cmpeq	pc, #0, 6
     604:	00000615 	andeq	r0, r0, r5, lsl r6
     608:	00095104 	andeq	r5, r9, r4, lsl #2
     60c:	00040000 	andeq	r0, r4, r0
     610:	0100000c 	tsteq	r0, ip
     614:	09d40600 	ldmibeq	r4, {r9, sl}^
     618:	5f030000 	svcpl	0x00030000
     61c:	0005fa03 	andeq	pc, r5, r3, lsl #20
     620:	03101200 	tsteq	r0, #0, 4
     624:	065f0395 			; <UNDEFINED> instruction: 0x065f0395
     628:	54130000 	ldrpl	r0, [r3], #-0
     62c:	03005249 	movweq	r5, #585	; 0x249
     630:	030c0397 	movweq	r0, #50071	; 0xc397
     634:	0c000000 	stceq	0, cr0, [r0], {-0}
     638:	00000dc0 	andeq	r0, r0, r0, asr #27
     63c:	0c039803 	stceq	8, cr9, [r3], {3}
     640:	04000003 	streq	r0, [r0], #-3
     644:	000a900c 	andeq	r9, sl, ip
     648:	03990300 	orrseq	r0, r9, #0, 6
     64c:	0000030c 	andeq	r0, r0, ip, lsl #6
     650:	08990c08 	ldmeq	r9, {r3, sl, fp}
     654:	9a030000 	bls	c065c <startup-0x1ff3f9a4>
     658:	00030c03 	andeq	r0, r3, r3, lsl #24
     65c:	06000c00 	streq	r0, [r0], -r0, lsl #24
     660:	00000b76 	andeq	r0, r0, r6, ror fp
     664:	21039b03 	tstcs	r3, r3, lsl #22
     668:	12000006 	andne	r0, r0, #6
     66c:	03a10310 			; <UNDEFINED> instruction: 0x03a10310
     670:	000006a9 	andeq	r0, r0, r9, lsr #13
     674:	52495213 	subpl	r5, r9, #805306369	; 0x30000001
     678:	03a30300 			; <UNDEFINED> instruction: 0x03a30300
     67c:	0000030c 	andeq	r0, r0, ip, lsl #6
     680:	0db20c00 	ldceq	12, cr0, [r2]
     684:	a4030000 	strge	r0, [r3], #-0
     688:	00030c03 	andeq	r0, r3, r3, lsl #24
     68c:	560c0400 	strpl	r0, [ip], -r0, lsl #8
     690:	0300000a 	movweq	r0, #10
     694:	030c03a5 	movweq	r0, #50085	; 0xc3a5
     698:	0c080000 	stceq	0, cr0, [r8], {-0}
     69c:	00000894 	muleq	r0, r4, r8
     6a0:	0c03a603 	stceq	6, cr10, [r3], {3}
     6a4:	0c000003 	stceq	0, cr0, [r0], {3}
     6a8:	0a5b0600 	beq	16c1eb0 <startup-0x1e93e150>
     6ac:	a7030000 	strge	r0, [r3, -r0]
     6b0:	00066b03 	andeq	r6, r6, r3, lsl #22
     6b4:	03081200 	movweq	r1, #33280	; 0x8200
     6b8:	06d903ad 	ldrbeq	r0, [r9], sp, lsr #7
     6bc:	46130000 	ldrmi	r0, [r3], -r0
     6c0:	03003152 	movweq	r3, #338	; 0x152
     6c4:	030c03af 	movweq	r0, #50095	; 0xc3af
     6c8:	13000000 	movwne	r0, #0
     6cc:	00325246 	eorseq	r5, r2, r6, asr #4
     6d0:	0c03b003 	stceq	0, cr11, [r3], {3}
     6d4:	04000003 	streq	r0, [r0], #-3
     6d8:	02910600 	addseq	r0, r1, #0, 12
     6dc:	b1030000 	mrslt	r0, (UNDEF: 3)
     6e0:	0006b503 	andeq	fp, r6, r3, lsl #10
     6e4:	03200b00 	nopeq	{0}	; <UNPREDICTABLE>
     6e8:	1b03b703 	blne	ee2fc <startup-0x1ff11d04>
     6ec:	13000008 	movwne	r0, #8
     6f0:	0052434d 	subseq	r4, r2, sp, asr #6
     6f4:	0c03b903 			; <UNDEFINED> instruction: 0x0c03b903
     6f8:	00000003 	andeq	r0, r0, r3
     6fc:	52534d13 	subspl	r4, r3, #1216	; 0x4c0
     700:	03ba0300 			; <UNDEFINED> instruction: 0x03ba0300
     704:	0000030c 	andeq	r0, r0, ip, lsl #6
     708:	53541304 	cmppl	r4, #4, 6	; 0x10000000
     70c:	bb030052 	bllt	c085c <startup-0x1ff3f7a4>
     710:	00030c03 	andeq	r0, r3, r3, lsl #24
     714:	6d0c0800 	stcvs	8, cr0, [ip, #-0]
     718:	03000002 	movweq	r0, #2
     71c:	030c03bc 	movweq	r0, #50108	; 0xc3bc
     720:	0c0c0000 	stceq	0, cr0, [ip], {-0}
     724:	00000313 	andeq	r0, r0, r3, lsl r3
     728:	0c03bd03 	stceq	13, cr11, [r3], {3}
     72c:	10000003 	andne	r0, r0, r3
     730:	52454913 	subpl	r4, r5, #311296	; 0x4c000
     734:	03be0300 			; <UNDEFINED> instruction: 0x03be0300
     738:	0000030c 	andeq	r0, r0, ip, lsl #6
     73c:	53451314 	movtpl	r1, #21268	; 0x5314
     740:	bf030052 	svclt	0x00030052
     744:	00030c03 	andeq	r0, r3, r3, lsl #24
     748:	42131800 	andsmi	r1, r3, #0, 16
     74c:	03005254 	movweq	r5, #596	; 0x254
     750:	030c03c0 	movweq	r0, #50112	; 0xc3c0
     754:	0c1c0000 	ldceq	0, cr0, [ip], {-0}
     758:	000002cb 	andeq	r0, r0, fp, asr #5
     75c:	1b03c103 	blne	f0b70 <startup-0x1ff0f490>
     760:	20000008 	andcs	r0, r0, r8
     764:	000d700d 	andeq	r7, sp, sp
     768:	03c20300 	biceq	r0, r2, #0, 6
     76c:	0000082b 	andeq	r0, r0, fp, lsr #16
     770:	ac0d0180 	stfges	f0, [sp], {128}	; 0x80
     774:	03000002 	movweq	r0, #2
     778:	083b03c3 	ldmdaeq	fp!, {r0, r1, r6, r7, r8, r9}
     77c:	01b00000 	movseq	r0, r0
     780:	0002d50d 	andeq	sp, r2, sp, lsl #10
     784:	03c40300 	biceq	r0, r4, #0, 6
     788:	0000084b 	andeq	r0, r0, fp, asr #16
     78c:	460e01d0 			; <UNDEFINED> instruction: 0x460e01d0
     790:	0300524d 	movweq	r5, #589	; 0x24d
     794:	030c03c5 	movweq	r0, #50117	; 0xc3c5
     798:	02000000 	andeq	r0, r0, #0
     79c:	00088f0d 	andeq	r8, r8, sp, lsl #30
     7a0:	03c60300 	biceq	r0, r6, #0, 6
     7a4:	0000030c 	andeq	r0, r0, ip, lsl #6
     7a8:	750d0204 	strvc	r0, [sp, #-516]	; 0xfffffdfc
     7ac:	03000003 	movweq	r0, #3
     7b0:	030103c7 	movweq	r0, #5063	; 0x13c7
     7b4:	02080000 	andeq	r0, r8, #0
     7b8:	000b640d 	andeq	r6, fp, sp, lsl #8
     7bc:	03c80300 	biceq	r0, r8, #0, 6
     7c0:	0000030c 	andeq	r0, r0, ip, lsl #6
     7c4:	7f0d020c 	svcvc	0x000d020c
     7c8:	03000003 	movweq	r0, #3
     7cc:	030103c9 	movweq	r0, #5065	; 0x13c9
     7d0:	02100000 	andseq	r0, r0, #0
     7d4:	000bd10d 	andeq	sp, fp, sp, lsl #2
     7d8:	03ca0300 	biceq	r0, sl, #0, 6
     7dc:	0000030c 	andeq	r0, r0, ip, lsl #6
     7e0:	ff0d0214 			; <UNDEFINED> instruction: 0xff0d0214
     7e4:	03000002 	movweq	r0, #2
     7e8:	030103cb 	movweq	r0, #5067	; 0x13cb
     7ec:	02180000 	andseq	r0, r8, #0
     7f0:	000bd20d 	andeq	sp, fp, sp, lsl #4
     7f4:	03cc0300 	biceq	r0, ip, #0, 6
     7f8:	0000030c 	andeq	r0, r0, ip, lsl #6
     7fc:	090d021c 	stmdbeq	sp, {r2, r3, r4, r9}
     800:	03000003 	movweq	r0, #3
     804:	05d303cd 	ldrbeq	r0, [r3, #973]	; 0x3cd
     808:	02200000 	eoreq	r0, r0, #0
     80c:	0009160d 	andeq	r1, r9, sp, lsl #12
     810:	03ce0300 	biceq	r0, lr, #0, 6
     814:	0000085b 	andeq	r0, r0, fp, asr r8
     818:	0f000240 	svceq	0x00000240
     81c:	00000301 	andeq	r0, r0, r1, lsl #6
     820:	0000082b 	andeq	r0, r0, fp, lsr #16
     824:	0002ca10 	andeq	ip, r2, r0, lsl sl
     828:	0f005700 	svceq	0x00005700
     82c:	0000065f 	andeq	r0, r0, pc, asr r6
     830:	0000083b 	andeq	r0, r0, fp, lsr r8
     834:	0002ca10 	andeq	ip, r2, r0, lsl sl
     838:	0f000200 	svceq	0x00000200
     83c:	000006a9 	andeq	r0, r0, r9, lsr #13
     840:	0000084b 	andeq	r0, r0, fp, asr #16
     844:	0002ca10 	andeq	ip, r2, r0, lsl sl
     848:	0f000100 	svceq	0x00000100
     84c:	00000301 	andeq	r0, r0, r1, lsl #6
     850:	0000085b 	andeq	r0, r0, fp, asr r8
     854:	0002ca10 	andeq	ip, r2, r0, lsl sl
     858:	0f000b00 	svceq	0x00000b00
     85c:	000006d9 	ldrdeq	r0, [r0], -r9
     860:	0000086b 	andeq	r0, r0, fp, ror #16
     864:	0002ca10 	andeq	ip, r2, r0, lsl sl
     868:	06001b00 	streq	r1, [r0], -r0, lsl #22
     86c:	000008f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     870:	e503cf03 	str	ip, [r3, #-3843]	; 0xfffff0fd
     874:	12000006 	andne	r0, r0, #6
     878:	05c30328 	strbeq	r0, [r3, #808]	; 0x328
     87c:	00000903 	andeq	r0, r0, r3, lsl #18
     880:	000cc10c 	andeq	ip, ip, ip, lsl #2
     884:	05c50300 	strbeq	r0, [r5, #768]	; 0x300
     888:	0000030c 	andeq	r0, r0, ip, lsl #6
     88c:	0ae10c00 	beq	ff843894 <GPIO_Ports+0xdf83fac0>
     890:	c6030000 	strgt	r0, [r3], -r0
     894:	00030c05 	andeq	r0, r3, r5, lsl #24
     898:	e90c0400 	stmdb	ip, {sl}
     89c:	03000006 	movweq	r0, #6
     8a0:	030c05c7 	movweq	r0, #50631	; 0xc5c7
     8a4:	0c080000 	stceq	0, cr0, [r8], {-0}
     8a8:	00000781 	andeq	r0, r0, r1, lsl #15
     8ac:	0c05c803 	stceq	8, cr12, [r5], {3}
     8b0:	0c000003 	stceq	0, cr0, [r0], {3}
     8b4:	52444913 	subpl	r4, r4, #311296	; 0x4c000
     8b8:	05c90300 	strbeq	r0, [r9, #768]	; 0x300
     8bc:	0000030c 	andeq	r0, r0, ip, lsl #6
     8c0:	444f1310 	strbmi	r1, [pc], #-784	; 8c8 <startup-0x1ffff738>
     8c4:	ca030052 	bgt	c0a14 <startup-0x1ff3f5ec>
     8c8:	00030c05 	andeq	r0, r3, r5, lsl #24
     8cc:	c30c1400 	movwgt	r1, #50176	; 0xc400
     8d0:	03000007 	movweq	r0, #7
     8d4:	02ec05cb 	rsceq	r0, ip, #851443712	; 0x32c00000
     8d8:	0c180000 	ldceq	0, cr0, [r8], {-0}
     8dc:	000007bd 			; <UNDEFINED> instruction: 0x000007bd
     8e0:	ec05cc03 	stc	12, cr12, [r5], {3}
     8e4:	1a000002 	bne	8f4 <startup-0x1ffff70c>
     8e8:	0006c90c 	andeq	ip, r6, ip, lsl #18
     8ec:	05cd0300 	strbeq	r0, [sp, #768]	; 0x300
     8f0:	0000030c 	andeq	r0, r0, ip, lsl #6
     8f4:	4641131c 			; <UNDEFINED> instruction: 0x4641131c
     8f8:	ce030052 	mcrgt	0, 0, r0, cr3, cr2, {2}
     8fc:	00091305 	andeq	r1, r9, r5, lsl #6
     900:	0f002000 	svceq	0x00002000
     904:	0000030c 	andeq	r0, r0, ip, lsl #6
     908:	00000913 	andeq	r0, r0, r3, lsl r9
     90c:	0002ca10 	andeq	ip, r2, r0, lsl sl
     910:	09000100 	stmdbeq	r0, {r8}
     914:	00000903 	andeq	r0, r0, r3, lsl #18
     918:	000c4106 	andeq	r4, ip, r6, lsl #2
     91c:	05cf0300 	strbeq	r0, [pc, #768]	; c24 <startup-0x1ffff3dc>
     920:	00000877 	andeq	r0, r0, r7, ror r8
     924:	3d070c17 	stccc	12, cr0, [r7, #-92]	; 0xffffffa4
     928:	000009b1 			; <UNDEFINED> instruction: 0x000009b1
     92c:	0006db18 	andeq	sp, r6, r8, lsl fp
     930:	e13f0700 	teq	pc, r0, lsl #14
     934:	00000002 	andeq	r0, r0, r2
     938:	00010918 	andeq	r0, r1, r8, lsl r9
     93c:	d1420700 	cmple	r2, r0, lsl #14
     940:	02000002 	andeq	r0, r0, #2
     944:	0005aa18 	andeq	sl, r5, r8, lsl sl
     948:	d1450700 	cmple	r5, r0, lsl #14
     94c:	03000002 	movweq	r0, #2
     950:	000c0718 	andeq	r0, ip, r8, lsl r7
     954:	d14a0700 	cmple	sl, r0, lsl #14
     958:	04000002 	streq	r0, [r0], #-2
     95c:	000c0f18 	andeq	r0, ip, r8, lsl pc
     960:	d14e0700 	cmple	lr, r0, lsl #14
     964:	05000002 	streq	r0, [r0, #-2]
     968:	00010018 	andeq	r0, r1, r8, lsl r0
     96c:	15510700 	ldrbne	r0, [r1, #-1792]	; 0xfffff900
     970:	06000006 	streq	r0, [r0], -r6
     974:	00035118 	andeq	r5, r3, r8, lsl r1
     978:	15540700 	ldrbne	r0, [r4, #-1792]	; 0xfffff900
     97c:	07000006 	streq	r0, [r0, -r6]
     980:	0009c118 	andeq	ip, r9, r8, lsl r1
     984:	15570700 	ldrbne	r0, [r7, #-1792]	; 0xfffff900
     988:	08000006 	stmdaeq	r0, {r1, r2}
     98c:	000a4d18 	andeq	r4, sl, r8, lsl sp
     990:	155a0700 	ldrbne	r0, [sl, #-1792]	; 0xfffff900
     994:	09000006 	stmdbeq	r0, {r1, r2}
     998:	00083a18 	andeq	r3, r8, r8, lsl sl
     99c:	155d0700 	ldrbne	r0, [sp, #-1792]	; 0xfffff900
     9a0:	0a000006 	beq	9c0 <startup-0x1ffff640>
     9a4:	000db718 	andeq	fp, sp, r8, lsl r7
     9a8:	15600700 	strbne	r0, [r0, #-1792]!	; 0xfffff900
     9ac:	0b000006 	bleq	9cc <startup-0x1ffff634>
     9b0:	00730700 	rsbseq	r0, r3, r0, lsl #14
     9b4:	62070000 	andvs	r0, r7, #0
     9b8:	00000924 	andeq	r0, r0, r4, lsr #18
     9bc:	67070e17 	smladvs	r7, r7, lr, r0
     9c0:	00000a31 	andeq	r0, r0, r1, lsr sl
     9c4:	000aac18 	andeq	sl, sl, r8, lsl ip
     9c8:	e1690700 	cmn	r9, r0, lsl #14
     9cc:	00000002 	andeq	r0, r0, r2
     9d0:	00008318 	andeq	r8, r0, r8, lsl r3
     9d4:	e16d0700 	cmn	sp, r0, lsl #14
     9d8:	02000002 	andeq	r0, r0, #2
     9dc:	0008a318 	andeq	sl, r8, r8, lsl r3
     9e0:	e1710700 	cmn	r1, r0, lsl #14
     9e4:	04000002 	streq	r0, [r0], #-2
     9e8:	000b9f18 	andeq	r9, fp, r8, lsl pc
     9ec:	e1760700 	cmn	r6, r0, lsl #14
     9f0:	06000002 	streq	r0, [r0], -r2
     9f4:	00033818 	andeq	r3, r3, r8, lsl r8
     9f8:	e17b0700 	cmn	fp, r0, lsl #14
     9fc:	08000002 	stmdaeq	r0, {r1}
     a00:	0008fc18 	andeq	pc, r8, r8, lsl ip	; <UNPREDICTABLE>
     a04:	d17e0700 	cmnle	lr, r0, lsl #14
     a08:	0a000002 	beq	a18 <startup-0x1ffff5e8>
     a0c:	000c1718 	andeq	r1, ip, r8, lsl r7
     a10:	d1800700 	orrle	r0, r0, r0, lsl #14
     a14:	0b000002 	bleq	a24 <startup-0x1ffff5dc>
     a18:	00017418 	andeq	r7, r1, r8, lsl r4
     a1c:	d1830700 	orrle	r0, r3, r0, lsl #14
     a20:	0c000002 	stceq	0, cr0, [r0], {2}
     a24:	00043518 	andeq	r3, r4, r8, lsl r5
     a28:	15860700 	strne	r0, [r6, #1792]	; 0x700
     a2c:	0d000006 	stceq	0, cr0, [r0, #-24]	; 0xffffffe8
     a30:	0d9c0700 	ldceq	7, cr0, [ip]
     a34:	88070000 	stmdahi	r7, {}	; <UNPREDICTABLE>
     a38:	000009bc 			; <UNDEFINED> instruction: 0x000009bc
     a3c:	8d071417 	cfstrshi	mvf1, [r7, #-92]	; 0xffffffa4
     a40:	00000a8d 	andeq	r0, r0, sp, lsl #21
     a44:	00036f18 	andeq	r6, r3, r8, lsl pc
     a48:	018f0700 	orreq	r0, pc, r0, lsl #14
     a4c:	00000003 	andeq	r0, r0, r3
     a50:	00049918 	andeq	r9, r4, r8, lsl r9
     a54:	01920700 	orrseq	r0, r2, r0, lsl #14
     a58:	04000003 	streq	r0, [r0], #-3
     a5c:	45444919 	strbmi	r4, [r4, #-2329]	; 0xfffff6e7
     a60:	d1950700 	orrsle	r0, r5, r0, lsl #14
     a64:	08000002 	stmdaeq	r0, {r1}
     a68:	52545219 	subspl	r5, r4, #-1879048191	; 0x90000001
     a6c:	d1990700 	orrsle	r0, r9, r0, lsl #14
     a70:	09000002 	stmdbeq	r0, {r1}
     a74:	434c4419 	movtmi	r4, #50201	; 0xc419
     a78:	d19d0700 	orrsle	r0, sp, r0, lsl #14
     a7c:	0a000002 	beq	a8c <startup-0x1ffff574>
     a80:	001fad18 	andseq	sl, pc, r8, lsl sp	; <UNPREDICTABLE>
     a84:	8da10700 	stchi	7, cr0, [r1]
     a88:	0b00000a 	bleq	ab8 <startup-0x1ffff548>
     a8c:	02d10f00 	sbcseq	r0, r1, #0, 30
     a90:	0a9d0000 	beq	fe740a98 <GPIO_Ports+0xde73ccc4>
     a94:	ca100000 	bgt	400a9c <startup-0x1fbff564>
     a98:	07000002 	streq	r0, [r0, -r2]
     a9c:	05590700 	ldrbeq	r0, [r9, #-1792]	; 0xfffff900
     aa0:	a3070000 	movwge	r0, #28672	; 0x7000
     aa4:	00000a3c 	andeq	r0, r0, ip, lsr sl
     aa8:	a8071417 	stmdage	r7, {r0, r1, r2, r4, sl, ip}
     aac:	00000b05 	andeq	r0, r0, r5, lsl #22
     ab0:	00036f18 	andeq	r6, r3, r8, lsl pc
     ab4:	01aa0700 			; <UNDEFINED> instruction: 0x01aa0700
     ab8:	00000003 	andeq	r0, r0, r3
     abc:	00049918 	andeq	r9, r4, r8, lsl r9
     ac0:	01ad0700 			; <UNDEFINED> instruction: 0x01ad0700
     ac4:	04000003 	streq	r0, [r0], #-3
     ac8:	45444919 	strbmi	r4, [r4, #-2329]	; 0xfffff6e7
     acc:	d1b00700 	lslsle	r0, r0, #14
     ad0:	08000002 	stmdaeq	r0, {r1}
     ad4:	52545219 	subspl	r5, r4, #-1879048191	; 0x90000001
     ad8:	d1b40700 			; <UNDEFINED> instruction: 0xd1b40700
     adc:	09000002 	stmdbeq	r0, {r1}
     ae0:	434c4419 	movtmi	r4, #50201	; 0xc419
     ae4:	d1b80700 			; <UNDEFINED> instruction: 0xd1b80700
     ae8:	0a000002 	beq	af8 <startup-0x1ffff508>
     aec:	001fad18 	andseq	sl, pc, r8, lsl sp	; <UNPREDICTABLE>
     af0:	8dbb0700 	ldchi	7, cr0, [fp]
     af4:	0b00000a 	bleq	b24 <startup-0x1ffff4dc>
     af8:	494d4619 	stmdbmi	sp, {r0, r3, r4, r9, sl, lr}^
     afc:	d1be0700 			; <UNDEFINED> instruction: 0xd1be0700
     b00:	13000002 	movwne	r0, #2
     b04:	09590700 	ldmdbeq	r9, {r8, r9, sl}^
     b08:	c1070000 	mrsgt	r0, (UNDEF: 7)
     b0c:	00000aa8 	andeq	r0, r0, r8, lsr #21
     b10:	1a080417 	bne	201b74 <startup-0x1fdfe48c>
     b14:	00000b72 	andeq	r0, r0, r2, ror fp
     b18:	0008b81a 	andeq	fp, r8, sl, lsl r8
     b1c:	011c0800 	tsteq	ip, r0, lsl #16
     b20:	04000003 	streq	r0, [r0], #-3
     b24:	1a001808 	bne	6b4c <startup-0x1fff94b4>
     b28:	0000013d 	andeq	r0, r0, sp, lsr r1
     b2c:	03012008 	movweq	r2, #4104	; 0x1008
     b30:	0a040000 	beq	100b38 <startup-0x1feff4c8>
     b34:	491b000e 	ldmdbmi	fp, {r1, r2, r3}
     b38:	24080044 	strcs	r0, [r8], #-68	; 0xffffffbc
     b3c:	00000301 	andeq	r0, r0, r1, lsl #6
     b40:	00070704 	andeq	r0, r7, r4, lsl #14
     b44:	00012e1a 	andeq	r2, r1, sl, lsl lr
     b48:	01280800 			; <UNDEFINED> instruction: 0x01280800
     b4c:	04000003 	streq	r0, [r0], #-3
     b50:	1a000601 	bne	235c <startup-0x1fffdca4>
     b54:	00000787 	andeq	r0, r0, r7, lsl #15
     b58:	03012b08 	movweq	r2, #6920	; 0x1b08
     b5c:	03040000 	movweq	r0, #16384	; 0x4000
     b60:	0e1a0003 	cdpeq	0, 1, cr0, cr10, cr3, {0}
     b64:	08000009 	stmdaeq	r0, {r0, r3}
     b68:	0003012e 	andeq	r0, r3, lr, lsr #2
     b6c:	00030400 	andeq	r0, r3, r0, lsl #8
     b70:	92070000 	andls	r0, r7, #0
     b74:	08000004 	stmdaeq	r0, {r2}
     b78:	000b102f 	andeq	r1, fp, pc, lsr #32
     b7c:	08041700 	stmdaeq	r4, {r8, r9, sl, ip}
     b80:	000bc134 	andeq	ip, fp, r4, lsr r1
     b84:	090d1a00 	stmdbeq	sp, {r9, fp, ip}
     b88:	36080000 	strcc	r0, [r8], -r0
     b8c:	00000301 	andeq	r0, r0, r1, lsl #6
     b90:	001f0104 	andseq	r0, pc, r4, lsl #2
     b94:	5254521b 	subspl	r5, r4, #-1342177279	; 0xb0000001
     b98:	01390800 	teqeq	r9, r0, lsl #16
     b9c:	04000003 	streq	r0, [r0], #-3
     ba0:	1b001e01 	blne	83ac <startup-0x1fff7c54>
     ba4:	00454449 	subeq	r4, r5, r9, asr #8
     ba8:	03013c08 	movweq	r3, #7176	; 0x1c08
     bac:	01040000 	mrseq	r0, (UNDEF: 4)
     bb0:	491b001d 	ldmdbmi	fp, {r0, r2, r3, r4}
     bb4:	3e080044 	cdpcc	0, 0, cr0, cr8, cr4, {2}
     bb8:	00000301 	andeq	r0, r0, r1, lsl #6
     bbc:	00001d04 	andeq	r1, r0, r4, lsl #26
     bc0:	0c6e0700 	stcleq	7, cr0, [lr], #-0
     bc4:	3f080000 	svccc	0x00080000
     bc8:	00000b7d 	andeq	r0, r0, sp, ror fp
     bcc:	36090417 			; <UNDEFINED> instruction: 0x36090417
     bd0:	00000c05 	andeq	r0, r0, r5, lsl #24
     bd4:	00092618 	andeq	r2, r9, r8, lsl r6
     bd8:	d1380900 	teqle	r8, r0, lsl #18
     bdc:	00000002 	andeq	r0, r0, r2
     be0:	0003eb18 	andeq	lr, r3, r8, lsl fp
     be4:	d13d0900 	teqle	sp, r0, lsl #18
     be8:	01000002 	tsteq	r0, r2
     bec:	00093618 	andeq	r3, r9, r8, lsl r6
     bf0:	d1420900 	cmple	r2, r0, lsl #18
     bf4:	02000002 	andeq	r0, r0, #2
     bf8:	0001cb18 	andeq	ip, r1, r8, lsl fp
     bfc:	15470900 	strbne	r0, [r7, #-2304]	; 0xfffff700
     c00:	03000006 	movweq	r0, #6
     c04:	0d000700 	stceq	7, cr0, [r0, #-0]
     c08:	4a090000 	bmi	240c10 <startup-0x1fdbf3f0>
     c0c:	00000bcc 	andeq	r0, r0, ip, asr #23
     c10:	7101071c 	tstvc	r1, ip, lsl r7
     c14:	0a000002 	beq	c24 <startup-0x1ffff3dc>
     c18:	000c3642 	andeq	r3, ip, r2, asr #12
     c1c:	06aa0400 	strteq	r0, [sl], r0, lsl #8
     c20:	04000000 	streq	r0, [r0], #-0
     c24:	0000058a 	andeq	r0, r0, sl, lsl #11
     c28:	02080401 	andeq	r0, r8, #16777216	; 0x1000000
     c2c:	04020000 	streq	r0, [r2], #-0
     c30:	0000022d 	andeq	r0, r0, sp, lsr #4
     c34:	c2070003 	andgt	r0, r7, #3
     c38:	0a00000a 	beq	c68 <startup-0x1ffff398>
     c3c:	000c1047 	andeq	r1, ip, r7, asr #32
     c40:	01071c00 	tsteq	r7, r0, lsl #24
     c44:	00000271 	andeq	r0, r0, r1, ror r2
     c48:	0c5b4f0a 	mrrceq	15, 0, r4, fp, cr10
     c4c:	1d040000 	stcne	0, cr0, [r4, #-0]
     c50:	00000003 	andeq	r0, r0, r3
     c54:	00027204 	andeq	r7, r2, r4, lsl #4
     c58:	07000100 	streq	r0, [r0, -r0, lsl #2]
     c5c:	00000112 	andeq	r0, r0, r2, lsl r1
     c60:	0c41520a 	sfmeq	f5, 2, [r1], {10}
     c64:	071c0000 	ldreq	r0, [ip, -r0]
     c68:	00027101 	andeq	r7, r2, r1, lsl #2
     c6c:	8c5a0a00 	mrrchi	10, 0, r0, sl, cr0
     c70:	0400000c 	streq	r0, [r0], #-12
     c74:	00000418 	andeq	r0, r0, r8, lsl r4
     c78:	073d0400 	ldreq	r0, [sp, -r0, lsl #8]!
     c7c:	04010000 	streq	r0, [r1], #-0
     c80:	00000de4 	andeq	r0, r0, r4, ror #27
     c84:	07c90402 	strbeq	r0, [r9, r2, lsl #8]
     c88:	00030000 	andeq	r0, r3, r0
     c8c:	000b3707 	andeq	r3, fp, r7, lsl #14
     c90:	665f0a00 	ldrbvs	r0, [pc], -r0, lsl #20
     c94:	1c00000c 	stcne	0, cr0, [r0], {12}
     c98:	02710107 	rsbseq	r0, r1, #-1073741823	; 0xc0000001
     c9c:	6e0a0000 	cdpvs	0, 0, cr0, cr10, cr0, {0}
     ca0:	00000cb7 			; <UNDEFINED> instruction: 0x00000cb7
     ca4:	0000ad04 	andeq	sl, r0, r4, lsl #26
     ca8:	e6040000 	str	r0, [r4], -r0
     cac:	0100000c 	tsteq	r0, ip
     cb0:	0001ac04 	andeq	sl, r1, r4, lsl #24
     cb4:	07000200 	streq	r0, [r0, -r0, lsl #4]
     cb8:	000003bc 			; <UNDEFINED> instruction: 0x000003bc
     cbc:	0c97720a 	lfmeq	f7, 4, [r7], {10}
     cc0:	08170000 	ldmdaeq	r7, {}	; <UNPREDICTABLE>
     cc4:	0d07840a 	cfstrseq	mvf8, [r7, #-40]	; 0xffffffd8
     cc8:	5b180000 	blpl	600cd0 <startup-0x1f9ff330>
     ccc:	0a00000b 	beq	d00 <startup-0x1ffff300>
     cd0:	00030186 	andeq	r0, r3, r6, lsl #3
     cd4:	86180000 	ldrhi	r0, [r8], -r0
     cd8:	0a00000a 	beq	d08 <startup-0x1ffff2f8>
     cdc:	000c3689 	andeq	r3, ip, r9, lsl #13
     ce0:	77180400 	ldrvc	r0, [r8, -r0, lsl #8]
     ce4:	0a000008 	beq	d0c <startup-0x1ffff2f4>
     ce8:	000c8c8c 	andeq	r8, ip, ip, lsl #25
     cec:	27180500 	ldrcs	r0, [r8, -r0, lsl #10]
     cf0:	0a000007 	beq	d14 <startup-0x1ffff2ec>
     cf4:	000c5b8f 	andeq	r5, ip, pc, lsl #23
     cf8:	8c180600 	ldchi	6, cr0, [r8], {-0}
     cfc:	0a00000b 	beq	d30 <startup-0x1ffff2d0>
     d00:	000cb792 	muleq	ip, r2, r7
     d04:	07000700 	streq	r0, [r0, -r0, lsl #14]
     d08:	00000280 	andeq	r0, r0, r0, lsl #5
     d0c:	0cc2940a 	cfstrdeq	mvd9, [r2], {10}
     d10:	041d0000 	ldreq	r0, [sp], #-0
     d14:	0d310f02 	ldceq	15, cr0, [r1, #-8]!
     d18:	931e0000 	tstls	lr, #0
     d1c:	02000000 	andeq	r0, r0, #0
     d20:	000d3110 	andeq	r3, sp, r0, lsl r1
     d24:	0c3a1e00 	ldceq	14, cr1, [sl], #-0
     d28:	11020000 	mrsne	r0, (UNDEF: 2)
     d2c:	00000bc1 	andeq	r0, r0, r1, asr #23
     d30:	02e10f00 	rsceq	r0, r1, #0, 30
     d34:	0d410000 	stcleq	0, cr0, [r1, #-0]
     d38:	ca100000 	bgt	400d40 <startup-0x1fbff2c0>
     d3c:	01000002 	tsteq	r0, r2
     d40:	097e0700 	ldmdbeq	lr!, {r8, r9, sl}^
     d44:	12020000 	andne	r0, r2, #0
     d48:	00000d12 	andeq	r0, r0, r2, lsl sp
     d4c:	14021017 	strne	r1, [r2], #-23	; 0xffffffe9
     d50:	00000d85 	andeq	r0, r0, r5, lsl #27
     d54:	0001c318 	andeq	ip, r1, r8, lsl r3
     d58:	96150200 	ldrls	r0, [r5], -r0, lsl #4
     d5c:	0000000d 	andeq	r0, r0, sp
     d60:	000c3a18 	andeq	r3, ip, r8, lsl sl
     d64:	c1160200 	tstgt	r6, r0, lsl #4
     d68:	0400000b 	streq	r0, [r0], #-11
     d6c:	0007d918 	andeq	sp, r7, r8, lsl r9
     d70:	c1170200 	tstgt	r7, r0, lsl #4
     d74:	0800000b 	stmdaeq	r0, {r0, r1, r3}
     d78:	0000fa18 	andeq	pc, r0, r8, lsl sl	; <UNPREDICTABLE>
     d7c:	15180200 	ldrne	r0, [r8, #-512]	; 0xfffffe00
     d80:	0c000006 	stceq	0, cr0, [r0], {6}
     d84:	0d901f00 	ldceq	15, cr1, [r0]
     d88:	90200000 	eorls	r0, r0, r0
     d8c:	0000000d 	andeq	r0, r0, sp
     d90:	0b050421 	bleq	141e1c <startup-0x1febe1e4>
     d94:	04210000 	strteq	r0, [r1], #-0
     d98:	00000d85 	andeq	r0, r0, r5, lsl #27
     d9c:	000ae807 	andeq	lr, sl, r7, lsl #16
     da0:	4c190200 	lfmmi	f0, 4, [r9], {-0}
     da4:	0f00000d 	svceq	0x0000000d
     da8:	00000d9c 	muleq	r0, ip, sp
     dac:	00000db7 			; <UNDEFINED> instruction: 0x00000db7
     db0:	0002ca10 	andeq	ip, r2, r0, lsl sl
     db4:	22000d00 	andcs	r0, r0, #0, 26
     db8:	000007a5 	andeq	r0, r0, r5, lsr #15
     dbc:	0da71e02 	stceq	14, cr1, [r7, #8]!
     dc0:	03050000 	movweq	r0, #20480	; 0x5000
     dc4:	20003cbc 			; <UNDEFINED> instruction: 0x20003cbc
     dc8:	0003a322 	andeq	sl, r3, r2, lsr #6
     dcc:	d1230200 			; <UNDEFINED> instruction: 0xd1230200
     dd0:	05000002 	streq	r0, [r0, #-2]
     dd4:	003d9c03 	eorseq	r9, sp, r3, lsl #24
     dd8:	00472220 	subeq	r2, r7, r0, lsr #4
     ddc:	24020000 	strcs	r0, [r2], #-0
     de0:	00000301 	andeq	r0, r0, r1, lsl #6
     de4:	3cb80305 	ldccc	3, cr0, [r8], #20
     de8:	37232000 	strcc	r2, [r3, -r0]!
     dec:	0200000a 	andeq	r0, r0, #10
     df0:	02d1015a 	sbcseq	r0, r1, #-2147483626	; 0x80000016
     df4:	07d20000 	ldrbeq	r0, [r2, r0]
     df8:	00222000 	eoreq	r2, r2, r0
     dfc:	9c010000 	stcls	0, cr0, [r1], {-0}
     e00:	00000e31 	andeq	r0, r0, r1, lsr lr
     e04:	67736d24 	ldrbvs	r6, [r3, -r4, lsr #26]!
     e08:	015a0200 	cmpeq	sl, r0, lsl #4
     e0c:	00000d90 	muleq	r0, r0, sp
     e10:	256c9102 	strbcs	r9, [ip, #-258]!	; 0xfffffefe
     e14:	02006469 	andeq	r6, r0, #1761607680	; 0x69000000
     e18:	02e1015b 	rsceq	r0, r1, #-1073741802	; 0xc0000016
     e1c:	91020000 	mrsls	r0, (UNDEF: 2)
     e20:	0cad2672 	stceq	6, cr2, [sp], #456	; 0x1c8
     e24:	5c020000 	stcpl	0, cr0, [r2], {-0}
     e28:	000e3101 	andeq	r3, lr, r1, lsl #2
     e2c:	74910200 	ldrvc	r0, [r1], #512	; 0x200
     e30:	d1042100 	mrsle	r2, (UNDEF: 20)
     e34:	23000002 	movwcs	r0, #2
     e38:	00000c82 	andeq	r0, r0, r2, lsl #25
     e3c:	d1014702 	tstle	r1, r2, lsl #14
     e40:	98000002 	stmdals	r0, {r1}
     e44:	3a200007 	bcc	800e68 <startup-0x1f7ff198>
     e48:	01000000 	mrseq	r0, (UNDEF: 0)
     e4c:	000ebb9c 	muleq	lr, ip, fp
     e50:	736d2400 	cmnvc	sp, #0, 8
     e54:	47020067 	strmi	r0, [r2, -r7, rrx]
     e58:	000d9001 	andeq	r9, sp, r1
     e5c:	6c910200 	lfmvs	f0, 4, [r1], {0}
     e60:	00071d27 	andeq	r1, r7, r7, lsr #26
     e64:	01470200 	mrseq	r0, (UNDEF: 103)
     e68:	00000e31 	andeq	r0, r0, r1, lsr lr
     e6c:	27689102 	strbcs	r9, [r8, -r2, lsl #2]!
     e70:	00000854 	andeq	r0, r0, r4, asr r8
     e74:	31014702 	tstcc	r1, r2, lsl #14
     e78:	0200000e 	andeq	r0, r0, #14
     e7c:	51276491 			; <UNDEFINED> instruction: 0x51276491
     e80:	02000000 	andeq	r0, r0, #0
     e84:	0ebb0147 	frdeqem	f0, f3, f7
     e88:	91020000 	mrsls	r0, (UNDEF: 2)
     e8c:	00582760 	subseq	r2, r8, r0, ror #14
     e90:	47020000 	strmi	r0, [r2, -r0]
     e94:	000ebb01 	andeq	fp, lr, r1, lsl #22
     e98:	00910200 	addseq	r0, r1, r0, lsl #4
     e9c:	000cba27 	andeq	fp, ip, r7, lsr #20
     ea0:	01470200 	mrseq	r0, (UNDEF: 103)
     ea4:	00000e31 	andeq	r0, r0, r1, lsr lr
     ea8:	26049102 	strcs	r9, [r4], -r2, lsl #2
     eac:	00000cad 	andeq	r0, r0, sp, lsr #25
     eb0:	31014802 	tstcc	r1, r2, lsl #16
     eb4:	0200000e 	andeq	r0, r0, #14
     eb8:	21007491 			; <UNDEFINED> instruction: 0x21007491
     ebc:	0002e104 	andeq	lr, r2, r4, lsl #2
     ec0:	005f2800 	subseq	r2, pc, r0, lsl #16
     ec4:	ec020000 	stc	0, cr0, [r2], {-0}
     ec8:	000002d1 	ldrdeq	r0, [r0], -r1
     ecc:	200005dc 	ldrdcs	r0, [r0], -ip
     ed0:	000001bc 			; <UNDEFINED> instruction: 0x000001bc
     ed4:	0f149c01 	svceq	0x00149c01
     ed8:	98290000 	stmdals	r9!, {}	; <UNPREDICTABLE>
     edc:	02000005 	andeq	r0, r0, #5
     ee0:	0009b1ed 	andeq	fp, r9, sp, ror #3
     ee4:	58910200 	ldmpl	r1, {r9}
     ee8:	00014729 	andeq	r4, r1, r9, lsr #14
     eec:	05ee0200 	strbeq	r0, [lr, #512]!	; 0x200
     ef0:	0200000c 	andeq	r0, r0, #12
     ef4:	73295491 			; <UNDEFINED> instruction: 0x73295491
     ef8:	0200000a 	andeq	r0, r0, #10
     efc:	000d07ef 	andeq	r0, sp, pc, ror #15
     f00:	4c910200 	lfmmi	f0, 4, [r1], {0}
     f04:	00057a26 	andeq	r7, r5, r6, lsr #20
     f08:	01370200 	teqeq	r7, r0, lsl #4
     f0c:	000002d1 	ldrdeq	r0, [r0], -r1
     f10:	00679102 	rsbeq	r9, r7, r2, lsl #2
     f14:	0001e42a 	andeq	lr, r1, sl, lsr #8
     f18:	44db0200 	ldrbmi	r0, [fp], #512	; 0x200
     f1c:	98200005 	stmdals	r0!, {r0, r2}
     f20:	01000000 	mrseq	r0, (UNDEF: 0)
     f24:	000f5a9c 	muleq	pc, ip, sl	; <UNPREDICTABLE>
     f28:	05502b00 	ldrbeq	r2, [r0, #-2816]	; 0xfffff500
     f2c:	00762000 	rsbseq	r2, r6, r0
     f30:	fa290000 	blx	a40f38 <startup-0x1f5bf0c8>
     f34:	0200000b 	andeq	r0, r0, #11
     f38:	0002d1de 	ldrdeq	sp, [r2], -lr
     f3c:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
     f40:	00056a2b 	andeq	r6, r5, fp, lsr #20
     f44:	00004a20 	andeq	r4, r0, r0, lsr #20
     f48:	03682900 	cmneq	r8, #0, 18
     f4c:	e2020000 	and	r0, r2, #0
     f50:	00000b72 	andeq	r0, r0, r2, ror fp
     f54:	00709102 	rsbseq	r9, r0, r2, lsl #2
     f58:	c52a0000 	strgt	r0, [sl, #-0]!
     f5c:	0200000d 	andeq	r0, r0, #13
     f60:	000410bd 	strheq	r1, [r4], -sp
     f64:	00013420 	andeq	r3, r1, r0, lsr #8
     f68:	ad9c0100 	ldfges	f0, [ip]
     f6c:	2c00000f 	stccs	0, cr0, [r0], {15}
     f70:	02004449 	andeq	r4, r0, #1224736768	; 0x49000000
     f74:	0002e1bd 			; <UNDEFINED> instruction: 0x0002e1bd
     f78:	66910200 	ldrvs	r0, [r1], r0, lsl #4
     f7c:	00042a2b 	andeq	r2, r4, fp, lsr #20
     f80:	0000fc20 	andeq	pc, r0, r0, lsr #24
     f84:	0bfa2900 	bleq	ffe8b38c <GPIO_Ports+0xdfe875b8>
     f88:	c1020000 	mrsgt	r0, (UNDEF: 2)
     f8c:	000002d1 	ldrdeq	r0, [r0], -r1
     f90:	2b6f9102 	blcs	1be53a0 <startup-0x1e41ac60>
     f94:	20000448 	andcs	r0, r0, r8, asr #8
     f98:	000000c8 	andeq	r0, r0, r8, asr #1
     f9c:	00036829 	andeq	r6, r3, r9, lsr #16
     fa0:	72c50200 	sbcvc	r0, r5, #0, 4
     fa4:	0200000b 	andeq	r0, r0, #11
     fa8:	00006891 	muleq	r0, r1, r8
     fac:	01bb2a00 			; <UNDEFINED> instruction: 0x01bb2a00
     fb0:	a8020000 	stmdage	r2, {}	; <UNPREDICTABLE>
     fb4:	200003a4 	andcs	r0, r0, r4, lsr #7
     fb8:	0000006c 	andeq	r0, r0, ip, rrx
     fbc:	0fdb9c01 	svceq	0x00db9c01
     fc0:	c62b0000 	strtgt	r0, [fp], -r0
     fc4:	38200003 	stmdacc	r0!, {r0, r1}
     fc8:	29000000 	stmdbcs	r0, {}	; <UNPREDICTABLE>
     fcc:	00000249 	andeq	r0, r0, r9, asr #4
     fd0:	0b05ae02 	bleq	16c7e0 <startup-0x1fe93820>
     fd4:	91020000 	mrsls	r0, (UNDEF: 2)
     fd8:	2d000064 	stccs	0, cr0, [r0, #-400]	; 0xfffffe70
     fdc:	0000023a 	andeq	r0, r0, sl, lsr r2
     fe0:	02d18a02 	sbcseq	r8, r1, #8192	; 0x2000
     fe4:	02fa0000 	rscseq	r0, sl, #0
     fe8:	00aa2000 	adceq	r2, sl, r0
     fec:	9c010000 	stcls	0, cr0, [r1], {-0}
     ff0:	0000101b 	andeq	r1, r0, fp, lsl r0
     ff4:	67736d2c 	ldrbvs	r6, [r3, -ip, lsr #26]!
     ff8:	1b8a0200 	blne	fe281800 <GPIO_Ports+0xde27da2c>
     ffc:	02000010 	andeq	r0, r0, #16
    1000:	0a2b6c91 	beq	adc24c <startup-0x1f523db4>
    1004:	72200003 	eorvc	r0, r0, #3
    1008:	29000000 	stmdbcs	r0, {}	; <UNPREDICTABLE>
    100c:	00000368 	andeq	r0, r0, r8, ror #6
    1010:	0b728e02 	bleq	1ca4820 <startup-0x1e35b7e0>
    1014:	91020000 	mrsls	r0, (UNDEF: 2)
    1018:	21000074 	tstcs	r0, r4, ror r0
    101c:	000a9d04 	andeq	r9, sl, r4, lsl #26
    1020:	09622a00 	stmdbeq	r2!, {r9, fp, sp}^
    1024:	81020000 	mrshi	r0, (UNDEF: 2)
    1028:	200002c8 	andcs	r0, r0, r8, asr #5
    102c:	00000032 	andeq	r0, r0, r2, lsr r0
    1030:	104f9c01 	subne	r9, pc, r1, lsl #24
    1034:	ce2b0000 	cdpgt	0, 2, cr0, cr11, cr0, {0}
    1038:	24200002 	strtcs	r0, [r0], #-2
    103c:	29000000 	stmdbcs	r0, {}	; <UNPREDICTABLE>
    1040:	00000bfa 	strdeq	r0, [r0], -sl
    1044:	02d18202 	sbcseq	r8, r1, #536870912	; 0x20000000
    1048:	91020000 	mrsls	r0, (UNDEF: 2)
    104c:	2a000077 	bcs	1230 <startup-0x1fffedd0>
    1050:	000000d8 	ldrdeq	r0, [r0], -r8
    1054:	02787302 	rsbseq	r7, r8, #134217728	; 0x8000000
    1058:	00502000 	subseq	r2, r0, r0
    105c:	9c010000 	stcls	0, cr0, [r1], {-0}
    1060:	0000108b 	andeq	r1, r0, fp, lsl #1
    1064:	000bfa2e 	andeq	pc, fp, lr, lsr #20
    1068:	d1730200 	cmnle	r3, r0, lsl #4
    106c:	02000002 	andeq	r0, r0, #2
    1070:	8c2b6791 	stchi	7, cr6, [fp], #-580	; 0xfffffdbc
    1074:	2e200002 	cdpcs	0, 2, cr0, cr0, cr2, {0}
    1078:	29000000 	stmdbcs	r0, {}	; <UNPREDICTABLE>
    107c:	0000049f 	muleq	r0, pc, r4	; <UNPREDICTABLE>
    1080:	0a317802 	beq	c5f090 <startup-0x1f3a0f70>
    1084:	91020000 	mrsls	r0, (UNDEF: 2)
    1088:	2d000068 	stccs	0, cr0, [r0, #-416]	; 0xfffffe60
    108c:	00000c26 	andeq	r0, r0, r6, lsr #24
    1090:	02d14b02 	sbcseq	r4, r1, #2048	; 0x800
    1094:	014c0000 	mrseq	r0, (UNDEF: 76)
    1098:	012c2000 			; <UNDEFINED> instruction: 0x012c2000
    109c:	9c010000 	stcls	0, cr0, [r1], {-0}
    10a0:	000010ff 	strdeq	r1, [r0], -pc	; <UNPREDICTABLE>
    10a4:	0000682e 	andeq	r6, r0, lr, lsr #16
    10a8:	964b0200 	strbls	r0, [fp], -r0, lsl #4
    10ac:	0200000d 	andeq	r0, r0, #13
    10b0:	3a2e6491 	bcc	b9a2fc <startup-0x1f465d04>
    10b4:	0200000c 	andeq	r0, r0, #12
    10b8:	0010ff4b 	andseq	pc, r0, fp, asr #30
    10bc:	60910200 	addsvs	r0, r1, r0, lsl #4
    10c0:	0007d92e 	andeq	sp, r7, lr, lsr #18
    10c4:	ff4b0200 			; <UNDEFINED> instruction: 0xff4b0200
    10c8:	02000010 	andeq	r0, r0, #16
    10cc:	582b5c91 	stmdapl	fp!, {r0, r4, r7, sl, fp, ip, lr}
    10d0:	02200001 	eoreq	r0, r0, #1
    10d4:	29000001 	stmdbcs	r0, {r0}
    10d8:	00000bfa 	strdeq	r0, [r0], -sl
    10dc:	02d14c02 	sbcseq	r4, r1, #512	; 0x200
    10e0:	91020000 	mrsls	r0, (UNDEF: 2)
    10e4:	017e2b6f 	cmneq	lr, pc, ror #22
    10e8:	007c2000 	rsbseq	r2, ip, r0
    10ec:	68290000 	stmdavs	r9!, {}	; <UNPREDICTABLE>
    10f0:	02000003 	andeq	r0, r0, #3
    10f4:	000b7251 	andeq	r7, fp, r1, asr r2
    10f8:	68910200 	ldmvs	r1, {r9}
    10fc:	21000000 	mrscs	r0, (UNDEF: 0)
    1100:	000bc104 	andeq	ip, fp, r4, lsl #2
    1104:	03d22a00 	bicseq	r2, r2, #0, 20
    1108:	32020000 	andcc	r0, r2, #0
    110c:	200000b4 	strhcs	r0, [r0], -r4
    1110:	00000098 	muleq	r0, r8, r0
    1114:	11539c01 	cmpne	r3, r1, lsl #24
    1118:	fa2e0000 	blx	b81120 <startup-0x1f47eee0>
    111c:	0200000b 	andeq	r0, r0, #11
    1120:	0002d132 	andeq	sp, r2, r2, lsr r1
    1124:	5f910200 	svcpl	0x00910200
    1128:	00079929 	andeq	r9, r7, r9, lsr #18
    112c:	41360200 	teqmi	r6, r0, lsl #4
    1130:	0200000d 	andeq	r0, r0, #13
    1134:	78297491 	stmdavc	r9!, {r0, r4, r7, sl, ip, sp, lr}
    1138:	0200000c 	andeq	r0, r0, #12
    113c:	000d4136 	andeq	r4, sp, r6, lsr r1
    1140:	70910200 	addsvc	r0, r1, r0, lsl #4
    1144:	00049f29 	andeq	r9, r4, r9, lsr #30
    1148:	313b0200 	teqcc	fp, r0, lsl #4
    114c:	0200000a 	andeq	r0, r0, #10
    1150:	2f006091 	svccs	0x00006091
    1154:	0000098a 	andeq	r0, r0, sl, lsl #19
    1158:	02d12802 	sbcseq	r2, r1, #131072	; 0x20000
    115c:	00700000 	rsbseq	r0, r0, r0
    1160:	00442000 	subeq	r2, r4, r0
    1164:	9c010000 	stcls	0, cr0, [r1], {-0}
    1168:	00001185 	andeq	r1, r0, r5, lsl #3
    116c:	0000762b 	andeq	r7, r0, fp, lsr #12
    1170:	00003020 	andeq	r3, r0, r0, lsr #32
    1174:	0bfa2900 	bleq	ffe8b57c <GPIO_Ports+0xdfe877a8>
    1178:	29020000 	stmdbcs	r2, {}	; <UNPREDICTABLE>
    117c:	000002d1 	ldrdeq	r0, [r0], -r1
    1180:	00779102 	rsbseq	r9, r7, r2, lsl #2
    1184:	0cc73000 	stcleq	0, cr3, [r7], {0}
    1188:	5d010000 	stcpl	0, cr0, [r1, #-0]
    118c:	00001006 	andeq	r1, r0, r6
    1190:	00006020 	andeq	r6, r0, r0, lsr #32
    1194:	279c0100 	ldrcs	r0, [ip, r0, lsl #2]
    1198:	00000c5c 	andeq	r0, r0, ip, asr ip
    119c:	5a065d01 	bpl	1985a8 <startup-0x1fe67a58>
    11a0:	02000002 	andeq	r0, r0, #2
    11a4:	a3277791 			; <UNDEFINED> instruction: 0xa3277791
    11a8:	0100001d 	tsteq	r0, sp, lsl r0
    11ac:	0301065d 	movweq	r0, #5725	; 0x165d
    11b0:	91020000 	mrsls	r0, (UNDEF: 2)
    11b4:	a6000070 			; <UNDEFINED> instruction: 0xa6000070
    11b8:	0400000b 	streq	r0, [r0], #-11
    11bc:	0002d500 	andeq	sp, r2, r0, lsl #10
    11c0:	c1010400 	tstgt	r1, r0, lsl #8
    11c4:	0c000004 	stceq	0, cr0, [r0], {4}
    11c8:	00000e17 	andeq	r0, r0, r7, lsl lr
    11cc:	0000044a 	andeq	r0, r0, sl, asr #8
    11d0:	200007f4 	strdcs	r0, [r0], -r4
    11d4:	000011d2 	ldrdeq	r1, [r0], -r2
    11d8:	000002d1 	ldrdeq	r0, [r0], -r1
    11dc:	e1060102 	tst	r6, r2, lsl #2
    11e0:	03000002 	movweq	r0, #2
    11e4:	00000184 	andeq	r0, r0, r4, lsl #3
    11e8:	00372b02 	eorseq	r2, r7, r2, lsl #22
    11ec:	01020000 	mrseq	r0, (UNDEF: 2)
    11f0:	0002df08 	andeq	sp, r2, r8, lsl #30
    11f4:	05020200 	streq	r0, [r2, #-512]	; 0xfffffe00
    11f8:	00000bbe 			; <UNDEFINED> instruction: 0x00000bbe
    11fc:	00040d03 	andeq	r0, r4, r3, lsl #26
    1200:	50390200 	eorspl	r0, r9, r0, lsl #4
    1204:	02000000 	andeq	r0, r0, #0
    1208:	0d110702 	ldceq	7, cr0, [r1, #-8]
    120c:	8d030000 	stchi	0, cr0, [r3, #-0]
    1210:	0200000d 	andeq	r0, r0, #13
    1214:	0000624d 	andeq	r6, r0, sp, asr #4
    1218:	05040200 	streq	r0, [r4, #-512]	; 0xfffffe00
    121c:	0000075e 	andeq	r0, r0, lr, asr r7
    1220:	00073203 	andeq	r3, r7, r3, lsl #4
    1224:	744f0200 	strbvc	r0, [pc], #-512	; 122c <startup-0x1fffedd4>
    1228:	02000000 	andeq	r0, r0, #0
    122c:	0a0f0704 	beq	3c2e44 <startup-0x1fc3d1bc>
    1230:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    1234:	00075905 	andeq	r5, r7, r5, lsl #18
    1238:	07080200 	streq	r0, [r8, -r0, lsl #4]
    123c:	00000a0a 	andeq	r0, r0, sl, lsl #20
    1240:	69050404 	stmdbvs	r5, {r2, sl}
    1244:	0200746e 	andeq	r7, r0, #1845493760	; 0x6e000000
    1248:	0a140704 	beq	502e60 <startup-0x1fafd1a0>
    124c:	86030000 	strhi	r0, [r3], -r0
    1250:	03000001 	movweq	r0, #1
    1254:	00002c18 	andeq	r2, r0, r8, lsl ip
    1258:	040f0300 	streq	r0, [pc], #-768	; 1260 <startup-0x1fffeda0>
    125c:	24030000 	strcs	r0, [r3], #-0
    1260:	00000045 	andeq	r0, r0, r5, asr #32
    1264:	000d8f03 	andeq	r8, sp, r3, lsl #30
    1268:	572c0300 	strpl	r0, [ip, -r0, lsl #6]!
    126c:	05000000 	streq	r0, [r0, #-0]
    1270:	000000ad 	andeq	r0, r0, sp, lsr #1
    1274:	00073403 	andeq	r3, r7, r3, lsl #8
    1278:	69300300 	ldmdbvs	r0!, {r8, r9}
    127c:	05000000 	streq	r0, [r0, #-0]
    1280:	000000bd 	strheq	r0, [r0], -sp
    1284:	0000bd06 	andeq	fp, r0, r6, lsl #26
    1288:	0000dd00 	andeq	sp, r0, r0, lsl #26
    128c:	00900700 	addseq	r0, r0, r0, lsl #14
    1290:	00070000 	andeq	r0, r7, r0
    1294:	000c6108 	andeq	r6, ip, r8, lsl #2
    1298:	06fa0400 	ldrbteq	r0, [sl], r0, lsl #8
    129c:	000000b8 	strheq	r0, [r0], -r8
    12a0:	00067209 	andeq	r7, r6, r9, lsl #4
    12a4:	bd3b0500 	cfldr32lt	mvfx0, [fp, #-0]
    12a8:	0a000000 	beq	12b0 <startup-0x1fffed50>
    12ac:	00370107 	eorseq	r0, r7, r7, lsl #2
    12b0:	5d060000 	stcpl	0, cr0, [r6, #-0]
    12b4:	00010f03 	andeq	r0, r1, r3, lsl #30
    12b8:	1e9e0b00 	vfnmsne.f64	d0, d14, d0
    12bc:	0c000000 	stceq	0, cr0, [r0], {-0}
    12c0:	00544553 	subseq	r4, r4, r3, asr r5
    12c4:	eb0d0001 	bl	3412d0 <startup-0x1fcbed30>
    12c8:	06000015 			; <UNDEFINED> instruction: 0x06000015
    12cc:	00f4035d 	rscseq	r0, r4, sp, asr r3
    12d0:	c90d0000 	stmdbgt	sp, {}	; <UNPREDICTABLE>
    12d4:	06000010 			; <UNDEFINED> instruction: 0x06000010
    12d8:	00f4035d 	rscseq	r0, r4, sp, asr r3
    12dc:	070a0000 	streq	r0, [sl, -r0]
    12e0:	00003701 	andeq	r3, r0, r1, lsl #14
    12e4:	035f0600 	cmpeq	pc, #0, 12
    12e8:	00000142 	andeq	r0, r0, r2, asr #2
    12ec:	0009510b 	andeq	r5, r9, fp, lsl #2
    12f0:	000b0000 	andeq	r0, fp, r0
    12f4:	0100000c 	tsteq	r0, ip
    12f8:	09d40d00 	ldmibeq	r4, {r8, sl, fp}^
    12fc:	5f060000 	svcpl	0x00060000
    1300:	00012703 	andeq	r2, r1, r3, lsl #14
    1304:	06100e00 	ldreq	r0, [r0], -r0, lsl #28
    1308:	018c0395 			; <UNDEFINED> instruction: 0x018c0395
    130c:	540f0000 	strpl	r0, [pc], #-0	; 1314 <startup-0x1fffecec>
    1310:	06005249 	streq	r5, [r0], -r9, asr #4
    1314:	00c80397 	smulleq	r0, r8, r7, r3
    1318:	10000000 	andne	r0, r0, r0
    131c:	00000dc0 	andeq	r0, r0, r0, asr #27
    1320:	c8039806 	stmdagt	r3, {r1, r2, fp, ip, pc}
    1324:	04000000 	streq	r0, [r0], #-0
    1328:	000a9010 	andeq	r9, sl, r0, lsl r0
    132c:	03990600 	orrseq	r0, r9, #0, 12
    1330:	000000c8 	andeq	r0, r0, r8, asr #1
    1334:	08991008 	ldmeq	r9, {r3, ip}
    1338:	9a060000 	bls	181340 <startup-0x1fe7ecc0>
    133c:	0000c803 	andeq	ip, r0, r3, lsl #16
    1340:	0d000c00 	stceq	12, cr0, [r0, #-0]
    1344:	00000b76 	andeq	r0, r0, r6, ror fp
    1348:	4e039b06 	vmlami.f64	d9, d3, d6
    134c:	0e000001 	cdpeq	0, 0, cr0, cr0, cr1, {0}
    1350:	03a10610 			; <UNDEFINED> instruction: 0x03a10610
    1354:	000001d6 	ldrdeq	r0, [r0], -r6
    1358:	5249520f 	subpl	r5, r9, #-268435456	; 0xf0000000
    135c:	03a30600 			; <UNDEFINED> instruction: 0x03a30600
    1360:	000000c8 	andeq	r0, r0, r8, asr #1
    1364:	0db21000 	ldceq	0, cr1, [r2]
    1368:	a4060000 	strge	r0, [r6], #-0
    136c:	0000c803 	andeq	ip, r0, r3, lsl #16
    1370:	56100400 	ldrpl	r0, [r0], -r0, lsl #8
    1374:	0600000a 	streq	r0, [r0], -sl
    1378:	00c803a5 	sbceq	r0, r8, r5, lsr #7
    137c:	10080000 	andne	r0, r8, r0
    1380:	00000894 	muleq	r0, r4, r8
    1384:	c803a606 	stmdagt	r3, {r1, r2, r9, sl, sp, pc}
    1388:	0c000000 	stceq	0, cr0, [r0], {-0}
    138c:	0a5b0d00 	beq	16c4794 <startup-0x1e93b86c>
    1390:	a7060000 	strge	r0, [r6, -r0]
    1394:	00019803 	andeq	r9, r1, r3, lsl #16
    1398:	06080e00 	streq	r0, [r8], -r0, lsl #28
    139c:	020603ad 	andeq	r0, r6, #-1275068414	; 0xb4000002
    13a0:	460f0000 	strmi	r0, [pc], -r0
    13a4:	06003152 			; <UNDEFINED> instruction: 0x06003152
    13a8:	00c803af 	sbceq	r0, r8, pc, lsr #7
    13ac:	0f000000 	svceq	0x00000000
    13b0:	00325246 	eorseq	r5, r2, r6, asr #4
    13b4:	c803b006 	stmdagt	r3, {r1, r2, ip, sp, pc}
    13b8:	04000000 	streq	r0, [r0], #-0
    13bc:	02910d00 	addseq	r0, r1, #0, 26
    13c0:	b1060000 	mrslt	r0, (UNDEF: 6)
    13c4:	0001e203 	andeq	lr, r1, r3, lsl #4
    13c8:	03201100 	nopeq	{0}	; <UNPREDICTABLE>
    13cc:	4803b706 	stmdami	r3, {r1, r2, r8, r9, sl, ip, sp, pc}
    13d0:	0f000003 	svceq	0x00000003
    13d4:	0052434d 	subseq	r4, r2, sp, asr #6
    13d8:	c803b906 	stmdagt	r3, {r1, r2, r8, fp, ip, sp, pc}
    13dc:	00000000 	andeq	r0, r0, r0
    13e0:	52534d0f 	subspl	r4, r3, #960	; 0x3c0
    13e4:	03ba0600 			; <UNDEFINED> instruction: 0x03ba0600
    13e8:	000000c8 	andeq	r0, r0, r8, asr #1
    13ec:	53540f04 	cmppl	r4, #4, 30
    13f0:	bb060052 	bllt	181540 <startup-0x1fe7eac0>
    13f4:	0000c803 	andeq	ip, r0, r3, lsl #16
    13f8:	6d100800 	ldcvs	8, cr0, [r0, #-0]
    13fc:	06000002 	streq	r0, [r0], -r2
    1400:	00c803bc 	strheq	r0, [r8], #60	; 0x3c
    1404:	100c0000 	andne	r0, ip, r0
    1408:	00000313 	andeq	r0, r0, r3, lsl r3
    140c:	c803bd06 	stmdagt	r3, {r1, r2, r8, sl, fp, ip, sp, pc}
    1410:	10000000 	andne	r0, r0, r0
    1414:	5245490f 	subpl	r4, r5, #245760	; 0x3c000
    1418:	03be0600 			; <UNDEFINED> instruction: 0x03be0600
    141c:	000000c8 	andeq	r0, r0, r8, asr #1
    1420:	53450f14 	movtpl	r0, #24340	; 0x5f14
    1424:	bf060052 	svclt	0x00060052
    1428:	0000c803 	andeq	ip, r0, r3, lsl #16
    142c:	420f1800 	andmi	r1, pc, #0, 16
    1430:	06005254 			; <UNDEFINED> instruction: 0x06005254
    1434:	00c803c0 	sbceq	r0, r8, r0, asr #7
    1438:	101c0000 	andsne	r0, ip, r0
    143c:	000002cb 	andeq	r0, r0, fp, asr #5
    1440:	4803c106 	stmdami	r3, {r1, r2, r8, lr, pc}
    1444:	20000003 	andcs	r0, r0, r3
    1448:	000d7012 	andeq	r7, sp, r2, lsl r0
    144c:	03c20600 	biceq	r0, r2, #0, 12
    1450:	00000358 	andeq	r0, r0, r8, asr r3
    1454:	ac120180 	ldfges	f0, [r2], {128}	; 0x80
    1458:	06000002 	streq	r0, [r0], -r2
    145c:	036803c3 	cmneq	r8, #201326595	; 0xc000003
    1460:	01b00000 	movseq	r0, r0
    1464:	0002d512 	andeq	sp, r2, r2, lsl r5
    1468:	03c40600 	biceq	r0, r4, #0, 12
    146c:	00000378 	andeq	r0, r0, r8, ror r3
    1470:	461301d0 			; <UNDEFINED> instruction: 0x461301d0
    1474:	0600524d 	streq	r5, [r0], -sp, asr #4
    1478:	00c803c5 	sbceq	r0, r8, r5, asr #7
    147c:	02000000 	andeq	r0, r0, #0
    1480:	00088f12 	andeq	r8, r8, r2, lsl pc
    1484:	03c60600 	biceq	r0, r6, #0, 12
    1488:	000000c8 	andeq	r0, r0, r8, asr #1
    148c:	75120204 	ldrvc	r0, [r2, #-516]	; 0xfffffdfc
    1490:	06000003 	streq	r0, [r0], -r3
    1494:	00bd03c7 	adcseq	r0, sp, r7, asr #7
    1498:	02080000 	andeq	r0, r8, #0
    149c:	000b6412 	andeq	r6, fp, r2, lsl r4
    14a0:	03c80600 	biceq	r0, r8, #0, 12
    14a4:	000000c8 	andeq	r0, r0, r8, asr #1
    14a8:	7f12020c 	svcvc	0x0012020c
    14ac:	06000003 	streq	r0, [r0], -r3
    14b0:	00bd03c9 	adcseq	r0, sp, r9, asr #7
    14b4:	02100000 	andseq	r0, r0, #0
    14b8:	000bd112 	andeq	sp, fp, r2, lsl r1
    14bc:	03ca0600 	biceq	r0, sl, #0, 12
    14c0:	000000c8 	andeq	r0, r0, r8, asr #1
    14c4:	ff120214 			; <UNDEFINED> instruction: 0xff120214
    14c8:	06000002 	streq	r0, [r0], -r2
    14cc:	00bd03cb 	adcseq	r0, sp, fp, asr #7
    14d0:	02180000 	andseq	r0, r8, #0
    14d4:	000bd212 	andeq	sp, fp, r2, lsl r2
    14d8:	03cc0600 	biceq	r0, ip, #0, 12
    14dc:	000000c8 	andeq	r0, r0, r8, asr #1
    14e0:	0912021c 	ldmdbeq	r2, {r2, r3, r4, r9}
    14e4:	06000003 	streq	r0, [r0], -r3
    14e8:	00cd03cd 	sbceq	r0, sp, sp, asr #7
    14ec:	02200000 	eoreq	r0, r0, #0
    14f0:	00091612 	andeq	r1, r9, r2, lsl r6
    14f4:	03ce0600 	biceq	r0, lr, #0, 12
    14f8:	00000388 	andeq	r0, r0, r8, lsl #7
    14fc:	06000240 	streq	r0, [r0], -r0, asr #4
    1500:	000000bd 	strheq	r0, [r0], -sp
    1504:	00000358 	andeq	r0, r0, r8, asr r3
    1508:	00009007 	andeq	r9, r0, r7
    150c:	06005700 	streq	r5, [r0], -r0, lsl #14
    1510:	0000018c 	andeq	r0, r0, ip, lsl #3
    1514:	00000368 	andeq	r0, r0, r8, ror #6
    1518:	00009007 	andeq	r9, r0, r7
    151c:	06000200 	streq	r0, [r0], -r0, lsl #4
    1520:	000001d6 	ldrdeq	r0, [r0], -r6
    1524:	00000378 	andeq	r0, r0, r8, ror r3
    1528:	00009007 	andeq	r9, r0, r7
    152c:	06000100 	streq	r0, [r0], -r0, lsl #2
    1530:	000000bd 	strheq	r0, [r0], -sp
    1534:	00000388 	andeq	r0, r0, r8, lsl #7
    1538:	00009007 	andeq	r9, r0, r7
    153c:	06000b00 	streq	r0, [r0], -r0, lsl #22
    1540:	00000206 	andeq	r0, r0, r6, lsl #4
    1544:	00000398 	muleq	r0, r8, r3
    1548:	00009007 	andeq	r9, r0, r7
    154c:	0d001b00 	vstreq	d1, [r0, #-0]
    1550:	000008f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    1554:	1203cf06 	andne	ip, r3, #6, 30
    1558:	14000002 	strne	r0, [r0], #-2
    155c:	313d070c 	teqcc	sp, ip, lsl #14
    1560:	15000004 	strne	r0, [r0, #-4]
    1564:	000006db 	ldrdeq	r0, [r0], -fp
    1568:	00a23f07 	adceq	r3, r2, r7, lsl #30
    156c:	15000000 	strne	r0, [r0, #-0]
    1570:	00000109 	andeq	r0, r0, r9, lsl #2
    1574:	00974207 	addseq	r4, r7, r7, lsl #4
    1578:	15020000 	strne	r0, [r2, #-0]
    157c:	000005aa 	andeq	r0, r0, sl, lsr #11
    1580:	00974507 	addseq	r4, r7, r7, lsl #10
    1584:	15030000 	strne	r0, [r3, #-0]
    1588:	00000c07 	andeq	r0, r0, r7, lsl #24
    158c:	00974a07 	addseq	r4, r7, r7, lsl #20
    1590:	15040000 	strne	r0, [r4, #-0]
    1594:	00000c0f 	andeq	r0, r0, pc, lsl #24
    1598:	00974e07 	addseq	r4, r7, r7, lsl #28
    159c:	15050000 	strne	r0, [r5, #-0]
    15a0:	00000100 	andeq	r0, r0, r0, lsl #2
    15a4:	01425107 	cmpeq	r2, r7, lsl #2
    15a8:	15060000 	strne	r0, [r6, #-0]
    15ac:	00000351 	andeq	r0, r0, r1, asr r3
    15b0:	01425407 	cmpeq	r2, r7, lsl #8
    15b4:	15070000 	strne	r0, [r7, #-0]
    15b8:	000009c1 	andeq	r0, r0, r1, asr #19
    15bc:	01425707 	cmpeq	r2, r7, lsl #14
    15c0:	15080000 	strne	r0, [r8, #-0]
    15c4:	00000a4d 	andeq	r0, r0, sp, asr #20
    15c8:	01425a07 	cmpeq	r2, r7, lsl #20
    15cc:	15090000 	strne	r0, [r9, #-0]
    15d0:	0000083a 	andeq	r0, r0, sl, lsr r8
    15d4:	01425d07 	cmpeq	r2, r7, lsl #26
    15d8:	150a0000 	strne	r0, [sl, #-0]
    15dc:	00000db7 			; <UNDEFINED> instruction: 0x00000db7
    15e0:	01426007 	cmpeq	r2, r7
    15e4:	000b0000 	andeq	r0, fp, r0
    15e8:	00007303 	andeq	r7, r0, r3, lsl #6
    15ec:	a4620700 	strbtge	r0, [r2], #-1792	; 0xfffff900
    15f0:	14000003 	strne	r0, [r0], #-3
    15f4:	b167070e 	cmnlt	r7, lr, lsl #14
    15f8:	15000004 	strne	r0, [r0, #-4]
    15fc:	00000aac 	andeq	r0, r0, ip, lsr #21
    1600:	00a26907 	adceq	r6, r2, r7, lsl #18
    1604:	15000000 	strne	r0, [r0, #-0]
    1608:	00000083 	andeq	r0, r0, r3, lsl #1
    160c:	00a26d07 	adceq	r6, r2, r7, lsl #26
    1610:	15020000 	strne	r0, [r2, #-0]
    1614:	000008a3 	andeq	r0, r0, r3, lsr #17
    1618:	00a27107 	adceq	r7, r2, r7, lsl #2
    161c:	15040000 	strne	r0, [r4, #-0]
    1620:	00000b9f 	muleq	r0, pc, fp	; <UNPREDICTABLE>
    1624:	00a27607 	adceq	r7, r2, r7, lsl #12
    1628:	15060000 	strne	r0, [r6, #-0]
    162c:	00000338 	andeq	r0, r0, r8, lsr r3
    1630:	00a27b07 	adceq	r7, r2, r7, lsl #22
    1634:	15080000 	strne	r0, [r8, #-0]
    1638:	000008fc 	strdeq	r0, [r0], -ip
    163c:	00977e07 	addseq	r7, r7, r7, lsl #28
    1640:	150a0000 	strne	r0, [sl, #-0]
    1644:	00000c17 	andeq	r0, r0, r7, lsl ip
    1648:	00978007 	addseq	r8, r7, r7
    164c:	150b0000 	strne	r0, [fp, #-0]
    1650:	00000174 	andeq	r0, r0, r4, ror r1
    1654:	00978307 	addseq	r8, r7, r7, lsl #6
    1658:	150c0000 	strne	r0, [ip, #-0]
    165c:	00000435 	andeq	r0, r0, r5, lsr r4
    1660:	01428607 	cmpeq	r2, r7, lsl #12
    1664:	000d0000 	andeq	r0, sp, r0
    1668:	000d9c03 	andeq	r9, sp, r3, lsl #24
    166c:	3c880700 	stccc	7, cr0, [r8], {0}
    1670:	14000004 	strne	r0, [r0], #-4
    1674:	0d8d0714 	stceq	7, cr0, [sp, #80]	; 0x50
    1678:	15000005 	strne	r0, [r0, #-5]
    167c:	0000036f 	andeq	r0, r0, pc, ror #6
    1680:	00bd8f07 	adcseq	r8, sp, r7, lsl #30
    1684:	15000000 	strne	r0, [r0, #-0]
    1688:	00000499 	muleq	r0, r9, r4
    168c:	00bd9207 	adcseq	r9, sp, r7, lsl #4
    1690:	16040000 	strne	r0, [r4], -r0
    1694:	00454449 	subeq	r4, r5, r9, asr #8
    1698:	00979507 	addseq	r9, r7, r7, lsl #10
    169c:	16080000 	strne	r0, [r8], -r0
    16a0:	00525452 	subseq	r5, r2, r2, asr r4
    16a4:	00979907 	addseq	r9, r7, r7, lsl #18
    16a8:	16090000 	strne	r0, [r9], -r0
    16ac:	00434c44 	subeq	r4, r3, r4, asr #24
    16b0:	00979d07 	addseq	r9, r7, r7, lsl #26
    16b4:	150a0000 	strne	r0, [sl, #-0]
    16b8:	00001fad 	andeq	r1, r0, sp, lsr #31
    16bc:	050da107 	streq	sl, [sp, #-263]	; 0xfffffef9
    16c0:	000b0000 	andeq	r0, fp, r0
    16c4:	00009706 	andeq	r9, r0, r6, lsl #14
    16c8:	00051d00 	andeq	r1, r5, r0, lsl #26
    16cc:	00900700 	addseq	r0, r0, r0, lsl #14
    16d0:	00070000 	andeq	r0, r7, r0
    16d4:	00055903 	andeq	r5, r5, r3, lsl #18
    16d8:	bca30700 	stclt	7, cr0, [r3]
    16dc:	14000004 	strne	r0, [r0], #-4
    16e0:	85a80714 	strhi	r0, [r8, #1812]!	; 0x714
    16e4:	15000005 	strne	r0, [r0, #-5]
    16e8:	0000036f 	andeq	r0, r0, pc, ror #6
    16ec:	00bdaa07 	adcseq	sl, sp, r7, lsl #20
    16f0:	15000000 	strne	r0, [r0, #-0]
    16f4:	00000499 	muleq	r0, r9, r4
    16f8:	00bdad07 	adcseq	sl, sp, r7, lsl #26
    16fc:	16040000 	strne	r0, [r4], -r0
    1700:	00454449 	subeq	r4, r5, r9, asr #8
    1704:	0097b007 	addseq	fp, r7, r7
    1708:	16080000 	strne	r0, [r8], -r0
    170c:	00525452 	subseq	r5, r2, r2, asr r4
    1710:	0097b407 	addseq	fp, r7, r7, lsl #8
    1714:	16090000 	strne	r0, [r9], -r0
    1718:	00434c44 	subeq	r4, r3, r4, asr #24
    171c:	0097b807 	addseq	fp, r7, r7, lsl #16
    1720:	150a0000 	strne	r0, [sl, #-0]
    1724:	00001fad 	andeq	r1, r0, sp, lsr #31
    1728:	050dbb07 	streq	fp, [sp, #-2823]	; 0xfffff4f9
    172c:	160b0000 	strne	r0, [fp], -r0
    1730:	00494d46 	subeq	r4, r9, r6, asr #26
    1734:	0097be07 	addseq	fp, r7, r7, lsl #28
    1738:	00130000 	andseq	r0, r3, r0
    173c:	00095903 	andeq	r5, r9, r3, lsl #18
    1740:	28c10700 	stmiacs	r1, {r8, r9, sl}^
    1744:	17000005 	strne	r0, [r0, -r5]
    1748:	000010c4 	andeq	r1, r0, r4, asr #1
    174c:	1b072301 	blne	1ca358 <startup-0x1fe35ca8>
    1750:	8c000001 	stchi	0, cr0, [r0], {1}
    1754:	3a200019 	bcc	8017c0 <startup-0x1f7fe840>
    1758:	01000000 	mrseq	r0, (UNDEF: 0)
    175c:	0005d89c 	muleq	r5, ip, r8
    1760:	10541800 	subsne	r1, r4, r0, lsl #16
    1764:	23010000 	movwcs	r0, #4096	; 0x1000
    1768:	0000bd07 	andeq	fp, r0, r7, lsl #26
    176c:	6c910200 	lfmvs	f0, 4, [r1], {0}
    1770:	00100418 	andseq	r0, r0, r8, lsl r4
    1774:	07230100 	streq	r0, [r3, -r0, lsl #2]!
    1778:	000000bd 	strheq	r0, [r0], -sp
    177c:	19689102 	stmdbne	r8!, {r1, r8, ip, pc}^
    1780:	00001043 	andeq	r1, r0, r3, asr #32
    1784:	1b072501 	blne	1cab90 <startup-0x1fe35470>
    1788:	02000001 	andeq	r0, r0, #1
    178c:	1a007791 	bne	1f5d8 <startup-0x1ffe0a28>
    1790:	000010d2 	ldrdeq	r1, [r0], -r2
    1794:	a006d501 	andge	sp, r6, r1, lsl #10
    1798:	ec200018 	stc	0, cr0, [r0], #-96	; 0xffffffa0
    179c:	01000000 	mrseq	r0, (UNDEF: 0)
    17a0:	00060d9c 	muleq	r6, ip, sp
    17a4:	10a31800 	adcne	r1, r3, r0, lsl #16
    17a8:	d5010000 	strle	r0, [r1, #-0]
    17ac:	00060d06 	andeq	r0, r6, r6, lsl #26
    17b0:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    17b4:	000fea18 	andeq	lr, pc, r8, lsl sl	; <UNPREDICTABLE>
    17b8:	06d50100 	ldrbeq	r0, [r5], r0, lsl #2
    17bc:	000000bd 	strheq	r0, [r0], -sp
    17c0:	00709102 	rsbseq	r9, r0, r2, lsl #2
    17c4:	0398041b 	orrseq	r0, r8, #452984832	; 0x1b000000
    17c8:	0b1c0000 	bleq	7017d0 <startup-0x1f8fe830>
    17cc:	01000010 	tsteq	r0, r0, lsl r0
    17d0:	011b066c 	tsteq	fp, ip, ror #12
    17d4:	16b00000 	ldrtne	r0, [r0], r0
    17d8:	01f02000 	mvnseq	r2, r0
    17dc:	9c010000 	stcls	0, cr0, [r1], {-0}
    17e0:	0000065b 	andeq	r0, r0, fp, asr r6
    17e4:	0010a318 	andseq	sl, r0, r8, lsl r3
    17e8:	066c0100 	strbteq	r0, [ip], -r0, lsl #2
    17ec:	0000060d 	andeq	r0, r0, sp, lsl #12
    17f0:	18649102 	stmdane	r4!, {r1, r8, ip, pc}^
    17f4:	00000fea 	andeq	r0, r0, sl, ror #31
    17f8:	bd066c01 	stclt	12, cr6, [r6, #-4]
    17fc:	02000000 	andeq	r0, r0, #0
    1800:	4b196091 	blmi	659a4c <startup-0x1f9a65b4>
    1804:	01000010 	tsteq	r0, r0, lsl r0
    1808:	011b066e 	tsteq	fp, lr, ror #12
    180c:	91020000 	mrsls	r0, (UNDEF: 2)
    1810:	ff1a006f 			; <UNDEFINED> instruction: 0xff1a006f
    1814:	0100000d 	tsteq	r0, sp
    1818:	1640062f 	strbne	r0, [r0], -pc, lsr #12
    181c:	00702000 	rsbseq	r2, r0, r0
    1820:	9c010000 	stcls	0, cr0, [r1], {-0}
    1824:	0000069f 	muleq	r0, pc, r6	; <UNPREDICTABLE>
    1828:	0010a318 	andseq	sl, r0, r8, lsl r3
    182c:	062f0100 	strteq	r0, [pc], -r0, lsl #2
    1830:	0000060d 	andeq	r0, r0, sp, lsl #12
    1834:	186c9102 	stmdane	ip!, {r1, r8, ip, pc}^
    1838:	0000101b 	andeq	r1, r0, fp, lsl r0
    183c:	bd062f01 	stclt	15, cr2, [r6, #-4]
    1840:	02000000 	andeq	r0, r0, #0
    1844:	7c196891 	ldcvc	8, cr6, [r9], {145}	; 0x91
    1848:	01000010 	tsteq	r0, r0, lsl r0
    184c:	00bd0631 	adcseq	r0, sp, r1, lsr r6
    1850:	91020000 	mrsls	r0, (UNDEF: 2)
    1854:	841d0074 	ldrhi	r0, [sp], #-116	; 0xffffff8c
    1858:	01000010 	tsteq	r0, r0, lsl r0
    185c:	010f05ca 	smlabteq	pc, sl, r5, r0	; <UNPREDICTABLE>
    1860:	15500000 	ldrbne	r0, [r0, #-0]
    1864:	00f02000 	rscseq	r2, r0, r0
    1868:	9c010000 	stcls	0, cr0, [r1], {-0}
    186c:	000006e7 	andeq	r0, r0, r7, ror #13
    1870:	0010a318 	andseq	sl, r0, r8, lsl r3
    1874:	05ca0100 	strbeq	r0, [sl, #256]	; 0x100
    1878:	0000060d 	andeq	r0, r0, sp, lsl #12
    187c:	186c9102 	stmdane	ip!, {r1, r8, ip, pc}^
    1880:	0000101b 	andeq	r1, r0, fp, lsl r0
    1884:	bd05ca01 	vstrlt	s24, [r5, #-4]
    1888:	02000000 	andeq	r0, r0, #0
    188c:	4a196891 	bmi	65bad8 <startup-0x1f9a4528>
    1890:	01000010 	tsteq	r0, r0, lsl r0
    1894:	010f05cc 	smlabteq	pc, ip, r5, r0	; <UNPREDICTABLE>
    1898:	91020000 	mrsls	r0, (UNDEF: 2)
    189c:	961a0077 			; <UNDEFINED> instruction: 0x961a0077
    18a0:	01000010 	tsteq	r0, r0, lsl r0
    18a4:	151605a1 	ldrne	r0, [r6, #-1441]	; 0xfffffa5f
    18a8:	003a2000 	eorseq	r2, sl, r0
    18ac:	9c010000 	stcls	0, cr0, [r1], {-0}
    18b0:	0000072b 	andeq	r0, r0, fp, lsr #14
    18b4:	0010a318 	andseq	sl, r0, r8, lsl r3
    18b8:	05a10100 	streq	r0, [r1, #256]!	; 0x100
    18bc:	0000060d 	andeq	r0, r0, sp, lsl #12
    18c0:	18749102 	ldmdane	r4!, {r1, r8, ip, pc}^
    18c4:	00000fea 	andeq	r0, r0, sl, ror #31
    18c8:	bd05a101 	stfltd	f2, [r5, #-4]
    18cc:	02000000 	andeq	r0, r0, #0
    18d0:	61187091 			; <UNDEFINED> instruction: 0x61187091
    18d4:	0100000f 	tsteq	r0, pc
    18d8:	014205a1 	smlaltbeq	r0, r2, r1, r5
    18dc:	91020000 	mrsls	r0, (UNDEF: 2)
    18e0:	171d006f 	ldrne	r0, [sp, -pc, rrx]
    18e4:	0100000f 	tsteq	r0, pc
    18e8:	009704d3 			; <UNDEFINED> instruction: 0x009704d3
    18ec:	14f00000 	ldrbtne	r0, [r0], #0
    18f0:	00262000 	eoreq	r2, r6, r0
    18f4:	9c010000 	stcls	0, cr0, [r1], {-0}
    18f8:	00000764 	andeq	r0, r0, r4, ror #14
    18fc:	0010a318 	andseq	sl, r0, r8, lsl r3
    1900:	04d30100 	ldrbeq	r0, [r3], #256	; 0x100
    1904:	0000060d 	andeq	r0, r0, sp, lsl #12
    1908:	196c9102 	stmdbne	ip!, {r1, r8, ip, pc}^
    190c:	000014b2 			; <UNDEFINED> instruction: 0x000014b2
    1910:	9704d501 	strls	sp, [r4, -r1, lsl #10]
    1914:	02000000 	andeq	r0, r0, #0
    1918:	1d007791 	stcne	7, cr7, [r0, #-580]	; 0xfffffdbc
    191c:	000010f9 	strdeq	r1, [r0], -r9
    1920:	9704be01 	strls	fp, [r4, -r1, lsl #28]
    1924:	ca000000 	bgt	192c <startup-0x1fffe6d4>
    1928:	26200014 			; <UNDEFINED> instruction: 0x26200014
    192c:	01000000 	mrseq	r0, (UNDEF: 0)
    1930:	00079d9c 	muleq	r7, ip, sp
    1934:	10a31800 	adcne	r1, r3, r0, lsl #16
    1938:	be010000 	cdplt	0, 0, cr0, cr1, cr0, {0}
    193c:	00060d04 	andeq	r0, r6, r4, lsl #26
    1940:	6c910200 	lfmvs	f0, 4, [r1], {0}
    1944:	0014b219 	andseq	fp, r4, r9, lsl r2
    1948:	04c00100 	strbeq	r0, [r0], #256	; 0x100
    194c:	00000097 	muleq	r0, r7, r0
    1950:	00779102 	rsbseq	r9, r7, r2, lsl #2
    1954:	000f361d 	andeq	r3, pc, sp, lsl r6	; <UNPREDICTABLE>
    1958:	04a40100 	strteq	r0, [r4], #256	; 0x100
    195c:	00000097 	muleq	r0, r7, r0
    1960:	2000149c 	mulcs	r0, ip, r4
    1964:	0000002e 	andeq	r0, r0, lr, lsr #32
    1968:	07d69c01 	ldrbeq	r9, [r6, r1, lsl #24]
    196c:	a3180000 	tstge	r8, #0
    1970:	01000010 	tsteq	r0, r0, lsl r0
    1974:	060d04a4 	streq	r0, [sp], -r4, lsr #9
    1978:	91020000 	mrsls	r0, (UNDEF: 2)
    197c:	1039196c 	eorsne	r1, r9, ip, ror #18
    1980:	a6010000 	strge	r0, [r1], -r0
    1984:	00009704 	andeq	r9, r0, r4, lsl #14
    1988:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    198c:	0f561d00 	svceq	0x00561d00
    1990:	66010000 	strvs	r0, [r1], -r0
    1994:	00009704 	andeq	r9, r0, r4, lsl #14
    1998:	00143a00 	andseq	r3, r4, r0, lsl #20
    199c:	00006220 	andeq	r6, r0, r0, lsr #4
    19a0:	1e9c0100 	fmlnee	f0, f4, f0
    19a4:	18000008 	stmdane	r0, {r3}
    19a8:	000010a3 	andeq	r1, r0, r3, lsr #1
    19ac:	0d046601 	stceq	6, cr6, [r4, #-4]
    19b0:	02000006 	andeq	r0, r0, #6
    19b4:	24196c91 	ldrcs	r6, [r9], #-3217	; 0xfffff36f
    19b8:	01000010 	tsteq	r0, r0, lsl r0
    19bc:	00bd0468 	adcseq	r0, sp, r8, ror #8
    19c0:	91020000 	mrsls	r0, (UNDEF: 2)
    19c4:	112a1974 			; <UNDEFINED> instruction: 0x112a1974
    19c8:	69010000 	stmdbvs	r1, {}	; <UNPREDICTABLE>
    19cc:	00009704 	andeq	r9, r0, r4, lsl #14
    19d0:	73910200 	orrsvc	r0, r1, #0, 4
    19d4:	0ffa1d00 	svceq	0x00fa1d00
    19d8:	4c010000 	stcmi	0, cr0, [r1], {-0}
    19dc:	00009704 	andeq	r9, r0, r4, lsl #14
    19e0:	0013f800 	andseq	pc, r3, r0, lsl #16
    19e4:	00004220 	andeq	r4, r0, r0, lsr #4
    19e8:	579c0100 	ldrpl	r0, [ip, r0, lsl #2]
    19ec:	18000008 	stmdane	r0, {r3}
    19f0:	000010a3 	andeq	r1, r0, r3, lsr #1
    19f4:	0d044c01 	stceq	12, cr4, [r4, #-4]
    19f8:	02000006 	andeq	r0, r0, #6
    19fc:	a3196c91 	tstge	r9, #37120	; 0x9100
    1a00:	0100000e 	tsteq	r0, lr
    1a04:	0097044e 	addseq	r0, r7, lr, asr #8
    1a08:	91020000 	mrsls	r0, (UNDEF: 2)
    1a0c:	bc1d0077 	ldclt	0, cr0, [sp], {119}	; 0x77
    1a10:	0100000f 	tsteq	r0, pc
    1a14:	009703fa 			; <UNDEFINED> instruction: 0x009703fa
    1a18:	12d40000 	sbcsne	r0, r4, #0
    1a1c:	01242000 			; <UNDEFINED> instruction: 0x01242000
    1a20:	9c010000 	stcls	0, cr0, [r1], {-0}
    1a24:	000008ae 	andeq	r0, r0, lr, lsr #17
    1a28:	0010a318 	andseq	sl, r0, r8, lsl r3
    1a2c:	03fa0100 	mvnseq	r0, #0, 2
    1a30:	0000060d 	andeq	r0, r0, sp, lsl #12
    1a34:	186c9102 	stmdane	ip!, {r1, r8, ip, pc}^
    1a38:	0000106a 	andeq	r1, r0, sl, rrx
    1a3c:	9703fa01 	strls	pc, [r3, -r1, lsl #20]
    1a40:	02000000 	andeq	r0, r0, #0
    1a44:	83196b91 	tsthi	r9, #148480	; 0x24400
    1a48:	01000005 	tsteq	r0, r5
    1a4c:	009703fc 			; <UNDEFINED> instruction: 0x009703fc
    1a50:	91020000 	mrsls	r0, (UNDEF: 2)
    1a54:	0fd51977 	svceq	0x00d51977
    1a58:	ff010000 			; <UNDEFINED> instruction: 0xff010000
    1a5c:	0000bd03 	andeq	fp, r0, r3, lsl #26
    1a60:	70910200 	addsvc	r0, r1, r0, lsl #4
    1a64:	0f961d00 	svceq	0x00961d00
    1a68:	c8010000 	stmdagt	r1, {}	; <UNPREDICTABLE>
    1a6c:	00009703 	andeq	r9, r0, r3, lsl #14
    1a70:	00127400 	andseq	r7, r2, r0, lsl #8
    1a74:	00006020 	andeq	r6, r0, r0, lsr #32
    1a78:	f69c0100 			; <UNDEFINED> instruction: 0xf69c0100
    1a7c:	18000008 	stmdane	r0, {r3}
    1a80:	000010a3 	andeq	r1, r0, r3, lsr #1
    1a84:	0d03c801 	stceq	8, cr12, [r3, #-4]
    1a88:	02000006 	andeq	r0, r0, #6
    1a8c:	2e186c91 	mrccs	12, 0, r6, cr8, cr1, {4}
    1a90:	01000010 	tsteq	r0, r0, lsl r0
    1a94:	009703c8 	addseq	r0, r7, r8, asr #7
    1a98:	91020000 	mrsls	r0, (UNDEF: 2)
    1a9c:	0ee5196b 	vfmseq.f16	s3, s10, s23	; <UNPREDICTABLE>
    1aa0:	ca010000 	bgt	41aa8 <startup-0x1ffbe558>
    1aa4:	00009703 	andeq	r9, r0, r3, lsl #14
    1aa8:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    1aac:	0ec41a00 	vdiveq.f32	s3, s8, s0
    1ab0:	b0010000 	andlt	r0, r1, r0
    1ab4:	00123c03 	andseq	r3, r2, r3, lsl #24
    1ab8:	00003820 	andeq	r3, r0, r0, lsr #16
    1abc:	2b9c0100 	blcs	fe701ec4 <GPIO_Ports+0xde6fe0f0>
    1ac0:	18000009 	stmdane	r0, {r0, r3}
    1ac4:	000010a3 	andeq	r1, r0, r3, lsr #1
    1ac8:	0d03b001 	stceq	0, cr11, [r3, #-4]
    1acc:	02000006 	andeq	r0, r0, #6
    1ad0:	2e187491 	cfcmpscs	r7, mvf8, mvf1
    1ad4:	01000010 	tsteq	r0, r0, lsl r0
    1ad8:	009703b0 			; <UNDEFINED> instruction: 0x009703b0
    1adc:	91020000 	mrsls	r0, (UNDEF: 2)
    1ae0:	a81a0073 	ldmdage	sl, {r0, r1, r4, r5, r6}
    1ae4:	01000010 	tsteq	r0, r0, lsl r0
    1ae8:	1092037e 	addsne	r0, r2, lr, ror r3
    1aec:	01aa2000 			; <UNDEFINED> instruction: 0x01aa2000
    1af0:	9c010000 	stcls	0, cr0, [r1], {-0}
    1af4:	0000096f 	andeq	r0, r0, pc, ror #18
    1af8:	0010a318 	andseq	sl, r0, r8, lsl r3
    1afc:	037e0100 	cmneq	lr, #0, 2
    1b00:	0000060d 	andeq	r0, r0, sp, lsl #12
    1b04:	18749102 	ldmdane	r4!, {r1, r8, ip, pc}^
    1b08:	0000102e 	andeq	r1, r0, lr, lsr #32
    1b0c:	97037e01 	strls	r7, [r3, -r1, lsl #28]
    1b10:	02000000 	andeq	r0, r0, #0
    1b14:	0d187391 	ldceq	3, cr7, [r8, #-580]	; 0xfffffdbc
    1b18:	0100000e 	tsteq	r0, lr
    1b1c:	096f037e 	stmdbeq	pc!, {r1, r2, r3, r4, r5, r6, r8, r9}^	; <UNPREDICTABLE>
    1b20:	91020000 	mrsls	r0, (UNDEF: 2)
    1b24:	041b006c 	ldreq	r0, [fp], #-108	; 0xffffff94
    1b28:	00000585 	andeq	r0, r0, r5, lsl #11
    1b2c:	000f6a1a 	andeq	r6, pc, sl, lsl sl	; <UNPREDICTABLE>
    1b30:	034e0100 	movteq	r0, #57600	; 0xe100
    1b34:	2000103c 	andcs	r1, r0, ip, lsr r0
    1b38:	00000056 	andeq	r0, r0, r6, asr r0
    1b3c:	09aa9c01 	stmibeq	sl!, {r0, sl, fp, ip, pc}
    1b40:	a3180000 	tstge	r8, #0
    1b44:	01000010 	tsteq	r0, r0, lsl r0
    1b48:	060d034e 	streq	r0, [sp], -lr, asr #6
    1b4c:	91020000 	mrsls	r0, (UNDEF: 2)
    1b50:	10bc1874 	adcsne	r1, ip, r4, ror r8
    1b54:	4e010000 	cdpmi	0, 0, cr0, cr1, cr0, {0}
    1b58:	00009703 	andeq	r9, r0, r3, lsl #14
    1b5c:	73910200 	orrsvc	r0, r1, #0, 4
    1b60:	0ef51d00 	cdpeq	13, 15, cr1, cr5, cr0, {0}
    1b64:	17010000 	strne	r0, [r1, -r0]
    1b68:	00009703 	andeq	r9, r0, r3, lsl #14
    1b6c:	000f6600 	andeq	r6, pc, r0, lsl #12
    1b70:	0000d620 	andeq	sp, r0, r0, lsr #12
    1b74:	f29c0100 	vaddw.s16	q0, q6, d0
    1b78:	18000009 	stmdane	r0, {r0, r3}
    1b7c:	000010a3 	andeq	r1, r0, r3, lsr #1
    1b80:	0d031701 	stceq	7, cr1, [r3, #-4]
    1b84:	02000006 	andeq	r0, r0, #6
    1b88:	b4186c91 	ldrlt	r6, [r8], #-3217	; 0xfffff36f
    1b8c:	01000010 	tsteq	r0, r0, lsl r0
    1b90:	00970317 	addseq	r0, r7, r7, lsl r3
    1b94:	91020000 	mrsls	r0, (UNDEF: 2)
    1b98:	00fa196b 	rscseq	r1, sl, fp, ror #18
    1b9c:	19010000 	stmdbne	r1, {}	; <UNPREDICTABLE>
    1ba0:	0000bd03 	andeq	fp, r0, r3, lsl #26
    1ba4:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    1ba8:	0fdd1d00 	svceq	0x00dd1d00
    1bac:	ce010000 	cdpgt	0, 0, cr0, cr1, cr0, {0}
    1bb0:	00009702 	andeq	r9, r0, r2, lsl #14
    1bb4:	000d8400 	andeq	r8, sp, r0, lsl #8
    1bb8:	0001e220 	andeq	lr, r1, r0, lsr #4
    1bbc:	3a9c0100 	bcc	fe701fc4 <GPIO_Ports+0xde6fe1f0>
    1bc0:	1800000a 	stmdane	r0, {r1, r3}
    1bc4:	000010a3 	andeq	r1, r0, r3, lsr #1
    1bc8:	0d02ce01 	stceq	14, cr12, [r2, #-4]
    1bcc:	02000006 	andeq	r0, r0, #6
    1bd0:	8c186491 	cfldrshi	mvf6, [r8], {145}	; 0x91
    1bd4:	0100000f 	tsteq	r0, pc
    1bd8:	0a3a02ce 	beq	e82718 <startup-0x1f17d8e8>
    1bdc:	91020000 	mrsls	r0, (UNDEF: 2)
    1be0:	10e81960 	rscne	r1, r8, r0, ror #18
    1be4:	d0010000 	andle	r0, r1, r0
    1be8:	00009702 	andeq	r9, r0, r2, lsl #14
    1bec:	6f910200 	svcvs	0x00910200
    1bf0:	1d041b00 	vstrne	d1, [r4, #-0]
    1bf4:	1a000005 	bne	1c10 <startup-0x1fffe3f0>
    1bf8:	00000ed4 	ldrdeq	r0, [r0], -r4
    1bfc:	bc029701 	stclt	7, cr9, [r2], {1}
    1c00:	c820000c 	stmdagt	r0!, {r2, r3}
    1c04:	01000000 	mrseq	r0, (UNDEF: 0)
    1c08:	000a759c 	muleq	sl, ip, r5
    1c0c:	10a31800 	adcne	r1, r3, r0, lsl #16
    1c10:	97010000 	strls	r0, [r1, -r0]
    1c14:	00060d02 	andeq	r0, r6, r2, lsl #26
    1c18:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    1c1c:	000f6118 	andeq	r6, pc, r8, lsl r1	; <UNPREDICTABLE>
    1c20:	02970100 	addseq	r0, r7, #0, 2
    1c24:	00000142 	andeq	r0, r0, r2, asr #2
    1c28:	00739102 	rsbseq	r9, r3, r2, lsl #2
    1c2c:	00105c1a 	andseq	r5, r0, sl, lsl ip
    1c30:	02780100 	rsbseq	r0, r8, #0, 2
    1c34:	20000c7c 	andcs	r0, r0, ip, ror ip
    1c38:	00000040 	andeq	r0, r0, r0, asr #32
    1c3c:	0aaa9c01 	beq	feaa8c48 <GPIO_Ports+0xdeaa4e74>
    1c40:	a3180000 	tstge	r8, #0
    1c44:	01000010 	tsteq	r0, r0, lsl r0
    1c48:	060d0278 			; <UNDEFINED> instruction: 0x060d0278
    1c4c:	91020000 	mrsls	r0, (UNDEF: 2)
    1c50:	0f611874 	svceq	0x00611874
    1c54:	78010000 	stmdavc	r1, {}	; <UNPREDICTABLE>
    1c58:	00014202 	andeq	r4, r1, r2, lsl #4
    1c5c:	73910200 	orrsvc	r0, r1, #0, 4
    1c60:	0fa91a00 	svceq	0x00a91a00
    1c64:	5e010000 	cdppl	0, 0, cr0, cr1, cr0, {0}
    1c68:	000c0a02 	andeq	r0, ip, r2, lsl #20
    1c6c:	00007220 	andeq	r7, r0, r0, lsr #4
    1c70:	d09c0100 	addsle	r0, ip, r0, lsl #2
    1c74:	1800000a 	stmdane	r0, {r1, r3}
    1c78:	00000f08 	andeq	r0, r0, r8, lsl #30
    1c7c:	97025e01 	strls	r5, [r2, -r1, lsl #28]
    1c80:	02000000 	andeq	r0, r0, #0
    1c84:	1a007791 	bne	1fad0 <startup-0x1ffe0530>
    1c88:	00000e94 	muleq	r0, r4, lr
    1c8c:	b8021c01 	stmdalt	r2, {r0, sl, fp, ip}
    1c90:	5220000b 	eorpl	r0, r0, #11
    1c94:	01000000 	mrseq	r0, (UNDEF: 0)
    1c98:	000af69c 	muleq	sl, ip, r6
    1c9c:	0f7d1800 	svceq	0x007d1800
    1ca0:	1c010000 	stcne	0, cr0, [r1], {-0}
    1ca4:	000af602 	andeq	pc, sl, r2, lsl #12
    1ca8:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    1cac:	31041b00 	tstcc	r4, r0, lsl #22
    1cb0:	1a000004 	bne	1cc8 <startup-0x1fffe338>
    1cb4:	00001137 	andeq	r1, r0, r7, lsr r1
    1cb8:	0801c001 	stmdaeq	r1, {r0, lr, pc}
    1cbc:	b020000a 	eorlt	r0, r0, sl
    1cc0:	01000001 	tsteq	r0, r1
    1cc4:	000b319c 	muleq	fp, ip, r1
    1cc8:	0eaf1800 	cdpeq	8, 10, cr1, cr15, cr0, {0}
    1ccc:	c0010000 	andgt	r0, r1, r0
    1cd0:	000b3101 	andeq	r3, fp, r1, lsl #2
    1cd4:	64910200 	ldrvs	r0, [r1], #512	; 0x200
    1cd8:	00111419 	andseq	r1, r1, r9, lsl r4
    1cdc:	01c20100 	biceq	r0, r2, r0, lsl #2
    1ce0:	000000bd 	strheq	r0, [r0], -sp
    1ce4:	006c9102 	rsbeq	r9, ip, r2, lsl #2
    1ce8:	04b1041b 	ldrteq	r0, [r1], #1051	; 0x41b
    1cec:	f11e0000 			; <UNDEFINED> instruction: 0xf11e0000
    1cf0:	0100000f 	tsteq	r0, pc
    1cf4:	000097d8 	ldrdeq	r9, [r0], -r8
    1cf8:	00084400 	andeq	r4, r8, r0, lsl #8
    1cfc:	0001c420 	andeq	ip, r1, r0, lsr #8
    1d00:	899c0100 	ldmibhi	ip, {r8}
    1d04:	1f00000b 	svcne	0x0000000b
    1d08:	000010a3 	andeq	r1, r0, r3, lsr #1
    1d0c:	060dd801 	streq	sp, [sp], -r1, lsl #16
    1d10:	91020000 	mrsls	r0, (UNDEF: 2)
    1d14:	0f7d1f6c 	svceq	0x007d1f6c
    1d18:	d8010000 	stmdale	r1, {}	; <UNPREDICTABLE>
    1d1c:	00000af6 	strdeq	r0, [r0], -r6
    1d20:	20689102 	rsbcs	r9, r8, r2, lsl #2
    1d24:	00000f4b 	andeq	r0, r0, fp, asr #30
    1d28:	0097da01 	addseq	sp, r7, r1, lsl #20
    1d2c:	91020000 	mrsls	r0, (UNDEF: 2)
    1d30:	11462077 	hvcne	25095	; 0x6207
    1d34:	db010000 	blle	41d3c <startup-0x1ffbe2c4>
    1d38:	000000bd 	strheq	r0, [r0], -sp
    1d3c:	00709102 	rsbseq	r9, r0, r2, lsl #2
    1d40:	000df421 	andeq	pc, sp, r1, lsr #8
    1d44:	f4a70100 	vld2.8	{d0[0],d1[0]}, [r7], r0
    1d48:	50200007 	eorpl	r0, r0, r7
    1d4c:	01000000 	mrseq	r0, (UNDEF: 0)
    1d50:	10a31f9c 	umlalne	r1, r3, ip, pc	; <UNPREDICTABLE>
    1d54:	a7010000 	strge	r0, [r1, -r0]
    1d58:	0000060d 	andeq	r0, r0, sp, lsl #12
    1d5c:	00749102 	rsbseq	r9, r4, r2, lsl #2
    1d60:	001b3400 	andseq	r3, fp, r0, lsl #8
    1d64:	dd000400 	cfstrsle	mvf0, [r0, #-0]
    1d68:	04000004 	streq	r0, [r0], #-4
    1d6c:	0004c101 	andeq	ip, r4, r1, lsl #2
    1d70:	18450c00 	stmdane	r5, {sl, fp}^
    1d74:	044a0000 	strbeq	r0, [sl], #-0
	...
    1d80:	06f60000 	ldrbteq	r0, [r6], r0
    1d84:	5c020000 	stcpl	0, cr0, [r2], {-0}
    1d88:	0500000c 	streq	r0, [r0, #-12]
    1d8c:	00025301 	andeq	r5, r2, r1, lsl #6
    1d90:	53c80500 	bicpl	r0, r8, #0, 10
    1d94:	03000002 	movweq	r0, #2
    1d98:	0000062d 	andeq	r0, r0, sp, lsr #12
    1d9c:	065c0372 			; <UNDEFINED> instruction: 0x065c0372
    1da0:	03740000 	cmneq	r4, #0
    1da4:	000006f1 	strdeq	r0, [r0], -r1
    1da8:	03930375 	orrseq	r0, r3, #-738197503	; 0xd4000001
    1dac:	03760000 	cmneq	r6, #0
    1db0:	000007b1 			; <UNDEFINED> instruction: 0x000007b1
    1db4:	0b49037b 	bleq	1242ba8 <startup-0x1edbd458>
    1db8:	037c0000 	cmneq	ip, #0
    1dbc:	00000d51 	andeq	r0, r0, r1, asr sp
    1dc0:	024f037e 	subeq	r0, pc, #-134217727	; 0xf8000001
    1dc4:	047f0000 	ldrbteq	r0, [pc], #-0	; 1dcc <startup-0x1fffe234>
    1dc8:	00000641 	andeq	r0, r0, r1, asr #12
    1dcc:	0ad30400 	beq	ff4c2dd4 <GPIO_Ports+0xdf4bf000>
    1dd0:	04010000 	streq	r0, [r1], #-0
    1dd4:	00000682 	andeq	r0, r0, r2, lsl #13
    1dd8:	00090402 	andeq	r0, r9, r2, lsl #8
    1ddc:	04030000 	streq	r0, [r3], #-0
    1de0:	000000cd 	andeq	r0, r0, sp, asr #1
    1de4:	0bc80404 	bleq	ff202dfc <GPIO_Ports+0xdf1ff028>
    1de8:	04050000 	streq	r0, [r5], #-0
    1dec:	00000b03 	andeq	r0, r0, r3, lsl #22
    1df0:	05cd0406 	strbeq	r0, [sp, #1030]	; 0x406
    1df4:	04070000 	streq	r0, [r7], #-0
    1df8:	00000017 	andeq	r0, r0, r7, lsl r0
    1dfc:	0d460408 	cfstrdeq	mvd0, [r6, #-32]	; 0xffffffe0
    1e00:	04090000 	streq	r0, [r9], #-0
    1e04:	0000085e 	andeq	r0, r0, lr, asr r8
    1e08:	09a0040a 	stmibeq	r0!, {r1, r3, sl}
    1e0c:	040b0000 	streq	r0, [fp], #-0
    1e10:	000008bf 			; <UNDEFINED> instruction: 0x000008bf
    1e14:	02b9040c 	adcseq	r0, r9, #12, 8	; 0xc000000
    1e18:	040d0000 	streq	r0, [sp], #-0
    1e1c:	00000bdc 	ldrdeq	r0, [r0], -ip
    1e20:	0b13040e 	bleq	4c2e60 <startup-0x1fb3d1a0>
    1e24:	040f0000 	streq	r0, [pc], #-0	; 1e2c <startup-0x1fffe1d4>
    1e28:	000005e5 	andeq	r0, r0, r5, ror #11
    1e2c:	00220410 	eoreq	r0, r2, r0, lsl r4
    1e30:	04110000 	ldreq	r0, [r1], #-0
    1e34:	00000aa3 	andeq	r0, r0, r3, lsr #21
    1e38:	05d80412 	ldrbeq	r0, [r8, #1042]	; 0x412
    1e3c:	04130000 	ldreq	r0, [r3], #-0
    1e40:	00000427 	andeq	r0, r0, r7, lsr #8
    1e44:	0cd80414 	cfldrdeq	mvd0, [r8], {20}
    1e48:	04150000 	ldreq	r0, [r5], #-0
    1e4c:	00000692 	muleq	r0, r2, r6
    1e50:	0cf30416 	cfldrdeq	mvd0, [r3], #88	; 0x58
    1e54:	04170000 	ldreq	r0, [r7], #-0
    1e58:	0000070a 	andeq	r0, r0, sl, lsl #14
    1e5c:	0c4e0418 	cfstrdeq	mvd0, [lr], {24}
    1e60:	04190000 	ldreq	r0, [r9], #-0
    1e64:	00000215 	andeq	r0, r0, r5, lsl r2
    1e68:	05b2041a 	ldreq	r0, [r2, #1050]!	; 0x41a
    1e6c:	041b0000 	ldreq	r0, [fp], #-0
    1e70:	00000124 	andeq	r0, r0, r4, lsr #2
    1e74:	0a21041c 	beq	842eec <startup-0x1f7bd114>
    1e78:	041d0000 	ldreq	r0, [sp], #-0
    1e7c:	000004b7 			; <UNDEFINED> instruction: 0x000004b7
    1e80:	056d041e 	strbeq	r0, [sp, #-1054]!	; 0xfffffbe2
    1e84:	041f0000 	ldreq	r0, [pc], #-0	; 1e8c <startup-0x1fffe174>
    1e88:	0000032b 	andeq	r0, r0, fp, lsr #6
    1e8c:	08820420 	stmeq	r2, {r5, sl}
    1e90:	04210000 	strteq	r0, [r1], #-0
    1e94:	000006ce 	andeq	r0, r0, lr, asr #13
    1e98:	078f0422 	streq	r0, [pc, r2, lsr #8]
    1e9c:	04230000 	strteq	r0, [r3], #-0
    1ea0:	0000018e 	andeq	r0, r0, lr, lsl #3
    1ea4:	0a2b0424 	beq	ac2f3c <startup-0x1f53d0c4>
    1ea8:	04250000 	strteq	r0, [r5], #-0
    1eac:	00000bee 	andeq	r0, r0, lr, ror #23
    1eb0:	025c0426 	subseq	r0, ip, #637534208	; 0x26000000
    1eb4:	04270000 	strteq	r0, [r7], #-0
    1eb8:	000009fb 	strdeq	r0, [r0], -fp
    1ebc:	09b20428 	ldmibeq	r2!, {r3, r5, sl}
    1ec0:	04290000 	strteq	r0, [r9], #-0
    1ec4:	00000843 	andeq	r0, r0, r3, asr #16
    1ec8:	0198042a 	orrseq	r0, r8, sl, lsr #8
    1ecc:	042b0000 	strteq	r0, [fp], #-0
    1ed0:	00000034 	andeq	r0, r0, r4, lsr r0
    1ed4:	05f7042c 	ldrbeq	r0, [r7, #1068]!	; 0x42c
    1ed8:	042d0000 	strteq	r0, [sp], #-0
    1edc:	00000d24 	andeq	r0, r0, r4, lsr #26
    1ee0:	0d7b042e 	cfldrdeq	mvd0, [fp, #-184]!	; 0xffffff48
    1ee4:	042f0000 	strteq	r0, [pc], #-0	; 1eec <startup-0x1fffe114>
    1ee8:	00000af9 	strdeq	r0, [r0], -r9
    1eec:	0d310430 	cfldrseq	mvf0, [r1, #-192]!	; 0xffffff40
    1ef0:	04310000 	ldrteq	r0, [r1], #-0
    1ef4:	00000389 	andeq	r0, r0, r9, lsl #7
    1ef8:	00c30432 	sbceq	r0, r3, r2, lsr r4
    1efc:	04330000 	ldrteq	r0, [r3], #-0
    1f00:	0000082f 	andeq	r0, r0, pc, lsr #16
    1f04:	06ff0434 			; <UNDEFINED> instruction: 0x06ff0434
    1f08:	04350000 	ldrteq	r0, [r5], #-0
    1f0c:	00000869 	andeq	r0, r0, r9, ror #16
    1f10:	074f0436 	smlaldxeq	r0, pc, r6, r4	; <UNPREDICTABLE>
    1f14:	04370000 	ldrteq	r0, [r7], #-0
    1f18:	000006b7 			; <UNDEFINED> instruction: 0x000006b7
    1f1c:	009b0438 	addseq	r0, fp, r8, lsr r4
    1f20:	04390000 	ldrteq	r0, [r9], #-0
    1f24:	00000dd2 	ldrdeq	r0, [r0], -r2
    1f28:	08d1043a 	ldmeq	r1, {r1, r3, r4, r5, sl}^
    1f2c:	043b0000 	ldrteq	r0, [fp], #-0
    1f30:	000002ed 	andeq	r0, r0, sp, ror #5
    1f34:	0b96043c 	bleq	fe58302c <GPIO_Ports+0xde57f258>
    1f38:	043d0000 	ldrteq	r0, [sp], #-0
    1f3c:	00000767 	andeq	r0, r0, r7, ror #14
    1f40:	08e3043e 	stmiaeq	r3!, {r1, r2, r3, r4, r5, sl}^
    1f44:	043f0000 	ldrteq	r0, [pc], #-0	; 1f4c <startup-0x1fffe0b4>
    1f48:	0000015a 	andeq	r0, r0, sl, asr r1
    1f4c:	0a950440 	beq	fe543054 <GPIO_Ports+0xde53f280>
    1f50:	04410000 	strbeq	r0, [r1], #-0
    1f54:	0000035a 	andeq	r0, r0, sl, asr r3
    1f58:	06210442 	strteq	r0, [r1], -r2, asr #8
    1f5c:	04430000 	strbeq	r0, [r3], #-0
    1f60:	000001f6 	strdeq	r0, [r0], -r6
    1f64:	0b250444 	bleq	94307c <startup-0x1f6bcf84>
    1f68:	04450000 	strbeq	r0, [r5], #-0
    1f6c:	0000060f 	andeq	r0, r0, pc, lsl #12
    1f70:	01680446 	cmneq	r8, r6, asr #8
    1f74:	04470000 	strbeq	r0, [r7], #-0
    1f78:	00000b69 	andeq	r0, r0, r9, ror #22
    1f7c:	09e40448 	stmibeq	r4!, {r3, r6, sl}^
    1f80:	04490000 	strbeq	r0, [r9], #-0
    1f84:	00000c99 	muleq	r0, r9, ip
    1f88:	0d5d044a 	cfldrdeq	mvd0, [sp, #-296]	; 0xfffffed8
    1f8c:	044b0000 	strbeq	r0, [fp], #-0
    1f90:	0000064b 	andeq	r0, r0, fp, asr #12
    1f94:	0775044c 	ldrbeq	r0, [r5, -ip, asr #8]!
    1f98:	044d0000 	strbeq	r0, [sp], #-0
    1f9c:	000000f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    1fa0:	09f1044e 	ldmibeq	r1!, {r1, r2, r3, r6, sl}^
    1fa4:	044f0000 	strbeq	r0, [pc], #-0	; 1fac <startup-0x1fffe054>
    1fa8:	000005bf 			; <UNDEFINED> instruction: 0x000005bf
    1fac:	08260450 	stmdaeq	r6!, {r4, r6, sl}
    1fb0:	00510000 	subseq	r0, r1, r0
    1fb4:	e1060105 	tst	r6, r5, lsl #2
    1fb8:	06000002 	streq	r0, [r0], -r2
    1fbc:	000006a0 	andeq	r0, r0, r0, lsr #13
    1fc0:	25032f05 	strcs	r2, [r3, #-3845]	; 0xfffff0fb
    1fc4:	07000000 	streq	r0, [r0, -r0]
    1fc8:	00000184 	andeq	r0, r0, r4, lsl #3
    1fcc:	02712b06 	rsbseq	r2, r1, #6144	; 0x1800
    1fd0:	01050000 	mrseq	r0, (UNDEF: 5)
    1fd4:	0002df08 	andeq	sp, r2, r8, lsl #30
    1fd8:	05020500 	streq	r0, [r2, #-1280]	; 0xfffffb00
    1fdc:	00000bbe 			; <UNDEFINED> instruction: 0x00000bbe
    1fe0:	00040d07 	andeq	r0, r4, r7, lsl #26
    1fe4:	8a390600 	bhi	e437ec <startup-0x1f1bc814>
    1fe8:	05000002 	streq	r0, [r0, #-2]
    1fec:	0d110702 	ldceq	7, cr0, [r1, #-8]
    1ff0:	8d070000 	stchi	0, cr0, [r7, #-0]
    1ff4:	0600000d 	streq	r0, [r0], -sp
    1ff8:	00029c4d 	andeq	r9, r2, sp, asr #24
    1ffc:	05040500 	streq	r0, [r4, #-1280]	; 0xfffffb00
    2000:	0000075e 	andeq	r0, r0, lr, asr r7
    2004:	00073207 	andeq	r3, r7, r7, lsl #4
    2008:	ae4f0600 	cdpge	6, 4, cr0, cr15, cr0, {0}
    200c:	05000002 	streq	r0, [r0, #-2]
    2010:	0a0f0704 	beq	3c3c28 <startup-0x1fc3c3d8>
    2014:	08050000 	stmdaeq	r5, {}	; <UNPREDICTABLE>
    2018:	00075905 	andeq	r5, r7, r5, lsl #18
    201c:	07080500 	streq	r0, [r8, -r0, lsl #10]
    2020:	00000a0a 	andeq	r0, r0, sl, lsl #20
    2024:	69050408 	stmdbvs	r5, {r3, sl}
    2028:	0900746e 	stmdbeq	r0, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
    202c:	000002c3 	andeq	r0, r0, r3, asr #5
    2030:	14070405 	strne	r0, [r7], #-1029	; 0xfffffbfb
    2034:	0700000a 	streq	r0, [r0, -sl]
    2038:	00000186 	andeq	r0, r0, r6, lsl #3
    203c:	02661807 	rsbeq	r1, r6, #458752	; 0x70000
    2040:	d6090000 	strle	r0, [r9], -r0
    2044:	0a000002 	beq	2054 <startup-0x1fffdfac>
    2048:	000002d6 	ldrdeq	r0, [r0], -r6
    204c:	0002e609 	andeq	lr, r2, r9, lsl #12
    2050:	040f0700 	streq	r0, [pc], #-1792	; 2058 <startup-0x1fffdfa8>
    2054:	24070000 	strcs	r0, [r7], #-0
    2058:	0000027f 	andeq	r0, r0, pc, ror r2
    205c:	0002f009 	andeq	pc, r2, r9
    2060:	0d8f0700 	stceq	7, cr0, [pc]	; 2068 <startup-0x1fffdf98>
    2064:	2c070000 	stccs	0, cr0, [r7], {-0}
    2068:	00000291 	muleq	r0, r1, r2
    206c:	00030009 	andeq	r0, r3, r9
    2070:	07340700 	ldreq	r0, [r4, -r0, lsl #14]!
    2074:	30070000 	andcc	r0, r7, r0
    2078:	000002a3 	andeq	r0, r0, r3, lsr #5
    207c:	00031009 	andeq	r1, r3, r9
    2080:	031b0a00 	tsteq	fp, #0, 20
    2084:	040b0000 	streq	r0, [fp], #-0
    2088:	01a0010e 	lsleq	r0, lr, #2
    208c:	000003e1 	andeq	r0, r0, r1, ror #7
    2090:	000d970c 	andeq	r9, sp, ip, lsl #14
    2094:	01a20100 			; <UNDEFINED> instruction: 0x01a20100
    2098:	000003f1 	strdeq	r0, [r0], -r1
    209c:	02cb0c00 	sbceq	r0, fp, #0, 24
    20a0:	a3010000 	movwge	r0, #4096	; 0x1000
    20a4:	0003f601 	andeq	pc, r3, r1, lsl #12
    20a8:	bd0c2000 	stclt	0, cr2, [ip, #-0]
    20ac:	0100000a 	tsteq	r0, sl
    20b0:	03f101a4 	mvnseq	r0, #164, 2	; 0x29
    20b4:	0c800000 	stceq	0, cr0, [r0], {0}
    20b8:	00000000 	andeq	r0, r0, r0
    20bc:	f601a501 			; <UNDEFINED> instruction: 0xf601a501
    20c0:	a0000003 	andge	r0, r0, r3
    20c4:	000d410d 	andeq	r4, sp, sp, lsl #2
    20c8:	01a60100 			; <UNDEFINED> instruction: 0x01a60100
    20cc:	000003f1 	strdeq	r0, [r0], -r1
    20d0:	750d0100 	strvc	r0, [sp, #-256]	; 0xffffff00
    20d4:	01000003 	tsteq	r0, r3
    20d8:	03f601a7 	mvnseq	r0, #-1073741783	; 0xc0000029
    20dc:	01200000 			; <UNDEFINED> instruction: 0x01200000
    20e0:	0001380d 	andeq	r3, r1, sp, lsl #16
    20e4:	01a80100 			; <UNDEFINED> instruction: 0x01a80100
    20e8:	000003f1 	strdeq	r0, [r0], -r1
    20ec:	7f0d0180 	svcvc	0x000d0180
    20f0:	01000003 	tsteq	r0, r3
    20f4:	03f601a9 	mvnseq	r0, #1073741866	; 0x4000002a
    20f8:	01a00000 	moveq	r0, r0
    20fc:	0003180d 	andeq	r1, r3, sp, lsl #16
    2100:	01aa0100 			; <UNDEFINED> instruction: 0x01aa0100
    2104:	000003f1 	strdeq	r0, [r0], -r1
    2108:	ff0d0200 			; <UNDEFINED> instruction: 0xff0d0200
    210c:	01000002 	tsteq	r0, r2
    2110:	040601ab 	streq	r0, [r6], #-427	; 0xfffffe55
    2114:	02200000 	eoreq	r0, r0, #0
    2118:	0050490e 	subseq	r4, r0, lr, lsl #18
    211c:	2601ac01 	strcs	sl, [r1], -r1, lsl #24
    2120:	00000004 	andeq	r0, r0, r4
    2124:	03090d03 	movweq	r0, #40195	; 0x9d03
    2128:	ad010000 	stcge	0, cr0, [r1, #-0]
    212c:	00042b01 	andeq	r2, r4, r1, lsl #22
    2130:	0d03f000 	stceq	0, cr15, [r3, #-0]
    2134:	00000568 	andeq	r0, r0, r8, ror #10
    2138:	1b01ae01 	blne	6d944 <startup-0x1ff926bc>
    213c:	00000003 	andeq	r0, r0, r3
    2140:	1b0f000e 	blne	3c2180 <startup-0x1fc3de80>
    2144:	f1000003 	cps	#3
    2148:	10000003 	andne	r0, r0, r3
    214c:	000002cf 	andeq	r0, r0, pc, asr #5
    2150:	e1090007 	tst	r9, r7
    2154:	0f000003 	svceq	0x00000003
    2158:	00000310 	andeq	r0, r0, r0, lsl r3
    215c:	00000406 	andeq	r0, r0, r6, lsl #8
    2160:	0002cf10 	andeq	ip, r2, r0, lsl pc
    2164:	0f001700 	svceq	0x00001700
    2168:	00000310 	andeq	r0, r0, r0, lsl r3
    216c:	00000416 	andeq	r0, r0, r6, lsl r4
    2170:	0002cf10 	andeq	ip, r2, r0, lsl pc
    2174:	0f003700 	svceq	0x00003700
    2178:	000002e1 	andeq	r0, r0, r1, ror #5
    217c:	00000426 	andeq	r0, r0, r6, lsr #8
    2180:	0002cf10 	andeq	ip, r2, r0, lsl pc
    2184:	0900ef00 	stmdbeq	r0, {r8, r9, sl, fp, sp, lr, pc}
    2188:	00000416 	andeq	r0, r0, r6, lsl r4
    218c:	0003100f 	andeq	r1, r3, pc
    2190:	00043c00 	andeq	r3, r4, r0, lsl #24
    2194:	02cf1100 	sbceq	r1, pc, #0, 2
    2198:	02830000 	addeq	r0, r3, #0
    219c:	09ca0600 	stmibeq	sl, {r9, sl}^
    21a0:	af010000 	svcge	0x00010000
    21a4:	00032501 	andeq	r2, r3, r1, lsl #10
    21a8:	018c1200 	orreq	r1, ip, r0, lsl #4
    21ac:	056301c0 	strbeq	r0, [r3, #-448]!	; 0xfffffe40
    21b0:	f00c0000 			; <UNDEFINED> instruction: 0xf00c0000
    21b4:	01000001 	tsteq	r0, r1
    21b8:	032001c2 			; <UNDEFINED> instruction: 0x032001c2
    21bc:	0c000000 	stceq	0, cr0, [r0], {-0}
    21c0:	00000268 	andeq	r0, r0, r8, ror #4
    21c4:	1b01c301 	blne	72dd0 <startup-0x1ff8d230>
    21c8:	04000003 	streq	r0, [r0], #-3
    21cc:	0000be0c 	andeq	fp, r0, ip, lsl #28
    21d0:	01c40100 	biceq	r0, r4, r0, lsl #2
    21d4:	0000031b 	andeq	r0, r0, fp, lsl r3
    21d8:	01de0c08 	bicseq	r0, lr, r8, lsl #24
    21dc:	c5010000 	strgt	r0, [r1, #-0]
    21e0:	00031b01 	andeq	r1, r3, r1, lsl #22
    21e4:	53130c00 	tstpl	r3, #0, 24
    21e8:	01005243 	tsteq	r0, r3, asr #4
    21ec:	031b01c6 	tsteq	fp, #-2147483599	; 0x80000031
    21f0:	13100000 	tstne	r0, #0
    21f4:	00524343 	subseq	r4, r2, r3, asr #6
    21f8:	1b01c701 	blne	73e04 <startup-0x1ff8c1fc>
    21fc:	14000003 	strne	r0, [r0], #-3
    2200:	50485313 	subpl	r5, r8, r3, lsl r3
    2204:	01c80100 	biceq	r0, r8, r0, lsl #2
    2208:	00000573 	andeq	r0, r0, r3, ror r5
    220c:	05620c18 	strbeq	r0, [r2, #-3096]!	; 0xfffff3e8
    2210:	c9010000 	stmdbgt	r1, {}	; <UNPREDICTABLE>
    2214:	00031b01 	andeq	r1, r3, r1, lsl #22
    2218:	0e0c2400 	cfcpyseq	mvf2, mvf12
    221c:	0100000b 	tsteq	r0, fp
    2220:	031b01ca 	tsteq	fp, #-2147483598	; 0x80000032
    2224:	0c280000 	stceq	0, cr0, [r8], #-0
    2228:	0000048d 	andeq	r0, r0, sp, lsl #9
    222c:	1b01cb01 	blne	74e38 <startup-0x1ff8b1c8>
    2230:	2c000003 	stccs	0, cr0, [r0], {3}
    2234:	0003cd0c 	andeq	ip, r3, ip, lsl #26
    2238:	01cc0100 	biceq	r0, ip, r0, lsl #2
    223c:	0000031b 	andeq	r0, r0, fp, lsl r3
    2240:	0bb80c30 	bleq	fee05308 <GPIO_Ports+0xdee01534>
    2244:	cd010000 	stcgt	0, cr0, [r1, #-0]
    2248:	00031b01 	andeq	r1, r3, r1, lsl #22
    224c:	9e0c3400 	cfcpysls	mvf3, mvf12
    2250:	01000008 	tsteq	r0, r8
    2254:	031b01ce 	tsteq	fp, #-2147483597	; 0x80000033
    2258:	0c380000 	ldceq	0, cr0, [r8], #-0
    225c:	00000adc 	ldrdeq	r0, [r0], -ip
    2260:	1b01cf01 	blne	75e6c <startup-0x1ff8a194>
    2264:	3c000003 	stccc	0, cr0, [r0], {3}
    2268:	52465013 	subpl	r5, r6, #19
    226c:	01d00100 	bicseq	r0, r0, r0, lsl #2
    2270:	0000058d 	andeq	r0, r0, sp, lsl #11
    2274:	46441340 	strbmi	r1, [r4], -r0, asr #6
    2278:	d1010052 	qaddle	r0, r2, r1
    227c:	00032001 	andeq	r2, r3, r1
    2280:	41134800 	tstmi	r3, r0, lsl #16
    2284:	01005244 	tsteq	r0, r4, asr #4
    2288:	032001d2 			; <UNDEFINED> instruction: 0x032001d2
    228c:	0c4c0000 	mareq	acc0, r0, ip
    2290:	00000bb3 			; <UNDEFINED> instruction: 0x00000bb3
    2294:	a701d301 	strge	sp, [r1, -r1, lsl #6]
    2298:	50000005 	andpl	r0, r0, r5
    229c:	000bd70c 	andeq	sp, fp, ip, lsl #14
    22a0:	01d40100 	bicseq	r0, r4, r0, lsl #2
    22a4:	000005c1 	andeq	r0, r0, r1, asr #11
    22a8:	02cb0c60 	sbceq	r0, fp, #96, 24	; 0x6000
    22ac:	d5010000 	strle	r0, [r1, #-0]
    22b0:	0005c601 	andeq	ip, r5, r1, lsl #12
    22b4:	3b0c7400 	blcc	31f2bc <startup-0x1fce0d44>
    22b8:	0100000d 	tsteq	r0, sp
    22bc:	031b01d6 	tsteq	fp, #-2147483595	; 0x80000035
    22c0:	00880000 	addeq	r0, r8, r0
    22c4:	0002e10f 	andeq	lr, r2, pc, lsl #2
    22c8:	00057300 	andeq	r7, r5, r0, lsl #6
    22cc:	02cf1000 	sbceq	r1, pc, #0
    22d0:	000b0000 	andeq	r0, fp, r0
    22d4:	00056309 	andeq	r6, r5, r9, lsl #6
    22d8:	03200f00 	nopeq	{0}	; <UNPREDICTABLE>
    22dc:	05880000 	streq	r0, [r8]
    22e0:	cf100000 	svcgt	0x00100000
    22e4:	01000002 	tsteq	r0, r2
    22e8:	05780a00 	ldrbeq	r0, [r8, #-2560]!	; 0xfffff600
    22ec:	88090000 	stmdahi	r9, {}	; <UNPREDICTABLE>
    22f0:	0f000005 	svceq	0x00000005
    22f4:	00000320 	andeq	r0, r0, r0, lsr #6
    22f8:	000005a2 	andeq	r0, r0, r2, lsr #11
    22fc:	0002cf10 	andeq	ip, r2, r0, lsl pc
    2300:	0a000300 	beq	2f08 <startup-0x1fffd0f8>
    2304:	00000592 	muleq	r0, r2, r5
    2308:	0005a209 	andeq	sl, r5, r9, lsl #4
    230c:	03200f00 	nopeq	{0}	; <UNPREDICTABLE>
    2310:	05bc0000 	ldreq	r0, [ip, #0]!
    2314:	cf100000 	svcgt	0x00100000
    2318:	04000002 	streq	r0, [r0], #-2
    231c:	05ac0a00 	streq	r0, [ip, #2560]!	; 0xa00
    2320:	bc090000 	stclt	0, cr0, [r9], {-0}
    2324:	0f000005 	svceq	0x00000005
    2328:	00000310 	andeq	r0, r0, r0, lsl r3
    232c:	000005d6 	ldrdeq	r0, [r0], -r6
    2330:	0002cf10 	andeq	ip, r2, r0, lsl pc
    2334:	06000400 	streq	r0, [r0], -r0, lsl #8
    2338:	000003b3 			; <UNDEFINED> instruction: 0x000003b3
    233c:	4801d701 	stmdami	r1, {r0, r8, r9, sl, ip, lr, pc}
    2340:	12000004 	andne	r0, r0, #4
    2344:	02bf0110 	adcseq	r0, pc, #16, 2
    2348:	00000620 	andeq	r0, r0, r0, lsr #12
    234c:	00167a0c 	andseq	r7, r6, ip, lsl #20
    2350:	02c10100 	sbceq	r0, r1, #0, 2
    2354:	0000031b 	andeq	r0, r0, fp, lsl r3
    2358:	18d80c00 	ldmne	r8, {sl, fp}^
    235c:	c2010000 	andgt	r0, r1, #0
    2360:	00031b02 	andeq	r1, r3, r2, lsl #22
    2364:	56130400 	ldrpl	r0, [r3], -r0, lsl #8
    2368:	01004c41 	tsteq	r0, r1, asr #24
    236c:	031b02c3 	tsteq	fp, #805306380	; 0x3000000c
    2370:	0c080000 	stceq	0, cr0, [r8], {-0}
    2374:	00001892 	muleq	r0, r2, r8
    2378:	2002c401 	andcs	ip, r2, r1, lsl #8
    237c:	0c000003 	stceq	0, cr0, [r0], {3}
    2380:	17600600 	strbne	r0, [r0, -r0, lsl #12]!
    2384:	c5010000 	strgt	r0, [r1, #-0]
    2388:	0005e202 	andeq	lr, r5, r2, lsl #4
    238c:	03100f00 	tsteq	r0, #0, 30
    2390:	063c0000 	ldrteq	r0, [ip], -r0
    2394:	cf100000 	svcgt	0x00100000
    2398:	01000002 	tsteq	r0, r2
    239c:	0c611400 	cfstrdeq	mvd1, [r1], #-0
    23a0:	fa010000 	blx	423a8 <startup-0x1ffbdc58>
    23a4:	00030b06 	andeq	r0, r3, r6, lsl #22
    23a8:	06721500 	ldrbteq	r1, [r2], -r0, lsl #10
    23ac:	3b080000 	blcc	2023b4 <startup-0x1fdfdc4c>
    23b0:	00000310 	andeq	r0, r0, r0, lsl r3
    23b4:	71010716 	tstvc	r1, r6, lsl r7
    23b8:	05000002 	streq	r0, [r0, #-2]
    23bc:	066e035d 			; <UNDEFINED> instruction: 0x066e035d
    23c0:	9e040000 	cdpls	0, 0, cr0, cr4, cr0, {0}
    23c4:	0000001e 	andeq	r0, r0, lr, lsl r0
    23c8:	54455317 	strbpl	r5, [r5], #-791	; 0xfffffce9
    23cc:	06000100 	streq	r0, [r0], -r0, lsl #2
    23d0:	000015eb 	andeq	r1, r0, fp, ror #11
    23d4:	53035d05 	movwpl	r5, #15621	; 0x3d05
    23d8:	06000006 	streq	r0, [r0], -r6
    23dc:	000010c9 	andeq	r1, r0, r9, asr #1
    23e0:	53035d05 	movwpl	r5, #15621	; 0x3d05
    23e4:	16000006 	strne	r0, [r0], -r6
    23e8:	02710107 	rsbseq	r0, r1, #-1073741823	; 0xc0000001
    23ec:	5f050000 	svcpl	0x00050000
    23f0:	0006a103 	andeq	sl, r6, r3, lsl #2
    23f4:	09510400 	ldmdbeq	r1, {sl}^
    23f8:	04000000 	streq	r0, [r0], #-0
    23fc:	00000c00 	andeq	r0, r0, r0, lsl #24
    2400:	d4060001 	strle	r0, [r6], #-1
    2404:	05000009 	streq	r0, [r0, #-9]
    2408:	0686035f 	pkhtbeq	r0, r6, pc, asr #6	; <UNPREDICTABLE>
    240c:	07160000 	ldreq	r0, [r6, -r0]
    2410:	00027101 	andeq	r7, r2, r1, lsl #2
    2414:	03620500 	cmneq	r2, #0, 10
    2418:	000006c8 	andeq	r0, r0, r8, asr #13
    241c:	00156804 	andseq	r6, r5, r4, lsl #16
    2420:	12040000 	andne	r0, r4, #0
    2424:	01000018 	tsteq	r0, r8, lsl r0
    2428:	17a60600 	strne	r0, [r6, r0, lsl #12]!
    242c:	62050000 	andvs	r0, r5, #0
    2430:	0006ad03 	andeq	sl, r6, r3, lsl #26
    2434:	05281200 	streq	r1, [r8, #-512]!	; 0xfffffe00
    2438:	076005c3 	strbeq	r0, [r0, -r3, asr #11]!
    243c:	c10c0000 	mrsgt	r0, (UNDEF: 12)
    2440:	0500000c 	streq	r0, [r0, #-12]
    2444:	031b05c5 	tsteq	fp, #826277888	; 0x31400000
    2448:	0c000000 	stceq	0, cr0, [r0], {-0}
    244c:	00000ae1 	andeq	r0, r0, r1, ror #21
    2450:	1b05c605 	blne	173c6c <startup-0x1fe8c394>
    2454:	04000003 	streq	r0, [r0], #-3
    2458:	0006e90c 	andeq	lr, r6, ip, lsl #18
    245c:	05c70500 	strbeq	r0, [r7, #1280]	; 0x500
    2460:	0000031b 	andeq	r0, r0, fp, lsl r3
    2464:	07810c08 	streq	r0, [r1, r8, lsl #24]
    2468:	c8050000 	stmdagt	r5, {}	; <UNPREDICTABLE>
    246c:	00031b05 	andeq	r1, r3, r5, lsl #22
    2470:	49130c00 	ldmdbmi	r3, {sl, fp}
    2474:	05005244 	streq	r5, [r0, #-580]	; 0xfffffdbc
    2478:	031b05c9 	tsteq	fp, #843055104	; 0x32400000
    247c:	13100000 	tstne	r0, #0
    2480:	0052444f 	subseq	r4, r2, pc, asr #8
    2484:	1b05ca05 	blne	174ca0 <startup-0x1fe8b360>
    2488:	14000003 	strne	r0, [r0], #-3
    248c:	0007c30c 	andeq	ip, r7, ip, lsl #6
    2490:	05cb0500 	strbeq	r0, [fp, #1280]	; 0x500
    2494:	000002fb 	strdeq	r0, [r0], -fp
    2498:	07bd0c18 			; <UNDEFINED> instruction: 0x07bd0c18
    249c:	cc050000 	stcgt	0, cr0, [r5], {-0}
    24a0:	0002fb05 	andeq	pc, r2, r5, lsl #22
    24a4:	c90c1a00 	stmdbgt	ip, {r9, fp, ip}
    24a8:	05000006 	streq	r0, [r0, #-6]
    24ac:	031b05cd 	tsteq	fp, #859832320	; 0x33400000
    24b0:	131c0000 	tstne	ip, #0
    24b4:	00524641 	subseq	r4, r2, r1, asr #12
    24b8:	7005ce05 	andvc	ip, r5, r5, lsl #28
    24bc:	20000007 	andcs	r0, r0, r7
    24c0:	031b0f00 	tsteq	fp, #0, 30
    24c4:	07700000 	ldrbeq	r0, [r0, -r0]!
    24c8:	cf100000 	svcgt	0x00100000
    24cc:	01000002 	tsteq	r0, r2
    24d0:	07600900 	strbeq	r0, [r0, -r0, lsl #18]!
    24d4:	41060000 	mrsmi	r0, (UNDEF: 6)
    24d8:	0500000c 	streq	r0, [r0, #-12]
    24dc:	06d405cf 	ldrbeq	r0, [r4], pc, asr #11
    24e0:	98120000 	ldmdals	r2, {}	; <UNPREDICTABLE>
    24e4:	44066405 	strmi	r6, [r6], #-1029	; 0xfffffbfb
    24e8:	13000009 	movwne	r0, #9
    24ec:	05005243 	streq	r5, [r0, #-579]	; 0xfffffdbd
    24f0:	031b0666 	tsteq	fp, #106954752	; 0x6600000
    24f4:	0c000000 	stceq	0, cr0, [r0], {-0}
    24f8:	0000158c 	andeq	r1, r0, ip, lsl #11
    24fc:	1b066705 	blne	19c118 <startup-0x1fe63ee8>
    2500:	04000003 	streq	r0, [r0], #-3
    2504:	0019d40c 	andseq	sp, r9, ip, lsl #8
    2508:	06680500 	strbteq	r0, [r8], -r0, lsl #10
    250c:	0000031b 	andeq	r0, r0, fp, lsl r3
    2510:	49431308 	stmdbmi	r3, {r3, r8, r9, ip}^
    2514:	69050052 	stmdbvs	r5, {r1, r4, r6}
    2518:	00031b06 	andeq	r1, r3, r6, lsl #22
    251c:	ad0c0c00 	stcge	12, cr0, [ip, #-0]
    2520:	05000013 	streq	r0, [r0, #-19]	; 0xffffffed
    2524:	031b066a 	tsteq	fp, #111149056	; 0x6a00000
    2528:	0c100000 	ldceq	0, cr0, [r0], {-0}
    252c:	000018f4 	strdeq	r1, [r0], -r4
    2530:	1b066b05 	blne	19d14c <startup-0x1fe62eb4>
    2534:	14000003 	strne	r0, [r0], #-3
    2538:	00179d0c 	andseq	r9, r7, ip, lsl #26
    253c:	066c0500 	strbteq	r0, [ip], -r0, lsl #10
    2540:	0000031b 	andeq	r0, r0, fp, lsl r3
    2544:	02cb0c18 	sbceq	r0, fp, #24, 24	; 0x1800
    2548:	6d050000 	stcvs	0, cr0, [r5, #-0]
    254c:	00031006 	andeq	r1, r3, r6
    2550:	c90c1c00 	stmdbgt	ip, {sl, fp, ip}
    2554:	05000017 	streq	r0, [r0, #-23]	; 0xffffffe9
    2558:	031b066e 	tsteq	fp, #115343360	; 0x6e00000
    255c:	0c200000 	stceq	0, cr0, [r0], #-0
    2560:	000015db 	ldrdeq	r1, [r0], -fp
    2564:	1b066f05 	blne	19e180 <startup-0x1fe61e80>
    2568:	24000003 	strcs	r0, [r0], #-3
    256c:	0002d50c 	andeq	sp, r2, ip, lsl #10
    2570:	06700500 	ldrbteq	r0, [r0], -r0, lsl #10
    2574:	0000062c 	andeq	r0, r0, ip, lsr #12
    2578:	18d00c28 	ldmne	r0, {r3, r5, sl, fp}^
    257c:	71050000 	mrsvc	r0, (UNDEF: 5)
    2580:	00031b06 	andeq	r1, r3, r6, lsl #22
    2584:	f50c3000 			; <UNDEFINED> instruction: 0xf50c3000
    2588:	05000013 	streq	r0, [r0, #-19]	; 0xffffffed
    258c:	031b0672 	tsteq	fp, #119537664	; 0x7200000
    2590:	0c340000 	ldceq	0, cr0, [r4], #-0
    2594:	00001a56 	andeq	r1, r0, r6, asr sl
    2598:	1b067305 	blne	19f1b4 <startup-0x1fe60e4c>
    259c:	38000003 	stmdacc	r0, {r0, r1}
    25a0:	0003750c 	andeq	r7, r3, ip, lsl #10
    25a4:	06740500 	ldrbteq	r0, [r4], -r0, lsl #10
    25a8:	00000310 	andeq	r0, r0, r0, lsl r3
    25ac:	17d20c3c 			; <UNDEFINED> instruction: 0x17d20c3c
    25b0:	75050000 	strvc	r0, [r5, #-0]
    25b4:	00031b06 	andeq	r1, r3, r6, lsl #22
    25b8:	070c4000 	streq	r4, [ip, -r0]
    25bc:	05000013 	streq	r0, [r0, #-19]	; 0xffffffed
    25c0:	031b0676 	tsteq	fp, #123731968	; 0x7600000
    25c4:	0c440000 	mareq	acc0, r0, r4
    25c8:	0000037f 	andeq	r0, r0, pc, ror r3
    25cc:	2c067705 	stccs	7, cr7, [r6], {5}
    25d0:	48000006 	stmdami	r0, {r1, r2}
    25d4:	0013230c 	andseq	r2, r3, ip, lsl #6
    25d8:	06780500 	ldrbteq	r0, [r8], -r0, lsl #10
    25dc:	0000031b 	andeq	r0, r0, fp, lsl r3
    25e0:	12540c50 	subsne	r0, r4, #80, 24	; 0x5000
    25e4:	79050000 	stmdbvc	r5, {}	; <UNPREDICTABLE>
    25e8:	00031b06 	andeq	r1, r3, r6, lsl #22
    25ec:	2c0c5400 	cfstrscs	mvf5, [ip], {-0}
    25f0:	05000018 	streq	r0, [r0, #-24]	; 0xffffffe8
    25f4:	031b067a 	tsteq	fp, #127926272	; 0x7a00000
    25f8:	0c580000 	mraeq	r0, r8, acc0
    25fc:	000002ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    2600:	10067b05 	andne	r7, r6, r5, lsl #22
    2604:	5c000003 	stcpl	0, cr0, [r0], {3}
    2608:	0017020c 	andseq	r0, r7, ip, lsl #4
    260c:	067c0500 	ldrbteq	r0, [ip], -r0, lsl #10
    2610:	0000031b 	andeq	r0, r0, fp, lsl r3
    2614:	16370c60 	ldrtne	r0, [r7], -r0, ror #24
    2618:	7d050000 	stcvc	0, cr0, [r5, #-0]
    261c:	00031b06 	andeq	r1, r3, r6, lsl #22
    2620:	090c6400 	stmdbeq	ip, {sl, sp, lr}
    2624:	05000003 	streq	r0, [r0, #-3]
    2628:	062c067e 			; <UNDEFINED> instruction: 0x062c067e
    262c:	0c680000 	stcleq	0, cr0, [r8], #-0
    2630:	00001487 	andeq	r1, r0, r7, lsl #9
    2634:	1b067f05 	blne	1a2250 <startup-0x1fe5ddb0>
    2638:	70000003 	andvc	r0, r0, r3
    263c:	52534313 	subspl	r4, r3, #1275068416	; 0x4c000000
    2640:	06800500 	streq	r0, [r0], r0, lsl #10
    2644:	0000031b 	andeq	r0, r0, fp, lsl r3
    2648:	13950c74 	orrsne	r0, r5, #116, 24	; 0x7400
    264c:	81050000 	mrshi	r0, (UNDEF: 5)
    2650:	00062c06 	andeq	r2, r6, r6, lsl #24
    2654:	d50c7800 	strle	r7, [ip, #-2048]	; 0xfffff800
    2658:	05000015 	streq	r0, [r0, #-21]	; 0xffffffeb
    265c:	031b0682 	tsteq	fp, #136314880	; 0x8200000
    2660:	0c800000 	stceq	0, cr0, [r0], {0}
    2664:	00001154 	andeq	r1, r0, r4, asr r1
    2668:	1b068305 	blne	1a3284 <startup-0x1fe5cd7c>
    266c:	84000003 	strhi	r0, [r0], #-3
    2670:	0019ce0c 	andseq	ip, r9, ip, lsl #28
    2674:	06840500 	streq	r0, [r4], r0, lsl #10
    2678:	0000031b 	andeq	r0, r0, fp, lsl r3
    267c:	134b0c88 	movtne	r0, #48264	; 0xbc88
    2680:	85050000 	strhi	r0, [r5, #-0]
    2684:	00031b06 	andeq	r1, r3, r6, lsl #22
    2688:	190c8c00 	stmdbne	ip, {sl, fp, pc}
    268c:	05000017 	streq	r0, [r0, #-23]	; 0xffffffe9
    2690:	031b0686 	tsteq	fp, #140509184	; 0x8600000
    2694:	0c900000 	ldceq	0, cr0, [r0], {0}
    2698:	000018a4 	andeq	r1, r0, r4, lsr #17
    269c:	1b068705 	blne	1a42b8 <startup-0x1fe5bd48>
    26a0:	94000003 	strls	r0, [r0], #-3
    26a4:	190f0600 	stmdbne	pc, {r9, sl}	; <UNPREDICTABLE>
    26a8:	89050000 	stmdbhi	r5, {}	; <UNPREDICTABLE>
    26ac:	00078106 	andeq	r8, r7, r6, lsl #2
    26b0:	09101800 	ldmdbeq	r0, {fp, ip}
    26b4:	00098930 	andeq	r8, r9, r0, lsr r9
    26b8:	1a061900 	bne	188ac0 <startup-0x1fe77540>
    26bc:	32090000 	andcc	r0, r9, #0
    26c0:	00000310 	andeq	r0, r0, r0, lsl r3
    26c4:	11821900 	orrne	r1, r2, r0, lsl #18
    26c8:	33090000 	movwcc	r0, #36864	; 0x9000
    26cc:	00000310 	andeq	r0, r0, r0, lsl r3
    26d0:	14221904 	strtne	r1, [r2], #-2308	; 0xfffff6fc
    26d4:	34090000 	strcc	r0, [r9], #-0
    26d8:	00000310 	andeq	r0, r0, r0, lsl r3
    26dc:	13fd1908 	mvnsne	r1, #8, 18	; 0x20000
    26e0:	35090000 	strcc	r0, [r9, #-0]
    26e4:	00000310 	andeq	r0, r0, r0, lsl r3
    26e8:	fd07000c 	stc2	0, cr0, [r7, #-48]	; 0xffffffd0
    26ec:	09000018 	stmdbeq	r0, {r3, r4}
    26f0:	00095036 	andeq	r5, r9, r6, lsr r0
    26f4:	02eb0f00 	rsceq	r0, fp, #0, 30
    26f8:	09a40000 	stmibeq	r4!, {}	; <UNPREDICTABLE>
    26fc:	cf100000 	svcgt	0x00100000
    2700:	0f000002 	svceq	0x00000002
    2704:	09940a00 	ldmibeq	r4, {r9, fp}
    2708:	a4090000 	strge	r0, [r9], #-0
    270c:	1a000009 	bne	2738 <startup-0x1fffd8c8>
    2710:	000015aa 	andeq	r1, r0, sl, lsr #11
    2714:	09a99902 	stmibeq	r9!, {r1, r8, fp, ip, pc}
    2718:	03050000 	movweq	r0, #20480	; 0x5000
    271c:	20003da0 	andcs	r3, r0, r0, lsr #27
    2720:	7101071b 	tstvc	r1, fp, lsl r7
    2724:	0a000002 	beq	2734 <startup-0x1fffd8cc>
    2728:	0009e542 	andeq	lr, r9, r2, asr #10
    272c:	06aa0400 	strteq	r0, [sl], r0, lsl #8
    2730:	04000000 	streq	r0, [r0], #-0
    2734:	0000058a 	andeq	r0, r0, sl, lsl #11
    2738:	02080401 	andeq	r0, r8, #16777216	; 0x1000000
    273c:	04020000 	streq	r0, [r2], #-0
    2740:	0000022d 	andeq	r0, r0, sp, lsr #4
    2744:	c2070003 	andgt	r0, r7, #3
    2748:	0a00000a 	beq	2778 <startup-0x1fffd888>
    274c:	0009bf47 	andeq	fp, r9, r7, asr #30
    2750:	01071b00 	tsteq	r7, r0, lsl #22
    2754:	00000271 	andeq	r0, r0, r1, ror r2
    2758:	0a0a4f0a 	beq	296388 <startup-0x1fd69c78>
    275c:	1d040000 	stcne	0, cr0, [r4, #-0]
    2760:	00000003 	andeq	r0, r0, r3
    2764:	00027204 	andeq	r7, r2, r4, lsl #4
    2768:	07000100 	streq	r0, [r0, -r0, lsl #2]
    276c:	00000112 	andeq	r0, r0, r2, lsl r1
    2770:	09f0520a 	ldmibeq	r0!, {r1, r3, r9, ip, lr}^
    2774:	071b0000 	ldreq	r0, [fp, -r0]
    2778:	00027101 	andeq	r7, r2, r1, lsl #2
    277c:	3b5a0a00 	blcc	1684f84 <startup-0x1e97b07c>
    2780:	0400000a 	streq	r0, [r0], #-10
    2784:	00000418 	andeq	r0, r0, r8, lsl r4
    2788:	073d0400 	ldreq	r0, [sp, -r0, lsl #8]!
    278c:	04010000 	streq	r0, [r1], #-0
    2790:	00000de4 	andeq	r0, r0, r4, ror #27
    2794:	07c90402 	strbeq	r0, [r9, r2, lsl #8]
    2798:	00030000 	andeq	r0, r3, r0
    279c:	000b3707 	andeq	r3, fp, r7, lsl #14
    27a0:	155f0a00 	ldrbne	r0, [pc, #-2560]	; 1da8 <startup-0x1fffe258>
    27a4:	1b00000a 	blne	27d4 <startup-0x1fffd82c>
    27a8:	02710107 	rsbseq	r0, r1, #-1073741823	; 0xc0000001
    27ac:	6e0a0000 	cdpvs	0, 0, cr0, cr10, cr0, {0}
    27b0:	00000a66 	andeq	r0, r0, r6, ror #20
    27b4:	0000ad04 	andeq	sl, r0, r4, lsl #26
    27b8:	e6040000 	str	r0, [r4], -r0
    27bc:	0100000c 	tsteq	r0, ip
    27c0:	0001ac04 	andeq	sl, r1, r4, lsl #24
    27c4:	07000200 	streq	r0, [r0, -r0, lsl #4]
    27c8:	000003bc 			; <UNDEFINED> instruction: 0x000003bc
    27cc:	0a46720a 	beq	119effc <startup-0x1ee61004>
    27d0:	08180000 	ldmdaeq	r8, {}	; <UNPREDICTABLE>
    27d4:	0ab6840a 	beq	feda3804 <GPIO_Ports+0xded9fa30>
    27d8:	5b190000 	blpl	6427e0 <startup-0x1f9bd820>
    27dc:	0a00000b 	beq	2810 <startup-0x1fffd7f0>
    27e0:	00031086 	andeq	r1, r3, r6, lsl #1
    27e4:	86190000 	ldrhi	r0, [r9], -r0
    27e8:	0a00000a 	beq	2818 <startup-0x1fffd7e8>
    27ec:	0009e589 	andeq	lr, r9, r9, lsl #11
    27f0:	77190400 	ldrvc	r0, [r9, -r0, lsl #8]
    27f4:	0a000008 	beq	281c <startup-0x1fffd7e4>
    27f8:	000a3b8c 	andeq	r3, sl, ip, lsl #23
    27fc:	27190500 	ldrcs	r0, [r9, -r0, lsl #10]
    2800:	0a000007 	beq	2824 <startup-0x1fffd7dc>
    2804:	000a0a8f 	andeq	r0, sl, pc, lsl #21
    2808:	8c190600 	ldchi	6, cr0, [r9], {-0}
    280c:	0a00000b 	beq	2840 <startup-0x1fffd7c0>
    2810:	000a6692 	muleq	sl, r2, r6
    2814:	07000700 	streq	r0, [r0, -r0, lsl #14]
    2818:	00000280 	andeq	r0, r0, r0, lsl #5
    281c:	0a71940a 	beq	1c6784c <startup-0x1e3987b4>
    2820:	c81c0000 	ldmdagt	ip, {}	; <UNPREDICTABLE>
    2824:	20000019 	andcs	r0, r0, r9, lsl r0
    2828:	0b39010b 	bleq	e42c5c <startup-0x1f1bd3a4>
    282c:	691d0000 	ldmdbvs	sp, {}	; <UNPREDICTABLE>
    2830:	030b0064 	movweq	r0, #45156	; 0xb064
    2834:	00000b39 	andeq	r0, r0, r9, lsr fp
    2838:	12d91900 	sbcsne	r1, r9, #0, 18
    283c:	040b0000 	streq	r0, [fp], #-0
    2840:	000002c3 	andeq	r0, r0, r3, asr #5
    2844:	124a1904 	subne	r1, sl, #4, 18	; 0x10000
    2848:	050b0000 	streq	r0, [fp, #-0]
    284c:	00000b39 	andeq	r0, r0, r9, lsr fp
    2850:	176d1908 	strbne	r1, [sp, -r8, lsl #18]!
    2854:	060b0000 	streq	r0, [fp], -r0
    2858:	00000b39 	andeq	r0, r0, r9, lsr fp
    285c:	191b1909 	ldmdbne	fp, {r0, r3, r8, fp, ip}
    2860:	070b0000 	streq	r0, [fp, -r0]
    2864:	000002c3 	andeq	r0, r0, r3, asr #5
    2868:	18c6190c 	stmiane	r6, {r2, r3, r8, fp, ip}^
    286c:	080b0000 	stmdaeq	fp, {}	; <UNPREDICTABLE>
    2870:	000002c3 	andeq	r0, r0, r3, asr #5
    2874:	140d1910 	strne	r1, [sp], #-2320	; 0xfffff6f0
    2878:	090b0000 	stmdbeq	fp, {}	; <UNPREDICTABLE>
    287c:	000002c3 	andeq	r0, r0, r3, asr #5
    2880:	199a1914 	ldmibne	sl, {r2, r4, r8, fp, ip}
    2884:	0a0b0000 	beq	2c288c <startup-0x1fd3d774>
    2888:	000002c3 	andeq	r0, r0, r3, asr #5
    288c:	192b1918 	stmdbne	fp!, {r3, r4, r8, fp, ip}
    2890:	0b0b0000 	bleq	2c2898 <startup-0x1fd3d768>
    2894:	00000b40 	andeq	r0, r0, r0, asr #22
    2898:	0105001c 	tsteq	r5, ip, lsl r0
    289c:	0002e808 	andeq	lr, r2, r8, lsl #16
    28a0:	75041e00 	strvc	r1, [r4, #-3584]	; 0xfffff200
    28a4:	07000007 	streq	r0, [r0, -r7]
    28a8:	000019c9 	andeq	r1, r0, r9, asr #19
    28ac:	0ac10c0b 	beq	ff0458e0 <GPIO_Ports+0xdf041b0c>
    28b0:	46090000 	strmi	r0, [r9], -r0
    28b4:	1800000b 	stmdane	r0, {r0, r1, r3}
    28b8:	a78d0c14 	usada8ge	sp, r4, ip, r0
    28bc:	1900000b 	stmdbne	r0, {r0, r1, r3}
    28c0:	0000036f 	andeq	r0, r0, pc, ror #6
    28c4:	03108f0c 	tsteq	r0, #12, 30	; 0x30
    28c8:	19000000 	stmdbne	r0, {}	; <UNPREDICTABLE>
    28cc:	00000499 	muleq	r0, r9, r4
    28d0:	0310920c 	tsteq	r0, #12, 4	; 0xc0000000
    28d4:	1d040000 	stcne	0, cr0, [r4, #-0]
    28d8:	00454449 	subeq	r4, r5, r9, asr #8
    28dc:	02d6950c 	sbcseq	r9, r6, #12, 10	; 0x3000000
    28e0:	1d080000 	stcne	0, cr0, [r8, #-0]
    28e4:	00525452 	subseq	r5, r2, r2, asr r4
    28e8:	02d6990c 	sbcseq	r9, r6, #12, 18	; 0x30000
    28ec:	1d090000 	stcne	0, cr0, [r9, #-0]
    28f0:	00434c44 	subeq	r4, r3, r4, asr #24
    28f4:	02d69d0c 	sbcseq	r9, r6, #12, 26	; 0x300
    28f8:	190a0000 	stmdbne	sl, {}	; <UNPREDICTABLE>
    28fc:	00001fad 	andeq	r1, r0, sp, lsr #31
    2900:	0ba7a10c 	bleq	fe9ead38 <GPIO_Ports+0xde9e6f64>
    2904:	000b0000 	andeq	r0, fp, r0
    2908:	0002d60f 	andeq	sp, r2, pc, lsl #12
    290c:	000bb700 	andeq	fp, fp, r0, lsl #14
    2910:	02cf1000 	sbceq	r1, pc, #0
    2914:	00070000 	andeq	r0, r7, r0
    2918:	00055907 	andeq	r5, r5, r7, lsl #18
    291c:	56a30c00 	strtpl	r0, [r3], r0, lsl #24
    2920:	1800000b 	stmdane	r0, {r0, r1, r3}
    2924:	1fa80c14 	svcne	0x00a80c14
    2928:	1900000c 	stmdbne	r0, {r2, r3}
    292c:	0000036f 	andeq	r0, r0, pc, ror #6
    2930:	0310aa0c 	tsteq	r0, #12, 20	; 0xc000
    2934:	19000000 	stmdbne	r0, {}	; <UNPREDICTABLE>
    2938:	00000499 	muleq	r0, r9, r4
    293c:	0310ad0c 	tsteq	r0, #12, 26	; 0x300
    2940:	1d040000 	stcne	0, cr0, [r4, #-0]
    2944:	00454449 	subeq	r4, r5, r9, asr #8
    2948:	02d6b00c 	sbcseq	fp, r6, #12
    294c:	1d080000 	stcne	0, cr0, [r8, #-0]
    2950:	00525452 	subseq	r5, r2, r2, asr r4
    2954:	02d6b40c 	sbcseq	fp, r6, #12, 8	; 0xc000000
    2958:	1d090000 	stcne	0, cr0, [r9, #-0]
    295c:	00434c44 	subeq	r4, r3, r4, asr #24
    2960:	02d6b80c 	sbcseq	fp, r6, #12, 16	; 0xc0000
    2964:	190a0000 	stmdbne	sl, {}	; <UNPREDICTABLE>
    2968:	00001fad 	andeq	r1, r0, sp, lsr #31
    296c:	0ba7bb0c 	bleq	fe9f15a4 <GPIO_Ports+0xde9ed7d0>
    2970:	1d0b0000 	stcne	0, cr0, [fp, #-0]
    2974:	00494d46 	subeq	r4, r9, r6, asr #26
    2978:	02d6be0c 	sbcseq	fp, r6, #12, 28	; 0xc0
    297c:	00130000 	andseq	r0, r3, r0
    2980:	00095907 	andeq	r5, r9, r7, lsl #18
    2984:	c2c10c00 	sbcgt	r0, r1, #0, 24
    2988:	1800000b 	stmdane	r0, {r0, r1, r3}
    298c:	8c1a0d04 	ldchi	13, cr0, [sl], {4}
    2990:	1f00000c 	svcne	0x0000000c
    2994:	000008b8 			; <UNDEFINED> instruction: 0x000008b8
    2998:	03101c0d 	tsteq	r0, #3328	; 0xd00
    299c:	08040000 	stmdaeq	r4, {}	; <UNPREDICTABLE>
    29a0:	3d1f0018 	ldccc	0, cr0, [pc, #-96]	; 2948 <startup-0x1fffd6b8>
    29a4:	0d000001 	stceq	0, cr0, [r0, #-4]
    29a8:	00031020 	andeq	r1, r3, r0, lsr #32
    29ac:	0e0a0400 	cfcpyseq	mvf0, mvf10
    29b0:	44492000 	strbmi	r2, [r9], #-0
    29b4:	10240d00 	eorne	r0, r4, r0, lsl #26
    29b8:	04000003 	streq	r0, [r0], #-3
    29bc:	1f000707 	svcne	0x00000707
    29c0:	0000012e 	andeq	r0, r0, lr, lsr #2
    29c4:	0310280d 	tsteq	r0, #851968	; 0xd0000
    29c8:	01040000 	mrseq	r0, (UNDEF: 4)
    29cc:	871f0006 	ldrhi	r0, [pc, -r6]
    29d0:	0d000007 	stceq	0, cr0, [r0, #-28]	; 0xffffffe4
    29d4:	0003102b 	andeq	r1, r3, fp, lsr #32
    29d8:	03030400 	movweq	r0, #13312	; 0x3400
    29dc:	090e1f00 	stmdbeq	lr, {r8, r9, sl, fp, ip}
    29e0:	2e0d0000 	cdpcs	0, 0, cr0, cr13, cr0, {0}
    29e4:	00000310 	andeq	r0, r0, r0, lsl r3
    29e8:	00000304 	andeq	r0, r0, r4, lsl #6
    29ec:	04920700 	ldreq	r0, [r2], #1792	; 0x700
    29f0:	2f0d0000 	svccs	0x000d0000
    29f4:	00000c2a 	andeq	r0, r0, sl, lsr #24
    29f8:	340d0418 	strcc	r0, [sp], #-1048	; 0xfffffbe8
    29fc:	00000cdb 	ldrdeq	r0, [r0], -fp
    2a00:	00090d1f 	andeq	r0, r9, pc, lsl sp
    2a04:	10360d00 	eorsne	r0, r6, r0, lsl #26
    2a08:	04000003 	streq	r0, [r0], #-3
    2a0c:	20001f01 	andcs	r1, r0, r1, lsl #30
    2a10:	00525452 	subseq	r5, r2, r2, asr r4
    2a14:	0310390d 	tsteq	r0, #212992	; 0x34000
    2a18:	01040000 	mrseq	r0, (UNDEF: 4)
    2a1c:	4920001e 	stmdbmi	r0!, {r1, r2, r3, r4}
    2a20:	0d004544 	cfstr32eq	mvfx4, [r0, #-272]	; 0xfffffef0
    2a24:	0003103c 	andeq	r1, r3, ip, lsr r0
    2a28:	1d010400 	cfstrsne	mvf0, [r1, #-0]
    2a2c:	44492000 	strbmi	r2, [r9], #-0
    2a30:	103e0d00 	eorsne	r0, lr, r0, lsl #26
    2a34:	04000003 	streq	r0, [r0], #-3
    2a38:	0000001d 	andeq	r0, r0, sp, lsl r0
    2a3c:	000c6e07 	andeq	r6, ip, r7, lsl #28
    2a40:	973f0d00 	ldrls	r0, [pc, -r0, lsl #26]!
    2a44:	2100000c 	tstcs	r0, ip
    2a48:	04006469 	streq	r6, [r0], #-1129	; 0xfffffb97
    2a4c:	000b3919 	andeq	r3, fp, r9, lsl r9
    2a50:	b0030500 	andlt	r0, r3, r0, lsl #10
    2a54:	2220003c 	eorcs	r0, r0, #60	; 0x3c
    2a58:	000017da 	ldrdeq	r1, [r0], -sl
    2a5c:	0b391a04 	bleq	e49274 <startup-0x1f1b6d8c>
    2a60:	03050000 	movweq	r0, #20480	; 0x5000
    2a64:	20003db0 			; <UNDEFINED> instruction: 0x20003db0
    2a68:	0002f00f 	andeq	pc, r2, pc
    2a6c:	000d1700 	andeq	r1, sp, r0, lsl #14
    2a70:	02cf1000 	sbceq	r1, pc, #0
    2a74:	000f0000 	andeq	r0, pc, r0
    2a78:	0014cb22 	andseq	ip, r4, r2, lsr #22
    2a7c:	071c0400 	ldreq	r0, [ip, -r0, lsl #8]
    2a80:	0500000d 	streq	r0, [r0, #-13]
    2a84:	003db403 	eorseq	fp, sp, r3, lsl #8
    2a88:	0b400f20 	bleq	1006710 <startup-0x1eff98f0>
    2a8c:	0d380000 	ldceq	0, cr0, [r8, #-0]
    2a90:	cf100000 	svcgt	0x00100000
    2a94:	03000002 	movweq	r0, #2
    2a98:	127d2200 	rsbsne	r2, sp, #0, 4
    2a9c:	21040000 	mrscs	r0, (UNDEF: 4)
    2aa0:	00000d28 	andeq	r0, r0, r8, lsr #26
    2aa4:	3dd40305 	ldclcc	3, cr0, [r4, #20]
    2aa8:	6e222000 	cdpvs	0, 2, cr2, cr2, cr0, {0}
    2aac:	04000015 	streq	r0, [r0], #-21	; 0xffffffeb
    2ab0:	00031b24 	andeq	r1, r3, r4, lsr #22
    2ab4:	b4030500 	strlt	r0, [r3], #-1280	; 0xfffffb00
    2ab8:	2320003c 			; <UNDEFINED> instruction: 0x2320003c
    2abc:	00001538 	andeq	r1, r0, r8, lsr r5
    2ac0:	2fd8de04 	svccs	0x00d8de04
    2ac4:	00622000 	rsbeq	r2, r2, r0
    2ac8:	9c010000 	stcls	0, cr0, [r1], {-0}
    2acc:	00000d8c 	andeq	r0, r0, ip, lsl #27
    2ad0:	0019c024 	andseq	ip, r9, r4, lsr #32
    2ad4:	46de0400 	ldrbmi	r0, [lr], r0, lsl #8
    2ad8:	0200000b 	andeq	r0, r0, #11
    2adc:	941a7091 	ldrls	r7, [sl], #-145	; 0xffffff6f
    2ae0:	04000015 	streq	r0, [r0], #-21	; 0xffffffeb
    2ae4:	000bb7df 	ldrdeq	fp, [fp], -pc	; <UNPREDICTABLE>
    2ae8:	4c910200 	lfmmi	f0, 4, [r1], {0}
    2aec:	15512300 	ldrbne	r2, [r1, #-768]	; 0xfffffd00
    2af0:	b2040000 	andlt	r0, r4, #0
    2af4:	20002e84 	andcs	r2, r0, r4, lsl #29
    2af8:	00000154 	andeq	r0, r0, r4, asr r1
    2afc:	0e0f9c01 	cdpeq	12, 0, cr9, cr15, cr1, {0}
    2b00:	22240000 	eorcs	r0, r4, #0
    2b04:	04000012 	streq	r0, [r0], #-18	; 0xffffffee
    2b08:	0002c3b2 			; <UNDEFINED> instruction: 0x0002c3b2
    2b0c:	bc910300 	ldclt	3, cr0, [r1], {0}
    2b10:	0c3a1a7f 			; <UNDEFINED> instruction: 0x0c3a1a7f
    2b14:	b3040000 	movwlt	r0, #16384	; 0x4000
    2b18:	00000cdb 	ldrdeq	r0, [r0], -fp
    2b1c:	1a5c9102 	bne	1726f2c <startup-0x1e8d90d4>
    2b20:	000007d9 	ldrdeq	r0, [r0], -r9
    2b24:	0cdbb404 	cfldrdeq	mvd11, [fp], {4}
    2b28:	91020000 	mrsls	r0, (UNDEF: 2)
    2b2c:	03681a58 	cmneq	r8, #88, 20	; 0x58000
    2b30:	b7040000 	strlt	r0, [r4, -r0]
    2b34:	00000c8c 	andeq	r0, r0, ip, lsl #25
    2b38:	1a549102 	bne	1526f48 <startup-0x1ead90b8>
    2b3c:	00001935 	andeq	r1, r0, r5, lsr r9
    2b40:	02c3ce04 	sbceq	ip, r3, #4, 28	; 0x40
    2b44:	91020000 	mrsls	r0, (UNDEF: 2)
    2b48:	2f762564 	svccs	0x00762564
    2b4c:	00462000 	subeq	r2, r6, r0
    2b50:	c41a0000 	ldrgt	r0, [sl], #-0
    2b54:	04000012 	streq	r0, [r0], #-18	; 0xffffffee
    2b58:	000310d2 	ldrdeq	r1, [r3], -r2
    2b5c:	60910200 	addsvs	r0, r1, r0, lsl #4
    2b60:	0012291a 	andseq	r2, r2, sl, lsl r9
    2b64:	b7d30400 	ldrblt	r0, [r3, r0, lsl #8]
    2b68:	0200000b 	andeq	r0, r0, #11
    2b6c:	00004091 	muleq	r0, r1, r0
    2b70:	0017eb26 	andseq	lr, r7, r6, lsr #22
    2b74:	5cad0400 	cfstrspl	mvf0, [sp]
    2b78:	2820002e 	stmdacs	r0!, {r1, r2, r3, r5}
    2b7c:	01000000 	mrseq	r0, (UNDEF: 0)
    2b80:	000e339c 	muleq	lr, ip, r3
    2b84:	736d2700 	cmnvc	sp, #0, 14
    2b88:	ad040067 	stcge	0, cr0, [r4, #-412]	; 0xfffffe64
    2b8c:	00000e33 	andeq	r0, r0, r3, lsr lr
    2b90:	00749102 	rsbseq	r9, r4, r2, lsl #2
    2b94:	0c1f041e 	cfldrseq	mvf0, [pc], {30}
    2b98:	90230000 	eorls	r0, r3, r0
    2b9c:	04000019 	streq	r0, [r0], #-25	; 0xffffffe7
    2ba0:	0029bc42 	eoreq	fp, r9, r2, asr #24
    2ba4:	0004a020 	andeq	sl, r4, r0, lsr #32
    2ba8:	719c0100 	orrsvc	r0, ip, r0, lsl #2
    2bac:	1a00000f 	bne	2bf0 <startup-0x1fffd410>
    2bb0:	00001456 	andeq	r1, r0, r6, asr r4
    2bb4:	02ca4d04 	sbceq	r4, sl, #4, 26	; 0x100
    2bb8:	91030000 	mrsls	r0, (UNDEF: 3)
    2bbc:	0c1a7fb0 	ldceq	15, cr7, [sl], {176}	; 0xb0
    2bc0:	04000017 	streq	r0, [r0], #-23	; 0xffffffe9
    2bc4:	000f8557 	andeq	r8, pc, r7, asr r5	; <UNPREDICTABLE>
    2bc8:	b4910400 	ldrlt	r0, [r1], #1024	; 0x400
    2bcc:	b21a067f 	andslt	r0, sl, #133169152	; 0x7f00000
    2bd0:	04000014 	streq	r0, [r0], #-20	; 0xffffffec
    2bd4:	0002c358 	andeq	ip, r2, r8, asr r3
    2bd8:	64910200 	ldrvs	r0, [r1], #512	; 0x200
    2bdc:	0029e228 	eoreq	lr, r9, r8, lsr #4
    2be0:	00004420 	andeq	r4, r0, r0, lsr #8
    2be4:	000eab00 	andeq	sl, lr, r0, lsl #22
    2be8:	006a2900 	rsbeq	r2, sl, r0, lsl #18
    2bec:	02c34e04 	sbceq	r4, r3, #4, 28	; 0x40
    2bf0:	91020000 	mrsls	r0, (UNDEF: 2)
    2bf4:	29e8255c 	stmibcs	r8!, {r2, r3, r4, r6, r8, sl, sp}^
    2bf8:	00322000 	eorseq	r2, r2, r0
    2bfc:	69290000 	stmdbvs	r9!, {}	; <UNPREDICTABLE>
    2c00:	c3500400 	cmpgt	r0, #0, 8
    2c04:	02000002 	andeq	r0, r0, #2
    2c08:	00006091 	muleq	r0, r1, r0
    2c0c:	002a8828 	eoreq	r8, sl, r8, lsr #16
    2c10:	0000b020 	andeq	fp, r0, r0, lsr #32
    2c14:	000edb00 	andeq	sp, lr, r0, lsl #22
    2c18:	006a2900 	rsbeq	r2, sl, r0, lsl #18
    2c1c:	02c35904 	sbceq	r5, r3, #4, 18	; 0x10000
    2c20:	91020000 	mrsls	r0, (UNDEF: 2)
    2c24:	2a8e2558 	bcs	fe38c18c <GPIO_Ports+0xde3883b8>
    2c28:	009e2000 	addseq	r2, lr, r0
    2c2c:	69290000 	stmdbvs	r9!, {}	; <UNPREDICTABLE>
    2c30:	c35b0400 	cmpgt	fp, #0, 8
    2c34:	02000002 	andeq	r0, r0, #2
    2c38:	00005491 	muleq	r0, r1, r4
    2c3c:	002b4428 	eoreq	r4, fp, r8, lsr #8
    2c40:	00003e20 	andeq	r3, r0, r0, lsr #28
    2c44:	000ef500 	andeq	pc, lr, r0, lsl #10
    2c48:	00692900 	rsbeq	r2, r9, r0, lsl #18
    2c4c:	02c36b04 	sbceq	r6, r3, #4, 22	; 0x1000
    2c50:	91020000 	mrsls	r0, (UNDEF: 2)
    2c54:	82280050 	eorhi	r0, r8, #80	; 0x50
    2c58:	3c20002b 	stccc	0, cr0, [r0], #-172	; 0xffffff54
    2c5c:	0f000000 	svceq	0x00000000
    2c60:	2900000f 	stmdbcs	r0, {r0, r1, r2, r3}
    2c64:	71040069 	tstvc	r4, r9, rrx
    2c68:	000002c3 	andeq	r0, r0, r3, asr #5
    2c6c:	004c9102 	subeq	r9, ip, r2, lsl #2
    2c70:	002bc428 	eoreq	ip, fp, r8, lsr #8
    2c74:	00003820 	andeq	r3, r0, r0, lsr #16
    2c78:	000f2900 	andeq	r2, pc, r0, lsl #18
    2c7c:	00692900 	rsbeq	r2, r9, r0, lsl #18
    2c80:	02c37704 	sbceq	r7, r3, #4, 14	; 0x100000
    2c84:	91020000 	mrsls	r0, (UNDEF: 2)
    2c88:	04280048 	strteq	r0, [r8], #-72	; 0xffffffb8
    2c8c:	3820002c 	stmdacc	r0!, {r2, r3, r5}
    2c90:	43000000 	movwmi	r0, #0
    2c94:	2900000f 	stmdbcs	r0, {r0, r1, r2, r3}
    2c98:	7c040069 	stcvc	0, cr0, [r4], {105}	; 0x69
    2c9c:	000002c3 	andeq	r0, r0, r3, asr #5
    2ca0:	00449102 	subeq	r9, r4, r2, lsl #2
    2ca4:	002c4625 	eoreq	r4, ip, r5, lsr #12
    2ca8:	00020a20 	andeq	r0, r2, r0, lsr #20
    2cac:	00692900 	rsbeq	r2, r9, r0, lsl #18
    2cb0:	02c38604 	sbceq	r8, r3, #4, 12	; 0x400000
    2cb4:	91020000 	mrsls	r0, (UNDEF: 2)
    2cb8:	2ce02540 	cfstr64cs	mvdx2, [r0], #256	; 0x100
    2cbc:	015c2000 	cmpeq	ip, r0
    2cc0:	69290000 	stmdbvs	r9!, {}	; <UNPREDICTABLE>
    2cc4:	c3970400 	orrsgt	r0, r7, #0, 8
    2cc8:	03000002 	movweq	r0, #2
    2ccc:	007fbc91 			; <UNDEFINED> instruction: 0x007fbc91
    2cd0:	510f0000 	mrspl	r0, CPSR
    2cd4:	8500000b 	strhi	r0, [r0, #-11]
    2cd8:	2a00000f 	bcs	2d1c <startup-0x1fffd2e4>
    2cdc:	000002cf 	andeq	r0, r0, pc, asr #5
    2ce0:	7fb89104 	svcvc	0x00b89104
    2ce4:	71090006 	tstvc	r9, r6
    2ce8:	2b00000f 	blcs	2d2c <startup-0x1fffd2d4>
    2cec:	000011cb 	andeq	r1, r0, fp, asr #3
    2cf0:	29a43a04 	stmibcs	r4!, {r2, r9, fp, ip, sp}
    2cf4:	00182000 	andseq	r2, r8, r0
    2cf8:	9c010000 	stcls	0, cr0, [r1], {-0}
    2cfc:	00121c26 	andseq	r1, r2, r6, lsr #24
    2d00:	78350400 	ldmdavc	r5!, {sl}
    2d04:	2c200029 	stccs	0, cr0, [r0], #-164	; 0xffffff5c
    2d08:	01000000 	mrseq	r0, (UNDEF: 0)
    2d0c:	000fcd9c 	muleq	pc, ip, sp	; <UNPREDICTABLE>
    2d10:	19952400 	ldmibne	r5, {sl, sp}
    2d14:	35040000 	strcc	r0, [r4, #-0]
    2d18:	000002c3 	andeq	r0, r0, r3, asr #5
    2d1c:	1a6c9102 	bne	1b2712c <startup-0x1e4d8ed4>
    2d20:	00001898 	muleq	r0, r8, r8
    2d24:	02c33604 	sbceq	r3, r3, #4, 12	; 0x400000
    2d28:	91020000 	mrsls	r0, (UNDEF: 2)
    2d2c:	dc230074 	stcle	0, cr0, [r3], #-464	; 0xfffffe30
    2d30:	04000016 	streq	r0, [r0], #-22	; 0xffffffea
    2d34:	00294029 	eoreq	r4, r9, r9, lsr #32
    2d38:	00003820 	andeq	r3, r0, r0, lsr #16
    2d3c:	f19c0100 			; <UNDEFINED> instruction: 0xf19c0100
    2d40:	1a00000f 	bne	2d84 <startup-0x1fffd27c>
    2d44:	000013cd 	andeq	r1, r0, sp, asr #7
    2d48:	03102d04 	tsteq	r0, #4, 26	; 0x100
    2d4c:	91020000 	mrsls	r0, (UNDEF: 2)
    2d50:	882c0074 	stmdahi	ip!, {r2, r4, r5, r6}
    2d54:	04000012 	streq	r0, [r0], #-18	; 0xffffffee
    2d58:	00292825 	eoreq	r2, r9, r5, lsr #16
    2d5c:	00001820 	andeq	r1, r0, r0, lsr #16
    2d60:	2c9c0100 	ldfcss	f0, [ip], {0}
    2d64:	000017b2 			; <UNDEFINED> instruction: 0x000017b2
    2d68:	00000f04 	andeq	r0, r0, r4, lsl #30
    2d6c:	000c2000 	andeq	r2, ip, r0
    2d70:	9c010000 	stcls	0, cr0, [r1], {-0}
    2d74:	0012782d 	andseq	r7, r2, sp, lsr #16
    2d78:	60020300 	andvs	r0, r2, r0, lsl #6
    2d7c:	c8200027 	stmdagt	r0!, {r0, r1, r2, r5}
    2d80:	01000001 	tsteq	r0, r1
    2d84:	0010379c 	mulseq	r0, ip, r7
    2d88:	00631a00 	rsbeq	r1, r3, r0, lsl #20
    2d8c:	05030000 	streq	r0, [r3, #-0]
    2d90:	00000ab6 			; <UNDEFINED> instruction: 0x00000ab6
    2d94:	00709102 	rsbseq	r9, r0, r2, lsl #2
    2d98:	00167f2e 	andseq	r7, r6, lr, lsr #30
    2d9c:	0c5e0200 	lfmeq	f0, 2, [lr], {-0}
    2da0:	20002740 	andcs	r2, r0, r0, asr #14
    2da4:	00000020 	andeq	r0, r0, r0, lsr #32
    2da8:	105d9c01 	subsne	r9, sp, r1, lsl #24
    2dac:	242f0000 	strtcs	r0, [pc], #-0	; 2db4 <startup-0x1fffd24c>
    2db0:	02000019 	andeq	r0, r0, #25
    2db4:	02d60c5e 	sbcseq	r0, r6, #24064	; 0x5e00
    2db8:	91020000 	mrsls	r0, (UNDEF: 2)
    2dbc:	6a300077 	bvs	c02fa0 <startup-0x1f3fd060>
    2dc0:	02000016 	andeq	r0, r0, #22
    2dc4:	067a0c3c 			; <UNDEFINED> instruction: 0x067a0c3c
    2dc8:	26fc0000 	ldrbtcs	r0, [ip], r0
    2dcc:	00442000 	subeq	r2, r4, r0
    2dd0:	9c010000 	stcls	0, cr0, [r1], {-0}
    2dd4:	00001096 	muleq	r0, r6, r0
    2dd8:	0019242f 	andseq	r2, r9, pc, lsr #8
    2ddc:	0c3c0200 	lfmeq	f0, 4, [ip], #-0
    2de0:	000002d6 	ldrdeq	r0, [r0], -r6
    2de4:	316f9102 	cmncc	pc, r2, lsl #2
    2de8:	0000104a 	andeq	r1, r0, sl, asr #32
    2dec:	7a0c3e02 	bvc	3125fc <startup-0x1fceda04>
    2df0:	02000006 	andeq	r0, r0, #6
    2df4:	32007791 	andcc	r7, r0, #38010880	; 0x2440000
    2df8:	0000159c 	muleq	r0, ip, r5
    2dfc:	e00c2802 	and	r2, ip, r2, lsl #16
    2e00:	1c200026 	stcne	0, cr0, [r0], #-152	; 0xffffff68
    2e04:	01000000 	mrseq	r0, (UNDEF: 0)
    2e08:	15e4309c 	strbne	r3, [r4, #156]!	; 0x9c
    2e0c:	fb020000 	blx	82e16 <startup-0x1ff7d1ea>
    2e10:	00066e0b 	andeq	r6, r6, fp, lsl #28
    2e14:	00265c00 	eoreq	r5, r6, r0, lsl #24
    2e18:	00008420 	andeq	r8, r0, r0, lsr #8
    2e1c:	ff9c0100 			; <UNDEFINED> instruction: 0xff9c0100
    2e20:	2f000010 	svccs	0x00000010
    2e24:	00001661 	andeq	r1, r0, r1, ror #12
    2e28:	d60bfb02 	strle	pc, [fp], -r2, lsl #22
    2e2c:	02000002 	andeq	r0, r0, #2
    2e30:	74336791 	ldrtvc	r6, [r3], #-1937	; 0xfffff86f
    2e34:	0200706d 	andeq	r7, r0, #109	; 0x6d
    2e38:	03100bfd 	tsteq	r0, #259072	; 0x3f400
    2e3c:	91020000 	mrsls	r0, (UNDEF: 2)
    2e40:	16e9316c 	strbtne	r3, [r9], ip, ror #2
    2e44:	fe020000 	cdp2	0, 0, cr0, cr2, cr0, {0}
    2e48:	0003100b 	andeq	r1, r3, fp
    2e4c:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    2e50:	00104a31 	andseq	r4, r0, r1, lsr sl
    2e54:	0bff0200 	bleq	fffc365c <GPIO_Ports+0xdffbf888>
    2e58:	0000066e 	andeq	r0, r0, lr, ror #12
    2e5c:	00739102 	rsbseq	r9, r3, r2, lsl #2
    2e60:	0016012e 	andseq	r0, r6, lr, lsr #2
    2e64:	0bd60200 	bleq	ff58366c <GPIO_Ports+0xdf57f898>
    2e68:	2000260c 	andcs	r2, r0, ip, lsl #12
    2e6c:	00000050 	andeq	r0, r0, r0, asr r0
    2e70:	11349c01 	teqne	r4, r1, lsl #24
    2e74:	242f0000 	strtcs	r0, [pc], #-0	; 2e7c <startup-0x1fffd184>
    2e78:	02000019 	andeq	r0, r0, #25
    2e7c:	02d60bd6 	sbcseq	r0, r6, #219136	; 0x35800
    2e80:	91020000 	mrsls	r0, (UNDEF: 2)
    2e84:	0f612f77 	svceq	0x00612f77
    2e88:	d6020000 	strle	r0, [r2], -r0
    2e8c:	0006a10b 	andeq	sl, r6, fp, lsl #2
    2e90:	76910200 	ldrvc	r0, [r1], r0, lsl #4
    2e94:	181a2e00 	ldmdane	sl, {r9, sl, fp, sp}
    2e98:	9e020000 	cdpls	0, 0, cr0, cr2, cr0, {0}
    2e9c:	0025d00a 	eoreq	sp, r5, sl
    2ea0:	00003c20 	andeq	r3, r0, r0, lsr #24
    2ea4:	5a9c0100 	bpl	fe7032ac <GPIO_Ports+0xde6ff4d8>
    2ea8:	2f000011 	svccs	0x00000011
    2eac:	000011eb 	andeq	r1, r0, fp, ror #3
    2eb0:	d60a9e02 	strle	r9, [sl], -r2, lsl #28
    2eb4:	02000002 	andeq	r0, r0, #2
    2eb8:	2e007791 	mcrcs	7, 0, r7, cr0, cr1, {4}
    2ebc:	00001191 	muleq	r0, r1, r1
    2ec0:	900a8602 	andls	r8, sl, r2, lsl #12
    2ec4:	40200025 	eormi	r0, r0, r5, lsr #32
    2ec8:	01000000 	mrseq	r0, (UNDEF: 0)
    2ecc:	00118f9c 	mulseq	r1, ip, pc	; <UNPREDICTABLE>
    2ed0:	16f32f00 	ldrbtne	r2, [r3], r0, lsl #30
    2ed4:	86020000 	strhi	r0, [r2], -r0
    2ed8:	0003100a 	andeq	r1, r3, sl
    2edc:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    2ee0:	000f612f 	andeq	r6, pc, pc, lsr #2
    2ee4:	0a860200 	beq	fe1836ec <GPIO_Ports+0xde17f918>
    2ee8:	000006a1 	andeq	r0, r0, r1, lsr #13
    2eec:	00739102 	rsbseq	r9, r3, r2, lsl #2
    2ef0:	0019462e 	andseq	r4, r9, lr, lsr #12
    2ef4:	0a520200 	beq	14836fc <startup-0x1eb7c904>
    2ef8:	20002550 	andcs	r2, r0, r0, asr r5
    2efc:	00000040 	andeq	r0, r0, r0, asr #32
    2f00:	11c49c01 	bicne	r9, r4, r1, lsl #24
    2f04:	412f0000 			; <UNDEFINED> instruction: 0x412f0000
    2f08:	02000016 	andeq	r0, r0, #22
    2f0c:	03100a52 	tsteq	r0, #335872	; 0x52000
    2f10:	91020000 	mrsls	r0, (UNDEF: 2)
    2f14:	0f612f74 	svceq	0x00612f74
    2f18:	52020000 	andpl	r0, r2, #0
    2f1c:	0006a10a 	andeq	sl, r6, sl, lsl #2
    2f20:	73910200 	orrsvc	r0, r1, #0, 4
    2f24:	13d82e00 	bicsne	r2, r8, #0, 28
    2f28:	19020000 	stmdbne	r2, {}	; <UNPREDICTABLE>
    2f2c:	0025100a 	eoreq	r1, r5, sl
    2f30:	00004020 	andeq	r4, r0, r0, lsr #32
    2f34:	f99c0100 			; <UNDEFINED> instruction: 0xf99c0100
    2f38:	2f000011 	svccs	0x00000011
    2f3c:	0000133c 	andeq	r1, r0, ip, lsr r3
    2f40:	100a1902 	andne	r1, sl, r2, lsl #18
    2f44:	02000003 	andeq	r0, r0, #3
    2f48:	612f7491 			; <UNDEFINED> instruction: 0x612f7491
    2f4c:	0200000f 	andeq	r0, r0, #15
    2f50:	06a10a19 	ssateq	r0, #2, r9, lsl #20
    2f54:	91020000 	mrsls	r0, (UNDEF: 2)
    2f58:	ae2e0073 	mcrge	0, 1, r0, cr14, cr3, {3}
    2f5c:	02000011 	andeq	r0, r0, #17
    2f60:	24d009fb 	ldrbcs	r0, [r0], #2555	; 0x9fb
    2f64:	00402000 	subeq	r2, r0, r0
    2f68:	9c010000 	stcls	0, cr0, [r1], {-0}
    2f6c:	0000122e 	andeq	r1, r0, lr, lsr #4
    2f70:	0019b12f 	andseq	fp, r9, pc, lsr #2
    2f74:	09fb0200 	ldmibeq	fp!, {r9}^
    2f78:	00000310 	andeq	r0, r0, r0, lsl r3
    2f7c:	2f749102 	svccs	0x00749102
    2f80:	00000f61 	andeq	r0, r0, r1, ror #30
    2f84:	a109fb02 	tstge	r9, r2, lsl #22	; <UNPREDICTABLE>
    2f88:	02000006 	andeq	r0, r0, #6
    2f8c:	2e007391 	mcrcs	3, 0, r7, cr0, cr1, {4}
    2f90:	0000196b 	andeq	r1, r0, fp, ror #18
    2f94:	9009db02 	andls	sp, r9, r2, lsl #22
    2f98:	40200024 	eormi	r0, r0, r4, lsr #32
    2f9c:	01000000 	mrseq	r0, (UNDEF: 0)
    2fa0:	0012639c 	mulseq	r2, ip, r3
    2fa4:	18ad2f00 	stmiane	sp!, {r8, r9, sl, fp, sp}
    2fa8:	db020000 	blle	82fb0 <startup-0x1ff7d050>
    2fac:	00031009 	andeq	r1, r3, r9
    2fb0:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    2fb4:	000f612f 	andeq	r6, pc, pc, lsr #2
    2fb8:	09db0200 	ldmibeq	fp, {r9}^
    2fbc:	000006a1 	andeq	r0, r0, r1, lsr #13
    2fc0:	00739102 	rsbseq	r9, r3, r2, lsl #2
    2fc4:	0013b62e 	andseq	fp, r3, lr, lsr #12
    2fc8:	09aa0200 	stmibeq	sl!, {r9}
    2fcc:	20002450 	andcs	r2, r0, r0, asr r4
    2fd0:	00000040 	andeq	r0, r0, r0, asr #32
    2fd4:	12989c01 	addsne	r9, r8, #256	; 0x100
    2fd8:	f32f0000 	vhadd.u32	d0, d15, d0
    2fdc:	02000016 	andeq	r0, r0, #22
    2fe0:	031009aa 	tsteq	r0, #2785280	; 0x2a8000
    2fe4:	91020000 	mrsls	r0, (UNDEF: 2)
    2fe8:	0f612f74 	svceq	0x00612f74
    2fec:	aa020000 	bge	82ff4 <startup-0x1ff7d00c>
    2ff0:	0006a109 	andeq	sl, r6, r9, lsl #2
    2ff4:	73910200 	orrsvc	r0, r1, #0, 4
    2ff8:	11d42e00 	bicsne	r2, r4, r0, lsl #28
    2ffc:	7b020000 	blvc	83004 <startup-0x1ff7cffc>
    3000:	00241009 	eoreq	r1, r4, r9
    3004:	00004020 	andeq	r4, r0, r0, lsr #32
    3008:	cd9c0100 	ldfgts	f0, [ip]
    300c:	2f000012 	svccs	0x00000012
    3010:	00001641 	andeq	r1, r0, r1, asr #12
    3014:	10097b02 	andne	r7, r9, r2, lsl #22
    3018:	02000003 	andeq	r0, r0, #3
    301c:	612f7491 			; <UNDEFINED> instruction: 0x612f7491
    3020:	0200000f 	andeq	r0, r0, #15
    3024:	06a1097b 			; <UNDEFINED> instruction: 0x06a1097b
    3028:	91020000 	mrsls	r0, (UNDEF: 2)
    302c:	ad2e0073 	stcge	0, cr0, [lr, #-460]!	; 0xfffffe34
    3030:	02000012 	andeq	r0, r0, #18
    3034:	23d00945 	bicscs	r0, r0, #1130496	; 0x114000
    3038:	00402000 	subeq	r2, r0, r0
    303c:	9c010000 	stcls	0, cr0, [r1], {-0}
    3040:	00001302 	andeq	r1, r0, r2, lsl #6
    3044:	00133c2f 	andseq	r3, r3, pc, lsr #24
    3048:	09450200 	stmdbeq	r5, {r9}^
    304c:	00000310 	andeq	r0, r0, r0, lsl r3
    3050:	2f749102 	svccs	0x00749102
    3054:	00000f61 	andeq	r0, r0, r1, ror #30
    3058:	a1094502 	tstge	r9, r2, lsl #10
    305c:	02000006 	andeq	r0, r0, #6
    3060:	2e007391 	mcrcs	3, 0, r7, cr0, cr1, {4}
    3064:	00001a31 	andeq	r1, r0, r1, lsr sl
    3068:	90092a02 	andls	r2, r9, r2, lsl #20
    306c:	40200023 	eormi	r0, r0, r3, lsr #32
    3070:	01000000 	mrseq	r0, (UNDEF: 0)
    3074:	0013379c 	mulseq	r3, ip, r7
    3078:	19b12f00 	ldmibne	r1!, {r8, r9, sl, fp, sp}
    307c:	2a020000 	bcs	83084 <startup-0x1ff7cf7c>
    3080:	00031009 	andeq	r1, r3, r9
    3084:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    3088:	000f612f 	andeq	r6, pc, pc, lsr #2
    308c:	092a0200 	stmdbeq	sl!, {r9}
    3090:	000006a1 	andeq	r0, r0, r1, lsr #13
    3094:	00739102 	rsbseq	r9, r3, r2, lsl #2
    3098:	0018dd2e 	andseq	sp, r8, lr, lsr #26
    309c:	090d0200 	stmdbeq	sp, {r9}
    30a0:	20002350 	andcs	r2, r0, r0, asr r3
    30a4:	00000040 	andeq	r0, r0, r0, asr #32
    30a8:	136c9c01 	cmnne	ip, #256	; 0x100
    30ac:	ad2f0000 	stcge	0, cr0, [pc, #-0]	; 30b4 <startup-0x1fffcf4c>
    30b0:	02000018 	andeq	r0, r0, #24
    30b4:	0310090d 	tsteq	r0, #212992	; 0x34000
    30b8:	91020000 	mrsls	r0, (UNDEF: 2)
    30bc:	0f612f74 	svceq	0x00612f74
    30c0:	0d020000 	stceq	0, cr0, [r2, #-0]
    30c4:	0006a109 	andeq	sl, r6, r9, lsl #2
    30c8:	73910200 	orrsvc	r0, r1, #0, 4
    30cc:	14ec2e00 	strbtne	r2, [ip], #3584	; 0xe00
    30d0:	e3020000 	movw	r0, #8192	; 0x2000
    30d4:	00231008 	eoreq	r1, r3, r8
    30d8:	00004020 	andeq	r4, r0, r0, lsr #32
    30dc:	a19c0100 	orrsge	r0, ip, r0, lsl #2
    30e0:	2f000013 	svccs	0x00000013
    30e4:	000016f3 	strdeq	r1, [r0], -r3
    30e8:	1008e302 	andne	lr, r8, r2, lsl #6
    30ec:	02000003 	andeq	r0, r0, #3
    30f0:	612f7491 			; <UNDEFINED> instruction: 0x612f7491
    30f4:	0200000f 	andeq	r0, r0, #15
    30f8:	06a108e3 	strteq	r0, [r1], r3, ror #17
    30fc:	91020000 	mrsls	r0, (UNDEF: 2)
    3100:	7e2e0073 	mcrvc	0, 1, r0, cr14, cr3, {3}
    3104:	02000013 	andeq	r0, r0, #19
    3108:	22d008af 	sbcscs	r0, r0, #11468800	; 0xaf0000
    310c:	00402000 	subeq	r2, r0, r0
    3110:	9c010000 	stcls	0, cr0, [r1], {-0}
    3114:	000013d6 	ldrdeq	r1, [r0], -r6
    3118:	0016412f 	andseq	r4, r6, pc, lsr #2
    311c:	08af0200 	stmiaeq	pc!, {r9}	; <UNPREDICTABLE>
    3120:	00000310 	andeq	r0, r0, r0, lsl r3
    3124:	2f749102 	svccs	0x00749102
    3128:	00000f61 	andeq	r0, r0, r1, ror #30
    312c:	a108af02 	tstge	r8, r2, lsl #30
    3130:	02000006 	andeq	r0, r0, #6
    3134:	2e007391 	mcrcs	3, 0, r7, cr0, cr1, {4}
    3138:	00001749 	andeq	r1, r0, r9, asr #14
    313c:	90087602 	andls	r7, r8, r2, lsl #12
    3140:	40200022 	eormi	r0, r0, r2, lsr #32
    3144:	01000000 	mrseq	r0, (UNDEF: 0)
    3148:	00140b9c 	mulseq	r4, ip, fp
    314c:	133c2f00 	teqne	ip, #0, 30
    3150:	76020000 	strvc	r0, [r2], -r0
    3154:	00031008 	andeq	r1, r3, r8
    3158:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    315c:	000f612f 	andeq	r6, pc, pc, lsr #2
    3160:	08760200 	ldmdaeq	r6!, {r9}^
    3164:	000006a1 	andeq	r0, r0, r1, lsr #13
    3168:	00739102 	rsbseq	r9, r3, r2, lsl #2
    316c:	0012052e 	andseq	r0, r2, lr, lsr #10
    3170:	08580200 	ldmdaeq	r8, {r9}^
    3174:	20002250 	andcs	r2, r0, r0, asr r2
    3178:	00000040 	andeq	r0, r0, r0, asr #32
    317c:	14409c01 	strbne	r9, [r0], #-3073	; 0xfffff3ff
    3180:	b12f0000 			; <UNDEFINED> instruction: 0xb12f0000
    3184:	02000019 	andeq	r0, r0, #25
    3188:	03100858 	tsteq	r0, #88, 16	; 0x580000
    318c:	91020000 	mrsls	r0, (UNDEF: 2)
    3190:	0f612f74 	svceq	0x00612f74
    3194:	58020000 	stmdapl	r2, {}	; <UNPREDICTABLE>
    3198:	0006a108 	andeq	sl, r6, r8, lsl #2
    319c:	73910200 	orrsvc	r0, r1, #0, 4
    31a0:	19de2e00 	ldmibne	lr, {r9, sl, fp, sp}^
    31a4:	38020000 	stmdacc	r2, {}	; <UNPREDICTABLE>
    31a8:	00221008 	eoreq	r1, r2, r8
    31ac:	00004020 	andeq	r4, r0, r0, lsr #32
    31b0:	759c0100 	ldrvc	r0, [ip, #256]	; 0x100
    31b4:	2f000014 	svccs	0x00000014
    31b8:	000018ad 	andeq	r1, r0, sp, lsr #17
    31bc:	10083802 	andne	r3, r8, r2, lsl #16
    31c0:	02000003 	andeq	r0, r0, #3
    31c4:	612f7491 			; <UNDEFINED> instruction: 0x612f7491
    31c8:	0200000f 	andeq	r0, r0, #15
    31cc:	06a10838 			; <UNDEFINED> instruction: 0x06a10838
    31d0:	91020000 	mrsls	r0, (UNDEF: 2)
    31d4:	b02e0073 	eorlt	r0, lr, r3, ror r0
    31d8:	02000016 	andeq	r0, r0, #22
    31dc:	21f4080e 	mvnscs	r0, lr, lsl #16
    31e0:	001c2000 	andseq	r2, ip, r0
    31e4:	9c010000 	stcls	0, cr0, [r1], {-0}
    31e8:	0000149b 	muleq	r0, fp, r4
    31ec:	001a172f 	andseq	r1, sl, pc, lsr #14
    31f0:	080e0200 	stmdaeq	lr, {r9}
    31f4:	00000310 	andeq	r0, r0, r0, lsl r3
    31f8:	00749102 	rsbseq	r9, r4, r2, lsl #2
    31fc:	0012982e 	andseq	r9, r2, lr, lsr #16
    3200:	078e0200 	streq	r0, [lr, r0, lsl #4]
    3204:	200021b8 			; <UNDEFINED> instruction: 0x200021b8
    3208:	0000003c 	andeq	r0, r0, ip, lsr r0
    320c:	14d09c01 	ldrbne	r9, [r0], #3073	; 0xc01
    3210:	122f0000 	eorne	r0, pc, #0
    3214:	02000015 	andeq	r0, r0, #21
    3218:	0310078e 	tsteq	r0, #37224448	; 0x2380000
    321c:	91020000 	mrsls	r0, (UNDEF: 2)
    3220:	189d316c 	ldmne	sp, {r2, r3, r5, r6, r8, ip, sp}
    3224:	90020000 	andls	r0, r2, r0
    3228:	00031007 	andeq	r1, r3, r7
    322c:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    3230:	125e2e00 	subsne	r2, lr, #0, 28
    3234:	2b020000 	blcs	8323c <startup-0x1ff7cdc4>
    3238:	00217807 	eoreq	r7, r1, r7, lsl #16
    323c:	00004020 	andeq	r4, r0, r0, lsr #32
    3240:	059c0100 	ldreq	r0, [ip, #256]	; 0x100
    3244:	2f000015 	svccs	0x00000015
    3248:	00001503 	andeq	r1, r0, r3, lsl #10
    324c:	10072b02 	andne	r2, r7, r2, lsl #22
    3250:	02000003 	andeq	r0, r0, #3
    3254:	9d316c91 	ldcls	12, cr6, [r1, #-580]!	; 0xfffffdbc
    3258:	02000018 	andeq	r0, r0, #24
    325c:	0310072d 	tsteq	r0, #11796480	; 0xb40000
    3260:	91020000 	mrsls	r0, (UNDEF: 2)
    3264:	bb2e0074 	bllt	b8343c <startup-0x1f47cbc4>
    3268:	02000015 	andeq	r0, r0, #21
    326c:	213c070b 	teqcs	ip, fp, lsl #14
    3270:	003c2000 	eorseq	r2, ip, r0
    3274:	9c010000 	stcls	0, cr0, [r1], {-0}
    3278:	0000153a 	andeq	r1, r0, sl, lsr r5
    327c:	00132d2f 	andseq	r2, r3, pc, lsr #26
    3280:	070b0200 	streq	r0, [fp, -r0, lsl #4]
    3284:	00000310 	andeq	r0, r0, r0, lsl r3
    3288:	316c9102 	cmncc	ip, r2, lsl #2
    328c:	0000189d 	muleq	r0, sp, r8
    3290:	10070d02 	andne	r0, r7, r2, lsl #26
    3294:	02000003 	andeq	r0, r0, #3
    3298:	2e007491 	mcrcs	4, 0, r7, cr0, cr1, {4}
    329c:	000012f0 	strdeq	r1, [r0], -r0
    32a0:	0006ea02 	andeq	lr, r6, r2, lsl #20
    32a4:	3c200021 	stccc	0, cr0, [r0], #-132	; 0xffffff7c
    32a8:	01000000 	mrseq	r0, (UNDEF: 0)
    32ac:	00156f9c 	mulseq	r5, ip, pc	; <UNPREDICTABLE>
    32b0:	15212f00 	strne	r2, [r1, #-3840]!	; 0xfffff100
    32b4:	ea020000 	b	832bc <startup-0x1ff7cd44>
    32b8:	00031006 	andeq	r1, r3, r6
    32bc:	6c910200 	lfmvs	f0, 4, [r1], {0}
    32c0:	00189d31 	andseq	r9, r8, r1, lsr sp
    32c4:	06ec0200 	strbteq	r0, [ip], r0, lsl #4
    32c8:	00000310 	andeq	r0, r0, r0, lsl r3
    32cc:	00749102 	rsbseq	r9, r4, r2, lsl #2
    32d0:	0014942e 	andseq	r9, r4, lr, lsr #8
    32d4:	06c60200 	strbeq	r0, [r6], r0, lsl #4
    32d8:	200020c4 	andcs	r2, r0, r4, asr #1
    32dc:	0000003c 	andeq	r0, r0, ip, lsr r0
    32e0:	15a49c01 	strne	r9, [r4, #3073]!	; 0xc01
    32e4:	c52f0000 	strgt	r0, [pc, #-0]!	; 32ec <startup-0x1fffcd14>
    32e8:	02000016 	andeq	r0, r0, #22
    32ec:	031006c6 	tsteq	r0, #207618048	; 0xc600000
    32f0:	91020000 	mrsls	r0, (UNDEF: 2)
    32f4:	189d316c 	ldmne	sp, {r2, r3, r5, r6, r8, ip, sp}
    32f8:	c8020000 	stmdagt	r2, {}	; <UNPREDICTABLE>
    32fc:	00031006 	andeq	r1, r3, r6
    3300:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    3304:	115f2e00 	cmpne	pc, r0, lsl #28
    3308:	ab020000 	blge	83310 <startup-0x1ff7ccf0>
    330c:	0020a806 	eoreq	sl, r0, r6, lsl #16
    3310:	00001c20 	andeq	r1, r0, r0, lsr #24
    3314:	ca9c0100 	bgt	fe70371c <GPIO_Ports+0xde6ff948>
    3318:	2f000015 	svccs	0x00000015
    331c:	00001557 	andeq	r1, r0, r7, asr r5
    3320:	1006ab02 	andne	sl, r6, r2, lsl #22
    3324:	02000003 	andeq	r0, r0, #3
    3328:	2e007491 	mcrcs	4, 0, r7, cr0, cr1, {4}
    332c:	0000178a 	andeq	r1, r0, sl, lsl #15
    3330:	8805ef02 	stmdahi	r5, {r1, r8, r9, sl, fp, sp, lr, pc}
    3334:	20200020 	eorcs	r0, r0, r0, lsr #32
    3338:	01000000 	mrseq	r0, (UNDEF: 0)
    333c:	0015f09c 	mulseq	r5, ip, r0
    3340:	0f612f00 	svceq	0x00612f00
    3344:	ef020000 	svc	0x00020000
    3348:	0006a105 	andeq	sl, r6, r5, lsl #2
    334c:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    3350:	19a32e00 	stmibne	r3!, {r9, sl, fp, sp}
    3354:	de020000 	cdple	0, 0, cr0, cr2, cr0, {0}
    3358:	00206805 	eoreq	r6, r0, r5, lsl #16
    335c:	00002020 	andeq	r2, r0, r0, lsr #32
    3360:	169c0100 	ldrne	r0, [ip], r0, lsl #2
    3364:	2f000016 	svccs	0x00000016
    3368:	00000f61 	andeq	r0, r0, r1, ror #30
    336c:	a105de02 	tstge	r5, r2, lsl #28
    3370:	02000006 	andeq	r0, r0, #6
    3374:	2e007791 	mcrcs	7, 0, r7, cr0, cr1, {4}
    3378:	00001650 	andeq	r1, r0, r0, asr r6
    337c:	0805be02 	stmdaeq	r5, {r1, r9, sl, fp, ip, sp, pc}
    3380:	60200020 	eorvs	r0, r0, r0, lsr #32
    3384:	01000000 	mrseq	r0, (UNDEF: 0)
    3388:	00164b9c 	mulseq	r6, ip, fp
    338c:	11f42f00 	mvnsne	r2, r0, lsl #30
    3390:	be020000 	cdplt	0, 0, cr0, cr2, cr0, {0}
    3394:	00031005 	andeq	r1, r3, r5
    3398:	6c910200 	lfmvs	f0, 4, [r1], {0}
    339c:	00189d31 	andseq	r9, r8, r1, lsr sp
    33a0:	05c00200 	strbeq	r0, [r0, #512]	; 0x200
    33a4:	00000310 	andeq	r0, r0, r0, lsl r3
    33a8:	00749102 	rsbseq	r9, r4, r2, lsl #2
    33ac:	00117034 	andseq	r7, r1, r4, lsr r0
    33b0:	05250200 	streq	r0, [r5, #-512]!	; 0xfffffe00
    33b4:	20001eb0 			; <UNDEFINED> instruction: 0x20001eb0
    33b8:	00000158 	andeq	r0, r0, r8, asr r1
    33bc:	16cb9c01 	strbne	r9, [fp], r1, lsl #24
    33c0:	f62f0000 			; <UNDEFINED> instruction: 0xf62f0000
    33c4:	02000015 	andeq	r0, r0, #21
    33c8:	16cb0525 	strbne	r0, [fp], r5, lsr #10
    33cc:	91020000 	mrsls	r0, (UNDEF: 2)
    33d0:	6d74335c 	ldclvs	3, cr3, [r4, #-368]!	; 0xfffffe90
    33d4:	27020070 	smlsdxcs	r2, r0, r0, r0
    33d8:	00031005 	andeq	r1, r3, r5
    33dc:	70910200 	addsvc	r0, r1, r0, lsl #4
    33e0:	001a2b31 	andseq	r2, sl, r1, lsr fp
    33e4:	05270200 	streq	r0, [r7, #-512]!	; 0xfffffe00
    33e8:	00000310 	andeq	r0, r0, r0, lsl r3
    33ec:	316c9102 	cmncc	ip, r2, lsl #2
    33f0:	0000193f 	andeq	r1, r0, pc, lsr r9
    33f4:	10052702 	andne	r2, r5, r2, lsl #14
    33f8:	02000003 	andeq	r0, r0, #3
    33fc:	4f317491 	svcmi	0x00317491
    3400:	02000011 	andeq	r0, r0, #17
    3404:	03100527 	tsteq	r0, #163577856	; 0x9c00000
    3408:	91020000 	mrsls	r0, (UNDEF: 2)
    340c:	144c3168 	strbne	r3, [ip], #-360	; 0xfffffe98
    3410:	27020000 	strcs	r0, [r2, -r0]
    3414:	00031005 	andeq	r1, r3, r5
    3418:	64910200 	ldrvs	r0, [r1], #512	; 0x200
    341c:	001a7d31 	andseq	r7, sl, r1, lsr sp
    3420:	05270200 	streq	r0, [r7, #-512]!	; 0xfffffe00
    3424:	00000310 	andeq	r0, r0, r0, lsl r3
    3428:	00609102 	rsbeq	r9, r0, r2, lsl #2
    342c:	0989041e 	stmibeq	r9, {r1, r2, r3, r4, sl}
    3430:	c92e0000 	stmdbgt	lr!, {}	; <UNPREDICTABLE>
    3434:	02000012 	andeq	r0, r0, #18
    3438:	1e7404f1 	mrcne	4, 3, r0, cr4, cr1, {7}
    343c:	003c2000 	eorseq	r2, ip, r0
    3440:	9c010000 	stcls	0, cr0, [r1], {-0}
    3444:	00001706 	andeq	r1, r0, r6, lsl #14
    3448:	0012412f 	andseq	r4, r2, pc, lsr #2
    344c:	04f10200 	ldrbteq	r0, [r1], #512	; 0x200
    3450:	00000310 	andeq	r0, r0, r0, lsl r3
    3454:	316c9102 	cmncc	ip, r2, lsl #2
    3458:	0000189d 	muleq	r0, sp, r8
    345c:	1004f302 	andne	pc, r4, r2, lsl #6
    3460:	02000003 	andeq	r0, r0, #3
    3464:	2e007491 	mcrcs	4, 0, r7, cr0, cr1, {4}
    3468:	00001576 	andeq	r1, r0, r6, ror r5
    346c:	3c04d202 	sfmcc	f5, 1, [r4], {2}
    3470:	3820001e 	stmdacc	r0!, {r1, r2, r3, r4}
    3474:	01000000 	mrseq	r0, (UNDEF: 0)
    3478:	00173b9c 	mulseq	r7, ip, fp
    347c:	12412f00 	subne	r2, r1, #0, 30
    3480:	d2020000 	andle	r0, r2, #0
    3484:	00031004 	andeq	r1, r3, r4
    3488:	6c910200 	lfmvs	f0, 4, [r1], {0}
    348c:	00189d31 	andseq	r9, r8, r1, lsr sp
    3490:	04d40200 	ldrbeq	r0, [r4], #512	; 0x200
    3494:	00000310 	andeq	r0, r0, r0, lsl r3
    3498:	00749102 	rsbseq	r9, r4, r2, lsl #2
    349c:	00146a2e 	andseq	r6, r4, lr, lsr #20
    34a0:	04b30200 	ldrteq	r0, [r3], #512	; 0x200
    34a4:	20001e08 	andcs	r1, r0, r8, lsl #28
    34a8:	00000034 	andeq	r0, r0, r4, lsr r0
    34ac:	17709c01 	ldrbne	r9, [r0, -r1, lsl #24]!
    34b0:	172f0000 	strne	r0, [pc, -r0]!
    34b4:	02000014 	andeq	r0, r0, #20
    34b8:	031004b3 	tsteq	r0, #-1291845632	; 0xb3000000
    34bc:	91020000 	mrsls	r0, (UNDEF: 2)
    34c0:	189d316c 	ldmne	sp, {r2, r3, r5, r6, r8, ip, sp}
    34c4:	b5020000 	strlt	r0, [r2, #-0]
    34c8:	00031004 	andeq	r1, r3, r4
    34cc:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    34d0:	130f3500 	movwne	r3, #62720	; 0xf500
    34d4:	9a020000 	bls	834dc <startup-0x1ff7cb24>
    34d8:	0002d604 	andeq	sp, r2, r4, lsl #12
    34dc:	001dec00 	andseq	lr, sp, r0, lsl #24
    34e0:	00001c20 	andeq	r1, r0, r0, lsr #24
    34e4:	2e9c0100 	fmlcse	f0, f4, f0
    34e8:	00001a5e 	andeq	r1, r0, lr, asr sl
    34ec:	b8047d02 	stmdalt	r4, {r1, r8, sl, fp, ip, sp, lr}
    34f0:	3420001d 	strtcc	r0, [r0], #-29	; 0xffffffe3
    34f4:	01000000 	mrseq	r0, (UNDEF: 0)
    34f8:	0017bb9c 	mulseq	r7, ip, fp
    34fc:	135f2f00 	cmpne	pc, #0, 30
    3500:	7d020000 	stcvc	0, cr0, [r2, #-0]
    3504:	00031004 	andeq	r1, r3, r4
    3508:	6c910200 	lfmvs	f0, 4, [r1], {0}
    350c:	00189d31 	andseq	r9, r8, r1, lsr sp
    3510:	047f0200 	ldrbteq	r0, [pc], #-512	; 3518 <startup-0x1fffcae8>
    3514:	00000310 	andeq	r0, r0, r0, lsl r3
    3518:	00749102 	rsbseq	r9, r4, r2, lsl #2
    351c:	0015422e 	andseq	r4, r5, lr, lsr #4
    3520:	03b50200 			; <UNDEFINED> instruction: 0x03b50200
    3524:	20001d7c 	andcs	r1, r0, ip, ror sp
    3528:	0000003c 	andeq	r0, r0, ip, lsr r0
    352c:	17ff9c01 	ldrbne	r9, [pc, r1, lsl #24]!
    3530:	ba2f0000 	blt	bc3538 <startup-0x1f43cac8>
    3534:	02000017 	andeq	r0, r0, #23
    3538:	031003b5 	tsteq	r0, #-738197502	; 0xd4000002
    353c:	91020000 	mrsls	r0, (UNDEF: 2)
    3540:	13532f6c 	cmpne	r3, #108, 30	; 0x1b0
    3544:	b5020000 	strlt	r0, [r2, #-0]
    3548:	00031003 	andeq	r1, r3, r3
    354c:	68910200 	ldmvs	r1, {r9}
    3550:	00189d31 	andseq	r9, r8, r1, lsr sp
    3554:	03b70200 			; <UNDEFINED> instruction: 0x03b70200
    3558:	00000310 	andeq	r0, r0, r0, lsl r3
    355c:	00749102 	rsbseq	r9, r4, r2, lsl #2
    3560:	0014dd2e 	andseq	sp, r4, lr, lsr #26
    3564:	03880200 	orreq	r0, r8, #0, 4
    3568:	20001d3c 	andcs	r1, r0, ip, lsr sp
    356c:	00000040 	andeq	r0, r0, r0, asr #32
    3570:	18439c01 	stmdane	r3, {r0, sl, fp, ip, pc}^
    3574:	3a2f0000 	bcc	bc357c <startup-0x1f43ca84>
    3578:	02000017 	andeq	r0, r0, #23
    357c:	03100388 	tsteq	r0, #136, 6	; 0x20000002
    3580:	91020000 	mrsls	r0, (UNDEF: 2)
    3584:	17df2f6c 	ldrbne	r2, [pc, ip, ror #30]
    3588:	88020000 	stmdahi	r2, {}	; <UNPREDICTABLE>
    358c:	00031003 	andeq	r1, r3, r3
    3590:	68910200 	ldmvs	r1, {r9}
    3594:	00189d31 	andseq	r9, r8, r1, lsr sp
    3598:	038a0200 	orreq	r0, sl, #0, 4
    359c:	00000310 	andeq	r0, r0, r0, lsl r3
    35a0:	00749102 	rsbseq	r9, r4, r2, lsl #2
    35a4:	0016952e 	andseq	r9, r6, lr, lsr #10
    35a8:	036f0200 	cmneq	pc, #0, 4
    35ac:	20001d1c 	andcs	r1, r0, ip, lsl sp
    35b0:	00000020 	andeq	r0, r0, r0, lsr #32
    35b4:	18699c01 	stmdane	r9!, {r0, sl, fp, ip, pc}^
    35b8:	612f0000 			; <UNDEFINED> instruction: 0x612f0000
    35bc:	0200000f 	andeq	r0, r0, #15
    35c0:	06a1036f 	strteq	r0, [r1], pc, ror #6
    35c4:	91020000 	mrsls	r0, (UNDEF: 2)
    35c8:	482e0077 	stmdami	lr!, {r0, r1, r2, r4, r5, r6}
    35cc:	0200001a 	andeq	r0, r0, #26
    35d0:	1cfc035d 	ldclne	3, cr0, [ip], #372	; 0x174
    35d4:	00202000 	eoreq	r2, r0, r0
    35d8:	9c010000 	stcls	0, cr0, [r1], {-0}
    35dc:	0000188f 	andeq	r1, r0, pc, lsl #17
    35e0:	000f612f 	andeq	r6, pc, pc, lsr #2
    35e4:	035d0200 	cmpeq	sp, #0, 4
    35e8:	000006a1 	andeq	r0, r0, r1, lsr #13
    35ec:	00779102 	rsbseq	r9, r7, r2, lsl #2
    35f0:	0014ba2e 	andseq	fp, r4, lr, lsr #20
    35f4:	03490200 	movteq	r0, #37376	; 0x9200
    35f8:	20001ccc 	andcs	r1, r0, ip, asr #25
    35fc:	00000030 	andeq	r0, r0, r0, lsr r0
    3600:	18d39c01 	ldmne	r3, {r0, sl, fp, ip, pc}^
    3604:	222f0000 	eorcs	r0, pc, #0
    3608:	02000017 	andeq	r0, r0, #23
    360c:	03100349 	tsteq	r0, #603979777	; 0x24000001
    3610:	91020000 	mrsls	r0, (UNDEF: 2)
    3614:	172a2f74 			; <UNDEFINED> instruction: 0x172a2f74
    3618:	49020000 	stmdbmi	r2, {}	; <UNPREDICTABLE>
    361c:	00031003 	andeq	r1, r3, r3
    3620:	70910200 	addsvc	r0, r1, r0, lsl #4
    3624:	0017322f 	andseq	r3, r7, pc, lsr #4
    3628:	03490200 	movteq	r0, #37376	; 0x9200
    362c:	00000310 	andeq	r0, r0, r0, lsl r3
    3630:	006c9102 	rsbeq	r9, ip, r2, lsl #2
    3634:	0012332e 	andseq	r3, r2, lr, lsr #6
    3638:	02dc0200 	sbcseq	r0, ip, #0, 4
    363c:	20001cac 	andcs	r1, r0, ip, lsr #25
    3640:	00000020 	andeq	r0, r0, r0, lsr #32
    3644:	18f99c01 	ldmne	r9!, {r0, sl, fp, ip, pc}^
    3648:	612f0000 			; <UNDEFINED> instruction: 0x612f0000
    364c:	0200000f 	andeq	r0, r0, #15
    3650:	06a102dc 	ssateq	r0, #2, ip, asr #5
    3654:	91020000 	mrsls	r0, (UNDEF: 2)
    3658:	f52e0077 			; <UNDEFINED> instruction: 0xf52e0077
    365c:	02000019 	andeq	r0, r0, #25
    3660:	1c840251 	sfmne	f0, 4, [r4], {81}	; 0x51
    3664:	00282000 	eoreq	r2, r8, r0
    3668:	9c010000 	stcls	0, cr0, [r1], {-0}
    366c:	0000192e 	andeq	r1, r0, lr, lsr #18
    3670:	0019632f 	andseq	r6, r9, pc, lsr #6
    3674:	02510200 	subseq	r0, r1, #0, 4
    3678:	00000310 	andeq	r0, r0, r0, lsl r3
    367c:	2f749102 	svccs	0x00749102
    3680:	00001988 	andeq	r1, r0, r8, lsl #19
    3684:	10025102 	andne	r5, r2, r2, lsl #2
    3688:	02000003 	andeq	r0, r0, #3
    368c:	2e007091 	mcrcs	0, 0, r7, cr0, cr1, {4}
    3690:	0000177f 	andeq	r1, r0, pc, ror r7
    3694:	64023302 	strvs	r3, [r2], #-770	; 0xfffffcfe
    3698:	2020001c 	eorcs	r0, r0, ip, lsl r0
    369c:	01000000 	mrseq	r0, (UNDEF: 0)
    36a0:	0019549c 	mulseq	r9, ip, r4
    36a4:	0f612f00 	svceq	0x00612f00
    36a8:	33020000 	movwcc	r0, #8192	; 0x2000
    36ac:	0006a102 	andeq	sl, r6, r2, lsl #2
    36b0:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    36b4:	1a6f2e00 	bne	1bceebc <startup-0x1e431144>
    36b8:	1b020000 	blne	836c0 <startup-0x1ff7c940>
    36bc:	001c2802 	andseq	r2, ip, r2, lsl #16
    36c0:	00003c20 	andeq	r3, r0, r0, lsr #24
    36c4:	b69c0100 	ldrlt	r0, [ip], r0, lsl #2
    36c8:	2f000019 	svccs	0x00000019
    36cc:	00001370 	andeq	r1, r0, r0, ror r3
    36d0:	10021b02 	andne	r1, r2, r2, lsl #22
    36d4:	02000003 	andeq	r0, r0, #3
    36d8:	322f7491 	eorcc	r7, pc, #-1862270976	; 0x91000000
    36dc:	02000014 	andeq	r0, r0, #20
    36e0:	0310021b 	tsteq	r0, #-1342177279	; 0xb0000001
    36e4:	91020000 	mrsls	r0, (UNDEF: 2)
    36e8:	19d92f70 	ldmibne	r9, {r4, r5, r6, r8, r9, sl, fp, sp}^
    36ec:	1b020000 	blne	836f4 <startup-0x1ff7c90c>
    36f0:	00031002 	andeq	r1, r3, r2
    36f4:	6c910200 	lfmvs	f0, 4, [r1], {0}
    36f8:	0014372f 	andseq	r3, r4, pc, lsr #14
    36fc:	021b0200 	andseq	r0, fp, #0, 4
    3700:	00000310 	andeq	r0, r0, r0, lsl r3
    3704:	2f689102 	svccs	0x00689102
    3708:	0000143c 	andeq	r1, r0, ip, lsr r4
    370c:	10021b02 	andne	r1, r2, r2, lsl #22
    3710:	02000003 	andeq	r0, r0, #3
    3714:	2e000091 	mcrcs	0, 0, r0, cr0, cr1, {4}
    3718:	00001441 	andeq	r1, r0, r1, asr #8
    371c:	0801b802 	stmdaeq	r1, {r1, fp, ip, sp, pc}
    3720:	2020001c 	eorcs	r0, r0, ip, lsl r0
    3724:	01000000 	mrseq	r0, (UNDEF: 0)
    3728:	0019dc9c 	mulseq	r9, ip, ip
    372c:	0f612f00 	svceq	0x00612f00
    3730:	b8020000 	stmdalt	r2, {}	; <UNPREDICTABLE>
    3734:	0006a101 	andeq	sl, r6, r1, lsl #2
    3738:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    373c:	139f2e00 	orrsne	r2, pc, #0, 28
    3740:	90020000 	andls	r0, r2, r0
    3744:	001bc401 	andseq	ip, fp, r1, lsl #8
    3748:	00004420 	andeq	r4, r0, r0, lsr #8
    374c:	029c0100 	addseq	r0, ip, #0, 2
    3750:	2f00001a 	svccs	0x0000001a
    3754:	0000148c 	andeq	r1, r0, ip, lsl #9
    3758:	d6019002 	strle	r9, [r1], -r2
    375c:	02000002 	andeq	r0, r0, #2
    3760:	2e007791 	mcrcs	7, 0, r7, cr0, cr1, {4}
    3764:	0000160e 	andeq	r1, r0, lr, lsl #12
    3768:	a4017702 	strge	r7, [r1], #-1794	; 0xfffff8fe
    376c:	2020001b 	eorcs	r0, r0, fp, lsl r0
    3770:	01000000 	mrseq	r0, (UNDEF: 0)
    3774:	001a289c 	mulseq	sl, ip, r8
    3778:	0f612f00 	svceq	0x00612f00
    377c:	77020000 	strvc	r0, [r2, -r0]
    3780:	0006a101 	andeq	sl, r6, r1, lsl #2
    3784:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    3788:	16192e00 	ldrne	r2, [r9], -r0, lsl #28
    378c:	53020000 	movwpl	r0, #8192	; 0x2000
    3790:	001b6601 	andseq	r6, fp, r1, lsl #12
    3794:	00003e20 	andeq	r3, r0, r0, lsr #28
    3798:	5d9c0100 	ldfpls	f0, [ip]
    379c:	2f00001a 	svccs	0x0000001a
    37a0:	00001623 	andeq	r1, r0, r3, lsr #12
    37a4:	d6015302 	strle	r5, [r1], -r2, lsl #6
    37a8:	02000002 	andeq	r0, r0, #2
    37ac:	9d316f91 	ldcls	15, cr6, [r1, #-580]!	; 0xfffffdbc
    37b0:	02000018 	andeq	r0, r0, #24
    37b4:	03100155 	tsteq	r0, #1073741845	; 0x40000015
    37b8:	91020000 	mrsls	r0, (UNDEF: 2)
    37bc:	fc360074 	ldc2	0, cr0, [r6], #-464	; 0xfffffe30
    37c0:	02000017 	andeq	r0, r0, #23
    37c4:	06c80134 			; <UNDEFINED> instruction: 0x06c80134
    37c8:	1b080000 	blne	2037d0 <startup-0x1fdfc830>
    37cc:	005e2000 	subseq	r2, lr, r0
    37d0:	9c010000 	stcls	0, cr0, [r1], {-0}
    37d4:	00001aa5 	andeq	r1, r0, r5, lsr #21
    37d8:	0014ab31 	andseq	sl, r4, r1, lsr fp
    37dc:	01360200 	teqeq	r6, r0, lsl #4
    37e0:	0000031b 	andeq	r0, r0, fp, lsl r3
    37e4:	31689102 	cmncc	r8, r2, lsl #2
    37e8:	00000583 	andeq	r0, r0, r3, lsl #11
    37ec:	c8013702 	stmdagt	r1, {r1, r8, r9, sl, ip, sp}
    37f0:	02000006 	andeq	r0, r0, #6
    37f4:	bc316f91 	ldclt	15, cr6, [r1], #-580	; 0xfffffdbc
    37f8:	02000018 	andeq	r0, r0, #24
    37fc:	066e0138 			; <UNDEFINED> instruction: 0x066e0138
    3800:	91020000 	mrsls	r0, (UNDEF: 2)
    3804:	792e006e 	stmdbvc	lr!, {r1, r2, r3, r5, r6}
    3808:	02000014 	andeq	r0, r0, #20
    380c:	1ae0011c 	bne	ff803c84 <GPIO_Ports+0xdf7ffeb0>
    3810:	00282000 	eoreq	r2, r8, r0
    3814:	9c010000 	stcls	0, cr0, [r1], {-0}
    3818:	00001acb 	andeq	r1, r0, fp, asr #21
    381c:	0014d52f 	andseq	sp, r4, pc, lsr #10
    3820:	011c0200 	tsteq	ip, r0, lsl #4
    3824:	000002d6 	ldrdeq	r0, [r0], -r6
    3828:	00779102 	rsbseq	r9, r7, r2, lsl #2
    382c:	0012e52c 	andseq	lr, r2, ip, lsr #10
    3830:	70e10200 	rscvc	r0, r1, r0, lsl #4
    3834:	7020001a 	eorvc	r0, r0, sl, lsl r0
    3838:	01000000 	mrseq	r0, (UNDEF: 0)
    383c:	1836379c 	ldmdane	r6!, {r2, r3, r4, r7, r8, r9, sl, ip, sp}
    3840:	e0010000 	and	r0, r1, r0
    3844:	00031006 	andeq	r1, r3, r6
    3848:	001a2800 	andseq	r2, sl, r0, lsl #16
    384c:	00004820 	andeq	r4, r0, r0, lsr #16
    3850:	069c0100 	ldreq	r0, [ip], r0, lsl #2
    3854:	2f00001b 	svccs	0x0000001b
    3858:	00001586 	andeq	r1, r0, r6, lsl #11
    385c:	1006e001 	andne	lr, r6, r1
    3860:	02000003 	andeq	r0, r0, #3
    3864:	38007491 	stmdacc	r0, {r0, r4, r7, sl, ip, sp, lr}
    3868:	00000cc7 	andeq	r0, r0, r7, asr #25
    386c:	c8065d01 	stmdagt	r6, {r0, r8, sl, fp, ip, lr}
    3870:	60200019 	eorvs	r0, r0, r9, lsl r0
    3874:	01000000 	mrseq	r0, (UNDEF: 0)
    3878:	0c5c2f9c 	mrrceq	15, 9, r2, ip, cr12
    387c:	5d010000 	stcpl	0, cr0, [r1, #-0]
    3880:	00025a06 	andeq	r5, r2, r6, lsl #20
    3884:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    3888:	001da32f 	andseq	sl, sp, pc, lsr #6
    388c:	065d0100 	ldrbeq	r0, [sp], -r0, lsl #2
    3890:	00000310 	andeq	r0, r0, r0, lsl r3
    3894:	00709102 	rsbseq	r9, r0, r2, lsl #2
    3898:	00028d00 	andeq	r8, r2, r0, lsl #26
    389c:	71000400 	tstvc	r0, r0, lsl #8
    38a0:	04000008 	streq	r0, [r0], #-8
    38a4:	0004c101 	andeq	ip, r4, r1, lsl #2
    38a8:	1ac90c00 	bne	ff2468b0 <GPIO_Ports+0xdf242adc>
    38ac:	044a0000 	strbeq	r0, [sl], #-0
    38b0:	303c0000 	eorscc	r0, ip, r0
    38b4:	01742000 	cmneq	r4, r0
    38b8:	0cc50000 	stcleq	0, cr0, [r5], {0}
    38bc:	01020000 	mrseq	r0, (UNDEF: 2)
    38c0:	0002e106 	andeq	lr, r2, r6, lsl #2
    38c4:	01840300 	orreq	r0, r4, r0, lsl #6
    38c8:	2b020000 	blcs	838d0 <startup-0x1ff7c730>
    38cc:	00000037 	andeq	r0, r0, r7, lsr r0
    38d0:	df080102 	svcle	0x00080102
    38d4:	02000002 	andeq	r0, r0, #2
    38d8:	0bbe0502 	bleq	fef84ce8 <GPIO_Ports+0xdef80f14>
    38dc:	02020000 	andeq	r0, r2, #0
    38e0:	000d1107 	andeq	r1, sp, r7, lsl #2
    38e4:	0d8d0300 	stceq	3, cr0, [sp]
    38e8:	4d020000 	stcmi	0, cr0, [r2, #-0]
    38ec:	00000057 	andeq	r0, r0, r7, asr r0
    38f0:	5e050402 	cdppl	4, 0, cr0, cr5, cr2, {0}
    38f4:	03000007 	movweq	r0, #7
    38f8:	00000732 	andeq	r0, r0, r2, lsr r7
    38fc:	00694f02 	rsbeq	r4, r9, r2, lsl #30
    3900:	04020000 	streq	r0, [r2], #-0
    3904:	000a0f07 	andeq	r0, sl, r7, lsl #30
    3908:	05080200 	streq	r0, [r8, #-512]	; 0xfffffe00
    390c:	00000759 	andeq	r0, r0, r9, asr r7
    3910:	0a070802 	beq	1c5920 <startup-0x1fe3a6e0>
    3914:	0400000a 	streq	r0, [r0], #-10
    3918:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    391c:	04020074 	streq	r0, [r2], #-116	; 0xffffff8c
    3920:	000a1407 	andeq	r1, sl, r7, lsl #8
    3924:	01860300 	orreq	r0, r6, r0, lsl #6
    3928:	18030000 	stmdane	r3, {}	; <UNPREDICTABLE>
    392c:	0000002c 	andeq	r0, r0, ip, lsr #32
    3930:	000d8f03 	andeq	r8, sp, r3, lsl #30
    3934:	4c2c0300 	stcmi	3, cr0, [ip], #-0
    3938:	05000000 	streq	r0, [r0, #-0]
    393c:	00000097 	muleq	r0, r7, r0
    3940:	00073403 	andeq	r3, r7, r3, lsl #8
    3944:	5e300300 	cdppl	3, 3, cr0, cr0, cr0, {0}
    3948:	05000000 	streq	r0, [r0, #-0]
    394c:	000000a7 	andeq	r0, r0, r7, lsr #1
    3950:	000c6106 	andeq	r6, ip, r6, lsl #2
    3954:	06fa0400 	ldrbteq	r0, [sl], r0, lsl #8
    3958:	000000a2 	andeq	r0, r0, r2, lsr #1
    395c:	00067207 	andeq	r7, r6, r7, lsl #4
    3960:	a73b0500 	ldrge	r0, [fp, -r0, lsl #10]!
    3964:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    3968:	00370107 	eorseq	r0, r7, r7, lsl #2
    396c:	5d060000 	stcpl	0, cr0, [r6, #-0]
    3970:	0000e903 	andeq	lr, r0, r3, lsl #18
    3974:	1e9e0900 	vfnmsne.f16	s0, s28, s0	; <UNPREDICTABLE>
    3978:	0a000000 	beq	3980 <startup-0x1fffc680>
    397c:	00544553 	subseq	r4, r4, r3, asr r5
    3980:	eb0b0001 	bl	2c398c <startup-0x1fd3c674>
    3984:	06000015 			; <UNDEFINED> instruction: 0x06000015
    3988:	00ce035d 	sbceq	r0, lr, sp, asr r3
    398c:	c90b0000 	stmdbgt	fp, {}	; <UNPREDICTABLE>
    3990:	06000010 			; <UNDEFINED> instruction: 0x06000010
    3994:	00ce035d 	sbceq	r0, lr, sp, asr r3
    3998:	07080000 	streq	r0, [r8, -r0]
    399c:	00003701 	andeq	r3, r0, r1, lsl #14
    39a0:	035f0600 	cmpeq	pc, #0, 12
    39a4:	0000011c 	andeq	r0, r0, ip, lsl r1
    39a8:	00095109 	andeq	r5, r9, r9, lsl #2
    39ac:	00090000 	andeq	r0, r9, r0
    39b0:	0100000c 	tsteq	r0, ip
    39b4:	09d40b00 	ldmibeq	r4, {r8, r9, fp}^
    39b8:	5f060000 	svcpl	0x00060000
    39bc:	00010103 	andeq	r0, r1, r3, lsl #2
    39c0:	060c0c00 	streq	r0, [ip], -r0, lsl #24
    39c4:	015607d9 	ldrsbeq	r0, [r6, #-121]	; 0xffffff87
    39c8:	430d0000 	movwmi	r0, #53248	; 0xd000
    39cc:	db060052 	blle	183b1c <startup-0x1fe7c4e4>
    39d0:	0000b207 	andeq	fp, r0, r7, lsl #4
    39d4:	530d0000 	movwpl	r0, #53248	; 0xd000
    39d8:	dc060052 	stcle	0, cr0, [r6], {82}	; 0x52
    39dc:	0000b207 	andeq	fp, r0, r7, lsl #4
    39e0:	440d0400 	strmi	r0, [sp], #-1024	; 0xfffffc00
    39e4:	dd060052 	stcle	0, cr0, [r6, #-328]	; 0xfffffeb8
    39e8:	0000b207 	andeq	fp, r0, r7, lsl #4
    39ec:	0b000800 	bleq	59f4 <startup-0x1fffa60c>
    39f0:	00001abd 			; <UNDEFINED> instruction: 0x00001abd
    39f4:	2807de06 	stmdacs	r7, {r1, r2, r9, sl, fp, ip, lr, pc}
    39f8:	0e000001 	cdpeq	0, 0, cr0, cr0, cr1, {0}
    39fc:	00001b6d 	andeq	r1, r0, sp, ror #22
    3a00:	8c017d01 	stchi	13, cr7, [r1], {1}
    3a04:	24200031 	strtcs	r0, [r0], #-49	; 0xffffffcf
    3a08:	01000000 	mrseq	r0, (UNDEF: 0)
    3a0c:	0001889c 	muleq	r1, ip, r8
    3a10:	1a820f00 	bne	fe087618 <GPIO_Ports+0xde083844>
    3a14:	7d010000 	stcvc	0, cr0, [r1, #-0]
    3a18:	00008c01 	andeq	r8, r0, r1, lsl #24
    3a1c:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    3a20:	1b5d1000 	blne	1747a28 <startup-0x1e8b85d8>
    3a24:	5f010000 	svcpl	0x00010000
    3a28:	0000f501 	andeq	pc, r0, r1, lsl #10
    3a2c:	00314800 	eorseq	r4, r1, r0, lsl #16
    3a30:	00004420 	andeq	r4, r0, r0, lsr #8
    3a34:	c19c0100 	orrsgt	r0, ip, r0, lsl #2
    3a38:	0f000001 	svceq	0x00000001
    3a3c:	00001a82 	andeq	r1, r0, r2, lsl #21
    3a40:	8c015f01 	stchi	15, cr5, [r1], {1}
    3a44:	02000000 	andeq	r0, r0, #0
    3a48:	4a116f91 	bmi	45f894 <startup-0x1fba076c>
    3a4c:	01000010 	tsteq	r0, r0, lsl r0
    3a50:	00f50161 	rscseq	r0, r5, r1, ror #2
    3a54:	91020000 	mrsls	r0, (UNDEF: 2)
    3a58:	4f0e0077 	svcmi	0x000e0077
    3a5c:	0100001b 	tsteq	r0, fp, lsl r0
    3a60:	3124014f 			; <UNDEFINED> instruction: 0x3124014f
    3a64:	00242000 	eoreq	r2, r4, r0
    3a68:	9c010000 	stcls	0, cr0, [r1], {-0}
    3a6c:	000001e7 	andeq	r0, r0, r7, ror #3
    3a70:	001b460f 	andseq	r4, fp, pc, lsl #12
    3a74:	014f0100 	mrseq	r0, (UNDEF: 95)
    3a78:	0000008c 	andeq	r0, r0, ip, lsl #1
    3a7c:	00779102 	rsbseq	r9, r7, r2, lsl #2
    3a80:	001b8310 	andseq	r8, fp, r0, lsl r3
    3a84:	012e0100 			; <UNDEFINED> instruction: 0x012e0100
    3a88:	000000e9 	andeq	r0, r0, r9, ror #1
    3a8c:	200030e0 	andcs	r3, r0, r0, ror #1
    3a90:	00000044 	andeq	r0, r0, r4, asr #32
    3a94:	02209c01 	eoreq	r9, r0, #256	; 0x100
    3a98:	460f0000 	strmi	r0, [pc], -r0
    3a9c:	0100001b 	tsteq	r0, fp, lsl r0
    3aa0:	008c012e 	addeq	r0, ip, lr, lsr #2
    3aa4:	91020000 	mrsls	r0, (UNDEF: 2)
    3aa8:	104a116f 	subne	r1, sl, pc, ror #2
    3aac:	30010000 	andcc	r0, r1, r0
    3ab0:	0000e901 	andeq	lr, r0, r1, lsl #18
    3ab4:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    3ab8:	1a890e00 	bne	fe2472c0 <GPIO_Ports+0xde2434ec>
    3abc:	14010000 	strne	r0, [r1], #-0
    3ac0:	0030a401 	eorseq	sl, r0, r1, lsl #8
    3ac4:	00003c20 	andeq	r3, r0, r0, lsr #24
    3ac8:	469c0100 	ldrmi	r0, [ip], r0, lsl #2
    3acc:	0f000002 	svceq	0x00000002
    3ad0:	00000f61 	andeq	r0, r0, r1, ror #30
    3ad4:	1c011401 	cfstrsne	mvf1, [r1], {1}
    3ad8:	02000001 	andeq	r0, r0, #1
    3adc:	12007791 	andne	r7, r0, #38010880	; 0x2440000
    3ae0:	00001a9e 	muleq	r0, lr, sl
    3ae4:	00a7b901 	adceq	fp, r7, r1, lsl #18
    3ae8:	30900000 	addscc	r0, r0, r0
    3aec:	00142000 	andseq	r2, r4, r0
    3af0:	9c010000 	stcls	0, cr0, [r1], {-0}
    3af4:	001a9613 	andseq	r9, sl, r3, lsl r6
    3af8:	567b0100 	ldrbtpl	r0, [fp], -r0, lsl #2
    3afc:	3a200030 	bcc	803bc4 <startup-0x1f7fc43c>
    3b00:	01000000 	mrseq	r0, (UNDEF: 0)
    3b04:	00027f9c 	muleq	r2, ip, pc	; <UNPREDICTABLE>
    3b08:	0f611400 	svceq	0x00611400
    3b0c:	7b010000 	blvc	43b14 <startup-0x1ffbc4ec>
    3b10:	0000011c 	andeq	r0, r0, ip, lsl r1
    3b14:	00779102 	rsbseq	r9, r7, r2, lsl #2
    3b18:	001ab215 	andseq	fp, sl, r5, lsl r2
    3b1c:	3c630100 	stfcce	f0, [r3], #-0
    3b20:	1a200030 	bne	803be8 <startup-0x1f7fc418>
    3b24:	01000000 	mrseq	r0, (UNDEF: 0)
    3b28:	0366009c 	cmneq	r6, #156	; 0x9c
    3b2c:	00040000 	andeq	r0, r4, r0
    3b30:	000009cc 	andeq	r0, r0, ip, asr #19
    3b34:	04c10104 	strbeq	r0, [r1], #260	; 0x104
    3b38:	950c0000 	strls	r0, [ip, #-0]
    3b3c:	4a00001b 	bmi	3bb0 <startup-0x1fffc450>
    3b40:	b0000004 	andlt	r0, r0, r4
    3b44:	da200031 	ble	803c10 <startup-0x1f7fc3f0>
    3b48:	ca000001 	bgt	3b54 <startup-0x1fffc4ac>
    3b4c:	0200000e 	andeq	r0, r0, #14
    3b50:	02e10601 	rsceq	r0, r1, #1048576	; 0x100000
    3b54:	84030000 	strhi	r0, [r3], #-0
    3b58:	02000001 	andeq	r0, r0, #1
    3b5c:	0000372b 	andeq	r3, r0, fp, lsr #14
    3b60:	08010200 	stmdaeq	r1, {r9}
    3b64:	000002df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    3b68:	be050202 	cdplt	2, 0, cr0, cr5, cr2, {0}
    3b6c:	0300000b 	movweq	r0, #11
    3b70:	0000040d 	andeq	r0, r0, sp, lsl #8
    3b74:	00503902 	subseq	r3, r0, r2, lsl #18
    3b78:	02020000 	andeq	r0, r2, #0
    3b7c:	000d1107 	andeq	r1, sp, r7, lsl #2
    3b80:	0d8d0300 	stceq	3, cr0, [sp]
    3b84:	4d020000 	stcmi	0, cr0, [r2, #-0]
    3b88:	00000062 	andeq	r0, r0, r2, rrx
    3b8c:	5e050402 	cdppl	4, 0, cr0, cr5, cr2, {0}
    3b90:	03000007 	movweq	r0, #7
    3b94:	00000732 	andeq	r0, r0, r2, lsr r7
    3b98:	00744f02 	rsbseq	r4, r4, r2, lsl #30
    3b9c:	04020000 	streq	r0, [r2], #-0
    3ba0:	000a0f07 	andeq	r0, sl, r7, lsl #30
    3ba4:	05080200 	streq	r0, [r8, #-512]	; 0xfffffe00
    3ba8:	00000759 	andeq	r0, r0, r9, asr r7
    3bac:	0a070802 	beq	1c5bbc <startup-0x1fe3a444>
    3bb0:	0400000a 	streq	r0, [r0], #-10
    3bb4:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    3bb8:	04020074 	streq	r0, [r2], #-116	; 0xffffff8c
    3bbc:	000a1407 	andeq	r1, sl, r7, lsl #8
    3bc0:	01860300 	orreq	r0, r6, r0, lsl #6
    3bc4:	18030000 	stmdane	r3, {}	; <UNPREDICTABLE>
    3bc8:	0000002c 	andeq	r0, r0, ip, lsr #32
    3bcc:	00040f03 	andeq	r0, r4, r3, lsl #30
    3bd0:	45240300 	strmi	r0, [r4, #-768]!	; 0xfffffd00
    3bd4:	03000000 	movweq	r0, #0
    3bd8:	00000d8f 	andeq	r0, r0, pc, lsl #27
    3bdc:	00572c03 	subseq	r2, r7, r3, lsl #24
    3be0:	ad050000 	stcge	0, cr0, [r5, #-0]
    3be4:	03000000 	movweq	r0, #0
    3be8:	00000734 	andeq	r0, r0, r4, lsr r7
    3bec:	00693003 	rsbeq	r3, r9, r3
    3bf0:	61060000 	mrsvs	r0, (UNDEF: 6)
    3bf4:	0400000c 	streq	r0, [r0], #-12
    3bf8:	00b806fa 	ldrshteq	r0, [r8], sl
    3bfc:	72070000 	andvc	r0, r7, #0
    3c00:	05000006 	streq	r0, [r0, #-6]
    3c04:	0000bd3b 	andeq	fp, r0, fp, lsr sp
    3c08:	06140800 	ldreq	r0, [r4], -r0, lsl #16
    3c0c:	0001308d 	andeq	r3, r1, sp, lsl #1
    3c10:	036f0900 	cmneq	pc, #0, 18
    3c14:	8f060000 	svchi	0x00060000
    3c18:	000000bd 	strheq	r0, [r0], -sp
    3c1c:	04990900 	ldreq	r0, [r9], #2304	; 0x900
    3c20:	92060000 	andls	r0, r6, #0
    3c24:	000000bd 	strheq	r0, [r0], -sp
    3c28:	44490a04 	strbmi	r0, [r9], #-2564	; 0xfffff5fc
    3c2c:	95060045 	strls	r0, [r6, #-69]	; 0xffffffbb
    3c30:	00000097 	muleq	r0, r7, r0
    3c34:	54520a08 	ldrbpl	r0, [r2], #-2568	; 0xfffff5f8
    3c38:	99060052 	stmdbls	r6, {r1, r4, r6}
    3c3c:	00000097 	muleq	r0, r7, r0
    3c40:	4c440a09 	mcrrmi	10, 0, r0, r4, cr9
    3c44:	9d060043 	stcls	0, cr0, [r6, #-268]	; 0xfffffef4
    3c48:	00000097 	muleq	r0, r7, r0
    3c4c:	1fad090a 	svcne	0x00ad090a
    3c50:	a1060000 	mrsge	r0, (UNDEF: 6)
    3c54:	00000130 	andeq	r0, r0, r0, lsr r1
    3c58:	970b000b 	strls	r0, [fp, -fp]
    3c5c:	40000000 	andmi	r0, r0, r0
    3c60:	0c000001 	stceq	0, cr0, [r0], {1}
    3c64:	00000090 	muleq	r0, r0, r0
    3c68:	59030007 	stmdbpl	r3, {r0, r1, r2}
    3c6c:	06000005 	streq	r0, [r0], -r5
    3c70:	0000dfa3 	andeq	sp, r0, r3, lsr #31
    3c74:	07040800 	streq	r0, [r4, -r0, lsl #16]
    3c78:	0001ad1a 	andeq	sl, r1, sl, lsl sp
    3c7c:	08b80d00 	ldmeq	r8!, {r8, sl, fp}
    3c80:	1c070000 	stcne	0, cr0, [r7], {-0}
    3c84:	000000bd 	strheq	r0, [r0], -sp
    3c88:	00180804 	andseq	r0, r8, r4, lsl #16
    3c8c:	00013d0d 	andeq	r3, r1, sp, lsl #26
    3c90:	bd200700 	stclt	7, cr0, [r0, #-0]
    3c94:	04000000 	streq	r0, [r0], #-0
    3c98:	0e000e0a 	cdpeq	14, 0, cr0, cr0, cr10, {0}
    3c9c:	07004449 	streq	r4, [r0, -r9, asr #8]
    3ca0:	0000bd24 	andeq	fp, r0, r4, lsr #26
    3ca4:	07070400 	streq	r0, [r7, -r0, lsl #8]
    3ca8:	012e0d00 			; <UNDEFINED> instruction: 0x012e0d00
    3cac:	28070000 	stmdacs	r7, {}	; <UNPREDICTABLE>
    3cb0:	000000bd 	strheq	r0, [r0], -sp
    3cb4:	00060104 	andeq	r0, r6, r4, lsl #2
    3cb8:	0007870d 	andeq	r8, r7, sp, lsl #14
    3cbc:	bd2b0700 	stclt	7, cr0, [fp, #-0]
    3cc0:	04000000 	streq	r0, [r0], #-0
    3cc4:	0d000303 	stceq	3, cr0, [r0, #-12]
    3cc8:	0000090e 	andeq	r0, r0, lr, lsl #18
    3ccc:	00bd2e07 	adcseq	r2, sp, r7, lsl #28
    3cd0:	03040000 	movweq	r0, #16384	; 0x4000
    3cd4:	03000000 	movweq	r0, #0
    3cd8:	00000492 	muleq	r0, r2, r4
    3cdc:	014b2f07 	cmpeq	fp, r7, lsl #30
    3ce0:	350f0000 	strcc	r0, [pc, #-0]	; 3ce8 <startup-0x1fffc318>
    3ce4:	0100001c 	tsteq	r0, ip, lsl r0
    3ce8:	00009758 	andeq	r9, r0, r8, asr r7
    3cec:	00336200 	eorseq	r6, r3, r0, lsl #4
    3cf0:	00002820 	andeq	r2, r0, r0, lsr #16
    3cf4:	fc9c0100 	ldc2	1, cr0, [ip], {0}
    3cf8:	10000001 	andne	r0, r0, r1
    3cfc:	0067736d 	rsbeq	r7, r7, sp, ror #6
    3d00:	01fc5801 	mvnseq	r5, r1, lsl #16
    3d04:	91020000 	mrsls	r0, (UNDEF: 2)
    3d08:	1c07116c 	stfnes	f1, [r7], {108}	; 0x6c
    3d0c:	58010000 	stmdapl	r1, {}	; <UNPREDICTABLE>
    3d10:	000000bd 	strheq	r0, [r0], -sp
    3d14:	12689102 	rsbne	r9, r8, #-2147483648	; 0x80000000
    3d18:	00000cad 	andeq	r0, r0, sp, lsr #25
    3d1c:	02025901 	andeq	r5, r2, #16384	; 0x4000
    3d20:	91020000 	mrsls	r0, (UNDEF: 2)
    3d24:	04130074 	ldreq	r0, [r3], #-116	; 0xffffff8c
    3d28:	00000140 	andeq	r0, r0, r0, asr #2
    3d2c:	00970413 	addseq	r0, r7, r3, lsl r4
    3d30:	e30f0000 	movw	r0, #61440	; 0xf000
    3d34:	0100001b 	tsteq	r0, fp, lsl r0
    3d38:	00009746 	andeq	r9, r0, r6, asr #14
    3d3c:	00330000 	eorseq	r0, r3, r0
    3d40:	00006220 	andeq	r6, r0, r0, lsr #4
    3d44:	599c0100 	ldmibpl	ip, {r8}
    3d48:	10000002 	andne	r0, r0, r2
    3d4c:	0067736d 	rsbeq	r7, r7, sp, ror #6
    3d50:	01fc4601 	mvnseq	r4, r1, lsl #12
    3d54:	91020000 	mrsls	r0, (UNDEF: 2)
    3d58:	6469106c 	strbtvs	r1, [r9], #-108	; 0xffffff94
    3d5c:	97460100 	strbls	r0, [r6, -r0, lsl #2]
    3d60:	02000000 	andeq	r0, r0, #0
    3d64:	ad126b91 	vldrge	d6, [r2, #-580]	; 0xfffffdbc
    3d68:	0100000c 	tsteq	r0, ip
    3d6c:	00020247 	andeq	r0, r2, r7, asr #4
    3d70:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    3d74:	00036812 	andeq	r6, r3, r2, lsl r8
    3d78:	ad4a0100 	stfgee	f0, [sl, #-0]
    3d7c:	02000001 	andeq	r0, r0, #1
    3d80:	0f007091 	svceq	0x00007091
    3d84:	00001c18 	andeq	r1, r0, r8, lsl ip
    3d88:	00972d01 	addseq	r2, r7, r1, lsl #26
    3d8c:	32760000 	rsbscc	r0, r6, #0
    3d90:	008a2000 	addeq	r2, sl, r0
    3d94:	9c010000 	stcls	0, cr0, [r1], {-0}
    3d98:	000002d5 	ldrdeq	r0, [r0], -r5
    3d9c:	67736d10 			; <UNDEFINED> instruction: 0x67736d10
    3da0:	fc2d0100 	stc2	1, cr0, [sp], #-0
    3da4:	02000001 	andeq	r0, r0, #1
    3da8:	4c116c91 	ldcmi	12, cr6, [r1], {145}	; 0x91
    3dac:	0100001c 	tsteq	r0, ip, lsl r0
    3db0:	0000bd2d 	andeq	fp, r0, sp, lsr #26
    3db4:	68910200 	ldmvs	r1, {r9}
    3db8:	001c0c11 	andseq	r0, ip, r1, lsl ip
    3dbc:	972d0100 	strls	r0, [sp, -r0, lsl #2]!
    3dc0:	02000000 	andeq	r0, r0, #0
    3dc4:	54116791 	ldrpl	r6, [r1], #-1937	; 0xfffff86f
    3dc8:	0100001c 	tsteq	r0, ip, lsl r0
    3dcc:	0000972d 	andeq	r9, r0, sp, lsr #14
    3dd0:	66910200 	ldrvs	r0, [r1], r0, lsl #4
    3dd4:	001c5c11 	andseq	r5, ip, r1, lsl ip
    3dd8:	972d0100 	strls	r0, [sp, -r0, lsl #2]!
    3ddc:	02000000 	andeq	r0, r0, #0
    3de0:	ad120091 	ldcge	0, cr0, [r2, #-580]	; 0xfffffdbc
    3de4:	0100000c 	tsteq	r0, ip
    3de8:	0002022e 	andeq	r0, r2, lr, lsr #4
    3dec:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    3df0:	00036812 	andeq	r6, r3, r2, lsl r8
    3df4:	ad310100 	ldfges	f0, [r1, #-0]
    3df8:	02000001 	andeq	r0, r0, #1
    3dfc:	14007091 	strne	r7, [r0], #-145	; 0xffffff6f
    3e00:	00001bf4 	strdeq	r1, [r0], -r4
    3e04:	00970801 	addseq	r0, r7, r1, lsl #16
    3e08:	31b00000 	movscc	r0, r0
    3e0c:	00c62000 	sbceq	r2, r6, r0
    3e10:	9c010000 	stcls	0, cr0, [r1], {-0}
    3e14:	67736d10 			; <UNDEFINED> instruction: 0x67736d10
    3e18:	fc080100 	stc2	1, cr0, [r8], {-0}
    3e1c:	02000001 	andeq	r0, r0, #1
    3e20:	2a116491 	bcs	45d06c <startup-0x1fba2f94>
    3e24:	0100001c 	tsteq	r0, ip, lsl r0
    3e28:	00009708 	andeq	r9, r0, r8, lsl #14
    3e2c:	63910200 	orrsvs	r0, r1, #0, 4
    3e30:	00071d11 	andeq	r1, r7, r1, lsl sp
    3e34:	97080100 	strls	r0, [r8, -r0, lsl #2]
    3e38:	02000000 	andeq	r0, r0, #0
    3e3c:	54116291 	ldrpl	r6, [r1], #-657	; 0xfffffd6f
    3e40:	01000008 	tsteq	r0, r8
    3e44:	00009708 	andeq	r9, r0, r8, lsl #14
    3e48:	61910200 	orrsvs	r0, r1, r0, lsl #4
    3e4c:	00005111 	andeq	r5, r0, r1, lsl r1
    3e50:	a2080100 	andge	r0, r8, #0, 2
    3e54:	02000000 	andeq	r0, r0, #0
    3e58:	58110091 	ldmdapl	r1, {r0, r4, r7}
    3e5c:	01000000 	mrseq	r0, (UNDEF: 0)
    3e60:	0000a208 	andeq	sl, r0, r8, lsl #4
    3e64:	04910200 	ldreq	r0, [r1], #512	; 0x200
    3e68:	000cba11 	andeq	fp, ip, r1, lsl sl
    3e6c:	97080100 	strls	r0, [r8, -r0, lsl #2]
    3e70:	02000000 	andeq	r0, r0, #0
    3e74:	ad120891 	ldcge	8, cr0, [r2, #-580]	; 0xfffffdbc
    3e78:	0100000c 	tsteq	r0, ip
    3e7c:	0002020d 	andeq	r0, r2, sp, lsl #4
    3e80:	6c910200 	lfmvs	f0, 4, [r1], {0}
    3e84:	00036812 	andeq	r6, r3, r2, lsl r8
    3e88:	ad100100 	ldfges	f0, [r0, #-0]
    3e8c:	02000001 	andeq	r0, r0, #1
    3e90:	00006891 	muleq	r0, r1, r8
    3e94:	000001a9 	andeq	r0, r0, r9, lsr #3
    3e98:	0aff0004 	beq	fffc3eb0 <GPIO_Ports+0xdffc00dc>
    3e9c:	01040000 	mrseq	r0, (UNDEF: 4)
    3ea0:	000004c1 	andeq	r0, r0, r1, asr #9
    3ea4:	001c740c 	andseq	r7, ip, ip, lsl #8
    3ea8:	00044a00 	andeq	r4, r4, r0, lsl #20
    3eac:	00338a00 	eorseq	r8, r3, r0, lsl #20
    3eb0:	00012820 	andeq	r2, r1, r0, lsr #16
    3eb4:	0010b500 	andseq	fp, r0, r0, lsl #10
    3eb8:	06010200 	streq	r0, [r1], -r0, lsl #4
    3ebc:	000002e1 	andeq	r0, r0, r1, ror #5
    3ec0:	00018403 	andeq	r8, r1, r3, lsl #8
    3ec4:	372b0200 	strcc	r0, [fp, -r0, lsl #4]!
    3ec8:	02000000 	andeq	r0, r0, #0
    3ecc:	02df0801 	sbcseq	r0, pc, #65536	; 0x10000
    3ed0:	02020000 	andeq	r0, r2, #0
    3ed4:	000bbe05 	andeq	fp, fp, r5, lsl #28
    3ed8:	07020200 	streq	r0, [r2, -r0, lsl #4]
    3edc:	00000d11 	andeq	r0, r0, r1, lsl sp
    3ee0:	5e050402 	cdppl	4, 0, cr0, cr5, cr2, {0}
    3ee4:	02000007 	andeq	r0, r0, #7
    3ee8:	0a0f0704 	beq	3c5b00 <startup-0x1fc3a500>
    3eec:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    3ef0:	00075905 	andeq	r5, r7, r5, lsl #18
    3ef4:	07080200 	streq	r0, [r8, -r0, lsl #4]
    3ef8:	00000a0a 	andeq	r0, r0, sl, lsl #20
    3efc:	69050404 	stmdbvs	r5, {r2, sl}
    3f00:	0200746e 	andeq	r7, r0, #1845493760	; 0x6e000000
    3f04:	0a140704 	beq	505b1c <startup-0x1fafa4e4>
    3f08:	86030000 	strhi	r0, [r3], -r0
    3f0c:	03000001 	movweq	r0, #1
    3f10:	00002c18 	andeq	r2, r0, r8, lsl ip
    3f14:	04670500 	strbteq	r0, [r7], #-1280	; 0xfffffb00
    3f18:	0000b90c 	andeq	fp, r0, ip, lsl #18
    3f1c:	1cdc0600 	ldclne	6, cr0, [ip], {0}
    3f20:	0e040000 	cdpeq	0, 0, cr0, cr4, cr0, {0}
    3f24:	000000b9 	strheq	r0, [r0], -r9
    3f28:	1c6e0600 	stclne	6, cr0, [lr], #-0
    3f2c:	11040000 	mrsne	r0, (UNDEF: 4)
    3f30:	00000076 	andeq	r0, r0, r6, ror r0
    3f34:	6e690764 	cdpvs	7, 6, cr0, cr9, cr4, {3}
    3f38:	76140400 	ldrvc	r0, [r4], -r0, lsl #8
    3f3c:	65000000 	strvs	r0, [r0, #-0]
    3f40:	74756f07 	ldrbtvc	r6, [r5], #-3847	; 0xfffff0f9
    3f44:	76170400 	ldrvc	r0, [r7], -r0, lsl #8
    3f48:	66000000 	strvs	r0, [r0], -r0
    3f4c:	00760800 	rsbseq	r0, r6, r0, lsl #16
    3f50:	00c90000 	sbceq	r0, r9, r0
    3f54:	6f090000 	svcvs	0x00090000
    3f58:	63000000 	movwvs	r0, #0
    3f5c:	1cbf0300 	ldcne	3, cr0, [pc]	; 3f64 <startup-0x1fffc09c>
    3f60:	18040000 	stmdane	r4, {}	; <UNPREDICTABLE>
    3f64:	00000081 	andeq	r0, r0, r1, lsl #1
    3f68:	001ce60a 	andseq	lr, ip, sl, lsl #12
    3f6c:	762d0100 	strtvc	r0, [sp], -r0, lsl #2
    3f70:	54000000 	strpl	r0, [r0], #-0
    3f74:	5e200034 	mcrpl	0, 1, r0, cr0, cr4, {1}
    3f78:	01000000 	mrseq	r0, (UNDEF: 0)
    3f7c:	00010a9c 	muleq	r1, ip, sl
    3f80:	1cfb0b00 	vldmiane	fp!, {d16-d15}
    3f84:	2d010000 	stccs	0, cr0, [r1, #-0]
    3f88:	0000010a 	andeq	r0, r0, sl, lsl #2
    3f8c:	0b749102 	bleq	1d2839c <startup-0x1e2d7c64>
    3f90:	00001cd7 	ldrdeq	r1, [r0], -r7
    3f94:	01102d01 	tsteq	r0, r1, lsl #26
    3f98:	91020000 	mrsls	r0, (UNDEF: 2)
    3f9c:	040c0070 	streq	r0, [ip], #-112	; 0xffffff90
    3fa0:	000000c9 	andeq	r0, r0, r9, asr #1
    3fa4:	0076040c 	rsbseq	r0, r6, ip, lsl #8
    3fa8:	c40d0000 	strgt	r0, [sp], #-0
    3fac:	0100001c 	tsteq	r0, ip, lsl r0
    3fb0:	0034141f 	eorseq	r1, r4, pc, lsl r4
    3fb4:	00004020 	andeq	r4, r0, r0, lsr #32
    3fb8:	569c0100 	ldrpl	r0, [ip], r0, lsl #2
    3fbc:	0b000001 	bleq	3fc8 <startup-0x1fffc038>
    3fc0:	00001cfb 	strdeq	r1, [r0], -fp
    3fc4:	010a1f01 	tsteq	sl, r1, lsl #30
    3fc8:	91020000 	mrsls	r0, (UNDEF: 2)
    3fcc:	1ce10b6c 	vstmiane	r1!, {d16-<overflow reg d69>}
    3fd0:	1f010000 	svcne	0x00010000
    3fd4:	00000076 	andeq	r0, r0, r6, ror r0
    3fd8:	0e6b9102 	lgneqe	f1, f2
    3fdc:	00001d02 	andeq	r1, r0, r2, lsl #26
    3fe0:	00762101 	rsbseq	r2, r6, r1, lsl #2
    3fe4:	91020000 	mrsls	r0, (UNDEF: 2)
    3fe8:	640a0077 	strvs	r0, [sl], #-119	; 0xffffff89
    3fec:	0100001c 	tsteq	r0, ip, lsl r0
    3ff0:	0000760c 	andeq	r7, r0, ip, lsl #12
    3ff4:	0033b200 	eorseq	fp, r3, r0, lsl #4
    3ff8:	00006220 	andeq	r6, r0, r0, lsr #4
    3ffc:	8c9c0100 	ldfhis	f0, [ip], {0}
    4000:	0b000001 	bleq	400c <startup-0x1fffbff4>
    4004:	00001cfb 	strdeq	r1, [r0], -fp
    4008:	010a0c01 	tsteq	sl, r1, lsl #24
    400c:	91020000 	mrsls	r0, (UNDEF: 2)
    4010:	1ce10b74 	vstmiane	r1!, {d16-<overflow reg d73>}
    4014:	0c010000 	stceq	0, cr0, [r1], {-0}
    4018:	00000076 	andeq	r0, r0, r6, ror r0
    401c:	00739102 	rsbseq	r9, r3, r2, lsl #2
    4020:	001cf00f 	andseq	pc, ip, pc
    4024:	8a040100 	bhi	10442c <startup-0x1fefbbd4>
    4028:	28200033 	stmdacs	r0!, {r0, r1, r4, r5}
    402c:	01000000 	mrseq	r0, (UNDEF: 0)
    4030:	1cfb0b9c 	vldmiane	fp!, {d16-d29}
    4034:	04010000 	streq	r0, [r1], #-0
    4038:	0000010a 	andeq	r0, r0, sl, lsl #2
    403c:	00749102 	rsbseq	r9, r4, r2, lsl #2
    4040:	00054300 	andeq	r4, r5, r0, lsl #6
    4044:	e8000400 	stmda	r0, {sl}
    4048:	0400000b 	streq	r0, [r0], #-11
    404c:	0004c101 	andeq	ip, r4, r1, lsl #2
    4050:	1db90c00 	ldcne	12, cr0, [r9]
    4054:	044a0000 	strbeq	r0, [sl], #-0
    4058:	34b40000 	ldrtcc	r0, [r4], #0
    405c:	01c42000 	biceq	r2, r4, r0
    4060:	12070000 	andne	r0, r7, #0
    4064:	01020000 	mrseq	r0, (UNDEF: 2)
    4068:	0002e106 	andeq	lr, r2, r6, lsl #2
    406c:	01840300 	orreq	r0, r4, r0, lsl #6
    4070:	2b020000 	blcs	84078 <startup-0x1ff7bf88>
    4074:	00000037 	andeq	r0, r0, r7, lsr r0
    4078:	df080102 	svcle	0x00080102
    407c:	02000002 	andeq	r0, r0, #2
    4080:	0bbe0502 	bleq	fef85490 <GPIO_Ports+0xdef816bc>
    4084:	02020000 	andeq	r0, r2, #0
    4088:	000d1107 	andeq	r1, sp, r7, lsl #2
    408c:	0d8d0300 	stceq	3, cr0, [sp]
    4090:	4d020000 	stcmi	0, cr0, [r2, #-0]
    4094:	00000057 	andeq	r0, r0, r7, asr r0
    4098:	5e050402 	cdppl	4, 0, cr0, cr5, cr2, {0}
    409c:	03000007 	movweq	r0, #7
    40a0:	00000732 	andeq	r0, r0, r2, lsr r7
    40a4:	00694f02 	rsbeq	r4, r9, r2, lsl #30
    40a8:	04020000 	streq	r0, [r2], #-0
    40ac:	000a0f07 	andeq	r0, sl, r7, lsl #30
    40b0:	05080200 	streq	r0, [r8, #-512]	; 0xfffffe00
    40b4:	00000759 	andeq	r0, r0, r9, asr r7
    40b8:	0a070802 	beq	1c60c8 <startup-0x1fe39f38>
    40bc:	0400000a 	streq	r0, [r0], #-10
    40c0:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    40c4:	04020074 	streq	r0, [r2], #-116	; 0xffffff8c
    40c8:	000a1407 	andeq	r1, sl, r7, lsl #8
    40cc:	01860300 	orreq	r0, r6, r0, lsl #6
    40d0:	18030000 	stmdane	r3, {}	; <UNPREDICTABLE>
    40d4:	0000002c 	andeq	r0, r0, ip, lsr #32
    40d8:	00008c05 	andeq	r8, r0, r5, lsl #24
    40dc:	0d8f0300 	stceq	3, cr0, [pc]	; 40e4 <startup-0x1fffbf1c>
    40e0:	2c030000 	stccs	0, cr0, [r3], {-0}
    40e4:	0000004c 	andeq	r0, r0, ip, asr #32
    40e8:	00009c05 	andeq	r9, r0, r5, lsl #24
    40ec:	07340300 	ldreq	r0, [r4, -r0, lsl #6]!
    40f0:	30030000 	andcc	r0, r3, r0
    40f4:	0000005e 	andeq	r0, r0, lr, asr r0
    40f8:	0000ac05 	andeq	sl, r0, r5, lsl #24
    40fc:	00b70600 	adcseq	r0, r7, r0, lsl #12
    4100:	04070000 	streq	r0, [r7], #-0
    4104:	01a0040e 	lsleq	r0, lr, #8
    4108:	0000017d 	andeq	r0, r0, sp, ror r1
    410c:	000d9708 	andeq	r9, sp, r8, lsl #14
    4110:	01a20400 			; <UNDEFINED> instruction: 0x01a20400
    4114:	0000018d 	andeq	r0, r0, sp, lsl #3
    4118:	02cb0800 	sbceq	r0, fp, #0, 16
    411c:	a3040000 	movwge	r0, #16384	; 0x4000
    4120:	00019201 	andeq	r9, r1, r1, lsl #4
    4124:	bd082000 	stclt	0, cr2, [r8, #-0]
    4128:	0400000a 	streq	r0, [r0], #-10
    412c:	018d01a4 	orreq	r0, sp, r4, lsr #3
    4130:	08800000 	stmeq	r0, {}	; <UNPREDICTABLE>
    4134:	00000000 	andeq	r0, r0, r0
    4138:	9201a504 	andls	sl, r1, #4, 10	; 0x1000000
    413c:	a0000001 	andge	r0, r0, r1
    4140:	000d4109 	andeq	r4, sp, r9, lsl #2
    4144:	01a60400 			; <UNDEFINED> instruction: 0x01a60400
    4148:	0000018d 	andeq	r0, r0, sp, lsl #3
    414c:	75090100 	strvc	r0, [r9, #-256]	; 0xffffff00
    4150:	04000003 	streq	r0, [r0], #-3
    4154:	019201a7 	orrseq	r0, r2, r7, lsr #3
    4158:	01200000 			; <UNDEFINED> instruction: 0x01200000
    415c:	00013809 	andeq	r3, r1, r9, lsl #16
    4160:	01a80400 			; <UNDEFINED> instruction: 0x01a80400
    4164:	0000018d 	andeq	r0, r0, sp, lsl #3
    4168:	7f090180 	svcvc	0x00090180
    416c:	04000003 	streq	r0, [r0], #-3
    4170:	019201a9 	orrseq	r0, r2, r9, lsr #3
    4174:	01a00000 	moveq	r0, r0
    4178:	00031809 	andeq	r1, r3, r9, lsl #16
    417c:	01aa0400 			; <UNDEFINED> instruction: 0x01aa0400
    4180:	0000018d 	andeq	r0, r0, sp, lsl #3
    4184:	ff090200 			; <UNDEFINED> instruction: 0xff090200
    4188:	04000002 	streq	r0, [r0], #-2
    418c:	01a201ab 			; <UNDEFINED> instruction: 0x01a201ab
    4190:	02200000 	eoreq	r0, r0, #0
    4194:	0050490a 	subseq	r4, r0, sl, lsl #18
    4198:	c201ac04 	andgt	sl, r1, #4, 24	; 0x400
    419c:	00000001 	andeq	r0, r0, r1
    41a0:	03090903 	movweq	r0, #39171	; 0x9903
    41a4:	ad040000 	stcge	0, cr0, [r4, #-0]
    41a8:	0001c701 	andeq	ip, r1, r1, lsl #14
    41ac:	0903f000 	stmdbeq	r3, {ip, sp, lr, pc}
    41b0:	00000568 	andeq	r0, r0, r8, ror #10
    41b4:	b701ae04 	strlt	sl, [r1, -r4, lsl #28]
    41b8:	00000000 	andeq	r0, r0, r0
    41bc:	b70b000e 	strlt	r0, [fp, -lr]
    41c0:	8d000000 	stchi	0, cr0, [r0, #-0]
    41c4:	0c000001 	stceq	0, cr0, [r0], {1}
    41c8:	00000085 	andeq	r0, r0, r5, lsl #1
    41cc:	7d050007 	stcvc	0, cr0, [r5, #-28]	; 0xffffffe4
    41d0:	0b000001 	bleq	41dc <startup-0x1fffbe24>
    41d4:	000000ac 	andeq	r0, r0, ip, lsr #1
    41d8:	000001a2 	andeq	r0, r0, r2, lsr #3
    41dc:	0000850c 	andeq	r8, r0, ip, lsl #10
    41e0:	0b001700 	bleq	9de8 <startup-0x1fff6218>
    41e4:	000000ac 	andeq	r0, r0, ip, lsr #1
    41e8:	000001b2 			; <UNDEFINED> instruction: 0x000001b2
    41ec:	0000850c 	andeq	r8, r0, ip, lsl #10
    41f0:	0b003700 	bleq	11df8 <startup-0x1ffee208>
    41f4:	00000097 	muleq	r0, r7, r0
    41f8:	000001c2 	andeq	r0, r0, r2, asr #3
    41fc:	0000850c 	andeq	r8, r0, ip, lsl #10
    4200:	0500ef00 	streq	lr, [r0, #-3840]	; 0xfffff100
    4204:	000001b2 			; <UNDEFINED> instruction: 0x000001b2
    4208:	0000ac0b 	andeq	sl, r0, fp, lsl #24
    420c:	0001d800 	andeq	sp, r1, r0, lsl #16
    4210:	00850d00 	addeq	r0, r5, r0, lsl #26
    4214:	02830000 	addeq	r0, r3, #0
    4218:	09ca0e00 	stmibeq	sl, {r9, sl, fp}^
    421c:	af040000 	svcge	0x00040000
    4220:	0000c101 	andeq	ip, r0, r1, lsl #2
    4224:	048c0f00 	streq	r0, [ip], #3840	; 0xf00
    4228:	02ff01c0 	rscseq	r0, pc, #192, 2	; 0x30
    422c:	f0080000 			; <UNDEFINED> instruction: 0xf0080000
    4230:	04000001 	streq	r0, [r0], #-1
    4234:	00bc01c2 	adcseq	r0, ip, r2, asr #3
    4238:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    423c:	00000268 	andeq	r0, r0, r8, ror #4
    4240:	b701c304 	strlt	ip, [r1, -r4, lsl #6]
    4244:	04000000 	streq	r0, [r0], #-0
    4248:	0000be08 	andeq	fp, r0, r8, lsl #28
    424c:	01c40400 	biceq	r0, r4, r0, lsl #8
    4250:	000000b7 	strheq	r0, [r0], -r7
    4254:	01de0808 	bicseq	r0, lr, r8, lsl #16
    4258:	c5040000 	strgt	r0, [r4, #-0]
    425c:	0000b701 	andeq	fp, r0, r1, lsl #14
    4260:	53100c00 	tstpl	r0, #0, 24
    4264:	04005243 	streq	r5, [r0], #-579	; 0xfffffdbd
    4268:	00b701c6 	adcseq	r0, r7, r6, asr #3
    426c:	10100000 	andsne	r0, r0, r0
    4270:	00524343 	subseq	r4, r2, r3, asr #6
    4274:	b701c704 	strlt	ip, [r1, -r4, lsl #14]
    4278:	14000000 	strne	r0, [r0], #-0
    427c:	50485310 	subpl	r5, r8, r0, lsl r3
    4280:	01c80400 	biceq	r0, r8, r0, lsl #8
    4284:	0000030f 	andeq	r0, r0, pc, lsl #6
    4288:	05620818 	strbeq	r0, [r2, #-2072]!	; 0xfffff7e8
    428c:	c9040000 	stmdbgt	r4, {}	; <UNPREDICTABLE>
    4290:	0000b701 	andeq	fp, r0, r1, lsl #14
    4294:	0e082400 	cfcpyseq	mvf2, mvf8
    4298:	0400000b 	streq	r0, [r0], #-11
    429c:	00b701ca 	adcseq	r0, r7, sl, asr #3
    42a0:	08280000 	stmdaeq	r8!, {}	; <UNPREDICTABLE>
    42a4:	0000048d 	andeq	r0, r0, sp, lsl #9
    42a8:	b701cb04 	strlt	ip, [r1, -r4, lsl #22]
    42ac:	2c000000 	stccs	0, cr0, [r0], {-0}
    42b0:	0003cd08 	andeq	ip, r3, r8, lsl #26
    42b4:	01cc0400 	biceq	r0, ip, r0, lsl #8
    42b8:	000000b7 	strheq	r0, [r0], -r7
    42bc:	0bb80830 	bleq	fee06384 <GPIO_Ports+0xdee025b0>
    42c0:	cd040000 	stcgt	0, cr0, [r4, #-0]
    42c4:	0000b701 	andeq	fp, r0, r1, lsl #14
    42c8:	9e083400 	cfcpysls	mvf3, mvf8
    42cc:	04000008 	streq	r0, [r0], #-8
    42d0:	00b701ce 	adcseq	r0, r7, lr, asr #3
    42d4:	08380000 	ldmdaeq	r8!, {}	; <UNPREDICTABLE>
    42d8:	00000adc 	ldrdeq	r0, [r0], -ip
    42dc:	b701cf04 	strlt	ip, [r1, -r4, lsl #30]
    42e0:	3c000000 	stccc	0, cr0, [r0], {-0}
    42e4:	52465010 	subpl	r5, r6, #16
    42e8:	01d00400 	bicseq	r0, r0, r0, lsl #8
    42ec:	00000329 	andeq	r0, r0, r9, lsr #6
    42f0:	46441040 	strbmi	r1, [r4], -r0, asr #32
    42f4:	d1040052 	qaddle	r0, r2, r4
    42f8:	0000bc01 	andeq	fp, r0, r1, lsl #24
    42fc:	41104800 	tstmi	r0, r0, lsl #16
    4300:	04005244 	streq	r5, [r0], #-580	; 0xfffffdbc
    4304:	00bc01d2 	ldrsbteq	r0, [ip], r2
    4308:	084c0000 	stmdaeq	ip, {}^	; <UNPREDICTABLE>
    430c:	00000bb3 			; <UNDEFINED> instruction: 0x00000bb3
    4310:	4301d304 	movwmi	sp, #4868	; 0x1304
    4314:	50000003 	andpl	r0, r0, r3
    4318:	000bd708 	andeq	sp, fp, r8, lsl #14
    431c:	01d40400 	bicseq	r0, r4, r0, lsl #8
    4320:	0000035d 	andeq	r0, r0, sp, asr r3
    4324:	02cb0860 	sbceq	r0, fp, #96, 16	; 0x600000
    4328:	d5040000 	strle	r0, [r4, #-0]
    432c:	00036201 	andeq	r6, r3, r1, lsl #4
    4330:	3b087400 	blcc	221338 <startup-0x1fddecc8>
    4334:	0400000d 	streq	r0, [r0], #-13
    4338:	00b701d6 	ldrsbteq	r0, [r7], r6
    433c:	00880000 	addeq	r0, r8, r0
    4340:	0000970b 	andeq	r9, r0, fp, lsl #14
    4344:	00030f00 	andeq	r0, r3, r0, lsl #30
    4348:	00850c00 	addeq	r0, r5, r0, lsl #24
    434c:	000b0000 	andeq	r0, fp, r0
    4350:	0002ff05 	andeq	pc, r2, r5, lsl #30
    4354:	00bc0b00 	adcseq	r0, ip, r0, lsl #22
    4358:	03240000 			; <UNDEFINED> instruction: 0x03240000
    435c:	850c0000 	strhi	r0, [ip, #-0]
    4360:	01000000 	mrseq	r0, (UNDEF: 0)
    4364:	03140600 	tsteq	r4, #0, 12
    4368:	24050000 	strcs	r0, [r5], #-0
    436c:	0b000003 	bleq	4380 <startup-0x1fffbc80>
    4370:	000000bc 	strheq	r0, [r0], -ip
    4374:	0000033e 	andeq	r0, r0, lr, lsr r3
    4378:	0000850c 	andeq	r8, r0, ip, lsl #10
    437c:	06000300 	streq	r0, [r0], -r0, lsl #6
    4380:	0000032e 	andeq	r0, r0, lr, lsr #6
    4384:	00033e05 	andeq	r3, r3, r5, lsl #28
    4388:	00bc0b00 	adcseq	r0, ip, r0, lsl #22
    438c:	03580000 	cmpeq	r8, #0
    4390:	850c0000 	strhi	r0, [ip, #-0]
    4394:	04000000 	streq	r0, [r0], #-0
    4398:	03480600 	movteq	r0, #34304	; 0x8600
    439c:	58050000 	stmdapl	r5, {}	; <UNPREDICTABLE>
    43a0:	0b000003 	bleq	43b4 <startup-0x1fffbc4c>
    43a4:	000000ac 	andeq	r0, r0, ip, lsr #1
    43a8:	00000372 	andeq	r0, r0, r2, ror r3
    43ac:	0000850c 	andeq	r8, r0, ip, lsl #10
    43b0:	0e000400 	cfcpyseq	mvf0, mvf0
    43b4:	000003b3 			; <UNDEFINED> instruction: 0x000003b3
    43b8:	e401d704 	str	sp, [r1], #-1796	; 0xfffff8fc
    43bc:	0f000001 	svceq	0x00000001
    43c0:	02bf0410 	adcseq	r0, pc, #16, 8	; 0x10000000
    43c4:	000003bc 			; <UNDEFINED> instruction: 0x000003bc
    43c8:	00167a08 	andseq	r7, r6, r8, lsl #20
    43cc:	02c10400 	sbceq	r0, r1, #0, 8
    43d0:	000000b7 	strheq	r0, [r0], -r7
    43d4:	18d80800 	ldmne	r8, {fp}^
    43d8:	c2040000 	andgt	r0, r4, #0
    43dc:	0000b702 	andeq	fp, r0, r2, lsl #14
    43e0:	56100400 	ldrpl	r0, [r0], -r0, lsl #8
    43e4:	04004c41 	streq	r4, [r0], #-3137	; 0xfffff3bf
    43e8:	00b702c3 	adcseq	r0, r7, r3, asr #5
    43ec:	08080000 	stmdaeq	r8, {}	; <UNPREDICTABLE>
    43f0:	00001892 	muleq	r0, r2, r8
    43f4:	bc02c404 	cfstrslt	mvf12, [r2], {4}
    43f8:	0c000000 	stceq	0, cr0, [r0], {-0}
    43fc:	17600e00 	strbne	r0, [r0, -r0, lsl #28]!
    4400:	c5040000 	strgt	r0, [r4, #-0]
    4404:	00037e02 	andeq	r7, r3, r2, lsl #28
    4408:	0c611100 	stfeqe	f1, [r1], #-0
    440c:	fa040000 	blx	104414 <startup-0x1fefbbec>
    4410:	0000a706 	andeq	sl, r0, r6, lsl #14
    4414:	06721200 	ldrbteq	r1, [r2], -r0, lsl #4
    4418:	3b050000 	blcc	144420 <startup-0x1febbbe0>
    441c:	000000ac 	andeq	r0, r0, ip, lsr #1
    4420:	37010713 	smladcc	r1, r3, r7, r0
    4424:	06000000 	streq	r0, [r0], -r0
    4428:	03fa035f 	mvnseq	r0, #2080374785	; 0x7c000001
    442c:	51140000 	tstpl	r4, r0
    4430:	00000009 	andeq	r0, r0, r9
    4434:	000c0014 	andeq	r0, ip, r4, lsl r0
    4438:	0e000100 	adfeqs	f0, f0, f0
    443c:	000009d4 	ldrdeq	r0, [r0], -r4
    4440:	df035f06 	svcle	0x00035f06
    4444:	15000003 	strne	r0, [r0, #-3]
    4448:	3f360704 	svccc	0x00360704
    444c:	16000004 	strne	r0, [r0], -r4
    4450:	00000926 	andeq	r0, r0, r6, lsr #18
    4454:	008c3807 	addeq	r3, ip, r7, lsl #16
    4458:	16000000 	strne	r0, [r0], -r0
    445c:	000003eb 	andeq	r0, r0, fp, ror #7
    4460:	008c3d07 	addeq	r3, ip, r7, lsl #26
    4464:	16010000 	strne	r0, [r1], -r0
    4468:	00000936 	andeq	r0, r0, r6, lsr r9
    446c:	008c4207 	addeq	r4, ip, r7, lsl #4
    4470:	16020000 	strne	r0, [r2], -r0
    4474:	000001cb 	andeq	r0, r0, fp, asr #3
    4478:	03fa4707 	mvnseq	r4, #1835008	; 0x1c0000
    447c:	00030000 	andeq	r0, r3, r0
    4480:	000d0003 	andeq	r0, sp, r3
    4484:	064a0700 	strbeq	r0, [sl], -r0, lsl #14
    4488:	17000004 	strne	r0, [r0, -r4]
    448c:	00001d88 	andeq	r1, r0, r8, lsl #27
    4490:	3644df01 	strbcc	sp, [r4], -r1, lsl #30
    4494:	00342000 	eorseq	r2, r4, r0
    4498:	9c010000 	stcls	0, cr0, [r1], {-0}
    449c:	0000046e 	andeq	r0, r0, lr, ror #8
    44a0:	001d0c18 	andseq	r0, sp, r8, lsl ip
    44a4:	acdf0100 	ldfgee	f0, [pc], {0}
    44a8:	02000000 	andeq	r0, r0, #0
    44ac:	17007491 			; <UNDEFINED> instruction: 0x17007491
    44b0:	00001d74 	andeq	r1, r0, r4, ror sp
    44b4:	35fcc701 	ldrbcc	ip, [ip, #1793]!	; 0x701
    44b8:	00482000 	subeq	r2, r8, r0
    44bc:	9c010000 	stcls	0, cr0, [r1], {-0}
    44c0:	000004a0 	andeq	r0, r0, r0, lsr #9
    44c4:	001e2d18 	andseq	r2, lr, r8, lsl sp
    44c8:	8cc70100 	stfhie	f0, [r7], {0}
    44cc:	02000000 	andeq	r0, r0, #0
    44d0:	61187791 			; <UNDEFINED> instruction: 0x61187791
    44d4:	0100000f 	tsteq	r0, pc
    44d8:	0003fac7 	andeq	pc, r3, r7, asr #21
    44dc:	76910200 	ldrvc	r0, [r1], r0, lsl #4
    44e0:	1d591700 	ldclne	7, cr1, [r9, #-0]
    44e4:	b4010000 	strlt	r0, [r1], #-0
    44e8:	200035d0 	ldrdcs	r3, [r0], -r0
    44ec:	0000002c 	andeq	r0, r0, ip, lsr #32
    44f0:	04d29c01 	ldrbeq	r9, [r2], #3073	; 0xc01
    44f4:	ac180000 	ldcge	0, cr0, [r8], {-0}
    44f8:	0100001d 	tsteq	r0, sp, lsl r0
    44fc:	0000acb4 			; <UNDEFINED> instruction: 0x0000acb4
    4500:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    4504:	001d5218 	andseq	r5, sp, r8, lsl r2
    4508:	acb40100 	ldfges	f0, [r4]
    450c:	02000000 	andeq	r0, r0, #0
    4510:	17007091 			; <UNDEFINED> instruction: 0x17007091
    4514:	00001d41 	andeq	r1, r0, r1, asr #26
    4518:	34d88801 	ldrbcc	r8, [r8], #2049	; 0x801
    451c:	00f82000 	rscseq	r2, r8, r0
    4520:	9c010000 	stcls	0, cr0, [r1], {-0}
    4524:	00000520 	andeq	r0, r0, r0, lsr #10
    4528:	001d1e18 	andseq	r1, sp, r8, lsl lr
    452c:	20880100 	addcs	r0, r8, r0, lsl #2
    4530:	02000005 	andeq	r0, r0, #5
    4534:	a0196491 	mulsge	r9, r1, r4
    4538:	0100001d 	tsteq	r0, sp, lsl r0
    453c:	00008c8a 	andeq	r8, r0, sl, lsl #25
    4540:	6f910200 	svcvs	0x00910200
    4544:	001d4b19 	andseq	r4, sp, r9, lsl fp
    4548:	8c8a0100 	stfhis	f0, [sl], {0}
    454c:	02000000 	andeq	r0, r0, #0
    4550:	6d196e91 	ldcvs	14, cr6, [r9, #-580]	; 0xfffffdbc
    4554:	0100001d 	tsteq	r0, sp, lsl r0
    4558:	00008c8a 	andeq	r8, r0, sl, lsl #25
    455c:	6d910200 	lfmvs	f0, 4, [r1]
    4560:	3f041a00 	svccc	0x00041a00
    4564:	1b000004 	blne	457c <startup-0x1fffba84>
    4568:	00001e3a 	andeq	r1, r0, sl, lsr lr
    456c:	34b47601 	ldrtcc	r7, [r4], #1537	; 0x601
    4570:	00242000 	eoreq	r2, r4, r0
    4574:	9c010000 	stcls	0, cr0, [r1], {-0}
    4578:	001d2e18 	andseq	r2, sp, r8, lsl lr
    457c:	ac760100 	ldfgee	f0, [r6], #-0
    4580:	02000000 	andeq	r0, r0, #0
    4584:	00007491 	muleq	r0, r1, r4
    4588:	00000623 	andeq	r0, r0, r3, lsr #12
    458c:	0d5c0004 	ldcleq	0, cr0, [ip, #-16]
    4590:	01040000 	mrseq	r0, (UNDEF: 4)
    4594:	000004c1 	andeq	r0, r0, r1, asr #9
    4598:	001ed80c 	andseq	sp, lr, ip, lsl #16
    459c:	00044a00 	andeq	r4, r4, r0, lsl #20
    45a0:	00367800 	eorseq	r7, r6, r0, lsl #16
    45a4:	00050e20 	andeq	r0, r5, r0, lsr #28
    45a8:	00140500 	andseq	r0, r4, r0, lsl #10
    45ac:	06010200 	streq	r0, [r1], -r0, lsl #4
    45b0:	000002e1 	andeq	r0, r0, r1, ror #5
    45b4:	00018403 	andeq	r8, r1, r3, lsl #8
    45b8:	372b0200 	strcc	r0, [fp, -r0, lsl #4]!
    45bc:	02000000 	andeq	r0, r0, #0
    45c0:	02df0801 	sbcseq	r0, pc, #65536	; 0x10000
    45c4:	02020000 	andeq	r0, r2, #0
    45c8:	000bbe05 	andeq	fp, fp, r5, lsl #28
    45cc:	040d0300 	streq	r0, [sp], #-768	; 0xfffffd00
    45d0:	39020000 	stmdbcc	r2, {}	; <UNPREDICTABLE>
    45d4:	00000050 	andeq	r0, r0, r0, asr r0
    45d8:	11070202 	tstne	r7, r2, lsl #4
    45dc:	0300000d 	movweq	r0, #13
    45e0:	00000d8d 	andeq	r0, r0, sp, lsl #27
    45e4:	00624d02 	rsbeq	r4, r2, r2, lsl #26
    45e8:	04020000 	streq	r0, [r2], #-0
    45ec:	00075e05 	andeq	r5, r7, r5, lsl #28
    45f0:	07320300 	ldreq	r0, [r2, -r0, lsl #6]!
    45f4:	4f020000 	svcmi	0x00020000
    45f8:	00000074 	andeq	r0, r0, r4, ror r0
    45fc:	0f070402 	svceq	0x00070402
    4600:	0200000a 	andeq	r0, r0, #10
    4604:	07590508 	ldrbeq	r0, [r9, -r8, lsl #10]
    4608:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    460c:	000a0a07 	andeq	r0, sl, r7, lsl #20
    4610:	05040400 	streq	r0, [r4, #-1024]	; 0xfffffc00
    4614:	00746e69 	rsbseq	r6, r4, r9, ror #28
    4618:	14070402 	strne	r0, [r7], #-1026	; 0xfffffbfe
    461c:	0300000a 	movweq	r0, #10
    4620:	00000186 	andeq	r0, r0, r6, lsl #3
    4624:	002c1803 	eoreq	r1, ip, r3, lsl #16
    4628:	0f030000 	svceq	0x00030000
    462c:	03000004 	movweq	r0, #4
    4630:	00004524 	andeq	r4, r0, r4, lsr #10
    4634:	00a20500 	adceq	r0, r2, r0, lsl #10
    4638:	8f030000 	svchi	0x00030000
    463c:	0300000d 	movweq	r0, #13
    4640:	0000572c 	andeq	r5, r0, ip, lsr #14
    4644:	00b20500 	adcseq	r0, r2, r0, lsl #10
    4648:	34030000 	strcc	r0, [r3], #-0
    464c:	03000007 	movweq	r0, #7
    4650:	00006930 	andeq	r6, r0, r0, lsr r9
    4654:	00c20500 	sbceq	r0, r2, r0, lsl #10
    4658:	61060000 	mrsvs	r0, (UNDEF: 6)
    465c:	0400000c 	streq	r0, [r0], #-12
    4660:	00bd06fa 	ldrshteq	r0, [sp], sl
    4664:	72070000 	andvc	r0, r7, #0
    4668:	05000006 	streq	r0, [r0, #-6]
    466c:	0000c23b 	andeq	ip, r0, fp, lsr r2
    4670:	01070800 	tsteq	r7, r0, lsl #16
    4674:	00000037 	andeq	r0, r0, r7, lsr r0
    4678:	04035f06 	streq	r5, [r3], #-3846	; 0xfffff0fa
    467c:	09000001 	stmdbeq	r0, {r0}
    4680:	00000951 	andeq	r0, r0, r1, asr r9
    4684:	0c000900 			; <UNDEFINED> instruction: 0x0c000900
    4688:	00010000 	andeq	r0, r1, r0
    468c:	c306280a 	movwgt	r2, #26634	; 0x680a
    4690:	00019005 	andeq	r9, r1, r5
    4694:	0cc10b00 	vstmiaeq	r1, {d16-d15}
    4698:	c5060000 	strgt	r0, [r6, #-0]
    469c:	0000cd05 	andeq	ip, r0, r5, lsl #26
    46a0:	e10b0000 	mrs	r0, (UNDEF: 11)
    46a4:	0600000a 	streq	r0, [r0], -sl
    46a8:	00cd05c6 	sbceq	r0, sp, r6, asr #11
    46ac:	0b040000 	bleq	1046b4 <startup-0x1fefb94c>
    46b0:	000006e9 	andeq	r0, r0, r9, ror #13
    46b4:	cd05c706 	stcgt	7, cr12, [r5, #-24]	; 0xffffffe8
    46b8:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    46bc:	0007810b 	andeq	r8, r7, fp, lsl #2
    46c0:	05c80600 	strbeq	r0, [r8, #1536]	; 0x600
    46c4:	000000cd 	andeq	r0, r0, sp, asr #1
    46c8:	44490c0c 	strbmi	r0, [r9], #-3084	; 0xfffff3f4
    46cc:	c9060052 	stmdbgt	r6, {r1, r4, r6}
    46d0:	0000cd05 	andeq	ip, r0, r5, lsl #26
    46d4:	4f0c1000 	svcmi	0x000c1000
    46d8:	06005244 	streq	r5, [r0], -r4, asr #4
    46dc:	00cd05ca 	sbceq	r0, sp, sl, asr #11
    46e0:	0b140000 	bleq	5046e8 <startup-0x1fafb918>
    46e4:	000007c3 	andeq	r0, r0, r3, asr #15
    46e8:	ad05cb06 	vstrge	d12, [r5, #-24]	; 0xffffffe8
    46ec:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    46f0:	0007bd0b 	andeq	fp, r7, fp, lsl #26
    46f4:	05cc0600 	strbeq	r0, [ip, #1536]	; 0x600
    46f8:	000000ad 	andeq	r0, r0, sp, lsr #1
    46fc:	06c90b1a 			; <UNDEFINED> instruction: 0x06c90b1a
    4700:	cd060000 	stcgt	0, cr0, [r6, #-0]
    4704:	0000cd05 	andeq	ip, r0, r5, lsl #26
    4708:	410c1c00 	tstmi	ip, r0, lsl #24
    470c:	06005246 	streq	r5, [r0], -r6, asr #4
    4710:	01a005ce 	asreq	r0, lr, #11
    4714:	00200000 	eoreq	r0, r0, r0
    4718:	0000cd0d 	andeq	ip, r0, sp, lsl #26
    471c:	0001a000 	andeq	sl, r1, r0
    4720:	00900e00 	addseq	r0, r0, r0, lsl #28
    4724:	00010000 	andeq	r0, r1, r0
    4728:	00019005 	andeq	r9, r1, r5
    472c:	0c410f00 	mcrreq	15, 0, r0, r1, cr0
    4730:	cf060000 	svcgt	0x00060000
    4734:	00010405 	andeq	r0, r1, r5, lsl #8
    4738:	01071000 	mrseq	r1, (UNDEF: 7)
    473c:	00000037 	andeq	r0, r0, r7, lsr r0
    4740:	01d74207 	bicseq	r4, r7, r7, lsl #4
    4744:	aa090000 	bge	24474c <startup-0x1fdbb8b4>
    4748:	00000006 	andeq	r0, r0, r6
    474c:	00058a09 	andeq	r8, r5, r9, lsl #20
    4750:	08090100 	stmdaeq	r9, {r8}
    4754:	02000002 	andeq	r0, r0, #2
    4758:	00022d09 	andeq	r2, r2, r9, lsl #26
    475c:	03000300 	movweq	r0, #768	; 0x300
    4760:	00000ac2 	andeq	r0, r0, r2, asr #21
    4764:	01b14707 			; <UNDEFINED> instruction: 0x01b14707
    4768:	07100000 	ldreq	r0, [r0, -r0]
    476c:	00003701 	andeq	r3, r0, r1, lsl #14
    4770:	fc4f0700 	mcrr2	7, 0, r0, pc, cr0	; <UNPREDICTABLE>
    4774:	09000001 	stmdbeq	r0, {r0}
    4778:	0000031d 	andeq	r0, r0, sp, lsl r3
    477c:	02720900 	rsbseq	r0, r2, #0, 18
    4780:	00010000 	andeq	r0, r1, r0
    4784:	00011203 	andeq	r1, r1, r3, lsl #4
    4788:	e2520700 	subs	r0, r2, #0, 14
    478c:	10000001 	andne	r0, r0, r1
    4790:	00370107 	eorseq	r0, r7, r7, lsl #2
    4794:	5a070000 	bpl	1c479c <startup-0x1fe3b864>
    4798:	0000022d 	andeq	r0, r0, sp, lsr #4
    479c:	00041809 	andeq	r1, r4, r9, lsl #16
    47a0:	3d090000 	stccc	0, cr0, [r9, #-0]
    47a4:	01000007 	tsteq	r0, r7
    47a8:	000de409 	andeq	lr, sp, r9, lsl #8
    47ac:	c9090200 	stmdbgt	r9, {r9}
    47b0:	03000007 	movweq	r0, #7
    47b4:	0b370300 	bleq	dc53bc <startup-0x1f23ac44>
    47b8:	5f070000 	svcpl	0x00070000
    47bc:	00000207 	andeq	r0, r0, r7, lsl #4
    47c0:	37010710 	smladcc	r1, r0, r7, r0
    47c4:	07000000 	streq	r0, [r0, -r0]
    47c8:	0002586e 	andeq	r5, r2, lr, ror #16
    47cc:	00ad0900 	adceq	r0, sp, r0, lsl #18
    47d0:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    47d4:	00000ce6 	andeq	r0, r0, r6, ror #25
    47d8:	01ac0901 			; <UNDEFINED> instruction: 0x01ac0901
    47dc:	00020000 	andeq	r0, r2, r0
    47e0:	0003bc03 	andeq	fp, r3, r3, lsl #24
    47e4:	38720700 	ldmdacc	r2!, {r8, r9, sl}^
    47e8:	10000002 	andne	r0, r0, r2
    47ec:	00370107 	eorseq	r0, r7, r7, lsl #2
    47f0:	7a070000 	bvc	1c47f8 <startup-0x1fe3b808>
    47f4:	0000027d 	andeq	r0, r0, sp, ror r2
    47f8:	001e9a09 	andseq	r9, lr, r9, lsl #20
    47fc:	5a090000 	bpl	244804 <startup-0x1fdbb7fc>
    4800:	0100001e 	tsteq	r0, lr, lsl r0
    4804:	1fc50300 	svcne	0x00c50300
    4808:	7d070000 	stcvc	0, cr0, [r7, #-0]
    480c:	00000263 	andeq	r0, r0, r3, ror #4
    4810:	84070811 	strhi	r0, [r7], #-2065	; 0xfffff7ef
    4814:	000002cd 	andeq	r0, r0, sp, asr #5
    4818:	000b5b12 	andeq	r5, fp, r2, lsl fp
    481c:	c2860700 	addgt	r0, r6, #0, 14
    4820:	00000000 	andeq	r0, r0, r0
    4824:	000a8612 	andeq	r8, sl, r2, lsl r6
    4828:	d7890700 	strle	r0, [r9, r0, lsl #14]
    482c:	04000001 	streq	r0, [r0], #-1
    4830:	00087712 	andeq	r7, r8, r2, lsl r7
    4834:	2d8c0700 	stccs	7, cr0, [ip]
    4838:	05000002 	streq	r0, [r0, #-2]
    483c:	00072712 	andeq	r2, r7, r2, lsl r7
    4840:	fc8f0700 	stc2	7, cr0, [pc], {0}
    4844:	06000001 	streq	r0, [r0], -r1
    4848:	000b8c12 	andeq	r8, fp, r2, lsl ip
    484c:	58920700 	ldmpl	r2, {r8, r9, sl}
    4850:	07000002 	streq	r0, [r0, -r2]
    4854:	02800300 	addeq	r0, r0, #0, 6
    4858:	94070000 	strls	r0, [r7], #-0
    485c:	00000288 	andeq	r0, r0, r8, lsl #5
    4860:	00200213 	eoreq	r0, r0, r3, lsl r2
    4864:	02430100 	subeq	r0, r3, #0, 2
    4868:	20003ae2 	andcs	r3, r0, r2, ror #21
    486c:	000000a4 	andeq	r0, r0, r4, lsr #1
    4870:	033a9c01 	teqeq	sl, #256	; 0x100
    4874:	e5140000 	ldr	r0, [r4, #-0]
    4878:	0100001f 	tsteq	r0, pc, lsl r0
    487c:	033a0243 	teqeq	sl, #805306372	; 0x30000004
    4880:	91020000 	mrsls	r0, (UNDEF: 2)
    4884:	1f90146c 	svcne	0x0090146c
    4888:	43010000 	movwmi	r0, #4096	; 0x1000
    488c:	0000a202 	andeq	sl, r0, r2, lsl #4
    4890:	6a910200 	bvs	fe445098 <GPIO_Ports+0xde4412c4>
    4894:	001e7614 	andseq	r7, lr, r4, lsl r6
    4898:	02430100 	subeq	r0, r3, #0, 2
    489c:	00000097 	muleq	r0, r7, r0
    48a0:	15699102 	strbne	r9, [r9, #-258]!	; 0xfffffefe
    48a4:	00001e7e 	andeq	r1, r0, lr, ror lr
    48a8:	c2024501 	andgt	r4, r2, #4194304	; 0x400000
    48ac:	02000000 	andeq	r0, r0, #0
    48b0:	fb157491 	blx	561afe <startup-0x1fa9e502>
    48b4:	0100001f 	tsteq	r0, pc, lsl r0
    48b8:	00c20246 	sbceq	r0, r2, r6, asr #4
    48bc:	91020000 	mrsls	r0, (UNDEF: 2)
    48c0:	04160070 	ldreq	r0, [r6], #-112	; 0xffffff90
    48c4:	000001a5 	andeq	r0, r0, r5, lsr #3
    48c8:	001feb13 	andseq	lr, pc, r3, lsl fp	; <UNPREDICTABLE>
    48cc:	01f00100 	mvnseq	r0, r0, lsl #2
    48d0:	20003abe 			; <UNDEFINED> instruction: 0x20003abe
    48d4:	00000024 	andeq	r0, r0, r4, lsr #32
    48d8:	03759c01 	cmneq	r5, #256	; 0x100
    48dc:	e5140000 	ldr	r0, [r4, #-0]
    48e0:	0100001f 	tsteq	r0, pc, lsl r0
    48e4:	033a01f0 	teqeq	sl, #240, 2	; 0x3c
    48e8:	91020000 	mrsls	r0, (UNDEF: 2)
    48ec:	0b5b1474 	bleq	16c9ac4 <startup-0x1e93653c>
    48f0:	f0010000 			; <UNDEFINED> instruction: 0xf0010000
    48f4:	0000a201 	andeq	sl, r0, r1, lsl #4
    48f8:	72910200 	addsvc	r0, r1, #0, 4
    48fc:	1fda1300 	svcne	0x00da1300
    4900:	e0010000 	and	r0, r1, r0
    4904:	003aa001 	eorseq	sl, sl, r1
    4908:	00001e20 	andeq	r1, r0, r0, lsr #28
    490c:	aa9c0100 	bge	fe704d14 <GPIO_Ports+0xde700f40>
    4910:	14000003 	strne	r0, [r0], #-3
    4914:	00001fe5 	andeq	r1, r0, r5, ror #31
    4918:	3a01e001 	bcc	7c924 <startup-0x1ff836dc>
    491c:	02000003 	andeq	r0, r0, #3
    4920:	88147491 	ldmdahi	r4, {r0, r4, r7, sl, ip, sp, lr}
    4924:	0100001f 	tsteq	r0, pc, lsl r0
    4928:	00a201e0 	adceq	r0, r2, r0, ror #3
    492c:	91020000 	mrsls	r0, (UNDEF: 2)
    4930:	a4130072 	ldrge	r0, [r3], #-114	; 0xffffff8e
    4934:	0100001e 	tsteq	r0, lr, lsl r0
    4938:	3a6601c7 	bcc	198505c <startup-0x1e67afa4>
    493c:	003a2000 	eorseq	r2, sl, r0
    4940:	9c010000 	stcls	0, cr0, [r1], {-0}
    4944:	000003ee 	andeq	r0, r0, lr, ror #7
    4948:	001fe514 	andseq	lr, pc, r4, lsl r5	; <UNPREDICTABLE>
    494c:	01c70100 	biceq	r0, r7, r0, lsl #2
    4950:	0000033a 	andeq	r0, r0, sl, lsr r3
    4954:	14749102 	ldrbtne	r9, [r4], #-258	; 0xfffffefe
    4958:	00000b5b 	andeq	r0, r0, fp, asr fp
    495c:	a201c701 	andge	ip, r1, #262144	; 0x40000
    4960:	02000000 	andeq	r0, r0, #0
    4964:	93147291 	tstls	r4, #268435465	; 0x10000009
    4968:	0100001e 	tsteq	r0, lr, lsl r0
    496c:	027d01c7 	rsbseq	r0, sp, #-1073741775	; 0xc0000031
    4970:	91020000 	mrsls	r0, (UNDEF: 2)
    4974:	c9130071 	ldmdbgt	r3, {r0, r4, r5, r6}
    4978:	0100001e 	tsteq	r0, lr, lsl r0
    497c:	3a4801b1 	bcc	1205048 <startup-0x1edfafb8>
    4980:	001e2000 	andseq	r2, lr, r0
    4984:	9c010000 	stcls	0, cr0, [r1], {-0}
    4988:	00000423 	andeq	r0, r0, r3, lsr #8
    498c:	001fe514 	andseq	lr, pc, r4, lsl r5	; <UNPREDICTABLE>
    4990:	01b10100 			; <UNDEFINED> instruction: 0x01b10100
    4994:	0000033a 	andeq	r0, r0, sl, lsr r3
    4998:	14749102 	ldrbtne	r9, [r4], #-258	; 0xfffffefe
    499c:	00000b5b 	andeq	r0, r0, fp, asr fp
    49a0:	a201b101 	andge	fp, r1, #1073741824	; 0x40000000
    49a4:	02000000 	andeq	r0, r0, #0
    49a8:	13007291 	movwne	r7, #657	; 0x291
    49ac:	00001eb2 			; <UNDEFINED> instruction: 0x00001eb2
    49b0:	2a019c01 	bcs	6b9bc <startup-0x1ff94644>
    49b4:	1e20003a 	mcrne	0, 1, r0, cr0, cr10, {1}
    49b8:	01000000 	mrseq	r0, (UNDEF: 0)
    49bc:	0004589c 	muleq	r4, ip, r8
    49c0:	1fe51400 	svcne	0x00e51400
    49c4:	9c010000 	stcls	0, cr0, [r1], {-0}
    49c8:	00033a01 	andeq	r3, r3, r1, lsl #20
    49cc:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    49d0:	000b5b14 	andeq	r5, fp, r4, lsl fp
    49d4:	019c0100 	orrseq	r0, ip, r0, lsl #2
    49d8:	000000a2 	andeq	r0, r0, r2, lsr #1
    49dc:	00729102 	rsbseq	r9, r2, r2, lsl #2
    49e0:	001e6217 	andseq	r6, lr, r7, lsl r2
    49e4:	01880100 	orreq	r0, r8, r0, lsl #2
    49e8:	000000a2 	andeq	r0, r0, r2, lsr #1
    49ec:	20003a14 	andcs	r3, r0, r4, lsl sl
    49f0:	00000016 	andeq	r0, r0, r6, lsl r0
    49f4:	04829c01 	streq	r9, [r2], #3073	; 0xc01
    49f8:	e5140000 	ldr	r0, [r4, #-0]
    49fc:	0100001f 	tsteq	r0, pc, lsl r0
    4a00:	033a0188 	teqeq	sl, #136, 2	; 0x22
    4a04:	91020000 	mrsls	r0, (UNDEF: 2)
    4a08:	13170074 	tstne	r7, #116	; 0x74
    4a0c:	01000020 	tsteq	r0, r0, lsr #32
    4a10:	0097016e 	addseq	r0, r7, lr, ror #2
    4a14:	39d20000 	ldmibcc	r2, {}^	; <UNPREDICTABLE>
    4a18:	00422000 	subeq	r2, r2, r0
    4a1c:	9c010000 	stcls	0, cr0, [r1], {-0}
    4a20:	000004ca 	andeq	r0, r0, sl, asr #9
    4a24:	001fe514 	andseq	lr, pc, r4, lsl r5	; <UNPREDICTABLE>
    4a28:	016e0100 	cmneq	lr, r0, lsl #2
    4a2c:	0000033a 	andeq	r0, r0, sl, lsr r3
    4a30:	146c9102 	strbtne	r9, [ip], #-258	; 0xfffffefe
    4a34:	00000b5b 	andeq	r0, r0, fp, asr fp
    4a38:	a2016e01 	andge	r6, r1, #1, 28
    4a3c:	02000000 	andeq	r0, r0, #0
    4a40:	4a156a91 	bmi	55f48c <startup-0x1faa0b74>
    4a44:	01000010 	tsteq	r0, r0, lsl r0
    4a48:	00970170 	addseq	r0, r7, r0, ror r1
    4a4c:	91020000 	mrsls	r0, (UNDEF: 2)
    4a50:	9f170077 	svcls	0x00170077
    4a54:	0100001f 	tsteq	r0, pc, lsl r0
    4a58:	00a2015d 	adceq	r0, r2, sp, asr r1
    4a5c:	39bc0000 	ldmibcc	ip!, {}	; <UNPREDICTABLE>
    4a60:	00162000 	andseq	r2, r6, r0
    4a64:	9c010000 	stcls	0, cr0, [r1], {-0}
    4a68:	000004f4 	strdeq	r0, [r0], -r4
    4a6c:	001fe514 	andseq	lr, pc, r4, lsl r5	; <UNPREDICTABLE>
    4a70:	015d0100 	cmpeq	sp, r0, lsl #2
    4a74:	0000033a 	andeq	r0, r0, sl, lsr r3
    4a78:	00749102 	rsbseq	r9, r4, r2, lsl #2
    4a7c:	001f6217 	andseq	r6, pc, r7, lsl r2	; <UNPREDICTABLE>
    4a80:	01430100 	mrseq	r0, (UNDEF: 83)
    4a84:	00000097 	muleq	r0, r7, r0
    4a88:	2000397a 	andcs	r3, r0, sl, ror r9
    4a8c:	00000042 	andeq	r0, r0, r2, asr #32
    4a90:	053c9c01 	ldreq	r9, [ip, #-3073]!	; 0xfffff3ff
    4a94:	e5140000 	ldr	r0, [r4, #-0]
    4a98:	0100001f 	tsteq	r0, pc, lsl r0
    4a9c:	033a0143 	teqeq	sl, #-1073741808	; 0xc0000010
    4aa0:	91020000 	mrsls	r0, (UNDEF: 2)
    4aa4:	0b5b146c 	bleq	16c9c5c <startup-0x1e9363a4>
    4aa8:	43010000 	movwmi	r0, #4096	; 0x1000
    4aac:	0000a201 	andeq	sl, r0, r1, lsl #4
    4ab0:	6a910200 	bvs	fe4452b8 <GPIO_Ports+0xde4414e4>
    4ab4:	00104a15 	andseq	r4, r0, r5, lsl sl
    4ab8:	01450100 	mrseq	r0, (UNDEF: 85)
    4abc:	00000097 	muleq	r0, r7, r0
    4ac0:	00779102 	rsbseq	r9, r7, r2, lsl #2
    4ac4:	001fb213 	andseq	fp, pc, r3, lsl r2	; <UNPREDICTABLE>
    4ac8:	01150100 	tsteq	r5, r0, lsl #2
    4acc:	20003934 	andcs	r3, r0, r4, lsr r9
    4ad0:	00000046 	andeq	r0, r0, r6, asr #32
    4ad4:	05809c01 	streq	r9, [r0, #3073]	; 0xc01
    4ad8:	e5140000 	ldr	r0, [r4, #-0]
    4adc:	0100001f 	tsteq	r0, pc, lsl r0
    4ae0:	033a0115 	teqeq	sl, #1073741829	; 0x40000005
    4ae4:	91020000 	mrsls	r0, (UNDEF: 2)
    4ae8:	0b5b146c 	bleq	16c9ca0 <startup-0x1e936360>
    4aec:	15010000 	strne	r0, [r1, #-0]
    4af0:	0000a201 	andeq	sl, r0, r1, lsl #4
    4af4:	6a910200 	bvs	fe4452fc <GPIO_Ports+0xde441528>
    4af8:	706d7418 	rsbvc	r7, sp, r8, lsl r4
    4afc:	01170100 	tsteq	r7, r0, lsl #2
    4b00:	000000cd 	andeq	r0, r0, sp, asr #1
    4b04:	00749102 	rsbseq	r9, r4, r2, lsl #2
    4b08:	001e8319 	andseq	r8, lr, r9, lsl r3
    4b0c:	00fe0100 	rscseq	r0, lr, r0, lsl #2
    4b10:	34200039 	strtcc	r0, [r0], #-57	; 0xffffffc7
    4b14:	01000000 	mrseq	r0, (UNDEF: 0)
    4b18:	0005a49c 	muleq	r5, ip, r4
    4b1c:	1f781a00 	svcne	0x00781a00
    4b20:	fe010000 	cdp2	0, 0, cr0, cr1, cr0, {0}
    4b24:	000005a4 	andeq	r0, r0, r4, lsr #11
    4b28:	00749102 	rsbseq	r9, r4, r2, lsl #2
    4b2c:	02cd0416 	sbceq	r0, sp, #369098752	; 0x16000000
    4b30:	bf190000 	svclt	0x00190000
    4b34:	0100001e 	tsteq	r0, lr, lsl r0
    4b38:	0037e8ca 	eorseq	lr, r7, sl, asr #17
    4b3c:	00011820 	andeq	r1, r1, r0, lsr #16
    4b40:	069c0100 	ldreq	r0, [ip], r0, lsl #2
    4b44:	1a000006 	bne	4b64 <startup-0x1fffb49c>
    4b48:	00001fe5 	andeq	r1, r0, r5, ror #31
    4b4c:	033aca01 	teqeq	sl, #4096	; 0x1000
    4b50:	91020000 	mrsls	r0, (UNDEF: 2)
    4b54:	1f781a64 	svcne	0x00781a64
    4b58:	ca010000 	bgt	44b60 <startup-0x1ffbb4a0>
    4b5c:	000005a4 	andeq	r0, r0, r4, lsr #11
    4b60:	1b609102 	blne	1828f70 <startup-0x1e7d7090>
    4b64:	00001e53 	andeq	r1, r0, r3, asr lr
    4b68:	00c2cc01 	sbceq	ip, r2, r1, lsl #24
    4b6c:	91020000 	mrsls	r0, (UNDEF: 2)
    4b70:	6f701c74 	svcvs	0x00701c74
    4b74:	cc010073 	stcgt	0, cr0, [r1], {115}	; 0x73
    4b78:	000000c2 	andeq	r0, r0, r2, asr #1
    4b7c:	1b709102 	blne	1c28f8c <startup-0x1e3d7074>
    4b80:	00001fcf 	andeq	r1, r0, pc, asr #31
    4b84:	00c2cc01 	sbceq	ip, r2, r1, lsl #24
    4b88:	91020000 	mrsls	r0, (UNDEF: 2)
    4b8c:	561d006c 	ldrpl	r0, [sp], -ip, rrx
    4b90:	0100001f 	tsteq	r0, pc, lsl r0
    4b94:	0036787f 	eorseq	r7, r6, pc, ror r8
    4b98:	00017020 	andeq	r7, r1, r0, lsr #32
    4b9c:	1a9c0100 	bne	fe704fa4 <GPIO_Ports+0xde7011d0>
    4ba0:	00001fe5 	andeq	r1, r0, r5, ror #31
    4ba4:	033a7f01 	teqeq	sl, #1, 30
    4ba8:	91020000 	mrsls	r0, (UNDEF: 2)
    4bac:	Address 0x00004bac is out of bounds.


Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
   0:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
   4:	030b130e 	movweq	r1, #45838	; 0xb30e
   8:	110e1b0e 	tstne	lr, lr, lsl #22
   c:	10061201 	andne	r1, r6, r1, lsl #4
  10:	02000017 	andeq	r0, r0, #23
  14:	0e030104 	adfeqs	f0, f3, f4
  18:	0b0b0b3e 	bleq	2c2d18 <startup-0x1fd3d2e8>
  1c:	0b3a1349 	bleq	e84d48 <startup-0x1f17b2b8>
  20:	13010b3b 	movwne	r0, #6971	; 0x1b3b
  24:	28030000 	stmdacs	r3, {}	; <UNPREDICTABLE>
  28:	1c0e0300 	stcne	3, cr0, [lr], {-0}
  2c:	0400000d 	streq	r0, [r0], #-13
  30:	0e030028 	cdpeq	0, 0, cr0, cr3, cr8, {1}
  34:	00000b1c 	andeq	r0, r0, ip, lsl fp
  38:	0b002405 	bleq	9054 <startup-0x1fff6fac>
  3c:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
  40:	0600000e 	streq	r0, [r0], -lr
  44:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
  48:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
  4c:	00001349 	andeq	r1, r0, r9, asr #6
  50:	03001607 	movweq	r1, #1543	; 0x607
  54:	3b0b3a0e 	blcc	2ce894 <startup-0x1fd3176c>
  58:	0013490b 	andseq	r4, r3, fp, lsl #18
  5c:	00240800 	eoreq	r0, r4, r0, lsl #16
  60:	0b3e0b0b 	bleq	f82c94 <startup-0x1f07d36c>
  64:	00000803 	andeq	r0, r0, r3, lsl #16
  68:	49003509 	stmdbmi	r0, {r0, r3, r8, sl, ip, sp}
  6c:	0a000013 	beq	c0 <startup-0x1fffff40>
  70:	13490026 	movtne	r0, #36902	; 0x9026
  74:	130b0000 	movwne	r0, #45056	; 0xb000
  78:	3a050b01 	bcc	142c84 <startup-0x1febd37c>
  7c:	01053b0b 	tsteq	r5, fp, lsl #22
  80:	0c000013 	stceq	0, cr0, [r0], {19}
  84:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
  88:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
  8c:	0b381349 	bleq	e04db8 <startup-0x1f1fb248>
  90:	0d0d0000 	stceq	0, cr0, [sp, #-0]
  94:	3a0e0300 	bcc	380c9c <startup-0x1fc7f364>
  98:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
  9c:	00053813 	andeq	r3, r5, r3, lsl r8
  a0:	000d0e00 	andeq	r0, sp, r0, lsl #28
  a4:	0b3a0803 	bleq	e820b8 <startup-0x1f17df48>
  a8:	1349053b 	movtne	r0, #38203	; 0x953b
  ac:	00000538 	andeq	r0, r0, r8, lsr r5
  b0:	4901010f 	stmdbmi	r1, {r0, r1, r2, r3, r8}
  b4:	00130113 	andseq	r0, r3, r3, lsl r1
  b8:	00211000 	eoreq	r1, r1, r0
  bc:	0b2f1349 	bleq	bc4de8 <startup-0x1f43b218>
  c0:	21110000 	tstcs	r1, r0
  c4:	2f134900 	svccs	0x00134900
  c8:	12000005 	andne	r0, r0, #5
  cc:	0b0b0113 	bleq	2c0520 <startup-0x1fd3fae0>
  d0:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
  d4:	00001301 	andeq	r1, r0, r1, lsl #6
  d8:	03000d13 	movweq	r0, #3347	; 0xd13
  dc:	3b0b3a08 	blcc	2ce904 <startup-0x1fd316fc>
  e0:	38134905 	ldmdacc	r3, {r0, r2, r8, fp, lr}
  e4:	1400000b 	strne	r0, [r0], #-11
  e8:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
  ec:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
  f0:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
  f4:	0000193c 	andeq	r1, r0, ip, lsr r9
  f8:	03003415 	movweq	r3, #1045	; 0x415
  fc:	3b0b3a0e 	blcc	2ce93c <startup-0x1fd316c4>
 100:	3f13490b 	svccc	0x0013490b
 104:	00193c19 	andseq	r3, r9, r9, lsl ip
 108:	01041600 	tsteq	r4, r0, lsl #12
 10c:	0b0b0b3e 	bleq	2c2e0c <startup-0x1fd3d1f4>
 110:	0b3a1349 	bleq	e84e3c <startup-0x1f17b1c4>
 114:	1301053b 	movwne	r0, #5435	; 0x153b
 118:	13170000 	tstne	r7, #0
 11c:	3a0b0b01 	bcc	2c2d28 <startup-0x1fd3d2d8>
 120:	010b3b0b 	tsteq	fp, fp, lsl #22
 124:	18000013 	stmdane	r0, {r0, r1, r4}
 128:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
 12c:	0b3b0b3a 	bleq	ec2e1c <startup-0x1f13d1e4>
 130:	0b381349 	bleq	e04e5c <startup-0x1f1fb1a4>
 134:	0d190000 	ldceq	0, cr0, [r9, #-0]
 138:	3a080300 	bcc	200d40 <startup-0x1fdff2c0>
 13c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 140:	000b3813 	andeq	r3, fp, r3, lsl r8
 144:	000d1a00 	andeq	r1, sp, r0, lsl #20
 148:	0b3a0e03 	bleq	e8395c <startup-0x1f17c6a4>
 14c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 150:	0b0d0b0b 	bleq	342d84 <startup-0x1fcbd27c>
 154:	0b380b0c 	bleq	e02d8c <startup-0x1f1fd274>
 158:	0d1b0000 	ldceq	0, cr0, [fp, #-0]
 15c:	3a080300 	bcc	200d64 <startup-0x1fdff29c>
 160:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 164:	0d0b0b13 	vstreq	d0, [fp, #-76]	; 0xffffffb4
 168:	380b0c0b 	stmdacc	fp, {r0, r1, r3, sl, fp}
 16c:	1c00000b 	stcne	0, cr0, [r0], {11}
 170:	0b3e0104 	bleq	f80588 <startup-0x1f07fa78>
 174:	13490b0b 	movtne	r0, #39691	; 0x9b0b
 178:	0b3b0b3a 	bleq	ec2e68 <startup-0x1f13d198>
 17c:	00001301 	andeq	r1, r0, r1, lsl #6
 180:	0b01171d 	bleq	45dfc <startup-0x1ffba204>
 184:	3b0b3a0b 	blcc	2ce9b8 <startup-0x1fd31648>
 188:	0013010b 	andseq	r0, r3, fp, lsl #2
 18c:	000d1e00 	andeq	r1, sp, r0, lsl #28
 190:	0b3a0e03 	bleq	e839a4 <startup-0x1f17c65c>
 194:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 198:	151f0000 	ldrne	r0, [pc, #-0]	; 1a0 <startup-0x1ffffe60>
 19c:	01192701 	tsteq	r9, r1, lsl #14
 1a0:	20000013 	andcs	r0, r0, r3, lsl r0
 1a4:	13490005 	movtne	r0, #36869	; 0x9005
 1a8:	0f210000 	svceq	0x00210000
 1ac:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
 1b0:	22000013 	andcs	r0, r0, #19
 1b4:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 1b8:	0b3b0b3a 	bleq	ec2ea8 <startup-0x1f13d158>
 1bc:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
 1c0:	00001802 	andeq	r1, r0, r2, lsl #16
 1c4:	3f012e23 	svccc	0x00012e23
 1c8:	3a0e0319 	bcc	380e34 <startup-0x1fc7f1cc>
 1cc:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
 1d0:	11134919 	tstne	r3, r9, lsl r9
 1d4:	40061201 	andmi	r1, r6, r1, lsl #4
 1d8:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 1dc:	00001301 	andeq	r1, r0, r1, lsl #6
 1e0:	03000524 	movweq	r0, #1316	; 0x524
 1e4:	3b0b3a08 	blcc	2cea0c <startup-0x1fd315f4>
 1e8:	02134905 	andseq	r4, r3, #81920	; 0x14000
 1ec:	25000018 	strcs	r0, [r0, #-24]	; 0xffffffe8
 1f0:	08030034 	stmdaeq	r3, {r2, r4, r5}
 1f4:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 1f8:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 1fc:	34260000 	strtcc	r0, [r6], #-0
 200:	3a0e0300 	bcc	380e08 <startup-0x1fc7f1f8>
 204:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 208:	00180213 	andseq	r0, r8, r3, lsl r2
 20c:	00052700 	andeq	r2, r5, r0, lsl #14
 210:	0b3a0e03 	bleq	e83a24 <startup-0x1f17c5dc>
 214:	1349053b 	movtne	r0, #38203	; 0x953b
 218:	00001802 	andeq	r1, r0, r2, lsl #16
 21c:	3f012e28 	svccc	0x00012e28
 220:	3a0e0319 	bcc	380e8c <startup-0x1fc7f174>
 224:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 228:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
 22c:	96184006 	ldrls	r4, [r8], -r6
 230:	13011942 	movwne	r1, #6466	; 0x1942
 234:	34290000 	strtcc	r0, [r9], #-0
 238:	3a0e0300 	bcc	380e40 <startup-0x1fc7f1c0>
 23c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 240:	00180213 	andseq	r0, r8, r3, lsl r2
 244:	012e2a00 			; <UNDEFINED> instruction: 0x012e2a00
 248:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 24c:	0b3b0b3a 	bleq	ec2f3c <startup-0x1f13d0c4>
 250:	01111927 	tsteq	r1, r7, lsr #18
 254:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 258:	01194296 			; <UNDEFINED> instruction: 0x01194296
 25c:	2b000013 	blcs	2b0 <startup-0x1ffffd50>
 260:	0111010b 	tsteq	r1, fp, lsl #2
 264:	00000612 	andeq	r0, r0, r2, lsl r6
 268:	0300052c 	movweq	r0, #1324	; 0x52c
 26c:	3b0b3a08 	blcc	2cea94 <startup-0x1fd3156c>
 270:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 274:	2d000018 	stccs	0, cr0, [r0, #-96]	; 0xffffffa0
 278:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 27c:	0b3a0e03 	bleq	e83a90 <startup-0x1f17c570>
 280:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 284:	01111349 	tsteq	r1, r9, asr #6
 288:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 28c:	01194296 			; <UNDEFINED> instruction: 0x01194296
 290:	2e000013 	mcrcs	0, 0, r0, cr0, cr3, {0}
 294:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
 298:	0b3b0b3a 	bleq	ec2f88 <startup-0x1f13d078>
 29c:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 2a0:	2e2f0000 	cdpcs	0, 2, cr0, cr15, cr0, {0}
 2a4:	03193f01 	tsteq	r9, #1, 30
 2a8:	3b0b3a0e 	blcc	2ceae8 <startup-0x1fd31518>
 2ac:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
 2b0:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
 2b4:	97184006 	ldrls	r4, [r8, -r6]
 2b8:	13011942 	movwne	r1, #6466	; 0x1942
 2bc:	2e300000 	cdpcs	0, 3, cr0, cr0, cr0, {0}
 2c0:	3a0e0301 	bcc	380ecc <startup-0x1fc7f134>
 2c4:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
 2c8:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 2cc:	97184006 	ldrls	r4, [r8, -r6]
 2d0:	00001942 	andeq	r1, r0, r2, asr #18
 2d4:	01110100 	tsteq	r1, r0, lsl #2
 2d8:	0b130e25 	bleq	4c3b74 <startup-0x1fb3c48c>
 2dc:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
 2e0:	06120111 			; <UNDEFINED> instruction: 0x06120111
 2e4:	00001710 	andeq	r1, r0, r0, lsl r7
 2e8:	0b002402 	bleq	92f8 <startup-0x1fff6d08>
 2ec:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
 2f0:	0300000e 	movweq	r0, #14
 2f4:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
 2f8:	0b3b0b3a 	bleq	ec2fe8 <startup-0x1f13d018>
 2fc:	00001349 	andeq	r1, r0, r9, asr #6
 300:	0b002404 	bleq	9318 <startup-0x1fff6ce8>
 304:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
 308:	05000008 	streq	r0, [r0, #-8]
 30c:	13490035 	movtne	r0, #36917	; 0x9035
 310:	01060000 	mrseq	r0, (UNDEF: 6)
 314:	01134901 	tsteq	r3, r1, lsl #18
 318:	07000013 	smladeq	r0, r3, r0, r0
 31c:	13490021 	movtne	r0, #36897	; 0x9021
 320:	00000b2f 	andeq	r0, r0, pc, lsr #22
 324:	03003408 	movweq	r3, #1032	; 0x408
 328:	3b0b3a0e 	blcc	2ceb68 <startup-0x1fd31498>
 32c:	3f134905 	svccc	0x00134905
 330:	00193c19 	andseq	r3, r9, r9, lsl ip
 334:	00340900 	eorseq	r0, r4, r0, lsl #18
 338:	0b3a0e03 	bleq	e83b4c <startup-0x1f17c4b4>
 33c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 340:	193c193f 	ldmdbne	ip!, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
 344:	040a0000 	streq	r0, [sl], #-0
 348:	0b0b3e01 	bleq	2cfb54 <startup-0x1fd304ac>
 34c:	3a13490b 	bcc	4d2780 <startup-0x1fb2d880>
 350:	01053b0b 	tsteq	r5, fp, lsl #22
 354:	0b000013 	bleq	3a8 <startup-0x1ffffc58>
 358:	0e030028 	cdpeq	0, 0, cr0, cr3, cr8, {1}
 35c:	00000b1c 	andeq	r0, r0, ip, lsl fp
 360:	0300280c 	movweq	r2, #2060	; 0x80c
 364:	000b1c08 	andeq	r1, fp, r8, lsl #24
 368:	00160d00 	andseq	r0, r6, r0, lsl #26
 36c:	0b3a0e03 	bleq	e83b80 <startup-0x1f17c480>
 370:	1349053b 	movtne	r0, #38203	; 0x953b
 374:	130e0000 	movwne	r0, #57344	; 0xe000
 378:	3a0b0b01 	bcc	2c2f84 <startup-0x1fd3d07c>
 37c:	01053b0b 	tsteq	r5, fp, lsl #22
 380:	0f000013 	svceq	0x00000013
 384:	0803000d 	stmdaeq	r3, {r0, r2, r3}
 388:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 38c:	0b381349 	bleq	e050b8 <startup-0x1f1faf48>
 390:	0d100000 	ldceq	0, cr0, [r0, #-0]
 394:	3a0e0300 	bcc	380f9c <startup-0x1fc7f064>
 398:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 39c:	000b3813 	andeq	r3, fp, r3, lsl r8
 3a0:	01131100 	tsteq	r3, r0, lsl #2
 3a4:	0b3a050b 	bleq	e817d8 <startup-0x1f17e828>
 3a8:	1301053b 	movwne	r0, #5435	; 0x153b
 3ac:	0d120000 	ldceq	0, cr0, [r2, #-0]
 3b0:	3a0e0300 	bcc	380fb8 <startup-0x1fc7f048>
 3b4:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 3b8:	00053813 	andeq	r3, r5, r3, lsl r8
 3bc:	000d1300 	andeq	r1, sp, r0, lsl #6
 3c0:	0b3a0803 	bleq	e823d4 <startup-0x1f17dc2c>
 3c4:	1349053b 	movtne	r0, #38203	; 0x953b
 3c8:	00000538 	andeq	r0, r0, r8, lsr r5
 3cc:	0b011314 	bleq	45024 <startup-0x1ffbafdc>
 3d0:	3b0b3a0b 	blcc	2cec04 <startup-0x1fd313fc>
 3d4:	0013010b 	andseq	r0, r3, fp, lsl #2
 3d8:	000d1500 	andeq	r1, sp, r0, lsl #10
 3dc:	0b3a0e03 	bleq	e83bf0 <startup-0x1f17c410>
 3e0:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 3e4:	00000b38 	andeq	r0, r0, r8, lsr fp
 3e8:	03000d16 	movweq	r0, #3350	; 0xd16
 3ec:	3b0b3a08 	blcc	2cec14 <startup-0x1fd313ec>
 3f0:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
 3f4:	1700000b 	strne	r0, [r0, -fp]
 3f8:	0e03012e 	adfeqsp	f0, f3, #0.5
 3fc:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 400:	13491927 	movtne	r1, #39207	; 0x9927
 404:	06120111 			; <UNDEFINED> instruction: 0x06120111
 408:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 40c:	00130119 	andseq	r0, r3, r9, lsl r1
 410:	00051800 	andeq	r1, r5, r0, lsl #16
 414:	0b3a0e03 	bleq	e83c28 <startup-0x1f17c3d8>
 418:	1349053b 	movtne	r0, #38203	; 0x953b
 41c:	00001802 	andeq	r1, r0, r2, lsl #16
 420:	03003419 	movweq	r3, #1049	; 0x419
 424:	3b0b3a0e 	blcc	2cec64 <startup-0x1fd3139c>
 428:	02134905 	andseq	r4, r3, #81920	; 0x14000
 42c:	1a000018 	bne	494 <startup-0x1ffffb6c>
 430:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 434:	0b3a0e03 	bleq	e83c48 <startup-0x1f17c3b8>
 438:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
 43c:	06120111 			; <UNDEFINED> instruction: 0x06120111
 440:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 444:	00130119 	andseq	r0, r3, r9, lsl r1
 448:	000f1b00 	andeq	r1, pc, r0, lsl #22
 44c:	13490b0b 	movtne	r0, #39691	; 0x9b0b
 450:	2e1c0000 	cdpcs	0, 1, cr0, cr12, cr0, {0}
 454:	03193f01 	tsteq	r9, #1, 30
 458:	3b0b3a0e 	blcc	2cec98 <startup-0x1fd31368>
 45c:	49192705 	ldmdbmi	r9, {r0, r2, r8, r9, sl, sp}
 460:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
 464:	96184006 	ldrls	r4, [r8], -r6
 468:	13011942 	movwne	r1, #6466	; 0x1942
 46c:	2e1d0000 	cdpcs	0, 1, cr0, cr13, cr0, {0}
 470:	03193f01 	tsteq	r9, #1, 30
 474:	3b0b3a0e 	blcc	2cecb4 <startup-0x1fd3134c>
 478:	49192705 	ldmdbmi	r9, {r0, r2, r8, r9, sl, sp}
 47c:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
 480:	97184006 	ldrls	r4, [r8, -r6]
 484:	13011942 	movwne	r1, #6466	; 0x1942
 488:	2e1e0000 	cdpcs	0, 1, cr0, cr14, cr0, {0}
 48c:	03193f01 	tsteq	r9, #1, 30
 490:	3b0b3a0e 	blcc	2cecd0 <startup-0x1fd31330>
 494:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
 498:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
 49c:	97184006 	ldrls	r4, [r8, -r6]
 4a0:	13011942 	movwne	r1, #6466	; 0x1942
 4a4:	051f0000 	ldreq	r0, [pc, #-0]	; 4ac <startup-0x1ffffb54>
 4a8:	3a0e0300 	bcc	3810b0 <startup-0x1fc7ef50>
 4ac:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 4b0:	00180213 	andseq	r0, r8, r3, lsl r2
 4b4:	00342000 	eorseq	r2, r4, r0
 4b8:	0b3a0e03 	bleq	e83ccc <startup-0x1f17c334>
 4bc:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 4c0:	00001802 	andeq	r1, r0, r2, lsl #16
 4c4:	3f012e21 	svccc	0x00012e21
 4c8:	3a0e0319 	bcc	381134 <startup-0x1fc7eecc>
 4cc:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 4d0:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 4d4:	96184006 	ldrls	r4, [r8], -r6
 4d8:	00001942 	andeq	r1, r0, r2, asr #18
 4dc:	01110100 	tsteq	r1, r0, lsl #2
 4e0:	0b130e25 	bleq	4c3d7c <startup-0x1fb3c284>
 4e4:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
 4e8:	01111755 	tsteq	r1, r5, asr r7
 4ec:	00001710 	andeq	r1, r0, r0, lsl r7
 4f0:	03010402 	movweq	r0, #5122	; 0x1402
 4f4:	0b0b3e0e 	bleq	2cfd34 <startup-0x1fd302cc>
 4f8:	3a13490b 	bcc	4d292c <startup-0x1fb2d6d4>
 4fc:	010b3b0b 	tsteq	fp, fp, lsl #22
 500:	03000013 	movweq	r0, #19
 504:	0e030028 	cdpeq	0, 0, cr0, cr3, cr8, {1}
 508:	00000d1c 	andeq	r0, r0, ip, lsl sp
 50c:	03002804 	movweq	r2, #2052	; 0x804
 510:	000b1c0e 	andeq	r1, fp, lr, lsl #24
 514:	00240500 	eoreq	r0, r4, r0, lsl #10
 518:	0b3e0b0b 	bleq	f8314c <startup-0x1f07ceb4>
 51c:	00000e03 	andeq	r0, r0, r3, lsl #28
 520:	03001606 	movweq	r1, #1542	; 0x606
 524:	3b0b3a0e 	blcc	2ced64 <startup-0x1fd3129c>
 528:	00134905 	andseq	r4, r3, r5, lsl #18
 52c:	00160700 	andseq	r0, r6, r0, lsl #14
 530:	0b3a0e03 	bleq	e83d44 <startup-0x1f17c2bc>
 534:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 538:	24080000 	strcs	r0, [r8], #-0
 53c:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 540:	0008030b 	andeq	r0, r8, fp, lsl #6
 544:	00350900 	eorseq	r0, r5, r0, lsl #18
 548:	00001349 	andeq	r1, r0, r9, asr #6
 54c:	4900260a 	stmdbmi	r0, {r1, r3, r9, sl, sp}
 550:	0b000013 	bleq	5a4 <startup-0x1ffffa5c>
 554:	050b0113 	streq	r0, [fp, #-275]	; 0xfffffeed
 558:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 55c:	00001301 	andeq	r1, r0, r1, lsl #6
 560:	03000d0c 	movweq	r0, #3340	; 0xd0c
 564:	3b0b3a0e 	blcc	2ceda4 <startup-0x1fd3125c>
 568:	38134905 	ldmdacc	r3, {r0, r2, r8, fp, lr}
 56c:	0d00000b 	stceq	0, cr0, [r0, #-44]	; 0xffffffd4
 570:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
 574:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 578:	05381349 	ldreq	r1, [r8, #-841]!	; 0xfffffcb7
 57c:	0d0e0000 	stceq	0, cr0, [lr, #-0]
 580:	3a080300 	bcc	201188 <startup-0x1fdfee78>
 584:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 588:	00053813 	andeq	r3, r5, r3, lsl r8
 58c:	01010f00 	tsteq	r1, r0, lsl #30
 590:	13011349 	movwne	r1, #4937	; 0x1349
 594:	21100000 	tstcs	r0, r0
 598:	2f134900 	svccs	0x00134900
 59c:	1100000b 	tstne	r0, fp
 5a0:	13490021 	movtne	r0, #36897	; 0x9021
 5a4:	0000052f 	andeq	r0, r0, pc, lsr #10
 5a8:	0b011312 	bleq	451f8 <startup-0x1ffbae08>
 5ac:	3b0b3a0b 	blcc	2cede0 <startup-0x1fd31220>
 5b0:	00130105 	andseq	r0, r3, r5, lsl #2
 5b4:	000d1300 	andeq	r1, sp, r0, lsl #6
 5b8:	0b3a0803 	bleq	e825cc <startup-0x1f17da34>
 5bc:	1349053b 	movtne	r0, #38203	; 0x953b
 5c0:	00000b38 	andeq	r0, r0, r8, lsr fp
 5c4:	03003414 	movweq	r3, #1044	; 0x414
 5c8:	3b0b3a0e 	blcc	2cee08 <startup-0x1fd311f8>
 5cc:	3f134905 	svccc	0x00134905
 5d0:	00193c19 	andseq	r3, r9, r9, lsl ip
 5d4:	00341500 	eorseq	r1, r4, r0, lsl #10
 5d8:	0b3a0e03 	bleq	e83dec <startup-0x1f17c214>
 5dc:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 5e0:	193c193f 	ldmdbne	ip!, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
 5e4:	04160000 	ldreq	r0, [r6], #-0
 5e8:	0b0b3e01 	bleq	2cfdf4 <startup-0x1fd3020c>
 5ec:	3a13490b 	bcc	4d2a20 <startup-0x1fb2d5e0>
 5f0:	01053b0b 	tsteq	r5, fp, lsl #22
 5f4:	17000013 	smladne	r0, r3, r0, r0
 5f8:	08030028 	stmdaeq	r3, {r3, r5}
 5fc:	00000b1c 	andeq	r0, r0, ip, lsl fp
 600:	0b011318 	bleq	45268 <startup-0x1ffbad98>
 604:	3b0b3a0b 	blcc	2cee38 <startup-0x1fd311c8>
 608:	0013010b 	andseq	r0, r3, fp, lsl #2
 60c:	000d1900 	andeq	r1, sp, r0, lsl #18
 610:	0b3a0e03 	bleq	e83e24 <startup-0x1f17c1dc>
 614:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 618:	00000b38 	andeq	r0, r0, r8, lsr fp
 61c:	0300341a 	movweq	r3, #1050	; 0x41a
 620:	3b0b3a0e 	blcc	2cee60 <startup-0x1fd311a0>
 624:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 628:	1b000018 	blne	690 <startup-0x1ffff970>
 62c:	0b3e0104 	bleq	f80a44 <startup-0x1f07f5bc>
 630:	13490b0b 	movtne	r0, #39691	; 0x9b0b
 634:	0b3b0b3a 	bleq	ec3324 <startup-0x1f13ccdc>
 638:	00001301 	andeq	r1, r0, r1, lsl #6
 63c:	0301131c 	movweq	r1, #4892	; 0x131c
 640:	3a0b0b0e 	bcc	2c3280 <startup-0x1fd3cd80>
 644:	010b3b0b 	tsteq	fp, fp, lsl #22
 648:	1d000013 	stcne	0, cr0, [r0, #-76]	; 0xffffffb4
 64c:	0803000d 	stmdaeq	r3, {r0, r2, r3}
 650:	0b3b0b3a 	bleq	ec3340 <startup-0x1f13ccc0>
 654:	0b381349 	bleq	e05380 <startup-0x1f1fac80>
 658:	0f1e0000 	svceq	0x001e0000
 65c:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
 660:	1f000013 	svcne	0x00000013
 664:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
 668:	0b3b0b3a 	bleq	ec3358 <startup-0x1f13cca8>
 66c:	0b0b1349 	bleq	2c5398 <startup-0x1fd3ac68>
 670:	0b0c0b0d 	bleq	3032ac <startup-0x1fcfcd54>
 674:	00000b38 	andeq	r0, r0, r8, lsr fp
 678:	03000d20 	movweq	r0, #3360	; 0xd20
 67c:	3b0b3a08 	blcc	2ceea4 <startup-0x1fd3115c>
 680:	0b13490b 	bleq	4d2ab4 <startup-0x1fb2d54c>
 684:	0c0b0d0b 	stceq	13, cr0, [fp], {11}
 688:	000b380b 	andeq	r3, fp, fp, lsl #16
 68c:	00342100 	eorseq	r2, r4, r0, lsl #2
 690:	0b3a0803 	bleq	e826a4 <startup-0x1f17d95c>
 694:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 698:	1802193f 	stmdane	r2, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
 69c:	34220000 	strtcc	r0, [r2], #-0
 6a0:	3a0e0300 	bcc	3812a8 <startup-0x1fc7ed58>
 6a4:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 6a8:	02193f13 	andseq	r3, r9, #19, 30	; 0x4c
 6ac:	23000018 	movwcs	r0, #24
 6b0:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 6b4:	0b3a0e03 	bleq	e83ec8 <startup-0x1f17c138>
 6b8:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 6bc:	06120111 			; <UNDEFINED> instruction: 0x06120111
 6c0:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 6c4:	00130119 	andseq	r0, r3, r9, lsl r1
 6c8:	00052400 	andeq	r2, r5, r0, lsl #8
 6cc:	0b3a0e03 	bleq	e83ee0 <startup-0x1f17c120>
 6d0:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 6d4:	00001802 	andeq	r1, r0, r2, lsl #16
 6d8:	11010b25 	tstne	r1, r5, lsr #22
 6dc:	00061201 	andeq	r1, r6, r1, lsl #4
 6e0:	012e2600 			; <UNDEFINED> instruction: 0x012e2600
 6e4:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 6e8:	0b3b0b3a 	bleq	ec33d8 <startup-0x1f13cc28>
 6ec:	01111927 	tsteq	r1, r7, lsr #18
 6f0:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 6f4:	01194297 			; <UNDEFINED> instruction: 0x01194297
 6f8:	27000013 	smladcs	r0, r3, r0, r0
 6fc:	08030005 	stmdaeq	r3, {r0, r2}
 700:	0b3b0b3a 	bleq	ec33f0 <startup-0x1f13cc10>
 704:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 708:	0b280000 	bleq	a00710 <startup-0x1f5ff8f0>
 70c:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
 710:	00130106 	andseq	r0, r3, r6, lsl #2
 714:	00342900 	eorseq	r2, r4, r0, lsl #18
 718:	0b3a0803 	bleq	e8272c <startup-0x1f17d8d4>
 71c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 720:	00001802 	andeq	r1, r0, r2, lsl #16
 724:	4900212a 	stmdbmi	r0, {r1, r3, r5, r8, sp}
 728:	00182f13 	andseq	r2, r8, r3, lsl pc
 72c:	002e2b00 	eoreq	r2, lr, r0, lsl #22
 730:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 734:	0b3b0b3a 	bleq	ec3424 <startup-0x1f13cbdc>
 738:	01111927 	tsteq	r1, r7, lsr #18
 73c:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 740:	00194296 	mulseq	r9, r6, r2
 744:	002e2c00 	eoreq	r2, lr, r0, lsl #24
 748:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 74c:	0b3b0b3a 	bleq	ec343c <startup-0x1f13cbc4>
 750:	01111927 	tsteq	r1, r7, lsr #18
 754:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 758:	00194297 	mulseq	r9, r7, r2
 75c:	012e2d00 			; <UNDEFINED> instruction: 0x012e2d00
 760:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 764:	0b3b0b3a 	bleq	ec3454 <startup-0x1f13cbac>
 768:	06120111 			; <UNDEFINED> instruction: 0x06120111
 76c:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 770:	00130119 	andseq	r0, r3, r9, lsl r1
 774:	012e2e00 			; <UNDEFINED> instruction: 0x012e2e00
 778:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 77c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 780:	01111927 	tsteq	r1, r7, lsr #18
 784:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 788:	01194297 			; <UNDEFINED> instruction: 0x01194297
 78c:	2f000013 	svccs	0x00000013
 790:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
 794:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 798:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 79c:	2e300000 	cdpcs	0, 3, cr0, cr0, cr0, {0}
 7a0:	03193f01 	tsteq	r9, #1, 30
 7a4:	3b0b3a0e 	blcc	2cefe4 <startup-0x1fd3101c>
 7a8:	49192705 	ldmdbmi	r9, {r0, r2, r8, r9, sl, sp}
 7ac:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
 7b0:	97184006 	ldrls	r4, [r8, -r6]
 7b4:	13011942 	movwne	r1, #6466	; 0x1942
 7b8:	34310000 	ldrtcc	r0, [r1], #-0
 7bc:	3a0e0300 	bcc	3813c4 <startup-0x1fc7ec3c>
 7c0:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 7c4:	00180213 	andseq	r0, r8, r3, lsl r2
 7c8:	002e3200 	eoreq	r3, lr, r0, lsl #4
 7cc:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 7d0:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 7d4:	01111927 	tsteq	r1, r7, lsr #18
 7d8:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 7dc:	00194297 	mulseq	r9, r7, r2
 7e0:	00343300 	eorseq	r3, r4, r0, lsl #6
 7e4:	0b3a0803 	bleq	e827f8 <startup-0x1f17d808>
 7e8:	1349053b 	movtne	r0, #38203	; 0x953b
 7ec:	00001802 	andeq	r1, r0, r2, lsl #16
 7f0:	3f012e34 	svccc	0x00012e34
 7f4:	3a0e0319 	bcc	381460 <startup-0x1fc7eba0>
 7f8:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
 7fc:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 800:	96184006 	ldrls	r4, [r8], -r6
 804:	13011942 	movwne	r1, #6466	; 0x1942
 808:	2e350000 	cdpcs	0, 3, cr0, cr5, cr0, {0}
 80c:	03193f00 	tsteq	r9, #0, 30
 810:	3b0b3a0e 	blcc	2cf050 <startup-0x1fd30fb0>
 814:	49192705 	ldmdbmi	r9, {r0, r2, r8, r9, sl, sp}
 818:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
 81c:	97184006 	ldrls	r4, [r8, -r6]
 820:	00001942 	andeq	r1, r0, r2, asr #18
 824:	3f012e36 	svccc	0x00012e36
 828:	3a0e0319 	bcc	381494 <startup-0x1fc7eb6c>
 82c:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
 830:	11134919 	tstne	r3, r9, lsl r9
 834:	40061201 	andmi	r1, r6, r1, lsl #4
 838:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 83c:	00001301 	andeq	r1, r0, r1, lsl #6
 840:	03012e37 	movweq	r2, #7735	; 0x1e37
 844:	3b0b3a0e 	blcc	2cf084 <startup-0x1fd30f7c>
 848:	49192705 	ldmdbmi	r9, {r0, r2, r8, r9, sl, sp}
 84c:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
 850:	96184006 	ldrls	r4, [r8], -r6
 854:	13011942 	movwne	r1, #6466	; 0x1942
 858:	2e380000 	cdpcs	0, 3, cr0, cr8, cr0, {0}
 85c:	3a0e0301 	bcc	381468 <startup-0x1fc7eb98>
 860:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
 864:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 868:	97184006 	ldrls	r4, [r8, -r6]
 86c:	00001942 	andeq	r1, r0, r2, asr #18
 870:	01110100 	tsteq	r1, r0, lsl #2
 874:	0b130e25 	bleq	4c4110 <startup-0x1fb3bef0>
 878:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
 87c:	06120111 			; <UNDEFINED> instruction: 0x06120111
 880:	00001710 	andeq	r1, r0, r0, lsl r7
 884:	0b002402 	bleq	9894 <startup-0x1fff676c>
 888:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
 88c:	0300000e 	movweq	r0, #14
 890:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
 894:	0b3b0b3a 	bleq	ec3584 <startup-0x1f13ca7c>
 898:	00001349 	andeq	r1, r0, r9, asr #6
 89c:	0b002404 	bleq	98b4 <startup-0x1fff674c>
 8a0:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
 8a4:	05000008 	streq	r0, [r0, #-8]
 8a8:	13490035 	movtne	r0, #36917	; 0x9035
 8ac:	34060000 	strcc	r0, [r6], #-0
 8b0:	3a0e0300 	bcc	3814b8 <startup-0x1fc7eb48>
 8b4:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 8b8:	3c193f13 	ldccc	15, cr3, [r9], {19}
 8bc:	07000019 	smladeq	r0, r9, r0, r0
 8c0:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 8c4:	0b3b0b3a 	bleq	ec35b4 <startup-0x1f13ca4c>
 8c8:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
 8cc:	0000193c 	andeq	r1, r0, ip, lsr r9
 8d0:	3e010408 	cdpcc	4, 0, cr0, cr1, cr8, {0}
 8d4:	490b0b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp}
 8d8:	3b0b3a13 	blcc	2cf12c <startup-0x1fd30ed4>
 8dc:	00130105 	andseq	r0, r3, r5, lsl #2
 8e0:	00280900 	eoreq	r0, r8, r0, lsl #18
 8e4:	0b1c0e03 	bleq	7040f8 <startup-0x1f8fbf08>
 8e8:	280a0000 	stmdacs	sl, {}	; <UNPREDICTABLE>
 8ec:	1c080300 	stcne	3, cr0, [r8], {-0}
 8f0:	0b00000b 	bleq	924 <startup-0x1ffff6dc>
 8f4:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
 8f8:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 8fc:	00001349 	andeq	r1, r0, r9, asr #6
 900:	0b01130c 	bleq	45538 <startup-0x1ffbaac8>
 904:	3b0b3a0b 	blcc	2cf138 <startup-0x1fd30ec8>
 908:	00130105 	andseq	r0, r3, r5, lsl #2
 90c:	000d0d00 	andeq	r0, sp, r0, lsl #26
 910:	0b3a0803 	bleq	e82924 <startup-0x1f17d6dc>
 914:	1349053b 	movtne	r0, #38203	; 0x953b
 918:	00000b38 	andeq	r0, r0, r8, lsr fp
 91c:	3f012e0e 	svccc	0x00012e0e
 920:	3a0e0319 	bcc	38158c <startup-0x1fc7ea74>
 924:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
 928:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 92c:	97184006 	ldrls	r4, [r8, -r6]
 930:	13011942 	movwne	r1, #6466	; 0x1942
 934:	050f0000 	streq	r0, [pc, #-0]	; 93c <startup-0x1ffff6c4>
 938:	3a0e0300 	bcc	381540 <startup-0x1fc7eac0>
 93c:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 940:	00180213 	andseq	r0, r8, r3, lsl r2
 944:	012e1000 			; <UNDEFINED> instruction: 0x012e1000
 948:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 94c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 950:	13491927 	movtne	r1, #39207	; 0x9927
 954:	06120111 			; <UNDEFINED> instruction: 0x06120111
 958:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 95c:	00130119 	andseq	r0, r3, r9, lsl r1
 960:	00341100 	eorseq	r1, r4, r0, lsl #2
 964:	0b3a0e03 	bleq	e84178 <startup-0x1f17be88>
 968:	1349053b 	movtne	r0, #38203	; 0x953b
 96c:	00001802 	andeq	r1, r0, r2, lsl #16
 970:	3f002e12 	svccc	0x00002e12
 974:	3a0e0319 	bcc	3815e0 <startup-0x1fc7ea20>
 978:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 97c:	11134919 	tstne	r3, r9, lsl r9
 980:	40061201 	andmi	r1, r6, r1, lsl #4
 984:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 988:	2e130000 	cdpcs	0, 1, cr0, cr3, cr0, {0}
 98c:	03193f01 	tsteq	r9, #1, 30
 990:	3b0b3a0e 	blcc	2cf1d0 <startup-0x1fd30e30>
 994:	1119270b 	tstne	r9, fp, lsl #14
 998:	40061201 	andmi	r1, r6, r1, lsl #4
 99c:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 9a0:	00001301 	andeq	r1, r0, r1, lsl #6
 9a4:	03000514 	movweq	r0, #1300	; 0x514
 9a8:	3b0b3a0e 	blcc	2cf1e8 <startup-0x1fd30e18>
 9ac:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 9b0:	15000018 	strne	r0, [r0, #-24]	; 0xffffffe8
 9b4:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
 9b8:	0b3a0e03 	bleq	e841cc <startup-0x1f17be34>
 9bc:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 9c0:	06120111 			; <UNDEFINED> instruction: 0x06120111
 9c4:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 9c8:	00000019 	andeq	r0, r0, r9, lsl r0
 9cc:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
 9d0:	030b130e 	movweq	r1, #45838	; 0xb30e
 9d4:	110e1b0e 	tstne	lr, lr, lsl #22
 9d8:	10061201 	andne	r1, r6, r1, lsl #4
 9dc:	02000017 	andeq	r0, r0, #23
 9e0:	0b0b0024 	bleq	2c0a78 <startup-0x1fd3f588>
 9e4:	0e030b3e 	vmoveq.16	d3[0], r0
 9e8:	16030000 	strne	r0, [r3], -r0
 9ec:	3a0e0300 	bcc	3815f4 <startup-0x1fc7ea0c>
 9f0:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 9f4:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
 9f8:	0b0b0024 	bleq	2c0a90 <startup-0x1fd3f570>
 9fc:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
 a00:	35050000 	strcc	r0, [r5, #-0]
 a04:	00134900 	andseq	r4, r3, r0, lsl #18
 a08:	00340600 	eorseq	r0, r4, r0, lsl #12
 a0c:	0b3a0e03 	bleq	e84220 <startup-0x1f17bde0>
 a10:	1349053b 	movtne	r0, #38203	; 0x953b
 a14:	193c193f 	ldmdbne	ip!, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
 a18:	34070000 	strcc	r0, [r7], #-0
 a1c:	3a0e0300 	bcc	381624 <startup-0x1fc7e9dc>
 a20:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 a24:	3c193f13 	ldccc	15, cr3, [r9], {19}
 a28:	08000019 	stmdaeq	r0, {r0, r3, r4}
 a2c:	0b0b0113 	bleq	2c0e80 <startup-0x1fd3f180>
 a30:	0b3b0b3a 	bleq	ec3720 <startup-0x1f13c8e0>
 a34:	00001301 	andeq	r1, r0, r1, lsl #6
 a38:	03000d09 	movweq	r0, #3337	; 0xd09
 a3c:	3b0b3a0e 	blcc	2cf27c <startup-0x1fd30d84>
 a40:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
 a44:	0a00000b 	beq	a78 <startup-0x1ffff588>
 a48:	0803000d 	stmdaeq	r3, {r0, r2, r3}
 a4c:	0b3b0b3a 	bleq	ec373c <startup-0x1f13c8c4>
 a50:	0b381349 	bleq	e0577c <startup-0x1f1fa884>
 a54:	010b0000 	mrseq	r0, (UNDEF: 11)
 a58:	01134901 	tsteq	r3, r1, lsl #18
 a5c:	0c000013 	stceq	0, cr0, [r0], {19}
 a60:	13490021 	movtne	r0, #36897	; 0x9021
 a64:	00000b2f 	andeq	r0, r0, pc, lsr #22
 a68:	03000d0d 	movweq	r0, #3341	; 0xd0d
 a6c:	3b0b3a0e 	blcc	2cf2ac <startup-0x1fd30d54>
 a70:	0b13490b 	bleq	4d2ea4 <startup-0x1fb2d15c>
 a74:	0c0b0d0b 	stceq	13, cr0, [fp], {11}
 a78:	000b380b 	andeq	r3, fp, fp, lsl #16
 a7c:	000d0e00 	andeq	r0, sp, r0, lsl #28
 a80:	0b3a0803 	bleq	e82a94 <startup-0x1f17d56c>
 a84:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 a88:	0b0d0b0b 	bleq	3436bc <startup-0x1fcbc944>
 a8c:	0b380b0c 	bleq	e036c4 <startup-0x1f1fc93c>
 a90:	2e0f0000 	cdpcs	0, 0, cr0, cr15, cr0, {0}
 a94:	03193f01 	tsteq	r9, #1, 30
 a98:	3b0b3a0e 	blcc	2cf2d8 <startup-0x1fd30d28>
 a9c:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
 aa0:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
 aa4:	97184006 	ldrls	r4, [r8, -r6]
 aa8:	13011942 	movwne	r1, #6466	; 0x1942
 aac:	05100000 	ldreq	r0, [r0, #-0]
 ab0:	3a080300 	bcc	2016b8 <startup-0x1fdfe948>
 ab4:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 ab8:	00180213 	andseq	r0, r8, r3, lsl r2
 abc:	00051100 	andeq	r1, r5, r0, lsl #2
 ac0:	0b3a0e03 	bleq	e842d4 <startup-0x1f17bd2c>
 ac4:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 ac8:	00001802 	andeq	r1, r0, r2, lsl #16
 acc:	03003412 	movweq	r3, #1042	; 0x412
 ad0:	3b0b3a0e 	blcc	2cf310 <startup-0x1fd30cf0>
 ad4:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 ad8:	13000018 	movwne	r0, #24
 adc:	0b0b000f 	bleq	2c0b20 <startup-0x1fd3f4e0>
 ae0:	00001349 	andeq	r1, r0, r9, asr #6
 ae4:	3f012e14 	svccc	0x00012e14
 ae8:	3a0e0319 	bcc	381754 <startup-0x1fc7e8ac>
 aec:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 af0:	11134919 	tstne	r3, r9, lsl r9
 af4:	40061201 	andmi	r1, r6, r1, lsl #4
 af8:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 afc:	01000000 	mrseq	r0, (UNDEF: 0)
 b00:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
 b04:	0e030b13 	vmoveq.32	d3[0], r0
 b08:	01110e1b 	tsteq	r1, fp, lsl lr
 b0c:	17100612 			; <UNDEFINED> instruction: 0x17100612
 b10:	24020000 	strcs	r0, [r2], #-0
 b14:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 b18:	000e030b 	andeq	r0, lr, fp, lsl #6
 b1c:	00160300 	andseq	r0, r6, r0, lsl #6
 b20:	0b3a0e03 	bleq	e84334 <startup-0x1f17bccc>
 b24:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 b28:	24040000 	strcs	r0, [r4], #-0
 b2c:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 b30:	0008030b 	andeq	r0, r8, fp, lsl #6
 b34:	01130500 	tsteq	r3, r0, lsl #10
 b38:	0b3a0b0b 	bleq	e8376c <startup-0x1f17c894>
 b3c:	13010b3b 	movwne	r0, #6971	; 0x1b3b
 b40:	0d060000 	stceq	0, cr0, [r6, #-0]
 b44:	3a0e0300 	bcc	38174c <startup-0x1fc7e8b4>
 b48:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 b4c:	000b3813 	andeq	r3, fp, r3, lsl r8
 b50:	000d0700 	andeq	r0, sp, r0, lsl #14
 b54:	0b3a0803 	bleq	e82b68 <startup-0x1f17d498>
 b58:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 b5c:	00000b38 	andeq	r0, r0, r8, lsr fp
 b60:	49010108 	stmdbmi	r1, {r3, r8}
 b64:	00130113 	andseq	r0, r3, r3, lsl r1
 b68:	00210900 	eoreq	r0, r1, r0, lsl #18
 b6c:	0b2f1349 	bleq	bc5898 <startup-0x1f43a768>
 b70:	2e0a0000 	cdpcs	0, 0, cr0, cr10, cr0, {0}
 b74:	03193f01 	tsteq	r9, #1, 30
 b78:	3b0b3a0e 	blcc	2cf3b8 <startup-0x1fd30c48>
 b7c:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
 b80:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
 b84:	97184006 	ldrls	r4, [r8, -r6]
 b88:	13011942 	movwne	r1, #6466	; 0x1942
 b8c:	050b0000 	streq	r0, [fp, #-0]
 b90:	3a0e0300 	bcc	381798 <startup-0x1fc7e868>
 b94:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 b98:	00180213 	andseq	r0, r8, r3, lsl r2
 b9c:	000f0c00 	andeq	r0, pc, r0, lsl #24
 ba0:	13490b0b 	movtne	r0, #39691	; 0x9b0b
 ba4:	2e0d0000 	cdpcs	0, 0, cr0, cr13, cr0, {0}
 ba8:	03193f01 	tsteq	r9, #1, 30
 bac:	3b0b3a0e 	blcc	2cf3ec <startup-0x1fd30c14>
 bb0:	1119270b 	tstne	r9, fp, lsl #14
 bb4:	40061201 	andmi	r1, r6, r1, lsl #4
 bb8:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 bbc:	00001301 	andeq	r1, r0, r1, lsl #6
 bc0:	0300340e 	movweq	r3, #1038	; 0x40e
 bc4:	3b0b3a0e 	blcc	2cf404 <startup-0x1fd30bfc>
 bc8:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 bcc:	0f000018 	svceq	0x00000018
 bd0:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 bd4:	0b3a0e03 	bleq	e843e8 <startup-0x1f17bc18>
 bd8:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 bdc:	06120111 			; <UNDEFINED> instruction: 0x06120111
 be0:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 be4:	00000019 	andeq	r0, r0, r9, lsl r0
 be8:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
 bec:	030b130e 	movweq	r1, #45838	; 0xb30e
 bf0:	110e1b0e 	tstne	lr, lr, lsl #22
 bf4:	10061201 	andne	r1, r6, r1, lsl #4
 bf8:	02000017 	andeq	r0, r0, #23
 bfc:	0b0b0024 	bleq	2c0c94 <startup-0x1fd3f36c>
 c00:	0e030b3e 	vmoveq.16	d3[0], r0
 c04:	16030000 	strne	r0, [r3], -r0
 c08:	3a0e0300 	bcc	381810 <startup-0x1fc7e7f0>
 c0c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 c10:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
 c14:	0b0b0024 	bleq	2c0cac <startup-0x1fd3f354>
 c18:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
 c1c:	35050000 	strcc	r0, [r5, #-0]
 c20:	00134900 	andseq	r4, r3, r0, lsl #18
 c24:	00260600 	eoreq	r0, r6, r0, lsl #12
 c28:	00001349 	andeq	r1, r0, r9, asr #6
 c2c:	0b011307 	bleq	45850 <startup-0x1ffba7b0>
 c30:	3b0b3a05 	blcc	2cf44c <startup-0x1fd30bb4>
 c34:	00130105 	andseq	r0, r3, r5, lsl #2
 c38:	000d0800 	andeq	r0, sp, r0, lsl #16
 c3c:	0b3a0e03 	bleq	e84450 <startup-0x1f17bbb0>
 c40:	1349053b 	movtne	r0, #38203	; 0x953b
 c44:	00000b38 	andeq	r0, r0, r8, lsr fp
 c48:	03000d09 	movweq	r0, #3337	; 0xd09
 c4c:	3b0b3a0e 	blcc	2cf48c <startup-0x1fd30b74>
 c50:	38134905 	ldmdacc	r3, {r0, r2, r8, fp, lr}
 c54:	0a000005 	beq	c70 <startup-0x1ffff390>
 c58:	0803000d 	stmdaeq	r3, {r0, r2, r3}
 c5c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 c60:	05381349 	ldreq	r1, [r8, #-841]!	; 0xfffffcb7
 c64:	010b0000 	mrseq	r0, (UNDEF: 11)
 c68:	01134901 	tsteq	r3, r1, lsl #18
 c6c:	0c000013 	stceq	0, cr0, [r0], {19}
 c70:	13490021 	movtne	r0, #36897	; 0x9021
 c74:	00000b2f 	andeq	r0, r0, pc, lsr #22
 c78:	4900210d 	stmdbmi	r0, {r0, r2, r3, r8, sp}
 c7c:	00052f13 	andeq	r2, r5, r3, lsl pc
 c80:	00160e00 	andseq	r0, r6, r0, lsl #28
 c84:	0b3a0e03 	bleq	e84498 <startup-0x1f17bb68>
 c88:	1349053b 	movtne	r0, #38203	; 0x953b
 c8c:	130f0000 	movwne	r0, #61440	; 0xf000
 c90:	3a0b0b01 	bcc	2c389c <startup-0x1fd3c764>
 c94:	01053b0b 	tsteq	r5, fp, lsl #22
 c98:	10000013 	andne	r0, r0, r3, lsl r0
 c9c:	0803000d 	stmdaeq	r3, {r0, r2, r3}
 ca0:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 ca4:	0b381349 	bleq	e059d0 <startup-0x1f1fa630>
 ca8:	34110000 	ldrcc	r0, [r1], #-0
 cac:	3a0e0300 	bcc	3818b4 <startup-0x1fc7e74c>
 cb0:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 cb4:	3c193f13 	ldccc	15, cr3, [r9], {19}
 cb8:	12000019 	andne	r0, r0, #25
 cbc:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 cc0:	0b3b0b3a 	bleq	ec39b0 <startup-0x1f13c650>
 cc4:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
 cc8:	0000193c 	andeq	r1, r0, ip, lsr r9
 ccc:	3e010413 	cfmvdlrcc	mvd1, r0
 cd0:	490b0b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp}
 cd4:	3b0b3a13 	blcc	2cf528 <startup-0x1fd30ad8>
 cd8:	00130105 	andseq	r0, r3, r5, lsl #2
 cdc:	00281400 	eoreq	r1, r8, r0, lsl #8
 ce0:	0b1c0e03 	bleq	7044f4 <startup-0x1f8fbb0c>
 ce4:	13150000 	tstne	r5, #0
 ce8:	3a0b0b01 	bcc	2c38f4 <startup-0x1fd3c70c>
 cec:	010b3b0b 	tsteq	fp, fp, lsl #22
 cf0:	16000013 			; <UNDEFINED> instruction: 0x16000013
 cf4:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
 cf8:	0b3b0b3a 	bleq	ec39e8 <startup-0x1f13c618>
 cfc:	0b381349 	bleq	e05a28 <startup-0x1f1fa5d8>
 d00:	2e170000 	cdpcs	0, 1, cr0, cr7, cr0, {0}
 d04:	03193f01 	tsteq	r9, #1, 30
 d08:	3b0b3a0e 	blcc	2cf548 <startup-0x1fd30ab8>
 d0c:	1119270b 	tstne	r9, fp, lsl #14
 d10:	40061201 	andmi	r1, r6, r1, lsl #4
 d14:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 d18:	00001301 	andeq	r1, r0, r1, lsl #6
 d1c:	03000518 	movweq	r0, #1304	; 0x518
 d20:	3b0b3a0e 	blcc	2cf560 <startup-0x1fd30aa0>
 d24:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 d28:	19000018 	stmdbne	r0, {r3, r4}
 d2c:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 d30:	0b3b0b3a 	bleq	ec3a20 <startup-0x1f13c5e0>
 d34:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 d38:	0f1a0000 	svceq	0x001a0000
 d3c:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
 d40:	1b000013 	blne	d94 <startup-0x1ffff26c>
 d44:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 d48:	0b3a0e03 	bleq	e8455c <startup-0x1f17baa4>
 d4c:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 d50:	06120111 			; <UNDEFINED> instruction: 0x06120111
 d54:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 d58:	00000019 	andeq	r0, r0, r9, lsl r0
 d5c:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
 d60:	030b130e 	movweq	r1, #45838	; 0xb30e
 d64:	110e1b0e 	tstne	lr, lr, lsl #22
 d68:	10061201 	andne	r1, r6, r1, lsl #4
 d6c:	02000017 	andeq	r0, r0, #23
 d70:	0b0b0024 	bleq	2c0e08 <startup-0x1fd3f1f8>
 d74:	0e030b3e 	vmoveq.16	d3[0], r0
 d78:	16030000 	strne	r0, [r3], -r0
 d7c:	3a0e0300 	bcc	381984 <startup-0x1fc7e67c>
 d80:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 d84:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
 d88:	0b0b0024 	bleq	2c0e20 <startup-0x1fd3f1e0>
 d8c:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
 d90:	35050000 	strcc	r0, [r5, #-0]
 d94:	00134900 	andseq	r4, r3, r0, lsl #18
 d98:	00340600 	eorseq	r0, r4, r0, lsl #12
 d9c:	0b3a0e03 	bleq	e845b0 <startup-0x1f17ba50>
 da0:	1349053b 	movtne	r0, #38203	; 0x953b
 da4:	193c193f 	ldmdbne	ip!, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
 da8:	34070000 	strcc	r0, [r7], #-0
 dac:	3a0e0300 	bcc	3819b4 <startup-0x1fc7e64c>
 db0:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 db4:	3c193f13 	ldccc	15, cr3, [r9], {19}
 db8:	08000019 	stmdaeq	r0, {r0, r3, r4}
 dbc:	0b3e0104 	bleq	f811d4 <startup-0x1f07ee2c>
 dc0:	13490b0b 	movtne	r0, #39691	; 0x9b0b
 dc4:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 dc8:	00001301 	andeq	r1, r0, r1, lsl #6
 dcc:	03002809 	movweq	r2, #2057	; 0x809
 dd0:	000b1c0e 	andeq	r1, fp, lr, lsl #24
 dd4:	01130a00 	tsteq	r3, r0, lsl #20
 dd8:	0b3a0b0b 	bleq	e83a0c <startup-0x1f17c5f4>
 ddc:	1301053b 	movwne	r0, #5435	; 0x153b
 de0:	0d0b0000 	stceq	0, cr0, [fp, #-0]
 de4:	3a0e0300 	bcc	3819ec <startup-0x1fc7e614>
 de8:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 dec:	000b3813 	andeq	r3, fp, r3, lsl r8
 df0:	000d0c00 	andeq	r0, sp, r0, lsl #24
 df4:	0b3a0803 	bleq	e82e08 <startup-0x1f17d1f8>
 df8:	1349053b 	movtne	r0, #38203	; 0x953b
 dfc:	00000b38 	andeq	r0, r0, r8, lsr fp
 e00:	4901010d 	stmdbmi	r1, {r0, r2, r3, r8}
 e04:	00130113 	andseq	r0, r3, r3, lsl r1
 e08:	00210e00 	eoreq	r0, r1, r0, lsl #28
 e0c:	0b2f1349 	bleq	bc5b38 <startup-0x1f43a4c8>
 e10:	160f0000 	strne	r0, [pc], -r0
 e14:	3a0e0300 	bcc	381a1c <startup-0x1fc7e5e4>
 e18:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 e1c:	10000013 	andne	r0, r0, r3, lsl r0
 e20:	0b3e0104 	bleq	f81238 <startup-0x1f07edc8>
 e24:	13490b0b 	movtne	r0, #39691	; 0x9b0b
 e28:	0b3b0b3a 	bleq	ec3b18 <startup-0x1f13c4e8>
 e2c:	00001301 	andeq	r1, r0, r1, lsl #6
 e30:	0b011311 	bleq	45a7c <startup-0x1ffba584>
 e34:	3b0b3a0b 	blcc	2cf668 <startup-0x1fd30998>
 e38:	0013010b 	andseq	r0, r3, fp, lsl #2
 e3c:	000d1200 	andeq	r1, sp, r0, lsl #4
 e40:	0b3a0e03 	bleq	e84654 <startup-0x1f17b9ac>
 e44:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 e48:	00000b38 	andeq	r0, r0, r8, lsr fp
 e4c:	3f012e13 	svccc	0x00012e13
 e50:	3a0e0319 	bcc	381abc <startup-0x1fc7e544>
 e54:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
 e58:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 e5c:	97184006 	ldrls	r4, [r8, -r6]
 e60:	13011942 	movwne	r1, #6466	; 0x1942
 e64:	05140000 	ldreq	r0, [r4, #-0]
 e68:	3a0e0300 	bcc	381a70 <startup-0x1fc7e590>
 e6c:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 e70:	00180213 	andseq	r0, r8, r3, lsl r2
 e74:	00341500 	eorseq	r1, r4, r0, lsl #10
 e78:	0b3a0e03 	bleq	e8468c <startup-0x1f17b974>
 e7c:	1349053b 	movtne	r0, #38203	; 0x953b
 e80:	00001802 	andeq	r1, r0, r2, lsl #16
 e84:	0b000f16 	bleq	4ae4 <startup-0x1fffb51c>
 e88:	0013490b 	andseq	r4, r3, fp, lsl #18
 e8c:	012e1700 			; <UNDEFINED> instruction: 0x012e1700
 e90:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 e94:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 e98:	13491927 	movtne	r1, #39207	; 0x9927
 e9c:	06120111 			; <UNDEFINED> instruction: 0x06120111
 ea0:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 ea4:	00130119 	andseq	r0, r3, r9, lsl r1
 ea8:	00341800 	eorseq	r1, r4, r0, lsl #16
 eac:	0b3a0803 	bleq	e82ec0 <startup-0x1f17d140>
 eb0:	1349053b 	movtne	r0, #38203	; 0x953b
 eb4:	00001802 	andeq	r1, r0, r2, lsl #16
 eb8:	3f012e19 	svccc	0x00012e19
 ebc:	3a0e0319 	bcc	381b28 <startup-0x1fc7e4d8>
 ec0:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 ec4:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 ec8:	97184006 	ldrls	r4, [r8, -r6]
 ecc:	13011942 	movwne	r1, #6466	; 0x1942
 ed0:	051a0000 	ldreq	r0, [sl, #-0]
 ed4:	3a0e0300 	bcc	381adc <startup-0x1fc7e524>
 ed8:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 edc:	00180213 	andseq	r0, r8, r3, lsl r2
 ee0:	00341b00 	eorseq	r1, r4, r0, lsl #22
 ee4:	0b3a0e03 	bleq	e846f8 <startup-0x1f17b908>
 ee8:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 eec:	00001802 	andeq	r1, r0, r2, lsl #16
 ef0:	0300341c 	movweq	r3, #1052	; 0x41c
 ef4:	3b0b3a08 	blcc	2cf71c <startup-0x1fd308e4>
 ef8:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 efc:	1d000018 	stcne	0, cr0, [r0, #-96]	; 0xffffffa0
 f00:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 f04:	0b3a0e03 	bleq	e84718 <startup-0x1f17b8e8>
 f08:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 f0c:	06120111 			; <UNDEFINED> instruction: 0x06120111
 f10:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 f14:	00000019 	andeq	r0, r0, r9, lsl r0

Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	0000001c 	andeq	r0, r0, ip, lsl r0
   4:	00000002 	andeq	r0, r0, r2
   8:	00040000 	andeq	r0, r4, r0
   c:	00000000 	andeq	r0, r0, r0
  10:	20000010 	andcs	r0, r0, r0, lsl r0
  14:	000007e4 	andeq	r0, r0, r4, ror #15
	...
  20:	0000001c 	andeq	r0, r0, ip, lsl r0
  24:	11b70002 			; <UNDEFINED> instruction: 0x11b70002
  28:	00040000 	andeq	r0, r4, r0
  2c:	00000000 	andeq	r0, r0, r0
  30:	200007f4 	strdcs	r0, [r0], -r4
  34:	000011d2 	ldrdeq	r1, [r0], -r2
	...
  40:	00000024 	andeq	r0, r0, r4, lsr #32
  44:	1d610002 	stclne	0, cr0, [r1, #-8]!
  48:	00040000 	andeq	r0, r4, r0
  4c:	00000000 	andeq	r0, r0, r0
  50:	200019c8 	andcs	r1, r0, r8, asr #19
  54:	00001672 	andeq	r1, r0, r2, ror r6
  58:	20000000 	andcs	r0, r0, r0
  5c:	0000000c 	andeq	r0, r0, ip
	...
  68:	0000001c 	andeq	r0, r0, ip, lsl r0
  6c:	38990002 	ldmcc	r9, {r1}
  70:	00040000 	andeq	r0, r4, r0
  74:	00000000 	andeq	r0, r0, r0
  78:	2000303c 	andcs	r3, r0, ip, lsr r0
  7c:	00000174 	andeq	r0, r0, r4, ror r1
	...
  88:	0000001c 	andeq	r0, r0, ip, lsl r0
  8c:	3b2a0002 	blcc	a8009c <startup-0x1f57ff64>
  90:	00040000 	andeq	r0, r4, r0
  94:	00000000 	andeq	r0, r0, r0
  98:	200031b0 			; <UNDEFINED> instruction: 0x200031b0
  9c:	000001da 	ldrdeq	r0, [r0], -sl
	...
  a8:	0000001c 	andeq	r0, r0, ip, lsl r0
  ac:	3e940002 	cdpcc	0, 9, cr0, cr4, cr2, {0}
  b0:	00040000 	andeq	r0, r4, r0
  b4:	00000000 	andeq	r0, r0, r0
  b8:	2000338a 	andcs	r3, r0, sl, lsl #7
  bc:	00000128 	andeq	r0, r0, r8, lsr #2
	...
  c8:	0000001c 	andeq	r0, r0, ip, lsl r0
  cc:	40410002 	submi	r0, r1, r2
  d0:	00040000 	andeq	r0, r4, r0
  d4:	00000000 	andeq	r0, r0, r0
  d8:	200034b4 			; <UNDEFINED> instruction: 0x200034b4
  dc:	000001c4 	andeq	r0, r0, r4, asr #3
	...
  e8:	0000001c 	andeq	r0, r0, ip, lsl r0
  ec:	45880002 	strmi	r0, [r8, #2]
  f0:	00040000 	andeq	r0, r4, r0
  f4:	00000000 	andeq	r0, r0, r0
  f8:	20003678 	andcs	r3, r0, r8, ror r6
  fc:	0000050e 	andeq	r0, r0, lr, lsl #10
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
       0:	000002cd 	andeq	r0, r0, sp, asr #5
       4:	01b90002 			; <UNDEFINED> instruction: 0x01b90002
       8:	01020000 	mrseq	r0, (UNDEF: 2)
       c:	000d0efb 	strdeq	r0, [sp], -fp
      10:	01010101 	tsteq	r1, r1, lsl #2
      14:	01000000 	mrseq	r0, (UNDEF: 0)
      18:	2e010000 	cdpcs	0, 0, cr0, cr1, cr0, {0}
      1c:	696c2f2e 	stmdbvs	ip!, {r1, r2, r3, r5, r8, r9, sl, fp, sp}^
      20:	54532f62 	ldrbpl	r2, [r3], #-3938	; 0xfffff09e
      24:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
      28:	696c5f34 	stmdbvs	ip!, {r2, r4, r5, r8, r9, sl, fp, ip, lr}^
      2c:	4d432f62 	stclmi	15, cr2, [r3, #-392]	; 0xfffffe78
      30:	2f534953 	svccs	0x00534953
      34:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
      38:	00656475 	rsbeq	r6, r5, r5, ror r4
      3c:	552f3a43 	strpl	r3, [pc, #-2627]!	; fffff601 <GPIO_Ports+0xdfffb82d>
      40:	73726573 	cmnvc	r2, #482344960	; 0x1cc00000
      44:	6164412f 	cmnvs	r4, pc, lsr #2
      48:	4f2f746d 	svcmi	0x002f746d
      4c:	7244656e 	subvc	r6, r4, #461373440	; 0x1b800000
      50:	2f657669 	svccs	0x00657669
      54:	756b6f44 	strbvc	r6, [fp, #-3908]!	; 0xfffff0bc
      58:	746e656d 	strbtvc	r6, [lr], #-1389	; 0xfffffa93
      5c:	7469472f 	strbtvc	r4, [r9], #-1839	; 0xfffff8d1
      60:	2f627548 	svccs	0x00627548
      64:	32544144 	subscc	r4, r4, #68, 2
      68:	4c2d3039 	stcmi	0, cr3, [sp], #-228	; 0xffffff1c
      6c:	736d7261 	cmnvc	sp, #268435462	; 0x10000006
      70:	65747379 	ldrbvs	r7, [r4, #-889]!	; 0xfffffc87
      74:	6f6b2f6d 	svcvs	0x006b2f6d
      78:	696c2f64 	stmdbvs	ip!, {r2, r5, r6, r8, r9, sl, fp, sp}^
      7c:	2e2e0062 	cdpcs	0, 2, cr0, cr14, cr2, {3}
      80:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
      84:	4d54532f 	ldclmi	3, cr5, [r4, #-188]	; 0xffffff44
      88:	34463233 	strbcc	r3, [r6], #-563	; 0xfffffdcd
      8c:	62696c5f 	rsbvs	r6, r9, #24320	; 0x5f00
      90:	4d54532f 	ldclmi	3, cr5, [r4, #-188]	; 0xffffff44
      94:	34463233 	strbcc	r3, [r6], #-563	; 0xfffffdcd
      98:	535f7878 	cmppl	pc, #120, 16	; 0x780000
      9c:	65506474 	ldrbvs	r6, [r0, #-1140]	; 0xfffffb8c
      a0:	68706972 	ldmdavs	r0!, {r1, r4, r5, r6, r8, fp, sp, lr}^
      a4:	6972445f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, sl, lr}^
      a8:	2f726576 	svccs	0x00726576
      ac:	00636e69 	rsbeq	r6, r3, r9, ror #28
      b0:	635c3a63 	cmpvs	ip, #405504	; 0x63000
      b4:	70616573 	rsbvc	r6, r1, r3, ror r5
      b8:	6f635c70 	svcvs	0x00635c70
      bc:	696c6564 	stmdbvs	ip!, {r2, r5, r6, r8, sl, sp, lr}^
      c0:	745c6574 	ldrbvc	r6, [ip], #-1396	; 0xfffffa8c
      c4:	736c6f6f 	cmnvc	ip, #444	; 0x1bc
      c8:	6363675c 	cmnvs	r3, #92, 14	; 0x1700000
      cc:	6d72612d 	ldfvse	f6, [r2, #-180]!	; 0xffffff4c
      d0:	6d72615c 	ldfvse	f6, [r2, #-368]!	; 0xfffffe90
      d4:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
      d8:	61652d65 	cmnvs	r5, r5, ror #26
      dc:	695c6962 	ldmdbvs	ip, {r1, r5, r6, r8, fp, sp, lr}^
      e0:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
      e4:	6d5c6564 	cfldr64vs	mvdx6, [ip, #-400]	; 0xfffffe70
      e8:	69686361 	stmdbvs	r8!, {r0, r5, r6, r8, r9, sp, lr}^
      ec:	6300656e 	movwvs	r6, #1390	; 0x56e
      f0:	73635c3a 	cmnvc	r3, #14848	; 0x3a00
      f4:	70706165 	rsbsvc	r6, r0, r5, ror #2
      f8:	646f635c 	strbtvs	r6, [pc], #-860	; 100 <startup-0x1fffff00>
      fc:	74696c65 	strbtvc	r6, [r9], #-3173	; 0xfffff39b
     100:	6f745c65 	svcvs	0x00745c65
     104:	5c736c6f 	ldclpl	12, cr6, [r3], #-444	; 0xfffffe44
     108:	2d636367 	stclcs	3, cr6, [r3, #-412]!	; 0xfffffe64
     10c:	5c6d7261 	sfmpl	f7, 2, [sp], #-388	; 0xfffffe7c
     110:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
     114:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
     118:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
     11c:	6e695c69 	cdpvs	12, 6, cr5, cr9, cr9, {3}
     120:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
     124:	79735c65 	ldmdbvc	r3!, {r0, r2, r5, r6, sl, fp, ip, lr}^
     128:	63000073 	movwvs	r0, #115	; 0x73
     12c:	5f65726f 	svcpl	0x0065726f
     130:	2e346d63 	cdpcs	13, 3, cr6, cr4, cr3, {3}
     134:	00010068 	andeq	r0, r1, r8, rrx
     138:	4e414300 	cdpmi	3, 4, cr4, cr1, cr0, {0}
     13c:	0200632e 	andeq	r6, r0, #-1207959552	; 0xb8000000
     140:	74730000 	ldrbtvc	r0, [r3], #-0
     144:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
     148:	2e787834 	mrccs	8, 3, r7, cr8, cr4, {1}
     14c:	00030068 	andeq	r0, r3, r8, rrx
     150:	65645f00 	strbvs	r5, [r4, #-3840]!	; 0xfffff100
     154:	6c756166 	ldfvse	f6, [r5], #-408	; 0xfffffe68
     158:	79745f74 	ldmdbvc	r4!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
     15c:	2e736570 	mrccs	5, 3, r6, cr3, cr0, {3}
     160:	00040068 	andeq	r0, r4, r8, rrx
     164:	74735f00 	ldrbtvc	r5, [r3], #-3840	; 0xfffff100
     168:	746e6964 	strbtvc	r6, [lr], #-2404	; 0xfffff69c
     16c:	0500682e 	streq	r6, [r0, #-2094]	; 0xfffff7d2
     170:	79730000 	ldmdbvc	r3!, {}^	; <UNPREDICTABLE>
     174:	6d657473 	cfstrdvs	mvd7, [r5, #-460]!	; 0xfffffe34
     178:	6d74735f 	ldclvs	3, cr7, [r4, #-380]!	; 0xfffffe84
     17c:	34663233 	strbtcc	r3, [r6], #-563	; 0xfffffdcd
     180:	682e7878 	stmdavs	lr!, {r3, r4, r5, r6, fp, ip, sp, lr}
     184:	00000300 	andeq	r0, r0, r0, lsl #6
     188:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
     18c:	78346632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, sp, lr}
     190:	61635f78 	smcvs	13816	; 0x35f8
     194:	00682e6e 	rsbeq	r2, r8, lr, ror #28
     198:	43000003 	movwmi	r0, #3
     19c:	682e4e41 	stmdavs	lr!, {r0, r6, r9, sl, fp, lr}
     1a0:	00000200 	andeq	r0, r0, r0, lsl #4
     1a4:	6373696d 	cmnvs	r3, #1785856	; 0x1b4000
     1a8:	0300682e 	movweq	r6, #2094	; 0x82e
     1ac:	74730000 	ldrbtvc	r0, [r3], #-0
     1b0:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
     1b4:	5f787834 	svcpl	0x00787834
     1b8:	6f697067 	svcvs	0x00697067
     1bc:	0300682e 	movweq	r6, #2094	; 0x82e
     1c0:	00000000 	andeq	r0, r0, r0
     1c4:	00100205 	andseq	r0, r0, r5, lsl #4
     1c8:	dd032000 	stcle	0, cr2, [r3, #-0]
     1cc:	4b75010c 	blmi	1d40604 <startup-0x1e2bf9fc>
     1d0:	04d81ecd 	ldrbeq	r1, [r8], #3789	; 0xecd
     1d4:	73c30302 	bicvc	r0, r3, #134217728	; 0x8000000
     1d8:	914b3d90 			; <UNDEFINED> instruction: 0x914b3d90
     1dc:	02040200 	andeq	r0, r4, #0, 4
     1e0:	0402002c 	streq	r0, [r2], #-44	; 0xffffffd4
     1e4:	06580601 	ldrbeq	r0, [r8], -r1, lsl #12
     1e8:	6769214f 	strbvs	r2, [r9, -pc, asr #2]!
     1ec:	59868386 	stmibpl	r6, {r1, r2, r7, r8, r9, pc}
     1f0:	4b593d3d 	blmi	164f6ec <startup-0x1e9b0914>
     1f4:	3d3d4b59 	fldmdbxcc	sp!, {d4-d47}	;@ Deprecated
     1f8:	5967794b 	stmdbpl	r7!, {r0, r1, r3, r6, r8, fp, ip, sp, lr}^
     1fc:	5b594fa0 	blpl	1654084 <startup-0x1e9abf7c>
     200:	67bdc967 	ldrvs	ip, [sp, r7, ror #18]!
     204:	919faf4b 	orrsls	sl, pc, fp, asr #30
     208:	02007677 	andeq	r7, r0, #124780544	; 0x7700000
     20c:	63030204 	movwvs	r0, #12804	; 0x3204
     210:	0402004a 	streq	r0, [r2], #-74	; 0xffffffb6
     214:	06660601 	strbteq	r0, [r6], -r1, lsl #12
     218:	21582303 	cmpcs	r8, r3, lsl #6
     21c:	864b67d9 			; <UNDEFINED> instruction: 0x864b67d9
     220:	4c3d3d59 	ldcmi	13, cr3, [sp], #-356	; 0xfffffe9c
     224:	02003d77 	andeq	r3, r0, #7616	; 0x1dc0
     228:	004b0304 	subeq	r0, fp, r4, lsl #6
     22c:	57030402 	strpl	r0, [r3, -r2, lsl #8]
     230:	01040200 	mrseq	r0, R12_usr
     234:	4d065806 	stcmi	8, cr5, [r6, #-24]	; 0xffffffe8
     238:	4b4f4c4f 	blmi	13d337c <startup-0x1ec2cc84>
     23c:	5dc9673f 	stclpl	7, cr6, [r9, #252]	; 0xfc
     240:	4ec9594b 			; <UNDEFINED> instruction: 0x4ec9594b
     244:	763ecc75 			; <UNDEFINED> instruction: 0x763ecc75
     248:	914b6977 	hvcls	46743	; 0xb697
     24c:	3d679495 	cfstrdcc	mvd9, [r7, #-596]!	; 0xfffffdac
     250:	9fa35a4c 	svcls	0x00a35a4c
     254:	f5c99faf 			; <UNDEFINED> instruction: 0xf5c99faf
     258:	22084bbb 	andcs	r4, r8, #191488	; 0x2ec00
     25c:	02040200 	andeq	r0, r4, #0, 4
     260:	00666c03 	rsbeq	r6, r6, r3, lsl #24
     264:	06010402 	streq	r0, [r1], -r2, lsl #8
     268:	17030666 	strne	r0, [r3, -r6, ror #12]
     26c:	3e3de758 	mrccc	7, 1, lr, cr13, cr8, {2}
     270:	4bad944c 	blmi	feb653a8 <GPIO_Ports+0xdeb615d4>
     274:	02001308 	andeq	r1, r0, #8, 6	; 0x20000000
     278:	77030204 	strvc	r0, [r3, -r4, lsl #4]
     27c:	04020058 	streq	r0, [r2], #-88	; 0xffffffa8
     280:	06580601 	ldrbeq	r0, [r8], -r1, lsl #12
     284:	ae4a0c03 	cdpge	12, 4, cr0, cr10, cr3, {0}
     288:	4d676741 	stclmi	7, cr6, [r7, #-260]!	; 0xfffffefc
     28c:	68676d67 	stmdavs	r7!, {r0, r1, r2, r5, r6, r8, sl, fp, sp, lr}^
     290:	3d3d3d4b 	ldccc	13, cr3, [sp, #-300]!	; 0xfffffed4
     294:	3d4b683d 	stclcc	8, cr6, [fp, #-244]	; 0xffffff0c
     298:	683d3d3d 	ldmdavs	sp!, {r0, r2, r3, r4, r5, r8, sl, fp, ip, sp}
     29c:	3d3d3d3d 	ldccc	13, cr3, [sp, #-244]!	; 0xffffff0c
     2a0:	3d3d683d 	ldccc	8, cr6, [sp, #-244]!	; 0xffffff0c
     2a4:	683d3d3d 	ldmdavs	sp!, {r0, r2, r3, r4, r5, r8, sl, fp, ip, sp}
     2a8:	3d3d3d4b 	ldccc	13, cr3, [sp, #-300]!	; 0xfffffed4
     2ac:	3d4b4d4d 	stclcc	13, cr4, [fp, #-308]	; 0xfffffecc
     2b0:	3d3d3d3d 	ldccc	13, cr3, [sp, #-244]!	; 0xffffff0c
     2b4:	3f3d3d3f 	svccc	0x003d3d3f
     2b8:	4b3fa030 	blmi	fe8380 <startup-0x1f017c80>
     2bc:	be2f3069 	cdplt	0, 2, cr3, cr15, cr9, {3}
     2c0:	3e2f3e75 	mcrcc	14, 1, r3, cr15, cr5, {3}
     2c4:	213f3e3d 	teqcs	pc, sp, lsr lr	; <UNPREDICTABLE>
     2c8:	5b3e4c50 	blpl	f93410 <startup-0x1f06cbf0>
     2cc:	01000502 	tsteq	r0, r2, lsl #10
     2d0:	00042101 	andeq	r2, r4, r1, lsl #2
     2d4:	c7000200 	strgt	r0, [r0, -r0, lsl #4]
     2d8:	02000001 	andeq	r0, r0, #1
     2dc:	0d0efb01 	vstreq	d15, [lr, #-4]
     2e0:	01010100 	mrseq	r0, (UNDEF: 17)
     2e4:	00000001 	andeq	r0, r0, r1
     2e8:	01000001 	tsteq	r0, r1
     2ec:	552f3a43 	strpl	r3, [pc, #-2627]!	; fffff8b1 <GPIO_Ports+0xdfffbadd>
     2f0:	73726573 	cmnvc	r2, #482344960	; 0x1cc00000
     2f4:	6164412f 	cmnvs	r4, pc, lsr #2
     2f8:	4f2f746d 	svcmi	0x002f746d
     2fc:	7244656e 	subvc	r6, r4, #461373440	; 0x1b800000
     300:	2f657669 	svccs	0x00657669
     304:	756b6f44 	strbvc	r6, [fp, #-3908]!	; 0xfffff0bc
     308:	746e656d 	strbtvc	r6, [lr], #-1389	; 0xfffffa93
     30c:	7469472f 	strbtvc	r4, [r9], #-1839	; 0xfffff8d1
     310:	2f627548 	svccs	0x00627548
     314:	32544144 	subscc	r4, r4, #68, 2
     318:	4c2d3039 	stcmi	0, cr3, [sp], #-228	; 0xffffff1c
     31c:	736d7261 	cmnvc	sp, #268435462	; 0x10000006
     320:	65747379 	ldrbvs	r7, [r4, #-889]!	; 0xfffffc87
     324:	6f6b2f6d 	svcvs	0x006b2f6d
     328:	696c2f64 	stmdbvs	ip!, {r2, r5, r6, r8, r9, sl, fp, sp}^
     32c:	54532f62 	ldrbpl	r2, [r3], #-3938	; 0xfffff09e
     330:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
     334:	696c5f34 	stmdbvs	ip!, {r2, r4, r5, r8, r9, sl, fp, ip, lr}^
     338:	54532f62 	ldrbpl	r2, [r3], #-3938	; 0xfffff09e
     33c:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
     340:	5f787834 	svcpl	0x00787834
     344:	50647453 	rsbpl	r7, r4, r3, asr r4
     348:	70697265 	rsbvc	r7, r9, r5, ror #4
     34c:	72445f68 	subvc	r5, r4, #104, 30	; 0x1a0
     350:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
     354:	6372732f 	cmnvs	r2, #-1140850688	; 0xbc000000
     358:	5c3a6300 	ldcpl	3, cr6, [sl], #-0
     35c:	61657363 	cmnvs	r5, r3, ror #6
     360:	635c7070 	cmpvs	ip, #112	; 0x70
     364:	6c65646f 	cfstrdvs	mvd6, [r5], #-444	; 0xfffffe44
     368:	5c657469 	cfstrdpl	mvd7, [r5], #-420	; 0xfffffe5c
     36c:	6c6f6f74 	stclvs	15, cr6, [pc], #-464	; 1a4 <startup-0x1ffffe5c>
     370:	63675c73 	cmnvs	r7, #29440	; 0x7300
     374:	72612d63 	rsbvc	r2, r1, #6336	; 0x18c0
     378:	72615c6d 	rsbvc	r5, r1, #27904	; 0x6d00
     37c:	6f6e2d6d 	svcvs	0x006e2d6d
     380:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
     384:	5c696261 	sfmpl	f6, 2, [r9], #-388	; 0xfffffe7c
     388:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
     38c:	5c656475 	cfstrdpl	mvd6, [r5], #-468	; 0xfffffe2c
     390:	6863616d 	stmdavs	r3!, {r0, r2, r3, r5, r6, r8, sp, lr}^
     394:	00656e69 	rsbeq	r6, r5, r9, ror #28
     398:	635c3a63 	cmpvs	ip, #405504	; 0x63000
     39c:	70616573 	rsbvc	r6, r1, r3, ror r5
     3a0:	6f635c70 	svcvs	0x00635c70
     3a4:	696c6564 	stmdbvs	ip!, {r2, r5, r6, r8, sl, sp, lr}^
     3a8:	745c6574 	ldrbvc	r6, [ip], #-1396	; 0xfffffa8c
     3ac:	736c6f6f 	cmnvc	ip, #444	; 0x1bc
     3b0:	6363675c 	cmnvs	r3, #92, 14	; 0x1700000
     3b4:	6d72612d 	ldfvse	f6, [r2, #-180]!	; 0xffffff4c
     3b8:	6d72615c 	ldfvse	f6, [r2, #-368]!	; 0xfffffe90
     3bc:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
     3c0:	61652d65 	cmnvs	r5, r5, ror #26
     3c4:	695c6962 	ldmdbvs	ip, {r1, r5, r6, r8, fp, sp, lr}^
     3c8:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
     3cc:	735c6564 	cmpvc	ip, #100, 10	; 0x19000000
     3d0:	2e007379 	mcrcs	3, 0, r7, cr0, cr9, {3}
     3d4:	696c2f2e 	stmdbvs	ip!, {r1, r2, r3, r5, r8, r9, sl, fp, sp}^
     3d8:	54532f62 	ldrbpl	r2, [r3], #-3938	; 0xfffff09e
     3dc:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
     3e0:	696c5f34 	stmdbvs	ip!, {r2, r4, r5, r8, r9, sl, fp, ip, lr}^
     3e4:	4d432f62 	stclmi	15, cr2, [r3, #-392]	; 0xfffffe78
     3e8:	2f534953 	svccs	0x00534953
     3ec:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
     3f0:	00656475 	rsbeq	r6, r5, r5, ror r4
     3f4:	6c2f2e2e 	stcvs	14, cr2, [pc], #-184	; 344 <startup-0x1ffffcbc>
     3f8:	532f6269 			; <UNDEFINED> instruction: 0x532f6269
     3fc:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
     400:	6c5f3446 	cfldrdvs	mvd3, [pc], {70}	; 0x46
     404:	532f6269 			; <UNDEFINED> instruction: 0x532f6269
     408:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
     40c:	78783446 	ldmdavc	r8!, {r1, r2, r6, sl, ip, sp}^
     410:	6474535f 	ldrbtvs	r5, [r4], #-863	; 0xfffffca1
     414:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
     418:	445f6870 	ldrbmi	r6, [pc], #-2160	; 420 <startup-0x1ffffbe0>
     41c:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
     420:	6e692f72 	mcrvs	15, 3, r2, cr9, cr2, {3}
     424:	73000063 	movwvc	r0, #99	; 0x63
     428:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
     42c:	78783466 	ldmdavc	r8!, {r1, r2, r5, r6, sl, ip, sp}^
     430:	6e61635f 	mcrvs	3, 3, r6, cr1, cr15, {2}
     434:	0100632e 	tsteq	r0, lr, lsr #6
     438:	645f0000 	ldrbvs	r0, [pc], #-0	; 440 <startup-0x1ffffbc0>
     43c:	75616665 	strbvc	r6, [r1, #-1637]!	; 0xfffff99b
     440:	745f746c 	ldrbvc	r7, [pc], #-1132	; 448 <startup-0x1ffffbb8>
     444:	73657079 	cmnvc	r5, #121	; 0x79
     448:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
     44c:	735f0000 	cmpvc	pc, #0
     450:	6e696474 	mcrvs	4, 3, r6, cr9, cr4, {3}
     454:	00682e74 	rsbeq	r2, r8, r4, ror lr
     458:	63000003 	movwvs	r0, #3
     45c:	5f65726f 	svcpl	0x0065726f
     460:	2e346d63 	cdpcs	13, 3, cr6, cr4, cr3, {3}
     464:	00040068 	andeq	r0, r4, r8, rrx
     468:	73797300 	cmnvc	r9, #0, 6
     46c:	5f6d6574 	svcpl	0x006d6574
     470:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
     474:	78346632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, sp, lr}
     478:	00682e78 	rsbeq	r2, r8, r8, ror lr
     47c:	73000005 	movwvc	r0, #5
     480:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
     484:	78783466 	ldmdavc	r8!, {r1, r2, r5, r6, sl, ip, sp}^
     488:	0500682e 	streq	r6, [r0, #-2094]	; 0xfffff7d2
     48c:	74730000 	ldrbtvc	r0, [r3], #-0
     490:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
     494:	5f787834 	svcpl	0x00787834
     498:	2e6e6163 	powcsez	f6, f6, f3
     49c:	00050068 	andeq	r0, r5, r8, rrx
     4a0:	05000000 	streq	r0, [r0, #-0]
     4a4:	0007f402 	andeq	pc, r7, r2, lsl #8
     4a8:	01a70320 			; <UNDEFINED> instruction: 0x01a70320
     4ac:	684d4e01 	stmdavs	sp, {r0, r9, sl, fp, lr}^
     4b0:	1b661b03 	blne	19870c4 <startup-0x1e678f3c>
     4b4:	0d036968 	vstreq.16	s12, [r3, #-208]	; 0xffffff30	; <UNPREDICTABLE>
     4b8:	034b5974 	movteq	r5, #47476	; 0xb974
     4bc:	69772e10 	ldmdbvs	r7!, {r4, r9, sl, fp, sp}^
     4c0:	02003a22 	andeq	r3, r0, #139264	; 0x22000
     4c4:	66060104 	strvs	r0, [r6], -r4, lsl #2
     4c8:	5d685006 	stclpl	0, cr5, [r8, #-24]!	; 0xffffffe8
     4cc:	4c78784c 	ldclmi	8, cr7, [r8], #-304	; 0xfffffed0
     4d0:	784c7878 	stmdavc	ip, {r3, r4, r5, r6, fp, ip, sp, lr}^
     4d4:	78784c78 	ldmdavc	r8!, {r3, r4, r5, r6, sl, fp, lr}^
     4d8:	4c78784c 	ldclmi	8, cr7, [r8], #-304	; 0xfffffed0
     4dc:	3b3d7878 	blcc	f5e6c4 <startup-0x1f0a193c>
     4e0:	3b223b22 	blcc	88f170 <startup-0x1f770e90>
     4e4:	351d3b22 	ldrcc	r3, [sp, #-2850]	; 0xfffff4de
     4e8:	3a223077 	bcc	88c6cc <startup-0x1f773934>
     4ec:	01040200 	mrseq	r0, R12_usr
     4f0:	50066606 	andpl	r6, r6, r6, lsl #12
     4f4:	3d4f5c68 	stclcc	12, cr5, [pc, #-416]	; 35c <startup-0x1ffffca4>
     4f8:	7400e903 	strvc	lr, [r0], #-2307	; 0xfffff6fd
     4fc:	a169364b 	cmnge	r9, fp, asr #12
     500:	3db14daf 	ldccc	13, cr4, [r1, #700]!	; 0x2bc
     504:	512d4b3a 			; <UNDEFINED> instruction: 0x512d4b3a
     508:	2d4b3a3d 	vstrcs	s7, [fp, #-244]	; 0xffffff0c
     50c:	3da14d6b 	stccc	13, cr4, [r1, #428]!	; 0x1ac
     510:	4f2d4b3a 	svcmi	0x002d4b3a
     514:	2d4b3a3d 	vstrcs	s7, [fp, #-244]	; 0xffffff0c
     518:	a2bf4d6c 	adcsge	r4, pc, #108, 26	; 0x1b00
     51c:	a24daf4d 	subge	sl, sp, #308	; 0x134
     520:	03ada24c 			; <UNDEFINED> instruction: 0x03ada24c
     524:	3f4e6609 	svccc	0x004e6609
     528:	3f3f3f3f 	svccc	0x003f3f3f
     52c:	3f3f3f3f 	svccc	0x003f3f3f
     530:	1f033d3f 	svcne	0x00033d3f
     534:	9fa16b4a 	svcls	0x00a16b4a
     538:	0d03adbd 	stceq	13, cr10, [r3, #-756]	; 0xfffffd0c
     53c:	7b4d7982 	blvc	135eb4c <startup-0x1eca14b4>
     540:	1003681e 	andne	r6, r3, lr, lsl r8
     544:	694d7874 	stmdbvs	sp, {r2, r4, r5, r6, fp, ip, sp, lr}^
     548:	0c03bbbb 			; <UNDEFINED> instruction: 0x0c03bbbb
     54c:	207903ba 	ldrhtcs	r0, [r9], #-58	; 0xffffffc6
     550:	aeadad77 	mcrge	13, 5, sl, cr13, cr7, {3}
     554:	59661f03 	stmdbpl	r6!, {r0, r1, r8, r9, sl, fp, ip}^
     558:	925a9252 	subsls	r9, sl, #536870917	; 0x20000005
     55c:	4d5c925a 	lfmmi	f1, 3, [ip, #-360]	; 0xfffffe98
     560:	9f4de569 	svcls	0x004de569
     564:	2d9f962d 	ldccs	6, cr9, [pc, #180]	; 620 <startup-0x1ffff9e0>
     568:	7a1f2d22 	bvc	7cb9f8 <startup-0x1f834608>
     56c:	082f0875 	stmdaeq	pc!, {r0, r2, r4, r5, r6, fp}	; <UNPREDICTABLE>
     570:	223b3d3f 	eorscs	r3, fp, #4032	; 0xfc0
     574:	3039223b 	eorscc	r2, r9, fp, lsr r2
     578:	3b3d782c 	blcc	f5e630 <startup-0x1f0a19d0>
     57c:	39223b22 	stmdbcc	r2!, {r1, r5, r8, r9, fp, ip, sp}
     580:	d8792c30 	ldmdale	r9!, {r4, r5, sl, fp, sp}^
     584:	4a0b033d 	bmi	2c1280 <startup-0x1fd3ed80>
     588:	59853475 	stmibpl	r5, {r0, r2, r4, r5, r6, sl, ip, sp}
     58c:	59225922 	stmdbpl	r2!, {r1, r5, r8, fp, ip, lr}
     590:	08222f22 	stmdaeq	r2!, {r1, r5, r8, r9, sl, fp, sp}
     594:	2f222f93 	svccs	0x00222f93
     598:	2f212f21 	svccs	0x00212f21
     59c:	2f212f22 	svccs	0x00212f22
     5a0:	2f212f21 	svccs	0x00212f21
     5a4:	0a032f22 	beq	cc234 <startup-0x1ff33dcc>
     5a8:	03791208 	cmneq	r9, #8, 4	; 0x80000000
     5ac:	79038209 	stmdbvc	r3, {r0, r3, r9, pc}
     5b0:	75216720 	strvc	r6, [r1, #-1824]!	; 0xfffff8e0
     5b4:	03247521 			; <UNDEFINED> instruction: 0x03247521
     5b8:	bb954a20 	bllt	fe552e40 <GPIO_Ports+0xde54f06c>
     5bc:	cabdcc4c 	bgt	fef736f4 <GPIO_Ports+0xdef6f920>
     5c0:	c9bbcad8 	ldmibgt	fp!, {r3, r4, r6, r7, r9, fp, lr, pc}
     5c4:	c9bbc9c9 	ldmibgt	fp!, {r0, r3, r6, r7, r8, fp, lr, pc}
     5c8:	6d4ccbc9 	vstrvs	d28, [ip, #-804]	; 0xfffffcdc
     5cc:	0a03681e 	beq	da64c <startup-0x1ff259b4>
     5d0:	6d4c794a 	vstrvs.16	s15, [ip, #-148]	; 0xffffff6c	; <UNPREDICTABLE>
     5d4:	0a03681e 	beq	da654 <startup-0x1ff259ac>
     5d8:	4c4e754a 	cfstr64mi	mvdx7, [lr], {74}	; 0x4a
     5dc:	4c944c92 	ldcmi	12, cr4, [r4], {146}	; 0x92
     5e0:	4a20033d 	bmi	8012dc <startup-0x1f7fed24>
     5e4:	4d344d75 	ldcmi	13, cr4, [r4, #-468]!	; 0xfffffe2c
     5e8:	003a2285 	eorseq	r2, sl, r5, lsl #5
     5ec:	06010402 	streq	r0, [r1], -r2, lsl #8
     5f0:	68400666 	stmdavs	r0, {r1, r2, r5, r6, r9, sl}^
     5f4:	774d5b5c 	smlsldvc	r5, sp, ip, fp
     5f8:	02003a22 	andeq	r3, r0, #139264	; 0x22000
     5fc:	58060104 	stmdapl	r6, {r2, r8}
     600:	5c5a4006 	mrrcpl	0, 0, r4, sl, cr6
     604:	22854d5b 	addcs	r4, r5, #5824	; 0x16c0
     608:	0402003a 	streq	r0, [r2], #-58	; 0xffffffc6
     60c:	06660601 	strbteq	r0, [r6], -r1, lsl #12
     610:	5d5c6840 	ldclpl	8, cr6, [ip, #-256]	; 0xffffff00
     614:	09033d4d 	stmdbeq	r3, {r0, r2, r3, r6, r8, sl, fp, ip, sp}
     618:	85504b66 	ldrbhi	r4, [r0, #-2918]	; 0xfffff49a
     61c:	033d4d69 	teqeq	sp, #6720	; 0x1a40
     620:	2f4b4a09 	svccs	0x004b4a09
     624:	3a227750 	bcc	89e36c <startup-0x1f761c94>
     628:	01040200 	mrseq	r0, R12_usr
     62c:	40066606 	andmi	r6, r6, r6, lsl #12
     630:	033d4d69 	teqeq	sp, #6720	; 0x1a40
     634:	504b6628 	subpl	r6, fp, r8, lsr #12
     638:	0f033d85 	svceq	0x00033d85
     63c:	5b504b4a 	blpl	141336c <startup-0x1ebecc94>
     640:	4a0a032f 	bmi	281304 <startup-0x1fd7ecfc>
     644:	2f5b504b 	svccs	0x005b504b
     648:	4a01c303 	bmi	7125c <startup-0x1ff8eda4>
     64c:	1e6d4d7a 	mcrne	13, 3, r4, cr13, cr10, {3}
     650:	4a190376 	bmi	641430 <startup-0x1f9bebd0>
     654:	775b5159 			; <UNDEFINED> instruction: 0x775b5159
     658:	775b5b5d 			; <UNDEFINED> instruction: 0x775b5b5d
     65c:	775b5b5d 			; <UNDEFINED> instruction: 0x775b5b5d
     660:	775b5b5d 			; <UNDEFINED> instruction: 0x775b5b5d
     664:	5d775e5d 	ldclpl	14, cr5, [r7, #-372]!	; 0xfffffe8c
     668:	15033d4e 	strne	r3, [r3, #-3406]	; 0xfffff2b2
     66c:	4d33594a 			; <UNDEFINED> instruction: 0x4d33594a
     670:	033c1b03 	teqeq	ip, #3072	; 0xc00
     674:	5b4c2069 	blpl	1308820 <startup-0x1ecf77e0>
     678:	033c1203 	teqeq	ip, #805306368	; 0x30000000
     67c:	035b2070 	cmpeq	fp, #112	; 0x70
     680:	75033c0d 	strvc	r3, [r3, #-3085]	; 0xfffff3f3
     684:	1d445b20 	vstrne	d21, [r4, #-128]	; 0xffffff80
     688:	7419033f 	ldrvc	r0, [r9], #-831	; 0xfffffcc1
     68c:	02695059 	rsbeq	r5, r9, #89	; 0x59
     690:	23ad163b 			; <UNDEFINED> instruction: 0x23ad163b
     694:	239f239f 	orrscs	r2, pc, #2080374786	; 0x7c000002
     698:	239f239f 	orrscs	r2, pc, #2080374786	; 0x7c000002
     69c:	239f239f 	orrscs	r2, pc, #2080374786	; 0x7c000002
     6a0:	239f239f 	orrscs	r2, pc, #2080374786	; 0x7c000002
     6a4:	239f239f 	orrscs	r2, pc, #2080374786	; 0x7c000002
     6a8:	239f239f 	orrscs	r2, pc, #2080374786	; 0x7c000002
     6ac:	344b239f 	strbcc	r2, [fp], #-927	; 0xfffffc61
     6b0:	17033d4e 	strne	r3, [r3, -lr, asr #26]
     6b4:	3b035d66 	blcc	d7c54 <startup-0x1ff283ac>
     6b8:	204503f2 	strdcs	r0, [r5], #-50	; 0xffffffce
     6bc:	034a3b03 	movteq	r3, #43779	; 0xab03
     6c0:	3b032045 	blcc	c87dc <startup-0x1ff37824>
     6c4:	204503f2 	strdcs	r0, [r5], #-50	; 0xffffffce
     6c8:	03ba3b03 			; <UNDEFINED> instruction: 0x03ba3b03
     6cc:	233d2049 	teqcs	sp, #73	; 0x49
     6d0:	233d233d 	teqcs	sp, #-201326592	; 0xf4000000
     6d4:	233d233d 	teqcs	sp, #-201326592	; 0xf4000000
     6d8:	233d233d 	teqcs	sp, #-201326592	; 0xf4000000
     6dc:	233e233e 	teqcs	lr, #-134217728	; 0xf8000000
     6e0:	3d3e233e 	ldccc	3, cr2, [lr, #-248]!	; 0xffffff08
     6e4:	243e3e23 	ldrtcs	r3, [lr], #-3619	; 0xfffff1dd
     6e8:	59740c03 	ldmdbpl	r4!, {r0, r1, sl, fp}^
     6ec:	4c5d4d4c 	mrrcmi	13, 4, r4, sp, cr12
     6f0:	0004023d 	andeq	r0, r4, sp, lsr r2
     6f4:	05cb0101 	strbeq	r0, [fp, #257]	; 0x101
     6f8:	00020000 	andeq	r0, r2, r0
     6fc:	0000022a 	andeq	r0, r0, sl, lsr #4
     700:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
     704:	0101000d 	tsteq	r1, sp
     708:	00000101 	andeq	r0, r0, r1, lsl #2
     70c:	00000100 	andeq	r0, r0, r0, lsl #2
     710:	2f2e2e01 	svccs	0x002e2e01
     714:	2f62696c 	svccs	0x0062696c
     718:	334d5453 	movtcc	r5, #54355	; 0xd453
     71c:	5f344632 	svcpl	0x00344632
     720:	2f62696c 	svccs	0x0062696c
     724:	49534d43 	ldmdbmi	r3, {r0, r1, r6, r8, sl, fp, lr}^
     728:	6e692f53 	mcrvs	15, 3, r2, cr9, cr3, {2}
     72c:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
     730:	2e2e0065 	cdpcs	0, 2, cr0, cr14, cr5, {3}
     734:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
     738:	4d54532f 	ldclmi	3, cr5, [r4, #-188]	; 0xffffff44
     73c:	34463233 	strbcc	r3, [r6], #-563	; 0xfffffdcd
     740:	62696c5f 	rsbvs	r6, r9, #24320	; 0x5f00
     744:	4d54532f 	ldclmi	3, cr5, [r4, #-188]	; 0xffffff44
     748:	34463233 	strbcc	r3, [r6], #-563	; 0xfffffdcd
     74c:	535f7878 	cmppl	pc, #120, 16	; 0x780000
     750:	65506474 	ldrbvs	r6, [r0, #-1140]	; 0xfffffb8c
     754:	68706972 	ldmdavs	r0!, {r1, r4, r5, r6, r8, fp, sp, lr}^
     758:	6972445f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, sl, lr}^
     75c:	2f726576 	svccs	0x00726576
     760:	00637273 	rsbeq	r7, r3, r3, ror r2
     764:	552f3a43 	strpl	r3, [pc, #-2627]!	; fffffd29 <GPIO_Ports+0xdfffbf55>
     768:	73726573 	cmnvc	r2, #482344960	; 0x1cc00000
     76c:	6164412f 	cmnvs	r4, pc, lsr #2
     770:	4f2f746d 	svcmi	0x002f746d
     774:	7244656e 	subvc	r6, r4, #461373440	; 0x1b800000
     778:	2f657669 	svccs	0x00657669
     77c:	756b6f44 	strbvc	r6, [fp, #-3908]!	; 0xfffff0bc
     780:	746e656d 	strbtvc	r6, [lr], #-1389	; 0xfffffa93
     784:	7469472f 	strbtvc	r4, [r9], #-1839	; 0xfffff8d1
     788:	2f627548 	svccs	0x00627548
     78c:	32544144 	subscc	r4, r4, #68, 2
     790:	4c2d3039 	stcmi	0, cr3, [sp], #-228	; 0xffffff1c
     794:	736d7261 	cmnvc	sp, #268435462	; 0x10000006
     798:	65747379 	ldrbvs	r7, [r4, #-889]!	; 0xfffffc87
     79c:	6f6b2f6d 	svcvs	0x006b2f6d
     7a0:	6f442f64 	svcvs	0x00442f64
     7a4:	2e00726f 	cdpcs	2, 0, cr7, cr0, cr15, {3}
     7a8:	696c2f2e 	stmdbvs	ip!, {r1, r2, r3, r5, r8, r9, sl, fp, sp}^
     7ac:	54532f62 	ldrbpl	r2, [r3], #-3938	; 0xfffff09e
     7b0:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
     7b4:	696c5f34 	stmdbvs	ip!, {r2, r4, r5, r8, r9, sl, fp, ip, lr}^
     7b8:	54532f62 	ldrbpl	r2, [r3], #-3938	; 0xfffff09e
     7bc:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
     7c0:	5f787834 	svcpl	0x00787834
     7c4:	50647453 	rsbpl	r7, r4, r3, asr r4
     7c8:	70697265 	rsbvc	r7, r9, r5, ror #4
     7cc:	72445f68 	subvc	r5, r4, #104, 30	; 0x1a0
     7d0:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
     7d4:	636e692f 	cmnvs	lr, #770048	; 0xbc000
     7d8:	5c3a6300 	ldcpl	3, cr6, [sl], #-0
     7dc:	61657363 	cmnvs	r5, r3, ror #6
     7e0:	635c7070 	cmpvs	ip, #112	; 0x70
     7e4:	6c65646f 	cfstrdvs	mvd6, [r5], #-444	; 0xfffffe44
     7e8:	5c657469 	cfstrdpl	mvd7, [r5], #-420	; 0xfffffe5c
     7ec:	6c6f6f74 	stclvs	15, cr6, [pc], #-464	; 624 <startup-0x1ffff9dc>
     7f0:	63675c73 	cmnvs	r7, #29440	; 0x7300
     7f4:	72612d63 	rsbvc	r2, r1, #6336	; 0x18c0
     7f8:	72615c6d 	rsbvc	r5, r1, #27904	; 0x6d00
     7fc:	6f6e2d6d 	svcvs	0x006e2d6d
     800:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
     804:	5c696261 	sfmpl	f6, 2, [r9], #-388	; 0xfffffe7c
     808:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
     80c:	5c656475 	cfstrdpl	mvd6, [r5], #-468	; 0xfffffe2c
     810:	6863616d 	stmdavs	r3!, {r0, r2, r3, r5, r6, r8, sp, lr}^
     814:	00656e69 	rsbeq	r6, r5, r9, ror #28
     818:	635c3a63 	cmpvs	ip, #405504	; 0x63000
     81c:	70616573 	rsbvc	r6, r1, r3, ror r5
     820:	6f635c70 	svcvs	0x00635c70
     824:	696c6564 	stmdbvs	ip!, {r2, r5, r6, r8, sl, sp, lr}^
     828:	745c6574 	ldrbvc	r6, [ip], #-1396	; 0xfffffa8c
     82c:	736c6f6f 	cmnvc	ip, #444	; 0x1bc
     830:	6363675c 	cmnvs	r3, #92, 14	; 0x1700000
     834:	6d72612d 	ldfvse	f6, [r2, #-180]!	; 0xffffff4c
     838:	6d72615c 	ldfvse	f6, [r2, #-368]!	; 0xfffffe90
     83c:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
     840:	61652d65 	cmnvs	r5, r5, ror #26
     844:	695c6962 	ldmdbvs	ip, {r1, r5, r6, r8, fp, sp, lr}^
     848:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
     84c:	735c6564 	cmpvc	ip, #100, 10	; 0x19000000
     850:	2e007379 	mcrcs	3, 0, r7, cr0, cr9, {3}
     854:	696c2f2e 	stmdbvs	ip!, {r1, r2, r3, r5, r8, r9, sl, fp, sp}^
     858:	63000062 	movwvs	r0, #98	; 0x62
     85c:	5f65726f 	svcpl	0x0065726f
     860:	2e346d63 	cdpcs	13, 3, cr6, cr4, cr3, {3}
     864:	00010068 	andeq	r0, r1, r8, rrx
     868:	6d747300 	ldclvs	3, cr7, [r4, #-0]
     86c:	34663233 	strbtcc	r3, [r6], #-563	; 0xfffffdcd
     870:	725f7878 	subsvc	r7, pc, #120, 16	; 0x780000
     874:	632e6363 			; <UNDEFINED> instruction: 0x632e6363
     878:	00000200 	andeq	r0, r0, r0, lsl #4
     87c:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xfffff197
     880:	0300682e 	movweq	r6, #2094	; 0x82e
     884:	74730000 	ldrbtvc	r0, [r3], #-0
     888:	75747261 	ldrbvc	r7, [r4, #-609]!	; 0xfffffd9f
     88c:	00632e70 	rsbeq	r2, r3, r0, ror lr
     890:	73000003 	movwvc	r0, #3
     894:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
     898:	78783466 	ldmdavc	r8!, {r1, r2, r5, r6, sl, ip, sp}^
     89c:	0400682e 	streq	r6, [r0], #-2094	; 0xfffff7d2
     8a0:	645f0000 	ldrbvs	r0, [pc], #-0	; 8a8 <startup-0x1ffff758>
     8a4:	75616665 	strbvc	r6, [r1, #-1637]!	; 0xfffff99b
     8a8:	745f746c 	ldrbvc	r7, [pc], #-1132	; 8b0 <startup-0x1ffff750>
     8ac:	73657079 	cmnvc	r5, #121	; 0x79
     8b0:	0500682e 	streq	r6, [r0, #-2094]	; 0xfffff7d2
     8b4:	735f0000 	cmpvc	pc, #0
     8b8:	6e696474 	mcrvs	4, 3, r6, cr9, cr4, {3}
     8bc:	00682e74 	rsbeq	r2, r8, r4, ror lr
     8c0:	73000006 	movwvc	r0, #6
     8c4:	65747379 	ldrbvs	r7, [r4, #-889]!	; 0xfffffc87
     8c8:	74735f6d 	ldrbtvc	r5, [r3], #-3949	; 0xfffff093
     8cc:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
     8d0:	2e787834 	mrccs	8, 3, r7, cr8, cr4, {1}
     8d4:	00040068 	andeq	r0, r4, r8, rrx
     8d8:	6d747300 	ldclvs	3, cr7, [r4, #-0]
     8dc:	34663233 	strbtcc	r3, [r6], #-563	; 0xfffffdcd
     8e0:	725f7878 	subsvc	r7, pc, #120, 16	; 0x780000
     8e4:	682e6363 	stmdavs	lr!, {r0, r1, r5, r6, r8, r9, sp, lr}
     8e8:	00000400 	andeq	r0, r0, r0, lsl #8
     8ec:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
     8f0:	78346632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, sp, lr}
     8f4:	70675f78 	rsbvc	r5, r7, r8, ror pc
     8f8:	682e6f69 	stmdavs	lr!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}
     8fc:	00000400 	andeq	r0, r0, r0, lsl #8
     900:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
     904:	2e707574 	mrccs	5, 3, r7, cr0, cr4, {3}
     908:	00030068 	andeq	r0, r3, r8, rrx
     90c:	6d747300 	ldclvs	3, cr7, [r4, #-0]
     910:	34663233 	strbtcc	r3, [r6], #-563	; 0xfffffdcd
     914:	635f7878 	cmpvs	pc, #120, 16	; 0x780000
     918:	682e6e61 	stmdavs	lr!, {r0, r5, r6, r9, sl, fp, sp, lr}
     91c:	00000400 	andeq	r0, r0, r0, lsl #8
     920:	2e6e6163 	powcsez	f6, f6, f3
     924:	00070068 	andeq	r0, r7, r8, rrx
     928:	05000000 	streq	r0, [r0, #-0]
     92c:	0019c802 	andseq	ip, r9, r2, lsl #16
     930:	0cdd0320 	ldcleq	3, cr0, [sp], {32}
     934:	cd4b7501 	cfstr64gt	mvdx7, [fp, #-4]
     938:	fc03d81e 	stc2	8, cr13, [r3], {30}
     93c:	004b9000 	subeq	r9, fp, r0
     940:	06010402 	streq	r0, [r1], -r2, lsl #8
     944:	4b300658 	blmi	c022ac <startup-0x1f3fdd54>
     948:	213f3d67 	teqcs	pc, r7, ror #26
     94c:	f7030204 			; <UNDEFINED> instruction: 0xf7030204
     950:	69308273 	ldmdbvs	r0!, {r0, r1, r4, r5, r6, r9, pc}
     954:	4f40693f 	svcmi	0x0040693f
     958:	503f694e 	eorspl	r6, pc, lr, asr #18
     95c:	6be41703 	blvs	ff906570 <GPIO_Ports+0xdf90279c>
     960:	0f034b3f 	svceq	0x00034b3f
     964:	3d2f3d74 	stccc	13, cr3, [pc, #-464]!	; 79c <startup-0x1ffff864>
     968:	02040200 	andeq	r0, r4, #0, 4
     96c:	04020040 	streq	r0, [r2], #-64	; 0xffffffc0
     970:	02006702 	andeq	r6, r0, #524288	; 0x80000
     974:	003d0204 	eorseq	r0, sp, r4, lsl #4
     978:	06010402 	streq	r0, [r1], -r2, lsl #8
     97c:	5a4c0658 	bpl	13022e4 <startup-0x1ecfdd1c>
     980:	032f3e4e 			; <UNDEFINED> instruction: 0x032f3e4e
     984:	32674a0b 	rsbcc	r4, r7, #45056	; 0xb000
     988:	3d694d3f 	stclcc	13, cr4, [r9, #-252]!	; 0xffffff04
     98c:	6a741503 	bvs	1d05da0 <startup-0x1e2fa260>
     990:	6614034b 	ldrvs	r0, [r4], -fp, asr #6
     994:	033f3f6c 	teqeq	pc, #108, 30	; 0x1b0
     998:	7903660b 	stmdbvc	r3, {r0, r1, r3, r9, sl, sp, lr}
     99c:	3d233d20 	stccc	13, cr3, [r3, #-128]!	; 0xffffff80
     9a0:	740f0324 	strvc	r0, [pc], #-804	; 9a8 <startup-0x1ffff658>
     9a4:	de034b6a 	vmlsle.f64	d4, d3, d26
     9a8:	bb7c6600 	bllt	1f1a1b0 <startup-0x1e0e5e50>
     9ac:	0e033e2d 	cdpeq	14, 0, cr3, cr3, cr13, {1}
     9b0:	034b6966 	movteq	r6, #47462	; 0xb966
     9b4:	835d661a 	cmphi	sp, #27262976	; 0x1a00000
     9b8:	74018503 	strvc	r8, [r1], #-1283	; 0xfffffafd
     9bc:	e9034b69 	stmdb	r3, {r0, r3, r5, r6, r8, r9, fp, lr}
     9c0:	ad6c6600 	stclge	6, cr6, [ip, #-0]
     9c4:	69740d03 	ldmdbvs	r4!, {r0, r1, r8, sl, fp}^
     9c8:	660e034b 	strvs	r0, [lr], -fp, asr #6
     9cc:	15034b69 	strne	r4, [r3, #-2921]	; 0xfffff497
     9d0:	3f345966 	svccc	0x00345966
     9d4:	0341694d 	movteq	r6, #6477	; 0x194d
     9d8:	34599018 	ldrbcc	r9, [r9], #-24	; 0xffffffe8
     9dc:	41694d3f 	cmnmi	r9, pc, lsr sp
     9e0:	7401b303 	strvc	fp, [r1], #-771	; 0xfffffcfd
     9e4:	4d3f334b 	ldcmi	3, cr3, [pc, #-300]!	; 8c0 <startup-0x1ffff740>
     9e8:	0d033d4d 	stceq	13, cr3, [r3, #-308]	; 0xfffffecc
     9ec:	03672f66 	cmneq	r7, #408	; 0x198
     9f0:	334b6617 	movtcc	r6, #46615	; 0xb617
     9f4:	3d4d4d3f 	stclcc	13, cr4, [sp, #-252]	; 0xffffff04
     9f8:	4b660f03 	blmi	198460c <startup-0x1e67b9f4>
     9fc:	4d4d3f33 	stclmi	15, cr3, [sp, #-204]	; 0xffffff34
     a00:	820f033d 	andhi	r0, pc, #-201326592	; 0xf4000000
     a04:	4d3f334b 	ldcmi	3, cr3, [pc, #-300]!	; 8e0 <startup-0x1ffff720>
     a08:	24033d5b 	strcs	r3, [r3], #-3419	; 0xfffff2a5
     a0c:	5ac04b90 	bpl	ff013854 <GPIO_Ports+0xdf00fa80>
     a10:	3d223d77 	stccc	13, cr3, [r2, #-476]!	; 0xfffffe24
     a14:	3f5a6726 	svccc	0x005a6726
     a18:	8383cbdb 	orrhi	ip, r3, #224256	; 0x36c00
     a1c:	3d201b03 	fstmdbxcc	r0!, {d1}	;@ Deprecated
     a20:	683d5925 	ldmdavs	sp!, {r0, r2, r5, r8, fp, ip, lr}
     a24:	683d6769 	ldmdavs	sp!, {r0, r3, r5, r6, r8, r9, sl, sp, lr}
     a28:	683d6769 	ldmdavs	sp!, {r0, r3, r5, r6, r8, r9, sl, sp, lr}
     a2c:	ba3f0367 	blt	fc17d0 <startup-0x1f03e830>
     a30:	3f84334b 	svccc	0x0084334b
     a34:	8340694d 	movthi	r6, #2381	; 0x94d
     a38:	6a9e0a03 	bvs	fe78324c <GPIO_Ports+0xde77f478>
     a3c:	660c034b 	strvs	r0, [ip], -fp, asr #6
     a40:	b8034b69 	stmdalt	r3, {r0, r3, r5, r6, r8, r9, fp, lr}
     a44:	3d4e6601 	stclcc	6, cr6, [lr, #-4]
     a48:	4b741603 	blmi	1d0625c <startup-0x1e2f9da4>
     a4c:	4d4d4d33 	stclmi	13, cr4, [sp, #-204]	; 0xffffff34
     a50:	8214034b 	andshi	r0, r4, #738197505	; 0x2c000001
     a54:	4d4d334b 	stclmi	3, cr3, [sp, #-300]	; 0xfffffed4
     a58:	11034b4d 	tstne	r3, sp, asr #22
     a5c:	4d334b82 	vldmdbmi	r3!, {d4}
     a60:	034b5b4d 	movteq	r5, #47949	; 0xbb4d
     a64:	334b7410 	movtcc	r7, #46096	; 0xb410
     a68:	4b694d4d 	blmi	1a53fa4 <startup-0x1e5ac05c>
     a6c:	8200d303 	andhi	sp, r0, #201326592	; 0xc000000
     a70:	4d4d334b 	stclmi	3, cr3, [sp, #-300]	; 0xfffffed4
     a74:	f0034b4d 			; <UNDEFINED> instruction: 0xf0034b4d
     a78:	3d4e8200 	sfmcc	f0, 3, [lr, #-0]
     a7c:	79742503 	ldmdbvc	r4!, {r0, r1, r8, sl, sp}^
     a80:	761e6c4c 	ldrvc	r6, [lr], -ip, asr #24
     a84:	79741303 	ldmdbvc	r4!, {r0, r1, r8, r9, ip}^
     a88:	761e6c4c 	ldrvc	r6, [lr], -ip, asr #24
     a8c:	79741103 	ldmdbvc	r4!, {r0, r1, r8, ip}^
     a90:	761e6c4c 	ldrvc	r6, [lr], -ip, asr #24
     a94:	79742c03 	ldmdbvc	r4!, {r0, r1, sl, fp, sp}^
     a98:	761e6c4c 	ldrvc	r6, [lr], -ip, asr #24
     a9c:	79742703 	ldmdbvc	r4!, {r0, r1, r8, r9, sl, sp}^
     aa0:	761e6c4c 	ldrvc	r6, [lr], -ip, asr #24
     aa4:	79741d03 	ldmdbvc	r4!, {r0, r1, r8, sl, fp, ip}^
     aa8:	761e6c4c 	ldrvc	r6, [lr], -ip, asr #24
     aac:	79741003 	ldmdbvc	r4!, {r0, r1, ip}^
     ab0:	761e6c4c 	ldrvc	r6, [lr], -ip, asr #24
     ab4:	79740e03 	ldmdbvc	r4!, {r0, r1, r9, sl, fp}^
     ab8:	761e6c4c 	ldrvc	r6, [lr], -ip, asr #24
     abc:	78742903 	ldmdavc	r4!, {r0, r1, r8, fp, sp}^
     ac0:	761e6c4c 	ldrvc	r6, [lr], -ip, asr #24
     ac4:	78742303 	ldmdavc	r4!, {r0, r1, r8, r9, sp}^
     ac8:	761e6c4c 	ldrvc	r6, [lr], -ip, asr #24
     acc:	78742503 	ldmdavc	r4!, {r0, r1, r8, sl, sp}^
     ad0:	761e6c4c 	ldrvc	r6, [lr], -ip, asr #24
     ad4:	78741403 	ldmdavc	r4!, {r0, r1, sl, ip}^
     ad8:	761e6c4c 	ldrvc	r6, [lr], -ip, asr #24
     adc:	78741203 	ldmdavc	r4!, {r0, r1, r9, ip}^
     ae0:	761e6c4c 	ldrvc	r6, [lr], -ip, asr #24
     ae4:	78742d03 	ldmdavc	r4!, {r0, r1, r8, sl, fp, sp}^
     ae8:	761e6c4c 	ldrvc	r6, [lr], -ip, asr #24
     aec:	78742803 	ldmdavc	r4!, {r0, r1, fp, sp}^
     af0:	761e6c4c 	ldrvc	r6, [lr], -ip, asr #24
     af4:	6a740c03 	bvs	1d03b08 <startup-0x1e2fc4f8>
     af8:	681e6c4c 	ldmdavs	lr, {r2, r3, r6, sl, fp, sp, lr}
     afc:	7402ac03 	strvc	sl, [r2], #-3075	; 0xfffff3fd
     b00:	1e974d94 	mrcne	13, 4, r4, cr7, cr4, {4}
     b04:	661703ae 	ldrvs	r0, [r7], -lr, lsr #7
     b08:	502f2f67 	eorpl	r2, pc, r7, ror #30
     b0c:	3e4c3e59 	mcrcc	14, 2, r3, cr12, cr9, {2}
     b10:	7659404e 	ldrbvc	r4, [r9], -lr, asr #32
     b14:	033d4d5c 	teqeq	sp, #92, 26	; 0x1700
     b18:	7530660a 	ldrvc	r6, [r0, #-1546]!	; 0xfffff9f6
     b1c:	67581103 	ldrbvs	r1, [r8, -r3, lsl #2]
     b20:	4d5c6850 	ldclmi	8, cr6, [ip, #-320]	; 0xfffffec0
     b24:	6611033d 			; <UNDEFINED> instruction: 0x6611033d
     b28:	03044b6c 	movweq	r4, #19308	; 0x4b6c
     b2c:	66679d03 	strbtvs	r9, [r7], -r3, lsl #26
     b30:	3d4b4b40 	vstrcc	d20, [fp, #-256]	; 0xffffff00
     b34:	693d3d3d 	ldmdbvs	sp!, {r0, r2, r3, r4, r5, r8, sl, fp, ip, sp}
     b38:	3d3d3d4b 	ldccc	13, cr3, [sp, #-300]!	; 0xfffffed4
     b3c:	3d4b4b69 	vstrcc	d20, [fp, #-420]	; 0xfffffe5c
     b40:	693d3d3d 	ldmdbvs	sp!, {r0, r2, r3, r4, r5, r8, sl, fp, ip, sp}
     b44:	3d3d3d4b 	ldccc	13, cr3, [sp, #-300]!	; 0xfffffed4
     b48:	3d4b4b69 	vstrcc	d20, [fp, #-420]	; 0xfffffe5c
     b4c:	693d3d3d 	ldmdbvs	sp!, {r0, r2, r3, r4, r5, r8, sl, fp, ip, sp}
     b50:	3d3d3d4b 	ldccc	13, cr3, [sp, #-300]!	; 0xfffffed4
     b54:	3d4b4b69 	vstrcc	d20, [fp, #-420]	; 0xfffffe5c
     b58:	693d3d3d 	ldmdbvs	sp!, {r0, r2, r3, r4, r5, r8, sl, fp, ip, sp}
     b5c:	3d3d3d4b 	ldccc	13, cr3, [sp, #-300]!	; 0xfffffed4
     b60:	3d4b4b69 	vstrcc	d20, [fp, #-420]	; 0xfffffe5c
     b64:	673d3d3d 			; <UNDEFINED> instruction: 0x673d3d3d
     b68:	58030404 	stmdapl	r3, {r2, sl}
     b6c:	592f2e08 	stmdbpl	pc!, {r3, r9, sl, fp, sp}	; <UNPREDICTABLE>
     b70:	683e3e5a 	ldmdavs	lr!, {r1, r3, r4, r6, r9, sl, fp, ip, sp}
     b74:	4bad303e 	blmi	feb4cc74 <GPIO_Ports+0xdeb48ea0>
     b78:	04020059 	streq	r0, [r2], #-89	; 0xffffffa7
     b7c:	06200601 	strteq	r0, [r0], -r1, lsl #12
     b80:	4b2f7659 	blmi	bde4ec <startup-0x1f421b14>
     b84:	2f3d423d 	svccs	0x003d423d
     b88:	002f2f2f 	eoreq	r2, pc, pc, lsr #30
     b8c:	06010402 	streq	r0, [r1], -r2, lsl #8
     b90:	2f5d0620 	svccs	0x005d0620
     b94:	00c93e3e 	sbceq	r3, r9, lr, lsr lr
     b98:	39020402 	stmdbcc	r2, {r1, sl}
     b9c:	01040200 	mrseq	r0, R12_usr
     ba0:	02003c06 	andeq	r3, r0, #1536	; 0x600
     ba4:	3a060204 	bcc	1813bc <startup-0x1fe7ec44>
     ba8:	01040200 	mrseq	r0, R12_usr
     bac:	03063c06 	movweq	r3, #27654	; 0x6c06
     bb0:	2f023c09 	svccs	0x00023c09
     bb4:	3e3e2f13 	mrccc	15, 1, r2, cr14, cr3, {0}
     bb8:	75bbadc9 	ldrvc	sl, [fp, #3529]!	; 0xdc9
     bbc:	00a07575 	adceq	r7, r0, r5, ror r5
     bc0:	03020402 	movweq	r0, #9218	; 0x2402
     bc4:	02003c76 	andeq	r3, r0, #30208	; 0x7600
     bc8:	3c060104 	stfccs	f0, [r6], {4}
     bcc:	02040200 	andeq	r0, r4, #0, 4
     bd0:	02003a06 	andeq	r3, r0, #24576	; 0x6000
     bd4:	3c060104 	stfccs	f0, [r6], {4}
     bd8:	3c100306 	ldccc	3, cr0, [r0], {6}
     bdc:	04020068 	streq	r0, [r2], #-104	; 0xffffff98
     be0:	02003e03 	andeq	r3, r0, #3, 28	; 0x30
     be4:	00f30304 	rscseq	r0, r3, r4, lsl #6
     be8:	39030402 	stmdbcc	r3, {r1, sl}
     bec:	01040200 	mrseq	r0, R12_usr
     bf0:	6c063c06 	stcvs	12, cr3, [r6], {6}
     bf4:	03040200 	movweq	r0, #16896	; 0x4200
     bf8:	0402005a 	streq	r0, [r2], #-90	; 0xffffffa6
     bfc:	0200f303 	andeq	pc, r0, #201326592	; 0xc000000
     c00:	00390304 	eorseq	r0, r9, r4, lsl #6
     c04:	06010402 	streq	r0, [r1], -r2, lsl #8
     c08:	3d41063c 	stclcc	6, cr0, [r1, #-240]	; 0xffffff10
     c0c:	03040200 	movweq	r0, #16896	; 0x4200
     c10:	0402003e 	streq	r0, [r2], #-62	; 0xffffffc2
     c14:	0200f003 	andeq	pc, r0, #3
     c18:	3c060104 	stfccs	f0, [r6], {4}
     c1c:	004b6a06 	subeq	r6, fp, r6, lsl #20
     c20:	3e030402 	cdpcc	4, 0, cr0, cr3, cr2, {0}
     c24:	03040200 	movweq	r0, #16896	; 0x4200
     c28:	040200f0 	streq	r0, [r2], #-240	; 0xffffff10
     c2c:	063c0601 	ldrteq	r0, [ip], -r1, lsl #12
     c30:	a03f5c6c 	eorsge	r5, pc, ip, ror #24
     c34:	84e92108 	strbthi	r2, [r9], #264	; 0x108
     c38:	003ed892 	mlaseq	lr, r2, r8, sp
     c3c:	06010402 	streq	r0, [r1], -r2, lsl #8
     c40:	5a080690 	bpl	202688 <startup-0x1fdfd978>
     c44:	f4162202 			; <UNDEFINED> instruction: 0xf4162202
     c48:	01040200 	mrseq	r0, R12_usr
     c4c:	02009006 	andeq	r9, r0, #6
     c50:	58080204 	stmdapl	r8, {r2, r9}
     c54:	00d79206 	sbcseq	r9, r7, r6, lsl #4
     c58:	03020402 	movweq	r0, #9218	; 0x2402
     c5c:	00900873 	addseq	r0, r0, r3, ror r8
     c60:	06010402 	streq	r0, [r1], -r2, lsl #8
     c64:	0402003c 	streq	r0, [r2], #-60	; 0xffffffc4
     c68:	6f030602 	svcvs	0x00030602
     c6c:	04020074 	streq	r0, [r2], #-116	; 0xffffff8c
     c70:	743c0601 	ldrtvc	r0, [ip], #-1537	; 0xfffff9ff
     c74:	66270306 	strtvs	r0, [r7], -r6, lsl #6
     c78:	923d4b4b 	eorsls	r4, sp, #76800	; 0x12c00
     c7c:	67342f4b 	ldrvs	r2, [r4, -fp, asr #30]!
     c80:	59756759 	ldmdbpl	r5!, {r0, r3, r4, r6, r8, r9, sl, sp, lr}^
     c84:	835967af 	cmphi	r9, #45875200	; 0x2bc0000
     c88:	4ba05959 	blmi	fe8171f4 <GPIO_Ports+0xde813420>
     c8c:	02006786 	andeq	r6, r0, #35127296	; 0x2180000
     c90:	00670104 	rsbeq	r0, r7, r4, lsl #2
     c94:	49010402 	stmdbmi	r1, {r1, sl}
     c98:	4d224922 			; <UNDEFINED> instruction: 0x4d224922
     c9c:	555922ad 	ldrbpl	r2, [r9, #-685]	; 0xfffffd53
     ca0:	01040200 	mrseq	r0, R12_usr
     ca4:	50065806 	andpl	r5, r6, r6, lsl #16
     ca8:	af089fd8 	svcge	0x00089fd8
     cac:	0007024b 	andeq	r0, r7, fp, asr #4
     cb0:	04040101 	streq	r0, [r4], #-257	; 0xfffffeff
     cb4:	00020500 	andeq	r0, r2, r0, lsl #10
     cb8:	03200000 	nopeq	{0}	; <UNPREDICTABLE>
     cbc:	5e13010f 	mufpls	f0, f3, #10.0
     cc0:	01000302 	tsteq	r0, r2, lsl #6
     cc4:	00020101 	andeq	r0, r2, r1, lsl #2
     cc8:	b4000200 	strlt	r0, [r0], #-512	; 0xfffffe00
     ccc:	02000001 	andeq	r0, r0, #1
     cd0:	0d0efb01 	vstreq	d15, [lr, #-4]
     cd4:	01010100 	mrseq	r0, (UNDEF: 17)
     cd8:	00000001 	andeq	r0, r0, r1
     cdc:	01000001 	tsteq	r0, r1
     ce0:	552f3a43 	strpl	r3, [pc, #-2627]!	; 2a5 <startup-0x1ffffd5b>
     ce4:	73726573 	cmnvc	r2, #482344960	; 0x1cc00000
     ce8:	6164412f 	cmnvs	r4, pc, lsr #2
     cec:	4f2f746d 	svcmi	0x002f746d
     cf0:	7244656e 	subvc	r6, r4, #461373440	; 0x1b800000
     cf4:	2f657669 	svccs	0x00657669
     cf8:	756b6f44 	strbvc	r6, [fp, #-3908]!	; 0xfffff0bc
     cfc:	746e656d 	strbtvc	r6, [lr], #-1389	; 0xfffffa93
     d00:	7469472f 	strbtvc	r4, [r9], #-1839	; 0xfffff8d1
     d04:	2f627548 	svccs	0x00627548
     d08:	32544144 	subscc	r4, r4, #68, 2
     d0c:	4c2d3039 	stcmi	0, cr3, [sp], #-228	; 0xffffff1c
     d10:	736d7261 	cmnvc	sp, #268435462	; 0x10000006
     d14:	65747379 	ldrbvs	r7, [r4, #-889]!	; 0xfffffc87
     d18:	6f6b2f6d 	svcvs	0x006b2f6d
     d1c:	696c2f64 	stmdbvs	ip!, {r2, r5, r6, r8, r9, sl, fp, sp}^
     d20:	54532f62 	ldrbpl	r2, [r3], #-3938	; 0xfffff09e
     d24:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
     d28:	696c5f34 	stmdbvs	ip!, {r2, r4, r5, r8, r9, sl, fp, ip, lr}^
     d2c:	54532f62 	ldrbpl	r2, [r3], #-3938	; 0xfffff09e
     d30:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
     d34:	5f787834 	svcpl	0x00787834
     d38:	50647453 	rsbpl	r7, r4, r3, asr r4
     d3c:	70697265 	rsbvc	r7, r9, r5, ror #4
     d40:	72445f68 	subvc	r5, r4, #104, 30	; 0x1a0
     d44:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
     d48:	6372732f 	cmnvs	r2, #-1140850688	; 0xbc000000
     d4c:	5c3a6300 	ldcpl	3, cr6, [sl], #-0
     d50:	61657363 	cmnvs	r5, r3, ror #6
     d54:	635c7070 	cmpvs	ip, #112	; 0x70
     d58:	6c65646f 	cfstrdvs	mvd6, [r5], #-444	; 0xfffffe44
     d5c:	5c657469 	cfstrdpl	mvd7, [r5], #-420	; 0xfffffe5c
     d60:	6c6f6f74 	stclvs	15, cr6, [pc], #-464	; b98 <startup-0x1ffff468>
     d64:	63675c73 	cmnvs	r7, #29440	; 0x7300
     d68:	72612d63 	rsbvc	r2, r1, #6336	; 0x18c0
     d6c:	72615c6d 	rsbvc	r5, r1, #27904	; 0x6d00
     d70:	6f6e2d6d 	svcvs	0x006e2d6d
     d74:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
     d78:	5c696261 	sfmpl	f6, 2, [r9], #-388	; 0xfffffe7c
     d7c:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
     d80:	5c656475 	cfstrdpl	mvd6, [r5], #-468	; 0xfffffe2c
     d84:	6863616d 	stmdavs	r3!, {r0, r2, r3, r5, r6, r8, sp, lr}^
     d88:	00656e69 	rsbeq	r6, r5, r9, ror #28
     d8c:	635c3a63 	cmpvs	ip, #405504	; 0x63000
     d90:	70616573 	rsbvc	r6, r1, r3, ror r5
     d94:	6f635c70 	svcvs	0x00635c70
     d98:	696c6564 	stmdbvs	ip!, {r2, r5, r6, r8, sl, sp, lr}^
     d9c:	745c6574 	ldrbvc	r6, [ip], #-1396	; 0xfffffa8c
     da0:	736c6f6f 	cmnvc	ip, #444	; 0x1bc
     da4:	6363675c 	cmnvs	r3, #92, 14	; 0x1700000
     da8:	6d72612d 	ldfvse	f6, [r2, #-180]!	; 0xffffff4c
     dac:	6d72615c 	ldfvse	f6, [r2, #-368]!	; 0xfffffe90
     db0:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
     db4:	61652d65 	cmnvs	r5, r5, ror #26
     db8:	695c6962 	ldmdbvs	ip, {r1, r5, r6, r8, fp, sp, lr}^
     dbc:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
     dc0:	735c6564 	cmpvc	ip, #100, 10	; 0x19000000
     dc4:	2e007379 	mcrcs	3, 0, r7, cr0, cr9, {3}
     dc8:	696c2f2e 	stmdbvs	ip!, {r1, r2, r3, r5, r8, r9, sl, fp, sp}^
     dcc:	54532f62 	ldrbpl	r2, [r3], #-3938	; 0xfffff09e
     dd0:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
     dd4:	696c5f34 	stmdbvs	ip!, {r2, r4, r5, r8, r9, sl, fp, ip, lr}^
     dd8:	4d432f62 	stclmi	15, cr2, [r3, #-392]	; 0xfffffe78
     ddc:	2f534953 	svccs	0x00534953
     de0:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
     de4:	00656475 	rsbeq	r6, r5, r5, ror r4
     de8:	6c2f2e2e 	stcvs	14, cr2, [pc], #-184	; d38 <startup-0x1ffff2c8>
     dec:	532f6269 			; <UNDEFINED> instruction: 0x532f6269
     df0:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
     df4:	6c5f3446 	cfldrdvs	mvd3, [pc], {70}	; 0x46
     df8:	532f6269 			; <UNDEFINED> instruction: 0x532f6269
     dfc:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
     e00:	78783446 	ldmdavc	r8!, {r1, r2, r6, sl, ip, sp}^
     e04:	6474535f 	ldrbtvs	r5, [r4], #-863	; 0xfffffca1
     e08:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
     e0c:	445f6870 	ldrbmi	r6, [pc], #-2160	; e14 <startup-0x1ffff1ec>
     e10:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
     e14:	6e692f72 	mcrvs	15, 3, r2, cr9, cr2, {3}
     e18:	73000063 	movwvc	r0, #99	; 0x63
     e1c:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
     e20:	78783466 	ldmdavc	r8!, {r1, r2, r5, r6, sl, ip, sp}^
     e24:	676e725f 			; <UNDEFINED> instruction: 0x676e725f
     e28:	0100632e 	tsteq	r0, lr, lsr #6
     e2c:	645f0000 	ldrbvs	r0, [pc], #-0	; e34 <startup-0x1ffff1cc>
     e30:	75616665 	strbvc	r6, [r1, #-1637]!	; 0xfffff99b
     e34:	745f746c 	ldrbvc	r7, [pc], #-1132	; e3c <startup-0x1ffff1c4>
     e38:	73657079 	cmnvc	r5, #121	; 0x79
     e3c:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
     e40:	735f0000 	cmpvc	pc, #0
     e44:	6e696474 	mcrvs	4, 3, r6, cr9, cr4, {3}
     e48:	00682e74 	rsbeq	r2, r8, r4, ror lr
     e4c:	63000003 	movwvs	r0, #3
     e50:	5f65726f 	svcpl	0x0065726f
     e54:	2e346d63 	cdpcs	13, 3, cr6, cr4, cr3, {3}
     e58:	00040068 	andeq	r0, r4, r8, rrx
     e5c:	73797300 	cmnvc	r9, #0, 6
     e60:	5f6d6574 	svcpl	0x006d6574
     e64:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
     e68:	78346632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, sp, lr}
     e6c:	00682e78 	rsbeq	r2, r8, r8, ror lr
     e70:	73000005 	movwvc	r0, #5
     e74:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
     e78:	78783466 	ldmdavc	r8!, {r1, r2, r5, r6, sl, ip, sp}^
     e7c:	0500682e 	streq	r6, [r0, #-2094]	; 0xfffff7d2
     e80:	00000000 	andeq	r0, r0, r0
     e84:	303c0205 	eorscc	r0, ip, r5, lsl #4
     e88:	e3032000 	movw	r2, #12288	; 0x3000
     e8c:	4d310100 	ldfmis	f0, [r1, #-0]
     e90:	034a0903 	movteq	r0, #43267	; 0xa903
     e94:	4d6a3c09 	stclmi	12, cr3, [sl, #-36]!	; 0xffffffdc
     e98:	03681e6d 	cmneq	r8, #1744	; 0x6d0
     e9c:	2f306630 	svccs	0x00306630
     ea0:	6600d803 	strvs	sp, [r0], -r3, lsl #16
     ea4:	1e6d4d6a 	cdpne	13, 6, cr4, cr13, cr10, {3}
     ea8:	740c0368 	strvc	r0, [ip], #-872	; 0xfffffc98
     eac:	5d694f67 	stclpl	15, cr4, [r9, #-412]!	; 0xfffffe64
     eb0:	0f033d4d 	svceq	0x00033d4d
     eb4:	03676a66 	cmneq	r7, #417792	; 0x66000
     eb8:	4f67660b 	svcmi	0x0067660b
     ebc:	3d4d5d69 	stclcc	13, cr5, [sp, #-420]	; 0xfffffe5c
     ec0:	6b660c03 	blvs	1983ed4 <startup-0x1e67c12c>
     ec4:	00060267 	andeq	r0, r6, r7, ror #4
     ec8:	01e70101 	mvneq	r0, r1, lsl #2
     ecc:	00020000 	andeq	r0, r2, r0
     ed0:	00000199 	muleq	r0, r9, r1
     ed4:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
     ed8:	0101000d 	tsteq	r1, sp
     edc:	00000101 	andeq	r0, r0, r1, lsl #2
     ee0:	00000100 	andeq	r0, r0, r0, lsl #2
     ee4:	2f3a4301 	svccs	0x003a4301
     ee8:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
     eec:	64412f73 	strbvs	r2, [r1], #-3955	; 0xfffff08d
     ef0:	2f746d61 	svccs	0x00746d61
     ef4:	44656e4f 	strbtmi	r6, [r5], #-3663	; 0xfffff1b1
     ef8:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
     efc:	6b6f442f 	blvs	1bd1fc0 <startup-0x1e42e040>
     f00:	6e656d75 	mcrvs	13, 3, r6, cr5, cr5, {3}
     f04:	69472f74 	stmdbvs	r7, {r2, r4, r5, r6, r8, r9, sl, fp, sp}^
     f08:	62754874 	rsbsvs	r4, r5, #116, 16	; 0x740000
     f0c:	5441442f 	strbpl	r4, [r1], #-1071	; 0xfffffbd1
     f10:	2d303932 			; <UNDEFINED> instruction: 0x2d303932
     f14:	6d72614c 	ldfvse	f6, [r2, #-304]!	; 0xfffffed0
     f18:	74737973 	ldrbtvc	r7, [r3], #-2419	; 0xfffff68d
     f1c:	6b2f6d65 	blvs	bdc4b8 <startup-0x1f423b48>
     f20:	6c2f646f 	cfstrsvs	mvf6, [pc], #-444	; d6c <startup-0x1ffff294>
     f24:	63006269 	movwvs	r6, #617	; 0x269
     f28:	73635c3a 	cmnvc	r3, #14848	; 0x3a00
     f2c:	70706165 	rsbsvc	r6, r0, r5, ror #2
     f30:	646f635c 	strbtvs	r6, [pc], #-860	; f38 <startup-0x1ffff0c8>
     f34:	74696c65 	strbtvc	r6, [r9], #-3173	; 0xfffff39b
     f38:	6f745c65 	svcvs	0x00745c65
     f3c:	5c736c6f 	ldclpl	12, cr6, [r3], #-444	; 0xfffffe44
     f40:	2d636367 	stclcs	3, cr6, [r3, #-412]!	; 0xfffffe64
     f44:	5c6d7261 	sfmpl	f7, 2, [sp], #-388	; 0xfffffe7c
     f48:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
     f4c:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
     f50:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
     f54:	6e695c69 	cdpvs	12, 6, cr5, cr9, cr9, {3}
     f58:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
     f5c:	616d5c65 	cmnvs	sp, r5, ror #24
     f60:	6e696863 	cdpvs	8, 6, cr6, cr9, cr3, {3}
     f64:	3a630065 	bcc	18c1100 <startup-0x1e73ef00>
     f68:	6573635c 	ldrbvs	r6, [r3, #-860]!	; 0xfffffca4
     f6c:	5c707061 	ldclpl	0, cr7, [r0], #-388	; 0xfffffe7c
     f70:	65646f63 	strbvs	r6, [r4, #-3939]!	; 0xfffff09d
     f74:	6574696c 	ldrbvs	r6, [r4, #-2412]!	; 0xfffff694
     f78:	6f6f745c 	svcvs	0x006f745c
     f7c:	675c736c 	ldrbvs	r7, [ip, -ip, ror #6]
     f80:	612d6363 			; <UNDEFINED> instruction: 0x612d6363
     f84:	615c6d72 	cmpvs	ip, r2, ror sp
     f88:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
     f8c:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
     f90:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
     f94:	636e695c 	cmnvs	lr, #92, 18	; 0x170000
     f98:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
     f9c:	7379735c 	cmnvc	r9, #92, 6	; 0x70000001
     fa0:	2f2e2e00 	svccs	0x002e2e00
     fa4:	2f62696c 	svccs	0x0062696c
     fa8:	334d5453 	movtcc	r5, #54355	; 0xd453
     fac:	5f344632 	svcpl	0x00344632
     fb0:	2f62696c 	svccs	0x0062696c
     fb4:	49534d43 	ldmdbmi	r3, {r0, r1, r6, r8, sl, fp, lr}^
     fb8:	6e692f53 	mcrvs	15, 3, r2, cr9, cr3, {2}
     fbc:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
     fc0:	2e2e0065 	cdpcs	0, 2, cr0, cr14, cr5, {3}
     fc4:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
     fc8:	4d54532f 	ldclmi	3, cr5, [r4, #-188]	; 0xffffff44
     fcc:	34463233 	strbcc	r3, [r6], #-563	; 0xfffffdcd
     fd0:	62696c5f 	rsbvs	r6, r9, #24320	; 0x5f00
     fd4:	4d54532f 	ldclmi	3, cr5, [r4, #-188]	; 0xffffff44
     fd8:	34463233 	strbcc	r3, [r6], #-563	; 0xfffffdcd
     fdc:	535f7878 	cmppl	pc, #120, 16	; 0x780000
     fe0:	65506474 	ldrbvs	r6, [r0, #-1140]	; 0xfffffb8c
     fe4:	68706972 	ldmdavs	r0!, {r1, r4, r5, r6, r8, fp, sp, lr}^
     fe8:	6972445f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, sl, lr}^
     fec:	2f726576 	svccs	0x00726576
     ff0:	00636e69 	rsbeq	r6, r3, r9, ror #28
     ff4:	6c2f2e2e 	stcvs	14, cr2, [pc], #-184	; f44 <startup-0x1ffff0bc>
     ff8:	00006269 	andeq	r6, r0, r9, ror #4
     ffc:	454e4143 	strbmi	r4, [lr, #-323]	; 0xfffffebd
    1000:	646f636e 	strbtvs	r6, [pc], #-878	; 1008 <startup-0x1fffeff8>
    1004:	00632e65 	rsbeq	r2, r3, r5, ror #28
    1008:	5f000001 	svcpl	0x00000001
    100c:	61666564 	cmnvs	r6, r4, ror #10
    1010:	5f746c75 	svcpl	0x00746c75
    1014:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
    1018:	00682e73 	rsbeq	r2, r8, r3, ror lr
    101c:	5f000002 	svcpl	0x00000002
    1020:	69647473 	stmdbvs	r4!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
    1024:	682e746e 	stmdavs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
    1028:	00000300 	andeq	r0, r0, r0, lsl #6
    102c:	65726f63 	ldrbvs	r6, [r2, #-3939]!	; 0xfffff09d
    1030:	346d635f 	strbtcc	r6, [sp], #-863	; 0xfffffca1
    1034:	0400682e 	streq	r6, [r0], #-2094	; 0xfffff7d2
    1038:	79730000 	ldmdbvc	r3!, {}^	; <UNPREDICTABLE>
    103c:	6d657473 	cfstrdvs	mvd7, [r5, #-460]!	; 0xfffffe34
    1040:	6d74735f 	ldclvs	3, cr7, [r4, #-380]!	; 0xfffffe84
    1044:	34663233 	strbtcc	r3, [r6], #-563	; 0xfffffdcd
    1048:	682e7878 	stmdavs	lr!, {r3, r4, r5, r6, fp, ip, sp, lr}
    104c:	00000500 	andeq	r0, r0, r0, lsl #10
    1050:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
    1054:	78346632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, sp, lr}
    1058:	61635f78 	smcvs	13816	; 0x35f8
    105c:	00682e6e 	rsbeq	r2, r8, lr, ror #28
    1060:	43000005 	movwmi	r0, #5
    1064:	682e4e41 	stmdavs	lr!, {r0, r6, r9, sl, fp, lr}
    1068:	00000600 	andeq	r0, r0, r0, lsl #12
    106c:	02050000 	andeq	r0, r5, #0
    1070:	200031b0 			; <UNDEFINED> instruction: 0x200031b0
    1074:	0200f319 	andeq	pc, r0, #1677721600	; 0x64000000
    1078:	66060104 	strvs	r0, [r6], -r4, lsl #2
    107c:	3f314b06 	svccc	0x00314b06
    1080:	5af3912f 	bpl	ffce5544 <GPIO_Ports+0xdfce1770>
    1084:	755c4b3f 	ldrbvc	r4, [ip, #-2879]	; 0xfffff4c1
    1088:	02006869 	andeq	r6, r0, #6881280	; 0x690000
    108c:	03210104 			; <UNDEFINED> instruction: 0x03210104
    1090:	3fad4a09 	svccc	0x00ad4a09
    1094:	5c59912f 	ldfplp	f1, [r9], {47}	; 0x2f
    1098:	4b3f3d3e 	blmi	fd0598 <startup-0x1f02fa68>
    109c:	21685959 	cmncs	r8, r9, asr r9
    10a0:	2f3f754c 	svccs	0x003f754c
    10a4:	3e5a5991 			; <UNDEFINED> instruction: 0x3e5a5991
    10a8:	5a4b3f3d 	bpl	12d0da4 <startup-0x1ed2f25c>
    10ac:	4b3f3e59 	blmi	fd0a18 <startup-0x1f02f5e8>
    10b0:	01000502 	tsteq	r0, r2, lsl #10
    10b4:	00014e01 	andeq	r4, r1, r1, lsl #28
    10b8:	08000200 	stmdaeq	r0, {r9}
    10bc:	02000001 	andeq	r0, r0, #1
    10c0:	0d0efb01 	vstreq	d15, [lr, #-4]
    10c4:	01010100 	mrseq	r0, (UNDEF: 17)
    10c8:	00000001 	andeq	r0, r0, r1
    10cc:	01000001 	tsteq	r0, r1
    10d0:	552f3a43 	strpl	r3, [pc, #-2627]!	; 695 <startup-0x1ffff96b>
    10d4:	73726573 	cmnvc	r2, #482344960	; 0x1cc00000
    10d8:	6164412f 	cmnvs	r4, pc, lsr #2
    10dc:	4f2f746d 	svcmi	0x002f746d
    10e0:	7244656e 	subvc	r6, r4, #461373440	; 0x1b800000
    10e4:	2f657669 	svccs	0x00657669
    10e8:	756b6f44 	strbvc	r6, [fp, #-3908]!	; 0xfffff0bc
    10ec:	746e656d 	strbtvc	r6, [lr], #-1389	; 0xfffffa93
    10f0:	7469472f 	strbtvc	r4, [r9], #-1839	; 0xfffff8d1
    10f4:	2f627548 	svccs	0x00627548
    10f8:	32544144 	subscc	r4, r4, #68, 2
    10fc:	4c2d3039 	stcmi	0, cr3, [sp], #-228	; 0xffffff1c
    1100:	736d7261 	cmnvc	sp, #268435462	; 0x10000006
    1104:	65747379 	ldrbvs	r7, [r4, #-889]!	; 0xfffffc87
    1108:	6f6b2f6d 	svcvs	0x006b2f6d
    110c:	696c2f64 	stmdbvs	ip!, {r2, r5, r6, r8, r9, sl, fp, sp}^
    1110:	3a630062 	bcc	18c12a0 <startup-0x1e73ed60>
    1114:	6573635c 	ldrbvs	r6, [r3, #-860]!	; 0xfffffca4
    1118:	5c707061 	ldclpl	0, cr7, [r0], #-388	; 0xfffffe7c
    111c:	65646f63 	strbvs	r6, [r4, #-3939]!	; 0xfffff09d
    1120:	6574696c 	ldrbvs	r6, [r4, #-2412]!	; 0xfffff694
    1124:	6f6f745c 	svcvs	0x006f745c
    1128:	675c736c 	ldrbvs	r7, [ip, -ip, ror #6]
    112c:	612d6363 			; <UNDEFINED> instruction: 0x612d6363
    1130:	615c6d72 	cmpvs	ip, r2, ror sp
    1134:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    1138:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    113c:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    1140:	636e695c 	cmnvs	lr, #92, 18	; 0x170000
    1144:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    1148:	63616d5c 	cmnvs	r1, #92, 26	; 0x1700
    114c:	656e6968 	strbvs	r6, [lr, #-2408]!	; 0xfffff698
    1150:	5c3a6300 	ldcpl	3, cr6, [sl], #-0
    1154:	61657363 	cmnvs	r5, r3, ror #6
    1158:	635c7070 	cmpvs	ip, #112	; 0x70
    115c:	6c65646f 	cfstrdvs	mvd6, [r5], #-444	; 0xfffffe44
    1160:	5c657469 	cfstrdpl	mvd7, [r5], #-420	; 0xfffffe5c
    1164:	6c6f6f74 	stclvs	15, cr6, [pc], #-464	; f9c <startup-0x1ffff064>
    1168:	63675c73 	cmnvs	r7, #29440	; 0x7300
    116c:	72612d63 	rsbvc	r2, r1, #6336	; 0x18c0
    1170:	72615c6d 	rsbvc	r5, r1, #27904	; 0x6d00
    1174:	6f6e2d6d 	svcvs	0x006e2d6d
    1178:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    117c:	5c696261 	sfmpl	f6, 2, [r9], #-388	; 0xfffffe7c
    1180:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    1184:	5c656475 	cfstrdpl	mvd6, [r5], #-468	; 0xfffffe2c
    1188:	00737973 	rsbseq	r7, r3, r3, ror r9
    118c:	66756200 	ldrbtvs	r6, [r5], -r0, lsl #4
    1190:	2e726566 	cdpcs	5, 7, cr6, cr2, cr6, {3}
    1194:	00010063 	andeq	r0, r1, r3, rrx
    1198:	65645f00 	strbvs	r5, [r4, #-3840]!	; 0xfffff100
    119c:	6c756166 	ldfvse	f6, [r5], #-408	; 0xfffffe68
    11a0:	79745f74 	ldmdbvc	r4!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    11a4:	2e736570 	mrccs	5, 3, r6, cr3, cr0, {3}
    11a8:	00020068 	andeq	r0, r2, r8, rrx
    11ac:	74735f00 	ldrbtvc	r5, [r3], #-3840	; 0xfffff100
    11b0:	746e6964 	strbtvc	r6, [lr], #-2404	; 0xfffff69c
    11b4:	0300682e 	movweq	r6, #2094	; 0x82e
    11b8:	75620000 	strbvc	r0, [r2, #-0]!
    11bc:	72656666 	rsbvc	r6, r5, #106954752	; 0x6600000
    11c0:	0100682e 	tsteq	r0, lr, lsr #16
    11c4:	00000000 	andeq	r0, r0, r0
    11c8:	338a0205 	orrcc	r0, sl, #1342177280	; 0x50000000
    11cc:	4b152000 	blmi	5491d4 <startup-0x1fab6e2c>
    11d0:	4e4b4b4b 	vmlsmi.f64	d20, d11, d11
    11d4:	c9325976 	ldmdbgt	r2!, {r1, r2, r4, r5, r6, r8, fp, ip, lr}
    11d8:	214c5985 	smlalbbcs	r5, ip, r5, r9
    11dc:	02007a4e 	andeq	r7, r0, #319488	; 0x4e000
    11e0:	58060104 	stmdapl	r6, {r2, r8}
    11e4:	02040200 	andeq	r0, r4, #0, 4
    11e8:	04020066 	streq	r0, [r2], #-102	; 0xffffff9a
    11ec:	02002004 	andeq	r2, r0, #4
    11f0:	3f060404 	svccc	0x00060404
    11f4:	04040200 	streq	r0, [r4], #-512	; 0xfffffe00
    11f8:	595a4e67 	ldmdbpl	sl, {r0, r1, r2, r5, r6, r9, sl, fp, lr}^
    11fc:	5985c932 	stmibpl	r5, {r1, r4, r5, r8, fp, lr, pc}
    1200:	0402214c 	streq	r2, [r2], #-332	; 0xfffffeb4
    1204:	fa010100 	blx	4160c <startup-0x1ffbe9f4>
    1208:	02000001 	andeq	r0, r0, #1
    120c:	0001b500 	andeq	fp, r1, r0, lsl #10
    1210:	fb010200 	blx	41a1a <startup-0x1ffbe5e6>
    1214:	01000d0e 	tsteq	r0, lr, lsl #26
    1218:	00010101 	andeq	r0, r1, r1, lsl #2
    121c:	00010000 	andeq	r0, r1, r0
    1220:	3a430100 	bcc	10c1628 <startup-0x1ef3e9d8>
    1224:	6573552f 	ldrbvs	r5, [r3, #-1327]!	; 0xfffffad1
    1228:	412f7372 			; <UNDEFINED> instruction: 0x412f7372
    122c:	746d6164 	strbtvc	r6, [sp], #-356	; 0xfffffe9c
    1230:	656e4f2f 	strbvs	r4, [lr, #-3887]!	; 0xfffff0d1
    1234:	76697244 	strbtvc	r7, [r9], -r4, asr #4
    1238:	6f442f65 	svcvs	0x00442f65
    123c:	656d756b 	strbvs	r7, [sp, #-1387]!	; 0xfffffa95
    1240:	472f746e 	strmi	r7, [pc, -lr, ror #8]!
    1244:	75487469 	strbvc	r7, [r8, #-1129]	; 0xfffffb97
    1248:	41442f62 	cmpmi	r4, r2, ror #30
    124c:	30393254 	eorscc	r3, r9, r4, asr r2
    1250:	72614c2d 	rsbvc	r4, r1, #11520	; 0x2d00
    1254:	7379736d 	cmnvc	r9, #-1275068415	; 0xb4000001
    1258:	2f6d6574 	svccs	0x006d6574
    125c:	2f646f6b 	svccs	0x00646f6b
    1260:	2f62696c 	svccs	0x0062696c
    1264:	334d5453 	movtcc	r5, #54355	; 0xd453
    1268:	5f344632 	svcpl	0x00344632
    126c:	2f62696c 	svccs	0x0062696c
    1270:	334d5453 	movtcc	r5, #54355	; 0xd453
    1274:	78344632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, lr}
    1278:	74535f78 	ldrbvc	r5, [r3], #-3960	; 0xfffff088
    127c:	72655064 	rsbvc	r5, r5, #100	; 0x64
    1280:	5f687069 	svcpl	0x00687069
    1284:	76697244 	strbtvc	r7, [r9], -r4, asr #4
    1288:	732f7265 			; <UNDEFINED> instruction: 0x732f7265
    128c:	63006372 	movwvs	r6, #882	; 0x372
    1290:	73635c3a 	cmnvc	r3, #14848	; 0x3a00
    1294:	70706165 	rsbsvc	r6, r0, r5, ror #2
    1298:	646f635c 	strbtvs	r6, [pc], #-860	; 12a0 <startup-0x1fffed60>
    129c:	74696c65 	strbtvc	r6, [r9], #-3173	; 0xfffff39b
    12a0:	6f745c65 	svcvs	0x00745c65
    12a4:	5c736c6f 	ldclpl	12, cr6, [r3], #-444	; 0xfffffe44
    12a8:	2d636367 	stclcs	3, cr6, [r3, #-412]!	; 0xfffffe64
    12ac:	5c6d7261 	sfmpl	f7, 2, [sp], #-388	; 0xfffffe7c
    12b0:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    12b4:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    12b8:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    12bc:	6e695c69 	cdpvs	12, 6, cr5, cr9, cr9, {3}
    12c0:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    12c4:	616d5c65 	cmnvs	sp, r5, ror #24
    12c8:	6e696863 	cdpvs	8, 6, cr6, cr9, cr3, {3}
    12cc:	3a630065 	bcc	18c1468 <startup-0x1e73eb98>
    12d0:	6573635c 	ldrbvs	r6, [r3, #-860]!	; 0xfffffca4
    12d4:	5c707061 	ldclpl	0, cr7, [r0], #-388	; 0xfffffe7c
    12d8:	65646f63 	strbvs	r6, [r4, #-3939]!	; 0xfffff09d
    12dc:	6574696c 	ldrbvs	r6, [r4, #-2412]!	; 0xfffff694
    12e0:	6f6f745c 	svcvs	0x006f745c
    12e4:	675c736c 	ldrbvs	r7, [ip, -ip, ror #6]
    12e8:	612d6363 			; <UNDEFINED> instruction: 0x612d6363
    12ec:	615c6d72 	cmpvs	ip, r2, ror sp
    12f0:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    12f4:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    12f8:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    12fc:	636e695c 	cmnvs	lr, #92, 18	; 0x170000
    1300:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    1304:	7379735c 	cmnvc	r9, #92, 6	; 0x70000001
    1308:	2f2e2e00 	svccs	0x002e2e00
    130c:	2f62696c 	svccs	0x0062696c
    1310:	334d5453 	movtcc	r5, #54355	; 0xd453
    1314:	5f344632 	svcpl	0x00344632
    1318:	2f62696c 	svccs	0x0062696c
    131c:	49534d43 	ldmdbmi	r3, {r0, r1, r6, r8, sl, fp, lr}^
    1320:	6e692f53 	mcrvs	15, 3, r2, cr9, cr3, {2}
    1324:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    1328:	2e2e0065 	cdpcs	0, 2, cr0, cr14, cr5, {3}
    132c:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    1330:	4d54532f 	ldclmi	3, cr5, [r4, #-188]	; 0xffffff44
    1334:	34463233 	strbcc	r3, [r6], #-563	; 0xfffffdcd
    1338:	62696c5f 	rsbvs	r6, r9, #24320	; 0x5f00
    133c:	4d54532f 	ldclmi	3, cr5, [r4, #-188]	; 0xffffff44
    1340:	34463233 	strbcc	r3, [r6], #-563	; 0xfffffdcd
    1344:	535f7878 	cmppl	pc, #120, 16	; 0x780000
    1348:	65506474 	ldrbvs	r6, [r0, #-1140]	; 0xfffffb8c
    134c:	68706972 	ldmdavs	r0!, {r1, r4, r5, r6, r8, fp, sp, lr}^
    1350:	6972445f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, sl, lr}^
    1354:	2f726576 	svccs	0x00726576
    1358:	00636e69 	rsbeq	r6, r3, r9, ror #28
    135c:	73696d00 	cmnvc	r9, #0, 26
    1360:	00632e63 	rsbeq	r2, r3, r3, ror #28
    1364:	5f000001 	svcpl	0x00000001
    1368:	61666564 	cmnvs	r6, r4, ror #10
    136c:	5f746c75 	svcpl	0x00746c75
    1370:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
    1374:	00682e73 	rsbeq	r2, r8, r3, ror lr
    1378:	5f000002 	svcpl	0x00000002
    137c:	69647473 	stmdbvs	r4!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
    1380:	682e746e 	stmdavs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
    1384:	00000300 	andeq	r0, r0, r0, lsl #6
    1388:	65726f63 	ldrbvs	r6, [r2, #-3939]!	; 0xfffff09d
    138c:	346d635f 	strbtcc	r6, [sp], #-863	; 0xfffffca1
    1390:	0400682e 	streq	r6, [r0], #-2094	; 0xfffff7d2
    1394:	79730000 	ldmdbvc	r3!, {}^	; <UNPREDICTABLE>
    1398:	6d657473 	cfstrdvs	mvd7, [r5, #-460]!	; 0xfffffe34
    139c:	6d74735f 	ldclvs	3, cr7, [r4, #-380]!	; 0xfffffe84
    13a0:	34663233 	strbtcc	r3, [r6], #-563	; 0xfffffdcd
    13a4:	682e7878 	stmdavs	lr!, {r3, r4, r5, r6, fp, ip, sp, lr}
    13a8:	00000500 	andeq	r0, r0, r0, lsl #10
    13ac:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
    13b0:	78346632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, sp, lr}
    13b4:	00682e78 	rsbeq	r2, r8, r8, ror lr
    13b8:	6d000005 	stcvs	0, cr0, [r0, #-20]	; 0xffffffec
    13bc:	2e637369 	cdpcs	3, 6, cr7, cr3, cr9, {3}
    13c0:	00050068 	andeq	r0, r5, r8, rrx
    13c4:	05000000 	streq	r0, [r0, #-0]
    13c8:	0034b402 	eorseq	fp, r4, r2, lsl #8
    13cc:	00f60320 	rscseq	r0, r6, r0, lsr #6
    13d0:	03594f01 	cmpeq	r9, #1, 30
    13d4:	c14b900c 	cmpgt	fp, ip
    13d8:	92759f4d 	rsbsls	r9, r5, #308	; 0x134
    13dc:	b05aae91 			; <UNDEFINED> instruction: 0xb05aae91
    13e0:	032d6757 			; <UNDEFINED> instruction: 0x032d6757
    13e4:	571e2e09 	ldrpl	r2, [lr, -r9, lsl #28]
    13e8:	034d2d67 	movteq	r2, #56679	; 0xdd67
    13ec:	835d900c 	cmphi	sp, #12
    13f0:	95900d03 	ldrls	r0, [r0, #3331]	; 0xd03
    13f4:	841e7a4c 	ldrhi	r7, [lr], #-2636	; 0xfffff5b4
    13f8:	4d740b03 	fldmdbxmi	r4!, {d16}	;@ Deprecated
    13fc:	681e6c3e 	ldmdavs	lr, {r1, r2, r3, r4, r5, sl, fp, sp, lr}
    1400:	01000602 	tsteq	r0, r2, lsl #12
    1404:	0002b501 	andeq	fp, r2, r1, lsl #10
    1408:	c9000200 	stmdbgt	r0, {r9}
    140c:	02000001 	andeq	r0, r0, #1
    1410:	0d0efb01 	vstreq	d15, [lr, #-4]
    1414:	01010100 	mrseq	r0, (UNDEF: 17)
    1418:	00000001 	andeq	r0, r0, r1
    141c:	01000001 	tsteq	r0, r1
    1420:	552f3a43 	strpl	r3, [pc, #-2627]!	; 9e5 <startup-0x1ffff61b>
    1424:	73726573 	cmnvc	r2, #482344960	; 0x1cc00000
    1428:	6164412f 	cmnvs	r4, pc, lsr #2
    142c:	4f2f746d 	svcmi	0x002f746d
    1430:	7244656e 	subvc	r6, r4, #461373440	; 0x1b800000
    1434:	2f657669 	svccs	0x00657669
    1438:	756b6f44 	strbvc	r6, [fp, #-3908]!	; 0xfffff0bc
    143c:	746e656d 	strbtvc	r6, [lr], #-1389	; 0xfffffa93
    1440:	7469472f 	strbtvc	r4, [r9], #-1839	; 0xfffff8d1
    1444:	2f627548 	svccs	0x00627548
    1448:	32544144 	subscc	r4, r4, #68, 2
    144c:	4c2d3039 	stcmi	0, cr3, [sp], #-228	; 0xffffff1c
    1450:	736d7261 	cmnvc	sp, #268435462	; 0x10000006
    1454:	65747379 	ldrbvs	r7, [r4, #-889]!	; 0xfffffc87
    1458:	6f6b2f6d 	svcvs	0x006b2f6d
    145c:	696c2f64 	stmdbvs	ip!, {r2, r5, r6, r8, r9, sl, fp, sp}^
    1460:	54532f62 	ldrbpl	r2, [r3], #-3938	; 0xfffff09e
    1464:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
    1468:	696c5f34 	stmdbvs	ip!, {r2, r4, r5, r8, r9, sl, fp, ip, lr}^
    146c:	54532f62 	ldrbpl	r2, [r3], #-3938	; 0xfffff09e
    1470:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
    1474:	5f787834 	svcpl	0x00787834
    1478:	50647453 	rsbpl	r7, r4, r3, asr r4
    147c:	70697265 	rsbvc	r7, r9, r5, ror #4
    1480:	72445f68 	subvc	r5, r4, #104, 30	; 0x1a0
    1484:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
    1488:	6372732f 	cmnvs	r2, #-1140850688	; 0xbc000000
    148c:	5c3a6300 	ldcpl	3, cr6, [sl], #-0
    1490:	61657363 	cmnvs	r5, r3, ror #6
    1494:	635c7070 	cmpvs	ip, #112	; 0x70
    1498:	6c65646f 	cfstrdvs	mvd6, [r5], #-444	; 0xfffffe44
    149c:	5c657469 	cfstrdpl	mvd7, [r5], #-420	; 0xfffffe5c
    14a0:	6c6f6f74 	stclvs	15, cr6, [pc], #-464	; 12d8 <startup-0x1fffed28>
    14a4:	63675c73 	cmnvs	r7, #29440	; 0x7300
    14a8:	72612d63 	rsbvc	r2, r1, #6336	; 0x18c0
    14ac:	72615c6d 	rsbvc	r5, r1, #27904	; 0x6d00
    14b0:	6f6e2d6d 	svcvs	0x006e2d6d
    14b4:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    14b8:	5c696261 	sfmpl	f6, 2, [r9], #-388	; 0xfffffe7c
    14bc:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    14c0:	5c656475 	cfstrdpl	mvd6, [r5], #-468	; 0xfffffe2c
    14c4:	6863616d 	stmdavs	r3!, {r0, r2, r3, r5, r6, r8, sp, lr}^
    14c8:	00656e69 	rsbeq	r6, r5, r9, ror #28
    14cc:	635c3a63 	cmpvs	ip, #405504	; 0x63000
    14d0:	70616573 	rsbvc	r6, r1, r3, ror r5
    14d4:	6f635c70 	svcvs	0x00635c70
    14d8:	696c6564 	stmdbvs	ip!, {r2, r5, r6, r8, sl, sp, lr}^
    14dc:	745c6574 	ldrbvc	r6, [ip], #-1396	; 0xfffffa8c
    14e0:	736c6f6f 	cmnvc	ip, #444	; 0x1bc
    14e4:	6363675c 	cmnvs	r3, #92, 14	; 0x1700000
    14e8:	6d72612d 	ldfvse	f6, [r2, #-180]!	; 0xffffff4c
    14ec:	6d72615c 	ldfvse	f6, [r2, #-368]!	; 0xfffffe90
    14f0:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    14f4:	61652d65 	cmnvs	r5, r5, ror #26
    14f8:	695c6962 	ldmdbvs	ip, {r1, r5, r6, r8, fp, sp, lr}^
    14fc:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    1500:	735c6564 	cmpvc	ip, #100, 10	; 0x19000000
    1504:	2e007379 	mcrcs	3, 0, r7, cr0, cr9, {3}
    1508:	696c2f2e 	stmdbvs	ip!, {r1, r2, r3, r5, r8, r9, sl, fp, sp}^
    150c:	54532f62 	ldrbpl	r2, [r3], #-3938	; 0xfffff09e
    1510:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
    1514:	696c5f34 	stmdbvs	ip!, {r2, r4, r5, r8, r9, sl, fp, ip, lr}^
    1518:	4d432f62 	stclmi	15, cr2, [r3, #-392]	; 0xfffffe78
    151c:	2f534953 	svccs	0x00534953
    1520:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    1524:	00656475 	rsbeq	r6, r5, r5, ror r4
    1528:	6c2f2e2e 	stcvs	14, cr2, [pc], #-184	; 1478 <startup-0x1fffeb88>
    152c:	532f6269 			; <UNDEFINED> instruction: 0x532f6269
    1530:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
    1534:	6c5f3446 	cfldrdvs	mvd3, [pc], {70}	; 0x46
    1538:	532f6269 			; <UNDEFINED> instruction: 0x532f6269
    153c:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
    1540:	78783446 	ldmdavc	r8!, {r1, r2, r6, sl, ip, sp}^
    1544:	6474535f 	ldrbtvs	r5, [r4], #-863	; 0xfffffca1
    1548:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
    154c:	445f6870 	ldrbmi	r6, [pc], #-2160	; 1554 <startup-0x1fffeaac>
    1550:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
    1554:	6e692f72 	mcrvs	15, 3, r2, cr9, cr2, {3}
    1558:	73000063 	movwvc	r0, #99	; 0x63
    155c:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
    1560:	78783466 	ldmdavc	r8!, {r1, r2, r5, r6, sl, ip, sp}^
    1564:	6970675f 	ldmdbvs	r0!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, sp, lr}^
    1568:	00632e6f 	rsbeq	r2, r3, pc, ror #28
    156c:	5f000001 	svcpl	0x00000001
    1570:	61666564 	cmnvs	r6, r4, ror #10
    1574:	5f746c75 	svcpl	0x00746c75
    1578:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
    157c:	00682e73 	rsbeq	r2, r8, r3, ror lr
    1580:	5f000002 	svcpl	0x00000002
    1584:	69647473 	stmdbvs	r4!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
    1588:	682e746e 	stmdavs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
    158c:	00000300 	andeq	r0, r0, r0, lsl #6
    1590:	65726f63 	ldrbvs	r6, [r2, #-3939]!	; 0xfffff09d
    1594:	346d635f 	strbtcc	r6, [sp], #-863	; 0xfffffca1
    1598:	0400682e 	streq	r6, [r0], #-2094	; 0xfffff7d2
    159c:	79730000 	ldmdbvc	r3!, {}^	; <UNPREDICTABLE>
    15a0:	6d657473 	cfstrdvs	mvd7, [r5, #-460]!	; 0xfffffe34
    15a4:	6d74735f 	ldclvs	3, cr7, [r4, #-380]!	; 0xfffffe84
    15a8:	34663233 	strbtcc	r3, [r6], #-563	; 0xfffffdcd
    15ac:	682e7878 	stmdavs	lr!, {r3, r4, r5, r6, fp, ip, sp, lr}
    15b0:	00000500 	andeq	r0, r0, r0, lsl #10
    15b4:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
    15b8:	78346632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, sp, lr}
    15bc:	00682e78 	rsbeq	r2, r8, r8, ror lr
    15c0:	73000005 	movwvc	r0, #5
    15c4:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
    15c8:	78783466 	ldmdavc	r8!, {r1, r2, r5, r6, sl, ip, sp}^
    15cc:	6970675f 	ldmdbvs	r0!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, sp, lr}^
    15d0:	00682e6f 	rsbeq	r2, r8, pc, ror #28
    15d4:	00000005 	andeq	r0, r0, r5
    15d8:	78020500 	stmdavc	r2, {r8, sl}
    15dc:	03200036 			; <UNDEFINED> instruction: 0x03200036
    15e0:	4e0100ff 	mcrmi	0, 0, r0, cr1, cr15, {7}
    15e4:	38034b4c 	stmdacc	r3, {r2, r3, r6, r8, r9, fp, lr}
    15e8:	204a034a 	subcs	r0, sl, sl, asr #6
    15ec:	33034b4c 	movwcc	r4, #15180	; 0x3b4c
    15f0:	204f034a 	subcs	r0, pc, sl, asr #6
    15f4:	2e034b4c 	vmlscs.f64	d4, d3, d12
    15f8:	2054034a 	subscs	r0, r4, sl, asr #6
    15fc:	29034b4c 	stmdbcs	r3, {r2, r3, r6, r8, r9, fp, lr}
    1600:	2059034a 	subscs	r0, r9, sl, asr #6
    1604:	24034b4c 	strcs	r4, [r3], #-2892	; 0xfffff4b4
    1608:	205e034a 	subscs	r0, lr, sl, asr #6
    160c:	1f034b4c 	svcne	0x00034b4c
    1610:	2063034a 	rsbcs	r0, r3, sl, asr #6
    1614:	1a034b4c 	bne	d434c <startup-0x1ff2bcb4>
    1618:	2068034a 	rsbcs	r0, r8, sl, asr #6
    161c:	15034b4c 	strne	r4, [r3, #-2892]	; 0xfffff4b4
    1620:	206e034a 	rsbcs	r0, lr, sl, asr #6
    1624:	0f03674c 	svceq	0x0003674c
    1628:	20730366 	rsbscs	r0, r3, r6, ror #6
    162c:	0a03674c 	beq	db364 <startup-0x1ff24c9c>
    1630:	207a0366 	rsbscs	r0, sl, r6, ror #6
    1634:	0369674c 	cmneq	r9, #76, 14	; 0x1300000
    1638:	5990080c 	ldmibpl	r0, {r2, r3, fp}
    163c:	3e660a03 	vmulcc.f32	s1, s12, s6
    1640:	ad4c5a5a 	vstrge	s11, [ip, #-360]	; 0xfffffe98
    1644:	040200bc 	streq	r0, [r2], #-188	; 0xffffff44
    1648:	064a0601 	strbeq	r0, [sl], -r1, lsl #12
    164c:	adc0ad50 	stclge	13, cr10, [r0, #320]	; 0x140
    1650:	0200bbcc 	andeq	fp, r0, #204, 22	; 0x33000
    1654:	62030204 	andvs	r0, r3, #4, 4	; 0x40000000
    1658:	040200ba 	streq	r0, [r2], #-186	; 0xffffff46
    165c:	063c0601 	ldrteq	r0, [ip], -r1, lsl #12
    1660:	523c2103 	eorspl	r2, ip, #-1073741824	; 0xc0000000
    1664:	3d3d3d4c 	ldccc	13, cr3, [sp, #-304]!	; 0xfffffed0
    1668:	10033d3d 	andne	r3, r3, sp, lsr sp
    166c:	5a427574 	bpl	109ec44 <startup-0x1ef613bc>
    1670:	3e3e4c3e 	mrccc	12, 1, r4, cr14, cr14, {1}
    1674:	4a1c033d 	bmi	702370 <startup-0x1f8fdc90>
    1678:	5c685075 	stclpl	0, cr5, [r8], #-468	; 0xfffffe2c
    167c:	0a033d4c 	beq	d0bb4 <startup-0x1ff2f44c>
    1680:	033d4e4a 	teqeq	sp, #1184	; 0x4a0
    1684:	50754a0c 	rsbspl	r4, r5, ip, lsl #20
    1688:	3d4c5c68 	stclcc	12, cr5, [ip, #-416]	; 0xfffffe60
    168c:	4e4a0a03 	vmlami.f32	s1, s20, s6
    1690:	4a0f033d 	bmi	3c238c <startup-0x1fc3dc74>
    1694:	0f034b79 	svceq	0x00034b79
    1698:	034b794a 	movteq	r7, #47434	; 0xb94a
    169c:	4cc04a10 	vstmiami	r0, {s9-s24}
    16a0:	034c1e50 	movteq	r1, #52816	; 0xce50
    16a4:	4b784a0b 	blmi	1e13ed8 <startup-0x1e1ec128>
    16a8:	784a0b03 	stmdavc	sl, {r0, r1, r8, r9, fp}^
    16ac:	00ce0375 	sbceq	r0, lr, r5, ror r3
    16b0:	352fbb4a 	strcc	fp, [pc, #-2890]!	; b6e <startup-0x1ffff492>
    16b4:	bbc9089f 	bllt	ff243938 <GPIO_Ports+0xdf23fb64>
    16b8:	0004029f 	muleq	r4, pc, r2	; <UNPREDICTABLE>
    16bc:	Address 0x000016bc is out of bounds.


Disassembly of section .debug_str:

00000000 <.debug_str>:
       0:	52455352 	subpl	r5, r5, #1207959553	; 0x48000001
       4:	31444556 	cmpcc	r4, r6, asr r5
       8:	43545200 	cmpmi	r4, #0, 4
       c:	554b575f 	strbpl	r5, [fp, #-1887]	; 0xfffff8a1
      10:	52495f50 	subpl	r5, r9, #80, 30	; 0x140
      14:	45006e51 	strmi	r6, [r0, #-3665]	; 0xfffff1af
      18:	32495458 	subcc	r5, r9, #88, 8	; 0x58000000
      1c:	5152495f 	cmppl	r2, pc, asr r9
      20:	4d44006e 	stclmi	0, cr0, [r4, #-440]	; 0xfffffe48
      24:	535f3141 	cmppl	pc, #1073741840	; 0x40000010
      28:	61657274 	smcvs	22308	; 0x5724
      2c:	495f366d 	ldmdbmi	pc, {r0, r2, r3, r5, r6, r9, sl, ip, sp}^	; <UNPREDICTABLE>
      30:	006e5152 	rsbeq	r5, lr, r2, asr r1
      34:	384d4954 	stmdacc	sp, {r2, r4, r6, r8, fp, lr}^
      38:	5f50555f 	svcpl	0x0050555f
      3c:	314d4954 	cmpcc	sp, r4, asr r9
      40:	52495f33 	subpl	r5, r9, #51, 30	; 0xcc
      44:	53006e51 	movwpl	r6, #3665	; 0xe51
      48:	69737365 	ldmdbvs	r3!, {r0, r2, r5, r6, r8, r9, ip, sp, lr}^
      4c:	44496e6f 	strbmi	r6, [r9], #-3695	; 0xfffff191
      50:	6d697400 	cfstrdvs	mvd7, [r9, #-0]
      54:	00305f65 	eorseq	r5, r0, r5, ror #30
      58:	656d6974 	strbvs	r6, [sp, #-2420]!	; 0xfffff68c
      5c:	6300315f 	movwvs	r3, #351	; 0x15f
      60:	695f6e61 	ldmdbvs	pc, {r0, r5, r6, r9, sl, fp, sp, lr}^	; <UNPREDICTABLE>
      64:	0074696e 	rsbseq	r6, r4, lr, ror #18
      68:	4877656e 	ldmdami	r7!, {r1, r2, r3, r5, r6, r8, sl, sp, lr}^
      6c:	6c646e61 	stclvs	14, cr6, [r4], #-388	; 0xfffffe7c
      70:	43007265 	movwmi	r7, #613	; 0x265
      74:	495f4e41 	ldmdbmi	pc, {r0, r6, r9, sl, fp, lr}^	; <UNPREDICTABLE>
      78:	5474696e 	ldrbtpl	r6, [r4], #-2414	; 0xfffff692
      7c:	44657079 	strbtmi	r7, [r5], #-121	; 0xffffff87
      80:	43006665 	movwmi	r6, #1637	; 0x665
      84:	465f4e41 	ldrbmi	r4, [pc], -r1, asr #28
      88:	65746c69 	ldrbvs	r6, [r4, #-3177]!	; 0xfffff397
      8c:	4c644972 			; <UNDEFINED> instruction: 0x4c644972
      90:	7500776f 	strvc	r7, [r0, #-1903]	; 0xfffff891
      94:	69623631 	stmdbvs	r2!, {r0, r4, r5, r9, sl, ip, sp}^
      98:	44007374 	strmi	r7, [r0], #-884	; 0xfffffc8c
      9c:	5f32414d 	svcpl	0x0032414d
      a0:	65727453 	ldrbvs	r7, [r2, #-1107]!	; 0xfffffbad
      a4:	5f316d61 	svcpl	0x00316d61
      a8:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
      ac:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
      b0:	75505f4f 	ldrbvc	r5, [r0, #-3919]	; 0xfffff0b1
      b4:	4e5f6450 	mrcmi	4, 2, r6, cr15, cr0, {2}
      b8:	4c55504f 	mrrcmi	0, 4, r5, r5, cr15	; <UNPREDICTABLE>
      bc:	5456004c 	ldrbpl	r0, [r6], #-76	; 0xffffffb4
      c0:	5300524f 	movwpl	r5, #591	; 0x24f
      c4:	5f334950 	svcpl	0x00334950
      c8:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
      cc:	414c4600 	cmpmi	ip, r0, lsl #12
      d0:	495f4853 	ldmdbmi	pc, {r0, r1, r4, r6, fp, lr}^	; <UNPREDICTABLE>
      d4:	006e5152 	rsbeq	r5, lr, r2, asr r1
      d8:	644e4143 	strbvs	r4, [lr], #-323	; 0xfffffebd
      dc:	62617369 	rsbvs	r7, r1, #-1543503871	; 0xa4000001
      e0:	6946656c 	stmdbvs	r6, {r2, r3, r5, r6, r8, sl, sp, lr}^
      e4:	7265746c 	rsbvc	r7, r5, #108, 8	; 0x6c000000
      e8:	646e6148 	strbtvs	r6, [lr], #-328	; 0xfffffeb8
      ec:	0072656c 	rsbseq	r6, r2, ip, ror #10
      f0:	494d4344 	stmdbmi	sp, {r2, r6, r8, r9, lr}^
      f4:	5152495f 	cmppl	r2, pc, asr r9
      f8:	7473006e 	ldrbtvc	r0, [r3], #-110	; 0xffffff92
      fc:	00657461 	rsbeq	r7, r5, r1, ror #8
     100:	5f4e4143 	svcpl	0x004e4143
     104:	4d435454 	cfstrdmi	mvd5, [r3, #-336]	; 0xfffffeb0
     108:	4e414300 	cdpmi	3, 4, cr4, cr1, cr0, {0}
     10c:	646f4d5f 	strbtvs	r4, [pc], #-3423	; 114 <startup-0x1ffffeec>
     110:	50470065 	subpl	r0, r7, r5, rrx
     114:	544f4f49 	strbpl	r4, [pc], #-3913	; 11c <startup-0x1ffffee4>
     118:	5f657079 	svcpl	0x00657079
     11c:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0xfffff6ac
     120:	00666544 	rsbeq	r6, r6, r4, asr #10
     124:	324d4954 	subcc	r4, sp, #84, 18	; 0x150000
     128:	5152495f 	cmppl	r2, pc, asr r9
     12c:	6f74006e 	svcvs	0x0074006e
     130:	746e6543 	strbtvc	r6, [lr], #-1347	; 0xfffffabd
     134:	006c6172 	rsbeq	r6, ip, r2, ror r1
     138:	52504349 	subspl	r4, r0, #603979777	; 0x24000001
     13c:	73657300 	cmnvc	r5, #0, 6
     140:	6e6f6973 			; <UNDEFINED> instruction: 0x6e6f6973
     144:	4e004449 	cdpmi	4, 0, cr4, cr0, cr9, {2}
     148:	5f434956 	svcpl	0x00434956
     14c:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xfffff1b7
     150:	75727453 	ldrbvc	r7, [r2, #-1107]!	; 0xfffffbad
     154:	72757463 	rsbsvc	r7, r5, #1660944384	; 0x63000000
     158:	41430065 	cmpmi	r3, r5, rrx
     15c:	525f324e 	subspl	r3, pc, #-536870908	; 0xe0000004
     160:	495f3058 	ldmdbmi	pc, {r3, r4, r6, ip, sp}^	; <UNPREDICTABLE>
     164:	006e5152 	rsbeq	r5, lr, r2, asr r1
     168:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
     16c:	495f3654 	ldmdbmi	pc, {r2, r4, r6, r9, sl, ip, sp}^	; <UNPREDICTABLE>
     170:	006e5152 	rsbeq	r5, lr, r2, asr r1
     174:	5f4e4143 	svcpl	0x004e4143
     178:	746c6946 	strbtvc	r6, [ip], #-2374	; 0xfffff6ba
     17c:	63537265 	cmpvs	r3, #1342177286	; 0x50000006
     180:	00656c61 	rsbeq	r6, r5, r1, ror #24
     184:	69755f5f 	ldmdbvs	r5!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, ip, lr}^
     188:	5f38746e 	svcpl	0x0038746e
     18c:	50530074 	subspl	r0, r3, r4, ror r0
     190:	495f3249 	ldmdbmi	pc, {r0, r3, r6, r9, ip, sp}^	; <UNPREDICTABLE>
     194:	006e5152 	rsbeq	r5, lr, r2, asr r1
     198:	384d4954 	stmdacc	sp, {r2, r4, r6, r8, fp, lr}^
     19c:	4b52425f 	blmi	1490b20 <startup-0x1eb6f4e0>
     1a0:	4d49545f 	cfstrdmi	mvd5, [r9, #-380]	; 0xfffffe84
     1a4:	495f3231 	ldmdbmi	pc, {r0, r4, r5, r9, ip, sp}^	; <UNPREDICTABLE>
     1a8:	006e5152 	rsbeq	r5, lr, r2, asr r1
     1ac:	4f495047 	svcmi	0x00495047
     1b0:	5075505f 	rsbspl	r5, r5, pc, asr r0
     1b4:	4f445f64 	svcmi	0x00445f64
     1b8:	63004e57 	movwvs	r4, #3671	; 0xe57
     1bc:	695f6e61 	ldmdbvs	pc, {r0, r5, r6, r9, sl, fp, sp, lr}^	; <UNPREDICTABLE>
     1c0:	685f7172 	ldmdavs	pc, {r1, r4, r5, r6, r8, ip, sp, lr}^	; <UNPREDICTABLE>
     1c4:	6c646e61 	stclvs	14, cr6, [r4], #-388	; 0xfffffe7c
     1c8:	4e007265 	cdpmi	2, 0, cr7, cr0, cr5, {3}
     1cc:	5f434956 	svcpl	0x00434956
     1d0:	43515249 	cmpmi	r1, #-1879048188	; 0x90000004
     1d4:	6e6e6168 	powvsez	f6, f6, #0.0
     1d8:	6d436c65 	stclvs	12, cr6, [r3, #-404]	; 0xfffffe6c
     1dc:	49410064 	stmdbmi	r1, {r2, r5, r6}^
     1e0:	00524352 	subseq	r4, r2, r2, asr r3
     1e4:	65536f6e 	ldrbvs	r6, [r3, #-3950]	; 0xfffff092
     1e8:	6f697373 	svcvs	0x00697373
     1ec:	0064496e 	rsbeq	r4, r4, lr, ror #18
     1f0:	49555043 	ldmdbmi	r5, {r0, r1, r6, ip, lr}^
     1f4:	4d440044 	stclmi	0, cr0, [r4, #-272]	; 0xfffffef0
     1f8:	535f3241 	cmppl	pc, #268435460	; 0x10000004
     1fc:	61657274 	smcvs	22308	; 0x5724
     200:	495f356d 	ldmdbmi	pc, {r0, r2, r3, r5, r6, r8, sl, ip, sp}^	; <UNPREDICTABLE>
     204:	006e5152 	rsbeq	r5, lr, r2, asr r1
     208:	4f495047 	svcmi	0x00495047
     20c:	646f4d5f 	strbtvs	r4, [pc], #-3423	; 214 <startup-0x1ffffdec>
     210:	46415f65 	strbmi	r5, [r1], -r5, ror #30
     214:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
     218:	52545f31 	subspl	r5, r4, #49, 30	; 0xc4
     21c:	4f435f47 	svcmi	0x00435f47
     220:	49545f4d 	ldmdbmi	r4, {r0, r2, r3, r6, r8, r9, sl, fp, ip, lr}^
     224:	5f31314d 	svcpl	0x0031314d
     228:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     22c:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
     230:	6f4d5f4f 	svcvs	0x004d5f4f
     234:	415f6564 	cmpmi	pc, r4, ror #10
     238:	4143004e 	cmpmi	r3, lr, asr #32
     23c:	6e65734e 	cdpvs	3, 6, cr7, cr5, cr14, {2}
     240:	73654d64 	cmnvc	r5, #100, 26	; 0x1900
     244:	65676173 	strbvs	r6, [r7, #-371]!	; 0xfffffe8d
     248:	4d787200 	lfmmi	f7, 2, [r8, #-0]
     24c:	53006773 	movwpl	r6, #1907	; 0x773
     250:	69547379 	ldmdbvs	r4, {r0, r3, r4, r5, r6, r8, r9, ip, sp, lr}^
     254:	495f6b63 	ldmdbmi	pc, {r0, r1, r5, r6, r8, r9, fp, sp, lr}^	; <UNPREDICTABLE>
     258:	006e5152 	rsbeq	r5, lr, r2, asr r1
     25c:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
     260:	495f3354 	ldmdbmi	pc, {r2, r4, r6, r8, r9, ip, sp}^	; <UNPREDICTABLE>
     264:	006e5152 	rsbeq	r5, lr, r2, asr r1
     268:	52534349 	subspl	r4, r3, #603979777	; 0x24000001
     26c:	30465200 	subcc	r5, r6, r0, lsl #4
     270:	50470052 	subpl	r0, r7, r2, asr r0
     274:	4f5f4f49 	svcmi	0x005f4f49
     278:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0xfffff6ac
     27c:	00444f5f 	subeq	r4, r4, pc, asr pc
     280:	4f495047 	svcmi	0x00495047
     284:	696e495f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, lr}^
     288:	70795474 	rsbsvc	r5, r9, r4, ror r4
     28c:	66654465 	strbtvs	r4, [r5], -r5, ror #8
     290:	4e414300 	cdpmi	3, 4, cr4, cr1, cr0, {0}
     294:	6c69465f 	stclvs	6, cr4, [r9], #-380	; 0xfffffe84
     298:	52726574 	rsbspl	r6, r2, #116, 10	; 0x1d000000
     29c:	73696765 	cmnvc	r9, #26476544	; 0x1940000
     2a0:	5f726574 	svcpl	0x00726574
     2a4:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0xfffff6ac
     2a8:	00666544 	rsbeq	r6, r6, r4, asr #10
     2ac:	46494673 			; <UNDEFINED> instruction: 0x46494673
     2b0:	69614d4f 	stmdbvs	r1!, {r0, r1, r2, r3, r6, r8, sl, fp, lr}^
     2b4:	786f426c 	stmdavc	pc!, {r2, r3, r5, r6, r9, lr}^	; <UNPREDICTABLE>
     2b8:	414d4400 	cmpmi	sp, r0, lsl #8
     2bc:	74535f31 	ldrbvc	r5, [r3], #-3889	; 0xfffff0cf
     2c0:	6d616572 	cfstr64vs	mvdx6, [r1, #-456]!	; 0xfffffe38
     2c4:	52495f32 	subpl	r5, r9, #50, 30	; 0xc8
     2c8:	52006e51 	andpl	r6, r0, #1296	; 0x510
     2cc:	52455345 	subpl	r5, r5, #335544321	; 0x14000001
     2d0:	30444556 	subcc	r4, r4, r6, asr r5
     2d4:	53455200 	movtpl	r5, #20992	; 0x5200
     2d8:	45565245 	ldrbmi	r5, [r6, #-581]	; 0xfffffdbb
     2dc:	75003144 	strvc	r3, [r0, #-324]	; 0xfffffebc
     2e0:	6769736e 	strbvs	r7, [r9, -lr, ror #6]!
     2e4:	2064656e 	rsbcs	r6, r4, lr, ror #10
     2e8:	72616863 	rsbvc	r6, r1, #6488064	; 0x630000
     2ec:	414d4400 	cmpmi	sp, r0, lsl #8
     2f0:	74535f32 	ldrbvc	r5, [r3], #-3890	; 0xfffff0ce
     2f4:	6d616572 	cfstr64vs	mvdx6, [r1, #-456]!	; 0xfffffe38
     2f8:	52495f34 	subpl	r5, r9, #52, 30	; 0xd0
     2fc:	52006e51 	andpl	r6, r0, #1296	; 0x510
     300:	52455345 	subpl	r5, r5, #335544321	; 0x14000001
     304:	34444556 	strbcc	r4, [r4], #-1366	; 0xfffffaaa
     308:	53455200 	movtpl	r5, #20992	; 0x5200
     30c:	45565245 	ldrbmi	r5, [r6, #-581]	; 0xfffffdbb
     310:	52003544 	andpl	r3, r0, #68, 10	; 0x11000000
     314:	00523146 	subseq	r3, r2, r6, asr #2
     318:	52424149 	subpl	r4, r2, #1073741842	; 0x40000012
     31c:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
     320:	544f5f4f 	strbpl	r5, [pc], #-3919	; 328 <startup-0x1ffffcd8>
     324:	5f657079 	svcpl	0x00657079
     328:	49005050 	stmdbmi	r0, {r4, r6, ip, lr}
     32c:	5f314332 	svcpl	0x00314332
     330:	495f5245 	ldmdbmi	pc, {r0, r2, r6, r9, ip, lr}^	; <UNPREDICTABLE>
     334:	006e5152 	rsbeq	r5, lr, r2, asr r1
     338:	5f4e4143 	svcpl	0x004e4143
     33c:	746c6946 	strbtvc	r6, [ip], #-2374	; 0xfffff6ba
     340:	49467265 	stmdbmi	r6, {r0, r2, r5, r6, r9, ip, sp, lr}^
     344:	73414f46 	movtvc	r4, #8006	; 0x1f46
     348:	6e676973 			; <UNDEFINED> instruction: 0x6e676973
     34c:	746e656d 	strbtvc	r6, [lr], #-1389	; 0xfffffa93
     350:	4e414300 	cdpmi	3, 4, cr4, cr1, cr0, {0}
     354:	4f42415f 	svcmi	0x0042415f
     358:	4143004d 	cmpmi	r3, sp, asr #32
     35c:	535f324e 	cmppl	pc, #-536870908	; 0xe0000004
     360:	495f4543 	ldmdbmi	pc, {r0, r1, r6, r8, sl, lr}^	; <UNPREDICTABLE>
     364:	006e5152 	rsbeq	r5, lr, r2, asr r1
     368:	64616568 	strbtvs	r6, [r1], #-1384	; 0xfffffa98
     36c:	53007265 	movwpl	r7, #613	; 0x265
     370:	64496474 	strbvs	r6, [r9], #-1140	; 0xfffffb8c
     374:	53455200 	movtpl	r5, #20992	; 0x5200
     378:	45565245 	ldrbmi	r5, [r6, #-581]	; 0xfffffdbb
     37c:	52003244 	andpl	r3, r0, #68, 4	; 0x40000004
     380:	52455345 	subpl	r5, r5, #335544321	; 0x14000001
     384:	33444556 	movtcc	r4, #17750	; 0x4556
     388:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
     38c:	52495f35 	subpl	r5, r9, #53, 30	; 0xd4
     390:	55006e51 	strpl	r6, [r0, #-3665]	; 0xfffff1af
     394:	65676173 	strbvs	r6, [r7, #-371]!	; 0xfffffe8d
     398:	6c756146 	ldfvse	f6, [r5], #-280	; 0xfffffee8
     39c:	52495f74 	subpl	r5, r9, #116, 30	; 0x1d0
     3a0:	53006e51 	movwpl	r6, #3665	; 0xe51
     3a4:	69737365 	ldmdbvs	r3!, {r0, r2, r5, r6, r8, r9, ip, sp, lr}^
     3a8:	44496e6f 	strbmi	r6, [r9], #-3695	; 0xfffff191
     3ac:	69746341 	ldmdbvs	r4!, {r0, r6, r8, r9, sp, lr}^
     3b0:	53006576 	movwpl	r6, #1398	; 0x576
     3b4:	545f4243 	ldrbpl	r4, [pc], #-579	; 3bc <startup-0x1ffffc44>
     3b8:	00657079 	rsbeq	r7, r5, r9, ror r0
     3bc:	4f495047 	svcmi	0x00495047
     3c0:	64507550 	ldrbvs	r7, [r0], #-1360	; 0xfffffab0
     3c4:	7079545f 	rsbsvc	r5, r9, pc, asr r4
     3c8:	66654465 	strbtvs	r4, [r5], -r5, ror #8
     3cc:	53464400 	movtpl	r4, #25600	; 0x6400
     3d0:	41430052 	qdaddmi	r0, r2, r3
     3d4:	7463614e 	strbtvc	r6, [r3], #-334	; 0xfffffeb2
     3d8:	74617669 	strbtvc	r7, [r1], #-1641	; 0xfffff997
     3dc:	6c694665 	stclvs	6, cr4, [r9], #-404	; 0xfffffe6c
     3e0:	48726574 	ldmdami	r2!, {r2, r4, r5, r6, r8, sl, sp, lr}^
     3e4:	6c646e61 	stclvs	14, cr6, [r4], #-388	; 0xfffffe7c
     3e8:	4e007265 	cdpmi	2, 0, cr7, cr0, cr5, {3}
     3ec:	5f434956 	svcpl	0x00434956
     3f0:	43515249 	cmpmi	r1, #-1879048188	; 0x90000004
     3f4:	6e6e6168 	powvsez	f6, f6, #0.0
     3f8:	72506c65 	subsvc	r6, r0, #25856	; 0x6500
     3fc:	706d6565 	rsbvc	r6, sp, r5, ror #10
     400:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
     404:	6f697250 	svcvs	0x00697250
     408:	79746972 	ldmdbvc	r4!, {r1, r4, r5, r6, r8, fp, sp, lr}^
     40c:	755f5f00 	ldrbvc	r5, [pc, #-3840]	; fffff514 <GPIO_Ports+0xdfffb740>
     410:	31746e69 	cmncc	r4, r9, ror #28
     414:	00745f36 	rsbseq	r5, r4, r6, lsr pc
     418:	4f495047 	svcmi	0x00495047
     41c:	776f4c5f 			; <UNDEFINED> instruction: 0x776f4c5f
     420:	6570535f 	ldrbvs	r5, [r0, #-863]!	; 0xfffffca1
     424:	43006465 	movwmi	r6, #1125	; 0x465
     428:	5f314e41 	svcpl	0x00314e41
     42c:	5f305852 	svcpl	0x00305852
     430:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     434:	4e414300 	cdpmi	3, 4, cr4, cr1, cr0, {0}
     438:	6c69465f 	stclvs	6, cr4, [r9], #-380	; 0xfffffe84
     43c:	41726574 	cmnmi	r2, r4, ror r5
     440:	76697463 	strbtvc	r7, [r9], -r3, ror #8
     444:	6f697461 	svcvs	0x00697461
     448:	3a43006e 	bcc	10c0608 <startup-0x1ef3f9f8>
     44c:	6573555c 	ldrbvs	r5, [r3, #-1372]!	; 0xfffffaa4
     450:	415c7372 	cmpmi	ip, r2, ror r3
     454:	746d6164 	strbtvc	r6, [sp], #-356	; 0xfffffe9c
     458:	656e4f5c 	strbvs	r4, [lr, #-3932]!	; 0xfffff0a4
     45c:	76697244 	strbtvc	r7, [r9], -r4, asr #4
     460:	6f445c65 	svcvs	0x00445c65
     464:	656d756b 	strbvs	r7, [sp, #-1387]!	; 0xfffffa95
     468:	475c746e 	ldrbmi	r7, [ip, -lr, ror #8]
     46c:	75487469 	strbvc	r7, [r8, #-1129]	; 0xfffffb97
     470:	41445c62 	cmpmi	r4, r2, ror #24
     474:	30393254 	eorscc	r3, r9, r4, asr r2
     478:	72614c2d 	rsbvc	r4, r1, #11520	; 0x2d00
     47c:	7379736d 	cmnvc	r9, #-1275068415	; 0xb4000001
     480:	5c6d6574 	cfstr64pl	mvdx6, [sp], #-464	; 0xfffffe30
     484:	5c646f6b 	stclpl	15, cr6, [r4], #-428	; 0xfffffe54
     488:	726f6f44 	rsbvc	r6, pc, #68, 30	; 0x110
     48c:	53464800 	movtpl	r4, #26624	; 0x6800
     490:	65480052 	strbvs	r0, [r8, #-82]	; 0xffffffae
     494:	72656461 	rsbvc	r6, r5, #1627389952	; 0x61000000
     498:	74784500 	ldrbtvc	r4, [r8], #-1280	; 0xfffffb00
     49c:	43006449 	movwmi	r6, #1097	; 0x449
     4a0:	465f4e41 	ldrbmi	r4, [pc], -r1, asr #28
     4a4:	65746c69 	ldrbvs	r6, [r4, #-3177]!	; 0xfffff397
     4a8:	696e4972 	stmdbvs	lr!, {r1, r4, r5, r6, r8, fp, lr}^
     4ac:	72745374 	rsbsvc	r5, r4, #116, 6	; 0xd0000001
     4b0:	75746375 	ldrbvc	r6, [r4, #-885]!	; 0xfffffc8b
     4b4:	54006572 	strpl	r6, [r0], #-1394	; 0xfffffa8e
     4b8:	5f344d49 	svcpl	0x00344d49
     4bc:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     4c0:	554e4700 	strbpl	r4, [lr, #-1792]	; 0xfffff900
     4c4:	39394320 	ldmdbcc	r9!, {r5, r8, r9, lr}
     4c8:	322e3720 	eorcc	r3, lr, #32, 14	; 0x800000
     4cc:	3220312e 	eorcc	r3, r0, #-2147483637	; 0x8000000b
     4d0:	30373130 	eorscc	r3, r7, r0, lsr r1
     4d4:	20343039 	eorscs	r3, r4, r9, lsr r0
     4d8:	6c657228 	sfmvs	f7, 2, [r5], #-160	; 0xffffff60
     4dc:	65736165 	ldrbvs	r6, [r3, #-357]!	; 0xfffffe9b
     4e0:	415b2029 	cmpmi	fp, r9, lsr #32
     4e4:	652f4d52 	strvs	r4, [pc, #-3410]!	; fffff79a <GPIO_Ports+0xdfffb9c6>
     4e8:	6465626d 	strbtvs	r6, [r5], #-621	; 0xfffffd93
     4ec:	2d646564 	cfstr64cs	mvdx6, [r4, #-400]!	; 0xfffffe70
     4f0:	72622d37 	rsbvc	r2, r2, #3520	; 0xdc0
     4f4:	68636e61 	stmdavs	r3!, {r0, r5, r6, r9, sl, fp, sp, lr}^
     4f8:	76657220 	strbtvc	r7, [r5], -r0, lsr #4
     4fc:	6f697369 	svcvs	0x00697369
     500:	3532206e 	ldrcc	r2, [r2, #-110]!	; 0xffffff92
     504:	34303235 	ldrtcc	r3, [r0], #-565	; 0xfffffdcb
     508:	6d2d205d 	stcvs	0, cr2, [sp, #-372]!	; 0xfffffe8c
     50c:	6d756874 	ldclvs	8, cr6, [r5, #-464]!	; 0xfffffe30
     510:	6d2d2062 	stcvs	0, cr2, [sp, #-392]!	; 0xfffffe78
     514:	68637261 	stmdavs	r3!, {r0, r5, r6, r9, ip, sp, lr}^
     518:	6d72613d 	ldfvse	f6, [r2, #-244]!	; 0xffffff0c
     51c:	6d2d3676 	stcvs	6, cr3, [sp, #-472]!	; 0xfffffe28
     520:	666d2d20 	strbtvs	r2, [sp], -r0, lsr #26
     524:	74616f6c 	strbtvc	r6, [r1], #-3948	; 0xfffff094
     528:	6962612d 	stmdbvs	r2!, {r0, r2, r3, r5, r8, sp, lr}^
     52c:	666f733d 			; <UNDEFINED> instruction: 0x666f733d
     530:	6d2d2074 	stcvs	0, cr2, [sp, #-464]!	; 0xfffffe30
     534:	6d756874 	ldclvs	8, cr6, [r5, #-464]!	; 0xfffffe30
     538:	6d2d2062 	stcvs	0, cr2, [sp, #-392]!	; 0xfffffe78
     53c:	68637261 	stmdavs	r3!, {r0, r5, r6, r9, ip, sp, lr}^
     540:	6d72613d 	ldfvse	f6, [r2, #-244]!	; 0xffffff0c
     544:	6d2d3676 	stcvs	6, cr3, [sp, #-472]!	; 0xfffffe28
     548:	20672d20 	rsbcs	r2, r7, r0, lsr #26
     54c:	20304f2d 	eorscs	r4, r0, sp, lsr #30
     550:	6474732d 	ldrbtvs	r7, [r4], #-813	; 0xfffffcd3
     554:	3939633d 	ldmdbcc	r9!, {r0, r2, r3, r4, r5, r8, r9, sp, lr}
     558:	6e614300 	cdpvs	3, 6, cr4, cr1, cr0, {0}
     55c:	734d7854 	movtvc	r7, #55380	; 0xd854
     560:	48530067 	ldmdami	r3, {r0, r1, r2, r5, r6}^
     564:	00525343 	subseq	r5, r2, r3, asr #6
     568:	52495453 	subpl	r5, r9, #1392508928	; 0x53000000
     56c:	43324900 	teqmi	r2, #0, 18
     570:	56455f31 			; <UNDEFINED> instruction: 0x56455f31
     574:	5152495f 	cmppl	r2, pc, asr r9
     578:	6163006e 	cmnvs	r3, lr, rrx
     57c:	6e695f6e 	cdpvs	15, 6, cr5, cr9, cr14, {3}
     580:	735f7469 	cmpvc	pc, #1761607680	; 0x69000000
     584:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0xfffffe8c
     588:	50470073 	subpl	r0, r7, r3, ror r0
     58c:	4d5f4f49 	ldclmi	15, cr4, [pc, #-292]	; 470 <startup-0x1ffffb90>
     590:	5f65646f 	svcpl	0x0065646f
     594:	0054554f 	subseq	r5, r4, pc, asr #10
     598:	5f4e4143 	svcpl	0x004e4143
     59c:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xfffff1b7
     5a0:	75727453 	ldrbvc	r7, [r2, #-1107]!	; 0xfffffbad
     5a4:	72757463 	rsbsvc	r7, r5, #1660944384	; 0x63000000
     5a8:	41430065 	cmpmi	r3, r5, rrx
     5ac:	4a535f4e 	bmi	14d82ec <startup-0x1eb27d14>
     5b0:	49540057 	ldmdbmi	r4, {r0, r1, r2, r4, r6}^
     5b4:	435f314d 	cmpmi	pc, #1073741843	; 0x40000013
     5b8:	52495f43 	subpl	r5, r9, #268	; 0x10c
     5bc:	48006e51 	stmdami	r0, {r0, r4, r6, r9, sl, fp, sp, lr}
     5c0:	5f485341 	svcpl	0x00485341
     5c4:	5f474e52 	svcpl	0x00474e52
     5c8:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     5cc:	54584500 	ldrbpl	r4, [r8], #-1280	; 0xfffffb00
     5d0:	495f3149 	ldmdbmi	pc, {r0, r3, r6, r8, ip, sp}^	; <UNPREDICTABLE>
     5d4:	006e5152 	rsbeq	r5, lr, r2, asr r1
     5d8:	314e4143 	cmpcc	lr, r3, asr #2
     5dc:	5f58545f 	svcpl	0x0058545f
     5e0:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     5e4:	414d4400 	cmpmi	sp, r0, lsl #8
     5e8:	74535f31 	ldrbvc	r5, [r3], #-3889	; 0xfffff0cf
     5ec:	6d616572 	cfstr64vs	mvdx6, [r1, #-456]!	; 0xfffffe38
     5f0:	52495f35 	subpl	r5, r9, #53, 30	; 0xd4
     5f4:	54006e51 	strpl	r6, [r0], #-3665	; 0xfffff1af
     5f8:	5f384d49 	svcpl	0x00384d49
     5fc:	5f475254 	svcpl	0x00475254
     600:	5f4d4f43 	svcpl	0x004d4f43
     604:	314d4954 	cmpcc	sp, r4, asr r9
     608:	52495f34 	subpl	r5, r9, #52, 30	; 0xd0
     60c:	44006e51 	strmi	r6, [r0], #-3665	; 0xfffff1af
     610:	5f32414d 	svcpl	0x0032414d
     614:	65727453 	ldrbvs	r7, [r2, #-1107]!	; 0xfffffbad
     618:	5f376d61 	svcpl	0x00376d61
     61c:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     620:	47544f00 	ldrbmi	r4, [r4, -r0, lsl #30]
     624:	5f53465f 	svcpl	0x0053465f
     628:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     62c:	6e6f4e00 	cdpvs	14, 6, cr4, cr15, cr0, {0}
     630:	6b73614d 	blvs	1cd8b6c <startup-0x1e327494>
     634:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
     638:	5f746e49 	svcpl	0x00746e49
     63c:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     640:	44575700 	ldrbmi	r5, [r7], #-1792	; 0xfffff900
     644:	52495f47 	subpl	r5, r9, #284	; 0x11c
     648:	4f006e51 	svcmi	0x00006e51
     64c:	485f4754 	ldmdami	pc, {r2, r4, r6, r8, r9, sl, lr}^	; <UNPREDICTABLE>
     650:	4b575f53 	blmi	15d83a4 <startup-0x1ea27c5c>
     654:	495f5055 	ldmdbmi	pc, {r0, r2, r4, r6, ip, lr}^	; <UNPREDICTABLE>
     658:	006e5152 	rsbeq	r5, lr, r2, asr r1
     65c:	6f6d654d 	svcvs	0x006d654d
     660:	614d7972 	hvcvs	55186	; 0xd792
     664:	6567616e 	strbvs	r6, [r7, #-366]!	; 0xfffffe92
     668:	746e656d 	strbtvc	r6, [lr], #-1389	; 0xfffffa93
     66c:	5152495f 	cmppl	r2, pc, asr r9
     670:	7953006e 	ldmdbvc	r3, {r1, r2, r3, r5, r6}^
     674:	6d657473 	cfstrdvs	mvd7, [r5, #-460]!	; 0xfffffe34
     678:	65726f43 	ldrbvs	r6, [r2, #-3907]!	; 0xfffff0bd
     67c:	636f6c43 	cmnvs	pc, #17152	; 0x4300
     680:	4154006b 	cmpmi	r4, fp, rrx
     684:	535f504d 	cmppl	pc, #77	; 0x4d
     688:	504d4154 	subpl	r4, sp, r4, asr r1
     68c:	5152495f 	cmppl	r2, pc, asr r9
     690:	4143006e 	cmpmi	r3, lr, rrx
     694:	535f314e 	cmppl	pc, #-2147483629	; 0x80000013
     698:	495f4543 	ldmdbmi	pc, {r0, r1, r6, r8, sl, lr}^	; <UNPREDICTABLE>
     69c:	006e5152 	rsbeq	r5, lr, r2, asr r1
     6a0:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     6a4:	7079545f 	rsbsvc	r5, r9, pc, asr r4
     6a8:	50470065 	subpl	r0, r7, r5, rrx
     6ac:	4d5f4f49 	ldclmi	15, cr4, [pc, #-292]	; 590 <startup-0x1ffffa70>
     6b0:	5f65646f 	svcpl	0x0065646f
     6b4:	44004e49 	strmi	r4, [r0], #-3657	; 0xfffff1b7
     6b8:	5f32414d 	svcpl	0x0032414d
     6bc:	65727453 	ldrbvs	r7, [r2, #-1107]!	; 0xfffffbad
     6c0:	5f306d61 	svcpl	0x00306d61
     6c4:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     6c8:	4b434c00 	blmi	10d36d0 <startup-0x1ef2c930>
     6cc:	32490052 	subcc	r0, r9, #82	; 0x52
     6d0:	455f3243 	ldrbmi	r3, [pc, #-579]	; 495 <startup-0x1ffffb6b>
     6d4:	52495f52 	subpl	r5, r9, #328	; 0x148
     6d8:	43006e51 	movwmi	r6, #3665	; 0xe51
     6dc:	505f4e41 	subspl	r4, pc, r1, asr #28
     6e0:	63736572 	cmnvs	r3, #478150656	; 0x1c800000
     6e4:	72656c61 	rsbvc	r6, r5, #24832	; 0x6100
     6e8:	50534f00 	subspl	r4, r3, r0, lsl #30
     6ec:	52444545 	subpl	r4, r4, #289406976	; 0x11400000
     6f0:	73754200 	cmnvc	r5, #0, 4
     6f4:	6c756146 	ldfvse	f6, [r5], #-280	; 0xfffffee8
     6f8:	52495f74 	subpl	r5, r9, #116, 30	; 0x1d0
     6fc:	55006e51 	strpl	r6, [r0, #-3665]	; 0xfffff1af
     700:	35545241 	ldrbcc	r5, [r4, #-577]	; 0xfffffdbf
     704:	5152495f 	cmppl	r2, pc, asr r9
     708:	4954006e 	ldmdbmi	r4, {r1, r2, r3, r5, r6}^
     70c:	425f314d 	subsmi	r3, pc, #1073741843	; 0x40000013
     710:	545f4b52 	ldrbpl	r4, [pc], #-2898	; 718 <startup-0x1ffff8e8>
     714:	5f394d49 	svcpl	0x00394d49
     718:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     71c:	6f6f6400 	svcvs	0x006f6400
     720:	64695f72 	strbtvs	r5, [r9], #-3954	; 0xfffff08e
     724:	4700305f 	smlsdmi	r0, pc, r0, r3	; <UNPREDICTABLE>
     728:	5f4f4950 	svcpl	0x004f4950
     72c:	7079544f 	rsbsvc	r5, r9, pc, asr #8
     730:	5f5f0065 	svcpl	0x005f0065
     734:	746e6975 	strbtvc	r6, [lr], #-2421	; 0xfffff68b
     738:	745f3233 	ldrbvc	r3, [pc], #-563	; 740 <startup-0x1ffff8c0>
     73c:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
     740:	654d5f4f 	strbvs	r5, [sp, #-3919]	; 0xfffff0b1
     744:	6d756964 			; <UNDEFINED> instruction: 0x6d756964
     748:	6570535f 	ldrbvs	r5, [r0, #-863]!	; 0xfffffca1
     74c:	54006465 	strpl	r6, [r0], #-1125	; 0xfffffb9b
     750:	5f374d49 	svcpl	0x00374d49
     754:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     758:	6e6f6c00 	cdpvs	12, 6, cr6, cr15, cr0, {0}
     75c:	6f6c2067 	svcvs	0x006c2067
     760:	6920676e 	stmdbvs	r0!, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}
     764:	4500746e 	strmi	r7, [r0, #-1134]	; 0xfffffb92
     768:	575f4854 			; <UNDEFINED> instruction: 0x575f4854
     76c:	5f50554b 	svcpl	0x0050554b
     770:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     774:	47544f00 	ldrbmi	r4, [r4, -r0, lsl #30]
     778:	5f53485f 	svcpl	0x0053485f
     77c:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     780:	50555000 	subspl	r5, r5, r0
     784:	6d005244 	sfmvs	f5, 4, [r0, #-272]	; 0xfffffef0
     788:	79546773 	ldmdbvc	r4, {r0, r1, r4, r5, r6, r8, r9, sl, sp, lr}^
     78c:	53006570 	movwpl	r6, #1392	; 0x570
     790:	5f314950 	svcpl	0x00314950
     794:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     798:	696e7500 	stmdbvs	lr!, {r8, sl, ip, sp, lr}^
     79c:	69466e6f 	stmdbvs	r6, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
     7a0:	7265746c 	rsbvc	r7, r5, #108, 8	; 0x6c000000
     7a4:	6e616800 	cdpvs	8, 6, cr6, cr1, cr0, {0}
     7a8:	72656c64 	rsbvc	r6, r5, #100, 24	; 0x6400
     7ac:	7473694c 	ldrbtvc	r6, [r3], #-2380	; 0xfffff6b4
     7b0:	43565300 	cmpmi	r6, #0, 6
     7b4:	5f6c6c61 	svcpl	0x006c6c61
     7b8:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     7bc:	52534200 	subspl	r4, r3, #0, 4
     7c0:	42004852 	andmi	r4, r0, #5373952	; 0x520000
     7c4:	4c525253 	lfmmi	f5, 2, [r2], {83}	; 0x53
     7c8:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
     7cc:	69485f4f 	stmdbvs	r8, {r0, r1, r2, r3, r6, r8, r9, sl, fp, ip, lr}^
     7d0:	535f6867 	cmppl	pc, #6750208	; 0x670000
     7d4:	64656570 	strbtvs	r6, [r5], #-1392	; 0xfffffa90
     7d8:	73616d00 	cmnvc	r1, #0, 26
     7dc:	3a43006b 	bcc	10c0990 <startup-0x1ef3f670>
     7e0:	6573552f 	ldrbvs	r5, [r3, #-1327]!	; 0xfffffad1
     7e4:	412f7372 			; <UNDEFINED> instruction: 0x412f7372
     7e8:	746d6164 	strbtvc	r6, [sp], #-356	; 0xfffffe9c
     7ec:	656e4f2f 	strbvs	r4, [lr, #-3887]!	; 0xfffff0d1
     7f0:	76697244 	strbtvc	r7, [r9], -r4, asr #4
     7f4:	6f442f65 	svcvs	0x00442f65
     7f8:	656d756b 	strbvs	r7, [sp, #-1387]!	; 0xfffffa95
     7fc:	472f746e 	strmi	r7, [pc, -lr, ror #8]!
     800:	75487469 	strbvc	r7, [r8, #-1129]	; 0xfffffb97
     804:	41442f62 	cmpmi	r4, r2, ror #30
     808:	30393254 	eorscc	r3, r9, r4, asr r2
     80c:	72614c2d 	rsbvc	r4, r1, #11520	; 0x2d00
     810:	7379736d 	cmnvc	r9, #-1275068415	; 0xb4000001
     814:	2f6d6574 	svccs	0x006d6574
     818:	2f646f6b 	svccs	0x00646f6b
     81c:	2f62696c 	svccs	0x0062696c
     820:	2e4e4143 	dvfcsem	f4, f6, f3
     824:	50460063 	subpl	r0, r6, r3, rrx
     828:	52495f55 	subpl	r5, r9, #340	; 0x154
     82c:	55006e51 	strpl	r6, [r0, #-3665]	; 0xfffff1af
     830:	34545241 	ldrbcc	r5, [r4], #-577	; 0xfffffdbf
     834:	5152495f 	cmppl	r2, pc, asr r9
     838:	4143006e 	cmpmi	r3, lr, rrx
     83c:	46525f4e 	ldrbmi	r5, [r2], -lr, asr #30
     840:	4f004d4c 	svcmi	0x00004d4c
     844:	465f4754 			; <UNDEFINED> instruction: 0x465f4754
     848:	4b575f53 	blmi	15d859c <startup-0x1ea27a64>
     84c:	495f5055 	ldmdbmi	pc, {r0, r2, r4, r6, ip, lr}^	; <UNPREDICTABLE>
     850:	006e5152 	rsbeq	r5, lr, r2, asr r1
     854:	726f6f64 	rsbvc	r6, pc, #100, 30	; 0x190
     858:	5f64695f 	svcpl	0x0064695f
     85c:	58450031 	stmdapl	r5, {r0, r4, r5}^
     860:	5f344954 	svcpl	0x00344954
     864:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     868:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
     86c:	41445f36 	cmpmi	r4, r6, lsr pc
     870:	52495f43 	subpl	r5, r9, #268	; 0x10c
     874:	47006e51 	smlsdmi	r0, r1, lr, r6
     878:	5f4f4950 	svcpl	0x004f4950
     87c:	65657053 	strbvs	r7, [r5, #-83]!	; 0xffffffad
     880:	32490064 	subcc	r0, r9, #100	; 0x64
     884:	455f3243 	ldrbmi	r3, [pc, #-579]	; 649 <startup-0x1ffff9b7>
     888:	52495f56 	subpl	r5, r9, #344	; 0x158
     88c:	46006e51 			; <UNDEFINED> instruction: 0x46006e51
     890:	0052314d 	subseq	r3, r2, sp, asr #2
     894:	52484452 	subpl	r4, r8, #1375731712	; 0x52000000
     898:	48445400 	stmdami	r4, {sl, ip, lr}^
     89c:	46420052 			; <UNDEFINED> instruction: 0x46420052
     8a0:	43005241 	movwmi	r5, #577	; 0x241
     8a4:	465f4e41 	ldrbmi	r4, [pc], -r1, asr #28
     8a8:	65746c69 	ldrbvs	r6, [r4, #-3177]!	; 0xfffff397
     8ac:	73614d72 	cmnvc	r1, #7296	; 0x1c80
     8b0:	4864496b 	stmdami	r4!, {r0, r1, r3, r5, r6, r8, fp, lr}^
     8b4:	00686769 	rsbeq	r6, r8, r9, ror #14
     8b8:	4e67736d 	cdpmi	3, 6, cr7, cr7, cr13, {3}
     8bc:	44006d75 	strmi	r6, [r0], #-3445	; 0xfffff28b
     8c0:	5f31414d 	svcpl	0x0031414d
     8c4:	65727453 	ldrbvs	r7, [r2, #-1107]!	; 0xfffffbad
     8c8:	5f316d61 	svcpl	0x00316d61
     8cc:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     8d0:	414d4400 	cmpmi	sp, r0, lsl #8
     8d4:	74535f32 	ldrbvc	r5, [r3], #-3890	; 0xfffff0ce
     8d8:	6d616572 	cfstr64vs	mvdx6, [r1, #-456]!	; 0xfffffe38
     8dc:	52495f33 	subpl	r5, r9, #51, 30	; 0xcc
     8e0:	43006e51 	movwmi	r6, #3665	; 0xe51
     8e4:	5f324e41 	svcpl	0x00324e41
     8e8:	495f5854 	ldmdbmi	pc, {r2, r4, r6, fp, ip, lr}^	; <UNPREDICTABLE>
     8ec:	006e5152 	rsbeq	r5, lr, r2, asr r1
     8f0:	5f4e4143 	svcpl	0x004e4143
     8f4:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0xfffff6ac
     8f8:	00666544 	rsbeq	r6, r6, r4, asr #10
     8fc:	5f4e4143 	svcpl	0x004e4143
     900:	746c6946 	strbtvc	r6, [ip], #-2374	; 0xfffff6ba
     904:	754e7265 	strbvc	r7, [lr, #-613]	; 0xfffffd9b
     908:	7265626d 	rsbvc	r6, r5, #-805306362	; 0xd0000006
     90c:	755f5f00 	ldrbvc	r5, [pc, #-3840]	; fffffa14 <GPIO_Ports+0xdfffbc40>
     910:	6573756e 	ldrbvs	r7, [r3, #-1390]!	; 0xfffffa92
     914:	46730064 	ldrbtmi	r0, [r3], -r4, rrx
     918:	65746c69 	ldrbvs	r6, [r4, #-3177]!	; 0xfffff397
     91c:	67655272 			; <UNDEFINED> instruction: 0x67655272
     920:	65747369 	ldrbvs	r7, [r4, #-873]!	; 0xfffffc97
     924:	564e0072 			; <UNDEFINED> instruction: 0x564e0072
     928:	495f4349 	ldmdbmi	pc, {r0, r3, r6, r8, r9, lr}^	; <UNPREDICTABLE>
     92c:	68435152 	stmdavs	r3, {r1, r4, r6, r8, ip, lr}^
     930:	656e6e61 	strbvs	r6, [lr, #-3681]!	; 0xfffff19f
     934:	564e006c 	strbpl	r0, [lr], -ip, rrx
     938:	495f4349 	ldmdbmi	pc, {r0, r3, r6, r8, r9, lr}^	; <UNPREDICTABLE>
     93c:	68435152 	stmdavs	r3, {r1, r4, r6, r8, ip, lr}^
     940:	656e6e61 	strbvs	r6, [lr, #-3681]!	; 0xfffff19f
     944:	6275536c 	rsbsvs	r5, r5, #108, 6	; 0xb0000001
     948:	6f697250 	svcvs	0x00697250
     94c:	79746972 	ldmdbvc	r4!, {r1, r4, r5, r6, r8, fp, sp, lr}^
     950:	53494400 	movtpl	r4, #37888	; 0x9400
     954:	454c4241 	strbmi	r4, [ip, #-577]	; 0xfffffdbf
     958:	6e614300 	cdpvs	3, 6, cr4, cr1, cr0, {0}
     95c:	734d7852 	movtvc	r7, #55378	; 0xd852
     960:	41430067 	cmpmi	r3, r7, rrx
     964:	7369644e 	cmnvc	r9, #1308622848	; 0x4e000000
     968:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
     96c:	466c6c41 	strbtmi	r6, [ip], -r1, asr #24
     970:	65746c69 	ldrbvs	r6, [r4, #-3177]!	; 0xfffff397
     974:	6e614872 	mcrvs	8, 3, r4, cr1, cr2, {3}
     978:	72656c64 	rsbvc	r6, r5, #100, 24	; 0x6400
     97c:	69660073 	stmdbvs	r6!, {r0, r1, r4, r5, r6}^
     980:	7265746c 	rsbvc	r7, r5, #108, 8	; 0x6c000000
     984:	6f696e55 	svcvs	0x00696e55
     988:	4143006e 	cmpmi	r3, lr, rrx
     98c:	6e61684e 	cdpvs	8, 6, cr6, cr1, cr14, {2}
     990:	72656c64 	rsbvc	r6, r5, #100, 24	; 0x6400
     994:	7473694c 	ldrbtvc	r6, [r3], #-2380	; 0xfffff6b4
     998:	46746f4e 	ldrbtmi	r6, [r4], -lr, asr #30
     99c:	006c6c75 	rsbeq	r6, ip, r5, ror ip
     9a0:	31414d44 	cmpcc	r1, r4, asr #26
     9a4:	7274535f 	rsbsvc	r5, r4, #2080374785	; 0x7c000001
     9a8:	306d6165 	rsbcc	r6, sp, r5, ror #2
     9ac:	5152495f 	cmppl	r2, pc, asr r9
     9b0:	5452006e 	ldrbpl	r0, [r2], #-110	; 0xffffff92
     9b4:	6c415f43 	mcrrvs	15, 4, r5, r1, cr3
     9b8:	5f6d7261 	svcpl	0x006d7261
     9bc:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     9c0:	4e414300 	cdpmi	3, 4, cr4, cr1, cr0, {0}
     9c4:	5557415f 	ldrbpl	r4, [r7, #-351]	; 0xfffffea1
     9c8:	564e004d 	strbpl	r0, [lr], -sp, asr #32
     9cc:	545f4349 	ldrbpl	r4, [pc], #-841	; 9d4 <startup-0x1ffff62c>
     9d0:	00657079 	rsbeq	r7, r5, r9, ror r0
     9d4:	636e7546 	cmnvs	lr, #293601280	; 0x11800000
     9d8:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
     9dc:	74536c61 	ldrbvc	r6, [r3], #-3169	; 0xfffff39f
     9e0:	00657461 	rsbeq	r7, r5, r1, ror #8
     9e4:	33433249 	movtcc	r3, #12873	; 0x3249
     9e8:	5f52455f 	svcpl	0x0052455f
     9ec:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     9f0:	59524300 	ldmdbpl	r2, {r8, r9, lr}^
     9f4:	52495f50 	subpl	r5, r9, #80, 30	; 0x140
     9f8:	45006e51 	strmi	r6, [r0, #-3665]	; 0xfffff1af
     9fc:	31495458 	cmpcc	r9, r8, asr r4
     a00:	30315f35 	eorscc	r5, r1, r5, lsr pc
     a04:	5152495f 	cmppl	r2, pc, asr r9
     a08:	6f6c006e 	svcvs	0x006c006e
     a0c:	6c20676e 	stcvs	7, cr6, [r0], #-440	; 0xfffffe48
     a10:	20676e6f 	rsbcs	r6, r7, pc, ror #28
     a14:	69736e75 	ldmdbvs	r3!, {r0, r2, r4, r5, r6, r9, sl, fp, sp, lr}^
     a18:	64656e67 	strbtvs	r6, [r5], #-3687	; 0xfffff199
     a1c:	746e6920 	strbtvc	r6, [lr], #-2336	; 0xfffff6e0
     a20:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
     a24:	52495f33 	subpl	r5, r9, #51, 30	; 0xcc
     a28:	55006e51 	strpl	r6, [r0, #-3665]	; 0xfffff1af
     a2c:	54524153 	ldrbpl	r4, [r2], #-339	; 0xfffffead
     a30:	52495f31 	subpl	r5, r9, #49, 30	; 0xc4
     a34:	68006e51 	stmdavs	r0, {r0, r4, r6, r9, sl, fp, sp, lr}
     a38:	6c646e61 	stclvs	14, cr6, [r4], #-388	; 0xfffffe7c
     a3c:	65725f65 	ldrbvs	r5, [r2, #-3941]!	; 0xfffff09b
     a40:	76656963 	strbtvc	r6, [r5], -r3, ror #18
     a44:	64695f65 	strbtvs	r5, [r9], #-3941	; 0xfffff09b
     a48:	67736d5f 			; <UNDEFINED> instruction: 0x67736d5f
     a4c:	4e414300 	cdpmi	3, 4, cr4, cr1, cr0, {0}
     a50:	52414e5f 	subpl	r4, r1, #1520	; 0x5f0
     a54:	44520054 	ldrbmi	r0, [r2], #-84	; 0xffffffac
     a58:	4300524c 	movwmi	r5, #588	; 0x24c
     a5c:	465f4e41 	ldrbmi	r4, [pc], -r1, asr #28
     a60:	4d4f4649 	stclmi	6, cr4, [pc, #-292]	; 944 <startup-0x1ffff6bc>
     a64:	426c6961 	rsbmi	r6, ip, #1589248	; 0x184000
     a68:	545f786f 	ldrbpl	r7, [pc], #-2159	; a70 <startup-0x1ffff590>
     a6c:	44657079 	strbtmi	r7, [r5], #-121	; 0xffffff87
     a70:	47006665 	strmi	r6, [r0, -r5, ror #12]
     a74:	5f4f4950 	svcpl	0x004f4950
     a78:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xfffff1b7
     a7c:	75727453 	ldrbvc	r7, [r2, #-1107]!	; 0xfffffbad
     a80:	72757463 	rsbsvc	r7, r5, #1660944384	; 0x63000000
     a84:	50470065 	subpl	r0, r7, r5, rrx
     a88:	4d5f4f49 	ldclmi	15, cr4, [pc, #-292]	; 96c <startup-0x1ffff694>
     a8c:	0065646f 	rsbeq	r6, r5, pc, ror #8
     a90:	524c4454 	subpl	r4, ip, #84, 8	; 0x54000000
     a94:	4e414300 	cdpmi	3, 4, cr4, cr1, cr0, {0}
     a98:	58525f32 	ldmdapl	r2, {r1, r4, r5, r8, r9, sl, fp, ip, lr}^
     a9c:	52495f31 	subpl	r5, r9, #49, 30	; 0xc4
     aa0:	41006e51 	tstmi	r0, r1, asr lr
     aa4:	495f4344 	ldmdbmi	pc, {r2, r6, r8, r9, lr}^	; <UNPREDICTABLE>
     aa8:	006e5152 	rsbeq	r5, lr, r2, asr r1
     aac:	5f4e4143 	svcpl	0x004e4143
     ab0:	746c6946 	strbtvc	r6, [ip], #-2374	; 0xfffff6ba
     ab4:	64497265 	strbvs	r7, [r9], #-613	; 0xfffffd9b
     ab8:	68676948 	stmdavs	r7!, {r3, r6, r8, fp, sp, lr}^
     abc:	45434900 	strbmi	r4, [r3, #-2304]	; 0xfffff700
     ac0:	50470052 	subpl	r0, r7, r2, asr r0
     ac4:	6f4d4f49 	svcvs	0x004d4f49
     ac8:	545f6564 	ldrbpl	r6, [pc], #-1380	; ad0 <startup-0x1ffff530>
     acc:	44657079 	strbtmi	r7, [r5], #-121	; 0xffffff87
     ad0:	50006665 	andpl	r6, r0, r5, ror #12
     ad4:	495f4456 	ldmdbmi	pc, {r1, r2, r4, r6, sl, lr}^	; <UNPREDICTABLE>
     ad8:	006e5152 	rsbeq	r5, lr, r2, asr r1
     adc:	52534641 	subspl	r4, r3, #68157440	; 0x4100000
     ae0:	59544f00 	ldmdbpl	r4, {r8, r9, sl, fp, lr}^
     ae4:	00524550 	subseq	r4, r2, r0, asr r5
     ae8:	464e4143 	strbmi	r4, [lr], -r3, asr #2
     aec:	65746c69 	ldrbvs	r6, [r4, #-3177]!	; 0xfffff397
     af0:	6e614872 	mcrvs	8, 3, r4, cr1, cr2, {3}
     af4:	72656c64 	rsbvc	r6, r5, #100, 24	; 0x6400
     af8:	4d534600 	ldclmi	6, cr4, [r3, #-0]
     afc:	52495f43 	subpl	r5, r9, #268	; 0x10c
     b00:	45006e51 	strmi	r6, [r0, #-3665]	; 0xfffff1af
     b04:	30495458 	subcc	r5, r9, r8, asr r4
     b08:	5152495f 	cmppl	r2, pc, asr r9
     b0c:	4643006e 	strbmi	r0, [r3], -lr, rrx
     b10:	44005253 	strmi	r5, [r0], #-595	; 0xfffffdad
     b14:	5f31414d 	svcpl	0x0031414d
     b18:	65727453 	ldrbvs	r7, [r2, #-1107]!	; 0xfffffbad
     b1c:	5f346d61 	svcpl	0x00346d61
     b20:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     b24:	414d4400 	cmpmi	sp, r0, lsl #8
     b28:	74535f32 	ldrbvc	r5, [r3], #-3890	; 0xfffff0ce
     b2c:	6d616572 	cfstr64vs	mvdx6, [r1, #-456]!	; 0xfffffe38
     b30:	52495f36 	subpl	r5, r9, #54, 30	; 0xd8
     b34:	47006e51 	smlsdmi	r0, r1, lr, r6
     b38:	534f4950 	movtpl	r4, #63824	; 0xf950
     b3c:	64656570 	strbtvs	r6, [r5], #-1392	; 0xfffffa90
     b40:	7079545f 	rsbsvc	r5, r9, pc, asr r4
     b44:	66654465 	strbtvs	r4, [r5], -r5, ror #8
     b48:	62654400 	rsbvs	r4, r5, #0, 8
     b4c:	6f4d6775 	svcvs	0x004d6775
     b50:	6f74696e 	svcvs	0x0074696e
     b54:	52495f72 	subpl	r5, r9, #456	; 0x1c8
     b58:	47006e51 	smlsdmi	r0, r1, lr, r6
     b5c:	5f4f4950 	svcpl	0x004f4950
     b60:	006e6950 	rsbeq	r6, lr, r0, asr r9
     b64:	52315346 	eorspl	r5, r1, #402653185	; 0x18000001
     b68:	43324900 	teqmi	r2, #0, 18
     b6c:	56455f33 			; <UNDEFINED> instruction: 0x56455f33
     b70:	5152495f 	cmppl	r2, pc, asr r9
     b74:	4143006e 	cmpmi	r3, lr, rrx
     b78:	78545f4e 	ldmdavc	r4, {r1, r2, r3, r6, r8, r9, sl, fp, ip, lr}^
     b7c:	6c69614d 	stfvse	f6, [r9], #-308	; 0xfffffecc
     b80:	5f786f42 	svcpl	0x00786f42
     b84:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0xfffff6ac
     b88:	00666544 	rsbeq	r6, r6, r4, asr #10
     b8c:	4f495047 	svcmi	0x00495047
     b90:	5075505f 	rsbspl	r5, r5, pc, asr r0
     b94:	54450064 	strbpl	r0, [r5], #-100	; 0xffffff9c
     b98:	52495f48 	subpl	r5, r9, #72, 30	; 0x120
     b9c:	43006e51 	movwmi	r6, #3665	; 0xe51
     ba0:	465f4e41 	ldrbmi	r4, [pc], -r1, asr #28
     ba4:	65746c69 	ldrbvs	r6, [r4, #-3177]!	; 0xfffff397
     ba8:	73614d72 	cmnvc	r1, #7296	; 0x1c80
     bac:	4c64496b 			; <UNDEFINED> instruction: 0x4c64496b
     bb0:	4d00776f 	stcmi	7, cr7, [r0, #-444]	; 0xfffffe44
     bb4:	0052464d 	subseq	r4, r2, sp, asr #12
     bb8:	41464d4d 	cmpmi	r6, sp, asr #26
     bbc:	68730052 	ldmdavs	r3!, {r1, r4, r6}^
     bc0:	2074726f 	rsbscs	r7, r4, pc, ror #4
     bc4:	00746e69 	rsbseq	r6, r4, r9, ror #28
     bc8:	5f434352 	svcpl	0x00434352
     bcc:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     bd0:	41464600 	cmpmi	r6, r0, lsl #12
     bd4:	49005231 	stmdbmi	r0, {r0, r4, r5, r9, ip, lr}
     bd8:	00524153 	subseq	r4, r2, r3, asr r1
     bdc:	31414d44 	cmpcc	r1, r4, asr #26
     be0:	7274535f 	rsbsvc	r5, r4, #2080374785	; 0x7c000001
     be4:	336d6165 	cmncc	sp, #1073741849	; 0x40000019
     be8:	5152495f 	cmppl	r2, pc, asr r9
     bec:	5355006e 	cmppl	r5, #110	; 0x6e
     bf0:	32545241 	subscc	r5, r4, #268435460	; 0x10000004
     bf4:	5152495f 	cmppl	r2, pc, asr r9
     bf8:	6e69006e 	cdpvs	0, 6, cr0, cr9, cr14, {3}
     bfc:	00786564 	rsbseq	r6, r8, r4, ror #10
     c00:	42414e45 	submi	r4, r1, #1104	; 0x450
     c04:	4300454c 	movwmi	r4, #1356	; 0x54c
     c08:	425f4e41 	subsmi	r4, pc, #1040	; 0x410
     c0c:	43003153 	movwmi	r3, #339	; 0x153
     c10:	425f4e41 	subsmi	r4, pc, #1040	; 0x410
     c14:	43003253 	movwmi	r3, #595	; 0x253
     c18:	465f4e41 	ldrbmi	r4, [pc], -r1, asr #28
     c1c:	65746c69 	ldrbvs	r6, [r4, #-3177]!	; 0xfffff397
     c20:	646f4d72 	strbtvs	r4, [pc], #-3442	; c28 <startup-0x1ffff3d8>
     c24:	41430065 	cmpmi	r3, r5, rrx
     c28:	6464614e 	strbtvs	r6, [r4], #-334	; 0xfffffeb2
     c2c:	746c6946 	strbtvc	r6, [ip], #-2374	; 0xfffff6ba
     c30:	61487265 	cmpvs	r8, r5, ror #4
     c34:	656c646e 	strbvs	r6, [ip, #-1134]!	; 0xfffffb92
     c38:	69660072 	stmdbvs	r6!, {r1, r4, r5, r6}^
     c3c:	7265746c 	rsbvc	r7, r5, #108, 8	; 0x6c000000
     c40:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
     c44:	79545f4f 	ldmdbvc	r4, {r0, r1, r2, r3, r6, r8, r9, sl, fp, ip, lr}^
     c48:	65446570 	strbvs	r6, [r4, #-1392]	; 0xfffffa90
     c4c:	49540066 	ldmdbmi	r4, {r1, r2, r5, r6}^
     c50:	555f314d 	ldrbpl	r3, [pc, #-333]	; b0b <startup-0x1ffff4f5>
     c54:	49545f50 	ldmdbmi	r4, {r4, r6, r8, r9, sl, fp, ip, lr}^
     c58:	5f30314d 	svcpl	0x0030314d
     c5c:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     c60:	4d544900 	vldrmi.16	s9, [r4, #-0]	; <UNPREDICTABLE>
     c64:	4278525f 	rsbsmi	r5, r8, #-268435451	; 0xf0000005
     c68:	65666675 	strbvs	r6, [r6, #-1653]!	; 0xfffff98b
     c6c:	41430072 	hvcmi	12290	; 0x3002
     c70:	6c69464e 	stclvs	6, cr4, [r9], #-312	; 0xfffffec8
     c74:	00726574 	rsbseq	r6, r2, r4, ror r5
     c78:	6f696e75 	svcvs	0x00696e75
     c7c:	73614d6e 	cmnvc	r1, #7040	; 0x1b80
     c80:	6564006b 	strbvs	r0, [r4, #-107]!	; 0xffffff95
     c84:	65646f63 	strbvs	r6, [r4, #-3939]!	; 0xfffff09d
     c88:	6f6f645f 	svcvs	0x006f645f
     c8c:	6f635f72 	svcvs	0x00635f72
     c90:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
     c94:	67736d5f 			; <UNDEFINED> instruction: 0x67736d5f
     c98:	47544f00 	ldrbmi	r4, [r4, -r0, lsl #30]
     c9c:	5f53485f 	svcpl	0x0053485f
     ca0:	5f315045 	svcpl	0x00315045
     ca4:	5f54554f 	svcpl	0x0054554f
     ca8:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     cac:	74616400 	strbtvc	r6, [r1], #-1024	; 0xfffffc00
     cb0:	6f705f61 	svcvs	0x00705f61
     cb4:	65746e69 	ldrbvs	r6, [r4, #-3689]!	; 0xfffff197
     cb8:	6f6c0072 	svcvs	0x006c0072
     cbc:	64656b63 	strbtvs	r6, [r5], #-2915	; 0xfffff49d
     cc0:	444f4d00 	strbmi	r4, [pc], #-3328	; cc8 <startup-0x1ffff338>
     cc4:	4e005245 	cdpmi	2, 0, cr5, cr0, cr5, {2}
     cc8:	5f434956 	svcpl	0x00434956
     ccc:	50746553 	rsbspl	r6, r4, r3, asr r5
     cd0:	726f6972 	rsbvc	r6, pc, #1867776	; 0x1c8000
     cd4:	00797469 	rsbseq	r7, r9, r9, ror #8
     cd8:	314e4143 	cmpcc	lr, r3, asr #2
     cdc:	3158525f 	cmpcc	r8, pc, asr r2
     ce0:	5152495f 	cmppl	r2, pc, asr r9
     ce4:	5047006e 	subpl	r0, r7, lr, rrx
     ce8:	505f4f49 	subspl	r4, pc, r9, asr #30
     cec:	5f645075 	svcpl	0x00645075
     cf0:	45005055 	strmi	r5, [r0, #-85]	; 0xffffffab
     cf4:	39495458 	stmdbcc	r9, {r3, r4, r6, sl, ip, lr}^
     cf8:	495f355f 	ldmdbmi	pc, {r0, r1, r2, r3, r4, r6, r8, sl, ip, sp}^	; <UNPREDICTABLE>
     cfc:	006e5152 	rsbeq	r5, lr, r2, asr r1
     d00:	4349564e 	movtmi	r5, #38478	; 0x964e
     d04:	696e495f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, lr}^
     d08:	70795474 	rsbsvc	r5, r9, r4, ror r4
     d0c:	66654465 	strbtvs	r4, [r5], -r5, ror #8
     d10:	6f687300 	svcvs	0x00687300
     d14:	75207472 	strvc	r7, [r0, #-1138]!	; 0xfffffb8e
     d18:	6769736e 	strbvs	r7, [r9, -lr, ror #6]!
     d1c:	2064656e 	rsbcs	r6, r4, lr, ror #10
     d20:	00746e69 	rsbseq	r6, r4, r9, ror #28
     d24:	384d4954 	stmdacc	sp, {r2, r4, r6, r8, fp, lr}^
     d28:	5f43435f 	svcpl	0x0043435f
     d2c:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     d30:	49445300 	stmdbmi	r4, {r8, r9, ip, lr}^
     d34:	52495f4f 	subpl	r5, r9, #316	; 0x13c
     d38:	43006e51 	movwmi	r6, #3665	; 0xe51
     d3c:	52434150 	subpl	r4, r3, #80, 2
     d40:	50534900 	subspl	r4, r3, r0, lsl #18
     d44:	58450052 	stmdapl	r5, {r1, r4, r6}^
     d48:	5f334954 	svcpl	0x00334954
     d4c:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     d50:	6e655000 	cdpvs	0, 6, cr5, cr5, cr0, {0}
     d54:	5f565364 	svcpl	0x00565364
     d58:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     d5c:	47544f00 	ldrbmi	r4, [r4, -r0, lsl #30]
     d60:	5f53485f 	svcpl	0x0053485f
     d64:	5f315045 	svcpl	0x00315045
     d68:	495f4e49 	ldmdbmi	pc, {r0, r3, r6, r9, sl, fp, lr}^	; <UNPREDICTABLE>
     d6c:	006e5152 	rsbeq	r5, lr, r2, asr r1
     d70:	4d785473 	cfldrdmi	mvd5, [r8, #-460]!	; 0xfffffe34
     d74:	426c6961 	rsbmi	r6, ip, #1589248	; 0x184000
     d78:	4400786f 	strmi	r7, [r0], #-2159	; 0xfffff791
     d7c:	5f31414d 	svcpl	0x0031414d
     d80:	65727453 	ldrbvs	r7, [r2, #-1107]!	; 0xfffffbad
     d84:	5f376d61 	svcpl	0x00376d61
     d88:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     d8c:	695f5f00 	ldmdbvs	pc, {r8, r9, sl, fp, ip, lr}^	; <UNPREDICTABLE>
     d90:	3233746e 	eorscc	r7, r3, #1845493760	; 0x6e000000
     d94:	4900745f 	stmdbmi	r0, {r0, r1, r2, r3, r4, r6, sl, ip, sp, lr}
     d98:	00524553 	subseq	r4, r2, r3, asr r5
     d9c:	5f4e4143 	svcpl	0x004e4143
     da0:	746c6946 	strbtvc	r6, [ip], #-2374	; 0xfffff6ba
     da4:	6e497265 	cdpvs	2, 4, cr7, cr9, cr5, {3}
     da8:	79547469 	ldmdbvc	r4, {r0, r3, r5, r6, sl, ip, sp, lr}^
     dac:	65446570 	strbvs	r6, [r4, #-1392]	; 0xfffffa90
     db0:	44520066 	ldrbmi	r0, [r2], #-102	; 0xffffff9a
     db4:	43005254 	movwmi	r5, #596	; 0x254
     db8:	545f4e41 	ldrbpl	r4, [pc], #-3649	; dc0 <startup-0x1ffff240>
     dbc:	00504658 	subseq	r4, r0, r8, asr r6
     dc0:	52544454 	subspl	r4, r4, #84, 8	; 0x54000000
     dc4:	74657300 	strbtvc	r7, [r5], #-768	; 0xfffffd00
     dc8:	73736553 	cmnvc	r3, #348127232	; 0x14c00000
     dcc:	496e6f69 	stmdbmi	lr!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
     dd0:	4d440064 	stclmi	0, cr0, [r4, #-400]	; 0xfffffe70
     dd4:	535f3241 	cmppl	pc, #268435460	; 0x10000004
     dd8:	61657274 	smcvs	22308	; 0x5724
     ddc:	495f326d 	ldmdbmi	pc, {r0, r2, r3, r5, r6, r9, ip, sp}^	; <UNPREDICTABLE>
     de0:	006e5152 	rsbeq	r5, lr, r2, asr r1
     de4:	4f495047 	svcmi	0x00495047
     de8:	7361465f 	cmnvc	r1, #99614720	; 0x5f00000
     dec:	70535f74 	subsvc	r5, r3, r4, ror pc
     df0:	00646565 	rsbeq	r6, r4, r5, ror #10
     df4:	5f4e4143 	svcpl	0x004e4143
     df8:	6e496544 	cdpvs	5, 4, cr6, cr9, cr4, {2}
     dfc:	43007469 	movwmi	r7, #1129	; 0x469
     e00:	435f4e41 	cmpmi	pc, #1040	; 0x410
     e04:	7261656c 	rsbvc	r6, r1, #108, 10	; 0x1b000000
     e08:	67616c46 	strbvs	r6, [r1, -r6, asr #24]!
     e0c:	4d785200 	lfmmi	f5, 2, [r8, #-0]
     e10:	61737365 	cmnvs	r3, r5, ror #6
     e14:	43006567 	movwmi	r6, #1383	; 0x567
     e18:	73552f3a 	cmpvc	r5, #58, 30	; 0xe8
     e1c:	2f737265 	svccs	0x00737265
     e20:	6d616441 	cfstrdvs	mvd6, [r1, #-260]!	; 0xfffffefc
     e24:	6e4f2f74 	mcrvs	15, 2, r2, cr15, cr4, {3}
     e28:	69724465 	ldmdbvs	r2!, {r0, r2, r5, r6, sl, lr}^
     e2c:	442f6576 	strtmi	r6, [pc], #-1398	; e34 <startup-0x1ffff1cc>
     e30:	6d756b6f 	fldmdbxvs	r5!, {d22-d76}	;@ Deprecated
     e34:	2f746e65 	svccs	0x00746e65
     e38:	48746947 	ldmdami	r4!, {r0, r1, r2, r6, r8, fp, sp, lr}^
     e3c:	442f6275 	strtmi	r6, [pc], #-629	; e44 <startup-0x1ffff1bc>
     e40:	39325441 	ldmdbcc	r2!, {r0, r6, sl, ip, lr}
     e44:	614c2d30 	cmpvs	ip, r0, lsr sp
     e48:	79736d72 	ldmdbvc	r3!, {r1, r4, r5, r6, r8, sl, fp, sp, lr}^
     e4c:	6d657473 	cfstrdvs	mvd7, [r5, #-460]!	; 0xfffffe34
     e50:	646f6b2f 	strbtvs	r6, [pc], #-2863	; e58 <startup-0x1ffff1a8>
     e54:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
     e58:	4d54532f 	ldclmi	3, cr5, [r4, #-188]	; 0xffffff44
     e5c:	34463233 	strbcc	r3, [r6], #-563	; 0xfffffdcd
     e60:	62696c5f 	rsbvs	r6, r9, #24320	; 0x5f00
     e64:	4d54532f 	ldclmi	3, cr5, [r4, #-188]	; 0xffffff44
     e68:	34463233 	strbcc	r3, [r6], #-563	; 0xfffffdcd
     e6c:	535f7878 	cmppl	pc, #120, 16	; 0x780000
     e70:	65506474 	ldrbvs	r6, [r0, #-1140]	; 0xfffffb8c
     e74:	68706972 	ldmdavs	r0!, {r1, r4, r5, r6, r8, fp, sp, lr}^
     e78:	6972445f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, sl, lr}^
     e7c:	2f726576 	svccs	0x00726576
     e80:	2f637273 	svccs	0x00637273
     e84:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
     e88:	78346632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, sp, lr}
     e8c:	61635f78 	smcvs	13816	; 0x35f8
     e90:	00632e6e 	rsbeq	r2, r3, lr, ror #28
     e94:	5f4e4143 	svcpl	0x004e4143
     e98:	75727453 	ldrbvc	r7, [r2, #-1107]!	; 0xfffffbad
     e9c:	6e497463 	cdpvs	4, 4, cr7, cr9, cr3, {3}
     ea0:	73007469 	movwvc	r7, #1129	; 0x469
     ea4:	7065656c 	rsbvc	r6, r5, ip, ror #10
     ea8:	74617473 	strbtvc	r7, [r1], #-1139	; 0xfffffb8d
     eac:	43007375 	movwmi	r7, #885	; 0x375
     eb0:	465f4e41 	ldrbmi	r4, [pc], -r1, asr #28
     eb4:	65746c69 	ldrbvs	r6, [r4, #-3177]!	; 0xfffff397
     eb8:	696e4972 	stmdbvs	lr!, {r1, r4, r5, r6, r8, fp, lr}^
     ebc:	72745374 	rsbsvc	r5, r4, #116, 6	; 0xd0000001
     ec0:	00746375 	rsbseq	r6, r4, r5, ror r3
     ec4:	5f4e4143 	svcpl	0x004e4143
     ec8:	4f464946 	svcmi	0x00464946
     ecc:	656c6552 	strbvs	r6, [ip, #-1362]!	; 0xfffffaae
     ed0:	00657361 	rsbeq	r7, r5, r1, ror #6
     ed4:	5f4e4143 	svcpl	0x004e4143
     ed8:	6f435454 	svcvs	0x00435454
     edc:	646f4d6d 	strbtvs	r4, [pc], #-3437	; ee4 <startup-0x1ffff11c>
     ee0:	646d4365 	strbtvs	r4, [sp], #-869	; 0xfffffc9b
     ee4:	73656d00 	cmnvc	r5, #0, 26
     ee8:	65676173 	strbvs	r6, [r7, #-371]!	; 0xfffffe8d
     eec:	6e65705f 	mcrvs	0, 3, r7, cr5, cr15, {2}
     ef0:	676e6964 	strbvs	r6, [lr, -r4, ror #18]!
     ef4:	4e414300 	cdpmi	3, 4, cr4, cr1, cr0, {0}
     ef8:	6172545f 	cmnvs	r2, pc, asr r4
     efc:	696d736e 	stmdbvs	sp!, {r1, r2, r3, r5, r6, r8, r9, ip, sp, lr}^
     f00:	61745374 	cmnvs	r4, r4, ror r3
     f04:	00737574 	rsbseq	r7, r3, r4, ror r5
     f08:	5f4e4143 	svcpl	0x004e4143
     f0c:	6b6e6142 	blvs	1b9941c <startup-0x1e466be4>
     f10:	626d754e 	rsbvs	r7, sp, #327155712	; 0x13800000
     f14:	43007265 	movwmi	r7, #613	; 0x265
     f18:	475f4e41 	ldrbmi	r4, [pc, -r1, asr #28]
     f1c:	534c7465 	movtpl	r7, #50277	; 0xc465
     f20:	61725442 	cmnvs	r2, r2, asr #8
     f24:	696d736e 	stmdbvs	sp!, {r1, r2, r3, r5, r6, r8, r9, ip, sp, lr}^
     f28:	72724574 	rsbsvc	r4, r2, #116, 10	; 0x1d000000
     f2c:	6f43726f 	svcvs	0x0043726f
     f30:	65746e75 	ldrbvs	r6, [r4, #-3701]!	; 0xfffff18b
     f34:	41430072 	hvcmi	12290	; 0x3002
     f38:	65475f4e 	strbvs	r5, [r7, #-3918]	; 0xfffff0b2
     f3c:	73614c74 	cmnvc	r1, #116, 24	; 0x7400
     f40:	72724574 	rsbsvc	r4, r2, #116, 10	; 0x1d000000
     f44:	6f43726f 	svcvs	0x0043726f
     f48:	49006564 	stmdbmi	r0, {r2, r5, r6, r8, sl, sp, lr}
     f4c:	5374696e 	cmnpl	r4, #1802240	; 0x1b8000
     f50:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0xfffffe8c
     f54:	41430073 	hvcmi	12291	; 0x3003
     f58:	61575f4e 	cmpvs	r7, lr, asr #30
     f5c:	7055656b 	subsvc	r6, r5, fp, ror #10
     f60:	77654e00 	strbvc	r4, [r5, -r0, lsl #28]!
     f64:	74617453 	strbtvc	r7, [r1], #-1107	; 0xfffffbad
     f68:	41430065 	cmpmi	r3, r5, rrx
     f6c:	61435f4e 	cmpvs	r3, lr, asr #30
     f70:	6c65636e 	stclvs	3, cr6, [r5], #-440	; 0xfffffe48
     f74:	6e617254 	mcrvs	2, 3, r7, cr1, cr4, {2}
     f78:	74696d73 	strbtvc	r6, [r9], #-3443	; 0xfffff28d
     f7c:	4e414300 	cdpmi	3, 4, cr4, cr1, cr0, {0}
     f80:	696e495f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, lr}^
     f84:	72745374 	rsbsvc	r5, r4, #116, 6	; 0xd0000001
     f88:	00746375 	rsbseq	r6, r4, r5, ror r3
     f8c:	654d7854 	strbvs	r7, [sp, #-2132]	; 0xfffff7ac
     f90:	67617373 			; <UNDEFINED> instruction: 0x67617373
     f94:	41430065 	cmpmi	r3, r5, rrx
     f98:	654d5f4e 	strbvs	r5, [sp, #-3918]	; 0xfffff0b2
     f9c:	67617373 			; <UNDEFINED> instruction: 0x67617373
     fa0:	6e655065 	cdpvs	0, 6, cr5, cr5, cr5, {3}
     fa4:	676e6964 	strbvs	r6, [lr, -r4, ror #18]!
     fa8:	4e414300 	cdpmi	3, 4, cr4, cr1, cr0, {0}
     fac:	616c535f 	cmnvs	ip, pc, asr r3
     fb0:	74536576 	ldrbvc	r6, [r3], #-1398	; 0xfffffa8a
     fb4:	42747261 	rsbsmi	r7, r4, #268435462	; 0x10000006
     fb8:	006b6e61 	rsbeq	r6, fp, r1, ror #28
     fbc:	5f4e4143 	svcpl	0x004e4143
     fc0:	7265704f 	rsbvc	r7, r5, #79	; 0x4f
     fc4:	6e697461 	cdpvs	4, 6, cr7, cr9, cr1, {3}
     fc8:	646f4d67 	strbtvs	r4, [pc], #-3431	; fd0 <startup-0x1ffff030>
     fcc:	71655265 	cmnvc	r5, r5, ror #4
     fd0:	74736575 	ldrbtvc	r6, [r3], #-1397	; 0xfffffa8b
     fd4:	6d697400 	cfstrdvs	mvd7, [r9, #-0]
     fd8:	74756f65 	ldrbtvc	r6, [r5], #-3941	; 0xfffff09b
     fdc:	4e414300 	cdpmi	3, 4, cr4, cr1, cr0, {0}
     fe0:	6172545f 	cmnvs	r2, pc, asr r4
     fe4:	696d736e 	stmdbvs	sp!, {r1, r2, r3, r5, r6, r8, r9, ip, sp, lr}^
     fe8:	41430074 	hvcmi	12292	; 0x3004
     fec:	54495f4e 	strbpl	r5, [r9], #-3918	; 0xfffff0b2
     ff0:	4e414300 	cdpmi	3, 4, cr4, cr1, cr0, {0}
     ff4:	696e495f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, lr}^
     ff8:	41430074 	hvcmi	12292	; 0x3004
     ffc:	6c535f4e 	mrrcvs	15, 4, r5, r3, cr14
    1000:	00706565 	rsbseq	r6, r0, r5, ror #10
    1004:	425f7449 	subsmi	r7, pc, #1224736768	; 0x49000000
    1008:	43007469 	movwmi	r7, #1129	; 0x469
    100c:	475f4e41 	ldrbmi	r4, [pc, -r1, asr #28]
    1010:	54497465 	strbpl	r7, [r9], #-1125	; 0xfffffb9b
    1014:	74617453 	strbtvc	r7, [r1], #-1107	; 0xfffffbad
    1018:	43007375 	movwmi	r7, #885	; 0x375
    101c:	465f4e41 	ldrbmi	r4, [pc], -r1, asr #28
    1020:	0047414c 	subeq	r4, r7, ip, asr #2
    1024:	74696177 	strbtvc	r6, [r9], #-375	; 0xfffffe89
    1028:	616c735f 	cmnvs	ip, pc, asr r3
    102c:	4946006b 	stmdbmi	r6, {r0, r1, r3, r5, r6}^
    1030:	754e4f46 	strbvc	r4, [lr, #-3910]	; 0xfffff0ba
    1034:	7265626d 	rsbvc	r6, r5, #-805306362	; 0xd0000006
    1038:	72726500 	rsbsvc	r6, r2, #0, 10
    103c:	6f63726f 	svcvs	0x0063726f
    1040:	70006564 	andvc	r6, r0, r4, ror #10
    1044:	69646e65 	stmdbvs	r4!, {r0, r2, r5, r6, r9, sl, fp, sp, lr}^
    1048:	6962676e 	stmdbvs	r2!, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}^
    104c:	61747374 	cmnvs	r4, r4, ror r3
    1050:	00737574 	rsbseq	r7, r3, r4, ror r5
    1054:	5f4e4143 	svcpl	0x004e4143
    1058:	00676552 	rsbeq	r6, r7, r2, asr r5
    105c:	5f4e4143 	svcpl	0x004e4143
    1060:	46474244 	strbmi	r4, [r7], -r4, asr #4
    1064:	7a656572 	bvc	195a634 <startup-0x1e6a59cc>
    1068:	41430065 	cmpmi	r3, r5, rrx
    106c:	704f5f4e 	subvc	r5, pc, lr, asr #30
    1070:	74617265 	strbtvc	r7, [r1], #-613	; 0xfffffd9b
    1074:	4d676e69 	stclmi	14, cr6, [r7, #-420]!	; 0xfffffe5c
    1078:	0065646f 	rsbeq	r6, r5, pc, ror #8
    107c:	67616c66 	strbvs	r6, [r1, -r6, ror #24]!
    1080:	00706d74 	rsbseq	r6, r0, r4, ror sp
    1084:	5f4e4143 	svcpl	0x004e4143
    1088:	46746547 	ldrbtmi	r6, [r4], -r7, asr #10
    108c:	5367616c 	cmnpl	r7, #108, 2
    1090:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0xfffffe8c
    1094:	41430073 	hvcmi	12291	; 0x3003
    1098:	54495f4e 	strbpl	r5, [r9], #-3918	; 0xfffff0b2
    109c:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    10a0:	43006769 	movwmi	r6, #1897	; 0x769
    10a4:	00784e41 	rsbseq	r4, r8, r1, asr #28
    10a8:	5f4e4143 	svcpl	0x004e4143
    10ac:	65636552 	strbvs	r6, [r3, #-1362]!	; 0xfffffaae
    10b0:	00657669 	rsbeq	r7, r5, r9, ror #12
    10b4:	6e617254 	mcrvs	2, 3, r7, cr1, cr4, {2}
    10b8:	74696d73 	strbtvc	r6, [r9], #-3443	; 0xfffff28d
    10bc:	6c69614d 	stfvse	f6, [r9], #-308	; 0xfffffecc
    10c0:	00786f62 	rsbseq	r6, r8, r2, ror #30
    10c4:	63656843 	cmnvs	r5, #4390912	; 0x430000
    10c8:	5354496b 	cmppl	r4, #1753088	; 0x1ac000
    10cc:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0xfffffe8c
    10d0:	41430073 	hvcmi	12291	; 0x3003
    10d4:	6c435f4e 	mcrrvs	15, 4, r5, r3, cr14
    10d8:	49726165 	ldmdbmi	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    10dc:	6e655054 	mcrvs	0, 3, r5, cr5, cr4, {2}
    10e0:	676e6964 	strbvs	r6, [lr, -r4, ror #18]!
    10e4:	00746942 	rsbseq	r6, r4, r2, asr #18
    10e8:	6e617274 	mcrvs	2, 3, r7, cr1, cr4, {3}
    10ec:	74696d73 	strbtvc	r6, [r9], #-3443	; 0xfffff28d
    10f0:	69616d5f 	stmdbvs	r1!, {r0, r1, r2, r3, r4, r6, r8, sl, fp, sp, lr}^
    10f4:	786f626c 	stmdavc	pc!, {r2, r3, r5, r6, r9, sp, lr}^	; <UNPREDICTABLE>
    10f8:	4e414300 	cdpmi	3, 4, cr4, cr1, cr0, {0}
    10fc:	7465475f 	strbtvc	r4, [r5], #-1887	; 0xfffff8a1
    1100:	65636552 	strbvs	r6, [r3, #-1362]!	; 0xfffffaae
    1104:	45657669 	strbmi	r7, [r5, #-1641]!	; 0xfffff997
    1108:	726f7272 	rsbvc	r7, pc, #536870919	; 0x20000007
    110c:	6e756f43 	cdpvs	15, 7, cr6, cr5, cr3, {2}
    1110:	00726574 	rsbseq	r6, r2, r4, ror r5
    1114:	746c6966 	strbtvc	r6, [ip], #-2406	; 0xfffff69a
    1118:	6e5f7265 	cdpvs	2, 5, cr7, cr15, cr5, {3}
    111c:	65626d75 	strbvs	r6, [r2, #-3445]!	; 0xfffff28b
    1120:	69625f72 	stmdbvs	r2!, {r1, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    1124:	6f705f74 	svcvs	0x00705f74
    1128:	61770073 	cmnvs	r7, r3, ror r0
    112c:	7075656b 	rsbsvc	r6, r5, fp, ror #10
    1130:	74617473 	strbtvc	r7, [r1], #-1139	; 0xfffffb8d
    1134:	43007375 	movwmi	r7, #885	; 0x375
    1138:	465f4e41 	ldrbmi	r4, [pc], -r1, asr #28
    113c:	65746c69 	ldrbvs	r6, [r4, #-3177]!	; 0xfffff397
    1140:	696e4972 	stmdbvs	lr!, {r1, r4, r5, r6, r8, fp, lr}^
    1144:	61770074 	cmnvs	r7, r4, ror r0
    1148:	615f7469 	cmpvs	pc, r9, ror #8
    114c:	70006b63 	andvc	r6, r0, r3, ror #22
    1150:	00706c6c 	rsbseq	r6, r0, ip, ror #24
    1154:	494c4c50 	stmdbmi	ip, {r4, r6, sl, fp, lr}^
    1158:	46435332 			; <UNDEFINED> instruction: 0x46435332
    115c:	52005247 	andpl	r5, r0, #1879048196	; 0x70000004
    1160:	495f4343 	ldmdbmi	pc, {r0, r1, r6, r8, r9, lr}^	; <UNPREDICTABLE>
    1164:	4c435332 	mcrrmi	3, 3, r5, r3, cr2
    1168:	6e6f434b 	cdpvs	3, 6, cr4, cr15, cr11, {2}
    116c:	00676966 	rsbeq	r6, r7, r6, ror #18
    1170:	5f434352 	svcpl	0x00434352
    1174:	43746547 	cmnmi	r4, #297795584	; 0x11c00000
    1178:	6b636f6c 	blvs	18dcf30 <startup-0x1e7230d0>
    117c:	65724673 	ldrbvs	r4, [r2, #-1651]!	; 0xfffff98d
    1180:	43480071 	movtmi	r0, #32881	; 0x8071
    1184:	465f4b4c 	ldrbmi	r4, [pc], -ip, asr #22
    1188:	75716572 	ldrbvc	r6, [r1, #-1394]!	; 0xfffffa8e
    118c:	79636e65 	stmdbvc	r3!, {r0, r2, r5, r6, r9, sl, fp, sp, lr}^
    1190:	43435200 	movtmi	r5, #12800	; 0x3200
    1194:	4250415f 	subsmi	r4, r0, #-1073741801	; 0xc0000017
    1198:	72655032 	rsbvc	r5, r5, #50	; 0x32
    119c:	43687069 	cmnmi	r8, #105	; 0x69
    11a0:	6b636f6c 	blvs	18dcf58 <startup-0x1e7230a8>
    11a4:	6f4d504c 	svcvs	0x004d504c
    11a8:	6d436564 	cfstr64vs	mvdx6, [r3, #-400]	; 0xfffffe70
    11ac:	43520064 	cmpmi	r2, #100	; 0x64
    11b0:	48415f43 	stmdami	r1, {r0, r1, r6, r8, r9, sl, fp, ip, lr}^
    11b4:	65503242 	ldrbvs	r3, [r0, #-578]	; 0xfffffdbe
    11b8:	68706972 	ldmdavs	r0!, {r1, r4, r5, r6, r8, fp, sp, lr}^
    11bc:	636f6c43 	cmnvs	pc, #17152	; 0x4300
    11c0:	4d504c6b 	ldclmi	12, cr4, [r0, #-428]	; 0xfffffe54
    11c4:	4365646f 	cmnmi	r5, #1862270976	; 0x6f000000
    11c8:	6900646d 	stmdbvs	r0, {r0, r2, r3, r5, r6, sl, sp, lr}
    11cc:	5f74696e 	svcpl	0x0074696e
    11d0:	00676e72 	rsbeq	r6, r7, r2, ror lr
    11d4:	5f434352 	svcpl	0x00434352
    11d8:	31425041 	cmpcc	r2, r1, asr #32
    11dc:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
    11e0:	65526870 	ldrbvs	r6, [r2, #-2160]	; 0xfffff790
    11e4:	43746573 	cmnmi	r4, #482344960	; 0x1cc00000
    11e8:	5200646d 	andpl	r6, r0, #1828716544	; 0x6d000000
    11ec:	4d5f4343 	ldclmi	3, cr4, [pc, #-268]	; 10e8 <startup-0x1fffef18>
    11f0:	0065646f 	rsbeq	r6, r5, pc, ror #8
    11f4:	5f434352 	svcpl	0x00434352
    11f8:	43435452 	movtmi	r5, #13394	; 0x3452
    11fc:	6f534b4c 	svcvs	0x00534b4c
    1200:	65637275 	strbvs	r7, [r3, #-629]!	; 0xfffffd8b
    1204:	43435200 	movtmi	r5, #12800	; 0x3200
    1208:	4248415f 	submi	r4, r8, #-1073741801	; 0xc0000017
    120c:	72655032 	rsbvc	r5, r5, #50	; 0x32
    1210:	43687069 	cmnmi	r8, #105	; 0x69
    1214:	6b636f6c 	blvs	18dcfcc <startup-0x1e723034>
    1218:	00646d43 	rsbeq	r6, r4, r3, asr #26
    121c:	616c6564 	cmnvs	ip, r4, ror #10
    1220:	446e0079 	strbtmi	r0, [lr], #-121	; 0xffffff87
    1224:	73726f6f 	cmnvc	r2, #444	; 0x1bc
    1228:	52646900 	rsbpl	r6, r4, #0, 18
    122c:	65757165 	ldrbvs	r7, [r5, #-357]!	; 0xfffffe9b
    1230:	52007473 	andpl	r7, r0, #1929379840	; 0x73000000
    1234:	505f4343 	subspl	r4, pc, r3, asr #6
    1238:	32494c4c 	subcc	r4, r9, #76, 24	; 0x4c00
    123c:	646d4353 	strbtvs	r4, [sp], #-851	; 0xfffffcad
    1240:	43435200 	movtmi	r5, #12800	; 0x3200
    1244:	4c43485f 	mcrrmi	8, 5, r4, r3, cr15
    1248:	6974004b 	ldmdbvs	r4!, {r0, r1, r3, r6}^
    124c:	6c5f656d 	cfldr64vs	mvdx6, [pc], {109}	; 0x6d
    1250:	006d7261 	rsbeq	r7, sp, r1, ror #4
    1254:	32424841 	subcc	r4, r2, #4259840	; 0x410000
    1258:	4e45504c 	cdpmi	0, 4, cr5, cr5, cr12, {2}
    125c:	43520052 	cmpmi	r2, #82	; 0x52
    1260:	41535f43 	cmpmi	r3, r3, asr #30
    1264:	4c4c5049 	mcrrmi	0, 4, r5, ip, cr9
    1268:	43494153 	movtmi	r4, #37203	; 0x9153
    126c:	69446b6c 	stmdbvs	r4, {r2, r3, r5, r6, r8, r9, fp, sp, lr}^
    1270:	6e6f4376 	mcrvs	3, 3, r4, cr15, cr6, {3}
    1274:	00676966 	rsbeq	r6, r7, r6, ror #18
    1278:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xfffff197
    127c:	4950475f 	ldmdbmi	r0, {r0, r1, r2, r3, r4, r6, r8, r9, sl, lr}^
    1280:	6f505f4f 	svcvs	0x00505f4f
    1284:	00737472 	rsbseq	r7, r3, r2, ror r4
    1288:	54737953 	ldrbtpl	r7, [r3], #-2387	; 0xfffff6ad
    128c:	5f6b6369 	svcpl	0x006b6369
    1290:	646e6148 	strbtvs	r6, [lr], #-328	; 0xfffffeb8
    1294:	0072656c 	rsbseq	r6, r2, ip, ror #10
    1298:	5f434352 	svcpl	0x00434352
    129c:	4344544c 	movtmi	r5, #17484	; 0x444c
    12a0:	444b4c43 	strbmi	r4, [fp], #-3139	; 0xfffff3bd
    12a4:	6f437669 	svcvs	0x00437669
    12a8:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    12ac:	43435200 	movtmi	r5, #12800	; 0x3200
    12b0:	4248415f 	submi	r4, r8, #-1073741801	; 0xc0000017
    12b4:	72655033 	rsbvc	r5, r5, #51	; 0x33
    12b8:	52687069 	rsbpl	r7, r8, #105	; 0x69
    12bc:	74657365 	strbtvc	r7, [r5], #-869	; 0xfffffc9b
    12c0:	00646d43 	rsbeq	r6, r4, r3, asr #26
    12c4:	646e6172 	strbtvs	r6, [lr], #-370	; 0xfffffe8e
    12c8:	43435200 	movtmi	r5, #12800	; 0x3200
    12cc:	4c43505f 	mcrrmi	0, 5, r5, r3, cr15
    12d0:	6f43324b 	svcvs	0x0043324b
    12d4:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    12d8:	6e6f6300 	cdpvs	3, 6, cr6, cr15, cr0, {0}
    12dc:	6c6f7274 	sfmvs	f7, 2, [pc], #-464	; 1114 <startup-0x1fffeeec>
    12e0:	73746962 	cmnvc	r4, #1605632	; 0x188000
    12e4:	43435200 	movtmi	r5, #12800	; 0x3200
    12e8:	4965445f 	stmdbmi	r5!, {r0, r1, r2, r3, r4, r6, sl, lr}^
    12ec:	0074696e 	rsbseq	r6, r4, lr, ror #18
    12f0:	5f434352 	svcpl	0x00434352
    12f4:	42494153 	submi	r4, r9, #-1073741804	; 0xc0000014
    12f8:	6b636f6c 	blvs	18dd0b0 <startup-0x1e722f50>
    12fc:	4b4c4342 	blmi	131200c <startup-0x1ecedff4>
    1300:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    1304:	41006769 	tstmi	r0, r9, ror #14
    1308:	45324250 	ldrmi	r4, [r2, #-592]!	; 0xfffffdb0
    130c:	5200524e 	andpl	r5, r0, #-536870908	; 0xe0000004
    1310:	475f4343 	ldrbmi	r4, [pc, -r3, asr #6]
    1314:	59537465 	ldmdbpl	r3, {r0, r2, r5, r6, sl, ip, sp, lr}^
    1318:	4b4c4353 	blmi	131206c <startup-0x1ecedf94>
    131c:	72756f53 	rsbsvc	r6, r5, #332	; 0x14c
    1320:	41006563 	tstmi	r0, r3, ror #10
    1324:	4c314248 	lfmmi	f4, 4, [r1], #-288	; 0xfffffee0
    1328:	524e4550 	subpl	r4, lr, #80, 10	; 0x14000000
    132c:	43435200 	movtmi	r5, #12800	; 0x3200
    1330:	4c4c505f 	mcrrmi	0, 5, r5, ip, cr15
    1334:	44533249 	ldrbmi	r3, [r3], #-585	; 0xfffffdb7
    1338:	00517669 	subseq	r7, r1, r9, ror #12
    133c:	5f434352 	svcpl	0x00434352
    1340:	33424841 	movtcc	r4, #10305	; 0x2841
    1344:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
    1348:	44006870 	strmi	r6, [r0], #-2160	; 0xfffff790
    134c:	46434b43 	strbmi	r4, [r3], -r3, asr #22
    1350:	52005247 	andpl	r5, r0, #1879048196	; 0x70000004
    1354:	4d5f4343 	ldclmi	3, cr4, [pc, #-268]	; 1250 <startup-0x1fffedb0>
    1358:	44324f43 	ldrtmi	r4, [r2], #-3907	; 0xfffff0bd
    135c:	52007669 	andpl	r7, r0, #110100480	; 0x6900000
    1360:	535f4343 	cmppl	pc, #201326593	; 0xc000001
    1364:	4c435359 	mcrrmi	3, 5, r5, r3, cr9
    1368:	756f534b 	strbvc	r5, [pc, #-843]!	; 1025 <startup-0x1fffefdb>
    136c:	00656372 	rsbeq	r6, r5, r2, ror r3
    1370:	5f434352 	svcpl	0x00434352
    1374:	534c4c50 	movtpl	r4, #52304	; 0xcc50
    1378:	6372756f 	cmnvs	r2, #465567744	; 0x1bc00000
    137c:	43520065 	cmpmi	r2, #101	; 0x65
    1380:	50415f43 	subpl	r5, r1, r3, asr #30
    1384:	65503142 	ldrbvs	r3, [r0, #-322]	; 0xfffffebe
    1388:	68706972 	ldmdavs	r0!, {r1, r4, r5, r6, r8, fp, sp, lr}^
    138c:	636f6c43 	cmnvs	pc, #17152	; 0x4300
    1390:	646d436b 	strbtvs	r4, [sp], #-875	; 0xfffffc95
    1394:	53455200 	movtpl	r5, #20992	; 0x5200
    1398:	45565245 	ldrbmi	r5, [r6, #-581]	; 0xfffffdbb
    139c:	52003644 	andpl	r3, r0, #68, 12	; 0x4400000
    13a0:	4c5f4343 	mrrcmi	3, 4, r4, pc, cr3	; <UNPREDICTABLE>
    13a4:	6f434553 	svcvs	0x00434553
    13a8:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    13ac:	42484100 	submi	r4, r8, #0, 2
    13b0:	54535231 	ldrbpl	r5, [r3], #-561	; 0xfffffdcf
    13b4:	43520052 	cmpmi	r2, #82	; 0x52
    13b8:	50415f43 	subpl	r5, r1, r3, asr #30
    13bc:	65503242 	ldrbvs	r3, [r0, #-578]	; 0xfffffdbe
    13c0:	68706972 	ldmdavs	r0!, {r1, r4, r5, r6, r8, fp, sp, lr}^
    13c4:	65736552 	ldrbvs	r6, [r3, #-1362]!	; 0xfffffaae
    13c8:	646d4374 	strbtvs	r4, [sp], #-884	; 0xfffffc8c
    13cc:	74657200 	strbtvc	r7, [r5], #-512	; 0xfffffe00
    13d0:	436e7275 	cmnmi	lr, #1342177287	; 0x50000007
    13d4:	0065646f 	rsbeq	r6, r5, pc, ror #8
    13d8:	5f434352 	svcpl	0x00434352
    13dc:	33424841 	movtcc	r4, #10305	; 0x2841
    13e0:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
    13e4:	6c436870 	mcrrvs	8, 7, r6, r3, cr0
    13e8:	4c6b636f 	stclmi	3, cr6, [fp], #-444	; 0xfffffe44
    13ec:	646f4d50 	strbtvs	r4, [pc], #-3408	; 13f4 <startup-0x1fffec0c>
    13f0:	646d4365 	strbtvs	r4, [sp], #-869	; 0xfffffc9b
    13f4:	42484100 	submi	r4, r8, #0, 2
    13f8:	524e4532 	subpl	r4, lr, #209715200	; 0xc800000
    13fc:	4c435000 	marmi	acc0, r5, r3
    1400:	465f324b 	ldrbmi	r3, [pc], -fp, asr #4
    1404:	75716572 	ldrbvc	r6, [r1, #-1394]!	; 0xfffffa8e
    1408:	79636e65 	stmdbvc	r3!, {r0, r2, r5, r6, r9, sl, fp, sp, lr}^
    140c:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
    1410:	65725f4f 	ldrbvs	r5, [r2, #-3919]!	; 0xfffff0b1
    1414:	52006461 	andpl	r6, r0, #1627389952	; 0x61000000
    1418:	535f4343 	cmppl	pc, #201326593	; 0xc000001
    141c:	4c435359 	mcrrmi	3, 5, r5, r3, cr9
    1420:	4350004b 	cmpmi	r0, #75	; 0x4b
    1424:	5f314b4c 	svcpl	0x00314b4c
    1428:	71657246 	cmnvc	r5, r6, asr #4
    142c:	636e6575 	cmnvs	lr, #490733568	; 0x1d400000
    1430:	4c500079 	mrrcmi	0, 7, r0, r0, cr9	; <UNPREDICTABLE>
    1434:	50004d4c 	andpl	r4, r0, ip, asr #26
    1438:	00504c4c 	subseq	r4, r0, ip, asr #24
    143c:	514c4c50 	cmppl	ip, r0, asr ip
    1440:	43435200 	movtmi	r5, #12800	; 0x3200
    1444:	49534c5f 	ldmdbmi	r3, {r0, r1, r2, r3, r4, r6, sl, fp, lr}^
    1448:	00646d43 	rsbeq	r6, r4, r3, asr #26
    144c:	736c6c70 	cmnvc	ip, #112, 24	; 0x7000
    1450:	6372756f 	cmnvs	r2, #465567744	; 0x1bc00000
    1454:	6d610065 	stclvs	0, cr0, [r1, #-404]!	; 0xfffffe6c
    1458:	746e756f 	strbtvc	r7, [lr], #-1391	; 0xfffffa91
    145c:	6341664f 	movtvs	r6, #5711	; 0x164f
    1460:	65766974 	ldrbvs	r6, [r6, #-2420]!	; 0xfffff68c
    1464:	726f6f44 	rsbvc	r6, pc, #68, 30	; 0x110
    1468:	43520073 	cmpmi	r2, #115	; 0x73
    146c:	43485f43 	movtmi	r5, #36675	; 0x8f43
    1470:	6f434b4c 	svcvs	0x00434b4c
    1474:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    1478:	43435200 	movtmi	r5, #12800	; 0x3200
    147c:	4553485f 	ldrbmi	r4, [r3, #-2143]	; 0xfffff7a1
    1480:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    1484:	42006769 	andmi	r6, r0, #27525120	; 0x1a40000
    1488:	00524344 	subseq	r4, r2, r4, asr #6
    148c:	5f434352 	svcpl	0x00434352
    1490:	0045534c 	subeq	r5, r5, ip, asr #6
    1494:	5f434352 	svcpl	0x00434352
    1498:	42494153 	submi	r4, r9, #-1073741804	; 0xc0000014
    149c:	6b636f6c 	blvs	18dd254 <startup-0x1e722dac>
    14a0:	4b4c4341 	blmi	13121ac <startup-0x1ecede54>
    14a4:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    14a8:	73006769 	movwvc	r6, #1897	; 0x769
    14ac:	74726174 	ldrbtvc	r6, [r2], #-372	; 0xfffffe8c
    14b0:	6f637075 	svcvs	0x00637075
    14b4:	65746e75 	ldrbvs	r6, [r4, #-3701]!	; 0xfffff18b
    14b8:	43520072 	cmpmi	r2, #114	; 0x72
    14bc:	4c505f43 	mrrcmi	15, 4, r5, r0, cr3
    14c0:	4941534c 	stmdbmi	r1, {r2, r3, r6, r8, r9, ip, lr}^
    14c4:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    14c8:	47006769 	strmi	r6, [r0, -r9, ror #14]
    14cc:	5f4f4950 	svcpl	0x004f4950
    14d0:	736e6950 	cmnvc	lr, #80, 18	; 0x140000
    14d4:	43435200 	movtmi	r5, #12800	; 0x3200
    14d8:	4553485f 	ldrbmi	r4, [r3, #-2143]	; 0xfffff7a1
    14dc:	43435200 	movtmi	r5, #12800	; 0x3200
    14e0:	4f434d5f 	svcmi	0x00434d5f
    14e4:	6e6f4331 	mcrvs	3, 3, r4, cr15, cr1, {1}
    14e8:	00676966 	rsbeq	r6, r7, r6, ror #18
    14ec:	5f434352 	svcpl	0x00434352
    14f0:	32425041 	subcc	r5, r2, #65	; 0x41
    14f4:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
    14f8:	6c436870 	mcrrvs	8, 7, r6, r3, cr0
    14fc:	436b636f 	cmnmi	fp, #-1140850687	; 0xbc000001
    1500:	5200646d 	andpl	r6, r0, #1828716544	; 0x6d000000
    1504:	505f4343 	subspl	r4, pc, r3, asr #6
    1508:	41534c4c 	cmpmi	r3, ip, asr #24
    150c:	76694449 	strbtvc	r4, [r9], -r9, asr #8
    1510:	43520051 	cmpmi	r2, #81	; 0x51
    1514:	4c505f43 	mrrcmi	15, 4, r5, r0, cr3
    1518:	4941534c 	stmdbmi	r1, {r2, r3, r6, r8, r9, ip, lr}^
    151c:	52766944 	rsbspl	r6, r6, #68, 18	; 0x110000
    1520:	43435200 	movtmi	r5, #12800	; 0x3200
    1524:	4941535f 	stmdbmi	r1, {r0, r1, r2, r3, r4, r6, r8, r9, ip, lr}^
    1528:	636f6c42 	cmnvs	pc, #16896	; 0x4200
    152c:	4c43426b 	sfmmi	f4, 2, [r3], {107}	; 0x6b
    1530:	756f534b 	strbvc	r5, [pc, #-843]!	; 11ed <startup-0x1fffee13>
    1534:	00656372 	rsbeq	r6, r5, r2, ror r3
    1538:	646e6573 	strbtvs	r6, [lr], #-1395	; 0xfffffa8d
    153c:	72616c41 	rsbvc	r6, r1, #16640	; 0x4100
    1540:	4352006d 	cmpmi	r2, #109	; 0x6d
    1544:	434d5f43 	movtmi	r5, #57155	; 0xdf43
    1548:	6f43324f 	svcvs	0x0043324f
    154c:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    1550:	74656700 	strbtvc	r6, [r5], #-1792	; 0xfffff900
    1554:	52006449 	andpl	r6, r0, #1224736768	; 0x49000000
    1558:	495f4343 	ldmdbmi	pc, {r0, r1, r6, r8, r9, lr}^	; <UNPREDICTABLE>
    155c:	4c435332 	mcrrmi	3, 3, r5, r3, cr2
    1560:	756f534b 	strbvc	r5, [pc, #-843]!	; 121d <startup-0x1fffede3>
    1564:	00656372 	rsbeq	r6, r5, r2, ror r3
    1568:	4f525245 	svcmi	0x00525245
    156c:	736d0052 	cmnvc	sp, #82	; 0x52
    1570:	6b636954 	blvs	18dbac8 <startup-0x1e724538>
    1574:	43520073 	cmpmi	r2, #115	; 0x73
    1578:	43505f43 	cmpmi	r0, #268	; 0x10c
    157c:	43314b4c 	teqmi	r1, #76, 22	; 0x13000
    1580:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    1584:	69740067 	ldmdbvs	r4!, {r0, r1, r2, r5, r6}^
    1588:	00736b63 	rsbseq	r6, r3, r3, ror #22
    158c:	434c4c50 	movtmi	r4, #52304	; 0xcc50
    1590:	00524746 	subseq	r4, r2, r6, asr #14
    1594:	74736574 	ldrbtvc	r6, [r3], #-1396	; 0xfffffa8c
    1598:	0067734d 	rsbeq	r7, r7, sp, asr #6
    159c:	5f434352 	svcpl	0x00434352
    15a0:	61656c43 	cmnvs	r5, r3, asr #24
    15a4:	616c4672 	smcvs	50274	; 0xc462
    15a8:	50410067 	subpl	r0, r1, r7, rrx
    15ac:	42484142 	submi	r4, r8, #-2147483632	; 0x80000010
    15b0:	73657250 	cmnvc	r5, #80, 4
    15b4:	62615463 	rsbvs	r5, r1, #1660944384	; 0x63000000
    15b8:	5200656c 	andpl	r6, r0, #108, 10	; 0x1b000000
    15bc:	535f4343 	cmppl	pc, #201326593	; 0xc000001
    15c0:	4c504941 	mrrcmi	9, 4, r4, r0, cr1	; <UNPREDICTABLE>
    15c4:	5332494c 	teqpl	r2, #76, 18	; 0x130000
    15c8:	446b6c43 	strbtmi	r6, [fp], #-3139	; 0xfffff3bd
    15cc:	6f437669 	svcvs	0x00437669
    15d0:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    15d4:	43535300 	cmpmi	r3, #0, 6
    15d8:	41005247 	tstmi	r0, r7, asr #4
    15dc:	52324250 	eorspl	r4, r2, #80, 4
    15e0:	00525453 	subseq	r5, r2, r3, asr r4
    15e4:	5f434352 	svcpl	0x00434352
    15e8:	46746547 	ldrbtmi	r6, [r4], -r7, asr #10
    15ec:	5367616c 	cmnpl	r7, #108, 2
    15f0:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0xfffffe8c
    15f4:	43520073 	cmpmi	r2, #115	; 0x73
    15f8:	6c435f43 	mcrrvs	15, 4, r5, r3, cr3
    15fc:	736b636f 	cmnvc	fp, #-1140850687	; 0xbc000001
    1600:	43435200 	movtmi	r5, #12800	; 0x3200
    1604:	4354495f 	cmpmi	r4, #1556480	; 0x17c000
    1608:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    160c:	43520067 	cmpmi	r2, #103	; 0x67
    1610:	53485f43 	movtpl	r5, #36675	; 0x8f43
    1614:	646d4349 	strbtvs	r4, [sp], #-841	; 0xfffffcb7
    1618:	43435200 	movtmi	r5, #12800	; 0x3200
    161c:	6a64415f 	bvs	1911ba0 <startup-0x1e6ee460>
    1620:	48747375 	ldmdami	r4!, {r0, r2, r4, r5, r6, r8, r9, ip, sp, lr}^
    1624:	61434953 	cmpvs	r3, r3, asr r9
    1628:	7262696c 	rsbvc	r6, r2, #108, 18	; 0x1b0000
    162c:	6f697461 	svcvs	0x00697461
    1630:	6c61566e 	stclvs	6, cr5, [r1], #-440	; 0xfffffe48
    1634:	41006575 	tstmi	r0, r5, ror r5
    1638:	4c324250 	lfmmi	f4, 4, [r2], #-320	; 0xfffffec0
    163c:	524e4550 	subpl	r4, lr, #80, 10	; 0x14000000
    1640:	43435200 	movtmi	r5, #12800	; 0x3200
    1644:	4250415f 	subsmi	r4, r0, #-1073741801	; 0xc0000017
    1648:	72655031 	rsbvc	r5, r5, #49	; 0x31
    164c:	00687069 	rsbeq	r7, r8, r9, rrx
    1650:	5f434352 	svcpl	0x00434352
    1654:	43435452 	movtmi	r5, #13394	; 0x3452
    1658:	6f434b4c 	svcvs	0x00434b4c
    165c:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    1660:	43435200 	movtmi	r5, #12800	; 0x3200
    1664:	414c465f 	cmpmi	ip, pc, asr r6
    1668:	43520047 	cmpmi	r2, #71	; 0x47
    166c:	65475f43 	strbvs	r5, [r7, #-3907]	; 0xfffff0bd
    1670:	53544974 	cmppl	r4, #116, 18	; 0x1d0000
    1674:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0xfffffe8c
    1678:	54430073 	strbpl	r0, [r3], #-115	; 0xffffff8d
    167c:	52004c52 	andpl	r4, r0, #20992	; 0x5200
    1680:	435f4343 	cmpmi	pc, #201326593	; 0xc000001
    1684:	7261656c 	rsbvc	r6, r1, #108, 10	; 0x1b000000
    1688:	65505449 	ldrbvs	r5, [r0, #-1097]	; 0xfffffbb7
    168c:	6e69646e 	cdpvs	4, 6, cr6, cr9, cr14, {3}
    1690:	74694267 	strbtvc	r4, [r9], #-615	; 0xfffffd99
    1694:	43435200 	movtmi	r5, #12800	; 0x3200
    1698:	6f6c435f 	svcvs	0x006c435f
    169c:	65536b63 	ldrbvs	r6, [r3, #-2915]	; 0xfffff49d
    16a0:	69727563 	ldmdbvs	r2!, {r0, r1, r5, r6, r8, sl, ip, sp, lr}^
    16a4:	79537974 	ldmdbvc	r3, {r2, r4, r5, r6, r8, fp, ip, sp, lr}^
    16a8:	6d657473 	cfstrdvs	mvd7, [r5, #-460]!	; 0xfffffe34
    16ac:	00646d43 	rsbeq	r6, r4, r3, asr #26
    16b0:	5f434352 	svcpl	0x00434352
    16b4:	434d4954 	movtmi	r4, #55636	; 0xd954
    16b8:	72504b4c 	subsvc	r4, r0, #76, 22	; 0x13000
    16bc:	6f437365 	svcvs	0x00437365
    16c0:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    16c4:	43435200 	movtmi	r5, #12800	; 0x3200
    16c8:	4941535f 	stmdbmi	r1, {r0, r1, r2, r3, r4, r6, r8, r9, ip, lr}^
    16cc:	636f6c42 	cmnvs	pc, #16896	; 0x4200
    16d0:	4c43416b 	stfmie	f4, [r3], {107}	; 0x6b
    16d4:	756f534b 	strbvc	r5, [pc, #-843]!	; 1391 <startup-0x1fffec6f>
    16d8:	00656372 	rsbeq	r6, r5, r2, ror r3
    16dc:	74737973 	ldrbtvc	r7, [r3], #-2419	; 0xfffff68d
    16e0:	5f6b6369 	svcpl	0x006b6369
    16e4:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xfffff1b7
    16e8:	61747300 	cmnvs	r4, r0, lsl #6
    16ec:	72737574 	rsbsvc	r7, r3, #116, 10	; 0x1d000000
    16f0:	52006765 	andpl	r6, r0, #26476544	; 0x1940000
    16f4:	415f4343 	cmpmi	pc, r3, asr #6
    16f8:	50324250 	eorspl	r4, r2, r0, asr r2
    16fc:	70697265 	rsbvc	r7, r9, r5, ror #4
    1700:	50410068 	subpl	r0, r1, r8, rrx
    1704:	504c3142 	subpl	r3, ip, r2, asr #2
    1708:	00524e45 	subseq	r4, r2, r5, asr #28
    170c:	69746361 	ldmdbvs	r4!, {r0, r5, r6, r8, r9, sp, lr}^
    1710:	645f6576 	ldrbvs	r6, [pc], #-1398	; 1718 <startup-0x1fffe8e8>
    1714:	73726f6f 	cmnvc	r2, #444	; 0x1bc
    1718:	474b4300 	strbmi	r4, [fp, -r0, lsl #6]
    171c:	4e455441 	cdpmi	4, 4, cr5, cr5, cr1, {2}
    1720:	4c500052 	mrrcmi	0, 5, r0, r0, cr2	; <UNPREDICTABLE>
    1724:	4941534c 	stmdbmi	r1, {r2, r3, r6, r8, r9, ip, lr}^
    1728:	4c50004e 	mrrcmi	0, 4, r0, r0, cr14	; <UNPREDICTABLE>
    172c:	4941534c 	stmdbmi	r1, {r2, r3, r6, r8, r9, ip, lr}^
    1730:	4c500051 	mrrcmi	0, 5, r0, r0, cr1	; <UNPREDICTABLE>
    1734:	4941534c 	stmdbmi	r1, {r2, r3, r6, r8, r9, ip, lr}^
    1738:	43520052 	cmpmi	r2, #82	; 0x52
    173c:	434d5f43 	movtmi	r5, #57155	; 0xdf43
    1740:	6f53314f 	svcvs	0x0053314f
    1744:	65637275 	strbvs	r7, [r3, #-629]!	; 0xfffffd8b
    1748:	43435200 	movtmi	r5, #12800	; 0x3200
    174c:	4248415f 	submi	r4, r8, #-1073741801	; 0xc0000017
    1750:	72655033 	rsbvc	r5, r5, #51	; 0x33
    1754:	43687069 	cmnmi	r8, #105	; 0x69
    1758:	6b636f6c 	blvs	18dd510 <startup-0x1e722af0>
    175c:	00646d43 	rsbeq	r6, r4, r3, asr #26
    1760:	54737953 	ldrbtpl	r7, [r3], #-2387	; 0xfffff6ad
    1764:	5f6b6369 	svcpl	0x006b6369
    1768:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0xfffff6ac
    176c:	6d697400 	cfstrdvs	mvd7, [r9, #-0]
    1770:	65635f65 	strbvs	r5, [r3, #-3941]!	; 0xfffff09b
    1774:	6172746e 	cmnvs	r2, lr, ror #8
    1778:	616c5f6c 	cmnvs	ip, ip, ror #30
    177c:	52006d72 	andpl	r6, r0, #7296	; 0x1c80
    1780:	505f4343 	subspl	r4, pc, r3, asr #6
    1784:	6d434c4c 	stclvs	12, cr4, [r3, #-304]	; 0xfffffed0
    1788:	43520064 	cmpmi	r2, #100	; 0x64
    178c:	61425f43 	cmpvs	r2, r3, asr #30
    1790:	70756b63 	rsbsvc	r6, r5, r3, ror #22
    1794:	65736552 	ldrbvs	r6, [r3, #-1362]!	; 0xfffffaae
    1798:	646d4374 	strbtvs	r4, [sp], #-884	; 0xfffffc8c
    179c:	42484100 	submi	r4, r8, #0, 2
    17a0:	54535233 	ldrbpl	r5, [r3], #-563	; 0xfffffdcd
    17a4:	72450052 	subvc	r0, r5, #82	; 0x52
    17a8:	53726f72 	cmnpl	r2, #456	; 0x1c8
    17ac:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0xfffffe8c
    17b0:	74730073 	ldrbtvc	r0, [r3], #-115	; 0xffffff8d
    17b4:	75747261 	ldrbvc	r7, [r4, #-609]!	; 0xfffffd9f
    17b8:	43520070 	cmpmi	r2, #112	; 0x70
    17bc:	434d5f43 	movtmi	r5, #57155	; 0xdf43
    17c0:	6f53324f 	svcvs	0x0053324f
    17c4:	65637275 	strbvs	r7, [r3, #-629]!	; 0xfffffd8b
    17c8:	42504100 	subsmi	r4, r0, #0, 2
    17cc:	54535231 	ldrbpl	r5, [r3], #-561	; 0xfffffdcf
    17d0:	50410052 	subpl	r0, r1, r2, asr r0
    17d4:	4e453142 	dvfmism	f3, f5, f2
    17d8:	6f6e0052 	svcvs	0x006e0052
    17dc:	52006469 	andpl	r6, r0, #1761607680	; 0x69000000
    17e0:	4d5f4343 	ldclmi	3, cr4, [pc, #-268]	; 16dc <startup-0x1fffe924>
    17e4:	44314f43 	ldrtmi	r4, [r1], #-3907	; 0xfffff0bd
    17e8:	69007669 	stmdbvs	r0, {r0, r3, r5, r6, r9, sl, ip, sp, lr}
    17ec:	73734164 	cmnvc	r3, #100, 2
    17f0:	5f6e6769 	svcpl	0x006e6769
    17f4:	646e6148 	strbtvs	r6, [lr], #-328	; 0xfffffeb8
    17f8:	0072656c 	rsbseq	r6, r2, ip, ror #10
    17fc:	5f434352 	svcpl	0x00434352
    1800:	74696157 	strbtvc	r6, [r9], #-343	; 0xfffffea9
    1804:	48726f46 	ldmdami	r2!, {r1, r2, r6, r8, r9, sl, fp, sp, lr}^
    1808:	74534553 	ldrbvc	r4, [r3], #-1363	; 0xfffffaad
    180c:	55747261 	ldrbpl	r7, [r4, #-609]!	; 0xfffffd9f
    1810:	55530070 	ldrbpl	r0, [r3, #-112]	; 0xffffff90
    1814:	53454343 	movtpl	r4, #21315	; 0x5343
    1818:	43520053 	cmpmi	r2, #83	; 0x53
    181c:	534c5f43 	movtpl	r5, #53059	; 0xcf43
    1820:	646f4d45 	strbtvs	r4, [pc], #-3397	; 1828 <startup-0x1fffe7d8>
    1824:	6e6f4365 	cdpvs	3, 6, cr4, cr15, cr5, {3}
    1828:	00676966 	rsbeq	r6, r7, r6, ror #18
    182c:	33424841 	movtcc	r4, #10305	; 0x2841
    1830:	4e45504c 	cdpmi	0, 4, cr5, cr5, cr12, {2}
    1834:	79530052 	ldmdbvc	r3, {r1, r4, r6}^
    1838:	63695473 	cmnvs	r9, #1929379840	; 0x73000000
    183c:	6f435f6b 	svcvs	0x00435f6b
    1840:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    1844:	2f3a4300 	svccs	0x003a4300
    1848:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
    184c:	64412f73 	strbvs	r2, [r1], #-3955	; 0xfffff08d
    1850:	2f746d61 	svccs	0x00746d61
    1854:	44656e4f 	strbtmi	r6, [r5], #-3663	; 0xfffff1b1
    1858:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
    185c:	6b6f442f 	blvs	1bd2920 <startup-0x1e42d6e0>
    1860:	6e656d75 	mcrvs	13, 3, r6, cr5, cr5, {3}
    1864:	69472f74 	stmdbvs	r7, {r2, r4, r5, r6, r8, r9, sl, fp, sp}^
    1868:	62754874 	rsbsvs	r4, r5, #116, 16	; 0x740000
    186c:	5441442f 	strbpl	r4, [r1], #-1071	; 0xfffffbd1
    1870:	2d303932 			; <UNDEFINED> instruction: 0x2d303932
    1874:	6d72614c 	ldfvse	f6, [r2, #-304]!	; 0xfffffed0
    1878:	74737973 	ldrbtvc	r7, [r3], #-2419	; 0xfffff68d
    187c:	6b2f6d65 	blvs	bdce18 <startup-0x1f4231e8>
    1880:	442f646f 	strtmi	r6, [pc], #-1135	; 1888 <startup-0x1fffe778>
    1884:	2f726f6f 	svccs	0x00726f6f
    1888:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
    188c:	2e707574 	mrccs	5, 3, r7, cr0, cr4, {3}
    1890:	41430063 	cmpmi	r3, r3, rrx
    1894:	0042494c 	subeq	r4, r2, ip, asr #18
    1898:	656d6974 	strbvs	r6, [sp, #-2420]!	; 0xfffff68c
    189c:	706d7400 	rsbvc	r7, sp, r0, lsl #8
    18a0:	00676572 	rsbeq	r6, r7, r2, ror r5
    18a4:	434b4344 	movtmi	r4, #45892	; 0xb344
    18a8:	32524746 	subscc	r4, r2, #18350080	; 0x1180000
    18ac:	43435200 	movtmi	r5, #12800	; 0x3200
    18b0:	4248415f 	submi	r4, r8, #-1073741801	; 0xc0000017
    18b4:	72655031 	rsbvc	r5, r5, #49	; 0x31
    18b8:	00687069 	rsbeq	r7, r8, r9, rrx
    18bc:	73657368 	cmnvc	r5, #104, 6	; 0xa0000001
    18c0:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0xfffffe8c
    18c4:	50470073 	subpl	r0, r7, r3, ror r0
    18c8:	6c5f4f49 	mrrcvs	15, 4, r4, pc, cr9	; <UNPREDICTABLE>
    18cc:	00706d61 	rsbseq	r6, r0, r1, ror #26
    18d0:	31424841 	cmpcc	r2, r1, asr #16
    18d4:	00524e45 	subseq	r4, r2, r5, asr #28
    18d8:	44414f4c 	strbmi	r4, [r1], #-3916	; 0xfffff0b4
    18dc:	43435200 	movtmi	r5, #12800	; 0x3200
    18e0:	4248415f 	submi	r4, r8, #-1073741801	; 0xc0000017
    18e4:	72655031 	rsbvc	r5, r5, #49	; 0x31
    18e8:	52687069 	rsbpl	r7, r8, #105	; 0x69
    18ec:	74657365 	strbtvc	r7, [r5], #-869	; 0xfffffc9b
    18f0:	00646d43 	rsbeq	r6, r4, r3, asr #26
    18f4:	32424841 	subcc	r4, r2, #4259840	; 0x410000
    18f8:	52545352 	subspl	r5, r4, #1207959553	; 0x48000001
    18fc:	43435200 	movtmi	r5, #12800	; 0x3200
    1900:	6f6c435f 	svcvs	0x006c435f
    1904:	54736b63 	ldrbtpl	r6, [r3], #-2915	; 0xfffff49d
    1908:	44657079 	strbtmi	r7, [r5], #-121	; 0xffffff87
    190c:	52006665 	andpl	r6, r0, #105906176	; 0x6500000
    1910:	545f4343 	ldrbpl	r4, [pc], #-835	; 1918 <startup-0x1fffe6e8>
    1914:	44657079 	strbtmi	r7, [r5], #-121	; 0xffffff87
    1918:	70006665 	andvc	r6, r0, r5, ror #12
    191c:	77737361 	ldrbvc	r7, [r3, -r1, ror #6]!
    1920:	0064726f 	rsbeq	r7, r4, pc, ror #4
    1924:	5f434352 	svcpl	0x00434352
    1928:	47005449 	strmi	r5, [r0, -r9, asr #8]
    192c:	5f4f4950 	svcpl	0x004f4950
    1930:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
    1934:	6d697400 	cfstrdvs	mvd7, [r9, #-0]
    1938:	61745365 	cmnvs	r4, r5, ror #6
    193c:	7000706d 	andvc	r7, r0, sp, rrx
    1940:	63766c6c 	cmnvs	r6, #108, 24	; 0x6c00
    1944:	4352006f 	cmpmi	r2, #111	; 0x6f
    1948:	50415f43 	subpl	r5, r1, r3, asr #30
    194c:	65503142 	ldrbvs	r3, [r0, #-322]	; 0xfffffebe
    1950:	68706972 	ldmdavs	r0!, {r1, r4, r5, r6, r8, fp, sp, lr}^
    1954:	636f6c43 	cmnvs	pc, #17152	; 0x4300
    1958:	4d504c6b 	ldclmi	12, cr4, [r0, #-428]	; 0xfffffe54
    195c:	4365646f 	cmnmi	r5, #1862270976	; 0x6f000000
    1960:	5000646d 	andpl	r6, r0, sp, ror #8
    1964:	32494c4c 	subcc	r4, r9, #76, 24	; 0x4c00
    1968:	52004e53 	andpl	r4, r0, #1328	; 0x530
    196c:	415f4343 	cmpmi	pc, r3, asr #6
    1970:	50314248 	eorspl	r4, r1, r8, asr #4
    1974:	70697265 	rsbvc	r7, r9, r5, ror #4
    1978:	6f6c4368 	svcvs	0x006c4368
    197c:	504c6b63 	subpl	r6, ip, r3, ror #22
    1980:	65646f4d 	strbvs	r6, [r4, #-3917]!	; 0xfffff0b3
    1984:	00646d43 	rsbeq	r6, r4, r3, asr #26
    1988:	494c4c50 	stmdbmi	ip, {r4, r6, sl, fp, lr}^
    198c:	00525332 	subseq	r5, r2, r2, lsr r3
    1990:	6e69616d 	powvsez	f6, f1, #5.0
    1994:	6c696d00 	stclvs	13, cr6, [r9], #-0
    1998:	616c0069 	cmnvs	ip, r9, rrx
    199c:	69546d72 	ldmdbvs	r4, {r1, r4, r5, r6, r8, sl, fp, sp, lr}^
    19a0:	52006b63 	andpl	r6, r0, #101376	; 0x18c00
    19a4:	525f4343 	subspl	r4, pc, #201326593	; 0xc000001
    19a8:	4c434354 	mcrrmi	3, 5, r4, r3, cr4
    19ac:	646d434b 	strbtvs	r4, [sp], #-843	; 0xfffffcb5
    19b0:	43435200 	movtmi	r5, #12800	; 0x3200
    19b4:	4248415f 	submi	r4, r8, #-1073741801	; 0xc0000017
    19b8:	72655032 	rsbvc	r5, r5, #50	; 0x32
    19bc:	00687069 	rsbeq	r7, r8, r9, rrx
    19c0:	72616c61 	rsbvc	r6, r1, #24832	; 0x6100
    19c4:	676e696d 	strbvs	r6, [lr, -sp, ror #18]!
    19c8:	6f6f645f 	svcvs	0x006f645f
    19cc:	4c500072 	mrrcmi	0, 7, r0, r0, cr2	; <UNPREDICTABLE>
    19d0:	4941534c 	stmdbmi	r1, {r2, r3, r6, r8, r9, ip, lr}^
    19d4:	52474643 	subpl	r4, r7, #70254592	; 0x4300000
    19d8:	4c4c5000 	marmi	acc0, r5, ip
    19dc:	4352004e 	cmpmi	r2, #78	; 0x4e
    19e0:	48415f43 	stmdami	r1, {r0, r1, r6, r8, r9, sl, fp, ip, lr}^
    19e4:	65503142 	ldrbvs	r3, [r0, #-322]	; 0xfffffebe
    19e8:	68706972 	ldmdavs	r0!, {r1, r4, r5, r6, r8, fp, sp, lr}^
    19ec:	636f6c43 	cmnvs	pc, #17152	; 0x4300
    19f0:	646d436b 	strbtvs	r4, [sp], #-875	; 0xfffffc95
    19f4:	43435200 	movtmi	r5, #12800	; 0x3200
    19f8:	4c4c505f 	mcrrmi	0, 5, r5, ip, cr15
    19fc:	43533249 	cmpmi	r3, #-1879048188	; 0x90000004
    1a00:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    1a04:	59530067 	ldmdbpl	r3, {r0, r1, r2, r5, r6}^
    1a08:	4b4c4353 	blmi	131275c <startup-0x1eced8a4>
    1a0c:	6572465f 	ldrbvs	r4, [r2, #-1631]!	; 0xfffff9a1
    1a10:	6e657571 	mcrvs	5, 3, r7, cr5, cr1, {3}
    1a14:	52007963 	andpl	r7, r0, #1622016	; 0x18c000
    1a18:	545f4343 	ldrbpl	r4, [pc], #-835	; 1a20 <startup-0x1fffe5e0>
    1a1c:	4c434d49 	mcrrmi	13, 4, r4, r3, cr9
    1a20:	6572504b 	ldrbvs	r5, [r2, #-75]!	; 0xffffffb5
    1a24:	6c616373 	stclvs	3, cr6, [r1], #-460	; 0xfffffe34
    1a28:	70007265 	andvc	r7, r0, r5, ror #4
    1a2c:	63736572 	cmnvs	r3, #478150656	; 0x1c800000
    1a30:	43435200 	movtmi	r5, #12800	; 0x3200
    1a34:	4248415f 	submi	r4, r8, #-1073741801	; 0xc0000017
    1a38:	72655032 	rsbvc	r5, r5, #50	; 0x32
    1a3c:	52687069 	rsbpl	r7, r8, #105	; 0x69
    1a40:	74657365 	strbtvc	r7, [r5], #-869	; 0xfffffc9b
    1a44:	00646d43 	rsbeq	r6, r4, r3, asr #26
    1a48:	5f434352 	svcpl	0x00434352
    1a4c:	534c4c50 	movtpl	r4, #52304	; 0xcc50
    1a50:	6d434941 	vstrvs.16	s9, [r3, #-130]	; 0xffffff7e	; <UNPREDICTABLE>
    1a54:	48410064 	stmdami	r1, {r2, r5, r6}^
    1a58:	4e453342 	cdpmi	3, 4, cr3, cr5, cr2, {2}
    1a5c:	43520052 	cmpmi	r2, #82	; 0x52
    1a60:	59535f43 	ldmdbpl	r3, {r0, r1, r6, r8, r9, sl, fp, ip, lr}^
    1a64:	4b4c4353 	blmi	13127b8 <startup-0x1eced848>
    1a68:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    1a6c:	52006769 	andpl	r6, r0, #27525120	; 0x1a40000
    1a70:	505f4343 	subspl	r4, pc, r3, asr #6
    1a74:	6f434c4c 	svcvs	0x00434c4c
    1a78:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    1a7c:	6c6c7000 	stclvs	0, cr7, [ip], #-0
    1a80:	4e52006d 	cdpmi	0, 5, cr0, cr2, cr13, {3}
    1a84:	54495f47 	strbpl	r5, [r9], #-3911	; 0xfffff0b9
    1a88:	474e5200 	strbmi	r5, [lr, -r0, lsl #4]
    1a8c:	4354495f 	cmpmi	r4, #1556480	; 0x17c000
    1a90:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    1a94:	4e520067 	cdpmi	0, 5, cr0, cr2, cr7, {3}
    1a98:	6d435f47 	stclvs	15, cr5, [r3, #-284]	; 0xfffffee4
    1a9c:	4e520064 	cdpmi	0, 5, cr0, cr2, cr4, {3}
    1aa0:	65475f47 	strbvs	r5, [r7, #-3911]	; 0xfffff0b9
    1aa4:	6e615274 	mcrvs	2, 3, r5, cr1, cr4, {3}
    1aa8:	4e6d6f64 	cdpmi	15, 6, cr6, cr13, cr4, {3}
    1aac:	65626d75 	strbvs	r6, [r2, #-3445]!	; 0xfffff28b
    1ab0:	4e520072 	mrcmi	0, 2, r0, cr2, cr2, {3}
    1ab4:	65445f47 	strbvs	r5, [r4, #-3911]	; 0xfffff0b9
    1ab8:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xfffff1b7
    1abc:	474e5200 	strbmi	r5, [lr, -r0, lsl #4]
    1ac0:	7079545f 	rsbsvc	r5, r9, pc, asr r4
    1ac4:	66654465 	strbtvs	r4, [r5], -r5, ror #8
    1ac8:	2f3a4300 	svccs	0x003a4300
    1acc:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
    1ad0:	64412f73 	strbvs	r2, [r1], #-3955	; 0xfffff08d
    1ad4:	2f746d61 	svccs	0x00746d61
    1ad8:	44656e4f 	strbtmi	r6, [r5], #-3663	; 0xfffff1b1
    1adc:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
    1ae0:	6b6f442f 	blvs	1bd2ba4 <startup-0x1e42d45c>
    1ae4:	6e656d75 	mcrvs	13, 3, r6, cr5, cr5, {3}
    1ae8:	69472f74 	stmdbvs	r7, {r2, r4, r5, r6, r8, r9, sl, fp, sp}^
    1aec:	62754874 	rsbsvs	r4, r5, #116, 16	; 0x740000
    1af0:	5441442f 	strbpl	r4, [r1], #-1071	; 0xfffffbd1
    1af4:	2d303932 			; <UNDEFINED> instruction: 0x2d303932
    1af8:	6d72614c 	ldfvse	f6, [r2, #-304]!	; 0xfffffed0
    1afc:	74737973 	ldrbtvc	r7, [r3], #-2419	; 0xfffff68d
    1b00:	6b2f6d65 	blvs	bdd09c <startup-0x1f422f64>
    1b04:	6c2f646f 	cfstrsvs	mvf6, [pc], #-444	; 1950 <startup-0x1fffe6b0>
    1b08:	532f6269 			; <UNDEFINED> instruction: 0x532f6269
    1b0c:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
    1b10:	6c5f3446 	cfldrdvs	mvd3, [pc], {70}	; 0x46
    1b14:	532f6269 			; <UNDEFINED> instruction: 0x532f6269
    1b18:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
    1b1c:	78783446 	ldmdavc	r8!, {r1, r2, r6, sl, ip, sp}^
    1b20:	6474535f 	ldrbtvs	r5, [r4], #-863	; 0xfffffca1
    1b24:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
    1b28:	445f6870 	ldrbmi	r6, [pc], #-2160	; 1b30 <startup-0x1fffe4d0>
    1b2c:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
    1b30:	72732f72 	rsbsvc	r2, r3, #456	; 0x1c8
    1b34:	74732f63 	ldrbtvc	r2, [r3], #-3939	; 0xfffff09d
    1b38:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
    1b3c:	5f787834 	svcpl	0x00787834
    1b40:	2e676e72 	mcrcs	14, 3, r6, cr7, cr2, {3}
    1b44:	4e520063 	cdpmi	0, 5, cr0, cr2, cr3, {3}
    1b48:	4c465f47 	mcrrmi	15, 4, r5, r6, cr7
    1b4c:	52004741 	andpl	r4, r0, #17039360	; 0x1040000
    1b50:	435f474e 	cmpmi	pc, #20447232	; 0x1380000
    1b54:	7261656c 	rsbvc	r6, r1, #108, 10	; 0x1b000000
    1b58:	67616c46 	strbvs	r6, [r1, -r6, asr #24]!
    1b5c:	474e5200 	strbmi	r5, [lr, -r0, lsl #4]
    1b60:	7465475f 	strbtvc	r4, [r5], #-1887	; 0xfffff8a1
    1b64:	74535449 	ldrbvc	r5, [r3], #-1097	; 0xfffffbb7
    1b68:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
    1b6c:	474e5200 	strbmi	r5, [lr, -r0, lsl #4]
    1b70:	656c435f 	strbvs	r4, [ip, #-863]!	; 0xfffffca1
    1b74:	54497261 	strbpl	r7, [r9], #-609	; 0xfffffd9f
    1b78:	646e6550 	strbtvs	r6, [lr], #-1360	; 0xfffffab0
    1b7c:	42676e69 	rsbmi	r6, r7, #1680	; 0x690
    1b80:	52007469 	andpl	r7, r0, #1761607680	; 0x69000000
    1b84:	475f474e 	ldrbmi	r4, [pc, -lr, asr #14]
    1b88:	6c467465 	cfstrdvs	mvd7, [r6], {101}	; 0x65
    1b8c:	74536761 	ldrbvc	r6, [r3], #-1889	; 0xfffff89f
    1b90:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
    1b94:	2f3a4300 	svccs	0x003a4300
    1b98:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
    1b9c:	64412f73 	strbvs	r2, [r1], #-3955	; 0xfffff08d
    1ba0:	2f746d61 	svccs	0x00746d61
    1ba4:	44656e4f 	strbtmi	r6, [r5], #-3663	; 0xfffff1b1
    1ba8:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
    1bac:	6b6f442f 	blvs	1bd2c70 <startup-0x1e42d390>
    1bb0:	6e656d75 	mcrvs	13, 3, r6, cr5, cr5, {3}
    1bb4:	69472f74 	stmdbvs	r7, {r2, r4, r5, r6, r8, r9, sl, fp, sp}^
    1bb8:	62754874 	rsbsvs	r4, r5, #116, 16	; 0x740000
    1bbc:	5441442f 	strbpl	r4, [r1], #-1071	; 0xfffffbd1
    1bc0:	2d303932 			; <UNDEFINED> instruction: 0x2d303932
    1bc4:	6d72614c 	ldfvse	f6, [r2, #-304]!	; 0xfffffed0
    1bc8:	74737973 	ldrbtvc	r7, [r3], #-2419	; 0xfffff68d
    1bcc:	6b2f6d65 	blvs	bdd168 <startup-0x1f422e98>
    1bd0:	6c2f646f 	cfstrsvs	mvf6, [pc], #-444	; 1a1c <startup-0x1fffe5e4>
    1bd4:	432f6269 			; <UNDEFINED> instruction: 0x432f6269
    1bd8:	6e454e41 	cdpvs	14, 4, cr4, cr5, cr1, {2}
    1bdc:	65646f63 	strbvs	r6, [r4, #-3939]!	; 0xfffff09d
    1be0:	6500632e 	strvs	r6, [r0, #-814]	; 0xfffffcd2
    1be4:	646f636e 	strbtvs	r6, [pc], #-878	; 1bec <startup-0x1fffe414>
    1be8:	73615f65 	cmnvc	r1, #404	; 0x194
    1bec:	6e676973 			; <UNDEFINED> instruction: 0x6e676973
    1bf0:	0064695f 	rsbeq	r6, r4, pc, asr r9
    1bf4:	6f636e65 	svcvs	0x00636e65
    1bf8:	645f6564 	ldrbvs	r6, [pc], #-1380	; 1c00 <startup-0x1fffe400>
    1bfc:	5f726f6f 	svcpl	0x00726f6f
    1c00:	666e6f63 	strbtvs	r6, [lr], -r3, ror #30
    1c04:	64006769 	strvs	r6, [r0], #-1897	; 0xfffff897
    1c08:	00747369 	rsbseq	r7, r4, r9, ror #6
    1c0c:	69766564 	ldmdbvs	r6!, {r2, r5, r6, r8, sl, sp, lr}^
    1c10:	745f6563 	ldrbvc	r6, [pc], #-1379	; 1c18 <startup-0x1fffe3e8>
    1c14:	00657079 	rsbeq	r7, r5, r9, ror r0
    1c18:	6f636e65 	svcvs	0x00636e65
    1c1c:	725f6564 	subsvc	r6, pc, #100, 10	; 0x19000000
    1c20:	65757165 	ldrbvs	r7, [r5, #-357]!	; 0xfffffe9b
    1c24:	695f7473 	ldmdbvs	pc, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^	; <UNPREDICTABLE>
    1c28:	6f740064 	svcvs	0x00740064
    1c2c:	6e65635f 	mcrvs	3, 3, r6, cr5, cr15, {2}
    1c30:	6c617274 	sfmvs	f7, 2, [r1], #-464	; 0xfffffe30
    1c34:	636e6500 	cmnvs	lr, #0, 10
    1c38:	5f65646f 	svcpl	0x0065646f
    1c3c:	74736964 	ldrbtvc	r6, [r3], #-2404	; 0xfffff69c
    1c40:	65636e61 	strbvs	r6, [r3, #-3681]!	; 0xfffff19f
    1c44:	6e6f635f 	mcrvs	3, 3, r6, cr15, cr15, {2}
    1c48:	00676966 	rsbeq	r6, r7, r6, ror #18
    1c4c:	706d6574 	rsbvc	r6, sp, r4, ror r5
    1c50:	0064695f 	rsbeq	r6, r4, pc, asr r9
    1c54:	756c6176 	strbvc	r6, [ip, #-374]!	; 0xfffffe8a
    1c58:	00305f65 	eorseq	r5, r0, r5, ror #30
    1c5c:	756c6176 	strbvc	r6, [ip, #-374]!	; 0xfffffe8a
    1c60:	00315f65 	eorseq	r5, r1, r5, ror #30
    1c64:	66667562 	strbtvs	r7, [r6], -r2, ror #10
    1c68:	75507265 	ldrbvc	r7, [r0, #-613]	; 0xfffffd9b
    1c6c:	6f630074 	svcvs	0x00630074
    1c70:	00746e75 	rsbseq	r6, r4, r5, ror lr
    1c74:	552f3a43 	strpl	r3, [pc, #-2627]!	; 1239 <startup-0x1fffedc7>
    1c78:	73726573 	cmnvc	r2, #482344960	; 0x1cc00000
    1c7c:	6164412f 	cmnvs	r4, pc, lsr #2
    1c80:	4f2f746d 	svcmi	0x002f746d
    1c84:	7244656e 	subvc	r6, r4, #461373440	; 0x1b800000
    1c88:	2f657669 	svccs	0x00657669
    1c8c:	756b6f44 	strbvc	r6, [fp, #-3908]!	; 0xfffff0bc
    1c90:	746e656d 	strbtvc	r6, [lr], #-1389	; 0xfffffa93
    1c94:	7469472f 	strbtvc	r4, [r9], #-1839	; 0xfffff8d1
    1c98:	2f627548 	svccs	0x00627548
    1c9c:	32544144 	subscc	r4, r4, #68, 2
    1ca0:	4c2d3039 	stcmi	0, cr3, [sp], #-228	; 0xffffff1c
    1ca4:	736d7261 	cmnvc	sp, #268435462	; 0x10000006
    1ca8:	65747379 	ldrbvs	r7, [r4, #-889]!	; 0xfffffc87
    1cac:	6f6b2f6d 	svcvs	0x006b2f6d
    1cb0:	696c2f64 	stmdbvs	ip!, {r2, r5, r6, r8, r9, sl, fp, sp}^
    1cb4:	75622f62 	strbvc	r2, [r2, #-3938]!	; 0xfffff09e
    1cb8:	72656666 	rsbvc	r6, r5, #106954752	; 0x6600000
    1cbc:	4600632e 	strmi	r6, [r0], -lr, lsr #6
    1cc0:	004f4649 	subeq	r4, pc, r9, asr #12
    1cc4:	66667562 	strbtvs	r7, [r6], -r2, ror #10
    1cc8:	764f7265 	strbvc	r7, [pc], -r5, ror #4
    1ccc:	69727265 	ldmdbvs	r2!, {r0, r2, r5, r6, r9, ip, sp, lr}^
    1cd0:	614c6564 	cmpvs	ip, r4, ror #10
    1cd4:	64007473 	strvs	r7, [r0], #-1139	; 0xfffffb8d
    1cd8:	00747365 	rsbseq	r7, r4, r5, ror #6
    1cdc:	66667562 	strbtvs	r7, [r6], -r2, ror #10
    1ce0:	656c6500 	strbvs	r6, [ip, #-1280]!	; 0xfffffb00
    1ce4:	7562006d 	strbvc	r0, [r2, #-109]!	; 0xffffff93
    1ce8:	72656666 	rsbvc	r6, r5, #106954752	; 0x6600000
    1cec:	00746547 	rsbseq	r6, r4, r7, asr #10
    1cf0:	66667562 	strbtvs	r7, [r6], -r2, ror #10
    1cf4:	6e497265 	cdpvs	2, 4, cr7, cr9, cr5, {3}
    1cf8:	62007469 	andvs	r7, r0, #1761607680	; 0x69000000
    1cfc:	65666675 	strbvs	r6, [r6, #-1653]!	; 0xfffff98b
    1d00:	72700072 	rsbsvc	r0, r0, #114	; 0x72
    1d04:	6e497665 	cdpvs	6, 4, cr7, cr9, cr5, {3}
    1d08:	00786564 	rsbseq	r6, r8, r4, ror #10
    1d0c:	54737953 	ldrbtpl	r7, [r3], #-2387	; 0xfffff6ad
    1d10:	5f6b6369 	svcpl	0x006b6369
    1d14:	534b4c43 	movtpl	r4, #48195	; 0xbc43
    1d18:	6372756f 	cmnvs	r2, #465567744	; 0x1bc00000
    1d1c:	564e0065 	strbpl	r0, [lr], -r5, rrx
    1d20:	495f4349 	ldmdbmi	pc, {r0, r3, r6, r8, r9, lr}^	; <UNPREDICTABLE>
    1d24:	5374696e 	cmnpl	r4, #1802240	; 0x1b8000
    1d28:	63757274 	cmnvs	r5, #116, 4	; 0x40000007
    1d2c:	564e0074 			; <UNDEFINED> instruction: 0x564e0074
    1d30:	505f4349 	subspl	r4, pc, r9, asr #6
    1d34:	726f6972 	rsbvc	r6, pc, #1867776	; 0x1c8000
    1d38:	47797469 	ldrbmi	r7, [r9, -r9, ror #8]!
    1d3c:	70756f72 	rsbsvc	r6, r5, r2, ror pc
    1d40:	49564e00 	ldmdbmi	r6, {r9, sl, fp, lr}^
    1d44:	6e495f43 	cdpvs	15, 4, cr5, cr9, cr3, {2}
    1d48:	74007469 	strvc	r7, [r0], #-1129	; 0xfffffb97
    1d4c:	7270706d 	rsbsvc	r7, r0, #109	; 0x6d
    1d50:	664f0065 	strbvs	r0, [pc], -r5, rrx
    1d54:	74657366 	strbtvc	r7, [r5], #-870	; 0xfffffc9a
    1d58:	49564e00 	ldmdbmi	r6, {r9, sl, fp, lr}^
    1d5c:	65535f43 	ldrbvs	r5, [r3, #-3907]	; 0xfffff0bd
    1d60:	63655674 	cmnvs	r5, #116, 12	; 0x7400000
    1d64:	54726f74 	ldrbtpl	r6, [r2], #-3956	; 0xfffff08c
    1d68:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
    1d6c:	706d7400 	rsbvc	r7, sp, r0, lsl #8
    1d70:	00627573 	rsbeq	r7, r2, r3, ror r5
    1d74:	4349564e 	movtmi	r5, #38478	; 0x964e
    1d78:	7379535f 	cmnvc	r9, #2080374785	; 0x7c000001
    1d7c:	4c6d6574 	cfstr64mi	mvdx6, [sp], #-464	; 0xfffffe30
    1d80:	6e6f4350 	mcrvs	3, 3, r4, cr15, cr0, {2}
    1d84:	00676966 	rsbeq	r6, r7, r6, ror #18
    1d88:	54737953 	ldrbtpl	r7, [r3], #-2387	; 0xfffff6ad
    1d8c:	5f6b6369 	svcpl	0x006b6369
    1d90:	534b4c43 	movtpl	r4, #48195	; 0xbc43
    1d94:	6372756f 	cmnvs	r2, #465567744	; 0x1bc00000
    1d98:	6e6f4365 	cdpvs	3, 6, cr4, cr15, cr5, {3}
    1d9c:	00676966 	rsbeq	r6, r7, r6, ror #18
    1da0:	70706d74 	rsbsvc	r6, r0, r4, ror sp
    1da4:	726f6972 	rsbvc	r6, pc, #1867776	; 0x1c8000
    1da8:	00797469 	rsbseq	r7, r9, r9, ror #8
    1dac:	4349564e 	movtmi	r5, #38478	; 0x964e
    1db0:	6365565f 	cmnvs	r5, #99614720	; 0x5f00000
    1db4:	62615474 	rsbvs	r5, r1, #116, 8	; 0x74000000
    1db8:	2f3a4300 	svccs	0x003a4300
    1dbc:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
    1dc0:	64412f73 	strbvs	r2, [r1], #-3955	; 0xfffff08d
    1dc4:	2f746d61 	svccs	0x00746d61
    1dc8:	44656e4f 	strbtmi	r6, [r5], #-3663	; 0xfffff1b1
    1dcc:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
    1dd0:	6b6f442f 	blvs	1bd2e94 <startup-0x1e42d16c>
    1dd4:	6e656d75 	mcrvs	13, 3, r6, cr5, cr5, {3}
    1dd8:	69472f74 	stmdbvs	r7, {r2, r4, r5, r6, r8, r9, sl, fp, sp}^
    1ddc:	62754874 	rsbsvs	r4, r5, #116, 16	; 0x740000
    1de0:	5441442f 	strbpl	r4, [r1], #-1071	; 0xfffffbd1
    1de4:	2d303932 			; <UNDEFINED> instruction: 0x2d303932
    1de8:	6d72614c 	ldfvse	f6, [r2, #-304]!	; 0xfffffed0
    1dec:	74737973 	ldrbtvc	r7, [r3], #-2419	; 0xfffff68d
    1df0:	6b2f6d65 	blvs	bdd38c <startup-0x1f422c74>
    1df4:	6c2f646f 	cfstrsvs	mvf6, [pc], #-444	; 1c40 <startup-0x1fffe3c0>
    1df8:	532f6269 			; <UNDEFINED> instruction: 0x532f6269
    1dfc:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
    1e00:	6c5f3446 	cfldrdvs	mvd3, [pc], {70}	; 0x46
    1e04:	532f6269 			; <UNDEFINED> instruction: 0x532f6269
    1e08:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
    1e0c:	78783446 	ldmdavc	r8!, {r1, r2, r6, sl, ip, sp}^
    1e10:	6474535f 	ldrbtvs	r5, [r4], #-863	; 0xfffffca1
    1e14:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
    1e18:	445f6870 	ldrbmi	r6, [pc], #-2160	; 1e20 <startup-0x1fffe1e0>
    1e1c:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
    1e20:	72732f72 	rsbsvc	r2, r3, #456	; 0x1c8
    1e24:	696d2f63 	stmdbvs	sp!, {r0, r1, r5, r6, r8, r9, sl, fp, sp}^
    1e28:	632e6373 			; <UNDEFINED> instruction: 0x632e6373
    1e2c:	776f4c00 	strbvc	r4, [pc, -r0, lsl #24]!
    1e30:	65776f50 	ldrbvs	r6, [r7, #-3920]!	; 0xfffff0b0
    1e34:	646f4d72 	strbtvs	r4, [pc], #-3442	; 1e3c <startup-0x1fffe1c4>
    1e38:	564e0065 	strbpl	r0, [lr], -r5, rrx
    1e3c:	505f4349 	subspl	r4, pc, r9, asr #6
    1e40:	726f6972 	rsbvc	r6, pc, #1867776	; 0x1c8000
    1e44:	47797469 	ldrbmi	r7, [r9, -r9, ror #8]!
    1e48:	70756f72 	rsbsvc	r6, r5, r2, ror pc
    1e4c:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    1e50:	70006769 	andvc	r6, r0, r9, ror #14
    1e54:	6f706e69 	svcvs	0x00706e69
    1e58:	69420073 	stmdbvs	r2, {r0, r1, r4, r5, r6}^
    1e5c:	45535f74 	ldrbmi	r5, [r3, #-3956]	; 0xfffff08c
    1e60:	50470054 	subpl	r0, r7, r4, asr r0
    1e64:	525f4f49 	subspl	r4, pc, #292	; 0x124
    1e68:	4f646165 	svcmi	0x00646165
    1e6c:	75707475 	ldrbvc	r7, [r0, #-1141]!	; 0xfffffb8b
    1e70:	74614474 	strbtvc	r4, [r1], #-1140	; 0xfffffb8c
    1e74:	50470061 	subpl	r0, r7, r1, rrx
    1e78:	415f4f49 	cmpmi	pc, r9, asr #30
    1e7c:	65740046 	ldrbvs	r0, [r4, #-70]!	; 0xffffffba
    1e80:	4700706d 	strmi	r7, [r0, -sp, rrx]
    1e84:	5f4f4950 	svcpl	0x004f4950
    1e88:	75727453 	ldrbvc	r7, [r2, #-1107]!	; 0xfffffbad
    1e8c:	6e497463 	cdpvs	4, 4, cr7, cr9, cr3, {3}
    1e90:	42007469 	andmi	r7, r0, #1761607680	; 0x69000000
    1e94:	61567469 	cmpvs	r6, r9, ror #8
    1e98:	6942006c 	stmdbvs	r2, {r2, r3, r5, r6}^
    1e9c:	45525f74 	ldrbmi	r5, [r2, #-3956]	; 0xfffff08c
    1ea0:	00544553 	subseq	r4, r4, r3, asr r5
    1ea4:	4f495047 	svcmi	0x00495047
    1ea8:	6972575f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, lr}^
    1eac:	69426574 	stmdbvs	r2, {r2, r4, r5, r6, r8, sl, sp, lr}^
    1eb0:	50470074 	subpl	r0, r7, r4, ror r0
    1eb4:	535f4f49 	cmppl	pc, #292	; 0x124
    1eb8:	69427465 	stmdbvs	r2, {r0, r2, r5, r6, sl, ip, sp, lr}^
    1ebc:	47007374 	smlsdxmi	r0, r4, r3, r7
    1ec0:	5f4f4950 	svcpl	0x004f4950
    1ec4:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xfffff1b7
    1ec8:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
    1ecc:	65525f4f 	ldrbvs	r5, [r2, #-3919]	; 0xfffff0b1
    1ed0:	42746573 	rsbsmi	r6, r4, #482344960	; 0x1cc00000
    1ed4:	00737469 	rsbseq	r7, r3, r9, ror #8
    1ed8:	552f3a43 	strpl	r3, [pc, #-2627]!	; 149d <startup-0x1fffeb63>
    1edc:	73726573 	cmnvc	r2, #482344960	; 0x1cc00000
    1ee0:	6164412f 	cmnvs	r4, pc, lsr #2
    1ee4:	4f2f746d 	svcmi	0x002f746d
    1ee8:	7244656e 	subvc	r6, r4, #461373440	; 0x1b800000
    1eec:	2f657669 	svccs	0x00657669
    1ef0:	756b6f44 	strbvc	r6, [fp, #-3908]!	; 0xfffff0bc
    1ef4:	746e656d 	strbtvc	r6, [lr], #-1389	; 0xfffffa93
    1ef8:	7469472f 	strbtvc	r4, [r9], #-1839	; 0xfffff8d1
    1efc:	2f627548 	svccs	0x00627548
    1f00:	32544144 	subscc	r4, r4, #68, 2
    1f04:	4c2d3039 	stcmi	0, cr3, [sp], #-228	; 0xffffff1c
    1f08:	736d7261 	cmnvc	sp, #268435462	; 0x10000006
    1f0c:	65747379 	ldrbvs	r7, [r4, #-889]!	; 0xfffffc87
    1f10:	6f6b2f6d 	svcvs	0x006b2f6d
    1f14:	696c2f64 	stmdbvs	ip!, {r2, r5, r6, r8, r9, sl, fp, sp}^
    1f18:	54532f62 	ldrbpl	r2, [r3], #-3938	; 0xfffff09e
    1f1c:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
    1f20:	696c5f34 	stmdbvs	ip!, {r2, r4, r5, r8, r9, sl, fp, ip, lr}^
    1f24:	54532f62 	ldrbpl	r2, [r3], #-3938	; 0xfffff09e
    1f28:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
    1f2c:	5f787834 	svcpl	0x00787834
    1f30:	50647453 	rsbpl	r7, r4, r3, asr r4
    1f34:	70697265 	rsbvc	r7, r9, r5, ror #4
    1f38:	72445f68 	subvc	r5, r4, #104, 30	; 0x1a0
    1f3c:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
    1f40:	6372732f 	cmnvs	r2, #-1140850688	; 0xbc000000
    1f44:	6d74732f 	ldclvs	3, cr7, [r4, #-188]!	; 0xffffff44
    1f48:	34663233 	strbtcc	r3, [r6], #-563	; 0xfffffdcd
    1f4c:	675f7878 			; <UNDEFINED> instruction: 0x675f7878
    1f50:	2e6f6970 			; <UNDEFINED> instruction: 0x2e6f6970
    1f54:	50470063 	subpl	r0, r7, r3, rrx
    1f58:	445f4f49 	ldrbmi	r4, [pc], #-3913	; 1f60 <startup-0x1fffe0a0>
    1f5c:	696e4965 	stmdbvs	lr!, {r0, r2, r5, r6, r8, fp, lr}^
    1f60:	50470074 	subpl	r0, r7, r4, ror r0
    1f64:	525f4f49 	subspl	r4, pc, #292	; 0x124
    1f68:	49646165 	stmdbmi	r4!, {r0, r2, r5, r6, r8, sp, lr}^
    1f6c:	7475706e 	ldrbtvc	r7, [r5], #-110	; 0xffffff92
    1f70:	61746144 	cmnvs	r4, r4, asr #2
    1f74:	00746942 	rsbseq	r6, r4, r2, asr #18
    1f78:	4f495047 	svcmi	0x00495047
    1f7c:	696e495f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, lr}^
    1f80:	72745374 	rsbsvc	r5, r4, #116, 6	; 0xd0000001
    1f84:	00746375 	rsbseq	r6, r4, r5, ror r3
    1f88:	74726f50 	ldrbtvc	r6, [r2], #-3920	; 0xfffff0b0
    1f8c:	006c6156 	rsbeq	r6, ip, r6, asr r1
    1f90:	4f495047 	svcmi	0x00495047
    1f94:	6e69505f 	mcrvs	0, 3, r5, cr9, cr15, {2}
    1f98:	72756f53 	rsbsvc	r6, r5, #332	; 0x14c
    1f9c:	47006563 	strmi	r6, [r0, -r3, ror #10]
    1fa0:	5f4f4950 	svcpl	0x004f4950
    1fa4:	64616552 	strbtvs	r6, [r1], #-1362	; 0xfffffaae
    1fa8:	75706e49 	ldrbvc	r6, [r0, #-3657]!	; 0xfffff1b7
    1fac:	74614474 	strbtvc	r4, [r1], #-1140	; 0xfffffb8c
    1fb0:	50470061 	subpl	r0, r7, r1, rrx
    1fb4:	505f4f49 	subspl	r4, pc, r9, asr #30
    1fb8:	6f4c6e69 	svcvs	0x004c6e69
    1fbc:	6f436b63 	svcvs	0x00436b63
    1fc0:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    1fc4:	74694200 	strbtvc	r4, [r9], #-512	; 0xfffffe00
    1fc8:	69746341 	ldmdbvs	r4!, {r0, r6, r8, r9, sp, lr}^
    1fcc:	63006e6f 	movwvs	r6, #3695	; 0xe6f
    1fd0:	65727275 	ldrbvs	r7, [r2, #-629]!	; 0xfffffd8b
    1fd4:	6970746e 	ldmdbvs	r0!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}^
    1fd8:	5047006e 	subpl	r0, r7, lr, rrx
    1fdc:	575f4f49 	ldrbpl	r4, [pc, -r9, asr #30]
    1fe0:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
    1fe4:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
    1fe8:	4700784f 	strmi	r7, [r0, -pc, asr #16]
    1fec:	5f4f4950 	svcpl	0x004f4950
    1ff0:	67676f54 			; <UNDEFINED> instruction: 0x67676f54
    1ff4:	6942656c 	stmdbvs	r2, {r2, r3, r5, r6, r8, sl, sp, lr}^
    1ff8:	74007374 	strvc	r7, [r0], #-884	; 0xfffffc8c
    1ffc:	5f706d65 	svcpl	0x00706d65
    2000:	50470032 	subpl	r0, r7, r2, lsr r0
    2004:	505f4f49 	subspl	r4, pc, r9, asr #30
    2008:	46416e69 	strbmi	r6, [r1], -r9, ror #28
    200c:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    2010:	47006769 	strmi	r6, [r0, -r9, ror #14]
    2014:	5f4f4950 	svcpl	0x004f4950
    2018:	64616552 	strbtvs	r6, [r1], #-1362	; 0xfffffaae
    201c:	7074754f 	rsbsvc	r7, r4, pc, asr #10
    2020:	61447475 	hvcvs	18245	; 0x4745
    2024:	69426174 	stmdbvs	r2, {r2, r4, r5, r6, r8, sp, lr}^
    2028:	Address 0x00002028 is out of bounds.


Disassembly of section .comment:

00000000 <.comment>:
   0:	3a434347 	bcc	10d0d24 <startup-0x1ef2f2dc>
   4:	4e472820 	cdpmi	8, 4, cr2, cr7, cr0, {1}
   8:	6f542055 	svcvs	0x00542055
   c:	20736c6f 	rsbscs	r6, r3, pc, ror #24
  10:	20726f66 	rsbscs	r6, r2, r6, ror #30
  14:	206d7241 	rsbcs	r7, sp, r1, asr #4
  18:	65626d45 	strbvs	r6, [r2, #-3397]!	; 0xfffff2bb
  1c:	64656464 	strbtvs	r6, [r5], #-1124	; 0xfffffb9c
  20:	6f725020 	svcvs	0x00725020
  24:	73736563 	cmnvc	r3, #415236096	; 0x18c00000
  28:	2073726f 	rsbscs	r7, r3, pc, ror #4
  2c:	30322d37 	eorscc	r2, r2, r7, lsr sp
  30:	712d3731 			; <UNDEFINED> instruction: 0x712d3731
  34:	616d2d34 	cmnvs	sp, r4, lsr sp
  38:	29726f6a 	ldmdbcs	r2!, {r1, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
  3c:	322e3720 	eorcc	r3, lr, #32, 14	; 0x800000
  40:	3220312e 	eorcc	r3, r0, #-2147483637	; 0x8000000b
  44:	30373130 	eorscc	r3, r7, r0, lsr r1
  48:	20343039 	eorscs	r3, r4, r9, lsr r0
  4c:	6c657228 	sfmvs	f7, 2, [r5], #-160	; 0xffffff60
  50:	65736165 	ldrbvs	r6, [r3, #-357]!	; 0xfffffe9b
  54:	415b2029 	cmpmi	fp, r9, lsr #32
  58:	652f4d52 	strvs	r4, [pc, #-3410]!	; fffff30e <GPIO_Ports+0xdfffb53a>
  5c:	6465626d 	strbtvs	r6, [r5], #-621	; 0xfffffd93
  60:	2d646564 	cfstr64cs	mvdx6, [r4, #-400]!	; 0xfffffe70
  64:	72622d37 	rsbvc	r2, r2, #3520	; 0xdc0
  68:	68636e61 	stmdavs	r3!, {r0, r5, r6, r9, sl, fp, sp, lr}^
  6c:	76657220 	strbtvc	r7, [r5], -r0, lsr #4
  70:	6f697369 	svcvs	0x00697369
  74:	3532206e 	ldrcc	r2, [r2, #-110]!	; 0xffffff92
  78:	34303235 	ldrtcc	r3, [r0], #-565	; 0xfffffdcb
  7c:	Address 0x0000007c is out of bounds.


Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00002b41 	andeq	r2, r0, r1, asr #22
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	00000021 	andeq	r0, r0, r1, lsr #32
  10:	2d533605 	ldclcs	6, cr3, [r3, #-20]	; 0xffffffec
  14:	0c06004d 	stceq	0, cr0, [r6], {77}	; 0x4d
  18:	01094d07 	tsteq	r9, r7, lsl #26
  1c:	01140412 	tsteq	r4, r2, lsl r4
  20:	03170115 	tsteq	r7, #1073741829	; 0x40000005
  24:	01190118 	tsteq	r9, r8, lsl r1
  28:	061e011a 			; <UNDEFINED> instruction: 0x061e011a

Disassembly of section .debug_frame:

00000000 <.debug_frame>:
       0:	0000000c 	andeq	r0, r0, ip
       4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
       8:	7c020001 	stcvc	0, cr0, [r2], {1}
       c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
      10:	0000001c 	andeq	r0, r0, ip, lsl r0
      14:	00000000 	andeq	r0, r0, r0
      18:	20000010 	andcs	r0, r0, r0, lsl r0
      1c:	00000060 	andeq	r0, r0, r0, rrx
      20:	40080e41 	andmi	r0, r8, r1, asr #28
      24:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
      28:	100e4101 	andne	r4, lr, r1, lsl #2
      2c:	00070d41 	andeq	r0, r7, r1, asr #26
      30:	0000001c 	andeq	r0, r0, ip, lsl r0
      34:	00000000 	andeq	r0, r0, r0
      38:	20000070 	andcs	r0, r0, r0, ror r0
      3c:	00000044 	andeq	r0, r0, r4, asr #32
      40:	40080e41 	andmi	r0, r8, r1, asr #28
      44:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
      48:	100e4101 	andne	r4, lr, r1, lsl #2
      4c:	00070d41 	andeq	r0, r7, r1, asr #26
      50:	0000001c 	andeq	r0, r0, ip, lsl r0
      54:	00000000 	andeq	r0, r0, r0
      58:	200000b4 	strhcs	r0, [r0], -r4
      5c:	00000098 	muleq	r0, r8, r0
      60:	40080e41 	andmi	r0, r8, r1, asr #28
      64:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
      68:	280e4101 	stmdacs	lr, {r0, r8, lr}
      6c:	00070d41 	andeq	r0, r7, r1, asr #26
      70:	00000020 	andeq	r0, r0, r0, lsr #32
      74:	00000000 	andeq	r0, r0, r0
      78:	2000014c 	andcs	r0, r0, ip, asr #2
      7c:	0000012c 	andeq	r0, r0, ip, lsr #2
      80:	400c0e41 	andmi	r0, ip, r1, asr #28
      84:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
      88:	018e4002 	orreq	r4, lr, r2
      8c:	41280e41 			; <UNDEFINED> instruction: 0x41280e41
      90:	0000070d 	andeq	r0, r0, sp, lsl #14
      94:	0000001c 	andeq	r0, r0, ip, lsl r0
      98:	00000000 	andeq	r0, r0, r0
      9c:	20000278 	andcs	r0, r0, r8, ror r2
      a0:	00000050 	andeq	r0, r0, r0, asr r0
      a4:	40080e41 	andmi	r0, r8, r1, asr #28
      a8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
      ac:	200e4101 	andcs	r4, lr, r1, lsl #2
      b0:	00070d41 	andeq	r0, r7, r1, asr #26
      b4:	0000001c 	andeq	r0, r0, ip, lsl r0
      b8:	00000000 	andeq	r0, r0, r0
      bc:	200002c8 	andcs	r0, r0, r8, asr #5
      c0:	00000032 	andeq	r0, r0, r2, lsr r0
      c4:	40080e41 	andmi	r0, r8, r1, asr #28
      c8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
      cc:	100e4101 	andne	r4, lr, r1, lsl #2
      d0:	00070d41 	andeq	r0, r7, r1, asr #26
      d4:	0000001c 	andeq	r0, r0, ip, lsl r0
      d8:	00000000 	andeq	r0, r0, r0
      dc:	200002fa 	strdcs	r0, [r0], -sl
      e0:	000000aa 	andeq	r0, r0, sl, lsr #1
      e4:	40080e41 	andmi	r0, r8, r1, asr #28
      e8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
      ec:	180e4101 	stmdane	lr, {r0, r8, lr}
      f0:	00070d41 	andeq	r0, r7, r1, asr #26
      f4:	0000001c 	andeq	r0, r0, ip, lsl r0
      f8:	00000000 	andeq	r0, r0, r0
      fc:	200003a4 	andcs	r0, r0, r4, lsr #7
     100:	0000006c 	andeq	r0, r0, ip, rrx
     104:	40080e41 	andmi	r0, r8, r1, asr #28
     108:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     10c:	200e4101 	andcs	r4, lr, r1, lsl #2
     110:	00070d41 	andeq	r0, r7, r1, asr #26
     114:	00000024 	andeq	r0, r0, r4, lsr #32
     118:	00000000 	andeq	r0, r0, r0
     11c:	20000410 	andcs	r0, r0, r0, lsl r4
     120:	00000134 	andeq	r0, r0, r4, lsr r1
     124:	40100e41 	andsmi	r0, r0, r1, asr #28
     128:	85400484 	strbhi	r0, [r0, #-1156]	; 0xfffffb7c
     12c:	02874003 	addeq	r4, r7, #3
     130:	41018e40 	tstmi	r1, r0, asr #28
     134:	0d41200e 	stcleq	0, cr2, [r1, #-56]	; 0xffffffc8
     138:	00000007 	andeq	r0, r0, r7
     13c:	0000001c 	andeq	r0, r0, ip, lsl r0
     140:	00000000 	andeq	r0, r0, r0
     144:	20000544 	andcs	r0, r0, r4, asr #10
     148:	00000098 	muleq	r0, r8, r0
     14c:	40080e41 	andmi	r0, r8, r1, asr #28
     150:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     154:	100e4101 	andne	r4, lr, r1, lsl #2
     158:	00070d41 	andeq	r0, r7, r1, asr #26
     15c:	00000024 	andeq	r0, r0, r4, lsr #32
     160:	00000000 	andeq	r0, r0, r0
     164:	200005dc 	ldrdcs	r0, [r0], -ip
     168:	000001bc 			; <UNDEFINED> instruction: 0x000001bc
     16c:	40140e41 	andsmi	r0, r4, r1, asr #28
     170:	85400584 	strbhi	r0, [r0, #-1412]	; 0xfffffa7c
     174:	03864004 	orreq	r4, r6, #4
     178:	40028740 	andmi	r8, r2, r0, asr #14
     17c:	0e41018e 	dvfeqd	f0, f1, #0.5
     180:	070d4138 	smladxeq	sp, r8, r1, r4
     184:	0000001c 	andeq	r0, r0, ip, lsl r0
     188:	00000000 	andeq	r0, r0, r0
     18c:	20000798 	mulcs	r0, r8, r7
     190:	0000003a 	andeq	r0, r0, sl, lsr r0
     194:	40080e41 	andmi	r0, r8, r1, asr #28
     198:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     19c:	200e4101 	andcs	r4, lr, r1, lsl #2
     1a0:	00070d41 	andeq	r0, r7, r1, asr #26
     1a4:	0000001c 	andeq	r0, r0, ip, lsl r0
     1a8:	00000000 	andeq	r0, r0, r0
     1ac:	200007d2 	ldrdcs	r0, [r0], -r2
     1b0:	00000022 	andeq	r0, r0, r2, lsr #32
     1b4:	40080e41 	andmi	r0, r8, r1, asr #28
     1b8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     1bc:	180e4101 	stmdane	lr, {r0, r8, lr}
     1c0:	00070d41 	andeq	r0, r7, r1, asr #26
     1c4:	0000000c 	andeq	r0, r0, ip
     1c8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     1cc:	7c020001 	stcvc	0, cr0, [r2], {1}
     1d0:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     1d4:	0000001c 	andeq	r0, r0, ip, lsl r0
     1d8:	000001c4 	andeq	r0, r0, r4, asr #3
     1dc:	200007f4 	strdcs	r0, [r0], -r4
     1e0:	00000050 	andeq	r0, r0, r0, asr r0
     1e4:	40080e41 	andmi	r0, r8, r1, asr #28
     1e8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     1ec:	100e4101 	andne	r4, lr, r1, lsl #2
     1f0:	00070d41 	andeq	r0, r7, r1, asr #26
     1f4:	0000001c 	andeq	r0, r0, ip, lsl r0
     1f8:	000001c4 	andeq	r0, r0, r4, asr #3
     1fc:	20000844 	andcs	r0, r0, r4, asr #16
     200:	000001c4 	andeq	r0, r0, r4, asr #3
     204:	40080e41 	andmi	r0, r8, r1, asr #28
     208:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     20c:	180e4101 	stmdane	lr, {r0, r8, lr}
     210:	00070d41 	andeq	r0, r7, r1, asr #26
     214:	00000020 	andeq	r0, r0, r0, lsr #32
     218:	000001c4 	andeq	r0, r0, r4, asr #3
     21c:	20000a08 	andcs	r0, r0, r8, lsl #20
     220:	000001b0 			; <UNDEFINED> instruction: 0x000001b0
     224:	400c0e41 	andmi	r0, ip, r1, asr #28
     228:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
     22c:	018e4002 	orreq	r4, lr, r2
     230:	41200e41 			; <UNDEFINED> instruction: 0x41200e41
     234:	0000070d 	andeq	r0, r0, sp, lsl #14
     238:	0000001c 	andeq	r0, r0, ip, lsl r0
     23c:	000001c4 	andeq	r0, r0, r4, asr #3
     240:	20000bb8 			; <UNDEFINED> instruction: 0x20000bb8
     244:	00000052 	andeq	r0, r0, r2, asr r0
     248:	40080e41 	andmi	r0, r8, r1, asr #28
     24c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     250:	100e4101 	andne	r4, lr, r1, lsl #2
     254:	00070d41 	andeq	r0, r7, r1, asr #26
     258:	0000001c 	andeq	r0, r0, ip, lsl r0
     25c:	000001c4 	andeq	r0, r0, r4, asr #3
     260:	20000c0a 	andcs	r0, r0, sl, lsl #24
     264:	00000072 	andeq	r0, r0, r2, ror r0
     268:	40080e41 	andmi	r0, r8, r1, asr #28
     26c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     270:	100e4101 	andne	r4, lr, r1, lsl #2
     274:	00070d41 	andeq	r0, r7, r1, asr #26
     278:	0000001c 	andeq	r0, r0, ip, lsl r0
     27c:	000001c4 	andeq	r0, r0, r4, asr #3
     280:	20000c7c 	andcs	r0, r0, ip, ror ip
     284:	00000040 	andeq	r0, r0, r0, asr #32
     288:	40080e41 	andmi	r0, r8, r1, asr #28
     28c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     290:	100e4101 	andne	r4, lr, r1, lsl #2
     294:	00070d41 	andeq	r0, r7, r1, asr #26
     298:	0000001c 	andeq	r0, r0, ip, lsl r0
     29c:	000001c4 	andeq	r0, r0, r4, asr #3
     2a0:	20000cbc 			; <UNDEFINED> instruction: 0x20000cbc
     2a4:	000000c8 	andeq	r0, r0, r8, asr #1
     2a8:	40080e41 	andmi	r0, r8, r1, asr #28
     2ac:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     2b0:	100e4101 	andne	r4, lr, r1, lsl #2
     2b4:	00070d41 	andeq	r0, r7, r1, asr #26
     2b8:	00000020 	andeq	r0, r0, r0, lsr #32
     2bc:	000001c4 	andeq	r0, r0, r4, asr #3
     2c0:	20000d84 	andcs	r0, r0, r4, lsl #27
     2c4:	000001e2 	andeq	r0, r0, r2, ror #3
     2c8:	400c0e41 	andmi	r0, ip, r1, asr #28
     2cc:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
     2d0:	018e4002 	orreq	r4, lr, r2
     2d4:	41200e41 			; <UNDEFINED> instruction: 0x41200e41
     2d8:	0000070d 	andeq	r0, r0, sp, lsl #14
     2dc:	0000001c 	andeq	r0, r0, ip, lsl r0
     2e0:	000001c4 	andeq	r0, r0, r4, asr #3
     2e4:	20000f66 	andcs	r0, r0, r6, ror #30
     2e8:	000000d6 	ldrdeq	r0, [r0], -r6
     2ec:	40080e41 	andmi	r0, r8, r1, asr #28
     2f0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     2f4:	180e4101 	stmdane	lr, {r0, r8, lr}
     2f8:	00070d41 	andeq	r0, r7, r1, asr #26
     2fc:	0000001c 	andeq	r0, r0, ip, lsl r0
     300:	000001c4 	andeq	r0, r0, r4, asr #3
     304:	2000103c 	andcs	r1, r0, ip, lsr r0
     308:	00000056 	andeq	r0, r0, r6, asr r0
     30c:	40080e41 	andmi	r0, r8, r1, asr #28
     310:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     314:	100e4101 	andne	r4, lr, r1, lsl #2
     318:	00070d41 	andeq	r0, r7, r1, asr #26
     31c:	0000001c 	andeq	r0, r0, ip, lsl r0
     320:	000001c4 	andeq	r0, r0, r4, asr #3
     324:	20001092 	mulcs	r0, r2, r0
     328:	000001aa 	andeq	r0, r0, sl, lsr #3
     32c:	40080e41 	andmi	r0, r8, r1, asr #28
     330:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     334:	180e4101 	stmdane	lr, {r0, r8, lr}
     338:	00070d41 	andeq	r0, r7, r1, asr #26
     33c:	0000001c 	andeq	r0, r0, ip, lsl r0
     340:	000001c4 	andeq	r0, r0, r4, asr #3
     344:	2000123c 	andcs	r1, r0, ip, lsr r2
     348:	00000038 	andeq	r0, r0, r8, lsr r0
     34c:	40080e41 	andmi	r0, r8, r1, asr #28
     350:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     354:	100e4101 	andne	r4, lr, r1, lsl #2
     358:	00070d41 	andeq	r0, r7, r1, asr #26
     35c:	0000001c 	andeq	r0, r0, ip, lsl r0
     360:	000001c4 	andeq	r0, r0, r4, asr #3
     364:	20001274 	andcs	r1, r0, r4, ror r2
     368:	00000060 	andeq	r0, r0, r0, rrx
     36c:	40080e41 	andmi	r0, r8, r1, asr #28
     370:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     374:	180e4101 	stmdane	lr, {r0, r8, lr}
     378:	00070d41 	andeq	r0, r7, r1, asr #26
     37c:	0000001c 	andeq	r0, r0, ip, lsl r0
     380:	000001c4 	andeq	r0, r0, r4, asr #3
     384:	200012d4 	ldrdcs	r1, [r0], -r4
     388:	00000124 	andeq	r0, r0, r4, lsr #2
     38c:	40080e41 	andmi	r0, r8, r1, asr #28
     390:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     394:	180e4101 	stmdane	lr, {r0, r8, lr}
     398:	00070d41 	andeq	r0, r7, r1, asr #26
     39c:	0000001c 	andeq	r0, r0, ip, lsl r0
     3a0:	000001c4 	andeq	r0, r0, r4, asr #3
     3a4:	200013f8 	strdcs	r1, [r0], -r8
     3a8:	00000042 	andeq	r0, r0, r2, asr #32
     3ac:	40080e41 	andmi	r0, r8, r1, asr #28
     3b0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     3b4:	180e4101 	stmdane	lr, {r0, r8, lr}
     3b8:	00070d41 	andeq	r0, r7, r1, asr #26
     3bc:	0000001c 	andeq	r0, r0, ip, lsl r0
     3c0:	000001c4 	andeq	r0, r0, r4, asr #3
     3c4:	2000143a 	andcs	r1, r0, sl, lsr r4
     3c8:	00000062 	andeq	r0, r0, r2, rrx
     3cc:	40080e41 	andmi	r0, r8, r1, asr #28
     3d0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     3d4:	180e4101 	stmdane	lr, {r0, r8, lr}
     3d8:	00070d41 	andeq	r0, r7, r1, asr #26
     3dc:	0000001c 	andeq	r0, r0, ip, lsl r0
     3e0:	000001c4 	andeq	r0, r0, r4, asr #3
     3e4:	2000149c 	mulcs	r0, ip, r4
     3e8:	0000002e 	andeq	r0, r0, lr, lsr #32
     3ec:	40080e41 	andmi	r0, r8, r1, asr #28
     3f0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     3f4:	180e4101 	stmdane	lr, {r0, r8, lr}
     3f8:	00070d41 	andeq	r0, r7, r1, asr #26
     3fc:	0000001c 	andeq	r0, r0, ip, lsl r0
     400:	000001c4 	andeq	r0, r0, r4, asr #3
     404:	200014ca 	andcs	r1, r0, sl, asr #9
     408:	00000026 	andeq	r0, r0, r6, lsr #32
     40c:	40080e41 	andmi	r0, r8, r1, asr #28
     410:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     414:	180e4101 	stmdane	lr, {r0, r8, lr}
     418:	00070d41 	andeq	r0, r7, r1, asr #26
     41c:	0000001c 	andeq	r0, r0, ip, lsl r0
     420:	000001c4 	andeq	r0, r0, r4, asr #3
     424:	200014f0 	strdcs	r1, [r0], -r0
     428:	00000026 	andeq	r0, r0, r6, lsr #32
     42c:	40080e41 	andmi	r0, r8, r1, asr #28
     430:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     434:	180e4101 	stmdane	lr, {r0, r8, lr}
     438:	00070d41 	andeq	r0, r7, r1, asr #26
     43c:	0000001c 	andeq	r0, r0, ip, lsl r0
     440:	000001c4 	andeq	r0, r0, r4, asr #3
     444:	20001516 	andcs	r1, r0, r6, lsl r5
     448:	0000003a 	andeq	r0, r0, sl, lsr r0
     44c:	40080e41 	andmi	r0, r8, r1, asr #28
     450:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     454:	180e4101 	stmdane	lr, {r0, r8, lr}
     458:	00070d41 	andeq	r0, r7, r1, asr #26
     45c:	0000001c 	andeq	r0, r0, ip, lsl r0
     460:	000001c4 	andeq	r0, r0, r4, asr #3
     464:	20001550 	andcs	r1, r0, r0, asr r5
     468:	000000f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     46c:	40080e41 	andmi	r0, r8, r1, asr #28
     470:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     474:	180e4101 	stmdane	lr, {r0, r8, lr}
     478:	00070d41 	andeq	r0, r7, r1, asr #26
     47c:	0000001c 	andeq	r0, r0, ip, lsl r0
     480:	000001c4 	andeq	r0, r0, r4, asr #3
     484:	20001640 	andcs	r1, r0, r0, asr #12
     488:	00000070 	andeq	r0, r0, r0, ror r0
     48c:	40080e41 	andmi	r0, r8, r1, asr #28
     490:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     494:	180e4101 	stmdane	lr, {r0, r8, lr}
     498:	00070d41 	andeq	r0, r7, r1, asr #26
     49c:	00000020 	andeq	r0, r0, r0, lsr #32
     4a0:	000001c4 	andeq	r0, r0, r4, asr #3
     4a4:	200016b0 			; <UNDEFINED> instruction: 0x200016b0
     4a8:	000001f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     4ac:	400c0e41 	andmi	r0, ip, r1, asr #28
     4b0:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
     4b4:	018e4002 	orreq	r4, lr, r2
     4b8:	41200e41 			; <UNDEFINED> instruction: 0x41200e41
     4bc:	0000070d 	andeq	r0, r0, sp, lsl #14
     4c0:	0000001c 	andeq	r0, r0, ip, lsl r0
     4c4:	000001c4 	andeq	r0, r0, r4, asr #3
     4c8:	200018a0 	andcs	r1, r0, r0, lsr #17
     4cc:	000000ec 	andeq	r0, r0, ip, ror #1
     4d0:	40080e41 	andmi	r0, r8, r1, asr #28
     4d4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     4d8:	100e4101 	andne	r4, lr, r1, lsl #2
     4dc:	00070d41 	andeq	r0, r7, r1, asr #26
     4e0:	0000001c 	andeq	r0, r0, ip, lsl r0
     4e4:	000001c4 	andeq	r0, r0, r4, asr #3
     4e8:	2000198c 	andcs	r1, r0, ip, lsl #19
     4ec:	0000003a 	andeq	r0, r0, sl, lsr r0
     4f0:	40080e41 	andmi	r0, r8, r1, asr #28
     4f4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     4f8:	180e4101 	stmdane	lr, {r0, r8, lr}
     4fc:	00070d41 	andeq	r0, r7, r1, asr #26
     500:	0000000c 	andeq	r0, r0, ip
     504:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     508:	7c020001 	stcvc	0, cr0, [r2], {1}
     50c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     510:	0000001c 	andeq	r0, r0, ip, lsl r0
     514:	00000500 	andeq	r0, r0, r0, lsl #10
     518:	200019c8 	andcs	r1, r0, r8, asr #19
     51c:	00000060 	andeq	r0, r0, r0, rrx
     520:	40080e41 	andmi	r0, r8, r1, asr #28
     524:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     528:	100e4101 	andne	r4, lr, r1, lsl #2
     52c:	00070d41 	andeq	r0, r7, r1, asr #26
     530:	0000001c 	andeq	r0, r0, ip, lsl r0
     534:	00000500 	andeq	r0, r0, r0, lsl #10
     538:	20001a28 	andcs	r1, r0, r8, lsr #20
     53c:	00000048 	andeq	r0, r0, r8, asr #32
     540:	40080e41 	andmi	r0, r8, r1, asr #28
     544:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     548:	100e4101 	andne	r4, lr, r1, lsl #2
     54c:	00070d41 	andeq	r0, r7, r1, asr #26
     550:	00000018 	andeq	r0, r0, r8, lsl r0
     554:	00000500 	andeq	r0, r0, r0, lsl #10
     558:	20001a70 	andcs	r1, r0, r0, ror sl
     55c:	00000070 	andeq	r0, r0, r0, ror r0
     560:	40080e41 	andmi	r0, r8, r1, asr #28
     564:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     568:	070d4101 	streq	r4, [sp, -r1, lsl #2]
     56c:	0000001c 	andeq	r0, r0, ip, lsl r0
     570:	00000500 	andeq	r0, r0, r0, lsl #10
     574:	20001ae0 	andcs	r1, r0, r0, ror #21
     578:	00000028 	andeq	r0, r0, r8, lsr #32
     57c:	40080e41 	andmi	r0, r8, r1, asr #28
     580:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     584:	100e4101 	andne	r4, lr, r1, lsl #2
     588:	00070d41 	andeq	r0, r7, r1, asr #26
     58c:	00000020 	andeq	r0, r0, r0, lsr #32
     590:	00000500 	andeq	r0, r0, r0, lsl #10
     594:	20001b08 	andcs	r1, r0, r8, lsl #22
     598:	0000005e 	andeq	r0, r0, lr, asr r0
     59c:	400c0e41 	andmi	r0, ip, r1, asr #28
     5a0:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
     5a4:	018e4002 	orreq	r4, lr, r2
     5a8:	41180e41 	tstmi	r8, r1, asr #28
     5ac:	0000070d 	andeq	r0, r0, sp, lsl #14
     5b0:	0000001c 	andeq	r0, r0, ip, lsl r0
     5b4:	00000500 	andeq	r0, r0, r0, lsl #10
     5b8:	20001b66 	andcs	r1, r0, r6, ror #22
     5bc:	0000003e 	andeq	r0, r0, lr, lsr r0
     5c0:	40080e41 	andmi	r0, r8, r1, asr #28
     5c4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     5c8:	180e4101 	stmdane	lr, {r0, r8, lr}
     5cc:	00070d41 	andeq	r0, r7, r1, asr #26
     5d0:	0000001c 	andeq	r0, r0, ip, lsl r0
     5d4:	00000500 	andeq	r0, r0, r0, lsl #10
     5d8:	20001ba4 	andcs	r1, r0, r4, lsr #23
     5dc:	00000020 	andeq	r0, r0, r0, lsr #32
     5e0:	40080e41 	andmi	r0, r8, r1, asr #28
     5e4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     5e8:	100e4101 	andne	r4, lr, r1, lsl #2
     5ec:	00070d41 	andeq	r0, r7, r1, asr #26
     5f0:	0000001c 	andeq	r0, r0, ip, lsl r0
     5f4:	00000500 	andeq	r0, r0, r0, lsl #10
     5f8:	20001bc4 	andcs	r1, r0, r4, asr #23
     5fc:	00000044 	andeq	r0, r0, r4, asr #32
     600:	40080e41 	andmi	r0, r8, r1, asr #28
     604:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     608:	100e4101 	andne	r4, lr, r1, lsl #2
     60c:	00070d41 	andeq	r0, r7, r1, asr #26
     610:	0000001c 	andeq	r0, r0, ip, lsl r0
     614:	00000500 	andeq	r0, r0, r0, lsl #10
     618:	20001c08 	andcs	r1, r0, r8, lsl #24
     61c:	00000020 	andeq	r0, r0, r0, lsr #32
     620:	40080e41 	andmi	r0, r8, r1, asr #28
     624:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     628:	100e4101 	andne	r4, lr, r1, lsl #2
     62c:	00070d41 	andeq	r0, r7, r1, asr #26
     630:	0000001c 	andeq	r0, r0, ip, lsl r0
     634:	00000500 	andeq	r0, r0, r0, lsl #10
     638:	20001c28 	andcs	r1, r0, r8, lsr #24
     63c:	0000003c 	andeq	r0, r0, ip, lsr r0
     640:	40080e41 	andmi	r0, r8, r1, asr #28
     644:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     648:	180e4101 	stmdane	lr, {r0, r8, lr}
     64c:	00070d41 	andeq	r0, r7, r1, asr #26
     650:	0000001c 	andeq	r0, r0, ip, lsl r0
     654:	00000500 	andeq	r0, r0, r0, lsl #10
     658:	20001c64 	andcs	r1, r0, r4, ror #24
     65c:	00000020 	andeq	r0, r0, r0, lsr #32
     660:	40080e41 	andmi	r0, r8, r1, asr #28
     664:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     668:	100e4101 	andne	r4, lr, r1, lsl #2
     66c:	00070d41 	andeq	r0, r7, r1, asr #26
     670:	0000001c 	andeq	r0, r0, ip, lsl r0
     674:	00000500 	andeq	r0, r0, r0, lsl #10
     678:	20001c84 	andcs	r1, r0, r4, lsl #25
     67c:	00000028 	andeq	r0, r0, r8, lsr #32
     680:	40080e41 	andmi	r0, r8, r1, asr #28
     684:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     688:	100e4101 	andne	r4, lr, r1, lsl #2
     68c:	00070d41 	andeq	r0, r7, r1, asr #26
     690:	0000001c 	andeq	r0, r0, ip, lsl r0
     694:	00000500 	andeq	r0, r0, r0, lsl #10
     698:	20001cac 	andcs	r1, r0, ip, lsr #25
     69c:	00000020 	andeq	r0, r0, r0, lsr #32
     6a0:	40080e41 	andmi	r0, r8, r1, asr #28
     6a4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     6a8:	100e4101 	andne	r4, lr, r1, lsl #2
     6ac:	00070d41 	andeq	r0, r7, r1, asr #26
     6b0:	0000001c 	andeq	r0, r0, ip, lsl r0
     6b4:	00000500 	andeq	r0, r0, r0, lsl #10
     6b8:	20001ccc 	andcs	r1, r0, ip, asr #25
     6bc:	00000030 	andeq	r0, r0, r0, lsr r0
     6c0:	40080e41 	andmi	r0, r8, r1, asr #28
     6c4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     6c8:	180e4101 	stmdane	lr, {r0, r8, lr}
     6cc:	00070d41 	andeq	r0, r7, r1, asr #26
     6d0:	0000001c 	andeq	r0, r0, ip, lsl r0
     6d4:	00000500 	andeq	r0, r0, r0, lsl #10
     6d8:	20001cfc 	strdcs	r1, [r0], -ip
     6dc:	00000020 	andeq	r0, r0, r0, lsr #32
     6e0:	40080e41 	andmi	r0, r8, r1, asr #28
     6e4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     6e8:	100e4101 	andne	r4, lr, r1, lsl #2
     6ec:	00070d41 	andeq	r0, r7, r1, asr #26
     6f0:	0000001c 	andeq	r0, r0, ip, lsl r0
     6f4:	00000500 	andeq	r0, r0, r0, lsl #10
     6f8:	20001d1c 	andcs	r1, r0, ip, lsl sp
     6fc:	00000020 	andeq	r0, r0, r0, lsr #32
     700:	40080e41 	andmi	r0, r8, r1, asr #28
     704:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     708:	100e4101 	andne	r4, lr, r1, lsl #2
     70c:	00070d41 	andeq	r0, r7, r1, asr #26
     710:	0000001c 	andeq	r0, r0, ip, lsl r0
     714:	00000500 	andeq	r0, r0, r0, lsl #10
     718:	20001d3c 	andcs	r1, r0, ip, lsr sp
     71c:	00000040 	andeq	r0, r0, r0, asr #32
     720:	40080e41 	andmi	r0, r8, r1, asr #28
     724:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     728:	180e4101 	stmdane	lr, {r0, r8, lr}
     72c:	00070d41 	andeq	r0, r7, r1, asr #26
     730:	0000001c 	andeq	r0, r0, ip, lsl r0
     734:	00000500 	andeq	r0, r0, r0, lsl #10
     738:	20001d7c 	andcs	r1, r0, ip, ror sp
     73c:	0000003c 	andeq	r0, r0, ip, lsr r0
     740:	40080e41 	andmi	r0, r8, r1, asr #28
     744:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     748:	180e4101 	stmdane	lr, {r0, r8, lr}
     74c:	00070d41 	andeq	r0, r7, r1, asr #26
     750:	0000001c 	andeq	r0, r0, ip, lsl r0
     754:	00000500 	andeq	r0, r0, r0, lsl #10
     758:	20001db8 			; <UNDEFINED> instruction: 0x20001db8
     75c:	00000034 	andeq	r0, r0, r4, lsr r0
     760:	40080e41 	andmi	r0, r8, r1, asr #28
     764:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     768:	180e4101 	stmdane	lr, {r0, r8, lr}
     76c:	00070d41 	andeq	r0, r7, r1, asr #26
     770:	00000018 	andeq	r0, r0, r8, lsl r0
     774:	00000500 	andeq	r0, r0, r0, lsl #10
     778:	20001dec 	andcs	r1, r0, ip, ror #27
     77c:	0000001c 	andeq	r0, r0, ip, lsl r0
     780:	40080e41 	andmi	r0, r8, r1, asr #28
     784:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     788:	070d4101 	streq	r4, [sp, -r1, lsl #2]
     78c:	0000001c 	andeq	r0, r0, ip, lsl r0
     790:	00000500 	andeq	r0, r0, r0, lsl #10
     794:	20001e08 	andcs	r1, r0, r8, lsl #28
     798:	00000034 	andeq	r0, r0, r4, lsr r0
     79c:	40080e41 	andmi	r0, r8, r1, asr #28
     7a0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     7a4:	180e4101 	stmdane	lr, {r0, r8, lr}
     7a8:	00070d41 	andeq	r0, r7, r1, asr #26
     7ac:	0000001c 	andeq	r0, r0, ip, lsl r0
     7b0:	00000500 	andeq	r0, r0, r0, lsl #10
     7b4:	20001e3c 	andcs	r1, r0, ip, lsr lr
     7b8:	00000038 	andeq	r0, r0, r8, lsr r0
     7bc:	40080e41 	andmi	r0, r8, r1, asr #28
     7c0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     7c4:	180e4101 	stmdane	lr, {r0, r8, lr}
     7c8:	00070d41 	andeq	r0, r7, r1, asr #26
     7cc:	0000001c 	andeq	r0, r0, ip, lsl r0
     7d0:	00000500 	andeq	r0, r0, r0, lsl #10
     7d4:	20001e74 	andcs	r1, r0, r4, ror lr
     7d8:	0000003c 	andeq	r0, r0, ip, lsr r0
     7dc:	40080e41 	andmi	r0, r8, r1, asr #28
     7e0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     7e4:	180e4101 	stmdane	lr, {r0, r8, lr}
     7e8:	00070d41 	andeq	r0, r7, r1, asr #26
     7ec:	0000001c 	andeq	r0, r0, ip, lsl r0
     7f0:	00000500 	andeq	r0, r0, r0, lsl #10
     7f4:	20001eb0 			; <UNDEFINED> instruction: 0x20001eb0
     7f8:	00000158 	andeq	r0, r0, r8, asr r1
     7fc:	40080e41 	andmi	r0, r8, r1, asr #28
     800:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     804:	280e4101 	stmdacs	lr, {r0, r8, lr}
     808:	00070d41 	andeq	r0, r7, r1, asr #26
     80c:	0000001c 	andeq	r0, r0, ip, lsl r0
     810:	00000500 	andeq	r0, r0, r0, lsl #10
     814:	20002008 	andcs	r2, r0, r8
     818:	00000060 	andeq	r0, r0, r0, rrx
     81c:	40080e41 	andmi	r0, r8, r1, asr #28
     820:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     824:	180e4101 	stmdane	lr, {r0, r8, lr}
     828:	00070d41 	andeq	r0, r7, r1, asr #26
     82c:	0000001c 	andeq	r0, r0, ip, lsl r0
     830:	00000500 	andeq	r0, r0, r0, lsl #10
     834:	20002068 	andcs	r2, r0, r8, rrx
     838:	00000020 	andeq	r0, r0, r0, lsr #32
     83c:	40080e41 	andmi	r0, r8, r1, asr #28
     840:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     844:	100e4101 	andne	r4, lr, r1, lsl #2
     848:	00070d41 	andeq	r0, r7, r1, asr #26
     84c:	0000001c 	andeq	r0, r0, ip, lsl r0
     850:	00000500 	andeq	r0, r0, r0, lsl #10
     854:	20002088 	andcs	r2, r0, r8, lsl #1
     858:	00000020 	andeq	r0, r0, r0, lsr #32
     85c:	40080e41 	andmi	r0, r8, r1, asr #28
     860:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     864:	100e4101 	andne	r4, lr, r1, lsl #2
     868:	00070d41 	andeq	r0, r7, r1, asr #26
     86c:	0000001c 	andeq	r0, r0, ip, lsl r0
     870:	00000500 	andeq	r0, r0, r0, lsl #10
     874:	200020a8 	andcs	r2, r0, r8, lsr #1
     878:	0000001c 	andeq	r0, r0, ip, lsl r0
     87c:	40080e41 	andmi	r0, r8, r1, asr #28
     880:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     884:	100e4101 	andne	r4, lr, r1, lsl #2
     888:	00070d41 	andeq	r0, r7, r1, asr #26
     88c:	0000001c 	andeq	r0, r0, ip, lsl r0
     890:	00000500 	andeq	r0, r0, r0, lsl #10
     894:	200020c4 	andcs	r2, r0, r4, asr #1
     898:	0000003c 	andeq	r0, r0, ip, lsr r0
     89c:	40080e41 	andmi	r0, r8, r1, asr #28
     8a0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     8a4:	180e4101 	stmdane	lr, {r0, r8, lr}
     8a8:	00070d41 	andeq	r0, r7, r1, asr #26
     8ac:	0000001c 	andeq	r0, r0, ip, lsl r0
     8b0:	00000500 	andeq	r0, r0, r0, lsl #10
     8b4:	20002100 	andcs	r2, r0, r0, lsl #2
     8b8:	0000003c 	andeq	r0, r0, ip, lsr r0
     8bc:	40080e41 	andmi	r0, r8, r1, asr #28
     8c0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     8c4:	180e4101 	stmdane	lr, {r0, r8, lr}
     8c8:	00070d41 	andeq	r0, r7, r1, asr #26
     8cc:	0000001c 	andeq	r0, r0, ip, lsl r0
     8d0:	00000500 	andeq	r0, r0, r0, lsl #10
     8d4:	2000213c 	andcs	r2, r0, ip, lsr r1
     8d8:	0000003c 	andeq	r0, r0, ip, lsr r0
     8dc:	40080e41 	andmi	r0, r8, r1, asr #28
     8e0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     8e4:	180e4101 	stmdane	lr, {r0, r8, lr}
     8e8:	00070d41 	andeq	r0, r7, r1, asr #26
     8ec:	0000001c 	andeq	r0, r0, ip, lsl r0
     8f0:	00000500 	andeq	r0, r0, r0, lsl #10
     8f4:	20002178 	andcs	r2, r0, r8, ror r1
     8f8:	00000040 	andeq	r0, r0, r0, asr #32
     8fc:	40080e41 	andmi	r0, r8, r1, asr #28
     900:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     904:	180e4101 	stmdane	lr, {r0, r8, lr}
     908:	00070d41 	andeq	r0, r7, r1, asr #26
     90c:	0000001c 	andeq	r0, r0, ip, lsl r0
     910:	00000500 	andeq	r0, r0, r0, lsl #10
     914:	200021b8 			; <UNDEFINED> instruction: 0x200021b8
     918:	0000003c 	andeq	r0, r0, ip, lsr r0
     91c:	40080e41 	andmi	r0, r8, r1, asr #28
     920:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     924:	180e4101 	stmdane	lr, {r0, r8, lr}
     928:	00070d41 	andeq	r0, r7, r1, asr #26
     92c:	0000001c 	andeq	r0, r0, ip, lsl r0
     930:	00000500 	andeq	r0, r0, r0, lsl #10
     934:	200021f4 	strdcs	r2, [r0], -r4
     938:	0000001c 	andeq	r0, r0, ip, lsl r0
     93c:	40080e41 	andmi	r0, r8, r1, asr #28
     940:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     944:	100e4101 	andne	r4, lr, r1, lsl #2
     948:	00070d41 	andeq	r0, r7, r1, asr #26
     94c:	0000001c 	andeq	r0, r0, ip, lsl r0
     950:	00000500 	andeq	r0, r0, r0, lsl #10
     954:	20002210 	andcs	r2, r0, r0, lsl r2
     958:	00000040 	andeq	r0, r0, r0, asr #32
     95c:	40080e41 	andmi	r0, r8, r1, asr #28
     960:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     964:	100e4101 	andne	r4, lr, r1, lsl #2
     968:	00070d41 	andeq	r0, r7, r1, asr #26
     96c:	0000001c 	andeq	r0, r0, ip, lsl r0
     970:	00000500 	andeq	r0, r0, r0, lsl #10
     974:	20002250 	andcs	r2, r0, r0, asr r2
     978:	00000040 	andeq	r0, r0, r0, asr #32
     97c:	40080e41 	andmi	r0, r8, r1, asr #28
     980:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     984:	100e4101 	andne	r4, lr, r1, lsl #2
     988:	00070d41 	andeq	r0, r7, r1, asr #26
     98c:	0000001c 	andeq	r0, r0, ip, lsl r0
     990:	00000500 	andeq	r0, r0, r0, lsl #10
     994:	20002290 	mulcs	r0, r0, r2
     998:	00000040 	andeq	r0, r0, r0, asr #32
     99c:	40080e41 	andmi	r0, r8, r1, asr #28
     9a0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     9a4:	100e4101 	andne	r4, lr, r1, lsl #2
     9a8:	00070d41 	andeq	r0, r7, r1, asr #26
     9ac:	0000001c 	andeq	r0, r0, ip, lsl r0
     9b0:	00000500 	andeq	r0, r0, r0, lsl #10
     9b4:	200022d0 	ldrdcs	r2, [r0], -r0
     9b8:	00000040 	andeq	r0, r0, r0, asr #32
     9bc:	40080e41 	andmi	r0, r8, r1, asr #28
     9c0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     9c4:	100e4101 	andne	r4, lr, r1, lsl #2
     9c8:	00070d41 	andeq	r0, r7, r1, asr #26
     9cc:	0000001c 	andeq	r0, r0, ip, lsl r0
     9d0:	00000500 	andeq	r0, r0, r0, lsl #10
     9d4:	20002310 	andcs	r2, r0, r0, lsl r3
     9d8:	00000040 	andeq	r0, r0, r0, asr #32
     9dc:	40080e41 	andmi	r0, r8, r1, asr #28
     9e0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     9e4:	100e4101 	andne	r4, lr, r1, lsl #2
     9e8:	00070d41 	andeq	r0, r7, r1, asr #26
     9ec:	0000001c 	andeq	r0, r0, ip, lsl r0
     9f0:	00000500 	andeq	r0, r0, r0, lsl #10
     9f4:	20002350 	andcs	r2, r0, r0, asr r3
     9f8:	00000040 	andeq	r0, r0, r0, asr #32
     9fc:	40080e41 	andmi	r0, r8, r1, asr #28
     a00:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     a04:	100e4101 	andne	r4, lr, r1, lsl #2
     a08:	00070d41 	andeq	r0, r7, r1, asr #26
     a0c:	0000001c 	andeq	r0, r0, ip, lsl r0
     a10:	00000500 	andeq	r0, r0, r0, lsl #10
     a14:	20002390 	mulcs	r0, r0, r3
     a18:	00000040 	andeq	r0, r0, r0, asr #32
     a1c:	40080e41 	andmi	r0, r8, r1, asr #28
     a20:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     a24:	100e4101 	andne	r4, lr, r1, lsl #2
     a28:	00070d41 	andeq	r0, r7, r1, asr #26
     a2c:	0000001c 	andeq	r0, r0, ip, lsl r0
     a30:	00000500 	andeq	r0, r0, r0, lsl #10
     a34:	200023d0 	ldrdcs	r2, [r0], -r0
     a38:	00000040 	andeq	r0, r0, r0, asr #32
     a3c:	40080e41 	andmi	r0, r8, r1, asr #28
     a40:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     a44:	100e4101 	andne	r4, lr, r1, lsl #2
     a48:	00070d41 	andeq	r0, r7, r1, asr #26
     a4c:	0000001c 	andeq	r0, r0, ip, lsl r0
     a50:	00000500 	andeq	r0, r0, r0, lsl #10
     a54:	20002410 	andcs	r2, r0, r0, lsl r4
     a58:	00000040 	andeq	r0, r0, r0, asr #32
     a5c:	40080e41 	andmi	r0, r8, r1, asr #28
     a60:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     a64:	100e4101 	andne	r4, lr, r1, lsl #2
     a68:	00070d41 	andeq	r0, r7, r1, asr #26
     a6c:	0000001c 	andeq	r0, r0, ip, lsl r0
     a70:	00000500 	andeq	r0, r0, r0, lsl #10
     a74:	20002450 	andcs	r2, r0, r0, asr r4
     a78:	00000040 	andeq	r0, r0, r0, asr #32
     a7c:	40080e41 	andmi	r0, r8, r1, asr #28
     a80:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     a84:	100e4101 	andne	r4, lr, r1, lsl #2
     a88:	00070d41 	andeq	r0, r7, r1, asr #26
     a8c:	0000001c 	andeq	r0, r0, ip, lsl r0
     a90:	00000500 	andeq	r0, r0, r0, lsl #10
     a94:	20002490 	mulcs	r0, r0, r4
     a98:	00000040 	andeq	r0, r0, r0, asr #32
     a9c:	40080e41 	andmi	r0, r8, r1, asr #28
     aa0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     aa4:	100e4101 	andne	r4, lr, r1, lsl #2
     aa8:	00070d41 	andeq	r0, r7, r1, asr #26
     aac:	0000001c 	andeq	r0, r0, ip, lsl r0
     ab0:	00000500 	andeq	r0, r0, r0, lsl #10
     ab4:	200024d0 	ldrdcs	r2, [r0], -r0
     ab8:	00000040 	andeq	r0, r0, r0, asr #32
     abc:	40080e41 	andmi	r0, r8, r1, asr #28
     ac0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     ac4:	100e4101 	andne	r4, lr, r1, lsl #2
     ac8:	00070d41 	andeq	r0, r7, r1, asr #26
     acc:	0000001c 	andeq	r0, r0, ip, lsl r0
     ad0:	00000500 	andeq	r0, r0, r0, lsl #10
     ad4:	20002510 	andcs	r2, r0, r0, lsl r5
     ad8:	00000040 	andeq	r0, r0, r0, asr #32
     adc:	40080e41 	andmi	r0, r8, r1, asr #28
     ae0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     ae4:	100e4101 	andne	r4, lr, r1, lsl #2
     ae8:	00070d41 	andeq	r0, r7, r1, asr #26
     aec:	0000001c 	andeq	r0, r0, ip, lsl r0
     af0:	00000500 	andeq	r0, r0, r0, lsl #10
     af4:	20002550 	andcs	r2, r0, r0, asr r5
     af8:	00000040 	andeq	r0, r0, r0, asr #32
     afc:	40080e41 	andmi	r0, r8, r1, asr #28
     b00:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     b04:	100e4101 	andne	r4, lr, r1, lsl #2
     b08:	00070d41 	andeq	r0, r7, r1, asr #26
     b0c:	0000001c 	andeq	r0, r0, ip, lsl r0
     b10:	00000500 	andeq	r0, r0, r0, lsl #10
     b14:	20002590 	mulcs	r0, r0, r5
     b18:	00000040 	andeq	r0, r0, r0, asr #32
     b1c:	40080e41 	andmi	r0, r8, r1, asr #28
     b20:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     b24:	100e4101 	andne	r4, lr, r1, lsl #2
     b28:	00070d41 	andeq	r0, r7, r1, asr #26
     b2c:	0000001c 	andeq	r0, r0, ip, lsl r0
     b30:	00000500 	andeq	r0, r0, r0, lsl #10
     b34:	200025d0 	ldrdcs	r2, [r0], -r0
     b38:	0000003c 	andeq	r0, r0, ip, lsr r0
     b3c:	40080e41 	andmi	r0, r8, r1, asr #28
     b40:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     b44:	100e4101 	andne	r4, lr, r1, lsl #2
     b48:	00070d41 	andeq	r0, r7, r1, asr #26
     b4c:	0000001c 	andeq	r0, r0, ip, lsl r0
     b50:	00000500 	andeq	r0, r0, r0, lsl #10
     b54:	2000260c 	andcs	r2, r0, ip, lsl #12
     b58:	00000050 	andeq	r0, r0, r0, asr r0
     b5c:	40080e41 	andmi	r0, r8, r1, asr #28
     b60:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     b64:	100e4101 	andne	r4, lr, r1, lsl #2
     b68:	00070d41 	andeq	r0, r7, r1, asr #26
     b6c:	0000001c 	andeq	r0, r0, ip, lsl r0
     b70:	00000500 	andeq	r0, r0, r0, lsl #10
     b74:	2000265c 	andcs	r2, r0, ip, asr r6
     b78:	00000084 	andeq	r0, r0, r4, lsl #1
     b7c:	40080e41 	andmi	r0, r8, r1, asr #28
     b80:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     b84:	200e4101 	andcs	r4, lr, r1, lsl #2
     b88:	00070d41 	andeq	r0, r7, r1, asr #26
     b8c:	00000018 	andeq	r0, r0, r8, lsl r0
     b90:	00000500 	andeq	r0, r0, r0, lsl #10
     b94:	200026e0 	andcs	r2, r0, r0, ror #13
     b98:	0000001c 	andeq	r0, r0, ip, lsl r0
     b9c:	40080e41 	andmi	r0, r8, r1, asr #28
     ba0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     ba4:	070d4101 	streq	r4, [sp, -r1, lsl #2]
     ba8:	0000001c 	andeq	r0, r0, ip, lsl r0
     bac:	00000500 	andeq	r0, r0, r0, lsl #10
     bb0:	200026fc 	strdcs	r2, [r0], -ip
     bb4:	00000044 	andeq	r0, r0, r4, asr #32
     bb8:	40080e41 	andmi	r0, r8, r1, asr #28
     bbc:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     bc0:	180e4101 	stmdane	lr, {r0, r8, lr}
     bc4:	00070d41 	andeq	r0, r7, r1, asr #26
     bc8:	0000001c 	andeq	r0, r0, ip, lsl r0
     bcc:	00000500 	andeq	r0, r0, r0, lsl #10
     bd0:	20002740 	andcs	r2, r0, r0, asr #14
     bd4:	00000020 	andeq	r0, r0, r0, lsr #32
     bd8:	40080e41 	andmi	r0, r8, r1, asr #28
     bdc:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     be0:	100e4101 	andne	r4, lr, r1, lsl #2
     be4:	00070d41 	andeq	r0, r7, r1, asr #26
     be8:	0000001c 	andeq	r0, r0, ip, lsl r0
     bec:	00000500 	andeq	r0, r0, r0, lsl #10
     bf0:	20002760 	andcs	r2, r0, r0, ror #14
     bf4:	000001c8 	andeq	r0, r0, r8, asr #3
     bf8:	40080e41 	andmi	r0, r8, r1, asr #28
     bfc:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     c00:	100e4101 	andne	r4, lr, r1, lsl #2
     c04:	00070d41 	andeq	r0, r7, r1, asr #26
     c08:	0000000c 	andeq	r0, r0, ip
     c0c:	00000500 	andeq	r0, r0, r0, lsl #10
     c10:	20000000 	andcs	r0, r0, r0
     c14:	0000000c 	andeq	r0, r0, ip
     c18:	00000018 	andeq	r0, r0, r8, lsl r0
     c1c:	00000500 	andeq	r0, r0, r0, lsl #10
     c20:	20002928 	andcs	r2, r0, r8, lsr #18
     c24:	00000018 	andeq	r0, r0, r8, lsl r0
     c28:	40080e41 	andmi	r0, r8, r1, asr #28
     c2c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     c30:	070d4101 	streq	r4, [sp, -r1, lsl #2]
     c34:	0000001c 	andeq	r0, r0, ip, lsl r0
     c38:	00000500 	andeq	r0, r0, r0, lsl #10
     c3c:	20002940 	andcs	r2, r0, r0, asr #18
     c40:	00000038 	andeq	r0, r0, r8, lsr r0
     c44:	40080e41 	andmi	r0, r8, r1, asr #28
     c48:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     c4c:	100e4101 	andne	r4, lr, r1, lsl #2
     c50:	00070d41 	andeq	r0, r7, r1, asr #26
     c54:	0000001c 	andeq	r0, r0, ip, lsl r0
     c58:	00000500 	andeq	r0, r0, r0, lsl #10
     c5c:	20002978 	andcs	r2, r0, r8, ror r9
     c60:	0000002c 	andeq	r0, r0, ip, lsr #32
     c64:	40080e41 	andmi	r0, r8, r1, asr #28
     c68:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     c6c:	180e4101 	stmdane	lr, {r0, r8, lr}
     c70:	00070d41 	andeq	r0, r7, r1, asr #26
     c74:	00000018 	andeq	r0, r0, r8, lsl r0
     c78:	00000500 	andeq	r0, r0, r0, lsl #10
     c7c:	200029a4 	andcs	r2, r0, r4, lsr #19
     c80:	00000018 	andeq	r0, r0, r8, lsl r0
     c84:	40080e41 	andmi	r0, r8, r1, asr #28
     c88:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     c8c:	070d4101 	streq	r4, [sp, -r1, lsl #2]
     c90:	00000028 	andeq	r0, r0, r8, lsr #32
     c94:	00000500 	andeq	r0, r0, r0, lsl #10
     c98:	200029bc 			; <UNDEFINED> instruction: 0x200029bc
     c9c:	000004a0 	andeq	r0, r0, r0, lsr #9
     ca0:	40140e41 	andsmi	r0, r4, r1, asr #28
     ca4:	85400584 	strbhi	r0, [r0, #-1412]	; 0xfffffa7c
     ca8:	03864004 	orreq	r4, r6, #4
     cac:	40028740 	andmi	r8, r2, r0, asr #14
     cb0:	0e41018e 	dvfeqd	f0, f1, #0.5
     cb4:	070c4178 	smlsdxeq	ip, r8, r1, r4
     cb8:	00000068 	andeq	r0, r0, r8, rrx
     cbc:	0000001c 	andeq	r0, r0, ip, lsl r0
     cc0:	00000500 	andeq	r0, r0, r0, lsl #10
     cc4:	20002e5c 	andcs	r2, r0, ip, asr lr
     cc8:	00000028 	andeq	r0, r0, r8, lsr #32
     ccc:	40080e41 	andmi	r0, r8, r1, asr #28
     cd0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     cd4:	100e4101 	andne	r4, lr, r1, lsl #2
     cd8:	00070d41 	andeq	r0, r7, r1, asr #26
     cdc:	00000028 	andeq	r0, r0, r8, lsr #32
     ce0:	00000500 	andeq	r0, r0, r0, lsl #10
     ce4:	20002e84 	andcs	r2, r0, r4, lsl #29
     ce8:	00000154 	andeq	r0, r0, r4, asr r1
     cec:	40140e41 	andsmi	r0, r4, r1, asr #28
     cf0:	85400584 	strbhi	r0, [r0, #-1412]	; 0xfffffa7c
     cf4:	03864004 	orreq	r4, r6, #4
     cf8:	40028740 	andmi	r8, r2, r0, asr #14
     cfc:	0e41018e 	dvfeqd	f0, f1, #0.5
     d00:	070c4150 	smlsdeq	ip, r0, r1, r4
     d04:	00000048 	andeq	r0, r0, r8, asr #32
     d08:	00000024 	andeq	r0, r0, r4, lsr #32
     d0c:	00000500 	andeq	r0, r0, r0, lsl #10
     d10:	20002fd8 	ldrdcs	r2, [r0], -r8
     d14:	00000062 	andeq	r0, r0, r2, rrx
     d18:	41100e41 	tstmi	r0, r1, asr #28
     d1c:	84401c0e 	strbhi	r1, [r0], #-3086	; 0xfffff3f2
     d20:	06874007 	streq	r4, [r7], r7
     d24:	41058e40 	tstmi	r5, r0, asr #28
     d28:	0d41380e 	stcleq	8, cr3, [r1, #-56]	; 0xffffffc8
     d2c:	00000007 	andeq	r0, r0, r7
     d30:	0000000c 	andeq	r0, r0, ip
     d34:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     d38:	7c020001 	stcvc	0, cr0, [r2], {1}
     d3c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     d40:	00000018 	andeq	r0, r0, r8, lsl r0
     d44:	00000d30 	andeq	r0, r0, r0, lsr sp
     d48:	2000303c 	andcs	r3, r0, ip, lsr r0
     d4c:	0000001a 	andeq	r0, r0, sl, lsl r0
     d50:	40080e41 	andmi	r0, r8, r1, asr #28
     d54:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     d58:	070d4101 	streq	r4, [sp, -r1, lsl #2]
     d5c:	0000001c 	andeq	r0, r0, ip, lsl r0
     d60:	00000d30 	andeq	r0, r0, r0, lsr sp
     d64:	20003056 	andcs	r3, r0, r6, asr r0
     d68:	0000003a 	andeq	r0, r0, sl, lsr r0
     d6c:	40080e41 	andmi	r0, r8, r1, asr #28
     d70:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     d74:	100e4101 	andne	r4, lr, r1, lsl #2
     d78:	00070d41 	andeq	r0, r7, r1, asr #26
     d7c:	00000018 	andeq	r0, r0, r8, lsl r0
     d80:	00000d30 	andeq	r0, r0, r0, lsr sp
     d84:	20003090 	mulcs	r0, r0, r0
     d88:	00000014 	andeq	r0, r0, r4, lsl r0
     d8c:	40080e41 	andmi	r0, r8, r1, asr #28
     d90:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     d94:	070d4101 	streq	r4, [sp, -r1, lsl #2]
     d98:	0000001c 	andeq	r0, r0, ip, lsl r0
     d9c:	00000d30 	andeq	r0, r0, r0, lsr sp
     da0:	200030a4 	andcs	r3, r0, r4, lsr #1
     da4:	0000003c 	andeq	r0, r0, ip, lsr r0
     da8:	40080e41 	andmi	r0, r8, r1, asr #28
     dac:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     db0:	100e4101 	andne	r4, lr, r1, lsl #2
     db4:	00070d41 	andeq	r0, r7, r1, asr #26
     db8:	0000001c 	andeq	r0, r0, ip, lsl r0
     dbc:	00000d30 	andeq	r0, r0, r0, lsr sp
     dc0:	200030e0 	andcs	r3, r0, r0, ror #1
     dc4:	00000044 	andeq	r0, r0, r4, asr #32
     dc8:	40080e41 	andmi	r0, r8, r1, asr #28
     dcc:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     dd0:	180e4101 	stmdane	lr, {r0, r8, lr}
     dd4:	00070d41 	andeq	r0, r7, r1, asr #26
     dd8:	0000001c 	andeq	r0, r0, ip, lsl r0
     ddc:	00000d30 	andeq	r0, r0, r0, lsr sp
     de0:	20003124 	andcs	r3, r0, r4, lsr #2
     de4:	00000024 	andeq	r0, r0, r4, lsr #32
     de8:	40080e41 	andmi	r0, r8, r1, asr #28
     dec:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     df0:	100e4101 	andne	r4, lr, r1, lsl #2
     df4:	00070d41 	andeq	r0, r7, r1, asr #26
     df8:	0000001c 	andeq	r0, r0, ip, lsl r0
     dfc:	00000d30 	andeq	r0, r0, r0, lsr sp
     e00:	20003148 	andcs	r3, r0, r8, asr #2
     e04:	00000044 	andeq	r0, r0, r4, asr #32
     e08:	40080e41 	andmi	r0, r8, r1, asr #28
     e0c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     e10:	180e4101 	stmdane	lr, {r0, r8, lr}
     e14:	00070d41 	andeq	r0, r7, r1, asr #26
     e18:	0000001c 	andeq	r0, r0, ip, lsl r0
     e1c:	00000d30 	andeq	r0, r0, r0, lsr sp
     e20:	2000318c 	andcs	r3, r0, ip, lsl #3
     e24:	00000024 	andeq	r0, r0, r4, lsr #32
     e28:	40080e41 	andmi	r0, r8, r1, asr #28
     e2c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     e30:	100e4101 	andne	r4, lr, r1, lsl #2
     e34:	00070d41 	andeq	r0, r7, r1, asr #26
     e38:	0000000c 	andeq	r0, r0, ip
     e3c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     e40:	7c020001 	stcvc	0, cr0, [r2], {1}
     e44:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     e48:	00000020 	andeq	r0, r0, r0, lsr #32
     e4c:	00000e38 	andeq	r0, r0, r8, lsr lr
     e50:	200031b0 			; <UNDEFINED> instruction: 0x200031b0
     e54:	000000c6 	andeq	r0, r0, r6, asr #1
     e58:	400c0e41 	andmi	r0, ip, r1, asr #28
     e5c:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
     e60:	018e4002 	orreq	r4, lr, r2
     e64:	41200e41 			; <UNDEFINED> instruction: 0x41200e41
     e68:	0000070d 	andeq	r0, r0, sp, lsl #14
     e6c:	0000001c 	andeq	r0, r0, ip, lsl r0
     e70:	00000e38 	andeq	r0, r0, r8, lsr lr
     e74:	20003276 	andcs	r3, r0, r6, ror r2
     e78:	0000008a 	andeq	r0, r0, sl, lsl #1
     e7c:	40080e41 	andmi	r0, r8, r1, asr #28
     e80:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     e84:	200e4101 	andcs	r4, lr, r1, lsl #2
     e88:	00070d41 	andeq	r0, r7, r1, asr #26
     e8c:	0000001c 	andeq	r0, r0, ip, lsl r0
     e90:	00000e38 	andeq	r0, r0, r8, lsr lr
     e94:	20003300 	andcs	r3, r0, r0, lsl #6
     e98:	00000062 	andeq	r0, r0, r2, rrx
     e9c:	40080e41 	andmi	r0, r8, r1, asr #28
     ea0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     ea4:	180e4101 	stmdane	lr, {r0, r8, lr}
     ea8:	00070d41 	andeq	r0, r7, r1, asr #26
     eac:	0000001c 	andeq	r0, r0, ip, lsl r0
     eb0:	00000e38 	andeq	r0, r0, r8, lsr lr
     eb4:	20003362 	andcs	r3, r0, r2, ror #6
     eb8:	00000028 	andeq	r0, r0, r8, lsr #32
     ebc:	40080e41 	andmi	r0, r8, r1, asr #28
     ec0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     ec4:	180e4101 	stmdane	lr, {r0, r8, lr}
     ec8:	00070d41 	andeq	r0, r7, r1, asr #26
     ecc:	0000000c 	andeq	r0, r0, ip
     ed0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     ed4:	7c020001 	stcvc	0, cr0, [r2], {1}
     ed8:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     edc:	0000001c 	andeq	r0, r0, ip, lsl r0
     ee0:	00000ecc 	andeq	r0, r0, ip, asr #29
     ee4:	2000338a 	andcs	r3, r0, sl, lsl #7
     ee8:	00000028 	andeq	r0, r0, r8, lsr #32
     eec:	40080e41 	andmi	r0, r8, r1, asr #28
     ef0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     ef4:	100e4101 	andne	r4, lr, r1, lsl #2
     ef8:	00070d41 	andeq	r0, r7, r1, asr #26
     efc:	0000001c 	andeq	r0, r0, ip, lsl r0
     f00:	00000ecc 	andeq	r0, r0, ip, asr #29
     f04:	200033b2 			; <UNDEFINED> instruction: 0x200033b2
     f08:	00000062 	andeq	r0, r0, r2, rrx
     f0c:	40080e41 	andmi	r0, r8, r1, asr #28
     f10:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     f14:	100e4101 	andne	r4, lr, r1, lsl #2
     f18:	00070d41 	andeq	r0, r7, r1, asr #26
     f1c:	0000001c 	andeq	r0, r0, ip, lsl r0
     f20:	00000ecc 	andeq	r0, r0, ip, asr #29
     f24:	20003414 	andcs	r3, r0, r4, lsl r4
     f28:	00000040 	andeq	r0, r0, r0, asr #32
     f2c:	40080e41 	andmi	r0, r8, r1, asr #28
     f30:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     f34:	180e4101 	stmdane	lr, {r0, r8, lr}
     f38:	00070d41 	andeq	r0, r7, r1, asr #26
     f3c:	0000001c 	andeq	r0, r0, ip, lsl r0
     f40:	00000ecc 	andeq	r0, r0, ip, asr #29
     f44:	20003454 	andcs	r3, r0, r4, asr r4
     f48:	0000005e 	andeq	r0, r0, lr, asr r0
     f4c:	40080e41 	andmi	r0, r8, r1, asr #28
     f50:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     f54:	100e4101 	andne	r4, lr, r1, lsl #2
     f58:	00070d41 	andeq	r0, r7, r1, asr #26
     f5c:	0000000c 	andeq	r0, r0, ip
     f60:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     f64:	7c020001 	stcvc	0, cr0, [r2], {1}
     f68:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     f6c:	0000001c 	andeq	r0, r0, ip, lsl r0
     f70:	00000f5c 	andeq	r0, r0, ip, asr pc
     f74:	200034b4 			; <UNDEFINED> instruction: 0x200034b4
     f78:	00000024 	andeq	r0, r0, r4, lsr #32
     f7c:	40080e41 	andmi	r0, r8, r1, asr #28
     f80:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     f84:	100e4101 	andne	r4, lr, r1, lsl #2
     f88:	00070d41 	andeq	r0, r7, r1, asr #26
     f8c:	00000024 	andeq	r0, r0, r4, lsr #32
     f90:	00000f5c 	andeq	r0, r0, ip, asr pc
     f94:	200034d8 	ldrdcs	r3, [r0], -r8
     f98:	000000f8 	strdeq	r0, [r0], -r8
     f9c:	40100e41 	andsmi	r0, r0, r1, asr #28
     fa0:	85400484 	strbhi	r0, [r0, #-1156]	; 0xfffffb7c
     fa4:	02874003 	addeq	r4, r7, #3
     fa8:	41018e40 	tstmi	r1, r0, asr #28
     fac:	0d41200e 	stcleq	0, cr2, [r1, #-56]	; 0xffffffc8
     fb0:	00000007 	andeq	r0, r0, r7
     fb4:	0000001c 	andeq	r0, r0, ip, lsl r0
     fb8:	00000f5c 	andeq	r0, r0, ip, asr pc
     fbc:	200035d0 	ldrdcs	r3, [r0], -r0
     fc0:	0000002c 	andeq	r0, r0, ip, lsr #32
     fc4:	40080e41 	andmi	r0, r8, r1, asr #28
     fc8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     fcc:	100e4101 	andne	r4, lr, r1, lsl #2
     fd0:	00070d41 	andeq	r0, r7, r1, asr #26
     fd4:	0000001c 	andeq	r0, r0, ip, lsl r0
     fd8:	00000f5c 	andeq	r0, r0, ip, asr pc
     fdc:	200035fc 	strdcs	r3, [r0], -ip
     fe0:	00000048 	andeq	r0, r0, r8, asr #32
     fe4:	40080e41 	andmi	r0, r8, r1, asr #28
     fe8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     fec:	100e4101 	andne	r4, lr, r1, lsl #2
     ff0:	00070d41 	andeq	r0, r7, r1, asr #26
     ff4:	0000001c 	andeq	r0, r0, ip, lsl r0
     ff8:	00000f5c 	andeq	r0, r0, ip, asr pc
     ffc:	20003644 	andcs	r3, r0, r4, asr #12
    1000:	00000034 	andeq	r0, r0, r4, lsr r0
    1004:	40080e41 	andmi	r0, r8, r1, asr #28
    1008:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
    100c:	100e4101 	andne	r4, lr, r1, lsl #2
    1010:	00070d41 	andeq	r0, r7, r1, asr #26
    1014:	0000000c 	andeq	r0, r0, ip
    1018:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    101c:	7c020001 	stcvc	0, cr0, [r2], {1}
    1020:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    1024:	0000001c 	andeq	r0, r0, ip, lsl r0
    1028:	00001014 	andeq	r1, r0, r4, lsl r0
    102c:	20003678 	andcs	r3, r0, r8, ror r6
    1030:	00000170 	andeq	r0, r0, r0, ror r1
    1034:	40080e41 	andmi	r0, r8, r1, asr #28
    1038:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
    103c:	100e4101 	andne	r4, lr, r1, lsl #2
    1040:	00070d41 	andeq	r0, r7, r1, asr #26
    1044:	0000001c 	andeq	r0, r0, ip, lsl r0
    1048:	00001014 	andeq	r1, r0, r4, lsl r0
    104c:	200037e8 	andcs	r3, r0, r8, ror #15
    1050:	00000118 	andeq	r0, r0, r8, lsl r1
    1054:	40080e41 	andmi	r0, r8, r1, asr #28
    1058:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
    105c:	200e4101 	andcs	r4, lr, r1, lsl #2
    1060:	00070d41 	andeq	r0, r7, r1, asr #26
    1064:	0000001c 	andeq	r0, r0, ip, lsl r0
    1068:	00001014 	andeq	r1, r0, r4, lsl r0
    106c:	20003900 	andcs	r3, r0, r0, lsl #18
    1070:	00000034 	andeq	r0, r0, r4, lsr r0
    1074:	40080e41 	andmi	r0, r8, r1, asr #28
    1078:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
    107c:	100e4101 	andne	r4, lr, r1, lsl #2
    1080:	00070d41 	andeq	r0, r7, r1, asr #26
    1084:	0000001c 	andeq	r0, r0, ip, lsl r0
    1088:	00001014 	andeq	r1, r0, r4, lsl r0
    108c:	20003934 	andcs	r3, r0, r4, lsr r9
    1090:	00000046 	andeq	r0, r0, r6, asr #32
    1094:	40080e41 	andmi	r0, r8, r1, asr #28
    1098:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
    109c:	180e4101 	stmdane	lr, {r0, r8, lr}
    10a0:	00070d41 	andeq	r0, r7, r1, asr #26
    10a4:	0000001c 	andeq	r0, r0, ip, lsl r0
    10a8:	00001014 	andeq	r1, r0, r4, lsl r0
    10ac:	2000397a 	andcs	r3, r0, sl, ror r9
    10b0:	00000042 	andeq	r0, r0, r2, asr #32
    10b4:	40080e41 	andmi	r0, r8, r1, asr #28
    10b8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
    10bc:	180e4101 	stmdane	lr, {r0, r8, lr}
    10c0:	00070d41 	andeq	r0, r7, r1, asr #26
    10c4:	0000001c 	andeq	r0, r0, ip, lsl r0
    10c8:	00001014 	andeq	r1, r0, r4, lsl r0
    10cc:	200039bc 			; <UNDEFINED> instruction: 0x200039bc
    10d0:	00000016 	andeq	r0, r0, r6, lsl r0
    10d4:	40080e41 	andmi	r0, r8, r1, asr #28
    10d8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
    10dc:	100e4101 	andne	r4, lr, r1, lsl #2
    10e0:	00070d41 	andeq	r0, r7, r1, asr #26
    10e4:	0000001c 	andeq	r0, r0, ip, lsl r0
    10e8:	00001014 	andeq	r1, r0, r4, lsl r0
    10ec:	200039d2 	ldrdcs	r3, [r0], -r2
    10f0:	00000042 	andeq	r0, r0, r2, asr #32
    10f4:	40080e41 	andmi	r0, r8, r1, asr #28
    10f8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
    10fc:	180e4101 	stmdane	lr, {r0, r8, lr}
    1100:	00070d41 	andeq	r0, r7, r1, asr #26
    1104:	0000001c 	andeq	r0, r0, ip, lsl r0
    1108:	00001014 	andeq	r1, r0, r4, lsl r0
    110c:	20003a14 	andcs	r3, r0, r4, lsl sl
    1110:	00000016 	andeq	r0, r0, r6, lsl r0
    1114:	40080e41 	andmi	r0, r8, r1, asr #28
    1118:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
    111c:	100e4101 	andne	r4, lr, r1, lsl #2
    1120:	00070d41 	andeq	r0, r7, r1, asr #26
    1124:	0000001c 	andeq	r0, r0, ip, lsl r0
    1128:	00001014 	andeq	r1, r0, r4, lsl r0
    112c:	20003a2a 	andcs	r3, r0, sl, lsr #20
    1130:	0000001e 	andeq	r0, r0, lr, lsl r0
    1134:	40080e41 	andmi	r0, r8, r1, asr #28
    1138:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
    113c:	100e4101 	andne	r4, lr, r1, lsl #2
    1140:	00070d41 	andeq	r0, r7, r1, asr #26
    1144:	0000001c 	andeq	r0, r0, ip, lsl r0
    1148:	00001014 	andeq	r1, r0, r4, lsl r0
    114c:	20003a48 	andcs	r3, r0, r8, asr #20
    1150:	0000001e 	andeq	r0, r0, lr, lsl r0
    1154:	40080e41 	andmi	r0, r8, r1, asr #28
    1158:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
    115c:	100e4101 	andne	r4, lr, r1, lsl #2
    1160:	00070d41 	andeq	r0, r7, r1, asr #26
    1164:	0000001c 	andeq	r0, r0, ip, lsl r0
    1168:	00001014 	andeq	r1, r0, r4, lsl r0
    116c:	20003a66 	andcs	r3, r0, r6, ror #20
    1170:	0000003a 	andeq	r0, r0, sl, lsr r0
    1174:	40080e41 	andmi	r0, r8, r1, asr #28
    1178:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
    117c:	100e4101 	andne	r4, lr, r1, lsl #2
    1180:	00070d41 	andeq	r0, r7, r1, asr #26
    1184:	0000001c 	andeq	r0, r0, ip, lsl r0
    1188:	00001014 	andeq	r1, r0, r4, lsl r0
    118c:	20003aa0 	andcs	r3, r0, r0, lsr #21
    1190:	0000001e 	andeq	r0, r0, lr, lsl r0
    1194:	40080e41 	andmi	r0, r8, r1, asr #28
    1198:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
    119c:	100e4101 	andne	r4, lr, r1, lsl #2
    11a0:	00070d41 	andeq	r0, r7, r1, asr #26
    11a4:	0000001c 	andeq	r0, r0, ip, lsl r0
    11a8:	00001014 	andeq	r1, r0, r4, lsl r0
    11ac:	20003abe 			; <UNDEFINED> instruction: 0x20003abe
    11b0:	00000024 	andeq	r0, r0, r4, lsr #32
    11b4:	40080e41 	andmi	r0, r8, r1, asr #28
    11b8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
    11bc:	100e4101 	andne	r4, lr, r1, lsl #2
    11c0:	00070d41 	andeq	r0, r7, r1, asr #26
    11c4:	0000001c 	andeq	r0, r0, ip, lsl r0
    11c8:	00001014 	andeq	r1, r0, r4, lsl r0
    11cc:	20003ae2 	andcs	r3, r0, r2, ror #21
    11d0:	000000a4 	andeq	r0, r0, r4, lsr #1
    11d4:	40080e41 	andmi	r0, r8, r1, asr #28
    11d8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
    11dc:	180e4101 	stmdane	lr, {r0, r8, lr}
    11e0:	00070d41 	andeq	r0, r7, r1, asr #26
    11e4:	0000000c 	andeq	r0, r0, ip
    11e8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    11ec:	7c010001 	stcvc	0, cr0, [r1], {1}
    11f0:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    11f4:	0000000c 	andeq	r0, r0, ip
    11f8:	000011e4 	andeq	r1, r0, r4, ror #3
    11fc:	20003b89 	andcs	r3, r0, r9, lsl #23
    1200:	0000010a 	andeq	r0, r0, sl, lsl #2
    1204:	0000000c 	andeq	r0, r0, ip
    1208:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    120c:	7c020001 	stcvc	0, cr0, [r2], {1}
    1210:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    1214:	0000000c 	andeq	r0, r0, ip
    1218:	00001204 	andeq	r1, r0, r4, lsl #4
    121c:	20003ca0 	andcs	r3, r0, r0, lsr #25
    1220:	00000010 	andeq	r0, r0, r0, lsl r0

Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
   0:	200019c8 	andcs	r1, r0, r8, asr #19
   4:	2000303a 	andcs	r3, r0, sl, lsr r0
   8:	20000000 	andcs	r0, r0, r0
   c:	2000000c 	andcs	r0, r0, ip
	...
