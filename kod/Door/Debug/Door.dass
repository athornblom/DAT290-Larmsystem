
./Debug/Door.elf:     file format elf32-littlearm


Disassembly of section .text:

20000000 <startup>:

void startup(void) __attribute__((naked)) __attribute__((section(".start_section")));

void startup(void)
{
	__asm volatile(
20000000:	4802      	ldr	r0, [pc, #8]	; (2000000c <_exit+0x4>)
20000002:	4685      	mov	sp, r0
20000004:	f000 ff26 	bl	20000e54 <main>

20000008 <_exit>:
20000008:	e7fe      	b.n	20000008 <_exit>
		" LDR R0,=0x2001C000\n" /* set stack */
		" MOV SP,R0\n"
		" BL main\n"   /* call main */
		"_exit: B .\n" /* never return */
	);
}
2000000a:	46c0      	nop			; (mov r8, r8)
2000000c:	2001c000 	andcs	ip, r1, r0

20000010 <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
20000010:	b580      	push	{r7, lr}
20000012:	b082      	sub	sp, #8
20000014:	af00      	add	r7, sp, #0
20000016:	0002      	movs	r2, r0
20000018:	6039      	str	r1, [r7, #0]
2000001a:	1dfb      	adds	r3, r7, #7
2000001c:	701a      	strb	r2, [r3, #0]
  if((int32_t)IRQn < 0) {
2000001e:	1dfb      	adds	r3, r7, #7
20000020:	781b      	ldrb	r3, [r3, #0]
20000022:	2b7f      	cmp	r3, #127	; 0x7f
20000024:	d90d      	bls.n	20000042 <NVIC_SetPriority+0x32>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
20000026:	683b      	ldr	r3, [r7, #0]
20000028:	b2da      	uxtb	r2, r3
2000002a:	490f      	ldr	r1, [pc, #60]	; (20000068 <NVIC_SetPriority+0x58>)
2000002c:	1dfb      	adds	r3, r7, #7
2000002e:	781b      	ldrb	r3, [r3, #0]
20000030:	0018      	movs	r0, r3
20000032:	230f      	movs	r3, #15
20000034:	4003      	ands	r3, r0
20000036:	3b04      	subs	r3, #4
20000038:	0112      	lsls	r2, r2, #4
2000003a:	b2d2      	uxtb	r2, r2
2000003c:	18cb      	adds	r3, r1, r3
2000003e:	761a      	strb	r2, [r3, #24]
  }
  else {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
20000040:	e00d      	b.n	2000005e <NVIC_SetPriority+0x4e>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
20000042:	683b      	ldr	r3, [r7, #0]
20000044:	b2db      	uxtb	r3, r3
20000046:	4909      	ldr	r1, [pc, #36]	; (2000006c <NVIC_SetPriority+0x5c>)
20000048:	1dfa      	adds	r2, r7, #7
2000004a:	7812      	ldrb	r2, [r2, #0]
2000004c:	b252      	sxtb	r2, r2
2000004e:	011b      	lsls	r3, r3, #4
20000050:	b2d8      	uxtb	r0, r3
20000052:	23c0      	movs	r3, #192	; 0xc0
20000054:	009b      	lsls	r3, r3, #2
20000056:	188a      	adds	r2, r1, r2
20000058:	18d3      	adds	r3, r2, r3
2000005a:	1c02      	adds	r2, r0, #0
2000005c:	701a      	strb	r2, [r3, #0]
}
2000005e:	46c0      	nop			; (mov r8, r8)
20000060:	46bd      	mov	sp, r7
20000062:	b002      	add	sp, #8
20000064:	bd80      	pop	{r7, pc}
20000066:	46c0      	nop			; (mov r8, r8)
20000068:	e000ed00 	and	lr, r0, r0, lsl #26
2000006c:	e000e100 	and	lr, r0, r0, lsl #2

20000070 <SysTick_Config>:
    function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
20000070:	b580      	push	{r7, lr}
20000072:	b082      	sub	sp, #8
20000074:	af00      	add	r7, sp, #0
20000076:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk) { return (1UL); }    /* Reload value impossible */
20000078:	687b      	ldr	r3, [r7, #4]
2000007a:	3b01      	subs	r3, #1
2000007c:	4a0c      	ldr	r2, [pc, #48]	; (200000b0 <SysTick_Config+0x40>)
2000007e:	4293      	cmp	r3, r2
20000080:	d901      	bls.n	20000086 <SysTick_Config+0x16>
20000082:	2301      	movs	r3, #1
20000084:	e010      	b.n	200000a8 <SysTick_Config+0x38>

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
20000086:	4b0b      	ldr	r3, [pc, #44]	; (200000b4 <SysTick_Config+0x44>)
20000088:	687a      	ldr	r2, [r7, #4]
2000008a:	3a01      	subs	r2, #1
2000008c:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
2000008e:	2301      	movs	r3, #1
20000090:	425b      	negs	r3, r3
20000092:	210f      	movs	r1, #15
20000094:	0018      	movs	r0, r3
20000096:	f7ff ffbb 	bl	20000010 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
2000009a:	4b06      	ldr	r3, [pc, #24]	; (200000b4 <SysTick_Config+0x44>)
2000009c:	2200      	movs	r2, #0
2000009e:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
200000a0:	4b04      	ldr	r3, [pc, #16]	; (200000b4 <SysTick_Config+0x44>)
200000a2:	2207      	movs	r2, #7
200000a4:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
200000a6:	2300      	movs	r3, #0
}
200000a8:	0018      	movs	r0, r3
200000aa:	46bd      	mov	sp, r7
200000ac:	b002      	add	sp, #8
200000ae:	bd80      	pop	{r7, pc}
200000b0:	00ffffff 	ldrshteq	pc, [pc], #255	; <UNPREDICTABLE>
200000b4:	e000e010 	and	lr, r0, r0, lsl r0

200000b8 <RCC_DeInit>:
  *            - LSI, LSE and RTC clocks 
  * @param  None
  * @retval None
  */
void RCC_DeInit(void)
{
200000b8:	b580      	push	{r7, lr}
200000ba:	af00      	add	r7, sp, #0
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
200000bc:	4b14      	ldr	r3, [pc, #80]	; (20000110 <RCC_DeInit+0x58>)
200000be:	681a      	ldr	r2, [r3, #0]
200000c0:	4b13      	ldr	r3, [pc, #76]	; (20000110 <RCC_DeInit+0x58>)
200000c2:	2101      	movs	r1, #1
200000c4:	430a      	orrs	r2, r1
200000c6:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
200000c8:	4b11      	ldr	r3, [pc, #68]	; (20000110 <RCC_DeInit+0x58>)
200000ca:	2200      	movs	r2, #0
200000cc:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON, PLLON, PLLI2S and PLLSAI(STM32F42xxx/43xxx/446xx/469xx/479xx devices) bits */
  RCC->CR &= (uint32_t)0xEAF6FFFF;
200000ce:	4b10      	ldr	r3, [pc, #64]	; (20000110 <RCC_DeInit+0x58>)
200000d0:	681a      	ldr	r2, [r3, #0]
200000d2:	4b0f      	ldr	r3, [pc, #60]	; (20000110 <RCC_DeInit+0x58>)
200000d4:	490f      	ldr	r1, [pc, #60]	; (20000114 <RCC_DeInit+0x5c>)
200000d6:	400a      	ands	r2, r1
200000d8:	601a      	str	r2, [r3, #0]
  
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
200000da:	4b0d      	ldr	r3, [pc, #52]	; (20000110 <RCC_DeInit+0x58>)
200000dc:	4a0e      	ldr	r2, [pc, #56]	; (20000118 <RCC_DeInit+0x60>)
200000de:	605a      	str	r2, [r3, #4]

#if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F401xx) || defined(STM32F411xE) || defined(STM32F446xx) || defined(STM32F413_423xx) || defined(STM32F469_479xx)  
  /* Reset PLLI2SCFGR register */
  RCC->PLLI2SCFGR = 0x20003000;
200000e0:	4a0b      	ldr	r2, [pc, #44]	; (20000110 <RCC_DeInit+0x58>)
200000e2:	2384      	movs	r3, #132	; 0x84
200000e4:	490d      	ldr	r1, [pc, #52]	; (2000011c <RCC_DeInit+0x64>)
200000e6:	50d1      	str	r1, [r2, r3]
#endif /* STM32F40_41xxx || STM32F427_437xx || STM32F429_439xx || STM32F401xx || STM32F411xE || STM32F446xx || STM32F413_423xx || STM32F469_479xx */

#if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F446xx) || defined(STM32F469_479xx) 
  /* Reset PLLSAICFGR register, only available for STM32F42xxx/43xxx/446xx/469xx/479xx devices */
  RCC->PLLSAICFGR = 0x24003000;
200000e8:	4a09      	ldr	r2, [pc, #36]	; (20000110 <RCC_DeInit+0x58>)
200000ea:	2388      	movs	r3, #136	; 0x88
200000ec:	490c      	ldr	r1, [pc, #48]	; (20000120 <RCC_DeInit+0x68>)
200000ee:	50d1      	str	r1, [r2, r3]
#endif /* STM32F40_41xxx || STM32F427_437xx || STM32F429_439xx || STM32F446xx || STM32F469_479xx */
  
  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
200000f0:	4b07      	ldr	r3, [pc, #28]	; (20000110 <RCC_DeInit+0x58>)
200000f2:	681a      	ldr	r2, [r3, #0]
200000f4:	4b06      	ldr	r3, [pc, #24]	; (20000110 <RCC_DeInit+0x58>)
200000f6:	490b      	ldr	r1, [pc, #44]	; (20000124 <RCC_DeInit+0x6c>)
200000f8:	400a      	ands	r2, r1
200000fa:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
200000fc:	4b04      	ldr	r3, [pc, #16]	; (20000110 <RCC_DeInit+0x58>)
200000fe:	2200      	movs	r2, #0
20000100:	60da      	str	r2, [r3, #12]

  /* Disable Timers clock prescalers selection, only available for STM32F42/43xxx and STM32F413_423xx devices */
  RCC->DCKCFGR = 0x00000000;
20000102:	4a03      	ldr	r2, [pc, #12]	; (20000110 <RCC_DeInit+0x58>)
20000104:	238c      	movs	r3, #140	; 0x8c
20000106:	2100      	movs	r1, #0
20000108:	50d1      	str	r1, [r2, r3]
  
#if defined(STM32F410xx) || defined(STM32F413_423xx)
  /* Disable LPTIM and FMPI2C clock prescalers selection, only available for STM32F410xx and STM32F413_423xx devices */
  RCC->DCKCFGR2 = 0x00000000;
#endif /* STM32F410xx || STM32F413_423xx */  
}
2000010a:	46c0      	nop			; (mov r8, r8)
2000010c:	46bd      	mov	sp, r7
2000010e:	bd80      	pop	{r7, pc}
20000110:	40023800 	andmi	r3, r2, r0, lsl #16
20000114:	eaf6ffff 	b	1fdc0118 <startup-0x23fee8>
20000118:	24003010 	strcs	r3, [r0], #-16
2000011c:	20003000 	andcs	r3, r0, r0
20000120:	24003000 	strcs	r3, [r0], #-0
20000124:	fffbffff 			; <UNDEFINED> instruction: 0xfffbffff

20000128 <RCC_HSEConfig>:
  *            @arg RCC_HSE_ON: turn ON the HSE oscillator
  *            @arg RCC_HSE_Bypass: HSE oscillator bypassed with external clock
  * @retval None
  */
void RCC_HSEConfig(uint8_t RCC_HSE)
{
20000128:	b580      	push	{r7, lr}
2000012a:	b082      	sub	sp, #8
2000012c:	af00      	add	r7, sp, #0
2000012e:	0002      	movs	r2, r0
20000130:	1dfb      	adds	r3, r7, #7
20000132:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_HSE(RCC_HSE));

  /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
  *(__IO uint8_t *) CR_BYTE3_ADDRESS = RCC_HSE_OFF;
20000134:	4b05      	ldr	r3, [pc, #20]	; (2000014c <RCC_HSEConfig+0x24>)
20000136:	2200      	movs	r2, #0
20000138:	701a      	strb	r2, [r3, #0]

  /* Set the new HSE configuration -------------------------------------------*/
  *(__IO uint8_t *) CR_BYTE3_ADDRESS = RCC_HSE;
2000013a:	4a04      	ldr	r2, [pc, #16]	; (2000014c <RCC_HSEConfig+0x24>)
2000013c:	1dfb      	adds	r3, r7, #7
2000013e:	781b      	ldrb	r3, [r3, #0]
20000140:	7013      	strb	r3, [r2, #0]
}
20000142:	46c0      	nop			; (mov r8, r8)
20000144:	46bd      	mov	sp, r7
20000146:	b002      	add	sp, #8
20000148:	bd80      	pop	{r7, pc}
2000014a:	46c0      	nop			; (mov r8, r8)
2000014c:	40023802 	andmi	r3, r2, r2, lsl #16

20000150 <RCC_WaitForHSEStartUp>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: HSE oscillator is stable and ready to use
  *          - ERROR: HSE oscillator not yet ready
  */
ErrorStatus RCC_WaitForHSEStartUp(void)
{
20000150:	b590      	push	{r4, r7, lr}
20000152:	b083      	sub	sp, #12
20000154:	af00      	add	r7, sp, #0
  __IO uint32_t startupcounter = 0;
20000156:	2300      	movs	r3, #0
20000158:	603b      	str	r3, [r7, #0]
  ErrorStatus status = ERROR;
2000015a:	1dfb      	adds	r3, r7, #7
2000015c:	2200      	movs	r2, #0
2000015e:	701a      	strb	r2, [r3, #0]
  FlagStatus hsestatus = RESET;
20000160:	1dbb      	adds	r3, r7, #6
20000162:	2200      	movs	r2, #0
20000164:	701a      	strb	r2, [r3, #0]
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    hsestatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
20000166:	1dbc      	adds	r4, r7, #6
20000168:	2031      	movs	r0, #49	; 0x31
2000016a:	f000 fd9b 	bl	20000ca4 <RCC_GetFlagStatus>
2000016e:	0003      	movs	r3, r0
20000170:	7023      	strb	r3, [r4, #0]
    startupcounter++;
20000172:	683b      	ldr	r3, [r7, #0]
20000174:	3301      	adds	r3, #1
20000176:	603b      	str	r3, [r7, #0]
  } while((startupcounter != HSE_STARTUP_TIMEOUT) && (hsestatus == RESET));
20000178:	683a      	ldr	r2, [r7, #0]
2000017a:	23a0      	movs	r3, #160	; 0xa0
2000017c:	01db      	lsls	r3, r3, #7
2000017e:	429a      	cmp	r2, r3
20000180:	d003      	beq.n	2000018a <RCC_WaitForHSEStartUp+0x3a>
20000182:	1dbb      	adds	r3, r7, #6
20000184:	781b      	ldrb	r3, [r3, #0]
20000186:	2b00      	cmp	r3, #0
20000188:	d0ed      	beq.n	20000166 <RCC_WaitForHSEStartUp+0x16>

  if (RCC_GetFlagStatus(RCC_FLAG_HSERDY) != RESET)
2000018a:	2031      	movs	r0, #49	; 0x31
2000018c:	f000 fd8a 	bl	20000ca4 <RCC_GetFlagStatus>
20000190:	1e03      	subs	r3, r0, #0
20000192:	d003      	beq.n	2000019c <RCC_WaitForHSEStartUp+0x4c>
  {
    status = SUCCESS;
20000194:	1dfb      	adds	r3, r7, #7
20000196:	2201      	movs	r2, #1
20000198:	701a      	strb	r2, [r3, #0]
2000019a:	e002      	b.n	200001a2 <RCC_WaitForHSEStartUp+0x52>
  }
  else
  {
    status = ERROR;
2000019c:	1dfb      	adds	r3, r7, #7
2000019e:	2200      	movs	r2, #0
200001a0:	701a      	strb	r2, [r3, #0]
  }
  return (status);
200001a2:	1dfb      	adds	r3, r7, #7
200001a4:	781b      	ldrb	r3, [r3, #0]
}
200001a6:	0018      	movs	r0, r3
200001a8:	46bd      	mov	sp, r7
200001aa:	b003      	add	sp, #12
200001ac:	bd90      	pop	{r4, r7, pc}

200001ae <RCC_AdjustHSICalibrationValue>:
  * @param  HSICalibrationValue: specifies the calibration trimming value.
  *         This parameter must be a number between 0 and 0x1F.
  * @retval None
  */
void RCC_AdjustHSICalibrationValue(uint8_t HSICalibrationValue)
{
200001ae:	b580      	push	{r7, lr}
200001b0:	b084      	sub	sp, #16
200001b2:	af00      	add	r7, sp, #0
200001b4:	0002      	movs	r2, r0
200001b6:	1dfb      	adds	r3, r7, #7
200001b8:	701a      	strb	r2, [r3, #0]
  uint32_t tmpreg = 0;
200001ba:	2300      	movs	r3, #0
200001bc:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_CALIBRATION_VALUE(HSICalibrationValue));

  tmpreg = RCC->CR;
200001be:	4b0a      	ldr	r3, [pc, #40]	; (200001e8 <RCC_AdjustHSICalibrationValue+0x3a>)
200001c0:	681b      	ldr	r3, [r3, #0]
200001c2:	60fb      	str	r3, [r7, #12]

  /* Clear HSITRIM[4:0] bits */
  tmpreg &= ~RCC_CR_HSITRIM;
200001c4:	68fb      	ldr	r3, [r7, #12]
200001c6:	22f8      	movs	r2, #248	; 0xf8
200001c8:	4393      	bics	r3, r2
200001ca:	60fb      	str	r3, [r7, #12]

  /* Set the HSITRIM[4:0] bits according to HSICalibrationValue value */
  tmpreg |= (uint32_t)HSICalibrationValue << 3;
200001cc:	1dfb      	adds	r3, r7, #7
200001ce:	781b      	ldrb	r3, [r3, #0]
200001d0:	00db      	lsls	r3, r3, #3
200001d2:	68fa      	ldr	r2, [r7, #12]
200001d4:	4313      	orrs	r3, r2
200001d6:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CR = tmpreg;
200001d8:	4b03      	ldr	r3, [pc, #12]	; (200001e8 <RCC_AdjustHSICalibrationValue+0x3a>)
200001da:	68fa      	ldr	r2, [r7, #12]
200001dc:	601a      	str	r2, [r3, #0]
}
200001de:	46c0      	nop			; (mov r8, r8)
200001e0:	46bd      	mov	sp, r7
200001e2:	b004      	add	sp, #16
200001e4:	bd80      	pop	{r7, pc}
200001e6:	46c0      	nop			; (mov r8, r8)
200001e8:	40023800 	andmi	r3, r2, r0, lsl #16

200001ec <RCC_HSICmd>:
  * @note   When the HSI is stopped, HSIRDY flag goes low after 6 HSI oscillator
  *         clock cycles.  
  * @retval None
  */
void RCC_HSICmd(FunctionalState NewState)
{
200001ec:	b580      	push	{r7, lr}
200001ee:	b082      	sub	sp, #8
200001f0:	af00      	add	r7, sp, #0
200001f2:	0002      	movs	r2, r0
200001f4:	1dfb      	adds	r3, r7, #7
200001f6:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CR_HSION_BB = (uint32_t)NewState;
200001f8:	4b03      	ldr	r3, [pc, #12]	; (20000208 <RCC_HSICmd+0x1c>)
200001fa:	1dfa      	adds	r2, r7, #7
200001fc:	7812      	ldrb	r2, [r2, #0]
200001fe:	601a      	str	r2, [r3, #0]
}
20000200:	46c0      	nop			; (mov r8, r8)
20000202:	46bd      	mov	sp, r7
20000204:	b002      	add	sp, #8
20000206:	bd80      	pop	{r7, pc}
20000208:	42470000 	submi	r0, r7, #0

2000020c <RCC_LSEConfig>:
  *            @arg RCC_LSE_ON: turn ON the LSE oscillator
  *            @arg RCC_LSE_Bypass: LSE oscillator bypassed with external clock
  * @retval None
  */
void RCC_LSEConfig(uint8_t RCC_LSE)
{
2000020c:	b580      	push	{r7, lr}
2000020e:	b082      	sub	sp, #8
20000210:	af00      	add	r7, sp, #0
20000212:	0002      	movs	r2, r0
20000214:	1dfb      	adds	r3, r7, #7
20000216:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_LSE(RCC_LSE));

  /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
  /* Reset LSEON bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
20000218:	4b0c      	ldr	r3, [pc, #48]	; (2000024c <RCC_LSEConfig+0x40>)
2000021a:	2200      	movs	r2, #0
2000021c:	701a      	strb	r2, [r3, #0]

  /* Reset LSEBYP bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
2000021e:	4b0b      	ldr	r3, [pc, #44]	; (2000024c <RCC_LSEConfig+0x40>)
20000220:	2200      	movs	r2, #0
20000222:	701a      	strb	r2, [r3, #0]

  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch (RCC_LSE)
20000224:	1dfb      	adds	r3, r7, #7
20000226:	781b      	ldrb	r3, [r3, #0]
20000228:	2b01      	cmp	r3, #1
2000022a:	d002      	beq.n	20000232 <RCC_LSEConfig+0x26>
2000022c:	2b04      	cmp	r3, #4
2000022e:	d004      	beq.n	2000023a <RCC_LSEConfig+0x2e>
    case RCC_LSE_Bypass:
      /* Set LSEBYP and LSEON bits */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
      break;
    default:
      break;
20000230:	e007      	b.n	20000242 <RCC_LSEConfig+0x36>
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_ON;
20000232:	4b06      	ldr	r3, [pc, #24]	; (2000024c <RCC_LSEConfig+0x40>)
20000234:	2201      	movs	r2, #1
20000236:	701a      	strb	r2, [r3, #0]
      break;
20000238:	e003      	b.n	20000242 <RCC_LSEConfig+0x36>
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
2000023a:	4b04      	ldr	r3, [pc, #16]	; (2000024c <RCC_LSEConfig+0x40>)
2000023c:	2205      	movs	r2, #5
2000023e:	701a      	strb	r2, [r3, #0]
      break;
20000240:	46c0      	nop			; (mov r8, r8)
  }
}
20000242:	46c0      	nop			; (mov r8, r8)
20000244:	46bd      	mov	sp, r7
20000246:	b002      	add	sp, #8
20000248:	bd80      	pop	{r7, pc}
2000024a:	46c0      	nop			; (mov r8, r8)
2000024c:	40023870 	andmi	r3, r2, r0, ror r8

20000250 <RCC_LSICmd>:
  * @note   When the LSI is stopped, LSIRDY flag goes low after 6 LSI oscillator
  *         clock cycles. 
  * @retval None
  */
void RCC_LSICmd(FunctionalState NewState)
{
20000250:	b580      	push	{r7, lr}
20000252:	b082      	sub	sp, #8
20000254:	af00      	add	r7, sp, #0
20000256:	0002      	movs	r2, r0
20000258:	1dfb      	adds	r3, r7, #7
2000025a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CSR_LSION_BB = (uint32_t)NewState;
2000025c:	4b03      	ldr	r3, [pc, #12]	; (2000026c <RCC_LSICmd+0x1c>)
2000025e:	1dfa      	adds	r2, r7, #7
20000260:	7812      	ldrb	r2, [r2, #0]
20000262:	601a      	str	r2, [r3, #0]
}
20000264:	46c0      	nop			; (mov r8, r8)
20000266:	46bd      	mov	sp, r7
20000268:	b002      	add	sp, #8
2000026a:	bd80      	pop	{r7, pc}
2000026c:	42470e80 	submi	r0, r7, #128, 28	; 0x800

20000270 <RCC_PLLConfig>:
  *         correctly.
  *   
  * @retval None
  */
void RCC_PLLConfig(uint32_t RCC_PLLSource, uint32_t PLLM, uint32_t PLLN, uint32_t PLLP, uint32_t PLLQ)
{
20000270:	b580      	push	{r7, lr}
20000272:	b084      	sub	sp, #16
20000274:	af00      	add	r7, sp, #0
20000276:	60f8      	str	r0, [r7, #12]
20000278:	60b9      	str	r1, [r7, #8]
2000027a:	607a      	str	r2, [r7, #4]
2000027c:	603b      	str	r3, [r7, #0]
  assert_param(IS_RCC_PLLM_VALUE(PLLM));
  assert_param(IS_RCC_PLLN_VALUE(PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLP));
  assert_param(IS_RCC_PLLQ_VALUE(PLLQ));

  RCC->PLLCFGR = PLLM | (PLLN << 6) | (((PLLP >> 1) -1) << 16) | (RCC_PLLSource) |
2000027e:	687b      	ldr	r3, [r7, #4]
20000280:	019a      	lsls	r2, r3, #6
20000282:	68bb      	ldr	r3, [r7, #8]
20000284:	431a      	orrs	r2, r3
20000286:	683b      	ldr	r3, [r7, #0]
20000288:	085b      	lsrs	r3, r3, #1
2000028a:	3b01      	subs	r3, #1
2000028c:	041b      	lsls	r3, r3, #16
2000028e:	431a      	orrs	r2, r3
20000290:	68fb      	ldr	r3, [r7, #12]
20000292:	431a      	orrs	r2, r3
20000294:	0011      	movs	r1, r2
                 (PLLQ << 24);
20000296:	69bb      	ldr	r3, [r7, #24]
20000298:	061a      	lsls	r2, r3, #24
  RCC->PLLCFGR = PLLM | (PLLN << 6) | (((PLLP >> 1) -1) << 16) | (RCC_PLLSource) |
2000029a:	4b03      	ldr	r3, [pc, #12]	; (200002a8 <RCC_PLLConfig+0x38>)
2000029c:	430a      	orrs	r2, r1
2000029e:	605a      	str	r2, [r3, #4]
}
200002a0:	46c0      	nop			; (mov r8, r8)
200002a2:	46bd      	mov	sp, r7
200002a4:	b004      	add	sp, #16
200002a6:	bd80      	pop	{r7, pc}
200002a8:	40023800 	andmi	r3, r2, r0, lsl #16

200002ac <RCC_PLLCmd>:
  * @note   The main PLL is disabled by hardware when entering STOP and STANDBY modes.
  * @param  NewState: new state of the main PLL. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_PLLCmd(FunctionalState NewState)
{
200002ac:	b580      	push	{r7, lr}
200002ae:	b082      	sub	sp, #8
200002b0:	af00      	add	r7, sp, #0
200002b2:	0002      	movs	r2, r0
200002b4:	1dfb      	adds	r3, r7, #7
200002b6:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_PLLON_BB = (uint32_t)NewState;
200002b8:	4b03      	ldr	r3, [pc, #12]	; (200002c8 <RCC_PLLCmd+0x1c>)
200002ba:	1dfa      	adds	r2, r7, #7
200002bc:	7812      	ldrb	r2, [r2, #0]
200002be:	601a      	str	r2, [r3, #0]
}
200002c0:	46c0      	nop			; (mov r8, r8)
200002c2:	46bd      	mov	sp, r7
200002c4:	b002      	add	sp, #8
200002c6:	bd80      	pop	{r7, pc}
200002c8:	42470060 	submi	r0, r7, #96	; 0x60

200002cc <RCC_PLLI2SConfig>:
  *         on the I2S clock frequency.
  *   
  * @retval None
  */
void RCC_PLLI2SConfig(uint32_t PLLI2SN, uint32_t PLLI2SR)
{
200002cc:	b580      	push	{r7, lr}
200002ce:	b082      	sub	sp, #8
200002d0:	af00      	add	r7, sp, #0
200002d2:	6078      	str	r0, [r7, #4]
200002d4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RCC_PLLI2SN_VALUE(PLLI2SN));
  assert_param(IS_RCC_PLLI2SR_VALUE(PLLI2SR));

  RCC->PLLI2SCFGR = (PLLI2SN << 6) | (PLLI2SR << 28);
200002d6:	687b      	ldr	r3, [r7, #4]
200002d8:	019a      	lsls	r2, r3, #6
200002da:	683b      	ldr	r3, [r7, #0]
200002dc:	071b      	lsls	r3, r3, #28
200002de:	4904      	ldr	r1, [pc, #16]	; (200002f0 <RCC_PLLI2SConfig+0x24>)
200002e0:	4313      	orrs	r3, r2
200002e2:	2284      	movs	r2, #132	; 0x84
200002e4:	508b      	str	r3, [r1, r2]
}
200002e6:	46c0      	nop			; (mov r8, r8)
200002e8:	46bd      	mov	sp, r7
200002ea:	b002      	add	sp, #8
200002ec:	bd80      	pop	{r7, pc}
200002ee:	46c0      	nop			; (mov r8, r8)
200002f0:	40023800 	andmi	r3, r2, r0, lsl #16

200002f4 <RCC_PLLI2SCmd>:
  * @note   The PLLI2S is disabled by hardware when entering STOP and STANDBY modes.  
  * @param  NewState: new state of the PLLI2S. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_PLLI2SCmd(FunctionalState NewState)
{
200002f4:	b580      	push	{r7, lr}
200002f6:	b082      	sub	sp, #8
200002f8:	af00      	add	r7, sp, #0
200002fa:	0002      	movs	r2, r0
200002fc:	1dfb      	adds	r3, r7, #7
200002fe:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_PLLI2SON_BB = (uint32_t)NewState;
20000300:	4b03      	ldr	r3, [pc, #12]	; (20000310 <RCC_PLLI2SCmd+0x1c>)
20000302:	1dfa      	adds	r2, r7, #7
20000304:	7812      	ldrb	r2, [r2, #0]
20000306:	601a      	str	r2, [r3, #0]
}
20000308:	46c0      	nop			; (mov r8, r8)
2000030a:	46bd      	mov	sp, r7
2000030c:	b002      	add	sp, #8
2000030e:	bd80      	pop	{r7, pc}
20000310:	42470068 	submi	r0, r7, #104	; 0x68

20000314 <RCC_PLLSAIConfig>:
  *          This parameter must be a number between 2 and 7.
  *   
  * @retval None
  */
void RCC_PLLSAIConfig(uint32_t PLLSAIN, uint32_t PLLSAIQ, uint32_t PLLSAIR)
{
20000314:	b580      	push	{r7, lr}
20000316:	b084      	sub	sp, #16
20000318:	af00      	add	r7, sp, #0
2000031a:	60f8      	str	r0, [r7, #12]
2000031c:	60b9      	str	r1, [r7, #8]
2000031e:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_PLLSAIN_VALUE(PLLSAIN));
  assert_param(IS_RCC_PLLSAIR_VALUE(PLLSAIR));
  assert_param(IS_RCC_PLLSAIQ_VALUE(PLLSAIQ));
  
  RCC->PLLSAICFGR = (PLLSAIN << 6) | (PLLSAIQ << 24) | (PLLSAIR << 28);
20000320:	68fb      	ldr	r3, [r7, #12]
20000322:	019a      	lsls	r2, r3, #6
20000324:	68bb      	ldr	r3, [r7, #8]
20000326:	061b      	lsls	r3, r3, #24
20000328:	431a      	orrs	r2, r3
2000032a:	687b      	ldr	r3, [r7, #4]
2000032c:	071b      	lsls	r3, r3, #28
2000032e:	4904      	ldr	r1, [pc, #16]	; (20000340 <RCC_PLLSAIConfig+0x2c>)
20000330:	4313      	orrs	r3, r2
20000332:	2288      	movs	r2, #136	; 0x88
20000334:	508b      	str	r3, [r1, r2]
}
20000336:	46c0      	nop			; (mov r8, r8)
20000338:	46bd      	mov	sp, r7
2000033a:	b004      	add	sp, #16
2000033c:	bd80      	pop	{r7, pc}
2000033e:	46c0      	nop			; (mov r8, r8)
20000340:	40023800 	andmi	r3, r2, r0, lsl #16

20000344 <RCC_PLLSAICmd>:
  * @note   The PLLSAI is disabled by hardware when entering STOP and STANDBY modes.  
  * @param  NewState: new state of the PLLSAI. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_PLLSAICmd(FunctionalState NewState)
{
20000344:	b580      	push	{r7, lr}
20000346:	b082      	sub	sp, #8
20000348:	af00      	add	r7, sp, #0
2000034a:	0002      	movs	r2, r0
2000034c:	1dfb      	adds	r3, r7, #7
2000034e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_PLLSAION_BB = (uint32_t)NewState;
20000350:	4b03      	ldr	r3, [pc, #12]	; (20000360 <RCC_PLLSAICmd+0x1c>)
20000352:	1dfa      	adds	r2, r7, #7
20000354:	7812      	ldrb	r2, [r2, #0]
20000356:	601a      	str	r2, [r3, #0]
}
20000358:	46c0      	nop			; (mov r8, r8)
2000035a:	46bd      	mov	sp, r7
2000035c:	b002      	add	sp, #8
2000035e:	bd80      	pop	{r7, pc}
20000360:	42470070 	submi	r0, r7, #112	; 0x70

20000364 <RCC_ClockSecuritySystemCmd>:
  * @param  NewState: new state of the Clock Security System.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_ClockSecuritySystemCmd(FunctionalState NewState)
{
20000364:	b580      	push	{r7, lr}
20000366:	b082      	sub	sp, #8
20000368:	af00      	add	r7, sp, #0
2000036a:	0002      	movs	r2, r0
2000036c:	1dfb      	adds	r3, r7, #7
2000036e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_CSSON_BB = (uint32_t)NewState;
20000370:	4b03      	ldr	r3, [pc, #12]	; (20000380 <RCC_ClockSecuritySystemCmd+0x1c>)
20000372:	1dfa      	adds	r2, r7, #7
20000374:	7812      	ldrb	r2, [r2, #0]
20000376:	601a      	str	r2, [r3, #0]
}
20000378:	46c0      	nop			; (mov r8, r8)
2000037a:	46bd      	mov	sp, r7
2000037c:	b002      	add	sp, #8
2000037e:	bd80      	pop	{r7, pc}
20000380:	4247004c 	submi	r0, r7, #76	; 0x4c

20000384 <RCC_MCO1Config>:
  *            @arg RCC_MCO1Div_4: division by 4 applied to MCO1 clock
  *            @arg RCC_MCO1Div_5: division by 5 applied to MCO1 clock
  * @retval None
  */
void RCC_MCO1Config(uint32_t RCC_MCO1Source, uint32_t RCC_MCO1Div)
{
20000384:	b580      	push	{r7, lr}
20000386:	b084      	sub	sp, #16
20000388:	af00      	add	r7, sp, #0
2000038a:	6078      	str	r0, [r7, #4]
2000038c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
2000038e:	2300      	movs	r3, #0
20000390:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_MCO1SOURCE(RCC_MCO1Source));
  assert_param(IS_RCC_MCO1DIV(RCC_MCO1Div));  

  tmpreg = RCC->CFGR;
20000392:	4b0a      	ldr	r3, [pc, #40]	; (200003bc <RCC_MCO1Config+0x38>)
20000394:	689b      	ldr	r3, [r3, #8]
20000396:	60fb      	str	r3, [r7, #12]

  /* Clear MCO1[1:0] and MCO1PRE[2:0] bits */
  tmpreg &= CFGR_MCO1_RESET_MASK;
20000398:	68fb      	ldr	r3, [r7, #12]
2000039a:	4a09      	ldr	r2, [pc, #36]	; (200003c0 <RCC_MCO1Config+0x3c>)
2000039c:	4013      	ands	r3, r2
2000039e:	60fb      	str	r3, [r7, #12]

  /* Select MCO1 clock source and prescaler */
  tmpreg |= RCC_MCO1Source | RCC_MCO1Div;
200003a0:	687a      	ldr	r2, [r7, #4]
200003a2:	683b      	ldr	r3, [r7, #0]
200003a4:	4313      	orrs	r3, r2
200003a6:	68fa      	ldr	r2, [r7, #12]
200003a8:	4313      	orrs	r3, r2
200003aa:	60fb      	str	r3, [r7, #12]
  
  /* Store the new value */
  RCC->CFGR = tmpreg;
200003ac:	4b03      	ldr	r3, [pc, #12]	; (200003bc <RCC_MCO1Config+0x38>)
200003ae:	68fa      	ldr	r2, [r7, #12]
200003b0:	609a      	str	r2, [r3, #8]

#if defined(STM32F410xx)
  RCC_MCO1Cmd(ENABLE);
#endif /* STM32F410xx */   
}
200003b2:	46c0      	nop			; (mov r8, r8)
200003b4:	46bd      	mov	sp, r7
200003b6:	b004      	add	sp, #16
200003b8:	bd80      	pop	{r7, pc}
200003ba:	46c0      	nop			; (mov r8, r8)
200003bc:	40023800 	andmi	r3, r2, r0, lsl #16
200003c0:	f89fffff 			; <UNDEFINED> instruction: 0xf89fffff

200003c4 <RCC_MCO2Config>:
  * @note  For STM32F410xx devices to output I2SCLK clock on MCO2 you should have
  *        at last one of the SPI clocks enabled (SPI1, SPI2 or SPI5).
  * @retval None
  */
void RCC_MCO2Config(uint32_t RCC_MCO2Source, uint32_t RCC_MCO2Div)
{
200003c4:	b580      	push	{r7, lr}
200003c6:	b084      	sub	sp, #16
200003c8:	af00      	add	r7, sp, #0
200003ca:	6078      	str	r0, [r7, #4]
200003cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
200003ce:	2300      	movs	r3, #0
200003d0:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_MCO2SOURCE(RCC_MCO2Source));
  assert_param(IS_RCC_MCO2DIV(RCC_MCO2Div));
  
  tmpreg = RCC->CFGR;
200003d2:	4b0a      	ldr	r3, [pc, #40]	; (200003fc <RCC_MCO2Config+0x38>)
200003d4:	689b      	ldr	r3, [r3, #8]
200003d6:	60fb      	str	r3, [r7, #12]
  
  /* Clear MCO2 and MCO2PRE[2:0] bits */
  tmpreg &= CFGR_MCO2_RESET_MASK;
200003d8:	68fb      	ldr	r3, [r7, #12]
200003da:	015b      	lsls	r3, r3, #5
200003dc:	095b      	lsrs	r3, r3, #5
200003de:	60fb      	str	r3, [r7, #12]

  /* Select MCO2 clock source and prescaler */
  tmpreg |= RCC_MCO2Source | RCC_MCO2Div;
200003e0:	687a      	ldr	r2, [r7, #4]
200003e2:	683b      	ldr	r3, [r7, #0]
200003e4:	4313      	orrs	r3, r2
200003e6:	68fa      	ldr	r2, [r7, #12]
200003e8:	4313      	orrs	r3, r2
200003ea:	60fb      	str	r3, [r7, #12]
  
  /* Store the new value */
  RCC->CFGR = tmpreg;
200003ec:	4b03      	ldr	r3, [pc, #12]	; (200003fc <RCC_MCO2Config+0x38>)
200003ee:	68fa      	ldr	r2, [r7, #12]
200003f0:	609a      	str	r2, [r3, #8]

#if defined(STM32F410xx)
  RCC_MCO2Cmd(ENABLE);
#endif /* STM32F410xx */   
}
200003f2:	46c0      	nop			; (mov r8, r8)
200003f4:	46bd      	mov	sp, r7
200003f6:	b004      	add	sp, #16
200003f8:	bd80      	pop	{r7, pc}
200003fa:	46c0      	nop			; (mov r8, r8)
200003fc:	40023800 	andmi	r3, r2, r0, lsl #16

20000400 <RCC_SYSCLKConfig>:
  *            @arg RCC_SYSCLKSource_PLLCLK: PLL selected as system clock source (RCC_SYSCLKSource_PLLPCLK for STM32F446xx devices)
  *            @arg RCC_SYSCLKSource_PLLRCLK: PLL R selected as system clock source only for STM32F412xG, STM32F413_423xx and STM32F446xx devices
  * @retval None
  */
void RCC_SYSCLKConfig(uint32_t RCC_SYSCLKSource)
{
20000400:	b580      	push	{r7, lr}
20000402:	b084      	sub	sp, #16
20000404:	af00      	add	r7, sp, #0
20000406:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
20000408:	2300      	movs	r3, #0
2000040a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_SYSCLK_SOURCE(RCC_SYSCLKSource));

  tmpreg = RCC->CFGR;
2000040c:	4b08      	ldr	r3, [pc, #32]	; (20000430 <RCC_SYSCLKConfig+0x30>)
2000040e:	689b      	ldr	r3, [r3, #8]
20000410:	60fb      	str	r3, [r7, #12]

  /* Clear SW[1:0] bits */
  tmpreg &= ~RCC_CFGR_SW;
20000412:	68fb      	ldr	r3, [r7, #12]
20000414:	2203      	movs	r2, #3
20000416:	4393      	bics	r3, r2
20000418:	60fb      	str	r3, [r7, #12]

  /* Set SW[1:0] bits according to RCC_SYSCLKSource value */
  tmpreg |= RCC_SYSCLKSource;
2000041a:	68fa      	ldr	r2, [r7, #12]
2000041c:	687b      	ldr	r3, [r7, #4]
2000041e:	4313      	orrs	r3, r2
20000420:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;
20000422:	4b03      	ldr	r3, [pc, #12]	; (20000430 <RCC_SYSCLKConfig+0x30>)
20000424:	68fa      	ldr	r2, [r7, #12]
20000426:	609a      	str	r2, [r3, #8]
}
20000428:	46c0      	nop			; (mov r8, r8)
2000042a:	46bd      	mov	sp, r7
2000042c:	b004      	add	sp, #16
2000042e:	bd80      	pop	{r7, pc}
20000430:	40023800 	andmi	r3, r2, r0, lsl #16

20000434 <RCC_GetSYSCLKSource>:
  *              - 0x04: HSE used as system clock
  *              - 0x08: PLL used as system clock (PLL P for STM32F446xx devices)
  *              - 0x0C: PLL R used as system clock (only for STM32F412xG, STM32F413_423xx and STM32F446xx devices)
  */
uint8_t RCC_GetSYSCLKSource(void)
{
20000434:	b580      	push	{r7, lr}
20000436:	af00      	add	r7, sp, #0
  return ((uint8_t)(RCC->CFGR & RCC_CFGR_SWS));
20000438:	4b04      	ldr	r3, [pc, #16]	; (2000044c <RCC_GetSYSCLKSource+0x18>)
2000043a:	689b      	ldr	r3, [r3, #8]
2000043c:	b2db      	uxtb	r3, r3
2000043e:	220c      	movs	r2, #12
20000440:	4013      	ands	r3, r2
20000442:	b2db      	uxtb	r3, r3
}
20000444:	0018      	movs	r0, r3
20000446:	46bd      	mov	sp, r7
20000448:	bd80      	pop	{r7, pc}
2000044a:	46c0      	nop			; (mov r8, r8)
2000044c:	40023800 	andmi	r3, r2, r0, lsl #16

20000450 <RCC_HCLKConfig>:
  *            @arg RCC_SYSCLK_Div256: AHB clock = SYSCLK/256
  *            @arg RCC_SYSCLK_Div512: AHB clock = SYSCLK/512
  * @retval None
  */
void RCC_HCLKConfig(uint32_t RCC_SYSCLK)
{
20000450:	b580      	push	{r7, lr}
20000452:	b084      	sub	sp, #16
20000454:	af00      	add	r7, sp, #0
20000456:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
20000458:	2300      	movs	r3, #0
2000045a:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_HCLK(RCC_SYSCLK));

  tmpreg = RCC->CFGR;
2000045c:	4b08      	ldr	r3, [pc, #32]	; (20000480 <RCC_HCLKConfig+0x30>)
2000045e:	689b      	ldr	r3, [r3, #8]
20000460:	60fb      	str	r3, [r7, #12]

  /* Clear HPRE[3:0] bits */
  tmpreg &= ~RCC_CFGR_HPRE;
20000462:	68fb      	ldr	r3, [r7, #12]
20000464:	22f0      	movs	r2, #240	; 0xf0
20000466:	4393      	bics	r3, r2
20000468:	60fb      	str	r3, [r7, #12]

  /* Set HPRE[3:0] bits according to RCC_SYSCLK value */
  tmpreg |= RCC_SYSCLK;
2000046a:	68fa      	ldr	r2, [r7, #12]
2000046c:	687b      	ldr	r3, [r7, #4]
2000046e:	4313      	orrs	r3, r2
20000470:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;
20000472:	4b03      	ldr	r3, [pc, #12]	; (20000480 <RCC_HCLKConfig+0x30>)
20000474:	68fa      	ldr	r2, [r7, #12]
20000476:	609a      	str	r2, [r3, #8]
}
20000478:	46c0      	nop			; (mov r8, r8)
2000047a:	46bd      	mov	sp, r7
2000047c:	b004      	add	sp, #16
2000047e:	bd80      	pop	{r7, pc}
20000480:	40023800 	andmi	r3, r2, r0, lsl #16

20000484 <RCC_PCLK1Config>:
  *            @arg RCC_HCLK_Div8:  APB1 clock = HCLK/8
  *            @arg RCC_HCLK_Div16: APB1 clock = HCLK/16
  * @retval None
  */
void RCC_PCLK1Config(uint32_t RCC_HCLK)
{
20000484:	b580      	push	{r7, lr}
20000486:	b084      	sub	sp, #16
20000488:	af00      	add	r7, sp, #0
2000048a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
2000048c:	2300      	movs	r3, #0
2000048e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));

  tmpreg = RCC->CFGR;
20000490:	4b08      	ldr	r3, [pc, #32]	; (200004b4 <RCC_PCLK1Config+0x30>)
20000492:	689b      	ldr	r3, [r3, #8]
20000494:	60fb      	str	r3, [r7, #12]

  /* Clear PPRE1[2:0] bits */
  tmpreg &= ~RCC_CFGR_PPRE1;
20000496:	68fb      	ldr	r3, [r7, #12]
20000498:	4a07      	ldr	r2, [pc, #28]	; (200004b8 <RCC_PCLK1Config+0x34>)
2000049a:	4013      	ands	r3, r2
2000049c:	60fb      	str	r3, [r7, #12]

  /* Set PPRE1[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK;
2000049e:	68fa      	ldr	r2, [r7, #12]
200004a0:	687b      	ldr	r3, [r7, #4]
200004a2:	4313      	orrs	r3, r2
200004a4:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;
200004a6:	4b03      	ldr	r3, [pc, #12]	; (200004b4 <RCC_PCLK1Config+0x30>)
200004a8:	68fa      	ldr	r2, [r7, #12]
200004aa:	609a      	str	r2, [r3, #8]
}
200004ac:	46c0      	nop			; (mov r8, r8)
200004ae:	46bd      	mov	sp, r7
200004b0:	b004      	add	sp, #16
200004b2:	bd80      	pop	{r7, pc}
200004b4:	40023800 	andmi	r3, r2, r0, lsl #16
200004b8:	ffffe3ff 			; <UNDEFINED> instruction: 0xffffe3ff

200004bc <RCC_PCLK2Config>:
  *            @arg RCC_HCLK_Div8:  APB2 clock = HCLK/8
  *            @arg RCC_HCLK_Div16: APB2 clock = HCLK/16
  * @retval None
  */
void RCC_PCLK2Config(uint32_t RCC_HCLK)
{
200004bc:	b580      	push	{r7, lr}
200004be:	b084      	sub	sp, #16
200004c0:	af00      	add	r7, sp, #0
200004c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
200004c4:	2300      	movs	r3, #0
200004c6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));

  tmpreg = RCC->CFGR;
200004c8:	4b09      	ldr	r3, [pc, #36]	; (200004f0 <RCC_PCLK2Config+0x34>)
200004ca:	689b      	ldr	r3, [r3, #8]
200004cc:	60fb      	str	r3, [r7, #12]

  /* Clear PPRE2[2:0] bits */
  tmpreg &= ~RCC_CFGR_PPRE2;
200004ce:	68fb      	ldr	r3, [r7, #12]
200004d0:	4a08      	ldr	r2, [pc, #32]	; (200004f4 <RCC_PCLK2Config+0x38>)
200004d2:	4013      	ands	r3, r2
200004d4:	60fb      	str	r3, [r7, #12]

  /* Set PPRE2[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK << 3;
200004d6:	687b      	ldr	r3, [r7, #4]
200004d8:	00db      	lsls	r3, r3, #3
200004da:	68fa      	ldr	r2, [r7, #12]
200004dc:	4313      	orrs	r3, r2
200004de:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;
200004e0:	4b03      	ldr	r3, [pc, #12]	; (200004f0 <RCC_PCLK2Config+0x34>)
200004e2:	68fa      	ldr	r2, [r7, #12]
200004e4:	609a      	str	r2, [r3, #8]
}
200004e6:	46c0      	nop			; (mov r8, r8)
200004e8:	46bd      	mov	sp, r7
200004ea:	b004      	add	sp, #16
200004ec:	bd80      	pop	{r7, pc}
200004ee:	46c0      	nop			; (mov r8, r8)
200004f0:	40023800 	andmi	r3, r2, r0, lsl #16
200004f4:	ffff1fff 			; <UNDEFINED> instruction: 0xffff1fff

200004f8 <RCC_GetClocksFreq>:
  *         configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
200004f8:	b580      	push	{r7, lr}
200004fa:	b088      	sub	sp, #32
200004fc:	af00      	add	r7, sp, #0
200004fe:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
20000500:	2300      	movs	r3, #0
20000502:	61bb      	str	r3, [r7, #24]
20000504:	2300      	movs	r3, #0
20000506:	617b      	str	r3, [r7, #20]
20000508:	2300      	movs	r3, #0
2000050a:	61fb      	str	r3, [r7, #28]
2000050c:	2302      	movs	r3, #2
2000050e:	613b      	str	r3, [r7, #16]
20000510:	2300      	movs	r3, #0
20000512:	60fb      	str	r3, [r7, #12]
20000514:	2302      	movs	r3, #2
20000516:	60bb      	str	r3, [r7, #8]
#if defined(STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F446xx)  
  uint32_t pllr = 2;
#endif /* STM32F412xG || STM32F413_423xx || STM32F446xx */
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
20000518:	4b49      	ldr	r3, [pc, #292]	; (20000640 <RCC_GetClocksFreq+0x148>)
2000051a:	689b      	ldr	r3, [r3, #8]
2000051c:	220c      	movs	r2, #12
2000051e:	4013      	ands	r3, r2
20000520:	61bb      	str	r3, [r7, #24]
  
  switch (tmp)
20000522:	69bb      	ldr	r3, [r7, #24]
20000524:	2b04      	cmp	r3, #4
20000526:	d007      	beq.n	20000538 <RCC_GetClocksFreq+0x40>
20000528:	2b08      	cmp	r3, #8
2000052a:	d009      	beq.n	20000540 <RCC_GetClocksFreq+0x48>
2000052c:	2b00      	cmp	r3, #0
2000052e:	d141      	bne.n	200005b4 <RCC_GetClocksFreq+0xbc>
  {
  case 0x00:  /* HSI used as system clock source */
    RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
20000530:	687b      	ldr	r3, [r7, #4]
20000532:	4a44      	ldr	r2, [pc, #272]	; (20000644 <RCC_GetClocksFreq+0x14c>)
20000534:	601a      	str	r2, [r3, #0]
    break;
20000536:	e041      	b.n	200005bc <RCC_GetClocksFreq+0xc4>
  case 0x04:  /* HSE used as system clock  source */
    RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
20000538:	687b      	ldr	r3, [r7, #4]
2000053a:	4a43      	ldr	r2, [pc, #268]	; (20000648 <RCC_GetClocksFreq+0x150>)
2000053c:	601a      	str	r2, [r3, #0]
    break;
2000053e:	e03d      	b.n	200005bc <RCC_GetClocksFreq+0xc4>
  case 0x08:  /* PLL P used as system clock  source */
    
    /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLP
    */    
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
20000540:	4b3f      	ldr	r3, [pc, #252]	; (20000640 <RCC_GetClocksFreq+0x148>)
20000542:	685b      	ldr	r3, [r3, #4]
20000544:	0d9b      	lsrs	r3, r3, #22
20000546:	2201      	movs	r2, #1
20000548:	4013      	ands	r3, r2
2000054a:	60fb      	str	r3, [r7, #12]
    pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
2000054c:	4b3c      	ldr	r3, [pc, #240]	; (20000640 <RCC_GetClocksFreq+0x148>)
2000054e:	685b      	ldr	r3, [r3, #4]
20000550:	223f      	movs	r2, #63	; 0x3f
20000552:	4013      	ands	r3, r2
20000554:	60bb      	str	r3, [r7, #8]
    
    if (pllsource != 0)
20000556:	68fb      	ldr	r3, [r7, #12]
20000558:	2b00      	cmp	r3, #0
2000055a:	d00d      	beq.n	20000578 <RCC_GetClocksFreq+0x80>
    {
      /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
2000055c:	68b9      	ldr	r1, [r7, #8]
2000055e:	483a      	ldr	r0, [pc, #232]	; (20000648 <RCC_GetClocksFreq+0x150>)
20000560:	f000 ffb8 	bl	200014d4 <__udivsi3>
20000564:	0003      	movs	r3, r0
20000566:	001a      	movs	r2, r3
20000568:	4b35      	ldr	r3, [pc, #212]	; (20000640 <RCC_GetClocksFreq+0x148>)
2000056a:	685b      	ldr	r3, [r3, #4]
2000056c:	099b      	lsrs	r3, r3, #6
2000056e:	05db      	lsls	r3, r3, #23
20000570:	0ddb      	lsrs	r3, r3, #23
20000572:	4353      	muls	r3, r2
20000574:	61fb      	str	r3, [r7, #28]
20000576:	e00c      	b.n	20000592 <RCC_GetClocksFreq+0x9a>
    }
    else
    {
      /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
20000578:	68b9      	ldr	r1, [r7, #8]
2000057a:	4832      	ldr	r0, [pc, #200]	; (20000644 <RCC_GetClocksFreq+0x14c>)
2000057c:	f000 ffaa 	bl	200014d4 <__udivsi3>
20000580:	0003      	movs	r3, r0
20000582:	001a      	movs	r2, r3
20000584:	4b2e      	ldr	r3, [pc, #184]	; (20000640 <RCC_GetClocksFreq+0x148>)
20000586:	685b      	ldr	r3, [r3, #4]
20000588:	099b      	lsrs	r3, r3, #6
2000058a:	05db      	lsls	r3, r3, #23
2000058c:	0ddb      	lsrs	r3, r3, #23
2000058e:	4353      	muls	r3, r2
20000590:	61fb      	str	r3, [r7, #28]
    }
    
    pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
20000592:	4b2b      	ldr	r3, [pc, #172]	; (20000640 <RCC_GetClocksFreq+0x148>)
20000594:	685b      	ldr	r3, [r3, #4]
20000596:	0c1b      	lsrs	r3, r3, #16
20000598:	2203      	movs	r2, #3
2000059a:	4013      	ands	r3, r2
2000059c:	3301      	adds	r3, #1
2000059e:	005b      	lsls	r3, r3, #1
200005a0:	613b      	str	r3, [r7, #16]
    RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
200005a2:	6939      	ldr	r1, [r7, #16]
200005a4:	69f8      	ldr	r0, [r7, #28]
200005a6:	f000 ff95 	bl	200014d4 <__udivsi3>
200005aa:	0003      	movs	r3, r0
200005ac:	001a      	movs	r2, r3
200005ae:	687b      	ldr	r3, [r7, #4]
200005b0:	601a      	str	r2, [r3, #0]
    break;
200005b2:	e003      	b.n	200005bc <RCC_GetClocksFreq+0xc4>
    RCC_Clocks->SYSCLK_Frequency = pllvco/pllr;    
    break;
#endif /* STM32F412xG || STM32F413_423xx || STM32F446xx */
    
  default:
    RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
200005b4:	687b      	ldr	r3, [r7, #4]
200005b6:	4a23      	ldr	r2, [pc, #140]	; (20000644 <RCC_GetClocksFreq+0x14c>)
200005b8:	601a      	str	r2, [r3, #0]
    break;
200005ba:	46c0      	nop			; (mov r8, r8)
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/
  
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
200005bc:	4b20      	ldr	r3, [pc, #128]	; (20000640 <RCC_GetClocksFreq+0x148>)
200005be:	689b      	ldr	r3, [r3, #8]
200005c0:	22f0      	movs	r2, #240	; 0xf0
200005c2:	4013      	ands	r3, r2
200005c4:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 4;
200005c6:	69bb      	ldr	r3, [r7, #24]
200005c8:	091b      	lsrs	r3, r3, #4
200005ca:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
200005cc:	4a1f      	ldr	r2, [pc, #124]	; (2000064c <RCC_GetClocksFreq+0x154>)
200005ce:	69bb      	ldr	r3, [r7, #24]
200005d0:	18d3      	adds	r3, r2, r3
200005d2:	781b      	ldrb	r3, [r3, #0]
200005d4:	b2db      	uxtb	r3, r3
200005d6:	617b      	str	r3, [r7, #20]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
200005d8:	687b      	ldr	r3, [r7, #4]
200005da:	681a      	ldr	r2, [r3, #0]
200005dc:	697b      	ldr	r3, [r7, #20]
200005de:	40da      	lsrs	r2, r3
200005e0:	687b      	ldr	r3, [r7, #4]
200005e2:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
200005e4:	4b16      	ldr	r3, [pc, #88]	; (20000640 <RCC_GetClocksFreq+0x148>)
200005e6:	689a      	ldr	r2, [r3, #8]
200005e8:	23e0      	movs	r3, #224	; 0xe0
200005ea:	015b      	lsls	r3, r3, #5
200005ec:	4013      	ands	r3, r2
200005ee:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 10;
200005f0:	69bb      	ldr	r3, [r7, #24]
200005f2:	0a9b      	lsrs	r3, r3, #10
200005f4:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
200005f6:	4a15      	ldr	r2, [pc, #84]	; (2000064c <RCC_GetClocksFreq+0x154>)
200005f8:	69bb      	ldr	r3, [r7, #24]
200005fa:	18d3      	adds	r3, r2, r3
200005fc:	781b      	ldrb	r3, [r3, #0]
200005fe:	b2db      	uxtb	r3, r3
20000600:	617b      	str	r3, [r7, #20]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
20000602:	687b      	ldr	r3, [r7, #4]
20000604:	685a      	ldr	r2, [r3, #4]
20000606:	697b      	ldr	r3, [r7, #20]
20000608:	40da      	lsrs	r2, r3
2000060a:	687b      	ldr	r3, [r7, #4]
2000060c:	609a      	str	r2, [r3, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
2000060e:	4b0c      	ldr	r3, [pc, #48]	; (20000640 <RCC_GetClocksFreq+0x148>)
20000610:	689a      	ldr	r2, [r3, #8]
20000612:	23e0      	movs	r3, #224	; 0xe0
20000614:	021b      	lsls	r3, r3, #8
20000616:	4013      	ands	r3, r2
20000618:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 13;
2000061a:	69bb      	ldr	r3, [r7, #24]
2000061c:	0b5b      	lsrs	r3, r3, #13
2000061e:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
20000620:	4a0a      	ldr	r2, [pc, #40]	; (2000064c <RCC_GetClocksFreq+0x154>)
20000622:	69bb      	ldr	r3, [r7, #24]
20000624:	18d3      	adds	r3, r2, r3
20000626:	781b      	ldrb	r3, [r3, #0]
20000628:	b2db      	uxtb	r3, r3
2000062a:	617b      	str	r3, [r7, #20]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
2000062c:	687b      	ldr	r3, [r7, #4]
2000062e:	685a      	ldr	r2, [r3, #4]
20000630:	697b      	ldr	r3, [r7, #20]
20000632:	40da      	lsrs	r2, r3
20000634:	687b      	ldr	r3, [r7, #4]
20000636:	60da      	str	r2, [r3, #12]
}
20000638:	46c0      	nop			; (mov r8, r8)
2000063a:	46bd      	mov	sp, r7
2000063c:	b008      	add	sp, #32
2000063e:	bd80      	pop	{r7, pc}
20000640:	40023800 	andmi	r3, r2, r0, lsl #16
20000644:	00f42400 	rscseq	r2, r4, r0, lsl #8
20000648:	017d7840 	cmneq	sp, r0, asr #16
2000064c:	200015f0 	strdcs	r1, [r0], -r0

20000650 <RCC_RTCCLKConfig>:
  *         RTC clock source).
  *  
  * @retval None
  */
void RCC_RTCCLKConfig(uint32_t RCC_RTCCLKSource)
{
20000650:	b580      	push	{r7, lr}
20000652:	b084      	sub	sp, #16
20000654:	af00      	add	r7, sp, #0
20000656:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
20000658:	2300      	movs	r3, #0
2000065a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_RTCCLK_SOURCE(RCC_RTCCLKSource));

  if ((RCC_RTCCLKSource & 0x00000300) == 0x00000300)
2000065c:	687a      	ldr	r2, [r7, #4]
2000065e:	23c0      	movs	r3, #192	; 0xc0
20000660:	009b      	lsls	r3, r3, #2
20000662:	401a      	ands	r2, r3
20000664:	23c0      	movs	r3, #192	; 0xc0
20000666:	009b      	lsls	r3, r3, #2
20000668:	429a      	cmp	r2, r3
2000066a:	d10f      	bne.n	2000068c <RCC_RTCCLKConfig+0x3c>
  { /* If HSE is selected as RTC clock source, configure HSE division factor for RTC clock */
    tmpreg = RCC->CFGR;
2000066c:	4b0d      	ldr	r3, [pc, #52]	; (200006a4 <RCC_RTCCLKConfig+0x54>)
2000066e:	689b      	ldr	r3, [r3, #8]
20000670:	60fb      	str	r3, [r7, #12]

    /* Clear RTCPRE[4:0] bits */
    tmpreg &= ~RCC_CFGR_RTCPRE;
20000672:	68fb      	ldr	r3, [r7, #12]
20000674:	4a0c      	ldr	r2, [pc, #48]	; (200006a8 <RCC_RTCCLKConfig+0x58>)
20000676:	4013      	ands	r3, r2
20000678:	60fb      	str	r3, [r7, #12]

    /* Configure HSE division factor for RTC clock */
    tmpreg |= (RCC_RTCCLKSource & 0xFFFFCFF);
2000067a:	687b      	ldr	r3, [r7, #4]
2000067c:	4a0b      	ldr	r2, [pc, #44]	; (200006ac <RCC_RTCCLKConfig+0x5c>)
2000067e:	4013      	ands	r3, r2
20000680:	68fa      	ldr	r2, [r7, #12]
20000682:	4313      	orrs	r3, r2
20000684:	60fb      	str	r3, [r7, #12]

    /* Store the new value */
    RCC->CFGR = tmpreg;
20000686:	4b07      	ldr	r3, [pc, #28]	; (200006a4 <RCC_RTCCLKConfig+0x54>)
20000688:	68fa      	ldr	r2, [r7, #12]
2000068a:	609a      	str	r2, [r3, #8]
  }
    
  /* Select the RTC clock source */
  RCC->BDCR |= (RCC_RTCCLKSource & 0x00000FFF);
2000068c:	4b05      	ldr	r3, [pc, #20]	; (200006a4 <RCC_RTCCLKConfig+0x54>)
2000068e:	6f19      	ldr	r1, [r3, #112]	; 0x70
20000690:	687b      	ldr	r3, [r7, #4]
20000692:	051b      	lsls	r3, r3, #20
20000694:	0d1a      	lsrs	r2, r3, #20
20000696:	4b03      	ldr	r3, [pc, #12]	; (200006a4 <RCC_RTCCLKConfig+0x54>)
20000698:	430a      	orrs	r2, r1
2000069a:	671a      	str	r2, [r3, #112]	; 0x70
}
2000069c:	46c0      	nop			; (mov r8, r8)
2000069e:	46bd      	mov	sp, r7
200006a0:	b004      	add	sp, #16
200006a2:	bd80      	pop	{r7, pc}
200006a4:	40023800 	andmi	r3, r2, r0, lsl #16
200006a8:	ffe0ffff 			; <UNDEFINED> instruction: 0xffe0ffff
200006ac:	0ffffcff 	svceq	0x00fffcff

200006b0 <RCC_RTCCLKCmd>:
  *         using the RCC_RTCCLKConfig function.
  * @param  NewState: new state of the RTC clock. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_RTCCLKCmd(FunctionalState NewState)
{
200006b0:	b580      	push	{r7, lr}
200006b2:	b082      	sub	sp, #8
200006b4:	af00      	add	r7, sp, #0
200006b6:	0002      	movs	r2, r0
200006b8:	1dfb      	adds	r3, r7, #7
200006ba:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) BDCR_RTCEN_BB = (uint32_t)NewState;
200006bc:	4b03      	ldr	r3, [pc, #12]	; (200006cc <RCC_RTCCLKCmd+0x1c>)
200006be:	1dfa      	adds	r2, r7, #7
200006c0:	7812      	ldrb	r2, [r2, #0]
200006c2:	601a      	str	r2, [r3, #0]
}
200006c4:	46c0      	nop			; (mov r8, r8)
200006c6:	46bd      	mov	sp, r7
200006c8:	b002      	add	sp, #8
200006ca:	bd80      	pop	{r7, pc}
200006cc:	42470e3c 	submi	r0, r7, #60, 28	; 0x3c0

200006d0 <RCC_BackupResetCmd>:
  * @param  NewState: new state of the Backup domain reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_BackupResetCmd(FunctionalState NewState)
{
200006d0:	b580      	push	{r7, lr}
200006d2:	b082      	sub	sp, #8
200006d4:	af00      	add	r7, sp, #0
200006d6:	0002      	movs	r2, r0
200006d8:	1dfb      	adds	r3, r7, #7
200006da:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) BDCR_BDRST_BB = (uint32_t)NewState;
200006dc:	4b03      	ldr	r3, [pc, #12]	; (200006ec <RCC_BackupResetCmd+0x1c>)
200006de:	1dfa      	adds	r2, r7, #7
200006e0:	7812      	ldrb	r2, [r2, #0]
200006e2:	601a      	str	r2, [r3, #0]
}
200006e4:	46c0      	nop			; (mov r8, r8)
200006e6:	46bd      	mov	sp, r7
200006e8:	b002      	add	sp, #8
200006ea:	bd80      	pop	{r7, pc}
200006ec:	42470e40 	submi	r0, r7, #64, 28	; 0x400

200006f0 <RCC_I2SCLKConfig>:
  *            @arg RCC_I2S2CLKSource_Ext: External clock mapped on the I2S_CKIN pin
  *                                        used as I2S clock source
  * @retval None
  */
void RCC_I2SCLKConfig(uint32_t RCC_I2SCLKSource)
{
200006f0:	b580      	push	{r7, lr}
200006f2:	b082      	sub	sp, #8
200006f4:	af00      	add	r7, sp, #0
200006f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_I2SCLK_SOURCE(RCC_I2SCLKSource));

  *(__IO uint32_t *) CFGR_I2SSRC_BB = RCC_I2SCLKSource;  
200006f8:	4b03      	ldr	r3, [pc, #12]	; (20000708 <RCC_I2SCLKConfig+0x18>)
200006fa:	687a      	ldr	r2, [r7, #4]
200006fc:	601a      	str	r2, [r3, #0]
}
200006fe:	46c0      	nop			; (mov r8, r8)
20000700:	46bd      	mov	sp, r7
20000702:	b002      	add	sp, #8
20000704:	bd80      	pop	{r7, pc}
20000706:	46c0      	nop			; (mov r8, r8)
20000708:	4247015c 	submi	r0, r7, #92, 2

2000070c <RCC_SAIBlockACLKConfig>:
  *            @arg RCC_SAIACLKSource_Ext: External clock mapped on the I2S_CKIN pin
  *                                        used as SAI1 Block A clock
  * @retval None
  */
void RCC_SAIBlockACLKConfig(uint32_t RCC_SAIBlockACLKSource)
{
2000070c:	b580      	push	{r7, lr}
2000070e:	b084      	sub	sp, #16
20000710:	af00      	add	r7, sp, #0
20000712:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
20000714:	2300      	movs	r3, #0
20000716:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_SAIACLK_SOURCE(RCC_SAIBlockACLKSource));
  
  tmpreg = RCC->DCKCFGR;
20000718:	4a09      	ldr	r2, [pc, #36]	; (20000740 <RCC_SAIBlockACLKConfig+0x34>)
2000071a:	238c      	movs	r3, #140	; 0x8c
2000071c:	58d3      	ldr	r3, [r2, r3]
2000071e:	60fb      	str	r3, [r7, #12]

  /* Clear RCC_DCKCFGR_SAI1ASRC[1:0] bits */
  tmpreg &= ~RCC_DCKCFGR_SAI1ASRC;
20000720:	68fb      	ldr	r3, [r7, #12]
20000722:	4a08      	ldr	r2, [pc, #32]	; (20000744 <RCC_SAIBlockACLKConfig+0x38>)
20000724:	4013      	ands	r3, r2
20000726:	60fb      	str	r3, [r7, #12]

  /* Set SAI Block A source selection value */
  tmpreg |= RCC_SAIBlockACLKSource;
20000728:	68fa      	ldr	r2, [r7, #12]
2000072a:	687b      	ldr	r3, [r7, #4]
2000072c:	4313      	orrs	r3, r2
2000072e:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->DCKCFGR = tmpreg;
20000730:	4903      	ldr	r1, [pc, #12]	; (20000740 <RCC_SAIBlockACLKConfig+0x34>)
20000732:	228c      	movs	r2, #140	; 0x8c
20000734:	68fb      	ldr	r3, [r7, #12]
20000736:	508b      	str	r3, [r1, r2]
}
20000738:	46c0      	nop			; (mov r8, r8)
2000073a:	46bd      	mov	sp, r7
2000073c:	b004      	add	sp, #16
2000073e:	bd80      	pop	{r7, pc}
20000740:	40023800 	andmi	r3, r2, r0, lsl #16
20000744:	ffcfffff 			; <UNDEFINED> instruction: 0xffcfffff

20000748 <RCC_SAIBlockBCLKConfig>:
  *            @arg RCC_SAIBCLKSource_Ext: External clock mapped on the I2S_CKIN pin
  *                                        used as SAI1 Block B clock
  * @retval None
  */
void RCC_SAIBlockBCLKConfig(uint32_t RCC_SAIBlockBCLKSource)
{
20000748:	b580      	push	{r7, lr}
2000074a:	b084      	sub	sp, #16
2000074c:	af00      	add	r7, sp, #0
2000074e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
20000750:	2300      	movs	r3, #0
20000752:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_SAIBCLK_SOURCE(RCC_SAIBlockBCLKSource));
  
  tmpreg = RCC->DCKCFGR;
20000754:	4a09      	ldr	r2, [pc, #36]	; (2000077c <RCC_SAIBlockBCLKConfig+0x34>)
20000756:	238c      	movs	r3, #140	; 0x8c
20000758:	58d3      	ldr	r3, [r2, r3]
2000075a:	60fb      	str	r3, [r7, #12]

  /* Clear RCC_DCKCFGR_SAI1BSRC[1:0] bits */
  tmpreg &= ~RCC_DCKCFGR_SAI1BSRC;
2000075c:	68fb      	ldr	r3, [r7, #12]
2000075e:	4a08      	ldr	r2, [pc, #32]	; (20000780 <RCC_SAIBlockBCLKConfig+0x38>)
20000760:	4013      	ands	r3, r2
20000762:	60fb      	str	r3, [r7, #12]

  /* Set SAI Block B source selection value */
  tmpreg |= RCC_SAIBlockBCLKSource;
20000764:	68fa      	ldr	r2, [r7, #12]
20000766:	687b      	ldr	r3, [r7, #4]
20000768:	4313      	orrs	r3, r2
2000076a:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->DCKCFGR = tmpreg;
2000076c:	4903      	ldr	r1, [pc, #12]	; (2000077c <RCC_SAIBlockBCLKConfig+0x34>)
2000076e:	228c      	movs	r2, #140	; 0x8c
20000770:	68fb      	ldr	r3, [r7, #12]
20000772:	508b      	str	r3, [r1, r2]
}
20000774:	46c0      	nop			; (mov r8, r8)
20000776:	46bd      	mov	sp, r7
20000778:	b004      	add	sp, #16
2000077a:	bd80      	pop	{r7, pc}
2000077c:	40023800 	andmi	r3, r2, r0, lsl #16
20000780:	ff3fffff 			; <UNDEFINED> instruction: 0xff3fffff

20000784 <RCC_SAIPLLI2SClkDivConfig>:
  *          SAI1 clock frequency = f(PLLI2S_Q) / RCC_PLLI2SDivQ 
  *              
  * @retval None
  */
void RCC_SAIPLLI2SClkDivConfig(uint32_t RCC_PLLI2SDivQ)  
{
20000784:	b580      	push	{r7, lr}
20000786:	b084      	sub	sp, #16
20000788:	af00      	add	r7, sp, #0
2000078a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
2000078c:	2300      	movs	r3, #0
2000078e:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(RCC_PLLI2SDivQ));
  
  tmpreg = RCC->DCKCFGR;
20000790:	4a0a      	ldr	r2, [pc, #40]	; (200007bc <RCC_SAIPLLI2SClkDivConfig+0x38>)
20000792:	238c      	movs	r3, #140	; 0x8c
20000794:	58d3      	ldr	r3, [r2, r3]
20000796:	60fb      	str	r3, [r7, #12]

  /* Clear PLLI2SDIVQ[4:0] bits */
  tmpreg &= ~(RCC_DCKCFGR_PLLI2SDIVQ);
20000798:	68fb      	ldr	r3, [r7, #12]
2000079a:	221f      	movs	r2, #31
2000079c:	4393      	bics	r3, r2
2000079e:	60fb      	str	r3, [r7, #12]

  /* Set PLLI2SDIVQ values */
  tmpreg |= (RCC_PLLI2SDivQ - 1);
200007a0:	687b      	ldr	r3, [r7, #4]
200007a2:	3b01      	subs	r3, #1
200007a4:	68fa      	ldr	r2, [r7, #12]
200007a6:	4313      	orrs	r3, r2
200007a8:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->DCKCFGR = tmpreg;
200007aa:	4904      	ldr	r1, [pc, #16]	; (200007bc <RCC_SAIPLLI2SClkDivConfig+0x38>)
200007ac:	228c      	movs	r2, #140	; 0x8c
200007ae:	68fb      	ldr	r3, [r7, #12]
200007b0:	508b      	str	r3, [r1, r2]
}
200007b2:	46c0      	nop			; (mov r8, r8)
200007b4:	46bd      	mov	sp, r7
200007b6:	b004      	add	sp, #16
200007b8:	bd80      	pop	{r7, pc}
200007ba:	46c0      	nop			; (mov r8, r8)
200007bc:	40023800 	andmi	r3, r2, r0, lsl #16

200007c0 <RCC_SAIPLLSAIClkDivConfig>:
  *          SAI1 clock frequency = f(PLLSAI_Q) / RCC_PLLSAIDivQ  
  *              
  * @retval None
  */
void RCC_SAIPLLSAIClkDivConfig(uint32_t RCC_PLLSAIDivQ)  
{
200007c0:	b580      	push	{r7, lr}
200007c2:	b084      	sub	sp, #16
200007c4:	af00      	add	r7, sp, #0
200007c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
200007c8:	2300      	movs	r3, #0
200007ca:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(RCC_PLLSAIDivQ));
  
  tmpreg = RCC->DCKCFGR;
200007cc:	4a0a      	ldr	r2, [pc, #40]	; (200007f8 <RCC_SAIPLLSAIClkDivConfig+0x38>)
200007ce:	238c      	movs	r3, #140	; 0x8c
200007d0:	58d3      	ldr	r3, [r2, r3]
200007d2:	60fb      	str	r3, [r7, #12]

  /* Clear PLLI2SDIVQ[4:0] and PLLSAIDIVQ[4:0] bits */
  tmpreg &= ~(RCC_DCKCFGR_PLLSAIDIVQ);
200007d4:	68fb      	ldr	r3, [r7, #12]
200007d6:	4a09      	ldr	r2, [pc, #36]	; (200007fc <RCC_SAIPLLSAIClkDivConfig+0x3c>)
200007d8:	4013      	ands	r3, r2
200007da:	60fb      	str	r3, [r7, #12]

  /* Set PLLSAIDIVQ values */
  tmpreg |= ((RCC_PLLSAIDivQ - 1) << 8);
200007dc:	687b      	ldr	r3, [r7, #4]
200007de:	3b01      	subs	r3, #1
200007e0:	021b      	lsls	r3, r3, #8
200007e2:	68fa      	ldr	r2, [r7, #12]
200007e4:	4313      	orrs	r3, r2
200007e6:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->DCKCFGR = tmpreg;
200007e8:	4903      	ldr	r1, [pc, #12]	; (200007f8 <RCC_SAIPLLSAIClkDivConfig+0x38>)
200007ea:	228c      	movs	r2, #140	; 0x8c
200007ec:	68fb      	ldr	r3, [r7, #12]
200007ee:	508b      	str	r3, [r1, r2]
}
200007f0:	46c0      	nop			; (mov r8, r8)
200007f2:	46bd      	mov	sp, r7
200007f4:	b004      	add	sp, #16
200007f6:	bd80      	pop	{r7, pc}
200007f8:	40023800 	andmi	r3, r2, r0, lsl #16
200007fc:	ffffe0ff 			; <UNDEFINED> instruction: 0xffffe0ff

20000800 <RCC_LTDCCLKDivConfig>:
  *            @arg RCC_PLLSAIDivR_Div16: LTDC clock = f(PLLSAI_R)/16
  *            
  * @retval None
  */
void RCC_LTDCCLKDivConfig(uint32_t RCC_PLLSAIDivR)
{
20000800:	b580      	push	{r7, lr}
20000802:	b084      	sub	sp, #16
20000804:	af00      	add	r7, sp, #0
20000806:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
20000808:	2300      	movs	r3, #0
2000080a:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_PLLSAI_DIVR_VALUE(RCC_PLLSAIDivR));
  
  tmpreg = RCC->DCKCFGR;
2000080c:	4a09      	ldr	r2, [pc, #36]	; (20000834 <RCC_LTDCCLKDivConfig+0x34>)
2000080e:	238c      	movs	r3, #140	; 0x8c
20000810:	58d3      	ldr	r3, [r2, r3]
20000812:	60fb      	str	r3, [r7, #12]

  /* Clear PLLSAIDIVR[2:0] bits */
  tmpreg &= ~RCC_DCKCFGR_PLLSAIDIVR;
20000814:	68fb      	ldr	r3, [r7, #12]
20000816:	4a08      	ldr	r2, [pc, #32]	; (20000838 <RCC_LTDCCLKDivConfig+0x38>)
20000818:	4013      	ands	r3, r2
2000081a:	60fb      	str	r3, [r7, #12]

  /* Set PLLSAIDIVR values */
  tmpreg |= RCC_PLLSAIDivR;
2000081c:	68fa      	ldr	r2, [r7, #12]
2000081e:	687b      	ldr	r3, [r7, #4]
20000820:	4313      	orrs	r3, r2
20000822:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->DCKCFGR = tmpreg;
20000824:	4903      	ldr	r1, [pc, #12]	; (20000834 <RCC_LTDCCLKDivConfig+0x34>)
20000826:	228c      	movs	r2, #140	; 0x8c
20000828:	68fb      	ldr	r3, [r7, #12]
2000082a:	508b      	str	r3, [r1, r2]
}
2000082c:	46c0      	nop			; (mov r8, r8)
2000082e:	46bd      	mov	sp, r7
20000830:	b004      	add	sp, #16
20000832:	bd80      	pop	{r7, pc}
20000834:	40023800 	andmi	r3, r2, r0, lsl #16
20000838:	fffcffff 			; <UNDEFINED> instruction: 0xfffcffff

2000083c <RCC_TIMCLKPresConfig>:
  *                 else it is equal to [(HPRE * PPREx) / 4] if PPREx is corresponding 
  *                 to division by 8 or more.
  * @retval None
  */
void RCC_TIMCLKPresConfig(uint32_t RCC_TIMCLKPrescaler)
{
2000083c:	b580      	push	{r7, lr}
2000083e:	b082      	sub	sp, #8
20000840:	af00      	add	r7, sp, #0
20000842:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_TIMCLK_PRESCALER(RCC_TIMCLKPrescaler));

  *(__IO uint32_t *) DCKCFGR_TIMPRE_BB = RCC_TIMCLKPrescaler;
20000844:	4b03      	ldr	r3, [pc, #12]	; (20000854 <RCC_TIMCLKPresConfig+0x18>)
20000846:	687a      	ldr	r2, [r7, #4]
20000848:	601a      	str	r2, [r3, #0]
}
2000084a:	46c0      	nop			; (mov r8, r8)
2000084c:	46bd      	mov	sp, r7
2000084e:	b002      	add	sp, #8
20000850:	bd80      	pop	{r7, pc}
20000852:	46c0      	nop			; (mov r8, r8)
20000854:	424711e0 	submi	r1, r7, #224, 2	; 0x38

20000858 <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
20000858:	b580      	push	{r7, lr}
2000085a:	b082      	sub	sp, #8
2000085c:	af00      	add	r7, sp, #0
2000085e:	6078      	str	r0, [r7, #4]
20000860:	000a      	movs	r2, r1
20000862:	1cfb      	adds	r3, r7, #3
20000864:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
20000866:	1cfb      	adds	r3, r7, #3
20000868:	781b      	ldrb	r3, [r3, #0]
2000086a:	2b00      	cmp	r3, #0
2000086c:	d006      	beq.n	2000087c <RCC_AHB1PeriphClockCmd+0x24>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
2000086e:	4b09      	ldr	r3, [pc, #36]	; (20000894 <RCC_AHB1PeriphClockCmd+0x3c>)
20000870:	6b19      	ldr	r1, [r3, #48]	; 0x30
20000872:	4b08      	ldr	r3, [pc, #32]	; (20000894 <RCC_AHB1PeriphClockCmd+0x3c>)
20000874:	687a      	ldr	r2, [r7, #4]
20000876:	430a      	orrs	r2, r1
20000878:	631a      	str	r2, [r3, #48]	; 0x30
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
  }
}
2000087a:	e006      	b.n	2000088a <RCC_AHB1PeriphClockCmd+0x32>
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
2000087c:	4b05      	ldr	r3, [pc, #20]	; (20000894 <RCC_AHB1PeriphClockCmd+0x3c>)
2000087e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
20000880:	687b      	ldr	r3, [r7, #4]
20000882:	43d9      	mvns	r1, r3
20000884:	4b03      	ldr	r3, [pc, #12]	; (20000894 <RCC_AHB1PeriphClockCmd+0x3c>)
20000886:	400a      	ands	r2, r1
20000888:	631a      	str	r2, [r3, #48]	; 0x30
}
2000088a:	46c0      	nop			; (mov r8, r8)
2000088c:	46bd      	mov	sp, r7
2000088e:	b002      	add	sp, #8
20000890:	bd80      	pop	{r7, pc}
20000892:	46c0      	nop			; (mov r8, r8)
20000894:	40023800 	andmi	r3, r2, r0, lsl #16

20000898 <RCC_AHB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB2PeriphClockCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
{
20000898:	b580      	push	{r7, lr}
2000089a:	b082      	sub	sp, #8
2000089c:	af00      	add	r7, sp, #0
2000089e:	6078      	str	r0, [r7, #4]
200008a0:	000a      	movs	r2, r1
200008a2:	1cfb      	adds	r3, r7, #3
200008a4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
200008a6:	1cfb      	adds	r3, r7, #3
200008a8:	781b      	ldrb	r3, [r3, #0]
200008aa:	2b00      	cmp	r3, #0
200008ac:	d006      	beq.n	200008bc <RCC_AHB2PeriphClockCmd+0x24>
  {
    RCC->AHB2ENR |= RCC_AHB2Periph;
200008ae:	4b09      	ldr	r3, [pc, #36]	; (200008d4 <RCC_AHB2PeriphClockCmd+0x3c>)
200008b0:	6b59      	ldr	r1, [r3, #52]	; 0x34
200008b2:	4b08      	ldr	r3, [pc, #32]	; (200008d4 <RCC_AHB2PeriphClockCmd+0x3c>)
200008b4:	687a      	ldr	r2, [r7, #4]
200008b6:	430a      	orrs	r2, r1
200008b8:	635a      	str	r2, [r3, #52]	; 0x34
  }
  else
  {
    RCC->AHB2ENR &= ~RCC_AHB2Periph;
  }
}
200008ba:	e006      	b.n	200008ca <RCC_AHB2PeriphClockCmd+0x32>
    RCC->AHB2ENR &= ~RCC_AHB2Periph;
200008bc:	4b05      	ldr	r3, [pc, #20]	; (200008d4 <RCC_AHB2PeriphClockCmd+0x3c>)
200008be:	6b5a      	ldr	r2, [r3, #52]	; 0x34
200008c0:	687b      	ldr	r3, [r7, #4]
200008c2:	43d9      	mvns	r1, r3
200008c4:	4b03      	ldr	r3, [pc, #12]	; (200008d4 <RCC_AHB2PeriphClockCmd+0x3c>)
200008c6:	400a      	ands	r2, r1
200008c8:	635a      	str	r2, [r3, #52]	; 0x34
}
200008ca:	46c0      	nop			; (mov r8, r8)
200008cc:	46bd      	mov	sp, r7
200008ce:	b002      	add	sp, #8
200008d0:	bd80      	pop	{r7, pc}
200008d2:	46c0      	nop			; (mov r8, r8)
200008d4:	40023800 	andmi	r3, r2, r0, lsl #16

200008d8 <RCC_AHB3PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB3PeriphClockCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
{
200008d8:	b580      	push	{r7, lr}
200008da:	b082      	sub	sp, #8
200008dc:	af00      	add	r7, sp, #0
200008de:	6078      	str	r0, [r7, #4]
200008e0:	000a      	movs	r2, r1
200008e2:	1cfb      	adds	r3, r7, #3
200008e4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
200008e6:	1cfb      	adds	r3, r7, #3
200008e8:	781b      	ldrb	r3, [r3, #0]
200008ea:	2b00      	cmp	r3, #0
200008ec:	d006      	beq.n	200008fc <RCC_AHB3PeriphClockCmd+0x24>
  {
    RCC->AHB3ENR |= RCC_AHB3Periph;
200008ee:	4b09      	ldr	r3, [pc, #36]	; (20000914 <RCC_AHB3PeriphClockCmd+0x3c>)
200008f0:	6b99      	ldr	r1, [r3, #56]	; 0x38
200008f2:	4b08      	ldr	r3, [pc, #32]	; (20000914 <RCC_AHB3PeriphClockCmd+0x3c>)
200008f4:	687a      	ldr	r2, [r7, #4]
200008f6:	430a      	orrs	r2, r1
200008f8:	639a      	str	r2, [r3, #56]	; 0x38
  }
  else
  {
    RCC->AHB3ENR &= ~RCC_AHB3Periph;
  }
}
200008fa:	e006      	b.n	2000090a <RCC_AHB3PeriphClockCmd+0x32>
    RCC->AHB3ENR &= ~RCC_AHB3Periph;
200008fc:	4b05      	ldr	r3, [pc, #20]	; (20000914 <RCC_AHB3PeriphClockCmd+0x3c>)
200008fe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
20000900:	687b      	ldr	r3, [r7, #4]
20000902:	43d9      	mvns	r1, r3
20000904:	4b03      	ldr	r3, [pc, #12]	; (20000914 <RCC_AHB3PeriphClockCmd+0x3c>)
20000906:	400a      	ands	r2, r1
20000908:	639a      	str	r2, [r3, #56]	; 0x38
}
2000090a:	46c0      	nop			; (mov r8, r8)
2000090c:	46bd      	mov	sp, r7
2000090e:	b002      	add	sp, #8
20000910:	bd80      	pop	{r7, pc}
20000912:	46c0      	nop			; (mov r8, r8)
20000914:	40023800 	andmi	r3, r2, r0, lsl #16

20000918 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
20000918:	b580      	push	{r7, lr}
2000091a:	b082      	sub	sp, #8
2000091c:	af00      	add	r7, sp, #0
2000091e:	6078      	str	r0, [r7, #4]
20000920:	000a      	movs	r2, r1
20000922:	1cfb      	adds	r3, r7, #3
20000924:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
20000926:	1cfb      	adds	r3, r7, #3
20000928:	781b      	ldrb	r3, [r3, #0]
2000092a:	2b00      	cmp	r3, #0
2000092c:	d006      	beq.n	2000093c <RCC_APB1PeriphClockCmd+0x24>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
2000092e:	4b09      	ldr	r3, [pc, #36]	; (20000954 <RCC_APB1PeriphClockCmd+0x3c>)
20000930:	6c19      	ldr	r1, [r3, #64]	; 0x40
20000932:	4b08      	ldr	r3, [pc, #32]	; (20000954 <RCC_APB1PeriphClockCmd+0x3c>)
20000934:	687a      	ldr	r2, [r7, #4]
20000936:	430a      	orrs	r2, r1
20000938:	641a      	str	r2, [r3, #64]	; 0x40
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
2000093a:	e006      	b.n	2000094a <RCC_APB1PeriphClockCmd+0x32>
    RCC->APB1ENR &= ~RCC_APB1Periph;
2000093c:	4b05      	ldr	r3, [pc, #20]	; (20000954 <RCC_APB1PeriphClockCmd+0x3c>)
2000093e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
20000940:	687b      	ldr	r3, [r7, #4]
20000942:	43d9      	mvns	r1, r3
20000944:	4b03      	ldr	r3, [pc, #12]	; (20000954 <RCC_APB1PeriphClockCmd+0x3c>)
20000946:	400a      	ands	r2, r1
20000948:	641a      	str	r2, [r3, #64]	; 0x40
}
2000094a:	46c0      	nop			; (mov r8, r8)
2000094c:	46bd      	mov	sp, r7
2000094e:	b002      	add	sp, #8
20000950:	bd80      	pop	{r7, pc}
20000952:	46c0      	nop			; (mov r8, r8)
20000954:	40023800 	andmi	r3, r2, r0, lsl #16

20000958 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
20000958:	b580      	push	{r7, lr}
2000095a:	b082      	sub	sp, #8
2000095c:	af00      	add	r7, sp, #0
2000095e:	6078      	str	r0, [r7, #4]
20000960:	000a      	movs	r2, r1
20000962:	1cfb      	adds	r3, r7, #3
20000964:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
20000966:	1cfb      	adds	r3, r7, #3
20000968:	781b      	ldrb	r3, [r3, #0]
2000096a:	2b00      	cmp	r3, #0
2000096c:	d006      	beq.n	2000097c <RCC_APB2PeriphClockCmd+0x24>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
2000096e:	4b09      	ldr	r3, [pc, #36]	; (20000994 <RCC_APB2PeriphClockCmd+0x3c>)
20000970:	6c59      	ldr	r1, [r3, #68]	; 0x44
20000972:	4b08      	ldr	r3, [pc, #32]	; (20000994 <RCC_APB2PeriphClockCmd+0x3c>)
20000974:	687a      	ldr	r2, [r7, #4]
20000976:	430a      	orrs	r2, r1
20000978:	645a      	str	r2, [r3, #68]	; 0x44
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
2000097a:	e006      	b.n	2000098a <RCC_APB2PeriphClockCmd+0x32>
    RCC->APB2ENR &= ~RCC_APB2Periph;
2000097c:	4b05      	ldr	r3, [pc, #20]	; (20000994 <RCC_APB2PeriphClockCmd+0x3c>)
2000097e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
20000980:	687b      	ldr	r3, [r7, #4]
20000982:	43d9      	mvns	r1, r3
20000984:	4b03      	ldr	r3, [pc, #12]	; (20000994 <RCC_APB2PeriphClockCmd+0x3c>)
20000986:	400a      	ands	r2, r1
20000988:	645a      	str	r2, [r3, #68]	; 0x44
}
2000098a:	46c0      	nop			; (mov r8, r8)
2000098c:	46bd      	mov	sp, r7
2000098e:	b002      	add	sp, #8
20000990:	bd80      	pop	{r7, pc}
20000992:	46c0      	nop			; (mov r8, r8)
20000994:	40023800 	andmi	r3, r2, r0, lsl #16

20000998 <RCC_AHB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphResetCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
20000998:	b580      	push	{r7, lr}
2000099a:	b082      	sub	sp, #8
2000099c:	af00      	add	r7, sp, #0
2000099e:	6078      	str	r0, [r7, #4]
200009a0:	000a      	movs	r2, r1
200009a2:	1cfb      	adds	r3, r7, #3
200009a4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_RESET_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
200009a6:	1cfb      	adds	r3, r7, #3
200009a8:	781b      	ldrb	r3, [r3, #0]
200009aa:	2b00      	cmp	r3, #0
200009ac:	d006      	beq.n	200009bc <RCC_AHB1PeriphResetCmd+0x24>
  {
    RCC->AHB1RSTR |= RCC_AHB1Periph;
200009ae:	4b09      	ldr	r3, [pc, #36]	; (200009d4 <RCC_AHB1PeriphResetCmd+0x3c>)
200009b0:	6919      	ldr	r1, [r3, #16]
200009b2:	4b08      	ldr	r3, [pc, #32]	; (200009d4 <RCC_AHB1PeriphResetCmd+0x3c>)
200009b4:	687a      	ldr	r2, [r7, #4]
200009b6:	430a      	orrs	r2, r1
200009b8:	611a      	str	r2, [r3, #16]
  }
  else
  {
    RCC->AHB1RSTR &= ~RCC_AHB1Periph;
  }
}
200009ba:	e006      	b.n	200009ca <RCC_AHB1PeriphResetCmd+0x32>
    RCC->AHB1RSTR &= ~RCC_AHB1Periph;
200009bc:	4b05      	ldr	r3, [pc, #20]	; (200009d4 <RCC_AHB1PeriphResetCmd+0x3c>)
200009be:	691a      	ldr	r2, [r3, #16]
200009c0:	687b      	ldr	r3, [r7, #4]
200009c2:	43d9      	mvns	r1, r3
200009c4:	4b03      	ldr	r3, [pc, #12]	; (200009d4 <RCC_AHB1PeriphResetCmd+0x3c>)
200009c6:	400a      	ands	r2, r1
200009c8:	611a      	str	r2, [r3, #16]
}
200009ca:	46c0      	nop			; (mov r8, r8)
200009cc:	46bd      	mov	sp, r7
200009ce:	b002      	add	sp, #8
200009d0:	bd80      	pop	{r7, pc}
200009d2:	46c0      	nop			; (mov r8, r8)
200009d4:	40023800 	andmi	r3, r2, r0, lsl #16

200009d8 <RCC_AHB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB2PeriphResetCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
{
200009d8:	b580      	push	{r7, lr}
200009da:	b082      	sub	sp, #8
200009dc:	af00      	add	r7, sp, #0
200009de:	6078      	str	r0, [r7, #4]
200009e0:	000a      	movs	r2, r1
200009e2:	1cfb      	adds	r3, r7, #3
200009e4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
200009e6:	1cfb      	adds	r3, r7, #3
200009e8:	781b      	ldrb	r3, [r3, #0]
200009ea:	2b00      	cmp	r3, #0
200009ec:	d006      	beq.n	200009fc <RCC_AHB2PeriphResetCmd+0x24>
  {
    RCC->AHB2RSTR |= RCC_AHB2Periph;
200009ee:	4b09      	ldr	r3, [pc, #36]	; (20000a14 <RCC_AHB2PeriphResetCmd+0x3c>)
200009f0:	6959      	ldr	r1, [r3, #20]
200009f2:	4b08      	ldr	r3, [pc, #32]	; (20000a14 <RCC_AHB2PeriphResetCmd+0x3c>)
200009f4:	687a      	ldr	r2, [r7, #4]
200009f6:	430a      	orrs	r2, r1
200009f8:	615a      	str	r2, [r3, #20]
  }
  else
  {
    RCC->AHB2RSTR &= ~RCC_AHB2Periph;
  }
}
200009fa:	e006      	b.n	20000a0a <RCC_AHB2PeriphResetCmd+0x32>
    RCC->AHB2RSTR &= ~RCC_AHB2Periph;
200009fc:	4b05      	ldr	r3, [pc, #20]	; (20000a14 <RCC_AHB2PeriphResetCmd+0x3c>)
200009fe:	695a      	ldr	r2, [r3, #20]
20000a00:	687b      	ldr	r3, [r7, #4]
20000a02:	43d9      	mvns	r1, r3
20000a04:	4b03      	ldr	r3, [pc, #12]	; (20000a14 <RCC_AHB2PeriphResetCmd+0x3c>)
20000a06:	400a      	ands	r2, r1
20000a08:	615a      	str	r2, [r3, #20]
}
20000a0a:	46c0      	nop			; (mov r8, r8)
20000a0c:	46bd      	mov	sp, r7
20000a0e:	b002      	add	sp, #8
20000a10:	bd80      	pop	{r7, pc}
20000a12:	46c0      	nop			; (mov r8, r8)
20000a14:	40023800 	andmi	r3, r2, r0, lsl #16

20000a18 <RCC_AHB3PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB3PeriphResetCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
{
20000a18:	b580      	push	{r7, lr}
20000a1a:	b082      	sub	sp, #8
20000a1c:	af00      	add	r7, sp, #0
20000a1e:	6078      	str	r0, [r7, #4]
20000a20:	000a      	movs	r2, r1
20000a22:	1cfb      	adds	r3, r7, #3
20000a24:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
20000a26:	1cfb      	adds	r3, r7, #3
20000a28:	781b      	ldrb	r3, [r3, #0]
20000a2a:	2b00      	cmp	r3, #0
20000a2c:	d006      	beq.n	20000a3c <RCC_AHB3PeriphResetCmd+0x24>
  {
    RCC->AHB3RSTR |= RCC_AHB3Periph;
20000a2e:	4b09      	ldr	r3, [pc, #36]	; (20000a54 <RCC_AHB3PeriphResetCmd+0x3c>)
20000a30:	6999      	ldr	r1, [r3, #24]
20000a32:	4b08      	ldr	r3, [pc, #32]	; (20000a54 <RCC_AHB3PeriphResetCmd+0x3c>)
20000a34:	687a      	ldr	r2, [r7, #4]
20000a36:	430a      	orrs	r2, r1
20000a38:	619a      	str	r2, [r3, #24]
  }
  else
  {
    RCC->AHB3RSTR &= ~RCC_AHB3Periph;
  }
}
20000a3a:	e006      	b.n	20000a4a <RCC_AHB3PeriphResetCmd+0x32>
    RCC->AHB3RSTR &= ~RCC_AHB3Periph;
20000a3c:	4b05      	ldr	r3, [pc, #20]	; (20000a54 <RCC_AHB3PeriphResetCmd+0x3c>)
20000a3e:	699a      	ldr	r2, [r3, #24]
20000a40:	687b      	ldr	r3, [r7, #4]
20000a42:	43d9      	mvns	r1, r3
20000a44:	4b03      	ldr	r3, [pc, #12]	; (20000a54 <RCC_AHB3PeriphResetCmd+0x3c>)
20000a46:	400a      	ands	r2, r1
20000a48:	619a      	str	r2, [r3, #24]
}
20000a4a:	46c0      	nop			; (mov r8, r8)
20000a4c:	46bd      	mov	sp, r7
20000a4e:	b002      	add	sp, #8
20000a50:	bd80      	pop	{r7, pc}
20000a52:	46c0      	nop			; (mov r8, r8)
20000a54:	40023800 	andmi	r3, r2, r0, lsl #16

20000a58 <RCC_APB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
20000a58:	b580      	push	{r7, lr}
20000a5a:	b082      	sub	sp, #8
20000a5c:	af00      	add	r7, sp, #0
20000a5e:	6078      	str	r0, [r7, #4]
20000a60:	000a      	movs	r2, r1
20000a62:	1cfb      	adds	r3, r7, #3
20000a64:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
20000a66:	1cfb      	adds	r3, r7, #3
20000a68:	781b      	ldrb	r3, [r3, #0]
20000a6a:	2b00      	cmp	r3, #0
20000a6c:	d006      	beq.n	20000a7c <RCC_APB1PeriphResetCmd+0x24>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
20000a6e:	4b09      	ldr	r3, [pc, #36]	; (20000a94 <RCC_APB1PeriphResetCmd+0x3c>)
20000a70:	6a19      	ldr	r1, [r3, #32]
20000a72:	4b08      	ldr	r3, [pc, #32]	; (20000a94 <RCC_APB1PeriphResetCmd+0x3c>)
20000a74:	687a      	ldr	r2, [r7, #4]
20000a76:	430a      	orrs	r2, r1
20000a78:	621a      	str	r2, [r3, #32]
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
  }
}
20000a7a:	e006      	b.n	20000a8a <RCC_APB1PeriphResetCmd+0x32>
    RCC->APB1RSTR &= ~RCC_APB1Periph;
20000a7c:	4b05      	ldr	r3, [pc, #20]	; (20000a94 <RCC_APB1PeriphResetCmd+0x3c>)
20000a7e:	6a1a      	ldr	r2, [r3, #32]
20000a80:	687b      	ldr	r3, [r7, #4]
20000a82:	43d9      	mvns	r1, r3
20000a84:	4b03      	ldr	r3, [pc, #12]	; (20000a94 <RCC_APB1PeriphResetCmd+0x3c>)
20000a86:	400a      	ands	r2, r1
20000a88:	621a      	str	r2, [r3, #32]
}
20000a8a:	46c0      	nop			; (mov r8, r8)
20000a8c:	46bd      	mov	sp, r7
20000a8e:	b002      	add	sp, #8
20000a90:	bd80      	pop	{r7, pc}
20000a92:	46c0      	nop			; (mov r8, r8)
20000a94:	40023800 	andmi	r3, r2, r0, lsl #16

20000a98 <RCC_APB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
20000a98:	b580      	push	{r7, lr}
20000a9a:	b082      	sub	sp, #8
20000a9c:	af00      	add	r7, sp, #0
20000a9e:	6078      	str	r0, [r7, #4]
20000aa0:	000a      	movs	r2, r1
20000aa2:	1cfb      	adds	r3, r7, #3
20000aa4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_RESET_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
20000aa6:	1cfb      	adds	r3, r7, #3
20000aa8:	781b      	ldrb	r3, [r3, #0]
20000aaa:	2b00      	cmp	r3, #0
20000aac:	d006      	beq.n	20000abc <RCC_APB2PeriphResetCmd+0x24>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
20000aae:	4b09      	ldr	r3, [pc, #36]	; (20000ad4 <RCC_APB2PeriphResetCmd+0x3c>)
20000ab0:	6a59      	ldr	r1, [r3, #36]	; 0x24
20000ab2:	4b08      	ldr	r3, [pc, #32]	; (20000ad4 <RCC_APB2PeriphResetCmd+0x3c>)
20000ab4:	687a      	ldr	r2, [r7, #4]
20000ab6:	430a      	orrs	r2, r1
20000ab8:	625a      	str	r2, [r3, #36]	; 0x24
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
  }
}
20000aba:	e006      	b.n	20000aca <RCC_APB2PeriphResetCmd+0x32>
    RCC->APB2RSTR &= ~RCC_APB2Periph;
20000abc:	4b05      	ldr	r3, [pc, #20]	; (20000ad4 <RCC_APB2PeriphResetCmd+0x3c>)
20000abe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
20000ac0:	687b      	ldr	r3, [r7, #4]
20000ac2:	43d9      	mvns	r1, r3
20000ac4:	4b03      	ldr	r3, [pc, #12]	; (20000ad4 <RCC_APB2PeriphResetCmd+0x3c>)
20000ac6:	400a      	ands	r2, r1
20000ac8:	625a      	str	r2, [r3, #36]	; 0x24
}
20000aca:	46c0      	nop			; (mov r8, r8)
20000acc:	46bd      	mov	sp, r7
20000ace:	b002      	add	sp, #8
20000ad0:	bd80      	pop	{r7, pc}
20000ad2:	46c0      	nop			; (mov r8, r8)
20000ad4:	40023800 	andmi	r3, r2, r0, lsl #16

20000ad8 <RCC_AHB1PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockLPModeCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
20000ad8:	b580      	push	{r7, lr}
20000ada:	b082      	sub	sp, #8
20000adc:	af00      	add	r7, sp, #0
20000ade:	6078      	str	r0, [r7, #4]
20000ae0:	000a      	movs	r2, r1
20000ae2:	1cfb      	adds	r3, r7, #3
20000ae4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_LPMODE_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
20000ae6:	1cfb      	adds	r3, r7, #3
20000ae8:	781b      	ldrb	r3, [r3, #0]
20000aea:	2b00      	cmp	r3, #0
20000aec:	d006      	beq.n	20000afc <RCC_AHB1PeriphClockLPModeCmd+0x24>
  {
    RCC->AHB1LPENR |= RCC_AHB1Periph;
20000aee:	4b09      	ldr	r3, [pc, #36]	; (20000b14 <RCC_AHB1PeriphClockLPModeCmd+0x3c>)
20000af0:	6d19      	ldr	r1, [r3, #80]	; 0x50
20000af2:	4b08      	ldr	r3, [pc, #32]	; (20000b14 <RCC_AHB1PeriphClockLPModeCmd+0x3c>)
20000af4:	687a      	ldr	r2, [r7, #4]
20000af6:	430a      	orrs	r2, r1
20000af8:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    RCC->AHB1LPENR &= ~RCC_AHB1Periph;
  }
}
20000afa:	e006      	b.n	20000b0a <RCC_AHB1PeriphClockLPModeCmd+0x32>
    RCC->AHB1LPENR &= ~RCC_AHB1Periph;
20000afc:	4b05      	ldr	r3, [pc, #20]	; (20000b14 <RCC_AHB1PeriphClockLPModeCmd+0x3c>)
20000afe:	6d1a      	ldr	r2, [r3, #80]	; 0x50
20000b00:	687b      	ldr	r3, [r7, #4]
20000b02:	43d9      	mvns	r1, r3
20000b04:	4b03      	ldr	r3, [pc, #12]	; (20000b14 <RCC_AHB1PeriphClockLPModeCmd+0x3c>)
20000b06:	400a      	ands	r2, r1
20000b08:	651a      	str	r2, [r3, #80]	; 0x50
}
20000b0a:	46c0      	nop			; (mov r8, r8)
20000b0c:	46bd      	mov	sp, r7
20000b0e:	b002      	add	sp, #8
20000b10:	bd80      	pop	{r7, pc}
20000b12:	46c0      	nop			; (mov r8, r8)
20000b14:	40023800 	andmi	r3, r2, r0, lsl #16

20000b18 <RCC_AHB2PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB2PeriphClockLPModeCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
{
20000b18:	b580      	push	{r7, lr}
20000b1a:	b082      	sub	sp, #8
20000b1c:	af00      	add	r7, sp, #0
20000b1e:	6078      	str	r0, [r7, #4]
20000b20:	000a      	movs	r2, r1
20000b22:	1cfb      	adds	r3, r7, #3
20000b24:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
20000b26:	1cfb      	adds	r3, r7, #3
20000b28:	781b      	ldrb	r3, [r3, #0]
20000b2a:	2b00      	cmp	r3, #0
20000b2c:	d006      	beq.n	20000b3c <RCC_AHB2PeriphClockLPModeCmd+0x24>
  {
    RCC->AHB2LPENR |= RCC_AHB2Periph;
20000b2e:	4b09      	ldr	r3, [pc, #36]	; (20000b54 <RCC_AHB2PeriphClockLPModeCmd+0x3c>)
20000b30:	6d59      	ldr	r1, [r3, #84]	; 0x54
20000b32:	4b08      	ldr	r3, [pc, #32]	; (20000b54 <RCC_AHB2PeriphClockLPModeCmd+0x3c>)
20000b34:	687a      	ldr	r2, [r7, #4]
20000b36:	430a      	orrs	r2, r1
20000b38:	655a      	str	r2, [r3, #84]	; 0x54
  }
  else
  {
    RCC->AHB2LPENR &= ~RCC_AHB2Periph;
  }
}
20000b3a:	e006      	b.n	20000b4a <RCC_AHB2PeriphClockLPModeCmd+0x32>
    RCC->AHB2LPENR &= ~RCC_AHB2Periph;
20000b3c:	4b05      	ldr	r3, [pc, #20]	; (20000b54 <RCC_AHB2PeriphClockLPModeCmd+0x3c>)
20000b3e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
20000b40:	687b      	ldr	r3, [r7, #4]
20000b42:	43d9      	mvns	r1, r3
20000b44:	4b03      	ldr	r3, [pc, #12]	; (20000b54 <RCC_AHB2PeriphClockLPModeCmd+0x3c>)
20000b46:	400a      	ands	r2, r1
20000b48:	655a      	str	r2, [r3, #84]	; 0x54
}
20000b4a:	46c0      	nop			; (mov r8, r8)
20000b4c:	46bd      	mov	sp, r7
20000b4e:	b002      	add	sp, #8
20000b50:	bd80      	pop	{r7, pc}
20000b52:	46c0      	nop			; (mov r8, r8)
20000b54:	40023800 	andmi	r3, r2, r0, lsl #16

20000b58 <RCC_AHB3PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB3PeriphClockLPModeCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
{
20000b58:	b580      	push	{r7, lr}
20000b5a:	b082      	sub	sp, #8
20000b5c:	af00      	add	r7, sp, #0
20000b5e:	6078      	str	r0, [r7, #4]
20000b60:	000a      	movs	r2, r1
20000b62:	1cfb      	adds	r3, r7, #3
20000b64:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
20000b66:	1cfb      	adds	r3, r7, #3
20000b68:	781b      	ldrb	r3, [r3, #0]
20000b6a:	2b00      	cmp	r3, #0
20000b6c:	d006      	beq.n	20000b7c <RCC_AHB3PeriphClockLPModeCmd+0x24>
  {
    RCC->AHB3LPENR |= RCC_AHB3Periph;
20000b6e:	4b09      	ldr	r3, [pc, #36]	; (20000b94 <RCC_AHB3PeriphClockLPModeCmd+0x3c>)
20000b70:	6d99      	ldr	r1, [r3, #88]	; 0x58
20000b72:	4b08      	ldr	r3, [pc, #32]	; (20000b94 <RCC_AHB3PeriphClockLPModeCmd+0x3c>)
20000b74:	687a      	ldr	r2, [r7, #4]
20000b76:	430a      	orrs	r2, r1
20000b78:	659a      	str	r2, [r3, #88]	; 0x58
  }
  else
  {
    RCC->AHB3LPENR &= ~RCC_AHB3Periph;
  }
}
20000b7a:	e006      	b.n	20000b8a <RCC_AHB3PeriphClockLPModeCmd+0x32>
    RCC->AHB3LPENR &= ~RCC_AHB3Periph;
20000b7c:	4b05      	ldr	r3, [pc, #20]	; (20000b94 <RCC_AHB3PeriphClockLPModeCmd+0x3c>)
20000b7e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
20000b80:	687b      	ldr	r3, [r7, #4]
20000b82:	43d9      	mvns	r1, r3
20000b84:	4b03      	ldr	r3, [pc, #12]	; (20000b94 <RCC_AHB3PeriphClockLPModeCmd+0x3c>)
20000b86:	400a      	ands	r2, r1
20000b88:	659a      	str	r2, [r3, #88]	; 0x58
}
20000b8a:	46c0      	nop			; (mov r8, r8)
20000b8c:	46bd      	mov	sp, r7
20000b8e:	b002      	add	sp, #8
20000b90:	bd80      	pop	{r7, pc}
20000b92:	46c0      	nop			; (mov r8, r8)
20000b94:	40023800 	andmi	r3, r2, r0, lsl #16

20000b98 <RCC_APB1PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockLPModeCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
20000b98:	b580      	push	{r7, lr}
20000b9a:	b082      	sub	sp, #8
20000b9c:	af00      	add	r7, sp, #0
20000b9e:	6078      	str	r0, [r7, #4]
20000ba0:	000a      	movs	r2, r1
20000ba2:	1cfb      	adds	r3, r7, #3
20000ba4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
20000ba6:	1cfb      	adds	r3, r7, #3
20000ba8:	781b      	ldrb	r3, [r3, #0]
20000baa:	2b00      	cmp	r3, #0
20000bac:	d006      	beq.n	20000bbc <RCC_APB1PeriphClockLPModeCmd+0x24>
  {
    RCC->APB1LPENR |= RCC_APB1Periph;
20000bae:	4b09      	ldr	r3, [pc, #36]	; (20000bd4 <RCC_APB1PeriphClockLPModeCmd+0x3c>)
20000bb0:	6e19      	ldr	r1, [r3, #96]	; 0x60
20000bb2:	4b08      	ldr	r3, [pc, #32]	; (20000bd4 <RCC_APB1PeriphClockLPModeCmd+0x3c>)
20000bb4:	687a      	ldr	r2, [r7, #4]
20000bb6:	430a      	orrs	r2, r1
20000bb8:	661a      	str	r2, [r3, #96]	; 0x60
  }
  else
  {
    RCC->APB1LPENR &= ~RCC_APB1Periph;
  }
}
20000bba:	e006      	b.n	20000bca <RCC_APB1PeriphClockLPModeCmd+0x32>
    RCC->APB1LPENR &= ~RCC_APB1Periph;
20000bbc:	4b05      	ldr	r3, [pc, #20]	; (20000bd4 <RCC_APB1PeriphClockLPModeCmd+0x3c>)
20000bbe:	6e1a      	ldr	r2, [r3, #96]	; 0x60
20000bc0:	687b      	ldr	r3, [r7, #4]
20000bc2:	43d9      	mvns	r1, r3
20000bc4:	4b03      	ldr	r3, [pc, #12]	; (20000bd4 <RCC_APB1PeriphClockLPModeCmd+0x3c>)
20000bc6:	400a      	ands	r2, r1
20000bc8:	661a      	str	r2, [r3, #96]	; 0x60
}
20000bca:	46c0      	nop			; (mov r8, r8)
20000bcc:	46bd      	mov	sp, r7
20000bce:	b002      	add	sp, #8
20000bd0:	bd80      	pop	{r7, pc}
20000bd2:	46c0      	nop			; (mov r8, r8)
20000bd4:	40023800 	andmi	r3, r2, r0, lsl #16

20000bd8 <RCC_APB2PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockLPModeCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
20000bd8:	b580      	push	{r7, lr}
20000bda:	b082      	sub	sp, #8
20000bdc:	af00      	add	r7, sp, #0
20000bde:	6078      	str	r0, [r7, #4]
20000be0:	000a      	movs	r2, r1
20000be2:	1cfb      	adds	r3, r7, #3
20000be4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
20000be6:	1cfb      	adds	r3, r7, #3
20000be8:	781b      	ldrb	r3, [r3, #0]
20000bea:	2b00      	cmp	r3, #0
20000bec:	d006      	beq.n	20000bfc <RCC_APB2PeriphClockLPModeCmd+0x24>
  {
    RCC->APB2LPENR |= RCC_APB2Periph;
20000bee:	4b09      	ldr	r3, [pc, #36]	; (20000c14 <RCC_APB2PeriphClockLPModeCmd+0x3c>)
20000bf0:	6e59      	ldr	r1, [r3, #100]	; 0x64
20000bf2:	4b08      	ldr	r3, [pc, #32]	; (20000c14 <RCC_APB2PeriphClockLPModeCmd+0x3c>)
20000bf4:	687a      	ldr	r2, [r7, #4]
20000bf6:	430a      	orrs	r2, r1
20000bf8:	665a      	str	r2, [r3, #100]	; 0x64
  }
  else
  {
    RCC->APB2LPENR &= ~RCC_APB2Periph;
  }
}
20000bfa:	e006      	b.n	20000c0a <RCC_APB2PeriphClockLPModeCmd+0x32>
    RCC->APB2LPENR &= ~RCC_APB2Periph;
20000bfc:	4b05      	ldr	r3, [pc, #20]	; (20000c14 <RCC_APB2PeriphClockLPModeCmd+0x3c>)
20000bfe:	6e5a      	ldr	r2, [r3, #100]	; 0x64
20000c00:	687b      	ldr	r3, [r7, #4]
20000c02:	43d9      	mvns	r1, r3
20000c04:	4b03      	ldr	r3, [pc, #12]	; (20000c14 <RCC_APB2PeriphClockLPModeCmd+0x3c>)
20000c06:	400a      	ands	r2, r1
20000c08:	665a      	str	r2, [r3, #100]	; 0x64
}
20000c0a:	46c0      	nop			; (mov r8, r8)
20000c0c:	46bd      	mov	sp, r7
20000c0e:	b002      	add	sp, #8
20000c10:	bd80      	pop	{r7, pc}
20000c12:	46c0      	nop			; (mov r8, r8)
20000c14:	40023800 	andmi	r3, r2, r0, lsl #16

20000c18 <RCC_LSEModeConfig>:
  *            @arg RCC_LSE_LOWPOWER_MODE:  LSE oscillator in low power mode.
  *            @arg RCC_LSE_HIGHDRIVE_MODE: LSE oscillator in High Drive mode.
  * @retval None
  */
void RCC_LSEModeConfig(uint8_t RCC_Mode)
{
20000c18:	b580      	push	{r7, lr}
20000c1a:	b082      	sub	sp, #8
20000c1c:	af00      	add	r7, sp, #0
20000c1e:	0002      	movs	r2, r0
20000c20:	1dfb      	adds	r3, r7, #7
20000c22:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_LSE_MODE(RCC_Mode));
  
  if(RCC_Mode == RCC_LSE_HIGHDRIVE_MODE)
20000c24:	1dfb      	adds	r3, r7, #7
20000c26:	781b      	ldrb	r3, [r3, #0]
20000c28:	2b01      	cmp	r3, #1
20000c2a:	d106      	bne.n	20000c3a <RCC_LSEModeConfig+0x22>
  {
    SET_BIT(RCC->BDCR, RCC_BDCR_LSEMOD);
20000c2c:	4b08      	ldr	r3, [pc, #32]	; (20000c50 <RCC_LSEModeConfig+0x38>)
20000c2e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
20000c30:	4b07      	ldr	r3, [pc, #28]	; (20000c50 <RCC_LSEModeConfig+0x38>)
20000c32:	2108      	movs	r1, #8
20000c34:	430a      	orrs	r2, r1
20000c36:	671a      	str	r2, [r3, #112]	; 0x70
  }
  else
  {
    CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEMOD);
  }
}
20000c38:	e005      	b.n	20000c46 <RCC_LSEModeConfig+0x2e>
    CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEMOD);
20000c3a:	4b05      	ldr	r3, [pc, #20]	; (20000c50 <RCC_LSEModeConfig+0x38>)
20000c3c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
20000c3e:	4b04      	ldr	r3, [pc, #16]	; (20000c50 <RCC_LSEModeConfig+0x38>)
20000c40:	2108      	movs	r1, #8
20000c42:	438a      	bics	r2, r1
20000c44:	671a      	str	r2, [r3, #112]	; 0x70
}
20000c46:	46c0      	nop			; (mov r8, r8)
20000c48:	46bd      	mov	sp, r7
20000c4a:	b002      	add	sp, #8
20000c4c:	bd80      	pop	{r7, pc}
20000c4e:	46c0      	nop			; (mov r8, r8)
20000c50:	40023800 	andmi	r3, r2, r0, lsl #16

20000c54 <RCC_ITConfig>:
  * @param  NewState: new state of the specified RCC interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_ITConfig(uint8_t RCC_IT, FunctionalState NewState)
{
20000c54:	b580      	push	{r7, lr}
20000c56:	b082      	sub	sp, #8
20000c58:	af00      	add	r7, sp, #0
20000c5a:	0002      	movs	r2, r0
20000c5c:	1dfb      	adds	r3, r7, #7
20000c5e:	701a      	strb	r2, [r3, #0]
20000c60:	1dbb      	adds	r3, r7, #6
20000c62:	1c0a      	adds	r2, r1, #0
20000c64:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_IT(RCC_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
20000c66:	1dbb      	adds	r3, r7, #6
20000c68:	781b      	ldrb	r3, [r3, #0]
20000c6a:	2b00      	cmp	r3, #0
20000c6c:	d009      	beq.n	20000c82 <RCC_ITConfig+0x2e>
  {
    /* Perform Byte access to RCC_CIR[14:8] bits to enable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS |= RCC_IT;
20000c6e:	4b0c      	ldr	r3, [pc, #48]	; (20000ca0 <RCC_ITConfig+0x4c>)
20000c70:	781b      	ldrb	r3, [r3, #0]
20000c72:	b2da      	uxtb	r2, r3
20000c74:	490a      	ldr	r1, [pc, #40]	; (20000ca0 <RCC_ITConfig+0x4c>)
20000c76:	1dfb      	adds	r3, r7, #7
20000c78:	781b      	ldrb	r3, [r3, #0]
20000c7a:	4313      	orrs	r3, r2
20000c7c:	b2db      	uxtb	r3, r3
20000c7e:	700b      	strb	r3, [r1, #0]
  else
  {
    /* Perform Byte access to RCC_CIR[14:8] bits to disable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS &= (uint8_t)~RCC_IT;
  }
}
20000c80:	e00a      	b.n	20000c98 <RCC_ITConfig+0x44>
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS &= (uint8_t)~RCC_IT;
20000c82:	4b07      	ldr	r3, [pc, #28]	; (20000ca0 <RCC_ITConfig+0x4c>)
20000c84:	781b      	ldrb	r3, [r3, #0]
20000c86:	b2db      	uxtb	r3, r3
20000c88:	1dfa      	adds	r2, r7, #7
20000c8a:	7812      	ldrb	r2, [r2, #0]
20000c8c:	43d2      	mvns	r2, r2
20000c8e:	b2d2      	uxtb	r2, r2
20000c90:	4903      	ldr	r1, [pc, #12]	; (20000ca0 <RCC_ITConfig+0x4c>)
20000c92:	4013      	ands	r3, r2
20000c94:	b2db      	uxtb	r3, r3
20000c96:	700b      	strb	r3, [r1, #0]
}
20000c98:	46c0      	nop			; (mov r8, r8)
20000c9a:	46bd      	mov	sp, r7
20000c9c:	b002      	add	sp, #8
20000c9e:	bd80      	pop	{r7, pc}
20000ca0:	4002380d 	andmi	r3, r2, sp, lsl #16

20000ca4 <RCC_GetFlagStatus>:
  *            @arg RCC_FLAG_WWDGRST: Window Watchdog reset
  *            @arg RCC_FLAG_LPWRRST: Low Power reset
  * @retval The new state of RCC_FLAG (SET or RESET).
  */
FlagStatus RCC_GetFlagStatus(uint8_t RCC_FLAG)
{
20000ca4:	b580      	push	{r7, lr}
20000ca6:	b086      	sub	sp, #24
20000ca8:	af00      	add	r7, sp, #0
20000caa:	0002      	movs	r2, r0
20000cac:	1dfb      	adds	r3, r7, #7
20000cae:	701a      	strb	r2, [r3, #0]
  uint32_t tmp = 0;
20000cb0:	2300      	movs	r3, #0
20000cb2:	60fb      	str	r3, [r7, #12]
  uint32_t statusreg = 0;
20000cb4:	2300      	movs	r3, #0
20000cb6:	617b      	str	r3, [r7, #20]
  FlagStatus bitstatus = RESET;
20000cb8:	2313      	movs	r3, #19
20000cba:	18fb      	adds	r3, r7, r3
20000cbc:	2200      	movs	r2, #0
20000cbe:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_FLAG(RCC_FLAG));

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
20000cc0:	1dfb      	adds	r3, r7, #7
20000cc2:	781b      	ldrb	r3, [r3, #0]
20000cc4:	095b      	lsrs	r3, r3, #5
20000cc6:	b2db      	uxtb	r3, r3
20000cc8:	60fb      	str	r3, [r7, #12]
  if (tmp == 1)               /* The flag to check is in CR register */
20000cca:	68fb      	ldr	r3, [r7, #12]
20000ccc:	2b01      	cmp	r3, #1
20000cce:	d103      	bne.n	20000cd8 <RCC_GetFlagStatus+0x34>
  {
    statusreg = RCC->CR;
20000cd0:	4b14      	ldr	r3, [pc, #80]	; (20000d24 <RCC_GetFlagStatus+0x80>)
20000cd2:	681b      	ldr	r3, [r3, #0]
20000cd4:	617b      	str	r3, [r7, #20]
20000cd6:	e009      	b.n	20000cec <RCC_GetFlagStatus+0x48>
  }
  else if (tmp == 2)          /* The flag to check is in BDCR register */
20000cd8:	68fb      	ldr	r3, [r7, #12]
20000cda:	2b02      	cmp	r3, #2
20000cdc:	d103      	bne.n	20000ce6 <RCC_GetFlagStatus+0x42>
  {
    statusreg = RCC->BDCR;
20000cde:	4b11      	ldr	r3, [pc, #68]	; (20000d24 <RCC_GetFlagStatus+0x80>)
20000ce0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
20000ce2:	617b      	str	r3, [r7, #20]
20000ce4:	e002      	b.n	20000cec <RCC_GetFlagStatus+0x48>
  }
  else                       /* The flag to check is in CSR register */
  {
    statusreg = RCC->CSR;
20000ce6:	4b0f      	ldr	r3, [pc, #60]	; (20000d24 <RCC_GetFlagStatus+0x80>)
20000ce8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
20000cea:	617b      	str	r3, [r7, #20]
  }

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_MASK;
20000cec:	1dfb      	adds	r3, r7, #7
20000cee:	781b      	ldrb	r3, [r3, #0]
20000cf0:	221f      	movs	r2, #31
20000cf2:	4013      	ands	r3, r2
20000cf4:	60fb      	str	r3, [r7, #12]
  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
20000cf6:	697a      	ldr	r2, [r7, #20]
20000cf8:	68fb      	ldr	r3, [r7, #12]
20000cfa:	40da      	lsrs	r2, r3
20000cfc:	0013      	movs	r3, r2
20000cfe:	2201      	movs	r2, #1
20000d00:	4013      	ands	r3, r2
20000d02:	d004      	beq.n	20000d0e <RCC_GetFlagStatus+0x6a>
  {
    bitstatus = SET;
20000d04:	2313      	movs	r3, #19
20000d06:	18fb      	adds	r3, r7, r3
20000d08:	2201      	movs	r2, #1
20000d0a:	701a      	strb	r2, [r3, #0]
20000d0c:	e003      	b.n	20000d16 <RCC_GetFlagStatus+0x72>
  }
  else
  {
    bitstatus = RESET;
20000d0e:	2313      	movs	r3, #19
20000d10:	18fb      	adds	r3, r7, r3
20000d12:	2200      	movs	r2, #0
20000d14:	701a      	strb	r2, [r3, #0]
  }
  /* Return the flag status */
  return bitstatus;
20000d16:	2313      	movs	r3, #19
20000d18:	18fb      	adds	r3, r7, r3
20000d1a:	781b      	ldrb	r3, [r3, #0]
}
20000d1c:	0018      	movs	r0, r3
20000d1e:	46bd      	mov	sp, r7
20000d20:	b006      	add	sp, #24
20000d22:	bd80      	pop	{r7, pc}
20000d24:	40023800 	andmi	r3, r2, r0, lsl #16

20000d28 <RCC_ClearFlag>:
  *         RCC_FLAG_IWDGRST, RCC_FLAG_WWDGRST, RCC_FLAG_LPWRRST
  * @param  None
  * @retval None
  */
void RCC_ClearFlag(void)
{
20000d28:	b580      	push	{r7, lr}
20000d2a:	af00      	add	r7, sp, #0
  /* Set RMVF bit to clear the reset flags */
  RCC->CSR |= RCC_CSR_RMVF;
20000d2c:	4b04      	ldr	r3, [pc, #16]	; (20000d40 <RCC_ClearFlag+0x18>)
20000d2e:	6f5a      	ldr	r2, [r3, #116]	; 0x74
20000d30:	4b03      	ldr	r3, [pc, #12]	; (20000d40 <RCC_ClearFlag+0x18>)
20000d32:	2180      	movs	r1, #128	; 0x80
20000d34:	0449      	lsls	r1, r1, #17
20000d36:	430a      	orrs	r2, r1
20000d38:	675a      	str	r2, [r3, #116]	; 0x74
}
20000d3a:	46c0      	nop			; (mov r8, r8)
20000d3c:	46bd      	mov	sp, r7
20000d3e:	bd80      	pop	{r7, pc}
20000d40:	40023800 	andmi	r3, r2, r0, lsl #16

20000d44 <RCC_GetITStatus>:
  *            @arg RCC_IT_PLLSAIRDY: PLLSAI clock ready interrupt (only for STM32F42xxx/43xxx/446xx/469xx/479xx devices)
  *            @arg RCC_IT_CSS: Clock Security System interrupt
  * @retval The new state of RCC_IT (SET or RESET).
  */
ITStatus RCC_GetITStatus(uint8_t RCC_IT)
{
20000d44:	b580      	push	{r7, lr}
20000d46:	b084      	sub	sp, #16
20000d48:	af00      	add	r7, sp, #0
20000d4a:	0002      	movs	r2, r0
20000d4c:	1dfb      	adds	r3, r7, #7
20000d4e:	701a      	strb	r2, [r3, #0]
  ITStatus bitstatus = RESET;
20000d50:	230f      	movs	r3, #15
20000d52:	18fb      	adds	r3, r7, r3
20000d54:	2200      	movs	r2, #0
20000d56:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_GET_IT(RCC_IT));

  /* Check the status of the specified RCC interrupt */
  if ((RCC->CIR & RCC_IT) != (uint32_t)RESET)
20000d58:	4b0a      	ldr	r3, [pc, #40]	; (20000d84 <RCC_GetITStatus+0x40>)
20000d5a:	68db      	ldr	r3, [r3, #12]
20000d5c:	1dfa      	adds	r2, r7, #7
20000d5e:	7812      	ldrb	r2, [r2, #0]
20000d60:	4013      	ands	r3, r2
20000d62:	d004      	beq.n	20000d6e <RCC_GetITStatus+0x2a>
  {
    bitstatus = SET;
20000d64:	230f      	movs	r3, #15
20000d66:	18fb      	adds	r3, r7, r3
20000d68:	2201      	movs	r2, #1
20000d6a:	701a      	strb	r2, [r3, #0]
20000d6c:	e003      	b.n	20000d76 <RCC_GetITStatus+0x32>
  }
  else
  {
    bitstatus = RESET;
20000d6e:	230f      	movs	r3, #15
20000d70:	18fb      	adds	r3, r7, r3
20000d72:	2200      	movs	r2, #0
20000d74:	701a      	strb	r2, [r3, #0]
  }
  /* Return the RCC_IT status */
  return  bitstatus;
20000d76:	230f      	movs	r3, #15
20000d78:	18fb      	adds	r3, r7, r3
20000d7a:	781b      	ldrb	r3, [r3, #0]
}
20000d7c:	0018      	movs	r0, r3
20000d7e:	46bd      	mov	sp, r7
20000d80:	b004      	add	sp, #16
20000d82:	bd80      	pop	{r7, pc}
20000d84:	40023800 	andmi	r3, r2, r0, lsl #16

20000d88 <RCC_ClearITPendingBit>:
  *            @arg RCC_IT_PLLSAIRDY: PLLSAI ready interrupt (only for STM32F42xxx/43xxx/446xx/469xx/479xx devices) 
  *            @arg RCC_IT_CSS: Clock Security System interrupt
  * @retval None
  */
void RCC_ClearITPendingBit(uint8_t RCC_IT)
{
20000d88:	b580      	push	{r7, lr}
20000d8a:	b082      	sub	sp, #8
20000d8c:	af00      	add	r7, sp, #0
20000d8e:	0002      	movs	r2, r0
20000d90:	1dfb      	adds	r3, r7, #7
20000d92:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_CLEAR_IT(RCC_IT));

  /* Perform Byte access to RCC_CIR[23:16] bits to clear the selected interrupt
     pending bits */
  *(__IO uint8_t *) CIR_BYTE3_ADDRESS = RCC_IT;
20000d94:	4a03      	ldr	r2, [pc, #12]	; (20000da4 <RCC_ClearITPendingBit+0x1c>)
20000d96:	1dfb      	adds	r3, r7, #7
20000d98:	781b      	ldrb	r3, [r3, #0]
20000d9a:	7013      	strb	r3, [r2, #0]
}
20000d9c:	46c0      	nop			; (mov r8, r8)
20000d9e:	46bd      	mov	sp, r7
20000da0:	b002      	add	sp, #8
20000da2:	bd80      	pop	{r7, pc}
20000da4:	4002380e 	andmi	r3, r2, lr, lsl #16

20000da8 <init_GPIO_Ports>:
	int GPIO_lamp;
	int GPIO_read;
	int larmTick;        // msTick == larmState ? Larm
} door; 
void init_GPIO_Ports()
{
20000da8:	b580      	push	{r7, lr}
20000daa:	b082      	sub	sp, #8
20000dac:	af00      	add	r7, sp, #0
	/*  Function used to set the GPIO configuration to the default reset state ****/
	GPIO_InitTypeDef init;
	//GPIO A UTPORTAR
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
20000dae:	2101      	movs	r1, #1
20000db0:	2001      	movs	r0, #1
20000db2:	f7ff fd51 	bl	20000858 <RCC_AHB1PeriphClockCmd>
	GPIO_StructInit(&init);
20000db6:	003b      	movs	r3, r7
20000db8:	0018      	movs	r0, r3
20000dba:	f000 fa47 	bl	2000124c <GPIO_StructInit>
	init.GPIO_Pin = GPIO_Pin_1 | GPIO_Pin_3 | GPIO_Pin_5 | GPIO_Pin_7;
20000dbe:	003b      	movs	r3, r7
20000dc0:	22aa      	movs	r2, #170	; 0xaa
20000dc2:	601a      	str	r2, [r3, #0]
	init.GPIO_Mode = GPIO_Mode_OUT;
20000dc4:	003b      	movs	r3, r7
20000dc6:	2201      	movs	r2, #1
20000dc8:	711a      	strb	r2, [r3, #4]
	init.GPIO_OType = GPIO_OType_PP;
20000dca:	003b      	movs	r3, r7
20000dcc:	2200      	movs	r2, #0
20000dce:	719a      	strb	r2, [r3, #6]
	GPIO_Init(GPIOA, &init);
20000dd0:	003b      	movs	r3, r7
20000dd2:	4a0e      	ldr	r2, [pc, #56]	; (20000e0c <init_GPIO_Ports+0x64>)
20000dd4:	0019      	movs	r1, r3
20000dd6:	0010      	movs	r0, r2
20000dd8:	f000 f9ac 	bl	20001134 <GPIO_Init>

	//konfigurerar inport GPIO A
	GPIO_StructInit(&init);
20000ddc:	003b      	movs	r3, r7
20000dde:	0018      	movs	r0, r3
20000de0:	f000 fa34 	bl	2000124c <GPIO_StructInit>
	init.GPIO_Pin = GPIO_Pin_0 | GPIO_Pin_2 | GPIO_Pin_4 | GPIO_Pin_6;
20000de4:	003b      	movs	r3, r7
20000de6:	2255      	movs	r2, #85	; 0x55
20000de8:	601a      	str	r2, [r3, #0]
	init.GPIO_Mode = GPIO_Mode_IN;
20000dea:	003b      	movs	r3, r7
20000dec:	2200      	movs	r2, #0
20000dee:	711a      	strb	r2, [r3, #4]
	init.GPIO_PuPd = GPIO_PuPd_UP;
20000df0:	003b      	movs	r3, r7
20000df2:	2201      	movs	r2, #1
20000df4:	71da      	strb	r2, [r3, #7]
	GPIO_Init(GPIOA, &init);
20000df6:	003b      	movs	r3, r7
20000df8:	4a04      	ldr	r2, [pc, #16]	; (20000e0c <init_GPIO_Ports+0x64>)
20000dfa:	0019      	movs	r1, r3
20000dfc:	0010      	movs	r0, r2
20000dfe:	f000 f999 	bl	20001134 <GPIO_Init>
}
20000e02:	46c0      	nop			; (mov r8, r8)
20000e04:	46bd      	mov	sp, r7
20000e06:	b002      	add	sp, #8
20000e08:	bd80      	pop	{r7, pc}
20000e0a:	46c0      	nop			; (mov r8, r8)
20000e0c:	40020000 	andmi	r0, r2, r0

20000e10 <SysTick_Handler>:

  
void SysTick_Handler(void)  {                               /* SysTick interrupt Handler. */
20000e10:	b580      	push	{r7, lr}
20000e12:	af00      	add	r7, sp, #0
	msTicks++;
20000e14:	4b03      	ldr	r3, [pc, #12]	; (20000e24 <SysTick_Handler+0x14>)
20000e16:	681b      	ldr	r3, [r3, #0]
20000e18:	1c5a      	adds	r2, r3, #1
20000e1a:	4b02      	ldr	r3, [pc, #8]	; (20000e24 <SysTick_Handler+0x14>)
20000e1c:	601a      	str	r2, [r3, #0]
}
20000e1e:	46c0      	nop			; (mov r8, r8)
20000e20:	46bd      	mov	sp, r7
20000e22:	bd80      	pop	{r7, pc}
20000e24:	200015ec 	andcs	r1, r0, ip, ror #11

20000e28 <app_Init>:

void app_Init(void){
20000e28:	b580      	push	{r7, lr}
20000e2a:	b082      	sub	sp, #8
20000e2c:	af00      	add	r7, sp, #0
	
	
	// Initiera SysTick.
	*((void (**)(void) ) 0x2001C03C ) = SysTick_Handler;
20000e2e:	4b06      	ldr	r3, [pc, #24]	; (20000e48 <app_Init+0x20>)
20000e30:	4a06      	ldr	r2, [pc, #24]	; (20000e4c <app_Init+0x24>)
20000e32:	601a      	str	r2, [r3, #0]
	uint32_t returnCode;
	returnCode = SysTick_Config(168000000/1000);      // Genererar ett SysTick-avbrott varje ms.
20000e34:	4b06      	ldr	r3, [pc, #24]	; (20000e50 <app_Init+0x28>)
20000e36:	0018      	movs	r0, r3
20000e38:	f7ff f91a 	bl	20000070 <SysTick_Config>
20000e3c:	0003      	movs	r3, r0
20000e3e:	607b      	str	r3, [r7, #4]
	if (returnCode != 0)  {                          // Om inte SysTick_Config lyckas...
	//typ reboot? bootloops är alltid kul 
  }


}
20000e40:	46c0      	nop			; (mov r8, r8)
20000e42:	46bd      	mov	sp, r7
20000e44:	b002      	add	sp, #8
20000e46:	bd80      	pop	{r7, pc}
20000e48:	2001c03c 	andcs	ip, r1, ip, lsr r0
20000e4c:	20000e11 	andcs	r0, r0, r1, lsl lr
20000e50:	00029040 	andeq	r9, r2, r0, asr #32

20000e54 <main>:

void main(void)
{
20000e54:	b5f0      	push	{r4, r5, r6, r7, lr}
20000e56:	b0a1      	sub	sp, #132	; 0x84
20000e58:	af00      	add	r7, sp, #0
	init_GPIO_Ports();
20000e5a:	f7ff ffa5 	bl	20000da8 <init_GPIO_Ports>
	app_Init();
20000e5e:	f7ff ffe3 	bl	20000e28 <app_Init>

	door test1 = {.id = 0, .controlbits = 0, .time_larm = 1, .time_central_larm = 3, .password = 0, .GPIO_lamp = GPIO_Pin_3, .GPIO_read = GPIO_Pin_2, .larmTick = 0};
20000e62:	2164      	movs	r1, #100	; 0x64
20000e64:	187b      	adds	r3, r7, r1
20000e66:	4a51      	ldr	r2, [pc, #324]	; (20000fac <main+0x158>)
20000e68:	ca31      	ldmia	r2!, {r0, r4, r5}
20000e6a:	c331      	stmia	r3!, {r0, r4, r5}
20000e6c:	ca11      	ldmia	r2!, {r0, r4}
20000e6e:	c311      	stmia	r3!, {r0, r4}
	door test2 = {.id = 1, .controlbits = 0, .time_larm = 1, .time_central_larm = 3, .password = 0, .GPIO_lamp = GPIO_Pin_5, .GPIO_read = GPIO_Pin_4, .larmTick = 0};
20000e70:	2050      	movs	r0, #80	; 0x50
20000e72:	183b      	adds	r3, r7, r0
20000e74:	4a4e      	ldr	r2, [pc, #312]	; (20000fb0 <main+0x15c>)
20000e76:	ca70      	ldmia	r2!, {r4, r5, r6}
20000e78:	c370      	stmia	r3!, {r4, r5, r6}
20000e7a:	ca30      	ldmia	r2!, {r4, r5}
20000e7c:	c330      	stmia	r3!, {r4, r5}
	door test3 = {.id = 2, .controlbits = 0, .time_larm = 1, .time_central_larm = 3, .password = 0, .GPIO_lamp = GPIO_Pin_1, .GPIO_read = GPIO_Pin_0, .larmTick = 0};
20000e7e:	243c      	movs	r4, #60	; 0x3c
20000e80:	193b      	adds	r3, r7, r4
20000e82:	4a4c      	ldr	r2, [pc, #304]	; (20000fb4 <main+0x160>)
20000e84:	ca62      	ldmia	r2!, {r1, r5, r6}
20000e86:	c362      	stmia	r3!, {r1, r5, r6}
20000e88:	ca22      	ldmia	r2!, {r1, r5}
20000e8a:	c322      	stmia	r3!, {r1, r5}
	door active_doors[3] = {test1, test2,test3};
20000e8c:	003b      	movs	r3, r7
20000e8e:	2164      	movs	r1, #100	; 0x64
20000e90:	187a      	adds	r2, r7, r1
20000e92:	ca62      	ldmia	r2!, {r1, r5, r6}
20000e94:	c362      	stmia	r3!, {r1, r5, r6}
20000e96:	ca22      	ldmia	r2!, {r1, r5}
20000e98:	c322      	stmia	r3!, {r1, r5}
20000e9a:	003b      	movs	r3, r7
20000e9c:	183a      	adds	r2, r7, r0
20000e9e:	3314      	adds	r3, #20
20000ea0:	ca23      	ldmia	r2!, {r0, r1, r5}
20000ea2:	c323      	stmia	r3!, {r0, r1, r5}
20000ea4:	ca03      	ldmia	r2!, {r0, r1}
20000ea6:	c303      	stmia	r3!, {r0, r1}
20000ea8:	003b      	movs	r3, r7
20000eaa:	193a      	adds	r2, r7, r4
20000eac:	3328      	adds	r3, #40	; 0x28
20000eae:	ca13      	ldmia	r2!, {r0, r1, r4}
20000eb0:	c313      	stmia	r3!, {r0, r1, r4}
20000eb2:	ca03      	ldmia	r2!, {r0, r1}
20000eb4:	c303      	stmia	r3!, {r0, r1}
	
  //lista för msticks (VIKTIGT ATT DESSA HAR SAMMA INDEX)
  
  while (1)
	{
		for (int j = 0; j < sizeof(active_doors); j++)
20000eb6:	2300      	movs	r3, #0
20000eb8:	67fb      	str	r3, [r7, #124]	; 0x7c
20000eba:	e02a      	b.n	20000f12 <main+0xbe>
		{
			if(active_doors[j].controlbits == 1){
20000ebc:	0039      	movs	r1, r7
20000ebe:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
20000ec0:	0013      	movs	r3, r2
20000ec2:	009b      	lsls	r3, r3, #2
20000ec4:	189b      	adds	r3, r3, r2
20000ec6:	009b      	lsls	r3, r3, #2
20000ec8:	18cb      	adds	r3, r1, r3
20000eca:	3301      	adds	r3, #1
20000ecc:	781b      	ldrb	r3, [r3, #0]
20000ece:	2b01      	cmp	r3, #1
20000ed0:	d11c      	bne.n	20000f0c <main+0xb8>
				if (active_doors[j].larmTick < msTicks)
20000ed2:	0039      	movs	r1, r7
20000ed4:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
20000ed6:	0013      	movs	r3, r2
20000ed8:	009b      	lsls	r3, r3, #2
20000eda:	189b      	adds	r3, r3, r2
20000edc:	009b      	lsls	r3, r3, #2
20000ede:	18cb      	adds	r3, r1, r3
20000ee0:	3310      	adds	r3, #16
20000ee2:	681b      	ldr	r3, [r3, #0]
20000ee4:	001a      	movs	r2, r3
20000ee6:	4b34      	ldr	r3, [pc, #208]	; (20000fb8 <main+0x164>)
20000ee8:	681b      	ldr	r3, [r3, #0]
20000eea:	429a      	cmp	r2, r3
20000eec:	d20e      	bcs.n	20000f0c <main+0xb8>
				{
					GPIO_SetBits(GPIOA, active_doors[j].GPIO_lamp);
20000eee:	0039      	movs	r1, r7
20000ef0:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
20000ef2:	0013      	movs	r3, r2
20000ef4:	009b      	lsls	r3, r3, #2
20000ef6:	189b      	adds	r3, r3, r2
20000ef8:	009b      	lsls	r3, r3, #2
20000efa:	18cb      	adds	r3, r1, r3
20000efc:	3308      	adds	r3, #8
20000efe:	681b      	ldr	r3, [r3, #0]
20000f00:	b29b      	uxth	r3, r3
20000f02:	4a2e      	ldr	r2, [pc, #184]	; (20000fbc <main+0x168>)
20000f04:	0019      	movs	r1, r3
20000f06:	0010      	movs	r0, r2
20000f08:	f000 fa35 	bl	20001376 <GPIO_SetBits>
		for (int j = 0; j < sizeof(active_doors); j++)
20000f0c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
20000f0e:	3301      	adds	r3, #1
20000f10:	67fb      	str	r3, [r7, #124]	; 0x7c
20000f12:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
20000f14:	2b3b      	cmp	r3, #59	; 0x3b
20000f16:	d9d1      	bls.n	20000ebc <main+0x68>
			
		}
		
	
		
		for (int i = 0; i < sizeof(active_doors); i = i + 1)
20000f18:	2300      	movs	r3, #0
20000f1a:	67bb      	str	r3, [r7, #120]	; 0x78
20000f1c:	e042      	b.n	20000fa4 <main+0x150>
		{
			if (GPIO_ReadInputDataBit(GPIOA, active_doors[i].GPIO_read))
20000f1e:	0039      	movs	r1, r7
20000f20:	6fba      	ldr	r2, [r7, #120]	; 0x78
20000f22:	0013      	movs	r3, r2
20000f24:	009b      	lsls	r3, r3, #2
20000f26:	189b      	adds	r3, r3, r2
20000f28:	009b      	lsls	r3, r3, #2
20000f2a:	18cb      	adds	r3, r1, r3
20000f2c:	330c      	adds	r3, #12
20000f2e:	681b      	ldr	r3, [r3, #0]
20000f30:	b29b      	uxth	r3, r3
20000f32:	4a22      	ldr	r2, [pc, #136]	; (20000fbc <main+0x168>)
20000f34:	0019      	movs	r1, r3
20000f36:	0010      	movs	r0, r2
20000f38:	f000 f9c5 	bl	200012c6 <GPIO_ReadInputDataBit>
20000f3c:	1e03      	subs	r3, r0, #0
20000f3e:	d00a      	beq.n	20000f56 <main+0x102>
			{
				//tarbort larmad GPIO PIN 
				active_doors[i].controlbits = 0;
20000f40:	0039      	movs	r1, r7
20000f42:	6fba      	ldr	r2, [r7, #120]	; 0x78
20000f44:	0013      	movs	r3, r2
20000f46:	009b      	lsls	r3, r3, #2
20000f48:	189b      	adds	r3, r3, r2
20000f4a:	009b      	lsls	r3, r3, #2
20000f4c:	18cb      	adds	r3, r1, r3
20000f4e:	3301      	adds	r3, #1
20000f50:	2200      	movs	r2, #0
20000f52:	701a      	strb	r2, [r3, #0]
20000f54:	e023      	b.n	20000f9e <main+0x14a>
				//GPIO_ResetBits(GPIOA, active_doors[i].GPIO_lamp);
			}
			else
			{
				active_doors[i].controlbits = 1;
20000f56:	0039      	movs	r1, r7
20000f58:	6fba      	ldr	r2, [r7, #120]	; 0x78
20000f5a:	0013      	movs	r3, r2
20000f5c:	009b      	lsls	r3, r3, #2
20000f5e:	189b      	adds	r3, r3, r2
20000f60:	009b      	lsls	r3, r3, #2
20000f62:	18cb      	adds	r3, r1, r3
20000f64:	3301      	adds	r3, #1
20000f66:	2201      	movs	r2, #1
20000f68:	701a      	strb	r2, [r3, #0]
				active_doors[i].larmTick = msTicks + 10*1000*active_doors[i].time_larm;
20000f6a:	0039      	movs	r1, r7
20000f6c:	6fba      	ldr	r2, [r7, #120]	; 0x78
20000f6e:	0013      	movs	r3, r2
20000f70:	009b      	lsls	r3, r3, #2
20000f72:	189b      	adds	r3, r3, r2
20000f74:	009b      	lsls	r3, r3, #2
20000f76:	18cb      	adds	r3, r1, r3
20000f78:	3302      	adds	r3, #2
20000f7a:	781b      	ldrb	r3, [r3, #0]
20000f7c:	001a      	movs	r2, r3
20000f7e:	4b10      	ldr	r3, [pc, #64]	; (20000fc0 <main+0x16c>)
20000f80:	4353      	muls	r3, r2
20000f82:	001a      	movs	r2, r3
20000f84:	4b0c      	ldr	r3, [pc, #48]	; (20000fb8 <main+0x164>)
20000f86:	681b      	ldr	r3, [r3, #0]
20000f88:	18d3      	adds	r3, r2, r3
20000f8a:	0018      	movs	r0, r3
20000f8c:	0039      	movs	r1, r7
20000f8e:	6fba      	ldr	r2, [r7, #120]	; 0x78
20000f90:	0013      	movs	r3, r2
20000f92:	009b      	lsls	r3, r3, #2
20000f94:	189b      	adds	r3, r3, r2
20000f96:	009b      	lsls	r3, r3, #2
20000f98:	18cb      	adds	r3, r1, r3
20000f9a:	3310      	adds	r3, #16
20000f9c:	6018      	str	r0, [r3, #0]
		for (int i = 0; i < sizeof(active_doors); i = i + 1)
20000f9e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
20000fa0:	3301      	adds	r3, #1
20000fa2:	67bb      	str	r3, [r7, #120]	; 0x78
20000fa4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
20000fa6:	2b3b      	cmp	r3, #59	; 0x3b
20000fa8:	d9b9      	bls.n	20000f1e <main+0xca>
		for (int j = 0; j < sizeof(active_doors); j++)
20000faa:	e784      	b.n	20000eb6 <main+0x62>
20000fac:	20001600 	andcs	r1, r0, r0, lsl #12
20000fb0:	20001614 	andcs	r1, r0, r4, lsl r6
20000fb4:	20001628 	andcs	r1, r0, r8, lsr #12
20000fb8:	200015ec 	andcs	r1, r0, ip, ror #11
20000fbc:	40020000 	andmi	r0, r2, r0
20000fc0:	00002710 	andeq	r2, r0, r0, lsl r7

20000fc4 <GPIO_DeInit>:
20000fc4:	b580      	push	{r7, lr}
20000fc6:	b082      	sub	sp, #8
20000fc8:	af00      	add	r7, sp, #0
20000fca:	6078      	str	r0, [r7, #4]
20000fcc:	687b      	ldr	r3, [r7, #4]
20000fce:	4a4e      	ldr	r2, [pc, #312]	; (20001108 <GPIO_DeInit+0x144>)
20000fd0:	4293      	cmp	r3, r2
20000fd2:	d108      	bne.n	20000fe6 <GPIO_DeInit+0x22>
20000fd4:	2101      	movs	r1, #1
20000fd6:	2001      	movs	r0, #1
20000fd8:	f7ff fcde 	bl	20000998 <RCC_AHB1PeriphResetCmd>
20000fdc:	2100      	movs	r1, #0
20000fde:	2001      	movs	r0, #1
20000fe0:	f7ff fcda 	bl	20000998 <RCC_AHB1PeriphResetCmd>
20000fe4:	e08c      	b.n	20001100 <GPIO_DeInit+0x13c>
20000fe6:	687b      	ldr	r3, [r7, #4]
20000fe8:	4a48      	ldr	r2, [pc, #288]	; (2000110c <GPIO_DeInit+0x148>)
20000fea:	4293      	cmp	r3, r2
20000fec:	d108      	bne.n	20001000 <GPIO_DeInit+0x3c>
20000fee:	2101      	movs	r1, #1
20000ff0:	2002      	movs	r0, #2
20000ff2:	f7ff fcd1 	bl	20000998 <RCC_AHB1PeriphResetCmd>
20000ff6:	2100      	movs	r1, #0
20000ff8:	2002      	movs	r0, #2
20000ffa:	f7ff fccd 	bl	20000998 <RCC_AHB1PeriphResetCmd>
20000ffe:	e07f      	b.n	20001100 <GPIO_DeInit+0x13c>
20001000:	687b      	ldr	r3, [r7, #4]
20001002:	4a43      	ldr	r2, [pc, #268]	; (20001110 <GPIO_DeInit+0x14c>)
20001004:	4293      	cmp	r3, r2
20001006:	d108      	bne.n	2000101a <GPIO_DeInit+0x56>
20001008:	2101      	movs	r1, #1
2000100a:	2004      	movs	r0, #4
2000100c:	f7ff fcc4 	bl	20000998 <RCC_AHB1PeriphResetCmd>
20001010:	2100      	movs	r1, #0
20001012:	2004      	movs	r0, #4
20001014:	f7ff fcc0 	bl	20000998 <RCC_AHB1PeriphResetCmd>
20001018:	e072      	b.n	20001100 <GPIO_DeInit+0x13c>
2000101a:	687b      	ldr	r3, [r7, #4]
2000101c:	4a3d      	ldr	r2, [pc, #244]	; (20001114 <GPIO_DeInit+0x150>)
2000101e:	4293      	cmp	r3, r2
20001020:	d108      	bne.n	20001034 <GPIO_DeInit+0x70>
20001022:	2101      	movs	r1, #1
20001024:	2008      	movs	r0, #8
20001026:	f7ff fcb7 	bl	20000998 <RCC_AHB1PeriphResetCmd>
2000102a:	2100      	movs	r1, #0
2000102c:	2008      	movs	r0, #8
2000102e:	f7ff fcb3 	bl	20000998 <RCC_AHB1PeriphResetCmd>
20001032:	e065      	b.n	20001100 <GPIO_DeInit+0x13c>
20001034:	687b      	ldr	r3, [r7, #4]
20001036:	4a38      	ldr	r2, [pc, #224]	; (20001118 <GPIO_DeInit+0x154>)
20001038:	4293      	cmp	r3, r2
2000103a:	d108      	bne.n	2000104e <GPIO_DeInit+0x8a>
2000103c:	2101      	movs	r1, #1
2000103e:	2010      	movs	r0, #16
20001040:	f7ff fcaa 	bl	20000998 <RCC_AHB1PeriphResetCmd>
20001044:	2100      	movs	r1, #0
20001046:	2010      	movs	r0, #16
20001048:	f7ff fca6 	bl	20000998 <RCC_AHB1PeriphResetCmd>
2000104c:	e058      	b.n	20001100 <GPIO_DeInit+0x13c>
2000104e:	687b      	ldr	r3, [r7, #4]
20001050:	4a32      	ldr	r2, [pc, #200]	; (2000111c <GPIO_DeInit+0x158>)
20001052:	4293      	cmp	r3, r2
20001054:	d108      	bne.n	20001068 <GPIO_DeInit+0xa4>
20001056:	2101      	movs	r1, #1
20001058:	2020      	movs	r0, #32
2000105a:	f7ff fc9d 	bl	20000998 <RCC_AHB1PeriphResetCmd>
2000105e:	2100      	movs	r1, #0
20001060:	2020      	movs	r0, #32
20001062:	f7ff fc99 	bl	20000998 <RCC_AHB1PeriphResetCmd>
20001066:	e04b      	b.n	20001100 <GPIO_DeInit+0x13c>
20001068:	687b      	ldr	r3, [r7, #4]
2000106a:	4a2d      	ldr	r2, [pc, #180]	; (20001120 <GPIO_DeInit+0x15c>)
2000106c:	4293      	cmp	r3, r2
2000106e:	d108      	bne.n	20001082 <GPIO_DeInit+0xbe>
20001070:	2101      	movs	r1, #1
20001072:	2040      	movs	r0, #64	; 0x40
20001074:	f7ff fc90 	bl	20000998 <RCC_AHB1PeriphResetCmd>
20001078:	2100      	movs	r1, #0
2000107a:	2040      	movs	r0, #64	; 0x40
2000107c:	f7ff fc8c 	bl	20000998 <RCC_AHB1PeriphResetCmd>
20001080:	e03e      	b.n	20001100 <GPIO_DeInit+0x13c>
20001082:	687b      	ldr	r3, [r7, #4]
20001084:	4a27      	ldr	r2, [pc, #156]	; (20001124 <GPIO_DeInit+0x160>)
20001086:	4293      	cmp	r3, r2
20001088:	d108      	bne.n	2000109c <GPIO_DeInit+0xd8>
2000108a:	2101      	movs	r1, #1
2000108c:	2080      	movs	r0, #128	; 0x80
2000108e:	f7ff fc83 	bl	20000998 <RCC_AHB1PeriphResetCmd>
20001092:	2100      	movs	r1, #0
20001094:	2080      	movs	r0, #128	; 0x80
20001096:	f7ff fc7f 	bl	20000998 <RCC_AHB1PeriphResetCmd>
2000109a:	e031      	b.n	20001100 <GPIO_DeInit+0x13c>
2000109c:	687b      	ldr	r3, [r7, #4]
2000109e:	4a22      	ldr	r2, [pc, #136]	; (20001128 <GPIO_DeInit+0x164>)
200010a0:	4293      	cmp	r3, r2
200010a2:	d10c      	bne.n	200010be <GPIO_DeInit+0xfa>
200010a4:	2380      	movs	r3, #128	; 0x80
200010a6:	005b      	lsls	r3, r3, #1
200010a8:	2101      	movs	r1, #1
200010aa:	0018      	movs	r0, r3
200010ac:	f7ff fc74 	bl	20000998 <RCC_AHB1PeriphResetCmd>
200010b0:	2380      	movs	r3, #128	; 0x80
200010b2:	005b      	lsls	r3, r3, #1
200010b4:	2100      	movs	r1, #0
200010b6:	0018      	movs	r0, r3
200010b8:	f7ff fc6e 	bl	20000998 <RCC_AHB1PeriphResetCmd>
200010bc:	e020      	b.n	20001100 <GPIO_DeInit+0x13c>
200010be:	687b      	ldr	r3, [r7, #4]
200010c0:	4a1a      	ldr	r2, [pc, #104]	; (2000112c <GPIO_DeInit+0x168>)
200010c2:	4293      	cmp	r3, r2
200010c4:	d10c      	bne.n	200010e0 <GPIO_DeInit+0x11c>
200010c6:	2380      	movs	r3, #128	; 0x80
200010c8:	009b      	lsls	r3, r3, #2
200010ca:	2101      	movs	r1, #1
200010cc:	0018      	movs	r0, r3
200010ce:	f7ff fc63 	bl	20000998 <RCC_AHB1PeriphResetCmd>
200010d2:	2380      	movs	r3, #128	; 0x80
200010d4:	009b      	lsls	r3, r3, #2
200010d6:	2100      	movs	r1, #0
200010d8:	0018      	movs	r0, r3
200010da:	f7ff fc5d 	bl	20000998 <RCC_AHB1PeriphResetCmd>
200010de:	e00f      	b.n	20001100 <GPIO_DeInit+0x13c>
200010e0:	687b      	ldr	r3, [r7, #4]
200010e2:	4a13      	ldr	r2, [pc, #76]	; (20001130 <GPIO_DeInit+0x16c>)
200010e4:	4293      	cmp	r3, r2
200010e6:	d10b      	bne.n	20001100 <GPIO_DeInit+0x13c>
200010e8:	2380      	movs	r3, #128	; 0x80
200010ea:	00db      	lsls	r3, r3, #3
200010ec:	2101      	movs	r1, #1
200010ee:	0018      	movs	r0, r3
200010f0:	f7ff fc52 	bl	20000998 <RCC_AHB1PeriphResetCmd>
200010f4:	2380      	movs	r3, #128	; 0x80
200010f6:	00db      	lsls	r3, r3, #3
200010f8:	2100      	movs	r1, #0
200010fa:	0018      	movs	r0, r3
200010fc:	f7ff fc4c 	bl	20000998 <RCC_AHB1PeriphResetCmd>
20001100:	46c0      	nop			; (mov r8, r8)
20001102:	46bd      	mov	sp, r7
20001104:	b002      	add	sp, #8
20001106:	bd80      	pop	{r7, pc}
20001108:	40020000 	andmi	r0, r2, r0
2000110c:	40020400 	andmi	r0, r2, r0, lsl #8
20001110:	40020800 	andmi	r0, r2, r0, lsl #16
20001114:	40020c00 	andmi	r0, r2, r0, lsl #24
20001118:	40021000 	andmi	r1, r2, r0
2000111c:	40021400 	andmi	r1, r2, r0, lsl #8
20001120:	40021800 	andmi	r1, r2, r0, lsl #16
20001124:	40021c00 	andmi	r1, r2, r0, lsl #24
20001128:	40022000 	andmi	r2, r2, r0
2000112c:	40022400 	andmi	r2, r2, r0, lsl #8
20001130:	40022800 	andmi	r2, r2, r0, lsl #16

20001134 <GPIO_Init>:
20001134:	b580      	push	{r7, lr}
20001136:	b086      	sub	sp, #24
20001138:	af00      	add	r7, sp, #0
2000113a:	6078      	str	r0, [r7, #4]
2000113c:	6039      	str	r1, [r7, #0]
2000113e:	2300      	movs	r3, #0
20001140:	617b      	str	r3, [r7, #20]
20001142:	2300      	movs	r3, #0
20001144:	613b      	str	r3, [r7, #16]
20001146:	2300      	movs	r3, #0
20001148:	60fb      	str	r3, [r7, #12]
2000114a:	2300      	movs	r3, #0
2000114c:	617b      	str	r3, [r7, #20]
2000114e:	e076      	b.n	2000123e <GPIO_Init+0x10a>
20001150:	2201      	movs	r2, #1
20001152:	697b      	ldr	r3, [r7, #20]
20001154:	409a      	lsls	r2, r3
20001156:	0013      	movs	r3, r2
20001158:	613b      	str	r3, [r7, #16]
2000115a:	683b      	ldr	r3, [r7, #0]
2000115c:	681a      	ldr	r2, [r3, #0]
2000115e:	693b      	ldr	r3, [r7, #16]
20001160:	4013      	ands	r3, r2
20001162:	60fb      	str	r3, [r7, #12]
20001164:	68fa      	ldr	r2, [r7, #12]
20001166:	693b      	ldr	r3, [r7, #16]
20001168:	429a      	cmp	r2, r3
2000116a:	d165      	bne.n	20001238 <GPIO_Init+0x104>
2000116c:	687b      	ldr	r3, [r7, #4]
2000116e:	681b      	ldr	r3, [r3, #0]
20001170:	697a      	ldr	r2, [r7, #20]
20001172:	0052      	lsls	r2, r2, #1
20001174:	2103      	movs	r1, #3
20001176:	4091      	lsls	r1, r2
20001178:	000a      	movs	r2, r1
2000117a:	43d2      	mvns	r2, r2
2000117c:	401a      	ands	r2, r3
2000117e:	687b      	ldr	r3, [r7, #4]
20001180:	601a      	str	r2, [r3, #0]
20001182:	687b      	ldr	r3, [r7, #4]
20001184:	681a      	ldr	r2, [r3, #0]
20001186:	683b      	ldr	r3, [r7, #0]
20001188:	791b      	ldrb	r3, [r3, #4]
2000118a:	0019      	movs	r1, r3
2000118c:	697b      	ldr	r3, [r7, #20]
2000118e:	005b      	lsls	r3, r3, #1
20001190:	4099      	lsls	r1, r3
20001192:	000b      	movs	r3, r1
20001194:	431a      	orrs	r2, r3
20001196:	687b      	ldr	r3, [r7, #4]
20001198:	601a      	str	r2, [r3, #0]
2000119a:	683b      	ldr	r3, [r7, #0]
2000119c:	791b      	ldrb	r3, [r3, #4]
2000119e:	2b01      	cmp	r3, #1
200011a0:	d003      	beq.n	200011aa <GPIO_Init+0x76>
200011a2:	683b      	ldr	r3, [r7, #0]
200011a4:	791b      	ldrb	r3, [r3, #4]
200011a6:	2b02      	cmp	r3, #2
200011a8:	d12e      	bne.n	20001208 <GPIO_Init+0xd4>
200011aa:	687b      	ldr	r3, [r7, #4]
200011ac:	689b      	ldr	r3, [r3, #8]
200011ae:	697a      	ldr	r2, [r7, #20]
200011b0:	0052      	lsls	r2, r2, #1
200011b2:	2103      	movs	r1, #3
200011b4:	4091      	lsls	r1, r2
200011b6:	000a      	movs	r2, r1
200011b8:	43d2      	mvns	r2, r2
200011ba:	401a      	ands	r2, r3
200011bc:	687b      	ldr	r3, [r7, #4]
200011be:	609a      	str	r2, [r3, #8]
200011c0:	687b      	ldr	r3, [r7, #4]
200011c2:	689a      	ldr	r2, [r3, #8]
200011c4:	683b      	ldr	r3, [r7, #0]
200011c6:	795b      	ldrb	r3, [r3, #5]
200011c8:	0019      	movs	r1, r3
200011ca:	697b      	ldr	r3, [r7, #20]
200011cc:	005b      	lsls	r3, r3, #1
200011ce:	4099      	lsls	r1, r3
200011d0:	000b      	movs	r3, r1
200011d2:	431a      	orrs	r2, r3
200011d4:	687b      	ldr	r3, [r7, #4]
200011d6:	609a      	str	r2, [r3, #8]
200011d8:	687b      	ldr	r3, [r7, #4]
200011da:	685b      	ldr	r3, [r3, #4]
200011dc:	697a      	ldr	r2, [r7, #20]
200011de:	b292      	uxth	r2, r2
200011e0:	0011      	movs	r1, r2
200011e2:	2201      	movs	r2, #1
200011e4:	408a      	lsls	r2, r1
200011e6:	43d2      	mvns	r2, r2
200011e8:	401a      	ands	r2, r3
200011ea:	687b      	ldr	r3, [r7, #4]
200011ec:	605a      	str	r2, [r3, #4]
200011ee:	687b      	ldr	r3, [r7, #4]
200011f0:	685b      	ldr	r3, [r3, #4]
200011f2:	683a      	ldr	r2, [r7, #0]
200011f4:	7992      	ldrb	r2, [r2, #6]
200011f6:	0011      	movs	r1, r2
200011f8:	697a      	ldr	r2, [r7, #20]
200011fa:	b292      	uxth	r2, r2
200011fc:	4091      	lsls	r1, r2
200011fe:	000a      	movs	r2, r1
20001200:	b292      	uxth	r2, r2
20001202:	431a      	orrs	r2, r3
20001204:	687b      	ldr	r3, [r7, #4]
20001206:	605a      	str	r2, [r3, #4]
20001208:	687b      	ldr	r3, [r7, #4]
2000120a:	68db      	ldr	r3, [r3, #12]
2000120c:	697a      	ldr	r2, [r7, #20]
2000120e:	b292      	uxth	r2, r2
20001210:	0052      	lsls	r2, r2, #1
20001212:	2103      	movs	r1, #3
20001214:	4091      	lsls	r1, r2
20001216:	000a      	movs	r2, r1
20001218:	43d2      	mvns	r2, r2
2000121a:	401a      	ands	r2, r3
2000121c:	687b      	ldr	r3, [r7, #4]
2000121e:	60da      	str	r2, [r3, #12]
20001220:	687b      	ldr	r3, [r7, #4]
20001222:	68da      	ldr	r2, [r3, #12]
20001224:	683b      	ldr	r3, [r7, #0]
20001226:	79db      	ldrb	r3, [r3, #7]
20001228:	0019      	movs	r1, r3
2000122a:	697b      	ldr	r3, [r7, #20]
2000122c:	005b      	lsls	r3, r3, #1
2000122e:	4099      	lsls	r1, r3
20001230:	000b      	movs	r3, r1
20001232:	431a      	orrs	r2, r3
20001234:	687b      	ldr	r3, [r7, #4]
20001236:	60da      	str	r2, [r3, #12]
20001238:	697b      	ldr	r3, [r7, #20]
2000123a:	3301      	adds	r3, #1
2000123c:	617b      	str	r3, [r7, #20]
2000123e:	697b      	ldr	r3, [r7, #20]
20001240:	2b0f      	cmp	r3, #15
20001242:	d985      	bls.n	20001150 <GPIO_Init+0x1c>
20001244:	46c0      	nop			; (mov r8, r8)
20001246:	46bd      	mov	sp, r7
20001248:	b006      	add	sp, #24
2000124a:	bd80      	pop	{r7, pc}

2000124c <GPIO_StructInit>:
2000124c:	b580      	push	{r7, lr}
2000124e:	b082      	sub	sp, #8
20001250:	af00      	add	r7, sp, #0
20001252:	6078      	str	r0, [r7, #4]
20001254:	687b      	ldr	r3, [r7, #4]
20001256:	4a09      	ldr	r2, [pc, #36]	; (2000127c <GPIO_StructInit+0x30>)
20001258:	601a      	str	r2, [r3, #0]
2000125a:	687b      	ldr	r3, [r7, #4]
2000125c:	2200      	movs	r2, #0
2000125e:	711a      	strb	r2, [r3, #4]
20001260:	687b      	ldr	r3, [r7, #4]
20001262:	2200      	movs	r2, #0
20001264:	715a      	strb	r2, [r3, #5]
20001266:	687b      	ldr	r3, [r7, #4]
20001268:	2200      	movs	r2, #0
2000126a:	719a      	strb	r2, [r3, #6]
2000126c:	687b      	ldr	r3, [r7, #4]
2000126e:	2200      	movs	r2, #0
20001270:	71da      	strb	r2, [r3, #7]
20001272:	46c0      	nop			; (mov r8, r8)
20001274:	46bd      	mov	sp, r7
20001276:	b002      	add	sp, #8
20001278:	bd80      	pop	{r7, pc}
2000127a:	46c0      	nop			; (mov r8, r8)
2000127c:	0000ffff 	strdeq	pc, [r0], -pc	; <UNPREDICTABLE>

20001280 <GPIO_PinLockConfig>:
20001280:	b580      	push	{r7, lr}
20001282:	b084      	sub	sp, #16
20001284:	af00      	add	r7, sp, #0
20001286:	6078      	str	r0, [r7, #4]
20001288:	000a      	movs	r2, r1
2000128a:	1cbb      	adds	r3, r7, #2
2000128c:	801a      	strh	r2, [r3, #0]
2000128e:	2380      	movs	r3, #128	; 0x80
20001290:	025b      	lsls	r3, r3, #9
20001292:	60fb      	str	r3, [r7, #12]
20001294:	1cbb      	adds	r3, r7, #2
20001296:	881a      	ldrh	r2, [r3, #0]
20001298:	68fb      	ldr	r3, [r7, #12]
2000129a:	4313      	orrs	r3, r2
2000129c:	60fb      	str	r3, [r7, #12]
2000129e:	68fa      	ldr	r2, [r7, #12]
200012a0:	687b      	ldr	r3, [r7, #4]
200012a2:	61da      	str	r2, [r3, #28]
200012a4:	1cbb      	adds	r3, r7, #2
200012a6:	881a      	ldrh	r2, [r3, #0]
200012a8:	687b      	ldr	r3, [r7, #4]
200012aa:	61da      	str	r2, [r3, #28]
200012ac:	68fa      	ldr	r2, [r7, #12]
200012ae:	687b      	ldr	r3, [r7, #4]
200012b0:	61da      	str	r2, [r3, #28]
200012b2:	687b      	ldr	r3, [r7, #4]
200012b4:	69db      	ldr	r3, [r3, #28]
200012b6:	60fb      	str	r3, [r7, #12]
200012b8:	687b      	ldr	r3, [r7, #4]
200012ba:	69db      	ldr	r3, [r3, #28]
200012bc:	60fb      	str	r3, [r7, #12]
200012be:	46c0      	nop			; (mov r8, r8)
200012c0:	46bd      	mov	sp, r7
200012c2:	b004      	add	sp, #16
200012c4:	bd80      	pop	{r7, pc}

200012c6 <GPIO_ReadInputDataBit>:
200012c6:	b580      	push	{r7, lr}
200012c8:	b084      	sub	sp, #16
200012ca:	af00      	add	r7, sp, #0
200012cc:	6078      	str	r0, [r7, #4]
200012ce:	000a      	movs	r2, r1
200012d0:	1cbb      	adds	r3, r7, #2
200012d2:	801a      	strh	r2, [r3, #0]
200012d4:	230f      	movs	r3, #15
200012d6:	18fb      	adds	r3, r7, r3
200012d8:	2200      	movs	r2, #0
200012da:	701a      	strb	r2, [r3, #0]
200012dc:	687b      	ldr	r3, [r7, #4]
200012de:	691b      	ldr	r3, [r3, #16]
200012e0:	1cba      	adds	r2, r7, #2
200012e2:	8812      	ldrh	r2, [r2, #0]
200012e4:	4013      	ands	r3, r2
200012e6:	d004      	beq.n	200012f2 <GPIO_ReadInputDataBit+0x2c>
200012e8:	230f      	movs	r3, #15
200012ea:	18fb      	adds	r3, r7, r3
200012ec:	2201      	movs	r2, #1
200012ee:	701a      	strb	r2, [r3, #0]
200012f0:	e003      	b.n	200012fa <GPIO_ReadInputDataBit+0x34>
200012f2:	230f      	movs	r3, #15
200012f4:	18fb      	adds	r3, r7, r3
200012f6:	2200      	movs	r2, #0
200012f8:	701a      	strb	r2, [r3, #0]
200012fa:	230f      	movs	r3, #15
200012fc:	18fb      	adds	r3, r7, r3
200012fe:	781b      	ldrb	r3, [r3, #0]
20001300:	0018      	movs	r0, r3
20001302:	46bd      	mov	sp, r7
20001304:	b004      	add	sp, #16
20001306:	bd80      	pop	{r7, pc}

20001308 <GPIO_ReadInputData>:
20001308:	b580      	push	{r7, lr}
2000130a:	b082      	sub	sp, #8
2000130c:	af00      	add	r7, sp, #0
2000130e:	6078      	str	r0, [r7, #4]
20001310:	687b      	ldr	r3, [r7, #4]
20001312:	691b      	ldr	r3, [r3, #16]
20001314:	b29b      	uxth	r3, r3
20001316:	0018      	movs	r0, r3
20001318:	46bd      	mov	sp, r7
2000131a:	b002      	add	sp, #8
2000131c:	bd80      	pop	{r7, pc}

2000131e <GPIO_ReadOutputDataBit>:
2000131e:	b580      	push	{r7, lr}
20001320:	b084      	sub	sp, #16
20001322:	af00      	add	r7, sp, #0
20001324:	6078      	str	r0, [r7, #4]
20001326:	000a      	movs	r2, r1
20001328:	1cbb      	adds	r3, r7, #2
2000132a:	801a      	strh	r2, [r3, #0]
2000132c:	230f      	movs	r3, #15
2000132e:	18fb      	adds	r3, r7, r3
20001330:	2200      	movs	r2, #0
20001332:	701a      	strb	r2, [r3, #0]
20001334:	687b      	ldr	r3, [r7, #4]
20001336:	695b      	ldr	r3, [r3, #20]
20001338:	1cba      	adds	r2, r7, #2
2000133a:	8812      	ldrh	r2, [r2, #0]
2000133c:	4013      	ands	r3, r2
2000133e:	d004      	beq.n	2000134a <GPIO_ReadOutputDataBit+0x2c>
20001340:	230f      	movs	r3, #15
20001342:	18fb      	adds	r3, r7, r3
20001344:	2201      	movs	r2, #1
20001346:	701a      	strb	r2, [r3, #0]
20001348:	e003      	b.n	20001352 <GPIO_ReadOutputDataBit+0x34>
2000134a:	230f      	movs	r3, #15
2000134c:	18fb      	adds	r3, r7, r3
2000134e:	2200      	movs	r2, #0
20001350:	701a      	strb	r2, [r3, #0]
20001352:	230f      	movs	r3, #15
20001354:	18fb      	adds	r3, r7, r3
20001356:	781b      	ldrb	r3, [r3, #0]
20001358:	0018      	movs	r0, r3
2000135a:	46bd      	mov	sp, r7
2000135c:	b004      	add	sp, #16
2000135e:	bd80      	pop	{r7, pc}

20001360 <GPIO_ReadOutputData>:
20001360:	b580      	push	{r7, lr}
20001362:	b082      	sub	sp, #8
20001364:	af00      	add	r7, sp, #0
20001366:	6078      	str	r0, [r7, #4]
20001368:	687b      	ldr	r3, [r7, #4]
2000136a:	695b      	ldr	r3, [r3, #20]
2000136c:	b29b      	uxth	r3, r3
2000136e:	0018      	movs	r0, r3
20001370:	46bd      	mov	sp, r7
20001372:	b002      	add	sp, #8
20001374:	bd80      	pop	{r7, pc}

20001376 <GPIO_SetBits>:
20001376:	b580      	push	{r7, lr}
20001378:	b082      	sub	sp, #8
2000137a:	af00      	add	r7, sp, #0
2000137c:	6078      	str	r0, [r7, #4]
2000137e:	000a      	movs	r2, r1
20001380:	1cbb      	adds	r3, r7, #2
20001382:	801a      	strh	r2, [r3, #0]
20001384:	687b      	ldr	r3, [r7, #4]
20001386:	1cba      	adds	r2, r7, #2
20001388:	8812      	ldrh	r2, [r2, #0]
2000138a:	831a      	strh	r2, [r3, #24]
2000138c:	46c0      	nop			; (mov r8, r8)
2000138e:	46bd      	mov	sp, r7
20001390:	b002      	add	sp, #8
20001392:	bd80      	pop	{r7, pc}

20001394 <GPIO_ResetBits>:
20001394:	b580      	push	{r7, lr}
20001396:	b082      	sub	sp, #8
20001398:	af00      	add	r7, sp, #0
2000139a:	6078      	str	r0, [r7, #4]
2000139c:	000a      	movs	r2, r1
2000139e:	1cbb      	adds	r3, r7, #2
200013a0:	801a      	strh	r2, [r3, #0]
200013a2:	687b      	ldr	r3, [r7, #4]
200013a4:	1cba      	adds	r2, r7, #2
200013a6:	8812      	ldrh	r2, [r2, #0]
200013a8:	835a      	strh	r2, [r3, #26]
200013aa:	46c0      	nop			; (mov r8, r8)
200013ac:	46bd      	mov	sp, r7
200013ae:	b002      	add	sp, #8
200013b0:	bd80      	pop	{r7, pc}

200013b2 <GPIO_WriteBit>:
200013b2:	b580      	push	{r7, lr}
200013b4:	b082      	sub	sp, #8
200013b6:	af00      	add	r7, sp, #0
200013b8:	6078      	str	r0, [r7, #4]
200013ba:	0008      	movs	r0, r1
200013bc:	0011      	movs	r1, r2
200013be:	1cbb      	adds	r3, r7, #2
200013c0:	1c02      	adds	r2, r0, #0
200013c2:	801a      	strh	r2, [r3, #0]
200013c4:	1c7b      	adds	r3, r7, #1
200013c6:	1c0a      	adds	r2, r1, #0
200013c8:	701a      	strb	r2, [r3, #0]
200013ca:	1c7b      	adds	r3, r7, #1
200013cc:	781b      	ldrb	r3, [r3, #0]
200013ce:	2b00      	cmp	r3, #0
200013d0:	d004      	beq.n	200013dc <GPIO_WriteBit+0x2a>
200013d2:	687b      	ldr	r3, [r7, #4]
200013d4:	1cba      	adds	r2, r7, #2
200013d6:	8812      	ldrh	r2, [r2, #0]
200013d8:	831a      	strh	r2, [r3, #24]
200013da:	e003      	b.n	200013e4 <GPIO_WriteBit+0x32>
200013dc:	687b      	ldr	r3, [r7, #4]
200013de:	1cba      	adds	r2, r7, #2
200013e0:	8812      	ldrh	r2, [r2, #0]
200013e2:	835a      	strh	r2, [r3, #26]
200013e4:	46c0      	nop			; (mov r8, r8)
200013e6:	46bd      	mov	sp, r7
200013e8:	b002      	add	sp, #8
200013ea:	bd80      	pop	{r7, pc}

200013ec <GPIO_Write>:
200013ec:	b580      	push	{r7, lr}
200013ee:	b082      	sub	sp, #8
200013f0:	af00      	add	r7, sp, #0
200013f2:	6078      	str	r0, [r7, #4]
200013f4:	000a      	movs	r2, r1
200013f6:	1cbb      	adds	r3, r7, #2
200013f8:	801a      	strh	r2, [r3, #0]
200013fa:	1cbb      	adds	r3, r7, #2
200013fc:	881a      	ldrh	r2, [r3, #0]
200013fe:	687b      	ldr	r3, [r7, #4]
20001400:	615a      	str	r2, [r3, #20]
20001402:	46c0      	nop			; (mov r8, r8)
20001404:	46bd      	mov	sp, r7
20001406:	b002      	add	sp, #8
20001408:	bd80      	pop	{r7, pc}

2000140a <GPIO_ToggleBits>:
2000140a:	b580      	push	{r7, lr}
2000140c:	b082      	sub	sp, #8
2000140e:	af00      	add	r7, sp, #0
20001410:	6078      	str	r0, [r7, #4]
20001412:	000a      	movs	r2, r1
20001414:	1cbb      	adds	r3, r7, #2
20001416:	801a      	strh	r2, [r3, #0]
20001418:	687b      	ldr	r3, [r7, #4]
2000141a:	695a      	ldr	r2, [r3, #20]
2000141c:	1cbb      	adds	r3, r7, #2
2000141e:	881b      	ldrh	r3, [r3, #0]
20001420:	405a      	eors	r2, r3
20001422:	687b      	ldr	r3, [r7, #4]
20001424:	615a      	str	r2, [r3, #20]
20001426:	46c0      	nop			; (mov r8, r8)
20001428:	46bd      	mov	sp, r7
2000142a:	b002      	add	sp, #8
2000142c:	bd80      	pop	{r7, pc}

2000142e <GPIO_PinAFConfig>:
2000142e:	b580      	push	{r7, lr}
20001430:	b084      	sub	sp, #16
20001432:	af00      	add	r7, sp, #0
20001434:	6078      	str	r0, [r7, #4]
20001436:	0008      	movs	r0, r1
20001438:	0011      	movs	r1, r2
2000143a:	1cbb      	adds	r3, r7, #2
2000143c:	1c02      	adds	r2, r0, #0
2000143e:	801a      	strh	r2, [r3, #0]
20001440:	1c7b      	adds	r3, r7, #1
20001442:	1c0a      	adds	r2, r1, #0
20001444:	701a      	strb	r2, [r3, #0]
20001446:	2300      	movs	r3, #0
20001448:	60fb      	str	r3, [r7, #12]
2000144a:	2300      	movs	r3, #0
2000144c:	60bb      	str	r3, [r7, #8]
2000144e:	1c7b      	adds	r3, r7, #1
20001450:	781a      	ldrb	r2, [r3, #0]
20001452:	1cbb      	adds	r3, r7, #2
20001454:	881b      	ldrh	r3, [r3, #0]
20001456:	2107      	movs	r1, #7
20001458:	400b      	ands	r3, r1
2000145a:	009b      	lsls	r3, r3, #2
2000145c:	409a      	lsls	r2, r3
2000145e:	0013      	movs	r3, r2
20001460:	60fb      	str	r3, [r7, #12]
20001462:	1cbb      	adds	r3, r7, #2
20001464:	881b      	ldrh	r3, [r3, #0]
20001466:	08db      	lsrs	r3, r3, #3
20001468:	b29b      	uxth	r3, r3
2000146a:	001a      	movs	r2, r3
2000146c:	687b      	ldr	r3, [r7, #4]
2000146e:	3208      	adds	r2, #8
20001470:	0092      	lsls	r2, r2, #2
20001472:	58d3      	ldr	r3, [r2, r3]
20001474:	1cba      	adds	r2, r7, #2
20001476:	8812      	ldrh	r2, [r2, #0]
20001478:	2107      	movs	r1, #7
2000147a:	400a      	ands	r2, r1
2000147c:	0092      	lsls	r2, r2, #2
2000147e:	210f      	movs	r1, #15
20001480:	4091      	lsls	r1, r2
20001482:	000a      	movs	r2, r1
20001484:	43d2      	mvns	r2, r2
20001486:	1cb9      	adds	r1, r7, #2
20001488:	8809      	ldrh	r1, [r1, #0]
2000148a:	08c9      	lsrs	r1, r1, #3
2000148c:	b289      	uxth	r1, r1
2000148e:	0008      	movs	r0, r1
20001490:	401a      	ands	r2, r3
20001492:	0011      	movs	r1, r2
20001494:	687b      	ldr	r3, [r7, #4]
20001496:	0002      	movs	r2, r0
20001498:	3208      	adds	r2, #8
2000149a:	0092      	lsls	r2, r2, #2
2000149c:	50d1      	str	r1, [r2, r3]
2000149e:	1cbb      	adds	r3, r7, #2
200014a0:	881b      	ldrh	r3, [r3, #0]
200014a2:	08db      	lsrs	r3, r3, #3
200014a4:	b29b      	uxth	r3, r3
200014a6:	001a      	movs	r2, r3
200014a8:	687b      	ldr	r3, [r7, #4]
200014aa:	3208      	adds	r2, #8
200014ac:	0092      	lsls	r2, r2, #2
200014ae:	58d3      	ldr	r3, [r2, r3]
200014b0:	68fa      	ldr	r2, [r7, #12]
200014b2:	4313      	orrs	r3, r2
200014b4:	60bb      	str	r3, [r7, #8]
200014b6:	1cbb      	adds	r3, r7, #2
200014b8:	881b      	ldrh	r3, [r3, #0]
200014ba:	08db      	lsrs	r3, r3, #3
200014bc:	b29b      	uxth	r3, r3
200014be:	001a      	movs	r2, r3
200014c0:	687b      	ldr	r3, [r7, #4]
200014c2:	3208      	adds	r2, #8
200014c4:	0092      	lsls	r2, r2, #2
200014c6:	68b9      	ldr	r1, [r7, #8]
200014c8:	50d1      	str	r1, [r2, r3]
200014ca:	46c0      	nop			; (mov r8, r8)
200014cc:	46bd      	mov	sp, r7
200014ce:	b004      	add	sp, #16
200014d0:	bd80      	pop	{r7, pc}
200014d2:	46c0      	nop			; (mov r8, r8)

200014d4 <__udivsi3>:
200014d4:	2200      	movs	r2, #0
200014d6:	0843      	lsrs	r3, r0, #1
200014d8:	428b      	cmp	r3, r1
200014da:	d374      	bcc.n	200015c6 <__udivsi3+0xf2>
200014dc:	0903      	lsrs	r3, r0, #4
200014de:	428b      	cmp	r3, r1
200014e0:	d35f      	bcc.n	200015a2 <__udivsi3+0xce>
200014e2:	0a03      	lsrs	r3, r0, #8
200014e4:	428b      	cmp	r3, r1
200014e6:	d344      	bcc.n	20001572 <__udivsi3+0x9e>
200014e8:	0b03      	lsrs	r3, r0, #12
200014ea:	428b      	cmp	r3, r1
200014ec:	d328      	bcc.n	20001540 <__udivsi3+0x6c>
200014ee:	0c03      	lsrs	r3, r0, #16
200014f0:	428b      	cmp	r3, r1
200014f2:	d30d      	bcc.n	20001510 <__udivsi3+0x3c>
200014f4:	22ff      	movs	r2, #255	; 0xff
200014f6:	0209      	lsls	r1, r1, #8
200014f8:	ba12      	rev	r2, r2
200014fa:	0c03      	lsrs	r3, r0, #16
200014fc:	428b      	cmp	r3, r1
200014fe:	d302      	bcc.n	20001506 <__udivsi3+0x32>
20001500:	1212      	asrs	r2, r2, #8
20001502:	0209      	lsls	r1, r1, #8
20001504:	d065      	beq.n	200015d2 <__udivsi3+0xfe>
20001506:	0b03      	lsrs	r3, r0, #12
20001508:	428b      	cmp	r3, r1
2000150a:	d319      	bcc.n	20001540 <__udivsi3+0x6c>
2000150c:	e000      	b.n	20001510 <__udivsi3+0x3c>
2000150e:	0a09      	lsrs	r1, r1, #8
20001510:	0bc3      	lsrs	r3, r0, #15
20001512:	428b      	cmp	r3, r1
20001514:	d301      	bcc.n	2000151a <__udivsi3+0x46>
20001516:	03cb      	lsls	r3, r1, #15
20001518:	1ac0      	subs	r0, r0, r3
2000151a:	4152      	adcs	r2, r2
2000151c:	0b83      	lsrs	r3, r0, #14
2000151e:	428b      	cmp	r3, r1
20001520:	d301      	bcc.n	20001526 <__udivsi3+0x52>
20001522:	038b      	lsls	r3, r1, #14
20001524:	1ac0      	subs	r0, r0, r3
20001526:	4152      	adcs	r2, r2
20001528:	0b43      	lsrs	r3, r0, #13
2000152a:	428b      	cmp	r3, r1
2000152c:	d301      	bcc.n	20001532 <__udivsi3+0x5e>
2000152e:	034b      	lsls	r3, r1, #13
20001530:	1ac0      	subs	r0, r0, r3
20001532:	4152      	adcs	r2, r2
20001534:	0b03      	lsrs	r3, r0, #12
20001536:	428b      	cmp	r3, r1
20001538:	d301      	bcc.n	2000153e <__udivsi3+0x6a>
2000153a:	030b      	lsls	r3, r1, #12
2000153c:	1ac0      	subs	r0, r0, r3
2000153e:	4152      	adcs	r2, r2
20001540:	0ac3      	lsrs	r3, r0, #11
20001542:	428b      	cmp	r3, r1
20001544:	d301      	bcc.n	2000154a <__udivsi3+0x76>
20001546:	02cb      	lsls	r3, r1, #11
20001548:	1ac0      	subs	r0, r0, r3
2000154a:	4152      	adcs	r2, r2
2000154c:	0a83      	lsrs	r3, r0, #10
2000154e:	428b      	cmp	r3, r1
20001550:	d301      	bcc.n	20001556 <__udivsi3+0x82>
20001552:	028b      	lsls	r3, r1, #10
20001554:	1ac0      	subs	r0, r0, r3
20001556:	4152      	adcs	r2, r2
20001558:	0a43      	lsrs	r3, r0, #9
2000155a:	428b      	cmp	r3, r1
2000155c:	d301      	bcc.n	20001562 <__udivsi3+0x8e>
2000155e:	024b      	lsls	r3, r1, #9
20001560:	1ac0      	subs	r0, r0, r3
20001562:	4152      	adcs	r2, r2
20001564:	0a03      	lsrs	r3, r0, #8
20001566:	428b      	cmp	r3, r1
20001568:	d301      	bcc.n	2000156e <__udivsi3+0x9a>
2000156a:	020b      	lsls	r3, r1, #8
2000156c:	1ac0      	subs	r0, r0, r3
2000156e:	4152      	adcs	r2, r2
20001570:	d2cd      	bcs.n	2000150e <__udivsi3+0x3a>
20001572:	09c3      	lsrs	r3, r0, #7
20001574:	428b      	cmp	r3, r1
20001576:	d301      	bcc.n	2000157c <__udivsi3+0xa8>
20001578:	01cb      	lsls	r3, r1, #7
2000157a:	1ac0      	subs	r0, r0, r3
2000157c:	4152      	adcs	r2, r2
2000157e:	0983      	lsrs	r3, r0, #6
20001580:	428b      	cmp	r3, r1
20001582:	d301      	bcc.n	20001588 <__udivsi3+0xb4>
20001584:	018b      	lsls	r3, r1, #6
20001586:	1ac0      	subs	r0, r0, r3
20001588:	4152      	adcs	r2, r2
2000158a:	0943      	lsrs	r3, r0, #5
2000158c:	428b      	cmp	r3, r1
2000158e:	d301      	bcc.n	20001594 <__udivsi3+0xc0>
20001590:	014b      	lsls	r3, r1, #5
20001592:	1ac0      	subs	r0, r0, r3
20001594:	4152      	adcs	r2, r2
20001596:	0903      	lsrs	r3, r0, #4
20001598:	428b      	cmp	r3, r1
2000159a:	d301      	bcc.n	200015a0 <__udivsi3+0xcc>
2000159c:	010b      	lsls	r3, r1, #4
2000159e:	1ac0      	subs	r0, r0, r3
200015a0:	4152      	adcs	r2, r2
200015a2:	08c3      	lsrs	r3, r0, #3
200015a4:	428b      	cmp	r3, r1
200015a6:	d301      	bcc.n	200015ac <__udivsi3+0xd8>
200015a8:	00cb      	lsls	r3, r1, #3
200015aa:	1ac0      	subs	r0, r0, r3
200015ac:	4152      	adcs	r2, r2
200015ae:	0883      	lsrs	r3, r0, #2
200015b0:	428b      	cmp	r3, r1
200015b2:	d301      	bcc.n	200015b8 <__udivsi3+0xe4>
200015b4:	008b      	lsls	r3, r1, #2
200015b6:	1ac0      	subs	r0, r0, r3
200015b8:	4152      	adcs	r2, r2
200015ba:	0843      	lsrs	r3, r0, #1
200015bc:	428b      	cmp	r3, r1
200015be:	d301      	bcc.n	200015c4 <__udivsi3+0xf0>
200015c0:	004b      	lsls	r3, r1, #1
200015c2:	1ac0      	subs	r0, r0, r3
200015c4:	4152      	adcs	r2, r2
200015c6:	1a41      	subs	r1, r0, r1
200015c8:	d200      	bcs.n	200015cc <__udivsi3+0xf8>
200015ca:	4601      	mov	r1, r0
200015cc:	4152      	adcs	r2, r2
200015ce:	4610      	mov	r0, r2
200015d0:	4770      	bx	lr
200015d2:	e7ff      	b.n	200015d4 <__udivsi3+0x100>
200015d4:	b501      	push	{r0, lr}
200015d6:	2000      	movs	r0, #0
200015d8:	f000 f806 	bl	200015e8 <__aeabi_idiv0>
200015dc:	bd02      	pop	{r1, pc}
200015de:	46c0      	nop			; (mov r8, r8)

200015e0 <__aeabi_uidivmod>:
200015e0:	2900      	cmp	r1, #0
200015e2:	d0f7      	beq.n	200015d4 <__udivsi3+0x100>
200015e4:	e776      	b.n	200014d4 <__udivsi3>
200015e6:	4770      	bx	lr

200015e8 <__aeabi_idiv0>:
200015e8:	4770      	bx	lr
200015ea:	46c0      	nop			; (mov r8, r8)

200015ec <msTicks>:
200015ec:	00000000 	andeq	r0, r0, r0

200015f0 <APBAHBPrescTable>:
200015f0:	00000000 	andeq	r0, r0, r0
200015f4:	04030201 	streq	r0, [r3], #-513	; 0xfffffdff
200015f8:	04030201 	streq	r0, [r3], #-513	; 0xfffffdff
200015fc:	09080706 	stmdbeq	r8, {r1, r2, r8, r9, sl}
20001600:	03010000 	movweq	r0, #4096	; 0x1000
20001604:	00000000 	andeq	r0, r0, r0
20001608:	00000008 	andeq	r0, r0, r8
2000160c:	00000004 	andeq	r0, r0, r4
20001610:	00000000 	andeq	r0, r0, r0
20001614:	03010001 	movweq	r0, #4097	; 0x1001
20001618:	00000000 	andeq	r0, r0, r0
2000161c:	00000020 	andeq	r0, r0, r0, lsr #32
20001620:	00000010 	andeq	r0, r0, r0, lsl r0
20001624:	00000000 	andeq	r0, r0, r0
20001628:	03010002 	movweq	r0, #4098	; 0x1002
2000162c:	00000000 	andeq	r0, r0, r0
20001630:	00000002 	andeq	r0, r0, r2
20001634:	00000001 	andeq	r0, r0, r1
20001638:	00000000 	andeq	r0, r0, r0

Disassembly of section .debug_info:

00000000 <.debug_info>:
       0:	00001743 	andeq	r1, r0, r3, asr #14
       4:	00000004 	andeq	r0, r0, r4
       8:	01040000 	mrseq	r0, (UNDEF: 4)
       c:	000005d8 	ldrdeq	r0, [r0], -r8
      10:	000d760c 	andeq	r7, sp, ip, lsl #12
      14:	00053800 	andeq	r3, r5, r0, lsl #16
	...
      24:	0f8d0200 	svceq	0x008d0200
      28:	01050000 	mrseq	r0, (UNDEF: 5)
      2c:	00000253 	andeq	r0, r0, r3, asr r2
      30:	0253c804 	subseq	ip, r3, #4, 16	; 0x40000
      34:	a0030000 	andge	r0, r3, r0
      38:	72000007 	andvc	r0, r0, #7
      3c:	00081b03 	andeq	r1, r8, r3, lsl #22
      40:	e0037400 	and	r7, r3, r0, lsl #8
      44:	75000008 	strvc	r0, [r0, #-8]
      48:	00048103 	andeq	r8, r4, r3, lsl #2
      4c:	bd037600 	stclt	6, cr7, [r3, #-0]
      50:	7b000009 	blvc	7c <startup-0x1fffff84>
      54:	000e6a03 	andeq	r6, lr, r3, lsl #20
      58:	d7037c00 	strle	r7, [r3, -r0, lsl #24]
      5c:	7e000010 	mcrvc	0, 0, r0, cr0, cr0, {0}
      60:	00032d03 	andeq	r2, r3, r3, lsl #26
      64:	b4047f00 	strlt	r7, [r4], #-3840	; 0xfffff100
      68:	00000007 	andeq	r0, r0, r7
      6c:	0006a604 	andeq	sl, r6, r4, lsl #12
      70:	41040100 	mrsmi	r0, (UNDEF: 20)
      74:	02000008 	andeq	r0, r0, #8
      78:	00000e04 	andeq	r0, r0, r4, lsl #28
      7c:	bb040300 	bllt	100c84 <startup-0x1feff37c>
      80:	04000000 	streq	r0, [r0], #-0
      84:	000f0104 	andeq	r0, pc, r4, lsl #2
      88:	eb040500 	bl	101490 <startup-0x1fefeb70>
      8c:	0600000d 	streq	r0, [r0], -sp
      90:	00072904 	andeq	r2, r7, r4, lsl #18
      94:	1c040700 	stcne	7, cr0, [r4], {-0}
      98:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
      9c:	0010cc04 	andseq	ip, r0, r4, lsl #24
      a0:	a9040900 	stmdbge	r4, {r8, fp}
      a4:	0a00000a 	beq	d4 <startup-0x1fffff2c>
      a8:	000c3404 	andeq	r3, ip, r4, lsl #8
      ac:	58040b00 	stmdapl	r4, {r8, r9, fp}
      b0:	0c00000b 	stceq	0, cr0, [r0], {11}
      b4:	00039e04 	andeq	r9, r3, r4, lsl #28
      b8:	1f040d00 	svcne	0x00040d00
      bc:	0e00000f 	cdpeq	0, 0, cr0, cr0, cr15, {0}
      c0:	000e1d04 	andeq	r1, lr, r4, lsl #26
      c4:	41040f00 	tstmi	r4, r0, lsl #30
      c8:	10000007 	andne	r0, r0, r7
      cc:	00002704 	andeq	r2, r0, r4, lsl #14
      d0:	2c041100 	stfcss	f1, [r4], {-0}
      d4:	1200000d 	andne	r0, r0, #13
      d8:	00073404 	andeq	r3, r7, r4, lsl #8
      dc:	2a041300 	bcs	104ce4 <startup-0x1fefb31c>
      e0:	14000005 	strne	r0, [r0], #-5
      e4:	00101c04 	andseq	r1, r0, r4, lsl #24
      e8:	51041500 	tstpl	r4, r0, lsl #10
      ec:	16000008 	strne	r0, [r0], -r8
      f0:	00104604 	andseq	r4, r0, r4, lsl #12
      f4:	07041700 	streq	r1, [r4, -r0, lsl #14]
      f8:	18000009 	stmdane	r0, {r0, r3}
      fc:	000f7f04 	andeq	r7, pc, r4, lsl #30
     100:	95041900 	strls	r1, [r4, #-2304]	; 0xfffff700
     104:	1a000002 	bne	114 <startup-0x1ffffeec>
     108:	00070e04 	andeq	r0, r7, r4, lsl #28
     10c:	3c041b00 			; <UNDEFINED> instruction: 0x3c041b00
     110:	1c000001 	stcne	0, cr0, [r0], {1}
     114:	000ce004 	andeq	lr, ip, r4
     118:	ce041d00 	cdpgt	13, 0, cr1, cr4, cr0, {0}
     11c:	1e000005 	cdpne	0, 0, cr0, cr0, cr5, {0}
     120:	0006bc04 	andeq	fp, r6, r4, lsl #24
     124:	3a041f00 	bcc	107d2c <startup-0x1fef82d4>
     128:	20000004 	andcs	r0, r0, r4
     12c:	000adb04 	andeq	sp, sl, r4, lsl #22
     130:	b3042100 	movwlt	r2, #16640	; 0x4100
     134:	22000008 	andcs	r0, r0, #8
     138:	0009ab04 	andeq	sl, r9, r4, lsl #22
     13c:	cd042300 	stcgt	3, cr2, [r4, #-0]
     140:	24000001 	strcs	r0, [r0], #-1
     144:	000cea04 	andeq	lr, ip, r4, lsl #20
     148:	31042500 	tstcc	r4, r0, lsl #10
     14c:	2600000f 	strcs	r0, [r0], -pc
     150:	00034904 	andeq	r4, r3, r4, lsl #18
     154:	ae042700 	cdpge	7, 0, cr2, cr4, cr0, {0}
     158:	2800000c 	stmdacs	r0, {r2, r3}
     15c:	000c6604 	andeq	r6, ip, r4, lsl #12
     160:	7f042900 	svcvc	0x00042900
     164:	2a00000a 	bcs	194 <startup-0x1ffffe6c>
     168:	0001d704 	andeq	sp, r1, r4, lsl #14
     16c:	39042b00 	stmdbcc	r4, {r8, r9, fp, sp}
     170:	2c000000 	stccs	0, cr0, [r0], {-0}
     174:	00076a04 	andeq	r6, r7, r4, lsl #20
     178:	99042d00 	stmdbls	r4, {r8, sl, fp, sp}
     17c:	2e000010 	mcrcs	0, 0, r0, cr0, cr0, {0}
     180:	00110804 	andseq	r0, r1, r4, lsl #16
     184:	dc042f00 	stcle	15, cr2, [r4], {-0}
     188:	3000000d 	andcc	r0, r0, sp
     18c:	0010a604 	andseq	sl, r0, r4, lsl #12
     190:	77043100 	strvc	r3, [r4, -r0, lsl #2]
     194:	32000004 	andcc	r0, r0, #4
     198:	0000b104 	andeq	fp, r0, r4, lsl #2
     19c:	4a043300 	bmi	10cda4 <startup-0x1fef325c>
     1a0:	3400000a 	strcc	r0, [r0], #-10
     1a4:	0008fc04 	andeq	pc, r8, r4, lsl #24
     1a8:	b9043500 	stmdblt	r4, {r8, sl, ip, sp}
     1ac:	3600000a 	strcc	r0, [r0], -sl
     1b0:	00096d04 	andeq	r6, r9, r4, lsl #26
     1b4:	76043700 	strvc	r3, [r4], -r0, lsl #14
     1b8:	38000008 	stmdacc	r0, {r3}
     1bc:	00007a04 	andeq	r7, r0, r4, lsl #20
     1c0:	81043900 	tsthi	r4, r0, lsl #18
     1c4:	3a000011 	bcc	210 <startup-0x1ffffdf0>
     1c8:	000b7704 	andeq	r7, fp, r4, lsl #14
     1cc:	f7043b00 			; <UNDEFINED> instruction: 0xf7043b00
     1d0:	3c000003 	stccc	0, cr0, [r0], {3}
     1d4:	000ebc04 	andeq	fp, lr, r4, lsl #24
     1d8:	85043d00 	strhi	r3, [r4, #-3328]	; 0xfffff300
     1dc:	3e000009 	cdpcc	0, 0, cr0, cr0, cr9, {0}
     1e0:	000b9204 	andeq	r9, fp, r4, lsl #4
     1e4:	9f043f00 	svcls	0x00043f00
     1e8:	40000001 	andmi	r0, r0, r1
     1ec:	000d1e04 	andeq	r1, sp, r4, lsl #28
     1f0:	47044100 	strmi	r4, [r4, -r0, lsl #2]
     1f4:	42000004 	andmi	r0, r0, #4
     1f8:	00079404 	andeq	r9, r7, r4, lsl #8
     1fc:	5f044300 	svcpl	0x00044300
     200:	44000002 	strmi	r0, [r0], #-2
     204:	000e3904 	andeq	r3, lr, r4, lsl #18
     208:	82044500 	andhi	r4, r4, #0, 10
     20c:	46000007 	strmi	r0, [r0], -r7
     210:	0001ad04 	andeq	sl, r1, r4, lsl #26
     214:	9c044700 	stcls	7, cr4, [r4], {-0}
     218:	4800000e 	stmdami	r0, {r1, r2, r3}
     21c:	000c9704 	andeq	r9, ip, r4, lsl #14
     220:	d1044900 	tstle	r4, r0, lsl #18
     224:	4a00000f 	bmi	268 <startup-0x1ffffd98>
     228:	0010f504 	andseq	pc, r0, r4, lsl #10
     22c:	be044b00 	vmlalt.f64	d4, d4, d0
     230:	4c000007 	stcmi	0, cr0, [r0], {7}
     234:	00099304 	andeq	r9, r9, r4, lsl #6
     238:	c6044d00 	strgt	r4, [r4], -r0, lsl #26
     23c:	4e000000 	cdpmi	0, 0, cr0, cr0, cr0, {0}
     240:	000ca404 	andeq	sl, ip, r4, lsl #8
     244:	1b044f00 	blne	113e4c <startup-0x1feec1b4>
     248:	50000007 	andpl	r0, r0, r7
     24c:	000a2304 	andeq	r2, sl, r4, lsl #6
     250:	05005100 	streq	r5, [r0, #-256]	; 0xffffff00
     254:	03eb0601 	mvneq	r0, #1048576	; 0x100000
     258:	5f060000 	svcpl	0x00060000
     25c:	04000008 	streq	r0, [r0], #-8
     260:	0025032f 	eoreq	r0, r5, pc, lsr #6
     264:	c3070000 	movwgt	r0, #28672	; 0x7000
     268:	05000001 	streq	r0, [r0, #-1]
     26c:	0002712b 	andeq	r7, r2, fp, lsr #2
     270:	08010500 	stmdaeq	r1, {r8, sl}
     274:	000003e9 	andeq	r0, r0, r9, ror #7
     278:	ee050205 	cdp	2, 0, cr0, cr5, cr5, {0}
     27c:	0700000e 	streq	r0, [r0, -lr]
     280:	000004f8 	strdeq	r0, [r0], -r8
     284:	028a3905 	addeq	r3, sl, #81920	; 0x14000
     288:	02050000 	andeq	r0, r5, #0
     28c:	00107507 	andseq	r7, r0, r7, lsl #10
     290:	111a0700 	tstne	sl, r0, lsl #14
     294:	4d050000 	stcmi	0, cr0, [r5, #-0]
     298:	0000029c 	muleq	r0, ip, r2
     29c:	7c050405 	cfstrsvc	mvf0, [r5], {5}
     2a0:	07000009 	streq	r0, [r0, -r9]
     2a4:	00000925 	andeq	r0, r0, r5, lsr #18
     2a8:	02ae4f05 	adceq	r4, lr, #5, 30
     2ac:	04050000 	streq	r0, [r5], #-0
     2b0:	000cc207 	andeq	ip, ip, r7, lsl #4
     2b4:	05080500 	streq	r0, [r8, #-1280]	; 0xfffffb00
     2b8:	00000977 	andeq	r0, r0, r7, ror r9
     2bc:	bd070805 	stclt	8, cr0, [r7, #-20]	; 0xffffffec
     2c0:	0800000c 	stmdaeq	r0, {r2, r3}
     2c4:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
     2c8:	04050074 	streq	r0, [r5], #-116	; 0xffffff8c
     2cc:	000cc707 	andeq	ip, ip, r7, lsl #14
     2d0:	01c50700 	biceq	r0, r5, r0, lsl #14
     2d4:	18060000 	stmdane	r6, {}	; <UNPREDICTABLE>
     2d8:	00000266 	andeq	r0, r0, r6, ror #4
     2dc:	0002d109 	andeq	sp, r2, r9, lsl #2
     2e0:	02d10a00 	sbcseq	r0, r1, #0, 20
     2e4:	e1090000 	mrs	r0, (UNDEF: 9)
     2e8:	07000002 	streq	r0, [r0, -r2]
     2ec:	000004fa 	strdeq	r0, [r0], -sl
     2f0:	027f2406 	rsbseq	r2, pc, #100663296	; 0x6000000
     2f4:	eb090000 	bl	2402fc <startup-0x1fdbfd04>
     2f8:	07000002 	streq	r0, [r0, -r2]
     2fc:	0000111c 	andeq	r1, r0, ip, lsl r1
     300:	02912c06 	addseq	r2, r1, #1536	; 0x600
     304:	fb090000 	blx	24030e <startup-0x1fdbfcf2>
     308:	07000002 	streq	r0, [r0, -r2]
     30c:	00000927 	andeq	r0, r0, r7, lsr #18
     310:	02a33006 	adceq	r3, r3, #6
     314:	0b090000 	bleq	24031c <startup-0x1fdbfce4>
     318:	0a000003 	beq	32c <startup-0x1ffffcd4>
     31c:	00000316 	andeq	r0, r0, r6, lsl r3
     320:	010e040b 	tsteq	lr, fp, lsl #8
     324:	03dc01a0 	bicseq	r0, ip, #160, 2	; 0x28
     328:	380c0000 	stmdacc	ip, {}	; <UNPREDICTABLE>
     32c:	01000011 	tsteq	r0, r1, lsl r0
     330:	03ec01a2 	mvneq	r0, #-2147483608	; 0x80000028
     334:	0c000000 	stceq	0, cr0, [r0], {-0}
     338:	000003d5 	ldrdeq	r0, [r0], -r5
     33c:	f101a301 			; <UNDEFINED> instruction: 0xf101a301
     340:	20000003 	andcs	r0, r0, r3
     344:	000d470c 	andeq	r4, sp, ip, lsl #14
     348:	01a40100 			; <UNDEFINED> instruction: 0x01a40100
     34c:	000003ec 	andeq	r0, r0, ip, ror #7
     350:	00050c80 	andeq	r0, r5, r0, lsl #25
     354:	a5010000 	strge	r0, [r1, #-0]
     358:	0003f101 	andeq	pc, r3, r1, lsl #2
     35c:	b60da000 	strlt	sl, [sp], -r0
     360:	01000010 	tsteq	r0, r0, lsl r0
     364:	03ec01a6 	mvneq	r0, #-2147483607	; 0x80000029
     368:	01000000 	mrseq	r0, (UNDEF: 0)
     36c:	0004630d 	andeq	r6, r4, sp, lsl #6
     370:	01a70100 			; <UNDEFINED> instruction: 0x01a70100
     374:	000003f1 	strdeq	r0, [r0], -r1
     378:	6e0d0120 	adfvsep	f0, f5, f0
     37c:	01000001 	tsteq	r0, r1
     380:	03ec01a8 	mvneq	r0, #168, 2	; 0x2a
     384:	01800000 	orreq	r0, r0, r0
     388:	00046d0d 	andeq	r6, r4, sp, lsl #26
     38c:	01a90100 			; <UNDEFINED> instruction: 0x01a90100
     390:	000003f1 	strdeq	r0, [r0], -r1
     394:	270d01a0 	strcs	r0, [sp, -r0, lsr #3]
     398:	01000004 	tsteq	r0, r4
     39c:	03ec01aa 	mvneq	r0, #-2147483606	; 0x8000002a
     3a0:	02000000 	andeq	r0, r0, #0
     3a4:	0004090d 	andeq	r0, r4, sp, lsl #18
     3a8:	01ab0100 			; <UNDEFINED> instruction: 0x01ab0100
     3ac:	00000401 	andeq	r0, r0, r1, lsl #8
     3b0:	490e0220 	stmdbmi	lr, {r5, r9}
     3b4:	ac010050 	stcge	0, cr0, [r1], {80}	; 0x50
     3b8:	00042101 	andeq	r2, r4, r1, lsl #2
     3bc:	0d030000 	stceq	0, cr0, [r3, #-0]
     3c0:	00000413 	andeq	r0, r0, r3, lsl r4
     3c4:	2601ad01 	strcs	sl, [r1], -r1, lsl #26
     3c8:	f0000004 			; <UNDEFINED> instruction: 0xf0000004
     3cc:	06b70d03 	ldrteq	r0, [r7], r3, lsl #26
     3d0:	ae010000 	cdpge	0, 0, cr0, cr1, cr0, {0}
     3d4:	00031601 	andeq	r1, r3, r1, lsl #12
     3d8:	000e0000 	andeq	r0, lr, r0
     3dc:	0003160f 	andeq	r1, r3, pc, lsl #12
     3e0:	0003ec00 	andeq	lr, r3, r0, lsl #24
     3e4:	02ca1000 	sbceq	r1, sl, #0
     3e8:	00070000 	andeq	r0, r7, r0
     3ec:	0003dc09 	andeq	sp, r3, r9, lsl #24
     3f0:	030b0f00 	movweq	r0, #48896	; 0xbf00
     3f4:	04010000 	streq	r0, [r1], #-0
     3f8:	ca100000 	bgt	400400 <startup-0x1fbffc00>
     3fc:	17000002 	strne	r0, [r0, -r2]
     400:	030b0f00 	movweq	r0, #48896	; 0xbf00
     404:	04110000 	ldreq	r0, [r1], #-0
     408:	ca100000 	bgt	400410 <startup-0x1fbffbf0>
     40c:	37000002 	strcc	r0, [r0, -r2]
     410:	02dc0f00 	sbcseq	r0, ip, #0, 30
     414:	04210000 	strteq	r0, [r1], #-0
     418:	ca100000 	bgt	400420 <startup-0x1fbffbe0>
     41c:	ef000002 	svc	0x00000002
     420:	04110900 	ldreq	r0, [r1], #-2304	; 0xfffff700
     424:	0b0f0000 	bleq	3c042c <startup-0x1fc3fbd4>
     428:	37000003 	strcc	r0, [r0, -r3]
     42c:	11000004 	tstne	r0, r4
     430:	000002ca 	andeq	r0, r0, sl, asr #5
     434:	06000283 	streq	r0, [r0], -r3, lsl #5
     438:	00000c7d 	andeq	r0, r0, sp, ror ip
     43c:	2001af01 	andcs	sl, r1, r1, lsl #30
     440:	12000003 	andne	r0, r0, #3
     444:	01c0018c 	biceq	r0, r0, ip, lsl #3
     448:	0000055e 	andeq	r0, r0, lr, asr r5
     44c:	0002340c 	andeq	r3, r2, ip, lsl #8
     450:	01c20100 	biceq	r0, r2, r0, lsl #2
     454:	0000031b 	andeq	r0, r0, fp, lsl r3
     458:	035d0c00 	cmpeq	sp, #0, 24
     45c:	c3010000 	movwgt	r0, #4096	; 0x1000
     460:	00031601 	andeq	r1, r3, r1, lsl #12
     464:	ac0c0400 	cfstrsge	mvf0, [ip], {-0}
     468:	01000000 	mrseq	r0, (UNDEF: 0)
     46c:	031601c4 	tsteq	r6, #196, 2	; 0x31
     470:	0c080000 	stceq	0, cr0, [r8], {-0}
     474:	00000204 	andeq	r0, r0, r4, lsl #4
     478:	1601c501 	strne	ip, [r1], -r1, lsl #10
     47c:	0c000003 	stceq	0, cr0, [r0], {3}
     480:	52435313 	subpl	r5, r3, #1275068416	; 0x4c000000
     484:	01c60100 	biceq	r0, r6, r0, lsl #2
     488:	00000316 	andeq	r0, r0, r6, lsl r3
     48c:	43431310 	movtmi	r1, #13072	; 0x3310
     490:	c7010052 	smlsdgt	r1, r2, r0, r0
     494:	00031601 	andeq	r1, r3, r1, lsl #12
     498:	53131400 	tstpl	r3, #0, 8
     49c:	01005048 	tsteq	r0, r8, asr #32
     4a0:	056e01c8 	strbeq	r0, [lr, #-456]!	; 0xfffffe38
     4a4:	0c180000 	ldceq	0, cr0, [r8], {-0}
     4a8:	000006a0 	andeq	r0, r0, r0, lsr #13
     4ac:	1601c901 	strne	ip, [r1], -r1, lsl #18
     4b0:	24000003 	strcs	r0, [r0], #-3
     4b4:	000dff0c 	andeq	pc, sp, ip, lsl #30
     4b8:	01ca0100 	biceq	r0, sl, r0, lsl #2
     4bc:	00000316 	andeq	r0, r0, r6, lsl r3
     4c0:	057b0c28 	ldrbeq	r0, [fp, #-3112]!	; 0xfffff3d8
     4c4:	cb010000 	blgt	404cc <startup-0x1ffbfb34>
     4c8:	00031601 	andeq	r1, r3, r1, lsl #12
     4cc:	ab0c2c00 	blge	30b4d4 <startup-0x1fcf4b2c>
     4d0:	01000004 	tsteq	r0, r4
     4d4:	031601cc 	tsteq	r6, #204, 2	; 0x33
     4d8:	0c300000 	ldceq	0, cr0, [r0], #-0
     4dc:	00000ee8 	andeq	r0, r0, r8, ror #29
     4e0:	1601cd01 	strne	ip, [r1], -r1, lsl #26
     4e4:	34000003 	strcc	r0, [r0], #-3
     4e8:	000b490c 	andeq	r4, fp, ip, lsl #18
     4ec:	01ce0100 	biceq	r0, lr, r0, lsl #2
     4f0:	00000316 	andeq	r0, r0, r6, lsl r3
     4f4:	0dc30c38 	stcleq	12, cr0, [r3, #224]	; 0xe0
     4f8:	cf010000 	svcgt	0x00010000
     4fc:	00031601 	andeq	r1, r3, r1, lsl #12
     500:	50133c00 	andspl	r3, r3, r0, lsl #24
     504:	01005246 	tsteq	r0, r6, asr #4
     508:	058801d0 	streq	r0, [r8, #464]	; 0x1d0
     50c:	13400000 	movtne	r0, #0
     510:	00524644 	subseq	r4, r2, r4, asr #12
     514:	1b01d101 	blne	74920 <startup-0x1ff8b6e0>
     518:	48000003 	stmdami	r0, {r0, r1}
     51c:	52444113 	subpl	r4, r4, #-1073741820	; 0xc0000004
     520:	01d20100 	bicseq	r0, r2, r0, lsl #2
     524:	0000031b 	andeq	r0, r0, fp, lsl r3
     528:	0ed70c4c 	cdpeq	12, 13, cr0, cr7, cr12, {2}
     52c:	d3010000 	movwle	r0, #4096	; 0x1000
     530:	0005a201 	andeq	sl, r5, r1, lsl #4
     534:	1a0c5000 	bne	31453c <startup-0x1fcebac4>
     538:	0100000f 	tsteq	r0, pc
     53c:	05bc01d4 	ldreq	r0, [ip, #468]!	; 0x1d4
     540:	0c600000 	stcleq	0, cr0, [r0], #-0
     544:	000003d5 	ldrdeq	r0, [r0], -r5
     548:	c101d501 	tstgt	r1, r1, lsl #10
     54c:	74000005 	strvc	r0, [r0], #-5
     550:	0010b00c 	andseq	fp, r0, ip
     554:	01d60100 	bicseq	r0, r6, r0, lsl #2
     558:	00000316 	andeq	r0, r0, r6, lsl r3
     55c:	dc0f0088 	stcle	0, cr0, [pc], {136}	; 0x88
     560:	6e000002 	cdpvs	0, 0, cr0, cr0, cr2, {0}
     564:	10000005 	andne	r0, r0, r5
     568:	000002ca 	andeq	r0, r0, sl, asr #5
     56c:	5e09000b 	cdppl	0, 0, cr0, cr9, cr11, {0}
     570:	0f000005 	svceq	0x00000005
     574:	0000031b 	andeq	r0, r0, fp, lsl r3
     578:	00000583 	andeq	r0, r0, r3, lsl #11
     57c:	0002ca10 	andeq	ip, r2, r0, lsl sl
     580:	0a000100 	beq	988 <startup-0x1ffff678>
     584:	00000573 	andeq	r0, r0, r3, ror r5
     588:	00058309 	andeq	r8, r5, r9, lsl #6
     58c:	031b0f00 	tsteq	fp, #0, 30
     590:	059d0000 	ldreq	r0, [sp]
     594:	ca100000 	bgt	40059c <startup-0x1fbffa64>
     598:	03000002 	movweq	r0, #2
     59c:	058d0a00 	streq	r0, [sp, #2560]	; 0xa00
     5a0:	9d090000 	stcls	0, cr0, [r9, #-0]
     5a4:	0f000005 	svceq	0x00000005
     5a8:	0000031b 	andeq	r0, r0, fp, lsl r3
     5ac:	000005b7 			; <UNDEFINED> instruction: 0x000005b7
     5b0:	0002ca10 	andeq	ip, r2, r0, lsl sl
     5b4:	0a000400 	beq	15bc <startup-0x1fffea44>
     5b8:	000005a7 	andeq	r0, r0, r7, lsr #11
     5bc:	0005b709 	andeq	fp, r5, r9, lsl #14
     5c0:	030b0f00 	movweq	r0, #48896	; 0xbf00
     5c4:	05d10000 	ldrbeq	r0, [r1]
     5c8:	ca100000 	bgt	4005d0 <startup-0x1fbffa30>
     5cc:	04000002 	streq	r0, [r0], #-2
     5d0:	04910600 	ldreq	r0, [r1], #1536	; 0x600
     5d4:	d7010000 	strle	r0, [r1, -r0]
     5d8:	00044301 	andeq	r4, r4, r1, lsl #6
     5dc:	01101200 	tsteq	r0, r0, lsl #4
     5e0:	061b02bf 			; <UNDEFINED> instruction: 0x061b02bf
     5e4:	b40c0000 	strlt	r0, [ip], #-0
     5e8:	0100000a 	tsteq	r0, sl
     5ec:	031602c1 	tsteq	r6, #268435468	; 0x1000000c
     5f0:	0c000000 	stceq	0, cr0, [r0], {-0}
     5f4:	00000e53 	andeq	r0, r0, r3, asr lr
     5f8:	1602c201 	strne	ip, [r2], -r1, lsl #4
     5fc:	04000003 	streq	r0, [r0], #-3
     600:	4c415613 	mcrrmi	6, 1, r5, r1, cr3
     604:	02c30100 	sbceq	r0, r3, #0, 2
     608:	00000316 	andeq	r0, r0, r6, lsl r3
     60c:	0dcf0c08 	stcleq	12, cr0, [pc, #32]	; 634 <startup-0x1ffff9cc>
     610:	c4010000 	strgt	r0, [r1], #-0
     614:	00031b02 	andeq	r1, r3, r2, lsl #22
     618:	06000c00 	streq	r0, [r0], -r0, lsl #24
     61c:	00000bdd 	ldrdeq	r0, [r0], -sp
     620:	dd02c501 	cfstr32le	mvfx12, [r2, #-4]
     624:	0f000005 	svceq	0x00000005
     628:	0000030b 	andeq	r0, r0, fp, lsl #6
     62c:	00000637 	andeq	r0, r0, r7, lsr r6
     630:	0002ca10 	andeq	ip, r2, r0, lsl sl
     634:	14000100 	strne	r0, [r0], #-256	; 0xffffff00
     638:	00000f92 	muleq	r0, r2, pc	; <UNPREDICTABLE>
     63c:	0606fa01 	streq	pc, [r6], -r1, lsl #20
     640:	15000003 	strne	r0, [r0, #-3]
     644:	00000831 	andeq	r0, r0, r1, lsr r8
     648:	030b3b07 	movweq	r3, #47879	; 0xbb07
     64c:	07160000 	ldreq	r0, [r6, -r0]
     650:	00027101 	andeq	r7, r2, r1, lsl #2
     654:	035d0400 	cmpeq	sp, #0, 8
     658:	00000669 	andeq	r0, r0, r9, ror #12
     65c:	00120104 	andseq	r0, r2, r4, lsl #2
     660:	53170000 	tstpl	r7, #0
     664:	01005445 	tsteq	r0, r5, asr #8
     668:	09df0600 	ldmibeq	pc, {r9, sl}^	; <UNPREDICTABLE>
     66c:	5d040000 	stcpl	0, cr0, [r4, #-0]
     670:	00064e03 	andeq	r4, r6, r3, lsl #28
     674:	0aa00600 	beq	fe801e7c <APBAHBPrescTable+0xde80088c>
     678:	5d040000 	stcpl	0, cr0, [r4, #-0]
     67c:	00064e03 	andeq	r4, r6, r3, lsl #28
     680:	01071600 	tsteq	r7, r0, lsl #12
     684:	00000271 	andeq	r0, r0, r1, ror r2
     688:	9c035f04 	stcls	15, cr5, [r3], {4}
     68c:	04000006 	streq	r0, [r0], #-6
     690:	000009b5 			; <UNDEFINED> instruction: 0x000009b5
     694:	0f470400 	svceq	0x00470400
     698:	00010000 	andeq	r0, r1, r0
     69c:	000c8706 	andeq	r8, ip, r6, lsl #14
     6a0:	035f0400 	cmpeq	pc, #0, 8
     6a4:	00000681 	andeq	r0, r0, r1, lsl #13
     6a8:	71010716 	tstvc	r1, r6, lsl r7
     6ac:	04000002 	streq	r0, [r0], #-2
     6b0:	06c30362 	strbeq	r0, [r3], r2, ror #6
     6b4:	ad040000 	stcge	0, cr0, [r4, #-0]
     6b8:	00000008 	andeq	r0, r0, r8
     6bc:	000d0c04 	andeq	r0, sp, r4, lsl #24
     6c0:	06000100 	streq	r0, [r0], -r0, lsl #2
     6c4:	00000c28 	andeq	r0, r0, r8, lsr #24
     6c8:	a8036204 	stmdage	r3, {r2, r9, sp, lr}
     6cc:	12000006 	andne	r0, r0, #6
     6d0:	05c30428 	strbeq	r0, [r3, #1064]	; 0x428
     6d4:	0000075b 	andeq	r0, r0, fp, asr r7
     6d8:	0010050c 	andseq	r0, r0, ip, lsl #10
     6dc:	05c50400 	strbeq	r0, [r5, #1024]	; 0x400
     6e0:	00000316 	andeq	r0, r0, r6, lsl r3
     6e4:	0dc80c00 	stcleq	12, cr0, [r8]
     6e8:	c6040000 	strgt	r0, [r4], -r0
     6ec:	00031605 	andeq	r1, r3, r5, lsl #12
     6f0:	d80c0400 	stmdale	ip, {sl}
     6f4:	04000008 	streq	r0, [r0], #-8
     6f8:	031605c7 	tsteq	r6, #834666496	; 0x31c00000
     6fc:	0c080000 	stceq	0, cr0, [r8], {-0}
     700:	0000099f 	muleq	r0, pc, r9	; <UNPREDICTABLE>
     704:	1605c804 	strne	ip, [r5], -r4, lsl #16
     708:	0c000003 	stceq	0, cr0, [r0], {3}
     70c:	52444913 	subpl	r4, r4, #311296	; 0x4c000
     710:	05c90400 	strbeq	r0, [r9, #1024]	; 0x400
     714:	00000316 	andeq	r0, r0, r6, lsl r3
     718:	444f1310 	strbmi	r1, [pc], #-784	; 720 <startup-0x1ffff8e0>
     71c:	ca040052 	bgt	10086c <startup-0x1feff794>
     720:	00031605 	andeq	r1, r3, r5, lsl #12
     724:	f50c1400 			; <UNDEFINED> instruction: 0xf50c1400
     728:	04000009 	streq	r0, [r0], #-9
     72c:	02f605cb 	rscseq	r0, r6, #851443712	; 0x32c00000
     730:	0c180000 	ldceq	0, cr0, [r8], {-0}
     734:	000009d2 	ldrdeq	r0, [r0], -r2
     738:	f605cc04 			; <UNDEFINED> instruction: 0xf605cc04
     73c:	1a000002 	bne	74c <startup-0x1ffff8b4>
     740:	0008970c 	andeq	r9, r8, ip, lsl #14
     744:	05cd0400 	strbeq	r0, [sp, #1024]	; 0x400
     748:	00000316 	andeq	r0, r0, r6, lsl r3
     74c:	4641131c 			; <UNDEFINED> instruction: 0x4641131c
     750:	ce040052 	mcrgt	0, 0, r0, cr4, cr2, {2}
     754:	00076b05 	andeq	r6, r7, r5, lsl #22
     758:	0f002000 	svceq	0x00002000
     75c:	00000316 	andeq	r0, r0, r6, lsl r3
     760:	0000076b 	andeq	r0, r0, fp, ror #14
     764:	0002ca10 	andeq	ip, r2, r0, lsl sl
     768:	09000100 	stmdbeq	r0, {r8}
     76c:	0000075b 	andeq	r0, r0, fp, asr r7
     770:	000f7206 	andeq	r7, pc, r6, lsl #4
     774:	05cf0400 	strbeq	r0, [pc, #1024]	; b7c <startup-0x1ffff484>
     778:	000006cf 	andeq	r0, r0, pc, asr #13
     77c:	64049812 	strvs	r9, [r4], #-2066	; 0xfffff7ee
     780:	00093f06 	andeq	r3, r9, r6, lsl #30
     784:	52431300 	subpl	r1, r3, #0, 6
     788:	06660400 	strbteq	r0, [r6], -r0, lsl #8
     78c:	00000316 	andeq	r0, r0, r6, lsl r3
     790:	08f40c00 	ldmeq	r4!, {sl, fp}^
     794:	67040000 	strvs	r0, [r4, -r0]
     798:	00031606 	andeq	r1, r3, r6, lsl #12
     79c:	590c0400 	stmdbpl	ip, {sl}
     7a0:	04000010 	streq	r0, [r0], #-16
     7a4:	03160668 	tsteq	r6, #104, 12	; 0x6800000
     7a8:	13080000 	movwne	r0, #32768	; 0x8000
     7ac:	00524943 	subseq	r4, r2, r3, asr #18
     7b0:	16066904 	strne	r6, [r6], -r4, lsl #18
     7b4:	0c000003 	stceq	0, cr0, [r0], {3}
     7b8:	0004b00c 	andeq	fp, r4, ip
     7bc:	066a0400 	strbteq	r0, [sl], -r0, lsl #8
     7c0:	00000316 	andeq	r0, r0, r6, lsl r3
     7c4:	0eb30c10 	mrceq	12, 5, r0, cr3, cr0, {0}
     7c8:	6b040000 	blvs	1007d0 <startup-0x1feff830>
     7cc:	00031606 	andeq	r1, r3, r6, lsl #12
     7d0:	1a0c1400 	bne	3057d8 <startup-0x1fcfa828>
     7d4:	0400000c 	streq	r0, [r0], #-12
     7d8:	0316066c 	tsteq	r6, #108, 12	; 0x6c00000
     7dc:	0c180000 	ldceq	0, cr0, [r8], {-0}
     7e0:	000003d5 	ldrdeq	r0, [r0], -r5
     7e4:	0b066d04 	bleq	19bbfc <startup-0x1fe64404>
     7e8:	1c000003 	stcne	0, cr0, [r0], {3}
     7ec:	000c5d0c 	andeq	r5, ip, ip, lsl #26
     7f0:	066e0400 	strbteq	r0, [lr], -r0, lsl #8
     7f4:	00000316 	andeq	r0, r0, r6, lsl r3
     7f8:	09c90c20 	stmibeq	r9, {r5, sl, fp}^
     7fc:	6f040000 	svcvs	0x00040000
     800:	00031606 	andeq	r1, r3, r6, lsl #12
     804:	df0c2400 	svcle	0x000c2400
     808:	04000003 	streq	r0, [r0], #-3
     80c:	06270670 			; <UNDEFINED> instruction: 0x06270670
     810:	0c280000 	stceq	0, cr0, [r8], #-0
     814:	00000e4b 	andeq	r0, r0, fp, asr #28
     818:	16067104 	strne	r7, [r6], -r4, lsl #2
     81c:	30000003 	andcc	r0, r0, r3
     820:	0005030c 	andeq	r0, r5, ip, lsl #6
     824:	06720400 	ldrbteq	r0, [r2], -r0, lsl #8
     828:	00000316 	andeq	r0, r0, r6, lsl r3
     82c:	11680c34 	cmnne	r8, r4, lsr ip
     830:	73040000 	movwvc	r0, #16384	; 0x4000
     834:	00031606 	andeq	r1, r3, r6, lsl #12
     838:	630c3800 	movwvs	r3, #51200	; 0xc800
     83c:	04000004 	streq	r0, [r0], #-4
     840:	030b0674 	movweq	r0, #46708	; 0xb674
     844:	0c3c0000 	ldceq	0, cr0, [ip], #-0
     848:	00000c75 	andeq	r0, r0, r5, ror ip
     84c:	16067504 	strne	r7, [r6], -r4, lsl #10
     850:	40000003 	andmi	r0, r0, r3
     854:	0002f80c 	andeq	pc, r2, ip, lsl #16
     858:	06760400 	ldrbteq	r0, [r6], -r0, lsl #8
     85c:	00000316 	andeq	r0, r0, r6, lsl r3
     860:	046d0c44 	strbteq	r0, [sp], #-3140	; 0xfffff3bc
     864:	77040000 	strvc	r0, [r4, -r0]
     868:	00062706 	andeq	r2, r6, r6, lsl #14
     86c:	140c4800 	strne	r4, [ip], #-2048	; 0xfffff800
     870:	04000003 	streq	r0, [r0], #-3
     874:	03160678 	tsteq	r6, #120, 12	; 0x7800000
     878:	0c500000 	mraeq	r0, r0, acc0
     87c:	000001eb 	andeq	r0, r0, fp, ror #3
     880:	16067904 	strne	r7, [r6], -r4, lsl #18
     884:	54000003 	strpl	r0, [r0], #-3
     888:	000d4c0c 	andeq	r4, sp, ip, lsl #24
     88c:	067a0400 	ldrbteq	r0, [sl], -r0, lsl #8
     890:	00000316 	andeq	r0, r0, r6, lsl r3
     894:	04090c58 	streq	r0, [r9], #-3160	; 0xfffff3a8
     898:	7b040000 	blvc	1008a0 <startup-0x1feff760>
     89c:	00030b06 	andeq	r0, r3, r6, lsl #22
     8a0:	4e0c5c00 	cdpmi	12, 0, cr5, cr12, cr0, {0}
     8a4:	0400000b 	streq	r0, [r0], #-11
     8a8:	0316067c 	tsteq	r6, #124, 12	; 0x7c00000
     8ac:	0c600000 	stcleq	0, cr0, [r0], #-0
     8b0:	00000a55 	andeq	r0, r0, r5, asr sl
     8b4:	16067d04 	strne	r7, [r6], -r4, lsl #26
     8b8:	64000003 	strvs	r0, [r0], #-3
     8bc:	0004130c 	andeq	r1, r4, ip, lsl #6
     8c0:	067e0400 	ldrbteq	r0, [lr], -r0, lsl #8
     8c4:	00000627 	andeq	r0, r0, r7, lsr #12
     8c8:	069b0c68 	ldreq	r0, [fp], r8, ror #24
     8cc:	7f040000 	svcvc	0x00040000
     8d0:	00031606 	andeq	r1, r3, r6, lsl #12
     8d4:	43137000 	tstmi	r3, #0
     8d8:	04005253 	streq	r5, [r0], #-595	; 0xfffffdad
     8dc:	03160680 	tsteq	r6, #128, 12	; 0x8000000
     8e0:	0c740000 	ldcleq	0, cr0, [r4], #-0
     8e4:	0000041d 	andeq	r0, r0, sp, lsl r4
     8e8:	27068104 	strcs	r8, [r6, -r4, lsl #2]
     8ec:	78000006 	stmdavc	r0, {r1, r2}
     8f0:	0009a50c 	andeq	sl, r9, ip, lsl #10
     8f4:	06820400 	streq	r0, [r2], r0, lsl #8
     8f8:	00000316 	andeq	r0, r0, r6, lsl r3
     8fc:	004c0c80 	subeq	r0, ip, r0, lsl #25
     900:	83040000 	movwhi	r0, #16384	; 0x4000
     904:	00031606 	andeq	r1, r3, r6, lsl #12
     908:	530c8400 	movwpl	r8, #50176	; 0xc400
     90c:	04000010 	streq	r0, [r0], #-16
     910:	03160684 	tsteq	r6, #132, 12	; 0x8400000
     914:	0c880000 	stceq	0, cr0, [r8], {0}
     918:	00000355 	andeq	r0, r0, r5, asr r3
     91c:	16068504 	strne	r8, [r6], -r4, lsl #10
     920:	8c000003 	stchi	0, cr0, [r0], {3}
     924:	000b890c 	andeq	r8, fp, ip, lsl #18
     928:	06860400 	streq	r0, [r6], r0, lsl #8
     92c:	00000316 	andeq	r0, r0, r6, lsl r3
     930:	0df60c90 	ldcleq	12, cr0, [r6, #576]!	; 0x240
     934:	87040000 	strhi	r0, [r4, -r0]
     938:	00031606 	andeq	r1, r3, r6, lsl #12
     93c:	06009400 	streq	r9, [r0], -r0, lsl #8
     940:	00000edc 	ldrdeq	r0, [r0], -ip
     944:	7c068904 			; <UNDEFINED> instruction: 0x7c068904
     948:	18000007 	stmdane	r0, {r0, r1, r2}
     94c:	84300810 	ldrthi	r0, [r0], #-2064	; 0xfffff7f0
     950:	19000009 	stmdbne	r0, {r0, r3}
     954:	000010bb 	strheq	r1, [r0], -fp
     958:	030b3208 	movweq	r3, #45576	; 0xb208
     95c:	19000000 	stmdbne	r0, {}	; <UNPREDICTABLE>
     960:	0000008c 	andeq	r0, r0, ip, lsl #1
     964:	030b3308 	movweq	r3, #45832	; 0xb308
     968:	19040000 	stmdbne	r4, {}	; <UNPREDICTABLE>
     96c:	00000595 	muleq	r0, r5, r5
     970:	030b3408 	movweq	r3, #46088	; 0xb408
     974:	19080000 	stmdbne	r8, {}	; <UNPREDICTABLE>
     978:	0000050b 	andeq	r0, r0, fp, lsl #10
     97c:	030b3508 	movweq	r3, #46344	; 0xb508
     980:	000c0000 	andeq	r0, ip, r0
     984:	000ec507 	andeq	ip, lr, r7, lsl #10
     988:	4b360800 	blmi	d82990 <startup-0x1f27d670>
     98c:	0f000009 	svceq	0x00000009
     990:	000002e6 	andeq	r0, r0, r6, ror #5
     994:	0000099f 	muleq	r0, pc, r9	; <UNPREDICTABLE>
     998:	0002ca10 	andeq	ip, r2, r0, lsl sl
     99c:	0a000f00 	beq	45a4 <startup-0x1fffba5c>
     9a0:	0000098f 	andeq	r0, r0, pc, lsl #19
     9a4:	00099f09 	andeq	r9, r9, r9, lsl #30
     9a8:	09301a00 	ldmdbeq	r0!, {r9, fp, ip}
     9ac:	99020000 	stmdbls	r2, {}	; <UNPREDICTABLE>
     9b0:	000009a4 	andeq	r0, r0, r4, lsr #19
     9b4:	15f00305 	ldrbne	r0, [r0, #773]!	; 0x305
     9b8:	071b2000 	ldreq	r2, [fp, -r0]
     9bc:	00027101 	andeq	r7, r2, r1, lsl #2
     9c0:	e0420900 	sub	r0, r2, r0, lsl #18
     9c4:	04000009 	streq	r0, [r0], #-9
     9c8:	00000869 	andeq	r0, r0, r9, ror #16
     9cc:	07000400 	streq	r0, [r0, -r0, lsl #8]
     9d0:	04010000 	streq	r0, [r1], #-0
     9d4:	00000271 	andeq	r0, r0, r1, ror r2
     9d8:	02ad0402 	adceq	r0, sp, #33554432	; 0x2000000
     9dc:	00030000 	andeq	r0, r3, r0
     9e0:	000d5607 	andeq	r5, sp, r7, lsl #12
     9e4:	ba470900 	blt	11c2dec <startup-0x1ee3d214>
     9e8:	1b000009 	blne	a14 <startup-0x1ffff5ec>
     9ec:	02710107 	rsbseq	r0, r1, #-1073741823	; 0xc0000001
     9f0:	4f090000 	svcmi	0x00090000
     9f4:	00000a05 	andeq	r0, r0, r5, lsl #20
     9f8:	00042c04 	andeq	r2, r4, r4, lsl #24
     9fc:	6e040000 	cdpvs	0, 0, cr0, cr4, cr0, {0}
     a00:	01000003 	tsteq	r0, r3
     a04:	010a0700 	tsteq	sl, r0, lsl #14
     a08:	52090000 	andpl	r0, r9, #0
     a0c:	000009eb 	andeq	r0, r0, fp, ror #19
     a10:	7101071b 	tstvc	r1, fp, lsl r7
     a14:	09000002 	stmdbeq	r0, {r1}
     a18:	000a365a 	andeq	r3, sl, sl, asr r6
     a1c:	051b0400 	ldreq	r0, [fp, #-1024]	; 0xfffffc00
     a20:	04000000 	streq	r0, [r0], #-0
     a24:	00000941 	andeq	r0, r0, r1, asr #18
     a28:	11930401 	orrsne	r0, r3, r1, lsl #8
     a2c:	04020000 	streq	r0, [r2], #-0
     a30:	000009fb 	strdeq	r0, [r0], -fp
     a34:	58070003 	stmdapl	r7, {r0, r1}
     a38:	0900000e 	stmdbeq	r0, {r1, r2, r3}
     a3c:	000a105f 	andeq	r1, sl, pc, asr r0
     a40:	01071b00 	tsteq	r7, r0, lsl #22
     a44:	00000271 	andeq	r0, r0, r1, ror r2
     a48:	0a616e09 	beq	185c274 <startup-0x1e7a3d8c>
     a4c:	9b040000 	blls	100a54 <startup-0x1feff5ac>
     a50:	00000000 	andeq	r0, r0, r0
     a54:	00103904 	andseq	r3, r0, r4, lsl #18
     a58:	f5040100 			; <UNDEFINED> instruction: 0xf5040100
     a5c:	02000001 	andeq	r0, r0, #1
     a60:	049a0700 	ldreq	r0, [sl], #1792	; 0x700
     a64:	72090000 	andvc	r0, r9, #0
     a68:	00000a41 	andeq	r0, r0, r1, asr #20
     a6c:	84090818 	strhi	r0, [r9], #-2072	; 0xfffff7e8
     a70:	00000ab1 			; <UNDEFINED> instruction: 0x00000ab1
     a74:	000e7c19 	andeq	r7, lr, r9, lsl ip
     a78:	0b860900 	bleq	fe182e80 <APBAHBPrescTable+0xde181890>
     a7c:	00000003 	andeq	r0, r0, r3
     a80:	000d1419 	andeq	r1, sp, r9, lsl r4
     a84:	e0890900 	add	r0, r9, r0, lsl #18
     a88:	04000009 	streq	r0, [r0], #-9
     a8c:	000ad019 	andeq	sp, sl, r9, lsl r0
     a90:	368c0900 	strcc	r0, [ip], r0, lsl #18
     a94:	0500000a 	streq	r0, [r0, #-10]
     a98:	00091a19 	andeq	r1, r9, r9, lsl sl
     a9c:	058f0900 	streq	r0, [pc, #2304]	; 13a4 <startup-0x1fffec5c>
     aa0:	0600000a 	streq	r0, [r0], -sl
     aa4:	000ea919 	andeq	sl, lr, r9, lsl r9
     aa8:	61920900 	orrsvs	r0, r2, r0, lsl #18
     aac:	0700000a 	streq	r0, [r0, -sl]
     ab0:	037c0700 	cmneq	ip, #0, 14
     ab4:	94090000 	strls	r0, [r9], #-0
     ab8:	00000a6c 	andeq	r0, r0, ip, ror #20
     abc:	0008c01c 	andeq	ip, r8, ip, lsl r0
     ac0:	161f0300 	ldrne	r0, [pc], -r0, lsl #6
     ac4:	05000003 	streq	r0, [r0, #-3]
     ac8:	0015ec03 	andseq	lr, r5, r3, lsl #24
     acc:	0b711d20 	bleq	1c47f54 <startup-0x1e3b80ac>
     ad0:	03140000 	tsteq	r4, #0
     ad4:	000b3920 	andeq	r3, fp, r0, lsr #18
     ad8:	64691e00 	strbtvs	r1, [r9], #-3584	; 0xfffff200
     adc:	39220300 	stmdbcc	r2!, {r8, r9}
     ae0:	0000000b 	andeq	r0, r0, fp
     ae4:	0002ca19 	andeq	ip, r2, r9, lsl sl
     ae8:	39230300 	stmdbcc	r3!, {r8, r9}
     aec:	0100000b 	tsteq	r0, fp
     af0:	0001b919 	andeq	fp, r1, r9, lsl r9
     af4:	39240300 	stmdbcc	r4!, {r8, r9}
     af8:	0200000b 	andeq	r0, r0, #11
     afc:	000bea19 	andeq	lr, fp, r9, lsl sl
     b00:	39250300 	stmdbcc	r5!, {r8, r9}
     b04:	0300000b 	movweq	r0, #11
     b08:	000ef819 	andeq	pc, lr, r9, lsl r8	; <UNPREDICTABLE>
     b0c:	c3260300 			; <UNDEFINED> instruction: 0xc3260300
     b10:	04000002 	streq	r0, [r0], #-2
     b14:	000e2f19 	andeq	r2, lr, r9, lsl pc
     b18:	c3270300 			; <UNDEFINED> instruction: 0xc3270300
     b1c:	08000002 	stmdaeq	r0, {r1}
     b20:	00058019 	andeq	r8, r5, r9, lsl r0
     b24:	c3280300 			; <UNDEFINED> instruction: 0xc3280300
     b28:	0c000002 	stceq	0, cr0, [r0], {2}
     b2c:	000fe519 	andeq	lr, pc, r9, lsl r5	; <UNPREDICTABLE>
     b30:	c3290300 			; <UNDEFINED> instruction: 0xc3290300
     b34:	10000002 	andne	r0, r0, r2
     b38:	08010500 	stmdaeq	r1, {r8, sl}
     b3c:	000003f2 	strdeq	r0, [r0], -r2
     b40:	000c2307 	andeq	r2, ip, r7, lsl #6
     b44:	cd2a0300 	stcgt	3, cr0, [sl, #-0]
     b48:	1f00000a 	svcne	0x0000000a
     b4c:	00000fcc 	andeq	r0, r0, ip, asr #31
     b50:	0e545303 	cdpeq	3, 5, cr5, cr4, cr3, {0}
     b54:	01702000 	cmneq	r0, r0
     b58:	9c010000 	stcls	0, cr0, [r1], {-0}
     b5c:	00000bcc 	andeq	r0, r0, ip, asr #23
     b60:	0010e31a 	andseq	lr, r0, sl, lsl r3
     b64:	40580300 	subsmi	r0, r8, r0, lsl #6
     b68:	0200000b 	andeq	r0, r0, #11
     b6c:	e91a4c91 	ldmdb	sl, {r0, r4, r7, sl, fp, lr}
     b70:	03000010 	movweq	r0, #16
     b74:	000b4059 	andeq	r4, fp, r9, asr r0
     b78:	b8910300 	ldmlt	r1, {r8, r9}
     b7c:	10ef1a7f 	rscne	r1, pc, pc, ror sl	; <UNPREDICTABLE>
     b80:	5a030000 	bpl	c0b88 <startup-0x1ff3f478>
     b84:	00000b40 	andeq	r0, r0, r0, asr #22
     b88:	7fa49103 	svcvc	0x00a49103
     b8c:	000b6a1a 	andeq	r6, fp, sl, lsl sl
     b90:	cc5b0300 	mrrcgt	3, 0, r0, fp, cr0
     b94:	0300000b 	movweq	r0, #11
     b98:	207ee891 			; <UNDEFINED> instruction: 0x207ee891
     b9c:	20000eb6 			; <UNDEFINED> instruction: 0x20000eb6
     ba0:	00000062 	andeq	r0, r0, r2, rrx
     ba4:	00000bb5 			; <UNDEFINED> instruction: 0x00000bb5
     ba8:	03006a21 	movweq	r6, #2593	; 0xa21
     bac:	0002c361 	andeq	ip, r2, r1, ror #6
     bb0:	64910200 	ldrvs	r0, [r1], #512	; 0x200
     bb4:	0f182200 	svceq	0x00182200
     bb8:	00922000 	addseq	r2, r2, r0
     bbc:	69210000 	stmdbvs	r1!, {}	; <UNPREDICTABLE>
     bc0:	c3730300 	cmngt	r3, #0, 6
     bc4:	02000002 	andeq	r0, r0, #2
     bc8:	00006091 	muleq	r0, r1, r0
     bcc:	000b400f 	andeq	r4, fp, pc
     bd0:	000bdc00 	andeq	sp, fp, r0, lsl #24
     bd4:	02ca1000 	sbceq	r1, sl, #0
     bd8:	00020000 	andeq	r0, r2, r0
     bdc:	000ffc1f 	andeq	pc, pc, pc, lsl ip	; <UNPREDICTABLE>
     be0:	28440300 	stmdacs	r4, {r8, r9}^
     be4:	2c20000e 	stccs	0, cr0, [r0], #-56	; 0xffffffc8
     be8:	01000000 	mrseq	r0, (UNDEF: 0)
     bec:	000c009c 	muleq	ip, ip, r0
     bf0:	04d01a00 	ldrbeq	r1, [r0], #2560	; 0xa00
     bf4:	49030000 	stmdbmi	r3, {}	; <UNPREDICTABLE>
     bf8:	0000030b 	andeq	r0, r0, fp, lsl #6
     bfc:	00749102 	rsbseq	r9, r4, r2, lsl #2
     c00:	00023a23 	andeq	r3, r2, r3, lsr #20
     c04:	10400300 	subne	r0, r0, r0, lsl #6
     c08:	1820000e 	stmdane	r0!, {r1, r2, r3}
     c0c:	01000000 	mrseq	r0, (UNDEF: 0)
     c10:	0224249c 	eoreq	r2, r4, #156, 8	; 0x9c000000
     c14:	2b030000 	blcs	c0c1c <startup-0x1ff3f3e4>
     c18:	20000da8 	andcs	r0, r0, r8, lsr #27
     c1c:	00000068 	andeq	r0, r0, r8, rrx
     c20:	0c359c01 	ldceq	12, cr9, [r5], #-4
     c24:	e61a0000 	ldr	r0, [sl], -r0
     c28:	0300000d 	movweq	r0, #13
     c2c:	000ab12e 	andeq	fp, sl, lr, lsr #2
     c30:	70910200 	addsvc	r0, r1, r0, lsl #4
     c34:	0c462300 	mcrreq	3, 0, r2, r6, cr0
     c38:	0e030000 	cdpeq	0, 0, cr0, cr3, cr0, {0}
     c3c:	20000000 	andcs	r0, r0, r0
     c40:	0000000c 	andeq	r0, r0, ip
     c44:	e8259c01 	stmda	r5!, {r0, sl, fp, ip, pc}
     c48:	0200000a 	andeq	r0, r0, #10
     c4c:	0d880c5e 	stceq	12, cr0, [r8, #376]	; 0x178
     c50:	00202000 	eoreq	r2, r0, r0
     c54:	9c010000 	stcls	0, cr0, [r1], {-0}
     c58:	00000c6c 	andeq	r0, r0, ip, ror #24
     c5c:	000f1326 	andeq	r1, pc, r6, lsr #6
     c60:	0c5e0200 	lfmeq	f0, 2, [lr], {-0}
     c64:	000002d1 	ldrdeq	r0, [r0], -r1
     c68:	00779102 	rsbseq	r9, r7, r2, lsl #2
     c6c:	000a9927 	andeq	r9, sl, r7, lsr #18
     c70:	0c3c0200 	lfmeq	f0, 4, [ip], #-0
     c74:	00000675 	andeq	r0, r0, r5, ror r6
     c78:	20000d44 	andcs	r0, r0, r4, asr #26
     c7c:	00000044 	andeq	r0, r0, r4, asr #32
     c80:	0ca59c01 	stceq	12, cr9, [r5], #4
     c84:	13260000 			; <UNDEFINED> instruction: 0x13260000
     c88:	0200000f 	andeq	r0, r0, #15
     c8c:	02d10c3c 	sbcseq	r0, r1, #60, 24	; 0x3c00
     c90:	91020000 	mrsls	r0, (UNDEF: 2)
     c94:	0f3d286f 	svceq	0x003d286f
     c98:	3e020000 	cdpcc	0, 0, cr0, cr2, cr0, {0}
     c9c:	0006750c 	andeq	r7, r6, ip, lsl #10
     ca0:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
     ca4:	067f2900 	ldrbteq	r2, [pc], -r0, lsl #18
     ca8:	28020000 	stmdacs	r2, {}	; <UNPREDICTABLE>
     cac:	000d280c 	andeq	r2, sp, ip, lsl #16
     cb0:	00001c20 	andeq	r1, r0, r0, lsr #24
     cb4:	279c0100 	ldrcs	r0, [ip, r0, lsl #2]
     cb8:	000009d8 	ldrdeq	r0, [r0], -r8
     cbc:	690bfb02 	stmdbvs	fp, {r1, r8, r9, fp, ip, sp, lr, pc}
     cc0:	a4000006 	strge	r0, [r0], #-6
     cc4:	8420000c 	strthi	r0, [r0], #-12
     cc8:	01000000 	mrseq	r0, (UNDEF: 0)
     ccc:	000d0e9c 	muleq	sp, ip, lr
     cd0:	0a902600 	beq	fe40a4d8 <APBAHBPrescTable+0xde408ee8>
     cd4:	fb020000 	blx	80cde <startup-0x1ff7f322>
     cd8:	0002d10b 	andeq	sp, r2, fp, lsl #2
     cdc:	67910200 	ldrvs	r0, [r1, r0, lsl #4]
     ce0:	706d742a 	rsbvc	r7, sp, sl, lsr #8
     ce4:	0bfd0200 	bleq	fff414ec <APBAHBPrescTable+0xdff3fefc>
     ce8:	0000030b 	andeq	r0, r0, fp, lsl #6
     cec:	286c9102 	stmdacs	ip!, {r1, r8, ip, pc}^
     cf0:	00000b30 	andeq	r0, r0, r0, lsr fp
     cf4:	0b0bfe02 	bleq	300504 <startup-0x1fcffafc>
     cf8:	02000003 	andeq	r0, r0, #3
     cfc:	3d287491 	cfstrscc	mvf7, [r8, #-580]!	; 0xfffffdbc
     d00:	0200000f 	andeq	r0, r0, #15
     d04:	06690bff 			; <UNDEFINED> instruction: 0x06690bff
     d08:	91020000 	mrsls	r0, (UNDEF: 2)
     d0c:	0b250073 	bleq	940ee0 <startup-0x1f6bf120>
     d10:	0200000a 	andeq	r0, r0, #10
     d14:	0c540bd6 	mrrceq	11, 13, r0, r4, cr6
     d18:	00502000 	subseq	r2, r0, r0
     d1c:	9c010000 	stcls	0, cr0, [r1], {-0}
     d20:	00000d43 	andeq	r0, r0, r3, asr #26
     d24:	000f1326 	andeq	r1, pc, r6, lsr #6
     d28:	0bd60200 	bleq	ff581530 <APBAHBPrescTable+0xdf57ff40>
     d2c:	000002d1 	ldrdeq	r0, [r0], -r1
     d30:	26779102 	ldrbtcs	r9, [r7], -r2, lsl #2
     d34:	00000ac7 	andeq	r0, r0, r7, asr #21
     d38:	9c0bd602 	stcls	6, cr13, [fp], {2}
     d3c:	02000006 	andeq	r0, r0, #6
     d40:	25007691 	strcs	r7, [r0, #-1681]	; 0xfffff96f
     d44:	00000d35 	andeq	r0, r0, r5, lsr sp
     d48:	180a9e02 	stmdane	sl, {r1, r9, sl, fp, ip, pc}
     d4c:	3c20000c 	stccc	0, cr0, [r0], #-48	; 0xffffffd0
     d50:	01000000 	mrseq	r0, (UNDEF: 0)
     d54:	000d699c 	muleq	sp, ip, r9
     d58:	01332600 	teqeq	r3, r0, lsl #12
     d5c:	9e020000 	cdpls	0, 0, cr0, cr2, cr0, {0}
     d60:	0002d10a 	andeq	sp, r2, sl, lsl #2
     d64:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
     d68:	00d02500 	sbcseq	r2, r0, r0, lsl #10
     d6c:	86020000 	strhi	r0, [r2], -r0
     d70:	000bd80a 	andeq	sp, fp, sl, lsl #16
     d74:	00004020 	andeq	r4, r0, r0, lsr #32
     d78:	9e9c0100 	fmllse	f0, f4, f0
     d7c:	2600000d 	strcs	r0, [r0], -sp
     d80:	00000b3a 	andeq	r0, r0, sl, lsr fp
     d84:	0b0a8602 	bleq	2a2594 <startup-0x1fd5da6c>
     d88:	02000003 	andeq	r0, r0, #3
     d8c:	c7267491 			; <UNDEFINED> instruction: 0xc7267491
     d90:	0200000a 	andeq	r0, r0, #10
     d94:	069c0a86 	ldreq	r0, [ip], r6, lsl #21
     d98:	91020000 	mrsls	r0, (UNDEF: 2)
     d9c:	55250073 	strpl	r0, [r5, #-115]!	; 0xffffff8d
     da0:	0200000f 	andeq	r0, r0, #15
     da4:	0b980a52 	bleq	fe6036f4 <APBAHBPrescTable+0xde602104>
     da8:	00402000 	subeq	r2, r0, r0
     dac:	9c010000 	stcls	0, cr0, [r1], {-0}
     db0:	00000dd3 	ldrdeq	r0, [r0], -r3
     db4:	000a5f26 	andeq	r5, sl, r6, lsr #30
     db8:	0a520200 	beq	14815c0 <startup-0x1eb7ea40>
     dbc:	0000030b 	andeq	r0, r0, fp, lsl #6
     dc0:	26749102 	ldrbtcs	r9, [r4], -r2, lsl #2
     dc4:	00000ac7 	andeq	r0, r0, r7, asr #21
     dc8:	9c0a5202 	sfmls	f5, 4, [sl], {2}
     dcc:	02000006 	andeq	r0, r0, #6
     dd0:	25007391 	strcs	r7, [r0, #-913]	; 0xfffffc6f
     dd4:	000004db 	ldrdeq	r0, [r0], -fp
     dd8:	580a1902 	stmdapl	sl, {r1, r8, fp, ip}
     ddc:	4020000b 	eormi	r0, r0, fp
     de0:	01000000 	mrseq	r0, (UNDEF: 0)
     de4:	000e089c 	muleq	lr, ip, r8
     de8:	033a2600 	teqeq	sl, #0, 12
     dec:	19020000 	stmdbne	r2, {}	; <UNPREDICTABLE>
     df0:	00030b0a 	andeq	r0, r3, sl, lsl #22
     df4:	74910200 	ldrvc	r0, [r1], #512	; 0x200
     df8:	000ac726 	andeq	ip, sl, r6, lsr #14
     dfc:	0a190200 	beq	641604 <startup-0x1f9be9fc>
     e00:	0000069c 	muleq	r0, ip, r6
     e04:	00739102 	rsbseq	r9, r3, r2, lsl #2
     e08:	0000ed25 	andeq	lr, r0, r5, lsr #26
     e0c:	09fb0200 	ldmibeq	fp!, {r9}^
     e10:	20000b18 	andcs	r0, r0, r8, lsl fp
     e14:	00000040 	andeq	r0, r0, r0, asr #32
     e18:	0e3d9c01 	cdpeq	12, 3, cr9, cr13, cr1, {0}
     e1c:	2a260000 	bcs	980e24 <startup-0x1f67f1dc>
     e20:	02000010 	andeq	r0, r0, #16
     e24:	030b09fb 	movweq	r0, #47611	; 0xb9fb
     e28:	91020000 	mrsls	r0, (UNDEF: 2)
     e2c:	0ac72674 	beq	ff1ca804 <APBAHBPrescTable+0xdf1c9214>
     e30:	fb020000 	blx	80e3a <startup-0x1ff7f1c6>
     e34:	00069c09 	andeq	r9, r6, r9, lsl #24
     e38:	73910200 	orrsvc	r0, r1, #0, 4
     e3c:	0fa72500 	svceq	0x00a72500
     e40:	db020000 	blle	80e48 <startup-0x1ff7f1b8>
     e44:	000ad809 	andeq	sp, sl, r9, lsl #16
     e48:	00004020 	andeq	r4, r0, r0, lsr #32
     e4c:	729c0100 	addsvc	r0, ip, #0, 2
     e50:	2600000e 	strcs	r0, [r0], -lr
     e54:	00000e04 	andeq	r0, r0, r4, lsl #28
     e58:	0b09db02 	bleq	277a68 <startup-0x1fd88598>
     e5c:	02000003 	andeq	r0, r0, #3
     e60:	c7267491 			; <UNDEFINED> instruction: 0xc7267491
     e64:	0200000a 	andeq	r0, r0, #10
     e68:	069c09db 			; <UNDEFINED> instruction: 0x069c09db
     e6c:	91020000 	mrsls	r0, (UNDEF: 2)
     e70:	b9250073 	stmdblt	r5!, {r0, r1, r4, r5, r6}
     e74:	02000004 	andeq	r0, r0, #4
     e78:	0a9809aa 	beq	fe603528 <APBAHBPrescTable+0xde601f38>
     e7c:	00402000 	subeq	r2, r0, r0
     e80:	9c010000 	stcls	0, cr0, [r1], {-0}
     e84:	00000ea7 	andeq	r0, r0, r7, lsr #29
     e88:	000b3a26 	andeq	r3, fp, r6, lsr #20
     e8c:	09aa0200 	stmibeq	sl!, {r9}
     e90:	0000030b 	andeq	r0, r0, fp, lsl #6
     e94:	26749102 	ldrbtcs	r9, [r4], -r2, lsl #2
     e98:	00000ac7 	andeq	r0, r0, r7, asr #21
     e9c:	9c09aa02 			; <UNDEFINED> instruction: 0x9c09aa02
     ea0:	02000006 	andeq	r0, r0, #6
     ea4:	25007391 	strcs	r7, [r0, #-913]	; 0xfffffc6f
     ea8:	0000011c 	andeq	r0, r0, ip, lsl r1
     eac:	58097b02 	stmdapl	r9, {r1, r8, r9, fp, ip, sp, lr}
     eb0:	4020000a 	eormi	r0, r0, sl
     eb4:	01000000 	mrseq	r0, (UNDEF: 0)
     eb8:	000edc9c 	muleq	lr, ip, ip
     ebc:	0a5f2600 	beq	17ca6c4 <startup-0x1e83593c>
     ec0:	7b020000 	blvc	80ec8 <startup-0x1ff7f138>
     ec4:	00030b09 	andeq	r0, r3, r9, lsl #22
     ec8:	74910200 	ldrvc	r0, [r1], #512	; 0x200
     ecc:	000ac726 	andeq	ip, sl, r6, lsr #14
     ed0:	097b0200 	ldmdbeq	fp!, {r9}^
     ed4:	0000069c 	muleq	r0, ip, r6
     ed8:	00739102 	rsbseq	r9, r3, r2, lsl #2
     edc:	00027e25 	andeq	r7, r2, r5, lsr #28
     ee0:	09450200 	stmdbeq	r5, {r9}^
     ee4:	20000a18 	andcs	r0, r0, r8, lsl sl
     ee8:	00000040 	andeq	r0, r0, r0, asr #32
     eec:	0f119c01 	svceq	0x00119c01
     ef0:	3a260000 	bcc	980ef8 <startup-0x1f67f108>
     ef4:	02000003 	andeq	r0, r0, #3
     ef8:	030b0945 	movweq	r0, #47429	; 0xb945
     efc:	91020000 	mrsls	r0, (UNDEF: 2)
     f00:	0ac72674 	beq	ff1ca8d8 <APBAHBPrescTable+0xdf1c92e8>
     f04:	45020000 	strmi	r0, [r2, #-0]
     f08:	00069c09 	andeq	r9, r6, r9, lsl #24
     f0c:	73910200 	orrsvc	r0, r1, #0, 4
     f10:	11432500 	cmpne	r3, r0, lsl #10
     f14:	2a020000 	bcs	80f1c <startup-0x1ff7f0e4>
     f18:	0009d809 	andeq	sp, r9, r9, lsl #16
     f1c:	00004020 	andeq	r4, r0, r0, lsr #32
     f20:	469c0100 	ldrmi	r0, [ip], r0, lsl #2
     f24:	2600000f 	strcs	r0, [r0], -pc
     f28:	0000102a 	andeq	r1, r0, sl, lsr #32
     f2c:	0b092a02 	bleq	24b73c <startup-0x1fdb48c4>
     f30:	02000003 	andeq	r0, r0, #3
     f34:	c7267491 			; <UNDEFINED> instruction: 0xc7267491
     f38:	0200000a 	andeq	r0, r0, #10
     f3c:	069c092a 	ldreq	r0, [ip], sl, lsr #18
     f40:	91020000 	mrsls	r0, (UNDEF: 2)
     f44:	85250073 	strhi	r0, [r5, #-115]!	; 0xffffff8d
     f48:	0200000e 	andeq	r0, r0, #14
     f4c:	0998090d 	ldmibeq	r8, {r0, r2, r3, r8, fp}
     f50:	00402000 	subeq	r2, r0, r0
     f54:	9c010000 	stcls	0, cr0, [r1], {-0}
     f58:	00000f7b 	andeq	r0, r0, fp, ror pc
     f5c:	000e0426 	andeq	r0, lr, r6, lsr #8
     f60:	090d0200 	stmdbeq	sp, {r9}
     f64:	0000030b 	andeq	r0, r0, fp, lsl #6
     f68:	26749102 	ldrbtcs	r9, [r4], -r2, lsl #2
     f6c:	00000ac7 	andeq	r0, r0, r7, asr #21
     f70:	9c090d02 	stcls	13, cr0, [r9], {2}
     f74:	02000006 	andeq	r0, r0, #6
     f78:	25007391 	strcs	r7, [r0, #-913]	; 0xfffffc6f
     f7c:	000007cf 	andeq	r0, r0, pc, asr #15
     f80:	5808e302 	stmdapl	r8, {r1, r8, r9, sp, lr, pc}
     f84:	40200009 	eormi	r0, r0, r9
     f88:	01000000 	mrseq	r0, (UNDEF: 0)
     f8c:	000fb09c 	muleq	pc, ip, r0	; <UNPREDICTABLE>
     f90:	0b3a2600 	bleq	e8a798 <startup-0x1f175868>
     f94:	e3020000 	movw	r0, #8192	; 0x2000
     f98:	00030b08 	andeq	r0, r3, r8, lsl #22
     f9c:	74910200 	ldrvc	r0, [r1], #512	; 0x200
     fa0:	000ac726 	andeq	ip, sl, r6, lsr #14
     fa4:	08e30200 	stmiaeq	r3!, {r9}^
     fa8:	0000069c 	muleq	r0, ip, r6
     fac:	00739102 	rsbseq	r9, r3, r2, lsl #2
     fb0:	0003be25 	andeq	fp, r3, r5, lsr #28
     fb4:	08af0200 	stmiaeq	pc!, {r9}	; <UNPREDICTABLE>
     fb8:	20000918 	andcs	r0, r0, r8, lsl r9
     fbc:	00000040 	andeq	r0, r0, r0, asr #32
     fc0:	0fe59c01 	svceq	0x00e59c01
     fc4:	5f260000 	svcpl	0x00260000
     fc8:	0200000a 	andeq	r0, r0, #10
     fcc:	030b08af 	movweq	r0, #47279	; 0xb8af
     fd0:	91020000 	mrsls	r0, (UNDEF: 2)
     fd4:	0ac72674 	beq	ff1ca9ac <APBAHBPrescTable+0xdf1c93bc>
     fd8:	af020000 	svcge	0x00020000
     fdc:	00069c08 	andeq	r9, r6, r8, lsl #24
     fe0:	73910200 	orrsvc	r0, r1, #0, 4
     fe4:	0bc62500 	bleq	ff18a3ec <APBAHBPrescTable+0xdf188dfc>
     fe8:	76020000 	strvc	r0, [r2], -r0
     fec:	0008d808 	andeq	sp, r8, r8, lsl #16
     ff0:	00004020 	andeq	r4, r0, r0, lsr #32
     ff4:	1a9c0100 	bne	fe7013fc <APBAHBPrescTable+0xde6ffe0c>
     ff8:	26000010 			; <UNDEFINED> instruction: 0x26000010
     ffc:	0000033a 	andeq	r0, r0, sl, lsr r3
    1000:	0b087602 	bleq	21e810 <startup-0x1fde17f0>
    1004:	02000003 	andeq	r0, r0, #3
    1008:	c7267491 			; <UNDEFINED> instruction: 0xc7267491
    100c:	0200000a 	andeq	r0, r0, #10
    1010:	069c0876 			; <UNDEFINED> instruction: 0x069c0876
    1014:	91020000 	mrsls	r0, (UNDEF: 2)
    1018:	57250073 			; <UNDEFINED> instruction: 0x57250073
    101c:	02000001 	andeq	r0, r0, #1
    1020:	08980858 	ldmeq	r8, {r3, r4, r6, fp}
    1024:	00402000 	subeq	r2, r0, r0
    1028:	9c010000 	stcls	0, cr0, [r1], {-0}
    102c:	0000104f 	andeq	r1, r0, pc, asr #32
    1030:	00102a26 	andseq	r2, r0, r6, lsr #20
    1034:	08580200 	ldmdaeq	r8, {r9}^
    1038:	0000030b 	andeq	r0, r0, fp, lsl #6
    103c:	26749102 	ldrbtcs	r9, [r4], -r2, lsl #2
    1040:	00000ac7 	andeq	r0, r0, r7, asr #21
    1044:	9c085802 	stcls	8, cr5, [r8], {2}
    1048:	02000006 	andeq	r0, r0, #6
    104c:	25007391 	strcs	r7, [r0, #-913]	; 0xfffffc6f
    1050:	0000105e 	andeq	r1, r0, lr, asr r0
    1054:	58083802 	stmdapl	r8, {r1, fp, ip, sp}
    1058:	40200008 	eormi	r0, r0, r8
    105c:	01000000 	mrseq	r0, (UNDEF: 0)
    1060:	0010849c 	mulseq	r0, ip, r4
    1064:	0e042600 	cfmadd32eq	mvax0, mvfx2, mvfx4, mvfx0
    1068:	38020000 	stmdacc	r2, {}	; <UNPREDICTABLE>
    106c:	00030b08 	andeq	r0, r3, r8, lsl #22
    1070:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    1074:	000ac726 	andeq	ip, sl, r6, lsr #14
    1078:	08380200 	ldmdaeq	r8!, {r9}
    107c:	0000069c 	muleq	r0, ip, r6
    1080:	00739102 	rsbseq	r9, r3, r2, lsl #2
    1084:	00017325 	andeq	r7, r1, r5, lsr #6
    1088:	080e0200 	stmdaeq	lr, {r9}
    108c:	2000083c 	andcs	r0, r0, ip, lsr r8
    1090:	0000001c 	andeq	r0, r0, ip, lsl r0
    1094:	10aa9c01 	adcne	r9, sl, r1, lsl #24
    1098:	24260000 	strtcs	r0, [r6], #-0
    109c:	02000011 	andeq	r0, r0, #17
    10a0:	030b080e 	movweq	r0, #47118	; 0xb80e
    10a4:	91020000 	mrsls	r0, (UNDEF: 2)
    10a8:	4a250074 	bmi	941280 <startup-0x1f6bed80>
    10ac:	02000002 	andeq	r0, r0, #2
    10b0:	0800078e 	stmdaeq	r0, {r1, r2, r3, r7, r8, r9, sl}
    10b4:	003c2000 	eorseq	r2, ip, r0
    10b8:	9c010000 	stcls	0, cr0, [r1], {-0}
    10bc:	000010df 	ldrdeq	r1, [r0], -pc	; <UNPREDICTABLE>
    10c0:	0007f526 	andeq	pc, r7, r6, lsr #10
    10c4:	078e0200 	streq	r0, [lr, r0, lsl #4]
    10c8:	0000030b 	andeq	r0, r0, fp, lsl #6
    10cc:	286c9102 	stmdacs	ip!, {r1, r8, ip, pc}^
    10d0:	00000dd5 	ldrdeq	r0, [r0], -r5
    10d4:	0b079002 	bleq	1e50e4 <startup-0x1fe1af1c>
    10d8:	02000003 	andeq	r0, r0, #3
    10dc:	25007491 	strcs	r7, [r0, #-1169]	; 0xfffffb6f
    10e0:	0000020a 	andeq	r0, r0, sl, lsl #4
    10e4:	c0072b02 	andgt	r2, r7, r2, lsl #22
    10e8:	40200007 	eormi	r0, r0, r7
    10ec:	01000000 	mrseq	r0, (UNDEF: 0)
    10f0:	0011149c 	mulseq	r1, ip, r4
    10f4:	07e62600 	strbeq	r2, [r6, r0, lsl #12]!
    10f8:	2b020000 	blcs	81100 <startup-0x1ff7ef00>
    10fc:	00030b07 	andeq	r0, r3, r7, lsl #22
    1100:	6c910200 	lfmvs	f0, 4, [r1], {0}
    1104:	000dd528 	andeq	sp, sp, r8, lsr #10
    1108:	072d0200 	streq	r0, [sp, -r0, lsl #4]!
    110c:	0000030b 	andeq	r0, r0, fp, lsl #6
    1110:	00749102 	rsbseq	r9, r4, r2, lsl #2
    1114:	00095325 	andeq	r5, r9, r5, lsr #6
    1118:	070b0200 	streq	r0, [fp, -r0, lsl #4]
    111c:	20000784 	andcs	r0, r0, r4, lsl #15
    1120:	0000003c 	andeq	r0, r0, ip, lsr r0
    1124:	11499c01 	cmpne	r9, r1, lsl #24
    1128:	1e260000 	cdpne	0, 2, cr0, cr6, cr0, {0}
    112c:	02000003 	andeq	r0, r0, #3
    1130:	030b070b 	movweq	r0, #46859	; 0xb70b
    1134:	91020000 	mrsls	r0, (UNDEF: 2)
    1138:	0dd5286c 	ldcleq	8, cr2, [r5, #432]	; 0x1b0
    113c:	0d020000 	stceq	0, cr0, [r2, #-0]
    1140:	00030b07 	andeq	r0, r3, r7, lsl #22
    1144:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    1148:	02e12500 	rsceq	r2, r1, #0, 10
    114c:	ea020000 	b	81154 <startup-0x1ff7eeac>
    1150:	00074806 	andeq	r4, r7, r6, lsl #16
    1154:	00003c20 	andeq	r3, r0, r0, lsr #24
    1158:	7e9c0100 	fmlvce	f0, f4, f0
    115c:	26000011 			; <UNDEFINED> instruction: 0x26000011
    1160:	00000804 	andeq	r0, r0, r4, lsl #16
    1164:	0b06ea02 	bleq	1bb974 <startup-0x1fe4468c>
    1168:	02000003 	andeq	r0, r0, #3
    116c:	d5286c91 	strle	r6, [r8, #-3217]!	; 0xfffff36f
    1170:	0200000d 	andeq	r0, r0, #13
    1174:	030b06ec 	movweq	r0, #46828	; 0xb6ec
    1178:	91020000 	mrsls	r0, (UNDEF: 2)
    117c:	c9250074 	stmdbgt	r5!, {r2, r4, r5, r6}
    1180:	02000006 	andeq	r0, r0, #6
    1184:	070c06c6 	streq	r0, [ip, -r6, asr #13]
    1188:	003c2000 	eorseq	r2, ip, r0
    118c:	9c010000 	stcls	0, cr0, [r1], {-0}
    1190:	000011b3 			; <UNDEFINED> instruction: 0x000011b3
    1194:	000b1926 	andeq	r1, fp, r6, lsr #18
    1198:	06c60200 	strbeq	r0, [r6], r0, lsl #4
    119c:	0000030b 	andeq	r0, r0, fp, lsl #6
    11a0:	286c9102 	stmdacs	ip!, {r1, r8, ip, pc}^
    11a4:	00000dd5 	ldrdeq	r0, [r0], -r5
    11a8:	0b06c802 	bleq	1b31b8 <startup-0x1fe4ce48>
    11ac:	02000003 	andeq	r0, r0, #3
    11b0:	25007491 	strcs	r7, [r0, #-1169]	; 0xfffffb6f
    11b4:	00000057 	andeq	r0, r0, r7, asr r0
    11b8:	f006ab02 			; <UNDEFINED> instruction: 0xf006ab02
    11bc:	1c200006 	stcne	0, cr0, [r0], #-24	; 0xffffffe8
    11c0:	01000000 	mrseq	r0, (UNDEF: 0)
    11c4:	0011d99c 	mulseq	r1, ip, r9
    11c8:	089c2600 	ldmeq	ip, {r9, sl, sp}
    11cc:	ab020000 	blge	811d4 <startup-0x1ff7ee2c>
    11d0:	00030b06 	andeq	r0, r3, r6, lsl #22
    11d4:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    11d8:	0c072500 	cfstr32eq	mvfx2, [r7], {-0}
    11dc:	ef020000 	svc	0x00020000
    11e0:	0006d005 	andeq	sp, r6, r5
    11e4:	00002020 	andeq	r2, r0, r0, lsr #32
    11e8:	ff9c0100 			; <UNDEFINED> instruction: 0xff9c0100
    11ec:	26000011 			; <UNDEFINED> instruction: 0x26000011
    11f0:	00000ac7 	andeq	r0, r0, r7, asr #21
    11f4:	9c05ef02 	stcls	15, cr14, [r5], {2}
    11f8:	02000006 	andeq	r0, r0, #6
    11fc:	25007791 	strcs	r7, [r0, #-1937]	; 0xfffff86f
    1200:	00000fee 	andeq	r0, r0, lr, ror #31
    1204:	b005de02 	andlt	sp, r5, r2, lsl #28
    1208:	20200006 	eorcs	r0, r0, r6
    120c:	01000000 	mrseq	r0, (UNDEF: 0)
    1210:	0012259c 	mulseq	r2, ip, r5
    1214:	0ac72600 	beq	ff1caa1c <APBAHBPrescTable+0xdf1c942c>
    1218:	de020000 	cdple	0, 0, cr0, cr2, cr0, {0}
    121c:	00069c05 	andeq	r9, r6, r5, lsl #24
    1220:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    1224:	0a6e2500 	beq	1b8a62c <startup-0x1e4759d4>
    1228:	be020000 	cdplt	0, 0, cr0, cr2, cr0, {0}
    122c:	00065005 	andeq	r5, r6, r5
    1230:	00006020 	andeq	r6, r0, r0, lsr #32
    1234:	5a9c0100 	bpl	fe70163c <APBAHBPrescTable+0xde70004c>
    1238:	26000012 			; <UNDEFINED> instruction: 0x26000012
    123c:	00000146 	andeq	r0, r0, r6, asr #2
    1240:	0b05be02 	bleq	170a50 <startup-0x1fe8f5b0>
    1244:	02000003 	andeq	r0, r0, #3
    1248:	d5286c91 	strle	r6, [r8, #-3217]!	; 0xfffff36f
    124c:	0200000d 	andeq	r0, r0, #13
    1250:	030b05c0 	movweq	r0, #46528	; 0xb5c0
    1254:	91020000 	mrsls	r0, (UNDEF: 2)
    1258:	682b0074 	stmdavs	fp!, {r2, r4, r5, r6}
    125c:	02000000 	andeq	r0, r0, #0
    1260:	04f80525 	ldrbteq	r0, [r8], #1317	; 0x525
    1264:	01582000 	cmpeq	r8, r0
    1268:	9c010000 	stcls	0, cr0, [r1], {-0}
    126c:	000012da 	ldrdeq	r1, [r0], -sl
    1270:	0009ea26 	andeq	lr, r9, r6, lsr #20
    1274:	05250200 	streq	r0, [r5, #-512]!	; 0xfffffe00
    1278:	000012da 	ldrdeq	r1, [r0], -sl
    127c:	2a5c9102 	bcs	172568c <startup-0x1e8da974>
    1280:	00706d74 	rsbseq	r6, r0, r4, ror sp
    1284:	0b052702 	bleq	14ae94 <startup-0x1feb516c>
    1288:	02000003 	andeq	r0, r0, #3
    128c:	3d287091 	stccc	0, cr7, [r8, #-580]!	; 0xfffffdbc
    1290:	02000011 	andeq	r0, r0, #17
    1294:	030b0527 	movweq	r0, #46375	; 0xb527
    1298:	91020000 	mrsls	r0, (UNDEF: 2)
    129c:	0f4e286c 	svceq	0x004e286c
    12a0:	27020000 	strcs	r0, [r2, -r0]
    12a4:	00030b05 	andeq	r0, r3, r5, lsl #22
    12a8:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    12ac:	00000028 	andeq	r0, r0, r8, lsr #32
    12b0:	05270200 	streq	r0, [r7, #-512]!	; 0xfffffe00
    12b4:	0000030b 	andeq	r0, r0, fp, lsl #6
    12b8:	28689102 	stmdacs	r8!, {r1, r8, ip, pc}^
    12bc:	000005c4 	andeq	r0, r0, r4, asr #11
    12c0:	0b052702 	bleq	14aed0 <startup-0x1feb5130>
    12c4:	02000003 	andeq	r0, r0, #3
    12c8:	b1286491 			; <UNDEFINED> instruction: 0xb1286491
    12cc:	02000011 	andeq	r0, r0, #17
    12d0:	030b0527 	movweq	r0, #46375	; 0xb527
    12d4:	91020000 	mrsls	r0, (UNDEF: 2)
    12d8:	042c0060 	strteq	r0, [ip], #-96	; 0xffffffa0
    12dc:	00000984 	andeq	r0, r0, r4, lsl #19
    12e0:	0002ba25 	andeq	fp, r2, r5, lsr #20
    12e4:	04f10200 	ldrbteq	r0, [r1], #512	; 0x200
    12e8:	200004bc 			; <UNDEFINED> instruction: 0x200004bc
    12ec:	0000003c 	andeq	r0, r0, ip, lsr r0
    12f0:	13159c01 	tstne	r5, #256	; 0x100
    12f4:	96260000 	strtls	r0, [r6], -r0
    12f8:	02000001 	andeq	r0, r0, #1
    12fc:	030b04f1 	movweq	r0, #46321	; 0xb4f1
    1300:	91020000 	mrsls	r0, (UNDEF: 2)
    1304:	0dd5286c 	ldcleq	8, cr2, [r5, #432]	; 0x1b0
    1308:	f3020000 	vhadd.u8	d0, d2, d0
    130c:	00030b04 	andeq	r0, r3, r4, lsl #22
    1310:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    1314:	08c82500 	stmiaeq	r8, {r8, sl, sp}^
    1318:	d2020000 	andle	r0, r2, #0
    131c:	00048404 	andeq	r8, r4, r4, lsl #8
    1320:	00003820 	andeq	r3, r0, r0, lsr #16
    1324:	4a9c0100 	bmi	fe70172c <APBAHBPrescTable+0xde70013c>
    1328:	26000013 			; <UNDEFINED> instruction: 0x26000013
    132c:	00000196 	muleq	r0, r6, r1
    1330:	0b04d202 	bleq	135b40 <startup-0x1feca4c0>
    1334:	02000003 	andeq	r0, r0, #3
    1338:	d5286c91 	strle	r6, [r8, #-3217]!	; 0xfffff36f
    133c:	0200000d 	andeq	r0, r0, #13
    1340:	030b04d4 	movweq	r0, #46292	; 0xb4d4
    1344:	91020000 	mrsls	r0, (UNDEF: 2)
    1348:	70250074 	eorvc	r0, r5, r4, ror r0
    134c:	02000006 	andeq	r0, r0, #6
    1350:	045004b3 	ldrbeq	r0, [r0], #-1203	; 0xfffffb4d
    1354:	00342000 	eorseq	r2, r4, r0
    1358:	9c010000 	stcls	0, cr0, [r1], {-0}
    135c:	0000137f 	andeq	r1, r0, pc, ror r3
    1360:	00058a26 	andeq	r8, r5, r6, lsr #20
    1364:	04b30200 	ldrteq	r0, [r3], #512	; 0x200
    1368:	0000030b 	andeq	r0, r0, fp, lsl #6
    136c:	286c9102 	stmdacs	ip!, {r1, r8, ip, pc}^
    1370:	00000dd5 	ldrdeq	r0, [r0], -r5
    1374:	0b04b502 	bleq	12e784 <startup-0x1fed187c>
    1378:	02000003 	andeq	r0, r0, #3
    137c:	2d007491 	cfstrscs	mvf7, [r0, #-580]	; 0xfffffdbc
    1380:	00000300 	andeq	r0, r0, r0, lsl #6
    1384:	d1049a02 	tstle	r4, r2, lsl #20
    1388:	34000002 	strcc	r0, [r0], #-2
    138c:	1c200004 	stcne	0, cr0, [r0], #-16
    1390:	01000000 	mrseq	r0, (UNDEF: 0)
    1394:	1170259c 			; <UNDEFINED> instruction: 0x1170259c
    1398:	7d020000 	stcvc	0, cr0, [r2, #-0]
    139c:	00040004 	andeq	r0, r4, r4
    13a0:	00003420 	andeq	r3, r0, r0, lsr #8
    13a4:	ca9c0100 	bgt	fe7017ac <APBAHBPrescTable+0xde7001bc>
    13a8:	26000013 			; <UNDEFINED> instruction: 0x26000013
    13ac:	0000038d 	andeq	r0, r0, sp, lsl #7
    13b0:	0b047d02 	bleq	1207c0 <startup-0x1fedf840>
    13b4:	02000003 	andeq	r0, r0, #3
    13b8:	d5286c91 	strle	r6, [r8, #-3217]!	; 0xfffff36f
    13bc:	0200000d 	andeq	r0, r0, #13
    13c0:	030b047f 	movweq	r0, #46207	; 0xb47f
    13c4:	91020000 	mrsls	r0, (UNDEF: 2)
    13c8:	88250074 	stmdahi	r5!, {r2, r4, r5, r6}
    13cc:	02000008 	andeq	r0, r0, #8
    13d0:	03c403b5 	biceq	r0, r4, #-738197502	; 0xd4000002
    13d4:	003c2000 	eorseq	r2, ip, r0
    13d8:	9c010000 	stcls	0, cr0, [r1], {-0}
    13dc:	0000140e 	andeq	r1, r0, lr, lsl #8
    13e0:	000c4e26 	andeq	r4, ip, r6, lsr #28
    13e4:	03b50200 			; <UNDEFINED> instruction: 0x03b50200
    13e8:	0000030b 	andeq	r0, r0, fp, lsl #6
    13ec:	266c9102 	strbtcs	r9, [ip], -r2, lsl #2
    13f0:	00000362 	andeq	r0, r0, r2, ror #6
    13f4:	0b03b502 	bleq	ee804 <startup-0x1ff117fc>
    13f8:	02000003 	andeq	r0, r0, #3
    13fc:	d5286891 	strle	r6, [r8, #-2193]!	; 0xfffff76f
    1400:	0200000d 	andeq	r0, r0, #13
    1404:	030b03b7 	movweq	r0, #46007	; 0xb3b7
    1408:	91020000 	mrsls	r0, (UNDEF: 2)
    140c:	5b250074 	blpl	9415e4 <startup-0x1f6bea1c>
    1410:	02000007 	andeq	r0, r0, #7
    1414:	03840388 	orreq	r0, r4, #136, 6	; 0x20000002
    1418:	00402000 	subeq	r2, r0, r0
    141c:	9c010000 	stcls	0, cr0, [r1], {-0}
    1420:	00001452 	andeq	r1, r0, r2, asr r4
    1424:	000bb726 	andeq	fp, fp, r6, lsr #14
    1428:	03880200 	orreq	r0, r8, #0, 4
    142c:	0000030b 	andeq	r0, r0, fp, lsl #6
    1430:	266c9102 	strbtcs	r9, [ip], -r2, lsl #2
    1434:	00000cd4 	ldrdeq	r0, [r0], -r4
    1438:	0b038802 	bleq	e3448 <startup-0x1ff1cbb8>
    143c:	02000003 	andeq	r0, r0, #3
    1440:	d5286891 	strle	r6, [r8, #-2193]!	; 0xfffff76f
    1444:	0200000d 	andeq	r0, r0, #13
    1448:	030b038a 	movweq	r0, #45962	; 0xb38a
    144c:	91020000 	mrsls	r0, (UNDEF: 2)
    1450:	fe250074 	mcr2	0, 1, r0, cr5, cr4, {3}
    1454:	0200000a 	andeq	r0, r0, #10
    1458:	0364036f 	cmneq	r4, #-1140850687	; 0xbc000001
    145c:	00202000 	eoreq	r2, r0, r0
    1460:	9c010000 	stcls	0, cr0, [r1], {-0}
    1464:	00001478 	andeq	r1, r0, r8, ror r4
    1468:	000ac726 	andeq	ip, sl, r6, lsr #14
    146c:	036f0200 	cmneq	pc, #0, 4
    1470:	0000069c 	muleq	r0, ip, r6
    1474:	00779102 	rsbseq	r9, r7, r2, lsl #2
    1478:	00115a25 	andseq	r5, r1, r5, lsr #20
    147c:	035d0200 	cmpeq	sp, #0, 4
    1480:	20000344 	andcs	r0, r0, r4, asr #6
    1484:	00000020 	andeq	r0, r0, r0, lsr #32
    1488:	149e9c01 	ldrne	r9, [lr], #3073	; 0xc01
    148c:	c7260000 	strgt	r0, [r6, -r0]!
    1490:	0200000a 	andeq	r0, r0, #10
    1494:	069c035d 			; <UNDEFINED> instruction: 0x069c035d
    1498:	91020000 	mrsls	r0, (UNDEF: 2)
    149c:	ef250077 	svc	0x00250077
    14a0:	02000006 	andeq	r0, r0, #6
    14a4:	03140349 	tsteq	r4, #603979777	; 0x24000001
    14a8:	00302000 	eorseq	r2, r0, r0
    14ac:	9c010000 	stcls	0, cr0, [r1], {-0}
    14b0:	000014e2 	andeq	r1, r0, r2, ror #9
    14b4:	000b9f26 	andeq	r9, fp, r6, lsr #30
    14b8:	03490200 	movteq	r0, #37376	; 0x9200
    14bc:	0000030b 	andeq	r0, r0, fp, lsl #6
    14c0:	26749102 	ldrbtcs	r9, [r4], -r2, lsl #2
    14c4:	00000ba7 	andeq	r0, r0, r7, lsr #23
    14c8:	0b034902 	bleq	d38d8 <startup-0x1ff2c728>
    14cc:	02000003 	andeq	r0, r0, #3
    14d0:	af267091 	svcge	0x00267091
    14d4:	0200000b 	andeq	r0, r0, #11
    14d8:	030b0349 	movweq	r0, #45897	; 0xb349
    14dc:	91020000 	mrsls	r0, (UNDEF: 2)
    14e0:	8825006c 	stmdahi	r5!, {r2, r3, r5, r6}
    14e4:	02000001 	andeq	r0, r0, #1
    14e8:	02f402dc 	rscseq	r0, r4, #220, 4	; 0xc000000d
    14ec:	00202000 	eoreq	r2, r0, r0
    14f0:	9c010000 	stcls	0, cr0, [r1], {-0}
    14f4:	00001508 	andeq	r1, r0, r8, lsl #10
    14f8:	000ac726 	andeq	ip, sl, r6, lsr #14
    14fc:	02dc0200 	sbcseq	r0, ip, #0, 4
    1500:	0000069c 	muleq	r0, ip, r6
    1504:	00779102 	rsbseq	r9, r7, r2, lsl #2
    1508:	00108825 	andseq	r8, r0, r5, lsr #16
    150c:	02510200 	subseq	r0, r1, #0, 4
    1510:	200002cc 	andcs	r0, r0, ip, asr #5
    1514:	00000028 	andeq	r0, r0, r8, lsr #32
    1518:	153d9c01 	ldrne	r9, [sp, #-3073]!	; 0xfffff3ff
    151c:	9f260000 	svcls	0x00260000
    1520:	0200000f 	andeq	r0, r0, #15
    1524:	030b0251 	movweq	r0, #45649	; 0xb251
    1528:	91020000 	mrsls	r0, (UNDEF: 2)
    152c:	0fc42674 	svceq	0x00c42674
    1530:	51020000 	mrspl	r0, (UNDEF: 2)
    1534:	00030b02 	andeq	r0, r3, r2, lsl #22
    1538:	70910200 	addsvc	r0, r1, r0, lsl #4
    153c:	0bfc2500 	bleq	fff0a944 <APBAHBPrescTable+0xdff09354>
    1540:	33020000 	movwcc	r0, #8192	; 0x2000
    1544:	0002ac02 	andeq	sl, r2, r2, lsl #24
    1548:	00002020 	andeq	r2, r0, r0, lsr #32
    154c:	639c0100 	orrsvs	r0, ip, #0, 2
    1550:	26000015 			; <UNDEFINED> instruction: 0x26000015
    1554:	00000ac7 	andeq	r0, r0, r7, asr #21
    1558:	9c023302 	stcls	3, cr3, [r2], {2}
    155c:	02000006 	andeq	r0, r0, #6
    1560:	25007791 	strcs	r7, [r0, #-1937]	; 0xfffff86f
    1564:	000011a3 	andeq	r1, r0, r3, lsr #3
    1568:	70021b02 	andvc	r1, r2, r2, lsl #22
    156c:	3c200002 	stccc	0, cr0, [r0], #-8
    1570:	01000000 	mrseq	r0, (UNDEF: 0)
    1574:	0015c59c 	mulseq	r5, ip, r5
    1578:	03b02600 	movseq	r2, #0, 12
    157c:	1b020000 	blne	81584 <startup-0x1ff7ea7c>
    1580:	00030b02 	andeq	r0, r3, r2, lsl #22
    1584:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    1588:	0005a526 	andeq	sl, r5, r6, lsr #10
    158c:	021b0200 	andseq	r0, fp, #0, 4
    1590:	0000030b 	andeq	r0, r0, fp, lsl #6
    1594:	26709102 	ldrbtcs	r9, [r0], -r2, lsl #2
    1598:	000005aa 	andeq	r0, r0, sl, lsr #11
    159c:	0b021b02 	bleq	881ac <startup-0x1ff77e54>
    15a0:	02000003 	andeq	r0, r0, #3
    15a4:	af266c91 	svcge	0x00266c91
    15a8:	02000005 	andeq	r0, r0, #5
    15ac:	030b021b 	movweq	r0, #45595	; 0xb21b
    15b0:	91020000 	mrsls	r0, (UNDEF: 2)
    15b4:	05b42668 	ldreq	r2, [r4, #1640]!	; 0x668
    15b8:	1b020000 	blne	815c0 <startup-0x1ff7ea40>
    15bc:	00030b02 	andeq	r0, r3, r2, lsl #22
    15c0:	00910200 	addseq	r0, r1, r0, lsl #4
    15c4:	05b92500 	ldreq	r2, [r9, #1280]!	; 0x500
    15c8:	b8020000 	stmdalt	r2, {}	; <UNPREDICTABLE>
    15cc:	00025001 	andeq	r5, r2, r1
    15d0:	00002020 	andeq	r2, r0, r0, lsr #32
    15d4:	eb9c0100 	bl	fe7019dc <APBAHBPrescTable+0xde7003ec>
    15d8:	26000015 			; <UNDEFINED> instruction: 0x26000015
    15dc:	00000ac7 	andeq	r0, r0, r7, asr #21
    15e0:	9c01b802 	stcls	8, cr11, [r1], {2}
    15e4:	02000006 	andeq	r0, r0, #6
    15e8:	25007791 	strcs	r7, [r0, #-1937]	; 0xfffff86f
    15ec:	00000455 	andeq	r0, r0, r5, asr r4
    15f0:	0c019002 	stceq	0, cr9, [r1], {2}
    15f4:	44200002 	strtmi	r0, [r0], #-2
    15f8:	01000000 	mrseq	r0, (UNDEF: 0)
    15fc:	0016119c 	mulseq	r6, ip, r1
    1600:	06af2600 	strteq	r2, [pc], r0, lsl #12
    1604:	90020000 	andls	r0, r2, r0
    1608:	0002d101 	andeq	sp, r2, r1, lsl #2
    160c:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    1610:	0a182500 	beq	60aa18 <startup-0x1f9f55e8>
    1614:	77020000 	strvc	r0, [r2, -r0]
    1618:	0001ec01 	andeq	lr, r1, r1, lsl #24
    161c:	00002020 	andeq	r2, r0, r0, lsr #32
    1620:	379c0100 	ldrcc	r0, [ip, r0, lsl #2]
    1624:	26000016 			; <UNDEFINED> instruction: 0x26000016
    1628:	00000ac7 	andeq	r0, r0, r7, asr #21
    162c:	9c017702 	stcls	7, cr7, [r1], {2}
    1630:	02000006 	andeq	r0, r0, #6
    1634:	25007791 	strcs	r7, [r0, #-1937]	; 0xfffff86f
    1638:	00000a2c 	andeq	r0, r0, ip, lsr #20
    163c:	ae015302 	cdpge	3, 0, cr5, cr1, cr2, {0}
    1640:	3e200001 	cdpcc	0, 2, cr0, cr0, cr1, {0}
    1644:	01000000 	mrseq	r0, (UNDEF: 0)
    1648:	00166c9c 	mulseq	r6, ip, ip
    164c:	0a362600 	beq	d8ae54 <startup-0x1f2751ac>
    1650:	53020000 	movwpl	r0, #8192	; 0x2000
    1654:	0002d101 	andeq	sp, r2, r1, lsl #2
    1658:	6f910200 	svcvs	0x00910200
    165c:	000dd528 	andeq	sp, sp, r8, lsr #10
    1660:	01550200 	cmpeq	r5, r0, lsl #4
    1664:	0000030b 	andeq	r0, r0, fp, lsl #6
    1668:	00749102 	rsbseq	r9, r4, r2, lsl #2
    166c:	000cf62e 	andeq	pc, ip, lr, lsr #12
    1670:	01340200 	teqeq	r4, r0, lsl #4
    1674:	000006c3 	andeq	r0, r0, r3, asr #13
    1678:	20000150 	andcs	r0, r0, r0, asr r1
    167c:	0000005e 	andeq	r0, r0, lr, asr r0
    1680:	16b49c01 	ldrtne	r9, [r4], r1, lsl #24
    1684:	e0280000 	eor	r0, r8, r0
    1688:	02000006 	andeq	r0, r0, #6
    168c:	03160136 	tsteq	r6, #-2147483635	; 0x8000000d
    1690:	91020000 	mrsls	r0, (UNDEF: 2)
    1694:	0e162868 	cdpeq	8, 1, cr2, cr6, cr8, {3}
    1698:	37020000 	strcc	r0, [r2, -r0]
    169c:	0006c301 	andeq	ip, r6, r1, lsl #6
    16a0:	6f910200 	svcvs	0x00910200
    16a4:	000e1328 	andeq	r1, lr, r8, lsr #6
    16a8:	01380200 	teqeq	r8, r0, lsl #4
    16ac:	00000669 	andeq	r0, r0, r9, ror #12
    16b0:	006e9102 	rsbeq	r9, lr, r2, lsl #2
    16b4:	00068d25 	andeq	r8, r6, r5, lsr #26
    16b8:	011c0200 	tsteq	ip, r0, lsl #4
    16bc:	20000128 	andcs	r0, r0, r8, lsr #2
    16c0:	00000028 	andeq	r0, r0, r8, lsr #32
    16c4:	16da9c01 	ldrbne	r9, [sl], r1, lsl #24
    16c8:	53260000 			; <UNDEFINED> instruction: 0x53260000
    16cc:	02000007 	andeq	r0, r0, #7
    16d0:	02d1011c 	sbcseq	r0, r1, #28, 2
    16d4:	91020000 	mrsls	r0, (UNDEF: 2)
    16d8:	d6230077 			; <UNDEFINED> instruction: 0xd6230077
    16dc:	02000002 	andeq	r0, r0, #2
    16e0:	0000b8e1 	andeq	fp, r0, r1, ror #17
    16e4:	00007020 	andeq	r7, r0, r0, lsr #32
    16e8:	2f9c0100 	svccs	0x009c0100
    16ec:	00000d67 	andeq	r0, r0, r7, ror #26
    16f0:	0b06e001 	bleq	1b96fc <startup-0x1fe46904>
    16f4:	70000003 	andvc	r0, r0, r3
    16f8:	48200000 	stmdami	r0!, {}	; <UNPREDICTABLE>
    16fc:	01000000 	mrseq	r0, (UNDEF: 0)
    1700:	0017159c 	mulseq	r7, ip, r5
    1704:	08ee2600 	stmiaeq	lr!, {r9, sl, sp}^
    1708:	e0010000 	and	r0, r1, r0
    170c:	00030b06 	andeq	r0, r3, r6, lsl #22
    1710:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    1714:	100b3000 	andne	r3, fp, r0
    1718:	5d010000 	stcpl	0, cr0, [r1, #-0]
    171c:	00001006 	andeq	r1, r0, r6
    1720:	00006020 	andeq	r6, r0, r0, lsr #32
    1724:	269c0100 	ldrcs	r0, [ip], r0, lsl #2
    1728:	00000f8d 	andeq	r0, r0, sp, lsl #31
    172c:	5a065d01 	bpl	198b38 <startup-0x1fe674c8>
    1730:	02000002 	andeq	r0, r0, #2
    1734:	0a267791 	beq	99f580 <startup-0x1f660a80>
    1738:	0100000f 	tsteq	r0, pc
    173c:	030b065d 	movweq	r0, #46685	; 0xb65d
    1740:	91020000 	mrsls	r0, (UNDEF: 2)
    1744:	23000070 	movwcs	r0, #112	; 0x70
    1748:	04000006 	streq	r0, [r0], #-6
    174c:	00030000 	andeq	r0, r3, r0
    1750:	d8010400 	stmdale	r1, {sl}
    1754:	0c000005 	stceq	0, cr0, [r0], {5}
    1758:	00001309 	andeq	r1, r0, r9, lsl #6
    175c:	0000125d 	andeq	r1, r0, sp, asr r2
    1760:	20000fc4 	andcs	r0, r0, r4, asr #31
    1764:	0000050e 	andeq	r0, r0, lr, lsl #10
    1768:	0000045d 	andeq	r0, r0, sp, asr r4
    176c:	eb060102 	bl	181b7c <startup-0x1fe7e484>
    1770:	03000003 	movweq	r0, #3
    1774:	000001c3 	andeq	r0, r0, r3, asr #3
    1778:	00372b02 	eorseq	r2, r7, r2, lsl #22
    177c:	01020000 	mrseq	r0, (UNDEF: 2)
    1780:	0003e908 	andeq	lr, r3, r8, lsl #18
    1784:	05020200 	streq	r0, [r2, #-512]	; 0xfffffe00
    1788:	00000eee 	andeq	r0, r0, lr, ror #29
    178c:	0004f803 	andeq	pc, r4, r3, lsl #16
    1790:	50390200 	eorspl	r0, r9, r0, lsl #4
    1794:	02000000 	andeq	r0, r0, #0
    1798:	10750702 	rsbsne	r0, r5, r2, lsl #14
    179c:	1a030000 	bne	c17a4 <startup-0x1ff3e85c>
    17a0:	02000011 	andeq	r0, r0, #17
    17a4:	0000624d 	andeq	r6, r0, sp, asr #4
    17a8:	05040200 	streq	r0, [r4, #-512]	; 0xfffffe00
    17ac:	0000097c 	andeq	r0, r0, ip, ror r9
    17b0:	00092503 	andeq	r2, r9, r3, lsl #10
    17b4:	744f0200 	strbvc	r0, [pc], #-512	; 17bc <startup-0x1fffe844>
    17b8:	02000000 	andeq	r0, r0, #0
    17bc:	0cc20704 	stcleq	7, cr0, [r2], {4}
    17c0:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    17c4:	00097705 	andeq	r7, r9, r5, lsl #14
    17c8:	07080200 	streq	r0, [r8, -r0, lsl #4]
    17cc:	00000cbd 			; <UNDEFINED> instruction: 0x00000cbd
    17d0:	69050404 	stmdbvs	r5, {r2, sl}
    17d4:	0200746e 	andeq	r7, r0, #1845493760	; 0x6e000000
    17d8:	0cc70704 	stcleq	7, cr0, [r7], {4}
    17dc:	c5030000 	strgt	r0, [r3, #-0]
    17e0:	03000001 	movweq	r0, #1
    17e4:	00002c18 	andeq	r2, r0, r8, lsl ip
    17e8:	04fa0300 	ldrbteq	r0, [sl], #768	; 0x300
    17ec:	24030000 	strcs	r0, [r3], #-0
    17f0:	00000045 	andeq	r0, r0, r5, asr #32
    17f4:	0000a205 	andeq	sl, r0, r5, lsl #4
    17f8:	111c0300 	tstne	ip, r0, lsl #6
    17fc:	2c030000 	stccs	0, cr0, [r3], {-0}
    1800:	00000057 	andeq	r0, r0, r7, asr r0
    1804:	0000b205 	andeq	fp, r0, r5, lsl #4
    1808:	09270300 	stmdbeq	r7!, {r8, r9}
    180c:	30030000 	andcc	r0, r3, r0
    1810:	00000069 	andeq	r0, r0, r9, rrx
    1814:	0000c205 	andeq	ip, r0, r5, lsl #4
    1818:	0f920600 	svceq	0x00920600
    181c:	fa040000 	blx	101824 <startup-0x1fefe7dc>
    1820:	0000bd06 	andeq	fp, r0, r6, lsl #26
    1824:	08310700 	ldmdaeq	r1!, {r8, r9, sl}
    1828:	3b050000 	blcc	141830 <startup-0x1febe7d0>
    182c:	000000c2 	andeq	r0, r0, r2, asr #1
    1830:	37010708 	strcc	r0, [r1, -r8, lsl #14]
    1834:	06000000 	streq	r0, [r0], -r0
    1838:	0104035f 	tsteq	r4, pc, asr r3
    183c:	b5090000 	strlt	r0, [r9, #-0]
    1840:	00000009 	andeq	r0, r0, r9
    1844:	000f4709 	andeq	r4, pc, r9, lsl #14
    1848:	0a000100 	beq	1c50 <startup-0x1fffe3b0>
    184c:	05c30628 	strbeq	r0, [r3, #1576]	; 0x628
    1850:	00000190 	muleq	r0, r0, r1
    1854:	0010050b 	andseq	r0, r0, fp, lsl #10
    1858:	05c50600 	strbeq	r0, [r5, #1536]	; 0x600
    185c:	000000cd 	andeq	r0, r0, sp, asr #1
    1860:	0dc80b00 	vstreq	d16, [r8]
    1864:	c6060000 	strgt	r0, [r6], -r0
    1868:	0000cd05 	andeq	ip, r0, r5, lsl #26
    186c:	d80b0400 	stmdale	fp, {sl}
    1870:	06000008 	streq	r0, [r0], -r8
    1874:	00cd05c7 	sbceq	r0, sp, r7, asr #11
    1878:	0b080000 	bleq	201880 <startup-0x1fdfe780>
    187c:	0000099f 	muleq	r0, pc, r9	; <UNPREDICTABLE>
    1880:	cd05c806 	stcgt	8, cr12, [r5, #-24]	; 0xffffffe8
    1884:	0c000000 	stceq	0, cr0, [r0], {-0}
    1888:	5244490c 	subpl	r4, r4, #12, 18	; 0x30000
    188c:	05c90600 	strbeq	r0, [r9, #1536]	; 0x600
    1890:	000000cd 	andeq	r0, r0, sp, asr #1
    1894:	444f0c10 	strbmi	r0, [pc], #-3088	; 189c <startup-0x1fffe764>
    1898:	ca060052 	bgt	1819e8 <startup-0x1fe7e618>
    189c:	0000cd05 	andeq	ip, r0, r5, lsl #26
    18a0:	f50b1400 			; <UNDEFINED> instruction: 0xf50b1400
    18a4:	06000009 	streq	r0, [r0], -r9
    18a8:	00ad05cb 	adceq	r0, sp, fp, asr #11
    18ac:	0b180000 	bleq	6018b4 <startup-0x1f9fe74c>
    18b0:	000009d2 	ldrdeq	r0, [r0], -r2
    18b4:	ad05cc06 	stcge	12, cr12, [r5, #-24]	; 0xffffffe8
    18b8:	1a000000 	bne	18c0 <startup-0x1fffe740>
    18bc:	0008970b 	andeq	r9, r8, fp, lsl #14
    18c0:	05cd0600 	strbeq	r0, [sp, #1536]	; 0x600
    18c4:	000000cd 	andeq	r0, r0, sp, asr #1
    18c8:	46410c1c 			; <UNDEFINED> instruction: 0x46410c1c
    18cc:	ce060052 	mcrgt	0, 0, r0, cr6, cr2, {2}
    18d0:	0001a005 	andeq	sl, r1, r5
    18d4:	0d002000 	stceq	0, cr2, [r0, #-0]
    18d8:	000000cd 	andeq	r0, r0, sp, asr #1
    18dc:	000001a0 	andeq	r0, r0, r0, lsr #3
    18e0:	0000900e 	andeq	r9, r0, lr
    18e4:	05000100 	streq	r0, [r0, #-256]	; 0xffffff00
    18e8:	00000190 	muleq	r0, r0, r1
    18ec:	000f720f 	andeq	r7, pc, pc, lsl #4
    18f0:	05cf0600 	strbeq	r0, [pc, #1536]	; 1ef8 <startup-0x1fffe108>
    18f4:	00000104 	andeq	r0, r0, r4, lsl #2
    18f8:	37010710 	smladcc	r1, r0, r7, r0
    18fc:	07000000 	streq	r0, [r0, -r0]
    1900:	0001d742 	andeq	sp, r1, r2, asr #14
    1904:	08690900 	stmdaeq	r9!, {r8, fp}^
    1908:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    190c:	00000700 	andeq	r0, r0, r0, lsl #14
    1910:	02710901 	rsbseq	r0, r1, #16384	; 0x4000
    1914:	09020000 	stmdbeq	r2, {}	; <UNPREDICTABLE>
    1918:	000002ad 	andeq	r0, r0, sp, lsr #5
    191c:	56030003 	strpl	r0, [r3], -r3
    1920:	0700000d 	streq	r0, [r0, -sp]
    1924:	0001b147 	andeq	fp, r1, r7, asr #2
    1928:	01071000 	mrseq	r1, (UNDEF: 7)
    192c:	00000037 	andeq	r0, r0, r7, lsr r0
    1930:	01fc4f07 	mvnseq	r4, r7, lsl #30
    1934:	2c090000 	stccs	0, cr0, [r9], {-0}
    1938:	00000004 	andeq	r0, r0, r4
    193c:	00036e09 	andeq	r6, r3, r9, lsl #28
    1940:	03000100 	movweq	r0, #256	; 0x100
    1944:	0000010a 	andeq	r0, r0, sl, lsl #2
    1948:	01e25207 	mvneq	r5, r7, lsl #4
    194c:	07100000 	ldreq	r0, [r0, -r0]
    1950:	00003701 	andeq	r3, r0, r1, lsl #14
    1954:	2d5a0700 	ldclcs	7, cr0, [sl, #-0]
    1958:	09000002 	stmdbeq	r0, {r1}
    195c:	0000051b 	andeq	r0, r0, fp, lsl r5
    1960:	09410900 	stmdbeq	r1, {r8, fp}^
    1964:	09010000 	stmdbeq	r1, {}	; <UNPREDICTABLE>
    1968:	00001193 	muleq	r0, r3, r1
    196c:	09fb0902 	ldmibeq	fp!, {r1, r8, fp}^
    1970:	00030000 	andeq	r0, r3, r0
    1974:	000e5803 	andeq	r5, lr, r3, lsl #16
    1978:	075f0700 	ldrbeq	r0, [pc, -r0, lsl #14]
    197c:	10000002 	andne	r0, r0, r2
    1980:	00370107 	eorseq	r0, r7, r7, lsl #2
    1984:	6e070000 	cdpvs	0, 0, cr0, cr7, cr0, {0}
    1988:	00000258 	andeq	r0, r0, r8, asr r2
    198c:	00009b09 	andeq	r9, r0, r9, lsl #22
    1990:	39090000 	stmdbcc	r9, {}	; <UNPREDICTABLE>
    1994:	01000010 	tsteq	r0, r0, lsl r0
    1998:	0001f509 	andeq	pc, r1, r9, lsl #10
    199c:	03000200 	movweq	r0, #512	; 0x200
    19a0:	0000049a 	muleq	r0, sl, r4
    19a4:	02387207 	eorseq	r7, r8, #1879048192	; 0x70000000
    19a8:	07100000 	ldreq	r0, [r0, -r0]
    19ac:	00003701 	andeq	r3, r0, r1, lsl #14
    19b0:	7d7a0700 	ldclvc	7, cr0, [sl, #-0]
    19b4:	09000002 	stmdbeq	r0, {r1}
    19b8:	000011fd 	strdeq	r1, [r0], -sp
    19bc:	11bd0900 			; <UNDEFINED> instruction: 0x11bd0900
    19c0:	00010000 	andeq	r0, r1, r0
    19c4:	0012cc03 	andseq	ip, r2, r3, lsl #24
    19c8:	637d0700 	cmnvs	sp, #0, 14
    19cc:	11000002 	tstne	r0, r2
    19d0:	cd840708 	stcgt	7, cr0, [r4, #32]
    19d4:	12000002 	andne	r0, r0, #2
    19d8:	00000e7c 	andeq	r0, r0, ip, ror lr
    19dc:	00c28607 	sbceq	r8, r2, r7, lsl #12
    19e0:	12000000 	andne	r0, r0, #0
    19e4:	00000d14 	andeq	r0, r0, r4, lsl sp
    19e8:	01d78907 	bicseq	r8, r7, r7, lsl #18
    19ec:	12040000 	andne	r0, r4, #0
    19f0:	00000ad0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    19f4:	022d8c07 	eoreq	r8, sp, #1792	; 0x700
    19f8:	12050000 	andne	r0, r5, #0
    19fc:	0000091a 	andeq	r0, r0, sl, lsl r9
    1a00:	01fc8f07 	mvnseq	r8, r7, lsl #30
    1a04:	12060000 	andne	r0, r6, #0
    1a08:	00000ea9 	andeq	r0, r0, r9, lsr #29
    1a0c:	02589207 	subseq	r9, r8, #1879048192	; 0x70000000
    1a10:	00070000 	andeq	r0, r7, r0
    1a14:	00037c03 	andeq	r7, r3, r3, lsl #24
    1a18:	88940700 	ldmhi	r4, {r8, r9, sl}
    1a1c:	13000002 	movwne	r0, #2
    1a20:	00001366 	andeq	r1, r0, r6, ror #6
    1a24:	2e024301 	cdpcs	3, 0, cr4, cr2, cr1, {0}
    1a28:	a4200014 	strtge	r0, [r0], #-20	; 0xffffffec
    1a2c:	01000000 	mrseq	r0, (UNDEF: 0)
    1a30:	00033a9c 	muleq	r3, ip, sl
    1a34:	12ec1400 	rscne	r1, ip, #0, 8
    1a38:	43010000 	movwmi	r0, #4096	; 0x1000
    1a3c:	00033a02 	andeq	r3, r3, r2, lsl #20
    1a40:	6c910200 	lfmvs	f0, 4, [r1], {0}
    1a44:	00129714 	andseq	r9, r2, r4, lsl r7
    1a48:	02430100 	subeq	r0, r3, #0, 2
    1a4c:	000000a2 	andeq	r0, r0, r2, lsr #1
    1a50:	146a9102 	strbtne	r9, [sl], #-258	; 0xfffffefe
    1a54:	000011d9 	ldrdeq	r1, [r0], -r9
    1a58:	97024301 	strls	r4, [r2, -r1, lsl #6]
    1a5c:	02000000 	andeq	r0, r0, #0
    1a60:	e1156991 			; <UNDEFINED> instruction: 0xe1156991
    1a64:	01000011 	tsteq	r0, r1, lsl r0
    1a68:	00c20245 	sbceq	r0, r2, r5, asr #4
    1a6c:	91020000 	mrsls	r0, (UNDEF: 2)
    1a70:	13021574 	movwne	r1, #9588	; 0x2574
    1a74:	46010000 	strmi	r0, [r1], -r0
    1a78:	0000c202 	andeq	ip, r0, r2, lsl #4
    1a7c:	70910200 	addsvc	r0, r1, r0, lsl #4
    1a80:	a5041600 	strge	r1, [r4, #-1536]	; 0xfffffa00
    1a84:	13000001 	movwne	r0, #1
    1a88:	000012f2 	strdeq	r1, [r0], -r2
    1a8c:	0a01f001 	beq	7da98 <startup-0x1ff82568>
    1a90:	24200014 	strtcs	r0, [r0], #-20	; 0xffffffec
    1a94:	01000000 	mrseq	r0, (UNDEF: 0)
    1a98:	0003759c 	muleq	r3, ip, r5
    1a9c:	12ec1400 	rscne	r1, ip, #0, 8
    1aa0:	f0010000 			; <UNDEFINED> instruction: 0xf0010000
    1aa4:	00033a01 	andeq	r3, r3, r1, lsl #20
    1aa8:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    1aac:	000e7c14 	andeq	r7, lr, r4, lsl ip
    1ab0:	01f00100 	mvnseq	r0, r0, lsl #2
    1ab4:	000000a2 	andeq	r0, r0, r2, lsr #1
    1ab8:	00729102 	rsbseq	r9, r2, r2, lsl #2
    1abc:	0012e113 	andseq	lr, r2, r3, lsl r1
    1ac0:	01e00100 	mvneq	r0, r0, lsl #2
    1ac4:	200013ec 	andcs	r1, r0, ip, ror #7
    1ac8:	0000001e 	andeq	r0, r0, lr, lsl r0
    1acc:	03aa9c01 			; <UNDEFINED> instruction: 0x03aa9c01
    1ad0:	ec140000 	ldc	0, cr0, [r4], {-0}
    1ad4:	01000012 	tsteq	r0, r2, lsl r0
    1ad8:	033a01e0 	teqeq	sl, #224, 2	; 0x38
    1adc:	91020000 	mrsls	r0, (UNDEF: 2)
    1ae0:	128f1474 	addne	r1, pc, #116, 8	; 0x74000000
    1ae4:	e0010000 	and	r0, r1, r0
    1ae8:	0000a201 	andeq	sl, r0, r1, lsl #4
    1aec:	72910200 	addsvc	r0, r1, #0, 4
    1af0:	12071300 	andne	r1, r7, #0, 6
    1af4:	c7010000 	strgt	r0, [r1, -r0]
    1af8:	0013b201 	andseq	fp, r3, r1, lsl #4
    1afc:	00003a20 	andeq	r3, r0, r0, lsr #20
    1b00:	ee9c0100 	fmle	f0, f4, f0
    1b04:	14000003 	strne	r0, [r0], #-3
    1b08:	000012ec 	andeq	r1, r0, ip, ror #5
    1b0c:	3a01c701 	bcc	73718 <startup-0x1ff8c8e8>
    1b10:	02000003 	andeq	r0, r0, #3
    1b14:	7c147491 	cfldrsvc	mvf7, [r4], {145}	; 0x91
    1b18:	0100000e 	tsteq	r0, lr
    1b1c:	00a201c7 	adceq	r0, r2, r7, asr #3
    1b20:	91020000 	mrsls	r0, (UNDEF: 2)
    1b24:	11f61472 	mvnsne	r1, r2, ror r4
    1b28:	c7010000 	strgt	r0, [r1, -r0]
    1b2c:	00027d01 	andeq	r7, r2, r1, lsl #26
    1b30:	71910200 	orrsvc	r0, r1, r0, lsl #4
    1b34:	122c1300 	eorne	r1, ip, #0, 6
    1b38:	b1010000 	mrslt	r0, (UNDEF: 1)
    1b3c:	00139401 	andseq	r9, r3, r1, lsl #8
    1b40:	00001e20 	andeq	r1, r0, r0, lsr #28
    1b44:	239c0100 	orrscs	r0, ip, #0, 2
    1b48:	14000004 	strne	r0, [r0], #-4
    1b4c:	000012ec 	andeq	r1, r0, ip, ror #5
    1b50:	3a01b101 	bcc	6df5c <startup-0x1ff920a4>
    1b54:	02000003 	andeq	r0, r0, #3
    1b58:	7c147491 	cfldrsvc	mvf7, [r4], {145}	; 0x91
    1b5c:	0100000e 	tsteq	r0, lr
    1b60:	00a201b1 	strhteq	r0, [r2], r1
    1b64:	91020000 	mrsls	r0, (UNDEF: 2)
    1b68:	15130072 	ldrne	r0, [r3, #-114]	; 0xffffff8e
    1b6c:	01000012 	tsteq	r0, r2, lsl r0
    1b70:	1376019c 	cmnne	r6, #156, 2	; 0x27
    1b74:	001e2000 	andseq	r2, lr, r0
    1b78:	9c010000 	stcls	0, cr0, [r1], {-0}
    1b7c:	00000458 	andeq	r0, r0, r8, asr r4
    1b80:	0012ec14 	andseq	lr, r2, r4, lsl ip
    1b84:	019c0100 	orrseq	r0, ip, r0, lsl #2
    1b88:	0000033a 	andeq	r0, r0, sl, lsr r3
    1b8c:	14749102 	ldrbtne	r9, [r4], #-258	; 0xfffffefe
    1b90:	00000e7c 	andeq	r0, r0, ip, ror lr
    1b94:	a2019c01 	andge	r9, r1, #256	; 0x100
    1b98:	02000000 	andeq	r0, r0, #0
    1b9c:	17007291 			; <UNDEFINED> instruction: 0x17007291
    1ba0:	000011c5 	andeq	r1, r0, r5, asr #3
    1ba4:	a2018801 	andge	r8, r1, #65536	; 0x10000
    1ba8:	60000000 	andvs	r0, r0, r0
    1bac:	16200013 			; <UNDEFINED> instruction: 0x16200013
    1bb0:	01000000 	mrseq	r0, (UNDEF: 0)
    1bb4:	0004829c 	muleq	r4, ip, r2
    1bb8:	12ec1400 	rscne	r1, ip, #0, 8
    1bbc:	88010000 	stmdahi	r1, {}	; <UNPREDICTABLE>
    1bc0:	00033a01 	andeq	r3, r3, r1, lsl #20
    1bc4:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    1bc8:	13771700 	cmnne	r7, #0, 14
    1bcc:	6e010000 	cdpvs	0, 0, cr0, cr1, cr0, {0}
    1bd0:	00009701 	andeq	r9, r0, r1, lsl #14
    1bd4:	00131e00 	andseq	r1, r3, r0, lsl #28
    1bd8:	00004220 	andeq	r4, r0, r0, lsr #4
    1bdc:	ca9c0100 	bgt	fe701fe4 <APBAHBPrescTable+0xde7009f4>
    1be0:	14000004 	strne	r0, [r0], #-4
    1be4:	000012ec 	andeq	r1, r0, ip, ror #5
    1be8:	3a016e01 	bcc	5d3f4 <startup-0x1ffa2c0c>
    1bec:	02000003 	andeq	r0, r0, #3
    1bf0:	7c146c91 	ldcvc	12, cr6, [r4], {145}	; 0x91
    1bf4:	0100000e 	tsteq	r0, lr
    1bf8:	00a2016e 	adceq	r0, r2, lr, ror #2
    1bfc:	91020000 	mrsls	r0, (UNDEF: 2)
    1c00:	0f3d156a 	svceq	0x003d156a
    1c04:	70010000 	andvc	r0, r1, r0
    1c08:	00009701 	andeq	r9, r0, r1, lsl #14
    1c0c:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    1c10:	12a61700 	adcne	r1, r6, #0, 14
    1c14:	5d010000 	stcpl	0, cr0, [r1, #-0]
    1c18:	0000a201 	andeq	sl, r0, r1, lsl #4
    1c1c:	00130800 	andseq	r0, r3, r0, lsl #16
    1c20:	00001620 	andeq	r1, r0, r0, lsr #12
    1c24:	f49c0100 			; <UNDEFINED> instruction: 0xf49c0100
    1c28:	14000004 	strne	r0, [r0], #-4
    1c2c:	000012ec 	andeq	r1, r0, ip, ror #5
    1c30:	3a015d01 	bcc	5903c <startup-0x1ffa6fc4>
    1c34:	02000003 	andeq	r0, r0, #3
    1c38:	17007491 			; <UNDEFINED> instruction: 0x17007491
    1c3c:	00001247 	andeq	r1, r0, r7, asr #4
    1c40:	97014301 	strls	r4, [r1, -r1, lsl #6]
    1c44:	c6000000 	strgt	r0, [r0], -r0
    1c48:	42200012 	eormi	r0, r0, #18
    1c4c:	01000000 	mrseq	r0, (UNDEF: 0)
    1c50:	00053c9c 	muleq	r5, ip, ip
    1c54:	12ec1400 	rscne	r1, ip, #0, 8
    1c58:	43010000 	movwmi	r0, #4096	; 0x1000
    1c5c:	00033a01 	andeq	r3, r3, r1, lsl #20
    1c60:	6c910200 	lfmvs	f0, 4, [r1], {0}
    1c64:	000e7c14 	andeq	r7, lr, r4, lsl ip
    1c68:	01430100 	mrseq	r0, (UNDEF: 83)
    1c6c:	000000a2 	andeq	r0, r0, r2, lsr #1
    1c70:	156a9102 	strbne	r9, [sl, #-258]!	; 0xfffffefe
    1c74:	00000f3d 	andeq	r0, r0, sp, lsr pc
    1c78:	97014501 	strls	r4, [r1, -r1, lsl #10]
    1c7c:	02000000 	andeq	r0, r0, #0
    1c80:	13007791 	movwne	r7, #1937	; 0x791
    1c84:	000012b9 			; <UNDEFINED> instruction: 0x000012b9
    1c88:	80011501 	andhi	r1, r1, r1, lsl #10
    1c8c:	46200012 			; <UNDEFINED> instruction: 0x46200012
    1c90:	01000000 	mrseq	r0, (UNDEF: 0)
    1c94:	0005809c 	muleq	r5, ip, r0
    1c98:	12ec1400 	rscne	r1, ip, #0, 8
    1c9c:	15010000 	strne	r0, [r1, #-0]
    1ca0:	00033a01 	andeq	r3, r3, r1, lsl #20
    1ca4:	6c910200 	lfmvs	f0, 4, [r1], {0}
    1ca8:	000e7c14 	andeq	r7, lr, r4, lsl ip
    1cac:	01150100 	tsteq	r5, r0, lsl #2
    1cb0:	000000a2 	andeq	r0, r0, r2, lsr #1
    1cb4:	186a9102 	stmdane	sl!, {r1, r8, ip, pc}^
    1cb8:	00706d74 	rsbseq	r6, r0, r4, ror sp
    1cbc:	cd011701 	stcgt	7, cr1, [r1, #-4]
    1cc0:	02000000 	andeq	r0, r0, #0
    1cc4:	19007491 	stmdbne	r0, {r0, r4, r7, sl, ip, sp, lr}
    1cc8:	000011e6 	andeq	r1, r0, r6, ror #3
    1ccc:	124cfe01 	subne	pc, ip, #1, 28
    1cd0:	00342000 	eorseq	r2, r4, r0
    1cd4:	9c010000 	stcls	0, cr0, [r1], {-0}
    1cd8:	000005a4 	andeq	r0, r0, r4, lsr #11
    1cdc:	00127f1a 	andseq	r7, r2, sl, lsl pc
    1ce0:	a4fe0100 	ldrbtge	r0, [lr], #256	; 0x100
    1ce4:	02000005 	andeq	r0, r0, #5
    1ce8:	16007491 			; <UNDEFINED> instruction: 0x16007491
    1cec:	0002cd04 	andeq	ip, r2, r4, lsl #26
    1cf0:	12221900 	eorne	r1, r2, #0, 18
    1cf4:	ca010000 	bgt	41cfc <startup-0x1ffbe304>
    1cf8:	20001134 	andcs	r1, r0, r4, lsr r1
    1cfc:	00000118 	andeq	r0, r0, r8, lsl r1
    1d00:	06069c01 	streq	r9, [r6], -r1, lsl #24
    1d04:	ec1a0000 	ldc	0, cr0, [sl], {-0}
    1d08:	01000012 	tsteq	r0, r2, lsl r0
    1d0c:	00033aca 	andeq	r3, r3, sl, asr #21
    1d10:	64910200 	ldrvs	r0, [r1], #512	; 0x200
    1d14:	00127f1a 	andseq	r7, r2, sl, lsl pc
    1d18:	a4ca0100 	strbge	r0, [sl], #256	; 0x100
    1d1c:	02000005 	andeq	r0, r0, #5
    1d20:	b61b6091 			; <UNDEFINED> instruction: 0xb61b6091
    1d24:	01000011 	tsteq	r0, r1, lsl r0
    1d28:	0000c2cc 	andeq	ip, r0, ip, asr #5
    1d2c:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    1d30:	736f701c 	cmnvc	pc, #28
    1d34:	c2cc0100 	sbcgt	r0, ip, #0, 2
    1d38:	02000000 	andeq	r0, r0, #0
    1d3c:	d61b7091 			; <UNDEFINED> instruction: 0xd61b7091
    1d40:	01000012 	tsteq	r0, r2, lsl r0
    1d44:	0000c2cc 	andeq	ip, r0, ip, asr #5
    1d48:	6c910200 	lfmvs	f0, 4, [r1], {0}
    1d4c:	123b1d00 	eorsne	r1, fp, #0, 26
    1d50:	7f010000 	svcvc	0x00010000
    1d54:	20000fc4 	andcs	r0, r0, r4, asr #31
    1d58:	00000170 	andeq	r0, r0, r0, ror r1
    1d5c:	ec1a9c01 	ldc	12, cr9, [sl], {1}
    1d60:	01000012 	tsteq	r0, r2, lsl r0
    1d64:	00033a7f 	andeq	r3, r3, pc, ror sl
    1d68:	74910200 	ldrvc	r0, [r1], #512	; 0x200
	...

Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
   0:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
   4:	030b130e 	movweq	r1, #45838	; 0xb30e
   8:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xfffff4f2
   c:	10011117 	andne	r1, r1, r7, lsl r1
  10:	02000017 	andeq	r0, r0, #23
  14:	0e030104 	adfeqs	f0, f3, f4
  18:	0b0b0b3e 	bleq	2c2d18 <startup-0x1fd3d2e8>
  1c:	0b3a1349 	bleq	e84d48 <startup-0x1f17b2b8>
  20:	13010b3b 	movwne	r0, #6971	; 0x1b3b
  24:	28030000 	stmdacs	r3, {}	; <UNPREDICTABLE>
  28:	1c0e0300 	stcne	3, cr0, [lr], {-0}
  2c:	0400000d 	streq	r0, [r0], #-13
  30:	0e030028 	cdpeq	0, 0, cr0, cr3, cr8, {1}
  34:	00000b1c 	andeq	r0, r0, ip, lsl fp
  38:	0b002405 	bleq	9054 <startup-0x1fff6fac>
  3c:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
  40:	0600000e 	streq	r0, [r0], -lr
  44:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
  48:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
  4c:	00001349 	andeq	r1, r0, r9, asr #6
  50:	03001607 	movweq	r1, #1543	; 0x607
  54:	3b0b3a0e 	blcc	2ce894 <startup-0x1fd3176c>
  58:	0013490b 	andseq	r4, r3, fp, lsl #18
  5c:	00240800 	eoreq	r0, r4, r0, lsl #16
  60:	0b3e0b0b 	bleq	f82c94 <startup-0x1f07d36c>
  64:	00000803 	andeq	r0, r0, r3, lsl #16
  68:	49003509 	stmdbmi	r0, {r0, r3, r8, sl, ip, sp}
  6c:	0a000013 	beq	c0 <startup-0x1fffff40>
  70:	13490026 	movtne	r0, #36902	; 0x9026
  74:	130b0000 	movwne	r0, #45056	; 0xb000
  78:	3a050b01 	bcc	142c84 <startup-0x1febd37c>
  7c:	01053b0b 	tsteq	r5, fp, lsl #22
  80:	0c000013 	stceq	0, cr0, [r0], {19}
  84:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
  88:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
  8c:	0b381349 	bleq	e04db8 <startup-0x1f1fb248>
  90:	0d0d0000 	stceq	0, cr0, [sp, #-0]
  94:	3a0e0300 	bcc	380c9c <startup-0x1fc7f364>
  98:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
  9c:	00053813 	andeq	r3, r5, r3, lsl r8
  a0:	000d0e00 	andeq	r0, sp, r0, lsl #28
  a4:	0b3a0803 	bleq	e820b8 <startup-0x1f17df48>
  a8:	1349053b 	movtne	r0, #38203	; 0x953b
  ac:	00000538 	andeq	r0, r0, r8, lsr r5
  b0:	4901010f 	stmdbmi	r1, {r0, r1, r2, r3, r8}
  b4:	00130113 	andseq	r0, r3, r3, lsl r1
  b8:	00211000 	eoreq	r1, r1, r0
  bc:	0b2f1349 	bleq	bc4de8 <startup-0x1f43b218>
  c0:	21110000 	tstcs	r1, r0
  c4:	2f134900 	svccs	0x00134900
  c8:	12000005 	andne	r0, r0, #5
  cc:	0b0b0113 	bleq	2c0520 <startup-0x1fd3fae0>
  d0:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
  d4:	00001301 	andeq	r1, r0, r1, lsl #6
  d8:	03000d13 	movweq	r0, #3347	; 0xd13
  dc:	3b0b3a08 	blcc	2ce904 <startup-0x1fd316fc>
  e0:	38134905 	ldmdacc	r3, {r0, r2, r8, fp, lr}
  e4:	1400000b 	strne	r0, [r0], #-11
  e8:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
  ec:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
  f0:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
  f4:	0000193c 	andeq	r1, r0, ip, lsr r9
  f8:	03003415 	movweq	r3, #1045	; 0x415
  fc:	3b0b3a0e 	blcc	2ce93c <startup-0x1fd316c4>
 100:	3f13490b 	svccc	0x0013490b
 104:	00193c19 	andseq	r3, r9, r9, lsl ip
 108:	01041600 	tsteq	r4, r0, lsl #12
 10c:	0b0b0b3e 	bleq	2c2e0c <startup-0x1fd3d1f4>
 110:	0b3a1349 	bleq	e84e3c <startup-0x1f17b1c4>
 114:	1301053b 	movwne	r0, #5435	; 0x153b
 118:	28170000 	ldmdacs	r7, {}	; <UNPREDICTABLE>
 11c:	1c080300 	stcne	3, cr0, [r8], {-0}
 120:	1800000b 	stmdane	r0, {r0, r1, r3}
 124:	0b0b0113 	bleq	2c0578 <startup-0x1fd3fa88>
 128:	0b3b0b3a 	bleq	ec2e18 <startup-0x1f13d1e8>
 12c:	00001301 	andeq	r1, r0, r1, lsl #6
 130:	03000d19 	movweq	r0, #3353	; 0xd19
 134:	3b0b3a0e 	blcc	2ce974 <startup-0x1fd3168c>
 138:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
 13c:	1a00000b 	bne	170 <startup-0x1ffffe90>
 140:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 144:	0b3b0b3a 	bleq	ec2e34 <startup-0x1f13d1cc>
 148:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 14c:	041b0000 	ldreq	r0, [fp], #-0
 150:	0b0b3e01 	bleq	2cf95c <startup-0x1fd306a4>
 154:	3a13490b 	bcc	4d2588 <startup-0x1fb2da78>
 158:	010b3b0b 	tsteq	fp, fp, lsl #22
 15c:	1c000013 	stcne	0, cr0, [r0], {19}
 160:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 164:	0b3b0b3a 	bleq	ec2e54 <startup-0x1f13d1ac>
 168:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
 16c:	00001802 	andeq	r1, r0, r2, lsl #16
 170:	0301131d 	movweq	r1, #4893	; 0x131d
 174:	3a0b0b0e 	bcc	2c2db4 <startup-0x1fd3d24c>
 178:	010b3b0b 	tsteq	fp, fp, lsl #22
 17c:	1e000013 	mcrne	0, 0, r0, cr0, cr3, {0}
 180:	0803000d 	stmdaeq	r3, {r0, r2, r3}
 184:	0b3b0b3a 	bleq	ec2e74 <startup-0x1f13d18c>
 188:	0b381349 	bleq	e04eb4 <startup-0x1f1fb14c>
 18c:	2e1f0000 	cdpcs	0, 1, cr0, cr15, cr0, {0}
 190:	03193f01 	tsteq	r9, #1, 30
 194:	3b0b3a0e 	blcc	2ce9d4 <startup-0x1fd3162c>
 198:	1119270b 	tstne	r9, fp, lsl #14
 19c:	40061201 	andmi	r1, r6, r1, lsl #4
 1a0:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 1a4:	00001301 	andeq	r1, r0, r1, lsl #6
 1a8:	11010b20 	tstne	r1, r0, lsr #22
 1ac:	01061201 	tsteq	r6, r1, lsl #4
 1b0:	21000013 	tstcs	r0, r3, lsl r0
 1b4:	08030034 	stmdaeq	r3, {r2, r4, r5}
 1b8:	0b3b0b3a 	bleq	ec2ea8 <startup-0x1f13d158>
 1bc:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 1c0:	0b220000 	bleq	8801c8 <startup-0x1f77fe38>
 1c4:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
 1c8:	23000006 	movwcs	r0, #6
 1cc:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
 1d0:	0b3a0e03 	bleq	e839e4 <startup-0x1f17c61c>
 1d4:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 1d8:	06120111 			; <UNDEFINED> instruction: 0x06120111
 1dc:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 1e0:	24000019 	strcs	r0, [r0], #-25	; 0xffffffe7
 1e4:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 1e8:	0b3a0e03 	bleq	e839fc <startup-0x1f17c604>
 1ec:	01110b3b 	tsteq	r1, fp, lsr fp
 1f0:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 1f4:	01194296 			; <UNDEFINED> instruction: 0x01194296
 1f8:	25000013 	strcs	r0, [r0, #-19]	; 0xffffffed
 1fc:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 200:	0b3a0e03 	bleq	e83a14 <startup-0x1f17c5ec>
 204:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
 208:	06120111 			; <UNDEFINED> instruction: 0x06120111
 20c:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 210:	00130119 	andseq	r0, r3, r9, lsl r1
 214:	00052600 	andeq	r2, r5, r0, lsl #12
 218:	0b3a0e03 	bleq	e83a2c <startup-0x1f17c5d4>
 21c:	1349053b 	movtne	r0, #38203	; 0x953b
 220:	00001802 	andeq	r1, r0, r2, lsl #16
 224:	3f012e27 	svccc	0x00012e27
 228:	3a0e0319 	bcc	380e94 <startup-0x1fc7f16c>
 22c:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
 230:	11134919 	tstne	r3, r9, lsl r9
 234:	40061201 	andmi	r1, r6, r1, lsl #4
 238:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 23c:	00001301 	andeq	r1, r0, r1, lsl #6
 240:	03003428 	movweq	r3, #1064	; 0x428
 244:	3b0b3a0e 	blcc	2cea84 <startup-0x1fd3157c>
 248:	02134905 	andseq	r4, r3, #81920	; 0x14000
 24c:	29000018 	stmdbcs	r0, {r3, r4}
 250:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
 254:	0b3a0e03 	bleq	e83a68 <startup-0x1f17c598>
 258:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
 25c:	06120111 			; <UNDEFINED> instruction: 0x06120111
 260:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 264:	2a000019 	bcs	2d0 <startup-0x1ffffd30>
 268:	08030034 	stmdaeq	r3, {r2, r4, r5}
 26c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 270:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 274:	2e2b0000 	cdpcs	0, 2, cr0, cr11, cr0, {0}
 278:	03193f01 	tsteq	r9, #1, 30
 27c:	3b0b3a0e 	blcc	2ceabc <startup-0x1fd31544>
 280:	11192705 	tstne	r9, r5, lsl #14
 284:	40061201 	andmi	r1, r6, r1, lsl #4
 288:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 28c:	00001301 	andeq	r1, r0, r1, lsl #6
 290:	0b000f2c 	bleq	3f48 <startup-0x1fffc0b8>
 294:	0013490b 	andseq	r4, r3, fp, lsl #18
 298:	002e2d00 	eoreq	r2, lr, r0, lsl #26
 29c:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 2a0:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 2a4:	13491927 	movtne	r1, #39207	; 0x9927
 2a8:	06120111 			; <UNDEFINED> instruction: 0x06120111
 2ac:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 2b0:	2e000019 	mcrcs	0, 0, r0, cr0, cr9, {0}
 2b4:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 2b8:	0b3a0e03 	bleq	e83acc <startup-0x1f17c534>
 2bc:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
 2c0:	01111349 	tsteq	r1, r9, asr #6
 2c4:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 2c8:	01194296 			; <UNDEFINED> instruction: 0x01194296
 2cc:	2f000013 	svccs	0x00000013
 2d0:	0e03012e 	adfeqsp	f0, f3, #0.5
 2d4:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 2d8:	13491927 	movtne	r1, #39207	; 0x9927
 2dc:	06120111 			; <UNDEFINED> instruction: 0x06120111
 2e0:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 2e4:	00130119 	andseq	r0, r3, r9, lsl r1
 2e8:	012e3000 			; <UNDEFINED> instruction: 0x012e3000
 2ec:	0b3a0e03 	bleq	e83b00 <startup-0x1f17c500>
 2f0:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
 2f4:	06120111 			; <UNDEFINED> instruction: 0x06120111
 2f8:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 2fc:	00000019 	andeq	r0, r0, r9, lsl r0
 300:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
 304:	030b130e 	movweq	r1, #45838	; 0xb30e
 308:	110e1b0e 	tstne	lr, lr, lsl #22
 30c:	10061201 	andne	r1, r6, r1, lsl #4
 310:	02000017 	andeq	r0, r0, #23
 314:	0b0b0024 	bleq	2c03ac <startup-0x1fd3fc54>
 318:	0e030b3e 	vmoveq.16	d3[0], r0
 31c:	16030000 	strne	r0, [r3], -r0
 320:	3a0e0300 	bcc	380f28 <startup-0x1fc7f0d8>
 324:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 328:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
 32c:	0b0b0024 	bleq	2c03c4 <startup-0x1fd3fc3c>
 330:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
 334:	35050000 	strcc	r0, [r5, #-0]
 338:	00134900 	andseq	r4, r3, r0, lsl #18
 33c:	00340600 	eorseq	r0, r4, r0, lsl #12
 340:	0b3a0e03 	bleq	e83b54 <startup-0x1f17c4ac>
 344:	1349053b 	movtne	r0, #38203	; 0x953b
 348:	193c193f 	ldmdbne	ip!, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
 34c:	34070000 	strcc	r0, [r7], #-0
 350:	3a0e0300 	bcc	380f58 <startup-0x1fc7f0a8>
 354:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 358:	3c193f13 	ldccc	15, cr3, [r9], {19}
 35c:	08000019 	stmdaeq	r0, {r0, r3, r4}
 360:	0b3e0104 	bleq	f80778 <startup-0x1f07f888>
 364:	13490b0b 	movtne	r0, #39691	; 0x9b0b
 368:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 36c:	00001301 	andeq	r1, r0, r1, lsl #6
 370:	03002809 	movweq	r2, #2057	; 0x809
 374:	000b1c0e 	andeq	r1, fp, lr, lsl #24
 378:	01130a00 	tsteq	r3, r0, lsl #20
 37c:	0b3a0b0b 	bleq	e82fb0 <startup-0x1f17d050>
 380:	1301053b 	movwne	r0, #5435	; 0x153b
 384:	0d0b0000 	stceq	0, cr0, [fp, #-0]
 388:	3a0e0300 	bcc	380f90 <startup-0x1fc7f070>
 38c:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 390:	000b3813 	andeq	r3, fp, r3, lsl r8
 394:	000d0c00 	andeq	r0, sp, r0, lsl #24
 398:	0b3a0803 	bleq	e823ac <startup-0x1f17dc54>
 39c:	1349053b 	movtne	r0, #38203	; 0x953b
 3a0:	00000b38 	andeq	r0, r0, r8, lsr fp
 3a4:	4901010d 	stmdbmi	r1, {r0, r2, r3, r8}
 3a8:	00130113 	andseq	r0, r3, r3, lsl r1
 3ac:	00210e00 	eoreq	r0, r1, r0, lsl #28
 3b0:	0b2f1349 	bleq	bc50dc <startup-0x1f43af24>
 3b4:	160f0000 	strne	r0, [pc], -r0
 3b8:	3a0e0300 	bcc	380fc0 <startup-0x1fc7f040>
 3bc:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 3c0:	10000013 	andne	r0, r0, r3, lsl r0
 3c4:	0b3e0104 	bleq	f807dc <startup-0x1f07f824>
 3c8:	13490b0b 	movtne	r0, #39691	; 0x9b0b
 3cc:	0b3b0b3a 	bleq	ec30bc <startup-0x1f13cf44>
 3d0:	00001301 	andeq	r1, r0, r1, lsl #6
 3d4:	0b011311 	bleq	45020 <startup-0x1ffbafe0>
 3d8:	3b0b3a0b 	blcc	2cec0c <startup-0x1fd313f4>
 3dc:	0013010b 	andseq	r0, r3, fp, lsl #2
 3e0:	000d1200 	andeq	r1, sp, r0, lsl #4
 3e4:	0b3a0e03 	bleq	e83bf8 <startup-0x1f17c408>
 3e8:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 3ec:	00000b38 	andeq	r0, r0, r8, lsr fp
 3f0:	3f012e13 	svccc	0x00012e13
 3f4:	3a0e0319 	bcc	381060 <startup-0x1fc7efa0>
 3f8:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
 3fc:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 400:	97184006 	ldrls	r4, [r8, -r6]
 404:	13011942 	movwne	r1, #6466	; 0x1942
 408:	05140000 	ldreq	r0, [r4, #-0]
 40c:	3a0e0300 	bcc	381014 <startup-0x1fc7efec>
 410:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 414:	00180213 	andseq	r0, r8, r3, lsl r2
 418:	00341500 	eorseq	r1, r4, r0, lsl #10
 41c:	0b3a0e03 	bleq	e83c30 <startup-0x1f17c3d0>
 420:	1349053b 	movtne	r0, #38203	; 0x953b
 424:	00001802 	andeq	r1, r0, r2, lsl #16
 428:	0b000f16 	bleq	4088 <startup-0x1fffbf78>
 42c:	0013490b 	andseq	r4, r3, fp, lsl #18
 430:	012e1700 			; <UNDEFINED> instruction: 0x012e1700
 434:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 438:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 43c:	13491927 	movtne	r1, #39207	; 0x9927
 440:	06120111 			; <UNDEFINED> instruction: 0x06120111
 444:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 448:	00130119 	andseq	r0, r3, r9, lsl r1
 44c:	00341800 	eorseq	r1, r4, r0, lsl #16
 450:	0b3a0803 	bleq	e82464 <startup-0x1f17db9c>
 454:	1349053b 	movtne	r0, #38203	; 0x953b
 458:	00001802 	andeq	r1, r0, r2, lsl #16
 45c:	3f012e19 	svccc	0x00012e19
 460:	3a0e0319 	bcc	3810cc <startup-0x1fc7ef34>
 464:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 468:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 46c:	97184006 	ldrls	r4, [r8, -r6]
 470:	13011942 	movwne	r1, #6466	; 0x1942
 474:	051a0000 	ldreq	r0, [sl, #-0]
 478:	3a0e0300 	bcc	381080 <startup-0x1fc7ef80>
 47c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 480:	00180213 	andseq	r0, r8, r3, lsl r2
 484:	00341b00 	eorseq	r1, r4, r0, lsl #22
 488:	0b3a0e03 	bleq	e83c9c <startup-0x1f17c364>
 48c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 490:	00001802 	andeq	r1, r0, r2, lsl #16
 494:	0300341c 	movweq	r3, #1052	; 0x41c
 498:	3b0b3a08 	blcc	2cecc0 <startup-0x1fd31340>
 49c:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 4a0:	1d000018 	stcne	0, cr0, [r0, #-96]	; 0xffffffa0
 4a4:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 4a8:	0b3a0e03 	bleq	e83cbc <startup-0x1f17c344>
 4ac:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 4b0:	06120111 			; <UNDEFINED> instruction: 0x06120111
 4b4:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 4b8:	00000019 	andeq	r0, r0, r9, lsl r0

Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	00000024 	andeq	r0, r0, r4, lsr #32
   4:	00000002 	andeq	r0, r0, r2
   8:	00040000 	andeq	r0, r4, r0
   c:	00000000 	andeq	r0, r0, r0
  10:	20000010 	andcs	r0, r0, r0, lsl r0
  14:	00000fb4 			; <UNDEFINED> instruction: 0x00000fb4
  18:	20000000 	andcs	r0, r0, r0
  1c:	0000000c 	andeq	r0, r0, ip
	...
  28:	0000001c 	andeq	r0, r0, ip, lsl r0
  2c:	17470002 	strbne	r0, [r7, -r2]
  30:	00040000 	andeq	r0, r4, r0
  34:	00000000 	andeq	r0, r0, r0
  38:	20000fc4 	andcs	r0, r0, r4, asr #31
  3c:	0000050e 	andeq	r0, r0, lr, lsl #10
	...

Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
   0:	20000010 	andcs	r0, r0, r0, lsl r0
   4:	20000fc4 	andcs	r0, r0, r4, asr #31
   8:	20000000 	andcs	r0, r0, r0
   c:	2000000c 	andcs	r0, r0, ip
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
   0:	00000459 	andeq	r0, r0, r9, asr r4
   4:	01f00002 	mvnseq	r0, r2
   8:	01020000 	mrseq	r0, (UNDEF: 2)
   c:	000d0efb 	strdeq	r0, [sp], -fp
  10:	01010101 	tsteq	r1, r1, lsl #2
  14:	01000000 	mrseq	r0, (UNDEF: 0)
  18:	2e010000 	cdpcs	0, 0, cr0, cr1, cr0, {0}
  1c:	696c2f2e 	stmdbvs	ip!, {r1, r2, r3, r5, r8, r9, sl, fp, sp}^
  20:	54532f62 	ldrbpl	r2, [r3], #-3938	; 0xfffff09e
  24:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
  28:	696c5f34 	stmdbvs	ip!, {r2, r4, r5, r8, r9, sl, fp, ip, lr}^
  2c:	4d432f62 	stclmi	15, cr2, [r3, #-392]	; 0xfffffe78
  30:	2f534953 	svccs	0x00534953
  34:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
  38:	00656475 	rsbeq	r6, r5, r5, ror r4
  3c:	6c2f2e2e 	stcvs	14, cr2, [pc], #-184	; ffffff8c <APBAHBPrescTable+0xdfffe99c>
  40:	532f6269 			; <UNDEFINED> instruction: 0x532f6269
  44:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
  48:	6c5f3446 	cfldrdvs	mvd3, [pc], {70}	; 0x46
  4c:	532f6269 			; <UNDEFINED> instruction: 0x532f6269
  50:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
  54:	78783446 	ldmdavc	r8!, {r1, r2, r6, sl, ip, sp}^
  58:	6474535f 	ldrbtvs	r5, [r4], #-863	; 0xfffffca1
  5c:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
  60:	445f6870 	ldrbmi	r6, [pc], #-2160	; 68 <startup-0x1fffff98>
  64:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
  68:	72732f72 	rsbsvc	r2, r3, #456	; 0x1c8
  6c:	3a430063 	bcc	10c0200 <startup-0x1ef3fe00>
  70:	6573552f 	ldrbvs	r5, [r3, #-1327]!	; 0xfffffad1
  74:	412f7372 			; <UNDEFINED> instruction: 0x412f7372
  78:	746d6164 	strbtvc	r6, [sp], #-356	; 0xfffffe9c
  7c:	656e4f2f 	strbvs	r4, [lr, #-3887]!	; 0xfffff0d1
  80:	76697244 	strbtvc	r7, [r9], -r4, asr #4
  84:	6f442f65 	svcvs	0x00442f65
  88:	656d756b 	strbvs	r7, [sp, #-1387]!	; 0xfffffa95
  8c:	472f746e 	strmi	r7, [pc, -lr, ror #8]!
  90:	75487469 	strbvc	r7, [r8, #-1129]	; 0xfffffb97
  94:	41442f62 	cmpmi	r4, r2, ror #30
  98:	30393254 	eorscc	r3, r9, r4, asr r2
  9c:	72614c2d 	rsbvc	r4, r1, #11520	; 0x2d00
  a0:	7379736d 	cmnvc	r9, #-1275068415	; 0xb4000001
  a4:	2f6d6574 	svccs	0x006d6574
  a8:	2f646f6b 	svccs	0x00646f6b
  ac:	726f6f44 	rsbvc	r6, pc, #68, 30	; 0x110
  b0:	2f2e2e00 	svccs	0x002e2e00
  b4:	2f62696c 	svccs	0x0062696c
  b8:	334d5453 	movtcc	r5, #54355	; 0xd453
  bc:	5f344632 	svcpl	0x00344632
  c0:	2f62696c 	svccs	0x0062696c
  c4:	334d5453 	movtcc	r5, #54355	; 0xd453
  c8:	78344632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, lr}
  cc:	74535f78 	ldrbvc	r5, [r3], #-3960	; 0xfffff088
  d0:	72655064 	rsbvc	r5, r5, #100	; 0x64
  d4:	5f687069 	svcpl	0x00687069
  d8:	76697244 	strbtvc	r7, [r9], -r4, asr #4
  dc:	692f7265 	stmdbvs	pc!, {r0, r2, r5, r6, r9, ip, sp, lr}	; <UNPREDICTABLE>
  e0:	6300636e 	movwvs	r6, #878	; 0x36e
  e4:	73635c3a 	cmnvc	r3, #14848	; 0x3a00
  e8:	70706165 	rsbsvc	r6, r0, r5, ror #2
  ec:	646f635c 	strbtvs	r6, [pc], #-860	; f4 <startup-0x1fffff0c>
  f0:	74696c65 	strbtvc	r6, [r9], #-3173	; 0xfffff39b
  f4:	6f745c65 	svcvs	0x00745c65
  f8:	5c736c6f 	ldclpl	12, cr6, [r3], #-444	; 0xfffffe44
  fc:	2d636367 	stclcs	3, cr6, [r3, #-412]!	; 0xfffffe64
 100:	5c6d7261 	sfmpl	f7, 2, [sp], #-388	; 0xfffffe7c
 104:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
 108:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
 10c:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
 110:	6e695c69 	cdpvs	12, 6, cr5, cr9, cr9, {3}
 114:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
 118:	616d5c65 	cmnvs	sp, r5, ror #24
 11c:	6e696863 	cdpvs	8, 6, cr6, cr9, cr3, {3}
 120:	3a630065 	bcc	18c02bc <startup-0x1e73fd44>
 124:	6573635c 	ldrbvs	r6, [r3, #-860]!	; 0xfffffca4
 128:	5c707061 	ldclpl	0, cr7, [r0], #-388	; 0xfffffe7c
 12c:	65646f63 	strbvs	r6, [r4, #-3939]!	; 0xfffff09d
 130:	6574696c 	ldrbvs	r6, [r4, #-2412]!	; 0xfffff694
 134:	6f6f745c 	svcvs	0x006f745c
 138:	675c736c 	ldrbvs	r7, [ip, -ip, ror #6]
 13c:	612d6363 			; <UNDEFINED> instruction: 0x612d6363
 140:	615c6d72 	cmpvs	ip, r2, ror sp
 144:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
 148:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
 14c:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
 150:	636e695c 	cmnvs	lr, #92, 18	; 0x170000
 154:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
 158:	7379735c 	cmnvc	r9, #92, 6	; 0x70000001
 15c:	6f630000 	svcvs	0x00630000
 160:	635f6572 	cmpvs	pc, #478150656	; 0x1c800000
 164:	682e346d 	stmdavs	lr!, {r0, r2, r3, r5, r6, sl, ip, sp}
 168:	00000100 	andeq	r0, r0, r0, lsl #2
 16c:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
 170:	78346632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, sp, lr}
 174:	63725f78 	cmnvs	r2, #120, 30	; 0x1e0
 178:	00632e63 	rsbeq	r2, r3, r3, ror #28
 17c:	73000002 	movwvc	r0, #2
 180:	74726174 	ldrbtvc	r6, [r2], #-372	; 0xfffffe8c
 184:	632e7075 			; <UNDEFINED> instruction: 0x632e7075
 188:	00000300 	andeq	r0, r0, r0, lsl #6
 18c:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
 190:	78346632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, sp, lr}
 194:	00682e78 	rsbeq	r2, r8, r8, ror lr
 198:	5f000004 	svcpl	0x00000004
 19c:	61666564 	cmnvs	r6, r4, ror #10
 1a0:	5f746c75 	svcpl	0x00746c75
 1a4:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
 1a8:	00682e73 	rsbeq	r2, r8, r3, ror lr
 1ac:	5f000005 	svcpl	0x00000005
 1b0:	69647473 	stmdbvs	r4!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
 1b4:	682e746e 	stmdavs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
 1b8:	00000600 	andeq	r0, r0, r0, lsl #12
 1bc:	74737973 	ldrbtvc	r7, [r3], #-2419	; 0xfffff68d
 1c0:	735f6d65 	cmpvc	pc, #6464	; 0x1940
 1c4:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
 1c8:	78783466 	ldmdavc	r8!, {r1, r2, r5, r6, sl, ip, sp}^
 1cc:	0400682e 	streq	r6, [r0], #-2094	; 0xfffff7d2
 1d0:	74730000 	ldrbtvc	r0, [r3], #-0
 1d4:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
 1d8:	5f787834 	svcpl	0x00787834
 1dc:	2e636372 	mcrcs	3, 3, r6, cr3, cr2, {3}
 1e0:	00040068 	andeq	r0, r4, r8, rrx
 1e4:	6d747300 	ldclvs	3, cr7, [r4, #-0]
 1e8:	34663233 	strbtcc	r3, [r6], #-563	; 0xfffffdcd
 1ec:	675f7878 			; <UNDEFINED> instruction: 0x675f7878
 1f0:	2e6f6970 			; <UNDEFINED> instruction: 0x2e6f6970
 1f4:	00040068 	andeq	r0, r4, r8, rrx
 1f8:	05000000 	streq	r0, [r0, #-0]
 1fc:	00001002 	andeq	r1, r0, r2
 200:	0cdd0320 	ldcleq	3, cr0, [sp], {32}
 204:	cd4b7501 	cfstr64gt	mvdx7, [fp, #-4]
 208:	fc03d81e 	stc2	8, cr13, [r3], {30}
 20c:	004b9000 	subeq	r9, fp, r0
 210:	06010402 	streq	r0, [r1], -r2, lsl #8
 214:	4b300658 	blmi	c01b7c <startup-0x1f3fe484>
 218:	213f3d67 	teqcs	pc, r7, ror #26
 21c:	f7030204 			; <UNDEFINED> instruction: 0xf7030204
 220:	69308273 	ldmdbvs	r0!, {r0, r1, r4, r5, r6, r9, pc}
 224:	4f40693f 	svcmi	0x0040693f
 228:	503f694e 	eorspl	r6, pc, lr, asr #18
 22c:	6be41703 	blvs	ff905e40 <APBAHBPrescTable+0xdf904850>
 230:	0f034b3f 	svceq	0x00034b3f
 234:	3d2f3d74 	stccc	13, cr3, [pc, #-464]!	; 6c <startup-0x1fffff94>
 238:	02040200 	andeq	r0, r4, #0, 4
 23c:	04020040 	streq	r0, [r2], #-64	; 0xffffffc0
 240:	02006702 	andeq	r6, r0, #524288	; 0x80000
 244:	003d0204 	eorseq	r0, sp, r4, lsl #4
 248:	06010402 	streq	r0, [r1], -r2, lsl #8
 24c:	5a4c0658 	bpl	1301bb4 <startup-0x1ecfe44c>
 250:	032f3e4e 			; <UNDEFINED> instruction: 0x032f3e4e
 254:	32674a0b 	rsbcc	r4, r7, #45056	; 0xb000
 258:	3d694d3f 	stclcc	13, cr4, [r9, #-252]!	; 0xffffff04
 25c:	6a741503 	bvs	1d05670 <startup-0x1e2fa990>
 260:	6614034b 	ldrvs	r0, [r4], -fp, asr #6
 264:	033f3f6c 	teqeq	pc, #108, 30	; 0x1b0
 268:	7903660b 	stmdbvc	r3, {r0, r1, r3, r9, sl, sp, lr}
 26c:	3d233d20 	stccc	13, cr3, [r3, #-128]!	; 0xffffff80
 270:	740f0324 	strvc	r0, [pc], #-804	; 278 <startup-0x1ffffd88>
 274:	de034b6a 	vmlsle.f64	d4, d3, d26
 278:	bb7c6600 	bllt	1f19a80 <startup-0x1e0e6580>
 27c:	0e033e2d 	cdpeq	14, 0, cr3, cr3, cr13, {1}
 280:	034b6966 	movteq	r6, #47462	; 0xb966
 284:	835d661a 	cmphi	sp, #27262976	; 0x1a00000
 288:	74018503 	strvc	r8, [r1], #-1283	; 0xfffffafd
 28c:	e9034b69 	stmdb	r3, {r0, r3, r5, r6, r8, r9, fp, lr}
 290:	ad6c6600 	stclge	6, cr6, [ip, #-0]
 294:	69740d03 	ldmdbvs	r4!, {r0, r1, r8, sl, fp}^
 298:	660e034b 	strvs	r0, [lr], -fp, asr #6
 29c:	15034b69 	strne	r4, [r3, #-2921]	; 0xfffff497
 2a0:	3f345966 	svccc	0x00345966
 2a4:	0341694d 	movteq	r6, #6477	; 0x194d
 2a8:	34599018 	ldrbcc	r9, [r9], #-24	; 0xffffffe8
 2ac:	41694d3f 	cmnmi	r9, pc, lsr sp
 2b0:	7401b303 	strvc	fp, [r1], #-771	; 0xfffffcfd
 2b4:	4d3f334b 	ldcmi	3, cr3, [pc, #-300]!	; 190 <startup-0x1ffffe70>
 2b8:	0d033d4d 	stceq	13, cr3, [r3, #-308]	; 0xfffffecc
 2bc:	03672f66 	cmneq	r7, #408	; 0x198
 2c0:	334b6617 	movtcc	r6, #46615	; 0xb617
 2c4:	3d4d4d3f 	stclcc	13, cr4, [sp, #-252]	; 0xffffff04
 2c8:	4b660f03 	blmi	1983edc <startup-0x1e67c124>
 2cc:	4d4d3f33 	stclmi	15, cr3, [sp, #-204]	; 0xffffff34
 2d0:	820f033d 	andhi	r0, pc, #-201326592	; 0xf4000000
 2d4:	4d3f334b 	ldcmi	3, cr3, [pc, #-300]!	; 1b0 <startup-0x1ffffe50>
 2d8:	24033d5b 	strcs	r3, [r3], #-3419	; 0xfffff2a5
 2dc:	5ac04b90 	bpl	ff013124 <APBAHBPrescTable+0xdf011b34>
 2e0:	3d223d77 	stccc	13, cr3, [r2, #-476]!	; 0xfffffe24
 2e4:	3f5a6726 	svccc	0x005a6726
 2e8:	8383cbdb 	orrhi	ip, r3, #224256	; 0x36c00
 2ec:	3d201b03 	fstmdbxcc	r0!, {d1}	;@ Deprecated
 2f0:	683d5925 	ldmdavs	sp!, {r0, r2, r5, r8, fp, ip, lr}
 2f4:	683d6769 	ldmdavs	sp!, {r0, r3, r5, r6, r8, r9, sl, sp, lr}
 2f8:	683d6769 	ldmdavs	sp!, {r0, r3, r5, r6, r8, r9, sl, sp, lr}
 2fc:	ba3f0367 	blt	fc10a0 <startup-0x1f03ef60>
 300:	3f84334b 	svccc	0x0084334b
 304:	8340694d 	movthi	r6, #2381	; 0x94d
 308:	6a9e0a03 	bvs	fe782b1c <APBAHBPrescTable+0xde78152c>
 30c:	660c034b 	strvs	r0, [ip], -fp, asr #6
 310:	b8034b69 	stmdalt	r3, {r0, r3, r5, r6, r8, r9, fp, lr}
 314:	3d4e6601 	stclcc	6, cr6, [lr, #-4]
 318:	4b741603 	blmi	1d05b2c <startup-0x1e2fa4d4>
 31c:	4d4d4d33 	stclmi	13, cr4, [sp, #-204]	; 0xffffff34
 320:	8214034b 	andshi	r0, r4, #738197505	; 0x2c000001
 324:	4d4d334b 	stclmi	3, cr3, [sp, #-300]	; 0xfffffed4
 328:	11034b4d 	tstne	r3, sp, asr #22
 32c:	4d334b82 	vldmdbmi	r3!, {d4}
 330:	034b5b4d 	movteq	r5, #47949	; 0xbb4d
 334:	334b7410 	movtcc	r7, #46096	; 0xb410
 338:	4b694d4d 	blmi	1a53874 <startup-0x1e5ac78c>
 33c:	8200d303 	andhi	sp, r0, #201326592	; 0xc000000
 340:	4d4d334b 	stclmi	3, cr3, [sp, #-300]	; 0xfffffed4
 344:	f0034b4d 			; <UNDEFINED> instruction: 0xf0034b4d
 348:	3d4e8200 	sfmcc	f0, 3, [lr, #-0]
 34c:	79742503 	ldmdbvc	r4!, {r0, r1, r8, sl, sp}^
 350:	761e6c4c 	ldrvc	r6, [lr], -ip, asr #24
 354:	79741303 	ldmdbvc	r4!, {r0, r1, r8, r9, ip}^
 358:	761e6c4c 	ldrvc	r6, [lr], -ip, asr #24
 35c:	79741103 	ldmdbvc	r4!, {r0, r1, r8, ip}^
 360:	761e6c4c 	ldrvc	r6, [lr], -ip, asr #24
 364:	79742c03 	ldmdbvc	r4!, {r0, r1, sl, fp, sp}^
 368:	761e6c4c 	ldrvc	r6, [lr], -ip, asr #24
 36c:	79742703 	ldmdbvc	r4!, {r0, r1, r8, r9, sl, sp}^
 370:	761e6c4c 	ldrvc	r6, [lr], -ip, asr #24
 374:	79741d03 	ldmdbvc	r4!, {r0, r1, r8, sl, fp, ip}^
 378:	761e6c4c 	ldrvc	r6, [lr], -ip, asr #24
 37c:	79741003 	ldmdbvc	r4!, {r0, r1, ip}^
 380:	761e6c4c 	ldrvc	r6, [lr], -ip, asr #24
 384:	79740e03 	ldmdbvc	r4!, {r0, r1, r9, sl, fp}^
 388:	761e6c4c 	ldrvc	r6, [lr], -ip, asr #24
 38c:	78742903 	ldmdavc	r4!, {r0, r1, r8, fp, sp}^
 390:	761e6c4c 	ldrvc	r6, [lr], -ip, asr #24
 394:	78742303 	ldmdavc	r4!, {r0, r1, r8, r9, sp}^
 398:	761e6c4c 	ldrvc	r6, [lr], -ip, asr #24
 39c:	78742503 	ldmdavc	r4!, {r0, r1, r8, sl, sp}^
 3a0:	761e6c4c 	ldrvc	r6, [lr], -ip, asr #24
 3a4:	78741403 	ldmdavc	r4!, {r0, r1, sl, ip}^
 3a8:	761e6c4c 	ldrvc	r6, [lr], -ip, asr #24
 3ac:	78741203 	ldmdavc	r4!, {r0, r1, r9, ip}^
 3b0:	761e6c4c 	ldrvc	r6, [lr], -ip, asr #24
 3b4:	78742d03 	ldmdavc	r4!, {r0, r1, r8, sl, fp, sp}^
 3b8:	761e6c4c 	ldrvc	r6, [lr], -ip, asr #24
 3bc:	78742803 	ldmdavc	r4!, {r0, r1, fp, sp}^
 3c0:	761e6c4c 	ldrvc	r6, [lr], -ip, asr #24
 3c4:	6a740c03 	bvs	1d033d8 <startup-0x1e2fcc28>
 3c8:	681e6c4c 	ldmdavs	lr, {r2, r3, r6, sl, fp, sp, lr}
 3cc:	7402ac03 	strvc	sl, [r2], #-3075	; 0xfffff3fd
 3d0:	1e974d94 	mrcne	13, 4, r4, cr7, cr4, {4}
 3d4:	661703ae 	ldrvs	r0, [r7], -lr, lsr #7
 3d8:	502f2f67 	eorpl	r2, pc, r7, ror #30
 3dc:	3e4c3e59 	mcrcc	14, 2, r3, cr12, cr9, {2}
 3e0:	7659404e 	ldrbvc	r4, [r9], -lr, asr #32
 3e4:	033d4d5c 	teqeq	sp, #92, 26	; 0x1700
 3e8:	7530660a 	ldrvc	r6, [r0, #-1546]!	; 0xfffff9f6
 3ec:	67581103 	ldrbvs	r1, [r8, -r3, lsl #2]
 3f0:	4d5c6850 	ldclmi	8, cr6, [ip, #-320]	; 0xfffffec0
 3f4:	6611033d 			; <UNDEFINED> instruction: 0x6611033d
 3f8:	03044b6c 	movweq	r4, #19308	; 0x4b6c
 3fc:	6667c603 	strbtvs	ip, [r7], -r3, lsl #12
 400:	3d4b4b40 	vstrcc	d20, [fp, #-256]	; 0xffffff00
 404:	4b693d3d 	blmi	1a4f900 <startup-0x1e5b0700>
 408:	673d3d3d 			; <UNDEFINED> instruction: 0x673d3d3d
 40c:	5a592f77 	bpl	164c1f0 <startup-0x1e9b3e10>
 410:	a16d3e40 	cmnge	sp, r0, asr #28
 414:	75302f3d 	ldrvc	r2, [r0, #-3901]!	; 0xfffff0c3
 418:	50087575 	andpl	r7, r8, r5, ror r5
 41c:	00d8ad3e 	sbcseq	sl, r8, lr, lsr sp
 420:	df020402 	svcle	0x00020402
 424:	01040200 	mrseq	r0, R12_usr
 428:	03063c06 	movweq	r3, #27654	; 0x6c06
 42c:	083e3c12 	ldmdaeq	lr!, {r1, r4, sl, fp, ip, sp}
 430:	009fb115 	addseq	fp, pc, r5, lsl r1	; <UNPREDICTABLE>
 434:	03020402 	movweq	r0, #9218	; 0x2402
 438:	00900875 	addseq	r0, r0, r5, ror r8
 43c:	06010402 	streq	r0, [r1], -r2, lsl #8
 440:	6e03063c 	mcrvs	6, 0, r0, cr3, cr12, {1}
 444:	000d023c 	andeq	r0, sp, ip, lsr r2
 448:	03040101 	movweq	r0, #16641	; 0x4101
 44c:	00020500 	andeq	r0, r2, r0, lsl #10
 450:	03200000 	nopeq	{0}	; <UNPREDICTABLE>
 454:	5e13010e 	mufpls	f0, f3, #0.5
 458:	01000302 	tsteq	r0, r2, lsl #6
 45c:	00029401 	andeq	r9, r2, r1, lsl #8
 460:	a8000200 	stmdage	r0, {r9}
 464:	02000001 	andeq	r0, r0, #1
 468:	0d0efb01 	vstreq	d15, [lr, #-4]
 46c:	01010100 	mrseq	r0, (UNDEF: 17)
 470:	00000001 	andeq	r0, r0, r1
 474:	01000001 	tsteq	r0, r1
 478:	672f3a43 	strvs	r3, [pc, -r3, asr #20]!
 47c:	442f7469 	strtmi	r7, [pc], #-1129	; 484 <startup-0x1ffffb7c>
 480:	39325441 	ldmdbcc	r2!, {r0, r6, sl, ip, lr}
 484:	614c2d30 	cmpvs	ip, r0, lsr sp
 488:	79736d72 	ldmdbvc	r3!, {r1, r4, r5, r6, r8, sl, fp, sp, lr}^
 48c:	6d657473 	cfstrdvs	mvd7, [r5, #-460]!	; 0xfffffe34
 490:	646f6b2f 	strbtvs	r6, [pc], #-2863	; 498 <startup-0x1ffffb68>
 494:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
 498:	4d54532f 	ldclmi	3, cr5, [r4, #-188]	; 0xffffff44
 49c:	34463233 	strbcc	r3, [r6], #-563	; 0xfffffdcd
 4a0:	62696c5f 	rsbvs	r6, r9, #24320	; 0x5f00
 4a4:	4d54532f 	ldclmi	3, cr5, [r4, #-188]	; 0xffffff44
 4a8:	34463233 	strbcc	r3, [r6], #-563	; 0xfffffdcd
 4ac:	535f7878 	cmppl	pc, #120, 16	; 0x780000
 4b0:	65506474 	ldrbvs	r6, [r0, #-1140]	; 0xfffffb8c
 4b4:	68706972 	ldmdavs	r0!, {r1, r4, r5, r6, r8, fp, sp, lr}^
 4b8:	6972445f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, sl, lr}^
 4bc:	2f726576 	svccs	0x00726576
 4c0:	00637273 	rsbeq	r7, r3, r3, ror r2
 4c4:	635c3a63 	cmpvs	ip, #405504	; 0x63000
 4c8:	70616573 	rsbvc	r6, r1, r3, ror r5
 4cc:	6f635c70 	svcvs	0x00635c70
 4d0:	696c6564 	stmdbvs	ip!, {r2, r5, r6, r8, sl, sp, lr}^
 4d4:	745c6574 	ldrbvc	r6, [ip], #-1396	; 0xfffffa8c
 4d8:	736c6f6f 	cmnvc	ip, #444	; 0x1bc
 4dc:	6363675c 	cmnvs	r3, #92, 14	; 0x1700000
 4e0:	6d72612d 	ldfvse	f6, [r2, #-180]!	; 0xffffff4c
 4e4:	6d72615c 	ldfvse	f6, [r2, #-368]!	; 0xfffffe90
 4e8:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
 4ec:	61652d65 	cmnvs	r5, r5, ror #26
 4f0:	695c6962 	ldmdbvs	ip, {r1, r5, r6, r8, fp, sp, lr}^
 4f4:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
 4f8:	6d5c6564 	cfldr64vs	mvdx6, [ip, #-400]	; 0xfffffe70
 4fc:	69686361 	stmdbvs	r8!, {r0, r5, r6, r8, r9, sp, lr}^
 500:	6300656e 	movwvs	r6, #1390	; 0x56e
 504:	73635c3a 	cmnvc	r3, #14848	; 0x3a00
 508:	70706165 	rsbsvc	r6, r0, r5, ror #2
 50c:	646f635c 	strbtvs	r6, [pc], #-860	; 514 <startup-0x1ffffaec>
 510:	74696c65 	strbtvc	r6, [r9], #-3173	; 0xfffff39b
 514:	6f745c65 	svcvs	0x00745c65
 518:	5c736c6f 	ldclpl	12, cr6, [r3], #-444	; 0xfffffe44
 51c:	2d636367 	stclcs	3, cr6, [r3, #-412]!	; 0xfffffe64
 520:	5c6d7261 	sfmpl	f7, 2, [sp], #-388	; 0xfffffe7c
 524:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
 528:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
 52c:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
 530:	6e695c69 	cdpvs	12, 6, cr5, cr9, cr9, {3}
 534:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
 538:	79735c65 	ldmdbvc	r3!, {r0, r2, r5, r6, sl, fp, ip, lr}^
 53c:	2e2e0073 	mcrcs	0, 1, r0, cr14, cr3, {3}
 540:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
 544:	4d54532f 	ldclmi	3, cr5, [r4, #-188]	; 0xffffff44
 548:	34463233 	strbcc	r3, [r6], #-563	; 0xfffffdcd
 54c:	62696c5f 	rsbvs	r6, r9, #24320	; 0x5f00
 550:	534d432f 	movtpl	r4, #54063	; 0xd32f
 554:	692f5349 	stmdbvs	pc!, {r0, r3, r6, r8, r9, ip, lr}	; <UNPREDICTABLE>
 558:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
 55c:	2e006564 	cfsh32cs	mvfx6, mvfx0, #52
 560:	696c2f2e 	stmdbvs	ip!, {r1, r2, r3, r5, r8, r9, sl, fp, sp}^
 564:	54532f62 	ldrbpl	r2, [r3], #-3938	; 0xfffff09e
 568:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
 56c:	696c5f34 	stmdbvs	ip!, {r2, r4, r5, r8, r9, sl, fp, ip, lr}^
 570:	54532f62 	ldrbpl	r2, [r3], #-3938	; 0xfffff09e
 574:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
 578:	5f787834 	svcpl	0x00787834
 57c:	50647453 	rsbpl	r7, r4, r3, asr r4
 580:	70697265 	rsbvc	r7, r9, r5, ror #4
 584:	72445f68 	subvc	r5, r4, #104, 30	; 0x1a0
 588:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
 58c:	636e692f 	cmnvs	lr, #770048	; 0xbc000
 590:	74730000 	ldrbtvc	r0, [r3], #-0
 594:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
 598:	5f787834 	svcpl	0x00787834
 59c:	6f697067 	svcvs	0x00697067
 5a0:	0100632e 	tsteq	r0, lr, lsr #6
 5a4:	645f0000 	ldrbvs	r0, [pc], #-0	; 5ac <startup-0x1ffffa54>
 5a8:	75616665 	strbvc	r6, [r1, #-1637]!	; 0xfffff99b
 5ac:	745f746c 	ldrbvc	r7, [pc], #-1132	; 5b4 <startup-0x1ffffa4c>
 5b0:	73657079 	cmnvc	r5, #121	; 0x79
 5b4:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
 5b8:	735f0000 	cmpvc	pc, #0
 5bc:	6e696474 	mcrvs	4, 3, r6, cr9, cr4, {3}
 5c0:	00682e74 	rsbeq	r2, r8, r4, ror lr
 5c4:	63000003 	movwvs	r0, #3
 5c8:	5f65726f 	svcpl	0x0065726f
 5cc:	2e346d63 	cdpcs	13, 3, cr6, cr4, cr3, {3}
 5d0:	00040068 	andeq	r0, r4, r8, rrx
 5d4:	73797300 	cmnvc	r9, #0, 6
 5d8:	5f6d6574 	svcpl	0x006d6574
 5dc:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
 5e0:	78346632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, sp, lr}
 5e4:	00682e78 	rsbeq	r2, r8, r8, ror lr
 5e8:	73000005 	movwvc	r0, #5
 5ec:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
 5f0:	78783466 	ldmdavc	r8!, {r1, r2, r5, r6, sl, ip, sp}^
 5f4:	0500682e 	streq	r6, [r0, #-2094]	; 0xfffff7d2
 5f8:	74730000 	ldrbtvc	r0, [r3], #-0
 5fc:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
 600:	5f787834 	svcpl	0x00787834
 604:	6f697067 	svcvs	0x00697067
 608:	0500682e 	streq	r6, [r0, #-2094]	; 0xfffff7d2
 60c:	00000000 	andeq	r0, r0, r0
 610:	0fc40205 	svceq	0x00c40205
 614:	ff032000 			; <UNDEFINED> instruction: 0xff032000
 618:	4c4e0100 	stfmie	f0, [lr], {-0}
 61c:	4a38034b 	bmi	e01350 <startup-0x1f1fecb0>
 620:	4c204a03 			; <UNDEFINED> instruction: 0x4c204a03
 624:	4a33034b 	bmi	cc1358 <startup-0x1f33eca8>
 628:	4c204f03 	stcmi	15, cr4, [r0], #-12
 62c:	4a2e034b 	bmi	b81360 <startup-0x1f47eca0>
 630:	4c205403 	cfstrsmi	mvf5, [r0], #-12
 634:	4a29034b 	bmi	a41368 <startup-0x1f5bec98>
 638:	4c205903 			; <UNDEFINED> instruction: 0x4c205903
 63c:	4a24034b 	bmi	901370 <startup-0x1f6fec90>
 640:	4c205e03 	stcmi	14, cr5, [r0], #-12
 644:	4a1f034b 	bmi	7c1378 <startup-0x1f83ec88>
 648:	4c206303 	stcmi	3, cr6, [r0], #-12
 64c:	4a1a034b 	bmi	681380 <startup-0x1f97ec80>
 650:	4c206803 	stcmi	8, cr6, [r0], #-12
 654:	4a15034b 	bmi	541388 <startup-0x1fabec78>
 658:	4c206e03 	stcmi	14, cr6, [r0], #-12
 65c:	660f0367 	strvs	r0, [pc], -r7, ror #6
 660:	4c207303 	stcmi	3, cr7, [r0], #-12
 664:	660a0367 	strvs	r0, [sl], -r7, ror #6
 668:	4c207a03 			; <UNDEFINED> instruction: 0x4c207a03
 66c:	0c036967 			; <UNDEFINED> instruction: 0x0c036967
 670:	03599008 	cmpeq	r9, #8
 674:	5a3e660a 	bpl	f99ea4 <startup-0x1f06615c>
 678:	bcad4c5a 	stclt	12, cr4, [sp], #360	; 0x168
 67c:	01040200 	mrseq	r0, R12_usr
 680:	50064a06 	andpl	r4, r6, r6, lsl #20
 684:	ccadc0ad 	stcgt	0, cr12, [sp], #692	; 0x2b4
 688:	040200bb 	streq	r0, [r2], #-187	; 0xffffff45
 68c:	ba620302 	blt	188129c <startup-0x1e77ed64>
 690:	01040200 	mrseq	r0, R12_usr
 694:	03063c06 	movweq	r3, #27654	; 0x6c06
 698:	4c523c21 	mrrcmi	12, 2, r3, r2, cr1
 69c:	3d3d3d3d 	ldccc	13, cr3, [sp, #-244]!	; 0xffffff0c
 6a0:	7410033d 	ldrvc	r0, [r0], #-829	; 0xfffffcc3
 6a4:	3e5a4275 	mrccc	2, 2, r4, cr10, cr5, {3}
 6a8:	3d3e3e4c 	ldccc	14, cr3, [lr, #-304]!	; 0xfffffed0
 6ac:	754a1c03 	strbvc	r1, [sl, #-3075]	; 0xfffff3fd
 6b0:	4c5c6850 	mrrcmi	8, 5, r6, ip, cr0
 6b4:	4a0a033d 	bmi	2813b0 <startup-0x1fd7ec50>
 6b8:	0c033d4e 	stceq	13, cr3, [r3], {78}	; 0x4e
 6bc:	6850754a 	ldmdavs	r0, {r1, r3, r6, r8, sl, ip, sp, lr}^
 6c0:	033d4c5c 	teqeq	sp, #92, 24	; 0x5c00
 6c4:	3d4e4a0a 	vstrcc	s9, [lr, #-40]	; 0xffffffd8
 6c8:	794a0f03 	stmdbvc	sl, {r0, r1, r8, r9, sl, fp}^
 6cc:	4a0f034b 	bmi	3c1400 <startup-0x1fc3ec00>
 6d0:	10034b79 	andne	r4, r3, r9, ror fp
 6d4:	504cc04a 	subpl	ip, ip, sl, asr #32
 6d8:	0b034c1e 	bleq	d3758 <startup-0x1ff2c8a8>
 6dc:	034b784a 	movteq	r7, #47178	; 0xb84a
 6e0:	75784a0b 	ldrbvc	r4, [r8, #-2571]!	; 0xfffff5f5
 6e4:	4a00ce03 	bmi	33ef8 <startup-0x1ffcc108>
 6e8:	9f352fbb 	svcls	0x00352fbb
 6ec:	9fbbc908 	svcls	0x00bbc908
 6f0:	01000402 	tsteq	r0, r2, lsl #8
 6f4:	Address 0x000006f4 is out of bounds.


Disassembly of section .debug_str:

00000000 <.debug_str>:
       0:	706c6c70 	rsbvc	r6, ip, r0, ror ip
       4:	45535200 	ldrbmi	r5, [r3, #-512]	; 0xfffffe00
       8:	44455652 	strbmi	r5, [r5], #-1618	; 0xfffff9ae
       c:	54520031 	ldrbpl	r0, [r2], #-49	; 0xffffffcf
      10:	4b575f43 	blmi	15d7d24 <startup-0x1ea282dc>
      14:	495f5055 	ldmdbmi	pc, {r0, r2, r4, r6, ip, lr}^	; <UNPREDICTABLE>
      18:	006e5152 	rsbeq	r5, lr, r2, asr r1
      1c:	49545845 	ldmdbmi	r4, {r0, r2, r6, fp, ip, lr}^
      20:	52495f32 	subpl	r5, r9, #50, 30	; 0xc8
      24:	44006e51 	strmi	r6, [r0], #-3665	; 0xfffff1af
      28:	5f31414d 	svcpl	0x0031414d
      2c:	65727453 	ldrbvs	r7, [r2, #-1107]!	; 0xfffffbad
      30:	5f366d61 	svcpl	0x00366d61
      34:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
      38:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
      3c:	50555f38 	subspl	r5, r5, r8, lsr pc
      40:	4d49545f 	cfstrdmi	mvd5, [r9, #-380]	; 0xfffffe84
      44:	495f3331 	ldmdbmi	pc, {r0, r4, r5, r8, r9, ip, sp}^	; <UNPREDICTABLE>
      48:	006e5152 	rsbeq	r5, lr, r2, asr r1
      4c:	494c4c50 	stmdbmi	ip, {r4, r6, sl, fp, lr}^
      50:	46435332 			; <UNDEFINED> instruction: 0x46435332
      54:	52005247 	andpl	r5, r0, #1879048196	; 0x70000004
      58:	495f4343 	ldmdbmi	pc, {r0, r1, r6, r8, r9, lr}^	; <UNPREDICTABLE>
      5c:	4c435332 	mcrrmi	3, 3, r5, r3, cr2
      60:	6e6f434b 	cdpvs	3, 6, cr4, cr15, cr11, {2}
      64:	00676966 	rsbeq	r6, r7, r6, ror #18
      68:	5f434352 	svcpl	0x00434352
      6c:	43746547 	cmnmi	r4, #297795584	; 0x11c00000
      70:	6b636f6c 	blvs	18dbe28 <startup-0x1e7241d8>
      74:	65724673 	ldrbvs	r4, [r2, #-1651]!	; 0xfffff98d
      78:	4d440071 	stclmi	0, cr0, [r4, #-452]	; 0xfffffe3c
      7c:	535f3241 	cmppl	pc, #268435460	; 0x10000004
      80:	61657274 	smcvs	22308	; 0x5724
      84:	495f316d 	ldmdbmi	pc, {r0, r2, r3, r5, r6, r8, ip, sp}^	; <UNPREDICTABLE>
      88:	006e5152 	rsbeq	r5, lr, r2, asr r1
      8c:	4b4c4348 	blmi	1310db4 <startup-0x1ecef24c>
      90:	6572465f 	ldrbvs	r4, [r2, #-1631]!	; 0xfffff9a1
      94:	6e657571 	mcrvs	5, 3, r7, cr5, cr1, {3}
      98:	47007963 	strmi	r7, [r0, -r3, ror #18]
      9c:	5f4f4950 	svcpl	0x004f4950
      a0:	64507550 	ldrbvs	r7, [r0], #-1360	; 0xfffffab0
      a4:	504f4e5f 	subpl	r4, pc, pc, asr lr	; <UNPREDICTABLE>
      a8:	004c4c55 	subeq	r4, ip, r5, asr ip
      ac:	524f5456 	subpl	r5, pc, #1442840576	; 0x56000000
      b0:	49505300 	ldmdbmi	r0, {r8, r9, ip, lr}^
      b4:	52495f33 	subpl	r5, r9, #51, 30	; 0xcc
      b8:	46006e51 			; <UNDEFINED> instruction: 0x46006e51
      bc:	4853414c 	ldmdami	r3, {r2, r3, r6, r8, lr}^
      c0:	5152495f 	cmppl	r2, pc, asr r9
      c4:	4344006e 	movtmi	r0, #16494	; 0x406e
      c8:	495f494d 	ldmdbmi	pc, {r0, r2, r3, r6, r8, fp, lr}^	; <UNPREDICTABLE>
      cc:	006e5152 	rsbeq	r5, lr, r2, asr r1
      d0:	5f434352 	svcpl	0x00434352
      d4:	32425041 	subcc	r5, r2, #65	; 0x41
      d8:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
      dc:	6c436870 	mcrrvs	8, 7, r6, r3, cr0
      e0:	4c6b636f 	stclmi	3, cr6, [fp], #-444	; 0xfffffe44
      e4:	646f4d50 	strbtvs	r4, [pc], #-3408	; ec <startup-0x1fffff14>
      e8:	646d4365 	strbtvs	r4, [sp], #-869	; 0xfffffc9b
      ec:	43435200 	movtmi	r5, #12800	; 0x3200
      f0:	4248415f 	submi	r4, r8, #-1073741801	; 0xc0000017
      f4:	72655032 	rsbvc	r5, r5, #50	; 0x32
      f8:	43687069 	cmnmi	r8, #105	; 0x69
      fc:	6b636f6c 	blvs	18dbeb4 <startup-0x1e72414c>
     100:	6f4d504c 	svcvs	0x004d504c
     104:	6d436564 	cfstr64vs	mvdx6, [r3, #-400]	; 0xfffffe70
     108:	50470064 	subpl	r0, r7, r4, rrx
     10c:	544f4f49 	strbpl	r4, [pc], #-3913	; 114 <startup-0x1ffffeec>
     110:	5f657079 	svcpl	0x00657079
     114:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0xfffff6ac
     118:	00666544 	rsbeq	r6, r6, r4, asr #10
     11c:	5f434352 	svcpl	0x00434352
     120:	31425041 	cmpcc	r2, r1, asr #32
     124:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
     128:	65526870 	ldrbvs	r6, [r2, #-2160]	; 0xfffff790
     12c:	43746573 	cmnmi	r4, #482344960	; 0x1cc00000
     130:	5200646d 	andpl	r6, r0, #1828716544	; 0x6d000000
     134:	4d5f4343 	ldclmi	3, cr4, [pc, #-268]	; 30 <startup-0x1fffffd0>
     138:	0065646f 	rsbeq	r6, r5, pc, ror #8
     13c:	324d4954 	subcc	r4, sp, #84, 18	; 0x150000
     140:	5152495f 	cmppl	r2, pc, asr r9
     144:	4352006e 	cmpmi	r2, #110	; 0x6e
     148:	54525f43 	ldrbpl	r5, [r2], #-3907	; 0xfffff0bd
     14c:	4b4c4343 	blmi	1310e60 <startup-0x1ecef1a0>
     150:	72756f53 	rsbsvc	r6, r5, #332	; 0x14c
     154:	52006563 	andpl	r6, r0, #415236096	; 0x18c00000
     158:	415f4343 	cmpmi	pc, r3, asr #6
     15c:	50324248 	eorspl	r4, r2, r8, asr #4
     160:	70697265 	rsbvc	r7, r9, r5, ror #4
     164:	6f6c4368 	svcvs	0x006c4368
     168:	6d436b63 	vstrvs	d22, [r3, #-396]	; 0xfffffe74
     16c:	43490064 	movtmi	r0, #36964	; 0x9064
     170:	52005250 	andpl	r5, r0, #80, 4
     174:	545f4343 	ldrbpl	r4, [pc], #-835	; 17c <startup-0x1ffffe84>
     178:	4c434d49 	mcrrmi	13, 4, r4, r3, cr9
     17c:	6572504b 	ldrbvs	r5, [r2, #-75]!	; 0xffffffb5
     180:	6e6f4373 	mcrvs	3, 3, r4, cr15, cr3, {3}
     184:	00676966 	rsbeq	r6, r7, r6, ror #18
     188:	5f434352 	svcpl	0x00434352
     18c:	494c4c50 	stmdbmi	ip, {r4, r6, sl, fp, lr}^
     190:	6d435332 	stclvs	3, cr5, [r3, #-200]	; 0xffffff38
     194:	43520064 	cmpmi	r2, #100	; 0x64
     198:	43485f43 	movtmi	r5, #36675	; 0x8f43
     19c:	43004b4c 	movwmi	r4, #2892	; 0xb4c
     1a0:	5f324e41 	svcpl	0x00324e41
     1a4:	5f305852 	svcpl	0x00305852
     1a8:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     1ac:	41535500 	cmpmi	r3, r0, lsl #10
     1b0:	5f365452 	svcpl	0x00365452
     1b4:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     1b8:	6d697400 	cfstrdvs	mvd7, [r9, #-0]
     1bc:	616c5f65 	cmnvs	ip, r5, ror #30
     1c0:	5f006d72 	svcpl	0x00006d72
     1c4:	6e69755f 	mcrvs	5, 3, r7, cr9, cr15, {2}
     1c8:	745f3874 	ldrbvc	r3, [pc], #-2164	; 1d0 <startup-0x1ffffe30>
     1cc:	49505300 	ldmdbmi	r0, {r8, r9, ip, lr}^
     1d0:	52495f32 	subpl	r5, r9, #50, 30	; 0xc8
     1d4:	54006e51 	strpl	r6, [r0], #-3665	; 0xfffff1af
     1d8:	5f384d49 	svcpl	0x00384d49
     1dc:	5f4b5242 	svcpl	0x004b5242
     1e0:	314d4954 	cmpcc	sp, r4, asr r9
     1e4:	52495f32 	subpl	r5, r9, #50, 30	; 0xc8
     1e8:	41006e51 	tstmi	r0, r1, asr lr
     1ec:	4c324248 	lfmmi	f4, 4, [r2], #-288	; 0xfffffee0
     1f0:	524e4550 	subpl	r4, lr, #80, 10	; 0x14000000
     1f4:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
     1f8:	75505f4f 	ldrbvc	r5, [r0, #-3919]	; 0xfffff0b1
     1fc:	445f6450 	ldrbmi	r6, [pc], #-1104	; 204 <startup-0x1ffffdfc>
     200:	004e574f 	subeq	r5, lr, pc, asr #14
     204:	43524941 	cmpmi	r2, #1064960	; 0x104000
     208:	43520052 	cmpmi	r2, #82	; 0x52
     20c:	41535f43 	cmpmi	r3, r3, asr #30
     210:	4c4c5049 	mcrrmi	0, 4, r5, ip, cr9
     214:	43494153 	movtmi	r4, #37203	; 0x9153
     218:	69446b6c 	stmdbvs	r4, {r2, r3, r5, r6, r8, r9, fp, sp, lr}^
     21c:	6e6f4376 	mcrvs	3, 3, r4, cr15, cr6, {3}
     220:	00676966 	rsbeq	r6, r7, r6, ror #18
     224:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xfffff197
     228:	4950475f 	ldmdbmi	r0, {r0, r1, r2, r3, r4, r6, r8, r9, sl, lr}^
     22c:	6f505f4f 	svcvs	0x00505f4f
     230:	00737472 	rsbseq	r7, r3, r2, ror r4
     234:	49555043 	ldmdbmi	r5, {r0, r1, r6, ip, lr}^
     238:	79530044 	ldmdbvc	r3, {r2, r6}^
     23c:	63695473 	cmnvs	r9, #1929379840	; 0x73000000
     240:	61485f6b 	cmpvs	r8, fp, ror #30
     244:	656c646e 	strbvs	r6, [ip, #-1134]!	; 0xfffffb92
     248:	43520072 	cmpmi	r2, #114	; 0x72
     24c:	544c5f43 	strbpl	r5, [ip], #-3907	; 0xfffff0bd
     250:	4c434344 	mcrrmi	3, 4, r4, r3, cr4
     254:	7669444b 	strbtvc	r4, [r9], -fp, asr #8
     258:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
     25c:	44006769 	strmi	r6, [r0], #-1897	; 0xfffff897
     260:	5f32414d 	svcpl	0x0032414d
     264:	65727453 	ldrbvs	r7, [r2, #-1107]!	; 0xfffffbad
     268:	5f356d61 	svcpl	0x00356d61
     26c:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     270:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
     274:	6f4d5f4f 	svcvs	0x004d5f4f
     278:	415f6564 	cmpmi	pc, r4, ror #10
     27c:	43520046 	cmpmi	r2, #70	; 0x46
     280:	48415f43 	stmdami	r1, {r0, r1, r6, r8, r9, sl, fp, ip, lr}^
     284:	65503342 	ldrbvs	r3, [r0, #-834]	; 0xfffffcbe
     288:	68706972 	ldmdavs	r0!, {r1, r4, r5, r6, r8, fp, sp, lr}^
     28c:	65736552 	ldrbvs	r6, [r3, #-1362]!	; 0xfffffaae
     290:	646d4374 	strbtvs	r4, [sp], #-884	; 0xfffffc8c
     294:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
     298:	52545f31 	subspl	r5, r4, #49, 30	; 0xc4
     29c:	4f435f47 	svcmi	0x00435f47
     2a0:	49545f4d 	ldmdbmi	r4, {r0, r2, r3, r6, r8, r9, sl, fp, ip, lr}^
     2a4:	5f31314d 	svcpl	0x0031314d
     2a8:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     2ac:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
     2b0:	6f4d5f4f 	svcvs	0x004d5f4f
     2b4:	415f6564 	cmpmi	pc, r4, ror #10
     2b8:	4352004e 	cmpmi	r2, #78	; 0x4e
     2bc:	43505f43 	cmpmi	r0, #268	; 0x10c
     2c0:	43324b4c 	teqmi	r2, #76, 22	; 0x13000
     2c4:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
     2c8:	6f630067 	svcvs	0x00630067
     2cc:	6f72746e 	svcvs	0x0072746e
     2d0:	7469626c 	strbtvc	r6, [r9], #-620	; 0xfffffd94
     2d4:	43520073 	cmpmi	r2, #115	; 0x73
     2d8:	65445f43 	strbvs	r5, [r4, #-3907]	; 0xfffff0bd
     2dc:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xfffff1b7
     2e0:	43435200 	movtmi	r5, #12800	; 0x3200
     2e4:	4941535f 	stmdbmi	r1, {r0, r1, r2, r3, r4, r6, r8, r9, ip, lr}^
     2e8:	636f6c42 	cmnvs	pc, #16896	; 0x4200
     2ec:	4c43426b 	sfmmi	f4, 2, [r3], {107}	; 0x6b
     2f0:	6e6f434b 	cdpvs	3, 6, cr4, cr15, cr11, {2}
     2f4:	00676966 	rsbeq	r6, r7, r6, ror #18
     2f8:	32425041 	subcc	r5, r2, #65	; 0x41
     2fc:	00524e45 	subseq	r4, r2, r5, asr #28
     300:	5f434352 	svcpl	0x00434352
     304:	53746547 	cmnpl	r4, #297795584	; 0x11c00000
     308:	4c435359 	mcrrmi	3, 5, r5, r3, cr9
     30c:	756f534b 	strbvc	r5, [pc, #-843]!	; ffffffc9 <APBAHBPrescTable+0xdfffe9d9>
     310:	00656372 	rsbeq	r6, r5, r2, ror r3
     314:	31424841 	cmpcc	r2, r1, asr #16
     318:	4e45504c 	cdpmi	0, 4, cr5, cr5, cr12, {2}
     31c:	43520052 	cmpmi	r2, #82	; 0x52
     320:	4c505f43 	mrrcmi	15, 4, r5, r0, cr3
     324:	5332494c 	teqpl	r2, #76, 18	; 0x130000
     328:	51766944 	cmnpl	r6, r4, asr #18
     32c:	73795300 	cmnvc	r9, #0, 6
     330:	6b636954 	blvs	18da888 <startup-0x1e725778>
     334:	5152495f 	cmppl	r2, pc, asr r9
     338:	4352006e 	cmpmi	r2, #110	; 0x6e
     33c:	48415f43 	stmdami	r1, {r0, r1, r6, r8, r9, sl, fp, ip, lr}^
     340:	65503342 	ldrbvs	r3, [r0, #-834]	; 0xfffffcbe
     344:	68706972 	ldmdavs	r0!, {r1, r4, r5, r6, r8, fp, sp, lr}^
     348:	41535500 	cmpmi	r3, r0, lsl #10
     34c:	5f335452 	svcpl	0x00335452
     350:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     354:	4b434400 	blmi	10d135c <startup-0x1ef2eca4>
     358:	52474643 	subpl	r4, r7, #70254592	; 0x4300000
     35c:	53434900 	movtpl	r4, #14592	; 0x3900
     360:	43520052 	cmpmi	r2, #82	; 0x52
     364:	434d5f43 	movtmi	r5, #57155	; 0xdf43
     368:	6944324f 	stmdbvs	r4, {r0, r1, r2, r3, r6, r9, ip, sp}^
     36c:	50470076 	subpl	r0, r7, r6, ror r0
     370:	4f5f4f49 	svcmi	0x005f4f49
     374:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0xfffff6ac
     378:	00444f5f 	subeq	r4, r4, pc, asr pc
     37c:	4f495047 	svcmi	0x00495047
     380:	696e495f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, lr}^
     384:	70795474 	rsbsvc	r5, r9, r4, ror r4
     388:	66654465 	strbtvs	r4, [r5], -r5, ror #8
     38c:	43435200 	movtmi	r5, #12800	; 0x3200
     390:	5359535f 	cmppl	r9, #2080374785	; 0x7c000001
     394:	534b4c43 	movtpl	r4, #48195	; 0xbc43
     398:	6372756f 	cmnvs	r2, #465567744	; 0x1bc00000
     39c:	4d440065 	stclmi	0, cr0, [r4, #-404]	; 0xfffffe6c
     3a0:	535f3141 	cmppl	pc, #1073741840	; 0x40000010
     3a4:	61657274 	smcvs	22308	; 0x5724
     3a8:	495f326d 	ldmdbmi	pc, {r0, r2, r3, r5, r6, r9, ip, sp}^	; <UNPREDICTABLE>
     3ac:	006e5152 	rsbeq	r5, lr, r2, asr r1
     3b0:	5f434352 	svcpl	0x00434352
     3b4:	534c4c50 	movtpl	r4, #52304	; 0xcc50
     3b8:	6372756f 	cmnvs	r2, #465567744	; 0x1bc00000
     3bc:	43520065 	cmpmi	r2, #101	; 0x65
     3c0:	50415f43 	subpl	r5, r1, r3, asr #30
     3c4:	65503142 	ldrbvs	r3, [r0, #-322]	; 0xfffffebe
     3c8:	68706972 	ldmdavs	r0!, {r1, r4, r5, r6, r8, fp, sp, lr}^
     3cc:	636f6c43 	cmnvs	pc, #17152	; 0x4300
     3d0:	646d436b 	strbtvs	r4, [sp], #-875	; 0xfffffc95
     3d4:	53455200 	movtpl	r5, #20992	; 0x5200
     3d8:	45565245 	ldrbmi	r5, [r6, #-581]	; 0xfffffdbb
     3dc:	52003044 	andpl	r3, r0, #68	; 0x44
     3e0:	52455345 	subpl	r5, r5, #335544321	; 0x14000001
     3e4:	31444556 	cmpcc	r4, r6, asr r5
     3e8:	736e7500 	cmnvc	lr, #0, 10
     3ec:	656e6769 	strbvs	r6, [lr, #-1897]!	; 0xfffff897
     3f0:	68632064 	stmdavs	r3!, {r2, r5, r6, sp}^
     3f4:	44007261 	strmi	r7, [r0], #-609	; 0xfffffd9f
     3f8:	5f32414d 	svcpl	0x0032414d
     3fc:	65727453 	ldrbvs	r7, [r2, #-1107]!	; 0xfffffbad
     400:	5f346d61 	svcpl	0x00346d61
     404:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     408:	53455200 	movtpl	r5, #20992	; 0x5200
     40c:	45565245 	ldrbmi	r5, [r6, #-581]	; 0xfffffdbb
     410:	52003444 	andpl	r3, r0, #68, 8	; 0x44000000
     414:	52455345 	subpl	r5, r5, #335544321	; 0x14000001
     418:	35444556 	strbcc	r4, [r4, #-1366]	; 0xfffffaaa
     41c:	53455200 	movtpl	r5, #20992	; 0x5200
     420:	45565245 	ldrbmi	r5, [r6, #-581]	; 0xfffffdbb
     424:	49003644 	stmdbmi	r0, {r2, r6, r9, sl, ip, sp}
     428:	00524241 	subseq	r4, r2, r1, asr #4
     42c:	4f495047 	svcmi	0x00495047
     430:	79544f5f 	ldmdbvc	r4, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, lr}^
     434:	505f6570 	subspl	r6, pc, r0, ror r5	; <UNPREDICTABLE>
     438:	32490050 	subcc	r0, r9, #80	; 0x50
     43c:	455f3143 	ldrbmi	r3, [pc, #-323]	; 301 <startup-0x1ffffcff>
     440:	52495f52 	subpl	r5, r9, #328	; 0x148
     444:	43006e51 	movwmi	r6, #3665	; 0xe51
     448:	5f324e41 	svcpl	0x00324e41
     44c:	5f454353 	svcpl	0x00454353
     450:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     454:	43435200 	movtmi	r5, #12800	; 0x3200
     458:	45534c5f 	ldrbmi	r4, [r3, #-3167]	; 0xfffff3a1
     45c:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
     460:	52006769 	andpl	r6, r0, #27525120	; 0x1a40000
     464:	52455345 	subpl	r5, r5, #335544321	; 0x14000001
     468:	32444556 	subcc	r4, r4, #360710144	; 0x15800000
     46c:	53455200 	movtpl	r5, #20992	; 0x5200
     470:	45565245 	ldrbmi	r5, [r6, #-581]	; 0xfffffdbb
     474:	54003344 	strpl	r3, [r0], #-836	; 0xfffffcbc
     478:	5f354d49 	svcpl	0x00354d49
     47c:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     480:	61735500 	cmnvs	r3, r0, lsl #10
     484:	61466567 	cmpvs	r6, r7, ror #10
     488:	5f746c75 	svcpl	0x00746c75
     48c:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     490:	42435300 	submi	r5, r3, #0, 6
     494:	7079545f 	rsbsvc	r5, r9, pc, asr r4
     498:	50470065 	subpl	r0, r7, r5, rrx
     49c:	75504f49 	ldrbvc	r4, [r0, #-3913]	; 0xfffff0b7
     4a0:	545f6450 	ldrbpl	r6, [pc], #-1104	; 4a8 <startup-0x1ffffb58>
     4a4:	44657079 	strbtmi	r7, [r5], #-121	; 0xffffff87
     4a8:	44006665 	strmi	r6, [r0], #-1637	; 0xfffff99b
     4ac:	00525346 	subseq	r5, r2, r6, asr #6
     4b0:	31424841 	cmpcc	r2, r1, asr #16
     4b4:	52545352 	subspl	r5, r4, #1207959553	; 0x48000001
     4b8:	43435200 	movtmi	r5, #12800	; 0x3200
     4bc:	4250415f 	subsmi	r4, r0, #-1073741801	; 0xc0000017
     4c0:	72655032 	rsbvc	r5, r5, #50	; 0x32
     4c4:	52687069 	rsbpl	r7, r8, #105	; 0x69
     4c8:	74657365 	strbtvc	r7, [r5], #-869	; 0xfffffc9b
     4cc:	00646d43 	rsbeq	r6, r4, r3, asr #26
     4d0:	75746572 	ldrbvc	r6, [r4, #-1394]!	; 0xfffffa8e
     4d4:	6f436e72 	svcvs	0x00436e72
     4d8:	52006564 	andpl	r6, r0, #100, 10	; 0x19000000
     4dc:	415f4343 	cmpmi	pc, r3, asr #6
     4e0:	50334248 	eorspl	r4, r3, r8, asr #4
     4e4:	70697265 	rsbvc	r7, r9, r5, ror #4
     4e8:	6f6c4368 	svcvs	0x006c4368
     4ec:	504c6b63 	subpl	r6, ip, r3, ror #22
     4f0:	65646f4d 	strbvs	r6, [r4, #-3917]!	; 0xfffff0b3
     4f4:	00646d43 	rsbeq	r6, r4, r3, asr #26
     4f8:	69755f5f 	ldmdbvs	r5!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, ip, lr}^
     4fc:	3631746e 	ldrtcc	r7, [r1], -lr, ror #8
     500:	4100745f 	tstmi	r0, pc, asr r4
     504:	45324248 	ldrmi	r4, [r2, #-584]!	; 0xfffffdb8
     508:	5000524e 	andpl	r5, r0, lr, asr #4
     50c:	324b4c43 	subcc	r4, fp, #17152	; 0x4300
     510:	6572465f 	ldrbvs	r4, [r2, #-1631]!	; 0xfffff9a1
     514:	6e657571 	mcrvs	5, 3, r7, cr5, cr1, {3}
     518:	47007963 	strmi	r7, [r0, -r3, ror #18]
     51c:	5f4f4950 	svcpl	0x004f4950
     520:	5f776f4c 	svcpl	0x00776f4c
     524:	65657053 	strbvs	r7, [r5, #-83]!	; 0xffffffad
     528:	41430064 	cmpmi	r3, r4, rrx
     52c:	525f314e 	subspl	r3, pc, #-2147483629	; 0x80000013
     530:	495f3058 	ldmdbmi	pc, {r3, r4, r6, ip, sp}^	; <UNPREDICTABLE>
     534:	006e5152 	rsbeq	r5, lr, r2, asr r1
     538:	555c3a43 	ldrbpl	r3, [ip, #-2627]	; 0xfffff5bd
     53c:	73726573 	cmnvc	r2, #482344960	; 0x1cc00000
     540:	6164415c 	cmnvs	r4, ip, asr r1
     544:	4f5c746d 	svcmi	0x005c746d
     548:	7244656e 	subvc	r6, r4, #461373440	; 0x1b800000
     54c:	5c657669 	stclpl	6, cr7, [r5], #-420	; 0xfffffe5c
     550:	756b6f44 	strbvc	r6, [fp, #-3908]!	; 0xfffff0bc
     554:	746e656d 	strbtvc	r6, [lr], #-1389	; 0xfffffa93
     558:	7469475c 	strbtvc	r4, [r9], #-1884	; 0xfffff8a4
     55c:	5c627548 	cfstr64pl	mvdx7, [r2], #-288	; 0xfffffee0
     560:	32544144 	subscc	r4, r4, #68, 2
     564:	4c2d3039 	stcmi	0, cr3, [sp], #-228	; 0xffffff1c
     568:	736d7261 	cmnvc	sp, #268435462	; 0x10000006
     56c:	65747379 	ldrbvs	r7, [r4, #-889]!	; 0xfffffc87
     570:	6f6b5c6d 	svcvs	0x006b5c6d
     574:	6f445c64 	svcvs	0x00445c64
     578:	4800726f 	stmdami	r0, {r0, r1, r2, r3, r5, r6, r9, ip, sp, lr}
     57c:	00525346 	subseq	r5, r2, r6, asr #6
     580:	4f495047 	svcmi	0x00495047
     584:	6165725f 	cmnvs	r5, pc, asr r2
     588:	43520064 	cmpmi	r2, #100	; 0x64
     58c:	59535f43 	ldmdbpl	r3, {r0, r1, r6, r8, r9, sl, fp, ip, lr}^
     590:	4b4c4353 	blmi	13112e4 <startup-0x1eceed1c>
     594:	4c435000 	marmi	acc0, r5, r3
     598:	465f314b 	ldrbmi	r3, [pc], -fp, asr #2
     59c:	75716572 	ldrbvc	r6, [r1, #-1394]!	; 0xfffffa8e
     5a0:	79636e65 	stmdbvc	r3!, {r0, r2, r5, r6, r9, sl, fp, sp, lr}^
     5a4:	4c4c5000 	marmi	acc0, r5, ip
     5a8:	4c50004d 	mrrcmi	0, 4, r0, r0, cr13	; <UNPREDICTABLE>
     5ac:	50004e4c 	andpl	r4, r0, ip, asr #28
     5b0:	00504c4c 	subseq	r4, r0, ip, asr #24
     5b4:	514c4c50 	cmppl	ip, r0, asr ip
     5b8:	43435200 	movtmi	r5, #12800	; 0x3200
     5bc:	49534c5f 	ldmdbmi	r3, {r0, r1, r2, r3, r4, r6, sl, fp, lr}^
     5c0:	00646d43 	rsbeq	r6, r4, r3, asr #26
     5c4:	736c6c70 	cmnvc	ip, #112, 24	; 0x7000
     5c8:	6372756f 	cmnvs	r2, #465567744	; 0x1bc00000
     5cc:	49540065 	ldmdbmi	r4, {r0, r2, r5, r6}^
     5d0:	495f344d 	ldmdbmi	pc, {r0, r2, r3, r6, sl, ip, sp}^	; <UNPREDICTABLE>
     5d4:	006e5152 	rsbeq	r5, lr, r2, asr r1
     5d8:	20554e47 	subscs	r4, r5, r7, asr #28
     5dc:	20393943 	eorscs	r3, r9, r3, asr #18
     5e0:	2e322e37 	mrccs	14, 1, r2, cr2, cr7, {1}
     5e4:	30322031 	eorscc	r2, r2, r1, lsr r0
     5e8:	39303731 	ldmdbcc	r0!, {r0, r4, r5, r8, r9, sl, ip, sp}
     5ec:	28203430 	stmdacs	r0!, {r4, r5, sl, ip, sp}
     5f0:	656c6572 	strbvs	r6, [ip, #-1394]!	; 0xfffffa8e
     5f4:	29657361 	stmdbcs	r5!, {r0, r5, r6, r8, r9, ip, sp, lr}^
     5f8:	52415b20 	subpl	r5, r1, #32, 22	; 0x8000
     5fc:	6d652f4d 	stclvs	15, cr2, [r5, #-308]!	; 0xfffffecc
     600:	64646562 	strbtvs	r6, [r4], #-1378	; 0xfffffa9e
     604:	372d6465 	strcc	r6, [sp, -r5, ror #8]!
     608:	6172622d 	cmnvs	r2, sp, lsr #4
     60c:	2068636e 	rsbcs	r6, r8, lr, ror #6
     610:	69766572 	ldmdbvs	r6!, {r1, r4, r5, r6, r8, sl, sp, lr}^
     614:	6e6f6973 			; <UNDEFINED> instruction: 0x6e6f6973
     618:	35353220 	ldrcc	r3, [r5, #-544]!	; 0xfffffde0
     61c:	5d343032 	ldcpl	0, cr3, [r4, #-200]!	; 0xffffff38
     620:	746d2d20 	strbtvc	r2, [sp], #-3360	; 0xfffff2e0
     624:	626d7568 	rsbvs	r7, sp, #104, 10	; 0x1a000000
     628:	616d2d20 	cmnvs	sp, r0, lsr #26
     62c:	3d686372 	stclcc	3, cr6, [r8, #-456]!	; 0xfffffe38
     630:	766d7261 	strbtvc	r7, [sp], -r1, ror #4
     634:	206d2d36 	rsbcs	r2, sp, r6, lsr sp
     638:	6c666d2d 	stclvs	13, cr6, [r6], #-180	; 0xffffff4c
     63c:	2d74616f 	ldfcse	f6, [r4, #-444]!	; 0xfffffe44
     640:	3d696261 	sfmcc	f6, 2, [r9, #-388]!	; 0xfffffe7c
     644:	74666f73 	strbtvc	r6, [r6], #-3955	; 0xfffff08d
     648:	746d2d20 	strbtvc	r2, [sp], #-3360	; 0xfffff2e0
     64c:	626d7568 	rsbvs	r7, sp, #104, 10	; 0x1a000000
     650:	616d2d20 	cmnvs	sp, r0, lsr #26
     654:	3d686372 	stclcc	3, cr6, [r8, #-456]!	; 0xfffffe38
     658:	766d7261 	strbtvc	r7, [sp], -r1, ror #4
     65c:	206d2d36 	rsbcs	r2, sp, r6, lsr sp
     660:	2d20672d 	stccs	7, cr6, [r0, #-180]!	; 0xffffff4c
     664:	2d20304f 	stccs	0, cr3, [r0, #-316]!	; 0xfffffec4
     668:	3d647473 	cfstrdcc	mvd7, [r4, #-460]!	; 0xfffffe34
     66c:	00393963 	eorseq	r3, r9, r3, ror #18
     670:	5f434352 	svcpl	0x00434352
     674:	4b4c4348 	blmi	131139c <startup-0x1eceec64>
     678:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
     67c:	52006769 	andpl	r6, r0, #27525120	; 0x1a40000
     680:	435f4343 	cmpmi	pc, #201326593	; 0xc000001
     684:	7261656c 	rsbvc	r6, r1, #108, 10	; 0x1b000000
     688:	67616c46 	strbvs	r6, [r1, -r6, asr #24]!
     68c:	43435200 	movtmi	r5, #12800	; 0x3200
     690:	4553485f 	ldrbmi	r4, [r3, #-2143]	; 0xfffff7a1
     694:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
     698:	42006769 	andmi	r6, r0, #27525120	; 0x1a40000
     69c:	00524344 	subseq	r4, r2, r4, asr #6
     6a0:	53434853 	movtpl	r4, #14419	; 0x3853
     6a4:	56500052 			; <UNDEFINED> instruction: 0x56500052
     6a8:	52495f44 	subpl	r5, r9, #68, 30	; 0x110
     6ac:	52006e51 	andpl	r6, r0, #1296	; 0x510
     6b0:	4c5f4343 	mrrcmi	3, 4, r4, pc, cr3	; <UNPREDICTABLE>
     6b4:	53004553 	movwpl	r4, #1363	; 0x553
     6b8:	00524954 	subseq	r4, r2, r4, asr r9
     6bc:	31433249 	cmpcc	r3, r9, asr #4
     6c0:	5f56455f 	svcpl	0x0056455f
     6c4:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     6c8:	43435200 	movtmi	r5, #12800	; 0x3200
     6cc:	4941535f 	stmdbmi	r1, {r0, r1, r2, r3, r4, r6, r8, r9, ip, lr}^
     6d0:	636f6c42 	cmnvs	pc, #16896	; 0x4200
     6d4:	4c43416b 	stfmie	f4, [r3], {107}	; 0x6b
     6d8:	6e6f434b 	cdpvs	3, 6, cr4, cr15, cr11, {2}
     6dc:	00676966 	rsbeq	r6, r7, r6, ror #18
     6e0:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
     6e4:	63707574 	cmnvs	r0, #116, 10	; 0x1d000000
     6e8:	746e756f 	strbtvc	r7, [lr], #-1391	; 0xfffffa91
     6ec:	52007265 	andpl	r7, r0, #1342177286	; 0x50000006
     6f0:	505f4343 	subspl	r4, pc, r3, asr #6
     6f4:	41534c4c 	cmpmi	r3, ip, asr #24
     6f8:	6e6f4349 	cdpvs	3, 6, cr4, cr15, cr9, {2}
     6fc:	00676966 	rsbeq	r6, r7, r6, ror #18
     700:	4f495047 	svcmi	0x00495047
     704:	646f4d5f 	strbtvs	r4, [pc], #-3423	; 70c <startup-0x1ffff8f4>
     708:	554f5f65 	strbpl	r5, [pc, #-3941]	; fffff7ab <APBAHBPrescTable+0xdfffe1bb>
     70c:	49540054 	ldmdbmi	r4, {r2, r4, r6}^
     710:	435f314d 	cmpmi	pc, #1073741843	; 0x40000013
     714:	52495f43 	subpl	r5, r9, #268	; 0x10c
     718:	48006e51 	stmdami	r0, {r0, r4, r6, r9, sl, fp, sp, lr}
     71c:	5f485341 	svcpl	0x00485341
     720:	5f474e52 	svcpl	0x00474e52
     724:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     728:	54584500 	ldrbpl	r4, [r8], #-1280	; 0xfffffb00
     72c:	495f3149 	ldmdbmi	pc, {r0, r3, r6, r8, ip, sp}^	; <UNPREDICTABLE>
     730:	006e5152 	rsbeq	r5, lr, r2, asr r1
     734:	314e4143 	cmpcc	lr, r3, asr #2
     738:	5f58545f 	svcpl	0x0058545f
     73c:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     740:	414d4400 	cmpmi	sp, r0, lsl #8
     744:	74535f31 	ldrbvc	r5, [r3], #-3889	; 0xfffff0cf
     748:	6d616572 	cfstr64vs	mvdx6, [r1, #-456]!	; 0xfffffe38
     74c:	52495f35 	subpl	r5, r9, #53, 30	; 0xd4
     750:	52006e51 	andpl	r6, r0, #1296	; 0x510
     754:	485f4343 	ldmdami	pc, {r0, r1, r6, r8, r9, lr}^	; <UNPREDICTABLE>
     758:	52004553 	andpl	r4, r0, #348127232	; 0x14c00000
     75c:	4d5f4343 	ldclmi	3, cr4, [pc, #-268]	; 658 <startup-0x1ffff9a8>
     760:	43314f43 	teqmi	r1, #268	; 0x10c
     764:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
     768:	49540067 	ldmdbmi	r4, {r0, r1, r2, r5, r6}^
     76c:	545f384d 	ldrbpl	r3, [pc], #-2125	; 774 <startup-0x1ffff88c>
     770:	435f4752 	cmpmi	pc, #21495808	; 0x1480000
     774:	545f4d4f 	ldrbpl	r4, [pc], #-3407	; 77c <startup-0x1ffff884>
     778:	34314d49 	ldrtcc	r4, [r1], #-3401	; 0xfffff2b7
     77c:	5152495f 	cmppl	r2, pc, asr r9
     780:	4d44006e 	stclmi	0, cr0, [r4, #-440]	; 0xfffffe48
     784:	535f3241 	cmppl	pc, #268435460	; 0x10000004
     788:	61657274 	smcvs	22308	; 0x5724
     78c:	495f376d 	ldmdbmi	pc, {r0, r2, r3, r5, r6, r8, r9, sl, ip, sp}^	; <UNPREDICTABLE>
     790:	006e5152 	rsbeq	r5, lr, r2, asr r1
     794:	5f47544f 	svcpl	0x0047544f
     798:	495f5346 	ldmdbmi	pc, {r1, r2, r6, r8, r9, ip, lr}^	; <UNPREDICTABLE>
     79c:	006e5152 	rsbeq	r5, lr, r2, asr r1
     7a0:	4d6e6f4e 	stclmi	15, cr6, [lr, #-312]!	; 0xfffffec8
     7a4:	616b7361 	cmnvs	fp, r1, ror #6
     7a8:	49656c62 	stmdbmi	r5!, {r1, r5, r6, sl, fp, sp, lr}^
     7ac:	495f746e 	ldmdbmi	pc, {r1, r2, r3, r5, r6, sl, ip, sp, lr}^	; <UNPREDICTABLE>
     7b0:	006e5152 	rsbeq	r5, lr, r2, asr r1
     7b4:	47445757 	smlsldmi	r5, r4, r7, r7
     7b8:	5152495f 	cmppl	r2, pc, asr r9
     7bc:	544f006e 	strbpl	r0, [pc], #-110	; 7c4 <startup-0x1ffff83c>
     7c0:	53485f47 	movtpl	r5, #36679	; 0x8f47
     7c4:	554b575f 	strbpl	r5, [fp, #-1887]	; 0xfffff8a1
     7c8:	52495f50 	subpl	r5, r9, #80, 30	; 0x140
     7cc:	52006e51 	andpl	r6, r0, #1296	; 0x510
     7d0:	415f4343 	cmpmi	pc, r3, asr #6
     7d4:	50324250 	eorspl	r4, r2, r0, asr r2
     7d8:	70697265 	rsbvc	r7, r9, r5, ror #4
     7dc:	6f6c4368 	svcvs	0x006c4368
     7e0:	6d436b63 	vstrvs	d22, [r3, #-396]	; 0xfffffe74
     7e4:	43520064 	cmpmi	r2, #100	; 0x64
     7e8:	4c505f43 	mrrcmi	15, 4, r5, r0, cr3
     7ec:	4941534c 	stmdbmi	r1, {r2, r3, r6, r8, r9, ip, lr}^
     7f0:	51766944 	cmnpl	r6, r4, asr #18
     7f4:	43435200 	movtmi	r5, #12800	; 0x3200
     7f8:	4c4c505f 	mcrrmi	0, 5, r5, ip, cr15
     7fc:	44494153 	strbmi	r4, [r9], #-339	; 0xfffffead
     800:	00527669 	subseq	r7, r2, r9, ror #12
     804:	5f434352 	svcpl	0x00434352
     808:	42494153 	submi	r4, r9, #-1073741804	; 0xc0000014
     80c:	6b636f6c 	blvs	18dc5c4 <startup-0x1e723a3c>
     810:	4b4c4342 	blmi	1311520 <startup-0x1eceeae0>
     814:	72756f53 	rsbsvc	r6, r5, #332	; 0x14c
     818:	4d006563 	cfstr32mi	mvfx6, [r0, #-396]	; 0xfffffe74
     81c:	726f6d65 	rsbvc	r6, pc, #6464	; 0x1940
     820:	6e614d79 	mcrvs	13, 3, r4, cr1, cr9, {3}
     824:	6d656761 	stclvs	7, cr6, [r5, #-388]!	; 0xfffffe7c
     828:	5f746e65 	svcpl	0x00746e65
     82c:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     830:	73795300 	cmnvc	r9, #0, 6
     834:	436d6574 	cmnmi	sp, #116, 10	; 0x1d000000
     838:	4365726f 	cmnmi	r5, #-268435450	; 0xf0000006
     83c:	6b636f6c 	blvs	18dc5f4 <startup-0x1e723a0c>
     840:	4d415400 	cfstrdmi	mvd5, [r1, #-0]
     844:	54535f50 	ldrbpl	r5, [r3], #-3920	; 0xfffff0b0
     848:	5f504d41 	svcpl	0x00504d41
     84c:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     850:	4e414300 	cdpmi	3, 4, cr4, cr1, cr0, {0}
     854:	43535f31 	cmpmi	r3, #49, 30	; 0xc4
     858:	52495f45 	subpl	r5, r9, #276	; 0x114
     85c:	49006e51 	stmdbmi	r0, {r0, r4, r6, r9, sl, fp, sp, lr}
     860:	5f6e5152 	svcpl	0x006e5152
     864:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0xfffff6ac
     868:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
     86c:	6f4d5f4f 	svcvs	0x004d5f4f
     870:	495f6564 	ldmdbmi	pc, {r2, r5, r6, r8, sl, sp, lr}^	; <UNPREDICTABLE>
     874:	4d44004e 	stclmi	0, cr0, [r4, #-312]	; 0xfffffec8
     878:	535f3241 	cmppl	pc, #268435460	; 0x10000004
     87c:	61657274 	smcvs	22308	; 0x5724
     880:	495f306d 	ldmdbmi	pc, {r0, r2, r3, r5, r6, ip, sp}^	; <UNPREDICTABLE>
     884:	006e5152 	rsbeq	r5, lr, r2, asr r1
     888:	5f434352 	svcpl	0x00434352
     88c:	324f434d 	subcc	r4, pc, #872415233	; 0x34000001
     890:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
     894:	4c006769 	stcmi	7, cr6, [r0], {105}	; 0x69
     898:	00524b43 	subseq	r4, r2, r3, asr #22
     89c:	5f434352 	svcpl	0x00434352
     8a0:	43533249 	cmpmi	r3, #-1879048188	; 0x90000004
     8a4:	6f534b4c 	svcvs	0x00534b4c
     8a8:	65637275 	strbvs	r7, [r3, #-629]!	; 0xfffffd8b
     8ac:	52524500 	subspl	r4, r2, #0, 10
     8b0:	4900524f 	stmdbmi	r0, {r0, r1, r2, r3, r6, r9, ip, lr}
     8b4:	5f324332 	svcpl	0x00324332
     8b8:	495f5245 	ldmdbmi	pc, {r0, r2, r6, r9, ip, lr}^	; <UNPREDICTABLE>
     8bc:	006e5152 	rsbeq	r5, lr, r2, asr r1
     8c0:	6954736d 	ldmdbvs	r4, {r0, r2, r3, r5, r6, r8, r9, ip, sp, lr}^
     8c4:	00736b63 	rsbseq	r6, r3, r3, ror #22
     8c8:	5f434352 	svcpl	0x00434352
     8cc:	4b4c4350 	blmi	1311614 <startup-0x1ecee9ec>
     8d0:	6e6f4331 	mcrvs	3, 3, r4, cr15, cr1, {1}
     8d4:	00676966 	rsbeq	r6, r7, r6, ror #18
     8d8:	4550534f 	ldrbmi	r5, [r0, #-847]	; 0xfffffcb1
     8dc:	00524445 	subseq	r4, r2, r5, asr #8
     8e0:	46737542 	ldrbtmi	r7, [r3], -r2, asr #10
     8e4:	746c7561 	strbtvc	r7, [ip], #-1377	; 0xfffffa9f
     8e8:	5152495f 	cmppl	r2, pc, asr r9
     8ec:	6974006e 	ldmdbvs	r4!, {r1, r2, r3, r5, r6}^
     8f0:	00736b63 	rsbseq	r6, r3, r3, ror #22
     8f4:	434c4c50 	movtmi	r4, #52304	; 0xcc50
     8f8:	00524746 	subseq	r4, r2, r6, asr #14
     8fc:	54524155 	ldrbpl	r4, [r2], #-341	; 0xfffffeab
     900:	52495f35 	subpl	r5, r9, #53, 30	; 0xd4
     904:	54006e51 	strpl	r6, [r0], #-3665	; 0xfffff1af
     908:	5f314d49 	svcpl	0x00314d49
     90c:	5f4b5242 	svcpl	0x004b5242
     910:	394d4954 	stmdbcc	sp, {r2, r4, r6, r8, fp, lr}^
     914:	5152495f 	cmppl	r2, pc, asr r9
     918:	5047006e 	subpl	r0, r7, lr, rrx
     91c:	4f5f4f49 	svcmi	0x005f4f49
     920:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0xfffff6ac
     924:	755f5f00 	ldrbvc	r5, [pc, #-3840]	; fffffa2c <APBAHBPrescTable+0xdfffe43c>
     928:	33746e69 	cmncc	r4, #1680	; 0x690
     92c:	00745f32 	rsbseq	r5, r4, r2, lsr pc
     930:	41425041 	cmpmi	r2, r1, asr #32
     934:	72504248 	subsvc	r4, r0, #72, 4	; 0x80000004
     938:	54637365 	strbtpl	r7, [r3], #-869	; 0xfffffc9b
     93c:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
     940:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
     944:	654d5f4f 	strbvs	r5, [sp, #-3919]	; 0xfffff0b1
     948:	6d756964 			; <UNDEFINED> instruction: 0x6d756964
     94c:	6570535f 	ldrbvs	r5, [r0, #-863]!	; 0xfffffca1
     950:	52006465 	andpl	r6, r0, #1694498816	; 0x65000000
     954:	535f4343 	cmppl	pc, #201326593	; 0xc000001
     958:	4c504941 	mrrcmi	9, 4, r4, r0, cr1	; <UNPREDICTABLE>
     95c:	5332494c 	teqpl	r2, #76, 18	; 0x130000
     960:	446b6c43 	strbtmi	r6, [fp], #-3139	; 0xfffff3bd
     964:	6f437669 	svcvs	0x00437669
     968:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
     96c:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
     970:	52495f37 	subpl	r5, r9, #55, 30	; 0xdc
     974:	6c006e51 	stcvs	14, cr6, [r0], {81}	; 0x51
     978:	20676e6f 	rsbcs	r6, r7, pc, ror #28
     97c:	676e6f6c 	strbvs	r6, [lr, -ip, ror #30]!
     980:	746e6920 	strbtvc	r6, [lr], #-2336	; 0xfffff6e0
     984:	48544500 	ldmdami	r4, {r8, sl, lr}^
     988:	554b575f 	strbpl	r5, [fp, #-1887]	; 0xfffff8a1
     98c:	52495f50 	subpl	r5, r9, #80, 30	; 0x140
     990:	4f006e51 	svcmi	0x00006e51
     994:	485f4754 	ldmdami	pc, {r2, r4, r6, r8, r9, sl, lr}^	; <UNPREDICTABLE>
     998:	52495f53 	subpl	r5, r9, #332	; 0x14c
     99c:	50006e51 	andpl	r6, r0, r1, asr lr
     9a0:	52445055 	subpl	r5, r4, #85	; 0x55
     9a4:	43535300 	cmpmi	r3, #0, 6
     9a8:	53005247 	movwpl	r5, #583	; 0x247
     9ac:	5f314950 	svcpl	0x00314950
     9b0:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     9b4:	53494400 	movtpl	r4, #37888	; 0x9400
     9b8:	454c4241 	strbmi	r4, [ip, #-577]	; 0xfffffdbf
     9bc:	43565300 	cmpmi	r6, #0, 6
     9c0:	5f6c6c61 	svcpl	0x006c6c61
     9c4:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     9c8:	42504100 	subsmi	r4, r0, #0, 2
     9cc:	54535232 	ldrbpl	r5, [r3], #-562	; 0xfffffdce
     9d0:	53420052 	movtpl	r0, #8274	; 0x2052
     9d4:	00485252 	subeq	r5, r8, r2, asr r2
     9d8:	5f434352 	svcpl	0x00434352
     9dc:	46746547 	ldrbtmi	r6, [r4], -r7, asr #10
     9e0:	5367616c 	cmnpl	r7, #108, 2
     9e4:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0xfffffe8c
     9e8:	43520073 	cmpmi	r2, #115	; 0x73
     9ec:	6c435f43 	mcrrvs	15, 4, r5, r3, cr3
     9f0:	736b636f 	cmnvc	fp, #-1140850687	; 0xbc000001
     9f4:	52534200 	subspl	r4, r3, #0, 4
     9f8:	47004c52 	smlsdmi	r0, r2, ip, r4
     9fc:	5f4f4950 	svcpl	0x004f4950
     a00:	68676948 	stmdavs	r7!, {r3, r6, r8, fp, sp, lr}^
     a04:	6570535f 	ldrbvs	r5, [r0, #-863]!	; 0xfffffca1
     a08:	52006465 	andpl	r6, r0, #1694498816	; 0x65000000
     a0c:	495f4343 	ldmdbmi	pc, {r0, r1, r6, r8, r9, lr}^	; <UNPREDICTABLE>
     a10:	6e6f4354 	mcrvs	3, 3, r4, cr15, cr4, {2}
     a14:	00676966 	rsbeq	r6, r7, r6, ror #18
     a18:	5f434352 	svcpl	0x00434352
     a1c:	43495348 	movtmi	r5, #37704	; 0x9348
     a20:	4600646d 	strmi	r6, [r0], -sp, ror #8
     a24:	495f5550 	ldmdbmi	pc, {r4, r6, r8, sl, ip, lr}^	; <UNPREDICTABLE>
     a28:	006e5152 	rsbeq	r5, lr, r2, asr r1
     a2c:	5f434352 	svcpl	0x00434352
     a30:	756a6441 	strbvc	r6, [sl, #-1089]!	; 0xfffffbbf
     a34:	53487473 	movtpl	r7, #33907	; 0x8473
     a38:	6c614349 	stclvs	3, cr4, [r1], #-292	; 0xfffffedc
     a3c:	61726269 	cmnvs	r2, r9, ror #4
     a40:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
     a44:	756c6156 	strbvc	r6, [ip, #-342]!	; 0xfffffeaa
     a48:	41550065 	cmpmi	r5, r5, rrx
     a4c:	5f345452 	svcpl	0x00345452
     a50:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     a54:	42504100 	subsmi	r4, r0, #0, 2
     a58:	45504c32 	ldrbmi	r4, [r0, #-3122]	; 0xfffff3ce
     a5c:	5200524e 	andpl	r5, r0, #-536870908	; 0xe0000004
     a60:	415f4343 	cmpmi	pc, r3, asr #6
     a64:	50314250 	eorspl	r4, r1, r0, asr r2
     a68:	70697265 	rsbvc	r7, r9, r5, ror #4
     a6c:	43520068 	cmpmi	r2, #104	; 0x68
     a70:	54525f43 	ldrbpl	r5, [r2], #-3907	; 0xfffff0bd
     a74:	4b4c4343 	blmi	1311788 <startup-0x1ecee878>
     a78:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
     a7c:	4f006769 	svcmi	0x00006769
     a80:	465f4754 			; <UNDEFINED> instruction: 0x465f4754
     a84:	4b575f53 	blmi	15d87d8 <startup-0x1ea27828>
     a88:	495f5055 	ldmdbmi	pc, {r0, r2, r4, r6, ip, lr}^	; <UNPREDICTABLE>
     a8c:	006e5152 	rsbeq	r5, lr, r2, asr r1
     a90:	5f434352 	svcpl	0x00434352
     a94:	47414c46 	strbmi	r4, [r1, -r6, asr #24]
     a98:	43435200 	movtmi	r5, #12800	; 0x3200
     a9c:	7465475f 	strbtvc	r4, [r5], #-1887	; 0xfffff8a1
     aa0:	74535449 	ldrbvc	r5, [r3], #-1097	; 0xfffffbb7
     aa4:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
     aa8:	54584500 	ldrbpl	r4, [r8], #-1280	; 0xfffffb00
     aac:	495f3449 	ldmdbmi	pc, {r0, r3, r6, sl, ip, sp}^	; <UNPREDICTABLE>
     ab0:	006e5152 	rsbeq	r5, lr, r2, asr r1
     ab4:	4c525443 	cfldrdmi	mvd5, [r2], {67}	; 0x43
     ab8:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
     abc:	41445f36 	cmpmi	r4, r6, lsr pc
     ac0:	52495f43 	subpl	r5, r9, #268	; 0x10c
     ac4:	4e006e51 	mcrmi	14, 0, r6, cr0, cr1, {2}
     ac8:	74537765 	ldrbvc	r7, [r3], #-1893	; 0xfffff89b
     acc:	00657461 	rsbeq	r7, r5, r1, ror #8
     ad0:	4f495047 	svcmi	0x00495047
     ad4:	6570535f 	ldrbvs	r5, [r0, #-863]!	; 0xfffffca1
     ad8:	49006465 	stmdbmi	r0, {r0, r2, r5, r6, sl, sp, lr}
     adc:	5f324332 	svcpl	0x00324332
     ae0:	495f5645 	ldmdbmi	pc, {r0, r2, r6, r9, sl, ip, lr}^	; <UNPREDICTABLE>
     ae4:	006e5152 	rsbeq	r5, lr, r2, asr r1
     ae8:	5f434352 	svcpl	0x00434352
     aec:	61656c43 	cmnvs	r5, r3, asr #24
     af0:	50544972 	subspl	r4, r4, r2, ror r9
     af4:	69646e65 	stmdbvs	r4!, {r0, r2, r5, r6, r9, sl, fp, sp, lr}^
     af8:	6942676e 	stmdbvs	r2, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}^
     afc:	43520074 	cmpmi	r2, #116	; 0x74
     b00:	6c435f43 	mcrrvs	15, 4, r5, r3, cr3
     b04:	536b636f 	cmnpl	fp, #-1140850687	; 0xbc000001
     b08:	72756365 	rsbsvc	r6, r5, #-1811939327	; 0x94000001
     b0c:	53797469 	cmnpl	r9, #1761607680	; 0x69000000
     b10:	65747379 	ldrbvs	r7, [r4, #-889]!	; 0xfffffc87
     b14:	646d436d 	strbtvs	r4, [sp], #-877	; 0xfffffc93
     b18:	43435200 	movtmi	r5, #12800	; 0x3200
     b1c:	4941535f 	stmdbmi	r1, {r0, r1, r2, r3, r4, r6, r8, r9, ip, lr}^
     b20:	636f6c42 	cmnvs	pc, #16896	; 0x4200
     b24:	4c43416b 	stfmie	f4, [r3], {107}	; 0x6b
     b28:	756f534b 	strbvc	r5, [pc, #-843]!	; 7e5 <startup-0x1ffff81b>
     b2c:	00656372 	rsbeq	r6, r5, r2, ror r3
     b30:	74617473 	strbtvc	r7, [r1], #-1139	; 0xfffffb8d
     b34:	65727375 	ldrbvs	r7, [r2, #-885]!	; 0xfffffc8b
     b38:	43520067 	cmpmi	r2, #103	; 0x67
     b3c:	50415f43 	subpl	r5, r1, r3, asr #30
     b40:	65503242 	ldrbvs	r3, [r0, #-578]	; 0xfffffdbe
     b44:	68706972 	ldmdavs	r0!, {r1, r4, r5, r6, r8, fp, sp, lr}^
     b48:	41464200 	mrsmi	r4, (UNDEF: 102)
     b4c:	50410052 	subpl	r0, r1, r2, asr r0
     b50:	504c3142 	subpl	r3, ip, r2, asr #2
     b54:	00524e45 	subseq	r4, r2, r5, asr #28
     b58:	31414d44 	cmpcc	r1, r4, asr #26
     b5c:	7274535f 	rsbsvc	r5, r4, #2080374785	; 0x7c000001
     b60:	316d6165 	cmncc	sp, r5, ror #2
     b64:	5152495f 	cmppl	r2, pc, asr r9
     b68:	6361006e 	cmnvs	r1, #110	; 0x6e
     b6c:	65766974 	ldrbvs	r6, [r6, #-2420]!	; 0xfffff68c
     b70:	6f6f645f 	svcvs	0x006f645f
     b74:	44007372 	strmi	r7, [r0], #-882	; 0xfffffc8e
     b78:	5f32414d 	svcpl	0x0032414d
     b7c:	65727453 	ldrbvs	r7, [r2, #-1107]!	; 0xfffffbad
     b80:	5f336d61 	svcpl	0x00336d61
     b84:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     b88:	474b4300 	strbmi	r4, [fp, -r0, lsl #6]
     b8c:	4e455441 	cdpmi	4, 4, cr5, cr5, cr1, {2}
     b90:	41430052 	qdaddmi	r0, r2, r3
     b94:	545f324e 	ldrbpl	r3, [pc], #-590	; b9c <startup-0x1ffff464>
     b98:	52495f58 	subpl	r5, r9, #88, 30	; 0x160
     b9c:	50006e51 	andpl	r6, r0, r1, asr lr
     ba0:	41534c4c 	cmpmi	r3, ip, asr #24
     ba4:	50004e49 	andpl	r4, r0, r9, asr #28
     ba8:	41534c4c 	cmpmi	r3, ip, asr #24
     bac:	50005149 	andpl	r5, r0, r9, asr #2
     bb0:	41534c4c 	cmpmi	r3, ip, asr #24
     bb4:	52005249 	andpl	r5, r0, #-1879048188	; 0x90000004
     bb8:	4d5f4343 	ldclmi	3, cr4, [pc, #-268]	; ab4 <startup-0x1ffff54c>
     bbc:	53314f43 	teqpl	r1, #268	; 0x10c
     bc0:	6372756f 	cmnvs	r2, #465567744	; 0x1bc00000
     bc4:	43520065 	cmpmi	r2, #101	; 0x65
     bc8:	48415f43 	stmdami	r1, {r0, r1, r6, r8, r9, sl, fp, ip, lr}^
     bcc:	65503342 	ldrbvs	r3, [r0, #-834]	; 0xfffffcbe
     bd0:	68706972 	ldmdavs	r0!, {r1, r4, r5, r6, r8, fp, sp, lr}^
     bd4:	636f6c43 	cmnvs	pc, #17152	; 0x4300
     bd8:	646d436b 	strbtvs	r4, [sp], #-875	; 0xfffffc95
     bdc:	73795300 	cmnvc	r9, #0, 6
     be0:	6b636954 	blvs	18db138 <startup-0x1e724ec8>
     be4:	7079545f 	rsbsvc	r5, r9, pc, asr r4
     be8:	69740065 	ldmdbvs	r4!, {r0, r2, r5, r6}^
     bec:	635f656d 	cmpvs	pc, #457179136	; 0x1b400000
     bf0:	72746e65 	rsbsvc	r6, r4, #1616	; 0x650
     bf4:	6c5f6c61 	mrrcvs	12, 6, r6, pc, cr1	; <UNPREDICTABLE>
     bf8:	006d7261 	rsbeq	r7, sp, r1, ror #4
     bfc:	5f434352 	svcpl	0x00434352
     c00:	434c4c50 	movtmi	r4, #52304	; 0xcc50
     c04:	5200646d 	andpl	r6, r0, #1828716544	; 0x6d000000
     c08:	425f4343 	subsmi	r4, pc, #201326593	; 0xc000001
     c0c:	756b6361 	strbvc	r6, [fp, #-865]!	; 0xfffffc9f
     c10:	73655270 	cmnvc	r5, #112, 4
     c14:	6d437465 	cfstrdvs	mvd7, [r3, #-404]	; 0xfffffe6c
     c18:	48410064 	stmdami	r1, {r2, r5, r6}^
     c1c:	53523342 	cmppl	r2, #134217729	; 0x8000001
     c20:	64005254 	strvs	r5, [r0], #-596	; 0xfffffdac
     c24:	00726f6f 	rsbseq	r6, r2, pc, ror #30
     c28:	6f727245 	svcvs	0x00727245
     c2c:	61745372 	cmnvs	r4, r2, ror r3
     c30:	00737574 	rsbseq	r7, r3, r4, ror r5
     c34:	31414d44 	cmpcc	r1, r4, asr #26
     c38:	7274535f 	rsbsvc	r5, r4, #2080374785	; 0x7c000001
     c3c:	306d6165 	rsbcc	r6, sp, r5, ror #2
     c40:	5152495f 	cmppl	r2, pc, asr r9
     c44:	7473006e 	ldrbtvc	r0, [r3], #-110	; 0xffffff92
     c48:	75747261 	ldrbvc	r7, [r4, #-609]!	; 0xfffffd9f
     c4c:	43520070 	cmpmi	r2, #112	; 0x70
     c50:	434d5f43 	movtmi	r5, #57155	; 0xdf43
     c54:	6f53324f 	svcvs	0x0053324f
     c58:	65637275 	strbvs	r7, [r3, #-629]!	; 0xfffffd8b
     c5c:	42504100 	subsmi	r4, r0, #0, 2
     c60:	54535231 	ldrbpl	r5, [r3], #-561	; 0xfffffdcf
     c64:	54520052 	ldrbpl	r0, [r2], #-82	; 0xffffffae
     c68:	6c415f43 	mcrrvs	15, 4, r5, r1, cr3
     c6c:	5f6d7261 	svcpl	0x006d7261
     c70:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     c74:	42504100 	subsmi	r4, r0, #0, 2
     c78:	524e4531 	subpl	r4, lr, #205520896	; 0xc400000
     c7c:	49564e00 	ldmdbmi	r6, {r9, sl, fp, lr}^
     c80:	79545f43 	ldmdbvc	r4, {r0, r1, r6, r8, r9, sl, fp, ip, lr}^
     c84:	46006570 			; <UNDEFINED> instruction: 0x46006570
     c88:	74636e75 	strbtvc	r6, [r3], #-3701	; 0xfffff18b
     c8c:	616e6f69 	cmnvs	lr, r9, ror #30
     c90:	6174536c 	cmnvs	r4, ip, ror #6
     c94:	49006574 	stmdbmi	r0, {r2, r4, r5, r6, r8, sl, sp, lr}
     c98:	5f334332 	svcpl	0x00334332
     c9c:	495f5245 	ldmdbmi	pc, {r0, r2, r6, r9, ip, lr}^	; <UNPREDICTABLE>
     ca0:	006e5152 	rsbeq	r5, lr, r2, asr r1
     ca4:	50595243 	subspl	r5, r9, r3, asr #4
     ca8:	5152495f 	cmppl	r2, pc, asr r9
     cac:	5845006e 	stmdapl	r5, {r1, r2, r3, r5, r6}^
     cb0:	35314954 	ldrcc	r4, [r1, #-2388]!	; 0xfffff6ac
     cb4:	5f30315f 	svcpl	0x0030315f
     cb8:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     cbc:	6e6f6c00 	cdpvs	12, 6, cr6, cr15, cr0, {0}
     cc0:	6f6c2067 	svcvs	0x006c2067
     cc4:	7520676e 	strvc	r6, [r0, #-1902]!	; 0xfffff892
     cc8:	6769736e 	strbvs	r7, [r9, -lr, ror #6]!
     ccc:	2064656e 	rsbcs	r6, r4, lr, ror #10
     cd0:	00746e69 	rsbseq	r6, r4, r9, ror #28
     cd4:	5f434352 	svcpl	0x00434352
     cd8:	314f434d 	cmpcc	pc, sp, asr #6
     cdc:	00766944 	rsbseq	r6, r6, r4, asr #18
     ce0:	334d4954 	movtcc	r4, #55636	; 0xd954
     ce4:	5152495f 	cmppl	r2, pc, asr r9
     ce8:	5355006e 	cmppl	r5, #110	; 0x6e
     cec:	31545241 	cmpcc	r4, r1, asr #4
     cf0:	5152495f 	cmppl	r2, pc, asr r9
     cf4:	4352006e 	cmpmi	r2, #110	; 0x6e
     cf8:	61575f43 	cmpvs	r7, r3, asr #30
     cfc:	6f467469 	svcvs	0x00467469
     d00:	45534872 	ldrbmi	r4, [r3, #-2162]	; 0xfffff78e
     d04:	72617453 	rsbvc	r7, r1, #1392508928	; 0x53000000
     d08:	00705574 	rsbseq	r5, r0, r4, ror r5
     d0c:	43435553 	movtmi	r5, #13651	; 0x3553
     d10:	00535345 	subseq	r5, r3, r5, asr #6
     d14:	4f495047 	svcmi	0x00495047
     d18:	646f4d5f 	strbtvs	r4, [pc], #-3423	; d20 <startup-0x1ffff2e0>
     d1c:	41430065 	cmpmi	r3, r5, rrx
     d20:	525f324e 	subspl	r3, pc, #-536870908	; 0xe0000004
     d24:	495f3158 	ldmdbmi	pc, {r3, r4, r6, r8, ip, sp}^	; <UNPREDICTABLE>
     d28:	006e5152 	rsbeq	r5, lr, r2, asr r1
     d2c:	5f434441 	svcpl	0x00434441
     d30:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     d34:	43435200 	movtmi	r5, #12800	; 0x3200
     d38:	45534c5f 	ldrbmi	r4, [r3, #-3167]	; 0xfffff3a1
     d3c:	65646f4d 	strbvs	r6, [r4, #-3917]!	; 0xfffff0b3
     d40:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
     d44:	49006769 	stmdbmi	r0, {r0, r3, r5, r6, r8, r9, sl, sp, lr}
     d48:	00524543 	subseq	r4, r2, r3, asr #10
     d4c:	33424841 	movtcc	r4, #10305	; 0x2841
     d50:	4e45504c 	cdpmi	0, 4, cr5, cr5, cr12, {2}
     d54:	50470052 	subpl	r0, r7, r2, asr r0
     d58:	6f4d4f49 	svcvs	0x004d4f49
     d5c:	545f6564 	ldrbpl	r6, [pc], #-1380	; d64 <startup-0x1ffff29c>
     d60:	44657079 	strbtmi	r7, [r5], #-121	; 0xffffff87
     d64:	53006665 	movwpl	r6, #1637	; 0x665
     d68:	69547379 	ldmdbvs	r4, {r0, r3, r4, r5, r6, r8, r9, ip, sp, lr}^
     d6c:	435f6b63 	cmpmi	pc, #101376	; 0x18c00
     d70:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
     d74:	3a430067 	bcc	10c0f18 <startup-0x1ef3f0e8>
     d78:	6573552f 	ldrbvs	r5, [r3, #-1327]!	; 0xfffffad1
     d7c:	412f7372 			; <UNDEFINED> instruction: 0x412f7372
     d80:	746d6164 	strbtvc	r6, [sp], #-356	; 0xfffffe9c
     d84:	656e4f2f 	strbvs	r4, [lr, #-3887]!	; 0xfffff0d1
     d88:	76697244 	strbtvc	r7, [r9], -r4, asr #4
     d8c:	6f442f65 	svcvs	0x00442f65
     d90:	656d756b 	strbvs	r7, [sp, #-1387]!	; 0xfffffa95
     d94:	472f746e 	strmi	r7, [pc, -lr, ror #8]!
     d98:	75487469 	strbvc	r7, [r8, #-1129]	; 0xfffffb97
     d9c:	41442f62 	cmpmi	r4, r2, ror #30
     da0:	30393254 	eorscc	r3, r9, r4, asr r2
     da4:	72614c2d 	rsbvc	r4, r1, #11520	; 0x2d00
     da8:	7379736d 	cmnvc	r9, #-1275068415	; 0xb4000001
     dac:	2f6d6574 	svccs	0x006d6574
     db0:	2f646f6b 	svccs	0x00646f6b
     db4:	726f6f44 	rsbvc	r6, pc, #68, 30	; 0x110
     db8:	6174732f 	cmnvs	r4, pc, lsr #6
     dbc:	70757472 	rsbsvc	r7, r5, r2, ror r4
     dc0:	4100632e 	tstmi	r0, lr, lsr #6
     dc4:	00525346 	subseq	r5, r2, r6, asr #6
     dc8:	5059544f 	subspl	r5, r9, pc, asr #8
     dcc:	43005245 	movwmi	r5, #581	; 0x245
     dd0:	42494c41 	submi	r4, r9, #16640	; 0x4100
     dd4:	706d7400 	rsbvc	r7, sp, r0, lsl #8
     dd8:	00676572 	rsbeq	r6, r7, r2, ror r5
     ddc:	434d5346 	movtmi	r5, #54086	; 0xd346
     de0:	5152495f 	cmppl	r2, pc, asr r9
     de4:	6e69006e 	cdpvs	0, 6, cr0, cr9, cr14, {3}
     de8:	45007469 	strmi	r7, [r0, #-1129]	; 0xfffffb97
     dec:	30495458 	subcc	r5, r9, r8, asr r4
     df0:	5152495f 	cmppl	r2, pc, asr r9
     df4:	4344006e 	movtmi	r0, #16494	; 0x406e
     df8:	4746434b 	strbmi	r4, [r6, -fp, asr #6]
     dfc:	43003252 	movwmi	r3, #594	; 0x252
     e00:	00525346 	subseq	r5, r2, r6, asr #6
     e04:	5f434352 	svcpl	0x00434352
     e08:	31424841 	cmpcc	r2, r1, asr #16
     e0c:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
     e10:	68006870 	stmdavs	r0, {r4, r5, r6, fp, sp, lr}
     e14:	74736573 	ldrbtvc	r6, [r3], #-1395	; 0xfffffa8d
     e18:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
     e1c:	414d4400 	cmpmi	sp, r0, lsl #8
     e20:	74535f31 	ldrbvc	r5, [r3], #-3889	; 0xfffff0cf
     e24:	6d616572 	cfstr64vs	mvdx6, [r1, #-456]!	; 0xfffffe38
     e28:	52495f34 	subpl	r5, r9, #52, 30	; 0xd0
     e2c:	47006e51 	smlsdmi	r0, r1, lr, r6
     e30:	5f4f4950 	svcpl	0x004f4950
     e34:	706d616c 	rsbvc	r6, sp, ip, ror #2
     e38:	414d4400 	cmpmi	sp, r0, lsl #8
     e3c:	74535f32 	ldrbvc	r5, [r3], #-3890	; 0xfffff0ce
     e40:	6d616572 	cfstr64vs	mvdx6, [r1, #-456]!	; 0xfffffe38
     e44:	52495f36 	subpl	r5, r9, #54, 30	; 0xd8
     e48:	41006e51 	tstmi	r0, r1, asr lr
     e4c:	45314248 	ldrmi	r4, [r1, #-584]!	; 0xfffffdb8
     e50:	4c00524e 	sfmmi	f5, 4, [r0], {78}	; 0x4e
     e54:	0044414f 	subeq	r4, r4, pc, asr #2
     e58:	4f495047 	svcmi	0x00495047
     e5c:	65657053 	strbvs	r7, [r5, #-83]!	; 0xffffffad
     e60:	79545f64 	ldmdbvc	r4, {r2, r5, r6, r8, r9, sl, fp, ip, lr}^
     e64:	65446570 	strbvs	r6, [r4, #-1392]	; 0xfffffa90
     e68:	65440066 	strbvs	r0, [r4, #-102]	; 0xffffff9a
     e6c:	4d677562 	cfstr64mi	mvdx7, [r7, #-392]!	; 0xfffffe78
     e70:	74696e6f 	strbtvc	r6, [r9], #-3695	; 0xfffff191
     e74:	495f726f 	ldmdbmi	pc, {r0, r1, r2, r3, r5, r6, r9, ip, sp, lr}^	; <UNPREDICTABLE>
     e78:	006e5152 	rsbeq	r5, lr, r2, asr r1
     e7c:	4f495047 	svcmi	0x00495047
     e80:	6e69505f 	mcrvs	0, 3, r5, cr9, cr15, {2}
     e84:	43435200 	movtmi	r5, #12800	; 0x3200
     e88:	4248415f 	submi	r4, r8, #-1073741801	; 0xc0000017
     e8c:	72655031 	rsbvc	r5, r5, #49	; 0x31
     e90:	52687069 	rsbpl	r7, r8, #105	; 0x69
     e94:	74657365 	strbtvc	r7, [r5], #-869	; 0xfffffc9b
     e98:	00646d43 	rsbeq	r6, r4, r3, asr #26
     e9c:	33433249 	movtcc	r3, #12873	; 0x3249
     ea0:	5f56455f 	svcpl	0x0056455f
     ea4:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     ea8:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
     eac:	75505f4f 	ldrbvc	r5, [r0, #-3919]	; 0xfffff0b1
     eb0:	41006450 	tstmi	r0, r0, asr r4
     eb4:	52324248 	eorspl	r4, r2, #72, 4	; 0x80000004
     eb8:	00525453 	subseq	r5, r2, r3, asr r4
     ebc:	5f485445 	svcpl	0x00485445
     ec0:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     ec4:	43435200 	movtmi	r5, #12800	; 0x3200
     ec8:	6f6c435f 	svcvs	0x006c435f
     ecc:	54736b63 	ldrbtpl	r6, [r3], #-2915	; 0xfffff49d
     ed0:	44657079 	strbtmi	r7, [r5], #-121	; 0xffffff87
     ed4:	4d006665 	stcmi	6, cr6, [r0, #-404]	; 0xfffffe6c
     ed8:	0052464d 	subseq	r4, r2, sp, asr #12
     edc:	5f434352 	svcpl	0x00434352
     ee0:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0xfffff6ac
     ee4:	00666544 	rsbeq	r6, r6, r4, asr #10
     ee8:	41464d4d 	cmpmi	r6, sp, asr #26
     eec:	68730052 	ldmdavs	r3!, {r1, r4, r6}^
     ef0:	2074726f 	rsbscs	r7, r4, pc, ror #4
     ef4:	00746e69 	rsbseq	r6, r4, r9, ror #28
     ef8:	73736170 	cmnvc	r3, #112, 2
     efc:	64726f77 	ldrbtvs	r6, [r2], #-3959	; 0xfffff089
     f00:	43435200 	movtmi	r5, #12800	; 0x3200
     f04:	5152495f 	cmppl	r2, pc, asr r9
     f08:	7270006e 	rsbsvc	r0, r0, #110	; 0x6e
     f0c:	69726f69 	ldmdbvs	r2!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
     f10:	52007974 	andpl	r7, r0, #116, 18	; 0x1d0000
     f14:	495f4343 	ldmdbmi	pc, {r0, r1, r6, r8, r9, lr}^	; <UNPREDICTABLE>
     f18:	53490054 	movtpl	r0, #36948	; 0x9054
     f1c:	44005241 	strmi	r5, [r0], #-577	; 0xfffffdbf
     f20:	5f31414d 	svcpl	0x0031414d
     f24:	65727453 	ldrbvs	r7, [r2, #-1107]!	; 0xfffffbad
     f28:	5f336d61 	svcpl	0x00336d61
     f2c:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     f30:	41535500 	cmpmi	r3, r0, lsl #10
     f34:	5f325452 	svcpl	0x00325452
     f38:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     f3c:	74696200 	strbtvc	r6, [r9], #-512	; 0xfffffe00
     f40:	74617473 	strbtvc	r7, [r1], #-1139	; 0xfffffb8d
     f44:	45007375 	strmi	r7, [r0, #-885]	; 0xfffffc8b
     f48:	4c42414e 	stfmie	f4, [r2], {78}	; 0x4e
     f4c:	6c700045 	ldclvs	0, cr0, [r0], #-276	; 0xfffffeec
     f50:	6f63766c 	svcvs	0x0063766c
     f54:	43435200 	movtmi	r5, #12800	; 0x3200
     f58:	4250415f 	subsmi	r4, r0, #-1073741801	; 0xc0000017
     f5c:	72655031 	rsbvc	r5, r5, #49	; 0x31
     f60:	43687069 	cmnmi	r8, #105	; 0x69
     f64:	6b636f6c 	blvs	18dcd1c <startup-0x1e7232e4>
     f68:	6f4d504c 	svcvs	0x004d504c
     f6c:	6d436564 	cfstr64vs	mvdx6, [r3, #-400]	; 0xfffffe70
     f70:	50470064 	subpl	r0, r7, r4, rrx
     f74:	545f4f49 	ldrbpl	r4, [pc], #-3913	; f7c <startup-0x1ffff084>
     f78:	44657079 	strbtmi	r7, [r5], #-121	; 0xffffff87
     f7c:	54006665 	strpl	r6, [r0], #-1637	; 0xfffff99b
     f80:	5f314d49 	svcpl	0x00314d49
     f84:	545f5055 	ldrbpl	r5, [pc], #-85	; f8c <startup-0x1ffff074>
     f88:	30314d49 	eorscc	r4, r1, r9, asr #26
     f8c:	5152495f 	cmppl	r2, pc, asr r9
     f90:	5449006e 	strbpl	r0, [r9], #-110	; 0xffffff92
     f94:	78525f4d 	ldmdavc	r2, {r0, r2, r3, r6, r8, r9, sl, fp, ip, lr}^
     f98:	66667542 	strbtvs	r7, [r6], -r2, asr #10
     f9c:	50007265 	andpl	r7, r0, r5, ror #4
     fa0:	32494c4c 	subcc	r4, r9, #76, 24	; 0x4c00
     fa4:	52004e53 	andpl	r4, r0, #1328	; 0x530
     fa8:	415f4343 	cmpmi	pc, r3, asr #6
     fac:	50314248 	eorspl	r4, r1, r8, asr #4
     fb0:	70697265 	rsbvc	r7, r9, r5, ror #4
     fb4:	6f6c4368 	svcvs	0x006c4368
     fb8:	504c6b63 	subpl	r6, ip, r3, ror #22
     fbc:	65646f4d 	strbvs	r6, [r4, #-3917]!	; 0xfffff0b3
     fc0:	00646d43 	rsbeq	r6, r4, r3, asr #26
     fc4:	494c4c50 	stmdbmi	ip, {r4, r6, sl, fp, lr}^
     fc8:	00525332 	subseq	r5, r2, r2, lsr r3
     fcc:	6e69616d 	powvsez	f6, f1, #5.0
     fd0:	47544f00 	ldrbmi	r4, [r4, -r0, lsl #30]
     fd4:	5f53485f 	svcpl	0x0053485f
     fd8:	5f315045 	svcpl	0x00315045
     fdc:	5f54554f 	svcpl	0x0054554f
     fe0:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     fe4:	72616c00 	rsbvc	r6, r1, #0, 24
     fe8:	6369546d 	cmnvs	r9, #1828716544	; 0x6d000000
     fec:	4352006b 	cmpmi	r2, #107	; 0x6b
     ff0:	54525f43 	ldrbpl	r5, [r2], #-3907	; 0xfffff0bd
     ff4:	4b4c4343 	blmi	1311d08 <startup-0x1ecee2f8>
     ff8:	00646d43 	rsbeq	r6, r4, r3, asr #26
     ffc:	5f707061 	svcpl	0x00707061
    1000:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xfffff1b7
    1004:	444f4d00 	strbmi	r4, [pc], #-3328	; 100c <startup-0x1fffeff4>
    1008:	4e005245 	cdpmi	2, 0, cr5, cr0, cr5, {2}
    100c:	5f434956 	svcpl	0x00434956
    1010:	50746553 	rsbspl	r6, r4, r3, asr r5
    1014:	726f6972 	rsbvc	r6, pc, #1867776	; 0x1c8000
    1018:	00797469 	rsbseq	r7, r9, r9, ror #8
    101c:	314e4143 	cmpcc	lr, r3, asr #2
    1020:	3158525f 	cmpcc	r8, pc, asr r2
    1024:	5152495f 	cmppl	r2, pc, asr r9
    1028:	4352006e 	cmpmi	r2, #110	; 0x6e
    102c:	48415f43 	stmdami	r1, {r0, r1, r6, r8, r9, sl, fp, ip, lr}^
    1030:	65503242 	ldrbvs	r3, [r0, #-578]	; 0xfffffdbe
    1034:	68706972 	ldmdavs	r0!, {r1, r4, r5, r6, r8, fp, sp, lr}^
    1038:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
    103c:	75505f4f 	ldrbvc	r5, [r0, #-3919]	; 0xfffff0b1
    1040:	555f6450 	ldrbpl	r6, [pc, #-1104]	; bf8 <startup-0x1ffff408>
    1044:	58450050 	stmdapl	r5, {r4, r6}^
    1048:	5f394954 	svcpl	0x00394954
    104c:	52495f35 	subpl	r5, r9, #53, 30	; 0xd4
    1050:	50006e51 	andpl	r6, r0, r1, asr lr
    1054:	41534c4c 	cmpmi	r3, ip, asr #24
    1058:	47464349 	strbmi	r4, [r6, -r9, asr #6]
    105c:	43520052 	cmpmi	r2, #82	; 0x52
    1060:	48415f43 	stmdami	r1, {r0, r1, r6, r8, r9, sl, fp, ip, lr}^
    1064:	65503142 	ldrbvs	r3, [r0, #-322]	; 0xfffffebe
    1068:	68706972 	ldmdavs	r0!, {r1, r4, r5, r6, r8, fp, sp, lr}^
    106c:	636f6c43 	cmnvs	pc, #17152	; 0x4300
    1070:	646d436b 	strbtvs	r4, [sp], #-875	; 0xfffffc95
    1074:	6f687300 	svcvs	0x00687300
    1078:	75207472 	strvc	r7, [r0, #-1138]!	; 0xfffffb8e
    107c:	6769736e 	strbvs	r7, [r9, -lr, ror #6]!
    1080:	2064656e 	rsbcs	r6, r4, lr, ror #10
    1084:	00746e69 	rsbseq	r6, r4, r9, ror #28
    1088:	5f434352 	svcpl	0x00434352
    108c:	494c4c50 	stmdbmi	ip, {r4, r6, sl, fp, lr}^
    1090:	6f435332 	svcvs	0x00435332
    1094:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    1098:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    109c:	43435f38 	movtmi	r5, #16184	; 0x3f38
    10a0:	5152495f 	cmppl	r2, pc, asr r9
    10a4:	4453006e 	ldrbmi	r0, [r3], #-110	; 0xffffff92
    10a8:	495f4f49 	ldmdbmi	pc, {r0, r3, r6, r8, r9, sl, fp, lr}^	; <UNPREDICTABLE>
    10ac:	006e5152 	rsbeq	r5, lr, r2, asr r1
    10b0:	43415043 	movtmi	r5, #4163	; 0x1043
    10b4:	53490052 	movtpl	r0, #36946	; 0x9052
    10b8:	53005250 	movwpl	r5, #592	; 0x250
    10bc:	4c435359 	mcrrmi	3, 5, r5, r3, cr9
    10c0:	72465f4b 	subvc	r5, r6, #300	; 0x12c
    10c4:	65757165 	ldrbvs	r7, [r5, #-357]!	; 0xfffffe9b
    10c8:	0079636e 	rsbseq	r6, r9, lr, ror #6
    10cc:	49545845 	ldmdbmi	r4, {r0, r2, r6, fp, ip, lr}^
    10d0:	52495f33 	subpl	r5, r9, #51, 30	; 0xcc
    10d4:	50006e51 	andpl	r6, r0, r1, asr lr
    10d8:	53646e65 	cmnpl	r4, #1616	; 0x650
    10dc:	52495f56 	subpl	r5, r9, #344	; 0x158
    10e0:	74006e51 	strvc	r6, [r0], #-3665	; 0xfffff1af
    10e4:	31747365 	cmncc	r4, r5, ror #6
    10e8:	73657400 	cmnvc	r5, #0, 8
    10ec:	74003274 	strvc	r3, [r0], #-628	; 0xfffffd8c
    10f0:	33747365 	cmncc	r4, #-1811939327	; 0x94000001
    10f4:	47544f00 	ldrbmi	r4, [r4, -r0, lsl #30]
    10f8:	5f53485f 	svcpl	0x0053485f
    10fc:	5f315045 	svcpl	0x00315045
    1100:	495f4e49 	ldmdbmi	pc, {r0, r3, r6, r9, sl, fp, lr}^	; <UNPREDICTABLE>
    1104:	006e5152 	rsbeq	r5, lr, r2, asr r1
    1108:	31414d44 	cmpcc	r1, r4, asr #26
    110c:	7274535f 	rsbsvc	r5, r4, #2080374785	; 0x7c000001
    1110:	376d6165 	strbcc	r6, [sp, -r5, ror #2]!
    1114:	5152495f 	cmppl	r2, pc, asr r9
    1118:	5f5f006e 	svcpl	0x005f006e
    111c:	33746e69 	cmncc	r4, #1680	; 0x690
    1120:	00745f32 	rsbseq	r5, r4, r2, lsr pc
    1124:	5f434352 	svcpl	0x00434352
    1128:	434d4954 	movtmi	r4, #55636	; 0xd954
    112c:	72504b4c 	subsvc	r4, r0, #76, 22	; 0x13000
    1130:	61637365 	cmnvs	r3, r5, ror #6
    1134:	0072656c 	rsbseq	r6, r2, ip, ror #10
    1138:	52455349 	subpl	r5, r5, #603979777	; 0x24000001
    113c:	65727000 	ldrbvs	r7, [r2, #-0]!
    1140:	52006373 	andpl	r6, r0, #-872415231	; 0xcc000001
    1144:	415f4343 	cmpmi	pc, r3, asr #6
    1148:	50324248 	eorspl	r4, r2, r8, asr #4
    114c:	70697265 	rsbvc	r7, r9, r5, ror #4
    1150:	73655268 	cmnvc	r5, #104, 4	; 0x80000006
    1154:	6d437465 	cfstrdvs	mvd7, [r3, #-404]	; 0xfffffe6c
    1158:	43520064 	cmpmi	r2, #100	; 0x64
    115c:	4c505f43 	mrrcmi	15, 4, r5, r0, cr3
    1160:	4941534c 	stmdbmi	r1, {r2, r3, r6, r8, r9, ip, lr}^
    1164:	00646d43 	rsbeq	r6, r4, r3, asr #26
    1168:	33424841 	movtcc	r4, #10305	; 0x2841
    116c:	00524e45 	subseq	r4, r2, r5, asr #28
    1170:	5f434352 	svcpl	0x00434352
    1174:	43535953 	cmpmi	r3, #1359872	; 0x14c000
    1178:	6f434b4c 	svcvs	0x00434b4c
    117c:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    1180:	414d4400 	cmpmi	sp, r0, lsl #8
    1184:	74535f32 	ldrbvc	r5, [r3], #-3890	; 0xfffff0ce
    1188:	6d616572 	cfstr64vs	mvdx6, [r1, #-456]!	; 0xfffffe38
    118c:	52495f32 	subpl	r5, r9, #50, 30	; 0xc8
    1190:	47006e51 	smlsdmi	r0, r1, lr, r6
    1194:	5f4f4950 	svcpl	0x004f4950
    1198:	74736146 	ldrbtvc	r6, [r3], #-326	; 0xfffffeba
    119c:	6570535f 	ldrbvs	r5, [r0, #-863]!	; 0xfffffca1
    11a0:	52006465 	andpl	r6, r0, #1694498816	; 0x65000000
    11a4:	505f4343 	subspl	r4, pc, r3, asr #6
    11a8:	6f434c4c 	svcvs	0x00434c4c
    11ac:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    11b0:	6c6c7000 	stclvs	0, cr7, [ip], #-0
    11b4:	6970006d 	ldmdbvs	r0!, {r0, r2, r3, r5, r6}^
    11b8:	736f706e 	cmnvc	pc, #110	; 0x6e
    11bc:	74694200 	strbtvc	r4, [r9], #-512	; 0xfffffe00
    11c0:	5445535f 	strbpl	r5, [r5], #-863	; 0xfffffca1
    11c4:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
    11c8:	65525f4f 	ldrbvs	r5, [r2, #-3919]	; 0xfffff0b1
    11cc:	754f6461 	strbvc	r6, [pc, #-1121]	; d73 <startup-0x1ffff28d>
    11d0:	74757074 	ldrbtvc	r7, [r5], #-116	; 0xffffff8c
    11d4:	61746144 	cmnvs	r4, r4, asr #2
    11d8:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
    11dc:	46415f4f 	strbmi	r5, [r1], -pc, asr #30
    11e0:	6d657400 	cfstrdvs	mvd7, [r5, #-0]
    11e4:	50470070 	subpl	r0, r7, r0, ror r0
    11e8:	535f4f49 	cmppl	pc, #292	; 0x124
    11ec:	63757274 	cmnvs	r5, #116, 4	; 0x40000007
    11f0:	696e4974 	stmdbvs	lr!, {r2, r4, r5, r6, r8, fp, lr}^
    11f4:	69420074 	stmdbvs	r2, {r2, r4, r5, r6}^
    11f8:	6c615674 	stclvs	6, cr5, [r1], #-464	; 0xfffffe30
    11fc:	74694200 	strbtvc	r4, [r9], #-512	; 0xfffffe00
    1200:	5345525f 	movtpl	r5, #21087	; 0x525f
    1204:	47005445 	strmi	r5, [r0, -r5, asr #8]
    1208:	5f4f4950 	svcpl	0x004f4950
    120c:	74697257 	strbtvc	r7, [r9], #-599	; 0xfffffda9
    1210:	74694265 	strbtvc	r4, [r9], #-613	; 0xfffffd9b
    1214:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
    1218:	65535f4f 	ldrbvs	r5, [r3, #-3919]	; 0xfffff0b1
    121c:	74694274 	strbtvc	r4, [r9], #-628	; 0xfffffd8c
    1220:	50470073 	subpl	r0, r7, r3, ror r0
    1224:	495f4f49 	ldmdbmi	pc, {r0, r3, r6, r8, r9, sl, fp, lr}^	; <UNPREDICTABLE>
    1228:	0074696e 	rsbseq	r6, r4, lr, ror #18
    122c:	4f495047 	svcmi	0x00495047
    1230:	7365525f 	cmnvc	r5, #-268435451	; 0xf0000005
    1234:	69427465 	stmdbvs	r2, {r0, r2, r5, r6, sl, ip, sp, lr}^
    1238:	47007374 	smlsdxmi	r0, r4, r3, r7
    123c:	5f4f4950 	svcpl	0x004f4950
    1240:	6e496544 	cdpvs	5, 4, cr6, cr9, cr4, {2}
    1244:	47007469 	strmi	r7, [r0, -r9, ror #8]
    1248:	5f4f4950 	svcpl	0x004f4950
    124c:	64616552 	strbtvs	r6, [r1], #-1362	; 0xfffffaae
    1250:	75706e49 	ldrbvc	r6, [r0, #-3657]!	; 0xfffff1b7
    1254:	74614474 	strbtvc	r4, [r1], #-1140	; 0xfffffb8c
    1258:	74694261 	strbtvc	r4, [r9], #-609	; 0xfffffd9f
    125c:	5c3a4300 	ldcpl	3, cr4, [sl], #-0
    1260:	5c746967 			; <UNDEFINED> instruction: 0x5c746967
    1264:	32544144 	subscc	r4, r4, #68, 2
    1268:	4c2d3039 	stcmi	0, cr3, [sp], #-228	; 0xffffff1c
    126c:	736d7261 	cmnvc	sp, #268435462	; 0x10000006
    1270:	65747379 	ldrbvs	r7, [r4, #-889]!	; 0xfffffc87
    1274:	6f6b5c6d 	svcvs	0x006b5c6d
    1278:	6f445c64 	svcvs	0x00445c64
    127c:	4700726f 	strmi	r7, [r0, -pc, ror #4]
    1280:	5f4f4950 	svcpl	0x004f4950
    1284:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xfffff1b7
    1288:	75727453 	ldrbvc	r7, [r2, #-1107]!	; 0xfffffbad
    128c:	50007463 	andpl	r7, r0, r3, ror #8
    1290:	5674726f 	ldrbtpl	r7, [r4], -pc, ror #4
    1294:	47006c61 	strmi	r6, [r0, -r1, ror #24]
    1298:	5f4f4950 	svcpl	0x004f4950
    129c:	536e6950 	cmnpl	lr, #80, 18	; 0x140000
    12a0:	6372756f 	cmnvs	r2, #465567744	; 0x1bc00000
    12a4:	50470065 	subpl	r0, r7, r5, rrx
    12a8:	525f4f49 	subspl	r4, pc, #292	; 0x124
    12ac:	49646165 	stmdbmi	r4!, {r0, r2, r5, r6, r8, sp, lr}^
    12b0:	7475706e 	ldrbtvc	r7, [r5], #-110	; 0xffffff92
    12b4:	61746144 	cmnvs	r4, r4, asr #2
    12b8:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
    12bc:	69505f4f 	ldmdbvs	r0, {r0, r1, r2, r3, r6, r8, r9, sl, fp, ip, lr}^
    12c0:	636f4c6e 	cmnvs	pc, #28160	; 0x6e00
    12c4:	6e6f436b 	cdpvs	3, 6, cr4, cr15, cr11, {3}
    12c8:	00676966 	rsbeq	r6, r7, r6, ror #18
    12cc:	41746942 	cmnmi	r4, r2, asr #18
    12d0:	6f697463 	svcvs	0x00697463
    12d4:	7563006e 	strbvc	r0, [r3, #-110]!	; 0xffffff92
    12d8:	6e657272 	mcrvs	2, 3, r7, cr5, cr2, {3}
    12dc:	6e697074 	mcrvs	0, 3, r7, cr9, cr4, {3}
    12e0:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
    12e4:	72575f4f 	subsvc	r5, r7, #316	; 0x13c
    12e8:	00657469 	rsbeq	r7, r5, r9, ror #8
    12ec:	4f495047 	svcmi	0x00495047
    12f0:	50470078 	subpl	r0, r7, r8, ror r0
    12f4:	545f4f49 	ldrbpl	r4, [pc], #-3913	; 12fc <startup-0x1fffed04>
    12f8:	6c67676f 	stclvs	7, cr6, [r7], #-444	; 0xfffffe44
    12fc:	74694265 	strbtvc	r4, [r9], #-613	; 0xfffffd9b
    1300:	65740073 	ldrbvs	r0, [r4, #-115]!	; 0xffffff8d
    1304:	325f706d 	subscc	r7, pc, #109	; 0x6d
    1308:	2f3a4300 	svccs	0x003a4300
    130c:	2f746967 	svccs	0x00746967
    1310:	32544144 	subscc	r4, r4, #68, 2
    1314:	4c2d3039 	stcmi	0, cr3, [sp], #-228	; 0xffffff1c
    1318:	736d7261 	cmnvc	sp, #268435462	; 0x10000006
    131c:	65747379 	ldrbvs	r7, [r4, #-889]!	; 0xfffffc87
    1320:	6f6b2f6d 	svcvs	0x006b2f6d
    1324:	696c2f64 	stmdbvs	ip!, {r2, r5, r6, r8, r9, sl, fp, sp}^
    1328:	54532f62 	ldrbpl	r2, [r3], #-3938	; 0xfffff09e
    132c:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
    1330:	696c5f34 	stmdbvs	ip!, {r2, r4, r5, r8, r9, sl, fp, ip, lr}^
    1334:	54532f62 	ldrbpl	r2, [r3], #-3938	; 0xfffff09e
    1338:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
    133c:	5f787834 	svcpl	0x00787834
    1340:	50647453 	rsbpl	r7, r4, r3, asr r4
    1344:	70697265 	rsbvc	r7, r9, r5, ror #4
    1348:	72445f68 	subvc	r5, r4, #104, 30	; 0x1a0
    134c:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
    1350:	6372732f 	cmnvs	r2, #-1140850688	; 0xbc000000
    1354:	6d74732f 	ldclvs	3, cr7, [r4, #-188]!	; 0xffffff44
    1358:	34663233 	strbtcc	r3, [r6], #-563	; 0xfffffdcd
    135c:	675f7878 			; <UNDEFINED> instruction: 0x675f7878
    1360:	2e6f6970 			; <UNDEFINED> instruction: 0x2e6f6970
    1364:	50470063 	subpl	r0, r7, r3, rrx
    1368:	505f4f49 	subspl	r4, pc, r9, asr #30
    136c:	46416e69 	strbmi	r6, [r1], -r9, ror #28
    1370:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    1374:	47006769 	strmi	r6, [r0, -r9, ror #14]
    1378:	5f4f4950 	svcpl	0x004f4950
    137c:	64616552 	strbtvs	r6, [r1], #-1362	; 0xfffffaae
    1380:	7074754f 	rsbsvc	r7, r4, pc, asr #10
    1384:	61447475 	hvcvs	18245	; 0x4745
    1388:	69426174 	stmdbvs	r2, {r2, r4, r5, r6, r8, sp, lr}^
    138c:	Address 0x0000138c is out of bounds.


Disassembly of section .comment:

00000000 <.comment>:
   0:	3a434347 	bcc	10d0d24 <startup-0x1ef2f2dc>
   4:	4e472820 	cdpmi	8, 4, cr2, cr7, cr0, {1}
   8:	6f542055 	svcvs	0x00542055
   c:	20736c6f 	rsbscs	r6, r3, pc, ror #24
  10:	20726f66 	rsbscs	r6, r2, r6, ror #30
  14:	206d7241 	rsbcs	r7, sp, r1, asr #4
  18:	65626d45 	strbvs	r6, [r2, #-3397]!	; 0xfffff2bb
  1c:	64656464 	strbtvs	r6, [r5], #-1124	; 0xfffffb9c
  20:	6f725020 	svcvs	0x00725020
  24:	73736563 	cmnvc	r3, #415236096	; 0x18c00000
  28:	2073726f 	rsbscs	r7, r3, pc, ror #4
  2c:	30322d37 	eorscc	r2, r2, r7, lsr sp
  30:	712d3731 			; <UNDEFINED> instruction: 0x712d3731
  34:	616d2d34 	cmnvs	sp, r4, lsr sp
  38:	29726f6a 	ldmdbcs	r2!, {r1, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
  3c:	322e3720 	eorcc	r3, lr, #32, 14	; 0x800000
  40:	3220312e 	eorcc	r3, r0, #-2147483637	; 0x8000000b
  44:	30373130 	eorscc	r3, r7, r0, lsr r1
  48:	20343039 	eorscs	r3, r4, r9, lsr r0
  4c:	6c657228 	sfmvs	f7, 2, [r5], #-160	; 0xffffff60
  50:	65736165 	ldrbvs	r6, [r3, #-357]!	; 0xfffffe9b
  54:	415b2029 	cmpmi	fp, r9, lsr #32
  58:	652f4d52 	strvs	r4, [pc, #-3410]!	; fffff30e <APBAHBPrescTable+0xdfffdd1e>
  5c:	6465626d 	strbtvs	r6, [r5], #-621	; 0xfffffd93
  60:	2d646564 	cfstr64cs	mvdx6, [r4, #-400]!	; 0xfffffe70
  64:	72622d37 	rsbvc	r2, r2, #3520	; 0xdc0
  68:	68636e61 	stmdavs	r3!, {r0, r5, r6, r9, sl, fp, sp, lr}^
  6c:	76657220 	strbtvc	r7, [r5], -r0, lsr #4
  70:	6f697369 	svcvs	0x00697369
  74:	3532206e 	ldrcc	r2, [r2, #-110]!	; 0xffffff92
  78:	34303235 	ldrtcc	r3, [r0], #-565	; 0xfffffdcb
  7c:	Address 0x0000007c is out of bounds.


Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00002b41 	andeq	r2, r0, r1, asr #22
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	00000021 	andeq	r0, r0, r1, lsr #32
  10:	2d533605 	ldclcs	6, cr3, [r3, #-20]	; 0xffffffec
  14:	0c06004d 	stceq	0, cr0, [r6], {77}	; 0x4d
  18:	01094d07 	tsteq	r9, r7, lsl #26
  1c:	01140412 	tsteq	r4, r2, lsl r4
  20:	03170115 	tsteq	r7, #1073741829	; 0x40000005
  24:	01190118 	tsteq	r9, r8, lsl r1
  28:	061e011a 			; <UNDEFINED> instruction: 0x061e011a

Disassembly of section .debug_frame:

00000000 <.debug_frame>:
   0:	0000000c 	andeq	r0, r0, ip
   4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   8:	7c020001 	stcvc	0, cr0, [r2], {1}
   c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  10:	0000001c 	andeq	r0, r0, ip, lsl r0
  14:	00000000 	andeq	r0, r0, r0
  18:	20000010 	andcs	r0, r0, r0, lsl r0
  1c:	00000060 	andeq	r0, r0, r0, rrx
  20:	40080e41 	andmi	r0, r8, r1, asr #28
  24:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  28:	100e4101 	andne	r4, lr, r1, lsl #2
  2c:	00070d41 	andeq	r0, r7, r1, asr #26
  30:	0000001c 	andeq	r0, r0, ip, lsl r0
  34:	00000000 	andeq	r0, r0, r0
  38:	20000070 	andcs	r0, r0, r0, ror r0
  3c:	00000048 	andeq	r0, r0, r8, asr #32
  40:	40080e41 	andmi	r0, r8, r1, asr #28
  44:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  48:	100e4101 	andne	r4, lr, r1, lsl #2
  4c:	00070d41 	andeq	r0, r7, r1, asr #26
  50:	00000018 	andeq	r0, r0, r8, lsl r0
  54:	00000000 	andeq	r0, r0, r0
  58:	200000b8 	strhcs	r0, [r0], -r8
  5c:	00000070 	andeq	r0, r0, r0, ror r0
  60:	40080e41 	andmi	r0, r8, r1, asr #28
  64:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  68:	070d4101 	streq	r4, [sp, -r1, lsl #2]
  6c:	0000001c 	andeq	r0, r0, ip, lsl r0
  70:	00000000 	andeq	r0, r0, r0
  74:	20000128 	andcs	r0, r0, r8, lsr #2
  78:	00000028 	andeq	r0, r0, r8, lsr #32
  7c:	40080e41 	andmi	r0, r8, r1, asr #28
  80:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  84:	100e4101 	andne	r4, lr, r1, lsl #2
  88:	00070d41 	andeq	r0, r7, r1, asr #26
  8c:	00000020 	andeq	r0, r0, r0, lsr #32
  90:	00000000 	andeq	r0, r0, r0
  94:	20000150 	andcs	r0, r0, r0, asr r1
  98:	0000005e 	andeq	r0, r0, lr, asr r0
  9c:	400c0e41 	andmi	r0, ip, r1, asr #28
  a0:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
  a4:	018e4002 	orreq	r4, lr, r2
  a8:	41180e41 	tstmi	r8, r1, asr #28
  ac:	0000070d 	andeq	r0, r0, sp, lsl #14
  b0:	0000001c 	andeq	r0, r0, ip, lsl r0
  b4:	00000000 	andeq	r0, r0, r0
  b8:	200001ae 	andcs	r0, r0, lr, lsr #3
  bc:	0000003e 	andeq	r0, r0, lr, lsr r0
  c0:	40080e41 	andmi	r0, r8, r1, asr #28
  c4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  c8:	180e4101 	stmdane	lr, {r0, r8, lr}
  cc:	00070d41 	andeq	r0, r7, r1, asr #26
  d0:	0000001c 	andeq	r0, r0, ip, lsl r0
  d4:	00000000 	andeq	r0, r0, r0
  d8:	200001ec 	andcs	r0, r0, ip, ror #3
  dc:	00000020 	andeq	r0, r0, r0, lsr #32
  e0:	40080e41 	andmi	r0, r8, r1, asr #28
  e4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  e8:	100e4101 	andne	r4, lr, r1, lsl #2
  ec:	00070d41 	andeq	r0, r7, r1, asr #26
  f0:	0000001c 	andeq	r0, r0, ip, lsl r0
  f4:	00000000 	andeq	r0, r0, r0
  f8:	2000020c 	andcs	r0, r0, ip, lsl #4
  fc:	00000044 	andeq	r0, r0, r4, asr #32
 100:	40080e41 	andmi	r0, r8, r1, asr #28
 104:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 108:	100e4101 	andne	r4, lr, r1, lsl #2
 10c:	00070d41 	andeq	r0, r7, r1, asr #26
 110:	0000001c 	andeq	r0, r0, ip, lsl r0
 114:	00000000 	andeq	r0, r0, r0
 118:	20000250 	andcs	r0, r0, r0, asr r2
 11c:	00000020 	andeq	r0, r0, r0, lsr #32
 120:	40080e41 	andmi	r0, r8, r1, asr #28
 124:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 128:	100e4101 	andne	r4, lr, r1, lsl #2
 12c:	00070d41 	andeq	r0, r7, r1, asr #26
 130:	0000001c 	andeq	r0, r0, ip, lsl r0
 134:	00000000 	andeq	r0, r0, r0
 138:	20000270 	andcs	r0, r0, r0, ror r2
 13c:	0000003c 	andeq	r0, r0, ip, lsr r0
 140:	40080e41 	andmi	r0, r8, r1, asr #28
 144:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 148:	180e4101 	stmdane	lr, {r0, r8, lr}
 14c:	00070d41 	andeq	r0, r7, r1, asr #26
 150:	0000001c 	andeq	r0, r0, ip, lsl r0
 154:	00000000 	andeq	r0, r0, r0
 158:	200002ac 	andcs	r0, r0, ip, lsr #5
 15c:	00000020 	andeq	r0, r0, r0, lsr #32
 160:	40080e41 	andmi	r0, r8, r1, asr #28
 164:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 168:	100e4101 	andne	r4, lr, r1, lsl #2
 16c:	00070d41 	andeq	r0, r7, r1, asr #26
 170:	0000001c 	andeq	r0, r0, ip, lsl r0
 174:	00000000 	andeq	r0, r0, r0
 178:	200002cc 	andcs	r0, r0, ip, asr #5
 17c:	00000028 	andeq	r0, r0, r8, lsr #32
 180:	40080e41 	andmi	r0, r8, r1, asr #28
 184:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 188:	100e4101 	andne	r4, lr, r1, lsl #2
 18c:	00070d41 	andeq	r0, r7, r1, asr #26
 190:	0000001c 	andeq	r0, r0, ip, lsl r0
 194:	00000000 	andeq	r0, r0, r0
 198:	200002f4 	strdcs	r0, [r0], -r4
 19c:	00000020 	andeq	r0, r0, r0, lsr #32
 1a0:	40080e41 	andmi	r0, r8, r1, asr #28
 1a4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 1a8:	100e4101 	andne	r4, lr, r1, lsl #2
 1ac:	00070d41 	andeq	r0, r7, r1, asr #26
 1b0:	0000001c 	andeq	r0, r0, ip, lsl r0
 1b4:	00000000 	andeq	r0, r0, r0
 1b8:	20000314 	andcs	r0, r0, r4, lsl r3
 1bc:	00000030 	andeq	r0, r0, r0, lsr r0
 1c0:	40080e41 	andmi	r0, r8, r1, asr #28
 1c4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 1c8:	180e4101 	stmdane	lr, {r0, r8, lr}
 1cc:	00070d41 	andeq	r0, r7, r1, asr #26
 1d0:	0000001c 	andeq	r0, r0, ip, lsl r0
 1d4:	00000000 	andeq	r0, r0, r0
 1d8:	20000344 	andcs	r0, r0, r4, asr #6
 1dc:	00000020 	andeq	r0, r0, r0, lsr #32
 1e0:	40080e41 	andmi	r0, r8, r1, asr #28
 1e4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 1e8:	100e4101 	andne	r4, lr, r1, lsl #2
 1ec:	00070d41 	andeq	r0, r7, r1, asr #26
 1f0:	0000001c 	andeq	r0, r0, ip, lsl r0
 1f4:	00000000 	andeq	r0, r0, r0
 1f8:	20000364 	andcs	r0, r0, r4, ror #6
 1fc:	00000020 	andeq	r0, r0, r0, lsr #32
 200:	40080e41 	andmi	r0, r8, r1, asr #28
 204:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 208:	100e4101 	andne	r4, lr, r1, lsl #2
 20c:	00070d41 	andeq	r0, r7, r1, asr #26
 210:	0000001c 	andeq	r0, r0, ip, lsl r0
 214:	00000000 	andeq	r0, r0, r0
 218:	20000384 	andcs	r0, r0, r4, lsl #7
 21c:	00000040 	andeq	r0, r0, r0, asr #32
 220:	40080e41 	andmi	r0, r8, r1, asr #28
 224:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 228:	180e4101 	stmdane	lr, {r0, r8, lr}
 22c:	00070d41 	andeq	r0, r7, r1, asr #26
 230:	0000001c 	andeq	r0, r0, ip, lsl r0
 234:	00000000 	andeq	r0, r0, r0
 238:	200003c4 	andcs	r0, r0, r4, asr #7
 23c:	0000003c 	andeq	r0, r0, ip, lsr r0
 240:	40080e41 	andmi	r0, r8, r1, asr #28
 244:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 248:	180e4101 	stmdane	lr, {r0, r8, lr}
 24c:	00070d41 	andeq	r0, r7, r1, asr #26
 250:	0000001c 	andeq	r0, r0, ip, lsl r0
 254:	00000000 	andeq	r0, r0, r0
 258:	20000400 	andcs	r0, r0, r0, lsl #8
 25c:	00000034 	andeq	r0, r0, r4, lsr r0
 260:	40080e41 	andmi	r0, r8, r1, asr #28
 264:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 268:	180e4101 	stmdane	lr, {r0, r8, lr}
 26c:	00070d41 	andeq	r0, r7, r1, asr #26
 270:	00000018 	andeq	r0, r0, r8, lsl r0
 274:	00000000 	andeq	r0, r0, r0
 278:	20000434 	andcs	r0, r0, r4, lsr r4
 27c:	0000001c 	andeq	r0, r0, ip, lsl r0
 280:	40080e41 	andmi	r0, r8, r1, asr #28
 284:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 288:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 28c:	0000001c 	andeq	r0, r0, ip, lsl r0
 290:	00000000 	andeq	r0, r0, r0
 294:	20000450 	andcs	r0, r0, r0, asr r4
 298:	00000034 	andeq	r0, r0, r4, lsr r0
 29c:	40080e41 	andmi	r0, r8, r1, asr #28
 2a0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 2a4:	180e4101 	stmdane	lr, {r0, r8, lr}
 2a8:	00070d41 	andeq	r0, r7, r1, asr #26
 2ac:	0000001c 	andeq	r0, r0, ip, lsl r0
 2b0:	00000000 	andeq	r0, r0, r0
 2b4:	20000484 	andcs	r0, r0, r4, lsl #9
 2b8:	00000038 	andeq	r0, r0, r8, lsr r0
 2bc:	40080e41 	andmi	r0, r8, r1, asr #28
 2c0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 2c4:	180e4101 	stmdane	lr, {r0, r8, lr}
 2c8:	00070d41 	andeq	r0, r7, r1, asr #26
 2cc:	0000001c 	andeq	r0, r0, ip, lsl r0
 2d0:	00000000 	andeq	r0, r0, r0
 2d4:	200004bc 			; <UNDEFINED> instruction: 0x200004bc
 2d8:	0000003c 	andeq	r0, r0, ip, lsr r0
 2dc:	40080e41 	andmi	r0, r8, r1, asr #28
 2e0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 2e4:	180e4101 	stmdane	lr, {r0, r8, lr}
 2e8:	00070d41 	andeq	r0, r7, r1, asr #26
 2ec:	0000001c 	andeq	r0, r0, ip, lsl r0
 2f0:	00000000 	andeq	r0, r0, r0
 2f4:	200004f8 	strdcs	r0, [r0], -r8
 2f8:	00000158 	andeq	r0, r0, r8, asr r1
 2fc:	40080e41 	andmi	r0, r8, r1, asr #28
 300:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 304:	280e4101 	stmdacs	lr, {r0, r8, lr}
 308:	00070d41 	andeq	r0, r7, r1, asr #26
 30c:	0000001c 	andeq	r0, r0, ip, lsl r0
 310:	00000000 	andeq	r0, r0, r0
 314:	20000650 	andcs	r0, r0, r0, asr r6
 318:	00000060 	andeq	r0, r0, r0, rrx
 31c:	40080e41 	andmi	r0, r8, r1, asr #28
 320:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 324:	180e4101 	stmdane	lr, {r0, r8, lr}
 328:	00070d41 	andeq	r0, r7, r1, asr #26
 32c:	0000001c 	andeq	r0, r0, ip, lsl r0
 330:	00000000 	andeq	r0, r0, r0
 334:	200006b0 			; <UNDEFINED> instruction: 0x200006b0
 338:	00000020 	andeq	r0, r0, r0, lsr #32
 33c:	40080e41 	andmi	r0, r8, r1, asr #28
 340:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 344:	100e4101 	andne	r4, lr, r1, lsl #2
 348:	00070d41 	andeq	r0, r7, r1, asr #26
 34c:	0000001c 	andeq	r0, r0, ip, lsl r0
 350:	00000000 	andeq	r0, r0, r0
 354:	200006d0 	ldrdcs	r0, [r0], -r0	; <UNPREDICTABLE>
 358:	00000020 	andeq	r0, r0, r0, lsr #32
 35c:	40080e41 	andmi	r0, r8, r1, asr #28
 360:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 364:	100e4101 	andne	r4, lr, r1, lsl #2
 368:	00070d41 	andeq	r0, r7, r1, asr #26
 36c:	0000001c 	andeq	r0, r0, ip, lsl r0
 370:	00000000 	andeq	r0, r0, r0
 374:	200006f0 	strdcs	r0, [r0], -r0	; <UNPREDICTABLE>
 378:	0000001c 	andeq	r0, r0, ip, lsl r0
 37c:	40080e41 	andmi	r0, r8, r1, asr #28
 380:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 384:	100e4101 	andne	r4, lr, r1, lsl #2
 388:	00070d41 	andeq	r0, r7, r1, asr #26
 38c:	0000001c 	andeq	r0, r0, ip, lsl r0
 390:	00000000 	andeq	r0, r0, r0
 394:	2000070c 	andcs	r0, r0, ip, lsl #14
 398:	0000003c 	andeq	r0, r0, ip, lsr r0
 39c:	40080e41 	andmi	r0, r8, r1, asr #28
 3a0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 3a4:	180e4101 	stmdane	lr, {r0, r8, lr}
 3a8:	00070d41 	andeq	r0, r7, r1, asr #26
 3ac:	0000001c 	andeq	r0, r0, ip, lsl r0
 3b0:	00000000 	andeq	r0, r0, r0
 3b4:	20000748 	andcs	r0, r0, r8, asr #14
 3b8:	0000003c 	andeq	r0, r0, ip, lsr r0
 3bc:	40080e41 	andmi	r0, r8, r1, asr #28
 3c0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 3c4:	180e4101 	stmdane	lr, {r0, r8, lr}
 3c8:	00070d41 	andeq	r0, r7, r1, asr #26
 3cc:	0000001c 	andeq	r0, r0, ip, lsl r0
 3d0:	00000000 	andeq	r0, r0, r0
 3d4:	20000784 	andcs	r0, r0, r4, lsl #15
 3d8:	0000003c 	andeq	r0, r0, ip, lsr r0
 3dc:	40080e41 	andmi	r0, r8, r1, asr #28
 3e0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 3e4:	180e4101 	stmdane	lr, {r0, r8, lr}
 3e8:	00070d41 	andeq	r0, r7, r1, asr #26
 3ec:	0000001c 	andeq	r0, r0, ip, lsl r0
 3f0:	00000000 	andeq	r0, r0, r0
 3f4:	200007c0 	andcs	r0, r0, r0, asr #15
 3f8:	00000040 	andeq	r0, r0, r0, asr #32
 3fc:	40080e41 	andmi	r0, r8, r1, asr #28
 400:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 404:	180e4101 	stmdane	lr, {r0, r8, lr}
 408:	00070d41 	andeq	r0, r7, r1, asr #26
 40c:	0000001c 	andeq	r0, r0, ip, lsl r0
 410:	00000000 	andeq	r0, r0, r0
 414:	20000800 	andcs	r0, r0, r0, lsl #16
 418:	0000003c 	andeq	r0, r0, ip, lsr r0
 41c:	40080e41 	andmi	r0, r8, r1, asr #28
 420:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 424:	180e4101 	stmdane	lr, {r0, r8, lr}
 428:	00070d41 	andeq	r0, r7, r1, asr #26
 42c:	0000001c 	andeq	r0, r0, ip, lsl r0
 430:	00000000 	andeq	r0, r0, r0
 434:	2000083c 	andcs	r0, r0, ip, lsr r8
 438:	0000001c 	andeq	r0, r0, ip, lsl r0
 43c:	40080e41 	andmi	r0, r8, r1, asr #28
 440:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 444:	100e4101 	andne	r4, lr, r1, lsl #2
 448:	00070d41 	andeq	r0, r7, r1, asr #26
 44c:	0000001c 	andeq	r0, r0, ip, lsl r0
 450:	00000000 	andeq	r0, r0, r0
 454:	20000858 	andcs	r0, r0, r8, asr r8
 458:	00000040 	andeq	r0, r0, r0, asr #32
 45c:	40080e41 	andmi	r0, r8, r1, asr #28
 460:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 464:	100e4101 	andne	r4, lr, r1, lsl #2
 468:	00070d41 	andeq	r0, r7, r1, asr #26
 46c:	0000001c 	andeq	r0, r0, ip, lsl r0
 470:	00000000 	andeq	r0, r0, r0
 474:	20000898 	mulcs	r0, r8, r8
 478:	00000040 	andeq	r0, r0, r0, asr #32
 47c:	40080e41 	andmi	r0, r8, r1, asr #28
 480:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 484:	100e4101 	andne	r4, lr, r1, lsl #2
 488:	00070d41 	andeq	r0, r7, r1, asr #26
 48c:	0000001c 	andeq	r0, r0, ip, lsl r0
 490:	00000000 	andeq	r0, r0, r0
 494:	200008d8 	ldrdcs	r0, [r0], -r8
 498:	00000040 	andeq	r0, r0, r0, asr #32
 49c:	40080e41 	andmi	r0, r8, r1, asr #28
 4a0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 4a4:	100e4101 	andne	r4, lr, r1, lsl #2
 4a8:	00070d41 	andeq	r0, r7, r1, asr #26
 4ac:	0000001c 	andeq	r0, r0, ip, lsl r0
 4b0:	00000000 	andeq	r0, r0, r0
 4b4:	20000918 	andcs	r0, r0, r8, lsl r9
 4b8:	00000040 	andeq	r0, r0, r0, asr #32
 4bc:	40080e41 	andmi	r0, r8, r1, asr #28
 4c0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 4c4:	100e4101 	andne	r4, lr, r1, lsl #2
 4c8:	00070d41 	andeq	r0, r7, r1, asr #26
 4cc:	0000001c 	andeq	r0, r0, ip, lsl r0
 4d0:	00000000 	andeq	r0, r0, r0
 4d4:	20000958 	andcs	r0, r0, r8, asr r9
 4d8:	00000040 	andeq	r0, r0, r0, asr #32
 4dc:	40080e41 	andmi	r0, r8, r1, asr #28
 4e0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 4e4:	100e4101 	andne	r4, lr, r1, lsl #2
 4e8:	00070d41 	andeq	r0, r7, r1, asr #26
 4ec:	0000001c 	andeq	r0, r0, ip, lsl r0
 4f0:	00000000 	andeq	r0, r0, r0
 4f4:	20000998 	mulcs	r0, r8, r9
 4f8:	00000040 	andeq	r0, r0, r0, asr #32
 4fc:	40080e41 	andmi	r0, r8, r1, asr #28
 500:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 504:	100e4101 	andne	r4, lr, r1, lsl #2
 508:	00070d41 	andeq	r0, r7, r1, asr #26
 50c:	0000001c 	andeq	r0, r0, ip, lsl r0
 510:	00000000 	andeq	r0, r0, r0
 514:	200009d8 	ldrdcs	r0, [r0], -r8
 518:	00000040 	andeq	r0, r0, r0, asr #32
 51c:	40080e41 	andmi	r0, r8, r1, asr #28
 520:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 524:	100e4101 	andne	r4, lr, r1, lsl #2
 528:	00070d41 	andeq	r0, r7, r1, asr #26
 52c:	0000001c 	andeq	r0, r0, ip, lsl r0
 530:	00000000 	andeq	r0, r0, r0
 534:	20000a18 	andcs	r0, r0, r8, lsl sl
 538:	00000040 	andeq	r0, r0, r0, asr #32
 53c:	40080e41 	andmi	r0, r8, r1, asr #28
 540:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 544:	100e4101 	andne	r4, lr, r1, lsl #2
 548:	00070d41 	andeq	r0, r7, r1, asr #26
 54c:	0000001c 	andeq	r0, r0, ip, lsl r0
 550:	00000000 	andeq	r0, r0, r0
 554:	20000a58 	andcs	r0, r0, r8, asr sl
 558:	00000040 	andeq	r0, r0, r0, asr #32
 55c:	40080e41 	andmi	r0, r8, r1, asr #28
 560:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 564:	100e4101 	andne	r4, lr, r1, lsl #2
 568:	00070d41 	andeq	r0, r7, r1, asr #26
 56c:	0000001c 	andeq	r0, r0, ip, lsl r0
 570:	00000000 	andeq	r0, r0, r0
 574:	20000a98 	mulcs	r0, r8, sl
 578:	00000040 	andeq	r0, r0, r0, asr #32
 57c:	40080e41 	andmi	r0, r8, r1, asr #28
 580:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 584:	100e4101 	andne	r4, lr, r1, lsl #2
 588:	00070d41 	andeq	r0, r7, r1, asr #26
 58c:	0000001c 	andeq	r0, r0, ip, lsl r0
 590:	00000000 	andeq	r0, r0, r0
 594:	20000ad8 	ldrdcs	r0, [r0], -r8
 598:	00000040 	andeq	r0, r0, r0, asr #32
 59c:	40080e41 	andmi	r0, r8, r1, asr #28
 5a0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 5a4:	100e4101 	andne	r4, lr, r1, lsl #2
 5a8:	00070d41 	andeq	r0, r7, r1, asr #26
 5ac:	0000001c 	andeq	r0, r0, ip, lsl r0
 5b0:	00000000 	andeq	r0, r0, r0
 5b4:	20000b18 	andcs	r0, r0, r8, lsl fp
 5b8:	00000040 	andeq	r0, r0, r0, asr #32
 5bc:	40080e41 	andmi	r0, r8, r1, asr #28
 5c0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 5c4:	100e4101 	andne	r4, lr, r1, lsl #2
 5c8:	00070d41 	andeq	r0, r7, r1, asr #26
 5cc:	0000001c 	andeq	r0, r0, ip, lsl r0
 5d0:	00000000 	andeq	r0, r0, r0
 5d4:	20000b58 	andcs	r0, r0, r8, asr fp
 5d8:	00000040 	andeq	r0, r0, r0, asr #32
 5dc:	40080e41 	andmi	r0, r8, r1, asr #28
 5e0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 5e4:	100e4101 	andne	r4, lr, r1, lsl #2
 5e8:	00070d41 	andeq	r0, r7, r1, asr #26
 5ec:	0000001c 	andeq	r0, r0, ip, lsl r0
 5f0:	00000000 	andeq	r0, r0, r0
 5f4:	20000b98 	mulcs	r0, r8, fp
 5f8:	00000040 	andeq	r0, r0, r0, asr #32
 5fc:	40080e41 	andmi	r0, r8, r1, asr #28
 600:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 604:	100e4101 	andne	r4, lr, r1, lsl #2
 608:	00070d41 	andeq	r0, r7, r1, asr #26
 60c:	0000001c 	andeq	r0, r0, ip, lsl r0
 610:	00000000 	andeq	r0, r0, r0
 614:	20000bd8 	ldrdcs	r0, [r0], -r8
 618:	00000040 	andeq	r0, r0, r0, asr #32
 61c:	40080e41 	andmi	r0, r8, r1, asr #28
 620:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 624:	100e4101 	andne	r4, lr, r1, lsl #2
 628:	00070d41 	andeq	r0, r7, r1, asr #26
 62c:	0000001c 	andeq	r0, r0, ip, lsl r0
 630:	00000000 	andeq	r0, r0, r0
 634:	20000c18 	andcs	r0, r0, r8, lsl ip
 638:	0000003c 	andeq	r0, r0, ip, lsr r0
 63c:	40080e41 	andmi	r0, r8, r1, asr #28
 640:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 644:	100e4101 	andne	r4, lr, r1, lsl #2
 648:	00070d41 	andeq	r0, r7, r1, asr #26
 64c:	0000001c 	andeq	r0, r0, ip, lsl r0
 650:	00000000 	andeq	r0, r0, r0
 654:	20000c54 	andcs	r0, r0, r4, asr ip
 658:	00000050 	andeq	r0, r0, r0, asr r0
 65c:	40080e41 	andmi	r0, r8, r1, asr #28
 660:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 664:	100e4101 	andne	r4, lr, r1, lsl #2
 668:	00070d41 	andeq	r0, r7, r1, asr #26
 66c:	0000001c 	andeq	r0, r0, ip, lsl r0
 670:	00000000 	andeq	r0, r0, r0
 674:	20000ca4 	andcs	r0, r0, r4, lsr #25
 678:	00000084 	andeq	r0, r0, r4, lsl #1
 67c:	40080e41 	andmi	r0, r8, r1, asr #28
 680:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 684:	200e4101 	andcs	r4, lr, r1, lsl #2
 688:	00070d41 	andeq	r0, r7, r1, asr #26
 68c:	00000018 	andeq	r0, r0, r8, lsl r0
 690:	00000000 	andeq	r0, r0, r0
 694:	20000d28 	andcs	r0, r0, r8, lsr #26
 698:	0000001c 	andeq	r0, r0, ip, lsl r0
 69c:	40080e41 	andmi	r0, r8, r1, asr #28
 6a0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 6a4:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 6a8:	0000001c 	andeq	r0, r0, ip, lsl r0
 6ac:	00000000 	andeq	r0, r0, r0
 6b0:	20000d44 	andcs	r0, r0, r4, asr #26
 6b4:	00000044 	andeq	r0, r0, r4, asr #32
 6b8:	40080e41 	andmi	r0, r8, r1, asr #28
 6bc:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 6c0:	180e4101 	stmdane	lr, {r0, r8, lr}
 6c4:	00070d41 	andeq	r0, r7, r1, asr #26
 6c8:	0000001c 	andeq	r0, r0, ip, lsl r0
 6cc:	00000000 	andeq	r0, r0, r0
 6d0:	20000d88 	andcs	r0, r0, r8, lsl #27
 6d4:	00000020 	andeq	r0, r0, r0, lsr #32
 6d8:	40080e41 	andmi	r0, r8, r1, asr #28
 6dc:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 6e0:	100e4101 	andne	r4, lr, r1, lsl #2
 6e4:	00070d41 	andeq	r0, r7, r1, asr #26
 6e8:	0000000c 	andeq	r0, r0, ip
 6ec:	00000000 	andeq	r0, r0, r0
 6f0:	20000000 	andcs	r0, r0, r0
 6f4:	0000000c 	andeq	r0, r0, ip
 6f8:	0000001c 	andeq	r0, r0, ip, lsl r0
 6fc:	00000000 	andeq	r0, r0, r0
 700:	20000da8 	andcs	r0, r0, r8, lsr #27
 704:	00000068 	andeq	r0, r0, r8, rrx
 708:	40080e41 	andmi	r0, r8, r1, asr #28
 70c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 710:	100e4101 	andne	r4, lr, r1, lsl #2
 714:	00070d41 	andeq	r0, r7, r1, asr #26
 718:	00000018 	andeq	r0, r0, r8, lsl r0
 71c:	00000000 	andeq	r0, r0, r0
 720:	20000e10 	andcs	r0, r0, r0, lsl lr
 724:	00000018 	andeq	r0, r0, r8, lsl r0
 728:	40080e41 	andmi	r0, r8, r1, asr #28
 72c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 730:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 734:	0000001c 	andeq	r0, r0, ip, lsl r0
 738:	00000000 	andeq	r0, r0, r0
 73c:	20000e28 	andcs	r0, r0, r8, lsr #28
 740:	0000002c 	andeq	r0, r0, ip, lsr #32
 744:	40080e41 	andmi	r0, r8, r1, asr #28
 748:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 74c:	100e4101 	andne	r4, lr, r1, lsl #2
 750:	00070d41 	andeq	r0, r7, r1, asr #26
 754:	00000028 	andeq	r0, r0, r8, lsr #32
 758:	00000000 	andeq	r0, r0, r0
 75c:	20000e54 	andcs	r0, r0, r4, asr lr
 760:	00000170 	andeq	r0, r0, r0, ror r1
 764:	40140e41 	andsmi	r0, r4, r1, asr #28
 768:	85400584 	strbhi	r0, [r0, #-1412]	; 0xfffffa7c
 76c:	03864004 	orreq	r4, r6, #4
 770:	40028740 	andmi	r8, r2, r0, asr #14
 774:	0e41018e 	dvfeqd	f0, f1, #0.5
 778:	0d410198 	stfeqe	f0, [r1, #-608]	; 0xfffffda0
 77c:	00000007 	andeq	r0, r0, r7
 780:	0000000c 	andeq	r0, r0, ip
 784:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 788:	7c020001 	stcvc	0, cr0, [r2], {1}
 78c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 790:	0000001c 	andeq	r0, r0, ip, lsl r0
 794:	00000780 	andeq	r0, r0, r0, lsl #15
 798:	20000fc4 	andcs	r0, r0, r4, asr #31
 79c:	00000170 	andeq	r0, r0, r0, ror r1
 7a0:	40080e41 	andmi	r0, r8, r1, asr #28
 7a4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 7a8:	100e4101 	andne	r4, lr, r1, lsl #2
 7ac:	00070d41 	andeq	r0, r7, r1, asr #26
 7b0:	0000001c 	andeq	r0, r0, ip, lsl r0
 7b4:	00000780 	andeq	r0, r0, r0, lsl #15
 7b8:	20001134 	andcs	r1, r0, r4, lsr r1
 7bc:	00000118 	andeq	r0, r0, r8, lsl r1
 7c0:	40080e41 	andmi	r0, r8, r1, asr #28
 7c4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 7c8:	200e4101 	andcs	r4, lr, r1, lsl #2
 7cc:	00070d41 	andeq	r0, r7, r1, asr #26
 7d0:	0000001c 	andeq	r0, r0, ip, lsl r0
 7d4:	00000780 	andeq	r0, r0, r0, lsl #15
 7d8:	2000124c 	andcs	r1, r0, ip, asr #4
 7dc:	00000034 	andeq	r0, r0, r4, lsr r0
 7e0:	40080e41 	andmi	r0, r8, r1, asr #28
 7e4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 7e8:	100e4101 	andne	r4, lr, r1, lsl #2
 7ec:	00070d41 	andeq	r0, r7, r1, asr #26
 7f0:	0000001c 	andeq	r0, r0, ip, lsl r0
 7f4:	00000780 	andeq	r0, r0, r0, lsl #15
 7f8:	20001280 	andcs	r1, r0, r0, lsl #5
 7fc:	00000046 	andeq	r0, r0, r6, asr #32
 800:	40080e41 	andmi	r0, r8, r1, asr #28
 804:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 808:	180e4101 	stmdane	lr, {r0, r8, lr}
 80c:	00070d41 	andeq	r0, r7, r1, asr #26
 810:	0000001c 	andeq	r0, r0, ip, lsl r0
 814:	00000780 	andeq	r0, r0, r0, lsl #15
 818:	200012c6 	andcs	r1, r0, r6, asr #5
 81c:	00000042 	andeq	r0, r0, r2, asr #32
 820:	40080e41 	andmi	r0, r8, r1, asr #28
 824:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 828:	180e4101 	stmdane	lr, {r0, r8, lr}
 82c:	00070d41 	andeq	r0, r7, r1, asr #26
 830:	0000001c 	andeq	r0, r0, ip, lsl r0
 834:	00000780 	andeq	r0, r0, r0, lsl #15
 838:	20001308 	andcs	r1, r0, r8, lsl #6
 83c:	00000016 	andeq	r0, r0, r6, lsl r0
 840:	40080e41 	andmi	r0, r8, r1, asr #28
 844:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 848:	100e4101 	andne	r4, lr, r1, lsl #2
 84c:	00070d41 	andeq	r0, r7, r1, asr #26
 850:	0000001c 	andeq	r0, r0, ip, lsl r0
 854:	00000780 	andeq	r0, r0, r0, lsl #15
 858:	2000131e 	andcs	r1, r0, lr, lsl r3
 85c:	00000042 	andeq	r0, r0, r2, asr #32
 860:	40080e41 	andmi	r0, r8, r1, asr #28
 864:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 868:	180e4101 	stmdane	lr, {r0, r8, lr}
 86c:	00070d41 	andeq	r0, r7, r1, asr #26
 870:	0000001c 	andeq	r0, r0, ip, lsl r0
 874:	00000780 	andeq	r0, r0, r0, lsl #15
 878:	20001360 	andcs	r1, r0, r0, ror #6
 87c:	00000016 	andeq	r0, r0, r6, lsl r0
 880:	40080e41 	andmi	r0, r8, r1, asr #28
 884:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 888:	100e4101 	andne	r4, lr, r1, lsl #2
 88c:	00070d41 	andeq	r0, r7, r1, asr #26
 890:	0000001c 	andeq	r0, r0, ip, lsl r0
 894:	00000780 	andeq	r0, r0, r0, lsl #15
 898:	20001376 	andcs	r1, r0, r6, ror r3
 89c:	0000001e 	andeq	r0, r0, lr, lsl r0
 8a0:	40080e41 	andmi	r0, r8, r1, asr #28
 8a4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 8a8:	100e4101 	andne	r4, lr, r1, lsl #2
 8ac:	00070d41 	andeq	r0, r7, r1, asr #26
 8b0:	0000001c 	andeq	r0, r0, ip, lsl r0
 8b4:	00000780 	andeq	r0, r0, r0, lsl #15
 8b8:	20001394 	mulcs	r0, r4, r3
 8bc:	0000001e 	andeq	r0, r0, lr, lsl r0
 8c0:	40080e41 	andmi	r0, r8, r1, asr #28
 8c4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 8c8:	100e4101 	andne	r4, lr, r1, lsl #2
 8cc:	00070d41 	andeq	r0, r7, r1, asr #26
 8d0:	0000001c 	andeq	r0, r0, ip, lsl r0
 8d4:	00000780 	andeq	r0, r0, r0, lsl #15
 8d8:	200013b2 			; <UNDEFINED> instruction: 0x200013b2
 8dc:	0000003a 	andeq	r0, r0, sl, lsr r0
 8e0:	40080e41 	andmi	r0, r8, r1, asr #28
 8e4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 8e8:	100e4101 	andne	r4, lr, r1, lsl #2
 8ec:	00070d41 	andeq	r0, r7, r1, asr #26
 8f0:	0000001c 	andeq	r0, r0, ip, lsl r0
 8f4:	00000780 	andeq	r0, r0, r0, lsl #15
 8f8:	200013ec 	andcs	r1, r0, ip, ror #7
 8fc:	0000001e 	andeq	r0, r0, lr, lsl r0
 900:	40080e41 	andmi	r0, r8, r1, asr #28
 904:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 908:	100e4101 	andne	r4, lr, r1, lsl #2
 90c:	00070d41 	andeq	r0, r7, r1, asr #26
 910:	0000001c 	andeq	r0, r0, ip, lsl r0
 914:	00000780 	andeq	r0, r0, r0, lsl #15
 918:	2000140a 	andcs	r1, r0, sl, lsl #8
 91c:	00000024 	andeq	r0, r0, r4, lsr #32
 920:	40080e41 	andmi	r0, r8, r1, asr #28
 924:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 928:	100e4101 	andne	r4, lr, r1, lsl #2
 92c:	00070d41 	andeq	r0, r7, r1, asr #26
 930:	0000001c 	andeq	r0, r0, ip, lsl r0
 934:	00000780 	andeq	r0, r0, r0, lsl #15
 938:	2000142e 	andcs	r1, r0, lr, lsr #8
 93c:	000000a4 	andeq	r0, r0, r4, lsr #1
 940:	40080e41 	andmi	r0, r8, r1, asr #28
 944:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 948:	180e4101 	stmdane	lr, {r0, r8, lr}
 94c:	00070d41 	andeq	r0, r7, r1, asr #26
 950:	0000000c 	andeq	r0, r0, ip
 954:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 958:	7c010001 	stcvc	0, cr0, [r1], {1}
 95c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 960:	0000000c 	andeq	r0, r0, ip
 964:	00000950 	andeq	r0, r0, r0, asr r9
 968:	200014d5 	ldrdcs	r1, [r0], -r5
 96c:	0000010a 	andeq	r0, r0, sl, lsl #2
