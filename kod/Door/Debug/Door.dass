
./Debug/Door.elf:     file format elf32-littlearm


Disassembly of section .text:

20000000 <startup>:

void startup(void) __attribute__((naked)) __attribute__((section(".start_section")));

void startup(void)
{
	__asm volatile(
20000000:	4802      	ldr	r0, [pc, #8]	; (2000000c <_exit+0x4>)
20000002:	4685      	mov	sp, r0
20000004:	f001 fc9a 	bl	2000193c <main>

20000008 <_exit>:
20000008:	e7fe      	b.n	20000008 <_exit>
		" LDR R0,=0x2001C000\n" /* set stack */
		" MOV SP,R0\n"
		" BL main\n"   /* call main */
		"_exit: B .\n" /* never return */
	);
}
2000000a:	46c0      	nop			; (mov r8, r8)
2000000c:	2001c000 	andcs	ip, r1, r0

20000010 <USART_DeInit>:
  * @param  USARTx: where x can be 1, 2, 3, 4, 5, 6, 7 or 8 to select the USART or 
  *         UART peripheral.
  * @retval None
  */
void USART_DeInit(USART_TypeDef* USARTx)
{
20000010:	b580      	push	{r7, lr}
20000012:	b082      	sub	sp, #8
20000014:	af00      	add	r7, sp, #0
20000016:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  if (USARTx == USART1)
20000018:	687b      	ldr	r3, [r7, #4]
2000001a:	4a41      	ldr	r2, [pc, #260]	; (20000120 <USART_DeInit+0x110>)
2000001c:	4293      	cmp	r3, r2
2000001e:	d108      	bne.n	20000032 <USART_DeInit+0x22>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, ENABLE);
20000020:	2101      	movs	r1, #1
20000022:	2010      	movs	r0, #16
20000024:	f001 faac 	bl	20001580 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, DISABLE);
20000028:	2100      	movs	r1, #0
2000002a:	2010      	movs	r0, #16
2000002c:	f001 faa8 	bl	20001580 <RCC_APB2PeriphResetCmd>
    { 
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART8, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART8, DISABLE);
    }
  }
}
20000030:	e071      	b.n	20000116 <USART_DeInit+0x106>
  else if (USARTx == USART2)
20000032:	687b      	ldr	r3, [r7, #4]
20000034:	4a3b      	ldr	r2, [pc, #236]	; (20000124 <USART_DeInit+0x114>)
20000036:	4293      	cmp	r3, r2
20000038:	d10c      	bne.n	20000054 <USART_DeInit+0x44>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, ENABLE);
2000003a:	2380      	movs	r3, #128	; 0x80
2000003c:	029b      	lsls	r3, r3, #10
2000003e:	2101      	movs	r1, #1
20000040:	0018      	movs	r0, r3
20000042:	f001 fa7d 	bl	20001540 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, DISABLE);
20000046:	2380      	movs	r3, #128	; 0x80
20000048:	029b      	lsls	r3, r3, #10
2000004a:	2100      	movs	r1, #0
2000004c:	0018      	movs	r0, r3
2000004e:	f001 fa77 	bl	20001540 <RCC_APB1PeriphResetCmd>
}
20000052:	e060      	b.n	20000116 <USART_DeInit+0x106>
  else if (USARTx == USART3)
20000054:	687b      	ldr	r3, [r7, #4]
20000056:	4a34      	ldr	r2, [pc, #208]	; (20000128 <USART_DeInit+0x118>)
20000058:	4293      	cmp	r3, r2
2000005a:	d10c      	bne.n	20000076 <USART_DeInit+0x66>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, ENABLE);
2000005c:	2380      	movs	r3, #128	; 0x80
2000005e:	02db      	lsls	r3, r3, #11
20000060:	2101      	movs	r1, #1
20000062:	0018      	movs	r0, r3
20000064:	f001 fa6c 	bl	20001540 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, DISABLE);
20000068:	2380      	movs	r3, #128	; 0x80
2000006a:	02db      	lsls	r3, r3, #11
2000006c:	2100      	movs	r1, #0
2000006e:	0018      	movs	r0, r3
20000070:	f001 fa66 	bl	20001540 <RCC_APB1PeriphResetCmd>
}
20000074:	e04f      	b.n	20000116 <USART_DeInit+0x106>
  else if (USARTx == UART4)
20000076:	687b      	ldr	r3, [r7, #4]
20000078:	4a2c      	ldr	r2, [pc, #176]	; (2000012c <USART_DeInit+0x11c>)
2000007a:	4293      	cmp	r3, r2
2000007c:	d10c      	bne.n	20000098 <USART_DeInit+0x88>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, ENABLE);
2000007e:	2380      	movs	r3, #128	; 0x80
20000080:	031b      	lsls	r3, r3, #12
20000082:	2101      	movs	r1, #1
20000084:	0018      	movs	r0, r3
20000086:	f001 fa5b 	bl	20001540 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, DISABLE);
2000008a:	2380      	movs	r3, #128	; 0x80
2000008c:	031b      	lsls	r3, r3, #12
2000008e:	2100      	movs	r1, #0
20000090:	0018      	movs	r0, r3
20000092:	f001 fa55 	bl	20001540 <RCC_APB1PeriphResetCmd>
}
20000096:	e03e      	b.n	20000116 <USART_DeInit+0x106>
  else if (USARTx == UART5)
20000098:	687b      	ldr	r3, [r7, #4]
2000009a:	4a25      	ldr	r2, [pc, #148]	; (20000130 <USART_DeInit+0x120>)
2000009c:	4293      	cmp	r3, r2
2000009e:	d10c      	bne.n	200000ba <USART_DeInit+0xaa>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, ENABLE);
200000a0:	2380      	movs	r3, #128	; 0x80
200000a2:	035b      	lsls	r3, r3, #13
200000a4:	2101      	movs	r1, #1
200000a6:	0018      	movs	r0, r3
200000a8:	f001 fa4a 	bl	20001540 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, DISABLE);
200000ac:	2380      	movs	r3, #128	; 0x80
200000ae:	035b      	lsls	r3, r3, #13
200000b0:	2100      	movs	r1, #0
200000b2:	0018      	movs	r0, r3
200000b4:	f001 fa44 	bl	20001540 <RCC_APB1PeriphResetCmd>
}
200000b8:	e02d      	b.n	20000116 <USART_DeInit+0x106>
  else if (USARTx == USART6)
200000ba:	687b      	ldr	r3, [r7, #4]
200000bc:	4a1d      	ldr	r2, [pc, #116]	; (20000134 <USART_DeInit+0x124>)
200000be:	4293      	cmp	r3, r2
200000c0:	d108      	bne.n	200000d4 <USART_DeInit+0xc4>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, ENABLE);
200000c2:	2101      	movs	r1, #1
200000c4:	2020      	movs	r0, #32
200000c6:	f001 fa5b 	bl	20001580 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, DISABLE);
200000ca:	2100      	movs	r1, #0
200000cc:	2020      	movs	r0, #32
200000ce:	f001 fa57 	bl	20001580 <RCC_APB2PeriphResetCmd>
}
200000d2:	e020      	b.n	20000116 <USART_DeInit+0x106>
  else if (USARTx == UART7)
200000d4:	687b      	ldr	r3, [r7, #4]
200000d6:	4a18      	ldr	r2, [pc, #96]	; (20000138 <USART_DeInit+0x128>)
200000d8:	4293      	cmp	r3, r2
200000da:	d10c      	bne.n	200000f6 <USART_DeInit+0xe6>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART7, ENABLE);
200000dc:	2380      	movs	r3, #128	; 0x80
200000de:	05db      	lsls	r3, r3, #23
200000e0:	2101      	movs	r1, #1
200000e2:	0018      	movs	r0, r3
200000e4:	f001 fa2c 	bl	20001540 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART7, DISABLE);
200000e8:	2380      	movs	r3, #128	; 0x80
200000ea:	05db      	lsls	r3, r3, #23
200000ec:	2100      	movs	r1, #0
200000ee:	0018      	movs	r0, r3
200000f0:	f001 fa26 	bl	20001540 <RCC_APB1PeriphResetCmd>
}
200000f4:	e00f      	b.n	20000116 <USART_DeInit+0x106>
    if (USARTx == UART8)
200000f6:	687b      	ldr	r3, [r7, #4]
200000f8:	4a10      	ldr	r2, [pc, #64]	; (2000013c <USART_DeInit+0x12c>)
200000fa:	4293      	cmp	r3, r2
200000fc:	d10b      	bne.n	20000116 <USART_DeInit+0x106>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART8, ENABLE);
200000fe:	2380      	movs	r3, #128	; 0x80
20000100:	061b      	lsls	r3, r3, #24
20000102:	2101      	movs	r1, #1
20000104:	0018      	movs	r0, r3
20000106:	f001 fa1b 	bl	20001540 <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART8, DISABLE);
2000010a:	2380      	movs	r3, #128	; 0x80
2000010c:	061b      	lsls	r3, r3, #24
2000010e:	2100      	movs	r1, #0
20000110:	0018      	movs	r0, r3
20000112:	f001 fa15 	bl	20001540 <RCC_APB1PeriphResetCmd>
}
20000116:	46c0      	nop			; (mov r8, r8)
20000118:	46bd      	mov	sp, r7
2000011a:	b002      	add	sp, #8
2000011c:	bd80      	pop	{r7, pc}
2000011e:	46c0      	nop			; (mov r8, r8)
20000120:	40011000 	andmi	r1, r1, r0
20000124:	40004400 	andmi	r4, r0, r0, lsl #8
20000128:	40004800 	andmi	r4, r0, r0, lsl #16
2000012c:	40004c00 	andmi	r4, r0, r0, lsl #24
20000130:	40005000 	andmi	r5, r0, r0
20000134:	40011400 	andmi	r1, r1, r0, lsl #8
20000138:	40007800 	andmi	r7, r0, r0, lsl #16
2000013c:	40007c00 	andmi	r7, r0, r0, lsl #24

20000140 <USART_Init>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
20000140:	b580      	push	{r7, lr}
20000142:	b08a      	sub	sp, #40	; 0x28
20000144:	af00      	add	r7, sp, #0
20000146:	6078      	str	r0, [r7, #4]
20000148:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00, apbclock = 0x00;
2000014a:	2300      	movs	r3, #0
2000014c:	627b      	str	r3, [r7, #36]	; 0x24
2000014e:	2300      	movs	r3, #0
20000150:	623b      	str	r3, [r7, #32]
  uint32_t integerdivider = 0x00;
20000152:	2300      	movs	r3, #0
20000154:	61fb      	str	r3, [r7, #28]
  uint32_t fractionaldivider = 0x00;
20000156:	2300      	movs	r3, #0
20000158:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  }

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
2000015a:	687b      	ldr	r3, [r7, #4]
2000015c:	8a1b      	ldrh	r3, [r3, #16]
2000015e:	b29b      	uxth	r3, r3
20000160:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
20000162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20000164:	4a56      	ldr	r2, [pc, #344]	; (200002c0 <USART_Init+0x180>)
20000166:	4013      	ands	r3, r2
20000168:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit :
      Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
2000016a:	683b      	ldr	r3, [r7, #0]
2000016c:	88db      	ldrh	r3, [r3, #6]
2000016e:	001a      	movs	r2, r3
20000170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20000172:	4313      	orrs	r3, r2
20000174:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
20000176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20000178:	b29a      	uxth	r2, r3
2000017a:	687b      	ldr	r3, [r7, #4]
2000017c:	821a      	strh	r2, [r3, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
2000017e:	687b      	ldr	r3, [r7, #4]
20000180:	899b      	ldrh	r3, [r3, #12]
20000182:	b29b      	uxth	r3, r3
20000184:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
20000186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20000188:	4a4e      	ldr	r2, [pc, #312]	; (200002c4 <USART_Init+0x184>)
2000018a:	4013      	ands	r3, r2
2000018c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
2000018e:	683b      	ldr	r3, [r7, #0]
20000190:	889a      	ldrh	r2, [r3, #4]
20000192:	683b      	ldr	r3, [r7, #0]
20000194:	891b      	ldrh	r3, [r3, #8]
20000196:	4313      	orrs	r3, r2
20000198:	b29a      	uxth	r2, r3
            USART_InitStruct->USART_Mode;
2000019a:	683b      	ldr	r3, [r7, #0]
2000019c:	895b      	ldrh	r3, [r3, #10]
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
2000019e:	4313      	orrs	r3, r2
200001a0:	b29b      	uxth	r3, r3
200001a2:	001a      	movs	r2, r3
200001a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
200001a6:	4313      	orrs	r3, r2
200001a8:	627b      	str	r3, [r7, #36]	; 0x24

  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
200001aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
200001ac:	b29a      	uxth	r2, r3
200001ae:	687b      	ldr	r3, [r7, #4]
200001b0:	819a      	strh	r2, [r3, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
200001b2:	687b      	ldr	r3, [r7, #4]
200001b4:	8a9b      	ldrh	r3, [r3, #20]
200001b6:	b29b      	uxth	r3, r3
200001b8:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);
200001ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
200001bc:	4a42      	ldr	r2, [pc, #264]	; (200002c8 <USART_Init+0x188>)
200001be:	4013      	ands	r3, r2
200001c0:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART HFC : 
      Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
200001c2:	683b      	ldr	r3, [r7, #0]
200001c4:	899b      	ldrh	r3, [r3, #12]
200001c6:	001a      	movs	r2, r3
200001c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
200001ca:	4313      	orrs	r3, r2
200001cc:	627b      	str	r3, [r7, #36]	; 0x24

  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
200001ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
200001d0:	b29a      	uxth	r2, r3
200001d2:	687b      	ldr	r3, [r7, #4]
200001d4:	829a      	strh	r2, [r3, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate */
  RCC_GetClocksFreq(&RCC_ClocksStatus);
200001d6:	2308      	movs	r3, #8
200001d8:	18fb      	adds	r3, r7, r3
200001da:	0018      	movs	r0, r3
200001dc:	f000 ff00 	bl	20000fe0 <RCC_GetClocksFreq>

  if ((USARTx == USART1) || (USARTx == USART6))
200001e0:	687b      	ldr	r3, [r7, #4]
200001e2:	4a3a      	ldr	r2, [pc, #232]	; (200002cc <USART_Init+0x18c>)
200001e4:	4293      	cmp	r3, r2
200001e6:	d003      	beq.n	200001f0 <USART_Init+0xb0>
200001e8:	687b      	ldr	r3, [r7, #4]
200001ea:	4a39      	ldr	r2, [pc, #228]	; (200002d0 <USART_Init+0x190>)
200001ec:	4293      	cmp	r3, r2
200001ee:	d104      	bne.n	200001fa <USART_Init+0xba>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
200001f0:	2308      	movs	r3, #8
200001f2:	18fb      	adds	r3, r7, r3
200001f4:	68db      	ldr	r3, [r3, #12]
200001f6:	623b      	str	r3, [r7, #32]
200001f8:	e003      	b.n	20000202 <USART_Init+0xc2>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
200001fa:	2308      	movs	r3, #8
200001fc:	18fb      	adds	r3, r7, r3
200001fe:	689b      	ldr	r3, [r3, #8]
20000200:	623b      	str	r3, [r7, #32]
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
20000202:	687b      	ldr	r3, [r7, #4]
20000204:	899b      	ldrh	r3, [r3, #12]
20000206:	b29b      	uxth	r3, r3
20000208:	b21b      	sxth	r3, r3
2000020a:	2b00      	cmp	r3, #0
2000020c:	da0f      	bge.n	2000022e <USART_Init+0xee>
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
2000020e:	6a3a      	ldr	r2, [r7, #32]
20000210:	0013      	movs	r3, r2
20000212:	009b      	lsls	r3, r3, #2
20000214:	189b      	adds	r3, r3, r2
20000216:	009a      	lsls	r2, r3, #2
20000218:	189a      	adds	r2, r3, r2
2000021a:	683b      	ldr	r3, [r7, #0]
2000021c:	681b      	ldr	r3, [r3, #0]
2000021e:	005b      	lsls	r3, r3, #1
20000220:	0019      	movs	r1, r3
20000222:	0010      	movs	r0, r2
20000224:	f002 f9c6 	bl	200025b4 <__udivsi3>
20000228:	0003      	movs	r3, r0
2000022a:	61fb      	str	r3, [r7, #28]
2000022c:	e00e      	b.n	2000024c <USART_Init+0x10c>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
2000022e:	6a3a      	ldr	r2, [r7, #32]
20000230:	0013      	movs	r3, r2
20000232:	009b      	lsls	r3, r3, #2
20000234:	189b      	adds	r3, r3, r2
20000236:	009a      	lsls	r2, r3, #2
20000238:	189a      	adds	r2, r3, r2
2000023a:	683b      	ldr	r3, [r7, #0]
2000023c:	681b      	ldr	r3, [r3, #0]
2000023e:	009b      	lsls	r3, r3, #2
20000240:	0019      	movs	r1, r3
20000242:	0010      	movs	r0, r2
20000244:	f002 f9b6 	bl	200025b4 <__udivsi3>
20000248:	0003      	movs	r3, r0
2000024a:	61fb      	str	r3, [r7, #28]
  }
  tmpreg = (integerdivider / 100) << 4;
2000024c:	69fb      	ldr	r3, [r7, #28]
2000024e:	2164      	movs	r1, #100	; 0x64
20000250:	0018      	movs	r0, r3
20000252:	f002 f9af 	bl	200025b4 <__udivsi3>
20000256:	0003      	movs	r3, r0
20000258:	011b      	lsls	r3, r3, #4
2000025a:	627b      	str	r3, [r7, #36]	; 0x24

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
2000025c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
2000025e:	091b      	lsrs	r3, r3, #4
20000260:	2264      	movs	r2, #100	; 0x64
20000262:	4353      	muls	r3, r2
20000264:	69fa      	ldr	r2, [r7, #28]
20000266:	1ad3      	subs	r3, r2, r3
20000268:	61bb      	str	r3, [r7, #24]

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
2000026a:	687b      	ldr	r3, [r7, #4]
2000026c:	899b      	ldrh	r3, [r3, #12]
2000026e:	b29b      	uxth	r3, r3
20000270:	b21b      	sxth	r3, r3
20000272:	2b00      	cmp	r3, #0
20000274:	da0e      	bge.n	20000294 <USART_Init+0x154>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
20000276:	69bb      	ldr	r3, [r7, #24]
20000278:	00db      	lsls	r3, r3, #3
2000027a:	3332      	adds	r3, #50	; 0x32
2000027c:	2164      	movs	r1, #100	; 0x64
2000027e:	0018      	movs	r0, r3
20000280:	f002 f998 	bl	200025b4 <__udivsi3>
20000284:	0003      	movs	r3, r0
20000286:	001a      	movs	r2, r3
20000288:	2307      	movs	r3, #7
2000028a:	4013      	ands	r3, r2
2000028c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
2000028e:	4313      	orrs	r3, r2
20000290:	627b      	str	r3, [r7, #36]	; 0x24
20000292:	e00d      	b.n	200002b0 <USART_Init+0x170>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
20000294:	69bb      	ldr	r3, [r7, #24]
20000296:	011b      	lsls	r3, r3, #4
20000298:	3332      	adds	r3, #50	; 0x32
2000029a:	2164      	movs	r1, #100	; 0x64
2000029c:	0018      	movs	r0, r3
2000029e:	f002 f989 	bl	200025b4 <__udivsi3>
200002a2:	0003      	movs	r3, r0
200002a4:	001a      	movs	r2, r3
200002a6:	230f      	movs	r3, #15
200002a8:	4013      	ands	r3, r2
200002aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
200002ac:	4313      	orrs	r3, r2
200002ae:	627b      	str	r3, [r7, #36]	; 0x24
  }
  
  /* Write to USART BRR register */
  USARTx->BRR = (uint16_t)tmpreg;
200002b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
200002b2:	b29a      	uxth	r2, r3
200002b4:	687b      	ldr	r3, [r7, #4]
200002b6:	811a      	strh	r2, [r3, #8]
}
200002b8:	46c0      	nop			; (mov r8, r8)
200002ba:	46bd      	mov	sp, r7
200002bc:	b00a      	add	sp, #40	; 0x28
200002be:	bd80      	pop	{r7, pc}
200002c0:	ffffcfff 			; <UNDEFINED> instruction: 0xffffcfff
200002c4:	ffffe9f3 			; <UNDEFINED> instruction: 0xffffe9f3
200002c8:	fffffcff 			; <UNDEFINED> instruction: 0xfffffcff
200002cc:	40011000 	andmi	r1, r1, r0
200002d0:	40011400 	andmi	r1, r1, r0, lsl #8

200002d4 <USART_StructInit>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void USART_StructInit(USART_InitTypeDef* USART_InitStruct)
{
200002d4:	b580      	push	{r7, lr}
200002d6:	b082      	sub	sp, #8
200002d8:	af00      	add	r7, sp, #0
200002da:	6078      	str	r0, [r7, #4]
  /* USART_InitStruct members default value */
  USART_InitStruct->USART_BaudRate = 9600;
200002dc:	687b      	ldr	r3, [r7, #4]
200002de:	2296      	movs	r2, #150	; 0x96
200002e0:	0192      	lsls	r2, r2, #6
200002e2:	601a      	str	r2, [r3, #0]
  USART_InitStruct->USART_WordLength = USART_WordLength_8b;
200002e4:	687b      	ldr	r3, [r7, #4]
200002e6:	2200      	movs	r2, #0
200002e8:	809a      	strh	r2, [r3, #4]
  USART_InitStruct->USART_StopBits = USART_StopBits_1;
200002ea:	687b      	ldr	r3, [r7, #4]
200002ec:	2200      	movs	r2, #0
200002ee:	80da      	strh	r2, [r3, #6]
  USART_InitStruct->USART_Parity = USART_Parity_No ;
200002f0:	687b      	ldr	r3, [r7, #4]
200002f2:	2200      	movs	r2, #0
200002f4:	811a      	strh	r2, [r3, #8]
  USART_InitStruct->USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
200002f6:	687b      	ldr	r3, [r7, #4]
200002f8:	220c      	movs	r2, #12
200002fa:	815a      	strh	r2, [r3, #10]
  USART_InitStruct->USART_HardwareFlowControl = USART_HardwareFlowControl_None;  
200002fc:	687b      	ldr	r3, [r7, #4]
200002fe:	2200      	movs	r2, #0
20000300:	819a      	strh	r2, [r3, #12]
}
20000302:	46c0      	nop			; (mov r8, r8)
20000304:	46bd      	mov	sp, r7
20000306:	b002      	add	sp, #8
20000308:	bd80      	pop	{r7, pc}

2000030a <USART_ClockInit>:
  *         contains the configuration information for the specified  USART peripheral.
  * @note   The Smart Card and Synchronous modes are not available for UART4 and UART5.    
  * @retval None
  */
void USART_ClockInit(USART_TypeDef* USARTx, USART_ClockInitTypeDef* USART_ClockInitStruct)
{
2000030a:	b580      	push	{r7, lr}
2000030c:	b084      	sub	sp, #16
2000030e:	af00      	add	r7, sp, #0
20000310:	6078      	str	r0, [r7, #4]
20000312:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00;
20000314:	2300      	movs	r3, #0
20000316:	60fb      	str	r3, [r7, #12]
  assert_param(IS_USART_CPOL(USART_ClockInitStruct->USART_CPOL));
  assert_param(IS_USART_CPHA(USART_ClockInitStruct->USART_CPHA));
  assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));
  
/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
20000318:	687b      	ldr	r3, [r7, #4]
2000031a:	8a1b      	ldrh	r3, [r3, #16]
2000031c:	b29b      	uxth	r3, r3
2000031e:	60fb      	str	r3, [r7, #12]
  /* Clear CLKEN, CPOL, CPHA and LBCL bits */
  tmpreg &= (uint32_t)~((uint32_t)CR2_CLOCK_CLEAR_MASK);
20000320:	68fb      	ldr	r3, [r7, #12]
20000322:	4a0e      	ldr	r2, [pc, #56]	; (2000035c <USART_ClockInit+0x52>)
20000324:	4013      	ands	r3, r2
20000326:	60fb      	str	r3, [r7, #12]
  /* Configure the USART Clock, CPOL, CPHA and LastBit ------------*/
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
20000328:	683b      	ldr	r3, [r7, #0]
2000032a:	881a      	ldrh	r2, [r3, #0]
2000032c:	683b      	ldr	r3, [r7, #0]
2000032e:	885b      	ldrh	r3, [r3, #2]
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
20000330:	4313      	orrs	r3, r2
20000332:	b29a      	uxth	r2, r3
20000334:	683b      	ldr	r3, [r7, #0]
20000336:	889b      	ldrh	r3, [r3, #4]
20000338:	4313      	orrs	r3, r2
2000033a:	b29a      	uxth	r2, r3
2000033c:	683b      	ldr	r3, [r7, #0]
2000033e:	88db      	ldrh	r3, [r3, #6]
20000340:	4313      	orrs	r3, r2
20000342:	b29b      	uxth	r3, r3
20000344:	001a      	movs	r2, r3
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
20000346:	68fb      	ldr	r3, [r7, #12]
20000348:	4313      	orrs	r3, r2
2000034a:	60fb      	str	r3, [r7, #12]
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
2000034c:	68fb      	ldr	r3, [r7, #12]
2000034e:	b29a      	uxth	r2, r3
20000350:	687b      	ldr	r3, [r7, #4]
20000352:	821a      	strh	r2, [r3, #16]
}
20000354:	46c0      	nop			; (mov r8, r8)
20000356:	46bd      	mov	sp, r7
20000358:	b004      	add	sp, #16
2000035a:	bd80      	pop	{r7, pc}
2000035c:	fffff0ff 			; <UNDEFINED> instruction: 0xfffff0ff

20000360 <USART_ClockStructInit>:
  * @param  USART_ClockInitStruct: pointer to a USART_ClockInitTypeDef structure
  *         which will be initialized.
  * @retval None
  */
void USART_ClockStructInit(USART_ClockInitTypeDef* USART_ClockInitStruct)
{
20000360:	b580      	push	{r7, lr}
20000362:	b082      	sub	sp, #8
20000364:	af00      	add	r7, sp, #0
20000366:	6078      	str	r0, [r7, #4]
  /* USART_ClockInitStruct members default value */
  USART_ClockInitStruct->USART_Clock = USART_Clock_Disable;
20000368:	687b      	ldr	r3, [r7, #4]
2000036a:	2200      	movs	r2, #0
2000036c:	801a      	strh	r2, [r3, #0]
  USART_ClockInitStruct->USART_CPOL = USART_CPOL_Low;
2000036e:	687b      	ldr	r3, [r7, #4]
20000370:	2200      	movs	r2, #0
20000372:	805a      	strh	r2, [r3, #2]
  USART_ClockInitStruct->USART_CPHA = USART_CPHA_1Edge;
20000374:	687b      	ldr	r3, [r7, #4]
20000376:	2200      	movs	r2, #0
20000378:	809a      	strh	r2, [r3, #4]
  USART_ClockInitStruct->USART_LastBit = USART_LastBit_Disable;
2000037a:	687b      	ldr	r3, [r7, #4]
2000037c:	2200      	movs	r2, #0
2000037e:	80da      	strh	r2, [r3, #6]
}
20000380:	46c0      	nop			; (mov r8, r8)
20000382:	46bd      	mov	sp, r7
20000384:	b002      	add	sp, #8
20000386:	bd80      	pop	{r7, pc}

20000388 <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
20000388:	b580      	push	{r7, lr}
2000038a:	b082      	sub	sp, #8
2000038c:	af00      	add	r7, sp, #0
2000038e:	6078      	str	r0, [r7, #4]
20000390:	000a      	movs	r2, r1
20000392:	1cfb      	adds	r3, r7, #3
20000394:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
20000396:	1cfb      	adds	r3, r7, #3
20000398:	781b      	ldrb	r3, [r3, #0]
2000039a:	2b00      	cmp	r3, #0
2000039c:	d009      	beq.n	200003b2 <USART_Cmd+0x2a>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_UE;
2000039e:	687b      	ldr	r3, [r7, #4]
200003a0:	899b      	ldrh	r3, [r3, #12]
200003a2:	b29b      	uxth	r3, r3
200003a4:	2280      	movs	r2, #128	; 0x80
200003a6:	0192      	lsls	r2, r2, #6
200003a8:	4313      	orrs	r3, r2
200003aa:	b29a      	uxth	r2, r3
200003ac:	687b      	ldr	r3, [r7, #4]
200003ae:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
  }
}
200003b0:	e007      	b.n	200003c2 <USART_Cmd+0x3a>
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
200003b2:	687b      	ldr	r3, [r7, #4]
200003b4:	899b      	ldrh	r3, [r3, #12]
200003b6:	b29b      	uxth	r3, r3
200003b8:	4a04      	ldr	r2, [pc, #16]	; (200003cc <USART_Cmd+0x44>)
200003ba:	4013      	ands	r3, r2
200003bc:	b29a      	uxth	r2, r3
200003be:	687b      	ldr	r3, [r7, #4]
200003c0:	819a      	strh	r2, [r3, #12]
}
200003c2:	46c0      	nop			; (mov r8, r8)
200003c4:	46bd      	mov	sp, r7
200003c6:	b002      	add	sp, #8
200003c8:	bd80      	pop	{r7, pc}
200003ca:	46c0      	nop			; (mov r8, r8)
200003cc:	ffffdfff 			; <UNDEFINED> instruction: 0xffffdfff

200003d0 <USART_SetPrescaler>:
  * @param  USART_Prescaler: specifies the prescaler clock. 
  * @note   The function is used for IrDA mode with UART4 and UART5.   
  * @retval None
  */
void USART_SetPrescaler(USART_TypeDef* USARTx, uint8_t USART_Prescaler)
{ 
200003d0:	b580      	push	{r7, lr}
200003d2:	b082      	sub	sp, #8
200003d4:	af00      	add	r7, sp, #0
200003d6:	6078      	str	r0, [r7, #4]
200003d8:	000a      	movs	r2, r1
200003da:	1cfb      	adds	r3, r7, #3
200003dc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Clear the USART prescaler */
  USARTx->GTPR &= USART_GTPR_GT;
200003de:	687b      	ldr	r3, [r7, #4]
200003e0:	8b1b      	ldrh	r3, [r3, #24]
200003e2:	b29b      	uxth	r3, r3
200003e4:	22ff      	movs	r2, #255	; 0xff
200003e6:	4393      	bics	r3, r2
200003e8:	b29a      	uxth	r2, r3
200003ea:	687b      	ldr	r3, [r7, #4]
200003ec:	831a      	strh	r2, [r3, #24]
  /* Set the USART prescaler */
  USARTx->GTPR |= USART_Prescaler;
200003ee:	687b      	ldr	r3, [r7, #4]
200003f0:	8b1b      	ldrh	r3, [r3, #24]
200003f2:	b29a      	uxth	r2, r3
200003f4:	1cfb      	adds	r3, r7, #3
200003f6:	781b      	ldrb	r3, [r3, #0]
200003f8:	b29b      	uxth	r3, r3
200003fa:	4313      	orrs	r3, r2
200003fc:	b29a      	uxth	r2, r3
200003fe:	687b      	ldr	r3, [r7, #4]
20000400:	831a      	strh	r2, [r3, #24]
}
20000402:	46c0      	nop			; (mov r8, r8)
20000404:	46bd      	mov	sp, r7
20000406:	b002      	add	sp, #8
20000408:	bd80      	pop	{r7, pc}

2000040a <USART_OverSampling8Cmd>:
  * @param  NewState: new state of the USART 8x oversampling mode.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_OverSampling8Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
2000040a:	b580      	push	{r7, lr}
2000040c:	b082      	sub	sp, #8
2000040e:	af00      	add	r7, sp, #0
20000410:	6078      	str	r0, [r7, #4]
20000412:	000a      	movs	r2, r1
20000414:	1cfb      	adds	r3, r7, #3
20000416:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
20000418:	1cfb      	adds	r3, r7, #3
2000041a:	781b      	ldrb	r3, [r3, #0]
2000041c:	2b00      	cmp	r3, #0
2000041e:	d008      	beq.n	20000432 <USART_OverSampling8Cmd+0x28>
  {
    /* Enable the 8x Oversampling mode by setting the OVER8 bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_OVER8;
20000420:	687b      	ldr	r3, [r7, #4]
20000422:	899b      	ldrh	r3, [r3, #12]
20000424:	b29b      	uxth	r3, r3
20000426:	4a09      	ldr	r2, [pc, #36]	; (2000044c <USART_OverSampling8Cmd+0x42>)
20000428:	4313      	orrs	r3, r2
2000042a:	b29a      	uxth	r2, r3
2000042c:	687b      	ldr	r3, [r7, #4]
2000042e:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the 8x Oversampling mode by clearing the OVER8 bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_OVER8);
  }
}  
20000430:	e007      	b.n	20000442 <USART_OverSampling8Cmd+0x38>
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_OVER8);
20000432:	687b      	ldr	r3, [r7, #4]
20000434:	899b      	ldrh	r3, [r3, #12]
20000436:	b29b      	uxth	r3, r3
20000438:	045b      	lsls	r3, r3, #17
2000043a:	0c5b      	lsrs	r3, r3, #17
2000043c:	b29a      	uxth	r2, r3
2000043e:	687b      	ldr	r3, [r7, #4]
20000440:	819a      	strh	r2, [r3, #12]
}  
20000442:	46c0      	nop			; (mov r8, r8)
20000444:	46bd      	mov	sp, r7
20000446:	b002      	add	sp, #8
20000448:	bd80      	pop	{r7, pc}
2000044a:	46c0      	nop			; (mov r8, r8)
2000044c:	ffff8000 			; <UNDEFINED> instruction: 0xffff8000

20000450 <USART_OneBitMethodCmd>:
  * @param  NewState: new state of the USART one bit sampling method.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_OneBitMethodCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
20000450:	b580      	push	{r7, lr}
20000452:	b082      	sub	sp, #8
20000454:	af00      	add	r7, sp, #0
20000456:	6078      	str	r0, [r7, #4]
20000458:	000a      	movs	r2, r1
2000045a:	1cfb      	adds	r3, r7, #3
2000045c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
2000045e:	1cfb      	adds	r3, r7, #3
20000460:	781b      	ldrb	r3, [r3, #0]
20000462:	2b00      	cmp	r3, #0
20000464:	d009      	beq.n	2000047a <USART_OneBitMethodCmd+0x2a>
  {
    /* Enable the one bit method by setting the ONEBITE bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_ONEBIT;
20000466:	687b      	ldr	r3, [r7, #4]
20000468:	8a9b      	ldrh	r3, [r3, #20]
2000046a:	b29b      	uxth	r3, r3
2000046c:	2280      	movs	r2, #128	; 0x80
2000046e:	0112      	lsls	r2, r2, #4
20000470:	4313      	orrs	r3, r2
20000472:	b29a      	uxth	r2, r3
20000474:	687b      	ldr	r3, [r7, #4]
20000476:	829a      	strh	r2, [r3, #20]
  else
  {
    /* Disable the one bit method by clearing the ONEBITE bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_ONEBIT);
  }
}
20000478:	e007      	b.n	2000048a <USART_OneBitMethodCmd+0x3a>
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_ONEBIT);
2000047a:	687b      	ldr	r3, [r7, #4]
2000047c:	8a9b      	ldrh	r3, [r3, #20]
2000047e:	b29b      	uxth	r3, r3
20000480:	4a04      	ldr	r2, [pc, #16]	; (20000494 <USART_OneBitMethodCmd+0x44>)
20000482:	4013      	ands	r3, r2
20000484:	b29a      	uxth	r2, r3
20000486:	687b      	ldr	r3, [r7, #4]
20000488:	829a      	strh	r2, [r3, #20]
}
2000048a:	46c0      	nop			; (mov r8, r8)
2000048c:	46bd      	mov	sp, r7
2000048e:	b002      	add	sp, #8
20000490:	bd80      	pop	{r7, pc}
20000492:	46c0      	nop			; (mov r8, r8)
20000494:	fffff7ff 			; <UNDEFINED> instruction: 0xfffff7ff

20000498 <USART_SendData>:
  *         UART peripheral.
  * @param  Data: the data to transmit.
  * @retval None
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
20000498:	b580      	push	{r7, lr}
2000049a:	b082      	sub	sp, #8
2000049c:	af00      	add	r7, sp, #0
2000049e:	6078      	str	r0, [r7, #4]
200004a0:	000a      	movs	r2, r1
200004a2:	1cbb      	adds	r3, r7, #2
200004a4:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 
    
  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
200004a6:	1cbb      	adds	r3, r7, #2
200004a8:	881b      	ldrh	r3, [r3, #0]
200004aa:	05db      	lsls	r3, r3, #23
200004ac:	0ddb      	lsrs	r3, r3, #23
200004ae:	b29a      	uxth	r2, r3
200004b0:	687b      	ldr	r3, [r7, #4]
200004b2:	809a      	strh	r2, [r3, #4]
}
200004b4:	46c0      	nop			; (mov r8, r8)
200004b6:	46bd      	mov	sp, r7
200004b8:	b002      	add	sp, #8
200004ba:	bd80      	pop	{r7, pc}

200004bc <USART_ReceiveData>:
  * @param  USARTx: where x can be 1, 2, 3, 4, 5, 6, 7 or 8 to select the USART or 
  *         UART peripheral.
  * @retval The received data.
  */
uint16_t USART_ReceiveData(USART_TypeDef* USARTx)
{
200004bc:	b580      	push	{r7, lr}
200004be:	b082      	sub	sp, #8
200004c0:	af00      	add	r7, sp, #0
200004c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Receive Data */
  return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);
200004c4:	687b      	ldr	r3, [r7, #4]
200004c6:	889b      	ldrh	r3, [r3, #4]
200004c8:	b29b      	uxth	r3, r3
200004ca:	05db      	lsls	r3, r3, #23
200004cc:	0ddb      	lsrs	r3, r3, #23
200004ce:	b29b      	uxth	r3, r3
}
200004d0:	0018      	movs	r0, r3
200004d2:	46bd      	mov	sp, r7
200004d4:	b002      	add	sp, #8
200004d6:	bd80      	pop	{r7, pc}

200004d8 <USART_SetAddress>:
  *         UART peripheral.
  * @param  USART_Address: Indicates the address of the USART node.
  * @retval None
  */
void USART_SetAddress(USART_TypeDef* USARTx, uint8_t USART_Address)
{
200004d8:	b580      	push	{r7, lr}
200004da:	b082      	sub	sp, #8
200004dc:	af00      	add	r7, sp, #0
200004de:	6078      	str	r0, [r7, #4]
200004e0:	000a      	movs	r2, r1
200004e2:	1cfb      	adds	r3, r7, #3
200004e4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_ADDRESS(USART_Address)); 
    
  /* Clear the USART address */
  USARTx->CR2 &= (uint16_t)~((uint16_t)USART_CR2_ADD);
200004e6:	687b      	ldr	r3, [r7, #4]
200004e8:	8a1b      	ldrh	r3, [r3, #16]
200004ea:	b29b      	uxth	r3, r3
200004ec:	220f      	movs	r2, #15
200004ee:	4393      	bics	r3, r2
200004f0:	b29a      	uxth	r2, r3
200004f2:	687b      	ldr	r3, [r7, #4]
200004f4:	821a      	strh	r2, [r3, #16]
  /* Set the USART address node */
  USARTx->CR2 |= USART_Address;
200004f6:	687b      	ldr	r3, [r7, #4]
200004f8:	8a1b      	ldrh	r3, [r3, #16]
200004fa:	b29a      	uxth	r2, r3
200004fc:	1cfb      	adds	r3, r7, #3
200004fe:	781b      	ldrb	r3, [r3, #0]
20000500:	b29b      	uxth	r3, r3
20000502:	4313      	orrs	r3, r2
20000504:	b29a      	uxth	r2, r3
20000506:	687b      	ldr	r3, [r7, #4]
20000508:	821a      	strh	r2, [r3, #16]
}
2000050a:	46c0      	nop			; (mov r8, r8)
2000050c:	46bd      	mov	sp, r7
2000050e:	b002      	add	sp, #8
20000510:	bd80      	pop	{r7, pc}

20000512 <USART_ReceiverWakeUpCmd>:
  * @param  NewState: new state of the USART mute mode.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ReceiverWakeUpCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
20000512:	b580      	push	{r7, lr}
20000514:	b082      	sub	sp, #8
20000516:	af00      	add	r7, sp, #0
20000518:	6078      	str	r0, [r7, #4]
2000051a:	000a      	movs	r2, r1
2000051c:	1cfb      	adds	r3, r7, #3
2000051e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 
  
  if (NewState != DISABLE)
20000520:	1cfb      	adds	r3, r7, #3
20000522:	781b      	ldrb	r3, [r3, #0]
20000524:	2b00      	cmp	r3, #0
20000526:	d008      	beq.n	2000053a <USART_ReceiverWakeUpCmd+0x28>
  {
    /* Enable the USART mute mode  by setting the RWU bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_RWU;
20000528:	687b      	ldr	r3, [r7, #4]
2000052a:	899b      	ldrh	r3, [r3, #12]
2000052c:	b29b      	uxth	r3, r3
2000052e:	2202      	movs	r2, #2
20000530:	4313      	orrs	r3, r2
20000532:	b29a      	uxth	r2, r3
20000534:	687b      	ldr	r3, [r7, #4]
20000536:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the USART mute mode by clearing the RWU bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_RWU);
  }
}
20000538:	e007      	b.n	2000054a <USART_ReceiverWakeUpCmd+0x38>
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_RWU);
2000053a:	687b      	ldr	r3, [r7, #4]
2000053c:	899b      	ldrh	r3, [r3, #12]
2000053e:	b29b      	uxth	r3, r3
20000540:	2202      	movs	r2, #2
20000542:	4393      	bics	r3, r2
20000544:	b29a      	uxth	r2, r3
20000546:	687b      	ldr	r3, [r7, #4]
20000548:	819a      	strh	r2, [r3, #12]
}
2000054a:	46c0      	nop			; (mov r8, r8)
2000054c:	46bd      	mov	sp, r7
2000054e:	b002      	add	sp, #8
20000550:	bd80      	pop	{r7, pc}

20000552 <USART_WakeUpConfig>:
  *            @arg USART_WakeUp_IdleLine: WakeUp by an idle line detection
  *            @arg USART_WakeUp_AddressMark: WakeUp by an address mark
  * @retval None
  */
void USART_WakeUpConfig(USART_TypeDef* USARTx, uint16_t USART_WakeUp)
{
20000552:	b580      	push	{r7, lr}
20000554:	b082      	sub	sp, #8
20000556:	af00      	add	r7, sp, #0
20000558:	6078      	str	r0, [r7, #4]
2000055a:	000a      	movs	r2, r1
2000055c:	1cbb      	adds	r3, r7, #2
2000055e:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_WAKEUP(USART_WakeUp));
  
  USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_WAKE);
20000560:	687b      	ldr	r3, [r7, #4]
20000562:	899b      	ldrh	r3, [r3, #12]
20000564:	b29b      	uxth	r3, r3
20000566:	4a09      	ldr	r2, [pc, #36]	; (2000058c <USART_WakeUpConfig+0x3a>)
20000568:	4013      	ands	r3, r2
2000056a:	b29a      	uxth	r2, r3
2000056c:	687b      	ldr	r3, [r7, #4]
2000056e:	819a      	strh	r2, [r3, #12]
  USARTx->CR1 |= USART_WakeUp;
20000570:	687b      	ldr	r3, [r7, #4]
20000572:	899b      	ldrh	r3, [r3, #12]
20000574:	b29a      	uxth	r2, r3
20000576:	1cbb      	adds	r3, r7, #2
20000578:	881b      	ldrh	r3, [r3, #0]
2000057a:	4313      	orrs	r3, r2
2000057c:	b29a      	uxth	r2, r3
2000057e:	687b      	ldr	r3, [r7, #4]
20000580:	819a      	strh	r2, [r3, #12]
}
20000582:	46c0      	nop			; (mov r8, r8)
20000584:	46bd      	mov	sp, r7
20000586:	b002      	add	sp, #8
20000588:	bd80      	pop	{r7, pc}
2000058a:	46c0      	nop			; (mov r8, r8)
2000058c:	fffff7ff 			; <UNDEFINED> instruction: 0xfffff7ff

20000590 <USART_LINBreakDetectLengthConfig>:
  *            @arg USART_LINBreakDetectLength_10b: 10-bit break detection
  *            @arg USART_LINBreakDetectLength_11b: 11-bit break detection
  * @retval None
  */
void USART_LINBreakDetectLengthConfig(USART_TypeDef* USARTx, uint16_t USART_LINBreakDetectLength)
{
20000590:	b580      	push	{r7, lr}
20000592:	b082      	sub	sp, #8
20000594:	af00      	add	r7, sp, #0
20000596:	6078      	str	r0, [r7, #4]
20000598:	000a      	movs	r2, r1
2000059a:	1cbb      	adds	r3, r7, #2
2000059c:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_LIN_BREAK_DETECT_LENGTH(USART_LINBreakDetectLength));
  
  USARTx->CR2 &= (uint16_t)~((uint16_t)USART_CR2_LBDL);
2000059e:	687b      	ldr	r3, [r7, #4]
200005a0:	8a1b      	ldrh	r3, [r3, #16]
200005a2:	b29b      	uxth	r3, r3
200005a4:	2220      	movs	r2, #32
200005a6:	4393      	bics	r3, r2
200005a8:	b29a      	uxth	r2, r3
200005aa:	687b      	ldr	r3, [r7, #4]
200005ac:	821a      	strh	r2, [r3, #16]
  USARTx->CR2 |= USART_LINBreakDetectLength;  
200005ae:	687b      	ldr	r3, [r7, #4]
200005b0:	8a1b      	ldrh	r3, [r3, #16]
200005b2:	b29a      	uxth	r2, r3
200005b4:	1cbb      	adds	r3, r7, #2
200005b6:	881b      	ldrh	r3, [r3, #0]
200005b8:	4313      	orrs	r3, r2
200005ba:	b29a      	uxth	r2, r3
200005bc:	687b      	ldr	r3, [r7, #4]
200005be:	821a      	strh	r2, [r3, #16]
}
200005c0:	46c0      	nop			; (mov r8, r8)
200005c2:	46bd      	mov	sp, r7
200005c4:	b002      	add	sp, #8
200005c6:	bd80      	pop	{r7, pc}

200005c8 <USART_LINCmd>:
  * @param  NewState: new state of the USART LIN mode.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_LINCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
200005c8:	b580      	push	{r7, lr}
200005ca:	b082      	sub	sp, #8
200005cc:	af00      	add	r7, sp, #0
200005ce:	6078      	str	r0, [r7, #4]
200005d0:	000a      	movs	r2, r1
200005d2:	1cfb      	adds	r3, r7, #3
200005d4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
200005d6:	1cfb      	adds	r3, r7, #3
200005d8:	781b      	ldrb	r3, [r3, #0]
200005da:	2b00      	cmp	r3, #0
200005dc:	d009      	beq.n	200005f2 <USART_LINCmd+0x2a>
  {
    /* Enable the LIN mode by setting the LINEN bit in the CR2 register */
    USARTx->CR2 |= USART_CR2_LINEN;
200005de:	687b      	ldr	r3, [r7, #4]
200005e0:	8a1b      	ldrh	r3, [r3, #16]
200005e2:	b29b      	uxth	r3, r3
200005e4:	2280      	movs	r2, #128	; 0x80
200005e6:	01d2      	lsls	r2, r2, #7
200005e8:	4313      	orrs	r3, r2
200005ea:	b29a      	uxth	r2, r3
200005ec:	687b      	ldr	r3, [r7, #4]
200005ee:	821a      	strh	r2, [r3, #16]
  else
  {
    /* Disable the LIN mode by clearing the LINEN bit in the CR2 register */
    USARTx->CR2 &= (uint16_t)~((uint16_t)USART_CR2_LINEN);
  }
}
200005f0:	e007      	b.n	20000602 <USART_LINCmd+0x3a>
    USARTx->CR2 &= (uint16_t)~((uint16_t)USART_CR2_LINEN);
200005f2:	687b      	ldr	r3, [r7, #4]
200005f4:	8a1b      	ldrh	r3, [r3, #16]
200005f6:	b29b      	uxth	r3, r3
200005f8:	4a04      	ldr	r2, [pc, #16]	; (2000060c <USART_LINCmd+0x44>)
200005fa:	4013      	ands	r3, r2
200005fc:	b29a      	uxth	r2, r3
200005fe:	687b      	ldr	r3, [r7, #4]
20000600:	821a      	strh	r2, [r3, #16]
}
20000602:	46c0      	nop			; (mov r8, r8)
20000604:	46bd      	mov	sp, r7
20000606:	b002      	add	sp, #8
20000608:	bd80      	pop	{r7, pc}
2000060a:	46c0      	nop			; (mov r8, r8)
2000060c:	ffffbfff 			; <UNDEFINED> instruction: 0xffffbfff

20000610 <USART_SendBreak>:
  * @param  USARTx: where x can be 1, 2, 3, 4, 5, 6, 7 or 8 to select the USART or 
  *         UART peripheral.
  * @retval None
  */
void USART_SendBreak(USART_TypeDef* USARTx)
{
20000610:	b580      	push	{r7, lr}
20000612:	b082      	sub	sp, #8
20000614:	af00      	add	r7, sp, #0
20000616:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Send break characters */
  USARTx->CR1 |= USART_CR1_SBK;
20000618:	687b      	ldr	r3, [r7, #4]
2000061a:	899b      	ldrh	r3, [r3, #12]
2000061c:	b29b      	uxth	r3, r3
2000061e:	2201      	movs	r2, #1
20000620:	4313      	orrs	r3, r2
20000622:	b29a      	uxth	r2, r3
20000624:	687b      	ldr	r3, [r7, #4]
20000626:	819a      	strh	r2, [r3, #12]
}
20000628:	46c0      	nop			; (mov r8, r8)
2000062a:	46bd      	mov	sp, r7
2000062c:	b002      	add	sp, #8
2000062e:	bd80      	pop	{r7, pc}

20000630 <USART_HalfDuplexCmd>:
  * @param  NewState: new state of the USART Communication.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_HalfDuplexCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
20000630:	b580      	push	{r7, lr}
20000632:	b082      	sub	sp, #8
20000634:	af00      	add	r7, sp, #0
20000636:	6078      	str	r0, [r7, #4]
20000638:	000a      	movs	r2, r1
2000063a:	1cfb      	adds	r3, r7, #3
2000063c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
2000063e:	1cfb      	adds	r3, r7, #3
20000640:	781b      	ldrb	r3, [r3, #0]
20000642:	2b00      	cmp	r3, #0
20000644:	d008      	beq.n	20000658 <USART_HalfDuplexCmd+0x28>
  {
    /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_HDSEL;
20000646:	687b      	ldr	r3, [r7, #4]
20000648:	8a9b      	ldrh	r3, [r3, #20]
2000064a:	b29b      	uxth	r3, r3
2000064c:	2208      	movs	r2, #8
2000064e:	4313      	orrs	r3, r2
20000650:	b29a      	uxth	r2, r3
20000652:	687b      	ldr	r3, [r7, #4]
20000654:	829a      	strh	r2, [r3, #20]
  else
  {
    /* Disable the Half-Duplex mode by clearing the HDSEL bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_HDSEL);
  }
}
20000656:	e007      	b.n	20000668 <USART_HalfDuplexCmd+0x38>
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_HDSEL);
20000658:	687b      	ldr	r3, [r7, #4]
2000065a:	8a9b      	ldrh	r3, [r3, #20]
2000065c:	b29b      	uxth	r3, r3
2000065e:	2208      	movs	r2, #8
20000660:	4393      	bics	r3, r2
20000662:	b29a      	uxth	r2, r3
20000664:	687b      	ldr	r3, [r7, #4]
20000666:	829a      	strh	r2, [r3, #20]
}
20000668:	46c0      	nop			; (mov r8, r8)
2000066a:	46bd      	mov	sp, r7
2000066c:	b002      	add	sp, #8
2000066e:	bd80      	pop	{r7, pc}

20000670 <USART_SetGuardTime>:
  *         UART peripheral.
  * @param  USART_GuardTime: specifies the guard time.   
  * @retval None
  */
void USART_SetGuardTime(USART_TypeDef* USARTx, uint8_t USART_GuardTime)
{    
20000670:	b580      	push	{r7, lr}
20000672:	b082      	sub	sp, #8
20000674:	af00      	add	r7, sp, #0
20000676:	6078      	str	r0, [r7, #4]
20000678:	000a      	movs	r2, r1
2000067a:	1cfb      	adds	r3, r7, #3
2000067c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_USART_1236_PERIPH(USARTx));
  
  /* Clear the USART Guard time */
  USARTx->GTPR &= USART_GTPR_PSC;
2000067e:	687b      	ldr	r3, [r7, #4]
20000680:	8b1b      	ldrh	r3, [r3, #24]
20000682:	b29b      	uxth	r3, r3
20000684:	22ff      	movs	r2, #255	; 0xff
20000686:	4013      	ands	r3, r2
20000688:	b29a      	uxth	r2, r3
2000068a:	687b      	ldr	r3, [r7, #4]
2000068c:	831a      	strh	r2, [r3, #24]
  /* Set the USART guard time */
  USARTx->GTPR |= (uint16_t)((uint16_t)USART_GuardTime << 0x08);
2000068e:	687b      	ldr	r3, [r7, #4]
20000690:	8b1b      	ldrh	r3, [r3, #24]
20000692:	b29a      	uxth	r2, r3
20000694:	1cfb      	adds	r3, r7, #3
20000696:	781b      	ldrb	r3, [r3, #0]
20000698:	b29b      	uxth	r3, r3
2000069a:	021b      	lsls	r3, r3, #8
2000069c:	b29b      	uxth	r3, r3
2000069e:	4313      	orrs	r3, r2
200006a0:	b29a      	uxth	r2, r3
200006a2:	687b      	ldr	r3, [r7, #4]
200006a4:	831a      	strh	r2, [r3, #24]
}
200006a6:	46c0      	nop			; (mov r8, r8)
200006a8:	46bd      	mov	sp, r7
200006aa:	b002      	add	sp, #8
200006ac:	bd80      	pop	{r7, pc}

200006ae <USART_SmartCardCmd>:
  * @param  NewState: new state of the Smart Card mode.
  *          This parameter can be: ENABLE or DISABLE.      
  * @retval None
  */
void USART_SmartCardCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
200006ae:	b580      	push	{r7, lr}
200006b0:	b082      	sub	sp, #8
200006b2:	af00      	add	r7, sp, #0
200006b4:	6078      	str	r0, [r7, #4]
200006b6:	000a      	movs	r2, r1
200006b8:	1cfb      	adds	r3, r7, #3
200006ba:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_USART_1236_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
200006bc:	1cfb      	adds	r3, r7, #3
200006be:	781b      	ldrb	r3, [r3, #0]
200006c0:	2b00      	cmp	r3, #0
200006c2:	d008      	beq.n	200006d6 <USART_SmartCardCmd+0x28>
  {
    /* Enable the SC mode by setting the SCEN bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_SCEN;
200006c4:	687b      	ldr	r3, [r7, #4]
200006c6:	8a9b      	ldrh	r3, [r3, #20]
200006c8:	b29b      	uxth	r3, r3
200006ca:	2220      	movs	r2, #32
200006cc:	4313      	orrs	r3, r2
200006ce:	b29a      	uxth	r2, r3
200006d0:	687b      	ldr	r3, [r7, #4]
200006d2:	829a      	strh	r2, [r3, #20]
  else
  {
    /* Disable the SC mode by clearing the SCEN bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_SCEN);
  }
}
200006d4:	e007      	b.n	200006e6 <USART_SmartCardCmd+0x38>
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_SCEN);
200006d6:	687b      	ldr	r3, [r7, #4]
200006d8:	8a9b      	ldrh	r3, [r3, #20]
200006da:	b29b      	uxth	r3, r3
200006dc:	2220      	movs	r2, #32
200006de:	4393      	bics	r3, r2
200006e0:	b29a      	uxth	r2, r3
200006e2:	687b      	ldr	r3, [r7, #4]
200006e4:	829a      	strh	r2, [r3, #20]
}
200006e6:	46c0      	nop			; (mov r8, r8)
200006e8:	46bd      	mov	sp, r7
200006ea:	b002      	add	sp, #8
200006ec:	bd80      	pop	{r7, pc}

200006ee <USART_SmartCardNACKCmd>:
  * @param  NewState: new state of the NACK transmission.
  *          This parameter can be: ENABLE or DISABLE.  
  * @retval None
  */
void USART_SmartCardNACKCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
200006ee:	b580      	push	{r7, lr}
200006f0:	b082      	sub	sp, #8
200006f2:	af00      	add	r7, sp, #0
200006f4:	6078      	str	r0, [r7, #4]
200006f6:	000a      	movs	r2, r1
200006f8:	1cfb      	adds	r3, r7, #3
200006fa:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_USART_1236_PERIPH(USARTx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
200006fc:	1cfb      	adds	r3, r7, #3
200006fe:	781b      	ldrb	r3, [r3, #0]
20000700:	2b00      	cmp	r3, #0
20000702:	d008      	beq.n	20000716 <USART_SmartCardNACKCmd+0x28>
  {
    /* Enable the NACK transmission by setting the NACK bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_NACK;
20000704:	687b      	ldr	r3, [r7, #4]
20000706:	8a9b      	ldrh	r3, [r3, #20]
20000708:	b29b      	uxth	r3, r3
2000070a:	2210      	movs	r2, #16
2000070c:	4313      	orrs	r3, r2
2000070e:	b29a      	uxth	r2, r3
20000710:	687b      	ldr	r3, [r7, #4]
20000712:	829a      	strh	r2, [r3, #20]
  else
  {
    /* Disable the NACK transmission by clearing the NACK bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_NACK);
  }
}
20000714:	e007      	b.n	20000726 <USART_SmartCardNACKCmd+0x38>
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_NACK);
20000716:	687b      	ldr	r3, [r7, #4]
20000718:	8a9b      	ldrh	r3, [r3, #20]
2000071a:	b29b      	uxth	r3, r3
2000071c:	2210      	movs	r2, #16
2000071e:	4393      	bics	r3, r2
20000720:	b29a      	uxth	r2, r3
20000722:	687b      	ldr	r3, [r7, #4]
20000724:	829a      	strh	r2, [r3, #20]
}
20000726:	46c0      	nop			; (mov r8, r8)
20000728:	46bd      	mov	sp, r7
2000072a:	b002      	add	sp, #8
2000072c:	bd80      	pop	{r7, pc}

2000072e <USART_IrDAConfig>:
  *            @arg USART_IrDAMode_LowPower
  *            @arg USART_IrDAMode_Normal
  * @retval None
  */
void USART_IrDAConfig(USART_TypeDef* USARTx, uint16_t USART_IrDAMode)
{
2000072e:	b580      	push	{r7, lr}
20000730:	b082      	sub	sp, #8
20000732:	af00      	add	r7, sp, #0
20000734:	6078      	str	r0, [r7, #4]
20000736:	000a      	movs	r2, r1
20000738:	1cbb      	adds	r3, r7, #2
2000073a:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_IRDA_MODE(USART_IrDAMode));
    
  USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_IRLP);
2000073c:	687b      	ldr	r3, [r7, #4]
2000073e:	8a9b      	ldrh	r3, [r3, #20]
20000740:	b29b      	uxth	r3, r3
20000742:	2204      	movs	r2, #4
20000744:	4393      	bics	r3, r2
20000746:	b29a      	uxth	r2, r3
20000748:	687b      	ldr	r3, [r7, #4]
2000074a:	829a      	strh	r2, [r3, #20]
  USARTx->CR3 |= USART_IrDAMode;
2000074c:	687b      	ldr	r3, [r7, #4]
2000074e:	8a9b      	ldrh	r3, [r3, #20]
20000750:	b29a      	uxth	r2, r3
20000752:	1cbb      	adds	r3, r7, #2
20000754:	881b      	ldrh	r3, [r3, #0]
20000756:	4313      	orrs	r3, r2
20000758:	b29a      	uxth	r2, r3
2000075a:	687b      	ldr	r3, [r7, #4]
2000075c:	829a      	strh	r2, [r3, #20]
}
2000075e:	46c0      	nop			; (mov r8, r8)
20000760:	46bd      	mov	sp, r7
20000762:	b002      	add	sp, #8
20000764:	bd80      	pop	{r7, pc}

20000766 <USART_IrDACmd>:
  * @param  NewState: new state of the IrDA mode.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_IrDACmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
20000766:	b580      	push	{r7, lr}
20000768:	b082      	sub	sp, #8
2000076a:	af00      	add	r7, sp, #0
2000076c:	6078      	str	r0, [r7, #4]
2000076e:	000a      	movs	r2, r1
20000770:	1cfb      	adds	r3, r7, #3
20000772:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
    
  if (NewState != DISABLE)
20000774:	1cfb      	adds	r3, r7, #3
20000776:	781b      	ldrb	r3, [r3, #0]
20000778:	2b00      	cmp	r3, #0
2000077a:	d008      	beq.n	2000078e <USART_IrDACmd+0x28>
  {
    /* Enable the IrDA mode by setting the IREN bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_IREN;
2000077c:	687b      	ldr	r3, [r7, #4]
2000077e:	8a9b      	ldrh	r3, [r3, #20]
20000780:	b29b      	uxth	r3, r3
20000782:	2202      	movs	r2, #2
20000784:	4313      	orrs	r3, r2
20000786:	b29a      	uxth	r2, r3
20000788:	687b      	ldr	r3, [r7, #4]
2000078a:	829a      	strh	r2, [r3, #20]
  else
  {
    /* Disable the IrDA mode by clearing the IREN bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_IREN);
  }
}
2000078c:	e007      	b.n	2000079e <USART_IrDACmd+0x38>
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_IREN);
2000078e:	687b      	ldr	r3, [r7, #4]
20000790:	8a9b      	ldrh	r3, [r3, #20]
20000792:	b29b      	uxth	r3, r3
20000794:	2202      	movs	r2, #2
20000796:	4393      	bics	r3, r2
20000798:	b29a      	uxth	r2, r3
2000079a:	687b      	ldr	r3, [r7, #4]
2000079c:	829a      	strh	r2, [r3, #20]
}
2000079e:	46c0      	nop			; (mov r8, r8)
200007a0:	46bd      	mov	sp, r7
200007a2:	b002      	add	sp, #8
200007a4:	bd80      	pop	{r7, pc}

200007a6 <USART_DMACmd>:
  * @param  NewState: new state of the DMA Request sources.
  *          This parameter can be: ENABLE or DISABLE.   
  * @retval None
  */
void USART_DMACmd(USART_TypeDef* USARTx, uint16_t USART_DMAReq, FunctionalState NewState)
{
200007a6:	b580      	push	{r7, lr}
200007a8:	b082      	sub	sp, #8
200007aa:	af00      	add	r7, sp, #0
200007ac:	6078      	str	r0, [r7, #4]
200007ae:	0008      	movs	r0, r1
200007b0:	0011      	movs	r1, r2
200007b2:	1cbb      	adds	r3, r7, #2
200007b4:	1c02      	adds	r2, r0, #0
200007b6:	801a      	strh	r2, [r3, #0]
200007b8:	1c7b      	adds	r3, r7, #1
200007ba:	1c0a      	adds	r2, r1, #0
200007bc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DMAREQ(USART_DMAReq));  
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 

  if (NewState != DISABLE)
200007be:	1c7b      	adds	r3, r7, #1
200007c0:	781b      	ldrb	r3, [r3, #0]
200007c2:	2b00      	cmp	r3, #0
200007c4:	d009      	beq.n	200007da <USART_DMACmd+0x34>
  {
    /* Enable the DMA transfer for selected requests by setting the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 |= USART_DMAReq;
200007c6:	687b      	ldr	r3, [r7, #4]
200007c8:	8a9b      	ldrh	r3, [r3, #20]
200007ca:	b29a      	uxth	r2, r3
200007cc:	1cbb      	adds	r3, r7, #2
200007ce:	881b      	ldrh	r3, [r3, #0]
200007d0:	4313      	orrs	r3, r2
200007d2:	b29a      	uxth	r2, r3
200007d4:	687b      	ldr	r3, [r7, #4]
200007d6:	829a      	strh	r2, [r3, #20]
  {
    /* Disable the DMA transfer for selected requests by clearing the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 &= (uint16_t)~USART_DMAReq;
  }
}
200007d8:	e00a      	b.n	200007f0 <USART_DMACmd+0x4a>
    USARTx->CR3 &= (uint16_t)~USART_DMAReq;
200007da:	687b      	ldr	r3, [r7, #4]
200007dc:	8a9b      	ldrh	r3, [r3, #20]
200007de:	b29b      	uxth	r3, r3
200007e0:	1cba      	adds	r2, r7, #2
200007e2:	8812      	ldrh	r2, [r2, #0]
200007e4:	43d2      	mvns	r2, r2
200007e6:	b292      	uxth	r2, r2
200007e8:	4013      	ands	r3, r2
200007ea:	b29a      	uxth	r2, r3
200007ec:	687b      	ldr	r3, [r7, #4]
200007ee:	829a      	strh	r2, [r3, #20]
}
200007f0:	46c0      	nop			; (mov r8, r8)
200007f2:	46bd      	mov	sp, r7
200007f4:	b002      	add	sp, #8
200007f6:	bd80      	pop	{r7, pc}

200007f8 <USART_ITConfig>:
  * @param  NewState: new state of the specified USARTx interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState)
{
200007f8:	b580      	push	{r7, lr}
200007fa:	b086      	sub	sp, #24
200007fc:	af00      	add	r7, sp, #0
200007fe:	6078      	str	r0, [r7, #4]
20000800:	0008      	movs	r0, r1
20000802:	0011      	movs	r1, r2
20000804:	1cbb      	adds	r3, r7, #2
20000806:	1c02      	adds	r2, r0, #0
20000808:	801a      	strh	r2, [r3, #0]
2000080a:	1c7b      	adds	r3, r7, #1
2000080c:	1c0a      	adds	r2, r1, #0
2000080e:	701a      	strb	r2, [r3, #0]
  uint32_t usartreg = 0x00, itpos = 0x00, itmask = 0x00;
20000810:	2300      	movs	r3, #0
20000812:	613b      	str	r3, [r7, #16]
20000814:	2300      	movs	r3, #0
20000816:	60fb      	str	r3, [r7, #12]
20000818:	2300      	movs	r3, #0
2000081a:	60bb      	str	r3, [r7, #8]
  uint32_t usartxbase = 0x00;
2000081c:	2300      	movs	r3, #0
2000081e:	617b      	str	r3, [r7, #20]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  usartxbase = (uint32_t)USARTx;
20000820:	687b      	ldr	r3, [r7, #4]
20000822:	617b      	str	r3, [r7, #20]

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
20000824:	1cbb      	adds	r3, r7, #2
20000826:	881b      	ldrh	r3, [r3, #0]
20000828:	b2db      	uxtb	r3, r3
2000082a:	095b      	lsrs	r3, r3, #5
2000082c:	b2db      	uxtb	r3, r3
2000082e:	613b      	str	r3, [r7, #16]

  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
20000830:	1cbb      	adds	r3, r7, #2
20000832:	881b      	ldrh	r3, [r3, #0]
20000834:	221f      	movs	r2, #31
20000836:	4013      	ands	r3, r2
20000838:	60fb      	str	r3, [r7, #12]
  itmask = (((uint32_t)0x01) << itpos);
2000083a:	2201      	movs	r2, #1
2000083c:	68fb      	ldr	r3, [r7, #12]
2000083e:	409a      	lsls	r2, r3
20000840:	0013      	movs	r3, r2
20000842:	60bb      	str	r3, [r7, #8]
    
  if (usartreg == 0x01) /* The IT is in CR1 register */
20000844:	693b      	ldr	r3, [r7, #16]
20000846:	2b01      	cmp	r3, #1
20000848:	d103      	bne.n	20000852 <USART_ITConfig+0x5a>
  {
    usartxbase += 0x0C;
2000084a:	697b      	ldr	r3, [r7, #20]
2000084c:	330c      	adds	r3, #12
2000084e:	617b      	str	r3, [r7, #20]
20000850:	e009      	b.n	20000866 <USART_ITConfig+0x6e>
  }
  else if (usartreg == 0x02) /* The IT is in CR2 register */
20000852:	693b      	ldr	r3, [r7, #16]
20000854:	2b02      	cmp	r3, #2
20000856:	d103      	bne.n	20000860 <USART_ITConfig+0x68>
  {
    usartxbase += 0x10;
20000858:	697b      	ldr	r3, [r7, #20]
2000085a:	3310      	adds	r3, #16
2000085c:	617b      	str	r3, [r7, #20]
2000085e:	e002      	b.n	20000866 <USART_ITConfig+0x6e>
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14; 
20000860:	697b      	ldr	r3, [r7, #20]
20000862:	3314      	adds	r3, #20
20000864:	617b      	str	r3, [r7, #20]
  }
  if (NewState != DISABLE)
20000866:	1c7b      	adds	r3, r7, #1
20000868:	781b      	ldrb	r3, [r3, #0]
2000086a:	2b00      	cmp	r3, #0
2000086c:	d006      	beq.n	2000087c <USART_ITConfig+0x84>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
2000086e:	697b      	ldr	r3, [r7, #20]
20000870:	6819      	ldr	r1, [r3, #0]
20000872:	697b      	ldr	r3, [r7, #20]
20000874:	68ba      	ldr	r2, [r7, #8]
20000876:	430a      	orrs	r2, r1
20000878:	601a      	str	r2, [r3, #0]
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
  }
}
2000087a:	e006      	b.n	2000088a <USART_ITConfig+0x92>
    *(__IO uint32_t*)usartxbase &= ~itmask;
2000087c:	697b      	ldr	r3, [r7, #20]
2000087e:	681a      	ldr	r2, [r3, #0]
20000880:	68bb      	ldr	r3, [r7, #8]
20000882:	43d9      	mvns	r1, r3
20000884:	697b      	ldr	r3, [r7, #20]
20000886:	400a      	ands	r2, r1
20000888:	601a      	str	r2, [r3, #0]
}
2000088a:	46c0      	nop			; (mov r8, r8)
2000088c:	46bd      	mov	sp, r7
2000088e:	b006      	add	sp, #24
20000890:	bd80      	pop	{r7, pc}

20000892 <USART_GetFlagStatus>:
  *            @arg USART_FLAG_FE:   Framing Error flag
  *            @arg USART_FLAG_PE:   Parity Error flag
  * @retval The new state of USART_FLAG (SET or RESET).
  */
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
20000892:	b580      	push	{r7, lr}
20000894:	b084      	sub	sp, #16
20000896:	af00      	add	r7, sp, #0
20000898:	6078      	str	r0, [r7, #4]
2000089a:	000a      	movs	r2, r1
2000089c:	1cbb      	adds	r3, r7, #2
2000089e:	801a      	strh	r2, [r3, #0]
  FlagStatus bitstatus = RESET;
200008a0:	230f      	movs	r3, #15
200008a2:	18fb      	adds	r3, r7, r3
200008a4:	2200      	movs	r2, #0
200008a6:	701a      	strb	r2, [r3, #0]
  if (USART_FLAG == USART_FLAG_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  if ((USARTx->SR & USART_FLAG) != (uint16_t)RESET)
200008a8:	687b      	ldr	r3, [r7, #4]
200008aa:	881b      	ldrh	r3, [r3, #0]
200008ac:	b29b      	uxth	r3, r3
200008ae:	1cba      	adds	r2, r7, #2
200008b0:	8812      	ldrh	r2, [r2, #0]
200008b2:	4013      	ands	r3, r2
200008b4:	b29b      	uxth	r3, r3
200008b6:	2b00      	cmp	r3, #0
200008b8:	d004      	beq.n	200008c4 <USART_GetFlagStatus+0x32>
  {
    bitstatus = SET;
200008ba:	230f      	movs	r3, #15
200008bc:	18fb      	adds	r3, r7, r3
200008be:	2201      	movs	r2, #1
200008c0:	701a      	strb	r2, [r3, #0]
200008c2:	e003      	b.n	200008cc <USART_GetFlagStatus+0x3a>
  }
  else
  {
    bitstatus = RESET;
200008c4:	230f      	movs	r3, #15
200008c6:	18fb      	adds	r3, r7, r3
200008c8:	2200      	movs	r2, #0
200008ca:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
200008cc:	230f      	movs	r3, #15
200008ce:	18fb      	adds	r3, r7, r3
200008d0:	781b      	ldrb	r3, [r3, #0]
}
200008d2:	0018      	movs	r0, r3
200008d4:	46bd      	mov	sp, r7
200008d6:	b004      	add	sp, #16
200008d8:	bd80      	pop	{r7, pc}

200008da <USART_ClearFlag>:
  *          (USART_SendData()).
  *   
  * @retval None
  */
void USART_ClearFlag(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
200008da:	b580      	push	{r7, lr}
200008dc:	b082      	sub	sp, #8
200008de:	af00      	add	r7, sp, #0
200008e0:	6078      	str	r0, [r7, #4]
200008e2:	000a      	movs	r2, r1
200008e4:	1cbb      	adds	r3, r7, #2
200008e6:	801a      	strh	r2, [r3, #0]
  if ((USART_FLAG & USART_FLAG_CTS) == USART_FLAG_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
       
  USARTx->SR = (uint16_t)~USART_FLAG;
200008e8:	1cbb      	adds	r3, r7, #2
200008ea:	881b      	ldrh	r3, [r3, #0]
200008ec:	43db      	mvns	r3, r3
200008ee:	b29a      	uxth	r2, r3
200008f0:	687b      	ldr	r3, [r7, #4]
200008f2:	801a      	strh	r2, [r3, #0]
}
200008f4:	46c0      	nop			; (mov r8, r8)
200008f6:	46bd      	mov	sp, r7
200008f8:	b002      	add	sp, #8
200008fa:	bd80      	pop	{r7, pc}

200008fc <USART_GetITStatus>:
  *            @arg USART_IT_FE:   Framing Error interrupt
  *            @arg USART_IT_PE:   Parity Error interrupt
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT)
{
200008fc:	b580      	push	{r7, lr}
200008fe:	b086      	sub	sp, #24
20000900:	af00      	add	r7, sp, #0
20000902:	6078      	str	r0, [r7, #4]
20000904:	000a      	movs	r2, r1
20000906:	1cbb      	adds	r3, r7, #2
20000908:	801a      	strh	r2, [r3, #0]
  uint32_t bitpos = 0x00, itmask = 0x00, usartreg = 0x00;
2000090a:	2300      	movs	r3, #0
2000090c:	60fb      	str	r3, [r7, #12]
2000090e:	2300      	movs	r3, #0
20000910:	617b      	str	r3, [r7, #20]
20000912:	2300      	movs	r3, #0
20000914:	60bb      	str	r3, [r7, #8]
  ITStatus bitstatus = RESET;
20000916:	2313      	movs	r3, #19
20000918:	18fb      	adds	r3, r7, r3
2000091a:	2200      	movs	r2, #0
2000091c:	701a      	strb	r2, [r3, #0]
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
2000091e:	1cbb      	adds	r3, r7, #2
20000920:	881b      	ldrh	r3, [r3, #0]
20000922:	b2db      	uxtb	r3, r3
20000924:	095b      	lsrs	r3, r3, #5
20000926:	b2db      	uxtb	r3, r3
20000928:	60bb      	str	r3, [r7, #8]
  /* Get the interrupt position */
  itmask = USART_IT & IT_MASK;
2000092a:	1cbb      	adds	r3, r7, #2
2000092c:	881b      	ldrh	r3, [r3, #0]
2000092e:	221f      	movs	r2, #31
20000930:	4013      	ands	r3, r2
20000932:	617b      	str	r3, [r7, #20]
  itmask = (uint32_t)0x01 << itmask;
20000934:	2201      	movs	r2, #1
20000936:	697b      	ldr	r3, [r7, #20]
20000938:	409a      	lsls	r2, r3
2000093a:	0013      	movs	r3, r2
2000093c:	617b      	str	r3, [r7, #20]
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
2000093e:	68bb      	ldr	r3, [r7, #8]
20000940:	2b01      	cmp	r3, #1
20000942:	d107      	bne.n	20000954 <USART_GetITStatus+0x58>
  {
    itmask &= USARTx->CR1;
20000944:	687b      	ldr	r3, [r7, #4]
20000946:	899b      	ldrh	r3, [r3, #12]
20000948:	b29b      	uxth	r3, r3
2000094a:	001a      	movs	r2, r3
2000094c:	697b      	ldr	r3, [r7, #20]
2000094e:	4013      	ands	r3, r2
20000950:	617b      	str	r3, [r7, #20]
20000952:	e011      	b.n	20000978 <USART_GetITStatus+0x7c>
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
20000954:	68bb      	ldr	r3, [r7, #8]
20000956:	2b02      	cmp	r3, #2
20000958:	d107      	bne.n	2000096a <USART_GetITStatus+0x6e>
  {
    itmask &= USARTx->CR2;
2000095a:	687b      	ldr	r3, [r7, #4]
2000095c:	8a1b      	ldrh	r3, [r3, #16]
2000095e:	b29b      	uxth	r3, r3
20000960:	001a      	movs	r2, r3
20000962:	697b      	ldr	r3, [r7, #20]
20000964:	4013      	ands	r3, r2
20000966:	617b      	str	r3, [r7, #20]
20000968:	e006      	b.n	20000978 <USART_GetITStatus+0x7c>
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
2000096a:	687b      	ldr	r3, [r7, #4]
2000096c:	8a9b      	ldrh	r3, [r3, #20]
2000096e:	b29b      	uxth	r3, r3
20000970:	001a      	movs	r2, r3
20000972:	697b      	ldr	r3, [r7, #20]
20000974:	4013      	ands	r3, r2
20000976:	617b      	str	r3, [r7, #20]
  }
  
  bitpos = USART_IT >> 0x08;
20000978:	1cbb      	adds	r3, r7, #2
2000097a:	881b      	ldrh	r3, [r3, #0]
2000097c:	0a1b      	lsrs	r3, r3, #8
2000097e:	b29b      	uxth	r3, r3
20000980:	60fb      	str	r3, [r7, #12]
  bitpos = (uint32_t)0x01 << bitpos;
20000982:	2201      	movs	r2, #1
20000984:	68fb      	ldr	r3, [r7, #12]
20000986:	409a      	lsls	r2, r3
20000988:	0013      	movs	r3, r2
2000098a:	60fb      	str	r3, [r7, #12]
  bitpos &= USARTx->SR;
2000098c:	687b      	ldr	r3, [r7, #4]
2000098e:	881b      	ldrh	r3, [r3, #0]
20000990:	b29b      	uxth	r3, r3
20000992:	001a      	movs	r2, r3
20000994:	68fb      	ldr	r3, [r7, #12]
20000996:	4013      	ands	r3, r2
20000998:	60fb      	str	r3, [r7, #12]
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
2000099a:	697b      	ldr	r3, [r7, #20]
2000099c:	2b00      	cmp	r3, #0
2000099e:	d007      	beq.n	200009b0 <USART_GetITStatus+0xb4>
200009a0:	68fb      	ldr	r3, [r7, #12]
200009a2:	2b00      	cmp	r3, #0
200009a4:	d004      	beq.n	200009b0 <USART_GetITStatus+0xb4>
  {
    bitstatus = SET;
200009a6:	2313      	movs	r3, #19
200009a8:	18fb      	adds	r3, r7, r3
200009aa:	2201      	movs	r2, #1
200009ac:	701a      	strb	r2, [r3, #0]
200009ae:	e003      	b.n	200009b8 <USART_GetITStatus+0xbc>
  }
  else
  {
    bitstatus = RESET;
200009b0:	2313      	movs	r3, #19
200009b2:	18fb      	adds	r3, r7, r3
200009b4:	2200      	movs	r2, #0
200009b6:	701a      	strb	r2, [r3, #0]
  }
  
  return bitstatus;  
200009b8:	2313      	movs	r3, #19
200009ba:	18fb      	adds	r3, r7, r3
200009bc:	781b      	ldrb	r3, [r3, #0]
}
200009be:	0018      	movs	r0, r3
200009c0:	46bd      	mov	sp, r7
200009c2:	b006      	add	sp, #24
200009c4:	bd80      	pop	{r7, pc}

200009c6 <USART_ClearITPendingBit>:
  *          (USART_SendData()).
  *  
  * @retval None
  */
void USART_ClearITPendingBit(USART_TypeDef* USARTx, uint16_t USART_IT)
{
200009c6:	b580      	push	{r7, lr}
200009c8:	b084      	sub	sp, #16
200009ca:	af00      	add	r7, sp, #0
200009cc:	6078      	str	r0, [r7, #4]
200009ce:	000a      	movs	r2, r1
200009d0:	1cbb      	adds	r3, r7, #2
200009d2:	801a      	strh	r2, [r3, #0]
  uint16_t bitpos = 0x00, itmask = 0x00;
200009d4:	210e      	movs	r1, #14
200009d6:	187b      	adds	r3, r7, r1
200009d8:	2200      	movs	r2, #0
200009da:	801a      	strh	r2, [r3, #0]
200009dc:	200c      	movs	r0, #12
200009de:	183b      	adds	r3, r7, r0
200009e0:	2200      	movs	r2, #0
200009e2:	801a      	strh	r2, [r3, #0]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  bitpos = USART_IT >> 0x08;
200009e4:	187b      	adds	r3, r7, r1
200009e6:	1cba      	adds	r2, r7, #2
200009e8:	8812      	ldrh	r2, [r2, #0]
200009ea:	0a12      	lsrs	r2, r2, #8
200009ec:	801a      	strh	r2, [r3, #0]
  itmask = ((uint16_t)0x01 << (uint16_t)bitpos);
200009ee:	187b      	adds	r3, r7, r1
200009f0:	881b      	ldrh	r3, [r3, #0]
200009f2:	2201      	movs	r2, #1
200009f4:	409a      	lsls	r2, r3
200009f6:	183b      	adds	r3, r7, r0
200009f8:	801a      	strh	r2, [r3, #0]
  USARTx->SR = (uint16_t)~itmask;
200009fa:	183b      	adds	r3, r7, r0
200009fc:	881b      	ldrh	r3, [r3, #0]
200009fe:	43db      	mvns	r3, r3
20000a00:	b29a      	uxth	r2, r3
20000a02:	687b      	ldr	r3, [r7, #4]
20000a04:	801a      	strh	r2, [r3, #0]
}
20000a06:	46c0      	nop			; (mov r8, r8)
20000a08:	46bd      	mov	sp, r7
20000a0a:	b004      	add	sp, #16
20000a0c:	bd80      	pop	{r7, pc}
20000a0e:	46c0      	nop			; (mov r8, r8)

20000a10 <bufferInit>:
#include "buffer.h"

//Nollställer bufferten
void bufferInit(FIFO *buffer) {
20000a10:	b580      	push	{r7, lr}
20000a12:	b082      	sub	sp, #8
20000a14:	af00      	add	r7, sp, #0
20000a16:	6078      	str	r0, [r7, #4]
    buffer->count = 0;
20000a18:	687b      	ldr	r3, [r7, #4]
20000a1a:	2264      	movs	r2, #100	; 0x64
20000a1c:	2100      	movs	r1, #0
20000a1e:	5499      	strb	r1, [r3, r2]
    buffer->in = 0;
20000a20:	687b      	ldr	r3, [r7, #4]
20000a22:	2265      	movs	r2, #101	; 0x65
20000a24:	2100      	movs	r1, #0
20000a26:	5499      	strb	r1, [r3, r2]
    buffer->out = 0;
20000a28:	687b      	ldr	r3, [r7, #4]
20000a2a:	2266      	movs	r2, #102	; 0x66
20000a2c:	2100      	movs	r1, #0
20000a2e:	5499      	strb	r1, [r3, r2]
}
20000a30:	46c0      	nop			; (mov r8, r8)
20000a32:	46bd      	mov	sp, r7
20000a34:	b002      	add	sp, #8
20000a36:	bd80      	pop	{r7, pc}

20000a38 <bufferPut>:

//Lägger till ett elem i buffern.
//Returnerar 1 om det lyckades, 0 annars.
uint8_t bufferPut ( FIFO *buffer, uint8_t elem) {
20000a38:	b580      	push	{r7, lr}
20000a3a:	b082      	sub	sp, #8
20000a3c:	af00      	add	r7, sp, #0
20000a3e:	6078      	str	r0, [r7, #4]
20000a40:	000a      	movs	r2, r1
20000a42:	1cfb      	adds	r3, r7, #3
20000a44:	701a      	strb	r2, [r3, #0]
    //Kollar om bufferten är full.
    if (buffer->count == BUFFERSIZE){
20000a46:	687b      	ldr	r3, [r7, #4]
20000a48:	2264      	movs	r2, #100	; 0x64
20000a4a:	5c9b      	ldrb	r3, [r3, r2]
20000a4c:	2b64      	cmp	r3, #100	; 0x64
20000a4e:	d101      	bne.n	20000a54 <bufferPut+0x1c>
        return 0;
20000a50:	2300      	movs	r3, #0
20000a52:	e01e      	b.n	20000a92 <bufferPut+0x5a>
    }

    //Lägger elem i bufferten
    buffer->buff[buffer->in++] = elem;
20000a54:	687b      	ldr	r3, [r7, #4]
20000a56:	2265      	movs	r2, #101	; 0x65
20000a58:	5c9b      	ldrb	r3, [r3, r2]
20000a5a:	1c5a      	adds	r2, r3, #1
20000a5c:	b2d0      	uxtb	r0, r2
20000a5e:	687a      	ldr	r2, [r7, #4]
20000a60:	2165      	movs	r1, #101	; 0x65
20000a62:	5450      	strb	r0, [r2, r1]
20000a64:	0019      	movs	r1, r3
20000a66:	687b      	ldr	r3, [r7, #4]
20000a68:	1cfa      	adds	r2, r7, #3
20000a6a:	7812      	ldrb	r2, [r2, #0]
20000a6c:	545a      	strb	r2, [r3, r1]
    buffer->count++;
20000a6e:	687b      	ldr	r3, [r7, #4]
20000a70:	2264      	movs	r2, #100	; 0x64
20000a72:	5c9b      	ldrb	r3, [r3, r2]
20000a74:	3301      	adds	r3, #1
20000a76:	b2d9      	uxtb	r1, r3
20000a78:	687b      	ldr	r3, [r7, #4]
20000a7a:	2264      	movs	r2, #100	; 0x64
20000a7c:	5499      	strb	r1, [r3, r2]

    //Justerar pekaren om vi nått slutet
    if (buffer->in == BUFFERSIZE)
20000a7e:	687b      	ldr	r3, [r7, #4]
20000a80:	2265      	movs	r2, #101	; 0x65
20000a82:	5c9b      	ldrb	r3, [r3, r2]
20000a84:	2b64      	cmp	r3, #100	; 0x64
20000a86:	d103      	bne.n	20000a90 <bufferPut+0x58>
        buffer->in = 0;
20000a88:	687b      	ldr	r3, [r7, #4]
20000a8a:	2265      	movs	r2, #101	; 0x65
20000a8c:	2100      	movs	r1, #0
20000a8e:	5499      	strb	r1, [r3, r2]

    return 1;
20000a90:	2301      	movs	r3, #1
}
20000a92:	0018      	movs	r0, r3
20000a94:	46bd      	mov	sp, r7
20000a96:	b002      	add	sp, #8
20000a98:	bd80      	pop	{r7, pc}

20000a9a <bufferGet>:

//Hämtar ett element från buffern till dest.
//Returnerar 1 om det lyckades, 0 annars.
uint8_t bufferGet ( FIFO *buffer, uint8_t *dest) {
20000a9a:	b580      	push	{r7, lr}
20000a9c:	b082      	sub	sp, #8
20000a9e:	af00      	add	r7, sp, #0
20000aa0:	6078      	str	r0, [r7, #4]
20000aa2:	6039      	str	r1, [r7, #0]
    //Kollar om bufferten är tom
    if (!buffer->count){
20000aa4:	687b      	ldr	r3, [r7, #4]
20000aa6:	2264      	movs	r2, #100	; 0x64
20000aa8:	5c9b      	ldrb	r3, [r3, r2]
20000aaa:	2b00      	cmp	r3, #0
20000aac:	d101      	bne.n	20000ab2 <bufferGet+0x18>
        return 0;
20000aae:	2300      	movs	r3, #0
20000ab0:	e01e      	b.n	20000af0 <bufferGet+0x56>
    }

    //Hämtar element ur buffern till dest
    *dest = buffer->buff[buffer->out++];
20000ab2:	687b      	ldr	r3, [r7, #4]
20000ab4:	2266      	movs	r2, #102	; 0x66
20000ab6:	5c9b      	ldrb	r3, [r3, r2]
20000ab8:	1c5a      	adds	r2, r3, #1
20000aba:	b2d0      	uxtb	r0, r2
20000abc:	687a      	ldr	r2, [r7, #4]
20000abe:	2166      	movs	r1, #102	; 0x66
20000ac0:	5450      	strb	r0, [r2, r1]
20000ac2:	001a      	movs	r2, r3
20000ac4:	687b      	ldr	r3, [r7, #4]
20000ac6:	5c9a      	ldrb	r2, [r3, r2]
20000ac8:	683b      	ldr	r3, [r7, #0]
20000aca:	701a      	strb	r2, [r3, #0]
    buffer->count--;
20000acc:	687b      	ldr	r3, [r7, #4]
20000ace:	2264      	movs	r2, #100	; 0x64
20000ad0:	5c9b      	ldrb	r3, [r3, r2]
20000ad2:	3b01      	subs	r3, #1
20000ad4:	b2d9      	uxtb	r1, r3
20000ad6:	687b      	ldr	r3, [r7, #4]
20000ad8:	2264      	movs	r2, #100	; 0x64
20000ada:	5499      	strb	r1, [r3, r2]

    //Justerar pekaren om vi nått slutet
    if (buffer->out == BUFFERSIZE)
20000adc:	687b      	ldr	r3, [r7, #4]
20000ade:	2266      	movs	r2, #102	; 0x66
20000ae0:	5c9b      	ldrb	r3, [r3, r2]
20000ae2:	2b64      	cmp	r3, #100	; 0x64
20000ae4:	d103      	bne.n	20000aee <bufferGet+0x54>
        buffer->out = 0;
20000ae6:	687b      	ldr	r3, [r7, #4]
20000ae8:	2266      	movs	r2, #102	; 0x66
20000aea:	2100      	movs	r1, #0
20000aec:	5499      	strb	r1, [r3, r2]

    return 1;
20000aee:	2301      	movs	r3, #1
20000af0:	0018      	movs	r0, r3
20000af2:	46bd      	mov	sp, r7
20000af4:	b002      	add	sp, #8
20000af6:	bd80      	pop	{r7, pc}

20000af8 <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
20000af8:	b580      	push	{r7, lr}
20000afa:	b082      	sub	sp, #8
20000afc:	af00      	add	r7, sp, #0
20000afe:	0002      	movs	r2, r0
20000b00:	6039      	str	r1, [r7, #0]
20000b02:	1dfb      	adds	r3, r7, #7
20000b04:	701a      	strb	r2, [r3, #0]
  if((int32_t)IRQn < 0) {
20000b06:	1dfb      	adds	r3, r7, #7
20000b08:	781b      	ldrb	r3, [r3, #0]
20000b0a:	2b7f      	cmp	r3, #127	; 0x7f
20000b0c:	d90d      	bls.n	20000b2a <NVIC_SetPriority+0x32>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
20000b0e:	683b      	ldr	r3, [r7, #0]
20000b10:	b2da      	uxtb	r2, r3
20000b12:	490f      	ldr	r1, [pc, #60]	; (20000b50 <NVIC_SetPriority+0x58>)
20000b14:	1dfb      	adds	r3, r7, #7
20000b16:	781b      	ldrb	r3, [r3, #0]
20000b18:	0018      	movs	r0, r3
20000b1a:	230f      	movs	r3, #15
20000b1c:	4003      	ands	r3, r0
20000b1e:	3b04      	subs	r3, #4
20000b20:	0112      	lsls	r2, r2, #4
20000b22:	b2d2      	uxtb	r2, r2
20000b24:	18cb      	adds	r3, r1, r3
20000b26:	761a      	strb	r2, [r3, #24]
  }
  else {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
20000b28:	e00d      	b.n	20000b46 <NVIC_SetPriority+0x4e>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
20000b2a:	683b      	ldr	r3, [r7, #0]
20000b2c:	b2db      	uxtb	r3, r3
20000b2e:	4909      	ldr	r1, [pc, #36]	; (20000b54 <NVIC_SetPriority+0x5c>)
20000b30:	1dfa      	adds	r2, r7, #7
20000b32:	7812      	ldrb	r2, [r2, #0]
20000b34:	b252      	sxtb	r2, r2
20000b36:	011b      	lsls	r3, r3, #4
20000b38:	b2d8      	uxtb	r0, r3
20000b3a:	23c0      	movs	r3, #192	; 0xc0
20000b3c:	009b      	lsls	r3, r3, #2
20000b3e:	188a      	adds	r2, r1, r2
20000b40:	18d3      	adds	r3, r2, r3
20000b42:	1c02      	adds	r2, r0, #0
20000b44:	701a      	strb	r2, [r3, #0]
}
20000b46:	46c0      	nop			; (mov r8, r8)
20000b48:	46bd      	mov	sp, r7
20000b4a:	b002      	add	sp, #8
20000b4c:	bd80      	pop	{r7, pc}
20000b4e:	46c0      	nop			; (mov r8, r8)
20000b50:	e000ed00 	and	lr, r0, r0, lsl #26
20000b54:	e000e100 	and	lr, r0, r0, lsl #2

20000b58 <SysTick_Config>:
    function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
20000b58:	b580      	push	{r7, lr}
20000b5a:	b082      	sub	sp, #8
20000b5c:	af00      	add	r7, sp, #0
20000b5e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk) { return (1UL); }    /* Reload value impossible */
20000b60:	687b      	ldr	r3, [r7, #4]
20000b62:	3b01      	subs	r3, #1
20000b64:	4a0c      	ldr	r2, [pc, #48]	; (20000b98 <SysTick_Config+0x40>)
20000b66:	4293      	cmp	r3, r2
20000b68:	d901      	bls.n	20000b6e <SysTick_Config+0x16>
20000b6a:	2301      	movs	r3, #1
20000b6c:	e010      	b.n	20000b90 <SysTick_Config+0x38>

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
20000b6e:	4b0b      	ldr	r3, [pc, #44]	; (20000b9c <SysTick_Config+0x44>)
20000b70:	687a      	ldr	r2, [r7, #4]
20000b72:	3a01      	subs	r2, #1
20000b74:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
20000b76:	2301      	movs	r3, #1
20000b78:	425b      	negs	r3, r3
20000b7a:	210f      	movs	r1, #15
20000b7c:	0018      	movs	r0, r3
20000b7e:	f7ff ffbb 	bl	20000af8 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
20000b82:	4b06      	ldr	r3, [pc, #24]	; (20000b9c <SysTick_Config+0x44>)
20000b84:	2200      	movs	r2, #0
20000b86:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
20000b88:	4b04      	ldr	r3, [pc, #16]	; (20000b9c <SysTick_Config+0x44>)
20000b8a:	2207      	movs	r2, #7
20000b8c:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
20000b8e:	2300      	movs	r3, #0
}
20000b90:	0018      	movs	r0, r3
20000b92:	46bd      	mov	sp, r7
20000b94:	b002      	add	sp, #8
20000b96:	bd80      	pop	{r7, pc}
20000b98:	00ffffff 	ldrshteq	pc, [pc], #255	; <UNPREDICTABLE>
20000b9c:	e000e010 	and	lr, r0, r0, lsl r0

20000ba0 <RCC_DeInit>:
  *            - LSI, LSE and RTC clocks 
  * @param  None
  * @retval None
  */
void RCC_DeInit(void)
{
20000ba0:	b580      	push	{r7, lr}
20000ba2:	af00      	add	r7, sp, #0
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
20000ba4:	4b14      	ldr	r3, [pc, #80]	; (20000bf8 <RCC_DeInit+0x58>)
20000ba6:	681a      	ldr	r2, [r3, #0]
20000ba8:	4b13      	ldr	r3, [pc, #76]	; (20000bf8 <RCC_DeInit+0x58>)
20000baa:	2101      	movs	r1, #1
20000bac:	430a      	orrs	r2, r1
20000bae:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
20000bb0:	4b11      	ldr	r3, [pc, #68]	; (20000bf8 <RCC_DeInit+0x58>)
20000bb2:	2200      	movs	r2, #0
20000bb4:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON, PLLON, PLLI2S and PLLSAI(STM32F42xxx/43xxx/446xx/469xx/479xx devices) bits */
  RCC->CR &= (uint32_t)0xEAF6FFFF;
20000bb6:	4b10      	ldr	r3, [pc, #64]	; (20000bf8 <RCC_DeInit+0x58>)
20000bb8:	681a      	ldr	r2, [r3, #0]
20000bba:	4b0f      	ldr	r3, [pc, #60]	; (20000bf8 <RCC_DeInit+0x58>)
20000bbc:	490f      	ldr	r1, [pc, #60]	; (20000bfc <RCC_DeInit+0x5c>)
20000bbe:	400a      	ands	r2, r1
20000bc0:	601a      	str	r2, [r3, #0]
  
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
20000bc2:	4b0d      	ldr	r3, [pc, #52]	; (20000bf8 <RCC_DeInit+0x58>)
20000bc4:	4a0e      	ldr	r2, [pc, #56]	; (20000c00 <RCC_DeInit+0x60>)
20000bc6:	605a      	str	r2, [r3, #4]

#if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F401xx) || defined(STM32F411xE) || defined(STM32F446xx) || defined(STM32F413_423xx) || defined(STM32F469_479xx)  
  /* Reset PLLI2SCFGR register */
  RCC->PLLI2SCFGR = 0x20003000;
20000bc8:	4a0b      	ldr	r2, [pc, #44]	; (20000bf8 <RCC_DeInit+0x58>)
20000bca:	2384      	movs	r3, #132	; 0x84
20000bcc:	490d      	ldr	r1, [pc, #52]	; (20000c04 <RCC_DeInit+0x64>)
20000bce:	50d1      	str	r1, [r2, r3]
#endif /* STM32F40_41xxx || STM32F427_437xx || STM32F429_439xx || STM32F401xx || STM32F411xE || STM32F446xx || STM32F413_423xx || STM32F469_479xx */

#if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F446xx) || defined(STM32F469_479xx) 
  /* Reset PLLSAICFGR register, only available for STM32F42xxx/43xxx/446xx/469xx/479xx devices */
  RCC->PLLSAICFGR = 0x24003000;
20000bd0:	4a09      	ldr	r2, [pc, #36]	; (20000bf8 <RCC_DeInit+0x58>)
20000bd2:	2388      	movs	r3, #136	; 0x88
20000bd4:	490c      	ldr	r1, [pc, #48]	; (20000c08 <RCC_DeInit+0x68>)
20000bd6:	50d1      	str	r1, [r2, r3]
#endif /* STM32F40_41xxx || STM32F427_437xx || STM32F429_439xx || STM32F446xx || STM32F469_479xx */
  
  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
20000bd8:	4b07      	ldr	r3, [pc, #28]	; (20000bf8 <RCC_DeInit+0x58>)
20000bda:	681a      	ldr	r2, [r3, #0]
20000bdc:	4b06      	ldr	r3, [pc, #24]	; (20000bf8 <RCC_DeInit+0x58>)
20000bde:	490b      	ldr	r1, [pc, #44]	; (20000c0c <RCC_DeInit+0x6c>)
20000be0:	400a      	ands	r2, r1
20000be2:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
20000be4:	4b04      	ldr	r3, [pc, #16]	; (20000bf8 <RCC_DeInit+0x58>)
20000be6:	2200      	movs	r2, #0
20000be8:	60da      	str	r2, [r3, #12]

  /* Disable Timers clock prescalers selection, only available for STM32F42/43xxx and STM32F413_423xx devices */
  RCC->DCKCFGR = 0x00000000;
20000bea:	4a03      	ldr	r2, [pc, #12]	; (20000bf8 <RCC_DeInit+0x58>)
20000bec:	238c      	movs	r3, #140	; 0x8c
20000bee:	2100      	movs	r1, #0
20000bf0:	50d1      	str	r1, [r2, r3]
  
#if defined(STM32F410xx) || defined(STM32F413_423xx)
  /* Disable LPTIM and FMPI2C clock prescalers selection, only available for STM32F410xx and STM32F413_423xx devices */
  RCC->DCKCFGR2 = 0x00000000;
#endif /* STM32F410xx || STM32F413_423xx */  
}
20000bf2:	46c0      	nop			; (mov r8, r8)
20000bf4:	46bd      	mov	sp, r7
20000bf6:	bd80      	pop	{r7, pc}
20000bf8:	40023800 	andmi	r3, r2, r0, lsl #16
20000bfc:	eaf6ffff 	b	1fdc0c00 <startup-0x23f400>
20000c00:	24003010 	strcs	r3, [r0], #-16
20000c04:	20003000 	andcs	r3, r0, r0
20000c08:	24003000 	strcs	r3, [r0], #-0
20000c0c:	fffbffff 			; <UNDEFINED> instruction: 0xfffbffff

20000c10 <RCC_HSEConfig>:
  *            @arg RCC_HSE_ON: turn ON the HSE oscillator
  *            @arg RCC_HSE_Bypass: HSE oscillator bypassed with external clock
  * @retval None
  */
void RCC_HSEConfig(uint8_t RCC_HSE)
{
20000c10:	b580      	push	{r7, lr}
20000c12:	b082      	sub	sp, #8
20000c14:	af00      	add	r7, sp, #0
20000c16:	0002      	movs	r2, r0
20000c18:	1dfb      	adds	r3, r7, #7
20000c1a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_HSE(RCC_HSE));

  /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
  *(__IO uint8_t *) CR_BYTE3_ADDRESS = RCC_HSE_OFF;
20000c1c:	4b05      	ldr	r3, [pc, #20]	; (20000c34 <RCC_HSEConfig+0x24>)
20000c1e:	2200      	movs	r2, #0
20000c20:	701a      	strb	r2, [r3, #0]

  /* Set the new HSE configuration -------------------------------------------*/
  *(__IO uint8_t *) CR_BYTE3_ADDRESS = RCC_HSE;
20000c22:	4a04      	ldr	r2, [pc, #16]	; (20000c34 <RCC_HSEConfig+0x24>)
20000c24:	1dfb      	adds	r3, r7, #7
20000c26:	781b      	ldrb	r3, [r3, #0]
20000c28:	7013      	strb	r3, [r2, #0]
}
20000c2a:	46c0      	nop			; (mov r8, r8)
20000c2c:	46bd      	mov	sp, r7
20000c2e:	b002      	add	sp, #8
20000c30:	bd80      	pop	{r7, pc}
20000c32:	46c0      	nop			; (mov r8, r8)
20000c34:	40023802 	andmi	r3, r2, r2, lsl #16

20000c38 <RCC_WaitForHSEStartUp>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: HSE oscillator is stable and ready to use
  *          - ERROR: HSE oscillator not yet ready
  */
ErrorStatus RCC_WaitForHSEStartUp(void)
{
20000c38:	b590      	push	{r4, r7, lr}
20000c3a:	b083      	sub	sp, #12
20000c3c:	af00      	add	r7, sp, #0
  __IO uint32_t startupcounter = 0;
20000c3e:	2300      	movs	r3, #0
20000c40:	603b      	str	r3, [r7, #0]
  ErrorStatus status = ERROR;
20000c42:	1dfb      	adds	r3, r7, #7
20000c44:	2200      	movs	r2, #0
20000c46:	701a      	strb	r2, [r3, #0]
  FlagStatus hsestatus = RESET;
20000c48:	1dbb      	adds	r3, r7, #6
20000c4a:	2200      	movs	r2, #0
20000c4c:	701a      	strb	r2, [r3, #0]
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    hsestatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
20000c4e:	1dbc      	adds	r4, r7, #6
20000c50:	2031      	movs	r0, #49	; 0x31
20000c52:	f000 fd9b 	bl	2000178c <RCC_GetFlagStatus>
20000c56:	0003      	movs	r3, r0
20000c58:	7023      	strb	r3, [r4, #0]
    startupcounter++;
20000c5a:	683b      	ldr	r3, [r7, #0]
20000c5c:	3301      	adds	r3, #1
20000c5e:	603b      	str	r3, [r7, #0]
  } while((startupcounter != HSE_STARTUP_TIMEOUT) && (hsestatus == RESET));
20000c60:	683a      	ldr	r2, [r7, #0]
20000c62:	23a0      	movs	r3, #160	; 0xa0
20000c64:	01db      	lsls	r3, r3, #7
20000c66:	429a      	cmp	r2, r3
20000c68:	d003      	beq.n	20000c72 <RCC_WaitForHSEStartUp+0x3a>
20000c6a:	1dbb      	adds	r3, r7, #6
20000c6c:	781b      	ldrb	r3, [r3, #0]
20000c6e:	2b00      	cmp	r3, #0
20000c70:	d0ed      	beq.n	20000c4e <RCC_WaitForHSEStartUp+0x16>

  if (RCC_GetFlagStatus(RCC_FLAG_HSERDY) != RESET)
20000c72:	2031      	movs	r0, #49	; 0x31
20000c74:	f000 fd8a 	bl	2000178c <RCC_GetFlagStatus>
20000c78:	1e03      	subs	r3, r0, #0
20000c7a:	d003      	beq.n	20000c84 <RCC_WaitForHSEStartUp+0x4c>
  {
    status = SUCCESS;
20000c7c:	1dfb      	adds	r3, r7, #7
20000c7e:	2201      	movs	r2, #1
20000c80:	701a      	strb	r2, [r3, #0]
20000c82:	e002      	b.n	20000c8a <RCC_WaitForHSEStartUp+0x52>
  }
  else
  {
    status = ERROR;
20000c84:	1dfb      	adds	r3, r7, #7
20000c86:	2200      	movs	r2, #0
20000c88:	701a      	strb	r2, [r3, #0]
  }
  return (status);
20000c8a:	1dfb      	adds	r3, r7, #7
20000c8c:	781b      	ldrb	r3, [r3, #0]
}
20000c8e:	0018      	movs	r0, r3
20000c90:	46bd      	mov	sp, r7
20000c92:	b003      	add	sp, #12
20000c94:	bd90      	pop	{r4, r7, pc}

20000c96 <RCC_AdjustHSICalibrationValue>:
  * @param  HSICalibrationValue: specifies the calibration trimming value.
  *         This parameter must be a number between 0 and 0x1F.
  * @retval None
  */
void RCC_AdjustHSICalibrationValue(uint8_t HSICalibrationValue)
{
20000c96:	b580      	push	{r7, lr}
20000c98:	b084      	sub	sp, #16
20000c9a:	af00      	add	r7, sp, #0
20000c9c:	0002      	movs	r2, r0
20000c9e:	1dfb      	adds	r3, r7, #7
20000ca0:	701a      	strb	r2, [r3, #0]
  uint32_t tmpreg = 0;
20000ca2:	2300      	movs	r3, #0
20000ca4:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_CALIBRATION_VALUE(HSICalibrationValue));

  tmpreg = RCC->CR;
20000ca6:	4b0a      	ldr	r3, [pc, #40]	; (20000cd0 <RCC_AdjustHSICalibrationValue+0x3a>)
20000ca8:	681b      	ldr	r3, [r3, #0]
20000caa:	60fb      	str	r3, [r7, #12]

  /* Clear HSITRIM[4:0] bits */
  tmpreg &= ~RCC_CR_HSITRIM;
20000cac:	68fb      	ldr	r3, [r7, #12]
20000cae:	22f8      	movs	r2, #248	; 0xf8
20000cb0:	4393      	bics	r3, r2
20000cb2:	60fb      	str	r3, [r7, #12]

  /* Set the HSITRIM[4:0] bits according to HSICalibrationValue value */
  tmpreg |= (uint32_t)HSICalibrationValue << 3;
20000cb4:	1dfb      	adds	r3, r7, #7
20000cb6:	781b      	ldrb	r3, [r3, #0]
20000cb8:	00db      	lsls	r3, r3, #3
20000cba:	68fa      	ldr	r2, [r7, #12]
20000cbc:	4313      	orrs	r3, r2
20000cbe:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CR = tmpreg;
20000cc0:	4b03      	ldr	r3, [pc, #12]	; (20000cd0 <RCC_AdjustHSICalibrationValue+0x3a>)
20000cc2:	68fa      	ldr	r2, [r7, #12]
20000cc4:	601a      	str	r2, [r3, #0]
}
20000cc6:	46c0      	nop			; (mov r8, r8)
20000cc8:	46bd      	mov	sp, r7
20000cca:	b004      	add	sp, #16
20000ccc:	bd80      	pop	{r7, pc}
20000cce:	46c0      	nop			; (mov r8, r8)
20000cd0:	40023800 	andmi	r3, r2, r0, lsl #16

20000cd4 <RCC_HSICmd>:
  * @note   When the HSI is stopped, HSIRDY flag goes low after 6 HSI oscillator
  *         clock cycles.  
  * @retval None
  */
void RCC_HSICmd(FunctionalState NewState)
{
20000cd4:	b580      	push	{r7, lr}
20000cd6:	b082      	sub	sp, #8
20000cd8:	af00      	add	r7, sp, #0
20000cda:	0002      	movs	r2, r0
20000cdc:	1dfb      	adds	r3, r7, #7
20000cde:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CR_HSION_BB = (uint32_t)NewState;
20000ce0:	4b03      	ldr	r3, [pc, #12]	; (20000cf0 <RCC_HSICmd+0x1c>)
20000ce2:	1dfa      	adds	r2, r7, #7
20000ce4:	7812      	ldrb	r2, [r2, #0]
20000ce6:	601a      	str	r2, [r3, #0]
}
20000ce8:	46c0      	nop			; (mov r8, r8)
20000cea:	46bd      	mov	sp, r7
20000cec:	b002      	add	sp, #8
20000cee:	bd80      	pop	{r7, pc}
20000cf0:	42470000 	submi	r0, r7, #0

20000cf4 <RCC_LSEConfig>:
  *            @arg RCC_LSE_ON: turn ON the LSE oscillator
  *            @arg RCC_LSE_Bypass: LSE oscillator bypassed with external clock
  * @retval None
  */
void RCC_LSEConfig(uint8_t RCC_LSE)
{
20000cf4:	b580      	push	{r7, lr}
20000cf6:	b082      	sub	sp, #8
20000cf8:	af00      	add	r7, sp, #0
20000cfa:	0002      	movs	r2, r0
20000cfc:	1dfb      	adds	r3, r7, #7
20000cfe:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_LSE(RCC_LSE));

  /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
  /* Reset LSEON bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
20000d00:	4b0c      	ldr	r3, [pc, #48]	; (20000d34 <RCC_LSEConfig+0x40>)
20000d02:	2200      	movs	r2, #0
20000d04:	701a      	strb	r2, [r3, #0]

  /* Reset LSEBYP bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
20000d06:	4b0b      	ldr	r3, [pc, #44]	; (20000d34 <RCC_LSEConfig+0x40>)
20000d08:	2200      	movs	r2, #0
20000d0a:	701a      	strb	r2, [r3, #0]

  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch (RCC_LSE)
20000d0c:	1dfb      	adds	r3, r7, #7
20000d0e:	781b      	ldrb	r3, [r3, #0]
20000d10:	2b01      	cmp	r3, #1
20000d12:	d002      	beq.n	20000d1a <RCC_LSEConfig+0x26>
20000d14:	2b04      	cmp	r3, #4
20000d16:	d004      	beq.n	20000d22 <RCC_LSEConfig+0x2e>
    case RCC_LSE_Bypass:
      /* Set LSEBYP and LSEON bits */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
      break;
    default:
      break;
20000d18:	e007      	b.n	20000d2a <RCC_LSEConfig+0x36>
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_ON;
20000d1a:	4b06      	ldr	r3, [pc, #24]	; (20000d34 <RCC_LSEConfig+0x40>)
20000d1c:	2201      	movs	r2, #1
20000d1e:	701a      	strb	r2, [r3, #0]
      break;
20000d20:	e003      	b.n	20000d2a <RCC_LSEConfig+0x36>
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
20000d22:	4b04      	ldr	r3, [pc, #16]	; (20000d34 <RCC_LSEConfig+0x40>)
20000d24:	2205      	movs	r2, #5
20000d26:	701a      	strb	r2, [r3, #0]
      break;
20000d28:	46c0      	nop			; (mov r8, r8)
  }
}
20000d2a:	46c0      	nop			; (mov r8, r8)
20000d2c:	46bd      	mov	sp, r7
20000d2e:	b002      	add	sp, #8
20000d30:	bd80      	pop	{r7, pc}
20000d32:	46c0      	nop			; (mov r8, r8)
20000d34:	40023870 	andmi	r3, r2, r0, ror r8

20000d38 <RCC_LSICmd>:
  * @note   When the LSI is stopped, LSIRDY flag goes low after 6 LSI oscillator
  *         clock cycles. 
  * @retval None
  */
void RCC_LSICmd(FunctionalState NewState)
{
20000d38:	b580      	push	{r7, lr}
20000d3a:	b082      	sub	sp, #8
20000d3c:	af00      	add	r7, sp, #0
20000d3e:	0002      	movs	r2, r0
20000d40:	1dfb      	adds	r3, r7, #7
20000d42:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CSR_LSION_BB = (uint32_t)NewState;
20000d44:	4b03      	ldr	r3, [pc, #12]	; (20000d54 <RCC_LSICmd+0x1c>)
20000d46:	1dfa      	adds	r2, r7, #7
20000d48:	7812      	ldrb	r2, [r2, #0]
20000d4a:	601a      	str	r2, [r3, #0]
}
20000d4c:	46c0      	nop			; (mov r8, r8)
20000d4e:	46bd      	mov	sp, r7
20000d50:	b002      	add	sp, #8
20000d52:	bd80      	pop	{r7, pc}
20000d54:	42470e80 	submi	r0, r7, #128, 28	; 0x800

20000d58 <RCC_PLLConfig>:
  *         correctly.
  *   
  * @retval None
  */
void RCC_PLLConfig(uint32_t RCC_PLLSource, uint32_t PLLM, uint32_t PLLN, uint32_t PLLP, uint32_t PLLQ)
{
20000d58:	b580      	push	{r7, lr}
20000d5a:	b084      	sub	sp, #16
20000d5c:	af00      	add	r7, sp, #0
20000d5e:	60f8      	str	r0, [r7, #12]
20000d60:	60b9      	str	r1, [r7, #8]
20000d62:	607a      	str	r2, [r7, #4]
20000d64:	603b      	str	r3, [r7, #0]
  assert_param(IS_RCC_PLLM_VALUE(PLLM));
  assert_param(IS_RCC_PLLN_VALUE(PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLP));
  assert_param(IS_RCC_PLLQ_VALUE(PLLQ));

  RCC->PLLCFGR = PLLM | (PLLN << 6) | (((PLLP >> 1) -1) << 16) | (RCC_PLLSource) |
20000d66:	687b      	ldr	r3, [r7, #4]
20000d68:	019a      	lsls	r2, r3, #6
20000d6a:	68bb      	ldr	r3, [r7, #8]
20000d6c:	431a      	orrs	r2, r3
20000d6e:	683b      	ldr	r3, [r7, #0]
20000d70:	085b      	lsrs	r3, r3, #1
20000d72:	3b01      	subs	r3, #1
20000d74:	041b      	lsls	r3, r3, #16
20000d76:	431a      	orrs	r2, r3
20000d78:	68fb      	ldr	r3, [r7, #12]
20000d7a:	431a      	orrs	r2, r3
20000d7c:	0011      	movs	r1, r2
                 (PLLQ << 24);
20000d7e:	69bb      	ldr	r3, [r7, #24]
20000d80:	061a      	lsls	r2, r3, #24
  RCC->PLLCFGR = PLLM | (PLLN << 6) | (((PLLP >> 1) -1) << 16) | (RCC_PLLSource) |
20000d82:	4b03      	ldr	r3, [pc, #12]	; (20000d90 <RCC_PLLConfig+0x38>)
20000d84:	430a      	orrs	r2, r1
20000d86:	605a      	str	r2, [r3, #4]
}
20000d88:	46c0      	nop			; (mov r8, r8)
20000d8a:	46bd      	mov	sp, r7
20000d8c:	b004      	add	sp, #16
20000d8e:	bd80      	pop	{r7, pc}
20000d90:	40023800 	andmi	r3, r2, r0, lsl #16

20000d94 <RCC_PLLCmd>:
  * @note   The main PLL is disabled by hardware when entering STOP and STANDBY modes.
  * @param  NewState: new state of the main PLL. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_PLLCmd(FunctionalState NewState)
{
20000d94:	b580      	push	{r7, lr}
20000d96:	b082      	sub	sp, #8
20000d98:	af00      	add	r7, sp, #0
20000d9a:	0002      	movs	r2, r0
20000d9c:	1dfb      	adds	r3, r7, #7
20000d9e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_PLLON_BB = (uint32_t)NewState;
20000da0:	4b03      	ldr	r3, [pc, #12]	; (20000db0 <RCC_PLLCmd+0x1c>)
20000da2:	1dfa      	adds	r2, r7, #7
20000da4:	7812      	ldrb	r2, [r2, #0]
20000da6:	601a      	str	r2, [r3, #0]
}
20000da8:	46c0      	nop			; (mov r8, r8)
20000daa:	46bd      	mov	sp, r7
20000dac:	b002      	add	sp, #8
20000dae:	bd80      	pop	{r7, pc}
20000db0:	42470060 	submi	r0, r7, #96	; 0x60

20000db4 <RCC_PLLI2SConfig>:
  *         on the I2S clock frequency.
  *   
  * @retval None
  */
void RCC_PLLI2SConfig(uint32_t PLLI2SN, uint32_t PLLI2SR)
{
20000db4:	b580      	push	{r7, lr}
20000db6:	b082      	sub	sp, #8
20000db8:	af00      	add	r7, sp, #0
20000dba:	6078      	str	r0, [r7, #4]
20000dbc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RCC_PLLI2SN_VALUE(PLLI2SN));
  assert_param(IS_RCC_PLLI2SR_VALUE(PLLI2SR));

  RCC->PLLI2SCFGR = (PLLI2SN << 6) | (PLLI2SR << 28);
20000dbe:	687b      	ldr	r3, [r7, #4]
20000dc0:	019a      	lsls	r2, r3, #6
20000dc2:	683b      	ldr	r3, [r7, #0]
20000dc4:	071b      	lsls	r3, r3, #28
20000dc6:	4904      	ldr	r1, [pc, #16]	; (20000dd8 <RCC_PLLI2SConfig+0x24>)
20000dc8:	4313      	orrs	r3, r2
20000dca:	2284      	movs	r2, #132	; 0x84
20000dcc:	508b      	str	r3, [r1, r2]
}
20000dce:	46c0      	nop			; (mov r8, r8)
20000dd0:	46bd      	mov	sp, r7
20000dd2:	b002      	add	sp, #8
20000dd4:	bd80      	pop	{r7, pc}
20000dd6:	46c0      	nop			; (mov r8, r8)
20000dd8:	40023800 	andmi	r3, r2, r0, lsl #16

20000ddc <RCC_PLLI2SCmd>:
  * @note   The PLLI2S is disabled by hardware when entering STOP and STANDBY modes.  
  * @param  NewState: new state of the PLLI2S. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_PLLI2SCmd(FunctionalState NewState)
{
20000ddc:	b580      	push	{r7, lr}
20000dde:	b082      	sub	sp, #8
20000de0:	af00      	add	r7, sp, #0
20000de2:	0002      	movs	r2, r0
20000de4:	1dfb      	adds	r3, r7, #7
20000de6:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_PLLI2SON_BB = (uint32_t)NewState;
20000de8:	4b03      	ldr	r3, [pc, #12]	; (20000df8 <RCC_PLLI2SCmd+0x1c>)
20000dea:	1dfa      	adds	r2, r7, #7
20000dec:	7812      	ldrb	r2, [r2, #0]
20000dee:	601a      	str	r2, [r3, #0]
}
20000df0:	46c0      	nop			; (mov r8, r8)
20000df2:	46bd      	mov	sp, r7
20000df4:	b002      	add	sp, #8
20000df6:	bd80      	pop	{r7, pc}
20000df8:	42470068 	submi	r0, r7, #104	; 0x68

20000dfc <RCC_PLLSAIConfig>:
  *          This parameter must be a number between 2 and 7.
  *   
  * @retval None
  */
void RCC_PLLSAIConfig(uint32_t PLLSAIN, uint32_t PLLSAIQ, uint32_t PLLSAIR)
{
20000dfc:	b580      	push	{r7, lr}
20000dfe:	b084      	sub	sp, #16
20000e00:	af00      	add	r7, sp, #0
20000e02:	60f8      	str	r0, [r7, #12]
20000e04:	60b9      	str	r1, [r7, #8]
20000e06:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_PLLSAIN_VALUE(PLLSAIN));
  assert_param(IS_RCC_PLLSAIR_VALUE(PLLSAIR));
  assert_param(IS_RCC_PLLSAIQ_VALUE(PLLSAIQ));
  
  RCC->PLLSAICFGR = (PLLSAIN << 6) | (PLLSAIQ << 24) | (PLLSAIR << 28);
20000e08:	68fb      	ldr	r3, [r7, #12]
20000e0a:	019a      	lsls	r2, r3, #6
20000e0c:	68bb      	ldr	r3, [r7, #8]
20000e0e:	061b      	lsls	r3, r3, #24
20000e10:	431a      	orrs	r2, r3
20000e12:	687b      	ldr	r3, [r7, #4]
20000e14:	071b      	lsls	r3, r3, #28
20000e16:	4904      	ldr	r1, [pc, #16]	; (20000e28 <RCC_PLLSAIConfig+0x2c>)
20000e18:	4313      	orrs	r3, r2
20000e1a:	2288      	movs	r2, #136	; 0x88
20000e1c:	508b      	str	r3, [r1, r2]
}
20000e1e:	46c0      	nop			; (mov r8, r8)
20000e20:	46bd      	mov	sp, r7
20000e22:	b004      	add	sp, #16
20000e24:	bd80      	pop	{r7, pc}
20000e26:	46c0      	nop			; (mov r8, r8)
20000e28:	40023800 	andmi	r3, r2, r0, lsl #16

20000e2c <RCC_PLLSAICmd>:
  * @note   The PLLSAI is disabled by hardware when entering STOP and STANDBY modes.  
  * @param  NewState: new state of the PLLSAI. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_PLLSAICmd(FunctionalState NewState)
{
20000e2c:	b580      	push	{r7, lr}
20000e2e:	b082      	sub	sp, #8
20000e30:	af00      	add	r7, sp, #0
20000e32:	0002      	movs	r2, r0
20000e34:	1dfb      	adds	r3, r7, #7
20000e36:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_PLLSAION_BB = (uint32_t)NewState;
20000e38:	4b03      	ldr	r3, [pc, #12]	; (20000e48 <RCC_PLLSAICmd+0x1c>)
20000e3a:	1dfa      	adds	r2, r7, #7
20000e3c:	7812      	ldrb	r2, [r2, #0]
20000e3e:	601a      	str	r2, [r3, #0]
}
20000e40:	46c0      	nop			; (mov r8, r8)
20000e42:	46bd      	mov	sp, r7
20000e44:	b002      	add	sp, #8
20000e46:	bd80      	pop	{r7, pc}
20000e48:	42470070 	submi	r0, r7, #112	; 0x70

20000e4c <RCC_ClockSecuritySystemCmd>:
  * @param  NewState: new state of the Clock Security System.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_ClockSecuritySystemCmd(FunctionalState NewState)
{
20000e4c:	b580      	push	{r7, lr}
20000e4e:	b082      	sub	sp, #8
20000e50:	af00      	add	r7, sp, #0
20000e52:	0002      	movs	r2, r0
20000e54:	1dfb      	adds	r3, r7, #7
20000e56:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_CSSON_BB = (uint32_t)NewState;
20000e58:	4b03      	ldr	r3, [pc, #12]	; (20000e68 <RCC_ClockSecuritySystemCmd+0x1c>)
20000e5a:	1dfa      	adds	r2, r7, #7
20000e5c:	7812      	ldrb	r2, [r2, #0]
20000e5e:	601a      	str	r2, [r3, #0]
}
20000e60:	46c0      	nop			; (mov r8, r8)
20000e62:	46bd      	mov	sp, r7
20000e64:	b002      	add	sp, #8
20000e66:	bd80      	pop	{r7, pc}
20000e68:	4247004c 	submi	r0, r7, #76	; 0x4c

20000e6c <RCC_MCO1Config>:
  *            @arg RCC_MCO1Div_4: division by 4 applied to MCO1 clock
  *            @arg RCC_MCO1Div_5: division by 5 applied to MCO1 clock
  * @retval None
  */
void RCC_MCO1Config(uint32_t RCC_MCO1Source, uint32_t RCC_MCO1Div)
{
20000e6c:	b580      	push	{r7, lr}
20000e6e:	b084      	sub	sp, #16
20000e70:	af00      	add	r7, sp, #0
20000e72:	6078      	str	r0, [r7, #4]
20000e74:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
20000e76:	2300      	movs	r3, #0
20000e78:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_MCO1SOURCE(RCC_MCO1Source));
  assert_param(IS_RCC_MCO1DIV(RCC_MCO1Div));  

  tmpreg = RCC->CFGR;
20000e7a:	4b0a      	ldr	r3, [pc, #40]	; (20000ea4 <RCC_MCO1Config+0x38>)
20000e7c:	689b      	ldr	r3, [r3, #8]
20000e7e:	60fb      	str	r3, [r7, #12]

  /* Clear MCO1[1:0] and MCO1PRE[2:0] bits */
  tmpreg &= CFGR_MCO1_RESET_MASK;
20000e80:	68fb      	ldr	r3, [r7, #12]
20000e82:	4a09      	ldr	r2, [pc, #36]	; (20000ea8 <RCC_MCO1Config+0x3c>)
20000e84:	4013      	ands	r3, r2
20000e86:	60fb      	str	r3, [r7, #12]

  /* Select MCO1 clock source and prescaler */
  tmpreg |= RCC_MCO1Source | RCC_MCO1Div;
20000e88:	687a      	ldr	r2, [r7, #4]
20000e8a:	683b      	ldr	r3, [r7, #0]
20000e8c:	4313      	orrs	r3, r2
20000e8e:	68fa      	ldr	r2, [r7, #12]
20000e90:	4313      	orrs	r3, r2
20000e92:	60fb      	str	r3, [r7, #12]
  
  /* Store the new value */
  RCC->CFGR = tmpreg;
20000e94:	4b03      	ldr	r3, [pc, #12]	; (20000ea4 <RCC_MCO1Config+0x38>)
20000e96:	68fa      	ldr	r2, [r7, #12]
20000e98:	609a      	str	r2, [r3, #8]

#if defined(STM32F410xx)
  RCC_MCO1Cmd(ENABLE);
#endif /* STM32F410xx */   
}
20000e9a:	46c0      	nop			; (mov r8, r8)
20000e9c:	46bd      	mov	sp, r7
20000e9e:	b004      	add	sp, #16
20000ea0:	bd80      	pop	{r7, pc}
20000ea2:	46c0      	nop			; (mov r8, r8)
20000ea4:	40023800 	andmi	r3, r2, r0, lsl #16
20000ea8:	f89fffff 			; <UNDEFINED> instruction: 0xf89fffff

20000eac <RCC_MCO2Config>:
  * @note  For STM32F410xx devices to output I2SCLK clock on MCO2 you should have
  *        at last one of the SPI clocks enabled (SPI1, SPI2 or SPI5).
  * @retval None
  */
void RCC_MCO2Config(uint32_t RCC_MCO2Source, uint32_t RCC_MCO2Div)
{
20000eac:	b580      	push	{r7, lr}
20000eae:	b084      	sub	sp, #16
20000eb0:	af00      	add	r7, sp, #0
20000eb2:	6078      	str	r0, [r7, #4]
20000eb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
20000eb6:	2300      	movs	r3, #0
20000eb8:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_MCO2SOURCE(RCC_MCO2Source));
  assert_param(IS_RCC_MCO2DIV(RCC_MCO2Div));
  
  tmpreg = RCC->CFGR;
20000eba:	4b0a      	ldr	r3, [pc, #40]	; (20000ee4 <RCC_MCO2Config+0x38>)
20000ebc:	689b      	ldr	r3, [r3, #8]
20000ebe:	60fb      	str	r3, [r7, #12]
  
  /* Clear MCO2 and MCO2PRE[2:0] bits */
  tmpreg &= CFGR_MCO2_RESET_MASK;
20000ec0:	68fb      	ldr	r3, [r7, #12]
20000ec2:	015b      	lsls	r3, r3, #5
20000ec4:	095b      	lsrs	r3, r3, #5
20000ec6:	60fb      	str	r3, [r7, #12]

  /* Select MCO2 clock source and prescaler */
  tmpreg |= RCC_MCO2Source | RCC_MCO2Div;
20000ec8:	687a      	ldr	r2, [r7, #4]
20000eca:	683b      	ldr	r3, [r7, #0]
20000ecc:	4313      	orrs	r3, r2
20000ece:	68fa      	ldr	r2, [r7, #12]
20000ed0:	4313      	orrs	r3, r2
20000ed2:	60fb      	str	r3, [r7, #12]
  
  /* Store the new value */
  RCC->CFGR = tmpreg;
20000ed4:	4b03      	ldr	r3, [pc, #12]	; (20000ee4 <RCC_MCO2Config+0x38>)
20000ed6:	68fa      	ldr	r2, [r7, #12]
20000ed8:	609a      	str	r2, [r3, #8]

#if defined(STM32F410xx)
  RCC_MCO2Cmd(ENABLE);
#endif /* STM32F410xx */   
}
20000eda:	46c0      	nop			; (mov r8, r8)
20000edc:	46bd      	mov	sp, r7
20000ede:	b004      	add	sp, #16
20000ee0:	bd80      	pop	{r7, pc}
20000ee2:	46c0      	nop			; (mov r8, r8)
20000ee4:	40023800 	andmi	r3, r2, r0, lsl #16

20000ee8 <RCC_SYSCLKConfig>:
  *            @arg RCC_SYSCLKSource_PLLCLK: PLL selected as system clock source (RCC_SYSCLKSource_PLLPCLK for STM32F446xx devices)
  *            @arg RCC_SYSCLKSource_PLLRCLK: PLL R selected as system clock source only for STM32F412xG, STM32F413_423xx and STM32F446xx devices
  * @retval None
  */
void RCC_SYSCLKConfig(uint32_t RCC_SYSCLKSource)
{
20000ee8:	b580      	push	{r7, lr}
20000eea:	b084      	sub	sp, #16
20000eec:	af00      	add	r7, sp, #0
20000eee:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
20000ef0:	2300      	movs	r3, #0
20000ef2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_SYSCLK_SOURCE(RCC_SYSCLKSource));

  tmpreg = RCC->CFGR;
20000ef4:	4b08      	ldr	r3, [pc, #32]	; (20000f18 <RCC_SYSCLKConfig+0x30>)
20000ef6:	689b      	ldr	r3, [r3, #8]
20000ef8:	60fb      	str	r3, [r7, #12]

  /* Clear SW[1:0] bits */
  tmpreg &= ~RCC_CFGR_SW;
20000efa:	68fb      	ldr	r3, [r7, #12]
20000efc:	2203      	movs	r2, #3
20000efe:	4393      	bics	r3, r2
20000f00:	60fb      	str	r3, [r7, #12]

  /* Set SW[1:0] bits according to RCC_SYSCLKSource value */
  tmpreg |= RCC_SYSCLKSource;
20000f02:	68fa      	ldr	r2, [r7, #12]
20000f04:	687b      	ldr	r3, [r7, #4]
20000f06:	4313      	orrs	r3, r2
20000f08:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;
20000f0a:	4b03      	ldr	r3, [pc, #12]	; (20000f18 <RCC_SYSCLKConfig+0x30>)
20000f0c:	68fa      	ldr	r2, [r7, #12]
20000f0e:	609a      	str	r2, [r3, #8]
}
20000f10:	46c0      	nop			; (mov r8, r8)
20000f12:	46bd      	mov	sp, r7
20000f14:	b004      	add	sp, #16
20000f16:	bd80      	pop	{r7, pc}
20000f18:	40023800 	andmi	r3, r2, r0, lsl #16

20000f1c <RCC_GetSYSCLKSource>:
  *              - 0x04: HSE used as system clock
  *              - 0x08: PLL used as system clock (PLL P for STM32F446xx devices)
  *              - 0x0C: PLL R used as system clock (only for STM32F412xG, STM32F413_423xx and STM32F446xx devices)
  */
uint8_t RCC_GetSYSCLKSource(void)
{
20000f1c:	b580      	push	{r7, lr}
20000f1e:	af00      	add	r7, sp, #0
  return ((uint8_t)(RCC->CFGR & RCC_CFGR_SWS));
20000f20:	4b04      	ldr	r3, [pc, #16]	; (20000f34 <RCC_GetSYSCLKSource+0x18>)
20000f22:	689b      	ldr	r3, [r3, #8]
20000f24:	b2db      	uxtb	r3, r3
20000f26:	220c      	movs	r2, #12
20000f28:	4013      	ands	r3, r2
20000f2a:	b2db      	uxtb	r3, r3
}
20000f2c:	0018      	movs	r0, r3
20000f2e:	46bd      	mov	sp, r7
20000f30:	bd80      	pop	{r7, pc}
20000f32:	46c0      	nop			; (mov r8, r8)
20000f34:	40023800 	andmi	r3, r2, r0, lsl #16

20000f38 <RCC_HCLKConfig>:
  *            @arg RCC_SYSCLK_Div256: AHB clock = SYSCLK/256
  *            @arg RCC_SYSCLK_Div512: AHB clock = SYSCLK/512
  * @retval None
  */
void RCC_HCLKConfig(uint32_t RCC_SYSCLK)
{
20000f38:	b580      	push	{r7, lr}
20000f3a:	b084      	sub	sp, #16
20000f3c:	af00      	add	r7, sp, #0
20000f3e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
20000f40:	2300      	movs	r3, #0
20000f42:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_HCLK(RCC_SYSCLK));

  tmpreg = RCC->CFGR;
20000f44:	4b08      	ldr	r3, [pc, #32]	; (20000f68 <RCC_HCLKConfig+0x30>)
20000f46:	689b      	ldr	r3, [r3, #8]
20000f48:	60fb      	str	r3, [r7, #12]

  /* Clear HPRE[3:0] bits */
  tmpreg &= ~RCC_CFGR_HPRE;
20000f4a:	68fb      	ldr	r3, [r7, #12]
20000f4c:	22f0      	movs	r2, #240	; 0xf0
20000f4e:	4393      	bics	r3, r2
20000f50:	60fb      	str	r3, [r7, #12]

  /* Set HPRE[3:0] bits according to RCC_SYSCLK value */
  tmpreg |= RCC_SYSCLK;
20000f52:	68fa      	ldr	r2, [r7, #12]
20000f54:	687b      	ldr	r3, [r7, #4]
20000f56:	4313      	orrs	r3, r2
20000f58:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;
20000f5a:	4b03      	ldr	r3, [pc, #12]	; (20000f68 <RCC_HCLKConfig+0x30>)
20000f5c:	68fa      	ldr	r2, [r7, #12]
20000f5e:	609a      	str	r2, [r3, #8]
}
20000f60:	46c0      	nop			; (mov r8, r8)
20000f62:	46bd      	mov	sp, r7
20000f64:	b004      	add	sp, #16
20000f66:	bd80      	pop	{r7, pc}
20000f68:	40023800 	andmi	r3, r2, r0, lsl #16

20000f6c <RCC_PCLK1Config>:
  *            @arg RCC_HCLK_Div8:  APB1 clock = HCLK/8
  *            @arg RCC_HCLK_Div16: APB1 clock = HCLK/16
  * @retval None
  */
void RCC_PCLK1Config(uint32_t RCC_HCLK)
{
20000f6c:	b580      	push	{r7, lr}
20000f6e:	b084      	sub	sp, #16
20000f70:	af00      	add	r7, sp, #0
20000f72:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
20000f74:	2300      	movs	r3, #0
20000f76:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));

  tmpreg = RCC->CFGR;
20000f78:	4b08      	ldr	r3, [pc, #32]	; (20000f9c <RCC_PCLK1Config+0x30>)
20000f7a:	689b      	ldr	r3, [r3, #8]
20000f7c:	60fb      	str	r3, [r7, #12]

  /* Clear PPRE1[2:0] bits */
  tmpreg &= ~RCC_CFGR_PPRE1;
20000f7e:	68fb      	ldr	r3, [r7, #12]
20000f80:	4a07      	ldr	r2, [pc, #28]	; (20000fa0 <RCC_PCLK1Config+0x34>)
20000f82:	4013      	ands	r3, r2
20000f84:	60fb      	str	r3, [r7, #12]

  /* Set PPRE1[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK;
20000f86:	68fa      	ldr	r2, [r7, #12]
20000f88:	687b      	ldr	r3, [r7, #4]
20000f8a:	4313      	orrs	r3, r2
20000f8c:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;
20000f8e:	4b03      	ldr	r3, [pc, #12]	; (20000f9c <RCC_PCLK1Config+0x30>)
20000f90:	68fa      	ldr	r2, [r7, #12]
20000f92:	609a      	str	r2, [r3, #8]
}
20000f94:	46c0      	nop			; (mov r8, r8)
20000f96:	46bd      	mov	sp, r7
20000f98:	b004      	add	sp, #16
20000f9a:	bd80      	pop	{r7, pc}
20000f9c:	40023800 	andmi	r3, r2, r0, lsl #16
20000fa0:	ffffe3ff 			; <UNDEFINED> instruction: 0xffffe3ff

20000fa4 <RCC_PCLK2Config>:
  *            @arg RCC_HCLK_Div8:  APB2 clock = HCLK/8
  *            @arg RCC_HCLK_Div16: APB2 clock = HCLK/16
  * @retval None
  */
void RCC_PCLK2Config(uint32_t RCC_HCLK)
{
20000fa4:	b580      	push	{r7, lr}
20000fa6:	b084      	sub	sp, #16
20000fa8:	af00      	add	r7, sp, #0
20000faa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
20000fac:	2300      	movs	r3, #0
20000fae:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));

  tmpreg = RCC->CFGR;
20000fb0:	4b09      	ldr	r3, [pc, #36]	; (20000fd8 <RCC_PCLK2Config+0x34>)
20000fb2:	689b      	ldr	r3, [r3, #8]
20000fb4:	60fb      	str	r3, [r7, #12]

  /* Clear PPRE2[2:0] bits */
  tmpreg &= ~RCC_CFGR_PPRE2;
20000fb6:	68fb      	ldr	r3, [r7, #12]
20000fb8:	4a08      	ldr	r2, [pc, #32]	; (20000fdc <RCC_PCLK2Config+0x38>)
20000fba:	4013      	ands	r3, r2
20000fbc:	60fb      	str	r3, [r7, #12]

  /* Set PPRE2[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK << 3;
20000fbe:	687b      	ldr	r3, [r7, #4]
20000fc0:	00db      	lsls	r3, r3, #3
20000fc2:	68fa      	ldr	r2, [r7, #12]
20000fc4:	4313      	orrs	r3, r2
20000fc6:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;
20000fc8:	4b03      	ldr	r3, [pc, #12]	; (20000fd8 <RCC_PCLK2Config+0x34>)
20000fca:	68fa      	ldr	r2, [r7, #12]
20000fcc:	609a      	str	r2, [r3, #8]
}
20000fce:	46c0      	nop			; (mov r8, r8)
20000fd0:	46bd      	mov	sp, r7
20000fd2:	b004      	add	sp, #16
20000fd4:	bd80      	pop	{r7, pc}
20000fd6:	46c0      	nop			; (mov r8, r8)
20000fd8:	40023800 	andmi	r3, r2, r0, lsl #16
20000fdc:	ffff1fff 			; <UNDEFINED> instruction: 0xffff1fff

20000fe0 <RCC_GetClocksFreq>:
  *         configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
20000fe0:	b580      	push	{r7, lr}
20000fe2:	b088      	sub	sp, #32
20000fe4:	af00      	add	r7, sp, #0
20000fe6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
20000fe8:	2300      	movs	r3, #0
20000fea:	61bb      	str	r3, [r7, #24]
20000fec:	2300      	movs	r3, #0
20000fee:	617b      	str	r3, [r7, #20]
20000ff0:	2300      	movs	r3, #0
20000ff2:	61fb      	str	r3, [r7, #28]
20000ff4:	2302      	movs	r3, #2
20000ff6:	613b      	str	r3, [r7, #16]
20000ff8:	2300      	movs	r3, #0
20000ffa:	60fb      	str	r3, [r7, #12]
20000ffc:	2302      	movs	r3, #2
20000ffe:	60bb      	str	r3, [r7, #8]
#if defined(STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F446xx)  
  uint32_t pllr = 2;
#endif /* STM32F412xG || STM32F413_423xx || STM32F446xx */
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
20001000:	4b49      	ldr	r3, [pc, #292]	; (20001128 <RCC_GetClocksFreq+0x148>)
20001002:	689b      	ldr	r3, [r3, #8]
20001004:	220c      	movs	r2, #12
20001006:	4013      	ands	r3, r2
20001008:	61bb      	str	r3, [r7, #24]
  
  switch (tmp)
2000100a:	69bb      	ldr	r3, [r7, #24]
2000100c:	2b04      	cmp	r3, #4
2000100e:	d007      	beq.n	20001020 <RCC_GetClocksFreq+0x40>
20001010:	2b08      	cmp	r3, #8
20001012:	d009      	beq.n	20001028 <RCC_GetClocksFreq+0x48>
20001014:	2b00      	cmp	r3, #0
20001016:	d141      	bne.n	2000109c <RCC_GetClocksFreq+0xbc>
  {
  case 0x00:  /* HSI used as system clock source */
    RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
20001018:	687b      	ldr	r3, [r7, #4]
2000101a:	4a44      	ldr	r2, [pc, #272]	; (2000112c <RCC_GetClocksFreq+0x14c>)
2000101c:	601a      	str	r2, [r3, #0]
    break;
2000101e:	e041      	b.n	200010a4 <RCC_GetClocksFreq+0xc4>
  case 0x04:  /* HSE used as system clock  source */
    RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
20001020:	687b      	ldr	r3, [r7, #4]
20001022:	4a43      	ldr	r2, [pc, #268]	; (20001130 <RCC_GetClocksFreq+0x150>)
20001024:	601a      	str	r2, [r3, #0]
    break;
20001026:	e03d      	b.n	200010a4 <RCC_GetClocksFreq+0xc4>
  case 0x08:  /* PLL P used as system clock  source */
    
    /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLP
    */    
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
20001028:	4b3f      	ldr	r3, [pc, #252]	; (20001128 <RCC_GetClocksFreq+0x148>)
2000102a:	685b      	ldr	r3, [r3, #4]
2000102c:	0d9b      	lsrs	r3, r3, #22
2000102e:	2201      	movs	r2, #1
20001030:	4013      	ands	r3, r2
20001032:	60fb      	str	r3, [r7, #12]
    pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
20001034:	4b3c      	ldr	r3, [pc, #240]	; (20001128 <RCC_GetClocksFreq+0x148>)
20001036:	685b      	ldr	r3, [r3, #4]
20001038:	223f      	movs	r2, #63	; 0x3f
2000103a:	4013      	ands	r3, r2
2000103c:	60bb      	str	r3, [r7, #8]
    
    if (pllsource != 0)
2000103e:	68fb      	ldr	r3, [r7, #12]
20001040:	2b00      	cmp	r3, #0
20001042:	d00d      	beq.n	20001060 <RCC_GetClocksFreq+0x80>
    {
      /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
20001044:	68b9      	ldr	r1, [r7, #8]
20001046:	483a      	ldr	r0, [pc, #232]	; (20001130 <RCC_GetClocksFreq+0x150>)
20001048:	f001 fab4 	bl	200025b4 <__udivsi3>
2000104c:	0003      	movs	r3, r0
2000104e:	001a      	movs	r2, r3
20001050:	4b35      	ldr	r3, [pc, #212]	; (20001128 <RCC_GetClocksFreq+0x148>)
20001052:	685b      	ldr	r3, [r3, #4]
20001054:	099b      	lsrs	r3, r3, #6
20001056:	05db      	lsls	r3, r3, #23
20001058:	0ddb      	lsrs	r3, r3, #23
2000105a:	4353      	muls	r3, r2
2000105c:	61fb      	str	r3, [r7, #28]
2000105e:	e00c      	b.n	2000107a <RCC_GetClocksFreq+0x9a>
    }
    else
    {
      /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
20001060:	68b9      	ldr	r1, [r7, #8]
20001062:	4832      	ldr	r0, [pc, #200]	; (2000112c <RCC_GetClocksFreq+0x14c>)
20001064:	f001 faa6 	bl	200025b4 <__udivsi3>
20001068:	0003      	movs	r3, r0
2000106a:	001a      	movs	r2, r3
2000106c:	4b2e      	ldr	r3, [pc, #184]	; (20001128 <RCC_GetClocksFreq+0x148>)
2000106e:	685b      	ldr	r3, [r3, #4]
20001070:	099b      	lsrs	r3, r3, #6
20001072:	05db      	lsls	r3, r3, #23
20001074:	0ddb      	lsrs	r3, r3, #23
20001076:	4353      	muls	r3, r2
20001078:	61fb      	str	r3, [r7, #28]
    }
    
    pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
2000107a:	4b2b      	ldr	r3, [pc, #172]	; (20001128 <RCC_GetClocksFreq+0x148>)
2000107c:	685b      	ldr	r3, [r3, #4]
2000107e:	0c1b      	lsrs	r3, r3, #16
20001080:	2203      	movs	r2, #3
20001082:	4013      	ands	r3, r2
20001084:	3301      	adds	r3, #1
20001086:	005b      	lsls	r3, r3, #1
20001088:	613b      	str	r3, [r7, #16]
    RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
2000108a:	6939      	ldr	r1, [r7, #16]
2000108c:	69f8      	ldr	r0, [r7, #28]
2000108e:	f001 fa91 	bl	200025b4 <__udivsi3>
20001092:	0003      	movs	r3, r0
20001094:	001a      	movs	r2, r3
20001096:	687b      	ldr	r3, [r7, #4]
20001098:	601a      	str	r2, [r3, #0]
    break;
2000109a:	e003      	b.n	200010a4 <RCC_GetClocksFreq+0xc4>
    RCC_Clocks->SYSCLK_Frequency = pllvco/pllr;    
    break;
#endif /* STM32F412xG || STM32F413_423xx || STM32F446xx */
    
  default:
    RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
2000109c:	687b      	ldr	r3, [r7, #4]
2000109e:	4a23      	ldr	r2, [pc, #140]	; (2000112c <RCC_GetClocksFreq+0x14c>)
200010a0:	601a      	str	r2, [r3, #0]
    break;
200010a2:	46c0      	nop			; (mov r8, r8)
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/
  
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
200010a4:	4b20      	ldr	r3, [pc, #128]	; (20001128 <RCC_GetClocksFreq+0x148>)
200010a6:	689b      	ldr	r3, [r3, #8]
200010a8:	22f0      	movs	r2, #240	; 0xf0
200010aa:	4013      	ands	r3, r2
200010ac:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 4;
200010ae:	69bb      	ldr	r3, [r7, #24]
200010b0:	091b      	lsrs	r3, r3, #4
200010b2:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
200010b4:	4a1f      	ldr	r2, [pc, #124]	; (20001134 <RCC_GetClocksFreq+0x154>)
200010b6:	69bb      	ldr	r3, [r7, #24]
200010b8:	18d3      	adds	r3, r2, r3
200010ba:	781b      	ldrb	r3, [r3, #0]
200010bc:	b2db      	uxtb	r3, r3
200010be:	617b      	str	r3, [r7, #20]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
200010c0:	687b      	ldr	r3, [r7, #4]
200010c2:	681a      	ldr	r2, [r3, #0]
200010c4:	697b      	ldr	r3, [r7, #20]
200010c6:	40da      	lsrs	r2, r3
200010c8:	687b      	ldr	r3, [r7, #4]
200010ca:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
200010cc:	4b16      	ldr	r3, [pc, #88]	; (20001128 <RCC_GetClocksFreq+0x148>)
200010ce:	689a      	ldr	r2, [r3, #8]
200010d0:	23e0      	movs	r3, #224	; 0xe0
200010d2:	015b      	lsls	r3, r3, #5
200010d4:	4013      	ands	r3, r2
200010d6:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 10;
200010d8:	69bb      	ldr	r3, [r7, #24]
200010da:	0a9b      	lsrs	r3, r3, #10
200010dc:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
200010de:	4a15      	ldr	r2, [pc, #84]	; (20001134 <RCC_GetClocksFreq+0x154>)
200010e0:	69bb      	ldr	r3, [r7, #24]
200010e2:	18d3      	adds	r3, r2, r3
200010e4:	781b      	ldrb	r3, [r3, #0]
200010e6:	b2db      	uxtb	r3, r3
200010e8:	617b      	str	r3, [r7, #20]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
200010ea:	687b      	ldr	r3, [r7, #4]
200010ec:	685a      	ldr	r2, [r3, #4]
200010ee:	697b      	ldr	r3, [r7, #20]
200010f0:	40da      	lsrs	r2, r3
200010f2:	687b      	ldr	r3, [r7, #4]
200010f4:	609a      	str	r2, [r3, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
200010f6:	4b0c      	ldr	r3, [pc, #48]	; (20001128 <RCC_GetClocksFreq+0x148>)
200010f8:	689a      	ldr	r2, [r3, #8]
200010fa:	23e0      	movs	r3, #224	; 0xe0
200010fc:	021b      	lsls	r3, r3, #8
200010fe:	4013      	ands	r3, r2
20001100:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 13;
20001102:	69bb      	ldr	r3, [r7, #24]
20001104:	0b5b      	lsrs	r3, r3, #13
20001106:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
20001108:	4a0a      	ldr	r2, [pc, #40]	; (20001134 <RCC_GetClocksFreq+0x154>)
2000110a:	69bb      	ldr	r3, [r7, #24]
2000110c:	18d3      	adds	r3, r2, r3
2000110e:	781b      	ldrb	r3, [r3, #0]
20001110:	b2db      	uxtb	r3, r3
20001112:	617b      	str	r3, [r7, #20]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
20001114:	687b      	ldr	r3, [r7, #4]
20001116:	685a      	ldr	r2, [r3, #4]
20001118:	697b      	ldr	r3, [r7, #20]
2000111a:	40da      	lsrs	r2, r3
2000111c:	687b      	ldr	r3, [r7, #4]
2000111e:	60da      	str	r2, [r3, #12]
}
20001120:	46c0      	nop			; (mov r8, r8)
20001122:	46bd      	mov	sp, r7
20001124:	b008      	add	sp, #32
20001126:	bd80      	pop	{r7, pc}
20001128:	40023800 	andmi	r3, r2, r0, lsl #16
2000112c:	00f42400 	rscseq	r2, r4, r0, lsl #8
20001130:	017d7840 	cmneq	sp, r0, asr #16
20001134:	20004b04 	andcs	r4, r0, r4, lsl #22

20001138 <RCC_RTCCLKConfig>:
  *         RTC clock source).
  *  
  * @retval None
  */
void RCC_RTCCLKConfig(uint32_t RCC_RTCCLKSource)
{
20001138:	b580      	push	{r7, lr}
2000113a:	b084      	sub	sp, #16
2000113c:	af00      	add	r7, sp, #0
2000113e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
20001140:	2300      	movs	r3, #0
20001142:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_RTCCLK_SOURCE(RCC_RTCCLKSource));

  if ((RCC_RTCCLKSource & 0x00000300) == 0x00000300)
20001144:	687a      	ldr	r2, [r7, #4]
20001146:	23c0      	movs	r3, #192	; 0xc0
20001148:	009b      	lsls	r3, r3, #2
2000114a:	401a      	ands	r2, r3
2000114c:	23c0      	movs	r3, #192	; 0xc0
2000114e:	009b      	lsls	r3, r3, #2
20001150:	429a      	cmp	r2, r3
20001152:	d10f      	bne.n	20001174 <RCC_RTCCLKConfig+0x3c>
  { /* If HSE is selected as RTC clock source, configure HSE division factor for RTC clock */
    tmpreg = RCC->CFGR;
20001154:	4b0d      	ldr	r3, [pc, #52]	; (2000118c <RCC_RTCCLKConfig+0x54>)
20001156:	689b      	ldr	r3, [r3, #8]
20001158:	60fb      	str	r3, [r7, #12]

    /* Clear RTCPRE[4:0] bits */
    tmpreg &= ~RCC_CFGR_RTCPRE;
2000115a:	68fb      	ldr	r3, [r7, #12]
2000115c:	4a0c      	ldr	r2, [pc, #48]	; (20001190 <RCC_RTCCLKConfig+0x58>)
2000115e:	4013      	ands	r3, r2
20001160:	60fb      	str	r3, [r7, #12]

    /* Configure HSE division factor for RTC clock */
    tmpreg |= (RCC_RTCCLKSource & 0xFFFFCFF);
20001162:	687b      	ldr	r3, [r7, #4]
20001164:	4a0b      	ldr	r2, [pc, #44]	; (20001194 <RCC_RTCCLKConfig+0x5c>)
20001166:	4013      	ands	r3, r2
20001168:	68fa      	ldr	r2, [r7, #12]
2000116a:	4313      	orrs	r3, r2
2000116c:	60fb      	str	r3, [r7, #12]

    /* Store the new value */
    RCC->CFGR = tmpreg;
2000116e:	4b07      	ldr	r3, [pc, #28]	; (2000118c <RCC_RTCCLKConfig+0x54>)
20001170:	68fa      	ldr	r2, [r7, #12]
20001172:	609a      	str	r2, [r3, #8]
  }
    
  /* Select the RTC clock source */
  RCC->BDCR |= (RCC_RTCCLKSource & 0x00000FFF);
20001174:	4b05      	ldr	r3, [pc, #20]	; (2000118c <RCC_RTCCLKConfig+0x54>)
20001176:	6f19      	ldr	r1, [r3, #112]	; 0x70
20001178:	687b      	ldr	r3, [r7, #4]
2000117a:	051b      	lsls	r3, r3, #20
2000117c:	0d1a      	lsrs	r2, r3, #20
2000117e:	4b03      	ldr	r3, [pc, #12]	; (2000118c <RCC_RTCCLKConfig+0x54>)
20001180:	430a      	orrs	r2, r1
20001182:	671a      	str	r2, [r3, #112]	; 0x70
}
20001184:	46c0      	nop			; (mov r8, r8)
20001186:	46bd      	mov	sp, r7
20001188:	b004      	add	sp, #16
2000118a:	bd80      	pop	{r7, pc}
2000118c:	40023800 	andmi	r3, r2, r0, lsl #16
20001190:	ffe0ffff 			; <UNDEFINED> instruction: 0xffe0ffff
20001194:	0ffffcff 	svceq	0x00fffcff

20001198 <RCC_RTCCLKCmd>:
  *         using the RCC_RTCCLKConfig function.
  * @param  NewState: new state of the RTC clock. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_RTCCLKCmd(FunctionalState NewState)
{
20001198:	b580      	push	{r7, lr}
2000119a:	b082      	sub	sp, #8
2000119c:	af00      	add	r7, sp, #0
2000119e:	0002      	movs	r2, r0
200011a0:	1dfb      	adds	r3, r7, #7
200011a2:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) BDCR_RTCEN_BB = (uint32_t)NewState;
200011a4:	4b03      	ldr	r3, [pc, #12]	; (200011b4 <RCC_RTCCLKCmd+0x1c>)
200011a6:	1dfa      	adds	r2, r7, #7
200011a8:	7812      	ldrb	r2, [r2, #0]
200011aa:	601a      	str	r2, [r3, #0]
}
200011ac:	46c0      	nop			; (mov r8, r8)
200011ae:	46bd      	mov	sp, r7
200011b0:	b002      	add	sp, #8
200011b2:	bd80      	pop	{r7, pc}
200011b4:	42470e3c 	submi	r0, r7, #60, 28	; 0x3c0

200011b8 <RCC_BackupResetCmd>:
  * @param  NewState: new state of the Backup domain reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_BackupResetCmd(FunctionalState NewState)
{
200011b8:	b580      	push	{r7, lr}
200011ba:	b082      	sub	sp, #8
200011bc:	af00      	add	r7, sp, #0
200011be:	0002      	movs	r2, r0
200011c0:	1dfb      	adds	r3, r7, #7
200011c2:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) BDCR_BDRST_BB = (uint32_t)NewState;
200011c4:	4b03      	ldr	r3, [pc, #12]	; (200011d4 <RCC_BackupResetCmd+0x1c>)
200011c6:	1dfa      	adds	r2, r7, #7
200011c8:	7812      	ldrb	r2, [r2, #0]
200011ca:	601a      	str	r2, [r3, #0]
}
200011cc:	46c0      	nop			; (mov r8, r8)
200011ce:	46bd      	mov	sp, r7
200011d0:	b002      	add	sp, #8
200011d2:	bd80      	pop	{r7, pc}
200011d4:	42470e40 	submi	r0, r7, #64, 28	; 0x400

200011d8 <RCC_I2SCLKConfig>:
  *            @arg RCC_I2S2CLKSource_Ext: External clock mapped on the I2S_CKIN pin
  *                                        used as I2S clock source
  * @retval None
  */
void RCC_I2SCLKConfig(uint32_t RCC_I2SCLKSource)
{
200011d8:	b580      	push	{r7, lr}
200011da:	b082      	sub	sp, #8
200011dc:	af00      	add	r7, sp, #0
200011de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_I2SCLK_SOURCE(RCC_I2SCLKSource));

  *(__IO uint32_t *) CFGR_I2SSRC_BB = RCC_I2SCLKSource;  
200011e0:	4b03      	ldr	r3, [pc, #12]	; (200011f0 <RCC_I2SCLKConfig+0x18>)
200011e2:	687a      	ldr	r2, [r7, #4]
200011e4:	601a      	str	r2, [r3, #0]
}
200011e6:	46c0      	nop			; (mov r8, r8)
200011e8:	46bd      	mov	sp, r7
200011ea:	b002      	add	sp, #8
200011ec:	bd80      	pop	{r7, pc}
200011ee:	46c0      	nop			; (mov r8, r8)
200011f0:	4247015c 	submi	r0, r7, #92, 2

200011f4 <RCC_SAIBlockACLKConfig>:
  *            @arg RCC_SAIACLKSource_Ext: External clock mapped on the I2S_CKIN pin
  *                                        used as SAI1 Block A clock
  * @retval None
  */
void RCC_SAIBlockACLKConfig(uint32_t RCC_SAIBlockACLKSource)
{
200011f4:	b580      	push	{r7, lr}
200011f6:	b084      	sub	sp, #16
200011f8:	af00      	add	r7, sp, #0
200011fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
200011fc:	2300      	movs	r3, #0
200011fe:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_SAIACLK_SOURCE(RCC_SAIBlockACLKSource));
  
  tmpreg = RCC->DCKCFGR;
20001200:	4a09      	ldr	r2, [pc, #36]	; (20001228 <RCC_SAIBlockACLKConfig+0x34>)
20001202:	238c      	movs	r3, #140	; 0x8c
20001204:	58d3      	ldr	r3, [r2, r3]
20001206:	60fb      	str	r3, [r7, #12]

  /* Clear RCC_DCKCFGR_SAI1ASRC[1:0] bits */
  tmpreg &= ~RCC_DCKCFGR_SAI1ASRC;
20001208:	68fb      	ldr	r3, [r7, #12]
2000120a:	4a08      	ldr	r2, [pc, #32]	; (2000122c <RCC_SAIBlockACLKConfig+0x38>)
2000120c:	4013      	ands	r3, r2
2000120e:	60fb      	str	r3, [r7, #12]

  /* Set SAI Block A source selection value */
  tmpreg |= RCC_SAIBlockACLKSource;
20001210:	68fa      	ldr	r2, [r7, #12]
20001212:	687b      	ldr	r3, [r7, #4]
20001214:	4313      	orrs	r3, r2
20001216:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->DCKCFGR = tmpreg;
20001218:	4903      	ldr	r1, [pc, #12]	; (20001228 <RCC_SAIBlockACLKConfig+0x34>)
2000121a:	228c      	movs	r2, #140	; 0x8c
2000121c:	68fb      	ldr	r3, [r7, #12]
2000121e:	508b      	str	r3, [r1, r2]
}
20001220:	46c0      	nop			; (mov r8, r8)
20001222:	46bd      	mov	sp, r7
20001224:	b004      	add	sp, #16
20001226:	bd80      	pop	{r7, pc}
20001228:	40023800 	andmi	r3, r2, r0, lsl #16
2000122c:	ffcfffff 			; <UNDEFINED> instruction: 0xffcfffff

20001230 <RCC_SAIBlockBCLKConfig>:
  *            @arg RCC_SAIBCLKSource_Ext: External clock mapped on the I2S_CKIN pin
  *                                        used as SAI1 Block B clock
  * @retval None
  */
void RCC_SAIBlockBCLKConfig(uint32_t RCC_SAIBlockBCLKSource)
{
20001230:	b580      	push	{r7, lr}
20001232:	b084      	sub	sp, #16
20001234:	af00      	add	r7, sp, #0
20001236:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
20001238:	2300      	movs	r3, #0
2000123a:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_SAIBCLK_SOURCE(RCC_SAIBlockBCLKSource));
  
  tmpreg = RCC->DCKCFGR;
2000123c:	4a09      	ldr	r2, [pc, #36]	; (20001264 <RCC_SAIBlockBCLKConfig+0x34>)
2000123e:	238c      	movs	r3, #140	; 0x8c
20001240:	58d3      	ldr	r3, [r2, r3]
20001242:	60fb      	str	r3, [r7, #12]

  /* Clear RCC_DCKCFGR_SAI1BSRC[1:0] bits */
  tmpreg &= ~RCC_DCKCFGR_SAI1BSRC;
20001244:	68fb      	ldr	r3, [r7, #12]
20001246:	4a08      	ldr	r2, [pc, #32]	; (20001268 <RCC_SAIBlockBCLKConfig+0x38>)
20001248:	4013      	ands	r3, r2
2000124a:	60fb      	str	r3, [r7, #12]

  /* Set SAI Block B source selection value */
  tmpreg |= RCC_SAIBlockBCLKSource;
2000124c:	68fa      	ldr	r2, [r7, #12]
2000124e:	687b      	ldr	r3, [r7, #4]
20001250:	4313      	orrs	r3, r2
20001252:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->DCKCFGR = tmpreg;
20001254:	4903      	ldr	r1, [pc, #12]	; (20001264 <RCC_SAIBlockBCLKConfig+0x34>)
20001256:	228c      	movs	r2, #140	; 0x8c
20001258:	68fb      	ldr	r3, [r7, #12]
2000125a:	508b      	str	r3, [r1, r2]
}
2000125c:	46c0      	nop			; (mov r8, r8)
2000125e:	46bd      	mov	sp, r7
20001260:	b004      	add	sp, #16
20001262:	bd80      	pop	{r7, pc}
20001264:	40023800 	andmi	r3, r2, r0, lsl #16
20001268:	ff3fffff 			; <UNDEFINED> instruction: 0xff3fffff

2000126c <RCC_SAIPLLI2SClkDivConfig>:
  *          SAI1 clock frequency = f(PLLI2S_Q) / RCC_PLLI2SDivQ 
  *              
  * @retval None
  */
void RCC_SAIPLLI2SClkDivConfig(uint32_t RCC_PLLI2SDivQ)  
{
2000126c:	b580      	push	{r7, lr}
2000126e:	b084      	sub	sp, #16
20001270:	af00      	add	r7, sp, #0
20001272:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
20001274:	2300      	movs	r3, #0
20001276:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(RCC_PLLI2SDivQ));
  
  tmpreg = RCC->DCKCFGR;
20001278:	4a0a      	ldr	r2, [pc, #40]	; (200012a4 <RCC_SAIPLLI2SClkDivConfig+0x38>)
2000127a:	238c      	movs	r3, #140	; 0x8c
2000127c:	58d3      	ldr	r3, [r2, r3]
2000127e:	60fb      	str	r3, [r7, #12]

  /* Clear PLLI2SDIVQ[4:0] bits */
  tmpreg &= ~(RCC_DCKCFGR_PLLI2SDIVQ);
20001280:	68fb      	ldr	r3, [r7, #12]
20001282:	221f      	movs	r2, #31
20001284:	4393      	bics	r3, r2
20001286:	60fb      	str	r3, [r7, #12]

  /* Set PLLI2SDIVQ values */
  tmpreg |= (RCC_PLLI2SDivQ - 1);
20001288:	687b      	ldr	r3, [r7, #4]
2000128a:	3b01      	subs	r3, #1
2000128c:	68fa      	ldr	r2, [r7, #12]
2000128e:	4313      	orrs	r3, r2
20001290:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->DCKCFGR = tmpreg;
20001292:	4904      	ldr	r1, [pc, #16]	; (200012a4 <RCC_SAIPLLI2SClkDivConfig+0x38>)
20001294:	228c      	movs	r2, #140	; 0x8c
20001296:	68fb      	ldr	r3, [r7, #12]
20001298:	508b      	str	r3, [r1, r2]
}
2000129a:	46c0      	nop			; (mov r8, r8)
2000129c:	46bd      	mov	sp, r7
2000129e:	b004      	add	sp, #16
200012a0:	bd80      	pop	{r7, pc}
200012a2:	46c0      	nop			; (mov r8, r8)
200012a4:	40023800 	andmi	r3, r2, r0, lsl #16

200012a8 <RCC_SAIPLLSAIClkDivConfig>:
  *          SAI1 clock frequency = f(PLLSAI_Q) / RCC_PLLSAIDivQ  
  *              
  * @retval None
  */
void RCC_SAIPLLSAIClkDivConfig(uint32_t RCC_PLLSAIDivQ)  
{
200012a8:	b580      	push	{r7, lr}
200012aa:	b084      	sub	sp, #16
200012ac:	af00      	add	r7, sp, #0
200012ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
200012b0:	2300      	movs	r3, #0
200012b2:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(RCC_PLLSAIDivQ));
  
  tmpreg = RCC->DCKCFGR;
200012b4:	4a0a      	ldr	r2, [pc, #40]	; (200012e0 <RCC_SAIPLLSAIClkDivConfig+0x38>)
200012b6:	238c      	movs	r3, #140	; 0x8c
200012b8:	58d3      	ldr	r3, [r2, r3]
200012ba:	60fb      	str	r3, [r7, #12]

  /* Clear PLLI2SDIVQ[4:0] and PLLSAIDIVQ[4:0] bits */
  tmpreg &= ~(RCC_DCKCFGR_PLLSAIDIVQ);
200012bc:	68fb      	ldr	r3, [r7, #12]
200012be:	4a09      	ldr	r2, [pc, #36]	; (200012e4 <RCC_SAIPLLSAIClkDivConfig+0x3c>)
200012c0:	4013      	ands	r3, r2
200012c2:	60fb      	str	r3, [r7, #12]

  /* Set PLLSAIDIVQ values */
  tmpreg |= ((RCC_PLLSAIDivQ - 1) << 8);
200012c4:	687b      	ldr	r3, [r7, #4]
200012c6:	3b01      	subs	r3, #1
200012c8:	021b      	lsls	r3, r3, #8
200012ca:	68fa      	ldr	r2, [r7, #12]
200012cc:	4313      	orrs	r3, r2
200012ce:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->DCKCFGR = tmpreg;
200012d0:	4903      	ldr	r1, [pc, #12]	; (200012e0 <RCC_SAIPLLSAIClkDivConfig+0x38>)
200012d2:	228c      	movs	r2, #140	; 0x8c
200012d4:	68fb      	ldr	r3, [r7, #12]
200012d6:	508b      	str	r3, [r1, r2]
}
200012d8:	46c0      	nop			; (mov r8, r8)
200012da:	46bd      	mov	sp, r7
200012dc:	b004      	add	sp, #16
200012de:	bd80      	pop	{r7, pc}
200012e0:	40023800 	andmi	r3, r2, r0, lsl #16
200012e4:	ffffe0ff 			; <UNDEFINED> instruction: 0xffffe0ff

200012e8 <RCC_LTDCCLKDivConfig>:
  *            @arg RCC_PLLSAIDivR_Div16: LTDC clock = f(PLLSAI_R)/16
  *            
  * @retval None
  */
void RCC_LTDCCLKDivConfig(uint32_t RCC_PLLSAIDivR)
{
200012e8:	b580      	push	{r7, lr}
200012ea:	b084      	sub	sp, #16
200012ec:	af00      	add	r7, sp, #0
200012ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
200012f0:	2300      	movs	r3, #0
200012f2:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_PLLSAI_DIVR_VALUE(RCC_PLLSAIDivR));
  
  tmpreg = RCC->DCKCFGR;
200012f4:	4a09      	ldr	r2, [pc, #36]	; (2000131c <RCC_LTDCCLKDivConfig+0x34>)
200012f6:	238c      	movs	r3, #140	; 0x8c
200012f8:	58d3      	ldr	r3, [r2, r3]
200012fa:	60fb      	str	r3, [r7, #12]

  /* Clear PLLSAIDIVR[2:0] bits */
  tmpreg &= ~RCC_DCKCFGR_PLLSAIDIVR;
200012fc:	68fb      	ldr	r3, [r7, #12]
200012fe:	4a08      	ldr	r2, [pc, #32]	; (20001320 <RCC_LTDCCLKDivConfig+0x38>)
20001300:	4013      	ands	r3, r2
20001302:	60fb      	str	r3, [r7, #12]

  /* Set PLLSAIDIVR values */
  tmpreg |= RCC_PLLSAIDivR;
20001304:	68fa      	ldr	r2, [r7, #12]
20001306:	687b      	ldr	r3, [r7, #4]
20001308:	4313      	orrs	r3, r2
2000130a:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->DCKCFGR = tmpreg;
2000130c:	4903      	ldr	r1, [pc, #12]	; (2000131c <RCC_LTDCCLKDivConfig+0x34>)
2000130e:	228c      	movs	r2, #140	; 0x8c
20001310:	68fb      	ldr	r3, [r7, #12]
20001312:	508b      	str	r3, [r1, r2]
}
20001314:	46c0      	nop			; (mov r8, r8)
20001316:	46bd      	mov	sp, r7
20001318:	b004      	add	sp, #16
2000131a:	bd80      	pop	{r7, pc}
2000131c:	40023800 	andmi	r3, r2, r0, lsl #16
20001320:	fffcffff 			; <UNDEFINED> instruction: 0xfffcffff

20001324 <RCC_TIMCLKPresConfig>:
  *                 else it is equal to [(HPRE * PPREx) / 4] if PPREx is corresponding 
  *                 to division by 8 or more.
  * @retval None
  */
void RCC_TIMCLKPresConfig(uint32_t RCC_TIMCLKPrescaler)
{
20001324:	b580      	push	{r7, lr}
20001326:	b082      	sub	sp, #8
20001328:	af00      	add	r7, sp, #0
2000132a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_TIMCLK_PRESCALER(RCC_TIMCLKPrescaler));

  *(__IO uint32_t *) DCKCFGR_TIMPRE_BB = RCC_TIMCLKPrescaler;
2000132c:	4b03      	ldr	r3, [pc, #12]	; (2000133c <RCC_TIMCLKPresConfig+0x18>)
2000132e:	687a      	ldr	r2, [r7, #4]
20001330:	601a      	str	r2, [r3, #0]
}
20001332:	46c0      	nop			; (mov r8, r8)
20001334:	46bd      	mov	sp, r7
20001336:	b002      	add	sp, #8
20001338:	bd80      	pop	{r7, pc}
2000133a:	46c0      	nop			; (mov r8, r8)
2000133c:	424711e0 	submi	r1, r7, #224, 2	; 0x38

20001340 <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
20001340:	b580      	push	{r7, lr}
20001342:	b082      	sub	sp, #8
20001344:	af00      	add	r7, sp, #0
20001346:	6078      	str	r0, [r7, #4]
20001348:	000a      	movs	r2, r1
2000134a:	1cfb      	adds	r3, r7, #3
2000134c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
2000134e:	1cfb      	adds	r3, r7, #3
20001350:	781b      	ldrb	r3, [r3, #0]
20001352:	2b00      	cmp	r3, #0
20001354:	d006      	beq.n	20001364 <RCC_AHB1PeriphClockCmd+0x24>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
20001356:	4b09      	ldr	r3, [pc, #36]	; (2000137c <RCC_AHB1PeriphClockCmd+0x3c>)
20001358:	6b19      	ldr	r1, [r3, #48]	; 0x30
2000135a:	4b08      	ldr	r3, [pc, #32]	; (2000137c <RCC_AHB1PeriphClockCmd+0x3c>)
2000135c:	687a      	ldr	r2, [r7, #4]
2000135e:	430a      	orrs	r2, r1
20001360:	631a      	str	r2, [r3, #48]	; 0x30
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
  }
}
20001362:	e006      	b.n	20001372 <RCC_AHB1PeriphClockCmd+0x32>
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
20001364:	4b05      	ldr	r3, [pc, #20]	; (2000137c <RCC_AHB1PeriphClockCmd+0x3c>)
20001366:	6b1a      	ldr	r2, [r3, #48]	; 0x30
20001368:	687b      	ldr	r3, [r7, #4]
2000136a:	43d9      	mvns	r1, r3
2000136c:	4b03      	ldr	r3, [pc, #12]	; (2000137c <RCC_AHB1PeriphClockCmd+0x3c>)
2000136e:	400a      	ands	r2, r1
20001370:	631a      	str	r2, [r3, #48]	; 0x30
}
20001372:	46c0      	nop			; (mov r8, r8)
20001374:	46bd      	mov	sp, r7
20001376:	b002      	add	sp, #8
20001378:	bd80      	pop	{r7, pc}
2000137a:	46c0      	nop			; (mov r8, r8)
2000137c:	40023800 	andmi	r3, r2, r0, lsl #16

20001380 <RCC_AHB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB2PeriphClockCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
{
20001380:	b580      	push	{r7, lr}
20001382:	b082      	sub	sp, #8
20001384:	af00      	add	r7, sp, #0
20001386:	6078      	str	r0, [r7, #4]
20001388:	000a      	movs	r2, r1
2000138a:	1cfb      	adds	r3, r7, #3
2000138c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
2000138e:	1cfb      	adds	r3, r7, #3
20001390:	781b      	ldrb	r3, [r3, #0]
20001392:	2b00      	cmp	r3, #0
20001394:	d006      	beq.n	200013a4 <RCC_AHB2PeriphClockCmd+0x24>
  {
    RCC->AHB2ENR |= RCC_AHB2Periph;
20001396:	4b09      	ldr	r3, [pc, #36]	; (200013bc <RCC_AHB2PeriphClockCmd+0x3c>)
20001398:	6b59      	ldr	r1, [r3, #52]	; 0x34
2000139a:	4b08      	ldr	r3, [pc, #32]	; (200013bc <RCC_AHB2PeriphClockCmd+0x3c>)
2000139c:	687a      	ldr	r2, [r7, #4]
2000139e:	430a      	orrs	r2, r1
200013a0:	635a      	str	r2, [r3, #52]	; 0x34
  }
  else
  {
    RCC->AHB2ENR &= ~RCC_AHB2Periph;
  }
}
200013a2:	e006      	b.n	200013b2 <RCC_AHB2PeriphClockCmd+0x32>
    RCC->AHB2ENR &= ~RCC_AHB2Periph;
200013a4:	4b05      	ldr	r3, [pc, #20]	; (200013bc <RCC_AHB2PeriphClockCmd+0x3c>)
200013a6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
200013a8:	687b      	ldr	r3, [r7, #4]
200013aa:	43d9      	mvns	r1, r3
200013ac:	4b03      	ldr	r3, [pc, #12]	; (200013bc <RCC_AHB2PeriphClockCmd+0x3c>)
200013ae:	400a      	ands	r2, r1
200013b0:	635a      	str	r2, [r3, #52]	; 0x34
}
200013b2:	46c0      	nop			; (mov r8, r8)
200013b4:	46bd      	mov	sp, r7
200013b6:	b002      	add	sp, #8
200013b8:	bd80      	pop	{r7, pc}
200013ba:	46c0      	nop			; (mov r8, r8)
200013bc:	40023800 	andmi	r3, r2, r0, lsl #16

200013c0 <RCC_AHB3PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB3PeriphClockCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
{
200013c0:	b580      	push	{r7, lr}
200013c2:	b082      	sub	sp, #8
200013c4:	af00      	add	r7, sp, #0
200013c6:	6078      	str	r0, [r7, #4]
200013c8:	000a      	movs	r2, r1
200013ca:	1cfb      	adds	r3, r7, #3
200013cc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
200013ce:	1cfb      	adds	r3, r7, #3
200013d0:	781b      	ldrb	r3, [r3, #0]
200013d2:	2b00      	cmp	r3, #0
200013d4:	d006      	beq.n	200013e4 <RCC_AHB3PeriphClockCmd+0x24>
  {
    RCC->AHB3ENR |= RCC_AHB3Periph;
200013d6:	4b09      	ldr	r3, [pc, #36]	; (200013fc <RCC_AHB3PeriphClockCmd+0x3c>)
200013d8:	6b99      	ldr	r1, [r3, #56]	; 0x38
200013da:	4b08      	ldr	r3, [pc, #32]	; (200013fc <RCC_AHB3PeriphClockCmd+0x3c>)
200013dc:	687a      	ldr	r2, [r7, #4]
200013de:	430a      	orrs	r2, r1
200013e0:	639a      	str	r2, [r3, #56]	; 0x38
  }
  else
  {
    RCC->AHB3ENR &= ~RCC_AHB3Periph;
  }
}
200013e2:	e006      	b.n	200013f2 <RCC_AHB3PeriphClockCmd+0x32>
    RCC->AHB3ENR &= ~RCC_AHB3Periph;
200013e4:	4b05      	ldr	r3, [pc, #20]	; (200013fc <RCC_AHB3PeriphClockCmd+0x3c>)
200013e6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
200013e8:	687b      	ldr	r3, [r7, #4]
200013ea:	43d9      	mvns	r1, r3
200013ec:	4b03      	ldr	r3, [pc, #12]	; (200013fc <RCC_AHB3PeriphClockCmd+0x3c>)
200013ee:	400a      	ands	r2, r1
200013f0:	639a      	str	r2, [r3, #56]	; 0x38
}
200013f2:	46c0      	nop			; (mov r8, r8)
200013f4:	46bd      	mov	sp, r7
200013f6:	b002      	add	sp, #8
200013f8:	bd80      	pop	{r7, pc}
200013fa:	46c0      	nop			; (mov r8, r8)
200013fc:	40023800 	andmi	r3, r2, r0, lsl #16

20001400 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
20001400:	b580      	push	{r7, lr}
20001402:	b082      	sub	sp, #8
20001404:	af00      	add	r7, sp, #0
20001406:	6078      	str	r0, [r7, #4]
20001408:	000a      	movs	r2, r1
2000140a:	1cfb      	adds	r3, r7, #3
2000140c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
2000140e:	1cfb      	adds	r3, r7, #3
20001410:	781b      	ldrb	r3, [r3, #0]
20001412:	2b00      	cmp	r3, #0
20001414:	d006      	beq.n	20001424 <RCC_APB1PeriphClockCmd+0x24>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
20001416:	4b09      	ldr	r3, [pc, #36]	; (2000143c <RCC_APB1PeriphClockCmd+0x3c>)
20001418:	6c19      	ldr	r1, [r3, #64]	; 0x40
2000141a:	4b08      	ldr	r3, [pc, #32]	; (2000143c <RCC_APB1PeriphClockCmd+0x3c>)
2000141c:	687a      	ldr	r2, [r7, #4]
2000141e:	430a      	orrs	r2, r1
20001420:	641a      	str	r2, [r3, #64]	; 0x40
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
20001422:	e006      	b.n	20001432 <RCC_APB1PeriphClockCmd+0x32>
    RCC->APB1ENR &= ~RCC_APB1Periph;
20001424:	4b05      	ldr	r3, [pc, #20]	; (2000143c <RCC_APB1PeriphClockCmd+0x3c>)
20001426:	6c1a      	ldr	r2, [r3, #64]	; 0x40
20001428:	687b      	ldr	r3, [r7, #4]
2000142a:	43d9      	mvns	r1, r3
2000142c:	4b03      	ldr	r3, [pc, #12]	; (2000143c <RCC_APB1PeriphClockCmd+0x3c>)
2000142e:	400a      	ands	r2, r1
20001430:	641a      	str	r2, [r3, #64]	; 0x40
}
20001432:	46c0      	nop			; (mov r8, r8)
20001434:	46bd      	mov	sp, r7
20001436:	b002      	add	sp, #8
20001438:	bd80      	pop	{r7, pc}
2000143a:	46c0      	nop			; (mov r8, r8)
2000143c:	40023800 	andmi	r3, r2, r0, lsl #16

20001440 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
20001440:	b580      	push	{r7, lr}
20001442:	b082      	sub	sp, #8
20001444:	af00      	add	r7, sp, #0
20001446:	6078      	str	r0, [r7, #4]
20001448:	000a      	movs	r2, r1
2000144a:	1cfb      	adds	r3, r7, #3
2000144c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
2000144e:	1cfb      	adds	r3, r7, #3
20001450:	781b      	ldrb	r3, [r3, #0]
20001452:	2b00      	cmp	r3, #0
20001454:	d006      	beq.n	20001464 <RCC_APB2PeriphClockCmd+0x24>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
20001456:	4b09      	ldr	r3, [pc, #36]	; (2000147c <RCC_APB2PeriphClockCmd+0x3c>)
20001458:	6c59      	ldr	r1, [r3, #68]	; 0x44
2000145a:	4b08      	ldr	r3, [pc, #32]	; (2000147c <RCC_APB2PeriphClockCmd+0x3c>)
2000145c:	687a      	ldr	r2, [r7, #4]
2000145e:	430a      	orrs	r2, r1
20001460:	645a      	str	r2, [r3, #68]	; 0x44
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
20001462:	e006      	b.n	20001472 <RCC_APB2PeriphClockCmd+0x32>
    RCC->APB2ENR &= ~RCC_APB2Periph;
20001464:	4b05      	ldr	r3, [pc, #20]	; (2000147c <RCC_APB2PeriphClockCmd+0x3c>)
20001466:	6c5a      	ldr	r2, [r3, #68]	; 0x44
20001468:	687b      	ldr	r3, [r7, #4]
2000146a:	43d9      	mvns	r1, r3
2000146c:	4b03      	ldr	r3, [pc, #12]	; (2000147c <RCC_APB2PeriphClockCmd+0x3c>)
2000146e:	400a      	ands	r2, r1
20001470:	645a      	str	r2, [r3, #68]	; 0x44
}
20001472:	46c0      	nop			; (mov r8, r8)
20001474:	46bd      	mov	sp, r7
20001476:	b002      	add	sp, #8
20001478:	bd80      	pop	{r7, pc}
2000147a:	46c0      	nop			; (mov r8, r8)
2000147c:	40023800 	andmi	r3, r2, r0, lsl #16

20001480 <RCC_AHB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphResetCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
20001480:	b580      	push	{r7, lr}
20001482:	b082      	sub	sp, #8
20001484:	af00      	add	r7, sp, #0
20001486:	6078      	str	r0, [r7, #4]
20001488:	000a      	movs	r2, r1
2000148a:	1cfb      	adds	r3, r7, #3
2000148c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_RESET_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
2000148e:	1cfb      	adds	r3, r7, #3
20001490:	781b      	ldrb	r3, [r3, #0]
20001492:	2b00      	cmp	r3, #0
20001494:	d006      	beq.n	200014a4 <RCC_AHB1PeriphResetCmd+0x24>
  {
    RCC->AHB1RSTR |= RCC_AHB1Periph;
20001496:	4b09      	ldr	r3, [pc, #36]	; (200014bc <RCC_AHB1PeriphResetCmd+0x3c>)
20001498:	6919      	ldr	r1, [r3, #16]
2000149a:	4b08      	ldr	r3, [pc, #32]	; (200014bc <RCC_AHB1PeriphResetCmd+0x3c>)
2000149c:	687a      	ldr	r2, [r7, #4]
2000149e:	430a      	orrs	r2, r1
200014a0:	611a      	str	r2, [r3, #16]
  }
  else
  {
    RCC->AHB1RSTR &= ~RCC_AHB1Periph;
  }
}
200014a2:	e006      	b.n	200014b2 <RCC_AHB1PeriphResetCmd+0x32>
    RCC->AHB1RSTR &= ~RCC_AHB1Periph;
200014a4:	4b05      	ldr	r3, [pc, #20]	; (200014bc <RCC_AHB1PeriphResetCmd+0x3c>)
200014a6:	691a      	ldr	r2, [r3, #16]
200014a8:	687b      	ldr	r3, [r7, #4]
200014aa:	43d9      	mvns	r1, r3
200014ac:	4b03      	ldr	r3, [pc, #12]	; (200014bc <RCC_AHB1PeriphResetCmd+0x3c>)
200014ae:	400a      	ands	r2, r1
200014b0:	611a      	str	r2, [r3, #16]
}
200014b2:	46c0      	nop			; (mov r8, r8)
200014b4:	46bd      	mov	sp, r7
200014b6:	b002      	add	sp, #8
200014b8:	bd80      	pop	{r7, pc}
200014ba:	46c0      	nop			; (mov r8, r8)
200014bc:	40023800 	andmi	r3, r2, r0, lsl #16

200014c0 <RCC_AHB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB2PeriphResetCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
{
200014c0:	b580      	push	{r7, lr}
200014c2:	b082      	sub	sp, #8
200014c4:	af00      	add	r7, sp, #0
200014c6:	6078      	str	r0, [r7, #4]
200014c8:	000a      	movs	r2, r1
200014ca:	1cfb      	adds	r3, r7, #3
200014cc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
200014ce:	1cfb      	adds	r3, r7, #3
200014d0:	781b      	ldrb	r3, [r3, #0]
200014d2:	2b00      	cmp	r3, #0
200014d4:	d006      	beq.n	200014e4 <RCC_AHB2PeriphResetCmd+0x24>
  {
    RCC->AHB2RSTR |= RCC_AHB2Periph;
200014d6:	4b09      	ldr	r3, [pc, #36]	; (200014fc <RCC_AHB2PeriphResetCmd+0x3c>)
200014d8:	6959      	ldr	r1, [r3, #20]
200014da:	4b08      	ldr	r3, [pc, #32]	; (200014fc <RCC_AHB2PeriphResetCmd+0x3c>)
200014dc:	687a      	ldr	r2, [r7, #4]
200014de:	430a      	orrs	r2, r1
200014e0:	615a      	str	r2, [r3, #20]
  }
  else
  {
    RCC->AHB2RSTR &= ~RCC_AHB2Periph;
  }
}
200014e2:	e006      	b.n	200014f2 <RCC_AHB2PeriphResetCmd+0x32>
    RCC->AHB2RSTR &= ~RCC_AHB2Periph;
200014e4:	4b05      	ldr	r3, [pc, #20]	; (200014fc <RCC_AHB2PeriphResetCmd+0x3c>)
200014e6:	695a      	ldr	r2, [r3, #20]
200014e8:	687b      	ldr	r3, [r7, #4]
200014ea:	43d9      	mvns	r1, r3
200014ec:	4b03      	ldr	r3, [pc, #12]	; (200014fc <RCC_AHB2PeriphResetCmd+0x3c>)
200014ee:	400a      	ands	r2, r1
200014f0:	615a      	str	r2, [r3, #20]
}
200014f2:	46c0      	nop			; (mov r8, r8)
200014f4:	46bd      	mov	sp, r7
200014f6:	b002      	add	sp, #8
200014f8:	bd80      	pop	{r7, pc}
200014fa:	46c0      	nop			; (mov r8, r8)
200014fc:	40023800 	andmi	r3, r2, r0, lsl #16

20001500 <RCC_AHB3PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB3PeriphResetCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
{
20001500:	b580      	push	{r7, lr}
20001502:	b082      	sub	sp, #8
20001504:	af00      	add	r7, sp, #0
20001506:	6078      	str	r0, [r7, #4]
20001508:	000a      	movs	r2, r1
2000150a:	1cfb      	adds	r3, r7, #3
2000150c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
2000150e:	1cfb      	adds	r3, r7, #3
20001510:	781b      	ldrb	r3, [r3, #0]
20001512:	2b00      	cmp	r3, #0
20001514:	d006      	beq.n	20001524 <RCC_AHB3PeriphResetCmd+0x24>
  {
    RCC->AHB3RSTR |= RCC_AHB3Periph;
20001516:	4b09      	ldr	r3, [pc, #36]	; (2000153c <RCC_AHB3PeriphResetCmd+0x3c>)
20001518:	6999      	ldr	r1, [r3, #24]
2000151a:	4b08      	ldr	r3, [pc, #32]	; (2000153c <RCC_AHB3PeriphResetCmd+0x3c>)
2000151c:	687a      	ldr	r2, [r7, #4]
2000151e:	430a      	orrs	r2, r1
20001520:	619a      	str	r2, [r3, #24]
  }
  else
  {
    RCC->AHB3RSTR &= ~RCC_AHB3Periph;
  }
}
20001522:	e006      	b.n	20001532 <RCC_AHB3PeriphResetCmd+0x32>
    RCC->AHB3RSTR &= ~RCC_AHB3Periph;
20001524:	4b05      	ldr	r3, [pc, #20]	; (2000153c <RCC_AHB3PeriphResetCmd+0x3c>)
20001526:	699a      	ldr	r2, [r3, #24]
20001528:	687b      	ldr	r3, [r7, #4]
2000152a:	43d9      	mvns	r1, r3
2000152c:	4b03      	ldr	r3, [pc, #12]	; (2000153c <RCC_AHB3PeriphResetCmd+0x3c>)
2000152e:	400a      	ands	r2, r1
20001530:	619a      	str	r2, [r3, #24]
}
20001532:	46c0      	nop			; (mov r8, r8)
20001534:	46bd      	mov	sp, r7
20001536:	b002      	add	sp, #8
20001538:	bd80      	pop	{r7, pc}
2000153a:	46c0      	nop			; (mov r8, r8)
2000153c:	40023800 	andmi	r3, r2, r0, lsl #16

20001540 <RCC_APB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
20001540:	b580      	push	{r7, lr}
20001542:	b082      	sub	sp, #8
20001544:	af00      	add	r7, sp, #0
20001546:	6078      	str	r0, [r7, #4]
20001548:	000a      	movs	r2, r1
2000154a:	1cfb      	adds	r3, r7, #3
2000154c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
2000154e:	1cfb      	adds	r3, r7, #3
20001550:	781b      	ldrb	r3, [r3, #0]
20001552:	2b00      	cmp	r3, #0
20001554:	d006      	beq.n	20001564 <RCC_APB1PeriphResetCmd+0x24>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
20001556:	4b09      	ldr	r3, [pc, #36]	; (2000157c <RCC_APB1PeriphResetCmd+0x3c>)
20001558:	6a19      	ldr	r1, [r3, #32]
2000155a:	4b08      	ldr	r3, [pc, #32]	; (2000157c <RCC_APB1PeriphResetCmd+0x3c>)
2000155c:	687a      	ldr	r2, [r7, #4]
2000155e:	430a      	orrs	r2, r1
20001560:	621a      	str	r2, [r3, #32]
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
  }
}
20001562:	e006      	b.n	20001572 <RCC_APB1PeriphResetCmd+0x32>
    RCC->APB1RSTR &= ~RCC_APB1Periph;
20001564:	4b05      	ldr	r3, [pc, #20]	; (2000157c <RCC_APB1PeriphResetCmd+0x3c>)
20001566:	6a1a      	ldr	r2, [r3, #32]
20001568:	687b      	ldr	r3, [r7, #4]
2000156a:	43d9      	mvns	r1, r3
2000156c:	4b03      	ldr	r3, [pc, #12]	; (2000157c <RCC_APB1PeriphResetCmd+0x3c>)
2000156e:	400a      	ands	r2, r1
20001570:	621a      	str	r2, [r3, #32]
}
20001572:	46c0      	nop			; (mov r8, r8)
20001574:	46bd      	mov	sp, r7
20001576:	b002      	add	sp, #8
20001578:	bd80      	pop	{r7, pc}
2000157a:	46c0      	nop			; (mov r8, r8)
2000157c:	40023800 	andmi	r3, r2, r0, lsl #16

20001580 <RCC_APB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
20001580:	b580      	push	{r7, lr}
20001582:	b082      	sub	sp, #8
20001584:	af00      	add	r7, sp, #0
20001586:	6078      	str	r0, [r7, #4]
20001588:	000a      	movs	r2, r1
2000158a:	1cfb      	adds	r3, r7, #3
2000158c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_RESET_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
2000158e:	1cfb      	adds	r3, r7, #3
20001590:	781b      	ldrb	r3, [r3, #0]
20001592:	2b00      	cmp	r3, #0
20001594:	d006      	beq.n	200015a4 <RCC_APB2PeriphResetCmd+0x24>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
20001596:	4b09      	ldr	r3, [pc, #36]	; (200015bc <RCC_APB2PeriphResetCmd+0x3c>)
20001598:	6a59      	ldr	r1, [r3, #36]	; 0x24
2000159a:	4b08      	ldr	r3, [pc, #32]	; (200015bc <RCC_APB2PeriphResetCmd+0x3c>)
2000159c:	687a      	ldr	r2, [r7, #4]
2000159e:	430a      	orrs	r2, r1
200015a0:	625a      	str	r2, [r3, #36]	; 0x24
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
  }
}
200015a2:	e006      	b.n	200015b2 <RCC_APB2PeriphResetCmd+0x32>
    RCC->APB2RSTR &= ~RCC_APB2Periph;
200015a4:	4b05      	ldr	r3, [pc, #20]	; (200015bc <RCC_APB2PeriphResetCmd+0x3c>)
200015a6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
200015a8:	687b      	ldr	r3, [r7, #4]
200015aa:	43d9      	mvns	r1, r3
200015ac:	4b03      	ldr	r3, [pc, #12]	; (200015bc <RCC_APB2PeriphResetCmd+0x3c>)
200015ae:	400a      	ands	r2, r1
200015b0:	625a      	str	r2, [r3, #36]	; 0x24
}
200015b2:	46c0      	nop			; (mov r8, r8)
200015b4:	46bd      	mov	sp, r7
200015b6:	b002      	add	sp, #8
200015b8:	bd80      	pop	{r7, pc}
200015ba:	46c0      	nop			; (mov r8, r8)
200015bc:	40023800 	andmi	r3, r2, r0, lsl #16

200015c0 <RCC_AHB1PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockLPModeCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
200015c0:	b580      	push	{r7, lr}
200015c2:	b082      	sub	sp, #8
200015c4:	af00      	add	r7, sp, #0
200015c6:	6078      	str	r0, [r7, #4]
200015c8:	000a      	movs	r2, r1
200015ca:	1cfb      	adds	r3, r7, #3
200015cc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_LPMODE_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
200015ce:	1cfb      	adds	r3, r7, #3
200015d0:	781b      	ldrb	r3, [r3, #0]
200015d2:	2b00      	cmp	r3, #0
200015d4:	d006      	beq.n	200015e4 <RCC_AHB1PeriphClockLPModeCmd+0x24>
  {
    RCC->AHB1LPENR |= RCC_AHB1Periph;
200015d6:	4b09      	ldr	r3, [pc, #36]	; (200015fc <RCC_AHB1PeriphClockLPModeCmd+0x3c>)
200015d8:	6d19      	ldr	r1, [r3, #80]	; 0x50
200015da:	4b08      	ldr	r3, [pc, #32]	; (200015fc <RCC_AHB1PeriphClockLPModeCmd+0x3c>)
200015dc:	687a      	ldr	r2, [r7, #4]
200015de:	430a      	orrs	r2, r1
200015e0:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    RCC->AHB1LPENR &= ~RCC_AHB1Periph;
  }
}
200015e2:	e006      	b.n	200015f2 <RCC_AHB1PeriphClockLPModeCmd+0x32>
    RCC->AHB1LPENR &= ~RCC_AHB1Periph;
200015e4:	4b05      	ldr	r3, [pc, #20]	; (200015fc <RCC_AHB1PeriphClockLPModeCmd+0x3c>)
200015e6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
200015e8:	687b      	ldr	r3, [r7, #4]
200015ea:	43d9      	mvns	r1, r3
200015ec:	4b03      	ldr	r3, [pc, #12]	; (200015fc <RCC_AHB1PeriphClockLPModeCmd+0x3c>)
200015ee:	400a      	ands	r2, r1
200015f0:	651a      	str	r2, [r3, #80]	; 0x50
}
200015f2:	46c0      	nop			; (mov r8, r8)
200015f4:	46bd      	mov	sp, r7
200015f6:	b002      	add	sp, #8
200015f8:	bd80      	pop	{r7, pc}
200015fa:	46c0      	nop			; (mov r8, r8)
200015fc:	40023800 	andmi	r3, r2, r0, lsl #16

20001600 <RCC_AHB2PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB2PeriphClockLPModeCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
{
20001600:	b580      	push	{r7, lr}
20001602:	b082      	sub	sp, #8
20001604:	af00      	add	r7, sp, #0
20001606:	6078      	str	r0, [r7, #4]
20001608:	000a      	movs	r2, r1
2000160a:	1cfb      	adds	r3, r7, #3
2000160c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
2000160e:	1cfb      	adds	r3, r7, #3
20001610:	781b      	ldrb	r3, [r3, #0]
20001612:	2b00      	cmp	r3, #0
20001614:	d006      	beq.n	20001624 <RCC_AHB2PeriphClockLPModeCmd+0x24>
  {
    RCC->AHB2LPENR |= RCC_AHB2Periph;
20001616:	4b09      	ldr	r3, [pc, #36]	; (2000163c <RCC_AHB2PeriphClockLPModeCmd+0x3c>)
20001618:	6d59      	ldr	r1, [r3, #84]	; 0x54
2000161a:	4b08      	ldr	r3, [pc, #32]	; (2000163c <RCC_AHB2PeriphClockLPModeCmd+0x3c>)
2000161c:	687a      	ldr	r2, [r7, #4]
2000161e:	430a      	orrs	r2, r1
20001620:	655a      	str	r2, [r3, #84]	; 0x54
  }
  else
  {
    RCC->AHB2LPENR &= ~RCC_AHB2Periph;
  }
}
20001622:	e006      	b.n	20001632 <RCC_AHB2PeriphClockLPModeCmd+0x32>
    RCC->AHB2LPENR &= ~RCC_AHB2Periph;
20001624:	4b05      	ldr	r3, [pc, #20]	; (2000163c <RCC_AHB2PeriphClockLPModeCmd+0x3c>)
20001626:	6d5a      	ldr	r2, [r3, #84]	; 0x54
20001628:	687b      	ldr	r3, [r7, #4]
2000162a:	43d9      	mvns	r1, r3
2000162c:	4b03      	ldr	r3, [pc, #12]	; (2000163c <RCC_AHB2PeriphClockLPModeCmd+0x3c>)
2000162e:	400a      	ands	r2, r1
20001630:	655a      	str	r2, [r3, #84]	; 0x54
}
20001632:	46c0      	nop			; (mov r8, r8)
20001634:	46bd      	mov	sp, r7
20001636:	b002      	add	sp, #8
20001638:	bd80      	pop	{r7, pc}
2000163a:	46c0      	nop			; (mov r8, r8)
2000163c:	40023800 	andmi	r3, r2, r0, lsl #16

20001640 <RCC_AHB3PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB3PeriphClockLPModeCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
{
20001640:	b580      	push	{r7, lr}
20001642:	b082      	sub	sp, #8
20001644:	af00      	add	r7, sp, #0
20001646:	6078      	str	r0, [r7, #4]
20001648:	000a      	movs	r2, r1
2000164a:	1cfb      	adds	r3, r7, #3
2000164c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
2000164e:	1cfb      	adds	r3, r7, #3
20001650:	781b      	ldrb	r3, [r3, #0]
20001652:	2b00      	cmp	r3, #0
20001654:	d006      	beq.n	20001664 <RCC_AHB3PeriphClockLPModeCmd+0x24>
  {
    RCC->AHB3LPENR |= RCC_AHB3Periph;
20001656:	4b09      	ldr	r3, [pc, #36]	; (2000167c <RCC_AHB3PeriphClockLPModeCmd+0x3c>)
20001658:	6d99      	ldr	r1, [r3, #88]	; 0x58
2000165a:	4b08      	ldr	r3, [pc, #32]	; (2000167c <RCC_AHB3PeriphClockLPModeCmd+0x3c>)
2000165c:	687a      	ldr	r2, [r7, #4]
2000165e:	430a      	orrs	r2, r1
20001660:	659a      	str	r2, [r3, #88]	; 0x58
  }
  else
  {
    RCC->AHB3LPENR &= ~RCC_AHB3Periph;
  }
}
20001662:	e006      	b.n	20001672 <RCC_AHB3PeriphClockLPModeCmd+0x32>
    RCC->AHB3LPENR &= ~RCC_AHB3Periph;
20001664:	4b05      	ldr	r3, [pc, #20]	; (2000167c <RCC_AHB3PeriphClockLPModeCmd+0x3c>)
20001666:	6d9a      	ldr	r2, [r3, #88]	; 0x58
20001668:	687b      	ldr	r3, [r7, #4]
2000166a:	43d9      	mvns	r1, r3
2000166c:	4b03      	ldr	r3, [pc, #12]	; (2000167c <RCC_AHB3PeriphClockLPModeCmd+0x3c>)
2000166e:	400a      	ands	r2, r1
20001670:	659a      	str	r2, [r3, #88]	; 0x58
}
20001672:	46c0      	nop			; (mov r8, r8)
20001674:	46bd      	mov	sp, r7
20001676:	b002      	add	sp, #8
20001678:	bd80      	pop	{r7, pc}
2000167a:	46c0      	nop			; (mov r8, r8)
2000167c:	40023800 	andmi	r3, r2, r0, lsl #16

20001680 <RCC_APB1PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockLPModeCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
20001680:	b580      	push	{r7, lr}
20001682:	b082      	sub	sp, #8
20001684:	af00      	add	r7, sp, #0
20001686:	6078      	str	r0, [r7, #4]
20001688:	000a      	movs	r2, r1
2000168a:	1cfb      	adds	r3, r7, #3
2000168c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
2000168e:	1cfb      	adds	r3, r7, #3
20001690:	781b      	ldrb	r3, [r3, #0]
20001692:	2b00      	cmp	r3, #0
20001694:	d006      	beq.n	200016a4 <RCC_APB1PeriphClockLPModeCmd+0x24>
  {
    RCC->APB1LPENR |= RCC_APB1Periph;
20001696:	4b09      	ldr	r3, [pc, #36]	; (200016bc <RCC_APB1PeriphClockLPModeCmd+0x3c>)
20001698:	6e19      	ldr	r1, [r3, #96]	; 0x60
2000169a:	4b08      	ldr	r3, [pc, #32]	; (200016bc <RCC_APB1PeriphClockLPModeCmd+0x3c>)
2000169c:	687a      	ldr	r2, [r7, #4]
2000169e:	430a      	orrs	r2, r1
200016a0:	661a      	str	r2, [r3, #96]	; 0x60
  }
  else
  {
    RCC->APB1LPENR &= ~RCC_APB1Periph;
  }
}
200016a2:	e006      	b.n	200016b2 <RCC_APB1PeriphClockLPModeCmd+0x32>
    RCC->APB1LPENR &= ~RCC_APB1Periph;
200016a4:	4b05      	ldr	r3, [pc, #20]	; (200016bc <RCC_APB1PeriphClockLPModeCmd+0x3c>)
200016a6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
200016a8:	687b      	ldr	r3, [r7, #4]
200016aa:	43d9      	mvns	r1, r3
200016ac:	4b03      	ldr	r3, [pc, #12]	; (200016bc <RCC_APB1PeriphClockLPModeCmd+0x3c>)
200016ae:	400a      	ands	r2, r1
200016b0:	661a      	str	r2, [r3, #96]	; 0x60
}
200016b2:	46c0      	nop			; (mov r8, r8)
200016b4:	46bd      	mov	sp, r7
200016b6:	b002      	add	sp, #8
200016b8:	bd80      	pop	{r7, pc}
200016ba:	46c0      	nop			; (mov r8, r8)
200016bc:	40023800 	andmi	r3, r2, r0, lsl #16

200016c0 <RCC_APB2PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockLPModeCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
200016c0:	b580      	push	{r7, lr}
200016c2:	b082      	sub	sp, #8
200016c4:	af00      	add	r7, sp, #0
200016c6:	6078      	str	r0, [r7, #4]
200016c8:	000a      	movs	r2, r1
200016ca:	1cfb      	adds	r3, r7, #3
200016cc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
200016ce:	1cfb      	adds	r3, r7, #3
200016d0:	781b      	ldrb	r3, [r3, #0]
200016d2:	2b00      	cmp	r3, #0
200016d4:	d006      	beq.n	200016e4 <RCC_APB2PeriphClockLPModeCmd+0x24>
  {
    RCC->APB2LPENR |= RCC_APB2Periph;
200016d6:	4b09      	ldr	r3, [pc, #36]	; (200016fc <RCC_APB2PeriphClockLPModeCmd+0x3c>)
200016d8:	6e59      	ldr	r1, [r3, #100]	; 0x64
200016da:	4b08      	ldr	r3, [pc, #32]	; (200016fc <RCC_APB2PeriphClockLPModeCmd+0x3c>)
200016dc:	687a      	ldr	r2, [r7, #4]
200016de:	430a      	orrs	r2, r1
200016e0:	665a      	str	r2, [r3, #100]	; 0x64
  }
  else
  {
    RCC->APB2LPENR &= ~RCC_APB2Periph;
  }
}
200016e2:	e006      	b.n	200016f2 <RCC_APB2PeriphClockLPModeCmd+0x32>
    RCC->APB2LPENR &= ~RCC_APB2Periph;
200016e4:	4b05      	ldr	r3, [pc, #20]	; (200016fc <RCC_APB2PeriphClockLPModeCmd+0x3c>)
200016e6:	6e5a      	ldr	r2, [r3, #100]	; 0x64
200016e8:	687b      	ldr	r3, [r7, #4]
200016ea:	43d9      	mvns	r1, r3
200016ec:	4b03      	ldr	r3, [pc, #12]	; (200016fc <RCC_APB2PeriphClockLPModeCmd+0x3c>)
200016ee:	400a      	ands	r2, r1
200016f0:	665a      	str	r2, [r3, #100]	; 0x64
}
200016f2:	46c0      	nop			; (mov r8, r8)
200016f4:	46bd      	mov	sp, r7
200016f6:	b002      	add	sp, #8
200016f8:	bd80      	pop	{r7, pc}
200016fa:	46c0      	nop			; (mov r8, r8)
200016fc:	40023800 	andmi	r3, r2, r0, lsl #16

20001700 <RCC_LSEModeConfig>:
  *            @arg RCC_LSE_LOWPOWER_MODE:  LSE oscillator in low power mode.
  *            @arg RCC_LSE_HIGHDRIVE_MODE: LSE oscillator in High Drive mode.
  * @retval None
  */
void RCC_LSEModeConfig(uint8_t RCC_Mode)
{
20001700:	b580      	push	{r7, lr}
20001702:	b082      	sub	sp, #8
20001704:	af00      	add	r7, sp, #0
20001706:	0002      	movs	r2, r0
20001708:	1dfb      	adds	r3, r7, #7
2000170a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_LSE_MODE(RCC_Mode));
  
  if(RCC_Mode == RCC_LSE_HIGHDRIVE_MODE)
2000170c:	1dfb      	adds	r3, r7, #7
2000170e:	781b      	ldrb	r3, [r3, #0]
20001710:	2b01      	cmp	r3, #1
20001712:	d106      	bne.n	20001722 <RCC_LSEModeConfig+0x22>
  {
    SET_BIT(RCC->BDCR, RCC_BDCR_LSEMOD);
20001714:	4b08      	ldr	r3, [pc, #32]	; (20001738 <RCC_LSEModeConfig+0x38>)
20001716:	6f1a      	ldr	r2, [r3, #112]	; 0x70
20001718:	4b07      	ldr	r3, [pc, #28]	; (20001738 <RCC_LSEModeConfig+0x38>)
2000171a:	2108      	movs	r1, #8
2000171c:	430a      	orrs	r2, r1
2000171e:	671a      	str	r2, [r3, #112]	; 0x70
  }
  else
  {
    CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEMOD);
  }
}
20001720:	e005      	b.n	2000172e <RCC_LSEModeConfig+0x2e>
    CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEMOD);
20001722:	4b05      	ldr	r3, [pc, #20]	; (20001738 <RCC_LSEModeConfig+0x38>)
20001724:	6f1a      	ldr	r2, [r3, #112]	; 0x70
20001726:	4b04      	ldr	r3, [pc, #16]	; (20001738 <RCC_LSEModeConfig+0x38>)
20001728:	2108      	movs	r1, #8
2000172a:	438a      	bics	r2, r1
2000172c:	671a      	str	r2, [r3, #112]	; 0x70
}
2000172e:	46c0      	nop			; (mov r8, r8)
20001730:	46bd      	mov	sp, r7
20001732:	b002      	add	sp, #8
20001734:	bd80      	pop	{r7, pc}
20001736:	46c0      	nop			; (mov r8, r8)
20001738:	40023800 	andmi	r3, r2, r0, lsl #16

2000173c <RCC_ITConfig>:
  * @param  NewState: new state of the specified RCC interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_ITConfig(uint8_t RCC_IT, FunctionalState NewState)
{
2000173c:	b580      	push	{r7, lr}
2000173e:	b082      	sub	sp, #8
20001740:	af00      	add	r7, sp, #0
20001742:	0002      	movs	r2, r0
20001744:	1dfb      	adds	r3, r7, #7
20001746:	701a      	strb	r2, [r3, #0]
20001748:	1dbb      	adds	r3, r7, #6
2000174a:	1c0a      	adds	r2, r1, #0
2000174c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_IT(RCC_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
2000174e:	1dbb      	adds	r3, r7, #6
20001750:	781b      	ldrb	r3, [r3, #0]
20001752:	2b00      	cmp	r3, #0
20001754:	d009      	beq.n	2000176a <RCC_ITConfig+0x2e>
  {
    /* Perform Byte access to RCC_CIR[14:8] bits to enable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS |= RCC_IT;
20001756:	4b0c      	ldr	r3, [pc, #48]	; (20001788 <RCC_ITConfig+0x4c>)
20001758:	781b      	ldrb	r3, [r3, #0]
2000175a:	b2da      	uxtb	r2, r3
2000175c:	490a      	ldr	r1, [pc, #40]	; (20001788 <RCC_ITConfig+0x4c>)
2000175e:	1dfb      	adds	r3, r7, #7
20001760:	781b      	ldrb	r3, [r3, #0]
20001762:	4313      	orrs	r3, r2
20001764:	b2db      	uxtb	r3, r3
20001766:	700b      	strb	r3, [r1, #0]
  else
  {
    /* Perform Byte access to RCC_CIR[14:8] bits to disable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS &= (uint8_t)~RCC_IT;
  }
}
20001768:	e00a      	b.n	20001780 <RCC_ITConfig+0x44>
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS &= (uint8_t)~RCC_IT;
2000176a:	4b07      	ldr	r3, [pc, #28]	; (20001788 <RCC_ITConfig+0x4c>)
2000176c:	781b      	ldrb	r3, [r3, #0]
2000176e:	b2db      	uxtb	r3, r3
20001770:	1dfa      	adds	r2, r7, #7
20001772:	7812      	ldrb	r2, [r2, #0]
20001774:	43d2      	mvns	r2, r2
20001776:	b2d2      	uxtb	r2, r2
20001778:	4903      	ldr	r1, [pc, #12]	; (20001788 <RCC_ITConfig+0x4c>)
2000177a:	4013      	ands	r3, r2
2000177c:	b2db      	uxtb	r3, r3
2000177e:	700b      	strb	r3, [r1, #0]
}
20001780:	46c0      	nop			; (mov r8, r8)
20001782:	46bd      	mov	sp, r7
20001784:	b002      	add	sp, #8
20001786:	bd80      	pop	{r7, pc}
20001788:	4002380d 	andmi	r3, r2, sp, lsl #16

2000178c <RCC_GetFlagStatus>:
  *            @arg RCC_FLAG_WWDGRST: Window Watchdog reset
  *            @arg RCC_FLAG_LPWRRST: Low Power reset
  * @retval The new state of RCC_FLAG (SET or RESET).
  */
FlagStatus RCC_GetFlagStatus(uint8_t RCC_FLAG)
{
2000178c:	b580      	push	{r7, lr}
2000178e:	b086      	sub	sp, #24
20001790:	af00      	add	r7, sp, #0
20001792:	0002      	movs	r2, r0
20001794:	1dfb      	adds	r3, r7, #7
20001796:	701a      	strb	r2, [r3, #0]
  uint32_t tmp = 0;
20001798:	2300      	movs	r3, #0
2000179a:	60fb      	str	r3, [r7, #12]
  uint32_t statusreg = 0;
2000179c:	2300      	movs	r3, #0
2000179e:	617b      	str	r3, [r7, #20]
  FlagStatus bitstatus = RESET;
200017a0:	2313      	movs	r3, #19
200017a2:	18fb      	adds	r3, r7, r3
200017a4:	2200      	movs	r2, #0
200017a6:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_FLAG(RCC_FLAG));

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
200017a8:	1dfb      	adds	r3, r7, #7
200017aa:	781b      	ldrb	r3, [r3, #0]
200017ac:	095b      	lsrs	r3, r3, #5
200017ae:	b2db      	uxtb	r3, r3
200017b0:	60fb      	str	r3, [r7, #12]
  if (tmp == 1)               /* The flag to check is in CR register */
200017b2:	68fb      	ldr	r3, [r7, #12]
200017b4:	2b01      	cmp	r3, #1
200017b6:	d103      	bne.n	200017c0 <RCC_GetFlagStatus+0x34>
  {
    statusreg = RCC->CR;
200017b8:	4b14      	ldr	r3, [pc, #80]	; (2000180c <RCC_GetFlagStatus+0x80>)
200017ba:	681b      	ldr	r3, [r3, #0]
200017bc:	617b      	str	r3, [r7, #20]
200017be:	e009      	b.n	200017d4 <RCC_GetFlagStatus+0x48>
  }
  else if (tmp == 2)          /* The flag to check is in BDCR register */
200017c0:	68fb      	ldr	r3, [r7, #12]
200017c2:	2b02      	cmp	r3, #2
200017c4:	d103      	bne.n	200017ce <RCC_GetFlagStatus+0x42>
  {
    statusreg = RCC->BDCR;
200017c6:	4b11      	ldr	r3, [pc, #68]	; (2000180c <RCC_GetFlagStatus+0x80>)
200017c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
200017ca:	617b      	str	r3, [r7, #20]
200017cc:	e002      	b.n	200017d4 <RCC_GetFlagStatus+0x48>
  }
  else                       /* The flag to check is in CSR register */
  {
    statusreg = RCC->CSR;
200017ce:	4b0f      	ldr	r3, [pc, #60]	; (2000180c <RCC_GetFlagStatus+0x80>)
200017d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
200017d2:	617b      	str	r3, [r7, #20]
  }

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_MASK;
200017d4:	1dfb      	adds	r3, r7, #7
200017d6:	781b      	ldrb	r3, [r3, #0]
200017d8:	221f      	movs	r2, #31
200017da:	4013      	ands	r3, r2
200017dc:	60fb      	str	r3, [r7, #12]
  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
200017de:	697a      	ldr	r2, [r7, #20]
200017e0:	68fb      	ldr	r3, [r7, #12]
200017e2:	40da      	lsrs	r2, r3
200017e4:	0013      	movs	r3, r2
200017e6:	2201      	movs	r2, #1
200017e8:	4013      	ands	r3, r2
200017ea:	d004      	beq.n	200017f6 <RCC_GetFlagStatus+0x6a>
  {
    bitstatus = SET;
200017ec:	2313      	movs	r3, #19
200017ee:	18fb      	adds	r3, r7, r3
200017f0:	2201      	movs	r2, #1
200017f2:	701a      	strb	r2, [r3, #0]
200017f4:	e003      	b.n	200017fe <RCC_GetFlagStatus+0x72>
  }
  else
  {
    bitstatus = RESET;
200017f6:	2313      	movs	r3, #19
200017f8:	18fb      	adds	r3, r7, r3
200017fa:	2200      	movs	r2, #0
200017fc:	701a      	strb	r2, [r3, #0]
  }
  /* Return the flag status */
  return bitstatus;
200017fe:	2313      	movs	r3, #19
20001800:	18fb      	adds	r3, r7, r3
20001802:	781b      	ldrb	r3, [r3, #0]
}
20001804:	0018      	movs	r0, r3
20001806:	46bd      	mov	sp, r7
20001808:	b006      	add	sp, #24
2000180a:	bd80      	pop	{r7, pc}
2000180c:	40023800 	andmi	r3, r2, r0, lsl #16

20001810 <RCC_ClearFlag>:
  *         RCC_FLAG_IWDGRST, RCC_FLAG_WWDGRST, RCC_FLAG_LPWRRST
  * @param  None
  * @retval None
  */
void RCC_ClearFlag(void)
{
20001810:	b580      	push	{r7, lr}
20001812:	af00      	add	r7, sp, #0
  /* Set RMVF bit to clear the reset flags */
  RCC->CSR |= RCC_CSR_RMVF;
20001814:	4b04      	ldr	r3, [pc, #16]	; (20001828 <RCC_ClearFlag+0x18>)
20001816:	6f5a      	ldr	r2, [r3, #116]	; 0x74
20001818:	4b03      	ldr	r3, [pc, #12]	; (20001828 <RCC_ClearFlag+0x18>)
2000181a:	2180      	movs	r1, #128	; 0x80
2000181c:	0449      	lsls	r1, r1, #17
2000181e:	430a      	orrs	r2, r1
20001820:	675a      	str	r2, [r3, #116]	; 0x74
}
20001822:	46c0      	nop			; (mov r8, r8)
20001824:	46bd      	mov	sp, r7
20001826:	bd80      	pop	{r7, pc}
20001828:	40023800 	andmi	r3, r2, r0, lsl #16

2000182c <RCC_GetITStatus>:
  *            @arg RCC_IT_PLLSAIRDY: PLLSAI clock ready interrupt (only for STM32F42xxx/43xxx/446xx/469xx/479xx devices)
  *            @arg RCC_IT_CSS: Clock Security System interrupt
  * @retval The new state of RCC_IT (SET or RESET).
  */
ITStatus RCC_GetITStatus(uint8_t RCC_IT)
{
2000182c:	b580      	push	{r7, lr}
2000182e:	b084      	sub	sp, #16
20001830:	af00      	add	r7, sp, #0
20001832:	0002      	movs	r2, r0
20001834:	1dfb      	adds	r3, r7, #7
20001836:	701a      	strb	r2, [r3, #0]
  ITStatus bitstatus = RESET;
20001838:	230f      	movs	r3, #15
2000183a:	18fb      	adds	r3, r7, r3
2000183c:	2200      	movs	r2, #0
2000183e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_GET_IT(RCC_IT));

  /* Check the status of the specified RCC interrupt */
  if ((RCC->CIR & RCC_IT) != (uint32_t)RESET)
20001840:	4b0a      	ldr	r3, [pc, #40]	; (2000186c <RCC_GetITStatus+0x40>)
20001842:	68db      	ldr	r3, [r3, #12]
20001844:	1dfa      	adds	r2, r7, #7
20001846:	7812      	ldrb	r2, [r2, #0]
20001848:	4013      	ands	r3, r2
2000184a:	d004      	beq.n	20001856 <RCC_GetITStatus+0x2a>
  {
    bitstatus = SET;
2000184c:	230f      	movs	r3, #15
2000184e:	18fb      	adds	r3, r7, r3
20001850:	2201      	movs	r2, #1
20001852:	701a      	strb	r2, [r3, #0]
20001854:	e003      	b.n	2000185e <RCC_GetITStatus+0x32>
  }
  else
  {
    bitstatus = RESET;
20001856:	230f      	movs	r3, #15
20001858:	18fb      	adds	r3, r7, r3
2000185a:	2200      	movs	r2, #0
2000185c:	701a      	strb	r2, [r3, #0]
  }
  /* Return the RCC_IT status */
  return  bitstatus;
2000185e:	230f      	movs	r3, #15
20001860:	18fb      	adds	r3, r7, r3
20001862:	781b      	ldrb	r3, [r3, #0]
}
20001864:	0018      	movs	r0, r3
20001866:	46bd      	mov	sp, r7
20001868:	b004      	add	sp, #16
2000186a:	bd80      	pop	{r7, pc}
2000186c:	40023800 	andmi	r3, r2, r0, lsl #16

20001870 <RCC_ClearITPendingBit>:
  *            @arg RCC_IT_PLLSAIRDY: PLLSAI ready interrupt (only for STM32F42xxx/43xxx/446xx/469xx/479xx devices) 
  *            @arg RCC_IT_CSS: Clock Security System interrupt
  * @retval None
  */
void RCC_ClearITPendingBit(uint8_t RCC_IT)
{
20001870:	b580      	push	{r7, lr}
20001872:	b082      	sub	sp, #8
20001874:	af00      	add	r7, sp, #0
20001876:	0002      	movs	r2, r0
20001878:	1dfb      	adds	r3, r7, #7
2000187a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_CLEAR_IT(RCC_IT));

  /* Perform Byte access to RCC_CIR[23:16] bits to clear the selected interrupt
     pending bits */
  *(__IO uint8_t *) CIR_BYTE3_ADDRESS = RCC_IT;
2000187c:	4a03      	ldr	r2, [pc, #12]	; (2000188c <RCC_ClearITPendingBit+0x1c>)
2000187e:	1dfb      	adds	r3, r7, #7
20001880:	781b      	ldrb	r3, [r3, #0]
20001882:	7013      	strb	r3, [r2, #0]
}
20001884:	46c0      	nop			; (mov r8, r8)
20001886:	46bd      	mov	sp, r7
20001888:	b002      	add	sp, #8
2000188a:	bd80      	pop	{r7, pc}
2000188c:	4002380e 	andmi	r3, r2, lr, lsl #16

20001890 <init_GPIO_Ports>:
	GPIO_Pin_12, GPIO_Pin_13, GPIO_Pin_14, GPIO_Pin_15}; */

volatile uint32_t msTicks = 0; /* Variable to store millisecond ticks */

void init_GPIO_Ports()
{
20001890:	b580      	push	{r7, lr}
20001892:	b082      	sub	sp, #8
20001894:	af00      	add	r7, sp, #0
	/*  Function used to set the GPIO configuration to the default reset state ****/
	GPIO_InitTypeDef init;
	//GPIO A UTPORTAR
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
20001896:	2101      	movs	r1, #1
20001898:	2001      	movs	r0, #1
2000189a:	f7ff fd51 	bl	20001340 <RCC_AHB1PeriphClockCmd>
	GPIO_StructInit(&init);
2000189e:	003b      	movs	r3, r7
200018a0:	0018      	movs	r0, r3
200018a2:	f000 fa63 	bl	20001d6c <GPIO_StructInit>
	init.GPIO_Pin = GPIO_Pin_1 | GPIO_Pin_3 | GPIO_Pin_5 | GPIO_Pin_7;
200018a6:	003b      	movs	r3, r7
200018a8:	22aa      	movs	r2, #170	; 0xaa
200018aa:	601a      	str	r2, [r3, #0]
	init.GPIO_Mode = GPIO_Mode_OUT;
200018ac:	003b      	movs	r3, r7
200018ae:	2201      	movs	r2, #1
200018b0:	711a      	strb	r2, [r3, #4]
	init.GPIO_OType = GPIO_OType_PP;
200018b2:	003b      	movs	r3, r7
200018b4:	2200      	movs	r2, #0
200018b6:	719a      	strb	r2, [r3, #6]
	GPIO_Init(GPIOA, &init);
200018b8:	003b      	movs	r3, r7
200018ba:	4a0e      	ldr	r2, [pc, #56]	; (200018f4 <init_GPIO_Ports+0x64>)
200018bc:	0019      	movs	r1, r3
200018be:	0010      	movs	r0, r2
200018c0:	f000 f9c8 	bl	20001c54 <GPIO_Init>

	//konfigurerar inport GPIO A
	GPIO_StructInit(&init);
200018c4:	003b      	movs	r3, r7
200018c6:	0018      	movs	r0, r3
200018c8:	f000 fa50 	bl	20001d6c <GPIO_StructInit>
	init.GPIO_Pin = GPIO_Pin_0 | GPIO_Pin_2 | GPIO_Pin_4 | GPIO_Pin_6;
200018cc:	003b      	movs	r3, r7
200018ce:	2255      	movs	r2, #85	; 0x55
200018d0:	601a      	str	r2, [r3, #0]
	init.GPIO_Mode = GPIO_Mode_IN;
200018d2:	003b      	movs	r3, r7
200018d4:	2200      	movs	r2, #0
200018d6:	711a      	strb	r2, [r3, #4]
	init.GPIO_PuPd = GPIO_PuPd_UP;
200018d8:	003b      	movs	r3, r7
200018da:	2201      	movs	r2, #1
200018dc:	71da      	strb	r2, [r3, #7]
	GPIO_Init(GPIOA, &init);
200018de:	003b      	movs	r3, r7
200018e0:	4a04      	ldr	r2, [pc, #16]	; (200018f4 <init_GPIO_Ports+0x64>)
200018e2:	0019      	movs	r1, r3
200018e4:	0010      	movs	r0, r2
200018e6:	f000 f9b5 	bl	20001c54 <GPIO_Init>
}
200018ea:	46c0      	nop			; (mov r8, r8)
200018ec:	46bd      	mov	sp, r7
200018ee:	b002      	add	sp, #8
200018f0:	bd80      	pop	{r7, pc}
200018f2:	46c0      	nop			; (mov r8, r8)
200018f4:	40020000 	andmi	r0, r2, r0

200018f8 <SysTick_Handler>:

void SysTick_Handler(void)
{ /* SysTick interrupt Handler. */
200018f8:	b580      	push	{r7, lr}
200018fa:	af00      	add	r7, sp, #0
	msTicks++;
200018fc:	4b03      	ldr	r3, [pc, #12]	; (2000190c <SysTick_Handler+0x14>)
200018fe:	681b      	ldr	r3, [r3, #0]
20001900:	1c5a      	adds	r2, r3, #1
20001902:	4b02      	ldr	r3, [pc, #8]	; (2000190c <SysTick_Handler+0x14>)
20001904:	601a      	str	r2, [r3, #0]
}
20001906:	46c0      	nop			; (mov r8, r8)
20001908:	46bd      	mov	sp, r7
2000190a:	bd80      	pop	{r7, pc}
2000190c:	20004a28 	andcs	r4, r0, r8, lsr #20

20001910 <app_Init>:

void app_Init(void)
{
20001910:	b580      	push	{r7, lr}
20001912:	b082      	sub	sp, #8
20001914:	af00      	add	r7, sp, #0
	// Initiera SysTick.
	*((void (**)(void))0x2001C03C) = SysTick_Handler;
20001916:	4b06      	ldr	r3, [pc, #24]	; (20001930 <app_Init+0x20>)
20001918:	4a06      	ldr	r2, [pc, #24]	; (20001934 <app_Init+0x24>)
2000191a:	601a      	str	r2, [r3, #0]
	uint32_t returnCode;
	returnCode = SysTick_Config(168000000 / 1000); // Genererar ett SysTick-avbrott varje ms.
2000191c:	4b06      	ldr	r3, [pc, #24]	; (20001938 <app_Init+0x28>)
2000191e:	0018      	movs	r0, r3
20001920:	f7ff f91a 	bl	20000b58 <SysTick_Config>
20001924:	0003      	movs	r3, r0
20001926:	607b      	str	r3, [r7, #4]

	if (returnCode != 0)
	{   // Om inte SysTick_Config lyckas...
		//typ reboot? bootloops är alltid kul
	}
}
20001928:	46c0      	nop			; (mov r8, r8)
2000192a:	46bd      	mov	sp, r7
2000192c:	b002      	add	sp, #8
2000192e:	bd80      	pop	{r7, pc}
20001930:	2001c03c 	andcs	ip, r1, ip, lsr r0
20001934:	200018f9 	strdcs	r1, [r0], -r9
20001938:	00029040 	andeq	r9, r2, r0, asr #32

2000193c <main>:

void main(void)
{
2000193c:	b5f0      	push	{r4, r5, r6, r7, lr}
2000193e:	b0af      	sub	sp, #188	; 0xbc
20001940:	af00      	add	r7, sp, #0
	init_GPIO_Ports();
20001942:	f7ff ffa5 	bl	20001890 <init_GPIO_Ports>
	app_Init();
20001946:	f7ff ffe3 	bl	20001910 <app_Init>
	DebugPrintInit();
2000194a:	f000 fc81 	bl	20002250 <USARTConfig>

	door test1 = {.id = 0, .controlbits = 255, .time_larm = 1, .time_central_larm = 3, .password = 0, .GPIO_lamp = GPIO_Pin_3, .GPIO_read = GPIO_Pin_2, .larmTick = 0};
2000194e:	20a0      	movs	r0, #160	; 0xa0
20001950:	183b      	adds	r3, r7, r0
20001952:	4a5d      	ldr	r2, [pc, #372]	; (20001ac8 <main+0x18c>)
20001954:	ca32      	ldmia	r2!, {r1, r4, r5}
20001956:	c332      	stmia	r3!, {r1, r4, r5}
20001958:	ca12      	ldmia	r2!, {r1, r4}
2000195a:	c312      	stmia	r3!, {r1, r4}
	door test2 = {.id = 1, .controlbits = 255, .time_larm = 1, .time_central_larm = 3, .password = 0, .GPIO_lamp = GPIO_Pin_5, .GPIO_read = GPIO_Pin_4, .larmTick = 0};
2000195c:	248c      	movs	r4, #140	; 0x8c
2000195e:	193b      	adds	r3, r7, r4
20001960:	4a5a      	ldr	r2, [pc, #360]	; (20001acc <main+0x190>)
20001962:	ca62      	ldmia	r2!, {r1, r5, r6}
20001964:	c362      	stmia	r3!, {r1, r5, r6}
20001966:	ca22      	ldmia	r2!, {r1, r5}
20001968:	c322      	stmia	r3!, {r1, r5}
	
	door test3 = {.id = 2, .controlbits = 255, .time_larm = 1, .time_central_larm = 3, .password = 0, .GPIO_lamp = GPIO_Pin_1, .GPIO_read = GPIO_Pin_0, .larmTick = 0};
2000196a:	2578      	movs	r5, #120	; 0x78
2000196c:	197b      	adds	r3, r7, r5
2000196e:	4a58      	ldr	r2, [pc, #352]	; (20001ad0 <main+0x194>)
20001970:	ca62      	ldmia	r2!, {r1, r5, r6}
20001972:	c362      	stmia	r3!, {r1, r5, r6}
20001974:	ca22      	ldmia	r2!, {r1, r5}
20001976:	c322      	stmia	r3!, {r1, r5}
	
	door test4 = {.id = 3, .controlbits = 255, .time_larm = 1, .time_central_larm = 3, .password = 0, .GPIO_lamp = GPIO_Pin_7, .GPIO_read = GPIO_Pin_6, .larmTick = 0};
20001978:	2664      	movs	r6, #100	; 0x64
2000197a:	19bb      	adds	r3, r7, r6
2000197c:	4a55      	ldr	r2, [pc, #340]	; (20001ad4 <main+0x198>)
2000197e:	ca62      	ldmia	r2!, {r1, r5, r6}
20001980:	c362      	stmia	r3!, {r1, r5, r6}
20001982:	ca22      	ldmia	r2!, {r1, r5}
20001984:	c322      	stmia	r3!, {r1, r5}
	door active_doors[4] = {test1,test2,test3,test4};
20001986:	2114      	movs	r1, #20
20001988:	187b      	adds	r3, r7, r1
2000198a:	183a      	adds	r2, r7, r0
2000198c:	ca61      	ldmia	r2!, {r0, r5, r6}
2000198e:	c361      	stmia	r3!, {r0, r5, r6}
20001990:	ca21      	ldmia	r2!, {r0, r5}
20001992:	c321      	stmia	r3!, {r0, r5}
20001994:	187b      	adds	r3, r7, r1
20001996:	193a      	adds	r2, r7, r4
20001998:	3314      	adds	r3, #20
2000199a:	ca61      	ldmia	r2!, {r0, r5, r6}
2000199c:	c361      	stmia	r3!, {r0, r5, r6}
2000199e:	ca21      	ldmia	r2!, {r0, r5}
200019a0:	c321      	stmia	r3!, {r0, r5}
200019a2:	000c      	movs	r4, r1
200019a4:	187b      	adds	r3, r7, r1
200019a6:	2578      	movs	r5, #120	; 0x78
200019a8:	197a      	adds	r2, r7, r5
200019aa:	3328      	adds	r3, #40	; 0x28
200019ac:	ca43      	ldmia	r2!, {r0, r1, r6}
200019ae:	c343      	stmia	r3!, {r0, r1, r6}
200019b0:	ca03      	ldmia	r2!, {r0, r1}
200019b2:	c303      	stmia	r3!, {r0, r1}
200019b4:	0021      	movs	r1, r4
200019b6:	187b      	adds	r3, r7, r1
200019b8:	2664      	movs	r6, #100	; 0x64
200019ba:	19ba      	adds	r2, r7, r6
200019bc:	333c      	adds	r3, #60	; 0x3c
200019be:	ca13      	ldmia	r2!, {r0, r1, r4}
200019c0:	c313      	stmia	r3!, {r0, r1, r4}
200019c2:	ca03      	ldmia	r2!, {r0, r1}
200019c4:	c303      	stmia	r3!, {r0, r1}
	
	door *active_doorsPointers[4];
	active_doorsPointers[0] = &test1;
200019c6:	1d3b      	adds	r3, r7, #4
200019c8:	20a0      	movs	r0, #160	; 0xa0
200019ca:	183a      	adds	r2, r7, r0
200019cc:	601a      	str	r2, [r3, #0]
	active_doorsPointers[1] = &test2;
200019ce:	1d3b      	adds	r3, r7, #4
200019d0:	248c      	movs	r4, #140	; 0x8c
200019d2:	193a      	adds	r2, r7, r4
200019d4:	605a      	str	r2, [r3, #4]
	active_doorsPointers[2] = &test3;
200019d6:	1d3b      	adds	r3, r7, #4
200019d8:	197a      	adds	r2, r7, r5
200019da:	609a      	str	r2, [r3, #8]
	active_doorsPointers[3] = &test4;
200019dc:	1d3b      	adds	r3, r7, #4
200019de:	19ba      	adds	r2, r7, r6
200019e0:	60da      	str	r2, [r3, #12]
	

	while (1)
	{
		for (int i = 0; i < sizeof(active_doors); i++)
200019e2:	2300      	movs	r3, #0
200019e4:	22b4      	movs	r2, #180	; 0xb4
200019e6:	18ba      	adds	r2, r7, r2
200019e8:	6013      	str	r3, [r2, #0]
200019ea:	e067      	b.n	20001abc <main+0x180>
		{
			if (GPIO_ReadInputDataBit(GPIOA, active_doors[i].GPIO_read)) // Dörren stängd?
200019ec:	2314      	movs	r3, #20
200019ee:	18f9      	adds	r1, r7, r3
200019f0:	23b4      	movs	r3, #180	; 0xb4
200019f2:	18fb      	adds	r3, r7, r3
200019f4:	681a      	ldr	r2, [r3, #0]
200019f6:	0013      	movs	r3, r2
200019f8:	009b      	lsls	r3, r3, #2
200019fa:	189b      	adds	r3, r3, r2
200019fc:	009b      	lsls	r3, r3, #2
200019fe:	18cb      	adds	r3, r1, r3
20001a00:	330c      	adds	r3, #12
20001a02:	681b      	ldr	r3, [r3, #0]
20001a04:	b29b      	uxth	r3, r3
20001a06:	4a34      	ldr	r2, [pc, #208]	; (20001ad8 <main+0x19c>)
20001a08:	0019      	movs	r1, r3
20001a0a:	0010      	movs	r0, r2
20001a0c:	f000 f9eb 	bl	20001de6 <GPIO_ReadInputDataBit>
20001a10:	1e03      	subs	r3, r0, #0
20001a12:	d008      	beq.n	20001a26 <main+0xea>
			{
				active_doorsPointers[i]->controlbits = 0;
20001a14:	1d3b      	adds	r3, r7, #4
20001a16:	22b4      	movs	r2, #180	; 0xb4
20001a18:	18ba      	adds	r2, r7, r2
20001a1a:	6812      	ldr	r2, [r2, #0]
20001a1c:	0092      	lsls	r2, r2, #2
20001a1e:	58d3      	ldr	r3, [r2, r3]
20001a20:	2200      	movs	r2, #0
20001a22:	705a      	strb	r2, [r3, #1]
20001a24:	e044      	b.n	20001ab0 <main+0x174>
				//GPIO_ResetBits(GPIOA, active_doors[i].GPIO_lamp);
			}
			else
			{ // Annars tänd.
				if (!active_doors[i].controlbits)
20001a26:	2314      	movs	r3, #20
20001a28:	18f9      	adds	r1, r7, r3
20001a2a:	23b4      	movs	r3, #180	; 0xb4
20001a2c:	18fb      	adds	r3, r7, r3
20001a2e:	681a      	ldr	r2, [r3, #0]
20001a30:	0013      	movs	r3, r2
20001a32:	009b      	lsls	r3, r3, #2
20001a34:	189b      	adds	r3, r3, r2
20001a36:	009b      	lsls	r3, r3, #2
20001a38:	18cb      	adds	r3, r1, r3
20001a3a:	3301      	adds	r3, #1
20001a3c:	781b      	ldrb	r3, [r3, #0]
20001a3e:	2b00      	cmp	r3, #0
20001a40:	d11d      	bne.n	20001a7e <main+0x142>
				{
					active_doors[i].larmTick = msTicks + 10 * 1000 * active_doors[i].time_larm; // Starta Timer.
20001a42:	2414      	movs	r4, #20
20001a44:	1939      	adds	r1, r7, r4
20001a46:	25b4      	movs	r5, #180	; 0xb4
20001a48:	197b      	adds	r3, r7, r5
20001a4a:	681a      	ldr	r2, [r3, #0]
20001a4c:	0013      	movs	r3, r2
20001a4e:	009b      	lsls	r3, r3, #2
20001a50:	189b      	adds	r3, r3, r2
20001a52:	009b      	lsls	r3, r3, #2
20001a54:	18cb      	adds	r3, r1, r3
20001a56:	3302      	adds	r3, #2
20001a58:	781b      	ldrb	r3, [r3, #0]
20001a5a:	001a      	movs	r2, r3
20001a5c:	4b1f      	ldr	r3, [pc, #124]	; (20001adc <main+0x1a0>)
20001a5e:	4353      	muls	r3, r2
20001a60:	001a      	movs	r2, r3
20001a62:	4b1f      	ldr	r3, [pc, #124]	; (20001ae0 <main+0x1a4>)
20001a64:	681b      	ldr	r3, [r3, #0]
20001a66:	18d3      	adds	r3, r2, r3
20001a68:	0018      	movs	r0, r3
20001a6a:	1939      	adds	r1, r7, r4
20001a6c:	197b      	adds	r3, r7, r5
20001a6e:	681a      	ldr	r2, [r3, #0]
20001a70:	0013      	movs	r3, r2
20001a72:	009b      	lsls	r3, r3, #2
20001a74:	189b      	adds	r3, r3, r2
20001a76:	009b      	lsls	r3, r3, #2
20001a78:	18cb      	adds	r3, r1, r3
20001a7a:	3310      	adds	r3, #16
20001a7c:	6018      	str	r0, [r3, #0]
				}
					active_doorsPointers[i]->controlbits = 0x01;
20001a7e:	1d3b      	adds	r3, r7, #4
20001a80:	20b4      	movs	r0, #180	; 0xb4
20001a82:	183a      	adds	r2, r7, r0
20001a84:	6812      	ldr	r2, [r2, #0]
20001a86:	0092      	lsls	r2, r2, #2
20001a88:	58d3      	ldr	r3, [r2, r3]
20001a8a:	2201      	movs	r2, #1
20001a8c:	705a      	strb	r2, [r3, #1]
					GPIO_SetBits(GPIOA, active_doors[i].GPIO_lamp);
20001a8e:	2314      	movs	r3, #20
20001a90:	18f9      	adds	r1, r7, r3
20001a92:	183b      	adds	r3, r7, r0
20001a94:	681a      	ldr	r2, [r3, #0]
20001a96:	0013      	movs	r3, r2
20001a98:	009b      	lsls	r3, r3, #2
20001a9a:	189b      	adds	r3, r3, r2
20001a9c:	009b      	lsls	r3, r3, #2
20001a9e:	18cb      	adds	r3, r1, r3
20001aa0:	3308      	adds	r3, #8
20001aa2:	681b      	ldr	r3, [r3, #0]
20001aa4:	b29b      	uxth	r3, r3
20001aa6:	4a0c      	ldr	r2, [pc, #48]	; (20001ad8 <main+0x19c>)
20001aa8:	0019      	movs	r1, r3
20001aaa:	0010      	movs	r0, r2
20001aac:	f000 f9f3 	bl	20001e96 <GPIO_SetBits>
		for (int i = 0; i < sizeof(active_doors); i++)
20001ab0:	22b4      	movs	r2, #180	; 0xb4
20001ab2:	18bb      	adds	r3, r7, r2
20001ab4:	681b      	ldr	r3, [r3, #0]
20001ab6:	3301      	adds	r3, #1
20001ab8:	18ba      	adds	r2, r7, r2
20001aba:	6013      	str	r3, [r2, #0]
20001abc:	23b4      	movs	r3, #180	; 0xb4
20001abe:	18fb      	adds	r3, r7, r3
20001ac0:	681b      	ldr	r3, [r3, #0]
20001ac2:	2b4f      	cmp	r3, #79	; 0x4f
20001ac4:	d992      	bls.n	200019ec <main+0xb0>
20001ac6:	e78c      	b.n	200019e2 <main+0xa6>
20001ac8:	20004f48 	andcs	r4, r0, r8, asr #30
20001acc:	20004f5c 	andcs	r4, r0, ip, asr pc
20001ad0:	20004f70 	andcs	r4, r0, r0, ror pc
20001ad4:	20004f84 	andcs	r4, r0, r4, lsl #31
20001ad8:	40020000 	andmi	r0, r2, r0
20001adc:	00002710 	andeq	r2, r0, r0, lsl r7
20001ae0:	20004a28 	andcs	r4, r0, r8, lsr #20

20001ae4 <GPIO_DeInit>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F42xxx/43xxx devices.
  *                      x can be (A, B, C, D and H) to select the GPIO peripheral for STM32F401xx devices.  
  * @retval None
  */
void GPIO_DeInit(GPIO_TypeDef* GPIOx)
{
20001ae4:	b580      	push	{r7, lr}
20001ae6:	b082      	sub	sp, #8
20001ae8:	af00      	add	r7, sp, #0
20001aea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  if (GPIOx == GPIOA)
20001aec:	687b      	ldr	r3, [r7, #4]
20001aee:	4a4e      	ldr	r2, [pc, #312]	; (20001c28 <GPIO_DeInit+0x144>)
20001af0:	4293      	cmp	r3, r2
20001af2:	d108      	bne.n	20001b06 <GPIO_DeInit+0x22>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, ENABLE);
20001af4:	2101      	movs	r1, #1
20001af6:	2001      	movs	r0, #1
20001af8:	f7ff fcc2 	bl	20001480 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, DISABLE);
20001afc:	2100      	movs	r1, #0
20001afe:	2001      	movs	r0, #1
20001b00:	f7ff fcbe 	bl	20001480 <RCC_AHB1PeriphResetCmd>
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, ENABLE);
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, DISABLE);
    }
  }
}
20001b04:	e08c      	b.n	20001c20 <GPIO_DeInit+0x13c>
  else if (GPIOx == GPIOB)
20001b06:	687b      	ldr	r3, [r7, #4]
20001b08:	4a48      	ldr	r2, [pc, #288]	; (20001c2c <GPIO_DeInit+0x148>)
20001b0a:	4293      	cmp	r3, r2
20001b0c:	d108      	bne.n	20001b20 <GPIO_DeInit+0x3c>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, ENABLE);
20001b0e:	2101      	movs	r1, #1
20001b10:	2002      	movs	r0, #2
20001b12:	f7ff fcb5 	bl	20001480 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, DISABLE);
20001b16:	2100      	movs	r1, #0
20001b18:	2002      	movs	r0, #2
20001b1a:	f7ff fcb1 	bl	20001480 <RCC_AHB1PeriphResetCmd>
}
20001b1e:	e07f      	b.n	20001c20 <GPIO_DeInit+0x13c>
  else if (GPIOx == GPIOC)
20001b20:	687b      	ldr	r3, [r7, #4]
20001b22:	4a43      	ldr	r2, [pc, #268]	; (20001c30 <GPIO_DeInit+0x14c>)
20001b24:	4293      	cmp	r3, r2
20001b26:	d108      	bne.n	20001b3a <GPIO_DeInit+0x56>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, ENABLE);
20001b28:	2101      	movs	r1, #1
20001b2a:	2004      	movs	r0, #4
20001b2c:	f7ff fca8 	bl	20001480 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, DISABLE);
20001b30:	2100      	movs	r1, #0
20001b32:	2004      	movs	r0, #4
20001b34:	f7ff fca4 	bl	20001480 <RCC_AHB1PeriphResetCmd>
}
20001b38:	e072      	b.n	20001c20 <GPIO_DeInit+0x13c>
  else if (GPIOx == GPIOD)
20001b3a:	687b      	ldr	r3, [r7, #4]
20001b3c:	4a3d      	ldr	r2, [pc, #244]	; (20001c34 <GPIO_DeInit+0x150>)
20001b3e:	4293      	cmp	r3, r2
20001b40:	d108      	bne.n	20001b54 <GPIO_DeInit+0x70>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, ENABLE);
20001b42:	2101      	movs	r1, #1
20001b44:	2008      	movs	r0, #8
20001b46:	f7ff fc9b 	bl	20001480 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, DISABLE);
20001b4a:	2100      	movs	r1, #0
20001b4c:	2008      	movs	r0, #8
20001b4e:	f7ff fc97 	bl	20001480 <RCC_AHB1PeriphResetCmd>
}
20001b52:	e065      	b.n	20001c20 <GPIO_DeInit+0x13c>
  else if (GPIOx == GPIOE)
20001b54:	687b      	ldr	r3, [r7, #4]
20001b56:	4a38      	ldr	r2, [pc, #224]	; (20001c38 <GPIO_DeInit+0x154>)
20001b58:	4293      	cmp	r3, r2
20001b5a:	d108      	bne.n	20001b6e <GPIO_DeInit+0x8a>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, ENABLE);
20001b5c:	2101      	movs	r1, #1
20001b5e:	2010      	movs	r0, #16
20001b60:	f7ff fc8e 	bl	20001480 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, DISABLE);
20001b64:	2100      	movs	r1, #0
20001b66:	2010      	movs	r0, #16
20001b68:	f7ff fc8a 	bl	20001480 <RCC_AHB1PeriphResetCmd>
}
20001b6c:	e058      	b.n	20001c20 <GPIO_DeInit+0x13c>
  else if (GPIOx == GPIOF)
20001b6e:	687b      	ldr	r3, [r7, #4]
20001b70:	4a32      	ldr	r2, [pc, #200]	; (20001c3c <GPIO_DeInit+0x158>)
20001b72:	4293      	cmp	r3, r2
20001b74:	d108      	bne.n	20001b88 <GPIO_DeInit+0xa4>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, ENABLE);
20001b76:	2101      	movs	r1, #1
20001b78:	2020      	movs	r0, #32
20001b7a:	f7ff fc81 	bl	20001480 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, DISABLE);
20001b7e:	2100      	movs	r1, #0
20001b80:	2020      	movs	r0, #32
20001b82:	f7ff fc7d 	bl	20001480 <RCC_AHB1PeriphResetCmd>
}
20001b86:	e04b      	b.n	20001c20 <GPIO_DeInit+0x13c>
  else if (GPIOx == GPIOG)
20001b88:	687b      	ldr	r3, [r7, #4]
20001b8a:	4a2d      	ldr	r2, [pc, #180]	; (20001c40 <GPIO_DeInit+0x15c>)
20001b8c:	4293      	cmp	r3, r2
20001b8e:	d108      	bne.n	20001ba2 <GPIO_DeInit+0xbe>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, ENABLE);
20001b90:	2101      	movs	r1, #1
20001b92:	2040      	movs	r0, #64	; 0x40
20001b94:	f7ff fc74 	bl	20001480 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, DISABLE);
20001b98:	2100      	movs	r1, #0
20001b9a:	2040      	movs	r0, #64	; 0x40
20001b9c:	f7ff fc70 	bl	20001480 <RCC_AHB1PeriphResetCmd>
}
20001ba0:	e03e      	b.n	20001c20 <GPIO_DeInit+0x13c>
  else if (GPIOx == GPIOH)
20001ba2:	687b      	ldr	r3, [r7, #4]
20001ba4:	4a27      	ldr	r2, [pc, #156]	; (20001c44 <GPIO_DeInit+0x160>)
20001ba6:	4293      	cmp	r3, r2
20001ba8:	d108      	bne.n	20001bbc <GPIO_DeInit+0xd8>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOH, ENABLE);
20001baa:	2101      	movs	r1, #1
20001bac:	2080      	movs	r0, #128	; 0x80
20001bae:	f7ff fc67 	bl	20001480 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOH, DISABLE);
20001bb2:	2100      	movs	r1, #0
20001bb4:	2080      	movs	r0, #128	; 0x80
20001bb6:	f7ff fc63 	bl	20001480 <RCC_AHB1PeriphResetCmd>
}
20001bba:	e031      	b.n	20001c20 <GPIO_DeInit+0x13c>
  else if (GPIOx == GPIOI)
20001bbc:	687b      	ldr	r3, [r7, #4]
20001bbe:	4a22      	ldr	r2, [pc, #136]	; (20001c48 <GPIO_DeInit+0x164>)
20001bc0:	4293      	cmp	r3, r2
20001bc2:	d10c      	bne.n	20001bde <GPIO_DeInit+0xfa>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, ENABLE);
20001bc4:	2380      	movs	r3, #128	; 0x80
20001bc6:	005b      	lsls	r3, r3, #1
20001bc8:	2101      	movs	r1, #1
20001bca:	0018      	movs	r0, r3
20001bcc:	f7ff fc58 	bl	20001480 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, DISABLE);
20001bd0:	2380      	movs	r3, #128	; 0x80
20001bd2:	005b      	lsls	r3, r3, #1
20001bd4:	2100      	movs	r1, #0
20001bd6:	0018      	movs	r0, r3
20001bd8:	f7ff fc52 	bl	20001480 <RCC_AHB1PeriphResetCmd>
}
20001bdc:	e020      	b.n	20001c20 <GPIO_DeInit+0x13c>
  else if (GPIOx == GPIOJ)
20001bde:	687b      	ldr	r3, [r7, #4]
20001be0:	4a1a      	ldr	r2, [pc, #104]	; (20001c4c <GPIO_DeInit+0x168>)
20001be2:	4293      	cmp	r3, r2
20001be4:	d10c      	bne.n	20001c00 <GPIO_DeInit+0x11c>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOJ, ENABLE);
20001be6:	2380      	movs	r3, #128	; 0x80
20001be8:	009b      	lsls	r3, r3, #2
20001bea:	2101      	movs	r1, #1
20001bec:	0018      	movs	r0, r3
20001bee:	f7ff fc47 	bl	20001480 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOJ, DISABLE);
20001bf2:	2380      	movs	r3, #128	; 0x80
20001bf4:	009b      	lsls	r3, r3, #2
20001bf6:	2100      	movs	r1, #0
20001bf8:	0018      	movs	r0, r3
20001bfa:	f7ff fc41 	bl	20001480 <RCC_AHB1PeriphResetCmd>
}
20001bfe:	e00f      	b.n	20001c20 <GPIO_DeInit+0x13c>
    if (GPIOx == GPIOK)
20001c00:	687b      	ldr	r3, [r7, #4]
20001c02:	4a13      	ldr	r2, [pc, #76]	; (20001c50 <GPIO_DeInit+0x16c>)
20001c04:	4293      	cmp	r3, r2
20001c06:	d10b      	bne.n	20001c20 <GPIO_DeInit+0x13c>
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, ENABLE);
20001c08:	2380      	movs	r3, #128	; 0x80
20001c0a:	00db      	lsls	r3, r3, #3
20001c0c:	2101      	movs	r1, #1
20001c0e:	0018      	movs	r0, r3
20001c10:	f7ff fc36 	bl	20001480 <RCC_AHB1PeriphResetCmd>
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, DISABLE);
20001c14:	2380      	movs	r3, #128	; 0x80
20001c16:	00db      	lsls	r3, r3, #3
20001c18:	2100      	movs	r1, #0
20001c1a:	0018      	movs	r0, r3
20001c1c:	f7ff fc30 	bl	20001480 <RCC_AHB1PeriphResetCmd>
}
20001c20:	46c0      	nop			; (mov r8, r8)
20001c22:	46bd      	mov	sp, r7
20001c24:	b002      	add	sp, #8
20001c26:	bd80      	pop	{r7, pc}
20001c28:	40020000 	andmi	r0, r2, r0
20001c2c:	40020400 	andmi	r0, r2, r0, lsl #8
20001c30:	40020800 	andmi	r0, r2, r0, lsl #16
20001c34:	40020c00 	andmi	r0, r2, r0, lsl #24
20001c38:	40021000 	andmi	r1, r2, r0
20001c3c:	40021400 	andmi	r1, r2, r0, lsl #8
20001c40:	40021800 	andmi	r1, r2, r0, lsl #16
20001c44:	40021c00 	andmi	r1, r2, r0, lsl #24
20001c48:	40022000 	andmi	r2, r2, r0
20001c4c:	40022400 	andmi	r2, r2, r0, lsl #8
20001c50:	40022800 	andmi	r2, r2, r0, lsl #16

20001c54 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
20001c54:	b580      	push	{r7, lr}
20001c56:	b086      	sub	sp, #24
20001c58:	af00      	add	r7, sp, #0
20001c5a:	6078      	str	r0, [r7, #4]
20001c5c:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
20001c5e:	2300      	movs	r3, #0
20001c60:	617b      	str	r3, [r7, #20]
20001c62:	2300      	movs	r3, #0
20001c64:	613b      	str	r3, [r7, #16]
20001c66:	2300      	movs	r3, #0
20001c68:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
20001c6a:	2300      	movs	r3, #0
20001c6c:	617b      	str	r3, [r7, #20]
20001c6e:	e076      	b.n	20001d5e <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
20001c70:	2201      	movs	r2, #1
20001c72:	697b      	ldr	r3, [r7, #20]
20001c74:	409a      	lsls	r2, r3
20001c76:	0013      	movs	r3, r2
20001c78:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
20001c7a:	683b      	ldr	r3, [r7, #0]
20001c7c:	681a      	ldr	r2, [r3, #0]
20001c7e:	693b      	ldr	r3, [r7, #16]
20001c80:	4013      	ands	r3, r2
20001c82:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
20001c84:	68fa      	ldr	r2, [r7, #12]
20001c86:	693b      	ldr	r3, [r7, #16]
20001c88:	429a      	cmp	r2, r3
20001c8a:	d165      	bne.n	20001d58 <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
20001c8c:	687b      	ldr	r3, [r7, #4]
20001c8e:	681b      	ldr	r3, [r3, #0]
20001c90:	697a      	ldr	r2, [r7, #20]
20001c92:	0052      	lsls	r2, r2, #1
20001c94:	2103      	movs	r1, #3
20001c96:	4091      	lsls	r1, r2
20001c98:	000a      	movs	r2, r1
20001c9a:	43d2      	mvns	r2, r2
20001c9c:	401a      	ands	r2, r3
20001c9e:	687b      	ldr	r3, [r7, #4]
20001ca0:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
20001ca2:	687b      	ldr	r3, [r7, #4]
20001ca4:	681a      	ldr	r2, [r3, #0]
20001ca6:	683b      	ldr	r3, [r7, #0]
20001ca8:	791b      	ldrb	r3, [r3, #4]
20001caa:	0019      	movs	r1, r3
20001cac:	697b      	ldr	r3, [r7, #20]
20001cae:	005b      	lsls	r3, r3, #1
20001cb0:	4099      	lsls	r1, r3
20001cb2:	000b      	movs	r3, r1
20001cb4:	431a      	orrs	r2, r3
20001cb6:	687b      	ldr	r3, [r7, #4]
20001cb8:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
20001cba:	683b      	ldr	r3, [r7, #0]
20001cbc:	791b      	ldrb	r3, [r3, #4]
20001cbe:	2b01      	cmp	r3, #1
20001cc0:	d003      	beq.n	20001cca <GPIO_Init+0x76>
20001cc2:	683b      	ldr	r3, [r7, #0]
20001cc4:	791b      	ldrb	r3, [r3, #4]
20001cc6:	2b02      	cmp	r3, #2
20001cc8:	d12e      	bne.n	20001d28 <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
20001cca:	687b      	ldr	r3, [r7, #4]
20001ccc:	689b      	ldr	r3, [r3, #8]
20001cce:	697a      	ldr	r2, [r7, #20]
20001cd0:	0052      	lsls	r2, r2, #1
20001cd2:	2103      	movs	r1, #3
20001cd4:	4091      	lsls	r1, r2
20001cd6:	000a      	movs	r2, r1
20001cd8:	43d2      	mvns	r2, r2
20001cda:	401a      	ands	r2, r3
20001cdc:	687b      	ldr	r3, [r7, #4]
20001cde:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
20001ce0:	687b      	ldr	r3, [r7, #4]
20001ce2:	689a      	ldr	r2, [r3, #8]
20001ce4:	683b      	ldr	r3, [r7, #0]
20001ce6:	795b      	ldrb	r3, [r3, #5]
20001ce8:	0019      	movs	r1, r3
20001cea:	697b      	ldr	r3, [r7, #20]
20001cec:	005b      	lsls	r3, r3, #1
20001cee:	4099      	lsls	r1, r3
20001cf0:	000b      	movs	r3, r1
20001cf2:	431a      	orrs	r2, r3
20001cf4:	687b      	ldr	r3, [r7, #4]
20001cf6:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
20001cf8:	687b      	ldr	r3, [r7, #4]
20001cfa:	685b      	ldr	r3, [r3, #4]
20001cfc:	697a      	ldr	r2, [r7, #20]
20001cfe:	b292      	uxth	r2, r2
20001d00:	0011      	movs	r1, r2
20001d02:	2201      	movs	r2, #1
20001d04:	408a      	lsls	r2, r1
20001d06:	43d2      	mvns	r2, r2
20001d08:	401a      	ands	r2, r3
20001d0a:	687b      	ldr	r3, [r7, #4]
20001d0c:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
20001d0e:	687b      	ldr	r3, [r7, #4]
20001d10:	685b      	ldr	r3, [r3, #4]
20001d12:	683a      	ldr	r2, [r7, #0]
20001d14:	7992      	ldrb	r2, [r2, #6]
20001d16:	0011      	movs	r1, r2
20001d18:	697a      	ldr	r2, [r7, #20]
20001d1a:	b292      	uxth	r2, r2
20001d1c:	4091      	lsls	r1, r2
20001d1e:	000a      	movs	r2, r1
20001d20:	b292      	uxth	r2, r2
20001d22:	431a      	orrs	r2, r3
20001d24:	687b      	ldr	r3, [r7, #4]
20001d26:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
20001d28:	687b      	ldr	r3, [r7, #4]
20001d2a:	68db      	ldr	r3, [r3, #12]
20001d2c:	697a      	ldr	r2, [r7, #20]
20001d2e:	b292      	uxth	r2, r2
20001d30:	0052      	lsls	r2, r2, #1
20001d32:	2103      	movs	r1, #3
20001d34:	4091      	lsls	r1, r2
20001d36:	000a      	movs	r2, r1
20001d38:	43d2      	mvns	r2, r2
20001d3a:	401a      	ands	r2, r3
20001d3c:	687b      	ldr	r3, [r7, #4]
20001d3e:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
20001d40:	687b      	ldr	r3, [r7, #4]
20001d42:	68da      	ldr	r2, [r3, #12]
20001d44:	683b      	ldr	r3, [r7, #0]
20001d46:	79db      	ldrb	r3, [r3, #7]
20001d48:	0019      	movs	r1, r3
20001d4a:	697b      	ldr	r3, [r7, #20]
20001d4c:	005b      	lsls	r3, r3, #1
20001d4e:	4099      	lsls	r1, r3
20001d50:	000b      	movs	r3, r1
20001d52:	431a      	orrs	r2, r3
20001d54:	687b      	ldr	r3, [r7, #4]
20001d56:	60da      	str	r2, [r3, #12]
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
20001d58:	697b      	ldr	r3, [r7, #20]
20001d5a:	3301      	adds	r3, #1
20001d5c:	617b      	str	r3, [r7, #20]
20001d5e:	697b      	ldr	r3, [r7, #20]
20001d60:	2b0f      	cmp	r3, #15
20001d62:	d985      	bls.n	20001c70 <GPIO_Init+0x1c>
    }
  }
}
20001d64:	46c0      	nop			; (mov r8, r8)
20001d66:	46bd      	mov	sp, r7
20001d68:	b006      	add	sp, #24
20001d6a:	bd80      	pop	{r7, pc}

20001d6c <GPIO_StructInit>:
  * @brief  Fills each GPIO_InitStruct member with its default value.
  * @param  GPIO_InitStruct : pointer to a GPIO_InitTypeDef structure which will be initialized.
  * @retval None
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
20001d6c:	b580      	push	{r7, lr}
20001d6e:	b082      	sub	sp, #8
20001d70:	af00      	add	r7, sp, #0
20001d72:	6078      	str	r0, [r7, #4]
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
20001d74:	687b      	ldr	r3, [r7, #4]
20001d76:	4a09      	ldr	r2, [pc, #36]	; (20001d9c <GPIO_StructInit+0x30>)
20001d78:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN;
20001d7a:	687b      	ldr	r3, [r7, #4]
20001d7c:	2200      	movs	r2, #0
20001d7e:	711a      	strb	r2, [r3, #4]
  GPIO_InitStruct->GPIO_Speed = GPIO_Speed_2MHz;
20001d80:	687b      	ldr	r3, [r7, #4]
20001d82:	2200      	movs	r2, #0
20001d84:	715a      	strb	r2, [r3, #5]
  GPIO_InitStruct->GPIO_OType = GPIO_OType_PP;
20001d86:	687b      	ldr	r3, [r7, #4]
20001d88:	2200      	movs	r2, #0
20001d8a:	719a      	strb	r2, [r3, #6]
  GPIO_InitStruct->GPIO_PuPd = GPIO_PuPd_NOPULL;
20001d8c:	687b      	ldr	r3, [r7, #4]
20001d8e:	2200      	movs	r2, #0
20001d90:	71da      	strb	r2, [r3, #7]
}
20001d92:	46c0      	nop			; (mov r8, r8)
20001d94:	46bd      	mov	sp, r7
20001d96:	b002      	add	sp, #8
20001d98:	bd80      	pop	{r7, pc}
20001d9a:	46c0      	nop			; (mov r8, r8)
20001d9c:	0000ffff 	strdeq	pc, [r0], -pc	; <UNPREDICTABLE>

20001da0 <GPIO_PinLockConfig>:
  * @param  GPIO_Pin: specifies the port bit to be locked.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_PinLockConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
20001da0:	b580      	push	{r7, lr}
20001da2:	b084      	sub	sp, #16
20001da4:	af00      	add	r7, sp, #0
20001da6:	6078      	str	r0, [r7, #4]
20001da8:	000a      	movs	r2, r1
20001daa:	1cbb      	adds	r3, r7, #2
20001dac:	801a      	strh	r2, [r3, #0]
  __IO uint32_t tmp = 0x00010000;
20001dae:	2380      	movs	r3, #128	; 0x80
20001db0:	025b      	lsls	r3, r3, #9
20001db2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  tmp |= GPIO_Pin;
20001db4:	1cbb      	adds	r3, r7, #2
20001db6:	881a      	ldrh	r2, [r3, #0]
20001db8:	68fb      	ldr	r3, [r7, #12]
20001dba:	4313      	orrs	r3, r2
20001dbc:	60fb      	str	r3, [r7, #12]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
20001dbe:	68fa      	ldr	r2, [r7, #12]
20001dc0:	687b      	ldr	r3, [r7, #4]
20001dc2:	61da      	str	r2, [r3, #28]
  /* Reset LCKK bit */
  GPIOx->LCKR =  GPIO_Pin;
20001dc4:	1cbb      	adds	r3, r7, #2
20001dc6:	881a      	ldrh	r2, [r3, #0]
20001dc8:	687b      	ldr	r3, [r7, #4]
20001dca:	61da      	str	r2, [r3, #28]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
20001dcc:	68fa      	ldr	r2, [r7, #12]
20001dce:	687b      	ldr	r3, [r7, #4]
20001dd0:	61da      	str	r2, [r3, #28]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
20001dd2:	687b      	ldr	r3, [r7, #4]
20001dd4:	69db      	ldr	r3, [r3, #28]
20001dd6:	60fb      	str	r3, [r7, #12]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
20001dd8:	687b      	ldr	r3, [r7, #4]
20001dda:	69db      	ldr	r3, [r3, #28]
20001ddc:	60fb      	str	r3, [r7, #12]
}
20001dde:	46c0      	nop			; (mov r8, r8)
20001de0:	46bd      	mov	sp, r7
20001de2:	b004      	add	sp, #16
20001de4:	bd80      	pop	{r7, pc}

20001de6 <GPIO_ReadInputDataBit>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
uint8_t GPIO_ReadInputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
20001de6:	b580      	push	{r7, lr}
20001de8:	b084      	sub	sp, #16
20001dea:	af00      	add	r7, sp, #0
20001dec:	6078      	str	r0, [r7, #4]
20001dee:	000a      	movs	r2, r1
20001df0:	1cbb      	adds	r3, r7, #2
20001df2:	801a      	strh	r2, [r3, #0]
  uint8_t bitstatus = 0x00;
20001df4:	230f      	movs	r3, #15
20001df6:	18fb      	adds	r3, r7, r3
20001df8:	2200      	movs	r2, #0
20001dfa:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
20001dfc:	687b      	ldr	r3, [r7, #4]
20001dfe:	691b      	ldr	r3, [r3, #16]
20001e00:	1cba      	adds	r2, r7, #2
20001e02:	8812      	ldrh	r2, [r2, #0]
20001e04:	4013      	ands	r3, r2
20001e06:	d004      	beq.n	20001e12 <GPIO_ReadInputDataBit+0x2c>
  {
    bitstatus = (uint8_t)Bit_SET;
20001e08:	230f      	movs	r3, #15
20001e0a:	18fb      	adds	r3, r7, r3
20001e0c:	2201      	movs	r2, #1
20001e0e:	701a      	strb	r2, [r3, #0]
20001e10:	e003      	b.n	20001e1a <GPIO_ReadInputDataBit+0x34>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
20001e12:	230f      	movs	r3, #15
20001e14:	18fb      	adds	r3, r7, r3
20001e16:	2200      	movs	r2, #0
20001e18:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
20001e1a:	230f      	movs	r3, #15
20001e1c:	18fb      	adds	r3, r7, r3
20001e1e:	781b      	ldrb	r3, [r3, #0]
}
20001e20:	0018      	movs	r0, r3
20001e22:	46bd      	mov	sp, r7
20001e24:	b004      	add	sp, #16
20001e26:	bd80      	pop	{r7, pc}

20001e28 <GPIO_ReadInputData>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F42xxx/43xxx devices.
  *                      x can be (A, B, C, D and H) to select the GPIO peripheral for STM32F401xx devices. 
  * @retval GPIO input data port value.
  */
uint16_t GPIO_ReadInputData(GPIO_TypeDef* GPIOx)
{
20001e28:	b580      	push	{r7, lr}
20001e2a:	b082      	sub	sp, #8
20001e2c:	af00      	add	r7, sp, #0
20001e2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  return ((uint16_t)GPIOx->IDR);
20001e30:	687b      	ldr	r3, [r7, #4]
20001e32:	691b      	ldr	r3, [r3, #16]
20001e34:	b29b      	uxth	r3, r3
}
20001e36:	0018      	movs	r0, r3
20001e38:	46bd      	mov	sp, r7
20001e3a:	b002      	add	sp, #8
20001e3c:	bd80      	pop	{r7, pc}

20001e3e <GPIO_ReadOutputDataBit>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *          This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The output port pin value.
  */
uint8_t GPIO_ReadOutputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
20001e3e:	b580      	push	{r7, lr}
20001e40:	b084      	sub	sp, #16
20001e42:	af00      	add	r7, sp, #0
20001e44:	6078      	str	r0, [r7, #4]
20001e46:	000a      	movs	r2, r1
20001e48:	1cbb      	adds	r3, r7, #2
20001e4a:	801a      	strh	r2, [r3, #0]
  uint8_t bitstatus = 0x00;
20001e4c:	230f      	movs	r3, #15
20001e4e:	18fb      	adds	r3, r7, r3
20001e50:	2200      	movs	r2, #0
20001e52:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if (((GPIOx->ODR) & GPIO_Pin) != (uint32_t)Bit_RESET)
20001e54:	687b      	ldr	r3, [r7, #4]
20001e56:	695b      	ldr	r3, [r3, #20]
20001e58:	1cba      	adds	r2, r7, #2
20001e5a:	8812      	ldrh	r2, [r2, #0]
20001e5c:	4013      	ands	r3, r2
20001e5e:	d004      	beq.n	20001e6a <GPIO_ReadOutputDataBit+0x2c>
  {
    bitstatus = (uint8_t)Bit_SET;
20001e60:	230f      	movs	r3, #15
20001e62:	18fb      	adds	r3, r7, r3
20001e64:	2201      	movs	r2, #1
20001e66:	701a      	strb	r2, [r3, #0]
20001e68:	e003      	b.n	20001e72 <GPIO_ReadOutputDataBit+0x34>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
20001e6a:	230f      	movs	r3, #15
20001e6c:	18fb      	adds	r3, r7, r3
20001e6e:	2200      	movs	r2, #0
20001e70:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
20001e72:	230f      	movs	r3, #15
20001e74:	18fb      	adds	r3, r7, r3
20001e76:	781b      	ldrb	r3, [r3, #0]
}
20001e78:	0018      	movs	r0, r3
20001e7a:	46bd      	mov	sp, r7
20001e7c:	b004      	add	sp, #16
20001e7e:	bd80      	pop	{r7, pc}

20001e80 <GPIO_ReadOutputData>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F42xxx/43xxx devices.
  *                      x can be (A, B, C, D and H) to select the GPIO peripheral for STM32F401xx devices. 
  * @retval GPIO output data port value.
  */
uint16_t GPIO_ReadOutputData(GPIO_TypeDef* GPIOx)
{
20001e80:	b580      	push	{r7, lr}
20001e82:	b082      	sub	sp, #8
20001e84:	af00      	add	r7, sp, #0
20001e86:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  return ((uint16_t)GPIOx->ODR);
20001e88:	687b      	ldr	r3, [r7, #4]
20001e8a:	695b      	ldr	r3, [r3, #20]
20001e8c:	b29b      	uxth	r3, r3
}
20001e8e:	0018      	movs	r0, r3
20001e90:	46bd      	mov	sp, r7
20001e92:	b002      	add	sp, #8
20001e94:	bd80      	pop	{r7, pc}

20001e96 <GPIO_SetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
20001e96:	b580      	push	{r7, lr}
20001e98:	b082      	sub	sp, #8
20001e9a:	af00      	add	r7, sp, #0
20001e9c:	6078      	str	r0, [r7, #4]
20001e9e:	000a      	movs	r2, r1
20001ea0:	1cbb      	adds	r3, r7, #2
20001ea2:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRL = GPIO_Pin;
20001ea4:	687b      	ldr	r3, [r7, #4]
20001ea6:	1cba      	adds	r2, r7, #2
20001ea8:	8812      	ldrh	r2, [r2, #0]
20001eaa:	831a      	strh	r2, [r3, #24]
}
20001eac:	46c0      	nop			; (mov r8, r8)
20001eae:	46bd      	mov	sp, r7
20001eb0:	b002      	add	sp, #8
20001eb2:	bd80      	pop	{r7, pc}

20001eb4 <GPIO_ResetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
20001eb4:	b580      	push	{r7, lr}
20001eb6:	b082      	sub	sp, #8
20001eb8:	af00      	add	r7, sp, #0
20001eba:	6078      	str	r0, [r7, #4]
20001ebc:	000a      	movs	r2, r1
20001ebe:	1cbb      	adds	r3, r7, #2
20001ec0:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRH = GPIO_Pin;
20001ec2:	687b      	ldr	r3, [r7, #4]
20001ec4:	1cba      	adds	r2, r7, #2
20001ec6:	8812      	ldrh	r2, [r2, #0]
20001ec8:	835a      	strh	r2, [r3, #26]
}
20001eca:	46c0      	nop			; (mov r8, r8)
20001ecc:	46bd      	mov	sp, r7
20001ece:	b002      	add	sp, #8
20001ed0:	bd80      	pop	{r7, pc}

20001ed2 <GPIO_WriteBit>:
  *            @arg Bit_RESET: to clear the port pin
  *            @arg Bit_SET: to set the port pin
  * @retval None
  */
void GPIO_WriteBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, BitAction BitVal)
{
20001ed2:	b580      	push	{r7, lr}
20001ed4:	b082      	sub	sp, #8
20001ed6:	af00      	add	r7, sp, #0
20001ed8:	6078      	str	r0, [r7, #4]
20001eda:	0008      	movs	r0, r1
20001edc:	0011      	movs	r1, r2
20001ede:	1cbb      	adds	r3, r7, #2
20001ee0:	1c02      	adds	r2, r0, #0
20001ee2:	801a      	strh	r2, [r3, #0]
20001ee4:	1c7b      	adds	r3, r7, #1
20001ee6:	1c0a      	adds	r2, r1, #0
20001ee8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal));

  if (BitVal != Bit_RESET)
20001eea:	1c7b      	adds	r3, r7, #1
20001eec:	781b      	ldrb	r3, [r3, #0]
20001eee:	2b00      	cmp	r3, #0
20001ef0:	d004      	beq.n	20001efc <GPIO_WriteBit+0x2a>
  {
    GPIOx->BSRRL = GPIO_Pin;
20001ef2:	687b      	ldr	r3, [r7, #4]
20001ef4:	1cba      	adds	r2, r7, #2
20001ef6:	8812      	ldrh	r2, [r2, #0]
20001ef8:	831a      	strh	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRRH = GPIO_Pin ;
  }
}
20001efa:	e003      	b.n	20001f04 <GPIO_WriteBit+0x32>
    GPIOx->BSRRH = GPIO_Pin ;
20001efc:	687b      	ldr	r3, [r7, #4]
20001efe:	1cba      	adds	r2, r7, #2
20001f00:	8812      	ldrh	r2, [r2, #0]
20001f02:	835a      	strh	r2, [r3, #26]
}
20001f04:	46c0      	nop			; (mov r8, r8)
20001f06:	46bd      	mov	sp, r7
20001f08:	b002      	add	sp, #8
20001f0a:	bd80      	pop	{r7, pc}

20001f0c <GPIO_Write>:
  *                      x can be (A, B, C, D and H) to select the GPIO peripheral for STM32F401xx devices. 
  * @param  PortVal: specifies the value to be written to the port output data register.
  * @retval None
  */
void GPIO_Write(GPIO_TypeDef* GPIOx, uint16_t PortVal)
{
20001f0c:	b580      	push	{r7, lr}
20001f0e:	b082      	sub	sp, #8
20001f10:	af00      	add	r7, sp, #0
20001f12:	6078      	str	r0, [r7, #4]
20001f14:	000a      	movs	r2, r1
20001f16:	1cbb      	adds	r3, r7, #2
20001f18:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR = PortVal;
20001f1a:	1cbb      	adds	r3, r7, #2
20001f1c:	881a      	ldrh	r2, [r3, #0]
20001f1e:	687b      	ldr	r3, [r7, #4]
20001f20:	615a      	str	r2, [r3, #20]
}
20001f22:	46c0      	nop			; (mov r8, r8)
20001f24:	46bd      	mov	sp, r7
20001f26:	b002      	add	sp, #8
20001f28:	bd80      	pop	{r7, pc}

20001f2a <GPIO_ToggleBits>:
  *                      x can be (A, B, C, D and H) to select the GPIO peripheral for STM32F401xx devices. 
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void GPIO_ToggleBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
20001f2a:	b580      	push	{r7, lr}
20001f2c:	b082      	sub	sp, #8
20001f2e:	af00      	add	r7, sp, #0
20001f30:	6078      	str	r0, [r7, #4]
20001f32:	000a      	movs	r2, r1
20001f34:	1cbb      	adds	r3, r7, #2
20001f36:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR ^= GPIO_Pin;
20001f38:	687b      	ldr	r3, [r7, #4]
20001f3a:	695a      	ldr	r2, [r3, #20]
20001f3c:	1cbb      	adds	r3, r7, #2
20001f3e:	881b      	ldrh	r3, [r3, #0]
20001f40:	405a      	eors	r2, r3
20001f42:	687b      	ldr	r3, [r7, #4]
20001f44:	615a      	str	r2, [r3, #20]
}
20001f46:	46c0      	nop			; (mov r8, r8)
20001f48:	46bd      	mov	sp, r7
20001f4a:	b002      	add	sp, #8
20001f4c:	bd80      	pop	{r7, pc}

20001f4e <GPIO_PinAFConfig>:
  *            @arg GPIO_AF_LTDC: Connect LTDC pins to AF14 for STM32F429xx/439xx devices. 
  *            @arg GPIO_AF_EVENTOUT: Connect EVENTOUT pins to AF15
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
20001f4e:	b580      	push	{r7, lr}
20001f50:	b084      	sub	sp, #16
20001f52:	af00      	add	r7, sp, #0
20001f54:	6078      	str	r0, [r7, #4]
20001f56:	0008      	movs	r0, r1
20001f58:	0011      	movs	r1, r2
20001f5a:	1cbb      	adds	r3, r7, #2
20001f5c:	1c02      	adds	r2, r0, #0
20001f5e:	801a      	strh	r2, [r3, #0]
20001f60:	1c7b      	adds	r3, r7, #1
20001f62:	1c0a      	adds	r2, r1, #0
20001f64:	701a      	strb	r2, [r3, #0]
  uint32_t temp = 0x00;
20001f66:	2300      	movs	r3, #0
20001f68:	60fb      	str	r3, [r7, #12]
  uint32_t temp_2 = 0x00;
20001f6a:	2300      	movs	r3, #0
20001f6c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
20001f6e:	1c7b      	adds	r3, r7, #1
20001f70:	781a      	ldrb	r2, [r3, #0]
20001f72:	1cbb      	adds	r3, r7, #2
20001f74:	881b      	ldrh	r3, [r3, #0]
20001f76:	2107      	movs	r1, #7
20001f78:	400b      	ands	r3, r1
20001f7a:	009b      	lsls	r3, r3, #2
20001f7c:	409a      	lsls	r2, r3
20001f7e:	0013      	movs	r3, r2
20001f80:	60fb      	str	r3, [r7, #12]
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
20001f82:	1cbb      	adds	r3, r7, #2
20001f84:	881b      	ldrh	r3, [r3, #0]
20001f86:	08db      	lsrs	r3, r3, #3
20001f88:	b29b      	uxth	r3, r3
20001f8a:	001a      	movs	r2, r3
20001f8c:	687b      	ldr	r3, [r7, #4]
20001f8e:	3208      	adds	r2, #8
20001f90:	0092      	lsls	r2, r2, #2
20001f92:	58d3      	ldr	r3, [r2, r3]
20001f94:	1cba      	adds	r2, r7, #2
20001f96:	8812      	ldrh	r2, [r2, #0]
20001f98:	2107      	movs	r1, #7
20001f9a:	400a      	ands	r2, r1
20001f9c:	0092      	lsls	r2, r2, #2
20001f9e:	210f      	movs	r1, #15
20001fa0:	4091      	lsls	r1, r2
20001fa2:	000a      	movs	r2, r1
20001fa4:	43d2      	mvns	r2, r2
20001fa6:	1cb9      	adds	r1, r7, #2
20001fa8:	8809      	ldrh	r1, [r1, #0]
20001faa:	08c9      	lsrs	r1, r1, #3
20001fac:	b289      	uxth	r1, r1
20001fae:	0008      	movs	r0, r1
20001fb0:	401a      	ands	r2, r3
20001fb2:	0011      	movs	r1, r2
20001fb4:	687b      	ldr	r3, [r7, #4]
20001fb6:	0002      	movs	r2, r0
20001fb8:	3208      	adds	r2, #8
20001fba:	0092      	lsls	r2, r2, #2
20001fbc:	50d1      	str	r1, [r2, r3]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
20001fbe:	1cbb      	adds	r3, r7, #2
20001fc0:	881b      	ldrh	r3, [r3, #0]
20001fc2:	08db      	lsrs	r3, r3, #3
20001fc4:	b29b      	uxth	r3, r3
20001fc6:	001a      	movs	r2, r3
20001fc8:	687b      	ldr	r3, [r7, #4]
20001fca:	3208      	adds	r2, #8
20001fcc:	0092      	lsls	r2, r2, #2
20001fce:	58d3      	ldr	r3, [r2, r3]
20001fd0:	68fa      	ldr	r2, [r7, #12]
20001fd2:	4313      	orrs	r3, r2
20001fd4:	60bb      	str	r3, [r7, #8]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
20001fd6:	1cbb      	adds	r3, r7, #2
20001fd8:	881b      	ldrh	r3, [r3, #0]
20001fda:	08db      	lsrs	r3, r3, #3
20001fdc:	b29b      	uxth	r3, r3
20001fde:	001a      	movs	r2, r3
20001fe0:	687b      	ldr	r3, [r7, #4]
20001fe2:	3208      	adds	r2, #8
20001fe4:	0092      	lsls	r2, r2, #2
20001fe6:	68b9      	ldr	r1, [r7, #8]
20001fe8:	50d1      	str	r1, [r2, r3]
}
20001fea:	46c0      	nop			; (mov r8, r8)
20001fec:	46bd      	mov	sp, r7
20001fee:	b004      	add	sp, #16
20001ff0:	bd80      	pop	{r7, pc}
20001ff2:	46c0      	nop			; (mov r8, r8)

20001ff4 <NVIC_PriorityGroupConfig>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void NVIC_PriorityGroupConfig(uint32_t NVIC_PriorityGroup)
{
20001ff4:	b580      	push	{r7, lr}
20001ff6:	b082      	sub	sp, #8
20001ff8:	af00      	add	r7, sp, #0
20001ffa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
20001ffc:	4b04      	ldr	r3, [pc, #16]	; (20002010 <NVIC_PriorityGroupConfig+0x1c>)
20001ffe:	687a      	ldr	r2, [r7, #4]
20002000:	4904      	ldr	r1, [pc, #16]	; (20002014 <NVIC_PriorityGroupConfig+0x20>)
20002002:	430a      	orrs	r2, r1
20002004:	60da      	str	r2, [r3, #12]
}
20002006:	46c0      	nop			; (mov r8, r8)
20002008:	46bd      	mov	sp, r7
2000200a:	b002      	add	sp, #8
2000200c:	bd80      	pop	{r7, pc}
2000200e:	46c0      	nop			; (mov r8, r8)
20002010:	e000ed00 	and	lr, r0, r0, lsl #26
20002014:	05fa0000 	ldrbeq	r0, [sl, #0]!

20002018 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
20002018:	b5b0      	push	{r4, r5, r7, lr}
2000201a:	b084      	sub	sp, #16
2000201c:	af00      	add	r7, sp, #0
2000201e:	6078      	str	r0, [r7, #4]
  uint8_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
20002020:	230f      	movs	r3, #15
20002022:	18fb      	adds	r3, r7, r3
20002024:	2200      	movs	r2, #0
20002026:	701a      	strb	r2, [r3, #0]
20002028:	230e      	movs	r3, #14
2000202a:	18fb      	adds	r3, r7, r3
2000202c:	2200      	movs	r2, #0
2000202e:	701a      	strb	r2, [r3, #0]
20002030:	230d      	movs	r3, #13
20002032:	18fb      	adds	r3, r7, r3
20002034:	220f      	movs	r2, #15
20002036:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
20002038:	687b      	ldr	r3, [r7, #4]
2000203a:	78db      	ldrb	r3, [r3, #3]
2000203c:	2b00      	cmp	r3, #0
2000203e:	d04d      	beq.n	200020dc <NVIC_Init+0xc4>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
20002040:	4b31      	ldr	r3, [pc, #196]	; (20002108 <NVIC_Init+0xf0>)
20002042:	68db      	ldr	r3, [r3, #12]
20002044:	43db      	mvns	r3, r3
20002046:	0a1b      	lsrs	r3, r3, #8
20002048:	b2da      	uxtb	r2, r3
2000204a:	200f      	movs	r0, #15
2000204c:	183b      	adds	r3, r7, r0
2000204e:	2107      	movs	r1, #7
20002050:	400a      	ands	r2, r1
20002052:	701a      	strb	r2, [r3, #0]
    tmppre = (0x4 - tmppriority);
20002054:	250e      	movs	r5, #14
20002056:	197b      	adds	r3, r7, r5
20002058:	183a      	adds	r2, r7, r0
2000205a:	7812      	ldrb	r2, [r2, #0]
2000205c:	2104      	movs	r1, #4
2000205e:	1a8a      	subs	r2, r1, r2
20002060:	701a      	strb	r2, [r3, #0]
    tmpsub = tmpsub >> tmppriority;
20002062:	240d      	movs	r4, #13
20002064:	193b      	adds	r3, r7, r4
20002066:	781a      	ldrb	r2, [r3, #0]
20002068:	0001      	movs	r1, r0
2000206a:	187b      	adds	r3, r7, r1
2000206c:	781b      	ldrb	r3, [r3, #0]
2000206e:	411a      	asrs	r2, r3
20002070:	193b      	adds	r3, r7, r4
20002072:	701a      	strb	r2, [r3, #0]

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
20002074:	687b      	ldr	r3, [r7, #4]
20002076:	785b      	ldrb	r3, [r3, #1]
20002078:	001a      	movs	r2, r3
2000207a:	197b      	adds	r3, r7, r5
2000207c:	781b      	ldrb	r3, [r3, #0]
2000207e:	409a      	lsls	r2, r3
20002080:	0008      	movs	r0, r1
20002082:	187b      	adds	r3, r7, r1
20002084:	701a      	strb	r2, [r3, #0]
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
20002086:	687b      	ldr	r3, [r7, #4]
20002088:	789b      	ldrb	r3, [r3, #2]
2000208a:	193a      	adds	r2, r7, r4
2000208c:	7812      	ldrb	r2, [r2, #0]
2000208e:	4013      	ands	r3, r2
20002090:	b2d9      	uxtb	r1, r3
20002092:	183b      	adds	r3, r7, r0
20002094:	183a      	adds	r2, r7, r0
20002096:	7812      	ldrb	r2, [r2, #0]
20002098:	430a      	orrs	r2, r1
2000209a:	701a      	strb	r2, [r3, #0]
        
    tmppriority = tmppriority << 0x04;
2000209c:	183b      	adds	r3, r7, r0
2000209e:	183a      	adds	r2, r7, r0
200020a0:	7812      	ldrb	r2, [r2, #0]
200020a2:	0112      	lsls	r2, r2, #4
200020a4:	701a      	strb	r2, [r3, #0]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
200020a6:	4a19      	ldr	r2, [pc, #100]	; (2000210c <NVIC_Init+0xf4>)
200020a8:	687b      	ldr	r3, [r7, #4]
200020aa:	781b      	ldrb	r3, [r3, #0]
200020ac:	0019      	movs	r1, r3
200020ae:	23c0      	movs	r3, #192	; 0xc0
200020b0:	009b      	lsls	r3, r3, #2
200020b2:	1852      	adds	r2, r2, r1
200020b4:	18d3      	adds	r3, r2, r3
200020b6:	183a      	adds	r2, r7, r0
200020b8:	7812      	ldrb	r2, [r2, #0]
200020ba:	701a      	strb	r2, [r3, #0]
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
200020bc:	687b      	ldr	r3, [r7, #4]
200020be:	781b      	ldrb	r3, [r3, #0]
200020c0:	001a      	movs	r2, r3
200020c2:	231f      	movs	r3, #31
200020c4:	4013      	ands	r3, r2
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
200020c6:	4911      	ldr	r1, [pc, #68]	; (2000210c <NVIC_Init+0xf4>)
200020c8:	687a      	ldr	r2, [r7, #4]
200020ca:	7812      	ldrb	r2, [r2, #0]
200020cc:	0952      	lsrs	r2, r2, #5
200020ce:	b2d2      	uxtb	r2, r2
200020d0:	0010      	movs	r0, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
200020d2:	2201      	movs	r2, #1
200020d4:	409a      	lsls	r2, r3
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
200020d6:	0083      	lsls	r3, r0, #2
200020d8:	505a      	str	r2, [r3, r1]
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
200020da:	e010      	b.n	200020fe <NVIC_Init+0xe6>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
200020dc:	687b      	ldr	r3, [r7, #4]
200020de:	781b      	ldrb	r3, [r3, #0]
200020e0:	001a      	movs	r2, r3
200020e2:	231f      	movs	r3, #31
200020e4:	4013      	ands	r3, r2
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
200020e6:	4909      	ldr	r1, [pc, #36]	; (2000210c <NVIC_Init+0xf4>)
200020e8:	687a      	ldr	r2, [r7, #4]
200020ea:	7812      	ldrb	r2, [r2, #0]
200020ec:	0952      	lsrs	r2, r2, #5
200020ee:	b2d2      	uxtb	r2, r2
200020f0:	0010      	movs	r0, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
200020f2:	2201      	movs	r2, #1
200020f4:	409a      	lsls	r2, r3
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
200020f6:	0003      	movs	r3, r0
200020f8:	3320      	adds	r3, #32
200020fa:	009b      	lsls	r3, r3, #2
200020fc:	505a      	str	r2, [r3, r1]
}
200020fe:	46c0      	nop			; (mov r8, r8)
20002100:	46bd      	mov	sp, r7
20002102:	b004      	add	sp, #16
20002104:	bdb0      	pop	{r4, r5, r7, pc}
20002106:	46c0      	nop			; (mov r8, r8)
20002108:	e000ed00 	and	lr, r0, r0, lsl #26
2000210c:	e000e100 	and	lr, r0, r0, lsl #2

20002110 <NVIC_SetVectorTable>:
  *     @arg NVIC_VectTab_FLASH: Vector Table in internal FLASH.
  * @param  Offset: Vector Table base offset field. This value must be a multiple of 0x200.
  * @retval None
  */
void NVIC_SetVectorTable(uint32_t NVIC_VectTab, uint32_t Offset)
{ 
20002110:	b580      	push	{r7, lr}
20002112:	b082      	sub	sp, #8
20002114:	af00      	add	r7, sp, #0
20002116:	6078      	str	r0, [r7, #4]
20002118:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_VECTTAB(NVIC_VectTab));
  assert_param(IS_NVIC_OFFSET(Offset));  
   
  SCB->VTOR = NVIC_VectTab | (Offset & (uint32_t)0x1FFFFF80);
2000211a:	683b      	ldr	r3, [r7, #0]
2000211c:	4a05      	ldr	r2, [pc, #20]	; (20002134 <NVIC_SetVectorTable+0x24>)
2000211e:	4013      	ands	r3, r2
20002120:	0019      	movs	r1, r3
20002122:	4b05      	ldr	r3, [pc, #20]	; (20002138 <NVIC_SetVectorTable+0x28>)
20002124:	687a      	ldr	r2, [r7, #4]
20002126:	430a      	orrs	r2, r1
20002128:	609a      	str	r2, [r3, #8]
}
2000212a:	46c0      	nop			; (mov r8, r8)
2000212c:	46bd      	mov	sp, r7
2000212e:	b002      	add	sp, #8
20002130:	bd80      	pop	{r7, pc}
20002132:	46c0      	nop			; (mov r8, r8)
20002134:	1fffff80 	svcne	0x00ffff80
20002138:	e000ed00 	and	lr, r0, r0, lsl #26

2000213c <NVIC_SystemLPConfig>:
  *     @arg NVIC_LP_SLEEPONEXIT: Low Power Sleep on Exit.
  * @param  NewState: new state of LP condition. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void NVIC_SystemLPConfig(uint8_t LowPowerMode, FunctionalState NewState)
{
2000213c:	b580      	push	{r7, lr}
2000213e:	b082      	sub	sp, #8
20002140:	af00      	add	r7, sp, #0
20002142:	0002      	movs	r2, r0
20002144:	1dfb      	adds	r3, r7, #7
20002146:	701a      	strb	r2, [r3, #0]
20002148:	1dbb      	adds	r3, r7, #6
2000214a:	1c0a      	adds	r2, r1, #0
2000214c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_LP(LowPowerMode));
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  if (NewState != DISABLE)
2000214e:	1dbb      	adds	r3, r7, #6
20002150:	781b      	ldrb	r3, [r3, #0]
20002152:	2b00      	cmp	r3, #0
20002154:	d007      	beq.n	20002166 <NVIC_SystemLPConfig+0x2a>
  {
    SCB->SCR |= LowPowerMode;
20002156:	4b0a      	ldr	r3, [pc, #40]	; (20002180 <NVIC_SystemLPConfig+0x44>)
20002158:	6919      	ldr	r1, [r3, #16]
2000215a:	1dfb      	adds	r3, r7, #7
2000215c:	781a      	ldrb	r2, [r3, #0]
2000215e:	4b08      	ldr	r3, [pc, #32]	; (20002180 <NVIC_SystemLPConfig+0x44>)
20002160:	430a      	orrs	r2, r1
20002162:	611a      	str	r2, [r3, #16]
  }
  else
  {
    SCB->SCR &= (uint32_t)(~(uint32_t)LowPowerMode);
  }
}
20002164:	e007      	b.n	20002176 <NVIC_SystemLPConfig+0x3a>
    SCB->SCR &= (uint32_t)(~(uint32_t)LowPowerMode);
20002166:	4b06      	ldr	r3, [pc, #24]	; (20002180 <NVIC_SystemLPConfig+0x44>)
20002168:	691a      	ldr	r2, [r3, #16]
2000216a:	1dfb      	adds	r3, r7, #7
2000216c:	781b      	ldrb	r3, [r3, #0]
2000216e:	43d9      	mvns	r1, r3
20002170:	4b03      	ldr	r3, [pc, #12]	; (20002180 <NVIC_SystemLPConfig+0x44>)
20002172:	400a      	ands	r2, r1
20002174:	611a      	str	r2, [r3, #16]
}
20002176:	46c0      	nop			; (mov r8, r8)
20002178:	46bd      	mov	sp, r7
2000217a:	b002      	add	sp, #8
2000217c:	bd80      	pop	{r7, pc}
2000217e:	46c0      	nop			; (mov r8, r8)
20002180:	e000ed00 	and	lr, r0, r0, lsl #26

20002184 <SysTick_CLKSourceConfig>:
  *     @arg SysTick_CLKSource_HCLK_Div8: AHB clock divided by 8 selected as SysTick clock source.
  *     @arg SysTick_CLKSource_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void SysTick_CLKSourceConfig(uint32_t SysTick_CLKSource)
{
20002184:	b580      	push	{r7, lr}
20002186:	b082      	sub	sp, #8
20002188:	af00      	add	r7, sp, #0
2000218a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(SysTick_CLKSource));
  if (SysTick_CLKSource == SysTick_CLKSource_HCLK)
2000218c:	687b      	ldr	r3, [r7, #4]
2000218e:	2b04      	cmp	r3, #4
20002190:	d106      	bne.n	200021a0 <SysTick_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SysTick_CLKSource_HCLK;
20002192:	4b08      	ldr	r3, [pc, #32]	; (200021b4 <SysTick_CLKSourceConfig+0x30>)
20002194:	681a      	ldr	r2, [r3, #0]
20002196:	4b07      	ldr	r3, [pc, #28]	; (200021b4 <SysTick_CLKSourceConfig+0x30>)
20002198:	2104      	movs	r1, #4
2000219a:	430a      	orrs	r2, r1
2000219c:	601a      	str	r2, [r3, #0]
  }
  else
  {
    SysTick->CTRL &= SysTick_CLKSource_HCLK_Div8;
  }
}
2000219e:	e005      	b.n	200021ac <SysTick_CLKSourceConfig+0x28>
    SysTick->CTRL &= SysTick_CLKSource_HCLK_Div8;
200021a0:	4b04      	ldr	r3, [pc, #16]	; (200021b4 <SysTick_CLKSourceConfig+0x30>)
200021a2:	681a      	ldr	r2, [r3, #0]
200021a4:	4b03      	ldr	r3, [pc, #12]	; (200021b4 <SysTick_CLKSourceConfig+0x30>)
200021a6:	2104      	movs	r1, #4
200021a8:	438a      	bics	r2, r1
200021aa:	601a      	str	r2, [r3, #0]
}
200021ac:	46c0      	nop			; (mov r8, r8)
200021ae:	46bd      	mov	sp, r7
200021b0:	b002      	add	sp, #8
200021b2:	bd80      	pop	{r7, pc}
200021b4:	e000e010 	and	lr, r0, r0, lsl r0

200021b8 <USART1_IRQHandler>:
static FIFO *txBuffer, *rxBuffer, realTxBuffer, realRxBuffer;
uint8_t digitToPrintable(uint8_t inDigit);
uint8_t charToPrintable(uint8_t inChar);

//Avbrottshantering för USART1
void USART1_IRQHandler(void){
200021b8:	b590      	push	{r4, r7, lr}
200021ba:	b083      	sub	sp, #12
200021bc:	af00      	add	r7, sp, #0
    //Avbrott orsakat av mottaget meddelande
    if(USART_GetITStatus(USART1, USART_IT_RXNE) == SET){
200021be:	4a1f      	ldr	r2, [pc, #124]	; (2000223c <USART1_IRQHandler+0x84>)
200021c0:	4b1f      	ldr	r3, [pc, #124]	; (20002240 <USART1_IRQHandler+0x88>)
200021c2:	0011      	movs	r1, r2
200021c4:	0018      	movs	r0, r3
200021c6:	f7fe fb99 	bl	200008fc <USART_GetITStatus>
200021ca:	0003      	movs	r3, r0
200021cc:	2b01      	cmp	r3, #1
200021ce:	d10b      	bne.n	200021e8 <USART1_IRQHandler+0x30>
        //Skriver inkommen medelande till rxBuffer
        bufferPut(rxBuffer, USART_ReceiveData(USART1));
200021d0:	4b1c      	ldr	r3, [pc, #112]	; (20002244 <USART1_IRQHandler+0x8c>)
200021d2:	681c      	ldr	r4, [r3, #0]
200021d4:	4b1a      	ldr	r3, [pc, #104]	; (20002240 <USART1_IRQHandler+0x88>)
200021d6:	0018      	movs	r0, r3
200021d8:	f7fe f970 	bl	200004bc <USART_ReceiveData>
200021dc:	0003      	movs	r3, r0
200021de:	b2db      	uxtb	r3, r3
200021e0:	0019      	movs	r1, r3
200021e2:	0020      	movs	r0, r4
200021e4:	f7fe fc28 	bl	20000a38 <bufferPut>
        //Fundering ska vi ha något sätt att meddela att vi
        //har missat meddelande på grund av full buffer?
    }

    //Avbrott orsakat av att registret för sändning är tomt
    if(USART_GetITStatus(USART1, USART_IT_TXE) == SET){
200021e8:	4a17      	ldr	r2, [pc, #92]	; (20002248 <USART1_IRQHandler+0x90>)
200021ea:	4b15      	ldr	r3, [pc, #84]	; (20002240 <USART1_IRQHandler+0x88>)
200021ec:	0011      	movs	r1, r2
200021ee:	0018      	movs	r0, r3
200021f0:	f7fe fb84 	bl	200008fc <USART_GetITStatus>
200021f4:	0003      	movs	r3, r0
200021f6:	2b01      	cmp	r3, #1
200021f8:	d11c      	bne.n	20002234 <USART1_IRQHandler+0x7c>
        //Försöker läsa från txBuffer
        uint8_t data;
        uint8_t readOk = bufferGet(txBuffer,&data);
200021fa:	4b14      	ldr	r3, [pc, #80]	; (2000224c <USART1_IRQHandler+0x94>)
200021fc:	681b      	ldr	r3, [r3, #0]
200021fe:	1dfc      	adds	r4, r7, #7
20002200:	1dba      	adds	r2, r7, #6
20002202:	0011      	movs	r1, r2
20002204:	0018      	movs	r0, r3
20002206:	f7fe fc48 	bl	20000a9a <bufferGet>
2000220a:	0003      	movs	r3, r0
2000220c:	7023      	strb	r3, [r4, #0]

        //Om vi lyckades skickar vi data
        //Annars är buffern tom och vi avativerar avbrott för att skicka
        if(readOk) {
2000220e:	1dfb      	adds	r3, r7, #7
20002210:	781b      	ldrb	r3, [r3, #0]
20002212:	2b00      	cmp	r3, #0
20002214:	d008      	beq.n	20002228 <USART1_IRQHandler+0x70>
            USART_SendData(USART1,data);
20002216:	1dbb      	adds	r3, r7, #6
20002218:	781b      	ldrb	r3, [r3, #0]
2000221a:	b29b      	uxth	r3, r3
2000221c:	4a08      	ldr	r2, [pc, #32]	; (20002240 <USART1_IRQHandler+0x88>)
2000221e:	0019      	movs	r1, r3
20002220:	0010      	movs	r0, r2
20002222:	f7fe f939 	bl	20000498 <USART_SendData>
        } else{
            USART_ITConfig(USART1, USART_IT_TXE, DISABLE);
        }
    }
}
20002226:	e005      	b.n	20002234 <USART1_IRQHandler+0x7c>
            USART_ITConfig(USART1, USART_IT_TXE, DISABLE);
20002228:	4907      	ldr	r1, [pc, #28]	; (20002248 <USART1_IRQHandler+0x90>)
2000222a:	4b05      	ldr	r3, [pc, #20]	; (20002240 <USART1_IRQHandler+0x88>)
2000222c:	2200      	movs	r2, #0
2000222e:	0018      	movs	r0, r3
20002230:	f7fe fae2 	bl	200007f8 <USART_ITConfig>
}
20002234:	46c0      	nop			; (mov r8, r8)
20002236:	46bd      	mov	sp, r7
20002238:	b003      	add	sp, #12
2000223a:	bd90      	pop	{r4, r7, pc}
2000223c:	00000525 	andeq	r0, r0, r5, lsr #10
20002240:	40011000 	andmi	r1, r1, r0
20002244:	20004a30 	andcs	r4, r0, r0, lsr sl
20002248:	00000727 	andeq	r0, r0, r7, lsr #14
2000224c:	20004a2c 	andcs	r4, r0, ip, lsr #20

20002250 <USARTConfig>:

//Sätter upp USART1
void USARTConfig(void){
20002250:	b590      	push	{r4, r7, lr}
20002252:	b089      	sub	sp, #36	; 0x24
20002254:	af00      	add	r7, sp, #0
    //Sätter bufferpekarna
    txBuffer = &realTxBuffer;
20002256:	4b42      	ldr	r3, [pc, #264]	; (20002360 <USARTConfig+0x110>)
20002258:	4a42      	ldr	r2, [pc, #264]	; (20002364 <USARTConfig+0x114>)
2000225a:	601a      	str	r2, [r3, #0]
    rxBuffer = &realRxBuffer;
2000225c:	4b42      	ldr	r3, [pc, #264]	; (20002368 <USARTConfig+0x118>)
2000225e:	4a43      	ldr	r2, [pc, #268]	; (2000236c <USARTConfig+0x11c>)
20002260:	601a      	str	r2, [r3, #0]

    //Nollställer vår buffertar
    bufferInit(txBuffer);
20002262:	4b3f      	ldr	r3, [pc, #252]	; (20002360 <USARTConfig+0x110>)
20002264:	681b      	ldr	r3, [r3, #0]
20002266:	0018      	movs	r0, r3
20002268:	f7fe fbd2 	bl	20000a10 <bufferInit>
    bufferInit(rxBuffer);
2000226c:	4b3e      	ldr	r3, [pc, #248]	; (20002368 <USARTConfig+0x118>)
2000226e:	681b      	ldr	r3, [r3, #0]
20002270:	0018      	movs	r0, r3
20002272:	f7fe fbcd 	bl	20000a10 <bufferInit>

    //Aktiverar klockorna för USART1, Port A
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1, ENABLE);
20002276:	2101      	movs	r1, #1
20002278:	2010      	movs	r0, #16
2000227a:	f7ff f8e1 	bl	20001440 <RCC_APB2PeriphClockCmd>
    RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
2000227e:	2101      	movs	r1, #1
20002280:	2001      	movs	r0, #1
20002282:	f7ff f85d 	bl	20001340 <RCC_AHB1PeriphClockCmd>

    //Aktiverar alternativ funktion USART1 för port A pinnar 9 och 10
    GPIO_PinAFConfig(GPIOA, GPIO_Pin_9, GPIO_AF_USART1);
20002286:	2380      	movs	r3, #128	; 0x80
20002288:	009b      	lsls	r3, r3, #2
2000228a:	4839      	ldr	r0, [pc, #228]	; (20002370 <USARTConfig+0x120>)
2000228c:	2207      	movs	r2, #7
2000228e:	0019      	movs	r1, r3
20002290:	f7ff fe5d 	bl	20001f4e <GPIO_PinAFConfig>
    GPIO_PinAFConfig(GPIOA, GPIO_Pin_10, GPIO_AF_USART1);
20002294:	2380      	movs	r3, #128	; 0x80
20002296:	00db      	lsls	r3, r3, #3
20002298:	4835      	ldr	r0, [pc, #212]	; (20002370 <USARTConfig+0x120>)
2000229a:	2207      	movs	r2, #7
2000229c:	0019      	movs	r1, r3
2000229e:	f7ff fe56 	bl	20001f4e <GPIO_PinAFConfig>

    //Konfigurerar USART1 Tx och Rx som alternativ funktion push-pull
    GPIO_InitTypeDef GPIO_InitStructure;
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
200022a2:	2118      	movs	r1, #24
200022a4:	187b      	adds	r3, r7, r1
200022a6:	2202      	movs	r2, #2
200022a8:	711a      	strb	r2, [r3, #4]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
200022aa:	187b      	adds	r3, r7, r1
200022ac:	2203      	movs	r2, #3
200022ae:	715a      	strb	r2, [r3, #5]
    GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
200022b0:	187b      	adds	r3, r7, r1
200022b2:	2200      	movs	r2, #0
200022b4:	719a      	strb	r2, [r3, #6]
    GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
200022b6:	187b      	adds	r3, r7, r1
200022b8:	2201      	movs	r2, #1
200022ba:	71da      	strb	r2, [r3, #7]
    //Pinne 9 är TX
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_9;
200022bc:	187b      	adds	r3, r7, r1
200022be:	2280      	movs	r2, #128	; 0x80
200022c0:	0092      	lsls	r2, r2, #2
200022c2:	601a      	str	r2, [r3, #0]
    GPIO_Init(GPIOA, &GPIO_InitStructure);
200022c4:	000c      	movs	r4, r1
200022c6:	187b      	adds	r3, r7, r1
200022c8:	4a29      	ldr	r2, [pc, #164]	; (20002370 <USARTConfig+0x120>)
200022ca:	0019      	movs	r1, r3
200022cc:	0010      	movs	r0, r2
200022ce:	f7ff fcc1 	bl	20001c54 <GPIO_Init>
    //Pinne 10 är RX
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_10;
200022d2:	0021      	movs	r1, r4
200022d4:	187b      	adds	r3, r7, r1
200022d6:	2280      	movs	r2, #128	; 0x80
200022d8:	00d2      	lsls	r2, r2, #3
200022da:	601a      	str	r2, [r3, #0]
    GPIO_Init(GPIOA, &GPIO_InitStructure);
200022dc:	187b      	adds	r3, r7, r1
200022de:	4a24      	ldr	r2, [pc, #144]	; (20002370 <USARTConfig+0x120>)
200022e0:	0019      	movs	r1, r3
200022e2:	0010      	movs	r0, r2
200022e4:	f7ff fcb6 	bl	20001c54 <GPIO_Init>
    - Word Length = 8 Bits
    - One Stop Bit
    - No parity
    - Hardware flow control disabled (RTS and CTS signals)
    - Receive and transmit enabled*/
      USART_InitStructure.USART_BaudRate = 115200;
200022e8:	2108      	movs	r1, #8
200022ea:	187b      	adds	r3, r7, r1
200022ec:	22e1      	movs	r2, #225	; 0xe1
200022ee:	0252      	lsls	r2, r2, #9
200022f0:	601a      	str	r2, [r3, #0]
      USART_InitStructure.USART_WordLength = USART_WordLength_8b;
200022f2:	187b      	adds	r3, r7, r1
200022f4:	2200      	movs	r2, #0
200022f6:	809a      	strh	r2, [r3, #4]
      USART_InitStructure.USART_StopBits = USART_StopBits_1;
200022f8:	187b      	adds	r3, r7, r1
200022fa:	2200      	movs	r2, #0
200022fc:	80da      	strh	r2, [r3, #6]
      USART_InitStructure.USART_Parity = USART_Parity_No;
200022fe:	187b      	adds	r3, r7, r1
20002300:	2200      	movs	r2, #0
20002302:	811a      	strh	r2, [r3, #8]
      USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
20002304:	187b      	adds	r3, r7, r1
20002306:	2200      	movs	r2, #0
20002308:	819a      	strh	r2, [r3, #12]
      USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
2000230a:	187b      	adds	r3, r7, r1
2000230c:	220c      	movs	r2, #12
2000230e:	815a      	strh	r2, [r3, #10]
    USART_Init(USART1, &USART_InitStructure);
20002310:	187b      	adds	r3, r7, r1
20002312:	4a18      	ldr	r2, [pc, #96]	; (20002374 <USARTConfig+0x124>)
20002314:	0019      	movs	r1, r3
20002316:	0010      	movs	r0, r2
20002318:	f7fd ff12 	bl	20000140 <USART_Init>
    //Konfigurerar avbrott för USART
    NVIC_InitTypeDef NVIC_InitStructure;
    //4 möjliga gruppprioriteringar
    //4 möjliga undergruppsprioriterinar
    //NVIC_PriorityGroupConfig(NVIC_PriorityGroup_2);
    NVIC_InitStructure.NVIC_IRQChannel = USART1_IRQn;
2000231c:	1d3b      	adds	r3, r7, #4
2000231e:	2225      	movs	r2, #37	; 0x25
20002320:	701a      	strb	r2, [r3, #0]
    NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
20002322:	1d3b      	adds	r3, r7, #4
20002324:	2200      	movs	r2, #0
20002326:	705a      	strb	r2, [r3, #1]
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
20002328:	1d3b      	adds	r3, r7, #4
2000232a:	2200      	movs	r2, #0
2000232c:	709a      	strb	r2, [r3, #2]
    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
2000232e:	1d3b      	adds	r3, r7, #4
20002330:	2201      	movs	r2, #1
20002332:	70da      	strb	r2, [r3, #3]
    NVIC_Init(&NVIC_InitStructure);
20002334:	1d3b      	adds	r3, r7, #4
20002336:	0018      	movs	r0, r3
20002338:	f7ff fe6e 	bl	20002018 <NVIC_Init>

    //Testar att sätta avbrottsvektorn manuellt
    *((void (**)(void) ) (0x2001C000 + 0xD4) ) = USART1_IRQHandler;
2000233c:	4b0e      	ldr	r3, [pc, #56]	; (20002378 <USARTConfig+0x128>)
2000233e:	4a0f      	ldr	r2, [pc, #60]	; (2000237c <USARTConfig+0x12c>)
20002340:	601a      	str	r2, [r3, #0]

    //Startar USART1
    USART_Cmd(USART1,ENABLE);
20002342:	4b0c      	ldr	r3, [pc, #48]	; (20002374 <USARTConfig+0x124>)
20002344:	2101      	movs	r1, #1
20002346:	0018      	movs	r0, r3
20002348:	f7fe f81e 	bl	20000388 <USART_Cmd>

    //Aktiverar avbrott vid mottagning av meddelanden
    USART_ITConfig(USART1, USART_IT_RXNE, ENABLE);
2000234c:	490c      	ldr	r1, [pc, #48]	; (20002380 <USARTConfig+0x130>)
2000234e:	4b09      	ldr	r3, [pc, #36]	; (20002374 <USARTConfig+0x124>)
20002350:	2201      	movs	r2, #1
20002352:	0018      	movs	r0, r3
20002354:	f7fe fa50 	bl	200007f8 <USART_ITConfig>
}
20002358:	46c0      	nop			; (mov r8, r8)
2000235a:	46bd      	mov	sp, r7
2000235c:	b009      	add	sp, #36	; 0x24
2000235e:	bd90      	pop	{r4, r7, pc}
20002360:	20004a2c 	andcs	r4, r0, ip, lsr #20
20002364:	20004a34 	andcs	r4, r0, r4, lsr sl
20002368:	20004a30 	andcs	r4, r0, r0, lsr sl
2000236c:	20004a9c 	mulcs	r0, ip, sl
20002370:	40020000 	andmi	r0, r2, r0
20002374:	40011000 	andmi	r1, r1, r0
20002378:	2001c0d4 	ldrdcs	ip, [r1], -r4
2000237c:	200021b9 			; <UNDEFINED> instruction: 0x200021b9
20002380:	00000525 	andeq	r0, r0, r5, lsr #10

20002384 <USARTPut>:

//Lägger till elem till kön för att skicka
//Returnerar 1 om det lyckades, 0 annars.
uint8_t USARTPut (uint8_t elem){
20002384:	b580      	push	{r7, lr}
20002386:	b082      	sub	sp, #8
20002388:	af00      	add	r7, sp, #0
2000238a:	0002      	movs	r2, r0
2000238c:	1dfb      	adds	r3, r7, #7
2000238e:	701a      	strb	r2, [r3, #0]
    //Lägger till den i bufferten om det går
    if (bufferPut(txBuffer, elem)){
20002390:	4b0b      	ldr	r3, [pc, #44]	; (200023c0 <USARTPut+0x3c>)
20002392:	681a      	ldr	r2, [r3, #0]
20002394:	1dfb      	adds	r3, r7, #7
20002396:	781b      	ldrb	r3, [r3, #0]
20002398:	0019      	movs	r1, r3
2000239a:	0010      	movs	r0, r2
2000239c:	f7fe fb4c 	bl	20000a38 <bufferPut>
200023a0:	1e03      	subs	r3, r0, #0
200023a2:	d007      	beq.n	200023b4 <USARTPut+0x30>
        //Aktiverar avbrott för att skicka
        USART_ITConfig(USART1, USART_IT_TXE, ENABLE);
200023a4:	4907      	ldr	r1, [pc, #28]	; (200023c4 <USARTPut+0x40>)
200023a6:	4b08      	ldr	r3, [pc, #32]	; (200023c8 <USARTPut+0x44>)
200023a8:	2201      	movs	r2, #1
200023aa:	0018      	movs	r0, r3
200023ac:	f7fe fa24 	bl	200007f8 <USART_ITConfig>
        //Alternativ lösning: hålla koll på om avbrott redan är aktivt
        return 1;
200023b0:	2301      	movs	r3, #1
200023b2:	e000      	b.n	200023b6 <USARTPut+0x32>
    }
    return 0;
200023b4:	2300      	movs	r3, #0
}
200023b6:	0018      	movs	r0, r3
200023b8:	46bd      	mov	sp, r7
200023ba:	b002      	add	sp, #8
200023bc:	bd80      	pop	{r7, pc}
200023be:	46c0      	nop			; (mov r8, r8)
200023c0:	20004a2c 	andcs	r4, r0, ip, lsr #20
200023c4:	00000727 	andeq	r0, r0, r7, lsr #14
200023c8:	40011000 	andmi	r1, r1, r0

200023cc <USARTPrint>:

//Lägger till list till kön för att skicka
//Sköter omvandling mellan sträng i c till rätt tecken i USART. Klarar 0-9 a-z A-Z och mellanslag
//Returnerar 1 om det lyckades, 0 annars.
uint8_t USARTPrint(uint8_t *list){
200023cc:	b580      	push	{r7, lr}
200023ce:	b082      	sub	sp, #8
200023d0:	af00      	add	r7, sp, #0
200023d2:	6078      	str	r0, [r7, #4]
    //En sträng avslutas med null så vi
    //läser tills vi hittar den
    while (*list) {
200023d4:	e00e      	b.n	200023f4 <USARTPrint+0x28>
        //Lägg till alla tecken en efter en
        //Misslyckas vi med en avbryter vi resten
        if (!USARTPut(charToPrintable(*list++))){
200023d6:	687b      	ldr	r3, [r7, #4]
200023d8:	1c5a      	adds	r2, r3, #1
200023da:	607a      	str	r2, [r7, #4]
200023dc:	781b      	ldrb	r3, [r3, #0]
200023de:	0018      	movs	r0, r3
200023e0:	f000 f8aa 	bl	20002538 <charToPrintable>
200023e4:	0003      	movs	r3, r0
200023e6:	0018      	movs	r0, r3
200023e8:	f7ff ffcc 	bl	20002384 <USARTPut>
200023ec:	1e03      	subs	r3, r0, #0
200023ee:	d101      	bne.n	200023f4 <USARTPrint+0x28>
            return 0;
200023f0:	2300      	movs	r3, #0
200023f2:	e004      	b.n	200023fe <USARTPrint+0x32>
    while (*list) {
200023f4:	687b      	ldr	r3, [r7, #4]
200023f6:	781b      	ldrb	r3, [r3, #0]
200023f8:	2b00      	cmp	r3, #0
200023fa:	d1ec      	bne.n	200023d6 <USARTPrint+0xa>
        }
    }
    return 1;
200023fc:	2301      	movs	r3, #1
}
200023fe:	0018      	movs	r0, r3
20002400:	46bd      	mov	sp, r7
20002402:	b002      	add	sp, #8
20002404:	bd80      	pop	{r7, pc}

20002406 <USARTPrintNum>:

//Lägger till num som enskilda nummer
//0-9 till kön för att skicka
//Returnerar 1 om det lyckades, 0 annars.
uint8_t USARTPrintNum(uint32_t num){
20002406:	b5b0      	push	{r4, r5, r7, lr}
20002408:	b086      	sub	sp, #24
2000240a:	af00      	add	r7, sp, #0
2000240c:	6078      	str	r0, [r7, #4]
    //Max längd för 32 bitar inbut är 10 digits
    uint8_t digits,digitArr[10];
    digits = (num == 0) ? 1 : ceil(log10(num));
2000240e:	687b      	ldr	r3, [r7, #4]
20002410:	2b00      	cmp	r3, #0
20002412:	d017      	beq.n	20002444 <USARTPrintNum+0x3e>
20002414:	6878      	ldr	r0, [r7, #4]
20002416:	f000 fcf5 	bl	20002e04 <__aeabi_ui2d>
2000241a:	0003      	movs	r3, r0
2000241c:	000c      	movs	r4, r1
2000241e:	0018      	movs	r0, r3
20002420:	0021      	movs	r1, r4
20002422:	f001 ffff 	bl	20004424 <log10>
20002426:	0003      	movs	r3, r0
20002428:	000c      	movs	r4, r1
2000242a:	0018      	movs	r0, r3
2000242c:	0021      	movs	r1, r4
2000242e:	f001 ff65 	bl	200042fc <ceil>
20002432:	0003      	movs	r3, r0
20002434:	000c      	movs	r4, r1
20002436:	0018      	movs	r0, r3
20002438:	0021      	movs	r1, r4
2000243a:	f000 f947 	bl	200026cc <__aeabi_d2uiz>
2000243e:	0003      	movs	r3, r0
20002440:	b2da      	uxtb	r2, r3
20002442:	e000      	b.n	20002446 <USARTPrintNum+0x40>
20002444:	2201      	movs	r2, #1
20002446:	2115      	movs	r1, #21
20002448:	187b      	adds	r3, r7, r1
2000244a:	701a      	strb	r2, [r3, #0]

    //Save the digit in reverse to array
    for (uint8_t i = digits; i != 0; i--){
2000244c:	2317      	movs	r3, #23
2000244e:	18fb      	adds	r3, r7, r3
20002450:	187a      	adds	r2, r7, r1
20002452:	7812      	ldrb	r2, [r2, #0]
20002454:	701a      	strb	r2, [r3, #0]
20002456:	e01e      	b.n	20002496 <USARTPrintNum+0x90>
        digitArr[i-1] = digitToPrintable(num % 10);
20002458:	687b      	ldr	r3, [r7, #4]
2000245a:	210a      	movs	r1, #10
2000245c:	0018      	movs	r0, r3
2000245e:	f000 f92f 	bl	200026c0 <__aeabi_uidivmod>
20002462:	000b      	movs	r3, r1
20002464:	b2da      	uxtb	r2, r3
20002466:	2517      	movs	r5, #23
20002468:	197b      	adds	r3, r7, r5
2000246a:	781b      	ldrb	r3, [r3, #0]
2000246c:	1e5c      	subs	r4, r3, #1
2000246e:	0010      	movs	r0, r2
20002470:	f000 f84e 	bl	20002510 <digitToPrintable>
20002474:	0003      	movs	r3, r0
20002476:	001a      	movs	r2, r3
20002478:	2308      	movs	r3, #8
2000247a:	18fb      	adds	r3, r7, r3
2000247c:	551a      	strb	r2, [r3, r4]
        num /= 10;
2000247e:	687b      	ldr	r3, [r7, #4]
20002480:	210a      	movs	r1, #10
20002482:	0018      	movs	r0, r3
20002484:	f000 f896 	bl	200025b4 <__udivsi3>
20002488:	0003      	movs	r3, r0
2000248a:	607b      	str	r3, [r7, #4]
    for (uint8_t i = digits; i != 0; i--){
2000248c:	197b      	adds	r3, r7, r5
2000248e:	781a      	ldrb	r2, [r3, #0]
20002490:	197b      	adds	r3, r7, r5
20002492:	3a01      	subs	r2, #1
20002494:	701a      	strb	r2, [r3, #0]
20002496:	2317      	movs	r3, #23
20002498:	18fb      	adds	r3, r7, r3
2000249a:	781b      	ldrb	r3, [r3, #0]
2000249c:	2b00      	cmp	r3, #0
2000249e:	d1db      	bne.n	20002458 <USARTPrintNum+0x52>
    }

    //Printing
     for (uint8_t i = 0; i != digits; i++){
200024a0:	2316      	movs	r3, #22
200024a2:	18fb      	adds	r3, r7, r3
200024a4:	2200      	movs	r2, #0
200024a6:	701a      	strb	r2, [r3, #0]
200024a8:	e012      	b.n	200024d0 <USARTPrintNum+0xca>
         if(!USARTPut(digitArr[i])){
200024aa:	2316      	movs	r3, #22
200024ac:	18fb      	adds	r3, r7, r3
200024ae:	781b      	ldrb	r3, [r3, #0]
200024b0:	2208      	movs	r2, #8
200024b2:	18ba      	adds	r2, r7, r2
200024b4:	5cd3      	ldrb	r3, [r2, r3]
200024b6:	0018      	movs	r0, r3
200024b8:	f7ff ff64 	bl	20002384 <USARTPut>
200024bc:	1e03      	subs	r3, r0, #0
200024be:	d101      	bne.n	200024c4 <USARTPrintNum+0xbe>
             return 0;
200024c0:	2300      	movs	r3, #0
200024c2:	e00e      	b.n	200024e2 <USARTPrintNum+0xdc>
     for (uint8_t i = 0; i != digits; i++){
200024c4:	2116      	movs	r1, #22
200024c6:	187b      	adds	r3, r7, r1
200024c8:	781a      	ldrb	r2, [r3, #0]
200024ca:	187b      	adds	r3, r7, r1
200024cc:	3201      	adds	r2, #1
200024ce:	701a      	strb	r2, [r3, #0]
200024d0:	2316      	movs	r3, #22
200024d2:	18fa      	adds	r2, r7, r3
200024d4:	2315      	movs	r3, #21
200024d6:	18fb      	adds	r3, r7, r3
200024d8:	7812      	ldrb	r2, [r2, #0]
200024da:	781b      	ldrb	r3, [r3, #0]
200024dc:	429a      	cmp	r2, r3
200024de:	d1e4      	bne.n	200024aa <USARTPrintNum+0xa4>
         }
     }

    return 1;
200024e0:	2301      	movs	r3, #1
}
200024e2:	0018      	movs	r0, r3
200024e4:	46bd      	mov	sp, r7
200024e6:	b006      	add	sp, #24
200024e8:	bdb0      	pop	{r4, r5, r7, pc}

200024ea <USARTGet>:

//Hämta senaste mottagna meddelandet till dest
//Gör ingen omvandling, dvs returnerar det tal som skickades över USART
//Returnerar 1 om det lyckades, dvs det fanns ett meddelande att hämta 0 annars.
uint8_t USARTGet(uint8_t *dest){
200024ea:	b580      	push	{r7, lr}
200024ec:	b082      	sub	sp, #8
200024ee:	af00      	add	r7, sp, #0
200024f0:	6078      	str	r0, [r7, #4]
    return bufferGet (rxBuffer, dest);
200024f2:	4b06      	ldr	r3, [pc, #24]	; (2000250c <USARTGet+0x22>)
200024f4:	681b      	ldr	r3, [r3, #0]
200024f6:	687a      	ldr	r2, [r7, #4]
200024f8:	0011      	movs	r1, r2
200024fa:	0018      	movs	r0, r3
200024fc:	f7fe facd 	bl	20000a9a <bufferGet>
20002500:	0003      	movs	r3, r0
}
20002502:	0018      	movs	r0, r3
20002504:	46bd      	mov	sp, r7
20002506:	b002      	add	sp, #8
20002508:	bd80      	pop	{r7, pc}
2000250a:	46c0      	nop			; (mov r8, r8)
2000250c:	20004a30 	andcs	r4, r0, r0, lsr sl

20002510 <digitToPrintable>:

//För omvandling från 0-9 heltal till int som kan skrivas
//ut i terminalen. Det fungerar annorluna i simulatorn
uint8_t digitToPrintable(uint8_t inDigit){
20002510:	b580      	push	{r7, lr}
20002512:	b082      	sub	sp, #8
20002514:	af00      	add	r7, sp, #0
20002516:	0002      	movs	r2, r0
20002518:	1dfb      	adds	r3, r7, #7
2000251a:	701a      	strb	r2, [r3, #0]
            return ('0' + inDigit);
        }

        return '?';
        #else
        if (0 <= inDigit && inDigit <= 9) {
2000251c:	1dfb      	adds	r3, r7, #7
2000251e:	781b      	ldrb	r3, [r3, #0]
20002520:	2b09      	cmp	r3, #9
20002522:	d804      	bhi.n	2000252e <digitToPrintable+0x1e>
            //Where 16 is the number for a zero
            return (16 + inDigit);
20002524:	1dfb      	adds	r3, r7, #7
20002526:	781b      	ldrb	r3, [r3, #0]
20002528:	3310      	adds	r3, #16
2000252a:	b2db      	uxtb	r3, r3
2000252c:	e000      	b.n	20002530 <digitToPrintable+0x20>
        }

        return (31); //return ?
2000252e:	231f      	movs	r3, #31
        #endif
}
20002530:	0018      	movs	r0, r3
20002532:	46bd      	mov	sp, r7
20002534:	b002      	add	sp, #8
20002536:	bd80      	pop	{r7, pc}

20002538 <charToPrintable>:

//För omvandling från char till int som kan skrivas ut i terminalen
// hårdvaran.  Det fungerar annorluna i simulatorn
uint8_t charToPrintable(uint8_t inChar){
20002538:	b580      	push	{r7, lr}
2000253a:	b082      	sub	sp, #8
2000253c:	af00      	add	r7, sp, #0
2000253e:	0002      	movs	r2, r0
20002540:	1dfb      	adds	r3, r7, #7
20002542:	701a      	strb	r2, [r3, #0]
    return inChar;
    #else
    //* används för ny rad
    //10 är ny rad vid utskrift kort -> pc (USARTPut)
    //"*" är 42
    if (inChar == 42) {
20002544:	1dfb      	adds	r3, r7, #7
20002546:	781b      	ldrb	r3, [r3, #0]
20002548:	2b2a      	cmp	r3, #42	; 0x2a
2000254a:	d101      	bne.n	20002550 <charToPrintable+0x18>
        return (10);
2000254c:	230a      	movs	r3, #10
2000254e:	e02d      	b.n	200025ac <charToPrintable+0x74>
    }

    //2 är space vid utskrift kort -> pc (USARTPut)
    //" " är 32
    if (inChar == 32) {
20002550:	1dfb      	adds	r3, r7, #7
20002552:	781b      	ldrb	r3, [r3, #0]
20002554:	2b20      	cmp	r3, #32
20002556:	d101      	bne.n	2000255c <charToPrintable+0x24>
        return (2);
20002558:	2302      	movs	r3, #2
2000255a:	e027      	b.n	200025ac <charToPrintable+0x74>
    }

    //16 är 0 vid utskrift kort -> pc (USARTPut)
    //"0" är 48. "9" är 57
    if (48 <= inChar && inChar <= 57) {
2000255c:	1dfb      	adds	r3, r7, #7
2000255e:	781b      	ldrb	r3, [r3, #0]
20002560:	2b2f      	cmp	r3, #47	; 0x2f
20002562:	d908      	bls.n	20002576 <charToPrintable+0x3e>
20002564:	1dfb      	adds	r3, r7, #7
20002566:	781b      	ldrb	r3, [r3, #0]
20002568:	2b39      	cmp	r3, #57	; 0x39
2000256a:	d804      	bhi.n	20002576 <charToPrintable+0x3e>
        return (16 + inChar - 48);
2000256c:	1dfb      	adds	r3, r7, #7
2000256e:	781b      	ldrb	r3, [r3, #0]
20002570:	3b20      	subs	r3, #32
20002572:	b2db      	uxtb	r3, r3
20002574:	e01a      	b.n	200025ac <charToPrintable+0x74>
    }

    //33 är A vid utskrift kort -> pc (USARTPut)
    //"A" är 65.  "Z" är 90
    if (65 <= inChar && inChar <= 90) {
20002576:	1dfb      	adds	r3, r7, #7
20002578:	781b      	ldrb	r3, [r3, #0]
2000257a:	2b40      	cmp	r3, #64	; 0x40
2000257c:	d908      	bls.n	20002590 <charToPrintable+0x58>
2000257e:	1dfb      	adds	r3, r7, #7
20002580:	781b      	ldrb	r3, [r3, #0]
20002582:	2b5a      	cmp	r3, #90	; 0x5a
20002584:	d804      	bhi.n	20002590 <charToPrintable+0x58>
        return (33 + inChar - 65);
20002586:	1dfb      	adds	r3, r7, #7
20002588:	781b      	ldrb	r3, [r3, #0]
2000258a:	3b20      	subs	r3, #32
2000258c:	b2db      	uxtb	r3, r3
2000258e:	e00d      	b.n	200025ac <charToPrintable+0x74>
    }
    
    //161 är A vid utskrift kort -> pc (USARTPut)
    //"a" är 97. "z" är 122
    if (97 <= inChar && inChar <= 122) {
20002590:	1dfb      	adds	r3, r7, #7
20002592:	781b      	ldrb	r3, [r3, #0]
20002594:	2b60      	cmp	r3, #96	; 0x60
20002596:	d908      	bls.n	200025aa <charToPrintable+0x72>
20002598:	1dfb      	adds	r3, r7, #7
2000259a:	781b      	ldrb	r3, [r3, #0]
2000259c:	2b7a      	cmp	r3, #122	; 0x7a
2000259e:	d804      	bhi.n	200025aa <charToPrintable+0x72>
        return (161 + inChar - 97);
200025a0:	1dfb      	adds	r3, r7, #7
200025a2:	781b      	ldrb	r3, [r3, #0]
200025a4:	3340      	adds	r3, #64	; 0x40
200025a6:	b2db      	uxtb	r3, r3
200025a8:	e000      	b.n	200025ac <charToPrintable+0x74>
    }

    //else return ?
    return (31);
200025aa:	231f      	movs	r3, #31
    #endif
200025ac:	0018      	movs	r0, r3
200025ae:	46bd      	mov	sp, r7
200025b0:	b002      	add	sp, #8
200025b2:	bd80      	pop	{r7, pc}

200025b4 <__udivsi3>:
200025b4:	2200      	movs	r2, #0
200025b6:	0843      	lsrs	r3, r0, #1
200025b8:	428b      	cmp	r3, r1
200025ba:	d374      	bcc.n	200026a6 <__udivsi3+0xf2>
200025bc:	0903      	lsrs	r3, r0, #4
200025be:	428b      	cmp	r3, r1
200025c0:	d35f      	bcc.n	20002682 <__udivsi3+0xce>
200025c2:	0a03      	lsrs	r3, r0, #8
200025c4:	428b      	cmp	r3, r1
200025c6:	d344      	bcc.n	20002652 <__udivsi3+0x9e>
200025c8:	0b03      	lsrs	r3, r0, #12
200025ca:	428b      	cmp	r3, r1
200025cc:	d328      	bcc.n	20002620 <__udivsi3+0x6c>
200025ce:	0c03      	lsrs	r3, r0, #16
200025d0:	428b      	cmp	r3, r1
200025d2:	d30d      	bcc.n	200025f0 <__udivsi3+0x3c>
200025d4:	22ff      	movs	r2, #255	; 0xff
200025d6:	0209      	lsls	r1, r1, #8
200025d8:	ba12      	rev	r2, r2
200025da:	0c03      	lsrs	r3, r0, #16
200025dc:	428b      	cmp	r3, r1
200025de:	d302      	bcc.n	200025e6 <__udivsi3+0x32>
200025e0:	1212      	asrs	r2, r2, #8
200025e2:	0209      	lsls	r1, r1, #8
200025e4:	d065      	beq.n	200026b2 <__udivsi3+0xfe>
200025e6:	0b03      	lsrs	r3, r0, #12
200025e8:	428b      	cmp	r3, r1
200025ea:	d319      	bcc.n	20002620 <__udivsi3+0x6c>
200025ec:	e000      	b.n	200025f0 <__udivsi3+0x3c>
200025ee:	0a09      	lsrs	r1, r1, #8
200025f0:	0bc3      	lsrs	r3, r0, #15
200025f2:	428b      	cmp	r3, r1
200025f4:	d301      	bcc.n	200025fa <__udivsi3+0x46>
200025f6:	03cb      	lsls	r3, r1, #15
200025f8:	1ac0      	subs	r0, r0, r3
200025fa:	4152      	adcs	r2, r2
200025fc:	0b83      	lsrs	r3, r0, #14
200025fe:	428b      	cmp	r3, r1
20002600:	d301      	bcc.n	20002606 <__udivsi3+0x52>
20002602:	038b      	lsls	r3, r1, #14
20002604:	1ac0      	subs	r0, r0, r3
20002606:	4152      	adcs	r2, r2
20002608:	0b43      	lsrs	r3, r0, #13
2000260a:	428b      	cmp	r3, r1
2000260c:	d301      	bcc.n	20002612 <__udivsi3+0x5e>
2000260e:	034b      	lsls	r3, r1, #13
20002610:	1ac0      	subs	r0, r0, r3
20002612:	4152      	adcs	r2, r2
20002614:	0b03      	lsrs	r3, r0, #12
20002616:	428b      	cmp	r3, r1
20002618:	d301      	bcc.n	2000261e <__udivsi3+0x6a>
2000261a:	030b      	lsls	r3, r1, #12
2000261c:	1ac0      	subs	r0, r0, r3
2000261e:	4152      	adcs	r2, r2
20002620:	0ac3      	lsrs	r3, r0, #11
20002622:	428b      	cmp	r3, r1
20002624:	d301      	bcc.n	2000262a <__udivsi3+0x76>
20002626:	02cb      	lsls	r3, r1, #11
20002628:	1ac0      	subs	r0, r0, r3
2000262a:	4152      	adcs	r2, r2
2000262c:	0a83      	lsrs	r3, r0, #10
2000262e:	428b      	cmp	r3, r1
20002630:	d301      	bcc.n	20002636 <__udivsi3+0x82>
20002632:	028b      	lsls	r3, r1, #10
20002634:	1ac0      	subs	r0, r0, r3
20002636:	4152      	adcs	r2, r2
20002638:	0a43      	lsrs	r3, r0, #9
2000263a:	428b      	cmp	r3, r1
2000263c:	d301      	bcc.n	20002642 <__udivsi3+0x8e>
2000263e:	024b      	lsls	r3, r1, #9
20002640:	1ac0      	subs	r0, r0, r3
20002642:	4152      	adcs	r2, r2
20002644:	0a03      	lsrs	r3, r0, #8
20002646:	428b      	cmp	r3, r1
20002648:	d301      	bcc.n	2000264e <__udivsi3+0x9a>
2000264a:	020b      	lsls	r3, r1, #8
2000264c:	1ac0      	subs	r0, r0, r3
2000264e:	4152      	adcs	r2, r2
20002650:	d2cd      	bcs.n	200025ee <__udivsi3+0x3a>
20002652:	09c3      	lsrs	r3, r0, #7
20002654:	428b      	cmp	r3, r1
20002656:	d301      	bcc.n	2000265c <__udivsi3+0xa8>
20002658:	01cb      	lsls	r3, r1, #7
2000265a:	1ac0      	subs	r0, r0, r3
2000265c:	4152      	adcs	r2, r2
2000265e:	0983      	lsrs	r3, r0, #6
20002660:	428b      	cmp	r3, r1
20002662:	d301      	bcc.n	20002668 <__udivsi3+0xb4>
20002664:	018b      	lsls	r3, r1, #6
20002666:	1ac0      	subs	r0, r0, r3
20002668:	4152      	adcs	r2, r2
2000266a:	0943      	lsrs	r3, r0, #5
2000266c:	428b      	cmp	r3, r1
2000266e:	d301      	bcc.n	20002674 <__udivsi3+0xc0>
20002670:	014b      	lsls	r3, r1, #5
20002672:	1ac0      	subs	r0, r0, r3
20002674:	4152      	adcs	r2, r2
20002676:	0903      	lsrs	r3, r0, #4
20002678:	428b      	cmp	r3, r1
2000267a:	d301      	bcc.n	20002680 <__udivsi3+0xcc>
2000267c:	010b      	lsls	r3, r1, #4
2000267e:	1ac0      	subs	r0, r0, r3
20002680:	4152      	adcs	r2, r2
20002682:	08c3      	lsrs	r3, r0, #3
20002684:	428b      	cmp	r3, r1
20002686:	d301      	bcc.n	2000268c <__udivsi3+0xd8>
20002688:	00cb      	lsls	r3, r1, #3
2000268a:	1ac0      	subs	r0, r0, r3
2000268c:	4152      	adcs	r2, r2
2000268e:	0883      	lsrs	r3, r0, #2
20002690:	428b      	cmp	r3, r1
20002692:	d301      	bcc.n	20002698 <__udivsi3+0xe4>
20002694:	008b      	lsls	r3, r1, #2
20002696:	1ac0      	subs	r0, r0, r3
20002698:	4152      	adcs	r2, r2
2000269a:	0843      	lsrs	r3, r0, #1
2000269c:	428b      	cmp	r3, r1
2000269e:	d301      	bcc.n	200026a4 <__udivsi3+0xf0>
200026a0:	004b      	lsls	r3, r1, #1
200026a2:	1ac0      	subs	r0, r0, r3
200026a4:	4152      	adcs	r2, r2
200026a6:	1a41      	subs	r1, r0, r1
200026a8:	d200      	bcs.n	200026ac <__udivsi3+0xf8>
200026aa:	4601      	mov	r1, r0
200026ac:	4152      	adcs	r2, r2
200026ae:	4610      	mov	r0, r2
200026b0:	4770      	bx	lr
200026b2:	e7ff      	b.n	200026b4 <__udivsi3+0x100>
200026b4:	b501      	push	{r0, lr}
200026b6:	2000      	movs	r0, #0
200026b8:	f000 f806 	bl	200026c8 <__aeabi_idiv0>
200026bc:	bd02      	pop	{r1, pc}
200026be:	46c0      	nop			; (mov r8, r8)

200026c0 <__aeabi_uidivmod>:
200026c0:	2900      	cmp	r1, #0
200026c2:	d0f7      	beq.n	200026b4 <__udivsi3+0x100>
200026c4:	e776      	b.n	200025b4 <__udivsi3>
200026c6:	4770      	bx	lr

200026c8 <__aeabi_idiv0>:
200026c8:	4770      	bx	lr
200026ca:	46c0      	nop			; (mov r8, r8)

200026cc <__aeabi_d2uiz>:
200026cc:	b570      	push	{r4, r5, r6, lr}
200026ce:	2200      	movs	r2, #0
200026d0:	4b0c      	ldr	r3, [pc, #48]	; (20002704 <__aeabi_d2uiz+0x38>)
200026d2:	0004      	movs	r4, r0
200026d4:	000d      	movs	r5, r1
200026d6:	f000 fbfb 	bl	20002ed0 <__aeabi_dcmpge>
200026da:	2800      	cmp	r0, #0
200026dc:	d104      	bne.n	200026e8 <__aeabi_d2uiz+0x1c>
200026de:	0020      	movs	r0, r4
200026e0:	0029      	movs	r1, r5
200026e2:	f000 fb59 	bl	20002d98 <__aeabi_d2iz>
200026e6:	bd70      	pop	{r4, r5, r6, pc}
200026e8:	4b06      	ldr	r3, [pc, #24]	; (20002704 <__aeabi_d2uiz+0x38>)
200026ea:	2200      	movs	r2, #0
200026ec:	0020      	movs	r0, r4
200026ee:	0029      	movs	r1, r5
200026f0:	f000 f80a 	bl	20002708 <__aeabi_dsub>
200026f4:	f000 fb50 	bl	20002d98 <__aeabi_d2iz>
200026f8:	2380      	movs	r3, #128	; 0x80
200026fa:	061b      	lsls	r3, r3, #24
200026fc:	469c      	mov	ip, r3
200026fe:	4460      	add	r0, ip
20002700:	e7f1      	b.n	200026e6 <__aeabi_d2uiz+0x1a>
20002702:	46c0      	nop			; (mov r8, r8)
20002704:	41e00000 	mvnmi	r0, r0

20002708 <__aeabi_dsub>:
20002708:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
2000270a:	4657      	mov	r7, sl
2000270c:	464e      	mov	r6, r9
2000270e:	4645      	mov	r5, r8
20002710:	46de      	mov	lr, fp
20002712:	000c      	movs	r4, r1
20002714:	0309      	lsls	r1, r1, #12
20002716:	b5e0      	push	{r5, r6, r7, lr}
20002718:	0a49      	lsrs	r1, r1, #9
2000271a:	0f46      	lsrs	r6, r0, #29
2000271c:	005f      	lsls	r7, r3, #1
2000271e:	4331      	orrs	r1, r6
20002720:	031e      	lsls	r6, r3, #12
20002722:	0fdb      	lsrs	r3, r3, #31
20002724:	0a76      	lsrs	r6, r6, #9
20002726:	469b      	mov	fp, r3
20002728:	0f53      	lsrs	r3, r2, #29
2000272a:	4333      	orrs	r3, r6
2000272c:	4ec8      	ldr	r6, [pc, #800]	; (20002a50 <__aeabi_dsub+0x348>)
2000272e:	0065      	lsls	r5, r4, #1
20002730:	00c0      	lsls	r0, r0, #3
20002732:	0fe4      	lsrs	r4, r4, #31
20002734:	00d2      	lsls	r2, r2, #3
20002736:	0d6d      	lsrs	r5, r5, #21
20002738:	46a2      	mov	sl, r4
2000273a:	4681      	mov	r9, r0
2000273c:	0d7f      	lsrs	r7, r7, #21
2000273e:	469c      	mov	ip, r3
20002740:	4690      	mov	r8, r2
20002742:	42b7      	cmp	r7, r6
20002744:	d100      	bne.n	20002748 <__aeabi_dsub+0x40>
20002746:	e0b9      	b.n	200028bc <__aeabi_dsub+0x1b4>
20002748:	465b      	mov	r3, fp
2000274a:	2601      	movs	r6, #1
2000274c:	4073      	eors	r3, r6
2000274e:	469b      	mov	fp, r3
20002750:	1bee      	subs	r6, r5, r7
20002752:	45a3      	cmp	fp, r4
20002754:	d100      	bne.n	20002758 <__aeabi_dsub+0x50>
20002756:	e083      	b.n	20002860 <__aeabi_dsub+0x158>
20002758:	2e00      	cmp	r6, #0
2000275a:	dd63      	ble.n	20002824 <__aeabi_dsub+0x11c>
2000275c:	2f00      	cmp	r7, #0
2000275e:	d000      	beq.n	20002762 <__aeabi_dsub+0x5a>
20002760:	e0b1      	b.n	200028c6 <__aeabi_dsub+0x1be>
20002762:	4663      	mov	r3, ip
20002764:	4313      	orrs	r3, r2
20002766:	d100      	bne.n	2000276a <__aeabi_dsub+0x62>
20002768:	e123      	b.n	200029b2 <__aeabi_dsub+0x2aa>
2000276a:	1e73      	subs	r3, r6, #1
2000276c:	2b00      	cmp	r3, #0
2000276e:	d000      	beq.n	20002772 <__aeabi_dsub+0x6a>
20002770:	e1ba      	b.n	20002ae8 <__aeabi_dsub+0x3e0>
20002772:	1a86      	subs	r6, r0, r2
20002774:	4663      	mov	r3, ip
20002776:	42b0      	cmp	r0, r6
20002778:	4180      	sbcs	r0, r0
2000277a:	2501      	movs	r5, #1
2000277c:	1ac9      	subs	r1, r1, r3
2000277e:	4240      	negs	r0, r0
20002780:	1a09      	subs	r1, r1, r0
20002782:	020b      	lsls	r3, r1, #8
20002784:	d400      	bmi.n	20002788 <__aeabi_dsub+0x80>
20002786:	e147      	b.n	20002a18 <__aeabi_dsub+0x310>
20002788:	0249      	lsls	r1, r1, #9
2000278a:	0a4b      	lsrs	r3, r1, #9
2000278c:	4698      	mov	r8, r3
2000278e:	4643      	mov	r3, r8
20002790:	2b00      	cmp	r3, #0
20002792:	d100      	bne.n	20002796 <__aeabi_dsub+0x8e>
20002794:	e189      	b.n	20002aaa <__aeabi_dsub+0x3a2>
20002796:	4640      	mov	r0, r8
20002798:	f000 fba4 	bl	20002ee4 <__clzsi2>
2000279c:	0003      	movs	r3, r0
2000279e:	3b08      	subs	r3, #8
200027a0:	2b1f      	cmp	r3, #31
200027a2:	dd00      	ble.n	200027a6 <__aeabi_dsub+0x9e>
200027a4:	e17c      	b.n	20002aa0 <__aeabi_dsub+0x398>
200027a6:	2220      	movs	r2, #32
200027a8:	0030      	movs	r0, r6
200027aa:	1ad2      	subs	r2, r2, r3
200027ac:	4641      	mov	r1, r8
200027ae:	40d0      	lsrs	r0, r2
200027b0:	4099      	lsls	r1, r3
200027b2:	0002      	movs	r2, r0
200027b4:	409e      	lsls	r6, r3
200027b6:	430a      	orrs	r2, r1
200027b8:	429d      	cmp	r5, r3
200027ba:	dd00      	ble.n	200027be <__aeabi_dsub+0xb6>
200027bc:	e16a      	b.n	20002a94 <__aeabi_dsub+0x38c>
200027be:	1b5d      	subs	r5, r3, r5
200027c0:	1c6b      	adds	r3, r5, #1
200027c2:	2b1f      	cmp	r3, #31
200027c4:	dd00      	ble.n	200027c8 <__aeabi_dsub+0xc0>
200027c6:	e194      	b.n	20002af2 <__aeabi_dsub+0x3ea>
200027c8:	2120      	movs	r1, #32
200027ca:	0010      	movs	r0, r2
200027cc:	0035      	movs	r5, r6
200027ce:	1ac9      	subs	r1, r1, r3
200027d0:	408e      	lsls	r6, r1
200027d2:	40da      	lsrs	r2, r3
200027d4:	4088      	lsls	r0, r1
200027d6:	40dd      	lsrs	r5, r3
200027d8:	1e71      	subs	r1, r6, #1
200027da:	418e      	sbcs	r6, r1
200027dc:	0011      	movs	r1, r2
200027de:	2207      	movs	r2, #7
200027e0:	4328      	orrs	r0, r5
200027e2:	2500      	movs	r5, #0
200027e4:	4306      	orrs	r6, r0
200027e6:	4032      	ands	r2, r6
200027e8:	2a00      	cmp	r2, #0
200027ea:	d009      	beq.n	20002800 <__aeabi_dsub+0xf8>
200027ec:	230f      	movs	r3, #15
200027ee:	4033      	ands	r3, r6
200027f0:	2b04      	cmp	r3, #4
200027f2:	d005      	beq.n	20002800 <__aeabi_dsub+0xf8>
200027f4:	1d33      	adds	r3, r6, #4
200027f6:	42b3      	cmp	r3, r6
200027f8:	41b6      	sbcs	r6, r6
200027fa:	4276      	negs	r6, r6
200027fc:	1989      	adds	r1, r1, r6
200027fe:	001e      	movs	r6, r3
20002800:	020b      	lsls	r3, r1, #8
20002802:	d400      	bmi.n	20002806 <__aeabi_dsub+0xfe>
20002804:	e23d      	b.n	20002c82 <__aeabi_dsub+0x57a>
20002806:	1c6a      	adds	r2, r5, #1
20002808:	4b91      	ldr	r3, [pc, #580]	; (20002a50 <__aeabi_dsub+0x348>)
2000280a:	0555      	lsls	r5, r2, #21
2000280c:	0d6d      	lsrs	r5, r5, #21
2000280e:	429a      	cmp	r2, r3
20002810:	d100      	bne.n	20002814 <__aeabi_dsub+0x10c>
20002812:	e119      	b.n	20002a48 <__aeabi_dsub+0x340>
20002814:	4a8f      	ldr	r2, [pc, #572]	; (20002a54 <__aeabi_dsub+0x34c>)
20002816:	08f6      	lsrs	r6, r6, #3
20002818:	400a      	ands	r2, r1
2000281a:	0757      	lsls	r7, r2, #29
2000281c:	0252      	lsls	r2, r2, #9
2000281e:	4337      	orrs	r7, r6
20002820:	0b12      	lsrs	r2, r2, #12
20002822:	e09b      	b.n	2000295c <__aeabi_dsub+0x254>
20002824:	2e00      	cmp	r6, #0
20002826:	d000      	beq.n	2000282a <__aeabi_dsub+0x122>
20002828:	e0c5      	b.n	200029b6 <__aeabi_dsub+0x2ae>
2000282a:	1c6e      	adds	r6, r5, #1
2000282c:	0576      	lsls	r6, r6, #21
2000282e:	0d76      	lsrs	r6, r6, #21
20002830:	2e01      	cmp	r6, #1
20002832:	dc00      	bgt.n	20002836 <__aeabi_dsub+0x12e>
20002834:	e148      	b.n	20002ac8 <__aeabi_dsub+0x3c0>
20002836:	4667      	mov	r7, ip
20002838:	1a86      	subs	r6, r0, r2
2000283a:	1bcb      	subs	r3, r1, r7
2000283c:	42b0      	cmp	r0, r6
2000283e:	41bf      	sbcs	r7, r7
20002840:	427f      	negs	r7, r7
20002842:	46b8      	mov	r8, r7
20002844:	001f      	movs	r7, r3
20002846:	4643      	mov	r3, r8
20002848:	1aff      	subs	r7, r7, r3
2000284a:	003b      	movs	r3, r7
2000284c:	46b8      	mov	r8, r7
2000284e:	021b      	lsls	r3, r3, #8
20002850:	d500      	bpl.n	20002854 <__aeabi_dsub+0x14c>
20002852:	e15f      	b.n	20002b14 <__aeabi_dsub+0x40c>
20002854:	4337      	orrs	r7, r6
20002856:	d19a      	bne.n	2000278e <__aeabi_dsub+0x86>
20002858:	2200      	movs	r2, #0
2000285a:	2400      	movs	r4, #0
2000285c:	2500      	movs	r5, #0
2000285e:	e079      	b.n	20002954 <__aeabi_dsub+0x24c>
20002860:	2e00      	cmp	r6, #0
20002862:	dc00      	bgt.n	20002866 <__aeabi_dsub+0x15e>
20002864:	e0fa      	b.n	20002a5c <__aeabi_dsub+0x354>
20002866:	2f00      	cmp	r7, #0
20002868:	d100      	bne.n	2000286c <__aeabi_dsub+0x164>
2000286a:	e08d      	b.n	20002988 <__aeabi_dsub+0x280>
2000286c:	4b78      	ldr	r3, [pc, #480]	; (20002a50 <__aeabi_dsub+0x348>)
2000286e:	429d      	cmp	r5, r3
20002870:	d067      	beq.n	20002942 <__aeabi_dsub+0x23a>
20002872:	2380      	movs	r3, #128	; 0x80
20002874:	4667      	mov	r7, ip
20002876:	041b      	lsls	r3, r3, #16
20002878:	431f      	orrs	r7, r3
2000287a:	46bc      	mov	ip, r7
2000287c:	2e38      	cmp	r6, #56	; 0x38
2000287e:	dc00      	bgt.n	20002882 <__aeabi_dsub+0x17a>
20002880:	e152      	b.n	20002b28 <__aeabi_dsub+0x420>
20002882:	4663      	mov	r3, ip
20002884:	4313      	orrs	r3, r2
20002886:	1e5a      	subs	r2, r3, #1
20002888:	4193      	sbcs	r3, r2
2000288a:	181e      	adds	r6, r3, r0
2000288c:	4286      	cmp	r6, r0
2000288e:	4180      	sbcs	r0, r0
20002890:	4240      	negs	r0, r0
20002892:	1809      	adds	r1, r1, r0
20002894:	020b      	lsls	r3, r1, #8
20002896:	d400      	bmi.n	2000289a <__aeabi_dsub+0x192>
20002898:	e0be      	b.n	20002a18 <__aeabi_dsub+0x310>
2000289a:	4b6d      	ldr	r3, [pc, #436]	; (20002a50 <__aeabi_dsub+0x348>)
2000289c:	3501      	adds	r5, #1
2000289e:	429d      	cmp	r5, r3
200028a0:	d100      	bne.n	200028a4 <__aeabi_dsub+0x19c>
200028a2:	e0d2      	b.n	20002a4a <__aeabi_dsub+0x342>
200028a4:	4a6b      	ldr	r2, [pc, #428]	; (20002a54 <__aeabi_dsub+0x34c>)
200028a6:	0873      	lsrs	r3, r6, #1
200028a8:	400a      	ands	r2, r1
200028aa:	2101      	movs	r1, #1
200028ac:	400e      	ands	r6, r1
200028ae:	431e      	orrs	r6, r3
200028b0:	0851      	lsrs	r1, r2, #1
200028b2:	07d3      	lsls	r3, r2, #31
200028b4:	2207      	movs	r2, #7
200028b6:	431e      	orrs	r6, r3
200028b8:	4032      	ands	r2, r6
200028ba:	e795      	b.n	200027e8 <__aeabi_dsub+0xe0>
200028bc:	001e      	movs	r6, r3
200028be:	4316      	orrs	r6, r2
200028c0:	d000      	beq.n	200028c4 <__aeabi_dsub+0x1bc>
200028c2:	e745      	b.n	20002750 <__aeabi_dsub+0x48>
200028c4:	e740      	b.n	20002748 <__aeabi_dsub+0x40>
200028c6:	4b62      	ldr	r3, [pc, #392]	; (20002a50 <__aeabi_dsub+0x348>)
200028c8:	429d      	cmp	r5, r3
200028ca:	d03a      	beq.n	20002942 <__aeabi_dsub+0x23a>
200028cc:	2380      	movs	r3, #128	; 0x80
200028ce:	4667      	mov	r7, ip
200028d0:	041b      	lsls	r3, r3, #16
200028d2:	431f      	orrs	r7, r3
200028d4:	46bc      	mov	ip, r7
200028d6:	2e38      	cmp	r6, #56	; 0x38
200028d8:	dd00      	ble.n	200028dc <__aeabi_dsub+0x1d4>
200028da:	e0eb      	b.n	20002ab4 <__aeabi_dsub+0x3ac>
200028dc:	2e1f      	cmp	r6, #31
200028de:	dc00      	bgt.n	200028e2 <__aeabi_dsub+0x1da>
200028e0:	e13a      	b.n	20002b58 <__aeabi_dsub+0x450>
200028e2:	0033      	movs	r3, r6
200028e4:	4667      	mov	r7, ip
200028e6:	3b20      	subs	r3, #32
200028e8:	40df      	lsrs	r7, r3
200028ea:	003b      	movs	r3, r7
200028ec:	2e20      	cmp	r6, #32
200028ee:	d005      	beq.n	200028fc <__aeabi_dsub+0x1f4>
200028f0:	2740      	movs	r7, #64	; 0x40
200028f2:	1bbf      	subs	r7, r7, r6
200028f4:	4666      	mov	r6, ip
200028f6:	40be      	lsls	r6, r7
200028f8:	4332      	orrs	r2, r6
200028fa:	4690      	mov	r8, r2
200028fc:	4646      	mov	r6, r8
200028fe:	1e72      	subs	r2, r6, #1
20002900:	4196      	sbcs	r6, r2
20002902:	4333      	orrs	r3, r6
20002904:	e0da      	b.n	20002abc <__aeabi_dsub+0x3b4>
20002906:	2b00      	cmp	r3, #0
20002908:	d100      	bne.n	2000290c <__aeabi_dsub+0x204>
2000290a:	e214      	b.n	20002d36 <__aeabi_dsub+0x62e>
2000290c:	4663      	mov	r3, ip
2000290e:	4313      	orrs	r3, r2
20002910:	d100      	bne.n	20002914 <__aeabi_dsub+0x20c>
20002912:	e168      	b.n	20002be6 <__aeabi_dsub+0x4de>
20002914:	2380      	movs	r3, #128	; 0x80
20002916:	074e      	lsls	r6, r1, #29
20002918:	08c0      	lsrs	r0, r0, #3
2000291a:	08c9      	lsrs	r1, r1, #3
2000291c:	031b      	lsls	r3, r3, #12
2000291e:	4306      	orrs	r6, r0
20002920:	4219      	tst	r1, r3
20002922:	d008      	beq.n	20002936 <__aeabi_dsub+0x22e>
20002924:	4660      	mov	r0, ip
20002926:	08c0      	lsrs	r0, r0, #3
20002928:	4218      	tst	r0, r3
2000292a:	d104      	bne.n	20002936 <__aeabi_dsub+0x22e>
2000292c:	4663      	mov	r3, ip
2000292e:	0001      	movs	r1, r0
20002930:	08d2      	lsrs	r2, r2, #3
20002932:	075e      	lsls	r6, r3, #29
20002934:	4316      	orrs	r6, r2
20002936:	00f3      	lsls	r3, r6, #3
20002938:	4699      	mov	r9, r3
2000293a:	00c9      	lsls	r1, r1, #3
2000293c:	0f72      	lsrs	r2, r6, #29
2000293e:	4d44      	ldr	r5, [pc, #272]	; (20002a50 <__aeabi_dsub+0x348>)
20002940:	4311      	orrs	r1, r2
20002942:	464b      	mov	r3, r9
20002944:	08de      	lsrs	r6, r3, #3
20002946:	4b42      	ldr	r3, [pc, #264]	; (20002a50 <__aeabi_dsub+0x348>)
20002948:	074f      	lsls	r7, r1, #29
2000294a:	4337      	orrs	r7, r6
2000294c:	08ca      	lsrs	r2, r1, #3
2000294e:	429d      	cmp	r5, r3
20002950:	d100      	bne.n	20002954 <__aeabi_dsub+0x24c>
20002952:	e06e      	b.n	20002a32 <__aeabi_dsub+0x32a>
20002954:	0312      	lsls	r2, r2, #12
20002956:	056d      	lsls	r5, r5, #21
20002958:	0b12      	lsrs	r2, r2, #12
2000295a:	0d6d      	lsrs	r5, r5, #21
2000295c:	2100      	movs	r1, #0
2000295e:	0312      	lsls	r2, r2, #12
20002960:	0b13      	lsrs	r3, r2, #12
20002962:	0d0a      	lsrs	r2, r1, #20
20002964:	0512      	lsls	r2, r2, #20
20002966:	431a      	orrs	r2, r3
20002968:	4b3b      	ldr	r3, [pc, #236]	; (20002a58 <__aeabi_dsub+0x350>)
2000296a:	052d      	lsls	r5, r5, #20
2000296c:	4013      	ands	r3, r2
2000296e:	432b      	orrs	r3, r5
20002970:	005b      	lsls	r3, r3, #1
20002972:	07e4      	lsls	r4, r4, #31
20002974:	085b      	lsrs	r3, r3, #1
20002976:	4323      	orrs	r3, r4
20002978:	0038      	movs	r0, r7
2000297a:	0019      	movs	r1, r3
2000297c:	bc3c      	pop	{r2, r3, r4, r5}
2000297e:	4690      	mov	r8, r2
20002980:	4699      	mov	r9, r3
20002982:	46a2      	mov	sl, r4
20002984:	46ab      	mov	fp, r5
20002986:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
20002988:	4663      	mov	r3, ip
2000298a:	4313      	orrs	r3, r2
2000298c:	d011      	beq.n	200029b2 <__aeabi_dsub+0x2aa>
2000298e:	1e73      	subs	r3, r6, #1
20002990:	2b00      	cmp	r3, #0
20002992:	d000      	beq.n	20002996 <__aeabi_dsub+0x28e>
20002994:	e107      	b.n	20002ba6 <__aeabi_dsub+0x49e>
20002996:	1886      	adds	r6, r0, r2
20002998:	4286      	cmp	r6, r0
2000299a:	4180      	sbcs	r0, r0
2000299c:	4461      	add	r1, ip
2000299e:	4240      	negs	r0, r0
200029a0:	1809      	adds	r1, r1, r0
200029a2:	2501      	movs	r5, #1
200029a4:	020b      	lsls	r3, r1, #8
200029a6:	d537      	bpl.n	20002a18 <__aeabi_dsub+0x310>
200029a8:	2502      	movs	r5, #2
200029aa:	e77b      	b.n	200028a4 <__aeabi_dsub+0x19c>
200029ac:	003e      	movs	r6, r7
200029ae:	4661      	mov	r1, ip
200029b0:	4691      	mov	r9, r2
200029b2:	0035      	movs	r5, r6
200029b4:	e7c5      	b.n	20002942 <__aeabi_dsub+0x23a>
200029b6:	465c      	mov	r4, fp
200029b8:	2d00      	cmp	r5, #0
200029ba:	d000      	beq.n	200029be <__aeabi_dsub+0x2b6>
200029bc:	e0e1      	b.n	20002b82 <__aeabi_dsub+0x47a>
200029be:	000b      	movs	r3, r1
200029c0:	4303      	orrs	r3, r0
200029c2:	d0f3      	beq.n	200029ac <__aeabi_dsub+0x2a4>
200029c4:	1c73      	adds	r3, r6, #1
200029c6:	d100      	bne.n	200029ca <__aeabi_dsub+0x2c2>
200029c8:	e1ac      	b.n	20002d24 <__aeabi_dsub+0x61c>
200029ca:	4b21      	ldr	r3, [pc, #132]	; (20002a50 <__aeabi_dsub+0x348>)
200029cc:	429f      	cmp	r7, r3
200029ce:	d100      	bne.n	200029d2 <__aeabi_dsub+0x2ca>
200029d0:	e13a      	b.n	20002c48 <__aeabi_dsub+0x540>
200029d2:	43f3      	mvns	r3, r6
200029d4:	2b38      	cmp	r3, #56	; 0x38
200029d6:	dd00      	ble.n	200029da <__aeabi_dsub+0x2d2>
200029d8:	e16f      	b.n	20002cba <__aeabi_dsub+0x5b2>
200029da:	2b1f      	cmp	r3, #31
200029dc:	dd00      	ble.n	200029e0 <__aeabi_dsub+0x2d8>
200029de:	e18c      	b.n	20002cfa <__aeabi_dsub+0x5f2>
200029e0:	2520      	movs	r5, #32
200029e2:	000e      	movs	r6, r1
200029e4:	1aed      	subs	r5, r5, r3
200029e6:	40ae      	lsls	r6, r5
200029e8:	46b0      	mov	r8, r6
200029ea:	0006      	movs	r6, r0
200029ec:	46aa      	mov	sl, r5
200029ee:	40de      	lsrs	r6, r3
200029f0:	4645      	mov	r5, r8
200029f2:	4335      	orrs	r5, r6
200029f4:	002e      	movs	r6, r5
200029f6:	4655      	mov	r5, sl
200029f8:	40d9      	lsrs	r1, r3
200029fa:	40a8      	lsls	r0, r5
200029fc:	4663      	mov	r3, ip
200029fe:	1e45      	subs	r5, r0, #1
20002a00:	41a8      	sbcs	r0, r5
20002a02:	1a5b      	subs	r3, r3, r1
20002a04:	469c      	mov	ip, r3
20002a06:	4330      	orrs	r0, r6
20002a08:	1a16      	subs	r6, r2, r0
20002a0a:	42b2      	cmp	r2, r6
20002a0c:	4192      	sbcs	r2, r2
20002a0e:	4663      	mov	r3, ip
20002a10:	4252      	negs	r2, r2
20002a12:	1a99      	subs	r1, r3, r2
20002a14:	003d      	movs	r5, r7
20002a16:	e6b4      	b.n	20002782 <__aeabi_dsub+0x7a>
20002a18:	2207      	movs	r2, #7
20002a1a:	4032      	ands	r2, r6
20002a1c:	2a00      	cmp	r2, #0
20002a1e:	d000      	beq.n	20002a22 <__aeabi_dsub+0x31a>
20002a20:	e6e4      	b.n	200027ec <__aeabi_dsub+0xe4>
20002a22:	4b0b      	ldr	r3, [pc, #44]	; (20002a50 <__aeabi_dsub+0x348>)
20002a24:	08f6      	lsrs	r6, r6, #3
20002a26:	074f      	lsls	r7, r1, #29
20002a28:	4337      	orrs	r7, r6
20002a2a:	08ca      	lsrs	r2, r1, #3
20002a2c:	429d      	cmp	r5, r3
20002a2e:	d000      	beq.n	20002a32 <__aeabi_dsub+0x32a>
20002a30:	e790      	b.n	20002954 <__aeabi_dsub+0x24c>
20002a32:	003b      	movs	r3, r7
20002a34:	4313      	orrs	r3, r2
20002a36:	d100      	bne.n	20002a3a <__aeabi_dsub+0x332>
20002a38:	e1a6      	b.n	20002d88 <__aeabi_dsub+0x680>
20002a3a:	2380      	movs	r3, #128	; 0x80
20002a3c:	031b      	lsls	r3, r3, #12
20002a3e:	431a      	orrs	r2, r3
20002a40:	0312      	lsls	r2, r2, #12
20002a42:	0b12      	lsrs	r2, r2, #12
20002a44:	4d02      	ldr	r5, [pc, #8]	; (20002a50 <__aeabi_dsub+0x348>)
20002a46:	e789      	b.n	2000295c <__aeabi_dsub+0x254>
20002a48:	0015      	movs	r5, r2
20002a4a:	2200      	movs	r2, #0
20002a4c:	2700      	movs	r7, #0
20002a4e:	e785      	b.n	2000295c <__aeabi_dsub+0x254>
20002a50:	000007ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
20002a54:	ff7fffff 			; <UNDEFINED> instruction: 0xff7fffff
20002a58:	800fffff 	strdhi	pc, [pc], -pc	; <UNPREDICTABLE>
20002a5c:	2e00      	cmp	r6, #0
20002a5e:	d000      	beq.n	20002a62 <__aeabi_dsub+0x35a>
20002a60:	e0c7      	b.n	20002bf2 <__aeabi_dsub+0x4ea>
20002a62:	1c6b      	adds	r3, r5, #1
20002a64:	055e      	lsls	r6, r3, #21
20002a66:	0d76      	lsrs	r6, r6, #21
20002a68:	2e01      	cmp	r6, #1
20002a6a:	dc00      	bgt.n	20002a6e <__aeabi_dsub+0x366>
20002a6c:	e0f0      	b.n	20002c50 <__aeabi_dsub+0x548>
20002a6e:	4dc8      	ldr	r5, [pc, #800]	; (20002d90 <__aeabi_dsub+0x688>)
20002a70:	42ab      	cmp	r3, r5
20002a72:	d100      	bne.n	20002a76 <__aeabi_dsub+0x36e>
20002a74:	e0b9      	b.n	20002bea <__aeabi_dsub+0x4e2>
20002a76:	1885      	adds	r5, r0, r2
20002a78:	000a      	movs	r2, r1
20002a7a:	4285      	cmp	r5, r0
20002a7c:	4189      	sbcs	r1, r1
20002a7e:	4462      	add	r2, ip
20002a80:	4249      	negs	r1, r1
20002a82:	1851      	adds	r1, r2, r1
20002a84:	2207      	movs	r2, #7
20002a86:	07ce      	lsls	r6, r1, #31
20002a88:	086d      	lsrs	r5, r5, #1
20002a8a:	432e      	orrs	r6, r5
20002a8c:	0849      	lsrs	r1, r1, #1
20002a8e:	4032      	ands	r2, r6
20002a90:	001d      	movs	r5, r3
20002a92:	e6a9      	b.n	200027e8 <__aeabi_dsub+0xe0>
20002a94:	49bf      	ldr	r1, [pc, #764]	; (20002d94 <__aeabi_dsub+0x68c>)
20002a96:	1aed      	subs	r5, r5, r3
20002a98:	4011      	ands	r1, r2
20002a9a:	2207      	movs	r2, #7
20002a9c:	4032      	ands	r2, r6
20002a9e:	e6a3      	b.n	200027e8 <__aeabi_dsub+0xe0>
20002aa0:	0032      	movs	r2, r6
20002aa2:	3828      	subs	r0, #40	; 0x28
20002aa4:	4082      	lsls	r2, r0
20002aa6:	2600      	movs	r6, #0
20002aa8:	e686      	b.n	200027b8 <__aeabi_dsub+0xb0>
20002aaa:	0030      	movs	r0, r6
20002aac:	f000 fa1a 	bl	20002ee4 <__clzsi2>
20002ab0:	3020      	adds	r0, #32
20002ab2:	e673      	b.n	2000279c <__aeabi_dsub+0x94>
20002ab4:	4663      	mov	r3, ip
20002ab6:	4313      	orrs	r3, r2
20002ab8:	1e5a      	subs	r2, r3, #1
20002aba:	4193      	sbcs	r3, r2
20002abc:	1ac6      	subs	r6, r0, r3
20002abe:	42b0      	cmp	r0, r6
20002ac0:	4180      	sbcs	r0, r0
20002ac2:	4240      	negs	r0, r0
20002ac4:	1a09      	subs	r1, r1, r0
20002ac6:	e65c      	b.n	20002782 <__aeabi_dsub+0x7a>
20002ac8:	000e      	movs	r6, r1
20002aca:	4667      	mov	r7, ip
20002acc:	4306      	orrs	r6, r0
20002ace:	4317      	orrs	r7, r2
20002ad0:	2d00      	cmp	r5, #0
20002ad2:	d15e      	bne.n	20002b92 <__aeabi_dsub+0x48a>
20002ad4:	2e00      	cmp	r6, #0
20002ad6:	d000      	beq.n	20002ada <__aeabi_dsub+0x3d2>
20002ad8:	e0f3      	b.n	20002cc2 <__aeabi_dsub+0x5ba>
20002ada:	2f00      	cmp	r7, #0
20002adc:	d100      	bne.n	20002ae0 <__aeabi_dsub+0x3d8>
20002ade:	e11e      	b.n	20002d1e <__aeabi_dsub+0x616>
20002ae0:	465c      	mov	r4, fp
20002ae2:	4661      	mov	r1, ip
20002ae4:	4691      	mov	r9, r2
20002ae6:	e72c      	b.n	20002942 <__aeabi_dsub+0x23a>
20002ae8:	4fa9      	ldr	r7, [pc, #676]	; (20002d90 <__aeabi_dsub+0x688>)
20002aea:	42be      	cmp	r6, r7
20002aec:	d07b      	beq.n	20002be6 <__aeabi_dsub+0x4de>
20002aee:	001e      	movs	r6, r3
20002af0:	e6f1      	b.n	200028d6 <__aeabi_dsub+0x1ce>
20002af2:	0010      	movs	r0, r2
20002af4:	3d1f      	subs	r5, #31
20002af6:	40e8      	lsrs	r0, r5
20002af8:	2b20      	cmp	r3, #32
20002afa:	d003      	beq.n	20002b04 <__aeabi_dsub+0x3fc>
20002afc:	2140      	movs	r1, #64	; 0x40
20002afe:	1acb      	subs	r3, r1, r3
20002b00:	409a      	lsls	r2, r3
20002b02:	4316      	orrs	r6, r2
20002b04:	1e73      	subs	r3, r6, #1
20002b06:	419e      	sbcs	r6, r3
20002b08:	2207      	movs	r2, #7
20002b0a:	4306      	orrs	r6, r0
20002b0c:	4032      	ands	r2, r6
20002b0e:	2100      	movs	r1, #0
20002b10:	2500      	movs	r5, #0
20002b12:	e783      	b.n	20002a1c <__aeabi_dsub+0x314>
20002b14:	1a16      	subs	r6, r2, r0
20002b16:	4663      	mov	r3, ip
20002b18:	42b2      	cmp	r2, r6
20002b1a:	4180      	sbcs	r0, r0
20002b1c:	1a59      	subs	r1, r3, r1
20002b1e:	4240      	negs	r0, r0
20002b20:	1a0b      	subs	r3, r1, r0
20002b22:	4698      	mov	r8, r3
20002b24:	465c      	mov	r4, fp
20002b26:	e632      	b.n	2000278e <__aeabi_dsub+0x86>
20002b28:	2e1f      	cmp	r6, #31
20002b2a:	dd00      	ble.n	20002b2e <__aeabi_dsub+0x426>
20002b2c:	e0ab      	b.n	20002c86 <__aeabi_dsub+0x57e>
20002b2e:	2720      	movs	r7, #32
20002b30:	1bbb      	subs	r3, r7, r6
20002b32:	469a      	mov	sl, r3
20002b34:	4663      	mov	r3, ip
20002b36:	4657      	mov	r7, sl
20002b38:	40bb      	lsls	r3, r7
20002b3a:	4699      	mov	r9, r3
20002b3c:	0013      	movs	r3, r2
20002b3e:	464f      	mov	r7, r9
20002b40:	40f3      	lsrs	r3, r6
20002b42:	431f      	orrs	r7, r3
20002b44:	003b      	movs	r3, r7
20002b46:	4657      	mov	r7, sl
20002b48:	40ba      	lsls	r2, r7
20002b4a:	1e57      	subs	r7, r2, #1
20002b4c:	41ba      	sbcs	r2, r7
20002b4e:	4313      	orrs	r3, r2
20002b50:	4662      	mov	r2, ip
20002b52:	40f2      	lsrs	r2, r6
20002b54:	1889      	adds	r1, r1, r2
20002b56:	e698      	b.n	2000288a <__aeabi_dsub+0x182>
20002b58:	2720      	movs	r7, #32
20002b5a:	1bbb      	subs	r3, r7, r6
20002b5c:	469a      	mov	sl, r3
20002b5e:	4663      	mov	r3, ip
20002b60:	4657      	mov	r7, sl
20002b62:	40bb      	lsls	r3, r7
20002b64:	4699      	mov	r9, r3
20002b66:	0013      	movs	r3, r2
20002b68:	464f      	mov	r7, r9
20002b6a:	40f3      	lsrs	r3, r6
20002b6c:	431f      	orrs	r7, r3
20002b6e:	003b      	movs	r3, r7
20002b70:	4657      	mov	r7, sl
20002b72:	40ba      	lsls	r2, r7
20002b74:	1e57      	subs	r7, r2, #1
20002b76:	41ba      	sbcs	r2, r7
20002b78:	4313      	orrs	r3, r2
20002b7a:	4662      	mov	r2, ip
20002b7c:	40f2      	lsrs	r2, r6
20002b7e:	1a89      	subs	r1, r1, r2
20002b80:	e79c      	b.n	20002abc <__aeabi_dsub+0x3b4>
20002b82:	4b83      	ldr	r3, [pc, #524]	; (20002d90 <__aeabi_dsub+0x688>)
20002b84:	429f      	cmp	r7, r3
20002b86:	d05f      	beq.n	20002c48 <__aeabi_dsub+0x540>
20002b88:	2580      	movs	r5, #128	; 0x80
20002b8a:	042d      	lsls	r5, r5, #16
20002b8c:	4273      	negs	r3, r6
20002b8e:	4329      	orrs	r1, r5
20002b90:	e720      	b.n	200029d4 <__aeabi_dsub+0x2cc>
20002b92:	2e00      	cmp	r6, #0
20002b94:	d10c      	bne.n	20002bb0 <__aeabi_dsub+0x4a8>
20002b96:	2f00      	cmp	r7, #0
20002b98:	d100      	bne.n	20002b9c <__aeabi_dsub+0x494>
20002b9a:	e0d0      	b.n	20002d3e <__aeabi_dsub+0x636>
20002b9c:	465c      	mov	r4, fp
20002b9e:	4661      	mov	r1, ip
20002ba0:	4691      	mov	r9, r2
20002ba2:	4d7b      	ldr	r5, [pc, #492]	; (20002d90 <__aeabi_dsub+0x688>)
20002ba4:	e6cd      	b.n	20002942 <__aeabi_dsub+0x23a>
20002ba6:	4f7a      	ldr	r7, [pc, #488]	; (20002d90 <__aeabi_dsub+0x688>)
20002ba8:	42be      	cmp	r6, r7
20002baa:	d01c      	beq.n	20002be6 <__aeabi_dsub+0x4de>
20002bac:	001e      	movs	r6, r3
20002bae:	e665      	b.n	2000287c <__aeabi_dsub+0x174>
20002bb0:	2f00      	cmp	r7, #0
20002bb2:	d018      	beq.n	20002be6 <__aeabi_dsub+0x4de>
20002bb4:	08c0      	lsrs	r0, r0, #3
20002bb6:	074e      	lsls	r6, r1, #29
20002bb8:	4306      	orrs	r6, r0
20002bba:	2080      	movs	r0, #128	; 0x80
20002bbc:	08c9      	lsrs	r1, r1, #3
20002bbe:	0300      	lsls	r0, r0, #12
20002bc0:	4201      	tst	r1, r0
20002bc2:	d008      	beq.n	20002bd6 <__aeabi_dsub+0x4ce>
20002bc4:	4663      	mov	r3, ip
20002bc6:	08dc      	lsrs	r4, r3, #3
20002bc8:	4204      	tst	r4, r0
20002bca:	d104      	bne.n	20002bd6 <__aeabi_dsub+0x4ce>
20002bcc:	0021      	movs	r1, r4
20002bce:	46da      	mov	sl, fp
20002bd0:	08d2      	lsrs	r2, r2, #3
20002bd2:	075e      	lsls	r6, r3, #29
20002bd4:	4316      	orrs	r6, r2
20002bd6:	00f3      	lsls	r3, r6, #3
20002bd8:	4699      	mov	r9, r3
20002bda:	2401      	movs	r4, #1
20002bdc:	4653      	mov	r3, sl
20002bde:	00c9      	lsls	r1, r1, #3
20002be0:	0f72      	lsrs	r2, r6, #29
20002be2:	4311      	orrs	r1, r2
20002be4:	401c      	ands	r4, r3
20002be6:	4d6a      	ldr	r5, [pc, #424]	; (20002d90 <__aeabi_dsub+0x688>)
20002be8:	e6ab      	b.n	20002942 <__aeabi_dsub+0x23a>
20002bea:	001d      	movs	r5, r3
20002bec:	2200      	movs	r2, #0
20002bee:	2700      	movs	r7, #0
20002bf0:	e6b4      	b.n	2000295c <__aeabi_dsub+0x254>
20002bf2:	2d00      	cmp	r5, #0
20002bf4:	d159      	bne.n	20002caa <__aeabi_dsub+0x5a2>
20002bf6:	000b      	movs	r3, r1
20002bf8:	4303      	orrs	r3, r0
20002bfa:	d100      	bne.n	20002bfe <__aeabi_dsub+0x4f6>
20002bfc:	e6d6      	b.n	200029ac <__aeabi_dsub+0x2a4>
20002bfe:	1c73      	adds	r3, r6, #1
20002c00:	d100      	bne.n	20002c04 <__aeabi_dsub+0x4fc>
20002c02:	e0b2      	b.n	20002d6a <__aeabi_dsub+0x662>
20002c04:	4b62      	ldr	r3, [pc, #392]	; (20002d90 <__aeabi_dsub+0x688>)
20002c06:	429f      	cmp	r7, r3
20002c08:	d01e      	beq.n	20002c48 <__aeabi_dsub+0x540>
20002c0a:	43f3      	mvns	r3, r6
20002c0c:	2b38      	cmp	r3, #56	; 0x38
20002c0e:	dc6f      	bgt.n	20002cf0 <__aeabi_dsub+0x5e8>
20002c10:	2b1f      	cmp	r3, #31
20002c12:	dd00      	ble.n	20002c16 <__aeabi_dsub+0x50e>
20002c14:	e097      	b.n	20002d46 <__aeabi_dsub+0x63e>
20002c16:	2520      	movs	r5, #32
20002c18:	000e      	movs	r6, r1
20002c1a:	1aed      	subs	r5, r5, r3
20002c1c:	40ae      	lsls	r6, r5
20002c1e:	46b0      	mov	r8, r6
20002c20:	0006      	movs	r6, r0
20002c22:	46aa      	mov	sl, r5
20002c24:	40de      	lsrs	r6, r3
20002c26:	4645      	mov	r5, r8
20002c28:	4335      	orrs	r5, r6
20002c2a:	002e      	movs	r6, r5
20002c2c:	4655      	mov	r5, sl
20002c2e:	40a8      	lsls	r0, r5
20002c30:	40d9      	lsrs	r1, r3
20002c32:	1e45      	subs	r5, r0, #1
20002c34:	41a8      	sbcs	r0, r5
20002c36:	448c      	add	ip, r1
20002c38:	4306      	orrs	r6, r0
20002c3a:	18b6      	adds	r6, r6, r2
20002c3c:	4296      	cmp	r6, r2
20002c3e:	4192      	sbcs	r2, r2
20002c40:	4251      	negs	r1, r2
20002c42:	4461      	add	r1, ip
20002c44:	003d      	movs	r5, r7
20002c46:	e625      	b.n	20002894 <__aeabi_dsub+0x18c>
20002c48:	003d      	movs	r5, r7
20002c4a:	4661      	mov	r1, ip
20002c4c:	4691      	mov	r9, r2
20002c4e:	e678      	b.n	20002942 <__aeabi_dsub+0x23a>
20002c50:	000b      	movs	r3, r1
20002c52:	4303      	orrs	r3, r0
20002c54:	2d00      	cmp	r5, #0
20002c56:	d000      	beq.n	20002c5a <__aeabi_dsub+0x552>
20002c58:	e655      	b.n	20002906 <__aeabi_dsub+0x1fe>
20002c5a:	2b00      	cmp	r3, #0
20002c5c:	d0f5      	beq.n	20002c4a <__aeabi_dsub+0x542>
20002c5e:	4663      	mov	r3, ip
20002c60:	4313      	orrs	r3, r2
20002c62:	d100      	bne.n	20002c66 <__aeabi_dsub+0x55e>
20002c64:	e66d      	b.n	20002942 <__aeabi_dsub+0x23a>
20002c66:	1886      	adds	r6, r0, r2
20002c68:	4286      	cmp	r6, r0
20002c6a:	4180      	sbcs	r0, r0
20002c6c:	4461      	add	r1, ip
20002c6e:	4240      	negs	r0, r0
20002c70:	1809      	adds	r1, r1, r0
20002c72:	2200      	movs	r2, #0
20002c74:	020b      	lsls	r3, r1, #8
20002c76:	d400      	bmi.n	20002c7a <__aeabi_dsub+0x572>
20002c78:	e6d0      	b.n	20002a1c <__aeabi_dsub+0x314>
20002c7a:	4b46      	ldr	r3, [pc, #280]	; (20002d94 <__aeabi_dsub+0x68c>)
20002c7c:	3501      	adds	r5, #1
20002c7e:	4019      	ands	r1, r3
20002c80:	e5b2      	b.n	200027e8 <__aeabi_dsub+0xe0>
20002c82:	46b1      	mov	r9, r6
20002c84:	e65d      	b.n	20002942 <__aeabi_dsub+0x23a>
20002c86:	0033      	movs	r3, r6
20002c88:	4667      	mov	r7, ip
20002c8a:	3b20      	subs	r3, #32
20002c8c:	40df      	lsrs	r7, r3
20002c8e:	003b      	movs	r3, r7
20002c90:	2e20      	cmp	r6, #32
20002c92:	d005      	beq.n	20002ca0 <__aeabi_dsub+0x598>
20002c94:	2740      	movs	r7, #64	; 0x40
20002c96:	1bbf      	subs	r7, r7, r6
20002c98:	4666      	mov	r6, ip
20002c9a:	40be      	lsls	r6, r7
20002c9c:	4332      	orrs	r2, r6
20002c9e:	4690      	mov	r8, r2
20002ca0:	4646      	mov	r6, r8
20002ca2:	1e72      	subs	r2, r6, #1
20002ca4:	4196      	sbcs	r6, r2
20002ca6:	4333      	orrs	r3, r6
20002ca8:	e5ef      	b.n	2000288a <__aeabi_dsub+0x182>
20002caa:	4b39      	ldr	r3, [pc, #228]	; (20002d90 <__aeabi_dsub+0x688>)
20002cac:	429f      	cmp	r7, r3
20002cae:	d0cb      	beq.n	20002c48 <__aeabi_dsub+0x540>
20002cb0:	2580      	movs	r5, #128	; 0x80
20002cb2:	042d      	lsls	r5, r5, #16
20002cb4:	4273      	negs	r3, r6
20002cb6:	4329      	orrs	r1, r5
20002cb8:	e7a8      	b.n	20002c0c <__aeabi_dsub+0x504>
20002cba:	4308      	orrs	r0, r1
20002cbc:	1e41      	subs	r1, r0, #1
20002cbe:	4188      	sbcs	r0, r1
20002cc0:	e6a2      	b.n	20002a08 <__aeabi_dsub+0x300>
20002cc2:	2f00      	cmp	r7, #0
20002cc4:	d100      	bne.n	20002cc8 <__aeabi_dsub+0x5c0>
20002cc6:	e63c      	b.n	20002942 <__aeabi_dsub+0x23a>
20002cc8:	4663      	mov	r3, ip
20002cca:	1a86      	subs	r6, r0, r2
20002ccc:	1acf      	subs	r7, r1, r3
20002cce:	42b0      	cmp	r0, r6
20002cd0:	419b      	sbcs	r3, r3
20002cd2:	425b      	negs	r3, r3
20002cd4:	1afb      	subs	r3, r7, r3
20002cd6:	4698      	mov	r8, r3
20002cd8:	021b      	lsls	r3, r3, #8
20002cda:	d54e      	bpl.n	20002d7a <__aeabi_dsub+0x672>
20002cdc:	1a16      	subs	r6, r2, r0
20002cde:	4663      	mov	r3, ip
20002ce0:	42b2      	cmp	r2, r6
20002ce2:	4192      	sbcs	r2, r2
20002ce4:	1a59      	subs	r1, r3, r1
20002ce6:	4252      	negs	r2, r2
20002ce8:	1a89      	subs	r1, r1, r2
20002cea:	465c      	mov	r4, fp
20002cec:	2200      	movs	r2, #0
20002cee:	e57b      	b.n	200027e8 <__aeabi_dsub+0xe0>
20002cf0:	4301      	orrs	r1, r0
20002cf2:	000e      	movs	r6, r1
20002cf4:	1e71      	subs	r1, r6, #1
20002cf6:	418e      	sbcs	r6, r1
20002cf8:	e79f      	b.n	20002c3a <__aeabi_dsub+0x532>
20002cfa:	001d      	movs	r5, r3
20002cfc:	000e      	movs	r6, r1
20002cfe:	3d20      	subs	r5, #32
20002d00:	40ee      	lsrs	r6, r5
20002d02:	46b0      	mov	r8, r6
20002d04:	2b20      	cmp	r3, #32
20002d06:	d004      	beq.n	20002d12 <__aeabi_dsub+0x60a>
20002d08:	2540      	movs	r5, #64	; 0x40
20002d0a:	1aeb      	subs	r3, r5, r3
20002d0c:	4099      	lsls	r1, r3
20002d0e:	4308      	orrs	r0, r1
20002d10:	4681      	mov	r9, r0
20002d12:	4648      	mov	r0, r9
20002d14:	4643      	mov	r3, r8
20002d16:	1e41      	subs	r1, r0, #1
20002d18:	4188      	sbcs	r0, r1
20002d1a:	4318      	orrs	r0, r3
20002d1c:	e674      	b.n	20002a08 <__aeabi_dsub+0x300>
20002d1e:	2200      	movs	r2, #0
20002d20:	2400      	movs	r4, #0
20002d22:	e617      	b.n	20002954 <__aeabi_dsub+0x24c>
20002d24:	1a16      	subs	r6, r2, r0
20002d26:	4663      	mov	r3, ip
20002d28:	42b2      	cmp	r2, r6
20002d2a:	4192      	sbcs	r2, r2
20002d2c:	1a59      	subs	r1, r3, r1
20002d2e:	4252      	negs	r2, r2
20002d30:	1a89      	subs	r1, r1, r2
20002d32:	003d      	movs	r5, r7
20002d34:	e525      	b.n	20002782 <__aeabi_dsub+0x7a>
20002d36:	4661      	mov	r1, ip
20002d38:	4691      	mov	r9, r2
20002d3a:	4d15      	ldr	r5, [pc, #84]	; (20002d90 <__aeabi_dsub+0x688>)
20002d3c:	e601      	b.n	20002942 <__aeabi_dsub+0x23a>
20002d3e:	2280      	movs	r2, #128	; 0x80
20002d40:	2400      	movs	r4, #0
20002d42:	0312      	lsls	r2, r2, #12
20002d44:	e679      	b.n	20002a3a <__aeabi_dsub+0x332>
20002d46:	001d      	movs	r5, r3
20002d48:	000e      	movs	r6, r1
20002d4a:	3d20      	subs	r5, #32
20002d4c:	40ee      	lsrs	r6, r5
20002d4e:	46b0      	mov	r8, r6
20002d50:	2b20      	cmp	r3, #32
20002d52:	d004      	beq.n	20002d5e <__aeabi_dsub+0x656>
20002d54:	2540      	movs	r5, #64	; 0x40
20002d56:	1aeb      	subs	r3, r5, r3
20002d58:	4099      	lsls	r1, r3
20002d5a:	4308      	orrs	r0, r1
20002d5c:	4681      	mov	r9, r0
20002d5e:	464e      	mov	r6, r9
20002d60:	4643      	mov	r3, r8
20002d62:	1e71      	subs	r1, r6, #1
20002d64:	418e      	sbcs	r6, r1
20002d66:	431e      	orrs	r6, r3
20002d68:	e767      	b.n	20002c3a <__aeabi_dsub+0x532>
20002d6a:	1886      	adds	r6, r0, r2
20002d6c:	4296      	cmp	r6, r2
20002d6e:	419b      	sbcs	r3, r3
20002d70:	4461      	add	r1, ip
20002d72:	425b      	negs	r3, r3
20002d74:	18c9      	adds	r1, r1, r3
20002d76:	003d      	movs	r5, r7
20002d78:	e58c      	b.n	20002894 <__aeabi_dsub+0x18c>
20002d7a:	4647      	mov	r7, r8
20002d7c:	4337      	orrs	r7, r6
20002d7e:	d0ce      	beq.n	20002d1e <__aeabi_dsub+0x616>
20002d80:	2207      	movs	r2, #7
20002d82:	4641      	mov	r1, r8
20002d84:	4032      	ands	r2, r6
20002d86:	e649      	b.n	20002a1c <__aeabi_dsub+0x314>
20002d88:	2700      	movs	r7, #0
20002d8a:	003a      	movs	r2, r7
20002d8c:	e5e6      	b.n	2000295c <__aeabi_dsub+0x254>
20002d8e:	46c0      	nop			; (mov r8, r8)
20002d90:	000007ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
20002d94:	ff7fffff 			; <UNDEFINED> instruction: 0xff7fffff

20002d98 <__aeabi_d2iz>:
20002d98:	b530      	push	{r4, r5, lr}
20002d9a:	4d14      	ldr	r5, [pc, #80]	; (20002dec <__aeabi_d2iz+0x54>)
20002d9c:	030a      	lsls	r2, r1, #12
20002d9e:	004b      	lsls	r3, r1, #1
20002da0:	0b12      	lsrs	r2, r2, #12
20002da2:	0d5b      	lsrs	r3, r3, #21
20002da4:	0fc9      	lsrs	r1, r1, #31
20002da6:	2400      	movs	r4, #0
20002da8:	42ab      	cmp	r3, r5
20002daa:	dd11      	ble.n	20002dd0 <__aeabi_d2iz+0x38>
20002dac:	4c10      	ldr	r4, [pc, #64]	; (20002df0 <__aeabi_d2iz+0x58>)
20002dae:	42a3      	cmp	r3, r4
20002db0:	dc10      	bgt.n	20002dd4 <__aeabi_d2iz+0x3c>
20002db2:	2480      	movs	r4, #128	; 0x80
20002db4:	0364      	lsls	r4, r4, #13
20002db6:	4322      	orrs	r2, r4
20002db8:	4c0e      	ldr	r4, [pc, #56]	; (20002df4 <__aeabi_d2iz+0x5c>)
20002dba:	1ae4      	subs	r4, r4, r3
20002dbc:	2c1f      	cmp	r4, #31
20002dbe:	dd0c      	ble.n	20002dda <__aeabi_d2iz+0x42>
20002dc0:	480d      	ldr	r0, [pc, #52]	; (20002df8 <__aeabi_d2iz+0x60>)
20002dc2:	1ac3      	subs	r3, r0, r3
20002dc4:	40da      	lsrs	r2, r3
20002dc6:	0013      	movs	r3, r2
20002dc8:	425c      	negs	r4, r3
20002dca:	2900      	cmp	r1, #0
20002dcc:	d100      	bne.n	20002dd0 <__aeabi_d2iz+0x38>
20002dce:	001c      	movs	r4, r3
20002dd0:	0020      	movs	r0, r4
20002dd2:	bd30      	pop	{r4, r5, pc}
20002dd4:	4b09      	ldr	r3, [pc, #36]	; (20002dfc <__aeabi_d2iz+0x64>)
20002dd6:	18cc      	adds	r4, r1, r3
20002dd8:	e7fa      	b.n	20002dd0 <__aeabi_d2iz+0x38>
20002dda:	4d09      	ldr	r5, [pc, #36]	; (20002e00 <__aeabi_d2iz+0x68>)
20002ddc:	40e0      	lsrs	r0, r4
20002dde:	46ac      	mov	ip, r5
20002de0:	4463      	add	r3, ip
20002de2:	409a      	lsls	r2, r3
20002de4:	0013      	movs	r3, r2
20002de6:	4303      	orrs	r3, r0
20002de8:	e7ee      	b.n	20002dc8 <__aeabi_d2iz+0x30>
20002dea:	46c0      	nop			; (mov r8, r8)
20002dec:	000003fe 	strdeq	r0, [r0], -lr
20002df0:	0000041d 	andeq	r0, r0, sp, lsl r4
20002df4:	00000433 	andeq	r0, r0, r3, lsr r4
20002df8:	00000413 	andeq	r0, r0, r3, lsl r4
20002dfc:	7fffffff 	svcvc	0x00ffffff
20002e00:	fffffbed 			; <UNDEFINED> instruction: 0xfffffbed

20002e04 <__aeabi_ui2d>:
20002e04:	b510      	push	{r4, lr}
20002e06:	1e04      	subs	r4, r0, #0
20002e08:	d025      	beq.n	20002e56 <__aeabi_ui2d+0x52>
20002e0a:	f000 f86b 	bl	20002ee4 <__clzsi2>
20002e0e:	4b14      	ldr	r3, [pc, #80]	; (20002e60 <__aeabi_ui2d+0x5c>)
20002e10:	1a1b      	subs	r3, r3, r0
20002e12:	055b      	lsls	r3, r3, #21
20002e14:	0d5b      	lsrs	r3, r3, #21
20002e16:	280a      	cmp	r0, #10
20002e18:	dd12      	ble.n	20002e40 <__aeabi_ui2d+0x3c>
20002e1a:	380b      	subs	r0, #11
20002e1c:	4084      	lsls	r4, r0
20002e1e:	2200      	movs	r2, #0
20002e20:	0324      	lsls	r4, r4, #12
20002e22:	0b24      	lsrs	r4, r4, #12
20002e24:	2100      	movs	r1, #0
20002e26:	0010      	movs	r0, r2
20002e28:	0324      	lsls	r4, r4, #12
20002e2a:	0d0a      	lsrs	r2, r1, #20
20002e2c:	0b24      	lsrs	r4, r4, #12
20002e2e:	0512      	lsls	r2, r2, #20
20002e30:	4322      	orrs	r2, r4
20002e32:	4c0c      	ldr	r4, [pc, #48]	; (20002e64 <__aeabi_ui2d+0x60>)
20002e34:	051b      	lsls	r3, r3, #20
20002e36:	4022      	ands	r2, r4
20002e38:	4313      	orrs	r3, r2
20002e3a:	005b      	lsls	r3, r3, #1
20002e3c:	0859      	lsrs	r1, r3, #1
20002e3e:	bd10      	pop	{r4, pc}
20002e40:	0002      	movs	r2, r0
20002e42:	0021      	movs	r1, r4
20002e44:	3215      	adds	r2, #21
20002e46:	4091      	lsls	r1, r2
20002e48:	000a      	movs	r2, r1
20002e4a:	210b      	movs	r1, #11
20002e4c:	1a08      	subs	r0, r1, r0
20002e4e:	40c4      	lsrs	r4, r0
20002e50:	0324      	lsls	r4, r4, #12
20002e52:	0b24      	lsrs	r4, r4, #12
20002e54:	e7e6      	b.n	20002e24 <__aeabi_ui2d+0x20>
20002e56:	2300      	movs	r3, #0
20002e58:	2400      	movs	r4, #0
20002e5a:	2200      	movs	r2, #0
20002e5c:	e7e2      	b.n	20002e24 <__aeabi_ui2d+0x20>
20002e5e:	46c0      	nop			; (mov r8, r8)
20002e60:	0000041e 	andeq	r0, r0, lr, lsl r4
20002e64:	800fffff 	strdhi	pc, [pc], -pc	; <UNPREDICTABLE>

20002e68 <__aeabi_cdrcmple>:
20002e68:	4684      	mov	ip, r0
20002e6a:	1c10      	adds	r0, r2, #0
20002e6c:	4662      	mov	r2, ip
20002e6e:	468c      	mov	ip, r1
20002e70:	1c19      	adds	r1, r3, #0
20002e72:	4663      	mov	r3, ip
20002e74:	e000      	b.n	20002e78 <__aeabi_cdcmpeq>
20002e76:	46c0      	nop			; (mov r8, r8)

20002e78 <__aeabi_cdcmpeq>:
20002e78:	b51f      	push	{r0, r1, r2, r3, r4, lr}
20002e7a:	f000 f8f1 	bl	20003060 <__ledf2>
20002e7e:	2800      	cmp	r0, #0
20002e80:	d401      	bmi.n	20002e86 <__aeabi_cdcmpeq+0xe>
20002e82:	2100      	movs	r1, #0
20002e84:	42c8      	cmn	r0, r1
20002e86:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

20002e88 <__aeabi_dcmpeq>:
20002e88:	b510      	push	{r4, lr}
20002e8a:	f000 f849 	bl	20002f20 <__eqdf2>
20002e8e:	4240      	negs	r0, r0
20002e90:	3001      	adds	r0, #1
20002e92:	bd10      	pop	{r4, pc}

20002e94 <__aeabi_dcmplt>:
20002e94:	b510      	push	{r4, lr}
20002e96:	f000 f8e3 	bl	20003060 <__ledf2>
20002e9a:	2800      	cmp	r0, #0
20002e9c:	db01      	blt.n	20002ea2 <__aeabi_dcmplt+0xe>
20002e9e:	2000      	movs	r0, #0
20002ea0:	bd10      	pop	{r4, pc}
20002ea2:	2001      	movs	r0, #1
20002ea4:	bd10      	pop	{r4, pc}
20002ea6:	46c0      	nop			; (mov r8, r8)

20002ea8 <__aeabi_dcmple>:
20002ea8:	b510      	push	{r4, lr}
20002eaa:	f000 f8d9 	bl	20003060 <__ledf2>
20002eae:	2800      	cmp	r0, #0
20002eb0:	dd01      	ble.n	20002eb6 <__aeabi_dcmple+0xe>
20002eb2:	2000      	movs	r0, #0
20002eb4:	bd10      	pop	{r4, pc}
20002eb6:	2001      	movs	r0, #1
20002eb8:	bd10      	pop	{r4, pc}
20002eba:	46c0      	nop			; (mov r8, r8)

20002ebc <__aeabi_dcmpgt>:
20002ebc:	b510      	push	{r4, lr}
20002ebe:	f000 f86b 	bl	20002f98 <__gedf2>
20002ec2:	2800      	cmp	r0, #0
20002ec4:	dc01      	bgt.n	20002eca <__aeabi_dcmpgt+0xe>
20002ec6:	2000      	movs	r0, #0
20002ec8:	bd10      	pop	{r4, pc}
20002eca:	2001      	movs	r0, #1
20002ecc:	bd10      	pop	{r4, pc}
20002ece:	46c0      	nop			; (mov r8, r8)

20002ed0 <__aeabi_dcmpge>:
20002ed0:	b510      	push	{r4, lr}
20002ed2:	f000 f861 	bl	20002f98 <__gedf2>
20002ed6:	2800      	cmp	r0, #0
20002ed8:	da01      	bge.n	20002ede <__aeabi_dcmpge+0xe>
20002eda:	2000      	movs	r0, #0
20002edc:	bd10      	pop	{r4, pc}
20002ede:	2001      	movs	r0, #1
20002ee0:	bd10      	pop	{r4, pc}
20002ee2:	46c0      	nop			; (mov r8, r8)

20002ee4 <__clzsi2>:
20002ee4:	211c      	movs	r1, #28
20002ee6:	2301      	movs	r3, #1
20002ee8:	041b      	lsls	r3, r3, #16
20002eea:	4298      	cmp	r0, r3
20002eec:	d301      	bcc.n	20002ef2 <__clzsi2+0xe>
20002eee:	0c00      	lsrs	r0, r0, #16
20002ef0:	3910      	subs	r1, #16
20002ef2:	0a1b      	lsrs	r3, r3, #8
20002ef4:	4298      	cmp	r0, r3
20002ef6:	d301      	bcc.n	20002efc <__clzsi2+0x18>
20002ef8:	0a00      	lsrs	r0, r0, #8
20002efa:	3908      	subs	r1, #8
20002efc:	091b      	lsrs	r3, r3, #4
20002efe:	4298      	cmp	r0, r3
20002f00:	d301      	bcc.n	20002f06 <__clzsi2+0x22>
20002f02:	0900      	lsrs	r0, r0, #4
20002f04:	3904      	subs	r1, #4
20002f06:	a202      	add	r2, pc, #8	; (adr r2, 20002f10 <__clzsi2+0x2c>)
20002f08:	5c10      	ldrb	r0, [r2, r0]
20002f0a:	1840      	adds	r0, r0, r1
20002f0c:	4770      	bx	lr
20002f0e:	46c0      	nop			; (mov r8, r8)
20002f10:	02020304 	andeq	r0, r2, #4, 6	; 0x10000000
20002f14:	01010101 	tsteq	r1, r1, lsl #2
	...

20002f20 <__eqdf2>:
20002f20:	b5f0      	push	{r4, r5, r6, r7, lr}
20002f22:	464f      	mov	r7, r9
20002f24:	4646      	mov	r6, r8
20002f26:	46d6      	mov	lr, sl
20002f28:	4684      	mov	ip, r0
20002f2a:	b5c0      	push	{r6, r7, lr}
20002f2c:	4680      	mov	r8, r0
20002f2e:	4e19      	ldr	r6, [pc, #100]	; (20002f94 <__eqdf2+0x74>)
20002f30:	0318      	lsls	r0, r3, #12
20002f32:	030f      	lsls	r7, r1, #12
20002f34:	004d      	lsls	r5, r1, #1
20002f36:	0b00      	lsrs	r0, r0, #12
20002f38:	005c      	lsls	r4, r3, #1
20002f3a:	4682      	mov	sl, r0
20002f3c:	0b3f      	lsrs	r7, r7, #12
20002f3e:	0d6d      	lsrs	r5, r5, #21
20002f40:	0fc9      	lsrs	r1, r1, #31
20002f42:	4691      	mov	r9, r2
20002f44:	0d64      	lsrs	r4, r4, #21
20002f46:	0fdb      	lsrs	r3, r3, #31
20002f48:	2001      	movs	r0, #1
20002f4a:	42b5      	cmp	r5, r6
20002f4c:	d00a      	beq.n	20002f64 <__eqdf2+0x44>
20002f4e:	42b4      	cmp	r4, r6
20002f50:	d003      	beq.n	20002f5a <__eqdf2+0x3a>
20002f52:	42a5      	cmp	r5, r4
20002f54:	d101      	bne.n	20002f5a <__eqdf2+0x3a>
20002f56:	4557      	cmp	r7, sl
20002f58:	d00c      	beq.n	20002f74 <__eqdf2+0x54>
20002f5a:	bc1c      	pop	{r2, r3, r4}
20002f5c:	4690      	mov	r8, r2
20002f5e:	4699      	mov	r9, r3
20002f60:	46a2      	mov	sl, r4
20002f62:	bdf0      	pop	{r4, r5, r6, r7, pc}
20002f64:	4666      	mov	r6, ip
20002f66:	433e      	orrs	r6, r7
20002f68:	d1f7      	bne.n	20002f5a <__eqdf2+0x3a>
20002f6a:	42ac      	cmp	r4, r5
20002f6c:	d1f5      	bne.n	20002f5a <__eqdf2+0x3a>
20002f6e:	4654      	mov	r4, sl
20002f70:	4314      	orrs	r4, r2
20002f72:	d1f2      	bne.n	20002f5a <__eqdf2+0x3a>
20002f74:	2001      	movs	r0, #1
20002f76:	45c8      	cmp	r8, r9
20002f78:	d1ef      	bne.n	20002f5a <__eqdf2+0x3a>
20002f7a:	4299      	cmp	r1, r3
20002f7c:	d007      	beq.n	20002f8e <__eqdf2+0x6e>
20002f7e:	2d00      	cmp	r5, #0
20002f80:	d1eb      	bne.n	20002f5a <__eqdf2+0x3a>
20002f82:	4663      	mov	r3, ip
20002f84:	431f      	orrs	r7, r3
20002f86:	0038      	movs	r0, r7
20002f88:	1e47      	subs	r7, r0, #1
20002f8a:	41b8      	sbcs	r0, r7
20002f8c:	e7e5      	b.n	20002f5a <__eqdf2+0x3a>
20002f8e:	2000      	movs	r0, #0
20002f90:	e7e3      	b.n	20002f5a <__eqdf2+0x3a>
20002f92:	46c0      	nop			; (mov r8, r8)
20002f94:	000007ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>

20002f98 <__gedf2>:
20002f98:	b5f0      	push	{r4, r5, r6, r7, lr}
20002f9a:	464f      	mov	r7, r9
20002f9c:	4646      	mov	r6, r8
20002f9e:	46d6      	mov	lr, sl
20002fa0:	004d      	lsls	r5, r1, #1
20002fa2:	b5c0      	push	{r6, r7, lr}
20002fa4:	030e      	lsls	r6, r1, #12
20002fa6:	0fc9      	lsrs	r1, r1, #31
20002fa8:	468a      	mov	sl, r1
20002faa:	492c      	ldr	r1, [pc, #176]	; (2000305c <__gedf2+0xc4>)
20002fac:	031f      	lsls	r7, r3, #12
20002fae:	005c      	lsls	r4, r3, #1
20002fb0:	4680      	mov	r8, r0
20002fb2:	0b36      	lsrs	r6, r6, #12
20002fb4:	0d6d      	lsrs	r5, r5, #21
20002fb6:	4691      	mov	r9, r2
20002fb8:	0b3f      	lsrs	r7, r7, #12
20002fba:	0d64      	lsrs	r4, r4, #21
20002fbc:	0fdb      	lsrs	r3, r3, #31
20002fbe:	428d      	cmp	r5, r1
20002fc0:	d01e      	beq.n	20003000 <__gedf2+0x68>
20002fc2:	428c      	cmp	r4, r1
20002fc4:	d016      	beq.n	20002ff4 <__gedf2+0x5c>
20002fc6:	2d00      	cmp	r5, #0
20002fc8:	d11e      	bne.n	20003008 <__gedf2+0x70>
20002fca:	4330      	orrs	r0, r6
20002fcc:	4684      	mov	ip, r0
20002fce:	2c00      	cmp	r4, #0
20002fd0:	d101      	bne.n	20002fd6 <__gedf2+0x3e>
20002fd2:	433a      	orrs	r2, r7
20002fd4:	d023      	beq.n	2000301e <__gedf2+0x86>
20002fd6:	4662      	mov	r2, ip
20002fd8:	2a00      	cmp	r2, #0
20002fda:	d01a      	beq.n	20003012 <__gedf2+0x7a>
20002fdc:	459a      	cmp	sl, r3
20002fde:	d029      	beq.n	20003034 <__gedf2+0x9c>
20002fe0:	4651      	mov	r1, sl
20002fe2:	2002      	movs	r0, #2
20002fe4:	3901      	subs	r1, #1
20002fe6:	4008      	ands	r0, r1
20002fe8:	3801      	subs	r0, #1
20002fea:	bc1c      	pop	{r2, r3, r4}
20002fec:	4690      	mov	r8, r2
20002fee:	4699      	mov	r9, r3
20002ff0:	46a2      	mov	sl, r4
20002ff2:	bdf0      	pop	{r4, r5, r6, r7, pc}
20002ff4:	0039      	movs	r1, r7
20002ff6:	4311      	orrs	r1, r2
20002ff8:	d0e5      	beq.n	20002fc6 <__gedf2+0x2e>
20002ffa:	2002      	movs	r0, #2
20002ffc:	4240      	negs	r0, r0
20002ffe:	e7f4      	b.n	20002fea <__gedf2+0x52>
20003000:	4330      	orrs	r0, r6
20003002:	d1fa      	bne.n	20002ffa <__gedf2+0x62>
20003004:	42ac      	cmp	r4, r5
20003006:	d00f      	beq.n	20003028 <__gedf2+0x90>
20003008:	2c00      	cmp	r4, #0
2000300a:	d10f      	bne.n	2000302c <__gedf2+0x94>
2000300c:	433a      	orrs	r2, r7
2000300e:	d0e7      	beq.n	20002fe0 <__gedf2+0x48>
20003010:	e00c      	b.n	2000302c <__gedf2+0x94>
20003012:	2201      	movs	r2, #1
20003014:	3b01      	subs	r3, #1
20003016:	4393      	bics	r3, r2
20003018:	0018      	movs	r0, r3
2000301a:	3001      	adds	r0, #1
2000301c:	e7e5      	b.n	20002fea <__gedf2+0x52>
2000301e:	4663      	mov	r3, ip
20003020:	2000      	movs	r0, #0
20003022:	2b00      	cmp	r3, #0
20003024:	d0e1      	beq.n	20002fea <__gedf2+0x52>
20003026:	e7db      	b.n	20002fe0 <__gedf2+0x48>
20003028:	433a      	orrs	r2, r7
2000302a:	d1e6      	bne.n	20002ffa <__gedf2+0x62>
2000302c:	459a      	cmp	sl, r3
2000302e:	d1d7      	bne.n	20002fe0 <__gedf2+0x48>
20003030:	42a5      	cmp	r5, r4
20003032:	dcd5      	bgt.n	20002fe0 <__gedf2+0x48>
20003034:	42a5      	cmp	r5, r4
20003036:	db05      	blt.n	20003044 <__gedf2+0xac>
20003038:	42be      	cmp	r6, r7
2000303a:	d8d1      	bhi.n	20002fe0 <__gedf2+0x48>
2000303c:	d008      	beq.n	20003050 <__gedf2+0xb8>
2000303e:	2000      	movs	r0, #0
20003040:	42be      	cmp	r6, r7
20003042:	d2d2      	bcs.n	20002fea <__gedf2+0x52>
20003044:	4650      	mov	r0, sl
20003046:	2301      	movs	r3, #1
20003048:	3801      	subs	r0, #1
2000304a:	4398      	bics	r0, r3
2000304c:	3001      	adds	r0, #1
2000304e:	e7cc      	b.n	20002fea <__gedf2+0x52>
20003050:	45c8      	cmp	r8, r9
20003052:	d8c5      	bhi.n	20002fe0 <__gedf2+0x48>
20003054:	2000      	movs	r0, #0
20003056:	45c8      	cmp	r8, r9
20003058:	d3f4      	bcc.n	20003044 <__gedf2+0xac>
2000305a:	e7c6      	b.n	20002fea <__gedf2+0x52>
2000305c:	000007ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>

20003060 <__ledf2>:
20003060:	b5f0      	push	{r4, r5, r6, r7, lr}
20003062:	464f      	mov	r7, r9
20003064:	4646      	mov	r6, r8
20003066:	46d6      	mov	lr, sl
20003068:	004d      	lsls	r5, r1, #1
2000306a:	b5c0      	push	{r6, r7, lr}
2000306c:	030e      	lsls	r6, r1, #12
2000306e:	0fc9      	lsrs	r1, r1, #31
20003070:	468a      	mov	sl, r1
20003072:	492e      	ldr	r1, [pc, #184]	; (2000312c <__ledf2+0xcc>)
20003074:	031f      	lsls	r7, r3, #12
20003076:	005c      	lsls	r4, r3, #1
20003078:	4680      	mov	r8, r0
2000307a:	0b36      	lsrs	r6, r6, #12
2000307c:	0d6d      	lsrs	r5, r5, #21
2000307e:	4691      	mov	r9, r2
20003080:	0b3f      	lsrs	r7, r7, #12
20003082:	0d64      	lsrs	r4, r4, #21
20003084:	0fdb      	lsrs	r3, r3, #31
20003086:	428d      	cmp	r5, r1
20003088:	d018      	beq.n	200030bc <__ledf2+0x5c>
2000308a:	428c      	cmp	r4, r1
2000308c:	d011      	beq.n	200030b2 <__ledf2+0x52>
2000308e:	2d00      	cmp	r5, #0
20003090:	d118      	bne.n	200030c4 <__ledf2+0x64>
20003092:	4330      	orrs	r0, r6
20003094:	4684      	mov	ip, r0
20003096:	2c00      	cmp	r4, #0
20003098:	d11e      	bne.n	200030d8 <__ledf2+0x78>
2000309a:	433a      	orrs	r2, r7
2000309c:	d11c      	bne.n	200030d8 <__ledf2+0x78>
2000309e:	4663      	mov	r3, ip
200030a0:	2000      	movs	r0, #0
200030a2:	2b00      	cmp	r3, #0
200030a4:	d030      	beq.n	20003108 <__ledf2+0xa8>
200030a6:	4651      	mov	r1, sl
200030a8:	2002      	movs	r0, #2
200030aa:	3901      	subs	r1, #1
200030ac:	4008      	ands	r0, r1
200030ae:	3801      	subs	r0, #1
200030b0:	e02a      	b.n	20003108 <__ledf2+0xa8>
200030b2:	0039      	movs	r1, r7
200030b4:	4311      	orrs	r1, r2
200030b6:	d0ea      	beq.n	2000308e <__ledf2+0x2e>
200030b8:	2002      	movs	r0, #2
200030ba:	e025      	b.n	20003108 <__ledf2+0xa8>
200030bc:	4330      	orrs	r0, r6
200030be:	d1fb      	bne.n	200030b8 <__ledf2+0x58>
200030c0:	42ac      	cmp	r4, r5
200030c2:	d026      	beq.n	20003112 <__ledf2+0xb2>
200030c4:	2c00      	cmp	r4, #0
200030c6:	d126      	bne.n	20003116 <__ledf2+0xb6>
200030c8:	433a      	orrs	r2, r7
200030ca:	d124      	bne.n	20003116 <__ledf2+0xb6>
200030cc:	4651      	mov	r1, sl
200030ce:	2002      	movs	r0, #2
200030d0:	3901      	subs	r1, #1
200030d2:	4008      	ands	r0, r1
200030d4:	3801      	subs	r0, #1
200030d6:	e017      	b.n	20003108 <__ledf2+0xa8>
200030d8:	4662      	mov	r2, ip
200030da:	2a00      	cmp	r2, #0
200030dc:	d00f      	beq.n	200030fe <__ledf2+0x9e>
200030de:	459a      	cmp	sl, r3
200030e0:	d1e1      	bne.n	200030a6 <__ledf2+0x46>
200030e2:	42a5      	cmp	r5, r4
200030e4:	db05      	blt.n	200030f2 <__ledf2+0x92>
200030e6:	42be      	cmp	r6, r7
200030e8:	d8dd      	bhi.n	200030a6 <__ledf2+0x46>
200030ea:	d019      	beq.n	20003120 <__ledf2+0xc0>
200030ec:	2000      	movs	r0, #0
200030ee:	42be      	cmp	r6, r7
200030f0:	d20a      	bcs.n	20003108 <__ledf2+0xa8>
200030f2:	4650      	mov	r0, sl
200030f4:	2301      	movs	r3, #1
200030f6:	3801      	subs	r0, #1
200030f8:	4398      	bics	r0, r3
200030fa:	3001      	adds	r0, #1
200030fc:	e004      	b.n	20003108 <__ledf2+0xa8>
200030fe:	2201      	movs	r2, #1
20003100:	3b01      	subs	r3, #1
20003102:	4393      	bics	r3, r2
20003104:	0018      	movs	r0, r3
20003106:	3001      	adds	r0, #1
20003108:	bc1c      	pop	{r2, r3, r4}
2000310a:	4690      	mov	r8, r2
2000310c:	4699      	mov	r9, r3
2000310e:	46a2      	mov	sl, r4
20003110:	bdf0      	pop	{r4, r5, r6, r7, pc}
20003112:	433a      	orrs	r2, r7
20003114:	d1d0      	bne.n	200030b8 <__ledf2+0x58>
20003116:	459a      	cmp	sl, r3
20003118:	d1c5      	bne.n	200030a6 <__ledf2+0x46>
2000311a:	42a5      	cmp	r5, r4
2000311c:	dcc3      	bgt.n	200030a6 <__ledf2+0x46>
2000311e:	e7e0      	b.n	200030e2 <__ledf2+0x82>
20003120:	45c8      	cmp	r8, r9
20003122:	d8c0      	bhi.n	200030a6 <__ledf2+0x46>
20003124:	2000      	movs	r0, #0
20003126:	45c8      	cmp	r8, r9
20003128:	d3e3      	bcc.n	200030f2 <__ledf2+0x92>
2000312a:	e7ed      	b.n	20003108 <__ledf2+0xa8>
2000312c:	000007ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>

20003130 <__aeabi_dadd>:
20003130:	b5f0      	push	{r4, r5, r6, r7, lr}
20003132:	464f      	mov	r7, r9
20003134:	4646      	mov	r6, r8
20003136:	46d6      	mov	lr, sl
20003138:	000c      	movs	r4, r1
2000313a:	0309      	lsls	r1, r1, #12
2000313c:	b5c0      	push	{r6, r7, lr}
2000313e:	0a49      	lsrs	r1, r1, #9
20003140:	0f47      	lsrs	r7, r0, #29
20003142:	005e      	lsls	r6, r3, #1
20003144:	4339      	orrs	r1, r7
20003146:	031f      	lsls	r7, r3, #12
20003148:	0fdb      	lsrs	r3, r3, #31
2000314a:	469c      	mov	ip, r3
2000314c:	0065      	lsls	r5, r4, #1
2000314e:	0a7b      	lsrs	r3, r7, #9
20003150:	0f57      	lsrs	r7, r2, #29
20003152:	431f      	orrs	r7, r3
20003154:	0d6d      	lsrs	r5, r5, #21
20003156:	0fe4      	lsrs	r4, r4, #31
20003158:	0d76      	lsrs	r6, r6, #21
2000315a:	46a1      	mov	r9, r4
2000315c:	00c0      	lsls	r0, r0, #3
2000315e:	46b8      	mov	r8, r7
20003160:	00d2      	lsls	r2, r2, #3
20003162:	1bab      	subs	r3, r5, r6
20003164:	4564      	cmp	r4, ip
20003166:	d07b      	beq.n	20003260 <__aeabi_dadd+0x130>
20003168:	2b00      	cmp	r3, #0
2000316a:	dd5f      	ble.n	2000322c <__aeabi_dadd+0xfc>
2000316c:	2e00      	cmp	r6, #0
2000316e:	d000      	beq.n	20003172 <__aeabi_dadd+0x42>
20003170:	e0a4      	b.n	200032bc <__aeabi_dadd+0x18c>
20003172:	003e      	movs	r6, r7
20003174:	4316      	orrs	r6, r2
20003176:	d100      	bne.n	2000317a <__aeabi_dadd+0x4a>
20003178:	e112      	b.n	200033a0 <__aeabi_dadd+0x270>
2000317a:	1e5e      	subs	r6, r3, #1
2000317c:	2e00      	cmp	r6, #0
2000317e:	d000      	beq.n	20003182 <__aeabi_dadd+0x52>
20003180:	e19e      	b.n	200034c0 <__aeabi_dadd+0x390>
20003182:	1a87      	subs	r7, r0, r2
20003184:	4643      	mov	r3, r8
20003186:	42b8      	cmp	r0, r7
20003188:	4180      	sbcs	r0, r0
2000318a:	2501      	movs	r5, #1
2000318c:	1ac9      	subs	r1, r1, r3
2000318e:	4240      	negs	r0, r0
20003190:	1a09      	subs	r1, r1, r0
20003192:	020b      	lsls	r3, r1, #8
20003194:	d400      	bmi.n	20003198 <__aeabi_dadd+0x68>
20003196:	e131      	b.n	200033fc <__aeabi_dadd+0x2cc>
20003198:	0249      	lsls	r1, r1, #9
2000319a:	0a4e      	lsrs	r6, r1, #9
2000319c:	2e00      	cmp	r6, #0
2000319e:	d100      	bne.n	200031a2 <__aeabi_dadd+0x72>
200031a0:	e16e      	b.n	20003480 <__aeabi_dadd+0x350>
200031a2:	0030      	movs	r0, r6
200031a4:	f7ff fe9e 	bl	20002ee4 <__clzsi2>
200031a8:	0003      	movs	r3, r0
200031aa:	3b08      	subs	r3, #8
200031ac:	2b1f      	cmp	r3, #31
200031ae:	dd00      	ble.n	200031b2 <__aeabi_dadd+0x82>
200031b0:	e161      	b.n	20003476 <__aeabi_dadd+0x346>
200031b2:	2220      	movs	r2, #32
200031b4:	0039      	movs	r1, r7
200031b6:	1ad2      	subs	r2, r2, r3
200031b8:	409e      	lsls	r6, r3
200031ba:	40d1      	lsrs	r1, r2
200031bc:	409f      	lsls	r7, r3
200031be:	430e      	orrs	r6, r1
200031c0:	429d      	cmp	r5, r3
200031c2:	dd00      	ble.n	200031c6 <__aeabi_dadd+0x96>
200031c4:	e151      	b.n	2000346a <__aeabi_dadd+0x33a>
200031c6:	1b5d      	subs	r5, r3, r5
200031c8:	1c6b      	adds	r3, r5, #1
200031ca:	2b1f      	cmp	r3, #31
200031cc:	dd00      	ble.n	200031d0 <__aeabi_dadd+0xa0>
200031ce:	e17c      	b.n	200034ca <__aeabi_dadd+0x39a>
200031d0:	2120      	movs	r1, #32
200031d2:	1ac9      	subs	r1, r1, r3
200031d4:	003d      	movs	r5, r7
200031d6:	0030      	movs	r0, r6
200031d8:	408f      	lsls	r7, r1
200031da:	4088      	lsls	r0, r1
200031dc:	40dd      	lsrs	r5, r3
200031de:	1e79      	subs	r1, r7, #1
200031e0:	418f      	sbcs	r7, r1
200031e2:	0031      	movs	r1, r6
200031e4:	2207      	movs	r2, #7
200031e6:	4328      	orrs	r0, r5
200031e8:	40d9      	lsrs	r1, r3
200031ea:	2500      	movs	r5, #0
200031ec:	4307      	orrs	r7, r0
200031ee:	403a      	ands	r2, r7
200031f0:	2a00      	cmp	r2, #0
200031f2:	d009      	beq.n	20003208 <__aeabi_dadd+0xd8>
200031f4:	230f      	movs	r3, #15
200031f6:	403b      	ands	r3, r7
200031f8:	2b04      	cmp	r3, #4
200031fa:	d005      	beq.n	20003208 <__aeabi_dadd+0xd8>
200031fc:	1d3b      	adds	r3, r7, #4
200031fe:	42bb      	cmp	r3, r7
20003200:	41bf      	sbcs	r7, r7
20003202:	427f      	negs	r7, r7
20003204:	19c9      	adds	r1, r1, r7
20003206:	001f      	movs	r7, r3
20003208:	020b      	lsls	r3, r1, #8
2000320a:	d400      	bmi.n	2000320e <__aeabi_dadd+0xde>
2000320c:	e226      	b.n	2000365c <__aeabi_dadd+0x52c>
2000320e:	1c6a      	adds	r2, r5, #1
20003210:	4bc6      	ldr	r3, [pc, #792]	; (2000352c <__aeabi_dadd+0x3fc>)
20003212:	0555      	lsls	r5, r2, #21
20003214:	0d6d      	lsrs	r5, r5, #21
20003216:	429a      	cmp	r2, r3
20003218:	d100      	bne.n	2000321c <__aeabi_dadd+0xec>
2000321a:	e106      	b.n	2000342a <__aeabi_dadd+0x2fa>
2000321c:	4ac4      	ldr	r2, [pc, #784]	; (20003530 <__aeabi_dadd+0x400>)
2000321e:	08ff      	lsrs	r7, r7, #3
20003220:	400a      	ands	r2, r1
20003222:	0753      	lsls	r3, r2, #29
20003224:	0252      	lsls	r2, r2, #9
20003226:	433b      	orrs	r3, r7
20003228:	0b12      	lsrs	r2, r2, #12
2000322a:	e08e      	b.n	2000334a <__aeabi_dadd+0x21a>
2000322c:	2b00      	cmp	r3, #0
2000322e:	d000      	beq.n	20003232 <__aeabi_dadd+0x102>
20003230:	e0b8      	b.n	200033a4 <__aeabi_dadd+0x274>
20003232:	1c6b      	adds	r3, r5, #1
20003234:	055b      	lsls	r3, r3, #21
20003236:	0d5b      	lsrs	r3, r3, #21
20003238:	2b01      	cmp	r3, #1
2000323a:	dc00      	bgt.n	2000323e <__aeabi_dadd+0x10e>
2000323c:	e130      	b.n	200034a0 <__aeabi_dadd+0x370>
2000323e:	1a87      	subs	r7, r0, r2
20003240:	4643      	mov	r3, r8
20003242:	42b8      	cmp	r0, r7
20003244:	41b6      	sbcs	r6, r6
20003246:	1acb      	subs	r3, r1, r3
20003248:	4276      	negs	r6, r6
2000324a:	1b9e      	subs	r6, r3, r6
2000324c:	0233      	lsls	r3, r6, #8
2000324e:	d500      	bpl.n	20003252 <__aeabi_dadd+0x122>
20003250:	e14c      	b.n	200034ec <__aeabi_dadd+0x3bc>
20003252:	003b      	movs	r3, r7
20003254:	4333      	orrs	r3, r6
20003256:	d1a1      	bne.n	2000319c <__aeabi_dadd+0x6c>
20003258:	2200      	movs	r2, #0
2000325a:	2400      	movs	r4, #0
2000325c:	2500      	movs	r5, #0
2000325e:	e070      	b.n	20003342 <__aeabi_dadd+0x212>
20003260:	2b00      	cmp	r3, #0
20003262:	dc00      	bgt.n	20003266 <__aeabi_dadd+0x136>
20003264:	e0e5      	b.n	20003432 <__aeabi_dadd+0x302>
20003266:	2e00      	cmp	r6, #0
20003268:	d100      	bne.n	2000326c <__aeabi_dadd+0x13c>
2000326a:	e083      	b.n	20003374 <__aeabi_dadd+0x244>
2000326c:	4eaf      	ldr	r6, [pc, #700]	; (2000352c <__aeabi_dadd+0x3fc>)
2000326e:	42b5      	cmp	r5, r6
20003270:	d060      	beq.n	20003334 <__aeabi_dadd+0x204>
20003272:	2680      	movs	r6, #128	; 0x80
20003274:	0436      	lsls	r6, r6, #16
20003276:	4337      	orrs	r7, r6
20003278:	46b8      	mov	r8, r7
2000327a:	2b38      	cmp	r3, #56	; 0x38
2000327c:	dc00      	bgt.n	20003280 <__aeabi_dadd+0x150>
2000327e:	e13e      	b.n	200034fe <__aeabi_dadd+0x3ce>
20003280:	4643      	mov	r3, r8
20003282:	4313      	orrs	r3, r2
20003284:	001f      	movs	r7, r3
20003286:	1e7a      	subs	r2, r7, #1
20003288:	4197      	sbcs	r7, r2
2000328a:	183f      	adds	r7, r7, r0
2000328c:	4287      	cmp	r7, r0
2000328e:	4180      	sbcs	r0, r0
20003290:	4240      	negs	r0, r0
20003292:	1809      	adds	r1, r1, r0
20003294:	020b      	lsls	r3, r1, #8
20003296:	d400      	bmi.n	2000329a <__aeabi_dadd+0x16a>
20003298:	e0b0      	b.n	200033fc <__aeabi_dadd+0x2cc>
2000329a:	4ba4      	ldr	r3, [pc, #656]	; (2000352c <__aeabi_dadd+0x3fc>)
2000329c:	3501      	adds	r5, #1
2000329e:	429d      	cmp	r5, r3
200032a0:	d100      	bne.n	200032a4 <__aeabi_dadd+0x174>
200032a2:	e0c3      	b.n	2000342c <__aeabi_dadd+0x2fc>
200032a4:	4aa2      	ldr	r2, [pc, #648]	; (20003530 <__aeabi_dadd+0x400>)
200032a6:	087b      	lsrs	r3, r7, #1
200032a8:	400a      	ands	r2, r1
200032aa:	2101      	movs	r1, #1
200032ac:	400f      	ands	r7, r1
200032ae:	431f      	orrs	r7, r3
200032b0:	0851      	lsrs	r1, r2, #1
200032b2:	07d3      	lsls	r3, r2, #31
200032b4:	2207      	movs	r2, #7
200032b6:	431f      	orrs	r7, r3
200032b8:	403a      	ands	r2, r7
200032ba:	e799      	b.n	200031f0 <__aeabi_dadd+0xc0>
200032bc:	4e9b      	ldr	r6, [pc, #620]	; (2000352c <__aeabi_dadd+0x3fc>)
200032be:	42b5      	cmp	r5, r6
200032c0:	d038      	beq.n	20003334 <__aeabi_dadd+0x204>
200032c2:	2680      	movs	r6, #128	; 0x80
200032c4:	0436      	lsls	r6, r6, #16
200032c6:	4337      	orrs	r7, r6
200032c8:	46b8      	mov	r8, r7
200032ca:	2b38      	cmp	r3, #56	; 0x38
200032cc:	dd00      	ble.n	200032d0 <__aeabi_dadd+0x1a0>
200032ce:	e0dc      	b.n	2000348a <__aeabi_dadd+0x35a>
200032d0:	2b1f      	cmp	r3, #31
200032d2:	dc00      	bgt.n	200032d6 <__aeabi_dadd+0x1a6>
200032d4:	e130      	b.n	20003538 <__aeabi_dadd+0x408>
200032d6:	001e      	movs	r6, r3
200032d8:	4647      	mov	r7, r8
200032da:	3e20      	subs	r6, #32
200032dc:	40f7      	lsrs	r7, r6
200032de:	46bc      	mov	ip, r7
200032e0:	2b20      	cmp	r3, #32
200032e2:	d004      	beq.n	200032ee <__aeabi_dadd+0x1be>
200032e4:	2640      	movs	r6, #64	; 0x40
200032e6:	1af3      	subs	r3, r6, r3
200032e8:	4646      	mov	r6, r8
200032ea:	409e      	lsls	r6, r3
200032ec:	4332      	orrs	r2, r6
200032ee:	0017      	movs	r7, r2
200032f0:	4663      	mov	r3, ip
200032f2:	1e7a      	subs	r2, r7, #1
200032f4:	4197      	sbcs	r7, r2
200032f6:	431f      	orrs	r7, r3
200032f8:	e0cc      	b.n	20003494 <__aeabi_dadd+0x364>
200032fa:	2b00      	cmp	r3, #0
200032fc:	d100      	bne.n	20003300 <__aeabi_dadd+0x1d0>
200032fe:	e204      	b.n	2000370a <__aeabi_dadd+0x5da>
20003300:	4643      	mov	r3, r8
20003302:	4313      	orrs	r3, r2
20003304:	d100      	bne.n	20003308 <__aeabi_dadd+0x1d8>
20003306:	e159      	b.n	200035bc <__aeabi_dadd+0x48c>
20003308:	074b      	lsls	r3, r1, #29
2000330a:	08c0      	lsrs	r0, r0, #3
2000330c:	4318      	orrs	r0, r3
2000330e:	2380      	movs	r3, #128	; 0x80
20003310:	08c9      	lsrs	r1, r1, #3
20003312:	031b      	lsls	r3, r3, #12
20003314:	4219      	tst	r1, r3
20003316:	d008      	beq.n	2000332a <__aeabi_dadd+0x1fa>
20003318:	4645      	mov	r5, r8
2000331a:	08ed      	lsrs	r5, r5, #3
2000331c:	421d      	tst	r5, r3
2000331e:	d104      	bne.n	2000332a <__aeabi_dadd+0x1fa>
20003320:	4643      	mov	r3, r8
20003322:	08d0      	lsrs	r0, r2, #3
20003324:	0759      	lsls	r1, r3, #29
20003326:	4308      	orrs	r0, r1
20003328:	0029      	movs	r1, r5
2000332a:	0f42      	lsrs	r2, r0, #29
2000332c:	00c9      	lsls	r1, r1, #3
2000332e:	4d7f      	ldr	r5, [pc, #508]	; (2000352c <__aeabi_dadd+0x3fc>)
20003330:	4311      	orrs	r1, r2
20003332:	00c0      	lsls	r0, r0, #3
20003334:	074b      	lsls	r3, r1, #29
20003336:	08ca      	lsrs	r2, r1, #3
20003338:	497c      	ldr	r1, [pc, #496]	; (2000352c <__aeabi_dadd+0x3fc>)
2000333a:	08c0      	lsrs	r0, r0, #3
2000333c:	4303      	orrs	r3, r0
2000333e:	428d      	cmp	r5, r1
20003340:	d068      	beq.n	20003414 <__aeabi_dadd+0x2e4>
20003342:	0312      	lsls	r2, r2, #12
20003344:	056d      	lsls	r5, r5, #21
20003346:	0b12      	lsrs	r2, r2, #12
20003348:	0d6d      	lsrs	r5, r5, #21
2000334a:	2100      	movs	r1, #0
2000334c:	0312      	lsls	r2, r2, #12
2000334e:	0018      	movs	r0, r3
20003350:	0b13      	lsrs	r3, r2, #12
20003352:	0d0a      	lsrs	r2, r1, #20
20003354:	0512      	lsls	r2, r2, #20
20003356:	431a      	orrs	r2, r3
20003358:	4b76      	ldr	r3, [pc, #472]	; (20003534 <__aeabi_dadd+0x404>)
2000335a:	052d      	lsls	r5, r5, #20
2000335c:	4013      	ands	r3, r2
2000335e:	432b      	orrs	r3, r5
20003360:	005b      	lsls	r3, r3, #1
20003362:	07e4      	lsls	r4, r4, #31
20003364:	085b      	lsrs	r3, r3, #1
20003366:	4323      	orrs	r3, r4
20003368:	0019      	movs	r1, r3
2000336a:	bc1c      	pop	{r2, r3, r4}
2000336c:	4690      	mov	r8, r2
2000336e:	4699      	mov	r9, r3
20003370:	46a2      	mov	sl, r4
20003372:	bdf0      	pop	{r4, r5, r6, r7, pc}
20003374:	003e      	movs	r6, r7
20003376:	4316      	orrs	r6, r2
20003378:	d012      	beq.n	200033a0 <__aeabi_dadd+0x270>
2000337a:	1e5e      	subs	r6, r3, #1
2000337c:	2e00      	cmp	r6, #0
2000337e:	d000      	beq.n	20003382 <__aeabi_dadd+0x252>
20003380:	e100      	b.n	20003584 <__aeabi_dadd+0x454>
20003382:	1887      	adds	r7, r0, r2
20003384:	4287      	cmp	r7, r0
20003386:	4180      	sbcs	r0, r0
20003388:	4441      	add	r1, r8
2000338a:	4240      	negs	r0, r0
2000338c:	1809      	adds	r1, r1, r0
2000338e:	2501      	movs	r5, #1
20003390:	020b      	lsls	r3, r1, #8
20003392:	d533      	bpl.n	200033fc <__aeabi_dadd+0x2cc>
20003394:	2502      	movs	r5, #2
20003396:	e785      	b.n	200032a4 <__aeabi_dadd+0x174>
20003398:	4664      	mov	r4, ip
2000339a:	0033      	movs	r3, r6
2000339c:	4641      	mov	r1, r8
2000339e:	0010      	movs	r0, r2
200033a0:	001d      	movs	r5, r3
200033a2:	e7c7      	b.n	20003334 <__aeabi_dadd+0x204>
200033a4:	2d00      	cmp	r5, #0
200033a6:	d000      	beq.n	200033aa <__aeabi_dadd+0x27a>
200033a8:	e0da      	b.n	20003560 <__aeabi_dadd+0x430>
200033aa:	000c      	movs	r4, r1
200033ac:	4304      	orrs	r4, r0
200033ae:	d0f3      	beq.n	20003398 <__aeabi_dadd+0x268>
200033b0:	1c5c      	adds	r4, r3, #1
200033b2:	d100      	bne.n	200033b6 <__aeabi_dadd+0x286>
200033b4:	e19f      	b.n	200036f6 <__aeabi_dadd+0x5c6>
200033b6:	4c5d      	ldr	r4, [pc, #372]	; (2000352c <__aeabi_dadd+0x3fc>)
200033b8:	42a6      	cmp	r6, r4
200033ba:	d100      	bne.n	200033be <__aeabi_dadd+0x28e>
200033bc:	e12f      	b.n	2000361e <__aeabi_dadd+0x4ee>
200033be:	43db      	mvns	r3, r3
200033c0:	2b38      	cmp	r3, #56	; 0x38
200033c2:	dd00      	ble.n	200033c6 <__aeabi_dadd+0x296>
200033c4:	e166      	b.n	20003694 <__aeabi_dadd+0x564>
200033c6:	2b1f      	cmp	r3, #31
200033c8:	dd00      	ble.n	200033cc <__aeabi_dadd+0x29c>
200033ca:	e183      	b.n	200036d4 <__aeabi_dadd+0x5a4>
200033cc:	2420      	movs	r4, #32
200033ce:	0005      	movs	r5, r0
200033d0:	1ae4      	subs	r4, r4, r3
200033d2:	000f      	movs	r7, r1
200033d4:	40dd      	lsrs	r5, r3
200033d6:	40d9      	lsrs	r1, r3
200033d8:	40a0      	lsls	r0, r4
200033da:	4643      	mov	r3, r8
200033dc:	40a7      	lsls	r7, r4
200033de:	1a5b      	subs	r3, r3, r1
200033e0:	1e44      	subs	r4, r0, #1
200033e2:	41a0      	sbcs	r0, r4
200033e4:	4698      	mov	r8, r3
200033e6:	432f      	orrs	r7, r5
200033e8:	4338      	orrs	r0, r7
200033ea:	1a17      	subs	r7, r2, r0
200033ec:	42ba      	cmp	r2, r7
200033ee:	4192      	sbcs	r2, r2
200033f0:	4643      	mov	r3, r8
200033f2:	4252      	negs	r2, r2
200033f4:	1a99      	subs	r1, r3, r2
200033f6:	4664      	mov	r4, ip
200033f8:	0035      	movs	r5, r6
200033fa:	e6ca      	b.n	20003192 <__aeabi_dadd+0x62>
200033fc:	2207      	movs	r2, #7
200033fe:	403a      	ands	r2, r7
20003400:	2a00      	cmp	r2, #0
20003402:	d000      	beq.n	20003406 <__aeabi_dadd+0x2d6>
20003404:	e6f6      	b.n	200031f4 <__aeabi_dadd+0xc4>
20003406:	074b      	lsls	r3, r1, #29
20003408:	08ca      	lsrs	r2, r1, #3
2000340a:	4948      	ldr	r1, [pc, #288]	; (2000352c <__aeabi_dadd+0x3fc>)
2000340c:	08ff      	lsrs	r7, r7, #3
2000340e:	433b      	orrs	r3, r7
20003410:	428d      	cmp	r5, r1
20003412:	d196      	bne.n	20003342 <__aeabi_dadd+0x212>
20003414:	0019      	movs	r1, r3
20003416:	4311      	orrs	r1, r2
20003418:	d100      	bne.n	2000341c <__aeabi_dadd+0x2ec>
2000341a:	e19e      	b.n	2000375a <__aeabi_dadd+0x62a>
2000341c:	2180      	movs	r1, #128	; 0x80
2000341e:	0309      	lsls	r1, r1, #12
20003420:	430a      	orrs	r2, r1
20003422:	0312      	lsls	r2, r2, #12
20003424:	0b12      	lsrs	r2, r2, #12
20003426:	4d41      	ldr	r5, [pc, #260]	; (2000352c <__aeabi_dadd+0x3fc>)
20003428:	e78f      	b.n	2000334a <__aeabi_dadd+0x21a>
2000342a:	0015      	movs	r5, r2
2000342c:	2200      	movs	r2, #0
2000342e:	2300      	movs	r3, #0
20003430:	e78b      	b.n	2000334a <__aeabi_dadd+0x21a>
20003432:	2b00      	cmp	r3, #0
20003434:	d000      	beq.n	20003438 <__aeabi_dadd+0x308>
20003436:	e0c7      	b.n	200035c8 <__aeabi_dadd+0x498>
20003438:	1c6b      	adds	r3, r5, #1
2000343a:	055f      	lsls	r7, r3, #21
2000343c:	0d7f      	lsrs	r7, r7, #21
2000343e:	2f01      	cmp	r7, #1
20003440:	dc00      	bgt.n	20003444 <__aeabi_dadd+0x314>
20003442:	e0f1      	b.n	20003628 <__aeabi_dadd+0x4f8>
20003444:	4d39      	ldr	r5, [pc, #228]	; (2000352c <__aeabi_dadd+0x3fc>)
20003446:	42ab      	cmp	r3, r5
20003448:	d100      	bne.n	2000344c <__aeabi_dadd+0x31c>
2000344a:	e0b9      	b.n	200035c0 <__aeabi_dadd+0x490>
2000344c:	1885      	adds	r5, r0, r2
2000344e:	000a      	movs	r2, r1
20003450:	4285      	cmp	r5, r0
20003452:	4189      	sbcs	r1, r1
20003454:	4442      	add	r2, r8
20003456:	4249      	negs	r1, r1
20003458:	1851      	adds	r1, r2, r1
2000345a:	2207      	movs	r2, #7
2000345c:	07cf      	lsls	r7, r1, #31
2000345e:	086d      	lsrs	r5, r5, #1
20003460:	432f      	orrs	r7, r5
20003462:	0849      	lsrs	r1, r1, #1
20003464:	403a      	ands	r2, r7
20003466:	001d      	movs	r5, r3
20003468:	e6c2      	b.n	200031f0 <__aeabi_dadd+0xc0>
2000346a:	2207      	movs	r2, #7
2000346c:	4930      	ldr	r1, [pc, #192]	; (20003530 <__aeabi_dadd+0x400>)
2000346e:	1aed      	subs	r5, r5, r3
20003470:	4031      	ands	r1, r6
20003472:	403a      	ands	r2, r7
20003474:	e6bc      	b.n	200031f0 <__aeabi_dadd+0xc0>
20003476:	003e      	movs	r6, r7
20003478:	3828      	subs	r0, #40	; 0x28
2000347a:	4086      	lsls	r6, r0
2000347c:	2700      	movs	r7, #0
2000347e:	e69f      	b.n	200031c0 <__aeabi_dadd+0x90>
20003480:	0038      	movs	r0, r7
20003482:	f7ff fd2f 	bl	20002ee4 <__clzsi2>
20003486:	3020      	adds	r0, #32
20003488:	e68e      	b.n	200031a8 <__aeabi_dadd+0x78>
2000348a:	4643      	mov	r3, r8
2000348c:	4313      	orrs	r3, r2
2000348e:	001f      	movs	r7, r3
20003490:	1e7a      	subs	r2, r7, #1
20003492:	4197      	sbcs	r7, r2
20003494:	1bc7      	subs	r7, r0, r7
20003496:	42b8      	cmp	r0, r7
20003498:	4180      	sbcs	r0, r0
2000349a:	4240      	negs	r0, r0
2000349c:	1a09      	subs	r1, r1, r0
2000349e:	e678      	b.n	20003192 <__aeabi_dadd+0x62>
200034a0:	000e      	movs	r6, r1
200034a2:	003b      	movs	r3, r7
200034a4:	4306      	orrs	r6, r0
200034a6:	4313      	orrs	r3, r2
200034a8:	2d00      	cmp	r5, #0
200034aa:	d161      	bne.n	20003570 <__aeabi_dadd+0x440>
200034ac:	2e00      	cmp	r6, #0
200034ae:	d000      	beq.n	200034b2 <__aeabi_dadd+0x382>
200034b0:	e0f4      	b.n	2000369c <__aeabi_dadd+0x56c>
200034b2:	2b00      	cmp	r3, #0
200034b4:	d100      	bne.n	200034b8 <__aeabi_dadd+0x388>
200034b6:	e11b      	b.n	200036f0 <__aeabi_dadd+0x5c0>
200034b8:	4664      	mov	r4, ip
200034ba:	0039      	movs	r1, r7
200034bc:	0010      	movs	r0, r2
200034be:	e739      	b.n	20003334 <__aeabi_dadd+0x204>
200034c0:	4f1a      	ldr	r7, [pc, #104]	; (2000352c <__aeabi_dadd+0x3fc>)
200034c2:	42bb      	cmp	r3, r7
200034c4:	d07a      	beq.n	200035bc <__aeabi_dadd+0x48c>
200034c6:	0033      	movs	r3, r6
200034c8:	e6ff      	b.n	200032ca <__aeabi_dadd+0x19a>
200034ca:	0030      	movs	r0, r6
200034cc:	3d1f      	subs	r5, #31
200034ce:	40e8      	lsrs	r0, r5
200034d0:	2b20      	cmp	r3, #32
200034d2:	d003      	beq.n	200034dc <__aeabi_dadd+0x3ac>
200034d4:	2140      	movs	r1, #64	; 0x40
200034d6:	1acb      	subs	r3, r1, r3
200034d8:	409e      	lsls	r6, r3
200034da:	4337      	orrs	r7, r6
200034dc:	1e7b      	subs	r3, r7, #1
200034de:	419f      	sbcs	r7, r3
200034e0:	2207      	movs	r2, #7
200034e2:	4307      	orrs	r7, r0
200034e4:	403a      	ands	r2, r7
200034e6:	2100      	movs	r1, #0
200034e8:	2500      	movs	r5, #0
200034ea:	e789      	b.n	20003400 <__aeabi_dadd+0x2d0>
200034ec:	1a17      	subs	r7, r2, r0
200034ee:	4643      	mov	r3, r8
200034f0:	42ba      	cmp	r2, r7
200034f2:	41b6      	sbcs	r6, r6
200034f4:	1a59      	subs	r1, r3, r1
200034f6:	4276      	negs	r6, r6
200034f8:	1b8e      	subs	r6, r1, r6
200034fa:	4664      	mov	r4, ip
200034fc:	e64e      	b.n	2000319c <__aeabi_dadd+0x6c>
200034fe:	2b1f      	cmp	r3, #31
20003500:	dd00      	ble.n	20003504 <__aeabi_dadd+0x3d4>
20003502:	e0ad      	b.n	20003660 <__aeabi_dadd+0x530>
20003504:	2620      	movs	r6, #32
20003506:	4647      	mov	r7, r8
20003508:	1af6      	subs	r6, r6, r3
2000350a:	40b7      	lsls	r7, r6
2000350c:	46b9      	mov	r9, r7
2000350e:	0017      	movs	r7, r2
20003510:	46b2      	mov	sl, r6
20003512:	40df      	lsrs	r7, r3
20003514:	464e      	mov	r6, r9
20003516:	433e      	orrs	r6, r7
20003518:	0037      	movs	r7, r6
2000351a:	4656      	mov	r6, sl
2000351c:	40b2      	lsls	r2, r6
2000351e:	1e56      	subs	r6, r2, #1
20003520:	41b2      	sbcs	r2, r6
20003522:	4317      	orrs	r7, r2
20003524:	4642      	mov	r2, r8
20003526:	40da      	lsrs	r2, r3
20003528:	1889      	adds	r1, r1, r2
2000352a:	e6ae      	b.n	2000328a <__aeabi_dadd+0x15a>
2000352c:	000007ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
20003530:	ff7fffff 			; <UNDEFINED> instruction: 0xff7fffff
20003534:	800fffff 	strdhi	pc, [pc], -pc	; <UNPREDICTABLE>
20003538:	2620      	movs	r6, #32
2000353a:	4647      	mov	r7, r8
2000353c:	1af6      	subs	r6, r6, r3
2000353e:	40b7      	lsls	r7, r6
20003540:	46b9      	mov	r9, r7
20003542:	0017      	movs	r7, r2
20003544:	46b2      	mov	sl, r6
20003546:	40df      	lsrs	r7, r3
20003548:	464e      	mov	r6, r9
2000354a:	433e      	orrs	r6, r7
2000354c:	0037      	movs	r7, r6
2000354e:	4656      	mov	r6, sl
20003550:	40b2      	lsls	r2, r6
20003552:	1e56      	subs	r6, r2, #1
20003554:	41b2      	sbcs	r2, r6
20003556:	4317      	orrs	r7, r2
20003558:	4642      	mov	r2, r8
2000355a:	40da      	lsrs	r2, r3
2000355c:	1a89      	subs	r1, r1, r2
2000355e:	e799      	b.n	20003494 <__aeabi_dadd+0x364>
20003560:	4c7f      	ldr	r4, [pc, #508]	; (20003760 <__aeabi_dadd+0x630>)
20003562:	42a6      	cmp	r6, r4
20003564:	d05b      	beq.n	2000361e <__aeabi_dadd+0x4ee>
20003566:	2480      	movs	r4, #128	; 0x80
20003568:	0424      	lsls	r4, r4, #16
2000356a:	425b      	negs	r3, r3
2000356c:	4321      	orrs	r1, r4
2000356e:	e727      	b.n	200033c0 <__aeabi_dadd+0x290>
20003570:	2e00      	cmp	r6, #0
20003572:	d10c      	bne.n	2000358e <__aeabi_dadd+0x45e>
20003574:	2b00      	cmp	r3, #0
20003576:	d100      	bne.n	2000357a <__aeabi_dadd+0x44a>
20003578:	e0cb      	b.n	20003712 <__aeabi_dadd+0x5e2>
2000357a:	4664      	mov	r4, ip
2000357c:	0039      	movs	r1, r7
2000357e:	0010      	movs	r0, r2
20003580:	4d77      	ldr	r5, [pc, #476]	; (20003760 <__aeabi_dadd+0x630>)
20003582:	e6d7      	b.n	20003334 <__aeabi_dadd+0x204>
20003584:	4f76      	ldr	r7, [pc, #472]	; (20003760 <__aeabi_dadd+0x630>)
20003586:	42bb      	cmp	r3, r7
20003588:	d018      	beq.n	200035bc <__aeabi_dadd+0x48c>
2000358a:	0033      	movs	r3, r6
2000358c:	e675      	b.n	2000327a <__aeabi_dadd+0x14a>
2000358e:	2b00      	cmp	r3, #0
20003590:	d014      	beq.n	200035bc <__aeabi_dadd+0x48c>
20003592:	074b      	lsls	r3, r1, #29
20003594:	08c0      	lsrs	r0, r0, #3
20003596:	4318      	orrs	r0, r3
20003598:	2380      	movs	r3, #128	; 0x80
2000359a:	08c9      	lsrs	r1, r1, #3
2000359c:	031b      	lsls	r3, r3, #12
2000359e:	4219      	tst	r1, r3
200035a0:	d007      	beq.n	200035b2 <__aeabi_dadd+0x482>
200035a2:	08fc      	lsrs	r4, r7, #3
200035a4:	421c      	tst	r4, r3
200035a6:	d104      	bne.n	200035b2 <__aeabi_dadd+0x482>
200035a8:	0779      	lsls	r1, r7, #29
200035aa:	08d0      	lsrs	r0, r2, #3
200035ac:	4308      	orrs	r0, r1
200035ae:	46e1      	mov	r9, ip
200035b0:	0021      	movs	r1, r4
200035b2:	464c      	mov	r4, r9
200035b4:	0f42      	lsrs	r2, r0, #29
200035b6:	00c9      	lsls	r1, r1, #3
200035b8:	4311      	orrs	r1, r2
200035ba:	00c0      	lsls	r0, r0, #3
200035bc:	4d68      	ldr	r5, [pc, #416]	; (20003760 <__aeabi_dadd+0x630>)
200035be:	e6b9      	b.n	20003334 <__aeabi_dadd+0x204>
200035c0:	001d      	movs	r5, r3
200035c2:	2200      	movs	r2, #0
200035c4:	2300      	movs	r3, #0
200035c6:	e6c0      	b.n	2000334a <__aeabi_dadd+0x21a>
200035c8:	2d00      	cmp	r5, #0
200035ca:	d15b      	bne.n	20003684 <__aeabi_dadd+0x554>
200035cc:	000d      	movs	r5, r1
200035ce:	4305      	orrs	r5, r0
200035d0:	d100      	bne.n	200035d4 <__aeabi_dadd+0x4a4>
200035d2:	e6e2      	b.n	2000339a <__aeabi_dadd+0x26a>
200035d4:	1c5d      	adds	r5, r3, #1
200035d6:	d100      	bne.n	200035da <__aeabi_dadd+0x4aa>
200035d8:	e0b0      	b.n	2000373c <__aeabi_dadd+0x60c>
200035da:	4d61      	ldr	r5, [pc, #388]	; (20003760 <__aeabi_dadd+0x630>)
200035dc:	42ae      	cmp	r6, r5
200035de:	d01f      	beq.n	20003620 <__aeabi_dadd+0x4f0>
200035e0:	43db      	mvns	r3, r3
200035e2:	2b38      	cmp	r3, #56	; 0x38
200035e4:	dc71      	bgt.n	200036ca <__aeabi_dadd+0x59a>
200035e6:	2b1f      	cmp	r3, #31
200035e8:	dd00      	ble.n	200035ec <__aeabi_dadd+0x4bc>
200035ea:	e096      	b.n	2000371a <__aeabi_dadd+0x5ea>
200035ec:	2520      	movs	r5, #32
200035ee:	000f      	movs	r7, r1
200035f0:	1aed      	subs	r5, r5, r3
200035f2:	40af      	lsls	r7, r5
200035f4:	46b9      	mov	r9, r7
200035f6:	0007      	movs	r7, r0
200035f8:	46aa      	mov	sl, r5
200035fa:	40df      	lsrs	r7, r3
200035fc:	464d      	mov	r5, r9
200035fe:	433d      	orrs	r5, r7
20003600:	002f      	movs	r7, r5
20003602:	4655      	mov	r5, sl
20003604:	40a8      	lsls	r0, r5
20003606:	40d9      	lsrs	r1, r3
20003608:	1e45      	subs	r5, r0, #1
2000360a:	41a8      	sbcs	r0, r5
2000360c:	4488      	add	r8, r1
2000360e:	4307      	orrs	r7, r0
20003610:	18bf      	adds	r7, r7, r2
20003612:	4297      	cmp	r7, r2
20003614:	4192      	sbcs	r2, r2
20003616:	4251      	negs	r1, r2
20003618:	4441      	add	r1, r8
2000361a:	0035      	movs	r5, r6
2000361c:	e63a      	b.n	20003294 <__aeabi_dadd+0x164>
2000361e:	4664      	mov	r4, ip
20003620:	0035      	movs	r5, r6
20003622:	4641      	mov	r1, r8
20003624:	0010      	movs	r0, r2
20003626:	e685      	b.n	20003334 <__aeabi_dadd+0x204>
20003628:	000b      	movs	r3, r1
2000362a:	4303      	orrs	r3, r0
2000362c:	2d00      	cmp	r5, #0
2000362e:	d000      	beq.n	20003632 <__aeabi_dadd+0x502>
20003630:	e663      	b.n	200032fa <__aeabi_dadd+0x1ca>
20003632:	2b00      	cmp	r3, #0
20003634:	d0f5      	beq.n	20003622 <__aeabi_dadd+0x4f2>
20003636:	4643      	mov	r3, r8
20003638:	4313      	orrs	r3, r2
2000363a:	d100      	bne.n	2000363e <__aeabi_dadd+0x50e>
2000363c:	e67a      	b.n	20003334 <__aeabi_dadd+0x204>
2000363e:	1887      	adds	r7, r0, r2
20003640:	4287      	cmp	r7, r0
20003642:	4180      	sbcs	r0, r0
20003644:	2207      	movs	r2, #7
20003646:	4441      	add	r1, r8
20003648:	4240      	negs	r0, r0
2000364a:	1809      	adds	r1, r1, r0
2000364c:	403a      	ands	r2, r7
2000364e:	020b      	lsls	r3, r1, #8
20003650:	d400      	bmi.n	20003654 <__aeabi_dadd+0x524>
20003652:	e6d5      	b.n	20003400 <__aeabi_dadd+0x2d0>
20003654:	4b43      	ldr	r3, [pc, #268]	; (20003764 <__aeabi_dadd+0x634>)
20003656:	3501      	adds	r5, #1
20003658:	4019      	ands	r1, r3
2000365a:	e5c9      	b.n	200031f0 <__aeabi_dadd+0xc0>
2000365c:	0038      	movs	r0, r7
2000365e:	e669      	b.n	20003334 <__aeabi_dadd+0x204>
20003660:	001e      	movs	r6, r3
20003662:	4647      	mov	r7, r8
20003664:	3e20      	subs	r6, #32
20003666:	40f7      	lsrs	r7, r6
20003668:	46bc      	mov	ip, r7
2000366a:	2b20      	cmp	r3, #32
2000366c:	d004      	beq.n	20003678 <__aeabi_dadd+0x548>
2000366e:	2640      	movs	r6, #64	; 0x40
20003670:	1af3      	subs	r3, r6, r3
20003672:	4646      	mov	r6, r8
20003674:	409e      	lsls	r6, r3
20003676:	4332      	orrs	r2, r6
20003678:	0017      	movs	r7, r2
2000367a:	4663      	mov	r3, ip
2000367c:	1e7a      	subs	r2, r7, #1
2000367e:	4197      	sbcs	r7, r2
20003680:	431f      	orrs	r7, r3
20003682:	e602      	b.n	2000328a <__aeabi_dadd+0x15a>
20003684:	4d36      	ldr	r5, [pc, #216]	; (20003760 <__aeabi_dadd+0x630>)
20003686:	42ae      	cmp	r6, r5
20003688:	d0ca      	beq.n	20003620 <__aeabi_dadd+0x4f0>
2000368a:	2580      	movs	r5, #128	; 0x80
2000368c:	042d      	lsls	r5, r5, #16
2000368e:	425b      	negs	r3, r3
20003690:	4329      	orrs	r1, r5
20003692:	e7a6      	b.n	200035e2 <__aeabi_dadd+0x4b2>
20003694:	4308      	orrs	r0, r1
20003696:	1e41      	subs	r1, r0, #1
20003698:	4188      	sbcs	r0, r1
2000369a:	e6a6      	b.n	200033ea <__aeabi_dadd+0x2ba>
2000369c:	2b00      	cmp	r3, #0
2000369e:	d100      	bne.n	200036a2 <__aeabi_dadd+0x572>
200036a0:	e648      	b.n	20003334 <__aeabi_dadd+0x204>
200036a2:	1a87      	subs	r7, r0, r2
200036a4:	4643      	mov	r3, r8
200036a6:	42b8      	cmp	r0, r7
200036a8:	41b6      	sbcs	r6, r6
200036aa:	1acb      	subs	r3, r1, r3
200036ac:	4276      	negs	r6, r6
200036ae:	1b9e      	subs	r6, r3, r6
200036b0:	0233      	lsls	r3, r6, #8
200036b2:	d54b      	bpl.n	2000374c <__aeabi_dadd+0x61c>
200036b4:	1a17      	subs	r7, r2, r0
200036b6:	4643      	mov	r3, r8
200036b8:	42ba      	cmp	r2, r7
200036ba:	4192      	sbcs	r2, r2
200036bc:	1a59      	subs	r1, r3, r1
200036be:	4252      	negs	r2, r2
200036c0:	1a89      	subs	r1, r1, r2
200036c2:	2207      	movs	r2, #7
200036c4:	4664      	mov	r4, ip
200036c6:	403a      	ands	r2, r7
200036c8:	e592      	b.n	200031f0 <__aeabi_dadd+0xc0>
200036ca:	4301      	orrs	r1, r0
200036cc:	000f      	movs	r7, r1
200036ce:	1e79      	subs	r1, r7, #1
200036d0:	418f      	sbcs	r7, r1
200036d2:	e79d      	b.n	20003610 <__aeabi_dadd+0x4e0>
200036d4:	001c      	movs	r4, r3
200036d6:	000f      	movs	r7, r1
200036d8:	3c20      	subs	r4, #32
200036da:	40e7      	lsrs	r7, r4
200036dc:	2b20      	cmp	r3, #32
200036de:	d003      	beq.n	200036e8 <__aeabi_dadd+0x5b8>
200036e0:	2440      	movs	r4, #64	; 0x40
200036e2:	1ae3      	subs	r3, r4, r3
200036e4:	4099      	lsls	r1, r3
200036e6:	4308      	orrs	r0, r1
200036e8:	1e41      	subs	r1, r0, #1
200036ea:	4188      	sbcs	r0, r1
200036ec:	4338      	orrs	r0, r7
200036ee:	e67c      	b.n	200033ea <__aeabi_dadd+0x2ba>
200036f0:	2200      	movs	r2, #0
200036f2:	2400      	movs	r4, #0
200036f4:	e625      	b.n	20003342 <__aeabi_dadd+0x212>
200036f6:	1a17      	subs	r7, r2, r0
200036f8:	4643      	mov	r3, r8
200036fa:	42ba      	cmp	r2, r7
200036fc:	4192      	sbcs	r2, r2
200036fe:	1a59      	subs	r1, r3, r1
20003700:	4252      	negs	r2, r2
20003702:	1a89      	subs	r1, r1, r2
20003704:	4664      	mov	r4, ip
20003706:	0035      	movs	r5, r6
20003708:	e543      	b.n	20003192 <__aeabi_dadd+0x62>
2000370a:	4641      	mov	r1, r8
2000370c:	0010      	movs	r0, r2
2000370e:	4d14      	ldr	r5, [pc, #80]	; (20003760 <__aeabi_dadd+0x630>)
20003710:	e610      	b.n	20003334 <__aeabi_dadd+0x204>
20003712:	2280      	movs	r2, #128	; 0x80
20003714:	2400      	movs	r4, #0
20003716:	0312      	lsls	r2, r2, #12
20003718:	e680      	b.n	2000341c <__aeabi_dadd+0x2ec>
2000371a:	001d      	movs	r5, r3
2000371c:	000f      	movs	r7, r1
2000371e:	3d20      	subs	r5, #32
20003720:	40ef      	lsrs	r7, r5
20003722:	46bc      	mov	ip, r7
20003724:	2b20      	cmp	r3, #32
20003726:	d003      	beq.n	20003730 <__aeabi_dadd+0x600>
20003728:	2540      	movs	r5, #64	; 0x40
2000372a:	1aeb      	subs	r3, r5, r3
2000372c:	4099      	lsls	r1, r3
2000372e:	4308      	orrs	r0, r1
20003730:	0007      	movs	r7, r0
20003732:	4663      	mov	r3, ip
20003734:	1e78      	subs	r0, r7, #1
20003736:	4187      	sbcs	r7, r0
20003738:	431f      	orrs	r7, r3
2000373a:	e769      	b.n	20003610 <__aeabi_dadd+0x4e0>
2000373c:	1887      	adds	r7, r0, r2
2000373e:	4297      	cmp	r7, r2
20003740:	419b      	sbcs	r3, r3
20003742:	4441      	add	r1, r8
20003744:	425b      	negs	r3, r3
20003746:	18c9      	adds	r1, r1, r3
20003748:	0035      	movs	r5, r6
2000374a:	e5a3      	b.n	20003294 <__aeabi_dadd+0x164>
2000374c:	003b      	movs	r3, r7
2000374e:	4333      	orrs	r3, r6
20003750:	d0ce      	beq.n	200036f0 <__aeabi_dadd+0x5c0>
20003752:	2207      	movs	r2, #7
20003754:	0031      	movs	r1, r6
20003756:	403a      	ands	r2, r7
20003758:	e652      	b.n	20003400 <__aeabi_dadd+0x2d0>
2000375a:	2300      	movs	r3, #0
2000375c:	001a      	movs	r2, r3
2000375e:	e5f4      	b.n	2000334a <__aeabi_dadd+0x21a>
20003760:	000007ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
20003764:	ff7fffff 			; <UNDEFINED> instruction: 0xff7fffff

20003768 <__aeabi_ddiv>:
20003768:	b5f0      	push	{r4, r5, r6, r7, lr}
2000376a:	4657      	mov	r7, sl
2000376c:	46de      	mov	lr, fp
2000376e:	464e      	mov	r6, r9
20003770:	4645      	mov	r5, r8
20003772:	b5e0      	push	{r5, r6, r7, lr}
20003774:	4683      	mov	fp, r0
20003776:	0007      	movs	r7, r0
20003778:	030e      	lsls	r6, r1, #12
2000377a:	0048      	lsls	r0, r1, #1
2000377c:	b085      	sub	sp, #20
2000377e:	4692      	mov	sl, r2
20003780:	001c      	movs	r4, r3
20003782:	0b36      	lsrs	r6, r6, #12
20003784:	0d40      	lsrs	r0, r0, #21
20003786:	0fcd      	lsrs	r5, r1, #31
20003788:	2800      	cmp	r0, #0
2000378a:	d100      	bne.n	2000378e <__aeabi_ddiv+0x26>
2000378c:	e09d      	b.n	200038ca <__aeabi_ddiv+0x162>
2000378e:	4b95      	ldr	r3, [pc, #596]	; (200039e4 <__aeabi_ddiv+0x27c>)
20003790:	4298      	cmp	r0, r3
20003792:	d039      	beq.n	20003808 <__aeabi_ddiv+0xa0>
20003794:	2380      	movs	r3, #128	; 0x80
20003796:	00f6      	lsls	r6, r6, #3
20003798:	041b      	lsls	r3, r3, #16
2000379a:	431e      	orrs	r6, r3
2000379c:	4a92      	ldr	r2, [pc, #584]	; (200039e8 <__aeabi_ddiv+0x280>)
2000379e:	0f7b      	lsrs	r3, r7, #29
200037a0:	4333      	orrs	r3, r6
200037a2:	4699      	mov	r9, r3
200037a4:	4694      	mov	ip, r2
200037a6:	0003      	movs	r3, r0
200037a8:	4463      	add	r3, ip
200037aa:	9300      	str	r3, [sp, #0]
200037ac:	2300      	movs	r3, #0
200037ae:	2600      	movs	r6, #0
200037b0:	00ff      	lsls	r7, r7, #3
200037b2:	9302      	str	r3, [sp, #8]
200037b4:	0323      	lsls	r3, r4, #12
200037b6:	0b1b      	lsrs	r3, r3, #12
200037b8:	4698      	mov	r8, r3
200037ba:	0063      	lsls	r3, r4, #1
200037bc:	0fe4      	lsrs	r4, r4, #31
200037be:	4652      	mov	r2, sl
200037c0:	0d5b      	lsrs	r3, r3, #21
200037c2:	9401      	str	r4, [sp, #4]
200037c4:	d100      	bne.n	200037c8 <__aeabi_ddiv+0x60>
200037c6:	e0b3      	b.n	20003930 <__aeabi_ddiv+0x1c8>
200037c8:	4986      	ldr	r1, [pc, #536]	; (200039e4 <__aeabi_ddiv+0x27c>)
200037ca:	428b      	cmp	r3, r1
200037cc:	d100      	bne.n	200037d0 <__aeabi_ddiv+0x68>
200037ce:	e09e      	b.n	2000390e <__aeabi_ddiv+0x1a6>
200037d0:	4642      	mov	r2, r8
200037d2:	00d1      	lsls	r1, r2, #3
200037d4:	2280      	movs	r2, #128	; 0x80
200037d6:	0412      	lsls	r2, r2, #16
200037d8:	430a      	orrs	r2, r1
200037da:	4651      	mov	r1, sl
200037dc:	0f49      	lsrs	r1, r1, #29
200037de:	4311      	orrs	r1, r2
200037e0:	468b      	mov	fp, r1
200037e2:	4981      	ldr	r1, [pc, #516]	; (200039e8 <__aeabi_ddiv+0x280>)
200037e4:	4652      	mov	r2, sl
200037e6:	468c      	mov	ip, r1
200037e8:	9900      	ldr	r1, [sp, #0]
200037ea:	4463      	add	r3, ip
200037ec:	1acb      	subs	r3, r1, r3
200037ee:	2100      	movs	r1, #0
200037f0:	00d2      	lsls	r2, r2, #3
200037f2:	9300      	str	r3, [sp, #0]
200037f4:	002b      	movs	r3, r5
200037f6:	4063      	eors	r3, r4
200037f8:	469a      	mov	sl, r3
200037fa:	2e0f      	cmp	r6, #15
200037fc:	d900      	bls.n	20003800 <__aeabi_ddiv+0x98>
200037fe:	e105      	b.n	20003a0c <__aeabi_ddiv+0x2a4>
20003800:	4b7a      	ldr	r3, [pc, #488]	; (200039ec <__aeabi_ddiv+0x284>)
20003802:	00b6      	lsls	r6, r6, #2
20003804:	599b      	ldr	r3, [r3, r6]
20003806:	469f      	mov	pc, r3
20003808:	465b      	mov	r3, fp
2000380a:	4333      	orrs	r3, r6
2000380c:	4699      	mov	r9, r3
2000380e:	d000      	beq.n	20003812 <__aeabi_ddiv+0xaa>
20003810:	e0b8      	b.n	20003984 <__aeabi_ddiv+0x21c>
20003812:	2302      	movs	r3, #2
20003814:	2608      	movs	r6, #8
20003816:	2700      	movs	r7, #0
20003818:	9000      	str	r0, [sp, #0]
2000381a:	9302      	str	r3, [sp, #8]
2000381c:	e7ca      	b.n	200037b4 <__aeabi_ddiv+0x4c>
2000381e:	46cb      	mov	fp, r9
20003820:	003a      	movs	r2, r7
20003822:	9902      	ldr	r1, [sp, #8]
20003824:	9501      	str	r5, [sp, #4]
20003826:	9b01      	ldr	r3, [sp, #4]
20003828:	469a      	mov	sl, r3
2000382a:	2902      	cmp	r1, #2
2000382c:	d027      	beq.n	2000387e <__aeabi_ddiv+0x116>
2000382e:	2903      	cmp	r1, #3
20003830:	d100      	bne.n	20003834 <__aeabi_ddiv+0xcc>
20003832:	e280      	b.n	20003d36 <__aeabi_ddiv+0x5ce>
20003834:	2901      	cmp	r1, #1
20003836:	d044      	beq.n	200038c2 <__aeabi_ddiv+0x15a>
20003838:	496d      	ldr	r1, [pc, #436]	; (200039f0 <__aeabi_ddiv+0x288>)
2000383a:	9b00      	ldr	r3, [sp, #0]
2000383c:	468c      	mov	ip, r1
2000383e:	4463      	add	r3, ip
20003840:	001c      	movs	r4, r3
20003842:	2c00      	cmp	r4, #0
20003844:	dd38      	ble.n	200038b8 <__aeabi_ddiv+0x150>
20003846:	0753      	lsls	r3, r2, #29
20003848:	d000      	beq.n	2000384c <__aeabi_ddiv+0xe4>
2000384a:	e213      	b.n	20003c74 <__aeabi_ddiv+0x50c>
2000384c:	08d2      	lsrs	r2, r2, #3
2000384e:	465b      	mov	r3, fp
20003850:	01db      	lsls	r3, r3, #7
20003852:	d509      	bpl.n	20003868 <__aeabi_ddiv+0x100>
20003854:	4659      	mov	r1, fp
20003856:	4b67      	ldr	r3, [pc, #412]	; (200039f4 <__aeabi_ddiv+0x28c>)
20003858:	4019      	ands	r1, r3
2000385a:	468b      	mov	fp, r1
2000385c:	2180      	movs	r1, #128	; 0x80
2000385e:	00c9      	lsls	r1, r1, #3
20003860:	468c      	mov	ip, r1
20003862:	9b00      	ldr	r3, [sp, #0]
20003864:	4463      	add	r3, ip
20003866:	001c      	movs	r4, r3
20003868:	4b63      	ldr	r3, [pc, #396]	; (200039f8 <__aeabi_ddiv+0x290>)
2000386a:	429c      	cmp	r4, r3
2000386c:	dc07      	bgt.n	2000387e <__aeabi_ddiv+0x116>
2000386e:	465b      	mov	r3, fp
20003870:	0564      	lsls	r4, r4, #21
20003872:	075f      	lsls	r7, r3, #29
20003874:	025b      	lsls	r3, r3, #9
20003876:	4317      	orrs	r7, r2
20003878:	0b1b      	lsrs	r3, r3, #12
2000387a:	0d62      	lsrs	r2, r4, #21
2000387c:	e002      	b.n	20003884 <__aeabi_ddiv+0x11c>
2000387e:	2300      	movs	r3, #0
20003880:	2700      	movs	r7, #0
20003882:	4a58      	ldr	r2, [pc, #352]	; (200039e4 <__aeabi_ddiv+0x27c>)
20003884:	2100      	movs	r1, #0
20003886:	031b      	lsls	r3, r3, #12
20003888:	0b1c      	lsrs	r4, r3, #12
2000388a:	0d0b      	lsrs	r3, r1, #20
2000388c:	051b      	lsls	r3, r3, #20
2000388e:	4323      	orrs	r3, r4
20003890:	0514      	lsls	r4, r2, #20
20003892:	4a5a      	ldr	r2, [pc, #360]	; (200039fc <__aeabi_ddiv+0x294>)
20003894:	0038      	movs	r0, r7
20003896:	4013      	ands	r3, r2
20003898:	431c      	orrs	r4, r3
2000389a:	4653      	mov	r3, sl
2000389c:	0064      	lsls	r4, r4, #1
2000389e:	07db      	lsls	r3, r3, #31
200038a0:	0864      	lsrs	r4, r4, #1
200038a2:	431c      	orrs	r4, r3
200038a4:	0021      	movs	r1, r4
200038a6:	b005      	add	sp, #20
200038a8:	bc3c      	pop	{r2, r3, r4, r5}
200038aa:	4690      	mov	r8, r2
200038ac:	4699      	mov	r9, r3
200038ae:	46a2      	mov	sl, r4
200038b0:	46ab      	mov	fp, r5
200038b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
200038b4:	2201      	movs	r2, #1
200038b6:	4252      	negs	r2, r2
200038b8:	2301      	movs	r3, #1
200038ba:	1b1b      	subs	r3, r3, r4
200038bc:	2b38      	cmp	r3, #56	; 0x38
200038be:	dc00      	bgt.n	200038c2 <__aeabi_ddiv+0x15a>
200038c0:	e1ad      	b.n	20003c1e <__aeabi_ddiv+0x4b6>
200038c2:	2200      	movs	r2, #0
200038c4:	2300      	movs	r3, #0
200038c6:	2700      	movs	r7, #0
200038c8:	e7dc      	b.n	20003884 <__aeabi_ddiv+0x11c>
200038ca:	465b      	mov	r3, fp
200038cc:	4333      	orrs	r3, r6
200038ce:	4699      	mov	r9, r3
200038d0:	d05e      	beq.n	20003990 <__aeabi_ddiv+0x228>
200038d2:	2e00      	cmp	r6, #0
200038d4:	d100      	bne.n	200038d8 <__aeabi_ddiv+0x170>
200038d6:	e18a      	b.n	20003bee <__aeabi_ddiv+0x486>
200038d8:	0030      	movs	r0, r6
200038da:	f7ff fb03 	bl	20002ee4 <__clzsi2>
200038de:	0003      	movs	r3, r0
200038e0:	3b0b      	subs	r3, #11
200038e2:	2b1c      	cmp	r3, #28
200038e4:	dd00      	ble.n	200038e8 <__aeabi_ddiv+0x180>
200038e6:	e17b      	b.n	20003be0 <__aeabi_ddiv+0x478>
200038e8:	221d      	movs	r2, #29
200038ea:	1ad3      	subs	r3, r2, r3
200038ec:	465a      	mov	r2, fp
200038ee:	0001      	movs	r1, r0
200038f0:	40da      	lsrs	r2, r3
200038f2:	3908      	subs	r1, #8
200038f4:	408e      	lsls	r6, r1
200038f6:	0013      	movs	r3, r2
200038f8:	465f      	mov	r7, fp
200038fa:	4333      	orrs	r3, r6
200038fc:	4699      	mov	r9, r3
200038fe:	408f      	lsls	r7, r1
20003900:	4b3f      	ldr	r3, [pc, #252]	; (20003a00 <__aeabi_ddiv+0x298>)
20003902:	2600      	movs	r6, #0
20003904:	1a1b      	subs	r3, r3, r0
20003906:	9300      	str	r3, [sp, #0]
20003908:	2300      	movs	r3, #0
2000390a:	9302      	str	r3, [sp, #8]
2000390c:	e752      	b.n	200037b4 <__aeabi_ddiv+0x4c>
2000390e:	4641      	mov	r1, r8
20003910:	4653      	mov	r3, sl
20003912:	430b      	orrs	r3, r1
20003914:	493b      	ldr	r1, [pc, #236]	; (20003a04 <__aeabi_ddiv+0x29c>)
20003916:	469b      	mov	fp, r3
20003918:	468c      	mov	ip, r1
2000391a:	9b00      	ldr	r3, [sp, #0]
2000391c:	4463      	add	r3, ip
2000391e:	9300      	str	r3, [sp, #0]
20003920:	465b      	mov	r3, fp
20003922:	2b00      	cmp	r3, #0
20003924:	d13b      	bne.n	2000399e <__aeabi_ddiv+0x236>
20003926:	2302      	movs	r3, #2
20003928:	2200      	movs	r2, #0
2000392a:	431e      	orrs	r6, r3
2000392c:	2102      	movs	r1, #2
2000392e:	e761      	b.n	200037f4 <__aeabi_ddiv+0x8c>
20003930:	4643      	mov	r3, r8
20003932:	4313      	orrs	r3, r2
20003934:	469b      	mov	fp, r3
20003936:	d037      	beq.n	200039a8 <__aeabi_ddiv+0x240>
20003938:	4643      	mov	r3, r8
2000393a:	2b00      	cmp	r3, #0
2000393c:	d100      	bne.n	20003940 <__aeabi_ddiv+0x1d8>
2000393e:	e162      	b.n	20003c06 <__aeabi_ddiv+0x49e>
20003940:	4640      	mov	r0, r8
20003942:	f7ff facf 	bl	20002ee4 <__clzsi2>
20003946:	0003      	movs	r3, r0
20003948:	3b0b      	subs	r3, #11
2000394a:	2b1c      	cmp	r3, #28
2000394c:	dd00      	ble.n	20003950 <__aeabi_ddiv+0x1e8>
2000394e:	e153      	b.n	20003bf8 <__aeabi_ddiv+0x490>
20003950:	0002      	movs	r2, r0
20003952:	4641      	mov	r1, r8
20003954:	3a08      	subs	r2, #8
20003956:	4091      	lsls	r1, r2
20003958:	4688      	mov	r8, r1
2000395a:	211d      	movs	r1, #29
2000395c:	1acb      	subs	r3, r1, r3
2000395e:	4651      	mov	r1, sl
20003960:	40d9      	lsrs	r1, r3
20003962:	000b      	movs	r3, r1
20003964:	4641      	mov	r1, r8
20003966:	430b      	orrs	r3, r1
20003968:	469b      	mov	fp, r3
2000396a:	4653      	mov	r3, sl
2000396c:	4093      	lsls	r3, r2
2000396e:	001a      	movs	r2, r3
20003970:	9b00      	ldr	r3, [sp, #0]
20003972:	4925      	ldr	r1, [pc, #148]	; (20003a08 <__aeabi_ddiv+0x2a0>)
20003974:	469c      	mov	ip, r3
20003976:	4460      	add	r0, ip
20003978:	0003      	movs	r3, r0
2000397a:	468c      	mov	ip, r1
2000397c:	4463      	add	r3, ip
2000397e:	9300      	str	r3, [sp, #0]
20003980:	2100      	movs	r1, #0
20003982:	e737      	b.n	200037f4 <__aeabi_ddiv+0x8c>
20003984:	2303      	movs	r3, #3
20003986:	46b1      	mov	r9, r6
20003988:	9000      	str	r0, [sp, #0]
2000398a:	260c      	movs	r6, #12
2000398c:	9302      	str	r3, [sp, #8]
2000398e:	e711      	b.n	200037b4 <__aeabi_ddiv+0x4c>
20003990:	2300      	movs	r3, #0
20003992:	9300      	str	r3, [sp, #0]
20003994:	3301      	adds	r3, #1
20003996:	2604      	movs	r6, #4
20003998:	2700      	movs	r7, #0
2000399a:	9302      	str	r3, [sp, #8]
2000399c:	e70a      	b.n	200037b4 <__aeabi_ddiv+0x4c>
2000399e:	2303      	movs	r3, #3
200039a0:	46c3      	mov	fp, r8
200039a2:	431e      	orrs	r6, r3
200039a4:	2103      	movs	r1, #3
200039a6:	e725      	b.n	200037f4 <__aeabi_ddiv+0x8c>
200039a8:	3301      	adds	r3, #1
200039aa:	431e      	orrs	r6, r3
200039ac:	2200      	movs	r2, #0
200039ae:	2101      	movs	r1, #1
200039b0:	e720      	b.n	200037f4 <__aeabi_ddiv+0x8c>
200039b2:	2300      	movs	r3, #0
200039b4:	469a      	mov	sl, r3
200039b6:	2380      	movs	r3, #128	; 0x80
200039b8:	2700      	movs	r7, #0
200039ba:	031b      	lsls	r3, r3, #12
200039bc:	4a09      	ldr	r2, [pc, #36]	; (200039e4 <__aeabi_ddiv+0x27c>)
200039be:	e761      	b.n	20003884 <__aeabi_ddiv+0x11c>
200039c0:	2380      	movs	r3, #128	; 0x80
200039c2:	4649      	mov	r1, r9
200039c4:	031b      	lsls	r3, r3, #12
200039c6:	4219      	tst	r1, r3
200039c8:	d100      	bne.n	200039cc <__aeabi_ddiv+0x264>
200039ca:	e0e2      	b.n	20003b92 <__aeabi_ddiv+0x42a>
200039cc:	4659      	mov	r1, fp
200039ce:	4219      	tst	r1, r3
200039d0:	d000      	beq.n	200039d4 <__aeabi_ddiv+0x26c>
200039d2:	e0de      	b.n	20003b92 <__aeabi_ddiv+0x42a>
200039d4:	430b      	orrs	r3, r1
200039d6:	031b      	lsls	r3, r3, #12
200039d8:	0017      	movs	r7, r2
200039da:	0b1b      	lsrs	r3, r3, #12
200039dc:	46a2      	mov	sl, r4
200039de:	4a01      	ldr	r2, [pc, #4]	; (200039e4 <__aeabi_ddiv+0x27c>)
200039e0:	e750      	b.n	20003884 <__aeabi_ddiv+0x11c>
200039e2:	46c0      	nop			; (mov r8, r8)
200039e4:	000007ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
200039e8:	fffffc01 			; <UNDEFINED> instruction: 0xfffffc01
200039ec:	20004f98 	mulcs	r0, r8, pc	; <UNPREDICTABLE>
200039f0:	000003ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
200039f4:	feffffff 	mrc2	15, 7, pc, cr15, cr15, {7}
200039f8:	000007fe 	strdeq	r0, [r0], -lr
200039fc:	800fffff 	strdhi	pc, [pc], -pc	; <UNPREDICTABLE>
20003a00:	fffffc0d 			; <UNDEFINED> instruction: 0xfffffc0d
20003a04:	fffff801 			; <UNDEFINED> instruction: 0xfffff801
20003a08:	000003f3 	strdeq	r0, [r0], -r3
20003a0c:	45d9      	cmp	r9, fp
20003a0e:	d900      	bls.n	20003a12 <__aeabi_ddiv+0x2aa>
20003a10:	e0cb      	b.n	20003baa <__aeabi_ddiv+0x442>
20003a12:	d100      	bne.n	20003a16 <__aeabi_ddiv+0x2ae>
20003a14:	e0c6      	b.n	20003ba4 <__aeabi_ddiv+0x43c>
20003a16:	003c      	movs	r4, r7
20003a18:	4648      	mov	r0, r9
20003a1a:	2700      	movs	r7, #0
20003a1c:	9b00      	ldr	r3, [sp, #0]
20003a1e:	3b01      	subs	r3, #1
20003a20:	9300      	str	r3, [sp, #0]
20003a22:	465b      	mov	r3, fp
20003a24:	0e16      	lsrs	r6, r2, #24
20003a26:	021b      	lsls	r3, r3, #8
20003a28:	431e      	orrs	r6, r3
20003a2a:	0213      	lsls	r3, r2, #8
20003a2c:	4698      	mov	r8, r3
20003a2e:	0433      	lsls	r3, r6, #16
20003a30:	0c1b      	lsrs	r3, r3, #16
20003a32:	4699      	mov	r9, r3
20003a34:	0c31      	lsrs	r1, r6, #16
20003a36:	9101      	str	r1, [sp, #4]
20003a38:	f7fe fe42 	bl	200026c0 <__aeabi_uidivmod>
20003a3c:	464a      	mov	r2, r9
20003a3e:	4342      	muls	r2, r0
20003a40:	040b      	lsls	r3, r1, #16
20003a42:	0c21      	lsrs	r1, r4, #16
20003a44:	0005      	movs	r5, r0
20003a46:	4319      	orrs	r1, r3
20003a48:	428a      	cmp	r2, r1
20003a4a:	d907      	bls.n	20003a5c <__aeabi_ddiv+0x2f4>
20003a4c:	1989      	adds	r1, r1, r6
20003a4e:	3d01      	subs	r5, #1
20003a50:	428e      	cmp	r6, r1
20003a52:	d803      	bhi.n	20003a5c <__aeabi_ddiv+0x2f4>
20003a54:	428a      	cmp	r2, r1
20003a56:	d901      	bls.n	20003a5c <__aeabi_ddiv+0x2f4>
20003a58:	1e85      	subs	r5, r0, #2
20003a5a:	1989      	adds	r1, r1, r6
20003a5c:	1a88      	subs	r0, r1, r2
20003a5e:	9901      	ldr	r1, [sp, #4]
20003a60:	f7fe fe2e 	bl	200026c0 <__aeabi_uidivmod>
20003a64:	0409      	lsls	r1, r1, #16
20003a66:	468c      	mov	ip, r1
20003a68:	464a      	mov	r2, r9
20003a6a:	0421      	lsls	r1, r4, #16
20003a6c:	4664      	mov	r4, ip
20003a6e:	4342      	muls	r2, r0
20003a70:	0c09      	lsrs	r1, r1, #16
20003a72:	0003      	movs	r3, r0
20003a74:	4321      	orrs	r1, r4
20003a76:	428a      	cmp	r2, r1
20003a78:	d904      	bls.n	20003a84 <__aeabi_ddiv+0x31c>
20003a7a:	1989      	adds	r1, r1, r6
20003a7c:	3b01      	subs	r3, #1
20003a7e:	428e      	cmp	r6, r1
20003a80:	d800      	bhi.n	20003a84 <__aeabi_ddiv+0x31c>
20003a82:	e0f1      	b.n	20003c68 <__aeabi_ddiv+0x500>
20003a84:	042d      	lsls	r5, r5, #16
20003a86:	431d      	orrs	r5, r3
20003a88:	46ab      	mov	fp, r5
20003a8a:	4643      	mov	r3, r8
20003a8c:	1a89      	subs	r1, r1, r2
20003a8e:	4642      	mov	r2, r8
20003a90:	0c28      	lsrs	r0, r5, #16
20003a92:	0412      	lsls	r2, r2, #16
20003a94:	0c1d      	lsrs	r5, r3, #16
20003a96:	465b      	mov	r3, fp
20003a98:	0c14      	lsrs	r4, r2, #16
20003a9a:	0022      	movs	r2, r4
20003a9c:	041b      	lsls	r3, r3, #16
20003a9e:	0c1b      	lsrs	r3, r3, #16
20003aa0:	435a      	muls	r2, r3
20003aa2:	9403      	str	r4, [sp, #12]
20003aa4:	436b      	muls	r3, r5
20003aa6:	4344      	muls	r4, r0
20003aa8:	9502      	str	r5, [sp, #8]
20003aaa:	4368      	muls	r0, r5
20003aac:	191b      	adds	r3, r3, r4
20003aae:	0c15      	lsrs	r5, r2, #16
20003ab0:	18eb      	adds	r3, r5, r3
20003ab2:	429c      	cmp	r4, r3
20003ab4:	d903      	bls.n	20003abe <__aeabi_ddiv+0x356>
20003ab6:	2480      	movs	r4, #128	; 0x80
20003ab8:	0264      	lsls	r4, r4, #9
20003aba:	46a4      	mov	ip, r4
20003abc:	4460      	add	r0, ip
20003abe:	0c1c      	lsrs	r4, r3, #16
20003ac0:	0415      	lsls	r5, r2, #16
20003ac2:	041b      	lsls	r3, r3, #16
20003ac4:	0c2d      	lsrs	r5, r5, #16
20003ac6:	1820      	adds	r0, r4, r0
20003ac8:	195d      	adds	r5, r3, r5
20003aca:	4281      	cmp	r1, r0
20003acc:	d377      	bcc.n	20003bbe <__aeabi_ddiv+0x456>
20003ace:	d073      	beq.n	20003bb8 <__aeabi_ddiv+0x450>
20003ad0:	1a0c      	subs	r4, r1, r0
20003ad2:	4aa2      	ldr	r2, [pc, #648]	; (20003d5c <__aeabi_ddiv+0x5f4>)
20003ad4:	1b7d      	subs	r5, r7, r5
20003ad6:	42af      	cmp	r7, r5
20003ad8:	41bf      	sbcs	r7, r7
20003ada:	4694      	mov	ip, r2
20003adc:	9b00      	ldr	r3, [sp, #0]
20003ade:	427f      	negs	r7, r7
20003ae0:	4463      	add	r3, ip
20003ae2:	1be0      	subs	r0, r4, r7
20003ae4:	001c      	movs	r4, r3
20003ae6:	4286      	cmp	r6, r0
20003ae8:	d100      	bne.n	20003aec <__aeabi_ddiv+0x384>
20003aea:	e0db      	b.n	20003ca4 <__aeabi_ddiv+0x53c>
20003aec:	9901      	ldr	r1, [sp, #4]
20003aee:	f7fe fde7 	bl	200026c0 <__aeabi_uidivmod>
20003af2:	464a      	mov	r2, r9
20003af4:	4342      	muls	r2, r0
20003af6:	040b      	lsls	r3, r1, #16
20003af8:	0c29      	lsrs	r1, r5, #16
20003afa:	0007      	movs	r7, r0
20003afc:	4319      	orrs	r1, r3
20003afe:	428a      	cmp	r2, r1
20003b00:	d907      	bls.n	20003b12 <__aeabi_ddiv+0x3aa>
20003b02:	1989      	adds	r1, r1, r6
20003b04:	3f01      	subs	r7, #1
20003b06:	428e      	cmp	r6, r1
20003b08:	d803      	bhi.n	20003b12 <__aeabi_ddiv+0x3aa>
20003b0a:	428a      	cmp	r2, r1
20003b0c:	d901      	bls.n	20003b12 <__aeabi_ddiv+0x3aa>
20003b0e:	1e87      	subs	r7, r0, #2
20003b10:	1989      	adds	r1, r1, r6
20003b12:	1a88      	subs	r0, r1, r2
20003b14:	9901      	ldr	r1, [sp, #4]
20003b16:	f7fe fdd3 	bl	200026c0 <__aeabi_uidivmod>
20003b1a:	0409      	lsls	r1, r1, #16
20003b1c:	464a      	mov	r2, r9
20003b1e:	4689      	mov	r9, r1
20003b20:	0429      	lsls	r1, r5, #16
20003b22:	464d      	mov	r5, r9
20003b24:	4342      	muls	r2, r0
20003b26:	0c09      	lsrs	r1, r1, #16
20003b28:	0003      	movs	r3, r0
20003b2a:	4329      	orrs	r1, r5
20003b2c:	428a      	cmp	r2, r1
20003b2e:	d907      	bls.n	20003b40 <__aeabi_ddiv+0x3d8>
20003b30:	1989      	adds	r1, r1, r6
20003b32:	3b01      	subs	r3, #1
20003b34:	428e      	cmp	r6, r1
20003b36:	d803      	bhi.n	20003b40 <__aeabi_ddiv+0x3d8>
20003b38:	428a      	cmp	r2, r1
20003b3a:	d901      	bls.n	20003b40 <__aeabi_ddiv+0x3d8>
20003b3c:	1e83      	subs	r3, r0, #2
20003b3e:	1989      	adds	r1, r1, r6
20003b40:	043f      	lsls	r7, r7, #16
20003b42:	1a89      	subs	r1, r1, r2
20003b44:	003a      	movs	r2, r7
20003b46:	9f03      	ldr	r7, [sp, #12]
20003b48:	431a      	orrs	r2, r3
20003b4a:	0038      	movs	r0, r7
20003b4c:	0413      	lsls	r3, r2, #16
20003b4e:	0c1b      	lsrs	r3, r3, #16
20003b50:	4358      	muls	r0, r3
20003b52:	4681      	mov	r9, r0
20003b54:	9802      	ldr	r0, [sp, #8]
20003b56:	0c15      	lsrs	r5, r2, #16
20003b58:	436f      	muls	r7, r5
20003b5a:	4343      	muls	r3, r0
20003b5c:	4345      	muls	r5, r0
20003b5e:	4648      	mov	r0, r9
20003b60:	0c00      	lsrs	r0, r0, #16
20003b62:	4684      	mov	ip, r0
20003b64:	19db      	adds	r3, r3, r7
20003b66:	4463      	add	r3, ip
20003b68:	429f      	cmp	r7, r3
20003b6a:	d903      	bls.n	20003b74 <__aeabi_ddiv+0x40c>
20003b6c:	2080      	movs	r0, #128	; 0x80
20003b6e:	0240      	lsls	r0, r0, #9
20003b70:	4684      	mov	ip, r0
20003b72:	4465      	add	r5, ip
20003b74:	4648      	mov	r0, r9
20003b76:	0c1f      	lsrs	r7, r3, #16
20003b78:	0400      	lsls	r0, r0, #16
20003b7a:	041b      	lsls	r3, r3, #16
20003b7c:	0c00      	lsrs	r0, r0, #16
20003b7e:	197d      	adds	r5, r7, r5
20003b80:	1818      	adds	r0, r3, r0
20003b82:	42a9      	cmp	r1, r5
20003b84:	d200      	bcs.n	20003b88 <__aeabi_ddiv+0x420>
20003b86:	e084      	b.n	20003c92 <__aeabi_ddiv+0x52a>
20003b88:	d100      	bne.n	20003b8c <__aeabi_ddiv+0x424>
20003b8a:	e07f      	b.n	20003c8c <__aeabi_ddiv+0x524>
20003b8c:	2301      	movs	r3, #1
20003b8e:	431a      	orrs	r2, r3
20003b90:	e657      	b.n	20003842 <__aeabi_ddiv+0xda>
20003b92:	2380      	movs	r3, #128	; 0x80
20003b94:	464a      	mov	r2, r9
20003b96:	031b      	lsls	r3, r3, #12
20003b98:	4313      	orrs	r3, r2
20003b9a:	031b      	lsls	r3, r3, #12
20003b9c:	0b1b      	lsrs	r3, r3, #12
20003b9e:	46aa      	mov	sl, r5
20003ba0:	4a6f      	ldr	r2, [pc, #444]	; (20003d60 <__aeabi_ddiv+0x5f8>)
20003ba2:	e66f      	b.n	20003884 <__aeabi_ddiv+0x11c>
20003ba4:	42ba      	cmp	r2, r7
20003ba6:	d900      	bls.n	20003baa <__aeabi_ddiv+0x442>
20003ba8:	e735      	b.n	20003a16 <__aeabi_ddiv+0x2ae>
20003baa:	464b      	mov	r3, r9
20003bac:	07dc      	lsls	r4, r3, #31
20003bae:	0858      	lsrs	r0, r3, #1
20003bb0:	087b      	lsrs	r3, r7, #1
20003bb2:	431c      	orrs	r4, r3
20003bb4:	07ff      	lsls	r7, r7, #31
20003bb6:	e734      	b.n	20003a22 <__aeabi_ddiv+0x2ba>
20003bb8:	2400      	movs	r4, #0
20003bba:	42af      	cmp	r7, r5
20003bbc:	d289      	bcs.n	20003ad2 <__aeabi_ddiv+0x36a>
20003bbe:	4447      	add	r7, r8
20003bc0:	4547      	cmp	r7, r8
20003bc2:	41a4      	sbcs	r4, r4
20003bc4:	465b      	mov	r3, fp
20003bc6:	4264      	negs	r4, r4
20003bc8:	19a4      	adds	r4, r4, r6
20003bca:	1864      	adds	r4, r4, r1
20003bcc:	3b01      	subs	r3, #1
20003bce:	42a6      	cmp	r6, r4
20003bd0:	d21e      	bcs.n	20003c10 <__aeabi_ddiv+0x4a8>
20003bd2:	42a0      	cmp	r0, r4
20003bd4:	d86d      	bhi.n	20003cb2 <__aeabi_ddiv+0x54a>
20003bd6:	d100      	bne.n	20003bda <__aeabi_ddiv+0x472>
20003bd8:	e0b6      	b.n	20003d48 <__aeabi_ddiv+0x5e0>
20003bda:	1a24      	subs	r4, r4, r0
20003bdc:	469b      	mov	fp, r3
20003bde:	e778      	b.n	20003ad2 <__aeabi_ddiv+0x36a>
20003be0:	0003      	movs	r3, r0
20003be2:	465a      	mov	r2, fp
20003be4:	3b28      	subs	r3, #40	; 0x28
20003be6:	409a      	lsls	r2, r3
20003be8:	2700      	movs	r7, #0
20003bea:	4691      	mov	r9, r2
20003bec:	e688      	b.n	20003900 <__aeabi_ddiv+0x198>
20003bee:	4658      	mov	r0, fp
20003bf0:	f7ff f978 	bl	20002ee4 <__clzsi2>
20003bf4:	3020      	adds	r0, #32
20003bf6:	e672      	b.n	200038de <__aeabi_ddiv+0x176>
20003bf8:	0003      	movs	r3, r0
20003bfa:	4652      	mov	r2, sl
20003bfc:	3b28      	subs	r3, #40	; 0x28
20003bfe:	409a      	lsls	r2, r3
20003c00:	4693      	mov	fp, r2
20003c02:	2200      	movs	r2, #0
20003c04:	e6b4      	b.n	20003970 <__aeabi_ddiv+0x208>
20003c06:	4650      	mov	r0, sl
20003c08:	f7ff f96c 	bl	20002ee4 <__clzsi2>
20003c0c:	3020      	adds	r0, #32
20003c0e:	e69a      	b.n	20003946 <__aeabi_ddiv+0x1de>
20003c10:	42a6      	cmp	r6, r4
20003c12:	d1e2      	bne.n	20003bda <__aeabi_ddiv+0x472>
20003c14:	45b8      	cmp	r8, r7
20003c16:	d9dc      	bls.n	20003bd2 <__aeabi_ddiv+0x46a>
20003c18:	1a34      	subs	r4, r6, r0
20003c1a:	469b      	mov	fp, r3
20003c1c:	e759      	b.n	20003ad2 <__aeabi_ddiv+0x36a>
20003c1e:	2b1f      	cmp	r3, #31
20003c20:	dc65      	bgt.n	20003cee <__aeabi_ddiv+0x586>
20003c22:	4c50      	ldr	r4, [pc, #320]	; (20003d64 <__aeabi_ddiv+0x5fc>)
20003c24:	9900      	ldr	r1, [sp, #0]
20003c26:	46a4      	mov	ip, r4
20003c28:	465c      	mov	r4, fp
20003c2a:	4461      	add	r1, ip
20003c2c:	0008      	movs	r0, r1
20003c2e:	408c      	lsls	r4, r1
20003c30:	0011      	movs	r1, r2
20003c32:	4082      	lsls	r2, r0
20003c34:	40d9      	lsrs	r1, r3
20003c36:	1e50      	subs	r0, r2, #1
20003c38:	4182      	sbcs	r2, r0
20003c3a:	430c      	orrs	r4, r1
20003c3c:	4314      	orrs	r4, r2
20003c3e:	465a      	mov	r2, fp
20003c40:	40da      	lsrs	r2, r3
20003c42:	0013      	movs	r3, r2
20003c44:	0762      	lsls	r2, r4, #29
20003c46:	d009      	beq.n	20003c5c <__aeabi_ddiv+0x4f4>
20003c48:	220f      	movs	r2, #15
20003c4a:	4022      	ands	r2, r4
20003c4c:	2a04      	cmp	r2, #4
20003c4e:	d005      	beq.n	20003c5c <__aeabi_ddiv+0x4f4>
20003c50:	0022      	movs	r2, r4
20003c52:	1d14      	adds	r4, r2, #4
20003c54:	4294      	cmp	r4, r2
20003c56:	4189      	sbcs	r1, r1
20003c58:	4249      	negs	r1, r1
20003c5a:	185b      	adds	r3, r3, r1
20003c5c:	021a      	lsls	r2, r3, #8
20003c5e:	d562      	bpl.n	20003d26 <__aeabi_ddiv+0x5be>
20003c60:	2201      	movs	r2, #1
20003c62:	2300      	movs	r3, #0
20003c64:	2700      	movs	r7, #0
20003c66:	e60d      	b.n	20003884 <__aeabi_ddiv+0x11c>
20003c68:	428a      	cmp	r2, r1
20003c6a:	d800      	bhi.n	20003c6e <__aeabi_ddiv+0x506>
20003c6c:	e70a      	b.n	20003a84 <__aeabi_ddiv+0x31c>
20003c6e:	1e83      	subs	r3, r0, #2
20003c70:	1989      	adds	r1, r1, r6
20003c72:	e707      	b.n	20003a84 <__aeabi_ddiv+0x31c>
20003c74:	230f      	movs	r3, #15
20003c76:	4013      	ands	r3, r2
20003c78:	2b04      	cmp	r3, #4
20003c7a:	d100      	bne.n	20003c7e <__aeabi_ddiv+0x516>
20003c7c:	e5e6      	b.n	2000384c <__aeabi_ddiv+0xe4>
20003c7e:	1d17      	adds	r7, r2, #4
20003c80:	4297      	cmp	r7, r2
20003c82:	4192      	sbcs	r2, r2
20003c84:	4253      	negs	r3, r2
20003c86:	449b      	add	fp, r3
20003c88:	08fa      	lsrs	r2, r7, #3
20003c8a:	e5e0      	b.n	2000384e <__aeabi_ddiv+0xe6>
20003c8c:	2800      	cmp	r0, #0
20003c8e:	d100      	bne.n	20003c92 <__aeabi_ddiv+0x52a>
20003c90:	e5d7      	b.n	20003842 <__aeabi_ddiv+0xda>
20003c92:	1871      	adds	r1, r6, r1
20003c94:	1e53      	subs	r3, r2, #1
20003c96:	42b1      	cmp	r1, r6
20003c98:	d327      	bcc.n	20003cea <__aeabi_ddiv+0x582>
20003c9a:	42a9      	cmp	r1, r5
20003c9c:	d315      	bcc.n	20003cca <__aeabi_ddiv+0x562>
20003c9e:	d058      	beq.n	20003d52 <__aeabi_ddiv+0x5ea>
20003ca0:	001a      	movs	r2, r3
20003ca2:	e773      	b.n	20003b8c <__aeabi_ddiv+0x424>
20003ca4:	2b00      	cmp	r3, #0
20003ca6:	dc00      	bgt.n	20003caa <__aeabi_ddiv+0x542>
20003ca8:	e604      	b.n	200038b4 <__aeabi_ddiv+0x14c>
20003caa:	2301      	movs	r3, #1
20003cac:	2200      	movs	r2, #0
20003cae:	449b      	add	fp, r3
20003cb0:	e5cd      	b.n	2000384e <__aeabi_ddiv+0xe6>
20003cb2:	2302      	movs	r3, #2
20003cb4:	4447      	add	r7, r8
20003cb6:	4547      	cmp	r7, r8
20003cb8:	4189      	sbcs	r1, r1
20003cba:	425b      	negs	r3, r3
20003cbc:	469c      	mov	ip, r3
20003cbe:	4249      	negs	r1, r1
20003cc0:	1989      	adds	r1, r1, r6
20003cc2:	190c      	adds	r4, r1, r4
20003cc4:	44e3      	add	fp, ip
20003cc6:	1a24      	subs	r4, r4, r0
20003cc8:	e703      	b.n	20003ad2 <__aeabi_ddiv+0x36a>
20003cca:	4643      	mov	r3, r8
20003ccc:	005f      	lsls	r7, r3, #1
20003cce:	4547      	cmp	r7, r8
20003cd0:	419b      	sbcs	r3, r3
20003cd2:	46b8      	mov	r8, r7
20003cd4:	425b      	negs	r3, r3
20003cd6:	199e      	adds	r6, r3, r6
20003cd8:	3a02      	subs	r2, #2
20003cda:	1989      	adds	r1, r1, r6
20003cdc:	42a9      	cmp	r1, r5
20003cde:	d000      	beq.n	20003ce2 <__aeabi_ddiv+0x57a>
20003ce0:	e754      	b.n	20003b8c <__aeabi_ddiv+0x424>
20003ce2:	4540      	cmp	r0, r8
20003ce4:	d000      	beq.n	20003ce8 <__aeabi_ddiv+0x580>
20003ce6:	e751      	b.n	20003b8c <__aeabi_ddiv+0x424>
20003ce8:	e5ab      	b.n	20003842 <__aeabi_ddiv+0xda>
20003cea:	001a      	movs	r2, r3
20003cec:	e7f6      	b.n	20003cdc <__aeabi_ddiv+0x574>
20003cee:	211f      	movs	r1, #31
20003cf0:	465f      	mov	r7, fp
20003cf2:	4249      	negs	r1, r1
20003cf4:	1b0c      	subs	r4, r1, r4
20003cf6:	40e7      	lsrs	r7, r4
20003cf8:	2b20      	cmp	r3, #32
20003cfa:	d007      	beq.n	20003d0c <__aeabi_ddiv+0x5a4>
20003cfc:	491a      	ldr	r1, [pc, #104]	; (20003d68 <__aeabi_ddiv+0x600>)
20003cfe:	9b00      	ldr	r3, [sp, #0]
20003d00:	468c      	mov	ip, r1
20003d02:	4463      	add	r3, ip
20003d04:	0018      	movs	r0, r3
20003d06:	465b      	mov	r3, fp
20003d08:	4083      	lsls	r3, r0
20003d0a:	431a      	orrs	r2, r3
20003d0c:	1e50      	subs	r0, r2, #1
20003d0e:	4182      	sbcs	r2, r0
20003d10:	433a      	orrs	r2, r7
20003d12:	2707      	movs	r7, #7
20003d14:	2300      	movs	r3, #0
20003d16:	4017      	ands	r7, r2
20003d18:	d009      	beq.n	20003d2e <__aeabi_ddiv+0x5c6>
20003d1a:	210f      	movs	r1, #15
20003d1c:	2300      	movs	r3, #0
20003d1e:	4011      	ands	r1, r2
20003d20:	0014      	movs	r4, r2
20003d22:	2904      	cmp	r1, #4
20003d24:	d195      	bne.n	20003c52 <__aeabi_ddiv+0x4ea>
20003d26:	0022      	movs	r2, r4
20003d28:	075f      	lsls	r7, r3, #29
20003d2a:	025b      	lsls	r3, r3, #9
20003d2c:	0b1b      	lsrs	r3, r3, #12
20003d2e:	08d2      	lsrs	r2, r2, #3
20003d30:	4317      	orrs	r7, r2
20003d32:	2200      	movs	r2, #0
20003d34:	e5a6      	b.n	20003884 <__aeabi_ddiv+0x11c>
20003d36:	2380      	movs	r3, #128	; 0x80
20003d38:	4659      	mov	r1, fp
20003d3a:	031b      	lsls	r3, r3, #12
20003d3c:	430b      	orrs	r3, r1
20003d3e:	031b      	lsls	r3, r3, #12
20003d40:	0017      	movs	r7, r2
20003d42:	0b1b      	lsrs	r3, r3, #12
20003d44:	4a06      	ldr	r2, [pc, #24]	; (20003d60 <__aeabi_ddiv+0x5f8>)
20003d46:	e59d      	b.n	20003884 <__aeabi_ddiv+0x11c>
20003d48:	42bd      	cmp	r5, r7
20003d4a:	d8b2      	bhi.n	20003cb2 <__aeabi_ddiv+0x54a>
20003d4c:	469b      	mov	fp, r3
20003d4e:	2400      	movs	r4, #0
20003d50:	e6bf      	b.n	20003ad2 <__aeabi_ddiv+0x36a>
20003d52:	4580      	cmp	r8, r0
20003d54:	d3b9      	bcc.n	20003cca <__aeabi_ddiv+0x562>
20003d56:	001a      	movs	r2, r3
20003d58:	e7c3      	b.n	20003ce2 <__aeabi_ddiv+0x57a>
20003d5a:	46c0      	nop			; (mov r8, r8)
20003d5c:	000003ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
20003d60:	000007ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
20003d64:	0000041e 	andeq	r0, r0, lr, lsl r4
20003d68:	0000043e 	andeq	r0, r0, lr, lsr r4

20003d6c <__aeabi_dmul>:
20003d6c:	b5f0      	push	{r4, r5, r6, r7, lr}
20003d6e:	4657      	mov	r7, sl
20003d70:	46de      	mov	lr, fp
20003d72:	464e      	mov	r6, r9
20003d74:	4645      	mov	r5, r8
20003d76:	b5e0      	push	{r5, r6, r7, lr}
20003d78:	4683      	mov	fp, r0
20003d7a:	0006      	movs	r6, r0
20003d7c:	030f      	lsls	r7, r1, #12
20003d7e:	0048      	lsls	r0, r1, #1
20003d80:	b087      	sub	sp, #28
20003d82:	4692      	mov	sl, r2
20003d84:	001d      	movs	r5, r3
20003d86:	0b3f      	lsrs	r7, r7, #12
20003d88:	0d40      	lsrs	r0, r0, #21
20003d8a:	0fcc      	lsrs	r4, r1, #31
20003d8c:	2800      	cmp	r0, #0
20003d8e:	d100      	bne.n	20003d92 <__aeabi_dmul+0x26>
20003d90:	e06f      	b.n	20003e72 <__aeabi_dmul+0x106>
20003d92:	4bde      	ldr	r3, [pc, #888]	; (2000410c <__aeabi_dmul+0x3a0>)
20003d94:	4298      	cmp	r0, r3
20003d96:	d038      	beq.n	20003e0a <__aeabi_dmul+0x9e>
20003d98:	2380      	movs	r3, #128	; 0x80
20003d9a:	00ff      	lsls	r7, r7, #3
20003d9c:	041b      	lsls	r3, r3, #16
20003d9e:	431f      	orrs	r7, r3
20003da0:	0f73      	lsrs	r3, r6, #29
20003da2:	433b      	orrs	r3, r7
20003da4:	9301      	str	r3, [sp, #4]
20003da6:	4bda      	ldr	r3, [pc, #872]	; (20004110 <__aeabi_dmul+0x3a4>)
20003da8:	2700      	movs	r7, #0
20003daa:	4699      	mov	r9, r3
20003dac:	2300      	movs	r3, #0
20003dae:	469b      	mov	fp, r3
20003db0:	00f6      	lsls	r6, r6, #3
20003db2:	4481      	add	r9, r0
20003db4:	032b      	lsls	r3, r5, #12
20003db6:	0069      	lsls	r1, r5, #1
20003db8:	0b1b      	lsrs	r3, r3, #12
20003dba:	4652      	mov	r2, sl
20003dbc:	4698      	mov	r8, r3
20003dbe:	0d49      	lsrs	r1, r1, #21
20003dc0:	0fed      	lsrs	r5, r5, #31
20003dc2:	2900      	cmp	r1, #0
20003dc4:	d100      	bne.n	20003dc8 <__aeabi_dmul+0x5c>
20003dc6:	e085      	b.n	20003ed4 <__aeabi_dmul+0x168>
20003dc8:	4bd0      	ldr	r3, [pc, #832]	; (2000410c <__aeabi_dmul+0x3a0>)
20003dca:	4299      	cmp	r1, r3
20003dcc:	d100      	bne.n	20003dd0 <__aeabi_dmul+0x64>
20003dce:	e073      	b.n	20003eb8 <__aeabi_dmul+0x14c>
20003dd0:	4643      	mov	r3, r8
20003dd2:	00da      	lsls	r2, r3, #3
20003dd4:	2380      	movs	r3, #128	; 0x80
20003dd6:	041b      	lsls	r3, r3, #16
20003dd8:	4313      	orrs	r3, r2
20003dda:	4652      	mov	r2, sl
20003ddc:	48cc      	ldr	r0, [pc, #816]	; (20004110 <__aeabi_dmul+0x3a4>)
20003dde:	0f52      	lsrs	r2, r2, #29
20003de0:	4684      	mov	ip, r0
20003de2:	4313      	orrs	r3, r2
20003de4:	4652      	mov	r2, sl
20003de6:	2000      	movs	r0, #0
20003de8:	4461      	add	r1, ip
20003dea:	00d2      	lsls	r2, r2, #3
20003dec:	4489      	add	r9, r1
20003dee:	0021      	movs	r1, r4
20003df0:	4069      	eors	r1, r5
20003df2:	9100      	str	r1, [sp, #0]
20003df4:	468c      	mov	ip, r1
20003df6:	2101      	movs	r1, #1
20003df8:	4449      	add	r1, r9
20003dfa:	468a      	mov	sl, r1
20003dfc:	2f0f      	cmp	r7, #15
20003dfe:	d900      	bls.n	20003e02 <__aeabi_dmul+0x96>
20003e00:	e090      	b.n	20003f24 <__aeabi_dmul+0x1b8>
20003e02:	49c4      	ldr	r1, [pc, #784]	; (20004114 <__aeabi_dmul+0x3a8>)
20003e04:	00bf      	lsls	r7, r7, #2
20003e06:	59cf      	ldr	r7, [r1, r7]
20003e08:	46bf      	mov	pc, r7
20003e0a:	465b      	mov	r3, fp
20003e0c:	433b      	orrs	r3, r7
20003e0e:	9301      	str	r3, [sp, #4]
20003e10:	d000      	beq.n	20003e14 <__aeabi_dmul+0xa8>
20003e12:	e16a      	b.n	200040ea <__aeabi_dmul+0x37e>
20003e14:	2302      	movs	r3, #2
20003e16:	2708      	movs	r7, #8
20003e18:	2600      	movs	r6, #0
20003e1a:	4681      	mov	r9, r0
20003e1c:	469b      	mov	fp, r3
20003e1e:	e7c9      	b.n	20003db4 <__aeabi_dmul+0x48>
20003e20:	0032      	movs	r2, r6
20003e22:	4658      	mov	r0, fp
20003e24:	9b01      	ldr	r3, [sp, #4]
20003e26:	4661      	mov	r1, ip
20003e28:	9100      	str	r1, [sp, #0]
20003e2a:	2802      	cmp	r0, #2
20003e2c:	d100      	bne.n	20003e30 <__aeabi_dmul+0xc4>
20003e2e:	e075      	b.n	20003f1c <__aeabi_dmul+0x1b0>
20003e30:	2803      	cmp	r0, #3
20003e32:	d100      	bne.n	20003e36 <__aeabi_dmul+0xca>
20003e34:	e1fe      	b.n	20004234 <__aeabi_dmul+0x4c8>
20003e36:	2801      	cmp	r0, #1
20003e38:	d000      	beq.n	20003e3c <__aeabi_dmul+0xd0>
20003e3a:	e12c      	b.n	20004096 <__aeabi_dmul+0x32a>
20003e3c:	2300      	movs	r3, #0
20003e3e:	2700      	movs	r7, #0
20003e40:	2600      	movs	r6, #0
20003e42:	2500      	movs	r5, #0
20003e44:	033f      	lsls	r7, r7, #12
20003e46:	0d2a      	lsrs	r2, r5, #20
20003e48:	0b3f      	lsrs	r7, r7, #12
20003e4a:	48b3      	ldr	r0, [pc, #716]	; (20004118 <__aeabi_dmul+0x3ac>)
20003e4c:	0512      	lsls	r2, r2, #20
20003e4e:	433a      	orrs	r2, r7
20003e50:	4002      	ands	r2, r0
20003e52:	051b      	lsls	r3, r3, #20
20003e54:	4313      	orrs	r3, r2
20003e56:	9a00      	ldr	r2, [sp, #0]
20003e58:	005b      	lsls	r3, r3, #1
20003e5a:	07d1      	lsls	r1, r2, #31
20003e5c:	085b      	lsrs	r3, r3, #1
20003e5e:	430b      	orrs	r3, r1
20003e60:	0030      	movs	r0, r6
20003e62:	0019      	movs	r1, r3
20003e64:	b007      	add	sp, #28
20003e66:	bc3c      	pop	{r2, r3, r4, r5}
20003e68:	4690      	mov	r8, r2
20003e6a:	4699      	mov	r9, r3
20003e6c:	46a2      	mov	sl, r4
20003e6e:	46ab      	mov	fp, r5
20003e70:	bdf0      	pop	{r4, r5, r6, r7, pc}
20003e72:	465b      	mov	r3, fp
20003e74:	433b      	orrs	r3, r7
20003e76:	9301      	str	r3, [sp, #4]
20003e78:	d100      	bne.n	20003e7c <__aeabi_dmul+0x110>
20003e7a:	e12f      	b.n	200040dc <__aeabi_dmul+0x370>
20003e7c:	2f00      	cmp	r7, #0
20003e7e:	d100      	bne.n	20003e82 <__aeabi_dmul+0x116>
20003e80:	e1a5      	b.n	200041ce <__aeabi_dmul+0x462>
20003e82:	0038      	movs	r0, r7
20003e84:	f7ff f82e 	bl	20002ee4 <__clzsi2>
20003e88:	0003      	movs	r3, r0
20003e8a:	3b0b      	subs	r3, #11
20003e8c:	2b1c      	cmp	r3, #28
20003e8e:	dd00      	ble.n	20003e92 <__aeabi_dmul+0x126>
20003e90:	e196      	b.n	200041c0 <__aeabi_dmul+0x454>
20003e92:	221d      	movs	r2, #29
20003e94:	1ad3      	subs	r3, r2, r3
20003e96:	465a      	mov	r2, fp
20003e98:	0001      	movs	r1, r0
20003e9a:	40da      	lsrs	r2, r3
20003e9c:	465e      	mov	r6, fp
20003e9e:	3908      	subs	r1, #8
20003ea0:	408f      	lsls	r7, r1
20003ea2:	0013      	movs	r3, r2
20003ea4:	408e      	lsls	r6, r1
20003ea6:	433b      	orrs	r3, r7
20003ea8:	9301      	str	r3, [sp, #4]
20003eaa:	4b9c      	ldr	r3, [pc, #624]	; (2000411c <__aeabi_dmul+0x3b0>)
20003eac:	2700      	movs	r7, #0
20003eae:	1a1b      	subs	r3, r3, r0
20003eb0:	4699      	mov	r9, r3
20003eb2:	2300      	movs	r3, #0
20003eb4:	469b      	mov	fp, r3
20003eb6:	e77d      	b.n	20003db4 <__aeabi_dmul+0x48>
20003eb8:	4641      	mov	r1, r8
20003eba:	4653      	mov	r3, sl
20003ebc:	430b      	orrs	r3, r1
20003ebe:	4993      	ldr	r1, [pc, #588]	; (2000410c <__aeabi_dmul+0x3a0>)
20003ec0:	468c      	mov	ip, r1
20003ec2:	44e1      	add	r9, ip
20003ec4:	2b00      	cmp	r3, #0
20003ec6:	d000      	beq.n	20003eca <__aeabi_dmul+0x15e>
20003ec8:	e11a      	b.n	20004100 <__aeabi_dmul+0x394>
20003eca:	2202      	movs	r2, #2
20003ecc:	2002      	movs	r0, #2
20003ece:	4317      	orrs	r7, r2
20003ed0:	2200      	movs	r2, #0
20003ed2:	e78c      	b.n	20003dee <__aeabi_dmul+0x82>
20003ed4:	4313      	orrs	r3, r2
20003ed6:	d100      	bne.n	20003eda <__aeabi_dmul+0x16e>
20003ed8:	e10d      	b.n	200040f6 <__aeabi_dmul+0x38a>
20003eda:	4643      	mov	r3, r8
20003edc:	2b00      	cmp	r3, #0
20003ede:	d100      	bne.n	20003ee2 <__aeabi_dmul+0x176>
20003ee0:	e181      	b.n	200041e6 <__aeabi_dmul+0x47a>
20003ee2:	4640      	mov	r0, r8
20003ee4:	f7fe fffe 	bl	20002ee4 <__clzsi2>
20003ee8:	0002      	movs	r2, r0
20003eea:	3a0b      	subs	r2, #11
20003eec:	2a1c      	cmp	r2, #28
20003eee:	dd00      	ble.n	20003ef2 <__aeabi_dmul+0x186>
20003ef0:	e172      	b.n	200041d8 <__aeabi_dmul+0x46c>
20003ef2:	0001      	movs	r1, r0
20003ef4:	4643      	mov	r3, r8
20003ef6:	3908      	subs	r1, #8
20003ef8:	408b      	lsls	r3, r1
20003efa:	4698      	mov	r8, r3
20003efc:	231d      	movs	r3, #29
20003efe:	1a9a      	subs	r2, r3, r2
20003f00:	4653      	mov	r3, sl
20003f02:	40d3      	lsrs	r3, r2
20003f04:	001a      	movs	r2, r3
20003f06:	4643      	mov	r3, r8
20003f08:	4313      	orrs	r3, r2
20003f0a:	4652      	mov	r2, sl
20003f0c:	408a      	lsls	r2, r1
20003f0e:	4649      	mov	r1, r9
20003f10:	1a08      	subs	r0, r1, r0
20003f12:	4982      	ldr	r1, [pc, #520]	; (2000411c <__aeabi_dmul+0x3b0>)
20003f14:	4689      	mov	r9, r1
20003f16:	4481      	add	r9, r0
20003f18:	2000      	movs	r0, #0
20003f1a:	e768      	b.n	20003dee <__aeabi_dmul+0x82>
20003f1c:	4b7b      	ldr	r3, [pc, #492]	; (2000410c <__aeabi_dmul+0x3a0>)
20003f1e:	2700      	movs	r7, #0
20003f20:	2600      	movs	r6, #0
20003f22:	e78e      	b.n	20003e42 <__aeabi_dmul+0xd6>
20003f24:	0c14      	lsrs	r4, r2, #16
20003f26:	0412      	lsls	r2, r2, #16
20003f28:	0c12      	lsrs	r2, r2, #16
20003f2a:	0011      	movs	r1, r2
20003f2c:	0c37      	lsrs	r7, r6, #16
20003f2e:	0436      	lsls	r6, r6, #16
20003f30:	0c35      	lsrs	r5, r6, #16
20003f32:	4379      	muls	r1, r7
20003f34:	0028      	movs	r0, r5
20003f36:	468c      	mov	ip, r1
20003f38:	002e      	movs	r6, r5
20003f3a:	4360      	muls	r0, r4
20003f3c:	4460      	add	r0, ip
20003f3e:	4683      	mov	fp, r0
20003f40:	4356      	muls	r6, r2
20003f42:	0021      	movs	r1, r4
20003f44:	0c30      	lsrs	r0, r6, #16
20003f46:	4680      	mov	r8, r0
20003f48:	4658      	mov	r0, fp
20003f4a:	4379      	muls	r1, r7
20003f4c:	4440      	add	r0, r8
20003f4e:	9102      	str	r1, [sp, #8]
20003f50:	4584      	cmp	ip, r0
20003f52:	d906      	bls.n	20003f62 <__aeabi_dmul+0x1f6>
20003f54:	4688      	mov	r8, r1
20003f56:	2180      	movs	r1, #128	; 0x80
20003f58:	0249      	lsls	r1, r1, #9
20003f5a:	468c      	mov	ip, r1
20003f5c:	44e0      	add	r8, ip
20003f5e:	4641      	mov	r1, r8
20003f60:	9102      	str	r1, [sp, #8]
20003f62:	0436      	lsls	r6, r6, #16
20003f64:	0c01      	lsrs	r1, r0, #16
20003f66:	0c36      	lsrs	r6, r6, #16
20003f68:	0400      	lsls	r0, r0, #16
20003f6a:	468b      	mov	fp, r1
20003f6c:	1981      	adds	r1, r0, r6
20003f6e:	0c1e      	lsrs	r6, r3, #16
20003f70:	041b      	lsls	r3, r3, #16
20003f72:	0c1b      	lsrs	r3, r3, #16
20003f74:	9103      	str	r1, [sp, #12]
20003f76:	0019      	movs	r1, r3
20003f78:	4379      	muls	r1, r7
20003f7a:	468c      	mov	ip, r1
20003f7c:	0028      	movs	r0, r5
20003f7e:	4375      	muls	r5, r6
20003f80:	4465      	add	r5, ip
20003f82:	46a8      	mov	r8, r5
20003f84:	4358      	muls	r0, r3
20003f86:	0c05      	lsrs	r5, r0, #16
20003f88:	4445      	add	r5, r8
20003f8a:	4377      	muls	r7, r6
20003f8c:	42a9      	cmp	r1, r5
20003f8e:	d903      	bls.n	20003f98 <__aeabi_dmul+0x22c>
20003f90:	2180      	movs	r1, #128	; 0x80
20003f92:	0249      	lsls	r1, r1, #9
20003f94:	468c      	mov	ip, r1
20003f96:	4467      	add	r7, ip
20003f98:	0c29      	lsrs	r1, r5, #16
20003f9a:	468c      	mov	ip, r1
20003f9c:	0039      	movs	r1, r7
20003f9e:	0400      	lsls	r0, r0, #16
20003fa0:	0c00      	lsrs	r0, r0, #16
20003fa2:	042d      	lsls	r5, r5, #16
20003fa4:	182d      	adds	r5, r5, r0
20003fa6:	4461      	add	r1, ip
20003fa8:	44ab      	add	fp, r5
20003faa:	9105      	str	r1, [sp, #20]
20003fac:	4659      	mov	r1, fp
20003fae:	9104      	str	r1, [sp, #16]
20003fb0:	9901      	ldr	r1, [sp, #4]
20003fb2:	040f      	lsls	r7, r1, #16
20003fb4:	0c3f      	lsrs	r7, r7, #16
20003fb6:	0c08      	lsrs	r0, r1, #16
20003fb8:	0039      	movs	r1, r7
20003fba:	4351      	muls	r1, r2
20003fbc:	4342      	muls	r2, r0
20003fbe:	4690      	mov	r8, r2
20003fc0:	0002      	movs	r2, r0
20003fc2:	468c      	mov	ip, r1
20003fc4:	0c09      	lsrs	r1, r1, #16
20003fc6:	468b      	mov	fp, r1
20003fc8:	4362      	muls	r2, r4
20003fca:	437c      	muls	r4, r7
20003fcc:	4444      	add	r4, r8
20003fce:	445c      	add	r4, fp
20003fd0:	45a0      	cmp	r8, r4
20003fd2:	d903      	bls.n	20003fdc <__aeabi_dmul+0x270>
20003fd4:	2180      	movs	r1, #128	; 0x80
20003fd6:	0249      	lsls	r1, r1, #9
20003fd8:	4688      	mov	r8, r1
20003fda:	4442      	add	r2, r8
20003fdc:	0c21      	lsrs	r1, r4, #16
20003fde:	4688      	mov	r8, r1
20003fe0:	4661      	mov	r1, ip
20003fe2:	0409      	lsls	r1, r1, #16
20003fe4:	0c09      	lsrs	r1, r1, #16
20003fe6:	468c      	mov	ip, r1
20003fe8:	0039      	movs	r1, r7
20003fea:	4359      	muls	r1, r3
20003fec:	4343      	muls	r3, r0
20003fee:	4370      	muls	r0, r6
20003ff0:	437e      	muls	r6, r7
20003ff2:	0c0f      	lsrs	r7, r1, #16
20003ff4:	18f6      	adds	r6, r6, r3
20003ff6:	0424      	lsls	r4, r4, #16
20003ff8:	19be      	adds	r6, r7, r6
20003ffa:	4464      	add	r4, ip
20003ffc:	4442      	add	r2, r8
20003ffe:	468c      	mov	ip, r1
20004000:	42b3      	cmp	r3, r6
20004002:	d903      	bls.n	2000400c <__aeabi_dmul+0x2a0>
20004004:	2380      	movs	r3, #128	; 0x80
20004006:	025b      	lsls	r3, r3, #9
20004008:	4698      	mov	r8, r3
2000400a:	4440      	add	r0, r8
2000400c:	9b02      	ldr	r3, [sp, #8]
2000400e:	4661      	mov	r1, ip
20004010:	4698      	mov	r8, r3
20004012:	9b04      	ldr	r3, [sp, #16]
20004014:	0437      	lsls	r7, r6, #16
20004016:	4443      	add	r3, r8
20004018:	469b      	mov	fp, r3
2000401a:	45ab      	cmp	fp, r5
2000401c:	41ad      	sbcs	r5, r5
2000401e:	426b      	negs	r3, r5
20004020:	040d      	lsls	r5, r1, #16
20004022:	9905      	ldr	r1, [sp, #20]
20004024:	0c2d      	lsrs	r5, r5, #16
20004026:	468c      	mov	ip, r1
20004028:	197f      	adds	r7, r7, r5
2000402a:	4467      	add	r7, ip
2000402c:	18fd      	adds	r5, r7, r3
2000402e:	46a8      	mov	r8, r5
20004030:	465d      	mov	r5, fp
20004032:	192d      	adds	r5, r5, r4
20004034:	42a5      	cmp	r5, r4
20004036:	41a4      	sbcs	r4, r4
20004038:	4693      	mov	fp, r2
2000403a:	4264      	negs	r4, r4
2000403c:	46a4      	mov	ip, r4
2000403e:	44c3      	add	fp, r8
20004040:	44dc      	add	ip, fp
20004042:	428f      	cmp	r7, r1
20004044:	41bf      	sbcs	r7, r7
20004046:	4598      	cmp	r8, r3
20004048:	419b      	sbcs	r3, r3
2000404a:	4593      	cmp	fp, r2
2000404c:	4192      	sbcs	r2, r2
2000404e:	45a4      	cmp	ip, r4
20004050:	41a4      	sbcs	r4, r4
20004052:	425b      	negs	r3, r3
20004054:	427f      	negs	r7, r7
20004056:	431f      	orrs	r7, r3
20004058:	0c36      	lsrs	r6, r6, #16
2000405a:	4252      	negs	r2, r2
2000405c:	4264      	negs	r4, r4
2000405e:	19bf      	adds	r7, r7, r6
20004060:	4322      	orrs	r2, r4
20004062:	18bf      	adds	r7, r7, r2
20004064:	4662      	mov	r2, ip
20004066:	1838      	adds	r0, r7, r0
20004068:	0243      	lsls	r3, r0, #9
2000406a:	0dd2      	lsrs	r2, r2, #23
2000406c:	9903      	ldr	r1, [sp, #12]
2000406e:	4313      	orrs	r3, r2
20004070:	026a      	lsls	r2, r5, #9
20004072:	430a      	orrs	r2, r1
20004074:	1e50      	subs	r0, r2, #1
20004076:	4182      	sbcs	r2, r0
20004078:	4661      	mov	r1, ip
2000407a:	0ded      	lsrs	r5, r5, #23
2000407c:	432a      	orrs	r2, r5
2000407e:	024e      	lsls	r6, r1, #9
20004080:	4332      	orrs	r2, r6
20004082:	01d9      	lsls	r1, r3, #7
20004084:	d400      	bmi.n	20004088 <__aeabi_dmul+0x31c>
20004086:	e0b3      	b.n	200041f0 <__aeabi_dmul+0x484>
20004088:	2601      	movs	r6, #1
2000408a:	0850      	lsrs	r0, r2, #1
2000408c:	4032      	ands	r2, r6
2000408e:	4302      	orrs	r2, r0
20004090:	07de      	lsls	r6, r3, #31
20004092:	4332      	orrs	r2, r6
20004094:	085b      	lsrs	r3, r3, #1
20004096:	4c22      	ldr	r4, [pc, #136]	; (20004120 <__aeabi_dmul+0x3b4>)
20004098:	4454      	add	r4, sl
2000409a:	2c00      	cmp	r4, #0
2000409c:	dd62      	ble.n	20004164 <__aeabi_dmul+0x3f8>
2000409e:	0751      	lsls	r1, r2, #29
200040a0:	d009      	beq.n	200040b6 <__aeabi_dmul+0x34a>
200040a2:	200f      	movs	r0, #15
200040a4:	4010      	ands	r0, r2
200040a6:	2804      	cmp	r0, #4
200040a8:	d005      	beq.n	200040b6 <__aeabi_dmul+0x34a>
200040aa:	1d10      	adds	r0, r2, #4
200040ac:	4290      	cmp	r0, r2
200040ae:	4192      	sbcs	r2, r2
200040b0:	4252      	negs	r2, r2
200040b2:	189b      	adds	r3, r3, r2
200040b4:	0002      	movs	r2, r0
200040b6:	01d9      	lsls	r1, r3, #7
200040b8:	d504      	bpl.n	200040c4 <__aeabi_dmul+0x358>
200040ba:	2480      	movs	r4, #128	; 0x80
200040bc:	4819      	ldr	r0, [pc, #100]	; (20004124 <__aeabi_dmul+0x3b8>)
200040be:	00e4      	lsls	r4, r4, #3
200040c0:	4003      	ands	r3, r0
200040c2:	4454      	add	r4, sl
200040c4:	4818      	ldr	r0, [pc, #96]	; (20004128 <__aeabi_dmul+0x3bc>)
200040c6:	4284      	cmp	r4, r0
200040c8:	dd00      	ble.n	200040cc <__aeabi_dmul+0x360>
200040ca:	e727      	b.n	20003f1c <__aeabi_dmul+0x1b0>
200040cc:	075e      	lsls	r6, r3, #29
200040ce:	025b      	lsls	r3, r3, #9
200040d0:	08d2      	lsrs	r2, r2, #3
200040d2:	0b1f      	lsrs	r7, r3, #12
200040d4:	0563      	lsls	r3, r4, #21
200040d6:	4316      	orrs	r6, r2
200040d8:	0d5b      	lsrs	r3, r3, #21
200040da:	e6b2      	b.n	20003e42 <__aeabi_dmul+0xd6>
200040dc:	2300      	movs	r3, #0
200040de:	4699      	mov	r9, r3
200040e0:	3301      	adds	r3, #1
200040e2:	2704      	movs	r7, #4
200040e4:	2600      	movs	r6, #0
200040e6:	469b      	mov	fp, r3
200040e8:	e664      	b.n	20003db4 <__aeabi_dmul+0x48>
200040ea:	2303      	movs	r3, #3
200040ec:	9701      	str	r7, [sp, #4]
200040ee:	4681      	mov	r9, r0
200040f0:	270c      	movs	r7, #12
200040f2:	469b      	mov	fp, r3
200040f4:	e65e      	b.n	20003db4 <__aeabi_dmul+0x48>
200040f6:	2201      	movs	r2, #1
200040f8:	2001      	movs	r0, #1
200040fa:	4317      	orrs	r7, r2
200040fc:	2200      	movs	r2, #0
200040fe:	e676      	b.n	20003dee <__aeabi_dmul+0x82>
20004100:	2303      	movs	r3, #3
20004102:	2003      	movs	r0, #3
20004104:	431f      	orrs	r7, r3
20004106:	4643      	mov	r3, r8
20004108:	e671      	b.n	20003dee <__aeabi_dmul+0x82>
2000410a:	46c0      	nop			; (mov r8, r8)
2000410c:	000007ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
20004110:	fffffc01 			; <UNDEFINED> instruction: 0xfffffc01
20004114:	20004fd8 	ldrdcs	r4, [r0], -r8
20004118:	800fffff 	strdhi	pc, [pc], -pc	; <UNPREDICTABLE>
2000411c:	fffffc0d 			; <UNDEFINED> instruction: 0xfffffc0d
20004120:	000003ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
20004124:	feffffff 	mrc2	15, 7, pc, cr15, cr15, {7}
20004128:	000007fe 	strdeq	r0, [r0], -lr
2000412c:	2300      	movs	r3, #0
2000412e:	2780      	movs	r7, #128	; 0x80
20004130:	9300      	str	r3, [sp, #0]
20004132:	033f      	lsls	r7, r7, #12
20004134:	2600      	movs	r6, #0
20004136:	4b43      	ldr	r3, [pc, #268]	; (20004244 <__aeabi_dmul+0x4d8>)
20004138:	e683      	b.n	20003e42 <__aeabi_dmul+0xd6>
2000413a:	9b01      	ldr	r3, [sp, #4]
2000413c:	0032      	movs	r2, r6
2000413e:	46a4      	mov	ip, r4
20004140:	4658      	mov	r0, fp
20004142:	e670      	b.n	20003e26 <__aeabi_dmul+0xba>
20004144:	46ac      	mov	ip, r5
20004146:	e66e      	b.n	20003e26 <__aeabi_dmul+0xba>
20004148:	2780      	movs	r7, #128	; 0x80
2000414a:	9901      	ldr	r1, [sp, #4]
2000414c:	033f      	lsls	r7, r7, #12
2000414e:	4239      	tst	r1, r7
20004150:	d02d      	beq.n	200041ae <__aeabi_dmul+0x442>
20004152:	423b      	tst	r3, r7
20004154:	d12b      	bne.n	200041ae <__aeabi_dmul+0x442>
20004156:	431f      	orrs	r7, r3
20004158:	033f      	lsls	r7, r7, #12
2000415a:	0b3f      	lsrs	r7, r7, #12
2000415c:	9500      	str	r5, [sp, #0]
2000415e:	0016      	movs	r6, r2
20004160:	4b38      	ldr	r3, [pc, #224]	; (20004244 <__aeabi_dmul+0x4d8>)
20004162:	e66e      	b.n	20003e42 <__aeabi_dmul+0xd6>
20004164:	2501      	movs	r5, #1
20004166:	1b2d      	subs	r5, r5, r4
20004168:	2d38      	cmp	r5, #56	; 0x38
2000416a:	dd00      	ble.n	2000416e <__aeabi_dmul+0x402>
2000416c:	e666      	b.n	20003e3c <__aeabi_dmul+0xd0>
2000416e:	2d1f      	cmp	r5, #31
20004170:	dc40      	bgt.n	200041f4 <__aeabi_dmul+0x488>
20004172:	4835      	ldr	r0, [pc, #212]	; (20004248 <__aeabi_dmul+0x4dc>)
20004174:	001c      	movs	r4, r3
20004176:	4450      	add	r0, sl
20004178:	0016      	movs	r6, r2
2000417a:	4082      	lsls	r2, r0
2000417c:	4084      	lsls	r4, r0
2000417e:	40ee      	lsrs	r6, r5
20004180:	1e50      	subs	r0, r2, #1
20004182:	4182      	sbcs	r2, r0
20004184:	4334      	orrs	r4, r6
20004186:	4314      	orrs	r4, r2
20004188:	40eb      	lsrs	r3, r5
2000418a:	0762      	lsls	r2, r4, #29
2000418c:	d009      	beq.n	200041a2 <__aeabi_dmul+0x436>
2000418e:	220f      	movs	r2, #15
20004190:	4022      	ands	r2, r4
20004192:	2a04      	cmp	r2, #4
20004194:	d005      	beq.n	200041a2 <__aeabi_dmul+0x436>
20004196:	0022      	movs	r2, r4
20004198:	1d14      	adds	r4, r2, #4
2000419a:	4294      	cmp	r4, r2
2000419c:	4180      	sbcs	r0, r0
2000419e:	4240      	negs	r0, r0
200041a0:	181b      	adds	r3, r3, r0
200041a2:	021a      	lsls	r2, r3, #8
200041a4:	d53e      	bpl.n	20004224 <__aeabi_dmul+0x4b8>
200041a6:	2301      	movs	r3, #1
200041a8:	2700      	movs	r7, #0
200041aa:	2600      	movs	r6, #0
200041ac:	e649      	b.n	20003e42 <__aeabi_dmul+0xd6>
200041ae:	2780      	movs	r7, #128	; 0x80
200041b0:	9b01      	ldr	r3, [sp, #4]
200041b2:	033f      	lsls	r7, r7, #12
200041b4:	431f      	orrs	r7, r3
200041b6:	033f      	lsls	r7, r7, #12
200041b8:	0b3f      	lsrs	r7, r7, #12
200041ba:	9400      	str	r4, [sp, #0]
200041bc:	4b21      	ldr	r3, [pc, #132]	; (20004244 <__aeabi_dmul+0x4d8>)
200041be:	e640      	b.n	20003e42 <__aeabi_dmul+0xd6>
200041c0:	0003      	movs	r3, r0
200041c2:	465a      	mov	r2, fp
200041c4:	3b28      	subs	r3, #40	; 0x28
200041c6:	409a      	lsls	r2, r3
200041c8:	2600      	movs	r6, #0
200041ca:	9201      	str	r2, [sp, #4]
200041cc:	e66d      	b.n	20003eaa <__aeabi_dmul+0x13e>
200041ce:	4658      	mov	r0, fp
200041d0:	f7fe fe88 	bl	20002ee4 <__clzsi2>
200041d4:	3020      	adds	r0, #32
200041d6:	e657      	b.n	20003e88 <__aeabi_dmul+0x11c>
200041d8:	0003      	movs	r3, r0
200041da:	4652      	mov	r2, sl
200041dc:	3b28      	subs	r3, #40	; 0x28
200041de:	409a      	lsls	r2, r3
200041e0:	0013      	movs	r3, r2
200041e2:	2200      	movs	r2, #0
200041e4:	e693      	b.n	20003f0e <__aeabi_dmul+0x1a2>
200041e6:	4650      	mov	r0, sl
200041e8:	f7fe fe7c 	bl	20002ee4 <__clzsi2>
200041ec:	3020      	adds	r0, #32
200041ee:	e67b      	b.n	20003ee8 <__aeabi_dmul+0x17c>
200041f0:	46ca      	mov	sl, r9
200041f2:	e750      	b.n	20004096 <__aeabi_dmul+0x32a>
200041f4:	201f      	movs	r0, #31
200041f6:	001e      	movs	r6, r3
200041f8:	4240      	negs	r0, r0
200041fa:	1b04      	subs	r4, r0, r4
200041fc:	40e6      	lsrs	r6, r4
200041fe:	2d20      	cmp	r5, #32
20004200:	d003      	beq.n	2000420a <__aeabi_dmul+0x49e>
20004202:	4c12      	ldr	r4, [pc, #72]	; (2000424c <__aeabi_dmul+0x4e0>)
20004204:	4454      	add	r4, sl
20004206:	40a3      	lsls	r3, r4
20004208:	431a      	orrs	r2, r3
2000420a:	1e50      	subs	r0, r2, #1
2000420c:	4182      	sbcs	r2, r0
2000420e:	4332      	orrs	r2, r6
20004210:	2607      	movs	r6, #7
20004212:	2700      	movs	r7, #0
20004214:	4016      	ands	r6, r2
20004216:	d009      	beq.n	2000422c <__aeabi_dmul+0x4c0>
20004218:	200f      	movs	r0, #15
2000421a:	2300      	movs	r3, #0
2000421c:	4010      	ands	r0, r2
2000421e:	0014      	movs	r4, r2
20004220:	2804      	cmp	r0, #4
20004222:	d1b9      	bne.n	20004198 <__aeabi_dmul+0x42c>
20004224:	0022      	movs	r2, r4
20004226:	075e      	lsls	r6, r3, #29
20004228:	025b      	lsls	r3, r3, #9
2000422a:	0b1f      	lsrs	r7, r3, #12
2000422c:	08d2      	lsrs	r2, r2, #3
2000422e:	4316      	orrs	r6, r2
20004230:	2300      	movs	r3, #0
20004232:	e606      	b.n	20003e42 <__aeabi_dmul+0xd6>
20004234:	2780      	movs	r7, #128	; 0x80
20004236:	033f      	lsls	r7, r7, #12
20004238:	431f      	orrs	r7, r3
2000423a:	033f      	lsls	r7, r7, #12
2000423c:	0b3f      	lsrs	r7, r7, #12
2000423e:	0016      	movs	r6, r2
20004240:	4b00      	ldr	r3, [pc, #0]	; (20004244 <__aeabi_dmul+0x4d8>)
20004242:	e5fe      	b.n	20003e42 <__aeabi_dmul+0xd6>
20004244:	000007ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
20004248:	0000041e 	andeq	r0, r0, lr, lsl r4
2000424c:	0000043e 	andeq	r0, r0, lr, lsr r4

20004250 <__aeabi_dcmpun>:
20004250:	b570      	push	{r4, r5, r6, lr}
20004252:	4e0c      	ldr	r6, [pc, #48]	; (20004284 <__aeabi_dcmpun+0x34>)
20004254:	030d      	lsls	r5, r1, #12
20004256:	031c      	lsls	r4, r3, #12
20004258:	0049      	lsls	r1, r1, #1
2000425a:	005b      	lsls	r3, r3, #1
2000425c:	0b2d      	lsrs	r5, r5, #12
2000425e:	0d49      	lsrs	r1, r1, #21
20004260:	0b24      	lsrs	r4, r4, #12
20004262:	0d5b      	lsrs	r3, r3, #21
20004264:	42b1      	cmp	r1, r6
20004266:	d008      	beq.n	2000427a <__aeabi_dcmpun+0x2a>
20004268:	4906      	ldr	r1, [pc, #24]	; (20004284 <__aeabi_dcmpun+0x34>)
2000426a:	2000      	movs	r0, #0
2000426c:	428b      	cmp	r3, r1
2000426e:	d103      	bne.n	20004278 <__aeabi_dcmpun+0x28>
20004270:	4314      	orrs	r4, r2
20004272:	0020      	movs	r0, r4
20004274:	1e44      	subs	r4, r0, #1
20004276:	41a0      	sbcs	r0, r4
20004278:	bd70      	pop	{r4, r5, r6, pc}
2000427a:	4305      	orrs	r5, r0
2000427c:	2001      	movs	r0, #1
2000427e:	2d00      	cmp	r5, #0
20004280:	d1fa      	bne.n	20004278 <__aeabi_dcmpun+0x28>
20004282:	e7f1      	b.n	20004268 <__aeabi_dcmpun+0x18>
20004284:	000007ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>

20004288 <__aeabi_i2d>:
20004288:	b570      	push	{r4, r5, r6, lr}
2000428a:	2800      	cmp	r0, #0
2000428c:	d02d      	beq.n	200042ea <__aeabi_i2d+0x62>
2000428e:	17c3      	asrs	r3, r0, #31
20004290:	18c5      	adds	r5, r0, r3
20004292:	405d      	eors	r5, r3
20004294:	0fc4      	lsrs	r4, r0, #31
20004296:	0028      	movs	r0, r5
20004298:	f7fe fe24 	bl	20002ee4 <__clzsi2>
2000429c:	4b15      	ldr	r3, [pc, #84]	; (200042f4 <__aeabi_i2d+0x6c>)
2000429e:	1a1b      	subs	r3, r3, r0
200042a0:	055b      	lsls	r3, r3, #21
200042a2:	0d5b      	lsrs	r3, r3, #21
200042a4:	280a      	cmp	r0, #10
200042a6:	dd15      	ble.n	200042d4 <__aeabi_i2d+0x4c>
200042a8:	380b      	subs	r0, #11
200042aa:	4085      	lsls	r5, r0
200042ac:	2200      	movs	r2, #0
200042ae:	032d      	lsls	r5, r5, #12
200042b0:	0b2d      	lsrs	r5, r5, #12
200042b2:	2100      	movs	r1, #0
200042b4:	0010      	movs	r0, r2
200042b6:	032d      	lsls	r5, r5, #12
200042b8:	0d0a      	lsrs	r2, r1, #20
200042ba:	0b2d      	lsrs	r5, r5, #12
200042bc:	0512      	lsls	r2, r2, #20
200042be:	432a      	orrs	r2, r5
200042c0:	4d0d      	ldr	r5, [pc, #52]	; (200042f8 <__aeabi_i2d+0x70>)
200042c2:	051b      	lsls	r3, r3, #20
200042c4:	402a      	ands	r2, r5
200042c6:	4313      	orrs	r3, r2
200042c8:	005b      	lsls	r3, r3, #1
200042ca:	07e4      	lsls	r4, r4, #31
200042cc:	085b      	lsrs	r3, r3, #1
200042ce:	4323      	orrs	r3, r4
200042d0:	0019      	movs	r1, r3
200042d2:	bd70      	pop	{r4, r5, r6, pc}
200042d4:	0002      	movs	r2, r0
200042d6:	0029      	movs	r1, r5
200042d8:	3215      	adds	r2, #21
200042da:	4091      	lsls	r1, r2
200042dc:	000a      	movs	r2, r1
200042de:	210b      	movs	r1, #11
200042e0:	1a08      	subs	r0, r1, r0
200042e2:	40c5      	lsrs	r5, r0
200042e4:	032d      	lsls	r5, r5, #12
200042e6:	0b2d      	lsrs	r5, r5, #12
200042e8:	e7e3      	b.n	200042b2 <__aeabi_i2d+0x2a>
200042ea:	2400      	movs	r4, #0
200042ec:	2300      	movs	r3, #0
200042ee:	2500      	movs	r5, #0
200042f0:	2200      	movs	r2, #0
200042f2:	e7de      	b.n	200042b2 <__aeabi_i2d+0x2a>
200042f4:	0000041e 	andeq	r0, r0, lr, lsl r4
200042f8:	800fffff 	strdhi	pc, [pc], -pc	; <UNPREDICTABLE>

200042fc <ceil>:
200042fc:	4a43      	ldr	r2, [pc, #268]	; (2000440c <ceil+0x110>)
200042fe:	b5f0      	push	{r4, r5, r6, r7, lr}
20004300:	464f      	mov	r7, r9
20004302:	4691      	mov	r9, r2
20004304:	004b      	lsls	r3, r1, #1
20004306:	0d5b      	lsrs	r3, r3, #21
20004308:	4499      	add	r9, r3
2000430a:	4646      	mov	r6, r8
2000430c:	46d6      	mov	lr, sl
2000430e:	464a      	mov	r2, r9
20004310:	b5c0      	push	{r6, r7, lr}
20004312:	0005      	movs	r5, r0
20004314:	000c      	movs	r4, r1
20004316:	000e      	movs	r6, r1
20004318:	4688      	mov	r8, r1
2000431a:	0007      	movs	r7, r0
2000431c:	2a13      	cmp	r2, #19
2000431e:	dc25      	bgt.n	2000436c <ceil+0x70>
20004320:	2a00      	cmp	r2, #0
20004322:	db56      	blt.n	200043d2 <ceil+0xd6>
20004324:	4b3a      	ldr	r3, [pc, #232]	; (20004410 <ceil+0x114>)
20004326:	4113      	asrs	r3, r2
20004328:	469a      	mov	sl, r3
2000432a:	000b      	movs	r3, r1
2000432c:	4652      	mov	r2, sl
2000432e:	4013      	ands	r3, r2
20004330:	4303      	orrs	r3, r0
20004332:	d016      	beq.n	20004362 <ceil+0x66>
20004334:	4a37      	ldr	r2, [pc, #220]	; (20004414 <ceil+0x118>)
20004336:	4b38      	ldr	r3, [pc, #224]	; (20004418 <ceil+0x11c>)
20004338:	f7fe fefa 	bl	20003130 <__aeabi_dadd>
2000433c:	2200      	movs	r2, #0
2000433e:	2300      	movs	r3, #0
20004340:	f7fe fdbc 	bl	20002ebc <__aeabi_dcmpgt>
20004344:	2800      	cmp	r0, #0
20004346:	d00a      	beq.n	2000435e <ceil+0x62>
20004348:	2c00      	cmp	r4, #0
2000434a:	dd04      	ble.n	20004356 <ceil+0x5a>
2000434c:	2380      	movs	r3, #128	; 0x80
2000434e:	464a      	mov	r2, r9
20004350:	035b      	lsls	r3, r3, #13
20004352:	4113      	asrs	r3, r2
20004354:	4498      	add	r8, r3
20004356:	4646      	mov	r6, r8
20004358:	4653      	mov	r3, sl
2000435a:	2700      	movs	r7, #0
2000435c:	439e      	bics	r6, r3
2000435e:	0038      	movs	r0, r7
20004360:	0031      	movs	r1, r6
20004362:	bc1c      	pop	{r2, r3, r4}
20004364:	4690      	mov	r8, r2
20004366:	4699      	mov	r9, r3
20004368:	46a2      	mov	sl, r4
2000436a:	bdf0      	pop	{r4, r5, r6, r7, pc}
2000436c:	2a33      	cmp	r2, #51	; 0x33
2000436e:	dd08      	ble.n	20004382 <ceil+0x86>
20004370:	2380      	movs	r3, #128	; 0x80
20004372:	00db      	lsls	r3, r3, #3
20004374:	4599      	cmp	r9, r3
20004376:	d1f4      	bne.n	20004362 <ceil+0x66>
20004378:	0002      	movs	r2, r0
2000437a:	000b      	movs	r3, r1
2000437c:	f7fe fed8 	bl	20003130 <__aeabi_dadd>
20004380:	e7ef      	b.n	20004362 <ceil+0x66>
20004382:	4a26      	ldr	r2, [pc, #152]	; (2000441c <ceil+0x120>)
20004384:	4694      	mov	ip, r2
20004386:	2201      	movs	r2, #1
20004388:	4463      	add	r3, ip
2000438a:	4252      	negs	r2, r2
2000438c:	40da      	lsrs	r2, r3
2000438e:	4692      	mov	sl, r2
20004390:	4202      	tst	r2, r0
20004392:	d0e6      	beq.n	20004362 <ceil+0x66>
20004394:	4a1f      	ldr	r2, [pc, #124]	; (20004414 <ceil+0x118>)
20004396:	4b20      	ldr	r3, [pc, #128]	; (20004418 <ceil+0x11c>)
20004398:	f7fe feca 	bl	20003130 <__aeabi_dadd>
2000439c:	2200      	movs	r2, #0
2000439e:	2300      	movs	r3, #0
200043a0:	f7fe fd8c 	bl	20002ebc <__aeabi_dcmpgt>
200043a4:	2800      	cmp	r0, #0
200043a6:	d0da      	beq.n	2000435e <ceil+0x62>
200043a8:	2c00      	cmp	r4, #0
200043aa:	dd0e      	ble.n	200043ca <ceil+0xce>
200043ac:	464b      	mov	r3, r9
200043ae:	2b14      	cmp	r3, #20
200043b0:	d022      	beq.n	200043f8 <ceil+0xfc>
200043b2:	2334      	movs	r3, #52	; 0x34
200043b4:	464a      	mov	r2, r9
200043b6:	2401      	movs	r4, #1
200043b8:	1a9b      	subs	r3, r3, r2
200043ba:	409c      	lsls	r4, r3
200043bc:	1965      	adds	r5, r4, r5
200043be:	42bd      	cmp	r5, r7
200043c0:	d222      	bcs.n	20004408 <ceil+0x10c>
200043c2:	2301      	movs	r3, #1
200043c4:	469c      	mov	ip, r3
200043c6:	002f      	movs	r7, r5
200043c8:	44e0      	add	r8, ip
200043ca:	4653      	mov	r3, sl
200043cc:	4646      	mov	r6, r8
200043ce:	439f      	bics	r7, r3
200043d0:	e7c5      	b.n	2000435e <ceil+0x62>
200043d2:	4a10      	ldr	r2, [pc, #64]	; (20004414 <ceil+0x118>)
200043d4:	4b10      	ldr	r3, [pc, #64]	; (20004418 <ceil+0x11c>)
200043d6:	f7fe feab 	bl	20003130 <__aeabi_dadd>
200043da:	2200      	movs	r2, #0
200043dc:	2300      	movs	r3, #0
200043de:	f7fe fd6d 	bl	20002ebc <__aeabi_dcmpgt>
200043e2:	2800      	cmp	r0, #0
200043e4:	d0bb      	beq.n	2000435e <ceil+0x62>
200043e6:	2c00      	cmp	r4, #0
200043e8:	db0a      	blt.n	20004400 <ceil+0x104>
200043ea:	432c      	orrs	r4, r5
200043ec:	2700      	movs	r7, #0
200043ee:	2600      	movs	r6, #0
200043f0:	2c00      	cmp	r4, #0
200043f2:	d0b4      	beq.n	2000435e <ceil+0x62>
200043f4:	4e0a      	ldr	r6, [pc, #40]	; (20004420 <ceil+0x124>)
200043f6:	e7b2      	b.n	2000435e <ceil+0x62>
200043f8:	3b13      	subs	r3, #19
200043fa:	469c      	mov	ip, r3
200043fc:	44e0      	add	r8, ip
200043fe:	e7e4      	b.n	200043ca <ceil+0xce>
20004400:	2680      	movs	r6, #128	; 0x80
20004402:	2700      	movs	r7, #0
20004404:	0636      	lsls	r6, r6, #24
20004406:	e7aa      	b.n	2000435e <ceil+0x62>
20004408:	002f      	movs	r7, r5
2000440a:	e7de      	b.n	200043ca <ceil+0xce>
2000440c:	fffffc01 			; <UNDEFINED> instruction: 0xfffffc01
20004410:	000fffff 	strdeq	pc, [pc], -pc	; <UNPREDICTABLE>
20004414:	8800759c 	stmdahi	r0, {r2, r3, r4, r7, r8, sl, ip, sp, lr}
20004418:	7e37e43c 	mrcvc	4, 1, lr, cr7, cr12, {1}
2000441c:	fffffbed 			; <UNDEFINED> instruction: 0xfffffbed
20004420:	3ff00000 	svccc	0x00f00000	; IMB

20004424 <log10>:
20004424:	b5f0      	push	{r4, r5, r6, r7, lr}
20004426:	4647      	mov	r7, r8
20004428:	46ce      	mov	lr, r9
2000442a:	b580      	push	{r7, lr}
2000442c:	b08d      	sub	sp, #52	; 0x34
2000442e:	0004      	movs	r4, r0
20004430:	000d      	movs	r5, r1
20004432:	f000 f883 	bl	2000453c <__ieee754_log10>
20004436:	4b3c      	ldr	r3, [pc, #240]	; (20004528 <log10+0x104>)
20004438:	0006      	movs	r6, r0
2000443a:	781b      	ldrb	r3, [r3, #0]
2000443c:	000f      	movs	r7, r1
2000443e:	b25b      	sxtb	r3, r3
20004440:	4698      	mov	r8, r3
20004442:	3301      	adds	r3, #1
20004444:	d010      	beq.n	20004468 <log10+0x44>
20004446:	0022      	movs	r2, r4
20004448:	002b      	movs	r3, r5
2000444a:	0020      	movs	r0, r4
2000444c:	0029      	movs	r1, r5
2000444e:	f7ff feff 	bl	20004250 <__aeabi_dcmpun>
20004452:	4681      	mov	r9, r0
20004454:	2800      	cmp	r0, #0
20004456:	d107      	bne.n	20004468 <log10+0x44>
20004458:	2200      	movs	r2, #0
2000445a:	2300      	movs	r3, #0
2000445c:	0020      	movs	r0, r4
2000445e:	0029      	movs	r1, r5
20004460:	f7fe fd22 	bl	20002ea8 <__aeabi_dcmple>
20004464:	2800      	cmp	r0, #0
20004466:	d106      	bne.n	20004476 <log10+0x52>
20004468:	0030      	movs	r0, r6
2000446a:	0039      	movs	r1, r7
2000446c:	b00d      	add	sp, #52	; 0x34
2000446e:	bc0c      	pop	{r2, r3}
20004470:	4690      	mov	r8, r2
20004472:	4699      	mov	r9, r3
20004474:	bdf0      	pop	{r4, r5, r6, r7, pc}
20004476:	4b2d      	ldr	r3, [pc, #180]	; (2000452c <log10+0x108>)
20004478:	9404      	str	r4, [sp, #16]
2000447a:	9505      	str	r5, [sp, #20]
2000447c:	9303      	str	r3, [sp, #12]
2000447e:	464b      	mov	r3, r9
20004480:	930a      	str	r3, [sp, #40]	; 0x28
20004482:	4643      	mov	r3, r8
20004484:	9406      	str	r4, [sp, #24]
20004486:	9507      	str	r5, [sp, #28]
20004488:	2b00      	cmp	r3, #0
2000448a:	d11a      	bne.n	200044c2 <log10+0x9e>
2000448c:	22e0      	movs	r2, #224	; 0xe0
2000448e:	4b28      	ldr	r3, [pc, #160]	; (20004530 <log10+0x10c>)
20004490:	0612      	lsls	r2, r2, #24
20004492:	9208      	str	r2, [sp, #32]
20004494:	9309      	str	r3, [sp, #36]	; 0x24
20004496:	0020      	movs	r0, r4
20004498:	2200      	movs	r2, #0
2000449a:	2300      	movs	r3, #0
2000449c:	0029      	movs	r1, r5
2000449e:	f7fe fcf3 	bl	20002e88 <__aeabi_dcmpeq>
200044a2:	2800      	cmp	r0, #0
200044a4:	d038      	beq.n	20004518 <log10+0xf4>
200044a6:	2302      	movs	r3, #2
200044a8:	9302      	str	r3, [sp, #8]
200044aa:	a802      	add	r0, sp, #8
200044ac:	f000 f8d8 	bl	20004660 <matherr>
200044b0:	2800      	cmp	r0, #0
200044b2:	d017      	beq.n	200044e4 <log10+0xc0>
200044b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
200044b6:	9301      	str	r3, [sp, #4]
200044b8:	2b00      	cmp	r3, #0
200044ba:	d118      	bne.n	200044ee <log10+0xca>
200044bc:	9e08      	ldr	r6, [sp, #32]
200044be:	9f09      	ldr	r7, [sp, #36]	; 0x24
200044c0:	e7d2      	b.n	20004468 <log10+0x44>
200044c2:	2200      	movs	r2, #0
200044c4:	4b1b      	ldr	r3, [pc, #108]	; (20004534 <log10+0x110>)
200044c6:	0020      	movs	r0, r4
200044c8:	9208      	str	r2, [sp, #32]
200044ca:	9309      	str	r3, [sp, #36]	; 0x24
200044cc:	0029      	movs	r1, r5
200044ce:	2200      	movs	r2, #0
200044d0:	2300      	movs	r3, #0
200044d2:	f7fe fcd9 	bl	20002e88 <__aeabi_dcmpeq>
200044d6:	2800      	cmp	r0, #0
200044d8:	d00f      	beq.n	200044fa <log10+0xd6>
200044da:	2302      	movs	r3, #2
200044dc:	9302      	str	r3, [sp, #8]
200044de:	4643      	mov	r3, r8
200044e0:	2b02      	cmp	r3, #2
200044e2:	d1e2      	bne.n	200044aa <log10+0x86>
200044e4:	f000 fa9a 	bl	20004a1c <__errno>
200044e8:	2322      	movs	r3, #34	; 0x22
200044ea:	6003      	str	r3, [r0, #0]
200044ec:	e7e2      	b.n	200044b4 <log10+0x90>
200044ee:	f000 fa95 	bl	20004a1c <__errno>
200044f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
200044f4:	9301      	str	r3, [sp, #4]
200044f6:	6003      	str	r3, [r0, #0]
200044f8:	e7e0      	b.n	200044bc <log10+0x98>
200044fa:	2301      	movs	r3, #1
200044fc:	9302      	str	r3, [sp, #8]
200044fe:	4643      	mov	r3, r8
20004500:	2b02      	cmp	r3, #2
20004502:	d10b      	bne.n	2000451c <log10+0xf8>
20004504:	f000 fa8a 	bl	20004a1c <__errno>
20004508:	2321      	movs	r3, #33	; 0x21
2000450a:	6003      	str	r3, [r0, #0]
2000450c:	480a      	ldr	r0, [pc, #40]	; (20004538 <log10+0x114>)
2000450e:	f000 f8a9 	bl	20004664 <nan>
20004512:	9008      	str	r0, [sp, #32]
20004514:	9109      	str	r1, [sp, #36]	; 0x24
20004516:	e7cd      	b.n	200044b4 <log10+0x90>
20004518:	2301      	movs	r3, #1
2000451a:	9302      	str	r3, [sp, #8]
2000451c:	a802      	add	r0, sp, #8
2000451e:	f000 f89f 	bl	20004660 <matherr>
20004522:	2800      	cmp	r0, #0
20004524:	d1f2      	bne.n	2000450c <log10+0xe8>
20004526:	e7ed      	b.n	20004504 <log10+0xe0>
20004528:	20004b14 	andcs	r4, r0, r4, lsl fp
2000452c:	20005018 	andcs	r5, r0, r8, lsl r0
20004530:	c7efffff 			; <UNDEFINED> instruction: 0xc7efffff
20004534:	fff00000 			; <UNDEFINED> instruction: 0xfff00000	; IMB
20004538:	20005020 	andcs	r5, r0, r0, lsr #32

2000453c <__ieee754_log10>:
2000453c:	b5f0      	push	{r4, r5, r6, r7, lr}
2000453e:	46ce      	mov	lr, r9
20004540:	4647      	mov	r7, r8
20004542:	b580      	push	{r7, lr}
20004544:	4a3a      	ldr	r2, [pc, #232]	; (20004630 <__ieee754_log10+0xf4>)
20004546:	b083      	sub	sp, #12
20004548:	0004      	movs	r4, r0
2000454a:	000d      	movs	r5, r1
2000454c:	000b      	movs	r3, r1
2000454e:	4291      	cmp	r1, r2
20004550:	dc1c      	bgt.n	2000458c <__ieee754_log10+0x50>
20004552:	004a      	lsls	r2, r1, #1
20004554:	0852      	lsrs	r2, r2, #1
20004556:	4302      	orrs	r2, r0
20004558:	d05a      	beq.n	20004610 <__ieee754_log10+0xd4>
2000455a:	2900      	cmp	r1, #0
2000455c:	db5f      	blt.n	2000461e <__ieee754_log10+0xe2>
2000455e:	2200      	movs	r2, #0
20004560:	4b34      	ldr	r3, [pc, #208]	; (20004634 <__ieee754_log10+0xf8>)
20004562:	f7ff fc03 	bl	20003d6c <__aeabi_dmul>
20004566:	000d      	movs	r5, r1
20004568:	000b      	movs	r3, r1
2000456a:	2136      	movs	r1, #54	; 0x36
2000456c:	4a32      	ldr	r2, [pc, #200]	; (20004638 <__ieee754_log10+0xfc>)
2000456e:	0004      	movs	r4, r0
20004570:	4249      	negs	r1, r1
20004572:	4293      	cmp	r3, r2
20004574:	dd0e      	ble.n	20004594 <__ieee754_log10+0x58>
20004576:	0022      	movs	r2, r4
20004578:	002b      	movs	r3, r5
2000457a:	0020      	movs	r0, r4
2000457c:	0029      	movs	r1, r5
2000457e:	f7fe fdd7 	bl	20003130 <__aeabi_dadd>
20004582:	b003      	add	sp, #12
20004584:	bc0c      	pop	{r2, r3}
20004586:	4690      	mov	r8, r2
20004588:	4699      	mov	r9, r3
2000458a:	bdf0      	pop	{r4, r5, r6, r7, pc}
2000458c:	4a2a      	ldr	r2, [pc, #168]	; (20004638 <__ieee754_log10+0xfc>)
2000458e:	2100      	movs	r1, #0
20004590:	4293      	cmp	r3, r2
20004592:	dcf0      	bgt.n	20004576 <__ieee754_log10+0x3a>
20004594:	4a29      	ldr	r2, [pc, #164]	; (2000463c <__ieee754_log10+0x100>)
20004596:	1518      	asrs	r0, r3, #20
20004598:	4694      	mov	ip, r2
2000459a:	4460      	add	r0, ip
2000459c:	1840      	adds	r0, r0, r1
2000459e:	0fc2      	lsrs	r2, r0, #31
200045a0:	4691      	mov	r9, r2
200045a2:	031b      	lsls	r3, r3, #12
200045a4:	0b1b      	lsrs	r3, r3, #12
200045a6:	4448      	add	r0, r9
200045a8:	4698      	mov	r8, r3
200045aa:	f7ff fe6d 	bl	20004288 <__aeabi_i2d>
200045ae:	464a      	mov	r2, r9
200045b0:	4b23      	ldr	r3, [pc, #140]	; (20004640 <__ieee754_log10+0x104>)
200045b2:	0006      	movs	r6, r0
200045b4:	1a9b      	subs	r3, r3, r2
200045b6:	4642      	mov	r2, r8
200045b8:	051b      	lsls	r3, r3, #20
200045ba:	431a      	orrs	r2, r3
200045bc:	000f      	movs	r7, r1
200045be:	0020      	movs	r0, r4
200045c0:	0011      	movs	r1, r2
200045c2:	f000 f855 	bl	20004670 <__ieee754_log>
200045c6:	4a1f      	ldr	r2, [pc, #124]	; (20004644 <__ieee754_log10+0x108>)
200045c8:	0004      	movs	r4, r0
200045ca:	000d      	movs	r5, r1
200045cc:	4b1e      	ldr	r3, [pc, #120]	; (20004648 <__ieee754_log10+0x10c>)
200045ce:	0030      	movs	r0, r6
200045d0:	0039      	movs	r1, r7
200045d2:	f7ff fbcb 	bl	20003d6c <__aeabi_dmul>
200045d6:	4a1d      	ldr	r2, [pc, #116]	; (2000464c <__ieee754_log10+0x110>)
200045d8:	9000      	str	r0, [sp, #0]
200045da:	9101      	str	r1, [sp, #4]
200045dc:	4b1c      	ldr	r3, [pc, #112]	; (20004650 <__ieee754_log10+0x114>)
200045de:	0020      	movs	r0, r4
200045e0:	0029      	movs	r1, r5
200045e2:	f7ff fbc3 	bl	20003d6c <__aeabi_dmul>
200045e6:	0002      	movs	r2, r0
200045e8:	000b      	movs	r3, r1
200045ea:	9800      	ldr	r0, [sp, #0]
200045ec:	9901      	ldr	r1, [sp, #4]
200045ee:	f7fe fd9f 	bl	20003130 <__aeabi_dadd>
200045f2:	4a18      	ldr	r2, [pc, #96]	; (20004654 <__ieee754_log10+0x118>)
200045f4:	0004      	movs	r4, r0
200045f6:	000d      	movs	r5, r1
200045f8:	4b17      	ldr	r3, [pc, #92]	; (20004658 <__ieee754_log10+0x11c>)
200045fa:	0030      	movs	r0, r6
200045fc:	0039      	movs	r1, r7
200045fe:	f7ff fbb5 	bl	20003d6c <__aeabi_dmul>
20004602:	0002      	movs	r2, r0
20004604:	000b      	movs	r3, r1
20004606:	0020      	movs	r0, r4
20004608:	0029      	movs	r1, r5
2000460a:	f7fe fd91 	bl	20003130 <__aeabi_dadd>
2000460e:	e7b8      	b.n	20004582 <__ieee754_log10+0x46>
20004610:	2200      	movs	r2, #0
20004612:	2300      	movs	r3, #0
20004614:	2000      	movs	r0, #0
20004616:	4911      	ldr	r1, [pc, #68]	; (2000465c <__ieee754_log10+0x120>)
20004618:	f7ff f8a6 	bl	20003768 <__aeabi_ddiv>
2000461c:	e7b1      	b.n	20004582 <__ieee754_log10+0x46>
2000461e:	0002      	movs	r2, r0
20004620:	f7fe f872 	bl	20002708 <__aeabi_dsub>
20004624:	2200      	movs	r2, #0
20004626:	2300      	movs	r3, #0
20004628:	f7ff f89e 	bl	20003768 <__aeabi_ddiv>
2000462c:	e7a9      	b.n	20004582 <__ieee754_log10+0x46>
2000462e:	46c0      	nop			; (mov r8, r8)
20004630:	000fffff 	strdeq	pc, [pc], -pc	; <UNPREDICTABLE>
20004634:	43500000 	cmpmi	r0, #0
20004638:	7fefffff 	svcvc	0x00efffff
2000463c:	fffffc01 			; <UNDEFINED> instruction: 0xfffffc01
20004640:	000003ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
20004644:	11f12b36 	mvnsne	r2, r6, lsr fp
20004648:	3d59fef3 	ldclcc	14, cr15, [r9, #-972]	; 0xfffffc34
2000464c:	1526e50e 	strne	lr, [r6, #-1294]!	; 0xfffffaf2
20004650:	3fdbcb7b 	svccc	0x00dbcb7b
20004654:	509f6000 	addspl	r6, pc, r0
20004658:	3fd34413 	svccc	0x00d34413
2000465c:	c3500000 	cmpgt	r0, #0

20004660 <matherr>:
20004660:	2000      	movs	r0, #0
20004662:	4770      	bx	lr

20004664 <nan>:
20004664:	2000      	movs	r0, #0
20004666:	4901      	ldr	r1, [pc, #4]	; (2000466c <nan+0x8>)
20004668:	4770      	bx	lr
2000466a:	46c0      	nop			; (mov r8, r8)
2000466c:	7ff80000 	svcvc	0x00f80000

20004670 <__ieee754_log>:
20004670:	b5f0      	push	{r4, r5, r6, r7, lr}
20004672:	46d6      	mov	lr, sl
20004674:	464f      	mov	r7, r9
20004676:	4646      	mov	r6, r8
20004678:	b5c0      	push	{r6, r7, lr}
2000467a:	4aca      	ldr	r2, [pc, #808]	; (200049a4 <__ieee754_log+0x334>)
2000467c:	b086      	sub	sp, #24
2000467e:	000b      	movs	r3, r1
20004680:	4291      	cmp	r1, r2
20004682:	dd00      	ble.n	20004686 <__ieee754_log+0x16>
20004684:	e0cc      	b.n	20004820 <__ieee754_log+0x1b0>
20004686:	004a      	lsls	r2, r1, #1
20004688:	0852      	lsrs	r2, r2, #1
2000468a:	4302      	orrs	r2, r0
2000468c:	d100      	bne.n	20004690 <__ieee754_log+0x20>
2000468e:	e0d6      	b.n	2000483e <__ieee754_log+0x1ce>
20004690:	2900      	cmp	r1, #0
20004692:	da00      	bge.n	20004696 <__ieee754_log+0x26>
20004694:	e0e6      	b.n	20004864 <__ieee754_log+0x1f4>
20004696:	4bc4      	ldr	r3, [pc, #784]	; (200049a8 <__ieee754_log+0x338>)
20004698:	2200      	movs	r2, #0
2000469a:	f7ff fb67 	bl	20003d6c <__aeabi_dmul>
2000469e:	2536      	movs	r5, #54	; 0x36
200046a0:	4cc2      	ldr	r4, [pc, #776]	; (200049ac <__ieee754_log+0x33c>)
200046a2:	000b      	movs	r3, r1
200046a4:	426d      	negs	r5, r5
200046a6:	42a3      	cmp	r3, r4
200046a8:	dd00      	ble.n	200046ac <__ieee754_log+0x3c>
200046aa:	e0be      	b.n	2000482a <__ieee754_log+0x1ba>
200046ac:	151a      	asrs	r2, r3, #20
200046ae:	4cc0      	ldr	r4, [pc, #768]	; (200049b0 <__ieee754_log+0x340>)
200046b0:	031b      	lsls	r3, r3, #12
200046b2:	0b1b      	lsrs	r3, r3, #12
200046b4:	4698      	mov	r8, r3
200046b6:	46a4      	mov	ip, r4
200046b8:	2480      	movs	r4, #128	; 0x80
200046ba:	4bbe      	ldr	r3, [pc, #760]	; (200049b4 <__ieee754_log+0x344>)
200046bc:	0364      	lsls	r4, r4, #13
200046be:	4443      	add	r3, r8
200046c0:	4023      	ands	r3, r4
200046c2:	4cbd      	ldr	r4, [pc, #756]	; (200049b8 <__ieee754_log+0x348>)
200046c4:	4462      	add	r2, ip
200046c6:	1952      	adds	r2, r2, r5
200046c8:	405c      	eors	r4, r3
200046ca:	4645      	mov	r5, r8
200046cc:	151b      	asrs	r3, r3, #20
200046ce:	4699      	mov	r9, r3
200046d0:	4325      	orrs	r5, r4
200046d2:	4bb9      	ldr	r3, [pc, #740]	; (200049b8 <__ieee754_log+0x348>)
200046d4:	0029      	movs	r1, r5
200046d6:	4491      	add	r9, r2
200046d8:	2200      	movs	r2, #0
200046da:	f7fe f815 	bl	20002708 <__aeabi_dsub>
200046de:	4643      	mov	r3, r8
200046e0:	3302      	adds	r3, #2
200046e2:	031b      	lsls	r3, r3, #12
200046e4:	0006      	movs	r6, r0
200046e6:	000f      	movs	r7, r1
200046e8:	0b1b      	lsrs	r3, r3, #12
200046ea:	2200      	movs	r2, #0
200046ec:	2b02      	cmp	r3, #2
200046ee:	dc00      	bgt.n	200046f2 <__ieee754_log+0x82>
200046f0:	e0ac      	b.n	2000484c <__ieee754_log+0x1dc>
200046f2:	2380      	movs	r3, #128	; 0x80
200046f4:	05db      	lsls	r3, r3, #23
200046f6:	f7fe fd1b 	bl	20003130 <__aeabi_dadd>
200046fa:	0002      	movs	r2, r0
200046fc:	000b      	movs	r3, r1
200046fe:	0030      	movs	r0, r6
20004700:	0039      	movs	r1, r7
20004702:	f7ff f831 	bl	20003768 <__aeabi_ddiv>
20004706:	0004      	movs	r4, r0
20004708:	4648      	mov	r0, r9
2000470a:	000d      	movs	r5, r1
2000470c:	f7ff fdbc 	bl	20004288 <__aeabi_i2d>
20004710:	0022      	movs	r2, r4
20004712:	9000      	str	r0, [sp, #0]
20004714:	9101      	str	r1, [sp, #4]
20004716:	002b      	movs	r3, r5
20004718:	0020      	movs	r0, r4
2000471a:	0029      	movs	r1, r5
2000471c:	9404      	str	r4, [sp, #16]
2000471e:	9505      	str	r5, [sp, #20]
20004720:	f7ff fb24 	bl	20003d6c <__aeabi_dmul>
20004724:	000d      	movs	r5, r1
20004726:	0004      	movs	r4, r0
20004728:	49a4      	ldr	r1, [pc, #656]	; (200049bc <__ieee754_log+0x34c>)
2000472a:	0022      	movs	r2, r4
2000472c:	4441      	add	r1, r8
2000472e:	002b      	movs	r3, r5
20004730:	468a      	mov	sl, r1
20004732:	0020      	movs	r0, r4
20004734:	0029      	movs	r1, r5
20004736:	9402      	str	r4, [sp, #8]
20004738:	9503      	str	r5, [sp, #12]
2000473a:	f7ff fb17 	bl	20003d6c <__aeabi_dmul>
2000473e:	0004      	movs	r4, r0
20004740:	000d      	movs	r5, r1
20004742:	4a9f      	ldr	r2, [pc, #636]	; (200049c0 <__ieee754_log+0x350>)
20004744:	4b9f      	ldr	r3, [pc, #636]	; (200049c4 <__ieee754_log+0x354>)
20004746:	f7ff fb11 	bl	20003d6c <__aeabi_dmul>
2000474a:	4a9f      	ldr	r2, [pc, #636]	; (200049c8 <__ieee754_log+0x358>)
2000474c:	4b9f      	ldr	r3, [pc, #636]	; (200049cc <__ieee754_log+0x35c>)
2000474e:	f7fe fcef 	bl	20003130 <__aeabi_dadd>
20004752:	0022      	movs	r2, r4
20004754:	002b      	movs	r3, r5
20004756:	f7ff fb09 	bl	20003d6c <__aeabi_dmul>
2000475a:	4a9d      	ldr	r2, [pc, #628]	; (200049d0 <__ieee754_log+0x360>)
2000475c:	4b9d      	ldr	r3, [pc, #628]	; (200049d4 <__ieee754_log+0x364>)
2000475e:	f7fe fce7 	bl	20003130 <__aeabi_dadd>
20004762:	0022      	movs	r2, r4
20004764:	002b      	movs	r3, r5
20004766:	f7ff fb01 	bl	20003d6c <__aeabi_dmul>
2000476a:	4a9b      	ldr	r2, [pc, #620]	; (200049d8 <__ieee754_log+0x368>)
2000476c:	4b9b      	ldr	r3, [pc, #620]	; (200049dc <__ieee754_log+0x36c>)
2000476e:	f7fe fcdf 	bl	20003130 <__aeabi_dadd>
20004772:	9a02      	ldr	r2, [sp, #8]
20004774:	9b03      	ldr	r3, [sp, #12]
20004776:	f7ff faf9 	bl	20003d6c <__aeabi_dmul>
2000477a:	4a99      	ldr	r2, [pc, #612]	; (200049e0 <__ieee754_log+0x370>)
2000477c:	9002      	str	r0, [sp, #8]
2000477e:	9103      	str	r1, [sp, #12]
20004780:	4b98      	ldr	r3, [pc, #608]	; (200049e4 <__ieee754_log+0x374>)
20004782:	0020      	movs	r0, r4
20004784:	0029      	movs	r1, r5
20004786:	f7ff faf1 	bl	20003d6c <__aeabi_dmul>
2000478a:	4a97      	ldr	r2, [pc, #604]	; (200049e8 <__ieee754_log+0x378>)
2000478c:	4b97      	ldr	r3, [pc, #604]	; (200049ec <__ieee754_log+0x37c>)
2000478e:	f7fe fccf 	bl	20003130 <__aeabi_dadd>
20004792:	0022      	movs	r2, r4
20004794:	002b      	movs	r3, r5
20004796:	f7ff fae9 	bl	20003d6c <__aeabi_dmul>
2000479a:	4a95      	ldr	r2, [pc, #596]	; (200049f0 <__ieee754_log+0x380>)
2000479c:	4b95      	ldr	r3, [pc, #596]	; (200049f4 <__ieee754_log+0x384>)
2000479e:	f7fe fcc7 	bl	20003130 <__aeabi_dadd>
200047a2:	0022      	movs	r2, r4
200047a4:	002b      	movs	r3, r5
200047a6:	f7ff fae1 	bl	20003d6c <__aeabi_dmul>
200047aa:	000b      	movs	r3, r1
200047ac:	0002      	movs	r2, r0
200047ae:	9802      	ldr	r0, [sp, #8]
200047b0:	9903      	ldr	r1, [sp, #12]
200047b2:	f7fe fcbd 	bl	20003130 <__aeabi_dadd>
200047b6:	000d      	movs	r5, r1
200047b8:	4641      	mov	r1, r8
200047ba:	4b8f      	ldr	r3, [pc, #572]	; (200049f8 <__ieee754_log+0x388>)
200047bc:	0004      	movs	r4, r0
200047be:	1a5b      	subs	r3, r3, r1
200047c0:	4651      	mov	r1, sl
200047c2:	430b      	orrs	r3, r1
200047c4:	2b00      	cmp	r3, #0
200047c6:	dc00      	bgt.n	200047ca <__ieee754_log+0x15a>
200047c8:	e095      	b.n	200048f6 <__ieee754_log+0x286>
200047ca:	2200      	movs	r2, #0
200047cc:	4b8b      	ldr	r3, [pc, #556]	; (200049fc <__ieee754_log+0x38c>)
200047ce:	0030      	movs	r0, r6
200047d0:	0039      	movs	r1, r7
200047d2:	f7ff facb 	bl	20003d6c <__aeabi_dmul>
200047d6:	0032      	movs	r2, r6
200047d8:	003b      	movs	r3, r7
200047da:	f7ff fac7 	bl	20003d6c <__aeabi_dmul>
200047de:	000a      	movs	r2, r1
200047e0:	0001      	movs	r1, r0
200047e2:	0013      	movs	r3, r2
200047e4:	9102      	str	r1, [sp, #8]
200047e6:	9203      	str	r2, [sp, #12]
200047e8:	0002      	movs	r2, r0
200047ea:	0029      	movs	r1, r5
200047ec:	0020      	movs	r0, r4
200047ee:	f7fe fc9f 	bl	20003130 <__aeabi_dadd>
200047f2:	9a04      	ldr	r2, [sp, #16]
200047f4:	9b05      	ldr	r3, [sp, #20]
200047f6:	f7ff fab9 	bl	20003d6c <__aeabi_dmul>
200047fa:	464b      	mov	r3, r9
200047fc:	0004      	movs	r4, r0
200047fe:	000d      	movs	r5, r1
20004800:	2b00      	cmp	r3, #0
20004802:	d000      	beq.n	20004806 <__ieee754_log+0x196>
20004804:	e08d      	b.n	20004922 <__ieee754_log+0x2b2>
20004806:	0002      	movs	r2, r0
20004808:	000b      	movs	r3, r1
2000480a:	9802      	ldr	r0, [sp, #8]
2000480c:	9903      	ldr	r1, [sp, #12]
2000480e:	f7fd ff7b 	bl	20002708 <__aeabi_dsub>
20004812:	0002      	movs	r2, r0
20004814:	000b      	movs	r3, r1
20004816:	0030      	movs	r0, r6
20004818:	0039      	movs	r1, r7
2000481a:	f7fd ff75 	bl	20002708 <__aeabi_dsub>
2000481e:	e008      	b.n	20004832 <__ieee754_log+0x1c2>
20004820:	4c62      	ldr	r4, [pc, #392]	; (200049ac <__ieee754_log+0x33c>)
20004822:	2500      	movs	r5, #0
20004824:	42a3      	cmp	r3, r4
20004826:	dc00      	bgt.n	2000482a <__ieee754_log+0x1ba>
20004828:	e740      	b.n	200046ac <__ieee754_log+0x3c>
2000482a:	0002      	movs	r2, r0
2000482c:	000b      	movs	r3, r1
2000482e:	f7fe fc7f 	bl	20003130 <__aeabi_dadd>
20004832:	b006      	add	sp, #24
20004834:	bc1c      	pop	{r2, r3, r4}
20004836:	4690      	mov	r8, r2
20004838:	4699      	mov	r9, r3
2000483a:	46a2      	mov	sl, r4
2000483c:	bdf0      	pop	{r4, r5, r6, r7, pc}
2000483e:	2200      	movs	r2, #0
20004840:	2300      	movs	r3, #0
20004842:	2000      	movs	r0, #0
20004844:	496e      	ldr	r1, [pc, #440]	; (20004a00 <__ieee754_log+0x390>)
20004846:	f7fe ff8f 	bl	20003768 <__aeabi_ddiv>
2000484a:	e7f2      	b.n	20004832 <__ieee754_log+0x1c2>
2000484c:	2300      	movs	r3, #0
2000484e:	f7fe fb1b 	bl	20002e88 <__aeabi_dcmpeq>
20004852:	2800      	cmp	r0, #0
20004854:	d00e      	beq.n	20004874 <__ieee754_log+0x204>
20004856:	464b      	mov	r3, r9
20004858:	2b00      	cmp	r3, #0
2000485a:	d000      	beq.n	2000485e <__ieee754_log+0x1ee>
2000485c:	e084      	b.n	20004968 <__ieee754_log+0x2f8>
2000485e:	2000      	movs	r0, #0
20004860:	2100      	movs	r1, #0
20004862:	e7e6      	b.n	20004832 <__ieee754_log+0x1c2>
20004864:	0002      	movs	r2, r0
20004866:	f7fd ff4f 	bl	20002708 <__aeabi_dsub>
2000486a:	2200      	movs	r2, #0
2000486c:	2300      	movs	r3, #0
2000486e:	f7fe ff7b 	bl	20003768 <__aeabi_ddiv>
20004872:	e7de      	b.n	20004832 <__ieee754_log+0x1c2>
20004874:	4a63      	ldr	r2, [pc, #396]	; (20004a04 <__ieee754_log+0x394>)
20004876:	4b64      	ldr	r3, [pc, #400]	; (20004a08 <__ieee754_log+0x398>)
20004878:	0030      	movs	r0, r6
2000487a:	0039      	movs	r1, r7
2000487c:	f7ff fa76 	bl	20003d6c <__aeabi_dmul>
20004880:	0002      	movs	r2, r0
20004882:	000b      	movs	r3, r1
20004884:	2000      	movs	r0, #0
20004886:	495d      	ldr	r1, [pc, #372]	; (200049fc <__ieee754_log+0x38c>)
20004888:	f7fd ff3e 	bl	20002708 <__aeabi_dsub>
2000488c:	0032      	movs	r2, r6
2000488e:	0004      	movs	r4, r0
20004890:	000d      	movs	r5, r1
20004892:	003b      	movs	r3, r7
20004894:	0030      	movs	r0, r6
20004896:	0039      	movs	r1, r7
20004898:	f7ff fa68 	bl	20003d6c <__aeabi_dmul>
2000489c:	000b      	movs	r3, r1
2000489e:	0002      	movs	r2, r0
200048a0:	0029      	movs	r1, r5
200048a2:	0020      	movs	r0, r4
200048a4:	f7ff fa62 	bl	20003d6c <__aeabi_dmul>
200048a8:	464b      	mov	r3, r9
200048aa:	0004      	movs	r4, r0
200048ac:	000d      	movs	r5, r1
200048ae:	2b00      	cmp	r3, #0
200048b0:	d030      	beq.n	20004914 <__ieee754_log+0x2a4>
200048b2:	4648      	mov	r0, r9
200048b4:	f7ff fce8 	bl	20004288 <__aeabi_i2d>
200048b8:	9000      	str	r0, [sp, #0]
200048ba:	9101      	str	r1, [sp, #4]
200048bc:	4a53      	ldr	r2, [pc, #332]	; (20004a0c <__ieee754_log+0x39c>)
200048be:	4b54      	ldr	r3, [pc, #336]	; (20004a10 <__ieee754_log+0x3a0>)
200048c0:	f7ff fa54 	bl	20003d6c <__aeabi_dmul>
200048c4:	4a53      	ldr	r2, [pc, #332]	; (20004a14 <__ieee754_log+0x3a4>)
200048c6:	9002      	str	r0, [sp, #8]
200048c8:	9103      	str	r1, [sp, #12]
200048ca:	9800      	ldr	r0, [sp, #0]
200048cc:	9901      	ldr	r1, [sp, #4]
200048ce:	4b52      	ldr	r3, [pc, #328]	; (20004a18 <__ieee754_log+0x3a8>)
200048d0:	f7ff fa4c 	bl	20003d6c <__aeabi_dmul>
200048d4:	0002      	movs	r2, r0
200048d6:	000b      	movs	r3, r1
200048d8:	0020      	movs	r0, r4
200048da:	0029      	movs	r1, r5
200048dc:	f7fd ff14 	bl	20002708 <__aeabi_dsub>
200048e0:	0032      	movs	r2, r6
200048e2:	003b      	movs	r3, r7
200048e4:	f7fd ff10 	bl	20002708 <__aeabi_dsub>
200048e8:	0002      	movs	r2, r0
200048ea:	000b      	movs	r3, r1
200048ec:	9802      	ldr	r0, [sp, #8]
200048ee:	9903      	ldr	r1, [sp, #12]
200048f0:	f7fd ff0a 	bl	20002708 <__aeabi_dsub>
200048f4:	e79d      	b.n	20004832 <__ieee754_log+0x1c2>
200048f6:	0022      	movs	r2, r4
200048f8:	002b      	movs	r3, r5
200048fa:	0030      	movs	r0, r6
200048fc:	0039      	movs	r1, r7
200048fe:	f7fd ff03 	bl	20002708 <__aeabi_dsub>
20004902:	9a04      	ldr	r2, [sp, #16]
20004904:	9b05      	ldr	r3, [sp, #20]
20004906:	f7ff fa31 	bl	20003d6c <__aeabi_dmul>
2000490a:	464b      	mov	r3, r9
2000490c:	0004      	movs	r4, r0
2000490e:	000d      	movs	r5, r1
20004910:	2b00      	cmp	r3, #0
20004912:	d141      	bne.n	20004998 <__ieee754_log+0x328>
20004914:	0022      	movs	r2, r4
20004916:	002b      	movs	r3, r5
20004918:	0030      	movs	r0, r6
2000491a:	0039      	movs	r1, r7
2000491c:	f7fd fef4 	bl	20002708 <__aeabi_dsub>
20004920:	e787      	b.n	20004832 <__ieee754_log+0x1c2>
20004922:	4a3a      	ldr	r2, [pc, #232]	; (20004a0c <__ieee754_log+0x39c>)
20004924:	4b3a      	ldr	r3, [pc, #232]	; (20004a10 <__ieee754_log+0x3a0>)
20004926:	9800      	ldr	r0, [sp, #0]
20004928:	9901      	ldr	r1, [sp, #4]
2000492a:	f7ff fa1f 	bl	20003d6c <__aeabi_dmul>
2000492e:	4a39      	ldr	r2, [pc, #228]	; (20004a14 <__ieee754_log+0x3a4>)
20004930:	9004      	str	r0, [sp, #16]
20004932:	9105      	str	r1, [sp, #20]
20004934:	9800      	ldr	r0, [sp, #0]
20004936:	9901      	ldr	r1, [sp, #4]
20004938:	4b37      	ldr	r3, [pc, #220]	; (20004a18 <__ieee754_log+0x3a8>)
2000493a:	f7ff fa17 	bl	20003d6c <__aeabi_dmul>
2000493e:	0022      	movs	r2, r4
20004940:	002b      	movs	r3, r5
20004942:	f7fe fbf5 	bl	20003130 <__aeabi_dadd>
20004946:	0002      	movs	r2, r0
20004948:	000b      	movs	r3, r1
2000494a:	9802      	ldr	r0, [sp, #8]
2000494c:	9903      	ldr	r1, [sp, #12]
2000494e:	f7fd fedb 	bl	20002708 <__aeabi_dsub>
20004952:	0032      	movs	r2, r6
20004954:	003b      	movs	r3, r7
20004956:	f7fd fed7 	bl	20002708 <__aeabi_dsub>
2000495a:	0002      	movs	r2, r0
2000495c:	000b      	movs	r3, r1
2000495e:	9804      	ldr	r0, [sp, #16]
20004960:	9905      	ldr	r1, [sp, #20]
20004962:	f7fd fed1 	bl	20002708 <__aeabi_dsub>
20004966:	e764      	b.n	20004832 <__ieee754_log+0x1c2>
20004968:	4648      	mov	r0, r9
2000496a:	f7ff fc8d 	bl	20004288 <__aeabi_i2d>
2000496e:	4a27      	ldr	r2, [pc, #156]	; (20004a0c <__ieee754_log+0x39c>)
20004970:	4b27      	ldr	r3, [pc, #156]	; (20004a10 <__ieee754_log+0x3a0>)
20004972:	0004      	movs	r4, r0
20004974:	000d      	movs	r5, r1
20004976:	f7ff f9f9 	bl	20003d6c <__aeabi_dmul>
2000497a:	4a26      	ldr	r2, [pc, #152]	; (20004a14 <__ieee754_log+0x3a4>)
2000497c:	0006      	movs	r6, r0
2000497e:	000f      	movs	r7, r1
20004980:	4b25      	ldr	r3, [pc, #148]	; (20004a18 <__ieee754_log+0x3a8>)
20004982:	0020      	movs	r0, r4
20004984:	0029      	movs	r1, r5
20004986:	f7ff f9f1 	bl	20003d6c <__aeabi_dmul>
2000498a:	0002      	movs	r2, r0
2000498c:	000b      	movs	r3, r1
2000498e:	0030      	movs	r0, r6
20004990:	0039      	movs	r1, r7
20004992:	f7fe fbcd 	bl	20003130 <__aeabi_dadd>
20004996:	e74c      	b.n	20004832 <__ieee754_log+0x1c2>
20004998:	4a1c      	ldr	r2, [pc, #112]	; (20004a0c <__ieee754_log+0x39c>)
2000499a:	4b1d      	ldr	r3, [pc, #116]	; (20004a10 <__ieee754_log+0x3a0>)
2000499c:	9800      	ldr	r0, [sp, #0]
2000499e:	9901      	ldr	r1, [sp, #4]
200049a0:	e78e      	b.n	200048c0 <__ieee754_log+0x250>
200049a2:	46c0      	nop			; (mov r8, r8)
200049a4:	000fffff 	strdeq	pc, [pc], -pc	; <UNPREDICTABLE>
200049a8:	43500000 	cmpmi	r0, #0
200049ac:	7fefffff 	svcvc	0x00efffff
200049b0:	fffffc01 			; <UNDEFINED> instruction: 0xfffffc01
200049b4:	00095f64 	andeq	r5, r9, r4, ror #30
200049b8:	3ff00000 	svccc	0x00f00000	; IMB
200049bc:	fff9eb86 			; <UNDEFINED> instruction: 0xfff9eb86
200049c0:	df3e5244 	svcle	0x003e5244
200049c4:	3fc2f112 	svccc	0x00c2f112
200049c8:	96cb03de 			; <UNDEFINED> instruction: 0x96cb03de
200049cc:	3fc74664 	svccc	0x00c74664
200049d0:	94229359 	strtls	r9, [r2], #-857	; 0xfffffca7
200049d4:	3fd24924 	svccc	0x00d24924
200049d8:	55555593 	ldrbpl	r5, [r5, #-1427]	; 0xfffffa6d
200049dc:	3fe55555 	svccc	0x00e55555
200049e0:	d078c69f 			; <UNDEFINED> instruction: 0xd078c69f
200049e4:	3fc39a09 	svccc	0x00c39a09
200049e8:	1d8e78af 	stcne	8, cr7, [lr, #700]	; 0x2bc
200049ec:	3fcc71c5 	svccc	0x00cc71c5
200049f0:	9997fa04 	ldmibls	r7, {r2, r9, fp, ip, sp, lr, pc}
200049f4:	3fd99999 	svccc	0x00d99999
200049f8:	0006b851 	andeq	fp, r6, r1, asr r8
200049fc:	3fe00000 	svccc	0x00e00000
20004a00:	c3500000 	cmpgt	r0, #0
20004a04:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab
20004a08:	3fd55555 	svccc	0x00d55555
20004a0c:	fee00000 	cdp2	0, 14, cr0, cr0, cr0, {0}
20004a10:	3fe62e42 	svccc	0x00e62e42
20004a14:	35793c76 	ldrbcc	r3, [r9, #-3190]!	; 0xfffff38a
20004a18:	3dea39ef 			; <UNDEFINED> instruction: 0x3dea39ef

20004a1c <__errno>:
20004a1c:	4b01      	ldr	r3, [pc, #4]	; (20004a24 <__errno+0x8>)
20004a1e:	6818      	ldr	r0, [r3, #0]
20004a20:	4770      	bx	lr
20004a22:	46c0      	nop			; (mov r8, r8)
20004a24:	20004b18 	andcs	r4, r0, r8, lsl fp

20004a28 <msTicks>:
20004a28:	00000000 	andeq	r0, r0, r0

20004a2c <txBuffer>:
20004a2c:	00000000 	andeq	r0, r0, r0

20004a30 <rxBuffer>:
20004a30:	00000000 	andeq	r0, r0, r0

20004a34 <realTxBuffer>:
	...

20004a9c <realRxBuffer>:
	...

20004b04 <APBAHBPrescTable>:
20004b04:	00000000 	andeq	r0, r0, r0
20004b08:	04030201 	streq	r0, [r3], #-513	; 0xfffffdff
20004b0c:	04030201 	streq	r0, [r3], #-513	; 0xfffffdff
20004b10:	09080706 	stmdbeq	r8, {r1, r2, r8, r9, sl}

20004b14 <__fdlib_version>:
20004b14:	00000001 	andeq	r0, r0, r1

20004b18 <_impure_ptr>:
20004b18:	20004b20 	andcs	r4, r0, r0, lsr #22
20004b1c:	00000000 	andeq	r0, r0, r0

20004b20 <impure_data>:
20004b20:	00000000 	andeq	r0, r0, r0
20004b24:	20004e0c 	andcs	r4, r0, ip, lsl #28
20004b28:	20004e74 	andcs	r4, r0, r4, ror lr
20004b2c:	20004edc 	ldrdcs	r4, [r0], -ip
	...
20004bc8:	00000001 	andeq	r0, r0, r1
20004bcc:	00000000 	andeq	r0, r0, r0
20004bd0:	abcd330e 	blge	1f351810 <startup-0xcae7f0>
20004bd4:	e66d1234 			; <UNDEFINED> instruction: 0xe66d1234
20004bd8:	0005deec 	andeq	sp, r5, ip, ror #29
20004bdc:	0000000b 	andeq	r0, r0, fp
	...
20004f48:	0301ff00 	movweq	pc, #7936	; 0x1f00	; <UNPREDICTABLE>
20004f4c:	00000000 	andeq	r0, r0, r0
20004f50:	00000008 	andeq	r0, r0, r8
20004f54:	00000004 	andeq	r0, r0, r4
20004f58:	00000000 	andeq	r0, r0, r0
20004f5c:	0301ff01 	movweq	pc, #7937	; 0x1f01	; <UNPREDICTABLE>
20004f60:	00000000 	andeq	r0, r0, r0
20004f64:	00000020 	andeq	r0, r0, r0, lsr #32
20004f68:	00000010 	andeq	r0, r0, r0, lsl r0
20004f6c:	00000000 	andeq	r0, r0, r0
20004f70:	0301ff02 	movweq	pc, #7938	; 0x1f02	; <UNPREDICTABLE>
20004f74:	00000000 	andeq	r0, r0, r0
20004f78:	00000002 	andeq	r0, r0, r2
20004f7c:	00000001 	andeq	r0, r0, r1
20004f80:	00000000 	andeq	r0, r0, r0
20004f84:	0301ff03 	movweq	pc, #7939	; 0x1f03	; <UNPREDICTABLE>
20004f88:	00000000 	andeq	r0, r0, r0
20004f8c:	00000080 	andeq	r0, r0, r0, lsl #1
20004f90:	00000040 	andeq	r0, r0, r0, asr #32
20004f94:	00000000 	andeq	r0, r0, r0
20004f98:	20003a0c 	andcs	r3, r0, ip, lsl #20
20004f9c:	2000387e 	andcs	r3, r0, lr, ror r8
20004fa0:	200038c2 	andcs	r3, r0, r2, asr #17
20004fa4:	20003826 	andcs	r3, r0, r6, lsr #16
20004fa8:	200038c2 	andcs	r3, r0, r2, asr #17
20004fac:	200039b2 			; <UNDEFINED> instruction: 0x200039b2
20004fb0:	200038c2 	andcs	r3, r0, r2, asr #17
20004fb4:	20003826 	andcs	r3, r0, r6, lsr #16
20004fb8:	2000387e 	andcs	r3, r0, lr, ror r8
20004fbc:	2000387e 	andcs	r3, r0, lr, ror r8
20004fc0:	200039b2 			; <UNDEFINED> instruction: 0x200039b2
20004fc4:	20003826 	andcs	r3, r0, r6, lsr #16
20004fc8:	2000381e 	andcs	r3, r0, lr, lsl r8
20004fcc:	2000381e 	andcs	r3, r0, lr, lsl r8
20004fd0:	2000381e 	andcs	r3, r0, lr, lsl r8
20004fd4:	200039c0 	andcs	r3, r0, r0, asr #19
20004fd8:	20003f24 	andcs	r3, r0, r4, lsr #30
20004fdc:	20003e26 	andcs	r3, r0, r6, lsr #28
20004fe0:	20003e26 	andcs	r3, r0, r6, lsr #28
20004fe4:	20004144 	andcs	r4, r0, r4, asr #2
20004fe8:	20003e20 	andcs	r3, r0, r0, lsr #28
20004fec:	20003e20 	andcs	r3, r0, r0, lsr #28
20004ff0:	2000412c 	andcs	r4, r0, ip, lsr #2
20004ff4:	20004144 	andcs	r4, r0, r4, asr #2
20004ff8:	20003e20 	andcs	r3, r0, r0, lsr #28
20004ffc:	2000412c 	andcs	r4, r0, ip, lsr #2
20005000:	20003e20 	andcs	r3, r0, r0, lsr #28
20005004:	20004144 	andcs	r4, r0, r4, asr #2
20005008:	2000413a 	andcs	r4, r0, sl, lsr r1
2000500c:	2000413a 	andcs	r4, r0, sl, lsr r1
20005010:	2000413a 	andcs	r4, r0, sl, lsr r1
20005014:	20004148 	andcs	r4, r0, r8, asr #2
20005018:	31676f6c 	cmncc	r7, ip, ror #30
2000501c:	00000030 	andeq	r0, r0, r0, lsr r0
20005020:	00000000 	andeq	r0, r0, r0

20005024 <_global_impure_ptr>:
20005024:	20004b20 	andcs	r4, r0, r0, lsr #22

Disassembly of section .debug_info:

00000000 <.debug_info>:
       0:	000009cc 	andeq	r0, r0, ip, asr #19
       4:	00000004 	andeq	r0, r0, r4
       8:	01040000 	mrseq	r0, (UNDEF: 4)
       c:	00000251 	andeq	r0, r0, r1, asr r2
      10:	0005d50c 	andeq	sp, r5, ip, lsl #10
      14:	0001f700 	andeq	pc, r1, r0, lsl #14
      18:	00001000 	andeq	r1, r0, r0
      1c:	0009fe20 	andeq	pc, r9, r0, lsr #28
      20:	00000000 	andeq	r0, r0, r0
      24:	06010200 	streq	r0, [r1], -r0, lsl #4
      28:	00000245 	andeq	r0, r0, r5, asr #4
      2c:	0001bf03 	andeq	fp, r1, r3, lsl #30
      30:	372b0200 	strcc	r0, [fp, -r0, lsl #4]!
      34:	02000000 	andeq	r0, r0, #0
      38:	02430801 	subeq	r0, r3, #65536	; 0x10000
      3c:	02020000 	andeq	r0, r2, #0
      40:	0000bd05 	andeq	fp, r0, r5, lsl #26
      44:	00950300 	addseq	r0, r5, r0, lsl #6
      48:	39020000 	stmdbcc	r2, {}	; <UNPREDICTABLE>
      4c:	00000050 	andeq	r0, r0, r0, asr r0
      50:	fa070202 	blx	1c0860 <startup-0x1fe3f7a0>
      54:	03000003 	movweq	r0, #3
      58:	0000053d 	andeq	r0, r0, sp, lsr r5
      5c:	00624d02 	rsbeq	r4, r2, r2, lsl #26
      60:	04020000 	streq	r0, [r2], #-0
      64:	00016d05 	andeq	r6, r1, r5, lsl #26
      68:	050e0300 	streq	r0, [lr, #-768]	; 0xfffffd00
      6c:	4f020000 	svcmi	0x00020000
      70:	00000074 	andeq	r0, r0, r4, ror r0
      74:	1a070402 	bne	1c1084 <startup-0x1fe3ef7c>
      78:	02000003 	andeq	r0, r0, #3
      7c:	01680508 	cmneq	r8, r8, lsl #10
      80:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
      84:	00031507 	andeq	r1, r3, r7, lsl #10
      88:	05040400 	streq	r0, [r4, #-1024]	; 0xfffffc00
      8c:	00746e69 	rsbseq	r6, r4, r9, ror #28
      90:	1f070402 	svcne	0x00070402
      94:	03000003 	movweq	r0, #3
      98:	000001c1 	andeq	r0, r0, r1, asr #3
      9c:	002c1803 	eoreq	r1, ip, r3, lsl #16
      a0:	97030000 	strls	r0, [r3, -r0]
      a4:	03000000 	movweq	r0, #0
      a8:	00004524 	andeq	r4, r0, r4, lsr #10
      ac:	00a20500 	adceq	r0, r2, r0, lsl #10
      b0:	3f030000 	svccc	0x00030000
      b4:	03000005 	movweq	r0, #5
      b8:	0000572c 	andeq	r5, r0, ip, lsr #14
      bc:	00b20500 	adcseq	r0, r2, r0, lsl #10
      c0:	10030000 	andne	r0, r3, r0
      c4:	03000005 	movweq	r0, #5
      c8:	00006930 	andeq	r6, r0, r0, lsr r9
      cc:	06330600 	ldrteq	r0, [r3], -r0, lsl #12
      d0:	fa040000 	blx	1000d8 <startup-0x1fefff28>
      d4:	0000bd06 	andeq	fp, r0, r6, lsl #26
      d8:	043d0700 	ldrteq	r0, [sp], #-1792	; 0xfffff900
      dc:	3b050000 	blcc	1400e4 <startup-0x1febff1c>
      e0:	000000c2 	andeq	r0, r0, r2, asr #1
      e4:	37010708 	strcc	r0, [r1, -r8, lsl #14]
      e8:	06000000 	streq	r0, [r0], -r0
      ec:	00ff035d 	rscseq	r0, pc, sp, asr r3	; <UNPREDICTABLE>
      f0:	7a090000 	bvc	2400f8 <startup-0x1fdbff08>
      f4:	00000016 	andeq	r0, r0, r6, lsl r0
      f8:	5445530a 	strbpl	r5, [r5], #-778	; 0xfffffcf6
      fc:	0b000100 	bleq	504 <startup-0x1ffffafc>
     100:	00000f08 	andeq	r0, r0, r8, lsl #30
     104:	e4035d06 	str	r5, [r3], #-3334	; 0xfffff2fa
     108:	0b000000 	bleq	110 <startup-0x1ffffef0>
     10c:	00000fc9 	andeq	r0, r0, r9, asr #31
     110:	e4035d06 	str	r5, [r3], #-3334	; 0xfffff2fa
     114:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
     118:	00370107 	eorseq	r0, r7, r7, lsl #2
     11c:	5f060000 	svcpl	0x00060000
     120:	00013203 	andeq	r3, r1, r3, lsl #4
     124:	012b0900 			; <UNDEFINED> instruction: 0x012b0900
     128:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
     12c:	00000665 	andeq	r0, r0, r5, ror #12
     130:	e70b0001 	str	r0, [fp, -r1]
     134:	06000004 	streq	r0, [r0], -r4
     138:	0117035f 	tsteq	r7, pc, asr r3
     13c:	1c0c0000 	stcne	0, cr0, [ip], {-0}
     140:	fc077306 	stc2	3, cr7, [r7], {6}
     144:	0d000001 	stceq	0, cr0, [r0, #-4]
     148:	06005253 			; <UNDEFINED> instruction: 0x06005253
     14c:	00ad0775 	adceq	r0, sp, r5, ror r7
     150:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
     154:	00000481 	andeq	r0, r0, r1, lsl #9
     158:	a2077606 	andge	r7, r7, #6291456	; 0x600000
     15c:	02000000 	andeq	r0, r0, #0
     160:	0052440d 	subseq	r4, r2, sp, lsl #8
     164:	ad077706 	stcge	7, cr7, [r7, #-24]	; 0xffffffe8
     168:	04000000 	streq	r0, [r0], #-0
     16c:	00048b0e 	andeq	r8, r4, lr, lsl #22
     170:	07780600 	ldrbeq	r0, [r8, -r0, lsl #12]!
     174:	000000a2 	andeq	r0, r0, r2, lsr #1
     178:	52420d06 	subpl	r0, r2, #384	; 0x180
     17c:	79060052 	stmdbvc	r6, {r1, r4, r6}
     180:	0000ad07 	andeq	sl, r0, r7, lsl #26
     184:	950e0800 	strls	r0, [lr, #-2048]	; 0xfffff800
     188:	06000004 	streq	r0, [r0], -r4
     18c:	00a2077a 	adceq	r0, r2, sl, ror r7
     190:	0d0a0000 	stceq	0, cr0, [sl, #-0]
     194:	00315243 	eorseq	r5, r1, r3, asr #4
     198:	ad077b06 	vstrge	d7, [r7, #-24]	; 0xffffffe8
     19c:	0c000000 	stceq	0, cr0, [r0], {-0}
     1a0:	00049f0e 	andeq	r9, r4, lr, lsl #30
     1a4:	077c0600 	ldrbeq	r0, [ip, -r0, lsl #12]!
     1a8:	000000a2 	andeq	r0, r0, r2, lsr #1
     1ac:	52430d0e 	subpl	r0, r3, #896	; 0x380
     1b0:	7d060032 	stcvc	0, cr0, [r6, #-200]	; 0xffffff38
     1b4:	0000ad07 	andeq	sl, r0, r7, lsl #26
     1b8:	a90e1000 	stmdbge	lr, {ip}
     1bc:	06000004 	streq	r0, [r0], -r4
     1c0:	00a2077e 	adceq	r0, r2, lr, ror r7
     1c4:	0d120000 	ldceq	0, cr0, [r2, #-0]
     1c8:	00335243 	eorseq	r5, r3, r3, asr #4
     1cc:	ad077f06 	stcge	15, cr7, [r7, #-24]	; 0xffffffe8
     1d0:	14000000 	strne	r0, [r0], #-0
     1d4:	0004b30e 	andeq	fp, r4, lr, lsl #6
     1d8:	07800600 	streq	r0, [r0, r0, lsl #12]
     1dc:	000000a2 	andeq	r0, r0, r2, lsr #1
     1e0:	001a0e16 	andseq	r0, sl, r6, lsl lr
     1e4:	81060000 	mrshi	r0, (UNDEF: 6)
     1e8:	0000ad07 	andeq	sl, r0, r7, lsl #26
     1ec:	bd0e1800 	stclt	8, cr1, [lr, #-0]
     1f0:	06000004 	streq	r0, [r0], -r4
     1f4:	00a20782 	adceq	r0, r2, r2, lsl #15
     1f8:	001a0000 	andseq	r0, sl, r0
     1fc:	0000a00b 	andeq	sl, r0, fp
     200:	07830600 	streq	r0, [r3, r0, lsl #12]
     204:	0000013e 	andeq	r0, r0, lr, lsr r1
     208:	3607100f 	strcc	r1, [r7], -pc
     20c:	00000259 	andeq	r0, r0, r9, asr r2
     210:	00014110 	andeq	r4, r1, r0, lsl r1
     214:	c2380700 	eorsgt	r0, r8, #0, 14
     218:	00000000 	andeq	r0, r0, r0
     21c:	00010410 	andeq	r0, r1, r0, lsl r4
     220:	a23e0700 	eorsge	r0, lr, #0, 14
     224:	04000000 	streq	r0, [r0], #-0
     228:	0000ae10 	andeq	sl, r0, r0, lsl lr
     22c:	a2410700 	subge	r0, r1, #0, 14
     230:	06000000 	streq	r0, [r0], -r0
     234:	00022010 	andeq	r2, r2, r0, lsl r0
     238:	a2440700 	subge	r0, r4, #0, 14
     23c:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
     240:	0003c310 	andeq	ip, r3, r0, lsl r3
     244:	a24b0700 	subge	r0, fp, #0, 14
     248:	0a000000 	beq	250 <startup-0x1ffffdb0>
     24c:	00039610 	andeq	r9, r3, r0, lsl r6
     250:	a24e0700 	subge	r0, lr, #0, 14
     254:	0c000000 	stceq	0, cr0, [r0], {-0}
     258:	034f0300 	movteq	r0, #62208	; 0xf300
     25c:	51070000 	mrspl	r0, (UNDEF: 7)
     260:	00000208 	andeq	r0, r0, r8, lsl #4
     264:	5707080f 	strpl	r0, [r7, -pc, lsl #16]
     268:	0000029d 	muleq	r0, sp, r2
     26c:	00045d10 	andeq	r5, r4, r0, lsl sp
     270:	a25a0700 	subsge	r0, sl, #0, 14
     274:	00000000 	andeq	r0, r0, r0
     278:	0005ca10 	andeq	ip, r5, r0, lsl sl
     27c:	a25d0700 	subsge	r0, sp, #0, 14
     280:	02000000 	andeq	r0, r0, #0
     284:	00000f10 	andeq	r0, r0, r0, lsl pc
     288:	a2600700 	rsbge	r0, r0, #0, 14
     28c:	04000000 	streq	r0, [r0], #-0
     290:	00013310 	andeq	r3, r1, r0, lsl r3
     294:	a2630700 	rsbge	r0, r3, #0, 14
     298:	06000000 	streq	r0, [r0], -r0
     29c:	00c70300 	sbceq	r0, r7, r0, lsl #6
     2a0:	66070000 	strvs	r0, [r7], -r0
     2a4:	00000264 	andeq	r0, r0, r4, ror #4
     2a8:	3008100f 	andcc	r1, r8, pc
     2ac:	000002e1 	andeq	r0, r0, r1, ror #5
     2b0:	00002610 	andeq	r2, r0, r0, lsl r6
     2b4:	c2320800 	eorsgt	r0, r2, #0, 16
     2b8:	00000000 	andeq	r0, r0, r0
     2bc:	00005510 	andeq	r5, r0, r0, lsl r5
     2c0:	c2330800 	eorsgt	r0, r3, #0, 16
     2c4:	04000000 	streq	r0, [r0], #-0
     2c8:	00051910 	andeq	r1, r5, r0, lsl r9
     2cc:	c2340800 	eorsgt	r0, r4, #0, 16
     2d0:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
     2d4:	00044d10 	andeq	r4, r4, r0, lsl sp
     2d8:	c2350800 	eorsgt	r0, r5, #0, 16
     2dc:	0c000000 	stceq	0, cr0, [r0], {-0}
     2e0:	03700300 	cmneq	r0, #0, 6
     2e4:	36080000 	strcc	r0, [r8], -r0
     2e8:	000002a8 	andeq	r0, r0, r8, lsr #5
     2ec:	00017611 	andeq	r7, r1, r1, lsl r6
     2f0:	05ac0100 	streq	r0, [ip, #256]!	; 0x100
     2f4:	200009c6 	andcs	r0, r0, r6, asr #19
     2f8:	00000048 	andeq	r0, r0, r8, asr #32
     2fc:	033f9c01 	teqeq	pc, #256	; 0x100
     300:	8f120000 	svchi	0x00120000
     304:	01000003 	tsteq	r0, r3
     308:	033f05ac 	teqeq	pc, #172, 10	; 0x2b000000
     30c:	91020000 	mrsls	r0, (UNDEF: 2)
     310:	0547126c 	strbeq	r1, [r7, #-620]	; 0xfffffd94
     314:	ac010000 	stcge	0, cr0, [r1], {-0}
     318:	0000a205 	andeq	sl, r0, r5, lsl #4
     31c:	6a910200 	bvs	fe440b24 <_global_impure_ptr+0xde43bb00>
     320:	0003dc13 	andeq	sp, r3, r3, lsl ip
     324:	05ae0100 	streq	r0, [lr, #256]!	; 0x100
     328:	000000a2 	andeq	r0, r0, r2, lsr #1
     32c:	13769102 	cmnne	r6, #-2147483648	; 0x80000000
     330:	0000001f 	andeq	r0, r0, pc, lsl r0
     334:	a205ae01 	andge	sl, r5, #1, 28
     338:	02000000 	andeq	r0, r0, #0
     33c:	14007491 	strne	r7, [r0], #-1169	; 0xfffffb6f
     340:	0001fc04 	andeq	pc, r1, r4, lsl #24
     344:	040d1500 	streq	r1, [sp], #-1280	; 0xfffffb00
     348:	62010000 	andvs	r0, r1, #0
     34c:	00010b05 	andeq	r0, r1, r5, lsl #22
     350:	0008fc00 	andeq	pc, r8, r0, lsl #24
     354:	0000ca20 	andeq	ip, r0, r0, lsr #20
     358:	ba9c0100 	blt	fe700760 <_global_impure_ptr+0xde6fb73c>
     35c:	12000003 	andne	r0, r0, #3
     360:	0000038f 	andeq	r0, r0, pc, lsl #7
     364:	3f056201 	svccc	0x00056201
     368:	02000003 	andeq	r0, r0, #3
     36c:	47126491 			; <UNDEFINED> instruction: 0x47126491
     370:	01000005 	tsteq	r0, r5
     374:	00a20562 	adceq	r0, r2, r2, ror #10
     378:	91020000 	mrsls	r0, (UNDEF: 2)
     37c:	03dc1362 	bicseq	r1, ip, #-2013265919	; 0x88000001
     380:	64010000 	strvs	r0, [r1], #-0
     384:	0000c205 	andeq	ip, r0, r5, lsl #4
     388:	6c910200 	lfmvs	f0, 4, [r1], {0}
     38c:	00001f13 	andeq	r1, r0, r3, lsl pc
     390:	05640100 	strbeq	r0, [r4, #-256]!	; 0xffffff00
     394:	000000c2 	andeq	r0, r0, r2, asr #1
     398:	13749102 	cmnne	r4, #-2147483648	; 0x80000000
     39c:	0000065c 	andeq	r0, r0, ip, asr r6
     3a0:	c2056401 	andgt	r6, r5, #16777216	; 0x1000000
     3a4:	02000000 	andeq	r0, r0, #0
     3a8:	40136891 	mulsmi	r3, r1, r8
     3ac:	01000006 	tsteq	r0, r6
     3b0:	010b0565 	tsteq	fp, r5, ror #10
     3b4:	91020000 	mrsls	r0, (UNDEF: 2)
     3b8:	f4110073 			; <UNDEFINED> instruction: 0xf4110073
     3bc:	01000002 	tsteq	r0, r2
     3c0:	08da0540 	ldmeq	sl, {r6, r8, sl}^
     3c4:	00222000 	eoreq	r2, r2, r0
     3c8:	9c010000 	stcls	0, cr0, [r1], {-0}
     3cc:	000003ef 	andeq	r0, r0, pc, ror #7
     3d0:	00038f12 	andeq	r8, r3, r2, lsl pc
     3d4:	05400100 	strbeq	r0, [r0, #-256]	; 0xffffff00
     3d8:	0000033f 	andeq	r0, r0, pc, lsr r3
     3dc:	12749102 	rsbsne	r9, r4, #-2147483648	; 0x80000000
     3e0:	000001c9 	andeq	r0, r0, r9, asr #3
     3e4:	a2054001 	andge	r4, r5, #1
     3e8:	02000000 	andeq	r0, r0, #0
     3ec:	15007291 	strne	r7, [r0, #-657]	; 0xfffffd6f
     3f0:	00000529 	andeq	r0, r0, r9, lsr #10
     3f4:	ff050f01 			; <UNDEFINED> instruction: 0xff050f01
     3f8:	92000000 	andls	r0, r0, #0
     3fc:	48200008 	stmdami	r0!, {r3}
     400:	01000000 	mrseq	r0, (UNDEF: 0)
     404:	0004379c 	muleq	r4, ip, r7
     408:	038f1200 	orreq	r1, pc, #0, 4
     40c:	0f010000 	svceq	0x00010000
     410:	00033f05 	andeq	r3, r3, r5, lsl #30
     414:	6c910200 	lfmvs	f0, 4, [r1], {0}
     418:	0001c912 	andeq	ip, r1, r2, lsl r9
     41c:	050f0100 	streq	r0, [pc, #-256]	; 324 <startup-0x1ffffcdc>
     420:	000000a2 	andeq	r0, r0, r2, lsr #1
     424:	136a9102 	cmnne	sl, #-2147483648	; 0x80000000
     428:	00000640 	andeq	r0, r0, r0, asr #12
     42c:	ff051101 			; <UNDEFINED> instruction: 0xff051101
     430:	02000000 	andeq	r0, r0, #0
     434:	11007791 			; <UNDEFINED> instruction: 0x11007791
     438:	00000361 	andeq	r0, r0, r1, ror #6
     43c:	f804cf01 			; <UNDEFINED> instruction: 0xf804cf01
     440:	9a200007 	bls	800464 <startup-0x1f7ffb9c>
     444:	01000000 	mrseq	r0, (UNDEF: 0)
     448:	0004b79c 	muleq	r4, ip, r7
     44c:	038f1200 	orreq	r1, pc, #0, 4
     450:	cf010000 	svcgt	0x00010000
     454:	00033f04 	andeq	r3, r3, r4, lsl #30
     458:	64910200 	ldrvs	r0, [r1], #512	; 0x200
     45c:	00054712 	andeq	r4, r5, r2, lsl r7
     460:	04cf0100 	strbeq	r0, [pc], #256	; 468 <startup-0x1ffffb98>
     464:	000000a2 	andeq	r0, r0, r2, lsr #1
     468:	12629102 	rsbne	r9, r2, #-2147483648	; 0x80000000
     46c:	00000115 	andeq	r0, r0, r5, lsl r1
     470:	3204cf01 	andcc	ip, r4, #1, 30
     474:	02000001 	andeq	r0, r0, #1
     478:	5c136191 	ldfpls	f6, [r3], {145}	; 0x91
     47c:	01000006 	tsteq	r0, r6
     480:	00c204d1 	ldrdeq	r0, [r2], #65	; 0x41
     484:	91020000 	mrsls	r0, (UNDEF: 2)
     488:	03dd1370 	bicseq	r1, sp, #112, 6	; 0xc0000001
     48c:	d1010000 	mrsle	r0, (UNDEF: 1)
     490:	0000c204 	andeq	ip, r0, r4, lsl #4
     494:	6c910200 	lfmvs	f0, 4, [r1], {0}
     498:	00001f13 	andeq	r1, r0, r3, lsl pc
     49c:	04d10100 	ldrbeq	r0, [r1], #256	; 0x100
     4a0:	000000c2 	andeq	r0, r0, r2, asr #1
     4a4:	13689102 	cmnne	r8, #-2147483648	; 0x80000000
     4a8:	000002e9 	andeq	r0, r0, r9, ror #5
     4ac:	c204d201 	andgt	sp, r4, #268435456	; 0x10000000
     4b0:	02000000 	andeq	r0, r0, #0
     4b4:	11007491 			; <UNDEFINED> instruction: 0x11007491
     4b8:	0000011e 	andeq	r0, r0, lr, lsl r1
     4bc:	a6044b01 	strge	r4, [r4], -r1, lsl #22
     4c0:	52200007 	eorpl	r0, r0, #7
     4c4:	01000000 	mrseq	r0, (UNDEF: 0)
     4c8:	0004fb9c 	muleq	r4, ip, fp
     4cc:	038f1200 	orreq	r1, pc, #0, 4
     4d0:	4b010000 	blmi	404d8 <startup-0x1ffbfb28>
     4d4:	00033f04 	andeq	r3, r3, r4, lsl #30
     4d8:	74910200 	ldrvc	r0, [r1], #512	; 0x200
     4dc:	00038212 	andeq	r8, r3, r2, lsl r2
     4e0:	044b0100 	strbeq	r0, [fp], #-256	; 0xffffff00
     4e4:	000000a2 	andeq	r0, r0, r2, lsr #1
     4e8:	12729102 	rsbsne	r9, r2, #-2147483648	; 0x80000000
     4ec:	00000115 	andeq	r0, r0, r5, lsl r1
     4f0:	32044b01 	andcc	r4, r4, #1024	; 0x400
     4f4:	02000001 	andeq	r0, r0, #1
     4f8:	11007191 			; <UNDEFINED> instruction: 0x11007191
     4fc:	000004c7 	andeq	r0, r0, r7, asr #9
     500:	66041d01 	strvs	r1, [r4], -r1, lsl #26
     504:	40200007 	eormi	r0, r0, r7
     508:	01000000 	mrseq	r0, (UNDEF: 0)
     50c:	0005309c 	muleq	r5, ip, r0
     510:	038f1200 	orreq	r1, pc, #0, 4
     514:	1d010000 	stcne	0, cr0, [r1, #-0]
     518:	00033f04 	andeq	r3, r3, r4, lsl #30
     51c:	74910200 	ldrvc	r0, [r1], #512	; 0x200
     520:	00011512 	andeq	r1, r1, r2, lsl r5
     524:	041d0100 	ldreq	r0, [sp], #-256	; 0xffffff00
     528:	00000132 	andeq	r0, r0, r2, lsr r1
     52c:	00739102 	rsbseq	r9, r3, r2, lsl #2
     530:	00042c11 	andeq	r2, r4, r1, lsl ip
     534:	040b0100 	streq	r0, [fp], #-256	; 0xffffff00
     538:	2000072e 	andcs	r0, r0, lr, lsr #14
     53c:	00000038 	andeq	r0, r0, r8, lsr r0
     540:	05659c01 	strbeq	r9, [r5, #-3073]!	; 0xfffff3ff
     544:	8f120000 	svchi	0x00120000
     548:	01000003 	tsteq	r0, r3
     54c:	033f040b 	teqeq	pc, #184549376	; 0xb000000
     550:	91020000 	mrsls	r0, (UNDEF: 2)
     554:	01501274 	cmpeq	r0, r4, ror r2
     558:	0b010000 	bleq	40560 <startup-0x1ffbfaa0>
     55c:	0000a204 	andeq	sl, r0, r4, lsl #4
     560:	72910200 	addsvc	r0, r1, #0, 4
     564:	04f71100 	ldrbteq	r1, [r7], #256	; 0x100
     568:	c4010000 	strgt	r0, [r1], #-0
     56c:	0006ee03 	andeq	lr, r6, r3, lsl #28
     570:	00004020 	andeq	r4, r0, r0, lsr #32
     574:	9a9c0100 	bls	fe70097c <_global_impure_ptr+0xde6fb958>
     578:	12000005 	andne	r0, r0, #5
     57c:	0000038f 	andeq	r0, r0, pc, lsl #7
     580:	3f03c401 	svccc	0x0003c401
     584:	02000003 	andeq	r0, r0, #3
     588:	15127491 	ldrne	r7, [r2, #-1169]	; 0xfffffb6f
     58c:	01000001 	tsteq	r0, r1
     590:	013203c4 	teqeq	r2, r4, asr #7
     594:	91020000 	mrsls	r0, (UNDEF: 2)
     598:	b0110073 	andslt	r0, r1, r3, ror r0
     59c:	01000003 	tsteq	r0, r3
     5a0:	06ae03ab 	strteq	r0, [lr], fp, lsr #7
     5a4:	00402000 	subeq	r2, r0, r0
     5a8:	9c010000 	stcls	0, cr0, [r1], {-0}
     5ac:	000005cf 	andeq	r0, r0, pc, asr #11
     5b0:	00038f12 	andeq	r8, r3, r2, lsl pc
     5b4:	03ab0100 			; <UNDEFINED> instruction: 0x03ab0100
     5b8:	0000033f 	andeq	r0, r0, pc, lsr r3
     5bc:	12749102 	rsbsne	r9, r4, #-2147483648	; 0x80000000
     5c0:	00000115 	andeq	r0, r0, r5, lsl r1
     5c4:	3203ab01 	andcc	sl, r3, #1024	; 0x400
     5c8:	02000001 	andeq	r0, r0, #1
     5cc:	11007391 			; <UNDEFINED> instruction: 0x11007391
     5d0:	0000032c 	andeq	r0, r0, ip, lsr #6
     5d4:	70039801 	andvc	r9, r3, r1, lsl #16
     5d8:	3e200006 	cdpcc	0, 2, cr0, cr0, cr6, {0}
     5dc:	01000000 	mrseq	r0, (UNDEF: 0)
     5e0:	0006049c 	muleq	r6, ip, r4
     5e4:	038f1200 	orreq	r1, pc, #0, 4
     5e8:	98010000 	stmdals	r1, {}	; <UNPREDICTABLE>
     5ec:	00033f03 	andeq	r3, r3, r3, lsl #30
     5f0:	74910200 	ldrvc	r0, [r1], #512	; 0x200
     5f4:	00018e12 	andeq	r8, r1, r2, lsl lr
     5f8:	03980100 	orrseq	r0, r8, #0, 2
     5fc:	00000097 	muleq	r0, r7, r0
     600:	00739102 	rsbseq	r9, r3, r2, lsl #2
     604:	00059511 	andeq	r9, r5, r1, lsl r5
     608:	03440100 	movteq	r0, #16640	; 0x4100
     60c:	20000630 	andcs	r0, r0, r0, lsr r6
     610:	00000040 	andeq	r0, r0, r0, asr #32
     614:	06399c01 	ldrteq	r9, [r9], -r1, lsl #24
     618:	8f120000 	svchi	0x00120000
     61c:	01000003 	tsteq	r0, r3
     620:	033f0344 	teqeq	pc, #68, 6	; 0x10000001
     624:	91020000 	mrsls	r0, (UNDEF: 2)
     628:	01151274 	tsteq	r5, r4, ror r2
     62c:	44010000 	strmi	r0, [r1], #-0
     630:	00013203 	andeq	r3, r1, r3, lsl #4
     634:	73910200 	orrsvc	r0, r1, #0, 4
     638:	033f1100 	teqeq	pc, #0, 2
     63c:	0f010000 	svceq	0x00010000
     640:	00061003 	andeq	r1, r6, r3
     644:	00002020 	andeq	r2, r0, r0, lsr #32
     648:	5f9c0100 	svcpl	0x009c0100
     64c:	12000006 	andne	r0, r0, #6
     650:	0000038f 	andeq	r0, r0, pc, lsl #7
     654:	3f030f01 	svccc	0x00030f01
     658:	02000003 	andeq	r0, r0, #3
     65c:	11007491 			; <UNDEFINED> instruction: 0x11007491
     660:	0000041f 	andeq	r0, r0, pc, lsl r4
     664:	c802f701 	stmdagt	r2, {r0, r8, r9, sl, ip, sp, lr, pc}
     668:	48200005 	stmdami	r0!, {r0, r2}
     66c:	01000000 	mrseq	r0, (UNDEF: 0)
     670:	0006949c 	muleq	r6, ip, r4
     674:	038f1200 	orreq	r1, pc, #0, 4
     678:	f7010000 			; <UNDEFINED> instruction: 0xf7010000
     67c:	00033f02 	andeq	r3, r3, r2, lsl #30
     680:	74910200 	ldrvc	r0, [r1], #512	; 0x200
     684:	00011512 	andeq	r1, r1, r2, lsl r5
     688:	02f70100 	rscseq	r0, r7, #0, 2
     68c:	00000132 	andeq	r0, r0, r2, lsr r1
     690:	00739102 	rsbseq	r9, r3, r2, lsl #2
     694:	00019e11 	andeq	r9, r1, r1, lsl lr
     698:	02e50100 	rsceq	r0, r5, #0, 2
     69c:	20000590 	mulcs	r0, r0, r5
     6a0:	00000038 	andeq	r0, r0, r8, lsr r0
     6a4:	06c99c01 	strbeq	r9, [r9], r1, lsl #24
     6a8:	8f120000 	svchi	0x00120000
     6ac:	01000003 	tsteq	r0, r3
     6b0:	033f02e5 	teqeq	pc, #1342177294	; 0x5000000e
     6b4:	91020000 	mrsls	r0, (UNDEF: 2)
     6b8:	00641274 	rsbeq	r1, r4, r4, ror r2
     6bc:	e5010000 	str	r0, [r1, #-0]
     6c0:	0000a202 	andeq	sl, r0, r2, lsl #4
     6c4:	72910200 	addsvc	r0, r1, #0, 4
     6c8:	05821100 	streq	r1, [r2, #256]	; 0x100
     6cc:	a0010000 	andge	r0, r1, r0
     6d0:	00055202 	andeq	r5, r5, r2, lsl #4
     6d4:	00003e20 	andeq	r3, r0, r0, lsr #28
     6d8:	fe9c0100 	cdp2	1, 9, cr0, cr12, cr0, {0}
     6dc:	12000006 	andne	r0, r0, #6
     6e0:	0000038f 	andeq	r0, r0, pc, lsl #7
     6e4:	3f02a001 	svccc	0x0002a001
     6e8:	02000003 	andeq	r0, r0, #3
     6ec:	f7127491 			; <UNDEFINED> instruction: 0xf7127491
     6f0:	01000000 	mrseq	r0, (UNDEF: 0)
     6f4:	00a202a0 	adceq	r0, r2, r0, lsr #5
     6f8:	91020000 	mrsls	r0, (UNDEF: 2)
     6fc:	69110072 	ldmdbvs	r1, {r1, r4, r5, r6}
     700:	01000004 	tsteq	r0, r4
     704:	05120285 	ldreq	r0, [r2, #-645]	; 0xfffffd7b
     708:	00402000 	subeq	r2, r0, r0
     70c:	9c010000 	stcls	0, cr0, [r1], {-0}
     710:	00000733 	andeq	r0, r0, r3, lsr r7
     714:	00038f12 	andeq	r8, r3, r2, lsl pc
     718:	02850100 	addeq	r0, r5, #0, 2
     71c:	0000033f 	andeq	r0, r0, pc, lsr r3
     720:	12749102 	rsbsne	r9, r4, #-2147483648	; 0x80000000
     724:	00000115 	andeq	r0, r0, r5, lsl r1
     728:	32028501 	andcc	r8, r2, #4194304	; 0x400000
     72c:	02000001 	andeq	r0, r0, #1
     730:	11007391 			; <UNDEFINED> instruction: 0x11007391
     734:	00000304 	andeq	r0, r0, r4, lsl #6
     738:	d8027101 	stmdale	r2, {r0, r8, ip, sp, lr}
     73c:	3a200004 	bcc	800754 <startup-0x1f7ff8ac>
     740:	01000000 	mrseq	r0, (UNDEF: 0)
     744:	0007689c 	muleq	r7, ip, r8
     748:	038f1200 	orreq	r1, pc, #0, 4
     74c:	71010000 	mrsvc	r0, (UNDEF: 1)
     750:	00033f02 	andeq	r3, r3, r2, lsl #30
     754:	74910200 	ldrvc	r0, [r1], #512	; 0x200
     758:	0003ce12 	andeq	ip, r3, r2, lsl lr
     75c:	02710100 	rsbseq	r0, r1, #0, 2
     760:	00000097 	muleq	r0, r7, r0
     764:	00739102 	rsbseq	r9, r3, r2, lsl #2
     768:	00064a15 	andeq	r4, r6, r5, lsl sl
     76c:	023d0100 	eorseq	r0, sp, #0, 2
     770:	000000a2 	andeq	r0, r0, r2, lsr #1
     774:	200004bc 			; <UNDEFINED> instruction: 0x200004bc
     778:	0000001c 	andeq	r0, r0, ip, lsl r0
     77c:	07929c01 	ldreq	r9, [r2, r1, lsl #24]
     780:	8f120000 	svchi	0x00120000
     784:	01000003 	tsteq	r0, r3
     788:	033f023d 	teqeq	pc, #-805306365	; 0xd0000003
     78c:	91020000 	mrsls	r0, (UNDEF: 2)
     790:	e8110074 	ldmda	r1, {r2, r4, r5, r6}
     794:	01000000 	mrseq	r0, (UNDEF: 0)
     798:	0498022d 	ldreq	r0, [r8], #557	; 0x22d
     79c:	00242000 	eoreq	r2, r4, r0
     7a0:	9c010000 	stcls	0, cr0, [r1], {-0}
     7a4:	000007c7 	andeq	r0, r0, r7, asr #15
     7a8:	00038f12 	andeq	r8, r3, r2, lsl pc
     7ac:	022d0100 	eoreq	r0, sp, #0, 2
     7b0:	0000033f 	andeq	r0, r0, pc, lsr r3
     7b4:	12749102 	rsbsne	r9, r4, #-2147483648	; 0x80000000
     7b8:	000000f2 	strdeq	r0, [r0], -r2
     7bc:	a2022d01 	andge	r2, r2, #1, 26	; 0x40
     7c0:	02000000 	andeq	r0, r0, #0
     7c4:	11007291 			; <UNDEFINED> instruction: 0x11007291
     7c8:	0000007f 	andeq	r0, r0, pc, ror r0
     7cc:	5001f401 	andpl	pc, r1, r1, lsl #8
     7d0:	48200004 	stmdami	r0!, {r2}
     7d4:	01000000 	mrseq	r0, (UNDEF: 0)
     7d8:	0007fc9c 	muleq	r7, ip, ip
     7dc:	038f1200 	orreq	r1, pc, #0, 4
     7e0:	f4010000 	vst4.8	{d0-d3}, [r1], r0
     7e4:	00033f01 	andeq	r3, r3, r1, lsl #30
     7e8:	74910200 	ldrvc	r0, [r1], #512	; 0x200
     7ec:	00011512 	andeq	r1, r1, r2, lsl r5
     7f0:	01f40100 	mvnseq	r0, r0, lsl #2
     7f4:	00000132 	andeq	r0, r0, r2, lsr r1
     7f8:	00739102 	rsbseq	r9, r3, r2, lsl #2
     7fc:	0003e311 	andeq	lr, r3, r1, lsl r3
     800:	01da0100 	bicseq	r0, sl, r0, lsl #2
     804:	2000040a 	andcs	r0, r0, sl, lsl #8
     808:	00000046 	andeq	r0, r0, r6, asr #32
     80c:	08319c01 	ldmdaeq	r1!, {r0, sl, fp, ip, pc}
     810:	8f120000 	svchi	0x00120000
     814:	01000003 	tsteq	r0, r3
     818:	033f01da 	teqeq	pc, #-2147483594	; 0x80000036
     81c:	91020000 	mrsls	r0, (UNDEF: 2)
     820:	01151274 	tsteq	r5, r4, ror r2
     824:	da010000 	ble	4082c <startup-0x1ffbf7d4>
     828:	00013201 	andeq	r3, r1, r1, lsl #4
     82c:	73910200 	orrsvc	r0, r1, #0, 4
     830:	00371100 	eorseq	r1, r7, r0, lsl #2
     834:	c5010000 	strgt	r0, [r1, #-0]
     838:	0003d001 	andeq	sp, r3, r1
     83c:	00003a20 	andeq	r3, r0, r0, lsr #20
     840:	669c0100 	ldrvs	r0, [ip], r0, lsl #2
     844:	12000008 	andne	r0, r0, #8
     848:	0000038f 	andeq	r0, r0, pc, lsl #7
     84c:	3f01c501 	svccc	0x0001c501
     850:	02000003 	andeq	r0, r0, #3
     854:	ba127491 	blt	49daa0 <startup-0x1fb62560>
     858:	01000005 	tsteq	r0, r5
     85c:	009701c5 	addseq	r0, r7, r5, asr #3
     860:	91020000 	mrsls	r0, (UNDEF: 2)
     864:	de110073 	mrcle	0, 0, r0, cr1, cr3, {3}
     868:	01000000 	mrseq	r0, (UNDEF: 0)
     86c:	038801ab 	orreq	r0, r8, #-1073741782	; 0xc000002a
     870:	00482000 	subeq	r2, r8, r0
     874:	9c010000 	stcls	0, cr0, [r1], {-0}
     878:	0000089b 	muleq	r0, fp, r8
     87c:	00038f12 	andeq	r8, r3, r2, lsl pc
     880:	01ab0100 			; <UNDEFINED> instruction: 0x01ab0100
     884:	0000033f 	andeq	r0, r0, pc, lsr r3
     888:	12749102 	rsbsne	r9, r4, #-2147483648	; 0x80000000
     88c:	00000115 	andeq	r0, r0, r5, lsl r1
     890:	3201ab01 	andcc	sl, r1, #1024	; 0x400
     894:	02000001 	andeq	r0, r0, #1
     898:	11007391 			; <UNDEFINED> instruction: 0x11007391
     89c:	0000022d 	andeq	r0, r0, sp, lsr #4
     8a0:	60019a01 	andvs	r9, r1, r1, lsl #20
     8a4:	28200003 	stmdacs	r0!, {r0, r1}
     8a8:	01000000 	mrseq	r0, (UNDEF: 0)
     8ac:	0008c19c 	muleq	r8, ip, r1
     8b0:	01e11200 	mvneq	r1, r0, lsl #4
     8b4:	9a010000 	bls	408bc <startup-0x1ffbf744>
     8b8:	0008c101 	andeq	ip, r8, r1, lsl #2
     8bc:	74910200 	ldrvc	r0, [r1], #512	; 0x200
     8c0:	9d041400 	cfstrsls	mvf1, [r4, #-0]
     8c4:	11000002 	tstne	r0, r2
     8c8:	00000572 	andeq	r0, r0, r2, ror r5
     8cc:	0a017b01 	beq	5f4d8 <startup-0x1ffa0b28>
     8d0:	56200003 	strtpl	r0, [r0], -r3
     8d4:	01000000 	mrseq	r0, (UNDEF: 0)
     8d8:	00090b9c 	muleq	r9, ip, fp
     8dc:	038f1200 	orreq	r1, pc, #0, 4
     8e0:	7b010000 	blvc	408e8 <startup-0x1ffbf718>
     8e4:	00033f01 	andeq	r3, r3, r1, lsl #30
     8e8:	6c910200 	lfmvs	f0, 4, [r1], {0}
     8ec:	0001e112 	andeq	lr, r1, r2, lsl r1
     8f0:	017b0100 	cmneq	fp, r0, lsl #2
     8f4:	000008c1 	andeq	r0, r0, r1, asr #17
     8f8:	13689102 	cmnne	r8, #-2147483648	; 0x80000000
     8fc:	00000219 	andeq	r0, r0, r9, lsl r2
     900:	c2017d01 	andgt	r7, r1, #1, 26	; 0x40
     904:	02000000 	andeq	r0, r0, #0
     908:	11007491 			; <UNDEFINED> instruction: 0x11007491
     90c:	000005a9 	andeq	r0, r0, r9, lsr #11
     910:	d4016701 	strle	r6, [r1], #-1793	; 0xfffff8ff
     914:	36200002 	strtcc	r0, [r0], -r2
     918:	01000000 	mrseq	r0, (UNDEF: 0)
     91c:	0009319c 	muleq	r9, ip, r1
     920:	05501200 	ldrbeq	r1, [r0, #-512]	; 0xfffffe00
     924:	67010000 	strvs	r0, [r1, -r0]
     928:	00093101 	andeq	r3, r9, r1, lsl #2
     92c:	74910200 	ldrvc	r0, [r1], #512	; 0x200
     930:	59041400 	stmdbpl	r4, {sl, ip}
     934:	16000002 	strne	r0, [r0], -r2
     938:	0000004a 	andeq	r0, r0, sl, asr #32
     93c:	0140f601 	cmpeq	r0, r1, lsl #12	; <UNPREDICTABLE>
     940:	01942000 	orrseq	r2, r4, r0
     944:	9c010000 	stcls	0, cr0, [r1], {-0}
     948:	000009af 	andeq	r0, r0, pc, lsr #19
     94c:	00038f17 	andeq	r8, r3, r7, lsl pc
     950:	3ff60100 	svccc	0x00f60100
     954:	02000003 	andeq	r0, r0, #3
     958:	50175491 	mulspl	r7, r1, r4
     95c:	01000005 	tsteq	r0, r5
     960:	000931f6 	strdeq	r3, [r9], -r6
     964:	50910200 	addspl	r0, r1, r0, lsl #4
     968:	00021918 	andeq	r1, r2, r8, lsl r9
     96c:	c2f80100 	rscsgt	r0, r8, #0, 2
     970:	02000000 	andeq	r0, r0, #0
     974:	5f187491 	svcpl	0x00187491
     978:	01000001 	tsteq	r0, r1
     97c:	0000c2f8 	strdeq	ip, [r0], -r8
     980:	70910200 	addsvc	r0, r1, r0, lsl #4
     984:	00000018 	andeq	r0, r0, r8, lsl r0
     988:	c2f90100 	rscsgt	r0, r9, #0, 2
     98c:	02000000 	andeq	r0, r0, #0
     990:	d5186c91 	ldrle	r6, [r8, #-3217]	; 0xfffff36f
     994:	01000004 	tsteq	r0, r4
     998:	0000c2fa 	strdeq	ip, [r0], -sl
     99c:	68910200 	ldmvs	r1, {r9}
     9a0:	00056118 	andeq	r6, r5, r8, lsl r1
     9a4:	e1fb0100 	mvns	r0, r0, lsl #2
     9a8:	02000002 	andeq	r0, r0, #2
     9ac:	19005891 	stmdbne	r0, {r0, r4, r7, fp, ip, lr}
     9b0:	000001d4 	ldrdeq	r0, [r0], -r4
     9b4:	0010bb01 	andseq	fp, r0, r1, lsl #22
     9b8:	01302000 	teqeq	r0, r0
     9bc:	9c010000 	stcls	0, cr0, [r1], {-0}
     9c0:	00038f17 	andeq	r8, r3, r7, lsl pc
     9c4:	3fbb0100 	svccc	0x00bb0100
     9c8:	02000003 	andeq	r0, r0, #3
     9cc:	00007491 	muleq	r0, r1, r4
     9d0:	00000169 	andeq	r0, r0, r9, ror #2
     9d4:	01840004 	orreq	r0, r4, r4
     9d8:	01040000 	mrseq	r0, (UNDEF: 4)
     9dc:	00000251 	andeq	r0, r0, r1, asr r2
     9e0:	0006a60c 	andeq	sl, r6, ip, lsl #12
     9e4:	0001f700 	andeq	pc, r1, r0, lsl #14
     9e8:	000a1000 	andeq	r1, sl, r0
     9ec:	0000e820 	andeq	lr, r0, r0, lsr #16
     9f0:	00033200 	andeq	r3, r3, r0, lsl #4
     9f4:	06010200 	streq	r0, [r1], -r0, lsl #4
     9f8:	00000245 	andeq	r0, r0, r5, asr #4
     9fc:	0001bf03 	andeq	fp, r1, r3, lsl #30
     a00:	372b0200 	strcc	r0, [fp, -r0, lsl #4]!
     a04:	02000000 	andeq	r0, r0, #0
     a08:	02430801 	subeq	r0, r3, #65536	; 0x10000
     a0c:	02020000 	andeq	r0, r2, #0
     a10:	0000bd05 	andeq	fp, r0, r5, lsl #26
     a14:	07020200 	streq	r0, [r2, -r0, lsl #4]
     a18:	000003fa 	strdeq	r0, [r0], -sl
     a1c:	6d050402 	cfstrsvs	mvf0, [r5, #-8]
     a20:	02000001 	andeq	r0, r0, #1
     a24:	031a0704 	tsteq	sl, #4, 14	; 0x100000
     a28:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
     a2c:	00016805 	andeq	r6, r1, r5, lsl #16
     a30:	07080200 	streq	r0, [r8, -r0, lsl #4]
     a34:	00000315 	andeq	r0, r0, r5, lsl r3
     a38:	69050404 	stmdbvs	r5, {r2, sl}
     a3c:	0200746e 	andeq	r7, r0, #1845493760	; 0x6e000000
     a40:	031f0704 	tsteq	pc, #4, 14	; 0x100000
     a44:	c1030000 	mrsgt	r0, (UNDEF: 3)
     a48:	03000001 	movweq	r0, #1
     a4c:	00002c18 	andeq	r2, r0, r8, lsl ip
     a50:	04670500 	strbteq	r0, [r7], #-1280	; 0xfffffb00
     a54:	0000b90c 	andeq	fp, r0, ip, lsl #18
     a58:	06800600 	streq	r0, [r0], r0, lsl #12
     a5c:	0e040000 	cdpeq	0, 0, cr0, cr4, cr0, {0}
     a60:	000000b9 	strheq	r0, [r0], -r9
     a64:	1c770600 	ldclne	6, cr0, [r7], #-0
     a68:	11040000 	mrsne	r0, (UNDEF: 4)
     a6c:	00000076 	andeq	r0, r0, r6, ror r0
     a70:	6e690764 	cdpvs	7, 6, cr0, cr9, cr4, {3}
     a74:	76140400 	ldrvc	r0, [r4], -r0, lsl #8
     a78:	65000000 	strvs	r0, [r0, #-0]
     a7c:	74756f07 	ldrbtvc	r6, [r5], #-3847	; 0xfffff0f9
     a80:	76170400 	ldrvc	r0, [r7], -r0, lsl #8
     a84:	66000000 	strvs	r0, [r0], -r0
     a88:	00760800 	rsbseq	r0, r6, r0, lsl #16
     a8c:	00c90000 	sbceq	r0, r9, r0
     a90:	6f090000 	svcvs	0x00090000
     a94:	63000000 	movwvs	r0, #0
     a98:	06760300 	ldrbteq	r0, [r6], -r0, lsl #6
     a9c:	18040000 	stmdane	r4, {}	; <UNPREDICTABLE>
     aa0:	00000081 	andeq	r0, r0, r1, lsl #1
     aa4:	00068a0a 	andeq	r8, r6, sl, lsl #20
     aa8:	761f0100 	ldrvc	r0, [pc], -r0, lsl #2
     aac:	9a000000 	bls	ab4 <startup-0x1ffff54c>
     ab0:	5e20000a 	cdppl	0, 2, cr0, cr0, cr10, {0}
     ab4:	01000000 	mrseq	r0, (UNDEF: 0)
     ab8:	00010a9c 	muleq	r1, ip, sl
     abc:	069f0b00 	ldreq	r0, [pc], r0, lsl #22
     ac0:	1f010000 	svcne	0x00010000
     ac4:	0000010a 	andeq	r0, r0, sl, lsl #2
     ac8:	0b749102 	bleq	1d24ed8 <startup-0x1e2db128>
     acc:	0000067b 	andeq	r0, r0, fp, ror r6
     ad0:	01101f01 	tsteq	r0, r1, lsl #30
     ad4:	91020000 	mrsls	r0, (UNDEF: 2)
     ad8:	040c0070 	streq	r0, [ip], #-112	; 0xffffff90
     adc:	000000c9 	andeq	r0, r0, r9, asr #1
     ae0:	0076040c 	rsbseq	r0, r6, ip, lsl #8
     ae4:	6c0a0000 	stcvs	0, cr0, [sl], {-0}
     ae8:	01000006 	tsteq	r0, r6
     aec:	0000760c 	andeq	r7, r0, ip, lsl #12
     af0:	000a3800 	andeq	r3, sl, r0, lsl #16
     af4:	00006220 	andeq	r6, r0, r0, lsr #4
     af8:	4c9c0100 	ldfmis	f0, [ip], {0}
     afc:	0b000001 	bleq	b08 <startup-0x1ffff4f8>
     b00:	0000069f 	muleq	r0, pc, r6	; <UNPREDICTABLE>
     b04:	010a0c01 	tsteq	sl, r1, lsl #24
     b08:	91020000 	mrsls	r0, (UNDEF: 2)
     b0c:	06850b74 			; <UNDEFINED> instruction: 0x06850b74
     b10:	0c010000 	stceq	0, cr0, [r1], {-0}
     b14:	00000076 	andeq	r0, r0, r6, ror r0
     b18:	00739102 	rsbseq	r9, r3, r2, lsl #2
     b1c:	0006940d 	andeq	r9, r6, sp, lsl #8
     b20:	10040100 	andne	r0, r4, r0, lsl #2
     b24:	2820000a 	stmdacs	r0!, {r1, r3}
     b28:	01000000 	mrseq	r0, (UNDEF: 0)
     b2c:	069f0b9c 			; <UNDEFINED> instruction: 0x069f0b9c
     b30:	04010000 	streq	r0, [r1], #-0
     b34:	0000010a 	andeq	r0, r0, sl, lsl #2
     b38:	00749102 	rsbseq	r9, r4, r2, lsl #2
     b3c:	00175d00 	andseq	r5, r7, r0, lsl #26
     b40:	44000400 	strmi	r0, [r0], #-1024	; 0xfffffc00
     b44:	04000002 	streq	r0, [r0], #-2
     b48:	00025101 	andeq	r5, r2, r1, lsl #2
     b4c:	14690c00 	strbtne	r0, [r9], #-3072	; 0xfffff400
     b50:	01f70000 	mvnseq	r0, r0
	...
     b5c:	04460000 	strbeq	r0, [r6], #-0
     b60:	15020000 	strne	r0, [r2, #-0]
     b64:	05000014 	streq	r0, [r0, #-20]	; 0xffffffec
     b68:	00025301 	andeq	r5, r2, r1, lsl #6
     b6c:	53c80400 	bicpl	r0, r8, #0, 8
     b70:	03000002 	movweq	r0, #2
     b74:	00000cfa 	strdeq	r0, [r0], -sl
     b78:	0d750372 	ldcleq	3, cr0, [r5, #-456]!	; 0xfffffe38
     b7c:	03740000 	cmneq	r4, #0
     b80:	00000e2a 	andeq	r0, r0, sl, lsr #28
     b84:	0ae40375 	beq	ff901960 <_global_impure_ptr+0xdf8fc93c>
     b88:	03760000 	cmneq	r6, #0
     b8c:	00000ee6 	andeq	r0, r0, r6, ror #29
     b90:	1328037b 			; <UNDEFINED> instruction: 0x1328037b
     b94:	037c0000 	cmneq	ip, #0
     b98:	0000155a 	andeq	r1, r0, sl, asr r5
     b9c:	09e4037e 	stmibeq	r4!, {r1, r2, r3, r4, r5, r6, r8, r9}^
     ba0:	047f0000 	ldrbteq	r0, [pc], #-0	; ba8 <startup-0x1ffff458>
     ba4:	00000d0e 	andeq	r0, r0, lr, lsl #26
     ba8:	126f0400 	rsbne	r0, pc, #0, 8
     bac:	04010000 	streq	r0, [r1], #-0
     bb0:	00000d8b 	andeq	r0, r0, fp, lsl #27
     bb4:	06de0402 	ldrbeq	r0, [lr], r2, lsl #8
     bb8:	04030000 	streq	r0, [r3], #-0
     bbc:	0000077c 	andeq	r0, r0, ip, ror r7
     bc0:	13a30404 			; <UNDEFINED> instruction: 0x13a30404
     bc4:	04050000 	streq	r0, [r5], #-0
     bc8:	000012a9 	andeq	r1, r0, r9, lsr #5
     bcc:	0c830406 	cfstrseq	mvf0, [r3], {6}
     bd0:	04070000 	streq	r0, [r7], #-0
     bd4:	000006ec 	andeq	r0, r0, ip, ror #13
     bd8:	154f0408 	strbne	r0, [pc, #-1032]	; 7d8 <startup-0x1ffff828>
     bdc:	04090000 	streq	r0, [r9], #-0
     be0:	00000fd2 	ldrdeq	r0, [r0], -r2
     be4:	1154040a 	cmpne	r4, sl, lsl #8
     be8:	040b0000 	streq	r0, [fp], #-0
     bec:	00001078 	andeq	r1, r0, r8, ror r0
     bf0:	0a55040c 	beq	1541c28 <startup-0x1eabe3d8>
     bf4:	040d0000 	streq	r0, [sp], #-0
     bf8:	000013b8 			; <UNDEFINED> instruction: 0x000013b8
     bfc:	12db040e 	sbcsne	r0, fp, #234881024	; 0xe000000
     c00:	040f0000 	streq	r0, [pc], #-0	; c08 <startup-0x1ffff3f8>
     c04:	00000c9b 	muleq	r0, fp, ip
     c08:	06f70410 	usateq	r0, #23, r0, lsl #8
     c0c:	04110000 	ldreq	r0, [r1], #-0
     c10:	00001225 	andeq	r1, r0, r5, lsr #4
     c14:	0c8e0412 	cfstrseq	mvf0, [lr], {18}
     c18:	04130000 	ldreq	r0, [r3], #-0
     c1c:	00000b78 	andeq	r0, r0, r8, ror fp
     c20:	14c30414 	strbne	r0, [r3], #1044	; 0x414
     c24:	04150000 	ldreq	r0, [r5], #-0
     c28:	00000d9b 	muleq	r0, fp, sp
     c2c:	14ed0416 	strbtne	r0, [sp], #1046	; 0x416
     c30:	04170000 	ldreq	r0, [r7], #-0
     c34:	00000e51 	andeq	r0, r0, r1, asr lr
     c38:	14070418 	strne	r0, [r7], #-1048	; 0xfffffbe8
     c3c:	04190000 	ldreq	r0, [r9], #-0
     c40:	0000094c 	andeq	r0, r0, ip, asr #18
     c44:	0c68041a 	cfstrdeq	mvd0, [r8], #-104	; 0xffffff98
     c48:	041b0000 	ldreq	r0, [fp], #-0
     c4c:	000007fd 	strdeq	r0, [r0], -sp
     c50:	11d9041c 	bicsne	r0, r9, ip, lsl r4
     c54:	041d0000 	ldreq	r0, [sp], #-0
     c58:	00000bc9 	andeq	r0, r0, r9, asr #23
     c5c:	0c16041e 	cfldrseq	mvf0, [r6], {30}
     c60:	041f0000 	ldreq	r0, [pc], #-0	; c68 <startup-0x1ffff398>
     c64:	00000ab1 			; <UNDEFINED> instruction: 0x00000ab1
     c68:	0ffb0420 	svceq	0x00fb0420
     c6c:	04210000 	strteq	r0, [r1], #-0
     c70:	00000dfd 	strdeq	r0, [r0], -sp
     c74:	0edc0422 	cdpeq	4, 13, cr0, cr12, cr2, {1}
     c78:	04230000 	strteq	r0, [r3], #-0
     c7c:	00000884 	andeq	r0, r0, r4, lsl #17
     c80:	11e30424 	mvnne	r0, r4, lsr #8
     c84:	04250000 	strteq	r0, [r5], #-0
     c88:	000013ca 	andeq	r1, r0, sl, asr #7
     c8c:	0a000426 	beq	1d2c <startup-0x1fffe2d4>
     c90:	04270000 	strteq	r0, [r7], #-0
     c94:	000011be 			; <UNDEFINED> instruction: 0x000011be
     c98:	11860428 	orrne	r0, r6, r8, lsr #8
     c9c:	04290000 	strteq	r0, [r9], #-0
     ca0:	00000fa8 	andeq	r0, r0, r8, lsr #31
     ca4:	088e042a 	stmeq	lr, {r1, r3, r5, sl}
     ca8:	042b0000 	strteq	r0, [fp], #-0
     cac:	00000709 	andeq	r0, r0, r9, lsl #14
     cb0:	0cc4042c 	cfstrdeq	mvd0, [r4], {44}	; 0x2c
     cb4:	042d0000 	strteq	r0, [sp], #-0
     cb8:	0000152d 	andeq	r1, r0, sp, lsr #10
     cbc:	158b042e 	strne	r0, [fp, #1070]	; 0x42e
     cc0:	042f0000 	strteq	r0, [pc], #-0	; cc8 <startup-0x1ffff338>
     cc4:	0000129f 	muleq	r0, pc, r2	; <UNPREDICTABLE>
     cc8:	153a0430 	ldrne	r0, [sl, #-1072]!	; 0xfffffbd0
     ccc:	04310000 	ldrteq	r0, [r1], #-0
     cd0:	00000ada 	ldrdeq	r0, [r0], -sl
     cd4:	07720432 			; <UNDEFINED> instruction: 0x07720432
     cd8:	04330000 	ldrteq	r0, [r3], #-0
     cdc:	00000f73 	andeq	r0, r0, r3, ror pc
     ce0:	0e460434 	mcreq	4, 2, r0, cr6, cr4, {1}
     ce4:	04350000 	ldrteq	r0, [r5], #-0
     ce8:	00000fe2 	andeq	r0, r0, r2, ror #31
     cec:	0eac0436 	mcreq	4, 5, r0, cr12, cr6, {1}
     cf0:	04370000 	ldrteq	r0, [r7], #-0
     cf4:	00000dc0 	andeq	r0, r0, r0, asr #27
     cf8:	074a0438 	smlaldxeq	r0, sl, r8, r4
     cfc:	04390000 	ldrteq	r0, [r9], #-0
     d00:	000015fa 	strdeq	r1, [r0], -sl
     d04:	1097043a 	addsne	r0, r7, sl, lsr r4
     d08:	043b0000 	ldrteq	r0, [fp], #-0
     d0c:	00000a8c 	andeq	r0, r0, ip, lsl #21
     d10:	137a043c 	cmnne	sl, #60, 8	; 0x3c000000
     d14:	043d0000 	ldrteq	r0, [sp], #-0
     d18:	00000eb6 			; <UNDEFINED> instruction: 0x00000eb6
     d1c:	10b2043e 	adcsne	r0, r2, lr, lsr r4
     d20:	043f0000 	ldrteq	r0, [pc], #-0	; d28 <startup-0x1ffff2d8>
     d24:	00000860 	andeq	r0, r0, r0, ror #16
     d28:	12170440 	andsne	r0, r7, #64, 8	; 0x40000000
     d2c:	04410000 	strbeq	r0, [r1], #-0
     d30:	00000abe 			; <UNDEFINED> instruction: 0x00000abe
     d34:	0cee0442 	cfstrdeq	mvd0, [lr], #264	; 0x108
     d38:	04430000 	strbeq	r0, [r3], #-0
     d3c:	00000916 	andeq	r0, r0, r6, lsl r9
     d40:	12f70444 	rscsne	r0, r7, #68, 8	; 0x44000000
     d44:	04450000 	strbeq	r0, [r5], #-0
     d48:	00000cdc 	ldrdeq	r0, [r0], -ip
     d4c:	086e0446 	stmdaeq	lr!, {r1, r2, r6, sl}^
     d50:	04470000 	strbeq	r0, [r7], #-0
     d54:	0000135a 	andeq	r1, r0, sl, asr r3
     d58:	11a70448 			; <UNDEFINED> instruction: 0x11a70448
     d5c:	04490000 	strbeq	r0, [r9], #-0
     d60:	0000144c 	andeq	r1, r0, ip, asr #8
     d64:	1578044a 	ldrbne	r0, [r8, #-1098]!	; 0xfffffbb6
     d68:	044b0000 	strbeq	r0, [fp], #-0
     d6c:	00000d18 	andeq	r0, r0, r8, lsl sp
     d70:	0ec4044c 	cdpeq	4, 12, cr0, cr4, cr12, {2}
     d74:	044d0000 	strbeq	r0, [sp], #-0
     d78:	00000787 	andeq	r0, r0, r7, lsl #15
     d7c:	11b4044e 			; <UNDEFINED> instruction: 0x11b4044e
     d80:	044f0000 	strbeq	r0, [pc], #-0	; d88 <startup-0x1ffff278>
     d84:	00000c75 	andeq	r0, r0, r5, ror ip
     d88:	0f4c0450 	svceq	0x004c0450
     d8c:	00510000 	subseq	r0, r1, r0
     d90:	45060105 	strmi	r0, [r6, #-261]	; 0xfffffefb
     d94:	06000002 	streq	r0, [r0], -r2
     d98:	00000da9 	andeq	r0, r0, r9, lsr #27
     d9c:	25032f04 	strcs	r2, [r3, #-3844]	; 0xfffff0fc
     da0:	07000000 	streq	r0, [r0, -r0]
     da4:	000001bf 			; <UNDEFINED> instruction: 0x000001bf
     da8:	02712b05 	rsbseq	r2, r1, #5120	; 0x1400
     dac:	01050000 	mrseq	r0, (UNDEF: 5)
     db0:	00024308 	andeq	r4, r2, r8, lsl #6
     db4:	05020500 	streq	r0, [r2, #-1280]	; 0xfffffb00
     db8:	000000bd 	strheq	r0, [r0], -sp
     dbc:	00009507 	andeq	r9, r0, r7, lsl #10
     dc0:	8a390500 	bhi	e421c8 <startup-0x1f1bde38>
     dc4:	05000002 	streq	r0, [r0, #-2]
     dc8:	03fa0702 	mvnseq	r0, #524288	; 0x80000
     dcc:	3d070000 	stccc	0, cr0, [r7, #-0]
     dd0:	05000005 	streq	r0, [r0, #-5]
     dd4:	00029c4d 	andeq	r9, r2, sp, asr #24
     dd8:	05040500 	streq	r0, [r4, #-1280]	; 0xfffffb00
     ddc:	0000016d 	andeq	r0, r0, sp, ror #2
     de0:	00050e07 	andeq	r0, r5, r7, lsl #28
     de4:	ae4f0500 	cdpge	5, 4, cr0, cr15, cr0, {0}
     de8:	05000002 	streq	r0, [r0, #-2]
     dec:	031a0704 	tsteq	sl, #4, 14	; 0x100000
     df0:	08050000 	stmdaeq	r5, {}	; <UNPREDICTABLE>
     df4:	00016805 	andeq	r6, r1, r5, lsl #16
     df8:	07080500 	streq	r0, [r8, -r0, lsl #10]
     dfc:	00000315 	andeq	r0, r0, r5, lsl r3
     e00:	69050408 	stmdbvs	r5, {r3, sl}
     e04:	0500746e 	streq	r7, [r0, #-1134]	; 0xfffffb92
     e08:	031f0704 	tsteq	pc, #4, 14	; 0x100000
     e0c:	c1070000 	mrsgt	r0, (UNDEF: 7)
     e10:	06000001 	streq	r0, [r0], -r1
     e14:	00026618 	andeq	r6, r2, r8, lsl r6
     e18:	02d10900 	sbcseq	r0, r1, #0, 18
     e1c:	d10a0000 	mrsle	r0, (UNDEF: 10)
     e20:	09000002 	stmdbeq	r0, {r1}
     e24:	000002e1 	andeq	r0, r0, r1, ror #5
     e28:	00009707 	andeq	r9, r0, r7, lsl #14
     e2c:	7f240600 	svcvc	0x00240600
     e30:	09000002 	stmdbeq	r0, {r1}
     e34:	000002eb 	andeq	r0, r0, fp, ror #5
     e38:	00053f07 	andeq	r3, r5, r7, lsl #30
     e3c:	912c0600 			; <UNDEFINED> instruction: 0x912c0600
     e40:	09000002 	stmdbeq	r0, {r1}
     e44:	000002fb 	strdeq	r0, [r0], -fp
     e48:	00051007 	andeq	r1, r5, r7
     e4c:	a3300600 	teqge	r0, #0, 12
     e50:	09000002 	stmdbeq	r0, {r1}
     e54:	0000030b 	andeq	r0, r0, fp, lsl #6
     e58:	0003160a 	andeq	r1, r3, sl, lsl #12
     e5c:	0e040b00 	vmlaeq.f64	d0, d4, d0
     e60:	dc01a001 	stcle	0, cr10, [r1], {1}
     e64:	0c000003 	stceq	0, cr0, [r0], {3}
     e68:	000015b1 			; <UNDEFINED> instruction: 0x000015b1
     e6c:	ec01a201 	sfm	f2, 1, [r1], {1}
     e70:	00000003 	andeq	r0, r0, r3
     e74:	0004810c 	andeq	r8, r4, ip, lsl #2
     e78:	01a30100 			; <UNDEFINED> instruction: 0x01a30100
     e7c:	000003f1 	strdeq	r0, [r0], -r1
     e80:	12400c20 	subne	r0, r0, #32, 24	; 0x2000
     e84:	a4010000 	strge	r0, [r1], #-0
     e88:	0003ec01 	andeq	lr, r3, r1, lsl #24
     e8c:	d50c8000 	strle	r8, [ip, #-0]
     e90:	01000006 	tsteq	r0, r6
     e94:	03f101a5 	mvnseq	r0, #1073741865	; 0x40000029
     e98:	0da00000 	stceq	0, cr0, [r0]
     e9c:	0000154a 	andeq	r1, r0, sl, asr #10
     ea0:	ec01a601 	stc	6, cr10, [r1], {1}
     ea4:	00000003 	andeq	r0, r0, r3
     ea8:	04950d01 	ldreq	r0, [r5], #3329	; 0xd01
     eac:	a7010000 	strge	r0, [r1, -r0]
     eb0:	0003f101 	andeq	pc, r3, r1, lsl #2
     eb4:	0d012000 	stceq	0, cr2, [r1, #-0]
     eb8:	0000082f 	andeq	r0, r0, pc, lsr #16
     ebc:	ec01a801 	stc	8, cr10, [r1], {1}
     ec0:	80000003 	andhi	r0, r0, r3
     ec4:	049f0d01 	ldreq	r0, [pc], #3329	; ecc <startup-0x1ffff134>
     ec8:	a9010000 	stmdbge	r1, {}	; <UNPREDICTABLE>
     ecc:	0003f101 	andeq	pc, r3, r1, lsl #2
     ed0:	0d01a000 	stceq	0, cr10, [r1, #-0]
     ed4:	00000a9e 	muleq	r0, lr, sl
     ed8:	ec01aa01 			; <UNDEFINED> instruction: 0xec01aa01
     edc:	00000003 	andeq	r0, r0, r3
     ee0:	04a90d02 	strteq	r0, [r9], #3330	; 0xd02
     ee4:	ab010000 	blge	40eec <startup-0x1ffbf114>
     ee8:	00040101 	andeq	r0, r4, r1, lsl #2
     eec:	0e022000 	cdpeq	0, 0, cr2, cr2, cr0, {0}
     ef0:	01005049 	tsteq	r0, r9, asr #32
     ef4:	042101ac 	strteq	r0, [r1], #-428	; 0xfffffe54
     ef8:	03000000 	movweq	r0, #0
     efc:	0004b30d 	andeq	fp, r4, sp, lsl #6
     f00:	01ad0100 			; <UNDEFINED> instruction: 0x01ad0100
     f04:	00000426 	andeq	r0, r0, r6, lsr #8
     f08:	110d03f0 	strdne	r0, [sp, -r0]
     f0c:	0100000c 	tsteq	r0, ip
     f10:	031601ae 	tsteq	r6, #-2147483605	; 0x8000002b
     f14:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
     f18:	03160f00 	tsteq	r6, #0, 30
     f1c:	03ec0000 	mvneq	r0, #0
     f20:	ca100000 	bgt	400f28 <startup-0x1fbff0d8>
     f24:	07000002 	streq	r0, [r0, -r2]
     f28:	03dc0900 	bicseq	r0, ip, #0, 18
     f2c:	0b0f0000 	bleq	3c0f34 <startup-0x1fc3f0cc>
     f30:	01000003 	tsteq	r0, r3
     f34:	10000004 	andne	r0, r0, r4
     f38:	000002ca 	andeq	r0, r0, sl, asr #5
     f3c:	0b0f0017 	bleq	3c0fa0 <startup-0x1fc3f060>
     f40:	11000003 	tstne	r0, r3
     f44:	10000004 	andne	r0, r0, r4
     f48:	000002ca 	andeq	r0, r0, sl, asr #5
     f4c:	dc0f0037 	stcle	0, cr0, [pc], {55}	; 0x37
     f50:	21000002 	tstcs	r0, r2
     f54:	10000004 	andne	r0, r0, r4
     f58:	000002ca 	andeq	r0, r0, sl, asr #5
     f5c:	110900ef 	smlattne	r9, pc, r0, r0
     f60:	0f000004 	svceq	0x00000004
     f64:	0000030b 	andeq	r0, r0, fp, lsl #6
     f68:	00000437 	andeq	r0, r0, r7, lsr r4
     f6c:	0002ca11 	andeq	ip, r2, r1, lsl sl
     f70:	00028300 	andeq	r8, r2, r0, lsl #6
     f74:	00119d06 	andseq	r9, r1, r6, lsl #26
     f78:	01af0100 			; <UNDEFINED> instruction: 0x01af0100
     f7c:	00000320 	andeq	r0, r0, r0, lsr #6
     f80:	c0018c12 	andgt	r8, r1, r2, lsl ip
     f84:	00055e01 	andeq	r5, r5, r1, lsl #28
     f88:	08eb0c00 	stmiaeq	fp!, {sl, fp}^
     f8c:	c2010000 	andgt	r0, r1, #0
     f90:	00031b01 	andeq	r1, r3, r1, lsl #22
     f94:	140c0000 	strne	r0, [ip], #-0
     f98:	0100000a 	tsteq	r0, sl
     f9c:	031601c3 	tsteq	r6, #-1073741776	; 0xc0000030
     fa0:	0c040000 	stceq	0, cr0, [r4], {-0}
     fa4:	0000076d 	andeq	r0, r0, sp, ror #14
     fa8:	1601c401 	strne	ip, [r1], -r1, lsl #8
     fac:	08000003 	stmdaeq	r0, {r0, r1}
     fb0:	0008bb0c 	andeq	fp, r8, ip, lsl #22
     fb4:	01c50100 	biceq	r0, r5, r0, lsl #2
     fb8:	00000316 	andeq	r0, r0, r6, lsl r3
     fbc:	4353130c 	cmpmi	r3, #12, 6	; 0x30000000
     fc0:	c6010052 			; <UNDEFINED> instruction: 0xc6010052
     fc4:	00031601 	andeq	r1, r3, r1, lsl #12
     fc8:	43131000 	tstmi	r3, #0
     fcc:	01005243 	tsteq	r0, r3, asr #4
     fd0:	031601c7 	tsteq	r6, #-1073741775	; 0xc0000031
     fd4:	13140000 	tstne	r4, #0
     fd8:	00504853 	subseq	r4, r0, r3, asr r8
     fdc:	6e01c801 	cdpvs	8, 0, cr12, cr1, cr1, {0}
     fe0:	18000005 	stmdane	r0, {r0, r2}
     fe4:	000c030c 	andeq	r0, ip, ip, lsl #6
     fe8:	01c90100 	biceq	r0, r9, r0, lsl #2
     fec:	00000316 	andeq	r0, r0, r6, lsl r3
     ff0:	12bd0c24 	adcsne	r0, sp, #36, 24	; 0x2400
     ff4:	ca010000 	bgt	40ffc <startup-0x1ffbf004>
     ff8:	00031601 	andeq	r1, r3, r1, lsl #12
     ffc:	860c2800 	strhi	r2, [ip], -r0, lsl #16
    1000:	0100000b 	tsteq	r0, fp
    1004:	031601cb 	tsteq	r6, #-1073741774	; 0xc0000032
    1008:	0c2c0000 	stceq	0, cr0, [ip], #-0
    100c:	00000b14 	andeq	r0, r0, r4, lsl fp
    1010:	1601cc01 	strne	ip, [r1], -r1, lsl #24
    1014:	30000003 	andcc	r0, r0, r3
    1018:	0013940c 	andseq	r9, r3, ip, lsl #8
    101c:	01cd0100 	biceq	r0, sp, r0, lsl #2
    1020:	00000316 	andeq	r0, r0, r6, lsl r3
    1024:	10690c34 	rsbne	r0, r9, r4, lsr ip
    1028:	ce010000 	cdpgt	0, 0, cr0, cr1, cr0, {0}
    102c:	00031601 	andeq	r1, r3, r1, lsl #12
    1030:	8d0c3800 	stchi	8, cr3, [ip, #-0]
    1034:	01000012 	tsteq	r0, r2, lsl r0
    1038:	031601cf 	tsteq	r6, #-1073741773	; 0xc0000033
    103c:	133c0000 	teqne	ip, #0
    1040:	00524650 	subseq	r4, r2, r0, asr r6
    1044:	8801d001 	stmdahi	r1, {r0, ip, lr, pc}
    1048:	40000005 	andmi	r0, r0, r5
    104c:	52464413 	subpl	r4, r6, #318767104	; 0x13000000
    1050:	01d10100 	bicseq	r0, r1, r0, lsl #2
    1054:	0000031b 	andeq	r0, r0, fp, lsl r3
    1058:	44411348 	strbmi	r1, [r1], #-840	; 0xfffffcb8
    105c:	d2010052 	andle	r0, r1, #82	; 0x52
    1060:	00031b01 	andeq	r1, r3, r1, lsl #22
    1064:	830c4c00 	movwhi	r4, #52224	; 0xcc00
    1068:	01000013 	tsteq	r0, r3, lsl r0
    106c:	05a201d3 	streq	r0, [r2, #467]!	; 0x1d3
    1070:	0c500000 	mraeq	r0, r0, acc0
    1074:	000013b3 			; <UNDEFINED> instruction: 0x000013b3
    1078:	bc01d401 	cfstrslt	mvf13, [r1], {1}
    107c:	60000005 	andvs	r0, r0, r5
    1080:	0004810c 	andeq	r8, r4, ip, lsl #2
    1084:	01d50100 	bicseq	r0, r5, r0, lsl #2
    1088:	000005c1 	andeq	r0, r0, r1, asr #11
    108c:	15440c74 	strbne	r0, [r4, #-3188]	; 0xfffff38c
    1090:	d6010000 	strle	r0, [r1], -r0
    1094:	00031601 	andeq	r1, r3, r1, lsl #12
    1098:	0f008800 	svceq	0x00008800
    109c:	000002dc 	ldrdeq	r0, [r0], -ip
    10a0:	0000056e 	andeq	r0, r0, lr, ror #10
    10a4:	0002ca10 	andeq	ip, r2, r0, lsl sl
    10a8:	09000b00 	stmdbeq	r0, {r8, r9, fp}
    10ac:	0000055e 	andeq	r0, r0, lr, asr r5
    10b0:	00031b0f 	andeq	r1, r3, pc, lsl #22
    10b4:	00058300 	andeq	r8, r5, r0, lsl #6
    10b8:	02ca1000 	sbceq	r1, sl, #0
    10bc:	00010000 	andeq	r0, r1, r0
    10c0:	0005730a 	andeq	r7, r5, sl, lsl #6
    10c4:	05830900 	streq	r0, [r3, #2304]	; 0x900
    10c8:	1b0f0000 	blne	3c10d0 <startup-0x1fc3ef30>
    10cc:	9d000003 	stcls	0, cr0, [r0, #-12]
    10d0:	10000005 	andne	r0, r0, r5
    10d4:	000002ca 	andeq	r0, r0, sl, asr #5
    10d8:	8d0a0003 	stchi	0, cr0, [sl, #-12]
    10dc:	09000005 	stmdbeq	r0, {r0, r2}
    10e0:	0000059d 	muleq	r0, sp, r5
    10e4:	00031b0f 	andeq	r1, r3, pc, lsl #22
    10e8:	0005b700 	andeq	fp, r5, r0, lsl #14
    10ec:	02ca1000 	sbceq	r1, sl, #0
    10f0:	00040000 	andeq	r0, r4, r0
    10f4:	0005a70a 	andeq	sl, r5, sl, lsl #14
    10f8:	05b70900 	ldreq	r0, [r7, #2304]!	; 0x900
    10fc:	0b0f0000 	bleq	3c1104 <startup-0x1fc3eefc>
    1100:	d1000003 	tstle	r0, r3
    1104:	10000005 	andne	r0, r0, r5
    1108:	000002ca 	andeq	r0, r0, sl, asr #5
    110c:	fa060004 	blx	181124 <startup-0x1fe7eedc>
    1110:	0100000a 	tsteq	r0, sl
    1114:	044301d7 	strbeq	r0, [r3], #-471	; 0xfffffe29
    1118:	10120000 	andsne	r0, r2, r0
    111c:	1b02bf01 	blne	b0d28 <startup-0x1ff4f2d8>
    1120:	0c000006 	stceq	0, cr0, [r0], {6}
    1124:	00000fdd 	ldrdeq	r0, [r0], -sp
    1128:	1602c101 	strne	ip, [r2], -r1, lsl #2
    112c:	00000003 	andeq	r0, r0, r3
    1130:	0013110c 	andseq	r1, r3, ip, lsl #2
    1134:	02c20100 	sbceq	r0, r2, #0, 2
    1138:	00000316 	andeq	r0, r0, r6, lsl r3
    113c:	41561304 	cmpmi	r6, r4, lsl #6
    1140:	c301004c 	movwgt	r0, #4172	; 0x104c
    1144:	00031602 	andeq	r1, r3, r2, lsl #12
    1148:	990c0800 	stmdbls	ip, {fp}
    114c:	01000012 	tsteq	r0, r2, lsl r0
    1150:	031b02c4 	tsteq	fp, #196, 4	; 0x4000000c
    1154:	000c0000 	andeq	r0, ip, r0
    1158:	0010fd06 	andseq	pc, r0, r6, lsl #26
    115c:	02c50100 	sbceq	r0, r5, #0, 2
    1160:	000005dd 	ldrdeq	r0, [r0], -sp
    1164:	00030b0f 	andeq	r0, r3, pc, lsl #22
    1168:	00063700 	andeq	r3, r6, r0, lsl #14
    116c:	02ca1000 	sbceq	r1, sl, #0
    1170:	00010000 	andeq	r0, r1, r0
    1174:	00063314 	andeq	r3, r6, r4, lsl r3
    1178:	06fa0100 	ldrbteq	r0, [sl], r0, lsl #2
    117c:	00000306 	andeq	r0, r0, r6, lsl #6
    1180:	00043d15 	andeq	r3, r4, r5, lsl sp
    1184:	0b3b0700 	bleq	ec2d8c <startup-0x1f13d274>
    1188:	16000003 	strne	r0, [r0], -r3
    118c:	02710107 	rsbseq	r0, r1, #-1073741823	; 0xc0000001
    1190:	5d040000 	stcpl	0, cr0, [r4, #-0]
    1194:	00066903 	andeq	r6, r6, r3, lsl #18
    1198:	167a0400 	ldrbtne	r0, [sl], -r0, lsl #8
    119c:	17000000 	strne	r0, [r0, -r0]
    11a0:	00544553 	subseq	r4, r4, r3, asr r5
    11a4:	08060001 	stmdaeq	r6, {r0}
    11a8:	0400000f 	streq	r0, [r0], #-15
    11ac:	064e035d 			; <UNDEFINED> instruction: 0x064e035d
    11b0:	c9060000 	stmdbgt	r6, {}	; <UNPREDICTABLE>
    11b4:	0400000f 	streq	r0, [r0], #-15
    11b8:	064e035d 			; <UNDEFINED> instruction: 0x064e035d
    11bc:	07160000 	ldreq	r0, [r6, -r0]
    11c0:	00027101 	andeq	r7, r2, r1, lsl #2
    11c4:	035f0400 	cmpeq	pc, #0, 8
    11c8:	0000069c 	muleq	r0, ip, r6
    11cc:	00012b04 	andeq	r2, r1, r4, lsl #22
    11d0:	65040000 	strvs	r0, [r4, #-0]
    11d4:	01000006 	tsteq	r0, r6
    11d8:	04e70600 	strbteq	r0, [r7], #1536	; 0x600
    11dc:	5f040000 	svcpl	0x00040000
    11e0:	00068103 	andeq	r8, r6, r3, lsl #2
    11e4:	01071600 	tsteq	r7, r0, lsl #12
    11e8:	00000271 	andeq	r0, r0, r1, ror r2
    11ec:	c3036204 	movwgt	r6, #12804	; 0x3204
    11f0:	04000006 	streq	r0, [r0], #-6
    11f4:	00000df7 	strdeq	r0, [r0], -r7
    11f8:	12050400 	andne	r0, r5, #0, 8
    11fc:	00010000 	andeq	r0, r1, r0
    1200:	00114806 	andseq	r4, r1, r6, lsl #16
    1204:	03620400 	cmneq	r2, #0, 8
    1208:	000006a8 	andeq	r0, r0, r8, lsr #13
    120c:	c3042812 	movwgt	r2, #18450	; 0x4812
    1210:	00075b05 	andeq	r5, r7, r5, lsl #22
    1214:	14ac0c00 	strtne	r0, [ip], #3072	; 0xc00
    1218:	c5040000 	strgt	r0, [r4, #-0]
    121c:	00031605 	andeq	r1, r3, r5, lsl #12
    1220:	920c0000 	andls	r0, ip, #0
    1224:	04000012 	streq	r0, [r0], #-18	; 0xffffffee
    1228:	031605c6 	tsteq	r6, #830472192	; 0x31800000
    122c:	0c040000 	stceq	0, cr0, [r4], {-0}
    1230:	00000e22 	andeq	r0, r0, r2, lsr #28
    1234:	1605c704 	strne	ip, [r5], -r4, lsl #14
    1238:	08000003 	stmdaeq	r0, {r0, r1}
    123c:	000ed00c 	andeq	sp, lr, ip
    1240:	05c80400 	strbeq	r0, [r8, #1024]	; 0x400
    1244:	00000316 	andeq	r0, r0, r6, lsl r3
    1248:	4449130c 	strbmi	r1, [r9], #-780	; 0xfffffcf4
    124c:	c9040052 	stmdbgt	r4, {r1, r4, r6}
    1250:	00031605 	andeq	r1, r3, r5, lsl #12
    1254:	4f131000 	svcmi	0x00131000
    1258:	04005244 	streq	r5, [r0], #-580	; 0xfffffdbc
    125c:	031605ca 	tsteq	r6, #847249408	; 0x32800000
    1260:	0c140000 	ldceq	0, cr0, [r4], {-0}
    1264:	00000f1e 	andeq	r0, r0, lr, lsl pc
    1268:	f605cb04 			; <UNDEFINED> instruction: 0xf605cb04
    126c:	18000002 	stmdane	r0, {r1}
    1270:	000efb0c 	andeq	pc, lr, ip, lsl #22
    1274:	05cc0400 	strbeq	r0, [ip, #1024]	; 0x400
    1278:	000002f6 	strdeq	r0, [r0], -r6
    127c:	0de10c1a 	stcleq	12, cr0, [r1, #104]!	; 0x68
    1280:	cd040000 	stcgt	0, cr0, [r4, #-0]
    1284:	00031605 	andeq	r1, r3, r5, lsl #12
    1288:	41131c00 	tstmi	r3, r0, lsl #24
    128c:	04005246 	streq	r5, [r0], #-582	; 0xfffffdba
    1290:	076b05ce 	strbeq	r0, [fp, -lr, asr #11]!
    1294:	00200000 	eoreq	r0, r0, r0
    1298:	0003160f 	andeq	r1, r3, pc, lsl #12
    129c:	00076b00 	andeq	r6, r7, r0, lsl #22
    12a0:	02ca1000 	sbceq	r1, sl, #0
    12a4:	00010000 	andeq	r0, r1, r0
    12a8:	00075b09 	andeq	r5, r7, r9, lsl #22
    12ac:	13fa0600 	mvnsne	r0, #0, 12
    12b0:	cf040000 	svcgt	0x00040000
    12b4:	0006cf05 	andeq	ip, r6, r5, lsl #30
    12b8:	04981200 	ldreq	r1, [r8], #512	; 0x200
    12bc:	093f0664 	ldmdbeq	pc!, {r2, r5, r6, r9, sl}	; <UNPREDICTABLE>
    12c0:	43130000 	tstmi	r3, #0
    12c4:	66040052 			; <UNDEFINED> instruction: 0x66040052
    12c8:	00031606 	andeq	r1, r3, r6, lsl #12
    12cc:	3e0c0000 	cdpcc	0, 0, cr0, cr12, cr0, {0}
    12d0:	0400000e 	streq	r0, [r0], #-14
    12d4:	03160667 	tsteq	r6, #108003328	; 0x6700000
    12d8:	0c040000 	stceq	0, cr0, [r4], {-0}
    12dc:	00001500 	andeq	r1, r0, r0, lsl #10
    12e0:	16066804 	strne	r6, [r6], -r4, lsl #16
    12e4:	08000003 	stmdaeq	r0, {r0, r1}
    12e8:	52494313 	subpl	r4, r9, #1275068416	; 0x4c000000
    12ec:	06690400 	strbteq	r0, [r9], -r0, lsl #8
    12f0:	00000316 	andeq	r0, r0, r6, lsl r3
    12f4:	0b190c0c 	bleq	64432c <startup-0x1f9bbcd4>
    12f8:	6a040000 	bvs	101300 <startup-0x1fefed00>
    12fc:	00031606 	andeq	r1, r3, r6, lsl #12
    1300:	710c1000 	mrsvc	r1, (UNDEF: 12)
    1304:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
    1308:	0316066b 	tsteq	r6, #112197632	; 0x6b00000
    130c:	0c140000 	ldceq	0, cr0, [r4], {-0}
    1310:	0000113a 	andeq	r1, r0, sl, lsr r1
    1314:	16066c04 	strne	r6, [r6], -r4, lsl #24
    1318:	18000003 	stmdane	r0, {r0, r1}
    131c:	0004810c 	andeq	r8, r4, ip, lsl #2
    1320:	066d0400 	strbteq	r0, [sp], -r0, lsl #8
    1324:	0000030b 	andeq	r0, r0, fp, lsl #6
    1328:	117d0c1c 	cmnne	sp, ip, lsl ip
    132c:	6e040000 	cdpvs	0, 0, cr0, cr4, cr0, {0}
    1330:	00031606 	andeq	r1, r3, r6, lsl #12
    1334:	f20c2000 	vhadd.s8	d2, d12, d0
    1338:	0400000e 	streq	r0, [r0], #-14
    133c:	0316066f 	tsteq	r6, #116391936	; 0x6f00000
    1340:	0c240000 	stceq	0, cr0, [r4], #-0
    1344:	0000048b 	andeq	r0, r0, fp, lsl #9
    1348:	27067004 	strcs	r7, [r6, -r4]
    134c:	28000006 	stmdacs	r0, {r1, r2}
    1350:	0013090c 	andseq	r0, r3, ip, lsl #18
    1354:	06710400 	ldrbteq	r0, [r1], -r0, lsl #8
    1358:	00000316 	andeq	r0, r0, r6, lsl r3
    135c:	0b610c30 	bleq	1844424 <startup-0x1e7bbbdc>
    1360:	72040000 	andvc	r0, r4, #0
    1364:	00031606 	andeq	r1, r3, r6, lsl #12
    1368:	e10c3400 	tst	ip, r0, lsl #8
    136c:	04000015 	streq	r0, [r0], #-21	; 0xffffffeb
    1370:	03160673 	tsteq	r6, #120586240	; 0x7300000
    1374:	0c380000 	ldceq	0, cr0, [r8], #-0
    1378:	00000495 	muleq	r0, r5, r4
    137c:	0b067404 	bleq	19e394 <startup-0x1fe61c6c>
    1380:	3c000003 	stccc	0, cr0, [r0], {3}
    1384:	0011950c 	andseq	r9, r1, ip, lsl #10
    1388:	06750400 	ldrbteq	r0, [r5], -r0, lsl #8
    138c:	00000316 	andeq	r0, r0, r6, lsl r3
    1390:	09af0c40 	stmibeq	pc!, {r6, sl, fp}	; <UNPREDICTABLE>
    1394:	76040000 	strvc	r0, [r4], -r0
    1398:	00031606 	andeq	r1, r3, r6, lsl #12
    139c:	9f0c4400 	svcls	0x000c4400
    13a0:	04000004 	streq	r0, [r0], #-4
    13a4:	06270677 			; <UNDEFINED> instruction: 0x06270677
    13a8:	0c480000 	mareq	acc0, r0, r8
    13ac:	000009cb 	andeq	r0, r0, fp, asr #19
    13b0:	16067804 	strne	r7, [r6], -r4, lsl #16
    13b4:	50000003 	andpl	r0, r0, r3
    13b8:	0008a20c 	andeq	sl, r8, ip, lsl #4
    13bc:	06790400 	ldrbteq	r0, [r9], -r0, lsl #8
    13c0:	00000316 	andeq	r0, r0, r6, lsl r3
    13c4:	12450c54 	subne	r0, r5, #84, 24	; 0x5400
    13c8:	7a040000 	bvc	1013d0 <startup-0x1fefec30>
    13cc:	00031606 	andeq	r1, r3, r6, lsl #12
    13d0:	a90c5800 	stmdbge	ip, {fp, ip, lr}
    13d4:	04000004 	streq	r0, [r0], #-4
    13d8:	030b067b 	movweq	r0, #46715	; 0xb67b
    13dc:	0c5c0000 	mraeq	r0, ip, acc0
    13e0:	0000106e 	andeq	r1, r0, lr, rrx
    13e4:	16067c04 	strne	r7, [r6], -r4, lsl #24
    13e8:	60000003 	andvs	r0, r0, r3
    13ec:	000f7e0c 	andeq	r7, pc, ip, lsl #28
    13f0:	067d0400 	ldrbteq	r0, [sp], -r0, lsl #8
    13f4:	00000316 	andeq	r0, r0, r6, lsl r3
    13f8:	04b30c64 	ldrteq	r0, [r3], #3172	; 0xc64
    13fc:	7e040000 	cdpvc	0, 0, cr0, cr4, cr0, {0}
    1400:	00062706 	andeq	r2, r6, r6, lsl #14
    1404:	fe0c6800 	vcmla.f16	d6, d12, d0[0], #0
    1408:	0400000b 	streq	r0, [r0], #-11
    140c:	0316067f 	tsteq	r6, #133169152	; 0x7f00000
    1410:	13700000 	cmnne	r0, #0
    1414:	00525343 	subseq	r5, r2, r3, asr #6
    1418:	16068004 	strne	r8, [r6], -r4
    141c:	74000003 	strvc	r0, [r0], #-3
    1420:	0004bd0c 	andeq	fp, r4, ip, lsl #26
    1424:	06810400 	streq	r0, [r1], r0, lsl #8
    1428:	00000627 	andeq	r0, r0, r7, lsr #12
    142c:	0ed60c78 	mrceq	12, 6, r0, cr6, cr8, {3}
    1430:	82040000 	andhi	r0, r4, #0
    1434:	00031606 	andeq	r1, r3, r6, lsl #12
    1438:	1c0c8000 	stcne	0, cr8, [ip], {-0}
    143c:	04000007 	streq	r0, [r0], #-7
    1440:	03160683 	tsteq	r6, #137363456	; 0x8300000
    1444:	0c840000 	stceq	0, cr0, [r4], {0}
    1448:	000014fa 	strdeq	r1, [r0], -sl
    144c:	16068404 	strne	r8, [r6], -r4, lsl #8
    1450:	88000003 	stmdahi	r0, {r0, r1}
    1454:	000a0c0c 	andeq	r0, sl, ip, lsl #24
    1458:	06850400 	streq	r0, [r5], r0, lsl #8
    145c:	00000316 	andeq	r0, r0, r6, lsl r3
    1460:	10a90c8c 	adcne	r0, r9, ip, lsl #25
    1464:	86040000 	strhi	r0, [r4], -r0
    1468:	00031606 	andeq	r1, r3, r6, lsl #12
    146c:	b40c9000 	strlt	r9, [ip], #-0
    1470:	04000012 	streq	r0, [r0], #-18	; 0xffffffee
    1474:	03160687 	tsteq	r6, #141557760	; 0x8700000
    1478:	00940000 	addseq	r0, r4, r0
    147c:	00138806 	andseq	r8, r3, r6, lsl #16
    1480:	06890400 	streq	r0, [r9], r0, lsl #8
    1484:	0000077c 	andeq	r0, r0, ip, ror r7
    1488:	30081018 	andcc	r1, r8, r8, lsl r0
    148c:	00000984 	andeq	r0, r0, r4, lsl #19
    1490:	00002619 	andeq	r2, r0, r9, lsl r6
    1494:	0b320800 	bleq	c8349c <startup-0x1f37cb64>
    1498:	00000003 	andeq	r0, r0, r3
    149c:	00005519 	andeq	r5, r0, r9, lsl r5
    14a0:	0b330800 	bleq	cc34a8 <startup-0x1f33cb58>
    14a4:	04000003 	streq	r0, [r0], #-3
    14a8:	00051919 	andeq	r1, r5, r9, lsl r9
    14ac:	0b340800 	bleq	d034b4 <startup-0x1f2fcb4c>
    14b0:	08000003 	stmdaeq	r0, {r0, r1}
    14b4:	00044d19 	andeq	r4, r4, r9, lsl sp
    14b8:	0b350800 	bleq	d434c0 <startup-0x1f2bcb40>
    14bc:	0c000003 	stceq	0, cr0, [r0], {3}
    14c0:	03700700 	cmneq	r0, #0, 14
    14c4:	36080000 	strcc	r0, [r8], -r0
    14c8:	0000094b 	andeq	r0, r0, fp, asr #18
    14cc:	0002e60f 	andeq	lr, r2, pc, lsl #12
    14d0:	00099f00 	andeq	r9, r9, r0, lsl #30
    14d4:	02ca1000 	sbceq	r1, sl, #0
    14d8:	000f0000 	andeq	r0, pc, r0
    14dc:	00098f0a 	andeq	r8, r9, sl, lsl #30
    14e0:	099f0900 	ldmibeq	pc, {r8, fp}	; <UNPREDICTABLE>
    14e4:	6f1a0000 	svcvs	0x001a0000
    14e8:	0200000e 	andeq	r0, r0, #14
    14ec:	0009a499 	muleq	r9, r9, r4
    14f0:	04030500 	streq	r0, [r3], #-1280	; 0xfffffb00
    14f4:	1b20004b 	blne	801628 <startup-0x1f7fe9d8>
    14f8:	02710107 	rsbseq	r0, r1, #-1073741823	; 0xc0000001
    14fc:	42090000 	andmi	r0, r9, #0
    1500:	000009e0 	andeq	r0, r0, r0, ror #19
    1504:	000db304 	andeq	fp, sp, r4, lsl #6
    1508:	5a040000 	bpl	101510 <startup-0x1fefeaf0>
    150c:	0100000c 	tsteq	r0, ip
    1510:	00092804 	andeq	r2, r9, r4, lsl #16
    1514:	64040200 	strvs	r0, [r4], #-512	; 0xfffffe00
    1518:	03000009 	movweq	r0, #9
    151c:	124f0700 	subne	r0, pc, #0, 14
    1520:	47090000 	strmi	r0, [r9, -r0]
    1524:	000009ba 			; <UNDEFINED> instruction: 0x000009ba
    1528:	7101071b 	tstvc	r1, fp, lsl r7
    152c:	09000002 	stmdbeq	r0, {r1}
    1530:	000a054f 	andeq	r0, sl, pc, asr #10
    1534:	0aa30400 	beq	fe8c253c <_global_impure_ptr+0xde8bd518>
    1538:	04000000 	streq	r0, [r0], #-0
    153c:	00000a25 	andeq	r0, r0, r5, lsr #20
    1540:	cb070001 	blgt	1c154c <startup-0x1fe3eab4>
    1544:	09000007 	stmdbeq	r0, {r0, r1, r2}
    1548:	0009eb52 	andeq	lr, r9, r2, asr fp
    154c:	01071b00 	tsteq	r7, r0, lsl #22
    1550:	00000271 	andeq	r0, r0, r1, ror r2
    1554:	0a365a09 	beq	d97d80 <startup-0x1f268280>
    1558:	69040000 	stmdbvs	r4, {}	; <UNPREDICTABLE>
    155c:	0000000b 	andeq	r0, r0, fp
    1560:	000e8004 	andeq	r8, lr, r4
    1564:	0c040100 	stfeqs	f0, [r4], {-0}
    1568:	02000016 	andeq	r0, r0, #22
    156c:	000f2404 	andeq	r2, pc, r4, lsl #8
    1570:	07000300 	streq	r0, [r0, -r0, lsl #6]
    1574:	00001316 	andeq	r1, r0, r6, lsl r3
    1578:	0a105f09 	beq	4191a4 <startup-0x1fbe6e5c>
    157c:	071b0000 	ldreq	r0, [fp, -r0]
    1580:	00027101 	andeq	r7, r2, r1, lsl #2
    1584:	616e0900 	cmnvs	lr, r0, lsl #18
    1588:	0400000a 	streq	r0, [r0], #-10
    158c:	0000075c 	andeq	r0, r0, ip, asr r7
    1590:	14e00400 	strbtne	r0, [r0], #1024	; 0x400
    1594:	04010000 	streq	r0, [r1], #-0
    1598:	000008ac 	andeq	r0, r0, ip, lsr #17
    159c:	03070002 	movweq	r0, #28674	; 0x7002
    15a0:	0900000b 	stmdbeq	r0, {r0, r1, r3}
    15a4:	000a4172 	andeq	r4, sl, r2, ror r1
    15a8:	09081800 	stmdbeq	r8, {fp, ip}
    15ac:	000ab184 	andeq	fp, sl, r4, lsl #3
    15b0:	133a1900 	teqne	sl, #0, 18
    15b4:	86090000 	strhi	r0, [r9], -r0
    15b8:	0000030b 	andeq	r0, r0, fp, lsl #6
    15bc:	120d1900 	andne	r1, sp, #0, 18
    15c0:	89090000 	stmdbhi	r9, {}	; <UNPREDICTABLE>
    15c4:	000009e0 	andeq	r0, r0, r0, ror #19
    15c8:	0ff01904 	svceq	0x00f01904
    15cc:	8c090000 	stchi	0, cr0, [r9], {-0}
    15d0:	00000a36 	andeq	r0, r0, r6, lsr sl
    15d4:	0e641905 	vmuleq.f16	s3, s8, s10	; <UNPREDICTABLE>
    15d8:	8f090000 	svchi	0x00090000
    15dc:	00000a05 	andeq	r0, r0, r5, lsl #20
    15e0:	13671906 	cmnne	r7, #98304	; 0x18000
    15e4:	92090000 	andls	r0, r9, #0
    15e8:	00000a61 	andeq	r0, r0, r1, ror #20
    15ec:	33070007 	movwcc	r0, #28679	; 0x7007
    15f0:	0900000a 	stmdbeq	r0, {r1, r3}
    15f4:	000a6c94 	muleq	sl, r4, ip
    15f8:	11431c00 	cmpne	r3, r0, lsl #24
    15fc:	0a140000 	beq	501604 <startup-0x1fafe9fc>
    1600:	000b2801 	andeq	r2, fp, r1, lsl #16
    1604:	64691d00 	strbtvs	r1, [r9], #-3328	; 0xfffff300
    1608:	28030a00 	stmdacs	r3, {r9, fp}
    160c:	0000000b 	andeq	r0, r0, fp
    1610:	00098119 	andeq	r8, r9, r9, lsl r1
    1614:	71040a00 	tstvc	r4, r0, lsl #20
    1618:	01000002 	tsteq	r0, r2
    161c:	00087a19 	andeq	r7, r8, r9, lsl sl
    1620:	28050a00 	stmdacs	r5, {r9, fp}
    1624:	0200000b 	andeq	r0, r0, #11
    1628:	00110a19 	andseq	r0, r1, r9, lsl sl
    162c:	28060a00 	stmdacs	r6, {r9, fp}
    1630:	0300000b 	movweq	r0, #11
    1634:	00139a19 	andseq	r9, r3, r9, lsl sl
    1638:	c3070a00 	movwgt	r0, #31232	; 0x7a00
    163c:	04000002 	streq	r0, [r0], #-2
    1640:	0012ed19 	andseq	lr, r2, r9, lsl sp
    1644:	c3080a00 	movwgt	r0, #35328	; 0x8a00
    1648:	08000002 	stmdaeq	r0, {r1}
    164c:	000b8b19 	andeq	r8, fp, r9, lsl fp
    1650:	c3090a00 	movwgt	r0, #39424	; 0x9a00
    1654:	0c000002 	stceq	0, cr0, [r0], {2}
    1658:	00146019 	andseq	r6, r4, r9, lsl r0
    165c:	c30a0a00 	movwgt	r0, #43520	; 0xaa00
    1660:	10000002 	andne	r0, r0, r2
    1664:	08010500 	stmdaeq	r1, {r8, sl}
    1668:	0000024c 	andeq	r0, r0, ip, asr #4
    166c:	00114307 	andseq	r4, r1, r7, lsl #6
    1670:	bc0b0a00 			; <UNDEFINED> instruction: 0xbc0b0a00
    1674:	1e00000a 	cdpne	0, 0, cr0, cr0, cr10, {0}
    1678:	00000e0a 	andeq	r0, r0, sl, lsl #28
    167c:	03162403 	tsteq	r6, #50331648	; 0x3000000
    1680:	03050000 	movweq	r0, #20480	; 0x5000
    1684:	20004a28 	andcs	r4, r0, r8, lsr #20
    1688:	0014471f 	andseq	r4, r4, pc, lsl r7
    168c:	3c4c0300 	mcrrcc	3, 0, r0, ip, cr0
    1690:	a8200019 	stmdage	r0!, {r0, r3, r4}
    1694:	01000001 	tsteq	r0, r1
    1698:	000bd09c 	muleq	fp, ip, r0
    169c:	15661a00 	strbne	r1, [r6, #-2560]!	; 0xfffff600
    16a0:	52030000 	andpl	r0, r3, #0
    16a4:	00000b2f 	andeq	r0, r0, pc, lsr #22
    16a8:	1a509102 	bne	1425ab8 <startup-0x1ebda548>
    16ac:	0000156c 	andeq	r1, r0, ip, ror #10
    16b0:	0b2f5303 	bleq	bd62c4 <startup-0x1f429d3c>
    16b4:	91030000 	mrsls	r0, (UNDEF: 3)
    16b8:	721a7fbc 	andsvc	r7, sl, #188, 30	; 0x2f0
    16bc:	03000015 	movweq	r0, #21
    16c0:	000b2f55 	andeq	r2, fp, r5, asr pc
    16c4:	a8910300 	ldmge	r1, {r8, r9}
    16c8:	0af41a7f 	beq	ffd080cc <_global_impure_ptr+0xdfd030a8>
    16cc:	57030000 	strpl	r0, [r3, -r0]
    16d0:	00000b2f 	andeq	r0, r0, pc, lsr #22
    16d4:	7f949103 	svcvc	0x00949103
    16d8:	00108a1a 	andseq	r8, r0, sl, lsl sl
    16dc:	d0580300 	subsle	r0, r8, r0, lsl #6
    16e0:	0300000b 	movweq	r0, #11
    16e4:	1a7ec491 	bne	1fb2930 <startup-0x1e04d6d0>
    16e8:	00001278 	andeq	r1, r0, r8, ror r2
    16ec:	0be05a03 	bleq	ff817f00 <_global_impure_ptr+0xdf812edc>
    16f0:	91030000 	mrsls	r0, (UNDEF: 3)
    16f4:	e2207eb4 	eor	r7, r0, #180, 28	; 0xb40
    16f8:	e4200019 	strt	r0, [r0], #-25	; 0xffffffe7
    16fc:	21000000 	mrscs	r0, (UNDEF: 0)
    1700:	63030069 	movwvs	r0, #12393	; 0x3069
    1704:	000002c3 	andeq	r0, r0, r3, asr #5
    1708:	00649102 	rsbeq	r9, r4, r2, lsl #2
    170c:	0b2f0f00 	bleq	bc5314 <startup-0x1f43acec>
    1710:	0be00000 	bleq	ff801718 <_global_impure_ptr+0xdf7fc6f4>
    1714:	ca100000 	bgt	40171c <startup-0x1fbfe8e4>
    1718:	03000002 	movweq	r0, #2
    171c:	0bf00f00 	bleq	ffc05324 <_global_impure_ptr+0xdfc00300>
    1720:	0bf00000 	bleq	ffc01728 <_global_impure_ptr+0xdfbfc704>
    1724:	ca100000 	bgt	40172c <startup-0x1fbfe8d4>
    1728:	03000002 	movweq	r0, #2
    172c:	2f042200 	svccs	0x00042200
    1730:	1f00000b 	svcne	0x0000000b
    1734:	000014a3 	andeq	r1, r0, r3, lsr #9
    1738:	19103f03 	ldmdbne	r0, {r0, r1, r8, r9, sl, fp, ip, sp}
    173c:	002c2000 	eoreq	r2, ip, r0
    1740:	9c010000 	stcls	0, cr0, [r1], {-0}
    1744:	00000c1a 	andeq	r0, r0, sl, lsl ip
    1748:	000b391a 	andeq	r3, fp, sl, lsl r9
    174c:	0b430300 	bleq	10c2354 <startup-0x1ef3dcac>
    1750:	02000003 	andeq	r0, r0, #3
    1754:	23007491 	movwcs	r7, #1169	; 0x491
    1758:	000008f1 	strdeq	r0, [r0], -r1
    175c:	18f83a03 	ldmne	r8!, {r0, r1, r9, fp, ip, sp}^
    1760:	00182000 	andseq	r2, r8, r0
    1764:	9c010000 	stcls	0, cr0, [r1], {-0}
    1768:	0008db24 	andeq	sp, r8, r4, lsr #22
    176c:	90260300 	eorls	r0, r6, r0, lsl #6
    1770:	68200018 	stmdavs	r0!, {r3, r4}
    1774:	01000000 	mrseq	r0, (UNDEF: 0)
    1778:	000c4f9c 	muleq	ip, ip, pc	; <UNPREDICTABLE>
    177c:	1b4c1a00 	blne	1307f84 <startup-0x1ecf807c>
    1780:	29030000 	stmdbcs	r3, {}	; <UNPREDICTABLE>
    1784:	00000ab1 			; <UNDEFINED> instruction: 0x00000ab1
    1788:	00709102 	rsbseq	r9, r0, r2, lsl #2
    178c:	00116623 	andseq	r6, r1, r3, lsr #12
    1790:	00130300 	andseq	r0, r3, r0, lsl #6
    1794:	0c200000 	stceq	0, cr0, [r0], #-0
    1798:	01000000 	mrseq	r0, (UNDEF: 0)
    179c:	1008259c 	mulne	r8, ip, r5
    17a0:	5e020000 	cdppl	0, 0, cr0, cr2, cr0, {0}
    17a4:	0018700c 	andseq	r7, r8, ip
    17a8:	00002020 	andeq	r2, r0, r0, lsr #32
    17ac:	869c0100 	ldrhi	r0, [ip], r0, lsl #2
    17b0:	2600000c 	strcs	r0, [r0], -ip
    17b4:	000013ac 	andeq	r1, r0, ip, lsr #7
    17b8:	d10c5e02 	tstle	ip, r2, lsl #28
    17bc:	02000002 	andeq	r0, r0, #2
    17c0:	27007791 			; <UNDEFINED> instruction: 0x27007791
    17c4:	00000fc2 	andeq	r0, r0, r2, asr #31
    17c8:	750c3c02 	strvc	r3, [ip, #-3074]	; 0xfffff3fe
    17cc:	2c000006 	stccs	0, cr0, [r0], {6}
    17d0:	44200018 	strtmi	r0, [r0], #-24	; 0xffffffe8
    17d4:	01000000 	mrseq	r0, (UNDEF: 0)
    17d8:	000cbf9c 	muleq	ip, ip, pc	; <UNPREDICTABLE>
    17dc:	13ac2600 			; <UNDEFINED> instruction: 0x13ac2600
    17e0:	3c020000 	stccc	0, cr0, [r2], {-0}
    17e4:	0002d10c 	andeq	sp, r2, ip, lsl #2
    17e8:	6f910200 	svcvs	0x00910200
    17ec:	00064028 	andeq	r4, r6, r8, lsr #32
    17f0:	0c3e0200 	lfmeq	f0, 4, [lr], #-0
    17f4:	00000675 	andeq	r0, r0, r5, ror r6
    17f8:	00779102 	rsbseq	r9, r7, r2, lsl #2
    17fc:	000be229 	andeq	lr, fp, r9, lsr #4
    1800:	0c280200 	sfmeq	f0, 4, [r8], #-0
    1804:	20001810 	andcs	r1, r0, r0, lsl r8
    1808:	0000001c 	andeq	r0, r0, ip, lsl r0
    180c:	01279c01 			; <UNDEFINED> instruction: 0x01279c01
    1810:	0200000f 	andeq	r0, r0, #15
    1814:	06690bfb 			; <UNDEFINED> instruction: 0x06690bfb
    1818:	178c0000 	strne	r0, [ip, r0]
    181c:	00842000 	addeq	r2, r4, r0
    1820:	9c010000 	stcls	0, cr0, [r1], {-0}
    1824:	00000d28 	andeq	r0, r0, r8, lsr #26
    1828:	000fb926 	andeq	fp, pc, r6, lsr #18
    182c:	0bfb0200 	bleq	ffec2034 <_global_impure_ptr+0xdfebd010>
    1830:	000002d1 	ldrdeq	r0, [r0], -r1
    1834:	2a679102 	bcs	19e5c44 <startup-0x1e61a3bc>
    1838:	00706d74 	rsbseq	r6, r0, r4, ror sp
    183c:	0b0bfd02 	bleq	300c4c <startup-0x1fcff3b4>
    1840:	02000003 	andeq	r0, r0, #3
    1844:	50286c91 	mlapl	r8, r1, ip, r6
    1848:	02000010 	andeq	r0, r0, #16
    184c:	030b0bfe 	movweq	r0, #48126	; 0xbbfe
    1850:	91020000 	mrsls	r0, (UNDEF: 2)
    1854:	06402874 			; <UNDEFINED> instruction: 0x06402874
    1858:	ff020000 			; <UNDEFINED> instruction: 0xff020000
    185c:	0006690b 	andeq	r6, r6, fp, lsl #18
    1860:	73910200 	orrsvc	r0, r1, #0, 4
    1864:	0f342500 	svceq	0x00342500
    1868:	d6020000 	strle	r0, [r2], -r0
    186c:	00173c0b 	andseq	r3, r7, fp, lsl #24
    1870:	00005020 	andeq	r5, r0, r0, lsr #32
    1874:	5d9c0100 	ldfpls	f0, [ip]
    1878:	2600000d 	strcs	r0, [r0], -sp
    187c:	000013ac 	andeq	r1, r0, ip, lsr #7
    1880:	d10bd602 	tstle	fp, r2, lsl #12
    1884:	02000002 	andeq	r0, r0, #2
    1888:	15267791 	strne	r7, [r6, #-1937]!	; 0xfffff86f
    188c:	02000001 	andeq	r0, r0, #1
    1890:	069c0bd6 			; <UNDEFINED> instruction: 0x069c0bd6
    1894:	91020000 	mrsls	r0, (UNDEF: 2)
    1898:	2e250076 	mcrcs	0, 1, r0, cr5, cr6, {3}
    189c:	02000012 	andeq	r0, r0, #18
    18a0:	17000a9e 			; <UNDEFINED> instruction: 0x17000a9e
    18a4:	003c2000 	eorseq	r2, ip, r0
    18a8:	9c010000 	stcls	0, cr0, [r1], {-0}
    18ac:	00000d83 	andeq	r0, r0, r3, lsl #27
    18b0:	0007f426 	andeq	pc, r7, r6, lsr #8
    18b4:	0a9e0200 	beq	fe7820bc <_global_impure_ptr+0xde77d098>
    18b8:	000002d1 	ldrdeq	r0, [r0], -r1
    18bc:	00779102 	rsbseq	r9, r7, r2, lsl #2
    18c0:	00079125 	andeq	r9, r7, r5, lsr #2
    18c4:	0a860200 	beq	fe1820cc <_global_impure_ptr+0xde17d0a8>
    18c8:	200016c0 	andcs	r1, r0, r0, asr #13
    18cc:	00000040 	andeq	r0, r0, r0, asr #32
    18d0:	0db89c01 	ldceq	12, cr9, [r8, #4]!
    18d4:	5a260000 	bpl	9818dc <startup-0x1f67e724>
    18d8:	02000010 	andeq	r0, r0, #16
    18dc:	030b0a86 	movweq	r0, #47750	; 0xba86
    18e0:	91020000 	mrsls	r0, (UNDEF: 2)
    18e4:	01152674 	tsteq	r5, r4, ror r6
    18e8:	86020000 	strhi	r0, [r2], -r0
    18ec:	00069c0a 	andeq	r9, r6, sl, lsl #24
    18f0:	73910200 	orrsvc	r0, r1, #0, 4
    18f4:	13dd2500 	bicsne	r2, sp, #0, 10
    18f8:	52020000 	andpl	r0, r2, #0
    18fc:	0016800a 	andseq	r8, r6, sl
    1900:	00004020 	andeq	r4, r0, r0, lsr #32
    1904:	ed9c0100 	ldfs	f0, [ip]
    1908:	2600000d 	strcs	r0, [r0], -sp
    190c:	00000f88 	andeq	r0, r0, r8, lsl #31
    1910:	0b0a5202 	bleq	296120 <startup-0x1fd69ee0>
    1914:	02000003 	andeq	r0, r0, #3
    1918:	15267491 	strne	r7, [r6, #-1169]!	; 0xfffffb6f
    191c:	02000001 	andeq	r0, r0, #1
    1920:	069c0a52 			; <UNDEFINED> instruction: 0x069c0a52
    1924:	91020000 	mrsls	r0, (UNDEF: 2)
    1928:	44250073 	strtmi	r0, [r5], #-115	; 0xffffff8d
    192c:	0200000b 	andeq	r0, r0, #11
    1930:	16400a19 			; <UNDEFINED> instruction: 0x16400a19
    1934:	00402000 	subeq	r2, r0, r0
    1938:	9c010000 	stcls	0, cr0, [r1], {-0}
    193c:	00000e22 	andeq	r0, r0, r2, lsr #28
    1940:	0009f126 	andeq	pc, r9, r6, lsr #2
    1944:	0a190200 	beq	64214c <startup-0x1f9bdeb4>
    1948:	0000030b 	andeq	r0, r0, fp, lsl #6
    194c:	26749102 	ldrbtcs	r9, [r4], -r2, lsl #2
    1950:	00000115 	andeq	r0, r0, r5, lsl r1
    1954:	9c0a1902 			; <UNDEFINED> instruction: 0x9c0a1902
    1958:	02000006 	andeq	r0, r0, #6
    195c:	25007391 	strcs	r7, [r0, #-913]	; 0xfffffc6f
    1960:	000007ae 	andeq	r0, r0, lr, lsr #15
    1964:	0009fb02 	andeq	pc, r9, r2, lsl #22
    1968:	40200016 	eormi	r0, r0, r6, lsl r0
    196c:	01000000 	mrseq	r0, (UNDEF: 0)
    1970:	000e579c 	muleq	lr, ip, r7
    1974:	14d12600 	ldrbne	r2, [r1], #1536	; 0x600
    1978:	fb020000 	blx	81982 <startup-0x1ff7e67e>
    197c:	00030b09 	andeq	r0, r3, r9, lsl #22
    1980:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    1984:	00011526 	andeq	r1, r1, r6, lsr #10
    1988:	09fb0200 	ldmibeq	fp!, {r9}^
    198c:	0000069c 	muleq	r0, ip, r6
    1990:	00739102 	rsbseq	r9, r3, r2, lsl #2
    1994:	00142225 	andseq	r2, r4, r5, lsr #4
    1998:	09db0200 	ldmibeq	fp, {r9}^
    199c:	200015c0 	andcs	r1, r0, r0, asr #11
    19a0:	00000040 	andeq	r0, r0, r0, asr #32
    19a4:	0e8c9c01 	cdpeq	12, 8, cr9, cr12, cr1, {0}
    19a8:	c2260000 	eorgt	r0, r6, #0
    19ac:	02000012 	andeq	r0, r0, #18
    19b0:	030b09db 	movweq	r0, #47579	; 0xb9db
    19b4:	91020000 	mrsls	r0, (UNDEF: 2)
    19b8:	01152674 	tsteq	r5, r4, ror r6
    19bc:	db020000 	blle	819c4 <startup-0x1ff7e63c>
    19c0:	00069c09 	andeq	r9, r6, r9, lsl #24
    19c4:	73910200 	orrsvc	r0, r1, #0, 4
    19c8:	0b222500 	bleq	88add0 <startup-0x1f775230>
    19cc:	aa020000 	bge	819d4 <startup-0x1ff7e62c>
    19d0:	00158009 	andseq	r8, r5, r9
    19d4:	00004020 	andeq	r4, r0, r0, lsr #32
    19d8:	c19c0100 	orrsgt	r0, ip, r0, lsl #2
    19dc:	2600000e 	strcs	r0, [r0], -lr
    19e0:	0000105a 	andeq	r1, r0, sl, asr r0
    19e4:	0b09aa02 	bleq	26c1f4 <startup-0x1fd93e0c>
    19e8:	02000003 	andeq	r0, r0, #3
    19ec:	15267491 	strne	r7, [r6, #-1169]!	; 0xfffffb6f
    19f0:	02000001 	andeq	r0, r0, #1
    19f4:	069c09aa 	ldreq	r0, [ip], sl, lsr #19
    19f8:	91020000 	mrsls	r0, (UNDEF: 2)
    19fc:	dd250073 	stcle	0, cr0, [r5, #-460]!	; 0xfffffe34
    1a00:	02000007 	andeq	r0, r0, #7
    1a04:	1540097b 	strbne	r0, [r0, #-2427]	; 0xfffff685
    1a08:	00402000 	subeq	r2, r0, r0
    1a0c:	9c010000 	stcls	0, cr0, [r1], {-0}
    1a10:	00000ef6 	strdeq	r0, [r0], -r6
    1a14:	000f8826 	andeq	r8, pc, r6, lsr #16
    1a18:	097b0200 	ldmdbeq	fp!, {r9}^
    1a1c:	0000030b 	andeq	r0, r0, fp, lsl #6
    1a20:	26749102 	ldrbtcs	r9, [r4], -r2, lsl #2
    1a24:	00000115 	andeq	r0, r0, r5, lsl r1
    1a28:	9c097b02 			; <UNDEFINED> instruction: 0x9c097b02
    1a2c:	02000006 	andeq	r0, r0, #6
    1a30:	25007391 	strcs	r7, [r0, #-913]	; 0xfffffc6f
    1a34:	00000935 	andeq	r0, r0, r5, lsr r9
    1a38:	00094502 	andeq	r4, r9, r2, lsl #10
    1a3c:	40200015 	eormi	r0, r0, r5, lsl r0
    1a40:	01000000 	mrseq	r0, (UNDEF: 0)
    1a44:	000f2b9c 	muleq	pc, ip, fp	; <UNPREDICTABLE>
    1a48:	09f12600 	ldmibeq	r1!, {r9, sl, sp}^
    1a4c:	45020000 	strmi	r0, [r2, #-0]
    1a50:	00030b09 	andeq	r0, r3, r9, lsl #22
    1a54:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    1a58:	00011526 	andeq	r1, r1, r6, lsr #10
    1a5c:	09450200 	stmdbeq	r5, {r9}^
    1a60:	0000069c 	muleq	r0, ip, r6
    1a64:	00739102 	rsbseq	r9, r3, r2, lsl #2
    1a68:	0015bc25 	andseq	fp, r5, r5, lsr #24
    1a6c:	092a0200 	stmdbeq	sl!, {r9}
    1a70:	200014c0 	andcs	r1, r0, r0, asr #9
    1a74:	00000040 	andeq	r0, r0, r0, asr #32
    1a78:	0f609c01 	svceq	0x00609c01
    1a7c:	d1260000 			; <UNDEFINED> instruction: 0xd1260000
    1a80:	02000014 	andeq	r0, r0, #20
    1a84:	030b092a 	movweq	r0, #47402	; 0xb92a
    1a88:	91020000 	mrsls	r0, (UNDEF: 2)
    1a8c:	01152674 	tsteq	r5, r4, ror r6
    1a90:	2a020000 	bcs	81a98 <startup-0x1ff7e568>
    1a94:	00069c09 	andeq	r9, r6, r9, lsl #24
    1a98:	73910200 	orrsvc	r0, r1, #0, 4
    1a9c:	13432500 	movtne	r2, #13568	; 0x3500
    1aa0:	0d020000 	stceq	0, cr0, [r2, #-0]
    1aa4:	00148009 	andseq	r8, r4, r9
    1aa8:	00004020 	andeq	r4, r0, r0, lsr #32
    1aac:	959c0100 	ldrls	r0, [ip, #256]	; 0x100
    1ab0:	2600000f 	strcs	r0, [r0], -pc
    1ab4:	000012c2 	andeq	r1, r0, r2, asr #5
    1ab8:	0b090d02 	bleq	244ec8 <startup-0x1fdbb138>
    1abc:	02000003 	andeq	r0, r0, #3
    1ac0:	15267491 	strne	r7, [r6, #-1169]!	; 0xfffffb6f
    1ac4:	02000001 	andeq	r0, r0, #1
    1ac8:	069c090d 	ldreq	r0, [ip], sp, lsl #18
    1acc:	91020000 	mrsls	r0, (UNDEF: 2)
    1ad0:	29250073 	stmdbcs	r5!, {r0, r1, r4, r5, r6}
    1ad4:	0200000d 	andeq	r0, r0, #13
    1ad8:	144008e3 	strbne	r0, [r0], #-2275	; 0xfffff71d
    1adc:	00402000 	subeq	r2, r0, r0
    1ae0:	9c010000 	stcls	0, cr0, [r1], {-0}
    1ae4:	00000fca 	andeq	r0, r0, sl, asr #31
    1ae8:	00105a26 	andseq	r5, r0, r6, lsr #20
    1aec:	08e30200 	stmiaeq	r3!, {r9}^
    1af0:	0000030b 	andeq	r0, r0, fp, lsl #6
    1af4:	26749102 	ldrbtcs	r9, [r4], -r2, lsl #2
    1af8:	00000115 	andeq	r0, r0, r5, lsl r1
    1afc:	9c08e302 	stcls	3, cr14, [r8], {2}
    1b00:	02000006 	andeq	r0, r0, #6
    1b04:	25007391 	strcs	r7, [r0, #-913]	; 0xfffffc6f
    1b08:	00000a75 	andeq	r0, r0, r5, ror sl
    1b0c:	0008af02 	andeq	sl, r8, r2, lsl #30
    1b10:	40200014 	eormi	r0, r0, r4, lsl r0
    1b14:	01000000 	mrseq	r0, (UNDEF: 0)
    1b18:	000fff9c 	muleq	pc, ip, pc	; <UNPREDICTABLE>
    1b1c:	0f882600 	svceq	0x00882600
    1b20:	af020000 	svcge	0x00020000
    1b24:	00030b08 	andeq	r0, r3, r8, lsl #22
    1b28:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    1b2c:	00011526 	andeq	r1, r1, r6, lsr #10
    1b30:	08af0200 	stmiaeq	pc!, {r9}	; <UNPREDICTABLE>
    1b34:	0000069c 	muleq	r0, ip, r6
    1b38:	00739102 	rsbseq	r9, r3, r2, lsl #2
    1b3c:	0010e625 	andseq	lr, r0, r5, lsr #12
    1b40:	08760200 	ldmdaeq	r6!, {r9}^
    1b44:	200013c0 	andcs	r1, r0, r0, asr #7
    1b48:	00000040 	andeq	r0, r0, r0, asr #32
    1b4c:	10349c01 	eorsne	r9, r4, r1, lsl #24
    1b50:	f1260000 			; <UNDEFINED> instruction: 0xf1260000
    1b54:	02000009 	andeq	r0, r0, #9
    1b58:	030b0876 	movweq	r0, #47222	; 0xb876
    1b5c:	91020000 	mrsls	r0, (UNDEF: 2)
    1b60:	01152674 	tsteq	r5, r4, ror r6
    1b64:	76020000 	strvc	r0, [r2], -r0
    1b68:	00069c08 	andeq	r9, r6, r8, lsl #24
    1b6c:	73910200 	orrsvc	r0, r1, #0, 4
    1b70:	08182500 	ldmdaeq	r8, {r8, sl, sp}
    1b74:	58020000 	stmdapl	r2, {}	; <UNPREDICTABLE>
    1b78:	00138008 	andseq	r8, r3, r8
    1b7c:	00004020 	andeq	r4, r0, r0, lsr #32
    1b80:	699c0100 	ldmibvs	ip, {r8}
    1b84:	26000010 			; <UNDEFINED> instruction: 0x26000010
    1b88:	000014d1 	ldrdeq	r1, [r0], -r1	; <UNPREDICTABLE>
    1b8c:	0b085802 	bleq	217b9c <startup-0x1fde8464>
    1b90:	02000003 	andeq	r0, r0, #3
    1b94:	15267491 	strne	r7, [r6, #-1169]!	; 0xfffffb6f
    1b98:	02000001 	andeq	r0, r0, #1
    1b9c:	069c0858 			; <UNDEFINED> instruction: 0x069c0858
    1ba0:	91020000 	mrsls	r0, (UNDEF: 2)
    1ba4:	05250073 	streq	r0, [r5, #-115]!	; 0xffffff8d
    1ba8:	02000015 	andeq	r0, r0, #21
    1bac:	13400838 	movtne	r0, #2104	; 0x838
    1bb0:	00402000 	subeq	r2, r0, r0
    1bb4:	9c010000 	stcls	0, cr0, [r1], {-0}
    1bb8:	0000109e 	muleq	r0, lr, r0
    1bbc:	0012c226 	andseq	ip, r2, r6, lsr #4
    1bc0:	08380200 	ldmdaeq	r8!, {r9}
    1bc4:	0000030b 	andeq	r0, r0, fp, lsl #6
    1bc8:	26749102 	ldrbtcs	r9, [r4], -r2, lsl #2
    1bcc:	00000115 	andeq	r0, r0, r5, lsl r1
    1bd0:	9c083802 	stcls	8, cr3, [r8], {2}
    1bd4:	02000006 	andeq	r0, r0, #6
    1bd8:	25007391 	strcs	r7, [r0, #-913]	; 0xfffffc6f
    1bdc:	00000834 	andeq	r0, r0, r4, lsr r8
    1be0:	24080e02 	strcs	r0, [r8], #-3586	; 0xfffff1fe
    1be4:	1c200013 	stcne	0, cr0, [r0], #-76	; 0xffffffb4
    1be8:	01000000 	mrseq	r0, (UNDEF: 0)
    1bec:	0010c49c 	mulseq	r0, ip, r4
    1bf0:	159d2600 	ldrne	r2, [sp, #1536]	; 0x600
    1bf4:	0e020000 	cdpeq	0, 0, cr0, cr2, cr0, {0}
    1bf8:	00030b08 	andeq	r0, r3, r8, lsl #22
    1bfc:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    1c00:	09012500 	stmdbeq	r1, {r8, sl, sp}
    1c04:	8e020000 	cdphi	0, 0, cr0, cr2, cr0, {0}
    1c08:	0012e807 	andseq	lr, r2, r7, lsl #16
    1c0c:	00003c20 	andeq	r3, r0, r0, lsr #24
    1c10:	f99c0100 			; <UNDEFINED> instruction: 0xf99c0100
    1c14:	26000010 			; <UNDEFINED> instruction: 0x26000010
    1c18:	00000d4f 	andeq	r0, r0, pc, asr #26
    1c1c:	0b078e02 	bleq	1e542c <startup-0x1fe1abd4>
    1c20:	02000003 	andeq	r0, r0, #3
    1c24:	19286c91 	stmdbne	r8!, {r0, r4, r7, sl, fp, sp, lr}
    1c28:	02000002 	andeq	r0, r0, #2
    1c2c:	030b0790 	movweq	r0, #46992	; 0xb790
    1c30:	91020000 	mrsls	r0, (UNDEF: 2)
    1c34:	c1250074 			; <UNDEFINED> instruction: 0xc1250074
    1c38:	02000008 	andeq	r0, r0, #8
    1c3c:	12a8072b 	adcne	r0, r8, #11272192	; 0xac0000
    1c40:	00402000 	subeq	r2, r0, r0
    1c44:	9c010000 	stcls	0, cr0, [r1], {-0}
    1c48:	0000112e 	andeq	r1, r0, lr, lsr #2
    1c4c:	000d4026 	andeq	r4, sp, r6, lsr #32
    1c50:	072b0200 	streq	r0, [fp, -r0, lsl #4]!
    1c54:	0000030b 	andeq	r0, r0, fp, lsl #6
    1c58:	286c9102 	stmdacs	ip!, {r1, r8, ip, pc}^
    1c5c:	00000219 	andeq	r0, r0, r9, lsl r2
    1c60:	0b072d02 	bleq	1cd070 <startup-0x1fe32f90>
    1c64:	02000003 	andeq	r0, r0, #3
    1c68:	25007491 	strcs	r7, [r0, #-1169]	; 0xfffffb6f
    1c6c:	00000e92 	muleq	r0, r2, lr
    1c70:	6c070b02 			; <UNDEFINED> instruction: 0x6c070b02
    1c74:	3c200012 	stccc	0, cr0, [r0], #-72	; 0xffffffb8
    1c78:	01000000 	mrseq	r0, (UNDEF: 0)
    1c7c:	0011639c 	mulseq	r1, ip, r3
    1c80:	09d52600 	ldmibeq	r5, {r9, sl, sp}^
    1c84:	0b020000 	bleq	81c8c <startup-0x1ff7e374>
    1c88:	00030b07 	andeq	r0, r3, r7, lsl #22
    1c8c:	6c910200 	lfmvs	f0, 4, [r1], {0}
    1c90:	00021928 	andeq	r1, r2, r8, lsr #18
    1c94:	070d0200 	streq	r0, [sp, -r0, lsl #4]
    1c98:	0000030b 	andeq	r0, r0, fp, lsl #6
    1c9c:	00749102 	rsbseq	r9, r4, r2, lsl #2
    1ca0:	00099825 	andeq	r9, r9, r5, lsr #16
    1ca4:	06ea0200 	strbteq	r0, [sl], r0, lsl #4
    1ca8:	20001230 	andcs	r1, r0, r0, lsr r2
    1cac:	0000003c 	andeq	r0, r0, ip, lsr r0
    1cb0:	11989c01 	orrsne	r9, r8, r1, lsl #24
    1cb4:	5e260000 	cdppl	0, 2, cr0, cr6, cr0, {0}
    1cb8:	0200000d 	andeq	r0, r0, #13
    1cbc:	030b06ea 	movweq	r0, #46826	; 0xb6ea
    1cc0:	91020000 	mrsls	r0, (UNDEF: 2)
    1cc4:	0219286c 	andseq	r2, r9, #108, 16	; 0x6c0000
    1cc8:	ec020000 	stc	0, cr0, [r2], {-0}
    1ccc:	00030b06 	andeq	r0, r3, r6, lsl #22
    1cd0:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    1cd4:	0c232500 	cfstr32eq	mvfx2, [r3], #-0
    1cd8:	c6020000 	strgt	r0, [r2], -r0
    1cdc:	0011f406 	andseq	pc, r1, r6, lsl #8
    1ce0:	00003c20 	andeq	r3, r0, r0, lsr #24
    1ce4:	cd9c0100 	ldfgts	f0, [ip]
    1ce8:	26000011 			; <UNDEFINED> instruction: 0x26000011
    1cec:	00001039 	andeq	r1, r0, r9, lsr r0
    1cf0:	0b06c602 	bleq	1b3500 <startup-0x1fe4cb00>
    1cf4:	02000003 	andeq	r0, r0, #3
    1cf8:	19286c91 	stmdbne	r8!, {r0, r4, r7, sl, fp, sp, lr}
    1cfc:	02000002 	andeq	r0, r0, #2
    1d00:	030b06c8 	movweq	r0, #46792	; 0xb6c8
    1d04:	91020000 	mrsls	r0, (UNDEF: 2)
    1d08:	27250074 			; <UNDEFINED> instruction: 0x27250074
    1d0c:	02000007 	andeq	r0, r0, #7
    1d10:	11d806ab 	bicsne	r0, r8, fp, lsr #13
    1d14:	001c2000 	andseq	r2, ip, r0
    1d18:	9c010000 	stcls	0, cr0, [r1], {-0}
    1d1c:	000011f3 	strdeq	r1, [r0], -r3
    1d20:	000de626 	andeq	lr, sp, r6, lsr #12
    1d24:	06ab0200 	strteq	r0, [fp], r0, lsl #4
    1d28:	0000030b 	andeq	r0, r0, fp, lsl #6
    1d2c:	00749102 	rsbseq	r9, r4, r2, lsl #2
    1d30:	00112725 	andseq	r2, r1, r5, lsr #14
    1d34:	05ef0200 	strbeq	r0, [pc, #512]!	; 1f3c <startup-0x1fffe0c4>
    1d38:	200011b8 			; <UNDEFINED> instruction: 0x200011b8
    1d3c:	00000020 	andeq	r0, r0, r0, lsr #32
    1d40:	12199c01 	andsne	r9, r9, #256	; 0x100
    1d44:	15260000 	strne	r0, [r6, #-0]!
    1d48:	02000001 	andeq	r0, r0, #1
    1d4c:	069c05ef 	ldreq	r0, [ip], pc, ror #11
    1d50:	91020000 	mrsls	r0, (UNDEF: 2)
    1d54:	95250077 	strls	r0, [r5, #-119]!	; 0xffffff89
    1d58:	02000014 	andeq	r0, r0, #20
    1d5c:	119805de 			; <UNDEFINED> instruction: 0x119805de
    1d60:	00202000 	eoreq	r2, r0, r0
    1d64:	9c010000 	stcls	0, cr0, [r1], {-0}
    1d68:	0000123f 	andeq	r1, r0, pc, lsr r2
    1d6c:	00011526 	andeq	r1, r1, r6, lsr #10
    1d70:	05de0200 	ldrbeq	r0, [lr, #512]	; 0x200
    1d74:	0000069c 	muleq	r0, ip, r6
    1d78:	00779102 	rsbseq	r9, r7, r2, lsl #2
    1d7c:	000f9725 	andeq	r9, pc, r5, lsr #14
    1d80:	05be0200 	ldreq	r0, [lr, #512]!	; 0x200
    1d84:	20001138 	andcs	r1, r0, r8, lsr r1
    1d88:	00000060 	andeq	r0, r0, r0, rrx
    1d8c:	12749c01 	rsbsne	r9, r4, #256	; 0x100
    1d90:	07260000 	streq	r0, [r6, -r0]!
    1d94:	02000008 	andeq	r0, r0, #8
    1d98:	030b05be 	movweq	r0, #46526	; 0xb5be
    1d9c:	91020000 	mrsls	r0, (UNDEF: 2)
    1da0:	0219286c 	andseq	r2, r9, #108, 16	; 0x6c0000
    1da4:	c0020000 	andgt	r0, r2, r0
    1da8:	00030b05 	andeq	r0, r3, r5, lsl #22
    1dac:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    1db0:	07382b00 	ldreq	r2, [r8, -r0, lsl #22]!
    1db4:	25020000 	strcs	r0, [r2, #-0]
    1db8:	000fe005 	andeq	lr, pc, r5
    1dbc:	00015820 	andeq	r5, r1, r0, lsr #16
    1dc0:	f49c0100 			; <UNDEFINED> instruction: 0xf49c0100
    1dc4:	26000012 			; <UNDEFINED> instruction: 0x26000012
    1dc8:	00000f13 	andeq	r0, r0, r3, lsl pc
    1dcc:	f4052502 	vst3.8	{d2,d4,d6}, [r5], r2
    1dd0:	02000012 	andeq	r0, r0, #18
    1dd4:	742a5c91 	strtvc	r5, [sl], #-3217	; 0xfffff36f
    1dd8:	0200706d 	andeq	r7, r0, #109	; 0x6d
    1ddc:	030b0527 	movweq	r0, #46375	; 0xb527
    1de0:	91020000 	mrsls	r0, (UNDEF: 2)
    1de4:	15b62870 	ldrne	r2, [r6, #2160]!	; 0x870
    1de8:	27020000 	strcs	r0, [r2, -r0]
    1dec:	00030b05 	andeq	r0, r3, r5, lsl #22
    1df0:	6c910200 	lfmvs	f0, 4, [r1], {0}
    1df4:	0013d628 	andseq	sp, r3, r8, lsr #12
    1df8:	05270200 	streq	r0, [r7, #-512]!	; 0xfffffe00
    1dfc:	0000030b 	andeq	r0, r0, fp, lsl #6
    1e00:	28749102 	ldmdacs	r4!, {r1, r8, ip, pc}^
    1e04:	000006d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    1e08:	0b052702 	bleq	14ba18 <startup-0x1feb45e8>
    1e0c:	02000003 	andeq	r0, r0, #3
    1e10:	bf286891 	svclt	0x00286891
    1e14:	0200000b 	andeq	r0, r0, #11
    1e18:	030b0527 	movweq	r0, #46375	; 0xb527
    1e1c:	91020000 	mrsls	r0, (UNDEF: 2)
    1e20:	162a2864 	strtne	r2, [sl], -r4, ror #16
    1e24:	27020000 	strcs	r0, [r2, -r0]
    1e28:	00030b05 	andeq	r0, r3, r5, lsl #22
    1e2c:	60910200 	addsvs	r0, r1, r0, lsl #4
    1e30:	84042200 	strhi	r2, [r4], #-512	; 0xfffffe00
    1e34:	25000009 	strcs	r0, [r0, #-9]
    1e38:	00000971 	andeq	r0, r0, r1, ror r9
    1e3c:	a404f102 	strge	pc, [r4], #-258	; 0xfffffefe
    1e40:	3c20000f 	stccc	0, cr0, [r0], #-60	; 0xffffffc4
    1e44:	01000000 	mrseq	r0, (UNDEF: 0)
    1e48:	00132f9c 	mulseq	r3, ip, pc	; <UNPREDICTABLE>
    1e4c:	08572600 	ldmdaeq	r7, {r9, sl, sp}^
    1e50:	f1020000 	cps	#0
    1e54:	00030b04 	andeq	r0, r3, r4, lsl #22
    1e58:	6c910200 	lfmvs	f0, 4, [r1], {0}
    1e5c:	00021928 	andeq	r1, r2, r8, lsr #18
    1e60:	04f30200 	ldrbteq	r0, [r3], #512	; 0x200
    1e64:	0000030b 	andeq	r0, r0, fp, lsl #6
    1e68:	00749102 	rsbseq	r9, r4, r2, lsl #2
    1e6c:	000e1225 	andeq	r1, lr, r5, lsr #4
    1e70:	04d20200 	ldrbeq	r0, [r2], #512	; 0x200
    1e74:	20000f6c 	andcs	r0, r0, ip, ror #30
    1e78:	00000038 	andeq	r0, r0, r8, lsr r0
    1e7c:	13649c01 	cmnne	r4, #256	; 0x100
    1e80:	57260000 	strpl	r0, [r6, -r0]!
    1e84:	02000008 	andeq	r0, r0, #8
    1e88:	030b04d2 	movweq	r0, #46290	; 0xb4d2
    1e8c:	91020000 	mrsls	r0, (UNDEF: 2)
    1e90:	0219286c 	andseq	r2, r9, #108, 16	; 0x6c0000
    1e94:	d4020000 	strle	r0, [r2], #-0
    1e98:	00030b04 	andeq	r0, r3, r4, lsl #22
    1e9c:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    1ea0:	0bd32500 	bleq	ff4cb2a8 <_global_impure_ptr+0xdf4c6284>
    1ea4:	b3020000 	movwlt	r0, #8192	; 0x2000
    1ea8:	000f3804 	andeq	r3, pc, r4, lsl #16
    1eac:	00003420 	andeq	r3, r0, r0, lsr #8
    1eb0:	999c0100 	ldmibls	ip, {r8}
    1eb4:	26000013 			; <UNDEFINED> instruction: 0x26000013
    1eb8:	00000b95 	muleq	r0, r5, fp
    1ebc:	0b04b302 	bleq	12eacc <startup-0x1fed1534>
    1ec0:	02000003 	andeq	r0, r0, #3
    1ec4:	19286c91 	stmdbne	r8!, {r0, r4, r7, sl, fp, sp, lr}
    1ec8:	02000002 	andeq	r0, r0, #2
    1ecc:	030b04b5 	movweq	r0, #46261	; 0xb4b5
    1ed0:	91020000 	mrsls	r0, (UNDEF: 2)
    1ed4:	b72c0074 			; <UNDEFINED> instruction: 0xb72c0074
    1ed8:	02000009 	andeq	r0, r0, #9
    1edc:	02d1049a 	sbcseq	r0, r1, #-1711276032	; 0x9a000000
    1ee0:	0f1c0000 	svceq	0x001c0000
    1ee4:	001c2000 	andseq	r2, ip, r0
    1ee8:	9c010000 	stcls	0, cr0, [r1], {-0}
    1eec:	0015e925 	andseq	lr, r5, r5, lsr #18
    1ef0:	047d0200 	ldrbteq	r0, [sp], #-512	; 0xfffffe00
    1ef4:	20000ee8 	andcs	r0, r0, r8, ror #29
    1ef8:	00000034 	andeq	r0, r0, r4, lsr r0
    1efc:	13e49c01 	mvnne	r9, #256	; 0x100
    1f00:	44260000 	strtmi	r0, [r6], #-0
    1f04:	0200000a 	andeq	r0, r0, #10
    1f08:	030b047d 	movweq	r0, #46205	; 0xb47d
    1f0c:	91020000 	mrsls	r0, (UNDEF: 2)
    1f10:	0219286c 	andseq	r2, r9, #108, 16	; 0x6c0000
    1f14:	7f020000 	svcvc	0x00020000
    1f18:	00030b04 	andeq	r0, r3, r4, lsl #22
    1f1c:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    1f20:	0dd22500 	cfldr64eq	mvdx2, [r2]
    1f24:	b5020000 	strlt	r0, [r2, #-0]
    1f28:	000eac03 	andeq	sl, lr, r3, lsl #24
    1f2c:	00003c20 	andeq	r3, r0, r0, lsr #24
    1f30:	289c0100 	ldmcs	ip, {r8}
    1f34:	26000014 			; <UNDEFINED> instruction: 0x26000014
    1f38:	0000116e 	andeq	r1, r0, lr, ror #2
    1f3c:	0b03b502 	bleq	ef34c <startup-0x1ff10cb4>
    1f40:	02000003 	andeq	r0, r0, #3
    1f44:	19266c91 	stmdbne	r6!, {r0, r4, r7, sl, fp, sp, lr}
    1f48:	0200000a 	andeq	r0, r0, #10
    1f4c:	030b03b5 	movweq	r0, #46005	; 0xb3b5
    1f50:	91020000 	mrsls	r0, (UNDEF: 2)
    1f54:	02192868 	andseq	r2, r9, #104, 16	; 0x680000
    1f58:	b7020000 	strlt	r0, [r2, -r0]
    1f5c:	00030b03 	andeq	r0, r3, r3, lsl #22
    1f60:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    1f64:	0cb52500 	cfldr32eq	mvfx2, [r5]
    1f68:	88020000 	stmdahi	r2, {}	; <UNPREDICTABLE>
    1f6c:	000e6c03 	andeq	r6, lr, r3, lsl #24
    1f70:	00004020 	andeq	r4, r0, r0, lsr #32
    1f74:	6c9c0100 	ldfvss	f0, [ip], {0}
    1f78:	26000014 			; <UNDEFINED> instruction: 0x26000014
    1f7c:	000010d7 	ldrdeq	r1, [r0], -r7
    1f80:	0b038802 	bleq	e3f90 <startup-0x1ff1c070>
    1f84:	02000003 	andeq	r0, r0, #3
    1f88:	cd266c91 	stcgt	12, cr6, [r6, #-580]!	; 0xfffffdbc
    1f8c:	02000011 	andeq	r0, r0, #17
    1f90:	030b0388 	movweq	r0, #45960	; 0xb388
    1f94:	91020000 	mrsls	r0, (UNDEF: 2)
    1f98:	02192868 	andseq	r2, r9, #104, 16	; 0x680000
    1f9c:	8a020000 	bhi	81fa4 <startup-0x1ff7e05c>
    1fa0:	00030b03 	andeq	r0, r3, r3, lsl #22
    1fa4:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    1fa8:	101e2500 	andsne	r2, lr, r0, lsl #10
    1fac:	6f020000 	svcvs	0x00020000
    1fb0:	000e4c03 	andeq	r4, lr, r3, lsl #24
    1fb4:	00002020 	andeq	r2, r0, r0, lsr #32
    1fb8:	929c0100 	addsls	r0, ip, #0, 2
    1fbc:	26000014 			; <UNDEFINED> instruction: 0x26000014
    1fc0:	00000115 	andeq	r0, r0, r5, lsl r1
    1fc4:	9c036f02 	stcls	15, cr6, [r3], {2}
    1fc8:	02000006 	andeq	r0, r0, #6
    1fcc:	25007791 	strcs	r7, [r0, #-1937]	; 0xfffff86f
    1fd0:	000015d3 	ldrdeq	r1, [r0], -r3
    1fd4:	2c035d02 	stccs	13, cr5, [r3], {2}
    1fd8:	2020000e 	eorcs	r0, r0, lr
    1fdc:	01000000 	mrseq	r0, (UNDEF: 0)
    1fe0:	0014b89c 	mulseq	r4, ip, r8
    1fe4:	01152600 	tsteq	r5, r0, lsl #12
    1fe8:	5d020000 	stcpl	0, cr0, [r2, #-0]
    1fec:	00069c03 	andeq	r9, r6, r3, lsl #24
    1ff0:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    1ff4:	0c492500 	cfstr64eq	mvdx2, [r9], {-0}
    1ff8:	49020000 	stmdbmi	r2, {}	; <UNPREDICTABLE>
    1ffc:	000dfc03 	andeq	pc, sp, r3, lsl #24
    2000:	00003020 	andeq	r3, r0, r0, lsr #32
    2004:	fc9c0100 	ldc2	1, cr0, [ip], {0}
    2008:	26000014 			; <UNDEFINED> instruction: 0x26000014
    200c:	000010bf 	strheq	r1, [r0], -pc	; <UNPREDICTABLE>
    2010:	0b034902 	bleq	d4420 <startup-0x1ff2bbe0>
    2014:	02000003 	andeq	r0, r0, #3
    2018:	c7267491 			; <UNDEFINED> instruction: 0xc7267491
    201c:	02000010 	andeq	r0, r0, #16
    2020:	030b0349 	movweq	r0, #45897	; 0xb349
    2024:	91020000 	mrsls	r0, (UNDEF: 2)
    2028:	10cf2670 	sbcne	r2, pc, r0, ror r6	; <UNPREDICTABLE>
    202c:	49020000 	stmdbmi	r2, {}	; <UNPREDICTABLE>
    2030:	00030b03 	andeq	r0, r3, r3, lsl #22
    2034:	6c910200 	lfmvs	f0, 4, [r1], {0}
    2038:	08492500 	stmdaeq	r9, {r8, sl, sp}^
    203c:	dc020000 	stcle	0, cr0, [r2], {-0}
    2040:	000ddc02 	andeq	sp, sp, r2, lsl #24
    2044:	00002020 	andeq	r2, r0, r0, lsr #32
    2048:	229c0100 	addscs	r0, ip, #0, 2
    204c:	26000015 			; <UNDEFINED> instruction: 0x26000015
    2050:	00000115 	andeq	r0, r0, r5, lsl r1
    2054:	9c02dc02 	stcls	12, cr13, [r2], {2}
    2058:	02000006 	andeq	r0, r0, #6
    205c:	25007791 	strcs	r7, [r0, #-1937]	; 0xfffff86f
    2060:	0000151c 	andeq	r1, r0, ip, lsl r5
    2064:	b4025102 	strlt	r5, [r2], #-258	; 0xfffffefe
    2068:	2820000d 	stmdacs	r0!, {r0, r2, r3}
    206c:	01000000 	mrseq	r0, (UNDEF: 0)
    2070:	0015579c 	mulseq	r5, ip, r7
    2074:	141a2600 	ldrne	r2, [sl], #-1536	; 0xfffffa00
    2078:	51020000 	mrspl	r0, (UNDEF: 2)
    207c:	00030b02 	andeq	r0, r3, r2, lsl #22
    2080:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    2084:	00143f26 	andseq	r3, r4, r6, lsr #30
    2088:	02510200 	subseq	r0, r1, #0, 4
    208c:	0000030b 	andeq	r0, r0, fp, lsl #6
    2090:	00709102 	rsbseq	r9, r0, r2, lsl #2
    2094:	00111c25 	andseq	r1, r1, r5, lsr #24
    2098:	02330200 	eorseq	r0, r3, #0, 4
    209c:	20000d94 	mulcs	r0, r4, sp
    20a0:	00000020 	andeq	r0, r0, r0, lsr #32
    20a4:	157d9c01 	ldrbne	r9, [sp, #-3073]!	; 0xfffff3ff
    20a8:	15260000 	strne	r0, [r6, #-0]!
    20ac:	02000001 	andeq	r0, r0, #1
    20b0:	069c0233 			; <UNDEFINED> instruction: 0x069c0233
    20b4:	91020000 	mrsls	r0, (UNDEF: 2)
    20b8:	1c250077 	stcne	0, cr0, [r5], #-476	; 0xfffffe24
    20bc:	02000016 	andeq	r0, r0, #22
    20c0:	0d58021b 	lfmeq	f0, 2, [r8, #-108]	; 0xffffff94
    20c4:	003c2000 	eorseq	r2, ip, r0
    20c8:	9c010000 	stcls	0, cr0, [r1], {-0}
    20cc:	000015df 	ldrdeq	r1, [r0], -pc	; <UNPREDICTABLE>
    20d0:	000a6726 	andeq	r6, sl, r6, lsr #14
    20d4:	021b0200 	andseq	r0, fp, #0, 4
    20d8:	0000030b 	andeq	r0, r0, fp, lsl #6
    20dc:	26749102 	ldrbtcs	r9, [r4], -r2, lsl #2
    20e0:	00000ba0 	andeq	r0, r0, r0, lsr #23
    20e4:	0b021b02 	bleq	88cf4 <startup-0x1ff7730c>
    20e8:	02000003 	andeq	r0, r0, #3
    20ec:	a5267091 	strge	r7, [r6, #-145]!	; 0xffffff6f
    20f0:	0200000b 	andeq	r0, r0, #11
    20f4:	030b021b 	movweq	r0, #45595	; 0xb21b
    20f8:	91020000 	mrsls	r0, (UNDEF: 2)
    20fc:	0baa266c 	bleq	fea8bab4 <_global_impure_ptr+0xdea86a90>
    2100:	1b020000 	blne	82108 <startup-0x1ff7def8>
    2104:	00030b02 	andeq	r0, r3, r2, lsl #22
    2108:	68910200 	ldmvs	r1, {r9}
    210c:	000baf26 	andeq	sl, fp, r6, lsr #30
    2110:	021b0200 	andseq	r0, fp, #0, 4
    2114:	0000030b 	andeq	r0, r0, fp, lsl #6
    2118:	00009102 	andeq	r9, r0, r2, lsl #2
    211c:	000bb425 	andeq	fp, fp, r5, lsr #8
    2120:	01b80200 			; <UNDEFINED> instruction: 0x01b80200
    2124:	20000d38 	andcs	r0, r0, r8, lsr sp
    2128:	00000020 	andeq	r0, r0, r0, lsr #32
    212c:	16059c01 	strne	r9, [r5], -r1, lsl #24
    2130:	15260000 	strne	r0, [r6, #-0]!
    2134:	02000001 	andeq	r0, r0, #1
    2138:	069c01b8 			; <UNDEFINED> instruction: 0x069c01b8
    213c:	91020000 	mrsls	r0, (UNDEF: 2)
    2140:	cc250077 	stcgt	0, cr0, [r5], #-476	; 0xfffffe24
    2144:	0200000a 	andeq	r0, r0, #10
    2148:	0cf40190 	ldfeqe	f0, [r4], #576	; 0x240
    214c:	00442000 	subeq	r2, r4, r0
    2150:	9c010000 	stcls	0, cr0, [r1], {-0}
    2154:	0000162b 	andeq	r1, r0, fp, lsr #12
    2158:	000c0926 	andeq	r0, ip, r6, lsr #18
    215c:	01900200 	orrseq	r0, r0, r0, lsl #4
    2160:	000002d1 	ldrdeq	r0, [r0], -r1
    2164:	00779102 	rsbseq	r9, r7, r2, lsl #2
    2168:	000f4125 	andeq	r4, pc, r5, lsr #2
    216c:	01770200 	cmneq	r7, r0, lsl #4
    2170:	20000cd4 	ldrdcs	r0, [r0], -r4
    2174:	00000020 	andeq	r0, r0, r0, lsr #32
    2178:	16519c01 	ldrbne	r9, [r1], -r1, lsl #24
    217c:	15260000 	strne	r0, [r6, #-0]!
    2180:	02000001 	andeq	r0, r0, #1
    2184:	069c0177 			; <UNDEFINED> instruction: 0x069c0177
    2188:	91020000 	mrsls	r0, (UNDEF: 2)
    218c:	55250077 	strpl	r0, [r5, #-119]!	; 0xffffff89
    2190:	0200000f 	andeq	r0, r0, #15
    2194:	0c960153 	ldfeqs	f0, [r6], {83}	; 0x53
    2198:	003e2000 	eorseq	r2, lr, r0
    219c:	9c010000 	stcls	0, cr0, [r1], {-0}
    21a0:	00001686 	andeq	r1, r0, r6, lsl #13
    21a4:	000f5f26 	andeq	r5, pc, r6, lsr #30
    21a8:	01530200 	cmpeq	r3, r0, lsl #4
    21ac:	000002d1 	ldrdeq	r0, [r0], -r1
    21b0:	286f9102 	stmdacs	pc!, {r1, r8, ip, pc}^	; <UNPREDICTABLE>
    21b4:	00000219 	andeq	r0, r0, r9, lsl r2
    21b8:	0b015502 	bleq	575c8 <startup-0x1ffa8a38>
    21bc:	02000003 	andeq	r0, r0, #3
    21c0:	2d007491 	cfstrscs	mvf7, [r0, #-580]	; 0xfffffdbc
    21c4:	000011ef 	andeq	r1, r0, pc, ror #3
    21c8:	c3013402 	movwgt	r3, #5122	; 0x1402
    21cc:	38000006 	stmdacc	r0, {r1, r2}
    21d0:	5e20000c 	cdppl	0, 2, cr0, cr0, cr12, {0}
    21d4:	01000000 	mrseq	r0, (UNDEF: 0)
    21d8:	0016ce9c 	mulseq	r6, ip, lr
    21dc:	0c3a2800 	ldceq	8, cr2, [sl], #-0
    21e0:	36020000 	strcc	r0, [r2], -r0
    21e4:	00031601 	andeq	r1, r3, r1, lsl #12
    21e8:	68910200 	ldmvs	r1, {r9}
    21ec:	0012d428 	andseq	sp, r2, r8, lsr #8
    21f0:	01370200 	teqeq	r7, r0, lsl #4
    21f4:	000006c3 	andeq	r0, r0, r3, asr #13
    21f8:	286f9102 	stmdacs	pc!, {r1, r8, ip, pc}^	; <UNPREDICTABLE>
    21fc:	000012d1 	ldrdeq	r1, [r0], -r1	; <UNPREDICTABLE>
    2200:	69013802 	stmdbvs	r1, {r1, fp, ip, sp}
    2204:	02000006 	andeq	r0, r0, #6
    2208:	25006e91 	strcs	r6, [r0, #-3729]	; 0xfffff16f
    220c:	00000bf0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    2210:	10011c02 	andne	r1, r1, r2, lsl #24
    2214:	2820000c 	stmdacs	r0!, {r2, r3}
    2218:	01000000 	mrseq	r0, (UNDEF: 0)
    221c:	0016f49c 	mulseq	r6, ip, r4
    2220:	0cad2600 	stceq	6, cr2, [sp]
    2224:	1c020000 	stcne	0, cr0, [r2], {-0}
    2228:	0002d101 	andeq	sp, r2, r1, lsl #2
    222c:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    2230:	098d2300 	stmibeq	sp, {r8, r9, sp}
    2234:	e1020000 	mrs	r0, (UNDEF: 2)
    2238:	20000ba0 	andcs	r0, r0, r0, lsr #23
    223c:	00000070 	andeq	r0, r0, r0, ror r0
    2240:	602e9c01 	eorvs	r9, lr, r1, lsl #24
    2244:	01000012 	tsteq	r0, r2, lsl r0
    2248:	030b06e0 	movweq	r0, #46816	; 0xb6e0
    224c:	0b580000 	bleq	1602254 <startup-0x1e9fddac>
    2250:	00482000 	subeq	r2, r8, r0
    2254:	9c010000 	stcls	0, cr0, [r1], {-0}
    2258:	0000172f 	andeq	r1, r0, pc, lsr #14
    225c:	000e3826 	andeq	r3, lr, r6, lsr #16
    2260:	06e00100 	strbteq	r0, [r0], r0, lsl #2
    2264:	0000030b 	andeq	r0, r0, fp, lsl #6
    2268:	00749102 	rsbseq	r9, r4, r2, lsl #2
    226c:	0014b22f 	andseq	fp, r4, pc, lsr #4
    2270:	065d0100 	ldrbeq	r0, [sp], -r0, lsl #2
    2274:	20000af8 	strdcs	r0, [r0], -r8
    2278:	00000060 	andeq	r0, r0, r0, rrx
    227c:	15269c01 	strne	r9, [r6, #-3073]!	; 0xfffff3ff
    2280:	01000014 	tsteq	r0, r4, lsl r0
    2284:	025a065d 	subseq	r0, sl, #97517568	; 0x5d00000
    2288:	91020000 	mrsls	r0, (UNDEF: 2)
    228c:	18f32677 	ldmne	r3!, {r0, r1, r2, r4, r5, r6, r9, sl, sp}^
    2290:	5d010000 	stcpl	0, cr0, [r1, #-0]
    2294:	00030b06 	andeq	r0, r3, r6, lsl #22
    2298:	70910200 	addsvc	r0, r1, r0, lsl #4
    229c:	06230000 	strteq	r0, [r3], -r0
    22a0:	00040000 	andeq	r0, r4, r0
    22a4:	00000539 	andeq	r0, r0, r9, lsr r5
    22a8:	02510104 	subseq	r0, r1, #4, 2
    22ac:	600c0000 	andvs	r0, ip, r0
    22b0:	f7000017 			; <UNDEFINED> instruction: 0xf7000017
    22b4:	e4000001 	str	r0, [r0], #-1
    22b8:	0e20001a 	miaeq	acc0, sl, r0
    22bc:	83000005 	movwhi	r0, #5
    22c0:	02000008 	andeq	r0, r0, #8
    22c4:	02450601 	subeq	r0, r5, #1048576	; 0x100000
    22c8:	bf030000 	svclt	0x00030000
    22cc:	02000001 	andeq	r0, r0, #1
    22d0:	0000372b 	andeq	r3, r0, fp, lsr #14
    22d4:	08010200 	stmdaeq	r1, {r9}
    22d8:	00000243 	andeq	r0, r0, r3, asr #4
    22dc:	bd050202 	sfmlt	f0, 4, [r5, #-8]
    22e0:	03000000 	movweq	r0, #0
    22e4:	00000095 	muleq	r0, r5, r0
    22e8:	00503902 	subseq	r3, r0, r2, lsl #18
    22ec:	02020000 	andeq	r0, r2, #0
    22f0:	0003fa07 	andeq	pc, r3, r7, lsl #20
    22f4:	053d0300 	ldreq	r0, [sp, #-768]!	; 0xfffffd00
    22f8:	4d020000 	stcmi	0, cr0, [r2, #-0]
    22fc:	00000062 	andeq	r0, r0, r2, rrx
    2300:	6d050402 	cfstrsvs	mvf0, [r5, #-8]
    2304:	03000001 	movweq	r0, #1
    2308:	0000050e 	andeq	r0, r0, lr, lsl #10
    230c:	00744f02 	rsbseq	r4, r4, r2, lsl #30
    2310:	04020000 	streq	r0, [r2], #-0
    2314:	00031a07 	andeq	r1, r3, r7, lsl #20
    2318:	05080200 	streq	r0, [r8, #-512]	; 0xfffffe00
    231c:	00000168 	andeq	r0, r0, r8, ror #2
    2320:	15070802 	strne	r0, [r7, #-2050]	; 0xfffff7fe
    2324:	04000003 	streq	r0, [r0], #-3
    2328:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    232c:	04020074 	streq	r0, [r2], #-116	; 0xffffff8c
    2330:	00031f07 	andeq	r1, r3, r7, lsl #30
    2334:	01c10300 	biceq	r0, r1, r0, lsl #6
    2338:	18030000 	stmdane	r3, {}	; <UNPREDICTABLE>
    233c:	0000002c 	andeq	r0, r0, ip, lsr #32
    2340:	00009703 	andeq	r9, r0, r3, lsl #14
    2344:	45240300 	strmi	r0, [r4, #-768]!	; 0xfffffd00
    2348:	05000000 	streq	r0, [r0, #-0]
    234c:	000000a2 	andeq	r0, r0, r2, lsr #1
    2350:	00053f03 	andeq	r3, r5, r3, lsl #30
    2354:	572c0300 	strpl	r0, [ip, -r0, lsl #6]!
    2358:	05000000 	streq	r0, [r0, #-0]
    235c:	000000b2 	strheq	r0, [r0], -r2
    2360:	00051003 	andeq	r1, r5, r3
    2364:	69300300 	ldmdbvs	r0!, {r8, r9}
    2368:	05000000 	streq	r0, [r0, #-0]
    236c:	000000c2 	andeq	r0, r0, r2, asr #1
    2370:	00063306 	andeq	r3, r6, r6, lsl #6
    2374:	06fa0400 	ldrbteq	r0, [sl], r0, lsl #8
    2378:	000000bd 	strheq	r0, [r0], -sp
    237c:	00043d07 	andeq	r3, r4, r7, lsl #26
    2380:	c23b0500 	eorsgt	r0, fp, #0, 10
    2384:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    2388:	00370107 	eorseq	r0, r7, r7, lsl #2
    238c:	5f060000 	svcpl	0x00060000
    2390:	00010403 	andeq	r0, r1, r3, lsl #8
    2394:	012b0900 			; <UNDEFINED> instruction: 0x012b0900
    2398:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    239c:	00000665 	andeq	r0, r0, r5, ror #12
    23a0:	280a0001 	stmdacs	sl, {r0}
    23a4:	9005c306 	andls	ip, r5, r6, lsl #6
    23a8:	0b000001 	bleq	23b4 <startup-0x1fffdc4c>
    23ac:	000014ac 	andeq	r1, r0, ip, lsr #9
    23b0:	cd05c506 	cfstr32gt	mvfx12, [r5, #-24]	; 0xffffffe8
    23b4:	00000000 	andeq	r0, r0, r0
    23b8:	0012920b 	andseq	r9, r2, fp, lsl #4
    23bc:	05c60600 	strbeq	r0, [r6, #1536]	; 0x600
    23c0:	000000cd 	andeq	r0, r0, sp, asr #1
    23c4:	0e220b04 	vmuleq.f64	d0, d2, d4
    23c8:	c7060000 	strgt	r0, [r6, -r0]
    23cc:	0000cd05 	andeq	ip, r0, r5, lsl #26
    23d0:	d00b0800 	andle	r0, fp, r0, lsl #16
    23d4:	0600000e 	streq	r0, [r0], -lr
    23d8:	00cd05c8 	sbceq	r0, sp, r8, asr #11
    23dc:	0c0c0000 	stceq	0, cr0, [ip], {-0}
    23e0:	00524449 	subseq	r4, r2, r9, asr #8
    23e4:	cd05c906 	vstrgt.16	s24, [r5, #-12]	; <UNPREDICTABLE>
    23e8:	10000000 	andne	r0, r0, r0
    23ec:	52444f0c 	subpl	r4, r4, #12, 30	; 0x30
    23f0:	05ca0600 	strbeq	r0, [sl, #1536]	; 0x600
    23f4:	000000cd 	andeq	r0, r0, sp, asr #1
    23f8:	0f1e0b14 	svceq	0x001e0b14
    23fc:	cb060000 	blgt	182404 <startup-0x1fe7dbfc>
    2400:	0000ad05 	andeq	sl, r0, r5, lsl #26
    2404:	fb0b1800 	blx	2c840e <startup-0x1fd37bf2>
    2408:	0600000e 	streq	r0, [r0], -lr
    240c:	00ad05cc 	adceq	r0, sp, ip, asr #11
    2410:	0b1a0000 	bleq	682418 <startup-0x1f97dbe8>
    2414:	00000de1 	andeq	r0, r0, r1, ror #27
    2418:	cd05cd06 	stcgt	13, cr12, [r5, #-24]	; 0xffffffe8
    241c:	1c000000 	stcne	0, cr0, [r0], {-0}
    2420:	5246410c 	subpl	r4, r6, #12, 2
    2424:	05ce0600 	strbeq	r0, [lr, #1536]	; 0x600
    2428:	000001a0 	andeq	r0, r0, r0, lsr #3
    242c:	cd0d0020 	stcgt	0, cr0, [sp, #-128]	; 0xffffff80
    2430:	a0000000 	andge	r0, r0, r0
    2434:	0e000001 	cdpeq	0, 0, cr0, cr0, cr1, {0}
    2438:	00000090 	muleq	r0, r0, r0
    243c:	90050001 	andls	r0, r5, r1
    2440:	0f000001 	svceq	0x00000001
    2444:	000013fa 	strdeq	r1, [r0], -sl
    2448:	0405cf06 	streq	ip, [r5], #-3846	; 0xfffff0fa
    244c:	10000001 	andne	r0, r0, r1
    2450:	00370107 	eorseq	r0, r7, r7, lsl #2
    2454:	42070000 	andmi	r0, r7, #0
    2458:	000001d7 	ldrdeq	r0, [r0], -r7
    245c:	000db309 	andeq	fp, sp, r9, lsl #6
    2460:	5a090000 	bpl	242468 <startup-0x1fdbdb98>
    2464:	0100000c 	tsteq	r0, ip
    2468:	00092809 	andeq	r2, r9, r9, lsl #16
    246c:	64090200 	strvs	r0, [r9], #-512	; 0xfffffe00
    2470:	03000009 	movweq	r0, #9
    2474:	124f0300 	subne	r0, pc, #0, 6
    2478:	47070000 	strmi	r0, [r7, -r0]
    247c:	000001b1 			; <UNDEFINED> instruction: 0x000001b1
    2480:	37010710 	smladcc	r1, r0, r7, r0
    2484:	07000000 	streq	r0, [r0, -r0]
    2488:	0001fc4f 	andeq	pc, r1, pc, asr #24
    248c:	0aa30900 	beq	fe8c4894 <_global_impure_ptr+0xde8bf870>
    2490:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    2494:	00000a25 	andeq	r0, r0, r5, lsr #20
    2498:	cb030001 	blgt	c24a4 <startup-0x1ff3db5c>
    249c:	07000007 	streq	r0, [r0, -r7]
    24a0:	0001e252 	andeq	lr, r1, r2, asr r2
    24a4:	01071000 	mrseq	r1, (UNDEF: 7)
    24a8:	00000037 	andeq	r0, r0, r7, lsr r0
    24ac:	022d5a07 	eoreq	r5, sp, #28672	; 0x7000
    24b0:	69090000 	stmdbvs	r9, {}	; <UNPREDICTABLE>
    24b4:	0000000b 	andeq	r0, r0, fp
    24b8:	000e8009 	andeq	r8, lr, r9
    24bc:	0c090100 	stfeqs	f0, [r9], {-0}
    24c0:	02000016 	andeq	r0, r0, #22
    24c4:	000f2409 	andeq	r2, pc, r9, lsl #8
    24c8:	03000300 	movweq	r0, #768	; 0x300
    24cc:	00001316 	andeq	r1, r0, r6, lsl r3
    24d0:	02075f07 	andeq	r5, r7, #7, 30
    24d4:	07100000 	ldreq	r0, [r0, -r0]
    24d8:	00003701 	andeq	r3, r0, r1, lsl #14
    24dc:	586e0700 	stmdapl	lr!, {r8, r9, sl}^
    24e0:	09000002 	stmdbeq	r0, {r1}
    24e4:	0000075c 	andeq	r0, r0, ip, asr r7
    24e8:	14e00900 	strbtne	r0, [r0], #2304	; 0x900
    24ec:	09010000 	stmdbeq	r1, {}	; <UNPREDICTABLE>
    24f0:	000008ac 	andeq	r0, r0, ip, lsr #17
    24f4:	03030002 	movweq	r0, #12290	; 0x3002
    24f8:	0700000b 	streq	r0, [r0, -fp]
    24fc:	00023872 	andeq	r3, r2, r2, ror r8
    2500:	01071000 	mrseq	r1, (UNDEF: 7)
    2504:	00000037 	andeq	r0, r0, r7, lsr r0
    2508:	027d7a07 	rsbseq	r7, sp, #28672	; 0x7000
    250c:	76090000 	strvc	r0, [r9], -r0
    2510:	00000016 	andeq	r0, r0, r6, lsl r0
    2514:	00163609 	andseq	r3, r6, r9, lsl #12
    2518:	03000100 	movweq	r0, #256	; 0x100
    251c:	00001723 	andeq	r1, r0, r3, lsr #14
    2520:	02637d07 	rsbeq	r7, r3, #448	; 0x1c0
    2524:	08110000 	ldmdaeq	r1, {}	; <UNPREDICTABLE>
    2528:	02cd8407 	sbceq	r8, sp, #117440512	; 0x7000000
    252c:	3a120000 	bcc	482534 <startup-0x1fb7dacc>
    2530:	07000013 	smladeq	r0, r3, r0, r0
    2534:	0000c286 	andeq	ip, r0, r6, lsl #5
    2538:	0d120000 	ldceq	0, cr0, [r2, #-0]
    253c:	07000012 	smladeq	r0, r2, r0, r0
    2540:	0001d789 	andeq	sp, r1, r9, lsl #15
    2544:	f0120400 			; <UNDEFINED> instruction: 0xf0120400
    2548:	0700000f 	streq	r0, [r0, -pc]
    254c:	00022d8c 	andeq	r2, r2, ip, lsl #27
    2550:	64120500 	ldrvs	r0, [r2], #-1280	; 0xfffffb00
    2554:	0700000e 	streq	r0, [r0, -lr]
    2558:	0001fc8f 	andeq	pc, r1, pc, lsl #25
    255c:	67120600 	ldrvs	r0, [r2, -r0, lsl #12]
    2560:	07000013 	smladeq	r0, r3, r0, r0
    2564:	00025892 	muleq	r2, r2, r8
    2568:	03000700 	movweq	r0, #1792	; 0x700
    256c:	00000a33 	andeq	r0, r0, r3, lsr sl
    2570:	02889407 	addeq	r9, r8, #117440512	; 0x7000000
    2574:	bd130000 	ldclt	0, cr0, [r3, #-0]
    2578:	01000017 	tsteq	r0, r7, lsl r0
    257c:	1f4e0243 	svcne	0x004e0243
    2580:	00a42000 	adceq	r2, r4, r0
    2584:	9c010000 	stcls	0, cr0, [r1], {-0}
    2588:	0000033a 	andeq	r0, r0, sl, lsr r3
    258c:	00174314 	andseq	r4, r7, r4, lsl r3
    2590:	02430100 	subeq	r0, r3, #0, 2
    2594:	0000033a 	andeq	r0, r0, sl, lsr r3
    2598:	146c9102 	strbtne	r9, [ip], #-258	; 0xfffffefe
    259c:	000016ee 	andeq	r1, r0, lr, ror #13
    25a0:	a2024301 	andge	r4, r2, #67108864	; 0x4000000
    25a4:	02000000 	andeq	r0, r0, #0
    25a8:	52146a91 	andspl	r6, r4, #593920	; 0x91000
    25ac:	01000016 	tsteq	r0, r6, lsl r0
    25b0:	00970243 	addseq	r0, r7, r3, asr #4
    25b4:	91020000 	mrsls	r0, (UNDEF: 2)
    25b8:	165a1569 	ldrbne	r1, [sl], -r9, ror #10
    25bc:	45010000 	strmi	r0, [r1, #-0]
    25c0:	0000c202 	andeq	ip, r0, r2, lsl #4
    25c4:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    25c8:	00175915 	andseq	r5, r7, r5, lsl r9
    25cc:	02460100 	subeq	r0, r6, #0, 2
    25d0:	000000c2 	andeq	r0, r0, r2, asr #1
    25d4:	00709102 	rsbseq	r9, r0, r2, lsl #2
    25d8:	01a50416 			; <UNDEFINED> instruction: 0x01a50416
    25dc:	49130000 	ldmdbmi	r3, {}	; <UNPREDICTABLE>
    25e0:	01000017 	tsteq	r0, r7, lsl r0
    25e4:	1f2a01f0 	svcne	0x002a01f0
    25e8:	00242000 	eoreq	r2, r4, r0
    25ec:	9c010000 	stcls	0, cr0, [r1], {-0}
    25f0:	00000375 	andeq	r0, r0, r5, ror r3
    25f4:	00174314 	andseq	r4, r7, r4, lsl r3
    25f8:	01f00100 	mvnseq	r0, r0, lsl #2
    25fc:	0000033a 	andeq	r0, r0, sl, lsr r3
    2600:	14749102 	ldrbtne	r9, [r4], #-258	; 0xfffffefe
    2604:	0000133a 	andeq	r1, r0, sl, lsr r3
    2608:	a201f001 	andge	pc, r1, #1
    260c:	02000000 	andeq	r0, r0, #0
    2610:	13007291 	movwne	r7, #657	; 0x291
    2614:	00001738 	andeq	r1, r0, r8, lsr r7
    2618:	0c01e001 	stceq	0, cr14, [r1], {1}
    261c:	1e20001f 	miane	acc0, pc, r0
    2620:	01000000 	mrseq	r0, (UNDEF: 0)
    2624:	0003aa9c 	muleq	r3, ip, sl
    2628:	17431400 	strbne	r1, [r3, -r0, lsl #8]
    262c:	e0010000 	and	r0, r1, r0
    2630:	00033a01 	andeq	r3, r3, r1, lsl #20
    2634:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    2638:	0016e614 	andseq	lr, r6, r4, lsl r6
    263c:	01e00100 	mvneq	r0, r0, lsl #2
    2640:	000000a2 	andeq	r0, r0, r2, lsr #1
    2644:	00729102 	rsbseq	r9, r2, r2, lsl #2
    2648:	00168013 	andseq	r8, r6, r3, lsl r0
    264c:	01c70100 	biceq	r0, r7, r0, lsl #2
    2650:	20001ed2 	ldrdcs	r1, [r0], -r2
    2654:	0000003a 	andeq	r0, r0, sl, lsr r0
    2658:	03ee9c01 	mvneq	r9, #256	; 0x100
    265c:	43140000 	tstmi	r4, #0
    2660:	01000017 	tsteq	r0, r7, lsl r0
    2664:	033a01c7 	teqeq	sl, #-1073741775	; 0xc0000031
    2668:	91020000 	mrsls	r0, (UNDEF: 2)
    266c:	133a1474 	teqne	sl, #116, 8	; 0x74000000
    2670:	c7010000 	strgt	r0, [r1, -r0]
    2674:	0000a201 	andeq	sl, r0, r1, lsl #4
    2678:	72910200 	addsvc	r0, r1, #0, 4
    267c:	00166f14 	andseq	r6, r6, r4, lsl pc
    2680:	01c70100 	biceq	r0, r7, r0, lsl #2
    2684:	0000027d 	andeq	r0, r0, sp, ror r2
    2688:	00719102 	rsbseq	r9, r1, r2, lsl #2
    268c:	0016a513 	andseq	sl, r6, r3, lsl r5
    2690:	01b10100 			; <UNDEFINED> instruction: 0x01b10100
    2694:	20001eb4 			; <UNDEFINED> instruction: 0x20001eb4
    2698:	0000001e 	andeq	r0, r0, lr, lsl r0
    269c:	04239c01 	strteq	r9, [r3], #-3073	; 0xfffff3ff
    26a0:	43140000 	tstmi	r4, #0
    26a4:	01000017 	tsteq	r0, r7, lsl r0
    26a8:	033a01b1 	teqeq	sl, #1073741868	; 0x4000002c
    26ac:	91020000 	mrsls	r0, (UNDEF: 2)
    26b0:	133a1474 	teqne	sl, #116, 8	; 0x74000000
    26b4:	b1010000 	mrslt	r0, (UNDEF: 1)
    26b8:	0000a201 	andeq	sl, r0, r1, lsl #4
    26bc:	72910200 	addsvc	r0, r1, #0, 4
    26c0:	168e1300 	strne	r1, [lr], r0, lsl #6
    26c4:	9c010000 	stcls	0, cr0, [r1], {-0}
    26c8:	001e9601 	andseq	r9, lr, r1, lsl #12
    26cc:	00001e20 	andeq	r1, r0, r0, lsr #28
    26d0:	589c0100 	ldmpl	ip, {r8}
    26d4:	14000004 	strne	r0, [r0], #-4
    26d8:	00001743 	andeq	r1, r0, r3, asr #14
    26dc:	3a019c01 	bcc	696e8 <startup-0x1ff96918>
    26e0:	02000003 	andeq	r0, r0, #3
    26e4:	3a147491 	bcc	51f930 <startup-0x1fae06d0>
    26e8:	01000013 	tsteq	r0, r3, lsl r0
    26ec:	00a2019c 	umlaleq	r0, r2, ip, r1
    26f0:	91020000 	mrsls	r0, (UNDEF: 2)
    26f4:	3e170072 	mrccc	0, 0, r0, cr7, cr2, {3}
    26f8:	01000016 	tsteq	r0, r6, lsl r0
    26fc:	00a20188 	adceq	r0, r2, r8, lsl #3
    2700:	1e800000 	cdpne	0, 8, cr0, cr0, cr0, {0}
    2704:	00162000 	andseq	r2, r6, r0
    2708:	9c010000 	stcls	0, cr0, [r1], {-0}
    270c:	00000482 	andeq	r0, r0, r2, lsl #9
    2710:	00174314 	andseq	r4, r7, r4, lsl r3
    2714:	01880100 	orreq	r0, r8, r0, lsl #2
    2718:	0000033a 	andeq	r0, r0, sl, lsr r3
    271c:	00749102 	rsbseq	r9, r4, r2, lsl #2
    2720:	0017ce17 	andseq	ip, r7, r7, lsl lr
    2724:	016e0100 	cmneq	lr, r0, lsl #2
    2728:	00000097 	muleq	r0, r7, r0
    272c:	20001e3e 	andcs	r1, r0, lr, lsr lr
    2730:	00000042 	andeq	r0, r0, r2, asr #32
    2734:	04ca9c01 	strbeq	r9, [sl], #3073	; 0xc01
    2738:	43140000 	tstmi	r4, #0
    273c:	01000017 	tsteq	r0, r7, lsl r0
    2740:	033a016e 	teqeq	sl, #-2147483621	; 0x8000001b
    2744:	91020000 	mrsls	r0, (UNDEF: 2)
    2748:	133a146c 	teqne	sl, #108, 8	; 0x6c000000
    274c:	6e010000 	cdpvs	0, 0, cr0, cr1, cr0, {0}
    2750:	0000a201 	andeq	sl, r0, r1, lsl #4
    2754:	6a910200 	bvs	fe442f5c <_global_impure_ptr+0xde43df38>
    2758:	00064015 	andeq	r4, r6, r5, lsl r0
    275c:	01700100 	cmneq	r0, r0, lsl #2
    2760:	00000097 	muleq	r0, r7, r0
    2764:	00779102 	rsbseq	r9, r7, r2, lsl #2
    2768:	0016fd17 	andseq	pc, r6, r7, lsl sp	; <UNPREDICTABLE>
    276c:	015d0100 	cmpeq	sp, r0, lsl #2
    2770:	000000a2 	andeq	r0, r0, r2, lsr #1
    2774:	20001e28 	andcs	r1, r0, r8, lsr #28
    2778:	00000016 	andeq	r0, r0, r6, lsl r0
    277c:	04f49c01 	ldrbteq	r9, [r4], #3073	; 0xc01
    2780:	43140000 	tstmi	r4, #0
    2784:	01000017 	tsteq	r0, r7, lsl r0
    2788:	033a015d 	teqeq	sl, #1073741847	; 0x40000017
    278c:	91020000 	mrsls	r0, (UNDEF: 2)
    2790:	c0170074 	andsgt	r0, r7, r4, ror r0
    2794:	01000016 	tsteq	r0, r6, lsl r0
    2798:	00970143 	addseq	r0, r7, r3, asr #2
    279c:	1de60000 	stclne	0, cr0, [r6]
    27a0:	00422000 	subeq	r2, r2, r0
    27a4:	9c010000 	stcls	0, cr0, [r1], {-0}
    27a8:	0000053c 	andeq	r0, r0, ip, lsr r5
    27ac:	00174314 	andseq	r4, r7, r4, lsl r3
    27b0:	01430100 	mrseq	r0, (UNDEF: 83)
    27b4:	0000033a 	andeq	r0, r0, sl, lsr r3
    27b8:	146c9102 	strbtne	r9, [ip], #-258	; 0xfffffefe
    27bc:	0000133a 	andeq	r1, r0, sl, lsr r3
    27c0:	a2014301 	andge	r4, r1, #67108864	; 0x4000000
    27c4:	02000000 	andeq	r0, r0, #0
    27c8:	40156a91 	mulsmi	r5, r1, sl
    27cc:	01000006 	tsteq	r0, r6
    27d0:	00970145 	addseq	r0, r7, r5, asr #2
    27d4:	91020000 	mrsls	r0, (UNDEF: 2)
    27d8:	10130077 	andsne	r0, r3, r7, ror r0
    27dc:	01000017 	tsteq	r0, r7, lsl r0
    27e0:	1da00115 	stfnes	f0, [r0, #84]!	; 0x54
    27e4:	00462000 	subeq	r2, r6, r0
    27e8:	9c010000 	stcls	0, cr0, [r1], {-0}
    27ec:	00000580 	andeq	r0, r0, r0, lsl #11
    27f0:	00174314 	andseq	r4, r7, r4, lsl r3
    27f4:	01150100 	tsteq	r5, r0, lsl #2
    27f8:	0000033a 	andeq	r0, r0, sl, lsr r3
    27fc:	146c9102 	strbtne	r9, [ip], #-258	; 0xfffffefe
    2800:	0000133a 	andeq	r1, r0, sl, lsr r3
    2804:	a2011501 	andge	r1, r1, #4194304	; 0x400000
    2808:	02000000 	andeq	r0, r0, #0
    280c:	74186a91 	ldrvc	r6, [r8], #-2705	; 0xfffff56f
    2810:	0100706d 	tsteq	r0, sp, rrx
    2814:	00cd0117 	sbceq	r0, sp, r7, lsl r1
    2818:	91020000 	mrsls	r0, (UNDEF: 2)
    281c:	5f190074 	svcpl	0x00190074
    2820:	01000016 	tsteq	r0, r6, lsl r0
    2824:	001d6cfe 			; <UNDEFINED> instruction: 0x001d6cfe
    2828:	00003420 	andeq	r3, r0, r0, lsr #8
    282c:	a49c0100 	ldrge	r0, [ip], #256	; 0x100
    2830:	1a000005 	bne	284c <startup-0x1fffd7b4>
    2834:	000016d6 	ldrdeq	r1, [r0], -r6
    2838:	05a4fe01 	streq	pc, [r4, #3585]!	; 0xe01
    283c:	91020000 	mrsls	r0, (UNDEF: 2)
    2840:	04160074 	ldreq	r0, [r6], #-116	; 0xffffff8c
    2844:	000002cd 	andeq	r0, r0, sp, asr #5
    2848:	00169b19 	andseq	r9, r6, r9, lsl fp
    284c:	54ca0100 	strbpl	r0, [sl], #256	; 0x100
    2850:	1820001c 	stmdane	r0!, {r2, r3, r4}
    2854:	01000001 	tsteq	r0, r1
    2858:	0006069c 	muleq	r6, ip, r6
    285c:	17431a00 	strbne	r1, [r3, -r0, lsl #20]
    2860:	ca010000 	bgt	42868 <startup-0x1ffbd798>
    2864:	0000033a 	andeq	r0, r0, sl, lsr r3
    2868:	1a649102 	bne	1926c78 <startup-0x1e6d9388>
    286c:	000016d6 	ldrdeq	r1, [r0], -r6
    2870:	05a4ca01 	streq	ip, [r4, #2561]!	; 0xa01
    2874:	91020000 	mrsls	r0, (UNDEF: 2)
    2878:	162f1b60 	strtne	r1, [pc], -r0, ror #22
    287c:	cc010000 	stcgt	0, cr0, [r1], {-0}
    2880:	000000c2 	andeq	r0, r0, r2, asr #1
    2884:	1c749102 	ldfnep	f1, [r4], #-8
    2888:	00736f70 	rsbseq	r6, r3, r0, ror pc
    288c:	00c2cc01 	sbceq	ip, r2, r1, lsl #24
    2890:	91020000 	mrsls	r0, (UNDEF: 2)
    2894:	172d1b70 			; <UNDEFINED> instruction: 0x172d1b70
    2898:	cc010000 	stcgt	0, cr0, [r1], {-0}
    289c:	000000c2 	andeq	r0, r0, r2, asr #1
    28a0:	006c9102 	rsbeq	r9, ip, r2, lsl #2
    28a4:	0016b41d 	andseq	fp, r6, sp, lsl r4
    28a8:	e47f0100 	ldrbt	r0, [pc], #-256	; 28b0 <startup-0x1fffd750>
    28ac:	7020001a 	eorvc	r0, r0, sl, lsl r0
    28b0:	01000001 	tsteq	r0, r1
    28b4:	17431a9c 			; <UNDEFINED> instruction: 0x17431a9c
    28b8:	7f010000 	svcvc	0x00010000
    28bc:	0000033a 	andeq	r0, r0, sl, lsr r3
    28c0:	00749102 	rsbseq	r9, r4, r2, lsl #2
    28c4:	00054300 	andeq	r4, r5, r0, lsl #6
    28c8:	f5000400 			; <UNDEFINED> instruction: 0xf5000400
    28cc:	04000006 	streq	r0, [r0], #-6
    28d0:	00025101 	andeq	r5, r2, r1, lsl #2
    28d4:	18710c00 	ldmdane	r1!, {sl, fp}^
    28d8:	01f70000 	mvnseq	r0, r0
    28dc:	1ff40000 	svcne	0x00f40000
    28e0:	01c42000 	biceq	r2, r4, r0
    28e4:	0b1b0000 	bleq	6c28ec <startup-0x1f93d714>
    28e8:	01020000 	mrseq	r0, (UNDEF: 2)
    28ec:	00024506 	andeq	r4, r2, r6, lsl #10
    28f0:	01bf0300 			; <UNDEFINED> instruction: 0x01bf0300
    28f4:	2b020000 	blcs	828fc <startup-0x1ff7d704>
    28f8:	00000037 	andeq	r0, r0, r7, lsr r0
    28fc:	43080102 	movwmi	r0, #33026	; 0x8102
    2900:	02000002 	andeq	r0, r0, #2
    2904:	00bd0502 	adcseq	r0, sp, r2, lsl #10
    2908:	02020000 	andeq	r0, r2, #0
    290c:	0003fa07 	andeq	pc, r3, r7, lsl #20
    2910:	053d0300 	ldreq	r0, [sp, #-768]!	; 0xfffffd00
    2914:	4d020000 	stcmi	0, cr0, [r2, #-0]
    2918:	00000057 	andeq	r0, r0, r7, asr r0
    291c:	6d050402 	cfstrsvs	mvf0, [r5, #-8]
    2920:	03000001 	movweq	r0, #1
    2924:	0000050e 	andeq	r0, r0, lr, lsl #10
    2928:	00694f02 	rsbeq	r4, r9, r2, lsl #30
    292c:	04020000 	streq	r0, [r2], #-0
    2930:	00031a07 	andeq	r1, r3, r7, lsl #20
    2934:	05080200 	streq	r0, [r8, #-512]	; 0xfffffe00
    2938:	00000168 	andeq	r0, r0, r8, ror #2
    293c:	15070802 	strne	r0, [r7, #-2050]	; 0xfffff7fe
    2940:	04000003 	streq	r0, [r0], #-3
    2944:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    2948:	04020074 	streq	r0, [r2], #-116	; 0xffffff8c
    294c:	00031f07 	andeq	r1, r3, r7, lsl #30
    2950:	01c10300 	biceq	r0, r1, r0, lsl #6
    2954:	18030000 	stmdane	r3, {}	; <UNPREDICTABLE>
    2958:	0000002c 	andeq	r0, r0, ip, lsr #32
    295c:	00008c05 	andeq	r8, r0, r5, lsl #24
    2960:	053f0300 	ldreq	r0, [pc, #-768]!	; 2668 <startup-0x1fffd998>
    2964:	2c030000 	stccs	0, cr0, [r3], {-0}
    2968:	0000004c 	andeq	r0, r0, ip, asr #32
    296c:	00009c05 	andeq	r9, r0, r5, lsl #24
    2970:	05100300 	ldreq	r0, [r0, #-768]	; 0xfffffd00
    2974:	30030000 	andcc	r0, r3, r0
    2978:	0000005e 	andeq	r0, r0, lr, asr r0
    297c:	0000ac05 	andeq	sl, r0, r5, lsl #24
    2980:	00b70600 	adcseq	r0, r7, r0, lsl #12
    2984:	04070000 	streq	r0, [r7], #-0
    2988:	01a0040e 	lsleq	r0, lr, #8
    298c:	0000017d 	andeq	r0, r0, sp, ror r1
    2990:	0015b108 	andseq	fp, r5, r8, lsl #2
    2994:	01a20400 			; <UNDEFINED> instruction: 0x01a20400
    2998:	0000018d 	andeq	r0, r0, sp, lsl #3
    299c:	04810800 	streq	r0, [r1], #2048	; 0x800
    29a0:	a3040000 	movwge	r0, #16384	; 0x4000
    29a4:	00019201 	andeq	r9, r1, r1, lsl #4
    29a8:	40082000 	andmi	r2, r8, r0
    29ac:	04000012 	streq	r0, [r0], #-18	; 0xffffffee
    29b0:	018d01a4 	orreq	r0, sp, r4, lsr #3
    29b4:	08800000 	stmeq	r0, {}	; <UNPREDICTABLE>
    29b8:	000006d5 	ldrdeq	r0, [r0], -r5
    29bc:	9201a504 	andls	sl, r1, #4, 10	; 0x1000000
    29c0:	a0000001 	andge	r0, r0, r1
    29c4:	00154a09 	andseq	r4, r5, r9, lsl #20
    29c8:	01a60400 			; <UNDEFINED> instruction: 0x01a60400
    29cc:	0000018d 	andeq	r0, r0, sp, lsl #3
    29d0:	95090100 	strls	r0, [r9, #-256]	; 0xffffff00
    29d4:	04000004 	streq	r0, [r0], #-4
    29d8:	019201a7 	orrseq	r0, r2, r7, lsr #3
    29dc:	01200000 			; <UNDEFINED> instruction: 0x01200000
    29e0:	00082f09 	andeq	r2, r8, r9, lsl #30
    29e4:	01a80400 			; <UNDEFINED> instruction: 0x01a80400
    29e8:	0000018d 	andeq	r0, r0, sp, lsl #3
    29ec:	9f090180 	svcls	0x00090180
    29f0:	04000004 	streq	r0, [r0], #-4
    29f4:	019201a9 	orrseq	r0, r2, r9, lsr #3
    29f8:	01a00000 	moveq	r0, r0
    29fc:	000a9e09 	andeq	r9, sl, r9, lsl #28
    2a00:	01aa0400 			; <UNDEFINED> instruction: 0x01aa0400
    2a04:	0000018d 	andeq	r0, r0, sp, lsl #3
    2a08:	a9090200 	stmdbge	r9, {r9}
    2a0c:	04000004 	streq	r0, [r0], #-4
    2a10:	01a201ab 			; <UNDEFINED> instruction: 0x01a201ab
    2a14:	02200000 	eoreq	r0, r0, #0
    2a18:	0050490a 	subseq	r4, r0, sl, lsl #18
    2a1c:	c201ac04 	andgt	sl, r1, #4, 24	; 0x400
    2a20:	00000001 	andeq	r0, r0, r1
    2a24:	04b30903 	ldrteq	r0, [r3], #2307	; 0x903
    2a28:	ad040000 	stcge	0, cr0, [r4, #-0]
    2a2c:	0001c701 	andeq	ip, r1, r1, lsl #14
    2a30:	0903f000 	stmdbeq	r3, {ip, sp, lr, pc}
    2a34:	00000c11 	andeq	r0, r0, r1, lsl ip
    2a38:	b701ae04 	strlt	sl, [r1, -r4, lsl #28]
    2a3c:	00000000 	andeq	r0, r0, r0
    2a40:	b70b000e 	strlt	r0, [fp, -lr]
    2a44:	8d000000 	stchi	0, cr0, [r0, #-0]
    2a48:	0c000001 	stceq	0, cr0, [r0], {1}
    2a4c:	00000085 	andeq	r0, r0, r5, lsl #1
    2a50:	7d050007 	stcvc	0, cr0, [r5, #-28]	; 0xffffffe4
    2a54:	0b000001 	bleq	2a60 <startup-0x1fffd5a0>
    2a58:	000000ac 	andeq	r0, r0, ip, lsr #1
    2a5c:	000001a2 	andeq	r0, r0, r2, lsr #3
    2a60:	0000850c 	andeq	r8, r0, ip, lsl #10
    2a64:	0b001700 	bleq	866c <startup-0x1fff7994>
    2a68:	000000ac 	andeq	r0, r0, ip, lsr #1
    2a6c:	000001b2 			; <UNDEFINED> instruction: 0x000001b2
    2a70:	0000850c 	andeq	r8, r0, ip, lsl #10
    2a74:	0b003700 	bleq	1067c <startup-0x1ffef984>
    2a78:	00000097 	muleq	r0, r7, r0
    2a7c:	000001c2 	andeq	r0, r0, r2, asr #3
    2a80:	0000850c 	andeq	r8, r0, ip, lsl #10
    2a84:	0500ef00 	streq	lr, [r0, #-3840]	; 0xfffff100
    2a88:	000001b2 			; <UNDEFINED> instruction: 0x000001b2
    2a8c:	0000ac0b 	andeq	sl, r0, fp, lsl #24
    2a90:	0001d800 	andeq	sp, r1, r0, lsl #16
    2a94:	00850d00 	addeq	r0, r5, r0, lsl #26
    2a98:	02830000 	addeq	r0, r3, #0
    2a9c:	119d0e00 	orrsne	r0, sp, r0, lsl #28
    2aa0:	af040000 	svcge	0x00040000
    2aa4:	0000c101 	andeq	ip, r0, r1, lsl #2
    2aa8:	048c0f00 	streq	r0, [ip], #3840	; 0xf00
    2aac:	02ff01c0 	rscseq	r0, pc, #192, 2	; 0x30
    2ab0:	eb080000 	bl	202ab8 <startup-0x1fdfd548>
    2ab4:	04000008 	streq	r0, [r0], #-8
    2ab8:	00bc01c2 	adcseq	r0, ip, r2, asr #3
    2abc:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    2ac0:	00000a14 	andeq	r0, r0, r4, lsl sl
    2ac4:	b701c304 	strlt	ip, [r1, -r4, lsl #6]
    2ac8:	04000000 	streq	r0, [r0], #-0
    2acc:	00076d08 	andeq	r6, r7, r8, lsl #26
    2ad0:	01c40400 	biceq	r0, r4, r0, lsl #8
    2ad4:	000000b7 	strheq	r0, [r0], -r7
    2ad8:	08bb0808 	ldmeq	fp!, {r3, fp}
    2adc:	c5040000 	strgt	r0, [r4, #-0]
    2ae0:	0000b701 	andeq	fp, r0, r1, lsl #14
    2ae4:	53100c00 	tstpl	r0, #0, 24
    2ae8:	04005243 	streq	r5, [r0], #-579	; 0xfffffdbd
    2aec:	00b701c6 	adcseq	r0, r7, r6, asr #3
    2af0:	10100000 	andsne	r0, r0, r0
    2af4:	00524343 	subseq	r4, r2, r3, asr #6
    2af8:	b701c704 	strlt	ip, [r1, -r4, lsl #14]
    2afc:	14000000 	strne	r0, [r0], #-0
    2b00:	50485310 	subpl	r5, r8, r0, lsl r3
    2b04:	01c80400 	biceq	r0, r8, r0, lsl #8
    2b08:	0000030f 	andeq	r0, r0, pc, lsl #6
    2b0c:	0c030818 	stceq	8, cr0, [r3], {24}
    2b10:	c9040000 	stmdbgt	r4, {}	; <UNPREDICTABLE>
    2b14:	0000b701 	andeq	fp, r0, r1, lsl #14
    2b18:	bd082400 	cfstrslt	mvf2, [r8, #-0]
    2b1c:	04000012 	streq	r0, [r0], #-18	; 0xffffffee
    2b20:	00b701ca 	adcseq	r0, r7, sl, asr #3
    2b24:	08280000 	stmdaeq	r8!, {}	; <UNPREDICTABLE>
    2b28:	00000b86 	andeq	r0, r0, r6, lsl #23
    2b2c:	b701cb04 	strlt	ip, [r1, -r4, lsl #22]
    2b30:	2c000000 	stccs	0, cr0, [r0], {-0}
    2b34:	000b1408 	andeq	r1, fp, r8, lsl #8
    2b38:	01cc0400 	biceq	r0, ip, r0, lsl #8
    2b3c:	000000b7 	strheq	r0, [r0], -r7
    2b40:	13940830 	orrsne	r0, r4, #48, 16	; 0x300000
    2b44:	cd040000 	stcgt	0, cr0, [r4, #-0]
    2b48:	0000b701 	andeq	fp, r0, r1, lsl #14
    2b4c:	69083400 	stmdbvs	r8, {sl, ip, sp}
    2b50:	04000010 	streq	r0, [r0], #-16
    2b54:	00b701ce 	adcseq	r0, r7, lr, asr #3
    2b58:	08380000 	ldmdaeq	r8!, {}	; <UNPREDICTABLE>
    2b5c:	0000128d 	andeq	r1, r0, sp, lsl #5
    2b60:	b701cf04 	strlt	ip, [r1, -r4, lsl #30]
    2b64:	3c000000 	stccc	0, cr0, [r0], {-0}
    2b68:	52465010 	subpl	r5, r6, #16
    2b6c:	01d00400 	bicseq	r0, r0, r0, lsl #8
    2b70:	00000329 	andeq	r0, r0, r9, lsr #6
    2b74:	46441040 	strbmi	r1, [r4], -r0, asr #32
    2b78:	d1040052 	qaddle	r0, r2, r4
    2b7c:	0000bc01 	andeq	fp, r0, r1, lsl #24
    2b80:	41104800 	tstmi	r0, r0, lsl #16
    2b84:	04005244 	streq	r5, [r0], #-580	; 0xfffffdbc
    2b88:	00bc01d2 	ldrsbteq	r0, [ip], r2
    2b8c:	084c0000 	stmdaeq	ip, {}^	; <UNPREDICTABLE>
    2b90:	00001383 	andeq	r1, r0, r3, lsl #7
    2b94:	4301d304 	movwmi	sp, #4868	; 0x1304
    2b98:	50000003 	andpl	r0, r0, r3
    2b9c:	0013b308 	andseq	fp, r3, r8, lsl #6
    2ba0:	01d40400 	bicseq	r0, r4, r0, lsl #8
    2ba4:	0000035d 	andeq	r0, r0, sp, asr r3
    2ba8:	04810860 	streq	r0, [r1], #2144	; 0x860
    2bac:	d5040000 	strle	r0, [r4, #-0]
    2bb0:	00036201 	andeq	r6, r3, r1, lsl #4
    2bb4:	44087400 	strmi	r7, [r8], #-1024	; 0xfffffc00
    2bb8:	04000015 	streq	r0, [r0], #-21	; 0xffffffeb
    2bbc:	00b701d6 	ldrsbteq	r0, [r7], r6
    2bc0:	00880000 	addeq	r0, r8, r0
    2bc4:	0000970b 	andeq	r9, r0, fp, lsl #14
    2bc8:	00030f00 	andeq	r0, r3, r0, lsl #30
    2bcc:	00850c00 	addeq	r0, r5, r0, lsl #24
    2bd0:	000b0000 	andeq	r0, fp, r0
    2bd4:	0002ff05 	andeq	pc, r2, r5, lsl #30
    2bd8:	00bc0b00 	adcseq	r0, ip, r0, lsl #22
    2bdc:	03240000 			; <UNDEFINED> instruction: 0x03240000
    2be0:	850c0000 	strhi	r0, [ip, #-0]
    2be4:	01000000 	mrseq	r0, (UNDEF: 0)
    2be8:	03140600 	tsteq	r4, #0, 12
    2bec:	24050000 	strcs	r0, [r5], #-0
    2bf0:	0b000003 	bleq	2c04 <startup-0x1fffd3fc>
    2bf4:	000000bc 	strheq	r0, [r0], -ip
    2bf8:	0000033e 	andeq	r0, r0, lr, lsr r3
    2bfc:	0000850c 	andeq	r8, r0, ip, lsl #10
    2c00:	06000300 	streq	r0, [r0], -r0, lsl #6
    2c04:	0000032e 	andeq	r0, r0, lr, lsr #6
    2c08:	00033e05 	andeq	r3, r3, r5, lsl #28
    2c0c:	00bc0b00 	adcseq	r0, ip, r0, lsl #22
    2c10:	03580000 	cmpeq	r8, #0
    2c14:	850c0000 	strhi	r0, [ip, #-0]
    2c18:	04000000 	streq	r0, [r0], #-0
    2c1c:	03480600 	movteq	r0, #34304	; 0x8600
    2c20:	58050000 	stmdapl	r5, {}	; <UNPREDICTABLE>
    2c24:	0b000003 	bleq	2c38 <startup-0x1fffd3c8>
    2c28:	000000ac 	andeq	r0, r0, ip, lsr #1
    2c2c:	00000372 	andeq	r0, r0, r2, ror r3
    2c30:	0000850c 	andeq	r8, r0, ip, lsl #10
    2c34:	0e000400 	cfcpyseq	mvf0, mvf0
    2c38:	00000afa 	strdeq	r0, [r0], -sl
    2c3c:	e401d704 	str	sp, [r1], #-1796	; 0xfffff8fc
    2c40:	0f000001 	svceq	0x00000001
    2c44:	02bf0410 	adcseq	r0, pc, #16, 8	; 0x10000000
    2c48:	000003bc 			; <UNDEFINED> instruction: 0x000003bc
    2c4c:	000fdd08 	andeq	sp, pc, r8, lsl #26
    2c50:	02c10400 	sbceq	r0, r1, #0, 8
    2c54:	000000b7 	strheq	r0, [r0], -r7
    2c58:	13110800 	tstne	r1, #0, 16
    2c5c:	c2040000 	andgt	r0, r4, #0
    2c60:	0000b702 	andeq	fp, r0, r2, lsl #14
    2c64:	56100400 	ldrpl	r0, [r0], -r0, lsl #8
    2c68:	04004c41 	streq	r4, [r0], #-3137	; 0xfffff3bf
    2c6c:	00b702c3 	adcseq	r0, r7, r3, asr #5
    2c70:	08080000 	stmdaeq	r8, {}	; <UNPREDICTABLE>
    2c74:	00001299 	muleq	r0, r9, r2
    2c78:	bc02c404 	cfstrslt	mvf12, [r2], {4}
    2c7c:	0c000000 	stceq	0, cr0, [r0], {-0}
    2c80:	10fd0e00 	rscsne	r0, sp, r0, lsl #28
    2c84:	c5040000 	strgt	r0, [r4, #-0]
    2c88:	00037e02 	andeq	r7, r3, r2, lsl #28
    2c8c:	06331100 	ldrteq	r1, [r3], -r0, lsl #2
    2c90:	fa040000 	blx	102c98 <startup-0x1fefd368>
    2c94:	0000a706 	andeq	sl, r0, r6, lsl #14
    2c98:	043d1200 	ldrteq	r1, [sp], #-512	; 0xfffffe00
    2c9c:	3b050000 	blcc	142ca4 <startup-0x1febd35c>
    2ca0:	000000ac 	andeq	r0, r0, ip, lsr #1
    2ca4:	37010713 	smladcc	r1, r3, r7, r0
    2ca8:	06000000 	streq	r0, [r0], -r0
    2cac:	03fa035f 	mvnseq	r0, #2080374785	; 0x7c000001
    2cb0:	2b140000 	blcs	502cb8 <startup-0x1fafd348>
    2cb4:	00000001 	andeq	r0, r0, r1
    2cb8:	00066514 	andeq	r6, r6, r4, lsl r5
    2cbc:	0e000100 	adfeqs	f0, f0, f0
    2cc0:	000004e7 	andeq	r0, r0, r7, ror #9
    2cc4:	df035f06 	svcle	0x00035f06
    2cc8:	15000003 	strne	r0, [r0, #-3]
    2ccc:	3f360704 	svccc	0x00360704
    2cd0:	16000004 	strne	r0, [r0], -r4
    2cd4:	000018fc 	strdeq	r1, [r0], -ip
    2cd8:	008c3807 	addeq	r3, ip, r7, lsl #16
    2cdc:	16000000 	strne	r0, [r0], -r0
    2ce0:	00001927 	andeq	r1, r0, r7, lsr #18
    2ce4:	008c3d07 	addeq	r3, ip, r7, lsl #26
    2ce8:	16010000 	strne	r0, [r1], -r0
    2cec:	0000190c 	andeq	r1, r0, ip, lsl #18
    2cf0:	008c4207 	addeq	r4, ip, r7, lsl #4
    2cf4:	16020000 	strne	r0, [r2], -r0
    2cf8:	000017f6 	strdeq	r1, [r0], -r6
    2cfc:	03fa4707 	mvnseq	r4, #1835008	; 0x1c0000
    2d00:	00030000 	andeq	r0, r3, r0
    2d04:	0017e503 	andseq	lr, r7, r3, lsl #10
    2d08:	064a0700 	strbeq	r0, [sl], -r0, lsl #14
    2d0c:	17000004 	strne	r0, [r0, -r4]
    2d10:	000018d8 	ldrdeq	r1, [r0], -r8
    2d14:	2184df01 	orrcs	sp, r4, r1, lsl #30
    2d18:	00342000 	eorseq	r2, r4, r0
    2d1c:	9c010000 	stcls	0, cr0, [r1], {-0}
    2d20:	0000046e 	andeq	r0, r0, lr, ror #8
    2d24:	00180918 	andseq	r0, r8, r8, lsl r9
    2d28:	acdf0100 	ldfgee	f0, [pc], {0}
    2d2c:	02000000 	andeq	r0, r0, #0
    2d30:	17007491 			; <UNDEFINED> instruction: 0x17007491
    2d34:	000018c4 	andeq	r1, r0, r4, asr #17
    2d38:	213cc701 	teqcs	ip, r1, lsl #14
    2d3c:	00482000 	subeq	r2, r8, r0
    2d40:	9c010000 	stcls	0, cr0, [r1], {-0}
    2d44:	000004a0 	andeq	r0, r0, r0, lsr #9
    2d48:	00195618 	andseq	r5, r9, r8, lsl r6
    2d4c:	8cc70100 	stfhie	f0, [r7], {0}
    2d50:	02000000 	andeq	r0, r0, #0
    2d54:	15187791 	ldrne	r7, [r8, #-1937]	; 0xfffff86f
    2d58:	01000001 	tsteq	r0, r1
    2d5c:	0003fac7 	andeq	pc, r3, r7, asr #21
    2d60:	76910200 	ldrvc	r0, [r1], r0, lsl #4
    2d64:	18561700 	ldmdane	r6, {r8, r9, sl, ip}^
    2d68:	b4010000 	strlt	r0, [r1], #-0
    2d6c:	20002110 	andcs	r2, r0, r0, lsl r1
    2d70:	0000002c 	andeq	r0, r0, ip, lsr #32
    2d74:	04d29c01 	ldrbeq	r9, [r2], #3073	; 0xc01
    2d78:	49180000 	ldmdbmi	r8, {}	; <UNPREDICTABLE>
    2d7c:	01000019 	tsteq	r0, r9, lsl r0
    2d80:	0000acb4 			; <UNDEFINED> instruction: 0x0000acb4
    2d84:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    2d88:	00184f18 	andseq	r4, r8, r8, lsl pc
    2d8c:	acb40100 	ldfges	f0, [r4]
    2d90:	02000000 	andeq	r0, r0, #0
    2d94:	17007091 			; <UNDEFINED> instruction: 0x17007091
    2d98:	0000183e 	andeq	r1, r0, lr, lsr r8
    2d9c:	20188801 	andscs	r8, r8, r1, lsl #16
    2da0:	00f82000 	rscseq	r2, r8, r0
    2da4:	9c010000 	stcls	0, cr0, [r1], {-0}
    2da8:	00000520 	andeq	r0, r0, r0, lsr #10
    2dac:	00181b18 	andseq	r1, r8, r8, lsl fp
    2db0:	20880100 	addcs	r0, r8, r0, lsl #2
    2db4:	02000005 	andeq	r0, r0, #5
    2db8:	f0196491 			; <UNDEFINED> instruction: 0xf0196491
    2dbc:	01000018 	tsteq	r0, r8, lsl r0
    2dc0:	00008c8a 	andeq	r8, r0, sl, lsl #25
    2dc4:	6f910200 	svcvs	0x00910200
    2dc8:	00184819 	andseq	r4, r8, r9, lsl r8
    2dcc:	8c8a0100 	stfhis	f0, [sl], {0}
    2dd0:	02000000 	andeq	r0, r0, #0
    2dd4:	6a196e91 	bvs	65e820 <startup-0x1f9a17e0>
    2dd8:	01000018 	tsteq	r0, r8, lsl r0
    2ddc:	00008c8a 	andeq	r8, r0, sl, lsl #25
    2de0:	6d910200 	lfmvs	f0, 4, [r1]
    2de4:	3f041a00 	svccc	0x00041a00
    2de8:	1b000004 	blne	2e00 <startup-0x1fffd200>
    2dec:	00001963 	andeq	r1, r0, r3, ror #18
    2df0:	1ff47601 	svcne	0x00f47601
    2df4:	00242000 	eoreq	r2, r4, r0
    2df8:	9c010000 	stcls	0, cr0, [r1], {-0}
    2dfc:	00182b18 	andseq	r2, r8, r8, lsl fp
    2e00:	ac760100 	ldfgee	f0, [r6], #-0
    2e04:	02000000 	andeq	r0, r0, #0
    2e08:	00007491 	muleq	r0, r1, r4
    2e0c:	00001102 	andeq	r1, r0, r2, lsl #2
    2e10:	08690004 	stmdaeq	r9!, {r2}^
    2e14:	01040000 	mrseq	r0, (UNDEF: 4)
    2e18:	00000251 	andeq	r0, r0, r1, asr r2
    2e1c:	001a000c 	andseq	r0, sl, ip
    2e20:	0001f700 	andeq	pc, r1, r0, lsl #14
    2e24:	0021b800 	eoreq	fp, r1, r0, lsl #16
    2e28:	0003fc20 	andeq	pc, r3, r0, lsr #24
    2e2c:	000cf800 	andeq	pc, ip, r0, lsl #16
    2e30:	06010200 	streq	r0, [r1], -r0, lsl #4
    2e34:	00000245 	andeq	r0, r0, r5, asr #4
    2e38:	0001bf03 	andeq	fp, r1, r3, lsl #30
    2e3c:	372b0200 	strcc	r0, [fp, -r0, lsl #4]!
    2e40:	02000000 	andeq	r0, r0, #0
    2e44:	02430801 	subeq	r0, r3, #65536	; 0x10000
    2e48:	02020000 	andeq	r0, r2, #0
    2e4c:	0000bd05 	andeq	fp, r0, r5, lsl #26
    2e50:	00950300 	addseq	r0, r5, r0, lsl #6
    2e54:	39020000 	stmdbcc	r2, {}	; <UNPREDICTABLE>
    2e58:	00000050 	andeq	r0, r0, r0, asr r0
    2e5c:	fa070202 	blx	1c366c <startup-0x1fe3c994>
    2e60:	03000003 	movweq	r0, #3
    2e64:	0000053d 	andeq	r0, r0, sp, lsr r5
    2e68:	00624d02 	rsbeq	r4, r2, r2, lsl #26
    2e6c:	04020000 	streq	r0, [r2], #-0
    2e70:	00016d05 	andeq	r6, r1, r5, lsl #26
    2e74:	050e0300 	streq	r0, [lr, #-768]	; 0xfffffd00
    2e78:	4f020000 	svcmi	0x00020000
    2e7c:	00000074 	andeq	r0, r0, r4, ror r0
    2e80:	1a070402 	bne	1c3e90 <startup-0x1fe3c170>
    2e84:	02000003 	andeq	r0, r0, #3
    2e88:	01680508 	cmneq	r8, r8, lsl #10
    2e8c:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    2e90:	00031507 	andeq	r1, r3, r7, lsl #10
    2e94:	05040400 	streq	r0, [r4, #-1024]	; 0xfffffc00
    2e98:	00746e69 	rsbseq	r6, r4, r9, ror #28
    2e9c:	1f070402 	svcne	0x00070402
    2ea0:	03000003 	movweq	r0, #3
    2ea4:	000001c1 	andeq	r0, r0, r1, asr #3
    2ea8:	002c1803 	eoreq	r1, ip, r3, lsl #16
    2eac:	97030000 	strls	r0, [r3, -r0]
    2eb0:	03000000 	movweq	r0, #0
    2eb4:	00004524 	andeq	r4, r0, r4, lsr #10
    2eb8:	00a20500 	adceq	r0, r2, r0, lsl #10
    2ebc:	3f030000 	svccc	0x00030000
    2ec0:	03000005 	movweq	r0, #5
    2ec4:	0000572c 	andeq	r5, r0, ip, lsr #14
    2ec8:	00b20500 	adcseq	r0, r2, r0, lsl #10
    2ecc:	10030000 	andne	r0, r3, r0
    2ed0:	03000005 	movweq	r0, #5
    2ed4:	00006930 	andeq	r6, r0, r0, lsr r9
    2ed8:	00c20500 	sbceq	r0, r2, r0, lsl #10
    2edc:	67060000 	strvs	r0, [r6, -r0]
    2ee0:	010a0c04 	tsteq	sl, r4, lsl #24
    2ee4:	80070000 	andhi	r0, r7, r0
    2ee8:	04000006 	streq	r0, [r0], #-6
    2eec:	00010a0e 	andeq	r0, r1, lr, lsl #20
    2ef0:	77070000 	strvc	r0, [r7, -r0]
    2ef4:	0400001c 	streq	r0, [r0], #-28	; 0xffffffe4
    2ef8:	00009711 	andeq	r9, r0, r1, lsl r7
    2efc:	69086400 	stmdbvs	r8, {sl, sp, lr}
    2f00:	1404006e 	strne	r0, [r4], #-110	; 0xffffff92
    2f04:	00000097 	muleq	r0, r7, r0
    2f08:	756f0865 	strbvc	r0, [pc, #-2149]!	; 26ab <startup-0x1fffd955>
    2f0c:	17040074 	smlsdxne	r4, r4, r0, r0
    2f10:	00000097 	muleq	r0, r7, r0
    2f14:	97090066 	strls	r0, [r9, -r6, rrx]
    2f18:	1a000000 	bne	2f20 <startup-0x1fffd0e0>
    2f1c:	0a000001 	beq	2f28 <startup-0x1fffd0d8>
    2f20:	00000090 	muleq	r0, r0, r0
    2f24:	76030063 	strvc	r0, [r3], -r3, rrx
    2f28:	04000006 	streq	r0, [r0], #-6
    2f2c:	0000d218 	andeq	sp, r0, r8, lsl r2
    2f30:	14150b00 	ldrne	r0, [r5], #-2816	; 0xfffff500
    2f34:	01050000 	mrseq	r0, (UNDEF: 5)
    2f38:	00000025 	andeq	r0, r0, r5, lsr #32
    2f3c:	0353c807 	cmpeq	r3, #458752	; 0x70000
    2f40:	fa0c0000 	blx	302f48 <startup-0x1fcfd0b8>
    2f44:	7200000c 	andvc	r0, r0, #12
    2f48:	000d750c 	andeq	r7, sp, ip, lsl #10
    2f4c:	2a0c7400 	bcs	31ff54 <startup-0x1fce00ac>
    2f50:	7500000e 	strvc	r0, [r0, #-14]
    2f54:	000ae40c 	andeq	lr, sl, ip, lsl #8
    2f58:	e60c7600 	str	r7, [ip], -r0, lsl #12
    2f5c:	7b00000e 	blvc	2f9c <startup-0x1fffd064>
    2f60:	0013280c 	andseq	r2, r3, ip, lsl #16
    2f64:	5a0c7c00 	bpl	321f6c <startup-0x1fcde094>
    2f68:	7e000015 	mcrvc	0, 0, r0, cr0, cr5, {0}
    2f6c:	0009e40c 	andeq	lr, r9, ip, lsl #8
    2f70:	0e0d7f00 	cdpeq	15, 0, cr7, cr13, cr0, {0}
    2f74:	0000000d 	andeq	r0, r0, sp
    2f78:	00126f0d 	andseq	r6, r2, sp, lsl #30
    2f7c:	8b0d0100 	blhi	343384 <startup-0x1fcbcc7c>
    2f80:	0200000d 	andeq	r0, r0, #13
    2f84:	0006de0d 	andeq	sp, r6, sp, lsl #28
    2f88:	7c0d0300 	stcvc	3, cr0, [sp], {-0}
    2f8c:	04000007 	streq	r0, [r0], #-7
    2f90:	0013a30d 	andseq	sl, r3, sp, lsl #6
    2f94:	a90d0500 	stmdbge	sp, {r8, sl}
    2f98:	06000012 			; <UNDEFINED> instruction: 0x06000012
    2f9c:	000c830d 	andeq	r8, ip, sp, lsl #6
    2fa0:	ec0d0700 	stc	7, cr0, [sp], {-0}
    2fa4:	08000006 	stmdaeq	r0, {r1, r2}
    2fa8:	00154f0d 	andseq	r4, r5, sp, lsl #30
    2fac:	d20d0900 	andle	r0, sp, #0, 18
    2fb0:	0a00000f 	beq	2ff4 <startup-0x1fffd00c>
    2fb4:	0011540d 	andseq	r5, r1, sp, lsl #8
    2fb8:	780d0b00 	stmdavc	sp, {r8, r9, fp}
    2fbc:	0c000010 	stceq	0, cr0, [r0], {16}
    2fc0:	000a550d 	andeq	r5, sl, sp, lsl #10
    2fc4:	b80d0d00 	stmdalt	sp, {r8, sl, fp}
    2fc8:	0e000013 	mcreq	0, 0, r0, cr0, cr3, {0}
    2fcc:	0012db0d 	andseq	sp, r2, sp, lsl #22
    2fd0:	9b0d0f00 	blls	346bd8 <startup-0x1fcb9428>
    2fd4:	1000000c 	andne	r0, r0, ip
    2fd8:	0006f70d 	andeq	pc, r6, sp, lsl #14
    2fdc:	250d1100 	strcs	r1, [sp, #-256]	; 0xffffff00
    2fe0:	12000012 	andne	r0, r0, #18
    2fe4:	000c8e0d 	andeq	r8, ip, sp, lsl #28
    2fe8:	780d1300 	stmdavc	sp, {r8, r9, ip}
    2fec:	1400000b 	strne	r0, [r0], #-11
    2ff0:	0014c30d 	andseq	ip, r4, sp, lsl #6
    2ff4:	9b0d1500 	blls	3483fc <startup-0x1fcb7c04>
    2ff8:	1600000d 	strne	r0, [r0], -sp
    2ffc:	0014ed0d 	andseq	lr, r4, sp, lsl #26
    3000:	510d1700 	tstpl	sp, r0, lsl #14
    3004:	1800000e 	stmdane	r0, {r1, r2, r3}
    3008:	0014070d 	andseq	r0, r4, sp, lsl #14
    300c:	4c0d1900 			; <UNDEFINED> instruction: 0x4c0d1900
    3010:	1a000009 	bne	303c <startup-0x1fffcfc4>
    3014:	000c680d 	andeq	r6, ip, sp, lsl #16
    3018:	fd0d1b00 	stc2	11, cr1, [sp, #-0]	; <UNPREDICTABLE>
    301c:	1c000007 	stcne	0, cr0, [r0], {7}
    3020:	0011d90d 	andseq	sp, r1, sp, lsl #18
    3024:	c90d1d00 	stmdbgt	sp, {r8, sl, fp, ip}
    3028:	1e00000b 	cdpne	0, 0, cr0, cr0, cr11, {0}
    302c:	000c160d 	andeq	r1, ip, sp, lsl #12
    3030:	b10d1f00 	tstlt	sp, r0, lsl #30
    3034:	2000000a 	andcs	r0, r0, sl
    3038:	000ffb0d 	andeq	pc, pc, sp, lsl #22
    303c:	fd0d2100 	stc2	1, cr2, [sp, #-0]
    3040:	2200000d 	andcs	r0, r0, #13
    3044:	000edc0d 	andeq	sp, lr, sp, lsl #24
    3048:	840d2300 	strhi	r2, [sp], #-768	; 0xfffffd00
    304c:	24000008 	strcs	r0, [r0], #-8
    3050:	0011e30d 	andseq	lr, r1, sp, lsl #6
    3054:	ca0d2500 	bgt	34c45c <startup-0x1fcb3ba4>
    3058:	26000013 			; <UNDEFINED> instruction: 0x26000013
    305c:	000a000d 	andeq	r0, sl, sp
    3060:	be0d2700 	cdplt	7, 0, cr2, cr13, cr0, {0}
    3064:	28000011 	stmdacs	r0, {r0, r4}
    3068:	0011860d 	andseq	r8, r1, sp, lsl #12
    306c:	a80d2900 	stmdage	sp, {r8, fp, sp}
    3070:	2a00000f 	bcs	30b4 <startup-0x1fffcf4c>
    3074:	00088e0d 	andeq	r8, r8, sp, lsl #28
    3078:	090d2b00 	stmdbeq	sp, {r8, r9, fp, sp}
    307c:	2c000007 	stccs	0, cr0, [r0], {7}
    3080:	000cc40d 	andeq	ip, ip, sp, lsl #8
    3084:	2d0d2d00 	stccs	13, cr2, [sp, #-0]
    3088:	2e000015 	mcrcs	0, 0, r0, cr0, cr5, {0}
    308c:	00158b0d 	andseq	r8, r5, sp, lsl #22
    3090:	9f0d2f00 	svcls	0x000d2f00
    3094:	30000012 	andcc	r0, r0, r2, lsl r0
    3098:	00153a0d 	andseq	r3, r5, sp, lsl #20
    309c:	da0d3100 	ble	34f4a4 <startup-0x1fcb0b5c>
    30a0:	3200000a 	andcc	r0, r0, #10
    30a4:	0007720d 	andeq	r7, r7, sp, lsl #4
    30a8:	730d3300 	movwvc	r3, #54016	; 0xd300
    30ac:	3400000f 	strcc	r0, [r0], #-15
    30b0:	000e460d 	andeq	r4, lr, sp, lsl #12
    30b4:	e20d3500 	and	r3, sp, #0, 10
    30b8:	3600000f 	strcc	r0, [r0], -pc
    30bc:	000eac0d 	andeq	sl, lr, sp, lsl #24
    30c0:	c00d3700 	andgt	r3, sp, r0, lsl #14
    30c4:	3800000d 	stmdacc	r0, {r0, r2, r3}
    30c8:	00074a0d 	andeq	r4, r7, sp, lsl #20
    30cc:	fa0d3900 	blx	3514d4 <startup-0x1fcaeb2c>
    30d0:	3a000015 	bcc	312c <startup-0x1fffced4>
    30d4:	0010970d 	andseq	r9, r0, sp, lsl #14
    30d8:	8c0d3b00 			; <UNDEFINED> instruction: 0x8c0d3b00
    30dc:	3c00000a 	stccc	0, cr0, [r0], {10}
    30e0:	00137a0d 	andseq	r7, r3, sp, lsl #20
    30e4:	b60d3d00 	strlt	r3, [sp], -r0, lsl #26
    30e8:	3e00000e 	cdpcc	0, 0, cr0, cr0, cr14, {0}
    30ec:	0010b20d 	andseq	fp, r0, sp, lsl #4
    30f0:	600d3f00 	andvs	r3, sp, r0, lsl #30
    30f4:	40000008 	andmi	r0, r0, r8
    30f8:	0012170d 	andseq	r1, r2, sp, lsl #14
    30fc:	be0d4100 	adflte	f4, f5, f0
    3100:	4200000a 	andmi	r0, r0, #10
    3104:	000cee0d 	andeq	lr, ip, sp, lsl #28
    3108:	160d4300 	strne	r4, [sp], -r0, lsl #6
    310c:	44000009 	strmi	r0, [r0], #-9
    3110:	0012f70d 	andseq	pc, r2, sp, lsl #14
    3114:	dc0d4500 	cfstr32le	mvfx4, [sp], {-0}
    3118:	4600000c 	strmi	r0, [r0], -ip
    311c:	00086e0d 	andeq	r6, r8, sp, lsl #28
    3120:	5a0d4700 	bpl	354d28 <startup-0x1fcab2d8>
    3124:	48000013 	stmdami	r0, {r0, r1, r4}
    3128:	0011a70d 	andseq	sl, r1, sp, lsl #14
    312c:	4c0d4900 			; <UNDEFINED> instruction: 0x4c0d4900
    3130:	4a000014 	bmi	3188 <startup-0x1fffce78>
    3134:	0015780d 	andseq	r7, r5, sp, lsl #16
    3138:	180d4b00 	stmdane	sp, {r8, r9, fp, lr}
    313c:	4c00000d 	stcmi	0, cr0, [r0], {13}
    3140:	000ec40d 	andeq	ip, lr, sp, lsl #8
    3144:	870d4d00 	strhi	r4, [sp, -r0, lsl #26]
    3148:	4e000007 	cdpmi	0, 0, cr0, cr0, cr7, {0}
    314c:	0011b40d 	andseq	fp, r1, sp, lsl #8
    3150:	750d4f00 	strvc	r4, [sp, #-3840]	; 0xfffff100
    3154:	5000000c 	andpl	r0, r0, ip
    3158:	000f4c0d 	andeq	r4, pc, sp, lsl #24
    315c:	0e005100 	adfeqs	f5, f0, f0
    3160:	00000633 	andeq	r0, r0, r3, lsr r6
    3164:	bd06fa05 	vstrlt	s30, [r6, #-20]	; 0xffffffec
    3168:	0f000000 	svceq	0x00000000
    316c:	0000043d 	andeq	r0, r0, sp, lsr r4
    3170:	00c23b06 	sbceq	r3, r2, r6, lsl #22
    3174:	07100000 	ldreq	r0, [r0, -r0]
    3178:	00003701 	andeq	r3, r0, r1, lsl #14
    317c:	035d0700 	cmpeq	sp, #0, 14
    3180:	00000385 	andeq	r0, r0, r5, lsl #7
    3184:	00167a0d 	andseq	r7, r6, sp, lsl #20
    3188:	53110000 	tstpl	r1, #0
    318c:	01005445 	tsteq	r0, r5, asr #8
    3190:	01071000 	mrseq	r1, (UNDEF: 7)
    3194:	00000037 	andeq	r0, r0, r7, lsr r0
    3198:	a0035f07 	andge	r5, r3, r7, lsl #30
    319c:	0d000003 	stceq	0, cr0, [r0, #-12]
    31a0:	0000012b 	andeq	r0, r0, fp, lsr #2
    31a4:	06650d00 	strbteq	r0, [r5], -r0, lsl #26
    31a8:	00010000 	andeq	r0, r1, r0
    31ac:	0004e712 	andeq	lr, r4, r2, lsl r7
    31b0:	035f0700 	cmpeq	pc, #0, 14
    31b4:	00000385 	andeq	r0, r0, r5, lsl #7
    31b8:	c3072813 	movwgt	r2, #30739	; 0x7813
    31bc:	00043805 	andeq	r3, r4, r5, lsl #16
    31c0:	14ac1400 	strtne	r1, [ip], #1024	; 0x400
    31c4:	c5070000 	strgt	r0, [r7, #-0]
    31c8:	0000cd05 	andeq	ip, r0, r5, lsl #26
    31cc:	92140000 	andsls	r0, r4, #0
    31d0:	07000012 	smladeq	r0, r2, r0, r0
    31d4:	00cd05c6 	sbceq	r0, sp, r6, asr #11
    31d8:	14040000 	strne	r0, [r4], #-0
    31dc:	00000e22 	andeq	r0, r0, r2, lsr #28
    31e0:	cd05c707 	stcgt	7, cr12, [r5, #-28]	; 0xffffffe4
    31e4:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    31e8:	000ed014 	andeq	sp, lr, r4, lsl r0
    31ec:	05c80700 	strbeq	r0, [r8, #1792]	; 0x700
    31f0:	000000cd 	andeq	r0, r0, sp, asr #1
    31f4:	4449150c 	strbmi	r1, [r9], #-1292	; 0xfffffaf4
    31f8:	c9070052 	stmdbgt	r7, {r1, r4, r6}
    31fc:	0000cd05 	andeq	ip, r0, r5, lsl #26
    3200:	4f151000 	svcmi	0x00151000
    3204:	07005244 	streq	r5, [r0, -r4, asr #4]
    3208:	00cd05ca 	sbceq	r0, sp, sl, asr #11
    320c:	14140000 	ldrne	r0, [r4], #-0
    3210:	00000f1e 	andeq	r0, r0, lr, lsl pc
    3214:	ad05cb07 	vstrge	d12, [r5, #-28]	; 0xffffffe4
    3218:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    321c:	000efb14 	andeq	pc, lr, r4, lsl fp	; <UNPREDICTABLE>
    3220:	05cc0700 	strbeq	r0, [ip, #1792]	; 0x700
    3224:	000000ad 	andeq	r0, r0, sp, lsr #1
    3228:	0de1141a 	cfstrdeq	mvd1, [r1, #104]!	; 0x68
    322c:	cd070000 	stcgt	0, cr0, [r7, #-0]
    3230:	0000cd05 	andeq	ip, r0, r5, lsl #26
    3234:	41151c00 	tstmi	r5, r0, lsl #24
    3238:	07005246 	streq	r5, [r0, -r6, asr #4]
    323c:	044805ce 	strbeq	r0, [r8], #-1486	; 0xfffffa32
    3240:	00200000 	eoreq	r0, r0, r0
    3244:	0000cd09 	andeq	ip, r0, r9, lsl #26
    3248:	00044800 	andeq	r4, r4, r0, lsl #16
    324c:	00900a00 	addseq	r0, r0, r0, lsl #20
    3250:	00010000 	andeq	r0, r1, r0
    3254:	00043805 	andeq	r3, r4, r5, lsl #16
    3258:	13fa1200 	mvnsne	r1, #0, 4
    325c:	cf070000 	svcgt	0x00070000
    3260:	0003ac05 	andeq	sl, r3, r5, lsl #24
    3264:	071c1300 	ldreq	r1, [ip, -r0, lsl #6]
    3268:	05170773 	ldreq	r0, [r7, #-1907]	; 0xfffff88d
    326c:	53150000 	tstpl	r5, #0
    3270:	75070052 	strvc	r0, [r7, #-82]	; 0xffffffae
    3274:	0000ad07 	andeq	sl, r0, r7, lsl #26
    3278:	81140000 	tsthi	r4, r0
    327c:	07000004 	streq	r0, [r0, -r4]
    3280:	00a20776 	adceq	r0, r2, r6, ror r7
    3284:	15020000 	strne	r0, [r2, #-0]
    3288:	07005244 	streq	r5, [r0, -r4, asr #4]
    328c:	00ad0777 	adceq	r0, sp, r7, ror r7
    3290:	14040000 	strne	r0, [r4], #-0
    3294:	0000048b 	andeq	r0, r0, fp, lsl #9
    3298:	a2077807 	andge	r7, r7, #458752	; 0x70000
    329c:	06000000 	streq	r0, [r0], -r0
    32a0:	52524215 	subspl	r4, r2, #1342177281	; 0x50000001
    32a4:	07790700 	ldrbeq	r0, [r9, -r0, lsl #14]!
    32a8:	000000ad 	andeq	r0, r0, sp, lsr #1
    32ac:	04951408 	ldreq	r1, [r5], #1032	; 0x408
    32b0:	7a070000 	bvc	1c32b8 <startup-0x1fe3cd48>
    32b4:	0000a207 	andeq	sl, r0, r7, lsl #4
    32b8:	43150a00 	tstmi	r5, #0, 20
    32bc:	07003152 	smlsdeq	r0, r2, r1, r3
    32c0:	00ad077b 	adceq	r0, sp, fp, ror r7
    32c4:	140c0000 	strne	r0, [ip], #-0
    32c8:	0000049f 	muleq	r0, pc, r4	; <UNPREDICTABLE>
    32cc:	a2077c07 	andge	r7, r7, #1792	; 0x700
    32d0:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    32d4:	32524315 	subscc	r4, r2, #1409286144	; 0x54000000
    32d8:	077d0700 	ldrbeq	r0, [sp, -r0, lsl #14]!
    32dc:	000000ad 	andeq	r0, r0, sp, lsr #1
    32e0:	04a91410 	strteq	r1, [r9], #1040	; 0x410
    32e4:	7e070000 	cdpvc	0, 0, cr0, cr7, cr0, {0}
    32e8:	0000a207 	andeq	sl, r0, r7, lsl #4
    32ec:	43151200 	tstmi	r5, #0, 4
    32f0:	07003352 	smlsdeq	r0, r2, r3, r3
    32f4:	00ad077f 	adceq	r0, sp, pc, ror r7
    32f8:	14140000 	ldrne	r0, [r4], #-0
    32fc:	000004b3 			; <UNDEFINED> instruction: 0x000004b3
    3300:	a2078007 	andge	r8, r7, #7
    3304:	16000000 	strne	r0, [r0], -r0
    3308:	00001a14 	andeq	r1, r0, r4, lsl sl
    330c:	07810700 	streq	r0, [r1, r0, lsl #14]
    3310:	000000ad 	andeq	r0, r0, sp, lsr #1
    3314:	04bd1418 	ldrteq	r1, [sp], #1048	; 0x418
    3318:	82070000 	andhi	r0, r7, #0
    331c:	0000a207 	andeq	sl, r0, r7, lsl #4
    3320:	12001a00 	andne	r1, r0, #0, 20
    3324:	000000a0 	andeq	r0, r0, r0, lsr #1
    3328:	59078307 	stmdbpl	r7, {r0, r1, r2, r8, r9, pc}
    332c:	06000004 	streq	r0, [r0], -r4
    3330:	5c360804 	ldcpl	8, cr0, [r6], #-16
    3334:	07000005 	streq	r0, [r0, -r5]
    3338:	000018fc 	strdeq	r1, [r0], -ip
    333c:	00973808 	addseq	r3, r7, r8, lsl #16
    3340:	07000000 	streq	r0, [r0, -r0]
    3344:	00001927 	andeq	r1, r0, r7, lsr #18
    3348:	00973d08 	addseq	r3, r7, r8, lsl #26
    334c:	07010000 	streq	r0, [r1, -r0]
    3350:	0000190c 	andeq	r1, r0, ip, lsl #18
    3354:	00974208 	addseq	r4, r7, r8, lsl #4
    3358:	07020000 	streq	r0, [r2, -r0]
    335c:	000017f6 	strdeq	r1, [r0], -r6
    3360:	03a04708 	moveq	r4, #8, 14	; 0x200000
    3364:	00030000 	andeq	r0, r3, r0
    3368:	0017e503 	andseq	lr, r7, r3, lsl #10
    336c:	234a0800 	movtcs	r0, #43008	; 0xa800
    3370:	06000005 	streq	r0, [r0], -r5
    3374:	b8360910 	ldmdalt	r6!, {r4, r8, fp}
    3378:	07000005 	streq	r0, [r0, -r5]
    337c:	00000141 	andeq	r0, r0, r1, asr #2
    3380:	00c23809 	sbceq	r3, r2, r9, lsl #16
    3384:	07000000 	streq	r0, [r0, -r0]
    3388:	00000104 	andeq	r0, r0, r4, lsl #2
    338c:	00a23e09 	adceq	r3, r2, r9, lsl #28
    3390:	07040000 	streq	r0, [r4, -r0]
    3394:	000000ae 	andeq	r0, r0, lr, lsr #1
    3398:	00a24109 	adceq	r4, r2, r9, lsl #2
    339c:	07060000 	streq	r0, [r6, -r0]
    33a0:	00000220 	andeq	r0, r0, r0, lsr #4
    33a4:	00a24409 	adceq	r4, r2, r9, lsl #8
    33a8:	07080000 	streq	r0, [r8, -r0]
    33ac:	000003c3 	andeq	r0, r0, r3, asr #7
    33b0:	00a24b09 	adceq	r4, r2, r9, lsl #22
    33b4:	070a0000 	streq	r0, [sl, -r0]
    33b8:	00000396 	muleq	r0, r6, r3
    33bc:	00a24e09 	adceq	r4, r2, r9, lsl #28
    33c0:	000c0000 	andeq	r0, ip, r0
    33c4:	00034f03 	andeq	r4, r3, r3, lsl #30
    33c8:	67510900 	ldrbvs	r0, [r1, -r0, lsl #18]
    33cc:	16000005 	strne	r0, [r0], -r5
    33d0:	00370107 	eorseq	r0, r7, r7, lsl #2
    33d4:	420a0000 	andmi	r0, sl, #0
    33d8:	000005e9 	andeq	r0, r0, r9, ror #11
    33dc:	000db30d 	andeq	fp, sp, sp, lsl #6
    33e0:	5a0d0000 	bpl	3433e8 <startup-0x1fcbcc18>
    33e4:	0100000c 	tsteq	r0, ip
    33e8:	0009280d 	andeq	r2, r9, sp, lsl #16
    33ec:	640d0200 	strvs	r0, [sp], #-512	; 0xfffffe00
    33f0:	03000009 	movweq	r0, #9
    33f4:	124f0300 	subne	r0, pc, #0, 6
    33f8:	470a0000 	strmi	r0, [sl, -r0]
    33fc:	000005c3 	andeq	r0, r0, r3, asr #11
    3400:	37010716 	smladcc	r1, r6, r7, r0
    3404:	0a000000 	beq	340c <startup-0x1fffcbf4>
    3408:	00060e4f 	andeq	r0, r6, pc, asr #28
    340c:	0aa30d00 	beq	fe8c6814 <_global_impure_ptr+0xde8c17f0>
    3410:	0d000000 	stceq	0, cr0, [r0, #-0]
    3414:	00000a25 	andeq	r0, r0, r5, lsr #20
    3418:	cb030001 	blgt	c3424 <startup-0x1ff3cbdc>
    341c:	0a000007 	beq	3440 <startup-0x1fffcbc0>
    3420:	0005f452 	andeq	pc, r5, r2, asr r4	; <UNPREDICTABLE>
    3424:	01071600 	tsteq	r7, r0, lsl #12
    3428:	00000037 	andeq	r0, r0, r7, lsr r0
    342c:	063f5a0a 	ldrteq	r5, [pc], -sl, lsl #20
    3430:	690d0000 	stmdbvs	sp, {}	; <UNPREDICTABLE>
    3434:	0000000b 	andeq	r0, r0, fp
    3438:	000e800d 	andeq	r8, lr, sp
    343c:	0c0d0100 	stfeqs	f0, [sp], {-0}
    3440:	02000016 	andeq	r0, r0, #22
    3444:	000f240d 	andeq	r2, pc, sp, lsl #8
    3448:	03000300 	movweq	r0, #768	; 0x300
    344c:	00001316 	andeq	r1, r0, r6, lsl r3
    3450:	06195f0a 	ldreq	r5, [r9], -sl, lsl #30
    3454:	07160000 	ldreq	r0, [r6, -r0]
    3458:	00003701 	andeq	r3, r0, r1, lsl #14
    345c:	6a6e0a00 	bvs	1b85c64 <startup-0x1e47a39c>
    3460:	0d000006 	stceq	0, cr0, [r0, #-24]	; 0xffffffe8
    3464:	0000075c 	andeq	r0, r0, ip, asr r7
    3468:	14e00d00 	strbtne	r0, [r0], #3328	; 0xd00
    346c:	0d010000 	stceq	0, cr0, [r1, #-0]
    3470:	000008ac 	andeq	r0, r0, ip, lsr #17
    3474:	03030002 	movweq	r0, #12290	; 0x3002
    3478:	0a00000b 	beq	34ac <startup-0x1fffcb54>
    347c:	00064a72 	andeq	r4, r6, r2, ror sl
    3480:	0a080600 	beq	204c88 <startup-0x1fdfb378>
    3484:	0006ba84 	andeq	fp, r6, r4, lsl #21
    3488:	133a0700 	teqne	sl, #0, 14
    348c:	860a0000 	strhi	r0, [sl], -r0
    3490:	000000c2 	andeq	r0, r0, r2, asr #1
    3494:	120d0700 	andne	r0, sp, #0, 14
    3498:	890a0000 	stmdbhi	sl, {}	; <UNPREDICTABLE>
    349c:	000005e9 	andeq	r0, r0, r9, ror #11
    34a0:	0ff00704 	svceq	0x00f00704
    34a4:	8c0a0000 	stchi	0, cr0, [sl], {-0}
    34a8:	0000063f 	andeq	r0, r0, pc, lsr r6
    34ac:	0e640705 	cdpeq	7, 6, cr0, cr4, cr5, {0}
    34b0:	8f0a0000 	svchi	0x000a0000
    34b4:	0000060e 	andeq	r0, r0, lr, lsl #12
    34b8:	13670706 	cmnne	r7, #1572864	; 0x180000
    34bc:	920a0000 	andls	r0, sl, #0
    34c0:	0000066a 	andeq	r0, r0, sl, ror #12
    34c4:	33030007 	movwcc	r0, #12295	; 0x3007
    34c8:	0a00000a 	beq	34f8 <startup-0x1fffcb08>
    34cc:	00067594 	muleq	r6, r4, r5
    34d0:	1db60300 	ldcne	3, cr0, [r6]
    34d4:	220b0000 	andcs	r0, fp, #0
    34d8:	000006d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    34dc:	06d60417 			; <UNDEFINED> instruction: 0x06d60417
    34e0:	17180000 	ldrne	r0, [r8, -r0]
    34e4:	0300001b 	movweq	r0, #27
    34e8:	00001ddd 	ldrdeq	r1, [r0], -sp
    34ec:	00622c0c 	rsbeq	r2, r2, ip, lsl #24
    34f0:	aa030000 	bge	c34f8 <startup-0x1ff3cb08>
    34f4:	0c00001c 	stceq	0, cr0, [r0], {28}
    34f8:	00006272 	andeq	r6, r0, r2, ror r2
    34fc:	1d521200 	lfmne	f1, 2, [r2, #-0]
    3500:	650d0000 	strvs	r0, [sp, #-0]
    3504:	00009001 	andeq	r9, r0, r1
    3508:	0c041900 			; <UNDEFINED> instruction: 0x0c041900
    350c:	00071ca6 	andeq	r1, r7, r6, lsr #25
    3510:	1a3c1a00 	bne	f09d18 <startup-0x1f0f62e8>
    3514:	a80c0000 	stmdage	ip, {}	; <UNPREDICTABLE>
    3518:	000006f1 	strdeq	r0, [r0], -r1
    351c:	001cb21a 	andseq	fp, ip, sl, lsl r2
    3520:	1ca90c00 	stcne	12, cr0, [r9]
    3524:	00000007 	andeq	r0, r0, r7
    3528:	00003709 	andeq	r3, r0, r9, lsl #14
    352c:	00072c00 	andeq	r2, r7, r0, lsl #24
    3530:	00900a00 	addseq	r0, r0, r0, lsl #20
    3534:	00030000 	andeq	r0, r3, r0
    3538:	a30c0806 	movwge	r0, #51206	; 0xc806
    353c:	0000074d 	andeq	r0, r0, sp, asr #14
    3540:	001c7507 	andseq	r7, ip, r7, lsl #10
    3544:	89a50c00 	stmibhi	r5!, {sl, fp}
    3548:	00000000 	andeq	r0, r0, r0
    354c:	00199007 	andseq	r9, r9, r7
    3550:	fdaa0c00 	stc2	12, cr0, [sl]
    3554:	04000006 	streq	r0, [r0], #-6
    3558:	1d420300 	stclne	3, cr0, [r2, #-0]
    355c:	ab0c0000 	blge	303564 <startup-0x1fcfca9c>
    3560:	0000072c 	andeq	r0, r0, ip, lsr #14
    3564:	001d2103 	andseq	r2, sp, r3, lsl #2
    3568:	c5af0c00 	strgt	r0, [pc, #3072]!	; 4170 <startup-0x1fffbe90>
    356c:	1b000006 	blne	358c <startup-0x1fffca74>
    3570:	6b041704 	blvs	109188 <startup-0x1fef6e78>
    3574:	02000007 	andeq	r0, r0, #7
    3578:	024c0801 	subeq	r0, ip, #65536	; 0x10000
    357c:	6b1c0000 	blvs	703584 <startup-0x1f8fca7c>
    3580:	03000007 	movweq	r0, #7
    3584:	00001dcd 	andeq	r1, r0, sp, asr #27
    3588:	0074160e 	rsbseq	r1, r4, lr, lsl #12
    358c:	711d0000 	tstvc	sp, r0
    3590:	1800001b 	stmdane	r0, {r0, r1, r3, r4}
    3594:	07d52f0e 	ldrbeq	r2, [r5, lr, lsl #30]
    3598:	60070000 	andvs	r0, r7, r0
    359c:	0e00001c 	mcreq	0, 0, r0, cr0, cr12, {0}
    35a0:	0007d531 	andeq	sp, r7, r1, lsr r5
    35a4:	5f080000 	svcpl	0x00080000
    35a8:	320e006b 	andcc	r0, lr, #107	; 0x6b
    35ac:	00000089 	andeq	r0, r0, r9, lsl #1
    35b0:	1b790704 	blne	1e451c8 <startup-0x1e1bae38>
    35b4:	320e0000 	andcc	r0, lr, #0
    35b8:	00000089 	andeq	r0, r0, r9, lsl #1
    35bc:	1bf60708 	blne	ffd851e4 <_global_impure_ptr+0xdfd801c0>
    35c0:	320e0000 	andcc	r0, lr, #0
    35c4:	00000089 	andeq	r0, r0, r9, lsl #1
    35c8:	1b12070c 	blne	485200 <startup-0x1fb7ae00>
    35cc:	320e0000 	andcc	r0, lr, #0
    35d0:	00000089 	andeq	r0, r0, r9, lsl #1
    35d4:	785f0810 	ldmdavc	pc, {r4, fp}^	; <UNPREDICTABLE>
    35d8:	db330e00 	blle	cc6de0 <startup-0x1f339220>
    35dc:	14000007 	strne	r0, [r0], #-7
    35e0:	82041700 	andhi	r1, r4, #0, 14
    35e4:	09000007 	stmdbeq	r0, {r0, r1, r2}
    35e8:	00000777 	andeq	r0, r0, r7, ror r7
    35ec:	000007eb 	andeq	r0, r0, fp, ror #15
    35f0:	0000900a 	andeq	r9, r0, sl
    35f4:	1d000000 	stcne	0, cr0, [r0, #-0]
    35f8:	000019cb 	andeq	r1, r0, fp, asr #19
    35fc:	64370e24 	ldrtvs	r0, [r7], #-3620	; 0xfffff1dc
    3600:	07000008 	streq	r0, [r0, -r8]
    3604:	000019e7 	andeq	r1, r0, r7, ror #19
    3608:	0089390e 	addeq	r3, r9, lr, lsl #18
    360c:	07000000 	streq	r0, [r0, -r0]
    3610:	00001e42 	andeq	r1, r0, r2, asr #28
    3614:	00893a0e 	addeq	r3, r9, lr, lsl #20
    3618:	07040000 	streq	r0, [r4, -r0]
    361c:	00001de9 	andeq	r1, r0, r9, ror #27
    3620:	00893b0e 	addeq	r3, r9, lr, lsl #22
    3624:	07080000 	streq	r0, [r8, -r0]
    3628:	00001c27 	andeq	r1, r0, r7, lsr #24
    362c:	00893c0e 	addeq	r3, r9, lr, lsl #24
    3630:	070c0000 	streq	r0, [ip, -r0]
    3634:	00001a8a 	andeq	r1, r0, sl, lsl #21
    3638:	00893d0e 	addeq	r3, r9, lr, lsl #26
    363c:	07100000 	ldreq	r0, [r0, -r0]
    3640:	00001d8a 	andeq	r1, r0, sl, lsl #27
    3644:	00893e0e 	addeq	r3, r9, lr, lsl #28
    3648:	07140000 	ldreq	r0, [r4, -r0]
    364c:	00001df3 	strdeq	r1, [r0], -r3
    3650:	00893f0e 	addeq	r3, r9, lr, lsl #30
    3654:	07180000 	ldreq	r0, [r8, -r0]
    3658:	00001c8d 	andeq	r1, r0, sp, lsl #25
    365c:	0089400e 	addeq	r4, r9, lr
    3660:	071c0000 	ldreq	r0, [ip, -r0]
    3664:	00001e1e 	andeq	r1, r0, lr, lsl lr
    3668:	0089410e 	addeq	r4, r9, lr, lsl #2
    366c:	00200000 	eoreq	r0, r0, r0
    3670:	001a481e 	andseq	r4, sl, lr, lsl r8
    3674:	0e010800 	cdpeq	8, 0, cr0, cr1, cr0, {0}
    3678:	0008a44a 	andeq	sl, r8, sl, asr #8
    367c:	1e160700 	cdpne	7, 1, cr0, cr6, cr0, {0}
    3680:	4b0e0000 	blmi	383688 <startup-0x1fc7c978>
    3684:	000008a4 	andeq	r0, r0, r4, lsr #17
    3688:	1cc70700 	stclne	7, cr0, [r7], {0}
    368c:	4c0e0000 	stcmi	0, cr0, [lr], {-0}
    3690:	000008a4 	andeq	r0, r0, r4, lsr #17
    3694:	1d811f80 	stcne	15, cr1, [r1, #512]	; 0x200
    3698:	4e0e0000 	cdpmi	0, 0, cr0, cr14, cr0, {0}
    369c:	00000777 	andeq	r0, r0, r7, ror r7
    36a0:	ae1f0100 	mufgee	f0, f7, f0
    36a4:	0e00001d 	mcreq	0, 0, r0, cr0, cr13, {0}
    36a8:	00077751 	andeq	r7, r7, r1, asr r7
    36ac:	00010400 	andeq	r0, r1, r0, lsl #8
    36b0:	00076309 	andeq	r6, r7, r9, lsl #6
    36b4:	0008b400 	andeq	fp, r8, r0, lsl #8
    36b8:	00900a00 	addseq	r0, r0, r0, lsl #20
    36bc:	001f0000 	andseq	r0, pc, r0
    36c0:	001c6d1e 	andseq	r6, ip, lr, lsl sp
    36c4:	0e019000 	cdpeq	0, 0, cr9, cr1, cr0, {0}
    36c8:	0008f25d 	andeq	pc, r8, sp, asr r2	; <UNPREDICTABLE>
    36cc:	1c600700 	stclne	7, cr0, [r0], #-0
    36d0:	5e0e0000 	cdppl	0, 0, cr0, cr14, cr0, {0}
    36d4:	000008f2 	strdeq	r0, [r0], -r2
    36d8:	1da20700 	stcne	7, cr0, [r2]
    36dc:	5f0e0000 	svcpl	0x000e0000
    36e0:	00000089 	andeq	r0, r0, r9, lsl #1
    36e4:	1af50704 	bne	ffd452fc <_global_impure_ptr+0xdfd402d8>
    36e8:	610e0000 	mrsvs	r0, (UNDEF: 14)
    36ec:	000008f8 	strdeq	r0, [r0], -r8
    36f0:	1a480708 	bne	1205318 <startup-0x1edface8>
    36f4:	620e0000 	andvs	r0, lr, #0
    36f8:	00000864 	andeq	r0, r0, r4, ror #16
    36fc:	04170088 	ldreq	r0, [r7], #-136	; 0xffffff78
    3700:	000008b4 			; <UNDEFINED> instruction: 0x000008b4
    3704:	00090809 	andeq	r0, r9, r9, lsl #16
    3708:	00090800 	andeq	r0, r9, r0, lsl #16
    370c:	00900a00 	addseq	r0, r0, r0, lsl #20
    3710:	001f0000 	andseq	r0, pc, r0
    3714:	090e0417 	stmdbeq	lr, {r0, r1, r2, r4, sl}
    3718:	1d200000 	stcne	0, cr0, [r0, #-0]
    371c:	00001da7 	andeq	r1, r0, r7, lsr #27
    3720:	34750e08 	ldrbtcc	r0, [r5], #-3592	; 0xfffff1f8
    3724:	07000009 	streq	r0, [r0, -r9]
    3728:	00001cff 	strdeq	r1, [r0], -pc	; <UNPREDICTABLE>
    372c:	0934760e 	ldmdbeq	r4!, {r1, r2, r3, r9, sl, ip, sp, lr}
    3730:	07000000 	streq	r0, [r0, -r0]
    3734:	00001a75 	andeq	r1, r0, r5, ror sl
    3738:	0089770e 	addeq	r7, r9, lr, lsl #14
    373c:	00040000 	andeq	r0, r4, r0
    3740:	00370417 	eorseq	r0, r7, r7, lsl r4
    3744:	3e1d0000 	cdpcc	0, 1, cr0, cr13, cr0, {0}
    3748:	6800001b 	stmdavs	r0, {r0, r1, r3, r4}
    374c:	0a64b50e 	beq	1930b8c <startup-0x1e6cf474>
    3750:	5f080000 	svcpl	0x00080000
    3754:	b60e0070 			; <UNDEFINED> instruction: 0xb60e0070
    3758:	00000934 	andeq	r0, r0, r4, lsr r9
    375c:	725f0800 	subsvc	r0, pc, #0, 16
    3760:	89b70e00 	ldmibhi	r7!, {r9, sl, fp}
    3764:	04000000 	streq	r0, [r0], #-0
    3768:	00775f08 	rsbseq	r5, r7, r8, lsl #30
    376c:	0089b80e 	addeq	fp, r9, lr, lsl #16
    3770:	07080000 	streq	r0, [r8, -r0]
    3774:	00001c66 	andeq	r1, r0, r6, ror #24
    3778:	003eb90e 	eorseq	fp, lr, lr, lsl #18
    377c:	070c0000 	streq	r0, [ip, -r0]
    3780:	00001a42 	andeq	r1, r0, r2, asr #20
    3784:	003eba0e 	eorseq	fp, lr, lr, lsl #20
    3788:	080e0000 	stmdaeq	lr, {}	; <UNPREDICTABLE>
    378c:	0066625f 	rsbeq	r6, r6, pc, asr r2
    3790:	090fbb0e 	stmdbeq	pc, {r1, r2, r3, r8, r9, fp, ip, sp, pc}	; <UNPREDICTABLE>
    3794:	07100000 	ldreq	r0, [r0, -r0]
    3798:	00001d94 	muleq	r0, r4, sp
    379c:	0089bc0e 	addeq	fp, r9, lr, lsl #24
    37a0:	07180000 	ldreq	r0, [r8, -r0]
    37a4:	00001b0a 	andeq	r1, r0, sl, lsl #22
    37a8:	0763c30e 	strbeq	ip, [r3, -lr, lsl #6]!
    37ac:	071c0000 	ldreq	r0, [ip, -r0]
    37b0:	00000b8f 	andeq	r0, r0, pc, lsl #23
    37b4:	0bbfc50e 	bleq	feff4bf4 <_global_impure_ptr+0xdefefbd0>
    37b8:	07200000 	streq	r0, [r0, -r0]!
    37bc:	000019a7 	andeq	r1, r0, r7, lsr #19
    37c0:	0be9c70e 	bleq	ffa75400 <_global_impure_ptr+0xdfa703dc>
    37c4:	07240000 	streq	r0, [r4, -r0]!
    37c8:	00001ca4 	andeq	r1, r0, r4, lsr #25
    37cc:	0c0dca0e 			; <UNDEFINED> instruction: 0x0c0dca0e
    37d0:	07280000 	streq	r0, [r8, -r0]!
    37d4:	00001c86 	andeq	r1, r0, r6, lsl #25
    37d8:	0c27cb0e 			; <UNDEFINED> instruction: 0x0c27cb0e
    37dc:	082c0000 	stmdaeq	ip!, {}	; <UNPREDICTABLE>
    37e0:	0062755f 	rsbeq	r7, r2, pc, asr r5
    37e4:	090fce0e 	stmdbeq	pc, {r1, r2, r3, r9, sl, fp, lr, pc}	; <UNPREDICTABLE>
    37e8:	08300000 	ldmdaeq	r0!, {}	; <UNPREDICTABLE>
    37ec:	0070755f 	rsbseq	r7, r0, pc, asr r5
    37f0:	0934cf0e 	ldmdbeq	r4!, {r1, r2, r3, r8, r9, sl, fp, lr, pc}
    37f4:	08380000 	ldmdaeq	r8!, {}	; <UNPREDICTABLE>
    37f8:	0072755f 	rsbseq	r7, r2, pc, asr r5
    37fc:	0089d00e 	addeq	sp, r9, lr
    3800:	073c0000 	ldreq	r0, [ip, -r0]!
    3804:	00001c36 	andeq	r1, r0, r6, lsr ip
    3808:	0c2dd30e 	stceq	3, cr13, [sp], #-56	; 0xffffffc8
    380c:	07400000 	strbeq	r0, [r0, -r0]
    3810:	000019e1 	andeq	r1, r0, r1, ror #19
    3814:	0c3dd40e 	cfldrseq	mvf13, [sp], #-56	; 0xffffffc8
    3818:	08430000 	stmdaeq	r3, {}^	; <UNPREDICTABLE>
    381c:	00626c5f 	rsbeq	r6, r2, pc, asr ip
    3820:	090fd70e 	stmdbeq	pc, {r1, r2, r3, r8, r9, sl, ip, lr, pc}	; <UNPREDICTABLE>
    3824:	07440000 	strbeq	r0, [r4, -r0]
    3828:	00001ce3 	andeq	r1, r0, r3, ror #25
    382c:	0089da0e 	addeq	sp, r9, lr, lsl #20
    3830:	074c0000 	strbeq	r0, [ip, -r0]
    3834:	00001e0e 	andeq	r1, r0, lr, lsl #28
    3838:	06dbdb0e 	ldrbeq	sp, [fp], lr, lsl #22
    383c:	07500000 	ldrbeq	r0, [r0, -r0]
    3840:	00001d61 	andeq	r1, r0, r1, ror #26
    3844:	0a82de0e 	beq	fe0bb084 <_global_impure_ptr+0xde0b6060>
    3848:	07540000 	ldrbeq	r0, [r4, -r0]
    384c:	00001b18 	andeq	r1, r0, r8, lsl fp
    3850:	0758e20e 	ldrbeq	lr, [r8, -lr, lsl #4]
    3854:	07580000 	ldrbeq	r0, [r8, -r0]
    3858:	00001c52 	andeq	r1, r0, r2, asr ip
    385c:	074de40e 	strbeq	lr, [sp, -lr, lsl #8]
    3860:	075c0000 	ldrbeq	r0, [ip, -r0]
    3864:	00001b51 	andeq	r1, r0, r1, asr fp
    3868:	0089e50e 	addeq	lr, r9, lr, lsl #10
    386c:	00640000 	rsbeq	r0, r4, r0
    3870:	00008921 	andeq	r8, r0, r1, lsr #18
    3874:	000a8200 	andeq	r8, sl, r0, lsl #4
    3878:	0a822200 	beq	fe08c080 <_global_impure_ptr+0xde08705c>
    387c:	63220000 			; <UNDEFINED> instruction: 0x63220000
    3880:	22000007 	andcs	r0, r0, #7
    3884:	00000765 	andeq	r0, r0, r5, ror #14
    3888:	00008922 	andeq	r8, r0, r2, lsr #18
    388c:	04170000 	ldreq	r0, [r7], #-0
    3890:	00000a8d 	andeq	r0, r0, sp, lsl #21
    3894:	000a821c 	andeq	r8, sl, ip, lsl r2
    3898:	1adb2300 	bne	ff6cc4a0 <_global_impure_ptr+0xdf6c747c>
    389c:	04280000 	strteq	r0, [r8], #-0
    38a0:	bf02390e 	svclt	0x0002390e
    38a4:	1400000b 	strne	r0, [r0], #-11
    38a8:	00001c11 	andeq	r1, r0, r1, lsl ip
    38ac:	89023b0e 	stmdbhi	r2, {r1, r2, r3, r8, r9, fp, ip, sp}
    38b0:	00000000 	andeq	r0, r0, r0
    38b4:	001afa14 	andseq	pc, sl, r4, lsl sl	; <UNPREDICTABLE>
    38b8:	02400e00 	subeq	r0, r0, #0, 28
    38bc:	00000c94 	muleq	r0, r4, ip
    38c0:	1cdb1404 	cfldrdne	mvd1, [fp], {4}
    38c4:	400e0000 	andmi	r0, lr, r0
    38c8:	000c9402 	andeq	r9, ip, r2, lsl #8
    38cc:	3c140800 	ldccc	8, cr0, [r4], {-0}
    38d0:	0e00001c 	mcreq	0, 0, r0, cr0, cr12, {0}
    38d4:	0c940240 	lfmeq	f0, 4, [r4], {64}	; 0x40
    38d8:	140c0000 	strne	r0, [ip], #-0
    38dc:	00001d9d 	muleq	r0, sp, sp
    38e0:	8902420e 	stmdbhi	r2, {r1, r2, r3, r9, lr}
    38e4:	10000000 	andne	r0, r0, r0
    38e8:	001b8a14 	andseq	r8, fp, r4, lsl sl
    38ec:	02430e00 	subeq	r0, r3, #0, 28
    38f0:	00000e76 	andeq	r0, r0, r6, ror lr
    38f4:	1ac21414 	bne	ff08894c <_global_impure_ptr+0xdf083928>
    38f8:	460e0000 	strmi	r0, [lr], -r0
    38fc:	00008902 	andeq	r8, r0, r2, lsl #18
    3900:	c5143000 	ldrgt	r3, [r4, #-0]
    3904:	0e00001d 	mcreq	0, 0, r0, cr0, cr13, {0}
    3908:	0e8b0247 	cdpeq	2, 8, cr0, cr11, cr7, {2}
    390c:	14340000 	ldrtne	r0, [r4], #-0
    3910:	00001b46 	andeq	r1, r0, r6, asr #22
    3914:	8902490e 	stmdbhi	r2, {r1, r2, r3, r8, fp, lr}
    3918:	38000000 	stmdacc	r0, {}	; <UNPREDICTABLE>
    391c:	00199d14 	andseq	r9, r9, r4, lsl sp
    3920:	024b0e00 	subeq	r0, fp, #0, 28
    3924:	00000e9c 	muleq	r0, ip, lr
    3928:	1dd5143c 	cfldrdne	mvd1, [r5, #240]	; 0xf0
    392c:	4e0e0000 	cdpmi	0, 0, cr0, cr14, cr0, {0}
    3930:	0007d502 	andeq	sp, r7, r2, lsl #10
    3934:	64144000 	ldrvs	r4, [r4], #-0
    3938:	0e00001a 	mcreq	0, 0, r0, cr0, cr10, {0}
    393c:	0089024f 	addeq	r0, r9, pc, asr #4
    3940:	14440000 	strbne	r0, [r4], #-0
    3944:	00001b39 	andeq	r1, r0, r9, lsr fp
    3948:	d502500e 	strle	r5, [r2, #-14]
    394c:	48000007 	stmdami	r0, {r0, r1, r2}
    3950:	001be014 	andseq	lr, fp, r4, lsl r0
    3954:	02510e00 	subseq	r0, r1, #0, 28
    3958:	00000ea2 	andeq	r0, r0, r2, lsr #29
    395c:	19bb144c 	ldmibne	fp!, {r2, r3, r6, sl, ip}
    3960:	540e0000 	strpl	r0, [lr], #-0
    3964:	00008902 	andeq	r8, r0, r2, lsl #18
    3968:	28145000 	ldmdacs	r4, {ip, lr}
    396c:	0e00001b 	mcreq	0, 0, r0, cr0, cr11, {0}
    3970:	07650255 			; <UNDEFINED> instruction: 0x07650255
    3974:	14540000 	ldrbne	r0, [r4], #-0
    3978:	00001c31 	andeq	r1, r0, r1, lsr ip
    397c:	5402780e 	strpl	r7, [r2], #-2062	; 0xfffff7f2
    3980:	5800000e 	stmdapl	r0, {r1, r2, r3}
    3984:	001c6d24 	andseq	r6, ip, r4, lsr #26
    3988:	027c0e00 	rsbseq	r0, ip, #0, 28
    398c:	000008f2 	strdeq	r0, [r0], -r2
    3990:	81240148 			; <UNDEFINED> instruction: 0x81240148
    3994:	0e00001b 	mcreq	0, 0, r0, cr0, cr11, {0}
    3998:	08b4027d 	ldmeq	r4!, {r0, r2, r3, r4, r5, r6, r9}
    399c:	014c0000 	mrseq	r0, (UNDEF: 76)
    39a0:	001b1e24 	andseq	r1, fp, r4, lsr #28
    39a4:	02810e00 	addeq	r0, r1, #0, 28
    39a8:	00000eb3 			; <UNDEFINED> instruction: 0x00000eb3
    39ac:	ae2402dc 	mcrge	2, 1, r0, cr4, cr12, {6}
    39b0:	0e00001b 	mcreq	0, 0, r0, cr0, cr11, {0}
    39b4:	0c590286 	lfmeq	f0, 2, [r9], {134}	; 0x86
    39b8:	02e00000 	rsceq	r0, r0, #0
    39bc:	00199824 	andseq	r9, r9, r4, lsr #16
    39c0:	02880e00 	addeq	r0, r8, #0, 28
    39c4:	00000ebf 			; <UNDEFINED> instruction: 0x00000ebf
    39c8:	170002ec 	strne	r0, [r0, -ip, ror #5]
    39cc:	000a6404 	andeq	r6, sl, r4, lsl #8
    39d0:	00892100 	addeq	r2, r9, r0, lsl #2
    39d4:	0be30000 	bleq	ff8c39dc <_global_impure_ptr+0xdf8be9b8>
    39d8:	82220000 	eorhi	r0, r2, #0
    39dc:	2200000a 	andcs	r0, r0, #10
    39e0:	00000763 	andeq	r0, r0, r3, ror #14
    39e4:	000be322 	andeq	lr, fp, r2, lsr #6
    39e8:	00892200 	addeq	r2, r9, r0, lsl #4
    39ec:	17000000 	strne	r0, [r0, -r0]
    39f0:	00077204 	andeq	r7, r7, r4, lsl #4
    39f4:	c5041700 	strgt	r1, [r4, #-1792]	; 0xfffff900
    39f8:	2100000b 	tstcs	r0, fp
    39fc:	000006e6 	andeq	r0, r0, r6, ror #13
    3a00:	00000c0d 	andeq	r0, r0, sp, lsl #24
    3a04:	000a8222 	andeq	r8, sl, r2, lsr #4
    3a08:	07632200 	strbeq	r2, [r3, -r0, lsl #4]!
    3a0c:	e6220000 	strt	r0, [r2], -r0
    3a10:	22000006 	andcs	r0, r0, #6
    3a14:	00000089 	andeq	r0, r0, r9, lsl #1
    3a18:	ef041700 	svc	0x00041700
    3a1c:	2100000b 	tstcs	r0, fp
    3a20:	00000089 	andeq	r0, r0, r9, lsl #1
    3a24:	00000c27 	andeq	r0, r0, r7, lsr #24
    3a28:	000a8222 	andeq	r8, sl, r2, lsr #4
    3a2c:	07632200 	strbeq	r2, [r3, -r0, lsl #4]!
    3a30:	17000000 	strne	r0, [r0, -r0]
    3a34:	000c1304 	andeq	r1, ip, r4, lsl #6
    3a38:	00370900 	eorseq	r0, r7, r0, lsl #18
    3a3c:	0c3d0000 	ldceq	0, cr0, [sp], #-0
    3a40:	900a0000 	andls	r0, sl, r0
    3a44:	02000000 	andeq	r0, r0, #0
    3a48:	00370900 	eorseq	r0, r7, r0, lsl #18
    3a4c:	0c4d0000 	mareq	acc0, r0, sp
    3a50:	900a0000 	andls	r0, sl, r0
    3a54:	00000000 	andeq	r0, r0, r0
    3a58:	1d3b1200 	lfmne	f1, 4, [fp, #-0]
    3a5c:	1f0e0000 	svcne	0x000e0000
    3a60:	00093a01 	andeq	r3, r9, r1, lsl #20
    3a64:	1bf02500 	blne	ffc0ce6c <_global_impure_ptr+0xdfc07e48>
    3a68:	0e0c0000 	cdpeq	0, 0, cr0, cr12, cr0, {0}
    3a6c:	0c8e0123 	stfeqs	f0, [lr], {35}	; 0x23
    3a70:	60140000 	andsvs	r0, r4, r0
    3a74:	0e00001c 	mcreq	0, 0, r0, cr0, cr12, {0}
    3a78:	0c8e0125 	stfeqs	f0, [lr], {37}	; 0x25
    3a7c:	14000000 	strne	r0, [r0], #-0
    3a80:	00001b95 	muleq	r0, r5, fp
    3a84:	8901260e 	stmdbhi	r1, {r1, r2, r3, r9, sl, sp}
    3a88:	04000000 	streq	r0, [r0], #-0
    3a8c:	001bea14 	andseq	lr, fp, r4, lsl sl
    3a90:	01270e00 			; <UNDEFINED> instruction: 0x01270e00
    3a94:	00000c94 	muleq	r0, r4, ip
    3a98:	04170008 	ldreq	r0, [r7], #-8
    3a9c:	00000c59 	andeq	r0, r0, r9, asr ip
    3aa0:	0c4d0417 	cfstrdeq	mvd0, [sp], {23}
    3aa4:	d3250000 			; <UNDEFINED> instruction: 0xd3250000
    3aa8:	0e00001c 	mcreq	0, 0, r0, cr0, cr12, {0}
    3aac:	cf013f0e 	svcgt	0x00013f0e
    3ab0:	1400000c 	strne	r0, [r0], #-12
    3ab4:	00001c9e 	muleq	r0, lr, ip
    3ab8:	cf01400e 	svcgt	0x0001400e
    3abc:	0000000c 	andeq	r0, r0, ip
    3ac0:	0019fa14 	andseq	pc, r9, r4, lsl sl	; <UNPREDICTABLE>
    3ac4:	01410e00 	cmpeq	r1, r0, lsl #28
    3ac8:	00000ccf 	andeq	r0, r0, pc, asr #25
    3acc:	1de41406 	cfstrdne	mvd1, [r4, #24]!
    3ad0:	420e0000 	andmi	r0, lr, #0
    3ad4:	00005001 	andeq	r5, r0, r1
    3ad8:	09000c00 	stmdbeq	r0, {sl, fp}
    3adc:	00000050 	andeq	r0, r0, r0, asr r0
    3ae0:	00000cdf 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    3ae4:	0000900a 	andeq	r9, r0, sl
    3ae8:	13000200 	movwne	r0, #512	; 0x200
    3aec:	02590ed0 	subseq	r0, r9, #208, 28	; 0xd00
    3af0:	00000de0 	andeq	r0, r0, r0, ror #27
    3af4:	001aa714 	andseq	sl, sl, r4, lsl r7
    3af8:	025b0e00 	subseq	r0, fp, #0, 28
    3afc:	00000090 	muleq	r0, r0, r0
    3b00:	1d051400 	cfstrsne	mvf1, [r5, #-0]
    3b04:	5c0e0000 	stcpl	0, cr0, [lr], {-0}
    3b08:	00076502 	andeq	r6, r7, r2, lsl #10
    3b0c:	ae140400 	cfmulsge	mvf0, mvf4, mvf0
    3b10:	0e000019 	mcreq	0, 0, r0, cr0, cr9, {0}
    3b14:	0de0025d 	sfmeq	f0, 2, [r0, #372]!	; 0x174
    3b18:	14080000 	strne	r0, [r8], #-0
    3b1c:	00001a7b 	andeq	r1, r0, fp, ror sl
    3b20:	eb025e0e 	bl	9b360 <startup-0x1ff64ca0>
    3b24:	24000007 	strcs	r0, [r0], #-7
    3b28:	001bc614 	andseq	ip, fp, r4, lsl r6
    3b2c:	025f0e00 	subseq	r0, pc, #0, 28
    3b30:	00000089 	andeq	r0, r0, r9, lsl #1
    3b34:	1c5b1448 	cfldrdne	mvd1, [fp], {72}	; 0x48
    3b38:	600e0000 	andvs	r0, lr, r0
    3b3c:	00008202 	andeq	r8, r0, r2, lsl #4
    3b40:	4d145000 	ldcmi	0, cr5, [r4, #-0]
    3b44:	0e00001d 	mcreq	0, 0, r0, cr0, cr13, {0}
    3b48:	0c9a0261 	lfmeq	f0, 4, [sl], {97}	; 0x61
    3b4c:	14580000 	ldrbne	r0, [r8], #-0
    3b50:	00001d67 	andeq	r1, r0, r7, ror #26
    3b54:	4d02620e 	sfmmi	f6, 4, [r2, #-56]	; 0xffffffc8
    3b58:	68000007 	stmdavs	r0, {r0, r1, r2}
    3b5c:	001cb914 	andseq	fp, ip, r4, lsl r9
    3b60:	02630e00 	rsbeq	r0, r3, #0, 28
    3b64:	0000074d 	andeq	r0, r0, sp, asr #14
    3b68:	1c441470 	cfstrdne	mvd1, [r4], {112}	; 0x70
    3b6c:	640e0000 	strvs	r0, [lr], #-0
    3b70:	00074d02 	andeq	r4, r7, r2, lsl #26
    3b74:	f0147800 			; <UNDEFINED> instruction: 0xf0147800
    3b78:	0e000019 	mcreq	0, 0, r0, cr0, cr9, {0}
    3b7c:	0df00265 	lfmeq	f0, 2, [r0, #404]!	; 0x194
    3b80:	14800000 	strne	r0, [r0], #0
    3b84:	00001b65 	andeq	r1, r0, r5, ror #22
    3b88:	0002660e 	andeq	r6, r2, lr, lsl #12
    3b8c:	8800000e 	stmdahi	r0, {r1, r2, r3}
    3b90:	001e4b14 	andseq	r4, lr, r4, lsl fp
    3b94:	02670e00 	rsbeq	r0, r7, #0, 28
    3b98:	00000089 	andeq	r0, r0, r9, lsl #1
    3b9c:	1a5614a0 	bne	1588e24 <startup-0x1ea771dc>
    3ba0:	680e0000 	stmdavs	lr, {}	; <UNPREDICTABLE>
    3ba4:	00074d02 	andeq	r4, r7, r2, lsl #26
    3ba8:	1214a400 	andsne	sl, r4, #0, 8
    3bac:	0e00001d 	mcreq	0, 0, r0, cr0, cr13, {0}
    3bb0:	074d0269 	strbeq	r0, [sp, -r9, ror #4]
    3bb4:	14ac0000 	strtne	r0, [ip], #0
    3bb8:	00001dfd 	strdeq	r1, [r0], -sp
    3bbc:	4d026a0e 	vstrmi	s12, [r2, #-56]	; 0xffffffc8
    3bc0:	b4000007 	strlt	r0, [r0], #-7
    3bc4:	001c1814 	andseq	r1, ip, r4, lsl r8
    3bc8:	026b0e00 	rsbeq	r0, fp, #0, 28
    3bcc:	0000074d 	andeq	r0, r0, sp, asr #14
    3bd0:	19d014bc 	ldmibne	r0, {r2, r3, r4, r5, r7, sl, ip}^
    3bd4:	6c0e0000 	stcvs	0, cr0, [lr], {-0}
    3bd8:	00074d02 	andeq	r4, r7, r2, lsl #26
    3bdc:	0f14c400 	svceq	0x0014c400
    3be0:	0e00001c 	mcreq	0, 0, r0, cr0, cr12, {0}
    3be4:	0089026d 	addeq	r0, r9, sp, ror #4
    3be8:	00cc0000 	sbceq	r0, ip, r0
    3bec:	00076b09 	andeq	r6, r7, r9, lsl #22
    3bf0:	000df000 	andeq	pc, sp, r0
    3bf4:	00900a00 	addseq	r0, r0, r0, lsl #20
    3bf8:	00190000 	andseq	r0, r9, r0
    3bfc:	00076b09 	andeq	r6, r7, r9, lsl #22
    3c00:	000e0000 	andeq	r0, lr, r0
    3c04:	00900a00 	addseq	r0, r0, r0, lsl #20
    3c08:	00070000 	andeq	r0, r7, r0
    3c0c:	00076b09 	andeq	r6, r7, r9, lsl #22
    3c10:	000e1000 	andeq	r1, lr, r0
    3c14:	00900a00 	addseq	r0, r0, r0, lsl #20
    3c18:	00170000 	andseq	r0, r7, r0
    3c1c:	720ef013 	andvc	pc, lr, #19
    3c20:	000e3402 	andeq	r3, lr, r2, lsl #8
    3c24:	1dbe1400 	cfldrsne	mvf1, [lr]
    3c28:	750e0000 	strvc	r0, [lr, #-0]
    3c2c:	000e3402 	andeq	r3, lr, r2, lsl #8
    3c30:	b6140000 	ldrlt	r0, [r4], -r0
    3c34:	0e00001b 	mcreq	0, 0, r0, cr0, cr11, {0}
    3c38:	0e440276 	mcreq	2, 2, r0, cr4, cr6, {3}
    3c3c:	00780000 	rsbseq	r0, r8, r0
    3c40:	00093409 	andeq	r3, r9, r9, lsl #8
    3c44:	000e4400 	andeq	r4, lr, r0, lsl #8
    3c48:	00900a00 	addseq	r0, r0, r0, lsl #20
    3c4c:	001d0000 	andseq	r0, sp, r0
    3c50:	00009009 	andeq	r9, r0, r9
    3c54:	000e5400 	andeq	r5, lr, r0, lsl #8
    3c58:	00900a00 	addseq	r0, r0, r0, lsl #20
    3c5c:	001d0000 	andseq	r0, sp, r0
    3c60:	570ef026 	strpl	pc, [lr, -r6, lsr #32]
    3c64:	000e7602 	andeq	r7, lr, r2, lsl #12
    3c68:	1adb2700 	bne	ff6cd870 <_global_impure_ptr+0xdf6c884c>
    3c6c:	6e0e0000 	cdpvs	0, 0, cr0, cr14, cr0, {0}
    3c70:	000cdf02 	andeq	sp, ip, r2, lsl #30
    3c74:	19c32700 	stmibne	r3, {r8, r9, sl, sp}^
    3c78:	770e0000 	strvc	r0, [lr, -r0]
    3c7c:	000e1002 	andeq	r1, lr, r2
    3c80:	6b090000 	blvs	243c88 <startup-0x1fdbc378>
    3c84:	86000007 	strhi	r0, [r0], -r7
    3c88:	0a00000e 	beq	3cc8 <startup-0x1fffc338>
    3c8c:	00000090 	muleq	r0, r0, r0
    3c90:	85180018 	ldrhi	r0, [r8, #-24]	; 0xffffffe8
    3c94:	17000019 	smladne	r0, r9, r0, r0
    3c98:	000e8604 	andeq	r8, lr, r4, lsl #12
    3c9c:	0e9c2800 	cdpeq	8, 9, cr2, cr12, cr0, {0}
    3ca0:	82220000 	eorhi	r0, r2, #0
    3ca4:	0000000a 	andeq	r0, r0, sl
    3ca8:	0e910417 	mrceq	4, 4, r0, cr1, cr7, {0}
    3cac:	04170000 	ldreq	r0, [r7], #-0
    3cb0:	000007d5 	ldrdeq	r0, [r0], -r5
    3cb4:	000eb328 	andeq	fp, lr, r8, lsr #6
    3cb8:	00892200 	addeq	r2, r9, r0, lsl #4
    3cbc:	17000000 	strne	r0, [r0, -r0]
    3cc0:	000eb904 	andeq	fp, lr, r4, lsl #18
    3cc4:	a8041700 	stmdage	r4, {r8, r9, sl, ip}
    3cc8:	0900000e 	stmdbeq	r0, {r1, r2, r3}
    3ccc:	00000c4d 	andeq	r0, r0, sp, asr #24
    3cd0:	00000ecf 	andeq	r0, r0, pc, asr #29
    3cd4:	0000900a 	andeq	r9, r0, sl
    3cd8:	0e000200 	cdpeq	2, 0, cr0, cr0, cr0, {0}
    3cdc:	00001ae9 	andeq	r1, r0, r9, ror #21
    3ce0:	8203070e 	andhi	r0, r3, #3670016	; 0x380000
    3ce4:	0e00000a 	cdpeq	0, 0, cr0, cr0, cr10, {0}
    3ce8:	00001ae2 	andeq	r1, r0, r2, ror #21
    3cec:	8803080e 	stmdahi	r3, {r1, r2, r3, fp}
    3cf0:	0200000a 	andeq	r0, r0, #10
    3cf4:	1bfc0404 	blne	fff04d0c <_global_impure_ptr+0xdfeffce8>
    3cf8:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    3cfc:	001bbf04 	andseq	fp, fp, r4, lsl #30
    3d00:	197c2900 	ldmdbne	ip!, {r8, fp, sp}^
    3d04:	0e010000 	cdpeq	0, 0, cr0, cr1, cr0, {0}
    3d08:	00000f06 	andeq	r0, r0, r6, lsl #30
    3d0c:	4a2c0305 	bmi	b04928 <startup-0x1f4fb6d8>
    3d10:	04172000 	ldreq	r2, [r7], #-0
    3d14:	0000011a 	andeq	r0, r0, sl, lsl r1
    3d18:	001b3029 	andseq	r3, fp, r9, lsr #32
    3d1c:	060e0100 	streq	r0, [lr], -r0, lsl #2
    3d20:	0500000f 	streq	r0, [r0, #-15]
    3d24:	004a3003 	subeq	r3, sl, r3
    3d28:	1d742920 			; <UNDEFINED> instruction: 0x1d742920
    3d2c:	0e010000 	cdpeq	0, 0, cr0, cr1, cr0, {0}
    3d30:	0000011a 	andeq	r0, r0, sl, lsl r1
    3d34:	4a340305 	bmi	d04950 <startup-0x1f2fb6b0>
    3d38:	02292000 	eoreq	r2, r9, #0
    3d3c:	0100001c 	tsteq	r0, ip, lsl r0
    3d40:	00011a0e 	andeq	r1, r1, lr, lsl #20
    3d44:	9c030500 	cfstr32ls	mvfx0, [r3], {-0}
    3d48:	2a20004a 	bcs	803e78 <startup-0x1f7fc188>
    3d4c:	00001e32 	andeq	r1, r0, r2, lsr lr
    3d50:	0097c201 	addseq	ip, r7, r1, lsl #4
    3d54:	25380000 	ldrcs	r0, [r8, #-0]!
    3d58:	007c2000 	rsbseq	r2, ip, r0
    3d5c:	9c010000 	stcls	0, cr0, [r1], {-0}
    3d60:	00000f67 	andeq	r0, r0, r7, ror #30
    3d64:	001e582b 	andseq	r5, lr, fp, lsr #16
    3d68:	97c20100 	strbls	r0, [r2, r0, lsl #2]
    3d6c:	02000000 	andeq	r0, r0, #0
    3d70:	2a007791 	bcs	21bbc <startup-0x1ffde444>
    3d74:	00001d2a 	andeq	r1, r0, sl, lsr #26
    3d78:	0097af01 	addseq	sl, r7, r1, lsl #30
    3d7c:	25100000 	ldrcs	r0, [r0, #-0]
    3d80:	00282000 	eoreq	r2, r8, r0
    3d84:	9c010000 	stcls	0, cr0, [r1], {-0}
    3d88:	00000f8f 	andeq	r0, r0, pc, lsl #31
    3d8c:	001d592b 	andseq	r5, sp, fp, lsr #18
    3d90:	97af0100 	strls	r0, [pc, r0, lsl #2]!
    3d94:	02000000 	andeq	r0, r0, #0
    3d98:	2c007791 	stccs	7, cr7, [r0], {145}	; 0x91
    3d9c:	00001c7d 	andeq	r1, r0, sp, ror ip
    3da0:	0097a901 	addseq	sl, r7, r1, lsl #18
    3da4:	24ea0000 	strbtcs	r0, [sl], #0
    3da8:	00262000 	eoreq	r2, r6, r0
    3dac:	9c010000 	stcls	0, cr0, [r1], {-0}
    3db0:	00000fb7 			; <UNDEFINED> instruction: 0x00000fb7
    3db4:	00067b2b 	andeq	r7, r6, fp, lsr #22
    3db8:	b7a90100 	strlt	r0, [r9, r0, lsl #2]!
    3dbc:	0200000f 	andeq	r0, r0, #15
    3dc0:	17007491 			; <UNDEFINED> instruction: 0x17007491
    3dc4:	00009704 	andeq	r9, r0, r4, lsl #14
    3dc8:	1ab42c00 	bne	fed0edd0 <_global_impure_ptr+0xded09dac>
    3dcc:	91010000 	mrsls	r0, (UNDEF: 1)
    3dd0:	00000097 	muleq	r0, r7, r0
    3dd4:	20002406 	andcs	r2, r0, r6, lsl #8
    3dd8:	000000e4 	andeq	r0, r0, r4, ror #1
    3ddc:	10319c01 	eorsne	r9, r1, r1, lsl #24
    3de0:	6e2d0000 	cdpvs	0, 2, cr0, cr13, cr0, {0}
    3de4:	01006d75 	tsteq	r0, r5, ror sp
    3de8:	0000c291 	muleq	r0, r1, r2
    3dec:	5c910200 	lfmpl	f0, 4, [r1], {0}
    3df0:	001a6e29 	andseq	r6, sl, r9, lsr #28
    3df4:	97930100 	ldrls	r0, [r3, r0, lsl #2]
    3df8:	02000000 	andeq	r0, r0, #0
    3dfc:	01296d91 			; <UNDEFINED> instruction: 0x01296d91
    3e00:	0100001b 	tsteq	r0, fp, lsl r0
    3e04:	00103193 	mulseq	r0, r3, r1
    3e08:	60910200 	addsvs	r0, r1, r0, lsl #4
    3e0c:	00244c2e 	eoreq	r4, r4, lr, lsr #24
    3e10:	00005420 	andeq	r5, r0, r0, lsr #8
    3e14:	00101a00 	andseq	r1, r0, r0, lsl #20
    3e18:	00692f00 	rsbeq	r2, r9, r0, lsl #30
    3e1c:	00979701 	addseq	r9, r7, r1, lsl #14
    3e20:	91020000 	mrsls	r0, (UNDEF: 2)
    3e24:	a030006f 	eorsge	r0, r0, pc, rrx
    3e28:	40200024 	eormi	r0, r0, r4, lsr #32
    3e2c:	2f000000 	svccs	0x00000000
    3e30:	9d010069 	stcls	0, cr0, [r1, #-420]	; 0xfffffe5c
    3e34:	00000097 	muleq	r0, r7, r0
    3e38:	006e9102 	rsbeq	r9, lr, r2, lsl #2
    3e3c:	00970900 	addseq	r0, r7, r0, lsl #18
    3e40:	10410000 	subne	r0, r1, r0
    3e44:	900a0000 	andls	r0, sl, r0
    3e48:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    3e4c:	1bd52c00 	blne	ff54ee54 <_global_impure_ptr+0xdf549e30>
    3e50:	81010000 	mrshi	r0, (UNDEF: 1)
    3e54:	00000097 	muleq	r0, r7, r0
    3e58:	200023cc 	andcs	r2, r0, ip, asr #7
    3e5c:	0000003a 	andeq	r0, r0, sl, lsr r0
    3e60:	10699c01 	rsbne	r9, r9, r1, lsl #24
    3e64:	e52b0000 	str	r0, [fp, #-0]!
    3e68:	0100001b 	tsteq	r0, fp, lsl r0
    3e6c:	000fb781 	andeq	fp, pc, r1, lsl #15
    3e70:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    3e74:	1e292c00 	cdpne	12, 2, cr2, cr9, cr0, {0}
    3e78:	73010000 	movwvc	r0, #4096	; 0x1000
    3e7c:	00000097 	muleq	r0, r7, r0
    3e80:	20002384 	andcs	r2, r0, r4, lsl #7
    3e84:	00000048 	andeq	r0, r0, r8, asr #32
    3e88:	10919c01 	addsne	r9, r1, r1, lsl #24
    3e8c:	852b0000 	strhi	r0, [fp, #-0]!
    3e90:	01000006 	tsteq	r0, r6
    3e94:	00009773 	andeq	r9, r0, r3, ror r7
    3e98:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    3e9c:	1b593100 	blne	16502a4 <startup-0x1e9afd5c>
    3ea0:	2d010000 	stccs	0, cr0, [r1, #-0]
    3ea4:	20002250 	andcs	r2, r0, r0, asr r2
    3ea8:	00000134 	andeq	r0, r0, r4, lsr r1
    3eac:	10d19c01 	sbcsne	r9, r1, r1, lsl #24
    3eb0:	ec290000 	stc	0, cr0, [r9], #-0
    3eb4:	0100001c 	tsteq	r0, ip, lsl r0
    3eb8:	0006ba3f 	andeq	fp, r6, pc, lsr sl
    3ebc:	68910200 	ldmvs	r1, {r9}
    3ec0:	001a9329 	andseq	r9, sl, r9, lsr #6
    3ec4:	b84c0100 	stmdalt	ip, {r8}^
    3ec8:	02000005 	andeq	r0, r0, #5
    3ecc:	29295891 	stmdbcs	r9!, {r0, r4, r7, fp, ip, lr}
    3ed0:	0100001a 	tsteq	r0, sl, lsl r0
    3ed4:	00055c5d 	andeq	r5, r5, sp, asr ip
    3ed8:	54910200 	ldrpl	r0, [r1], #512	; 0x200
    3edc:	1b9c3200 	blne	fe7106e4 <_global_impure_ptr+0xde70b6c0>
    3ee0:	13010000 	movwne	r0, #4096	; 0x1000
    3ee4:	200021b8 			; <UNDEFINED> instruction: 0x200021b8
    3ee8:	00000098 	muleq	r0, r8, r0
    3eec:	18339c01 	ldmdane	r3!, {r0, sl, fp, ip, pc}
    3ef0:	29000000 	stmdbcs	r0, {}	; <UNPREDICTABLE>
    3ef4:	00001d62 	andeq	r1, r0, r2, ror #26
    3ef8:	00971f01 	addseq	r1, r7, r1, lsl #30
    3efc:	91020000 	mrsls	r0, (UNDEF: 2)
    3f00:	1c97296e 			; <UNDEFINED> instruction: 0x1c97296e
    3f04:	20010000 	andcs	r0, r1, r0
    3f08:	00000097 	muleq	r0, r7, r0
    3f0c:	006f9102 	rsbeq	r9, pc, r2, lsl #2
	...

Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
   0:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
   4:	030b130e 	movweq	r1, #45838	; 0xb30e
   8:	110e1b0e 	tstne	lr, lr, lsl #22
   c:	10061201 	andne	r1, r6, r1, lsl #4
  10:	02000017 	andeq	r0, r0, #23
  14:	0b0b0024 	bleq	2c00ac <startup-0x1fd3ff54>
  18:	0e030b3e 	vmoveq.16	d3[0], r0
  1c:	16030000 	strne	r0, [r3], -r0
  20:	3a0e0300 	bcc	380c28 <startup-0x1fc7f3d8>
  24:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
  28:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
  2c:	0b0b0024 	bleq	2c00c4 <startup-0x1fd3ff3c>
  30:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
  34:	35050000 	strcc	r0, [r5, #-0]
  38:	00134900 	andseq	r4, r3, r0, lsl #18
  3c:	00340600 	eorseq	r0, r4, r0, lsl #12
  40:	0b3a0e03 	bleq	e83854 <startup-0x1f17c7ac>
  44:	1349053b 	movtne	r0, #38203	; 0x953b
  48:	193c193f 	ldmdbne	ip!, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
  4c:	34070000 	strcc	r0, [r7], #-0
  50:	3a0e0300 	bcc	380c58 <startup-0x1fc7f3a8>
  54:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
  58:	3c193f13 	ldccc	15, cr3, [r9], {19}
  5c:	08000019 	stmdaeq	r0, {r0, r3, r4}
  60:	0b3e0104 	bleq	f80478 <startup-0x1f07fb88>
  64:	13490b0b 	movtne	r0, #39691	; 0x9b0b
  68:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
  6c:	00001301 	andeq	r1, r0, r1, lsl #6
  70:	03002809 	movweq	r2, #2057	; 0x809
  74:	000b1c0e 	andeq	r1, fp, lr, lsl #24
  78:	00280a00 	eoreq	r0, r8, r0, lsl #20
  7c:	0b1c0803 	bleq	702090 <startup-0x1f8fdf70>
  80:	160b0000 	strne	r0, [fp], -r0
  84:	3a0e0300 	bcc	380c8c <startup-0x1fc7f374>
  88:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
  8c:	0c000013 	stceq	0, cr0, [r0], {19}
  90:	0b0b0113 	bleq	2c04e4 <startup-0x1fd3fb1c>
  94:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
  98:	00001301 	andeq	r1, r0, r1, lsl #6
  9c:	03000d0d 	movweq	r0, #3341	; 0xd0d
  a0:	3b0b3a08 	blcc	2ce8c8 <startup-0x1fd31738>
  a4:	38134905 	ldmdacc	r3, {r0, r2, r8, fp, lr}
  a8:	0e00000b 	cdpeq	0, 0, cr0, cr0, cr11, {0}
  ac:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
  b0:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
  b4:	0b381349 	bleq	e04de0 <startup-0x1f1fb220>
  b8:	130f0000 	movwne	r0, #61440	; 0xf000
  bc:	3a0b0b01 	bcc	2c2cc8 <startup-0x1fd3d338>
  c0:	010b3b0b 	tsteq	fp, fp, lsl #22
  c4:	10000013 	andne	r0, r0, r3, lsl r0
  c8:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
  cc:	0b3b0b3a 	bleq	ec2dbc <startup-0x1f13d244>
  d0:	0b381349 	bleq	e04dfc <startup-0x1f1fb204>
  d4:	2e110000 	cdpcs	0, 1, cr0, cr1, cr0, {0}
  d8:	03193f01 	tsteq	r9, #1, 30
  dc:	3b0b3a0e 	blcc	2ce91c <startup-0x1fd316e4>
  e0:	11192705 	tstne	r9, r5, lsl #14
  e4:	40061201 	andmi	r1, r6, r1, lsl #4
  e8:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
  ec:	00001301 	andeq	r1, r0, r1, lsl #6
  f0:	03000512 	movweq	r0, #1298	; 0x512
  f4:	3b0b3a0e 	blcc	2ce934 <startup-0x1fd316cc>
  f8:	02134905 	andseq	r4, r3, #81920	; 0x14000
  fc:	13000018 	movwne	r0, #24
 100:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 104:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 108:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 10c:	0f140000 	svceq	0x00140000
 110:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
 114:	15000013 	strne	r0, [r0, #-19]	; 0xffffffed
 118:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 11c:	0b3a0e03 	bleq	e83930 <startup-0x1f17c6d0>
 120:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
 124:	01111349 	tsteq	r1, r9, asr #6
 128:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 12c:	01194297 			; <UNDEFINED> instruction: 0x01194297
 130:	16000013 			; <UNDEFINED> instruction: 0x16000013
 134:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 138:	0b3a0e03 	bleq	e8394c <startup-0x1f17c6b4>
 13c:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 140:	06120111 			; <UNDEFINED> instruction: 0x06120111
 144:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 148:	00130119 	andseq	r0, r3, r9, lsl r1
 14c:	00051700 	andeq	r1, r5, r0, lsl #14
 150:	0b3a0e03 	bleq	e83964 <startup-0x1f17c69c>
 154:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 158:	00001802 	andeq	r1, r0, r2, lsl #16
 15c:	03003418 	movweq	r3, #1048	; 0x418
 160:	3b0b3a0e 	blcc	2ce9a0 <startup-0x1fd31660>
 164:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 168:	19000018 	stmdbne	r0, {r3, r4}
 16c:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 170:	0b3a0e03 	bleq	e83984 <startup-0x1f17c67c>
 174:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 178:	06120111 			; <UNDEFINED> instruction: 0x06120111
 17c:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 180:	00000019 	andeq	r0, r0, r9, lsl r0
 184:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
 188:	030b130e 	movweq	r1, #45838	; 0xb30e
 18c:	110e1b0e 	tstne	lr, lr, lsl #22
 190:	10061201 	andne	r1, r6, r1, lsl #4
 194:	02000017 	andeq	r0, r0, #23
 198:	0b0b0024 	bleq	2c0230 <startup-0x1fd3fdd0>
 19c:	0e030b3e 	vmoveq.16	d3[0], r0
 1a0:	16030000 	strne	r0, [r3], -r0
 1a4:	3a0e0300 	bcc	380dac <startup-0x1fc7f254>
 1a8:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 1ac:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
 1b0:	0b0b0024 	bleq	2c0248 <startup-0x1fd3fdb8>
 1b4:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
 1b8:	13050000 	movwne	r0, #20480	; 0x5000
 1bc:	3a0b0b01 	bcc	2c2dc8 <startup-0x1fd3d238>
 1c0:	010b3b0b 	tsteq	fp, fp, lsl #22
 1c4:	06000013 			; <UNDEFINED> instruction: 0x06000013
 1c8:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
 1cc:	0b3b0b3a 	bleq	ec2ebc <startup-0x1f13d144>
 1d0:	0b381349 	bleq	e04efc <startup-0x1f1fb104>
 1d4:	0d070000 	stceq	0, cr0, [r7, #-0]
 1d8:	3a080300 	bcc	200de0 <startup-0x1fdff220>
 1dc:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 1e0:	000b3813 	andeq	r3, fp, r3, lsl r8
 1e4:	01010800 	tsteq	r1, r0, lsl #16
 1e8:	13011349 	movwne	r1, #4937	; 0x1349
 1ec:	21090000 	mrscs	r0, (UNDEF: 9)
 1f0:	2f134900 	svccs	0x00134900
 1f4:	0a00000b 	beq	228 <startup-0x1ffffdd8>
 1f8:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 1fc:	0b3a0e03 	bleq	e83a10 <startup-0x1f17c5f0>
 200:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 204:	01111349 	tsteq	r1, r9, asr #6
 208:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 20c:	01194297 			; <UNDEFINED> instruction: 0x01194297
 210:	0b000013 	bleq	264 <startup-0x1ffffd9c>
 214:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
 218:	0b3b0b3a 	bleq	ec2f08 <startup-0x1f13d0f8>
 21c:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 220:	0f0c0000 	svceq	0x000c0000
 224:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
 228:	0d000013 	stceq	0, cr0, [r0, #-76]	; 0xffffffb4
 22c:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 230:	0b3a0e03 	bleq	e83a44 <startup-0x1f17c5bc>
 234:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 238:	06120111 			; <UNDEFINED> instruction: 0x06120111
 23c:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 240:	00000019 	andeq	r0, r0, r9, lsl r0
 244:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
 248:	030b130e 	movweq	r1, #45838	; 0xb30e
 24c:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xfffff4f2
 250:	10011117 	andne	r1, r1, r7, lsl r1
 254:	02000017 	andeq	r0, r0, #23
 258:	0e030104 	adfeqs	f0, f3, f4
 25c:	0b0b0b3e 	bleq	2c2f5c <startup-0x1fd3d0a4>
 260:	0b3a1349 	bleq	e84f8c <startup-0x1f17b074>
 264:	13010b3b 	movwne	r0, #6971	; 0x1b3b
 268:	28030000 	stmdacs	r3, {}	; <UNPREDICTABLE>
 26c:	1c0e0300 	stcne	3, cr0, [lr], {-0}
 270:	0400000d 	streq	r0, [r0], #-13
 274:	0e030028 	cdpeq	0, 0, cr0, cr3, cr8, {1}
 278:	00000b1c 	andeq	r0, r0, ip, lsl fp
 27c:	0b002405 	bleq	9298 <startup-0x1fff6d68>
 280:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
 284:	0600000e 	streq	r0, [r0], -lr
 288:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
 28c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 290:	00001349 	andeq	r1, r0, r9, asr #6
 294:	03001607 	movweq	r1, #1543	; 0x607
 298:	3b0b3a0e 	blcc	2cead8 <startup-0x1fd31528>
 29c:	0013490b 	andseq	r4, r3, fp, lsl #18
 2a0:	00240800 	eoreq	r0, r4, r0, lsl #16
 2a4:	0b3e0b0b 	bleq	f82ed8 <startup-0x1f07d128>
 2a8:	00000803 	andeq	r0, r0, r3, lsl #16
 2ac:	49003509 	stmdbmi	r0, {r0, r3, r8, sl, ip, sp}
 2b0:	0a000013 	beq	304 <startup-0x1ffffcfc>
 2b4:	13490026 	movtne	r0, #36902	; 0x9026
 2b8:	130b0000 	movwne	r0, #45056	; 0xb000
 2bc:	3a050b01 	bcc	142ec8 <startup-0x1febd138>
 2c0:	01053b0b 	tsteq	r5, fp, lsl #22
 2c4:	0c000013 	stceq	0, cr0, [r0], {19}
 2c8:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
 2cc:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 2d0:	0b381349 	bleq	e04ffc <startup-0x1f1fb004>
 2d4:	0d0d0000 	stceq	0, cr0, [sp, #-0]
 2d8:	3a0e0300 	bcc	380ee0 <startup-0x1fc7f120>
 2dc:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 2e0:	00053813 	andeq	r3, r5, r3, lsl r8
 2e4:	000d0e00 	andeq	r0, sp, r0, lsl #28
 2e8:	0b3a0803 	bleq	e822fc <startup-0x1f17dd04>
 2ec:	1349053b 	movtne	r0, #38203	; 0x953b
 2f0:	00000538 	andeq	r0, r0, r8, lsr r5
 2f4:	4901010f 	stmdbmi	r1, {r0, r1, r2, r3, r8}
 2f8:	00130113 	andseq	r0, r3, r3, lsl r1
 2fc:	00211000 	eoreq	r1, r1, r0
 300:	0b2f1349 	bleq	bc502c <startup-0x1f43afd4>
 304:	21110000 	tstcs	r1, r0
 308:	2f134900 	svccs	0x00134900
 30c:	12000005 	andne	r0, r0, #5
 310:	0b0b0113 	bleq	2c0764 <startup-0x1fd3f89c>
 314:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 318:	00001301 	andeq	r1, r0, r1, lsl #6
 31c:	03000d13 	movweq	r0, #3347	; 0xd13
 320:	3b0b3a08 	blcc	2ceb48 <startup-0x1fd314b8>
 324:	38134905 	ldmdacc	r3, {r0, r2, r8, fp, lr}
 328:	1400000b 	strne	r0, [r0], #-11
 32c:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 330:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 334:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
 338:	0000193c 	andeq	r1, r0, ip, lsr r9
 33c:	03003415 	movweq	r3, #1045	; 0x415
 340:	3b0b3a0e 	blcc	2ceb80 <startup-0x1fd31480>
 344:	3f13490b 	svccc	0x0013490b
 348:	00193c19 	andseq	r3, r9, r9, lsl ip
 34c:	01041600 	tsteq	r4, r0, lsl #12
 350:	0b0b0b3e 	bleq	2c3050 <startup-0x1fd3cfb0>
 354:	0b3a1349 	bleq	e85080 <startup-0x1f17af80>
 358:	1301053b 	movwne	r0, #5435	; 0x153b
 35c:	28170000 	ldmdacs	r7, {}	; <UNPREDICTABLE>
 360:	1c080300 	stcne	3, cr0, [r8], {-0}
 364:	1800000b 	stmdane	r0, {r0, r1, r3}
 368:	0b0b0113 	bleq	2c07bc <startup-0x1fd3f844>
 36c:	0b3b0b3a 	bleq	ec305c <startup-0x1f13cfa4>
 370:	00001301 	andeq	r1, r0, r1, lsl #6
 374:	03000d19 	movweq	r0, #3353	; 0xd19
 378:	3b0b3a0e 	blcc	2cebb8 <startup-0x1fd31448>
 37c:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
 380:	1a00000b 	bne	3b4 <startup-0x1ffffc4c>
 384:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 388:	0b3b0b3a 	bleq	ec3078 <startup-0x1f13cf88>
 38c:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 390:	041b0000 	ldreq	r0, [fp], #-0
 394:	0b0b3e01 	bleq	2cfba0 <startup-0x1fd30460>
 398:	3a13490b 	bcc	4d27cc <startup-0x1fb2d834>
 39c:	010b3b0b 	tsteq	fp, fp, lsl #22
 3a0:	1c000013 	stcne	0, cr0, [r0], {19}
 3a4:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
 3a8:	0b3a0b0b 	bleq	e82fdc <startup-0x1f17d024>
 3ac:	13010b3b 	movwne	r0, #6971	; 0x1b3b
 3b0:	0d1d0000 	ldceq	0, cr0, [sp, #-0]
 3b4:	3a080300 	bcc	200fbc <startup-0x1fdff044>
 3b8:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 3bc:	000b3813 	andeq	r3, fp, r3, lsl r8
 3c0:	00341e00 	eorseq	r1, r4, r0, lsl #28
 3c4:	0b3a0e03 	bleq	e83bd8 <startup-0x1f17c428>
 3c8:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 3cc:	1802193f 	stmdane	r2, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
 3d0:	2e1f0000 	cdpcs	0, 1, cr0, cr15, cr0, {0}
 3d4:	03193f01 	tsteq	r9, #1, 30
 3d8:	3b0b3a0e 	blcc	2cec18 <startup-0x1fd313e8>
 3dc:	1119270b 	tstne	r9, fp, lsl #14
 3e0:	40061201 	andmi	r1, r6, r1, lsl #4
 3e4:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 3e8:	00001301 	andeq	r1, r0, r1, lsl #6
 3ec:	11010b20 	tstne	r1, r0, lsr #22
 3f0:	00061201 	andeq	r1, r6, r1, lsl #4
 3f4:	00342100 	eorseq	r2, r4, r0, lsl #2
 3f8:	0b3a0803 	bleq	e8240c <startup-0x1f17dbf4>
 3fc:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 400:	00001802 	andeq	r1, r0, r2, lsl #16
 404:	0b000f22 	bleq	4094 <startup-0x1fffbf6c>
 408:	0013490b 	andseq	r4, r3, fp, lsl #18
 40c:	002e2300 	eoreq	r2, lr, r0, lsl #6
 410:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 414:	0b3b0b3a 	bleq	ec3104 <startup-0x1f13cefc>
 418:	01111927 	tsteq	r1, r7, lsr #18
 41c:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 420:	00194297 	mulseq	r9, r7, r2
 424:	012e2400 			; <UNDEFINED> instruction: 0x012e2400
 428:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 42c:	0b3b0b3a 	bleq	ec311c <startup-0x1f13cee4>
 430:	06120111 			; <UNDEFINED> instruction: 0x06120111
 434:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 438:	00130119 	andseq	r0, r3, r9, lsl r1
 43c:	012e2500 			; <UNDEFINED> instruction: 0x012e2500
 440:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 444:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 448:	01111927 	tsteq	r1, r7, lsr #18
 44c:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 450:	01194297 			; <UNDEFINED> instruction: 0x01194297
 454:	26000013 			; <UNDEFINED> instruction: 0x26000013
 458:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
 45c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 460:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 464:	2e270000 	cdpcs	0, 2, cr0, cr7, cr0, {0}
 468:	03193f01 	tsteq	r9, #1, 30
 46c:	3b0b3a0e 	blcc	2cecac <startup-0x1fd31354>
 470:	49192705 	ldmdbmi	r9, {r0, r2, r8, r9, sl, sp}
 474:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
 478:	97184006 	ldrls	r4, [r8, -r6]
 47c:	13011942 	movwne	r1, #6466	; 0x1942
 480:	34280000 	strtcc	r0, [r8], #-0
 484:	3a0e0300 	bcc	38108c <startup-0x1fc7ef74>
 488:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 48c:	00180213 	andseq	r0, r8, r3, lsl r2
 490:	002e2900 	eoreq	r2, lr, r0, lsl #18
 494:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 498:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 49c:	01111927 	tsteq	r1, r7, lsr #18
 4a0:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 4a4:	00194297 	mulseq	r9, r7, r2
 4a8:	00342a00 	eorseq	r2, r4, r0, lsl #20
 4ac:	0b3a0803 	bleq	e824c0 <startup-0x1f17db40>
 4b0:	1349053b 	movtne	r0, #38203	; 0x953b
 4b4:	00001802 	andeq	r1, r0, r2, lsl #16
 4b8:	3f012e2b 	svccc	0x00012e2b
 4bc:	3a0e0319 	bcc	381128 <startup-0x1fc7eed8>
 4c0:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
 4c4:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 4c8:	96184006 	ldrls	r4, [r8], -r6
 4cc:	13011942 	movwne	r1, #6466	; 0x1942
 4d0:	2e2c0000 	cdpcs	0, 2, cr0, cr12, cr0, {0}
 4d4:	03193f00 	tsteq	r9, #0, 30
 4d8:	3b0b3a0e 	blcc	2ced18 <startup-0x1fd312e8>
 4dc:	49192705 	ldmdbmi	r9, {r0, r2, r8, r9, sl, sp}
 4e0:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
 4e4:	97184006 	ldrls	r4, [r8, -r6]
 4e8:	00001942 	andeq	r1, r0, r2, asr #18
 4ec:	3f012e2d 	svccc	0x00012e2d
 4f0:	3a0e0319 	bcc	38115c <startup-0x1fc7eea4>
 4f4:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
 4f8:	11134919 	tstne	r3, r9, lsl r9
 4fc:	40061201 	andmi	r1, r6, r1, lsl #4
 500:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 504:	00001301 	andeq	r1, r0, r1, lsl #6
 508:	03012e2e 	movweq	r2, #7726	; 0x1e2e
 50c:	3b0b3a0e 	blcc	2ced4c <startup-0x1fd312b4>
 510:	49192705 	ldmdbmi	r9, {r0, r2, r8, r9, sl, sp}
 514:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
 518:	96184006 	ldrls	r4, [r8], -r6
 51c:	13011942 	movwne	r1, #6466	; 0x1942
 520:	2e2f0000 	cdpcs	0, 2, cr0, cr15, cr0, {0}
 524:	3a0e0301 	bcc	381130 <startup-0x1fc7eed0>
 528:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
 52c:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 530:	97184006 	ldrls	r4, [r8, -r6]
 534:	00001942 	andeq	r1, r0, r2, asr #18
 538:	01110100 	tsteq	r1, r0, lsl #2
 53c:	0b130e25 	bleq	4c3dd8 <startup-0x1fb3c228>
 540:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
 544:	06120111 			; <UNDEFINED> instruction: 0x06120111
 548:	00001710 	andeq	r1, r0, r0, lsl r7
 54c:	0b002402 	bleq	955c <startup-0x1fff6aa4>
 550:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
 554:	0300000e 	movweq	r0, #14
 558:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
 55c:	0b3b0b3a 	bleq	ec324c <startup-0x1f13cdb4>
 560:	00001349 	andeq	r1, r0, r9, asr #6
 564:	0b002404 	bleq	957c <startup-0x1fff6a84>
 568:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
 56c:	05000008 	streq	r0, [r0, #-8]
 570:	13490035 	movtne	r0, #36917	; 0x9035
 574:	34060000 	strcc	r0, [r6], #-0
 578:	3a0e0300 	bcc	381180 <startup-0x1fc7ee80>
 57c:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 580:	3c193f13 	ldccc	15, cr3, [r9], {19}
 584:	07000019 	smladeq	r0, r9, r0, r0
 588:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 58c:	0b3b0b3a 	bleq	ec327c <startup-0x1f13cd84>
 590:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
 594:	0000193c 	andeq	r1, r0, ip, lsr r9
 598:	3e010408 	cdpcc	4, 0, cr0, cr1, cr8, {0}
 59c:	490b0b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp}
 5a0:	3b0b3a13 	blcc	2cedf4 <startup-0x1fd3120c>
 5a4:	00130105 	andseq	r0, r3, r5, lsl #2
 5a8:	00280900 	eoreq	r0, r8, r0, lsl #18
 5ac:	0b1c0e03 	bleq	703dc0 <startup-0x1f8fc240>
 5b0:	130a0000 	movwne	r0, #40960	; 0xa000
 5b4:	3a0b0b01 	bcc	2c31c0 <startup-0x1fd3ce40>
 5b8:	01053b0b 	tsteq	r5, fp, lsl #22
 5bc:	0b000013 	bleq	610 <startup-0x1ffff9f0>
 5c0:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
 5c4:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 5c8:	0b381349 	bleq	e052f4 <startup-0x1f1fad0c>
 5cc:	0d0c0000 	stceq	0, cr0, [ip, #-0]
 5d0:	3a080300 	bcc	2011d8 <startup-0x1fdfee28>
 5d4:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 5d8:	000b3813 	andeq	r3, fp, r3, lsl r8
 5dc:	01010d00 	tsteq	r1, r0, lsl #26
 5e0:	13011349 	movwne	r1, #4937	; 0x1349
 5e4:	210e0000 	mrscs	r0, (UNDEF: 14)
 5e8:	2f134900 	svccs	0x00134900
 5ec:	0f00000b 	svceq	0x0000000b
 5f0:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
 5f4:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 5f8:	00001349 	andeq	r1, r0, r9, asr #6
 5fc:	3e010410 	cfmvdlrcc	mvd1, r0
 600:	490b0b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp}
 604:	3b0b3a13 	blcc	2cee58 <startup-0x1fd311a8>
 608:	0013010b 	andseq	r0, r3, fp, lsl #2
 60c:	01131100 	tsteq	r3, r0, lsl #2
 610:	0b3a0b0b 	bleq	e83244 <startup-0x1f17cdbc>
 614:	13010b3b 	movwne	r0, #6971	; 0x1b3b
 618:	0d120000 	ldceq	0, cr0, [r2, #-0]
 61c:	3a0e0300 	bcc	381224 <startup-0x1fc7eddc>
 620:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 624:	000b3813 	andeq	r3, fp, r3, lsl r8
 628:	012e1300 			; <UNDEFINED> instruction: 0x012e1300
 62c:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 630:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 634:	01111927 	tsteq	r1, r7, lsr #18
 638:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 63c:	01194297 			; <UNDEFINED> instruction: 0x01194297
 640:	14000013 	strne	r0, [r0], #-19	; 0xffffffed
 644:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
 648:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 64c:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 650:	34150000 	ldrcc	r0, [r5], #-0
 654:	3a0e0300 	bcc	38125c <startup-0x1fc7eda4>
 658:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 65c:	00180213 	andseq	r0, r8, r3, lsl r2
 660:	000f1600 	andeq	r1, pc, r0, lsl #12
 664:	13490b0b 	movtne	r0, #39691	; 0x9b0b
 668:	2e170000 	cdpcs	0, 1, cr0, cr7, cr0, {0}
 66c:	03193f01 	tsteq	r9, #1, 30
 670:	3b0b3a0e 	blcc	2ceeb0 <startup-0x1fd31150>
 674:	49192705 	ldmdbmi	r9, {r0, r2, r8, r9, sl, sp}
 678:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
 67c:	97184006 	ldrls	r4, [r8, -r6]
 680:	13011942 	movwne	r1, #6466	; 0x1942
 684:	34180000 	ldrcc	r0, [r8], #-0
 688:	3a080300 	bcc	201290 <startup-0x1fdfed70>
 68c:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 690:	00180213 	andseq	r0, r8, r3, lsl r2
 694:	012e1900 			; <UNDEFINED> instruction: 0x012e1900
 698:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 69c:	0b3b0b3a 	bleq	ec338c <startup-0x1f13cc74>
 6a0:	01111927 	tsteq	r1, r7, lsr #18
 6a4:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 6a8:	01194297 			; <UNDEFINED> instruction: 0x01194297
 6ac:	1a000013 	bne	700 <startup-0x1ffff900>
 6b0:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
 6b4:	0b3b0b3a 	bleq	ec33a4 <startup-0x1f13cc5c>
 6b8:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 6bc:	341b0000 	ldrcc	r0, [fp], #-0
 6c0:	3a0e0300 	bcc	3812c8 <startup-0x1fc7ed38>
 6c4:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 6c8:	00180213 	andseq	r0, r8, r3, lsl r2
 6cc:	00341c00 	eorseq	r1, r4, r0, lsl #24
 6d0:	0b3a0803 	bleq	e826e4 <startup-0x1f17d91c>
 6d4:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 6d8:	00001802 	andeq	r1, r0, r2, lsl #16
 6dc:	3f012e1d 	svccc	0x00012e1d
 6e0:	3a0e0319 	bcc	38134c <startup-0x1fc7ecb4>
 6e4:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 6e8:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 6ec:	96184006 	ldrls	r4, [r8], -r6
 6f0:	00001942 	andeq	r1, r0, r2, asr #18
 6f4:	01110100 	tsteq	r1, r0, lsl #2
 6f8:	0b130e25 	bleq	4c3f94 <startup-0x1fb3c06c>
 6fc:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
 700:	06120111 			; <UNDEFINED> instruction: 0x06120111
 704:	00001710 	andeq	r1, r0, r0, lsl r7
 708:	0b002402 	bleq	9718 <startup-0x1fff68e8>
 70c:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
 710:	0300000e 	movweq	r0, #14
 714:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
 718:	0b3b0b3a 	bleq	ec3408 <startup-0x1f13cbf8>
 71c:	00001349 	andeq	r1, r0, r9, asr #6
 720:	0b002404 	bleq	9738 <startup-0x1fff68c8>
 724:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
 728:	05000008 	streq	r0, [r0, #-8]
 72c:	13490035 	movtne	r0, #36917	; 0x9035
 730:	26060000 	strcs	r0, [r6], -r0
 734:	00134900 	andseq	r4, r3, r0, lsl #18
 738:	01130700 	tsteq	r3, r0, lsl #14
 73c:	0b3a050b 	bleq	e81b70 <startup-0x1f17e490>
 740:	1301053b 	movwne	r0, #5435	; 0x153b
 744:	0d080000 	stceq	0, cr0, [r8, #-0]
 748:	3a0e0300 	bcc	381350 <startup-0x1fc7ecb0>
 74c:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 750:	000b3813 	andeq	r3, fp, r3, lsl r8
 754:	000d0900 	andeq	r0, sp, r0, lsl #18
 758:	0b3a0e03 	bleq	e83f6c <startup-0x1f17c094>
 75c:	1349053b 	movtne	r0, #38203	; 0x953b
 760:	00000538 	andeq	r0, r0, r8, lsr r5
 764:	03000d0a 	movweq	r0, #3338	; 0xd0a
 768:	3b0b3a08 	blcc	2cef90 <startup-0x1fd31070>
 76c:	38134905 	ldmdacc	r3, {r0, r2, r8, fp, lr}
 770:	0b000005 	bleq	78c <startup-0x1ffff874>
 774:	13490101 	movtne	r0, #37121	; 0x9101
 778:	00001301 	andeq	r1, r0, r1, lsl #6
 77c:	4900210c 	stmdbmi	r0, {r2, r3, r8, sp}
 780:	000b2f13 	andeq	r2, fp, r3, lsl pc
 784:	00210d00 	eoreq	r0, r1, r0, lsl #26
 788:	052f1349 	streq	r1, [pc, #-841]!	; 447 <startup-0x1ffffbb9>
 78c:	160e0000 	strne	r0, [lr], -r0
 790:	3a0e0300 	bcc	381398 <startup-0x1fc7ec68>
 794:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 798:	0f000013 	svceq	0x00000013
 79c:	0b0b0113 	bleq	2c0bf0 <startup-0x1fd3f410>
 7a0:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 7a4:	00001301 	andeq	r1, r0, r1, lsl #6
 7a8:	03000d10 	movweq	r0, #3344	; 0xd10
 7ac:	3b0b3a08 	blcc	2cefd4 <startup-0x1fd3102c>
 7b0:	38134905 	ldmdacc	r3, {r0, r2, r8, fp, lr}
 7b4:	1100000b 	tstne	r0, fp
 7b8:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 7bc:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 7c0:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
 7c4:	0000193c 	andeq	r1, r0, ip, lsr r9
 7c8:	03003412 	movweq	r3, #1042	; 0x412
 7cc:	3b0b3a0e 	blcc	2cf00c <startup-0x1fd30ff4>
 7d0:	3f13490b 	svccc	0x0013490b
 7d4:	00193c19 	andseq	r3, r9, r9, lsl ip
 7d8:	01041300 	mrseq	r1, LR_abt
 7dc:	0b0b0b3e 	bleq	2c34dc <startup-0x1fd3cb24>
 7e0:	0b3a1349 	bleq	e8550c <startup-0x1f17aaf4>
 7e4:	1301053b 	movwne	r0, #5435	; 0x153b
 7e8:	28140000 	ldmdacs	r4, {}	; <UNPREDICTABLE>
 7ec:	1c0e0300 	stcne	3, cr0, [lr], {-0}
 7f0:	1500000b 	strne	r0, [r0, #-11]
 7f4:	0b0b0113 	bleq	2c0c48 <startup-0x1fd3f3b8>
 7f8:	0b3b0b3a 	bleq	ec34e8 <startup-0x1f13cb18>
 7fc:	00001301 	andeq	r1, r0, r1, lsl #6
 800:	03000d16 	movweq	r0, #3350	; 0xd16
 804:	3b0b3a0e 	blcc	2cf044 <startup-0x1fd30fbc>
 808:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
 80c:	1700000b 	strne	r0, [r0, -fp]
 810:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 814:	0b3a0e03 	bleq	e84028 <startup-0x1f17bfd8>
 818:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 81c:	06120111 			; <UNDEFINED> instruction: 0x06120111
 820:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 824:	00130119 	andseq	r0, r3, r9, lsl r1
 828:	00051800 	andeq	r1, r5, r0, lsl #16
 82c:	0b3a0e03 	bleq	e84040 <startup-0x1f17bfc0>
 830:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 834:	00001802 	andeq	r1, r0, r2, lsl #16
 838:	03003419 	movweq	r3, #1049	; 0x419
 83c:	3b0b3a0e 	blcc	2cf07c <startup-0x1fd30f84>
 840:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 844:	1a000018 	bne	8ac <startup-0x1ffff754>
 848:	0b0b000f 	bleq	2c088c <startup-0x1fd3f774>
 84c:	00001349 	andeq	r1, r0, r9, asr #6
 850:	3f012e1b 	svccc	0x00012e1b
 854:	3a0e0319 	bcc	3814c0 <startup-0x1fc7eb40>
 858:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 85c:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 860:	97184006 	ldrls	r4, [r8, -r6]
 864:	00001942 	andeq	r1, r0, r2, asr #18
 868:	01110100 	tsteq	r1, r0, lsl #2
 86c:	0b130e25 	bleq	4c4108 <startup-0x1fb3bef8>
 870:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
 874:	06120111 			; <UNDEFINED> instruction: 0x06120111
 878:	00001710 	andeq	r1, r0, r0, lsl r7
 87c:	0b002402 	bleq	988c <startup-0x1fff6774>
 880:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
 884:	0300000e 	movweq	r0, #14
 888:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
 88c:	0b3b0b3a 	bleq	ec357c <startup-0x1f13ca84>
 890:	00001349 	andeq	r1, r0, r9, asr #6
 894:	0b002404 	bleq	98ac <startup-0x1fff6754>
 898:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
 89c:	05000008 	streq	r0, [r0, #-8]
 8a0:	13490035 	movtne	r0, #36917	; 0x9035
 8a4:	13060000 	movwne	r0, #24576	; 0x6000
 8a8:	3a0b0b01 	bcc	2c34b4 <startup-0x1fd3cb4c>
 8ac:	010b3b0b 	tsteq	fp, fp, lsl #22
 8b0:	07000013 	smladeq	r0, r3, r0, r0
 8b4:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
 8b8:	0b3b0b3a 	bleq	ec35a8 <startup-0x1f13ca58>
 8bc:	0b381349 	bleq	e055e8 <startup-0x1f1faa18>
 8c0:	0d080000 	stceq	0, cr0, [r8, #-0]
 8c4:	3a080300 	bcc	2014cc <startup-0x1fdfeb34>
 8c8:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 8cc:	000b3813 	andeq	r3, fp, r3, lsl r8
 8d0:	01010900 	tsteq	r1, r0, lsl #18
 8d4:	13011349 	movwne	r1, #4937	; 0x1349
 8d8:	210a0000 	mrscs	r0, (UNDEF: 10)
 8dc:	2f134900 	svccs	0x00134900
 8e0:	0b00000b 	bleq	914 <startup-0x1ffff6ec>
 8e4:	0e030104 	adfeqs	f0, f3, f4
 8e8:	0b0b0b3e 	bleq	2c35e8 <startup-0x1fd3ca18>
 8ec:	0b3a1349 	bleq	e85618 <startup-0x1f17a9e8>
 8f0:	13010b3b 	movwne	r0, #6971	; 0x1b3b
 8f4:	280c0000 	stmdacs	ip, {}	; <UNPREDICTABLE>
 8f8:	1c0e0300 	stcne	3, cr0, [lr], {-0}
 8fc:	0d00000d 	stceq	0, cr0, [r0, #-52]	; 0xffffffcc
 900:	0e030028 	cdpeq	0, 0, cr0, cr3, cr8, {1}
 904:	00000b1c 	andeq	r0, r0, ip, lsl fp
 908:	0300340e 	movweq	r3, #1038	; 0x40e
 90c:	3b0b3a0e 	blcc	2cf14c <startup-0x1fd30eb4>
 910:	3f134905 	svccc	0x00134905
 914:	00193c19 	andseq	r3, r9, r9, lsl ip
 918:	00340f00 	eorseq	r0, r4, r0, lsl #30
 91c:	0b3a0e03 	bleq	e84130 <startup-0x1f17bed0>
 920:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 924:	193c193f 	ldmdbne	ip!, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
 928:	04100000 	ldreq	r0, [r0], #-0
 92c:	0b0b3e01 	bleq	2d0138 <startup-0x1fd2fec8>
 930:	3a13490b 	bcc	4d2d64 <startup-0x1fb2d29c>
 934:	01053b0b 	tsteq	r5, fp, lsl #22
 938:	11000013 	tstne	r0, r3, lsl r0
 93c:	08030028 	stmdaeq	r3, {r3, r5}
 940:	00000b1c 	andeq	r0, r0, ip, lsl fp
 944:	03001612 	movweq	r1, #1554	; 0x612
 948:	3b0b3a0e 	blcc	2cf188 <startup-0x1fd30e78>
 94c:	00134905 	andseq	r4, r3, r5, lsl #18
 950:	01131300 	tsteq	r3, r0, lsl #6
 954:	0b3a0b0b 	bleq	e83588 <startup-0x1f17ca78>
 958:	1301053b 	movwne	r0, #5435	; 0x153b
 95c:	0d140000 	ldceq	0, cr0, [r4, #-0]
 960:	3a0e0300 	bcc	381568 <startup-0x1fc7ea98>
 964:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 968:	000b3813 	andeq	r3, fp, r3, lsl r8
 96c:	000d1500 	andeq	r1, sp, r0, lsl #10
 970:	0b3a0803 	bleq	e82984 <startup-0x1f17d67c>
 974:	1349053b 	movtne	r0, #38203	; 0x953b
 978:	00000b38 	andeq	r0, r0, r8, lsr fp
 97c:	3e010416 	cfmvdlrcc	mvd1, r0
 980:	490b0b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp}
 984:	3b0b3a13 	blcc	2cf1d8 <startup-0x1fd30e28>
 988:	0013010b 	andseq	r0, r3, fp, lsl #2
 98c:	000f1700 	andeq	r1, pc, r0, lsl #14
 990:	13490b0b 	movtne	r0, #39691	; 0x9b0b
 994:	13180000 	tstne	r8, #0
 998:	3c0e0300 	stccc	3, cr0, [lr], {-0}
 99c:	19000019 	stmdbne	r0, {r0, r3, r4}
 9a0:	0b0b0117 	bleq	2c0e04 <startup-0x1fd3f1fc>
 9a4:	0b3b0b3a 	bleq	ec3694 <startup-0x1f13c96c>
 9a8:	00001301 	andeq	r1, r0, r1, lsl #6
 9ac:	03000d1a 	movweq	r0, #3354	; 0xd1a
 9b0:	3b0b3a0e 	blcc	2cf1f0 <startup-0x1fd30e10>
 9b4:	0013490b 	andseq	r4, r3, fp, lsl #18
 9b8:	000f1b00 	andeq	r1, pc, r0, lsl #22
 9bc:	00000b0b 	andeq	r0, r0, fp, lsl #22
 9c0:	4900261c 	stmdbmi	r0, {r2, r3, r4, r9, sl, sp}
 9c4:	1d000013 	stcne	0, cr0, [r0, #-76]	; 0xffffffb4
 9c8:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
 9cc:	0b3a0b0b 	bleq	e83600 <startup-0x1f17ca00>
 9d0:	13010b3b 	movwne	r0, #6971	; 0x1b3b
 9d4:	131e0000 	tstne	lr, #0
 9d8:	0b0e0301 	bleq	3815e4 <startup-0x1fc7ea1c>
 9dc:	3b0b3a05 	blcc	2cf1f8 <startup-0x1fd30e08>
 9e0:	0013010b 	andseq	r0, r3, fp, lsl #2
 9e4:	000d1f00 	andeq	r1, sp, r0, lsl #30
 9e8:	0b3a0e03 	bleq	e841fc <startup-0x1f17be04>
 9ec:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 9f0:	00000538 	andeq	r0, r0, r8, lsr r5
 9f4:	27001520 	strcs	r1, [r0, -r0, lsr #10]
 9f8:	21000019 	tstcs	r0, r9, lsl r0
 9fc:	19270115 	stmdbne	r7!, {r0, r2, r4, r8}
 a00:	13011349 	movwne	r1, #4937	; 0x1349
 a04:	05220000 	streq	r0, [r2, #-0]!
 a08:	00134900 	andseq	r4, r3, r0, lsl #18
 a0c:	01132300 	tsteq	r3, r0, lsl #6
 a10:	050b0e03 	streq	r0, [fp, #-3587]	; 0xfffff1fd
 a14:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 a18:	00001301 	andeq	r1, r0, r1, lsl #6
 a1c:	03000d24 	movweq	r0, #3364	; 0xd24
 a20:	3b0b3a0e 	blcc	2cf260 <startup-0x1fd30da0>
 a24:	38134905 	ldmdacc	r3, {r0, r2, r8, fp, lr}
 a28:	25000005 	strcs	r0, [r0, #-5]
 a2c:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
 a30:	0b3a0b0b 	bleq	e83664 <startup-0x1f17c99c>
 a34:	1301053b 	movwne	r0, #5435	; 0x153b
 a38:	17260000 	strne	r0, [r6, -r0]!
 a3c:	3a0b0b01 	bcc	2c3648 <startup-0x1fd3c9b8>
 a40:	01053b0b 	tsteq	r5, fp, lsl #22
 a44:	27000013 	smladcs	r0, r3, r0, r0
 a48:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
 a4c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 a50:	00001349 	andeq	r1, r0, r9, asr #6
 a54:	27011528 	strcs	r1, [r1, -r8, lsr #10]
 a58:	00130119 	andseq	r0, r3, r9, lsl r1
 a5c:	00342900 	eorseq	r2, r4, r0, lsl #18
 a60:	0b3a0e03 	bleq	e84274 <startup-0x1f17bd8c>
 a64:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 a68:	00001802 	andeq	r1, r0, r2, lsl #16
 a6c:	3f012e2a 	svccc	0x00012e2a
 a70:	3a0e0319 	bcc	3816dc <startup-0x1fc7e924>
 a74:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 a78:	11134919 	tstne	r3, r9, lsl r9
 a7c:	40061201 	andmi	r1, r6, r1, lsl #4
 a80:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 a84:	00001301 	andeq	r1, r0, r1, lsl #6
 a88:	0300052b 	movweq	r0, #1323	; 0x52b
 a8c:	3b0b3a0e 	blcc	2cf2cc <startup-0x1fd30d34>
 a90:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 a94:	2c000018 	stccs	0, cr0, [r0], {24}
 a98:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 a9c:	0b3a0e03 	bleq	e842b0 <startup-0x1f17bd50>
 aa0:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 aa4:	01111349 	tsteq	r1, r9, asr #6
 aa8:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 aac:	01194296 			; <UNDEFINED> instruction: 0x01194296
 ab0:	2d000013 	stccs	0, cr0, [r0, #-76]	; 0xffffffb4
 ab4:	08030005 	stmdaeq	r3, {r0, r2}
 ab8:	0b3b0b3a 	bleq	ec37a8 <startup-0x1f13c858>
 abc:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 ac0:	0b2e0000 	bleq	b80ac8 <startup-0x1f47f538>
 ac4:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
 ac8:	00130106 	andseq	r0, r3, r6, lsl #2
 acc:	00342f00 	eorseq	r2, r4, r0, lsl #30
 ad0:	0b3a0803 	bleq	e82ae4 <startup-0x1f17d51c>
 ad4:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 ad8:	00001802 	andeq	r1, r0, r2, lsl #16
 adc:	11010b30 	tstne	r1, r0, lsr fp
 ae0:	00061201 	andeq	r1, r6, r1, lsl #4
 ae4:	012e3100 			; <UNDEFINED> instruction: 0x012e3100
 ae8:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 aec:	0b3b0b3a 	bleq	ec37dc <startup-0x1f13c824>
 af0:	01111927 	tsteq	r1, r7, lsr #18
 af4:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 af8:	01194296 			; <UNDEFINED> instruction: 0x01194296
 afc:	32000013 	andcc	r0, r0, #19
 b00:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 b04:	0b3a0e03 	bleq	e84318 <startup-0x1f17bce8>
 b08:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 b0c:	06120111 			; <UNDEFINED> instruction: 0x06120111
 b10:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 b14:	33000019 	movwcc	r0, #25
 b18:	1755010b 	ldrbne	r0, [r5, -fp, lsl #2]
 b1c:	Address 0x00000b1c is out of bounds.


Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	0000001c 	andeq	r0, r0, ip, lsl r0
   4:	00000002 	andeq	r0, r0, r2
   8:	00040000 	andeq	r0, r4, r0
   c:	00000000 	andeq	r0, r0, r0
  10:	20000010 	andcs	r0, r0, r0, lsl r0
  14:	000009fe 	strdeq	r0, [r0], -lr
	...
  20:	0000001c 	andeq	r0, r0, ip, lsl r0
  24:	09d00002 	ldmibeq	r0, {r1}^
  28:	00040000 	andeq	r0, r4, r0
  2c:	00000000 	andeq	r0, r0, r0
  30:	20000a10 	andcs	r0, r0, r0, lsl sl
  34:	000000e8 	andeq	r0, r0, r8, ror #1
	...
  40:	00000024 	andeq	r0, r0, r4, lsr #32
  44:	0b3d0002 	bleq	f40054 <startup-0x1f0bffac>
  48:	00040000 	andeq	r0, r4, r0
  4c:	00000000 	andeq	r0, r0, r0
  50:	20000af8 	strdcs	r0, [r0], -r8
  54:	00000fec 	andeq	r0, r0, ip, ror #31
  58:	20000000 	andcs	r0, r0, r0
  5c:	0000000c 	andeq	r0, r0, ip
	...
  68:	0000001c 	andeq	r0, r0, ip, lsl r0
  6c:	229e0002 	addscs	r0, lr, #2
  70:	00040000 	andeq	r0, r4, r0
  74:	00000000 	andeq	r0, r0, r0
  78:	20001ae4 	andcs	r1, r0, r4, ror #21
  7c:	0000050e 	andeq	r0, r0, lr, lsl #10
	...
  88:	0000001c 	andeq	r0, r0, ip, lsl r0
  8c:	28c50002 	stmiacs	r5, {r1}^
  90:	00040000 	andeq	r0, r4, r0
  94:	00000000 	andeq	r0, r0, r0
  98:	20001ff4 	strdcs	r1, [r0], -r4
  9c:	000001c4 	andeq	r0, r0, r4, asr #3
	...
  a8:	0000001c 	andeq	r0, r0, ip, lsl r0
  ac:	2e0c0002 	cdpcs	0, 0, cr0, cr12, cr2, {0}
  b0:	00040000 	andeq	r0, r4, r0
  b4:	00000000 	andeq	r0, r0, r0
  b8:	200021b8 			; <UNDEFINED> instruction: 0x200021b8
  bc:	000003fc 	strdeq	r0, [r0], -ip
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
   0:	0000032e 	andeq	r0, r0, lr, lsr #6
   4:	01bd0002 			; <UNDEFINED> instruction: 0x01bd0002
   8:	01020000 	mrseq	r0, (UNDEF: 2)
   c:	000d0efb 	strdeq	r0, [sp], -fp
  10:	01010101 	tsteq	r1, r1, lsl #2
  14:	01000000 	mrseq	r0, (UNDEF: 0)
  18:	43010000 	movwmi	r0, #4096	; 0x1000
  1c:	69672f3a 	stmdbvs	r7!, {r1, r3, r4, r5, r8, r9, sl, fp, sp}^
  20:	41442f74 	hvcmi	17140	; 0x42f4
  24:	30393254 	eorscc	r3, r9, r4, asr r2
  28:	72614c2d 	rsbvc	r4, r1, #11520	; 0x2d00
  2c:	7379736d 	cmnvc	r9, #-1275068415	; 0xb4000001
  30:	2f6d6574 	svccs	0x006d6574
  34:	2f646f6b 	svccs	0x00646f6b
  38:	2f62696c 	svccs	0x0062696c
  3c:	334d5453 	movtcc	r5, #54355	; 0xd453
  40:	5f344632 	svcpl	0x00344632
  44:	2f62696c 	svccs	0x0062696c
  48:	334d5453 	movtcc	r5, #54355	; 0xd453
  4c:	78344632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, lr}
  50:	74535f78 	ldrbvc	r5, [r3], #-3960	; 0xfffff088
  54:	72655064 	rsbvc	r5, r5, #100	; 0x64
  58:	5f687069 	svcpl	0x00687069
  5c:	76697244 	strbtvc	r7, [r9], -r4, asr #4
  60:	732f7265 			; <UNDEFINED> instruction: 0x732f7265
  64:	63006372 	movwvs	r6, #882	; 0x372
  68:	73635c3a 	cmnvc	r3, #14848	; 0x3a00
  6c:	70706165 	rsbsvc	r6, r0, r5, ror #2
  70:	646f635c 	strbtvs	r6, [pc], #-860	; 78 <startup-0x1fffff88>
  74:	74696c65 	strbtvc	r6, [r9], #-3173	; 0xfffff39b
  78:	6f745c65 	svcvs	0x00745c65
  7c:	5c736c6f 	ldclpl	12, cr6, [r3], #-444	; 0xfffffe44
  80:	2d636367 	stclcs	3, cr6, [r3, #-412]!	; 0xfffffe64
  84:	5c6d7261 	sfmpl	f7, 2, [sp], #-388	; 0xfffffe7c
  88:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
  8c:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
  90:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
  94:	6e695c69 	cdpvs	12, 6, cr5, cr9, cr9, {3}
  98:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
  9c:	616d5c65 	cmnvs	sp, r5, ror #24
  a0:	6e696863 	cdpvs	8, 6, cr6, cr9, cr3, {3}
  a4:	3a630065 	bcc	18c0240 <startup-0x1e73fdc0>
  a8:	6573635c 	ldrbvs	r6, [r3, #-860]!	; 0xfffffca4
  ac:	5c707061 	ldclpl	0, cr7, [r0], #-388	; 0xfffffe7c
  b0:	65646f63 	strbvs	r6, [r4, #-3939]!	; 0xfffff09d
  b4:	6574696c 	ldrbvs	r6, [r4, #-2412]!	; 0xfffff694
  b8:	6f6f745c 	svcvs	0x006f745c
  bc:	675c736c 	ldrbvs	r7, [ip, -ip, ror #6]
  c0:	612d6363 			; <UNDEFINED> instruction: 0x612d6363
  c4:	615c6d72 	cmpvs	ip, r2, ror sp
  c8:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
  cc:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
  d0:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
  d4:	636e695c 	cmnvs	lr, #92, 18	; 0x170000
  d8:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
  dc:	7379735c 	cmnvc	r9, #92, 6	; 0x70000001
  e0:	2f2e2e00 	svccs	0x002e2e00
  e4:	2f62696c 	svccs	0x0062696c
  e8:	334d5453 	movtcc	r5, #54355	; 0xd453
  ec:	5f344632 	svcpl	0x00344632
  f0:	2f62696c 	svccs	0x0062696c
  f4:	49534d43 	ldmdbmi	r3, {r0, r1, r6, r8, sl, fp, lr}^
  f8:	6e692f53 	mcrvs	15, 3, r2, cr9, cr3, {2}
  fc:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
 100:	2e2e0065 	cdpcs	0, 2, cr0, cr14, cr5, {3}
 104:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
 108:	4d54532f 	ldclmi	3, cr5, [r4, #-188]	; 0xffffff44
 10c:	34463233 	strbcc	r3, [r6], #-563	; 0xfffffdcd
 110:	62696c5f 	rsbvs	r6, r9, #24320	; 0x5f00
 114:	4d54532f 	ldclmi	3, cr5, [r4, #-188]	; 0xffffff44
 118:	34463233 	strbcc	r3, [r6], #-563	; 0xfffffdcd
 11c:	535f7878 	cmppl	pc, #120, 16	; 0x780000
 120:	65506474 	ldrbvs	r6, [r0, #-1140]	; 0xfffffb8c
 124:	68706972 	ldmdavs	r0!, {r1, r4, r5, r6, r8, fp, sp, lr}^
 128:	6972445f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, sl, lr}^
 12c:	2f726576 	svccs	0x00726576
 130:	00636e69 	rsbeq	r6, r3, r9, ror #28
 134:	6d747300 	ldclvs	3, cr7, [r4, #-0]
 138:	34663233 	strbtcc	r3, [r6], #-563	; 0xfffffdcd
 13c:	755f7878 	ldrbvc	r7, [pc, #-2168]	; fffff8cc <_global_impure_ptr+0xdfffa8a8>
 140:	74726173 	ldrbtvc	r6, [r2], #-371	; 0xfffffe8d
 144:	0100632e 	tsteq	r0, lr, lsr #6
 148:	645f0000 	ldrbvs	r0, [pc], #-0	; 150 <startup-0x1ffffeb0>
 14c:	75616665 	strbvc	r6, [r1, #-1637]!	; 0xfffff99b
 150:	745f746c 	ldrbvc	r7, [pc], #-1132	; 158 <startup-0x1ffffea8>
 154:	73657079 	cmnvc	r5, #121	; 0x79
 158:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
 15c:	735f0000 	cmpvc	pc, #0
 160:	6e696474 	mcrvs	4, 3, r6, cr9, cr4, {3}
 164:	00682e74 	rsbeq	r2, r8, r4, ror lr
 168:	63000003 	movwvs	r0, #3
 16c:	5f65726f 	svcpl	0x0065726f
 170:	2e346d63 	cdpcs	13, 3, cr6, cr4, cr3, {3}
 174:	00040068 	andeq	r0, r4, r8, rrx
 178:	73797300 	cmnvc	r9, #0, 6
 17c:	5f6d6574 	svcpl	0x006d6574
 180:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
 184:	78346632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, sp, lr}
 188:	00682e78 	rsbeq	r2, r8, r8, ror lr
 18c:	73000005 	movwvc	r0, #5
 190:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
 194:	78783466 	ldmdavc	r8!, {r1, r2, r5, r6, sl, ip, sp}^
 198:	0500682e 	streq	r6, [r0, #-2094]	; 0xfffff7d2
 19c:	74730000 	ldrbtvc	r0, [r3], #-0
 1a0:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
 1a4:	5f787834 	svcpl	0x00787834
 1a8:	72617375 	rsbvc	r7, r1, #-738197503	; 0xd4000001
 1ac:	00682e74 	rsbeq	r2, r8, r4, ror lr
 1b0:	73000005 	movwvc	r0, #5
 1b4:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
 1b8:	78783466 	ldmdavc	r8!, {r1, r2, r5, r6, sl, ip, sp}^
 1bc:	6363725f 	cmnvs	r3, #-268435451	; 0xf0000005
 1c0:	0500682e 	streq	r6, [r0, #-2094]	; 0xfffff7d2
 1c4:	00000000 	andeq	r0, r0, r0
 1c8:	00100205 	andseq	r0, r0, r5, lsl #4
 1cc:	bb032000 	bllt	c81d4 <startup-0x1ff37e2c>
 1d0:	4c4e0101 	stfmie	f0, [lr], {1}
 1d4:	4a28034b 	bmi	a00f08 <startup-0x1f5ff0f8>
 1d8:	4c205a03 			; <UNDEFINED> instruction: 0x4c205a03
 1dc:	66230367 	strtvs	r0, [r3], -r7, ror #6
 1e0:	4c205f03 	stcmi	15, cr5, [r0], #-12
 1e4:	661e0367 	ldrvs	r0, [lr], -r7, ror #6
 1e8:	4c206403 	cfstrsmi	mvf6, [r0], #-12
 1ec:	66190367 	ldrvs	r0, [r9], -r7, ror #6
 1f0:	4c206903 			; <UNDEFINED> instruction: 0x4c206903
 1f4:	66140367 	ldrvs	r0, [r4], -r7, ror #6
 1f8:	4c206e03 	stcmi	14, cr6, [r0], #-12
 1fc:	4a0f034b 	bmi	3c0f30 <startup-0x1fc3f0d0>
 200:	4c207303 	stcmi	3, cr7, [r0], #-12
 204:	660a0367 	strvs	r0, [sl], -r7, ror #6
 208:	4c207a03 			; <UNDEFINED> instruction: 0x4c207a03
 20c:	0c036967 			; <UNDEFINED> instruction: 0x0c036967
 210:	4b594a08 	blmi	1652a38 <startup-0x1e9ad5c8>
 214:	2e13032f 	cdpcs	3, 1, cr0, cr3, cr15, {1}
 218:	4d694e4d 	stclmi	14, cr4, [r9, #-308]!	; 0xfffffecc
 21c:	2d67504d 	stclcs	0, cr5, [r7, #-308]!	; 0xfffffecc
 220:	4e4d4d6a 	cdpmi	13, 4, cr4, cr13, cr10, {3}
 224:	005a4e69 	subseq	r4, sl, r9, ror #28
 228:	06010402 	streq	r0, [r1], -r2, lsl #8
 22c:	5c4c064a 	mcrrpl	6, 4, r0, ip, cr10
 230:	e6f7694e 	ldrbt	r6, [r7], lr, asr #18
 234:	e8687785 	stmda	r8!, {r0, r2, r7, r8, r9, sl, ip, sp, lr}^
 238:	09034bda 	stmdbeq	r3, {r1, r3, r4, r6, r7, r8, r9, fp, lr}
 23c:	3d4b4cd6 	stclcc	12, cr4, [fp, #-856]	; 0xfffffca8
 240:	3d3d3d3d 	ldccc	13, cr3, [sp, #-244]!	; 0xffffff0c
 244:	594a0c03 	stmdbpl	sl, {r0, r1, sl, fp}^
 248:	4c2e0903 			; <UNDEFINED> instruction: 0x4c2e0903
 24c:	3fab4b50 	svccc	0x00ab4b50
 250:	6609034b 	strvs	r0, [r9], -fp, asr #6
 254:	3d3d3d4c 	ldccc	13, cr3, [sp, #-304]!	; 0xfffffed0
 258:	4a0b033d 	bmi	2c0f54 <startup-0x1fd3f0ac>
 25c:	1e974d79 	mrcne	13, 4, r4, cr7, cr9, {3}
 260:	740b0384 	strvc	r0, [fp], #-900	; 0xfffffc7c
 264:	039f8479 	orrseq	r8, pc, #2030043136	; 0x79000000
 268:	4d794a0d 	vldmdbmi	r9!, {s9-s21}
 26c:	03841e89 	orreq	r1, r4, #2192	; 0x890
 270:	4d79740b 	cfldrdmi	mvd7, [r9, #-44]!	; 0xffffffd4
 274:	03841e97 	orreq	r1, r4, #2416	; 0x970
 278:	757a742a 	ldrbvc	r7, [sl, #-1066]!	; 0xfffffbd6
 27c:	4f4a0903 	svcmi	0x004a0903
 280:	4a2e0367 	bmi	b81024 <startup-0x1f47efdc>
 284:	039f847a 	orrseq	r8, pc, #2046820352	; 0x7a000000
 288:	4d794a0b 	vldmdbmi	r9!, {s9-s19}
 28c:	03841e89 	orreq	r1, r4, #2192	; 0x890
 290:	83794a0c 	cmnhi	r9, #12, 20	; 0xc000
 294:	743e0391 	ldrtvc	r0, [lr], #-913	; 0xfffffc6f
 298:	03918379 	orrseq	r8, r1, #-469762047	; 0xe4000001
 29c:	4d794a0b 	vldmdbmi	r9!, {s9-s19}
 2a0:	03841e97 	orreq	r1, r4, #2416	; 0x970
 2a4:	834f7409 	movthi	r7, #62473	; 0xf409
 2a8:	794a2f03 	stmdbvc	sl, {r0, r1, r8, r9, sl, fp, sp}^
 2ac:	841e894d 	ldrhi	r8, [lr], #-2381	; 0xfffff6b3
 2b0:	4a00c503 	bmi	316c4 <startup-0x1ffce93c>
 2b4:	03bb8479 			; <UNDEFINED> instruction: 0x03bb8479
 2b8:	4d784a0b 	vldmdbmi	r8!, {s9-s19}
 2bc:	03841e89 	orreq	r1, r4, #2192	; 0x890
 2c0:	4d784a0b 	vldmdbmi	r8!, {s9-s19}
 2c4:	03841e89 	orreq	r1, r4, #2192	; 0x890
 2c8:	83794a39 	cmnhi	r9, #233472	; 0x39000
 2cc:	4a0b0391 	bmi	2c1118 <startup-0x1fd3eee8>
 2d0:	1e894d79 	mcrne	13, 4, r4, cr9, cr9, {3}
 2d4:	4a1f0384 	bmi	7c10ec <startup-0x1f83ef14>
 2d8:	1e984ec0 	cdpne	14, 9, cr4, cr8, cr0, {6}
 2dc:	00f203ae 	rscseq	r0, r2, lr, lsr #7
 2e0:	0367bb4a 	cmneq	r7, #75776	; 0x12800
 2e4:	69312e0c 	ldmdbvs	r1!, {r2, r3, r9, sl, fp, sp}
 2e8:	4c3e5a59 			; <UNDEFINED> instruction: 0x4c3e5a59
 2ec:	4c3e4e3e 	ldcmi	14, cr4, [lr], #-248	; 0xffffff08
 2f0:	03761e6c 	cmneq	r6, #108, 28	; 0x6c0
 2f4:	03754a15 	cmneq	r5, #86016	; 0x15000
 2f8:	5c924a0b 	vldmiapl	r2, {s8-s18}
 2fc:	1c033d4c 	stcne	13, cr3, [r3], {76}	; 0x4c
 300:	740b034a 	strvc	r0, [fp], #-842	; 0xfffffcb6
 304:	4a160367 	bmi	5810a8 <startup-0x1fa7ef58>
 308:	0c036775 	stceq	7, cr6, [r3], {117}	; 0x75
 30c:	5a59684a 	bpl	165a43c <startup-0x1e9a5bc4>
 310:	863e843e 			; <UNDEFINED> instruction: 0x863e843e
 314:	75595977 	ldrbvc	r5, [r9, #-2423]	; 0xfffff689
 318:	01040200 	mrseq	r0, R12_usr
 31c:	3e063c06 	cdpcc	12, 0, cr3, cr6, cr6, {0}
 320:	033d4d5c 	teqeq	sp, #92, 26	; 0x1700
 324:	03754a1d 	cmneq	r5, #118784	; 0x1d000
 328:	6759820b 	ldrbvs	r8, [r9, -fp, lsl #4]
 32c:	00040267 	andeq	r0, r4, r7, ror #4
 330:	01100101 	tsteq	r0, r1, lsl #2
 334:	00020000 	andeq	r0, r2, r0
 338:	000000e7 	andeq	r0, r0, r7, ror #1
 33c:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
 340:	0101000d 	tsteq	r1, sp
 344:	00000101 	andeq	r0, r0, r1, lsl #2
 348:	00000100 	andeq	r0, r0, r0, lsl #2
 34c:	2f3a4301 	svccs	0x003a4301
 350:	2f746967 	svccs	0x00746967
 354:	32544144 	subscc	r4, r4, #68, 2
 358:	4c2d3039 	stcmi	0, cr3, [sp], #-228	; 0xffffff1c
 35c:	736d7261 	cmnvc	sp, #268435462	; 0x10000006
 360:	65747379 	ldrbvs	r7, [r4, #-889]!	; 0xfffffc87
 364:	6f6b2f6d 	svcvs	0x006b2f6d
 368:	696c2f64 	stmdbvs	ip!, {r2, r5, r6, r8, r9, sl, fp, sp}^
 36c:	3a630062 	bcc	18c04fc <startup-0x1e73fb04>
 370:	6573635c 	ldrbvs	r6, [r3, #-860]!	; 0xfffffca4
 374:	5c707061 	ldclpl	0, cr7, [r0], #-388	; 0xfffffe7c
 378:	65646f63 	strbvs	r6, [r4, #-3939]!	; 0xfffff09d
 37c:	6574696c 	ldrbvs	r6, [r4, #-2412]!	; 0xfffff694
 380:	6f6f745c 	svcvs	0x006f745c
 384:	675c736c 	ldrbvs	r7, [ip, -ip, ror #6]
 388:	612d6363 			; <UNDEFINED> instruction: 0x612d6363
 38c:	615c6d72 	cmpvs	ip, r2, ror sp
 390:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
 394:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
 398:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
 39c:	636e695c 	cmnvs	lr, #92, 18	; 0x170000
 3a0:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
 3a4:	63616d5c 	cmnvs	r1, #92, 26	; 0x1700
 3a8:	656e6968 	strbvs	r6, [lr, #-2408]!	; 0xfffff698
 3ac:	5c3a6300 	ldcpl	3, cr6, [sl], #-0
 3b0:	61657363 	cmnvs	r5, r3, ror #6
 3b4:	635c7070 	cmpvs	ip, #112	; 0x70
 3b8:	6c65646f 	cfstrdvs	mvd6, [r5], #-444	; 0xfffffe44
 3bc:	5c657469 	cfstrdpl	mvd7, [r5], #-420	; 0xfffffe5c
 3c0:	6c6f6f74 	stclvs	15, cr6, [pc], #-464	; 1f8 <startup-0x1ffffe08>
 3c4:	63675c73 	cmnvs	r7, #29440	; 0x7300
 3c8:	72612d63 	rsbvc	r2, r1, #6336	; 0x18c0
 3cc:	72615c6d 	rsbvc	r5, r1, #27904	; 0x6d00
 3d0:	6f6e2d6d 	svcvs	0x006e2d6d
 3d4:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
 3d8:	5c696261 	sfmpl	f6, 2, [r9], #-388	; 0xfffffe7c
 3dc:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
 3e0:	5c656475 	cfstrdpl	mvd6, [r5], #-468	; 0xfffffe2c
 3e4:	00737973 	rsbseq	r7, r3, r3, ror r9
 3e8:	66756200 	ldrbtvs	r6, [r5], -r0, lsl #4
 3ec:	2e726566 	cdpcs	5, 7, cr6, cr2, cr6, {3}
 3f0:	00010063 	andeq	r0, r1, r3, rrx
 3f4:	65645f00 	strbvs	r5, [r4, #-3840]!	; 0xfffff100
 3f8:	6c756166 	ldfvse	f6, [r5], #-408	; 0xfffffe68
 3fc:	79745f74 	ldmdbvc	r4!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
 400:	2e736570 	mrccs	5, 3, r6, cr3, cr0, {3}
 404:	00020068 	andeq	r0, r2, r8, rrx
 408:	74735f00 	ldrbtvc	r5, [r3], #-3840	; 0xfffff100
 40c:	746e6964 	strbtvc	r6, [lr], #-2404	; 0xfffff69c
 410:	0300682e 	movweq	r6, #2094	; 0x82e
 414:	75620000 	strbvc	r0, [r2, #-0]!
 418:	72656666 	rsbvc	r6, r5, #106954752	; 0x6600000
 41c:	0100682e 	tsteq	r0, lr, lsr #16
 420:	00000000 	andeq	r0, r0, r0
 424:	0a100205 	beq	400c40 <startup-0x1fbff3c0>
 428:	4b152000 	blmi	548430 <startup-0x1fab7bd0>
 42c:	4e4b4b4b 	vmlsmi.f64	d20, d11, d11
 430:	c9325976 	ldmdbgt	r2!, {r1, r2, r4, r5, r6, r8, fp, ip, lr}
 434:	214c5985 	smlalbbcs	r5, ip, r5, r9
 438:	32595a4e 	subscc	r5, r9, #319488	; 0x4e000
 43c:	4c5985c9 	cfldr64mi	mvdx8, [r9], {201}	; 0xc9
 440:	00040221 	andeq	r0, r4, r1, lsr #4
 444:	04390101 	ldrteq	r0, [r9], #-257	; 0xfffffeff
 448:	00020000 	andeq	r0, r2, r0
 44c:	000001dc 	ldrdeq	r0, [r0], -ip
 450:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
 454:	0101000d 	tsteq	r1, sp
 458:	00000101 	andeq	r0, r0, r1, lsl #2
 45c:	00000100 	andeq	r0, r0, r0, lsl #2
 460:	2f2e2e01 	svccs	0x002e2e01
 464:	2f62696c 	svccs	0x0062696c
 468:	334d5453 	movtcc	r5, #54355	; 0xd453
 46c:	5f344632 	svcpl	0x00344632
 470:	2f62696c 	svccs	0x0062696c
 474:	49534d43 	ldmdbmi	r3, {r0, r1, r6, r8, sl, fp, lr}^
 478:	6e692f53 	mcrvs	15, 3, r2, cr9, cr3, {2}
 47c:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
 480:	2e2e0065 	cdpcs	0, 2, cr0, cr14, cr5, {3}
 484:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
 488:	4d54532f 	ldclmi	3, cr5, [r4, #-188]	; 0xffffff44
 48c:	34463233 	strbcc	r3, [r6], #-563	; 0xfffffdcd
 490:	62696c5f 	rsbvs	r6, r9, #24320	; 0x5f00
 494:	4d54532f 	ldclmi	3, cr5, [r4, #-188]	; 0xffffff44
 498:	34463233 	strbcc	r3, [r6], #-563	; 0xfffffdcd
 49c:	535f7878 	cmppl	pc, #120, 16	; 0x780000
 4a0:	65506474 	ldrbvs	r6, [r0, #-1140]	; 0xfffffb8c
 4a4:	68706972 	ldmdavs	r0!, {r1, r4, r5, r6, r8, fp, sp, lr}^
 4a8:	6972445f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, sl, lr}^
 4ac:	2f726576 	svccs	0x00726576
 4b0:	00637273 	rsbeq	r7, r3, r3, ror r2
 4b4:	672f3a43 	strvs	r3, [pc, -r3, asr #20]!
 4b8:	442f7469 	strtmi	r7, [pc], #-1129	; 4c0 <startup-0x1ffffb40>
 4bc:	39325441 	ldmdbcc	r2!, {r0, r6, sl, ip, lr}
 4c0:	614c2d30 	cmpvs	ip, r0, lsr sp
 4c4:	79736d72 	ldmdbvc	r3!, {r1, r4, r5, r6, r8, sl, fp, sp, lr}^
 4c8:	6d657473 	cfstrdvs	mvd7, [r5, #-460]!	; 0xfffffe34
 4cc:	646f6b2f 	strbtvs	r6, [pc], #-2863	; 4d4 <startup-0x1ffffb2c>
 4d0:	6f6f442f 	svcvs	0x006f442f
 4d4:	2e2e0072 	mcrcs	0, 1, r0, cr14, cr2, {3}
 4d8:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
 4dc:	4d54532f 	ldclmi	3, cr5, [r4, #-188]	; 0xffffff44
 4e0:	34463233 	strbcc	r3, [r6], #-563	; 0xfffffdcd
 4e4:	62696c5f 	rsbvs	r6, r9, #24320	; 0x5f00
 4e8:	4d54532f 	ldclmi	3, cr5, [r4, #-188]	; 0xffffff44
 4ec:	34463233 	strbcc	r3, [r6], #-563	; 0xfffffdcd
 4f0:	535f7878 	cmppl	pc, #120, 16	; 0x780000
 4f4:	65506474 	ldrbvs	r6, [r0, #-1140]	; 0xfffffb8c
 4f8:	68706972 	ldmdavs	r0!, {r1, r4, r5, r6, r8, fp, sp, lr}^
 4fc:	6972445f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, sl, lr}^
 500:	2f726576 	svccs	0x00726576
 504:	00636e69 	rsbeq	r6, r3, r9, ror #28
 508:	635c3a63 	cmpvs	ip, #405504	; 0x63000
 50c:	70616573 	rsbvc	r6, r1, r3, ror r5
 510:	6f635c70 	svcvs	0x00635c70
 514:	696c6564 	stmdbvs	ip!, {r2, r5, r6, r8, sl, sp, lr}^
 518:	745c6574 	ldrbvc	r6, [ip], #-1396	; 0xfffffa8c
 51c:	736c6f6f 	cmnvc	ip, #444	; 0x1bc
 520:	6363675c 	cmnvs	r3, #92, 14	; 0x1700000
 524:	6d72612d 	ldfvse	f6, [r2, #-180]!	; 0xffffff4c
 528:	6d72615c 	ldfvse	f6, [r2, #-368]!	; 0xfffffe90
 52c:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
 530:	61652d65 	cmnvs	r5, r5, ror #26
 534:	695c6962 	ldmdbvs	ip, {r1, r5, r6, r8, fp, sp, lr}^
 538:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
 53c:	6d5c6564 	cfldr64vs	mvdx6, [ip, #-400]	; 0xfffffe70
 540:	69686361 	stmdbvs	r8!, {r0, r5, r6, r8, r9, sp, lr}^
 544:	6300656e 	movwvs	r6, #1390	; 0x56e
 548:	73635c3a 	cmnvc	r3, #14848	; 0x3a00
 54c:	70706165 	rsbsvc	r6, r0, r5, ror #2
 550:	646f635c 	strbtvs	r6, [pc], #-860	; 558 <startup-0x1ffffaa8>
 554:	74696c65 	strbtvc	r6, [r9], #-3173	; 0xfffff39b
 558:	6f745c65 	svcvs	0x00745c65
 55c:	5c736c6f 	ldclpl	12, cr6, [r3], #-444	; 0xfffffe44
 560:	2d636367 	stclcs	3, cr6, [r3, #-412]!	; 0xfffffe64
 564:	5c6d7261 	sfmpl	f7, 2, [sp], #-388	; 0xfffffe7c
 568:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
 56c:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
 570:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
 574:	6e695c69 	cdpvs	12, 6, cr5, cr9, cr9, {3}
 578:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
 57c:	79735c65 	ldmdbvc	r3!, {r0, r2, r5, r6, sl, fp, ip, lr}^
 580:	63000073 	movwvs	r0, #115	; 0x73
 584:	5f65726f 	svcpl	0x0065726f
 588:	2e346d63 	cdpcs	13, 3, cr6, cr4, cr3, {3}
 58c:	00010068 	andeq	r0, r1, r8, rrx
 590:	6d747300 	ldclvs	3, cr7, [r4, #-0]
 594:	34663233 	strbtcc	r3, [r6], #-563	; 0xfffffdcd
 598:	725f7878 	subsvc	r7, pc, #120, 16	; 0x780000
 59c:	632e6363 			; <UNDEFINED> instruction: 0x632e6363
 5a0:	00000200 	andeq	r0, r0, r0, lsl #4
 5a4:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
 5a8:	2e707574 	mrccs	5, 3, r7, cr0, cr4, {3}
 5ac:	00030063 	andeq	r0, r3, r3, rrx
 5b0:	6d747300 	ldclvs	3, cr7, [r4, #-0]
 5b4:	34663233 	strbtcc	r3, [r6], #-563	; 0xfffffdcd
 5b8:	682e7878 	stmdavs	lr!, {r3, r4, r5, r6, fp, ip, sp, lr}
 5bc:	00000400 	andeq	r0, r0, r0, lsl #8
 5c0:	6665645f 			; <UNDEFINED> instruction: 0x6665645f
 5c4:	746c7561 	strbtvc	r7, [ip], #-1377	; 0xfffffa9f
 5c8:	7079745f 	rsbsvc	r7, r9, pc, asr r4
 5cc:	682e7365 	stmdavs	lr!, {r0, r2, r5, r6, r8, r9, ip, sp, lr}
 5d0:	00000500 	andeq	r0, r0, r0, lsl #10
 5d4:	6474735f 	ldrbtvs	r7, [r4], #-863	; 0xfffffca1
 5d8:	2e746e69 	cdpcs	14, 7, cr6, cr4, cr9, {3}
 5dc:	00060068 	andeq	r0, r6, r8, rrx
 5e0:	73797300 	cmnvc	r9, #0, 6
 5e4:	5f6d6574 	svcpl	0x006d6574
 5e8:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
 5ec:	78346632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, sp, lr}
 5f0:	00682e78 	rsbeq	r2, r8, r8, ror lr
 5f4:	73000004 	movwvc	r0, #4
 5f8:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
 5fc:	78783466 	ldmdavc	r8!, {r1, r2, r5, r6, sl, ip, sp}^
 600:	6363725f 	cmnvs	r3, #-268435451	; 0xf0000005
 604:	0400682e 	streq	r6, [r0], #-2094	; 0xfffff7d2
 608:	74730000 	ldrbtvc	r0, [r3], #-0
 60c:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
 610:	5f787834 	svcpl	0x00787834
 614:	6f697067 	svcvs	0x00697067
 618:	0400682e 	streq	r6, [r0], #-2094	; 0xfffff7d2
 61c:	74730000 	ldrbtvc	r0, [r3], #-0
 620:	75747261 	ldrbvc	r7, [r4, #-609]!	; 0xfffffd9f
 624:	00682e70 	rsbeq	r2, r8, r0, ror lr
 628:	00000003 	andeq	r0, r0, r3
 62c:	f8020500 			; <UNDEFINED> instruction: 0xf8020500
 630:	0320000a 			; <UNDEFINED> instruction: 0x0320000a
 634:	75010cdd 	strvc	r0, [r1, #-3293]	; 0xfffff323
 638:	d81ecd4b 	ldmdale	lr, {r0, r1, r3, r6, r8, sl, fp, lr, pc}
 63c:	9000fc03 	andls	pc, r0, r3, lsl #24
 640:	0402004b 	streq	r0, [r2], #-75	; 0xffffffb5
 644:	06580601 	ldrbeq	r0, [r8], -r1, lsl #12
 648:	3d674b30 	vstmdbcc	r7!, {d20-<overflow reg d43>}
 64c:	0204213f 	andeq	r2, r4, #-1073741809	; 0xc000000f
 650:	8273f703 	rsbshi	pc, r3, #786432	; 0xc0000
 654:	693f6930 	ldmdbvs	pc!, {r4, r5, r8, fp, sp, lr}	; <UNPREDICTABLE>
 658:	694e4f40 	stmdbvs	lr, {r6, r8, r9, sl, fp, lr}^
 65c:	1703503f 	smladxne	r3, pc, r0, r5	; <UNPREDICTABLE>
 660:	4b3f6be4 	blmi	fdb5f8 <startup-0x1f024a08>
 664:	3d740f03 	ldclcc	15, cr0, [r4, #-12]!
 668:	02003d2f 	andeq	r3, r0, #3008	; 0xbc0
 66c:	00400204 	subeq	r0, r0, r4, lsl #4
 670:	67020402 	strvs	r0, [r2, -r2, lsl #8]
 674:	02040200 	andeq	r0, r4, #0, 4
 678:	0402003d 	streq	r0, [r2], #-61	; 0xffffffc3
 67c:	06580601 	ldrbeq	r0, [r8], -r1, lsl #12
 680:	3e4e5a4c 	vmlscc.f32	s11, s28, s24
 684:	4a0b032f 	bmi	2c1348 <startup-0x1fd3ecb8>
 688:	4d3f3267 	lfmmi	f3, 4, [pc, #-412]!	; 4f4 <startup-0x1ffffb0c>
 68c:	15033d69 	strne	r3, [r3, #-3433]	; 0xfffff297
 690:	034b6a74 	movteq	r6, #47732	; 0xba74
 694:	3f6c6614 	svccc	0x006c6614
 698:	660b033f 			; <UNDEFINED> instruction: 0x660b033f
 69c:	3d207903 			; <UNDEFINED> instruction: 0x3d207903
 6a0:	03243d23 			; <UNDEFINED> instruction: 0x03243d23
 6a4:	4b6a740f 	blmi	1a9d6e8 <startup-0x1e562918>
 6a8:	6600de03 	strvs	sp, [r0], -r3, lsl #28
 6ac:	3e2dbb7c 	vmovcc.16	d13[3], fp
 6b0:	69660e03 	stmdbvs	r6!, {r0, r1, r9, sl, fp}^
 6b4:	661a034b 	ldrvs	r0, [sl], -fp, asr #6
 6b8:	8503835d 	strhi	r8, [r3, #-861]	; 0xfffffca3
 6bc:	4b697401 	blmi	1a5d6c8 <startup-0x1e5a2938>
 6c0:	6600e903 	strvs	lr, [r0], -r3, lsl #18
 6c4:	0d03ad6c 	stceq	13, cr10, [r3, #-432]	; 0xfffffe50
 6c8:	034b6974 	movteq	r6, #47476	; 0xb974
 6cc:	4b69660e 	blmi	1a59f0c <startup-0x1e5a60f4>
 6d0:	59661503 	stmdbpl	r6!, {r0, r1, r8, sl, ip}^
 6d4:	694d3f34 	stmdbvs	sp, {r2, r4, r5, r8, r9, sl, fp, ip, sp}^
 6d8:	90180341 	andsls	r0, r8, r1, asr #6
 6dc:	4d3f3459 	cfldrsmi	mvf3, [pc, #-356]!	; 580 <startup-0x1ffffa80>
 6e0:	b3034169 	movwlt	r4, #12649	; 0x3169
 6e4:	334b7401 	movtcc	r7, #46081	; 0xb401
 6e8:	3d4d4d3f 	stclcc	13, cr4, [sp, #-252]	; 0xffffff04
 6ec:	2f660d03 	svccs	0x00660d03
 6f0:	66170367 	ldrvs	r0, [r7], -r7, ror #6
 6f4:	4d3f334b 	ldcmi	3, cr3, [pc, #-300]!	; 5d0 <startup-0x1ffffa30>
 6f8:	0f033d4d 	svceq	0x00033d4d
 6fc:	3f334b66 	svccc	0x00334b66
 700:	033d4d4d 	teqeq	sp, #4928	; 0x1340
 704:	334b820f 	movtcc	r8, #45583	; 0xb20f
 708:	3d5b4d3f 	ldclcc	13, cr4, [fp, #-252]	; 0xffffff04
 70c:	4b902403 	blmi	fe409720 <_global_impure_ptr+0xde4046fc>
 710:	3d775ac0 	vldmdbcc	r7!, {s11-s202}
 714:	67263d22 	strvs	r3, [r6, -r2, lsr #26]!
 718:	cbdb3f5a 	blgt	ff6d0488 <_global_impure_ptr+0xdf6cb464>
 71c:	1b038383 	blne	e1530 <startup-0x1ff1ead0>
 720:	59253d20 	stmdbpl	r5!, {r5, r8, sl, fp, ip, sp}
 724:	6769683d 			; <UNDEFINED> instruction: 0x6769683d
 728:	6769683d 			; <UNDEFINED> instruction: 0x6769683d
 72c:	0367683d 	cmneq	r7, #3997696	; 0x3d0000
 730:	334bba3f 	movtcc	fp, #47679	; 0xba3f
 734:	694d3f84 	stmdbvs	sp, {r2, r7, r8, r9, sl, fp, ip, sp}^
 738:	0a038340 	beq	e1440 <startup-0x1ff1ebc0>
 73c:	034b6a9e 	movteq	r6, #47774	; 0xba9e
 740:	4b69660c 	blmi	1a59f78 <startup-0x1e5a6088>
 744:	6601b803 	strvs	fp, [r1], -r3, lsl #16
 748:	16033d4e 	strne	r3, [r3], -lr, asr #26
 74c:	4d334b74 	vldmdbmi	r3!, {d4-<overflow reg d61>}
 750:	034b4d4d 	movteq	r4, #48461	; 0xbd4d
 754:	334b8214 	movtcc	r8, #45588	; 0xb214
 758:	4b4d4d4d 	blmi	1353c94 <startup-0x1ecac36c>
 75c:	4b821103 	blmi	fe084b70 <_global_impure_ptr+0xde07fb4c>
 760:	5b4d4d33 	blpl	1353c34 <startup-0x1ecac3cc>
 764:	7410034b 	ldrvc	r0, [r0], #-843	; 0xfffffcb5
 768:	4d4d334b 	stclmi	3, cr3, [sp, #-300]	; 0xfffffed4
 76c:	d3034b69 	movwle	r4, #15209	; 0x3b69
 770:	334b8200 	movtcc	r8, #45568	; 0xb200
 774:	4b4d4d4d 	blmi	1353cb0 <startup-0x1ecac350>
 778:	8200f003 	andhi	pc, r0, #3
 77c:	25033d4e 	strcs	r3, [r3, #-3406]	; 0xfffff2b2
 780:	6c4c7974 	mcrrvs	9, 7, r7, ip, cr4	; <UNPREDICTABLE>
 784:	1303761e 	movwne	r7, #13854	; 0x361e
 788:	6c4c7974 	mcrrvs	9, 7, r7, ip, cr4	; <UNPREDICTABLE>
 78c:	1103761e 	tstne	r3, lr, lsl r6
 790:	6c4c7974 	mcrrvs	9, 7, r7, ip, cr4	; <UNPREDICTABLE>
 794:	2c03761e 	stccs	6, cr7, [r3], {30}
 798:	6c4c7974 	mcrrvs	9, 7, r7, ip, cr4	; <UNPREDICTABLE>
 79c:	2703761e 	smladcs	r3, lr, r6, r7
 7a0:	6c4c7974 	mcrrvs	9, 7, r7, ip, cr4	; <UNPREDICTABLE>
 7a4:	1d03761e 	stcne	6, cr7, [r3, #-120]	; 0xffffff88
 7a8:	6c4c7974 	mcrrvs	9, 7, r7, ip, cr4	; <UNPREDICTABLE>
 7ac:	1003761e 	andne	r7, r3, lr, lsl r6
 7b0:	6c4c7974 	mcrrvs	9, 7, r7, ip, cr4	; <UNPREDICTABLE>
 7b4:	0e03761e 	mcreq	6, 0, r7, cr3, cr14, {0}
 7b8:	6c4c7974 	mcrrvs	9, 7, r7, ip, cr4	; <UNPREDICTABLE>
 7bc:	2903761e 	stmdbcs	r3, {r1, r2, r3, r4, r9, sl, ip, sp, lr}
 7c0:	6c4c7874 	mcrrvs	8, 7, r7, ip, cr4
 7c4:	2303761e 	movwcs	r7, #13854	; 0x361e
 7c8:	6c4c7874 	mcrrvs	8, 7, r7, ip, cr4
 7cc:	2503761e 	strcs	r7, [r3, #-1566]	; 0xfffff9e2
 7d0:	6c4c7874 	mcrrvs	8, 7, r7, ip, cr4
 7d4:	1403761e 	strne	r7, [r3], #-1566	; 0xfffff9e2
 7d8:	6c4c7874 	mcrrvs	8, 7, r7, ip, cr4
 7dc:	1203761e 	andne	r7, r3, #31457280	; 0x1e00000
 7e0:	6c4c7874 	mcrrvs	8, 7, r7, ip, cr4
 7e4:	2d03761e 	stccs	6, cr7, [r3, #-120]	; 0xffffff88
 7e8:	6c4c7874 	mcrrvs	8, 7, r7, ip, cr4
 7ec:	2803761e 	stmdacs	r3, {r1, r2, r3, r4, r9, sl, ip, sp, lr}
 7f0:	6c4c7874 	mcrrvs	8, 7, r7, ip, cr4
 7f4:	0c03761e 	stceq	6, cr7, [r3], {30}
 7f8:	6c4c6a74 	mcrrvs	10, 7, r6, ip, cr4
 7fc:	ac03681e 	stcge	8, cr6, [r3], {30}
 800:	4d947402 	cfldrsmi	mvf7, [r4, #8]
 804:	03ae1e97 			; <UNDEFINED> instruction: 0x03ae1e97
 808:	2f676617 	svccs	0x00676617
 80c:	3e59502f 	cdpcc	0, 5, cr5, cr9, cr15, {1}
 810:	404e3e4c 	submi	r3, lr, ip, asr #28
 814:	4d5c7659 	ldclmi	6, cr7, [ip, #-356]	; 0xfffffe9c
 818:	660a033d 			; <UNDEFINED> instruction: 0x660a033d
 81c:	11037530 	tstne	r3, r0, lsr r5
 820:	68506758 	ldmdavs	r0, {r3, r4, r6, r8, r9, sl, sp, lr}^
 824:	033d4d5c 	teqeq	sp, #92, 26	; 0x1700
 828:	4b6c6611 	blmi	1b1a074 <startup-0x1e4e5f8c>
 82c:	c1030304 	tstgt	r3, r4, lsl #6
 830:	4b406667 	blmi	101a1d4 <startup-0x1efe5e2c>
 834:	3d3d3d4b 	ldccc	13, cr3, [sp, #-300]!	; 0xfffffed4
 838:	3d3d4b69 	fldmdbxcc	sp!, {d4-d55}	;@ Deprecated
 83c:	2f77673d 	svccs	0x0077673d
 840:	3e3e5b59 			; <UNDEFINED> instruction: 0x3e3e5b59
 844:	2f3da16c 	svccs	0x003da16c
 848:	7675302f 	ldrbtvc	r3, [r5], -pc, lsr #32
 84c:	e7087576 	smlsdx	r8, r6, r5, r7
 850:	413d4b4b 	teqmi	sp, fp, asr #22
 854:	953e085a 	ldrls	r0, [lr, #-2138]!	; 0xfffff7a6
 858:	83ca08d8 	bichi	r0, sl, #216, 16	; 0xd80000
 85c:	02040200 	andeq	r0, r4, #0, 4
 860:	12087203 	andne	r7, r8, #805306368	; 0x30000000
 864:	01040200 	mrseq	r0, R12_usr
 868:	02586606 	subseq	r6, r8, #6291456	; 0x600000
 86c:	0101000f 	tsteq	r1, pc
 870:	05000304 	streq	r0, [r0, #-772]	; 0xfffffcfc
 874:	00000002 	andeq	r0, r0, r2
 878:	01130320 	tsteq	r3, r0, lsr #6
 87c:	03025e13 	movweq	r5, #11795	; 0x2e13
 880:	94010100 	strls	r0, [r1], #-256	; 0xffffff00
 884:	02000002 	andeq	r0, r0, #2
 888:	0001a800 	andeq	sl, r1, r0, lsl #16
 88c:	fb010200 	blx	41096 <startup-0x1ffbef6a>
 890:	01000d0e 	tsteq	r0, lr, lsl #26
 894:	00010101 	andeq	r0, r1, r1, lsl #2
 898:	00010000 	andeq	r0, r1, r0
 89c:	3a430100 	bcc	10c0ca4 <startup-0x1ef3f35c>
 8a0:	7469672f 	strbtvc	r6, [r9], #-1839	; 0xfffff8d1
 8a4:	5441442f 	strbpl	r4, [r1], #-1071	; 0xfffffbd1
 8a8:	2d303932 			; <UNDEFINED> instruction: 0x2d303932
 8ac:	6d72614c 	ldfvse	f6, [r2, #-304]!	; 0xfffffed0
 8b0:	74737973 	ldrbtvc	r7, [r3], #-2419	; 0xfffff68d
 8b4:	6b2f6d65 	blvs	bdbe50 <startup-0x1f4241b0>
 8b8:	6c2f646f 	cfstrsvs	mvf6, [pc], #-444	; 704 <startup-0x1ffff8fc>
 8bc:	532f6269 			; <UNDEFINED> instruction: 0x532f6269
 8c0:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
 8c4:	6c5f3446 	cfldrdvs	mvd3, [pc], {70}	; 0x46
 8c8:	532f6269 			; <UNDEFINED> instruction: 0x532f6269
 8cc:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
 8d0:	78783446 	ldmdavc	r8!, {r1, r2, r6, sl, ip, sp}^
 8d4:	6474535f 	ldrbtvs	r5, [r4], #-863	; 0xfffffca1
 8d8:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
 8dc:	445f6870 	ldrbmi	r6, [pc], #-2160	; 8e4 <startup-0x1ffff71c>
 8e0:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
 8e4:	72732f72 	rsbsvc	r2, r3, #456	; 0x1c8
 8e8:	3a630063 	bcc	18c0a7c <startup-0x1e73f584>
 8ec:	6573635c 	ldrbvs	r6, [r3, #-860]!	; 0xfffffca4
 8f0:	5c707061 	ldclpl	0, cr7, [r0], #-388	; 0xfffffe7c
 8f4:	65646f63 	strbvs	r6, [r4, #-3939]!	; 0xfffff09d
 8f8:	6574696c 	ldrbvs	r6, [r4, #-2412]!	; 0xfffff694
 8fc:	6f6f745c 	svcvs	0x006f745c
 900:	675c736c 	ldrbvs	r7, [ip, -ip, ror #6]
 904:	612d6363 			; <UNDEFINED> instruction: 0x612d6363
 908:	615c6d72 	cmpvs	ip, r2, ror sp
 90c:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
 910:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
 914:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
 918:	636e695c 	cmnvs	lr, #92, 18	; 0x170000
 91c:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
 920:	63616d5c 	cmnvs	r1, #92, 26	; 0x1700
 924:	656e6968 	strbvs	r6, [lr, #-2408]!	; 0xfffff698
 928:	5c3a6300 	ldcpl	3, cr6, [sl], #-0
 92c:	61657363 	cmnvs	r5, r3, ror #6
 930:	635c7070 	cmpvs	ip, #112	; 0x70
 934:	6c65646f 	cfstrdvs	mvd6, [r5], #-444	; 0xfffffe44
 938:	5c657469 	cfstrdpl	mvd7, [r5], #-420	; 0xfffffe5c
 93c:	6c6f6f74 	stclvs	15, cr6, [pc], #-464	; 774 <startup-0x1ffff88c>
 940:	63675c73 	cmnvs	r7, #29440	; 0x7300
 944:	72612d63 	rsbvc	r2, r1, #6336	; 0x18c0
 948:	72615c6d 	rsbvc	r5, r1, #27904	; 0x6d00
 94c:	6f6e2d6d 	svcvs	0x006e2d6d
 950:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
 954:	5c696261 	sfmpl	f6, 2, [r9], #-388	; 0xfffffe7c
 958:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
 95c:	5c656475 	cfstrdpl	mvd6, [r5], #-468	; 0xfffffe2c
 960:	00737973 	rsbseq	r7, r3, r3, ror r9
 964:	6c2f2e2e 	stcvs	14, cr2, [pc], #-184	; 8b4 <startup-0x1ffff74c>
 968:	532f6269 			; <UNDEFINED> instruction: 0x532f6269
 96c:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
 970:	6c5f3446 	cfldrdvs	mvd3, [pc], {70}	; 0x46
 974:	432f6269 			; <UNDEFINED> instruction: 0x432f6269
 978:	5349534d 	movtpl	r5, #37709	; 0x934d
 97c:	636e692f 	cmnvs	lr, #770048	; 0xbc000
 980:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
 984:	2f2e2e00 	svccs	0x002e2e00
 988:	2f62696c 	svccs	0x0062696c
 98c:	334d5453 	movtcc	r5, #54355	; 0xd453
 990:	5f344632 	svcpl	0x00344632
 994:	2f62696c 	svccs	0x0062696c
 998:	334d5453 	movtcc	r5, #54355	; 0xd453
 99c:	78344632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, lr}
 9a0:	74535f78 	ldrbvc	r5, [r3], #-3960	; 0xfffff088
 9a4:	72655064 	rsbvc	r5, r5, #100	; 0x64
 9a8:	5f687069 	svcpl	0x00687069
 9ac:	76697244 	strbtvc	r7, [r9], -r4, asr #4
 9b0:	692f7265 	stmdbvs	pc!, {r0, r2, r5, r6, r9, ip, sp, lr}	; <UNPREDICTABLE>
 9b4:	0000636e 	andeq	r6, r0, lr, ror #6
 9b8:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
 9bc:	78346632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, sp, lr}
 9c0:	70675f78 	rsbvc	r5, r7, r8, ror pc
 9c4:	632e6f69 			; <UNDEFINED> instruction: 0x632e6f69
 9c8:	00000100 	andeq	r0, r0, r0, lsl #2
 9cc:	6665645f 			; <UNDEFINED> instruction: 0x6665645f
 9d0:	746c7561 	strbtvc	r7, [ip], #-1377	; 0xfffffa9f
 9d4:	7079745f 	rsbsvc	r7, r9, pc, asr r4
 9d8:	682e7365 	stmdavs	lr!, {r0, r2, r5, r6, r8, r9, ip, sp, lr}
 9dc:	00000200 	andeq	r0, r0, r0, lsl #4
 9e0:	6474735f 	ldrbtvs	r7, [r4], #-863	; 0xfffffca1
 9e4:	2e746e69 	cdpcs	14, 7, cr6, cr4, cr9, {3}
 9e8:	00030068 	andeq	r0, r3, r8, rrx
 9ec:	726f6300 	rsbvc	r6, pc, #0, 6
 9f0:	6d635f65 	stclvs	15, cr5, [r3, #-404]!	; 0xfffffe6c
 9f4:	00682e34 	rsbeq	r2, r8, r4, lsr lr
 9f8:	73000004 	movwvc	r0, #4
 9fc:	65747379 	ldrbvs	r7, [r4, #-889]!	; 0xfffffc87
 a00:	74735f6d 	ldrbtvc	r5, [r3], #-3949	; 0xfffff093
 a04:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
 a08:	2e787834 	mrccs	8, 3, r7, cr8, cr4, {1}
 a0c:	00050068 	andeq	r0, r5, r8, rrx
 a10:	6d747300 	ldclvs	3, cr7, [r4, #-0]
 a14:	34663233 	strbtcc	r3, [r6], #-563	; 0xfffffdcd
 a18:	682e7878 	stmdavs	lr!, {r3, r4, r5, r6, fp, ip, sp, lr}
 a1c:	00000500 	andeq	r0, r0, r0, lsl #10
 a20:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
 a24:	78346632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, sp, lr}
 a28:	70675f78 	rsbvc	r5, r7, r8, ror pc
 a2c:	682e6f69 	stmdavs	lr!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}
 a30:	00000500 	andeq	r0, r0, r0, lsl #10
 a34:	02050000 	andeq	r0, r5, #0
 a38:	20001ae4 	andcs	r1, r0, r4, ror #21
 a3c:	0100ff03 	tsteq	r0, r3, lsl #30	; <UNPREDICTABLE>
 a40:	034b4c4e 	movteq	r4, #48206	; 0xbc4e
 a44:	4a034a38 	bmi	d332c <startup-0x1ff2ccd4>
 a48:	034b4c20 	movteq	r4, #48160	; 0xbc20
 a4c:	4f034a33 	svcmi	0x00034a33
 a50:	034b4c20 	movteq	r4, #48160	; 0xbc20
 a54:	54034a2e 	strpl	r4, [r3], #-2606	; 0xfffff5d2
 a58:	034b4c20 	movteq	r4, #48160	; 0xbc20
 a5c:	59034a29 	stmdbpl	r3, {r0, r3, r5, r9, fp, lr}
 a60:	034b4c20 	movteq	r4, #48160	; 0xbc20
 a64:	5e034a24 	vmlapl.f32	s8, s6, s9
 a68:	034b4c20 	movteq	r4, #48160	; 0xbc20
 a6c:	63034a1f 	movwvs	r4, #14879	; 0x3a1f
 a70:	034b4c20 	movteq	r4, #48160	; 0xbc20
 a74:	68034a1a 	stmdavs	r3, {r1, r3, r4, r9, fp, lr}
 a78:	034b4c20 	movteq	r4, #48160	; 0xbc20
 a7c:	6e034a15 			; <UNDEFINED> instruction: 0x6e034a15
 a80:	03674c20 	cmneq	r7, #32, 24	; 0x2000
 a84:	7303660f 	movwvc	r6, #13839	; 0x360f
 a88:	03674c20 	cmneq	r7, #32, 24	; 0x2000
 a8c:	7a03660a 	bvc	da2bc <startup-0x1ff25d44>
 a90:	69674c20 	stmdbvs	r7!, {r5, sl, fp, lr}^
 a94:	90080c03 	andls	r0, r8, r3, lsl #24
 a98:	660a0359 			; <UNDEFINED> instruction: 0x660a0359
 a9c:	4c5a5a3e 	vmovmi	r5, sl, s29, s30
 aa0:	0200bcad 	andeq	fp, r0, #44288	; 0xad00
 aa4:	4a060104 	bmi	180ebc <startup-0x1fe7f144>
 aa8:	c0ad5006 	adcgt	r5, sp, r6
 aac:	00bbccad 	adcseq	ip, fp, sp, lsr #25
 ab0:	03020402 	movweq	r0, #9218	; 0x2402
 ab4:	0200ba62 	andeq	fp, r0, #401408	; 0x62000
 ab8:	3c060104 	stfccs	f0, [r6], {4}
 abc:	3c210306 	stccc	3, cr0, [r1], #-24	; 0xffffffe8
 ac0:	3d3d4c52 	ldccc	12, cr4, [sp, #-328]!	; 0xfffffeb8
 ac4:	033d3d3d 	teqeq	sp, #3904	; 0xf40
 ac8:	42757410 	rsbsmi	r7, r5, #16, 8	; 0x10000000
 acc:	3e4c3e5a 	mcrcc	14, 2, r3, cr12, cr10, {2}
 ad0:	1c033d3e 	stcne	13, cr3, [r3], {62}	; 0x3e
 ad4:	6850754a 	ldmdavs	r0, {r1, r3, r6, r8, sl, ip, sp, lr}^
 ad8:	033d4c5c 	teqeq	sp, #92, 24	; 0x5c00
 adc:	3d4e4a0a 	vstrcc	s9, [lr, #-40]	; 0xffffffd8
 ae0:	754a0c03 	strbvc	r0, [sl, #-3075]	; 0xfffff3fd
 ae4:	4c5c6850 	mrrcmi	8, 5, r6, ip, cr0
 ae8:	4a0a033d 	bmi	2817e4 <startup-0x1fd7e81c>
 aec:	0f033d4e 	svceq	0x00033d4e
 af0:	034b794a 	movteq	r7, #47434	; 0xb94a
 af4:	4b794a0f 	blmi	1e53338 <startup-0x1e1accc8>
 af8:	c04a1003 	subgt	r1, sl, r3
 afc:	4c1e504c 	ldcmi	0, cr5, [lr], {76}	; 0x4c
 b00:	784a0b03 	stmdavc	sl, {r0, r1, r8, r9, fp}^
 b04:	4a0b034b 	bmi	2c1838 <startup-0x1fd3e7c8>
 b08:	ce037578 	cfrshl64gt	mvdx3, mvdx8, r7
 b0c:	2fbb4a00 	svccs	0x00bb4a00
 b10:	c9089f35 	stmdbgt	r8, {r0, r2, r4, r5, r8, r9, sl, fp, ip, pc}
 b14:	04029fbb 	streq	r9, [r2], #-4027	; 0xfffff045
 b18:	d9010100 	stmdble	r1, {r8}
 b1c:	02000001 	andeq	r0, r0, #1
 b20:	00019400 	andeq	r9, r1, r0, lsl #8
 b24:	fb010200 	blx	4132e <startup-0x1ffbecd2>
 b28:	01000d0e 	tsteq	r0, lr, lsl #26
 b2c:	00010101 	andeq	r0, r1, r1, lsl #2
 b30:	00010000 	andeq	r0, r1, r0
 b34:	3a430100 	bcc	10c0f3c <startup-0x1ef3f0c4>
 b38:	7469672f 	strbtvc	r6, [r9], #-1839	; 0xfffff8d1
 b3c:	5441442f 	strbpl	r4, [r1], #-1071	; 0xfffffbd1
 b40:	2d303932 			; <UNDEFINED> instruction: 0x2d303932
 b44:	6d72614c 	ldfvse	f6, [r2, #-304]!	; 0xfffffed0
 b48:	74737973 	ldrbtvc	r7, [r3], #-2419	; 0xfffff68d
 b4c:	6b2f6d65 	blvs	bdc0e8 <startup-0x1f423f18>
 b50:	6c2f646f 	cfstrsvs	mvf6, [pc], #-444	; 99c <startup-0x1ffff664>
 b54:	532f6269 			; <UNDEFINED> instruction: 0x532f6269
 b58:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
 b5c:	6c5f3446 	cfldrdvs	mvd3, [pc], {70}	; 0x46
 b60:	532f6269 			; <UNDEFINED> instruction: 0x532f6269
 b64:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
 b68:	78783446 	ldmdavc	r8!, {r1, r2, r6, sl, ip, sp}^
 b6c:	6474535f 	ldrbtvs	r5, [r4], #-863	; 0xfffffca1
 b70:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
 b74:	445f6870 	ldrbmi	r6, [pc], #-2160	; b7c <startup-0x1ffff484>
 b78:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
 b7c:	72732f72 	rsbsvc	r2, r3, #456	; 0x1c8
 b80:	3a630063 	bcc	18c0d14 <startup-0x1e73f2ec>
 b84:	6573635c 	ldrbvs	r6, [r3, #-860]!	; 0xfffffca4
 b88:	5c707061 	ldclpl	0, cr7, [r0], #-388	; 0xfffffe7c
 b8c:	65646f63 	strbvs	r6, [r4, #-3939]!	; 0xfffff09d
 b90:	6574696c 	ldrbvs	r6, [r4, #-2412]!	; 0xfffff694
 b94:	6f6f745c 	svcvs	0x006f745c
 b98:	675c736c 	ldrbvs	r7, [ip, -ip, ror #6]
 b9c:	612d6363 			; <UNDEFINED> instruction: 0x612d6363
 ba0:	615c6d72 	cmpvs	ip, r2, ror sp
 ba4:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
 ba8:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
 bac:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
 bb0:	636e695c 	cmnvs	lr, #92, 18	; 0x170000
 bb4:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
 bb8:	63616d5c 	cmnvs	r1, #92, 26	; 0x1700
 bbc:	656e6968 	strbvs	r6, [lr, #-2408]!	; 0xfffff698
 bc0:	5c3a6300 	ldcpl	3, cr6, [sl], #-0
 bc4:	61657363 	cmnvs	r5, r3, ror #6
 bc8:	635c7070 	cmpvs	ip, #112	; 0x70
 bcc:	6c65646f 	cfstrdvs	mvd6, [r5], #-444	; 0xfffffe44
 bd0:	5c657469 	cfstrdpl	mvd7, [r5], #-420	; 0xfffffe5c
 bd4:	6c6f6f74 	stclvs	15, cr6, [pc], #-464	; a0c <startup-0x1ffff5f4>
 bd8:	63675c73 	cmnvs	r7, #29440	; 0x7300
 bdc:	72612d63 	rsbvc	r2, r1, #6336	; 0x18c0
 be0:	72615c6d 	rsbvc	r5, r1, #27904	; 0x6d00
 be4:	6f6e2d6d 	svcvs	0x006e2d6d
 be8:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
 bec:	5c696261 	sfmpl	f6, 2, [r9], #-388	; 0xfffffe7c
 bf0:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
 bf4:	5c656475 	cfstrdpl	mvd6, [r5], #-468	; 0xfffffe2c
 bf8:	00737973 	rsbseq	r7, r3, r3, ror r9
 bfc:	6c2f2e2e 	stcvs	14, cr2, [pc], #-184	; b4c <startup-0x1ffff4b4>
 c00:	532f6269 			; <UNDEFINED> instruction: 0x532f6269
 c04:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
 c08:	6c5f3446 	cfldrdvs	mvd3, [pc], {70}	; 0x46
 c0c:	432f6269 			; <UNDEFINED> instruction: 0x432f6269
 c10:	5349534d 	movtpl	r5, #37709	; 0x934d
 c14:	636e692f 	cmnvs	lr, #770048	; 0xbc000
 c18:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
 c1c:	2f2e2e00 	svccs	0x002e2e00
 c20:	2f62696c 	svccs	0x0062696c
 c24:	334d5453 	movtcc	r5, #54355	; 0xd453
 c28:	5f344632 	svcpl	0x00344632
 c2c:	2f62696c 	svccs	0x0062696c
 c30:	334d5453 	movtcc	r5, #54355	; 0xd453
 c34:	78344632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, lr}
 c38:	74535f78 	ldrbvc	r5, [r3], #-3960	; 0xfffff088
 c3c:	72655064 	rsbvc	r5, r5, #100	; 0x64
 c40:	5f687069 	svcpl	0x00687069
 c44:	76697244 	strbtvc	r7, [r9], -r4, asr #4
 c48:	692f7265 	stmdbvs	pc!, {r0, r2, r5, r6, r9, ip, sp, lr}	; <UNPREDICTABLE>
 c4c:	0000636e 	andeq	r6, r0, lr, ror #6
 c50:	6373696d 	cmnvs	r3, #1785856	; 0x1b4000
 c54:	0100632e 	tsteq	r0, lr, lsr #6
 c58:	645f0000 	ldrbvs	r0, [pc], #-0	; c60 <startup-0x1ffff3a0>
 c5c:	75616665 	strbvc	r6, [r1, #-1637]!	; 0xfffff99b
 c60:	745f746c 	ldrbvc	r7, [pc], #-1132	; c68 <startup-0x1ffff398>
 c64:	73657079 	cmnvc	r5, #121	; 0x79
 c68:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
 c6c:	735f0000 	cmpvc	pc, #0
 c70:	6e696474 	mcrvs	4, 3, r6, cr9, cr4, {3}
 c74:	00682e74 	rsbeq	r2, r8, r4, ror lr
 c78:	63000003 	movwvs	r0, #3
 c7c:	5f65726f 	svcpl	0x0065726f
 c80:	2e346d63 	cdpcs	13, 3, cr6, cr4, cr3, {3}
 c84:	00040068 	andeq	r0, r4, r8, rrx
 c88:	73797300 	cmnvc	r9, #0, 6
 c8c:	5f6d6574 	svcpl	0x006d6574
 c90:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
 c94:	78346632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, sp, lr}
 c98:	00682e78 	rsbeq	r2, r8, r8, ror lr
 c9c:	73000005 	movwvc	r0, #5
 ca0:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
 ca4:	78783466 	ldmdavc	r8!, {r1, r2, r5, r6, sl, ip, sp}^
 ca8:	0500682e 	streq	r6, [r0, #-2094]	; 0xfffff7d2
 cac:	696d0000 	stmdbvs	sp!, {}^	; <UNPREDICTABLE>
 cb0:	682e6373 	stmdavs	lr!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}
 cb4:	00000500 	andeq	r0, r0, r0, lsl #10
 cb8:	02050000 	andeq	r0, r5, #0
 cbc:	20001ff4 	strdcs	r1, [r0], -r4
 cc0:	0100f603 	tsteq	r0, r3, lsl #12	; <UNPREDICTABLE>
 cc4:	0c03594f 			; <UNDEFINED> instruction: 0x0c03594f
 cc8:	4dc14b90 	vstrmi	d20, [r1, #576]	; 0x240
 ccc:	9192759f 			; <UNDEFINED> instruction: 0x9192759f
 cd0:	57b05aae 	ldrpl	r5, [r0, lr, lsr #21]!
 cd4:	09032d67 	stmdbeq	r3, {r0, r1, r2, r5, r6, r8, sl, fp, sp}
 cd8:	67571e2e 	ldrbvs	r1, [r7, -lr, lsr #28]
 cdc:	0c034d2d 	stceq	13, cr4, [r3], {45}	; 0x2d
 ce0:	03835d90 	orreq	r5, r3, #144, 26	; 0x2400
 ce4:	4c95900d 	ldcmi	0, cr9, [r5], {13}
 ce8:	03841e7a 	orreq	r1, r4, #1952	; 0x7a0
 cec:	3e4d740b 	cdpcc	4, 4, cr7, cr13, cr11, {0}
 cf0:	02681e6c 	rsbeq	r1, r8, #108, 28	; 0x6c0
 cf4:	01010006 	tsteq	r1, r6
 cf8:	000002cf 	andeq	r0, r0, pc, asr #5
 cfc:	02110002 	andseq	r0, r1, #2
 d00:	01020000 	mrseq	r0, (UNDEF: 2)
 d04:	000d0efb 	strdeq	r0, [sp], -fp
 d08:	01010101 	tsteq	r1, r1, lsl #2
 d0c:	01000000 	mrseq	r0, (UNDEF: 0)
 d10:	43010000 	movwmi	r0, #4096	; 0x1000
 d14:	69672f3a 	stmdbvs	r7!, {r1, r3, r4, r5, r8, r9, sl, fp, sp}^
 d18:	41442f74 	hvcmi	17140	; 0x42f4
 d1c:	30393254 	eorscc	r3, r9, r4, asr r2
 d20:	72614c2d 	rsbvc	r4, r1, #11520	; 0x2d00
 d24:	7379736d 	cmnvc	r9, #-1275068415	; 0xb4000001
 d28:	2f6d6574 	svccs	0x006d6574
 d2c:	2f646f6b 	svccs	0x00646f6b
 d30:	0062696c 	rsbeq	r6, r2, ip, ror #18
 d34:	635c3a63 	cmpvs	ip, #405504	; 0x63000
 d38:	70616573 	rsbvc	r6, r1, r3, ror r5
 d3c:	6f635c70 	svcvs	0x00635c70
 d40:	696c6564 	stmdbvs	ip!, {r2, r5, r6, r8, sl, sp, lr}^
 d44:	745c6574 	ldrbvc	r6, [ip], #-1396	; 0xfffffa8c
 d48:	736c6f6f 	cmnvc	ip, #444	; 0x1bc
 d4c:	6363675c 	cmnvs	r3, #92, 14	; 0x1700000
 d50:	6d72612d 	ldfvse	f6, [r2, #-180]!	; 0xffffff4c
 d54:	6d72615c 	ldfvse	f6, [r2, #-368]!	; 0xfffffe90
 d58:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
 d5c:	61652d65 	cmnvs	r5, r5, ror #26
 d60:	695c6962 	ldmdbvs	ip, {r1, r5, r6, r8, fp, sp, lr}^
 d64:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
 d68:	6d5c6564 	cfldr64vs	mvdx6, [ip, #-400]	; 0xfffffe70
 d6c:	69686361 	stmdbvs	r8!, {r0, r5, r6, r8, r9, sp, lr}^
 d70:	6300656e 	movwvs	r6, #1390	; 0x56e
 d74:	73635c3a 	cmnvc	r3, #14848	; 0x3a00
 d78:	70706165 	rsbsvc	r6, r0, r5, ror #2
 d7c:	646f635c 	strbtvs	r6, [pc], #-860	; d84 <startup-0x1ffff27c>
 d80:	74696c65 	strbtvc	r6, [r9], #-3173	; 0xfffff39b
 d84:	6f745c65 	svcvs	0x00745c65
 d88:	5c736c6f 	ldclpl	12, cr6, [r3], #-444	; 0xfffffe44
 d8c:	2d636367 	stclcs	3, cr6, [r3, #-412]!	; 0xfffffe64
 d90:	5c6d7261 	sfmpl	f7, 2, [sp], #-388	; 0xfffffe7c
 d94:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
 d98:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
 d9c:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
 da0:	6e695c69 	cdpvs	12, 6, cr5, cr9, cr9, {3}
 da4:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
 da8:	79735c65 	ldmdbvc	r3!, {r0, r2, r5, r6, sl, fp, ip, lr}^
 dac:	2e2e0073 	mcrcs	0, 1, r0, cr14, cr3, {3}
 db0:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
 db4:	4d54532f 	ldclmi	3, cr5, [r4, #-188]	; 0xffffff44
 db8:	34463233 	strbcc	r3, [r6], #-563	; 0xfffffdcd
 dbc:	62696c5f 	rsbvs	r6, r9, #24320	; 0x5f00
 dc0:	534d432f 	movtpl	r4, #54063	; 0xd32f
 dc4:	692f5349 	stmdbvs	pc!, {r0, r3, r6, r8, r9, ip, lr}	; <UNPREDICTABLE>
 dc8:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
 dcc:	2e006564 	cfsh32cs	mvfx6, mvfx0, #52
 dd0:	696c2f2e 	stmdbvs	ip!, {r1, r2, r3, r5, r8, r9, sl, fp, sp}^
 dd4:	54532f62 	ldrbpl	r2, [r3], #-3938	; 0xfffff09e
 dd8:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
 ddc:	696c5f34 	stmdbvs	ip!, {r2, r4, r5, r8, r9, sl, fp, ip, lr}^
 de0:	54532f62 	ldrbpl	r2, [r3], #-3938	; 0xfffff09e
 de4:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
 de8:	5f787834 	svcpl	0x00787834
 dec:	50647453 	rsbpl	r7, r4, r3, asr r4
 df0:	70697265 	rsbvc	r7, r9, r5, ror #4
 df4:	72445f68 	subvc	r5, r4, #104, 30	; 0x1a0
 df8:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
 dfc:	636e692f 	cmnvs	lr, #770048	; 0xbc000
 e00:	5c3a6300 	ldcpl	3, cr6, [sl], #-0
 e04:	61657363 	cmnvs	r5, r3, ror #6
 e08:	635c7070 	cmpvs	ip, #112	; 0x70
 e0c:	6c65646f 	cfstrdvs	mvd6, [r5], #-444	; 0xfffffe44
 e10:	5c657469 	cfstrdpl	mvd7, [r5], #-420	; 0xfffffe5c
 e14:	6c6f6f74 	stclvs	15, cr6, [pc], #-464	; c4c <startup-0x1ffff3b4>
 e18:	63675c73 	cmnvs	r7, #29440	; 0x7300
 e1c:	72612d63 	rsbvc	r2, r1, #6336	; 0x18c0
 e20:	696c5c6d 	stmdbvs	ip!, {r0, r2, r3, r5, r6, sl, fp, ip, lr}^
 e24:	63675c62 	cmnvs	r7, #25088	; 0x6200
 e28:	72615c63 	rsbvc	r5, r1, #25344	; 0x6300
 e2c:	6f6e2d6d 	svcvs	0x006e2d6d
 e30:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
 e34:	5c696261 	sfmpl	f6, 2, [r9], #-388	; 0xfffffe7c
 e38:	2e322e37 	mrccs	14, 1, r2, cr2, cr7, {1}
 e3c:	6e695c31 	mcrvs	12, 3, r5, cr9, cr1, {1}
 e40:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
 e44:	55000065 	strpl	r0, [r0, #-101]	; 0xffffff9b
 e48:	54524153 	ldrbpl	r4, [r2], #-339	; 0xfffffead
 e4c:	0100632e 	tsteq	r0, lr, lsr #6
 e50:	645f0000 	ldrbvs	r0, [pc], #-0	; e58 <startup-0x1ffff1a8>
 e54:	75616665 	strbvc	r6, [r1, #-1637]!	; 0xfffff99b
 e58:	745f746c 	ldrbvc	r7, [pc], #-1132	; e60 <startup-0x1ffff1a0>
 e5c:	73657079 	cmnvc	r5, #121	; 0x79
 e60:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
 e64:	735f0000 	cmpvc	pc, #0
 e68:	6e696474 	mcrvs	4, 3, r6, cr9, cr4, {3}
 e6c:	00682e74 	rsbeq	r2, r8, r4, ror lr
 e70:	62000003 	andvs	r0, r0, #3
 e74:	65666675 	strbvs	r6, [r6, #-1653]!	; 0xfffff98b
 e78:	00682e72 	rsbeq	r2, r8, r2, ror lr
 e7c:	63000001 	movwvs	r0, #1
 e80:	5f65726f 	svcpl	0x0065726f
 e84:	2e346d63 	cdpcs	13, 3, cr6, cr4, cr3, {3}
 e88:	00040068 	andeq	r0, r4, r8, rrx
 e8c:	73797300 	cmnvc	r9, #0, 6
 e90:	5f6d6574 	svcpl	0x006d6574
 e94:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
 e98:	78346632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, sp, lr}
 e9c:	00682e78 	rsbeq	r2, r8, r8, ror lr
 ea0:	73000005 	movwvc	r0, #5
 ea4:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
 ea8:	78783466 	ldmdavc	r8!, {r1, r2, r5, r6, sl, ip, sp}^
 eac:	0500682e 	streq	r6, [r0, #-2094]	; 0xfffff7d2
 eb0:	696d0000 	stmdbvs	sp!, {}^	; <UNPREDICTABLE>
 eb4:	682e6373 	stmdavs	lr!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}
 eb8:	00000500 	andeq	r0, r0, r0, lsl #10
 ebc:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
 ec0:	78346632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, sp, lr}
 ec4:	73755f78 	cmnvc	r5, #120, 30	; 0x1e0
 ec8:	2e747261 	cdpcs	2, 7, cr7, cr4, cr1, {3}
 ecc:	00050068 	andeq	r0, r5, r8, rrx
 ed0:	6d747300 	ldclvs	3, cr7, [r4, #-0]
 ed4:	34663233 	strbtcc	r3, [r6], #-563	; 0xfffffdcd
 ed8:	675f7878 			; <UNDEFINED> instruction: 0x675f7878
 edc:	2e6f6970 			; <UNDEFINED> instruction: 0x2e6f6970
 ee0:	00050068 	andeq	r0, r5, r8, rrx
 ee4:	636f6c00 	cmnvs	pc, #0, 24
 ee8:	00682e6b 	rsbeq	r2, r8, fp, ror #28
 eec:	5f000003 	svcpl	0x00000003
 ef0:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
 ef4:	00682e73 	rsbeq	r2, r8, r3, ror lr
 ef8:	73000003 	movwvc	r0, #3
 efc:	65646474 	strbvs	r6, [r4, #-1140]!	; 0xfffffb8c
 f00:	00682e66 	rsbeq	r2, r8, r6, ror #28
 f04:	72000006 	andvc	r0, r0, #6
 f08:	746e6565 	strbtvc	r6, [lr], #-1381	; 0xfffffa9b
 f0c:	0300682e 	movweq	r6, #2094	; 0x82e
 f10:	00000000 	andeq	r0, r0, r0
 f14:	21b80205 			; <UNDEFINED> instruction: 0x21b80205
 f18:	12032000 	andne	r2, r3, #0
 f1c:	c0923e01 	addsgt	r3, r2, r1, lsl #28
 f20:	874ba293 			; <UNDEFINED> instruction: 0x874ba293
 f24:	3ed9691d 			; <UNDEFINED> instruction: 0x3ed9691d
 f28:	5b593f3d 	blpl	1650c24 <startup-0x1e9af3dc>
 f2c:	78754d4b 	ldmdavc	r5!, {r0, r1, r3, r6, r8, sl, fp, lr}^
 f30:	3e3d3d4b 	cdpcc	13, 3, cr3, cr13, cr11, {2}
 f34:	0359764b 	cmpeq	r9, #78643200	; 0x4b00000
 f38:	3d59660b 	ldclcc	6, cr6, [r9, #-44]	; 0xffffffd4
 f3c:	3d3d3d3d 	ldccc	13, cr3, [sp, #-244]!	; 0xffffff0c
 f40:	3d3d3d6d 	ldccc	13, cr3, [sp, #-436]!	; 0xfffffe4c
 f44:	5b3f4d3d 	blpl	fd4440 <startup-0x1f02bbc0>
 f48:	685c0867 	ldmdavs	ip, {r0, r1, r2, r5, r6, fp}^
 f4c:	213068a0 	teqcs	r0, r0, lsr #17
 f50:	c9234db1 	stmdbgt	r3!, {r0, r4, r5, r7, r8, sl, fp, lr}
 f54:	4f21512a 	svcmi	0x0021512a
 f58:	0402004d 	streq	r0, [r2], #-77	; 0xffffffb3
 f5c:	003c0601 	eorseq	r0, ip, r1, lsl #12
 f60:	08020402 	stmdaeq	r2, {r1, sl}
 f64:	04020074 	streq	r0, [r2], #-116	; 0xffffff8c
 f68:	02002004 	andeq	r2, r0, #4
 f6c:	3f060404 	svccc	0x00060404
 f70:	03040200 	movweq	r0, #16896	; 0x4200
 f74:	04020067 	streq	r0, [r2], #-103	; 0xffffff99
 f78:	002f0803 	eoreq	r0, pc, r3, lsl #16
 f7c:	72030402 	andvc	r0, r3, #33554432	; 0x2000000
 f80:	01040200 	mrseq	r0, R12_usr
 f84:	5e065806 	cdppl	8, 0, cr5, cr6, cr6, {0}
 f88:	0200ad59 	andeq	sl, r0, #5696	; 0x1640
 f8c:	002c0204 	eoreq	r0, ip, r4, lsl #4
 f90:	06010402 	streq	r0, [r1], -r2, lsl #8
 f94:	00880666 	addeq	r0, r8, r6, ror #12
 f98:	21010402 	tstcs	r1, r2, lsl #8
 f9c:	78834b4f 	stmvc	r3, {r0, r1, r2, r3, r6, r8, r9, fp, lr}
 fa0:	225b4c6e 	subscs	r4, fp, #28160	; 0x6e00
 fa4:	334b6d4e 	movtcc	r6, #48462	; 0xbd4e
 fa8:	0200334b 	andeq	r3, r0, #738197505	; 0x2c000001
 fac:	4a060104 	bmi	1813c4 <startup-0x1fe7ec3c>
 fb0:	005d4b06 	subseq	r4, sp, r6, lsl #22
 fb4:	06010402 	streq	r0, [r1], -r2, lsl #8
 fb8:	5d4b064a 	stclpl	6, cr0, [fp, #-296]	; 0xfffffed8
 fbc:	01040200 	mrseq	r0, R12_usr
 fc0:	4b064a06 	blmi	1937e0 <startup-0x1fe6c820>
 fc4:	0402225c 	streq	r2, [r2], #-604	; 0xfffffda4
 fc8:	Address 0x00000fc8 is out of bounds.


Disassembly of section .debug_str:

00000000 <.debug_str>:
       0:	65746e69 	ldrbvs	r6, [r4, #-3689]!	; 0xfffff197
       4:	64726567 	ldrbtvs	r6, [r2], #-1383	; 0xfffffa99
       8:	64697669 	strbtvs	r7, [r9], #-1641	; 0xfffff997
       c:	55007265 	strpl	r7, [r0, #-613]	; 0xfffffd9b
      10:	54524153 	ldrbpl	r4, [r2], #-339	; 0xfffffead
      14:	4850435f 	ldmdami	r0, {r0, r1, r2, r3, r4, r6, r8, r9, lr}^
      18:	54470041 	strbpl	r0, [r7], #-65	; 0xffffffbf
      1c:	69005250 	stmdbvs	r0, {r4, r6, r9, ip, lr}
      20:	73616d74 	cmnvc	r1, #116, 26	; 0x1d00
      24:	5953006b 	ldmdbpl	r3, {r0, r1, r3, r5, r6}^
      28:	4b4c4353 	blmi	1310d7c <startup-0x1ecef284>
      2c:	6572465f 	ldrbvs	r4, [r2, #-1631]!	; 0xfffff9a1
      30:	6e657571 	mcrvs	5, 3, r7, cr5, cr1, {3}
      34:	55007963 	strpl	r7, [r0, #-2403]	; 0xfffff69d
      38:	54524153 	ldrbpl	r4, [r2], #-339	; 0xfffffead
      3c:	7465535f 	strbtvc	r5, [r5], #-863	; 0xfffffca1
      40:	73657250 	cmnvc	r5, #80, 4
      44:	656c6163 	strbvs	r6, [ip, #-355]!	; 0xfffffe9d
      48:	53550072 	cmppl	r5, #114	; 0x72
      4c:	5f545241 	svcpl	0x00545241
      50:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xfffff1b7
      54:	4c434800 	mcrrmi	8, 0, r4, r3, cr0
      58:	72465f4b 	subvc	r5, r6, #300	; 0x12c
      5c:	65757165 	ldrbvs	r7, [r5, #-357]!	; 0xfffffe9b
      60:	0079636e 	rsbseq	r6, r9, lr, ror #6
      64:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
      68:	494c5f54 	stmdbmi	ip, {r2, r4, r6, r8, r9, sl, fp, ip, lr}^
      6c:	6572424e 	ldrbvs	r4, [r2, #-590]!	; 0xfffffdb2
      70:	65446b61 	strbvs	r6, [r4, #-2913]	; 0xfffff49f
      74:	74636574 	strbtvc	r6, [r3], #-1396	; 0xfffffa8c
      78:	676e654c 	strbvs	r6, [lr, -ip, asr #10]!
      7c:	55006874 	strpl	r6, [r0, #-2164]	; 0xfffff78c
      80:	54524153 	ldrbpl	r4, [r2], #-339	; 0xfffffead
      84:	656e4f5f 	strbvs	r4, [lr, #-3935]!	; 0xfffff0a1
      88:	4d746942 			; <UNDEFINED> instruction: 0x4d746942
      8c:	6f687465 	svcvs	0x00687465
      90:	646d4364 	strbtvs	r4, [sp], #-868	; 0xfffffc9c
      94:	755f5f00 	ldrbvc	r5, [pc, #-3840]	; fffff19c <_global_impure_ptr+0xdfffa178>
      98:	31746e69 	cmncc	r4, r9, ror #28
      9c:	00745f36 	rsbseq	r5, r4, r6, lsr pc
      a0:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
      a4:	79545f54 	ldmdbvc	r4, {r2, r4, r6, r8, r9, sl, fp, ip, lr}^
      a8:	65446570 	strbvs	r6, [r4, #-1392]	; 0xfffffa90
      ac:	53550066 	cmppl	r5, #102	; 0x66
      b0:	5f545241 	svcpl	0x00545241
      b4:	706f7453 	rsbvc	r7, pc, r3, asr r4	; <UNPREDICTABLE>
      b8:	73746942 	cmnvc	r4, #1081344	; 0x108000
      bc:	6f687300 	svcvs	0x00687300
      c0:	69207472 	stmdbvs	r0!, {r1, r4, r5, r6, sl, ip, sp, lr}
      c4:	5500746e 	strpl	r7, [r0, #-1134]	; 0xfffffb92
      c8:	54524153 	ldrbpl	r4, [r2], #-339	; 0xfffffead
      cc:	6f6c435f 	svcvs	0x006c435f
      d0:	6e496b63 	vmlsvs.f64	d22, d9, d19
      d4:	79547469 	ldmdbvc	r4, {r0, r3, r5, r6, sl, ip, sp, lr}^
      d8:	65446570 	strbvs	r6, [r4, #-1392]	; 0xfffffa90
      dc:	53550066 	cmppl	r5, #102	; 0x66
      e0:	5f545241 	svcpl	0x00545241
      e4:	00646d43 	rsbeq	r6, r4, r3, asr #26
      e8:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
      ec:	65535f54 	ldrbvs	r5, [r3, #-3924]	; 0xfffff0ac
      f0:	6144646e 	cmpvs	r4, lr, ror #8
      f4:	55006174 	strpl	r6, [r0, #-372]	; 0xfffffe8c
      f8:	54524153 	ldrbpl	r4, [r2], #-339	; 0xfffffead
      fc:	6b61575f 	blvs	1855e80 <startup-0x1e7aa180>
     100:	00705565 	rsbseq	r5, r0, r5, ror #10
     104:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
     108:	6f575f54 	svcvs	0x00575f54
     10c:	654c6472 	strbvs	r6, [ip, #-1138]	; 0xfffffb8e
     110:	6874676e 	ldmdavs	r4!, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}^
     114:	77654e00 	strbvc	r4, [r5, -r0, lsl #28]!
     118:	74617453 	strbtvc	r7, [r1], #-1107	; 0xfffffbad
     11c:	53550065 	cmppl	r5, #101	; 0x65
     120:	5f545241 	svcpl	0x00545241
     124:	43414d44 	movtmi	r4, #7492	; 0x1d44
     128:	4400646d 	strmi	r6, [r0], #-1133	; 0xfffffb93
     12c:	42415349 	submi	r5, r1, #603979777	; 0x24000001
     130:	5500454c 	strpl	r4, [r0, #-1356]	; 0xfffffab4
     134:	54524153 	ldrbpl	r4, [r2], #-339	; 0xfffffead
     138:	73614c5f 	cmnvc	r1, #24320	; 0x5f00
     13c:	74694274 	strbtvc	r4, [r9], #-628	; 0xfffffd8c
     140:	41535500 	cmpmi	r3, r0, lsl #10
     144:	425f5452 	subsmi	r5, pc, #1375731712	; 0x52000000
     148:	52647561 	rsbpl	r7, r4, #406847488	; 0x18400000
     14c:	00657461 	rsbeq	r7, r5, r1, ror #8
     150:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
     154:	72495f54 	subvc	r5, r9, #84, 30	; 0x150
     158:	6f4d4144 	svcvs	0x004d4144
     15c:	61006564 	tstvs	r0, r4, ror #10
     160:	6c636270 	sfmvs	f6, 2, [r3], #-448	; 0xfffffe40
     164:	006b636f 	rsbeq	r6, fp, pc, ror #6
     168:	676e6f6c 	strbvs	r6, [lr, -ip, ror #30]!
     16c:	6e6f6c20 	cdpvs	12, 6, cr6, cr15, cr0, {1}
     170:	6e692067 	cdpvs	0, 6, cr2, cr9, cr7, {3}
     174:	53550074 	cmppl	r5, #116	; 0x74
     178:	5f545241 	svcpl	0x00545241
     17c:	61656c43 	cmnvs	r5, r3, asr #24
     180:	50544972 	subspl	r4, r4, r2, ror r9
     184:	69646e65 	stmdbvs	r4!, {r0, r2, r5, r6, r9, sl, fp, sp, lr}^
     188:	6942676e 	stmdbvs	r2, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}^
     18c:	53550074 	cmppl	r5, #116	; 0x74
     190:	5f545241 	svcpl	0x00545241
     194:	72617547 	rsbvc	r7, r1, #297795584	; 0x11c00000
     198:	6d695464 	cfstrdvs	mvd5, [r9, #-400]!	; 0xfffffe70
     19c:	53550065 	cmppl	r5, #101	; 0x65
     1a0:	5f545241 	svcpl	0x00545241
     1a4:	424e494c 	submi	r4, lr, #76, 18	; 0x130000
     1a8:	6b616572 	blvs	1859778 <startup-0x1e7a6888>
     1ac:	65746544 	ldrbvs	r6, [r4, #-1348]!	; 0xfffffabc
     1b0:	654c7463 	strbvs	r7, [ip, #-1123]	; 0xfffffb9d
     1b4:	6874676e 	ldmdavs	r4!, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}^
     1b8:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
     1bc:	5f006769 	svcpl	0x00006769
     1c0:	6e69755f 	mcrvs	5, 3, r7, cr9, cr15, {2}
     1c4:	745f3874 	ldrbvc	r3, [pc], #-2164	; 1cc <startup-0x1ffffe34>
     1c8:	41535500 	cmpmi	r3, r0, lsl #10
     1cc:	465f5452 			; <UNDEFINED> instruction: 0x465f5452
     1d0:	0047414c 	subeq	r4, r7, ip, asr #2
     1d4:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
     1d8:	65445f54 	strbvs	r5, [r4, #-3924]	; 0xfffff0ac
     1dc:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xfffff1b7
     1e0:	41535500 	cmpmi	r3, r0, lsl #10
     1e4:	435f5452 	cmpmi	pc, #1375731712	; 0x52000000
     1e8:	6b636f6c 	blvs	18dbfa0 <startup-0x1e724060>
     1ec:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xfffff1b7
     1f0:	75727453 	ldrbvc	r7, [r2, #-1107]!	; 0xfffffbad
     1f4:	43007463 	movwmi	r7, #1123	; 0x463
     1f8:	69675c3a 	stmdbvs	r7!, {r1, r3, r4, r5, sl, fp, ip, lr}^
     1fc:	41445c74 	hvcmi	17860	; 0x45c4
     200:	30393254 	eorscc	r3, r9, r4, asr r2
     204:	72614c2d 	rsbvc	r4, r1, #11520	; 0x2d00
     208:	7379736d 	cmnvc	r9, #-1275068415	; 0xb4000001
     20c:	5c6d6574 	cfstr64pl	mvdx6, [sp], #-464	; 0xfffffe30
     210:	5c646f6b 	stclpl	15, cr6, [r4], #-428	; 0xfffffe54
     214:	726f6f44 	rsbvc	r6, pc, #68, 30	; 0x110
     218:	706d7400 	rsbvc	r7, sp, r0, lsl #8
     21c:	00676572 	rsbeq	r6, r7, r2, ror r5
     220:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
     224:	61505f54 	cmpvs	r0, r4, asr pc
     228:	79746972 	ldmdbvc	r4!, {r1, r4, r5, r6, r8, fp, sp, lr}^
     22c:	41535500 	cmpmi	r3, r0, lsl #10
     230:	435f5452 	cmpmi	pc, #1375731712	; 0x52000000
     234:	6b636f6c 	blvs	18dbfec <startup-0x1e724014>
     238:	75727453 	ldrbvc	r7, [r2, #-1107]!	; 0xfffffbad
     23c:	6e497463 	cdpvs	4, 4, cr7, cr9, cr3, {3}
     240:	75007469 	strvc	r7, [r0, #-1129]	; 0xfffffb97
     244:	6769736e 	strbvs	r7, [r9, -lr, ror #6]!
     248:	2064656e 	rsbcs	r6, r4, lr, ror #10
     24c:	72616863 	rsbvc	r6, r1, #6488064	; 0x630000
     250:	554e4700 	strbpl	r4, [lr, #-1792]	; 0xfffff900
     254:	39394320 	ldmdbcc	r9!, {r5, r8, r9, lr}
     258:	322e3720 	eorcc	r3, lr, #32, 14	; 0x800000
     25c:	3220312e 	eorcc	r3, r0, #-2147483637	; 0x8000000b
     260:	30373130 	eorscc	r3, r7, r0, lsr r1
     264:	20343039 	eorscs	r3, r4, r9, lsr r0
     268:	6c657228 	sfmvs	f7, 2, [r5], #-160	; 0xffffff60
     26c:	65736165 	ldrbvs	r6, [r3, #-357]!	; 0xfffffe9b
     270:	415b2029 	cmpmi	fp, r9, lsr #32
     274:	652f4d52 	strvs	r4, [pc, #-3410]!	; fffff52a <_global_impure_ptr+0xdfffa506>
     278:	6465626d 	strbtvs	r6, [r5], #-621	; 0xfffffd93
     27c:	2d646564 	cfstr64cs	mvdx6, [r4, #-400]!	; 0xfffffe70
     280:	72622d37 	rsbvc	r2, r2, #3520	; 0xdc0
     284:	68636e61 	stmdavs	r3!, {r0, r5, r6, r9, sl, fp, sp, lr}^
     288:	76657220 	strbtvc	r7, [r5], -r0, lsr #4
     28c:	6f697369 	svcvs	0x00697369
     290:	3532206e 	ldrcc	r2, [r2, #-110]!	; 0xffffff92
     294:	34303235 	ldrtcc	r3, [r0], #-565	; 0xfffffdcb
     298:	6d2d205d 	stcvs	0, cr2, [sp, #-372]!	; 0xfffffe8c
     29c:	6d756874 	ldclvs	8, cr6, [r5, #-464]!	; 0xfffffe30
     2a0:	6d2d2062 	stcvs	0, cr2, [sp, #-392]!	; 0xfffffe78
     2a4:	68637261 	stmdavs	r3!, {r0, r5, r6, r9, ip, sp, lr}^
     2a8:	6d72613d 	ldfvse	f6, [r2, #-244]!	; 0xffffff0c
     2ac:	6d2d3676 	stcvs	6, cr3, [sp, #-472]!	; 0xfffffe28
     2b0:	666d2d20 	strbtvs	r2, [sp], -r0, lsr #26
     2b4:	74616f6c 	strbtvc	r6, [r1], #-3948	; 0xfffff094
     2b8:	6962612d 	stmdbvs	r2!, {r0, r2, r3, r5, r8, sp, lr}^
     2bc:	666f733d 			; <UNDEFINED> instruction: 0x666f733d
     2c0:	6d2d2074 	stcvs	0, cr2, [sp, #-464]!	; 0xfffffe30
     2c4:	6d756874 	ldclvs	8, cr6, [r5, #-464]!	; 0xfffffe30
     2c8:	6d2d2062 	stcvs	0, cr2, [sp, #-392]!	; 0xfffffe78
     2cc:	68637261 	stmdavs	r3!, {r0, r5, r6, r9, ip, sp, lr}^
     2d0:	6d72613d 	ldfvse	f6, [r2, #-244]!	; 0xffffff0c
     2d4:	6d2d3676 	stcvs	6, cr3, [sp, #-472]!	; 0xfffffe28
     2d8:	20672d20 	rsbcs	r2, r7, r0, lsr #26
     2dc:	20304f2d 	eorscs	r4, r0, sp, lsr #30
     2e0:	6474732d 	ldrbtvs	r7, [r4], #-813	; 0xfffffcd3
     2e4:	3939633d 	ldmdbcc	r9!, {r0, r2, r3, r4, r5, r8, r9, sp, lr}
     2e8:	61737500 	cmnvs	r3, r0, lsl #10
     2ec:	62787472 	rsbsvs	r7, r8, #1912602624	; 0x72000000
     2f0:	00657361 	rsbeq	r7, r5, r1, ror #6
     2f4:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
     2f8:	6c435f54 	mcrrvs	15, 5, r5, r3, cr4
     2fc:	46726165 	ldrbtmi	r6, [r2], -r5, ror #2
     300:	0067616c 	rsbeq	r6, r7, ip, ror #2
     304:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
     308:	65535f54 	ldrbvs	r5, [r3, #-3924]	; 0xfffff0ac
     30c:	64644174 	strbtvs	r4, [r4], #-372	; 0xfffffe8c
     310:	73736572 	cmnvc	r3, #478150656	; 0x1c800000
     314:	6e6f6c00 	cdpvs	12, 6, cr6, cr15, cr0, {0}
     318:	6f6c2067 	svcvs	0x006c2067
     31c:	7520676e 	strvc	r6, [r0, #-1902]!	; 0xfffff892
     320:	6769736e 	strbvs	r7, [r9, -lr, ror #6]!
     324:	2064656e 	rsbcs	r6, r4, lr, ror #10
     328:	00746e69 	rsbseq	r6, r4, r9, ror #28
     32c:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
     330:	65535f54 	ldrbvs	r5, [r3, #-3924]	; 0xfffff0ac
     334:	61754774 	cmnvs	r5, r4, ror r7
     338:	69546472 	ldmdbvs	r4, {r1, r4, r5, r6, sl, sp, lr}^
     33c:	5500656d 	strpl	r6, [r0, #-1389]	; 0xfffffa93
     340:	54524153 	ldrbpl	r4, [r2], #-339	; 0xfffffead
     344:	6e65535f 	mcrvs	3, 3, r5, cr5, cr15, {2}
     348:	65724264 	ldrbvs	r4, [r2, #-612]!	; 0xfffffd9c
     34c:	55006b61 	strpl	r6, [r0, #-2913]	; 0xfffff49f
     350:	54524153 	ldrbpl	r4, [r2], #-339	; 0xfffffead
     354:	696e495f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, lr}^
     358:	70795474 	rsbsvc	r5, r9, r4, ror r4
     35c:	66654465 	strbtvs	r4, [r5], -r5, ror #8
     360:	41535500 	cmpmi	r3, r0, lsl #10
     364:	495f5452 	ldmdbmi	pc, {r1, r4, r6, sl, ip, lr}^	; <UNPREDICTABLE>
     368:	6e6f4354 	mcrvs	3, 3, r4, cr15, cr4, {2}
     36c:	00676966 	rsbeq	r6, r7, r6, ror #18
     370:	5f434352 	svcpl	0x00434352
     374:	636f6c43 	cmnvs	pc, #17152	; 0x4300
     378:	7954736b 	ldmdbvc	r4, {r0, r1, r3, r5, r6, r8, r9, ip, sp, lr}^
     37c:	65446570 	strbvs	r6, [r4, #-1392]	; 0xfffffa90
     380:	53550066 	cmppl	r5, #102	; 0x66
     384:	5f545241 	svcpl	0x00545241
     388:	52414d44 	subpl	r4, r1, #68, 26	; 0x1100
     38c:	55007165 	strpl	r7, [r0, #-357]	; 0xfffffe9b
     390:	54524153 	ldrbpl	r4, [r2], #-339	; 0xfffffead
     394:	53550078 	cmppl	r5, #120	; 0x78
     398:	5f545241 	svcpl	0x00545241
     39c:	64726148 	ldrbtvs	r6, [r2], #-328	; 0xfffffeb8
     3a0:	65726177 	ldrbvs	r6, [r2, #-375]!	; 0xfffffe89
     3a4:	776f6c46 	strbvc	r6, [pc, -r6, asr #24]!
     3a8:	746e6f43 	strbtvc	r6, [lr], #-3907	; 0xfffff0bd
     3ac:	006c6f72 	rsbeq	r6, ip, r2, ror pc
     3b0:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
     3b4:	6d535f54 	ldclvs	15, cr5, [r3, #-336]	; 0xfffffeb0
     3b8:	43747261 	cmnmi	r4, #268435462	; 0x10000006
     3bc:	43647261 	cmnmi	r4, #268435462	; 0x10000006
     3c0:	5500646d 	strpl	r6, [r0, #-1133]	; 0xfffffb93
     3c4:	54524153 	ldrbpl	r4, [r2], #-339	; 0xfffffead
     3c8:	646f4d5f 	strbtvs	r4, [pc], #-3423	; 3d0 <startup-0x1ffffc30>
     3cc:	53550065 	cmppl	r5, #101	; 0x65
     3d0:	5f545241 	svcpl	0x00545241
     3d4:	72646441 	rsbvc	r6, r4, #1090519040	; 0x41000000
     3d8:	00737365 	rsbseq	r7, r3, r5, ror #6
     3dc:	70746962 	rsbsvc	r6, r4, r2, ror #18
     3e0:	5500736f 	strpl	r7, [r0, #-879]	; 0xfffffc91
     3e4:	54524153 	ldrbpl	r4, [r2], #-339	; 0xfffffead
     3e8:	65764f5f 	ldrbvs	r4, [r6, #-3935]!	; 0xfffff0a1
     3ec:	6d615372 	stclvs	3, cr5, [r1, #-456]!	; 0xfffffe38
     3f0:	6e696c70 	mcrvs	12, 3, r6, cr9, cr0, {3}
     3f4:	6d433867 	stclvs	8, cr3, [r3, #-412]	; 0xfffffe64
     3f8:	68730064 	ldmdavs	r3!, {r2, r5, r6}^
     3fc:	2074726f 	rsbscs	r7, r4, pc, ror #4
     400:	69736e75 	ldmdbvs	r3!, {r0, r2, r4, r5, r6, r9, sl, fp, sp, lr}^
     404:	64656e67 	strbtvs	r6, [r5], #-3687	; 0xfffff199
     408:	746e6920 	strbtvc	r6, [lr], #-2336	; 0xfffff6e0
     40c:	41535500 	cmpmi	r3, r0, lsl #10
     410:	475f5452 			; <UNDEFINED> instruction: 0x475f5452
     414:	54497465 	strbpl	r7, [r9], #-1125	; 0xfffffb9b
     418:	74617453 	strbtvc	r7, [r1], #-1107	; 0xfffffbad
     41c:	55007375 	strpl	r7, [r0, #-885]	; 0xfffffc8b
     420:	54524153 	ldrbpl	r4, [r2], #-339	; 0xfffffead
     424:	4e494c5f 	mcrmi	12, 2, r4, cr9, cr15, {2}
     428:	00646d43 	rsbeq	r6, r4, r3, asr #26
     42c:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
     430:	72495f54 	subvc	r5, r9, #84, 30	; 0x150
     434:	6f434144 	svcvs	0x00434144
     438:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
     43c:	73795300 	cmnvc	r9, #0, 6
     440:	436d6574 	cmnmi	sp, #116, 10	; 0x1d000000
     444:	4365726f 	cmnmi	r5, #-268435450	; 0xf0000006
     448:	6b636f6c 	blvs	18dc200 <startup-0x1e723e00>
     44c:	4c435000 	marmi	acc0, r5, r3
     450:	465f324b 	ldrbmi	r3, [pc], -fp, asr #4
     454:	75716572 	ldrbvc	r6, [r1, #-1394]!	; 0xfffffa8e
     458:	79636e65 	stmdbvc	r3!, {r0, r2, r5, r6, r9, sl, fp, sp, lr}^
     45c:	41535500 	cmpmi	r3, r0, lsl #10
     460:	435f5452 	cmpmi	pc, #1375731712	; 0x52000000
     464:	6b636f6c 	blvs	18dc21c <startup-0x1e723de4>
     468:	41535500 	cmpmi	r3, r0, lsl #10
     46c:	525f5452 	subspl	r5, pc, #1375731712	; 0x52000000
     470:	69656365 	stmdbvs	r5!, {r0, r2, r5, r6, r8, r9, sp, lr}^
     474:	57726576 			; <UNDEFINED> instruction: 0x57726576
     478:	55656b61 	strbpl	r6, [r5, #-2913]!	; 0xfffff49f
     47c:	646d4370 	strbtvs	r4, [sp], #-880	; 0xfffffc90
     480:	53455200 	movtpl	r5, #20992	; 0x5200
     484:	45565245 	ldrbmi	r5, [r6, #-581]	; 0xfffffdbb
     488:	52003044 	andpl	r3, r0, #68	; 0x44
     48c:	52455345 	subpl	r5, r5, #335544321	; 0x14000001
     490:	31444556 	cmpcc	r4, r6, asr r5
     494:	53455200 	movtpl	r5, #20992	; 0x5200
     498:	45565245 	ldrbmi	r5, [r6, #-581]	; 0xfffffdbb
     49c:	52003244 	andpl	r3, r0, #68, 4	; 0x40000004
     4a0:	52455345 	subpl	r5, r5, #335544321	; 0x14000001
     4a4:	33444556 	movtcc	r4, #17750	; 0x4556
     4a8:	53455200 	movtpl	r5, #20992	; 0x5200
     4ac:	45565245 	ldrbmi	r5, [r6, #-581]	; 0xfffffdbb
     4b0:	52003444 	andpl	r3, r0, #68, 8	; 0x44000000
     4b4:	52455345 	subpl	r5, r5, #335544321	; 0x14000001
     4b8:	35444556 	strbcc	r4, [r4, #-1366]	; 0xfffffaaa
     4bc:	53455200 	movtpl	r5, #20992	; 0x5200
     4c0:	45565245 	ldrbmi	r5, [r6, #-581]	; 0xfffffdbb
     4c4:	55003644 	strpl	r3, [r0, #-1604]	; 0xfffff9bc
     4c8:	54524153 	ldrbpl	r4, [r2], #-339	; 0xfffffead
     4cc:	4472495f 	ldrbtmi	r4, [r2], #-2399	; 0xfffff6a1
     4d0:	646d4341 	strbtvs	r4, [sp], #-833	; 0xfffffcbf
     4d4:	61726600 	cmnvs	r2, r0, lsl #12
     4d8:	6f697463 	svcvs	0x00697463
     4dc:	646c616e 	strbtvs	r6, [ip], #-366	; 0xfffffe92
     4e0:	64697669 	strbtvs	r7, [r9], #-1641	; 0xfffff997
     4e4:	46007265 	strmi	r7, [r0], -r5, ror #4
     4e8:	74636e75 	strbtvc	r6, [r3], #-3701	; 0xfffff18b
     4ec:	616e6f69 	cmnvs	lr, r9, ror #30
     4f0:	6174536c 	cmnvs	r4, ip, ror #6
     4f4:	55006574 	strpl	r6, [r0, #-1396]	; 0xfffffa8c
     4f8:	54524153 	ldrbpl	r4, [r2], #-339	; 0xfffffead
     4fc:	616d535f 	cmnvs	sp, pc, asr r3
     500:	61437472 	hvcvs	14146	; 0x3742
     504:	414e6472 	hvcmi	58946	; 0xe642
     508:	6d434b43 	vstrvs	d20, [r3, #-268]	; 0xfffffef4
     50c:	5f5f0064 	svcpl	0x005f0064
     510:	746e6975 	strbtvc	r6, [lr], #-2421	; 0xfffff68b
     514:	745f3233 	ldrbvc	r3, [pc], #-563	; 51c <startup-0x1ffffae4>
     518:	4c435000 	marmi	acc0, r5, r3
     51c:	465f314b 	ldrbmi	r3, [pc], -fp, asr #2
     520:	75716572 	ldrbvc	r6, [r1, #-1394]!	; 0xfffffa8e
     524:	79636e65 	stmdbvc	r3!, {r0, r2, r5, r6, r9, sl, fp, sp, lr}^
     528:	41535500 	cmpmi	r3, r0, lsl #10
     52c:	475f5452 			; <UNDEFINED> instruction: 0x475f5452
     530:	6c467465 	cfstrdvs	mvd7, [r6], {101}	; 0x65
     534:	74536761 	ldrbvc	r6, [r3], #-1889	; 0xfffff89f
     538:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
     53c:	695f5f00 	ldmdbvs	pc, {r8, r9, sl, fp, ip, lr}^	; <UNPREDICTABLE>
     540:	3233746e 	eorscc	r7, r3, #1845493760	; 0x6e000000
     544:	5500745f 	strpl	r7, [r0, #-1119]	; 0xfffffba1
     548:	54524153 	ldrbpl	r4, [r2], #-339	; 0xfffffead
     54c:	0054495f 	subseq	r4, r4, pc, asr r9
     550:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
     554:	6e495f54 	mcrvs	15, 2, r5, cr9, cr4, {2}
     558:	74537469 	ldrbvc	r7, [r3], #-1129	; 0xfffffb97
     55c:	74637572 	strbtvc	r7, [r3], #-1394	; 0xfffffa8e
     560:	43435200 	movtmi	r5, #12800	; 0x3200
     564:	6f6c435f 	svcvs	0x006c435f
     568:	53736b63 	cmnpl	r3, #101376	; 0x18c00
     56c:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0xfffffe8c
     570:	53550073 	cmppl	r5, #115	; 0x73
     574:	5f545241 	svcpl	0x00545241
     578:	636f6c43 	cmnvs	pc, #17152	; 0x4300
     57c:	696e496b 	stmdbvs	lr!, {r0, r1, r3, r5, r6, r8, fp, lr}^
     580:	53550074 	cmppl	r5, #116	; 0x74
     584:	5f545241 	svcpl	0x00545241
     588:	656b6157 	strbvs	r6, [fp, #-343]!	; 0xfffffea9
     58c:	6f437055 	svcvs	0x00437055
     590:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
     594:	41535500 	cmpmi	r3, r0, lsl #10
     598:	485f5452 	ldmdami	pc, {r1, r4, r6, sl, ip, lr}^	; <UNPREDICTABLE>
     59c:	44666c61 	strbtmi	r6, [r6], #-3169	; 0xfffff39f
     5a0:	656c7075 	strbvs	r7, [ip, #-117]!	; 0xffffff8b
     5a4:	646d4378 	strbtvs	r4, [sp], #-888	; 0xfffffc88
     5a8:	41535500 	cmpmi	r3, r0, lsl #10
     5ac:	535f5452 	cmppl	pc, #1375731712	; 0x52000000
     5b0:	63757274 	cmnvs	r5, #116, 4	; 0x40000007
     5b4:	696e4974 	stmdbvs	lr!, {r2, r4, r5, r6, r8, fp, lr}^
     5b8:	53550074 	cmppl	r5, #116	; 0x74
     5bc:	5f545241 	svcpl	0x00545241
     5c0:	73657250 	cmnvc	r5, #80, 4
     5c4:	656c6163 	strbvs	r6, [ip, #-355]!	; 0xfffffe9d
     5c8:	53550072 	cmppl	r5, #114	; 0x72
     5cc:	5f545241 	svcpl	0x00545241
     5d0:	4c4f5043 	mcrrmi	0, 4, r5, pc, cr3
     5d4:	2f3a4300 	svccs	0x003a4300
     5d8:	2f746967 	svccs	0x00746967
     5dc:	32544144 	subscc	r4, r4, #68, 2
     5e0:	4c2d3039 	stcmi	0, cr3, [sp], #-228	; 0xffffff1c
     5e4:	736d7261 	cmnvc	sp, #268435462	; 0x10000006
     5e8:	65747379 	ldrbvs	r7, [r4, #-889]!	; 0xfffffc87
     5ec:	6f6b2f6d 	svcvs	0x006b2f6d
     5f0:	696c2f64 	stmdbvs	ip!, {r2, r5, r6, r8, r9, sl, fp, sp}^
     5f4:	54532f62 	ldrbpl	r2, [r3], #-3938	; 0xfffff09e
     5f8:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
     5fc:	696c5f34 	stmdbvs	ip!, {r2, r4, r5, r8, r9, sl, fp, ip, lr}^
     600:	54532f62 	ldrbpl	r2, [r3], #-3938	; 0xfffff09e
     604:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
     608:	5f787834 	svcpl	0x00787834
     60c:	50647453 	rsbpl	r7, r4, r3, asr r4
     610:	70697265 	rsbvc	r7, r9, r5, ror #4
     614:	72445f68 	subvc	r5, r4, #104, 30	; 0x1a0
     618:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
     61c:	6372732f 	cmnvs	r2, #-1140850688	; 0xbc000000
     620:	6d74732f 	ldclvs	3, cr7, [r4, #-188]!	; 0xffffff44
     624:	34663233 	strbtcc	r3, [r6], #-563	; 0xfffffdcd
     628:	755f7878 	ldrbvc	r7, [pc, #-2168]	; fffffdb8 <_global_impure_ptr+0xdfffad94>
     62c:	74726173 	ldrbtvc	r6, [r2], #-371	; 0xfffffe8d
     630:	4900632e 	stmdbmi	r0, {r1, r2, r3, r5, r8, r9, sp, lr}
     634:	525f4d54 	subspl	r4, pc, #84, 26	; 0x1500
     638:	66754278 			; <UNDEFINED> instruction: 0x66754278
     63c:	00726566 	rsbseq	r6, r2, r6, ror #10
     640:	73746962 	cmnvc	r4, #1605632	; 0x188000
     644:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0xfffffe8c
     648:	53550073 	cmppl	r5, #115	; 0x73
     64c:	5f545241 	svcpl	0x00545241
     650:	65636552 	strbvs	r6, [r3, #-1362]!	; 0xfffffaae
     654:	44657669 	strbtmi	r7, [r5], #-1641	; 0xfffff997
     658:	00617461 	rsbeq	r7, r1, r1, ror #8
     65c:	72617375 	rsbvc	r7, r1, #-738197503	; 0xd4000001
     660:	67657274 			; <UNDEFINED> instruction: 0x67657274
     664:	414e4500 	cmpmi	lr, r0, lsl #10
     668:	00454c42 	subeq	r4, r5, r2, asr #24
     66c:	66667562 	strbtvs	r7, [r6], -r2, ror #10
     670:	75507265 	ldrbvc	r7, [r0, #-613]	; 0xfffffd9b
     674:	49460074 	stmdbmi	r6, {r2, r4, r5, r6}^
     678:	64004f46 	strvs	r4, [r0], #-3910	; 0xfffff0ba
     67c:	00747365 	rsbseq	r7, r4, r5, ror #6
     680:	66667562 	strbtvs	r7, [r6], -r2, ror #10
     684:	656c6500 	strbvs	r6, [ip, #-1280]!	; 0xfffffb00
     688:	7562006d 	strbvc	r0, [r2, #-109]!	; 0xffffff93
     68c:	72656666 	rsbvc	r6, r5, #106954752	; 0x6600000
     690:	00746547 	rsbseq	r6, r4, r7, asr #10
     694:	66667562 	strbtvs	r7, [r6], -r2, ror #10
     698:	6e497265 	cdpvs	2, 4, cr7, cr9, cr5, {3}
     69c:	62007469 	andvs	r7, r0, #1761607680	; 0x69000000
     6a0:	65666675 	strbvs	r6, [r6, #-1653]!	; 0xfffff98b
     6a4:	3a430072 	bcc	10c0874 <startup-0x1ef3f78c>
     6a8:	7469672f 	strbtvc	r6, [r9], #-1839	; 0xfffff8d1
     6ac:	5441442f 	strbpl	r4, [r1], #-1071	; 0xfffffbd1
     6b0:	2d303932 			; <UNDEFINED> instruction: 0x2d303932
     6b4:	6d72614c 	ldfvse	f6, [r2, #-304]!	; 0xfffffed0
     6b8:	74737973 	ldrbtvc	r7, [r3], #-2419	; 0xfffff68d
     6bc:	6b2f6d65 	blvs	bdbc58 <startup-0x1f4243a8>
     6c0:	6c2f646f 	cfstrsvs	mvf6, [pc], #-444	; 50c <startup-0x1ffffaf4>
     6c4:	622f6269 	eorvs	r6, pc, #-1879048186	; 0x90000006
     6c8:	65666675 	strbvs	r6, [r6, #-1653]!	; 0xfffff98b
     6cc:	00632e72 	rsbeq	r2, r3, r2, ror lr
     6d0:	706c6c70 	rsbvc	r6, ip, r0, ror ip
     6d4:	45535200 	ldrbmi	r5, [r3, #-512]	; 0xfffffe00
     6d8:	44455652 	strbmi	r5, [r5], #-1618	; 0xfffff9ae
     6dc:	54520031 	ldrbpl	r0, [r2], #-49	; 0xffffffcf
     6e0:	4b575f43 	blmi	15d83f4 <startup-0x1ea27c0c>
     6e4:	495f5055 	ldmdbmi	pc, {r0, r2, r4, r6, ip, lr}^	; <UNPREDICTABLE>
     6e8:	006e5152 	rsbeq	r5, lr, r2, asr r1
     6ec:	49545845 	ldmdbmi	r4, {r0, r2, r6, fp, ip, lr}^
     6f0:	52495f32 	subpl	r5, r9, #50, 30	; 0xc8
     6f4:	44006e51 	strmi	r6, [r0], #-3665	; 0xfffff1af
     6f8:	5f31414d 	svcpl	0x0031414d
     6fc:	65727453 	ldrbvs	r7, [r2, #-1107]!	; 0xfffffbad
     700:	5f366d61 	svcpl	0x00366d61
     704:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     708:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
     70c:	50555f38 	subspl	r5, r5, r8, lsr pc
     710:	4d49545f 	cfstrdmi	mvd5, [r9, #-380]	; 0xfffffe84
     714:	495f3331 	ldmdbmi	pc, {r0, r4, r5, r8, r9, ip, sp}^	; <UNPREDICTABLE>
     718:	006e5152 	rsbeq	r5, lr, r2, asr r1
     71c:	494c4c50 	stmdbmi	ip, {r4, r6, sl, fp, lr}^
     720:	46435332 			; <UNDEFINED> instruction: 0x46435332
     724:	52005247 	andpl	r5, r0, #1879048196	; 0x70000004
     728:	495f4343 	ldmdbmi	pc, {r0, r1, r6, r8, r9, lr}^	; <UNPREDICTABLE>
     72c:	4c435332 	mcrrmi	3, 3, r5, r3, cr2
     730:	6e6f434b 	cdpvs	3, 6, cr4, cr15, cr11, {2}
     734:	00676966 	rsbeq	r6, r7, r6, ror #18
     738:	5f434352 	svcpl	0x00434352
     73c:	43746547 	cmnmi	r4, #297795584	; 0x11c00000
     740:	6b636f6c 	blvs	18dc4f8 <startup-0x1e723b08>
     744:	65724673 	ldrbvs	r4, [r2, #-1651]!	; 0xfffff98d
     748:	4d440071 	stclmi	0, cr0, [r4, #-452]	; 0xfffffe3c
     74c:	535f3241 	cmppl	pc, #268435460	; 0x10000004
     750:	61657274 	smcvs	22308	; 0x5724
     754:	495f316d 	ldmdbmi	pc, {r0, r2, r3, r5, r6, r8, ip, sp}^	; <UNPREDICTABLE>
     758:	006e5152 	rsbeq	r5, lr, r2, asr r1
     75c:	4f495047 	svcmi	0x00495047
     760:	5075505f 	rsbspl	r5, r5, pc, asr r0
     764:	4f4e5f64 	svcmi	0x004e5f64
     768:	4c4c5550 	cfstr64mi	mvdx5, [ip], {80}	; 0x50
     76c:	4f545600 	svcmi	0x00545600
     770:	50530052 	subspl	r0, r3, r2, asr r0
     774:	495f3349 	ldmdbmi	pc, {r0, r3, r6, r8, r9, ip, sp}^	; <UNPREDICTABLE>
     778:	006e5152 	rsbeq	r5, lr, r2, asr r1
     77c:	53414c46 	movtpl	r4, #7238	; 0x1c46
     780:	52495f48 	subpl	r5, r9, #72, 30	; 0x120
     784:	44006e51 	strmi	r6, [r0], #-3665	; 0xfffff1af
     788:	5f494d43 	svcpl	0x00494d43
     78c:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     790:	43435200 	movtmi	r5, #12800	; 0x3200
     794:	4250415f 	subsmi	r4, r0, #-1073741801	; 0xc0000017
     798:	72655032 	rsbvc	r5, r5, #50	; 0x32
     79c:	43687069 	cmnmi	r8, #105	; 0x69
     7a0:	6b636f6c 	blvs	18dc558 <startup-0x1e723aa8>
     7a4:	6f4d504c 	svcvs	0x004d504c
     7a8:	6d436564 	cfstr64vs	mvdx6, [r3, #-400]	; 0xfffffe70
     7ac:	43520064 	cmpmi	r2, #100	; 0x64
     7b0:	48415f43 	stmdami	r1, {r0, r1, r6, r8, r9, sl, fp, ip, lr}^
     7b4:	65503242 	ldrbvs	r3, [r0, #-578]	; 0xfffffdbe
     7b8:	68706972 	ldmdavs	r0!, {r1, r4, r5, r6, r8, fp, sp, lr}^
     7bc:	636f6c43 	cmnvs	pc, #17152	; 0x4300
     7c0:	4d504c6b 	ldclmi	12, cr4, [r0, #-428]	; 0xfffffe54
     7c4:	4365646f 	cmnmi	r5, #1862270976	; 0x6f000000
     7c8:	4700646d 	strmi	r6, [r0, -sp, ror #8]
     7cc:	4f4f4950 	svcmi	0x004f4950
     7d0:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0xfffff6ac
     7d4:	7079545f 	rsbsvc	r5, r9, pc, asr r4
     7d8:	66654465 	strbtvs	r4, [r5], -r5, ror #8
     7dc:	43435200 	movtmi	r5, #12800	; 0x3200
     7e0:	4250415f 	subsmi	r4, r0, #-1073741801	; 0xc0000017
     7e4:	72655031 	rsbvc	r5, r5, #49	; 0x31
     7e8:	52687069 	rsbpl	r7, r8, #105	; 0x69
     7ec:	74657365 	strbtvc	r7, [r5], #-869	; 0xfffffc9b
     7f0:	00646d43 	rsbeq	r6, r4, r3, asr #26
     7f4:	5f434352 	svcpl	0x00434352
     7f8:	65646f4d 	strbvs	r6, [r4, #-3917]!	; 0xfffff0b3
     7fc:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
     800:	52495f32 	subpl	r5, r9, #50, 30	; 0xc8
     804:	52006e51 	andpl	r6, r0, #1296	; 0x510
     808:	525f4343 	subspl	r4, pc, #201326593	; 0xc000001
     80c:	4c434354 	mcrrmi	3, 5, r4, r3, cr4
     810:	756f534b 	strbvc	r5, [pc, #-843]!	; 4cd <startup-0x1ffffb33>
     814:	00656372 	rsbeq	r6, r5, r2, ror r3
     818:	5f434352 	svcpl	0x00434352
     81c:	32424841 	subcc	r4, r2, #4259840	; 0x410000
     820:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
     824:	6c436870 	mcrrvs	8, 7, r6, r3, cr0
     828:	436b636f 	cmnmi	fp, #-1140850687	; 0xbc000001
     82c:	4900646d 	stmdbmi	r0, {r0, r2, r3, r5, r6, sl, sp, lr}
     830:	00525043 	subseq	r5, r2, r3, asr #32
     834:	5f434352 	svcpl	0x00434352
     838:	434d4954 	movtmi	r4, #55636	; 0xd954
     83c:	72504b4c 	subsvc	r4, r0, #76, 22	; 0x13000
     840:	6f437365 	svcvs	0x00437365
     844:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
     848:	43435200 	movtmi	r5, #12800	; 0x3200
     84c:	4c4c505f 	mcrrmi	0, 5, r5, ip, cr15
     850:	43533249 	cmpmi	r3, #-1879048188	; 0x90000004
     854:	5200646d 	andpl	r6, r0, #1828716544	; 0x6d000000
     858:	485f4343 	ldmdami	pc, {r0, r1, r6, r8, r9, lr}^	; <UNPREDICTABLE>
     85c:	004b4c43 	subeq	r4, fp, r3, asr #24
     860:	324e4143 	subcc	r4, lr, #-1073741808	; 0xc0000010
     864:	3058525f 	subscc	r5, r8, pc, asr r2
     868:	5152495f 	cmppl	r2, pc, asr r9
     86c:	5355006e 	cmppl	r5, #110	; 0x6e
     870:	36545241 	ldrbcc	r5, [r4], -r1, asr #4
     874:	5152495f 	cmppl	r2, pc, asr r9
     878:	6974006e 	ldmdbvs	r4!, {r1, r2, r3, r5, r6}^
     87c:	6c5f656d 	cfldr64vs	mvdx6, [pc], {109}	; 0x6d
     880:	006d7261 	rsbeq	r7, sp, r1, ror #4
     884:	32495053 	subcc	r5, r9, #83	; 0x53
     888:	5152495f 	cmppl	r2, pc, asr r9
     88c:	4954006e 	ldmdbmi	r4, {r1, r2, r3, r5, r6}^
     890:	425f384d 	subsmi	r3, pc, #5046272	; 0x4d0000
     894:	545f4b52 	ldrbpl	r4, [pc], #-2898	; 89c <startup-0x1ffff764>
     898:	32314d49 	eorscc	r4, r1, #4672	; 0x1240
     89c:	5152495f 	cmppl	r2, pc, asr r9
     8a0:	4841006e 	stmdami	r1, {r1, r2, r3, r5, r6}^
     8a4:	504c3242 	subpl	r3, ip, r2, asr #4
     8a8:	00524e45 	subseq	r4, r2, r5, asr #28
     8ac:	4f495047 	svcmi	0x00495047
     8b0:	5075505f 	rsbspl	r5, r5, pc, asr r0
     8b4:	4f445f64 	svcmi	0x00445f64
     8b8:	41004e57 	tstmi	r0, r7, asr lr
     8bc:	52435249 	subpl	r5, r3, #-1879048188	; 0x90000004
     8c0:	43435200 	movtmi	r5, #12800	; 0x3200
     8c4:	4941535f 	stmdbmi	r1, {r0, r1, r2, r3, r4, r6, r8, r9, ip, lr}^
     8c8:	534c4c50 	movtpl	r4, #52304	; 0xcc50
     8cc:	6c434941 	mcrrvs	9, 4, r4, r3, cr1	; <UNPREDICTABLE>
     8d0:	7669446b 	strbtvc	r4, [r9], -fp, ror #8
     8d4:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
     8d8:	69006769 	stmdbvs	r0, {r0, r3, r5, r6, r8, r9, sl, sp, lr}
     8dc:	5f74696e 	svcpl	0x0074696e
     8e0:	4f495047 	svcmi	0x00495047
     8e4:	726f505f 	rsbvc	r5, pc, #95	; 0x5f
     8e8:	43007374 	movwmi	r7, #884	; 0x374
     8ec:	44495550 	strbmi	r5, [r9], #-1360	; 0xfffffab0
     8f0:	73795300 	cmnvc	r9, #0, 6
     8f4:	6b636954 	blvs	18dae4c <startup-0x1e7251b4>
     8f8:	6e61485f 	mcrvs	8, 3, r4, cr1, cr15, {2}
     8fc:	72656c64 	rsbvc	r6, r5, #100, 24	; 0x6400
     900:	43435200 	movtmi	r5, #12800	; 0x3200
     904:	44544c5f 	ldrbmi	r4, [r4], #-3167	; 0xfffff3a1
     908:	4b4c4343 	blmi	131161c <startup-0x1ecee9e4>
     90c:	43766944 	cmnmi	r6, #68, 18	; 0x110000
     910:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
     914:	4d440067 	stclmi	0, cr0, [r4, #-412]	; 0xfffffe64
     918:	535f3241 	cmppl	pc, #268435460	; 0x10000004
     91c:	61657274 	smcvs	22308	; 0x5724
     920:	495f356d 	ldmdbmi	pc, {r0, r2, r3, r5, r6, r8, sl, ip, sp}^	; <UNPREDICTABLE>
     924:	006e5152 	rsbeq	r5, lr, r2, asr r1
     928:	4f495047 	svcmi	0x00495047
     92c:	646f4d5f 	strbtvs	r4, [pc], #-3423	; 934 <startup-0x1ffff6cc>
     930:	46415f65 	strbmi	r5, [r1], -r5, ror #30
     934:	43435200 	movtmi	r5, #12800	; 0x3200
     938:	4248415f 	submi	r4, r8, #-1073741801	; 0xc0000017
     93c:	72655033 	rsbvc	r5, r5, #51	; 0x33
     940:	52687069 	rsbpl	r7, r8, #105	; 0x69
     944:	74657365 	strbtvc	r7, [r5], #-869	; 0xfffffc9b
     948:	00646d43 	rsbeq	r6, r4, r3, asr #26
     94c:	314d4954 	cmpcc	sp, r4, asr r9
     950:	4752545f 			; <UNDEFINED> instruction: 0x4752545f
     954:	4d4f435f 	stclmi	3, cr4, [pc, #-380]	; 7e0 <startup-0x1ffff820>
     958:	4d49545f 	cfstrdmi	mvd5, [r9, #-380]	; 0xfffffe84
     95c:	495f3131 	ldmdbmi	pc, {r0, r4, r5, r8, ip, sp}^	; <UNPREDICTABLE>
     960:	006e5152 	rsbeq	r5, lr, r2, asr r1
     964:	4f495047 	svcmi	0x00495047
     968:	646f4d5f 	strbtvs	r4, [pc], #-3423	; 970 <startup-0x1ffff690>
     96c:	4e415f65 	cdpmi	15, 4, cr5, cr1, cr5, {3}
     970:	43435200 	movtmi	r5, #12800	; 0x3200
     974:	4c43505f 	mcrrmi	0, 5, r5, r3, cr15
     978:	6f43324b 	svcvs	0x0043324b
     97c:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
     980:	6e6f6300 	cdpvs	3, 6, cr6, cr15, cr0, {0}
     984:	6c6f7274 	sfmvs	f7, 2, [pc], #-464	; 7bc <startup-0x1ffff844>
     988:	73746962 	cmnvc	r4, #1605632	; 0x188000
     98c:	43435200 	movtmi	r5, #12800	; 0x3200
     990:	4965445f 	stmdbmi	r5!, {r0, r1, r2, r3, r4, r6, sl, lr}^
     994:	0074696e 	rsbseq	r6, r4, lr, ror #18
     998:	5f434352 	svcpl	0x00434352
     99c:	42494153 	submi	r4, r9, #-1073741804	; 0xc0000014
     9a0:	6b636f6c 	blvs	18dc758 <startup-0x1e7238a8>
     9a4:	4b4c4342 	blmi	13116b4 <startup-0x1ecee94c>
     9a8:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
     9ac:	41006769 	tstmi	r0, r9, ror #14
     9b0:	45324250 	ldrmi	r4, [r2, #-592]!	; 0xfffffdb0
     9b4:	5200524e 	andpl	r5, r0, #-536870908	; 0xe0000004
     9b8:	475f4343 	ldrbmi	r4, [pc, -r3, asr #6]
     9bc:	59537465 	ldmdbpl	r3, {r0, r2, r5, r6, sl, ip, sp, lr}^
     9c0:	4b4c4353 	blmi	1311714 <startup-0x1ecee8ec>
     9c4:	72756f53 	rsbsvc	r6, r5, #332	; 0x14c
     9c8:	41006563 	tstmi	r0, r3, ror #10
     9cc:	4c314248 	lfmmi	f4, 4, [r1], #-288	; 0xfffffee0
     9d0:	524e4550 	subpl	r4, lr, #80, 10	; 0x14000000
     9d4:	43435200 	movtmi	r5, #12800	; 0x3200
     9d8:	4c4c505f 	mcrrmi	0, 5, r5, ip, cr15
     9dc:	44533249 	ldrbmi	r3, [r3], #-585	; 0xfffffdb7
     9e0:	00517669 	subseq	r7, r1, r9, ror #12
     9e4:	54737953 	ldrbtpl	r7, [r3], #-2387	; 0xfffff6ad
     9e8:	5f6b6369 	svcpl	0x006b6369
     9ec:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     9f0:	43435200 	movtmi	r5, #12800	; 0x3200
     9f4:	4248415f 	submi	r4, r8, #-1073741801	; 0xc0000017
     9f8:	72655033 	rsbvc	r5, r5, #51	; 0x33
     9fc:	00687069 	rsbeq	r7, r8, r9, rrx
     a00:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
     a04:	495f3354 	ldmdbmi	pc, {r2, r4, r6, r8, r9, ip, sp}^	; <UNPREDICTABLE>
     a08:	006e5152 	rsbeq	r5, lr, r2, asr r1
     a0c:	434b4344 	movtmi	r4, #45892	; 0xb344
     a10:	00524746 	subseq	r4, r2, r6, asr #14
     a14:	52534349 	subspl	r4, r3, #603979777	; 0x24000001
     a18:	43435200 	movtmi	r5, #12800	; 0x3200
     a1c:	4f434d5f 	svcmi	0x00434d5f
     a20:	76694432 			; <UNDEFINED> instruction: 0x76694432
     a24:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
     a28:	544f5f4f 	strbpl	r5, [pc], #-3919	; a30 <startup-0x1ffff5d0>
     a2c:	5f657079 	svcpl	0x00657079
     a30:	4700444f 	strmi	r4, [r0, -pc, asr #8]
     a34:	5f4f4950 	svcpl	0x004f4950
     a38:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xfffff1b7
     a3c:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0xfffff6ac
     a40:	00666544 	rsbeq	r6, r6, r4, asr #10
     a44:	5f434352 	svcpl	0x00434352
     a48:	43535953 	cmpmi	r3, #1359872	; 0x14c000
     a4c:	6f534b4c 	svcvs	0x00534b4c
     a50:	65637275 	strbvs	r7, [r3, #-629]!	; 0xfffffd8b
     a54:	414d4400 	cmpmi	sp, r0, lsl #8
     a58:	74535f31 	ldrbvc	r5, [r3], #-3889	; 0xfffff0cf
     a5c:	6d616572 	cfstr64vs	mvdx6, [r1, #-456]!	; 0xfffffe38
     a60:	52495f32 	subpl	r5, r9, #50, 30	; 0xc8
     a64:	52006e51 	andpl	r6, r0, #1296	; 0x510
     a68:	505f4343 	subspl	r4, pc, r3, asr #6
     a6c:	6f534c4c 	svcvs	0x00534c4c
     a70:	65637275 	strbvs	r7, [r3, #-629]!	; 0xfffffd8b
     a74:	43435200 	movtmi	r5, #12800	; 0x3200
     a78:	4250415f 	subsmi	r4, r0, #-1073741801	; 0xc0000017
     a7c:	72655031 	rsbvc	r5, r5, #49	; 0x31
     a80:	43687069 	cmnmi	r8, #105	; 0x69
     a84:	6b636f6c 	blvs	18dc83c <startup-0x1e7237c4>
     a88:	00646d43 	rsbeq	r6, r4, r3, asr #26
     a8c:	32414d44 	subcc	r4, r1, #68, 26	; 0x1100
     a90:	7274535f 	rsbsvc	r5, r4, #2080374785	; 0x7c000001
     a94:	346d6165 	strbtcc	r6, [sp], #-357	; 0xfffffe9b
     a98:	5152495f 	cmppl	r2, pc, asr r9
     a9c:	4149006e 	cmpmi	r9, lr, rrx
     aa0:	47005242 	strmi	r5, [r0, -r2, asr #4]
     aa4:	5f4f4950 	svcpl	0x004f4950
     aa8:	7079544f 	rsbsvc	r5, r9, pc, asr #8
     aac:	50505f65 	subspl	r5, r0, r5, ror #30
     ab0:	43324900 	teqmi	r2, #0, 18
     ab4:	52455f31 	subpl	r5, r5, #49, 30	; 0xc4
     ab8:	5152495f 	cmppl	r2, pc, asr r9
     abc:	4143006e 	cmpmi	r3, lr, rrx
     ac0:	535f324e 	cmppl	pc, #-536870908	; 0xe0000004
     ac4:	495f4543 	ldmdbmi	pc, {r0, r1, r6, r8, sl, lr}^	; <UNPREDICTABLE>
     ac8:	006e5152 	rsbeq	r5, lr, r2, asr r1
     acc:	5f434352 	svcpl	0x00434352
     ad0:	4345534c 	movtmi	r5, #21324	; 0x534c
     ad4:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
     ad8:	49540067 	ldmdbmi	r4, {r0, r1, r2, r5, r6}^
     adc:	495f354d 	ldmdbmi	pc, {r0, r2, r3, r6, r8, sl, ip, sp}^	; <UNPREDICTABLE>
     ae0:	006e5152 	rsbeq	r5, lr, r2, asr r1
     ae4:	67617355 			; <UNDEFINED> instruction: 0x67617355
     ae8:	75614665 	strbvc	r4, [r1, #-1637]!	; 0xfffff99b
     aec:	495f746c 	ldmdbmi	pc, {r2, r3, r5, r6, sl, ip, sp, lr}^	; <UNPREDICTABLE>
     af0:	006e5152 	rsbeq	r5, lr, r2, asr r1
     af4:	74736574 	ldrbtvc	r6, [r3], #-1396	; 0xfffffa8c
     af8:	43530034 	cmpmi	r3, #52	; 0x34
     afc:	79545f42 	ldmdbvc	r4, {r1, r6, r8, r9, sl, fp, ip, lr}^
     b00:	47006570 	smlsdxmi	r0, r0, r5, r6
     b04:	504f4950 	subpl	r4, pc, r0, asr r9	; <UNPREDICTABLE>
     b08:	5f645075 	svcpl	0x00645075
     b0c:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0xfffff6ac
     b10:	00666544 	rsbeq	r6, r6, r4, asr #10
     b14:	52534644 	subspl	r4, r3, #68, 12	; 0x4400000
     b18:	42484100 	submi	r4, r8, #0, 2
     b1c:	54535231 	ldrbpl	r5, [r3], #-561	; 0xfffffdcf
     b20:	43520052 	cmpmi	r2, #82	; 0x52
     b24:	50415f43 	subpl	r5, r1, r3, asr #30
     b28:	65503242 	ldrbvs	r3, [r0, #-578]	; 0xfffffdbe
     b2c:	68706972 	ldmdavs	r0!, {r1, r4, r5, r6, r8, fp, sp, lr}^
     b30:	65736552 	ldrbvs	r6, [r3, #-1362]!	; 0xfffffaae
     b34:	646d4374 	strbtvs	r4, [sp], #-884	; 0xfffffc8c
     b38:	74657200 	strbtvc	r7, [r5], #-512	; 0xfffffe00
     b3c:	436e7275 	cmnmi	lr, #1342177287	; 0x50000007
     b40:	0065646f 	rsbeq	r6, r5, pc, ror #8
     b44:	5f434352 	svcpl	0x00434352
     b48:	33424841 	movtcc	r4, #10305	; 0x2841
     b4c:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
     b50:	6c436870 	mcrrvs	8, 7, r6, r3, cr0
     b54:	4c6b636f 	stclmi	3, cr6, [fp], #-444	; 0xfffffe44
     b58:	646f4d50 	strbtvs	r4, [pc], #-3408	; b60 <startup-0x1ffff4a0>
     b5c:	646d4365 	strbtvs	r4, [sp], #-869	; 0xfffffc9b
     b60:	42484100 	submi	r4, r8, #0, 2
     b64:	524e4532 	subpl	r4, lr, #209715200	; 0xc800000
     b68:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
     b6c:	6f4c5f4f 	svcvs	0x004c5f4f
     b70:	70535f77 	subsvc	r5, r3, r7, ror pc
     b74:	00646565 	rsbeq	r6, r4, r5, ror #10
     b78:	314e4143 	cmpcc	lr, r3, asr #2
     b7c:	3058525f 	subscc	r5, r8, pc, asr r2
     b80:	5152495f 	cmppl	r2, pc, asr r9
     b84:	4648006e 	strbmi	r0, [r8], -lr, rrx
     b88:	47005253 	smlsdmi	r0, r3, r2, r5
     b8c:	5f4f4950 	svcpl	0x004f4950
     b90:	64616572 	strbtvs	r6, [r1], #-1394	; 0xfffffa8e
     b94:	43435200 	movtmi	r5, #12800	; 0x3200
     b98:	5359535f 	cmppl	r9, #2080374785	; 0x7c000001
     b9c:	004b4c43 	subeq	r4, fp, r3, asr #24
     ba0:	4d4c4c50 	stclmi	12, cr4, [ip, #-320]	; 0xfffffec0
     ba4:	4c4c5000 	marmi	acc0, r5, ip
     ba8:	4c50004e 	mrrcmi	0, 4, r0, r0, cr14	; <UNPREDICTABLE>
     bac:	5000504c 	andpl	r5, r0, ip, asr #32
     bb0:	00514c4c 	subseq	r4, r1, ip, asr #24
     bb4:	5f434352 	svcpl	0x00434352
     bb8:	4349534c 	movtmi	r5, #37708	; 0x934c
     bbc:	7000646d 	andvc	r6, r0, sp, ror #8
     bc0:	6f736c6c 	svcvs	0x00736c6c
     bc4:	65637275 	strbvs	r7, [r3, #-629]!	; 0xfffffd8b
     bc8:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
     bcc:	52495f34 	subpl	r5, r9, #52, 30	; 0xd0
     bd0:	52006e51 	andpl	r6, r0, #1296	; 0x510
     bd4:	485f4343 	ldmdami	pc, {r0, r1, r6, r8, r9, lr}^	; <UNPREDICTABLE>
     bd8:	434b4c43 	movtmi	r4, #48195	; 0xbc43
     bdc:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
     be0:	43520067 	cmpmi	r2, #103	; 0x67
     be4:	6c435f43 	mcrrvs	15, 4, r5, r3, cr3
     be8:	46726165 	ldrbtmi	r6, [r2], -r5, ror #2
     bec:	0067616c 	rsbeq	r6, r7, ip, ror #2
     bf0:	5f434352 	svcpl	0x00434352
     bf4:	43455348 	movtmi	r5, #21320	; 0x5348
     bf8:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
     bfc:	44420067 	strbmi	r0, [r2], #-103	; 0xffffff99
     c00:	53005243 	movwpl	r5, #579	; 0x243
     c04:	52534348 	subspl	r4, r3, #72, 6	; 0x20000001
     c08:	43435200 	movtmi	r5, #12800	; 0x3200
     c0c:	45534c5f 	ldrbmi	r4, [r3, #-3167]	; 0xfffff3a1
     c10:	49545300 	ldmdbmi	r4, {r8, r9, ip, lr}^
     c14:	32490052 	subcc	r0, r9, #82	; 0x52
     c18:	455f3143 	ldrbmi	r3, [pc, #-323]	; add <startup-0x1ffff523>
     c1c:	52495f56 	subpl	r5, r9, #344	; 0x158
     c20:	52006e51 	andpl	r6, r0, #1296	; 0x510
     c24:	535f4343 	cmppl	pc, #201326593	; 0xc000001
     c28:	6c424941 	mcrrvs	9, 4, r4, r2, cr1	; <UNPREDICTABLE>
     c2c:	416b636f 	cmnmi	fp, pc, ror #6
     c30:	434b4c43 	movtmi	r4, #48195	; 0xbc43
     c34:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
     c38:	74730067 	ldrbtvc	r0, [r3], #-103	; 0xffffff99
     c3c:	75747261 	ldrbvc	r7, [r4, #-609]!	; 0xfffffd9f
     c40:	756f6370 	strbvc	r6, [pc, #-880]!	; 8d8 <startup-0x1ffff728>
     c44:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
     c48:	43435200 	movtmi	r5, #12800	; 0x3200
     c4c:	4c4c505f 	mcrrmi	0, 5, r5, ip, cr15
     c50:	43494153 	movtmi	r4, #37203	; 0x9153
     c54:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
     c58:	50470067 	subpl	r0, r7, r7, rrx
     c5c:	4d5f4f49 	ldclmi	15, cr4, [pc, #-292]	; b40 <startup-0x1ffff4c0>
     c60:	5f65646f 	svcpl	0x0065646f
     c64:	0054554f 	subseq	r5, r4, pc, asr #10
     c68:	314d4954 	cmpcc	sp, r4, asr r9
     c6c:	5f43435f 	svcpl	0x0043435f
     c70:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     c74:	53414800 	movtpl	r4, #6144	; 0x1800
     c78:	4e525f48 	cdpmi	15, 5, cr5, cr2, cr8, {2}
     c7c:	52495f47 	subpl	r5, r9, #284	; 0x11c
     c80:	45006e51 	strmi	r6, [r0, #-3665]	; 0xfffff1af
     c84:	31495458 	cmpcc	r9, r8, asr r4
     c88:	5152495f 	cmppl	r2, pc, asr r9
     c8c:	4143006e 	cmpmi	r3, lr, rrx
     c90:	545f314e 	ldrbpl	r3, [pc], #-334	; c98 <startup-0x1ffff368>
     c94:	52495f58 	subpl	r5, r9, #88, 30	; 0x160
     c98:	44006e51 	strmi	r6, [r0], #-3665	; 0xfffff1af
     c9c:	5f31414d 	svcpl	0x0031414d
     ca0:	65727453 	ldrbvs	r7, [r2, #-1107]!	; 0xfffffbad
     ca4:	5f356d61 	svcpl	0x00356d61
     ca8:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     cac:	43435200 	movtmi	r5, #12800	; 0x3200
     cb0:	4553485f 	ldrbmi	r4, [r3, #-2143]	; 0xfffff7a1
     cb4:	43435200 	movtmi	r5, #12800	; 0x3200
     cb8:	4f434d5f 	svcmi	0x00434d5f
     cbc:	6e6f4331 	mcrvs	3, 3, r4, cr15, cr1, {1}
     cc0:	00676966 	rsbeq	r6, r7, r6, ror #18
     cc4:	384d4954 	stmdacc	sp, {r2, r4, r6, r8, fp, lr}^
     cc8:	4752545f 			; <UNDEFINED> instruction: 0x4752545f
     ccc:	4d4f435f 	stclmi	3, cr4, [pc, #-380]	; b58 <startup-0x1ffff4a8>
     cd0:	4d49545f 	cfstrdmi	mvd5, [r9, #-380]	; 0xfffffe84
     cd4:	495f3431 	ldmdbmi	pc, {r0, r4, r5, sl, ip, sp}^	; <UNPREDICTABLE>
     cd8:	006e5152 	rsbeq	r5, lr, r2, asr r1
     cdc:	32414d44 	subcc	r4, r1, #68, 26	; 0x1100
     ce0:	7274535f 	rsbsvc	r5, r4, #2080374785	; 0x7c000001
     ce4:	376d6165 	strbcc	r6, [sp, -r5, ror #2]!
     ce8:	5152495f 	cmppl	r2, pc, asr r9
     cec:	544f006e 	strbpl	r0, [pc], #-110	; cf4 <startup-0x1ffff30c>
     cf0:	53465f47 	movtpl	r5, #28487	; 0x6f47
     cf4:	5152495f 	cmppl	r2, pc, asr r9
     cf8:	6f4e006e 	svcvs	0x004e006e
     cfc:	73614d6e 	cmnvc	r1, #7040	; 0x1b80
     d00:	6c62616b 	stfvse	f6, [r2], #-428	; 0xfffffe54
     d04:	746e4965 	strbtvc	r4, [lr], #-2405	; 0xfffff69b
     d08:	5152495f 	cmppl	r2, pc, asr r9
     d0c:	5757006e 	ldrbpl	r0, [r7, -lr, rrx]
     d10:	495f4744 	ldmdbmi	pc, {r2, r6, r8, r9, sl, lr}^	; <UNPREDICTABLE>
     d14:	006e5152 	rsbeq	r5, lr, r2, asr r1
     d18:	5f47544f 	svcpl	0x0047544f
     d1c:	575f5348 	ldrbpl	r5, [pc, -r8, asr #6]
     d20:	5f50554b 	svcpl	0x0050554b
     d24:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     d28:	43435200 	movtmi	r5, #12800	; 0x3200
     d2c:	4250415f 	subsmi	r4, r0, #-1073741801	; 0xc0000017
     d30:	72655032 	rsbvc	r5, r5, #50	; 0x32
     d34:	43687069 	cmnmi	r8, #105	; 0x69
     d38:	6b636f6c 	blvs	18dcaf0 <startup-0x1e723510>
     d3c:	00646d43 	rsbeq	r6, r4, r3, asr #26
     d40:	5f434352 	svcpl	0x00434352
     d44:	534c4c50 	movtpl	r4, #52304	; 0xcc50
     d48:	69444941 	stmdbvs	r4, {r0, r6, r8, fp, lr}^
     d4c:	52005176 	andpl	r5, r0, #-2147483619	; 0x8000001d
     d50:	505f4343 	subspl	r4, pc, r3, asr #6
     d54:	41534c4c 	cmpmi	r3, ip, asr #24
     d58:	76694449 	strbtvc	r4, [r9], -r9, asr #8
     d5c:	43520052 	cmpmi	r2, #82	; 0x52
     d60:	41535f43 	cmpmi	r3, r3, asr #30
     d64:	6f6c4249 	svcvs	0x006c4249
     d68:	43426b63 	movtmi	r6, #11107	; 0x2b63
     d6c:	6f534b4c 	svcvs	0x00534b4c
     d70:	65637275 	strbvs	r7, [r3, #-629]!	; 0xfffffd8b
     d74:	6d654d00 	stclvs	13, cr4, [r5, #-0]
     d78:	4d79726f 	lfmmi	f7, 2, [r9, #-444]!	; 0xfffffe44
     d7c:	67616e61 	strbvs	r6, [r1, -r1, ror #28]!
     d80:	6e656d65 	cdpvs	13, 6, cr6, cr5, cr5, {3}
     d84:	52495f74 	subpl	r5, r9, #116, 30	; 0x1d0
     d88:	54006e51 	strpl	r6, [r0], #-3665	; 0xfffff1af
     d8c:	5f504d41 	svcpl	0x00504d41
     d90:	4d415453 	cfstrdmi	mvd5, [r1, #-332]	; 0xfffffeb4
     d94:	52495f50 	subpl	r5, r9, #80, 30	; 0x140
     d98:	43006e51 	movwmi	r6, #3665	; 0xe51
     d9c:	5f314e41 	svcpl	0x00314e41
     da0:	5f454353 	svcpl	0x00454353
     da4:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     da8:	51524900 	cmppl	r2, r0, lsl #18
     dac:	79545f6e 	ldmdbvc	r4, {r1, r2, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
     db0:	47006570 	smlsdxmi	r0, r0, r5, r6
     db4:	5f4f4950 	svcpl	0x004f4950
     db8:	65646f4d 	strbvs	r6, [r4, #-3917]!	; 0xfffff0b3
     dbc:	004e495f 	subeq	r4, lr, pc, asr r9
     dc0:	32414d44 	subcc	r4, r1, #68, 26	; 0x1100
     dc4:	7274535f 	rsbsvc	r5, r4, #2080374785	; 0x7c000001
     dc8:	306d6165 	rsbcc	r6, sp, r5, ror #2
     dcc:	5152495f 	cmppl	r2, pc, asr r9
     dd0:	4352006e 	cmpmi	r2, #110	; 0x6e
     dd4:	434d5f43 	movtmi	r5, #57155	; 0xdf43
     dd8:	6f43324f 	svcvs	0x0043324f
     ddc:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
     de0:	4b434c00 	blmi	10d3de8 <startup-0x1ef2c218>
     de4:	43520052 	cmpmi	r2, #82	; 0x52
     de8:	32495f43 	subcc	r5, r9, #268	; 0x10c
     dec:	4b4c4353 	blmi	1311b40 <startup-0x1ecee4c0>
     df0:	72756f53 	rsbsvc	r6, r5, #332	; 0x14c
     df4:	45006563 	strmi	r6, [r0, #-1379]	; 0xfffffa9d
     df8:	524f5252 	subpl	r5, pc, #536870917	; 0x20000005
     dfc:	43324900 	teqmi	r2, #0, 18
     e00:	52455f32 	subpl	r5, r5, #50, 30	; 0xc8
     e04:	5152495f 	cmppl	r2, pc, asr r9
     e08:	736d006e 	cmnvc	sp, #110	; 0x6e
     e0c:	6b636954 	blvs	18db364 <startup-0x1e724c9c>
     e10:	43520073 	cmpmi	r2, #115	; 0x73
     e14:	43505f43 	cmpmi	r0, #268	; 0x10c
     e18:	43314b4c 	teqmi	r1, #76, 22	; 0x13000
     e1c:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
     e20:	534f0067 	movtpl	r0, #61543	; 0xf067
     e24:	44454550 	strbmi	r4, [r5], #-1360	; 0xfffffab0
     e28:	75420052 	strbvc	r0, [r2, #-82]	; 0xffffffae
     e2c:	75614673 	strbvc	r4, [r1, #-1651]!	; 0xfffff98d
     e30:	495f746c 	ldmdbmi	pc, {r2, r3, r5, r6, sl, ip, sp, lr}^	; <UNPREDICTABLE>
     e34:	006e5152 	rsbeq	r5, lr, r2, asr r1
     e38:	6b636974 	blvs	18db410 <startup-0x1e724bf0>
     e3c:	4c500073 	mrrcmi	0, 7, r0, r0, cr3	; <UNPREDICTABLE>
     e40:	4746434c 	strbmi	r4, [r6, -ip, asr #6]
     e44:	41550052 	cmpmi	r5, r2, asr r0
     e48:	5f355452 	svcpl	0x00355452
     e4c:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     e50:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
     e54:	52425f31 	subpl	r5, r2, #49, 30	; 0xc4
     e58:	49545f4b 	ldmdbmi	r4, {r0, r1, r3, r6, r8, r9, sl, fp, ip, lr}^
     e5c:	495f394d 	ldmdbmi	pc, {r0, r2, r3, r6, r8, fp, ip, sp}^	; <UNPREDICTABLE>
     e60:	006e5152 	rsbeq	r5, lr, r2, asr r1
     e64:	4f495047 	svcmi	0x00495047
     e68:	79544f5f 	ldmdbvc	r4, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, lr}^
     e6c:	41006570 	tstmi	r0, r0, ror r5
     e70:	48414250 	stmdami	r1, {r4, r6, r9, lr}^
     e74:	65725042 	ldrbvs	r5, [r2, #-66]!	; 0xffffffbe
     e78:	61546373 	cmpvs	r4, r3, ror r3
     e7c:	00656c62 	rsbeq	r6, r5, r2, ror #24
     e80:	4f495047 	svcmi	0x00495047
     e84:	64654d5f 	strbtvs	r4, [r5], #-3423	; 0xfffff2a1
     e88:	5f6d7569 	svcpl	0x006d7569
     e8c:	65657053 	strbvs	r7, [r5, #-83]!	; 0xffffffad
     e90:	43520064 	cmpmi	r2, #100	; 0x64
     e94:	41535f43 	cmpmi	r3, r3, asr #30
     e98:	4c4c5049 	mcrrmi	0, 4, r5, ip, cr9
     e9c:	43533249 	cmpmi	r3, #-1879048188	; 0x90000004
     ea0:	69446b6c 	stmdbvs	r4, {r2, r3, r5, r6, r8, r9, fp, sp, lr}^
     ea4:	6e6f4376 	mcrvs	3, 3, r4, cr15, cr6, {3}
     ea8:	00676966 	rsbeq	r6, r7, r6, ror #18
     eac:	374d4954 	smlsldcc	r4, sp, r4, r9
     eb0:	5152495f 	cmppl	r2, pc, asr r9
     eb4:	5445006e 	strbpl	r0, [r5], #-110	; 0xffffff92
     eb8:	4b575f48 	blmi	15d8be0 <startup-0x1ea27420>
     ebc:	495f5055 	ldmdbmi	pc, {r0, r2, r4, r6, ip, lr}^	; <UNPREDICTABLE>
     ec0:	006e5152 	rsbeq	r5, lr, r2, asr r1
     ec4:	5f47544f 	svcpl	0x0047544f
     ec8:	495f5348 	ldmdbmi	pc, {r3, r6, r8, r9, ip, lr}^	; <UNPREDICTABLE>
     ecc:	006e5152 	rsbeq	r5, lr, r2, asr r1
     ed0:	44505550 	ldrbmi	r5, [r0], #-1360	; 0xfffffab0
     ed4:	53530052 	cmppl	r3, #82	; 0x52
     ed8:	00524743 	subseq	r4, r2, r3, asr #14
     edc:	31495053 	qdaddcc	r5, r3, r9
     ee0:	5152495f 	cmppl	r2, pc, asr r9
     ee4:	5653006e 	ldrbpl	r0, [r3], -lr, rrx
     ee8:	6c6c6143 	stfvse	f6, [ip], #-268	; 0xfffffef4
     eec:	5152495f 	cmppl	r2, pc, asr r9
     ef0:	5041006e 	subpl	r0, r1, lr, rrx
     ef4:	53523242 	cmppl	r2, #536870916	; 0x20000004
     ef8:	42005254 	andmi	r5, r0, #84, 4	; 0x40000005
     efc:	48525253 	ldmdami	r2, {r0, r1, r4, r6, r9, ip, lr}^
     f00:	43435200 	movtmi	r5, #12800	; 0x3200
     f04:	7465475f 	strbtvc	r4, [r5], #-1887	; 0xfffff8a1
     f08:	67616c46 	strbvs	r6, [r1, -r6, asr #24]!
     f0c:	74617453 	strbtvc	r7, [r1], #-1107	; 0xfffffbad
     f10:	52007375 	andpl	r7, r0, #-738197503	; 0xd4000001
     f14:	435f4343 	cmpmi	pc, #201326593	; 0xc000001
     f18:	6b636f6c 	blvs	18dccd0 <startup-0x1e723330>
     f1c:	53420073 	movtpl	r0, #8307	; 0x2073
     f20:	004c5252 	subeq	r5, ip, r2, asr r2
     f24:	4f495047 	svcmi	0x00495047
     f28:	6769485f 			; <UNDEFINED> instruction: 0x6769485f
     f2c:	70535f68 	subsvc	r5, r3, r8, ror #30
     f30:	00646565 	rsbeq	r6, r4, r5, ror #10
     f34:	5f434352 	svcpl	0x00434352
     f38:	6f435449 	svcvs	0x00435449
     f3c:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
     f40:	43435200 	movtmi	r5, #12800	; 0x3200
     f44:	4953485f 	ldmdbmi	r3, {r0, r1, r2, r3, r4, r6, fp, lr}^
     f48:	00646d43 	rsbeq	r6, r4, r3, asr #26
     f4c:	5f555046 	svcpl	0x00555046
     f50:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     f54:	43435200 	movtmi	r5, #12800	; 0x3200
     f58:	6a64415f 	bvs	19114dc <startup-0x1e6eeb24>
     f5c:	48747375 	ldmdami	r4!, {r0, r2, r4, r5, r6, r8, r9, ip, sp, lr}^
     f60:	61434953 	cmpvs	r3, r3, asr r9
     f64:	7262696c 	rsbvc	r6, r2, #108, 18	; 0x1b0000
     f68:	6f697461 	svcvs	0x00697461
     f6c:	6c61566e 	stclvs	6, cr5, [r1], #-440	; 0xfffffe48
     f70:	55006575 	strpl	r6, [r0, #-1397]	; 0xfffffa8b
     f74:	34545241 	ldrbcc	r5, [r4], #-577	; 0xfffffdbf
     f78:	5152495f 	cmppl	r2, pc, asr r9
     f7c:	5041006e 	subpl	r0, r1, lr, rrx
     f80:	504c3242 	subpl	r3, ip, r2, asr #4
     f84:	00524e45 	subseq	r4, r2, r5, asr #28
     f88:	5f434352 	svcpl	0x00434352
     f8c:	31425041 	cmpcc	r2, r1, asr #32
     f90:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
     f94:	52006870 	andpl	r6, r0, #112, 16	; 0x700000
     f98:	525f4343 	subspl	r4, pc, #201326593	; 0xc000001
     f9c:	4c434354 	mcrrmi	3, 5, r4, r3, cr4
     fa0:	6e6f434b 	cdpvs	3, 6, cr4, cr15, cr11, {2}
     fa4:	00676966 	rsbeq	r6, r7, r6, ror #18
     fa8:	5f47544f 	svcpl	0x0047544f
     fac:	575f5346 	ldrbpl	r5, [pc, -r6, asr #6]
     fb0:	5f50554b 	svcpl	0x0050554b
     fb4:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     fb8:	43435200 	movtmi	r5, #12800	; 0x3200
     fbc:	414c465f 	cmpmi	ip, pc, asr r6
     fc0:	43520047 	cmpmi	r2, #71	; 0x47
     fc4:	65475f43 	strbvs	r5, [r7, #-3907]	; 0xfffff0bd
     fc8:	53544974 	cmppl	r4, #116, 18	; 0x1d0000
     fcc:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0xfffffe8c
     fd0:	58450073 	stmdapl	r5, {r0, r1, r4, r5, r6}^
     fd4:	5f344954 	svcpl	0x00344954
     fd8:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     fdc:	52544300 	subspl	r4, r4, #0, 6
     fe0:	4954004c 	ldmdbmi	r4, {r2, r3, r6}^
     fe4:	445f364d 	ldrbmi	r3, [pc], #-1613	; fec <startup-0x1ffff014>
     fe8:	495f4341 	ldmdbmi	pc, {r0, r6, r8, r9, lr}^	; <UNPREDICTABLE>
     fec:	006e5152 	rsbeq	r5, lr, r2, asr r1
     ff0:	4f495047 	svcmi	0x00495047
     ff4:	6570535f 	ldrbvs	r5, [r0, #-863]!	; 0xfffffca1
     ff8:	49006465 	stmdbmi	r0, {r0, r2, r5, r6, sl, sp, lr}
     ffc:	5f324332 	svcpl	0x00324332
    1000:	495f5645 	ldmdbmi	pc, {r0, r2, r6, r9, sl, ip, lr}^	; <UNPREDICTABLE>
    1004:	006e5152 	rsbeq	r5, lr, r2, asr r1
    1008:	5f434352 	svcpl	0x00434352
    100c:	61656c43 	cmnvs	r5, r3, asr #24
    1010:	50544972 	subspl	r4, r4, r2, ror r9
    1014:	69646e65 	stmdbvs	r4!, {r0, r2, r5, r6, r9, sl, fp, sp, lr}^
    1018:	6942676e 	stmdbvs	r2, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}^
    101c:	43520074 	cmpmi	r2, #116	; 0x74
    1020:	6c435f43 	mcrrvs	15, 4, r5, r3, cr3
    1024:	536b636f 	cmnpl	fp, #-1140850687	; 0xbc000001
    1028:	72756365 	rsbsvc	r6, r5, #-1811939327	; 0x94000001
    102c:	53797469 	cmnpl	r9, #1761607680	; 0x69000000
    1030:	65747379 	ldrbvs	r7, [r4, #-889]!	; 0xfffffc87
    1034:	646d436d 	strbtvs	r4, [sp], #-877	; 0xfffffc93
    1038:	43435200 	movtmi	r5, #12800	; 0x3200
    103c:	4941535f 	stmdbmi	r1, {r0, r1, r2, r3, r4, r6, r8, r9, ip, lr}^
    1040:	636f6c42 	cmnvs	pc, #16896	; 0x4200
    1044:	4c43416b 	stfmie	f4, [r3], {107}	; 0x6b
    1048:	756f534b 	strbvc	r5, [pc, #-843]!	; d05 <startup-0x1ffff2fb>
    104c:	00656372 	rsbeq	r6, r5, r2, ror r3
    1050:	74617473 	strbtvc	r7, [r1], #-1139	; 0xfffffb8d
    1054:	65727375 	ldrbvs	r7, [r2, #-885]!	; 0xfffffc8b
    1058:	43520067 	cmpmi	r2, #103	; 0x67
    105c:	50415f43 	subpl	r5, r1, r3, asr #30
    1060:	65503242 	ldrbvs	r3, [r0, #-578]	; 0xfffffdbe
    1064:	68706972 	ldmdavs	r0!, {r1, r4, r5, r6, r8, fp, sp, lr}^
    1068:	41464200 	mrsmi	r4, (UNDEF: 102)
    106c:	50410052 	subpl	r0, r1, r2, asr r0
    1070:	504c3142 	subpl	r3, ip, r2, asr #2
    1074:	00524e45 	subseq	r4, r2, r5, asr #28
    1078:	31414d44 	cmpcc	r1, r4, asr #26
    107c:	7274535f 	rsbsvc	r5, r4, #2080374785	; 0x7c000001
    1080:	316d6165 	cmncc	sp, r5, ror #2
    1084:	5152495f 	cmppl	r2, pc, asr r9
    1088:	6361006e 	cmnvs	r1, #110	; 0x6e
    108c:	65766974 	ldrbvs	r6, [r6, #-2420]!	; 0xfffff68c
    1090:	6f6f645f 	svcvs	0x006f645f
    1094:	44007372 	strmi	r7, [r0], #-882	; 0xfffffc8e
    1098:	5f32414d 	svcpl	0x0032414d
    109c:	65727453 	ldrbvs	r7, [r2, #-1107]!	; 0xfffffbad
    10a0:	5f336d61 	svcpl	0x00336d61
    10a4:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
    10a8:	474b4300 	strbmi	r4, [fp, -r0, lsl #6]
    10ac:	4e455441 	cdpmi	4, 4, cr5, cr5, cr1, {2}
    10b0:	41430052 	qdaddmi	r0, r2, r3
    10b4:	545f324e 	ldrbpl	r3, [pc], #-590	; 10bc <startup-0x1fffef44>
    10b8:	52495f58 	subpl	r5, r9, #88, 30	; 0x160
    10bc:	50006e51 	andpl	r6, r0, r1, asr lr
    10c0:	41534c4c 	cmpmi	r3, ip, asr #24
    10c4:	50004e49 	andpl	r4, r0, r9, asr #28
    10c8:	41534c4c 	cmpmi	r3, ip, asr #24
    10cc:	50005149 	andpl	r5, r0, r9, asr #2
    10d0:	41534c4c 	cmpmi	r3, ip, asr #24
    10d4:	52005249 	andpl	r5, r0, #-1879048188	; 0x90000004
    10d8:	4d5f4343 	ldclmi	3, cr4, [pc, #-268]	; fd4 <startup-0x1ffff02c>
    10dc:	53314f43 	teqpl	r1, #268	; 0x10c
    10e0:	6372756f 	cmnvs	r2, #465567744	; 0x1bc00000
    10e4:	43520065 	cmpmi	r2, #101	; 0x65
    10e8:	48415f43 	stmdami	r1, {r0, r1, r6, r8, r9, sl, fp, ip, lr}^
    10ec:	65503342 	ldrbvs	r3, [r0, #-834]	; 0xfffffcbe
    10f0:	68706972 	ldmdavs	r0!, {r1, r4, r5, r6, r8, fp, sp, lr}^
    10f4:	636f6c43 	cmnvs	pc, #17152	; 0x4300
    10f8:	646d436b 	strbtvs	r4, [sp], #-875	; 0xfffffc95
    10fc:	73795300 	cmnvc	r9, #0, 6
    1100:	6b636954 	blvs	18db658 <startup-0x1e7249a8>
    1104:	7079545f 	rsbsvc	r5, r9, pc, asr r4
    1108:	69740065 	ldmdbvs	r4!, {r0, r2, r5, r6}^
    110c:	635f656d 	cmpvs	pc, #457179136	; 0x1b400000
    1110:	72746e65 	rsbsvc	r6, r4, #1616	; 0x650
    1114:	6c5f6c61 	mrrcvs	12, 6, r6, pc, cr1	; <UNPREDICTABLE>
    1118:	006d7261 	rsbeq	r7, sp, r1, ror #4
    111c:	5f434352 	svcpl	0x00434352
    1120:	434c4c50 	movtmi	r4, #52304	; 0xcc50
    1124:	5200646d 	andpl	r6, r0, #1828716544	; 0x6d000000
    1128:	425f4343 	subsmi	r4, pc, #201326593	; 0xc000001
    112c:	756b6361 	strbvc	r6, [fp, #-865]!	; 0xfffffc9f
    1130:	73655270 	cmnvc	r5, #112, 4
    1134:	6d437465 	cfstrdvs	mvd7, [r3, #-404]	; 0xfffffe6c
    1138:	48410064 	stmdami	r1, {r2, r5, r6}^
    113c:	53523342 	cmppl	r2, #134217729	; 0x8000001
    1140:	64005254 	strvs	r5, [r0], #-596	; 0xfffffdac
    1144:	00726f6f 	rsbseq	r6, r2, pc, ror #30
    1148:	6f727245 	svcvs	0x00727245
    114c:	61745372 	cmnvs	r4, r2, ror r3
    1150:	00737574 	rsbseq	r7, r3, r4, ror r5
    1154:	31414d44 	cmpcc	r1, r4, asr #26
    1158:	7274535f 	rsbsvc	r5, r4, #2080374785	; 0x7c000001
    115c:	306d6165 	rsbcc	r6, sp, r5, ror #2
    1160:	5152495f 	cmppl	r2, pc, asr r9
    1164:	7473006e 	ldrbtvc	r0, [r3], #-110	; 0xffffff92
    1168:	75747261 	ldrbvc	r7, [r4, #-609]!	; 0xfffffd9f
    116c:	43520070 	cmpmi	r2, #112	; 0x70
    1170:	434d5f43 	movtmi	r5, #57155	; 0xdf43
    1174:	6f53324f 	svcvs	0x0053324f
    1178:	65637275 	strbvs	r7, [r3, #-629]!	; 0xfffffd8b
    117c:	42504100 	subsmi	r4, r0, #0, 2
    1180:	54535231 	ldrbpl	r5, [r3], #-561	; 0xfffffdcf
    1184:	54520052 	ldrbpl	r0, [r2], #-82	; 0xffffffae
    1188:	6c415f43 	mcrrvs	15, 4, r5, r1, cr3
    118c:	5f6d7261 	svcpl	0x006d7261
    1190:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
    1194:	42504100 	subsmi	r4, r0, #0, 2
    1198:	524e4531 	subpl	r4, lr, #205520896	; 0xc400000
    119c:	49564e00 	ldmdbmi	r6, {r9, sl, fp, lr}^
    11a0:	79545f43 	ldmdbvc	r4, {r0, r1, r6, r8, r9, sl, fp, ip, lr}^
    11a4:	49006570 	stmdbmi	r0, {r4, r5, r6, r8, sl, sp, lr}
    11a8:	5f334332 	svcpl	0x00334332
    11ac:	495f5245 	ldmdbmi	pc, {r0, r2, r6, r9, ip, lr}^	; <UNPREDICTABLE>
    11b0:	006e5152 	rsbeq	r5, lr, r2, asr r1
    11b4:	50595243 	subspl	r5, r9, r3, asr #4
    11b8:	5152495f 	cmppl	r2, pc, asr r9
    11bc:	5845006e 	stmdapl	r5, {r1, r2, r3, r5, r6}^
    11c0:	35314954 	ldrcc	r4, [r1, #-2388]!	; 0xfffff6ac
    11c4:	5f30315f 	svcpl	0x0030315f
    11c8:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
    11cc:	43435200 	movtmi	r5, #12800	; 0x3200
    11d0:	4f434d5f 	svcmi	0x00434d5f
    11d4:	76694431 			; <UNDEFINED> instruction: 0x76694431
    11d8:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    11dc:	52495f33 	subpl	r5, r9, #51, 30	; 0xcc
    11e0:	55006e51 	strpl	r6, [r0, #-3665]	; 0xfffff1af
    11e4:	54524153 	ldrbpl	r4, [r2], #-339	; 0xfffffead
    11e8:	52495f31 	subpl	r5, r9, #49, 30	; 0xc4
    11ec:	52006e51 	andpl	r6, r0, #1296	; 0x510
    11f0:	575f4343 	ldrbpl	r4, [pc, -r3, asr #6]
    11f4:	46746961 	ldrbtmi	r6, [r4], -r1, ror #18
    11f8:	5348726f 	movtpl	r7, #33391	; 0x826f
    11fc:	61745345 	cmnvs	r4, r5, asr #6
    1200:	70557472 	subsvc	r7, r5, r2, ror r4
    1204:	43555300 	cmpmi	r5, #0, 6
    1208:	53534543 	cmppl	r3, #281018368	; 0x10c00000
    120c:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
    1210:	6f4d5f4f 	svcvs	0x004d5f4f
    1214:	43006564 	movwmi	r6, #1380	; 0x564
    1218:	5f324e41 	svcpl	0x00324e41
    121c:	5f315852 	svcpl	0x00315852
    1220:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
    1224:	43444100 	movtmi	r4, #16640	; 0x4100
    1228:	5152495f 	cmppl	r2, pc, asr r9
    122c:	4352006e 	cmpmi	r2, #110	; 0x6e
    1230:	534c5f43 	movtpl	r5, #53059	; 0xcf43
    1234:	646f4d45 	strbtvs	r4, [pc], #-3397	; 123c <startup-0x1fffedc4>
    1238:	6e6f4365 	cdpvs	3, 6, cr4, cr15, cr5, {3}
    123c:	00676966 	rsbeq	r6, r7, r6, ror #18
    1240:	52454349 	subpl	r4, r5, #603979777	; 0x24000001
    1244:	42484100 	submi	r4, r8, #0, 2
    1248:	45504c33 	ldrbmi	r4, [r0, #-3123]	; 0xfffff3cd
    124c:	4700524e 	strmi	r5, [r0, -lr, asr #4]
    1250:	4d4f4950 	vstrmi.16	s9, [pc, #-160]	; 11b8 <startup-0x1fffee48>	; <UNPREDICTABLE>
    1254:	5f65646f 	svcpl	0x0065646f
    1258:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0xfffff6ac
    125c:	00666544 	rsbeq	r6, r6, r4, asr #10
    1260:	54737953 	ldrbtpl	r7, [r3], #-2387	; 0xfffff6ad
    1264:	5f6b6369 	svcpl	0x006b6369
    1268:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    126c:	50006769 	andpl	r6, r0, r9, ror #14
    1270:	495f4456 	ldmdbmi	pc, {r1, r2, r4, r6, sl, lr}^	; <UNPREDICTABLE>
    1274:	006e5152 	rsbeq	r5, lr, r2, asr r1
    1278:	69746361 	ldmdbvs	r4!, {r0, r5, r6, r8, r9, sp, lr}^
    127c:	645f6576 	ldrbvs	r6, [pc], #-1398	; 1284 <startup-0x1fffed7c>
    1280:	73726f6f 	cmnvc	r2, #444	; 0x1bc
    1284:	6e696f50 	mcrvs	15, 3, r6, cr9, cr0, {2}
    1288:	73726574 	cmnvc	r2, #116, 10	; 0x1d000000
    128c:	53464100 	movtpl	r4, #24832	; 0x6100
    1290:	544f0052 	strbpl	r0, [pc], #-82	; 1298 <startup-0x1fffed68>
    1294:	52455059 	subpl	r5, r5, #89	; 0x59
    1298:	4c414300 	mcrrmi	3, 0, r4, r1, cr0
    129c:	46004249 	strmi	r4, [r0], -r9, asr #4
    12a0:	5f434d53 	svcpl	0x00434d53
    12a4:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
    12a8:	54584500 	ldrbpl	r4, [r8], #-1280	; 0xfffffb00
    12ac:	495f3049 	ldmdbmi	pc, {r0, r3, r6, ip, sp}^	; <UNPREDICTABLE>
    12b0:	006e5152 	rsbeq	r5, lr, r2, asr r1
    12b4:	434b4344 	movtmi	r4, #45892	; 0xb344
    12b8:	32524746 	subscc	r4, r2, #18350080	; 0x1180000
    12bc:	53464300 	movtpl	r4, #25344	; 0x6300
    12c0:	43520052 	cmpmi	r2, #82	; 0x52
    12c4:	48415f43 	stmdami	r1, {r0, r1, r6, r8, r9, sl, fp, ip, lr}^
    12c8:	65503142 	ldrbvs	r3, [r0, #-322]	; 0xfffffebe
    12cc:	68706972 	ldmdavs	r0!, {r1, r4, r5, r6, r8, fp, sp, lr}^
    12d0:	65736800 	ldrbvs	r6, [r3, #-2048]!	; 0xfffff800
    12d4:	74617473 	strbtvc	r7, [r1], #-1139	; 0xfffffb8d
    12d8:	44007375 	strmi	r7, [r0], #-885	; 0xfffffc8b
    12dc:	5f31414d 	svcpl	0x0031414d
    12e0:	65727453 	ldrbvs	r7, [r2, #-1107]!	; 0xfffffbad
    12e4:	5f346d61 	svcpl	0x00346d61
    12e8:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
    12ec:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
    12f0:	616c5f4f 	cmnvs	ip, pc, asr #30
    12f4:	4400706d 	strmi	r7, [r0], #-109	; 0xffffff93
    12f8:	5f32414d 	svcpl	0x0032414d
    12fc:	65727453 	ldrbvs	r7, [r2, #-1107]!	; 0xfffffbad
    1300:	5f366d61 	svcpl	0x00366d61
    1304:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
    1308:	42484100 	submi	r4, r8, #0, 2
    130c:	524e4531 	subpl	r4, lr, #205520896	; 0xc400000
    1310:	414f4c00 	cmpmi	pc, r0, lsl #24
    1314:	50470044 	subpl	r0, r7, r4, asr #32
    1318:	70534f49 	subsvc	r4, r3, r9, asr #30
    131c:	5f646565 	svcpl	0x00646565
    1320:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0xfffff6ac
    1324:	00666544 	rsbeq	r6, r6, r4, asr #10
    1328:	75626544 	strbvc	r6, [r2, #-1348]!	; 0xfffffabc
    132c:	6e6f4d67 	cdpvs	13, 6, cr4, cr15, cr7, {3}
    1330:	726f7469 	rsbvc	r7, pc, #1761607680	; 0x69000000
    1334:	5152495f 	cmppl	r2, pc, asr r9
    1338:	5047006e 	subpl	r0, r7, lr, rrx
    133c:	505f4f49 	subspl	r4, pc, r9, asr #30
    1340:	52006e69 	andpl	r6, r0, #1680	; 0x690
    1344:	415f4343 	cmpmi	pc, r3, asr #6
    1348:	50314248 	eorspl	r4, r1, r8, asr #4
    134c:	70697265 	rsbvc	r7, r9, r5, ror #4
    1350:	73655268 	cmnvc	r5, #104, 4	; 0x80000006
    1354:	6d437465 	cfstrdvs	mvd7, [r3, #-404]	; 0xfffffe6c
    1358:	32490064 	subcc	r0, r9, #100	; 0x64
    135c:	455f3343 	ldrbmi	r3, [pc, #-835]	; 1021 <startup-0x1fffefdf>
    1360:	52495f56 	subpl	r5, r9, #344	; 0x158
    1364:	47006e51 	smlsdmi	r0, r1, lr, r6
    1368:	5f4f4950 	svcpl	0x004f4950
    136c:	64507550 	ldrbvs	r7, [r0], #-1360	; 0xfffffab0
    1370:	42484100 	submi	r4, r8, #0, 2
    1374:	54535232 	ldrbpl	r5, [r3], #-562	; 0xfffffdce
    1378:	54450052 	strbpl	r0, [r5], #-82	; 0xffffffae
    137c:	52495f48 	subpl	r5, r9, #72, 30	; 0x120
    1380:	4d006e51 	stcmi	14, cr6, [r0, #-324]	; 0xfffffebc
    1384:	0052464d 	subseq	r4, r2, sp, asr #12
    1388:	5f434352 	svcpl	0x00434352
    138c:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0xfffff6ac
    1390:	00666544 	rsbeq	r6, r6, r4, asr #10
    1394:	41464d4d 	cmpmi	r6, sp, asr #26
    1398:	61700052 	cmnvs	r0, r2, asr r0
    139c:	6f777373 	svcvs	0x00777373
    13a0:	52006472 	andpl	r6, r0, #1912602624	; 0x72000000
    13a4:	495f4343 	ldmdbmi	pc, {r0, r1, r6, r8, r9, lr}^	; <UNPREDICTABLE>
    13a8:	006e5152 	rsbeq	r5, lr, r2, asr r1
    13ac:	5f434352 	svcpl	0x00434352
    13b0:	49005449 	stmdbmi	r0, {r0, r3, r6, sl, ip, lr}
    13b4:	00524153 	subseq	r4, r2, r3, asr r1
    13b8:	31414d44 	cmpcc	r1, r4, asr #26
    13bc:	7274535f 	rsbsvc	r5, r4, #2080374785	; 0x7c000001
    13c0:	336d6165 	cmncc	sp, #1073741849	; 0x40000019
    13c4:	5152495f 	cmppl	r2, pc, asr r9
    13c8:	5355006e 	cmppl	r5, #110	; 0x6e
    13cc:	32545241 	subscc	r5, r4, #268435460	; 0x10000004
    13d0:	5152495f 	cmppl	r2, pc, asr r9
    13d4:	6c70006e 	ldclvs	0, cr0, [r0], #-440	; 0xfffffe48
    13d8:	6f63766c 	svcvs	0x0063766c
    13dc:	43435200 	movtmi	r5, #12800	; 0x3200
    13e0:	4250415f 	subsmi	r4, r0, #-1073741801	; 0xc0000017
    13e4:	72655031 	rsbvc	r5, r5, #49	; 0x31
    13e8:	43687069 	cmnmi	r8, #105	; 0x69
    13ec:	6b636f6c 	blvs	18dd1a4 <startup-0x1e722e5c>
    13f0:	6f4d504c 	svcvs	0x004d504c
    13f4:	6d436564 	cfstr64vs	mvdx6, [r3, #-400]	; 0xfffffe70
    13f8:	50470064 	subpl	r0, r7, r4, rrx
    13fc:	545f4f49 	ldrbpl	r4, [pc], #-3913	; 1404 <startup-0x1fffebfc>
    1400:	44657079 	strbtmi	r7, [r5], #-121	; 0xffffff87
    1404:	54006665 	strpl	r6, [r0], #-1637	; 0xfffff99b
    1408:	5f314d49 	svcpl	0x00314d49
    140c:	545f5055 	ldrbpl	r5, [pc], #-85	; 1414 <startup-0x1fffebec>
    1410:	30314d49 	eorscc	r4, r1, r9, asr #26
    1414:	5152495f 	cmppl	r2, pc, asr r9
    1418:	4c50006e 	mrrcmi	0, 6, r0, r0, cr14	; <UNPREDICTABLE>
    141c:	5332494c 	teqpl	r2, #76, 18	; 0x130000
    1420:	4352004e 	cmpmi	r2, #78	; 0x4e
    1424:	48415f43 	stmdami	r1, {r0, r1, r6, r8, r9, sl, fp, ip, lr}^
    1428:	65503142 	ldrbvs	r3, [r0, #-322]	; 0xfffffebe
    142c:	68706972 	ldmdavs	r0!, {r1, r4, r5, r6, r8, fp, sp, lr}^
    1430:	636f6c43 	cmnvs	pc, #17152	; 0x4300
    1434:	4d504c6b 	ldclmi	12, cr4, [r0, #-428]	; 0xfffffe54
    1438:	4365646f 	cmnmi	r5, #1862270976	; 0x6f000000
    143c:	5000646d 	andpl	r6, r0, sp, ror #8
    1440:	32494c4c 	subcc	r4, r9, #76, 24	; 0x4c00
    1444:	6d005253 	sfmvs	f5, 4, [r0, #-332]	; 0xfffffeb4
    1448:	006e6961 	rsbeq	r6, lr, r1, ror #18
    144c:	5f47544f 	svcpl	0x0047544f
    1450:	455f5348 	ldrbmi	r5, [pc, #-840]	; 1110 <startup-0x1fffeef0>
    1454:	4f5f3150 	svcmi	0x005f3150
    1458:	495f5455 	ldmdbmi	pc, {r0, r2, r4, r6, sl, ip, lr}^	; <UNPREDICTABLE>
    145c:	006e5152 	rsbeq	r5, lr, r2, asr r1
    1460:	6d72616c 	ldfvse	f6, [r2, #-432]!	; 0xfffffe50
    1464:	6b636954 	blvs	18db9bc <startup-0x1e724644>
    1468:	2f3a4300 	svccs	0x003a4300
    146c:	2f746967 	svccs	0x00746967
    1470:	32544144 	subscc	r4, r4, #68, 2
    1474:	4c2d3039 	stcmi	0, cr3, [sp], #-228	; 0xffffff1c
    1478:	736d7261 	cmnvc	sp, #268435462	; 0x10000006
    147c:	65747379 	ldrbvs	r7, [r4, #-889]!	; 0xfffffc87
    1480:	6f6b2f6d 	svcvs	0x006b2f6d
    1484:	6f442f64 	svcvs	0x00442f64
    1488:	732f726f 			; <UNDEFINED> instruction: 0x732f726f
    148c:	74726174 	ldrbtvc	r6, [r2], #-372	; 0xfffffe8c
    1490:	632e7075 			; <UNDEFINED> instruction: 0x632e7075
    1494:	43435200 	movtmi	r5, #12800	; 0x3200
    1498:	4354525f 	cmpmi	r4, #-268435451	; 0xf0000005
    149c:	434b4c43 	movtmi	r4, #48195	; 0xbc43
    14a0:	6100646d 	tstvs	r0, sp, ror #8
    14a4:	495f7070 	ldmdbmi	pc, {r4, r5, r6, ip, sp, lr}^	; <UNPREDICTABLE>
    14a8:	0074696e 	rsbseq	r6, r4, lr, ror #18
    14ac:	45444f4d 	strbmi	r4, [r4, #-3917]	; 0xfffff0b3
    14b0:	564e0052 			; <UNDEFINED> instruction: 0x564e0052
    14b4:	535f4349 	cmppl	pc, #603979777	; 0x24000001
    14b8:	72507465 	subsvc	r7, r0, #1694498816	; 0x65000000
    14bc:	69726f69 	ldmdbvs	r2!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
    14c0:	43007974 	movwmi	r7, #2420	; 0x974
    14c4:	5f314e41 	svcpl	0x00314e41
    14c8:	5f315852 	svcpl	0x00315852
    14cc:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
    14d0:	43435200 	movtmi	r5, #12800	; 0x3200
    14d4:	4248415f 	submi	r4, r8, #-1073741801	; 0xc0000017
    14d8:	72655032 	rsbvc	r5, r5, #50	; 0x32
    14dc:	00687069 	rsbeq	r7, r8, r9, rrx
    14e0:	4f495047 	svcmi	0x00495047
    14e4:	5075505f 	rsbspl	r5, r5, pc, asr r0
    14e8:	50555f64 	subspl	r5, r5, r4, ror #30
    14ec:	54584500 	ldrbpl	r4, [r8], #-1280	; 0xfffffb00
    14f0:	355f3949 	ldrbcc	r3, [pc, #-2377]	; baf <startup-0x1ffff451>
    14f4:	5152495f 	cmppl	r2, pc, asr r9
    14f8:	4c50006e 	mrrcmi	0, 6, r0, r0, cr14	; <UNPREDICTABLE>
    14fc:	4941534c 	stmdbmi	r1, {r2, r3, r6, r8, r9, ip, lr}^
    1500:	52474643 	subpl	r4, r7, #70254592	; 0x4300000
    1504:	43435200 	movtmi	r5, #12800	; 0x3200
    1508:	4248415f 	submi	r4, r8, #-1073741801	; 0xc0000017
    150c:	72655031 	rsbvc	r5, r5, #49	; 0x31
    1510:	43687069 	cmnmi	r8, #105	; 0x69
    1514:	6b636f6c 	blvs	18dd2cc <startup-0x1e722d34>
    1518:	00646d43 	rsbeq	r6, r4, r3, asr #26
    151c:	5f434352 	svcpl	0x00434352
    1520:	494c4c50 	stmdbmi	ip, {r4, r6, sl, fp, lr}^
    1524:	6f435332 	svcvs	0x00435332
    1528:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    152c:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    1530:	43435f38 	movtmi	r5, #16184	; 0x3f38
    1534:	5152495f 	cmppl	r2, pc, asr r9
    1538:	4453006e 	ldrbmi	r0, [r3], #-110	; 0xffffff92
    153c:	495f4f49 	ldmdbmi	pc, {r0, r3, r6, r8, r9, sl, fp, lr}^	; <UNPREDICTABLE>
    1540:	006e5152 	rsbeq	r5, lr, r2, asr r1
    1544:	43415043 	movtmi	r5, #4163	; 0x1043
    1548:	53490052 	movtpl	r0, #36946	; 0x9052
    154c:	45005250 	strmi	r5, [r0, #-592]	; 0xfffffdb0
    1550:	33495458 	movtcc	r5, #37976	; 0x9458
    1554:	5152495f 	cmppl	r2, pc, asr r9
    1558:	6550006e 	ldrbvs	r0, [r0, #-110]	; 0xffffff92
    155c:	5653646e 	ldrbpl	r6, [r3], -lr, ror #8
    1560:	5152495f 	cmppl	r2, pc, asr r9
    1564:	6574006e 	ldrbvs	r0, [r4, #-110]!	; 0xffffff92
    1568:	00317473 	eorseq	r7, r1, r3, ror r4
    156c:	74736574 	ldrbtvc	r6, [r3], #-1396	; 0xfffffa8c
    1570:	65740032 	ldrbvs	r0, [r4, #-50]!	; 0xffffffce
    1574:	00337473 	eorseq	r7, r3, r3, ror r4
    1578:	5f47544f 	svcpl	0x0047544f
    157c:	455f5348 	ldrbmi	r5, [pc, #-840]	; 123c <startup-0x1fffedc4>
    1580:	495f3150 	ldmdbmi	pc, {r4, r6, r8, ip, sp}^	; <UNPREDICTABLE>
    1584:	52495f4e 	subpl	r5, r9, #312	; 0x138
    1588:	44006e51 	strmi	r6, [r0], #-3665	; 0xfffff1af
    158c:	5f31414d 	svcpl	0x0031414d
    1590:	65727453 	ldrbvs	r7, [r2, #-1107]!	; 0xfffffbad
    1594:	5f376d61 	svcpl	0x00376d61
    1598:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
    159c:	43435200 	movtmi	r5, #12800	; 0x3200
    15a0:	4d49545f 	cfstrdmi	mvd5, [r9, #-380]	; 0xfffffe84
    15a4:	504b4c43 	subpl	r4, fp, r3, asr #24
    15a8:	63736572 	cmnvs	r3, #478150656	; 0x1c800000
    15ac:	72656c61 	rsbvc	r6, r5, #24832	; 0x6100
    15b0:	45534900 	ldrbmi	r4, [r3, #-2304]	; 0xfffff700
    15b4:	72700052 	rsbsvc	r0, r0, #82	; 0x52
    15b8:	00637365 	rsbeq	r7, r3, r5, ror #6
    15bc:	5f434352 	svcpl	0x00434352
    15c0:	32424841 	subcc	r4, r2, #4259840	; 0x410000
    15c4:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
    15c8:	65526870 	ldrbvs	r6, [r2, #-2160]	; 0xfffff790
    15cc:	43746573 	cmnmi	r4, #482344960	; 0x1cc00000
    15d0:	5200646d 	andpl	r6, r0, #1828716544	; 0x6d000000
    15d4:	505f4343 	subspl	r4, pc, r3, asr #6
    15d8:	41534c4c 	cmpmi	r3, ip, asr #24
    15dc:	646d4349 	strbtvs	r4, [sp], #-841	; 0xfffffcb7
    15e0:	42484100 	submi	r4, r8, #0, 2
    15e4:	524e4533 	subpl	r4, lr, #213909504	; 0xcc00000
    15e8:	43435200 	movtmi	r5, #12800	; 0x3200
    15ec:	5359535f 	cmppl	r9, #2080374785	; 0x7c000001
    15f0:	434b4c43 	movtmi	r4, #48195	; 0xbc43
    15f4:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    15f8:	4d440067 	stclmi	0, cr0, [r4, #-412]	; 0xfffffe64
    15fc:	535f3241 	cmppl	pc, #268435460	; 0x10000004
    1600:	61657274 	smcvs	22308	; 0x5724
    1604:	495f326d 	ldmdbmi	pc, {r0, r2, r3, r5, r6, r9, ip, sp}^	; <UNPREDICTABLE>
    1608:	006e5152 	rsbeq	r5, lr, r2, asr r1
    160c:	4f495047 	svcmi	0x00495047
    1610:	7361465f 	cmnvc	r1, #99614720	; 0x5f00000
    1614:	70535f74 	subsvc	r5, r3, r4, ror pc
    1618:	00646565 	rsbeq	r6, r4, r5, ror #10
    161c:	5f434352 	svcpl	0x00434352
    1620:	434c4c50 	movtmi	r4, #52304	; 0xcc50
    1624:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    1628:	6c700067 	ldclvs	0, cr0, [r0], #-412	; 0xfffffe64
    162c:	70006d6c 	andvc	r6, r0, ip, ror #26
    1630:	6f706e69 	svcvs	0x00706e69
    1634:	69420073 	stmdbvs	r2, {r0, r1, r4, r5, r6}^
    1638:	45535f74 	ldrbmi	r5, [r3, #-3956]	; 0xfffff08c
    163c:	50470054 	subpl	r0, r7, r4, asr r0
    1640:	525f4f49 	subspl	r4, pc, #292	; 0x124
    1644:	4f646165 	svcmi	0x00646165
    1648:	75707475 	ldrbvc	r7, [r0, #-1141]!	; 0xfffffb8b
    164c:	74614474 	strbtvc	r4, [r1], #-1140	; 0xfffffb8c
    1650:	50470061 	subpl	r0, r7, r1, rrx
    1654:	415f4f49 	cmpmi	pc, r9, asr #30
    1658:	65740046 	ldrbvs	r0, [r4, #-70]!	; 0xffffffba
    165c:	4700706d 	strmi	r7, [r0, -sp, rrx]
    1660:	5f4f4950 	svcpl	0x004f4950
    1664:	75727453 	ldrbvc	r7, [r2, #-1107]!	; 0xfffffbad
    1668:	6e497463 	cdpvs	4, 4, cr7, cr9, cr3, {3}
    166c:	42007469 	andmi	r7, r0, #1761607680	; 0x69000000
    1670:	61567469 	cmpvs	r6, r9, ror #8
    1674:	6942006c 	stmdbvs	r2, {r2, r3, r5, r6}^
    1678:	45525f74 	ldrbmi	r5, [r2, #-3956]	; 0xfffff08c
    167c:	00544553 	subseq	r4, r4, r3, asr r5
    1680:	4f495047 	svcmi	0x00495047
    1684:	6972575f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, lr}^
    1688:	69426574 	stmdbvs	r2, {r2, r4, r5, r6, r8, sl, sp, lr}^
    168c:	50470074 	subpl	r0, r7, r4, ror r0
    1690:	535f4f49 	cmppl	pc, #292	; 0x124
    1694:	69427465 	stmdbvs	r2, {r0, r2, r5, r6, sl, ip, sp, lr}^
    1698:	47007374 	smlsdxmi	r0, r4, r3, r7
    169c:	5f4f4950 	svcpl	0x004f4950
    16a0:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xfffff1b7
    16a4:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
    16a8:	65525f4f 	ldrbvs	r5, [r2, #-3919]	; 0xfffff0b1
    16ac:	42746573 	rsbsmi	r6, r4, #482344960	; 0x1cc00000
    16b0:	00737469 	rsbseq	r7, r3, r9, ror #8
    16b4:	4f495047 	svcmi	0x00495047
    16b8:	4965445f 	stmdbmi	r5!, {r0, r1, r2, r3, r4, r6, sl, lr}^
    16bc:	0074696e 	rsbseq	r6, r4, lr, ror #18
    16c0:	4f495047 	svcmi	0x00495047
    16c4:	6165525f 	cmnvs	r5, pc, asr r2
    16c8:	706e4964 	rsbvc	r4, lr, r4, ror #18
    16cc:	61447475 	hvcvs	18245	; 0x4745
    16d0:	69426174 	stmdbvs	r2, {r2, r4, r5, r6, r8, sp, lr}^
    16d4:	50470074 	subpl	r0, r7, r4, ror r0
    16d8:	495f4f49 	ldmdbmi	pc, {r0, r3, r6, r8, r9, sl, fp, lr}^	; <UNPREDICTABLE>
    16dc:	5374696e 	cmnpl	r4, #1802240	; 0x1b8000
    16e0:	63757274 	cmnvs	r5, #116, 4	; 0x40000007
    16e4:	6f500074 	svcvs	0x00500074
    16e8:	61567472 	cmpvs	r6, r2, ror r4
    16ec:	5047006c 	subpl	r0, r7, ip, rrx
    16f0:	505f4f49 	subspl	r4, pc, r9, asr #30
    16f4:	6f536e69 	svcvs	0x00536e69
    16f8:	65637275 	strbvs	r7, [r3, #-629]!	; 0xfffffd8b
    16fc:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
    1700:	65525f4f 	ldrbvs	r5, [r2, #-3919]	; 0xfffff0b1
    1704:	6e496461 	cdpvs	4, 4, cr6, cr9, cr1, {3}
    1708:	44747570 	ldrbtmi	r7, [r4], #-1392	; 0xfffffa90
    170c:	00617461 	rsbeq	r7, r1, r1, ror #8
    1710:	4f495047 	svcmi	0x00495047
    1714:	6e69505f 	mcrvs	0, 3, r5, cr9, cr15, {2}
    1718:	6b636f4c 	blvs	18dd450 <startup-0x1e722bb0>
    171c:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    1720:	42006769 	andmi	r6, r0, #27525120	; 0x1a40000
    1724:	63417469 	movtvs	r7, #5225	; 0x1469
    1728:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
    172c:	72756300 	rsbsvc	r6, r5, #0, 6
    1730:	746e6572 	strbtvc	r6, [lr], #-1394	; 0xfffffa8e
    1734:	006e6970 	rsbeq	r6, lr, r0, ror r9
    1738:	4f495047 	svcmi	0x00495047
    173c:	6972575f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, lr}^
    1740:	47006574 	smlsdxmi	r0, r4, r5, r6
    1744:	784f4950 	stmdavc	pc, {r4, r6, r8, fp, lr}^	; <UNPREDICTABLE>
    1748:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
    174c:	6f545f4f 	svcvs	0x00545f4f
    1750:	656c6767 	strbvs	r6, [ip, #-1895]!	; 0xfffff899
    1754:	73746942 	cmnvc	r4, #1081344	; 0x108000
    1758:	6d657400 	cfstrdvs	mvd7, [r5, #-0]
    175c:	00325f70 	eorseq	r5, r2, r0, ror pc
    1760:	672f3a43 	strvs	r3, [pc, -r3, asr #20]!
    1764:	442f7469 	strtmi	r7, [pc], #-1129	; 176c <startup-0x1fffe894>
    1768:	39325441 	ldmdbcc	r2!, {r0, r6, sl, ip, lr}
    176c:	614c2d30 	cmpvs	ip, r0, lsr sp
    1770:	79736d72 	ldmdbvc	r3!, {r1, r4, r5, r6, r8, sl, fp, sp, lr}^
    1774:	6d657473 	cfstrdvs	mvd7, [r5, #-460]!	; 0xfffffe34
    1778:	646f6b2f 	strbtvs	r6, [pc], #-2863	; 1780 <startup-0x1fffe880>
    177c:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    1780:	4d54532f 	ldclmi	3, cr5, [r4, #-188]	; 0xffffff44
    1784:	34463233 	strbcc	r3, [r6], #-563	; 0xfffffdcd
    1788:	62696c5f 	rsbvs	r6, r9, #24320	; 0x5f00
    178c:	4d54532f 	ldclmi	3, cr5, [r4, #-188]	; 0xffffff44
    1790:	34463233 	strbcc	r3, [r6], #-563	; 0xfffffdcd
    1794:	535f7878 	cmppl	pc, #120, 16	; 0x780000
    1798:	65506474 	ldrbvs	r6, [r0, #-1140]	; 0xfffffb8c
    179c:	68706972 	ldmdavs	r0!, {r1, r4, r5, r6, r8, fp, sp, lr}^
    17a0:	6972445f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, sl, lr}^
    17a4:	2f726576 	svccs	0x00726576
    17a8:	2f637273 	svccs	0x00637273
    17ac:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
    17b0:	78346632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, sp, lr}
    17b4:	70675f78 	rsbvc	r5, r7, r8, ror pc
    17b8:	632e6f69 			; <UNDEFINED> instruction: 0x632e6f69
    17bc:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
    17c0:	69505f4f 	ldmdbvs	r0, {r0, r1, r2, r3, r6, r8, r9, sl, fp, ip, lr}^
    17c4:	4346416e 	movtmi	r4, #24942	; 0x616e
    17c8:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    17cc:	50470067 	subpl	r0, r7, r7, rrx
    17d0:	525f4f49 	subspl	r4, pc, #292	; 0x124
    17d4:	4f646165 	svcmi	0x00646165
    17d8:	75707475 	ldrbvc	r7, [r0, #-1141]!	; 0xfffffb8b
    17dc:	74614474 	strbtvc	r4, [r1], #-1140	; 0xfffffb8c
    17e0:	74694261 	strbtvc	r4, [r9], #-609	; 0xfffffd9f
    17e4:	49564e00 	ldmdbmi	r6, {r9, sl, fp, lr}^
    17e8:	6e495f43 	cdpvs	15, 4, cr5, cr9, cr3, {2}
    17ec:	79547469 	ldmdbvc	r4, {r0, r3, r5, r6, sl, ip, sp, lr}^
    17f0:	65446570 	strbvs	r6, [r4, #-1392]	; 0xfffffa90
    17f4:	564e0066 	strbpl	r0, [lr], -r6, rrx
    17f8:	495f4349 	ldmdbmi	pc, {r0, r3, r6, r8, r9, lr}^	; <UNPREDICTABLE>
    17fc:	68435152 	stmdavs	r3, {r1, r4, r6, r8, ip, lr}^
    1800:	656e6e61 	strbvs	r6, [lr, #-3681]!	; 0xfffff19f
    1804:	646d436c 	strbtvs	r4, [sp], #-876	; 0xfffffc94
    1808:	73795300 	cmnvc	r9, #0, 6
    180c:	6b636954 	blvs	18dbd64 <startup-0x1e72429c>
    1810:	4b4c435f 	blmi	1312594 <startup-0x1eceda6c>
    1814:	72756f53 	rsbsvc	r6, r5, #332	; 0x14c
    1818:	4e006563 	cfsh32mi	mvfx6, mvfx0, #51
    181c:	5f434956 	svcpl	0x00434956
    1820:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xfffff1b7
    1824:	75727453 	ldrbvc	r7, [r2, #-1107]!	; 0xfffffbad
    1828:	4e007463 	cdpmi	4, 0, cr7, cr0, cr3, {3}
    182c:	5f434956 	svcpl	0x00434956
    1830:	6f697250 	svcvs	0x00697250
    1834:	79746972 	ldmdbvc	r4!, {r1, r4, r5, r6, r8, fp, sp, lr}^
    1838:	756f7247 	strbvc	r7, [pc, #-583]!	; 15f9 <startup-0x1fffea07>
    183c:	564e0070 			; <UNDEFINED> instruction: 0x564e0070
    1840:	495f4349 	ldmdbmi	pc, {r0, r3, r6, r8, r9, lr}^	; <UNPREDICTABLE>
    1844:	0074696e 	rsbseq	r6, r4, lr, ror #18
    1848:	70706d74 	rsbsvc	r6, r0, r4, ror sp
    184c:	4f006572 	svcmi	0x00006572
    1850:	65736666 	ldrbvs	r6, [r3, #-1638]!	; 0xfffff99a
    1854:	564e0074 			; <UNDEFINED> instruction: 0x564e0074
    1858:	535f4349 	cmppl	pc, #603979777	; 0x24000001
    185c:	65567465 	ldrbvs	r7, [r6, #-1125]	; 0xfffffb9b
    1860:	726f7463 	rsbvc	r7, pc, #1660944384	; 0x63000000
    1864:	6c626154 	stfvse	f6, [r2], #-336	; 0xfffffeb0
    1868:	6d740065 	ldclvs	0, cr0, [r4, #-404]!	; 0xfffffe6c
    186c:	62757370 	rsbsvs	r7, r5, #112, 6	; 0xc0000001
    1870:	2f3a4300 	svccs	0x003a4300
    1874:	2f746967 	svccs	0x00746967
    1878:	32544144 	subscc	r4, r4, #68, 2
    187c:	4c2d3039 	stcmi	0, cr3, [sp], #-228	; 0xffffff1c
    1880:	736d7261 	cmnvc	sp, #268435462	; 0x10000006
    1884:	65747379 	ldrbvs	r7, [r4, #-889]!	; 0xfffffc87
    1888:	6f6b2f6d 	svcvs	0x006b2f6d
    188c:	696c2f64 	stmdbvs	ip!, {r2, r5, r6, r8, r9, sl, fp, sp}^
    1890:	54532f62 	ldrbpl	r2, [r3], #-3938	; 0xfffff09e
    1894:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
    1898:	696c5f34 	stmdbvs	ip!, {r2, r4, r5, r8, r9, sl, fp, ip, lr}^
    189c:	54532f62 	ldrbpl	r2, [r3], #-3938	; 0xfffff09e
    18a0:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
    18a4:	5f787834 	svcpl	0x00787834
    18a8:	50647453 	rsbpl	r7, r4, r3, asr r4
    18ac:	70697265 	rsbvc	r7, r9, r5, ror #4
    18b0:	72445f68 	subvc	r5, r4, #104, 30	; 0x1a0
    18b4:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
    18b8:	6372732f 	cmnvs	r2, #-1140850688	; 0xbc000000
    18bc:	73696d2f 	cmnvc	r9, #3008	; 0xbc0
    18c0:	00632e63 	rsbeq	r2, r3, r3, ror #28
    18c4:	4349564e 	movtmi	r5, #38478	; 0x964e
    18c8:	7379535f 	cmnvc	r9, #2080374785	; 0x7c000001
    18cc:	4c6d6574 	cfstr64mi	mvdx6, [sp], #-464	; 0xfffffe30
    18d0:	6e6f4350 	mcrvs	3, 3, r4, cr15, cr0, {2}
    18d4:	00676966 	rsbeq	r6, r7, r6, ror #18
    18d8:	54737953 	ldrbtpl	r7, [r3], #-2387	; 0xfffff6ad
    18dc:	5f6b6369 	svcpl	0x006b6369
    18e0:	534b4c43 	movtpl	r4, #48195	; 0xbc43
    18e4:	6372756f 	cmnvs	r2, #465567744	; 0x1bc00000
    18e8:	6e6f4365 	cdpvs	3, 6, cr4, cr15, cr5, {3}
    18ec:	00676966 	rsbeq	r6, r7, r6, ror #18
    18f0:	70706d74 	rsbsvc	r6, r0, r4, ror sp
    18f4:	726f6972 	rsbvc	r6, pc, #1867776	; 0x1c8000
    18f8:	00797469 	rsbseq	r7, r9, r9, ror #8
    18fc:	4349564e 	movtmi	r5, #38478	; 0x964e
    1900:	5152495f 	cmppl	r2, pc, asr r9
    1904:	6e616843 	cdpvs	8, 6, cr6, cr1, cr3, {2}
    1908:	006c656e 	rsbeq	r6, ip, lr, ror #10
    190c:	4349564e 	movtmi	r5, #38478	; 0x964e
    1910:	5152495f 	cmppl	r2, pc, asr r9
    1914:	6e616843 	cdpvs	8, 6, cr6, cr1, cr3, {2}
    1918:	536c656e 	cmnpl	ip, #461373440	; 0x1b800000
    191c:	72506275 	subsvc	r6, r0, #1342177287	; 0x50000007
    1920:	69726f69 	ldmdbvs	r2!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
    1924:	4e007974 			; <UNDEFINED> instruction: 0x4e007974
    1928:	5f434956 	svcpl	0x00434956
    192c:	43515249 	cmpmi	r1, #-1879048188	; 0x90000004
    1930:	6e6e6168 	powvsez	f6, f6, #0.0
    1934:	72506c65 	subsvc	r6, r0, #25856	; 0x6500
    1938:	706d6565 	rsbvc	r6, sp, r5, ror #10
    193c:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
    1940:	6f697250 	svcvs	0x00697250
    1944:	79746972 	ldmdbvc	r4!, {r1, r4, r5, r6, r8, fp, sp, lr}^
    1948:	49564e00 	ldmdbmi	r6, {r9, sl, fp, lr}^
    194c:	65565f43 	ldrbvs	r5, [r6, #-3907]	; 0xfffff0bd
    1950:	61547463 	cmpvs	r4, r3, ror #8
    1954:	6f4c0062 	svcvs	0x004c0062
    1958:	776f5077 			; <UNDEFINED> instruction: 0x776f5077
    195c:	6f4d7265 	svcvs	0x004d7265
    1960:	4e006564 	cfsh32mi	mvfx6, mvfx0, #52
    1964:	5f434956 	svcpl	0x00434956
    1968:	6f697250 	svcvs	0x00697250
    196c:	79746972 	ldmdbvc	r4!, {r1, r4, r5, r6, r8, fp, sp, lr}^
    1970:	756f7247 	strbvc	r7, [pc, #-583]!	; 1731 <startup-0x1fffe8cf>
    1974:	6e6f4370 	mcrvs	3, 3, r4, cr15, cr0, {3}
    1978:	00676966 	rsbeq	r6, r7, r6, ror #18
    197c:	75427874 	strbvc	r7, [r2, #-2164]	; 0xfffff78c
    1980:	72656666 	rsbvc	r6, r5, #106954752	; 0x6600000
    1984:	6c5f5f00 	mrrcvs	15, 0, r5, pc, cr0	; <UNPREDICTABLE>
    1988:	6c61636f 	stclvs	3, cr6, [r1], #-444	; 0xfffffe44
    198c:	00745f65 	rsbseq	r5, r4, r5, ror #30
    1990:	61765f5f 	cmnvs	r6, pc, asr pc
    1994:	0065756c 	rsbeq	r7, r5, ip, ror #10
    1998:	66735f5f 	uhsaxvs	r5, r3, pc	; <UNPREDICTABLE>
    199c:	635f5f00 	cmpvs	pc, #0, 30
    19a0:	6e61656c 	cdpvs	5, 6, cr6, cr1, cr12, {3}
    19a4:	5f007075 	svcpl	0x00007075
    19a8:	74697277 	strbtvc	r7, [r9], #-631	; 0xfffffd89
    19ac:	615f0065 	cmpvs	pc, r5, rrx
    19b0:	69746373 	ldmdbvs	r4!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
    19b4:	625f656d 	subsvs	r6, pc, #457179136	; 0x1b400000
    19b8:	5f006675 	svcpl	0x00006675
    19bc:	6c747663 	ldclvs	6, cr7, [r4], #-396	; 0xfffffe74
    19c0:	5f006e65 	svcpl	0x00006e65
    19c4:	73756e75 	cmnvc	r5, #1872	; 0x750
    19c8:	5f006465 	svcpl	0x00006465
    19cc:	006d745f 	rsbeq	r7, sp, pc, asr r4
    19d0:	7363775f 	cmnvc	r3, #24903680	; 0x17c0000
    19d4:	6d6f7472 	cfstrdvs	mvd7, [pc, #-456]!	; 1814 <startup-0x1fffe7ec>
    19d8:	735f7362 	cmpvc	pc, #-2013265919	; 0x88000001
    19dc:	65746174 	ldrbvs	r6, [r4, #-372]!	; 0xfffffe8c
    19e0:	626e5f00 	rsbvs	r5, lr, #0, 30
    19e4:	5f006675 	svcpl	0x00006675
    19e8:	5f6d745f 	svcpl	0x006d745f
    19ec:	00636573 	rsbeq	r6, r3, r3, ror r5
    19f0:	34366c5f 	ldrtcc	r6, [r6], #-3167	; 0xfffff3a1
    19f4:	75625f61 	strbvc	r5, [r2, #-3937]!	; 0xfffff09f
    19f8:	6d5f0066 	ldclvs	0, cr0, [pc, #-408]	; 1868 <startup-0x1fffe798>
    19fc:	00746c75 	rsbseq	r6, r4, r5, ror ip
    1a00:	672f3a43 	strvs	r3, [pc, -r3, asr #20]!
    1a04:	442f7469 	strtmi	r7, [pc], #-1129	; 1a0c <startup-0x1fffe5f4>
    1a08:	39325441 	ldmdbcc	r2!, {r0, r6, sl, ip, lr}
    1a0c:	614c2d30 	cmpvs	ip, r0, lsr sp
    1a10:	79736d72 	ldmdbvc	r3!, {r1, r4, r5, r6, r8, sl, fp, sp, lr}^
    1a14:	6d657473 	cfstrdvs	mvd7, [r5, #-460]!	; 0xfffffe34
    1a18:	646f6b2f 	strbtvs	r6, [pc], #-2863	; 1a20 <startup-0x1fffe5e0>
    1a1c:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    1a20:	4153552f 	cmpmi	r3, pc, lsr #10
    1a24:	632e5452 			; <UNDEFINED> instruction: 0x632e5452
    1a28:	49564e00 	ldmdbmi	r6, {r9, sl, fp, lr}^
    1a2c:	6e495f43 	cdpvs	15, 4, cr5, cr9, cr3, {2}
    1a30:	74537469 	ldrbvc	r7, [r3], #-1129	; 0xfffffb97
    1a34:	74637572 	strbtvc	r7, [r3], #-1394	; 0xfffffa8e
    1a38:	00657275 	rsbeq	r7, r5, r5, ror r2
    1a3c:	63775f5f 	cmnvs	r7, #380	; 0x17c
    1a40:	665f0068 	ldrbvs	r0, [pc], -r8, rrx
    1a44:	00656c69 	rsbeq	r6, r5, r9, ror #24
    1a48:	5f6e6f5f 	svcpl	0x006e6f5f
    1a4c:	74697865 	strbtvc	r7, [r9], #-2149	; 0xfffff79b
    1a50:	6772615f 			; <UNDEFINED> instruction: 0x6772615f
    1a54:	6d5f0073 	ldclvs	0, cr0, [pc, #-460]	; 1890 <startup-0x1fffe770>
    1a58:	656c7262 	strbvs	r7, [ip, #-610]!	; 0xfffffd9e
    1a5c:	74735f6e 	ldrbtvc	r5, [r3], #-3950	; 0xfffff092
    1a60:	00657461 	rsbeq	r7, r5, r1, ror #8
    1a64:	7365725f 	cmnvc	r5, #-268435451	; 0xf0000005
    1a68:	5f746c75 	svcpl	0x00746c75
    1a6c:	6964006b 	stmdbvs	r4!, {r0, r1, r3, r5, r6}^
    1a70:	73746967 	cmnvc	r4, #1687552	; 0x19c000
    1a74:	69735f00 	ldmdbvs	r3!, {r8, r9, sl, fp, ip, lr}^
    1a78:	5f00657a 	svcpl	0x0000657a
    1a7c:	61636f6c 	cmnvs	r3, ip, ror #30
    1a80:	6d69746c 	cfstrdvs	mvd7, [r9, #-432]!	; 0xfffffe50
    1a84:	75625f65 	strbvc	r5, [r2, #-3941]!	; 0xfffff09b
    1a88:	5f5f0066 	svcpl	0x005f0066
    1a8c:	6d5f6d74 	ldclvs	13, cr6, [pc, #-464]	; 18c4 <startup-0x1fffe73c>
    1a90:	55006e6f 	strpl	r6, [r0, #-3695]	; 0xfffff191
    1a94:	54524153 	ldrbpl	r4, [r2], #-339	; 0xfffffead
    1a98:	696e495f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, lr}^
    1a9c:	72745374 	rsbsvc	r5, r4, #116, 6	; 0xd0000001
    1aa0:	75746375 	ldrbvc	r6, [r4, #-885]!	; 0xfffffc8b
    1aa4:	5f006572 	svcpl	0x00006572
    1aa8:	73756e75 	cmnvc	r5, #1872	; 0x750
    1aac:	725f6465 	subsvc	r6, pc, #1694498816	; 0x65000000
    1ab0:	00646e61 	rsbeq	r6, r4, r1, ror #28
    1ab4:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    1ab8:	69725054 	ldmdbvs	r2!, {r2, r4, r6, ip, lr}^
    1abc:	754e746e 	strbvc	r7, [lr, #-1134]	; 0xfffffb92
    1ac0:	755f006d 	ldrbvc	r0, [pc, #-109]	; 1a5b <startup-0x1fffe5a5>
    1ac4:	6570736e 	ldrbvs	r7, [r0, #-878]!	; 0xfffffc92
    1ac8:	69666963 	stmdbvs	r6!, {r0, r1, r5, r6, r8, fp, sp, lr}^
    1acc:	6c5f6465 	cfldrdvs	mvd6, [pc], {101}	; 0x65
    1ad0:	6c61636f 	stclvs	3, cr6, [r1], #-444	; 0xfffffe44
    1ad4:	6e695f65 	cdpvs	15, 6, cr5, cr9, cr5, {3}
    1ad8:	5f006f66 	svcpl	0x00006f66
    1adc:	6e656572 	mcrvs	5, 3, r6, cr5, cr2, {3}
    1ae0:	675f0074 			; <UNDEFINED> instruction: 0x675f0074
    1ae4:	61626f6c 	cmnvs	r2, ip, ror #30
    1ae8:	6d695f6c 	stclvs	15, cr5, [r9, #-432]!	; 0xfffffe50
    1aec:	65727570 	ldrbvs	r7, [r2, #-1392]!	; 0xfffffa90
    1af0:	7274705f 	rsbsvc	r7, r4, #95	; 0x5f
    1af4:	6e665f00 	cdpvs	15, 6, cr5, cr6, cr0, {0}
    1af8:	735f0073 	cmpvc	pc, #115	; 0x73
    1afc:	6e696474 	mcrvs	4, 3, r6, cr9, cr4, {3}
    1b00:	67696400 	strbvs	r6, [r9, -r0, lsl #8]!
    1b04:	72417469 	subvc	r7, r1, #1761607680	; 0x69000000
    1b08:	635f0072 	cmpvs	pc, #114	; 0x72
    1b0c:	696b6f6f 	stmdbvs	fp!, {r0, r1, r2, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
    1b10:	775f0065 	ldrbvc	r0, [pc, -r5, rrx]
    1b14:	5f007364 	svcpl	0x00007364
    1b18:	636f6c5f 	cmnvs	pc, #24320	; 0x5f00
    1b1c:	735f006b 	cmpvc	pc, #107	; 0x6b
    1b20:	665f6769 	ldrbvs	r6, [pc], -r9, ror #14
    1b24:	00636e75 	rsbeq	r6, r3, r5, ror lr
    1b28:	7476635f 	ldrbtvc	r6, [r6], #-863	; 0xfffffca1
    1b2c:	00667562 	rsbeq	r7, r6, r2, ror #10
    1b30:	75427872 	strbvc	r7, [r2, #-2162]	; 0xfffff78e
    1b34:	72656666 	rsbvc	r6, r5, #106954752	; 0x6600000
    1b38:	35705f00 	ldrbcc	r5, [r0, #-3840]!	; 0xfffff100
    1b3c:	5f5f0073 	svcpl	0x005f0073
    1b40:	4c494673 	mcrrmi	6, 7, r4, r9, cr3
    1b44:	5f5f0045 	svcpl	0x005f0045
    1b48:	64696473 	strbtvs	r6, [r9], #-1139	; 0xfffffb8d
    1b4c:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xfffff197
    1b50:	6c665f00 	stclvs	15, cr5, [r6], #-0
    1b54:	32736761 	rsbscc	r6, r3, #25427968	; 0x1840000
    1b58:	41535500 	cmpmi	r3, r0, lsl #10
    1b5c:	6f435452 	svcvs	0x00435452
    1b60:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    1b64:	69735f00 	ldmdbvs	r3!, {r8, r9, sl, fp, ip, lr}^
    1b68:	6c616e67 	stclvs	14, cr6, [r1], #-412	; 0xfffffe64
    1b6c:	6675625f 			; <UNDEFINED> instruction: 0x6675625f
    1b70:	69425f00 	stmdbvs	r2, {r8, r9, sl, fp, ip, lr}^
    1b74:	746e6967 	strbtvc	r6, [lr], #-2407	; 0xfffff699
    1b78:	616d5f00 	cmnvs	sp, r0, lsl #30
    1b7c:	73647778 	cmnvc	r4, #120, 14	; 0x1e00000
    1b80:	74615f00 	strbtvc	r5, [r1], #-3840	; 0xfffff100
    1b84:	74697865 	strbtvc	r7, [r9], #-2149	; 0xfffff79b
    1b88:	655f0030 	ldrbvs	r0, [pc, #-48]	; 1b60 <startup-0x1fffe4a0>
    1b8c:	6772656d 	ldrbvs	r6, [r2, -sp, ror #10]!
    1b90:	79636e65 	stmdbvc	r3!, {r0, r2, r5, r6, r9, sl, fp, sp, lr}^
    1b94:	696e5f00 	stmdbvs	lr!, {r8, r9, sl, fp, ip, lr}^
    1b98:	0073626f 	rsbseq	r6, r3, pc, ror #4
    1b9c:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    1ba0:	495f3154 	ldmdbmi	pc, {r2, r4, r6, r8, ip, sp}^	; <UNPREDICTABLE>
    1ba4:	61485152 	cmpvs	r8, r2, asr r1
    1ba8:	656c646e 	strbvs	r6, [ip, #-1134]!	; 0xfffffb92
    1bac:	5f5f0072 	svcpl	0x005f0072
    1bb0:	756c6773 	strbvc	r6, [ip, #-1907]!	; 0xfffff88d
    1bb4:	6e5f0065 	cdpvs	0, 5, cr0, cr15, cr5, {3}
    1bb8:	6c6c616d 	stfvse	f6, [ip], #-436	; 0xfffffe4c
    1bbc:	6400636f 	strvs	r6, [r0], #-879	; 0xfffffc91
    1bc0:	6c62756f 	cfstr64vs	mvdx7, [r2], #-444	; 0xfffffe44
    1bc4:	675f0065 	ldrbvs	r0, [pc, -r5, rrx]
    1bc8:	616d6d61 	cmnvs	sp, r1, ror #26
    1bcc:	6769735f 			; <UNDEFINED> instruction: 0x6769735f
    1bd0:	6d61676e 	stclvs	7, cr6, [r1, #-440]!	; 0xfffffe48
    1bd4:	41535500 	cmpmi	r3, r0, lsl #10
    1bd8:	72505452 	subsvc	r5, r0, #1375731712	; 0x52000000
    1bdc:	00746e69 	rsbseq	r6, r4, r9, ror #28
    1be0:	6572665f 	ldrbvs	r6, [r2, #-1631]!	; 0xfffff9a1
    1be4:	73696c65 	cmnvc	r9, #25856	; 0x6500
    1be8:	695f0074 	ldmdbvs	pc, {r2, r4, r5, r6}^	; <UNPREDICTABLE>
    1bec:	0073626f 	rsbseq	r6, r3, pc, ror #4
    1bf0:	756c675f 	strbvc	r6, [ip, #-1887]!	; 0xfffff8a1
    1bf4:	735f0065 	cmpvc	pc, #101	; 0x65
    1bf8:	006e6769 	rsbeq	r6, lr, r9, ror #14
    1bfc:	616f6c66 	cmnvs	pc, r6, ror #24
    1c00:	65720074 	ldrbvs	r0, [r2, #-116]!	; 0xffffff8c
    1c04:	78526c61 	ldmdavc	r2, {r0, r5, r6, sl, fp, sp, lr}^
    1c08:	66667542 	strbtvs	r7, [r6], -r2, asr #10
    1c0c:	5f007265 	svcpl	0x00007265
    1c10:	72655f68 	rsbvc	r5, r5, #104, 30	; 0x1a0
    1c14:	006f6e72 	rsbeq	r6, pc, r2, ror lr	; <UNPREDICTABLE>
    1c18:	7263775f 	rsbvc	r7, r3, #24903680	; 0x17c0000
    1c1c:	626d6f74 	rsbvs	r6, sp, #116, 30	; 0x1d0
    1c20:	6174735f 	cmnvs	r4, pc, asr r3
    1c24:	5f006574 	svcpl	0x00006574
    1c28:	5f6d745f 	svcpl	0x006d745f
    1c2c:	7961646d 	stmdbvc	r1!, {r0, r2, r3, r5, r6, sl, sp, lr}^
    1c30:	656e5f00 	strbvs	r5, [lr, #-3840]!	; 0xfffff100
    1c34:	755f0077 	ldrbvc	r0, [pc, #-119]	; 1bc5 <startup-0x1fffe43b>
    1c38:	00667562 	rsbeq	r7, r6, r2, ror #10
    1c3c:	6474735f 	ldrbtvs	r7, [r4], #-863	; 0xfffffca1
    1c40:	00727265 	rsbseq	r7, r2, r5, ror #4
    1c44:	7463775f 	strbtvc	r7, [r3], #-1887	; 0xfffff8a1
    1c48:	5f626d6f 	svcpl	0x00626d6f
    1c4c:	74617473 	strbtvc	r7, [r1], #-1139	; 0xfffffb8d
    1c50:	6d5f0065 	ldclvs	0, cr0, [pc, #-404]	; 1ac4 <startup-0x1fffe53c>
    1c54:	61747362 	cmnvs	r4, r2, ror #6
    1c58:	5f006574 	svcpl	0x00006574
    1c5c:	646e6172 	strbtvs	r6, [lr], #-370	; 0xfffffe8e
    1c60:	78656e5f 	stmdavc	r5!, {r0, r1, r2, r3, r4, r6, r9, sl, fp, sp, lr}^
    1c64:	665f0074 			; <UNDEFINED> instruction: 0x665f0074
    1c68:	7367616c 	cmnvc	r7, #108, 2
    1c6c:	74615f00 	strbtvc	r5, [r1], #-3840	; 0xfffff100
    1c70:	74697865 	strbtvc	r7, [r9], #-2149	; 0xfffff79b
    1c74:	635f5f00 	cmpvs	pc, #0, 30
    1c78:	746e756f 	strbtvc	r7, [lr], #-1391	; 0xfffffa91
    1c7c:	41535500 	cmpmi	r3, r0, lsl #10
    1c80:	65475452 	strbvs	r5, [r7, #-1106]	; 0xfffffbae
    1c84:	635f0074 	cmpvs	pc, #116	; 0x74
    1c88:	65736f6c 	ldrbvs	r6, [r3, #-3948]!	; 0xfffff094
    1c8c:	745f5f00 	ldrbvc	r5, [pc], #-3840	; 1c94 <startup-0x1fffe36c>
    1c90:	64795f6d 	ldrbtvs	r5, [r9], #-3949	; 0xfffff093
    1c94:	72007961 	andvc	r7, r0, #1589248	; 0x184000
    1c98:	4f646165 	svcmi	0x00646165
    1c9c:	735f006b 	cmpvc	pc, #107	; 0x6b
    1ca0:	00646565 	rsbeq	r6, r4, r5, ror #10
    1ca4:	6565735f 	strbvs	r7, [r5, #-863]!	; 0xfffffca1
    1ca8:	665f006b 	ldrbvs	r0, [pc], -fp, rrx
    1cac:	5f736f70 	svcpl	0x00736f70
    1cb0:	5f5f0074 	svcpl	0x005f0074
    1cb4:	62686377 	rsbvs	r6, r8, #-603979775	; 0xdc000001
    1cb8:	626d5f00 	rsbvs	r5, sp, #0, 30
    1cbc:	63776f74 	cmnvs	r7, #116, 30	; 0x1d0
    1cc0:	6174735f 	cmnvs	r4, pc, asr r3
    1cc4:	5f006574 	svcpl	0x00006574
    1cc8:	5f6f7364 	svcpl	0x006f7364
    1ccc:	646e6168 	strbtvs	r6, [lr], #-360	; 0xfffffe98
    1cd0:	5f00656c 	svcpl	0x0000656c
    1cd4:	646e6172 	strbtvs	r6, [lr], #-370	; 0xfffffe8e
    1cd8:	5f003834 	svcpl	0x00003834
    1cdc:	6f647473 	svcvs	0x00647473
    1ce0:	5f007475 	svcpl	0x00007475
    1ce4:	736b6c62 	cmnvc	fp, #25088	; 0x6200
    1ce8:	00657a69 	rsbeq	r7, r5, r9, ror #20
    1cec:	4f495047 	svcmi	0x00495047
    1cf0:	696e495f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, lr}^
    1cf4:	72745374 	rsbsvc	r5, r4, #116, 6	; 0xd0000001
    1cf8:	75746375 	ldrbvc	r6, [r4, #-885]!	; 0xfffffc8b
    1cfc:	5f006572 	svcpl	0x00006572
    1d00:	65736162 	ldrbvs	r6, [r3, #-354]!	; 0xfffffe9e
    1d04:	74735f00 	ldrbtvc	r5, [r3], #-3840	; 0xfffff100
    1d08:	6b6f7472 	blvs	1bdeed8 <startup-0x1e421128>
    1d0c:	73616c5f 	cmnvc	r1, #24320	; 0x5f00
    1d10:	6d5f0074 	ldclvs	0, cr0, [pc, #-464]	; 1b48 <startup-0x1fffe4b8>
    1d14:	6f747262 	svcvs	0x00747262
    1d18:	735f6377 	cmpvc	pc, #-603979775	; 0xdc000001
    1d1c:	65746174 	ldrbvs	r6, [r4, #-372]!	; 0xfffffe8c
    1d20:	6c665f00 	stclvs	15, cr5, [r6], #-0
    1d24:	5f6b636f 	svcpl	0x006b636f
    1d28:	69640074 	stmdbvs	r4!, {r2, r4, r5, r6}^
    1d2c:	54746967 	ldrbtpl	r6, [r4], #-2407	; 0xfffff699
    1d30:	6972506f 	ldmdbvs	r2!, {r0, r1, r2, r3, r5, r6, ip, lr}^
    1d34:	6261746e 	rsbvs	r7, r1, #1845493760	; 0x6e000000
    1d38:	5f00656c 	svcpl	0x0000656c
    1d3c:	4c49465f 	mcrrmi	6, 5, r4, r9, cr15
    1d40:	6d5f0045 	ldclvs	0, cr0, [pc, #-276]	; 1c34 <startup-0x1fffe3cc>
    1d44:	61747362 	cmnvs	r4, r2, ror #6
    1d48:	745f6574 	ldrbvc	r6, [pc], #-1396	; 1d50 <startup-0x1fffe2b0>
    1d4c:	34725f00 	ldrbtcc	r5, [r2], #-3840	; 0xfffff100
    1d50:	69770038 	ldmdbvs	r7!, {r3, r4, r5}^
    1d54:	745f746e 	ldrbvc	r7, [pc], #-1134	; 1d5c <startup-0x1fffe2a4>
    1d58:	446e6900 	strbtmi	r6, [lr], #-2304	; 0xfffff700
    1d5c:	74696769 	strbtvc	r6, [r9], #-1897	; 0xfffff897
    1d60:	61645f00 	cmnvs	r4, r0, lsl #30
    1d64:	5f006174 	svcpl	0x00006174
    1d68:	656c626d 	strbvs	r6, [ip, #-621]!	; 0xfffffd93
    1d6c:	74735f6e 	ldrbtvc	r5, [r3], #-3950	; 0xfffff092
    1d70:	00657461 	rsbeq	r7, r5, r1, ror #8
    1d74:	6c616572 	cfstr64vs	mvdx6, [r1], #-456	; 0xfffffe38
    1d78:	75427854 	strbvc	r7, [r2, #-2132]	; 0xfffff7ac
    1d7c:	72656666 	rsbvc	r6, r5, #106954752	; 0x6600000
    1d80:	6e665f00 	cdpvs	15, 6, cr5, cr6, cr0, {0}
    1d84:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
    1d88:	5f5f0073 	svcpl	0x005f0073
    1d8c:	795f6d74 	ldmdbvc	pc, {r2, r4, r5, r6, r8, sl, fp, sp, lr}^	; <UNPREDICTABLE>
    1d90:	00726165 	rsbseq	r6, r2, r5, ror #2
    1d94:	66626c5f 			; <UNDEFINED> instruction: 0x66626c5f
    1d98:	657a6973 	ldrbvs	r6, [sl, #-2419]!	; 0xfffff68d
    1d9c:	6e695f00 	cdpvs	15, 6, cr5, cr9, cr0, {0}
    1da0:	695f0063 	ldmdbvs	pc, {r0, r1, r5, r6}^	; <UNPREDICTABLE>
    1da4:	5f00646e 	svcpl	0x0000646e
    1da8:	7562735f 	strbvc	r7, [r2, #-863]!	; 0xfffffca1
    1dac:	695f0066 	ldmdbvs	pc, {r1, r2, r5, r6}^	; <UNPREDICTABLE>
    1db0:	78635f73 	stmdavc	r3!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    1db4:	4c5f0061 	mrrcmi	0, 6, r0, pc, cr1	; <UNPREDICTABLE>
    1db8:	5f4b434f 	svcpl	0x004b434f
    1dbc:	6e5f0054 	mrcvs	0, 2, r0, cr15, cr4, {2}
    1dc0:	66747865 	ldrbtvs	r7, [r4], -r5, ror #16
    1dc4:	6f6c5f00 	svcvs	0x006c5f00
    1dc8:	656c6163 	strbvs	r6, [ip, #-355]!	; 0xfffffe9d
    1dcc:	555f5f00 	ldrbpl	r5, [pc, #-3840]	; ed4 <startup-0x1ffff12c>
    1dd0:	676e6f4c 	strbvs	r6, [lr, -ip, asr #30]!
    1dd4:	65725f00 	ldrbvs	r5, [r2, #-3840]!	; 0xfffff100
    1dd8:	746c7573 	strbtvc	r7, [ip], #-1395	; 0xfffffa8d
    1ddc:	666f5f00 	strbtvs	r5, [pc], -r0, lsl #30
    1de0:	00745f66 	rsbseq	r5, r4, r6, ror #30
    1de4:	6464615f 	strbtvs	r6, [r4], #-351	; 0xfffffea1
    1de8:	745f5f00 	ldrbvc	r5, [pc], #-3840	; 1df0 <startup-0x1fffe210>
    1dec:	6f685f6d 	svcvs	0x00685f6d
    1df0:	5f007275 	svcpl	0x00007275
    1df4:	5f6d745f 	svcpl	0x006d745f
    1df8:	79616477 	stmdbvc	r1!, {r0, r1, r2, r4, r5, r6, sl, sp, lr}^
    1dfc:	626d5f00 	rsbvs	r5, sp, #0, 30
    1e00:	6f747273 	svcvs	0x00747273
    1e04:	5f736377 	svcpl	0x00736377
    1e08:	74617473 	strbtvc	r7, [r1], #-1139	; 0xfffffb8d
    1e0c:	6f5f0065 	svcvs	0x005f0065
    1e10:	65736666 	ldrbvs	r6, [r3, #-1638]!	; 0xfffff99a
    1e14:	665f0074 			; <UNDEFINED> instruction: 0x665f0074
    1e18:	6772616e 	ldrbvs	r6, [r2, -lr, ror #2]!
    1e1c:	5f5f0073 	svcpl	0x005f0073
    1e20:	695f6d74 	ldmdbvs	pc, {r2, r4, r5, r6, r8, sl, fp, sp, lr}^	; <UNPREDICTABLE>
    1e24:	74736473 	ldrbtvc	r6, [r3], #-1139	; 0xfffffb8d
    1e28:	41535500 	cmpmi	r3, r0, lsl #10
    1e2c:	75505452 	ldrbvc	r5, [r0, #-1106]	; 0xfffffbae
    1e30:	68630074 	stmdavs	r3!, {r2, r4, r5, r6}^
    1e34:	6f547261 	svcvs	0x00547261
    1e38:	6e697250 	mcrvs	2, 3, r7, cr9, cr0, {2}
    1e3c:	6c626174 	stfvse	f6, [r2], #-464	; 0xfffffe30
    1e40:	5f5f0065 	svcpl	0x005f0065
    1e44:	6d5f6d74 	ldclvs	13, cr6, [pc, #-464]	; 1c7c <startup-0x1fffe384>
    1e48:	5f006e69 	svcpl	0x00006e69
    1e4c:	64746567 	ldrbtvs	r6, [r4], #-1383	; 0xfffffa99
    1e50:	5f657461 	svcpl	0x00657461
    1e54:	00727265 	rsbseq	r7, r2, r5, ror #4
    1e58:	68436e69 	stmdavs	r3, {r0, r3, r5, r6, r9, sl, fp, sp, lr}^
    1e5c:	Address 0x00001e5c is out of bounds.


Disassembly of section .comment:

00000000 <.comment>:
   0:	3a434347 	bcc	10d0d24 <startup-0x1ef2f2dc>
   4:	4e472820 	cdpmi	8, 4, cr2, cr7, cr0, {1}
   8:	6f542055 	svcvs	0x00542055
   c:	20736c6f 	rsbscs	r6, r3, pc, ror #24
  10:	20726f66 	rsbscs	r6, r2, r6, ror #30
  14:	206d7241 	rsbcs	r7, sp, r1, asr #4
  18:	65626d45 	strbvs	r6, [r2, #-3397]!	; 0xfffff2bb
  1c:	64656464 	strbtvs	r6, [r5], #-1124	; 0xfffffb9c
  20:	6f725020 	svcvs	0x00725020
  24:	73736563 	cmnvc	r3, #415236096	; 0x18c00000
  28:	2073726f 	rsbscs	r7, r3, pc, ror #4
  2c:	30322d37 	eorscc	r2, r2, r7, lsr sp
  30:	712d3731 			; <UNDEFINED> instruction: 0x712d3731
  34:	616d2d34 	cmnvs	sp, r4, lsr sp
  38:	29726f6a 	ldmdbcs	r2!, {r1, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
  3c:	322e3720 	eorcc	r3, lr, #32, 14	; 0x800000
  40:	3220312e 	eorcc	r3, r0, #-2147483637	; 0x8000000b
  44:	30373130 	eorscc	r3, r7, r0, lsr r1
  48:	20343039 	eorscs	r3, r4, r9, lsr r0
  4c:	6c657228 	sfmvs	f7, 2, [r5], #-160	; 0xffffff60
  50:	65736165 	ldrbvs	r6, [r3, #-357]!	; 0xfffffe9b
  54:	415b2029 	cmpmi	fp, r9, lsr #32
  58:	652f4d52 	strvs	r4, [pc, #-3410]!	; fffff30e <_global_impure_ptr+0xdfffa2ea>
  5c:	6465626d 	strbtvs	r6, [r5], #-621	; 0xfffffd93
  60:	2d646564 	cfstr64cs	mvdx6, [r4, #-400]!	; 0xfffffe70
  64:	72622d37 	rsbvc	r2, r2, #3520	; 0xdc0
  68:	68636e61 	stmdavs	r3!, {r0, r5, r6, r9, sl, fp, sp, lr}^
  6c:	76657220 	strbtvc	r7, [r5], -r0, lsr #4
  70:	6f697369 	svcvs	0x00697369
  74:	3532206e 	ldrcc	r2, [r2, #-110]!	; 0xffffff92
  78:	34303235 	ldrtcc	r3, [r0], #-565	; 0xfffffdcb
  7c:	Address 0x0000007c is out of bounds.


Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00002b41 	andeq	r2, r0, r1, asr #22
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	00000021 	andeq	r0, r0, r1, lsr #32
  10:	2d533605 	ldclcs	6, cr3, [r3, #-20]	; 0xffffffec
  14:	0c06004d 	stceq	0, cr0, [r6], {77}	; 0x4d
  18:	01094d07 	tsteq	r9, r7, lsl #26
  1c:	01140412 	tsteq	r4, r2, lsl r4
  20:	03170115 	tsteq	r7, #1073741829	; 0x40000005
  24:	01190118 	tsteq	r9, r8, lsl r1
  28:	061e011a 			; <UNDEFINED> instruction: 0x061e011a

Disassembly of section .debug_frame:

00000000 <.debug_frame>:
       0:	0000000c 	andeq	r0, r0, ip
       4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
       8:	7c020001 	stcvc	0, cr0, [r2], {1}
       c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
      10:	0000001c 	andeq	r0, r0, ip, lsl r0
      14:	00000000 	andeq	r0, r0, r0
      18:	20000010 	andcs	r0, r0, r0, lsl r0
      1c:	00000130 	andeq	r0, r0, r0, lsr r1
      20:	40080e41 	andmi	r0, r8, r1, asr #28
      24:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
      28:	100e4101 	andne	r4, lr, r1, lsl #2
      2c:	00070d41 	andeq	r0, r7, r1, asr #26
      30:	0000001c 	andeq	r0, r0, ip, lsl r0
      34:	00000000 	andeq	r0, r0, r0
      38:	20000140 	andcs	r0, r0, r0, asr #2
      3c:	00000194 	muleq	r0, r4, r1
      40:	40080e41 	andmi	r0, r8, r1, asr #28
      44:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
      48:	300e4101 	andcc	r4, lr, r1, lsl #2
      4c:	00070d41 	andeq	r0, r7, r1, asr #26
      50:	0000001c 	andeq	r0, r0, ip, lsl r0
      54:	00000000 	andeq	r0, r0, r0
      58:	200002d4 	ldrdcs	r0, [r0], -r4
      5c:	00000036 	andeq	r0, r0, r6, lsr r0
      60:	40080e41 	andmi	r0, r8, r1, asr #28
      64:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
      68:	100e4101 	andne	r4, lr, r1, lsl #2
      6c:	00070d41 	andeq	r0, r7, r1, asr #26
      70:	0000001c 	andeq	r0, r0, ip, lsl r0
      74:	00000000 	andeq	r0, r0, r0
      78:	2000030a 	andcs	r0, r0, sl, lsl #6
      7c:	00000056 	andeq	r0, r0, r6, asr r0
      80:	40080e41 	andmi	r0, r8, r1, asr #28
      84:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
      88:	180e4101 	stmdane	lr, {r0, r8, lr}
      8c:	00070d41 	andeq	r0, r7, r1, asr #26
      90:	0000001c 	andeq	r0, r0, ip, lsl r0
      94:	00000000 	andeq	r0, r0, r0
      98:	20000360 	andcs	r0, r0, r0, ror #6
      9c:	00000028 	andeq	r0, r0, r8, lsr #32
      a0:	40080e41 	andmi	r0, r8, r1, asr #28
      a4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
      a8:	100e4101 	andne	r4, lr, r1, lsl #2
      ac:	00070d41 	andeq	r0, r7, r1, asr #26
      b0:	0000001c 	andeq	r0, r0, ip, lsl r0
      b4:	00000000 	andeq	r0, r0, r0
      b8:	20000388 	andcs	r0, r0, r8, lsl #7
      bc:	00000048 	andeq	r0, r0, r8, asr #32
      c0:	40080e41 	andmi	r0, r8, r1, asr #28
      c4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
      c8:	100e4101 	andne	r4, lr, r1, lsl #2
      cc:	00070d41 	andeq	r0, r7, r1, asr #26
      d0:	0000001c 	andeq	r0, r0, ip, lsl r0
      d4:	00000000 	andeq	r0, r0, r0
      d8:	200003d0 	ldrdcs	r0, [r0], -r0	; <UNPREDICTABLE>
      dc:	0000003a 	andeq	r0, r0, sl, lsr r0
      e0:	40080e41 	andmi	r0, r8, r1, asr #28
      e4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
      e8:	100e4101 	andne	r4, lr, r1, lsl #2
      ec:	00070d41 	andeq	r0, r7, r1, asr #26
      f0:	0000001c 	andeq	r0, r0, ip, lsl r0
      f4:	00000000 	andeq	r0, r0, r0
      f8:	2000040a 	andcs	r0, r0, sl, lsl #8
      fc:	00000046 	andeq	r0, r0, r6, asr #32
     100:	40080e41 	andmi	r0, r8, r1, asr #28
     104:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     108:	100e4101 	andne	r4, lr, r1, lsl #2
     10c:	00070d41 	andeq	r0, r7, r1, asr #26
     110:	0000001c 	andeq	r0, r0, ip, lsl r0
     114:	00000000 	andeq	r0, r0, r0
     118:	20000450 	andcs	r0, r0, r0, asr r4
     11c:	00000048 	andeq	r0, r0, r8, asr #32
     120:	40080e41 	andmi	r0, r8, r1, asr #28
     124:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     128:	100e4101 	andne	r4, lr, r1, lsl #2
     12c:	00070d41 	andeq	r0, r7, r1, asr #26
     130:	0000001c 	andeq	r0, r0, ip, lsl r0
     134:	00000000 	andeq	r0, r0, r0
     138:	20000498 	mulcs	r0, r8, r4
     13c:	00000024 	andeq	r0, r0, r4, lsr #32
     140:	40080e41 	andmi	r0, r8, r1, asr #28
     144:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     148:	100e4101 	andne	r4, lr, r1, lsl #2
     14c:	00070d41 	andeq	r0, r7, r1, asr #26
     150:	0000001c 	andeq	r0, r0, ip, lsl r0
     154:	00000000 	andeq	r0, r0, r0
     158:	200004bc 			; <UNDEFINED> instruction: 0x200004bc
     15c:	0000001c 	andeq	r0, r0, ip, lsl r0
     160:	40080e41 	andmi	r0, r8, r1, asr #28
     164:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     168:	100e4101 	andne	r4, lr, r1, lsl #2
     16c:	00070d41 	andeq	r0, r7, r1, asr #26
     170:	0000001c 	andeq	r0, r0, ip, lsl r0
     174:	00000000 	andeq	r0, r0, r0
     178:	200004d8 	ldrdcs	r0, [r0], -r8
     17c:	0000003a 	andeq	r0, r0, sl, lsr r0
     180:	40080e41 	andmi	r0, r8, r1, asr #28
     184:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     188:	100e4101 	andne	r4, lr, r1, lsl #2
     18c:	00070d41 	andeq	r0, r7, r1, asr #26
     190:	0000001c 	andeq	r0, r0, ip, lsl r0
     194:	00000000 	andeq	r0, r0, r0
     198:	20000512 	andcs	r0, r0, r2, lsl r5
     19c:	00000040 	andeq	r0, r0, r0, asr #32
     1a0:	40080e41 	andmi	r0, r8, r1, asr #28
     1a4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     1a8:	100e4101 	andne	r4, lr, r1, lsl #2
     1ac:	00070d41 	andeq	r0, r7, r1, asr #26
     1b0:	0000001c 	andeq	r0, r0, ip, lsl r0
     1b4:	00000000 	andeq	r0, r0, r0
     1b8:	20000552 	andcs	r0, r0, r2, asr r5
     1bc:	0000003e 	andeq	r0, r0, lr, lsr r0
     1c0:	40080e41 	andmi	r0, r8, r1, asr #28
     1c4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     1c8:	100e4101 	andne	r4, lr, r1, lsl #2
     1cc:	00070d41 	andeq	r0, r7, r1, asr #26
     1d0:	0000001c 	andeq	r0, r0, ip, lsl r0
     1d4:	00000000 	andeq	r0, r0, r0
     1d8:	20000590 	mulcs	r0, r0, r5
     1dc:	00000038 	andeq	r0, r0, r8, lsr r0
     1e0:	40080e41 	andmi	r0, r8, r1, asr #28
     1e4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     1e8:	100e4101 	andne	r4, lr, r1, lsl #2
     1ec:	00070d41 	andeq	r0, r7, r1, asr #26
     1f0:	0000001c 	andeq	r0, r0, ip, lsl r0
     1f4:	00000000 	andeq	r0, r0, r0
     1f8:	200005c8 	andcs	r0, r0, r8, asr #11
     1fc:	00000048 	andeq	r0, r0, r8, asr #32
     200:	40080e41 	andmi	r0, r8, r1, asr #28
     204:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     208:	100e4101 	andne	r4, lr, r1, lsl #2
     20c:	00070d41 	andeq	r0, r7, r1, asr #26
     210:	0000001c 	andeq	r0, r0, ip, lsl r0
     214:	00000000 	andeq	r0, r0, r0
     218:	20000610 	andcs	r0, r0, r0, lsl r6
     21c:	00000020 	andeq	r0, r0, r0, lsr #32
     220:	40080e41 	andmi	r0, r8, r1, asr #28
     224:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     228:	100e4101 	andne	r4, lr, r1, lsl #2
     22c:	00070d41 	andeq	r0, r7, r1, asr #26
     230:	0000001c 	andeq	r0, r0, ip, lsl r0
     234:	00000000 	andeq	r0, r0, r0
     238:	20000630 	andcs	r0, r0, r0, lsr r6
     23c:	00000040 	andeq	r0, r0, r0, asr #32
     240:	40080e41 	andmi	r0, r8, r1, asr #28
     244:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     248:	100e4101 	andne	r4, lr, r1, lsl #2
     24c:	00070d41 	andeq	r0, r7, r1, asr #26
     250:	0000001c 	andeq	r0, r0, ip, lsl r0
     254:	00000000 	andeq	r0, r0, r0
     258:	20000670 	andcs	r0, r0, r0, ror r6
     25c:	0000003e 	andeq	r0, r0, lr, lsr r0
     260:	40080e41 	andmi	r0, r8, r1, asr #28
     264:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     268:	100e4101 	andne	r4, lr, r1, lsl #2
     26c:	00070d41 	andeq	r0, r7, r1, asr #26
     270:	0000001c 	andeq	r0, r0, ip, lsl r0
     274:	00000000 	andeq	r0, r0, r0
     278:	200006ae 	andcs	r0, r0, lr, lsr #13
     27c:	00000040 	andeq	r0, r0, r0, asr #32
     280:	40080e41 	andmi	r0, r8, r1, asr #28
     284:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     288:	100e4101 	andne	r4, lr, r1, lsl #2
     28c:	00070d41 	andeq	r0, r7, r1, asr #26
     290:	0000001c 	andeq	r0, r0, ip, lsl r0
     294:	00000000 	andeq	r0, r0, r0
     298:	200006ee 	andcs	r0, r0, lr, ror #13
     29c:	00000040 	andeq	r0, r0, r0, asr #32
     2a0:	40080e41 	andmi	r0, r8, r1, asr #28
     2a4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     2a8:	100e4101 	andne	r4, lr, r1, lsl #2
     2ac:	00070d41 	andeq	r0, r7, r1, asr #26
     2b0:	0000001c 	andeq	r0, r0, ip, lsl r0
     2b4:	00000000 	andeq	r0, r0, r0
     2b8:	2000072e 	andcs	r0, r0, lr, lsr #14
     2bc:	00000038 	andeq	r0, r0, r8, lsr r0
     2c0:	40080e41 	andmi	r0, r8, r1, asr #28
     2c4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     2c8:	100e4101 	andne	r4, lr, r1, lsl #2
     2cc:	00070d41 	andeq	r0, r7, r1, asr #26
     2d0:	0000001c 	andeq	r0, r0, ip, lsl r0
     2d4:	00000000 	andeq	r0, r0, r0
     2d8:	20000766 	andcs	r0, r0, r6, ror #14
     2dc:	00000040 	andeq	r0, r0, r0, asr #32
     2e0:	40080e41 	andmi	r0, r8, r1, asr #28
     2e4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     2e8:	100e4101 	andne	r4, lr, r1, lsl #2
     2ec:	00070d41 	andeq	r0, r7, r1, asr #26
     2f0:	0000001c 	andeq	r0, r0, ip, lsl r0
     2f4:	00000000 	andeq	r0, r0, r0
     2f8:	200007a6 	andcs	r0, r0, r6, lsr #15
     2fc:	00000052 	andeq	r0, r0, r2, asr r0
     300:	40080e41 	andmi	r0, r8, r1, asr #28
     304:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     308:	100e4101 	andne	r4, lr, r1, lsl #2
     30c:	00070d41 	andeq	r0, r7, r1, asr #26
     310:	0000001c 	andeq	r0, r0, ip, lsl r0
     314:	00000000 	andeq	r0, r0, r0
     318:	200007f8 	strdcs	r0, [r0], -r8
     31c:	0000009a 	muleq	r0, sl, r0
     320:	40080e41 	andmi	r0, r8, r1, asr #28
     324:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     328:	200e4101 	andcs	r4, lr, r1, lsl #2
     32c:	00070d41 	andeq	r0, r7, r1, asr #26
     330:	0000001c 	andeq	r0, r0, ip, lsl r0
     334:	00000000 	andeq	r0, r0, r0
     338:	20000892 	mulcs	r0, r2, r8
     33c:	00000048 	andeq	r0, r0, r8, asr #32
     340:	40080e41 	andmi	r0, r8, r1, asr #28
     344:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     348:	180e4101 	stmdane	lr, {r0, r8, lr}
     34c:	00070d41 	andeq	r0, r7, r1, asr #26
     350:	0000001c 	andeq	r0, r0, ip, lsl r0
     354:	00000000 	andeq	r0, r0, r0
     358:	200008da 	ldrdcs	r0, [r0], -sl
     35c:	00000022 	andeq	r0, r0, r2, lsr #32
     360:	40080e41 	andmi	r0, r8, r1, asr #28
     364:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     368:	100e4101 	andne	r4, lr, r1, lsl #2
     36c:	00070d41 	andeq	r0, r7, r1, asr #26
     370:	0000001c 	andeq	r0, r0, ip, lsl r0
     374:	00000000 	andeq	r0, r0, r0
     378:	200008fc 	strdcs	r0, [r0], -ip
     37c:	000000ca 	andeq	r0, r0, sl, asr #1
     380:	40080e41 	andmi	r0, r8, r1, asr #28
     384:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     388:	200e4101 	andcs	r4, lr, r1, lsl #2
     38c:	00070d41 	andeq	r0, r7, r1, asr #26
     390:	0000001c 	andeq	r0, r0, ip, lsl r0
     394:	00000000 	andeq	r0, r0, r0
     398:	200009c6 	andcs	r0, r0, r6, asr #19
     39c:	00000048 	andeq	r0, r0, r8, asr #32
     3a0:	40080e41 	andmi	r0, r8, r1, asr #28
     3a4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     3a8:	180e4101 	stmdane	lr, {r0, r8, lr}
     3ac:	00070d41 	andeq	r0, r7, r1, asr #26
     3b0:	0000000c 	andeq	r0, r0, ip
     3b4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     3b8:	7c020001 	stcvc	0, cr0, [r2], {1}
     3bc:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     3c0:	0000001c 	andeq	r0, r0, ip, lsl r0
     3c4:	000003b0 			; <UNDEFINED> instruction: 0x000003b0
     3c8:	20000a10 	andcs	r0, r0, r0, lsl sl
     3cc:	00000028 	andeq	r0, r0, r8, lsr #32
     3d0:	40080e41 	andmi	r0, r8, r1, asr #28
     3d4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     3d8:	100e4101 	andne	r4, lr, r1, lsl #2
     3dc:	00070d41 	andeq	r0, r7, r1, asr #26
     3e0:	0000001c 	andeq	r0, r0, ip, lsl r0
     3e4:	000003b0 			; <UNDEFINED> instruction: 0x000003b0
     3e8:	20000a38 	andcs	r0, r0, r8, lsr sl
     3ec:	00000062 	andeq	r0, r0, r2, rrx
     3f0:	40080e41 	andmi	r0, r8, r1, asr #28
     3f4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     3f8:	100e4101 	andne	r4, lr, r1, lsl #2
     3fc:	00070d41 	andeq	r0, r7, r1, asr #26
     400:	0000001c 	andeq	r0, r0, ip, lsl r0
     404:	000003b0 			; <UNDEFINED> instruction: 0x000003b0
     408:	20000a9a 	mulcs	r0, sl, sl
     40c:	0000005e 	andeq	r0, r0, lr, asr r0
     410:	40080e41 	andmi	r0, r8, r1, asr #28
     414:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     418:	100e4101 	andne	r4, lr, r1, lsl #2
     41c:	00070d41 	andeq	r0, r7, r1, asr #26
     420:	0000000c 	andeq	r0, r0, ip
     424:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     428:	7c020001 	stcvc	0, cr0, [r2], {1}
     42c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     430:	0000001c 	andeq	r0, r0, ip, lsl r0
     434:	00000420 	andeq	r0, r0, r0, lsr #8
     438:	20000af8 	strdcs	r0, [r0], -r8
     43c:	00000060 	andeq	r0, r0, r0, rrx
     440:	40080e41 	andmi	r0, r8, r1, asr #28
     444:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     448:	100e4101 	andne	r4, lr, r1, lsl #2
     44c:	00070d41 	andeq	r0, r7, r1, asr #26
     450:	0000001c 	andeq	r0, r0, ip, lsl r0
     454:	00000420 	andeq	r0, r0, r0, lsr #8
     458:	20000b58 	andcs	r0, r0, r8, asr fp
     45c:	00000048 	andeq	r0, r0, r8, asr #32
     460:	40080e41 	andmi	r0, r8, r1, asr #28
     464:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     468:	100e4101 	andne	r4, lr, r1, lsl #2
     46c:	00070d41 	andeq	r0, r7, r1, asr #26
     470:	00000018 	andeq	r0, r0, r8, lsl r0
     474:	00000420 	andeq	r0, r0, r0, lsr #8
     478:	20000ba0 	andcs	r0, r0, r0, lsr #23
     47c:	00000070 	andeq	r0, r0, r0, ror r0
     480:	40080e41 	andmi	r0, r8, r1, asr #28
     484:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     488:	070d4101 	streq	r4, [sp, -r1, lsl #2]
     48c:	0000001c 	andeq	r0, r0, ip, lsl r0
     490:	00000420 	andeq	r0, r0, r0, lsr #8
     494:	20000c10 	andcs	r0, r0, r0, lsl ip
     498:	00000028 	andeq	r0, r0, r8, lsr #32
     49c:	40080e41 	andmi	r0, r8, r1, asr #28
     4a0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     4a4:	100e4101 	andne	r4, lr, r1, lsl #2
     4a8:	00070d41 	andeq	r0, r7, r1, asr #26
     4ac:	00000020 	andeq	r0, r0, r0, lsr #32
     4b0:	00000420 	andeq	r0, r0, r0, lsr #8
     4b4:	20000c38 	andcs	r0, r0, r8, lsr ip
     4b8:	0000005e 	andeq	r0, r0, lr, asr r0
     4bc:	400c0e41 	andmi	r0, ip, r1, asr #28
     4c0:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
     4c4:	018e4002 	orreq	r4, lr, r2
     4c8:	41180e41 	tstmi	r8, r1, asr #28
     4cc:	0000070d 	andeq	r0, r0, sp, lsl #14
     4d0:	0000001c 	andeq	r0, r0, ip, lsl r0
     4d4:	00000420 	andeq	r0, r0, r0, lsr #8
     4d8:	20000c96 	mulcs	r0, r6, ip
     4dc:	0000003e 	andeq	r0, r0, lr, lsr r0
     4e0:	40080e41 	andmi	r0, r8, r1, asr #28
     4e4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     4e8:	180e4101 	stmdane	lr, {r0, r8, lr}
     4ec:	00070d41 	andeq	r0, r7, r1, asr #26
     4f0:	0000001c 	andeq	r0, r0, ip, lsl r0
     4f4:	00000420 	andeq	r0, r0, r0, lsr #8
     4f8:	20000cd4 	ldrdcs	r0, [r0], -r4
     4fc:	00000020 	andeq	r0, r0, r0, lsr #32
     500:	40080e41 	andmi	r0, r8, r1, asr #28
     504:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     508:	100e4101 	andne	r4, lr, r1, lsl #2
     50c:	00070d41 	andeq	r0, r7, r1, asr #26
     510:	0000001c 	andeq	r0, r0, ip, lsl r0
     514:	00000420 	andeq	r0, r0, r0, lsr #8
     518:	20000cf4 	strdcs	r0, [r0], -r4
     51c:	00000044 	andeq	r0, r0, r4, asr #32
     520:	40080e41 	andmi	r0, r8, r1, asr #28
     524:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     528:	100e4101 	andne	r4, lr, r1, lsl #2
     52c:	00070d41 	andeq	r0, r7, r1, asr #26
     530:	0000001c 	andeq	r0, r0, ip, lsl r0
     534:	00000420 	andeq	r0, r0, r0, lsr #8
     538:	20000d38 	andcs	r0, r0, r8, lsr sp
     53c:	00000020 	andeq	r0, r0, r0, lsr #32
     540:	40080e41 	andmi	r0, r8, r1, asr #28
     544:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     548:	100e4101 	andne	r4, lr, r1, lsl #2
     54c:	00070d41 	andeq	r0, r7, r1, asr #26
     550:	0000001c 	andeq	r0, r0, ip, lsl r0
     554:	00000420 	andeq	r0, r0, r0, lsr #8
     558:	20000d58 	andcs	r0, r0, r8, asr sp
     55c:	0000003c 	andeq	r0, r0, ip, lsr r0
     560:	40080e41 	andmi	r0, r8, r1, asr #28
     564:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     568:	180e4101 	stmdane	lr, {r0, r8, lr}
     56c:	00070d41 	andeq	r0, r7, r1, asr #26
     570:	0000001c 	andeq	r0, r0, ip, lsl r0
     574:	00000420 	andeq	r0, r0, r0, lsr #8
     578:	20000d94 	mulcs	r0, r4, sp
     57c:	00000020 	andeq	r0, r0, r0, lsr #32
     580:	40080e41 	andmi	r0, r8, r1, asr #28
     584:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     588:	100e4101 	andne	r4, lr, r1, lsl #2
     58c:	00070d41 	andeq	r0, r7, r1, asr #26
     590:	0000001c 	andeq	r0, r0, ip, lsl r0
     594:	00000420 	andeq	r0, r0, r0, lsr #8
     598:	20000db4 			; <UNDEFINED> instruction: 0x20000db4
     59c:	00000028 	andeq	r0, r0, r8, lsr #32
     5a0:	40080e41 	andmi	r0, r8, r1, asr #28
     5a4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     5a8:	100e4101 	andne	r4, lr, r1, lsl #2
     5ac:	00070d41 	andeq	r0, r7, r1, asr #26
     5b0:	0000001c 	andeq	r0, r0, ip, lsl r0
     5b4:	00000420 	andeq	r0, r0, r0, lsr #8
     5b8:	20000ddc 	ldrdcs	r0, [r0], -ip
     5bc:	00000020 	andeq	r0, r0, r0, lsr #32
     5c0:	40080e41 	andmi	r0, r8, r1, asr #28
     5c4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     5c8:	100e4101 	andne	r4, lr, r1, lsl #2
     5cc:	00070d41 	andeq	r0, r7, r1, asr #26
     5d0:	0000001c 	andeq	r0, r0, ip, lsl r0
     5d4:	00000420 	andeq	r0, r0, r0, lsr #8
     5d8:	20000dfc 	strdcs	r0, [r0], -ip
     5dc:	00000030 	andeq	r0, r0, r0, lsr r0
     5e0:	40080e41 	andmi	r0, r8, r1, asr #28
     5e4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     5e8:	180e4101 	stmdane	lr, {r0, r8, lr}
     5ec:	00070d41 	andeq	r0, r7, r1, asr #26
     5f0:	0000001c 	andeq	r0, r0, ip, lsl r0
     5f4:	00000420 	andeq	r0, r0, r0, lsr #8
     5f8:	20000e2c 	andcs	r0, r0, ip, lsr #28
     5fc:	00000020 	andeq	r0, r0, r0, lsr #32
     600:	40080e41 	andmi	r0, r8, r1, asr #28
     604:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     608:	100e4101 	andne	r4, lr, r1, lsl #2
     60c:	00070d41 	andeq	r0, r7, r1, asr #26
     610:	0000001c 	andeq	r0, r0, ip, lsl r0
     614:	00000420 	andeq	r0, r0, r0, lsr #8
     618:	20000e4c 	andcs	r0, r0, ip, asr #28
     61c:	00000020 	andeq	r0, r0, r0, lsr #32
     620:	40080e41 	andmi	r0, r8, r1, asr #28
     624:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     628:	100e4101 	andne	r4, lr, r1, lsl #2
     62c:	00070d41 	andeq	r0, r7, r1, asr #26
     630:	0000001c 	andeq	r0, r0, ip, lsl r0
     634:	00000420 	andeq	r0, r0, r0, lsr #8
     638:	20000e6c 	andcs	r0, r0, ip, ror #28
     63c:	00000040 	andeq	r0, r0, r0, asr #32
     640:	40080e41 	andmi	r0, r8, r1, asr #28
     644:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     648:	180e4101 	stmdane	lr, {r0, r8, lr}
     64c:	00070d41 	andeq	r0, r7, r1, asr #26
     650:	0000001c 	andeq	r0, r0, ip, lsl r0
     654:	00000420 	andeq	r0, r0, r0, lsr #8
     658:	20000eac 	andcs	r0, r0, ip, lsr #29
     65c:	0000003c 	andeq	r0, r0, ip, lsr r0
     660:	40080e41 	andmi	r0, r8, r1, asr #28
     664:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     668:	180e4101 	stmdane	lr, {r0, r8, lr}
     66c:	00070d41 	andeq	r0, r7, r1, asr #26
     670:	0000001c 	andeq	r0, r0, ip, lsl r0
     674:	00000420 	andeq	r0, r0, r0, lsr #8
     678:	20000ee8 	andcs	r0, r0, r8, ror #29
     67c:	00000034 	andeq	r0, r0, r4, lsr r0
     680:	40080e41 	andmi	r0, r8, r1, asr #28
     684:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     688:	180e4101 	stmdane	lr, {r0, r8, lr}
     68c:	00070d41 	andeq	r0, r7, r1, asr #26
     690:	00000018 	andeq	r0, r0, r8, lsl r0
     694:	00000420 	andeq	r0, r0, r0, lsr #8
     698:	20000f1c 	andcs	r0, r0, ip, lsl pc
     69c:	0000001c 	andeq	r0, r0, ip, lsl r0
     6a0:	40080e41 	andmi	r0, r8, r1, asr #28
     6a4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     6a8:	070d4101 	streq	r4, [sp, -r1, lsl #2]
     6ac:	0000001c 	andeq	r0, r0, ip, lsl r0
     6b0:	00000420 	andeq	r0, r0, r0, lsr #8
     6b4:	20000f38 	andcs	r0, r0, r8, lsr pc
     6b8:	00000034 	andeq	r0, r0, r4, lsr r0
     6bc:	40080e41 	andmi	r0, r8, r1, asr #28
     6c0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     6c4:	180e4101 	stmdane	lr, {r0, r8, lr}
     6c8:	00070d41 	andeq	r0, r7, r1, asr #26
     6cc:	0000001c 	andeq	r0, r0, ip, lsl r0
     6d0:	00000420 	andeq	r0, r0, r0, lsr #8
     6d4:	20000f6c 	andcs	r0, r0, ip, ror #30
     6d8:	00000038 	andeq	r0, r0, r8, lsr r0
     6dc:	40080e41 	andmi	r0, r8, r1, asr #28
     6e0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     6e4:	180e4101 	stmdane	lr, {r0, r8, lr}
     6e8:	00070d41 	andeq	r0, r7, r1, asr #26
     6ec:	0000001c 	andeq	r0, r0, ip, lsl r0
     6f0:	00000420 	andeq	r0, r0, r0, lsr #8
     6f4:	20000fa4 	andcs	r0, r0, r4, lsr #31
     6f8:	0000003c 	andeq	r0, r0, ip, lsr r0
     6fc:	40080e41 	andmi	r0, r8, r1, asr #28
     700:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     704:	180e4101 	stmdane	lr, {r0, r8, lr}
     708:	00070d41 	andeq	r0, r7, r1, asr #26
     70c:	0000001c 	andeq	r0, r0, ip, lsl r0
     710:	00000420 	andeq	r0, r0, r0, lsr #8
     714:	20000fe0 	andcs	r0, r0, r0, ror #31
     718:	00000158 	andeq	r0, r0, r8, asr r1
     71c:	40080e41 	andmi	r0, r8, r1, asr #28
     720:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     724:	280e4101 	stmdacs	lr, {r0, r8, lr}
     728:	00070d41 	andeq	r0, r7, r1, asr #26
     72c:	0000001c 	andeq	r0, r0, ip, lsl r0
     730:	00000420 	andeq	r0, r0, r0, lsr #8
     734:	20001138 	andcs	r1, r0, r8, lsr r1
     738:	00000060 	andeq	r0, r0, r0, rrx
     73c:	40080e41 	andmi	r0, r8, r1, asr #28
     740:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     744:	180e4101 	stmdane	lr, {r0, r8, lr}
     748:	00070d41 	andeq	r0, r7, r1, asr #26
     74c:	0000001c 	andeq	r0, r0, ip, lsl r0
     750:	00000420 	andeq	r0, r0, r0, lsr #8
     754:	20001198 	mulcs	r0, r8, r1
     758:	00000020 	andeq	r0, r0, r0, lsr #32
     75c:	40080e41 	andmi	r0, r8, r1, asr #28
     760:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     764:	100e4101 	andne	r4, lr, r1, lsl #2
     768:	00070d41 	andeq	r0, r7, r1, asr #26
     76c:	0000001c 	andeq	r0, r0, ip, lsl r0
     770:	00000420 	andeq	r0, r0, r0, lsr #8
     774:	200011b8 			; <UNDEFINED> instruction: 0x200011b8
     778:	00000020 	andeq	r0, r0, r0, lsr #32
     77c:	40080e41 	andmi	r0, r8, r1, asr #28
     780:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     784:	100e4101 	andne	r4, lr, r1, lsl #2
     788:	00070d41 	andeq	r0, r7, r1, asr #26
     78c:	0000001c 	andeq	r0, r0, ip, lsl r0
     790:	00000420 	andeq	r0, r0, r0, lsr #8
     794:	200011d8 	ldrdcs	r1, [r0], -r8
     798:	0000001c 	andeq	r0, r0, ip, lsl r0
     79c:	40080e41 	andmi	r0, r8, r1, asr #28
     7a0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     7a4:	100e4101 	andne	r4, lr, r1, lsl #2
     7a8:	00070d41 	andeq	r0, r7, r1, asr #26
     7ac:	0000001c 	andeq	r0, r0, ip, lsl r0
     7b0:	00000420 	andeq	r0, r0, r0, lsr #8
     7b4:	200011f4 	strdcs	r1, [r0], -r4
     7b8:	0000003c 	andeq	r0, r0, ip, lsr r0
     7bc:	40080e41 	andmi	r0, r8, r1, asr #28
     7c0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     7c4:	180e4101 	stmdane	lr, {r0, r8, lr}
     7c8:	00070d41 	andeq	r0, r7, r1, asr #26
     7cc:	0000001c 	andeq	r0, r0, ip, lsl r0
     7d0:	00000420 	andeq	r0, r0, r0, lsr #8
     7d4:	20001230 	andcs	r1, r0, r0, lsr r2
     7d8:	0000003c 	andeq	r0, r0, ip, lsr r0
     7dc:	40080e41 	andmi	r0, r8, r1, asr #28
     7e0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     7e4:	180e4101 	stmdane	lr, {r0, r8, lr}
     7e8:	00070d41 	andeq	r0, r7, r1, asr #26
     7ec:	0000001c 	andeq	r0, r0, ip, lsl r0
     7f0:	00000420 	andeq	r0, r0, r0, lsr #8
     7f4:	2000126c 	andcs	r1, r0, ip, ror #4
     7f8:	0000003c 	andeq	r0, r0, ip, lsr r0
     7fc:	40080e41 	andmi	r0, r8, r1, asr #28
     800:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     804:	180e4101 	stmdane	lr, {r0, r8, lr}
     808:	00070d41 	andeq	r0, r7, r1, asr #26
     80c:	0000001c 	andeq	r0, r0, ip, lsl r0
     810:	00000420 	andeq	r0, r0, r0, lsr #8
     814:	200012a8 	andcs	r1, r0, r8, lsr #5
     818:	00000040 	andeq	r0, r0, r0, asr #32
     81c:	40080e41 	andmi	r0, r8, r1, asr #28
     820:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     824:	180e4101 	stmdane	lr, {r0, r8, lr}
     828:	00070d41 	andeq	r0, r7, r1, asr #26
     82c:	0000001c 	andeq	r0, r0, ip, lsl r0
     830:	00000420 	andeq	r0, r0, r0, lsr #8
     834:	200012e8 	andcs	r1, r0, r8, ror #5
     838:	0000003c 	andeq	r0, r0, ip, lsr r0
     83c:	40080e41 	andmi	r0, r8, r1, asr #28
     840:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     844:	180e4101 	stmdane	lr, {r0, r8, lr}
     848:	00070d41 	andeq	r0, r7, r1, asr #26
     84c:	0000001c 	andeq	r0, r0, ip, lsl r0
     850:	00000420 	andeq	r0, r0, r0, lsr #8
     854:	20001324 	andcs	r1, r0, r4, lsr #6
     858:	0000001c 	andeq	r0, r0, ip, lsl r0
     85c:	40080e41 	andmi	r0, r8, r1, asr #28
     860:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     864:	100e4101 	andne	r4, lr, r1, lsl #2
     868:	00070d41 	andeq	r0, r7, r1, asr #26
     86c:	0000001c 	andeq	r0, r0, ip, lsl r0
     870:	00000420 	andeq	r0, r0, r0, lsr #8
     874:	20001340 	andcs	r1, r0, r0, asr #6
     878:	00000040 	andeq	r0, r0, r0, asr #32
     87c:	40080e41 	andmi	r0, r8, r1, asr #28
     880:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     884:	100e4101 	andne	r4, lr, r1, lsl #2
     888:	00070d41 	andeq	r0, r7, r1, asr #26
     88c:	0000001c 	andeq	r0, r0, ip, lsl r0
     890:	00000420 	andeq	r0, r0, r0, lsr #8
     894:	20001380 	andcs	r1, r0, r0, lsl #7
     898:	00000040 	andeq	r0, r0, r0, asr #32
     89c:	40080e41 	andmi	r0, r8, r1, asr #28
     8a0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     8a4:	100e4101 	andne	r4, lr, r1, lsl #2
     8a8:	00070d41 	andeq	r0, r7, r1, asr #26
     8ac:	0000001c 	andeq	r0, r0, ip, lsl r0
     8b0:	00000420 	andeq	r0, r0, r0, lsr #8
     8b4:	200013c0 	andcs	r1, r0, r0, asr #7
     8b8:	00000040 	andeq	r0, r0, r0, asr #32
     8bc:	40080e41 	andmi	r0, r8, r1, asr #28
     8c0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     8c4:	100e4101 	andne	r4, lr, r1, lsl #2
     8c8:	00070d41 	andeq	r0, r7, r1, asr #26
     8cc:	0000001c 	andeq	r0, r0, ip, lsl r0
     8d0:	00000420 	andeq	r0, r0, r0, lsr #8
     8d4:	20001400 	andcs	r1, r0, r0, lsl #8
     8d8:	00000040 	andeq	r0, r0, r0, asr #32
     8dc:	40080e41 	andmi	r0, r8, r1, asr #28
     8e0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     8e4:	100e4101 	andne	r4, lr, r1, lsl #2
     8e8:	00070d41 	andeq	r0, r7, r1, asr #26
     8ec:	0000001c 	andeq	r0, r0, ip, lsl r0
     8f0:	00000420 	andeq	r0, r0, r0, lsr #8
     8f4:	20001440 	andcs	r1, r0, r0, asr #8
     8f8:	00000040 	andeq	r0, r0, r0, asr #32
     8fc:	40080e41 	andmi	r0, r8, r1, asr #28
     900:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     904:	100e4101 	andne	r4, lr, r1, lsl #2
     908:	00070d41 	andeq	r0, r7, r1, asr #26
     90c:	0000001c 	andeq	r0, r0, ip, lsl r0
     910:	00000420 	andeq	r0, r0, r0, lsr #8
     914:	20001480 	andcs	r1, r0, r0, lsl #9
     918:	00000040 	andeq	r0, r0, r0, asr #32
     91c:	40080e41 	andmi	r0, r8, r1, asr #28
     920:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     924:	100e4101 	andne	r4, lr, r1, lsl #2
     928:	00070d41 	andeq	r0, r7, r1, asr #26
     92c:	0000001c 	andeq	r0, r0, ip, lsl r0
     930:	00000420 	andeq	r0, r0, r0, lsr #8
     934:	200014c0 	andcs	r1, r0, r0, asr #9
     938:	00000040 	andeq	r0, r0, r0, asr #32
     93c:	40080e41 	andmi	r0, r8, r1, asr #28
     940:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     944:	100e4101 	andne	r4, lr, r1, lsl #2
     948:	00070d41 	andeq	r0, r7, r1, asr #26
     94c:	0000001c 	andeq	r0, r0, ip, lsl r0
     950:	00000420 	andeq	r0, r0, r0, lsr #8
     954:	20001500 	andcs	r1, r0, r0, lsl #10
     958:	00000040 	andeq	r0, r0, r0, asr #32
     95c:	40080e41 	andmi	r0, r8, r1, asr #28
     960:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     964:	100e4101 	andne	r4, lr, r1, lsl #2
     968:	00070d41 	andeq	r0, r7, r1, asr #26
     96c:	0000001c 	andeq	r0, r0, ip, lsl r0
     970:	00000420 	andeq	r0, r0, r0, lsr #8
     974:	20001540 	andcs	r1, r0, r0, asr #10
     978:	00000040 	andeq	r0, r0, r0, asr #32
     97c:	40080e41 	andmi	r0, r8, r1, asr #28
     980:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     984:	100e4101 	andne	r4, lr, r1, lsl #2
     988:	00070d41 	andeq	r0, r7, r1, asr #26
     98c:	0000001c 	andeq	r0, r0, ip, lsl r0
     990:	00000420 	andeq	r0, r0, r0, lsr #8
     994:	20001580 	andcs	r1, r0, r0, lsl #11
     998:	00000040 	andeq	r0, r0, r0, asr #32
     99c:	40080e41 	andmi	r0, r8, r1, asr #28
     9a0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     9a4:	100e4101 	andne	r4, lr, r1, lsl #2
     9a8:	00070d41 	andeq	r0, r7, r1, asr #26
     9ac:	0000001c 	andeq	r0, r0, ip, lsl r0
     9b0:	00000420 	andeq	r0, r0, r0, lsr #8
     9b4:	200015c0 	andcs	r1, r0, r0, asr #11
     9b8:	00000040 	andeq	r0, r0, r0, asr #32
     9bc:	40080e41 	andmi	r0, r8, r1, asr #28
     9c0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     9c4:	100e4101 	andne	r4, lr, r1, lsl #2
     9c8:	00070d41 	andeq	r0, r7, r1, asr #26
     9cc:	0000001c 	andeq	r0, r0, ip, lsl r0
     9d0:	00000420 	andeq	r0, r0, r0, lsr #8
     9d4:	20001600 	andcs	r1, r0, r0, lsl #12
     9d8:	00000040 	andeq	r0, r0, r0, asr #32
     9dc:	40080e41 	andmi	r0, r8, r1, asr #28
     9e0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     9e4:	100e4101 	andne	r4, lr, r1, lsl #2
     9e8:	00070d41 	andeq	r0, r7, r1, asr #26
     9ec:	0000001c 	andeq	r0, r0, ip, lsl r0
     9f0:	00000420 	andeq	r0, r0, r0, lsr #8
     9f4:	20001640 	andcs	r1, r0, r0, asr #12
     9f8:	00000040 	andeq	r0, r0, r0, asr #32
     9fc:	40080e41 	andmi	r0, r8, r1, asr #28
     a00:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     a04:	100e4101 	andne	r4, lr, r1, lsl #2
     a08:	00070d41 	andeq	r0, r7, r1, asr #26
     a0c:	0000001c 	andeq	r0, r0, ip, lsl r0
     a10:	00000420 	andeq	r0, r0, r0, lsr #8
     a14:	20001680 	andcs	r1, r0, r0, lsl #13
     a18:	00000040 	andeq	r0, r0, r0, asr #32
     a1c:	40080e41 	andmi	r0, r8, r1, asr #28
     a20:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     a24:	100e4101 	andne	r4, lr, r1, lsl #2
     a28:	00070d41 	andeq	r0, r7, r1, asr #26
     a2c:	0000001c 	andeq	r0, r0, ip, lsl r0
     a30:	00000420 	andeq	r0, r0, r0, lsr #8
     a34:	200016c0 	andcs	r1, r0, r0, asr #13
     a38:	00000040 	andeq	r0, r0, r0, asr #32
     a3c:	40080e41 	andmi	r0, r8, r1, asr #28
     a40:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     a44:	100e4101 	andne	r4, lr, r1, lsl #2
     a48:	00070d41 	andeq	r0, r7, r1, asr #26
     a4c:	0000001c 	andeq	r0, r0, ip, lsl r0
     a50:	00000420 	andeq	r0, r0, r0, lsr #8
     a54:	20001700 	andcs	r1, r0, r0, lsl #14
     a58:	0000003c 	andeq	r0, r0, ip, lsr r0
     a5c:	40080e41 	andmi	r0, r8, r1, asr #28
     a60:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     a64:	100e4101 	andne	r4, lr, r1, lsl #2
     a68:	00070d41 	andeq	r0, r7, r1, asr #26
     a6c:	0000001c 	andeq	r0, r0, ip, lsl r0
     a70:	00000420 	andeq	r0, r0, r0, lsr #8
     a74:	2000173c 	andcs	r1, r0, ip, lsr r7
     a78:	00000050 	andeq	r0, r0, r0, asr r0
     a7c:	40080e41 	andmi	r0, r8, r1, asr #28
     a80:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     a84:	100e4101 	andne	r4, lr, r1, lsl #2
     a88:	00070d41 	andeq	r0, r7, r1, asr #26
     a8c:	0000001c 	andeq	r0, r0, ip, lsl r0
     a90:	00000420 	andeq	r0, r0, r0, lsr #8
     a94:	2000178c 	andcs	r1, r0, ip, lsl #15
     a98:	00000084 	andeq	r0, r0, r4, lsl #1
     a9c:	40080e41 	andmi	r0, r8, r1, asr #28
     aa0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     aa4:	200e4101 	andcs	r4, lr, r1, lsl #2
     aa8:	00070d41 	andeq	r0, r7, r1, asr #26
     aac:	00000018 	andeq	r0, r0, r8, lsl r0
     ab0:	00000420 	andeq	r0, r0, r0, lsr #8
     ab4:	20001810 	andcs	r1, r0, r0, lsl r8
     ab8:	0000001c 	andeq	r0, r0, ip, lsl r0
     abc:	40080e41 	andmi	r0, r8, r1, asr #28
     ac0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     ac4:	070d4101 	streq	r4, [sp, -r1, lsl #2]
     ac8:	0000001c 	andeq	r0, r0, ip, lsl r0
     acc:	00000420 	andeq	r0, r0, r0, lsr #8
     ad0:	2000182c 	andcs	r1, r0, ip, lsr #16
     ad4:	00000044 	andeq	r0, r0, r4, asr #32
     ad8:	40080e41 	andmi	r0, r8, r1, asr #28
     adc:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     ae0:	180e4101 	stmdane	lr, {r0, r8, lr}
     ae4:	00070d41 	andeq	r0, r7, r1, asr #26
     ae8:	0000001c 	andeq	r0, r0, ip, lsl r0
     aec:	00000420 	andeq	r0, r0, r0, lsr #8
     af0:	20001870 	andcs	r1, r0, r0, ror r8
     af4:	00000020 	andeq	r0, r0, r0, lsr #32
     af8:	40080e41 	andmi	r0, r8, r1, asr #28
     afc:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     b00:	100e4101 	andne	r4, lr, r1, lsl #2
     b04:	00070d41 	andeq	r0, r7, r1, asr #26
     b08:	0000000c 	andeq	r0, r0, ip
     b0c:	00000420 	andeq	r0, r0, r0, lsr #8
     b10:	20000000 	andcs	r0, r0, r0
     b14:	0000000c 	andeq	r0, r0, ip
     b18:	0000001c 	andeq	r0, r0, ip, lsl r0
     b1c:	00000420 	andeq	r0, r0, r0, lsr #8
     b20:	20001890 	mulcs	r0, r0, r8
     b24:	00000068 	andeq	r0, r0, r8, rrx
     b28:	40080e41 	andmi	r0, r8, r1, asr #28
     b2c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     b30:	100e4101 	andne	r4, lr, r1, lsl #2
     b34:	00070d41 	andeq	r0, r7, r1, asr #26
     b38:	00000018 	andeq	r0, r0, r8, lsl r0
     b3c:	00000420 	andeq	r0, r0, r0, lsr #8
     b40:	200018f8 	strdcs	r1, [r0], -r8
     b44:	00000018 	andeq	r0, r0, r8, lsl r0
     b48:	40080e41 	andmi	r0, r8, r1, asr #28
     b4c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     b50:	070d4101 	streq	r4, [sp, -r1, lsl #2]
     b54:	0000001c 	andeq	r0, r0, ip, lsl r0
     b58:	00000420 	andeq	r0, r0, r0, lsr #8
     b5c:	20001910 	andcs	r1, r0, r0, lsl r9
     b60:	0000002c 	andeq	r0, r0, ip, lsr #32
     b64:	40080e41 	andmi	r0, r8, r1, asr #28
     b68:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     b6c:	100e4101 	andne	r4, lr, r1, lsl #2
     b70:	00070d41 	andeq	r0, r7, r1, asr #26
     b74:	00000028 	andeq	r0, r0, r8, lsr #32
     b78:	00000420 	andeq	r0, r0, r0, lsr #8
     b7c:	2000193c 	andcs	r1, r0, ip, lsr r9
     b80:	000001a8 	andeq	r0, r0, r8, lsr #3
     b84:	40140e41 	andsmi	r0, r4, r1, asr #28
     b88:	85400584 	strbhi	r0, [r0, #-1412]	; 0xfffffa7c
     b8c:	03864004 	orreq	r4, r6, #4
     b90:	40028740 	andmi	r8, r2, r0, asr #14
     b94:	0e41018e 	dvfeqd	f0, f1, #0.5
     b98:	0d4101d0 	stfeqe	f0, [r1, #-832]	; 0xfffffcc0
     b9c:	00000007 	andeq	r0, r0, r7
     ba0:	0000000c 	andeq	r0, r0, ip
     ba4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     ba8:	7c020001 	stcvc	0, cr0, [r2], {1}
     bac:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     bb0:	0000001c 	andeq	r0, r0, ip, lsl r0
     bb4:	00000ba0 	andeq	r0, r0, r0, lsr #23
     bb8:	20001ae4 	andcs	r1, r0, r4, ror #21
     bbc:	00000170 	andeq	r0, r0, r0, ror r1
     bc0:	40080e41 	andmi	r0, r8, r1, asr #28
     bc4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     bc8:	100e4101 	andne	r4, lr, r1, lsl #2
     bcc:	00070d41 	andeq	r0, r7, r1, asr #26
     bd0:	0000001c 	andeq	r0, r0, ip, lsl r0
     bd4:	00000ba0 	andeq	r0, r0, r0, lsr #23
     bd8:	20001c54 	andcs	r1, r0, r4, asr ip
     bdc:	00000118 	andeq	r0, r0, r8, lsl r1
     be0:	40080e41 	andmi	r0, r8, r1, asr #28
     be4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     be8:	200e4101 	andcs	r4, lr, r1, lsl #2
     bec:	00070d41 	andeq	r0, r7, r1, asr #26
     bf0:	0000001c 	andeq	r0, r0, ip, lsl r0
     bf4:	00000ba0 	andeq	r0, r0, r0, lsr #23
     bf8:	20001d6c 	andcs	r1, r0, ip, ror #26
     bfc:	00000034 	andeq	r0, r0, r4, lsr r0
     c00:	40080e41 	andmi	r0, r8, r1, asr #28
     c04:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     c08:	100e4101 	andne	r4, lr, r1, lsl #2
     c0c:	00070d41 	andeq	r0, r7, r1, asr #26
     c10:	0000001c 	andeq	r0, r0, ip, lsl r0
     c14:	00000ba0 	andeq	r0, r0, r0, lsr #23
     c18:	20001da0 	andcs	r1, r0, r0, lsr #27
     c1c:	00000046 	andeq	r0, r0, r6, asr #32
     c20:	40080e41 	andmi	r0, r8, r1, asr #28
     c24:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     c28:	180e4101 	stmdane	lr, {r0, r8, lr}
     c2c:	00070d41 	andeq	r0, r7, r1, asr #26
     c30:	0000001c 	andeq	r0, r0, ip, lsl r0
     c34:	00000ba0 	andeq	r0, r0, r0, lsr #23
     c38:	20001de6 	andcs	r1, r0, r6, ror #27
     c3c:	00000042 	andeq	r0, r0, r2, asr #32
     c40:	40080e41 	andmi	r0, r8, r1, asr #28
     c44:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     c48:	180e4101 	stmdane	lr, {r0, r8, lr}
     c4c:	00070d41 	andeq	r0, r7, r1, asr #26
     c50:	0000001c 	andeq	r0, r0, ip, lsl r0
     c54:	00000ba0 	andeq	r0, r0, r0, lsr #23
     c58:	20001e28 	andcs	r1, r0, r8, lsr #28
     c5c:	00000016 	andeq	r0, r0, r6, lsl r0
     c60:	40080e41 	andmi	r0, r8, r1, asr #28
     c64:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     c68:	100e4101 	andne	r4, lr, r1, lsl #2
     c6c:	00070d41 	andeq	r0, r7, r1, asr #26
     c70:	0000001c 	andeq	r0, r0, ip, lsl r0
     c74:	00000ba0 	andeq	r0, r0, r0, lsr #23
     c78:	20001e3e 	andcs	r1, r0, lr, lsr lr
     c7c:	00000042 	andeq	r0, r0, r2, asr #32
     c80:	40080e41 	andmi	r0, r8, r1, asr #28
     c84:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     c88:	180e4101 	stmdane	lr, {r0, r8, lr}
     c8c:	00070d41 	andeq	r0, r7, r1, asr #26
     c90:	0000001c 	andeq	r0, r0, ip, lsl r0
     c94:	00000ba0 	andeq	r0, r0, r0, lsr #23
     c98:	20001e80 	andcs	r1, r0, r0, lsl #29
     c9c:	00000016 	andeq	r0, r0, r6, lsl r0
     ca0:	40080e41 	andmi	r0, r8, r1, asr #28
     ca4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     ca8:	100e4101 	andne	r4, lr, r1, lsl #2
     cac:	00070d41 	andeq	r0, r7, r1, asr #26
     cb0:	0000001c 	andeq	r0, r0, ip, lsl r0
     cb4:	00000ba0 	andeq	r0, r0, r0, lsr #23
     cb8:	20001e96 	mulcs	r0, r6, lr
     cbc:	0000001e 	andeq	r0, r0, lr, lsl r0
     cc0:	40080e41 	andmi	r0, r8, r1, asr #28
     cc4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     cc8:	100e4101 	andne	r4, lr, r1, lsl #2
     ccc:	00070d41 	andeq	r0, r7, r1, asr #26
     cd0:	0000001c 	andeq	r0, r0, ip, lsl r0
     cd4:	00000ba0 	andeq	r0, r0, r0, lsr #23
     cd8:	20001eb4 			; <UNDEFINED> instruction: 0x20001eb4
     cdc:	0000001e 	andeq	r0, r0, lr, lsl r0
     ce0:	40080e41 	andmi	r0, r8, r1, asr #28
     ce4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     ce8:	100e4101 	andne	r4, lr, r1, lsl #2
     cec:	00070d41 	andeq	r0, r7, r1, asr #26
     cf0:	0000001c 	andeq	r0, r0, ip, lsl r0
     cf4:	00000ba0 	andeq	r0, r0, r0, lsr #23
     cf8:	20001ed2 	ldrdcs	r1, [r0], -r2
     cfc:	0000003a 	andeq	r0, r0, sl, lsr r0
     d00:	40080e41 	andmi	r0, r8, r1, asr #28
     d04:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     d08:	100e4101 	andne	r4, lr, r1, lsl #2
     d0c:	00070d41 	andeq	r0, r7, r1, asr #26
     d10:	0000001c 	andeq	r0, r0, ip, lsl r0
     d14:	00000ba0 	andeq	r0, r0, r0, lsr #23
     d18:	20001f0c 	andcs	r1, r0, ip, lsl #30
     d1c:	0000001e 	andeq	r0, r0, lr, lsl r0
     d20:	40080e41 	andmi	r0, r8, r1, asr #28
     d24:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     d28:	100e4101 	andne	r4, lr, r1, lsl #2
     d2c:	00070d41 	andeq	r0, r7, r1, asr #26
     d30:	0000001c 	andeq	r0, r0, ip, lsl r0
     d34:	00000ba0 	andeq	r0, r0, r0, lsr #23
     d38:	20001f2a 	andcs	r1, r0, sl, lsr #30
     d3c:	00000024 	andeq	r0, r0, r4, lsr #32
     d40:	40080e41 	andmi	r0, r8, r1, asr #28
     d44:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     d48:	100e4101 	andne	r4, lr, r1, lsl #2
     d4c:	00070d41 	andeq	r0, r7, r1, asr #26
     d50:	0000001c 	andeq	r0, r0, ip, lsl r0
     d54:	00000ba0 	andeq	r0, r0, r0, lsr #23
     d58:	20001f4e 	andcs	r1, r0, lr, asr #30
     d5c:	000000a4 	andeq	r0, r0, r4, lsr #1
     d60:	40080e41 	andmi	r0, r8, r1, asr #28
     d64:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     d68:	180e4101 	stmdane	lr, {r0, r8, lr}
     d6c:	00070d41 	andeq	r0, r7, r1, asr #26
     d70:	0000000c 	andeq	r0, r0, ip
     d74:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     d78:	7c020001 	stcvc	0, cr0, [r2], {1}
     d7c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     d80:	0000001c 	andeq	r0, r0, ip, lsl r0
     d84:	00000d70 	andeq	r0, r0, r0, ror sp
     d88:	20001ff4 	strdcs	r1, [r0], -r4
     d8c:	00000024 	andeq	r0, r0, r4, lsr #32
     d90:	40080e41 	andmi	r0, r8, r1, asr #28
     d94:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     d98:	100e4101 	andne	r4, lr, r1, lsl #2
     d9c:	00070d41 	andeq	r0, r7, r1, asr #26
     da0:	00000024 	andeq	r0, r0, r4, lsr #32
     da4:	00000d70 	andeq	r0, r0, r0, ror sp
     da8:	20002018 	andcs	r2, r0, r8, lsl r0
     dac:	000000f8 	strdeq	r0, [r0], -r8
     db0:	40100e41 	andsmi	r0, r0, r1, asr #28
     db4:	85400484 	strbhi	r0, [r0, #-1156]	; 0xfffffb7c
     db8:	02874003 	addeq	r4, r7, #3
     dbc:	41018e40 	tstmi	r1, r0, asr #28
     dc0:	0d41200e 	stcleq	0, cr2, [r1, #-56]	; 0xffffffc8
     dc4:	00000007 	andeq	r0, r0, r7
     dc8:	0000001c 	andeq	r0, r0, ip, lsl r0
     dcc:	00000d70 	andeq	r0, r0, r0, ror sp
     dd0:	20002110 	andcs	r2, r0, r0, lsl r1
     dd4:	0000002c 	andeq	r0, r0, ip, lsr #32
     dd8:	40080e41 	andmi	r0, r8, r1, asr #28
     ddc:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     de0:	100e4101 	andne	r4, lr, r1, lsl #2
     de4:	00070d41 	andeq	r0, r7, r1, asr #26
     de8:	0000001c 	andeq	r0, r0, ip, lsl r0
     dec:	00000d70 	andeq	r0, r0, r0, ror sp
     df0:	2000213c 	andcs	r2, r0, ip, lsr r1
     df4:	00000048 	andeq	r0, r0, r8, asr #32
     df8:	40080e41 	andmi	r0, r8, r1, asr #28
     dfc:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     e00:	100e4101 	andne	r4, lr, r1, lsl #2
     e04:	00070d41 	andeq	r0, r7, r1, asr #26
     e08:	0000001c 	andeq	r0, r0, ip, lsl r0
     e0c:	00000d70 	andeq	r0, r0, r0, ror sp
     e10:	20002184 	andcs	r2, r0, r4, lsl #3
     e14:	00000034 	andeq	r0, r0, r4, lsr r0
     e18:	40080e41 	andmi	r0, r8, r1, asr #28
     e1c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     e20:	100e4101 	andne	r4, lr, r1, lsl #2
     e24:	00070d41 	andeq	r0, r7, r1, asr #26
     e28:	0000000c 	andeq	r0, r0, ip
     e2c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     e30:	7c020001 	stcvc	0, cr0, [r2], {1}
     e34:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     e38:	00000020 	andeq	r0, r0, r0, lsr #32
     e3c:	00000e28 	andeq	r0, r0, r8, lsr #28
     e40:	200021b8 			; <UNDEFINED> instruction: 0x200021b8
     e44:	00000098 	muleq	r0, r8, r0
     e48:	400c0e41 	andmi	r0, ip, r1, asr #28
     e4c:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
     e50:	018e4002 	orreq	r4, lr, r2
     e54:	41180e41 	tstmi	r8, r1, asr #28
     e58:	0000070d 	andeq	r0, r0, sp, lsl #14
     e5c:	00000020 	andeq	r0, r0, r0, lsr #32
     e60:	00000e28 	andeq	r0, r0, r8, lsr #28
     e64:	20002250 	andcs	r2, r0, r0, asr r2
     e68:	00000134 	andeq	r0, r0, r4, lsr r1
     e6c:	400c0e41 	andmi	r0, ip, r1, asr #28
     e70:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
     e74:	018e4002 	orreq	r4, lr, r2
     e78:	41300e41 	teqmi	r0, r1, asr #28
     e7c:	0000070d 	andeq	r0, r0, sp, lsl #14
     e80:	0000001c 	andeq	r0, r0, ip, lsl r0
     e84:	00000e28 	andeq	r0, r0, r8, lsr #28
     e88:	20002384 	andcs	r2, r0, r4, lsl #7
     e8c:	00000048 	andeq	r0, r0, r8, asr #32
     e90:	40080e41 	andmi	r0, r8, r1, asr #28
     e94:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     e98:	100e4101 	andne	r4, lr, r1, lsl #2
     e9c:	00070d41 	andeq	r0, r7, r1, asr #26
     ea0:	0000001c 	andeq	r0, r0, ip, lsl r0
     ea4:	00000e28 	andeq	r0, r0, r8, lsr #28
     ea8:	200023cc 	andcs	r2, r0, ip, asr #7
     eac:	0000003a 	andeq	r0, r0, sl, lsr r0
     eb0:	40080e41 	andmi	r0, r8, r1, asr #28
     eb4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     eb8:	100e4101 	andne	r4, lr, r1, lsl #2
     ebc:	00070d41 	andeq	r0, r7, r1, asr #26
     ec0:	00000024 	andeq	r0, r0, r4, lsr #32
     ec4:	00000e28 	andeq	r0, r0, r8, lsr #28
     ec8:	20002406 	andcs	r2, r0, r6, lsl #8
     ecc:	000000e4 	andeq	r0, r0, r4, ror #1
     ed0:	40100e41 	andsmi	r0, r0, r1, asr #28
     ed4:	85400484 	strbhi	r0, [r0, #-1156]	; 0xfffffb7c
     ed8:	02874003 	addeq	r4, r7, #3
     edc:	41018e40 	tstmi	r1, r0, asr #28
     ee0:	0d41280e 	stcleq	8, cr2, [r1, #-56]	; 0xffffffc8
     ee4:	00000007 	andeq	r0, r0, r7
     ee8:	0000001c 	andeq	r0, r0, ip, lsl r0
     eec:	00000e28 	andeq	r0, r0, r8, lsr #28
     ef0:	200024ea 	andcs	r2, r0, sl, ror #9
     ef4:	00000026 	andeq	r0, r0, r6, lsr #32
     ef8:	40080e41 	andmi	r0, r8, r1, asr #28
     efc:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     f00:	100e4101 	andne	r4, lr, r1, lsl #2
     f04:	00070d41 	andeq	r0, r7, r1, asr #26
     f08:	0000001c 	andeq	r0, r0, ip, lsl r0
     f0c:	00000e28 	andeq	r0, r0, r8, lsr #28
     f10:	20002510 	andcs	r2, r0, r0, lsl r5
     f14:	00000028 	andeq	r0, r0, r8, lsr #32
     f18:	40080e41 	andmi	r0, r8, r1, asr #28
     f1c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     f20:	100e4101 	andne	r4, lr, r1, lsl #2
     f24:	00070d41 	andeq	r0, r7, r1, asr #26
     f28:	0000001c 	andeq	r0, r0, ip, lsl r0
     f2c:	00000e28 	andeq	r0, r0, r8, lsr #28
     f30:	20002538 	andcs	r2, r0, r8, lsr r5
     f34:	0000007c 	andeq	r0, r0, ip, ror r0
     f38:	40080e41 	andmi	r0, r8, r1, asr #28
     f3c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     f40:	100e4101 	andne	r4, lr, r1, lsl #2
     f44:	00070d41 	andeq	r0, r7, r1, asr #26
     f48:	0000000c 	andeq	r0, r0, ip
     f4c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     f50:	7c010001 	stcvc	0, cr0, [r1], {1}
     f54:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     f58:	0000000c 	andeq	r0, r0, ip
     f5c:	00000f48 	andeq	r0, r0, r8, asr #30
     f60:	200025b5 			; <UNDEFINED> instruction: 0x200025b5
     f64:	0000010a 	andeq	r0, r0, sl, lsl #2
     f68:	0000000c 	andeq	r0, r0, ip
     f6c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     f70:	7c020001 	stcvc	0, cr0, [r2], {1}
     f74:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     f78:	00000018 	andeq	r0, r0, r8, lsl r0
     f7c:	00000f68 	andeq	r0, r0, r8, ror #30
     f80:	200026cc 	andcs	r2, r0, ip, asr #13
     f84:	0000003c 	andeq	r0, r0, ip, lsr r0
     f88:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
     f8c:	86038504 	strhi	r8, [r3], -r4, lsl #10
     f90:	00018e02 	andeq	r8, r1, r2, lsl #28
     f94:	0000000c 	andeq	r0, r0, ip
     f98:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     f9c:	7c020001 	stcvc	0, cr0, [r2], {1}
     fa0:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     fa4:	00000028 	andeq	r0, r0, r8, lsr #32
     fa8:	00000f94 	muleq	r0, r4, pc	; <UNPREDICTABLE>
     fac:	20002708 	andcs	r2, r0, r8, lsl #14
     fb0:	00000690 	muleq	r0, r0, r6
     fb4:	83180e41 	tsthi	r8, #1040	; 0x410
     fb8:	85058406 	strhi	r8, [r5, #-1030]	; 0xfffffbfa
     fbc:	87038604 	strhi	r8, [r3, -r4, lsl #12]
     fc0:	47018e02 	strmi	r8, [r1, -r2, lsl #28]
     fc4:	0a88280e 	beq	fe20b004 <_global_impure_ptr+0xde205fe0>
     fc8:	088a0989 	stmeq	sl, {r0, r3, r7, r8, fp}
     fcc:	0000078b 	andeq	r0, r0, fp, lsl #15
     fd0:	0000000c 	andeq	r0, r0, ip
     fd4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     fd8:	7c020001 	stcvc	0, cr0, [r2], {1}
     fdc:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     fe0:	00000018 	andeq	r0, r0, r8, lsl r0
     fe4:	00000fd0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     fe8:	20002d98 	mulcs	r0, r8, sp
     fec:	0000006c 	andeq	r0, r0, ip, rrx
     ff0:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
     ff4:	8e028503 	cfsh32hi	mvfx8, mvfx2, #3
     ff8:	00000001 	andeq	r0, r0, r1
     ffc:	0000000c 	andeq	r0, r0, ip
    1000:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    1004:	7c020001 	stcvc	0, cr0, [r2], {1}
    1008:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    100c:	00000014 	andeq	r0, r0, r4, lsl r0
    1010:	00000ffc 	strdeq	r0, [r0], -ip
    1014:	20002e04 	andcs	r2, r0, r4, lsl #28
    1018:	00000064 	andeq	r0, r0, r4, rrx
    101c:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
    1020:	00018e02 	andeq	r8, r1, r2, lsl #28
    1024:	0000000c 	andeq	r0, r0, ip
    1028:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    102c:	7c020001 	stcvc	0, cr0, [r2], {1}
    1030:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    1034:	00000024 	andeq	r0, r0, r4, lsr #32
    1038:	00001024 	andeq	r1, r0, r4, lsr #32
    103c:	20002f20 	andcs	r2, r0, r0, lsr #30
    1040:	00000078 	andeq	r0, r0, r8, ror r0
    1044:	84140e41 	ldrhi	r0, [r4], #-3649	; 0xfffff1bf
    1048:	86048505 	strhi	r8, [r4], -r5, lsl #10
    104c:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
    1050:	200e4501 	andcs	r4, lr, r1, lsl #10
    1054:	07890888 	streq	r0, [r9, r8, lsl #17]
    1058:	0000068a 	andeq	r0, r0, sl, lsl #13
    105c:	0000000c 	andeq	r0, r0, ip
    1060:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    1064:	7c020001 	stcvc	0, cr0, [r2], {1}
    1068:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    106c:	00000024 	andeq	r0, r0, r4, lsr #32
    1070:	0000105c 	andeq	r1, r0, ip, asr r0
    1074:	20002f98 	mulcs	r0, r8, pc	; <UNPREDICTABLE>
    1078:	000000c8 	andeq	r0, r0, r8, asr #1
    107c:	84140e41 	ldrhi	r0, [r4], #-3649	; 0xfffff1bf
    1080:	86048505 	strhi	r8, [r4], -r5, lsl #10
    1084:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
    1088:	200e4501 	andcs	r4, lr, r1, lsl #10
    108c:	07890888 	streq	r0, [r9, r8, lsl #17]
    1090:	0000068a 	andeq	r0, r0, sl, lsl #13
    1094:	0000000c 	andeq	r0, r0, ip
    1098:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    109c:	7c020001 	stcvc	0, cr0, [r2], {1}
    10a0:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    10a4:	00000024 	andeq	r0, r0, r4, lsr #32
    10a8:	00001094 	muleq	r0, r4, r0
    10ac:	20003060 	andcs	r3, r0, r0, rrx
    10b0:	000000d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    10b4:	84140e41 	ldrhi	r0, [r4], #-3649	; 0xfffff1bf
    10b8:	86048505 	strhi	r8, [r4], -r5, lsl #10
    10bc:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
    10c0:	200e4501 	andcs	r4, lr, r1, lsl #10
    10c4:	07890888 	streq	r0, [r9, r8, lsl #17]
    10c8:	0000068a 	andeq	r0, r0, sl, lsl #13
    10cc:	0000000c 	andeq	r0, r0, ip
    10d0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    10d4:	7c020001 	stcvc	0, cr0, [r2], {1}
    10d8:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    10dc:	00000024 	andeq	r0, r0, r4, lsr #32
    10e0:	000010cc 	andeq	r1, r0, ip, asr #1
    10e4:	200042fc 	strdcs	r4, [r0], -ip
    10e8:	00000128 	andeq	r0, r0, r8, lsr #2
    10ec:	84140e42 	ldrhi	r0, [r4], #-3650	; 0xfffff1be
    10f0:	86048505 	strhi	r8, [r4], -r5, lsl #10
    10f4:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
    10f8:	200e4901 	andcs	r4, lr, r1, lsl #18
    10fc:	07890888 	streq	r0, [r9, r8, lsl #17]
    1100:	0000068a 	andeq	r0, r0, sl, lsl #13
    1104:	0000000c 	andeq	r0, r0, ip
    1108:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    110c:	7c020001 	stcvc	0, cr0, [r2], {1}
    1110:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    1114:	00000024 	andeq	r0, r0, r4, lsr #32
    1118:	00001104 	andeq	r1, r0, r4, lsl #2
    111c:	20004424 	andcs	r4, r0, r4, lsr #8
    1120:	00000118 	andeq	r0, r0, r8, lsl r1
    1124:	84140e41 	ldrhi	r0, [r4], #-3649	; 0xfffff1bf
    1128:	86048505 	strhi	r8, [r4], -r5, lsl #10
    112c:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
    1130:	1c0e4301 	stcne	3, cr4, [lr], {1}
    1134:	06890788 	streq	r0, [r9], r8, lsl #15
    1138:	00500e41 	subseq	r0, r0, r1, asr #28
    113c:	0000000c 	andeq	r0, r0, ip
    1140:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    1144:	7c020001 	stcvc	0, cr0, [r2], {1}
    1148:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    114c:	00000024 	andeq	r0, r0, r4, lsr #32
    1150:	0000113c 	andeq	r1, r0, ip, lsr r1
    1154:	2000453c 	andcs	r4, r0, ip, lsr r5
    1158:	00000124 	andeq	r0, r0, r4, lsr #2
    115c:	84140e41 	ldrhi	r0, [r4], #-3649	; 0xfffff1bf
    1160:	86048505 	strhi	r8, [r4], -r5, lsl #10
    1164:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
    1168:	1c0e4301 	stcne	3, cr4, [lr], {1}
    116c:	06890788 	streq	r0, [r9], r8, lsl #15
    1170:	00280e42 	eoreq	r0, r8, r2, asr #28
    1174:	0000000c 	andeq	r0, r0, ip
    1178:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    117c:	7c020001 	stcvc	0, cr0, [r2], {1}
    1180:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    1184:	0000000c 	andeq	r0, r0, ip
    1188:	00001174 	andeq	r1, r0, r4, ror r1
    118c:	20004660 	andcs	r4, r0, r0, ror #12
    1190:	00000004 	andeq	r0, r0, r4
    1194:	0000000c 	andeq	r0, r0, ip
    1198:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    119c:	7c020001 	stcvc	0, cr0, [r2], {1}
    11a0:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    11a4:	0000000c 	andeq	r0, r0, ip
    11a8:	00001194 	muleq	r0, r4, r1
    11ac:	20004664 	andcs	r4, r0, r4, ror #12
    11b0:	0000000c 	andeq	r0, r0, ip
    11b4:	0000000c 	andeq	r0, r0, ip
    11b8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    11bc:	7c020001 	stcvc	0, cr0, [r2], {1}
    11c0:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    11c4:	00000028 	andeq	r0, r0, r8, lsr #32
    11c8:	000011b4 			; <UNDEFINED> instruction: 0x000011b4
    11cc:	20004670 	andcs	r4, r0, r0, ror r6
    11d0:	000003ac 	andeq	r0, r0, ip, lsr #7
    11d4:	84140e41 	ldrhi	r0, [r4], #-3649	; 0xfffff1bf
    11d8:	86048505 	strhi	r8, [r4], -r5, lsl #10
    11dc:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
    11e0:	200e4401 	andcs	r4, lr, r1, lsl #8
    11e4:	07890888 	streq	r0, [r9, r8, lsl #17]
    11e8:	0e42068a 	cdpeq	6, 4, cr0, cr2, cr10, {4}
    11ec:	00000038 	andeq	r0, r0, r8, lsr r0
    11f0:	0000000c 	andeq	r0, r0, ip
    11f4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    11f8:	7c020001 	stcvc	0, cr0, [r2], {1}
    11fc:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    1200:	00000024 	andeq	r0, r0, r4, lsr #32
    1204:	000011f0 	strdeq	r1, [r0], -r0
    1208:	20003130 	andcs	r3, r0, r0, lsr r1
    120c:	00000638 	andeq	r0, r0, r8, lsr r6
    1210:	84140e41 	ldrhi	r0, [r4], #-3649	; 0xfffff1bf
    1214:	86048505 	strhi	r8, [r4], -r5, lsl #10
    1218:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
    121c:	200e4601 	andcs	r4, lr, r1, lsl #12
    1220:	07890888 	streq	r0, [r9, r8, lsl #17]
    1224:	0000068a 	andeq	r0, r0, sl, lsl #13
    1228:	0000000c 	andeq	r0, r0, ip
    122c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    1230:	7c020001 	stcvc	0, cr0, [r2], {1}
    1234:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    1238:	00000028 	andeq	r0, r0, r8, lsr #32
    123c:	00001228 	andeq	r1, r0, r8, lsr #4
    1240:	20003768 	andcs	r3, r0, r8, ror #14
    1244:	00000604 	andeq	r0, r0, r4, lsl #12
    1248:	84140e41 	ldrhi	r0, [r4], #-3649	; 0xfffff1bf
    124c:	86048505 	strhi	r8, [r4], -r5, lsl #10
    1250:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
    1254:	240e4501 	strcs	r4, [lr], #-1281	; 0xfffffaff
    1258:	08890988 	stmeq	r9, {r3, r7, r8, fp}
    125c:	068b078a 	streq	r0, [fp], sl, lsl #15
    1260:	00380e45 	eorseq	r0, r8, r5, asr #28
    1264:	0000000c 	andeq	r0, r0, ip
    1268:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    126c:	7c020001 	stcvc	0, cr0, [r2], {1}
    1270:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    1274:	00000028 	andeq	r0, r0, r8, lsr #32
    1278:	00001264 	andeq	r1, r0, r4, ror #4
    127c:	20003d6c 	andcs	r3, r0, ip, ror #26
    1280:	000004e4 	andeq	r0, r0, r4, ror #9
    1284:	84140e41 	ldrhi	r0, [r4], #-3649	; 0xfffff1bf
    1288:	86048505 	strhi	r8, [r4], -r5, lsl #10
    128c:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
    1290:	240e4501 	strcs	r4, [lr], #-1281	; 0xfffffaff
    1294:	08890988 	stmeq	r9, {r3, r7, r8, fp}
    1298:	068b078a 	streq	r0, [fp], sl, lsl #15
    129c:	00400e45 	subeq	r0, r0, r5, asr #28
    12a0:	0000000c 	andeq	r0, r0, ip
    12a4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    12a8:	7c020001 	stcvc	0, cr0, [r2], {1}
    12ac:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    12b0:	00000018 	andeq	r0, r0, r8, lsl r0
    12b4:	000012a0 	andeq	r1, r0, r0, lsr #5
    12b8:	20004250 	andcs	r4, r0, r0, asr r2
    12bc:	00000038 	andeq	r0, r0, r8, lsr r0
    12c0:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
    12c4:	86038504 	strhi	r8, [r3], -r4, lsl #10
    12c8:	00018e02 	andeq	r8, r1, r2, lsl #28
    12cc:	0000000c 	andeq	r0, r0, ip
    12d0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    12d4:	7c020001 	stcvc	0, cr0, [r2], {1}
    12d8:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    12dc:	00000018 	andeq	r0, r0, r8, lsl r0
    12e0:	000012cc 	andeq	r1, r0, ip, asr #5
    12e4:	20004288 	andcs	r4, r0, r8, lsl #5
    12e8:	00000074 	andeq	r0, r0, r4, ror r0
    12ec:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
    12f0:	86038504 	strhi	r8, [r3], -r4, lsl #10
    12f4:	00018e02 	andeq	r8, r1, r2, lsl #28
    12f8:	0000000c 	andeq	r0, r0, ip
    12fc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    1300:	7c020001 	stcvc	0, cr0, [r2], {1}
    1304:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    1308:	0000000c 	andeq	r0, r0, ip
    130c:	000012f8 	strdeq	r1, [r0], -r8
    1310:	20004a1c 	andcs	r4, r0, ip, lsl sl
    1314:	0000000c 	andeq	r0, r0, ip

Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
   0:	20000af8 	strdcs	r0, [r0], -r8
   4:	20001ae4 	andcs	r1, r0, r4, ror #21
   8:	20000000 	andcs	r0, r0, r0
   c:	2000000c 	andcs	r0, r0, ip
	...
  18:	00000042 	andeq	r0, r0, r2, asr #32
  1c:	0000006e 	andeq	r0, r0, lr, rrx
  20:	00000070 	andeq	r0, r0, r0, ror r0
  24:	0000007c 	andeq	r0, r0, ip, ror r0
	...
