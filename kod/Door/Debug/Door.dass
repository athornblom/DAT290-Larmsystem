
./Debug/Door.elf:     file format elf32-littlearm


Disassembly of section .text:

20000000 <startup>:
#include "stm32f4xx_rng.h"
void startup(void) __attribute__((naked)) __attribute__((section(".start_section")));

void startup(void)
{
	__asm volatile(
20000000:	4802      	ldr	r0, [pc, #8]	; (2000000c <_exit+0x4>)
20000002:	4685      	mov	sp, r0
20000004:	f003 faba 	bl	2000357c <main>

20000008 <_exit>:
20000008:	e7fe      	b.n	20000008 <_exit>
		" LDR R0,=0x2001C000\n" /* set stack */
		" MOV SP,R0\n"
		" BL main\n"   /* call main */
		"_exit: B .\n" /* never return */
	);
}
2000000a:	46c0      	nop			; (mov r8, r8)
2000000c:	2001c000 	andcs	ip, r1, r0

20000010 <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
20000010:	b580      	push	{r7, lr}
20000012:	b082      	sub	sp, #8
20000014:	af00      	add	r7, sp, #0
20000016:	0002      	movs	r2, r0
20000018:	6039      	str	r1, [r7, #0]
2000001a:	1dfb      	adds	r3, r7, #7
2000001c:	701a      	strb	r2, [r3, #0]
  if((int32_t)IRQn < 0) {
2000001e:	1dfb      	adds	r3, r7, #7
20000020:	781b      	ldrb	r3, [r3, #0]
20000022:	2b7f      	cmp	r3, #127	; 0x7f
20000024:	d90d      	bls.n	20000042 <NVIC_SetPriority+0x32>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
20000026:	683b      	ldr	r3, [r7, #0]
20000028:	b2da      	uxtb	r2, r3
2000002a:	490f      	ldr	r1, [pc, #60]	; (20000068 <NVIC_SetPriority+0x58>)
2000002c:	1dfb      	adds	r3, r7, #7
2000002e:	781b      	ldrb	r3, [r3, #0]
20000030:	0018      	movs	r0, r3
20000032:	230f      	movs	r3, #15
20000034:	4003      	ands	r3, r0
20000036:	3b04      	subs	r3, #4
20000038:	0112      	lsls	r2, r2, #4
2000003a:	b2d2      	uxtb	r2, r2
2000003c:	18cb      	adds	r3, r1, r3
2000003e:	761a      	strb	r2, [r3, #24]
  }
  else {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
20000040:	e00d      	b.n	2000005e <NVIC_SetPriority+0x4e>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
20000042:	683b      	ldr	r3, [r7, #0]
20000044:	b2db      	uxtb	r3, r3
20000046:	4909      	ldr	r1, [pc, #36]	; (2000006c <NVIC_SetPriority+0x5c>)
20000048:	1dfa      	adds	r2, r7, #7
2000004a:	7812      	ldrb	r2, [r2, #0]
2000004c:	b252      	sxtb	r2, r2
2000004e:	011b      	lsls	r3, r3, #4
20000050:	b2d8      	uxtb	r0, r3
20000052:	23c0      	movs	r3, #192	; 0xc0
20000054:	009b      	lsls	r3, r3, #2
20000056:	188a      	adds	r2, r1, r2
20000058:	18d3      	adds	r3, r2, r3
2000005a:	1c02      	adds	r2, r0, #0
2000005c:	701a      	strb	r2, [r3, #0]
}
2000005e:	46c0      	nop			; (mov r8, r8)
20000060:	46bd      	mov	sp, r7
20000062:	b002      	add	sp, #8
20000064:	bd80      	pop	{r7, pc}
20000066:	46c0      	nop			; (mov r8, r8)
20000068:	e000ed00 	and	lr, r0, r0, lsl #26
2000006c:	e000e100 	and	lr, r0, r0, lsl #2

20000070 <CANhandlerListNotFull>:
uint8_t SessionIDActive;
uint32_t SessionID;

//Kollar om det finns plats i handlerList
//Returnerar 1 om det finns plats, 0 annars
uint8_t CANhandlerListNotFull(void){
20000070:	b580      	push	{r7, lr}
20000072:	b082      	sub	sp, #8
20000074:	af00      	add	r7, sp, #0
    for (uint8_t index = 0; index < HANDLERLISTSIZE; index++){
20000076:	1dfb      	adds	r3, r7, #7
20000078:	2200      	movs	r2, #0
2000007a:	701a      	strb	r2, [r3, #0]
2000007c:	e00f      	b.n	2000009e <CANhandlerListNotFull+0x2e>
            if (handlerList[index].state == DISABLE){
2000007e:	1dfb      	adds	r3, r7, #7
20000080:	781b      	ldrb	r3, [r3, #0]
20000082:	4a0b      	ldr	r2, [pc, #44]	; (200000b0 <CANhandlerListNotFull+0x40>)
20000084:	011b      	lsls	r3, r3, #4
20000086:	18d3      	adds	r3, r2, r3
20000088:	330c      	adds	r3, #12
2000008a:	781b      	ldrb	r3, [r3, #0]
2000008c:	2b00      	cmp	r3, #0
2000008e:	d101      	bne.n	20000094 <CANhandlerListNotFull+0x24>
                return 1;
20000090:	2301      	movs	r3, #1
20000092:	e009      	b.n	200000a8 <CANhandlerListNotFull+0x38>
    for (uint8_t index = 0; index < HANDLERLISTSIZE; index++){
20000094:	1dfb      	adds	r3, r7, #7
20000096:	781a      	ldrb	r2, [r3, #0]
20000098:	1dfb      	adds	r3, r7, #7
2000009a:	3201      	adds	r2, #1
2000009c:	701a      	strb	r2, [r3, #0]
2000009e:	1dfb      	adds	r3, r7, #7
200000a0:	781b      	ldrb	r3, [r3, #0]
200000a2:	2b0d      	cmp	r3, #13
200000a4:	d9eb      	bls.n	2000007e <CANhandlerListNotFull+0xe>
            }
    }
    return 0;
200000a6:	2300      	movs	r3, #0
}
200000a8:	0018      	movs	r0, r3
200000aa:	46bd      	mov	sp, r7
200000ac:	b002      	add	sp, #8
200000ae:	bd80      	pop	{r7, pc}
200000b0:	20003e90 	mulcs	r0, r0, lr

200000b4 <CANactivateFilterHandler>:

//Ativerar ett filtet med index från handlerList
void CANactivateFilterHandler (uint8_t index){
200000b4:	b580      	push	{r7, lr}
200000b6:	b088      	sub	sp, #32
200000b8:	af00      	add	r7, sp, #0
200000ba:	0002      	movs	r2, r0
200000bc:	1dfb      	adds	r3, r7, #7
200000be:	701a      	strb	r2, [r3, #0]
            handlerList[index].state = ENABLE;
200000c0:	1dfb      	adds	r3, r7, #7
200000c2:	781b      	ldrb	r3, [r3, #0]
200000c4:	4a20      	ldr	r2, [pc, #128]	; (20000148 <CANactivateFilterHandler+0x94>)
200000c6:	011b      	lsls	r3, r3, #4
200000c8:	18d3      	adds	r3, r2, r3
200000ca:	330c      	adds	r3, #12
200000cc:	2201      	movs	r2, #1
200000ce:	701a      	strb	r2, [r3, #0]

            //Union för omvandling mellan CANFilter och uint16_t
            filterUnion unionFilter, unionMask;
            unionFilter.filter = handlerList[index].filter;
200000d0:	1dfb      	adds	r3, r7, #7
200000d2:	781b      	ldrb	r3, [r3, #0]
200000d4:	4a1c      	ldr	r2, [pc, #112]	; (20000148 <CANactivateFilterHandler+0x94>)
200000d6:	011b      	lsls	r3, r3, #4
200000d8:	18d3      	adds	r3, r2, r3
200000da:	3304      	adds	r3, #4
200000dc:	681b      	ldr	r3, [r3, #0]
200000de:	61fb      	str	r3, [r7, #28]
            unionMask.filter = handlerList[index].mask;
200000e0:	1dfb      	adds	r3, r7, #7
200000e2:	781b      	ldrb	r3, [r3, #0]
200000e4:	4a18      	ldr	r2, [pc, #96]	; (20000148 <CANactivateFilterHandler+0x94>)
200000e6:	011b      	lsls	r3, r3, #4
200000e8:	18d3      	adds	r3, r2, r3
200000ea:	3308      	adds	r3, #8
200000ec:	681b      	ldr	r3, [r3, #0]
200000ee:	61bb      	str	r3, [r7, #24]

            /* CAN filter init */
            CAN_FilterInitTypeDef CAN_FilterInitStructure;
            CAN_FilterInitStructure.CAN_FilterNumber = index;
200000f0:	2108      	movs	r1, #8
200000f2:	187b      	adds	r3, r7, r1
200000f4:	1dfa      	adds	r2, r7, #7
200000f6:	7812      	ldrb	r2, [r2, #0]
200000f8:	729a      	strb	r2, [r3, #10]
            CAN_FilterInitStructure.CAN_FilterMode = CAN_FilterMode_IdMask;
200000fa:	187b      	adds	r3, r7, r1
200000fc:	2200      	movs	r2, #0
200000fe:	72da      	strb	r2, [r3, #11]
            CAN_FilterInitStructure.CAN_FilterScale = CAN_FilterScale_32bit;
20000100:	187b      	adds	r3, r7, r1
20000102:	2201      	movs	r2, #1
20000104:	731a      	strb	r2, [r3, #12]
            CAN_FilterInitStructure.CAN_FilterIdHigh = unionFilter.u16bits[1];
20000106:	201c      	movs	r0, #28
20000108:	183b      	adds	r3, r7, r0
2000010a:	885a      	ldrh	r2, [r3, #2]
2000010c:	187b      	adds	r3, r7, r1
2000010e:	801a      	strh	r2, [r3, #0]
            CAN_FilterInitStructure.CAN_FilterIdLow = unionFilter.u16bits[0];
20000110:	183b      	adds	r3, r7, r0
20000112:	881a      	ldrh	r2, [r3, #0]
20000114:	187b      	adds	r3, r7, r1
20000116:	805a      	strh	r2, [r3, #2]
            CAN_FilterInitStructure.CAN_FilterMaskIdHigh = unionMask.u16bits[1];
20000118:	2018      	movs	r0, #24
2000011a:	183b      	adds	r3, r7, r0
2000011c:	885a      	ldrh	r2, [r3, #2]
2000011e:	187b      	adds	r3, r7, r1
20000120:	809a      	strh	r2, [r3, #4]
            CAN_FilterInitStructure.CAN_FilterMaskIdLow = unionMask.u16bits[0];
20000122:	183b      	adds	r3, r7, r0
20000124:	881a      	ldrh	r2, [r3, #0]
20000126:	187b      	adds	r3, r7, r1
20000128:	80da      	strh	r2, [r3, #6]
            CAN_FilterInitStructure.CAN_FilterFIFOAssignment = 0;
2000012a:	187b      	adds	r3, r7, r1
2000012c:	2200      	movs	r2, #0
2000012e:	811a      	strh	r2, [r3, #8]
            CAN_FilterInitStructure.CAN_FilterActivation = ENABLE;
20000130:	187b      	adds	r3, r7, r1
20000132:	2201      	movs	r2, #1
20000134:	735a      	strb	r2, [r3, #13]
            CAN_FilterInit(&CAN_FilterInitStructure);
20000136:	187b      	adds	r3, r7, r1
20000138:	0018      	movs	r0, r3
2000013a:	f000 fc37 	bl	200009ac <CAN_FilterInit>
}
2000013e:	46c0      	nop			; (mov r8, r8)
20000140:	46bd      	mov	sp, r7
20000142:	b008      	add	sp, #32
20000144:	bd80      	pop	{r7, pc}
20000146:	46c0      	nop			; (mov r8, r8)
20000148:	20003e90 	mulcs	r0, r0, lr

2000014c <CANaddFilterHandler>:

//Lägger till ett filter, returnerar index för filtret i handlerList
//Om session ID är aktiverat läggs det automatiskt till i filtret
//Kolla att det finns plats i handlerList innan med handlerListNotFull()
uint8_t CANaddFilterHandler(void (*newHandler)(CanRxMsg *), CANFilter *filter, CANFilter *mask){
2000014c:	b590      	push	{r4, r7, lr}
2000014e:	b087      	sub	sp, #28
20000150:	af00      	add	r7, sp, #0
20000152:	60f8      	str	r0, [r7, #12]
20000154:	60b9      	str	r1, [r7, #8]
20000156:	607a      	str	r2, [r7, #4]
    for (uint8_t index = 0; index < HANDLERLISTSIZE; index++){
20000158:	2317      	movs	r3, #23
2000015a:	18fb      	adds	r3, r7, r3
2000015c:	2200      	movs	r2, #0
2000015e:	701a      	strb	r2, [r3, #0]
20000160:	e076      	b.n	20000250 <CANaddFilterHandler+0x104>
        if (handlerList[index].state == DISABLE){
20000162:	2317      	movs	r3, #23
20000164:	18fb      	adds	r3, r7, r3
20000166:	781b      	ldrb	r3, [r3, #0]
20000168:	4a3e      	ldr	r2, [pc, #248]	; (20000264 <CANaddFilterHandler+0x118>)
2000016a:	011b      	lsls	r3, r3, #4
2000016c:	18d3      	adds	r3, r2, r3
2000016e:	330c      	adds	r3, #12
20000170:	781b      	ldrb	r3, [r3, #0]
20000172:	2b00      	cmp	r3, #0
20000174:	d166      	bne.n	20000244 <CANaddFilterHandler+0xf8>
            //Aktiverar session ID om det är aktivt
            if (SessionIDActive == SESSIONIDACTIVE){
20000176:	4b3c      	ldr	r3, [pc, #240]	; (20000268 <CANaddFilterHandler+0x11c>)
20000178:	781b      	ldrb	r3, [r3, #0]
2000017a:	2b01      	cmp	r3, #1
2000017c:	d13d      	bne.n	200001fa <CANaddFilterHandler+0xae>
                //Används för omvandling och tilldeling av sessionID
                Header header;

                //Alla meddelanden med sessionID aktivt måste vara extended
                filter->IDE = 1;
2000017e:	68bb      	ldr	r3, [r7, #8]
20000180:	781a      	ldrb	r2, [r3, #0]
20000182:	2104      	movs	r1, #4
20000184:	430a      	orrs	r2, r1
20000186:	701a      	strb	r2, [r3, #0]
                mask->IDE = 1;
20000188:	687b      	ldr	r3, [r7, #4]
2000018a:	781a      	ldrb	r2, [r3, #0]
2000018c:	2104      	movs	r1, #4
2000018e:	430a      	orrs	r2, r1
20000190:	701a      	strb	r2, [r3, #0]

                //Skriver sessionID
                UINT32toHEADER(filter->ID, header);
20000192:	68bb      	ldr	r3, [r7, #8]
20000194:	681b      	ldr	r3, [r3, #0]
20000196:	08da      	lsrs	r2, r3, #3
20000198:	2010      	movs	r0, #16
2000019a:	183b      	adds	r3, r7, r0
2000019c:	601a      	str	r2, [r3, #0]
                header.sessionID = SessionID;
2000019e:	4b33      	ldr	r3, [pc, #204]	; (2000026c <CANaddFilterHandler+0x120>)
200001a0:	681b      	ldr	r3, [r3, #0]
200001a2:	059b      	lsls	r3, r3, #22
200001a4:	0d9b      	lsrs	r3, r3, #22
200001a6:	b29b      	uxth	r3, r3
200001a8:	059b      	lsls	r3, r3, #22
200001aa:	0d9b      	lsrs	r3, r3, #22
200001ac:	021b      	lsls	r3, r3, #8
200001ae:	693a      	ldr	r2, [r7, #16]
200001b0:	492f      	ldr	r1, [pc, #188]	; (20000270 <CANaddFilterHandler+0x124>)
200001b2:	400a      	ands	r2, r1
200001b4:	4313      	orrs	r3, r2
200001b6:	613b      	str	r3, [r7, #16]
                HEADERtoUINT32(header, filter->ID);
200001b8:	0004      	movs	r4, r0
200001ba:	183b      	adds	r3, r7, r0
200001bc:	681b      	ldr	r3, [r3, #0]
200001be:	00db      	lsls	r3, r3, #3
200001c0:	08da      	lsrs	r2, r3, #3
200001c2:	68bb      	ldr	r3, [r7, #8]
200001c4:	00d2      	lsls	r2, r2, #3
200001c6:	6819      	ldr	r1, [r3, #0]
200001c8:	2007      	movs	r0, #7
200001ca:	4001      	ands	r1, r0
200001cc:	430a      	orrs	r2, r1
200001ce:	601a      	str	r2, [r3, #0]

                //Skriver sessionID masken
                UINT32toHEADER(mask->ID, header);
200001d0:	687b      	ldr	r3, [r7, #4]
200001d2:	681b      	ldr	r3, [r3, #0]
200001d4:	08da      	lsrs	r2, r3, #3
200001d6:	0020      	movs	r0, r4
200001d8:	183b      	adds	r3, r7, r0
200001da:	601a      	str	r2, [r3, #0]
                header.sessionID = ~0;
200001dc:	693b      	ldr	r3, [r7, #16]
200001de:	4a25      	ldr	r2, [pc, #148]	; (20000274 <CANaddFilterHandler+0x128>)
200001e0:	4313      	orrs	r3, r2
200001e2:	613b      	str	r3, [r7, #16]
                HEADERtoUINT32(header, mask->ID);
200001e4:	183b      	adds	r3, r7, r0
200001e6:	681b      	ldr	r3, [r3, #0]
200001e8:	00db      	lsls	r3, r3, #3
200001ea:	08da      	lsrs	r2, r3, #3
200001ec:	687b      	ldr	r3, [r7, #4]
200001ee:	00d2      	lsls	r2, r2, #3
200001f0:	6819      	ldr	r1, [r3, #0]
200001f2:	2007      	movs	r0, #7
200001f4:	4001      	ands	r1, r0
200001f6:	430a      	orrs	r2, r1
200001f8:	601a      	str	r2, [r3, #0]
            }

            handlerList[index].filter = *filter;
200001fa:	2117      	movs	r1, #23
200001fc:	187b      	adds	r3, r7, r1
200001fe:	781b      	ldrb	r3, [r3, #0]
20000200:	4a18      	ldr	r2, [pc, #96]	; (20000264 <CANaddFilterHandler+0x118>)
20000202:	011b      	lsls	r3, r3, #4
20000204:	18d3      	adds	r3, r2, r3
20000206:	3304      	adds	r3, #4
20000208:	68ba      	ldr	r2, [r7, #8]
2000020a:	6812      	ldr	r2, [r2, #0]
2000020c:	601a      	str	r2, [r3, #0]
            handlerList[index].mask = *mask;
2000020e:	187b      	adds	r3, r7, r1
20000210:	781b      	ldrb	r3, [r3, #0]
20000212:	4a14      	ldr	r2, [pc, #80]	; (20000264 <CANaddFilterHandler+0x118>)
20000214:	011b      	lsls	r3, r3, #4
20000216:	18d3      	adds	r3, r2, r3
20000218:	3308      	adds	r3, #8
2000021a:	687a      	ldr	r2, [r7, #4]
2000021c:	6812      	ldr	r2, [r2, #0]
2000021e:	601a      	str	r2, [r3, #0]
            handlerList[index].handler = newHandler;
20000220:	0008      	movs	r0, r1
20000222:	187b      	adds	r3, r7, r1
20000224:	781a      	ldrb	r2, [r3, #0]
20000226:	4b0f      	ldr	r3, [pc, #60]	; (20000264 <CANaddFilterHandler+0x118>)
20000228:	0112      	lsls	r2, r2, #4
2000022a:	68f9      	ldr	r1, [r7, #12]
2000022c:	50d1      	str	r1, [r2, r3]

            //Aktiverar filtret
            CANactivateFilterHandler(index);
2000022e:	0001      	movs	r1, r0
20000230:	000c      	movs	r4, r1
20000232:	187b      	adds	r3, r7, r1
20000234:	781b      	ldrb	r3, [r3, #0]
20000236:	0018      	movs	r0, r3
20000238:	f7ff ff3c 	bl	200000b4 <CANactivateFilterHandler>

            return index;
2000023c:	0021      	movs	r1, r4
2000023e:	187b      	adds	r3, r7, r1
20000240:	781b      	ldrb	r3, [r3, #0]
20000242:	e00b      	b.n	2000025c <CANaddFilterHandler+0x110>
    for (uint8_t index = 0; index < HANDLERLISTSIZE; index++){
20000244:	2117      	movs	r1, #23
20000246:	187b      	adds	r3, r7, r1
20000248:	781a      	ldrb	r2, [r3, #0]
2000024a:	187b      	adds	r3, r7, r1
2000024c:	3201      	adds	r2, #1
2000024e:	701a      	strb	r2, [r3, #0]
20000250:	2317      	movs	r3, #23
20000252:	18fb      	adds	r3, r7, r3
20000254:	781b      	ldrb	r3, [r3, #0]
20000256:	2b0d      	cmp	r3, #13
20000258:	d983      	bls.n	20000162 <CANaddFilterHandler+0x16>
        }
    }

    //Detta händer bara om man inte kollat så det finns plats innan man lägger till filtret.
    //Skulle man sedan avaktivera filtret med denna index så händer ingenting, se CANdisableFilterHandler.
    return HANDLERLISTSIZE;
2000025a:	230e      	movs	r3, #14
}
2000025c:	0018      	movs	r0, r3
2000025e:	46bd      	mov	sp, r7
20000260:	b007      	add	sp, #28
20000262:	bd90      	pop	{r4, r7, pc}
20000264:	20003e90 	mulcs	r0, r0, lr
20000268:	20003f70 	andcs	r3, r0, r0, ror pc
2000026c:	20003e8c 	andcs	r3, r0, ip, lsl #29
20000270:	fffc00ff 			; <UNDEFINED> instruction: 0xfffc00ff
20000274:	0003ff00 	andeq	pc, r3, r0, lsl #30

20000278 <CANdisableFilterHandler>:

//Avaktiverar CANFilterHandler med index index från handlerList
void CANdisableFilterHandler(uint8_t index){
20000278:	b580      	push	{r7, lr}
2000027a:	b086      	sub	sp, #24
2000027c:	af00      	add	r7, sp, #0
2000027e:	0002      	movs	r2, r0
20000280:	1dfb      	adds	r3, r7, #7
20000282:	701a      	strb	r2, [r3, #0]
    if (index < HANDLERLISTSIZE){
20000284:	1dfb      	adds	r3, r7, #7
20000286:	781b      	ldrb	r3, [r3, #0]
20000288:	2b0d      	cmp	r3, #13
2000028a:	d816      	bhi.n	200002ba <CANdisableFilterHandler+0x42>
        handlerList[index].state = DISABLE;
2000028c:	1dfb      	adds	r3, r7, #7
2000028e:	781b      	ldrb	r3, [r3, #0]
20000290:	4a0c      	ldr	r2, [pc, #48]	; (200002c4 <CANdisableFilterHandler+0x4c>)
20000292:	011b      	lsls	r3, r3, #4
20000294:	18d3      	adds	r3, r2, r3
20000296:	330c      	adds	r3, #12
20000298:	2200      	movs	r2, #0
2000029a:	701a      	strb	r2, [r3, #0]

        //Avaktiverar filtret
        CAN_FilterInitTypeDef CAN_FilterInitStructure;
        CAN_FilterInitStructure.CAN_FilterNumber = index;
2000029c:	2108      	movs	r1, #8
2000029e:	187b      	adds	r3, r7, r1
200002a0:	1dfa      	adds	r2, r7, #7
200002a2:	7812      	ldrb	r2, [r2, #0]
200002a4:	729a      	strb	r2, [r3, #10]
        CAN_FilterInitStructure.CAN_FilterFIFOAssignment = 0;
200002a6:	187b      	adds	r3, r7, r1
200002a8:	2200      	movs	r2, #0
200002aa:	811a      	strh	r2, [r3, #8]
        CAN_FilterInitStructure.CAN_FilterActivation = DISABLE;
200002ac:	187b      	adds	r3, r7, r1
200002ae:	2200      	movs	r2, #0
200002b0:	735a      	strb	r2, [r3, #13]
        CAN_FilterInit(&CAN_FilterInitStructure);
200002b2:	187b      	adds	r3, r7, r1
200002b4:	0018      	movs	r0, r3
200002b6:	f000 fb79 	bl	200009ac <CAN_FilterInit>
    }
}
200002ba:	46c0      	nop			; (mov r8, r8)
200002bc:	46bd      	mov	sp, r7
200002be:	b006      	add	sp, #24
200002c0:	bd80      	pop	{r7, pc}
200002c2:	46c0      	nop			; (mov r8, r8)
200002c4:	20003e90 	mulcs	r0, r0, lr

200002c8 <CANdisableAllFilterHandlers>:

//Avaktiverar alla CANFilterHandlers
void CANdisableAllFilterHandlers(void){
200002c8:	b580      	push	{r7, lr}
200002ca:	b082      	sub	sp, #8
200002cc:	af00      	add	r7, sp, #0
    for (uint8_t index = 0; index < HANDLERLISTSIZE; index++){
200002ce:	1dfb      	adds	r3, r7, #7
200002d0:	2200      	movs	r2, #0
200002d2:	701a      	strb	r2, [r3, #0]
200002d4:	e009      	b.n	200002ea <CANdisableAllFilterHandlers+0x22>
        CANdisableFilterHandler(index);
200002d6:	1dfb      	adds	r3, r7, #7
200002d8:	781b      	ldrb	r3, [r3, #0]
200002da:	0018      	movs	r0, r3
200002dc:	f7ff ffcc 	bl	20000278 <CANdisableFilterHandler>
    for (uint8_t index = 0; index < HANDLERLISTSIZE; index++){
200002e0:	1dfb      	adds	r3, r7, #7
200002e2:	781a      	ldrb	r2, [r3, #0]
200002e4:	1dfb      	adds	r3, r7, #7
200002e6:	3201      	adds	r2, #1
200002e8:	701a      	strb	r2, [r3, #0]
200002ea:	1dfb      	adds	r3, r7, #7
200002ec:	781b      	ldrb	r3, [r3, #0]
200002ee:	2b0d      	cmp	r3, #13
200002f0:	d9f1      	bls.n	200002d6 <CANdisableAllFilterHandlers+0xe>
    }
}
200002f2:	46c0      	nop			; (mov r8, r8)
200002f4:	46bd      	mov	sp, r7
200002f6:	b002      	add	sp, #8
200002f8:	bd80      	pop	{r7, pc}

200002fa <CANsendMessage>:

//Skickar ett CAN-meddelande
//Omvandlar till extended om det inte redan är det samt session ID är aktivt
//Returnderar numret för mailboxen som används eller CAN_TxStatus_NoMailBox om det misslyckades
uint8_t CANsendMessage(CanTxMsg *msg){
200002fa:	b580      	push	{r7, lr}
200002fc:	b084      	sub	sp, #16
200002fe:	af00      	add	r7, sp, #0
20000300:	6078      	str	r0, [r7, #4]
    //Justerar endast meddelandet om sessionID är aktivt
    if (SessionIDActive == SESSIONIDACTIVE){
20000302:	4b24      	ldr	r3, [pc, #144]	; (20000394 <CANsendMessage+0x9a>)
20000304:	781b      	ldrb	r3, [r3, #0]
20000306:	2b01      	cmp	r3, #1
20000308:	d138      	bne.n	2000037c <CANsendMessage+0x82>
        //Används för omvandling och tilldeling av session ID
        Header header;

        //Om standardmeddelande omvandla till extended
        if (msg->IDE == CAN_Id_Standard){
2000030a:	687b      	ldr	r3, [r7, #4]
2000030c:	7a1b      	ldrb	r3, [r3, #8]
2000030e:	2b00      	cmp	r3, #0
20000310:	d11a      	bne.n	20000348 <CANsendMessage+0x4e>
            msg->IDE = CAN_Id_Extended;
20000312:	687b      	ldr	r3, [r7, #4]
20000314:	2204      	movs	r2, #4
20000316:	721a      	strb	r2, [r3, #8]

            //Skriver sessionID
            UINT32toHEADER(msg->StdId << STDtoEXTLENGTHDIFF, header);
20000318:	687b      	ldr	r3, [r7, #4]
2000031a:	681a      	ldr	r2, [r3, #0]
2000031c:	200c      	movs	r0, #12
2000031e:	183b      	adds	r3, r7, r0
20000320:	0492      	lsls	r2, r2, #18
20000322:	601a      	str	r2, [r3, #0]
            header.sessionID = SessionID;
20000324:	4b1c      	ldr	r3, [pc, #112]	; (20000398 <CANsendMessage+0x9e>)
20000326:	681b      	ldr	r3, [r3, #0]
20000328:	059b      	lsls	r3, r3, #22
2000032a:	0d9b      	lsrs	r3, r3, #22
2000032c:	b29b      	uxth	r3, r3
2000032e:	059b      	lsls	r3, r3, #22
20000330:	0d9b      	lsrs	r3, r3, #22
20000332:	021b      	lsls	r3, r3, #8
20000334:	68fa      	ldr	r2, [r7, #12]
20000336:	4919      	ldr	r1, [pc, #100]	; (2000039c <CANsendMessage+0xa2>)
20000338:	400a      	ands	r2, r1
2000033a:	4313      	orrs	r3, r2
2000033c:	60fb      	str	r3, [r7, #12]
            HEADERtoUINT32(header, msg->ExtId);
2000033e:	183b      	adds	r3, r7, r0
20000340:	681a      	ldr	r2, [r3, #0]
20000342:	687b      	ldr	r3, [r7, #4]
20000344:	605a      	str	r2, [r3, #4]
20000346:	e019      	b.n	2000037c <CANsendMessage+0x82>
        }

        //Annars om det redan är ett meddelande med extended ID
        //justeras endast sessionsbitarna om sessions ID är aktivt
        else if (msg->IDE == CAN_Id_Extended){
20000348:	687b      	ldr	r3, [r7, #4]
2000034a:	7a1b      	ldrb	r3, [r3, #8]
2000034c:	2b04      	cmp	r3, #4
2000034e:	d115      	bne.n	2000037c <CANsendMessage+0x82>
            UINT32toHEADER(msg->ExtId, header);
20000350:	200c      	movs	r0, #12
20000352:	183b      	adds	r3, r7, r0
20000354:	687a      	ldr	r2, [r7, #4]
20000356:	6852      	ldr	r2, [r2, #4]
20000358:	601a      	str	r2, [r3, #0]
            header.sessionID = SessionID;
2000035a:	4b0f      	ldr	r3, [pc, #60]	; (20000398 <CANsendMessage+0x9e>)
2000035c:	681b      	ldr	r3, [r3, #0]
2000035e:	059b      	lsls	r3, r3, #22
20000360:	0d9b      	lsrs	r3, r3, #22
20000362:	b29b      	uxth	r3, r3
20000364:	059b      	lsls	r3, r3, #22
20000366:	0d9b      	lsrs	r3, r3, #22
20000368:	021b      	lsls	r3, r3, #8
2000036a:	68fa      	ldr	r2, [r7, #12]
2000036c:	490b      	ldr	r1, [pc, #44]	; (2000039c <CANsendMessage+0xa2>)
2000036e:	400a      	ands	r2, r1
20000370:	4313      	orrs	r3, r2
20000372:	60fb      	str	r3, [r7, #12]
            HEADERtoUINT32(header, msg->ExtId);
20000374:	183b      	adds	r3, r7, r0
20000376:	681a      	ldr	r2, [r3, #0]
20000378:	687b      	ldr	r3, [r7, #4]
2000037a:	605a      	str	r2, [r3, #4]
        }
    }

	return CAN_Transmit(CAN1, msg);
2000037c:	687b      	ldr	r3, [r7, #4]
2000037e:	4a08      	ldr	r2, [pc, #32]	; (200003a0 <CANsendMessage+0xa6>)
20000380:	0019      	movs	r1, r3
20000382:	0010      	movs	r0, r2
20000384:	f000 fcd0 	bl	20000d28 <CAN_Transmit>
20000388:	0003      	movs	r3, r0
}
2000038a:	0018      	movs	r0, r3
2000038c:	46bd      	mov	sp, r7
2000038e:	b004      	add	sp, #16
20000390:	bd80      	pop	{r7, pc}
20000392:	46c0      	nop			; (mov r8, r8)
20000394:	20003f70 	andcs	r3, r0, r0, ror pc
20000398:	20003e8c 	andcs	r3, r0, ip, lsl #29
2000039c:	fffc00ff 			; <UNDEFINED> instruction: 0xfffc00ff
200003a0:	40006400 	andmi	r6, r0, r0, lsl #8

200003a4 <can_irq_handler>:

//Avbrottshanterare för mottagna meddelanden på FIFO 0.
//Anropar meddelandes hanteringsfunktion.
void can_irq_handler(void){
200003a4:	b580      	push	{r7, lr}
200003a6:	b086      	sub	sp, #24
200003a8:	af00      	add	r7, sp, #0
    //Kollar FIFO 0 pending Interrupt
    if(CAN_GetITStatus(CAN1, CAN_IT_FMP0)) {
200003aa:	4b17      	ldr	r3, [pc, #92]	; (20000408 <can_irq_handler+0x64>)
200003ac:	2102      	movs	r1, #2
200003ae:	0018      	movs	r0, r3
200003b0:	f001 f950 	bl	20001654 <CAN_GetITStatus>
200003b4:	1e03      	subs	r3, r0, #0
200003b6:	d022      	beq.n	200003fe <can_irq_handler+0x5a>
        //Kollar så att det finns meddelande som väntar i FIFO0
        if (CAN_MessagePending(CAN1, CAN_FIFO0)) {
200003b8:	4b13      	ldr	r3, [pc, #76]	; (20000408 <can_irq_handler+0x64>)
200003ba:	2100      	movs	r1, #0
200003bc:	0018      	movs	r0, r3
200003be:	f000 ff2b 	bl	20001218 <CAN_MessagePending>
200003c2:	1e03      	subs	r3, r0, #0
200003c4:	d01b      	beq.n	200003fe <can_irq_handler+0x5a>
            //Läser meddelandet
            CanRxMsg rxMsg;
            CAN_Receive(CAN1, CAN_FIFO0, &rxMsg);
200003c6:	1d3b      	adds	r3, r7, #4
200003c8:	480f      	ldr	r0, [pc, #60]	; (20000408 <can_irq_handler+0x64>)
200003ca:	001a      	movs	r2, r3
200003cc:	2100      	movs	r1, #0
200003ce:	f000 fe32 	bl	20001036 <CAN_Receive>

            //Anropar hanteringsfunktionen för meddelandet
            if (rxMsg.FMI < HANDLERLISTSIZE){
200003d2:	1d3b      	adds	r3, r7, #4
200003d4:	7cdb      	ldrb	r3, [r3, #19]
200003d6:	2b0d      	cmp	r3, #13
200003d8:	d811      	bhi.n	200003fe <can_irq_handler+0x5a>
                if (handlerList[rxMsg.FMI].state == ENABLE){
200003da:	1d3b      	adds	r3, r7, #4
200003dc:	7cdb      	ldrb	r3, [r3, #19]
200003de:	4a0b      	ldr	r2, [pc, #44]	; (2000040c <can_irq_handler+0x68>)
200003e0:	011b      	lsls	r3, r3, #4
200003e2:	18d3      	adds	r3, r2, r3
200003e4:	330c      	adds	r3, #12
200003e6:	781b      	ldrb	r3, [r3, #0]
200003e8:	2b01      	cmp	r3, #1
200003ea:	d108      	bne.n	200003fe <can_irq_handler+0x5a>
                    handlerList[rxMsg.FMI].handler(&rxMsg);
200003ec:	1d3b      	adds	r3, r7, #4
200003ee:	7cdb      	ldrb	r3, [r3, #19]
200003f0:	001a      	movs	r2, r3
200003f2:	4b06      	ldr	r3, [pc, #24]	; (2000040c <can_irq_handler+0x68>)
200003f4:	0112      	lsls	r2, r2, #4
200003f6:	58d3      	ldr	r3, [r2, r3]
200003f8:	1d3a      	adds	r2, r7, #4
200003fa:	0010      	movs	r0, r2
200003fc:	4798      	blx	r3
                }
            }
        }
    }
}
200003fe:	46c0      	nop			; (mov r8, r8)
20000400:	46bd      	mov	sp, r7
20000402:	b006      	add	sp, #24
20000404:	bd80      	pop	{r7, pc}
20000406:	46c0      	nop			; (mov r8, r8)
20000408:	40006400 	andmi	r6, r0, r0, lsl #8
2000040c:	20003e90 	mulcs	r0, r0, lr

20000410 <setSessionId>:

//Sätter session ID,  ändra även session ID för aktiva filter
//Använder de första 10 bitarna av ID
void setSessionId(uint16_t ID){
20000410:	b5b0      	push	{r4, r5, r7, lr}
20000412:	b084      	sub	sp, #16
20000414:	af00      	add	r7, sp, #0
20000416:	0002      	movs	r2, r0
20000418:	1dbb      	adds	r3, r7, #6
2000041a:	801a      	strh	r2, [r3, #0]
    SessionIDActive = SESSIONIDACTIVE;
2000041c:	4b44      	ldr	r3, [pc, #272]	; (20000530 <setSessionId+0x120>)
2000041e:	2201      	movs	r2, #1
20000420:	701a      	strb	r2, [r3, #0]
    SessionID = ID;
20000422:	1dbb      	adds	r3, r7, #6
20000424:	881a      	ldrh	r2, [r3, #0]
20000426:	4b43      	ldr	r3, [pc, #268]	; (20000534 <setSessionId+0x124>)
20000428:	601a      	str	r2, [r3, #0]

    for (uint8_t index = 0; index < HANDLERLISTSIZE; index++){
2000042a:	230f      	movs	r3, #15
2000042c:	18fb      	adds	r3, r7, r3
2000042e:	2200      	movs	r2, #0
20000430:	701a      	strb	r2, [r3, #0]
20000432:	e073      	b.n	2000051c <setSessionId+0x10c>
        //Justerar filter som är aktiva
        if(handlerList[index].state == ENABLE){
20000434:	230f      	movs	r3, #15
20000436:	18fb      	adds	r3, r7, r3
20000438:	781b      	ldrb	r3, [r3, #0]
2000043a:	4a3f      	ldr	r2, [pc, #252]	; (20000538 <setSessionId+0x128>)
2000043c:	011b      	lsls	r3, r3, #4
2000043e:	18d3      	adds	r3, r2, r3
20000440:	330c      	adds	r3, #12
20000442:	781b      	ldrb	r3, [r3, #0]
20000444:	2b01      	cmp	r3, #1
20000446:	d163      	bne.n	20000510 <setSessionId+0x100>
            //Används för omvandling
            Header header;

            //Filtrer och masken måste vara av typ extended
            handlerList[index].filter.IDE = 1;
20000448:	200f      	movs	r0, #15
2000044a:	183b      	adds	r3, r7, r0
2000044c:	781b      	ldrb	r3, [r3, #0]
2000044e:	4a3a      	ldr	r2, [pc, #232]	; (20000538 <setSessionId+0x128>)
20000450:	011b      	lsls	r3, r3, #4
20000452:	18d3      	adds	r3, r2, r3
20000454:	791a      	ldrb	r2, [r3, #4]
20000456:	2104      	movs	r1, #4
20000458:	430a      	orrs	r2, r1
2000045a:	711a      	strb	r2, [r3, #4]
            handlerList[index].mask.IDE = 1;
2000045c:	183b      	adds	r3, r7, r0
2000045e:	781b      	ldrb	r3, [r3, #0]
20000460:	4a35      	ldr	r2, [pc, #212]	; (20000538 <setSessionId+0x128>)
20000462:	2108      	movs	r1, #8
20000464:	011b      	lsls	r3, r3, #4
20000466:	18d3      	adds	r3, r2, r3
20000468:	185b      	adds	r3, r3, r1
2000046a:	781a      	ldrb	r2, [r3, #0]
2000046c:	2104      	movs	r1, #4
2000046e:	430a      	orrs	r2, r1
20000470:	701a      	strb	r2, [r3, #0]

            //Ändrar filter
            UINT32toHEADER(handlerList[index].filter.ID, header);
20000472:	183b      	adds	r3, r7, r0
20000474:	781b      	ldrb	r3, [r3, #0]
20000476:	4a30      	ldr	r2, [pc, #192]	; (20000538 <setSessionId+0x128>)
20000478:	011b      	lsls	r3, r3, #4
2000047a:	18d3      	adds	r3, r2, r3
2000047c:	685b      	ldr	r3, [r3, #4]
2000047e:	08da      	lsrs	r2, r3, #3
20000480:	2508      	movs	r5, #8
20000482:	197b      	adds	r3, r7, r5
20000484:	601a      	str	r2, [r3, #0]
            header.sessionID = SessionID;
20000486:	4b2b      	ldr	r3, [pc, #172]	; (20000534 <setSessionId+0x124>)
20000488:	681b      	ldr	r3, [r3, #0]
2000048a:	059b      	lsls	r3, r3, #22
2000048c:	0d9b      	lsrs	r3, r3, #22
2000048e:	b29b      	uxth	r3, r3
20000490:	059b      	lsls	r3, r3, #22
20000492:	0d9b      	lsrs	r3, r3, #22
20000494:	021b      	lsls	r3, r3, #8
20000496:	68ba      	ldr	r2, [r7, #8]
20000498:	4928      	ldr	r1, [pc, #160]	; (2000053c <setSessionId+0x12c>)
2000049a:	400a      	ands	r2, r1
2000049c:	4313      	orrs	r3, r2
2000049e:	60bb      	str	r3, [r7, #8]
            HEADERtoUINT32(header, handlerList[index].filter.ID);
200004a0:	197b      	adds	r3, r7, r5
200004a2:	681a      	ldr	r2, [r3, #0]
200004a4:	0004      	movs	r4, r0
200004a6:	183b      	adds	r3, r7, r0
200004a8:	781b      	ldrb	r3, [r3, #0]
200004aa:	00d2      	lsls	r2, r2, #3
200004ac:	08d2      	lsrs	r2, r2, #3
200004ae:	4922      	ldr	r1, [pc, #136]	; (20000538 <setSessionId+0x128>)
200004b0:	011b      	lsls	r3, r3, #4
200004b2:	18cb      	adds	r3, r1, r3
200004b4:	00d2      	lsls	r2, r2, #3
200004b6:	6859      	ldr	r1, [r3, #4]
200004b8:	2007      	movs	r0, #7
200004ba:	4001      	ands	r1, r0
200004bc:	430a      	orrs	r2, r1
200004be:	605a      	str	r2, [r3, #4]

            //Ändrar masken
            UINT32toHEADER(handlerList[index].mask.ID, header);
200004c0:	0020      	movs	r0, r4
200004c2:	183b      	adds	r3, r7, r0
200004c4:	781b      	ldrb	r3, [r3, #0]
200004c6:	4a1c      	ldr	r2, [pc, #112]	; (20000538 <setSessionId+0x128>)
200004c8:	2108      	movs	r1, #8
200004ca:	011b      	lsls	r3, r3, #4
200004cc:	18d3      	adds	r3, r2, r3
200004ce:	185b      	adds	r3, r3, r1
200004d0:	681b      	ldr	r3, [r3, #0]
200004d2:	08da      	lsrs	r2, r3, #3
200004d4:	197b      	adds	r3, r7, r5
200004d6:	601a      	str	r2, [r3, #0]
            header.sessionID = ~0;
200004d8:	68bb      	ldr	r3, [r7, #8]
200004da:	4a19      	ldr	r2, [pc, #100]	; (20000540 <setSessionId+0x130>)
200004dc:	4313      	orrs	r3, r2
200004de:	60bb      	str	r3, [r7, #8]
            HEADERtoUINT32(header, handlerList[index].mask.ID);
200004e0:	197b      	adds	r3, r7, r5
200004e2:	681a      	ldr	r2, [r3, #0]
200004e4:	0004      	movs	r4, r0
200004e6:	183b      	adds	r3, r7, r0
200004e8:	781b      	ldrb	r3, [r3, #0]
200004ea:	00d2      	lsls	r2, r2, #3
200004ec:	08d2      	lsrs	r2, r2, #3
200004ee:	4912      	ldr	r1, [pc, #72]	; (20000538 <setSessionId+0x128>)
200004f0:	2008      	movs	r0, #8
200004f2:	011b      	lsls	r3, r3, #4
200004f4:	18cb      	adds	r3, r1, r3
200004f6:	181b      	adds	r3, r3, r0
200004f8:	00d2      	lsls	r2, r2, #3
200004fa:	6819      	ldr	r1, [r3, #0]
200004fc:	2007      	movs	r0, #7
200004fe:	4001      	ands	r1, r0
20000500:	430a      	orrs	r2, r1
20000502:	601a      	str	r2, [r3, #0]

            CANactivateFilterHandler(index);
20000504:	0020      	movs	r0, r4
20000506:	183b      	adds	r3, r7, r0
20000508:	781b      	ldrb	r3, [r3, #0]
2000050a:	0018      	movs	r0, r3
2000050c:	f7ff fdd2 	bl	200000b4 <CANactivateFilterHandler>
    for (uint8_t index = 0; index < HANDLERLISTSIZE; index++){
20000510:	210f      	movs	r1, #15
20000512:	187b      	adds	r3, r7, r1
20000514:	781a      	ldrb	r2, [r3, #0]
20000516:	187b      	adds	r3, r7, r1
20000518:	3201      	adds	r2, #1
2000051a:	701a      	strb	r2, [r3, #0]
2000051c:	230f      	movs	r3, #15
2000051e:	18fb      	adds	r3, r7, r3
20000520:	781b      	ldrb	r3, [r3, #0]
20000522:	2b0d      	cmp	r3, #13
20000524:	d986      	bls.n	20000434 <setSessionId+0x24>
        }
    }
}
20000526:	46c0      	nop			; (mov r8, r8)
20000528:	46bd      	mov	sp, r7
2000052a:	b004      	add	sp, #16
2000052c:	bdb0      	pop	{r4, r5, r7, pc}
2000052e:	46c0      	nop			; (mov r8, r8)
20000530:	20003f70 	andcs	r3, r0, r0, ror pc
20000534:	20003e8c 	andcs	r3, r0, ip, lsl #29
20000538:	20003e90 	mulcs	r0, r0, lr
2000053c:	fffc00ff 			; <UNDEFINED> instruction: 0xfffc00ff
20000540:	0003ff00 	andeq	pc, r3, r0, lsl #30

20000544 <noSessionId>:

//Avaktiverar session ID för aktiva filter och kommande filter
void noSessionId(void){
20000544:	b580      	push	{r7, lr}
20000546:	b082      	sub	sp, #8
20000548:	af00      	add	r7, sp, #0
    SessionIDActive = SESSIONIDINACTIVE;
2000054a:	4b21      	ldr	r3, [pc, #132]	; (200005d0 <noSessionId+0x8c>)
2000054c:	2200      	movs	r2, #0
2000054e:	701a      	strb	r2, [r3, #0]

    for (uint8_t index = 0; index < HANDLERLISTSIZE; index++){
20000550:	1dfb      	adds	r3, r7, #7
20000552:	2200      	movs	r2, #0
20000554:	701a      	strb	r2, [r3, #0]
20000556:	e032      	b.n	200005be <noSessionId+0x7a>
        //Avaktiverar filtering för sessionID på de aktiva filtren
        if(handlerList[index].state == ENABLE){
20000558:	1dfb      	adds	r3, r7, #7
2000055a:	781b      	ldrb	r3, [r3, #0]
2000055c:	4a1d      	ldr	r2, [pc, #116]	; (200005d4 <noSessionId+0x90>)
2000055e:	011b      	lsls	r3, r3, #4
20000560:	18d3      	adds	r3, r2, r3
20000562:	330c      	adds	r3, #12
20000564:	781b      	ldrb	r3, [r3, #0]
20000566:	2b01      	cmp	r3, #1
20000568:	d124      	bne.n	200005b4 <noSessionId+0x70>
            //Används för omvandling
            Header header;

            UINT32toHEADER(handlerList[index].mask.ID, header);
2000056a:	1dfb      	adds	r3, r7, #7
2000056c:	781b      	ldrb	r3, [r3, #0]
2000056e:	4a19      	ldr	r2, [pc, #100]	; (200005d4 <noSessionId+0x90>)
20000570:	2108      	movs	r1, #8
20000572:	011b      	lsls	r3, r3, #4
20000574:	18d3      	adds	r3, r2, r3
20000576:	185b      	adds	r3, r3, r1
20000578:	681b      	ldr	r3, [r3, #0]
2000057a:	08da      	lsrs	r2, r3, #3
2000057c:	003b      	movs	r3, r7
2000057e:	601a      	str	r2, [r3, #0]
            header.sessionID  = 0;
20000580:	683b      	ldr	r3, [r7, #0]
20000582:	4a15      	ldr	r2, [pc, #84]	; (200005d8 <noSessionId+0x94>)
20000584:	4013      	ands	r3, r2
20000586:	603b      	str	r3, [r7, #0]
            HEADERtoUINT32(header, handlerList[index].mask.ID);
20000588:	003b      	movs	r3, r7
2000058a:	681a      	ldr	r2, [r3, #0]
2000058c:	1dfb      	adds	r3, r7, #7
2000058e:	781b      	ldrb	r3, [r3, #0]
20000590:	00d2      	lsls	r2, r2, #3
20000592:	08d2      	lsrs	r2, r2, #3
20000594:	490f      	ldr	r1, [pc, #60]	; (200005d4 <noSessionId+0x90>)
20000596:	2008      	movs	r0, #8
20000598:	011b      	lsls	r3, r3, #4
2000059a:	18cb      	adds	r3, r1, r3
2000059c:	181b      	adds	r3, r3, r0
2000059e:	00d2      	lsls	r2, r2, #3
200005a0:	6819      	ldr	r1, [r3, #0]
200005a2:	2007      	movs	r0, #7
200005a4:	4001      	ands	r1, r0
200005a6:	430a      	orrs	r2, r1
200005a8:	601a      	str	r2, [r3, #0]
            CANactivateFilterHandler(index);
200005aa:	1dfb      	adds	r3, r7, #7
200005ac:	781b      	ldrb	r3, [r3, #0]
200005ae:	0018      	movs	r0, r3
200005b0:	f7ff fd80 	bl	200000b4 <CANactivateFilterHandler>
    for (uint8_t index = 0; index < HANDLERLISTSIZE; index++){
200005b4:	1dfb      	adds	r3, r7, #7
200005b6:	781a      	ldrb	r2, [r3, #0]
200005b8:	1dfb      	adds	r3, r7, #7
200005ba:	3201      	adds	r2, #1
200005bc:	701a      	strb	r2, [r3, #0]
200005be:	1dfb      	adds	r3, r7, #7
200005c0:	781b      	ldrb	r3, [r3, #0]
200005c2:	2b0d      	cmp	r3, #13
200005c4:	d9c8      	bls.n	20000558 <noSessionId+0x14>
        }
    }
}
200005c6:	46c0      	nop			; (mov r8, r8)
200005c8:	46bd      	mov	sp, r7
200005ca:	b002      	add	sp, #8
200005cc:	bd80      	pop	{r7, pc}
200005ce:	46c0      	nop			; (mov r8, r8)
200005d0:	20003f70 	andcs	r3, r0, r0, ror pc
200005d4:	20003e90 	mulcs	r0, r0, lr
200005d8:	fffc00ff 			; <UNDEFINED> instruction: 0xfffc00ff

200005dc <can_init>:

uint8_t can_init() {
200005dc:	b5f0      	push	{r4, r5, r6, r7, lr}
200005de:	b089      	sub	sp, #36	; 0x24
200005e0:	af00      	add	r7, sp, #0
	CAN_InitTypeDef CAN_InitStructure;
	NVIC_InitTypeDef NVIC_InitStructure;
	GPIO_InitTypeDef GPIO_InitStructure;

	RCC_APB1PeriphClockCmd(RCC_APB1Periph_CAN1, ENABLE);
200005e2:	2380      	movs	r3, #128	; 0x80
200005e4:	049b      	lsls	r3, r3, #18
200005e6:	2101      	movs	r1, #1
200005e8:	0018      	movs	r0, r3
200005ea:	f002 fc51 	bl	20002e90 <RCC_APB1PeriphClockCmd>
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);
200005ee:	2380      	movs	r3, #128	; 0x80
200005f0:	01db      	lsls	r3, r3, #7
200005f2:	2101      	movs	r1, #1
200005f4:	0018      	movs	r0, r3
200005f6:	f002 fc6b 	bl	20002ed0 <RCC_APB2PeriphClockCmd>
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE);
200005fa:	2101      	movs	r1, #1
200005fc:	2002      	movs	r0, #2
200005fe:	f002 fbe7 	bl	20002dd0 <RCC_AHB1PeriphClockCmd>

	// Connect CAN pins to AF9. See more below
	GPIO_PinAFConfig(GPIOB, GPIO_PinSource9, GPIO_AF_CAN1);
20000602:	4b61      	ldr	r3, [pc, #388]	; (20000788 <can_init+0x1ac>)
20000604:	2209      	movs	r2, #9
20000606:	2109      	movs	r1, #9
20000608:	0018      	movs	r0, r3
2000060a:	f001 fbe4 	bl	20001dd6 <GPIO_PinAFConfig>
    GPIO_PinAFConfig(GPIOB, GPIO_PinSource8, GPIO_AF_CAN1);  
2000060e:	4b5e      	ldr	r3, [pc, #376]	; (20000788 <can_init+0x1ac>)
20000610:	2209      	movs	r2, #9
20000612:	2108      	movs	r1, #8
20000614:	0018      	movs	r0, r3
20000616:	f001 fbde 	bl	20001dd6 <GPIO_PinAFConfig>
	// Configure CAN RX and TX pins
	// See page 41 of MD407 reference manual
	// Connect CAN1 pins to AF
    // PB9 - CAN1 TX
    // PB8 - CAN1 RX
    GPIO_PinAFConfig(GPIOB, GPIO_PinSource9, GPIO_AF_CAN1);  	
2000061a:	4b5b      	ldr	r3, [pc, #364]	; (20000788 <can_init+0x1ac>)
2000061c:	2209      	movs	r2, #9
2000061e:	2109      	movs	r1, #9
20000620:	0018      	movs	r0, r3
20000622:	f001 fbd8 	bl	20001dd6 <GPIO_PinAFConfig>
    GPIO_PinAFConfig(GPIOB, GPIO_PinSource8, GPIO_AF_CAN1);  
20000626:	4b58      	ldr	r3, [pc, #352]	; (20000788 <can_init+0x1ac>)
20000628:	2209      	movs	r2, #9
2000062a:	2108      	movs	r1, #8
2000062c:	0018      	movs	r0, r3
2000062e:	f001 fbd2 	bl	20001dd6 <GPIO_PinAFConfig>

    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_9;
20000632:	1d3b      	adds	r3, r7, #4
20000634:	2280      	movs	r2, #128	; 0x80
20000636:	0092      	lsls	r2, r2, #2
20000638:	601a      	str	r2, [r3, #0]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
2000063a:	1d3b      	adds	r3, r7, #4
2000063c:	2202      	movs	r2, #2
2000063e:	711a      	strb	r2, [r3, #4]
    GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
20000640:	1d3b      	adds	r3, r7, #4
20000642:	2200      	movs	r2, #0
20000644:	719a      	strb	r2, [r3, #6]
    GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
20000646:	1d3b      	adds	r3, r7, #4
20000648:	2200      	movs	r2, #0
2000064a:	71da      	strb	r2, [r3, #7]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
2000064c:	1d3b      	adds	r3, r7, #4
2000064e:	2202      	movs	r2, #2
20000650:	715a      	strb	r2, [r3, #5]
    GPIO_Init(GPIOB, &GPIO_InitStructure);	
20000652:	1d3b      	adds	r3, r7, #4
20000654:	4a4c      	ldr	r2, [pc, #304]	; (20000788 <can_init+0x1ac>)
20000656:	0019      	movs	r1, r3
20000658:	0010      	movs	r0, r2
2000065a:	f001 fa3f 	bl	20001adc <GPIO_Init>

    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_8;	
2000065e:	1d3b      	adds	r3, r7, #4
20000660:	2280      	movs	r2, #128	; 0x80
20000662:	0052      	lsls	r2, r2, #1
20000664:	601a      	str	r2, [r3, #0]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
20000666:	1d3b      	adds	r3, r7, #4
20000668:	2202      	movs	r2, #2
2000066a:	711a      	strb	r2, [r3, #4]
    GPIO_InitStructure.GPIO_OType = GPIO_Mode_IN;
2000066c:	1d3b      	adds	r3, r7, #4
2000066e:	2200      	movs	r2, #0
20000670:	719a      	strb	r2, [r3, #6]
    GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;	
20000672:	1d3b      	adds	r3, r7, #4
20000674:	2201      	movs	r2, #1
20000676:	71da      	strb	r2, [r3, #7]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
20000678:	1d3b      	adds	r3, r7, #4
2000067a:	2202      	movs	r2, #2
2000067c:	715a      	strb	r2, [r3, #5]
    GPIO_Init(GPIOB, &GPIO_InitStructure);
2000067e:	1d3b      	adds	r3, r7, #4
20000680:	4a41      	ldr	r2, [pc, #260]	; (20000788 <can_init+0x1ac>)
20000682:	0019      	movs	r1, r3
20000684:	0010      	movs	r0, r2
20000686:	f001 fa29 	bl	20001adc <GPIO_Init>
    
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_6;
2000068a:	1d3b      	adds	r3, r7, #4
2000068c:	2240      	movs	r2, #64	; 0x40
2000068e:	601a      	str	r2, [r3, #0]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
20000690:	1d3b      	adds	r3, r7, #4
20000692:	2202      	movs	r2, #2
20000694:	711a      	strb	r2, [r3, #4]
    GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
20000696:	1d3b      	adds	r3, r7, #4
20000698:	2200      	movs	r2, #0
2000069a:	719a      	strb	r2, [r3, #6]
    GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
2000069c:	1d3b      	adds	r3, r7, #4
2000069e:	2200      	movs	r2, #0
200006a0:	71da      	strb	r2, [r3, #7]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
200006a2:	1d3b      	adds	r3, r7, #4
200006a4:	2202      	movs	r2, #2
200006a6:	715a      	strb	r2, [r3, #5]
    GPIO_Init(GPIOB, &GPIO_InitStructure);	
200006a8:	1d3b      	adds	r3, r7, #4
200006aa:	4a37      	ldr	r2, [pc, #220]	; (20000788 <can_init+0x1ac>)
200006ac:	0019      	movs	r1, r3
200006ae:	0010      	movs	r0, r2
200006b0:	f001 fa14 	bl	20001adc <GPIO_Init>

    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_5;	
200006b4:	1d3b      	adds	r3, r7, #4
200006b6:	2220      	movs	r2, #32
200006b8:	601a      	str	r2, [r3, #0]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
200006ba:	1d3b      	adds	r3, r7, #4
200006bc:	2202      	movs	r2, #2
200006be:	711a      	strb	r2, [r3, #4]
    GPIO_InitStructure.GPIO_OType = GPIO_Mode_IN;
200006c0:	1d3b      	adds	r3, r7, #4
200006c2:	2200      	movs	r2, #0
200006c4:	719a      	strb	r2, [r3, #6]
    GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;	
200006c6:	1d3b      	adds	r3, r7, #4
200006c8:	2201      	movs	r2, #1
200006ca:	71da      	strb	r2, [r3, #7]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
200006cc:	1d3b      	adds	r3, r7, #4
200006ce:	2202      	movs	r2, #2
200006d0:	715a      	strb	r2, [r3, #5]
    GPIO_Init(GPIOB, &GPIO_InitStructure);
200006d2:	1d3b      	adds	r3, r7, #4
200006d4:	4a2c      	ldr	r2, [pc, #176]	; (20000788 <can_init+0x1ac>)
200006d6:	0019      	movs	r1, r3
200006d8:	0010      	movs	r0, r2
200006da:	f001 f9ff 	bl	20001adc <GPIO_Init>
	
	NVIC_InitStructure.NVIC_IRQChannel = CAN1_RX0_IRQn;
200006de:	210c      	movs	r1, #12
200006e0:	187b      	adds	r3, r7, r1
200006e2:	2214      	movs	r2, #20
200006e4:	701a      	strb	r2, [r3, #0]
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = __CAN_IRQ_PRIORITY;
200006e6:	187b      	adds	r3, r7, r1
200006e8:	2202      	movs	r2, #2
200006ea:	705a      	strb	r2, [r3, #1]
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0x2;
200006ec:	187b      	adds	r3, r7, r1
200006ee:	2202      	movs	r2, #2
200006f0:	709a      	strb	r2, [r3, #2]
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
200006f2:	187b      	adds	r3, r7, r1
200006f4:	2201      	movs	r2, #1
200006f6:	70da      	strb	r2, [r3, #3]
	NVIC_Init(&NVIC_InitStructure);
200006f8:	187b      	adds	r3, r7, r1
200006fa:	0018      	movs	r0, r3
200006fc:	f001 fe74 	bl	200023e8 <NVIC_Init>

	/* CAN register init */
	CAN_DeInit(CAN1);
20000700:	4b22      	ldr	r3, [pc, #136]	; (2000078c <can_init+0x1b0>)
20000702:	0018      	movs	r0, r3
20000704:	f000 f848 	bl	20000798 <CAN_DeInit>

	/* CAN cell init */
	CAN_InitStructure.CAN_TTCM = DISABLE; // time-triggered communication mode = DISABLED
20000708:	2510      	movs	r5, #16
2000070a:	197b      	adds	r3, r7, r5
2000070c:	2200      	movs	r2, #0
2000070e:	719a      	strb	r2, [r3, #6]
    CAN_InitStructure.CAN_ABOM = DISABLE; // automatic bus-off management mode = DISABLED
20000710:	197b      	adds	r3, r7, r5
20000712:	2200      	movs	r2, #0
20000714:	71da      	strb	r2, [r3, #7]
    CAN_InitStructure.CAN_AWUM = DISABLE; // automatic wake-up mode = DISABLED
20000716:	197b      	adds	r3, r7, r5
20000718:	2200      	movs	r2, #0
2000071a:	721a      	strb	r2, [r3, #8]
    CAN_InitStructure.CAN_NART = DISABLE; // non-automatic retransmission mode = DISABLED
2000071c:	197b      	adds	r3, r7, r5
2000071e:	2200      	movs	r2, #0
20000720:	725a      	strb	r2, [r3, #9]
    CAN_InitStructure.CAN_RFLM = DISABLE; // receive FIFO locked mode = DISABLED
20000722:	197b      	adds	r3, r7, r5
20000724:	2200      	movs	r2, #0
20000726:	729a      	strb	r2, [r3, #10]
    CAN_InitStructure.CAN_TXFP = DISABLE; // transmit FIFO priority = DISABLED
20000728:	197b      	adds	r3, r7, r5
2000072a:	2200      	movs	r2, #0
2000072c:	72da      	strb	r2, [r3, #11]
    CAN_InitStructure.CAN_Mode = CAN_Mode_Normal; // normal CAN mode
2000072e:	197b      	adds	r3, r7, r5
20000730:	2200      	movs	r2, #0
20000732:	709a      	strb	r2, [r3, #2]

	/* CAN Baudrate = 1 MBps (CAN clocked at 30 MHz) */
	CAN_InitStructure.CAN_BS1 = CAN_BS1_3tq;
20000734:	197b      	adds	r3, r7, r5
20000736:	2202      	movs	r2, #2
20000738:	711a      	strb	r2, [r3, #4]
	CAN_InitStructure.CAN_BS2 = CAN_BS2_4tq;
2000073a:	197b      	adds	r3, r7, r5
2000073c:	2203      	movs	r2, #3
2000073e:	715a      	strb	r2, [r3, #5]
	CAN_InitStructure.CAN_Prescaler = 7;
20000740:	197b      	adds	r3, r7, r5
20000742:	2207      	movs	r2, #7
20000744:	801a      	strh	r2, [r3, #0]

    //Avaktiverar alla filter
    CANdisableAllFilterHandlers();
20000746:	f7ff fdbf 	bl	200002c8 <CANdisableAllFilterHandlers>

	uint8_t can_init_status = CAN_Init(CAN1, &CAN_InitStructure);
2000074a:	261f      	movs	r6, #31
2000074c:	19bc      	adds	r4, r7, r6
2000074e:	197b      	adds	r3, r7, r5
20000750:	4a0e      	ldr	r2, [pc, #56]	; (2000078c <can_init+0x1b0>)
20000752:	0019      	movs	r1, r3
20000754:	0010      	movs	r0, r2
20000756:	f000 f847 	bl	200007e8 <CAN_Init>
2000075a:	0003      	movs	r3, r0
2000075c:	7023      	strb	r3, [r4, #0]

	*((void (**)(void) ) CAN1_IRQ_VECTOR ) = can_irq_handler;
2000075e:	4b0c      	ldr	r3, [pc, #48]	; (20000790 <can_init+0x1b4>)
20000760:	4a0c      	ldr	r2, [pc, #48]	; (20000794 <can_init+0x1b8>)
20000762:	601a      	str	r2, [r3, #0]
	// We need the following function because it's not equivalent to what NVIC_Init does with respect
	// to IRQ priority. Which seems bananas to me...
    NVIC_SetPriority( CAN1_RX0_IRQn, __CAN_IRQ_PRIORITY);
20000764:	2102      	movs	r1, #2
20000766:	2014      	movs	r0, #20
20000768:	f7ff fc52 	bl	20000010 <NVIC_SetPriority>
	CAN_ITConfig(CAN1, CAN_IT_FMP0, ENABLE);
2000076c:	4b07      	ldr	r3, [pc, #28]	; (2000078c <can_init+0x1b0>)
2000076e:	2201      	movs	r2, #1
20000770:	2102      	movs	r1, #2
20000772:	0018      	movs	r0, r3
20000774:	f000 fea1 	bl	200014ba <CAN_ITConfig>

    //Avaktiverar Session ID
    noSessionId();
20000778:	f7ff fee4 	bl	20000544 <noSessionId>

	return can_init_status;
2000077c:	19bb      	adds	r3, r7, r6
2000077e:	781b      	ldrb	r3, [r3, #0]
20000780:	0018      	movs	r0, r3
20000782:	46bd      	mov	sp, r7
20000784:	b009      	add	sp, #36	; 0x24
20000786:	bdf0      	pop	{r4, r5, r6, r7, pc}
20000788:	40020400 	andmi	r0, r2, r0, lsl #8
2000078c:	40006400 	andmi	r6, r0, r0, lsl #8
20000790:	2001c090 	mulcs	r1, r0, r0
20000794:	200003a5 	andcs	r0, r0, r5, lsr #7

20000798 <CAN_DeInit>:
  * @param  CANx: where x can be 1,2 or 3 to select the CAN peripheral.
  * @note   CAN3 peripheral is available only for STM32F413_423xx devices
  * @retval None.
  */
void CAN_DeInit(CAN_TypeDef* CANx)
{
20000798:	b580      	push	{r7, lr}
2000079a:	b082      	sub	sp, #8
2000079c:	af00      	add	r7, sp, #0
2000079e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
 
  if (CANx == CAN1)
200007a0:	687b      	ldr	r3, [r7, #4]
200007a2:	4a10      	ldr	r2, [pc, #64]	; (200007e4 <CAN_DeInit+0x4c>)
200007a4:	4293      	cmp	r3, r2
200007a6:	d10c      	bne.n	200007c2 <CAN_DeInit+0x2a>
  {
    /* Enable CAN1 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_CAN1, ENABLE);
200007a8:	2380      	movs	r3, #128	; 0x80
200007aa:	049b      	lsls	r3, r3, #18
200007ac:	2101      	movs	r1, #1
200007ae:	0018      	movs	r0, r3
200007b0:	f002 fc0e 	bl	20002fd0 <RCC_APB1PeriphResetCmd>
    /* Release CAN1 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_CAN1, DISABLE);
200007b4:	2380      	movs	r3, #128	; 0x80
200007b6:	049b      	lsls	r3, r3, #18
200007b8:	2100      	movs	r1, #0
200007ba:	0018      	movs	r0, r3
200007bc:	f002 fc08 	bl	20002fd0 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_CAN2, ENABLE);
    /* Release CAN2 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_CAN2, DISABLE);
  }
#endif /* STM32F413_423xx */
}
200007c0:	e00b      	b.n	200007da <CAN_DeInit+0x42>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_CAN2, ENABLE);
200007c2:	2380      	movs	r3, #128	; 0x80
200007c4:	04db      	lsls	r3, r3, #19
200007c6:	2101      	movs	r1, #1
200007c8:	0018      	movs	r0, r3
200007ca:	f002 fc01 	bl	20002fd0 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_CAN2, DISABLE);
200007ce:	2380      	movs	r3, #128	; 0x80
200007d0:	04db      	lsls	r3, r3, #19
200007d2:	2100      	movs	r1, #0
200007d4:	0018      	movs	r0, r3
200007d6:	f002 fbfb 	bl	20002fd0 <RCC_APB1PeriphResetCmd>
}
200007da:	46c0      	nop			; (mov r8, r8)
200007dc:	46bd      	mov	sp, r7
200007de:	b002      	add	sp, #8
200007e0:	bd80      	pop	{r7, pc}
200007e2:	46c0      	nop			; (mov r8, r8)
200007e4:	40006400 	andmi	r6, r0, r0, lsl #8

200007e8 <CAN_Init>:
  * @note   CAN3 peripheral is available only for STM32F413_423xx devices
  * @retval Constant indicates initialization succeed which will be 
  *         CAN_InitStatus_Failed or CAN_InitStatus_Success.
  */
uint8_t CAN_Init(CAN_TypeDef* CANx, CAN_InitTypeDef* CAN_InitStruct)
{
200007e8:	b580      	push	{r7, lr}
200007ea:	b084      	sub	sp, #16
200007ec:	af00      	add	r7, sp, #0
200007ee:	6078      	str	r0, [r7, #4]
200007f0:	6039      	str	r1, [r7, #0]
  uint8_t InitStatus = CAN_InitStatus_Failed;
200007f2:	230f      	movs	r3, #15
200007f4:	18fb      	adds	r3, r7, r3
200007f6:	2200      	movs	r2, #0
200007f8:	701a      	strb	r2, [r3, #0]
  uint32_t wait_ack = 0x00000000;
200007fa:	2300      	movs	r3, #0
200007fc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_CAN_BS1(CAN_InitStruct->CAN_BS1));
  assert_param(IS_CAN_BS2(CAN_InitStruct->CAN_BS2));
  assert_param(IS_CAN_PRESCALER(CAN_InitStruct->CAN_Prescaler));

  /* Exit from sleep mode */
  CANx->MCR &= (~(uint32_t)CAN_MCR_SLEEP);
200007fe:	687b      	ldr	r3, [r7, #4]
20000800:	681b      	ldr	r3, [r3, #0]
20000802:	2202      	movs	r2, #2
20000804:	4393      	bics	r3, r2
20000806:	001a      	movs	r2, r3
20000808:	687b      	ldr	r3, [r7, #4]
2000080a:	601a      	str	r2, [r3, #0]

  /* Request initialisation */
  CANx->MCR |= CAN_MCR_INRQ ;
2000080c:	687b      	ldr	r3, [r7, #4]
2000080e:	681b      	ldr	r3, [r3, #0]
20000810:	2201      	movs	r2, #1
20000812:	431a      	orrs	r2, r3
20000814:	687b      	ldr	r3, [r7, #4]
20000816:	601a      	str	r2, [r3, #0]

  /* Wait the acknowledge */
  while (((CANx->MSR & CAN_MSR_INAK) != CAN_MSR_INAK) && (wait_ack != INAK_TIMEOUT))
20000818:	e002      	b.n	20000820 <CAN_Init+0x38>
  {
    wait_ack++;
2000081a:	68bb      	ldr	r3, [r7, #8]
2000081c:	3301      	adds	r3, #1
2000081e:	60bb      	str	r3, [r7, #8]
  while (((CANx->MSR & CAN_MSR_INAK) != CAN_MSR_INAK) && (wait_ack != INAK_TIMEOUT))
20000820:	687b      	ldr	r3, [r7, #4]
20000822:	685b      	ldr	r3, [r3, #4]
20000824:	2201      	movs	r2, #1
20000826:	4013      	ands	r3, r2
20000828:	2b01      	cmp	r3, #1
2000082a:	d003      	beq.n	20000834 <CAN_Init+0x4c>
2000082c:	68bb      	ldr	r3, [r7, #8]
2000082e:	4a5e      	ldr	r2, [pc, #376]	; (200009a8 <CAN_Init+0x1c0>)
20000830:	4293      	cmp	r3, r2
20000832:	d1f2      	bne.n	2000081a <CAN_Init+0x32>
  }

  /* Check acknowledge */
  if ((CANx->MSR & CAN_MSR_INAK) != CAN_MSR_INAK)
20000834:	687b      	ldr	r3, [r7, #4]
20000836:	685b      	ldr	r3, [r3, #4]
20000838:	2201      	movs	r2, #1
2000083a:	4013      	ands	r3, r2
2000083c:	2b01      	cmp	r3, #1
2000083e:	d004      	beq.n	2000084a <CAN_Init+0x62>
  {
    InitStatus = CAN_InitStatus_Failed;
20000840:	230f      	movs	r3, #15
20000842:	18fb      	adds	r3, r7, r3
20000844:	2200      	movs	r2, #0
20000846:	701a      	strb	r2, [r3, #0]
20000848:	e0a6      	b.n	20000998 <CAN_Init+0x1b0>
  }
  else 
  {
    /* Set the time triggered communication mode */
    if (CAN_InitStruct->CAN_TTCM == ENABLE)
2000084a:	683b      	ldr	r3, [r7, #0]
2000084c:	799b      	ldrb	r3, [r3, #6]
2000084e:	2b01      	cmp	r3, #1
20000850:	d106      	bne.n	20000860 <CAN_Init+0x78>
    {
      CANx->MCR |= CAN_MCR_TTCM;
20000852:	687b      	ldr	r3, [r7, #4]
20000854:	681b      	ldr	r3, [r3, #0]
20000856:	2280      	movs	r2, #128	; 0x80
20000858:	431a      	orrs	r2, r3
2000085a:	687b      	ldr	r3, [r7, #4]
2000085c:	601a      	str	r2, [r3, #0]
2000085e:	e006      	b.n	2000086e <CAN_Init+0x86>
    }
    else
    {
      CANx->MCR &= ~(uint32_t)CAN_MCR_TTCM;
20000860:	687b      	ldr	r3, [r7, #4]
20000862:	681b      	ldr	r3, [r3, #0]
20000864:	2280      	movs	r2, #128	; 0x80
20000866:	4393      	bics	r3, r2
20000868:	001a      	movs	r2, r3
2000086a:	687b      	ldr	r3, [r7, #4]
2000086c:	601a      	str	r2, [r3, #0]
    }

    /* Set the automatic bus-off management */
    if (CAN_InitStruct->CAN_ABOM == ENABLE)
2000086e:	683b      	ldr	r3, [r7, #0]
20000870:	79db      	ldrb	r3, [r3, #7]
20000872:	2b01      	cmp	r3, #1
20000874:	d106      	bne.n	20000884 <CAN_Init+0x9c>
    {
      CANx->MCR |= CAN_MCR_ABOM;
20000876:	687b      	ldr	r3, [r7, #4]
20000878:	681b      	ldr	r3, [r3, #0]
2000087a:	2240      	movs	r2, #64	; 0x40
2000087c:	431a      	orrs	r2, r3
2000087e:	687b      	ldr	r3, [r7, #4]
20000880:	601a      	str	r2, [r3, #0]
20000882:	e006      	b.n	20000892 <CAN_Init+0xaa>
    }
    else
    {
      CANx->MCR &= ~(uint32_t)CAN_MCR_ABOM;
20000884:	687b      	ldr	r3, [r7, #4]
20000886:	681b      	ldr	r3, [r3, #0]
20000888:	2240      	movs	r2, #64	; 0x40
2000088a:	4393      	bics	r3, r2
2000088c:	001a      	movs	r2, r3
2000088e:	687b      	ldr	r3, [r7, #4]
20000890:	601a      	str	r2, [r3, #0]
    }

    /* Set the automatic wake-up mode */
    if (CAN_InitStruct->CAN_AWUM == ENABLE)
20000892:	683b      	ldr	r3, [r7, #0]
20000894:	7a1b      	ldrb	r3, [r3, #8]
20000896:	2b01      	cmp	r3, #1
20000898:	d106      	bne.n	200008a8 <CAN_Init+0xc0>
    {
      CANx->MCR |= CAN_MCR_AWUM;
2000089a:	687b      	ldr	r3, [r7, #4]
2000089c:	681b      	ldr	r3, [r3, #0]
2000089e:	2220      	movs	r2, #32
200008a0:	431a      	orrs	r2, r3
200008a2:	687b      	ldr	r3, [r7, #4]
200008a4:	601a      	str	r2, [r3, #0]
200008a6:	e006      	b.n	200008b6 <CAN_Init+0xce>
    }
    else
    {
      CANx->MCR &= ~(uint32_t)CAN_MCR_AWUM;
200008a8:	687b      	ldr	r3, [r7, #4]
200008aa:	681b      	ldr	r3, [r3, #0]
200008ac:	2220      	movs	r2, #32
200008ae:	4393      	bics	r3, r2
200008b0:	001a      	movs	r2, r3
200008b2:	687b      	ldr	r3, [r7, #4]
200008b4:	601a      	str	r2, [r3, #0]
    }

    /* Set the no automatic retransmission */
    if (CAN_InitStruct->CAN_NART == ENABLE)
200008b6:	683b      	ldr	r3, [r7, #0]
200008b8:	7a5b      	ldrb	r3, [r3, #9]
200008ba:	2b01      	cmp	r3, #1
200008bc:	d106      	bne.n	200008cc <CAN_Init+0xe4>
    {
      CANx->MCR |= CAN_MCR_NART;
200008be:	687b      	ldr	r3, [r7, #4]
200008c0:	681b      	ldr	r3, [r3, #0]
200008c2:	2210      	movs	r2, #16
200008c4:	431a      	orrs	r2, r3
200008c6:	687b      	ldr	r3, [r7, #4]
200008c8:	601a      	str	r2, [r3, #0]
200008ca:	e006      	b.n	200008da <CAN_Init+0xf2>
    }
    else
    {
      CANx->MCR &= ~(uint32_t)CAN_MCR_NART;
200008cc:	687b      	ldr	r3, [r7, #4]
200008ce:	681b      	ldr	r3, [r3, #0]
200008d0:	2210      	movs	r2, #16
200008d2:	4393      	bics	r3, r2
200008d4:	001a      	movs	r2, r3
200008d6:	687b      	ldr	r3, [r7, #4]
200008d8:	601a      	str	r2, [r3, #0]
    }

    /* Set the receive FIFO locked mode */
    if (CAN_InitStruct->CAN_RFLM == ENABLE)
200008da:	683b      	ldr	r3, [r7, #0]
200008dc:	7a9b      	ldrb	r3, [r3, #10]
200008de:	2b01      	cmp	r3, #1
200008e0:	d106      	bne.n	200008f0 <CAN_Init+0x108>
    {
      CANx->MCR |= CAN_MCR_RFLM;
200008e2:	687b      	ldr	r3, [r7, #4]
200008e4:	681b      	ldr	r3, [r3, #0]
200008e6:	2208      	movs	r2, #8
200008e8:	431a      	orrs	r2, r3
200008ea:	687b      	ldr	r3, [r7, #4]
200008ec:	601a      	str	r2, [r3, #0]
200008ee:	e006      	b.n	200008fe <CAN_Init+0x116>
    }
    else
    {
      CANx->MCR &= ~(uint32_t)CAN_MCR_RFLM;
200008f0:	687b      	ldr	r3, [r7, #4]
200008f2:	681b      	ldr	r3, [r3, #0]
200008f4:	2208      	movs	r2, #8
200008f6:	4393      	bics	r3, r2
200008f8:	001a      	movs	r2, r3
200008fa:	687b      	ldr	r3, [r7, #4]
200008fc:	601a      	str	r2, [r3, #0]
    }

    /* Set the transmit FIFO priority */
    if (CAN_InitStruct->CAN_TXFP == ENABLE)
200008fe:	683b      	ldr	r3, [r7, #0]
20000900:	7adb      	ldrb	r3, [r3, #11]
20000902:	2b01      	cmp	r3, #1
20000904:	d106      	bne.n	20000914 <CAN_Init+0x12c>
    {
      CANx->MCR |= CAN_MCR_TXFP;
20000906:	687b      	ldr	r3, [r7, #4]
20000908:	681b      	ldr	r3, [r3, #0]
2000090a:	2204      	movs	r2, #4
2000090c:	431a      	orrs	r2, r3
2000090e:	687b      	ldr	r3, [r7, #4]
20000910:	601a      	str	r2, [r3, #0]
20000912:	e006      	b.n	20000922 <CAN_Init+0x13a>
    }
    else
    {
      CANx->MCR &= ~(uint32_t)CAN_MCR_TXFP;
20000914:	687b      	ldr	r3, [r7, #4]
20000916:	681b      	ldr	r3, [r3, #0]
20000918:	2204      	movs	r2, #4
2000091a:	4393      	bics	r3, r2
2000091c:	001a      	movs	r2, r3
2000091e:	687b      	ldr	r3, [r7, #4]
20000920:	601a      	str	r2, [r3, #0]
    }

    /* Set the bit timing register */
    CANx->BTR = (uint32_t)((uint32_t)CAN_InitStruct->CAN_Mode << 30) | \
20000922:	683b      	ldr	r3, [r7, #0]
20000924:	789b      	ldrb	r3, [r3, #2]
20000926:	079a      	lsls	r2, r3, #30
                ((uint32_t)CAN_InitStruct->CAN_SJW << 24) | \
20000928:	683b      	ldr	r3, [r7, #0]
2000092a:	78db      	ldrb	r3, [r3, #3]
2000092c:	061b      	lsls	r3, r3, #24
    CANx->BTR = (uint32_t)((uint32_t)CAN_InitStruct->CAN_Mode << 30) | \
2000092e:	431a      	orrs	r2, r3
                ((uint32_t)CAN_InitStruct->CAN_BS1 << 16) | \
20000930:	683b      	ldr	r3, [r7, #0]
20000932:	791b      	ldrb	r3, [r3, #4]
20000934:	041b      	lsls	r3, r3, #16
                ((uint32_t)CAN_InitStruct->CAN_SJW << 24) | \
20000936:	431a      	orrs	r2, r3
                ((uint32_t)CAN_InitStruct->CAN_BS2 << 20) | \
20000938:	683b      	ldr	r3, [r7, #0]
2000093a:	795b      	ldrb	r3, [r3, #5]
2000093c:	051b      	lsls	r3, r3, #20
                ((uint32_t)CAN_InitStruct->CAN_BS1 << 16) | \
2000093e:	431a      	orrs	r2, r3
               ((uint32_t)CAN_InitStruct->CAN_Prescaler - 1);
20000940:	683b      	ldr	r3, [r7, #0]
20000942:	881b      	ldrh	r3, [r3, #0]
20000944:	3b01      	subs	r3, #1
                ((uint32_t)CAN_InitStruct->CAN_BS2 << 20) | \
20000946:	431a      	orrs	r2, r3
    CANx->BTR = (uint32_t)((uint32_t)CAN_InitStruct->CAN_Mode << 30) | \
20000948:	687b      	ldr	r3, [r7, #4]
2000094a:	61da      	str	r2, [r3, #28]

    /* Request leave initialisation */
    CANx->MCR &= ~(uint32_t)CAN_MCR_INRQ;
2000094c:	687b      	ldr	r3, [r7, #4]
2000094e:	681b      	ldr	r3, [r3, #0]
20000950:	2201      	movs	r2, #1
20000952:	4393      	bics	r3, r2
20000954:	001a      	movs	r2, r3
20000956:	687b      	ldr	r3, [r7, #4]
20000958:	601a      	str	r2, [r3, #0]

   /* Wait the acknowledge */
   wait_ack = 0;
2000095a:	2300      	movs	r3, #0
2000095c:	60bb      	str	r3, [r7, #8]

   while (((CANx->MSR & CAN_MSR_INAK) == CAN_MSR_INAK) && (wait_ack != INAK_TIMEOUT))
2000095e:	e002      	b.n	20000966 <CAN_Init+0x17e>
   {
     wait_ack++;
20000960:	68bb      	ldr	r3, [r7, #8]
20000962:	3301      	adds	r3, #1
20000964:	60bb      	str	r3, [r7, #8]
   while (((CANx->MSR & CAN_MSR_INAK) == CAN_MSR_INAK) && (wait_ack != INAK_TIMEOUT))
20000966:	687b      	ldr	r3, [r7, #4]
20000968:	685b      	ldr	r3, [r3, #4]
2000096a:	2201      	movs	r2, #1
2000096c:	4013      	ands	r3, r2
2000096e:	2b01      	cmp	r3, #1
20000970:	d103      	bne.n	2000097a <CAN_Init+0x192>
20000972:	68bb      	ldr	r3, [r7, #8]
20000974:	4a0c      	ldr	r2, [pc, #48]	; (200009a8 <CAN_Init+0x1c0>)
20000976:	4293      	cmp	r3, r2
20000978:	d1f2      	bne.n	20000960 <CAN_Init+0x178>
   }

    /* ...and check acknowledged */
    if ((CANx->MSR & CAN_MSR_INAK) == CAN_MSR_INAK)
2000097a:	687b      	ldr	r3, [r7, #4]
2000097c:	685b      	ldr	r3, [r3, #4]
2000097e:	2201      	movs	r2, #1
20000980:	4013      	ands	r3, r2
20000982:	2b01      	cmp	r3, #1
20000984:	d104      	bne.n	20000990 <CAN_Init+0x1a8>
    {
      InitStatus = CAN_InitStatus_Failed;
20000986:	230f      	movs	r3, #15
20000988:	18fb      	adds	r3, r7, r3
2000098a:	2200      	movs	r2, #0
2000098c:	701a      	strb	r2, [r3, #0]
2000098e:	e003      	b.n	20000998 <CAN_Init+0x1b0>
    }
    else
    {
      InitStatus = CAN_InitStatus_Success ;
20000990:	230f      	movs	r3, #15
20000992:	18fb      	adds	r3, r7, r3
20000994:	2201      	movs	r2, #1
20000996:	701a      	strb	r2, [r3, #0]
    }
  }

  /* At this step, return the status of initialization */
  return InitStatus;
20000998:	230f      	movs	r3, #15
2000099a:	18fb      	adds	r3, r7, r3
2000099c:	781b      	ldrb	r3, [r3, #0]
}
2000099e:	0018      	movs	r0, r3
200009a0:	46bd      	mov	sp, r7
200009a2:	b004      	add	sp, #16
200009a4:	bd80      	pop	{r7, pc}
200009a6:	46c0      	nop			; (mov r8, r8)
200009a8:	0000ffff 	strdeq	pc, [r0], -pc	; <UNPREDICTABLE>

200009ac <CAN_FilterInit>:
  * @param  CAN_FilterInitStruct: pointer to a CAN_FilterInitTypeDef structure that
  *         contains the configuration information.
  * @retval None
  */
void CAN_FilterInit(CAN_FilterInitTypeDef* CAN_FilterInitStruct)
{
200009ac:	b590      	push	{r4, r7, lr}
200009ae:	b085      	sub	sp, #20
200009b0:	af00      	add	r7, sp, #0
200009b2:	6078      	str	r0, [r7, #4]
  uint32_t filter_number_bit_pos = 0;
200009b4:	2300      	movs	r3, #0
200009b6:	60fb      	str	r3, [r7, #12]
  assert_param(IS_CAN_FILTER_MODE(CAN_FilterInitStruct->CAN_FilterMode));
  assert_param(IS_CAN_FILTER_SCALE(CAN_FilterInitStruct->CAN_FilterScale));
  assert_param(IS_CAN_FILTER_FIFO(CAN_FilterInitStruct->CAN_FilterFIFOAssignment));
  assert_param(IS_FUNCTIONAL_STATE(CAN_FilterInitStruct->CAN_FilterActivation));

  filter_number_bit_pos = ((uint32_t)1) << CAN_FilterInitStruct->CAN_FilterNumber;
200009b8:	687b      	ldr	r3, [r7, #4]
200009ba:	7a9b      	ldrb	r3, [r3, #10]
200009bc:	001a      	movs	r2, r3
200009be:	2301      	movs	r3, #1
200009c0:	4093      	lsls	r3, r2
200009c2:	60fb      	str	r3, [r7, #12]

  /* Initialisation mode for the filter */
  CAN1->FMR |= FMR_FINIT;
200009c4:	4a64      	ldr	r2, [pc, #400]	; (20000b58 <CAN_FilterInit+0x1ac>)
200009c6:	2380      	movs	r3, #128	; 0x80
200009c8:	009b      	lsls	r3, r3, #2
200009ca:	58d3      	ldr	r3, [r2, r3]
200009cc:	4962      	ldr	r1, [pc, #392]	; (20000b58 <CAN_FilterInit+0x1ac>)
200009ce:	2201      	movs	r2, #1
200009d0:	431a      	orrs	r2, r3
200009d2:	2380      	movs	r3, #128	; 0x80
200009d4:	009b      	lsls	r3, r3, #2
200009d6:	50ca      	str	r2, [r1, r3]

  /* Filter Deactivation */
  CAN1->FA1R &= ~(uint32_t)filter_number_bit_pos;
200009d8:	4a5f      	ldr	r2, [pc, #380]	; (20000b58 <CAN_FilterInit+0x1ac>)
200009da:	2387      	movs	r3, #135	; 0x87
200009dc:	009b      	lsls	r3, r3, #2
200009de:	58d3      	ldr	r3, [r2, r3]
200009e0:	68fa      	ldr	r2, [r7, #12]
200009e2:	43d2      	mvns	r2, r2
200009e4:	495c      	ldr	r1, [pc, #368]	; (20000b58 <CAN_FilterInit+0x1ac>)
200009e6:	401a      	ands	r2, r3
200009e8:	2387      	movs	r3, #135	; 0x87
200009ea:	009b      	lsls	r3, r3, #2
200009ec:	50ca      	str	r2, [r1, r3]

  /* Filter Scale */
  if (CAN_FilterInitStruct->CAN_FilterScale == CAN_FilterScale_16bit)
200009ee:	687b      	ldr	r3, [r7, #4]
200009f0:	7b1b      	ldrb	r3, [r3, #12]
200009f2:	2b00      	cmp	r3, #0
200009f4:	d12c      	bne.n	20000a50 <CAN_FilterInit+0xa4>
  {
    /* 16-bit scale for the filter */
    CAN1->FS1R &= ~(uint32_t)filter_number_bit_pos;
200009f6:	4a58      	ldr	r2, [pc, #352]	; (20000b58 <CAN_FilterInit+0x1ac>)
200009f8:	2383      	movs	r3, #131	; 0x83
200009fa:	009b      	lsls	r3, r3, #2
200009fc:	58d3      	ldr	r3, [r2, r3]
200009fe:	68fa      	ldr	r2, [r7, #12]
20000a00:	43d2      	mvns	r2, r2
20000a02:	4955      	ldr	r1, [pc, #340]	; (20000b58 <CAN_FilterInit+0x1ac>)
20000a04:	401a      	ands	r2, r3
20000a06:	2383      	movs	r3, #131	; 0x83
20000a08:	009b      	lsls	r3, r3, #2
20000a0a:	50ca      	str	r2, [r1, r3]

    /* First 16-bit identifier and First 16-bit mask */
    /* Or First 16-bit identifier and Second 16-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdLow) << 16) |
20000a0c:	687b      	ldr	r3, [r7, #4]
20000a0e:	88db      	ldrh	r3, [r3, #6]
20000a10:	041b      	lsls	r3, r3, #16
        (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdLow);
20000a12:	687a      	ldr	r2, [r7, #4]
20000a14:	8852      	ldrh	r2, [r2, #2]
20000a16:	0014      	movs	r4, r2
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
20000a18:	494f      	ldr	r1, [pc, #316]	; (20000b58 <CAN_FilterInit+0x1ac>)
20000a1a:	687a      	ldr	r2, [r7, #4]
20000a1c:	7a92      	ldrb	r2, [r2, #10]
20000a1e:	0010      	movs	r0, r2
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdLow) << 16) |
20000a20:	4323      	orrs	r3, r4
20000a22:	001a      	movs	r2, r3
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
20000a24:	0003      	movs	r3, r0
20000a26:	3348      	adds	r3, #72	; 0x48
20000a28:	00db      	lsls	r3, r3, #3
20000a2a:	505a      	str	r2, [r3, r1]

    /* Second 16-bit identifier and Second 16-bit mask */
    /* Or Third 16-bit identifier and Fourth 16-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR2 = 
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdHigh) << 16) |
20000a2c:	687b      	ldr	r3, [r7, #4]
20000a2e:	889b      	ldrh	r3, [r3, #4]
20000a30:	041b      	lsls	r3, r3, #16
        (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdHigh);
20000a32:	687a      	ldr	r2, [r7, #4]
20000a34:	8812      	ldrh	r2, [r2, #0]
20000a36:	0014      	movs	r4, r2
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR2 = 
20000a38:	4947      	ldr	r1, [pc, #284]	; (20000b58 <CAN_FilterInit+0x1ac>)
20000a3a:	687a      	ldr	r2, [r7, #4]
20000a3c:	7a92      	ldrb	r2, [r2, #10]
20000a3e:	0010      	movs	r0, r2
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdHigh) << 16) |
20000a40:	4323      	orrs	r3, r4
20000a42:	001a      	movs	r2, r3
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR2 = 
20000a44:	0003      	movs	r3, r0
20000a46:	3348      	adds	r3, #72	; 0x48
20000a48:	00db      	lsls	r3, r3, #3
20000a4a:	18cb      	adds	r3, r1, r3
20000a4c:	3304      	adds	r3, #4
20000a4e:	601a      	str	r2, [r3, #0]
  }

  if (CAN_FilterInitStruct->CAN_FilterScale == CAN_FilterScale_32bit)
20000a50:	687b      	ldr	r3, [r7, #4]
20000a52:	7b1b      	ldrb	r3, [r3, #12]
20000a54:	2b01      	cmp	r3, #1
20000a56:	d12b      	bne.n	20000ab0 <CAN_FilterInit+0x104>
  {
    /* 32-bit scale for the filter */
    CAN1->FS1R |= filter_number_bit_pos;
20000a58:	4a3f      	ldr	r2, [pc, #252]	; (20000b58 <CAN_FilterInit+0x1ac>)
20000a5a:	2383      	movs	r3, #131	; 0x83
20000a5c:	009b      	lsls	r3, r3, #2
20000a5e:	58d2      	ldr	r2, [r2, r3]
20000a60:	493d      	ldr	r1, [pc, #244]	; (20000b58 <CAN_FilterInit+0x1ac>)
20000a62:	68fb      	ldr	r3, [r7, #12]
20000a64:	431a      	orrs	r2, r3
20000a66:	2383      	movs	r3, #131	; 0x83
20000a68:	009b      	lsls	r3, r3, #2
20000a6a:	50ca      	str	r2, [r1, r3]
    /* 32-bit identifier or First 32-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdHigh) << 16) |
20000a6c:	687b      	ldr	r3, [r7, #4]
20000a6e:	881b      	ldrh	r3, [r3, #0]
20000a70:	041b      	lsls	r3, r3, #16
        (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdLow);
20000a72:	687a      	ldr	r2, [r7, #4]
20000a74:	8852      	ldrh	r2, [r2, #2]
20000a76:	0014      	movs	r4, r2
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
20000a78:	4937      	ldr	r1, [pc, #220]	; (20000b58 <CAN_FilterInit+0x1ac>)
20000a7a:	687a      	ldr	r2, [r7, #4]
20000a7c:	7a92      	ldrb	r2, [r2, #10]
20000a7e:	0010      	movs	r0, r2
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdHigh) << 16) |
20000a80:	4323      	orrs	r3, r4
20000a82:	001a      	movs	r2, r3
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
20000a84:	0003      	movs	r3, r0
20000a86:	3348      	adds	r3, #72	; 0x48
20000a88:	00db      	lsls	r3, r3, #3
20000a8a:	505a      	str	r2, [r3, r1]
    /* 32-bit mask or Second 32-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR2 = 
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdHigh) << 16) |
20000a8c:	687b      	ldr	r3, [r7, #4]
20000a8e:	889b      	ldrh	r3, [r3, #4]
20000a90:	041b      	lsls	r3, r3, #16
        (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdLow);
20000a92:	687a      	ldr	r2, [r7, #4]
20000a94:	88d2      	ldrh	r2, [r2, #6]
20000a96:	0014      	movs	r4, r2
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR2 = 
20000a98:	492f      	ldr	r1, [pc, #188]	; (20000b58 <CAN_FilterInit+0x1ac>)
20000a9a:	687a      	ldr	r2, [r7, #4]
20000a9c:	7a92      	ldrb	r2, [r2, #10]
20000a9e:	0010      	movs	r0, r2
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdHigh) << 16) |
20000aa0:	4323      	orrs	r3, r4
20000aa2:	001a      	movs	r2, r3
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR2 = 
20000aa4:	0003      	movs	r3, r0
20000aa6:	3348      	adds	r3, #72	; 0x48
20000aa8:	00db      	lsls	r3, r3, #3
20000aaa:	18cb      	adds	r3, r1, r3
20000aac:	3304      	adds	r3, #4
20000aae:	601a      	str	r2, [r3, #0]
  }

  /* Filter Mode */
  if (CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdMask)
20000ab0:	687b      	ldr	r3, [r7, #4]
20000ab2:	7adb      	ldrb	r3, [r3, #11]
20000ab4:	2b00      	cmp	r3, #0
20000ab6:	d10b      	bne.n	20000ad0 <CAN_FilterInit+0x124>
  {
    /*Id/Mask mode for the filter*/
    CAN1->FM1R &= ~(uint32_t)filter_number_bit_pos;
20000ab8:	4a27      	ldr	r2, [pc, #156]	; (20000b58 <CAN_FilterInit+0x1ac>)
20000aba:	2381      	movs	r3, #129	; 0x81
20000abc:	009b      	lsls	r3, r3, #2
20000abe:	58d3      	ldr	r3, [r2, r3]
20000ac0:	68fa      	ldr	r2, [r7, #12]
20000ac2:	43d2      	mvns	r2, r2
20000ac4:	4924      	ldr	r1, [pc, #144]	; (20000b58 <CAN_FilterInit+0x1ac>)
20000ac6:	401a      	ands	r2, r3
20000ac8:	2381      	movs	r3, #129	; 0x81
20000aca:	009b      	lsls	r3, r3, #2
20000acc:	50ca      	str	r2, [r1, r3]
20000ace:	e009      	b.n	20000ae4 <CAN_FilterInit+0x138>
  }
  else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
  {
    /*Identifier list mode for the filter*/
    CAN1->FM1R |= (uint32_t)filter_number_bit_pos;
20000ad0:	4a21      	ldr	r2, [pc, #132]	; (20000b58 <CAN_FilterInit+0x1ac>)
20000ad2:	2381      	movs	r3, #129	; 0x81
20000ad4:	009b      	lsls	r3, r3, #2
20000ad6:	58d2      	ldr	r2, [r2, r3]
20000ad8:	491f      	ldr	r1, [pc, #124]	; (20000b58 <CAN_FilterInit+0x1ac>)
20000ada:	68fb      	ldr	r3, [r7, #12]
20000adc:	431a      	orrs	r2, r3
20000ade:	2381      	movs	r3, #129	; 0x81
20000ae0:	009b      	lsls	r3, r3, #2
20000ae2:	50ca      	str	r2, [r1, r3]
  }

  /* Filter FIFO assignment */
  if (CAN_FilterInitStruct->CAN_FilterFIFOAssignment == CAN_Filter_FIFO0)
20000ae4:	687b      	ldr	r3, [r7, #4]
20000ae6:	891b      	ldrh	r3, [r3, #8]
20000ae8:	2b00      	cmp	r3, #0
20000aea:	d10a      	bne.n	20000b02 <CAN_FilterInit+0x156>
  {
    /* FIFO 0 assignation for the filter */
    CAN1->FFA1R &= ~(uint32_t)filter_number_bit_pos;
20000aec:	4a1a      	ldr	r2, [pc, #104]	; (20000b58 <CAN_FilterInit+0x1ac>)
20000aee:	2385      	movs	r3, #133	; 0x85
20000af0:	009b      	lsls	r3, r3, #2
20000af2:	58d3      	ldr	r3, [r2, r3]
20000af4:	68fa      	ldr	r2, [r7, #12]
20000af6:	43d2      	mvns	r2, r2
20000af8:	4917      	ldr	r1, [pc, #92]	; (20000b58 <CAN_FilterInit+0x1ac>)
20000afa:	401a      	ands	r2, r3
20000afc:	2385      	movs	r3, #133	; 0x85
20000afe:	009b      	lsls	r3, r3, #2
20000b00:	50ca      	str	r2, [r1, r3]
  }

  if (CAN_FilterInitStruct->CAN_FilterFIFOAssignment == CAN_Filter_FIFO1)
20000b02:	687b      	ldr	r3, [r7, #4]
20000b04:	891b      	ldrh	r3, [r3, #8]
20000b06:	2b01      	cmp	r3, #1
20000b08:	d109      	bne.n	20000b1e <CAN_FilterInit+0x172>
  {
    /* FIFO 1 assignation for the filter */
    CAN1->FFA1R |= (uint32_t)filter_number_bit_pos;
20000b0a:	4a13      	ldr	r2, [pc, #76]	; (20000b58 <CAN_FilterInit+0x1ac>)
20000b0c:	2385      	movs	r3, #133	; 0x85
20000b0e:	009b      	lsls	r3, r3, #2
20000b10:	58d2      	ldr	r2, [r2, r3]
20000b12:	4911      	ldr	r1, [pc, #68]	; (20000b58 <CAN_FilterInit+0x1ac>)
20000b14:	68fb      	ldr	r3, [r7, #12]
20000b16:	431a      	orrs	r2, r3
20000b18:	2385      	movs	r3, #133	; 0x85
20000b1a:	009b      	lsls	r3, r3, #2
20000b1c:	50ca      	str	r2, [r1, r3]
  }
  
  /* Filter activation */
  if (CAN_FilterInitStruct->CAN_FilterActivation == ENABLE)
20000b1e:	687b      	ldr	r3, [r7, #4]
20000b20:	7b5b      	ldrb	r3, [r3, #13]
20000b22:	2b01      	cmp	r3, #1
20000b24:	d109      	bne.n	20000b3a <CAN_FilterInit+0x18e>
  {
    CAN1->FA1R |= filter_number_bit_pos;
20000b26:	4a0c      	ldr	r2, [pc, #48]	; (20000b58 <CAN_FilterInit+0x1ac>)
20000b28:	2387      	movs	r3, #135	; 0x87
20000b2a:	009b      	lsls	r3, r3, #2
20000b2c:	58d2      	ldr	r2, [r2, r3]
20000b2e:	490a      	ldr	r1, [pc, #40]	; (20000b58 <CAN_FilterInit+0x1ac>)
20000b30:	68fb      	ldr	r3, [r7, #12]
20000b32:	431a      	orrs	r2, r3
20000b34:	2387      	movs	r3, #135	; 0x87
20000b36:	009b      	lsls	r3, r3, #2
20000b38:	50ca      	str	r2, [r1, r3]
  }

  /* Leave the initialisation mode for the filter */
  CAN1->FMR &= ~FMR_FINIT;
20000b3a:	4a07      	ldr	r2, [pc, #28]	; (20000b58 <CAN_FilterInit+0x1ac>)
20000b3c:	2380      	movs	r3, #128	; 0x80
20000b3e:	009b      	lsls	r3, r3, #2
20000b40:	58d3      	ldr	r3, [r2, r3]
20000b42:	4905      	ldr	r1, [pc, #20]	; (20000b58 <CAN_FilterInit+0x1ac>)
20000b44:	2201      	movs	r2, #1
20000b46:	4393      	bics	r3, r2
20000b48:	001a      	movs	r2, r3
20000b4a:	2380      	movs	r3, #128	; 0x80
20000b4c:	009b      	lsls	r3, r3, #2
20000b4e:	50ca      	str	r2, [r1, r3]
}
20000b50:	46c0      	nop			; (mov r8, r8)
20000b52:	46bd      	mov	sp, r7
20000b54:	b005      	add	sp, #20
20000b56:	bd90      	pop	{r4, r7, pc}
20000b58:	40006400 	andmi	r6, r0, r0, lsl #8

20000b5c <CAN_StructInit>:
  * @brief  Fills each CAN_InitStruct member with its default value.
  * @param  CAN_InitStruct: pointer to a CAN_InitTypeDef structure which ill be initialized.
  * @retval None
  */
void CAN_StructInit(CAN_InitTypeDef* CAN_InitStruct)
{
20000b5c:	b580      	push	{r7, lr}
20000b5e:	b082      	sub	sp, #8
20000b60:	af00      	add	r7, sp, #0
20000b62:	6078      	str	r0, [r7, #4]
  /* Reset CAN init structure parameters values */
  
  /* Initialize the time triggered communication mode */
  CAN_InitStruct->CAN_TTCM = DISABLE;
20000b64:	687b      	ldr	r3, [r7, #4]
20000b66:	2200      	movs	r2, #0
20000b68:	719a      	strb	r2, [r3, #6]
  
  /* Initialize the automatic bus-off management */
  CAN_InitStruct->CAN_ABOM = DISABLE;
20000b6a:	687b      	ldr	r3, [r7, #4]
20000b6c:	2200      	movs	r2, #0
20000b6e:	71da      	strb	r2, [r3, #7]
  
  /* Initialize the automatic wake-up mode */
  CAN_InitStruct->CAN_AWUM = DISABLE;
20000b70:	687b      	ldr	r3, [r7, #4]
20000b72:	2200      	movs	r2, #0
20000b74:	721a      	strb	r2, [r3, #8]
  
  /* Initialize the no automatic retransmission */
  CAN_InitStruct->CAN_NART = DISABLE;
20000b76:	687b      	ldr	r3, [r7, #4]
20000b78:	2200      	movs	r2, #0
20000b7a:	725a      	strb	r2, [r3, #9]
  
  /* Initialize the receive FIFO locked mode */
  CAN_InitStruct->CAN_RFLM = DISABLE;
20000b7c:	687b      	ldr	r3, [r7, #4]
20000b7e:	2200      	movs	r2, #0
20000b80:	729a      	strb	r2, [r3, #10]
  
  /* Initialize the transmit FIFO priority */
  CAN_InitStruct->CAN_TXFP = DISABLE;
20000b82:	687b      	ldr	r3, [r7, #4]
20000b84:	2200      	movs	r2, #0
20000b86:	72da      	strb	r2, [r3, #11]
  
  /* Initialize the CAN_Mode member */
  CAN_InitStruct->CAN_Mode = CAN_Mode_Normal;
20000b88:	687b      	ldr	r3, [r7, #4]
20000b8a:	2200      	movs	r2, #0
20000b8c:	709a      	strb	r2, [r3, #2]
  
  /* Initialize the CAN_SJW member */
  CAN_InitStruct->CAN_SJW = CAN_SJW_1tq;
20000b8e:	687b      	ldr	r3, [r7, #4]
20000b90:	2200      	movs	r2, #0
20000b92:	70da      	strb	r2, [r3, #3]
  
  /* Initialize the CAN_BS1 member */
  CAN_InitStruct->CAN_BS1 = CAN_BS1_4tq;
20000b94:	687b      	ldr	r3, [r7, #4]
20000b96:	2203      	movs	r2, #3
20000b98:	711a      	strb	r2, [r3, #4]
  
  /* Initialize the CAN_BS2 member */
  CAN_InitStruct->CAN_BS2 = CAN_BS2_3tq;
20000b9a:	687b      	ldr	r3, [r7, #4]
20000b9c:	2202      	movs	r2, #2
20000b9e:	715a      	strb	r2, [r3, #5]
  
  /* Initialize the CAN_Prescaler member */
  CAN_InitStruct->CAN_Prescaler = 1;
20000ba0:	687b      	ldr	r3, [r7, #4]
20000ba2:	2201      	movs	r2, #1
20000ba4:	801a      	strh	r2, [r3, #0]
}
20000ba6:	46c0      	nop			; (mov r8, r8)
20000ba8:	46bd      	mov	sp, r7
20000baa:	b002      	add	sp, #8
20000bac:	bd80      	pop	{r7, pc}

20000bae <CAN_SlaveStartBank>:
  * @brief  Select the start bank filter for slave CAN.
  * @param  CAN_BankNumber: Select the start slave bank filter from 1..27.
  * @retval None
  */
void CAN_SlaveStartBank(uint8_t CAN_BankNumber) 
{
20000bae:	b580      	push	{r7, lr}
20000bb0:	b082      	sub	sp, #8
20000bb2:	af00      	add	r7, sp, #0
20000bb4:	0002      	movs	r2, r0
20000bb6:	1dfb      	adds	r3, r7, #7
20000bb8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_CAN_BANKNUMBER(CAN_BankNumber));
  
  /* Enter Initialisation mode for the filter */
  CAN1->FMR |= FMR_FINIT;
20000bba:	4a17      	ldr	r2, [pc, #92]	; (20000c18 <CAN_SlaveStartBank+0x6a>)
20000bbc:	2380      	movs	r3, #128	; 0x80
20000bbe:	009b      	lsls	r3, r3, #2
20000bc0:	58d3      	ldr	r3, [r2, r3]
20000bc2:	4915      	ldr	r1, [pc, #84]	; (20000c18 <CAN_SlaveStartBank+0x6a>)
20000bc4:	2201      	movs	r2, #1
20000bc6:	431a      	orrs	r2, r3
20000bc8:	2380      	movs	r3, #128	; 0x80
20000bca:	009b      	lsls	r3, r3, #2
20000bcc:	50ca      	str	r2, [r1, r3]
  
  /* Select the start slave bank */
  CAN1->FMR &= (uint32_t)0xFFFFC0F1 ;
20000bce:	4a12      	ldr	r2, [pc, #72]	; (20000c18 <CAN_SlaveStartBank+0x6a>)
20000bd0:	2380      	movs	r3, #128	; 0x80
20000bd2:	009b      	lsls	r3, r3, #2
20000bd4:	58d3      	ldr	r3, [r2, r3]
20000bd6:	4910      	ldr	r1, [pc, #64]	; (20000c18 <CAN_SlaveStartBank+0x6a>)
20000bd8:	4a10      	ldr	r2, [pc, #64]	; (20000c1c <CAN_SlaveStartBank+0x6e>)
20000bda:	401a      	ands	r2, r3
20000bdc:	2380      	movs	r3, #128	; 0x80
20000bde:	009b      	lsls	r3, r3, #2
20000be0:	50ca      	str	r2, [r1, r3]
  CAN1->FMR |= (uint32_t)(CAN_BankNumber)<<8;
20000be2:	4a0d      	ldr	r2, [pc, #52]	; (20000c18 <CAN_SlaveStartBank+0x6a>)
20000be4:	2380      	movs	r3, #128	; 0x80
20000be6:	009b      	lsls	r3, r3, #2
20000be8:	58d2      	ldr	r2, [r2, r3]
20000bea:	1dfb      	adds	r3, r7, #7
20000bec:	781b      	ldrb	r3, [r3, #0]
20000bee:	021b      	lsls	r3, r3, #8
20000bf0:	4909      	ldr	r1, [pc, #36]	; (20000c18 <CAN_SlaveStartBank+0x6a>)
20000bf2:	431a      	orrs	r2, r3
20000bf4:	2380      	movs	r3, #128	; 0x80
20000bf6:	009b      	lsls	r3, r3, #2
20000bf8:	50ca      	str	r2, [r1, r3]
  
  /* Leave Initialisation mode for the filter */
  CAN1->FMR &= ~FMR_FINIT;
20000bfa:	4a07      	ldr	r2, [pc, #28]	; (20000c18 <CAN_SlaveStartBank+0x6a>)
20000bfc:	2380      	movs	r3, #128	; 0x80
20000bfe:	009b      	lsls	r3, r3, #2
20000c00:	58d3      	ldr	r3, [r2, r3]
20000c02:	4905      	ldr	r1, [pc, #20]	; (20000c18 <CAN_SlaveStartBank+0x6a>)
20000c04:	2201      	movs	r2, #1
20000c06:	4393      	bics	r3, r2
20000c08:	001a      	movs	r2, r3
20000c0a:	2380      	movs	r3, #128	; 0x80
20000c0c:	009b      	lsls	r3, r3, #2
20000c0e:	50ca      	str	r2, [r1, r3]
}
20000c10:	46c0      	nop			; (mov r8, r8)
20000c12:	46bd      	mov	sp, r7
20000c14:	b002      	add	sp, #8
20000c16:	bd80      	pop	{r7, pc}
20000c18:	40006400 	andmi	r6, r0, r0, lsl #8
20000c1c:	ffffc0f1 			; <UNDEFINED> instruction: 0xffffc0f1

20000c20 <CAN_DBGFreeze>:
  *          or DISABLE (CAN is working during debug).
  * @note   CAN3 peripheral is available only for STM32F413_423xx devices
  * @retval None
  */
void CAN_DBGFreeze(CAN_TypeDef* CANx, FunctionalState NewState)
{
20000c20:	b580      	push	{r7, lr}
20000c22:	b082      	sub	sp, #8
20000c24:	af00      	add	r7, sp, #0
20000c26:	6078      	str	r0, [r7, #4]
20000c28:	000a      	movs	r2, r1
20000c2a:	1cfb      	adds	r3, r7, #3
20000c2c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
20000c2e:	1cfb      	adds	r3, r7, #3
20000c30:	781b      	ldrb	r3, [r3, #0]
20000c32:	2b00      	cmp	r3, #0
20000c34:	d007      	beq.n	20000c46 <CAN_DBGFreeze+0x26>
  {
    /* Enable Debug Freeze  */
    CANx->MCR |= MCR_DBF;
20000c36:	687b      	ldr	r3, [r7, #4]
20000c38:	681b      	ldr	r3, [r3, #0]
20000c3a:	2280      	movs	r2, #128	; 0x80
20000c3c:	0252      	lsls	r2, r2, #9
20000c3e:	431a      	orrs	r2, r3
20000c40:	687b      	ldr	r3, [r7, #4]
20000c42:	601a      	str	r2, [r3, #0]
  else
  {
    /* Disable Debug Freeze */
    CANx->MCR &= ~MCR_DBF;
  }
}
20000c44:	e005      	b.n	20000c52 <CAN_DBGFreeze+0x32>
    CANx->MCR &= ~MCR_DBF;
20000c46:	687b      	ldr	r3, [r7, #4]
20000c48:	681b      	ldr	r3, [r3, #0]
20000c4a:	4a04      	ldr	r2, [pc, #16]	; (20000c5c <CAN_DBGFreeze+0x3c>)
20000c4c:	401a      	ands	r2, r3
20000c4e:	687b      	ldr	r3, [r7, #4]
20000c50:	601a      	str	r2, [r3, #0]
}
20000c52:	46c0      	nop			; (mov r8, r8)
20000c54:	46bd      	mov	sp, r7
20000c56:	b002      	add	sp, #8
20000c58:	bd80      	pop	{r7, pc}
20000c5a:	46c0      	nop			; (mov r8, r8)
20000c5c:	fffeffff 			; <UNDEFINED> instruction: 0xfffeffff

20000c60 <CAN_TTComModeCmd>:
  *         in data byte 7.
  * @note   CAN3 peripheral is available only for STM32F413_423xx devices
  * @retval None
  */
void CAN_TTComModeCmd(CAN_TypeDef* CANx, FunctionalState NewState)
{
20000c60:	b580      	push	{r7, lr}
20000c62:	b082      	sub	sp, #8
20000c64:	af00      	add	r7, sp, #0
20000c66:	6078      	str	r0, [r7, #4]
20000c68:	000a      	movs	r2, r1
20000c6a:	1cfb      	adds	r3, r7, #3
20000c6c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
20000c6e:	1cfb      	adds	r3, r7, #3
20000c70:	781b      	ldrb	r3, [r3, #0]
20000c72:	2b00      	cmp	r3, #0
20000c74:	d02a      	beq.n	20000ccc <CAN_TTComModeCmd+0x6c>
  {
    /* Enable the TTCM mode */
    CANx->MCR |= CAN_MCR_TTCM;
20000c76:	687b      	ldr	r3, [r7, #4]
20000c78:	681b      	ldr	r3, [r3, #0]
20000c7a:	2280      	movs	r2, #128	; 0x80
20000c7c:	431a      	orrs	r2, r3
20000c7e:	687b      	ldr	r3, [r7, #4]
20000c80:	601a      	str	r2, [r3, #0]

    /* Set TGT bits */
    CANx->sTxMailBox[0].TDTR |= ((uint32_t)CAN_TDT0R_TGT);
20000c82:	687a      	ldr	r2, [r7, #4]
20000c84:	23c2      	movs	r3, #194	; 0xc2
20000c86:	005b      	lsls	r3, r3, #1
20000c88:	58d3      	ldr	r3, [r2, r3]
20000c8a:	2280      	movs	r2, #128	; 0x80
20000c8c:	0052      	lsls	r2, r2, #1
20000c8e:	431a      	orrs	r2, r3
20000c90:	0011      	movs	r1, r2
20000c92:	687a      	ldr	r2, [r7, #4]
20000c94:	23c2      	movs	r3, #194	; 0xc2
20000c96:	005b      	lsls	r3, r3, #1
20000c98:	50d1      	str	r1, [r2, r3]
    CANx->sTxMailBox[1].TDTR |= ((uint32_t)CAN_TDT1R_TGT);
20000c9a:	687a      	ldr	r2, [r7, #4]
20000c9c:	23ca      	movs	r3, #202	; 0xca
20000c9e:	005b      	lsls	r3, r3, #1
20000ca0:	58d3      	ldr	r3, [r2, r3]
20000ca2:	2280      	movs	r2, #128	; 0x80
20000ca4:	0052      	lsls	r2, r2, #1
20000ca6:	431a      	orrs	r2, r3
20000ca8:	0011      	movs	r1, r2
20000caa:	687a      	ldr	r2, [r7, #4]
20000cac:	23ca      	movs	r3, #202	; 0xca
20000cae:	005b      	lsls	r3, r3, #1
20000cb0:	50d1      	str	r1, [r2, r3]
    CANx->sTxMailBox[2].TDTR |= ((uint32_t)CAN_TDT2R_TGT);
20000cb2:	687a      	ldr	r2, [r7, #4]
20000cb4:	23d2      	movs	r3, #210	; 0xd2
20000cb6:	005b      	lsls	r3, r3, #1
20000cb8:	58d3      	ldr	r3, [r2, r3]
20000cba:	2280      	movs	r2, #128	; 0x80
20000cbc:	0052      	lsls	r2, r2, #1
20000cbe:	431a      	orrs	r2, r3
20000cc0:	0011      	movs	r1, r2
20000cc2:	687a      	ldr	r2, [r7, #4]
20000cc4:	23d2      	movs	r3, #210	; 0xd2
20000cc6:	005b      	lsls	r3, r3, #1
20000cc8:	50d1      	str	r1, [r2, r3]
    /* Reset TGT bits */
    CANx->sTxMailBox[0].TDTR &= ((uint32_t)~CAN_TDT0R_TGT);
    CANx->sTxMailBox[1].TDTR &= ((uint32_t)~CAN_TDT1R_TGT);
    CANx->sTxMailBox[2].TDTR &= ((uint32_t)~CAN_TDT2R_TGT);
  }
}
20000cca:	e027      	b.n	20000d1c <CAN_TTComModeCmd+0xbc>
    CANx->MCR &= (uint32_t)(~(uint32_t)CAN_MCR_TTCM);
20000ccc:	687b      	ldr	r3, [r7, #4]
20000cce:	681b      	ldr	r3, [r3, #0]
20000cd0:	2280      	movs	r2, #128	; 0x80
20000cd2:	4393      	bics	r3, r2
20000cd4:	001a      	movs	r2, r3
20000cd6:	687b      	ldr	r3, [r7, #4]
20000cd8:	601a      	str	r2, [r3, #0]
    CANx->sTxMailBox[0].TDTR &= ((uint32_t)~CAN_TDT0R_TGT);
20000cda:	687a      	ldr	r2, [r7, #4]
20000cdc:	23c2      	movs	r3, #194	; 0xc2
20000cde:	005b      	lsls	r3, r3, #1
20000ce0:	58d3      	ldr	r3, [r2, r3]
20000ce2:	4a10      	ldr	r2, [pc, #64]	; (20000d24 <CAN_TTComModeCmd+0xc4>)
20000ce4:	4013      	ands	r3, r2
20000ce6:	0019      	movs	r1, r3
20000ce8:	687a      	ldr	r2, [r7, #4]
20000cea:	23c2      	movs	r3, #194	; 0xc2
20000cec:	005b      	lsls	r3, r3, #1
20000cee:	50d1      	str	r1, [r2, r3]
    CANx->sTxMailBox[1].TDTR &= ((uint32_t)~CAN_TDT1R_TGT);
20000cf0:	687a      	ldr	r2, [r7, #4]
20000cf2:	23ca      	movs	r3, #202	; 0xca
20000cf4:	005b      	lsls	r3, r3, #1
20000cf6:	58d3      	ldr	r3, [r2, r3]
20000cf8:	4a0a      	ldr	r2, [pc, #40]	; (20000d24 <CAN_TTComModeCmd+0xc4>)
20000cfa:	4013      	ands	r3, r2
20000cfc:	0019      	movs	r1, r3
20000cfe:	687a      	ldr	r2, [r7, #4]
20000d00:	23ca      	movs	r3, #202	; 0xca
20000d02:	005b      	lsls	r3, r3, #1
20000d04:	50d1      	str	r1, [r2, r3]
    CANx->sTxMailBox[2].TDTR &= ((uint32_t)~CAN_TDT2R_TGT);
20000d06:	687a      	ldr	r2, [r7, #4]
20000d08:	23d2      	movs	r3, #210	; 0xd2
20000d0a:	005b      	lsls	r3, r3, #1
20000d0c:	58d3      	ldr	r3, [r2, r3]
20000d0e:	4a05      	ldr	r2, [pc, #20]	; (20000d24 <CAN_TTComModeCmd+0xc4>)
20000d10:	4013      	ands	r3, r2
20000d12:	0019      	movs	r1, r3
20000d14:	687a      	ldr	r2, [r7, #4]
20000d16:	23d2      	movs	r3, #210	; 0xd2
20000d18:	005b      	lsls	r3, r3, #1
20000d1a:	50d1      	str	r1, [r2, r3]
}
20000d1c:	46c0      	nop			; (mov r8, r8)
20000d1e:	46bd      	mov	sp, r7
20000d20:	b002      	add	sp, #8
20000d22:	bd80      	pop	{r7, pc}
20000d24:	fffffeff 			; <UNDEFINED> instruction: 0xfffffeff

20000d28 <CAN_Transmit>:
  * @note   CAN3 peripheral is available only for STM32F413_423xx devices
  * @retval The number of the mailbox that is used for transmission or
  *         CAN_TxStatus_NoMailBox if there is no empty mailbox.
  */
uint8_t CAN_Transmit(CAN_TypeDef* CANx, CanTxMsg* TxMessage)
{
20000d28:	b590      	push	{r4, r7, lr}
20000d2a:	b085      	sub	sp, #20
20000d2c:	af00      	add	r7, sp, #0
20000d2e:	6078      	str	r0, [r7, #4]
20000d30:	6039      	str	r1, [r7, #0]
  uint8_t transmit_mailbox = 0;
20000d32:	230f      	movs	r3, #15
20000d34:	18fb      	adds	r3, r7, r3
20000d36:	2200      	movs	r2, #0
20000d38:	701a      	strb	r2, [r3, #0]
  assert_param(IS_CAN_IDTYPE(TxMessage->IDE));
  assert_param(IS_CAN_RTR(TxMessage->RTR));
  assert_param(IS_CAN_DLC(TxMessage->DLC));

  /* Select one empty transmit mailbox */
  if ((CANx->TSR&CAN_TSR_TME0) == CAN_TSR_TME0)
20000d3a:	687b      	ldr	r3, [r7, #4]
20000d3c:	689a      	ldr	r2, [r3, #8]
20000d3e:	2380      	movs	r3, #128	; 0x80
20000d40:	04db      	lsls	r3, r3, #19
20000d42:	401a      	ands	r2, r3
20000d44:	2380      	movs	r3, #128	; 0x80
20000d46:	04db      	lsls	r3, r3, #19
20000d48:	429a      	cmp	r2, r3
20000d4a:	d104      	bne.n	20000d56 <CAN_Transmit+0x2e>
  {
    transmit_mailbox = 0;
20000d4c:	230f      	movs	r3, #15
20000d4e:	18fb      	adds	r3, r7, r3
20000d50:	2200      	movs	r2, #0
20000d52:	701a      	strb	r2, [r3, #0]
20000d54:	e01f      	b.n	20000d96 <CAN_Transmit+0x6e>
  }
  else if ((CANx->TSR&CAN_TSR_TME1) == CAN_TSR_TME1)
20000d56:	687b      	ldr	r3, [r7, #4]
20000d58:	689a      	ldr	r2, [r3, #8]
20000d5a:	2380      	movs	r3, #128	; 0x80
20000d5c:	051b      	lsls	r3, r3, #20
20000d5e:	401a      	ands	r2, r3
20000d60:	2380      	movs	r3, #128	; 0x80
20000d62:	051b      	lsls	r3, r3, #20
20000d64:	429a      	cmp	r2, r3
20000d66:	d104      	bne.n	20000d72 <CAN_Transmit+0x4a>
  {
    transmit_mailbox = 1;
20000d68:	230f      	movs	r3, #15
20000d6a:	18fb      	adds	r3, r7, r3
20000d6c:	2201      	movs	r2, #1
20000d6e:	701a      	strb	r2, [r3, #0]
20000d70:	e011      	b.n	20000d96 <CAN_Transmit+0x6e>
  }
  else if ((CANx->TSR&CAN_TSR_TME2) == CAN_TSR_TME2)
20000d72:	687b      	ldr	r3, [r7, #4]
20000d74:	689a      	ldr	r2, [r3, #8]
20000d76:	2380      	movs	r3, #128	; 0x80
20000d78:	055b      	lsls	r3, r3, #21
20000d7a:	401a      	ands	r2, r3
20000d7c:	2380      	movs	r3, #128	; 0x80
20000d7e:	055b      	lsls	r3, r3, #21
20000d80:	429a      	cmp	r2, r3
20000d82:	d104      	bne.n	20000d8e <CAN_Transmit+0x66>
  {
    transmit_mailbox = 2;
20000d84:	230f      	movs	r3, #15
20000d86:	18fb      	adds	r3, r7, r3
20000d88:	2202      	movs	r2, #2
20000d8a:	701a      	strb	r2, [r3, #0]
20000d8c:	e003      	b.n	20000d96 <CAN_Transmit+0x6e>
  }
  else
  {
    transmit_mailbox = CAN_TxStatus_NoMailBox;
20000d8e:	230f      	movs	r3, #15
20000d90:	18fb      	adds	r3, r7, r3
20000d92:	2204      	movs	r2, #4
20000d94:	701a      	strb	r2, [r3, #0]
  }

  if (transmit_mailbox != CAN_TxStatus_NoMailBox)
20000d96:	230f      	movs	r3, #15
20000d98:	18fb      	adds	r3, r7, r3
20000d9a:	781b      	ldrb	r3, [r3, #0]
20000d9c:	2b04      	cmp	r3, #4
20000d9e:	d100      	bne.n	20000da2 <CAN_Transmit+0x7a>
20000da0:	e0ac      	b.n	20000efc <CAN_Transmit+0x1d4>
  {
    /* Set up the Id */
    CANx->sTxMailBox[transmit_mailbox].TIR &= TMIDxR_TXRQ;
20000da2:	210f      	movs	r1, #15
20000da4:	187b      	adds	r3, r7, r1
20000da6:	781a      	ldrb	r2, [r3, #0]
20000da8:	687b      	ldr	r3, [r7, #4]
20000daa:	3218      	adds	r2, #24
20000dac:	0112      	lsls	r2, r2, #4
20000dae:	58d3      	ldr	r3, [r2, r3]
20000db0:	187a      	adds	r2, r7, r1
20000db2:	7812      	ldrb	r2, [r2, #0]
20000db4:	2101      	movs	r1, #1
20000db6:	4019      	ands	r1, r3
20000db8:	687b      	ldr	r3, [r7, #4]
20000dba:	3218      	adds	r2, #24
20000dbc:	0112      	lsls	r2, r2, #4
20000dbe:	50d1      	str	r1, [r2, r3]
    if (TxMessage->IDE == CAN_Id_Standard)
20000dc0:	683b      	ldr	r3, [r7, #0]
20000dc2:	7a1b      	ldrb	r3, [r3, #8]
20000dc4:	2b00      	cmp	r3, #0
20000dc6:	d114      	bne.n	20000df2 <CAN_Transmit+0xca>
    {
      assert_param(IS_CAN_STDID(TxMessage->StdId));  
      CANx->sTxMailBox[transmit_mailbox].TIR |= ((TxMessage->StdId << 21) | \
20000dc8:	200f      	movs	r0, #15
20000dca:	183b      	adds	r3, r7, r0
20000dcc:	781a      	ldrb	r2, [r3, #0]
20000dce:	687b      	ldr	r3, [r7, #4]
20000dd0:	3218      	adds	r2, #24
20000dd2:	0112      	lsls	r2, r2, #4
20000dd4:	58d1      	ldr	r1, [r2, r3]
20000dd6:	683b      	ldr	r3, [r7, #0]
20000dd8:	681b      	ldr	r3, [r3, #0]
20000dda:	055b      	lsls	r3, r3, #21
                                                  TxMessage->RTR);
20000ddc:	683a      	ldr	r2, [r7, #0]
20000dde:	7a52      	ldrb	r2, [r2, #9]
      CANx->sTxMailBox[transmit_mailbox].TIR |= ((TxMessage->StdId << 21) | \
20000de0:	4313      	orrs	r3, r2
20000de2:	183a      	adds	r2, r7, r0
20000de4:	7812      	ldrb	r2, [r2, #0]
20000de6:	4319      	orrs	r1, r3
20000de8:	687b      	ldr	r3, [r7, #4]
20000dea:	3218      	adds	r2, #24
20000dec:	0112      	lsls	r2, r2, #4
20000dee:	50d1      	str	r1, [r2, r3]
20000df0:	e016      	b.n	20000e20 <CAN_Transmit+0xf8>
    }
    else
    {
      assert_param(IS_CAN_EXTID(TxMessage->ExtId));
      CANx->sTxMailBox[transmit_mailbox].TIR |= ((TxMessage->ExtId << 3) | \
20000df2:	200f      	movs	r0, #15
20000df4:	183b      	adds	r3, r7, r0
20000df6:	781a      	ldrb	r2, [r3, #0]
20000df8:	687b      	ldr	r3, [r7, #4]
20000dfa:	3218      	adds	r2, #24
20000dfc:	0112      	lsls	r2, r2, #4
20000dfe:	58d1      	ldr	r1, [r2, r3]
20000e00:	683b      	ldr	r3, [r7, #0]
20000e02:	685b      	ldr	r3, [r3, #4]
20000e04:	00db      	lsls	r3, r3, #3
                                                  TxMessage->IDE | \
20000e06:	683a      	ldr	r2, [r7, #0]
20000e08:	7a12      	ldrb	r2, [r2, #8]
      CANx->sTxMailBox[transmit_mailbox].TIR |= ((TxMessage->ExtId << 3) | \
20000e0a:	4313      	orrs	r3, r2
                                                  TxMessage->RTR);
20000e0c:	683a      	ldr	r2, [r7, #0]
20000e0e:	7a52      	ldrb	r2, [r2, #9]
                                                  TxMessage->IDE | \
20000e10:	4313      	orrs	r3, r2
      CANx->sTxMailBox[transmit_mailbox].TIR |= ((TxMessage->ExtId << 3) | \
20000e12:	183a      	adds	r2, r7, r0
20000e14:	7812      	ldrb	r2, [r2, #0]
20000e16:	4319      	orrs	r1, r3
20000e18:	687b      	ldr	r3, [r7, #4]
20000e1a:	3218      	adds	r2, #24
20000e1c:	0112      	lsls	r2, r2, #4
20000e1e:	50d1      	str	r1, [r2, r3]
    }
    
    /* Set up the DLC */
    TxMessage->DLC &= (uint8_t)0x0000000F;
20000e20:	683b      	ldr	r3, [r7, #0]
20000e22:	7a9b      	ldrb	r3, [r3, #10]
20000e24:	220f      	movs	r2, #15
20000e26:	4013      	ands	r3, r2
20000e28:	b2da      	uxtb	r2, r3
20000e2a:	683b      	ldr	r3, [r7, #0]
20000e2c:	729a      	strb	r2, [r3, #10]
    CANx->sTxMailBox[transmit_mailbox].TDTR &= (uint32_t)0xFFFFFFF0;
20000e2e:	240f      	movs	r4, #15
20000e30:	193b      	adds	r3, r7, r4
20000e32:	781b      	ldrb	r3, [r3, #0]
20000e34:	687a      	ldr	r2, [r7, #4]
20000e36:	3318      	adds	r3, #24
20000e38:	011b      	lsls	r3, r3, #4
20000e3a:	18d3      	adds	r3, r2, r3
20000e3c:	3304      	adds	r3, #4
20000e3e:	681a      	ldr	r2, [r3, #0]
20000e40:	193b      	adds	r3, r7, r4
20000e42:	781b      	ldrb	r3, [r3, #0]
20000e44:	210f      	movs	r1, #15
20000e46:	438a      	bics	r2, r1
20000e48:	6879      	ldr	r1, [r7, #4]
20000e4a:	3318      	adds	r3, #24
20000e4c:	011b      	lsls	r3, r3, #4
20000e4e:	18cb      	adds	r3, r1, r3
20000e50:	3304      	adds	r3, #4
20000e52:	601a      	str	r2, [r3, #0]
    CANx->sTxMailBox[transmit_mailbox].TDTR |= TxMessage->DLC;
20000e54:	193b      	adds	r3, r7, r4
20000e56:	781b      	ldrb	r3, [r3, #0]
20000e58:	687a      	ldr	r2, [r7, #4]
20000e5a:	3318      	adds	r3, #24
20000e5c:	011b      	lsls	r3, r3, #4
20000e5e:	18d3      	adds	r3, r2, r3
20000e60:	3304      	adds	r3, #4
20000e62:	681a      	ldr	r2, [r3, #0]
20000e64:	683b      	ldr	r3, [r7, #0]
20000e66:	7a9b      	ldrb	r3, [r3, #10]
20000e68:	0019      	movs	r1, r3
20000e6a:	193b      	adds	r3, r7, r4
20000e6c:	781b      	ldrb	r3, [r3, #0]
20000e6e:	430a      	orrs	r2, r1
20000e70:	6879      	ldr	r1, [r7, #4]
20000e72:	3318      	adds	r3, #24
20000e74:	011b      	lsls	r3, r3, #4
20000e76:	18cb      	adds	r3, r1, r3
20000e78:	3304      	adds	r3, #4
20000e7a:	601a      	str	r2, [r3, #0]

    /* Set up the data field */
    CANx->sTxMailBox[transmit_mailbox].TDLR = (((uint32_t)TxMessage->Data[3] << 24) | 
20000e7c:	683b      	ldr	r3, [r7, #0]
20000e7e:	7b9b      	ldrb	r3, [r3, #14]
20000e80:	061a      	lsls	r2, r3, #24
                                             ((uint32_t)TxMessage->Data[2] << 16) |
20000e82:	683b      	ldr	r3, [r7, #0]
20000e84:	7b5b      	ldrb	r3, [r3, #13]
20000e86:	041b      	lsls	r3, r3, #16
    CANx->sTxMailBox[transmit_mailbox].TDLR = (((uint32_t)TxMessage->Data[3] << 24) | 
20000e88:	431a      	orrs	r2, r3
                                             ((uint32_t)TxMessage->Data[1] << 8) | 
20000e8a:	683b      	ldr	r3, [r7, #0]
20000e8c:	7b1b      	ldrb	r3, [r3, #12]
20000e8e:	021b      	lsls	r3, r3, #8
                                             ((uint32_t)TxMessage->Data[2] << 16) |
20000e90:	4313      	orrs	r3, r2
                                             ((uint32_t)TxMessage->Data[0]));
20000e92:	683a      	ldr	r2, [r7, #0]
20000e94:	7ad2      	ldrb	r2, [r2, #11]
20000e96:	0010      	movs	r0, r2
    CANx->sTxMailBox[transmit_mailbox].TDLR = (((uint32_t)TxMessage->Data[3] << 24) | 
20000e98:	193a      	adds	r2, r7, r4
20000e9a:	7811      	ldrb	r1, [r2, #0]
                                             ((uint32_t)TxMessage->Data[1] << 8) | 
20000e9c:	4303      	orrs	r3, r0
20000e9e:	001a      	movs	r2, r3
    CANx->sTxMailBox[transmit_mailbox].TDLR = (((uint32_t)TxMessage->Data[3] << 24) | 
20000ea0:	6878      	ldr	r0, [r7, #4]
20000ea2:	23c4      	movs	r3, #196	; 0xc4
20000ea4:	005b      	lsls	r3, r3, #1
20000ea6:	0109      	lsls	r1, r1, #4
20000ea8:	1841      	adds	r1, r0, r1
20000eaa:	18cb      	adds	r3, r1, r3
20000eac:	601a      	str	r2, [r3, #0]
    CANx->sTxMailBox[transmit_mailbox].TDHR = (((uint32_t)TxMessage->Data[7] << 24) | 
20000eae:	683b      	ldr	r3, [r7, #0]
20000eb0:	7c9b      	ldrb	r3, [r3, #18]
20000eb2:	061a      	lsls	r2, r3, #24
                                             ((uint32_t)TxMessage->Data[6] << 16) |
20000eb4:	683b      	ldr	r3, [r7, #0]
20000eb6:	7c5b      	ldrb	r3, [r3, #17]
20000eb8:	041b      	lsls	r3, r3, #16
    CANx->sTxMailBox[transmit_mailbox].TDHR = (((uint32_t)TxMessage->Data[7] << 24) | 
20000eba:	431a      	orrs	r2, r3
                                             ((uint32_t)TxMessage->Data[5] << 8) |
20000ebc:	683b      	ldr	r3, [r7, #0]
20000ebe:	7c1b      	ldrb	r3, [r3, #16]
20000ec0:	021b      	lsls	r3, r3, #8
                                             ((uint32_t)TxMessage->Data[6] << 16) |
20000ec2:	4313      	orrs	r3, r2
                                             ((uint32_t)TxMessage->Data[4]));
20000ec4:	683a      	ldr	r2, [r7, #0]
20000ec6:	7bd2      	ldrb	r2, [r2, #15]
20000ec8:	0010      	movs	r0, r2
    CANx->sTxMailBox[transmit_mailbox].TDHR = (((uint32_t)TxMessage->Data[7] << 24) | 
20000eca:	193a      	adds	r2, r7, r4
20000ecc:	7811      	ldrb	r1, [r2, #0]
                                             ((uint32_t)TxMessage->Data[5] << 8) |
20000ece:	4303      	orrs	r3, r0
20000ed0:	001a      	movs	r2, r3
    CANx->sTxMailBox[transmit_mailbox].TDHR = (((uint32_t)TxMessage->Data[7] << 24) | 
20000ed2:	6878      	ldr	r0, [r7, #4]
20000ed4:	23c6      	movs	r3, #198	; 0xc6
20000ed6:	005b      	lsls	r3, r3, #1
20000ed8:	0109      	lsls	r1, r1, #4
20000eda:	1841      	adds	r1, r0, r1
20000edc:	18cb      	adds	r3, r1, r3
20000ede:	601a      	str	r2, [r3, #0]
    /* Request transmission */
    CANx->sTxMailBox[transmit_mailbox].TIR |= TMIDxR_TXRQ;
20000ee0:	193b      	adds	r3, r7, r4
20000ee2:	781a      	ldrb	r2, [r3, #0]
20000ee4:	687b      	ldr	r3, [r7, #4]
20000ee6:	3218      	adds	r2, #24
20000ee8:	0112      	lsls	r2, r2, #4
20000eea:	58d3      	ldr	r3, [r2, r3]
20000eec:	193a      	adds	r2, r7, r4
20000eee:	7812      	ldrb	r2, [r2, #0]
20000ef0:	2101      	movs	r1, #1
20000ef2:	4319      	orrs	r1, r3
20000ef4:	687b      	ldr	r3, [r7, #4]
20000ef6:	3218      	adds	r2, #24
20000ef8:	0112      	lsls	r2, r2, #4
20000efa:	50d1      	str	r1, [r2, r3]
  }
  return transmit_mailbox;
20000efc:	230f      	movs	r3, #15
20000efe:	18fb      	adds	r3, r7, r3
20000f00:	781b      	ldrb	r3, [r3, #0]
}
20000f02:	0018      	movs	r0, r3
20000f04:	46bd      	mov	sp, r7
20000f06:	b005      	add	sp, #20
20000f08:	bd90      	pop	{r4, r7, pc}

20000f0a <CAN_TransmitStatus>:
  * @note   CAN3 peripheral is available only for STM32F413_423xx devices
  * @retval CAN_TxStatus_Ok if the CAN driver transmits the message, 
  *         CAN_TxStatus_Failed in an other case.
  */
uint8_t CAN_TransmitStatus(CAN_TypeDef* CANx, uint8_t TransmitMailbox)
{
20000f0a:	b580      	push	{r7, lr}
20000f0c:	b084      	sub	sp, #16
20000f0e:	af00      	add	r7, sp, #0
20000f10:	6078      	str	r0, [r7, #4]
20000f12:	000a      	movs	r2, r1
20000f14:	1cfb      	adds	r3, r7, #3
20000f16:	701a      	strb	r2, [r3, #0]
  uint32_t state = 0;
20000f18:	2300      	movs	r3, #0
20000f1a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_TRANSMITMAILBOX(TransmitMailbox));
 
  switch (TransmitMailbox)
20000f1c:	1cfb      	adds	r3, r7, #3
20000f1e:	781b      	ldrb	r3, [r3, #0]
20000f20:	2b01      	cmp	r3, #1
20000f22:	d009      	beq.n	20000f38 <CAN_TransmitStatus+0x2e>
20000f24:	2b02      	cmp	r3, #2
20000f26:	d00d      	beq.n	20000f44 <CAN_TransmitStatus+0x3a>
20000f28:	2b00      	cmp	r3, #0
20000f2a:	d111      	bne.n	20000f50 <CAN_TransmitStatus+0x46>
  {
    case (CAN_TXMAILBOX_0): 
      state =   CANx->TSR &  (CAN_TSR_RQCP0 | CAN_TSR_TXOK0 | CAN_TSR_TME0);
20000f2c:	687b      	ldr	r3, [r7, #4]
20000f2e:	689b      	ldr	r3, [r3, #8]
20000f30:	4a25      	ldr	r2, [pc, #148]	; (20000fc8 <CAN_TransmitStatus+0xbe>)
20000f32:	4013      	ands	r3, r2
20000f34:	60fb      	str	r3, [r7, #12]
      break;
20000f36:	e00e      	b.n	20000f56 <CAN_TransmitStatus+0x4c>
    case (CAN_TXMAILBOX_1): 
      state =   CANx->TSR &  (CAN_TSR_RQCP1 | CAN_TSR_TXOK1 | CAN_TSR_TME1);
20000f38:	687b      	ldr	r3, [r7, #4]
20000f3a:	689b      	ldr	r3, [r3, #8]
20000f3c:	4a23      	ldr	r2, [pc, #140]	; (20000fcc <CAN_TransmitStatus+0xc2>)
20000f3e:	4013      	ands	r3, r2
20000f40:	60fb      	str	r3, [r7, #12]
      break;
20000f42:	e008      	b.n	20000f56 <CAN_TransmitStatus+0x4c>
    case (CAN_TXMAILBOX_2): 
      state =   CANx->TSR &  (CAN_TSR_RQCP2 | CAN_TSR_TXOK2 | CAN_TSR_TME2);
20000f44:	687b      	ldr	r3, [r7, #4]
20000f46:	689b      	ldr	r3, [r3, #8]
20000f48:	4a21      	ldr	r2, [pc, #132]	; (20000fd0 <CAN_TransmitStatus+0xc6>)
20000f4a:	4013      	ands	r3, r2
20000f4c:	60fb      	str	r3, [r7, #12]
      break;
20000f4e:	e002      	b.n	20000f56 <CAN_TransmitStatus+0x4c>
    default:
      state = CAN_TxStatus_Failed;
20000f50:	2300      	movs	r3, #0
20000f52:	60fb      	str	r3, [r7, #12]
      break;
20000f54:	46c0      	nop			; (mov r8, r8)
  }
  switch (state)
20000f56:	68fb      	ldr	r3, [r7, #12]
20000f58:	4a1e      	ldr	r2, [pc, #120]	; (20000fd4 <CAN_TransmitStatus+0xca>)
20000f5a:	4293      	cmp	r3, r2
20000f5c:	d01b      	beq.n	20000f96 <CAN_TransmitStatus+0x8c>
20000f5e:	4a1d      	ldr	r2, [pc, #116]	; (20000fd4 <CAN_TransmitStatus+0xca>)
20000f60:	4293      	cmp	r3, r2
20000f62:	d808      	bhi.n	20000f76 <CAN_TransmitStatus+0x6c>
20000f64:	4a1c      	ldr	r2, [pc, #112]	; (20000fd8 <CAN_TransmitStatus+0xce>)
20000f66:	4293      	cmp	r3, r2
20000f68:	d012      	beq.n	20000f90 <CAN_TransmitStatus+0x86>
20000f6a:	4a17      	ldr	r2, [pc, #92]	; (20000fc8 <CAN_TransmitStatus+0xbe>)
20000f6c:	4293      	cmp	r3, r2
20000f6e:	d018      	beq.n	20000fa2 <CAN_TransmitStatus+0x98>
20000f70:	2b00      	cmp	r3, #0
20000f72:	d00a      	beq.n	20000f8a <CAN_TransmitStatus+0x80>
20000f74:	e01e      	b.n	20000fb4 <CAN_TransmitStatus+0xaa>
20000f76:	4a19      	ldr	r2, [pc, #100]	; (20000fdc <CAN_TransmitStatus+0xd2>)
20000f78:	4293      	cmp	r3, r2
20000f7a:	d00f      	beq.n	20000f9c <CAN_TransmitStatus+0x92>
20000f7c:	4a14      	ldr	r2, [pc, #80]	; (20000fd0 <CAN_TransmitStatus+0xc6>)
20000f7e:	4293      	cmp	r3, r2
20000f80:	d015      	beq.n	20000fae <CAN_TransmitStatus+0xa4>
20000f82:	4a12      	ldr	r2, [pc, #72]	; (20000fcc <CAN_TransmitStatus+0xc2>)
20000f84:	4293      	cmp	r3, r2
20000f86:	d00f      	beq.n	20000fa8 <CAN_TransmitStatus+0x9e>
20000f88:	e014      	b.n	20000fb4 <CAN_TransmitStatus+0xaa>
  {
      /* transmit pending  */
    case (0x0): state = CAN_TxStatus_Pending;
20000f8a:	2302      	movs	r3, #2
20000f8c:	60fb      	str	r3, [r7, #12]
      break;
20000f8e:	e014      	b.n	20000fba <CAN_TransmitStatus+0xb0>
      /* transmit failed  */
     case (CAN_TSR_RQCP0 | CAN_TSR_TME0): state = CAN_TxStatus_Failed;
20000f90:	2300      	movs	r3, #0
20000f92:	60fb      	str	r3, [r7, #12]
      break;
20000f94:	e011      	b.n	20000fba <CAN_TransmitStatus+0xb0>
     case (CAN_TSR_RQCP1 | CAN_TSR_TME1): state = CAN_TxStatus_Failed;
20000f96:	2300      	movs	r3, #0
20000f98:	60fb      	str	r3, [r7, #12]
      break;
20000f9a:	e00e      	b.n	20000fba <CAN_TransmitStatus+0xb0>
     case (CAN_TSR_RQCP2 | CAN_TSR_TME2): state = CAN_TxStatus_Failed;
20000f9c:	2300      	movs	r3, #0
20000f9e:	60fb      	str	r3, [r7, #12]
      break;
20000fa0:	e00b      	b.n	20000fba <CAN_TransmitStatus+0xb0>
      /* transmit succeeded  */
    case (CAN_TSR_RQCP0 | CAN_TSR_TXOK0 | CAN_TSR_TME0):state = CAN_TxStatus_Ok;
20000fa2:	2301      	movs	r3, #1
20000fa4:	60fb      	str	r3, [r7, #12]
      break;
20000fa6:	e008      	b.n	20000fba <CAN_TransmitStatus+0xb0>
    case (CAN_TSR_RQCP1 | CAN_TSR_TXOK1 | CAN_TSR_TME1):state = CAN_TxStatus_Ok;
20000fa8:	2301      	movs	r3, #1
20000faa:	60fb      	str	r3, [r7, #12]
      break;
20000fac:	e005      	b.n	20000fba <CAN_TransmitStatus+0xb0>
    case (CAN_TSR_RQCP2 | CAN_TSR_TXOK2 | CAN_TSR_TME2):state = CAN_TxStatus_Ok;
20000fae:	2301      	movs	r3, #1
20000fb0:	60fb      	str	r3, [r7, #12]
      break;
20000fb2:	e002      	b.n	20000fba <CAN_TransmitStatus+0xb0>
    default: state = CAN_TxStatus_Failed;
20000fb4:	2300      	movs	r3, #0
20000fb6:	60fb      	str	r3, [r7, #12]
      break;
20000fb8:	46c0      	nop			; (mov r8, r8)
  }
  return (uint8_t) state;
20000fba:	68fb      	ldr	r3, [r7, #12]
20000fbc:	b2db      	uxtb	r3, r3
}
20000fbe:	0018      	movs	r0, r3
20000fc0:	46bd      	mov	sp, r7
20000fc2:	b004      	add	sp, #16
20000fc4:	bd80      	pop	{r7, pc}
20000fc6:	46c0      	nop			; (mov r8, r8)
20000fc8:	04000003 	streq	r0, [r0], #-3
20000fcc:	08000300 	stmdaeq	r0, {r8, r9}
20000fd0:	10030000 	andne	r0, r3, r0
20000fd4:	08000100 	stmdaeq	r0, {r8}
20000fd8:	04000001 	streq	r0, [r0], #-1
20000fdc:	10010000 	andne	r0, r1, r0

20000fe0 <CAN_CancelTransmit>:
  * @param  Mailbox: Mailbox number.
  * @note   CAN3 peripheral is available only for STM32F413_423xx devices
  * @retval None
  */
void CAN_CancelTransmit(CAN_TypeDef* CANx, uint8_t Mailbox)
{
20000fe0:	b580      	push	{r7, lr}
20000fe2:	b082      	sub	sp, #8
20000fe4:	af00      	add	r7, sp, #0
20000fe6:	6078      	str	r0, [r7, #4]
20000fe8:	000a      	movs	r2, r1
20000fea:	1cfb      	adds	r3, r7, #3
20000fec:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_TRANSMITMAILBOX(Mailbox));
  /* abort transmission */
  switch (Mailbox)
20000fee:	1cfb      	adds	r3, r7, #3
20000ff0:	781b      	ldrb	r3, [r3, #0]
20000ff2:	2b01      	cmp	r3, #1
20000ff4:	d00b      	beq.n	2000100e <CAN_CancelTransmit+0x2e>
20000ff6:	2b02      	cmp	r3, #2
20000ff8:	d011      	beq.n	2000101e <CAN_CancelTransmit+0x3e>
20000ffa:	2b00      	cmp	r3, #0
20000ffc:	d000      	beq.n	20001000 <CAN_CancelTransmit+0x20>
    case (CAN_TXMAILBOX_1): CANx->TSR |= CAN_TSR_ABRQ1;
      break;
    case (CAN_TXMAILBOX_2): CANx->TSR |= CAN_TSR_ABRQ2;
      break;
    default:
      break;
20000ffe:	e016      	b.n	2000102e <CAN_CancelTransmit+0x4e>
    case (CAN_TXMAILBOX_0): CANx->TSR |= CAN_TSR_ABRQ0;
20001000:	687b      	ldr	r3, [r7, #4]
20001002:	689b      	ldr	r3, [r3, #8]
20001004:	2280      	movs	r2, #128	; 0x80
20001006:	431a      	orrs	r2, r3
20001008:	687b      	ldr	r3, [r7, #4]
2000100a:	609a      	str	r2, [r3, #8]
      break;
2000100c:	e00f      	b.n	2000102e <CAN_CancelTransmit+0x4e>
    case (CAN_TXMAILBOX_1): CANx->TSR |= CAN_TSR_ABRQ1;
2000100e:	687b      	ldr	r3, [r7, #4]
20001010:	689b      	ldr	r3, [r3, #8]
20001012:	2280      	movs	r2, #128	; 0x80
20001014:	0212      	lsls	r2, r2, #8
20001016:	431a      	orrs	r2, r3
20001018:	687b      	ldr	r3, [r7, #4]
2000101a:	609a      	str	r2, [r3, #8]
      break;
2000101c:	e007      	b.n	2000102e <CAN_CancelTransmit+0x4e>
    case (CAN_TXMAILBOX_2): CANx->TSR |= CAN_TSR_ABRQ2;
2000101e:	687b      	ldr	r3, [r7, #4]
20001020:	689b      	ldr	r3, [r3, #8]
20001022:	2280      	movs	r2, #128	; 0x80
20001024:	0412      	lsls	r2, r2, #16
20001026:	431a      	orrs	r2, r3
20001028:	687b      	ldr	r3, [r7, #4]
2000102a:	609a      	str	r2, [r3, #8]
      break;
2000102c:	46c0      	nop			; (mov r8, r8)
  }
}
2000102e:	46c0      	nop			; (mov r8, r8)
20001030:	46bd      	mov	sp, r7
20001032:	b002      	add	sp, #8
20001034:	bd80      	pop	{r7, pc}

20001036 <CAN_Receive>:
  *         CAN DLC, CAN data and FMI number.
  * @note   CAN3 peripheral is available only for STM32F413_423xx devices
  * @retval None
  */
void CAN_Receive(CAN_TypeDef* CANx, uint8_t FIFONumber, CanRxMsg* RxMessage)
{
20001036:	b580      	push	{r7, lr}
20001038:	b084      	sub	sp, #16
2000103a:	af00      	add	r7, sp, #0
2000103c:	60f8      	str	r0, [r7, #12]
2000103e:	607a      	str	r2, [r7, #4]
20001040:	200b      	movs	r0, #11
20001042:	183b      	adds	r3, r7, r0
20001044:	1c0a      	adds	r2, r1, #0
20001046:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_FIFO(FIFONumber));
  /* Get the Id */
  RxMessage->IDE = (uint8_t)0x04 & CANx->sFIFOMailBox[FIFONumber].RIR;
20001048:	183b      	adds	r3, r7, r0
2000104a:	781a      	ldrb	r2, [r3, #0]
2000104c:	68fb      	ldr	r3, [r7, #12]
2000104e:	321b      	adds	r2, #27
20001050:	0112      	lsls	r2, r2, #4
20001052:	58d3      	ldr	r3, [r2, r3]
20001054:	b2db      	uxtb	r3, r3
20001056:	2204      	movs	r2, #4
20001058:	4013      	ands	r3, r2
2000105a:	b2da      	uxtb	r2, r3
2000105c:	687b      	ldr	r3, [r7, #4]
2000105e:	721a      	strb	r2, [r3, #8]
  if (RxMessage->IDE == CAN_Id_Standard)
20001060:	687b      	ldr	r3, [r7, #4]
20001062:	7a1b      	ldrb	r3, [r3, #8]
20001064:	2b00      	cmp	r3, #0
20001066:	d10c      	bne.n	20001082 <CAN_Receive+0x4c>
  {
    RxMessage->StdId = (uint32_t)0x000007FF & (CANx->sFIFOMailBox[FIFONumber].RIR >> 21);
20001068:	230b      	movs	r3, #11
2000106a:	18fb      	adds	r3, r7, r3
2000106c:	781a      	ldrb	r2, [r3, #0]
2000106e:	68fb      	ldr	r3, [r7, #12]
20001070:	321b      	adds	r2, #27
20001072:	0112      	lsls	r2, r2, #4
20001074:	58d3      	ldr	r3, [r2, r3]
20001076:	0d5b      	lsrs	r3, r3, #21
20001078:	055b      	lsls	r3, r3, #21
2000107a:	0d5a      	lsrs	r2, r3, #21
2000107c:	687b      	ldr	r3, [r7, #4]
2000107e:	601a      	str	r2, [r3, #0]
20001080:	e00b      	b.n	2000109a <CAN_Receive+0x64>
  }
  else
  {
    RxMessage->ExtId = (uint32_t)0x1FFFFFFF & (CANx->sFIFOMailBox[FIFONumber].RIR >> 3);
20001082:	230b      	movs	r3, #11
20001084:	18fb      	adds	r3, r7, r3
20001086:	781a      	ldrb	r2, [r3, #0]
20001088:	68fb      	ldr	r3, [r7, #12]
2000108a:	321b      	adds	r2, #27
2000108c:	0112      	lsls	r2, r2, #4
2000108e:	58d3      	ldr	r3, [r2, r3]
20001090:	08db      	lsrs	r3, r3, #3
20001092:	00db      	lsls	r3, r3, #3
20001094:	08da      	lsrs	r2, r3, #3
20001096:	687b      	ldr	r3, [r7, #4]
20001098:	605a      	str	r2, [r3, #4]
  }
  
  RxMessage->RTR = (uint8_t)0x02 & CANx->sFIFOMailBox[FIFONumber].RIR;
2000109a:	210b      	movs	r1, #11
2000109c:	187b      	adds	r3, r7, r1
2000109e:	781a      	ldrb	r2, [r3, #0]
200010a0:	68fb      	ldr	r3, [r7, #12]
200010a2:	321b      	adds	r2, #27
200010a4:	0112      	lsls	r2, r2, #4
200010a6:	58d3      	ldr	r3, [r2, r3]
200010a8:	b2db      	uxtb	r3, r3
200010aa:	2202      	movs	r2, #2
200010ac:	4013      	ands	r3, r2
200010ae:	b2da      	uxtb	r2, r3
200010b0:	687b      	ldr	r3, [r7, #4]
200010b2:	725a      	strb	r2, [r3, #9]
  /* Get the DLC */
  RxMessage->DLC = (uint8_t)0x0F & CANx->sFIFOMailBox[FIFONumber].RDTR;
200010b4:	187b      	adds	r3, r7, r1
200010b6:	781b      	ldrb	r3, [r3, #0]
200010b8:	68fa      	ldr	r2, [r7, #12]
200010ba:	331b      	adds	r3, #27
200010bc:	011b      	lsls	r3, r3, #4
200010be:	18d3      	adds	r3, r2, r3
200010c0:	3304      	adds	r3, #4
200010c2:	681b      	ldr	r3, [r3, #0]
200010c4:	b2db      	uxtb	r3, r3
200010c6:	220f      	movs	r2, #15
200010c8:	4013      	ands	r3, r2
200010ca:	b2da      	uxtb	r2, r3
200010cc:	687b      	ldr	r3, [r7, #4]
200010ce:	729a      	strb	r2, [r3, #10]
  /* Get the FMI */
  RxMessage->FMI = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDTR >> 8);
200010d0:	0008      	movs	r0, r1
200010d2:	183b      	adds	r3, r7, r0
200010d4:	781b      	ldrb	r3, [r3, #0]
200010d6:	68fa      	ldr	r2, [r7, #12]
200010d8:	331b      	adds	r3, #27
200010da:	011b      	lsls	r3, r3, #4
200010dc:	18d3      	adds	r3, r2, r3
200010de:	3304      	adds	r3, #4
200010e0:	681b      	ldr	r3, [r3, #0]
200010e2:	0a1b      	lsrs	r3, r3, #8
200010e4:	b2da      	uxtb	r2, r3
200010e6:	687b      	ldr	r3, [r7, #4]
200010e8:	74da      	strb	r2, [r3, #19]
  /* Get the data field */
  RxMessage->Data[0] = (uint8_t)0xFF & CANx->sFIFOMailBox[FIFONumber].RDLR;
200010ea:	183b      	adds	r3, r7, r0
200010ec:	781a      	ldrb	r2, [r3, #0]
200010ee:	68f9      	ldr	r1, [r7, #12]
200010f0:	23dc      	movs	r3, #220	; 0xdc
200010f2:	005b      	lsls	r3, r3, #1
200010f4:	0112      	lsls	r2, r2, #4
200010f6:	188a      	adds	r2, r1, r2
200010f8:	18d3      	adds	r3, r2, r3
200010fa:	681b      	ldr	r3, [r3, #0]
200010fc:	b2da      	uxtb	r2, r3
200010fe:	687b      	ldr	r3, [r7, #4]
20001100:	72da      	strb	r2, [r3, #11]
  RxMessage->Data[1] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDLR >> 8);
20001102:	183b      	adds	r3, r7, r0
20001104:	781a      	ldrb	r2, [r3, #0]
20001106:	68f9      	ldr	r1, [r7, #12]
20001108:	23dc      	movs	r3, #220	; 0xdc
2000110a:	005b      	lsls	r3, r3, #1
2000110c:	0112      	lsls	r2, r2, #4
2000110e:	188a      	adds	r2, r1, r2
20001110:	18d3      	adds	r3, r2, r3
20001112:	681b      	ldr	r3, [r3, #0]
20001114:	0a1b      	lsrs	r3, r3, #8
20001116:	b2da      	uxtb	r2, r3
20001118:	687b      	ldr	r3, [r7, #4]
2000111a:	731a      	strb	r2, [r3, #12]
  RxMessage->Data[2] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDLR >> 16);
2000111c:	183b      	adds	r3, r7, r0
2000111e:	781a      	ldrb	r2, [r3, #0]
20001120:	68f9      	ldr	r1, [r7, #12]
20001122:	23dc      	movs	r3, #220	; 0xdc
20001124:	005b      	lsls	r3, r3, #1
20001126:	0112      	lsls	r2, r2, #4
20001128:	188a      	adds	r2, r1, r2
2000112a:	18d3      	adds	r3, r2, r3
2000112c:	681b      	ldr	r3, [r3, #0]
2000112e:	0c1b      	lsrs	r3, r3, #16
20001130:	b2da      	uxtb	r2, r3
20001132:	687b      	ldr	r3, [r7, #4]
20001134:	735a      	strb	r2, [r3, #13]
  RxMessage->Data[3] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDLR >> 24);
20001136:	183b      	adds	r3, r7, r0
20001138:	781a      	ldrb	r2, [r3, #0]
2000113a:	68f9      	ldr	r1, [r7, #12]
2000113c:	23dc      	movs	r3, #220	; 0xdc
2000113e:	005b      	lsls	r3, r3, #1
20001140:	0112      	lsls	r2, r2, #4
20001142:	188a      	adds	r2, r1, r2
20001144:	18d3      	adds	r3, r2, r3
20001146:	681b      	ldr	r3, [r3, #0]
20001148:	0e1b      	lsrs	r3, r3, #24
2000114a:	b2da      	uxtb	r2, r3
2000114c:	687b      	ldr	r3, [r7, #4]
2000114e:	739a      	strb	r2, [r3, #14]
  RxMessage->Data[4] = (uint8_t)0xFF & CANx->sFIFOMailBox[FIFONumber].RDHR;
20001150:	183b      	adds	r3, r7, r0
20001152:	781a      	ldrb	r2, [r3, #0]
20001154:	68f9      	ldr	r1, [r7, #12]
20001156:	23de      	movs	r3, #222	; 0xde
20001158:	005b      	lsls	r3, r3, #1
2000115a:	0112      	lsls	r2, r2, #4
2000115c:	188a      	adds	r2, r1, r2
2000115e:	18d3      	adds	r3, r2, r3
20001160:	681b      	ldr	r3, [r3, #0]
20001162:	b2da      	uxtb	r2, r3
20001164:	687b      	ldr	r3, [r7, #4]
20001166:	73da      	strb	r2, [r3, #15]
  RxMessage->Data[5] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDHR >> 8);
20001168:	183b      	adds	r3, r7, r0
2000116a:	781a      	ldrb	r2, [r3, #0]
2000116c:	68f9      	ldr	r1, [r7, #12]
2000116e:	23de      	movs	r3, #222	; 0xde
20001170:	005b      	lsls	r3, r3, #1
20001172:	0112      	lsls	r2, r2, #4
20001174:	188a      	adds	r2, r1, r2
20001176:	18d3      	adds	r3, r2, r3
20001178:	681b      	ldr	r3, [r3, #0]
2000117a:	0a1b      	lsrs	r3, r3, #8
2000117c:	b2da      	uxtb	r2, r3
2000117e:	687b      	ldr	r3, [r7, #4]
20001180:	741a      	strb	r2, [r3, #16]
  RxMessage->Data[6] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDHR >> 16);
20001182:	183b      	adds	r3, r7, r0
20001184:	781a      	ldrb	r2, [r3, #0]
20001186:	68f9      	ldr	r1, [r7, #12]
20001188:	23de      	movs	r3, #222	; 0xde
2000118a:	005b      	lsls	r3, r3, #1
2000118c:	0112      	lsls	r2, r2, #4
2000118e:	188a      	adds	r2, r1, r2
20001190:	18d3      	adds	r3, r2, r3
20001192:	681b      	ldr	r3, [r3, #0]
20001194:	0c1b      	lsrs	r3, r3, #16
20001196:	b2da      	uxtb	r2, r3
20001198:	687b      	ldr	r3, [r7, #4]
2000119a:	745a      	strb	r2, [r3, #17]
  RxMessage->Data[7] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDHR >> 24);
2000119c:	183b      	adds	r3, r7, r0
2000119e:	781a      	ldrb	r2, [r3, #0]
200011a0:	68f9      	ldr	r1, [r7, #12]
200011a2:	23de      	movs	r3, #222	; 0xde
200011a4:	005b      	lsls	r3, r3, #1
200011a6:	0112      	lsls	r2, r2, #4
200011a8:	188a      	adds	r2, r1, r2
200011aa:	18d3      	adds	r3, r2, r3
200011ac:	681b      	ldr	r3, [r3, #0]
200011ae:	0e1b      	lsrs	r3, r3, #24
200011b0:	b2da      	uxtb	r2, r3
200011b2:	687b      	ldr	r3, [r7, #4]
200011b4:	749a      	strb	r2, [r3, #18]
  /* Release the FIFO */
  /* Release FIFO0 */
  if (FIFONumber == CAN_FIFO0)
200011b6:	183b      	adds	r3, r7, r0
200011b8:	781b      	ldrb	r3, [r3, #0]
200011ba:	2b00      	cmp	r3, #0
200011bc:	d106      	bne.n	200011cc <CAN_Receive+0x196>
  {
    CANx->RF0R |= CAN_RF0R_RFOM0;
200011be:	68fb      	ldr	r3, [r7, #12]
200011c0:	68db      	ldr	r3, [r3, #12]
200011c2:	2220      	movs	r2, #32
200011c4:	431a      	orrs	r2, r3
200011c6:	68fb      	ldr	r3, [r7, #12]
200011c8:	60da      	str	r2, [r3, #12]
  /* Release FIFO1 */
  else /* FIFONumber == CAN_FIFO1 */
  {
    CANx->RF1R |= CAN_RF1R_RFOM1;
  }
}
200011ca:	e005      	b.n	200011d8 <CAN_Receive+0x1a2>
    CANx->RF1R |= CAN_RF1R_RFOM1;
200011cc:	68fb      	ldr	r3, [r7, #12]
200011ce:	691b      	ldr	r3, [r3, #16]
200011d0:	2220      	movs	r2, #32
200011d2:	431a      	orrs	r2, r3
200011d4:	68fb      	ldr	r3, [r7, #12]
200011d6:	611a      	str	r2, [r3, #16]
}
200011d8:	46c0      	nop			; (mov r8, r8)
200011da:	46bd      	mov	sp, r7
200011dc:	b004      	add	sp, #16
200011de:	bd80      	pop	{r7, pc}

200011e0 <CAN_FIFORelease>:
  * @param  FIFONumber: FIFO to release, CAN_FIFO0 or CAN_FIFO1.
  * @note   CAN3 peripheral is available only for STM32F413_423xx devices
  * @retval None
  */
void CAN_FIFORelease(CAN_TypeDef* CANx, uint8_t FIFONumber)
{
200011e0:	b580      	push	{r7, lr}
200011e2:	b082      	sub	sp, #8
200011e4:	af00      	add	r7, sp, #0
200011e6:	6078      	str	r0, [r7, #4]
200011e8:	000a      	movs	r2, r1
200011ea:	1cfb      	adds	r3, r7, #3
200011ec:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_FIFO(FIFONumber));
  /* Release FIFO0 */
  if (FIFONumber == CAN_FIFO0)
200011ee:	1cfb      	adds	r3, r7, #3
200011f0:	781b      	ldrb	r3, [r3, #0]
200011f2:	2b00      	cmp	r3, #0
200011f4:	d106      	bne.n	20001204 <CAN_FIFORelease+0x24>
  {
    CANx->RF0R |= CAN_RF0R_RFOM0;
200011f6:	687b      	ldr	r3, [r7, #4]
200011f8:	68db      	ldr	r3, [r3, #12]
200011fa:	2220      	movs	r2, #32
200011fc:	431a      	orrs	r2, r3
200011fe:	687b      	ldr	r3, [r7, #4]
20001200:	60da      	str	r2, [r3, #12]
  /* Release FIFO1 */
  else /* FIFONumber == CAN_FIFO1 */
  {
    CANx->RF1R |= CAN_RF1R_RFOM1;
  }
}
20001202:	e005      	b.n	20001210 <CAN_FIFORelease+0x30>
    CANx->RF1R |= CAN_RF1R_RFOM1;
20001204:	687b      	ldr	r3, [r7, #4]
20001206:	691b      	ldr	r3, [r3, #16]
20001208:	2220      	movs	r2, #32
2000120a:	431a      	orrs	r2, r3
2000120c:	687b      	ldr	r3, [r7, #4]
2000120e:	611a      	str	r2, [r3, #16]
}
20001210:	46c0      	nop			; (mov r8, r8)
20001212:	46bd      	mov	sp, r7
20001214:	b002      	add	sp, #8
20001216:	bd80      	pop	{r7, pc}

20001218 <CAN_MessagePending>:
  * @param  FIFONumber: Receive FIFO number, CAN_FIFO0 or CAN_FIFO1.
  * @note   CAN3 peripheral is available only for STM32F413_423xx devices
  * @retval NbMessage : which is the number of pending message.
  */
uint8_t CAN_MessagePending(CAN_TypeDef* CANx, uint8_t FIFONumber)
{
20001218:	b580      	push	{r7, lr}
2000121a:	b084      	sub	sp, #16
2000121c:	af00      	add	r7, sp, #0
2000121e:	6078      	str	r0, [r7, #4]
20001220:	000a      	movs	r2, r1
20001222:	1cfb      	adds	r3, r7, #3
20001224:	701a      	strb	r2, [r3, #0]
  uint8_t message_pending=0;
20001226:	230f      	movs	r3, #15
20001228:	18fb      	adds	r3, r7, r3
2000122a:	2200      	movs	r2, #0
2000122c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_FIFO(FIFONumber));
  if (FIFONumber == CAN_FIFO0)
2000122e:	1cfb      	adds	r3, r7, #3
20001230:	781b      	ldrb	r3, [r3, #0]
20001232:	2b00      	cmp	r3, #0
20001234:	d108      	bne.n	20001248 <CAN_MessagePending+0x30>
  {
    message_pending = (uint8_t)(CANx->RF0R&(uint32_t)0x03);
20001236:	687b      	ldr	r3, [r7, #4]
20001238:	68db      	ldr	r3, [r3, #12]
2000123a:	b2da      	uxtb	r2, r3
2000123c:	230f      	movs	r3, #15
2000123e:	18fb      	adds	r3, r7, r3
20001240:	2103      	movs	r1, #3
20001242:	400a      	ands	r2, r1
20001244:	701a      	strb	r2, [r3, #0]
20001246:	e010      	b.n	2000126a <CAN_MessagePending+0x52>
  }
  else if (FIFONumber == CAN_FIFO1)
20001248:	1cfb      	adds	r3, r7, #3
2000124a:	781b      	ldrb	r3, [r3, #0]
2000124c:	2b01      	cmp	r3, #1
2000124e:	d108      	bne.n	20001262 <CAN_MessagePending+0x4a>
  {
    message_pending = (uint8_t)(CANx->RF1R&(uint32_t)0x03);
20001250:	687b      	ldr	r3, [r7, #4]
20001252:	691b      	ldr	r3, [r3, #16]
20001254:	b2da      	uxtb	r2, r3
20001256:	230f      	movs	r3, #15
20001258:	18fb      	adds	r3, r7, r3
2000125a:	2103      	movs	r1, #3
2000125c:	400a      	ands	r2, r1
2000125e:	701a      	strb	r2, [r3, #0]
20001260:	e003      	b.n	2000126a <CAN_MessagePending+0x52>
  }
  else
  {
    message_pending = 0;
20001262:	230f      	movs	r3, #15
20001264:	18fb      	adds	r3, r7, r3
20001266:	2200      	movs	r2, #0
20001268:	701a      	strb	r2, [r3, #0]
  }
  return message_pending;
2000126a:	230f      	movs	r3, #15
2000126c:	18fb      	adds	r3, r7, r3
2000126e:	781b      	ldrb	r3, [r3, #0]
}
20001270:	0018      	movs	r0, r3
20001272:	46bd      	mov	sp, r7
20001274:	b004      	add	sp, #16
20001276:	bd80      	pop	{r7, pc}

20001278 <CAN_OperatingModeRequest>:
  * @retval status of the requested mode which can be 
  *         - CAN_ModeStatus_Failed:  CAN failed entering the specific mode 
  *         - CAN_ModeStatus_Success: CAN Succeed entering the specific mode 
  */
uint8_t CAN_OperatingModeRequest(CAN_TypeDef* CANx, uint8_t CAN_OperatingMode)
{
20001278:	b580      	push	{r7, lr}
2000127a:	b084      	sub	sp, #16
2000127c:	af00      	add	r7, sp, #0
2000127e:	6078      	str	r0, [r7, #4]
20001280:	000a      	movs	r2, r1
20001282:	1cfb      	adds	r3, r7, #3
20001284:	701a      	strb	r2, [r3, #0]
  uint8_t status = CAN_ModeStatus_Failed;
20001286:	230f      	movs	r3, #15
20001288:	18fb      	adds	r3, r7, r3
2000128a:	2200      	movs	r2, #0
2000128c:	701a      	strb	r2, [r3, #0]
  
  /* Timeout for INAK or also for SLAK bits*/
  uint32_t timeout = INAK_TIMEOUT; 
2000128e:	4b42      	ldr	r3, [pc, #264]	; (20001398 <CAN_OperatingModeRequest+0x120>)
20001290:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_OPERATING_MODE(CAN_OperatingMode));

  if (CAN_OperatingMode == CAN_OperatingMode_Initialization)
20001292:	1cfb      	adds	r3, r7, #3
20001294:	781b      	ldrb	r3, [r3, #0]
20001296:	2b00      	cmp	r3, #0
20001298:	d124      	bne.n	200012e4 <CAN_OperatingModeRequest+0x6c>
  {
    /* Request initialisation */
    CANx->MCR = (uint32_t)((CANx->MCR & (uint32_t)(~(uint32_t)CAN_MCR_SLEEP)) | CAN_MCR_INRQ);
2000129a:	687b      	ldr	r3, [r7, #4]
2000129c:	681b      	ldr	r3, [r3, #0]
2000129e:	2203      	movs	r2, #3
200012a0:	4393      	bics	r3, r2
200012a2:	2201      	movs	r2, #1
200012a4:	431a      	orrs	r2, r3
200012a6:	687b      	ldr	r3, [r7, #4]
200012a8:	601a      	str	r2, [r3, #0]

    /* Wait the acknowledge */
    while (((CANx->MSR & CAN_MODE_MASK) != CAN_MSR_INAK) && (timeout != 0))
200012aa:	e002      	b.n	200012b2 <CAN_OperatingModeRequest+0x3a>
    {
      timeout--;
200012ac:	68bb      	ldr	r3, [r7, #8]
200012ae:	3b01      	subs	r3, #1
200012b0:	60bb      	str	r3, [r7, #8]
    while (((CANx->MSR & CAN_MODE_MASK) != CAN_MSR_INAK) && (timeout != 0))
200012b2:	687b      	ldr	r3, [r7, #4]
200012b4:	685b      	ldr	r3, [r3, #4]
200012b6:	2203      	movs	r2, #3
200012b8:	4013      	ands	r3, r2
200012ba:	2b01      	cmp	r3, #1
200012bc:	d002      	beq.n	200012c4 <CAN_OperatingModeRequest+0x4c>
200012be:	68bb      	ldr	r3, [r7, #8]
200012c0:	2b00      	cmp	r3, #0
200012c2:	d1f3      	bne.n	200012ac <CAN_OperatingModeRequest+0x34>
    }
    if ((CANx->MSR & CAN_MODE_MASK) != CAN_MSR_INAK)
200012c4:	687b      	ldr	r3, [r7, #4]
200012c6:	685b      	ldr	r3, [r3, #4]
200012c8:	2203      	movs	r2, #3
200012ca:	4013      	ands	r3, r2
200012cc:	2b01      	cmp	r3, #1
200012ce:	d004      	beq.n	200012da <CAN_OperatingModeRequest+0x62>
    {
      status = CAN_ModeStatus_Failed;
200012d0:	230f      	movs	r3, #15
200012d2:	18fb      	adds	r3, r7, r3
200012d4:	2200      	movs	r2, #0
200012d6:	701a      	strb	r2, [r3, #0]
200012d8:	e057      	b.n	2000138a <CAN_OperatingModeRequest+0x112>
    }
    else
    {
      status = CAN_ModeStatus_Success;
200012da:	230f      	movs	r3, #15
200012dc:	18fb      	adds	r3, r7, r3
200012de:	2201      	movs	r2, #1
200012e0:	701a      	strb	r2, [r3, #0]
200012e2:	e052      	b.n	2000138a <CAN_OperatingModeRequest+0x112>
    }
  }
  else  if (CAN_OperatingMode == CAN_OperatingMode_Normal)
200012e4:	1cfb      	adds	r3, r7, #3
200012e6:	781b      	ldrb	r3, [r3, #0]
200012e8:	2b01      	cmp	r3, #1
200012ea:	d121      	bne.n	20001330 <CAN_OperatingModeRequest+0xb8>
  {
    /* Request leave initialisation and sleep mode  and enter Normal mode */
    CANx->MCR &= (uint32_t)(~(CAN_MCR_SLEEP|CAN_MCR_INRQ));
200012ec:	687b      	ldr	r3, [r7, #4]
200012ee:	681b      	ldr	r3, [r3, #0]
200012f0:	2203      	movs	r2, #3
200012f2:	4393      	bics	r3, r2
200012f4:	001a      	movs	r2, r3
200012f6:	687b      	ldr	r3, [r7, #4]
200012f8:	601a      	str	r2, [r3, #0]

    /* Wait the acknowledge */
    while (((CANx->MSR & CAN_MODE_MASK) != 0) && (timeout!=0))
200012fa:	e002      	b.n	20001302 <CAN_OperatingModeRequest+0x8a>
    {
      timeout--;
200012fc:	68bb      	ldr	r3, [r7, #8]
200012fe:	3b01      	subs	r3, #1
20001300:	60bb      	str	r3, [r7, #8]
    while (((CANx->MSR & CAN_MODE_MASK) != 0) && (timeout!=0))
20001302:	687b      	ldr	r3, [r7, #4]
20001304:	685b      	ldr	r3, [r3, #4]
20001306:	2203      	movs	r2, #3
20001308:	4013      	ands	r3, r2
2000130a:	d002      	beq.n	20001312 <CAN_OperatingModeRequest+0x9a>
2000130c:	68bb      	ldr	r3, [r7, #8]
2000130e:	2b00      	cmp	r3, #0
20001310:	d1f4      	bne.n	200012fc <CAN_OperatingModeRequest+0x84>
    }
    if ((CANx->MSR & CAN_MODE_MASK) != 0)
20001312:	687b      	ldr	r3, [r7, #4]
20001314:	685b      	ldr	r3, [r3, #4]
20001316:	2203      	movs	r2, #3
20001318:	4013      	ands	r3, r2
2000131a:	d004      	beq.n	20001326 <CAN_OperatingModeRequest+0xae>
    {
      status = CAN_ModeStatus_Failed;
2000131c:	230f      	movs	r3, #15
2000131e:	18fb      	adds	r3, r7, r3
20001320:	2200      	movs	r2, #0
20001322:	701a      	strb	r2, [r3, #0]
20001324:	e031      	b.n	2000138a <CAN_OperatingModeRequest+0x112>
    }
    else
    {
      status = CAN_ModeStatus_Success;
20001326:	230f      	movs	r3, #15
20001328:	18fb      	adds	r3, r7, r3
2000132a:	2201      	movs	r2, #1
2000132c:	701a      	strb	r2, [r3, #0]
2000132e:	e02c      	b.n	2000138a <CAN_OperatingModeRequest+0x112>
    }
  }
  else  if (CAN_OperatingMode == CAN_OperatingMode_Sleep)
20001330:	1cfb      	adds	r3, r7, #3
20001332:	781b      	ldrb	r3, [r3, #0]
20001334:	2b02      	cmp	r3, #2
20001336:	d124      	bne.n	20001382 <CAN_OperatingModeRequest+0x10a>
  {
    /* Request Sleep mode */
    CANx->MCR = (uint32_t)((CANx->MCR & (uint32_t)(~(uint32_t)CAN_MCR_INRQ)) | CAN_MCR_SLEEP);
20001338:	687b      	ldr	r3, [r7, #4]
2000133a:	681b      	ldr	r3, [r3, #0]
2000133c:	2203      	movs	r2, #3
2000133e:	4393      	bics	r3, r2
20001340:	2202      	movs	r2, #2
20001342:	431a      	orrs	r2, r3
20001344:	687b      	ldr	r3, [r7, #4]
20001346:	601a      	str	r2, [r3, #0]

    /* Wait the acknowledge */
    while (((CANx->MSR & CAN_MODE_MASK) != CAN_MSR_SLAK) && (timeout!=0))
20001348:	e002      	b.n	20001350 <CAN_OperatingModeRequest+0xd8>
    {
      timeout--;
2000134a:	68bb      	ldr	r3, [r7, #8]
2000134c:	3b01      	subs	r3, #1
2000134e:	60bb      	str	r3, [r7, #8]
    while (((CANx->MSR & CAN_MODE_MASK) != CAN_MSR_SLAK) && (timeout!=0))
20001350:	687b      	ldr	r3, [r7, #4]
20001352:	685b      	ldr	r3, [r3, #4]
20001354:	2203      	movs	r2, #3
20001356:	4013      	ands	r3, r2
20001358:	2b02      	cmp	r3, #2
2000135a:	d002      	beq.n	20001362 <CAN_OperatingModeRequest+0xea>
2000135c:	68bb      	ldr	r3, [r7, #8]
2000135e:	2b00      	cmp	r3, #0
20001360:	d1f3      	bne.n	2000134a <CAN_OperatingModeRequest+0xd2>
    }
    if ((CANx->MSR & CAN_MODE_MASK) != CAN_MSR_SLAK)
20001362:	687b      	ldr	r3, [r7, #4]
20001364:	685b      	ldr	r3, [r3, #4]
20001366:	2203      	movs	r2, #3
20001368:	4013      	ands	r3, r2
2000136a:	2b02      	cmp	r3, #2
2000136c:	d004      	beq.n	20001378 <CAN_OperatingModeRequest+0x100>
    {
      status = CAN_ModeStatus_Failed;
2000136e:	230f      	movs	r3, #15
20001370:	18fb      	adds	r3, r7, r3
20001372:	2200      	movs	r2, #0
20001374:	701a      	strb	r2, [r3, #0]
20001376:	e008      	b.n	2000138a <CAN_OperatingModeRequest+0x112>
    }
    else
    {
      status = CAN_ModeStatus_Success;
20001378:	230f      	movs	r3, #15
2000137a:	18fb      	adds	r3, r7, r3
2000137c:	2201      	movs	r2, #1
2000137e:	701a      	strb	r2, [r3, #0]
20001380:	e003      	b.n	2000138a <CAN_OperatingModeRequest+0x112>
    }
  }
  else
  {
    status = CAN_ModeStatus_Failed;
20001382:	230f      	movs	r3, #15
20001384:	18fb      	adds	r3, r7, r3
20001386:	2200      	movs	r2, #0
20001388:	701a      	strb	r2, [r3, #0]
  }

  return  (uint8_t) status;
2000138a:	230f      	movs	r3, #15
2000138c:	18fb      	adds	r3, r7, r3
2000138e:	781b      	ldrb	r3, [r3, #0]
}
20001390:	0018      	movs	r0, r3
20001392:	46bd      	mov	sp, r7
20001394:	b004      	add	sp, #16
20001396:	bd80      	pop	{r7, pc}
20001398:	0000ffff 	strdeq	pc, [r0], -pc	; <UNPREDICTABLE>

2000139c <CAN_Sleep>:
  * @param  CANx: where x can be 1,2 or 3 to select the CAN peripheral.
  * @note   CAN3 peripheral is available only for STM32F413_423xx devices
  * @retval CAN_Sleep_Ok if sleep entered, CAN_Sleep_Failed otherwise.
  */
uint8_t CAN_Sleep(CAN_TypeDef* CANx)
{
2000139c:	b580      	push	{r7, lr}
2000139e:	b084      	sub	sp, #16
200013a0:	af00      	add	r7, sp, #0
200013a2:	6078      	str	r0, [r7, #4]
  uint8_t sleepstatus = CAN_Sleep_Failed;
200013a4:	230f      	movs	r3, #15
200013a6:	18fb      	adds	r3, r7, r3
200013a8:	2200      	movs	r2, #0
200013aa:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
    
  /* Request Sleep mode */
   CANx->MCR = (((CANx->MCR) & (uint32_t)(~(uint32_t)CAN_MCR_INRQ)) | CAN_MCR_SLEEP);
200013ac:	687b      	ldr	r3, [r7, #4]
200013ae:	681b      	ldr	r3, [r3, #0]
200013b0:	2203      	movs	r2, #3
200013b2:	4393      	bics	r3, r2
200013b4:	2202      	movs	r2, #2
200013b6:	431a      	orrs	r2, r3
200013b8:	687b      	ldr	r3, [r7, #4]
200013ba:	601a      	str	r2, [r3, #0]
   
  /* Sleep mode status */
  if ((CANx->MSR & (CAN_MSR_SLAK|CAN_MSR_INAK)) == CAN_MSR_SLAK)
200013bc:	687b      	ldr	r3, [r7, #4]
200013be:	685b      	ldr	r3, [r3, #4]
200013c0:	2203      	movs	r2, #3
200013c2:	4013      	ands	r3, r2
200013c4:	2b02      	cmp	r3, #2
200013c6:	d103      	bne.n	200013d0 <CAN_Sleep+0x34>
  {
    /* Sleep mode not entered */
    sleepstatus =  CAN_Sleep_Ok;
200013c8:	230f      	movs	r3, #15
200013ca:	18fb      	adds	r3, r7, r3
200013cc:	2201      	movs	r2, #1
200013ce:	701a      	strb	r2, [r3, #0]
  }
  /* return sleep mode status */
   return (uint8_t)sleepstatus;
200013d0:	230f      	movs	r3, #15
200013d2:	18fb      	adds	r3, r7, r3
200013d4:	781b      	ldrb	r3, [r3, #0]
}
200013d6:	0018      	movs	r0, r3
200013d8:	46bd      	mov	sp, r7
200013da:	b004      	add	sp, #16
200013dc:	bd80      	pop	{r7, pc}

200013de <CAN_WakeUp>:
  * @param  CANx: where x can be 1,2 or 3 to select the CAN peripheral.
  * @note   CAN3 peripheral is available only for STM32F413_423xx devices
  * @retval CAN_WakeUp_Ok if sleep mode left, CAN_WakeUp_Failed otherwise.
  */
uint8_t CAN_WakeUp(CAN_TypeDef* CANx)
{
200013de:	b580      	push	{r7, lr}
200013e0:	b084      	sub	sp, #16
200013e2:	af00      	add	r7, sp, #0
200013e4:	6078      	str	r0, [r7, #4]
  uint32_t wait_slak = SLAK_TIMEOUT;
200013e6:	4b15      	ldr	r3, [pc, #84]	; (2000143c <CAN_WakeUp+0x5e>)
200013e8:	60fb      	str	r3, [r7, #12]
  uint8_t wakeupstatus = CAN_WakeUp_Failed;
200013ea:	230b      	movs	r3, #11
200013ec:	18fb      	adds	r3, r7, r3
200013ee:	2200      	movs	r2, #0
200013f0:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
    
  /* Wake up request */
  CANx->MCR &= ~(uint32_t)CAN_MCR_SLEEP;
200013f2:	687b      	ldr	r3, [r7, #4]
200013f4:	681b      	ldr	r3, [r3, #0]
200013f6:	2202      	movs	r2, #2
200013f8:	4393      	bics	r3, r2
200013fa:	001a      	movs	r2, r3
200013fc:	687b      	ldr	r3, [r7, #4]
200013fe:	601a      	str	r2, [r3, #0]
    
  /* Sleep mode status */
  while(((CANx->MSR & CAN_MSR_SLAK) == CAN_MSR_SLAK)&&(wait_slak!=0x00))
20001400:	e002      	b.n	20001408 <CAN_WakeUp+0x2a>
  {
   wait_slak--;
20001402:	68fb      	ldr	r3, [r7, #12]
20001404:	3b01      	subs	r3, #1
20001406:	60fb      	str	r3, [r7, #12]
  while(((CANx->MSR & CAN_MSR_SLAK) == CAN_MSR_SLAK)&&(wait_slak!=0x00))
20001408:	687b      	ldr	r3, [r7, #4]
2000140a:	685b      	ldr	r3, [r3, #4]
2000140c:	2202      	movs	r2, #2
2000140e:	4013      	ands	r3, r2
20001410:	2b02      	cmp	r3, #2
20001412:	d102      	bne.n	2000141a <CAN_WakeUp+0x3c>
20001414:	68fb      	ldr	r3, [r7, #12]
20001416:	2b00      	cmp	r3, #0
20001418:	d1f3      	bne.n	20001402 <CAN_WakeUp+0x24>
  }
  if((CANx->MSR & CAN_MSR_SLAK) != CAN_MSR_SLAK)
2000141a:	687b      	ldr	r3, [r7, #4]
2000141c:	685b      	ldr	r3, [r3, #4]
2000141e:	2202      	movs	r2, #2
20001420:	4013      	ands	r3, r2
20001422:	2b02      	cmp	r3, #2
20001424:	d003      	beq.n	2000142e <CAN_WakeUp+0x50>
  {
   /* wake up done : Sleep mode exited */
    wakeupstatus = CAN_WakeUp_Ok;
20001426:	230b      	movs	r3, #11
20001428:	18fb      	adds	r3, r7, r3
2000142a:	2201      	movs	r2, #1
2000142c:	701a      	strb	r2, [r3, #0]
  }
  /* return wakeup status */
  return (uint8_t)wakeupstatus;
2000142e:	230b      	movs	r3, #11
20001430:	18fb      	adds	r3, r7, r3
20001432:	781b      	ldrb	r3, [r3, #0]
}
20001434:	0018      	movs	r0, r3
20001436:	46bd      	mov	sp, r7
20001438:	b004      	add	sp, #16
2000143a:	bd80      	pop	{r7, pc}
2000143c:	0000ffff 	strdeq	pc, [r0], -pc	; <UNPREDICTABLE>

20001440 <CAN_GetLastErrorCode>:
  *          - CAN_ERRORCODE_BitDominantErr: Bit Dominant Error
  *          - CAN_ERRORCODE_CRCErr: CRC Error
  *          - CAN_ERRORCODE_SoftwareSetErr: Software Set Error  
  */
uint8_t CAN_GetLastErrorCode(CAN_TypeDef* CANx)
{
20001440:	b580      	push	{r7, lr}
20001442:	b084      	sub	sp, #16
20001444:	af00      	add	r7, sp, #0
20001446:	6078      	str	r0, [r7, #4]
  uint8_t errorcode=0;
20001448:	210f      	movs	r1, #15
2000144a:	187b      	adds	r3, r7, r1
2000144c:	2200      	movs	r2, #0
2000144e:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  
  /* Get the error code*/
  errorcode = (((uint8_t)CANx->ESR) & (uint8_t)CAN_ESR_LEC);
20001450:	687b      	ldr	r3, [r7, #4]
20001452:	699b      	ldr	r3, [r3, #24]
20001454:	b2da      	uxtb	r2, r3
20001456:	0008      	movs	r0, r1
20001458:	187b      	adds	r3, r7, r1
2000145a:	2170      	movs	r1, #112	; 0x70
2000145c:	400a      	ands	r2, r1
2000145e:	701a      	strb	r2, [r3, #0]
  
  /* Return the error code*/
  return errorcode;
20001460:	0001      	movs	r1, r0
20001462:	187b      	adds	r3, r7, r1
20001464:	781b      	ldrb	r3, [r3, #0]
}
20001466:	0018      	movs	r0, r3
20001468:	46bd      	mov	sp, r7
2000146a:	b004      	add	sp, #16
2000146c:	bd80      	pop	{r7, pc}

2000146e <CAN_GetReceiveErrorCounter>:
  * @param  CANx: where x can be 1,2 or 3 to select the CAN peripheral.
  * @note   CAN3 peripheral is available only for STM32F413_423xx devices
  * @retval CAN Receive Error Counter. 
  */
uint8_t CAN_GetReceiveErrorCounter(CAN_TypeDef* CANx)
{
2000146e:	b580      	push	{r7, lr}
20001470:	b084      	sub	sp, #16
20001472:	af00      	add	r7, sp, #0
20001474:	6078      	str	r0, [r7, #4]
  uint8_t counter=0;
20001476:	210f      	movs	r1, #15
20001478:	187b      	adds	r3, r7, r1
2000147a:	2200      	movs	r2, #0
2000147c:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  
  /* Get the Receive Error Counter*/
  counter = (uint8_t)((CANx->ESR & CAN_ESR_REC)>> 24);
2000147e:	687b      	ldr	r3, [r7, #4]
20001480:	699b      	ldr	r3, [r3, #24]
20001482:	0e1a      	lsrs	r2, r3, #24
20001484:	187b      	adds	r3, r7, r1
20001486:	701a      	strb	r2, [r3, #0]
  
  /* Return the Receive Error Counter*/
  return counter;
20001488:	187b      	adds	r3, r7, r1
2000148a:	781b      	ldrb	r3, [r3, #0]
}
2000148c:	0018      	movs	r0, r3
2000148e:	46bd      	mov	sp, r7
20001490:	b004      	add	sp, #16
20001492:	bd80      	pop	{r7, pc}

20001494 <CAN_GetLSBTransmitErrorCounter>:
  * @param  CANx: where x can be 1,2 or 3 to select the CAN peripheral.
  * @note   CAN3 peripheral is available only for STM32F413_423xx devices
  * @retval LSB of the 9-bit CAN Transmit Error Counter. 
  */
uint8_t CAN_GetLSBTransmitErrorCounter(CAN_TypeDef* CANx)
{
20001494:	b580      	push	{r7, lr}
20001496:	b084      	sub	sp, #16
20001498:	af00      	add	r7, sp, #0
2000149a:	6078      	str	r0, [r7, #4]
  uint8_t counter=0;
2000149c:	210f      	movs	r1, #15
2000149e:	187b      	adds	r3, r7, r1
200014a0:	2200      	movs	r2, #0
200014a2:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  
  /* Get the LSB of the 9-bit CANx Transmit Error Counter(TEC) */
  counter = (uint8_t)((CANx->ESR & CAN_ESR_TEC)>> 16);
200014a4:	687b      	ldr	r3, [r7, #4]
200014a6:	699b      	ldr	r3, [r3, #24]
200014a8:	0c1a      	lsrs	r2, r3, #16
200014aa:	187b      	adds	r3, r7, r1
200014ac:	701a      	strb	r2, [r3, #0]
  
  /* Return the LSB of the 9-bit CANx Transmit Error Counter(TEC) */
  return counter;
200014ae:	187b      	adds	r3, r7, r1
200014b0:	781b      	ldrb	r3, [r3, #0]
}
200014b2:	0018      	movs	r0, r3
200014b4:	46bd      	mov	sp, r7
200014b6:	b004      	add	sp, #16
200014b8:	bd80      	pop	{r7, pc}

200014ba <CAN_ITConfig>:
  * @note   CAN3 peripheral is available only for STM32F413_423xx devices
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void CAN_ITConfig(CAN_TypeDef* CANx, uint32_t CAN_IT, FunctionalState NewState)
{
200014ba:	b580      	push	{r7, lr}
200014bc:	b084      	sub	sp, #16
200014be:	af00      	add	r7, sp, #0
200014c0:	60f8      	str	r0, [r7, #12]
200014c2:	60b9      	str	r1, [r7, #8]
200014c4:	1dfb      	adds	r3, r7, #7
200014c6:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_IT(CAN_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
200014c8:	1dfb      	adds	r3, r7, #7
200014ca:	781b      	ldrb	r3, [r3, #0]
200014cc:	2b00      	cmp	r3, #0
200014ce:	d006      	beq.n	200014de <CAN_ITConfig+0x24>
  {
    /* Enable the selected CANx interrupt */
    CANx->IER |= CAN_IT;
200014d0:	68fb      	ldr	r3, [r7, #12]
200014d2:	695a      	ldr	r2, [r3, #20]
200014d4:	68bb      	ldr	r3, [r7, #8]
200014d6:	431a      	orrs	r2, r3
200014d8:	68fb      	ldr	r3, [r7, #12]
200014da:	615a      	str	r2, [r3, #20]
  else
  {
    /* Disable the selected CANx interrupt */
    CANx->IER &= ~CAN_IT;
  }
}
200014dc:	e006      	b.n	200014ec <CAN_ITConfig+0x32>
    CANx->IER &= ~CAN_IT;
200014de:	68fb      	ldr	r3, [r7, #12]
200014e0:	695b      	ldr	r3, [r3, #20]
200014e2:	68ba      	ldr	r2, [r7, #8]
200014e4:	43d2      	mvns	r2, r2
200014e6:	401a      	ands	r2, r3
200014e8:	68fb      	ldr	r3, [r7, #12]
200014ea:	615a      	str	r2, [r3, #20]
}
200014ec:	46c0      	nop			; (mov r8, r8)
200014ee:	46bd      	mov	sp, r7
200014f0:	b004      	add	sp, #16
200014f2:	bd80      	pop	{r7, pc}

200014f4 <CAN_GetFlagStatus>:
  *            @arg CAN_FLAG_LEC: Last error code Flag
  * @note   CAN3 peripheral is available only for STM32F413_423xx devices
  * @retval The new state of CAN_FLAG (SET or RESET).
  */
FlagStatus CAN_GetFlagStatus(CAN_TypeDef* CANx, uint32_t CAN_FLAG)
{
200014f4:	b580      	push	{r7, lr}
200014f6:	b084      	sub	sp, #16
200014f8:	af00      	add	r7, sp, #0
200014fa:	6078      	str	r0, [r7, #4]
200014fc:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
200014fe:	230f      	movs	r3, #15
20001500:	18fb      	adds	r3, r7, r3
20001502:	2200      	movs	r2, #0
20001504:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_GET_FLAG(CAN_FLAG));
  

  if((CAN_FLAG & CAN_FLAGS_ESR) != (uint32_t)RESET)
20001506:	683a      	ldr	r2, [r7, #0]
20001508:	23f0      	movs	r3, #240	; 0xf0
2000150a:	041b      	lsls	r3, r3, #16
2000150c:	4013      	ands	r3, r2
2000150e:	d010      	beq.n	20001532 <CAN_GetFlagStatus+0x3e>
  { 
    /* Check the status of the specified CAN flag */
    if ((CANx->ESR & (CAN_FLAG & 0x000FFFFF)) != (uint32_t)RESET)
20001510:	687b      	ldr	r3, [r7, #4]
20001512:	699b      	ldr	r3, [r3, #24]
20001514:	683a      	ldr	r2, [r7, #0]
20001516:	4013      	ands	r3, r2
20001518:	031b      	lsls	r3, r3, #12
2000151a:	0b1b      	lsrs	r3, r3, #12
2000151c:	d004      	beq.n	20001528 <CAN_GetFlagStatus+0x34>
    { 
      /* CAN_FLAG is set */
      bitstatus = SET;
2000151e:	230f      	movs	r3, #15
20001520:	18fb      	adds	r3, r7, r3
20001522:	2201      	movs	r2, #1
20001524:	701a      	strb	r2, [r3, #0]
20001526:	e056      	b.n	200015d6 <CAN_GetFlagStatus+0xe2>
    }
    else
    { 
      /* CAN_FLAG is reset */
      bitstatus = RESET;
20001528:	230f      	movs	r3, #15
2000152a:	18fb      	adds	r3, r7, r3
2000152c:	2200      	movs	r2, #0
2000152e:	701a      	strb	r2, [r3, #0]
20001530:	e051      	b.n	200015d6 <CAN_GetFlagStatus+0xe2>
    }
  }
  else if((CAN_FLAG & CAN_FLAGS_MSR) != (uint32_t)RESET)
20001532:	683a      	ldr	r2, [r7, #0]
20001534:	2380      	movs	r3, #128	; 0x80
20001536:	045b      	lsls	r3, r3, #17
20001538:	4013      	ands	r3, r2
2000153a:	d010      	beq.n	2000155e <CAN_GetFlagStatus+0x6a>
  { 
    /* Check the status of the specified CAN flag */
    if ((CANx->MSR & (CAN_FLAG & 0x000FFFFF)) != (uint32_t)RESET)
2000153c:	687b      	ldr	r3, [r7, #4]
2000153e:	685b      	ldr	r3, [r3, #4]
20001540:	683a      	ldr	r2, [r7, #0]
20001542:	4013      	ands	r3, r2
20001544:	031b      	lsls	r3, r3, #12
20001546:	0b1b      	lsrs	r3, r3, #12
20001548:	d004      	beq.n	20001554 <CAN_GetFlagStatus+0x60>
    { 
      /* CAN_FLAG is set */
      bitstatus = SET;
2000154a:	230f      	movs	r3, #15
2000154c:	18fb      	adds	r3, r7, r3
2000154e:	2201      	movs	r2, #1
20001550:	701a      	strb	r2, [r3, #0]
20001552:	e040      	b.n	200015d6 <CAN_GetFlagStatus+0xe2>
    }
    else
    { 
      /* CAN_FLAG is reset */
      bitstatus = RESET;
20001554:	230f      	movs	r3, #15
20001556:	18fb      	adds	r3, r7, r3
20001558:	2200      	movs	r2, #0
2000155a:	701a      	strb	r2, [r3, #0]
2000155c:	e03b      	b.n	200015d6 <CAN_GetFlagStatus+0xe2>
    }
  }
  else if((CAN_FLAG & CAN_FLAGS_TSR) != (uint32_t)RESET)
2000155e:	683a      	ldr	r2, [r7, #0]
20001560:	2380      	movs	r3, #128	; 0x80
20001562:	051b      	lsls	r3, r3, #20
20001564:	4013      	ands	r3, r2
20001566:	d010      	beq.n	2000158a <CAN_GetFlagStatus+0x96>
  { 
    /* Check the status of the specified CAN flag */
    if ((CANx->TSR & (CAN_FLAG & 0x000FFFFF)) != (uint32_t)RESET)
20001568:	687b      	ldr	r3, [r7, #4]
2000156a:	689b      	ldr	r3, [r3, #8]
2000156c:	683a      	ldr	r2, [r7, #0]
2000156e:	4013      	ands	r3, r2
20001570:	031b      	lsls	r3, r3, #12
20001572:	0b1b      	lsrs	r3, r3, #12
20001574:	d004      	beq.n	20001580 <CAN_GetFlagStatus+0x8c>
    { 
      /* CAN_FLAG is set */
      bitstatus = SET;
20001576:	230f      	movs	r3, #15
20001578:	18fb      	adds	r3, r7, r3
2000157a:	2201      	movs	r2, #1
2000157c:	701a      	strb	r2, [r3, #0]
2000157e:	e02a      	b.n	200015d6 <CAN_GetFlagStatus+0xe2>
    }
    else
    { 
      /* CAN_FLAG is reset */
      bitstatus = RESET;
20001580:	230f      	movs	r3, #15
20001582:	18fb      	adds	r3, r7, r3
20001584:	2200      	movs	r2, #0
20001586:	701a      	strb	r2, [r3, #0]
20001588:	e025      	b.n	200015d6 <CAN_GetFlagStatus+0xe2>
    }
  }
  else if((CAN_FLAG & CAN_FLAGS_RF0R) != (uint32_t)RESET)
2000158a:	683a      	ldr	r2, [r7, #0]
2000158c:	2380      	movs	r3, #128	; 0x80
2000158e:	049b      	lsls	r3, r3, #18
20001590:	4013      	ands	r3, r2
20001592:	d010      	beq.n	200015b6 <CAN_GetFlagStatus+0xc2>
  { 
    /* Check the status of the specified CAN flag */
    if ((CANx->RF0R & (CAN_FLAG & 0x000FFFFF)) != (uint32_t)RESET)
20001594:	687b      	ldr	r3, [r7, #4]
20001596:	68db      	ldr	r3, [r3, #12]
20001598:	683a      	ldr	r2, [r7, #0]
2000159a:	4013      	ands	r3, r2
2000159c:	031b      	lsls	r3, r3, #12
2000159e:	0b1b      	lsrs	r3, r3, #12
200015a0:	d004      	beq.n	200015ac <CAN_GetFlagStatus+0xb8>
    { 
      /* CAN_FLAG is set */
      bitstatus = SET;
200015a2:	230f      	movs	r3, #15
200015a4:	18fb      	adds	r3, r7, r3
200015a6:	2201      	movs	r2, #1
200015a8:	701a      	strb	r2, [r3, #0]
200015aa:	e014      	b.n	200015d6 <CAN_GetFlagStatus+0xe2>
    }
    else
    { 
      /* CAN_FLAG is reset */
      bitstatus = RESET;
200015ac:	230f      	movs	r3, #15
200015ae:	18fb      	adds	r3, r7, r3
200015b0:	2200      	movs	r2, #0
200015b2:	701a      	strb	r2, [r3, #0]
200015b4:	e00f      	b.n	200015d6 <CAN_GetFlagStatus+0xe2>
    }
  }
  else /* If(CAN_FLAG & CAN_FLAGS_RF1R != (uint32_t)RESET) */
  { 
    /* Check the status of the specified CAN flag */
    if ((uint32_t)(CANx->RF1R & (CAN_FLAG & 0x000FFFFF)) != (uint32_t)RESET)
200015b6:	687b      	ldr	r3, [r7, #4]
200015b8:	691b      	ldr	r3, [r3, #16]
200015ba:	683a      	ldr	r2, [r7, #0]
200015bc:	4013      	ands	r3, r2
200015be:	031b      	lsls	r3, r3, #12
200015c0:	0b1b      	lsrs	r3, r3, #12
200015c2:	d004      	beq.n	200015ce <CAN_GetFlagStatus+0xda>
    { 
      /* CAN_FLAG is set */
      bitstatus = SET;
200015c4:	230f      	movs	r3, #15
200015c6:	18fb      	adds	r3, r7, r3
200015c8:	2201      	movs	r2, #1
200015ca:	701a      	strb	r2, [r3, #0]
200015cc:	e003      	b.n	200015d6 <CAN_GetFlagStatus+0xe2>
    }
    else
    { 
      /* CAN_FLAG is reset */
      bitstatus = RESET;
200015ce:	230f      	movs	r3, #15
200015d0:	18fb      	adds	r3, r7, r3
200015d2:	2200      	movs	r2, #0
200015d4:	701a      	strb	r2, [r3, #0]
    }
  }
  /* Return the CAN_FLAG status */
  return  bitstatus;
200015d6:	230f      	movs	r3, #15
200015d8:	18fb      	adds	r3, r7, r3
200015da:	781b      	ldrb	r3, [r3, #0]
}
200015dc:	0018      	movs	r0, r3
200015de:	46bd      	mov	sp, r7
200015e0:	b004      	add	sp, #16
200015e2:	bd80      	pop	{r7, pc}

200015e4 <CAN_ClearFlag>:
  *            @arg CAN_FLAG_LEC: Last error code Flag
  * @note   CAN3 peripheral is available only for STM32F413_423xx devices
  * @retval None
  */
void CAN_ClearFlag(CAN_TypeDef* CANx, uint32_t CAN_FLAG)
{
200015e4:	b580      	push	{r7, lr}
200015e6:	b084      	sub	sp, #16
200015e8:	af00      	add	r7, sp, #0
200015ea:	6078      	str	r0, [r7, #4]
200015ec:	6039      	str	r1, [r7, #0]
  uint32_t flagtmp=0;
200015ee:	2300      	movs	r3, #0
200015f0:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_CLEAR_FLAG(CAN_FLAG));
  
  if (CAN_FLAG == CAN_FLAG_LEC) /* ESR register */
200015f2:	683b      	ldr	r3, [r7, #0]
200015f4:	4a16      	ldr	r2, [pc, #88]	; (20001650 <CAN_ClearFlag+0x6c>)
200015f6:	4293      	cmp	r3, r2
200015f8:	d103      	bne.n	20001602 <CAN_ClearFlag+0x1e>
  {
    /* Clear the selected CAN flags */
    CANx->ESR = (uint32_t)RESET;
200015fa:	687b      	ldr	r3, [r7, #4]
200015fc:	2200      	movs	r2, #0
200015fe:	619a      	str	r2, [r3, #24]
    {
      /* Operating mode Flags */
      CANx->MSR = (uint32_t)(flagtmp);
    }
  }
}
20001600:	e021      	b.n	20001646 <CAN_ClearFlag+0x62>
    flagtmp = CAN_FLAG & 0x000FFFFF;
20001602:	683b      	ldr	r3, [r7, #0]
20001604:	031b      	lsls	r3, r3, #12
20001606:	0b1b      	lsrs	r3, r3, #12
20001608:	60fb      	str	r3, [r7, #12]
    if ((CAN_FLAG & CAN_FLAGS_RF0R)!=(uint32_t)RESET)
2000160a:	683a      	ldr	r2, [r7, #0]
2000160c:	2380      	movs	r3, #128	; 0x80
2000160e:	049b      	lsls	r3, r3, #18
20001610:	4013      	ands	r3, r2
20001612:	d003      	beq.n	2000161c <CAN_ClearFlag+0x38>
      CANx->RF0R = (uint32_t)(flagtmp);
20001614:	687b      	ldr	r3, [r7, #4]
20001616:	68fa      	ldr	r2, [r7, #12]
20001618:	60da      	str	r2, [r3, #12]
}
2000161a:	e014      	b.n	20001646 <CAN_ClearFlag+0x62>
    else if ((CAN_FLAG & CAN_FLAGS_RF1R)!=(uint32_t)RESET)
2000161c:	683a      	ldr	r2, [r7, #0]
2000161e:	2380      	movs	r3, #128	; 0x80
20001620:	04db      	lsls	r3, r3, #19
20001622:	4013      	ands	r3, r2
20001624:	d003      	beq.n	2000162e <CAN_ClearFlag+0x4a>
      CANx->RF1R = (uint32_t)(flagtmp);
20001626:	687b      	ldr	r3, [r7, #4]
20001628:	68fa      	ldr	r2, [r7, #12]
2000162a:	611a      	str	r2, [r3, #16]
}
2000162c:	e00b      	b.n	20001646 <CAN_ClearFlag+0x62>
    else if ((CAN_FLAG & CAN_FLAGS_TSR)!=(uint32_t)RESET)
2000162e:	683a      	ldr	r2, [r7, #0]
20001630:	2380      	movs	r3, #128	; 0x80
20001632:	051b      	lsls	r3, r3, #20
20001634:	4013      	ands	r3, r2
20001636:	d003      	beq.n	20001640 <CAN_ClearFlag+0x5c>
      CANx->TSR = (uint32_t)(flagtmp);
20001638:	687b      	ldr	r3, [r7, #4]
2000163a:	68fa      	ldr	r2, [r7, #12]
2000163c:	609a      	str	r2, [r3, #8]
}
2000163e:	e002      	b.n	20001646 <CAN_ClearFlag+0x62>
      CANx->MSR = (uint32_t)(flagtmp);
20001640:	687b      	ldr	r3, [r7, #4]
20001642:	68fa      	ldr	r2, [r7, #12]
20001644:	605a      	str	r2, [r3, #4]
}
20001646:	46c0      	nop			; (mov r8, r8)
20001648:	46bd      	mov	sp, r7
2000164a:	b004      	add	sp, #16
2000164c:	bd80      	pop	{r7, pc}
2000164e:	46c0      	nop			; (mov r8, r8)
20001650:	30f00070 	rscscc	r0, r0, r0, ror r0

20001654 <CAN_GetITStatus>:
  *            @arg CAN_IT_ERR: Error Interrupt
  * @note   CAN3 peripheral is available only for STM32F413_423xx devices
  * @retval The current state of CAN_IT (SET or RESET).
  */
ITStatus CAN_GetITStatus(CAN_TypeDef* CANx, uint32_t CAN_IT)
{
20001654:	b590      	push	{r4, r7, lr}
20001656:	b085      	sub	sp, #20
20001658:	af00      	add	r7, sp, #0
2000165a:	6078      	str	r0, [r7, #4]
2000165c:	6039      	str	r1, [r7, #0]
  ITStatus itstatus = RESET;
2000165e:	230f      	movs	r3, #15
20001660:	18fb      	adds	r3, r7, r3
20001662:	2200      	movs	r2, #0
20001664:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_IT(CAN_IT));
  
  /* check the interrupt enable bit */
 if((CANx->IER & CAN_IT) != RESET)
20001666:	687b      	ldr	r3, [r7, #4]
20001668:	695b      	ldr	r3, [r3, #20]
2000166a:	683a      	ldr	r2, [r7, #0]
2000166c:	4013      	ands	r3, r2
2000166e:	d100      	bne.n	20001672 <CAN_GetITStatus+0x1e>
20001670:	e0db      	b.n	2000182a <CAN_GetITStatus+0x1d6>
 {
   /* in case the Interrupt is enabled, .... */
    switch (CAN_IT)
20001672:	683b      	ldr	r3, [r7, #0]
20001674:	2b40      	cmp	r3, #64	; 0x40
20001676:	d100      	bne.n	2000167a <CAN_GetITStatus+0x26>
20001678:	e079      	b.n	2000176e <CAN_GetITStatus+0x11a>
2000167a:	d80e      	bhi.n	2000169a <CAN_GetITStatus+0x46>
2000167c:	2b04      	cmp	r3, #4
2000167e:	d04a      	beq.n	20001716 <CAN_GetITStatus+0xc2>
20001680:	d804      	bhi.n	2000168c <CAN_GetITStatus+0x38>
20001682:	2b01      	cmp	r3, #1
20001684:	d030      	beq.n	200016e8 <CAN_GetITStatus+0x94>
20001686:	2b02      	cmp	r3, #2
20001688:	d03a      	beq.n	20001700 <CAN_GetITStatus+0xac>
2000168a:	e0c8      	b.n	2000181e <CAN_GetITStatus+0x1ca>
2000168c:	2b10      	cmp	r3, #16
2000168e:	d058      	beq.n	20001742 <CAN_GetITStatus+0xee>
20001690:	2b20      	cmp	r3, #32
20001692:	d061      	beq.n	20001758 <CAN_GetITStatus+0x104>
20001694:	2b08      	cmp	r3, #8
20001696:	d049      	beq.n	2000172c <CAN_GetITStatus+0xd8>
20001698:	e0c1      	b.n	2000181e <CAN_GetITStatus+0x1ca>
2000169a:	2280      	movs	r2, #128	; 0x80
2000169c:	0112      	lsls	r2, r2, #4
2000169e:	4293      	cmp	r3, r2
200016a0:	d100      	bne.n	200016a4 <CAN_GetITStatus+0x50>
200016a2:	e0a6      	b.n	200017f2 <CAN_GetITStatus+0x19e>
200016a4:	2280      	movs	r2, #128	; 0x80
200016a6:	0112      	lsls	r2, r2, #4
200016a8:	4293      	cmp	r3, r2
200016aa:	d80f      	bhi.n	200016cc <CAN_GetITStatus+0x78>
200016ac:	2280      	movs	r2, #128	; 0x80
200016ae:	0092      	lsls	r2, r2, #2
200016b0:	4293      	cmp	r3, r2
200016b2:	d100      	bne.n	200016b6 <CAN_GetITStatus+0x62>
200016b4:	e087      	b.n	200017c6 <CAN_GetITStatus+0x172>
200016b6:	2280      	movs	r2, #128	; 0x80
200016b8:	00d2      	lsls	r2, r2, #3
200016ba:	4293      	cmp	r3, r2
200016bc:	d100      	bne.n	200016c0 <CAN_GetITStatus+0x6c>
200016be:	e08d      	b.n	200017dc <CAN_GetITStatus+0x188>
200016c0:	2280      	movs	r2, #128	; 0x80
200016c2:	0052      	lsls	r2, r2, #1
200016c4:	4293      	cmp	r3, r2
200016c6:	d100      	bne.n	200016ca <CAN_GetITStatus+0x76>
200016c8:	e072      	b.n	200017b0 <CAN_GetITStatus+0x15c>
200016ca:	e0a8      	b.n	2000181e <CAN_GetITStatus+0x1ca>
200016cc:	2280      	movs	r2, #128	; 0x80
200016ce:	0252      	lsls	r2, r2, #9
200016d0:	4293      	cmp	r3, r2
200016d2:	d057      	beq.n	20001784 <CAN_GetITStatus+0x130>
200016d4:	2280      	movs	r2, #128	; 0x80
200016d6:	0292      	lsls	r2, r2, #10
200016d8:	4293      	cmp	r3, r2
200016da:	d05e      	beq.n	2000179a <CAN_GetITStatus+0x146>
200016dc:	2280      	movs	r2, #128	; 0x80
200016de:	0212      	lsls	r2, r2, #8
200016e0:	4293      	cmp	r3, r2
200016e2:	d100      	bne.n	200016e6 <CAN_GetITStatus+0x92>
200016e4:	e090      	b.n	20001808 <CAN_GetITStatus+0x1b4>
200016e6:	e09a      	b.n	2000181e <CAN_GetITStatus+0x1ca>
    {
      case CAN_IT_TME:
        /* Check CAN_TSR_RQCPx bits */
        itstatus = CheckITStatus(CANx->TSR, CAN_TSR_RQCP0|CAN_TSR_RQCP1|CAN_TSR_RQCP2);  
200016e8:	687b      	ldr	r3, [r7, #4]
200016ea:	689b      	ldr	r3, [r3, #8]
200016ec:	220f      	movs	r2, #15
200016ee:	18bc      	adds	r4, r7, r2
200016f0:	4a53      	ldr	r2, [pc, #332]	; (20001840 <CAN_GetITStatus+0x1ec>)
200016f2:	0011      	movs	r1, r2
200016f4:	0018      	movs	r0, r3
200016f6:	f000 f91b 	bl	20001930 <CheckITStatus>
200016fa:	0003      	movs	r3, r0
200016fc:	7023      	strb	r3, [r4, #0]
        break;
200016fe:	e098      	b.n	20001832 <CAN_GetITStatus+0x1de>
      case CAN_IT_FMP0:
        /* Check CAN_RF0R_FMP0 bit */
        itstatus = CheckITStatus(CANx->RF0R, CAN_RF0R_FMP0);  
20001700:	687b      	ldr	r3, [r7, #4]
20001702:	68db      	ldr	r3, [r3, #12]
20001704:	220f      	movs	r2, #15
20001706:	18bc      	adds	r4, r7, r2
20001708:	2103      	movs	r1, #3
2000170a:	0018      	movs	r0, r3
2000170c:	f000 f910 	bl	20001930 <CheckITStatus>
20001710:	0003      	movs	r3, r0
20001712:	7023      	strb	r3, [r4, #0]
        break;
20001714:	e08d      	b.n	20001832 <CAN_GetITStatus+0x1de>
      case CAN_IT_FF0:
        /* Check CAN_RF0R_FULL0 bit */
        itstatus = CheckITStatus(CANx->RF0R, CAN_RF0R_FULL0);  
20001716:	687b      	ldr	r3, [r7, #4]
20001718:	68db      	ldr	r3, [r3, #12]
2000171a:	220f      	movs	r2, #15
2000171c:	18bc      	adds	r4, r7, r2
2000171e:	2108      	movs	r1, #8
20001720:	0018      	movs	r0, r3
20001722:	f000 f905 	bl	20001930 <CheckITStatus>
20001726:	0003      	movs	r3, r0
20001728:	7023      	strb	r3, [r4, #0]
        break;
2000172a:	e082      	b.n	20001832 <CAN_GetITStatus+0x1de>
      case CAN_IT_FOV0:
        /* Check CAN_RF0R_FOVR0 bit */
        itstatus = CheckITStatus(CANx->RF0R, CAN_RF0R_FOVR0);  
2000172c:	687b      	ldr	r3, [r7, #4]
2000172e:	68db      	ldr	r3, [r3, #12]
20001730:	220f      	movs	r2, #15
20001732:	18bc      	adds	r4, r7, r2
20001734:	2110      	movs	r1, #16
20001736:	0018      	movs	r0, r3
20001738:	f000 f8fa 	bl	20001930 <CheckITStatus>
2000173c:	0003      	movs	r3, r0
2000173e:	7023      	strb	r3, [r4, #0]
        break;
20001740:	e077      	b.n	20001832 <CAN_GetITStatus+0x1de>
      case CAN_IT_FMP1:
        /* Check CAN_RF1R_FMP1 bit */
        itstatus = CheckITStatus(CANx->RF1R, CAN_RF1R_FMP1);  
20001742:	687b      	ldr	r3, [r7, #4]
20001744:	691b      	ldr	r3, [r3, #16]
20001746:	220f      	movs	r2, #15
20001748:	18bc      	adds	r4, r7, r2
2000174a:	2103      	movs	r1, #3
2000174c:	0018      	movs	r0, r3
2000174e:	f000 f8ef 	bl	20001930 <CheckITStatus>
20001752:	0003      	movs	r3, r0
20001754:	7023      	strb	r3, [r4, #0]
        break;
20001756:	e06c      	b.n	20001832 <CAN_GetITStatus+0x1de>
      case CAN_IT_FF1:
        /* Check CAN_RF1R_FULL1 bit */
        itstatus = CheckITStatus(CANx->RF1R, CAN_RF1R_FULL1);  
20001758:	687b      	ldr	r3, [r7, #4]
2000175a:	691b      	ldr	r3, [r3, #16]
2000175c:	220f      	movs	r2, #15
2000175e:	18bc      	adds	r4, r7, r2
20001760:	2108      	movs	r1, #8
20001762:	0018      	movs	r0, r3
20001764:	f000 f8e4 	bl	20001930 <CheckITStatus>
20001768:	0003      	movs	r3, r0
2000176a:	7023      	strb	r3, [r4, #0]
        break;
2000176c:	e061      	b.n	20001832 <CAN_GetITStatus+0x1de>
      case CAN_IT_FOV1:
        /* Check CAN_RF1R_FOVR1 bit */
        itstatus = CheckITStatus(CANx->RF1R, CAN_RF1R_FOVR1);  
2000176e:	687b      	ldr	r3, [r7, #4]
20001770:	691b      	ldr	r3, [r3, #16]
20001772:	220f      	movs	r2, #15
20001774:	18bc      	adds	r4, r7, r2
20001776:	2110      	movs	r1, #16
20001778:	0018      	movs	r0, r3
2000177a:	f000 f8d9 	bl	20001930 <CheckITStatus>
2000177e:	0003      	movs	r3, r0
20001780:	7023      	strb	r3, [r4, #0]
        break;
20001782:	e056      	b.n	20001832 <CAN_GetITStatus+0x1de>
      case CAN_IT_WKU:
        /* Check CAN_MSR_WKUI bit */
        itstatus = CheckITStatus(CANx->MSR, CAN_MSR_WKUI);  
20001784:	687b      	ldr	r3, [r7, #4]
20001786:	685b      	ldr	r3, [r3, #4]
20001788:	220f      	movs	r2, #15
2000178a:	18bc      	adds	r4, r7, r2
2000178c:	2108      	movs	r1, #8
2000178e:	0018      	movs	r0, r3
20001790:	f000 f8ce 	bl	20001930 <CheckITStatus>
20001794:	0003      	movs	r3, r0
20001796:	7023      	strb	r3, [r4, #0]
        break;
20001798:	e04b      	b.n	20001832 <CAN_GetITStatus+0x1de>
      case CAN_IT_SLK:
        /* Check CAN_MSR_SLAKI bit */
        itstatus = CheckITStatus(CANx->MSR, CAN_MSR_SLAKI);  
2000179a:	687b      	ldr	r3, [r7, #4]
2000179c:	685b      	ldr	r3, [r3, #4]
2000179e:	220f      	movs	r2, #15
200017a0:	18bc      	adds	r4, r7, r2
200017a2:	2110      	movs	r1, #16
200017a4:	0018      	movs	r0, r3
200017a6:	f000 f8c3 	bl	20001930 <CheckITStatus>
200017aa:	0003      	movs	r3, r0
200017ac:	7023      	strb	r3, [r4, #0]
        break;
200017ae:	e040      	b.n	20001832 <CAN_GetITStatus+0x1de>
      case CAN_IT_EWG:
        /* Check CAN_ESR_EWGF bit */
        itstatus = CheckITStatus(CANx->ESR, CAN_ESR_EWGF);  
200017b0:	687b      	ldr	r3, [r7, #4]
200017b2:	699b      	ldr	r3, [r3, #24]
200017b4:	220f      	movs	r2, #15
200017b6:	18bc      	adds	r4, r7, r2
200017b8:	2101      	movs	r1, #1
200017ba:	0018      	movs	r0, r3
200017bc:	f000 f8b8 	bl	20001930 <CheckITStatus>
200017c0:	0003      	movs	r3, r0
200017c2:	7023      	strb	r3, [r4, #0]
        break;
200017c4:	e035      	b.n	20001832 <CAN_GetITStatus+0x1de>
      case CAN_IT_EPV:
        /* Check CAN_ESR_EPVF bit */
        itstatus = CheckITStatus(CANx->ESR, CAN_ESR_EPVF);  
200017c6:	687b      	ldr	r3, [r7, #4]
200017c8:	699b      	ldr	r3, [r3, #24]
200017ca:	220f      	movs	r2, #15
200017cc:	18bc      	adds	r4, r7, r2
200017ce:	2102      	movs	r1, #2
200017d0:	0018      	movs	r0, r3
200017d2:	f000 f8ad 	bl	20001930 <CheckITStatus>
200017d6:	0003      	movs	r3, r0
200017d8:	7023      	strb	r3, [r4, #0]
        break;
200017da:	e02a      	b.n	20001832 <CAN_GetITStatus+0x1de>
      case CAN_IT_BOF:
        /* Check CAN_ESR_BOFF bit */
        itstatus = CheckITStatus(CANx->ESR, CAN_ESR_BOFF);  
200017dc:	687b      	ldr	r3, [r7, #4]
200017de:	699b      	ldr	r3, [r3, #24]
200017e0:	220f      	movs	r2, #15
200017e2:	18bc      	adds	r4, r7, r2
200017e4:	2104      	movs	r1, #4
200017e6:	0018      	movs	r0, r3
200017e8:	f000 f8a2 	bl	20001930 <CheckITStatus>
200017ec:	0003      	movs	r3, r0
200017ee:	7023      	strb	r3, [r4, #0]
        break;
200017f0:	e01f      	b.n	20001832 <CAN_GetITStatus+0x1de>
      case CAN_IT_LEC:
        /* Check CAN_ESR_LEC bit */
        itstatus = CheckITStatus(CANx->ESR, CAN_ESR_LEC);  
200017f2:	687b      	ldr	r3, [r7, #4]
200017f4:	699b      	ldr	r3, [r3, #24]
200017f6:	220f      	movs	r2, #15
200017f8:	18bc      	adds	r4, r7, r2
200017fa:	2170      	movs	r1, #112	; 0x70
200017fc:	0018      	movs	r0, r3
200017fe:	f000 f897 	bl	20001930 <CheckITStatus>
20001802:	0003      	movs	r3, r0
20001804:	7023      	strb	r3, [r4, #0]
        break;
20001806:	e014      	b.n	20001832 <CAN_GetITStatus+0x1de>
      case CAN_IT_ERR:
        /* Check CAN_MSR_ERRI bit */ 
        itstatus = CheckITStatus(CANx->MSR, CAN_MSR_ERRI); 
20001808:	687b      	ldr	r3, [r7, #4]
2000180a:	685b      	ldr	r3, [r3, #4]
2000180c:	220f      	movs	r2, #15
2000180e:	18bc      	adds	r4, r7, r2
20001810:	2104      	movs	r1, #4
20001812:	0018      	movs	r0, r3
20001814:	f000 f88c 	bl	20001930 <CheckITStatus>
20001818:	0003      	movs	r3, r0
2000181a:	7023      	strb	r3, [r4, #0]
        break;
2000181c:	e009      	b.n	20001832 <CAN_GetITStatus+0x1de>
      default:
        /* in case of error, return RESET */
        itstatus = RESET;
2000181e:	230f      	movs	r3, #15
20001820:	18fb      	adds	r3, r7, r3
20001822:	2200      	movs	r2, #0
20001824:	701a      	strb	r2, [r3, #0]
        break;
20001826:	46c0      	nop			; (mov r8, r8)
20001828:	e003      	b.n	20001832 <CAN_GetITStatus+0x1de>
    }
  }
  else
  {
   /* in case the Interrupt is not enabled, return RESET */
    itstatus  = RESET;
2000182a:	230f      	movs	r3, #15
2000182c:	18fb      	adds	r3, r7, r3
2000182e:	2200      	movs	r2, #0
20001830:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return the CAN_IT status */
  return  itstatus;
20001832:	230f      	movs	r3, #15
20001834:	18fb      	adds	r3, r7, r3
20001836:	781b      	ldrb	r3, [r3, #0]
}
20001838:	0018      	movs	r0, r3
2000183a:	46bd      	mov	sp, r7
2000183c:	b005      	add	sp, #20
2000183e:	bd90      	pop	{r4, r7, pc}
20001840:	00010101 	andeq	r0, r1, r1, lsl #2

20001844 <CAN_ClearITPendingBit>:
  *            @arg CAN_IT_ERR: Error Interrupt
  * @note   CAN3 peripheral is available only for STM32F413_423xx devices
  * @retval None
  */
void CAN_ClearITPendingBit(CAN_TypeDef* CANx, uint32_t CAN_IT)
{
20001844:	b580      	push	{r7, lr}
20001846:	b082      	sub	sp, #8
20001848:	af00      	add	r7, sp, #0
2000184a:	6078      	str	r0, [r7, #4]
2000184c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_CLEAR_IT(CAN_IT));

  switch (CAN_IT)
2000184e:	683b      	ldr	r3, [r7, #0]
20001850:	2280      	movs	r2, #128	; 0x80
20001852:	0052      	lsls	r2, r2, #1
20001854:	4293      	cmp	r3, r2
20001856:	d04a      	beq.n	200018ee <CAN_ClearITPendingBit+0xaa>
20001858:	2280      	movs	r2, #128	; 0x80
2000185a:	0052      	lsls	r2, r2, #1
2000185c:	4293      	cmp	r3, r2
2000185e:	d80c      	bhi.n	2000187a <CAN_ClearITPendingBit+0x36>
20001860:	2b08      	cmp	r3, #8
20001862:	d030      	beq.n	200018c6 <CAN_ClearITPendingBit+0x82>
20001864:	d804      	bhi.n	20001870 <CAN_ClearITPendingBit+0x2c>
20001866:	2b01      	cmp	r3, #1
20001868:	d025      	beq.n	200018b6 <CAN_ClearITPendingBit+0x72>
2000186a:	2b04      	cmp	r3, #4
2000186c:	d027      	beq.n	200018be <CAN_ClearITPendingBit+0x7a>
      /* Clear CAN_MSR_ERRI (rc_w1) */
      CANx->MSR = CAN_MSR_ERRI; 
       /* @note BOFF, EPVF and EWGF Flags are cleared by hardware depending on the CAN Bus status*/
       break;
    default:
       break;
2000186e:	e058      	b.n	20001922 <CAN_ClearITPendingBit+0xde>
  switch (CAN_IT)
20001870:	2b20      	cmp	r3, #32
20001872:	d02c      	beq.n	200018ce <CAN_ClearITPendingBit+0x8a>
20001874:	2b40      	cmp	r3, #64	; 0x40
20001876:	d02e      	beq.n	200018d6 <CAN_ClearITPendingBit+0x92>
       break;
20001878:	e053      	b.n	20001922 <CAN_ClearITPendingBit+0xde>
  switch (CAN_IT)
2000187a:	2280      	movs	r2, #128	; 0x80
2000187c:	0112      	lsls	r2, r2, #4
2000187e:	4293      	cmp	r3, r2
20001880:	d041      	beq.n	20001906 <CAN_ClearITPendingBit+0xc2>
20001882:	2280      	movs	r2, #128	; 0x80
20001884:	0112      	lsls	r2, r2, #4
20001886:	4293      	cmp	r3, r2
20001888:	d808      	bhi.n	2000189c <CAN_ClearITPendingBit+0x58>
2000188a:	2280      	movs	r2, #128	; 0x80
2000188c:	0092      	lsls	r2, r2, #2
2000188e:	4293      	cmp	r3, r2
20001890:	d031      	beq.n	200018f6 <CAN_ClearITPendingBit+0xb2>
20001892:	2280      	movs	r2, #128	; 0x80
20001894:	00d2      	lsls	r2, r2, #3
20001896:	4293      	cmp	r3, r2
20001898:	d031      	beq.n	200018fe <CAN_ClearITPendingBit+0xba>
       break;
2000189a:	e042      	b.n	20001922 <CAN_ClearITPendingBit+0xde>
  switch (CAN_IT)
2000189c:	2280      	movs	r2, #128	; 0x80
2000189e:	0252      	lsls	r2, r2, #9
200018a0:	4293      	cmp	r3, r2
200018a2:	d01c      	beq.n	200018de <CAN_ClearITPendingBit+0x9a>
200018a4:	2280      	movs	r2, #128	; 0x80
200018a6:	0292      	lsls	r2, r2, #10
200018a8:	4293      	cmp	r3, r2
200018aa:	d01c      	beq.n	200018e6 <CAN_ClearITPendingBit+0xa2>
200018ac:	2280      	movs	r2, #128	; 0x80
200018ae:	0212      	lsls	r2, r2, #8
200018b0:	4293      	cmp	r3, r2
200018b2:	d02f      	beq.n	20001914 <CAN_ClearITPendingBit+0xd0>
       break;
200018b4:	e035      	b.n	20001922 <CAN_ClearITPendingBit+0xde>
      CANx->TSR = CAN_TSR_RQCP0|CAN_TSR_RQCP1|CAN_TSR_RQCP2;  
200018b6:	687b      	ldr	r3, [r7, #4]
200018b8:	4a1c      	ldr	r2, [pc, #112]	; (2000192c <CAN_ClearITPendingBit+0xe8>)
200018ba:	609a      	str	r2, [r3, #8]
      break;
200018bc:	e031      	b.n	20001922 <CAN_ClearITPendingBit+0xde>
      CANx->RF0R = CAN_RF0R_FULL0; 
200018be:	687b      	ldr	r3, [r7, #4]
200018c0:	2208      	movs	r2, #8
200018c2:	60da      	str	r2, [r3, #12]
      break;
200018c4:	e02d      	b.n	20001922 <CAN_ClearITPendingBit+0xde>
      CANx->RF0R = CAN_RF0R_FOVR0; 
200018c6:	687b      	ldr	r3, [r7, #4]
200018c8:	2210      	movs	r2, #16
200018ca:	60da      	str	r2, [r3, #12]
      break;
200018cc:	e029      	b.n	20001922 <CAN_ClearITPendingBit+0xde>
      CANx->RF1R = CAN_RF1R_FULL1;  
200018ce:	687b      	ldr	r3, [r7, #4]
200018d0:	2208      	movs	r2, #8
200018d2:	611a      	str	r2, [r3, #16]
      break;
200018d4:	e025      	b.n	20001922 <CAN_ClearITPendingBit+0xde>
      CANx->RF1R = CAN_RF1R_FOVR1; 
200018d6:	687b      	ldr	r3, [r7, #4]
200018d8:	2210      	movs	r2, #16
200018da:	611a      	str	r2, [r3, #16]
      break;
200018dc:	e021      	b.n	20001922 <CAN_ClearITPendingBit+0xde>
      CANx->MSR = CAN_MSR_WKUI;  
200018de:	687b      	ldr	r3, [r7, #4]
200018e0:	2208      	movs	r2, #8
200018e2:	605a      	str	r2, [r3, #4]
      break;
200018e4:	e01d      	b.n	20001922 <CAN_ClearITPendingBit+0xde>
      CANx->MSR = CAN_MSR_SLAKI;   
200018e6:	687b      	ldr	r3, [r7, #4]
200018e8:	2210      	movs	r2, #16
200018ea:	605a      	str	r2, [r3, #4]
      break;
200018ec:	e019      	b.n	20001922 <CAN_ClearITPendingBit+0xde>
      CANx->MSR = CAN_MSR_ERRI;
200018ee:	687b      	ldr	r3, [r7, #4]
200018f0:	2204      	movs	r2, #4
200018f2:	605a      	str	r2, [r3, #4]
      break;
200018f4:	e015      	b.n	20001922 <CAN_ClearITPendingBit+0xde>
      CANx->MSR = CAN_MSR_ERRI; 
200018f6:	687b      	ldr	r3, [r7, #4]
200018f8:	2204      	movs	r2, #4
200018fa:	605a      	str	r2, [r3, #4]
      break;
200018fc:	e011      	b.n	20001922 <CAN_ClearITPendingBit+0xde>
      CANx->MSR = CAN_MSR_ERRI; 
200018fe:	687b      	ldr	r3, [r7, #4]
20001900:	2204      	movs	r2, #4
20001902:	605a      	str	r2, [r3, #4]
       break;
20001904:	e00d      	b.n	20001922 <CAN_ClearITPendingBit+0xde>
      CANx->ESR = RESET; 
20001906:	687b      	ldr	r3, [r7, #4]
20001908:	2200      	movs	r2, #0
2000190a:	619a      	str	r2, [r3, #24]
      CANx->MSR = CAN_MSR_ERRI; 
2000190c:	687b      	ldr	r3, [r7, #4]
2000190e:	2204      	movs	r2, #4
20001910:	605a      	str	r2, [r3, #4]
      break;
20001912:	e006      	b.n	20001922 <CAN_ClearITPendingBit+0xde>
      CANx->ESR = RESET; 
20001914:	687b      	ldr	r3, [r7, #4]
20001916:	2200      	movs	r2, #0
20001918:	619a      	str	r2, [r3, #24]
      CANx->MSR = CAN_MSR_ERRI; 
2000191a:	687b      	ldr	r3, [r7, #4]
2000191c:	2204      	movs	r2, #4
2000191e:	605a      	str	r2, [r3, #4]
       break;
20001920:	46c0      	nop			; (mov r8, r8)
   }
}
20001922:	46c0      	nop			; (mov r8, r8)
20001924:	46bd      	mov	sp, r7
20001926:	b002      	add	sp, #8
20001928:	bd80      	pop	{r7, pc}
2000192a:	46c0      	nop			; (mov r8, r8)
2000192c:	00010101 	andeq	r0, r1, r1, lsl #2

20001930 <CheckITStatus>:
  * @param  CAN_Reg: specifies the CAN interrupt register to check.
  * @param  It_Bit: specifies the interrupt source bit to check.
  * @retval The new state of the CAN Interrupt (SET or RESET).
  */
static ITStatus CheckITStatus(uint32_t CAN_Reg, uint32_t It_Bit)
{
20001930:	b580      	push	{r7, lr}
20001932:	b084      	sub	sp, #16
20001934:	af00      	add	r7, sp, #0
20001936:	6078      	str	r0, [r7, #4]
20001938:	6039      	str	r1, [r7, #0]
  ITStatus pendingbitstatus = RESET;
2000193a:	230f      	movs	r3, #15
2000193c:	18fb      	adds	r3, r7, r3
2000193e:	2200      	movs	r2, #0
20001940:	701a      	strb	r2, [r3, #0]
  
  if ((CAN_Reg & It_Bit) != (uint32_t)RESET)
20001942:	687b      	ldr	r3, [r7, #4]
20001944:	683a      	ldr	r2, [r7, #0]
20001946:	4013      	ands	r3, r2
20001948:	d004      	beq.n	20001954 <CheckITStatus+0x24>
  {
    /* CAN_IT is set */
    pendingbitstatus = SET;
2000194a:	230f      	movs	r3, #15
2000194c:	18fb      	adds	r3, r7, r3
2000194e:	2201      	movs	r2, #1
20001950:	701a      	strb	r2, [r3, #0]
20001952:	e003      	b.n	2000195c <CheckITStatus+0x2c>
  }
  else
  {
    /* CAN_IT is reset */
    pendingbitstatus = RESET;
20001954:	230f      	movs	r3, #15
20001956:	18fb      	adds	r3, r7, r3
20001958:	2200      	movs	r2, #0
2000195a:	701a      	strb	r2, [r3, #0]
  }
  return pendingbitstatus;
2000195c:	230f      	movs	r3, #15
2000195e:	18fb      	adds	r3, r7, r3
20001960:	781b      	ldrb	r3, [r3, #0]
}
20001962:	0018      	movs	r0, r3
20001964:	46bd      	mov	sp, r7
20001966:	b004      	add	sp, #16
20001968:	bd80      	pop	{r7, pc}
2000196a:	46c0      	nop			; (mov r8, r8)

2000196c <GPIO_DeInit>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F42xxx/43xxx devices.
  *                      x can be (A, B, C, D and H) to select the GPIO peripheral for STM32F401xx devices.  
  * @retval None
  */
void GPIO_DeInit(GPIO_TypeDef* GPIOx)
{
2000196c:	b580      	push	{r7, lr}
2000196e:	b082      	sub	sp, #8
20001970:	af00      	add	r7, sp, #0
20001972:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  if (GPIOx == GPIOA)
20001974:	687b      	ldr	r3, [r7, #4]
20001976:	4a4e      	ldr	r2, [pc, #312]	; (20001ab0 <GPIO_DeInit+0x144>)
20001978:	4293      	cmp	r3, r2
2000197a:	d108      	bne.n	2000198e <GPIO_DeInit+0x22>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, ENABLE);
2000197c:	2101      	movs	r1, #1
2000197e:	2001      	movs	r0, #1
20001980:	f001 fac6 	bl	20002f10 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, DISABLE);
20001984:	2100      	movs	r1, #0
20001986:	2001      	movs	r0, #1
20001988:	f001 fac2 	bl	20002f10 <RCC_AHB1PeriphResetCmd>
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, ENABLE);
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, DISABLE);
    }
  }
}
2000198c:	e08c      	b.n	20001aa8 <GPIO_DeInit+0x13c>
  else if (GPIOx == GPIOB)
2000198e:	687b      	ldr	r3, [r7, #4]
20001990:	4a48      	ldr	r2, [pc, #288]	; (20001ab4 <GPIO_DeInit+0x148>)
20001992:	4293      	cmp	r3, r2
20001994:	d108      	bne.n	200019a8 <GPIO_DeInit+0x3c>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, ENABLE);
20001996:	2101      	movs	r1, #1
20001998:	2002      	movs	r0, #2
2000199a:	f001 fab9 	bl	20002f10 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, DISABLE);
2000199e:	2100      	movs	r1, #0
200019a0:	2002      	movs	r0, #2
200019a2:	f001 fab5 	bl	20002f10 <RCC_AHB1PeriphResetCmd>
}
200019a6:	e07f      	b.n	20001aa8 <GPIO_DeInit+0x13c>
  else if (GPIOx == GPIOC)
200019a8:	687b      	ldr	r3, [r7, #4]
200019aa:	4a43      	ldr	r2, [pc, #268]	; (20001ab8 <GPIO_DeInit+0x14c>)
200019ac:	4293      	cmp	r3, r2
200019ae:	d108      	bne.n	200019c2 <GPIO_DeInit+0x56>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, ENABLE);
200019b0:	2101      	movs	r1, #1
200019b2:	2004      	movs	r0, #4
200019b4:	f001 faac 	bl	20002f10 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, DISABLE);
200019b8:	2100      	movs	r1, #0
200019ba:	2004      	movs	r0, #4
200019bc:	f001 faa8 	bl	20002f10 <RCC_AHB1PeriphResetCmd>
}
200019c0:	e072      	b.n	20001aa8 <GPIO_DeInit+0x13c>
  else if (GPIOx == GPIOD)
200019c2:	687b      	ldr	r3, [r7, #4]
200019c4:	4a3d      	ldr	r2, [pc, #244]	; (20001abc <GPIO_DeInit+0x150>)
200019c6:	4293      	cmp	r3, r2
200019c8:	d108      	bne.n	200019dc <GPIO_DeInit+0x70>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, ENABLE);
200019ca:	2101      	movs	r1, #1
200019cc:	2008      	movs	r0, #8
200019ce:	f001 fa9f 	bl	20002f10 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, DISABLE);
200019d2:	2100      	movs	r1, #0
200019d4:	2008      	movs	r0, #8
200019d6:	f001 fa9b 	bl	20002f10 <RCC_AHB1PeriphResetCmd>
}
200019da:	e065      	b.n	20001aa8 <GPIO_DeInit+0x13c>
  else if (GPIOx == GPIOE)
200019dc:	687b      	ldr	r3, [r7, #4]
200019de:	4a38      	ldr	r2, [pc, #224]	; (20001ac0 <GPIO_DeInit+0x154>)
200019e0:	4293      	cmp	r3, r2
200019e2:	d108      	bne.n	200019f6 <GPIO_DeInit+0x8a>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, ENABLE);
200019e4:	2101      	movs	r1, #1
200019e6:	2010      	movs	r0, #16
200019e8:	f001 fa92 	bl	20002f10 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, DISABLE);
200019ec:	2100      	movs	r1, #0
200019ee:	2010      	movs	r0, #16
200019f0:	f001 fa8e 	bl	20002f10 <RCC_AHB1PeriphResetCmd>
}
200019f4:	e058      	b.n	20001aa8 <GPIO_DeInit+0x13c>
  else if (GPIOx == GPIOF)
200019f6:	687b      	ldr	r3, [r7, #4]
200019f8:	4a32      	ldr	r2, [pc, #200]	; (20001ac4 <GPIO_DeInit+0x158>)
200019fa:	4293      	cmp	r3, r2
200019fc:	d108      	bne.n	20001a10 <GPIO_DeInit+0xa4>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, ENABLE);
200019fe:	2101      	movs	r1, #1
20001a00:	2020      	movs	r0, #32
20001a02:	f001 fa85 	bl	20002f10 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, DISABLE);
20001a06:	2100      	movs	r1, #0
20001a08:	2020      	movs	r0, #32
20001a0a:	f001 fa81 	bl	20002f10 <RCC_AHB1PeriphResetCmd>
}
20001a0e:	e04b      	b.n	20001aa8 <GPIO_DeInit+0x13c>
  else if (GPIOx == GPIOG)
20001a10:	687b      	ldr	r3, [r7, #4]
20001a12:	4a2d      	ldr	r2, [pc, #180]	; (20001ac8 <GPIO_DeInit+0x15c>)
20001a14:	4293      	cmp	r3, r2
20001a16:	d108      	bne.n	20001a2a <GPIO_DeInit+0xbe>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, ENABLE);
20001a18:	2101      	movs	r1, #1
20001a1a:	2040      	movs	r0, #64	; 0x40
20001a1c:	f001 fa78 	bl	20002f10 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, DISABLE);
20001a20:	2100      	movs	r1, #0
20001a22:	2040      	movs	r0, #64	; 0x40
20001a24:	f001 fa74 	bl	20002f10 <RCC_AHB1PeriphResetCmd>
}
20001a28:	e03e      	b.n	20001aa8 <GPIO_DeInit+0x13c>
  else if (GPIOx == GPIOH)
20001a2a:	687b      	ldr	r3, [r7, #4]
20001a2c:	4a27      	ldr	r2, [pc, #156]	; (20001acc <GPIO_DeInit+0x160>)
20001a2e:	4293      	cmp	r3, r2
20001a30:	d108      	bne.n	20001a44 <GPIO_DeInit+0xd8>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOH, ENABLE);
20001a32:	2101      	movs	r1, #1
20001a34:	2080      	movs	r0, #128	; 0x80
20001a36:	f001 fa6b 	bl	20002f10 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOH, DISABLE);
20001a3a:	2100      	movs	r1, #0
20001a3c:	2080      	movs	r0, #128	; 0x80
20001a3e:	f001 fa67 	bl	20002f10 <RCC_AHB1PeriphResetCmd>
}
20001a42:	e031      	b.n	20001aa8 <GPIO_DeInit+0x13c>
  else if (GPIOx == GPIOI)
20001a44:	687b      	ldr	r3, [r7, #4]
20001a46:	4a22      	ldr	r2, [pc, #136]	; (20001ad0 <GPIO_DeInit+0x164>)
20001a48:	4293      	cmp	r3, r2
20001a4a:	d10c      	bne.n	20001a66 <GPIO_DeInit+0xfa>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, ENABLE);
20001a4c:	2380      	movs	r3, #128	; 0x80
20001a4e:	005b      	lsls	r3, r3, #1
20001a50:	2101      	movs	r1, #1
20001a52:	0018      	movs	r0, r3
20001a54:	f001 fa5c 	bl	20002f10 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, DISABLE);
20001a58:	2380      	movs	r3, #128	; 0x80
20001a5a:	005b      	lsls	r3, r3, #1
20001a5c:	2100      	movs	r1, #0
20001a5e:	0018      	movs	r0, r3
20001a60:	f001 fa56 	bl	20002f10 <RCC_AHB1PeriphResetCmd>
}
20001a64:	e020      	b.n	20001aa8 <GPIO_DeInit+0x13c>
  else if (GPIOx == GPIOJ)
20001a66:	687b      	ldr	r3, [r7, #4]
20001a68:	4a1a      	ldr	r2, [pc, #104]	; (20001ad4 <GPIO_DeInit+0x168>)
20001a6a:	4293      	cmp	r3, r2
20001a6c:	d10c      	bne.n	20001a88 <GPIO_DeInit+0x11c>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOJ, ENABLE);
20001a6e:	2380      	movs	r3, #128	; 0x80
20001a70:	009b      	lsls	r3, r3, #2
20001a72:	2101      	movs	r1, #1
20001a74:	0018      	movs	r0, r3
20001a76:	f001 fa4b 	bl	20002f10 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOJ, DISABLE);
20001a7a:	2380      	movs	r3, #128	; 0x80
20001a7c:	009b      	lsls	r3, r3, #2
20001a7e:	2100      	movs	r1, #0
20001a80:	0018      	movs	r0, r3
20001a82:	f001 fa45 	bl	20002f10 <RCC_AHB1PeriphResetCmd>
}
20001a86:	e00f      	b.n	20001aa8 <GPIO_DeInit+0x13c>
    if (GPIOx == GPIOK)
20001a88:	687b      	ldr	r3, [r7, #4]
20001a8a:	4a13      	ldr	r2, [pc, #76]	; (20001ad8 <GPIO_DeInit+0x16c>)
20001a8c:	4293      	cmp	r3, r2
20001a8e:	d10b      	bne.n	20001aa8 <GPIO_DeInit+0x13c>
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, ENABLE);
20001a90:	2380      	movs	r3, #128	; 0x80
20001a92:	00db      	lsls	r3, r3, #3
20001a94:	2101      	movs	r1, #1
20001a96:	0018      	movs	r0, r3
20001a98:	f001 fa3a 	bl	20002f10 <RCC_AHB1PeriphResetCmd>
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, DISABLE);
20001a9c:	2380      	movs	r3, #128	; 0x80
20001a9e:	00db      	lsls	r3, r3, #3
20001aa0:	2100      	movs	r1, #0
20001aa2:	0018      	movs	r0, r3
20001aa4:	f001 fa34 	bl	20002f10 <RCC_AHB1PeriphResetCmd>
}
20001aa8:	46c0      	nop			; (mov r8, r8)
20001aaa:	46bd      	mov	sp, r7
20001aac:	b002      	add	sp, #8
20001aae:	bd80      	pop	{r7, pc}
20001ab0:	40020000 	andmi	r0, r2, r0
20001ab4:	40020400 	andmi	r0, r2, r0, lsl #8
20001ab8:	40020800 	andmi	r0, r2, r0, lsl #16
20001abc:	40020c00 	andmi	r0, r2, r0, lsl #24
20001ac0:	40021000 	andmi	r1, r2, r0
20001ac4:	40021400 	andmi	r1, r2, r0, lsl #8
20001ac8:	40021800 	andmi	r1, r2, r0, lsl #16
20001acc:	40021c00 	andmi	r1, r2, r0, lsl #24
20001ad0:	40022000 	andmi	r2, r2, r0
20001ad4:	40022400 	andmi	r2, r2, r0, lsl #8
20001ad8:	40022800 	andmi	r2, r2, r0, lsl #16

20001adc <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
20001adc:	b580      	push	{r7, lr}
20001ade:	b086      	sub	sp, #24
20001ae0:	af00      	add	r7, sp, #0
20001ae2:	6078      	str	r0, [r7, #4]
20001ae4:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
20001ae6:	2300      	movs	r3, #0
20001ae8:	617b      	str	r3, [r7, #20]
20001aea:	2300      	movs	r3, #0
20001aec:	613b      	str	r3, [r7, #16]
20001aee:	2300      	movs	r3, #0
20001af0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
20001af2:	2300      	movs	r3, #0
20001af4:	617b      	str	r3, [r7, #20]
20001af6:	e076      	b.n	20001be6 <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
20001af8:	2201      	movs	r2, #1
20001afa:	697b      	ldr	r3, [r7, #20]
20001afc:	409a      	lsls	r2, r3
20001afe:	0013      	movs	r3, r2
20001b00:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
20001b02:	683b      	ldr	r3, [r7, #0]
20001b04:	681a      	ldr	r2, [r3, #0]
20001b06:	693b      	ldr	r3, [r7, #16]
20001b08:	4013      	ands	r3, r2
20001b0a:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
20001b0c:	68fa      	ldr	r2, [r7, #12]
20001b0e:	693b      	ldr	r3, [r7, #16]
20001b10:	429a      	cmp	r2, r3
20001b12:	d165      	bne.n	20001be0 <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
20001b14:	687b      	ldr	r3, [r7, #4]
20001b16:	681b      	ldr	r3, [r3, #0]
20001b18:	697a      	ldr	r2, [r7, #20]
20001b1a:	0052      	lsls	r2, r2, #1
20001b1c:	2103      	movs	r1, #3
20001b1e:	4091      	lsls	r1, r2
20001b20:	000a      	movs	r2, r1
20001b22:	43d2      	mvns	r2, r2
20001b24:	401a      	ands	r2, r3
20001b26:	687b      	ldr	r3, [r7, #4]
20001b28:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
20001b2a:	687b      	ldr	r3, [r7, #4]
20001b2c:	681a      	ldr	r2, [r3, #0]
20001b2e:	683b      	ldr	r3, [r7, #0]
20001b30:	791b      	ldrb	r3, [r3, #4]
20001b32:	0019      	movs	r1, r3
20001b34:	697b      	ldr	r3, [r7, #20]
20001b36:	005b      	lsls	r3, r3, #1
20001b38:	4099      	lsls	r1, r3
20001b3a:	000b      	movs	r3, r1
20001b3c:	431a      	orrs	r2, r3
20001b3e:	687b      	ldr	r3, [r7, #4]
20001b40:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
20001b42:	683b      	ldr	r3, [r7, #0]
20001b44:	791b      	ldrb	r3, [r3, #4]
20001b46:	2b01      	cmp	r3, #1
20001b48:	d003      	beq.n	20001b52 <GPIO_Init+0x76>
20001b4a:	683b      	ldr	r3, [r7, #0]
20001b4c:	791b      	ldrb	r3, [r3, #4]
20001b4e:	2b02      	cmp	r3, #2
20001b50:	d12e      	bne.n	20001bb0 <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
20001b52:	687b      	ldr	r3, [r7, #4]
20001b54:	689b      	ldr	r3, [r3, #8]
20001b56:	697a      	ldr	r2, [r7, #20]
20001b58:	0052      	lsls	r2, r2, #1
20001b5a:	2103      	movs	r1, #3
20001b5c:	4091      	lsls	r1, r2
20001b5e:	000a      	movs	r2, r1
20001b60:	43d2      	mvns	r2, r2
20001b62:	401a      	ands	r2, r3
20001b64:	687b      	ldr	r3, [r7, #4]
20001b66:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
20001b68:	687b      	ldr	r3, [r7, #4]
20001b6a:	689a      	ldr	r2, [r3, #8]
20001b6c:	683b      	ldr	r3, [r7, #0]
20001b6e:	795b      	ldrb	r3, [r3, #5]
20001b70:	0019      	movs	r1, r3
20001b72:	697b      	ldr	r3, [r7, #20]
20001b74:	005b      	lsls	r3, r3, #1
20001b76:	4099      	lsls	r1, r3
20001b78:	000b      	movs	r3, r1
20001b7a:	431a      	orrs	r2, r3
20001b7c:	687b      	ldr	r3, [r7, #4]
20001b7e:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
20001b80:	687b      	ldr	r3, [r7, #4]
20001b82:	685b      	ldr	r3, [r3, #4]
20001b84:	697a      	ldr	r2, [r7, #20]
20001b86:	b292      	uxth	r2, r2
20001b88:	0011      	movs	r1, r2
20001b8a:	2201      	movs	r2, #1
20001b8c:	408a      	lsls	r2, r1
20001b8e:	43d2      	mvns	r2, r2
20001b90:	401a      	ands	r2, r3
20001b92:	687b      	ldr	r3, [r7, #4]
20001b94:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
20001b96:	687b      	ldr	r3, [r7, #4]
20001b98:	685b      	ldr	r3, [r3, #4]
20001b9a:	683a      	ldr	r2, [r7, #0]
20001b9c:	7992      	ldrb	r2, [r2, #6]
20001b9e:	0011      	movs	r1, r2
20001ba0:	697a      	ldr	r2, [r7, #20]
20001ba2:	b292      	uxth	r2, r2
20001ba4:	4091      	lsls	r1, r2
20001ba6:	000a      	movs	r2, r1
20001ba8:	b292      	uxth	r2, r2
20001baa:	431a      	orrs	r2, r3
20001bac:	687b      	ldr	r3, [r7, #4]
20001bae:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
20001bb0:	687b      	ldr	r3, [r7, #4]
20001bb2:	68db      	ldr	r3, [r3, #12]
20001bb4:	697a      	ldr	r2, [r7, #20]
20001bb6:	b292      	uxth	r2, r2
20001bb8:	0052      	lsls	r2, r2, #1
20001bba:	2103      	movs	r1, #3
20001bbc:	4091      	lsls	r1, r2
20001bbe:	000a      	movs	r2, r1
20001bc0:	43d2      	mvns	r2, r2
20001bc2:	401a      	ands	r2, r3
20001bc4:	687b      	ldr	r3, [r7, #4]
20001bc6:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
20001bc8:	687b      	ldr	r3, [r7, #4]
20001bca:	68da      	ldr	r2, [r3, #12]
20001bcc:	683b      	ldr	r3, [r7, #0]
20001bce:	79db      	ldrb	r3, [r3, #7]
20001bd0:	0019      	movs	r1, r3
20001bd2:	697b      	ldr	r3, [r7, #20]
20001bd4:	005b      	lsls	r3, r3, #1
20001bd6:	4099      	lsls	r1, r3
20001bd8:	000b      	movs	r3, r1
20001bda:	431a      	orrs	r2, r3
20001bdc:	687b      	ldr	r3, [r7, #4]
20001bde:	60da      	str	r2, [r3, #12]
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
20001be0:	697b      	ldr	r3, [r7, #20]
20001be2:	3301      	adds	r3, #1
20001be4:	617b      	str	r3, [r7, #20]
20001be6:	697b      	ldr	r3, [r7, #20]
20001be8:	2b0f      	cmp	r3, #15
20001bea:	d985      	bls.n	20001af8 <GPIO_Init+0x1c>
    }
  }
}
20001bec:	46c0      	nop			; (mov r8, r8)
20001bee:	46bd      	mov	sp, r7
20001bf0:	b006      	add	sp, #24
20001bf2:	bd80      	pop	{r7, pc}

20001bf4 <GPIO_StructInit>:
  * @brief  Fills each GPIO_InitStruct member with its default value.
  * @param  GPIO_InitStruct : pointer to a GPIO_InitTypeDef structure which will be initialized.
  * @retval None
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
20001bf4:	b580      	push	{r7, lr}
20001bf6:	b082      	sub	sp, #8
20001bf8:	af00      	add	r7, sp, #0
20001bfa:	6078      	str	r0, [r7, #4]
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
20001bfc:	687b      	ldr	r3, [r7, #4]
20001bfe:	4a09      	ldr	r2, [pc, #36]	; (20001c24 <GPIO_StructInit+0x30>)
20001c00:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN;
20001c02:	687b      	ldr	r3, [r7, #4]
20001c04:	2200      	movs	r2, #0
20001c06:	711a      	strb	r2, [r3, #4]
  GPIO_InitStruct->GPIO_Speed = GPIO_Speed_2MHz;
20001c08:	687b      	ldr	r3, [r7, #4]
20001c0a:	2200      	movs	r2, #0
20001c0c:	715a      	strb	r2, [r3, #5]
  GPIO_InitStruct->GPIO_OType = GPIO_OType_PP;
20001c0e:	687b      	ldr	r3, [r7, #4]
20001c10:	2200      	movs	r2, #0
20001c12:	719a      	strb	r2, [r3, #6]
  GPIO_InitStruct->GPIO_PuPd = GPIO_PuPd_NOPULL;
20001c14:	687b      	ldr	r3, [r7, #4]
20001c16:	2200      	movs	r2, #0
20001c18:	71da      	strb	r2, [r3, #7]
}
20001c1a:	46c0      	nop			; (mov r8, r8)
20001c1c:	46bd      	mov	sp, r7
20001c1e:	b002      	add	sp, #8
20001c20:	bd80      	pop	{r7, pc}
20001c22:	46c0      	nop			; (mov r8, r8)
20001c24:	0000ffff 	strdeq	pc, [r0], -pc	; <UNPREDICTABLE>

20001c28 <GPIO_PinLockConfig>:
  * @param  GPIO_Pin: specifies the port bit to be locked.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_PinLockConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
20001c28:	b580      	push	{r7, lr}
20001c2a:	b084      	sub	sp, #16
20001c2c:	af00      	add	r7, sp, #0
20001c2e:	6078      	str	r0, [r7, #4]
20001c30:	000a      	movs	r2, r1
20001c32:	1cbb      	adds	r3, r7, #2
20001c34:	801a      	strh	r2, [r3, #0]
  __IO uint32_t tmp = 0x00010000;
20001c36:	2380      	movs	r3, #128	; 0x80
20001c38:	025b      	lsls	r3, r3, #9
20001c3a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  tmp |= GPIO_Pin;
20001c3c:	1cbb      	adds	r3, r7, #2
20001c3e:	881a      	ldrh	r2, [r3, #0]
20001c40:	68fb      	ldr	r3, [r7, #12]
20001c42:	4313      	orrs	r3, r2
20001c44:	60fb      	str	r3, [r7, #12]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
20001c46:	68fa      	ldr	r2, [r7, #12]
20001c48:	687b      	ldr	r3, [r7, #4]
20001c4a:	61da      	str	r2, [r3, #28]
  /* Reset LCKK bit */
  GPIOx->LCKR =  GPIO_Pin;
20001c4c:	1cbb      	adds	r3, r7, #2
20001c4e:	881a      	ldrh	r2, [r3, #0]
20001c50:	687b      	ldr	r3, [r7, #4]
20001c52:	61da      	str	r2, [r3, #28]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
20001c54:	68fa      	ldr	r2, [r7, #12]
20001c56:	687b      	ldr	r3, [r7, #4]
20001c58:	61da      	str	r2, [r3, #28]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
20001c5a:	687b      	ldr	r3, [r7, #4]
20001c5c:	69db      	ldr	r3, [r3, #28]
20001c5e:	60fb      	str	r3, [r7, #12]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
20001c60:	687b      	ldr	r3, [r7, #4]
20001c62:	69db      	ldr	r3, [r3, #28]
20001c64:	60fb      	str	r3, [r7, #12]
}
20001c66:	46c0      	nop			; (mov r8, r8)
20001c68:	46bd      	mov	sp, r7
20001c6a:	b004      	add	sp, #16
20001c6c:	bd80      	pop	{r7, pc}

20001c6e <GPIO_ReadInputDataBit>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
uint8_t GPIO_ReadInputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
20001c6e:	b580      	push	{r7, lr}
20001c70:	b084      	sub	sp, #16
20001c72:	af00      	add	r7, sp, #0
20001c74:	6078      	str	r0, [r7, #4]
20001c76:	000a      	movs	r2, r1
20001c78:	1cbb      	adds	r3, r7, #2
20001c7a:	801a      	strh	r2, [r3, #0]
  uint8_t bitstatus = 0x00;
20001c7c:	230f      	movs	r3, #15
20001c7e:	18fb      	adds	r3, r7, r3
20001c80:	2200      	movs	r2, #0
20001c82:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
20001c84:	687b      	ldr	r3, [r7, #4]
20001c86:	691b      	ldr	r3, [r3, #16]
20001c88:	1cba      	adds	r2, r7, #2
20001c8a:	8812      	ldrh	r2, [r2, #0]
20001c8c:	4013      	ands	r3, r2
20001c8e:	d004      	beq.n	20001c9a <GPIO_ReadInputDataBit+0x2c>
  {
    bitstatus = (uint8_t)Bit_SET;
20001c90:	230f      	movs	r3, #15
20001c92:	18fb      	adds	r3, r7, r3
20001c94:	2201      	movs	r2, #1
20001c96:	701a      	strb	r2, [r3, #0]
20001c98:	e003      	b.n	20001ca2 <GPIO_ReadInputDataBit+0x34>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
20001c9a:	230f      	movs	r3, #15
20001c9c:	18fb      	adds	r3, r7, r3
20001c9e:	2200      	movs	r2, #0
20001ca0:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
20001ca2:	230f      	movs	r3, #15
20001ca4:	18fb      	adds	r3, r7, r3
20001ca6:	781b      	ldrb	r3, [r3, #0]
}
20001ca8:	0018      	movs	r0, r3
20001caa:	46bd      	mov	sp, r7
20001cac:	b004      	add	sp, #16
20001cae:	bd80      	pop	{r7, pc}

20001cb0 <GPIO_ReadInputData>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F42xxx/43xxx devices.
  *                      x can be (A, B, C, D and H) to select the GPIO peripheral for STM32F401xx devices. 
  * @retval GPIO input data port value.
  */
uint16_t GPIO_ReadInputData(GPIO_TypeDef* GPIOx)
{
20001cb0:	b580      	push	{r7, lr}
20001cb2:	b082      	sub	sp, #8
20001cb4:	af00      	add	r7, sp, #0
20001cb6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  return ((uint16_t)GPIOx->IDR);
20001cb8:	687b      	ldr	r3, [r7, #4]
20001cba:	691b      	ldr	r3, [r3, #16]
20001cbc:	b29b      	uxth	r3, r3
}
20001cbe:	0018      	movs	r0, r3
20001cc0:	46bd      	mov	sp, r7
20001cc2:	b002      	add	sp, #8
20001cc4:	bd80      	pop	{r7, pc}

20001cc6 <GPIO_ReadOutputDataBit>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *          This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The output port pin value.
  */
uint8_t GPIO_ReadOutputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
20001cc6:	b580      	push	{r7, lr}
20001cc8:	b084      	sub	sp, #16
20001cca:	af00      	add	r7, sp, #0
20001ccc:	6078      	str	r0, [r7, #4]
20001cce:	000a      	movs	r2, r1
20001cd0:	1cbb      	adds	r3, r7, #2
20001cd2:	801a      	strh	r2, [r3, #0]
  uint8_t bitstatus = 0x00;
20001cd4:	230f      	movs	r3, #15
20001cd6:	18fb      	adds	r3, r7, r3
20001cd8:	2200      	movs	r2, #0
20001cda:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if (((GPIOx->ODR) & GPIO_Pin) != (uint32_t)Bit_RESET)
20001cdc:	687b      	ldr	r3, [r7, #4]
20001cde:	695b      	ldr	r3, [r3, #20]
20001ce0:	1cba      	adds	r2, r7, #2
20001ce2:	8812      	ldrh	r2, [r2, #0]
20001ce4:	4013      	ands	r3, r2
20001ce6:	d004      	beq.n	20001cf2 <GPIO_ReadOutputDataBit+0x2c>
  {
    bitstatus = (uint8_t)Bit_SET;
20001ce8:	230f      	movs	r3, #15
20001cea:	18fb      	adds	r3, r7, r3
20001cec:	2201      	movs	r2, #1
20001cee:	701a      	strb	r2, [r3, #0]
20001cf0:	e003      	b.n	20001cfa <GPIO_ReadOutputDataBit+0x34>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
20001cf2:	230f      	movs	r3, #15
20001cf4:	18fb      	adds	r3, r7, r3
20001cf6:	2200      	movs	r2, #0
20001cf8:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
20001cfa:	230f      	movs	r3, #15
20001cfc:	18fb      	adds	r3, r7, r3
20001cfe:	781b      	ldrb	r3, [r3, #0]
}
20001d00:	0018      	movs	r0, r3
20001d02:	46bd      	mov	sp, r7
20001d04:	b004      	add	sp, #16
20001d06:	bd80      	pop	{r7, pc}

20001d08 <GPIO_ReadOutputData>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F42xxx/43xxx devices.
  *                      x can be (A, B, C, D and H) to select the GPIO peripheral for STM32F401xx devices. 
  * @retval GPIO output data port value.
  */
uint16_t GPIO_ReadOutputData(GPIO_TypeDef* GPIOx)
{
20001d08:	b580      	push	{r7, lr}
20001d0a:	b082      	sub	sp, #8
20001d0c:	af00      	add	r7, sp, #0
20001d0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  return ((uint16_t)GPIOx->ODR);
20001d10:	687b      	ldr	r3, [r7, #4]
20001d12:	695b      	ldr	r3, [r3, #20]
20001d14:	b29b      	uxth	r3, r3
}
20001d16:	0018      	movs	r0, r3
20001d18:	46bd      	mov	sp, r7
20001d1a:	b002      	add	sp, #8
20001d1c:	bd80      	pop	{r7, pc}

20001d1e <GPIO_SetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
20001d1e:	b580      	push	{r7, lr}
20001d20:	b082      	sub	sp, #8
20001d22:	af00      	add	r7, sp, #0
20001d24:	6078      	str	r0, [r7, #4]
20001d26:	000a      	movs	r2, r1
20001d28:	1cbb      	adds	r3, r7, #2
20001d2a:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRL = GPIO_Pin;
20001d2c:	687b      	ldr	r3, [r7, #4]
20001d2e:	1cba      	adds	r2, r7, #2
20001d30:	8812      	ldrh	r2, [r2, #0]
20001d32:	831a      	strh	r2, [r3, #24]
}
20001d34:	46c0      	nop			; (mov r8, r8)
20001d36:	46bd      	mov	sp, r7
20001d38:	b002      	add	sp, #8
20001d3a:	bd80      	pop	{r7, pc}

20001d3c <GPIO_ResetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
20001d3c:	b580      	push	{r7, lr}
20001d3e:	b082      	sub	sp, #8
20001d40:	af00      	add	r7, sp, #0
20001d42:	6078      	str	r0, [r7, #4]
20001d44:	000a      	movs	r2, r1
20001d46:	1cbb      	adds	r3, r7, #2
20001d48:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRH = GPIO_Pin;
20001d4a:	687b      	ldr	r3, [r7, #4]
20001d4c:	1cba      	adds	r2, r7, #2
20001d4e:	8812      	ldrh	r2, [r2, #0]
20001d50:	835a      	strh	r2, [r3, #26]
}
20001d52:	46c0      	nop			; (mov r8, r8)
20001d54:	46bd      	mov	sp, r7
20001d56:	b002      	add	sp, #8
20001d58:	bd80      	pop	{r7, pc}

20001d5a <GPIO_WriteBit>:
  *            @arg Bit_RESET: to clear the port pin
  *            @arg Bit_SET: to set the port pin
  * @retval None
  */
void GPIO_WriteBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, BitAction BitVal)
{
20001d5a:	b580      	push	{r7, lr}
20001d5c:	b082      	sub	sp, #8
20001d5e:	af00      	add	r7, sp, #0
20001d60:	6078      	str	r0, [r7, #4]
20001d62:	0008      	movs	r0, r1
20001d64:	0011      	movs	r1, r2
20001d66:	1cbb      	adds	r3, r7, #2
20001d68:	1c02      	adds	r2, r0, #0
20001d6a:	801a      	strh	r2, [r3, #0]
20001d6c:	1c7b      	adds	r3, r7, #1
20001d6e:	1c0a      	adds	r2, r1, #0
20001d70:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal));

  if (BitVal != Bit_RESET)
20001d72:	1c7b      	adds	r3, r7, #1
20001d74:	781b      	ldrb	r3, [r3, #0]
20001d76:	2b00      	cmp	r3, #0
20001d78:	d004      	beq.n	20001d84 <GPIO_WriteBit+0x2a>
  {
    GPIOx->BSRRL = GPIO_Pin;
20001d7a:	687b      	ldr	r3, [r7, #4]
20001d7c:	1cba      	adds	r2, r7, #2
20001d7e:	8812      	ldrh	r2, [r2, #0]
20001d80:	831a      	strh	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRRH = GPIO_Pin ;
  }
}
20001d82:	e003      	b.n	20001d8c <GPIO_WriteBit+0x32>
    GPIOx->BSRRH = GPIO_Pin ;
20001d84:	687b      	ldr	r3, [r7, #4]
20001d86:	1cba      	adds	r2, r7, #2
20001d88:	8812      	ldrh	r2, [r2, #0]
20001d8a:	835a      	strh	r2, [r3, #26]
}
20001d8c:	46c0      	nop			; (mov r8, r8)
20001d8e:	46bd      	mov	sp, r7
20001d90:	b002      	add	sp, #8
20001d92:	bd80      	pop	{r7, pc}

20001d94 <GPIO_Write>:
  *                      x can be (A, B, C, D and H) to select the GPIO peripheral for STM32F401xx devices. 
  * @param  PortVal: specifies the value to be written to the port output data register.
  * @retval None
  */
void GPIO_Write(GPIO_TypeDef* GPIOx, uint16_t PortVal)
{
20001d94:	b580      	push	{r7, lr}
20001d96:	b082      	sub	sp, #8
20001d98:	af00      	add	r7, sp, #0
20001d9a:	6078      	str	r0, [r7, #4]
20001d9c:	000a      	movs	r2, r1
20001d9e:	1cbb      	adds	r3, r7, #2
20001da0:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR = PortVal;
20001da2:	1cbb      	adds	r3, r7, #2
20001da4:	881a      	ldrh	r2, [r3, #0]
20001da6:	687b      	ldr	r3, [r7, #4]
20001da8:	615a      	str	r2, [r3, #20]
}
20001daa:	46c0      	nop			; (mov r8, r8)
20001dac:	46bd      	mov	sp, r7
20001dae:	b002      	add	sp, #8
20001db0:	bd80      	pop	{r7, pc}

20001db2 <GPIO_ToggleBits>:
  *                      x can be (A, B, C, D and H) to select the GPIO peripheral for STM32F401xx devices. 
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void GPIO_ToggleBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
20001db2:	b580      	push	{r7, lr}
20001db4:	b082      	sub	sp, #8
20001db6:	af00      	add	r7, sp, #0
20001db8:	6078      	str	r0, [r7, #4]
20001dba:	000a      	movs	r2, r1
20001dbc:	1cbb      	adds	r3, r7, #2
20001dbe:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR ^= GPIO_Pin;
20001dc0:	687b      	ldr	r3, [r7, #4]
20001dc2:	695a      	ldr	r2, [r3, #20]
20001dc4:	1cbb      	adds	r3, r7, #2
20001dc6:	881b      	ldrh	r3, [r3, #0]
20001dc8:	405a      	eors	r2, r3
20001dca:	687b      	ldr	r3, [r7, #4]
20001dcc:	615a      	str	r2, [r3, #20]
}
20001dce:	46c0      	nop			; (mov r8, r8)
20001dd0:	46bd      	mov	sp, r7
20001dd2:	b002      	add	sp, #8
20001dd4:	bd80      	pop	{r7, pc}

20001dd6 <GPIO_PinAFConfig>:
  *            @arg GPIO_AF_LTDC: Connect LTDC pins to AF14 for STM32F429xx/439xx devices. 
  *            @arg GPIO_AF_EVENTOUT: Connect EVENTOUT pins to AF15
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
20001dd6:	b580      	push	{r7, lr}
20001dd8:	b084      	sub	sp, #16
20001dda:	af00      	add	r7, sp, #0
20001ddc:	6078      	str	r0, [r7, #4]
20001dde:	0008      	movs	r0, r1
20001de0:	0011      	movs	r1, r2
20001de2:	1cbb      	adds	r3, r7, #2
20001de4:	1c02      	adds	r2, r0, #0
20001de6:	801a      	strh	r2, [r3, #0]
20001de8:	1c7b      	adds	r3, r7, #1
20001dea:	1c0a      	adds	r2, r1, #0
20001dec:	701a      	strb	r2, [r3, #0]
  uint32_t temp = 0x00;
20001dee:	2300      	movs	r3, #0
20001df0:	60fb      	str	r3, [r7, #12]
  uint32_t temp_2 = 0x00;
20001df2:	2300      	movs	r3, #0
20001df4:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
20001df6:	1c7b      	adds	r3, r7, #1
20001df8:	781a      	ldrb	r2, [r3, #0]
20001dfa:	1cbb      	adds	r3, r7, #2
20001dfc:	881b      	ldrh	r3, [r3, #0]
20001dfe:	2107      	movs	r1, #7
20001e00:	400b      	ands	r3, r1
20001e02:	009b      	lsls	r3, r3, #2
20001e04:	409a      	lsls	r2, r3
20001e06:	0013      	movs	r3, r2
20001e08:	60fb      	str	r3, [r7, #12]
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
20001e0a:	1cbb      	adds	r3, r7, #2
20001e0c:	881b      	ldrh	r3, [r3, #0]
20001e0e:	08db      	lsrs	r3, r3, #3
20001e10:	b29b      	uxth	r3, r3
20001e12:	001a      	movs	r2, r3
20001e14:	687b      	ldr	r3, [r7, #4]
20001e16:	3208      	adds	r2, #8
20001e18:	0092      	lsls	r2, r2, #2
20001e1a:	58d3      	ldr	r3, [r2, r3]
20001e1c:	1cba      	adds	r2, r7, #2
20001e1e:	8812      	ldrh	r2, [r2, #0]
20001e20:	2107      	movs	r1, #7
20001e22:	400a      	ands	r2, r1
20001e24:	0092      	lsls	r2, r2, #2
20001e26:	210f      	movs	r1, #15
20001e28:	4091      	lsls	r1, r2
20001e2a:	000a      	movs	r2, r1
20001e2c:	43d2      	mvns	r2, r2
20001e2e:	1cb9      	adds	r1, r7, #2
20001e30:	8809      	ldrh	r1, [r1, #0]
20001e32:	08c9      	lsrs	r1, r1, #3
20001e34:	b289      	uxth	r1, r1
20001e36:	0008      	movs	r0, r1
20001e38:	401a      	ands	r2, r3
20001e3a:	0011      	movs	r1, r2
20001e3c:	687b      	ldr	r3, [r7, #4]
20001e3e:	0002      	movs	r2, r0
20001e40:	3208      	adds	r2, #8
20001e42:	0092      	lsls	r2, r2, #2
20001e44:	50d1      	str	r1, [r2, r3]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
20001e46:	1cbb      	adds	r3, r7, #2
20001e48:	881b      	ldrh	r3, [r3, #0]
20001e4a:	08db      	lsrs	r3, r3, #3
20001e4c:	b29b      	uxth	r3, r3
20001e4e:	001a      	movs	r2, r3
20001e50:	687b      	ldr	r3, [r7, #4]
20001e52:	3208      	adds	r2, #8
20001e54:	0092      	lsls	r2, r2, #2
20001e56:	58d3      	ldr	r3, [r2, r3]
20001e58:	68fa      	ldr	r2, [r7, #12]
20001e5a:	4313      	orrs	r3, r2
20001e5c:	60bb      	str	r3, [r7, #8]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
20001e5e:	1cbb      	adds	r3, r7, #2
20001e60:	881b      	ldrh	r3, [r3, #0]
20001e62:	08db      	lsrs	r3, r3, #3
20001e64:	b29b      	uxth	r3, r3
20001e66:	001a      	movs	r2, r3
20001e68:	687b      	ldr	r3, [r7, #4]
20001e6a:	3208      	adds	r2, #8
20001e6c:	0092      	lsls	r2, r2, #2
20001e6e:	68b9      	ldr	r1, [r7, #8]
20001e70:	50d1      	str	r1, [r2, r3]
}
20001e72:	46c0      	nop			; (mov r8, r8)
20001e74:	46bd      	mov	sp, r7
20001e76:	b004      	add	sp, #16
20001e78:	bd80      	pop	{r7, pc}
20001e7a:	46c0      	nop			; (mov r8, r8)

20001e7c <encode_door_time_config>:
#include "stm32f4xx.h"
#include "stm32f4xx_rcc.h"
#include "stm32f4xx_gpio.h"


uint8_t encode_door_time_config(CanTxMsg *msg, uint8_t to_central, uint8_t door_id_0, uint8_t door_id_1, uint16_t time_0, uint16_t time_1, uint8_t locked){
20001e7c:	b590      	push	{r4, r7, lr}
20001e7e:	b085      	sub	sp, #20
20001e80:	af00      	add	r7, sp, #0
20001e82:	6078      	str	r0, [r7, #4]
20001e84:	000c      	movs	r4, r1
20001e86:	0010      	movs	r0, r2
20001e88:	0019      	movs	r1, r3
20001e8a:	1cfb      	adds	r3, r7, #3
20001e8c:	1c22      	adds	r2, r4, #0
20001e8e:	701a      	strb	r2, [r3, #0]
20001e90:	1cbb      	adds	r3, r7, #2
20001e92:	1c02      	adds	r2, r0, #0
20001e94:	701a      	strb	r2, [r3, #0]
20001e96:	1c7b      	adds	r3, r7, #1
20001e98:	1c0a      	adds	r2, r1, #0
20001e9a:	701a      	strb	r2, [r3, #0]
    if(door_id_0 > door_id_1 || door_id_1 > 31){
20001e9c:	1cba      	adds	r2, r7, #2
20001e9e:	1c7b      	adds	r3, r7, #1
20001ea0:	7812      	ldrb	r2, [r2, #0]
20001ea2:	781b      	ldrb	r3, [r3, #0]
20001ea4:	429a      	cmp	r2, r3
20001ea6:	d803      	bhi.n	20001eb0 <encode_door_time_config+0x34>
20001ea8:	1c7b      	adds	r3, r7, #1
20001eaa:	781b      	ldrb	r3, [r3, #0]
20001eac:	2b1f      	cmp	r3, #31
20001eae:	d901      	bls.n	20001eb4 <encode_door_time_config+0x38>
        return 0;
20001eb0:	2300      	movs	r3, #0
20001eb2:	e049      	b.n	20001f48 <encode_door_time_config+0xcc>
    }
    
    uint8_t *data_pointer =  &(msg->Data);
20001eb4:	687b      	ldr	r3, [r7, #4]
20001eb6:	330b      	adds	r3, #11
20001eb8:	60fb      	str	r3, [r7, #12]
    
    
    Header header = empty_header;
20001eba:	2300      	movs	r3, #0
20001ebc:	60bb      	str	r3, [r7, #8]
    header.msgType = 2;
20001ebe:	200b      	movs	r0, #11
20001ec0:	183b      	adds	r3, r7, r0
20001ec2:	781a      	ldrb	r2, [r3, #0]
20001ec4:	211c      	movs	r1, #28
20001ec6:	438a      	bics	r2, r1
20001ec8:	1c11      	adds	r1, r2, #0
20001eca:	2208      	movs	r2, #8
20001ecc:	430a      	orrs	r2, r1
20001ece:	701a      	strb	r2, [r3, #0]
    header.toCentral = to_central;
20001ed0:	1cfb      	adds	r3, r7, #3
20001ed2:	781b      	ldrb	r3, [r3, #0]
20001ed4:	2201      	movs	r2, #1
20001ed6:	4013      	ands	r3, r2
20001ed8:	b2da      	uxtb	r2, r3
20001eda:	183b      	adds	r3, r7, r0
20001edc:	2101      	movs	r1, #1
20001ede:	400a      	ands	r2, r1
20001ee0:	1890      	adds	r0, r2, r2
20001ee2:	781a      	ldrb	r2, [r3, #0]
20001ee4:	2102      	movs	r1, #2
20001ee6:	438a      	bics	r2, r1
20001ee8:	1c11      	adds	r1, r2, #0
20001eea:	1c02      	adds	r2, r0, #0
20001eec:	430a      	orrs	r2, r1
20001eee:	701a      	strb	r2, [r3, #0]
    HEADERtoUINT32(header, msg->ExtId);
20001ef0:	2308      	movs	r3, #8
20001ef2:	18fb      	adds	r3, r7, r3
20001ef4:	681a      	ldr	r2, [r3, #0]
20001ef6:	687b      	ldr	r3, [r7, #4]
20001ef8:	605a      	str	r2, [r3, #4]
    
    msg->DLC = 7;
20001efa:	687b      	ldr	r3, [r7, #4]
20001efc:	2207      	movs	r2, #7
20001efe:	729a      	strb	r2, [r3, #10]
    msg->IDE = CAN_Id_Extended;
20001f00:	687b      	ldr	r3, [r7, #4]
20001f02:	2204      	movs	r2, #4
20001f04:	721a      	strb	r2, [r3, #8]
    msg->RTR = CAN_RTR_Data;
20001f06:	687b      	ldr	r3, [r7, #4]
20001f08:	2200      	movs	r2, #0
20001f0a:	725a      	strb	r2, [r3, #9]
    
    //Dörrintervall skrivs till de 16 första databitarna
    *data_pointer = door_id_0;
20001f0c:	68fb      	ldr	r3, [r7, #12]
20001f0e:	1cba      	adds	r2, r7, #2
20001f10:	7812      	ldrb	r2, [r2, #0]
20001f12:	701a      	strb	r2, [r3, #0]
    *(data_pointer + 1) = door_id_1;
20001f14:	68fb      	ldr	r3, [r7, #12]
20001f16:	3301      	adds	r3, #1
20001f18:	1c7a      	adds	r2, r7, #1
20001f1a:	7812      	ldrb	r2, [r2, #0]
20001f1c:	701a      	strb	r2, [r3, #0]
    
    
    //De två tidsvärdena skrivs till bit 16-47
    *(data_pointer + 2) = time_0;
20001f1e:	68fb      	ldr	r3, [r7, #12]
20001f20:	3302      	adds	r3, #2
20001f22:	2220      	movs	r2, #32
20001f24:	18ba      	adds	r2, r7, r2
20001f26:	8812      	ldrh	r2, [r2, #0]
20001f28:	b2d2      	uxtb	r2, r2
20001f2a:	701a      	strb	r2, [r3, #0]
    *(data_pointer + 4) = time_1;
20001f2c:	68fb      	ldr	r3, [r7, #12]
20001f2e:	3304      	adds	r3, #4
20001f30:	2224      	movs	r2, #36	; 0x24
20001f32:	18ba      	adds	r2, r7, r2
20001f34:	8812      	ldrh	r2, [r2, #0]
20001f36:	b2d2      	uxtb	r2, r2
20001f38:	701a      	strb	r2, [r3, #0]
    
    //Låsflagga skrivs till bit 48-55
    *(data_pointer + 6) = locked;
20001f3a:	68fb      	ldr	r3, [r7, #12]
20001f3c:	3306      	adds	r3, #6
20001f3e:	2228      	movs	r2, #40	; 0x28
20001f40:	18ba      	adds	r2, r7, r2
20001f42:	7812      	ldrb	r2, [r2, #0]
20001f44:	701a      	strb	r2, [r3, #0]
    
    return 1;
20001f46:	2301      	movs	r3, #1
}
20001f48:	0018      	movs	r0, r3
20001f4a:	46bd      	mov	sp, r7
20001f4c:	b005      	add	sp, #20
20001f4e:	bd90      	pop	{r4, r7, pc}

20001f50 <encode_request_id>:
 * uint32_t temp_id: temporärt, förslagsvis slumpgenererat id
 * uint8_t device_type: 0 för dörrenhet, 1 för rörelseenhet
 * uint8_t value_0: antal dörrar eller rörelsesensorer
 * uint8_t value_1: antal vibrationssensorer
 */
uint8_t encode_request_id(CanTxMsg *msg, uint32_t temp_id, uint8_t device_type, uint8_t value_0, uint8_t value_1){
20001f50:	b580      	push	{r7, lr}
20001f52:	b086      	sub	sp, #24
20001f54:	af00      	add	r7, sp, #0
20001f56:	60f8      	str	r0, [r7, #12]
20001f58:	60b9      	str	r1, [r7, #8]
20001f5a:	0019      	movs	r1, r3
20001f5c:	1dfb      	adds	r3, r7, #7
20001f5e:	701a      	strb	r2, [r3, #0]
20001f60:	1dbb      	adds	r3, r7, #6
20001f62:	1c0a      	adds	r2, r1, #0
20001f64:	701a      	strb	r2, [r3, #0]
    Header header = empty_header;
20001f66:	2300      	movs	r3, #0
20001f68:	617b      	str	r3, [r7, #20]
    header.msgType = reqID_msg_type;
20001f6a:	2017      	movs	r0, #23
20001f6c:	183b      	adds	r3, r7, r0
20001f6e:	781a      	ldrb	r2, [r3, #0]
20001f70:	211c      	movs	r1, #28
20001f72:	438a      	bics	r2, r1
20001f74:	1c11      	adds	r1, r2, #0
20001f76:	220c      	movs	r2, #12
20001f78:	430a      	orrs	r2, r1
20001f7a:	701a      	strb	r2, [r3, #0]
    header.toCentral = 1;
20001f7c:	183b      	adds	r3, r7, r0
20001f7e:	781a      	ldrb	r2, [r3, #0]
20001f80:	2102      	movs	r1, #2
20001f82:	430a      	orrs	r2, r1
20001f84:	701a      	strb	r2, [r3, #0]
    HEADERtoUINT32(header, msg->ExtId);
20001f86:	2314      	movs	r3, #20
20001f88:	18fb      	adds	r3, r7, r3
20001f8a:	681a      	ldr	r2, [r3, #0]
20001f8c:	68fb      	ldr	r3, [r7, #12]
20001f8e:	605a      	str	r2, [r3, #4]

    msg->DLC = reqID_msg_length;
20001f90:	68fb      	ldr	r3, [r7, #12]
20001f92:	2207      	movs	r2, #7
20001f94:	729a      	strb	r2, [r3, #10]
    msg->IDE = CAN_Id_Extended;
20001f96:	68fb      	ldr	r3, [r7, #12]
20001f98:	2204      	movs	r2, #4
20001f9a:	721a      	strb	r2, [r3, #8]
    msg->RTR = CAN_RTR_Data;
20001f9c:	68fb      	ldr	r3, [r7, #12]
20001f9e:	2200      	movs	r2, #0
20001fa0:	725a      	strb	r2, [r3, #9]
    
    //Id skrivs in i bytearrayen för data
    msg->Data[0] = (uint8_t)temp_id;
20001fa2:	68bb      	ldr	r3, [r7, #8]
20001fa4:	b2da      	uxtb	r2, r3
20001fa6:	68fb      	ldr	r3, [r7, #12]
20001fa8:	72da      	strb	r2, [r3, #11]
    msg->Data[1] = (uint8_t)(temp_id >> 8);
20001faa:	68bb      	ldr	r3, [r7, #8]
20001fac:	0a1b      	lsrs	r3, r3, #8
20001fae:	b2da      	uxtb	r2, r3
20001fb0:	68fb      	ldr	r3, [r7, #12]
20001fb2:	731a      	strb	r2, [r3, #12]
    msg->Data[2] = (uint8_t)(temp_id >> 16);
20001fb4:	68bb      	ldr	r3, [r7, #8]
20001fb6:	0c1b      	lsrs	r3, r3, #16
20001fb8:	b2da      	uxtb	r2, r3
20001fba:	68fb      	ldr	r3, [r7, #12]
20001fbc:	735a      	strb	r2, [r3, #13]
    msg->Data[3] = (uint8_t)(temp_id >> 24);
20001fbe:	68bb      	ldr	r3, [r7, #8]
20001fc0:	0e1b      	lsrs	r3, r3, #24
20001fc2:	b2da      	uxtb	r2, r3
20001fc4:	68fb      	ldr	r3, [r7, #12]
20001fc6:	739a      	strb	r2, [r3, #14]

    msg->Data[4] = device_type;
20001fc8:	68fb      	ldr	r3, [r7, #12]
20001fca:	1dfa      	adds	r2, r7, #7
20001fcc:	7812      	ldrb	r2, [r2, #0]
20001fce:	73da      	strb	r2, [r3, #15]
    msg->Data[5] = value_0;
20001fd0:	68fb      	ldr	r3, [r7, #12]
20001fd2:	1dba      	adds	r2, r7, #6
20001fd4:	7812      	ldrb	r2, [r2, #0]
20001fd6:	741a      	strb	r2, [r3, #16]
    msg->Data[6] = value_1;
20001fd8:	68fb      	ldr	r3, [r7, #12]
20001fda:	2220      	movs	r2, #32
20001fdc:	18ba      	adds	r2, r7, r2
20001fde:	7812      	ldrb	r2, [r2, #0]
20001fe0:	745a      	strb	r2, [r3, #17]
    
    return 1;
20001fe2:	2301      	movs	r3, #1
}
20001fe4:	0018      	movs	r0, r3
20001fe6:	46bd      	mov	sp, r7
20001fe8:	b006      	add	sp, #24
20001fea:	bd80      	pop	{r7, pc}

20001fec <encode_assign_id>:
//Encodar en id-tilldelning
//msg är en pektare till meddelande som ska skickas
//request är en pekare till förfrågan
//id är id man tilldelar enheten
//Returnerar 1 om det lyckade 0 annars
uint8_t encode_assign_id(CanTxMsg *msg, CanRxMsg *request, uint8_t id){
20001fec:	b580      	push	{r7, lr}
20001fee:	b086      	sub	sp, #24
20001ff0:	af00      	add	r7, sp, #0
20001ff2:	60f8      	str	r0, [r7, #12]
20001ff4:	60b9      	str	r1, [r7, #8]
20001ff6:	1dfb      	adds	r3, r7, #7
20001ff8:	701a      	strb	r2, [r3, #0]
    //Kollar så längden av request stämmer för idReq
    if (request->DLC == reqID_msg_length){
20001ffa:	68bb      	ldr	r3, [r7, #8]
20001ffc:	7a9b      	ldrb	r3, [r3, #10]
20001ffe:	2b07      	cmp	r3, #7
20002000:	d133      	bne.n	2000206a <encode_assign_id+0x7e>
        Header header = empty_header;
20002002:	2300      	movs	r3, #0
20002004:	617b      	str	r3, [r7, #20]
        header.msgType = assignID_msg_type;
20002006:	2017      	movs	r0, #23
20002008:	183b      	adds	r3, r7, r0
2000200a:	781a      	ldrb	r2, [r3, #0]
2000200c:	211c      	movs	r1, #28
2000200e:	438a      	bics	r2, r1
20002010:	1c11      	adds	r1, r2, #0
20002012:	2208      	movs	r2, #8
20002014:	430a      	orrs	r2, r1
20002016:	701a      	strb	r2, [r3, #0]
        header.toCentral = 0;
20002018:	183b      	adds	r3, r7, r0
2000201a:	781a      	ldrb	r2, [r3, #0]
2000201c:	2102      	movs	r1, #2
2000201e:	438a      	bics	r2, r1
20002020:	701a      	strb	r2, [r3, #0]
        HEADERtoUINT32(header, msg->ExtId);
20002022:	2314      	movs	r3, #20
20002024:	18fb      	adds	r3, r7, r3
20002026:	681a      	ldr	r2, [r3, #0]
20002028:	68fb      	ldr	r3, [r7, #12]
2000202a:	605a      	str	r2, [r3, #4]

        msg->DLC = assignID_msg_length;
2000202c:	68fb      	ldr	r3, [r7, #12]
2000202e:	2205      	movs	r2, #5
20002030:	729a      	strb	r2, [r3, #10]
        msg->IDE = CAN_Id_Extended;
20002032:	68fb      	ldr	r3, [r7, #12]
20002034:	2204      	movs	r2, #4
20002036:	721a      	strb	r2, [r3, #8]
        msg->RTR = CAN_RTR_Data;
20002038:	68fb      	ldr	r3, [r7, #12]
2000203a:	2200      	movs	r2, #0
2000203c:	725a      	strb	r2, [r3, #9]

        //Första 4 bytes är slumptalet från förfrågan
       msg->Data[0] = request->Data[0];
2000203e:	68bb      	ldr	r3, [r7, #8]
20002040:	7ada      	ldrb	r2, [r3, #11]
20002042:	68fb      	ldr	r3, [r7, #12]
20002044:	72da      	strb	r2, [r3, #11]
       msg->Data[1] = request->Data[1];
20002046:	68bb      	ldr	r3, [r7, #8]
20002048:	7b1a      	ldrb	r2, [r3, #12]
2000204a:	68fb      	ldr	r3, [r7, #12]
2000204c:	731a      	strb	r2, [r3, #12]
       msg->Data[2] = request->Data[2];
2000204e:	68bb      	ldr	r3, [r7, #8]
20002050:	7b5a      	ldrb	r2, [r3, #13]
20002052:	68fb      	ldr	r3, [r7, #12]
20002054:	735a      	strb	r2, [r3, #13]
       msg->Data[3] = request->Data[3];
20002056:	68bb      	ldr	r3, [r7, #8]
20002058:	7b9a      	ldrb	r2, [r3, #14]
2000205a:	68fb      	ldr	r3, [r7, #12]
2000205c:	739a      	strb	r2, [r3, #14]

        //Id skickas i andra byten
        msg->Data[4] = id;
2000205e:	68fb      	ldr	r3, [r7, #12]
20002060:	1dfa      	adds	r2, r7, #7
20002062:	7812      	ldrb	r2, [r2, #0]
20002064:	73da      	strb	r2, [r3, #15]

        return 1;
20002066:	2301      	movs	r3, #1
20002068:	e000      	b.n	2000206c <encode_assign_id+0x80>
    }
    return 0;
2000206a:	2300      	movs	r3, #0
}
2000206c:	0018      	movs	r0, r3
2000206e:	46bd      	mov	sp, r7
20002070:	b006      	add	sp, #24
20002072:	bd80      	pop	{r7, pc}

20002074 <encode_distance_config>:

uint8_t encode_distance_config(CanTxMsg *msg, uint32_t dist){
20002074:	b580      	push	{r7, lr}
20002076:	b084      	sub	sp, #16
20002078:	af00      	add	r7, sp, #0
2000207a:	6078      	str	r0, [r7, #4]
2000207c:	6039      	str	r1, [r7, #0]
    uint8_t *data_pointer =  &(msg->Data[0]);
2000207e:	687b      	ldr	r3, [r7, #4]
20002080:	330b      	adds	r3, #11
20002082:	60fb      	str	r3, [r7, #12]
    
    msg->DLC = 4;
20002084:	687b      	ldr	r3, [r7, #4]
20002086:	2204      	movs	r2, #4
20002088:	729a      	strb	r2, [r3, #10]
    
    //Avstånd skrivs in i bytearrayen för data
    *data_pointer = dist;
2000208a:	683b      	ldr	r3, [r7, #0]
2000208c:	b2da      	uxtb	r2, r3
2000208e:	68fb      	ldr	r3, [r7, #12]
20002090:	701a      	strb	r2, [r3, #0]
}
20002092:	46c0      	nop			; (mov r8, r8)
20002094:	0018      	movs	r0, r3
20002096:	46bd      	mov	sp, r7
20002098:	b004      	add	sp, #16
2000209a:	bd80      	pop	{r7, pc}

2000209c <encode_door_larm_msg>:

//Encodar ett larmmeddelande från dörrenhet
//msg är en pekare till meddelandet som ska skickas
//unitID är enhetens egna ID
//id är idt till dörren som larmar
void encode_door_larm_msg(CanTxMsg *msg, uint8_t uinitID, uint8_t id){
2000209c:	b590      	push	{r4, r7, lr}
2000209e:	b085      	sub	sp, #20
200020a0:	af00      	add	r7, sp, #0
200020a2:	6078      	str	r0, [r7, #4]
200020a4:	0008      	movs	r0, r1
200020a6:	0011      	movs	r1, r2
200020a8:	1cfb      	adds	r3, r7, #3
200020aa:	1c02      	adds	r2, r0, #0
200020ac:	701a      	strb	r2, [r3, #0]
200020ae:	1cbb      	adds	r3, r7, #2
200020b0:	1c0a      	adds	r2, r1, #0
200020b2:	701a      	strb	r2, [r3, #0]
    Header header = empty_header;
200020b4:	2300      	movs	r3, #0
200020b6:	60fb      	str	r3, [r7, #12]
    header.msgType = larm_msg_type;
200020b8:	240f      	movs	r4, #15
200020ba:	193b      	adds	r3, r7, r4
200020bc:	781a      	ldrb	r2, [r3, #0]
200020be:	211c      	movs	r1, #28
200020c0:	438a      	bics	r2, r1
200020c2:	701a      	strb	r2, [r3, #0]
    header.ID = uinitID;
200020c4:	1cfb      	adds	r3, r7, #3
200020c6:	781b      	ldrb	r3, [r3, #0]
200020c8:	227f      	movs	r2, #127	; 0x7f
200020ca:	4013      	ands	r3, r2
200020cc:	b2da      	uxtb	r2, r3
200020ce:	230e      	movs	r3, #14
200020d0:	18fb      	adds	r3, r7, r3
200020d2:	1c11      	adds	r1, r2, #0
200020d4:	227f      	movs	r2, #127	; 0x7f
200020d6:	400a      	ands	r2, r1
200020d8:	0090      	lsls	r0, r2, #2
200020da:	881a      	ldrh	r2, [r3, #0]
200020dc:	4910      	ldr	r1, [pc, #64]	; (20002120 <encode_door_larm_msg+0x84>)
200020de:	400a      	ands	r2, r1
200020e0:	1c11      	adds	r1, r2, #0
200020e2:	1c02      	adds	r2, r0, #0
200020e4:	430a      	orrs	r2, r1
200020e6:	801a      	strh	r2, [r3, #0]
    header.toCentral = 1;
200020e8:	193b      	adds	r3, r7, r4
200020ea:	781a      	ldrb	r2, [r3, #0]
200020ec:	2102      	movs	r1, #2
200020ee:	430a      	orrs	r2, r1
200020f0:	701a      	strb	r2, [r3, #0]
    HEADERtoUINT32(header, msg->ExtId);
200020f2:	230c      	movs	r3, #12
200020f4:	18fb      	adds	r3, r7, r3
200020f6:	681a      	ldr	r2, [r3, #0]
200020f8:	687b      	ldr	r3, [r7, #4]
200020fa:	605a      	str	r2, [r3, #4]

    msg->DLC = door_larm_msg_length;
200020fc:	687b      	ldr	r3, [r7, #4]
200020fe:	2201      	movs	r2, #1
20002100:	729a      	strb	r2, [r3, #10]
    msg->IDE = CAN_Id_Extended;
20002102:	687b      	ldr	r3, [r7, #4]
20002104:	2204      	movs	r2, #4
20002106:	721a      	strb	r2, [r3, #8]
    msg->RTR = CAN_RTR_Data;
20002108:	687b      	ldr	r3, [r7, #4]
2000210a:	2200      	movs	r2, #0
2000210c:	725a      	strb	r2, [r3, #9]

    msg->Data[0] = id;
2000210e:	687b      	ldr	r3, [r7, #4]
20002110:	1cba      	adds	r2, r7, #2
20002112:	7812      	ldrb	r2, [r2, #0]
20002114:	72da      	strb	r2, [r3, #11]
}
20002116:	46c0      	nop			; (mov r8, r8)
20002118:	46bd      	mov	sp, r7
2000211a:	b005      	add	sp, #20
2000211c:	bd90      	pop	{r4, r7, pc}
2000211e:	46c0      	nop			; (mov r8, r8)
20002120:	fffffe03 			; <UNDEFINED> instruction: 0xfffffe03

20002124 <encode_motion_larm_msg>:
//Encodar ett larmmeddelande från rörelseenhet
//msg är en pekare till meddelandet som ska skickas
//unitID är enhetens egna ID
//sensorType är antingen motion_sensor eller vibration_sensor
//id är idt till sensorn som larmar
void encode_motion_larm_msg(CanTxMsg *msg, uint8_t uinitID, uint8_t sensorType, uint8_t id){
20002124:	b590      	push	{r4, r7, lr}
20002126:	b085      	sub	sp, #20
20002128:	af00      	add	r7, sp, #0
2000212a:	6078      	str	r0, [r7, #4]
2000212c:	000c      	movs	r4, r1
2000212e:	0010      	movs	r0, r2
20002130:	0019      	movs	r1, r3
20002132:	1cfb      	adds	r3, r7, #3
20002134:	1c22      	adds	r2, r4, #0
20002136:	701a      	strb	r2, [r3, #0]
20002138:	1cbb      	adds	r3, r7, #2
2000213a:	1c02      	adds	r2, r0, #0
2000213c:	701a      	strb	r2, [r3, #0]
2000213e:	1c7b      	adds	r3, r7, #1
20002140:	1c0a      	adds	r2, r1, #0
20002142:	701a      	strb	r2, [r3, #0]
    Header header = empty_header;
20002144:	2300      	movs	r3, #0
20002146:	60fb      	str	r3, [r7, #12]
    header.msgType = larm_msg_type;
20002148:	240f      	movs	r4, #15
2000214a:	193b      	adds	r3, r7, r4
2000214c:	781a      	ldrb	r2, [r3, #0]
2000214e:	211c      	movs	r1, #28
20002150:	438a      	bics	r2, r1
20002152:	701a      	strb	r2, [r3, #0]
    header.ID = uinitID;
20002154:	1cfb      	adds	r3, r7, #3
20002156:	781b      	ldrb	r3, [r3, #0]
20002158:	227f      	movs	r2, #127	; 0x7f
2000215a:	4013      	ands	r3, r2
2000215c:	b2da      	uxtb	r2, r3
2000215e:	230e      	movs	r3, #14
20002160:	18fb      	adds	r3, r7, r3
20002162:	1c11      	adds	r1, r2, #0
20002164:	227f      	movs	r2, #127	; 0x7f
20002166:	400a      	ands	r2, r1
20002168:	0090      	lsls	r0, r2, #2
2000216a:	881a      	ldrh	r2, [r3, #0]
2000216c:	4912      	ldr	r1, [pc, #72]	; (200021b8 <encode_motion_larm_msg+0x94>)
2000216e:	400a      	ands	r2, r1
20002170:	1c11      	adds	r1, r2, #0
20002172:	1c02      	adds	r2, r0, #0
20002174:	430a      	orrs	r2, r1
20002176:	801a      	strh	r2, [r3, #0]
    header.toCentral = 1;
20002178:	193b      	adds	r3, r7, r4
2000217a:	781a      	ldrb	r2, [r3, #0]
2000217c:	2102      	movs	r1, #2
2000217e:	430a      	orrs	r2, r1
20002180:	701a      	strb	r2, [r3, #0]
    HEADERtoUINT32(header, msg->ExtId);
20002182:	230c      	movs	r3, #12
20002184:	18fb      	adds	r3, r7, r3
20002186:	681a      	ldr	r2, [r3, #0]
20002188:	687b      	ldr	r3, [r7, #4]
2000218a:	605a      	str	r2, [r3, #4]

    msg->DLC = motion_larm_msg_length;
2000218c:	687b      	ldr	r3, [r7, #4]
2000218e:	2202      	movs	r2, #2
20002190:	729a      	strb	r2, [r3, #10]
    msg->IDE = CAN_Id_Extended;
20002192:	687b      	ldr	r3, [r7, #4]
20002194:	2204      	movs	r2, #4
20002196:	721a      	strb	r2, [r3, #8]
    msg->RTR = CAN_RTR_Data;
20002198:	687b      	ldr	r3, [r7, #4]
2000219a:	2200      	movs	r2, #0
2000219c:	725a      	strb	r2, [r3, #9]

    msg->Data[0] = sensorType;
2000219e:	687b      	ldr	r3, [r7, #4]
200021a0:	1cba      	adds	r2, r7, #2
200021a2:	7812      	ldrb	r2, [r2, #0]
200021a4:	72da      	strb	r2, [r3, #11]
    msg->Data[1] = id;
200021a6:	687b      	ldr	r3, [r7, #4]
200021a8:	1c7a      	adds	r2, r7, #1
200021aa:	7812      	ldrb	r2, [r2, #0]
200021ac:	731a      	strb	r2, [r3, #12]
}
200021ae:	46c0      	nop			; (mov r8, r8)
200021b0:	46bd      	mov	sp, r7
200021b2:	b005      	add	sp, #20
200021b4:	bd90      	pop	{r4, r7, pc}
200021b6:	46c0      	nop			; (mov r8, r8)
200021b8:	fffffe03 			; <UNDEFINED> instruction: 0xfffffe03

200021bc <decode_door_config_msg>:

uint8_t decode_door_config_msg(CanRxMsg *msg, uint8_t *door_id_0, uint8_t *door_id_1, uint16_t *time_0, uint16_t *time_1, uint8_t *locked) {
200021bc:	b580      	push	{r7, lr}
200021be:	b086      	sub	sp, #24
200021c0:	af00      	add	r7, sp, #0
200021c2:	60f8      	str	r0, [r7, #12]
200021c4:	60b9      	str	r1, [r7, #8]
200021c6:	607a      	str	r2, [r7, #4]
200021c8:	603b      	str	r3, [r7, #0]
    uint8_t *data_pointer =  &(msg->Data);
200021ca:	68fb      	ldr	r3, [r7, #12]
200021cc:	330b      	adds	r3, #11
200021ce:	617b      	str	r3, [r7, #20]
    
    door_id_0 = data_pointer;
200021d0:	697b      	ldr	r3, [r7, #20]
200021d2:	60bb      	str	r3, [r7, #8]
    door_id_1 = data_pointer + 1;
200021d4:	697b      	ldr	r3, [r7, #20]
200021d6:	3301      	adds	r3, #1
200021d8:	607b      	str	r3, [r7, #4]
    
    time_0 = data_pointer + 2;
200021da:	697b      	ldr	r3, [r7, #20]
200021dc:	3302      	adds	r3, #2
200021de:	603b      	str	r3, [r7, #0]
    time_1 = data_pointer + 4;
200021e0:	697b      	ldr	r3, [r7, #20]
200021e2:	3304      	adds	r3, #4
200021e4:	623b      	str	r3, [r7, #32]
    
    locked = data_pointer + 6;
200021e6:	697b      	ldr	r3, [r7, #20]
200021e8:	3306      	adds	r3, #6
200021ea:	627b      	str	r3, [r7, #36]	; 0x24
    
    
    return 1;
200021ec:	2301      	movs	r3, #1
}
200021ee:	0018      	movs	r0, r3
200021f0:	46bd      	mov	sp, r7
200021f2:	b006      	add	sp, #24
200021f4:	bd80      	pop	{r7, pc}

200021f6 <decode_tempID>:

//Returnerar tempID ur ett ID-tilldelings meddelande
//Filtrering av header måste redan ha gjorts
uint32_t decode_tempID(CanRxMsg *msg){
200021f6:	b580      	push	{r7, lr}
200021f8:	b082      	sub	sp, #8
200021fa:	af00      	add	r7, sp, #0
200021fc:	6078      	str	r0, [r7, #4]
    if (msg->DLC == assignID_msg_length){
200021fe:	687b      	ldr	r3, [r7, #4]
20002200:	7a9b      	ldrb	r3, [r3, #10]
20002202:	2b05      	cmp	r3, #5
20002204:	d10f      	bne.n	20002226 <decode_tempID+0x30>
        return (((uint32_t)msg->Data[0])) | (((uint32_t)msg->Data[1]) << 8) | (((uint32_t)msg->Data[2]) << 16) | (((uint32_t)msg->Data[3]) << 24);
20002206:	687b      	ldr	r3, [r7, #4]
20002208:	7adb      	ldrb	r3, [r3, #11]
2000220a:	001a      	movs	r2, r3
2000220c:	687b      	ldr	r3, [r7, #4]
2000220e:	7b1b      	ldrb	r3, [r3, #12]
20002210:	021b      	lsls	r3, r3, #8
20002212:	431a      	orrs	r2, r3
20002214:	687b      	ldr	r3, [r7, #4]
20002216:	7b5b      	ldrb	r3, [r3, #13]
20002218:	041b      	lsls	r3, r3, #16
2000221a:	431a      	orrs	r2, r3
2000221c:	687b      	ldr	r3, [r7, #4]
2000221e:	7b9b      	ldrb	r3, [r3, #14]
20002220:	061b      	lsls	r3, r3, #24
20002222:	4313      	orrs	r3, r2
20002224:	e000      	b.n	20002228 <decode_tempID+0x32>
    }
    return 0;
20002226:	2300      	movs	r3, #0
}
20002228:	0018      	movs	r0, r3
2000222a:	46bd      	mov	sp, r7
2000222c:	b002      	add	sp, #8
2000222e:	bd80      	pop	{r7, pc}

20002230 <decode_ID>:

//Returnerar ID ur ett ID-tilldelings meddelande
//Filtrering av header och rätt tempID måste redan ha gjorts
uint8_t decode_ID(CanRxMsg *msg){
20002230:	b580      	push	{r7, lr}
20002232:	b082      	sub	sp, #8
20002234:	af00      	add	r7, sp, #0
20002236:	6078      	str	r0, [r7, #4]
    if (msg->DLC == assignID_msg_length){
20002238:	687b      	ldr	r3, [r7, #4]
2000223a:	7a9b      	ldrb	r3, [r3, #10]
2000223c:	2b05      	cmp	r3, #5
2000223e:	d102      	bne.n	20002246 <decode_ID+0x16>
        return msg->Data[4];
20002240:	687b      	ldr	r3, [r7, #4]
20002242:	7bdb      	ldrb	r3, [r3, #15]
20002244:	e7ff      	b.n	20002246 <decode_ID+0x16>
    }
}
20002246:	0018      	movs	r0, r3
20002248:	46bd      	mov	sp, r7
2000224a:	b002      	add	sp, #8
2000224c:	bd80      	pop	{r7, pc}
2000224e:	46c0      	nop			; (mov r8, r8)

20002250 <RNG_DeInit>:
  * @brief  De-initializes the RNG peripheral registers to their default reset values.
  * @param  None
  * @retval None
  */
void RNG_DeInit(void)
{
20002250:	b580      	push	{r7, lr}
20002252:	af00      	add	r7, sp, #0
#if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F469_479xx)  
  /* Enable RNG reset state */
  RCC_AHB2PeriphResetCmd(RCC_AHB2Periph_RNG, ENABLE);
20002254:	2101      	movs	r1, #1
20002256:	2040      	movs	r0, #64	; 0x40
20002258:	f000 fe7a 	bl	20002f50 <RCC_AHB2PeriphResetCmd>

  /* Release RNG from reset state */
  RCC_AHB2PeriphResetCmd(RCC_AHB2Periph_RNG, DISABLE);
2000225c:	2100      	movs	r1, #0
2000225e:	2040      	movs	r0, #64	; 0x40
20002260:	f000 fe76 	bl	20002f50 <RCC_AHB2PeriphResetCmd>
  RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_RNG, ENABLE);

  /* Release RNG from reset state */
  RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_RNG, DISABLE); 
#endif /* STM32F410xx*/  
}
20002264:	46c0      	nop			; (mov r8, r8)
20002266:	46bd      	mov	sp, r7
20002268:	bd80      	pop	{r7, pc}

2000226a <RNG_Cmd>:
  * @param  NewState: new state of the RNG peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RNG_Cmd(FunctionalState NewState)
{
2000226a:	b580      	push	{r7, lr}
2000226c:	b082      	sub	sp, #8
2000226e:	af00      	add	r7, sp, #0
20002270:	0002      	movs	r2, r0
20002272:	1dfb      	adds	r3, r7, #7
20002274:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
20002276:	1dfb      	adds	r3, r7, #7
20002278:	781b      	ldrb	r3, [r3, #0]
2000227a:	2b00      	cmp	r3, #0
2000227c:	d006      	beq.n	2000228c <RNG_Cmd+0x22>
  {
    /* Enable the RNG */
    RNG->CR |= RNG_CR_RNGEN;
2000227e:	4b08      	ldr	r3, [pc, #32]	; (200022a0 <RNG_Cmd+0x36>)
20002280:	681a      	ldr	r2, [r3, #0]
20002282:	4b07      	ldr	r3, [pc, #28]	; (200022a0 <RNG_Cmd+0x36>)
20002284:	2104      	movs	r1, #4
20002286:	430a      	orrs	r2, r1
20002288:	601a      	str	r2, [r3, #0]
  else
  {
    /* Disable the RNG */
    RNG->CR &= ~RNG_CR_RNGEN;
  }
}
2000228a:	e005      	b.n	20002298 <RNG_Cmd+0x2e>
    RNG->CR &= ~RNG_CR_RNGEN;
2000228c:	4b04      	ldr	r3, [pc, #16]	; (200022a0 <RNG_Cmd+0x36>)
2000228e:	681a      	ldr	r2, [r3, #0]
20002290:	4b03      	ldr	r3, [pc, #12]	; (200022a0 <RNG_Cmd+0x36>)
20002292:	2104      	movs	r1, #4
20002294:	438a      	bics	r2, r1
20002296:	601a      	str	r2, [r3, #0]
}
20002298:	46c0      	nop			; (mov r8, r8)
2000229a:	46bd      	mov	sp, r7
2000229c:	b002      	add	sp, #8
2000229e:	bd80      	pop	{r7, pc}
200022a0:	50060800 	andpl	r0, r6, r0, lsl #16

200022a4 <RNG_GetRandomNumber>:
  *         
  * @param  None
  * @retval 32-bit random number.
  */
uint32_t RNG_GetRandomNumber(void)
{
200022a4:	b580      	push	{r7, lr}
200022a6:	af00      	add	r7, sp, #0
  /* Return the 32 bit random number from the DR register */
  return RNG->DR;
200022a8:	4b02      	ldr	r3, [pc, #8]	; (200022b4 <RNG_GetRandomNumber+0x10>)
200022aa:	689b      	ldr	r3, [r3, #8]
}
200022ac:	0018      	movs	r0, r3
200022ae:	46bd      	mov	sp, r7
200022b0:	bd80      	pop	{r7, pc}
200022b2:	46c0      	nop			; (mov r8, r8)
200022b4:	50060800 	andpl	r0, r6, r0, lsl #16

200022b8 <RNG_ITConfig>:
  * @param  NewState: new state of the RNG interrupt.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RNG_ITConfig(FunctionalState NewState)
{
200022b8:	b580      	push	{r7, lr}
200022ba:	b082      	sub	sp, #8
200022bc:	af00      	add	r7, sp, #0
200022be:	0002      	movs	r2, r0
200022c0:	1dfb      	adds	r3, r7, #7
200022c2:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
200022c4:	1dfb      	adds	r3, r7, #7
200022c6:	781b      	ldrb	r3, [r3, #0]
200022c8:	2b00      	cmp	r3, #0
200022ca:	d006      	beq.n	200022da <RNG_ITConfig+0x22>
  {
    /* Enable the RNG interrupt */
    RNG->CR |= RNG_CR_IE;
200022cc:	4b08      	ldr	r3, [pc, #32]	; (200022f0 <RNG_ITConfig+0x38>)
200022ce:	681a      	ldr	r2, [r3, #0]
200022d0:	4b07      	ldr	r3, [pc, #28]	; (200022f0 <RNG_ITConfig+0x38>)
200022d2:	2108      	movs	r1, #8
200022d4:	430a      	orrs	r2, r1
200022d6:	601a      	str	r2, [r3, #0]
  else
  {
    /* Disable the RNG interrupt */
    RNG->CR &= ~RNG_CR_IE;
  }
}
200022d8:	e005      	b.n	200022e6 <RNG_ITConfig+0x2e>
    RNG->CR &= ~RNG_CR_IE;
200022da:	4b05      	ldr	r3, [pc, #20]	; (200022f0 <RNG_ITConfig+0x38>)
200022dc:	681a      	ldr	r2, [r3, #0]
200022de:	4b04      	ldr	r3, [pc, #16]	; (200022f0 <RNG_ITConfig+0x38>)
200022e0:	2108      	movs	r1, #8
200022e2:	438a      	bics	r2, r1
200022e4:	601a      	str	r2, [r3, #0]
}
200022e6:	46c0      	nop			; (mov r8, r8)
200022e8:	46bd      	mov	sp, r7
200022ea:	b002      	add	sp, #8
200022ec:	bd80      	pop	{r7, pc}
200022ee:	46c0      	nop			; (mov r8, r8)
200022f0:	50060800 	andpl	r0, r6, r0, lsl #16

200022f4 <RNG_GetFlagStatus>:
  *            @arg RNG_FLAG_CECS: Clock Error Current flag.
  *            @arg RNG_FLAG_SECS: Seed Error Current flag.
  * @retval The new state of RNG_FLAG (SET or RESET).
  */
FlagStatus RNG_GetFlagStatus(uint8_t RNG_FLAG)
{
200022f4:	b580      	push	{r7, lr}
200022f6:	b084      	sub	sp, #16
200022f8:	af00      	add	r7, sp, #0
200022fa:	0002      	movs	r2, r0
200022fc:	1dfb      	adds	r3, r7, #7
200022fe:	701a      	strb	r2, [r3, #0]
  FlagStatus bitstatus = RESET;
20002300:	230f      	movs	r3, #15
20002302:	18fb      	adds	r3, r7, r3
20002304:	2200      	movs	r2, #0
20002306:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RNG_GET_FLAG(RNG_FLAG));

  /* Check the status of the specified RNG flag */
  if ((RNG->SR & RNG_FLAG) != (uint8_t)RESET)
20002308:	4b0a      	ldr	r3, [pc, #40]	; (20002334 <RNG_GetFlagStatus+0x40>)
2000230a:	685b      	ldr	r3, [r3, #4]
2000230c:	1dfa      	adds	r2, r7, #7
2000230e:	7812      	ldrb	r2, [r2, #0]
20002310:	4013      	ands	r3, r2
20002312:	d004      	beq.n	2000231e <RNG_GetFlagStatus+0x2a>
  {
    /* RNG_FLAG is set */
    bitstatus = SET;
20002314:	230f      	movs	r3, #15
20002316:	18fb      	adds	r3, r7, r3
20002318:	2201      	movs	r2, #1
2000231a:	701a      	strb	r2, [r3, #0]
2000231c:	e003      	b.n	20002326 <RNG_GetFlagStatus+0x32>
  }
  else
  {
    /* RNG_FLAG is reset */
    bitstatus = RESET;
2000231e:	230f      	movs	r3, #15
20002320:	18fb      	adds	r3, r7, r3
20002322:	2200      	movs	r2, #0
20002324:	701a      	strb	r2, [r3, #0]
  }
  /* Return the RNG_FLAG status */
  return  bitstatus;
20002326:	230f      	movs	r3, #15
20002328:	18fb      	adds	r3, r7, r3
2000232a:	781b      	ldrb	r3, [r3, #0]
}
2000232c:	0018      	movs	r0, r3
2000232e:	46bd      	mov	sp, r7
20002330:	b004      	add	sp, #16
20002332:	bd80      	pop	{r7, pc}
20002334:	50060800 	andpl	r0, r6, r0, lsl #16

20002338 <RNG_ClearFlag>:
  *         This flag is cleared only by reading the Random number data (using 
  *         RNG_GetRandomNumber() function).                           
  * @retval None
  */
void RNG_ClearFlag(uint8_t RNG_FLAG)
{
20002338:	b580      	push	{r7, lr}
2000233a:	b082      	sub	sp, #8
2000233c:	af00      	add	r7, sp, #0
2000233e:	0002      	movs	r2, r0
20002340:	1dfb      	adds	r3, r7, #7
20002342:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RNG_CLEAR_FLAG(RNG_FLAG));
  /* Clear the selected RNG flags */
  RNG->SR = ~(uint32_t)(((uint32_t)RNG_FLAG) << 4);
20002344:	1dfb      	adds	r3, r7, #7
20002346:	781b      	ldrb	r3, [r3, #0]
20002348:	011a      	lsls	r2, r3, #4
2000234a:	4b03      	ldr	r3, [pc, #12]	; (20002358 <RNG_ClearFlag+0x20>)
2000234c:	43d2      	mvns	r2, r2
2000234e:	605a      	str	r2, [r3, #4]
}
20002350:	46c0      	nop			; (mov r8, r8)
20002352:	46bd      	mov	sp, r7
20002354:	b002      	add	sp, #8
20002356:	bd80      	pop	{r7, pc}
20002358:	50060800 	andpl	r0, r6, r0, lsl #16

2000235c <RNG_GetITStatus>:
  *            @arg RNG_IT_CEI: Clock Error Interrupt.
  *            @arg RNG_IT_SEI: Seed Error Interrupt.                   
  * @retval The new state of RNG_IT (SET or RESET).
  */
ITStatus RNG_GetITStatus(uint8_t RNG_IT)
{
2000235c:	b580      	push	{r7, lr}
2000235e:	b084      	sub	sp, #16
20002360:	af00      	add	r7, sp, #0
20002362:	0002      	movs	r2, r0
20002364:	1dfb      	adds	r3, r7, #7
20002366:	701a      	strb	r2, [r3, #0]
  ITStatus bitstatus = RESET;
20002368:	230f      	movs	r3, #15
2000236a:	18fb      	adds	r3, r7, r3
2000236c:	2200      	movs	r2, #0
2000236e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RNG_GET_IT(RNG_IT));

  /* Check the status of the specified RNG interrupt */
  if ((RNG->SR & RNG_IT) != (uint8_t)RESET)
20002370:	4b0a      	ldr	r3, [pc, #40]	; (2000239c <RNG_GetITStatus+0x40>)
20002372:	685b      	ldr	r3, [r3, #4]
20002374:	1dfa      	adds	r2, r7, #7
20002376:	7812      	ldrb	r2, [r2, #0]
20002378:	4013      	ands	r3, r2
2000237a:	d004      	beq.n	20002386 <RNG_GetITStatus+0x2a>
  {
    /* RNG_IT is set */
    bitstatus = SET;
2000237c:	230f      	movs	r3, #15
2000237e:	18fb      	adds	r3, r7, r3
20002380:	2201      	movs	r2, #1
20002382:	701a      	strb	r2, [r3, #0]
20002384:	e003      	b.n	2000238e <RNG_GetITStatus+0x32>
  }
  else
  {
    /* RNG_IT is reset */
    bitstatus = RESET;
20002386:	230f      	movs	r3, #15
20002388:	18fb      	adds	r3, r7, r3
2000238a:	2200      	movs	r2, #0
2000238c:	701a      	strb	r2, [r3, #0]
  }
  /* Return the RNG_IT status */
  return bitstatus;
2000238e:	230f      	movs	r3, #15
20002390:	18fb      	adds	r3, r7, r3
20002392:	781b      	ldrb	r3, [r3, #0]
}
20002394:	0018      	movs	r0, r3
20002396:	46bd      	mov	sp, r7
20002398:	b004      	add	sp, #16
2000239a:	bd80      	pop	{r7, pc}
2000239c:	50060800 	andpl	r0, r6, r0, lsl #16

200023a0 <RNG_ClearITPendingBit>:
  *            @arg RNG_IT_CEI: Clock Error Interrupt.
  *            @arg RNG_IT_SEI: Seed Error Interrupt.
  * @retval None
  */
void RNG_ClearITPendingBit(uint8_t RNG_IT)
{
200023a0:	b580      	push	{r7, lr}
200023a2:	b082      	sub	sp, #8
200023a4:	af00      	add	r7, sp, #0
200023a6:	0002      	movs	r2, r0
200023a8:	1dfb      	adds	r3, r7, #7
200023aa:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RNG_IT(RNG_IT));

  /* Clear the selected RNG interrupt pending bit */
  RNG->SR = (uint8_t)~RNG_IT;
200023ac:	1dfb      	adds	r3, r7, #7
200023ae:	781b      	ldrb	r3, [r3, #0]
200023b0:	43db      	mvns	r3, r3
200023b2:	b2da      	uxtb	r2, r3
200023b4:	4b02      	ldr	r3, [pc, #8]	; (200023c0 <RNG_ClearITPendingBit+0x20>)
200023b6:	605a      	str	r2, [r3, #4]
}
200023b8:	46c0      	nop			; (mov r8, r8)
200023ba:	46bd      	mov	sp, r7
200023bc:	b002      	add	sp, #8
200023be:	bd80      	pop	{r7, pc}
200023c0:	50060800 	andpl	r0, r6, r0, lsl #16

200023c4 <NVIC_PriorityGroupConfig>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void NVIC_PriorityGroupConfig(uint32_t NVIC_PriorityGroup)
{
200023c4:	b580      	push	{r7, lr}
200023c6:	b082      	sub	sp, #8
200023c8:	af00      	add	r7, sp, #0
200023ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
200023cc:	4b04      	ldr	r3, [pc, #16]	; (200023e0 <NVIC_PriorityGroupConfig+0x1c>)
200023ce:	687a      	ldr	r2, [r7, #4]
200023d0:	4904      	ldr	r1, [pc, #16]	; (200023e4 <NVIC_PriorityGroupConfig+0x20>)
200023d2:	430a      	orrs	r2, r1
200023d4:	60da      	str	r2, [r3, #12]
}
200023d6:	46c0      	nop			; (mov r8, r8)
200023d8:	46bd      	mov	sp, r7
200023da:	b002      	add	sp, #8
200023dc:	bd80      	pop	{r7, pc}
200023de:	46c0      	nop			; (mov r8, r8)
200023e0:	e000ed00 	and	lr, r0, r0, lsl #26
200023e4:	05fa0000 	ldrbeq	r0, [sl, #0]!

200023e8 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
200023e8:	b5b0      	push	{r4, r5, r7, lr}
200023ea:	b084      	sub	sp, #16
200023ec:	af00      	add	r7, sp, #0
200023ee:	6078      	str	r0, [r7, #4]
  uint8_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
200023f0:	230f      	movs	r3, #15
200023f2:	18fb      	adds	r3, r7, r3
200023f4:	2200      	movs	r2, #0
200023f6:	701a      	strb	r2, [r3, #0]
200023f8:	230e      	movs	r3, #14
200023fa:	18fb      	adds	r3, r7, r3
200023fc:	2200      	movs	r2, #0
200023fe:	701a      	strb	r2, [r3, #0]
20002400:	230d      	movs	r3, #13
20002402:	18fb      	adds	r3, r7, r3
20002404:	220f      	movs	r2, #15
20002406:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
20002408:	687b      	ldr	r3, [r7, #4]
2000240a:	78db      	ldrb	r3, [r3, #3]
2000240c:	2b00      	cmp	r3, #0
2000240e:	d04d      	beq.n	200024ac <NVIC_Init+0xc4>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
20002410:	4b31      	ldr	r3, [pc, #196]	; (200024d8 <NVIC_Init+0xf0>)
20002412:	68db      	ldr	r3, [r3, #12]
20002414:	43db      	mvns	r3, r3
20002416:	0a1b      	lsrs	r3, r3, #8
20002418:	b2da      	uxtb	r2, r3
2000241a:	200f      	movs	r0, #15
2000241c:	183b      	adds	r3, r7, r0
2000241e:	2107      	movs	r1, #7
20002420:	400a      	ands	r2, r1
20002422:	701a      	strb	r2, [r3, #0]
    tmppre = (0x4 - tmppriority);
20002424:	250e      	movs	r5, #14
20002426:	197b      	adds	r3, r7, r5
20002428:	183a      	adds	r2, r7, r0
2000242a:	7812      	ldrb	r2, [r2, #0]
2000242c:	2104      	movs	r1, #4
2000242e:	1a8a      	subs	r2, r1, r2
20002430:	701a      	strb	r2, [r3, #0]
    tmpsub = tmpsub >> tmppriority;
20002432:	240d      	movs	r4, #13
20002434:	193b      	adds	r3, r7, r4
20002436:	781a      	ldrb	r2, [r3, #0]
20002438:	0001      	movs	r1, r0
2000243a:	187b      	adds	r3, r7, r1
2000243c:	781b      	ldrb	r3, [r3, #0]
2000243e:	411a      	asrs	r2, r3
20002440:	193b      	adds	r3, r7, r4
20002442:	701a      	strb	r2, [r3, #0]

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
20002444:	687b      	ldr	r3, [r7, #4]
20002446:	785b      	ldrb	r3, [r3, #1]
20002448:	001a      	movs	r2, r3
2000244a:	197b      	adds	r3, r7, r5
2000244c:	781b      	ldrb	r3, [r3, #0]
2000244e:	409a      	lsls	r2, r3
20002450:	0008      	movs	r0, r1
20002452:	187b      	adds	r3, r7, r1
20002454:	701a      	strb	r2, [r3, #0]
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
20002456:	687b      	ldr	r3, [r7, #4]
20002458:	789b      	ldrb	r3, [r3, #2]
2000245a:	193a      	adds	r2, r7, r4
2000245c:	7812      	ldrb	r2, [r2, #0]
2000245e:	4013      	ands	r3, r2
20002460:	b2d9      	uxtb	r1, r3
20002462:	183b      	adds	r3, r7, r0
20002464:	183a      	adds	r2, r7, r0
20002466:	7812      	ldrb	r2, [r2, #0]
20002468:	430a      	orrs	r2, r1
2000246a:	701a      	strb	r2, [r3, #0]
        
    tmppriority = tmppriority << 0x04;
2000246c:	183b      	adds	r3, r7, r0
2000246e:	183a      	adds	r2, r7, r0
20002470:	7812      	ldrb	r2, [r2, #0]
20002472:	0112      	lsls	r2, r2, #4
20002474:	701a      	strb	r2, [r3, #0]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
20002476:	4a19      	ldr	r2, [pc, #100]	; (200024dc <NVIC_Init+0xf4>)
20002478:	687b      	ldr	r3, [r7, #4]
2000247a:	781b      	ldrb	r3, [r3, #0]
2000247c:	0019      	movs	r1, r3
2000247e:	23c0      	movs	r3, #192	; 0xc0
20002480:	009b      	lsls	r3, r3, #2
20002482:	1852      	adds	r2, r2, r1
20002484:	18d3      	adds	r3, r2, r3
20002486:	183a      	adds	r2, r7, r0
20002488:	7812      	ldrb	r2, [r2, #0]
2000248a:	701a      	strb	r2, [r3, #0]
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
2000248c:	687b      	ldr	r3, [r7, #4]
2000248e:	781b      	ldrb	r3, [r3, #0]
20002490:	001a      	movs	r2, r3
20002492:	231f      	movs	r3, #31
20002494:	4013      	ands	r3, r2
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
20002496:	4911      	ldr	r1, [pc, #68]	; (200024dc <NVIC_Init+0xf4>)
20002498:	687a      	ldr	r2, [r7, #4]
2000249a:	7812      	ldrb	r2, [r2, #0]
2000249c:	0952      	lsrs	r2, r2, #5
2000249e:	b2d2      	uxtb	r2, r2
200024a0:	0010      	movs	r0, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
200024a2:	2201      	movs	r2, #1
200024a4:	409a      	lsls	r2, r3
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
200024a6:	0083      	lsls	r3, r0, #2
200024a8:	505a      	str	r2, [r3, r1]
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
200024aa:	e010      	b.n	200024ce <NVIC_Init+0xe6>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
200024ac:	687b      	ldr	r3, [r7, #4]
200024ae:	781b      	ldrb	r3, [r3, #0]
200024b0:	001a      	movs	r2, r3
200024b2:	231f      	movs	r3, #31
200024b4:	4013      	ands	r3, r2
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
200024b6:	4909      	ldr	r1, [pc, #36]	; (200024dc <NVIC_Init+0xf4>)
200024b8:	687a      	ldr	r2, [r7, #4]
200024ba:	7812      	ldrb	r2, [r2, #0]
200024bc:	0952      	lsrs	r2, r2, #5
200024be:	b2d2      	uxtb	r2, r2
200024c0:	0010      	movs	r0, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
200024c2:	2201      	movs	r2, #1
200024c4:	409a      	lsls	r2, r3
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
200024c6:	0003      	movs	r3, r0
200024c8:	3320      	adds	r3, #32
200024ca:	009b      	lsls	r3, r3, #2
200024cc:	505a      	str	r2, [r3, r1]
}
200024ce:	46c0      	nop			; (mov r8, r8)
200024d0:	46bd      	mov	sp, r7
200024d2:	b004      	add	sp, #16
200024d4:	bdb0      	pop	{r4, r5, r7, pc}
200024d6:	46c0      	nop			; (mov r8, r8)
200024d8:	e000ed00 	and	lr, r0, r0, lsl #26
200024dc:	e000e100 	and	lr, r0, r0, lsl #2

200024e0 <NVIC_SetVectorTable>:
  *     @arg NVIC_VectTab_FLASH: Vector Table in internal FLASH.
  * @param  Offset: Vector Table base offset field. This value must be a multiple of 0x200.
  * @retval None
  */
void NVIC_SetVectorTable(uint32_t NVIC_VectTab, uint32_t Offset)
{ 
200024e0:	b580      	push	{r7, lr}
200024e2:	b082      	sub	sp, #8
200024e4:	af00      	add	r7, sp, #0
200024e6:	6078      	str	r0, [r7, #4]
200024e8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_VECTTAB(NVIC_VectTab));
  assert_param(IS_NVIC_OFFSET(Offset));  
   
  SCB->VTOR = NVIC_VectTab | (Offset & (uint32_t)0x1FFFFF80);
200024ea:	683b      	ldr	r3, [r7, #0]
200024ec:	4a05      	ldr	r2, [pc, #20]	; (20002504 <NVIC_SetVectorTable+0x24>)
200024ee:	4013      	ands	r3, r2
200024f0:	0019      	movs	r1, r3
200024f2:	4b05      	ldr	r3, [pc, #20]	; (20002508 <NVIC_SetVectorTable+0x28>)
200024f4:	687a      	ldr	r2, [r7, #4]
200024f6:	430a      	orrs	r2, r1
200024f8:	609a      	str	r2, [r3, #8]
}
200024fa:	46c0      	nop			; (mov r8, r8)
200024fc:	46bd      	mov	sp, r7
200024fe:	b002      	add	sp, #8
20002500:	bd80      	pop	{r7, pc}
20002502:	46c0      	nop			; (mov r8, r8)
20002504:	1fffff80 	svcne	0x00ffff80
20002508:	e000ed00 	and	lr, r0, r0, lsl #26

2000250c <NVIC_SystemLPConfig>:
  *     @arg NVIC_LP_SLEEPONEXIT: Low Power Sleep on Exit.
  * @param  NewState: new state of LP condition. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void NVIC_SystemLPConfig(uint8_t LowPowerMode, FunctionalState NewState)
{
2000250c:	b580      	push	{r7, lr}
2000250e:	b082      	sub	sp, #8
20002510:	af00      	add	r7, sp, #0
20002512:	0002      	movs	r2, r0
20002514:	1dfb      	adds	r3, r7, #7
20002516:	701a      	strb	r2, [r3, #0]
20002518:	1dbb      	adds	r3, r7, #6
2000251a:	1c0a      	adds	r2, r1, #0
2000251c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_LP(LowPowerMode));
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  if (NewState != DISABLE)
2000251e:	1dbb      	adds	r3, r7, #6
20002520:	781b      	ldrb	r3, [r3, #0]
20002522:	2b00      	cmp	r3, #0
20002524:	d007      	beq.n	20002536 <NVIC_SystemLPConfig+0x2a>
  {
    SCB->SCR |= LowPowerMode;
20002526:	4b0a      	ldr	r3, [pc, #40]	; (20002550 <NVIC_SystemLPConfig+0x44>)
20002528:	6919      	ldr	r1, [r3, #16]
2000252a:	1dfb      	adds	r3, r7, #7
2000252c:	781a      	ldrb	r2, [r3, #0]
2000252e:	4b08      	ldr	r3, [pc, #32]	; (20002550 <NVIC_SystemLPConfig+0x44>)
20002530:	430a      	orrs	r2, r1
20002532:	611a      	str	r2, [r3, #16]
  }
  else
  {
    SCB->SCR &= (uint32_t)(~(uint32_t)LowPowerMode);
  }
}
20002534:	e007      	b.n	20002546 <NVIC_SystemLPConfig+0x3a>
    SCB->SCR &= (uint32_t)(~(uint32_t)LowPowerMode);
20002536:	4b06      	ldr	r3, [pc, #24]	; (20002550 <NVIC_SystemLPConfig+0x44>)
20002538:	691a      	ldr	r2, [r3, #16]
2000253a:	1dfb      	adds	r3, r7, #7
2000253c:	781b      	ldrb	r3, [r3, #0]
2000253e:	43d9      	mvns	r1, r3
20002540:	4b03      	ldr	r3, [pc, #12]	; (20002550 <NVIC_SystemLPConfig+0x44>)
20002542:	400a      	ands	r2, r1
20002544:	611a      	str	r2, [r3, #16]
}
20002546:	46c0      	nop			; (mov r8, r8)
20002548:	46bd      	mov	sp, r7
2000254a:	b002      	add	sp, #8
2000254c:	bd80      	pop	{r7, pc}
2000254e:	46c0      	nop			; (mov r8, r8)
20002550:	e000ed00 	and	lr, r0, r0, lsl #26

20002554 <SysTick_CLKSourceConfig>:
  *     @arg SysTick_CLKSource_HCLK_Div8: AHB clock divided by 8 selected as SysTick clock source.
  *     @arg SysTick_CLKSource_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void SysTick_CLKSourceConfig(uint32_t SysTick_CLKSource)
{
20002554:	b580      	push	{r7, lr}
20002556:	b082      	sub	sp, #8
20002558:	af00      	add	r7, sp, #0
2000255a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(SysTick_CLKSource));
  if (SysTick_CLKSource == SysTick_CLKSource_HCLK)
2000255c:	687b      	ldr	r3, [r7, #4]
2000255e:	2b04      	cmp	r3, #4
20002560:	d106      	bne.n	20002570 <SysTick_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SysTick_CLKSource_HCLK;
20002562:	4b08      	ldr	r3, [pc, #32]	; (20002584 <SysTick_CLKSourceConfig+0x30>)
20002564:	681a      	ldr	r2, [r3, #0]
20002566:	4b07      	ldr	r3, [pc, #28]	; (20002584 <SysTick_CLKSourceConfig+0x30>)
20002568:	2104      	movs	r1, #4
2000256a:	430a      	orrs	r2, r1
2000256c:	601a      	str	r2, [r3, #0]
  }
  else
  {
    SysTick->CTRL &= SysTick_CLKSource_HCLK_Div8;
  }
}
2000256e:	e005      	b.n	2000257c <SysTick_CLKSourceConfig+0x28>
    SysTick->CTRL &= SysTick_CLKSource_HCLK_Div8;
20002570:	4b04      	ldr	r3, [pc, #16]	; (20002584 <SysTick_CLKSourceConfig+0x30>)
20002572:	681a      	ldr	r2, [r3, #0]
20002574:	4b03      	ldr	r3, [pc, #12]	; (20002584 <SysTick_CLKSourceConfig+0x30>)
20002576:	2104      	movs	r1, #4
20002578:	438a      	bics	r2, r1
2000257a:	601a      	str	r2, [r3, #0]
}
2000257c:	46c0      	nop			; (mov r8, r8)
2000257e:	46bd      	mov	sp, r7
20002580:	b002      	add	sp, #8
20002582:	bd80      	pop	{r7, pc}
20002584:	e000e010 	and	lr, r0, r0, lsl r0

20002588 <NVIC_SetPriority>:
{
20002588:	b580      	push	{r7, lr}
2000258a:	b082      	sub	sp, #8
2000258c:	af00      	add	r7, sp, #0
2000258e:	0002      	movs	r2, r0
20002590:	6039      	str	r1, [r7, #0]
20002592:	1dfb      	adds	r3, r7, #7
20002594:	701a      	strb	r2, [r3, #0]
  if((int32_t)IRQn < 0) {
20002596:	1dfb      	adds	r3, r7, #7
20002598:	781b      	ldrb	r3, [r3, #0]
2000259a:	2b7f      	cmp	r3, #127	; 0x7f
2000259c:	d90d      	bls.n	200025ba <NVIC_SetPriority+0x32>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
2000259e:	683b      	ldr	r3, [r7, #0]
200025a0:	b2da      	uxtb	r2, r3
200025a2:	490f      	ldr	r1, [pc, #60]	; (200025e0 <NVIC_SetPriority+0x58>)
200025a4:	1dfb      	adds	r3, r7, #7
200025a6:	781b      	ldrb	r3, [r3, #0]
200025a8:	0018      	movs	r0, r3
200025aa:	230f      	movs	r3, #15
200025ac:	4003      	ands	r3, r0
200025ae:	3b04      	subs	r3, #4
200025b0:	0112      	lsls	r2, r2, #4
200025b2:	b2d2      	uxtb	r2, r2
200025b4:	18cb      	adds	r3, r1, r3
200025b6:	761a      	strb	r2, [r3, #24]
}
200025b8:	e00d      	b.n	200025d6 <NVIC_SetPriority+0x4e>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
200025ba:	683b      	ldr	r3, [r7, #0]
200025bc:	b2db      	uxtb	r3, r3
200025be:	4909      	ldr	r1, [pc, #36]	; (200025e4 <NVIC_SetPriority+0x5c>)
200025c0:	1dfa      	adds	r2, r7, #7
200025c2:	7812      	ldrb	r2, [r2, #0]
200025c4:	b252      	sxtb	r2, r2
200025c6:	011b      	lsls	r3, r3, #4
200025c8:	b2d8      	uxtb	r0, r3
200025ca:	23c0      	movs	r3, #192	; 0xc0
200025cc:	009b      	lsls	r3, r3, #2
200025ce:	188a      	adds	r2, r1, r2
200025d0:	18d3      	adds	r3, r2, r3
200025d2:	1c02      	adds	r2, r0, #0
200025d4:	701a      	strb	r2, [r3, #0]
}
200025d6:	46c0      	nop			; (mov r8, r8)
200025d8:	46bd      	mov	sp, r7
200025da:	b002      	add	sp, #8
200025dc:	bd80      	pop	{r7, pc}
200025de:	46c0      	nop			; (mov r8, r8)
200025e0:	e000ed00 	and	lr, r0, r0, lsl #26
200025e4:	e000e100 	and	lr, r0, r0, lsl #2

200025e8 <SysTick_Config>:
    function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
200025e8:	b580      	push	{r7, lr}
200025ea:	b082      	sub	sp, #8
200025ec:	af00      	add	r7, sp, #0
200025ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk) { return (1UL); }    /* Reload value impossible */
200025f0:	687b      	ldr	r3, [r7, #4]
200025f2:	3b01      	subs	r3, #1
200025f4:	4a0c      	ldr	r2, [pc, #48]	; (20002628 <SysTick_Config+0x40>)
200025f6:	4293      	cmp	r3, r2
200025f8:	d901      	bls.n	200025fe <SysTick_Config+0x16>
200025fa:	2301      	movs	r3, #1
200025fc:	e010      	b.n	20002620 <SysTick_Config+0x38>

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
200025fe:	4b0b      	ldr	r3, [pc, #44]	; (2000262c <SysTick_Config+0x44>)
20002600:	687a      	ldr	r2, [r7, #4]
20002602:	3a01      	subs	r2, #1
20002604:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
20002606:	2301      	movs	r3, #1
20002608:	425b      	negs	r3, r3
2000260a:	210f      	movs	r1, #15
2000260c:	0018      	movs	r0, r3
2000260e:	f7ff ffbb 	bl	20002588 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
20002612:	4b06      	ldr	r3, [pc, #24]	; (2000262c <SysTick_Config+0x44>)
20002614:	2200      	movs	r2, #0
20002616:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
20002618:	4b04      	ldr	r3, [pc, #16]	; (2000262c <SysTick_Config+0x44>)
2000261a:	2207      	movs	r2, #7
2000261c:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
2000261e:	2300      	movs	r3, #0
}
20002620:	0018      	movs	r0, r3
20002622:	46bd      	mov	sp, r7
20002624:	b002      	add	sp, #8
20002626:	bd80      	pop	{r7, pc}
20002628:	00ffffff 	ldrshteq	pc, [pc], #255	; <UNPREDICTABLE>
2000262c:	e000e010 	and	lr, r0, r0, lsl r0

20002630 <RCC_DeInit>:
  *            - LSI, LSE and RTC clocks 
  * @param  None
  * @retval None
  */
void RCC_DeInit(void)
{
20002630:	b580      	push	{r7, lr}
20002632:	af00      	add	r7, sp, #0
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
20002634:	4b14      	ldr	r3, [pc, #80]	; (20002688 <RCC_DeInit+0x58>)
20002636:	681a      	ldr	r2, [r3, #0]
20002638:	4b13      	ldr	r3, [pc, #76]	; (20002688 <RCC_DeInit+0x58>)
2000263a:	2101      	movs	r1, #1
2000263c:	430a      	orrs	r2, r1
2000263e:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
20002640:	4b11      	ldr	r3, [pc, #68]	; (20002688 <RCC_DeInit+0x58>)
20002642:	2200      	movs	r2, #0
20002644:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON, PLLON, PLLI2S and PLLSAI(STM32F42xxx/43xxx/446xx/469xx/479xx devices) bits */
  RCC->CR &= (uint32_t)0xEAF6FFFF;
20002646:	4b10      	ldr	r3, [pc, #64]	; (20002688 <RCC_DeInit+0x58>)
20002648:	681a      	ldr	r2, [r3, #0]
2000264a:	4b0f      	ldr	r3, [pc, #60]	; (20002688 <RCC_DeInit+0x58>)
2000264c:	490f      	ldr	r1, [pc, #60]	; (2000268c <RCC_DeInit+0x5c>)
2000264e:	400a      	ands	r2, r1
20002650:	601a      	str	r2, [r3, #0]
  
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
20002652:	4b0d      	ldr	r3, [pc, #52]	; (20002688 <RCC_DeInit+0x58>)
20002654:	4a0e      	ldr	r2, [pc, #56]	; (20002690 <RCC_DeInit+0x60>)
20002656:	605a      	str	r2, [r3, #4]

#if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F401xx) || defined(STM32F411xE) || defined(STM32F446xx) || defined(STM32F413_423xx) || defined(STM32F469_479xx)  
  /* Reset PLLI2SCFGR register */
  RCC->PLLI2SCFGR = 0x20003000;
20002658:	4a0b      	ldr	r2, [pc, #44]	; (20002688 <RCC_DeInit+0x58>)
2000265a:	2384      	movs	r3, #132	; 0x84
2000265c:	490d      	ldr	r1, [pc, #52]	; (20002694 <RCC_DeInit+0x64>)
2000265e:	50d1      	str	r1, [r2, r3]
#endif /* STM32F40_41xxx || STM32F427_437xx || STM32F429_439xx || STM32F401xx || STM32F411xE || STM32F446xx || STM32F413_423xx || STM32F469_479xx */

#if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F446xx) || defined(STM32F469_479xx) 
  /* Reset PLLSAICFGR register, only available for STM32F42xxx/43xxx/446xx/469xx/479xx devices */
  RCC->PLLSAICFGR = 0x24003000;
20002660:	4a09      	ldr	r2, [pc, #36]	; (20002688 <RCC_DeInit+0x58>)
20002662:	2388      	movs	r3, #136	; 0x88
20002664:	490c      	ldr	r1, [pc, #48]	; (20002698 <RCC_DeInit+0x68>)
20002666:	50d1      	str	r1, [r2, r3]
#endif /* STM32F40_41xxx || STM32F427_437xx || STM32F429_439xx || STM32F446xx || STM32F469_479xx */
  
  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
20002668:	4b07      	ldr	r3, [pc, #28]	; (20002688 <RCC_DeInit+0x58>)
2000266a:	681a      	ldr	r2, [r3, #0]
2000266c:	4b06      	ldr	r3, [pc, #24]	; (20002688 <RCC_DeInit+0x58>)
2000266e:	490b      	ldr	r1, [pc, #44]	; (2000269c <RCC_DeInit+0x6c>)
20002670:	400a      	ands	r2, r1
20002672:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
20002674:	4b04      	ldr	r3, [pc, #16]	; (20002688 <RCC_DeInit+0x58>)
20002676:	2200      	movs	r2, #0
20002678:	60da      	str	r2, [r3, #12]

  /* Disable Timers clock prescalers selection, only available for STM32F42/43xxx and STM32F413_423xx devices */
  RCC->DCKCFGR = 0x00000000;
2000267a:	4a03      	ldr	r2, [pc, #12]	; (20002688 <RCC_DeInit+0x58>)
2000267c:	238c      	movs	r3, #140	; 0x8c
2000267e:	2100      	movs	r1, #0
20002680:	50d1      	str	r1, [r2, r3]
  
#if defined(STM32F410xx) || defined(STM32F413_423xx)
  /* Disable LPTIM and FMPI2C clock prescalers selection, only available for STM32F410xx and STM32F413_423xx devices */
  RCC->DCKCFGR2 = 0x00000000;
#endif /* STM32F410xx || STM32F413_423xx */  
}
20002682:	46c0      	nop			; (mov r8, r8)
20002684:	46bd      	mov	sp, r7
20002686:	bd80      	pop	{r7, pc}
20002688:	40023800 	andmi	r3, r2, r0, lsl #16
2000268c:	eaf6ffff 	b	1fdc2690 <startup-0x23d970>
20002690:	24003010 	strcs	r3, [r0], #-16
20002694:	20003000 	andcs	r3, r0, r0
20002698:	24003000 	strcs	r3, [r0], #-0
2000269c:	fffbffff 			; <UNDEFINED> instruction: 0xfffbffff

200026a0 <RCC_HSEConfig>:
  *            @arg RCC_HSE_ON: turn ON the HSE oscillator
  *            @arg RCC_HSE_Bypass: HSE oscillator bypassed with external clock
  * @retval None
  */
void RCC_HSEConfig(uint8_t RCC_HSE)
{
200026a0:	b580      	push	{r7, lr}
200026a2:	b082      	sub	sp, #8
200026a4:	af00      	add	r7, sp, #0
200026a6:	0002      	movs	r2, r0
200026a8:	1dfb      	adds	r3, r7, #7
200026aa:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_HSE(RCC_HSE));

  /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
  *(__IO uint8_t *) CR_BYTE3_ADDRESS = RCC_HSE_OFF;
200026ac:	4b05      	ldr	r3, [pc, #20]	; (200026c4 <RCC_HSEConfig+0x24>)
200026ae:	2200      	movs	r2, #0
200026b0:	701a      	strb	r2, [r3, #0]

  /* Set the new HSE configuration -------------------------------------------*/
  *(__IO uint8_t *) CR_BYTE3_ADDRESS = RCC_HSE;
200026b2:	4a04      	ldr	r2, [pc, #16]	; (200026c4 <RCC_HSEConfig+0x24>)
200026b4:	1dfb      	adds	r3, r7, #7
200026b6:	781b      	ldrb	r3, [r3, #0]
200026b8:	7013      	strb	r3, [r2, #0]
}
200026ba:	46c0      	nop			; (mov r8, r8)
200026bc:	46bd      	mov	sp, r7
200026be:	b002      	add	sp, #8
200026c0:	bd80      	pop	{r7, pc}
200026c2:	46c0      	nop			; (mov r8, r8)
200026c4:	40023802 	andmi	r3, r2, r2, lsl #16

200026c8 <RCC_WaitForHSEStartUp>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: HSE oscillator is stable and ready to use
  *          - ERROR: HSE oscillator not yet ready
  */
ErrorStatus RCC_WaitForHSEStartUp(void)
{
200026c8:	b590      	push	{r4, r7, lr}
200026ca:	b083      	sub	sp, #12
200026cc:	af00      	add	r7, sp, #0
  __IO uint32_t startupcounter = 0;
200026ce:	2300      	movs	r3, #0
200026d0:	603b      	str	r3, [r7, #0]
  ErrorStatus status = ERROR;
200026d2:	1dfb      	adds	r3, r7, #7
200026d4:	2200      	movs	r2, #0
200026d6:	701a      	strb	r2, [r3, #0]
  FlagStatus hsestatus = RESET;
200026d8:	1dbb      	adds	r3, r7, #6
200026da:	2200      	movs	r2, #0
200026dc:	701a      	strb	r2, [r3, #0]
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    hsestatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
200026de:	1dbc      	adds	r4, r7, #6
200026e0:	2031      	movs	r0, #49	; 0x31
200026e2:	f000 fd9b 	bl	2000321c <RCC_GetFlagStatus>
200026e6:	0003      	movs	r3, r0
200026e8:	7023      	strb	r3, [r4, #0]
    startupcounter++;
200026ea:	683b      	ldr	r3, [r7, #0]
200026ec:	3301      	adds	r3, #1
200026ee:	603b      	str	r3, [r7, #0]
  } while((startupcounter != HSE_STARTUP_TIMEOUT) && (hsestatus == RESET));
200026f0:	683a      	ldr	r2, [r7, #0]
200026f2:	23a0      	movs	r3, #160	; 0xa0
200026f4:	01db      	lsls	r3, r3, #7
200026f6:	429a      	cmp	r2, r3
200026f8:	d003      	beq.n	20002702 <RCC_WaitForHSEStartUp+0x3a>
200026fa:	1dbb      	adds	r3, r7, #6
200026fc:	781b      	ldrb	r3, [r3, #0]
200026fe:	2b00      	cmp	r3, #0
20002700:	d0ed      	beq.n	200026de <RCC_WaitForHSEStartUp+0x16>

  if (RCC_GetFlagStatus(RCC_FLAG_HSERDY) != RESET)
20002702:	2031      	movs	r0, #49	; 0x31
20002704:	f000 fd8a 	bl	2000321c <RCC_GetFlagStatus>
20002708:	1e03      	subs	r3, r0, #0
2000270a:	d003      	beq.n	20002714 <RCC_WaitForHSEStartUp+0x4c>
  {
    status = SUCCESS;
2000270c:	1dfb      	adds	r3, r7, #7
2000270e:	2201      	movs	r2, #1
20002710:	701a      	strb	r2, [r3, #0]
20002712:	e002      	b.n	2000271a <RCC_WaitForHSEStartUp+0x52>
  }
  else
  {
    status = ERROR;
20002714:	1dfb      	adds	r3, r7, #7
20002716:	2200      	movs	r2, #0
20002718:	701a      	strb	r2, [r3, #0]
  }
  return (status);
2000271a:	1dfb      	adds	r3, r7, #7
2000271c:	781b      	ldrb	r3, [r3, #0]
}
2000271e:	0018      	movs	r0, r3
20002720:	46bd      	mov	sp, r7
20002722:	b003      	add	sp, #12
20002724:	bd90      	pop	{r4, r7, pc}

20002726 <RCC_AdjustHSICalibrationValue>:
  * @param  HSICalibrationValue: specifies the calibration trimming value.
  *         This parameter must be a number between 0 and 0x1F.
  * @retval None
  */
void RCC_AdjustHSICalibrationValue(uint8_t HSICalibrationValue)
{
20002726:	b580      	push	{r7, lr}
20002728:	b084      	sub	sp, #16
2000272a:	af00      	add	r7, sp, #0
2000272c:	0002      	movs	r2, r0
2000272e:	1dfb      	adds	r3, r7, #7
20002730:	701a      	strb	r2, [r3, #0]
  uint32_t tmpreg = 0;
20002732:	2300      	movs	r3, #0
20002734:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_CALIBRATION_VALUE(HSICalibrationValue));

  tmpreg = RCC->CR;
20002736:	4b0a      	ldr	r3, [pc, #40]	; (20002760 <RCC_AdjustHSICalibrationValue+0x3a>)
20002738:	681b      	ldr	r3, [r3, #0]
2000273a:	60fb      	str	r3, [r7, #12]

  /* Clear HSITRIM[4:0] bits */
  tmpreg &= ~RCC_CR_HSITRIM;
2000273c:	68fb      	ldr	r3, [r7, #12]
2000273e:	22f8      	movs	r2, #248	; 0xf8
20002740:	4393      	bics	r3, r2
20002742:	60fb      	str	r3, [r7, #12]

  /* Set the HSITRIM[4:0] bits according to HSICalibrationValue value */
  tmpreg |= (uint32_t)HSICalibrationValue << 3;
20002744:	1dfb      	adds	r3, r7, #7
20002746:	781b      	ldrb	r3, [r3, #0]
20002748:	00db      	lsls	r3, r3, #3
2000274a:	68fa      	ldr	r2, [r7, #12]
2000274c:	4313      	orrs	r3, r2
2000274e:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CR = tmpreg;
20002750:	4b03      	ldr	r3, [pc, #12]	; (20002760 <RCC_AdjustHSICalibrationValue+0x3a>)
20002752:	68fa      	ldr	r2, [r7, #12]
20002754:	601a      	str	r2, [r3, #0]
}
20002756:	46c0      	nop			; (mov r8, r8)
20002758:	46bd      	mov	sp, r7
2000275a:	b004      	add	sp, #16
2000275c:	bd80      	pop	{r7, pc}
2000275e:	46c0      	nop			; (mov r8, r8)
20002760:	40023800 	andmi	r3, r2, r0, lsl #16

20002764 <RCC_HSICmd>:
  * @note   When the HSI is stopped, HSIRDY flag goes low after 6 HSI oscillator
  *         clock cycles.  
  * @retval None
  */
void RCC_HSICmd(FunctionalState NewState)
{
20002764:	b580      	push	{r7, lr}
20002766:	b082      	sub	sp, #8
20002768:	af00      	add	r7, sp, #0
2000276a:	0002      	movs	r2, r0
2000276c:	1dfb      	adds	r3, r7, #7
2000276e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CR_HSION_BB = (uint32_t)NewState;
20002770:	4b03      	ldr	r3, [pc, #12]	; (20002780 <RCC_HSICmd+0x1c>)
20002772:	1dfa      	adds	r2, r7, #7
20002774:	7812      	ldrb	r2, [r2, #0]
20002776:	601a      	str	r2, [r3, #0]
}
20002778:	46c0      	nop			; (mov r8, r8)
2000277a:	46bd      	mov	sp, r7
2000277c:	b002      	add	sp, #8
2000277e:	bd80      	pop	{r7, pc}
20002780:	42470000 	submi	r0, r7, #0

20002784 <RCC_LSEConfig>:
  *            @arg RCC_LSE_ON: turn ON the LSE oscillator
  *            @arg RCC_LSE_Bypass: LSE oscillator bypassed with external clock
  * @retval None
  */
void RCC_LSEConfig(uint8_t RCC_LSE)
{
20002784:	b580      	push	{r7, lr}
20002786:	b082      	sub	sp, #8
20002788:	af00      	add	r7, sp, #0
2000278a:	0002      	movs	r2, r0
2000278c:	1dfb      	adds	r3, r7, #7
2000278e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_LSE(RCC_LSE));

  /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
  /* Reset LSEON bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
20002790:	4b0c      	ldr	r3, [pc, #48]	; (200027c4 <RCC_LSEConfig+0x40>)
20002792:	2200      	movs	r2, #0
20002794:	701a      	strb	r2, [r3, #0]

  /* Reset LSEBYP bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
20002796:	4b0b      	ldr	r3, [pc, #44]	; (200027c4 <RCC_LSEConfig+0x40>)
20002798:	2200      	movs	r2, #0
2000279a:	701a      	strb	r2, [r3, #0]

  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch (RCC_LSE)
2000279c:	1dfb      	adds	r3, r7, #7
2000279e:	781b      	ldrb	r3, [r3, #0]
200027a0:	2b01      	cmp	r3, #1
200027a2:	d002      	beq.n	200027aa <RCC_LSEConfig+0x26>
200027a4:	2b04      	cmp	r3, #4
200027a6:	d004      	beq.n	200027b2 <RCC_LSEConfig+0x2e>
    case RCC_LSE_Bypass:
      /* Set LSEBYP and LSEON bits */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
      break;
    default:
      break;
200027a8:	e007      	b.n	200027ba <RCC_LSEConfig+0x36>
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_ON;
200027aa:	4b06      	ldr	r3, [pc, #24]	; (200027c4 <RCC_LSEConfig+0x40>)
200027ac:	2201      	movs	r2, #1
200027ae:	701a      	strb	r2, [r3, #0]
      break;
200027b0:	e003      	b.n	200027ba <RCC_LSEConfig+0x36>
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
200027b2:	4b04      	ldr	r3, [pc, #16]	; (200027c4 <RCC_LSEConfig+0x40>)
200027b4:	2205      	movs	r2, #5
200027b6:	701a      	strb	r2, [r3, #0]
      break;
200027b8:	46c0      	nop			; (mov r8, r8)
  }
}
200027ba:	46c0      	nop			; (mov r8, r8)
200027bc:	46bd      	mov	sp, r7
200027be:	b002      	add	sp, #8
200027c0:	bd80      	pop	{r7, pc}
200027c2:	46c0      	nop			; (mov r8, r8)
200027c4:	40023870 	andmi	r3, r2, r0, ror r8

200027c8 <RCC_LSICmd>:
  * @note   When the LSI is stopped, LSIRDY flag goes low after 6 LSI oscillator
  *         clock cycles. 
  * @retval None
  */
void RCC_LSICmd(FunctionalState NewState)
{
200027c8:	b580      	push	{r7, lr}
200027ca:	b082      	sub	sp, #8
200027cc:	af00      	add	r7, sp, #0
200027ce:	0002      	movs	r2, r0
200027d0:	1dfb      	adds	r3, r7, #7
200027d2:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CSR_LSION_BB = (uint32_t)NewState;
200027d4:	4b03      	ldr	r3, [pc, #12]	; (200027e4 <RCC_LSICmd+0x1c>)
200027d6:	1dfa      	adds	r2, r7, #7
200027d8:	7812      	ldrb	r2, [r2, #0]
200027da:	601a      	str	r2, [r3, #0]
}
200027dc:	46c0      	nop			; (mov r8, r8)
200027de:	46bd      	mov	sp, r7
200027e0:	b002      	add	sp, #8
200027e2:	bd80      	pop	{r7, pc}
200027e4:	42470e80 	submi	r0, r7, #128, 28	; 0x800

200027e8 <RCC_PLLConfig>:
  *         correctly.
  *   
  * @retval None
  */
void RCC_PLLConfig(uint32_t RCC_PLLSource, uint32_t PLLM, uint32_t PLLN, uint32_t PLLP, uint32_t PLLQ)
{
200027e8:	b580      	push	{r7, lr}
200027ea:	b084      	sub	sp, #16
200027ec:	af00      	add	r7, sp, #0
200027ee:	60f8      	str	r0, [r7, #12]
200027f0:	60b9      	str	r1, [r7, #8]
200027f2:	607a      	str	r2, [r7, #4]
200027f4:	603b      	str	r3, [r7, #0]
  assert_param(IS_RCC_PLLM_VALUE(PLLM));
  assert_param(IS_RCC_PLLN_VALUE(PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLP));
  assert_param(IS_RCC_PLLQ_VALUE(PLLQ));

  RCC->PLLCFGR = PLLM | (PLLN << 6) | (((PLLP >> 1) -1) << 16) | (RCC_PLLSource) |
200027f6:	687b      	ldr	r3, [r7, #4]
200027f8:	019a      	lsls	r2, r3, #6
200027fa:	68bb      	ldr	r3, [r7, #8]
200027fc:	431a      	orrs	r2, r3
200027fe:	683b      	ldr	r3, [r7, #0]
20002800:	085b      	lsrs	r3, r3, #1
20002802:	3b01      	subs	r3, #1
20002804:	041b      	lsls	r3, r3, #16
20002806:	431a      	orrs	r2, r3
20002808:	68fb      	ldr	r3, [r7, #12]
2000280a:	431a      	orrs	r2, r3
2000280c:	0011      	movs	r1, r2
                 (PLLQ << 24);
2000280e:	69bb      	ldr	r3, [r7, #24]
20002810:	061a      	lsls	r2, r3, #24
  RCC->PLLCFGR = PLLM | (PLLN << 6) | (((PLLP >> 1) -1) << 16) | (RCC_PLLSource) |
20002812:	4b03      	ldr	r3, [pc, #12]	; (20002820 <RCC_PLLConfig+0x38>)
20002814:	430a      	orrs	r2, r1
20002816:	605a      	str	r2, [r3, #4]
}
20002818:	46c0      	nop			; (mov r8, r8)
2000281a:	46bd      	mov	sp, r7
2000281c:	b004      	add	sp, #16
2000281e:	bd80      	pop	{r7, pc}
20002820:	40023800 	andmi	r3, r2, r0, lsl #16

20002824 <RCC_PLLCmd>:
  * @note   The main PLL is disabled by hardware when entering STOP and STANDBY modes.
  * @param  NewState: new state of the main PLL. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_PLLCmd(FunctionalState NewState)
{
20002824:	b580      	push	{r7, lr}
20002826:	b082      	sub	sp, #8
20002828:	af00      	add	r7, sp, #0
2000282a:	0002      	movs	r2, r0
2000282c:	1dfb      	adds	r3, r7, #7
2000282e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_PLLON_BB = (uint32_t)NewState;
20002830:	4b03      	ldr	r3, [pc, #12]	; (20002840 <RCC_PLLCmd+0x1c>)
20002832:	1dfa      	adds	r2, r7, #7
20002834:	7812      	ldrb	r2, [r2, #0]
20002836:	601a      	str	r2, [r3, #0]
}
20002838:	46c0      	nop			; (mov r8, r8)
2000283a:	46bd      	mov	sp, r7
2000283c:	b002      	add	sp, #8
2000283e:	bd80      	pop	{r7, pc}
20002840:	42470060 	submi	r0, r7, #96	; 0x60

20002844 <RCC_PLLI2SConfig>:
  *         on the I2S clock frequency.
  *   
  * @retval None
  */
void RCC_PLLI2SConfig(uint32_t PLLI2SN, uint32_t PLLI2SR)
{
20002844:	b580      	push	{r7, lr}
20002846:	b082      	sub	sp, #8
20002848:	af00      	add	r7, sp, #0
2000284a:	6078      	str	r0, [r7, #4]
2000284c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RCC_PLLI2SN_VALUE(PLLI2SN));
  assert_param(IS_RCC_PLLI2SR_VALUE(PLLI2SR));

  RCC->PLLI2SCFGR = (PLLI2SN << 6) | (PLLI2SR << 28);
2000284e:	687b      	ldr	r3, [r7, #4]
20002850:	019a      	lsls	r2, r3, #6
20002852:	683b      	ldr	r3, [r7, #0]
20002854:	071b      	lsls	r3, r3, #28
20002856:	4904      	ldr	r1, [pc, #16]	; (20002868 <RCC_PLLI2SConfig+0x24>)
20002858:	4313      	orrs	r3, r2
2000285a:	2284      	movs	r2, #132	; 0x84
2000285c:	508b      	str	r3, [r1, r2]
}
2000285e:	46c0      	nop			; (mov r8, r8)
20002860:	46bd      	mov	sp, r7
20002862:	b002      	add	sp, #8
20002864:	bd80      	pop	{r7, pc}
20002866:	46c0      	nop			; (mov r8, r8)
20002868:	40023800 	andmi	r3, r2, r0, lsl #16

2000286c <RCC_PLLI2SCmd>:
  * @note   The PLLI2S is disabled by hardware when entering STOP and STANDBY modes.  
  * @param  NewState: new state of the PLLI2S. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_PLLI2SCmd(FunctionalState NewState)
{
2000286c:	b580      	push	{r7, lr}
2000286e:	b082      	sub	sp, #8
20002870:	af00      	add	r7, sp, #0
20002872:	0002      	movs	r2, r0
20002874:	1dfb      	adds	r3, r7, #7
20002876:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_PLLI2SON_BB = (uint32_t)NewState;
20002878:	4b03      	ldr	r3, [pc, #12]	; (20002888 <RCC_PLLI2SCmd+0x1c>)
2000287a:	1dfa      	adds	r2, r7, #7
2000287c:	7812      	ldrb	r2, [r2, #0]
2000287e:	601a      	str	r2, [r3, #0]
}
20002880:	46c0      	nop			; (mov r8, r8)
20002882:	46bd      	mov	sp, r7
20002884:	b002      	add	sp, #8
20002886:	bd80      	pop	{r7, pc}
20002888:	42470068 	submi	r0, r7, #104	; 0x68

2000288c <RCC_PLLSAIConfig>:
  *          This parameter must be a number between 2 and 7.
  *   
  * @retval None
  */
void RCC_PLLSAIConfig(uint32_t PLLSAIN, uint32_t PLLSAIQ, uint32_t PLLSAIR)
{
2000288c:	b580      	push	{r7, lr}
2000288e:	b084      	sub	sp, #16
20002890:	af00      	add	r7, sp, #0
20002892:	60f8      	str	r0, [r7, #12]
20002894:	60b9      	str	r1, [r7, #8]
20002896:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_PLLSAIN_VALUE(PLLSAIN));
  assert_param(IS_RCC_PLLSAIR_VALUE(PLLSAIR));
  assert_param(IS_RCC_PLLSAIQ_VALUE(PLLSAIQ));
  
  RCC->PLLSAICFGR = (PLLSAIN << 6) | (PLLSAIQ << 24) | (PLLSAIR << 28);
20002898:	68fb      	ldr	r3, [r7, #12]
2000289a:	019a      	lsls	r2, r3, #6
2000289c:	68bb      	ldr	r3, [r7, #8]
2000289e:	061b      	lsls	r3, r3, #24
200028a0:	431a      	orrs	r2, r3
200028a2:	687b      	ldr	r3, [r7, #4]
200028a4:	071b      	lsls	r3, r3, #28
200028a6:	4904      	ldr	r1, [pc, #16]	; (200028b8 <RCC_PLLSAIConfig+0x2c>)
200028a8:	4313      	orrs	r3, r2
200028aa:	2288      	movs	r2, #136	; 0x88
200028ac:	508b      	str	r3, [r1, r2]
}
200028ae:	46c0      	nop			; (mov r8, r8)
200028b0:	46bd      	mov	sp, r7
200028b2:	b004      	add	sp, #16
200028b4:	bd80      	pop	{r7, pc}
200028b6:	46c0      	nop			; (mov r8, r8)
200028b8:	40023800 	andmi	r3, r2, r0, lsl #16

200028bc <RCC_PLLSAICmd>:
  * @note   The PLLSAI is disabled by hardware when entering STOP and STANDBY modes.  
  * @param  NewState: new state of the PLLSAI. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_PLLSAICmd(FunctionalState NewState)
{
200028bc:	b580      	push	{r7, lr}
200028be:	b082      	sub	sp, #8
200028c0:	af00      	add	r7, sp, #0
200028c2:	0002      	movs	r2, r0
200028c4:	1dfb      	adds	r3, r7, #7
200028c6:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_PLLSAION_BB = (uint32_t)NewState;
200028c8:	4b03      	ldr	r3, [pc, #12]	; (200028d8 <RCC_PLLSAICmd+0x1c>)
200028ca:	1dfa      	adds	r2, r7, #7
200028cc:	7812      	ldrb	r2, [r2, #0]
200028ce:	601a      	str	r2, [r3, #0]
}
200028d0:	46c0      	nop			; (mov r8, r8)
200028d2:	46bd      	mov	sp, r7
200028d4:	b002      	add	sp, #8
200028d6:	bd80      	pop	{r7, pc}
200028d8:	42470070 	submi	r0, r7, #112	; 0x70

200028dc <RCC_ClockSecuritySystemCmd>:
  * @param  NewState: new state of the Clock Security System.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_ClockSecuritySystemCmd(FunctionalState NewState)
{
200028dc:	b580      	push	{r7, lr}
200028de:	b082      	sub	sp, #8
200028e0:	af00      	add	r7, sp, #0
200028e2:	0002      	movs	r2, r0
200028e4:	1dfb      	adds	r3, r7, #7
200028e6:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_CSSON_BB = (uint32_t)NewState;
200028e8:	4b03      	ldr	r3, [pc, #12]	; (200028f8 <RCC_ClockSecuritySystemCmd+0x1c>)
200028ea:	1dfa      	adds	r2, r7, #7
200028ec:	7812      	ldrb	r2, [r2, #0]
200028ee:	601a      	str	r2, [r3, #0]
}
200028f0:	46c0      	nop			; (mov r8, r8)
200028f2:	46bd      	mov	sp, r7
200028f4:	b002      	add	sp, #8
200028f6:	bd80      	pop	{r7, pc}
200028f8:	4247004c 	submi	r0, r7, #76	; 0x4c

200028fc <RCC_MCO1Config>:
  *            @arg RCC_MCO1Div_4: division by 4 applied to MCO1 clock
  *            @arg RCC_MCO1Div_5: division by 5 applied to MCO1 clock
  * @retval None
  */
void RCC_MCO1Config(uint32_t RCC_MCO1Source, uint32_t RCC_MCO1Div)
{
200028fc:	b580      	push	{r7, lr}
200028fe:	b084      	sub	sp, #16
20002900:	af00      	add	r7, sp, #0
20002902:	6078      	str	r0, [r7, #4]
20002904:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
20002906:	2300      	movs	r3, #0
20002908:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_MCO1SOURCE(RCC_MCO1Source));
  assert_param(IS_RCC_MCO1DIV(RCC_MCO1Div));  

  tmpreg = RCC->CFGR;
2000290a:	4b0a      	ldr	r3, [pc, #40]	; (20002934 <RCC_MCO1Config+0x38>)
2000290c:	689b      	ldr	r3, [r3, #8]
2000290e:	60fb      	str	r3, [r7, #12]

  /* Clear MCO1[1:0] and MCO1PRE[2:0] bits */
  tmpreg &= CFGR_MCO1_RESET_MASK;
20002910:	68fb      	ldr	r3, [r7, #12]
20002912:	4a09      	ldr	r2, [pc, #36]	; (20002938 <RCC_MCO1Config+0x3c>)
20002914:	4013      	ands	r3, r2
20002916:	60fb      	str	r3, [r7, #12]

  /* Select MCO1 clock source and prescaler */
  tmpreg |= RCC_MCO1Source | RCC_MCO1Div;
20002918:	687a      	ldr	r2, [r7, #4]
2000291a:	683b      	ldr	r3, [r7, #0]
2000291c:	4313      	orrs	r3, r2
2000291e:	68fa      	ldr	r2, [r7, #12]
20002920:	4313      	orrs	r3, r2
20002922:	60fb      	str	r3, [r7, #12]
  
  /* Store the new value */
  RCC->CFGR = tmpreg;
20002924:	4b03      	ldr	r3, [pc, #12]	; (20002934 <RCC_MCO1Config+0x38>)
20002926:	68fa      	ldr	r2, [r7, #12]
20002928:	609a      	str	r2, [r3, #8]

#if defined(STM32F410xx)
  RCC_MCO1Cmd(ENABLE);
#endif /* STM32F410xx */   
}
2000292a:	46c0      	nop			; (mov r8, r8)
2000292c:	46bd      	mov	sp, r7
2000292e:	b004      	add	sp, #16
20002930:	bd80      	pop	{r7, pc}
20002932:	46c0      	nop			; (mov r8, r8)
20002934:	40023800 	andmi	r3, r2, r0, lsl #16
20002938:	f89fffff 			; <UNDEFINED> instruction: 0xf89fffff

2000293c <RCC_MCO2Config>:
  * @note  For STM32F410xx devices to output I2SCLK clock on MCO2 you should have
  *        at last one of the SPI clocks enabled (SPI1, SPI2 or SPI5).
  * @retval None
  */
void RCC_MCO2Config(uint32_t RCC_MCO2Source, uint32_t RCC_MCO2Div)
{
2000293c:	b580      	push	{r7, lr}
2000293e:	b084      	sub	sp, #16
20002940:	af00      	add	r7, sp, #0
20002942:	6078      	str	r0, [r7, #4]
20002944:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
20002946:	2300      	movs	r3, #0
20002948:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_MCO2SOURCE(RCC_MCO2Source));
  assert_param(IS_RCC_MCO2DIV(RCC_MCO2Div));
  
  tmpreg = RCC->CFGR;
2000294a:	4b0a      	ldr	r3, [pc, #40]	; (20002974 <RCC_MCO2Config+0x38>)
2000294c:	689b      	ldr	r3, [r3, #8]
2000294e:	60fb      	str	r3, [r7, #12]
  
  /* Clear MCO2 and MCO2PRE[2:0] bits */
  tmpreg &= CFGR_MCO2_RESET_MASK;
20002950:	68fb      	ldr	r3, [r7, #12]
20002952:	015b      	lsls	r3, r3, #5
20002954:	095b      	lsrs	r3, r3, #5
20002956:	60fb      	str	r3, [r7, #12]

  /* Select MCO2 clock source and prescaler */
  tmpreg |= RCC_MCO2Source | RCC_MCO2Div;
20002958:	687a      	ldr	r2, [r7, #4]
2000295a:	683b      	ldr	r3, [r7, #0]
2000295c:	4313      	orrs	r3, r2
2000295e:	68fa      	ldr	r2, [r7, #12]
20002960:	4313      	orrs	r3, r2
20002962:	60fb      	str	r3, [r7, #12]
  
  /* Store the new value */
  RCC->CFGR = tmpreg;
20002964:	4b03      	ldr	r3, [pc, #12]	; (20002974 <RCC_MCO2Config+0x38>)
20002966:	68fa      	ldr	r2, [r7, #12]
20002968:	609a      	str	r2, [r3, #8]

#if defined(STM32F410xx)
  RCC_MCO2Cmd(ENABLE);
#endif /* STM32F410xx */   
}
2000296a:	46c0      	nop			; (mov r8, r8)
2000296c:	46bd      	mov	sp, r7
2000296e:	b004      	add	sp, #16
20002970:	bd80      	pop	{r7, pc}
20002972:	46c0      	nop			; (mov r8, r8)
20002974:	40023800 	andmi	r3, r2, r0, lsl #16

20002978 <RCC_SYSCLKConfig>:
  *            @arg RCC_SYSCLKSource_PLLCLK: PLL selected as system clock source (RCC_SYSCLKSource_PLLPCLK for STM32F446xx devices)
  *            @arg RCC_SYSCLKSource_PLLRCLK: PLL R selected as system clock source only for STM32F412xG, STM32F413_423xx and STM32F446xx devices
  * @retval None
  */
void RCC_SYSCLKConfig(uint32_t RCC_SYSCLKSource)
{
20002978:	b580      	push	{r7, lr}
2000297a:	b084      	sub	sp, #16
2000297c:	af00      	add	r7, sp, #0
2000297e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
20002980:	2300      	movs	r3, #0
20002982:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_SYSCLK_SOURCE(RCC_SYSCLKSource));

  tmpreg = RCC->CFGR;
20002984:	4b08      	ldr	r3, [pc, #32]	; (200029a8 <RCC_SYSCLKConfig+0x30>)
20002986:	689b      	ldr	r3, [r3, #8]
20002988:	60fb      	str	r3, [r7, #12]

  /* Clear SW[1:0] bits */
  tmpreg &= ~RCC_CFGR_SW;
2000298a:	68fb      	ldr	r3, [r7, #12]
2000298c:	2203      	movs	r2, #3
2000298e:	4393      	bics	r3, r2
20002990:	60fb      	str	r3, [r7, #12]

  /* Set SW[1:0] bits according to RCC_SYSCLKSource value */
  tmpreg |= RCC_SYSCLKSource;
20002992:	68fa      	ldr	r2, [r7, #12]
20002994:	687b      	ldr	r3, [r7, #4]
20002996:	4313      	orrs	r3, r2
20002998:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;
2000299a:	4b03      	ldr	r3, [pc, #12]	; (200029a8 <RCC_SYSCLKConfig+0x30>)
2000299c:	68fa      	ldr	r2, [r7, #12]
2000299e:	609a      	str	r2, [r3, #8]
}
200029a0:	46c0      	nop			; (mov r8, r8)
200029a2:	46bd      	mov	sp, r7
200029a4:	b004      	add	sp, #16
200029a6:	bd80      	pop	{r7, pc}
200029a8:	40023800 	andmi	r3, r2, r0, lsl #16

200029ac <RCC_GetSYSCLKSource>:
  *              - 0x04: HSE used as system clock
  *              - 0x08: PLL used as system clock (PLL P for STM32F446xx devices)
  *              - 0x0C: PLL R used as system clock (only for STM32F412xG, STM32F413_423xx and STM32F446xx devices)
  */
uint8_t RCC_GetSYSCLKSource(void)
{
200029ac:	b580      	push	{r7, lr}
200029ae:	af00      	add	r7, sp, #0
  return ((uint8_t)(RCC->CFGR & RCC_CFGR_SWS));
200029b0:	4b04      	ldr	r3, [pc, #16]	; (200029c4 <RCC_GetSYSCLKSource+0x18>)
200029b2:	689b      	ldr	r3, [r3, #8]
200029b4:	b2db      	uxtb	r3, r3
200029b6:	220c      	movs	r2, #12
200029b8:	4013      	ands	r3, r2
200029ba:	b2db      	uxtb	r3, r3
}
200029bc:	0018      	movs	r0, r3
200029be:	46bd      	mov	sp, r7
200029c0:	bd80      	pop	{r7, pc}
200029c2:	46c0      	nop			; (mov r8, r8)
200029c4:	40023800 	andmi	r3, r2, r0, lsl #16

200029c8 <RCC_HCLKConfig>:
  *            @arg RCC_SYSCLK_Div256: AHB clock = SYSCLK/256
  *            @arg RCC_SYSCLK_Div512: AHB clock = SYSCLK/512
  * @retval None
  */
void RCC_HCLKConfig(uint32_t RCC_SYSCLK)
{
200029c8:	b580      	push	{r7, lr}
200029ca:	b084      	sub	sp, #16
200029cc:	af00      	add	r7, sp, #0
200029ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
200029d0:	2300      	movs	r3, #0
200029d2:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_HCLK(RCC_SYSCLK));

  tmpreg = RCC->CFGR;
200029d4:	4b08      	ldr	r3, [pc, #32]	; (200029f8 <RCC_HCLKConfig+0x30>)
200029d6:	689b      	ldr	r3, [r3, #8]
200029d8:	60fb      	str	r3, [r7, #12]

  /* Clear HPRE[3:0] bits */
  tmpreg &= ~RCC_CFGR_HPRE;
200029da:	68fb      	ldr	r3, [r7, #12]
200029dc:	22f0      	movs	r2, #240	; 0xf0
200029de:	4393      	bics	r3, r2
200029e0:	60fb      	str	r3, [r7, #12]

  /* Set HPRE[3:0] bits according to RCC_SYSCLK value */
  tmpreg |= RCC_SYSCLK;
200029e2:	68fa      	ldr	r2, [r7, #12]
200029e4:	687b      	ldr	r3, [r7, #4]
200029e6:	4313      	orrs	r3, r2
200029e8:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;
200029ea:	4b03      	ldr	r3, [pc, #12]	; (200029f8 <RCC_HCLKConfig+0x30>)
200029ec:	68fa      	ldr	r2, [r7, #12]
200029ee:	609a      	str	r2, [r3, #8]
}
200029f0:	46c0      	nop			; (mov r8, r8)
200029f2:	46bd      	mov	sp, r7
200029f4:	b004      	add	sp, #16
200029f6:	bd80      	pop	{r7, pc}
200029f8:	40023800 	andmi	r3, r2, r0, lsl #16

200029fc <RCC_PCLK1Config>:
  *            @arg RCC_HCLK_Div8:  APB1 clock = HCLK/8
  *            @arg RCC_HCLK_Div16: APB1 clock = HCLK/16
  * @retval None
  */
void RCC_PCLK1Config(uint32_t RCC_HCLK)
{
200029fc:	b580      	push	{r7, lr}
200029fe:	b084      	sub	sp, #16
20002a00:	af00      	add	r7, sp, #0
20002a02:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
20002a04:	2300      	movs	r3, #0
20002a06:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));

  tmpreg = RCC->CFGR;
20002a08:	4b08      	ldr	r3, [pc, #32]	; (20002a2c <RCC_PCLK1Config+0x30>)
20002a0a:	689b      	ldr	r3, [r3, #8]
20002a0c:	60fb      	str	r3, [r7, #12]

  /* Clear PPRE1[2:0] bits */
  tmpreg &= ~RCC_CFGR_PPRE1;
20002a0e:	68fb      	ldr	r3, [r7, #12]
20002a10:	4a07      	ldr	r2, [pc, #28]	; (20002a30 <RCC_PCLK1Config+0x34>)
20002a12:	4013      	ands	r3, r2
20002a14:	60fb      	str	r3, [r7, #12]

  /* Set PPRE1[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK;
20002a16:	68fa      	ldr	r2, [r7, #12]
20002a18:	687b      	ldr	r3, [r7, #4]
20002a1a:	4313      	orrs	r3, r2
20002a1c:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;
20002a1e:	4b03      	ldr	r3, [pc, #12]	; (20002a2c <RCC_PCLK1Config+0x30>)
20002a20:	68fa      	ldr	r2, [r7, #12]
20002a22:	609a      	str	r2, [r3, #8]
}
20002a24:	46c0      	nop			; (mov r8, r8)
20002a26:	46bd      	mov	sp, r7
20002a28:	b004      	add	sp, #16
20002a2a:	bd80      	pop	{r7, pc}
20002a2c:	40023800 	andmi	r3, r2, r0, lsl #16
20002a30:	ffffe3ff 			; <UNDEFINED> instruction: 0xffffe3ff

20002a34 <RCC_PCLK2Config>:
  *            @arg RCC_HCLK_Div8:  APB2 clock = HCLK/8
  *            @arg RCC_HCLK_Div16: APB2 clock = HCLK/16
  * @retval None
  */
void RCC_PCLK2Config(uint32_t RCC_HCLK)
{
20002a34:	b580      	push	{r7, lr}
20002a36:	b084      	sub	sp, #16
20002a38:	af00      	add	r7, sp, #0
20002a3a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
20002a3c:	2300      	movs	r3, #0
20002a3e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));

  tmpreg = RCC->CFGR;
20002a40:	4b09      	ldr	r3, [pc, #36]	; (20002a68 <RCC_PCLK2Config+0x34>)
20002a42:	689b      	ldr	r3, [r3, #8]
20002a44:	60fb      	str	r3, [r7, #12]

  /* Clear PPRE2[2:0] bits */
  tmpreg &= ~RCC_CFGR_PPRE2;
20002a46:	68fb      	ldr	r3, [r7, #12]
20002a48:	4a08      	ldr	r2, [pc, #32]	; (20002a6c <RCC_PCLK2Config+0x38>)
20002a4a:	4013      	ands	r3, r2
20002a4c:	60fb      	str	r3, [r7, #12]

  /* Set PPRE2[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK << 3;
20002a4e:	687b      	ldr	r3, [r7, #4]
20002a50:	00db      	lsls	r3, r3, #3
20002a52:	68fa      	ldr	r2, [r7, #12]
20002a54:	4313      	orrs	r3, r2
20002a56:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;
20002a58:	4b03      	ldr	r3, [pc, #12]	; (20002a68 <RCC_PCLK2Config+0x34>)
20002a5a:	68fa      	ldr	r2, [r7, #12]
20002a5c:	609a      	str	r2, [r3, #8]
}
20002a5e:	46c0      	nop			; (mov r8, r8)
20002a60:	46bd      	mov	sp, r7
20002a62:	b004      	add	sp, #16
20002a64:	bd80      	pop	{r7, pc}
20002a66:	46c0      	nop			; (mov r8, r8)
20002a68:	40023800 	andmi	r3, r2, r0, lsl #16
20002a6c:	ffff1fff 			; <UNDEFINED> instruction: 0xffff1fff

20002a70 <RCC_GetClocksFreq>:
  *         configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
20002a70:	b580      	push	{r7, lr}
20002a72:	b088      	sub	sp, #32
20002a74:	af00      	add	r7, sp, #0
20002a76:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
20002a78:	2300      	movs	r3, #0
20002a7a:	61bb      	str	r3, [r7, #24]
20002a7c:	2300      	movs	r3, #0
20002a7e:	617b      	str	r3, [r7, #20]
20002a80:	2300      	movs	r3, #0
20002a82:	61fb      	str	r3, [r7, #28]
20002a84:	2302      	movs	r3, #2
20002a86:	613b      	str	r3, [r7, #16]
20002a88:	2300      	movs	r3, #0
20002a8a:	60fb      	str	r3, [r7, #12]
20002a8c:	2302      	movs	r3, #2
20002a8e:	60bb      	str	r3, [r7, #8]
#if defined(STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F446xx)  
  uint32_t pllr = 2;
#endif /* STM32F412xG || STM32F413_423xx || STM32F446xx */
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
20002a90:	4b49      	ldr	r3, [pc, #292]	; (20002bb8 <RCC_GetClocksFreq+0x148>)
20002a92:	689b      	ldr	r3, [r3, #8]
20002a94:	220c      	movs	r2, #12
20002a96:	4013      	ands	r3, r2
20002a98:	61bb      	str	r3, [r7, #24]
  
  switch (tmp)
20002a9a:	69bb      	ldr	r3, [r7, #24]
20002a9c:	2b04      	cmp	r3, #4
20002a9e:	d007      	beq.n	20002ab0 <RCC_GetClocksFreq+0x40>
20002aa0:	2b08      	cmp	r3, #8
20002aa2:	d009      	beq.n	20002ab8 <RCC_GetClocksFreq+0x48>
20002aa4:	2b00      	cmp	r3, #0
20002aa6:	d141      	bne.n	20002b2c <RCC_GetClocksFreq+0xbc>
  {
  case 0x00:  /* HSI used as system clock source */
    RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
20002aa8:	687b      	ldr	r3, [r7, #4]
20002aaa:	4a44      	ldr	r2, [pc, #272]	; (20002bbc <RCC_GetClocksFreq+0x14c>)
20002aac:	601a      	str	r2, [r3, #0]
    break;
20002aae:	e041      	b.n	20002b34 <RCC_GetClocksFreq+0xc4>
  case 0x04:  /* HSE used as system clock  source */
    RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
20002ab0:	687b      	ldr	r3, [r7, #4]
20002ab2:	4a43      	ldr	r2, [pc, #268]	; (20002bc0 <RCC_GetClocksFreq+0x150>)
20002ab4:	601a      	str	r2, [r3, #0]
    break;
20002ab6:	e03d      	b.n	20002b34 <RCC_GetClocksFreq+0xc4>
  case 0x08:  /* PLL P used as system clock  source */
    
    /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLP
    */    
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
20002ab8:	4b3f      	ldr	r3, [pc, #252]	; (20002bb8 <RCC_GetClocksFreq+0x148>)
20002aba:	685b      	ldr	r3, [r3, #4]
20002abc:	0d9b      	lsrs	r3, r3, #22
20002abe:	2201      	movs	r2, #1
20002ac0:	4013      	ands	r3, r2
20002ac2:	60fb      	str	r3, [r7, #12]
    pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
20002ac4:	4b3c      	ldr	r3, [pc, #240]	; (20002bb8 <RCC_GetClocksFreq+0x148>)
20002ac6:	685b      	ldr	r3, [r3, #4]
20002ac8:	223f      	movs	r2, #63	; 0x3f
20002aca:	4013      	ands	r3, r2
20002acc:	60bb      	str	r3, [r7, #8]
    
    if (pllsource != 0)
20002ace:	68fb      	ldr	r3, [r7, #12]
20002ad0:	2b00      	cmp	r3, #0
20002ad2:	d00d      	beq.n	20002af0 <RCC_GetClocksFreq+0x80>
    {
      /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
20002ad4:	68b9      	ldr	r1, [r7, #8]
20002ad6:	483a      	ldr	r0, [pc, #232]	; (20002bc0 <RCC_GetClocksFreq+0x150>)
20002ad8:	f001 f940 	bl	20003d5c <__udivsi3>
20002adc:	0003      	movs	r3, r0
20002ade:	001a      	movs	r2, r3
20002ae0:	4b35      	ldr	r3, [pc, #212]	; (20002bb8 <RCC_GetClocksFreq+0x148>)
20002ae2:	685b      	ldr	r3, [r3, #4]
20002ae4:	099b      	lsrs	r3, r3, #6
20002ae6:	05db      	lsls	r3, r3, #23
20002ae8:	0ddb      	lsrs	r3, r3, #23
20002aea:	4353      	muls	r3, r2
20002aec:	61fb      	str	r3, [r7, #28]
20002aee:	e00c      	b.n	20002b0a <RCC_GetClocksFreq+0x9a>
    }
    else
    {
      /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
20002af0:	68b9      	ldr	r1, [r7, #8]
20002af2:	4832      	ldr	r0, [pc, #200]	; (20002bbc <RCC_GetClocksFreq+0x14c>)
20002af4:	f001 f932 	bl	20003d5c <__udivsi3>
20002af8:	0003      	movs	r3, r0
20002afa:	001a      	movs	r2, r3
20002afc:	4b2e      	ldr	r3, [pc, #184]	; (20002bb8 <RCC_GetClocksFreq+0x148>)
20002afe:	685b      	ldr	r3, [r3, #4]
20002b00:	099b      	lsrs	r3, r3, #6
20002b02:	05db      	lsls	r3, r3, #23
20002b04:	0ddb      	lsrs	r3, r3, #23
20002b06:	4353      	muls	r3, r2
20002b08:	61fb      	str	r3, [r7, #28]
    }
    
    pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
20002b0a:	4b2b      	ldr	r3, [pc, #172]	; (20002bb8 <RCC_GetClocksFreq+0x148>)
20002b0c:	685b      	ldr	r3, [r3, #4]
20002b0e:	0c1b      	lsrs	r3, r3, #16
20002b10:	2203      	movs	r2, #3
20002b12:	4013      	ands	r3, r2
20002b14:	3301      	adds	r3, #1
20002b16:	005b      	lsls	r3, r3, #1
20002b18:	613b      	str	r3, [r7, #16]
    RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
20002b1a:	6939      	ldr	r1, [r7, #16]
20002b1c:	69f8      	ldr	r0, [r7, #28]
20002b1e:	f001 f91d 	bl	20003d5c <__udivsi3>
20002b22:	0003      	movs	r3, r0
20002b24:	001a      	movs	r2, r3
20002b26:	687b      	ldr	r3, [r7, #4]
20002b28:	601a      	str	r2, [r3, #0]
    break;
20002b2a:	e003      	b.n	20002b34 <RCC_GetClocksFreq+0xc4>
    RCC_Clocks->SYSCLK_Frequency = pllvco/pllr;    
    break;
#endif /* STM32F412xG || STM32F413_423xx || STM32F446xx */
    
  default:
    RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
20002b2c:	687b      	ldr	r3, [r7, #4]
20002b2e:	4a23      	ldr	r2, [pc, #140]	; (20002bbc <RCC_GetClocksFreq+0x14c>)
20002b30:	601a      	str	r2, [r3, #0]
    break;
20002b32:	46c0      	nop			; (mov r8, r8)
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/
  
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
20002b34:	4b20      	ldr	r3, [pc, #128]	; (20002bb8 <RCC_GetClocksFreq+0x148>)
20002b36:	689b      	ldr	r3, [r3, #8]
20002b38:	22f0      	movs	r2, #240	; 0xf0
20002b3a:	4013      	ands	r3, r2
20002b3c:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 4;
20002b3e:	69bb      	ldr	r3, [r7, #24]
20002b40:	091b      	lsrs	r3, r3, #4
20002b42:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
20002b44:	4a1f      	ldr	r2, [pc, #124]	; (20002bc4 <RCC_GetClocksFreq+0x154>)
20002b46:	69bb      	ldr	r3, [r7, #24]
20002b48:	18d3      	adds	r3, r2, r3
20002b4a:	781b      	ldrb	r3, [r3, #0]
20002b4c:	b2db      	uxtb	r3, r3
20002b4e:	617b      	str	r3, [r7, #20]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
20002b50:	687b      	ldr	r3, [r7, #4]
20002b52:	681a      	ldr	r2, [r3, #0]
20002b54:	697b      	ldr	r3, [r7, #20]
20002b56:	40da      	lsrs	r2, r3
20002b58:	687b      	ldr	r3, [r7, #4]
20002b5a:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
20002b5c:	4b16      	ldr	r3, [pc, #88]	; (20002bb8 <RCC_GetClocksFreq+0x148>)
20002b5e:	689a      	ldr	r2, [r3, #8]
20002b60:	23e0      	movs	r3, #224	; 0xe0
20002b62:	015b      	lsls	r3, r3, #5
20002b64:	4013      	ands	r3, r2
20002b66:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 10;
20002b68:	69bb      	ldr	r3, [r7, #24]
20002b6a:	0a9b      	lsrs	r3, r3, #10
20002b6c:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
20002b6e:	4a15      	ldr	r2, [pc, #84]	; (20002bc4 <RCC_GetClocksFreq+0x154>)
20002b70:	69bb      	ldr	r3, [r7, #24]
20002b72:	18d3      	adds	r3, r2, r3
20002b74:	781b      	ldrb	r3, [r3, #0]
20002b76:	b2db      	uxtb	r3, r3
20002b78:	617b      	str	r3, [r7, #20]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
20002b7a:	687b      	ldr	r3, [r7, #4]
20002b7c:	685a      	ldr	r2, [r3, #4]
20002b7e:	697b      	ldr	r3, [r7, #20]
20002b80:	40da      	lsrs	r2, r3
20002b82:	687b      	ldr	r3, [r7, #4]
20002b84:	609a      	str	r2, [r3, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
20002b86:	4b0c      	ldr	r3, [pc, #48]	; (20002bb8 <RCC_GetClocksFreq+0x148>)
20002b88:	689a      	ldr	r2, [r3, #8]
20002b8a:	23e0      	movs	r3, #224	; 0xe0
20002b8c:	021b      	lsls	r3, r3, #8
20002b8e:	4013      	ands	r3, r2
20002b90:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 13;
20002b92:	69bb      	ldr	r3, [r7, #24]
20002b94:	0b5b      	lsrs	r3, r3, #13
20002b96:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
20002b98:	4a0a      	ldr	r2, [pc, #40]	; (20002bc4 <RCC_GetClocksFreq+0x154>)
20002b9a:	69bb      	ldr	r3, [r7, #24]
20002b9c:	18d3      	adds	r3, r2, r3
20002b9e:	781b      	ldrb	r3, [r3, #0]
20002ba0:	b2db      	uxtb	r3, r3
20002ba2:	617b      	str	r3, [r7, #20]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
20002ba4:	687b      	ldr	r3, [r7, #4]
20002ba6:	685a      	ldr	r2, [r3, #4]
20002ba8:	697b      	ldr	r3, [r7, #20]
20002baa:	40da      	lsrs	r2, r3
20002bac:	687b      	ldr	r3, [r7, #4]
20002bae:	60da      	str	r2, [r3, #12]
}
20002bb0:	46c0      	nop			; (mov r8, r8)
20002bb2:	46bd      	mov	sp, r7
20002bb4:	b008      	add	sp, #32
20002bb6:	bd80      	pop	{r7, pc}
20002bb8:	40023800 	andmi	r3, r2, r0, lsl #16
20002bbc:	00f42400 	rscseq	r2, r4, r0, lsl #8
20002bc0:	017d7840 	cmneq	sp, r0, asr #16
20002bc4:	20003f74 	andcs	r3, r0, r4, ror pc

20002bc8 <RCC_RTCCLKConfig>:
  *         RTC clock source).
  *  
  * @retval None
  */
void RCC_RTCCLKConfig(uint32_t RCC_RTCCLKSource)
{
20002bc8:	b580      	push	{r7, lr}
20002bca:	b084      	sub	sp, #16
20002bcc:	af00      	add	r7, sp, #0
20002bce:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
20002bd0:	2300      	movs	r3, #0
20002bd2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_RTCCLK_SOURCE(RCC_RTCCLKSource));

  if ((RCC_RTCCLKSource & 0x00000300) == 0x00000300)
20002bd4:	687a      	ldr	r2, [r7, #4]
20002bd6:	23c0      	movs	r3, #192	; 0xc0
20002bd8:	009b      	lsls	r3, r3, #2
20002bda:	401a      	ands	r2, r3
20002bdc:	23c0      	movs	r3, #192	; 0xc0
20002bde:	009b      	lsls	r3, r3, #2
20002be0:	429a      	cmp	r2, r3
20002be2:	d10f      	bne.n	20002c04 <RCC_RTCCLKConfig+0x3c>
  { /* If HSE is selected as RTC clock source, configure HSE division factor for RTC clock */
    tmpreg = RCC->CFGR;
20002be4:	4b0d      	ldr	r3, [pc, #52]	; (20002c1c <RCC_RTCCLKConfig+0x54>)
20002be6:	689b      	ldr	r3, [r3, #8]
20002be8:	60fb      	str	r3, [r7, #12]

    /* Clear RTCPRE[4:0] bits */
    tmpreg &= ~RCC_CFGR_RTCPRE;
20002bea:	68fb      	ldr	r3, [r7, #12]
20002bec:	4a0c      	ldr	r2, [pc, #48]	; (20002c20 <RCC_RTCCLKConfig+0x58>)
20002bee:	4013      	ands	r3, r2
20002bf0:	60fb      	str	r3, [r7, #12]

    /* Configure HSE division factor for RTC clock */
    tmpreg |= (RCC_RTCCLKSource & 0xFFFFCFF);
20002bf2:	687b      	ldr	r3, [r7, #4]
20002bf4:	4a0b      	ldr	r2, [pc, #44]	; (20002c24 <RCC_RTCCLKConfig+0x5c>)
20002bf6:	4013      	ands	r3, r2
20002bf8:	68fa      	ldr	r2, [r7, #12]
20002bfa:	4313      	orrs	r3, r2
20002bfc:	60fb      	str	r3, [r7, #12]

    /* Store the new value */
    RCC->CFGR = tmpreg;
20002bfe:	4b07      	ldr	r3, [pc, #28]	; (20002c1c <RCC_RTCCLKConfig+0x54>)
20002c00:	68fa      	ldr	r2, [r7, #12]
20002c02:	609a      	str	r2, [r3, #8]
  }
    
  /* Select the RTC clock source */
  RCC->BDCR |= (RCC_RTCCLKSource & 0x00000FFF);
20002c04:	4b05      	ldr	r3, [pc, #20]	; (20002c1c <RCC_RTCCLKConfig+0x54>)
20002c06:	6f19      	ldr	r1, [r3, #112]	; 0x70
20002c08:	687b      	ldr	r3, [r7, #4]
20002c0a:	051b      	lsls	r3, r3, #20
20002c0c:	0d1a      	lsrs	r2, r3, #20
20002c0e:	4b03      	ldr	r3, [pc, #12]	; (20002c1c <RCC_RTCCLKConfig+0x54>)
20002c10:	430a      	orrs	r2, r1
20002c12:	671a      	str	r2, [r3, #112]	; 0x70
}
20002c14:	46c0      	nop			; (mov r8, r8)
20002c16:	46bd      	mov	sp, r7
20002c18:	b004      	add	sp, #16
20002c1a:	bd80      	pop	{r7, pc}
20002c1c:	40023800 	andmi	r3, r2, r0, lsl #16
20002c20:	ffe0ffff 			; <UNDEFINED> instruction: 0xffe0ffff
20002c24:	0ffffcff 	svceq	0x00fffcff

20002c28 <RCC_RTCCLKCmd>:
  *         using the RCC_RTCCLKConfig function.
  * @param  NewState: new state of the RTC clock. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_RTCCLKCmd(FunctionalState NewState)
{
20002c28:	b580      	push	{r7, lr}
20002c2a:	b082      	sub	sp, #8
20002c2c:	af00      	add	r7, sp, #0
20002c2e:	0002      	movs	r2, r0
20002c30:	1dfb      	adds	r3, r7, #7
20002c32:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) BDCR_RTCEN_BB = (uint32_t)NewState;
20002c34:	4b03      	ldr	r3, [pc, #12]	; (20002c44 <RCC_RTCCLKCmd+0x1c>)
20002c36:	1dfa      	adds	r2, r7, #7
20002c38:	7812      	ldrb	r2, [r2, #0]
20002c3a:	601a      	str	r2, [r3, #0]
}
20002c3c:	46c0      	nop			; (mov r8, r8)
20002c3e:	46bd      	mov	sp, r7
20002c40:	b002      	add	sp, #8
20002c42:	bd80      	pop	{r7, pc}
20002c44:	42470e3c 	submi	r0, r7, #60, 28	; 0x3c0

20002c48 <RCC_BackupResetCmd>:
  * @param  NewState: new state of the Backup domain reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_BackupResetCmd(FunctionalState NewState)
{
20002c48:	b580      	push	{r7, lr}
20002c4a:	b082      	sub	sp, #8
20002c4c:	af00      	add	r7, sp, #0
20002c4e:	0002      	movs	r2, r0
20002c50:	1dfb      	adds	r3, r7, #7
20002c52:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) BDCR_BDRST_BB = (uint32_t)NewState;
20002c54:	4b03      	ldr	r3, [pc, #12]	; (20002c64 <RCC_BackupResetCmd+0x1c>)
20002c56:	1dfa      	adds	r2, r7, #7
20002c58:	7812      	ldrb	r2, [r2, #0]
20002c5a:	601a      	str	r2, [r3, #0]
}
20002c5c:	46c0      	nop			; (mov r8, r8)
20002c5e:	46bd      	mov	sp, r7
20002c60:	b002      	add	sp, #8
20002c62:	bd80      	pop	{r7, pc}
20002c64:	42470e40 	submi	r0, r7, #64, 28	; 0x400

20002c68 <RCC_I2SCLKConfig>:
  *            @arg RCC_I2S2CLKSource_Ext: External clock mapped on the I2S_CKIN pin
  *                                        used as I2S clock source
  * @retval None
  */
void RCC_I2SCLKConfig(uint32_t RCC_I2SCLKSource)
{
20002c68:	b580      	push	{r7, lr}
20002c6a:	b082      	sub	sp, #8
20002c6c:	af00      	add	r7, sp, #0
20002c6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_I2SCLK_SOURCE(RCC_I2SCLKSource));

  *(__IO uint32_t *) CFGR_I2SSRC_BB = RCC_I2SCLKSource;  
20002c70:	4b03      	ldr	r3, [pc, #12]	; (20002c80 <RCC_I2SCLKConfig+0x18>)
20002c72:	687a      	ldr	r2, [r7, #4]
20002c74:	601a      	str	r2, [r3, #0]
}
20002c76:	46c0      	nop			; (mov r8, r8)
20002c78:	46bd      	mov	sp, r7
20002c7a:	b002      	add	sp, #8
20002c7c:	bd80      	pop	{r7, pc}
20002c7e:	46c0      	nop			; (mov r8, r8)
20002c80:	4247015c 	submi	r0, r7, #92, 2

20002c84 <RCC_SAIBlockACLKConfig>:
  *            @arg RCC_SAIACLKSource_Ext: External clock mapped on the I2S_CKIN pin
  *                                        used as SAI1 Block A clock
  * @retval None
  */
void RCC_SAIBlockACLKConfig(uint32_t RCC_SAIBlockACLKSource)
{
20002c84:	b580      	push	{r7, lr}
20002c86:	b084      	sub	sp, #16
20002c88:	af00      	add	r7, sp, #0
20002c8a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
20002c8c:	2300      	movs	r3, #0
20002c8e:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_SAIACLK_SOURCE(RCC_SAIBlockACLKSource));
  
  tmpreg = RCC->DCKCFGR;
20002c90:	4a09      	ldr	r2, [pc, #36]	; (20002cb8 <RCC_SAIBlockACLKConfig+0x34>)
20002c92:	238c      	movs	r3, #140	; 0x8c
20002c94:	58d3      	ldr	r3, [r2, r3]
20002c96:	60fb      	str	r3, [r7, #12]

  /* Clear RCC_DCKCFGR_SAI1ASRC[1:0] bits */
  tmpreg &= ~RCC_DCKCFGR_SAI1ASRC;
20002c98:	68fb      	ldr	r3, [r7, #12]
20002c9a:	4a08      	ldr	r2, [pc, #32]	; (20002cbc <RCC_SAIBlockACLKConfig+0x38>)
20002c9c:	4013      	ands	r3, r2
20002c9e:	60fb      	str	r3, [r7, #12]

  /* Set SAI Block A source selection value */
  tmpreg |= RCC_SAIBlockACLKSource;
20002ca0:	68fa      	ldr	r2, [r7, #12]
20002ca2:	687b      	ldr	r3, [r7, #4]
20002ca4:	4313      	orrs	r3, r2
20002ca6:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->DCKCFGR = tmpreg;
20002ca8:	4903      	ldr	r1, [pc, #12]	; (20002cb8 <RCC_SAIBlockACLKConfig+0x34>)
20002caa:	228c      	movs	r2, #140	; 0x8c
20002cac:	68fb      	ldr	r3, [r7, #12]
20002cae:	508b      	str	r3, [r1, r2]
}
20002cb0:	46c0      	nop			; (mov r8, r8)
20002cb2:	46bd      	mov	sp, r7
20002cb4:	b004      	add	sp, #16
20002cb6:	bd80      	pop	{r7, pc}
20002cb8:	40023800 	andmi	r3, r2, r0, lsl #16
20002cbc:	ffcfffff 			; <UNDEFINED> instruction: 0xffcfffff

20002cc0 <RCC_SAIBlockBCLKConfig>:
  *            @arg RCC_SAIBCLKSource_Ext: External clock mapped on the I2S_CKIN pin
  *                                        used as SAI1 Block B clock
  * @retval None
  */
void RCC_SAIBlockBCLKConfig(uint32_t RCC_SAIBlockBCLKSource)
{
20002cc0:	b580      	push	{r7, lr}
20002cc2:	b084      	sub	sp, #16
20002cc4:	af00      	add	r7, sp, #0
20002cc6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
20002cc8:	2300      	movs	r3, #0
20002cca:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_SAIBCLK_SOURCE(RCC_SAIBlockBCLKSource));
  
  tmpreg = RCC->DCKCFGR;
20002ccc:	4a09      	ldr	r2, [pc, #36]	; (20002cf4 <RCC_SAIBlockBCLKConfig+0x34>)
20002cce:	238c      	movs	r3, #140	; 0x8c
20002cd0:	58d3      	ldr	r3, [r2, r3]
20002cd2:	60fb      	str	r3, [r7, #12]

  /* Clear RCC_DCKCFGR_SAI1BSRC[1:0] bits */
  tmpreg &= ~RCC_DCKCFGR_SAI1BSRC;
20002cd4:	68fb      	ldr	r3, [r7, #12]
20002cd6:	4a08      	ldr	r2, [pc, #32]	; (20002cf8 <RCC_SAIBlockBCLKConfig+0x38>)
20002cd8:	4013      	ands	r3, r2
20002cda:	60fb      	str	r3, [r7, #12]

  /* Set SAI Block B source selection value */
  tmpreg |= RCC_SAIBlockBCLKSource;
20002cdc:	68fa      	ldr	r2, [r7, #12]
20002cde:	687b      	ldr	r3, [r7, #4]
20002ce0:	4313      	orrs	r3, r2
20002ce2:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->DCKCFGR = tmpreg;
20002ce4:	4903      	ldr	r1, [pc, #12]	; (20002cf4 <RCC_SAIBlockBCLKConfig+0x34>)
20002ce6:	228c      	movs	r2, #140	; 0x8c
20002ce8:	68fb      	ldr	r3, [r7, #12]
20002cea:	508b      	str	r3, [r1, r2]
}
20002cec:	46c0      	nop			; (mov r8, r8)
20002cee:	46bd      	mov	sp, r7
20002cf0:	b004      	add	sp, #16
20002cf2:	bd80      	pop	{r7, pc}
20002cf4:	40023800 	andmi	r3, r2, r0, lsl #16
20002cf8:	ff3fffff 			; <UNDEFINED> instruction: 0xff3fffff

20002cfc <RCC_SAIPLLI2SClkDivConfig>:
  *          SAI1 clock frequency = f(PLLI2S_Q) / RCC_PLLI2SDivQ 
  *              
  * @retval None
  */
void RCC_SAIPLLI2SClkDivConfig(uint32_t RCC_PLLI2SDivQ)  
{
20002cfc:	b580      	push	{r7, lr}
20002cfe:	b084      	sub	sp, #16
20002d00:	af00      	add	r7, sp, #0
20002d02:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
20002d04:	2300      	movs	r3, #0
20002d06:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(RCC_PLLI2SDivQ));
  
  tmpreg = RCC->DCKCFGR;
20002d08:	4a0a      	ldr	r2, [pc, #40]	; (20002d34 <RCC_SAIPLLI2SClkDivConfig+0x38>)
20002d0a:	238c      	movs	r3, #140	; 0x8c
20002d0c:	58d3      	ldr	r3, [r2, r3]
20002d0e:	60fb      	str	r3, [r7, #12]

  /* Clear PLLI2SDIVQ[4:0] bits */
  tmpreg &= ~(RCC_DCKCFGR_PLLI2SDIVQ);
20002d10:	68fb      	ldr	r3, [r7, #12]
20002d12:	221f      	movs	r2, #31
20002d14:	4393      	bics	r3, r2
20002d16:	60fb      	str	r3, [r7, #12]

  /* Set PLLI2SDIVQ values */
  tmpreg |= (RCC_PLLI2SDivQ - 1);
20002d18:	687b      	ldr	r3, [r7, #4]
20002d1a:	3b01      	subs	r3, #1
20002d1c:	68fa      	ldr	r2, [r7, #12]
20002d1e:	4313      	orrs	r3, r2
20002d20:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->DCKCFGR = tmpreg;
20002d22:	4904      	ldr	r1, [pc, #16]	; (20002d34 <RCC_SAIPLLI2SClkDivConfig+0x38>)
20002d24:	228c      	movs	r2, #140	; 0x8c
20002d26:	68fb      	ldr	r3, [r7, #12]
20002d28:	508b      	str	r3, [r1, r2]
}
20002d2a:	46c0      	nop			; (mov r8, r8)
20002d2c:	46bd      	mov	sp, r7
20002d2e:	b004      	add	sp, #16
20002d30:	bd80      	pop	{r7, pc}
20002d32:	46c0      	nop			; (mov r8, r8)
20002d34:	40023800 	andmi	r3, r2, r0, lsl #16

20002d38 <RCC_SAIPLLSAIClkDivConfig>:
  *          SAI1 clock frequency = f(PLLSAI_Q) / RCC_PLLSAIDivQ  
  *              
  * @retval None
  */
void RCC_SAIPLLSAIClkDivConfig(uint32_t RCC_PLLSAIDivQ)  
{
20002d38:	b580      	push	{r7, lr}
20002d3a:	b084      	sub	sp, #16
20002d3c:	af00      	add	r7, sp, #0
20002d3e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
20002d40:	2300      	movs	r3, #0
20002d42:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(RCC_PLLSAIDivQ));
  
  tmpreg = RCC->DCKCFGR;
20002d44:	4a0a      	ldr	r2, [pc, #40]	; (20002d70 <RCC_SAIPLLSAIClkDivConfig+0x38>)
20002d46:	238c      	movs	r3, #140	; 0x8c
20002d48:	58d3      	ldr	r3, [r2, r3]
20002d4a:	60fb      	str	r3, [r7, #12]

  /* Clear PLLI2SDIVQ[4:0] and PLLSAIDIVQ[4:0] bits */
  tmpreg &= ~(RCC_DCKCFGR_PLLSAIDIVQ);
20002d4c:	68fb      	ldr	r3, [r7, #12]
20002d4e:	4a09      	ldr	r2, [pc, #36]	; (20002d74 <RCC_SAIPLLSAIClkDivConfig+0x3c>)
20002d50:	4013      	ands	r3, r2
20002d52:	60fb      	str	r3, [r7, #12]

  /* Set PLLSAIDIVQ values */
  tmpreg |= ((RCC_PLLSAIDivQ - 1) << 8);
20002d54:	687b      	ldr	r3, [r7, #4]
20002d56:	3b01      	subs	r3, #1
20002d58:	021b      	lsls	r3, r3, #8
20002d5a:	68fa      	ldr	r2, [r7, #12]
20002d5c:	4313      	orrs	r3, r2
20002d5e:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->DCKCFGR = tmpreg;
20002d60:	4903      	ldr	r1, [pc, #12]	; (20002d70 <RCC_SAIPLLSAIClkDivConfig+0x38>)
20002d62:	228c      	movs	r2, #140	; 0x8c
20002d64:	68fb      	ldr	r3, [r7, #12]
20002d66:	508b      	str	r3, [r1, r2]
}
20002d68:	46c0      	nop			; (mov r8, r8)
20002d6a:	46bd      	mov	sp, r7
20002d6c:	b004      	add	sp, #16
20002d6e:	bd80      	pop	{r7, pc}
20002d70:	40023800 	andmi	r3, r2, r0, lsl #16
20002d74:	ffffe0ff 			; <UNDEFINED> instruction: 0xffffe0ff

20002d78 <RCC_LTDCCLKDivConfig>:
  *            @arg RCC_PLLSAIDivR_Div16: LTDC clock = f(PLLSAI_R)/16
  *            
  * @retval None
  */
void RCC_LTDCCLKDivConfig(uint32_t RCC_PLLSAIDivR)
{
20002d78:	b580      	push	{r7, lr}
20002d7a:	b084      	sub	sp, #16
20002d7c:	af00      	add	r7, sp, #0
20002d7e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
20002d80:	2300      	movs	r3, #0
20002d82:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_PLLSAI_DIVR_VALUE(RCC_PLLSAIDivR));
  
  tmpreg = RCC->DCKCFGR;
20002d84:	4a09      	ldr	r2, [pc, #36]	; (20002dac <RCC_LTDCCLKDivConfig+0x34>)
20002d86:	238c      	movs	r3, #140	; 0x8c
20002d88:	58d3      	ldr	r3, [r2, r3]
20002d8a:	60fb      	str	r3, [r7, #12]

  /* Clear PLLSAIDIVR[2:0] bits */
  tmpreg &= ~RCC_DCKCFGR_PLLSAIDIVR;
20002d8c:	68fb      	ldr	r3, [r7, #12]
20002d8e:	4a08      	ldr	r2, [pc, #32]	; (20002db0 <RCC_LTDCCLKDivConfig+0x38>)
20002d90:	4013      	ands	r3, r2
20002d92:	60fb      	str	r3, [r7, #12]

  /* Set PLLSAIDIVR values */
  tmpreg |= RCC_PLLSAIDivR;
20002d94:	68fa      	ldr	r2, [r7, #12]
20002d96:	687b      	ldr	r3, [r7, #4]
20002d98:	4313      	orrs	r3, r2
20002d9a:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->DCKCFGR = tmpreg;
20002d9c:	4903      	ldr	r1, [pc, #12]	; (20002dac <RCC_LTDCCLKDivConfig+0x34>)
20002d9e:	228c      	movs	r2, #140	; 0x8c
20002da0:	68fb      	ldr	r3, [r7, #12]
20002da2:	508b      	str	r3, [r1, r2]
}
20002da4:	46c0      	nop			; (mov r8, r8)
20002da6:	46bd      	mov	sp, r7
20002da8:	b004      	add	sp, #16
20002daa:	bd80      	pop	{r7, pc}
20002dac:	40023800 	andmi	r3, r2, r0, lsl #16
20002db0:	fffcffff 			; <UNDEFINED> instruction: 0xfffcffff

20002db4 <RCC_TIMCLKPresConfig>:
  *                 else it is equal to [(HPRE * PPREx) / 4] if PPREx is corresponding 
  *                 to division by 8 or more.
  * @retval None
  */
void RCC_TIMCLKPresConfig(uint32_t RCC_TIMCLKPrescaler)
{
20002db4:	b580      	push	{r7, lr}
20002db6:	b082      	sub	sp, #8
20002db8:	af00      	add	r7, sp, #0
20002dba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_TIMCLK_PRESCALER(RCC_TIMCLKPrescaler));

  *(__IO uint32_t *) DCKCFGR_TIMPRE_BB = RCC_TIMCLKPrescaler;
20002dbc:	4b03      	ldr	r3, [pc, #12]	; (20002dcc <RCC_TIMCLKPresConfig+0x18>)
20002dbe:	687a      	ldr	r2, [r7, #4]
20002dc0:	601a      	str	r2, [r3, #0]
}
20002dc2:	46c0      	nop			; (mov r8, r8)
20002dc4:	46bd      	mov	sp, r7
20002dc6:	b002      	add	sp, #8
20002dc8:	bd80      	pop	{r7, pc}
20002dca:	46c0      	nop			; (mov r8, r8)
20002dcc:	424711e0 	submi	r1, r7, #224, 2	; 0x38

20002dd0 <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
20002dd0:	b580      	push	{r7, lr}
20002dd2:	b082      	sub	sp, #8
20002dd4:	af00      	add	r7, sp, #0
20002dd6:	6078      	str	r0, [r7, #4]
20002dd8:	000a      	movs	r2, r1
20002dda:	1cfb      	adds	r3, r7, #3
20002ddc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
20002dde:	1cfb      	adds	r3, r7, #3
20002de0:	781b      	ldrb	r3, [r3, #0]
20002de2:	2b00      	cmp	r3, #0
20002de4:	d006      	beq.n	20002df4 <RCC_AHB1PeriphClockCmd+0x24>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
20002de6:	4b09      	ldr	r3, [pc, #36]	; (20002e0c <RCC_AHB1PeriphClockCmd+0x3c>)
20002de8:	6b19      	ldr	r1, [r3, #48]	; 0x30
20002dea:	4b08      	ldr	r3, [pc, #32]	; (20002e0c <RCC_AHB1PeriphClockCmd+0x3c>)
20002dec:	687a      	ldr	r2, [r7, #4]
20002dee:	430a      	orrs	r2, r1
20002df0:	631a      	str	r2, [r3, #48]	; 0x30
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
  }
}
20002df2:	e006      	b.n	20002e02 <RCC_AHB1PeriphClockCmd+0x32>
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
20002df4:	4b05      	ldr	r3, [pc, #20]	; (20002e0c <RCC_AHB1PeriphClockCmd+0x3c>)
20002df6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
20002df8:	687b      	ldr	r3, [r7, #4]
20002dfa:	43d9      	mvns	r1, r3
20002dfc:	4b03      	ldr	r3, [pc, #12]	; (20002e0c <RCC_AHB1PeriphClockCmd+0x3c>)
20002dfe:	400a      	ands	r2, r1
20002e00:	631a      	str	r2, [r3, #48]	; 0x30
}
20002e02:	46c0      	nop			; (mov r8, r8)
20002e04:	46bd      	mov	sp, r7
20002e06:	b002      	add	sp, #8
20002e08:	bd80      	pop	{r7, pc}
20002e0a:	46c0      	nop			; (mov r8, r8)
20002e0c:	40023800 	andmi	r3, r2, r0, lsl #16

20002e10 <RCC_AHB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB2PeriphClockCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
{
20002e10:	b580      	push	{r7, lr}
20002e12:	b082      	sub	sp, #8
20002e14:	af00      	add	r7, sp, #0
20002e16:	6078      	str	r0, [r7, #4]
20002e18:	000a      	movs	r2, r1
20002e1a:	1cfb      	adds	r3, r7, #3
20002e1c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
20002e1e:	1cfb      	adds	r3, r7, #3
20002e20:	781b      	ldrb	r3, [r3, #0]
20002e22:	2b00      	cmp	r3, #0
20002e24:	d006      	beq.n	20002e34 <RCC_AHB2PeriphClockCmd+0x24>
  {
    RCC->AHB2ENR |= RCC_AHB2Periph;
20002e26:	4b09      	ldr	r3, [pc, #36]	; (20002e4c <RCC_AHB2PeriphClockCmd+0x3c>)
20002e28:	6b59      	ldr	r1, [r3, #52]	; 0x34
20002e2a:	4b08      	ldr	r3, [pc, #32]	; (20002e4c <RCC_AHB2PeriphClockCmd+0x3c>)
20002e2c:	687a      	ldr	r2, [r7, #4]
20002e2e:	430a      	orrs	r2, r1
20002e30:	635a      	str	r2, [r3, #52]	; 0x34
  }
  else
  {
    RCC->AHB2ENR &= ~RCC_AHB2Periph;
  }
}
20002e32:	e006      	b.n	20002e42 <RCC_AHB2PeriphClockCmd+0x32>
    RCC->AHB2ENR &= ~RCC_AHB2Periph;
20002e34:	4b05      	ldr	r3, [pc, #20]	; (20002e4c <RCC_AHB2PeriphClockCmd+0x3c>)
20002e36:	6b5a      	ldr	r2, [r3, #52]	; 0x34
20002e38:	687b      	ldr	r3, [r7, #4]
20002e3a:	43d9      	mvns	r1, r3
20002e3c:	4b03      	ldr	r3, [pc, #12]	; (20002e4c <RCC_AHB2PeriphClockCmd+0x3c>)
20002e3e:	400a      	ands	r2, r1
20002e40:	635a      	str	r2, [r3, #52]	; 0x34
}
20002e42:	46c0      	nop			; (mov r8, r8)
20002e44:	46bd      	mov	sp, r7
20002e46:	b002      	add	sp, #8
20002e48:	bd80      	pop	{r7, pc}
20002e4a:	46c0      	nop			; (mov r8, r8)
20002e4c:	40023800 	andmi	r3, r2, r0, lsl #16

20002e50 <RCC_AHB3PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB3PeriphClockCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
{
20002e50:	b580      	push	{r7, lr}
20002e52:	b082      	sub	sp, #8
20002e54:	af00      	add	r7, sp, #0
20002e56:	6078      	str	r0, [r7, #4]
20002e58:	000a      	movs	r2, r1
20002e5a:	1cfb      	adds	r3, r7, #3
20002e5c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
20002e5e:	1cfb      	adds	r3, r7, #3
20002e60:	781b      	ldrb	r3, [r3, #0]
20002e62:	2b00      	cmp	r3, #0
20002e64:	d006      	beq.n	20002e74 <RCC_AHB3PeriphClockCmd+0x24>
  {
    RCC->AHB3ENR |= RCC_AHB3Periph;
20002e66:	4b09      	ldr	r3, [pc, #36]	; (20002e8c <RCC_AHB3PeriphClockCmd+0x3c>)
20002e68:	6b99      	ldr	r1, [r3, #56]	; 0x38
20002e6a:	4b08      	ldr	r3, [pc, #32]	; (20002e8c <RCC_AHB3PeriphClockCmd+0x3c>)
20002e6c:	687a      	ldr	r2, [r7, #4]
20002e6e:	430a      	orrs	r2, r1
20002e70:	639a      	str	r2, [r3, #56]	; 0x38
  }
  else
  {
    RCC->AHB3ENR &= ~RCC_AHB3Periph;
  }
}
20002e72:	e006      	b.n	20002e82 <RCC_AHB3PeriphClockCmd+0x32>
    RCC->AHB3ENR &= ~RCC_AHB3Periph;
20002e74:	4b05      	ldr	r3, [pc, #20]	; (20002e8c <RCC_AHB3PeriphClockCmd+0x3c>)
20002e76:	6b9a      	ldr	r2, [r3, #56]	; 0x38
20002e78:	687b      	ldr	r3, [r7, #4]
20002e7a:	43d9      	mvns	r1, r3
20002e7c:	4b03      	ldr	r3, [pc, #12]	; (20002e8c <RCC_AHB3PeriphClockCmd+0x3c>)
20002e7e:	400a      	ands	r2, r1
20002e80:	639a      	str	r2, [r3, #56]	; 0x38
}
20002e82:	46c0      	nop			; (mov r8, r8)
20002e84:	46bd      	mov	sp, r7
20002e86:	b002      	add	sp, #8
20002e88:	bd80      	pop	{r7, pc}
20002e8a:	46c0      	nop			; (mov r8, r8)
20002e8c:	40023800 	andmi	r3, r2, r0, lsl #16

20002e90 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
20002e90:	b580      	push	{r7, lr}
20002e92:	b082      	sub	sp, #8
20002e94:	af00      	add	r7, sp, #0
20002e96:	6078      	str	r0, [r7, #4]
20002e98:	000a      	movs	r2, r1
20002e9a:	1cfb      	adds	r3, r7, #3
20002e9c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
20002e9e:	1cfb      	adds	r3, r7, #3
20002ea0:	781b      	ldrb	r3, [r3, #0]
20002ea2:	2b00      	cmp	r3, #0
20002ea4:	d006      	beq.n	20002eb4 <RCC_APB1PeriphClockCmd+0x24>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
20002ea6:	4b09      	ldr	r3, [pc, #36]	; (20002ecc <RCC_APB1PeriphClockCmd+0x3c>)
20002ea8:	6c19      	ldr	r1, [r3, #64]	; 0x40
20002eaa:	4b08      	ldr	r3, [pc, #32]	; (20002ecc <RCC_APB1PeriphClockCmd+0x3c>)
20002eac:	687a      	ldr	r2, [r7, #4]
20002eae:	430a      	orrs	r2, r1
20002eb0:	641a      	str	r2, [r3, #64]	; 0x40
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
20002eb2:	e006      	b.n	20002ec2 <RCC_APB1PeriphClockCmd+0x32>
    RCC->APB1ENR &= ~RCC_APB1Periph;
20002eb4:	4b05      	ldr	r3, [pc, #20]	; (20002ecc <RCC_APB1PeriphClockCmd+0x3c>)
20002eb6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
20002eb8:	687b      	ldr	r3, [r7, #4]
20002eba:	43d9      	mvns	r1, r3
20002ebc:	4b03      	ldr	r3, [pc, #12]	; (20002ecc <RCC_APB1PeriphClockCmd+0x3c>)
20002ebe:	400a      	ands	r2, r1
20002ec0:	641a      	str	r2, [r3, #64]	; 0x40
}
20002ec2:	46c0      	nop			; (mov r8, r8)
20002ec4:	46bd      	mov	sp, r7
20002ec6:	b002      	add	sp, #8
20002ec8:	bd80      	pop	{r7, pc}
20002eca:	46c0      	nop			; (mov r8, r8)
20002ecc:	40023800 	andmi	r3, r2, r0, lsl #16

20002ed0 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
20002ed0:	b580      	push	{r7, lr}
20002ed2:	b082      	sub	sp, #8
20002ed4:	af00      	add	r7, sp, #0
20002ed6:	6078      	str	r0, [r7, #4]
20002ed8:	000a      	movs	r2, r1
20002eda:	1cfb      	adds	r3, r7, #3
20002edc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
20002ede:	1cfb      	adds	r3, r7, #3
20002ee0:	781b      	ldrb	r3, [r3, #0]
20002ee2:	2b00      	cmp	r3, #0
20002ee4:	d006      	beq.n	20002ef4 <RCC_APB2PeriphClockCmd+0x24>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
20002ee6:	4b09      	ldr	r3, [pc, #36]	; (20002f0c <RCC_APB2PeriphClockCmd+0x3c>)
20002ee8:	6c59      	ldr	r1, [r3, #68]	; 0x44
20002eea:	4b08      	ldr	r3, [pc, #32]	; (20002f0c <RCC_APB2PeriphClockCmd+0x3c>)
20002eec:	687a      	ldr	r2, [r7, #4]
20002eee:	430a      	orrs	r2, r1
20002ef0:	645a      	str	r2, [r3, #68]	; 0x44
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
20002ef2:	e006      	b.n	20002f02 <RCC_APB2PeriphClockCmd+0x32>
    RCC->APB2ENR &= ~RCC_APB2Periph;
20002ef4:	4b05      	ldr	r3, [pc, #20]	; (20002f0c <RCC_APB2PeriphClockCmd+0x3c>)
20002ef6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
20002ef8:	687b      	ldr	r3, [r7, #4]
20002efa:	43d9      	mvns	r1, r3
20002efc:	4b03      	ldr	r3, [pc, #12]	; (20002f0c <RCC_APB2PeriphClockCmd+0x3c>)
20002efe:	400a      	ands	r2, r1
20002f00:	645a      	str	r2, [r3, #68]	; 0x44
}
20002f02:	46c0      	nop			; (mov r8, r8)
20002f04:	46bd      	mov	sp, r7
20002f06:	b002      	add	sp, #8
20002f08:	bd80      	pop	{r7, pc}
20002f0a:	46c0      	nop			; (mov r8, r8)
20002f0c:	40023800 	andmi	r3, r2, r0, lsl #16

20002f10 <RCC_AHB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphResetCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
20002f10:	b580      	push	{r7, lr}
20002f12:	b082      	sub	sp, #8
20002f14:	af00      	add	r7, sp, #0
20002f16:	6078      	str	r0, [r7, #4]
20002f18:	000a      	movs	r2, r1
20002f1a:	1cfb      	adds	r3, r7, #3
20002f1c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_RESET_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
20002f1e:	1cfb      	adds	r3, r7, #3
20002f20:	781b      	ldrb	r3, [r3, #0]
20002f22:	2b00      	cmp	r3, #0
20002f24:	d006      	beq.n	20002f34 <RCC_AHB1PeriphResetCmd+0x24>
  {
    RCC->AHB1RSTR |= RCC_AHB1Periph;
20002f26:	4b09      	ldr	r3, [pc, #36]	; (20002f4c <RCC_AHB1PeriphResetCmd+0x3c>)
20002f28:	6919      	ldr	r1, [r3, #16]
20002f2a:	4b08      	ldr	r3, [pc, #32]	; (20002f4c <RCC_AHB1PeriphResetCmd+0x3c>)
20002f2c:	687a      	ldr	r2, [r7, #4]
20002f2e:	430a      	orrs	r2, r1
20002f30:	611a      	str	r2, [r3, #16]
  }
  else
  {
    RCC->AHB1RSTR &= ~RCC_AHB1Periph;
  }
}
20002f32:	e006      	b.n	20002f42 <RCC_AHB1PeriphResetCmd+0x32>
    RCC->AHB1RSTR &= ~RCC_AHB1Periph;
20002f34:	4b05      	ldr	r3, [pc, #20]	; (20002f4c <RCC_AHB1PeriphResetCmd+0x3c>)
20002f36:	691a      	ldr	r2, [r3, #16]
20002f38:	687b      	ldr	r3, [r7, #4]
20002f3a:	43d9      	mvns	r1, r3
20002f3c:	4b03      	ldr	r3, [pc, #12]	; (20002f4c <RCC_AHB1PeriphResetCmd+0x3c>)
20002f3e:	400a      	ands	r2, r1
20002f40:	611a      	str	r2, [r3, #16]
}
20002f42:	46c0      	nop			; (mov r8, r8)
20002f44:	46bd      	mov	sp, r7
20002f46:	b002      	add	sp, #8
20002f48:	bd80      	pop	{r7, pc}
20002f4a:	46c0      	nop			; (mov r8, r8)
20002f4c:	40023800 	andmi	r3, r2, r0, lsl #16

20002f50 <RCC_AHB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB2PeriphResetCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
{
20002f50:	b580      	push	{r7, lr}
20002f52:	b082      	sub	sp, #8
20002f54:	af00      	add	r7, sp, #0
20002f56:	6078      	str	r0, [r7, #4]
20002f58:	000a      	movs	r2, r1
20002f5a:	1cfb      	adds	r3, r7, #3
20002f5c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
20002f5e:	1cfb      	adds	r3, r7, #3
20002f60:	781b      	ldrb	r3, [r3, #0]
20002f62:	2b00      	cmp	r3, #0
20002f64:	d006      	beq.n	20002f74 <RCC_AHB2PeriphResetCmd+0x24>
  {
    RCC->AHB2RSTR |= RCC_AHB2Periph;
20002f66:	4b09      	ldr	r3, [pc, #36]	; (20002f8c <RCC_AHB2PeriphResetCmd+0x3c>)
20002f68:	6959      	ldr	r1, [r3, #20]
20002f6a:	4b08      	ldr	r3, [pc, #32]	; (20002f8c <RCC_AHB2PeriphResetCmd+0x3c>)
20002f6c:	687a      	ldr	r2, [r7, #4]
20002f6e:	430a      	orrs	r2, r1
20002f70:	615a      	str	r2, [r3, #20]
  }
  else
  {
    RCC->AHB2RSTR &= ~RCC_AHB2Periph;
  }
}
20002f72:	e006      	b.n	20002f82 <RCC_AHB2PeriphResetCmd+0x32>
    RCC->AHB2RSTR &= ~RCC_AHB2Periph;
20002f74:	4b05      	ldr	r3, [pc, #20]	; (20002f8c <RCC_AHB2PeriphResetCmd+0x3c>)
20002f76:	695a      	ldr	r2, [r3, #20]
20002f78:	687b      	ldr	r3, [r7, #4]
20002f7a:	43d9      	mvns	r1, r3
20002f7c:	4b03      	ldr	r3, [pc, #12]	; (20002f8c <RCC_AHB2PeriphResetCmd+0x3c>)
20002f7e:	400a      	ands	r2, r1
20002f80:	615a      	str	r2, [r3, #20]
}
20002f82:	46c0      	nop			; (mov r8, r8)
20002f84:	46bd      	mov	sp, r7
20002f86:	b002      	add	sp, #8
20002f88:	bd80      	pop	{r7, pc}
20002f8a:	46c0      	nop			; (mov r8, r8)
20002f8c:	40023800 	andmi	r3, r2, r0, lsl #16

20002f90 <RCC_AHB3PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB3PeriphResetCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
{
20002f90:	b580      	push	{r7, lr}
20002f92:	b082      	sub	sp, #8
20002f94:	af00      	add	r7, sp, #0
20002f96:	6078      	str	r0, [r7, #4]
20002f98:	000a      	movs	r2, r1
20002f9a:	1cfb      	adds	r3, r7, #3
20002f9c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
20002f9e:	1cfb      	adds	r3, r7, #3
20002fa0:	781b      	ldrb	r3, [r3, #0]
20002fa2:	2b00      	cmp	r3, #0
20002fa4:	d006      	beq.n	20002fb4 <RCC_AHB3PeriphResetCmd+0x24>
  {
    RCC->AHB3RSTR |= RCC_AHB3Periph;
20002fa6:	4b09      	ldr	r3, [pc, #36]	; (20002fcc <RCC_AHB3PeriphResetCmd+0x3c>)
20002fa8:	6999      	ldr	r1, [r3, #24]
20002faa:	4b08      	ldr	r3, [pc, #32]	; (20002fcc <RCC_AHB3PeriphResetCmd+0x3c>)
20002fac:	687a      	ldr	r2, [r7, #4]
20002fae:	430a      	orrs	r2, r1
20002fb0:	619a      	str	r2, [r3, #24]
  }
  else
  {
    RCC->AHB3RSTR &= ~RCC_AHB3Periph;
  }
}
20002fb2:	e006      	b.n	20002fc2 <RCC_AHB3PeriphResetCmd+0x32>
    RCC->AHB3RSTR &= ~RCC_AHB3Periph;
20002fb4:	4b05      	ldr	r3, [pc, #20]	; (20002fcc <RCC_AHB3PeriphResetCmd+0x3c>)
20002fb6:	699a      	ldr	r2, [r3, #24]
20002fb8:	687b      	ldr	r3, [r7, #4]
20002fba:	43d9      	mvns	r1, r3
20002fbc:	4b03      	ldr	r3, [pc, #12]	; (20002fcc <RCC_AHB3PeriphResetCmd+0x3c>)
20002fbe:	400a      	ands	r2, r1
20002fc0:	619a      	str	r2, [r3, #24]
}
20002fc2:	46c0      	nop			; (mov r8, r8)
20002fc4:	46bd      	mov	sp, r7
20002fc6:	b002      	add	sp, #8
20002fc8:	bd80      	pop	{r7, pc}
20002fca:	46c0      	nop			; (mov r8, r8)
20002fcc:	40023800 	andmi	r3, r2, r0, lsl #16

20002fd0 <RCC_APB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
20002fd0:	b580      	push	{r7, lr}
20002fd2:	b082      	sub	sp, #8
20002fd4:	af00      	add	r7, sp, #0
20002fd6:	6078      	str	r0, [r7, #4]
20002fd8:	000a      	movs	r2, r1
20002fda:	1cfb      	adds	r3, r7, #3
20002fdc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
20002fde:	1cfb      	adds	r3, r7, #3
20002fe0:	781b      	ldrb	r3, [r3, #0]
20002fe2:	2b00      	cmp	r3, #0
20002fe4:	d006      	beq.n	20002ff4 <RCC_APB1PeriphResetCmd+0x24>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
20002fe6:	4b09      	ldr	r3, [pc, #36]	; (2000300c <RCC_APB1PeriphResetCmd+0x3c>)
20002fe8:	6a19      	ldr	r1, [r3, #32]
20002fea:	4b08      	ldr	r3, [pc, #32]	; (2000300c <RCC_APB1PeriphResetCmd+0x3c>)
20002fec:	687a      	ldr	r2, [r7, #4]
20002fee:	430a      	orrs	r2, r1
20002ff0:	621a      	str	r2, [r3, #32]
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
  }
}
20002ff2:	e006      	b.n	20003002 <RCC_APB1PeriphResetCmd+0x32>
    RCC->APB1RSTR &= ~RCC_APB1Periph;
20002ff4:	4b05      	ldr	r3, [pc, #20]	; (2000300c <RCC_APB1PeriphResetCmd+0x3c>)
20002ff6:	6a1a      	ldr	r2, [r3, #32]
20002ff8:	687b      	ldr	r3, [r7, #4]
20002ffa:	43d9      	mvns	r1, r3
20002ffc:	4b03      	ldr	r3, [pc, #12]	; (2000300c <RCC_APB1PeriphResetCmd+0x3c>)
20002ffe:	400a      	ands	r2, r1
20003000:	621a      	str	r2, [r3, #32]
}
20003002:	46c0      	nop			; (mov r8, r8)
20003004:	46bd      	mov	sp, r7
20003006:	b002      	add	sp, #8
20003008:	bd80      	pop	{r7, pc}
2000300a:	46c0      	nop			; (mov r8, r8)
2000300c:	40023800 	andmi	r3, r2, r0, lsl #16

20003010 <RCC_APB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
20003010:	b580      	push	{r7, lr}
20003012:	b082      	sub	sp, #8
20003014:	af00      	add	r7, sp, #0
20003016:	6078      	str	r0, [r7, #4]
20003018:	000a      	movs	r2, r1
2000301a:	1cfb      	adds	r3, r7, #3
2000301c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_RESET_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
2000301e:	1cfb      	adds	r3, r7, #3
20003020:	781b      	ldrb	r3, [r3, #0]
20003022:	2b00      	cmp	r3, #0
20003024:	d006      	beq.n	20003034 <RCC_APB2PeriphResetCmd+0x24>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
20003026:	4b09      	ldr	r3, [pc, #36]	; (2000304c <RCC_APB2PeriphResetCmd+0x3c>)
20003028:	6a59      	ldr	r1, [r3, #36]	; 0x24
2000302a:	4b08      	ldr	r3, [pc, #32]	; (2000304c <RCC_APB2PeriphResetCmd+0x3c>)
2000302c:	687a      	ldr	r2, [r7, #4]
2000302e:	430a      	orrs	r2, r1
20003030:	625a      	str	r2, [r3, #36]	; 0x24
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
  }
}
20003032:	e006      	b.n	20003042 <RCC_APB2PeriphResetCmd+0x32>
    RCC->APB2RSTR &= ~RCC_APB2Periph;
20003034:	4b05      	ldr	r3, [pc, #20]	; (2000304c <RCC_APB2PeriphResetCmd+0x3c>)
20003036:	6a5a      	ldr	r2, [r3, #36]	; 0x24
20003038:	687b      	ldr	r3, [r7, #4]
2000303a:	43d9      	mvns	r1, r3
2000303c:	4b03      	ldr	r3, [pc, #12]	; (2000304c <RCC_APB2PeriphResetCmd+0x3c>)
2000303e:	400a      	ands	r2, r1
20003040:	625a      	str	r2, [r3, #36]	; 0x24
}
20003042:	46c0      	nop			; (mov r8, r8)
20003044:	46bd      	mov	sp, r7
20003046:	b002      	add	sp, #8
20003048:	bd80      	pop	{r7, pc}
2000304a:	46c0      	nop			; (mov r8, r8)
2000304c:	40023800 	andmi	r3, r2, r0, lsl #16

20003050 <RCC_AHB1PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockLPModeCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
20003050:	b580      	push	{r7, lr}
20003052:	b082      	sub	sp, #8
20003054:	af00      	add	r7, sp, #0
20003056:	6078      	str	r0, [r7, #4]
20003058:	000a      	movs	r2, r1
2000305a:	1cfb      	adds	r3, r7, #3
2000305c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_LPMODE_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
2000305e:	1cfb      	adds	r3, r7, #3
20003060:	781b      	ldrb	r3, [r3, #0]
20003062:	2b00      	cmp	r3, #0
20003064:	d006      	beq.n	20003074 <RCC_AHB1PeriphClockLPModeCmd+0x24>
  {
    RCC->AHB1LPENR |= RCC_AHB1Periph;
20003066:	4b09      	ldr	r3, [pc, #36]	; (2000308c <RCC_AHB1PeriphClockLPModeCmd+0x3c>)
20003068:	6d19      	ldr	r1, [r3, #80]	; 0x50
2000306a:	4b08      	ldr	r3, [pc, #32]	; (2000308c <RCC_AHB1PeriphClockLPModeCmd+0x3c>)
2000306c:	687a      	ldr	r2, [r7, #4]
2000306e:	430a      	orrs	r2, r1
20003070:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    RCC->AHB1LPENR &= ~RCC_AHB1Periph;
  }
}
20003072:	e006      	b.n	20003082 <RCC_AHB1PeriphClockLPModeCmd+0x32>
    RCC->AHB1LPENR &= ~RCC_AHB1Periph;
20003074:	4b05      	ldr	r3, [pc, #20]	; (2000308c <RCC_AHB1PeriphClockLPModeCmd+0x3c>)
20003076:	6d1a      	ldr	r2, [r3, #80]	; 0x50
20003078:	687b      	ldr	r3, [r7, #4]
2000307a:	43d9      	mvns	r1, r3
2000307c:	4b03      	ldr	r3, [pc, #12]	; (2000308c <RCC_AHB1PeriphClockLPModeCmd+0x3c>)
2000307e:	400a      	ands	r2, r1
20003080:	651a      	str	r2, [r3, #80]	; 0x50
}
20003082:	46c0      	nop			; (mov r8, r8)
20003084:	46bd      	mov	sp, r7
20003086:	b002      	add	sp, #8
20003088:	bd80      	pop	{r7, pc}
2000308a:	46c0      	nop			; (mov r8, r8)
2000308c:	40023800 	andmi	r3, r2, r0, lsl #16

20003090 <RCC_AHB2PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB2PeriphClockLPModeCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
{
20003090:	b580      	push	{r7, lr}
20003092:	b082      	sub	sp, #8
20003094:	af00      	add	r7, sp, #0
20003096:	6078      	str	r0, [r7, #4]
20003098:	000a      	movs	r2, r1
2000309a:	1cfb      	adds	r3, r7, #3
2000309c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
2000309e:	1cfb      	adds	r3, r7, #3
200030a0:	781b      	ldrb	r3, [r3, #0]
200030a2:	2b00      	cmp	r3, #0
200030a4:	d006      	beq.n	200030b4 <RCC_AHB2PeriphClockLPModeCmd+0x24>
  {
    RCC->AHB2LPENR |= RCC_AHB2Periph;
200030a6:	4b09      	ldr	r3, [pc, #36]	; (200030cc <RCC_AHB2PeriphClockLPModeCmd+0x3c>)
200030a8:	6d59      	ldr	r1, [r3, #84]	; 0x54
200030aa:	4b08      	ldr	r3, [pc, #32]	; (200030cc <RCC_AHB2PeriphClockLPModeCmd+0x3c>)
200030ac:	687a      	ldr	r2, [r7, #4]
200030ae:	430a      	orrs	r2, r1
200030b0:	655a      	str	r2, [r3, #84]	; 0x54
  }
  else
  {
    RCC->AHB2LPENR &= ~RCC_AHB2Periph;
  }
}
200030b2:	e006      	b.n	200030c2 <RCC_AHB2PeriphClockLPModeCmd+0x32>
    RCC->AHB2LPENR &= ~RCC_AHB2Periph;
200030b4:	4b05      	ldr	r3, [pc, #20]	; (200030cc <RCC_AHB2PeriphClockLPModeCmd+0x3c>)
200030b6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
200030b8:	687b      	ldr	r3, [r7, #4]
200030ba:	43d9      	mvns	r1, r3
200030bc:	4b03      	ldr	r3, [pc, #12]	; (200030cc <RCC_AHB2PeriphClockLPModeCmd+0x3c>)
200030be:	400a      	ands	r2, r1
200030c0:	655a      	str	r2, [r3, #84]	; 0x54
}
200030c2:	46c0      	nop			; (mov r8, r8)
200030c4:	46bd      	mov	sp, r7
200030c6:	b002      	add	sp, #8
200030c8:	bd80      	pop	{r7, pc}
200030ca:	46c0      	nop			; (mov r8, r8)
200030cc:	40023800 	andmi	r3, r2, r0, lsl #16

200030d0 <RCC_AHB3PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB3PeriphClockLPModeCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
{
200030d0:	b580      	push	{r7, lr}
200030d2:	b082      	sub	sp, #8
200030d4:	af00      	add	r7, sp, #0
200030d6:	6078      	str	r0, [r7, #4]
200030d8:	000a      	movs	r2, r1
200030da:	1cfb      	adds	r3, r7, #3
200030dc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
200030de:	1cfb      	adds	r3, r7, #3
200030e0:	781b      	ldrb	r3, [r3, #0]
200030e2:	2b00      	cmp	r3, #0
200030e4:	d006      	beq.n	200030f4 <RCC_AHB3PeriphClockLPModeCmd+0x24>
  {
    RCC->AHB3LPENR |= RCC_AHB3Periph;
200030e6:	4b09      	ldr	r3, [pc, #36]	; (2000310c <RCC_AHB3PeriphClockLPModeCmd+0x3c>)
200030e8:	6d99      	ldr	r1, [r3, #88]	; 0x58
200030ea:	4b08      	ldr	r3, [pc, #32]	; (2000310c <RCC_AHB3PeriphClockLPModeCmd+0x3c>)
200030ec:	687a      	ldr	r2, [r7, #4]
200030ee:	430a      	orrs	r2, r1
200030f0:	659a      	str	r2, [r3, #88]	; 0x58
  }
  else
  {
    RCC->AHB3LPENR &= ~RCC_AHB3Periph;
  }
}
200030f2:	e006      	b.n	20003102 <RCC_AHB3PeriphClockLPModeCmd+0x32>
    RCC->AHB3LPENR &= ~RCC_AHB3Periph;
200030f4:	4b05      	ldr	r3, [pc, #20]	; (2000310c <RCC_AHB3PeriphClockLPModeCmd+0x3c>)
200030f6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
200030f8:	687b      	ldr	r3, [r7, #4]
200030fa:	43d9      	mvns	r1, r3
200030fc:	4b03      	ldr	r3, [pc, #12]	; (2000310c <RCC_AHB3PeriphClockLPModeCmd+0x3c>)
200030fe:	400a      	ands	r2, r1
20003100:	659a      	str	r2, [r3, #88]	; 0x58
}
20003102:	46c0      	nop			; (mov r8, r8)
20003104:	46bd      	mov	sp, r7
20003106:	b002      	add	sp, #8
20003108:	bd80      	pop	{r7, pc}
2000310a:	46c0      	nop			; (mov r8, r8)
2000310c:	40023800 	andmi	r3, r2, r0, lsl #16

20003110 <RCC_APB1PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockLPModeCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
20003110:	b580      	push	{r7, lr}
20003112:	b082      	sub	sp, #8
20003114:	af00      	add	r7, sp, #0
20003116:	6078      	str	r0, [r7, #4]
20003118:	000a      	movs	r2, r1
2000311a:	1cfb      	adds	r3, r7, #3
2000311c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
2000311e:	1cfb      	adds	r3, r7, #3
20003120:	781b      	ldrb	r3, [r3, #0]
20003122:	2b00      	cmp	r3, #0
20003124:	d006      	beq.n	20003134 <RCC_APB1PeriphClockLPModeCmd+0x24>
  {
    RCC->APB1LPENR |= RCC_APB1Periph;
20003126:	4b09      	ldr	r3, [pc, #36]	; (2000314c <RCC_APB1PeriphClockLPModeCmd+0x3c>)
20003128:	6e19      	ldr	r1, [r3, #96]	; 0x60
2000312a:	4b08      	ldr	r3, [pc, #32]	; (2000314c <RCC_APB1PeriphClockLPModeCmd+0x3c>)
2000312c:	687a      	ldr	r2, [r7, #4]
2000312e:	430a      	orrs	r2, r1
20003130:	661a      	str	r2, [r3, #96]	; 0x60
  }
  else
  {
    RCC->APB1LPENR &= ~RCC_APB1Periph;
  }
}
20003132:	e006      	b.n	20003142 <RCC_APB1PeriphClockLPModeCmd+0x32>
    RCC->APB1LPENR &= ~RCC_APB1Periph;
20003134:	4b05      	ldr	r3, [pc, #20]	; (2000314c <RCC_APB1PeriphClockLPModeCmd+0x3c>)
20003136:	6e1a      	ldr	r2, [r3, #96]	; 0x60
20003138:	687b      	ldr	r3, [r7, #4]
2000313a:	43d9      	mvns	r1, r3
2000313c:	4b03      	ldr	r3, [pc, #12]	; (2000314c <RCC_APB1PeriphClockLPModeCmd+0x3c>)
2000313e:	400a      	ands	r2, r1
20003140:	661a      	str	r2, [r3, #96]	; 0x60
}
20003142:	46c0      	nop			; (mov r8, r8)
20003144:	46bd      	mov	sp, r7
20003146:	b002      	add	sp, #8
20003148:	bd80      	pop	{r7, pc}
2000314a:	46c0      	nop			; (mov r8, r8)
2000314c:	40023800 	andmi	r3, r2, r0, lsl #16

20003150 <RCC_APB2PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockLPModeCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
20003150:	b580      	push	{r7, lr}
20003152:	b082      	sub	sp, #8
20003154:	af00      	add	r7, sp, #0
20003156:	6078      	str	r0, [r7, #4]
20003158:	000a      	movs	r2, r1
2000315a:	1cfb      	adds	r3, r7, #3
2000315c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
2000315e:	1cfb      	adds	r3, r7, #3
20003160:	781b      	ldrb	r3, [r3, #0]
20003162:	2b00      	cmp	r3, #0
20003164:	d006      	beq.n	20003174 <RCC_APB2PeriphClockLPModeCmd+0x24>
  {
    RCC->APB2LPENR |= RCC_APB2Periph;
20003166:	4b09      	ldr	r3, [pc, #36]	; (2000318c <RCC_APB2PeriphClockLPModeCmd+0x3c>)
20003168:	6e59      	ldr	r1, [r3, #100]	; 0x64
2000316a:	4b08      	ldr	r3, [pc, #32]	; (2000318c <RCC_APB2PeriphClockLPModeCmd+0x3c>)
2000316c:	687a      	ldr	r2, [r7, #4]
2000316e:	430a      	orrs	r2, r1
20003170:	665a      	str	r2, [r3, #100]	; 0x64
  }
  else
  {
    RCC->APB2LPENR &= ~RCC_APB2Periph;
  }
}
20003172:	e006      	b.n	20003182 <RCC_APB2PeriphClockLPModeCmd+0x32>
    RCC->APB2LPENR &= ~RCC_APB2Periph;
20003174:	4b05      	ldr	r3, [pc, #20]	; (2000318c <RCC_APB2PeriphClockLPModeCmd+0x3c>)
20003176:	6e5a      	ldr	r2, [r3, #100]	; 0x64
20003178:	687b      	ldr	r3, [r7, #4]
2000317a:	43d9      	mvns	r1, r3
2000317c:	4b03      	ldr	r3, [pc, #12]	; (2000318c <RCC_APB2PeriphClockLPModeCmd+0x3c>)
2000317e:	400a      	ands	r2, r1
20003180:	665a      	str	r2, [r3, #100]	; 0x64
}
20003182:	46c0      	nop			; (mov r8, r8)
20003184:	46bd      	mov	sp, r7
20003186:	b002      	add	sp, #8
20003188:	bd80      	pop	{r7, pc}
2000318a:	46c0      	nop			; (mov r8, r8)
2000318c:	40023800 	andmi	r3, r2, r0, lsl #16

20003190 <RCC_LSEModeConfig>:
  *            @arg RCC_LSE_LOWPOWER_MODE:  LSE oscillator in low power mode.
  *            @arg RCC_LSE_HIGHDRIVE_MODE: LSE oscillator in High Drive mode.
  * @retval None
  */
void RCC_LSEModeConfig(uint8_t RCC_Mode)
{
20003190:	b580      	push	{r7, lr}
20003192:	b082      	sub	sp, #8
20003194:	af00      	add	r7, sp, #0
20003196:	0002      	movs	r2, r0
20003198:	1dfb      	adds	r3, r7, #7
2000319a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_LSE_MODE(RCC_Mode));
  
  if(RCC_Mode == RCC_LSE_HIGHDRIVE_MODE)
2000319c:	1dfb      	adds	r3, r7, #7
2000319e:	781b      	ldrb	r3, [r3, #0]
200031a0:	2b01      	cmp	r3, #1
200031a2:	d106      	bne.n	200031b2 <RCC_LSEModeConfig+0x22>
  {
    SET_BIT(RCC->BDCR, RCC_BDCR_LSEMOD);
200031a4:	4b08      	ldr	r3, [pc, #32]	; (200031c8 <RCC_LSEModeConfig+0x38>)
200031a6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
200031a8:	4b07      	ldr	r3, [pc, #28]	; (200031c8 <RCC_LSEModeConfig+0x38>)
200031aa:	2108      	movs	r1, #8
200031ac:	430a      	orrs	r2, r1
200031ae:	671a      	str	r2, [r3, #112]	; 0x70
  }
  else
  {
    CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEMOD);
  }
}
200031b0:	e005      	b.n	200031be <RCC_LSEModeConfig+0x2e>
    CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEMOD);
200031b2:	4b05      	ldr	r3, [pc, #20]	; (200031c8 <RCC_LSEModeConfig+0x38>)
200031b4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
200031b6:	4b04      	ldr	r3, [pc, #16]	; (200031c8 <RCC_LSEModeConfig+0x38>)
200031b8:	2108      	movs	r1, #8
200031ba:	438a      	bics	r2, r1
200031bc:	671a      	str	r2, [r3, #112]	; 0x70
}
200031be:	46c0      	nop			; (mov r8, r8)
200031c0:	46bd      	mov	sp, r7
200031c2:	b002      	add	sp, #8
200031c4:	bd80      	pop	{r7, pc}
200031c6:	46c0      	nop			; (mov r8, r8)
200031c8:	40023800 	andmi	r3, r2, r0, lsl #16

200031cc <RCC_ITConfig>:
  * @param  NewState: new state of the specified RCC interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_ITConfig(uint8_t RCC_IT, FunctionalState NewState)
{
200031cc:	b580      	push	{r7, lr}
200031ce:	b082      	sub	sp, #8
200031d0:	af00      	add	r7, sp, #0
200031d2:	0002      	movs	r2, r0
200031d4:	1dfb      	adds	r3, r7, #7
200031d6:	701a      	strb	r2, [r3, #0]
200031d8:	1dbb      	adds	r3, r7, #6
200031da:	1c0a      	adds	r2, r1, #0
200031dc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_IT(RCC_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
200031de:	1dbb      	adds	r3, r7, #6
200031e0:	781b      	ldrb	r3, [r3, #0]
200031e2:	2b00      	cmp	r3, #0
200031e4:	d009      	beq.n	200031fa <RCC_ITConfig+0x2e>
  {
    /* Perform Byte access to RCC_CIR[14:8] bits to enable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS |= RCC_IT;
200031e6:	4b0c      	ldr	r3, [pc, #48]	; (20003218 <RCC_ITConfig+0x4c>)
200031e8:	781b      	ldrb	r3, [r3, #0]
200031ea:	b2da      	uxtb	r2, r3
200031ec:	490a      	ldr	r1, [pc, #40]	; (20003218 <RCC_ITConfig+0x4c>)
200031ee:	1dfb      	adds	r3, r7, #7
200031f0:	781b      	ldrb	r3, [r3, #0]
200031f2:	4313      	orrs	r3, r2
200031f4:	b2db      	uxtb	r3, r3
200031f6:	700b      	strb	r3, [r1, #0]
  else
  {
    /* Perform Byte access to RCC_CIR[14:8] bits to disable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS &= (uint8_t)~RCC_IT;
  }
}
200031f8:	e00a      	b.n	20003210 <RCC_ITConfig+0x44>
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS &= (uint8_t)~RCC_IT;
200031fa:	4b07      	ldr	r3, [pc, #28]	; (20003218 <RCC_ITConfig+0x4c>)
200031fc:	781b      	ldrb	r3, [r3, #0]
200031fe:	b2db      	uxtb	r3, r3
20003200:	1dfa      	adds	r2, r7, #7
20003202:	7812      	ldrb	r2, [r2, #0]
20003204:	43d2      	mvns	r2, r2
20003206:	b2d2      	uxtb	r2, r2
20003208:	4903      	ldr	r1, [pc, #12]	; (20003218 <RCC_ITConfig+0x4c>)
2000320a:	4013      	ands	r3, r2
2000320c:	b2db      	uxtb	r3, r3
2000320e:	700b      	strb	r3, [r1, #0]
}
20003210:	46c0      	nop			; (mov r8, r8)
20003212:	46bd      	mov	sp, r7
20003214:	b002      	add	sp, #8
20003216:	bd80      	pop	{r7, pc}
20003218:	4002380d 	andmi	r3, r2, sp, lsl #16

2000321c <RCC_GetFlagStatus>:
  *            @arg RCC_FLAG_WWDGRST: Window Watchdog reset
  *            @arg RCC_FLAG_LPWRRST: Low Power reset
  * @retval The new state of RCC_FLAG (SET or RESET).
  */
FlagStatus RCC_GetFlagStatus(uint8_t RCC_FLAG)
{
2000321c:	b580      	push	{r7, lr}
2000321e:	b086      	sub	sp, #24
20003220:	af00      	add	r7, sp, #0
20003222:	0002      	movs	r2, r0
20003224:	1dfb      	adds	r3, r7, #7
20003226:	701a      	strb	r2, [r3, #0]
  uint32_t tmp = 0;
20003228:	2300      	movs	r3, #0
2000322a:	60fb      	str	r3, [r7, #12]
  uint32_t statusreg = 0;
2000322c:	2300      	movs	r3, #0
2000322e:	617b      	str	r3, [r7, #20]
  FlagStatus bitstatus = RESET;
20003230:	2313      	movs	r3, #19
20003232:	18fb      	adds	r3, r7, r3
20003234:	2200      	movs	r2, #0
20003236:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_FLAG(RCC_FLAG));

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
20003238:	1dfb      	adds	r3, r7, #7
2000323a:	781b      	ldrb	r3, [r3, #0]
2000323c:	095b      	lsrs	r3, r3, #5
2000323e:	b2db      	uxtb	r3, r3
20003240:	60fb      	str	r3, [r7, #12]
  if (tmp == 1)               /* The flag to check is in CR register */
20003242:	68fb      	ldr	r3, [r7, #12]
20003244:	2b01      	cmp	r3, #1
20003246:	d103      	bne.n	20003250 <RCC_GetFlagStatus+0x34>
  {
    statusreg = RCC->CR;
20003248:	4b14      	ldr	r3, [pc, #80]	; (2000329c <RCC_GetFlagStatus+0x80>)
2000324a:	681b      	ldr	r3, [r3, #0]
2000324c:	617b      	str	r3, [r7, #20]
2000324e:	e009      	b.n	20003264 <RCC_GetFlagStatus+0x48>
  }
  else if (tmp == 2)          /* The flag to check is in BDCR register */
20003250:	68fb      	ldr	r3, [r7, #12]
20003252:	2b02      	cmp	r3, #2
20003254:	d103      	bne.n	2000325e <RCC_GetFlagStatus+0x42>
  {
    statusreg = RCC->BDCR;
20003256:	4b11      	ldr	r3, [pc, #68]	; (2000329c <RCC_GetFlagStatus+0x80>)
20003258:	6f1b      	ldr	r3, [r3, #112]	; 0x70
2000325a:	617b      	str	r3, [r7, #20]
2000325c:	e002      	b.n	20003264 <RCC_GetFlagStatus+0x48>
  }
  else                       /* The flag to check is in CSR register */
  {
    statusreg = RCC->CSR;
2000325e:	4b0f      	ldr	r3, [pc, #60]	; (2000329c <RCC_GetFlagStatus+0x80>)
20003260:	6f5b      	ldr	r3, [r3, #116]	; 0x74
20003262:	617b      	str	r3, [r7, #20]
  }

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_MASK;
20003264:	1dfb      	adds	r3, r7, #7
20003266:	781b      	ldrb	r3, [r3, #0]
20003268:	221f      	movs	r2, #31
2000326a:	4013      	ands	r3, r2
2000326c:	60fb      	str	r3, [r7, #12]
  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
2000326e:	697a      	ldr	r2, [r7, #20]
20003270:	68fb      	ldr	r3, [r7, #12]
20003272:	40da      	lsrs	r2, r3
20003274:	0013      	movs	r3, r2
20003276:	2201      	movs	r2, #1
20003278:	4013      	ands	r3, r2
2000327a:	d004      	beq.n	20003286 <RCC_GetFlagStatus+0x6a>
  {
    bitstatus = SET;
2000327c:	2313      	movs	r3, #19
2000327e:	18fb      	adds	r3, r7, r3
20003280:	2201      	movs	r2, #1
20003282:	701a      	strb	r2, [r3, #0]
20003284:	e003      	b.n	2000328e <RCC_GetFlagStatus+0x72>
  }
  else
  {
    bitstatus = RESET;
20003286:	2313      	movs	r3, #19
20003288:	18fb      	adds	r3, r7, r3
2000328a:	2200      	movs	r2, #0
2000328c:	701a      	strb	r2, [r3, #0]
  }
  /* Return the flag status */
  return bitstatus;
2000328e:	2313      	movs	r3, #19
20003290:	18fb      	adds	r3, r7, r3
20003292:	781b      	ldrb	r3, [r3, #0]
}
20003294:	0018      	movs	r0, r3
20003296:	46bd      	mov	sp, r7
20003298:	b006      	add	sp, #24
2000329a:	bd80      	pop	{r7, pc}
2000329c:	40023800 	andmi	r3, r2, r0, lsl #16

200032a0 <RCC_ClearFlag>:
  *         RCC_FLAG_IWDGRST, RCC_FLAG_WWDGRST, RCC_FLAG_LPWRRST
  * @param  None
  * @retval None
  */
void RCC_ClearFlag(void)
{
200032a0:	b580      	push	{r7, lr}
200032a2:	af00      	add	r7, sp, #0
  /* Set RMVF bit to clear the reset flags */
  RCC->CSR |= RCC_CSR_RMVF;
200032a4:	4b04      	ldr	r3, [pc, #16]	; (200032b8 <RCC_ClearFlag+0x18>)
200032a6:	6f5a      	ldr	r2, [r3, #116]	; 0x74
200032a8:	4b03      	ldr	r3, [pc, #12]	; (200032b8 <RCC_ClearFlag+0x18>)
200032aa:	2180      	movs	r1, #128	; 0x80
200032ac:	0449      	lsls	r1, r1, #17
200032ae:	430a      	orrs	r2, r1
200032b0:	675a      	str	r2, [r3, #116]	; 0x74
}
200032b2:	46c0      	nop			; (mov r8, r8)
200032b4:	46bd      	mov	sp, r7
200032b6:	bd80      	pop	{r7, pc}
200032b8:	40023800 	andmi	r3, r2, r0, lsl #16

200032bc <RCC_GetITStatus>:
  *            @arg RCC_IT_PLLSAIRDY: PLLSAI clock ready interrupt (only for STM32F42xxx/43xxx/446xx/469xx/479xx devices)
  *            @arg RCC_IT_CSS: Clock Security System interrupt
  * @retval The new state of RCC_IT (SET or RESET).
  */
ITStatus RCC_GetITStatus(uint8_t RCC_IT)
{
200032bc:	b580      	push	{r7, lr}
200032be:	b084      	sub	sp, #16
200032c0:	af00      	add	r7, sp, #0
200032c2:	0002      	movs	r2, r0
200032c4:	1dfb      	adds	r3, r7, #7
200032c6:	701a      	strb	r2, [r3, #0]
  ITStatus bitstatus = RESET;
200032c8:	230f      	movs	r3, #15
200032ca:	18fb      	adds	r3, r7, r3
200032cc:	2200      	movs	r2, #0
200032ce:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_GET_IT(RCC_IT));

  /* Check the status of the specified RCC interrupt */
  if ((RCC->CIR & RCC_IT) != (uint32_t)RESET)
200032d0:	4b0a      	ldr	r3, [pc, #40]	; (200032fc <RCC_GetITStatus+0x40>)
200032d2:	68db      	ldr	r3, [r3, #12]
200032d4:	1dfa      	adds	r2, r7, #7
200032d6:	7812      	ldrb	r2, [r2, #0]
200032d8:	4013      	ands	r3, r2
200032da:	d004      	beq.n	200032e6 <RCC_GetITStatus+0x2a>
  {
    bitstatus = SET;
200032dc:	230f      	movs	r3, #15
200032de:	18fb      	adds	r3, r7, r3
200032e0:	2201      	movs	r2, #1
200032e2:	701a      	strb	r2, [r3, #0]
200032e4:	e003      	b.n	200032ee <RCC_GetITStatus+0x32>
  }
  else
  {
    bitstatus = RESET;
200032e6:	230f      	movs	r3, #15
200032e8:	18fb      	adds	r3, r7, r3
200032ea:	2200      	movs	r2, #0
200032ec:	701a      	strb	r2, [r3, #0]
  }
  /* Return the RCC_IT status */
  return  bitstatus;
200032ee:	230f      	movs	r3, #15
200032f0:	18fb      	adds	r3, r7, r3
200032f2:	781b      	ldrb	r3, [r3, #0]
}
200032f4:	0018      	movs	r0, r3
200032f6:	46bd      	mov	sp, r7
200032f8:	b004      	add	sp, #16
200032fa:	bd80      	pop	{r7, pc}
200032fc:	40023800 	andmi	r3, r2, r0, lsl #16

20003300 <RCC_ClearITPendingBit>:
  *            @arg RCC_IT_PLLSAIRDY: PLLSAI ready interrupt (only for STM32F42xxx/43xxx/446xx/469xx/479xx devices) 
  *            @arg RCC_IT_CSS: Clock Security System interrupt
  * @retval None
  */
void RCC_ClearITPendingBit(uint8_t RCC_IT)
{
20003300:	b580      	push	{r7, lr}
20003302:	b082      	sub	sp, #8
20003304:	af00      	add	r7, sp, #0
20003306:	0002      	movs	r2, r0
20003308:	1dfb      	adds	r3, r7, #7
2000330a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_CLEAR_IT(RCC_IT));

  /* Perform Byte access to RCC_CIR[23:16] bits to clear the selected interrupt
     pending bits */
  *(__IO uint8_t *) CIR_BYTE3_ADDRESS = RCC_IT;
2000330c:	4a03      	ldr	r2, [pc, #12]	; (2000331c <RCC_ClearITPendingBit+0x1c>)
2000330e:	1dfb      	adds	r3, r7, #7
20003310:	781b      	ldrb	r3, [r3, #0]
20003312:	7013      	strb	r3, [r2, #0]
}
20003314:	46c0      	nop			; (mov r8, r8)
20003316:	46bd      	mov	sp, r7
20003318:	b002      	add	sp, #8
2000331a:	bd80      	pop	{r7, pc}
2000331c:	4002380e 	andmi	r3, r2, lr, lsl #16

20003320 <init_GPIO_Ports>:
//======================================GPIO=========================================================
void init_GPIO_Ports()
{
20003320:	b580      	push	{r7, lr}
20003322:	b082      	sub	sp, #8
20003324:	af00      	add	r7, sp, #0
	/*  Function used to set the GPIO configuration to the default reset state ****/
	GPIO_InitTypeDef init;
	//GPIO E UTPORTAR
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOE, ENABLE);
20003326:	2101      	movs	r1, #1
20003328:	2010      	movs	r0, #16
2000332a:	f7ff fd51 	bl	20002dd0 <RCC_AHB1PeriphClockCmd>
	GPIO_StructInit(&init);
2000332e:	003b      	movs	r3, r7
20003330:	0018      	movs	r0, r3
20003332:	f7fe fc5f 	bl	20001bf4 <GPIO_StructInit>
	init.GPIO_Pin = GPIO_Pin_1 | GPIO_Pin_3 | GPIO_Pin_5 | GPIO_Pin_7 | GPIO_Pin_9 | GPIO_Pin_11 | GPIO_Pin_13 | GPIO_Pin_15;
20003336:	003b      	movs	r3, r7
20003338:	4a64      	ldr	r2, [pc, #400]	; (200034cc <init_GPIO_Ports+0x1ac>)
2000333a:	601a      	str	r2, [r3, #0]
	init.GPIO_Mode = GPIO_Mode_OUT;
2000333c:	003b      	movs	r3, r7
2000333e:	2201      	movs	r2, #1
20003340:	711a      	strb	r2, [r3, #4]
	init.GPIO_OType = GPIO_OType_PP;
20003342:	003b      	movs	r3, r7
20003344:	2200      	movs	r2, #0
20003346:	719a      	strb	r2, [r3, #6]
	init.GPIO_PuPd = GPIO_PuPd_NOPULL;
20003348:	003b      	movs	r3, r7
2000334a:	2200      	movs	r2, #0
2000334c:	71da      	strb	r2, [r3, #7]
	GPIO_Init(GPIOE, &init);
2000334e:	003b      	movs	r3, r7
20003350:	4a5f      	ldr	r2, [pc, #380]	; (200034d0 <init_GPIO_Ports+0x1b0>)
20003352:	0019      	movs	r1, r3
20003354:	0010      	movs	r0, r2
20003356:	f7fe fbc1 	bl	20001adc <GPIO_Init>
	
	//konfigurerar inport GPIO E
	GPIO_StructInit(&init);
2000335a:	003b      	movs	r3, r7
2000335c:	0018      	movs	r0, r3
2000335e:	f7fe fc49 	bl	20001bf4 <GPIO_StructInit>
	init.GPIO_Pin = GPIO_Pin_0 | GPIO_Pin_2 | GPIO_Pin_4 | GPIO_Pin_6 | GPIO_Pin_8 | GPIO_Pin_10 | GPIO_Pin_12 |GPIO_Pin_14;
20003362:	003b      	movs	r3, r7
20003364:	4a5b      	ldr	r2, [pc, #364]	; (200034d4 <init_GPIO_Ports+0x1b4>)
20003366:	601a      	str	r2, [r3, #0]
	init.GPIO_Mode = GPIO_Mode_IN;
20003368:	003b      	movs	r3, r7
2000336a:	2200      	movs	r2, #0
2000336c:	711a      	strb	r2, [r3, #4]
	init.GPIO_PuPd = GPIO_PuPd_UP;
2000336e:	003b      	movs	r3, r7
20003370:	2201      	movs	r2, #1
20003372:	71da      	strb	r2, [r3, #7]
	GPIO_Init(GPIOE, &init);
20003374:	003b      	movs	r3, r7
20003376:	4a56      	ldr	r2, [pc, #344]	; (200034d0 <init_GPIO_Ports+0x1b0>)
20003378:	0019      	movs	r1, r3
2000337a:	0010      	movs	r0, r2
2000337c:	f7fe fbae 	bl	20001adc <GPIO_Init>

    //GPIOA UTPORTAR
    RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
20003380:	2101      	movs	r1, #1
20003382:	2001      	movs	r0, #1
20003384:	f7ff fd24 	bl	20002dd0 <RCC_AHB1PeriphClockCmd>
	GPIO_StructInit(&init);
20003388:	003b      	movs	r3, r7
2000338a:	0018      	movs	r0, r3
2000338c:	f7fe fc32 	bl	20001bf4 <GPIO_StructInit>
	init.GPIO_Pin = GPIO_Pin_1 | GPIO_Pin_3 | GPIO_Pin_5 | GPIO_Pin_7 | GPIO_Pin_9 | GPIO_Pin_11 | GPIO_Pin_13 | GPIO_Pin_15;
20003390:	003b      	movs	r3, r7
20003392:	4a4e      	ldr	r2, [pc, #312]	; (200034cc <init_GPIO_Ports+0x1ac>)
20003394:	601a      	str	r2, [r3, #0]
	init.GPIO_Mode = GPIO_Mode_OUT;
20003396:	003b      	movs	r3, r7
20003398:	2201      	movs	r2, #1
2000339a:	711a      	strb	r2, [r3, #4]
	init.GPIO_OType = GPIO_OType_PP;
2000339c:	003b      	movs	r3, r7
2000339e:	2200      	movs	r2, #0
200033a0:	719a      	strb	r2, [r3, #6]
	init.GPIO_PuPd = GPIO_PuPd_NOPULL;
200033a2:	003b      	movs	r3, r7
200033a4:	2200      	movs	r2, #0
200033a6:	71da      	strb	r2, [r3, #7]
	GPIO_Init(GPIOA, &init);
200033a8:	003b      	movs	r3, r7
200033aa:	4a4b      	ldr	r2, [pc, #300]	; (200034d8 <init_GPIO_Ports+0x1b8>)
200033ac:	0019      	movs	r1, r3
200033ae:	0010      	movs	r0, r2
200033b0:	f7fe fb94 	bl	20001adc <GPIO_Init>
	
	//konfigurerar inport GPIO a
	GPIO_StructInit(&init);
200033b4:	003b      	movs	r3, r7
200033b6:	0018      	movs	r0, r3
200033b8:	f7fe fc1c 	bl	20001bf4 <GPIO_StructInit>
	init.GPIO_Pin = GPIO_Pin_0 | GPIO_Pin_2 | GPIO_Pin_4 | GPIO_Pin_6 | GPIO_Pin_8 | GPIO_Pin_10 | GPIO_Pin_12 |GPIO_Pin_14;
200033bc:	003b      	movs	r3, r7
200033be:	4a45      	ldr	r2, [pc, #276]	; (200034d4 <init_GPIO_Ports+0x1b4>)
200033c0:	601a      	str	r2, [r3, #0]
	init.GPIO_Mode = GPIO_Mode_IN;
200033c2:	003b      	movs	r3, r7
200033c4:	2200      	movs	r2, #0
200033c6:	711a      	strb	r2, [r3, #4]
	init.GPIO_PuPd = GPIO_PuPd_UP;
200033c8:	003b      	movs	r3, r7
200033ca:	2201      	movs	r2, #1
200033cc:	71da      	strb	r2, [r3, #7]
	GPIO_Init(GPIOA, &init);
200033ce:	003b      	movs	r3, r7
200033d0:	4a41      	ldr	r2, [pc, #260]	; (200034d8 <init_GPIO_Ports+0x1b8>)
200033d2:	0019      	movs	r1, r3
200033d4:	0010      	movs	r0, r2
200033d6:	f7fe fb81 	bl	20001adc <GPIO_Init>

	//GPIO C UTPORTAR
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC, ENABLE);
200033da:	2101      	movs	r1, #1
200033dc:	2004      	movs	r0, #4
200033de:	f7ff fcf7 	bl	20002dd0 <RCC_AHB1PeriphClockCmd>
	GPIO_StructInit(&init);
200033e2:	003b      	movs	r3, r7
200033e4:	0018      	movs	r0, r3
200033e6:	f7fe fc05 	bl	20001bf4 <GPIO_StructInit>
	init.GPIO_Pin = GPIO_Pin_1 | GPIO_Pin_3 | GPIO_Pin_5 | GPIO_Pin_7 | GPIO_Pin_9 | GPIO_Pin_11 | GPIO_Pin_13 | GPIO_Pin_15;
200033ea:	003b      	movs	r3, r7
200033ec:	4a37      	ldr	r2, [pc, #220]	; (200034cc <init_GPIO_Ports+0x1ac>)
200033ee:	601a      	str	r2, [r3, #0]
	init.GPIO_Mode = GPIO_Mode_OUT;
200033f0:	003b      	movs	r3, r7
200033f2:	2201      	movs	r2, #1
200033f4:	711a      	strb	r2, [r3, #4]
	init.GPIO_OType = GPIO_OType_PP;
200033f6:	003b      	movs	r3, r7
200033f8:	2200      	movs	r2, #0
200033fa:	719a      	strb	r2, [r3, #6]
	init.GPIO_PuPd = GPIO_PuPd_NOPULL;
200033fc:	003b      	movs	r3, r7
200033fe:	2200      	movs	r2, #0
20003400:	71da      	strb	r2, [r3, #7]
	GPIO_Init(GPIOC, &init);
20003402:	003b      	movs	r3, r7
20003404:	4a35      	ldr	r2, [pc, #212]	; (200034dc <init_GPIO_Ports+0x1bc>)
20003406:	0019      	movs	r1, r3
20003408:	0010      	movs	r0, r2
2000340a:	f7fe fb67 	bl	20001adc <GPIO_Init>
	
	//konfigurerar inport GPIO C
	GPIO_StructInit(&init);
2000340e:	003b      	movs	r3, r7
20003410:	0018      	movs	r0, r3
20003412:	f7fe fbef 	bl	20001bf4 <GPIO_StructInit>
	init.GPIO_Pin = GPIO_Pin_0 | GPIO_Pin_2 | GPIO_Pin_4 | GPIO_Pin_6 | GPIO_Pin_8 | GPIO_Pin_10 | GPIO_Pin_12 |GPIO_Pin_14;
20003416:	003b      	movs	r3, r7
20003418:	4a2e      	ldr	r2, [pc, #184]	; (200034d4 <init_GPIO_Ports+0x1b4>)
2000341a:	601a      	str	r2, [r3, #0]
	init.GPIO_Mode = GPIO_Mode_IN;
2000341c:	003b      	movs	r3, r7
2000341e:	2200      	movs	r2, #0
20003420:	711a      	strb	r2, [r3, #4]
	init.GPIO_PuPd = GPIO_PuPd_UP;
20003422:	003b      	movs	r3, r7
20003424:	2201      	movs	r2, #1
20003426:	71da      	strb	r2, [r3, #7]
	GPIO_Init(GPIOC, &init);
20003428:	003b      	movs	r3, r7
2000342a:	4a2c      	ldr	r2, [pc, #176]	; (200034dc <init_GPIO_Ports+0x1bc>)
2000342c:	0019      	movs	r1, r3
2000342e:	0010      	movs	r0, r2
20003430:	f7fe fb54 	bl	20001adc <GPIO_Init>

	//GPIO D UTPORTAR
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOD, ENABLE);
20003434:	2101      	movs	r1, #1
20003436:	2008      	movs	r0, #8
20003438:	f7ff fcca 	bl	20002dd0 <RCC_AHB1PeriphClockCmd>
	GPIO_StructInit(&init);
2000343c:	003b      	movs	r3, r7
2000343e:	0018      	movs	r0, r3
20003440:	f7fe fbd8 	bl	20001bf4 <GPIO_StructInit>
	init.GPIO_Pin = GPIO_Pin_1 | GPIO_Pin_3 | GPIO_Pin_5 | GPIO_Pin_7 | GPIO_Pin_9 | GPIO_Pin_11 | GPIO_Pin_13 | GPIO_Pin_15;
20003444:	003b      	movs	r3, r7
20003446:	4a21      	ldr	r2, [pc, #132]	; (200034cc <init_GPIO_Ports+0x1ac>)
20003448:	601a      	str	r2, [r3, #0]
	init.GPIO_Mode = GPIO_Mode_OUT;
2000344a:	003b      	movs	r3, r7
2000344c:	2201      	movs	r2, #1
2000344e:	711a      	strb	r2, [r3, #4]
	init.GPIO_OType = GPIO_OType_PP;
20003450:	003b      	movs	r3, r7
20003452:	2200      	movs	r2, #0
20003454:	719a      	strb	r2, [r3, #6]
	init.GPIO_PuPd = GPIO_PuPd_NOPULL;
20003456:	003b      	movs	r3, r7
20003458:	2200      	movs	r2, #0
2000345a:	71da      	strb	r2, [r3, #7]
	GPIO_Init(GPIOD, &init);
2000345c:	003b      	movs	r3, r7
2000345e:	4a20      	ldr	r2, [pc, #128]	; (200034e0 <init_GPIO_Ports+0x1c0>)
20003460:	0019      	movs	r1, r3
20003462:	0010      	movs	r0, r2
20003464:	f7fe fb3a 	bl	20001adc <GPIO_Init>
	
	//konfigurerar inport GPIO D
	GPIO_StructInit(&init);
20003468:	003b      	movs	r3, r7
2000346a:	0018      	movs	r0, r3
2000346c:	f7fe fbc2 	bl	20001bf4 <GPIO_StructInit>
	init.GPIO_Pin = GPIO_Pin_0 | GPIO_Pin_2 | GPIO_Pin_4 | GPIO_Pin_6 | GPIO_Pin_8 | GPIO_Pin_10 | GPIO_Pin_12 |GPIO_Pin_14;
20003470:	003b      	movs	r3, r7
20003472:	4a18      	ldr	r2, [pc, #96]	; (200034d4 <init_GPIO_Ports+0x1b4>)
20003474:	601a      	str	r2, [r3, #0]
	init.GPIO_Mode = GPIO_Mode_IN;
20003476:	003b      	movs	r3, r7
20003478:	2200      	movs	r2, #0
2000347a:	711a      	strb	r2, [r3, #4]
	init.GPIO_PuPd = GPIO_PuPd_UP;
2000347c:	003b      	movs	r3, r7
2000347e:	2201      	movs	r2, #1
20003480:	71da      	strb	r2, [r3, #7]
	GPIO_Init(GPIOD, &init);
20003482:	003b      	movs	r3, r7
20003484:	4a16      	ldr	r2, [pc, #88]	; (200034e0 <init_GPIO_Ports+0x1c0>)
20003486:	0019      	movs	r1, r3
20003488:	0010      	movs	r0, r2
2000348a:	f7fe fb27 	bl	20001adc <GPIO_Init>

	//GPIO B UTPORTAR
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE);
2000348e:	2101      	movs	r1, #1
20003490:	2002      	movs	r0, #2
20003492:	f7ff fc9d 	bl	20002dd0 <RCC_AHB1PeriphClockCmd>
	GPIO_StructInit(&init);
20003496:	003b      	movs	r3, r7
20003498:	0018      	movs	r0, r3
2000349a:	f7fe fbab 	bl	20001bf4 <GPIO_StructInit>
	init.GPIO_Pin = GPIO_Pin_2;
2000349e:	003b      	movs	r3, r7
200034a0:	2204      	movs	r2, #4
200034a2:	601a      	str	r2, [r3, #0]
	init.GPIO_Mode = GPIO_Mode_OUT;
200034a4:	003b      	movs	r3, r7
200034a6:	2201      	movs	r2, #1
200034a8:	711a      	strb	r2, [r3, #4]
	init.GPIO_OType = GPIO_OType_PP;
200034aa:	003b      	movs	r3, r7
200034ac:	2200      	movs	r2, #0
200034ae:	719a      	strb	r2, [r3, #6]
	init.GPIO_PuPd = GPIO_PuPd_NOPULL;
200034b0:	003b      	movs	r3, r7
200034b2:	2200      	movs	r2, #0
200034b4:	71da      	strb	r2, [r3, #7]
	GPIO_Init(GPIOB, &init);
200034b6:	003b      	movs	r3, r7
200034b8:	4a0a      	ldr	r2, [pc, #40]	; (200034e4 <init_GPIO_Ports+0x1c4>)
200034ba:	0019      	movs	r1, r3
200034bc:	0010      	movs	r0, r2
200034be:	f7fe fb0d 	bl	20001adc <GPIO_Init>
200034c2:	46c0      	nop			; (mov r8, r8)
200034c4:	46bd      	mov	sp, r7
200034c6:	b002      	add	sp, #8
200034c8:	bd80      	pop	{r7, pc}
200034ca:	46c0      	nop			; (mov r8, r8)
200034cc:	0000aaaa 	andeq	sl, r0, sl, lsr #21
200034d0:	40021000 	andmi	r1, r2, r0
200034d4:	00005555 	andeq	r5, r0, r5, asr r5
200034d8:	40020000 	andmi	r0, r2, r0
200034dc:	40020800 	andmi	r0, r2, r0, lsl #16
200034e0:	40020c00 	andmi	r0, r2, r0, lsl #24
200034e4:	40020400 	andmi	r0, r2, r0, lsl #8

200034e8 <SysTick_Handler>:
GPIO_TypeDef* GPIO_Ports[] = {GPIOE, GPIOA, GPIOD, GPIOC};

// ========================================= SYSTICK ================================================
volatile uint32_t msTicks = 0; /* Variable to store millisecond ticks */
void SysTick_Handler(void)
{ /* SysTick interrupt Handler. */
200034e8:	b580      	push	{r7, lr}
200034ea:	af00      	add	r7, sp, #0
	msTicks++;
200034ec:	4b03      	ldr	r3, [pc, #12]	; (200034fc <SysTick_Handler+0x14>)
200034ee:	681b      	ldr	r3, [r3, #0]
200034f0:	1c5a      	adds	r2, r3, #1
200034f2:	4b02      	ldr	r3, [pc, #8]	; (200034fc <SysTick_Handler+0x14>)
200034f4:	601a      	str	r2, [r3, #0]
}
200034f6:	46c0      	nop			; (mov r8, r8)
200034f8:	46bd      	mov	sp, r7
200034fa:	bd80      	pop	{r7, pc}
200034fc:	20003e88 	andcs	r3, r0, r8, lsl #29

20003500 <systick_Init>:
void systick_Init(void)
{
20003500:	b580      	push	{r7, lr}
20003502:	b082      	sub	sp, #8
20003504:	af00      	add	r7, sp, #0
	// Initiera SysTick.
	*((void (**)(void))0x2001C03C) = SysTick_Handler;
20003506:	4b09      	ldr	r3, [pc, #36]	; (2000352c <systick_Init+0x2c>)
20003508:	4a09      	ldr	r2, [pc, #36]	; (20003530 <systick_Init+0x30>)
2000350a:	601a      	str	r2, [r3, #0]
	uint32_t returnCode;
	returnCode = SysTick_Config(168000000 / 1000); // Genererar ett SysTick-avbrott varje ms.
2000350c:	4b09      	ldr	r3, [pc, #36]	; (20003534 <systick_Init+0x34>)
2000350e:	0018      	movs	r0, r3
20003510:	f7ff f86a 	bl	200025e8 <SysTick_Config>
20003514:	0003      	movs	r3, r0
20003516:	607b      	str	r3, [r7, #4]

	if (returnCode != 0)
20003518:	687b      	ldr	r3, [r7, #4]
2000351a:	2b00      	cmp	r3, #0
2000351c:	d001      	beq.n	20003522 <systick_Init+0x22>
	{   
		systick_Init();
2000351e:	f7ff ffef 	bl	20003500 <systick_Init>
	}
}
20003522:	46c0      	nop			; (mov r8, r8)
20003524:	46bd      	mov	sp, r7
20003526:	b002      	add	sp, #8
20003528:	bd80      	pop	{r7, pc}
2000352a:	46c0      	nop			; (mov r8, r8)
2000352c:	2001c03c 	andcs	ip, r1, ip, lsr r0
20003530:	200034e9 	andcs	r3, r0, r9, ror #9
20003534:	00029040 	andeq	r9, r2, r0, asr #32

20003538 <delay>:
void delay (int mili){
20003538:	b580      	push	{r7, lr}
2000353a:	b084      	sub	sp, #16
2000353c:	af00      	add	r7, sp, #0
2000353e:	6078      	str	r0, [r7, #4]
		int time = msTicks + mili;
20003540:	4b07      	ldr	r3, [pc, #28]	; (20003560 <delay+0x28>)
20003542:	681a      	ldr	r2, [r3, #0]
20003544:	687b      	ldr	r3, [r7, #4]
20003546:	18d3      	adds	r3, r2, r3
20003548:	60fb      	str	r3, [r7, #12]
		while(time > msTicks);
2000354a:	46c0      	nop			; (mov r8, r8)
2000354c:	68fa      	ldr	r2, [r7, #12]
2000354e:	4b04      	ldr	r3, [pc, #16]	; (20003560 <delay+0x28>)
20003550:	681b      	ldr	r3, [r3, #0]
20003552:	429a      	cmp	r2, r3
20003554:	d8fa      	bhi.n	2000354c <delay+0x14>
	}
20003556:	46c0      	nop			; (mov r8, r8)
20003558:	46bd      	mov	sp, r7
2000355a:	b004      	add	sp, #16
2000355c:	bd80      	pop	{r7, pc}
2000355e:	46c0      	nop			; (mov r8, r8)
20003560:	20003e88 	andcs	r3, r0, r8, lsl #29

20003564 <init_rng>:
//======================================== Slumptals generator CAN =========================================
void init_rng(void){
20003564:	b580      	push	{r7, lr}
20003566:	af00      	add	r7, sp, #0
	RCC_AHB2PeriphClockCmd(RCC_AHB2Periph_RNG, ENABLE);
20003568:	2101      	movs	r1, #1
2000356a:	2040      	movs	r0, #64	; 0x40
2000356c:	f7ff fc50 	bl	20002e10 <RCC_AHB2PeriphClockCmd>
    RNG_Cmd(ENABLE);
20003570:	2001      	movs	r0, #1
20003572:	f7fe fe7a 	bl	2000226a <RNG_Cmd>
}
20003576:	46c0      	nop			; (mov r8, r8)
20003578:	46bd      	mov	sp, r7
2000357a:	bd80      	pop	{r7, pc}

2000357c <main>:

void sendAlarm(door);
void getId (int);

void main(void)
{
2000357c:	b5f0      	push	{r4, r5, r6, r7, lr}
2000357e:	b099      	sub	sp, #100	; 0x64
20003580:	af04      	add	r7, sp, #16
	init_GPIO_Ports();
20003582:	f7ff fecd 	bl	20003320 <init_GPIO_Ports>
	systick_Init();
20003586:	f7ff ffbb 	bl	20003500 <systick_Init>
	can_init();
2000358a:	f7fd f827 	bl	200005dc <can_init>
	init_rng();
2000358e:	f7ff ffe9 	bl	20003564 <init_rng>
	while(msTicks < 2000);
20003592:	46c0      	nop			; (mov r8, r8)
20003594:	4bdc      	ldr	r3, [pc, #880]	; (20003908 <main+0x38c>)
20003596:	681b      	ldr	r3, [r3, #0]
20003598:	4adc      	ldr	r2, [pc, #880]	; (2000390c <main+0x390>)
2000359a:	4293      	cmp	r3, r2
2000359c:	d9fa      	bls.n	20003594 <main+0x18>

	//door door1, door2, door3, door4, door5, door6, door8, door9 ,door10, door11, door12, door13,door14,door15,door16, door17, door18, door19, door20, door21, door22, door23, door24 ,door25, door26, door27, door28,door29,door30,door31,door32;
	//door all_doors[32] = {door1, door2, door3, door4, door5, door6, door8, door9 ,door10, door11, door12, door13,door14,door15,door16, door17, door18, door19, door20, door21, door22, door23, door24 ,door25, door26, door27, door28,door29,door30,door31,door32};

	volatile int amountOfActiveDoors = 0;
2000359e:	2300      	movs	r3, #0
200035a0:	61bb      	str	r3, [r7, #24]
	for (int j = 0; j < (sizeof(GPIO_Ports) /sizeof(GPIO_TypeDef *)); j++)
200035a2:	2300      	movs	r3, #0
200035a4:	647b      	str	r3, [r7, #68]	; 0x44
200035a6:	e01b      	b.n	200035e0 <main+0x64>
	{
		for (int i = 0; i < sizeof(GPIO_Pins) / sizeof(uint16_t); i = i + 2)
200035a8:	2300      	movs	r3, #0
200035aa:	64bb      	str	r3, [r7, #72]	; 0x48
200035ac:	e012      	b.n	200035d4 <main+0x58>
		{
			if(!GPIO_ReadInputDataBit(GPIO_Ports[j], GPIO_Pins[i])){
200035ae:	4bd8      	ldr	r3, [pc, #864]	; (20003910 <main+0x394>)
200035b0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
200035b2:	0092      	lsls	r2, r2, #2
200035b4:	58d0      	ldr	r0, [r2, r3]
200035b6:	4bd7      	ldr	r3, [pc, #860]	; (20003914 <main+0x398>)
200035b8:	6cba      	ldr	r2, [r7, #72]	; 0x48
200035ba:	0052      	lsls	r2, r2, #1
200035bc:	5ad3      	ldrh	r3, [r2, r3]
200035be:	0019      	movs	r1, r3
200035c0:	f7fe fb55 	bl	20001c6e <GPIO_ReadInputDataBit>
200035c4:	1e03      	subs	r3, r0, #0
200035c6:	d102      	bne.n	200035ce <main+0x52>
				amountOfActiveDoors++;
200035c8:	69bb      	ldr	r3, [r7, #24]
200035ca:	3301      	adds	r3, #1
200035cc:	61bb      	str	r3, [r7, #24]
		for (int i = 0; i < sizeof(GPIO_Pins) / sizeof(uint16_t); i = i + 2)
200035ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
200035d0:	3302      	adds	r3, #2
200035d2:	64bb      	str	r3, [r7, #72]	; 0x48
200035d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
200035d6:	2b0f      	cmp	r3, #15
200035d8:	d9e9      	bls.n	200035ae <main+0x32>
	for (int j = 0; j < (sizeof(GPIO_Ports) /sizeof(GPIO_TypeDef *)); j++)
200035da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
200035dc:	3301      	adds	r3, #1
200035de:	647b      	str	r3, [r7, #68]	; 0x44
200035e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
200035e2:	2b03      	cmp	r3, #3
200035e4:	d9e0      	bls.n	200035a8 <main+0x2c>
			}
		}
	}
	volatile door active_doors[amountOfActiveDoors];
200035e6:	69be      	ldr	r6, [r7, #24]
200035e8:	1e73      	subs	r3, r6, #1
200035ea:	623b      	str	r3, [r7, #32]
200035ec:	0033      	movs	r3, r6
200035ee:	60bb      	str	r3, [r7, #8]
200035f0:	2300      	movs	r3, #0
200035f2:	60fb      	str	r3, [r7, #12]
200035f4:	68b9      	ldr	r1, [r7, #8]
200035f6:	68fa      	ldr	r2, [r7, #12]
200035f8:	000b      	movs	r3, r1
200035fa:	0e1b      	lsrs	r3, r3, #24
200035fc:	0010      	movs	r0, r2
200035fe:	0200      	lsls	r0, r0, #8
20003600:	6178      	str	r0, [r7, #20]
20003602:	6978      	ldr	r0, [r7, #20]
20003604:	4318      	orrs	r0, r3
20003606:	6178      	str	r0, [r7, #20]
20003608:	000b      	movs	r3, r1
2000360a:	021b      	lsls	r3, r3, #8
2000360c:	613b      	str	r3, [r7, #16]
2000360e:	0033      	movs	r3, r6
20003610:	603b      	str	r3, [r7, #0]
20003612:	2300      	movs	r3, #0
20003614:	607b      	str	r3, [r7, #4]
20003616:	6839      	ldr	r1, [r7, #0]
20003618:	687a      	ldr	r2, [r7, #4]
2000361a:	000b      	movs	r3, r1
2000361c:	0e1b      	lsrs	r3, r3, #24
2000361e:	0010      	movs	r0, r2
20003620:	0205      	lsls	r5, r0, #8
20003622:	431d      	orrs	r5, r3
20003624:	000b      	movs	r3, r1
20003626:	021c      	lsls	r4, r3, #8
20003628:	0033      	movs	r3, r6
2000362a:	015b      	lsls	r3, r3, #5
2000362c:	3303      	adds	r3, #3
2000362e:	3307      	adds	r3, #7
20003630:	08db      	lsrs	r3, r3, #3
20003632:	00db      	lsls	r3, r3, #3
20003634:	466a      	mov	r2, sp
20003636:	1ad3      	subs	r3, r2, r3
20003638:	469d      	mov	sp, r3
2000363a:	ab04      	add	r3, sp, #16
2000363c:	3303      	adds	r3, #3
2000363e:	089b      	lsrs	r3, r3, #2
20003640:	009b      	lsls	r3, r3, #2
20003642:	61fb      	str	r3, [r7, #28]
	int counter = 0;
20003644:	2300      	movs	r3, #0
20003646:	64fb      	str	r3, [r7, #76]	; 0x4c
	for (int j = 0; j < (sizeof(GPIO_Ports) /sizeof(GPIO_TypeDef *)); j++)
20003648:	2300      	movs	r3, #0
2000364a:	643b      	str	r3, [r7, #64]	; 0x40
2000364c:	e051      	b.n	200036f2 <main+0x176>
	{
		for (int i = 0; i < sizeof(GPIO_Pins) / sizeof(uint16_t); i = i + 2)
2000364e:	2300      	movs	r3, #0
20003650:	63fb      	str	r3, [r7, #60]	; 0x3c
20003652:	e048      	b.n	200036e6 <main+0x16a>
		{
			if(!GPIO_ReadInputDataBit(GPIO_Ports[j], GPIO_Pins[i])){
20003654:	4bae      	ldr	r3, [pc, #696]	; (20003910 <main+0x394>)
20003656:	6c3a      	ldr	r2, [r7, #64]	; 0x40
20003658:	0092      	lsls	r2, r2, #2
2000365a:	58d0      	ldr	r0, [r2, r3]
2000365c:	4bad      	ldr	r3, [pc, #692]	; (20003914 <main+0x398>)
2000365e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
20003660:	0052      	lsls	r2, r2, #1
20003662:	5ad3      	ldrh	r3, [r2, r3]
20003664:	0019      	movs	r1, r3
20003666:	f7fe fb02 	bl	20001c6e <GPIO_ReadInputDataBit>
2000366a:	1e03      	subs	r3, r0, #0
2000366c:	d138      	bne.n	200036e0 <main+0x164>
				active_doors[counter].GPIO_read = GPIO_Pins[i];
2000366e:	4ba9      	ldr	r3, [pc, #676]	; (20003914 <main+0x398>)
20003670:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
20003672:	0052      	lsls	r2, r2, #1
20003674:	5ad3      	ldrh	r3, [r2, r3]
20003676:	0019      	movs	r1, r3
20003678:	69fa      	ldr	r2, [r7, #28]
2000367a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
2000367c:	015b      	lsls	r3, r3, #5
2000367e:	18d3      	adds	r3, r2, r3
20003680:	3314      	adds	r3, #20
20003682:	6019      	str	r1, [r3, #0]
				active_doors[counter].GPIO_lamp = GPIO_Pins[i+1];
20003684:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
20003686:	1c5a      	adds	r2, r3, #1
20003688:	4ba2      	ldr	r3, [pc, #648]	; (20003914 <main+0x398>)
2000368a:	0052      	lsls	r2, r2, #1
2000368c:	5ad3      	ldrh	r3, [r2, r3]
2000368e:	0019      	movs	r1, r3
20003690:	69fa      	ldr	r2, [r7, #28]
20003692:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
20003694:	015b      	lsls	r3, r3, #5
20003696:	18d3      	adds	r3, r2, r3
20003698:	3310      	adds	r3, #16
2000369a:	6019      	str	r1, [r3, #0]
				active_doors[counter].controlbits = 0;
2000369c:	69fa      	ldr	r2, [r7, #28]
2000369e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
200036a0:	015b      	lsls	r3, r3, #5
200036a2:	18d3      	adds	r3, r2, r3
200036a4:	3304      	adds	r3, #4
200036a6:	2200      	movs	r2, #0
200036a8:	601a      	str	r2, [r3, #0]
				active_doors[counter].time_larm = 0;
200036aa:	69fa      	ldr	r2, [r7, #28]
200036ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
200036ae:	015b      	lsls	r3, r3, #5
200036b0:	18d3      	adds	r3, r2, r3
200036b2:	3308      	adds	r3, #8
200036b4:	2200      	movs	r2, #0
200036b6:	701a      	strb	r2, [r3, #0]
				active_doors[counter].time_central_larm = 0;
200036b8:	69fa      	ldr	r2, [r7, #28]
200036ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
200036bc:	015b      	lsls	r3, r3, #5
200036be:	18d3      	adds	r3, r2, r3
200036c0:	3309      	adds	r3, #9
200036c2:	2200      	movs	r2, #0
200036c4:	701a      	strb	r2, [r3, #0]
				active_doors[counter].GPIO_type = GPIO_Ports[j];
200036c6:	4b92      	ldr	r3, [pc, #584]	; (20003910 <main+0x394>)
200036c8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
200036ca:	0092      	lsls	r2, r2, #2
200036cc:	58d2      	ldr	r2, [r2, r3]
200036ce:	69f9      	ldr	r1, [r7, #28]
200036d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
200036d2:	015b      	lsls	r3, r3, #5
200036d4:	18cb      	adds	r3, r1, r3
200036d6:	331c      	adds	r3, #28
200036d8:	601a      	str	r2, [r3, #0]
				//active_doors[counter] = all_doors[counter];
				counter++;
200036da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
200036dc:	3301      	adds	r3, #1
200036de:	64fb      	str	r3, [r7, #76]	; 0x4c
		for (int i = 0; i < sizeof(GPIO_Pins) / sizeof(uint16_t); i = i + 2)
200036e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
200036e2:	3302      	adds	r3, #2
200036e4:	63fb      	str	r3, [r7, #60]	; 0x3c
200036e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
200036e8:	2b0f      	cmp	r3, #15
200036ea:	d9b3      	bls.n	20003654 <main+0xd8>
	for (int j = 0; j < (sizeof(GPIO_Ports) /sizeof(GPIO_TypeDef *)); j++)
200036ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
200036ee:	3301      	adds	r3, #1
200036f0:	643b      	str	r3, [r7, #64]	; 0x40
200036f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
200036f4:	2b03      	cmp	r3, #3
200036f6:	d9aa      	bls.n	2000364e <main+0xd2>
			}
		}
	}
	getId((sizeof(active_doors)/sizeof(active_doors[0])));
200036f8:	0033      	movs	r3, r6
200036fa:	015b      	lsls	r3, r3, #5
200036fc:	095b      	lsrs	r3, r3, #5
200036fe:	0018      	movs	r0, r3
20003700:	f000 f9b6 	bl	20003a70 <getId>
	// ================================== LIGHTS =========================================================
	for (int i = 0; i < sizeof(active_doors)/sizeof(active_doors[0]); i++) //CHRISTMAST LIGHTS FTW
20003704:	2300      	movs	r3, #0
20003706:	63bb      	str	r3, [r7, #56]	; 0x38
20003708:	e015      	b.n	20003736 <main+0x1ba>
	{
		GPIO_SetBits(active_doors[i].GPIO_type, active_doors[i].GPIO_lamp);
2000370a:	69fa      	ldr	r2, [r7, #28]
2000370c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
2000370e:	015b      	lsls	r3, r3, #5
20003710:	18d3      	adds	r3, r2, r3
20003712:	331c      	adds	r3, #28
20003714:	6818      	ldr	r0, [r3, #0]
20003716:	69fa      	ldr	r2, [r7, #28]
20003718:	6bbb      	ldr	r3, [r7, #56]	; 0x38
2000371a:	015b      	lsls	r3, r3, #5
2000371c:	18d3      	adds	r3, r2, r3
2000371e:	3310      	adds	r3, #16
20003720:	681b      	ldr	r3, [r3, #0]
20003722:	b29b      	uxth	r3, r3
20003724:	0019      	movs	r1, r3
20003726:	f7fe fafa 	bl	20001d1e <GPIO_SetBits>
		delay(100);	
2000372a:	2064      	movs	r0, #100	; 0x64
2000372c:	f7ff ff04 	bl	20003538 <delay>
	for (int i = 0; i < sizeof(active_doors)/sizeof(active_doors[0]); i++) //CHRISTMAST LIGHTS FTW
20003730:	6bbb      	ldr	r3, [r7, #56]	; 0x38
20003732:	3301      	adds	r3, #1
20003734:	63bb      	str	r3, [r7, #56]	; 0x38
20003736:	0033      	movs	r3, r6
20003738:	015b      	lsls	r3, r3, #5
2000373a:	095a      	lsrs	r2, r3, #5
2000373c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
2000373e:	429a      	cmp	r2, r3
20003740:	d8e3      	bhi.n	2000370a <main+0x18e>
		
	}
	for (int i = sizeof(active_doors)/sizeof(active_doors[0]); i >= 0 ; i--) //CHRISTMAST LIGHTS FTW
20003742:	0033      	movs	r3, r6
20003744:	015b      	lsls	r3, r3, #5
20003746:	095b      	lsrs	r3, r3, #5
20003748:	637b      	str	r3, [r7, #52]	; 0x34
2000374a:	e015      	b.n	20003778 <main+0x1fc>
	{
		GPIO_ResetBits(active_doors[i].GPIO_type, active_doors[i].GPIO_lamp);
2000374c:	69fa      	ldr	r2, [r7, #28]
2000374e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
20003750:	015b      	lsls	r3, r3, #5
20003752:	18d3      	adds	r3, r2, r3
20003754:	331c      	adds	r3, #28
20003756:	6818      	ldr	r0, [r3, #0]
20003758:	69fa      	ldr	r2, [r7, #28]
2000375a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
2000375c:	015b      	lsls	r3, r3, #5
2000375e:	18d3      	adds	r3, r2, r3
20003760:	3310      	adds	r3, #16
20003762:	681b      	ldr	r3, [r3, #0]
20003764:	b29b      	uxth	r3, r3
20003766:	0019      	movs	r1, r3
20003768:	f7fe fae8 	bl	20001d3c <GPIO_ResetBits>
		delay(100);
2000376c:	2064      	movs	r0, #100	; 0x64
2000376e:	f7ff fee3 	bl	20003538 <delay>
	for (int i = sizeof(active_doors)/sizeof(active_doors[0]); i >= 0 ; i--) //CHRISTMAST LIGHTS FTW
20003772:	6b7b      	ldr	r3, [r7, #52]	; 0x34
20003774:	3b01      	subs	r3, #1
20003776:	637b      	str	r3, [r7, #52]	; 0x34
20003778:	6b7b      	ldr	r3, [r7, #52]	; 0x34
2000377a:	2b00      	cmp	r3, #0
2000377c:	dae6      	bge.n	2000374c <main+0x1d0>
	}
	delay(200);
2000377e:	20c8      	movs	r0, #200	; 0xc8
20003780:	f7ff feda 	bl	20003538 <delay>
	for (int i = 0; i < sizeof(active_doors)/sizeof(active_doors[0]); i++) //CHRISTMAST LIGHTS FTW
20003784:	2300      	movs	r3, #0
20003786:	633b      	str	r3, [r7, #48]	; 0x30
20003788:	e012      	b.n	200037b0 <main+0x234>
	{
		GPIO_SetBits(active_doors[i].GPIO_type, active_doors[i].GPIO_lamp);
2000378a:	69fa      	ldr	r2, [r7, #28]
2000378c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
2000378e:	015b      	lsls	r3, r3, #5
20003790:	18d3      	adds	r3, r2, r3
20003792:	331c      	adds	r3, #28
20003794:	6818      	ldr	r0, [r3, #0]
20003796:	69fa      	ldr	r2, [r7, #28]
20003798:	6b3b      	ldr	r3, [r7, #48]	; 0x30
2000379a:	015b      	lsls	r3, r3, #5
2000379c:	18d3      	adds	r3, r2, r3
2000379e:	3310      	adds	r3, #16
200037a0:	681b      	ldr	r3, [r3, #0]
200037a2:	b29b      	uxth	r3, r3
200037a4:	0019      	movs	r1, r3
200037a6:	f7fe faba 	bl	20001d1e <GPIO_SetBits>
	for (int i = 0; i < sizeof(active_doors)/sizeof(active_doors[0]); i++) //CHRISTMAST LIGHTS FTW
200037aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
200037ac:	3301      	adds	r3, #1
200037ae:	633b      	str	r3, [r7, #48]	; 0x30
200037b0:	0033      	movs	r3, r6
200037b2:	015b      	lsls	r3, r3, #5
200037b4:	095a      	lsrs	r2, r3, #5
200037b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
200037b8:	429a      	cmp	r2, r3
200037ba:	d8e6      	bhi.n	2000378a <main+0x20e>
	}
	delay(3000);
200037bc:	4b56      	ldr	r3, [pc, #344]	; (20003918 <main+0x39c>)
200037be:	0018      	movs	r0, r3
200037c0:	f7ff feba 	bl	20003538 <delay>
	for (int i = 0; i < sizeof(active_doors)/sizeof(active_doors[0]); i++) //CHRISTMAST LIGHTS FTW
200037c4:	2300      	movs	r3, #0
200037c6:	62fb      	str	r3, [r7, #44]	; 0x2c
200037c8:	e012      	b.n	200037f0 <main+0x274>
	{
		GPIO_ResetBits(active_doors[i].GPIO_type, active_doors[i].GPIO_lamp);
200037ca:	69fa      	ldr	r2, [r7, #28]
200037cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
200037ce:	015b      	lsls	r3, r3, #5
200037d0:	18d3      	adds	r3, r2, r3
200037d2:	331c      	adds	r3, #28
200037d4:	6818      	ldr	r0, [r3, #0]
200037d6:	69fa      	ldr	r2, [r7, #28]
200037d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
200037da:	015b      	lsls	r3, r3, #5
200037dc:	18d3      	adds	r3, r2, r3
200037de:	3310      	adds	r3, #16
200037e0:	681b      	ldr	r3, [r3, #0]
200037e2:	b29b      	uxth	r3, r3
200037e4:	0019      	movs	r1, r3
200037e6:	f7fe faa9 	bl	20001d3c <GPIO_ResetBits>
	for (int i = 0; i < sizeof(active_doors)/sizeof(active_doors[0]); i++) //CHRISTMAST LIGHTS FTW
200037ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
200037ec:	3301      	adds	r3, #1
200037ee:	62fb      	str	r3, [r7, #44]	; 0x2c
200037f0:	0033      	movs	r3, r6
200037f2:	015b      	lsls	r3, r3, #5
200037f4:	095a      	lsrs	r2, r3, #5
200037f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
200037f8:	429a      	cmp	r2, r3
200037fa:	d8e6      	bhi.n	200037ca <main+0x24e>
	}
	

	GPIO_SetBits(GPIOB, GPIO_Pin_2);
200037fc:	4b47      	ldr	r3, [pc, #284]	; (2000391c <main+0x3a0>)
200037fe:	2104      	movs	r1, #4
20003800:	0018      	movs	r0, r3
20003802:	f7fe fa8c 	bl	20001d1e <GPIO_SetBits>
	//active_doors[2].controlbits |= 4;
	while (1)
	{
		for (int i = 0; i < sizeof(active_doors)/sizeof(active_doors[0]); i++)
20003806:	2300      	movs	r3, #0
20003808:	62bb      	str	r3, [r7, #40]	; 0x28
2000380a:	e0fa      	b.n	20003a02 <main+0x486>
		{
		
			if (!(active_doors[i].controlbits & 4))
2000380c:	69fa      	ldr	r2, [r7, #28]
2000380e:	6abb      	ldr	r3, [r7, #40]	; 0x28
20003810:	015b      	lsls	r3, r3, #5
20003812:	18d3      	adds	r3, r2, r3
20003814:	3304      	adds	r3, #4
20003816:	681b      	ldr	r3, [r3, #0]
20003818:	2204      	movs	r2, #4
2000381a:	4013      	ands	r3, r2
2000381c:	d000      	beq.n	20003820 <main+0x2a4>
2000381e:	e0ed      	b.n	200039fc <main+0x480>
				{
				if (!GPIO_ReadInputDataBit(active_doors[i].GPIO_type, active_doors[i].GPIO_read)){ //GPIO pinnen är noll ifall dörren är stängd därför !
20003820:	69fa      	ldr	r2, [r7, #28]
20003822:	6abb      	ldr	r3, [r7, #40]	; 0x28
20003824:	015b      	lsls	r3, r3, #5
20003826:	18d3      	adds	r3, r2, r3
20003828:	331c      	adds	r3, #28
2000382a:	6818      	ldr	r0, [r3, #0]
2000382c:	69fa      	ldr	r2, [r7, #28]
2000382e:	6abb      	ldr	r3, [r7, #40]	; 0x28
20003830:	015b      	lsls	r3, r3, #5
20003832:	18d3      	adds	r3, r2, r3
20003834:	3314      	adds	r3, #20
20003836:	681b      	ldr	r3, [r3, #0]
20003838:	b29b      	uxth	r3, r3
2000383a:	0019      	movs	r1, r3
2000383c:	f7fe fa17 	bl	20001c6e <GPIO_ReadInputDataBit>
20003840:	1e03      	subs	r3, r0, #0
20003842:	d10e      	bne.n	20003862 <main+0x2e6>
					active_doors[i].controlbits &= 0xFFFC; //Nollställer kontrollbiten för ifall en dörr är öppen och spam kontrollbiten för 
20003844:	69fa      	ldr	r2, [r7, #28]
20003846:	6abb      	ldr	r3, [r7, #40]	; 0x28
20003848:	015b      	lsls	r3, r3, #5
2000384a:	18d3      	adds	r3, r2, r3
2000384c:	3304      	adds	r3, #4
2000384e:	681b      	ldr	r3, [r3, #0]
20003850:	4a33      	ldr	r2, [pc, #204]	; (20003920 <main+0x3a4>)
20003852:	401a      	ands	r2, r3
20003854:	69f9      	ldr	r1, [r7, #28]
20003856:	6abb      	ldr	r3, [r7, #40]	; 0x28
20003858:	015b      	lsls	r3, r3, #5
2000385a:	18cb      	adds	r3, r1, r3
2000385c:	3304      	adds	r3, #4
2000385e:	601a      	str	r2, [r3, #0]
20003860:	e01e      	b.n	200038a0 <main+0x324>
					//att skicka medelande till centralenheten, när den detekteras som stängd
					
				}
				else{
					if (!active_doors[i].controlbits & 1) // Kollar så att dörren inte larmar sen innan så larmtick inte uppdateras hela tiden
20003862:	69fa      	ldr	r2, [r7, #28]
20003864:	6abb      	ldr	r3, [r7, #40]	; 0x28
20003866:	015b      	lsls	r3, r3, #5
20003868:	18d3      	adds	r3, r2, r3
2000386a:	3304      	adds	r3, #4
2000386c:	681b      	ldr	r3, [r3, #0]
2000386e:	2b00      	cmp	r3, #0
20003870:	d108      	bne.n	20003884 <main+0x308>
					{
						active_doors[i].larmTick = msTicks;
20003872:	4b25      	ldr	r3, [pc, #148]	; (20003908 <main+0x38c>)
20003874:	681b      	ldr	r3, [r3, #0]
20003876:	0019      	movs	r1, r3
20003878:	69fa      	ldr	r2, [r7, #28]
2000387a:	6abb      	ldr	r3, [r7, #40]	; 0x28
2000387c:	015b      	lsls	r3, r3, #5
2000387e:	18d3      	adds	r3, r2, r3
20003880:	3318      	adds	r3, #24
20003882:	6019      	str	r1, [r3, #0]
					}
					active_doors[i].controlbits |= 1; // sätter dörrens larm kontrollbit till 1.
20003884:	69fa      	ldr	r2, [r7, #28]
20003886:	6abb      	ldr	r3, [r7, #40]	; 0x28
20003888:	015b      	lsls	r3, r3, #5
2000388a:	18d3      	adds	r3, r2, r3
2000388c:	3304      	adds	r3, #4
2000388e:	681b      	ldr	r3, [r3, #0]
20003890:	2201      	movs	r2, #1
20003892:	431a      	orrs	r2, r3
20003894:	69f9      	ldr	r1, [r7, #28]
20003896:	6abb      	ldr	r3, [r7, #40]	; 0x28
20003898:	015b      	lsls	r3, r3, #5
2000389a:	18cb      	adds	r3, r1, r3
2000389c:	3304      	adds	r3, #4
2000389e:	601a      	str	r2, [r3, #0]
				}
				for (int i = 0; i < sizeof(active_doors)/sizeof(active_doors[0]); i++)
200038a0:	2300      	movs	r3, #0
200038a2:	627b      	str	r3, [r7, #36]	; 0x24
200038a4:	e0a3      	b.n	200039ee <main+0x472>
				{
					if (active_doors[i].controlbits & 1 && msTicks > (active_doors[i].larmTick + 1000 * 10 * active_doors[i].time_larm))
200038a6:	69fa      	ldr	r2, [r7, #28]
200038a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
200038aa:	015b      	lsls	r3, r3, #5
200038ac:	18d3      	adds	r3, r2, r3
200038ae:	3304      	adds	r3, #4
200038b0:	681b      	ldr	r3, [r3, #0]
200038b2:	2201      	movs	r2, #1
200038b4:	4013      	ands	r3, r2
200038b6:	d037      	beq.n	20003928 <main+0x3ac>
200038b8:	69fa      	ldr	r2, [r7, #28]
200038ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
200038bc:	015b      	lsls	r3, r3, #5
200038be:	18d3      	adds	r3, r2, r3
200038c0:	3318      	adds	r3, #24
200038c2:	681a      	ldr	r2, [r3, #0]
200038c4:	69f9      	ldr	r1, [r7, #28]
200038c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
200038c8:	015b      	lsls	r3, r3, #5
200038ca:	18cb      	adds	r3, r1, r3
200038cc:	3308      	adds	r3, #8
200038ce:	781b      	ldrb	r3, [r3, #0]
200038d0:	b2db      	uxtb	r3, r3
200038d2:	0019      	movs	r1, r3
200038d4:	4b13      	ldr	r3, [pc, #76]	; (20003924 <main+0x3a8>)
200038d6:	434b      	muls	r3, r1
200038d8:	18d3      	adds	r3, r2, r3
200038da:	001a      	movs	r2, r3
200038dc:	4b0a      	ldr	r3, [pc, #40]	; (20003908 <main+0x38c>)
200038de:	681b      	ldr	r3, [r3, #0]
200038e0:	429a      	cmp	r2, r3
200038e2:	d221      	bcs.n	20003928 <main+0x3ac>
					{
						GPIO_SetBits(active_doors[i].GPIO_type, active_doors[i].GPIO_lamp); // tänder lampan ifall tiden för att dörren ska larma har gått
200038e4:	69fa      	ldr	r2, [r7, #28]
200038e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
200038e8:	015b      	lsls	r3, r3, #5
200038ea:	18d3      	adds	r3, r2, r3
200038ec:	331c      	adds	r3, #28
200038ee:	6818      	ldr	r0, [r3, #0]
200038f0:	69fa      	ldr	r2, [r7, #28]
200038f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
200038f4:	015b      	lsls	r3, r3, #5
200038f6:	18d3      	adds	r3, r2, r3
200038f8:	3310      	adds	r3, #16
200038fa:	681b      	ldr	r3, [r3, #0]
200038fc:	b29b      	uxth	r3, r3
200038fe:	0019      	movs	r1, r3
20003900:	f7fe fa0d 	bl	20001d1e <GPIO_SetBits>
20003904:	e020      	b.n	20003948 <main+0x3cc>
20003906:	46c0      	nop			; (mov r8, r8)
20003908:	20003e88 	andcs	r3, r0, r8, lsl #29
2000390c:	000007cf 	andeq	r0, r0, pc, asr #15
20003910:	20003fa8 	andcs	r3, r0, r8, lsr #31
20003914:	20003f88 	andcs	r3, r0, r8, lsl #31
20003918:	00000bb8 			; <UNDEFINED> instruction: 0x00000bb8
2000391c:	40020400 	andmi	r0, r2, r0, lsl #8
20003920:	0000fffc 	strdeq	pc, [r0], -ip
20003924:	00002710 	andeq	r2, r0, r0, lsl r7
					}
					else
					{
						GPIO_ResetBits(active_doors[i].GPIO_type, active_doors[i].GPIO_lamp);	// släcker lampan annars
20003928:	69fa      	ldr	r2, [r7, #28]
2000392a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
2000392c:	015b      	lsls	r3, r3, #5
2000392e:	18d3      	adds	r3, r2, r3
20003930:	331c      	adds	r3, #28
20003932:	6818      	ldr	r0, [r3, #0]
20003934:	69fa      	ldr	r2, [r7, #28]
20003936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20003938:	015b      	lsls	r3, r3, #5
2000393a:	18d3      	adds	r3, r2, r3
2000393c:	3310      	adds	r3, #16
2000393e:	681b      	ldr	r3, [r3, #0]
20003940:	b29b      	uxth	r3, r3
20003942:	0019      	movs	r1, r3
20003944:	f7fe f9fa 	bl	20001d3c <GPIO_ResetBits>
					}
					if ((active_doors[i].controlbits & 1 )&& msTicks > (active_doors[i].larmTick + 1000 * 10 * active_doors[i].time_central_larm) && !(active_doors[i].controlbits & 2))
20003948:	69fa      	ldr	r2, [r7, #28]
2000394a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
2000394c:	015b      	lsls	r3, r3, #5
2000394e:	18d3      	adds	r3, r2, r3
20003950:	3304      	adds	r3, #4
20003952:	681b      	ldr	r3, [r3, #0]
20003954:	2201      	movs	r2, #1
20003956:	4013      	ands	r3, r2
20003958:	d046      	beq.n	200039e8 <main+0x46c>
2000395a:	69fa      	ldr	r2, [r7, #28]
2000395c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
2000395e:	015b      	lsls	r3, r3, #5
20003960:	18d3      	adds	r3, r2, r3
20003962:	3318      	adds	r3, #24
20003964:	681a      	ldr	r2, [r3, #0]
20003966:	69f9      	ldr	r1, [r7, #28]
20003968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
2000396a:	015b      	lsls	r3, r3, #5
2000396c:	18cb      	adds	r3, r1, r3
2000396e:	3309      	adds	r3, #9
20003970:	781b      	ldrb	r3, [r3, #0]
20003972:	b2db      	uxtb	r3, r3
20003974:	0019      	movs	r1, r3
20003976:	4b27      	ldr	r3, [pc, #156]	; (20003a14 <main+0x498>)
20003978:	434b      	muls	r3, r1
2000397a:	18d3      	adds	r3, r2, r3
2000397c:	001a      	movs	r2, r3
2000397e:	4b26      	ldr	r3, [pc, #152]	; (20003a18 <main+0x49c>)
20003980:	681b      	ldr	r3, [r3, #0]
20003982:	429a      	cmp	r2, r3
20003984:	d230      	bcs.n	200039e8 <main+0x46c>
20003986:	69fa      	ldr	r2, [r7, #28]
20003988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
2000398a:	015b      	lsls	r3, r3, #5
2000398c:	18d3      	adds	r3, r2, r3
2000398e:	3304      	adds	r3, #4
20003990:	681b      	ldr	r3, [r3, #0]
20003992:	2202      	movs	r2, #2
20003994:	4013      	ands	r3, r2
20003996:	d127      	bne.n	200039e8 <main+0x46c>
					{
						active_doors[i].controlbits |= 2;
20003998:	69fa      	ldr	r2, [r7, #28]
2000399a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
2000399c:	015b      	lsls	r3, r3, #5
2000399e:	18d3      	adds	r3, r2, r3
200039a0:	3304      	adds	r3, #4
200039a2:	681b      	ldr	r3, [r3, #0]
200039a4:	2202      	movs	r2, #2
200039a6:	431a      	orrs	r2, r3
200039a8:	69f9      	ldr	r1, [r7, #28]
200039aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
200039ac:	015b      	lsls	r3, r3, #5
200039ae:	18cb      	adds	r3, r1, r3
200039b0:	3304      	adds	r3, #4
200039b2:	601a      	str	r2, [r3, #0]
						sendAlarm(active_doors[i]);
200039b4:	69fc      	ldr	r4, [r7, #28]
200039b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
200039b8:	015b      	lsls	r3, r3, #5
200039ba:	469c      	mov	ip, r3
200039bc:	2110      	movs	r1, #16
200039be:	4663      	mov	r3, ip
200039c0:	18e2      	adds	r2, r4, r3
200039c2:	1851      	adds	r1, r2, r1
200039c4:	466a      	mov	r2, sp
200039c6:	c929      	ldmia	r1!, {r0, r3, r5}
200039c8:	c229      	stmia	r2!, {r0, r3, r5}
200039ca:	6809      	ldr	r1, [r1, #0]
200039cc:	6011      	str	r1, [r2, #0]
200039ce:	4663      	mov	r3, ip
200039d0:	5918      	ldr	r0, [r3, r4]
200039d2:	4663      	mov	r3, ip
200039d4:	18e2      	adds	r2, r4, r3
200039d6:	6851      	ldr	r1, [r2, #4]
200039d8:	4663      	mov	r3, ip
200039da:	18e2      	adds	r2, r4, r3
200039dc:	6892      	ldr	r2, [r2, #8]
200039de:	0023      	movs	r3, r4
200039e0:	4463      	add	r3, ip
200039e2:	68db      	ldr	r3, [r3, #12]
200039e4:	f000 f8f4 	bl	20003bd0 <sendAlarm>
				for (int i = 0; i < sizeof(active_doors)/sizeof(active_doors[0]); i++)
200039e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
200039ea:	3301      	adds	r3, #1
200039ec:	627b      	str	r3, [r7, #36]	; 0x24
200039ee:	0033      	movs	r3, r6
200039f0:	015b      	lsls	r3, r3, #5
200039f2:	095a      	lsrs	r2, r3, #5
200039f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
200039f6:	429a      	cmp	r2, r3
200039f8:	d900      	bls.n	200039fc <main+0x480>
200039fa:	e754      	b.n	200038a6 <main+0x32a>
		for (int i = 0; i < sizeof(active_doors)/sizeof(active_doors[0]); i++)
200039fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
200039fe:	3301      	adds	r3, #1
20003a00:	62bb      	str	r3, [r7, #40]	; 0x28
20003a02:	0033      	movs	r3, r6
20003a04:	015b      	lsls	r3, r3, #5
20003a06:	095a      	lsrs	r2, r3, #5
20003a08:	6abb      	ldr	r3, [r7, #40]	; 0x28
20003a0a:	429a      	cmp	r2, r3
20003a0c:	d900      	bls.n	20003a10 <main+0x494>
20003a0e:	e6fd      	b.n	2000380c <main+0x290>
20003a10:	e6f9      	b.n	20003806 <main+0x28a>
20003a12:	46c0      	nop			; (mov r8, r8)
20003a14:	00002710 	andeq	r2, r0, r0, lsl r7
20003a18:	20003e88 	andcs	r3, r0, r8, lsl #29

20003a1c <idAssign_Handler>:
			}
		}
	}
	}
	
	void idAssign_Handler(CanRxMsg* msg){
20003a1c:	b580      	push	{r7, lr}
20003a1e:	b084      	sub	sp, #16
20003a20:	af00      	add	r7, sp, #0
20003a22:	6078      	str	r0, [r7, #4]
		uint32_t rndid = (((uint32_t)msg->Data[0])) | (((uint32_t)msg->Data[1]) << 8) | (((uint32_t)msg->Data[2]) << 16) | (((uint32_t)msg->Data[3]) << 24);
20003a24:	687b      	ldr	r3, [r7, #4]
20003a26:	7adb      	ldrb	r3, [r3, #11]
20003a28:	001a      	movs	r2, r3
20003a2a:	687b      	ldr	r3, [r7, #4]
20003a2c:	7b1b      	ldrb	r3, [r3, #12]
20003a2e:	021b      	lsls	r3, r3, #8
20003a30:	431a      	orrs	r2, r3
20003a32:	687b      	ldr	r3, [r7, #4]
20003a34:	7b5b      	ldrb	r3, [r3, #13]
20003a36:	041b      	lsls	r3, r3, #16
20003a38:	431a      	orrs	r2, r3
20003a3a:	687b      	ldr	r3, [r7, #4]
20003a3c:	7b9b      	ldrb	r3, [r3, #14]
20003a3e:	061b      	lsls	r3, r3, #24
20003a40:	4313      	orrs	r3, r2
20003a42:	60fb      	str	r3, [r7, #12]
		if(rndid == id){
20003a44:	4b08      	ldr	r3, [pc, #32]	; (20003a68 <idAssign_Handler+0x4c>)
20003a46:	681b      	ldr	r3, [r3, #0]
20003a48:	68fa      	ldr	r2, [r7, #12]
20003a4a:	429a      	cmp	r2, r3
20003a4c:	d107      	bne.n	20003a5e <idAssign_Handler+0x42>
			id = msg->Data[4];
20003a4e:	687b      	ldr	r3, [r7, #4]
20003a50:	7bdb      	ldrb	r3, [r3, #15]
20003a52:	001a      	movs	r2, r3
20003a54:	4b04      	ldr	r3, [pc, #16]	; (20003a68 <idAssign_Handler+0x4c>)
20003a56:	601a      	str	r2, [r3, #0]
			nocid = 0;
20003a58:	4b04      	ldr	r3, [pc, #16]	; (20003a6c <idAssign_Handler+0x50>)
20003a5a:	2200      	movs	r2, #0
20003a5c:	701a      	strb	r2, [r3, #0]

		}
	}
20003a5e:	46c0      	nop			; (mov r8, r8)
20003a60:	46bd      	mov	sp, r7
20003a62:	b004      	add	sp, #16
20003a64:	bd80      	pop	{r7, pc}
20003a66:	46c0      	nop			; (mov r8, r8)
20003a68:	20003e84 	andcs	r3, r0, r4, lsl #29
20003a6c:	20003f84 	andcs	r3, r0, r4, lsl #31

20003a70 <getId>:

	void getId (int nDoors){
20003a70:	b5f0      	push	{r4, r5, r6, r7, lr}
20003a72:	b08f      	sub	sp, #60	; 0x3c
20003a74:	af02      	add	r7, sp, #8
20003a76:	6078      	str	r0, [r7, #4]
		CANFilter filter = empty_mask;
20003a78:	2300      	movs	r3, #0
20003a7a:	62bb      	str	r3, [r7, #40]	; 0x28
		CANFilter mask = empty_mask;
20003a7c:	2300      	movs	r3, #0
20003a7e:	627b      	str	r3, [r7, #36]	; 0x24

		//används för omvandling
		Header header = empty_header;
20003a80:	2300      	movs	r3, #0
20003a82:	623b      	str	r3, [r7, #32]

		//skriver mask
		mask.IDE = 1;
20003a84:	2024      	movs	r0, #36	; 0x24
20003a86:	183b      	adds	r3, r7, r0
20003a88:	781a      	ldrb	r2, [r3, #0]
20003a8a:	2104      	movs	r1, #4
20003a8c:	430a      	orrs	r2, r1
20003a8e:	701a      	strb	r2, [r3, #0]
		mask.RTR = 1;
20003a90:	183b      	adds	r3, r7, r0
20003a92:	781a      	ldrb	r2, [r3, #0]
20003a94:	2102      	movs	r1, #2
20003a96:	430a      	orrs	r2, r1
20003a98:	701a      	strb	r2, [r3, #0]
		header.msgType = ~0;
20003a9a:	2023      	movs	r0, #35	; 0x23
20003a9c:	183b      	adds	r3, r7, r0
20003a9e:	781a      	ldrb	r2, [r3, #0]
20003aa0:	211c      	movs	r1, #28
20003aa2:	430a      	orrs	r2, r1
20003aa4:	701a      	strb	r2, [r3, #0]
		header.ID = ~0;
20003aa6:	2422      	movs	r4, #34	; 0x22
20003aa8:	193b      	adds	r3, r7, r4
20003aaa:	881a      	ldrh	r2, [r3, #0]
20003aac:	21fe      	movs	r1, #254	; 0xfe
20003aae:	0049      	lsls	r1, r1, #1
20003ab0:	430a      	orrs	r2, r1
20003ab2:	801a      	strh	r2, [r3, #0]
		header.toCentral = ~0;
20003ab4:	183b      	adds	r3, r7, r0
20003ab6:	781a      	ldrb	r2, [r3, #0]
20003ab8:	2102      	movs	r1, #2
20003aba:	430a      	orrs	r2, r1
20003abc:	701a      	strb	r2, [r3, #0]
		HEADERtoUINT32(header, mask.ID);
20003abe:	2520      	movs	r5, #32
20003ac0:	197b      	adds	r3, r7, r5
20003ac2:	681b      	ldr	r3, [r3, #0]
20003ac4:	00db      	lsls	r3, r3, #3
20003ac6:	08db      	lsrs	r3, r3, #3
20003ac8:	00db      	lsls	r3, r3, #3
20003aca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
20003acc:	2107      	movs	r1, #7
20003ace:	400a      	ands	r2, r1
20003ad0:	4313      	orrs	r3, r2
20003ad2:	627b      	str	r3, [r7, #36]	; 0x24

		//Skriver filter
		filter.IDE = 1;
20003ad4:	2628      	movs	r6, #40	; 0x28
20003ad6:	19bb      	adds	r3, r7, r6
20003ad8:	781a      	ldrb	r2, [r3, #0]
20003ada:	2104      	movs	r1, #4
20003adc:	430a      	orrs	r2, r1
20003ade:	701a      	strb	r2, [r3, #0]
		filter.RTR = 0;
20003ae0:	19bb      	adds	r3, r7, r6
20003ae2:	781a      	ldrb	r2, [r3, #0]
20003ae4:	2102      	movs	r1, #2
20003ae6:	438a      	bics	r2, r1
20003ae8:	701a      	strb	r2, [r3, #0]
		header.msgType = assignID_msg_type;
20003aea:	183b      	adds	r3, r7, r0
20003aec:	781a      	ldrb	r2, [r3, #0]
20003aee:	211c      	movs	r1, #28
20003af0:	438a      	bics	r2, r1
20003af2:	1c11      	adds	r1, r2, #0
20003af4:	2208      	movs	r2, #8
20003af6:	430a      	orrs	r2, r1
20003af8:	701a      	strb	r2, [r3, #0]
		header.ID = 0;
20003afa:	193b      	adds	r3, r7, r4
20003afc:	881a      	ldrh	r2, [r3, #0]
20003afe:	492e      	ldr	r1, [pc, #184]	; (20003bb8 <getId+0x148>)
20003b00:	400a      	ands	r2, r1
20003b02:	801a      	strh	r2, [r3, #0]
		header.toCentral = 0;
20003b04:	183b      	adds	r3, r7, r0
20003b06:	781a      	ldrb	r2, [r3, #0]
20003b08:	2102      	movs	r1, #2
20003b0a:	438a      	bics	r2, r1
20003b0c:	701a      	strb	r2, [r3, #0]
		HEADERtoUINT32(header, filter.ID);
20003b0e:	197b      	adds	r3, r7, r5
20003b10:	681b      	ldr	r3, [r3, #0]
20003b12:	00db      	lsls	r3, r3, #3
20003b14:	08db      	lsrs	r3, r3, #3
20003b16:	00db      	lsls	r3, r3, #3
20003b18:	6aba      	ldr	r2, [r7, #40]	; 0x28
20003b1a:	2107      	movs	r1, #7
20003b1c:	400a      	ands	r2, r1
20003b1e:	4313      	orrs	r3, r2
20003b20:	62bb      	str	r3, [r7, #40]	; 0x28

		if (CANhandlerListNotFull()){
20003b22:	f7fc faa5 	bl	20000070 <CANhandlerListNotFull>
20003b26:	1e03      	subs	r3, r0, #0
20003b28:	d007      	beq.n	20003b3a <getId+0xca>
			CANaddFilterHandler(idAssign_Handler, &filter, &mask);
20003b2a:	2324      	movs	r3, #36	; 0x24
20003b2c:	18fa      	adds	r2, r7, r3
20003b2e:	2328      	movs	r3, #40	; 0x28
20003b30:	18f9      	adds	r1, r7, r3
20003b32:	4b22      	ldr	r3, [pc, #136]	; (20003bbc <getId+0x14c>)
20003b34:	0018      	movs	r0, r3
20003b36:	f7fc fb09 	bl	2000014c <CANaddFilterHandler>
		}


		int timeStamp = msTicks + 5 * 1000; 
20003b3a:	4b21      	ldr	r3, [pc, #132]	; (20003bc0 <getId+0x150>)
20003b3c:	681b      	ldr	r3, [r3, #0]
20003b3e:	4a21      	ldr	r2, [pc, #132]	; (20003bc4 <getId+0x154>)
20003b40:	4694      	mov	ip, r2
20003b42:	4463      	add	r3, ip
20003b44:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (RNG_GetFlagStatus(RNG_FLAG_DRDY) == SET && //Nytt meddelande finns
20003b46:	2001      	movs	r0, #1
20003b48:	f7fe fbd4 	bl	200022f4 <RNG_GetFlagStatus>
20003b4c:	0003      	movs	r3, r0
20003b4e:	2b01      	cmp	r3, #1
20003b50:	d12e      	bne.n	20003bb0 <getId+0x140>
             RNG_GetFlagStatus(RNG_FLAG_CECS) == RESET && //Inget klockfel
20003b52:	2002      	movs	r0, #2
20003b54:	f7fe fbce 	bl	200022f4 <RNG_GetFlagStatus>
20003b58:	1e03      	subs	r3, r0, #0
		if (RNG_GetFlagStatus(RNG_FLAG_DRDY) == SET && //Nytt meddelande finns
20003b5a:	d129      	bne.n	20003bb0 <getId+0x140>
             RNG_GetFlagStatus(RNG_FLAG_SECS) == RESET){ //Inget seedfel
20003b5c:	2004      	movs	r0, #4
20003b5e:	f7fe fbc9 	bl	200022f4 <RNG_GetFlagStatus>
20003b62:	1e03      	subs	r3, r0, #0
             RNG_GetFlagStatus(RNG_FLAG_CECS) == RESET && //Inget klockfel
20003b64:	d124      	bne.n	20003bb0 <getId+0x140>
                    id = RNG_GetRandomNumber();
20003b66:	f7fe fb9d 	bl	200022a4 <RNG_GetRandomNumber>
20003b6a:	0002      	movs	r2, r0
20003b6c:	4b16      	ldr	r3, [pc, #88]	; (20003bc8 <getId+0x158>)
20003b6e:	601a      	str	r2, [r3, #0]
			 		CanTxMsg idRequest;
					
					encode_request_id(&idRequest,id,0, nDoors, 69);
20003b70:	4b15      	ldr	r3, [pc, #84]	; (20003bc8 <getId+0x158>)
20003b72:	6819      	ldr	r1, [r3, #0]
20003b74:	687b      	ldr	r3, [r7, #4]
20003b76:	b2da      	uxtb	r2, r3
20003b78:	230c      	movs	r3, #12
20003b7a:	18f8      	adds	r0, r7, r3
20003b7c:	2345      	movs	r3, #69	; 0x45
20003b7e:	9300      	str	r3, [sp, #0]
20003b80:	0013      	movs	r3, r2
20003b82:	2200      	movs	r2, #0
20003b84:	f7fe f9e4 	bl	20001f50 <encode_request_id>
					while (msTicks < timeStamp && nocid)
20003b88:	e009      	b.n	20003b9e <getId+0x12e>
					{
						CANsendMessage(&idRequest);
20003b8a:	230c      	movs	r3, #12
20003b8c:	18fb      	adds	r3, r7, r3
20003b8e:	0018      	movs	r0, r3
20003b90:	f7fc fbb3 	bl	200002fa <CANsendMessage>
						delay(1000);
20003b94:	23fa      	movs	r3, #250	; 0xfa
20003b96:	009b      	lsls	r3, r3, #2
20003b98:	0018      	movs	r0, r3
20003b9a:	f7ff fccd 	bl	20003538 <delay>
					while (msTicks < timeStamp && nocid)
20003b9e:	4b08      	ldr	r3, [pc, #32]	; (20003bc0 <getId+0x150>)
20003ba0:	681a      	ldr	r2, [r3, #0]
20003ba2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
20003ba4:	429a      	cmp	r2, r3
20003ba6:	d203      	bcs.n	20003bb0 <getId+0x140>
20003ba8:	4b08      	ldr	r3, [pc, #32]	; (20003bcc <getId+0x15c>)
20003baa:	781b      	ldrb	r3, [r3, #0]
20003bac:	2b00      	cmp	r3, #0
20003bae:	d1ec      	bne.n	20003b8a <getId+0x11a>
					}
			 }
	}
20003bb0:	46c0      	nop			; (mov r8, r8)
20003bb2:	46bd      	mov	sp, r7
20003bb4:	b00d      	add	sp, #52	; 0x34
20003bb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
20003bb8:	fffffe03 			; <UNDEFINED> instruction: 0xfffffe03
20003bbc:	20003a1d 	andcs	r3, r0, sp, lsl sl
20003bc0:	20003e88 	andcs	r3, r0, r8, lsl #29
20003bc4:	00001388 	andeq	r1, r0, r8, lsl #7
20003bc8:	20003e84 	andcs	r3, r0, r4, lsl #29
20003bcc:	20003f84 	andcs	r3, r0, r4, lsl #31

20003bd0 <sendAlarm>:

	void sendAlarm (door alarming_door){
20003bd0:	b084      	sub	sp, #16
20003bd2:	b590      	push	{r4, r7, lr}
20003bd4:	b087      	sub	sp, #28
20003bd6:	af00      	add	r7, sp, #0
20003bd8:	2428      	movs	r4, #40	; 0x28
20003bda:	193c      	adds	r4, r7, r4
20003bdc:	6020      	str	r0, [r4, #0]
20003bde:	6061      	str	r1, [r4, #4]
20003be0:	60a2      	str	r2, [r4, #8]
20003be2:	60e3      	str	r3, [r4, #12]
		CanTxMsg testMsg = {
20003be4:	1d3b      	adds	r3, r7, #4
20003be6:	0018      	movs	r0, r3
20003be8:	2314      	movs	r3, #20
20003bea:	001a      	movs	r2, r3
20003bec:	2100      	movs	r1, #0
20003bee:	f000 f941 	bl	20003e74 <memset>
20003bf2:	1d3b      	adds	r3, r7, #4
20003bf4:	2204      	movs	r2, #4
20003bf6:	605a      	str	r2, [r3, #4]
20003bf8:	1d3b      	adds	r3, r7, #4
20003bfa:	2204      	movs	r2, #4
20003bfc:	721a      	strb	r2, [r3, #8]
20003bfe:	1d3b      	adds	r3, r7, #4
20003c00:	2204      	movs	r2, #4
20003c02:	729a      	strb	r2, [r3, #10]
20003c04:	1d3b      	adds	r3, r7, #4
20003c06:	220a      	movs	r2, #10
20003c08:	72da      	strb	r2, [r3, #11]
20003c0a:	1d3b      	adds	r3, r7, #4
20003c0c:	220b      	movs	r2, #11
20003c0e:	731a      	strb	r2, [r3, #12]
20003c10:	1d3b      	adds	r3, r7, #4
20003c12:	220c      	movs	r2, #12
20003c14:	735a      	strb	r2, [r3, #13]
20003c16:	1d3b      	adds	r3, r7, #4
20003c18:	2201      	movs	r2, #1
20003c1a:	739a      	strb	r2, [r3, #14]
							0, 0x4, CAN_Id_Extended, CAN_RTR_DATA, 4, {0xa,0xb,0xc,1} 
						};
						CANsendMessage(&testMsg);
20003c1c:	1d3b      	adds	r3, r7, #4
20003c1e:	0018      	movs	r0, r3
20003c20:	f7fc fb6b 	bl	200002fa <CANsendMessage>
20003c24:	46c0      	nop			; (mov r8, r8)
20003c26:	46bd      	mov	sp, r7
20003c28:	b007      	add	sp, #28
20003c2a:	bc90      	pop	{r4, r7}
20003c2c:	bc08      	pop	{r3}
20003c2e:	b004      	add	sp, #16
20003c30:	4718      	bx	r3
20003c32:	46c0      	nop			; (mov r8, r8)

20003c34 <bufferInit>:
#include "buffer.h"

//Nollställer bufferten
void bufferInit(FIFO *buffer) {
20003c34:	b580      	push	{r7, lr}
20003c36:	b082      	sub	sp, #8
20003c38:	af00      	add	r7, sp, #0
20003c3a:	6078      	str	r0, [r7, #4]
    buffer->count = 0;
20003c3c:	687b      	ldr	r3, [r7, #4]
20003c3e:	2264      	movs	r2, #100	; 0x64
20003c40:	2100      	movs	r1, #0
20003c42:	5499      	strb	r1, [r3, r2]
    buffer->in = 0;
20003c44:	687b      	ldr	r3, [r7, #4]
20003c46:	2265      	movs	r2, #101	; 0x65
20003c48:	2100      	movs	r1, #0
20003c4a:	5499      	strb	r1, [r3, r2]
    buffer->out = 0;
20003c4c:	687b      	ldr	r3, [r7, #4]
20003c4e:	2266      	movs	r2, #102	; 0x66
20003c50:	2100      	movs	r1, #0
20003c52:	5499      	strb	r1, [r3, r2]
}
20003c54:	46c0      	nop			; (mov r8, r8)
20003c56:	46bd      	mov	sp, r7
20003c58:	b002      	add	sp, #8
20003c5a:	bd80      	pop	{r7, pc}

20003c5c <bufferPut>:

//Lägger till ett elem i buffern.
//Returnerar 1 om det lyckades, 0 annars.
uint8_t bufferPut ( FIFO *buffer, uint8_t elem) {
20003c5c:	b580      	push	{r7, lr}
20003c5e:	b082      	sub	sp, #8
20003c60:	af00      	add	r7, sp, #0
20003c62:	6078      	str	r0, [r7, #4]
20003c64:	000a      	movs	r2, r1
20003c66:	1cfb      	adds	r3, r7, #3
20003c68:	701a      	strb	r2, [r3, #0]
    //Kollar om bufferten är full.
    if (buffer->count == BUFFERSIZE){
20003c6a:	687b      	ldr	r3, [r7, #4]
20003c6c:	2264      	movs	r2, #100	; 0x64
20003c6e:	5c9b      	ldrb	r3, [r3, r2]
20003c70:	2b64      	cmp	r3, #100	; 0x64
20003c72:	d101      	bne.n	20003c78 <bufferPut+0x1c>
        return 0;
20003c74:	2300      	movs	r3, #0
20003c76:	e01e      	b.n	20003cb6 <bufferPut+0x5a>
    }

    //Lägger elem i bufferten
    buffer->buff[buffer->in++] = elem;
20003c78:	687b      	ldr	r3, [r7, #4]
20003c7a:	2265      	movs	r2, #101	; 0x65
20003c7c:	5c9b      	ldrb	r3, [r3, r2]
20003c7e:	1c5a      	adds	r2, r3, #1
20003c80:	b2d0      	uxtb	r0, r2
20003c82:	687a      	ldr	r2, [r7, #4]
20003c84:	2165      	movs	r1, #101	; 0x65
20003c86:	5450      	strb	r0, [r2, r1]
20003c88:	0019      	movs	r1, r3
20003c8a:	687b      	ldr	r3, [r7, #4]
20003c8c:	1cfa      	adds	r2, r7, #3
20003c8e:	7812      	ldrb	r2, [r2, #0]
20003c90:	545a      	strb	r2, [r3, r1]
    buffer->count++;
20003c92:	687b      	ldr	r3, [r7, #4]
20003c94:	2264      	movs	r2, #100	; 0x64
20003c96:	5c9b      	ldrb	r3, [r3, r2]
20003c98:	3301      	adds	r3, #1
20003c9a:	b2d9      	uxtb	r1, r3
20003c9c:	687b      	ldr	r3, [r7, #4]
20003c9e:	2264      	movs	r2, #100	; 0x64
20003ca0:	5499      	strb	r1, [r3, r2]

    //Justerar pekaren om vi nått slutet
    if (buffer->in == BUFFERSIZE)
20003ca2:	687b      	ldr	r3, [r7, #4]
20003ca4:	2265      	movs	r2, #101	; 0x65
20003ca6:	5c9b      	ldrb	r3, [r3, r2]
20003ca8:	2b64      	cmp	r3, #100	; 0x64
20003caa:	d103      	bne.n	20003cb4 <bufferPut+0x58>
        buffer->in = 0;
20003cac:	687b      	ldr	r3, [r7, #4]
20003cae:	2265      	movs	r2, #101	; 0x65
20003cb0:	2100      	movs	r1, #0
20003cb2:	5499      	strb	r1, [r3, r2]

    return 1;
20003cb4:	2301      	movs	r3, #1
}
20003cb6:	0018      	movs	r0, r3
20003cb8:	46bd      	mov	sp, r7
20003cba:	b002      	add	sp, #8
20003cbc:	bd80      	pop	{r7, pc}

20003cbe <bufferOverrideLast>:

//Skriver över föregående elem i buffern.
//Ändrar inga indexeringsvariabler
void bufferOverrideLast ( FIFO *buffer, uint8_t elem) {
20003cbe:	b580      	push	{r7, lr}
20003cc0:	b084      	sub	sp, #16
20003cc2:	af00      	add	r7, sp, #0
20003cc4:	6078      	str	r0, [r7, #4]
20003cc6:	000a      	movs	r2, r1
20003cc8:	1cfb      	adds	r3, r7, #3
20003cca:	701a      	strb	r2, [r3, #0]
    //Index för föregående element i buffern
    uint8_t prevIndex;

    //Om index för nästa element är 0 så blir föregående BUFFERSIZE - 1
    //annars buffer->in - 1
    prevIndex =  (buffer->in == 0) ? BUFFERSIZE - 1 : buffer->in - 1;
20003ccc:	687b      	ldr	r3, [r7, #4]
20003cce:	2265      	movs	r2, #101	; 0x65
20003cd0:	5c9b      	ldrb	r3, [r3, r2]
20003cd2:	2b00      	cmp	r3, #0
20003cd4:	d005      	beq.n	20003ce2 <bufferOverrideLast+0x24>
20003cd6:	687b      	ldr	r3, [r7, #4]
20003cd8:	2265      	movs	r2, #101	; 0x65
20003cda:	5c9b      	ldrb	r3, [r3, r2]
20003cdc:	3b01      	subs	r3, #1
20003cde:	b2da      	uxtb	r2, r3
20003ce0:	e000      	b.n	20003ce4 <bufferOverrideLast+0x26>
20003ce2:	2263      	movs	r2, #99	; 0x63
20003ce4:	210f      	movs	r1, #15
20003ce6:	187b      	adds	r3, r7, r1
20003ce8:	701a      	strb	r2, [r3, #0]

    //Skriver över elem i bufferten
    buffer->buff[prevIndex] = elem;
20003cea:	187b      	adds	r3, r7, r1
20003cec:	781b      	ldrb	r3, [r3, #0]
20003cee:	687a      	ldr	r2, [r7, #4]
20003cf0:	1cf9      	adds	r1, r7, #3
20003cf2:	7809      	ldrb	r1, [r1, #0]
20003cf4:	54d1      	strb	r1, [r2, r3]
}
20003cf6:	46c0      	nop			; (mov r8, r8)
20003cf8:	46bd      	mov	sp, r7
20003cfa:	b004      	add	sp, #16
20003cfc:	bd80      	pop	{r7, pc}

20003cfe <bufferGet>:

//Hämtar ett element från buffern till dest.
//Returnerar 1 om det lyckades, 0 annars.
uint8_t bufferGet ( FIFO *buffer, uint8_t *dest) {
20003cfe:	b580      	push	{r7, lr}
20003d00:	b082      	sub	sp, #8
20003d02:	af00      	add	r7, sp, #0
20003d04:	6078      	str	r0, [r7, #4]
20003d06:	6039      	str	r1, [r7, #0]
    //Kollar om bufferten är tom
    if (!buffer->count){
20003d08:	687b      	ldr	r3, [r7, #4]
20003d0a:	2264      	movs	r2, #100	; 0x64
20003d0c:	5c9b      	ldrb	r3, [r3, r2]
20003d0e:	2b00      	cmp	r3, #0
20003d10:	d101      	bne.n	20003d16 <bufferGet+0x18>
        return 0;
20003d12:	2300      	movs	r3, #0
20003d14:	e01e      	b.n	20003d54 <bufferGet+0x56>
    }

    //Hämtar element ur buffern till dest
    *dest = buffer->buff[buffer->out++];
20003d16:	687b      	ldr	r3, [r7, #4]
20003d18:	2266      	movs	r2, #102	; 0x66
20003d1a:	5c9b      	ldrb	r3, [r3, r2]
20003d1c:	1c5a      	adds	r2, r3, #1
20003d1e:	b2d0      	uxtb	r0, r2
20003d20:	687a      	ldr	r2, [r7, #4]
20003d22:	2166      	movs	r1, #102	; 0x66
20003d24:	5450      	strb	r0, [r2, r1]
20003d26:	001a      	movs	r2, r3
20003d28:	687b      	ldr	r3, [r7, #4]
20003d2a:	5c9a      	ldrb	r2, [r3, r2]
20003d2c:	683b      	ldr	r3, [r7, #0]
20003d2e:	701a      	strb	r2, [r3, #0]
    buffer->count--;
20003d30:	687b      	ldr	r3, [r7, #4]
20003d32:	2264      	movs	r2, #100	; 0x64
20003d34:	5c9b      	ldrb	r3, [r3, r2]
20003d36:	3b01      	subs	r3, #1
20003d38:	b2d9      	uxtb	r1, r3
20003d3a:	687b      	ldr	r3, [r7, #4]
20003d3c:	2264      	movs	r2, #100	; 0x64
20003d3e:	5499      	strb	r1, [r3, r2]

    //Justerar pekaren om vi nått slutet
    if (buffer->out == BUFFERSIZE)
20003d40:	687b      	ldr	r3, [r7, #4]
20003d42:	2266      	movs	r2, #102	; 0x66
20003d44:	5c9b      	ldrb	r3, [r3, r2]
20003d46:	2b64      	cmp	r3, #100	; 0x64
20003d48:	d103      	bne.n	20003d52 <bufferGet+0x54>
        buffer->out = 0;
20003d4a:	687b      	ldr	r3, [r7, #4]
20003d4c:	2266      	movs	r2, #102	; 0x66
20003d4e:	2100      	movs	r1, #0
20003d50:	5499      	strb	r1, [r3, r2]

    return 1;
20003d52:	2301      	movs	r3, #1
20003d54:	0018      	movs	r0, r3
20003d56:	46bd      	mov	sp, r7
20003d58:	b002      	add	sp, #8
20003d5a:	bd80      	pop	{r7, pc}

20003d5c <__udivsi3>:
20003d5c:	2200      	movs	r2, #0
20003d5e:	0843      	lsrs	r3, r0, #1
20003d60:	428b      	cmp	r3, r1
20003d62:	d374      	bcc.n	20003e4e <__udivsi3+0xf2>
20003d64:	0903      	lsrs	r3, r0, #4
20003d66:	428b      	cmp	r3, r1
20003d68:	d35f      	bcc.n	20003e2a <__udivsi3+0xce>
20003d6a:	0a03      	lsrs	r3, r0, #8
20003d6c:	428b      	cmp	r3, r1
20003d6e:	d344      	bcc.n	20003dfa <__udivsi3+0x9e>
20003d70:	0b03      	lsrs	r3, r0, #12
20003d72:	428b      	cmp	r3, r1
20003d74:	d328      	bcc.n	20003dc8 <__udivsi3+0x6c>
20003d76:	0c03      	lsrs	r3, r0, #16
20003d78:	428b      	cmp	r3, r1
20003d7a:	d30d      	bcc.n	20003d98 <__udivsi3+0x3c>
20003d7c:	22ff      	movs	r2, #255	; 0xff
20003d7e:	0209      	lsls	r1, r1, #8
20003d80:	ba12      	rev	r2, r2
20003d82:	0c03      	lsrs	r3, r0, #16
20003d84:	428b      	cmp	r3, r1
20003d86:	d302      	bcc.n	20003d8e <__udivsi3+0x32>
20003d88:	1212      	asrs	r2, r2, #8
20003d8a:	0209      	lsls	r1, r1, #8
20003d8c:	d065      	beq.n	20003e5a <__udivsi3+0xfe>
20003d8e:	0b03      	lsrs	r3, r0, #12
20003d90:	428b      	cmp	r3, r1
20003d92:	d319      	bcc.n	20003dc8 <__udivsi3+0x6c>
20003d94:	e000      	b.n	20003d98 <__udivsi3+0x3c>
20003d96:	0a09      	lsrs	r1, r1, #8
20003d98:	0bc3      	lsrs	r3, r0, #15
20003d9a:	428b      	cmp	r3, r1
20003d9c:	d301      	bcc.n	20003da2 <__udivsi3+0x46>
20003d9e:	03cb      	lsls	r3, r1, #15
20003da0:	1ac0      	subs	r0, r0, r3
20003da2:	4152      	adcs	r2, r2
20003da4:	0b83      	lsrs	r3, r0, #14
20003da6:	428b      	cmp	r3, r1
20003da8:	d301      	bcc.n	20003dae <__udivsi3+0x52>
20003daa:	038b      	lsls	r3, r1, #14
20003dac:	1ac0      	subs	r0, r0, r3
20003dae:	4152      	adcs	r2, r2
20003db0:	0b43      	lsrs	r3, r0, #13
20003db2:	428b      	cmp	r3, r1
20003db4:	d301      	bcc.n	20003dba <__udivsi3+0x5e>
20003db6:	034b      	lsls	r3, r1, #13
20003db8:	1ac0      	subs	r0, r0, r3
20003dba:	4152      	adcs	r2, r2
20003dbc:	0b03      	lsrs	r3, r0, #12
20003dbe:	428b      	cmp	r3, r1
20003dc0:	d301      	bcc.n	20003dc6 <__udivsi3+0x6a>
20003dc2:	030b      	lsls	r3, r1, #12
20003dc4:	1ac0      	subs	r0, r0, r3
20003dc6:	4152      	adcs	r2, r2
20003dc8:	0ac3      	lsrs	r3, r0, #11
20003dca:	428b      	cmp	r3, r1
20003dcc:	d301      	bcc.n	20003dd2 <__udivsi3+0x76>
20003dce:	02cb      	lsls	r3, r1, #11
20003dd0:	1ac0      	subs	r0, r0, r3
20003dd2:	4152      	adcs	r2, r2
20003dd4:	0a83      	lsrs	r3, r0, #10
20003dd6:	428b      	cmp	r3, r1
20003dd8:	d301      	bcc.n	20003dde <__udivsi3+0x82>
20003dda:	028b      	lsls	r3, r1, #10
20003ddc:	1ac0      	subs	r0, r0, r3
20003dde:	4152      	adcs	r2, r2
20003de0:	0a43      	lsrs	r3, r0, #9
20003de2:	428b      	cmp	r3, r1
20003de4:	d301      	bcc.n	20003dea <__udivsi3+0x8e>
20003de6:	024b      	lsls	r3, r1, #9
20003de8:	1ac0      	subs	r0, r0, r3
20003dea:	4152      	adcs	r2, r2
20003dec:	0a03      	lsrs	r3, r0, #8
20003dee:	428b      	cmp	r3, r1
20003df0:	d301      	bcc.n	20003df6 <__udivsi3+0x9a>
20003df2:	020b      	lsls	r3, r1, #8
20003df4:	1ac0      	subs	r0, r0, r3
20003df6:	4152      	adcs	r2, r2
20003df8:	d2cd      	bcs.n	20003d96 <__udivsi3+0x3a>
20003dfa:	09c3      	lsrs	r3, r0, #7
20003dfc:	428b      	cmp	r3, r1
20003dfe:	d301      	bcc.n	20003e04 <__udivsi3+0xa8>
20003e00:	01cb      	lsls	r3, r1, #7
20003e02:	1ac0      	subs	r0, r0, r3
20003e04:	4152      	adcs	r2, r2
20003e06:	0983      	lsrs	r3, r0, #6
20003e08:	428b      	cmp	r3, r1
20003e0a:	d301      	bcc.n	20003e10 <__udivsi3+0xb4>
20003e0c:	018b      	lsls	r3, r1, #6
20003e0e:	1ac0      	subs	r0, r0, r3
20003e10:	4152      	adcs	r2, r2
20003e12:	0943      	lsrs	r3, r0, #5
20003e14:	428b      	cmp	r3, r1
20003e16:	d301      	bcc.n	20003e1c <__udivsi3+0xc0>
20003e18:	014b      	lsls	r3, r1, #5
20003e1a:	1ac0      	subs	r0, r0, r3
20003e1c:	4152      	adcs	r2, r2
20003e1e:	0903      	lsrs	r3, r0, #4
20003e20:	428b      	cmp	r3, r1
20003e22:	d301      	bcc.n	20003e28 <__udivsi3+0xcc>
20003e24:	010b      	lsls	r3, r1, #4
20003e26:	1ac0      	subs	r0, r0, r3
20003e28:	4152      	adcs	r2, r2
20003e2a:	08c3      	lsrs	r3, r0, #3
20003e2c:	428b      	cmp	r3, r1
20003e2e:	d301      	bcc.n	20003e34 <__udivsi3+0xd8>
20003e30:	00cb      	lsls	r3, r1, #3
20003e32:	1ac0      	subs	r0, r0, r3
20003e34:	4152      	adcs	r2, r2
20003e36:	0883      	lsrs	r3, r0, #2
20003e38:	428b      	cmp	r3, r1
20003e3a:	d301      	bcc.n	20003e40 <__udivsi3+0xe4>
20003e3c:	008b      	lsls	r3, r1, #2
20003e3e:	1ac0      	subs	r0, r0, r3
20003e40:	4152      	adcs	r2, r2
20003e42:	0843      	lsrs	r3, r0, #1
20003e44:	428b      	cmp	r3, r1
20003e46:	d301      	bcc.n	20003e4c <__udivsi3+0xf0>
20003e48:	004b      	lsls	r3, r1, #1
20003e4a:	1ac0      	subs	r0, r0, r3
20003e4c:	4152      	adcs	r2, r2
20003e4e:	1a41      	subs	r1, r0, r1
20003e50:	d200      	bcs.n	20003e54 <__udivsi3+0xf8>
20003e52:	4601      	mov	r1, r0
20003e54:	4152      	adcs	r2, r2
20003e56:	4610      	mov	r0, r2
20003e58:	4770      	bx	lr
20003e5a:	e7ff      	b.n	20003e5c <__udivsi3+0x100>
20003e5c:	b501      	push	{r0, lr}
20003e5e:	2000      	movs	r0, #0
20003e60:	f000 f806 	bl	20003e70 <__aeabi_idiv0>
20003e64:	bd02      	pop	{r1, pc}
20003e66:	46c0      	nop			; (mov r8, r8)

20003e68 <__aeabi_uidivmod>:
20003e68:	2900      	cmp	r1, #0
20003e6a:	d0f7      	beq.n	20003e5c <__udivsi3+0x100>
20003e6c:	e776      	b.n	20003d5c <__udivsi3>
20003e6e:	4770      	bx	lr

20003e70 <__aeabi_idiv0>:
20003e70:	4770      	bx	lr
20003e72:	46c0      	nop			; (mov r8, r8)

20003e74 <memset>:
20003e74:	0003      	movs	r3, r0
20003e76:	1812      	adds	r2, r2, r0
20003e78:	4293      	cmp	r3, r2
20003e7a:	d100      	bne.n	20003e7e <memset+0xa>
20003e7c:	4770      	bx	lr
20003e7e:	7019      	strb	r1, [r3, #0]
20003e80:	3301      	adds	r3, #1
20003e82:	e7f9      	b.n	20003e78 <memset+0x4>

20003e84 <id>:
20003e84:	00000000 	andeq	r0, r0, r0

20003e88 <msTicks>:
20003e88:	00000000 	andeq	r0, r0, r0

20003e8c <SessionID>:
20003e8c:	00000000 	andeq	r0, r0, r0

20003e90 <handlerList>:
	...

20003f70 <SessionIDActive>:
20003f70:	00000000 	andeq	r0, r0, r0

20003f74 <APBAHBPrescTable>:
20003f74:	00000000 	andeq	r0, r0, r0
20003f78:	04030201 	streq	r0, [r3], #-513	; 0xfffffdff
20003f7c:	04030201 	streq	r0, [r3], #-513	; 0xfffffdff
20003f80:	09080706 	stmdbeq	r8, {r1, r2, r8, r9, sl}

20003f84 <nocid>:
20003f84:	00000001 	andeq	r0, r0, r1

20003f88 <GPIO_Pins>:
20003f88:	00020001 	andeq	r0, r2, r1
20003f8c:	00080004 	andeq	r0, r8, r4
20003f90:	00200010 	eoreq	r0, r0, r0, lsl r0
20003f94:	00800040 	addeq	r0, r0, r0, asr #32
20003f98:	02000100 	andeq	r0, r0, #0, 2
20003f9c:	08000400 	stmdaeq	r0, {sl}
20003fa0:	20001000 	andcs	r1, r0, r0
20003fa4:	80004000 	andhi	r4, r0, r0

20003fa8 <GPIO_Ports>:
20003fa8:	40021000 	andmi	r1, r2, r0
20003fac:	40020000 	andmi	r0, r2, r0
20003fb0:	40020c00 	andmi	r0, r2, r0, lsl #24
20003fb4:	40020800 	andmi	r0, r2, r0, lsl #16

Disassembly of section .debug_info:

00000000 <.debug_info>:
       0:	000010dc 	ldrdeq	r1, [r0], -ip
       4:	00000004 	andeq	r0, r0, r4
       8:	01040000 	mrseq	r0, (UNDEF: 4)
       c:	000004b8 			; <UNDEFINED> instruction: 0x000004b8
      10:	0006970c 	andeq	r9, r6, ip, lsl #14
      14:	00040700 	andeq	r0, r4, r0, lsl #14
      18:	00001000 	andeq	r1, r0, r0
      1c:	00078820 	andeq	r8, r7, r0, lsr #16
      20:	00000000 	andeq	r0, r0, r0
      24:	0c120200 	lfmeq	f0, 4, [r2], {-0}
      28:	01050000 	mrseq	r0, (UNDEF: 5)
      2c:	00000253 	andeq	r0, r0, r3, asr r2
      30:	0253c803 	subseq	ip, r3, #196608	; 0x30000
      34:	24030000 	strcs	r0, [r3], #-0
      38:	72000006 	andvc	r0, r0, #6
      3c:	00065303 	andeq	r5, r6, r3, lsl #6
      40:	22037400 	andcs	r7, r3, #0, 8
      44:	75000007 	strvc	r0, [r0, #-7]
      48:	00038d03 	andeq	r8, r3, r3, lsl #26
      4c:	d8037600 	stmdale	r3, {r9, sl, ip, sp, lr}
      50:	7b000007 	blvc	74 <startup-0x1fffff8c>
      54:	000aff03 	andeq	pc, sl, r3, lsl #30
      58:	dc037c00 	stcle	12, cr7, [r3], {-0}
      5c:	7e00000c 	cdpvc	0, 0, cr0, cr0, cr12, {0}
      60:	00024903 	andeq	r4, r2, r3, lsl #18
      64:	38047f00 	stmdacc	r4, {r8, r9, sl, fp, ip, sp, lr}
      68:	00000006 	andeq	r0, r0, r6
      6c:	000a8904 	andeq	r8, sl, r4, lsl #18
      70:	79040100 	stmdbvc	r4, {r8}
      74:	02000006 	andeq	r0, r0, #6
      78:	00000904 	andeq	r0, r0, r4, lsl #18
      7c:	c7040300 	strgt	r0, [r4, -r0, lsl #6]
      80:	04000000 	streq	r0, [r0], #-0
      84:	000b7e04 	andeq	r7, fp, r4, lsl #28
      88:	b9040500 	stmdblt	r4, {r8, sl}
      8c:	0600000a 	streq	r0, [r0], -sl
      90:	0005c404 	andeq	ip, r5, r4, lsl #8
      94:	17040700 	strne	r0, [r4, -r0, lsl #14]
      98:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
      9c:	000cd104 	andeq	sp, ip, r4, lsl #2
      a0:	33040900 	movwcc	r0, #18688	; 0x4900
      a4:	0a000008 	beq	cc <startup-0x1fffff34>
      a8:	00096c04 	andeq	r6, r9, r4, lsl #24
      ac:	94040b00 	strls	r0, [r4], #-2816	; 0xfffff500
      b0:	0c000008 	stceq	0, cr0, [r0], {8}
      b4:	0002b304 	andeq	fp, r2, r4, lsl #6
      b8:	92040d00 	andls	r0, r4, #0, 26
      bc:	0e00000b 	cdpeq	0, 0, cr0, cr0, cr11, {0}
      c0:	000ac904 	andeq	ip, sl, r4, lsl #18
      c4:	dc040f00 	stcle	15, cr0, [r4], {-0}
      c8:	10000005 	andne	r0, r0, r5
      cc:	00002204 	andeq	r2, r0, r4, lsl #4
      d0:	59041100 	stmdbpl	r4, {r8, ip}
      d4:	1200000a 	andne	r0, r0, #10
      d8:	0005cf04 	andeq	ip, r5, r4, lsl #30
      dc:	61041300 	mrsvs	r1, LR_abt
      e0:	14000004 	strne	r0, [r0], #-4
      e4:	000c6304 	andeq	r6, ip, r4, lsl #6
      e8:	89041500 	stmdbhi	r4, {r8, sl, ip}
      ec:	16000006 	strne	r0, [r0], -r6
      f0:	000c7e04 	andeq	r7, ip, r4, lsl #28
      f4:	3b041700 	blcc	105cfc <startup-0x1fefa304>
      f8:	18000007 	stmdane	r0, {r0, r1, r2}
      fc:	000c0404 	andeq	r0, ip, r4, lsl #8
     100:	0f041900 	svceq	0x00041900
     104:	1a000002 	bne	114 <startup-0x1ffffeec>
     108:	0005a904 	andeq	sl, r5, r4, lsl #18
     10c:	1e041b00 	vmlane.f64	d1, d4, d0
     110:	1c000001 	stcne	0, cr0, [r0], {1}
     114:	0009ed04 	andeq	lr, r9, r4, lsl #26
     118:	ae041d00 	cdpge	13, 0, cr1, cr4, cr0, {0}
     11c:	1e000004 	cdpne	0, 0, cr0, cr0, cr4, {0}
     120:	00056404 	andeq	r6, r5, r4, lsl #8
     124:	25041f00 	strcs	r1, [r4, #-3840]	; 0xfffff100
     128:	20000003 	andcs	r0, r0, r3
     12c:	00085704 	andeq	r5, r8, r4, lsl #14
     130:	ff042100 			; <UNDEFINED> instruction: 0xff042100
     134:	22000006 	andcs	r0, r0, #6
     138:	0007b604 	andeq	fp, r7, r4, lsl #12
     13c:	88042300 	stmdahi	r4, {r8, r9, sp}
     140:	24000001 	strcs	r0, [r0], #-1
     144:	0009f704 	andeq	pc, r9, r4, lsl #14
     148:	a4042500 	strge	r2, [r4], #-1280	; 0xfffffb00
     14c:	2600000b 	strcs	r0, [r0], -fp
     150:	00025604 	andeq	r5, r2, r4, lsl #12
     154:	c7042700 	strgt	r2, [r4, -r0, lsl #14]
     158:	28000009 	stmdacs	r0, {r0, r3}
     15c:	00097e04 	andeq	r7, r9, r4, lsl #28
     160:	22042900 	andcs	r2, r4, #0, 18
     164:	2a000008 	bcs	18c <startup-0x1ffffe74>
     168:	00019204 	andeq	r9, r1, r4, lsl #4
     16c:	34042b00 	strcc	r2, [r4], #-2816	; 0xfffff500
     170:	2c000000 	stccs	0, cr0, [r0], {-0}
     174:	0005ee04 	andeq	lr, r5, r4, lsl #28
     178:	af042d00 	svcge	0x00042d00
     17c:	2e00000c 	cdpcs	0, 0, cr0, cr0, cr12, {0}
     180:	000d0604 	andeq	r0, sp, r4, lsl #12
     184:	af042f00 	svcge	0x00042f00
     188:	3000000a 	andcc	r0, r0, sl
     18c:	000cbc04 	andeq	fp, ip, r4, lsl #24
     190:	83043100 	movwhi	r3, #16640	; 0x4100
     194:	32000003 	andcc	r0, r0, #3
     198:	0000bd04 	andeq	fp, r0, r4, lsl #26
     19c:	0e043300 	cdpeq	3, 0, cr3, cr4, cr0, {0}
     1a0:	34000008 	strcc	r0, [r0], #-8
     1a4:	00073004 	andeq	r3, r7, r4
     1a8:	3e043500 	cfsh32cc	mvfx3, mvfx4, #0
     1ac:	36000008 	strcc	r0, [r0], -r8
     1b0:	00077604 	andeq	r7, r7, r4, lsl #12
     1b4:	e8043700 	stmda	r4, {r8, r9, sl, ip, sp}
     1b8:	38000006 	stmdacc	r0, {r1, r2}
     1bc:	00009504 	andeq	r9, r0, r4, lsl #10
     1c0:	5d043900 	vstrpl.16	s6, [r4, #-0]	; <UNPREDICTABLE>
     1c4:	3a00000d 	bcc	200 <startup-0x1ffffe00>
     1c8:	0008a604 	andeq	sl, r8, r4, lsl #12
     1cc:	e7043b00 	str	r3, [r4, -r0, lsl #22]
     1d0:	3c000002 	stccc	0, cr0, [r0], {2}
     1d4:	000b4c04 	andeq	r4, fp, r4, lsl #24
     1d8:	8e043d00 	cdphi	13, 0, cr3, cr4, cr0, {0}
     1dc:	3e000007 	cdpcc	0, 0, cr0, cr0, cr7, {0}
     1e0:	0008b804 	andeq	fp, r8, r4, lsl #16
     1e4:	54043f00 	strpl	r3, [r4], #-3840	; 0xfffff100
     1e8:	40000001 	andmi	r0, r0, r1
     1ec:	000a4b04 	andeq	r4, sl, r4, lsl #22
     1f0:	54044100 	strpl	r4, [r4], #-256	; 0xffffff00
     1f4:	42000003 	andmi	r0, r0, #3
     1f8:	00061804 	andeq	r1, r6, r4, lsl #16
     1fc:	f0044300 			; <UNDEFINED> instruction: 0xf0044300
     200:	44000001 	strmi	r0, [r0], #-1
     204:	000adb04 	andeq	sp, sl, r4, lsl #22
     208:	06044500 	streq	r4, [r4], -r0, lsl #10
     20c:	46000006 	strmi	r0, [r0], -r6
     210:	00016204 	andeq	r6, r1, r4, lsl #4
     214:	1f044700 	svcne	0x00044700
     218:	4800000b 	stmdami	r0, {r0, r1, r3}
     21c:	0009b004 	andeq	fp, r9, r4
     220:	38044900 	stmdacc	r4, {r8, fp, lr}
     224:	4a00000c 	bmi	25c <startup-0x1ffffda4>
     228:	000ce804 	andeq	lr, ip, r4, lsl #16
     22c:	42044b00 	andmi	r4, r4, #0, 22
     230:	4c000006 	stcmi	0, cr0, [r0], {6}
     234:	00079c04 	andeq	r9, r7, r4, lsl #24
     238:	ea044d00 	b	113640 <startup-0x1feec9c0>
     23c:	4e000000 	cdpmi	0, 0, cr0, cr0, cr0, {0}
     240:	0009bd04 	andeq	fp, r9, r4, lsl #26
     244:	b6044f00 	strlt	r4, [r4], -r0, lsl #30
     248:	50000005 	andpl	r0, r0, r5
     24c:	00080504 	andeq	r0, r8, r4, lsl #10
     250:	05005100 	streq	r5, [r0, #-256]	; 0xffffff00
     254:	02db0601 	sbcseq	r0, fp, #1048576	; 0x100000
     258:	d1060000 	mrsle	r0, (UNDEF: 6)
     25c:	03000006 	movweq	r0, #6
     260:	0025032f 	eoreq	r0, r5, pc, lsr #6
     264:	7e070000 	cdpvc	0, 0, cr0, cr7, cr0, {0}
     268:	04000001 	streq	r0, [r0], #-1
     26c:	0002712b 	andeq	r7, r2, fp, lsr #2
     270:	08010500 	stmdaeq	r1, {r8, sl}
     274:	000002d9 	ldrdeq	r0, [r0], -r9
     278:	74050205 	strvc	r0, [r5], #-517	; 0xfffffdfb
     27c:	0700000b 	streq	r0, [r0, -fp]
     280:	0000043c 	andeq	r0, r0, ip, lsr r4
     284:	028a3904 	addeq	r3, sl, #4, 18	; 0x10000
     288:	02050000 	andeq	r0, r5, #0
     28c:	000c9c07 	andeq	r9, ip, r7, lsl #24
     290:	0d180700 	ldceq	7, cr0, [r8, #-0]
     294:	4d040000 	stcmi	0, cr0, [r4, #-0]
     298:	0000029c 	muleq	r0, ip, r2
     29c:	85050405 	strhi	r0, [r5, #-1029]	; 0xfffffbfb
     2a0:	07000007 	streq	r0, [r0, -r7]
     2a4:	00000759 	andeq	r0, r0, r9, asr r7
     2a8:	02ae4f04 	adceq	r4, lr, #4, 30
     2ac:	04050000 	streq	r0, [r5], #-0
     2b0:	0009db07 	andeq	sp, r9, r7, lsl #22
     2b4:	05080500 	streq	r0, [r8, #-1280]	; 0xfffffb00
     2b8:	00000780 	andeq	r0, r0, r0, lsl #15
     2bc:	d6070805 	strle	r0, [r7], -r5, lsl #16
     2c0:	08000009 	stmdaeq	r0, {r0, r3}
     2c4:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
     2c8:	04050074 	streq	r0, [r5], #-116	; 0xffffff8c
     2cc:	0009e007 	andeq	lr, r9, r7
     2d0:	01800700 	orreq	r0, r0, r0, lsl #14
     2d4:	18050000 	stmdane	r5, {}	; <UNPREDICTABLE>
     2d8:	00000266 	andeq	r0, r0, r6, ror #4
     2dc:	0002d109 	andeq	sp, r2, r9, lsl #2
     2e0:	043e0700 	ldrteq	r0, [lr], #-1792	; 0xfffff900
     2e4:	24050000 	strcs	r0, [r5], #-0
     2e8:	0000027f 	andeq	r0, r0, pc, ror r2
     2ec:	0002e109 	andeq	lr, r2, r9, lsl #2
     2f0:	0d1a0700 	ldceq	7, cr0, [sl, #-0]
     2f4:	2c050000 	stccs	0, cr0, [r5], {-0}
     2f8:	00000291 	muleq	r0, r1, r2
     2fc:	0002f109 	andeq	pc, r2, r9, lsl #2
     300:	075b0700 	ldrbeq	r0, [fp, -r0, lsl #14]
     304:	30050000 	andcc	r0, r5, r0
     308:	000002a3 	andeq	r0, r0, r3, lsr #5
     30c:	00030109 	andeq	r0, r3, r9, lsl #2
     310:	030c0a00 	movweq	r0, #51712	; 0xca00
     314:	040b0000 	streq	r0, [fp], #-0
     318:	01a0010e 	lsleq	r0, lr, #2
     31c:	000003d2 	ldrdeq	r0, [r0], -r2
     320:	000d220c 	andeq	r2, sp, ip, lsl #4
     324:	01a20100 			; <UNDEFINED> instruction: 0x01a20100
     328:	000003e2 	andeq	r0, r0, r2, ror #7
     32c:	02c50c00 	sbceq	r0, r5, #0, 24
     330:	a3010000 	movwge	r0, #4096	; 0x1000
     334:	0003e701 	andeq	lr, r3, r1, lsl #14
     338:	730c2000 	movwvc	r2, #49152	; 0xc000
     33c:	0100000a 	tsteq	r0, sl
     340:	03e201a4 	mvneq	r0, #164, 2	; 0x29
     344:	0c800000 	stceq	0, cr0, [r0], {0}
     348:	00000000 	andeq	r0, r0, r0
     34c:	e701a501 	str	sl, [r1, -r1, lsl #10]
     350:	a0000003 	andge	r0, r0, r3
     354:	000ccc0d 	andeq	ip, ip, sp, lsl #24
     358:	01a60100 			; <UNDEFINED> instruction: 0x01a60100
     35c:	000003e2 	andeq	r0, r0, r2, ror #7
     360:	6f0d0100 	svcvs	0x000d0100
     364:	01000003 	tsteq	r0, r3
     368:	03e701a7 	mvneq	r0, #-1073741783	; 0xc0000029
     36c:	01200000 			; <UNDEFINED> instruction: 0x01200000
     370:	0001320d 	andeq	r3, r1, sp, lsl #4
     374:	01a80100 			; <UNDEFINED> instruction: 0x01a80100
     378:	000003e2 	andeq	r0, r0, r2, ror #7
     37c:	790d0180 	stmdbvc	sp, {r7, r8}
     380:	01000003 	tsteq	r0, r3
     384:	03e701a9 	mvneq	r0, #1073741866	; 0x4000002a
     388:	01a00000 	moveq	r0, r0
     38c:	0003120d 	andeq	r1, r3, sp, lsl #4
     390:	01aa0100 			; <UNDEFINED> instruction: 0x01aa0100
     394:	000003e2 	andeq	r0, r0, r2, ror #7
     398:	f90d0200 			; <UNDEFINED> instruction: 0xf90d0200
     39c:	01000002 	tsteq	r0, r2
     3a0:	03f701ab 	mvnseq	r0, #-1073741782	; 0xc000002a
     3a4:	02200000 	eoreq	r0, r0, #0
     3a8:	0050490e 	subseq	r4, r0, lr, lsl #18
     3ac:	1701ac01 	strne	sl, [r1, -r1, lsl #24]
     3b0:	00000004 	andeq	r0, r0, r4
     3b4:	03030d03 	movweq	r0, #15619	; 0x3d03
     3b8:	ad010000 	stcge	0, cr0, [r1, #-0]
     3bc:	00041c01 	andeq	r1, r4, r1, lsl #24
     3c0:	0d03f000 	stceq	0, cr15, [r3, #-0]
     3c4:	0000055f 	andeq	r0, r0, pc, asr r5
     3c8:	0c01ae01 	stceq	14, cr10, [r1], {1}
     3cc:	00000003 	andeq	r0, r0, r3
     3d0:	0c0f000e 	stceq	0, cr0, [pc], {14}
     3d4:	e2000003 	and	r0, r0, #3
     3d8:	10000003 	andne	r0, r0, r3
     3dc:	000002ca 	andeq	r0, r0, sl, asr #5
     3e0:	d2090007 	andle	r0, r9, #7
     3e4:	0f000003 	svceq	0x00000003
     3e8:	00000301 	andeq	r0, r0, r1, lsl #6
     3ec:	000003f7 	strdeq	r0, [r0], -r7
     3f0:	0002ca10 	andeq	ip, r2, r0, lsl sl
     3f4:	0f001700 	svceq	0x00001700
     3f8:	00000301 	andeq	r0, r0, r1, lsl #6
     3fc:	00000407 	andeq	r0, r0, r7, lsl #8
     400:	0002ca10 	andeq	ip, r2, r0, lsl sl
     404:	0f003700 	svceq	0x00003700
     408:	000002dc 	ldrdeq	r0, [r0], -ip
     40c:	00000417 	andeq	r0, r0, r7, lsl r4
     410:	0002ca10 	andeq	ip, r2, r0, lsl sl
     414:	0900ef00 	stmdbeq	r0, {r8, r9, sl, fp, sp, lr, pc}
     418:	00000407 	andeq	r0, r0, r7, lsl #8
     41c:	0003010f 	andeq	r0, r3, pc, lsl #2
     420:	00042d00 	andeq	r2, r4, r0, lsl #26
     424:	02ca1100 	sbceq	r1, sl, #0, 2
     428:	02830000 	addeq	r0, r3, #0
     42c:	09960600 	ldmibeq	r6, {r9, sl}
     430:	af010000 	svcge	0x00010000
     434:	00031601 	andeq	r1, r3, r1, lsl #12
     438:	018c1200 	orreq	r1, ip, r0, lsl #4
     43c:	055401c0 	ldrbeq	r0, [r4, #-448]	; 0xfffffe40
     440:	ea0c0000 	b	300448 <startup-0x1fcffbb8>
     444:	01000001 	tsteq	r0, r1
     448:	031101c2 	tsteq	r1, #-2147483600	; 0x80000030
     44c:	0c000000 	stceq	0, cr0, [r0], {-0}
     450:	00000262 	andeq	r0, r0, r2, ror #4
     454:	0c01c301 	stceq	3, cr12, [r1], {1}
     458:	04000003 	streq	r0, [r0], #-3
     45c:	0000b80c 	andeq	fp, r0, ip, lsl #16
     460:	01c40100 	biceq	r0, r4, r0, lsl #2
     464:	0000030c 	andeq	r0, r0, ip, lsl #6
     468:	01d80c08 	bicseq	r0, r8, r8, lsl #24
     46c:	c5010000 	strgt	r0, [r1, #-0]
     470:	00030c01 	andeq	r0, r3, r1, lsl #24
     474:	53130c00 	tstpl	r3, #0, 24
     478:	01005243 	tsteq	r0, r3, asr #4
     47c:	030c01c6 	movweq	r0, #49606	; 0xc1c6
     480:	13100000 	tstne	r0, #0
     484:	00524343 	subseq	r4, r2, r3, asr #6
     488:	0c01c701 	stceq	7, cr12, [r1], {1}
     48c:	14000003 	strne	r0, [r0], #-3
     490:	50485313 	subpl	r5, r8, r3, lsl r3
     494:	01c80100 	biceq	r0, r8, r0, lsl #2
     498:	00000564 	andeq	r0, r0, r4, ror #10
     49c:	05590c18 	ldrbeq	r0, [r9, #-3096]	; 0xfffff3e8
     4a0:	c9010000 	stmdbgt	r1, {}	; <UNPREDICTABLE>
     4a4:	00030c01 	andeq	r0, r3, r1, lsl #24
     4a8:	c40c2400 	strgt	r2, [ip], #-1024	; 0xfffffc00
     4ac:	0100000a 	tsteq	r0, sl
     4b0:	030c01ca 	movweq	r0, #49610	; 0xc1ca
     4b4:	0c280000 	stceq	0, cr0, [r8], #-0
     4b8:	00000484 	andeq	r0, r0, r4, lsl #9
     4bc:	0c01cb01 			; <UNDEFINED> instruction: 0x0c01cb01
     4c0:	2c000003 	stccs	0, cr0, [r0], {3}
     4c4:	0003c70c 	andeq	ip, r3, ip, lsl #14
     4c8:	01cc0100 	biceq	r0, ip, r0, lsl #2
     4cc:	0000030c 	andeq	r0, r0, ip, lsl #6
     4d0:	0b6e0c30 	bleq	1b83598 <startup-0x1e47ca68>
     4d4:	cd010000 	stcgt	0, cr0, [r1, #-0]
     4d8:	00030c01 	andeq	r0, r3, r1, lsl #24
     4dc:	730c3400 	movwvc	r3, #50176	; 0xc400
     4e0:	01000008 	tsteq	r0, r8
     4e4:	030c01ce 	movweq	r0, #49614	; 0xc1ce
     4e8:	0c380000 	ldceq	0, cr0, [r8], #-0
     4ec:	00000a92 	muleq	r0, r2, sl
     4f0:	0c01cf01 	stceq	15, cr12, [r1], {1}
     4f4:	3c000003 	stccc	0, cr0, [r0], {3}
     4f8:	52465013 	subpl	r5, r6, #19
     4fc:	01d00100 	bicseq	r0, r0, r0, lsl #2
     500:	0000057e 	andeq	r0, r0, lr, ror r5
     504:	46441340 	strbmi	r1, [r4], -r0, asr #6
     508:	d1010052 	qaddle	r0, r2, r1
     50c:	00031101 	andeq	r1, r3, r1, lsl #2
     510:	41134800 	tstmi	r3, r0, lsl #16
     514:	01005244 	tsteq	r0, r4, asr #4
     518:	031101d2 	tsteq	r1, #-2147483596	; 0x80000034
     51c:	0c4c0000 	mareq	acc0, r0, ip
     520:	00000b69 	andeq	r0, r0, r9, ror #22
     524:	9801d301 	stmdals	r1, {r0, r8, r9, ip, lr, pc}
     528:	50000005 	andpl	r0, r0, r5
     52c:	000b8d0c 	andeq	r8, fp, ip, lsl #26
     530:	01d40100 	bicseq	r0, r4, r0, lsl #2
     534:	000005b2 			; <UNDEFINED> instruction: 0x000005b2
     538:	02c50c60 	sbceq	r0, r5, #96, 24	; 0x6000
     53c:	d5010000 	strle	r0, [r1, #-0]
     540:	0005b701 	andeq	fp, r5, r1, lsl #14
     544:	c60c7400 	strgt	r7, [ip], -r0, lsl #8
     548:	0100000c 	tsteq	r0, ip
     54c:	030c01d6 	movweq	r0, #49622	; 0xc1d6
     550:	00880000 	addeq	r0, r8, r0
     554:	0002dc0f 	andeq	sp, r2, pc, lsl #24
     558:	00056400 	andeq	r6, r5, r0, lsl #8
     55c:	02ca1000 	sbceq	r1, sl, #0
     560:	000b0000 	andeq	r0, fp, r0
     564:	00055409 	andeq	r5, r5, r9, lsl #8
     568:	03110f00 	tsteq	r1, #0, 30
     56c:	05790000 	ldrbeq	r0, [r9, #-0]!
     570:	ca100000 	bgt	400578 <startup-0x1fbffa88>
     574:	01000002 	tsteq	r0, r2
     578:	05690a00 	strbeq	r0, [r9, #-2560]!	; 0xfffff600
     57c:	79090000 	stmdbvc	r9, {}	; <UNPREDICTABLE>
     580:	0f000005 	svceq	0x00000005
     584:	00000311 	andeq	r0, r0, r1, lsl r3
     588:	00000593 	muleq	r0, r3, r5
     58c:	0002ca10 	andeq	ip, r2, r0, lsl sl
     590:	0a000300 	beq	1198 <startup-0x1fffee68>
     594:	00000583 	andeq	r0, r0, r3, lsl #11
     598:	00059309 	andeq	r9, r5, r9, lsl #6
     59c:	03110f00 	tsteq	r1, #0, 30
     5a0:	05ad0000 	streq	r0, [sp, #0]!
     5a4:	ca100000 	bgt	4005ac <startup-0x1fbffa54>
     5a8:	04000002 	streq	r0, [r0], #-2
     5ac:	059d0a00 	ldreq	r0, [sp, #2560]	; 0xa00
     5b0:	ad090000 	stcge	0, cr0, [r9, #-0]
     5b4:	0f000005 	svceq	0x00000005
     5b8:	00000301 	andeq	r0, r0, r1, lsl #6
     5bc:	000005c7 	andeq	r0, r0, r7, asr #11
     5c0:	0002ca10 	andeq	ip, r2, r0, lsl sl
     5c4:	06000400 	streq	r0, [r0], -r0, lsl #8
     5c8:	000003ad 	andeq	r0, r0, sp, lsr #7
     5cc:	3901d701 	stmdbcc	r1, {r0, r8, r9, sl, ip, lr, pc}
     5d0:	0f000004 	svceq	0x00000004
     5d4:	00000301 	andeq	r0, r0, r1, lsl #6
     5d8:	000005e3 	andeq	r0, r0, r3, ror #11
     5dc:	0002ca10 	andeq	ip, r2, r0, lsl sl
     5e0:	14000700 	strne	r0, [r0], #-1792	; 0xfffff900
     5e4:	00000c17 	andeq	r0, r0, r7, lsl ip
     5e8:	fc06fa01 	stc2	10, cr15, [r6], {1}	; <UNPREDICTABLE>
     5ec:	15000002 	strne	r0, [r0, #-2]
     5f0:	00000669 	andeq	r0, r0, r9, ror #12
     5f4:	03013b06 	movweq	r3, #6918	; 0x1b06
     5f8:	07160000 	ldreq	r0, [r6, -r0]
     5fc:	00027101 	andeq	r7, r2, r1, lsl #2
     600:	035f0300 	cmpeq	pc, #0, 6
     604:	00000615 	andeq	r0, r0, r5, lsl r6
     608:	00091d04 	andeq	r1, r9, r4, lsl #26
     60c:	b6040000 	strlt	r0, [r4], -r0
     610:	0100000b 	tsteq	r0, fp
     614:	09a00600 	stmibeq	r0!, {r9, sl}
     618:	5f030000 	svcpl	0x00030000
     61c:	0005fa03 	andeq	pc, r5, r3, lsl #20
     620:	03101200 	tsteq	r0, #0, 4
     624:	065f0395 			; <UNDEFINED> instruction: 0x065f0395
     628:	54130000 	ldrpl	r0, [r3], #-0
     62c:	03005249 	movweq	r5, #585	; 0x249
     630:	030c0397 	movweq	r0, #50071	; 0xc397
     634:	0c000000 	stceq	0, cr0, [r0], {-0}
     638:	00000d4b 	andeq	r0, r0, fp, asr #26
     63c:	0c039803 	stceq	8, cr9, [r3], {3}
     640:	04000003 	streq	r0, [r0], #-3
     644:	000a460c 	andeq	r4, sl, ip, lsl #12
     648:	03990300 	orrseq	r0, r9, #0, 6
     64c:	0000030c 	andeq	r0, r0, ip, lsl #6
     650:	086e0c08 	stmdaeq	lr!, {r3, sl, fp}^
     654:	9a030000 	bls	c065c <startup-0x1ff3f9a4>
     658:	00030c03 	andeq	r0, r3, r3, lsl #24
     65c:	06000c00 	streq	r0, [r0], -r0, lsl #24
     660:	00000b2c 	andeq	r0, r0, ip, lsr #22
     664:	21039b03 	tstcs	r3, r3, lsl #22
     668:	12000006 	andne	r0, r0, #6
     66c:	03a10310 			; <UNDEFINED> instruction: 0x03a10310
     670:	000006a9 	andeq	r0, r0, r9, lsr #13
     674:	52495213 	subpl	r5, r9, #805306369	; 0x30000001
     678:	03a30300 			; <UNDEFINED> instruction: 0x03a30300
     67c:	0000030c 	andeq	r0, r0, ip, lsl #6
     680:	0d3d0c00 	ldceq	12, cr0, [sp, #-0]
     684:	a4030000 	strge	r0, [r3], #-0
     688:	00030c03 	andeq	r0, r3, r3, lsl #24
     68c:	0c0c0400 	cfstrseq	mvf0, [ip], {-0}
     690:	0300000a 	movweq	r0, #10
     694:	030c03a5 	movweq	r0, #50085	; 0xc3a5
     698:	0c080000 	stceq	0, cr0, [r8], {-0}
     69c:	00000869 	andeq	r0, r0, r9, ror #16
     6a0:	0c03a603 	stceq	6, cr10, [r3], {3}
     6a4:	0c000003 	stceq	0, cr0, [r0], {3}
     6a8:	0a110600 	beq	441eb0 <startup-0x1fbbe150>
     6ac:	a7030000 	strge	r0, [r3, -r0]
     6b0:	00066b03 	andeq	r6, r6, r3, lsl #22
     6b4:	03081200 	movweq	r1, #33280	; 0x8200
     6b8:	06d903ad 	ldrbeq	r0, [r9], sp, lsr #7
     6bc:	46130000 	ldrmi	r0, [r3], -r0
     6c0:	03003152 	movweq	r3, #338	; 0x152
     6c4:	030c03af 	movweq	r0, #50095	; 0xc3af
     6c8:	13000000 	movwne	r0, #0
     6cc:	00325246 	eorseq	r5, r2, r6, asr #4
     6d0:	0c03b003 	stceq	0, cr11, [r3], {3}
     6d4:	04000003 	streq	r0, [r0], #-3
     6d8:	028b0600 	addeq	r0, fp, #0, 12
     6dc:	b1030000 	mrslt	r0, (UNDEF: 3)
     6e0:	0006b503 	andeq	fp, r6, r3, lsl #10
     6e4:	03200b00 	nopeq	{0}	; <UNPREDICTABLE>
     6e8:	1b03b703 	blne	ee2fc <startup-0x1ff11d04>
     6ec:	13000008 	movwne	r0, #8
     6f0:	0052434d 	subseq	r4, r2, sp, asr #6
     6f4:	0c03b903 			; <UNDEFINED> instruction: 0x0c03b903
     6f8:	00000003 	andeq	r0, r0, r3
     6fc:	52534d13 	subspl	r4, r3, #1216	; 0x4c0
     700:	03ba0300 			; <UNDEFINED> instruction: 0x03ba0300
     704:	0000030c 	andeq	r0, r0, ip, lsl #6
     708:	53541304 	cmppl	r4, #4, 6	; 0x10000000
     70c:	bb030052 	bllt	c085c <startup-0x1ff3f7a4>
     710:	00030c03 	andeq	r0, r3, r3, lsl #24
     714:	670c0800 	strvs	r0, [ip, -r0, lsl #16]
     718:	03000002 	movweq	r0, #2
     71c:	030c03bc 	movweq	r0, #50108	; 0xc3bc
     720:	0c0c0000 	stceq	0, cr0, [ip], {-0}
     724:	0000030d 	andeq	r0, r0, sp, lsl #6
     728:	0c03bd03 	stceq	13, cr11, [r3], {3}
     72c:	10000003 	andne	r0, r0, r3
     730:	52454913 	subpl	r4, r5, #311296	; 0x4c000
     734:	03be0300 			; <UNDEFINED> instruction: 0x03be0300
     738:	0000030c 	andeq	r0, r0, ip, lsl #6
     73c:	53451314 	movtpl	r1, #21268	; 0x5314
     740:	bf030052 	svclt	0x00030052
     744:	00030c03 	andeq	r0, r3, r3, lsl #24
     748:	42131800 	andsmi	r1, r3, #0, 16
     74c:	03005254 	movweq	r5, #596	; 0x254
     750:	030c03c0 	movweq	r0, #50112	; 0xc3c0
     754:	0c1c0000 	ldceq	0, cr0, [ip], {-0}
     758:	000002c5 	andeq	r0, r0, r5, asr #5
     75c:	1b03c103 	blne	f0b70 <startup-0x1ff0f490>
     760:	20000008 	andcs	r0, r0, r8
     764:	000cfb0d 	andeq	pc, ip, sp, lsl #22
     768:	03c20300 	biceq	r0, r2, #0, 6
     76c:	0000082b 	andeq	r0, r0, fp, lsr #16
     770:	a60d0180 	strge	r0, [sp], -r0, lsl #3
     774:	03000002 	movweq	r0, #2
     778:	083b03c3 	ldmdaeq	fp!, {r0, r1, r6, r7, r8, r9}
     77c:	01b00000 	movseq	r0, r0
     780:	0002cf0d 	andeq	ip, r2, sp, lsl #30
     784:	03c40300 	biceq	r0, r4, #0, 6
     788:	0000084b 	andeq	r0, r0, fp, asr #16
     78c:	460e01d0 			; <UNDEFINED> instruction: 0x460e01d0
     790:	0300524d 	movweq	r5, #589	; 0x24d
     794:	030c03c5 	movweq	r0, #50117	; 0xc3c5
     798:	02000000 	andeq	r0, r0, #0
     79c:	0008640d 	andeq	r6, r8, sp, lsl #8
     7a0:	03c60300 	biceq	r0, r6, #0, 6
     7a4:	0000030c 	andeq	r0, r0, ip, lsl #6
     7a8:	6f0d0204 	svcvs	0x000d0204
     7ac:	03000003 	movweq	r0, #3
     7b0:	030103c7 	movweq	r0, #5063	; 0x13c7
     7b4:	02080000 	andeq	r0, r8, #0
     7b8:	000b1a0d 	andeq	r1, fp, sp, lsl #20
     7bc:	03c80300 	biceq	r0, r8, #0, 6
     7c0:	0000030c 	andeq	r0, r0, ip, lsl #6
     7c4:	790d020c 	stmdbvc	sp, {r2, r3, r9}
     7c8:	03000003 	movweq	r0, #3
     7cc:	030103c9 	movweq	r0, #5065	; 0x13c9
     7d0:	02100000 	andseq	r0, r0, #0
     7d4:	000b870d 	andeq	r8, fp, sp, lsl #14
     7d8:	03ca0300 	biceq	r0, sl, #0, 6
     7dc:	0000030c 	andeq	r0, r0, ip, lsl #6
     7e0:	f90d0214 			; <UNDEFINED> instruction: 0xf90d0214
     7e4:	03000002 	movweq	r0, #2
     7e8:	030103cb 	movweq	r0, #5067	; 0x13cb
     7ec:	02180000 	andseq	r0, r8, #0
     7f0:	000b880d 	andeq	r8, fp, sp, lsl #16
     7f4:	03cc0300 	biceq	r0, ip, #0, 6
     7f8:	0000030c 	andeq	r0, r0, ip, lsl #6
     7fc:	030d021c 	movweq	r0, #53788	; 0xd21c
     800:	03000003 	movweq	r0, #3
     804:	05d303cd 	ldrbeq	r0, [r3, #973]	; 0x3cd
     808:	02200000 	eoreq	r0, r0, #0
     80c:	0008e20d 	andeq	lr, r8, sp, lsl #4
     810:	03ce0300 	biceq	r0, lr, #0, 6
     814:	0000085b 	andeq	r0, r0, fp, asr r8
     818:	0f000240 	svceq	0x00000240
     81c:	00000301 	andeq	r0, r0, r1, lsl #6
     820:	0000082b 	andeq	r0, r0, fp, lsr #16
     824:	0002ca10 	andeq	ip, r2, r0, lsl sl
     828:	0f005700 	svceq	0x00005700
     82c:	0000065f 	andeq	r0, r0, pc, asr r6
     830:	0000083b 	andeq	r0, r0, fp, lsr r8
     834:	0002ca10 	andeq	ip, r2, r0, lsl sl
     838:	0f000200 	svceq	0x00000200
     83c:	000006a9 	andeq	r0, r0, r9, lsr #13
     840:	0000084b 	andeq	r0, r0, fp, asr #16
     844:	0002ca10 	andeq	ip, r2, r0, lsl sl
     848:	0f000100 	svceq	0x00000100
     84c:	00000301 	andeq	r0, r0, r1, lsl #6
     850:	0000085b 	andeq	r0, r0, fp, asr r8
     854:	0002ca10 	andeq	ip, r2, r0, lsl sl
     858:	0f000b00 	svceq	0x00000b00
     85c:	000006d9 	ldrdeq	r0, [r0], -r9
     860:	0000086b 	andeq	r0, r0, fp, ror #16
     864:	0002ca10 	andeq	ip, r2, r0, lsl sl
     868:	06001b00 	streq	r1, [r0], -r0, lsl #22
     86c:	000008c5 	andeq	r0, r0, r5, asr #17
     870:	e503cf03 	str	ip, [r3, #-3843]	; 0xfffff0fd
     874:	12000006 	andne	r0, r0, #6
     878:	05c30328 	strbeq	r0, [r3, #808]	; 0x328
     87c:	00000903 	andeq	r0, r0, r3, lsl #18
     880:	000c4c0c 	andeq	r4, ip, ip, lsl #24
     884:	05c50300 	strbeq	r0, [r5, #768]	; 0x300
     888:	0000030c 	andeq	r0, r0, ip, lsl #6
     88c:	0a970c00 	beq	fe5c3894 <GPIO_Ports+0xde5bf8ec>
     890:	c6030000 	strgt	r0, [r3], -r0
     894:	00030c05 	andeq	r0, r3, r5, lsl #24
     898:	1a0c0400 	bne	3018a0 <startup-0x1fcfe760>
     89c:	03000007 	movweq	r0, #7
     8a0:	030c05c7 	movweq	r0, #50631	; 0xc5c7
     8a4:	0c080000 	stceq	0, cr0, [r8], {-0}
     8a8:	000007a8 	andeq	r0, r0, r8, lsr #15
     8ac:	0c05c803 	stceq	8, cr12, [r5], {3}
     8b0:	0c000003 	stceq	0, cr0, [r0], {3}
     8b4:	52444913 	subpl	r4, r4, #311296	; 0x4c000
     8b8:	05c90300 	strbeq	r0, [r9, #768]	; 0x300
     8bc:	0000030c 	andeq	r0, r0, ip, lsl #6
     8c0:	444f1310 	strbmi	r1, [pc], #-784	; 8c8 <startup-0x1ffff738>
     8c4:	ca030052 	bgt	c0a14 <startup-0x1ff3f5ec>
     8c8:	00030c05 	andeq	r0, r3, r5, lsl #24
     8cc:	ea0c1400 	b	3058d4 <startup-0x1fcfa72c>
     8d0:	03000007 	movweq	r0, #7
     8d4:	02ec05cb 	rsceq	r0, ip, #851443712	; 0x32c00000
     8d8:	0c180000 	ldceq	0, cr0, [r8], {-0}
     8dc:	000007e4 	andeq	r0, r0, r4, ror #15
     8e0:	ec05cc03 	stc	12, cr12, [r5], {3}
     8e4:	1a000002 	bne	8f4 <startup-0x1ffff70c>
     8e8:	0006fa0c 	andeq	pc, r6, ip, lsl #20
     8ec:	05cd0300 	strbeq	r0, [sp, #768]	; 0x300
     8f0:	0000030c 	andeq	r0, r0, ip, lsl #6
     8f4:	4641131c 			; <UNDEFINED> instruction: 0x4641131c
     8f8:	ce030052 	mcrgt	0, 0, r0, cr3, cr2, {2}
     8fc:	00091305 	andeq	r1, r9, r5, lsl #6
     900:	0f002000 	svceq	0x00002000
     904:	0000030c 	andeq	r0, r0, ip, lsl #6
     908:	00000913 	andeq	r0, r0, r3, lsl r9
     90c:	0002ca10 	andeq	ip, r2, r0, lsl sl
     910:	09000100 	stmdbeq	r0, {r8}
     914:	00000903 	andeq	r0, r0, r3, lsl #18
     918:	000bf706 	andeq	pc, fp, r6, lsl #14
     91c:	05cf0300 	strbeq	r0, [pc, #768]	; c24 <startup-0x1ffff3dc>
     920:	00000877 	andeq	r0, r0, r7, ror r8
     924:	3d070c17 	stccc	12, cr0, [r7, #-92]	; 0xffffffa4
     928:	000009b1 			; <UNDEFINED> instruction: 0x000009b1
     92c:	00070c18 	andeq	r0, r7, r8, lsl ip
     930:	e13f0700 	teq	pc, r0, lsl #14
     934:	00000002 	andeq	r0, r0, r2
     938:	00010318 	andeq	r0, r1, r8, lsl r3
     93c:	d1420700 	cmple	r2, r0, lsl #14
     940:	02000002 	andeq	r0, r0, #2
     944:	0005a118 	andeq	sl, r5, r8, lsl r1
     948:	d1450700 	cmple	r5, r0, lsl #14
     94c:	03000002 	movweq	r0, #2
     950:	000bbd18 	andeq	fp, fp, r8, lsl sp
     954:	d14a0700 	cmple	sl, r0, lsl #14
     958:	04000002 	streq	r0, [r0], #-2
     95c:	000bc518 	andeq	ip, fp, r8, lsl r5
     960:	d14e0700 	cmple	lr, r0, lsl #14
     964:	05000002 	streq	r0, [r0, #-2]
     968:	0000fa18 	andeq	pc, r0, r8, lsl sl	; <UNPREDICTABLE>
     96c:	15510700 	ldrbne	r0, [r1, #-1792]	; 0xfffff900
     970:	06000006 	streq	r0, [r0], -r6
     974:	00034b18 	andeq	r4, r3, r8, lsl fp
     978:	15540700 	ldrbne	r0, [r4, #-1792]	; 0xfffff900
     97c:	07000006 	streq	r0, [r0, -r6]
     980:	00098d18 	andeq	r8, r9, r8, lsl sp
     984:	15570700 	ldrbne	r0, [r7, #-1792]	; 0xfffff900
     988:	08000006 	stmdaeq	r0, {r1, r2}
     98c:	000a0318 	andeq	r0, sl, r8, lsl r3
     990:	155a0700 	ldrbne	r0, [sl, #-1792]	; 0xfffff900
     994:	09000006 	stmdbeq	r0, {r1, r2}
     998:	00081918 	andeq	r1, r8, r8, lsl r9
     99c:	155d0700 	ldrbne	r0, [sp, #-1792]	; 0xfffff900
     9a0:	0a000006 	beq	9c0 <startup-0x1ffff640>
     9a4:	000d4218 	andeq	r4, sp, r8, lsl r2
     9a8:	15600700 	strbne	r0, [r0, #-1792]!	; 0xfffff900
     9ac:	0b000006 	bleq	9cc <startup-0x1ffff634>
     9b0:	00650700 	rsbeq	r0, r5, r0, lsl #14
     9b4:	62070000 	andvs	r0, r7, #0
     9b8:	00000924 	andeq	r0, r0, r4, lsr #18
     9bc:	67070e17 	smladvs	r7, r7, lr, r0
     9c0:	00000a31 	andeq	r0, r0, r1, lsr sl
     9c4:	000a6218 	andeq	r6, sl, r8, lsl r2
     9c8:	e1690700 	cmn	r9, r0, lsl #14
     9cc:	00000002 	andeq	r0, r0, r2
     9d0:	00007518 	andeq	r7, r0, r8, lsl r5
     9d4:	e16d0700 	cmn	sp, r0, lsl #14
     9d8:	02000002 	andeq	r0, r0, #2
     9dc:	00087818 	andeq	r7, r8, r8, lsl r8
     9e0:	e1710700 	cmn	r1, r0, lsl #14
     9e4:	04000002 	streq	r0, [r0], #-2
     9e8:	000b5518 	andeq	r5, fp, r8, lsl r5
     9ec:	e1760700 	cmn	r6, r0, lsl #14
     9f0:	06000002 	streq	r0, [r0], -r2
     9f4:	00033218 	andeq	r3, r3, r8, lsl r2
     9f8:	e17b0700 	cmn	fp, r0, lsl #14
     9fc:	08000002 	stmdaeq	r0, {r1}
     a00:	0008d118 	andeq	sp, r8, r8, lsl r1
     a04:	d17e0700 	cmnle	lr, r0, lsl #14
     a08:	0a000002 	beq	a18 <startup-0x1ffff5e8>
     a0c:	000bcd18 	andeq	ip, fp, r8, lsl sp
     a10:	d1800700 	orrle	r0, r0, r0, lsl #14
     a14:	0b000002 	bleq	a24 <startup-0x1ffff5dc>
     a18:	00016e18 	andeq	r6, r1, r8, lsl lr
     a1c:	d1830700 	orrle	r0, r3, r0, lsl #14
     a20:	0c000002 	stceq	0, cr0, [r0], {2}
     a24:	00046f18 	andeq	r6, r4, r8, lsl pc
     a28:	15860700 	strne	r0, [r6, #1792]	; 0x700
     a2c:	0d000006 	stceq	0, cr0, [r0, #-24]	; 0xffffffe8
     a30:	0d270700 	stceq	7, cr0, [r7, #-0]
     a34:	88070000 	stmdahi	r7, {}	; <UNPREDICTABLE>
     a38:	000009bc 			; <UNDEFINED> instruction: 0x000009bc
     a3c:	8d071417 	cfstrshi	mvf1, [r7, #-92]	; 0xffffffa4
     a40:	00000a8d 	andeq	r0, r0, sp, lsl #21
     a44:	00036918 	andeq	r6, r3, r8, lsl r9
     a48:	018f0700 	orreq	r0, pc, r0, lsl #14
     a4c:	00000003 	andeq	r0, r0, r3
     a50:	00049018 	andeq	r9, r4, r8, lsl r0
     a54:	01920700 	orrseq	r0, r2, r0, lsl #14
     a58:	04000003 	streq	r0, [r0], #-3
     a5c:	45444919 	strbmi	r4, [r4, #-2329]	; 0xfffff6e7
     a60:	d1950700 	orrsle	r0, r5, r0, lsl #14
     a64:	08000002 	stmdaeq	r0, {r1}
     a68:	52545219 	subspl	r5, r4, #-1879048191	; 0x90000001
     a6c:	d1990700 	orrsle	r0, r9, r0, lsl #14
     a70:	09000002 	stmdbeq	r0, {r1}
     a74:	434c4419 	movtmi	r4, #50201	; 0xc419
     a78:	d19d0700 	orrsle	r0, sp, r0, lsl #14
     a7c:	0a000002 	beq	a8c <startup-0x1ffff574>
     a80:	0011a818 	andseq	sl, r1, r8, lsl r8
     a84:	8da10700 	stchi	7, cr0, [r1]
     a88:	0b00000a 	bleq	ab8 <startup-0x1ffff548>
     a8c:	02d10f00 	sbcseq	r0, r1, #0, 30
     a90:	0a9d0000 	beq	fe740a98 <GPIO_Ports+0xde73caf0>
     a94:	ca100000 	bgt	400a9c <startup-0x1fbff564>
     a98:	07000002 	streq	r0, [r0, -r2]
     a9c:	05500700 	ldrbeq	r0, [r0, #-1792]	; 0xfffff900
     aa0:	a3070000 	movwge	r0, #28672	; 0x7000
     aa4:	00000a3c 	andeq	r0, r0, ip, lsr sl
     aa8:	a8071417 	stmdage	r7, {r0, r1, r2, r4, sl, ip}
     aac:	00000b05 	andeq	r0, r0, r5, lsl #22
     ab0:	00036918 	andeq	r6, r3, r8, lsl r9
     ab4:	01aa0700 			; <UNDEFINED> instruction: 0x01aa0700
     ab8:	00000003 	andeq	r0, r0, r3
     abc:	00049018 	andeq	r9, r4, r8, lsl r0
     ac0:	01ad0700 			; <UNDEFINED> instruction: 0x01ad0700
     ac4:	04000003 	streq	r0, [r0], #-3
     ac8:	45444919 	strbmi	r4, [r4, #-2329]	; 0xfffff6e7
     acc:	d1b00700 	lslsle	r0, r0, #14
     ad0:	08000002 	stmdaeq	r0, {r1}
     ad4:	52545219 	subspl	r5, r4, #-1879048191	; 0x90000001
     ad8:	d1b40700 			; <UNDEFINED> instruction: 0xd1b40700
     adc:	09000002 	stmdbeq	r0, {r1}
     ae0:	434c4419 	movtmi	r4, #50201	; 0xc419
     ae4:	d1b80700 			; <UNDEFINED> instruction: 0xd1b80700
     ae8:	0a000002 	beq	af8 <startup-0x1ffff508>
     aec:	0011a818 	andseq	sl, r1, r8, lsl r8
     af0:	8dbb0700 	ldchi	7, cr0, [fp]
     af4:	0b00000a 	bleq	b24 <startup-0x1ffff4dc>
     af8:	494d4619 	stmdbmi	sp, {r0, r3, r4, r9, sl, lr}^
     afc:	d1be0700 			; <UNDEFINED> instruction: 0xd1be0700
     b00:	13000002 	movwne	r0, #2
     b04:	09250700 	stmdbeq	r5!, {r8, r9, sl}
     b08:	c1070000 	mrsgt	r0, (UNDEF: 7)
     b0c:	00000aa8 	andeq	r0, r0, r8, lsr #21
     b10:	13080417 	movwne	r0, #33815	; 0x8417
     b14:	00000b72 	andeq	r0, r0, r2, ror fp
     b18:	00088d1a 	andeq	r8, r8, sl, lsl sp
     b1c:	01150800 	tsteq	r5, r0, lsl #16
     b20:	04000003 	streq	r0, [r0], #-3
     b24:	1a001808 	bne	6b4c <startup-0x1fff94b4>
     b28:	00000137 	andeq	r0, r0, r7, lsr r1
     b2c:	03011908 	movweq	r1, #6408	; 0x1908
     b30:	0a040000 	beq	100b38 <startup-0x1feff4c8>
     b34:	491b000e 	ldmdbmi	fp, {r1, r2, r3}
     b38:	1d080044 	stcne	0, cr0, [r8, #-272]	; 0xfffffef0
     b3c:	00000301 	andeq	r0, r0, r1, lsl #6
     b40:	00070704 	andeq	r0, r7, r4, lsl #14
     b44:	0001281a 	andeq	r2, r1, sl, lsl r8
     b48:	01210800 			; <UNDEFINED> instruction: 0x01210800
     b4c:	04000003 	streq	r0, [r0], #-3
     b50:	1a000601 	bne	235c <startup-0x1fffdca4>
     b54:	000007ae 	andeq	r0, r0, lr, lsr #15
     b58:	03012408 	movweq	r2, #5128	; 0x1408
     b5c:	03040000 	movweq	r0, #16384	; 0x4000
     b60:	8d1a0003 	ldchi	0, cr0, [sl, #-12]
     b64:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
     b68:	00030127 	andeq	r0, r3, r7, lsr #2
     b6c:	00030400 	andeq	r0, r3, r0, lsl #8
     b70:	89070000 	stmdbhi	r7, {}	; <UNPREDICTABLE>
     b74:	08000004 	stmdaeq	r0, {r2}
     b78:	000b1028 	andeq	r1, fp, r8, lsr #32
     b7c:	08041700 	stmdaeq	r4, {r8, r9, sl, ip}
     b80:	000bc12d 	andeq	ip, fp, sp, lsr #2
     b84:	04561a00 	ldrbeq	r1, [r6], #-2560	; 0xfffff600
     b88:	2f080000 	svccs	0x00080000
     b8c:	00000301 	andeq	r0, r0, r1, lsl #6
     b90:	001f0104 	andseq	r0, pc, r4, lsl #2
     b94:	5254521b 	subspl	r5, r4, #-1342177279	; 0xb0000001
     b98:	01320800 	teqeq	r2, r0, lsl #16
     b9c:	04000003 	streq	r0, [r0], #-3
     ba0:	1b001e01 	blne	83ac <startup-0x1fff7c54>
     ba4:	00454449 	subeq	r4, r5, r9, asr #8
     ba8:	03013508 	movweq	r3, #5384	; 0x1508
     bac:	01040000 	mrseq	r0, (UNDEF: 4)
     bb0:	491b001d 	ldmdbmi	fp, {r0, r2, r3, r4}
     bb4:	37080044 	strcc	r0, [r8, -r4, asr #32]
     bb8:	00000301 	andeq	r0, r0, r1, lsl #6
     bbc:	00001d04 	andeq	r1, r0, r4, lsl #26
     bc0:	0c240700 	stceq	7, cr0, [r4], #-0
     bc4:	38080000 	stmdacc	r8, {}	; <UNPREDICTABLE>
     bc8:	00000b7d 	andeq	r0, r0, sp, ror fp
     bcc:	36090417 			; <UNDEFINED> instruction: 0x36090417
     bd0:	00000c05 	andeq	r0, r0, r5, lsl #24
     bd4:	0008f218 	andeq	pc, r8, r8, lsl r2	; <UNPREDICTABLE>
     bd8:	d1380900 	teqle	r8, r0, lsl #18
     bdc:	00000002 	andeq	r0, r0, r2
     be0:	0003e518 	andeq	lr, r3, r8, lsl r5
     be4:	d13d0900 	teqle	sp, r0, lsl #18
     be8:	01000002 	tsteq	r0, r2
     bec:	00090218 	andeq	r0, r9, r8, lsl r2
     bf0:	d1420900 	cmple	r2, r0, lsl #18
     bf4:	02000002 	andeq	r0, r0, #2
     bf8:	0001c518 	andeq	ip, r1, r8, lsl r5
     bfc:	15470900 	strbne	r0, [r7, #-2304]	; 0xfffff700
     c00:	03000006 	movweq	r0, #6
     c04:	0c8b0700 	stceq	7, cr0, [fp], {0}
     c08:	4a090000 	bmi	240c10 <startup-0x1fdbf3f0>
     c0c:	00000bcc 	andeq	r0, r0, ip, asr #23
     c10:	7101071c 	tstvc	r1, ip, lsl r7
     c14:	0a000002 	beq	c24 <startup-0x1ffff3dc>
     c18:	000c3642 	andeq	r3, ip, r2, asr #12
     c1c:	06db0400 	ldrbeq	r0, [fp], r0, lsl #8
     c20:	04000000 	streq	r0, [r0], #-0
     c24:	00000581 	andeq	r0, r0, r1, lsl #11
     c28:	02020401 	andeq	r0, r2, #16777216	; 0x1000000
     c2c:	04020000 	streq	r0, [r2], #-0
     c30:	00000227 	andeq	r0, r0, r7, lsr #4
     c34:	78070003 	stmdavc	r7, {r0, r1}
     c38:	0a00000a 	beq	c68 <startup-0x1ffff398>
     c3c:	000c1047 	andeq	r1, ip, r7, asr #32
     c40:	01071c00 	tsteq	r7, r0, lsl #24
     c44:	00000271 	andeq	r0, r0, r1, ror r2
     c48:	0c5b4f0a 	mrrceq	15, 0, r4, fp, cr10
     c4c:	17040000 	strne	r0, [r4, -r0]
     c50:	00000003 	andeq	r0, r0, r3
     c54:	00026c04 	andeq	r6, r2, r4, lsl #24
     c58:	07000100 	streq	r0, [r0, -r0, lsl #2]
     c5c:	0000010c 	andeq	r0, r0, ip, lsl #2
     c60:	0c41520a 	sfmeq	f5, 2, [r1], {10}
     c64:	071c0000 	ldreq	r0, [ip, -r0]
     c68:	00027101 	andeq	r7, r2, r1, lsl #2
     c6c:	8c5a0a00 	mrrchi	10, 0, r0, sl, cr0
     c70:	0400000c 	streq	r0, [r0], #-12
     c74:	00000447 	andeq	r0, r0, r7, asr #8
     c78:	07640400 	strbeq	r0, [r4, -r0, lsl #8]!
     c7c:	04010000 	streq	r0, [r1], #-0
     c80:	00000d6f 	andeq	r0, r0, pc, ror #26
     c84:	07f00402 	ldrbeq	r0, [r0, r2, lsl #8]!
     c88:	00030000 	andeq	r0, r3, r0
     c8c:	000aed07 	andeq	lr, sl, r7, lsl #26
     c90:	665f0a00 	ldrbvs	r0, [pc], -r0, lsl #20
     c94:	1c00000c 	stcne	0, cr0, [r0], {12}
     c98:	02710107 	rsbseq	r0, r1, #-1073741823	; 0xc0000001
     c9c:	6e0a0000 	cdpvs	0, 0, cr0, cr10, cr0, {0}
     ca0:	00000cb7 			; <UNDEFINED> instruction: 0x00000cb7
     ca4:	0000a704 	andeq	sl, r0, r4, lsl #14
     ca8:	71040000 	mrsvc	r0, (UNDEF: 4)
     cac:	0100000c 	tsteq	r0, ip
     cb0:	0001a604 	andeq	sl, r1, r4, lsl #12
     cb4:	07000200 	streq	r0, [r0, -r0, lsl #4]
     cb8:	000003b6 			; <UNDEFINED> instruction: 0x000003b6
     cbc:	0c97720a 	lfmeq	f7, 4, [r7], {10}
     cc0:	08170000 	ldmdaeq	r7, {}	; <UNPREDICTABLE>
     cc4:	0d07840a 	cfstrseq	mvf8, [r7, #-40]	; 0xffffffd8
     cc8:	11180000 	tstne	r8, r0
     ccc:	0a00000b 	beq	d00 <startup-0x1ffff300>
     cd0:	00030186 	andeq	r0, r3, r6, lsl #3
     cd4:	3c180000 	ldccc	0, cr0, [r8], {-0}
     cd8:	0a00000a 	beq	d08 <startup-0x1ffff2f8>
     cdc:	000c3689 	andeq	r3, ip, r9, lsl #13
     ce0:	4c180400 	cfldrsmi	mvf0, [r8], {-0}
     ce4:	0a000008 	beq	d0c <startup-0x1ffff2f4>
     ce8:	000c8c8c 	andeq	r8, ip, ip, lsl #25
     cec:	4e180500 	cfmul32mi	mvfx0, mvfx8, mvfx0
     cf0:	0a000007 	beq	d14 <startup-0x1ffff2ec>
     cf4:	000c5b8f 	andeq	r5, ip, pc, lsl #23
     cf8:	42180600 	andsmi	r0, r8, #0, 12
     cfc:	0a00000b 	beq	d30 <startup-0x1ffff2d0>
     d00:	000cb792 	muleq	ip, r2, r7
     d04:	07000700 	streq	r0, [r0, -r0, lsl #14]
     d08:	0000027a 	andeq	r0, r0, sl, ror r2
     d0c:	0cc2940a 	cfstrdeq	mvd9, [r2], {10}
     d10:	041d0000 	ldreq	r0, [sp], #-0
     d14:	0d310f02 	ldceq	15, cr0, [r1, #-8]!
     d18:	851e0000 	ldrhi	r0, [lr, #-0]
     d1c:	02000000 	andeq	r0, r0, #0
     d20:	000d3110 	andeq	r3, sp, r0, lsl r1
     d24:	0bf01e00 	bleq	ffc0852c <GPIO_Ports+0xdfc04584>
     d28:	11020000 	mrsne	r0, (UNDEF: 2)
     d2c:	00000bc1 	andeq	r0, r0, r1, asr #23
     d30:	02e10f00 	rsceq	r0, r1, #0, 30
     d34:	0d410000 	stcleq	0, cr0, [r1, #-0]
     d38:	ca100000 	bgt	400d40 <startup-0x1fbff2c0>
     d3c:	01000002 	tsteq	r0, r2
     d40:	094a0700 	stmdbeq	sl, {r8, r9, sl}^
     d44:	12020000 	andne	r0, r2, #0
     d48:	00000d12 	andeq	r0, r0, r2, lsl sp
     d4c:	14021017 	strne	r1, [r2], #-23	; 0xffffffe9
     d50:	00000d85 	andeq	r0, r0, r5, lsl #27
     d54:	0001bd18 	andeq	fp, r1, r8, lsl sp
     d58:	96150200 	ldrls	r0, [r5], -r0, lsl #4
     d5c:	0000000d 	andeq	r0, r0, sp
     d60:	000bf018 	andeq	pc, fp, r8, lsl r0	; <UNPREDICTABLE>
     d64:	c1160200 	tstgt	r6, r0, lsl #4
     d68:	0400000b 	streq	r0, [r0], #-11
     d6c:	00080018 	andeq	r0, r8, r8, lsl r0
     d70:	c1170200 	tstgt	r7, r0, lsl #4
     d74:	0800000b 	stmdaeq	r0, {r0, r1, r3}
     d78:	0000f418 	andeq	pc, r0, r8, lsl r4	; <UNPREDICTABLE>
     d7c:	15180200 	ldrne	r0, [r8, #-512]	; 0xfffffe00
     d80:	0c000006 	stceq	0, cr0, [r0], {6}
     d84:	0d901f00 	ldceq	15, cr1, [r0]
     d88:	90200000 	eorls	r0, r0, r0
     d8c:	0000000d 	andeq	r0, r0, sp
     d90:	0b050421 	bleq	141e1c <startup-0x1febe1e4>
     d94:	04210000 	strteq	r0, [r1], #-0
     d98:	00000d85 	andeq	r0, r0, r5, lsl #27
     d9c:	000a9e07 	andeq	r9, sl, r7, lsl #28
     da0:	4c190200 	lfmmi	f0, 4, [r9], {-0}
     da4:	0f00000d 	svceq	0x0000000d
     da8:	00000d9c 	muleq	r0, ip, sp
     dac:	00000db7 			; <UNDEFINED> instruction: 0x00000db7
     db0:	0002ca10 	andeq	ip, r2, r0, lsl sl
     db4:	22000d00 	andcs	r0, r0, #0, 26
     db8:	000007cc 	andeq	r0, r0, ip, asr #15
     dbc:	0da71e02 	stceq	14, cr1, [r7, #8]!
     dc0:	03050000 	movweq	r0, #20480	; 0x5000
     dc4:	20003e90 	mulcs	r0, r0, lr
     dc8:	00039d22 	andeq	r9, r3, r2, lsr #26
     dcc:	d1230200 			; <UNDEFINED> instruction: 0xd1230200
     dd0:	05000002 	streq	r0, [r0, #-2]
     dd4:	003f7003 	eorseq	r7, pc, r3
     dd8:	00472220 	subeq	r2, r7, r0, lsr #4
     ddc:	24020000 	strcs	r0, [r2], #-0
     de0:	00000301 	andeq	r0, r0, r1, lsl #6
     de4:	3e8c0305 	cdpcc	3, 8, cr0, cr12, cr5, {0}
     de8:	51232000 			; <UNDEFINED> instruction: 0x51232000
     dec:	02000000 	andeq	r0, r0, #0
     df0:	0002d1ec 	andeq	sp, r2, ip, ror #3
     df4:	0005dc00 	andeq	sp, r5, r0, lsl #24
     df8:	0001bc20 	andeq	fp, r1, r0, lsr #24
     dfc:	3d9c0100 	ldfccs	f0, [ip]
     e00:	2400000e 	strcs	r0, [r0], #-14
     e04:	0000058f 	andeq	r0, r0, pc, lsl #11
     e08:	09b1ed02 	ldmibeq	r1!, {r1, r8, sl, fp, sp, lr, pc}
     e0c:	91020000 	mrsls	r0, (UNDEF: 2)
     e10:	01412458 	cmpeq	r1, r8, asr r4
     e14:	ee020000 	cdp	0, 0, cr0, cr2, cr0, {0}
     e18:	00000c05 	andeq	r0, r0, r5, lsl #24
     e1c:	24549102 	ldrbcs	r9, [r4], #-258	; 0xfffffefe
     e20:	00000a29 	andeq	r0, r0, r9, lsr #20
     e24:	0d07ef02 	stceq	15, cr14, [r7, #-8]
     e28:	91020000 	mrsls	r0, (UNDEF: 2)
     e2c:	0571254c 	ldrbeq	r2, [r1, #-1356]!	; 0xfffffab4
     e30:	37020000 	strcc	r0, [r2, -r0]
     e34:	0002d101 	andeq	sp, r2, r1, lsl #2
     e38:	67910200 	ldrvs	r0, [r1, r0, lsl #4]
     e3c:	01de2600 	bicseq	r2, lr, r0, lsl #12
     e40:	db020000 	blle	80e48 <startup-0x1ff7f1b8>
     e44:	20000544 	andcs	r0, r0, r4, asr #10
     e48:	00000098 	muleq	r0, r8, r0
     e4c:	0e839c01 	cdpeq	12, 8, cr9, cr3, cr1, {0}
     e50:	50270000 	eorpl	r0, r7, r0
     e54:	76200005 	strtvc	r0, [r0], -r5
     e58:	24000000 	strcs	r0, [r0], #-0
     e5c:	00000bb0 			; <UNDEFINED> instruction: 0x00000bb0
     e60:	02d1de02 	sbcseq	sp, r1, #2, 28
     e64:	91020000 	mrsls	r0, (UNDEF: 2)
     e68:	056a2777 	strbeq	r2, [sl, #-1911]!	; 0xfffff889
     e6c:	004a2000 	subeq	r2, sl, r0
     e70:	62240000 	eorvs	r0, r4, #0
     e74:	02000003 	andeq	r0, r0, #3
     e78:	000b72e2 	andeq	r7, fp, r2, ror #5
     e7c:	70910200 	addsvc	r0, r1, r0, lsl #4
     e80:	26000000 	strcs	r0, [r0], -r0
     e84:	00000d50 	andeq	r0, r0, r0, asr sp
     e88:	0410bd02 	ldreq	fp, [r0], #-3330	; 0xfffff2fe
     e8c:	01342000 	teqeq	r4, r0
     e90:	9c010000 	stcls	0, cr0, [r1], {-0}
     e94:	00000ed6 	ldrdeq	r0, [r0], -r6
     e98:	00444928 	subeq	r4, r4, r8, lsr #18
     e9c:	02e1bd02 	rsceq	fp, r1, #2, 26	; 0x80
     ea0:	91020000 	mrsls	r0, (UNDEF: 2)
     ea4:	042a2766 	strteq	r2, [sl], #-1894	; 0xfffff89a
     ea8:	00fc2000 	rscseq	r2, ip, r0
     eac:	b0240000 	eorlt	r0, r4, r0
     eb0:	0200000b 	andeq	r0, r0, #11
     eb4:	0002d1c1 	andeq	sp, r2, r1, asr #3
     eb8:	6f910200 	svcvs	0x00910200
     ebc:	00044827 	andeq	r4, r4, r7, lsr #16
     ec0:	0000c820 	andeq	ip, r0, r0, lsr #16
     ec4:	03622400 	cmneq	r2, #0, 8
     ec8:	c5020000 	strgt	r0, [r2, #-0]
     ecc:	00000b72 	andeq	r0, r0, r2, ror fp
     ed0:	00689102 	rsbeq	r9, r8, r2, lsl #2
     ed4:	b5260000 	strlt	r0, [r6, #-0]!
     ed8:	02000001 	andeq	r0, r0, #1
     edc:	0003a4a8 	andeq	sl, r3, r8, lsr #9
     ee0:	00006c20 	andeq	r6, r0, r0, lsr #24
     ee4:	049c0100 	ldreq	r0, [ip], #256	; 0x100
     ee8:	2700000f 	strcs	r0, [r0, -pc]
     eec:	200003c6 	andcs	r0, r0, r6, asr #7
     ef0:	00000038 	andeq	r0, r0, r8, lsr r0
     ef4:	00024324 	andeq	r4, r2, r4, lsr #6
     ef8:	05ae0200 	streq	r0, [lr, #512]!	; 0x200
     efc:	0200000b 	andeq	r0, r0, #11
     f00:	00006491 	muleq	r0, r1, r4
     f04:	00023429 	andeq	r3, r2, r9, lsr #8
     f08:	d18a0200 	orrle	r0, sl, r0, lsl #4
     f0c:	fa000002 	blx	f1c <startup-0x1ffff0e4>
     f10:	aa200002 	bge	800f20 <startup-0x1f7ff0e0>
     f14:	01000000 	mrseq	r0, (UNDEF: 0)
     f18:	000f449c 	muleq	pc, ip, r4	; <UNPREDICTABLE>
     f1c:	736d2800 	cmnvc	sp, #0, 16
     f20:	8a020067 	bhi	810c4 <startup-0x1ff7ef3c>
     f24:	00000f44 	andeq	r0, r0, r4, asr #30
     f28:	276c9102 	strbcs	r9, [ip, -r2, lsl #2]!
     f2c:	2000030a 	andcs	r0, r0, sl, lsl #6
     f30:	00000072 	andeq	r0, r0, r2, ror r0
     f34:	00036224 	andeq	r6, r3, r4, lsr #4
     f38:	728e0200 	addvc	r0, lr, #0, 4
     f3c:	0200000b 	andeq	r0, r0, #11
     f40:	00007491 	muleq	r0, r1, r4
     f44:	0a9d0421 	beq	fe741fd0 <GPIO_Ports+0xde73e028>
     f48:	2e260000 	cdpcs	0, 2, cr0, cr6, cr0, {0}
     f4c:	02000009 	andeq	r0, r0, #9
     f50:	0002c881 	andeq	ip, r2, r1, lsl #17
     f54:	00003220 	andeq	r3, r0, r0, lsr #4
     f58:	789c0100 	ldmvc	ip, {r8}
     f5c:	2700000f 	strcs	r0, [r0, -pc]
     f60:	200002ce 	andcs	r0, r0, lr, asr #5
     f64:	00000024 	andeq	r0, r0, r4, lsr #32
     f68:	000bb024 	andeq	fp, fp, r4, lsr #32
     f6c:	d1820200 	orrle	r0, r2, r0, lsl #4
     f70:	02000002 	andeq	r0, r0, #2
     f74:	00007791 	muleq	r0, r1, r7
     f78:	0000d226 	andeq	sp, r0, r6, lsr #4
     f7c:	78730200 	ldmdavc	r3!, {r9}^
     f80:	50200002 	eorpl	r0, r0, r2
     f84:	01000000 	mrseq	r0, (UNDEF: 0)
     f88:	000fb49c 	muleq	pc, ip, r4	; <UNPREDICTABLE>
     f8c:	0bb02a00 	bleq	fec0b794 <GPIO_Ports+0xdec077ec>
     f90:	73020000 	movwvc	r0, #8192	; 0x2000
     f94:	000002d1 	ldrdeq	r0, [r0], -r1
     f98:	27679102 	strbcs	r9, [r7, -r2, lsl #2]!
     f9c:	2000028c 	andcs	r0, r0, ip, lsl #5
     fa0:	0000002e 	andeq	r0, r0, lr, lsr #32
     fa4:	00049624 	andeq	r9, r4, r4, lsr #12
     fa8:	31780200 	cmncc	r8, r0, lsl #4
     fac:	0200000a 	andeq	r0, r0, #10
     fb0:	00006891 	muleq	r0, r1, r8
     fb4:	000bdc29 	andeq	sp, fp, r9, lsr #24
     fb8:	d14b0200 	mrsle	r0, (UNDEF: 107)
     fbc:	4c000002 	stcmi	0, cr0, [r0], {2}
     fc0:	2c200001 	stccs	0, cr0, [r0], #-4
     fc4:	01000001 	tsteq	r0, r1
     fc8:	0010289c 	mulseq	r0, ip, r8
     fcc:	005a2a00 	subseq	r2, sl, r0, lsl #20
     fd0:	4b020000 	blmi	80fd8 <startup-0x1ff7f028>
     fd4:	00000d96 	muleq	r0, r6, sp
     fd8:	2a649102 	bcs	19253e8 <startup-0x1e6dac18>
     fdc:	00000bf0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     fe0:	10284b02 	eorne	r4, r8, r2, lsl #22
     fe4:	91020000 	mrsls	r0, (UNDEF: 2)
     fe8:	08002a60 	stmdaeq	r0, {r5, r6, r9, fp, sp}
     fec:	4b020000 	blmi	80ff4 <startup-0x1ff7f00c>
     ff0:	00001028 	andeq	r1, r0, r8, lsr #32
     ff4:	275c9102 	ldrbcs	r9, [ip, -r2, lsl #2]
     ff8:	20000158 	andcs	r0, r0, r8, asr r1
     ffc:	00000102 	andeq	r0, r0, r2, lsl #2
    1000:	000bb024 	andeq	fp, fp, r4, lsr #32
    1004:	d14c0200 	mrsle	r0, (UNDEF: 108)
    1008:	02000002 	andeq	r0, r0, #2
    100c:	7e276f91 	mcrvc	15, 1, r6, cr7, cr1, {4}
    1010:	7c200001 	stcvc	0, cr0, [r0], #-4
    1014:	24000000 	strcs	r0, [r0], #-0
    1018:	00000362 	andeq	r0, r0, r2, ror #6
    101c:	0b725102 	bleq	1c9542c <startup-0x1e36abd4>
    1020:	91020000 	mrsls	r0, (UNDEF: 2)
    1024:	00000068 	andeq	r0, r0, r8, rrx
    1028:	0bc10421 	bleq	ff0420b4 <GPIO_Ports+0xdf03e10c>
    102c:	cc260000 	stcgt	0, cr0, [r6], #-0
    1030:	02000003 	andeq	r0, r0, #3
    1034:	0000b432 	andeq	fp, r0, r2, lsr r4
    1038:	00009820 	andeq	r9, r0, r0, lsr #16
    103c:	7c9c0100 	ldfvcs	f0, [ip], {0}
    1040:	2a000010 	bcs	1088 <startup-0x1fffef78>
    1044:	00000bb0 			; <UNDEFINED> instruction: 0x00000bb0
    1048:	02d13202 	sbcseq	r3, r1, #536870912	; 0x20000000
    104c:	91020000 	mrsls	r0, (UNDEF: 2)
    1050:	07c0245f 			; <UNDEFINED> instruction: 0x07c0245f
    1054:	36020000 	strcc	r0, [r2], -r0
    1058:	00000d41 	andeq	r0, r0, r1, asr #26
    105c:	24749102 	ldrbtcs	r9, [r4], #-258	; 0xfffffefe
    1060:	00000c2e 	andeq	r0, r0, lr, lsr #24
    1064:	0d413602 	stcleq	6, cr3, [r1, #-8]
    1068:	91020000 	mrsls	r0, (UNDEF: 2)
    106c:	04962470 	ldreq	r2, [r6], #1136	; 0x470
    1070:	3b020000 	blcc	81078 <startup-0x1ff7ef88>
    1074:	00000a31 	andeq	r0, r0, r1, lsr sl
    1078:	00609102 	rsbeq	r9, r0, r2, lsl #2
    107c:	0009562b 	andeq	r5, r9, fp, lsr #12
    1080:	d1280200 			; <UNDEFINED> instruction: 0xd1280200
    1084:	70000002 	andvc	r0, r0, r2
    1088:	44200000 	strtmi	r0, [r0], #-0
    108c:	01000000 	mrseq	r0, (UNDEF: 0)
    1090:	0010ae9c 	mulseq	r0, ip, lr
    1094:	00762700 	rsbseq	r2, r6, r0, lsl #14
    1098:	00302000 	eorseq	r2, r0, r0
    109c:	b0240000 	eorlt	r0, r4, r0
    10a0:	0200000b 	andeq	r0, r0, #11
    10a4:	0002d129 	andeq	sp, r2, r9, lsr #2
    10a8:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    10ac:	522c0000 	eorpl	r0, ip, #0
    10b0:	0100000c 	tsteq	r0, ip
    10b4:	0010065d 	andseq	r0, r0, sp, asr r6
    10b8:	00602000 	rsbeq	r2, r0, r0
    10bc:	9c010000 	stcls	0, cr0, [r1], {-0}
    10c0:	000c122d 	andeq	r1, ip, sp, lsr #4
    10c4:	065d0100 	ldrbeq	r0, [sp], -r0, lsl #2
    10c8:	0000025a 	andeq	r0, r0, sl, asr r2
    10cc:	2d779102 	ldfcsp	f1, [r7, #-8]!
    10d0:	000015c1 	andeq	r1, r0, r1, asr #11
    10d4:	01065d01 	tsteq	r6, r1, lsl #26
    10d8:	02000003 	andeq	r0, r0, #3
    10dc:	00007091 	muleq	r0, r1, r0
    10e0:	00000ba6 	andeq	r0, r0, r6, lsr #23
    10e4:	029b0004 	addseq	r0, fp, #4
    10e8:	01040000 	mrseq	r0, (UNDEF: 4)
    10ec:	000004b8 			; <UNDEFINED> instruction: 0x000004b8
    10f0:	000e8b0c 	andeq	r8, lr, ip, lsl #22
    10f4:	00040700 	andeq	r0, r4, r0, lsl #14
    10f8:	00079800 	andeq	r9, r7, r0, lsl #16
    10fc:	0011d220 	andseq	sp, r1, r0, lsr #4
    1100:	0002b600 	andeq	fp, r2, r0, lsl #12
    1104:	06010200 	streq	r0, [r1], -r0, lsl #4
    1108:	000002db 	ldrdeq	r0, [r0], -fp
    110c:	00017e03 	andeq	r7, r1, r3, lsl #28
    1110:	372b0200 	strcc	r0, [fp, -r0, lsl #4]!
    1114:	02000000 	andeq	r0, r0, #0
    1118:	02d90801 	sbcseq	r0, r9, #65536	; 0x10000
    111c:	02020000 	andeq	r0, r2, #0
    1120:	000b7405 	andeq	r7, fp, r5, lsl #8
    1124:	043c0300 	ldrteq	r0, [ip], #-768	; 0xfffffd00
    1128:	39020000 	stmdbcc	r2, {}	; <UNPREDICTABLE>
    112c:	00000050 	andeq	r0, r0, r0, asr r0
    1130:	9c070202 	sfmls	f0, 4, [r7], {2}
    1134:	0300000c 	movweq	r0, #12
    1138:	00000d18 	andeq	r0, r0, r8, lsl sp
    113c:	00624d02 	rsbeq	r4, r2, r2, lsl #26
    1140:	04020000 	streq	r0, [r2], #-0
    1144:	00078505 	andeq	r8, r7, r5, lsl #10
    1148:	07590300 	ldrbeq	r0, [r9, -r0, lsl #6]
    114c:	4f020000 	svcmi	0x00020000
    1150:	00000074 	andeq	r0, r0, r4, ror r0
    1154:	db070402 	blle	1c2164 <startup-0x1fe3de9c>
    1158:	02000009 	andeq	r0, r0, #9
    115c:	07800508 	streq	r0, [r0, r8, lsl #10]
    1160:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    1164:	0009d607 	andeq	sp, r9, r7, lsl #12
    1168:	05040400 	streq	r0, [r4, #-1024]	; 0xfffffc00
    116c:	00746e69 	rsbseq	r6, r4, r9, ror #28
    1170:	e0070402 	and	r0, r7, r2, lsl #8
    1174:	03000009 	movweq	r0, #9
    1178:	00000180 	andeq	r0, r0, r0, lsl #3
    117c:	002c1803 	eoreq	r1, ip, r3, lsl #16
    1180:	3e030000 	cdpcc	0, 0, cr0, cr3, cr0, {0}
    1184:	03000004 	movweq	r0, #4
    1188:	00004524 	andeq	r4, r0, r4, lsr #10
    118c:	0d1a0300 	ldceq	3, cr0, [sl, #-0]
    1190:	2c030000 	stccs	0, cr0, [r3], {-0}
    1194:	00000057 	andeq	r0, r0, r7, asr r0
    1198:	0000ad05 	andeq	sl, r0, r5, lsl #26
    119c:	075b0300 	ldrbeq	r0, [fp, -r0, lsl #6]
    11a0:	30030000 	andcc	r0, r3, r0
    11a4:	00000069 	andeq	r0, r0, r9, rrx
    11a8:	0000bd05 	andeq	fp, r0, r5, lsl #26
    11ac:	00bd0600 	adcseq	r0, sp, r0, lsl #12
    11b0:	00dd0000 	sbcseq	r0, sp, r0
    11b4:	90070000 	andls	r0, r7, r0
    11b8:	07000000 	streq	r0, [r0, -r0]
    11bc:	0c170800 	ldceq	8, cr0, [r7], {-0}
    11c0:	fa040000 	blx	1011c8 <startup-0x1fefee38>
    11c4:	0000b806 	andeq	fp, r0, r6, lsl #16
    11c8:	06690900 	strbteq	r0, [r9], -r0, lsl #18
    11cc:	3b050000 	blcc	1411d4 <startup-0x1febee2c>
    11d0:	000000bd 	strheq	r0, [r0], -sp
    11d4:	3701070a 	strcc	r0, [r1, -sl, lsl #14]
    11d8:	06000000 	streq	r0, [r0], -r0
    11dc:	010f035d 	tsteq	pc, sp, asr r3	; <UNPREDICTABLE>
    11e0:	170b0000 	strne	r0, [fp, -r0]
    11e4:	00000011 	andeq	r0, r0, r1, lsl r0
    11e8:	5445530c 	strbpl	r5, [r5], #-780	; 0xfffffcf4
    11ec:	0d000100 	stfeqs	f0, [r0, #-0]
    11f0:	00001b0b 	andeq	r1, r0, fp, lsl #22
    11f4:	f4035d06 			; <UNDEFINED> instruction: 0xf4035d06
    11f8:	0d000000 	stceq	0, cr0, [r0, #-0]
    11fc:	00001046 	andeq	r1, r0, r6, asr #32
    1200:	f4035d06 			; <UNDEFINED> instruction: 0xf4035d06
    1204:	0a000000 	beq	120c <startup-0x1fffedf4>
    1208:	00370107 	eorseq	r0, r7, r7, lsl #2
    120c:	5f060000 	svcpl	0x00060000
    1210:	00014203 	andeq	r4, r1, r3, lsl #4
    1214:	091d0b00 	ldmdbeq	sp, {r8, r9, fp}
    1218:	0b000000 	bleq	1220 <startup-0x1fffede0>
    121c:	00000bb6 			; <UNDEFINED> instruction: 0x00000bb6
    1220:	a00d0001 	andge	r0, sp, r1
    1224:	06000009 	streq	r0, [r0], -r9
    1228:	0127035f 			; <UNDEFINED> instruction: 0x0127035f
    122c:	100e0000 	andne	r0, lr, r0
    1230:	8c039506 	cfstr32hi	mvfx9, [r3], {6}
    1234:	0f000001 	svceq	0x00000001
    1238:	00524954 	subseq	r4, r2, r4, asr r9
    123c:	c8039706 	stmdagt	r3, {r1, r2, r8, r9, sl, ip, pc}
    1240:	00000000 	andeq	r0, r0, r0
    1244:	000d4b10 	andeq	r4, sp, r0, lsl fp
    1248:	03980600 	orrseq	r0, r8, #0, 12
    124c:	000000c8 	andeq	r0, r0, r8, asr #1
    1250:	0a461004 	beq	1185268 <startup-0x1ee7ad98>
    1254:	99060000 	stmdbls	r6, {}	; <UNPREDICTABLE>
    1258:	0000c803 	andeq	ip, r0, r3, lsl #16
    125c:	6e100800 	cdpvs	8, 1, cr0, cr0, cr0, {0}
    1260:	06000008 	streq	r0, [r0], -r8
    1264:	00c8039a 	smulleq	r0, r8, sl, r3
    1268:	000c0000 	andeq	r0, ip, r0
    126c:	000b2c0d 	andeq	r2, fp, sp, lsl #24
    1270:	039b0600 	orrseq	r0, fp, #0, 12
    1274:	0000014e 	andeq	r0, r0, lr, asr #2
    1278:	a106100e 	tstge	r6, lr
    127c:	0001d603 	andeq	sp, r1, r3, lsl #12
    1280:	49520f00 	ldmdbmi	r2, {r8, r9, sl, fp}^
    1284:	a3060052 	movwge	r0, #24658	; 0x6052
    1288:	0000c803 	andeq	ip, r0, r3, lsl #16
    128c:	3d100000 	ldccc	0, cr0, [r0, #-0]
    1290:	0600000d 	streq	r0, [r0], -sp
    1294:	00c803a4 	sbceq	r0, r8, r4, lsr #7
    1298:	10040000 	andne	r0, r4, r0
    129c:	00000a0c 	andeq	r0, r0, ip, lsl #20
    12a0:	c803a506 	stmdagt	r3, {r1, r2, r8, sl, sp, pc}
    12a4:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    12a8:	00086910 	andeq	r6, r8, r0, lsl r9
    12ac:	03a60600 			; <UNDEFINED> instruction: 0x03a60600
    12b0:	000000c8 	andeq	r0, r0, r8, asr #1
    12b4:	110d000c 	tstne	sp, ip
    12b8:	0600000a 	streq	r0, [r0], -sl
    12bc:	019803a7 	orrseq	r0, r8, r7, lsr #7
    12c0:	080e0000 	stmdaeq	lr, {}	; <UNPREDICTABLE>
    12c4:	0603ad06 	streq	sl, [r3], -r6, lsl #26
    12c8:	0f000002 	svceq	0x00000002
    12cc:	00315246 	eorseq	r5, r1, r6, asr #4
    12d0:	c803af06 	stmdagt	r3, {r1, r2, r8, r9, sl, fp, sp, pc}
    12d4:	00000000 	andeq	r0, r0, r0
    12d8:	3252460f 	subscc	r4, r2, #15728640	; 0xf00000
    12dc:	03b00600 	movseq	r0, #0, 12
    12e0:	000000c8 	andeq	r0, r0, r8, asr #1
    12e4:	8b0d0004 	blhi	3412fc <startup-0x1fcbed04>
    12e8:	06000002 	streq	r0, [r0], -r2
    12ec:	01e203b1 	strheq	r0, [r2, #49]!	; 0x31
    12f0:	20110000 	andscs	r0, r1, r0
    12f4:	03b70603 			; <UNDEFINED> instruction: 0x03b70603
    12f8:	00000348 	andeq	r0, r0, r8, asr #6
    12fc:	52434d0f 	subpl	r4, r3, #960	; 0x3c0
    1300:	03b90600 			; <UNDEFINED> instruction: 0x03b90600
    1304:	000000c8 	andeq	r0, r0, r8, asr #1
    1308:	534d0f00 	movtpl	r0, #57088	; 0xdf00
    130c:	ba060052 	blt	18145c <startup-0x1fe7eba4>
    1310:	0000c803 	andeq	ip, r0, r3, lsl #16
    1314:	540f0400 	strpl	r0, [pc], #-1024	; 131c <startup-0x1fffece4>
    1318:	06005253 			; <UNDEFINED> instruction: 0x06005253
    131c:	00c803bb 	strheq	r0, [r8], #59	; 0x3b
    1320:	10080000 	andne	r0, r8, r0
    1324:	00000267 	andeq	r0, r0, r7, ror #4
    1328:	c803bc06 	stmdagt	r3, {r1, r2, sl, fp, ip, sp, pc}
    132c:	0c000000 	stceq	0, cr0, [r0], {-0}
    1330:	00030d10 	andeq	r0, r3, r0, lsl sp
    1334:	03bd0600 			; <UNDEFINED> instruction: 0x03bd0600
    1338:	000000c8 	andeq	r0, r0, r8, asr #1
    133c:	45490f10 	strbmi	r0, [r9, #-3856]	; 0xfffff0f0
    1340:	be060052 	mcrlt	0, 0, r0, cr6, cr2, {2}
    1344:	0000c803 	andeq	ip, r0, r3, lsl #16
    1348:	450f1400 	strmi	r1, [pc, #-1024]	; f50 <startup-0x1ffff0b0>
    134c:	06005253 			; <UNDEFINED> instruction: 0x06005253
    1350:	00c803bf 	strheq	r0, [r8], #63	; 0x3f
    1354:	0f180000 	svceq	0x00180000
    1358:	00525442 	subseq	r5, r2, r2, asr #8
    135c:	c803c006 	stmdagt	r3, {r1, r2, lr, pc}
    1360:	1c000000 	stcne	0, cr0, [r0], {-0}
    1364:	0002c510 	andeq	ip, r2, r0, lsl r5
    1368:	03c10600 	biceq	r0, r1, #0, 12
    136c:	00000348 	andeq	r0, r0, r8, asr #6
    1370:	0cfb1220 	lfmeq	f1, 2, [fp], #128	; 0x80
    1374:	c2060000 	andgt	r0, r6, #0
    1378:	00035803 	andeq	r5, r3, r3, lsl #16
    137c:	12018000 	andne	r8, r1, #0
    1380:	000002a6 	andeq	r0, r0, r6, lsr #5
    1384:	6803c306 	stmdavs	r3, {r1, r2, r8, r9, lr, pc}
    1388:	b0000003 	andlt	r0, r0, r3
    138c:	02cf1201 	sbceq	r1, pc, #268435456	; 0x10000000
    1390:	c4060000 	strgt	r0, [r6], #-0
    1394:	00037803 	andeq	r7, r3, r3, lsl #16
    1398:	1301d000 	movwne	sp, #4096	; 0x1000
    139c:	00524d46 	subseq	r4, r2, r6, asr #26
    13a0:	c803c506 	stmdagt	r3, {r1, r2, r8, sl, lr, pc}
    13a4:	00000000 	andeq	r0, r0, r0
    13a8:	08641202 	stmdaeq	r4!, {r1, r9, ip}^
    13ac:	c6060000 	strgt	r0, [r6], -r0
    13b0:	0000c803 	andeq	ip, r0, r3, lsl #16
    13b4:	12020400 	andne	r0, r2, #0, 8
    13b8:	0000036f 	andeq	r0, r0, pc, ror #6
    13bc:	bd03c706 	stclt	7, cr12, [r3, #-24]	; 0xffffffe8
    13c0:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    13c4:	0b1a1202 	bleq	685bd4 <startup-0x1f97a42c>
    13c8:	c8060000 	stmdagt	r6, {}	; <UNPREDICTABLE>
    13cc:	0000c803 	andeq	ip, r0, r3, lsl #16
    13d0:	12020c00 	andne	r0, r2, #0, 24
    13d4:	00000379 	andeq	r0, r0, r9, ror r3
    13d8:	bd03c906 	vstrlt.16	s24, [r3, #-12]	; <UNPREDICTABLE>
    13dc:	10000000 	andne	r0, r0, r0
    13e0:	0b871202 	bleq	fe1c5bf0 <GPIO_Ports+0xde1c1c48>
    13e4:	ca060000 	bgt	1813ec <startup-0x1fe7ec14>
    13e8:	0000c803 	andeq	ip, r0, r3, lsl #16
    13ec:	12021400 	andne	r1, r2, #0, 8
    13f0:	000002f9 	strdeq	r0, [r0], -r9
    13f4:	bd03cb06 	vstrlt	d12, [r3, #-24]	; 0xffffffe8
    13f8:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    13fc:	0b881202 	bleq	fe205c0c <GPIO_Ports+0xde201c64>
    1400:	cc060000 	stcgt	0, cr0, [r6], {-0}
    1404:	0000c803 	andeq	ip, r0, r3, lsl #16
    1408:	12021c00 	andne	r1, r2, #0, 24
    140c:	00000303 	andeq	r0, r0, r3, lsl #6
    1410:	cd03cd06 	stcgt	13, cr12, [r3, #-24]	; 0xffffffe8
    1414:	20000000 	andcs	r0, r0, r0
    1418:	08e21202 	stmiaeq	r2!, {r1, r9, ip}^
    141c:	ce060000 	cdpgt	0, 0, cr0, cr6, cr0, {0}
    1420:	00038803 	andeq	r8, r3, r3, lsl #16
    1424:	00024000 	andeq	r4, r2, r0
    1428:	0000bd06 	andeq	fp, r0, r6, lsl #26
    142c:	00035800 	andeq	r5, r3, r0, lsl #16
    1430:	00900700 	addseq	r0, r0, r0, lsl #14
    1434:	00570000 	subseq	r0, r7, r0
    1438:	00018c06 	andeq	r8, r1, r6, lsl #24
    143c:	00036800 	andeq	r6, r3, r0, lsl #16
    1440:	00900700 	addseq	r0, r0, r0, lsl #14
    1444:	00020000 	andeq	r0, r2, r0
    1448:	0001d606 	andeq	sp, r1, r6, lsl #12
    144c:	00037800 	andeq	r7, r3, r0, lsl #16
    1450:	00900700 	addseq	r0, r0, r0, lsl #14
    1454:	00010000 	andeq	r0, r1, r0
    1458:	0000bd06 	andeq	fp, r0, r6, lsl #26
    145c:	00038800 	andeq	r8, r3, r0, lsl #16
    1460:	00900700 	addseq	r0, r0, r0, lsl #14
    1464:	000b0000 	andeq	r0, fp, r0
    1468:	00020606 	andeq	r0, r2, r6, lsl #12
    146c:	00039800 	andeq	r9, r3, r0, lsl #16
    1470:	00900700 	addseq	r0, r0, r0, lsl #14
    1474:	001b0000 	andseq	r0, fp, r0
    1478:	0008c50d 	andeq	ip, r8, sp, lsl #10
    147c:	03cf0600 	biceq	r0, pc, #0, 12
    1480:	00000212 	andeq	r0, r0, r2, lsl r2
    1484:	3d070c14 	stccc	12, cr0, [r7, #-80]	; 0xffffffb0
    1488:	00000431 	andeq	r0, r0, r1, lsr r4
    148c:	00070c15 	andeq	r0, r7, r5, lsl ip
    1490:	a23f0700 	eorsge	r0, pc, #0, 14
    1494:	00000000 	andeq	r0, r0, r0
    1498:	00010315 	andeq	r0, r1, r5, lsl r3
    149c:	97420700 	strbls	r0, [r2, -r0, lsl #14]
    14a0:	02000000 	andeq	r0, r0, #0
    14a4:	0005a115 	andeq	sl, r5, r5, lsl r1
    14a8:	97450700 	strbls	r0, [r5, -r0, lsl #14]
    14ac:	03000000 	movweq	r0, #0
    14b0:	000bbd15 	andeq	fp, fp, r5, lsl sp
    14b4:	974a0700 	strbls	r0, [sl, -r0, lsl #14]
    14b8:	04000000 	streq	r0, [r0], #-0
    14bc:	000bc515 	andeq	ip, fp, r5, lsl r5
    14c0:	974e0700 	strbls	r0, [lr, -r0, lsl #14]
    14c4:	05000000 	streq	r0, [r0, #-0]
    14c8:	0000fa15 	andeq	pc, r0, r5, lsl sl	; <UNPREDICTABLE>
    14cc:	42510700 	subsmi	r0, r1, #0, 14
    14d0:	06000001 	streq	r0, [r0], -r1
    14d4:	00034b15 	andeq	r4, r3, r5, lsl fp
    14d8:	42540700 	subsmi	r0, r4, #0, 14
    14dc:	07000001 	streq	r0, [r0, -r1]
    14e0:	00098d15 	andeq	r8, r9, r5, lsl sp
    14e4:	42570700 	subsmi	r0, r7, #0, 14
    14e8:	08000001 	stmdaeq	r0, {r0}
    14ec:	000a0315 	andeq	r0, sl, r5, lsl r3
    14f0:	425a0700 	subsmi	r0, sl, #0, 14
    14f4:	09000001 	stmdbeq	r0, {r0}
    14f8:	00081915 	andeq	r1, r8, r5, lsl r9
    14fc:	425d0700 	subsmi	r0, sp, #0, 14
    1500:	0a000001 	beq	150c <startup-0x1fffeaf4>
    1504:	000d4215 	andeq	r4, sp, r5, lsl r2
    1508:	42600700 	rsbmi	r0, r0, #0, 14
    150c:	0b000001 	bleq	1518 <startup-0x1fffeae8>
    1510:	00650300 	rsbeq	r0, r5, r0, lsl #6
    1514:	62070000 	andvs	r0, r7, #0
    1518:	000003a4 	andeq	r0, r0, r4, lsr #7
    151c:	67070e14 	smladvs	r7, r4, lr, r0
    1520:	000004b1 			; <UNDEFINED> instruction: 0x000004b1
    1524:	000a6215 	andeq	r6, sl, r5, lsl r2
    1528:	a2690700 	rsbge	r0, r9, #0, 14
    152c:	00000000 	andeq	r0, r0, r0
    1530:	00007515 	andeq	r7, r0, r5, lsl r5
    1534:	a26d0700 	rsbge	r0, sp, #0, 14
    1538:	02000000 	andeq	r0, r0, #0
    153c:	00087815 	andeq	r7, r8, r5, lsl r8
    1540:	a2710700 	rsbsge	r0, r1, #0, 14
    1544:	04000000 	streq	r0, [r0], #-0
    1548:	000b5515 	andeq	r5, fp, r5, lsl r5
    154c:	a2760700 	rsbsge	r0, r6, #0, 14
    1550:	06000000 	streq	r0, [r0], -r0
    1554:	00033215 	andeq	r3, r3, r5, lsl r2
    1558:	a27b0700 	rsbsge	r0, fp, #0, 14
    155c:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    1560:	0008d115 	andeq	sp, r8, r5, lsl r1
    1564:	977e0700 	ldrbls	r0, [lr, -r0, lsl #14]!
    1568:	0a000000 	beq	1570 <startup-0x1fffea90>
    156c:	000bcd15 	andeq	ip, fp, r5, lsl sp
    1570:	97800700 	strls	r0, [r0, r0, lsl #14]
    1574:	0b000000 	bleq	157c <startup-0x1fffea84>
    1578:	00016e15 	andeq	r6, r1, r5, lsl lr
    157c:	97830700 	strls	r0, [r3, r0, lsl #14]
    1580:	0c000000 	stceq	0, cr0, [r0], {-0}
    1584:	00046f15 	andeq	r6, r4, r5, lsl pc
    1588:	42860700 	addmi	r0, r6, #0, 14
    158c:	0d000001 	stceq	0, cr0, [r0, #-4]
    1590:	0d270300 	stceq	3, cr0, [r7, #-0]
    1594:	88070000 	stmdahi	r7, {}	; <UNPREDICTABLE>
    1598:	0000043c 	andeq	r0, r0, ip, lsr r4
    159c:	8d071414 	cfstrshi	mvf1, [r7, #-80]	; 0xffffffb0
    15a0:	0000050d 	andeq	r0, r0, sp, lsl #10
    15a4:	00036915 	andeq	r6, r3, r5, lsl r9
    15a8:	bd8f0700 	stclt	7, cr0, [pc]	; 15b0 <startup-0x1fffea50>
    15ac:	00000000 	andeq	r0, r0, r0
    15b0:	00049015 	andeq	r9, r4, r5, lsl r0
    15b4:	bd920700 	ldclt	7, cr0, [r2]
    15b8:	04000000 	streq	r0, [r0], #-0
    15bc:	45444916 	strbmi	r4, [r4, #-2326]	; 0xfffff6ea
    15c0:	97950700 	ldrls	r0, [r5, r0, lsl #14]
    15c4:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    15c8:	52545216 	subspl	r5, r4, #1610612737	; 0x60000001
    15cc:	97990700 	ldrls	r0, [r9, r0, lsl #14]
    15d0:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    15d4:	434c4416 	movtmi	r4, #50198	; 0xc416
    15d8:	979d0700 	ldrls	r0, [sp, r0, lsl #14]
    15dc:	0a000000 	beq	15e4 <startup-0x1fffea1c>
    15e0:	0011a815 	andseq	sl, r1, r5, lsl r8
    15e4:	0da10700 	stceq	7, cr0, [r1]
    15e8:	0b000005 	bleq	1604 <startup-0x1fffe9fc>
    15ec:	00970600 	addseq	r0, r7, r0, lsl #12
    15f0:	051d0000 	ldreq	r0, [sp, #-0]
    15f4:	90070000 	andls	r0, r7, r0
    15f8:	07000000 	streq	r0, [r0, -r0]
    15fc:	05500300 	ldrbeq	r0, [r0, #-768]	; 0xfffffd00
    1600:	a3070000 	movwge	r0, #28672	; 0x7000
    1604:	000004bc 			; <UNDEFINED> instruction: 0x000004bc
    1608:	a8071414 	stmdage	r7, {r2, r4, sl, ip}
    160c:	00000585 	andeq	r0, r0, r5, lsl #11
    1610:	00036915 	andeq	r6, r3, r5, lsl r9
    1614:	bdaa0700 	stclt	7, cr0, [sl]
    1618:	00000000 	andeq	r0, r0, r0
    161c:	00049015 	andeq	r9, r4, r5, lsl r0
    1620:	bdad0700 	stclt	7, cr0, [sp]
    1624:	04000000 	streq	r0, [r0], #-0
    1628:	45444916 	strbmi	r4, [r4, #-2326]	; 0xfffff6ea
    162c:	97b00700 	ldrls	r0, [r0, r0, lsl #14]!
    1630:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    1634:	52545216 	subspl	r5, r4, #1610612737	; 0x60000001
    1638:	97b40700 	ldrls	r0, [r4, r0, lsl #14]!
    163c:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    1640:	434c4416 	movtmi	r4, #50198	; 0xc416
    1644:	97b80700 	ldrls	r0, [r8, r0, lsl #14]!
    1648:	0a000000 	beq	1650 <startup-0x1fffe9b0>
    164c:	0011a815 	andseq	sl, r1, r5, lsl r8
    1650:	0dbb0700 	ldceq	7, cr0, [fp]
    1654:	0b000005 	bleq	1670 <startup-0x1fffe990>
    1658:	494d4616 	stmdbmi	sp, {r1, r2, r4, r9, sl, lr}^
    165c:	97be0700 	ldrls	r0, [lr, r0, lsl #14]!
    1660:	13000000 	movwne	r0, #0
    1664:	09250300 	stmdbeq	r5!, {r8, r9}
    1668:	c1070000 	mrsgt	r0, (UNDEF: 7)
    166c:	00000528 	andeq	r0, r0, r8, lsr #10
    1670:	00104117 	andseq	r4, r0, r7, lsl r1
    1674:	07230100 	streq	r0, [r3, -r0, lsl #2]!
    1678:	0000011b 	andeq	r0, r0, fp, lsl r1
    167c:	20001930 	andcs	r1, r0, r0, lsr r9
    1680:	0000003a 	andeq	r0, r0, sl, lsr r0
    1684:	05d89c01 	ldrbeq	r9, [r8, #3073]	; 0xc01
    1688:	d1180000 	tstle	r8, r0
    168c:	0100000f 	tsteq	r0, pc
    1690:	00bd0723 	adcseq	r0, sp, r3, lsr #14
    1694:	91020000 	mrsls	r0, (UNDEF: 2)
    1698:	0f81186c 	svceq	0x0081186c
    169c:	23010000 	movwcs	r0, #4096	; 0x1000
    16a0:	0000bd07 	andeq	fp, r0, r7, lsl #26
    16a4:	68910200 	ldmvs	r1, {r9}
    16a8:	000fc019 	andeq	ip, pc, r9, lsl r0	; <UNPREDICTABLE>
    16ac:	07250100 	streq	r0, [r5, -r0, lsl #2]!
    16b0:	0000011b 	andeq	r0, r0, fp, lsl r1
    16b4:	00779102 	rsbseq	r9, r7, r2, lsl #2
    16b8:	00104f1a 	andseq	r4, r0, sl, lsl pc
    16bc:	06d50100 	ldrbeq	r0, [r5], r0, lsl #2
    16c0:	20001844 	andcs	r1, r0, r4, asr #16
    16c4:	000000ec 	andeq	r0, r0, ip, ror #1
    16c8:	060d9c01 	streq	r9, [sp], -r1, lsl #24
    16cc:	20180000 	andscs	r0, r8, r0
    16d0:	01000010 	tsteq	r0, r0, lsl r0
    16d4:	060d06d5 			; <UNDEFINED> instruction: 0x060d06d5
    16d8:	91020000 	mrsls	r0, (UNDEF: 2)
    16dc:	0f671874 	svceq	0x00671874
    16e0:	d5010000 	strle	r0, [r1, #-0]
    16e4:	0000bd06 	andeq	fp, r0, r6, lsl #26
    16e8:	70910200 	addsvc	r0, r1, r0, lsl #4
    16ec:	98041b00 	stmdals	r4, {r8, r9, fp, ip}
    16f0:	1c000003 	stcne	0, cr0, [r0], {3}
    16f4:	00000f88 	andeq	r0, r0, r8, lsl #31
    16f8:	1b066c01 	blne	19c704 <startup-0x1fe638fc>
    16fc:	54000001 	strpl	r0, [r0], #-1
    1700:	f0200016 			; <UNDEFINED> instruction: 0xf0200016
    1704:	01000001 	tsteq	r0, r1
    1708:	00065b9c 	muleq	r6, ip, fp
    170c:	10201800 	eorne	r1, r0, r0, lsl #16
    1710:	6c010000 	stcvs	0, cr0, [r1], {-0}
    1714:	00060d06 	andeq	r0, r6, r6, lsl #26
    1718:	64910200 	ldrvs	r0, [r1], #512	; 0x200
    171c:	000f6718 	andeq	r6, pc, r8, lsl r7	; <UNPREDICTABLE>
    1720:	066c0100 	strbteq	r0, [ip], -r0, lsl #2
    1724:	000000bd 	strheq	r0, [r0], -sp
    1728:	19609102 	stmdbne	r0!, {r1, r8, ip, pc}^
    172c:	00000fc8 	andeq	r0, r0, r8, asr #31
    1730:	1b066e01 	blne	19cf3c <startup-0x1fe630c4>
    1734:	02000001 	andeq	r0, r0, #1
    1738:	1a006f91 	bne	1d584 <startup-0x1ffe2a7c>
    173c:	00000d8a 	andeq	r0, r0, sl, lsl #27
    1740:	e4062f01 	str	r2, [r6], #-3841	; 0xfffff0ff
    1744:	70200015 	eorvc	r0, r0, r5, lsl r0
    1748:	01000000 	mrseq	r0, (UNDEF: 0)
    174c:	00069f9c 	muleq	r6, ip, pc	; <UNPREDICTABLE>
    1750:	10201800 	eorne	r1, r0, r0, lsl #16
    1754:	2f010000 	svccs	0x00010000
    1758:	00060d06 	andeq	r0, r6, r6, lsl #26
    175c:	6c910200 	lfmvs	f0, 4, [r1], {0}
    1760:	000f9818 	andeq	r9, pc, r8, lsl r8	; <UNPREDICTABLE>
    1764:	062f0100 	strteq	r0, [pc], -r0, lsl #2
    1768:	000000bd 	strheq	r0, [r0], -sp
    176c:	19689102 	stmdbne	r8!, {r1, r8, ip, pc}^
    1770:	00000ff9 	strdeq	r0, [r0], -r9
    1774:	bd063101 	stflts	f3, [r6, #-4]
    1778:	02000000 	andeq	r0, r0, #0
    177c:	1d007491 	cfstrsne	mvf7, [r0, #-580]	; 0xfffffdbc
    1780:	00001001 	andeq	r1, r0, r1
    1784:	0f05ca01 	svceq	0x0005ca01
    1788:	f4000001 	vst4.8	{d0-d3}, [r0], r1
    178c:	f0200014 			; <UNDEFINED> instruction: 0xf0200014
    1790:	01000000 	mrseq	r0, (UNDEF: 0)
    1794:	0006e79c 	muleq	r6, ip, r7
    1798:	10201800 	eorne	r1, r0, r0, lsl #16
    179c:	ca010000 	bgt	417a4 <startup-0x1ffbe85c>
    17a0:	00060d05 	andeq	r0, r6, r5, lsl #26
    17a4:	6c910200 	lfmvs	f0, 4, [r1], {0}
    17a8:	000f9818 	andeq	r9, pc, r8, lsl r8	; <UNPREDICTABLE>
    17ac:	05ca0100 	strbeq	r0, [sl, #256]	; 0x100
    17b0:	000000bd 	strheq	r0, [r0], -sp
    17b4:	19689102 	stmdbne	r8!, {r1, r8, ip, pc}^
    17b8:	00000fc7 	andeq	r0, r0, r7, asr #31
    17bc:	0f05cc01 	svceq	0x0005cc01
    17c0:	02000001 	andeq	r0, r0, #1
    17c4:	1a007791 	bne	1f610 <startup-0x1ffe09f0>
    17c8:	00001013 	andeq	r1, r0, r3, lsl r0
    17cc:	ba05a101 	blt	169bd8 <startup-0x1fe96428>
    17d0:	3a200014 	bcc	801828 <startup-0x1f7fe7d8>
    17d4:	01000000 	mrseq	r0, (UNDEF: 0)
    17d8:	00072b9c 	muleq	r7, ip, fp
    17dc:	10201800 	eorne	r1, r0, r0, lsl #16
    17e0:	a1010000 	mrsge	r0, (UNDEF: 1)
    17e4:	00060d05 	andeq	r0, r6, r5, lsl #26
    17e8:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    17ec:	000f6718 	andeq	r6, pc, r8, lsl r7	; <UNPREDICTABLE>
    17f0:	05a10100 	streq	r0, [r1, #256]!	; 0x100
    17f4:	000000bd 	strheq	r0, [r0], -sp
    17f8:	18709102 	ldmdane	r0!, {r1, r8, ip, pc}^
    17fc:	00000e6f 	andeq	r0, r0, pc, ror #28
    1800:	4205a101 	andmi	sl, r5, #1073741824	; 0x40000000
    1804:	02000001 	andeq	r0, r0, #1
    1808:	1d006f91 	stcne	15, cr6, [r0, #-580]	; 0xfffffdbc
    180c:	00000e25 	andeq	r0, r0, r5, lsr #28
    1810:	9704d301 	strls	sp, [r4, -r1, lsl #6]
    1814:	94000000 	strls	r0, [r0], #-0
    1818:	26200014 			; <UNDEFINED> instruction: 0x26200014
    181c:	01000000 	mrseq	r0, (UNDEF: 0)
    1820:	0007649c 	muleq	r7, ip, r4
    1824:	10201800 	eorne	r1, r0, r0, lsl #16
    1828:	d3010000 	movwle	r0, #4096	; 0x1000
    182c:	00060d04 	andeq	r0, r6, r4, lsl #26
    1830:	6c910200 	lfmvs	f0, 4, [r1], {0}
    1834:	0019cc19 	andseq	ip, r9, r9, lsl ip
    1838:	04d50100 	ldrbeq	r0, [r5], #256	; 0x100
    183c:	00000097 	muleq	r0, r7, r0
    1840:	00779102 	rsbseq	r9, r7, r2, lsl #2
    1844:	0010761d 	andseq	r7, r0, sp, lsl r6
    1848:	04be0100 	ldrteq	r0, [lr], #256	; 0x100
    184c:	00000097 	muleq	r0, r7, r0
    1850:	2000146e 	andcs	r1, r0, lr, ror #8
    1854:	00000026 	andeq	r0, r0, r6, lsr #32
    1858:	079d9c01 	ldreq	r9, [sp, r1, lsl #24]
    185c:	20180000 	andscs	r0, r8, r0
    1860:	01000010 	tsteq	r0, r0, lsl r0
    1864:	060d04be 			; <UNDEFINED> instruction: 0x060d04be
    1868:	91020000 	mrsls	r0, (UNDEF: 2)
    186c:	19cc196c 	stmibne	ip, {r2, r3, r5, r6, r8, fp, ip}^
    1870:	c0010000 	andgt	r0, r1, r0
    1874:	00009704 	andeq	r9, r0, r4, lsl #14
    1878:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    187c:	0e441d00 	cdpeq	13, 4, cr1, cr4, cr0, {0}
    1880:	a4010000 	strge	r0, [r1], #-0
    1884:	00009704 	andeq	r9, r0, r4, lsl #14
    1888:	00144000 	andseq	r4, r4, r0
    188c:	00002e20 	andeq	r2, r0, r0, lsr #28
    1890:	d69c0100 	ldrle	r0, [ip], r0, lsl #2
    1894:	18000007 	stmdane	r0, {r0, r1, r2}
    1898:	00001020 	andeq	r1, r0, r0, lsr #32
    189c:	0d04a401 	cfstrseq	mvf10, [r4, #-4]
    18a0:	02000006 	andeq	r0, r0, #6
    18a4:	b6196c91 			; <UNDEFINED> instruction: 0xb6196c91
    18a8:	0100000f 	tsteq	r0, pc
    18ac:	009704a6 	addseq	r0, r7, r6, lsr #9
    18b0:	91020000 	mrsls	r0, (UNDEF: 2)
    18b4:	641d0077 	ldrvs	r0, [sp], #-119	; 0xffffff89
    18b8:	0100000e 	tsteq	r0, lr
    18bc:	00970466 	addseq	r0, r7, r6, ror #8
    18c0:	13de0000 	bicsne	r0, lr, #0
    18c4:	00622000 	rsbeq	r2, r2, r0
    18c8:	9c010000 	stcls	0, cr0, [r1], {-0}
    18cc:	0000081e 	andeq	r0, r0, lr, lsl r8
    18d0:	00102018 	andseq	r2, r0, r8, lsl r0
    18d4:	04660100 	strbteq	r0, [r6], #-256	; 0xffffff00
    18d8:	0000060d 	andeq	r0, r0, sp, lsl #12
    18dc:	196c9102 	stmdbne	ip!, {r1, r8, ip, pc}^
    18e0:	00000fa1 	andeq	r0, r0, r1, lsr #31
    18e4:	bd046801 	stclt	8, cr6, [r4, #-4]
    18e8:	02000000 	andeq	r0, r0, #0
    18ec:	a7197491 			; <UNDEFINED> instruction: 0xa7197491
    18f0:	01000010 	tsteq	r0, r0, lsl r0
    18f4:	00970469 	addseq	r0, r7, r9, ror #8
    18f8:	91020000 	mrsls	r0, (UNDEF: 2)
    18fc:	771d0073 			; <UNDEFINED> instruction: 0x771d0073
    1900:	0100000f 	tsteq	r0, pc
    1904:	0097044c 	addseq	r0, r7, ip, asr #8
    1908:	139c0000 	orrsne	r0, ip, #0
    190c:	00422000 	subeq	r2, r2, r0
    1910:	9c010000 	stcls	0, cr0, [r1], {-0}
    1914:	00000857 	andeq	r0, r0, r7, asr r8
    1918:	00102018 	andseq	r2, r0, r8, lsl r0
    191c:	044c0100 	strbeq	r0, [ip], #-256	; 0xffffff00
    1920:	0000060d 	andeq	r0, r0, sp, lsl #12
    1924:	196c9102 	stmdbne	ip!, {r1, r8, ip, pc}^
    1928:	00000db1 			; <UNDEFINED> instruction: 0x00000db1
    192c:	97044e01 	strls	r4, [r4, -r1, lsl #28]
    1930:	02000000 	andeq	r0, r0, #0
    1934:	1d007791 	stcne	7, cr7, [r0, #-580]	; 0xfffffdbc
    1938:	00000f39 	andeq	r0, r0, r9, lsr pc
    193c:	9703fa01 	strls	pc, [r3, -r1, lsl #20]
    1940:	78000000 	stmdavc	r0, {}	; <UNPREDICTABLE>
    1944:	24200012 	strtcs	r0, [r0], #-18	; 0xffffffee
    1948:	01000001 	tsteq	r0, r1
    194c:	0008ae9c 	muleq	r8, ip, lr
    1950:	10201800 	eorne	r1, r0, r0, lsl #16
    1954:	fa010000 	blx	4195c <startup-0x1ffbe6a4>
    1958:	00060d03 	andeq	r0, r6, r3, lsl #26
    195c:	6c910200 	lfmvs	f0, 4, [r1], {0}
    1960:	000fe718 	andeq	lr, pc, r8, lsl r7	; <UNPREDICTABLE>
    1964:	03fa0100 	mvnseq	r0, #0, 2
    1968:	00000097 	muleq	r0, r7, r0
    196c:	196b9102 	stmdbne	fp!, {r1, r8, ip, pc}^
    1970:	0000057a 	andeq	r0, r0, sl, ror r5
    1974:	9703fc01 	strls	pc, [r3, -r1, lsl #24]
    1978:	02000000 	andeq	r0, r0, #0
    197c:	52197791 	andspl	r7, r9, #38010880	; 0x2440000
    1980:	0100000f 	tsteq	r0, pc
    1984:	00bd03ff 	ldrshteq	r0, [sp], pc
    1988:	91020000 	mrsls	r0, (UNDEF: 2)
    198c:	131d0070 	tstne	sp, #112	; 0x70
    1990:	0100000f 	tsteq	r0, pc
    1994:	009703c8 	addseq	r0, r7, r8, asr #7
    1998:	12180000 	andsne	r0, r8, #0
    199c:	00602000 	rsbeq	r2, r0, r0
    19a0:	9c010000 	stcls	0, cr0, [r1], {-0}
    19a4:	000008f6 	strdeq	r0, [r0], -r6
    19a8:	00102018 	andseq	r2, r0, r8, lsl r0
    19ac:	03c80100 	biceq	r0, r8, #0, 2
    19b0:	0000060d 	andeq	r0, r0, sp, lsl #12
    19b4:	186c9102 	stmdane	ip!, {r1, r8, ip, pc}^
    19b8:	00000fab 	andeq	r0, r0, fp, lsr #31
    19bc:	9703c801 	strls	ip, [r3, -r1, lsl #16]
    19c0:	02000000 	andeq	r0, r0, #0
    19c4:	f3196b91 	vqrdmlah.s16	d6, d25, d1
    19c8:	0100000d 	tsteq	r0, sp
    19cc:	009703ca 	addseq	r0, r7, sl, asr #7
    19d0:	91020000 	mrsls	r0, (UNDEF: 2)
    19d4:	d21a0077 	andsle	r0, sl, #119	; 0x77
    19d8:	0100000d 	tsteq	r0, sp
    19dc:	11e003b0 	strhne	r0, [r0, #48]!	; 0x30
    19e0:	00382000 	eorseq	r2, r8, r0
    19e4:	9c010000 	stcls	0, cr0, [r1], {-0}
    19e8:	0000092b 	andeq	r0, r0, fp, lsr #18
    19ec:	00102018 	andseq	r2, r0, r8, lsl r0
    19f0:	03b00100 	movseq	r0, #0, 2
    19f4:	0000060d 	andeq	r0, r0, sp, lsl #12
    19f8:	18749102 	ldmdane	r4!, {r1, r8, ip, pc}^
    19fc:	00000fab 	andeq	r0, r0, fp, lsr #31
    1a00:	9703b001 	strls	fp, [r3, -r1]
    1a04:	02000000 	andeq	r0, r0, #0
    1a08:	1a007391 	bne	1e854 <startup-0x1ffe17ac>
    1a0c:	00001025 	andeq	r1, r0, r5, lsr #32
    1a10:	36037e01 	strcc	r7, [r3], -r1, lsl #28
    1a14:	aa200010 	bge	801a5c <startup-0x1f7fe5a4>
    1a18:	01000001 	tsteq	r0, r1
    1a1c:	00096f9c 	muleq	r9, ip, pc	; <UNPREDICTABLE>
    1a20:	10201800 	eorne	r1, r0, r0, lsl #16
    1a24:	7e010000 	cdpvc	0, 0, cr0, cr1, cr0, {0}
    1a28:	00060d03 	andeq	r0, r6, r3, lsl #26
    1a2c:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    1a30:	000fab18 	andeq	sl, pc, r8, lsl fp	; <UNPREDICTABLE>
    1a34:	037e0100 	cmneq	lr, #0, 2
    1a38:	00000097 	muleq	r0, r7, r0
    1a3c:	18739102 	ldmdane	r3!, {r1, r8, ip, pc}^
    1a40:	00000d98 	muleq	r0, r8, sp
    1a44:	6f037e01 	svcvs	0x00037e01
    1a48:	02000009 	andeq	r0, r0, #9
    1a4c:	1b006c91 	blne	1cc98 <startup-0x1ffe3368>
    1a50:	00058504 	andeq	r8, r5, r4, lsl #10
    1a54:	0e781a00 	vaddeq.f32	s3, s16, s0
    1a58:	4e010000 	cdpmi	0, 0, cr0, cr1, cr0, {0}
    1a5c:	000fe003 	andeq	lr, pc, r3
    1a60:	00005620 	andeq	r5, r0, r0, lsr #12
    1a64:	aa9c0100 	bge	fe701e6c <GPIO_Ports+0xde6fdec4>
    1a68:	18000009 	stmdane	r0, {r0, r3}
    1a6c:	00001020 	andeq	r1, r0, r0, lsr #32
    1a70:	0d034e01 	stceq	14, cr4, [r3, #-4]
    1a74:	02000006 	andeq	r0, r0, #6
    1a78:	39187491 	ldmdbcc	r8, {r0, r4, r7, sl, ip, sp, lr}
    1a7c:	01000010 	tsteq	r0, r0, lsl r0
    1a80:	0097034e 	addseq	r0, r7, lr, asr #6
    1a84:	91020000 	mrsls	r0, (UNDEF: 2)
    1a88:	031d0073 	tsteq	sp, #115	; 0x73
    1a8c:	0100000e 	tsteq	r0, lr
    1a90:	00970317 	addseq	r0, r7, r7, lsl r3
    1a94:	0f0a0000 	svceq	0x000a0000
    1a98:	00d62000 	sbcseq	r2, r6, r0
    1a9c:	9c010000 	stcls	0, cr0, [r1], {-0}
    1aa0:	000009f2 	strdeq	r0, [r0], -r2
    1aa4:	00102018 	andseq	r2, r0, r8, lsl r0
    1aa8:	03170100 	tsteq	r7, #0, 2
    1aac:	0000060d 	andeq	r0, r0, sp, lsl #12
    1ab0:	186c9102 	stmdane	ip!, {r1, r8, ip, pc}^
    1ab4:	00001031 	andeq	r1, r0, r1, lsr r0
    1ab8:	97031701 	strls	r1, [r3, -r1, lsl #14]
    1abc:	02000000 	andeq	r0, r0, #0
    1ac0:	f4196b91 			; <UNDEFINED> instruction: 0xf4196b91
    1ac4:	01000000 	mrseq	r0, (UNDEF: 0)
    1ac8:	00bd0319 	adcseq	r0, sp, r9, lsl r3
    1acc:	91020000 	mrsls	r0, (UNDEF: 2)
    1ad0:	5a1d0074 	bpl	741ca8 <startup-0x1f8be358>
    1ad4:	0100000f 	tsteq	r0, pc
    1ad8:	009702ce 	addseq	r0, r7, lr, asr #5
    1adc:	0d280000 	stceq	0, cr0, [r8, #-0]
    1ae0:	01e22000 	mvneq	r2, r0
    1ae4:	9c010000 	stcls	0, cr0, [r1], {-0}
    1ae8:	00000a3a 	andeq	r0, r0, sl, lsr sl
    1aec:	00102018 	andseq	r2, r0, r8, lsl r0
    1af0:	02ce0100 	sbceq	r0, lr, #0, 2
    1af4:	0000060d 	andeq	r0, r0, sp, lsl #12
    1af8:	18649102 	stmdane	r4!, {r1, r8, ip, pc}^
    1afc:	00000f09 	andeq	r0, r0, r9, lsl #30
    1b00:	3a02ce01 	bcc	b530c <startup-0x1ff4acf4>
    1b04:	0200000a 	andeq	r0, r0, #10
    1b08:	65196091 	ldrvs	r6, [r9, #-145]	; 0xffffff6f
    1b0c:	01000010 	tsteq	r0, r0, lsl r0
    1b10:	009702d0 			; <UNDEFINED> instruction: 0x009702d0
    1b14:	91020000 	mrsls	r0, (UNDEF: 2)
    1b18:	041b006f 	ldreq	r0, [fp], #-111	; 0xffffff91
    1b1c:	0000051d 	andeq	r0, r0, sp, lsl r5
    1b20:	000de21a 	andeq	lr, sp, sl, lsl r2
    1b24:	02970100 	addseq	r0, r7, #0, 2
    1b28:	20000c60 	andcs	r0, r0, r0, ror #24
    1b2c:	000000c8 	andeq	r0, r0, r8, asr #1
    1b30:	0a759c01 	beq	1d68b3c <startup-0x1e2974c4>
    1b34:	20180000 	andscs	r0, r8, r0
    1b38:	01000010 	tsteq	r0, r0, lsl r0
    1b3c:	060d0297 			; <UNDEFINED> instruction: 0x060d0297
    1b40:	91020000 	mrsls	r0, (UNDEF: 2)
    1b44:	0e6f1874 	mcreq	8, 3, r1, cr15, cr4, {3}
    1b48:	97010000 	strls	r0, [r1, -r0]
    1b4c:	00014202 	andeq	r4, r1, r2, lsl #4
    1b50:	73910200 	orrsvc	r0, r1, #0, 4
    1b54:	0fd91a00 	svceq	0x00d91a00
    1b58:	78010000 	stmdavc	r1, {}	; <UNPREDICTABLE>
    1b5c:	000c2002 	andeq	r2, ip, r2
    1b60:	00004020 	andeq	r4, r0, r0, lsr #32
    1b64:	aa9c0100 	bge	fe701f6c <GPIO_Ports+0xde6fdfc4>
    1b68:	1800000a 	stmdane	r0, {r1, r3}
    1b6c:	00001020 	andeq	r1, r0, r0, lsr #32
    1b70:	0d027801 	stceq	8, cr7, [r2, #-4]
    1b74:	02000006 	andeq	r0, r0, #6
    1b78:	6f187491 	svcvs	0x00187491
    1b7c:	0100000e 	tsteq	r0, lr
    1b80:	01420278 	hvceq	8232	; 0x2028
    1b84:	91020000 	mrsls	r0, (UNDEF: 2)
    1b88:	261a0073 			; <UNDEFINED> instruction: 0x261a0073
    1b8c:	0100000f 	tsteq	r0, pc
    1b90:	0bae025e 	bleq	feb82510 <GPIO_Ports+0xdeb7e568>
    1b94:	00722000 	rsbseq	r2, r2, r0
    1b98:	9c010000 	stcls	0, cr0, [r1], {-0}
    1b9c:	00000ad0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    1ba0:	000e1618 	andeq	r1, lr, r8, lsl r6
    1ba4:	025e0100 	subseq	r0, lr, #0, 2
    1ba8:	00000097 	muleq	r0, r7, r0
    1bac:	00779102 	rsbseq	r9, r7, r2, lsl #2
    1bb0:	000da21a 	andeq	sl, sp, sl, lsl r2
    1bb4:	021c0100 	andseq	r0, ip, #0, 2
    1bb8:	20000b5c 	andcs	r0, r0, ip, asr fp
    1bbc:	00000052 	andeq	r0, r0, r2, asr r0
    1bc0:	0af69c01 	beq	ffda8bcc <GPIO_Ports+0xdfda4c24>
    1bc4:	fa180000 	blx	601bcc <startup-0x1f9fe434>
    1bc8:	0100000e 	tsteq	r0, lr
    1bcc:	0af6021c 	beq	ffd82444 <GPIO_Ports+0xdfd7e49c>
    1bd0:	91020000 	mrsls	r0, (UNDEF: 2)
    1bd4:	041b0074 	ldreq	r0, [fp], #-116	; 0xffffff8c
    1bd8:	00000431 	andeq	r0, r0, r1, lsr r4
    1bdc:	0010b41a 	andseq	fp, r0, sl, lsl r4
    1be0:	01c00100 	biceq	r0, r0, r0, lsl #2
    1be4:	200009ac 	andcs	r0, r0, ip, lsr #19
    1be8:	000001b0 			; <UNDEFINED> instruction: 0x000001b0
    1bec:	0b319c01 	bleq	c68bf8 <startup-0x1f397408>
    1bf0:	bd180000 	ldclt	0, cr0, [r8, #-0]
    1bf4:	0100000d 	tsteq	r0, sp
    1bf8:	0b3101c0 	bleq	c42300 <startup-0x1f3bdd00>
    1bfc:	91020000 	mrsls	r0, (UNDEF: 2)
    1c00:	10911964 	addsne	r1, r1, r4, ror #18
    1c04:	c2010000 	andgt	r0, r1, #0
    1c08:	0000bd01 	andeq	fp, r0, r1, lsl #26
    1c0c:	6c910200 	lfmvs	f0, 4, [r1], {0}
    1c10:	b1041b00 	tstlt	r4, r0, lsl #22
    1c14:	1e000004 	cdpne	0, 0, cr0, cr0, cr4, {0}
    1c18:	00000f6e 	andeq	r0, r0, lr, ror #30
    1c1c:	0097d801 	addseq	sp, r7, r1, lsl #16
    1c20:	07e80000 	strbeq	r0, [r8, r0]!
    1c24:	01c42000 	biceq	r2, r4, r0
    1c28:	9c010000 	stcls	0, cr0, [r1], {-0}
    1c2c:	00000b89 	andeq	r0, r0, r9, lsl #23
    1c30:	0010201f 	andseq	r2, r0, pc, lsl r0
    1c34:	0dd80100 	ldfeqe	f0, [r8]
    1c38:	02000006 	andeq	r0, r0, #6
    1c3c:	fa1f6c91 	blx	7dce88 <startup-0x1f823178>
    1c40:	0100000e 	tsteq	r0, lr
    1c44:	000af6d8 	ldrdeq	pc, [sl], -r8
    1c48:	68910200 	ldmvs	r1, {r9}
    1c4c:	000e5920 	andeq	r5, lr, r0, lsr #18
    1c50:	97da0100 	ldrbls	r0, [sl, r0, lsl #2]
    1c54:	02000000 	andeq	r0, r0, #0
    1c58:	c3207791 			; <UNDEFINED> instruction: 0xc3207791
    1c5c:	01000010 	tsteq	r0, r0, lsl r0
    1c60:	0000bddb 	ldrdeq	fp, [r0], -fp	; <UNPREDICTABLE>
    1c64:	70910200 	addsvc	r0, r1, r0, lsl #4
    1c68:	0d7f2100 	ldfeqe	f2, [pc, #-0]	; 1c70 <startup-0x1fffe390>
    1c6c:	a7010000 	strge	r0, [r1, -r0]
    1c70:	20000798 	mulcs	r0, r8, r7
    1c74:	00000050 	andeq	r0, r0, r0, asr r0
    1c78:	201f9c01 	andscs	r9, pc, r1, lsl #24
    1c7c:	01000010 	tsteq	r0, r0, lsl r0
    1c80:	00060da7 	andeq	r0, r6, r7, lsr #27
    1c84:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    1c88:	06230000 	strteq	r0, [r3], -r0
    1c8c:	00040000 	andeq	r0, r4, r0
    1c90:	000004a3 	andeq	r0, r0, r3, lsr #9
    1c94:	04b80104 	ldrteq	r0, [r8], #260	; 0x104
    1c98:	e60c0000 	str	r0, [ip], -r0
    1c9c:	07000011 	smladeq	r0, r1, r0, r0
    1ca0:	6c000004 	stcvs	0, cr0, [r0], {4}
    1ca4:	0e200019 	miaeq	acc0, r9, r0
    1ca8:	cd000005 	stcgt	0, cr0, [r0, #-20]	; 0xffffffec
    1cac:	02000006 	andeq	r0, r0, #6
    1cb0:	02db0601 	sbcseq	r0, fp, #1048576	; 0x100000
    1cb4:	7e030000 	cdpvc	0, 0, cr0, cr3, cr0, {0}
    1cb8:	02000001 	andeq	r0, r0, #1
    1cbc:	0000372b 	andeq	r3, r0, fp, lsr #14
    1cc0:	08010200 	stmdaeq	r1, {r9}
    1cc4:	000002d9 	ldrdeq	r0, [r0], -r9
    1cc8:	74050202 	strvc	r0, [r5], #-514	; 0xfffffdfe
    1ccc:	0300000b 	movweq	r0, #11
    1cd0:	0000043c 	andeq	r0, r0, ip, lsr r4
    1cd4:	00503902 	subseq	r3, r0, r2, lsl #18
    1cd8:	02020000 	andeq	r0, r2, #0
    1cdc:	000c9c07 	andeq	r9, ip, r7, lsl #24
    1ce0:	0d180300 	ldceq	3, cr0, [r8, #-0]
    1ce4:	4d020000 	stcmi	0, cr0, [r2, #-0]
    1ce8:	00000062 	andeq	r0, r0, r2, rrx
    1cec:	85050402 	strhi	r0, [r5, #-1026]	; 0xfffffbfe
    1cf0:	03000007 	movweq	r0, #7
    1cf4:	00000759 	andeq	r0, r0, r9, asr r7
    1cf8:	00744f02 	rsbseq	r4, r4, r2, lsl #30
    1cfc:	04020000 	streq	r0, [r2], #-0
    1d00:	0009db07 	andeq	sp, r9, r7, lsl #22
    1d04:	05080200 	streq	r0, [r8, #-512]	; 0xfffffe00
    1d08:	00000780 	andeq	r0, r0, r0, lsl #15
    1d0c:	d6070802 	strle	r0, [r7], -r2, lsl #16
    1d10:	04000009 	streq	r0, [r0], #-9
    1d14:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    1d18:	04020074 	streq	r0, [r2], #-116	; 0xffffff8c
    1d1c:	0009e007 	andeq	lr, r9, r7
    1d20:	01800300 	orreq	r0, r0, r0, lsl #6
    1d24:	18030000 	stmdane	r3, {}	; <UNPREDICTABLE>
    1d28:	0000002c 	andeq	r0, r0, ip, lsr #32
    1d2c:	00043e03 	andeq	r3, r4, r3, lsl #28
    1d30:	45240300 	strmi	r0, [r4, #-768]!	; 0xfffffd00
    1d34:	05000000 	streq	r0, [r0, #-0]
    1d38:	000000a2 	andeq	r0, r0, r2, lsr #1
    1d3c:	000d1a03 	andeq	r1, sp, r3, lsl #20
    1d40:	572c0300 	strpl	r0, [ip, -r0, lsl #6]!
    1d44:	05000000 	streq	r0, [r0, #-0]
    1d48:	000000b2 	strheq	r0, [r0], -r2
    1d4c:	00075b03 	andeq	r5, r7, r3, lsl #22
    1d50:	69300300 	ldmdbvs	r0!, {r8, r9}
    1d54:	05000000 	streq	r0, [r0, #-0]
    1d58:	000000c2 	andeq	r0, r0, r2, asr #1
    1d5c:	000c1706 	andeq	r1, ip, r6, lsl #14
    1d60:	06fa0400 	ldrbteq	r0, [sl], r0, lsl #8
    1d64:	000000bd 	strheq	r0, [r0], -sp
    1d68:	00066907 	andeq	r6, r6, r7, lsl #18
    1d6c:	c23b0500 	eorsgt	r0, fp, #0, 10
    1d70:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    1d74:	00370107 	eorseq	r0, r7, r7, lsl #2
    1d78:	5f060000 	svcpl	0x00060000
    1d7c:	00010403 	andeq	r0, r1, r3, lsl #8
    1d80:	091d0900 	ldmdbeq	sp, {r8, fp}
    1d84:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    1d88:	00000bb6 			; <UNDEFINED> instruction: 0x00000bb6
    1d8c:	280a0001 	stmdacs	sl, {r0}
    1d90:	9005c306 	andls	ip, r5, r6, lsl #6
    1d94:	0b000001 	bleq	1da0 <startup-0x1fffe260>
    1d98:	00000c4c 	andeq	r0, r0, ip, asr #24
    1d9c:	cd05c506 	cfstr32gt	mvfx12, [r5, #-24]	; 0xffffffe8
    1da0:	00000000 	andeq	r0, r0, r0
    1da4:	000a970b 	andeq	r9, sl, fp, lsl #14
    1da8:	05c60600 	strbeq	r0, [r6, #1536]	; 0x600
    1dac:	000000cd 	andeq	r0, r0, sp, asr #1
    1db0:	071a0b04 	ldreq	r0, [sl, -r4, lsl #22]
    1db4:	c7060000 	strgt	r0, [r6, -r0]
    1db8:	0000cd05 	andeq	ip, r0, r5, lsl #26
    1dbc:	a80b0800 	stmdage	fp, {fp}
    1dc0:	06000007 	streq	r0, [r0], -r7
    1dc4:	00cd05c8 	sbceq	r0, sp, r8, asr #11
    1dc8:	0c0c0000 	stceq	0, cr0, [ip], {-0}
    1dcc:	00524449 	subseq	r4, r2, r9, asr #8
    1dd0:	cd05c906 	vstrgt.16	s24, [r5, #-12]	; <UNPREDICTABLE>
    1dd4:	10000000 	andne	r0, r0, r0
    1dd8:	52444f0c 	subpl	r4, r4, #12, 30	; 0x30
    1ddc:	05ca0600 	strbeq	r0, [sl, #1536]	; 0x600
    1de0:	000000cd 	andeq	r0, r0, sp, asr #1
    1de4:	07ea0b14 			; <UNDEFINED> instruction: 0x07ea0b14
    1de8:	cb060000 	blgt	181df0 <startup-0x1fe7e210>
    1dec:	0000ad05 	andeq	sl, r0, r5, lsl #26
    1df0:	e40b1800 	str	r1, [fp], #-2048	; 0xfffff800
    1df4:	06000007 	streq	r0, [r0], -r7
    1df8:	00ad05cc 	adceq	r0, sp, ip, asr #11
    1dfc:	0b1a0000 	bleq	681e04 <startup-0x1f97e1fc>
    1e00:	000006fa 	strdeq	r0, [r0], -sl
    1e04:	cd05cd06 	stcgt	13, cr12, [r5, #-24]	; 0xffffffe8
    1e08:	1c000000 	stcne	0, cr0, [r0], {-0}
    1e0c:	5246410c 	subpl	r4, r6, #12, 2
    1e10:	05ce0600 	strbeq	r0, [lr, #1536]	; 0x600
    1e14:	000001a0 	andeq	r0, r0, r0, lsr #3
    1e18:	cd0d0020 	stcgt	0, cr0, [sp, #-128]	; 0xffffff80
    1e1c:	a0000000 	andge	r0, r0, r0
    1e20:	0e000001 	cdpeq	0, 0, cr0, cr0, cr1, {0}
    1e24:	00000090 	muleq	r0, r0, r0
    1e28:	90050001 	andls	r0, r5, r1
    1e2c:	0f000001 	svceq	0x00000001
    1e30:	00000bf7 	strdeq	r0, [r0], -r7
    1e34:	0405cf06 	streq	ip, [r5], #-3846	; 0xfffff0fa
    1e38:	10000001 	andne	r0, r0, r1
    1e3c:	00370107 	eorseq	r0, r7, r7, lsl #2
    1e40:	42070000 	andmi	r0, r7, #0
    1e44:	000001d7 	ldrdeq	r0, [r0], -r7
    1e48:	0006db09 	andeq	sp, r6, r9, lsl #22
    1e4c:	81090000 	mrshi	r0, (UNDEF: 9)
    1e50:	01000005 	tsteq	r0, r5
    1e54:	00020209 	andeq	r0, r2, r9, lsl #4
    1e58:	27090200 	strcs	r0, [r9, -r0, lsl #4]
    1e5c:	03000002 	movweq	r0, #2
    1e60:	0a780300 	beq	1e02a68 <startup-0x1e1fd598>
    1e64:	47070000 	strmi	r0, [r7, -r0]
    1e68:	000001b1 			; <UNDEFINED> instruction: 0x000001b1
    1e6c:	37010710 	smladcc	r1, r0, r7, r0
    1e70:	07000000 	streq	r0, [r0, -r0]
    1e74:	0001fc4f 	andeq	pc, r1, pc, asr #24
    1e78:	03170900 	tsteq	r7, #0, 18
    1e7c:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    1e80:	0000026c 	andeq	r0, r0, ip, ror #4
    1e84:	0c030001 	stceq	0, cr0, [r3], {1}
    1e88:	07000001 	streq	r0, [r0, -r1]
    1e8c:	0001e252 	andeq	lr, r1, r2, asr r2
    1e90:	01071000 	mrseq	r1, (UNDEF: 7)
    1e94:	00000037 	andeq	r0, r0, r7, lsr r0
    1e98:	022d5a07 	eoreq	r5, sp, #28672	; 0x7000
    1e9c:	47090000 	strmi	r0, [r9, -r0]
    1ea0:	00000004 	andeq	r0, r0, r4
    1ea4:	00076409 	andeq	r6, r7, r9, lsl #8
    1ea8:	6f090100 	svcvs	0x00090100
    1eac:	0200000d 	andeq	r0, r0, #13
    1eb0:	0007f009 	andeq	pc, r7, r9
    1eb4:	03000300 	movweq	r0, #768	; 0x300
    1eb8:	00000aed 	andeq	r0, r0, sp, ror #21
    1ebc:	02075f07 	andeq	r5, r7, #7, 30
    1ec0:	07100000 	ldreq	r0, [r0, -r0]
    1ec4:	00003701 	andeq	r3, r0, r1, lsl #14
    1ec8:	586e0700 	stmdapl	lr!, {r8, r9, sl}^
    1ecc:	09000002 	stmdbeq	r0, {r1}
    1ed0:	000000a7 	andeq	r0, r0, r7, lsr #1
    1ed4:	0c710900 			; <UNDEFINED> instruction: 0x0c710900
    1ed8:	09010000 	stmdbeq	r1, {}	; <UNPREDICTABLE>
    1edc:	000001a6 	andeq	r0, r0, r6, lsr #3
    1ee0:	b6030002 	strlt	r0, [r3], -r2
    1ee4:	07000003 	streq	r0, [r0, -r3]
    1ee8:	00023872 	andeq	r3, r2, r2, ror r8
    1eec:	01071000 	mrseq	r1, (UNDEF: 7)
    1ef0:	00000037 	andeq	r0, r0, r7, lsr r0
    1ef4:	027d7a07 	rsbseq	r7, sp, #28672	; 0x7000
    1ef8:	13090000 	movwne	r0, #36864	; 0x9000
    1efc:	00000011 	andeq	r0, r0, r1, lsl r0
    1f00:	0010d309 	andseq	sp, r0, r9, lsl #6
    1f04:	03000100 	movweq	r0, #256	; 0x100
    1f08:	000011c0 	andeq	r1, r0, r0, asr #3
    1f0c:	02637d07 	rsbeq	r7, r3, #448	; 0x1c0
    1f10:	08110000 	ldmdaeq	r1, {}	; <UNPREDICTABLE>
    1f14:	02cd8407 	sbceq	r8, sp, #117440512	; 0x7000000
    1f18:	11120000 	tstne	r2, r0
    1f1c:	0700000b 	streq	r0, [r0, -fp]
    1f20:	0000c286 	andeq	ip, r0, r6, lsl #5
    1f24:	3c120000 	ldccc	0, cr0, [r2], {-0}
    1f28:	0700000a 	streq	r0, [r0, -sl]
    1f2c:	0001d789 	andeq	sp, r1, r9, lsl #15
    1f30:	4c120400 	cfldrsmi	mvf0, [r2], {-0}
    1f34:	07000008 	streq	r0, [r0, -r8]
    1f38:	00022d8c 	andeq	r2, r2, ip, lsl #27
    1f3c:	4e120500 	cfmul32mi	mvfx0, mvfx2, mvfx0
    1f40:	07000007 	streq	r0, [r0, -r7]
    1f44:	0001fc8f 	andeq	pc, r1, pc, lsl #25
    1f48:	42120600 	andsmi	r0, r2, #0, 12
    1f4c:	0700000b 	streq	r0, [r0, -fp]
    1f50:	00025892 	muleq	r2, r2, r8
    1f54:	03000700 	movweq	r0, #1792	; 0x700
    1f58:	0000027a 	andeq	r0, r0, sl, ror r2
    1f5c:	02889407 	addeq	r9, r8, #117440512	; 0x7000000
    1f60:	6d130000 	ldcvs	0, cr0, [r3, #-0]
    1f64:	01000012 	tsteq	r0, r2, lsl r0
    1f68:	1dd60243 	lfmne	f0, 2, [r6, #268]	; 0x10c
    1f6c:	00a42000 	adceq	r2, r4, r0
    1f70:	9c010000 	stcls	0, cr0, [r1], {-0}
    1f74:	0000033a 	andeq	r0, r0, sl, lsr r3
    1f78:	0011e014 	andseq	lr, r1, r4, lsl r0
    1f7c:	02430100 	subeq	r0, r3, #0, 2
    1f80:	0000033a 	andeq	r0, r0, sl, lsr r3
    1f84:	146c9102 	strbtne	r9, [ip], #-258	; 0xfffffefe
    1f88:	0000118b 	andeq	r1, r0, fp, lsl #3
    1f8c:	a2024301 	andge	r4, r2, #67108864	; 0x4000000
    1f90:	02000000 	andeq	r0, r0, #0
    1f94:	ef146a91 	svc	0x00146a91
    1f98:	01000010 	tsteq	r0, r0, lsl r0
    1f9c:	00970243 	addseq	r0, r7, r3, asr #4
    1fa0:	91020000 	mrsls	r0, (UNDEF: 2)
    1fa4:	10f71569 	rscsne	r1, r7, r9, ror #10
    1fa8:	45010000 	strmi	r0, [r1, #-0]
    1fac:	0000c202 	andeq	ip, r0, r2, lsl #4
    1fb0:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    1fb4:	00126615 	andseq	r6, r2, r5, lsl r6
    1fb8:	02460100 	subeq	r0, r6, #0, 2
    1fbc:	000000c2 	andeq	r0, r0, r2, asr #1
    1fc0:	00709102 	rsbseq	r9, r0, r2, lsl #2
    1fc4:	01a50416 			; <UNDEFINED> instruction: 0x01a50416
    1fc8:	56130000 	ldrpl	r0, [r3], -r0
    1fcc:	01000012 	tsteq	r0, r2, lsl r0
    1fd0:	1db201f0 	ldfnes	f0, [r2, #960]!	; 0x3c0
    1fd4:	00242000 	eoreq	r2, r4, r0
    1fd8:	9c010000 	stcls	0, cr0, [r1], {-0}
    1fdc:	00000375 	andeq	r0, r0, r5, ror r3
    1fe0:	0011e014 	andseq	lr, r1, r4, lsl r0
    1fe4:	01f00100 	mvnseq	r0, r0, lsl #2
    1fe8:	0000033a 	andeq	r0, r0, sl, lsr r3
    1fec:	14749102 	ldrbtne	r9, [r4], #-258	; 0xfffffefe
    1ff0:	00000b11 	andeq	r0, r0, r1, lsl fp
    1ff4:	a201f001 	andge	pc, r1, #1
    1ff8:	02000000 	andeq	r0, r0, #0
    1ffc:	13007291 	movwne	r7, #657	; 0x291
    2000:	000011d5 	ldrdeq	r1, [r0], -r5
    2004:	9401e001 	strls	lr, [r1], #-1
    2008:	1e20001d 	miane	acc0, sp, r0
    200c:	01000000 	mrseq	r0, (UNDEF: 0)
    2010:	0003aa9c 	muleq	r3, ip, sl
    2014:	11e01400 	mvnne	r1, r0, lsl #8
    2018:	e0010000 	and	r0, r1, r0
    201c:	00033a01 	andeq	r3, r3, r1, lsl #20
    2020:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    2024:	00118314 	andseq	r8, r1, r4, lsl r3
    2028:	01e00100 	mvneq	r0, r0, lsl #2
    202c:	000000a2 	andeq	r0, r0, r2, lsr #1
    2030:	00729102 	rsbseq	r9, r2, r2, lsl #2
    2034:	00111d13 	andseq	r1, r1, r3, lsl sp
    2038:	01c70100 	biceq	r0, r7, r0, lsl #2
    203c:	20001d5a 	andcs	r1, r0, sl, asr sp
    2040:	0000003a 	andeq	r0, r0, sl, lsr r0
    2044:	03ee9c01 	mvneq	r9, #256	; 0x100
    2048:	e0140000 	ands	r0, r4, r0
    204c:	01000011 	tsteq	r0, r1, lsl r0
    2050:	033a01c7 	teqeq	sl, #-1073741775	; 0xc0000031
    2054:	91020000 	mrsls	r0, (UNDEF: 2)
    2058:	0b111474 	bleq	447230 <startup-0x1fbb8dd0>
    205c:	c7010000 	strgt	r0, [r1, -r0]
    2060:	0000a201 	andeq	sl, r0, r1, lsl #4
    2064:	72910200 	addsvc	r0, r1, #0, 4
    2068:	00110c14 	andseq	r0, r1, r4, lsl ip
    206c:	01c70100 	biceq	r0, r7, r0, lsl #2
    2070:	0000027d 	andeq	r0, r0, sp, ror r2
    2074:	00719102 	rsbseq	r9, r1, r2, lsl #2
    2078:	00114213 	andseq	r4, r1, r3, lsl r2
    207c:	01b10100 			; <UNDEFINED> instruction: 0x01b10100
    2080:	20001d3c 	andcs	r1, r0, ip, lsr sp
    2084:	0000001e 	andeq	r0, r0, lr, lsl r0
    2088:	04239c01 	strteq	r9, [r3], #-3073	; 0xfffff3ff
    208c:	e0140000 	ands	r0, r4, r0
    2090:	01000011 	tsteq	r0, r1, lsl r0
    2094:	033a01b1 	teqeq	sl, #1073741868	; 0x4000002c
    2098:	91020000 	mrsls	r0, (UNDEF: 2)
    209c:	0b111474 	bleq	447274 <startup-0x1fbb8d8c>
    20a0:	b1010000 	mrslt	r0, (UNDEF: 1)
    20a4:	0000a201 	andeq	sl, r0, r1, lsl #4
    20a8:	72910200 	addsvc	r0, r1, #0, 4
    20ac:	112b1300 			; <UNDEFINED> instruction: 0x112b1300
    20b0:	9c010000 	stcls	0, cr0, [r1], {-0}
    20b4:	001d1e01 	andseq	r1, sp, r1, lsl #28
    20b8:	00001e20 	andeq	r1, r0, r0, lsr #28
    20bc:	589c0100 	ldmpl	ip, {r8}
    20c0:	14000004 	strne	r0, [r0], #-4
    20c4:	000011e0 	andeq	r1, r0, r0, ror #3
    20c8:	3a019c01 	bcc	690d4 <startup-0x1ff96f2c>
    20cc:	02000003 	andeq	r0, r0, #3
    20d0:	11147491 			; <UNDEFINED> instruction: 0x11147491
    20d4:	0100000b 	tsteq	r0, fp
    20d8:	00a2019c 	umlaleq	r0, r2, ip, r1
    20dc:	91020000 	mrsls	r0, (UNDEF: 2)
    20e0:	db170072 	blle	5c22b0 <startup-0x1fa3dd50>
    20e4:	01000010 	tsteq	r0, r0, lsl r0
    20e8:	00a20188 	adceq	r0, r2, r8, lsl #3
    20ec:	1d080000 	stcne	0, cr0, [r8, #-0]
    20f0:	00162000 	andseq	r2, r6, r0
    20f4:	9c010000 	stcls	0, cr0, [r1], {-0}
    20f8:	00000482 	andeq	r0, r0, r2, lsl #9
    20fc:	0011e014 	andseq	lr, r1, r4, lsl r0
    2100:	01880100 	orreq	r0, r8, r0, lsl #2
    2104:	0000033a 	andeq	r0, r0, sl, lsr r3
    2108:	00749102 	rsbseq	r9, r4, r2, lsl #2
    210c:	00127e17 	andseq	r7, r2, r7, lsl lr
    2110:	016e0100 	cmneq	lr, r0, lsl #2
    2114:	00000097 	muleq	r0, r7, r0
    2118:	20001cc6 	andcs	r1, r0, r6, asr #25
    211c:	00000042 	andeq	r0, r0, r2, asr #32
    2120:	04ca9c01 	strbeq	r9, [sl], #3073	; 0xc01
    2124:	e0140000 	ands	r0, r4, r0
    2128:	01000011 	tsteq	r0, r1, lsl r0
    212c:	033a016e 	teqeq	sl, #-2147483621	; 0x8000001b
    2130:	91020000 	mrsls	r0, (UNDEF: 2)
    2134:	0b11146c 	bleq	4472ec <startup-0x1fbb8d14>
    2138:	6e010000 	cdpvs	0, 0, cr0, cr1, cr0, {0}
    213c:	0000a201 	andeq	sl, r0, r1, lsl #4
    2140:	6a910200 	bvs	fe442948 <GPIO_Ports+0xde43e9a0>
    2144:	000fc715 	andeq	ip, pc, r5, lsl r7	; <UNPREDICTABLE>
    2148:	01700100 	cmneq	r0, r0, lsl #2
    214c:	00000097 	muleq	r0, r7, r0
    2150:	00779102 	rsbseq	r9, r7, r2, lsl #2
    2154:	00119a17 	andseq	r9, r1, r7, lsl sl
    2158:	015d0100 	cmpeq	sp, r0, lsl #2
    215c:	000000a2 	andeq	r0, r0, r2, lsr #1
    2160:	20001cb0 			; <UNDEFINED> instruction: 0x20001cb0
    2164:	00000016 	andeq	r0, r0, r6, lsl r0
    2168:	04f49c01 	ldrbteq	r9, [r4], #3073	; 0xc01
    216c:	e0140000 	ands	r0, r4, r0
    2170:	01000011 	tsteq	r0, r1, lsl r0
    2174:	033a015d 	teqeq	sl, #1073741847	; 0x40000017
    2178:	91020000 	mrsls	r0, (UNDEF: 2)
    217c:	5d170074 	ldcpl	0, cr0, [r7, #-464]	; 0xfffffe30
    2180:	01000011 	tsteq	r0, r1, lsl r0
    2184:	00970143 	addseq	r0, r7, r3, asr #2
    2188:	1c6e0000 	stclne	0, cr0, [lr], #-0
    218c:	00422000 	subeq	r2, r2, r0
    2190:	9c010000 	stcls	0, cr0, [r1], {-0}
    2194:	0000053c 	andeq	r0, r0, ip, lsr r5
    2198:	0011e014 	andseq	lr, r1, r4, lsl r0
    219c:	01430100 	mrseq	r0, (UNDEF: 83)
    21a0:	0000033a 	andeq	r0, r0, sl, lsr r3
    21a4:	146c9102 	strbtne	r9, [ip], #-258	; 0xfffffefe
    21a8:	00000b11 	andeq	r0, r0, r1, lsl fp
    21ac:	a2014301 	andge	r4, r1, #67108864	; 0x4000000
    21b0:	02000000 	andeq	r0, r0, #0
    21b4:	c7156a91 			; <UNDEFINED> instruction: 0xc7156a91
    21b8:	0100000f 	tsteq	r0, pc
    21bc:	00970145 	addseq	r0, r7, r5, asr #2
    21c0:	91020000 	mrsls	r0, (UNDEF: 2)
    21c4:	ad130077 	ldcge	0, cr0, [r3, #-476]	; 0xfffffe24
    21c8:	01000011 	tsteq	r0, r1, lsl r0
    21cc:	1c280115 	stfnes	f0, [r8], #-84	; 0xffffffac
    21d0:	00462000 	subeq	r2, r6, r0
    21d4:	9c010000 	stcls	0, cr0, [r1], {-0}
    21d8:	00000580 	andeq	r0, r0, r0, lsl #11
    21dc:	0011e014 	andseq	lr, r1, r4, lsl r0
    21e0:	01150100 	tsteq	r5, r0, lsl #2
    21e4:	0000033a 	andeq	r0, r0, sl, lsr r3
    21e8:	146c9102 	strbtne	r9, [ip], #-258	; 0xfffffefe
    21ec:	00000b11 	andeq	r0, r0, r1, lsl fp
    21f0:	a2011501 	andge	r1, r1, #4194304	; 0x400000
    21f4:	02000000 	andeq	r0, r0, #0
    21f8:	74186a91 	ldrvc	r6, [r8], #-2705	; 0xfffff56f
    21fc:	0100706d 	tsteq	r0, sp, rrx
    2200:	00cd0117 	sbceq	r0, sp, r7, lsl r1
    2204:	91020000 	mrsls	r0, (UNDEF: 2)
    2208:	fc190074 	ldc2	0, cr0, [r9], {116}	; 0x74
    220c:	01000010 	tsteq	r0, r0, lsl r0
    2210:	001bf4fe 			; <UNDEFINED> instruction: 0x001bf4fe
    2214:	00003420 	andeq	r3, r0, r0, lsr #8
    2218:	a49c0100 	ldrge	r0, [ip], #256	; 0x100
    221c:	1a000005 	bne	2238 <startup-0x1fffddc8>
    2220:	00001173 	andeq	r1, r0, r3, ror r1
    2224:	05a4fe01 	streq	pc, [r4, #3585]!	; 0xe01
    2228:	91020000 	mrsls	r0, (UNDEF: 2)
    222c:	04160074 	ldreq	r0, [r6], #-116	; 0xffffff8c
    2230:	000002cd 	andeq	r0, r0, sp, asr #5
    2234:	00113819 	andseq	r3, r1, r9, lsl r8
    2238:	dcca0100 	stflee	f0, [sl], {0}
    223c:	1820001a 	stmdane	r0!, {r1, r3, r4}
    2240:	01000001 	tsteq	r0, r1
    2244:	0006069c 	muleq	r6, ip, r6
    2248:	11e01a00 	mvnne	r1, r0, lsl #20
    224c:	ca010000 	bgt	42254 <startup-0x1ffbddac>
    2250:	0000033a 	andeq	r0, r0, sl, lsr r3
    2254:	1a649102 	bne	1926664 <startup-0x1e6d999c>
    2258:	00001173 	andeq	r1, r0, r3, ror r1
    225c:	05a4ca01 	streq	ip, [r4, #2561]!	; 0xa01
    2260:	91020000 	mrsls	r0, (UNDEF: 2)
    2264:	10cc1b60 	sbcne	r1, ip, r0, ror #22
    2268:	cc010000 	stcgt	0, cr0, [r1], {-0}
    226c:	000000c2 	andeq	r0, r0, r2, asr #1
    2270:	1c749102 	ldfnep	f1, [r4], #-8
    2274:	00736f70 	rsbseq	r6, r3, r0, ror pc
    2278:	00c2cc01 	sbceq	ip, r2, r1, lsl #24
    227c:	91020000 	mrsls	r0, (UNDEF: 2)
    2280:	11ca1b70 	bicne	r1, sl, r0, ror fp
    2284:	cc010000 	stcgt	0, cr0, [r1], {-0}
    2288:	000000c2 	andeq	r0, r0, r2, asr #1
    228c:	006c9102 	rsbeq	r9, ip, r2, lsl #2
    2290:	0011511d 	andseq	r5, r1, sp, lsl r1
    2294:	6c7f0100 	ldfvse	f0, [pc], #-0	; 229c <startup-0x1fffdd64>
    2298:	70200019 	eorvc	r0, r0, r9, lsl r0
    229c:	01000001 	tsteq	r0, r1
    22a0:	11e01a9c 			; <UNDEFINED> instruction: 0x11e01a9c
    22a4:	7f010000 	svcvc	0x00010000
    22a8:	0000033a 	andeq	r0, r0, sl, lsr r3
    22ac:	00749102 	rsbseq	r9, r4, r2, lsl #2
    22b0:	00054a00 	andeq	r4, r5, r0, lsl #20
    22b4:	5f000400 	svcpl	0x00000400
    22b8:	04000006 	streq	r0, [r0], #-6
    22bc:	0004b801 	andeq	fp, r4, r1, lsl #16
    22c0:	12a00c00 	adcne	r0, r0, #0, 24
    22c4:	04070000 	streq	r0, [r7], #-0
    22c8:	1e7c0000 	cdpne	0, 7, cr0, cr12, cr0, {0}
    22cc:	03d22000 	bicseq	r2, r2, #0
    22d0:	09780000 	ldmdbeq	r8!, {}^	; <UNPREDICTABLE>
    22d4:	01020000 	mrseq	r0, (UNDEF: 2)
    22d8:	0002db06 	andeq	sp, r2, r6, lsl #22
    22dc:	017e0300 	cmneq	lr, r0, lsl #6
    22e0:	2b020000 	blcs	822e8 <startup-0x1ff7dd18>
    22e4:	00000037 	andeq	r0, r0, r7, lsr r0
    22e8:	d9080102 	stmdble	r8, {r1, r8}
    22ec:	02000002 	andeq	r0, r0, #2
    22f0:	0b740502 	bleq	1d03700 <startup-0x1e2fc900>
    22f4:	3c030000 	stccc	0, cr0, [r3], {-0}
    22f8:	02000004 	andeq	r0, r0, #4
    22fc:	00005039 	andeq	r5, r0, r9, lsr r0
    2300:	07020200 	streq	r0, [r2, -r0, lsl #4]
    2304:	00000c9c 	muleq	r0, ip, ip
    2308:	000d1803 	andeq	r1, sp, r3, lsl #16
    230c:	624d0200 	subvs	r0, sp, #0, 4
    2310:	02000000 	andeq	r0, r0, #0
    2314:	07850504 	streq	r0, [r5, r4, lsl #10]
    2318:	59030000 	stmdbpl	r3, {}	; <UNPREDICTABLE>
    231c:	02000007 	andeq	r0, r0, #7
    2320:	0000744f 	andeq	r7, r0, pc, asr #8
    2324:	07040200 	streq	r0, [r4, -r0, lsl #4]
    2328:	000009db 	ldrdeq	r0, [r0], -fp
    232c:	80050802 	andhi	r0, r5, r2, lsl #16
    2330:	02000007 	andeq	r0, r0, #7
    2334:	09d60708 	ldmibeq	r6, {r3, r8, r9, sl}^
    2338:	04040000 	streq	r0, [r4], #-0
    233c:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
    2340:	07040200 	streq	r0, [r4, -r0, lsl #4]
    2344:	000009e0 	andeq	r0, r0, r0, ror #19
    2348:	00018003 	andeq	r8, r1, r3
    234c:	2c180300 	ldccs	3, cr0, [r8], {-0}
    2350:	03000000 	movweq	r0, #0
    2354:	0000043e 	andeq	r0, r0, lr, lsr r4
    2358:	00452403 	subeq	r2, r5, r3, lsl #8
    235c:	1a030000 	bne	c2364 <startup-0x1ff3dc9c>
    2360:	0300000d 	movweq	r0, #13
    2364:	0000572c 	andeq	r5, r0, ip, lsr #14
    2368:	00ad0500 	adceq	r0, sp, r0, lsl #10
    236c:	5b030000 	blpl	c2374 <startup-0x1ff3dc8c>
    2370:	03000007 	movweq	r0, #7
    2374:	00006930 	andeq	r6, r0, r0, lsr r9
    2378:	0c170600 	ldceq	6, cr0, [r7], {-0}
    237c:	fa040000 	blx	102384 <startup-0x1fefdc7c>
    2380:	0000b806 	andeq	fp, r0, r6, lsl #16
    2384:	06690700 	strbteq	r0, [r9], -r0, lsl #14
    2388:	3b050000 	blcc	142390 <startup-0x1febdc70>
    238c:	000000bd 	strheq	r0, [r0], -sp
    2390:	8d061408 	cfstrshi	mvf1, [r6, #-32]	; 0xffffffe0
    2394:	00000130 	andeq	r0, r0, r0, lsr r1
    2398:	00036909 	andeq	r6, r3, r9, lsl #18
    239c:	bd8f0600 	stclt	6, cr0, [pc]	; 23a4 <startup-0x1fffdc5c>
    23a0:	00000000 	andeq	r0, r0, r0
    23a4:	00049009 	andeq	r9, r4, r9
    23a8:	bd920600 	ldclt	6, cr0, [r2]
    23ac:	04000000 	streq	r0, [r0], #-0
    23b0:	4544490a 	strbmi	r4, [r4, #-2314]	; 0xfffff6f6
    23b4:	97950600 	ldrls	r0, [r5, r0, lsl #12]
    23b8:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    23bc:	5254520a 	subspl	r5, r4, #-1610612736	; 0xa0000000
    23c0:	97990600 	ldrls	r0, [r9, r0, lsl #12]
    23c4:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    23c8:	434c440a 	movtmi	r4, #50186	; 0xc40a
    23cc:	979d0600 	ldrls	r0, [sp, r0, lsl #12]
    23d0:	0a000000 	beq	23d8 <startup-0x1fffdc28>
    23d4:	0011a809 	andseq	sl, r1, r9, lsl #16
    23d8:	30a10600 	adccc	r0, r1, r0, lsl #12
    23dc:	0b000001 	bleq	23e8 <startup-0x1fffdc18>
    23e0:	00970b00 	addseq	r0, r7, r0, lsl #22
    23e4:	01400000 	mrseq	r0, (UNDEF: 64)
    23e8:	900c0000 	andls	r0, ip, r0
    23ec:	07000000 	streq	r0, [r0, -r0]
    23f0:	05500300 	ldrbeq	r0, [r0, #-768]	; 0xfffffd00
    23f4:	a3060000 	movwge	r0, #24576	; 0x6000
    23f8:	000000df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    23fc:	a8061408 	stmdage	r6, {r3, sl, ip}
    2400:	000001a8 	andeq	r0, r0, r8, lsr #3
    2404:	00036909 	andeq	r6, r3, r9, lsl #18
    2408:	bdaa0600 	stclt	6, cr0, [sl]
    240c:	00000000 	andeq	r0, r0, r0
    2410:	00049009 	andeq	r9, r4, r9
    2414:	bdad0600 	stclt	6, cr0, [sp]
    2418:	04000000 	streq	r0, [r0], #-0
    241c:	4544490a 	strbmi	r4, [r4, #-2314]	; 0xfffff6f6
    2420:	97b00600 	ldrls	r0, [r0, r0, lsl #12]!
    2424:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    2428:	5254520a 	subspl	r5, r4, #-1610612736	; 0xa0000000
    242c:	97b40600 	ldrls	r0, [r4, r0, lsl #12]!
    2430:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    2434:	434c440a 	movtmi	r4, #50186	; 0xc40a
    2438:	97b80600 	ldrls	r0, [r8, r0, lsl #12]!
    243c:	0a000000 	beq	2444 <startup-0x1fffdbbc>
    2440:	0011a809 	andseq	sl, r1, r9, lsl #16
    2444:	30bb0600 	adcscc	r0, fp, r0, lsl #12
    2448:	0b000001 	bleq	2454 <startup-0x1fffdbac>
    244c:	494d460a 	stmdbmi	sp, {r1, r3, r9, sl, lr}^
    2450:	97be0600 	ldrls	r0, [lr, r0, lsl #12]!
    2454:	13000000 	movwne	r0, #0
    2458:	09250300 	stmdbeq	r5!, {r8, r9}
    245c:	c1060000 	mrsgt	r0, (UNDEF: 6)
    2460:	0000014b 	andeq	r0, r0, fp, asr #2
    2464:	13070408 	movwne	r0, #29704	; 0x7408
    2468:	00000215 	andeq	r0, r0, r5, lsl r2
    246c:	00088d0d 	andeq	r8, r8, sp, lsl #26
    2470:	bd150700 	ldclt	7, cr0, [r5, #-0]
    2474:	04000000 	streq	r0, [r0], #-0
    2478:	0d001808 	stceq	8, cr1, [r0, #-32]	; 0xffffffe0
    247c:	00000137 	andeq	r0, r0, r7, lsr r1
    2480:	00bd1907 	adcseq	r1, sp, r7, lsl #18
    2484:	0a040000 	beq	10248c <startup-0x1fefdb74>
    2488:	490e000e 	stmdbmi	lr, {r1, r2, r3}
    248c:	1d070044 	stcne	0, cr0, [r7, #-272]	; 0xfffffef0
    2490:	000000bd 	strheq	r0, [r0], -sp
    2494:	00070704 	andeq	r0, r7, r4, lsl #14
    2498:	0001280d 	andeq	r2, r1, sp, lsl #16
    249c:	bd210700 	stclt	7, cr0, [r1, #-0]
    24a0:	04000000 	streq	r0, [r0], #-0
    24a4:	0d000601 	stceq	6, cr0, [r0, #-4]
    24a8:	000007ae 	andeq	r0, r0, lr, lsr #15
    24ac:	00bd2407 	adcseq	r2, sp, r7, lsl #8
    24b0:	03040000 	movweq	r0, #16384	; 0x4000
    24b4:	8d0d0003 	stchi	0, cr0, [sp, #-12]
    24b8:	07000000 	streq	r0, [r0, -r0]
    24bc:	0000bd27 	andeq	fp, r0, r7, lsr #26
    24c0:	00030400 	andeq	r0, r3, r0, lsl #8
    24c4:	89030000 	stmdbhi	r3, {}	; <UNPREDICTABLE>
    24c8:	07000004 	streq	r0, [r0, -r4]
    24cc:	0001b328 	andeq	fp, r1, r8, lsr #6
    24d0:	13d00f00 	bicsne	r0, r0, #0, 30
    24d4:	af010000 	svcge	0x00010000
    24d8:	00000097 	muleq	r0, r7, r0
    24dc:	20002230 	andcs	r2, r0, r0, lsr r2
    24e0:	0000001e 	andeq	r0, r0, lr, lsl r0
    24e4:	02489c01 	subeq	r9, r8, #256	; 0x100
    24e8:	6d100000 	ldcvs	0, cr0, [r0, #-0]
    24ec:	01006773 	tsteq	r0, r3, ror r7
    24f0:	000248af 	andeq	r4, r2, pc, lsr #17
    24f4:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    24f8:	a8041100 	stmdage	r4, {r8, ip}
    24fc:	0f000001 	svceq	0x00000001
    2500:	00001382 	andeq	r1, r0, r2, lsl #7
    2504:	00bda601 	adcseq	sl, sp, r1, lsl #12
    2508:	21f60000 	mvnscs	r0, r0
    250c:	003a2000 	eorseq	r2, sl, r0
    2510:	9c010000 	stcls	0, cr0, [r1], {-0}
    2514:	00000276 	andeq	r0, r0, r6, ror r2
    2518:	67736d10 			; <UNDEFINED> instruction: 0x67736d10
    251c:	48a60100 	stmiami	r6!, {r8}
    2520:	02000002 	andeq	r0, r0, #2
    2524:	0f007491 	svceq	0x00007491
    2528:	00001390 	muleq	r0, r0, r3
    252c:	00979501 	addseq	r9, r7, r1, lsl #10
    2530:	21bc0000 			; <UNDEFINED> instruction: 0x21bc0000
    2534:	003a2000 	eorseq	r2, sl, r0
    2538:	9c010000 	stcls	0, cr0, [r1], {-0}
    253c:	000002f2 	strdeq	r0, [r0], -r2
    2540:	67736d10 			; <UNDEFINED> instruction: 0x67736d10
    2544:	48950100 	ldmmi	r5, {r8}
    2548:	02000002 	andeq	r0, r0, #2
    254c:	5c126c91 	ldcpl	12, cr6, [r2], {145}	; 0x91
    2550:	01000013 	tsteq	r0, r3, lsl r0
    2554:	0002f295 	muleq	r2, r5, r2
    2558:	68910200 	ldmvs	r1, {r9}
    255c:	00137812 	andseq	r7, r3, r2, lsl r8
    2560:	f2950100 	vaddw.s16	q0, <illegal reg q2.5>, d0
    2564:	02000002 	andeq	r0, r0, #2
    2568:	ea126491 	b	49b7b4 <startup-0x1fb6484c>
    256c:	01000013 	tsteq	r0, r3, lsl r0
    2570:	0002f895 	muleq	r2, r5, r8
    2574:	60910200 	addsvs	r0, r1, r0, lsl #4
    2578:	0013f112 	andseq	pc, r3, r2, lsl r1	; <UNPREDICTABLE>
    257c:	f8950100 			; <UNDEFINED> instruction: 0xf8950100
    2580:	02000002 	andeq	r0, r0, #2
    2584:	71120091 			; <UNDEFINED> instruction: 0x71120091
    2588:	01000013 	tsteq	r0, r3, lsl r0
    258c:	0002f295 	muleq	r2, r5, r2
    2590:	04910200 	ldreq	r0, [r1], #512	; 0x200
    2594:	00131913 	andseq	r1, r3, r3, lsl r9
    2598:	f2960100 	vaddw.s16	q0, q3, d0
    259c:	02000002 	andeq	r0, r0, #2
    25a0:	11007491 			; <UNDEFINED> instruction: 0x11007491
    25a4:	00009704 	andeq	r9, r0, r4, lsl #14
    25a8:	a2041100 	andge	r1, r4, #0, 2
    25ac:	14000000 	strne	r0, [r0], #-0
    25b0:	000012fa 	strdeq	r1, [r0], -sl
    25b4:	21248601 			; <UNDEFINED> instruction: 0x21248601
    25b8:	00982000 	addseq	r2, r8, r0
    25bc:	9c010000 	stcls	0, cr0, [r1], {-0}
    25c0:	00000359 	andeq	r0, r0, r9, asr r3
    25c4:	67736d10 			; <UNDEFINED> instruction: 0x67736d10
    25c8:	59860100 	stmibpl	r6, {r8}
    25cc:	02000003 	andeq	r0, r0, #3
    25d0:	11126491 			; <UNDEFINED> instruction: 0x11126491
    25d4:	01000013 	tsteq	r0, r3, lsl r0
    25d8:	00009786 	andeq	r9, r0, r6, lsl #15
    25dc:	63910200 	orrsvs	r0, r1, #0, 4
    25e0:	00129512 	andseq	r9, r2, r2, lsl r5
    25e4:	97860100 	strls	r0, [r6, r0, lsl #2]
    25e8:	02000000 	andeq	r0, r0, #0
    25ec:	69106291 	ldmdbvs	r0, {r0, r4, r7, r9, sp, lr}
    25f0:	86010064 	strhi	r0, [r1], -r4, rrx
    25f4:	00000097 	muleq	r0, r7, r0
    25f8:	13619102 	cmnne	r1, #-2147483648	; 0x80000000
    25fc:	00000362 	andeq	r0, r0, r2, ror #6
    2600:	02158701 	andseq	r8, r5, #262144	; 0x40000
    2604:	91020000 	mrsls	r0, (UNDEF: 2)
    2608:	0411006c 	ldreq	r0, [r1], #-108	; 0xffffff94
    260c:	00000140 	andeq	r0, r0, r0, asr #2
    2610:	0013f814 	andseq	pc, r3, r4, lsl r8	; <UNPREDICTABLE>
    2614:	9c730100 	ldflse	f0, [r3], #-0
    2618:	88200020 	stmdahi	r0!, {r5}
    261c:	01000000 	mrseq	r0, (UNDEF: 0)
    2620:	0003ac9c 	muleq	r3, ip, ip
    2624:	736d1000 	cmnvc	sp, #0
    2628:	73010067 	movwvc	r0, #4199	; 0x1067
    262c:	00000359 	andeq	r0, r0, r9, asr r3
    2630:	12649102 	rsbne	r9, r4, #-2147483648	; 0x80000000
    2634:	00001311 	andeq	r1, r0, r1, lsl r3
    2638:	00977301 	addseq	r7, r7, r1, lsl #6
    263c:	91020000 	mrsls	r0, (UNDEF: 2)
    2640:	64691063 	strbtvs	r1, [r9], #-99	; 0xffffff9d
    2644:	97730100 	ldrbls	r0, [r3, -r0, lsl #2]!
    2648:	02000000 	andeq	r0, r0, #0
    264c:	62136291 	andsvs	r6, r3, #268435465	; 0x10000009
    2650:	01000003 	tsteq	r0, r3
    2654:	00021574 	andeq	r1, r2, r4, ror r5
    2658:	6c910200 	lfmvs	f0, 4, [r1], {0}
    265c:	13a70f00 			; <UNDEFINED> instruction: 0x13a70f00
    2660:	66010000 	strvs	r0, [r1], -r0
    2664:	00000097 	muleq	r0, r7, r0
    2668:	20002074 	andcs	r2, r0, r4, ror r0
    266c:	00000028 	andeq	r0, r0, r8, lsr #32
    2670:	03f09c01 	mvnseq	r9, #256	; 0x100
    2674:	6d100000 	ldcvs	0, cr0, [r0, #-0]
    2678:	01006773 	tsteq	r0, r3, ror r7
    267c:	00035966 	andeq	r5, r3, r6, ror #18
    2680:	6c910200 	lfmvs	f0, 4, [r1], {0}
    2684:	00135712 	andseq	r5, r3, r2, lsl r7
    2688:	bd660100 	stflte	f0, [r6, #-0]
    268c:	02000000 	andeq	r0, r0, #0
    2690:	19136891 	ldmdbne	r3, {r0, r4, r7, fp, sp, lr}
    2694:	01000013 	tsteq	r0, r3, lsl r0
    2698:	0002f267 	andeq	pc, r2, r7, ror #4
    269c:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    26a0:	133e0f00 	teqne	lr, #0, 30
    26a4:	4c010000 	stcmi	0, cr0, [r1], {-0}
    26a8:	00000097 	muleq	r0, r7, r0
    26ac:	20001fec 	andcs	r1, r0, ip, ror #31
    26b0:	00000088 	andeq	r0, r0, r8, lsl #1
    26b4:	044b9c01 	strbeq	r9, [fp], #-3073	; 0xfffff3ff
    26b8:	6d100000 	ldcvs	0, cr0, [r0, #-0]
    26bc:	01006773 	tsteq	r0, r3, ror r7
    26c0:	0003594c 	andeq	r5, r3, ip, asr #18
    26c4:	6c910200 	lfmvs	f0, 4, [r1], {0}
    26c8:	00134f12 	andseq	r4, r3, r2, lsl pc
    26cc:	484c0100 	stmdami	ip, {r8}^
    26d0:	02000002 	andeq	r0, r0, #2
    26d4:	69106891 	ldmdbvs	r0, {r0, r4, r7, fp, sp, lr}
    26d8:	4c010064 	stcmi	0, cr0, [r1], {100}	; 0x64
    26dc:	00000097 	muleq	r0, r7, r0
    26e0:	15679102 	strbne	r9, [r7, #-258]!	; 0xfffffefe
    26e4:	20002002 	andcs	r2, r0, r2
    26e8:	00000068 	andeq	r0, r0, r8, rrx
    26ec:	00036213 	andeq	r6, r3, r3, lsl r2
    26f0:	154f0100 	strbne	r0, [pc, #-256]	; 25f8 <startup-0x1fffda08>
    26f4:	02000002 	andeq	r0, r0, #2
    26f8:	00007491 	muleq	r0, r1, r4
    26fc:	0013be0f 	andseq	fp, r3, pc, lsl #28
    2700:	97300100 	ldrls	r0, [r0, -r0, lsl #2]!
    2704:	50000000 	andpl	r0, r0, r0
    2708:	9c20001f 	stcls	0, cr0, [r0], #-124	; 0xffffff84
    270c:	01000000 	mrseq	r0, (UNDEF: 0)
    2710:	0004b99c 	muleq	r4, ip, r9
    2714:	736d1000 	cmnvc	sp, #0
    2718:	30010067 	andcc	r0, r1, r7, rrx
    271c:	00000359 	andeq	r0, r0, r9, asr r3
    2720:	126c9102 	rsbne	r9, ip, #-2147483648	; 0x80000000
    2724:	000013e2 	andeq	r1, r0, r2, ror #7
    2728:	00bd3001 	adcseq	r3, sp, r1
    272c:	91020000 	mrsls	r0, (UNDEF: 2)
    2730:	12e61268 	rscne	r1, r6, #104, 4	; 0x80000006
    2734:	30010000 	andcc	r0, r1, r0
    2738:	00000097 	muleq	r0, r7, r0
    273c:	12679102 	rsbne	r9, r7, #-2147483648	; 0x80000000
    2740:	000012f2 	strdeq	r1, [r0], -r2
    2744:	00973001 	addseq	r3, r7, r1
    2748:	91020000 	mrsls	r0, (UNDEF: 2)
    274c:	13da1266 	bicsne	r1, sl, #1610612742	; 0x60000006
    2750:	30010000 	andcc	r0, r1, r0
    2754:	00000097 	muleq	r0, r7, r0
    2758:	13009102 	movwne	r9, #258	; 0x102
    275c:	00000362 	andeq	r0, r0, r2, ror #6
    2760:	02153101 	andseq	r3, r5, #1073741824	; 0x40000000
    2764:	91020000 	mrsls	r0, (UNDEF: 2)
    2768:	26160074 			; <UNDEFINED> instruction: 0x26160074
    276c:	01000013 	tsteq	r0, r3, lsl r0
    2770:	00009709 	andeq	r9, r0, r9, lsl #14
    2774:	001e7c00 	andseq	r7, lr, r0, lsl #24
    2778:	0000d420 	andeq	sp, r0, r0, lsr #8
    277c:	109c0100 	addsne	r0, ip, r0, lsl #2
    2780:	0067736d 	rsbeq	r7, r7, sp, ror #6
    2784:	03590901 	cmpeq	r9, #16384	; 0x4000
    2788:	91020000 	mrsls	r0, (UNDEF: 2)
    278c:	13661264 	cmnne	r6, #100, 4	; 0x40000006
    2790:	09010000 	stmdbeq	r1, {}	; <UNPREDICTABLE>
    2794:	00000097 	muleq	r0, r7, r0
    2798:	12639102 	rsbne	r9, r3, #-2147483648	; 0x80000000
    279c:	0000135c 	andeq	r1, r0, ip, asr r3
    27a0:	00970901 	addseq	r0, r7, r1, lsl #18
    27a4:	91020000 	mrsls	r0, (UNDEF: 2)
    27a8:	13781262 	cmnne	r8, #536870918	; 0x20000006
    27ac:	09010000 	stmdbeq	r1, {}	; <UNPREDICTABLE>
    27b0:	00000097 	muleq	r0, r7, r0
    27b4:	12619102 	rsbne	r9, r1, #-2147483648	; 0x80000000
    27b8:	000013ea 	andeq	r1, r0, sl, ror #7
    27bc:	00a20901 	adceq	r0, r2, r1, lsl #18
    27c0:	91020000 	mrsls	r0, (UNDEF: 2)
    27c4:	13f11200 	mvnsne	r1, #0, 4
    27c8:	09010000 	stmdbeq	r1, {}	; <UNPREDICTABLE>
    27cc:	000000a2 	andeq	r0, r0, r2, lsr #1
    27d0:	12049102 	andne	r9, r4, #-2147483648	; 0x80000000
    27d4:	00001371 	andeq	r1, r0, r1, ror r3
    27d8:	00970901 	addseq	r0, r7, r1, lsl #18
    27dc:	91020000 	mrsls	r0, (UNDEF: 2)
    27e0:	13191308 	tstne	r9, #8, 6	; 0x20000000
    27e4:	0e010000 	cdpeq	0, 0, cr0, cr1, cr0, {0}
    27e8:	000002f2 	strdeq	r0, [r0], -r2
    27ec:	136c9102 	cmnne	ip, #-2147483648	; 0x80000000
    27f0:	00000362 	andeq	r0, r0, r2, ror #6
    27f4:	02151101 	andseq	r1, r5, #1073741824	; 0x40000000
    27f8:	91020000 	mrsls	r0, (UNDEF: 2)
    27fc:	8d000068 	stchi	0, cr0, [r0, #-416]	; 0xfffffe60
    2800:	04000002 	streq	r0, [r0], #-2
    2804:	0007b500 	andeq	fp, r7, r0, lsl #10
    2808:	b8010400 	stmdalt	r1, {sl}
    280c:	0c000004 	stceq	0, cr0, [r0], {4}
    2810:	0000147b 	andeq	r1, r0, fp, ror r4
    2814:	00000407 	andeq	r0, r0, r7, lsl #8
    2818:	20002250 	andcs	r2, r0, r0, asr r2
    281c:	00000174 	andeq	r0, r0, r4, ror r1
    2820:	00000b94 	muleq	r0, r4, fp
    2824:	db060102 	blle	182c34 <startup-0x1fe7d3cc>
    2828:	03000002 	movweq	r0, #2
    282c:	0000017e 	andeq	r0, r0, lr, ror r1
    2830:	00372b02 	eorseq	r2, r7, r2, lsl #22
    2834:	01020000 	mrseq	r0, (UNDEF: 2)
    2838:	0002d908 	andeq	sp, r2, r8, lsl #18
    283c:	05020200 	streq	r0, [r2, #-512]	; 0xfffffe00
    2840:	00000b74 	andeq	r0, r0, r4, ror fp
    2844:	9c070202 	sfmls	f0, 4, [r7], {2}
    2848:	0300000c 	movweq	r0, #12
    284c:	00000d18 	andeq	r0, r0, r8, lsl sp
    2850:	00574d02 	subseq	r4, r7, r2, lsl #26
    2854:	04020000 	streq	r0, [r2], #-0
    2858:	00078505 	andeq	r8, r7, r5, lsl #10
    285c:	07590300 	ldrbeq	r0, [r9, -r0, lsl #6]
    2860:	4f020000 	svcmi	0x00020000
    2864:	00000069 	andeq	r0, r0, r9, rrx
    2868:	db070402 	blle	1c3878 <startup-0x1fe3c788>
    286c:	02000009 	andeq	r0, r0, #9
    2870:	07800508 	streq	r0, [r0, r8, lsl #10]
    2874:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    2878:	0009d607 	andeq	sp, r9, r7, lsl #12
    287c:	05040400 	streq	r0, [r4, #-1024]	; 0xfffffc00
    2880:	00746e69 	rsbseq	r6, r4, r9, ror #28
    2884:	e0070402 	and	r0, r7, r2, lsl #8
    2888:	03000009 	movweq	r0, #9
    288c:	00000180 	andeq	r0, r0, r0, lsl #3
    2890:	002c1803 	eoreq	r1, ip, r3, lsl #16
    2894:	1a030000 	bne	c289c <startup-0x1ff3d764>
    2898:	0300000d 	movweq	r0, #13
    289c:	00004c2c 	andeq	r4, r0, ip, lsr #24
    28a0:	00970500 	addseq	r0, r7, r0, lsl #10
    28a4:	5b030000 	blpl	c28ac <startup-0x1ff3d754>
    28a8:	03000007 	movweq	r0, #7
    28ac:	00005e30 	andeq	r5, r0, r0, lsr lr
    28b0:	00a70500 	adceq	r0, r7, r0, lsl #10
    28b4:	17060000 	strne	r0, [r6, -r0]
    28b8:	0400000c 	streq	r0, [r0], #-12
    28bc:	00a206fa 	strdeq	r0, [r2], sl	; <UNPREDICTABLE>
    28c0:	69070000 	stmdbvs	r7, {}	; <UNPREDICTABLE>
    28c4:	05000006 	streq	r0, [r0, #-6]
    28c8:	0000a73b 	andeq	sl, r0, fp, lsr r7
    28cc:	01070800 	tsteq	r7, r0, lsl #16
    28d0:	00000037 	andeq	r0, r0, r7, lsr r0
    28d4:	e9035d06 	stmdb	r3, {r1, r2, r8, sl, fp, ip, lr}
    28d8:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    28dc:	00001117 	andeq	r1, r0, r7, lsl r1
    28e0:	45530a00 	ldrbmi	r0, [r3, #-2560]	; 0xfffff600
    28e4:	00010054 	andeq	r0, r1, r4, asr r0
    28e8:	001b0b0b 	andseq	r0, fp, fp, lsl #22
    28ec:	035d0600 	cmpeq	sp, #0, 12
    28f0:	000000ce 	andeq	r0, r0, lr, asr #1
    28f4:	0010460b 	andseq	r4, r0, fp, lsl #12
    28f8:	035d0600 	cmpeq	sp, #0, 12
    28fc:	000000ce 	andeq	r0, r0, lr, asr #1
    2900:	37010708 	strcc	r0, [r1, -r8, lsl #14]
    2904:	06000000 	streq	r0, [r0], -r0
    2908:	011c035f 	tsteq	ip, pc, asr r3
    290c:	1d090000 	stcne	0, cr0, [r9, #-0]
    2910:	00000009 	andeq	r0, r0, r9
    2914:	000bb609 	andeq	fp, fp, r9, lsl #12
    2918:	0b000100 	bleq	2d20 <startup-0x1fffd2e0>
    291c:	000009a0 	andeq	r0, r0, r0, lsr #19
    2920:	01035f06 	tsteq	r3, r6, lsl #30
    2924:	0c000001 	stceq	0, cr0, [r0], {1}
    2928:	07d9060c 	ldrbeq	r0, [r9, ip, lsl #12]
    292c:	00000156 	andeq	r0, r0, r6, asr r1
    2930:	0052430d 	subseq	r4, r2, sp, lsl #6
    2934:	b207db06 	andlt	sp, r7, #6144	; 0x1800
    2938:	00000000 	andeq	r0, r0, r0
    293c:	0052530d 	subseq	r5, r2, sp, lsl #6
    2940:	b207dc06 	andlt	sp, r7, #1536	; 0x600
    2944:	04000000 	streq	r0, [r0], #-0
    2948:	0052440d 	subseq	r4, r2, sp, lsl #8
    294c:	b207dd06 	andlt	sp, r7, #384	; 0x180
    2950:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    2954:	14480b00 	strbne	r0, [r8], #-2816	; 0xfffff500
    2958:	de060000 	cdple	0, 0, cr0, cr6, cr0, {0}
    295c:	00012807 	andeq	r2, r1, r7, lsl #16
    2960:	14ea0e00 	strbtne	r0, [sl], #3584	; 0xe00
    2964:	7d010000 	stcvc	0, cr0, [r1, #-0]
    2968:	0023a001 	eoreq	sl, r3, r1
    296c:	00002420 	andeq	r2, r0, r0, lsr #8
    2970:	889c0100 	ldmhi	ip, {r8}
    2974:	0f000001 	svceq	0x00000001
    2978:	0000140d 	andeq	r1, r0, sp, lsl #8
    297c:	8c017d01 	stchi	13, cr7, [r1], {1}
    2980:	02000000 	andeq	r0, r0, #0
    2984:	10007791 	mulne	r0, r1, r7
    2988:	0000146b 	andeq	r1, r0, fp, ror #8
    298c:	f5015f01 			; <UNDEFINED> instruction: 0xf5015f01
    2990:	5c000000 	stcpl	0, cr0, [r0], {-0}
    2994:	44200023 	strtmi	r0, [r0], #-35	; 0xffffffdd
    2998:	01000000 	mrseq	r0, (UNDEF: 0)
    299c:	0001c19c 	muleq	r1, ip, r1
    29a0:	140d0f00 	strne	r0, [sp], #-3840	; 0xfffff100
    29a4:	5f010000 	svcpl	0x00010000
    29a8:	00008c01 	andeq	r8, r0, r1, lsl #24
    29ac:	6f910200 	svcvs	0x00910200
    29b0:	000fc711 	andeq	ip, pc, r1, lsl r7	; <UNPREDICTABLE>
    29b4:	01610100 	cmneq	r1, r0, lsl #2
    29b8:	000000f5 	strdeq	r0, [r0], -r5
    29bc:	00779102 	rsbseq	r9, r7, r2, lsl #2
    29c0:	00145d0e 	andseq	r5, r4, lr, lsl #26
    29c4:	014f0100 	mrseq	r0, (UNDEF: 95)
    29c8:	20002338 	andcs	r2, r0, r8, lsr r3
    29cc:	00000024 	andeq	r0, r0, r4, lsr #32
    29d0:	01e79c01 	mvneq	r9, r1, lsl #24
    29d4:	540f0000 	strpl	r0, [pc], #-0	; 29dc <startup-0x1fffd624>
    29d8:	01000014 	tsteq	r0, r4, lsl r0
    29dc:	008c014f 	addeq	r0, ip, pc, asr #2
    29e0:	91020000 	mrsls	r0, (UNDEF: 2)
    29e4:	00100077 	andseq	r0, r0, r7, ror r0
    29e8:	01000015 	tsteq	r0, r5, lsl r0
    29ec:	00e9012e 	rsceq	r0, r9, lr, lsr #2
    29f0:	22f40000 	rscscs	r0, r4, #0
    29f4:	00442000 	subeq	r2, r4, r0
    29f8:	9c010000 	stcls	0, cr0, [r1], {-0}
    29fc:	00000220 	andeq	r0, r0, r0, lsr #4
    2a00:	0014540f 	andseq	r5, r4, pc, lsl #8
    2a04:	012e0100 			; <UNDEFINED> instruction: 0x012e0100
    2a08:	0000008c 	andeq	r0, r0, ip, lsl #1
    2a0c:	116f9102 	cmnne	pc, r2, lsl #2
    2a10:	00000fc7 	andeq	r0, r0, r7, asr #31
    2a14:	e9013001 	stmdb	r1, {r0, ip, sp}
    2a18:	02000000 	andeq	r0, r0, #0
    2a1c:	0e007791 	mcreq	7, 0, r7, cr0, cr1, {4}
    2a20:	00001414 	andeq	r1, r0, r4, lsl r4
    2a24:	b8011401 	stmdalt	r1, {r0, sl, ip}
    2a28:	3c200022 	stccc	0, cr0, [r0], #-136	; 0xffffff78
    2a2c:	01000000 	mrseq	r0, (UNDEF: 0)
    2a30:	0002469c 	muleq	r2, ip, r6
    2a34:	0e6f0f00 	cdpeq	15, 6, cr0, cr15, cr0, {0}
    2a38:	14010000 	strne	r0, [r1], #-0
    2a3c:	00011c01 	andeq	r1, r1, r1, lsl #24
    2a40:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    2a44:	14291200 	strtne	r1, [r9], #-512	; 0xfffffe00
    2a48:	b9010000 	stmdblt	r1, {}	; <UNPREDICTABLE>
    2a4c:	000000a7 	andeq	r0, r0, r7, lsr #1
    2a50:	200022a4 	andcs	r2, r0, r4, lsr #5
    2a54:	00000014 	andeq	r0, r0, r4, lsl r0
    2a58:	21139c01 	tstcs	r3, r1, lsl #24
    2a5c:	01000014 	tsteq	r0, r4, lsl r0
    2a60:	00226a7b 	eoreq	r6, r2, fp, ror sl
    2a64:	00003a20 	andeq	r3, r0, r0, lsr #20
    2a68:	7f9c0100 	svcvc	0x009c0100
    2a6c:	14000002 	strne	r0, [r0], #-2
    2a70:	00000e6f 	andeq	r0, r0, pc, ror #28
    2a74:	011c7b01 	tsteq	ip, r1, lsl #22
    2a78:	91020000 	mrsls	r0, (UNDEF: 2)
    2a7c:	3d150077 	ldccc	0, cr0, [r5, #-476]	; 0xfffffe24
    2a80:	01000014 	tsteq	r0, r4, lsl r0
    2a84:	00225063 	eoreq	r5, r2, r3, rrx
    2a88:	00001a20 	andeq	r1, r0, r0, lsr #20
    2a8c:	009c0100 	addseq	r0, ip, r0, lsl #2
    2a90:	00000543 	andeq	r0, r0, r3, asr #10
    2a94:	09100004 	ldmdbeq	r0, {r2}
    2a98:	01040000 	mrseq	r0, (UNDEF: 4)
    2a9c:	000004b8 			; <UNDEFINED> instruction: 0x000004b8
    2aa0:	0015e90c 	andseq	lr, r5, ip, lsl #18
    2aa4:	00040700 	andeq	r0, r4, r0, lsl #14
    2aa8:	0023c400 	eoreq	ip, r3, r0, lsl #8
    2aac:	0001c420 	andeq	ip, r1, r0, lsr #8
    2ab0:	000d8b00 	andeq	r8, sp, r0, lsl #22
    2ab4:	06010200 	streq	r0, [r1], -r0, lsl #4
    2ab8:	000002db 	ldrdeq	r0, [r0], -fp
    2abc:	00017e03 	andeq	r7, r1, r3, lsl #28
    2ac0:	372b0200 	strcc	r0, [fp, -r0, lsl #4]!
    2ac4:	02000000 	andeq	r0, r0, #0
    2ac8:	02d90801 	sbcseq	r0, r9, #65536	; 0x10000
    2acc:	02020000 	andeq	r0, r2, #0
    2ad0:	000b7405 	andeq	r7, fp, r5, lsl #8
    2ad4:	07020200 	streq	r0, [r2, -r0, lsl #4]
    2ad8:	00000c9c 	muleq	r0, ip, ip
    2adc:	000d1803 	andeq	r1, sp, r3, lsl #16
    2ae0:	574d0200 	strbpl	r0, [sp, -r0, lsl #4]
    2ae4:	02000000 	andeq	r0, r0, #0
    2ae8:	07850504 	streq	r0, [r5, r4, lsl #10]
    2aec:	59030000 	stmdbpl	r3, {}	; <UNPREDICTABLE>
    2af0:	02000007 	andeq	r0, r0, #7
    2af4:	0000694f 	andeq	r6, r0, pc, asr #18
    2af8:	07040200 	streq	r0, [r4, -r0, lsl #4]
    2afc:	000009db 	ldrdeq	r0, [r0], -fp
    2b00:	80050802 	andhi	r0, r5, r2, lsl #16
    2b04:	02000007 	andeq	r0, r0, #7
    2b08:	09d60708 	ldmibeq	r6, {r3, r8, r9, sl}^
    2b0c:	04040000 	streq	r0, [r4], #-0
    2b10:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
    2b14:	07040200 	streq	r0, [r4, -r0, lsl #4]
    2b18:	000009e0 	andeq	r0, r0, r0, ror #19
    2b1c:	00018003 	andeq	r8, r1, r3
    2b20:	2c180300 	ldccs	3, cr0, [r8], {-0}
    2b24:	05000000 	streq	r0, [r0, #-0]
    2b28:	0000008c 	andeq	r0, r0, ip, lsl #1
    2b2c:	000d1a03 	andeq	r1, sp, r3, lsl #20
    2b30:	4c2c0300 	stcmi	3, cr0, [ip], #-0
    2b34:	05000000 	streq	r0, [r0, #-0]
    2b38:	0000009c 	muleq	r0, ip, r0
    2b3c:	00075b03 	andeq	r5, r7, r3, lsl #22
    2b40:	5e300300 	cdppl	3, 3, cr0, cr0, cr0, {0}
    2b44:	05000000 	streq	r0, [r0, #-0]
    2b48:	000000ac 	andeq	r0, r0, ip, lsr #1
    2b4c:	0000b706 	andeq	fp, r0, r6, lsl #14
    2b50:	0e040700 	cdpeq	7, 0, cr0, cr4, cr0, {0}
    2b54:	7d01a004 	stcvc	0, cr10, [r1, #-16]
    2b58:	08000001 	stmdaeq	r0, {r0}
    2b5c:	00000d22 	andeq	r0, r0, r2, lsr #26
    2b60:	8d01a204 	sfmhi	f2, 1, [r1, #-16]
    2b64:	00000001 	andeq	r0, r0, r1
    2b68:	0002c508 	andeq	ip, r2, r8, lsl #10
    2b6c:	01a30400 			; <UNDEFINED> instruction: 0x01a30400
    2b70:	00000192 	muleq	r0, r2, r1
    2b74:	0a730820 	beq	1cc4bfc <startup-0x1e33b404>
    2b78:	a4040000 	strge	r0, [r4], #-0
    2b7c:	00018d01 	andeq	r8, r1, r1, lsl #26
    2b80:	00088000 	andeq	r8, r8, r0
    2b84:	04000000 	streq	r0, [r0], #-0
    2b88:	019201a5 	orrseq	r0, r2, r5, lsr #3
    2b8c:	09a00000 	stmibeq	r0!, {}	; <UNPREDICTABLE>
    2b90:	00000ccc 	andeq	r0, r0, ip, asr #25
    2b94:	8d01a604 	stchi	6, cr10, [r1, #-16]
    2b98:	00000001 	andeq	r0, r0, r1
    2b9c:	036f0901 	cmneq	pc, #16384	; 0x4000
    2ba0:	a7040000 	strge	r0, [r4, -r0]
    2ba4:	00019201 	andeq	r9, r1, r1, lsl #4
    2ba8:	09012000 	stmdbeq	r1, {sp}
    2bac:	00000132 	andeq	r0, r0, r2, lsr r1
    2bb0:	8d01a804 	stchi	8, cr10, [r1, #-16]
    2bb4:	80000001 	andhi	r0, r0, r1
    2bb8:	03790901 	cmneq	r9, #16384	; 0x4000
    2bbc:	a9040000 	stmdbge	r4, {}	; <UNPREDICTABLE>
    2bc0:	00019201 	andeq	r9, r1, r1, lsl #4
    2bc4:	0901a000 	stmdbeq	r1, {sp, pc}
    2bc8:	00000312 	andeq	r0, r0, r2, lsl r3
    2bcc:	8d01aa04 	vstrhi	s20, [r1, #-16]
    2bd0:	00000001 	andeq	r0, r0, r1
    2bd4:	02f90902 	rscseq	r0, r9, #32768	; 0x8000
    2bd8:	ab040000 	blge	102be0 <startup-0x1fefd420>
    2bdc:	0001a201 	andeq	sl, r1, r1, lsl #4
    2be0:	0a022000 	beq	8abe8 <startup-0x1ff75418>
    2be4:	04005049 	streq	r5, [r0], #-73	; 0xffffffb7
    2be8:	01c201ac 	biceq	r0, r2, ip, lsr #3
    2bec:	03000000 	movweq	r0, #0
    2bf0:	00030309 	andeq	r0, r3, r9, lsl #6
    2bf4:	01ad0400 			; <UNDEFINED> instruction: 0x01ad0400
    2bf8:	000001c7 	andeq	r0, r0, r7, asr #3
    2bfc:	5f0903f0 	svcpl	0x000903f0
    2c00:	04000005 	streq	r0, [r0], #-5
    2c04:	00b701ae 	adcseq	r0, r7, lr, lsr #3
    2c08:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    2c0c:	00b70b00 	adcseq	r0, r7, r0, lsl #22
    2c10:	018d0000 	orreq	r0, sp, r0
    2c14:	850c0000 	strhi	r0, [ip, #-0]
    2c18:	07000000 	streq	r0, [r0, -r0]
    2c1c:	017d0500 	cmneq	sp, r0, lsl #10
    2c20:	ac0b0000 	stcge	0, cr0, [fp], {-0}
    2c24:	a2000000 	andge	r0, r0, #0
    2c28:	0c000001 	stceq	0, cr0, [r0], {1}
    2c2c:	00000085 	andeq	r0, r0, r5, lsl #1
    2c30:	ac0b0017 	stcge	0, cr0, [fp], {23}
    2c34:	b2000000 	andlt	r0, r0, #0
    2c38:	0c000001 	stceq	0, cr0, [r0], {1}
    2c3c:	00000085 	andeq	r0, r0, r5, lsl #1
    2c40:	970b0037 	smladxls	fp, r7, r0, r0
    2c44:	c2000000 	andgt	r0, r0, #0
    2c48:	0c000001 	stceq	0, cr0, [r0], {1}
    2c4c:	00000085 	andeq	r0, r0, r5, lsl #1
    2c50:	b20500ef 	andlt	r0, r5, #239	; 0xef
    2c54:	0b000001 	bleq	2c60 <startup-0x1fffd3a0>
    2c58:	000000ac 	andeq	r0, r0, ip, lsr #1
    2c5c:	000001d8 	ldrdeq	r0, [r0], -r8
    2c60:	0000850d 	andeq	r8, r0, sp, lsl #10
    2c64:	00028300 	andeq	r8, r2, r0, lsl #6
    2c68:	0009960e 	andeq	r9, r9, lr, lsl #12
    2c6c:	01af0400 			; <UNDEFINED> instruction: 0x01af0400
    2c70:	000000c1 	andeq	r0, r0, r1, asr #1
    2c74:	c0048c0f 	andgt	r8, r4, pc, lsl #24
    2c78:	0002ff01 	andeq	pc, r2, r1, lsl #30
    2c7c:	01ea0800 	mvneq	r0, r0, lsl #16
    2c80:	c2040000 	andgt	r0, r4, #0
    2c84:	0000bc01 	andeq	fp, r0, r1, lsl #24
    2c88:	62080000 	andvs	r0, r8, #0
    2c8c:	04000002 	streq	r0, [r0], #-2
    2c90:	00b701c3 	adcseq	r0, r7, r3, asr #3
    2c94:	08040000 	stmdaeq	r4, {}	; <UNPREDICTABLE>
    2c98:	000000b8 	strheq	r0, [r0], -r8
    2c9c:	b701c404 	strlt	ip, [r1, -r4, lsl #8]
    2ca0:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    2ca4:	0001d808 	andeq	sp, r1, r8, lsl #16
    2ca8:	01c50400 	biceq	r0, r5, r0, lsl #8
    2cac:	000000b7 	strheq	r0, [r0], -r7
    2cb0:	4353100c 	cmpmi	r3, #12
    2cb4:	c6040052 			; <UNDEFINED> instruction: 0xc6040052
    2cb8:	0000b701 	andeq	fp, r0, r1, lsl #14
    2cbc:	43101000 	tstmi	r0, #0
    2cc0:	04005243 	streq	r5, [r0], #-579	; 0xfffffdbd
    2cc4:	00b701c7 	adcseq	r0, r7, r7, asr #3
    2cc8:	10140000 	andsne	r0, r4, r0
    2ccc:	00504853 	subseq	r4, r0, r3, asr r8
    2cd0:	0f01c804 	svceq	0x0001c804
    2cd4:	18000003 	stmdane	r0, {r0, r1}
    2cd8:	00055908 	andeq	r5, r5, r8, lsl #18
    2cdc:	01c90400 	biceq	r0, r9, r0, lsl #8
    2ce0:	000000b7 	strheq	r0, [r0], -r7
    2ce4:	0ac40824 	beq	ff104d7c <GPIO_Ports+0xdf100dd4>
    2ce8:	ca040000 	bgt	102cf0 <startup-0x1fefd310>
    2cec:	0000b701 	andeq	fp, r0, r1, lsl #14
    2cf0:	84082800 	strhi	r2, [r8], #-2048	; 0xfffff800
    2cf4:	04000004 	streq	r0, [r0], #-4
    2cf8:	00b701cb 	adcseq	r0, r7, fp, asr #3
    2cfc:	082c0000 	stmdaeq	ip!, {}	; <UNPREDICTABLE>
    2d00:	000003c7 	andeq	r0, r0, r7, asr #7
    2d04:	b701cc04 	strlt	ip, [r1, -r4, lsl #24]
    2d08:	30000000 	andcc	r0, r0, r0
    2d0c:	000b6e08 	andeq	r6, fp, r8, lsl #28
    2d10:	01cd0400 	biceq	r0, sp, r0, lsl #8
    2d14:	000000b7 	strheq	r0, [r0], -r7
    2d18:	08730834 	ldmdaeq	r3!, {r2, r4, r5, fp}^
    2d1c:	ce040000 	cdpgt	0, 0, cr0, cr4, cr0, {0}
    2d20:	0000b701 	andeq	fp, r0, r1, lsl #14
    2d24:	92083800 	andls	r3, r8, #0, 16
    2d28:	0400000a 	streq	r0, [r0], #-10
    2d2c:	00b701cf 	adcseq	r0, r7, pc, asr #3
    2d30:	103c0000 	eorsne	r0, ip, r0
    2d34:	00524650 	subseq	r4, r2, r0, asr r6
    2d38:	2901d004 	stmdbcs	r1, {r2, ip, lr, pc}
    2d3c:	40000003 	andmi	r0, r0, r3
    2d40:	52464410 	subpl	r4, r6, #16, 8	; 0x10000000
    2d44:	01d10400 	bicseq	r0, r1, r0, lsl #8
    2d48:	000000bc 	strheq	r0, [r0], -ip
    2d4c:	44411048 	strbmi	r1, [r1], #-72	; 0xffffffb8
    2d50:	d2040052 	andle	r0, r4, #82	; 0x52
    2d54:	0000bc01 	andeq	fp, r0, r1, lsl #24
    2d58:	69084c00 	stmdbvs	r8, {sl, fp, lr}
    2d5c:	0400000b 	streq	r0, [r0], #-11
    2d60:	034301d3 	movteq	r0, #12755	; 0x31d3
    2d64:	08500000 	ldmdaeq	r0, {}^	; <UNPREDICTABLE>
    2d68:	00000b8d 	andeq	r0, r0, sp, lsl #23
    2d6c:	5d01d404 	cfstrspl	mvf13, [r1, #-16]
    2d70:	60000003 	andvs	r0, r0, r3
    2d74:	0002c508 	andeq	ip, r2, r8, lsl #10
    2d78:	01d50400 	bicseq	r0, r5, r0, lsl #8
    2d7c:	00000362 	andeq	r0, r0, r2, ror #6
    2d80:	0cc60874 	stcleq	8, cr0, [r6], {116}	; 0x74
    2d84:	d6040000 	strle	r0, [r4], -r0
    2d88:	0000b701 	andeq	fp, r0, r1, lsl #14
    2d8c:	0b008800 	bleq	24d94 <startup-0x1ffdb26c>
    2d90:	00000097 	muleq	r0, r7, r0
    2d94:	0000030f 	andeq	r0, r0, pc, lsl #6
    2d98:	0000850c 	andeq	r8, r0, ip, lsl #10
    2d9c:	05000b00 	streq	r0, [r0, #-2816]	; 0xfffff500
    2da0:	000002ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    2da4:	0000bc0b 	andeq	fp, r0, fp, lsl #24
    2da8:	00032400 	andeq	r2, r3, r0, lsl #8
    2dac:	00850c00 	addeq	r0, r5, r0, lsl #24
    2db0:	00010000 	andeq	r0, r1, r0
    2db4:	00031406 	andeq	r1, r3, r6, lsl #8
    2db8:	03240500 			; <UNDEFINED> instruction: 0x03240500
    2dbc:	bc0b0000 	stclt	0, cr0, [fp], {-0}
    2dc0:	3e000000 	cdpcc	0, 0, cr0, cr0, cr0, {0}
    2dc4:	0c000003 	stceq	0, cr0, [r0], {3}
    2dc8:	00000085 	andeq	r0, r0, r5, lsl #1
    2dcc:	2e060003 	cdpcs	0, 0, cr0, cr6, cr3, {0}
    2dd0:	05000003 	streq	r0, [r0, #-3]
    2dd4:	0000033e 	andeq	r0, r0, lr, lsr r3
    2dd8:	0000bc0b 	andeq	fp, r0, fp, lsl #24
    2ddc:	00035800 	andeq	r5, r3, r0, lsl #16
    2de0:	00850c00 	addeq	r0, r5, r0, lsl #24
    2de4:	00040000 	andeq	r0, r4, r0
    2de8:	00034806 	andeq	r4, r3, r6, lsl #16
    2dec:	03580500 	cmpeq	r8, #0, 10
    2df0:	ac0b0000 	stcge	0, cr0, [fp], {-0}
    2df4:	72000000 	andvc	r0, r0, #0
    2df8:	0c000003 	stceq	0, cr0, [r0], {3}
    2dfc:	00000085 	andeq	r0, r0, r5, lsl #1
    2e00:	ad0e0004 	stcge	0, cr0, [lr, #-16]
    2e04:	04000003 	streq	r0, [r0], #-3
    2e08:	01e401d7 	ldrdeq	r0, [r4, #23]!
    2e0c:	100f0000 	andne	r0, pc, r0
    2e10:	bc02bf04 	stclt	15, cr11, [r2], {4}
    2e14:	08000003 	stmdaeq	r0, {r0, r1}
    2e18:	0000155f 	andeq	r1, r0, pc, asr r5
    2e1c:	b702c104 	strlt	ip, [r2, -r4, lsl #2]
    2e20:	00000000 	andeq	r0, r0, r0
    2e24:	0015d708 	andseq	sp, r5, r8, lsl #14
    2e28:	02c20400 	sbceq	r0, r2, #0, 8
    2e2c:	000000b7 	strheq	r0, [r0], -r7
    2e30:	41561004 	cmpmi	r6, r4
    2e34:	c304004c 	movwgt	r0, #16460	; 0x404c
    2e38:	0000b702 	andeq	fp, r0, r2, lsl #14
    2e3c:	78080800 	stmdavc	r8, {fp}
    2e40:	04000015 	streq	r0, [r0], #-21	; 0xffffffeb
    2e44:	00bc02c4 	adcseq	r0, ip, r4, asr #5
    2e48:	000c0000 	andeq	r0, ip, r0
    2e4c:	0015b10e 	andseq	fp, r5, lr, lsl #2
    2e50:	02c50400 	sbceq	r0, r5, #0, 8
    2e54:	0000037e 	andeq	r0, r0, lr, ror r3
    2e58:	000c1711 	andeq	r1, ip, r1, lsl r7
    2e5c:	06fa0400 	ldrbteq	r0, [sl], r0, lsl #8
    2e60:	000000a7 	andeq	r0, r0, r7, lsr #1
    2e64:	00066912 	andeq	r6, r6, r2, lsl r9
    2e68:	ac3b0500 	cfldr32ge	mvfx0, [fp], #-0
    2e6c:	13000000 	movwne	r0, #0
    2e70:	00370107 	eorseq	r0, r7, r7, lsl #2
    2e74:	5f060000 	svcpl	0x00060000
    2e78:	0003fa03 	andeq	pc, r3, r3, lsl #20
    2e7c:	091d1400 	ldmdbeq	sp, {sl, ip}
    2e80:	14000000 	strne	r0, [r0], #-0
    2e84:	00000bb6 			; <UNDEFINED> instruction: 0x00000bb6
    2e88:	a00e0001 	andge	r0, lr, r1
    2e8c:	06000009 	streq	r0, [r0], -r9
    2e90:	03df035f 	bicseq	r0, pc, #2080374785	; 0x7c000001
    2e94:	04150000 	ldreq	r0, [r5], #-0
    2e98:	043f3607 	ldrteq	r3, [pc], #-1543	; 2ea0 <startup-0x1fffd160>
    2e9c:	f2160000 	vhadd.s16	d0, d6, d0
    2ea0:	07000008 	streq	r0, [r0, -r8]
    2ea4:	00008c38 	andeq	r8, r0, r8, lsr ip
    2ea8:	e5160000 	ldr	r0, [r6, #-0]
    2eac:	07000003 	streq	r0, [r0, -r3]
    2eb0:	00008c3d 	andeq	r8, r0, sp, lsr ip
    2eb4:	02160100 	andseq	r0, r6, #0, 2
    2eb8:	07000009 	streq	r0, [r0, -r9]
    2ebc:	00008c42 	andeq	r8, r0, r2, asr #24
    2ec0:	c5160200 	ldrgt	r0, [r6, #-512]	; 0xfffffe00
    2ec4:	07000001 	streq	r0, [r0, -r1]
    2ec8:	0003fa47 	andeq	pc, r3, r7, asr #20
    2ecc:	03000300 	movweq	r0, #768	; 0x300
    2ed0:	00000c8b 	andeq	r0, r0, fp, lsl #25
    2ed4:	04064a07 	streq	r4, [r6], #-2567	; 0xfffff5f9
    2ed8:	99170000 	ldmdbls	r7, {}	; <UNPREDICTABLE>
    2edc:	01000015 	tsteq	r0, r5, lsl r0
    2ee0:	002554df 	ldrdeq	r5, [r5], -pc	; <UNPREDICTABLE>
    2ee4:	00003420 	andeq	r3, r0, r0, lsr #8
    2ee8:	6e9c0100 	fmlvse	f0, f4, f0
    2eec:	18000004 	stmdane	r0, {r2}
    2ef0:	00001512 	andeq	r1, r0, r2, lsl r5
    2ef4:	00acdf01 	adceq	sp, ip, r1, lsl #30
    2ef8:	91020000 	mrsls	r0, (UNDEF: 2)
    2efc:	85170074 	ldrhi	r0, [r7, #-116]	; 0xffffff8c
    2f00:	01000015 	tsteq	r0, r5, lsl r0
    2f04:	00250cc7 	eoreq	r0, r5, r7, asr #25
    2f08:	00004820 	andeq	r4, r0, r0, lsr #16
    2f0c:	a09c0100 	addsge	r0, ip, r0, lsl #2
    2f10:	18000004 	stmdane	r0, {r2}
    2f14:	000015dc 	ldrdeq	r1, [r0], -ip
    2f18:	008cc701 	addeq	ip, ip, r1, lsl #14
    2f1c:	91020000 	mrsls	r0, (UNDEF: 2)
    2f20:	0e6f1877 	mcreq	8, 3, r1, cr15, cr7, {3}
    2f24:	c7010000 	strgt	r0, [r1, -r0]
    2f28:	000003fa 	strdeq	r0, [r0], -sl
    2f2c:	00769102 	rsbseq	r9, r6, r2, lsl #2
    2f30:	00156417 	andseq	r6, r5, r7, lsl r4
    2f34:	e0b40100 	adcs	r0, r4, r0, lsl #2
    2f38:	2c200024 	stccs	0, cr0, [r0], #-144	; 0xffffff70
    2f3c:	01000000 	mrseq	r0, (UNDEF: 0)
    2f40:	0004d29c 	muleq	r4, ip, r2
    2f44:	15ca1800 	strbne	r1, [sl, #2048]	; 0x800
    2f48:	b4010000 	strlt	r0, [r1], #-0
    2f4c:	000000ac 	andeq	r0, r0, ip, lsr #1
    2f50:	18749102 	ldmdane	r4!, {r1, r8, ip, pc}^
    2f54:	00001558 	andeq	r1, r0, r8, asr r5
    2f58:	00acb401 	adceq	fp, ip, r1, lsl #8
    2f5c:	91020000 	mrsls	r0, (UNDEF: 2)
    2f60:	47170070 			; <UNDEFINED> instruction: 0x47170070
    2f64:	01000015 	tsteq	r0, r5, lsl r0
    2f68:	0023e888 	eoreq	lr, r3, r8, lsl #17
    2f6c:	0000f820 	andeq	pc, r0, r0, lsr #16
    2f70:	209c0100 	addscs	r0, ip, r0, lsl #2
    2f74:	18000005 	stmdane	r0, {r0, r2}
    2f78:	00001524 	andeq	r1, r0, r4, lsr #10
    2f7c:	05208801 	streq	r8, [r0, #-2049]!	; 0xfffff7ff
    2f80:	91020000 	mrsls	r0, (UNDEF: 2)
    2f84:	15be1964 	ldrne	r1, [lr, #2404]!	; 0x964
    2f88:	8a010000 	bhi	42f90 <startup-0x1ffbd070>
    2f8c:	0000008c 	andeq	r0, r0, ip, lsl #1
    2f90:	196f9102 	stmdbne	pc!, {r1, r8, ip, pc}^	; <UNPREDICTABLE>
    2f94:	00001551 	andeq	r1, r0, r1, asr r5
    2f98:	008c8a01 	addeq	r8, ip, r1, lsl #20
    2f9c:	91020000 	mrsls	r0, (UNDEF: 2)
    2fa0:	157e196e 	ldrbne	r1, [lr, #-2414]!	; 0xfffff692
    2fa4:	8a010000 	bhi	42fac <startup-0x1ffbd054>
    2fa8:	0000008c 	andeq	r0, r0, ip, lsl #1
    2fac:	006d9102 	rsbeq	r9, sp, r2, lsl #2
    2fb0:	043f041a 	ldrteq	r0, [pc], #-1050	; 2fb8 <startup-0x1fffd048>
    2fb4:	4f1b0000 	svcmi	0x001b0000
    2fb8:	01000016 	tsteq	r0, r6, lsl r0
    2fbc:	0023c476 	eoreq	ip, r3, r6, ror r4
    2fc0:	00002420 	andeq	r2, r0, r0, lsr #8
    2fc4:	189c0100 	ldmne	ip, {r8}
    2fc8:	00001534 	andeq	r1, r0, r4, lsr r5
    2fcc:	00ac7601 	adceq	r7, ip, r1, lsl #12
    2fd0:	91020000 	mrsls	r0, (UNDEF: 2)
    2fd4:	34000074 	strcc	r0, [r0], #-116	; 0xffffff8c
    2fd8:	0400001b 	streq	r0, [r0], #-27	; 0xffffffe5
    2fdc:	000a8400 	andeq	r8, sl, r0, lsl #8
    2fe0:	b8010400 	stmdalt	r1, {sl}
    2fe4:	0c000004 	stceq	0, cr0, [r0], {4}
    2fe8:	00001bf7 	strdeq	r1, [r0], -r7
    2fec:	00000407 	andeq	r0, r0, r7, lsl #8
	...
    2ff8:	00000f7b 	andeq	r0, r0, fp, ror pc
    2ffc:	000c1202 	andeq	r1, ip, r2, lsl #4
    3000:	53010500 	movwpl	r0, #5376	; 0x1500
    3004:	05000002 	streq	r0, [r0, #-2]
    3008:	000253c8 	andeq	r5, r2, r8, asr #7
    300c:	06240300 	strteq	r0, [r4], -r0, lsl #6
    3010:	03720000 	cmneq	r2, #0
    3014:	00000653 	andeq	r0, r0, r3, asr r6
    3018:	07220374 			; <UNDEFINED> instruction: 0x07220374
    301c:	03750000 	cmneq	r5, #0
    3020:	0000038d 	andeq	r0, r0, sp, lsl #7
    3024:	07d80376 			; <UNDEFINED> instruction: 0x07d80376
    3028:	037b0000 	cmneq	fp, #0
    302c:	00000aff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    3030:	0cdc037c 	ldcleq	3, cr0, [ip], {124}	; 0x7c
    3034:	037e0000 	cmneq	lr, #0
    3038:	00000249 	andeq	r0, r0, r9, asr #4
    303c:	0638047f 			; <UNDEFINED> instruction: 0x0638047f
    3040:	04000000 	streq	r0, [r0], #-0
    3044:	00000a89 	andeq	r0, r0, r9, lsl #21
    3048:	06790401 	ldrbteq	r0, [r9], -r1, lsl #8
    304c:	04020000 	streq	r0, [r2], #-0
    3050:	00000009 	andeq	r0, r0, r9
    3054:	00c70403 	sbceq	r0, r7, r3, lsl #8
    3058:	04040000 	streq	r0, [r4], #-0
    305c:	00000b7e 	andeq	r0, r0, lr, ror fp
    3060:	0ab90405 	beq	fee4407c <GPIO_Ports+0xdee400d4>
    3064:	04060000 	streq	r0, [r6], #-0
    3068:	000005c4 	andeq	r0, r0, r4, asr #11
    306c:	00170407 	andseq	r0, r7, r7, lsl #8
    3070:	04080000 	streq	r0, [r8], #-0
    3074:	00000cd1 	ldrdeq	r0, [r0], -r1
    3078:	08330409 	ldmdaeq	r3!, {r0, r3, sl}
    307c:	040a0000 	streq	r0, [sl], #-0
    3080:	0000096c 	andeq	r0, r0, ip, ror #18
    3084:	0894040b 	ldmeq	r4, {r0, r1, r3, sl}
    3088:	040c0000 	streq	r0, [ip], #-0
    308c:	000002b3 			; <UNDEFINED> instruction: 0x000002b3
    3090:	0b92040d 	bleq	fe4840cc <GPIO_Ports+0xde480124>
    3094:	040e0000 	streq	r0, [lr], #-0
    3098:	00000ac9 	andeq	r0, r0, r9, asr #21
    309c:	05dc040f 	ldrbeq	r0, [ip, #1039]	; 0x40f
    30a0:	04100000 	ldreq	r0, [r0], #-0
    30a4:	00000022 	andeq	r0, r0, r2, lsr #32
    30a8:	0a590411 	beq	16440f4 <startup-0x1e9bbf0c>
    30ac:	04120000 	ldreq	r0, [r2], #-0
    30b0:	000005cf 	andeq	r0, r0, pc, asr #11
    30b4:	04610413 	strbteq	r0, [r1], #-1043	; 0xfffffbed
    30b8:	04140000 	ldreq	r0, [r4], #-0
    30bc:	00000c63 	andeq	r0, r0, r3, ror #24
    30c0:	06890415 	pkhbteq	r0, r9, r5, lsl #8
    30c4:	04160000 	ldreq	r0, [r6], #-0
    30c8:	00000c7e 	andeq	r0, r0, lr, ror ip
    30cc:	073b0417 			; <UNDEFINED> instruction: 0x073b0417
    30d0:	04180000 	ldreq	r0, [r8], #-0
    30d4:	00000c04 	andeq	r0, r0, r4, lsl #24
    30d8:	020f0419 	andeq	r0, pc, #419430400	; 0x19000000
    30dc:	041a0000 	ldreq	r0, [sl], #-0
    30e0:	000005a9 	andeq	r0, r0, r9, lsr #11
    30e4:	011e041b 	tsteq	lr, fp, lsl r4
    30e8:	041c0000 	ldreq	r0, [ip], #-0
    30ec:	000009ed 	andeq	r0, r0, sp, ror #19
    30f0:	04ae041d 	strteq	r0, [lr], #1053	; 0x41d
    30f4:	041e0000 	ldreq	r0, [lr], #-0
    30f8:	00000564 	andeq	r0, r0, r4, ror #10
    30fc:	0325041f 			; <UNDEFINED> instruction: 0x0325041f
    3100:	04200000 	strteq	r0, [r0], #-0
    3104:	00000857 	andeq	r0, r0, r7, asr r8
    3108:	06ff0421 	ldrbteq	r0, [pc], r1, lsr #8
    310c:	04220000 	strteq	r0, [r2], #-0
    3110:	000007b6 			; <UNDEFINED> instruction: 0x000007b6
    3114:	01880423 	orreq	r0, r8, r3, lsr #8
    3118:	04240000 	strteq	r0, [r4], #-0
    311c:	000009f7 	strdeq	r0, [r0], -r7
    3120:	0ba40425 	bleq	fe9041bc <GPIO_Ports+0xde900214>
    3124:	04260000 	strteq	r0, [r6], #-0
    3128:	00000256 	andeq	r0, r0, r6, asr r2
    312c:	09c70427 	stmibeq	r7, {r0, r1, r2, r5, sl}^
    3130:	04280000 	strteq	r0, [r8], #-0
    3134:	0000097e 	andeq	r0, r0, lr, ror r9
    3138:	08220429 	stmdaeq	r2!, {r0, r3, r5, sl}
    313c:	042a0000 	strteq	r0, [sl], #-0
    3140:	00000192 	muleq	r0, r2, r1
    3144:	0034042b 	eorseq	r0, r4, fp, lsr #8
    3148:	042c0000 	strteq	r0, [ip], #-0
    314c:	000005ee 	andeq	r0, r0, lr, ror #11
    3150:	0caf042d 	cfstrseq	mvf0, [pc], #180	; 320c <startup-0x1fffcdf4>
    3154:	042e0000 	strteq	r0, [lr], #-0
    3158:	00000d06 	andeq	r0, r0, r6, lsl #26
    315c:	0aaf042f 	beq	febc4220 <GPIO_Ports+0xdebc0278>
    3160:	04300000 	ldrteq	r0, [r0], #-0
    3164:	00000cbc 			; <UNDEFINED> instruction: 0x00000cbc
    3168:	03830431 	orreq	r0, r3, #822083584	; 0x31000000
    316c:	04320000 	ldrteq	r0, [r2], #-0
    3170:	000000bd 	strheq	r0, [r0], -sp
    3174:	080e0433 	stmdaeq	lr, {r0, r1, r4, r5, sl}
    3178:	04340000 	ldrteq	r0, [r4], #-0
    317c:	00000730 	andeq	r0, r0, r0, lsr r7
    3180:	083e0435 	ldmdaeq	lr!, {r0, r2, r4, r5, sl}
    3184:	04360000 	ldrteq	r0, [r6], #-0
    3188:	00000776 	andeq	r0, r0, r6, ror r7
    318c:	06e80437 			; <UNDEFINED> instruction: 0x06e80437
    3190:	04380000 	ldrteq	r0, [r8], #-0
    3194:	00000095 	muleq	r0, r5, r0
    3198:	0d5d0439 	cfldrdeq	mvd0, [sp, #-228]	; 0xffffff1c
    319c:	043a0000 	ldrteq	r0, [sl], #-0
    31a0:	000008a6 	andeq	r0, r0, r6, lsr #17
    31a4:	02e7043b 	rsceq	r0, r7, #989855744	; 0x3b000000
    31a8:	043c0000 	ldrteq	r0, [ip], #-0
    31ac:	00000b4c 	andeq	r0, r0, ip, asr #22
    31b0:	078e043d 			; <UNDEFINED> instruction: 0x078e043d
    31b4:	043e0000 	ldrteq	r0, [lr], #-0
    31b8:	000008b8 			; <UNDEFINED> instruction: 0x000008b8
    31bc:	0154043f 	cmpeq	r4, pc, lsr r4
    31c0:	04400000 	strbeq	r0, [r0], #-0
    31c4:	00000a4b 	andeq	r0, r0, fp, asr #20
    31c8:	03540441 	cmpeq	r4, #1090519040	; 0x41000000
    31cc:	04420000 	strbeq	r0, [r2], #-0
    31d0:	00000618 	andeq	r0, r0, r8, lsl r6
    31d4:	01f00443 	mvnseq	r0, r3, asr #8
    31d8:	04440000 	strbeq	r0, [r4], #-0
    31dc:	00000adb 	ldrdeq	r0, [r0], -fp
    31e0:	06060445 	streq	r0, [r6], -r5, asr #8
    31e4:	04460000 	strbeq	r0, [r6], #-0
    31e8:	00000162 	andeq	r0, r0, r2, ror #2
    31ec:	0b1f0447 	bleq	7c4310 <startup-0x1f83bcf0>
    31f0:	04480000 	strbeq	r0, [r8], #-0
    31f4:	000009b0 			; <UNDEFINED> instruction: 0x000009b0
    31f8:	0c380449 	cfldrseq	mvf0, [r8], #-292	; 0xfffffedc
    31fc:	044a0000 	strbeq	r0, [sl], #-0
    3200:	00000ce8 	andeq	r0, r0, r8, ror #25
    3204:	0642044b 	strbeq	r0, [r2], -fp, asr #8
    3208:	044c0000 	strbeq	r0, [ip], #-0
    320c:	0000079c 	muleq	r0, ip, r7
    3210:	00ea044d 	rsceq	r0, sl, sp, asr #8
    3214:	044e0000 	strbeq	r0, [lr], #-0
    3218:	000009bd 			; <UNDEFINED> instruction: 0x000009bd
    321c:	05b6044f 	ldreq	r0, [r6, #1103]!	; 0x44f
    3220:	04500000 	ldrbeq	r0, [r0], #-0
    3224:	00000805 	andeq	r0, r0, r5, lsl #16
    3228:	01050051 	qaddeq	r0, r1, r5
    322c:	0002db06 	andeq	sp, r2, r6, lsl #22
    3230:	06d10600 	ldrbeq	r0, [r1], r0, lsl #12
    3234:	2f050000 	svccs	0x00050000
    3238:	00002503 	andeq	r2, r0, r3, lsl #10
    323c:	017e0700 	cmneq	lr, r0, lsl #14
    3240:	2b060000 	blcs	183248 <startup-0x1fe7cdb8>
    3244:	00000271 	andeq	r0, r0, r1, ror r2
    3248:	d9080105 	stmdble	r8, {r0, r2, r8}
    324c:	05000002 	streq	r0, [r0, #-2]
    3250:	0b740502 	bleq	1d04660 <startup-0x1e2fb9a0>
    3254:	3c070000 	stccc	0, cr0, [r7], {-0}
    3258:	06000004 	streq	r0, [r0], -r4
    325c:	00028a39 	andeq	r8, r2, r9, lsr sl
    3260:	07020500 	streq	r0, [r2, -r0, lsl #10]
    3264:	00000c9c 	muleq	r0, ip, ip
    3268:	000d1807 	andeq	r1, sp, r7, lsl #16
    326c:	9c4d0600 	mcrrls	6, 0, r0, sp, cr0
    3270:	05000002 	streq	r0, [r0, #-2]
    3274:	07850504 	streq	r0, [r5, r4, lsl #10]
    3278:	59070000 	stmdbpl	r7, {}	; <UNPREDICTABLE>
    327c:	06000007 	streq	r0, [r0], -r7
    3280:	0002ae4f 	andeq	sl, r2, pc, asr #28
    3284:	07040500 	streq	r0, [r4, -r0, lsl #10]
    3288:	000009db 	ldrdeq	r0, [r0], -fp
    328c:	80050805 	andhi	r0, r5, r5, lsl #16
    3290:	05000007 	streq	r0, [r0, #-7]
    3294:	09d60708 	ldmibeq	r6, {r3, r8, r9, sl}^
    3298:	04080000 	streq	r0, [r8], #-0
    329c:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
    32a0:	02c30900 	sbceq	r0, r3, #0, 18
    32a4:	04050000 	streq	r0, [r5], #-0
    32a8:	0009e007 	andeq	lr, r9, r7
    32ac:	01800700 	orreq	r0, r0, r0, lsl #14
    32b0:	18070000 	stmdane	r7, {}	; <UNPREDICTABLE>
    32b4:	00000266 	andeq	r0, r0, r6, ror #4
    32b8:	0002d609 	andeq	sp, r2, r9, lsl #12
    32bc:	02d60a00 	sbcseq	r0, r6, #0, 20
    32c0:	e6090000 	str	r0, [r9], -r0
    32c4:	07000002 	streq	r0, [r0, -r2]
    32c8:	0000043e 	andeq	r0, r0, lr, lsr r4
    32cc:	027f2407 	rsbseq	r2, pc, #117440512	; 0x7000000
    32d0:	f0090000 			; <UNDEFINED> instruction: 0xf0090000
    32d4:	07000002 	streq	r0, [r0, -r2]
    32d8:	00000d1a 	andeq	r0, r0, sl, lsl sp
    32dc:	02912c07 	addseq	r2, r1, #1792	; 0x700
    32e0:	00090000 	andeq	r0, r9, r0
    32e4:	07000003 	streq	r0, [r0, -r3]
    32e8:	0000075b 	andeq	r0, r0, fp, asr r7
    32ec:	02a33007 	adceq	r3, r3, #7
    32f0:	10090000 	andne	r0, r9, r0
    32f4:	0a000003 	beq	3308 <startup-0x1fffccf8>
    32f8:	0000031b 	andeq	r0, r0, fp, lsl r3
    32fc:	010e040b 	tsteq	lr, fp, lsl #8
    3300:	03e101a0 	mvneq	r0, #160, 2	; 0x28
    3304:	220c0000 	andcs	r0, ip, #0
    3308:	0100000d 	tsteq	r0, sp
    330c:	03f101a2 	mvnseq	r0, #-2147483608	; 0x80000028
    3310:	0c000000 	stceq	0, cr0, [r0], {-0}
    3314:	000002c5 	andeq	r0, r0, r5, asr #5
    3318:	f601a301 			; <UNDEFINED> instruction: 0xf601a301
    331c:	20000003 	andcs	r0, r0, r3
    3320:	000a730c 	andeq	r7, sl, ip, lsl #6
    3324:	01a40100 			; <UNDEFINED> instruction: 0x01a40100
    3328:	000003f1 	strdeq	r0, [r0], -r1
    332c:	00000c80 	andeq	r0, r0, r0, lsl #25
    3330:	a5010000 	strge	r0, [r1, #-0]
    3334:	0003f601 	andeq	pc, r3, r1, lsl #12
    3338:	cc0da000 	stcgt	0, cr10, [sp], {-0}
    333c:	0100000c 	tsteq	r0, ip
    3340:	03f101a6 	mvnseq	r0, #-2147483607	; 0x80000029
    3344:	01000000 	mrseq	r0, (UNDEF: 0)
    3348:	00036f0d 	andeq	r6, r3, sp, lsl #30
    334c:	01a70100 			; <UNDEFINED> instruction: 0x01a70100
    3350:	000003f6 	strdeq	r0, [r0], -r6
    3354:	320d0120 	andcc	r0, sp, #32, 2
    3358:	01000001 	tsteq	r0, r1
    335c:	03f101a8 	mvnseq	r0, #168, 2	; 0x2a
    3360:	01800000 	orreq	r0, r0, r0
    3364:	0003790d 	andeq	r7, r3, sp, lsl #18
    3368:	01a90100 			; <UNDEFINED> instruction: 0x01a90100
    336c:	000003f6 	strdeq	r0, [r0], -r6
    3370:	120d01a0 	andne	r0, sp, #160, 2	; 0x28
    3374:	01000003 	tsteq	r0, r3
    3378:	03f101aa 	mvnseq	r0, #-2147483606	; 0x8000002a
    337c:	02000000 	andeq	r0, r0, #0
    3380:	0002f90d 	andeq	pc, r2, sp, lsl #18
    3384:	01ab0100 			; <UNDEFINED> instruction: 0x01ab0100
    3388:	00000406 	andeq	r0, r0, r6, lsl #8
    338c:	490e0220 	stmdbmi	lr, {r5, r9}
    3390:	ac010050 	stcge	0, cr0, [r1], {80}	; 0x50
    3394:	00042601 	andeq	r2, r4, r1, lsl #12
    3398:	0d030000 	stceq	0, cr0, [r3, #-0]
    339c:	00000303 	andeq	r0, r0, r3, lsl #6
    33a0:	2b01ad01 	blcs	6e7ac <startup-0x1ff91854>
    33a4:	f0000004 			; <UNDEFINED> instruction: 0xf0000004
    33a8:	055f0d03 	ldrbeq	r0, [pc, #-3331]	; 26ad <startup-0x1fffd953>
    33ac:	ae010000 	cdpge	0, 0, cr0, cr1, cr0, {0}
    33b0:	00031b01 	andeq	r1, r3, r1, lsl #22
    33b4:	000e0000 	andeq	r0, lr, r0
    33b8:	00031b0f 	andeq	r1, r3, pc, lsl #22
    33bc:	0003f100 	andeq	pc, r3, r0, lsl #2
    33c0:	02cf1000 	sbceq	r1, pc, #0
    33c4:	00070000 	andeq	r0, r7, r0
    33c8:	0003e109 	andeq	lr, r3, r9, lsl #2
    33cc:	03100f00 	tsteq	r0, #0, 30
    33d0:	04060000 	streq	r0, [r6], #-0
    33d4:	cf100000 	svcgt	0x00100000
    33d8:	17000002 	strne	r0, [r0, -r2]
    33dc:	03100f00 	tsteq	r0, #0, 30
    33e0:	04160000 	ldreq	r0, [r6], #-0
    33e4:	cf100000 	svcgt	0x00100000
    33e8:	37000002 	strcc	r0, [r0, -r2]
    33ec:	02e10f00 	rsceq	r0, r1, #0, 30
    33f0:	04260000 	strteq	r0, [r6], #-0
    33f4:	cf100000 	svcgt	0x00100000
    33f8:	ef000002 	svc	0x00000002
    33fc:	04160900 	ldreq	r0, [r6], #-2304	; 0xfffff700
    3400:	100f0000 	andne	r0, pc, r0
    3404:	3c000003 	stccc	0, cr0, [r0], {3}
    3408:	11000004 	tstne	r0, r4
    340c:	000002cf 	andeq	r0, r0, pc, asr #5
    3410:	06000283 	streq	r0, [r0], -r3, lsl #5
    3414:	00000996 	muleq	r0, r6, r9
    3418:	2501af01 	strcs	sl, [r1, #-3841]	; 0xfffff0ff
    341c:	12000003 	andne	r0, r0, #3
    3420:	01c0018c 	biceq	r0, r0, ip, lsl #3
    3424:	00000563 	andeq	r0, r0, r3, ror #10
    3428:	0001ea0c 	andeq	lr, r1, ip, lsl #20
    342c:	01c20100 	biceq	r0, r2, r0, lsl #2
    3430:	00000320 	andeq	r0, r0, r0, lsr #6
    3434:	02620c00 	rsbeq	r0, r2, #0, 24
    3438:	c3010000 	movwgt	r0, #4096	; 0x1000
    343c:	00031b01 	andeq	r1, r3, r1, lsl #22
    3440:	b80c0400 	stmdalt	ip, {sl}
    3444:	01000000 	mrseq	r0, (UNDEF: 0)
    3448:	031b01c4 	tsteq	fp, #196, 2	; 0x31
    344c:	0c080000 	stceq	0, cr0, [r8], {-0}
    3450:	000001d8 	ldrdeq	r0, [r0], -r8
    3454:	1b01c501 	blne	74860 <startup-0x1ff8b7a0>
    3458:	0c000003 	stceq	0, cr0, [r0], {3}
    345c:	52435313 	subpl	r5, r3, #1275068416	; 0x4c000000
    3460:	01c60100 	biceq	r0, r6, r0, lsl #2
    3464:	0000031b 	andeq	r0, r0, fp, lsl r3
    3468:	43431310 	movtmi	r1, #13072	; 0x3310
    346c:	c7010052 	smlsdgt	r1, r2, r0, r0
    3470:	00031b01 	andeq	r1, r3, r1, lsl #22
    3474:	53131400 	tstpl	r3, #0, 8
    3478:	01005048 	tsteq	r0, r8, asr #32
    347c:	057301c8 	ldrbeq	r0, [r3, #-456]!	; 0xfffffe38
    3480:	0c180000 	ldceq	0, cr0, [r8], {-0}
    3484:	00000559 	andeq	r0, r0, r9, asr r5
    3488:	1b01c901 	blne	75894 <startup-0x1ff8a76c>
    348c:	24000003 	strcs	r0, [r0], #-3
    3490:	000ac40c 	andeq	ip, sl, ip, lsl #8
    3494:	01ca0100 	biceq	r0, sl, r0, lsl #2
    3498:	0000031b 	andeq	r0, r0, fp, lsl r3
    349c:	04840c28 	streq	r0, [r4], #3112	; 0xc28
    34a0:	cb010000 	blgt	434a8 <startup-0x1ffbcb58>
    34a4:	00031b01 	andeq	r1, r3, r1, lsl #22
    34a8:	c70c2c00 	strgt	r2, [ip, -r0, lsl #24]
    34ac:	01000003 	tsteq	r0, r3
    34b0:	031b01cc 	tsteq	fp, #204, 2	; 0x33
    34b4:	0c300000 	ldceq	0, cr0, [r0], #-0
    34b8:	00000b6e 	andeq	r0, r0, lr, ror #22
    34bc:	1b01cd01 	blne	768c8 <startup-0x1ff89738>
    34c0:	34000003 	strcc	r0, [r0], #-3
    34c4:	0008730c 	andeq	r7, r8, ip, lsl #6
    34c8:	01ce0100 	biceq	r0, lr, r0, lsl #2
    34cc:	0000031b 	andeq	r0, r0, fp, lsl r3
    34d0:	0a920c38 	beq	fe4865b8 <GPIO_Ports+0xde482610>
    34d4:	cf010000 	svcgt	0x00010000
    34d8:	00031b01 	andeq	r1, r3, r1, lsl #22
    34dc:	50133c00 	andspl	r3, r3, r0, lsl #24
    34e0:	01005246 	tsteq	r0, r6, asr #4
    34e4:	058d01d0 	streq	r0, [sp, #464]	; 0x1d0
    34e8:	13400000 	movtne	r0, #0
    34ec:	00524644 	subseq	r4, r2, r4, asr #12
    34f0:	2001d101 	andcs	sp, r1, r1, lsl #2
    34f4:	48000003 	stmdami	r0, {r0, r1}
    34f8:	52444113 	subpl	r4, r4, #-1073741820	; 0xc0000004
    34fc:	01d20100 	bicseq	r0, r2, r0, lsl #2
    3500:	00000320 	andeq	r0, r0, r0, lsr #6
    3504:	0b690c4c 	bleq	1a4663c <startup-0x1e5b99c4>
    3508:	d3010000 	movwle	r0, #4096	; 0x1000
    350c:	0005a701 	andeq	sl, r5, r1, lsl #14
    3510:	8d0c5000 	stchi	0, cr5, [ip, #-0]
    3514:	0100000b 	tsteq	r0, fp
    3518:	05c101d4 	strbeq	r0, [r1, #468]	; 0x1d4
    351c:	0c600000 	stcleq	0, cr0, [r0], #-0
    3520:	000002c5 	andeq	r0, r0, r5, asr #5
    3524:	c601d501 	strgt	sp, [r1], -r1, lsl #10
    3528:	74000005 	strvc	r0, [r0], #-5
    352c:	000cc60c 	andeq	ip, ip, ip, lsl #12
    3530:	01d60100 	bicseq	r0, r6, r0, lsl #2
    3534:	0000031b 	andeq	r0, r0, fp, lsl r3
    3538:	e10f0088 	smlabb	pc, r8, r0, r0	; <UNPREDICTABLE>
    353c:	73000002 	movwvc	r0, #2
    3540:	10000005 	andne	r0, r0, r5
    3544:	000002cf 	andeq	r0, r0, pc, asr #5
    3548:	6309000b 	movwvs	r0, #36875	; 0x900b
    354c:	0f000005 	svceq	0x00000005
    3550:	00000320 	andeq	r0, r0, r0, lsr #6
    3554:	00000588 	andeq	r0, r0, r8, lsl #11
    3558:	0002cf10 	andeq	ip, r2, r0, lsl pc
    355c:	0a000100 	beq	3964 <startup-0x1fffc69c>
    3560:	00000578 	andeq	r0, r0, r8, ror r5
    3564:	00058809 	andeq	r8, r5, r9, lsl #16
    3568:	03200f00 	nopeq	{0}	; <UNPREDICTABLE>
    356c:	05a20000 	streq	r0, [r2, #0]!
    3570:	cf100000 	svcgt	0x00100000
    3574:	03000002 	movweq	r0, #2
    3578:	05920a00 	ldreq	r0, [r2, #2560]	; 0xa00
    357c:	a2090000 	andge	r0, r9, #0
    3580:	0f000005 	svceq	0x00000005
    3584:	00000320 	andeq	r0, r0, r0, lsr #6
    3588:	000005bc 			; <UNDEFINED> instruction: 0x000005bc
    358c:	0002cf10 	andeq	ip, r2, r0, lsl pc
    3590:	0a000400 	beq	4598 <startup-0x1fffba68>
    3594:	000005ac 	andeq	r0, r0, ip, lsr #11
    3598:	0005bc09 	andeq	fp, r5, r9, lsl #24
    359c:	03100f00 	tsteq	r0, #0, 30
    35a0:	05d60000 	ldrbeq	r0, [r6]
    35a4:	cf100000 	svcgt	0x00100000
    35a8:	04000002 	streq	r0, [r0], #-2
    35ac:	03ad0600 			; <UNDEFINED> instruction: 0x03ad0600
    35b0:	d7010000 	strle	r0, [r1, -r0]
    35b4:	00044801 	andeq	r4, r4, r1, lsl #16
    35b8:	01101200 	tsteq	r0, r0, lsl #4
    35bc:	062002bf 			; <UNDEFINED> instruction: 0x062002bf
    35c0:	5f0c0000 	svcpl	0x000c0000
    35c4:	01000015 	tsteq	r0, r5, lsl r0
    35c8:	031b02c1 	tsteq	fp, #268435468	; 0x1000000c
    35cc:	0c000000 	stceq	0, cr0, [r0], {-0}
    35d0:	000015d7 	ldrdeq	r1, [r0], -r7
    35d4:	1b02c201 	blne	b3de0 <startup-0x1ff4c220>
    35d8:	04000003 	streq	r0, [r0], #-3
    35dc:	4c415613 	mcrrmi	6, 1, r5, r1, cr3
    35e0:	02c30100 	sbceq	r0, r3, #0, 2
    35e4:	0000031b 	andeq	r0, r0, fp, lsl r3
    35e8:	15780c08 	ldrbne	r0, [r8, #-3080]!	; 0xfffff3f8
    35ec:	c4010000 	strgt	r0, [r1], #-0
    35f0:	00032002 	andeq	r2, r3, r2
    35f4:	06000c00 	streq	r0, [r0], -r0, lsl #24
    35f8:	000015b1 			; <UNDEFINED> instruction: 0x000015b1
    35fc:	e202c501 	and	ip, r2, #4194304	; 0x400000
    3600:	0f000005 	svceq	0x00000005
    3604:	00000310 	andeq	r0, r0, r0, lsl r3
    3608:	0000063c 	andeq	r0, r0, ip, lsr r6
    360c:	0002cf10 	andeq	ip, r2, r0, lsl pc
    3610:	14000100 	strne	r0, [r0], #-256	; 0xffffff00
    3614:	00000c17 	andeq	r0, r0, r7, lsl ip
    3618:	0b06fa01 	bleq	1c1e24 <startup-0x1fe3e1dc>
    361c:	15000003 	strne	r0, [r0, #-3]
    3620:	00000669 	andeq	r0, r0, r9, ror #12
    3624:	03103b08 	tsteq	r0, #8, 22	; 0x2000
    3628:	07160000 	ldreq	r0, [r6, -r0]
    362c:	00027101 	andeq	r7, r2, r1, lsl #2
    3630:	035d0500 	cmpeq	sp, #0, 10
    3634:	0000066e 	andeq	r0, r0, lr, ror #12
    3638:	00111704 	andseq	r1, r1, r4, lsl #14
    363c:	53170000 	tstpl	r7, #0
    3640:	01005445 	tsteq	r0, r5, asr #8
    3644:	1b0b0600 	blne	2c4e4c <startup-0x1fd3b1b4>
    3648:	5d050000 	stcpl	0, cr0, [r5, #-0]
    364c:	00065303 	andeq	r5, r6, r3, lsl #6
    3650:	10460600 	subne	r0, r6, r0, lsl #12
    3654:	5d050000 	stcpl	0, cr0, [r5, #-0]
    3658:	00065303 	andeq	r5, r6, r3, lsl #6
    365c:	01071600 	tsteq	r7, r0, lsl #12
    3660:	00000271 	andeq	r0, r0, r1, ror r2
    3664:	a1035f05 	tstge	r3, r5, lsl #30
    3668:	04000006 	streq	r0, [r0], #-6
    366c:	0000091d 	andeq	r0, r0, sp, lsl r9
    3670:	0bb60400 	bleq	fed84678 <GPIO_Ports+0xded806d0>
    3674:	00010000 	andeq	r0, r1, r0
    3678:	0009a006 	andeq	sl, r9, r6
    367c:	035f0500 	cmpeq	pc, #0, 10
    3680:	00000686 	andeq	r0, r0, r6, lsl #13
    3684:	71010716 	tstvc	r1, r6, lsl r7
    3688:	05000002 	streq	r0, [r0, #-2]
    368c:	06c80362 	strbeq	r0, [r8], r2, ror #6
    3690:	88040000 	stmdahi	r4, {}	; <UNPREDICTABLE>
    3694:	0000001a 	andeq	r0, r0, sl, lsl r0
    3698:	001d5a04 	andseq	r5, sp, r4, lsl #20
    369c:	06000100 	streq	r0, [r0], -r0, lsl #2
    36a0:	00001cf3 	strdeq	r1, [r0], -r3
    36a4:	ad036205 	sfmge	f6, 4, [r3, #-20]	; 0xffffffec
    36a8:	12000006 	andne	r0, r0, #6
    36ac:	05c30528 	strbeq	r0, [r3, #1320]	; 0x528
    36b0:	00000760 	andeq	r0, r0, r0, ror #14
    36b4:	000c4c0c 	andeq	r4, ip, ip, lsl #24
    36b8:	05c50500 	strbeq	r0, [r5, #1280]	; 0x500
    36bc:	0000031b 	andeq	r0, r0, fp, lsl r3
    36c0:	0a970c00 	beq	fe5c66c8 <GPIO_Ports+0xde5c2720>
    36c4:	c6050000 	strgt	r0, [r5], -r0
    36c8:	00031b05 	andeq	r1, r3, r5, lsl #22
    36cc:	1a0c0400 	bne	3046d4 <startup-0x1fcfb92c>
    36d0:	05000007 	streq	r0, [r0, #-7]
    36d4:	031b05c7 	tsteq	fp, #834666496	; 0x31c00000
    36d8:	0c080000 	stceq	0, cr0, [r8], {-0}
    36dc:	000007a8 	andeq	r0, r0, r8, lsr #15
    36e0:	1b05c805 	blne	1756fc <startup-0x1fe8a904>
    36e4:	0c000003 	stceq	0, cr0, [r0], {3}
    36e8:	52444913 	subpl	r4, r4, #311296	; 0x4c000
    36ec:	05c90500 	strbeq	r0, [r9, #1280]	; 0x500
    36f0:	0000031b 	andeq	r0, r0, fp, lsl r3
    36f4:	444f1310 	strbmi	r1, [pc], #-784	; 36fc <startup-0x1fffc904>
    36f8:	ca050052 	bgt	143848 <startup-0x1febc7b8>
    36fc:	00031b05 	andeq	r1, r3, r5, lsl #22
    3700:	ea0c1400 	b	308708 <startup-0x1fcf78f8>
    3704:	05000007 	streq	r0, [r0, #-7]
    3708:	02fb05cb 	rscseq	r0, fp, #851443712	; 0x32c00000
    370c:	0c180000 	ldceq	0, cr0, [r8], {-0}
    3710:	000007e4 	andeq	r0, r0, r4, ror #15
    3714:	fb05cc05 	blx	176732 <startup-0x1fe898ce>
    3718:	1a000002 	bne	3728 <startup-0x1fffc8d8>
    371c:	0006fa0c 	andeq	pc, r6, ip, lsl #20
    3720:	05cd0500 	strbeq	r0, [sp, #1280]	; 0x500
    3724:	0000031b 	andeq	r0, r0, fp, lsl r3
    3728:	4641131c 			; <UNDEFINED> instruction: 0x4641131c
    372c:	ce050052 	mcrgt	0, 0, r0, cr5, cr2, {2}
    3730:	00077005 	andeq	r7, r7, r5
    3734:	0f002000 	svceq	0x00002000
    3738:	0000031b 	andeq	r0, r0, fp, lsl r3
    373c:	00000770 	andeq	r0, r0, r0, ror r7
    3740:	0002cf10 	andeq	ip, r2, r0, lsl pc
    3744:	09000100 	stmdbeq	r0, {r8}
    3748:	00000760 	andeq	r0, r0, r0, ror #14
    374c:	000bf706 	andeq	pc, fp, r6, lsl #14
    3750:	05cf0500 	strbeq	r0, [pc, #1280]	; 3c58 <startup-0x1fffc3a8>
    3754:	000006d4 	ldrdeq	r0, [r0], -r4
    3758:	64059812 	strvs	r9, [r5], #-2066	; 0xfffff7ee
    375c:	00094406 	andeq	r4, r9, r6, lsl #8
    3760:	52431300 	subpl	r1, r3, #0, 6
    3764:	06660500 	strbteq	r0, [r6], -r0, lsl #10
    3768:	0000031b 	andeq	r0, r0, fp, lsl r3
    376c:	1aac0c00 	bne	feb06774 <GPIO_Ports+0xdeb027cc>
    3770:	67050000 	strvs	r0, [r5, -r0]
    3774:	00031b06 	andeq	r1, r3, r6, lsl #22
    3778:	c40c0400 	strgt	r0, [ip], #-1024	; 0xfffffc00
    377c:	0500001e 	streq	r0, [r0, #-30]	; 0xffffffe2
    3780:	031b0668 	tsteq	fp, #104, 12	; 0x6800000
    3784:	13080000 	movwne	r0, #32768	; 0x8000
    3788:	00524943 	subseq	r4, r2, r3, asr #18
    378c:	1b066905 	blne	19dba8 <startup-0x1fe62458>
    3790:	0c000003 	stceq	0, cr0, [r0], {3}
    3794:	0018c70c 	andseq	ip, r8, ip, lsl #14
    3798:	066a0500 	strbteq	r0, [sl], -r0, lsl #10
    379c:	0000031b 	andeq	r0, r0, fp, lsl r3
    37a0:	1de40c10 	stclne	12, cr0, [r4, #64]!	; 0x40
    37a4:	6b050000 	blvs	1437ac <startup-0x1febc854>
    37a8:	00031b06 	andeq	r1, r3, r6, lsl #22
    37ac:	ea0c1400 	b	3087b4 <startup-0x1fcf784c>
    37b0:	0500001c 	streq	r0, [r0, #-28]	; 0xffffffe4
    37b4:	031b066c 	tsteq	fp, #108, 12	; 0x6c00000
    37b8:	0c180000 	ldceq	0, cr0, [r8], {-0}
    37bc:	000002c5 	andeq	r0, r0, r5, asr #5
    37c0:	10066d05 	andne	r6, r6, r5, lsl #26
    37c4:	1c000003 	stcne	0, cr0, [r0], {3}
    37c8:	001d160c 	andseq	r1, sp, ip, lsl #12
    37cc:	066e0500 	strbteq	r0, [lr], -r0, lsl #10
    37d0:	0000031b 	andeq	r0, r0, fp, lsl r3
    37d4:	1afb0c20 	bne	ffec685c <GPIO_Ports+0xdfec28b4>
    37d8:	6f050000 	svcvs	0x00050000
    37dc:	00031b06 	andeq	r1, r3, r6, lsl #22
    37e0:	cf0c2400 	svcgt	0x000c2400
    37e4:	05000002 	streq	r0, [r0, #-2]
    37e8:	062c0670 			; <UNDEFINED> instruction: 0x062c0670
    37ec:	0c280000 	stceq	0, cr0, [r8], #-0
    37f0:	00001dc5 	andeq	r1, r0, r5, asr #27
    37f4:	1b067105 	blne	19fc10 <startup-0x1fe603f0>
    37f8:	30000003 	andcc	r0, r0, r3
    37fc:	00190f0c 	andseq	r0, r9, ip, lsl #30
    3800:	06720500 	ldrbteq	r0, [r2], -r0, lsl #10
    3804:	0000031b 	andeq	r0, r0, fp, lsl r3
    3808:	1f460c34 	svcne	0x00460c34
    380c:	73050000 	movwvc	r0, #20480	; 0x5000
    3810:	00031b06 	andeq	r1, r3, r6, lsl #22
    3814:	6f0c3800 	svcvs	0x000c3800
    3818:	05000003 	streq	r0, [r0, #-3]
    381c:	03100674 	tsteq	r0, #116, 12	; 0x7400000
    3820:	0c3c0000 	ldceq	0, cr0, [ip], #-0
    3824:	00001d1f 	andeq	r1, r0, pc, lsl sp
    3828:	1b067505 	blne	1a0c44 <startup-0x1fe5f3bc>
    382c:	40000003 	andmi	r0, r0, r3
    3830:	0018210c 	andseq	r2, r8, ip, lsl #2
    3834:	06760500 	ldrbteq	r0, [r6], -r0, lsl #10
    3838:	0000031b 	andeq	r0, r0, fp, lsl r3
    383c:	03790c44 	cmneq	r9, #68, 24	; 0x4400
    3840:	77050000 	strvc	r0, [r5, -r0]
    3844:	00062c06 	andeq	r2, r6, r6, lsl #24
    3848:	3d0c4800 	stccc	8, cr4, [ip, #-0]
    384c:	05000018 	streq	r0, [r0, #-24]	; 0xffffffe8
    3850:	031b0678 	tsteq	fp, #120, 12	; 0x7800000
    3854:	0c500000 	mraeq	r0, r0, acc0
    3858:	00001773 	andeq	r1, r0, r3, ror r7
    385c:	1b067905 	blne	1a1c78 <startup-0x1fe5e388>
    3860:	54000003 	strpl	r0, [r0], #-3
    3864:	001d740c 	andseq	r7, sp, ip, lsl #8
    3868:	067a0500 	ldrbteq	r0, [sl], -r0, lsl #10
    386c:	0000031b 	andeq	r0, r0, fp, lsl r3
    3870:	02f90c58 	rscseq	r0, r9, #88, 24	; 0x5800
    3874:	7b050000 	blvc	14387c <startup-0x1febc784>
    3878:	00031006 	andeq	r1, r3, r6
    387c:	5c0c5c00 	stcpl	12, cr5, [ip], {-0}
    3880:	0500001c 	streq	r0, [r0, #-28]	; 0xffffffe4
    3884:	031b067c 	tsteq	fp, #124, 12	; 0x7c00000
    3888:	0c600000 	stcleq	0, cr0, [r0], #-0
    388c:	00001b57 	andeq	r1, r0, r7, asr fp
    3890:	1b067d05 	blne	1a2cac <startup-0x1fe5d354>
    3894:	64000003 	strvs	r0, [r0], #-3
    3898:	0003030c 	andeq	r0, r3, ip, lsl #6
    389c:	067e0500 	ldrbteq	r0, [lr], -r0, lsl #10
    38a0:	0000062c 	andeq	r0, r0, ip, lsr #12
    38a4:	19a10c68 	stmibne	r1!, {r3, r5, r6, sl, fp}
    38a8:	7f050000 	svcvc	0x00050000
    38ac:	00031b06 	andeq	r1, r3, r6, lsl #22
    38b0:	43137000 	tstmi	r3, #0
    38b4:	05005253 	streq	r5, [r0, #-595]	; 0xfffffdad
    38b8:	031b0680 	tsteq	fp, #128, 12	; 0x8000000
    38bc:	0c740000 	ldcleq	0, cr0, [r4], #-0
    38c0:	000018af 	andeq	r1, r0, pc, lsr #17
    38c4:	2c068105 	stfcsd	f0, [r6], {5}
    38c8:	78000006 	stmdavc	r0, {r1, r2}
    38cc:	001af50c 	andseq	pc, sl, ip, lsl #10
    38d0:	06820500 	streq	r0, [r2], r0, lsl #10
    38d4:	0000031b 	andeq	r0, r0, fp, lsl r3
    38d8:	166d0c80 	strbtne	r0, [sp], -r0, lsl #25
    38dc:	83050000 	movwhi	r0, #20480	; 0x5000
    38e0:	00031b06 	andeq	r1, r3, r6, lsl #22
    38e4:	be0c8400 	cfcpyslt	mvf8, mvf12
    38e8:	0500001e 	streq	r0, [r0, #-30]	; 0xffffffe2
    38ec:	031b0684 	tsteq	fp, #132, 12	; 0x8400000
    38f0:	0c880000 	stceq	0, cr0, [r8], {0}
    38f4:	00001865 	andeq	r1, r0, r5, ror #16
    38f8:	1b068505 	blne	1a4d14 <startup-0x1fe5b2ec>
    38fc:	8c000003 	stchi	0, cr0, [r0], {3}
    3900:	001c730c 	andseq	r7, ip, ip, lsl #6
    3904:	06860500 	streq	r0, [r6], r0, lsl #10
    3908:	0000031b 	andeq	r0, r0, fp, lsl r3
    390c:	1d990c90 	ldcne	12, cr0, [r9, #576]	; 0x240
    3910:	87050000 	strhi	r0, [r5, -r0]
    3914:	00031b06 	andeq	r1, r3, r6, lsl #22
    3918:	06009400 	streq	r9, [r0], -r0, lsl #8
    391c:	00001dff 	strdeq	r1, [r0], -pc	; <UNPREDICTABLE>
    3920:	81068905 	tsthi	r6, r5, lsl #18
    3924:	18000007 	stmdane	r0, {r0, r1, r2}
    3928:	89300910 	ldmdbhi	r0!, {r4, r8, fp}
    392c:	19000009 	stmdbne	r0, {r0, r3}
    3930:	00001ef6 	strdeq	r1, [r0], -r6
    3934:	03103209 	tsteq	r0, #-1879048192	; 0x90000000
    3938:	19000000 	stmdbne	r0, {}	; <UNPREDICTABLE>
    393c:	000016a1 	andeq	r1, r0, r1, lsr #13
    3940:	03103309 	tsteq	r0, #603979776	; 0x24000000
    3944:	19040000 	stmdbne	r4, {}	; <UNPREDICTABLE>
    3948:	0000193c 	andeq	r1, r0, ip, lsr r9
    394c:	03103409 	tsteq	r0, #150994944	; 0x9000000
    3950:	19080000 	stmdbne	r8, {}	; <UNPREDICTABLE>
    3954:	00001917 	andeq	r1, r0, r7, lsl r9
    3958:	03103509 	tsteq	r0, #37748736	; 0x2400000
    395c:	000c0000 	andeq	r0, ip, r0
    3960:	001ded07 	andseq	lr, sp, r7, lsl #26
    3964:	50360900 	eorspl	r0, r6, r0, lsl #18
    3968:	0f000009 	svceq	0x00000009
    396c:	000002eb 	andeq	r0, r0, fp, ror #5
    3970:	000009a4 	andeq	r0, r0, r4, lsr #19
    3974:	0002cf10 	andeq	ip, r2, r0, lsl pc
    3978:	0a000f00 	beq	7580 <startup-0x1fff8a80>
    397c:	00000994 	muleq	r0, r4, r9
    3980:	0009a409 	andeq	sl, r9, r9, lsl #8
    3984:	1aca1a00 	bne	ff28a18c <GPIO_Ports+0xdf2861e4>
    3988:	99020000 	stmdbls	r2, {}	; <UNPREDICTABLE>
    398c:	000009a9 	andeq	r0, r0, r9, lsr #19
    3990:	3f740305 	svccc	0x00740305
    3994:	071b2000 	ldreq	r2, [fp, -r0]
    3998:	00027101 	andeq	r7, r2, r1, lsl #2
    399c:	e5420a00 	strb	r0, [r2, #-2560]	; 0xfffff600
    39a0:	04000009 	streq	r0, [r0], #-9
    39a4:	000006db 	ldrdeq	r0, [r0], -fp
    39a8:	05810400 	streq	r0, [r1, #1024]	; 0x400
    39ac:	04010000 	streq	r0, [r1], #-0
    39b0:	00000202 	andeq	r0, r0, r2, lsl #4
    39b4:	02270402 	eoreq	r0, r7, #33554432	; 0x2000000
    39b8:	00030000 	andeq	r0, r3, r0
    39bc:	000a7807 	andeq	r7, sl, r7, lsl #16
    39c0:	bf470a00 	svclt	0x00470a00
    39c4:	1b000009 	blne	39f0 <startup-0x1fffc610>
    39c8:	02710107 	rsbseq	r0, r1, #-1073741823	; 0xc0000001
    39cc:	4f0a0000 	svcmi	0x000a0000
    39d0:	00000a0a 	andeq	r0, r0, sl, lsl #20
    39d4:	00031704 	andeq	r1, r3, r4, lsl #14
    39d8:	6c040000 	stcvs	0, cr0, [r4], {-0}
    39dc:	01000002 	tsteq	r0, r2
    39e0:	010c0700 	tsteq	ip, r0, lsl #14
    39e4:	520a0000 	andpl	r0, sl, #0
    39e8:	000009f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    39ec:	7101071b 	tstvc	r1, fp, lsl r7
    39f0:	0a000002 	beq	3a00 <startup-0x1fffc600>
    39f4:	000a3b5a 	andeq	r3, sl, sl, asr fp
    39f8:	04470400 	strbeq	r0, [r7], #-1024	; 0xfffffc00
    39fc:	04000000 	streq	r0, [r0], #-0
    3a00:	00000764 	andeq	r0, r0, r4, ror #14
    3a04:	0d6f0401 	cfstrdeq	mvd0, [pc, #-4]!	; 3a08 <startup-0x1fffc5f8>
    3a08:	04020000 	streq	r0, [r2], #-0
    3a0c:	000007f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    3a10:	ed070003 	stc	0, cr0, [r7, #-12]
    3a14:	0a00000a 	beq	3a44 <startup-0x1fffc5bc>
    3a18:	000a155f 	andeq	r1, sl, pc, asr r5
    3a1c:	01071b00 	tsteq	r7, r0, lsl #22
    3a20:	00000271 	andeq	r0, r0, r1, ror r2
    3a24:	0a666e0a 	beq	199f254 <startup-0x1e660dac>
    3a28:	a7040000 	strge	r0, [r4, -r0]
    3a2c:	00000000 	andeq	r0, r0, r0
    3a30:	000c7104 	andeq	r7, ip, r4, lsl #2
    3a34:	a6040100 	strge	r0, [r4], -r0, lsl #2
    3a38:	02000001 	andeq	r0, r0, #1
    3a3c:	03b60700 			; <UNDEFINED> instruction: 0x03b60700
    3a40:	720a0000 	andvc	r0, sl, #0
    3a44:	00000a46 	andeq	r0, r0, r6, asr #20
    3a48:	840a0818 	strhi	r0, [sl], #-2072	; 0xfffff7e8
    3a4c:	00000ab6 			; <UNDEFINED> instruction: 0x00000ab6
    3a50:	000b1119 	andeq	r1, fp, r9, lsl r1
    3a54:	10860a00 	addne	r0, r6, r0, lsl #20
    3a58:	00000003 	andeq	r0, r0, r3
    3a5c:	000a3c19 	andeq	r3, sl, r9, lsl ip
    3a60:	e5890a00 	str	r0, [r9, #2560]	; 0xa00
    3a64:	04000009 	streq	r0, [r0], #-9
    3a68:	00084c19 	andeq	r4, r8, r9, lsl ip
    3a6c:	3b8c0a00 	blcc	fe306274 <GPIO_Ports+0xde3022cc>
    3a70:	0500000a 	streq	r0, [r0, #-10]
    3a74:	00074e19 	andeq	r4, r7, r9, lsl lr
    3a78:	0a8f0a00 	beq	fe3c6280 <GPIO_Ports+0xde3c22d8>
    3a7c:	0600000a 	streq	r0, [r0], -sl
    3a80:	000b4219 	andeq	r4, fp, r9, lsl r2
    3a84:	66920a00 	ldrvs	r0, [r2], r0, lsl #20
    3a88:	0700000a 	streq	r0, [r0, -sl]
    3a8c:	027a0700 	rsbseq	r0, sl, #0, 14
    3a90:	940a0000 	strls	r0, [sl], #-0
    3a94:	00000a71 	andeq	r0, r0, r1, ror sl
    3a98:	001eb81c 	andseq	fp, lr, ip, lsl r8
    3a9c:	010b2000 	mrseq	r2, (UNDEF: 11)
    3aa0:	00000b39 	andeq	r0, r0, r9, lsr fp
    3aa4:	0064691d 	rsbeq	r6, r4, sp, lsl r9
    3aa8:	0b39030b 	bleq	e446dc <startup-0x1f1bb924>
    3aac:	19000000 	stmdbne	r0, {}	; <UNPREDICTABLE>
    3ab0:	000017f3 	strdeq	r1, [r0], -r3
    3ab4:	02c3040b 	sbceq	r0, r3, #184549376	; 0xb000000
    3ab8:	19040000 	stmdbne	r4, {}	; <UNPREDICTABLE>
    3abc:	00001769 	andeq	r1, r0, r9, ror #14
    3ac0:	0b39050b 	bleq	e44ef4 <startup-0x1f1bb10c>
    3ac4:	19080000 	stmdbne	r8, {}	; <UNPREDICTABLE>
    3ac8:	00001cba 			; <UNDEFINED> instruction: 0x00001cba
    3acc:	0b39060b 	bleq	e45300 <startup-0x1f1bad00>
    3ad0:	19090000 	stmdbne	r9, {}	; <UNPREDICTABLE>
    3ad4:	00001e0b 	andeq	r1, r0, fp, lsl #28
    3ad8:	02c3070b 	sbceq	r0, r3, #2883584	; 0x2c0000
    3adc:	190c0000 	stmdbne	ip, {}	; <UNPREDICTABLE>
    3ae0:	00001dbb 			; <UNDEFINED> instruction: 0x00001dbb
    3ae4:	02c3080b 	sbceq	r0, r3, #720896	; 0xb0000
    3ae8:	19100000 	ldmdbne	r0, {}	; <UNPREDICTABLE>
    3aec:	00001927 	andeq	r1, r0, r7, lsr #18
    3af0:	02c3090b 	sbceq	r0, r3, #180224	; 0x2c000
    3af4:	19140000 	ldmdbne	r4, {}	; <UNPREDICTABLE>
    3af8:	00001e8a 	andeq	r1, r0, sl, lsl #29
    3afc:	02c30a0b 	sbceq	r0, r3, #45056	; 0xb000
    3b00:	19180000 	ldmdbne	r8, {}	; <UNPREDICTABLE>
    3b04:	00001e1b 	andeq	r1, r0, fp, lsl lr
    3b08:	0b400b0b 	bleq	100673c <startup-0x1eff98c4>
    3b0c:	001c0000 	andseq	r0, ip, r0
    3b10:	e2080105 	and	r0, r8, #1073741825	; 0x40000001
    3b14:	1e000002 	cdpne	0, 0, cr0, cr0, cr2, {0}
    3b18:	00077504 	andeq	r7, r7, r4, lsl #10
    3b1c:	1eb90700 	cdpne	7, 11, cr0, cr9, cr0, {0}
    3b20:	0c0b0000 	stceq	0, cr0, [fp], {-0}
    3b24:	00000ac1 	andeq	r0, r0, r1, asr #21
    3b28:	000b4609 	andeq	r4, fp, r9, lsl #12
    3b2c:	0c141800 	ldceq	8, cr1, [r4], {-0}
    3b30:	000ba78d 	andeq	sl, fp, sp, lsl #15
    3b34:	03691900 	cmneq	r9, #0, 18
    3b38:	8f0c0000 	svchi	0x000c0000
    3b3c:	00000310 	andeq	r0, r0, r0, lsl r3
    3b40:	04901900 	ldreq	r1, [r0], #2304	; 0x900
    3b44:	920c0000 	andls	r0, ip, #0
    3b48:	00000310 	andeq	r0, r0, r0, lsl r3
    3b4c:	44491d04 	strbmi	r1, [r9], #-3332	; 0xfffff2fc
    3b50:	950c0045 	strls	r0, [ip, #-69]	; 0xffffffbb
    3b54:	000002d6 	ldrdeq	r0, [r0], -r6
    3b58:	54521d08 	ldrbpl	r1, [r2], #-3336	; 0xfffff2f8
    3b5c:	990c0052 	stmdbls	ip, {r1, r4, r6}
    3b60:	000002d6 	ldrdeq	r0, [r0], -r6
    3b64:	4c441d09 	mcrrmi	13, 0, r1, r4, cr9
    3b68:	9d0c0043 	stcls	0, cr0, [ip, #-268]	; 0xfffffef4
    3b6c:	000002d6 	ldrdeq	r0, [r0], -r6
    3b70:	11a8190a 			; <UNDEFINED> instruction: 0x11a8190a
    3b74:	a10c0000 	mrsge	r0, (UNDEF: 12)
    3b78:	00000ba7 	andeq	r0, r0, r7, lsr #23
    3b7c:	d60f000b 	strle	r0, [pc], -fp
    3b80:	b7000002 	strlt	r0, [r0, -r2]
    3b84:	1000000b 	andne	r0, r0, fp
    3b88:	000002cf 	andeq	r0, r0, pc, asr #5
    3b8c:	50070007 	andpl	r0, r7, r7
    3b90:	0c000005 	stceq	0, cr0, [r0], {5}
    3b94:	000b56a3 	andeq	r5, fp, r3, lsr #13
    3b98:	0c141800 	ldceq	8, cr1, [r4], {-0}
    3b9c:	000c1fa8 	andeq	r1, ip, r8, lsr #31
    3ba0:	03691900 	cmneq	r9, #0, 18
    3ba4:	aa0c0000 	bge	303bac <startup-0x1fcfc454>
    3ba8:	00000310 	andeq	r0, r0, r0, lsl r3
    3bac:	04901900 	ldreq	r1, [r0], #2304	; 0x900
    3bb0:	ad0c0000 	stcge	0, cr0, [ip, #-0]
    3bb4:	00000310 	andeq	r0, r0, r0, lsl r3
    3bb8:	44491d04 	strbmi	r1, [r9], #-3332	; 0xfffff2fc
    3bbc:	b00c0045 	andlt	r0, ip, r5, asr #32
    3bc0:	000002d6 	ldrdeq	r0, [r0], -r6
    3bc4:	54521d08 	ldrbpl	r1, [r2], #-3336	; 0xfffff2f8
    3bc8:	b40c0052 	strlt	r0, [ip], #-82	; 0xffffffae
    3bcc:	000002d6 	ldrdeq	r0, [r0], -r6
    3bd0:	4c441d09 	mcrrmi	13, 0, r1, r4, cr9
    3bd4:	b80c0043 	stmdalt	ip, {r0, r1, r6}
    3bd8:	000002d6 	ldrdeq	r0, [r0], -r6
    3bdc:	11a8190a 			; <UNDEFINED> instruction: 0x11a8190a
    3be0:	bb0c0000 	bllt	303be8 <startup-0x1fcfc418>
    3be4:	00000ba7 	andeq	r0, r0, r7, lsr #23
    3be8:	4d461d0b 	stclmi	13, cr1, [r6, #-44]	; 0xffffffd4
    3bec:	be0c0049 	cdplt	0, 0, cr0, cr12, cr9, {2}
    3bf0:	000002d6 	ldrdeq	r0, [r0], -r6
    3bf4:	25070013 	strcs	r0, [r7, #-19]	; 0xffffffed
    3bf8:	0c000009 	stceq	0, cr0, [r0], {9}
    3bfc:	000bc2c1 	andeq	ip, fp, r1, asr #5
    3c00:	0d041800 	stceq	8, cr1, [r4, #-0]
    3c04:	000c8c13 	andeq	r8, ip, r3, lsl ip
    3c08:	088d1f00 	stmeq	sp, {r8, r9, sl, fp, ip}
    3c0c:	150d0000 	strne	r0, [sp, #-0]
    3c10:	00000310 	andeq	r0, r0, r0, lsl r3
    3c14:	00180804 	andseq	r0, r8, r4, lsl #16
    3c18:	0001371f 	andeq	r3, r1, pc, lsl r7
    3c1c:	10190d00 	andsne	r0, r9, r0, lsl #26
    3c20:	04000003 	streq	r0, [r0], #-3
    3c24:	20000e0a 	andcs	r0, r0, sl, lsl #28
    3c28:	0d004449 	cfstrseq	mvf4, [r0, #-292]	; 0xfffffedc
    3c2c:	0003101d 	andeq	r1, r3, sp, lsl r0
    3c30:	07070400 	streq	r0, [r7, -r0, lsl #8]
    3c34:	01281f00 			; <UNDEFINED> instruction: 0x01281f00
    3c38:	210d0000 	mrscs	r0, (UNDEF: 13)
    3c3c:	00000310 	andeq	r0, r0, r0, lsl r3
    3c40:	00060104 	andeq	r0, r6, r4, lsl #2
    3c44:	0007ae1f 	andeq	sl, r7, pc, lsl lr
    3c48:	10240d00 	eorne	r0, r4, r0, lsl #26
    3c4c:	04000003 	streq	r0, [r0], #-3
    3c50:	1f000303 	svcne	0x00000303
    3c54:	0000008d 	andeq	r0, r0, sp, lsl #1
    3c58:	0310270d 	tsteq	r0, #3407872	; 0x340000
    3c5c:	03040000 	movweq	r0, #16384	; 0x4000
    3c60:	07000000 	streq	r0, [r0, -r0]
    3c64:	00000489 	andeq	r0, r0, r9, lsl #9
    3c68:	0c2a280d 	stceq	8, cr2, [sl], #-52	; 0xffffffcc
    3c6c:	04180000 	ldreq	r0, [r8], #-0
    3c70:	0cdb2d0d 	ldcleq	13, cr2, [fp], {13}
    3c74:	561f0000 	ldrpl	r0, [pc], -r0
    3c78:	0d000004 	stceq	0, cr0, [r0, #-16]
    3c7c:	0003102f 	andeq	r1, r3, pc, lsr #32
    3c80:	1f010400 	svcne	0x00010400
    3c84:	54522000 	ldrbpl	r2, [r2], #-0
    3c88:	320d0052 	andcc	r0, sp, #82	; 0x52
    3c8c:	00000310 	andeq	r0, r0, r0, lsl r3
    3c90:	001e0104 	andseq	r0, lr, r4, lsl #2
    3c94:	45444920 	strbmi	r4, [r4, #-2336]	; 0xfffff6e0
    3c98:	10350d00 	eorsne	r0, r5, r0, lsl #26
    3c9c:	04000003 	streq	r0, [r0], #-3
    3ca0:	20001d01 	andcs	r1, r0, r1, lsl #26
    3ca4:	0d004449 	cfstrseq	mvf4, [r0, #-292]	; 0xfffffedc
    3ca8:	00031037 	andeq	r1, r3, r7, lsr r0
    3cac:	001d0400 	andseq	r0, sp, r0, lsl #8
    3cb0:	24070000 	strcs	r0, [r7], #-0
    3cb4:	0d00000c 	stceq	0, cr0, [r0, #-48]	; 0xffffffd0
    3cb8:	000c9738 	andeq	r9, ip, r8, lsr r7
    3cbc:	64692100 	strbtvs	r2, [r9], #-256	; 0xffffff00
    3cc0:	10190400 	andsne	r0, r9, r0, lsl #8
    3cc4:	05000003 	streq	r0, [r0, #-3]
    3cc8:	003e8403 	eorseq	r8, lr, r3, lsl #8
    3ccc:	16892220 	strne	r2, [r9], r0, lsr #4
    3cd0:	1a040000 	bne	103cd8 <startup-0x1fefc328>
    3cd4:	00000b39 	andeq	r0, r0, r9, lsr fp
    3cd8:	3f840305 	svccc	0x00840305
    3cdc:	f00f2000 			; <UNDEFINED> instruction: 0xf00f2000
    3ce0:	17000002 	strne	r0, [r0, -r2]
    3ce4:	1000000d 	andne	r0, r0, sp
    3ce8:	000002cf 	andeq	r0, r0, pc, asr #5
    3cec:	e522000f 	str	r0, [r2, #-15]!
    3cf0:	04000019 	streq	r0, [r0], #-25	; 0xffffffe7
    3cf4:	000d071c 	andeq	r0, sp, ip, lsl r7
    3cf8:	88030500 	stmdahi	r3, {r8, sl}
    3cfc:	0f20003f 	svceq	0x0020003f
    3d00:	00000b40 	andeq	r0, r0, r0, asr #22
    3d04:	00000d38 	andeq	r0, r0, r8, lsr sp
    3d08:	0002cf10 	andeq	ip, r2, r0, lsl pc
    3d0c:	22000300 	andcs	r0, r0, #0, 6
    3d10:	0000179c 	muleq	r0, ip, r7
    3d14:	0d282104 	stfeqs	f2, [r8, #-16]!
    3d18:	03050000 	movweq	r0, #20480	; 0x5000
    3d1c:	20003fa8 	andcs	r3, r0, r8, lsr #31
    3d20:	001a8e22 	andseq	r8, sl, r2, lsr #28
    3d24:	1b240400 	blne	904d2c <startup-0x1f6fb2d4>
    3d28:	05000003 	streq	r0, [r0, #-3]
    3d2c:	003e8803 	eorseq	r8, lr, r3, lsl #16
    3d30:	1a522320 	bne	148c9b8 <startup-0x1eb73648>
    3d34:	e2040000 	and	r0, r4, #0
    3d38:	20003bd0 	ldrdcs	r3, [r0], -r0
    3d3c:	00000062 	andeq	r0, r0, r2, rrx
    3d40:	0d8c9c01 	stceq	12, cr9, [ip, #4]
    3d44:	b0240000 	eorlt	r0, r4, r0
    3d48:	0400001e 	streq	r0, [r0], #-30	; 0xffffffe2
    3d4c:	000b46e2 	andeq	r4, fp, r2, ror #13
    3d50:	70910200 	addsvc	r0, r1, r0, lsl #4
    3d54:	001ab41a 	andseq	fp, sl, sl, lsl r4
    3d58:	b7e30400 	strblt	r0, [r3, r0, lsl #8]!
    3d5c:	0200000b 	andeq	r0, r0, #11
    3d60:	23004c91 	movwcs	r4, #3217	; 0xc91
    3d64:	00001a71 	andeq	r1, r0, r1, ror sl
    3d68:	3a70b604 	bcc	1c31580 <startup-0x1e3cea80>
    3d6c:	01602000 	cmneq	r0, r0
    3d70:	9c010000 	stcls	0, cr0, [r1], {-0}
    3d74:	00000e01 	andeq	r0, r0, r1, lsl #28
    3d78:	00174124 	andseq	r4, r7, r4, lsr #2
    3d7c:	c3b60400 			; <UNDEFINED> instruction: 0xc3b60400
    3d80:	03000002 	movweq	r0, #2
    3d84:	1a7fbc91 	bne	1ff2fd0 <startup-0x1e00d030>
    3d88:	00000bf0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    3d8c:	0cdbb704 	ldcleq	7, cr11, [fp], {4}
    3d90:	91020000 	mrsls	r0, (UNDEF: 2)
    3d94:	08001a60 	stmdaeq	r0, {r5, r6, r9, fp, ip}
    3d98:	b8040000 	stmdalt	r4, {}	; <UNPREDICTABLE>
    3d9c:	00000cdb 	ldrdeq	r0, [r0], -fp
    3da0:	1a5c9102 	bne	17281b0 <startup-0x1e8d7e50>
    3da4:	00000362 	andeq	r0, r0, r2, ror #6
    3da8:	0c8cbb04 	vstmiaeq	ip, {d11-d12}
    3dac:	91020000 	mrsls	r0, (UNDEF: 2)
    3db0:	1e251a58 			; <UNDEFINED> instruction: 0x1e251a58
    3db4:	d2040000 	andle	r0, r4, #0
    3db8:	000002c3 	andeq	r0, r0, r3, asr #5
    3dbc:	25649102 	strbcs	r9, [r4, #-258]!	; 0xfffffefe
    3dc0:	20003b66 	andcs	r3, r0, r6, ror #22
    3dc4:	0000004a 	andeq	r0, r0, sl, asr #32
    3dc8:	0017481a 	andseq	r4, r7, sl, lsl r8
    3dcc:	b7d70400 	ldrblt	r0, [r7, r0, lsl #8]
    3dd0:	0200000b 	andeq	r0, r0, #11
    3dd4:	00004491 	muleq	r0, r1, r4
    3dd8:	001d3326 	andseq	r3, sp, r6, lsr #6
    3ddc:	1cad0400 	cfstrsne	mvf0, [sp]
    3de0:	5420003a 	strtpl	r0, [r0], #-58	; 0xffffffc6
    3de4:	01000000 	mrseq	r0, (UNDEF: 0)
    3de8:	000e339c 	muleq	lr, ip, r3
    3dec:	736d2700 	cmnvc	sp, #0, 14
    3df0:	ad040067 	stcge	0, cr0, [r4, #-412]	; 0xfffffe64
    3df4:	00000e33 	andeq	r0, r0, r3, lsr lr
    3df8:	1a6c9102 	bne	1b28208 <startup-0x1e4d7df8>
    3dfc:	00001a5c 	andeq	r1, r0, ip, asr sl
    3e00:	0310ae04 	tsteq	r0, #4, 28	; 0x40
    3e04:	91020000 	mrsls	r0, (UNDEF: 2)
    3e08:	041e0074 	ldreq	r0, [lr], #-116	; 0xffffff8c
    3e0c:	00000c1f 	andeq	r0, r0, pc, lsl ip
    3e10:	001e8023 	andseq	r8, lr, r3, lsr #32
    3e14:	7c420400 	cfstrdvc	mvd0, [r2], {-0}
    3e18:	a0200035 	eorge	r0, r0, r5, lsr r0
    3e1c:	01000004 	tsteq	r0, r4
    3e20:	000f719c 	muleq	pc, ip, r1	; <UNPREDICTABLE>
    3e24:	19701a00 	ldmdbne	r0!, {r9, fp, ip}^
    3e28:	4d040000 	stcmi	0, cr0, [r4, #-0]
    3e2c:	000002ca 	andeq	r0, r0, sl, asr #5
    3e30:	7fb09103 	svcvc	0x00b09103
    3e34:	001c661a 	andseq	r6, ip, sl, lsl r6
    3e38:	85570400 	ldrbhi	r0, [r7, #-1024]	; 0xfffffc00
    3e3c:	0400000f 	streq	r0, [r0], #-15
    3e40:	067fb491 			; <UNDEFINED> instruction: 0x067fb491
    3e44:	0019cc1a 	andseq	ip, r9, sl, lsl ip
    3e48:	c3580400 	cmpgt	r8, #0, 8
    3e4c:	02000002 	andeq	r0, r0, #2
    3e50:	a2286491 	eorge	r6, r8, #-1862270976	; 0x91000000
    3e54:	44200035 	strtmi	r0, [r0], #-53	; 0xffffffcb
    3e58:	ab000000 	blge	3e60 <startup-0x1fffc1a0>
    3e5c:	2900000e 	stmdbcs	r0, {r1, r2, r3}
    3e60:	4e04006a 	cdpmi	0, 0, cr0, cr4, cr10, {3}
    3e64:	000002c3 	andeq	r0, r0, r3, asr #5
    3e68:	255c9102 	ldrbcs	r9, [ip, #-258]	; 0xfffffefe
    3e6c:	200035a8 	andcs	r3, r0, r8, lsr #11
    3e70:	00000032 	andeq	r0, r0, r2, lsr r0
    3e74:	04006929 	streq	r6, [r0], #-2345	; 0xfffff6d7
    3e78:	0002c350 	andeq	ip, r2, r0, asr r3
    3e7c:	60910200 	addsvs	r0, r1, r0, lsl #4
    3e80:	48280000 	stmdami	r8!, {}	; <UNPREDICTABLE>
    3e84:	b0200036 	eorlt	r0, r0, r6, lsr r0
    3e88:	db000000 	blle	3e90 <startup-0x1fffc170>
    3e8c:	2900000e 	stmdbcs	r0, {r1, r2, r3}
    3e90:	5904006a 	stmdbpl	r4, {r1, r3, r5, r6}
    3e94:	000002c3 	andeq	r0, r0, r3, asr #5
    3e98:	25589102 	ldrbcs	r9, [r8, #-258]	; 0xfffffefe
    3e9c:	2000364e 	andcs	r3, r0, lr, asr #12
    3ea0:	0000009e 	muleq	r0, lr, r0
    3ea4:	04006929 	streq	r6, [r0], #-2345	; 0xfffff6d7
    3ea8:	0002c35b 	andeq	ip, r2, fp, asr r3
    3eac:	54910200 	ldrpl	r0, [r1], #512	; 0x200
    3eb0:	04280000 	strteq	r0, [r8], #-0
    3eb4:	3e200037 	mcrcc	0, 1, r0, cr0, cr7, {1}
    3eb8:	f5000000 			; <UNDEFINED> instruction: 0xf5000000
    3ebc:	2900000e 	stmdbcs	r0, {r1, r2, r3}
    3ec0:	6b040069 	blvs	10406c <startup-0x1fefbf94>
    3ec4:	000002c3 	andeq	r0, r0, r3, asr #5
    3ec8:	00509102 	subseq	r9, r0, r2, lsl #2
    3ecc:	00374228 	eorseq	r4, r7, r8, lsr #4
    3ed0:	00003c20 	andeq	r3, r0, r0, lsr #24
    3ed4:	000f0f00 	andeq	r0, pc, r0, lsl #30
    3ed8:	00692900 	rsbeq	r2, r9, r0, lsl #18
    3edc:	02c37104 	sbceq	r7, r3, #4, 2
    3ee0:	91020000 	mrsls	r0, (UNDEF: 2)
    3ee4:	8428004c 	strthi	r0, [r8], #-76	; 0xffffffb4
    3ee8:	38200037 	stmdacc	r0!, {r0, r1, r2, r4, r5}
    3eec:	29000000 	stmdbcs	r0, {}	; <UNPREDICTABLE>
    3ef0:	2900000f 	stmdbcs	r0, {r0, r1, r2, r3}
    3ef4:	77040069 	strvc	r0, [r4, -r9, rrx]
    3ef8:	000002c3 	andeq	r0, r0, r3, asr #5
    3efc:	00489102 	subeq	r9, r8, r2, lsl #2
    3f00:	0037c428 	eorseq	ip, r7, r8, lsr #8
    3f04:	00003820 	andeq	r3, r0, r0, lsr #16
    3f08:	000f4300 	andeq	r4, pc, r0, lsl #6
    3f0c:	00692900 	rsbeq	r2, r9, r0, lsl #18
    3f10:	02c37c04 	sbceq	r7, r3, #4, 24	; 0x400
    3f14:	91020000 	mrsls	r0, (UNDEF: 2)
    3f18:	06250044 	strteq	r0, [r5], -r4, asr #32
    3f1c:	0a200038 	beq	804004 <startup-0x1f7fbffc>
    3f20:	29000002 	stmdbcs	r0, {r1}
    3f24:	86040069 	strhi	r0, [r4], -r9, rrx
    3f28:	000002c3 	andeq	r0, r0, r3, asr #5
    3f2c:	25409102 	strbcs	r9, [r0, #-258]	; 0xfffffefe
    3f30:	200038a0 	andcs	r3, r0, r0, lsr #17
    3f34:	0000015c 	andeq	r0, r0, ip, asr r1
    3f38:	04006929 	streq	r6, [r0], #-2345	; 0xfffff6d7
    3f3c:	0002c397 	muleq	r2, r7, r3
    3f40:	bc910300 	ldclt	3, cr0, [r1], {0}
    3f44:	0000007f 	andeq	r0, r0, pc, ror r0
    3f48:	000b510f 	andeq	r5, fp, pc, lsl #2
    3f4c:	000f8500 	andeq	r8, pc, r0, lsl #10
    3f50:	02cf2a00 	sbceq	r2, pc, #0, 20
    3f54:	91040000 	mrsls	r0, (UNDEF: 4)
    3f58:	00067fb8 			; <UNDEFINED> instruction: 0x00067fb8
    3f5c:	000f7109 	andeq	r7, pc, r9, lsl #2
    3f60:	16ea2b00 	strbtne	r2, [sl], r0, lsl #22
    3f64:	3a040000 	bcc	103f6c <startup-0x1fefc094>
    3f68:	20003564 	andcs	r3, r0, r4, ror #10
    3f6c:	00000018 	andeq	r0, r0, r8, lsl r0
    3f70:	3b269c01 	blcc	9aaf7c <startup-0x1f655084>
    3f74:	04000017 	streq	r0, [r0], #-23	; 0xffffffe9
    3f78:	00353835 	eorseq	r3, r5, r5, lsr r8
    3f7c:	00002c20 	andeq	r2, r0, r0, lsr #24
    3f80:	cd9c0100 	ldfgts	f0, [ip]
    3f84:	2400000f 	strcs	r0, [r0], #-15
    3f88:	00001e85 	andeq	r1, r0, r5, lsl #29
    3f8c:	02c33504 	sbceq	r3, r3, #4, 10	; 0x1000000
    3f90:	91020000 	mrsls	r0, (UNDEF: 2)
    3f94:	1d8d1a6c 	vstrne	s2, [sp, #432]	; 0x1b0
    3f98:	36040000 	strcc	r0, [r4], -r0
    3f9c:	000002c3 	andeq	r0, r0, r3, asr #5
    3fa0:	00749102 	rsbseq	r9, r4, r2, lsl #2
    3fa4:	001c3623 	andseq	r3, ip, r3, lsr #12
    3fa8:	00290400 	eoreq	r0, r9, r0, lsl #8
    3fac:	38200035 	stmdacc	r0!, {r0, r2, r4, r5}
    3fb0:	01000000 	mrseq	r0, (UNDEF: 0)
    3fb4:	000ff19c 	muleq	pc, ip, r1	; <UNPREDICTABLE>
    3fb8:	18e71a00 	stmiane	r7!, {r9, fp, ip}^
    3fbc:	2d040000 	stccs	0, cr0, [r4, #-0]
    3fc0:	00000310 	andeq	r0, r0, r0, lsl r3
    3fc4:	00749102 	rsbseq	r9, r4, r2, lsl #2
    3fc8:	0017a72c 	andseq	sl, r7, ip, lsr #14
    3fcc:	e8250400 	stmda	r5!, {sl}
    3fd0:	18200034 	stmdane	r0!, {r2, r4, r5}
    3fd4:	01000000 	mrseq	r0, (UNDEF: 0)
    3fd8:	1cff2c9c 	ldclne	12, cr2, [pc], #624	; 4250 <startup-0x1fffbdb0>
    3fdc:	0f040000 	svceq	0x00040000
    3fe0:	20000000 	andcs	r0, r0, r0
    3fe4:	0000000c 	andeq	r0, r0, ip
    3fe8:	972d9c01 	strls	r9, [sp, -r1, lsl #24]!
    3fec:	03000017 	movweq	r0, #23
    3ff0:	00332002 	eorseq	r2, r3, r2
    3ff4:	0001c820 	andeq	ip, r1, r0, lsr #16
    3ff8:	379c0100 	ldrcc	r0, [ip, r0, lsl #2]
    3ffc:	1a000010 	bne	4044 <startup-0x1fffbfbc>
    4000:	00000055 	andeq	r0, r0, r5, asr r0
    4004:	0ab60503 	beq	fed85418 <GPIO_Ports+0xded81470>
    4008:	91020000 	mrsls	r0, (UNDEF: 2)
    400c:	9a2e0070 	bls	b841d4 <startup-0x1f47be2c>
    4010:	0200001b 	andeq	r0, r0, #27
    4014:	33000c5e 	movwcc	r0, #3166	; 0xc5e
    4018:	00202000 	eoreq	r2, r0, r0
    401c:	9c010000 	stcls	0, cr0, [r1], {-0}
    4020:	0000105d 	andeq	r1, r0, sp, asr r0
    4024:	001e142f 	andseq	r1, lr, pc, lsr #8
    4028:	0c5e0200 	lfmeq	f0, 2, [lr], {-0}
    402c:	000002d6 	ldrdeq	r0, [r0], -r6
    4030:	00779102 	rsbseq	r9, r7, r2, lsl #2
    4034:	001b8a30 	andseq	r8, fp, r0, lsr sl
    4038:	0c3c0200 	lfmeq	f0, 4, [ip], #-0
    403c:	0000067a 	andeq	r0, r0, sl, ror r6
    4040:	200032bc 			; <UNDEFINED> instruction: 0x200032bc
    4044:	00000044 	andeq	r0, r0, r4, asr #32
    4048:	10969c01 	addsne	r9, r6, r1, lsl #24
    404c:	142f0000 	strtne	r0, [pc], #-0	; 4054 <startup-0x1fffbfac>
    4050:	0200001e 	andeq	r0, r0, #30
    4054:	02d60c3c 	sbcseq	r0, r6, #60, 24	; 0x3c00
    4058:	91020000 	mrsls	r0, (UNDEF: 2)
    405c:	0fc7316f 	svceq	0x00c7316f
    4060:	3e020000 	cdpcc	0, 0, cr0, cr2, cr0, {0}
    4064:	00067a0c 	andeq	r7, r6, ip, lsl #20
    4068:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    406c:	1abc3200 	bne	fef10874 <GPIO_Ports+0xdef0c8cc>
    4070:	28020000 	stmdacs	r2, {}	; <UNPREDICTABLE>
    4074:	0032a00c 	eorseq	sl, r2, ip
    4078:	00001c20 	andeq	r1, r0, r0, lsr #24
    407c:	309c0100 	addscc	r0, ip, r0, lsl #2
    4080:	00001b04 	andeq	r1, r0, r4, lsl #22
    4084:	6e0bfb02 	vmlavs.f64	d15, d11, d2
    4088:	1c000006 	stcne	0, cr0, [r0], {6}
    408c:	84200032 	strthi	r0, [r0], #-50	; 0xffffffce
    4090:	01000000 	mrseq	r0, (UNDEF: 0)
    4094:	0010ff9c 	mulseq	r0, ip, pc	; <UNPREDICTABLE>
    4098:	1b812f00 	blne	fe04fca0 <GPIO_Ports+0xde04bcf8>
    409c:	fb020000 	blx	840a6 <startup-0x1ff7bf5a>
    40a0:	0002d60b 	andeq	sp, r2, fp, lsl #12
    40a4:	67910200 	ldrvs	r0, [r1, r0, lsl #4]
    40a8:	706d7433 	rsbvc	r7, sp, r3, lsr r4
    40ac:	0bfd0200 	bleq	fff448b4 <GPIO_Ports+0xdff4090c>
    40b0:	00000310 	andeq	r0, r0, r0, lsl r3
    40b4:	316c9102 	cmncc	ip, r2, lsl #2
    40b8:	00001c43 	andeq	r1, r0, r3, asr #24
    40bc:	100bfe02 	andne	pc, fp, r2, lsl #28
    40c0:	02000003 	andeq	r0, r0, #3
    40c4:	c7317491 			; <UNDEFINED> instruction: 0xc7317491
    40c8:	0200000f 	andeq	r0, r0, #15
    40cc:	066e0bff 			; <UNDEFINED> instruction: 0x066e0bff
    40d0:	91020000 	mrsls	r0, (UNDEF: 2)
    40d4:	212e0073 			; <UNDEFINED> instruction: 0x212e0073
    40d8:	0200001b 	andeq	r0, r0, #27
    40dc:	31cc0bd6 	ldrdcc	r0, [ip, #182]	; 0xb6
    40e0:	00502000 	subseq	r2, r0, r0
    40e4:	9c010000 	stcls	0, cr0, [r1], {-0}
    40e8:	00001134 	andeq	r1, r0, r4, lsr r1
    40ec:	001e142f 	andseq	r1, lr, pc, lsr #8
    40f0:	0bd60200 	bleq	ff5848f8 <GPIO_Ports+0xdf580950>
    40f4:	000002d6 	ldrdeq	r0, [r0], -r6
    40f8:	2f779102 	svccs	0x00779102
    40fc:	00000e6f 	andeq	r0, r0, pc, ror #28
    4100:	a10bd602 	tstge	fp, r2, lsl #12
    4104:	02000006 	andeq	r0, r0, #6
    4108:	2e007691 	mcrcs	6, 0, r7, cr0, cr1, {4}
    410c:	00001d62 	andeq	r1, r0, r2, ror #26
    4110:	900a9e02 	andls	r9, sl, r2, lsl #28
    4114:	3c200031 	stccc	0, cr0, [r0], #-196	; 0xffffff3c
    4118:	01000000 	mrseq	r0, (UNDEF: 0)
    411c:	00115a9c 	mulseq	r1, ip, sl
    4120:	170a2f00 	strne	r2, [sl, -r0, lsl #30]
    4124:	9e020000 	cdpls	0, 0, cr0, cr2, cr0, {0}
    4128:	0002d60a 	andeq	sp, r2, sl, lsl #12
    412c:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    4130:	16b02e00 	ldrtne	r2, [r0], r0, lsl #28
    4134:	86020000 	strhi	r0, [r2], -r0
    4138:	0031500a 	eorseq	r5, r1, sl
    413c:	00004020 	andeq	r4, r0, r0, lsr #32
    4140:	8f9c0100 	svchi	0x009c0100
    4144:	2f000011 	svccs	0x00000011
    4148:	00001c4d 	andeq	r1, r0, sp, asr #24
    414c:	100a8602 	andne	r8, sl, r2, lsl #12
    4150:	02000003 	andeq	r0, r0, #3
    4154:	6f2f7491 	svcvs	0x002f7491
    4158:	0200000e 	andeq	r0, r0, #14
    415c:	06a10a86 	strteq	r0, [r1], r6, lsl #21
    4160:	91020000 	mrsls	r0, (UNDEF: 2)
    4164:	362e0073 			; <UNDEFINED> instruction: 0x362e0073
    4168:	0200001e 	andeq	r0, r0, #30
    416c:	31100a52 	tstcc	r0, r2, asr sl
    4170:	00402000 	subeq	r2, r0, r0
    4174:	9c010000 	stcls	0, cr0, [r1], {-0}
    4178:	000011c4 	andeq	r1, r0, r4, asr #3
    417c:	001b612f 	andseq	r6, fp, pc, lsr #2
    4180:	0a520200 	beq	1484988 <startup-0x1eb7b678>
    4184:	00000310 	andeq	r0, r0, r0, lsl r3
    4188:	2f749102 	svccs	0x00749102
    418c:	00000e6f 	andeq	r0, r0, pc, ror #28
    4190:	a10a5202 	tstge	sl, r2, lsl #4
    4194:	02000006 	andeq	r0, r0, #6
    4198:	2e007391 	mcrcs	3, 0, r7, cr0, cr1, {4}
    419c:	000018f2 	strdeq	r1, [r0], -r2
    41a0:	d00a1902 	andle	r1, sl, r2, lsl #18
    41a4:	40200030 	eormi	r0, r0, r0, lsr r0
    41a8:	01000000 	mrseq	r0, (UNDEF: 0)
    41ac:	0011f99c 	mulseq	r1, ip, r9
    41b0:	18562f00 	ldmdane	r6, {r8, r9, sl, fp, sp}^
    41b4:	19020000 	stmdbne	r2, {}	; <UNPREDICTABLE>
    41b8:	0003100a 	andeq	r1, r3, sl
    41bc:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    41c0:	000e6f2f 	andeq	r6, lr, pc, lsr #30
    41c4:	0a190200 	beq	6449cc <startup-0x1f9bb634>
    41c8:	000006a1 	andeq	r0, r0, r1, lsr #13
    41cc:	00739102 	rsbseq	r9, r3, r2, lsl #2
    41d0:	0016cd2e 	andseq	ip, r6, lr, lsr #26
    41d4:	09fb0200 	ldmibeq	fp!, {r9}^
    41d8:	20003090 	mulcs	r0, r0, r0
    41dc:	00000040 	andeq	r0, r0, r0, asr #32
    41e0:	122e9c01 	eorne	r9, lr, #256	; 0x100
    41e4:	a12f0000 			; <UNDEFINED> instruction: 0xa12f0000
    41e8:	0200001e 	andeq	r0, r0, #30
    41ec:	031009fb 	tsteq	r0, #4112384	; 0x3ec000
    41f0:	91020000 	mrsls	r0, (UNDEF: 2)
    41f4:	0e6f2f74 	mcreq	15, 3, r2, cr15, cr4, {3}
    41f8:	fb020000 	blx	84202 <startup-0x1ff7bdfe>
    41fc:	0006a109 	andeq	sl, r6, r9, lsl #2
    4200:	73910200 	orrsvc	r0, r1, #0, 4
    4204:	1e5b2e00 	cdpne	14, 5, cr2, cr11, cr0, {0}
    4208:	db020000 	blle	84210 <startup-0x1ff7bdf0>
    420c:	00305009 	eorseq	r5, r0, r9
    4210:	00004020 	andeq	r4, r0, r0, lsr #32
    4214:	639c0100 	orrsvs	r0, ip, #0, 2
    4218:	2f000012 	svccs	0x00000012
    421c:	00001da2 	andeq	r1, r0, r2, lsr #27
    4220:	1009db02 	andne	sp, r9, r2, lsl #22
    4224:	02000003 	andeq	r0, r0, #3
    4228:	6f2f7491 	svcvs	0x002f7491
    422c:	0200000e 	andeq	r0, r0, #14
    4230:	06a109db 	ssateq	r0, #2, fp, asr #19
    4234:	91020000 	mrsls	r0, (UNDEF: 2)
    4238:	d02e0073 	eorle	r0, lr, r3, ror r0
    423c:	02000018 	andeq	r0, r0, #24
    4240:	301009aa 	andscc	r0, r0, sl, lsr #19
    4244:	00402000 	subeq	r2, r0, r0
    4248:	9c010000 	stcls	0, cr0, [r1], {-0}
    424c:	00001298 	muleq	r0, r8, r2
    4250:	001c4d2f 	andseq	r4, ip, pc, lsr #26
    4254:	09aa0200 	stmibeq	sl!, {r9}
    4258:	00000310 	andeq	r0, r0, r0, lsl r3
    425c:	2f749102 	svccs	0x00749102
    4260:	00000e6f 	andeq	r0, r0, pc, ror #28
    4264:	a109aa02 	tstge	r9, r2, lsl #20
    4268:	02000006 	andeq	r0, r0, #6
    426c:	2e007391 	mcrcs	3, 0, r7, cr0, cr1, {4}
    4270:	000016f3 	strdeq	r1, [r0], -r3
    4274:	d0097b02 	andle	r7, r9, r2, lsl #22
    4278:	4020002f 	eormi	r0, r0, pc, lsr #32
    427c:	01000000 	mrseq	r0, (UNDEF: 0)
    4280:	0012cd9c 	mulseq	r2, ip, sp
    4284:	1b612f00 	blne	184fe8c <startup-0x1e7b0174>
    4288:	7b020000 	blvc	84290 <startup-0x1ff7bd70>
    428c:	00031009 	andeq	r1, r3, r9
    4290:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    4294:	000e6f2f 	andeq	r6, lr, pc, lsr #30
    4298:	097b0200 	ldmdbeq	fp!, {r9}^
    429c:	000006a1 	andeq	r0, r0, r1, lsr #13
    42a0:	00739102 	rsbseq	r9, r3, r2, lsl #2
    42a4:	0017cc2e 	andseq	ip, r7, lr, lsr #24
    42a8:	09450200 	stmdbeq	r5, {r9}^
    42ac:	20002f90 	mulcs	r0, r0, pc	; <UNPREDICTABLE>
    42b0:	00000040 	andeq	r0, r0, r0, asr #32
    42b4:	13029c01 	movwne	r9, #11265	; 0x2c01
    42b8:	562f0000 	strtpl	r0, [pc], -r0
    42bc:	02000018 	andeq	r0, r0, #24
    42c0:	03100945 	tsteq	r0, #1130496	; 0x114000
    42c4:	91020000 	mrsls	r0, (UNDEF: 2)
    42c8:	0e6f2f74 	mcreq	15, 3, r2, cr15, cr4, {3}
    42cc:	45020000 	strmi	r0, [r2, #-0]
    42d0:	0006a109 	andeq	sl, r6, r9, lsl #2
    42d4:	73910200 	orrsvc	r0, r1, #0, 4
    42d8:	1f212e00 	svcne	0x00212e00
    42dc:	2a020000 	bcs	842e4 <startup-0x1ff7bd1c>
    42e0:	002f5009 	eoreq	r5, pc, r9
    42e4:	00004020 	andeq	r4, r0, r0, lsr #32
    42e8:	379c0100 	ldrcc	r0, [ip, r0, lsl #2]
    42ec:	2f000013 	svccs	0x00000013
    42f0:	00001ea1 	andeq	r1, r0, r1, lsr #29
    42f4:	10092a02 	andne	r2, r9, r2, lsl #20
    42f8:	02000003 	andeq	r0, r0, #3
    42fc:	6f2f7491 	svcvs	0x002f7491
    4300:	0200000e 	andeq	r0, r0, #14
    4304:	06a1092a 	strteq	r0, [r1], sl, lsr #18
    4308:	91020000 	mrsls	r0, (UNDEF: 2)
    430c:	cd2e0073 	stcgt	0, cr0, [lr, #-460]!	; 0xfffffe34
    4310:	0200001d 	andeq	r0, r0, #29
    4314:	2f10090d 	svccs	0x0010090d
    4318:	00402000 	subeq	r2, r0, r0
    431c:	9c010000 	stcls	0, cr0, [r1], {-0}
    4320:	0000136c 	andeq	r1, r0, ip, ror #6
    4324:	001da22f 	andseq	sl, sp, pc, lsr #4
    4328:	090d0200 	stmdbeq	sp, {r9}
    432c:	00000310 	andeq	r0, r0, r0, lsl r3
    4330:	2f749102 	svccs	0x00749102
    4334:	00000e6f 	andeq	r0, r0, pc, ror #28
    4338:	a1090d02 	tstge	r9, r2, lsl #26
    433c:	02000006 	andeq	r0, r0, #6
    4340:	2e007391 	mcrcs	3, 0, r7, cr0, cr1, {4}
    4344:	00001a06 	andeq	r1, r0, r6, lsl #20
    4348:	d008e302 	andle	lr, r8, r2, lsl #6
    434c:	4020002e 	eormi	r0, r0, lr, lsr #32
    4350:	01000000 	mrseq	r0, (UNDEF: 0)
    4354:	0013a19c 	mulseq	r3, ip, r1
    4358:	1c4d2f00 	mcrrne	15, 0, r2, sp, cr0
    435c:	e3020000 	movw	r0, #8192	; 0x2000
    4360:	00031008 	andeq	r1, r3, r8
    4364:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    4368:	000e6f2f 	andeq	r6, lr, pc, lsr #30
    436c:	08e30200 	stmiaeq	r3!, {r9}^
    4370:	000006a1 	andeq	r0, r0, r1, lsr #13
    4374:	00739102 	rsbseq	r9, r3, r2, lsl #2
    4378:	0018982e 	andseq	r9, r8, lr, lsr #16
    437c:	08af0200 	stmiaeq	pc!, {r9}	; <UNPREDICTABLE>
    4380:	20002e90 	mulcs	r0, r0, lr
    4384:	00000040 	andeq	r0, r0, r0, asr #32
    4388:	13d69c01 	bicsne	r9, r6, #256	; 0x100
    438c:	612f0000 			; <UNDEFINED> instruction: 0x612f0000
    4390:	0200001b 	andeq	r0, r0, #27
    4394:	031008af 	tsteq	r0, #11468800	; 0xaf0000
    4398:	91020000 	mrsls	r0, (UNDEF: 2)
    439c:	0e6f2f74 	mcreq	15, 3, r2, cr15, cr4, {3}
    43a0:	af020000 	svcge	0x00020000
    43a4:	0006a108 	andeq	sl, r6, r8, lsl #2
    43a8:	73910200 	orrsvc	r0, r1, #0, 4
    43ac:	1ca32e00 	stcne	14, cr2, [r3]
    43b0:	76020000 	strvc	r0, [r2], -r0
    43b4:	002e5008 	eoreq	r5, lr, r8
    43b8:	00004020 	andeq	r4, r0, r0, lsr #32
    43bc:	0b9c0100 	bleq	fe7047c4 <GPIO_Ports+0xde70081c>
    43c0:	2f000014 	svccs	0x00000014
    43c4:	00001856 	andeq	r1, r0, r6, asr r8
    43c8:	10087602 	andne	r7, r8, r2, lsl #12
    43cc:	02000003 	andeq	r0, r0, #3
    43d0:	6f2f7491 	svcvs	0x002f7491
    43d4:	0200000e 	andeq	r0, r0, #14
    43d8:	06a10876 	sxtabeq	r0, r1, r6, ror #16
    43dc:	91020000 	mrsls	r0, (UNDEF: 2)
    43e0:	242e0073 	strtcs	r0, [lr], #-115	; 0xffffff8d
    43e4:	02000017 	andeq	r0, r0, #23
    43e8:	2e100858 	mrccs	8, 0, r0, cr0, cr8, {2}
    43ec:	00402000 	subeq	r2, r0, r0
    43f0:	9c010000 	stcls	0, cr0, [r1], {-0}
    43f4:	00001440 	andeq	r1, r0, r0, asr #8
    43f8:	001ea12f 	andseq	sl, lr, pc, lsr #2
    43fc:	08580200 	ldmdaeq	r8, {r9}^
    4400:	00000310 	andeq	r0, r0, r0, lsl r3
    4404:	2f749102 	svccs	0x00749102
    4408:	00000e6f 	andeq	r0, r0, pc, ror #28
    440c:	a1085802 	tstge	r8, r2, lsl #16
    4410:	02000006 	andeq	r0, r0, #6
    4414:	2e007391 	mcrcs	3, 0, r7, cr0, cr1, {4}
    4418:	00001ece 	andeq	r1, r0, lr, asr #29
    441c:	d0083802 	andle	r3, r8, r2, lsl #16
    4420:	4020002d 	eormi	r0, r0, sp, lsr #32
    4424:	01000000 	mrseq	r0, (UNDEF: 0)
    4428:	0014759c 	mulseq	r4, ip, r5
    442c:	1da22f00 	stcne	15, cr2, [r2]
    4430:	38020000 	stmdacc	r2, {}	; <UNPREDICTABLE>
    4434:	00031008 	andeq	r1, r3, r8
    4438:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    443c:	000e6f2f 	andeq	r6, lr, pc, lsr #30
    4440:	08380200 	ldmdaeq	r8!, {r9}
    4444:	000006a1 	andeq	r0, r0, r1, lsr #13
    4448:	00739102 	rsbseq	r9, r3, r2, lsl #2
    444c:	001bcb2e 	andseq	ip, fp, lr, lsr #22
    4450:	080e0200 	stmdaeq	lr, {r9}
    4454:	20002db4 			; <UNDEFINED> instruction: 0x20002db4
    4458:	0000001c 	andeq	r0, r0, ip, lsl r0
    445c:	149b9c01 	ldrne	r9, [fp], #3073	; 0xc01
    4460:	072f0000 	streq	r0, [pc, -r0]!
    4464:	0200001f 	andeq	r0, r0, #31
    4468:	0310080e 	tsteq	r0, #917504	; 0xe0000
    446c:	91020000 	mrsls	r0, (UNDEF: 2)
    4470:	b72e0074 			; <UNDEFINED> instruction: 0xb72e0074
    4474:	02000017 	andeq	r0, r0, #23
    4478:	2d78078e 	ldclcs	7, cr0, [r8, #-568]!	; 0xfffffdc8
    447c:	003c2000 	eorseq	r2, ip, r0
    4480:	9c010000 	stcls	0, cr0, [r1], {-0}
    4484:	000014d0 	ldrdeq	r1, [r0], -r0
    4488:	001a2c2f 	andseq	r2, sl, pc, lsr #24
    448c:	078e0200 	streq	r0, [lr, r0, lsl #4]
    4490:	00000310 	andeq	r0, r0, r0, lsl r3
    4494:	316c9102 	cmncc	ip, r2, lsl #2
    4498:	00001d92 	muleq	r0, r2, sp
    449c:	10079002 	andne	r9, r7, r2
    44a0:	02000003 	andeq	r0, r0, #3
    44a4:	2e007491 	mcrcs	4, 0, r7, cr0, cr1, {4}
    44a8:	0000177d 	andeq	r1, r0, sp, ror r7
    44ac:	38072b02 	stmdacc	r7, {r1, r8, r9, fp, sp}
    44b0:	4020002d 	eormi	r0, r0, sp, lsr #32
    44b4:	01000000 	mrseq	r0, (UNDEF: 0)
    44b8:	0015059c 	mulseq	r5, ip, r5
    44bc:	1a1d2f00 	bne	7500c4 <startup-0x1f8aff3c>
    44c0:	2b020000 	blcs	844c8 <startup-0x1ff7bb38>
    44c4:	00031007 	andeq	r1, r3, r7
    44c8:	6c910200 	lfmvs	f0, 4, [r1], {0}
    44cc:	001d9231 	andseq	r9, sp, r1, lsr r2
    44d0:	072d0200 	streq	r0, [sp, -r0, lsl #4]!
    44d4:	00000310 	andeq	r0, r0, r0, lsl r3
    44d8:	00749102 	rsbseq	r9, r4, r2, lsl #2
    44dc:	001adb2e 	andseq	sp, sl, lr, lsr #22
    44e0:	070b0200 	streq	r0, [fp, -r0, lsl #4]
    44e4:	20002cfc 	strdcs	r2, [r0], -ip
    44e8:	0000003c 	andeq	r0, r0, ip, lsr r0
    44ec:	153a9c01 	ldrne	r9, [sl, #-3073]!	; 0xfffff3ff
    44f0:	472f0000 	strmi	r0, [pc, -r0]!
    44f4:	02000018 	andeq	r0, r0, #24
    44f8:	0310070b 	tsteq	r0, #2883584	; 0x2c0000
    44fc:	91020000 	mrsls	r0, (UNDEF: 2)
    4500:	1d92316c 	ldfnes	f3, [r2, #432]	; 0x1b0
    4504:	0d020000 	stceq	0, cr0, [r2, #-0]
    4508:	00031007 	andeq	r1, r3, r7
    450c:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    4510:	180a2e00 	stmdane	sl, {r9, sl, fp, sp}
    4514:	ea020000 	b	8451c <startup-0x1ff7bae4>
    4518:	002cc006 	eoreq	ip, ip, r6
    451c:	00003c20 	andeq	r3, r0, r0, lsr #24
    4520:	6f9c0100 	svcvs	0x009c0100
    4524:	2f000015 	svccs	0x00000015
    4528:	00001a3b 	andeq	r1, r0, fp, lsr sl
    452c:	1006ea02 	andne	lr, r6, r2, lsl #20
    4530:	02000003 	andeq	r0, r0, #3
    4534:	92316c91 	eorsls	r6, r1, #37120	; 0x9100
    4538:	0200001d 	andeq	r0, r0, #29
    453c:	031006ec 	tsteq	r0, #236, 12	; 0xec00000
    4540:	91020000 	mrsls	r0, (UNDEF: 2)
    4544:	ae2e0074 	mcrge	0, 1, r0, cr14, cr4, {3}
    4548:	02000019 	andeq	r0, r0, #25
    454c:	2c8406c6 	stccs	6, cr0, [r4], {198}	; 0xc6
    4550:	003c2000 	eorseq	r2, ip, r0
    4554:	9c010000 	stcls	0, cr0, [r1], {-0}
    4558:	000015a4 	andeq	r1, r0, r4, lsr #11
    455c:	001be02f 	andseq	lr, fp, pc, lsr #32
    4560:	06c60200 	strbeq	r0, [r6], r0, lsl #4
    4564:	00000310 	andeq	r0, r0, r0, lsl r3
    4568:	316c9102 	cmncc	ip, r2, lsl #2
    456c:	00001d92 	muleq	r0, r2, sp
    4570:	1006c802 	andne	ip, r6, r2, lsl #16
    4574:	02000003 	andeq	r0, r0, #3
    4578:	2e007491 	mcrcs	4, 0, r7, cr0, cr1, {4}
    457c:	00001678 	andeq	r1, r0, r8, ror r6
    4580:	6806ab02 	stmdavs	r6, {r1, r8, r9, fp, sp, pc}
    4584:	1c20002c 	stcne	0, cr0, [r0], #-176	; 0xffffff50
    4588:	01000000 	mrseq	r0, (UNDEF: 0)
    458c:	0015ca9c 	mulseq	r5, ip, sl
    4590:	1a772f00 	bne	1dd0198 <startup-0x1e22fe68>
    4594:	ab020000 	blge	8459c <startup-0x1ff7ba64>
    4598:	00031006 	andeq	r1, r3, r6
    459c:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    45a0:	1cd72e00 	ldclne	14, cr2, [r7], {0}
    45a4:	ef020000 	svc	0x00020000
    45a8:	002c4805 	eoreq	r4, ip, r5, lsl #16
    45ac:	00002020 	andeq	r2, r0, r0, lsr #32
    45b0:	f09c0100 			; <UNDEFINED> instruction: 0xf09c0100
    45b4:	2f000015 	svccs	0x00000015
    45b8:	00000e6f 	andeq	r0, r0, pc, ror #28
    45bc:	a105ef02 	tstge	r5, r2, lsl #30
    45c0:	02000006 	andeq	r0, r0, #6
    45c4:	2e007791 	mcrcs	7, 0, r7, cr0, cr1, {4}
    45c8:	00001e93 	muleq	r0, r3, lr
    45cc:	2805de02 	stmdacs	r5, {r1, r9, sl, fp, ip, lr, pc}
    45d0:	2020002c 	eorcs	r0, r0, ip, lsr #32
    45d4:	01000000 	mrseq	r0, (UNDEF: 0)
    45d8:	0016169c 	mulseq	r6, ip, r6
    45dc:	0e6f2f00 	cdpeq	15, 6, cr2, cr15, cr0, {0}
    45e0:	de020000 	cdple	0, 0, cr0, cr2, cr0, {0}
    45e4:	0006a105 	andeq	sl, r6, r5, lsl #2
    45e8:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    45ec:	1b702e00 	blne	1c0fdf4 <startup-0x1e3f020c>
    45f0:	be020000 	cdplt	0, 0, cr0, cr2, cr0, {0}
    45f4:	002bc805 	eoreq	ip, fp, r5, lsl #16
    45f8:	00006020 	andeq	r6, r0, r0, lsr #32
    45fc:	4b9c0100 	blmi	fe704a04 <GPIO_Ports+0xde700a5c>
    4600:	2f000016 	svccs	0x00000016
    4604:	00001713 	andeq	r1, r0, r3, lsl r7
    4608:	1005be02 	andne	fp, r5, r2, lsl #28
    460c:	02000003 	andeq	r0, r0, #3
    4610:	92316c91 	eorsls	r6, r1, #37120	; 0x9100
    4614:	0200001d 	andeq	r0, r0, #29
    4618:	031005c0 	tsteq	r0, #192, 10	; 0x30000000
    461c:	91020000 	mrsls	r0, (UNDEF: 2)
    4620:	8f340074 	svchi	0x00340074
    4624:	02000016 	andeq	r0, r0, #22
    4628:	2a700525 	bcs	1c05ac4 <startup-0x1e3fa53c>
    462c:	01582000 	cmpeq	r8, r0
    4630:	9c010000 	stcls	0, cr0, [r1], {-0}
    4634:	000016cb 	andeq	r1, r0, fp, asr #13
    4638:	001b162f 	andseq	r1, fp, pc, lsr #12
    463c:	05250200 	streq	r0, [r5, #-512]!	; 0xfffffe00
    4640:	000016cb 	andeq	r1, r0, fp, asr #13
    4644:	335c9102 	cmpcc	ip, #-2147483648	; 0x80000000
    4648:	00706d74 	rsbseq	r6, r0, r4, ror sp
    464c:	10052702 	andne	r2, r5, r2, lsl #14
    4650:	02000003 	andeq	r0, r0, #3
    4654:	1b317091 	blne	c608a0 <startup-0x1f39f760>
    4658:	0200001f 	andeq	r0, r0, #31
    465c:	03100527 	tsteq	r0, #163577856	; 0x9c00000
    4660:	91020000 	mrsls	r0, (UNDEF: 2)
    4664:	1e2f316c 	sufneez	f3, f7, #4.0
    4668:	27020000 	strcs	r0, [r2, -r0]
    466c:	00031005 	andeq	r1, r3, r5
    4670:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    4674:	00166831 	andseq	r6, r6, r1, lsr r8
    4678:	05270200 	streq	r0, [r7, #-512]!	; 0xfffffe00
    467c:	00000310 	andeq	r0, r0, r0, lsl r3
    4680:	31689102 	cmncc	r8, r2, lsl #2
    4684:	00001966 	andeq	r1, r0, r6, ror #18
    4688:	10052702 	andne	r2, r5, r2, lsl #14
    468c:	02000003 	andeq	r0, r0, #3
    4690:	6d316491 	cfldrsvs	mvf6, [r1, #-580]!	; 0xfffffdbc
    4694:	0200001f 	andeq	r0, r0, #31
    4698:	03100527 	tsteq	r0, #163577856	; 0x9c00000
    469c:	91020000 	mrsls	r0, (UNDEF: 2)
    46a0:	041e0060 	ldreq	r0, [lr], #-96	; 0xffffffa0
    46a4:	00000989 	andeq	r0, r0, r9, lsl #19
    46a8:	0017e32e 	andseq	lr, r7, lr, lsr #6
    46ac:	04f10200 	ldrbteq	r0, [r1], #512	; 0x200
    46b0:	20002a34 	andcs	r2, r0, r4, lsr sl
    46b4:	0000003c 	andeq	r0, r0, ip, lsr r0
    46b8:	17069c01 	strne	r9, [r6, -r1, lsl #24]
    46bc:	602f0000 	eorvs	r0, pc, r0
    46c0:	02000017 	andeq	r0, r0, #23
    46c4:	031004f1 	tsteq	r0, #-251658240	; 0xf1000000
    46c8:	91020000 	mrsls	r0, (UNDEF: 2)
    46cc:	1d92316c 	ldfnes	f3, [r2, #432]	; 0x1b0
    46d0:	f3020000 	vhadd.u8	d0, d2, d0
    46d4:	00031004 	andeq	r1, r3, r4
    46d8:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    46dc:	1a962e00 	bne	fe58fee4 <GPIO_Ports+0xde58bf3c>
    46e0:	d2020000 	andle	r0, r2, #0
    46e4:	0029fc04 	eoreq	pc, r9, r4, lsl #24
    46e8:	00003820 	andeq	r3, r0, r0, lsr #16
    46ec:	3b9c0100 	blcc	fe704af4 <GPIO_Ports+0xde700b4c>
    46f0:	2f000017 	svccs	0x00000017
    46f4:	00001760 	andeq	r1, r0, r0, ror #14
    46f8:	1004d202 	andne	sp, r4, r2, lsl #4
    46fc:	02000003 	andeq	r0, r0, #3
    4700:	92316c91 	eorsls	r6, r1, #37120	; 0x9100
    4704:	0200001d 	andeq	r0, r0, #29
    4708:	031004d4 	tsteq	r0, #212, 8	; 0xd4000000
    470c:	91020000 	mrsls	r0, (UNDEF: 2)
    4710:	842e0074 	strthi	r0, [lr], #-116	; 0xffffff8c
    4714:	02000019 	andeq	r0, r0, #25
    4718:	29c804b3 	stmibcs	r8, {r0, r1, r4, r5, r7, sl}^
    471c:	00342000 	eorseq	r2, r4, r0
    4720:	9c010000 	stcls	0, cr0, [r1], {-0}
    4724:	00001770 	andeq	r1, r0, r0, ror r7
    4728:	0019312f 	andseq	r3, r9, pc, lsr #2
    472c:	04b30200 	ldrteq	r0, [r3], #512	; 0x200
    4730:	00000310 	andeq	r0, r0, r0, lsl r3
    4734:	316c9102 	cmncc	ip, r2, lsl #2
    4738:	00001d92 	muleq	r0, r2, sp
    473c:	1004b502 	andne	fp, r4, r2, lsl #10
    4740:	02000003 	andeq	r0, r0, #3
    4744:	35007491 	strcc	r7, [r0, #-1169]	; 0xfffffb6f
    4748:	00001829 	andeq	r1, r0, r9, lsr #16
    474c:	d6049a02 	strle	r9, [r4], -r2, lsl #20
    4750:	ac000002 	stcge	0, cr0, [r0], {2}
    4754:	1c200029 	stcne	0, cr0, [r0], #-164	; 0xffffff5c
    4758:	01000000 	mrseq	r0, (UNDEF: 0)
    475c:	1f4e2e9c 	svcne	0x004e2e9c
    4760:	7d020000 	stcvc	0, cr0, [r2, #-0]
    4764:	00297804 	eoreq	r7, r9, r4, lsl #16
    4768:	00003420 	andeq	r3, r0, r0, lsr #8
    476c:	bb9c0100 	bllt	fe704b74 <GPIO_Ports+0xde700bcc>
    4770:	2f000017 	svccs	0x00000017
    4774:	00001879 	andeq	r1, r0, r9, ror r8
    4778:	10047d02 	andne	r7, r4, r2, lsl #26
    477c:	02000003 	andeq	r0, r0, #3
    4780:	92316c91 	eorsls	r6, r1, #37120	; 0x9100
    4784:	0200001d 	andeq	r0, r0, #29
    4788:	0310047f 	tsteq	r0, #2130706432	; 0x7f000000
    478c:	91020000 	mrsls	r0, (UNDEF: 2)
    4790:	622e0074 	eorvs	r0, lr, #116	; 0x74
    4794:	0200001a 	andeq	r0, r0, #26
    4798:	293c03b5 	ldmdbcs	ip!, {r0, r2, r4, r5, r7, r8, r9}
    479c:	003c2000 	eorseq	r2, ip, r0
    47a0:	9c010000 	stcls	0, cr0, [r1], {-0}
    47a4:	000017ff 	strdeq	r1, [r0], -pc	; <UNPREDICTABLE>
    47a8:	001d072f 	andseq	r0, sp, pc, lsr #14
    47ac:	03b50200 			; <UNDEFINED> instruction: 0x03b50200
    47b0:	00000310 	andeq	r0, r0, r0, lsl r3
    47b4:	2f6c9102 	svccs	0x006c9102
    47b8:	0000186d 	andeq	r1, r0, sp, ror #16
    47bc:	1003b502 	andne	fp, r3, r2, lsl #10
    47c0:	02000003 	andeq	r0, r0, #3
    47c4:	92316891 	eorsls	r6, r1, #9502720	; 0x910000
    47c8:	0200001d 	andeq	r0, r0, #29
    47cc:	031003b7 	tsteq	r0, #-603979774	; 0xdc000002
    47d0:	91020000 	mrsls	r0, (UNDEF: 2)
    47d4:	f72e0074 			; <UNDEFINED> instruction: 0xf72e0074
    47d8:	02000019 	andeq	r0, r0, #25
    47dc:	28fc0388 	ldmcs	ip!, {r3, r7, r8, r9}^
    47e0:	00402000 	subeq	r2, r0, r0
    47e4:	9c010000 	stcls	0, cr0, [r1], {-0}
    47e8:	00001843 	andeq	r1, r0, r3, asr #16
    47ec:	001c942f 	andseq	r9, ip, pc, lsr #8
    47f0:	03880200 	orreq	r0, r8, #0, 4
    47f4:	00000310 	andeq	r0, r0, r0, lsl r3
    47f8:	2f6c9102 	svccs	0x006c9102
    47fc:	00001d27 	andeq	r1, r0, r7, lsr #26
    4800:	10038802 	andne	r8, r3, r2, lsl #16
    4804:	02000003 	andeq	r0, r0, #3
    4808:	92316891 	eorsls	r6, r1, #9502720	; 0x910000
    480c:	0200001d 	andeq	r0, r0, #29
    4810:	0310038a 	tsteq	r0, #671088642	; 0x28000002
    4814:	91020000 	mrsls	r0, (UNDEF: 2)
    4818:	b02e0074 	eorlt	r0, lr, r4, ror r0
    481c:	0200001b 	andeq	r0, r0, #27
    4820:	28dc036f 	ldmcs	ip, {r0, r1, r2, r3, r5, r6, r8, r9}^
    4824:	00202000 	eoreq	r2, r0, r0
    4828:	9c010000 	stcls	0, cr0, [r1], {-0}
    482c:	00001869 	andeq	r1, r0, r9, ror #16
    4830:	000e6f2f 	andeq	r6, lr, pc, lsr #30
    4834:	036f0200 	cmneq	pc, #0, 4
    4838:	000006a1 	andeq	r0, r0, r1, lsr #13
    483c:	00779102 	rsbseq	r9, r7, r2, lsl #2
    4840:	001f382e 	andseq	r3, pc, lr, lsr #16
    4844:	035d0200 	cmpeq	sp, #0, 4
    4848:	200028bc 			; <UNDEFINED> instruction: 0x200028bc
    484c:	00000020 	andeq	r0, r0, r0, lsr #32
    4850:	188f9c01 	stmne	pc, {r0, sl, fp, ip, pc}	; <UNPREDICTABLE>
    4854:	6f2f0000 	svcvs	0x002f0000
    4858:	0200000e 	andeq	r0, r0, #14
    485c:	06a1035d 	ssateq	r0, #2, sp, asr #6
    4860:	91020000 	mrsls	r0, (UNDEF: 2)
    4864:	d42e0077 	strtle	r0, [lr], #-119	; 0xffffff89
    4868:	02000019 	andeq	r0, r0, #25
    486c:	288c0349 	stmcs	ip, {r0, r3, r6, r8, r9}
    4870:	00302000 	eorseq	r2, r0, r0
    4874:	9c010000 	stcls	0, cr0, [r1], {-0}
    4878:	000018d3 	ldrdeq	r1, [r0], -r3
    487c:	001c7c2f 	andseq	r7, ip, pc, lsr #24
    4880:	03490200 	movteq	r0, #37376	; 0x9200
    4884:	00000310 	andeq	r0, r0, r0, lsl r3
    4888:	2f749102 	svccs	0x00749102
    488c:	00001c84 	andeq	r1, r0, r4, lsl #25
    4890:	10034902 	andne	r4, r3, r2, lsl #18
    4894:	02000003 	andeq	r0, r0, #3
    4898:	8c2f7091 	stchi	0, cr7, [pc], #-580	; 465c <startup-0x1fffb9a4>
    489c:	0200001c 	andeq	r0, r0, #28
    48a0:	03100349 	tsteq	r0, #603979777	; 0x24000001
    48a4:	91020000 	mrsls	r0, (UNDEF: 2)
    48a8:	522e006c 	eorpl	r0, lr, #108	; 0x6c
    48ac:	02000017 	andeq	r0, r0, #23
    48b0:	286c02dc 	stmdacs	ip!, {r2, r3, r4, r6, r7, r9}^
    48b4:	00202000 	eoreq	r2, r0, r0
    48b8:	9c010000 	stcls	0, cr0, [r1], {-0}
    48bc:	000018f9 	strdeq	r1, [r0], -r9
    48c0:	000e6f2f 	andeq	r6, lr, pc, lsr #30
    48c4:	02dc0200 	sbcseq	r0, ip, #0, 4
    48c8:	000006a1 	andeq	r0, r0, r1, lsr #13
    48cc:	00779102 	rsbseq	r9, r7, r2, lsl #2
    48d0:	001ee52e 	andseq	lr, lr, lr, lsr #10
    48d4:	02510200 	subseq	r0, r1, #0, 4
    48d8:	20002844 	andcs	r2, r0, r4, asr #16
    48dc:	00000028 	andeq	r0, r0, r8, lsr #32
    48e0:	192e9c01 	stmdbne	lr!, {r0, sl, fp, ip, pc}
    48e4:	532f0000 			; <UNDEFINED> instruction: 0x532f0000
    48e8:	0200001e 	andeq	r0, r0, #30
    48ec:	03100251 	tsteq	r0, #268435461	; 0x10000005
    48f0:	91020000 	mrsls	r0, (UNDEF: 2)
    48f4:	1e782f74 	mrcne	15, 3, r2, cr8, cr4, {3}
    48f8:	51020000 	mrspl	r0, (UNDEF: 2)
    48fc:	00031002 	andeq	r1, r3, r2
    4900:	70910200 	addsvc	r0, r1, r0, lsl #4
    4904:	1ccc2e00 	stclne	14, cr2, [ip], {0}
    4908:	33020000 	movwcc	r0, #8192	; 0x2000
    490c:	00282402 	eoreq	r2, r8, r2, lsl #8
    4910:	00002020 	andeq	r2, r0, r0, lsr #32
    4914:	549c0100 	ldrpl	r0, [ip], #256	; 0x100
    4918:	2f000019 	svccs	0x00000019
    491c:	00000e6f 	andeq	r0, r0, pc, ror #28
    4920:	a1023302 	tstge	r2, r2, lsl #6
    4924:	02000006 	andeq	r0, r0, #6
    4928:	2e007791 	mcrcs	7, 0, r7, cr0, cr1, {4}
    492c:	00001f5f 	andeq	r1, r0, pc, asr pc
    4930:	e8021b02 	stmda	r2, {r1, r8, r9, fp, ip}
    4934:	3c200027 	stccc	0, cr0, [r0], #-156	; 0xffffff64
    4938:	01000000 	mrseq	r0, (UNDEF: 0)
    493c:	0019b69c 	mulseq	r9, ip, r6
    4940:	188a2f00 	stmne	sl, {r8, r9, sl, fp, sp}
    4944:	1b020000 	blne	8494c <startup-0x1ff7b6b4>
    4948:	00031002 	andeq	r1, r3, r2
    494c:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    4950:	00194c2f 	andseq	r4, r9, pc, lsr #24
    4954:	021b0200 	andseq	r0, fp, #0, 4
    4958:	00000310 	andeq	r0, r0, r0, lsl r3
    495c:	2f709102 	svccs	0x00709102
    4960:	00001ec9 	andeq	r1, r0, r9, asr #29
    4964:	10021b02 	andne	r1, r2, r2, lsl #22
    4968:	02000003 	andeq	r0, r0, #3
    496c:	512f6c91 			; <UNDEFINED> instruction: 0x512f6c91
    4970:	02000019 	andeq	r0, r0, #25
    4974:	0310021b 	tsteq	r0, #-1342177279	; 0xb0000001
    4978:	91020000 	mrsls	r0, (UNDEF: 2)
    497c:	19562f68 	ldmdbne	r6, {r3, r5, r6, r8, r9, sl, fp, sp}^
    4980:	1b020000 	blne	84988 <startup-0x1ff7b678>
    4984:	00031002 	andeq	r1, r3, r2
    4988:	00910200 	addseq	r0, r1, r0, lsl #4
    498c:	195b2e00 	ldmdbne	fp, {r9, sl, fp, sp}^
    4990:	b8020000 	stmdalt	r2, {}	; <UNPREDICTABLE>
    4994:	0027c801 	eoreq	ip, r7, r1, lsl #16
    4998:	00002020 	andeq	r2, r0, r0, lsr #32
    499c:	dc9c0100 	ldfles	f0, [ip], {0}
    49a0:	2f000019 	svccs	0x00000019
    49a4:	00000e6f 	andeq	r0, r0, pc, ror #28
    49a8:	a101b802 	tstge	r1, r2, lsl #16
    49ac:	02000006 	andeq	r0, r0, #6
    49b0:	2e007791 	mcrcs	7, 0, r7, cr0, cr1, {4}
    49b4:	000018b9 			; <UNDEFINED> instruction: 0x000018b9
    49b8:	84019002 	strhi	r9, [r1], #-2
    49bc:	44200027 	strtmi	r0, [r0], #-39	; 0xffffffd9
    49c0:	01000000 	mrseq	r0, (UNDEF: 0)
    49c4:	001a029c 	mulseq	sl, ip, r2
    49c8:	19a62f00 	stmibne	r6!, {r8, r9, sl, fp, sp}
    49cc:	90020000 	andls	r0, r2, r0
    49d0:	0002d601 	andeq	sp, r2, r1, lsl #12
    49d4:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    49d8:	1b2e2e00 	blne	b901e0 <startup-0x1f46fe20>
    49dc:	77020000 	strvc	r0, [r2, -r0]
    49e0:	00276401 	eoreq	r6, r7, r1, lsl #8
    49e4:	00002020 	andeq	r2, r0, r0, lsr #32
    49e8:	289c0100 	ldmcs	ip, {r8}
    49ec:	2f00001a 	svccs	0x0000001a
    49f0:	00000e6f 	andeq	r0, r0, pc, ror #28
    49f4:	a1017702 	tstge	r1, r2, lsl #14
    49f8:	02000006 	andeq	r0, r0, #6
    49fc:	2e007791 	mcrcs	7, 0, r7, cr0, cr1, {4}
    4a00:	00001b39 	andeq	r1, r0, r9, lsr fp
    4a04:	26015302 	strcs	r5, [r1], -r2, lsl #6
    4a08:	3e200027 	cdpcc	0, 2, cr0, cr0, cr7, {1}
    4a0c:	01000000 	mrseq	r0, (UNDEF: 0)
    4a10:	001a5d9c 	mulseq	sl, ip, sp
    4a14:	1b432f00 	blne	10d061c <startup-0x1ef2f9e4>
    4a18:	53020000 	movwpl	r0, #8192	; 0x2000
    4a1c:	0002d601 	andeq	sp, r2, r1, lsl #12
    4a20:	6f910200 	svcvs	0x00910200
    4a24:	001d9231 	andseq	r9, sp, r1, lsr r2
    4a28:	01550200 	cmpeq	r5, r0, lsl #4
    4a2c:	00000310 	andeq	r0, r0, r0, lsl r3
    4a30:	00749102 	rsbseq	r9, r4, r2, lsl #2
    4a34:	001d4436 	andseq	r4, sp, r6, lsr r4
    4a38:	01340200 	teqeq	r4, r0, lsl #4
    4a3c:	000006c8 	andeq	r0, r0, r8, asr #13
    4a40:	200026c8 	andcs	r2, r0, r8, asr #13
    4a44:	0000005e 	andeq	r0, r0, lr, asr r0
    4a48:	1aa59c01 	bne	fe96ba54 <GPIO_Ports+0xde967aac>
    4a4c:	c5310000 	ldrgt	r0, [r1, #-0]!
    4a50:	02000019 	andeq	r0, r0, #25
    4a54:	031b0136 	tsteq	fp, #-2147483635	; 0x8000000d
    4a58:	91020000 	mrsls	r0, (UNDEF: 2)
    4a5c:	057a3168 	ldrbeq	r3, [sl, #-360]!	; 0xfffffe98
    4a60:	37020000 	strcc	r0, [r2, -r0]
    4a64:	0006c801 	andeq	ip, r6, r1, lsl #16
    4a68:	6f910200 	svcvs	0x00910200
    4a6c:	001db131 	andseq	fp, sp, r1, lsr r1
    4a70:	01380200 	teqeq	r8, r0, lsl #4
    4a74:	0000066e 	andeq	r0, r0, lr, ror #12
    4a78:	006e9102 	rsbeq	r9, lr, r2, lsl #2
    4a7c:	0019932e 	andseq	r9, r9, lr, lsr #6
    4a80:	011c0200 	tsteq	ip, r0, lsl #4
    4a84:	200026a0 	andcs	r2, r0, r0, lsr #13
    4a88:	00000028 	andeq	r0, r0, r8, lsr #32
    4a8c:	1acb9c01 	bne	ff2eba98 <GPIO_Ports+0xdf2e7af0>
    4a90:	ef2f0000 	svc	0x002f0000
    4a94:	02000019 	andeq	r0, r0, #25
    4a98:	02d6011c 	sbcseq	r0, r6, #28, 2
    4a9c:	91020000 	mrsls	r0, (UNDEF: 2)
    4aa0:	ff2c0077 			; <UNDEFINED> instruction: 0xff2c0077
    4aa4:	02000017 	andeq	r0, r0, #23
    4aa8:	002630e1 	eoreq	r3, r6, r1, ror #1
    4aac:	00007020 	andeq	r7, r0, r0, lsr #32
    4ab0:	379c0100 	ldrcc	r0, [ip, r0, lsl #2]
    4ab4:	00001d7e 	andeq	r1, r0, lr, ror sp
    4ab8:	1006e001 	andne	lr, r6, r1
    4abc:	e8000003 	stmda	r0, {r0, r1}
    4ac0:	48200025 	stmdami	r0!, {r0, r2, r5}
    4ac4:	01000000 	mrseq	r0, (UNDEF: 0)
    4ac8:	001b069c 	mulseq	fp, ip, r6
    4acc:	1aa62f00 	bne	fe9906d4 <GPIO_Ports+0xde98c72c>
    4ad0:	e0010000 	and	r0, r1, r0
    4ad4:	00031006 	andeq	r1, r3, r6
    4ad8:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    4adc:	0c523800 	mrrceq	8, 0, r3, r2, cr0
    4ae0:	5d010000 	stcpl	0, cr0, [r1, #-0]
    4ae4:	00258806 	eoreq	r8, r5, r6, lsl #16
    4ae8:	00006020 	andeq	r6, r0, r0, lsr #32
    4aec:	2f9c0100 	svccs	0x009c0100
    4af0:	00000c12 	andeq	r0, r0, r2, lsl ip
    4af4:	5a065d01 	bpl	19bf00 <startup-0x1fe64100>
    4af8:	02000002 	andeq	r0, r0, #2
    4afc:	c12f7791 			; <UNDEFINED> instruction: 0xc12f7791
    4b00:	01000015 	tsteq	r0, r5, lsl r0
    4b04:	0310065d 	tsteq	r0, #97517568	; 0x5d00000
    4b08:	91020000 	mrsls	r0, (UNDEF: 2)
    4b0c:	a9000070 	stmdbge	r0, {r4, r5, r6}
    4b10:	04000001 	streq	r0, [r0], #-1
    4b14:	000e1800 	andeq	r1, lr, r0, lsl #16
    4b18:	b8010400 	stmdalt	r1, {sl}
    4b1c:	0c000004 	stceq	0, cr0, [r0], {4}
    4b20:	00001f87 	andeq	r1, r0, r7, lsl #31
    4b24:	00000407 	andeq	r0, r0, r7, lsl #8
    4b28:	20003c34 	andcs	r3, r0, r4, lsr ip
    4b2c:	00000128 	andeq	r0, r0, r8, lsr #2
    4b30:	0000153f 	andeq	r1, r0, pc, lsr r5
    4b34:	db060102 	blle	184f44 <startup-0x1fe7b0bc>
    4b38:	03000002 	movweq	r0, #2
    4b3c:	0000017e 	andeq	r0, r0, lr, ror r1
    4b40:	00372b02 	eorseq	r2, r7, r2, lsl #22
    4b44:	01020000 	mrseq	r0, (UNDEF: 2)
    4b48:	0002d908 	andeq	sp, r2, r8, lsl #18
    4b4c:	05020200 	streq	r0, [r2, #-512]	; 0xfffffe00
    4b50:	00000b74 	andeq	r0, r0, r4, ror fp
    4b54:	9c070202 	sfmls	f0, 4, [r7], {2}
    4b58:	0200000c 	andeq	r0, r0, #12
    4b5c:	07850504 	streq	r0, [r5, r4, lsl #10]
    4b60:	04020000 	streq	r0, [r2], #-0
    4b64:	0009db07 	andeq	sp, r9, r7, lsl #22
    4b68:	05080200 	streq	r0, [r8, #-512]	; 0xfffffe00
    4b6c:	00000780 	andeq	r0, r0, r0, lsl #15
    4b70:	d6070802 	strle	r0, [r7], -r2, lsl #16
    4b74:	04000009 	streq	r0, [r0], #-9
    4b78:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    4b7c:	04020074 	streq	r0, [r2], #-116	; 0xffffff8c
    4b80:	0009e007 	andeq	lr, r9, r7
    4b84:	01800300 	orreq	r0, r0, r0, lsl #6
    4b88:	18030000 	stmdane	r3, {}	; <UNPREDICTABLE>
    4b8c:	0000002c 	andeq	r0, r0, ip, lsr #32
    4b90:	0c046705 	stceq	7, cr6, [r4], {5}
    4b94:	000000b9 	strheq	r0, [r0], -r9
    4b98:	001fdc06 	andseq	sp, pc, r6, lsl #24
    4b9c:	b90e0400 	stmdblt	lr, {sl}
    4ba0:	00000000 	andeq	r0, r0, r0
    4ba4:	001f7c06 	andseq	r7, pc, r6, lsl #24
    4ba8:	76110400 	ldrvc	r0, [r1], -r0, lsl #8
    4bac:	64000000 	strvs	r0, [r0], #-0
    4bb0:	006e6907 	rsbeq	r6, lr, r7, lsl #18
    4bb4:	00761404 	rsbseq	r1, r6, r4, lsl #8
    4bb8:	07650000 	strbeq	r0, [r5, -r0]!
    4bbc:	0074756f 	rsbseq	r7, r4, pc, ror #10
    4bc0:	00761704 	rsbseq	r1, r6, r4, lsl #14
    4bc4:	00660000 	rsbeq	r0, r6, r0
    4bc8:	00007608 	andeq	r7, r0, r8, lsl #12
    4bcc:	0000c900 	andeq	ip, r0, r0, lsl #18
    4bd0:	006f0900 	rsbeq	r0, pc, r0, lsl #18
    4bd4:	00630000 	rsbeq	r0, r3, r0
    4bd8:	001f8203 	andseq	r8, pc, r3, lsl #4
    4bdc:	81180400 	tsthi	r8, r0, lsl #8
    4be0:	0a000000 	beq	4be8 <startup-0x1fffb418>
    4be4:	00001fe6 	andeq	r1, r0, r6, ror #31
    4be8:	00762d01 	rsbseq	r2, r6, r1, lsl #26
    4bec:	3cfe0000 	ldclcc	0, cr0, [lr]
    4bf0:	005e2000 	subseq	r2, lr, r0
    4bf4:	9c010000 	stcls	0, cr0, [r1], {-0}
    4bf8:	0000010a 	andeq	r0, r0, sl, lsl #2
    4bfc:	001ffb0b 	andseq	pc, pc, fp, lsl #22
    4c00:	0a2d0100 	beq	b45008 <startup-0x1f4baff8>
    4c04:	02000001 	andeq	r0, r0, #1
    4c08:	d70b7491 			; <UNDEFINED> instruction: 0xd70b7491
    4c0c:	0100001f 	tsteq	r0, pc, lsl r0
    4c10:	0001102d 	andeq	r1, r1, sp, lsr #32
    4c14:	70910200 	addsvc	r0, r1, r0, lsl #4
    4c18:	c9040c00 	stmdbgt	r4, {sl, fp}
    4c1c:	0c000000 	stceq	0, cr0, [r0], {-0}
    4c20:	00007604 	andeq	r7, r0, r4, lsl #12
    4c24:	1fc40d00 	svcne	0x00c40d00
    4c28:	1f010000 	svcne	0x00010000
    4c2c:	20003cbe 			; <UNDEFINED> instruction: 0x20003cbe
    4c30:	00000040 	andeq	r0, r0, r0, asr #32
    4c34:	01569c01 	cmpeq	r6, r1, lsl #24
    4c38:	fb0b0000 	blx	2c4c42 <startup-0x1fd3b3be>
    4c3c:	0100001f 	tsteq	r0, pc, lsl r0
    4c40:	00010a1f 	andeq	r0, r1, pc, lsl sl
    4c44:	6c910200 	lfmvs	f0, 4, [r1], {0}
    4c48:	001fe10b 	andseq	lr, pc, fp, lsl #2
    4c4c:	761f0100 	ldrvc	r0, [pc], -r0, lsl #2
    4c50:	02000000 	andeq	r0, r0, #0
    4c54:	020e6b91 	andeq	r6, lr, #148480	; 0x24400
    4c58:	01000020 	tsteq	r0, r0, lsr #32
    4c5c:	00007621 	andeq	r7, r0, r1, lsr #12
    4c60:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    4c64:	1f720a00 	svcne	0x00720a00
    4c68:	0c010000 	stceq	0, cr0, [r1], {-0}
    4c6c:	00000076 	andeq	r0, r0, r6, ror r0
    4c70:	20003c5c 	andcs	r3, r0, ip, asr ip
    4c74:	00000062 	andeq	r0, r0, r2, rrx
    4c78:	018c9c01 	orreq	r9, ip, r1, lsl #24
    4c7c:	fb0b0000 	blx	2c4c86 <startup-0x1fd3b37a>
    4c80:	0100001f 	tsteq	r0, pc, lsl r0
    4c84:	00010a0c 	andeq	r0, r1, ip, lsl #20
    4c88:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    4c8c:	001fe10b 	andseq	lr, pc, fp, lsl #2
    4c90:	760c0100 	strvc	r0, [ip], -r0, lsl #2
    4c94:	02000000 	andeq	r0, r0, #0
    4c98:	0f007391 	svceq	0x00007391
    4c9c:	00001ff0 	strdeq	r1, [r0], -r0
    4ca0:	3c340401 	cfldrscc	mvf0, [r4], #-4
    4ca4:	00282000 	eoreq	r2, r8, r0
    4ca8:	9c010000 	stcls	0, cr0, [r1], {-0}
    4cac:	001ffb0b 	andseq	pc, pc, fp, lsl #22
    4cb0:	0a040100 	beq	1050b8 <startup-0x1fefaf48>
    4cb4:	02000001 	andeq	r0, r0, #1
    4cb8:	00007491 	muleq	r0, r1, r4

Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
   0:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
   4:	030b130e 	movweq	r1, #45838	; 0xb30e
   8:	110e1b0e 	tstne	lr, lr, lsl #22
   c:	10061201 	andne	r1, r6, r1, lsl #4
  10:	02000017 	andeq	r0, r0, #23
  14:	0e030104 	adfeqs	f0, f3, f4
  18:	0b0b0b3e 	bleq	2c2d18 <startup-0x1fd3d2e8>
  1c:	0b3a1349 	bleq	e84d48 <startup-0x1f17b2b8>
  20:	13010b3b 	movwne	r0, #6971	; 0x1b3b
  24:	28030000 	stmdacs	r3, {}	; <UNPREDICTABLE>
  28:	1c0e0300 	stcne	3, cr0, [lr], {-0}
  2c:	0400000d 	streq	r0, [r0], #-13
  30:	0e030028 	cdpeq	0, 0, cr0, cr3, cr8, {1}
  34:	00000b1c 	andeq	r0, r0, ip, lsl fp
  38:	0b002405 	bleq	9054 <startup-0x1fff6fac>
  3c:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
  40:	0600000e 	streq	r0, [r0], -lr
  44:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
  48:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
  4c:	00001349 	andeq	r1, r0, r9, asr #6
  50:	03001607 	movweq	r1, #1543	; 0x607
  54:	3b0b3a0e 	blcc	2ce894 <startup-0x1fd3176c>
  58:	0013490b 	andseq	r4, r3, fp, lsl #18
  5c:	00240800 	eoreq	r0, r4, r0, lsl #16
  60:	0b3e0b0b 	bleq	f82c94 <startup-0x1f07d36c>
  64:	00000803 	andeq	r0, r0, r3, lsl #16
  68:	49003509 	stmdbmi	r0, {r0, r3, r8, sl, ip, sp}
  6c:	0a000013 	beq	c0 <startup-0x1fffff40>
  70:	13490026 	movtne	r0, #36902	; 0x9026
  74:	130b0000 	movwne	r0, #45056	; 0xb000
  78:	3a050b01 	bcc	142c84 <startup-0x1febd37c>
  7c:	01053b0b 	tsteq	r5, fp, lsl #22
  80:	0c000013 	stceq	0, cr0, [r0], {19}
  84:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
  88:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
  8c:	0b381349 	bleq	e04db8 <startup-0x1f1fb248>
  90:	0d0d0000 	stceq	0, cr0, [sp, #-0]
  94:	3a0e0300 	bcc	380c9c <startup-0x1fc7f364>
  98:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
  9c:	00053813 	andeq	r3, r5, r3, lsl r8
  a0:	000d0e00 	andeq	r0, sp, r0, lsl #28
  a4:	0b3a0803 	bleq	e820b8 <startup-0x1f17df48>
  a8:	1349053b 	movtne	r0, #38203	; 0x953b
  ac:	00000538 	andeq	r0, r0, r8, lsr r5
  b0:	4901010f 	stmdbmi	r1, {r0, r1, r2, r3, r8}
  b4:	00130113 	andseq	r0, r3, r3, lsl r1
  b8:	00211000 	eoreq	r1, r1, r0
  bc:	0b2f1349 	bleq	bc4de8 <startup-0x1f43b218>
  c0:	21110000 	tstcs	r1, r0
  c4:	2f134900 	svccs	0x00134900
  c8:	12000005 	andne	r0, r0, #5
  cc:	0b0b0113 	bleq	2c0520 <startup-0x1fd3fae0>
  d0:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
  d4:	00001301 	andeq	r1, r0, r1, lsl #6
  d8:	03000d13 	movweq	r0, #3347	; 0xd13
  dc:	3b0b3a08 	blcc	2ce904 <startup-0x1fd316fc>
  e0:	38134905 	ldmdacc	r3, {r0, r2, r8, fp, lr}
  e4:	1400000b 	strne	r0, [r0], #-11
  e8:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
  ec:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
  f0:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
  f4:	0000193c 	andeq	r1, r0, ip, lsr r9
  f8:	03003415 	movweq	r3, #1045	; 0x415
  fc:	3b0b3a0e 	blcc	2ce93c <startup-0x1fd316c4>
 100:	3f13490b 	svccc	0x0013490b
 104:	00193c19 	andseq	r3, r9, r9, lsl ip
 108:	01041600 	tsteq	r4, r0, lsl #12
 10c:	0b0b0b3e 	bleq	2c2e0c <startup-0x1fd3d1f4>
 110:	0b3a1349 	bleq	e84e3c <startup-0x1f17b1c4>
 114:	1301053b 	movwne	r0, #5435	; 0x153b
 118:	13170000 	tstne	r7, #0
 11c:	3a0b0b01 	bcc	2c2d28 <startup-0x1fd3d2d8>
 120:	010b3b0b 	tsteq	fp, fp, lsl #22
 124:	18000013 	stmdane	r0, {r0, r1, r4}
 128:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
 12c:	0b3b0b3a 	bleq	ec2e1c <startup-0x1f13d1e4>
 130:	0b381349 	bleq	e04e5c <startup-0x1f1fb1a4>
 134:	0d190000 	ldceq	0, cr0, [r9, #-0]
 138:	3a080300 	bcc	200d40 <startup-0x1fdff2c0>
 13c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 140:	000b3813 	andeq	r3, fp, r3, lsl r8
 144:	000d1a00 	andeq	r1, sp, r0, lsl #20
 148:	0b3a0e03 	bleq	e8395c <startup-0x1f17c6a4>
 14c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 150:	0b0d0b0b 	bleq	342d84 <startup-0x1fcbd27c>
 154:	0b380b0c 	bleq	e02d8c <startup-0x1f1fd274>
 158:	0d1b0000 	ldceq	0, cr0, [fp, #-0]
 15c:	3a080300 	bcc	200d64 <startup-0x1fdff29c>
 160:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 164:	0d0b0b13 	vstreq	d0, [fp, #-76]	; 0xffffffb4
 168:	380b0c0b 	stmdacc	fp, {r0, r1, r3, sl, fp}
 16c:	1c00000b 	stcne	0, cr0, [r0], {11}
 170:	0b3e0104 	bleq	f80588 <startup-0x1f07fa78>
 174:	13490b0b 	movtne	r0, #39691	; 0x9b0b
 178:	0b3b0b3a 	bleq	ec2e68 <startup-0x1f13d198>
 17c:	00001301 	andeq	r1, r0, r1, lsl #6
 180:	0b01171d 	bleq	45dfc <startup-0x1ffba204>
 184:	3b0b3a0b 	blcc	2ce9b8 <startup-0x1fd31648>
 188:	0013010b 	andseq	r0, r3, fp, lsl #2
 18c:	000d1e00 	andeq	r1, sp, r0, lsl #28
 190:	0b3a0e03 	bleq	e839a4 <startup-0x1f17c65c>
 194:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 198:	151f0000 	ldrne	r0, [pc, #-0]	; 1a0 <startup-0x1ffffe60>
 19c:	01192701 	tsteq	r9, r1, lsl #14
 1a0:	20000013 	andcs	r0, r0, r3, lsl r0
 1a4:	13490005 	movtne	r0, #36869	; 0x9005
 1a8:	0f210000 	svceq	0x00210000
 1ac:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
 1b0:	22000013 	andcs	r0, r0, #19
 1b4:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 1b8:	0b3b0b3a 	bleq	ec2ea8 <startup-0x1f13d158>
 1bc:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
 1c0:	00001802 	andeq	r1, r0, r2, lsl #16
 1c4:	3f012e23 	svccc	0x00012e23
 1c8:	3a0e0319 	bcc	380e34 <startup-0x1fc7f1cc>
 1cc:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 1d0:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
 1d4:	96184006 	ldrls	r4, [r8], -r6
 1d8:	13011942 	movwne	r1, #6466	; 0x1942
 1dc:	34240000 	strtcc	r0, [r4], #-0
 1e0:	3a0e0300 	bcc	380de8 <startup-0x1fc7f218>
 1e4:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 1e8:	00180213 	andseq	r0, r8, r3, lsl r2
 1ec:	00342500 	eorseq	r2, r4, r0, lsl #10
 1f0:	0b3a0e03 	bleq	e83a04 <startup-0x1f17c5fc>
 1f4:	1349053b 	movtne	r0, #38203	; 0x953b
 1f8:	00001802 	andeq	r1, r0, r2, lsl #16
 1fc:	3f012e26 	svccc	0x00012e26
 200:	3a0e0319 	bcc	380e6c <startup-0x1fc7f194>
 204:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 208:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 20c:	96184006 	ldrls	r4, [r8], -r6
 210:	13011942 	movwne	r1, #6466	; 0x1942
 214:	0b270000 	bleq	9c021c <startup-0x1f63fde4>
 218:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
 21c:	28000006 	stmdacs	r0, {r1, r2}
 220:	08030005 	stmdaeq	r3, {r0, r2}
 224:	0b3b0b3a 	bleq	ec2f14 <startup-0x1f13d0ec>
 228:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 22c:	2e290000 	cdpcs	0, 2, cr0, cr9, cr0, {0}
 230:	03193f01 	tsteq	r9, #1, 30
 234:	3b0b3a0e 	blcc	2cea74 <startup-0x1fd3158c>
 238:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
 23c:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
 240:	96184006 	ldrls	r4, [r8], -r6
 244:	13011942 	movwne	r1, #6466	; 0x1942
 248:	052a0000 	streq	r0, [sl, #-0]!
 24c:	3a0e0300 	bcc	380e54 <startup-0x1fc7f1ac>
 250:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 254:	00180213 	andseq	r0, r8, r3, lsl r2
 258:	012e2b00 			; <UNDEFINED> instruction: 0x012e2b00
 25c:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 260:	0b3b0b3a 	bleq	ec2f50 <startup-0x1f13d0b0>
 264:	13491927 	movtne	r1, #39207	; 0x9927
 268:	06120111 			; <UNDEFINED> instruction: 0x06120111
 26c:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 270:	00130119 	andseq	r0, r3, r9, lsl r1
 274:	012e2c00 			; <UNDEFINED> instruction: 0x012e2c00
 278:	0b3a0e03 	bleq	e83a8c <startup-0x1f17c574>
 27c:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
 280:	06120111 			; <UNDEFINED> instruction: 0x06120111
 284:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 288:	2d000019 	stccs	0, cr0, [r0, #-100]	; 0xffffff9c
 28c:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
 290:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 294:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 298:	01000000 	mrseq	r0, (UNDEF: 0)
 29c:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
 2a0:	0e030b13 	vmoveq.32	d3[0], r0
 2a4:	01110e1b 	tsteq	r1, fp, lsl lr
 2a8:	17100612 			; <UNDEFINED> instruction: 0x17100612
 2ac:	24020000 	strcs	r0, [r2], #-0
 2b0:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 2b4:	000e030b 	andeq	r0, lr, fp, lsl #6
 2b8:	00160300 	andseq	r0, r6, r0, lsl #6
 2bc:	0b3a0e03 	bleq	e83ad0 <startup-0x1f17c530>
 2c0:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 2c4:	24040000 	strcs	r0, [r4], #-0
 2c8:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 2cc:	0008030b 	andeq	r0, r8, fp, lsl #6
 2d0:	00350500 	eorseq	r0, r5, r0, lsl #10
 2d4:	00001349 	andeq	r1, r0, r9, asr #6
 2d8:	49010106 	stmdbmi	r1, {r1, r2, r8}
 2dc:	00130113 	andseq	r0, r3, r3, lsl r1
 2e0:	00210700 	eoreq	r0, r1, r0, lsl #14
 2e4:	0b2f1349 	bleq	bc5010 <startup-0x1f43aff0>
 2e8:	34080000 	strcc	r0, [r8], #-0
 2ec:	3a0e0300 	bcc	380ef4 <startup-0x1fc7f10c>
 2f0:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 2f4:	3c193f13 	ldccc	15, cr3, [r9], {19}
 2f8:	09000019 	stmdbeq	r0, {r0, r3, r4}
 2fc:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 300:	0b3b0b3a 	bleq	ec2ff0 <startup-0x1f13d010>
 304:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
 308:	0000193c 	andeq	r1, r0, ip, lsr r9
 30c:	3e01040a 	cdpcc	4, 0, cr0, cr1, cr10, {0}
 310:	490b0b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp}
 314:	3b0b3a13 	blcc	2ceb68 <startup-0x1fd31498>
 318:	00130105 	andseq	r0, r3, r5, lsl #2
 31c:	00280b00 	eoreq	r0, r8, r0, lsl #22
 320:	0b1c0e03 	bleq	703b34 <startup-0x1f8fc4cc>
 324:	280c0000 	stmdacs	ip, {}	; <UNPREDICTABLE>
 328:	1c080300 	stcne	3, cr0, [r8], {-0}
 32c:	0d00000b 	stceq	0, cr0, [r0, #-44]	; 0xffffffd4
 330:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
 334:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 338:	00001349 	andeq	r1, r0, r9, asr #6
 33c:	0b01130e 	bleq	44f7c <startup-0x1ffbb084>
 340:	3b0b3a0b 	blcc	2ceb74 <startup-0x1fd3148c>
 344:	00130105 	andseq	r0, r3, r5, lsl #2
 348:	000d0f00 	andeq	r0, sp, r0, lsl #30
 34c:	0b3a0803 	bleq	e82360 <startup-0x1f17dca0>
 350:	1349053b 	movtne	r0, #38203	; 0x953b
 354:	00000b38 	andeq	r0, r0, r8, lsr fp
 358:	03000d10 	movweq	r0, #3344	; 0xd10
 35c:	3b0b3a0e 	blcc	2ceb9c <startup-0x1fd31464>
 360:	38134905 	ldmdacc	r3, {r0, r2, r8, fp, lr}
 364:	1100000b 	tstne	r0, fp
 368:	050b0113 	streq	r0, [fp, #-275]	; 0xfffffeed
 36c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 370:	00001301 	andeq	r1, r0, r1, lsl #6
 374:	03000d12 	movweq	r0, #3346	; 0xd12
 378:	3b0b3a0e 	blcc	2cebb8 <startup-0x1fd31448>
 37c:	38134905 	ldmdacc	r3, {r0, r2, r8, fp, lr}
 380:	13000005 	movwne	r0, #5
 384:	0803000d 	stmdaeq	r3, {r0, r2, r3}
 388:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 38c:	05381349 	ldreq	r1, [r8, #-841]!	; 0xfffffcb7
 390:	13140000 	tstne	r4, #0
 394:	3a0b0b01 	bcc	2c2fa0 <startup-0x1fd3d060>
 398:	010b3b0b 	tsteq	fp, fp, lsl #22
 39c:	15000013 	strne	r0, [r0, #-19]	; 0xffffffed
 3a0:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
 3a4:	0b3b0b3a 	bleq	ec3094 <startup-0x1f13cf6c>
 3a8:	0b381349 	bleq	e050d4 <startup-0x1f1faf2c>
 3ac:	0d160000 	ldceq	0, cr0, [r6, #-0]
 3b0:	3a080300 	bcc	200fb8 <startup-0x1fdff048>
 3b4:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 3b8:	000b3813 	andeq	r3, fp, r3, lsl r8
 3bc:	012e1700 			; <UNDEFINED> instruction: 0x012e1700
 3c0:	0b3a0e03 	bleq	e83bd4 <startup-0x1f17c42c>
 3c4:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
 3c8:	01111349 	tsteq	r1, r9, asr #6
 3cc:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 3d0:	01194297 			; <UNDEFINED> instruction: 0x01194297
 3d4:	18000013 	stmdane	r0, {r0, r1, r4}
 3d8:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
 3dc:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 3e0:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 3e4:	34190000 	ldrcc	r0, [r9], #-0
 3e8:	3a0e0300 	bcc	380ff0 <startup-0x1fc7f010>
 3ec:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 3f0:	00180213 	andseq	r0, r8, r3, lsl r2
 3f4:	012e1a00 			; <UNDEFINED> instruction: 0x012e1a00
 3f8:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 3fc:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 400:	01111927 	tsteq	r1, r7, lsr #18
 404:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 408:	01194297 			; <UNDEFINED> instruction: 0x01194297
 40c:	1b000013 	blne	460 <startup-0x1ffffba0>
 410:	0b0b000f 	bleq	2c0454 <startup-0x1fd3fbac>
 414:	00001349 	andeq	r1, r0, r9, asr #6
 418:	3f012e1c 	svccc	0x00012e1c
 41c:	3a0e0319 	bcc	381088 <startup-0x1fc7ef78>
 420:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
 424:	11134919 	tstne	r3, r9, lsl r9
 428:	40061201 	andmi	r1, r6, r1, lsl #4
 42c:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 430:	00001301 	andeq	r1, r0, r1, lsl #6
 434:	3f012e1d 	svccc	0x00012e1d
 438:	3a0e0319 	bcc	3810a4 <startup-0x1fc7ef5c>
 43c:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
 440:	11134919 	tstne	r3, r9, lsl r9
 444:	40061201 	andmi	r1, r6, r1, lsl #4
 448:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 44c:	00001301 	andeq	r1, r0, r1, lsl #6
 450:	3f012e1e 	svccc	0x00012e1e
 454:	3a0e0319 	bcc	3810c0 <startup-0x1fc7ef40>
 458:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 45c:	11134919 	tstne	r3, r9, lsl r9
 460:	40061201 	andmi	r1, r6, r1, lsl #4
 464:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 468:	00001301 	andeq	r1, r0, r1, lsl #6
 46c:	0300051f 	movweq	r0, #1311	; 0x51f
 470:	3b0b3a0e 	blcc	2cecb0 <startup-0x1fd31350>
 474:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 478:	20000018 	andcs	r0, r0, r8, lsl r0
 47c:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 480:	0b3b0b3a 	bleq	ec3170 <startup-0x1f13ce90>
 484:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 488:	2e210000 	cdpcs	0, 2, cr0, cr1, cr0, {0}
 48c:	03193f01 	tsteq	r9, #1, 30
 490:	3b0b3a0e 	blcc	2cecd0 <startup-0x1fd31330>
 494:	1119270b 	tstne	r9, fp, lsl #14
 498:	40061201 	andmi	r1, r6, r1, lsl #4
 49c:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 4a0:	01000000 	mrseq	r0, (UNDEF: 0)
 4a4:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
 4a8:	0e030b13 	vmoveq.32	d3[0], r0
 4ac:	01110e1b 	tsteq	r1, fp, lsl lr
 4b0:	17100612 			; <UNDEFINED> instruction: 0x17100612
 4b4:	24020000 	strcs	r0, [r2], #-0
 4b8:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 4bc:	000e030b 	andeq	r0, lr, fp, lsl #6
 4c0:	00160300 	andseq	r0, r6, r0, lsl #6
 4c4:	0b3a0e03 	bleq	e83cd8 <startup-0x1f17c328>
 4c8:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 4cc:	24040000 	strcs	r0, [r4], #-0
 4d0:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 4d4:	0008030b 	andeq	r0, r8, fp, lsl #6
 4d8:	00350500 	eorseq	r0, r5, r0, lsl #10
 4dc:	00001349 	andeq	r1, r0, r9, asr #6
 4e0:	03003406 	movweq	r3, #1030	; 0x406
 4e4:	3b0b3a0e 	blcc	2ced24 <startup-0x1fd312dc>
 4e8:	3f134905 	svccc	0x00134905
 4ec:	00193c19 	andseq	r3, r9, r9, lsl ip
 4f0:	00340700 	eorseq	r0, r4, r0, lsl #14
 4f4:	0b3a0e03 	bleq	e83d08 <startup-0x1f17c2f8>
 4f8:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 4fc:	193c193f 	ldmdbne	ip!, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
 500:	04080000 	streq	r0, [r8], #-0
 504:	0b0b3e01 	bleq	2cfd10 <startup-0x1fd302f0>
 508:	3a13490b 	bcc	4d293c <startup-0x1fb2d6c4>
 50c:	01053b0b 	tsteq	r5, fp, lsl #22
 510:	09000013 	stmdbeq	r0, {r0, r1, r4}
 514:	0e030028 	cdpeq	0, 0, cr0, cr3, cr8, {1}
 518:	00000b1c 	andeq	r0, r0, ip, lsl fp
 51c:	0b01130a 	bleq	4514c <startup-0x1ffbaeb4>
 520:	3b0b3a0b 	blcc	2ced54 <startup-0x1fd312ac>
 524:	00130105 	andseq	r0, r3, r5, lsl #2
 528:	000d0b00 	andeq	r0, sp, r0, lsl #22
 52c:	0b3a0e03 	bleq	e83d40 <startup-0x1f17c2c0>
 530:	1349053b 	movtne	r0, #38203	; 0x953b
 534:	00000b38 	andeq	r0, r0, r8, lsr fp
 538:	03000d0c 	movweq	r0, #3340	; 0xd0c
 53c:	3b0b3a08 	blcc	2ced64 <startup-0x1fd3129c>
 540:	38134905 	ldmdacc	r3, {r0, r2, r8, fp, lr}
 544:	0d00000b 	stceq	0, cr0, [r0, #-44]	; 0xffffffd4
 548:	13490101 	movtne	r0, #37121	; 0x9101
 54c:	00001301 	andeq	r1, r0, r1, lsl #6
 550:	4900210e 	stmdbmi	r0, {r1, r2, r3, r8, sp}
 554:	000b2f13 	andeq	r2, fp, r3, lsl pc
 558:	00160f00 	andseq	r0, r6, r0, lsl #30
 55c:	0b3a0e03 	bleq	e83d70 <startup-0x1f17c290>
 560:	1349053b 	movtne	r0, #38203	; 0x953b
 564:	04100000 	ldreq	r0, [r0], #-0
 568:	0b0b3e01 	bleq	2cfd74 <startup-0x1fd3028c>
 56c:	3a13490b 	bcc	4d29a0 <startup-0x1fb2d660>
 570:	010b3b0b 	tsteq	fp, fp, lsl #22
 574:	11000013 	tstne	r0, r3, lsl r0
 578:	0b0b0113 	bleq	2c09cc <startup-0x1fd3f634>
 57c:	0b3b0b3a 	bleq	ec326c <startup-0x1f13cd94>
 580:	00001301 	andeq	r1, r0, r1, lsl #6
 584:	03000d12 	movweq	r0, #3346	; 0xd12
 588:	3b0b3a0e 	blcc	2cedc8 <startup-0x1fd31238>
 58c:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
 590:	1300000b 	movwne	r0, #11
 594:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 598:	0b3a0e03 	bleq	e83dac <startup-0x1f17c254>
 59c:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
 5a0:	06120111 			; <UNDEFINED> instruction: 0x06120111
 5a4:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 5a8:	00130119 	andseq	r0, r3, r9, lsl r1
 5ac:	00051400 	andeq	r1, r5, r0, lsl #8
 5b0:	0b3a0e03 	bleq	e83dc4 <startup-0x1f17c23c>
 5b4:	1349053b 	movtne	r0, #38203	; 0x953b
 5b8:	00001802 	andeq	r1, r0, r2, lsl #16
 5bc:	03003415 	movweq	r3, #1045	; 0x415
 5c0:	3b0b3a0e 	blcc	2cee00 <startup-0x1fd31200>
 5c4:	02134905 	andseq	r4, r3, #81920	; 0x14000
 5c8:	16000018 			; <UNDEFINED> instruction: 0x16000018
 5cc:	0b0b000f 	bleq	2c0610 <startup-0x1fd3f9f0>
 5d0:	00001349 	andeq	r1, r0, r9, asr #6
 5d4:	3f012e17 	svccc	0x00012e17
 5d8:	3a0e0319 	bcc	381244 <startup-0x1fc7edbc>
 5dc:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
 5e0:	11134919 	tstne	r3, r9, lsl r9
 5e4:	40061201 	andmi	r1, r6, r1, lsl #4
 5e8:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 5ec:	00001301 	andeq	r1, r0, r1, lsl #6
 5f0:	03003418 	movweq	r3, #1048	; 0x418
 5f4:	3b0b3a08 	blcc	2cee1c <startup-0x1fd311e4>
 5f8:	02134905 	andseq	r4, r3, #81920	; 0x14000
 5fc:	19000018 	stmdbne	r0, {r3, r4}
 600:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 604:	0b3a0e03 	bleq	e83e18 <startup-0x1f17c1e8>
 608:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 60c:	06120111 			; <UNDEFINED> instruction: 0x06120111
 610:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 614:	00130119 	andseq	r0, r3, r9, lsl r1
 618:	00051a00 	andeq	r1, r5, r0, lsl #20
 61c:	0b3a0e03 	bleq	e83e30 <startup-0x1f17c1d0>
 620:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 624:	00001802 	andeq	r1, r0, r2, lsl #16
 628:	0300341b 	movweq	r3, #1051	; 0x41b
 62c:	3b0b3a0e 	blcc	2cee6c <startup-0x1fd31194>
 630:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 634:	1c000018 	stcne	0, cr0, [r0], {24}
 638:	08030034 	stmdaeq	r3, {r2, r4, r5}
 63c:	0b3b0b3a 	bleq	ec332c <startup-0x1f13ccd4>
 640:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 644:	2e1d0000 	cdpcs	0, 1, cr0, cr13, cr0, {0}
 648:	03193f01 	tsteq	r9, #1, 30
 64c:	3b0b3a0e 	blcc	2cee8c <startup-0x1fd31174>
 650:	1119270b 	tstne	r9, fp, lsl #14
 654:	40061201 	andmi	r1, r6, r1, lsl #4
 658:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 65c:	01000000 	mrseq	r0, (UNDEF: 0)
 660:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
 664:	0e030b13 	vmoveq.32	d3[0], r0
 668:	01110e1b 	tsteq	r1, fp, lsl lr
 66c:	17100612 			; <UNDEFINED> instruction: 0x17100612
 670:	24020000 	strcs	r0, [r2], #-0
 674:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 678:	000e030b 	andeq	r0, lr, fp, lsl #6
 67c:	00160300 	andseq	r0, r6, r0, lsl #6
 680:	0b3a0e03 	bleq	e83e94 <startup-0x1f17c16c>
 684:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 688:	24040000 	strcs	r0, [r4], #-0
 68c:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 690:	0008030b 	andeq	r0, r8, fp, lsl #6
 694:	00350500 	eorseq	r0, r5, r0, lsl #10
 698:	00001349 	andeq	r1, r0, r9, asr #6
 69c:	03003406 	movweq	r3, #1030	; 0x406
 6a0:	3b0b3a0e 	blcc	2ceee0 <startup-0x1fd31120>
 6a4:	3f134905 	svccc	0x00134905
 6a8:	00193c19 	andseq	r3, r9, r9, lsl ip
 6ac:	00340700 	eorseq	r0, r4, r0, lsl #14
 6b0:	0b3a0e03 	bleq	e83ec4 <startup-0x1f17c13c>
 6b4:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 6b8:	193c193f 	ldmdbne	ip!, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
 6bc:	13080000 	movwne	r0, #32768	; 0x8000
 6c0:	3a0b0b01 	bcc	2c32cc <startup-0x1fd3cd34>
 6c4:	010b3b0b 	tsteq	fp, fp, lsl #22
 6c8:	09000013 	stmdbeq	r0, {r0, r1, r4}
 6cc:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
 6d0:	0b3b0b3a 	bleq	ec33c0 <startup-0x1f13cc40>
 6d4:	0b381349 	bleq	e05400 <startup-0x1f1fac00>
 6d8:	0d0a0000 	stceq	0, cr0, [sl, #-0]
 6dc:	3a080300 	bcc	2012e4 <startup-0x1fdfed1c>
 6e0:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 6e4:	000b3813 	andeq	r3, fp, r3, lsl r8
 6e8:	01010b00 	tsteq	r1, r0, lsl #22
 6ec:	13011349 	movwne	r1, #4937	; 0x1349
 6f0:	210c0000 	mrscs	r0, (UNDEF: 12)
 6f4:	2f134900 	svccs	0x00134900
 6f8:	0d00000b 	stceq	0, cr0, [r0, #-44]	; 0xffffffd4
 6fc:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
 700:	0b3b0b3a 	bleq	ec33f0 <startup-0x1f13cc10>
 704:	0b0b1349 	bleq	2c5430 <startup-0x1fd3abd0>
 708:	0b0c0b0d 	bleq	303344 <startup-0x1fcfccbc>
 70c:	00000b38 	andeq	r0, r0, r8, lsr fp
 710:	03000d0e 	movweq	r0, #3342	; 0xd0e
 714:	3b0b3a08 	blcc	2cef3c <startup-0x1fd310c4>
 718:	0b13490b 	bleq	4d2b4c <startup-0x1fb2d4b4>
 71c:	0c0b0d0b 	stceq	13, cr0, [fp], {11}
 720:	000b380b 	andeq	r3, fp, fp, lsl #16
 724:	012e0f00 			; <UNDEFINED> instruction: 0x012e0f00
 728:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 72c:	0b3b0b3a 	bleq	ec341c <startup-0x1f13cbe4>
 730:	13491927 	movtne	r1, #39207	; 0x9927
 734:	06120111 			; <UNDEFINED> instruction: 0x06120111
 738:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 73c:	00130119 	andseq	r0, r3, r9, lsl r1
 740:	00051000 	andeq	r1, r5, r0
 744:	0b3a0803 	bleq	e82758 <startup-0x1f17d8a8>
 748:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 74c:	00001802 	andeq	r1, r0, r2, lsl #16
 750:	0b000f11 	bleq	439c <startup-0x1fffbc64>
 754:	0013490b 	andseq	r4, r3, fp, lsl #18
 758:	00051200 	andeq	r1, r5, r0, lsl #4
 75c:	0b3a0e03 	bleq	e83f70 <startup-0x1f17c090>
 760:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 764:	00001802 	andeq	r1, r0, r2, lsl #16
 768:	03003413 	movweq	r3, #1043	; 0x413
 76c:	3b0b3a0e 	blcc	2cefac <startup-0x1fd31054>
 770:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 774:	14000018 	strne	r0, [r0], #-24	; 0xffffffe8
 778:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 77c:	0b3a0e03 	bleq	e83f90 <startup-0x1f17c070>
 780:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 784:	06120111 			; <UNDEFINED> instruction: 0x06120111
 788:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 78c:	00130119 	andseq	r0, r3, r9, lsl r1
 790:	010b1500 	tsteq	fp, r0, lsl #10
 794:	06120111 			; <UNDEFINED> instruction: 0x06120111
 798:	2e160000 	cdpcs	0, 1, cr0, cr6, cr0, {0}
 79c:	03193f01 	tsteq	r9, #1, 30
 7a0:	3b0b3a0e 	blcc	2cefe0 <startup-0x1fd31020>
 7a4:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
 7a8:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
 7ac:	97184006 	ldrls	r4, [r8, -r6]
 7b0:	00001942 	andeq	r1, r0, r2, asr #18
 7b4:	01110100 	tsteq	r1, r0, lsl #2
 7b8:	0b130e25 	bleq	4c4054 <startup-0x1fb3bfac>
 7bc:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
 7c0:	06120111 			; <UNDEFINED> instruction: 0x06120111
 7c4:	00001710 	andeq	r1, r0, r0, lsl r7
 7c8:	0b002402 	bleq	97d8 <startup-0x1fff6828>
 7cc:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
 7d0:	0300000e 	movweq	r0, #14
 7d4:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
 7d8:	0b3b0b3a 	bleq	ec34c8 <startup-0x1f13cb38>
 7dc:	00001349 	andeq	r1, r0, r9, asr #6
 7e0:	0b002404 	bleq	97f8 <startup-0x1fff6808>
 7e4:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
 7e8:	05000008 	streq	r0, [r0, #-8]
 7ec:	13490035 	movtne	r0, #36917	; 0x9035
 7f0:	34060000 	strcc	r0, [r6], #-0
 7f4:	3a0e0300 	bcc	3813fc <startup-0x1fc7ec04>
 7f8:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 7fc:	3c193f13 	ldccc	15, cr3, [r9], {19}
 800:	07000019 	smladeq	r0, r9, r0, r0
 804:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 808:	0b3b0b3a 	bleq	ec34f8 <startup-0x1f13cb08>
 80c:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
 810:	0000193c 	andeq	r1, r0, ip, lsr r9
 814:	3e010408 	cdpcc	4, 0, cr0, cr1, cr8, {0}
 818:	490b0b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp}
 81c:	3b0b3a13 	blcc	2cf070 <startup-0x1fd30f90>
 820:	00130105 	andseq	r0, r3, r5, lsl #2
 824:	00280900 	eoreq	r0, r8, r0, lsl #18
 828:	0b1c0e03 	bleq	70403c <startup-0x1f8fbfc4>
 82c:	280a0000 	stmdacs	sl, {}	; <UNPREDICTABLE>
 830:	1c080300 	stcne	3, cr0, [r8], {-0}
 834:	0b00000b 	bleq	868 <startup-0x1ffff798>
 838:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
 83c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 840:	00001349 	andeq	r1, r0, r9, asr #6
 844:	0b01130c 	bleq	4547c <startup-0x1ffbab84>
 848:	3b0b3a0b 	blcc	2cf07c <startup-0x1fd30f84>
 84c:	00130105 	andseq	r0, r3, r5, lsl #2
 850:	000d0d00 	andeq	r0, sp, r0, lsl #26
 854:	0b3a0803 	bleq	e82868 <startup-0x1f17d798>
 858:	1349053b 	movtne	r0, #38203	; 0x953b
 85c:	00000b38 	andeq	r0, r0, r8, lsr fp
 860:	3f012e0e 	svccc	0x00012e0e
 864:	3a0e0319 	bcc	3814d0 <startup-0x1fc7eb30>
 868:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
 86c:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 870:	97184006 	ldrls	r4, [r8, -r6]
 874:	13011942 	movwne	r1, #6466	; 0x1942
 878:	050f0000 	streq	r0, [pc, #-0]	; 880 <startup-0x1ffff780>
 87c:	3a0e0300 	bcc	381484 <startup-0x1fc7eb7c>
 880:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 884:	00180213 	andseq	r0, r8, r3, lsl r2
 888:	012e1000 			; <UNDEFINED> instruction: 0x012e1000
 88c:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 890:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 894:	13491927 	movtne	r1, #39207	; 0x9927
 898:	06120111 			; <UNDEFINED> instruction: 0x06120111
 89c:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 8a0:	00130119 	andseq	r0, r3, r9, lsl r1
 8a4:	00341100 	eorseq	r1, r4, r0, lsl #2
 8a8:	0b3a0e03 	bleq	e840bc <startup-0x1f17bf44>
 8ac:	1349053b 	movtne	r0, #38203	; 0x953b
 8b0:	00001802 	andeq	r1, r0, r2, lsl #16
 8b4:	3f002e12 	svccc	0x00002e12
 8b8:	3a0e0319 	bcc	381524 <startup-0x1fc7eadc>
 8bc:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 8c0:	11134919 	tstne	r3, r9, lsl r9
 8c4:	40061201 	andmi	r1, r6, r1, lsl #4
 8c8:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 8cc:	2e130000 	cdpcs	0, 1, cr0, cr3, cr0, {0}
 8d0:	03193f01 	tsteq	r9, #1, 30
 8d4:	3b0b3a0e 	blcc	2cf114 <startup-0x1fd30eec>
 8d8:	1119270b 	tstne	r9, fp, lsl #14
 8dc:	40061201 	andmi	r1, r6, r1, lsl #4
 8e0:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 8e4:	00001301 	andeq	r1, r0, r1, lsl #6
 8e8:	03000514 	movweq	r0, #1300	; 0x514
 8ec:	3b0b3a0e 	blcc	2cf12c <startup-0x1fd30ed4>
 8f0:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 8f4:	15000018 	strne	r0, [r0, #-24]	; 0xffffffe8
 8f8:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
 8fc:	0b3a0e03 	bleq	e84110 <startup-0x1f17bef0>
 900:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 904:	06120111 			; <UNDEFINED> instruction: 0x06120111
 908:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 90c:	00000019 	andeq	r0, r0, r9, lsl r0
 910:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
 914:	030b130e 	movweq	r1, #45838	; 0xb30e
 918:	110e1b0e 	tstne	lr, lr, lsl #22
 91c:	10061201 	andne	r1, r6, r1, lsl #4
 920:	02000017 	andeq	r0, r0, #23
 924:	0b0b0024 	bleq	2c09bc <startup-0x1fd3f644>
 928:	0e030b3e 	vmoveq.16	d3[0], r0
 92c:	16030000 	strne	r0, [r3], -r0
 930:	3a0e0300 	bcc	381538 <startup-0x1fc7eac8>
 934:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 938:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
 93c:	0b0b0024 	bleq	2c09d4 <startup-0x1fd3f62c>
 940:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
 944:	35050000 	strcc	r0, [r5, #-0]
 948:	00134900 	andseq	r4, r3, r0, lsl #18
 94c:	00260600 	eoreq	r0, r6, r0, lsl #12
 950:	00001349 	andeq	r1, r0, r9, asr #6
 954:	0b011307 	bleq	45578 <startup-0x1ffbaa88>
 958:	3b0b3a05 	blcc	2cf174 <startup-0x1fd30e8c>
 95c:	00130105 	andseq	r0, r3, r5, lsl #2
 960:	000d0800 	andeq	r0, sp, r0, lsl #16
 964:	0b3a0e03 	bleq	e84178 <startup-0x1f17be88>
 968:	1349053b 	movtne	r0, #38203	; 0x953b
 96c:	00000b38 	andeq	r0, r0, r8, lsr fp
 970:	03000d09 	movweq	r0, #3337	; 0xd09
 974:	3b0b3a0e 	blcc	2cf1b4 <startup-0x1fd30e4c>
 978:	38134905 	ldmdacc	r3, {r0, r2, r8, fp, lr}
 97c:	0a000005 	beq	998 <startup-0x1ffff668>
 980:	0803000d 	stmdaeq	r3, {r0, r2, r3}
 984:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 988:	05381349 	ldreq	r1, [r8, #-841]!	; 0xfffffcb7
 98c:	010b0000 	mrseq	r0, (UNDEF: 11)
 990:	01134901 	tsteq	r3, r1, lsl #18
 994:	0c000013 	stceq	0, cr0, [r0], {19}
 998:	13490021 	movtne	r0, #36897	; 0x9021
 99c:	00000b2f 	andeq	r0, r0, pc, lsr #22
 9a0:	4900210d 	stmdbmi	r0, {r0, r2, r3, r8, sp}
 9a4:	00052f13 	andeq	r2, r5, r3, lsl pc
 9a8:	00160e00 	andseq	r0, r6, r0, lsl #28
 9ac:	0b3a0e03 	bleq	e841c0 <startup-0x1f17be40>
 9b0:	1349053b 	movtne	r0, #38203	; 0x953b
 9b4:	130f0000 	movwne	r0, #61440	; 0xf000
 9b8:	3a0b0b01 	bcc	2c35c4 <startup-0x1fd3ca3c>
 9bc:	01053b0b 	tsteq	r5, fp, lsl #22
 9c0:	10000013 	andne	r0, r0, r3, lsl r0
 9c4:	0803000d 	stmdaeq	r3, {r0, r2, r3}
 9c8:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 9cc:	0b381349 	bleq	e056f8 <startup-0x1f1fa908>
 9d0:	34110000 	ldrcc	r0, [r1], #-0
 9d4:	3a0e0300 	bcc	3815dc <startup-0x1fc7ea24>
 9d8:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 9dc:	3c193f13 	ldccc	15, cr3, [r9], {19}
 9e0:	12000019 	andne	r0, r0, #25
 9e4:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 9e8:	0b3b0b3a 	bleq	ec36d8 <startup-0x1f13c928>
 9ec:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
 9f0:	0000193c 	andeq	r1, r0, ip, lsr r9
 9f4:	3e010413 	cfmvdlrcc	mvd1, r0
 9f8:	490b0b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp}
 9fc:	3b0b3a13 	blcc	2cf250 <startup-0x1fd30db0>
 a00:	00130105 	andseq	r0, r3, r5, lsl #2
 a04:	00281400 	eoreq	r1, r8, r0, lsl #8
 a08:	0b1c0e03 	bleq	70421c <startup-0x1f8fbde4>
 a0c:	13150000 	tstne	r5, #0
 a10:	3a0b0b01 	bcc	2c361c <startup-0x1fd3c9e4>
 a14:	010b3b0b 	tsteq	fp, fp, lsl #22
 a18:	16000013 			; <UNDEFINED> instruction: 0x16000013
 a1c:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
 a20:	0b3b0b3a 	bleq	ec3710 <startup-0x1f13c8f0>
 a24:	0b381349 	bleq	e05750 <startup-0x1f1fa8b0>
 a28:	2e170000 	cdpcs	0, 1, cr0, cr7, cr0, {0}
 a2c:	03193f01 	tsteq	r9, #1, 30
 a30:	3b0b3a0e 	blcc	2cf270 <startup-0x1fd30d90>
 a34:	1119270b 	tstne	r9, fp, lsl #14
 a38:	40061201 	andmi	r1, r6, r1, lsl #4
 a3c:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 a40:	00001301 	andeq	r1, r0, r1, lsl #6
 a44:	03000518 	movweq	r0, #1304	; 0x518
 a48:	3b0b3a0e 	blcc	2cf288 <startup-0x1fd30d78>
 a4c:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 a50:	19000018 	stmdbne	r0, {r3, r4}
 a54:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 a58:	0b3b0b3a 	bleq	ec3748 <startup-0x1f13c8b8>
 a5c:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 a60:	0f1a0000 	svceq	0x001a0000
 a64:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
 a68:	1b000013 	blne	abc <startup-0x1ffff544>
 a6c:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 a70:	0b3a0e03 	bleq	e84284 <startup-0x1f17bd7c>
 a74:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 a78:	06120111 			; <UNDEFINED> instruction: 0x06120111
 a7c:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 a80:	00000019 	andeq	r0, r0, r9, lsl r0
 a84:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
 a88:	030b130e 	movweq	r1, #45838	; 0xb30e
 a8c:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xfffff4f2
 a90:	10011117 	andne	r1, r1, r7, lsl r1
 a94:	02000017 	andeq	r0, r0, #23
 a98:	0e030104 	adfeqs	f0, f3, f4
 a9c:	0b0b0b3e 	bleq	2c379c <startup-0x1fd3c864>
 aa0:	0b3a1349 	bleq	e857cc <startup-0x1f17a834>
 aa4:	13010b3b 	movwne	r0, #6971	; 0x1b3b
 aa8:	28030000 	stmdacs	r3, {}	; <UNPREDICTABLE>
 aac:	1c0e0300 	stcne	3, cr0, [lr], {-0}
 ab0:	0400000d 	streq	r0, [r0], #-13
 ab4:	0e030028 	cdpeq	0, 0, cr0, cr3, cr8, {1}
 ab8:	00000b1c 	andeq	r0, r0, ip, lsl fp
 abc:	0b002405 	bleq	9ad8 <startup-0x1fff6528>
 ac0:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
 ac4:	0600000e 	streq	r0, [r0], -lr
 ac8:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
 acc:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 ad0:	00001349 	andeq	r1, r0, r9, asr #6
 ad4:	03001607 	movweq	r1, #1543	; 0x607
 ad8:	3b0b3a0e 	blcc	2cf318 <startup-0x1fd30ce8>
 adc:	0013490b 	andseq	r4, r3, fp, lsl #18
 ae0:	00240800 	eoreq	r0, r4, r0, lsl #16
 ae4:	0b3e0b0b 	bleq	f83718 <startup-0x1f07c8e8>
 ae8:	00000803 	andeq	r0, r0, r3, lsl #16
 aec:	49003509 	stmdbmi	r0, {r0, r3, r8, sl, ip, sp}
 af0:	0a000013 	beq	b44 <startup-0x1ffff4bc>
 af4:	13490026 	movtne	r0, #36902	; 0x9026
 af8:	130b0000 	movwne	r0, #45056	; 0xb000
 afc:	3a050b01 	bcc	143708 <startup-0x1febc8f8>
 b00:	01053b0b 	tsteq	r5, fp, lsl #22
 b04:	0c000013 	stceq	0, cr0, [r0], {19}
 b08:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
 b0c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 b10:	0b381349 	bleq	e0583c <startup-0x1f1fa7c4>
 b14:	0d0d0000 	stceq	0, cr0, [sp, #-0]
 b18:	3a0e0300 	bcc	381720 <startup-0x1fc7e8e0>
 b1c:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 b20:	00053813 	andeq	r3, r5, r3, lsl r8
 b24:	000d0e00 	andeq	r0, sp, r0, lsl #28
 b28:	0b3a0803 	bleq	e82b3c <startup-0x1f17d4c4>
 b2c:	1349053b 	movtne	r0, #38203	; 0x953b
 b30:	00000538 	andeq	r0, r0, r8, lsr r5
 b34:	4901010f 	stmdbmi	r1, {r0, r1, r2, r3, r8}
 b38:	00130113 	andseq	r0, r3, r3, lsl r1
 b3c:	00211000 	eoreq	r1, r1, r0
 b40:	0b2f1349 	bleq	bc586c <startup-0x1f43a794>
 b44:	21110000 	tstcs	r1, r0
 b48:	2f134900 	svccs	0x00134900
 b4c:	12000005 	andne	r0, r0, #5
 b50:	0b0b0113 	bleq	2c0fa4 <startup-0x1fd3f05c>
 b54:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 b58:	00001301 	andeq	r1, r0, r1, lsl #6
 b5c:	03000d13 	movweq	r0, #3347	; 0xd13
 b60:	3b0b3a08 	blcc	2cf388 <startup-0x1fd30c78>
 b64:	38134905 	ldmdacc	r3, {r0, r2, r8, fp, lr}
 b68:	1400000b 	strne	r0, [r0], #-11
 b6c:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 b70:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 b74:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
 b78:	0000193c 	andeq	r1, r0, ip, lsr r9
 b7c:	03003415 	movweq	r3, #1045	; 0x415
 b80:	3b0b3a0e 	blcc	2cf3c0 <startup-0x1fd30c40>
 b84:	3f13490b 	svccc	0x0013490b
 b88:	00193c19 	andseq	r3, r9, r9, lsl ip
 b8c:	01041600 	tsteq	r4, r0, lsl #12
 b90:	0b0b0b3e 	bleq	2c3890 <startup-0x1fd3c770>
 b94:	0b3a1349 	bleq	e858c0 <startup-0x1f17a740>
 b98:	1301053b 	movwne	r0, #5435	; 0x153b
 b9c:	28170000 	ldmdacs	r7, {}	; <UNPREDICTABLE>
 ba0:	1c080300 	stcne	3, cr0, [r8], {-0}
 ba4:	1800000b 	stmdane	r0, {r0, r1, r3}
 ba8:	0b0b0113 	bleq	2c0ffc <startup-0x1fd3f004>
 bac:	0b3b0b3a 	bleq	ec389c <startup-0x1f13c764>
 bb0:	00001301 	andeq	r1, r0, r1, lsl #6
 bb4:	03000d19 	movweq	r0, #3353	; 0xd19
 bb8:	3b0b3a0e 	blcc	2cf3f8 <startup-0x1fd30c08>
 bbc:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
 bc0:	1a00000b 	bne	bf4 <startup-0x1ffff40c>
 bc4:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 bc8:	0b3b0b3a 	bleq	ec38b8 <startup-0x1f13c748>
 bcc:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 bd0:	041b0000 	ldreq	r0, [fp], #-0
 bd4:	0b0b3e01 	bleq	2d03e0 <startup-0x1fd2fc20>
 bd8:	3a13490b 	bcc	4d300c <startup-0x1fb2cff4>
 bdc:	010b3b0b 	tsteq	fp, fp, lsl #22
 be0:	1c000013 	stcne	0, cr0, [r0], {19}
 be4:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
 be8:	0b3a0b0b 	bleq	e8381c <startup-0x1f17c7e4>
 bec:	13010b3b 	movwne	r0, #6971	; 0x1b3b
 bf0:	0d1d0000 	ldceq	0, cr0, [sp, #-0]
 bf4:	3a080300 	bcc	2017fc <startup-0x1fdfe804>
 bf8:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 bfc:	000b3813 	andeq	r3, fp, r3, lsl r8
 c00:	000f1e00 	andeq	r1, pc, r0, lsl #28
 c04:	13490b0b 	movtne	r0, #39691	; 0x9b0b
 c08:	0d1f0000 	ldceq	0, cr0, [pc, #-0]	; c10 <startup-0x1ffff3f0>
 c0c:	3a0e0300 	bcc	381814 <startup-0x1fc7e7ec>
 c10:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 c14:	0d0b0b13 	vstreq	d0, [fp, #-76]	; 0xffffffb4
 c18:	380b0c0b 	stmdacc	fp, {r0, r1, r3, sl, fp}
 c1c:	2000000b 	andcs	r0, r0, fp
 c20:	0803000d 	stmdaeq	r3, {r0, r2, r3}
 c24:	0b3b0b3a 	bleq	ec3914 <startup-0x1f13c6ec>
 c28:	0b0b1349 	bleq	2c5954 <startup-0x1fd3a6ac>
 c2c:	0b0c0b0d 	bleq	303868 <startup-0x1fcfc798>
 c30:	00000b38 	andeq	r0, r0, r8, lsr fp
 c34:	03003421 	movweq	r3, #1057	; 0x421
 c38:	3b0b3a08 	blcc	2cf460 <startup-0x1fd30ba0>
 c3c:	3f13490b 	svccc	0x0013490b
 c40:	00180219 	andseq	r0, r8, r9, lsl r2
 c44:	00342200 	eorseq	r2, r4, r0, lsl #4
 c48:	0b3a0e03 	bleq	e8445c <startup-0x1f17bba4>
 c4c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 c50:	1802193f 	stmdane	r2, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
 c54:	2e230000 	cdpcs	0, 2, cr0, cr3, cr0, {0}
 c58:	03193f01 	tsteq	r9, #1, 30
 c5c:	3b0b3a0e 	blcc	2cf49c <startup-0x1fd30b64>
 c60:	1119270b 	tstne	r9, fp, lsl #14
 c64:	40061201 	andmi	r1, r6, r1, lsl #4
 c68:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 c6c:	00001301 	andeq	r1, r0, r1, lsl #6
 c70:	03000524 	movweq	r0, #1316	; 0x524
 c74:	3b0b3a0e 	blcc	2cf4b4 <startup-0x1fd30b4c>
 c78:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 c7c:	25000018 	strcs	r0, [r0, #-24]	; 0xffffffe8
 c80:	0111010b 	tsteq	r1, fp, lsl #2
 c84:	00000612 	andeq	r0, r0, r2, lsl r6
 c88:	3f012e26 	svccc	0x00012e26
 c8c:	3a0e0319 	bcc	3818f8 <startup-0x1fc7e708>
 c90:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 c94:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 c98:	97184006 	ldrls	r4, [r8, -r6]
 c9c:	13011942 	movwne	r1, #6466	; 0x1942
 ca0:	05270000 	streq	r0, [r7, #-0]!
 ca4:	3a080300 	bcc	2018ac <startup-0x1fdfe754>
 ca8:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 cac:	00180213 	andseq	r0, r8, r3, lsl r2
 cb0:	010b2800 	tsteq	fp, r0, lsl #16
 cb4:	06120111 			; <UNDEFINED> instruction: 0x06120111
 cb8:	00001301 	andeq	r1, r0, r1, lsl #6
 cbc:	03003429 	movweq	r3, #1065	; 0x429
 cc0:	3b0b3a08 	blcc	2cf4e8 <startup-0x1fd30b18>
 cc4:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 cc8:	2a000018 	bcs	d30 <startup-0x1ffff2d0>
 ccc:	13490021 	movtne	r0, #36897	; 0x9021
 cd0:	0000182f 	andeq	r1, r0, pc, lsr #16
 cd4:	3f002e2b 	svccc	0x00002e2b
 cd8:	3a0e0319 	bcc	381944 <startup-0x1fc7e6bc>
 cdc:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 ce0:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 ce4:	96184006 	ldrls	r4, [r8], -r6
 ce8:	00001942 	andeq	r1, r0, r2, asr #18
 cec:	3f002e2c 	svccc	0x00002e2c
 cf0:	3a0e0319 	bcc	38195c <startup-0x1fc7e6a4>
 cf4:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 cf8:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 cfc:	97184006 	ldrls	r4, [r8, -r6]
 d00:	00001942 	andeq	r1, r0, r2, asr #18
 d04:	3f012e2d 	svccc	0x00012e2d
 d08:	3a0e0319 	bcc	381974 <startup-0x1fc7e68c>
 d0c:	110b3b0b 	tstne	fp, fp, lsl #22
 d10:	40061201 	andmi	r1, r6, r1, lsl #4
 d14:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 d18:	00001301 	andeq	r1, r0, r1, lsl #6
 d1c:	3f012e2e 	svccc	0x00012e2e
 d20:	3a0e0319 	bcc	38198c <startup-0x1fc7e674>
 d24:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
 d28:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 d2c:	97184006 	ldrls	r4, [r8, -r6]
 d30:	13011942 	movwne	r1, #6466	; 0x1942
 d34:	052f0000 	streq	r0, [pc, #-0]!	; d3c <startup-0x1ffff2c4>
 d38:	3a0e0300 	bcc	381940 <startup-0x1fc7e6c0>
 d3c:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 d40:	00180213 	andseq	r0, r8, r3, lsl r2
 d44:	012e3000 			; <UNDEFINED> instruction: 0x012e3000
 d48:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 d4c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 d50:	13491927 	movtne	r1, #39207	; 0x9927
 d54:	06120111 			; <UNDEFINED> instruction: 0x06120111
 d58:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 d5c:	00130119 	andseq	r0, r3, r9, lsl r1
 d60:	00343100 	eorseq	r3, r4, r0, lsl #2
 d64:	0b3a0e03 	bleq	e84578 <startup-0x1f17ba88>
 d68:	1349053b 	movtne	r0, #38203	; 0x953b
 d6c:	00001802 	andeq	r1, r0, r2, lsl #16
 d70:	3f002e32 	svccc	0x00002e32
 d74:	3a0e0319 	bcc	3819e0 <startup-0x1fc7e620>
 d78:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
 d7c:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 d80:	97184006 	ldrls	r4, [r8, -r6]
 d84:	00001942 	andeq	r1, r0, r2, asr #18
 d88:	03003433 	movweq	r3, #1075	; 0x433
 d8c:	3b0b3a08 	blcc	2cf5b4 <startup-0x1fd30a4c>
 d90:	02134905 	andseq	r4, r3, #81920	; 0x14000
 d94:	34000018 	strcc	r0, [r0], #-24	; 0xffffffe8
 d98:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 d9c:	0b3a0e03 	bleq	e845b0 <startup-0x1f17ba50>
 da0:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
 da4:	06120111 			; <UNDEFINED> instruction: 0x06120111
 da8:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 dac:	00130119 	andseq	r0, r3, r9, lsl r1
 db0:	002e3500 	eoreq	r3, lr, r0, lsl #10
 db4:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 db8:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 dbc:	13491927 	movtne	r1, #39207	; 0x9927
 dc0:	06120111 			; <UNDEFINED> instruction: 0x06120111
 dc4:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 dc8:	36000019 			; <UNDEFINED> instruction: 0x36000019
 dcc:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 dd0:	0b3a0e03 	bleq	e845e4 <startup-0x1f17ba1c>
 dd4:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
 dd8:	01111349 	tsteq	r1, r9, asr #6
 ddc:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 de0:	01194296 			; <UNDEFINED> instruction: 0x01194296
 de4:	37000013 	smladcc	r0, r3, r0, r0
 de8:	0e03012e 	adfeqsp	f0, f3, #0.5
 dec:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 df0:	13491927 	movtne	r1, #39207	; 0x9927
 df4:	06120111 			; <UNDEFINED> instruction: 0x06120111
 df8:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 dfc:	00130119 	andseq	r0, r3, r9, lsl r1
 e00:	012e3800 			; <UNDEFINED> instruction: 0x012e3800
 e04:	0b3a0e03 	bleq	e84618 <startup-0x1f17b9e8>
 e08:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
 e0c:	06120111 			; <UNDEFINED> instruction: 0x06120111
 e10:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 e14:	00000019 	andeq	r0, r0, r9, lsl r0
 e18:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
 e1c:	030b130e 	movweq	r1, #45838	; 0xb30e
 e20:	110e1b0e 	tstne	lr, lr, lsl #22
 e24:	10061201 	andne	r1, r6, r1, lsl #4
 e28:	02000017 	andeq	r0, r0, #23
 e2c:	0b0b0024 	bleq	2c0ec4 <startup-0x1fd3f13c>
 e30:	0e030b3e 	vmoveq.16	d3[0], r0
 e34:	16030000 	strne	r0, [r3], -r0
 e38:	3a0e0300 	bcc	381a40 <startup-0x1fc7e5c0>
 e3c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 e40:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
 e44:	0b0b0024 	bleq	2c0edc <startup-0x1fd3f124>
 e48:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
 e4c:	13050000 	movwne	r0, #20480	; 0x5000
 e50:	3a0b0b01 	bcc	2c3a5c <startup-0x1fd3c5a4>
 e54:	010b3b0b 	tsteq	fp, fp, lsl #22
 e58:	06000013 			; <UNDEFINED> instruction: 0x06000013
 e5c:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
 e60:	0b3b0b3a 	bleq	ec3b50 <startup-0x1f13c4b0>
 e64:	0b381349 	bleq	e05b90 <startup-0x1f1fa470>
 e68:	0d070000 	stceq	0, cr0, [r7, #-0]
 e6c:	3a080300 	bcc	201a74 <startup-0x1fdfe58c>
 e70:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 e74:	000b3813 	andeq	r3, fp, r3, lsl r8
 e78:	01010800 	tsteq	r1, r0, lsl #16
 e7c:	13011349 	movwne	r1, #4937	; 0x1349
 e80:	21090000 	mrscs	r0, (UNDEF: 9)
 e84:	2f134900 	svccs	0x00134900
 e88:	0a00000b 	beq	ebc <startup-0x1ffff144>
 e8c:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 e90:	0b3a0e03 	bleq	e846a4 <startup-0x1f17b95c>
 e94:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 e98:	01111349 	tsteq	r1, r9, asr #6
 e9c:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 ea0:	01194297 			; <UNDEFINED> instruction: 0x01194297
 ea4:	0b000013 	bleq	ef8 <startup-0x1ffff108>
 ea8:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
 eac:	0b3b0b3a 	bleq	ec3b9c <startup-0x1f13c464>
 eb0:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 eb4:	0f0c0000 	svceq	0x000c0000
 eb8:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
 ebc:	0d000013 	stceq	0, cr0, [r0, #-76]	; 0xffffffb4
 ec0:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 ec4:	0b3a0e03 	bleq	e846d8 <startup-0x1f17b928>
 ec8:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 ecc:	06120111 			; <UNDEFINED> instruction: 0x06120111
 ed0:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 ed4:	00130119 	andseq	r0, r3, r9, lsl r1
 ed8:	00340e00 	eorseq	r0, r4, r0, lsl #28
 edc:	0b3a0e03 	bleq	e846f0 <startup-0x1f17b910>
 ee0:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 ee4:	00001802 	andeq	r1, r0, r2, lsl #16
 ee8:	3f012e0f 	svccc	0x00012e0f
 eec:	3a0e0319 	bcc	381b58 <startup-0x1fc7e4a8>
 ef0:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 ef4:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 ef8:	97184006 	ldrls	r4, [r8, -r6]
 efc:	00001942 	andeq	r1, r0, r2, asr #18
	...

Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	0000001c 	andeq	r0, r0, ip, lsl r0
   4:	00000002 	andeq	r0, r0, r2
   8:	00040000 	andeq	r0, r4, r0
   c:	00000000 	andeq	r0, r0, r0
  10:	20000010 	andcs	r0, r0, r0, lsl r0
  14:	00000788 	andeq	r0, r0, r8, lsl #15
	...
  20:	0000001c 	andeq	r0, r0, ip, lsl r0
  24:	10e00002 	rscne	r0, r0, r2
  28:	00040000 	andeq	r0, r4, r0
  2c:	00000000 	andeq	r0, r0, r0
  30:	20000798 	mulcs	r0, r8, r7
  34:	000011d2 	ldrdeq	r1, [r0], -r2
	...
  40:	0000001c 	andeq	r0, r0, ip, lsl r0
  44:	1c8a0002 	stcne	0, cr0, [sl], {2}
  48:	00040000 	andeq	r0, r4, r0
  4c:	00000000 	andeq	r0, r0, r0
  50:	2000196c 	andcs	r1, r0, ip, ror #18
  54:	0000050e 	andeq	r0, r0, lr, lsl #10
	...
  60:	0000001c 	andeq	r0, r0, ip, lsl r0
  64:	22b10002 	adcscs	r0, r1, #2
  68:	00040000 	andeq	r0, r4, r0
  6c:	00000000 	andeq	r0, r0, r0
  70:	20001e7c 	andcs	r1, r0, ip, ror lr
  74:	000003d2 	ldrdeq	r0, [r0], -r2
	...
  80:	0000001c 	andeq	r0, r0, ip, lsl r0
  84:	27ff0002 	ldrbcs	r0, [pc, r2]!
  88:	00040000 	andeq	r0, r4, r0
  8c:	00000000 	andeq	r0, r0, r0
  90:	20002250 	andcs	r2, r0, r0, asr r2
  94:	00000174 	andeq	r0, r0, r4, ror r1
	...
  a0:	0000001c 	andeq	r0, r0, ip, lsl r0
  a4:	2a900002 	bcs	fe4000b4 <GPIO_Ports+0xde3fc10c>
  a8:	00040000 	andeq	r0, r4, r0
  ac:	00000000 	andeq	r0, r0, r0
  b0:	200023c4 	andcs	r2, r0, r4, asr #7
  b4:	000001c4 	andeq	r0, r0, r4, asr #3
	...
  c0:	00000024 	andeq	r0, r0, r4, lsr #32
  c4:	2fd70002 	svccs	0x00d70002
  c8:	00040000 	andeq	r0, r4, r0
  cc:	00000000 	andeq	r0, r0, r0
  d0:	20002588 	andcs	r2, r0, r8, lsl #11
  d4:	000016aa 	andeq	r1, r0, sl, lsr #13
  d8:	20000000 	andcs	r0, r0, r0
  dc:	0000000c 	andeq	r0, r0, ip
	...
  e8:	0000001c 	andeq	r0, r0, ip, lsl r0
  ec:	4b0f0002 	blmi	3c00fc <startup-0x1fc3ff04>
  f0:	00040000 	andeq	r0, r4, r0
  f4:	00000000 	andeq	r0, r0, r0
  f8:	20003c34 	andcs	r3, r0, r4, lsr ip
  fc:	00000128 	andeq	r0, r0, r8, lsr #2
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
       0:	000002b2 			; <UNDEFINED> instruction: 0x000002b2
       4:	01ab0002 			; <UNDEFINED> instruction: 0x01ab0002
       8:	01020000 	mrseq	r0, (UNDEF: 2)
       c:	000d0efb 	strdeq	r0, [sp], -fp
      10:	01010101 	tsteq	r1, r1, lsl #2
      14:	01000000 	mrseq	r0, (UNDEF: 0)
      18:	2e010000 	cdpcs	0, 0, cr0, cr1, cr0, {0}
      1c:	696c2f2e 	stmdbvs	ip!, {r1, r2, r3, r5, r8, r9, sl, fp, sp}^
      20:	54532f62 	ldrbpl	r2, [r3], #-3938	; 0xfffff09e
      24:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
      28:	696c5f34 	stmdbvs	ip!, {r2, r4, r5, r8, r9, sl, fp, ip, lr}^
      2c:	4d432f62 	stclmi	15, cr2, [r3, #-392]	; 0xfffffe78
      30:	2f534953 	svccs	0x00534953
      34:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
      38:	00656475 	rsbeq	r6, r5, r5, ror r4
      3c:	552f3a43 	strpl	r3, [pc, #-2627]!	; fffff601 <GPIO_Ports+0xdfffb659>
      40:	73726573 	cmnvc	r2, #482344960	; 0x1cc00000
      44:	6972452f 	ldmdbvs	r2!, {r0, r1, r2, r3, r5, r8, sl, lr}^
      48:	6f442f6b 	svcvs	0x00442f6b
      4c:	656d7563 	strbvs	r7, [sp, #-1379]!	; 0xfffffa9d
      50:	2f73746e 	svccs	0x0073746e
      54:	61746144 	cmnvs	r4, r4, asr #2
      58:	6e6b6574 	mcrvs	5, 3, r6, cr11, cr4, {3}
      5c:	746b7369 	strbtvc	r7, [fp], #-873	; 0xfffffc97
      60:	6a6f7270 	bvs	1bdca28 <startup-0x1e4235d8>
      64:	2f746b65 	svccs	0x00746b65
      68:	2f646f6b 	svccs	0x00646f6b
      6c:	0062696c 	rsbeq	r6, r2, ip, ror #18
      70:	6c2f2e2e 	stcvs	14, cr2, [pc], #-184	; ffffffc0 <GPIO_Ports+0xdfffc018>
      74:	532f6269 			; <UNDEFINED> instruction: 0x532f6269
      78:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
      7c:	6c5f3446 	cfldrdvs	mvd3, [pc], {70}	; 0x46
      80:	532f6269 			; <UNDEFINED> instruction: 0x532f6269
      84:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
      88:	78783446 	ldmdavc	r8!, {r1, r2, r6, sl, ip, sp}^
      8c:	6474535f 	ldrbtvs	r5, [r4], #-863	; 0xfffffca1
      90:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
      94:	445f6870 	ldrbmi	r6, [pc], #-2160	; 9c <startup-0x1fffff64>
      98:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
      9c:	6e692f72 	mcrvs	15, 3, r2, cr9, cr2, {3}
      a0:	3a630063 	bcc	18c0234 <startup-0x1e73fdcc>
      a4:	6573635c 	ldrbvs	r6, [r3, #-860]!	; 0xfffffca4
      a8:	5c707061 	ldclpl	0, cr7, [r0], #-388	; 0xfffffe7c
      ac:	65646f63 	strbvs	r6, [r4, #-3939]!	; 0xfffff09d
      b0:	6574696c 	ldrbvs	r6, [r4, #-2412]!	; 0xfffff694
      b4:	6f6f745c 	svcvs	0x006f745c
      b8:	675c736c 	ldrbvs	r7, [ip, -ip, ror #6]
      bc:	612d6363 			; <UNDEFINED> instruction: 0x612d6363
      c0:	615c6d72 	cmpvs	ip, r2, ror sp
      c4:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
      c8:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
      cc:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
      d0:	636e695c 	cmnvs	lr, #92, 18	; 0x170000
      d4:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
      d8:	63616d5c 	cmnvs	r1, #92, 26	; 0x1700
      dc:	656e6968 	strbvs	r6, [lr, #-2408]!	; 0xfffff698
      e0:	5c3a6300 	ldcpl	3, cr6, [sl], #-0
      e4:	61657363 	cmnvs	r5, r3, ror #6
      e8:	635c7070 	cmpvs	ip, #112	; 0x70
      ec:	6c65646f 	cfstrdvs	mvd6, [r5], #-444	; 0xfffffe44
      f0:	5c657469 	cfstrdpl	mvd7, [r5], #-420	; 0xfffffe5c
      f4:	6c6f6f74 	stclvs	15, cr6, [pc], #-464	; ffffff2c <GPIO_Ports+0xdfffbf84>
      f8:	63675c73 	cmnvs	r7, #29440	; 0x7300
      fc:	72612d63 	rsbvc	r2, r1, #6336	; 0x18c0
     100:	72615c6d 	rsbvc	r5, r1, #27904	; 0x6d00
     104:	6f6e2d6d 	svcvs	0x006e2d6d
     108:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
     10c:	5c696261 	sfmpl	f6, 2, [r9], #-388	; 0xfffffe7c
     110:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
     114:	5c656475 	cfstrdpl	mvd6, [r5], #-468	; 0xfffffe2c
     118:	00737973 	rsbseq	r7, r3, r3, ror r9
     11c:	726f6300 	rsbvc	r6, pc, #0, 6
     120:	6d635f65 	stclvs	15, cr5, [r3, #-404]!	; 0xfffffe6c
     124:	00682e34 	rsbeq	r2, r8, r4, lsr lr
     128:	43000001 	movwmi	r0, #1
     12c:	632e4e41 			; <UNDEFINED> instruction: 0x632e4e41
     130:	00000200 	andeq	r0, r0, r0, lsl #4
     134:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
     138:	78346632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, sp, lr}
     13c:	00682e78 	rsbeq	r2, r8, r8, ror lr
     140:	5f000003 	svcpl	0x00000003
     144:	61666564 	cmnvs	r6, r4, ror #10
     148:	5f746c75 	svcpl	0x00746c75
     14c:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
     150:	00682e73 	rsbeq	r2, r8, r3, ror lr
     154:	5f000004 	svcpl	0x00000004
     158:	69647473 	stmdbvs	r4!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
     15c:	682e746e 	stmdavs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
     160:	00000500 	andeq	r0, r0, r0, lsl #10
     164:	74737973 	ldrbtvc	r7, [r3], #-2419	; 0xfffff68d
     168:	735f6d65 	cmpvc	pc, #6464	; 0x1940
     16c:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
     170:	78783466 	ldmdavc	r8!, {r1, r2, r5, r6, sl, ip, sp}^
     174:	0300682e 	movweq	r6, #2094	; 0x82e
     178:	74730000 	ldrbtvc	r0, [r3], #-0
     17c:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
     180:	5f787834 	svcpl	0x00787834
     184:	2e6e6163 	powcsez	f6, f6, f3
     188:	00030068 	andeq	r0, r3, r8, rrx
     18c:	4e414300 	cdpmi	3, 4, cr4, cr1, cr0, {0}
     190:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
     194:	696d0000 	stmdbvs	sp!, {}^	; <UNPREDICTABLE>
     198:	682e6373 	stmdavs	lr!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}
     19c:	00000300 	andeq	r0, r0, r0, lsl #6
     1a0:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
     1a4:	78346632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, sp, lr}
     1a8:	70675f78 	rsbvc	r5, r7, r8, ror pc
     1ac:	682e6f69 	stmdavs	lr!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}
     1b0:	00000300 	andeq	r0, r0, r0, lsl #6
     1b4:	02050000 	andeq	r0, r5, #0
     1b8:	20000010 	andcs	r0, r0, r0, lsl r0
     1bc:	010cdd03 	tsteq	ip, r3, lsl #26
     1c0:	1ecd4b75 			; <UNDEFINED> instruction: 0x1ecd4b75
     1c4:	030204d8 	movweq	r0, #9432	; 0x24d8
     1c8:	3d9073c3 	ldccc	3, cr7, [r0, #780]	; 0x30c
     1cc:	0200914b 	andeq	r9, r0, #-1073741806	; 0xc0000012
     1d0:	002c0204 	eoreq	r0, ip, r4, lsl #4
     1d4:	06010402 	streq	r0, [r1], -r2, lsl #8
     1d8:	214f0658 	cmpcs	pc, r8, asr r6	; <UNPREDICTABLE>
     1dc:	83866769 	orrhi	r6, r6, #27525120	; 0x1a40000
     1e0:	3d3d5986 			; <UNDEFINED> instruction: 0x3d3d5986
     1e4:	4b594b59 	blmi	1652f50 <startup-0x1e9ad0b0>
     1e8:	794b3d3d 	stmdbvc	fp, {r0, r2, r3, r4, r5, r8, sl, fp, ip, sp}^
     1ec:	4fa05967 	svcmi	0x00a05967
     1f0:	c9675b59 	stmdbgt	r7!, {r0, r3, r4, r6, r8, r9, fp, ip, lr}^
     1f4:	af4b67bd 	svcge	0x004b67bd
     1f8:	7677919f 			; <UNDEFINED> instruction: 0x7677919f
     1fc:	02040200 	andeq	r0, r4, #0, 4
     200:	004a6303 	subeq	r6, sl, r3, lsl #6
     204:	06010402 	streq	r0, [r1], -r2, lsl #8
     208:	23030666 	movwcs	r0, #13926	; 0x3666
     20c:	67d92158 			; <UNDEFINED> instruction: 0x67d92158
     210:	3d59864b 	ldclcc	6, cr8, [r9, #-300]	; 0xfffffed4
     214:	3d774c3d 	ldclcc	12, cr4, [r7, #-244]!	; 0xffffff0c
     218:	03040200 	movweq	r0, #16896	; 0x4200
     21c:	0402004b 	streq	r0, [r2], #-75	; 0xffffffb5
     220:	02005703 	andeq	r5, r0, #786432	; 0xc0000
     224:	58060104 	stmdapl	r6, {r2, r8}
     228:	4c4f4d06 	mcrrmi	13, 0, r4, pc, cr6
     22c:	673f4b4f 	ldrvs	r4, [pc, -pc, asr #22]!
     230:	594b5dc9 	stmdbpl	fp, {r0, r3, r6, r7, r8, sl, fp, ip, lr}^
     234:	cc754ec9 	ldclgt	14, cr4, [r5], #-804	; 0xfffffcdc
     238:	6977763e 	ldmdbvs	r7!, {r1, r2, r3, r4, r5, r9, sl, ip, sp, lr}^
     23c:	9495914b 	ldrls	r9, [r5], #331	; 0x14b
     240:	5a4c3d67 	bpl	130f7e4 <startup-0x1ecf081c>
     244:	9faf9fa3 	svcls	0x00af9fa3
     248:	4bbbf5c9 	blmi	feefd974 <GPIO_Ports+0xdeef99cc>
     24c:	02002208 	andeq	r2, r0, #8, 4	; 0x80000000
     250:	6c030204 	sfmvs	f0, 4, [r3], {4}
     254:	04020066 	streq	r0, [r2], #-102	; 0xffffff9a
     258:	06660601 	strbteq	r0, [r6], -r1, lsl #12
     25c:	e7581703 	ldrb	r1, [r8, -r3, lsl #14]
     260:	944c3e3d 	strbls	r3, [ip], #-3645	; 0xfffff1c3
     264:	13084bad 	movwne	r4, #35757	; 0x8bad
     268:	02040200 	andeq	r0, r4, #0, 4
     26c:	00587703 	subseq	r7, r8, r3, lsl #14
     270:	06010402 	streq	r0, [r1], -r2, lsl #8
     274:	0c030658 	stceq	6, cr0, [r3], {88}	; 0x58
     278:	6741ae4a 	strbvs	sl, [r1, -sl, asr #28]
     27c:	6d674d67 	stclvs	13, cr4, [r7, #-412]!	; 0xfffffe64
     280:	3d4b6867 	stclcc	8, cr6, [fp, #-412]	; 0xfffffe64
     284:	683d3d3d 	ldmdavs	sp!, {r0, r2, r3, r4, r5, r8, sl, fp, ip, sp}
     288:	3d3d3d4b 	ldccc	13, cr3, [sp, #-300]!	; 0xfffffed4
     28c:	3d3d683d 	ldccc	8, cr6, [sp, #-244]!	; 0xffffff0c
     290:	683d3d3d 	ldmdavs	sp!, {r0, r2, r3, r4, r5, r8, sl, fp, ip, sp}
     294:	3d3d3d3d 	ldccc	13, cr3, [sp, #-244]!	; 0xffffff0c
     298:	3d4b683d 	stclcc	8, cr6, [fp, #-244]	; 0xffffff0c
     29c:	4d4d3d3d 	stclmi	13, cr3, [sp, #-244]	; 0xffffff0c
     2a0:	3d3d3d4b 	ldccc	13, cr3, [sp, #-300]!	; 0xfffffed4
     2a4:	3d3f3d3d 	ldccc	13, cr3, [pc, #-244]!	; 1b8 <startup-0x1ffffe48>
     2a8:	a0303f3d 	eorsge	r3, r0, sp, lsr pc
     2ac:	30694b3f 	rsbcc	r4, r9, pc, lsr fp
     2b0:	000c022f 	andeq	r0, ip, pc, lsr #4
     2b4:	04130101 	ldreq	r0, [r3], #-257	; 0xfffffeff
     2b8:	00020000 	andeq	r0, r2, r0
     2bc:	000001b9 			; <UNDEFINED> instruction: 0x000001b9
     2c0:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
     2c4:	0101000d 	tsteq	r1, sp
     2c8:	00000101 	andeq	r0, r0, r1, lsl #2
     2cc:	00000100 	andeq	r0, r0, r0, lsl #2
     2d0:	2f3a4301 	svccs	0x003a4301
     2d4:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
     2d8:	72452f73 	subvc	r2, r5, #460	; 0x1cc
     2dc:	442f6b69 	strtmi	r6, [pc], #-2921	; 2e4 <startup-0x1ffffd1c>
     2e0:	6d75636f 	ldclvs	3, cr6, [r5, #-444]!	; 0xfffffe44
     2e4:	73746e65 	cmnvc	r4, #1616	; 0x650
     2e8:	7461442f 	strbtvc	r4, [r1], #-1071	; 0xfffffbd1
     2ec:	6b657461 	blvs	195d478 <startup-0x1e6a2b88>
     2f0:	6b73696e 	blvs	1cda8b0 <startup-0x1e325750>
     2f4:	6f727074 	svcvs	0x00727074
     2f8:	746b656a 	strbtvc	r6, [fp], #-1386	; 0xfffffa96
     2fc:	646f6b2f 	strbtvs	r6, [pc], #-2863	; 304 <startup-0x1ffffcfc>
     300:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
     304:	4d54532f 	ldclmi	3, cr5, [r4, #-188]	; 0xffffff44
     308:	34463233 	strbcc	r3, [r6], #-563	; 0xfffffdcd
     30c:	62696c5f 	rsbvs	r6, r9, #24320	; 0x5f00
     310:	4d54532f 	ldclmi	3, cr5, [r4, #-188]	; 0xffffff44
     314:	34463233 	strbcc	r3, [r6], #-563	; 0xfffffdcd
     318:	535f7878 	cmppl	pc, #120, 16	; 0x780000
     31c:	65506474 	ldrbvs	r6, [r0, #-1140]	; 0xfffffb8c
     320:	68706972 	ldmdavs	r0!, {r1, r4, r5, r6, r8, fp, sp, lr}^
     324:	6972445f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, sl, lr}^
     328:	2f726576 	svccs	0x00726576
     32c:	00637273 	rsbeq	r7, r3, r3, ror r2
     330:	635c3a63 	cmpvs	ip, #405504	; 0x63000
     334:	70616573 	rsbvc	r6, r1, r3, ror r5
     338:	6f635c70 	svcvs	0x00635c70
     33c:	696c6564 	stmdbvs	ip!, {r2, r5, r6, r8, sl, sp, lr}^
     340:	745c6574 	ldrbvc	r6, [ip], #-1396	; 0xfffffa8c
     344:	736c6f6f 	cmnvc	ip, #444	; 0x1bc
     348:	6363675c 	cmnvs	r3, #92, 14	; 0x1700000
     34c:	6d72612d 	ldfvse	f6, [r2, #-180]!	; 0xffffff4c
     350:	6d72615c 	ldfvse	f6, [r2, #-368]!	; 0xfffffe90
     354:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
     358:	61652d65 	cmnvs	r5, r5, ror #26
     35c:	695c6962 	ldmdbvs	ip, {r1, r5, r6, r8, fp, sp, lr}^
     360:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
     364:	6d5c6564 	cfldr64vs	mvdx6, [ip, #-400]	; 0xfffffe70
     368:	69686361 	stmdbvs	r8!, {r0, r5, r6, r8, r9, sp, lr}^
     36c:	6300656e 	movwvs	r6, #1390	; 0x56e
     370:	73635c3a 	cmnvc	r3, #14848	; 0x3a00
     374:	70706165 	rsbsvc	r6, r0, r5, ror #2
     378:	646f635c 	strbtvs	r6, [pc], #-860	; 380 <startup-0x1ffffc80>
     37c:	74696c65 	strbtvc	r6, [r9], #-3173	; 0xfffff39b
     380:	6f745c65 	svcvs	0x00745c65
     384:	5c736c6f 	ldclpl	12, cr6, [r3], #-444	; 0xfffffe44
     388:	2d636367 	stclcs	3, cr6, [r3, #-412]!	; 0xfffffe64
     38c:	5c6d7261 	sfmpl	f7, 2, [sp], #-388	; 0xfffffe7c
     390:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
     394:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
     398:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
     39c:	6e695c69 	cdpvs	12, 6, cr5, cr9, cr9, {3}
     3a0:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
     3a4:	79735c65 	ldmdbvc	r3!, {r0, r2, r5, r6, sl, fp, ip, lr}^
     3a8:	2e2e0073 	mcrcs	0, 1, r0, cr14, cr3, {3}
     3ac:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
     3b0:	4d54532f 	ldclmi	3, cr5, [r4, #-188]	; 0xffffff44
     3b4:	34463233 	strbcc	r3, [r6], #-563	; 0xfffffdcd
     3b8:	62696c5f 	rsbvs	r6, r9, #24320	; 0x5f00
     3bc:	534d432f 	movtpl	r4, #54063	; 0xd32f
     3c0:	692f5349 	stmdbvs	pc!, {r0, r3, r6, r8, r9, ip, lr}	; <UNPREDICTABLE>
     3c4:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
     3c8:	2e006564 	cfsh32cs	mvfx6, mvfx0, #52
     3cc:	696c2f2e 	stmdbvs	ip!, {r1, r2, r3, r5, r8, r9, sl, fp, sp}^
     3d0:	54532f62 	ldrbpl	r2, [r3], #-3938	; 0xfffff09e
     3d4:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
     3d8:	696c5f34 	stmdbvs	ip!, {r2, r4, r5, r8, r9, sl, fp, ip, lr}^
     3dc:	54532f62 	ldrbpl	r2, [r3], #-3938	; 0xfffff09e
     3e0:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
     3e4:	5f787834 	svcpl	0x00787834
     3e8:	50647453 	rsbpl	r7, r4, r3, asr r4
     3ec:	70697265 	rsbvc	r7, r9, r5, ror #4
     3f0:	72445f68 	subvc	r5, r4, #104, 30	; 0x1a0
     3f4:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
     3f8:	636e692f 	cmnvs	lr, #770048	; 0xbc000
     3fc:	74730000 	ldrbtvc	r0, [r3], #-0
     400:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
     404:	5f787834 	svcpl	0x00787834
     408:	2e6e6163 	powcsez	f6, f6, f3
     40c:	00010063 	andeq	r0, r1, r3, rrx
     410:	65645f00 	strbvs	r5, [r4, #-3840]!	; 0xfffff100
     414:	6c756166 	ldfvse	f6, [r5], #-408	; 0xfffffe68
     418:	79745f74 	ldmdbvc	r4!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
     41c:	2e736570 	mrccs	5, 3, r6, cr3, cr0, {3}
     420:	00020068 	andeq	r0, r2, r8, rrx
     424:	74735f00 	ldrbtvc	r5, [r3], #-3840	; 0xfffff100
     428:	746e6964 	strbtvc	r6, [lr], #-2404	; 0xfffff69c
     42c:	0300682e 	movweq	r6, #2094	; 0x82e
     430:	6f630000 	svcvs	0x00630000
     434:	635f6572 	cmpvs	pc, #478150656	; 0x1c800000
     438:	682e346d 	stmdavs	lr!, {r0, r2, r3, r5, r6, sl, ip, sp}
     43c:	00000400 	andeq	r0, r0, r0, lsl #8
     440:	74737973 	ldrbtvc	r7, [r3], #-2419	; 0xfffff68d
     444:	735f6d65 	cmpvc	pc, #6464	; 0x1940
     448:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
     44c:	78783466 	ldmdavc	r8!, {r1, r2, r5, r6, sl, ip, sp}^
     450:	0500682e 	streq	r6, [r0, #-2094]	; 0xfffff7d2
     454:	74730000 	ldrbtvc	r0, [r3], #-0
     458:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
     45c:	2e787834 	mrccs	8, 3, r7, cr8, cr4, {1}
     460:	00050068 	andeq	r0, r5, r8, rrx
     464:	6d747300 	ldclvs	3, cr7, [r4, #-0]
     468:	34663233 	strbtcc	r3, [r6], #-563	; 0xfffffdcd
     46c:	635f7878 	cmpvs	pc, #120, 16	; 0x780000
     470:	682e6e61 	stmdavs	lr!, {r0, r5, r6, r9, sl, fp, sp, lr}
     474:	00000500 	andeq	r0, r0, r0, lsl #10
     478:	02050000 	andeq	r0, r5, #0
     47c:	20000798 	mulcs	r0, r8, r7
     480:	0101a703 	tsteq	r1, r3, lsl #14
     484:	03684d4e 	cmneq	r8, #4992	; 0x1380
     488:	681b661b 	ldmdavs	fp, {r0, r1, r3, r4, r9, sl, sp, lr}
     48c:	740d0369 	strvc	r0, [sp], #-873	; 0xfffffc97
     490:	10034b59 	andne	r4, r3, r9, asr fp
     494:	2269772e 	rsbcs	r7, r9, #12058624	; 0xb80000
     498:	0402003a 	streq	r0, [r2], #-58	; 0xffffffc6
     49c:	06660601 	strbteq	r0, [r6], -r1, lsl #12
     4a0:	4c5d6850 	mrrcmi	8, 5, r6, sp, cr0
     4a4:	784c7878 	stmdavc	ip, {r3, r4, r5, r6, fp, ip, sp, lr}^
     4a8:	78784c78 	ldmdavc	r8!, {r3, r4, r5, r6, sl, fp, lr}^
     4ac:	4c78784c 	ldclmi	8, cr7, [r8], #-304	; 0xfffffed0
     4b0:	784c7878 	stmdavc	ip, {r3, r4, r5, r6, fp, ip, sp, lr}^
     4b4:	223b3d78 	eorscs	r3, fp, #120, 26	; 0x1e00
     4b8:	223b223b 	eorscs	r2, fp, #-1342177277	; 0xb0000003
     4bc:	77351d3b 			; <UNDEFINED> instruction: 0x77351d3b
     4c0:	003a2230 	eorseq	r2, sl, r0, lsr r2
     4c4:	06010402 	streq	r0, [r1], -r2, lsl #8
     4c8:	68500666 	ldmdavs	r0, {r1, r2, r5, r6, r9, sl}^
     4cc:	033d4f5c 	teqeq	sp, #92, 30	; 0x170
     4d0:	4b7400e9 	blmi	1d0087c <startup-0x1e2ff784>
     4d4:	afa16936 	svcge	0x00a16936
     4d8:	3a3db14d 	bcc	f6ca14 <startup-0x1f0935ec>
     4dc:	3d512d4b 	ldclcc	13, cr2, [r1, #-300]	; 0xfffffed4
     4e0:	6b2d4b3a 	blvs	b531d0 <startup-0x1f4ace30>
     4e4:	3a3da14d 	bcc	f68a20 <startup-0x1f0975e0>
     4e8:	3d4f2d4b 	stclcc	13, cr2, [pc, #-300]	; 3c4 <startup-0x1ffffc3c>
     4ec:	6c2d4b3a 			; <UNDEFINED> instruction: 0x6c2d4b3a
     4f0:	4da2bf4d 	stcmi	15, cr11, [r2, #308]!	; 0x134
     4f4:	4ca24daf 	stcmi	13, cr4, [r2], #700	; 0x2bc
     4f8:	0903ada2 	stmdbeq	r3, {r1, r5, r7, r8, sl, fp, sp, pc}
     4fc:	3f3f4e66 	svccc	0x003f4e66
     500:	3f3f3f3f 	svccc	0x003f3f3f
     504:	3f3f3f3f 	svccc	0x003f3f3f
     508:	4a1f033d 	bmi	7c1204 <startup-0x1f83edfc>
     50c:	bd9fa16b 	ldfltd	f2, [pc, #428]	; 6c0 <startup-0x1ffff940>
     510:	820d03ad 	andhi	r0, sp, #-1275068414	; 0xb4000002
     514:	1e7b4d79 	mrcne	13, 3, r4, cr11, cr9, {3}
     518:	74100368 	ldrvc	r0, [r0], #-872	; 0xfffffc98
     51c:	bb694d78 	bllt	1a53b04 <startup-0x1e5ac4fc>
     520:	ba0c03bb 	blt	301414 <startup-0x1fcfebec>
     524:	77207903 	strvc	r7, [r0, -r3, lsl #18]!
     528:	03aeadad 			; <UNDEFINED> instruction: 0x03aeadad
     52c:	5259661f 	subspl	r6, r9, #32505856	; 0x1f00000
     530:	5a925a92 	bpl	fe496f80 <GPIO_Ports+0xde492fd8>
     534:	694d5c92 	stmdbvs	sp, {r1, r4, r7, sl, fp, ip, lr}^
     538:	2d9f4de5 	ldccs	13, cr4, [pc, #916]	; 8d4 <startup-0x1ffff72c>
     53c:	222d9f96 	eorcs	r9, sp, #600	; 0x258
     540:	757a1f2d 	ldrbvc	r1, [sl, #-3885]!	; 0xfffff0d3
     544:	3f082f08 	svccc	0x00082f08
     548:	3b223b3d 	blcc	88f244 <startup-0x1f770dbc>
     54c:	2c303922 			; <UNDEFINED> instruction: 0x2c303922
     550:	223b3d78 	eorscs	r3, fp, #120, 26	; 0x1e00
     554:	3039223b 	eorscc	r2, r9, fp, lsr r2
     558:	3dd8792c 	vldrcc.16	s15, [r8, #88]	; 0x58	; <UNPREDICTABLE>
     55c:	754a0b03 	strbvc	r0, [sl, #-2819]	; 0xfffff4fd
     560:	22598534 	subscs	r8, r9, #52, 10	; 0xd000000
     564:	22592259 	subscs	r2, r9, #-1879048187	; 0x90000005
     568:	9308222f 	movwls	r2, #33327	; 0x822f
     56c:	212f222f 			; <UNDEFINED> instruction: 0x212f222f
     570:	222f212f 	eorcs	r2, pc, #-1073741813	; 0xc000000b
     574:	212f212f 			; <UNDEFINED> instruction: 0x212f212f
     578:	222f212f 	eorcs	r2, pc, #-1073741813	; 0xc000000b
     57c:	080a032f 	stmdaeq	sl, {r0, r1, r2, r3, r5, r8, r9}
     580:	09037912 	stmdbeq	r3, {r1, r4, r8, fp, ip, sp, lr}
     584:	20790382 	rsbscs	r0, r9, r2, lsl #7
     588:	21752167 	cmncs	r5, r7, ror #2
     58c:	20032475 	andcs	r2, r3, r5, ror r4
     590:	4cbb954a 	cfldr32mi	mvfx9, [fp], #296	; 0x128
     594:	d8cabdcc 	stmiale	sl, {r2, r3, r6, r7, r8, sl, fp, ip, sp, pc}^
     598:	c9c9bbca 	stmibgt	r9, {r1, r3, r6, r7, r8, r9, fp, ip, sp, pc}^
     59c:	c9c9bbc9 	stmibgt	r9, {r0, r3, r6, r7, r8, r9, fp, ip, sp, pc}^
     5a0:	1e6d4ccb 	cdpne	12, 6, cr4, cr13, cr11, {6}
     5a4:	4a0a0368 	bmi	28134c <startup-0x1fd7ecb4>
     5a8:	1e6d4c79 	mcrne	12, 3, r4, cr13, cr9, {3}
     5ac:	4a0a0368 	bmi	281354 <startup-0x1fd7ecac>
     5b0:	924c4e75 	subls	r4, ip, #1872	; 0x750
     5b4:	3d4c944c 	cfstrdcc	mvd9, [ip, #-304]	; 0xfffffed0
     5b8:	754a2003 	strbvc	r2, [sl, #-3]
     5bc:	854d344d 	strbhi	r3, [sp, #-1101]	; 0xfffffbb3
     5c0:	02003a22 	andeq	r3, r0, #139264	; 0x22000
     5c4:	66060104 	strvs	r0, [r6], -r4, lsl #2
     5c8:	5c684006 	stclpl	0, cr4, [r8], #-24	; 0xffffffe8
     5cc:	22774d5b 	rsbscs	r4, r7, #5824	; 0x16c0
     5d0:	0402003a 	streq	r0, [r2], #-58	; 0xffffffc6
     5d4:	06580601 	ldrbeq	r0, [r8], -r1, lsl #12
     5d8:	5b5c5a40 	blpl	1716ee0 <startup-0x1e8e9120>
     5dc:	3a22854d 	bcc	8a1b18 <startup-0x1f75e4e8>
     5e0:	01040200 	mrseq	r0, R12_usr
     5e4:	40066606 	andmi	r6, r6, r6, lsl #12
     5e8:	4d5d5c68 	ldclmi	12, cr5, [sp, #-416]	; 0xfffffe60
     5ec:	6609033d 			; <UNDEFINED> instruction: 0x6609033d
     5f0:	6985504b 	stmibvs	r5, {r0, r1, r3, r6, ip, lr}
     5f4:	09033d4d 	stmdbeq	r3, {r0, r2, r3, r6, r8, sl, fp, ip, sp}
     5f8:	502f4b4a 	eorpl	r4, pc, sl, asr #22
     5fc:	003a2277 	eorseq	r2, sl, r7, ror r2
     600:	06010402 	streq	r0, [r1], -r2, lsl #8
     604:	69400666 	stmdbvs	r0, {r1, r2, r5, r6, r9, sl}^
     608:	28033d4d 	stmdacs	r3, {r0, r2, r3, r6, r8, sl, fp, ip, sp}
     60c:	85504b66 	ldrbhi	r4, [r0, #-2918]	; 0xfffff49a
     610:	4a0f033d 	bmi	3c130c <startup-0x1fc3ecf4>
     614:	2f5b504b 	svccs	0x005b504b
     618:	4b4a0a03 	blmi	1282e2c <startup-0x1ed7d1d4>
     61c:	032f5b50 			; <UNDEFINED> instruction: 0x032f5b50
     620:	7a4a01c3 	bvc	1280d34 <startup-0x1ed7f2cc>
     624:	761e6d4d 	ldrvc	r6, [lr], -sp, asr #26
     628:	594a1903 	stmdbpl	sl, {r0, r1, r8, fp, ip}^
     62c:	5d775b51 	fldmdbxpl	r7!, {d21-d60}	;@ Deprecated
     630:	5d775b5b 	fldmdbxpl	r7!, {d21-d65}	;@ Deprecated
     634:	5d775b5b 	fldmdbxpl	r7!, {d21-d65}	;@ Deprecated
     638:	5d775b5b 	fldmdbxpl	r7!, {d21-d65}	;@ Deprecated
     63c:	4e5d775e 	mrcmi	7, 2, r7, cr13, cr14, {2}
     640:	4a15033d 	bmi	54133c <startup-0x1fabecc4>
     644:	034d3359 	movteq	r3, #54105	; 0xd359
     648:	69033c1b 	stmdbvs	r3, {r0, r1, r3, r4, sl, fp, ip, sp}
     64c:	035b4c20 	cmpeq	fp, #32, 24	; 0x2000
     650:	70033c12 	andvc	r3, r3, r2, lsl ip
     654:	0d035b20 	vstreq	d5, [r3, #-128]	; 0xffffff80
     658:	2075033c 	rsbscs	r0, r5, ip, lsr r3
     65c:	3f1d445b 	svccc	0x001d445b
     660:	59741903 	ldmdbpl	r4!, {r0, r1, r8, fp, ip}^
     664:	3b026950 	blcc	9abac <startup-0x1ff65454>
     668:	9f23ad16 	svcls	0x0023ad16
     66c:	9f239f23 	svcls	0x00239f23
     670:	9f239f23 	svcls	0x00239f23
     674:	9f239f23 	svcls	0x00239f23
     678:	9f239f23 	svcls	0x00239f23
     67c:	9f239f23 	svcls	0x00239f23
     680:	9f239f23 	svcls	0x00239f23
     684:	4e344b23 	vaddmi.f64	d4, d4, d19
     688:	6617033d 			; <UNDEFINED> instruction: 0x6617033d
     68c:	f23b035d 	vcge.s<illegal width 64>	q0, <illegal reg q5.5>, <illegal reg q6.5>
     690:	03204503 			; <UNDEFINED> instruction: 0x03204503
     694:	45034a3b 	strmi	r4, [r3, #-2619]	; 0xfffff5c5
     698:	f23b0320 	vcgt.s<illegal width 64>	d0, d11, d16
     69c:	03204503 			; <UNDEFINED> instruction: 0x03204503
     6a0:	4903ba3b 	stmdbmi	r3, {r0, r1, r3, r4, r5, r9, fp, ip, sp, pc}
     6a4:	3d233d20 	stccc	13, cr3, [r3, #-128]!	; 0xffffff80
     6a8:	3d233d23 	stccc	13, cr3, [r3, #-140]!	; 0xffffff74
     6ac:	3d233d23 	stccc	13, cr3, [r3, #-140]!	; 0xffffff74
     6b0:	3e233d23 	cdpcc	13, 2, cr3, cr3, cr3, {1}
     6b4:	3e233e23 	cdpcc	14, 2, cr3, cr3, cr3, {1}
     6b8:	233d3e23 	teqcs	sp, #560	; 0x230
     6bc:	03243e3e 			; <UNDEFINED> instruction: 0x03243e3e
     6c0:	4c59740c 	cfldrdmi	mvd7, [r9], {12}
     6c4:	3d4c5d4d 	stclcc	13, cr5, [ip, #-308]	; 0xfffffecc
     6c8:	01000402 	tsteq	r0, r2, lsl #8
     6cc:	0002a701 	andeq	sl, r2, r1, lsl #14
     6d0:	bb000200 	bllt	ed8 <startup-0x1ffff128>
     6d4:	02000001 	andeq	r0, r0, #1
     6d8:	0d0efb01 	vstreq	d15, [lr, #-4]
     6dc:	01010100 	mrseq	r0, (UNDEF: 17)
     6e0:	00000001 	andeq	r0, r0, r1
     6e4:	01000001 	tsteq	r0, r1
     6e8:	552f3a43 	strpl	r3, [pc, #-2627]!	; fffffcad <GPIO_Ports+0xdfffbd05>
     6ec:	73726573 	cmnvc	r2, #482344960	; 0x1cc00000
     6f0:	6972452f 	ldmdbvs	r2!, {r0, r1, r2, r3, r5, r8, sl, lr}^
     6f4:	6f442f6b 	svcvs	0x00442f6b
     6f8:	656d7563 	strbvs	r7, [sp, #-1379]!	; 0xfffffa9d
     6fc:	2f73746e 	svccs	0x0073746e
     700:	61746144 	cmnvs	r4, r4, asr #2
     704:	6e6b6574 	mcrvs	5, 3, r6, cr11, cr4, {3}
     708:	746b7369 	strbtvc	r7, [fp], #-873	; 0xfffffc97
     70c:	6a6f7270 	bvs	1bdd0d4 <startup-0x1e422f2c>
     710:	2f746b65 	svccs	0x00746b65
     714:	2f646f6b 	svccs	0x00646f6b
     718:	2f62696c 	svccs	0x0062696c
     71c:	334d5453 	movtcc	r5, #54355	; 0xd453
     720:	5f344632 	svcpl	0x00344632
     724:	2f62696c 	svccs	0x0062696c
     728:	334d5453 	movtcc	r5, #54355	; 0xd453
     72c:	78344632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, lr}
     730:	74535f78 	ldrbvc	r5, [r3], #-3960	; 0xfffff088
     734:	72655064 	rsbvc	r5, r5, #100	; 0x64
     738:	5f687069 	svcpl	0x00687069
     73c:	76697244 	strbtvc	r7, [r9], -r4, asr #4
     740:	732f7265 			; <UNDEFINED> instruction: 0x732f7265
     744:	63006372 	movwvs	r6, #882	; 0x372
     748:	73635c3a 	cmnvc	r3, #14848	; 0x3a00
     74c:	70706165 	rsbsvc	r6, r0, r5, ror #2
     750:	646f635c 	strbtvs	r6, [pc], #-860	; 758 <startup-0x1ffff8a8>
     754:	74696c65 	strbtvc	r6, [r9], #-3173	; 0xfffff39b
     758:	6f745c65 	svcvs	0x00745c65
     75c:	5c736c6f 	ldclpl	12, cr6, [r3], #-444	; 0xfffffe44
     760:	2d636367 	stclcs	3, cr6, [r3, #-412]!	; 0xfffffe64
     764:	5c6d7261 	sfmpl	f7, 2, [sp], #-388	; 0xfffffe7c
     768:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
     76c:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
     770:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
     774:	6e695c69 	cdpvs	12, 6, cr5, cr9, cr9, {3}
     778:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
     77c:	616d5c65 	cmnvs	sp, r5, ror #24
     780:	6e696863 	cdpvs	8, 6, cr6, cr9, cr3, {3}
     784:	3a630065 	bcc	18c0920 <startup-0x1e73f6e0>
     788:	6573635c 	ldrbvs	r6, [r3, #-860]!	; 0xfffffca4
     78c:	5c707061 	ldclpl	0, cr7, [r0], #-388	; 0xfffffe7c
     790:	65646f63 	strbvs	r6, [r4, #-3939]!	; 0xfffff09d
     794:	6574696c 	ldrbvs	r6, [r4, #-2412]!	; 0xfffff694
     798:	6f6f745c 	svcvs	0x006f745c
     79c:	675c736c 	ldrbvs	r7, [ip, -ip, ror #6]
     7a0:	612d6363 			; <UNDEFINED> instruction: 0x612d6363
     7a4:	615c6d72 	cmpvs	ip, r2, ror sp
     7a8:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
     7ac:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
     7b0:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
     7b4:	636e695c 	cmnvs	lr, #92, 18	; 0x170000
     7b8:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
     7bc:	7379735c 	cmnvc	r9, #92, 6	; 0x70000001
     7c0:	2f2e2e00 	svccs	0x002e2e00
     7c4:	2f62696c 	svccs	0x0062696c
     7c8:	334d5453 	movtcc	r5, #54355	; 0xd453
     7cc:	5f344632 	svcpl	0x00344632
     7d0:	2f62696c 	svccs	0x0062696c
     7d4:	49534d43 	ldmdbmi	r3, {r0, r1, r6, r8, sl, fp, lr}^
     7d8:	6e692f53 	mcrvs	15, 3, r2, cr9, cr3, {2}
     7dc:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
     7e0:	2e2e0065 	cdpcs	0, 2, cr0, cr14, cr5, {3}
     7e4:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
     7e8:	4d54532f 	ldclmi	3, cr5, [r4, #-188]	; 0xffffff44
     7ec:	34463233 	strbcc	r3, [r6], #-563	; 0xfffffdcd
     7f0:	62696c5f 	rsbvs	r6, r9, #24320	; 0x5f00
     7f4:	4d54532f 	ldclmi	3, cr5, [r4, #-188]	; 0xffffff44
     7f8:	34463233 	strbcc	r3, [r6], #-563	; 0xfffffdcd
     7fc:	535f7878 	cmppl	pc, #120, 16	; 0x780000
     800:	65506474 	ldrbvs	r6, [r0, #-1140]	; 0xfffffb8c
     804:	68706972 	ldmdavs	r0!, {r1, r4, r5, r6, r8, fp, sp, lr}^
     808:	6972445f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, sl, lr}^
     80c:	2f726576 	svccs	0x00726576
     810:	00636e69 	rsbeq	r6, r3, r9, ror #28
     814:	6d747300 	ldclvs	3, cr7, [r4, #-0]
     818:	34663233 	strbtcc	r3, [r6], #-563	; 0xfffffdcd
     81c:	675f7878 			; <UNDEFINED> instruction: 0x675f7878
     820:	2e6f6970 			; <UNDEFINED> instruction: 0x2e6f6970
     824:	00010063 	andeq	r0, r1, r3, rrx
     828:	65645f00 	strbvs	r5, [r4, #-3840]!	; 0xfffff100
     82c:	6c756166 	ldfvse	f6, [r5], #-408	; 0xfffffe68
     830:	79745f74 	ldmdbvc	r4!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
     834:	2e736570 	mrccs	5, 3, r6, cr3, cr0, {3}
     838:	00020068 	andeq	r0, r2, r8, rrx
     83c:	74735f00 	ldrbtvc	r5, [r3], #-3840	; 0xfffff100
     840:	746e6964 	strbtvc	r6, [lr], #-2404	; 0xfffff69c
     844:	0300682e 	movweq	r6, #2094	; 0x82e
     848:	6f630000 	svcvs	0x00630000
     84c:	635f6572 	cmpvs	pc, #478150656	; 0x1c800000
     850:	682e346d 	stmdavs	lr!, {r0, r2, r3, r5, r6, sl, ip, sp}
     854:	00000400 	andeq	r0, r0, r0, lsl #8
     858:	74737973 	ldrbtvc	r7, [r3], #-2419	; 0xfffff68d
     85c:	735f6d65 	cmpvc	pc, #6464	; 0x1940
     860:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
     864:	78783466 	ldmdavc	r8!, {r1, r2, r5, r6, sl, ip, sp}^
     868:	0500682e 	streq	r6, [r0, #-2094]	; 0xfffff7d2
     86c:	74730000 	ldrbtvc	r0, [r3], #-0
     870:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
     874:	2e787834 	mrccs	8, 3, r7, cr8, cr4, {1}
     878:	00050068 	andeq	r0, r5, r8, rrx
     87c:	6d747300 	ldclvs	3, cr7, [r4, #-0]
     880:	34663233 	strbtcc	r3, [r6], #-563	; 0xfffffdcd
     884:	675f7878 			; <UNDEFINED> instruction: 0x675f7878
     888:	2e6f6970 			; <UNDEFINED> instruction: 0x2e6f6970
     88c:	00050068 	andeq	r0, r5, r8, rrx
     890:	05000000 	streq	r0, [r0, #-0]
     894:	00196c02 	andseq	r6, r9, r2, lsl #24
     898:	00ff0320 	rscseq	r0, pc, r0, lsr #6
     89c:	4b4c4e01 	blmi	13140a8 <startup-0x1ecebf58>
     8a0:	034a3803 	movteq	r3, #43011	; 0xa803
     8a4:	4b4c204a 	blmi	13089d4 <startup-0x1ecf762c>
     8a8:	034a3303 	movteq	r3, #41731	; 0xa303
     8ac:	4b4c204f 	blmi	13089f0 <startup-0x1ecf7610>
     8b0:	034a2e03 	movteq	r2, #44547	; 0xae03
     8b4:	4b4c2054 	blmi	1308a0c <startup-0x1ecf75f4>
     8b8:	034a2903 	movteq	r2, #43267	; 0xa903
     8bc:	4b4c2059 	blmi	1308a28 <startup-0x1ecf75d8>
     8c0:	034a2403 	movteq	r2, #41987	; 0xa403
     8c4:	4b4c205e 	blmi	1308a44 <startup-0x1ecf75bc>
     8c8:	034a1f03 	movteq	r1, #44803	; 0xaf03
     8cc:	4b4c2063 	blmi	1308a60 <startup-0x1ecf75a0>
     8d0:	034a1a03 	movteq	r1, #43523	; 0xaa03
     8d4:	4b4c2068 	blmi	1308a7c <startup-0x1ecf7584>
     8d8:	034a1503 	movteq	r1, #42243	; 0xa503
     8dc:	674c206e 	strbvs	r2, [ip, -lr, rrx]
     8e0:	03660f03 	cmneq	r6, #3, 30
     8e4:	674c2073 	smlsldxvs	r2, ip, r3, r0
     8e8:	03660a03 	cmneq	r6, #12288	; 0x3000
     8ec:	674c207a 	smlsldxvs	r2, ip, sl, r0
     8f0:	080c0369 	stmdaeq	ip, {r0, r3, r5, r6, r8, r9}
     8f4:	0a035990 	beq	d6f3c <startup-0x1ff290c4>
     8f8:	5a5a3e66 	bpl	1690298 <startup-0x1e96fd68>
     8fc:	00bcad4c 	adcseq	sl, ip, ip, asr #26
     900:	06010402 	streq	r0, [r1], -r2, lsl #8
     904:	ad50064a 	ldclge	6, cr0, [r0, #-296]	; 0xfffffed8
     908:	bbccadc0 	bllt	ff32c010 <GPIO_Ports+0xdf328068>
     90c:	02040200 	andeq	r0, r4, #0, 4
     910:	00ba6203 	adcseq	r6, sl, r3, lsl #4
     914:	06010402 	streq	r0, [r1], -r2, lsl #8
     918:	2103063c 	tstcs	r3, ip, lsr r6
     91c:	3d4c523c 	sfmcc	f5, 2, [ip, #-240]	; 0xffffff10
     920:	3d3d3d3d 	ldccc	13, cr3, [sp, #-244]!	; 0xffffff0c
     924:	75741003 	ldrbvc	r1, [r4, #-3]!
     928:	4c3e5a42 			; <UNDEFINED> instruction: 0x4c3e5a42
     92c:	033d3e3e 	teqeq	sp, #992	; 0x3e0
     930:	50754a1c 	rsbspl	r4, r5, ip, lsl sl
     934:	3d4c5c68 	stclcc	12, cr5, [ip, #-416]	; 0xfffffe60
     938:	4e4a0a03 	vmlami.f32	s1, s20, s6
     93c:	4a0c033d 	bmi	301638 <startup-0x1fcfe9c8>
     940:	5c685075 	stclpl	0, cr5, [r8], #-468	; 0xfffffe2c
     944:	0a033d4c 	beq	cfe7c <startup-0x1ff30184>
     948:	033d4e4a 	teqeq	sp, #1184	; 0x4a0
     94c:	4b794a0f 	blmi	1e53190 <startup-0x1e1ace70>
     950:	794a0f03 	stmdbvc	sl, {r0, r1, r8, r9, sl, fp}^
     954:	4a10034b 	bmi	401688 <startup-0x1fbfe978>
     958:	1e504cc0 	cdpne	12, 5, cr4, cr0, cr0, {6}
     95c:	4a0b034c 	bmi	2c1694 <startup-0x1fd3e96c>
     960:	0b034b78 	bleq	d3748 <startup-0x1ff2c8b8>
     964:	0375784a 	cmneq	r5, #4849664	; 0x4a0000
     968:	bb4a00ce 	bllt	1280ca8 <startup-0x1ed7f358>
     96c:	089f352f 	ldmeq	pc, {r0, r1, r2, r3, r5, r8, sl, ip, sp}	; <UNPREDICTABLE>
     970:	029fbbc9 	addseq	fp, pc, #205824	; 0x32400
     974:	01010004 	tsteq	r1, r4
     978:	00000218 	andeq	r0, r0, r8, lsl r2
     97c:	01910002 	orrseq	r0, r1, r2
     980:	01020000 	mrseq	r0, (UNDEF: 2)
     984:	000d0efb 	strdeq	r0, [sp], -fp
     988:	01010101 	tsteq	r1, r1, lsl #2
     98c:	01000000 	mrseq	r0, (UNDEF: 0)
     990:	43010000 	movwmi	r0, #4096	; 0x1000
     994:	73552f3a 	cmpvc	r5, #58, 30	; 0xe8
     998:	2f737265 	svccs	0x00737265
     99c:	6b697245 	blvs	1a5d2b8 <startup-0x1e5a2d48>
     9a0:	636f442f 	cmnvs	pc, #788529152	; 0x2f000000
     9a4:	6e656d75 	mcrvs	13, 3, r6, cr5, cr5, {3}
     9a8:	442f7374 	strtmi	r7, [pc], #-884	; 9b0 <startup-0x1ffff650>
     9ac:	74617461 	strbtvc	r7, [r1], #-1121	; 0xfffffb9f
     9b0:	696e6b65 	stmdbvs	lr!, {r0, r2, r5, r6, r8, r9, fp, sp, lr}^
     9b4:	70746b73 	rsbsvc	r6, r4, r3, ror fp
     9b8:	656a6f72 	strbvs	r6, [sl, #-3954]!	; 0xfffff08e
     9bc:	6b2f746b 	blvs	bddb70 <startup-0x1f422490>
     9c0:	6c2f646f 	cfstrsvs	mvf6, [pc], #-444	; 80c <startup-0x1ffff7f4>
     9c4:	63006269 	movwvs	r6, #617	; 0x269
     9c8:	73635c3a 	cmnvc	r3, #14848	; 0x3a00
     9cc:	70706165 	rsbsvc	r6, r0, r5, ror #2
     9d0:	646f635c 	strbtvs	r6, [pc], #-860	; 9d8 <startup-0x1ffff628>
     9d4:	74696c65 	strbtvc	r6, [r9], #-3173	; 0xfffff39b
     9d8:	6f745c65 	svcvs	0x00745c65
     9dc:	5c736c6f 	ldclpl	12, cr6, [r3], #-444	; 0xfffffe44
     9e0:	2d636367 	stclcs	3, cr6, [r3, #-412]!	; 0xfffffe64
     9e4:	5c6d7261 	sfmpl	f7, 2, [sp], #-388	; 0xfffffe7c
     9e8:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
     9ec:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
     9f0:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
     9f4:	6e695c69 	cdpvs	12, 6, cr5, cr9, cr9, {3}
     9f8:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
     9fc:	616d5c65 	cmnvs	sp, r5, ror #24
     a00:	6e696863 	cdpvs	8, 6, cr6, cr9, cr3, {3}
     a04:	3a630065 	bcc	18c0ba0 <startup-0x1e73f460>
     a08:	6573635c 	ldrbvs	r6, [r3, #-860]!	; 0xfffffca4
     a0c:	5c707061 	ldclpl	0, cr7, [r0], #-388	; 0xfffffe7c
     a10:	65646f63 	strbvs	r6, [r4, #-3939]!	; 0xfffff09d
     a14:	6574696c 	ldrbvs	r6, [r4, #-2412]!	; 0xfffff694
     a18:	6f6f745c 	svcvs	0x006f745c
     a1c:	675c736c 	ldrbvs	r7, [ip, -ip, ror #6]
     a20:	612d6363 			; <UNDEFINED> instruction: 0x612d6363
     a24:	615c6d72 	cmpvs	ip, r2, ror sp
     a28:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
     a2c:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
     a30:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
     a34:	636e695c 	cmnvs	lr, #92, 18	; 0x170000
     a38:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
     a3c:	7379735c 	cmnvc	r9, #92, 6	; 0x70000001
     a40:	2f2e2e00 	svccs	0x002e2e00
     a44:	2f62696c 	svccs	0x0062696c
     a48:	334d5453 	movtcc	r5, #54355	; 0xd453
     a4c:	5f344632 	svcpl	0x00344632
     a50:	2f62696c 	svccs	0x0062696c
     a54:	49534d43 	ldmdbmi	r3, {r0, r1, r6, r8, sl, fp, lr}^
     a58:	6e692f53 	mcrvs	15, 3, r2, cr9, cr3, {2}
     a5c:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
     a60:	2e2e0065 	cdpcs	0, 2, cr0, cr14, cr5, {3}
     a64:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
     a68:	4d54532f 	ldclmi	3, cr5, [r4, #-188]	; 0xffffff44
     a6c:	34463233 	strbcc	r3, [r6], #-563	; 0xfffffdcd
     a70:	62696c5f 	rsbvs	r6, r9, #24320	; 0x5f00
     a74:	4d54532f 	ldclmi	3, cr5, [r4, #-188]	; 0xffffff44
     a78:	34463233 	strbcc	r3, [r6], #-563	; 0xfffffdcd
     a7c:	535f7878 	cmppl	pc, #120, 16	; 0x780000
     a80:	65506474 	ldrbvs	r6, [r0, #-1140]	; 0xfffffb8c
     a84:	68706972 	ldmdavs	r0!, {r1, r4, r5, r6, r8, fp, sp, lr}^
     a88:	6972445f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, sl, lr}^
     a8c:	2f726576 	svccs	0x00726576
     a90:	00636e69 	rsbeq	r6, r3, r9, ror #28
     a94:	6c2f2e2e 	stcvs	14, cr2, [pc], #-184	; 9e4 <startup-0x1ffff61c>
     a98:	00006269 	andeq	r6, r0, r9, ror #4
     a9c:	454e4143 	strbmi	r4, [lr, #-323]	; 0xfffffebd
     aa0:	646f636e 	strbtvs	r6, [pc], #-878	; aa8 <startup-0x1ffff558>
     aa4:	63654465 	cmnvs	r5, #1694498816	; 0x65000000
     aa8:	2e65646f 	cdpcs	4, 6, cr6, cr5, cr15, {3}
     aac:	00010063 	andeq	r0, r1, r3, rrx
     ab0:	65645f00 	strbvs	r5, [r4, #-3840]!	; 0xfffff100
     ab4:	6c756166 	ldfvse	f6, [r5], #-408	; 0xfffffe68
     ab8:	79745f74 	ldmdbvc	r4!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
     abc:	2e736570 	mrccs	5, 3, r6, cr3, cr0, {3}
     ac0:	00020068 	andeq	r0, r2, r8, rrx
     ac4:	74735f00 	ldrbtvc	r5, [r3], #-3840	; 0xfffff100
     ac8:	746e6964 	strbtvc	r6, [lr], #-2404	; 0xfffff69c
     acc:	0300682e 	movweq	r6, #2094	; 0x82e
     ad0:	6f630000 	svcvs	0x00630000
     ad4:	635f6572 	cmpvs	pc, #478150656	; 0x1c800000
     ad8:	682e346d 	stmdavs	lr!, {r0, r2, r3, r5, r6, sl, ip, sp}
     adc:	00000400 	andeq	r0, r0, r0, lsl #8
     ae0:	74737973 	ldrbtvc	r7, [r3], #-2419	; 0xfffff68d
     ae4:	735f6d65 	cmpvc	pc, #6464	; 0x1940
     ae8:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
     aec:	78783466 	ldmdavc	r8!, {r1, r2, r5, r6, sl, ip, sp}^
     af0:	0500682e 	streq	r6, [r0, #-2094]	; 0xfffff7d2
     af4:	74730000 	ldrbtvc	r0, [r3], #-0
     af8:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
     afc:	5f787834 	svcpl	0x00787834
     b00:	2e6e6163 	powcsez	f6, f6, f3
     b04:	00050068 	andeq	r0, r5, r8, rrx
     b08:	4e414300 	cdpmi	3, 4, cr4, cr1, cr0, {0}
     b0c:	0600682e 	streq	r6, [r0], -lr, lsr #16
     b10:	00000000 	andeq	r0, r0, r0
     b14:	1e7c0205 	cdpne	2, 7, cr0, cr12, cr5, {0}
     b18:	f31a2000 	vhadd.u16	d2, d10, d0
     b1c:	01040200 	mrseq	r0, R12_usr
     b20:	4b066606 	blmi	19a340 <startup-0x1fe65cc0>
     b24:	912f3f31 			; <UNDEFINED> instruction: 0x912f3f31
     b28:	3d3d5af3 	vldmdbcc	sp!, {s10-s252}
     b2c:	755c4b3f 	ldrbvc	r4, [ip, #-2879]	; 0xfffff4c1
     b30:	02006877 	andeq	r6, r0, #7798784	; 0x770000
     b34:	03210104 			; <UNDEFINED> instruction: 0x03210104
     b38:	2fad4a09 	svccs	0x00ad4a09
     b3c:	3d5a5991 	vldrcc.16	s11, [sl, #-290]	; 0xfffffede	; <UNPREDICTABLE>
     b40:	594b3f3d 	stmdbpl	fp, {r0, r2, r3, r4, r5, r8, r9, sl, fp, ip, sp}^
     b44:	4b4b5a59 	blmi	12d74b0 <startup-0x1ed28b50>
     b48:	7651215a 			; <UNDEFINED> instruction: 0x7651215a
     b4c:	59912f4b 	ldmibpl	r1, {r0, r1, r3, r6, r8, r9, sl, fp, sp}
     b50:	3f3d3d5a 	svccc	0x003d3d5a
     b54:	4d4b4b4b 	vstrmi	d20, [fp, #-300]	; 0xfffffed4
     b58:	0200304c 	andeq	r3, r0, #76	; 0x4c
     b5c:	4c210104 	stfmis	f0, [r1], #-16
     b60:	4b3f3e59 	blmi	fd04cc <startup-0x1f02fb34>
     b64:	672fbb5e 			; <UNDEFINED> instruction: 0x672fbb5e
     b68:	5a592108 	bpl	1648f90 <startup-0x1e9b7070>
     b6c:	4b3e3d3d 	blmi	f90068 <startup-0x1f06ff98>
     b70:	672ff37b 			; <UNDEFINED> instruction: 0x672ff37b
     b74:	5a592108 	bpl	1648f9c <startup-0x1e9b7064>
     b78:	4b3e3d3d 	blmi	f90074 <startup-0x1f06ff8c>
     b7c:	3e75764b 	cdpcc	6, 7, cr7, cr5, cr11, {2}
     b80:	3e3d3e2f 	cdpcc	14, 3, cr3, cr13, cr15, {1}
     b84:	4b4e213f 	blmi	1389088 <startup-0x1ec76f78>
     b88:	4e21f44b 	cdpmi	4, 2, cr15, cr1, cr11, {2}
     b8c:	023e4b4b 	eorseq	r4, lr, #76800	; 0x12c00
     b90:	01010004 	tsteq	r1, r4
     b94:	000001f3 	strdeq	r0, [r0], -r3
     b98:	01a60002 			; <UNDEFINED> instruction: 0x01a60002
     b9c:	01020000 	mrseq	r0, (UNDEF: 2)
     ba0:	000d0efb 	strdeq	r0, [sp], -fp
     ba4:	01010101 	tsteq	r1, r1, lsl #2
     ba8:	01000000 	mrseq	r0, (UNDEF: 0)
     bac:	43010000 	movwmi	r0, #4096	; 0x1000
     bb0:	73552f3a 	cmpvc	r5, #58, 30	; 0xe8
     bb4:	2f737265 	svccs	0x00737265
     bb8:	6b697245 	blvs	1a5d4d4 <startup-0x1e5a2b2c>
     bbc:	636f442f 	cmnvs	pc, #788529152	; 0x2f000000
     bc0:	6e656d75 	mcrvs	13, 3, r6, cr5, cr5, {3}
     bc4:	442f7374 	strtmi	r7, [pc], #-884	; bcc <startup-0x1ffff434>
     bc8:	74617461 	strbtvc	r7, [r1], #-1121	; 0xfffffb9f
     bcc:	696e6b65 	stmdbvs	lr!, {r0, r2, r5, r6, r8, r9, fp, sp, lr}^
     bd0:	70746b73 	rsbsvc	r6, r4, r3, ror fp
     bd4:	656a6f72 	strbvs	r6, [sl, #-3954]!	; 0xfffff08e
     bd8:	6b2f746b 	blvs	bddd8c <startup-0x1f422274>
     bdc:	6c2f646f 	cfstrsvs	mvf6, [pc], #-444	; a28 <startup-0x1ffff5d8>
     be0:	532f6269 			; <UNDEFINED> instruction: 0x532f6269
     be4:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
     be8:	6c5f3446 	cfldrdvs	mvd3, [pc], {70}	; 0x46
     bec:	532f6269 			; <UNDEFINED> instruction: 0x532f6269
     bf0:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
     bf4:	78783446 	ldmdavc	r8!, {r1, r2, r6, sl, ip, sp}^
     bf8:	6474535f 	ldrbtvs	r5, [r4], #-863	; 0xfffffca1
     bfc:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
     c00:	445f6870 	ldrbmi	r6, [pc], #-2160	; c08 <startup-0x1ffff3f8>
     c04:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
     c08:	72732f72 	rsbsvc	r2, r3, #456	; 0x1c8
     c0c:	3a630063 	bcc	18c0da0 <startup-0x1e73f260>
     c10:	6573635c 	ldrbvs	r6, [r3, #-860]!	; 0xfffffca4
     c14:	5c707061 	ldclpl	0, cr7, [r0], #-388	; 0xfffffe7c
     c18:	65646f63 	strbvs	r6, [r4, #-3939]!	; 0xfffff09d
     c1c:	6574696c 	ldrbvs	r6, [r4, #-2412]!	; 0xfffff694
     c20:	6f6f745c 	svcvs	0x006f745c
     c24:	675c736c 	ldrbvs	r7, [ip, -ip, ror #6]
     c28:	612d6363 			; <UNDEFINED> instruction: 0x612d6363
     c2c:	615c6d72 	cmpvs	ip, r2, ror sp
     c30:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
     c34:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
     c38:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
     c3c:	636e695c 	cmnvs	lr, #92, 18	; 0x170000
     c40:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
     c44:	63616d5c 	cmnvs	r1, #92, 26	; 0x1700
     c48:	656e6968 	strbvs	r6, [lr, #-2408]!	; 0xfffff698
     c4c:	5c3a6300 	ldcpl	3, cr6, [sl], #-0
     c50:	61657363 	cmnvs	r5, r3, ror #6
     c54:	635c7070 	cmpvs	ip, #112	; 0x70
     c58:	6c65646f 	cfstrdvs	mvd6, [r5], #-444	; 0xfffffe44
     c5c:	5c657469 	cfstrdpl	mvd7, [r5], #-420	; 0xfffffe5c
     c60:	6c6f6f74 	stclvs	15, cr6, [pc], #-464	; a98 <startup-0x1ffff568>
     c64:	63675c73 	cmnvs	r7, #29440	; 0x7300
     c68:	72612d63 	rsbvc	r2, r1, #6336	; 0x18c0
     c6c:	72615c6d 	rsbvc	r5, r1, #27904	; 0x6d00
     c70:	6f6e2d6d 	svcvs	0x006e2d6d
     c74:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
     c78:	5c696261 	sfmpl	f6, 2, [r9], #-388	; 0xfffffe7c
     c7c:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
     c80:	5c656475 	cfstrdpl	mvd6, [r5], #-468	; 0xfffffe2c
     c84:	00737973 	rsbseq	r7, r3, r3, ror r9
     c88:	6c2f2e2e 	stcvs	14, cr2, [pc], #-184	; bd8 <startup-0x1ffff428>
     c8c:	532f6269 			; <UNDEFINED> instruction: 0x532f6269
     c90:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
     c94:	6c5f3446 	cfldrdvs	mvd3, [pc], {70}	; 0x46
     c98:	432f6269 			; <UNDEFINED> instruction: 0x432f6269
     c9c:	5349534d 	movtpl	r5, #37709	; 0x934d
     ca0:	636e692f 	cmnvs	lr, #770048	; 0xbc000
     ca4:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
     ca8:	2f2e2e00 	svccs	0x002e2e00
     cac:	2f62696c 	svccs	0x0062696c
     cb0:	334d5453 	movtcc	r5, #54355	; 0xd453
     cb4:	5f344632 	svcpl	0x00344632
     cb8:	2f62696c 	svccs	0x0062696c
     cbc:	334d5453 	movtcc	r5, #54355	; 0xd453
     cc0:	78344632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, lr}
     cc4:	74535f78 	ldrbvc	r5, [r3], #-3960	; 0xfffff088
     cc8:	72655064 	rsbvc	r5, r5, #100	; 0x64
     ccc:	5f687069 	svcpl	0x00687069
     cd0:	76697244 	strbtvc	r7, [r9], -r4, asr #4
     cd4:	692f7265 	stmdbvs	pc!, {r0, r2, r5, r6, r9, ip, sp, lr}	; <UNPREDICTABLE>
     cd8:	0000636e 	andeq	r6, r0, lr, ror #6
     cdc:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
     ce0:	78346632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, sp, lr}
     ce4:	6e725f78 	mrcvs	15, 3, r5, cr2, cr8, {3}
     ce8:	00632e67 	rsbeq	r2, r3, r7, ror #28
     cec:	5f000001 	svcpl	0x00000001
     cf0:	61666564 	cmnvs	r6, r4, ror #10
     cf4:	5f746c75 	svcpl	0x00746c75
     cf8:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
     cfc:	00682e73 	rsbeq	r2, r8, r3, ror lr
     d00:	5f000002 	svcpl	0x00000002
     d04:	69647473 	stmdbvs	r4!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
     d08:	682e746e 	stmdavs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
     d0c:	00000300 	andeq	r0, r0, r0, lsl #6
     d10:	65726f63 	ldrbvs	r6, [r2, #-3939]!	; 0xfffff09d
     d14:	346d635f 	strbtcc	r6, [sp], #-863	; 0xfffffca1
     d18:	0400682e 	streq	r6, [r0], #-2094	; 0xfffff7d2
     d1c:	79730000 	ldmdbvc	r3!, {}^	; <UNPREDICTABLE>
     d20:	6d657473 	cfstrdvs	mvd7, [r5, #-460]!	; 0xfffffe34
     d24:	6d74735f 	ldclvs	3, cr7, [r4, #-380]!	; 0xfffffe84
     d28:	34663233 	strbtcc	r3, [r6], #-563	; 0xfffffdcd
     d2c:	682e7878 	stmdavs	lr!, {r3, r4, r5, r6, fp, ip, sp, lr}
     d30:	00000500 	andeq	r0, r0, r0, lsl #10
     d34:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
     d38:	78346632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, sp, lr}
     d3c:	00682e78 	rsbeq	r2, r8, r8, ror lr
     d40:	00000005 	andeq	r0, r0, r5
     d44:	50020500 	andpl	r0, r2, r0, lsl #10
     d48:	03200022 			; <UNDEFINED> instruction: 0x03200022
     d4c:	310100e3 	smlattcc	r1, r3, r0, r0
     d50:	4a09034d 	bmi	241a8c <startup-0x1fdbe574>
     d54:	6a3c0903 	bvs	f03168 <startup-0x1f0fce98>
     d58:	681e6d4d 	ldmdavs	lr, {r0, r2, r3, r6, r8, sl, fp, sp, lr}
     d5c:	30663003 	rsbcc	r3, r6, r3
     d60:	00d8032f 	sbcseq	r0, r8, pc, lsr #6
     d64:	6d4d6a66 	vstrvs	s13, [sp, #-408]	; 0xfffffe68
     d68:	0c03681e 	stceq	8, cr6, [r3], {30}
     d6c:	694f6774 	stmdbvs	pc, {r2, r4, r5, r6, r8, r9, sl, sp, lr}^	; <UNPREDICTABLE>
     d70:	033d4d5d 	teqeq	sp, #5952	; 0x1740
     d74:	676a660f 	strbvs	r6, [sl, -pc, lsl #12]!
     d78:	67660b03 	strbvs	r0, [r6, -r3, lsl #22]!
     d7c:	4d5d694f 	vldrmi.16	s13, [sp, #-158]	; 0xffffff62	; <UNPREDICTABLE>
     d80:	660c033d 			; <UNDEFINED> instruction: 0x660c033d
     d84:	0602676b 	streq	r6, [r2], -fp, ror #14
     d88:	ec010100 	stfs	f0, [r1], {-0}
     d8c:	02000001 	andeq	r0, r0, #1
     d90:	0001a700 	andeq	sl, r1, r0, lsl #14
     d94:	fb010200 	blx	4159e <startup-0x1ffbea62>
     d98:	01000d0e 	tsteq	r0, lr, lsl #26
     d9c:	00010101 	andeq	r0, r1, r1, lsl #2
     da0:	00010000 	andeq	r0, r1, r0
     da4:	3a430100 	bcc	10c11ac <startup-0x1ef3ee54>
     da8:	6573552f 	ldrbvs	r5, [r3, #-1327]!	; 0xfffffad1
     dac:	452f7372 	strmi	r7, [pc, #-882]!	; a42 <startup-0x1ffff5be>
     db0:	2f6b6972 	svccs	0x006b6972
     db4:	75636f44 	strbvc	r6, [r3, #-3908]!	; 0xfffff0bc
     db8:	746e656d 	strbtvc	r6, [lr], #-1389	; 0xfffffa93
     dbc:	61442f73 	hvcvs	17139	; 0x42f3
     dc0:	65746174 	ldrbvs	r6, [r4, #-372]!	; 0xfffffe8c
     dc4:	73696e6b 	cmnvc	r9, #1712	; 0x6b0
     dc8:	7270746b 	rsbsvc	r7, r0, #1795162112	; 0x6b000000
     dcc:	6b656a6f 	blvs	195b790 <startup-0x1e6a4870>
     dd0:	6f6b2f74 	svcvs	0x006b2f74
     dd4:	696c2f64 	stmdbvs	ip!, {r2, r5, r6, r8, r9, sl, fp, sp}^
     dd8:	54532f62 	ldrbpl	r2, [r3], #-3938	; 0xfffff09e
     ddc:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
     de0:	696c5f34 	stmdbvs	ip!, {r2, r4, r5, r8, r9, sl, fp, ip, lr}^
     de4:	54532f62 	ldrbpl	r2, [r3], #-3938	; 0xfffff09e
     de8:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
     dec:	5f787834 	svcpl	0x00787834
     df0:	50647453 	rsbpl	r7, r4, r3, asr r4
     df4:	70697265 	rsbvc	r7, r9, r5, ror #4
     df8:	72445f68 	subvc	r5, r4, #104, 30	; 0x1a0
     dfc:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
     e00:	6372732f 	cmnvs	r2, #-1140850688	; 0xbc000000
     e04:	5c3a6300 	ldcpl	3, cr6, [sl], #-0
     e08:	61657363 	cmnvs	r5, r3, ror #6
     e0c:	635c7070 	cmpvs	ip, #112	; 0x70
     e10:	6c65646f 	cfstrdvs	mvd6, [r5], #-444	; 0xfffffe44
     e14:	5c657469 	cfstrdpl	mvd7, [r5], #-420	; 0xfffffe5c
     e18:	6c6f6f74 	stclvs	15, cr6, [pc], #-464	; c50 <startup-0x1ffff3b0>
     e1c:	63675c73 	cmnvs	r7, #29440	; 0x7300
     e20:	72612d63 	rsbvc	r2, r1, #6336	; 0x18c0
     e24:	72615c6d 	rsbvc	r5, r1, #27904	; 0x6d00
     e28:	6f6e2d6d 	svcvs	0x006e2d6d
     e2c:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
     e30:	5c696261 	sfmpl	f6, 2, [r9], #-388	; 0xfffffe7c
     e34:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
     e38:	5c656475 	cfstrdpl	mvd6, [r5], #-468	; 0xfffffe2c
     e3c:	6863616d 	stmdavs	r3!, {r0, r2, r3, r5, r6, r8, sp, lr}^
     e40:	00656e69 	rsbeq	r6, r5, r9, ror #28
     e44:	635c3a63 	cmpvs	ip, #405504	; 0x63000
     e48:	70616573 	rsbvc	r6, r1, r3, ror r5
     e4c:	6f635c70 	svcvs	0x00635c70
     e50:	696c6564 	stmdbvs	ip!, {r2, r5, r6, r8, sl, sp, lr}^
     e54:	745c6574 	ldrbvc	r6, [ip], #-1396	; 0xfffffa8c
     e58:	736c6f6f 	cmnvc	ip, #444	; 0x1bc
     e5c:	6363675c 	cmnvs	r3, #92, 14	; 0x1700000
     e60:	6d72612d 	ldfvse	f6, [r2, #-180]!	; 0xffffff4c
     e64:	6d72615c 	ldfvse	f6, [r2, #-368]!	; 0xfffffe90
     e68:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
     e6c:	61652d65 	cmnvs	r5, r5, ror #26
     e70:	695c6962 	ldmdbvs	ip, {r1, r5, r6, r8, fp, sp, lr}^
     e74:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
     e78:	735c6564 	cmpvc	ip, #100, 10	; 0x19000000
     e7c:	2e007379 	mcrcs	3, 0, r7, cr0, cr9, {3}
     e80:	696c2f2e 	stmdbvs	ip!, {r1, r2, r3, r5, r8, r9, sl, fp, sp}^
     e84:	54532f62 	ldrbpl	r2, [r3], #-3938	; 0xfffff09e
     e88:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
     e8c:	696c5f34 	stmdbvs	ip!, {r2, r4, r5, r8, r9, sl, fp, ip, lr}^
     e90:	4d432f62 	stclmi	15, cr2, [r3, #-392]	; 0xfffffe78
     e94:	2f534953 	svccs	0x00534953
     e98:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
     e9c:	00656475 	rsbeq	r6, r5, r5, ror r4
     ea0:	6c2f2e2e 	stcvs	14, cr2, [pc], #-184	; df0 <startup-0x1ffff210>
     ea4:	532f6269 			; <UNDEFINED> instruction: 0x532f6269
     ea8:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
     eac:	6c5f3446 	cfldrdvs	mvd3, [pc], {70}	; 0x46
     eb0:	532f6269 			; <UNDEFINED> instruction: 0x532f6269
     eb4:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
     eb8:	78783446 	ldmdavc	r8!, {r1, r2, r6, sl, ip, sp}^
     ebc:	6474535f 	ldrbtvs	r5, [r4], #-863	; 0xfffffca1
     ec0:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
     ec4:	445f6870 	ldrbmi	r6, [pc], #-2160	; ecc <startup-0x1ffff134>
     ec8:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
     ecc:	6e692f72 	mcrvs	15, 3, r2, cr9, cr2, {3}
     ed0:	6d000063 	stcvs	0, cr0, [r0, #-396]	; 0xfffffe74
     ed4:	2e637369 	cdpcs	3, 6, cr7, cr3, cr9, {3}
     ed8:	00010063 	andeq	r0, r1, r3, rrx
     edc:	65645f00 	strbvs	r5, [r4, #-3840]!	; 0xfffff100
     ee0:	6c756166 	ldfvse	f6, [r5], #-408	; 0xfffffe68
     ee4:	79745f74 	ldmdbvc	r4!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
     ee8:	2e736570 	mrccs	5, 3, r6, cr3, cr0, {3}
     eec:	00020068 	andeq	r0, r2, r8, rrx
     ef0:	74735f00 	ldrbtvc	r5, [r3], #-3840	; 0xfffff100
     ef4:	746e6964 	strbtvc	r6, [lr], #-2404	; 0xfffff69c
     ef8:	0300682e 	movweq	r6, #2094	; 0x82e
     efc:	6f630000 	svcvs	0x00630000
     f00:	635f6572 	cmpvs	pc, #478150656	; 0x1c800000
     f04:	682e346d 	stmdavs	lr!, {r0, r2, r3, r5, r6, sl, ip, sp}
     f08:	00000400 	andeq	r0, r0, r0, lsl #8
     f0c:	74737973 	ldrbtvc	r7, [r3], #-2419	; 0xfffff68d
     f10:	735f6d65 	cmpvc	pc, #6464	; 0x1940
     f14:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
     f18:	78783466 	ldmdavc	r8!, {r1, r2, r5, r6, sl, ip, sp}^
     f1c:	0500682e 	streq	r6, [r0, #-2094]	; 0xfffff7d2
     f20:	74730000 	ldrbtvc	r0, [r3], #-0
     f24:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
     f28:	2e787834 	mrccs	8, 3, r7, cr8, cr4, {1}
     f2c:	00050068 	andeq	r0, r5, r8, rrx
     f30:	73696d00 	cmnvc	r9, #0, 26
     f34:	00682e63 	rsbeq	r2, r8, r3, ror #28
     f38:	00000005 	andeq	r0, r0, r5
     f3c:	c4020500 	strgt	r0, [r2], #-1280	; 0xfffffb00
     f40:	03200023 			; <UNDEFINED> instruction: 0x03200023
     f44:	4f0100f6 	svcmi	0x000100f6
     f48:	900c0359 	andls	r0, ip, r9, asr r3
     f4c:	9f4dc14b 	svcls	0x004dc14b
     f50:	ae919275 	mrcge	2, 4, r9, cr1, cr5, {3}
     f54:	6757b05a 			; <UNDEFINED> instruction: 0x6757b05a
     f58:	2e09032d 	cdpcs	3, 0, cr0, cr9, cr13, {1}
     f5c:	2d67571e 	stclcs	7, cr5, [r7, #-120]!	; 0xffffff88
     f60:	900c034d 	andls	r0, ip, sp, asr #6
     f64:	0d03835d 	stceq	3, cr8, [r3, #-372]	; 0xfffffe8c
     f68:	7a4c9590 	bvc	13265b0 <startup-0x1ecd9a50>
     f6c:	0b03841e 	bleq	e1fec <startup-0x1ff1e014>
     f70:	6c3e4d74 	ldcvs	13, cr4, [lr], #-464	; 0xfffffe30
     f74:	0602681e 			; <UNDEFINED> instruction: 0x0602681e
     f78:	c0010100 	andgt	r0, r1, r0, lsl #2
     f7c:	02000005 	andeq	r0, r0, #5
     f80:	00021c00 	andeq	r1, r2, r0, lsl #24
     f84:	fb010200 	blx	4178e <startup-0x1ffbe872>
     f88:	01000d0e 	tsteq	r0, lr, lsl #26
     f8c:	00010101 	andeq	r0, r1, r1, lsl #2
     f90:	00010000 	andeq	r0, r1, r0
     f94:	2e2e0100 	sufcse	f0, f6, f0
     f98:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
     f9c:	4d54532f 	ldclmi	3, cr5, [r4, #-188]	; 0xffffff44
     fa0:	34463233 	strbcc	r3, [r6], #-563	; 0xfffffdcd
     fa4:	62696c5f 	rsbvs	r6, r9, #24320	; 0x5f00
     fa8:	534d432f 	movtpl	r4, #54063	; 0xd32f
     fac:	692f5349 	stmdbvs	pc!, {r0, r3, r6, r8, r9, ip, lr}	; <UNPREDICTABLE>
     fb0:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
     fb4:	2e006564 	cfsh32cs	mvfx6, mvfx0, #52
     fb8:	696c2f2e 	stmdbvs	ip!, {r1, r2, r3, r5, r8, r9, sl, fp, sp}^
     fbc:	54532f62 	ldrbpl	r2, [r3], #-3938	; 0xfffff09e
     fc0:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
     fc4:	696c5f34 	stmdbvs	ip!, {r2, r4, r5, r8, r9, sl, fp, ip, lr}^
     fc8:	54532f62 	ldrbpl	r2, [r3], #-3938	; 0xfffff09e
     fcc:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
     fd0:	5f787834 	svcpl	0x00787834
     fd4:	50647453 	rsbpl	r7, r4, r3, asr r4
     fd8:	70697265 	rsbvc	r7, r9, r5, ror #4
     fdc:	72445f68 	subvc	r5, r4, #104, 30	; 0x1a0
     fe0:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
     fe4:	6372732f 	cmnvs	r2, #-1140850688	; 0xbc000000
     fe8:	2f3a4300 	svccs	0x003a4300
     fec:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
     ff0:	72452f73 	subvc	r2, r5, #460	; 0x1cc
     ff4:	442f6b69 	strtmi	r6, [pc], #-2921	; ffc <startup-0x1ffff004>
     ff8:	6d75636f 	ldclvs	3, cr6, [r5, #-444]!	; 0xfffffe44
     ffc:	73746e65 	cmnvc	r4, #1616	; 0x650
    1000:	7461442f 	strbtvc	r4, [r1], #-1071	; 0xfffffbd1
    1004:	6b657461 	blvs	195e190 <startup-0x1e6a1e70>
    1008:	6b73696e 	blvs	1cdb5c8 <startup-0x1e324a38>
    100c:	6f727074 	svcvs	0x00727074
    1010:	746b656a 	strbtvc	r6, [fp], #-1386	; 0xfffffa96
    1014:	646f6b2f 	strbtvs	r6, [pc], #-2863	; 101c <startup-0x1fffefe4>
    1018:	6f6f442f 	svcvs	0x006f442f
    101c:	2e2e0072 	mcrcs	0, 1, r0, cr14, cr2, {3}
    1020:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    1024:	4d54532f 	ldclmi	3, cr5, [r4, #-188]	; 0xffffff44
    1028:	34463233 	strbcc	r3, [r6], #-563	; 0xfffffdcd
    102c:	62696c5f 	rsbvs	r6, r9, #24320	; 0x5f00
    1030:	4d54532f 	ldclmi	3, cr5, [r4, #-188]	; 0xffffff44
    1034:	34463233 	strbcc	r3, [r6], #-563	; 0xfffffdcd
    1038:	535f7878 	cmppl	pc, #120, 16	; 0x780000
    103c:	65506474 	ldrbvs	r6, [r0, #-1140]	; 0xfffffb8c
    1040:	68706972 	ldmdavs	r0!, {r1, r4, r5, r6, r8, fp, sp, lr}^
    1044:	6972445f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, sl, lr}^
    1048:	2f726576 	svccs	0x00726576
    104c:	00636e69 	rsbeq	r6, r3, r9, ror #28
    1050:	635c3a63 	cmpvs	ip, #405504	; 0x63000
    1054:	70616573 	rsbvc	r6, r1, r3, ror r5
    1058:	6f635c70 	svcvs	0x00635c70
    105c:	696c6564 	stmdbvs	ip!, {r2, r5, r6, r8, sl, sp, lr}^
    1060:	745c6574 	ldrbvc	r6, [ip], #-1396	; 0xfffffa8c
    1064:	736c6f6f 	cmnvc	ip, #444	; 0x1bc
    1068:	6363675c 	cmnvs	r3, #92, 14	; 0x1700000
    106c:	6d72612d 	ldfvse	f6, [r2, #-180]!	; 0xffffff4c
    1070:	6d72615c 	ldfvse	f6, [r2, #-368]!	; 0xfffffe90
    1074:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    1078:	61652d65 	cmnvs	r5, r5, ror #26
    107c:	695c6962 	ldmdbvs	ip, {r1, r5, r6, r8, fp, sp, lr}^
    1080:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    1084:	6d5c6564 	cfldr64vs	mvdx6, [ip, #-400]	; 0xfffffe70
    1088:	69686361 	stmdbvs	r8!, {r0, r5, r6, r8, r9, sp, lr}^
    108c:	6300656e 	movwvs	r6, #1390	; 0x56e
    1090:	73635c3a 	cmnvc	r3, #14848	; 0x3a00
    1094:	70706165 	rsbsvc	r6, r0, r5, ror #2
    1098:	646f635c 	strbtvs	r6, [pc], #-860	; 10a0 <startup-0x1fffef60>
    109c:	74696c65 	strbtvc	r6, [r9], #-3173	; 0xfffff39b
    10a0:	6f745c65 	svcvs	0x00745c65
    10a4:	5c736c6f 	ldclpl	12, cr6, [r3], #-444	; 0xfffffe44
    10a8:	2d636367 	stclcs	3, cr6, [r3, #-412]!	; 0xfffffe64
    10ac:	5c6d7261 	sfmpl	f7, 2, [sp], #-388	; 0xfffffe7c
    10b0:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    10b4:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    10b8:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    10bc:	6e695c69 	cdpvs	12, 6, cr5, cr9, cr9, {3}
    10c0:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    10c4:	79735c65 	ldmdbvc	r3!, {r0, r2, r5, r6, sl, fp, ip, lr}^
    10c8:	2e2e0073 	mcrcs	0, 1, r0, cr14, cr3, {3}
    10cc:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    10d0:	6f630000 	svcvs	0x00630000
    10d4:	635f6572 	cmpvs	pc, #478150656	; 0x1c800000
    10d8:	682e346d 	stmdavs	lr!, {r0, r2, r3, r5, r6, sl, ip, sp}
    10dc:	00000100 	andeq	r0, r0, r0, lsl #2
    10e0:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
    10e4:	78346632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, sp, lr}
    10e8:	63725f78 	cmnvs	r2, #120, 30	; 0x1e0
    10ec:	00632e63 	rsbeq	r2, r3, r3, ror #28
    10f0:	69000002 	stmdbvs	r0, {r1}
    10f4:	2e74696e 	vsubcs.f16	s13, s8, s29	; <UNPREDICTABLE>
    10f8:	00030068 	andeq	r0, r3, r8, rrx
    10fc:	61747300 	cmnvs	r4, r0, lsl #6
    1100:	70757472 	rsbsvc	r7, r5, r2, ror r4
    1104:	0300632e 	movweq	r6, #814	; 0x32e
    1108:	74730000 	ldrbtvc	r0, [r3], #-0
    110c:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
    1110:	2e787834 	mrccs	8, 3, r7, cr8, cr4, {1}
    1114:	00040068 	andeq	r0, r4, r8, rrx
    1118:	65645f00 	strbvs	r5, [r4, #-3840]!	; 0xfffff100
    111c:	6c756166 	ldfvse	f6, [r5], #-408	; 0xfffffe68
    1120:	79745f74 	ldmdbvc	r4!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    1124:	2e736570 	mrccs	5, 3, r6, cr3, cr0, {3}
    1128:	00050068 	andeq	r0, r5, r8, rrx
    112c:	74735f00 	ldrbtvc	r5, [r3], #-3840	; 0xfffff100
    1130:	746e6964 	strbtvc	r6, [lr], #-2404	; 0xfffff69c
    1134:	0600682e 	streq	r6, [r0], -lr, lsr #16
    1138:	79730000 	ldmdbvc	r3!, {}^	; <UNPREDICTABLE>
    113c:	6d657473 	cfstrdvs	mvd7, [r5, #-460]!	; 0xfffffe34
    1140:	6d74735f 	ldclvs	3, cr7, [r4, #-380]!	; 0xfffffe84
    1144:	34663233 	strbtcc	r3, [r6], #-563	; 0xfffffdcd
    1148:	682e7878 	stmdavs	lr!, {r3, r4, r5, r6, fp, ip, sp, lr}
    114c:	00000400 	andeq	r0, r0, r0, lsl #8
    1150:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
    1154:	78346632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, sp, lr}
    1158:	63725f78 	cmnvs	r2, #120, 30	; 0x1e0
    115c:	00682e63 	rsbeq	r2, r8, r3, ror #28
    1160:	73000004 	movwvc	r0, #4
    1164:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
    1168:	78783466 	ldmdavc	r8!, {r1, r2, r5, r6, sl, ip, sp}^
    116c:	6970675f 	ldmdbvs	r0!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, sp, lr}^
    1170:	00682e6f 	rsbeq	r2, r8, pc, ror #28
    1174:	73000004 	movwvc	r0, #4
    1178:	74726174 	ldrbtvc	r6, [r2], #-372	; 0xfffffe8c
    117c:	682e7075 	stmdavs	lr!, {r0, r2, r4, r5, r6, ip, sp, lr}
    1180:	00000300 	andeq	r0, r0, r0, lsl #6
    1184:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
    1188:	78346632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, sp, lr}
    118c:	61635f78 	smcvs	13816	; 0x35f8
    1190:	00682e6e 	rsbeq	r2, r8, lr, ror #28
    1194:	63000004 	movwvs	r0, #4
    1198:	682e6e61 	stmdavs	lr!, {r0, r5, r6, r9, sl, fp, sp, lr}
    119c:	00000700 	andeq	r0, r0, r0, lsl #14
    11a0:	02050000 	andeq	r0, r5, #0
    11a4:	20002588 	andcs	r2, r0, r8, lsl #11
    11a8:	010cdd03 	tsteq	ip, r3, lsl #26
    11ac:	1ecd4b75 			; <UNDEFINED> instruction: 0x1ecd4b75
    11b0:	00fc03d8 	ldrsbteq	r0, [ip], #56	; 0x38
    11b4:	02004b90 	andeq	r4, r0, #144, 22	; 0x24000
    11b8:	58060104 	stmdapl	r6, {r2, r8}
    11bc:	674b3006 	strbvs	r3, [fp, -r6]
    11c0:	04213f3d 	strteq	r3, [r1], #-3901	; 0xfffff0c3
    11c4:	73f70302 	mvnsvc	r0, #134217728	; 0x8000000
    11c8:	3f693082 	svccc	0x00693082
    11cc:	4e4f4069 	cdpmi	0, 4, cr4, cr15, cr9, {3}
    11d0:	03503f69 	cmpeq	r0, #420	; 0x1a4
    11d4:	3f6be417 	svccc	0x006be417
    11d8:	740f034b 	strvc	r0, [pc], #-843	; 11e0 <startup-0x1fffee20>
    11dc:	003d2f3d 	eorseq	r2, sp, sp, lsr pc
    11e0:	40020402 	andmi	r0, r2, r2, lsl #8
    11e4:	02040200 	andeq	r0, r4, #0, 4
    11e8:	04020067 	streq	r0, [r2], #-103	; 0xffffff99
    11ec:	02003d02 	andeq	r3, r0, #2, 26	; 0x80
    11f0:	58060104 	stmdapl	r6, {r2, r8}
    11f4:	4e5a4c06 	cdpmi	12, 5, cr4, cr10, cr6, {0}
    11f8:	0b032f3e 	bleq	ccef8 <startup-0x1ff33108>
    11fc:	3f32674a 	svccc	0x0032674a
    1200:	033d694d 	teqeq	sp, #1261568	; 0x134000
    1204:	4b6a7415 	blmi	1a9e260 <startup-0x1e561da0>
    1208:	6c661403 	cfstrdvs	mvd1, [r6], #-12
    120c:	0b033f3f 	bleq	d0f10 <startup-0x1ff2f0f0>
    1210:	20790366 	rsbscs	r0, r9, r6, ror #6
    1214:	243d233d 	ldrtcs	r2, [sp], #-829	; 0xfffffcc3
    1218:	6a740f03 	bvs	1d04e2c <startup-0x1e2fb1d4>
    121c:	00de034b 	sbcseq	r0, lr, fp, asr #6
    1220:	2dbb7c66 	ldccs	12, cr7, [fp, #408]!	; 0x198
    1224:	660e033e 			; <UNDEFINED> instruction: 0x660e033e
    1228:	1a034b69 	bne	d3fd4 <startup-0x1ff2c02c>
    122c:	03835d66 	orreq	r5, r3, #6528	; 0x1980
    1230:	69740185 	ldmdbvs	r4!, {r0, r2, r7, r8}^
    1234:	00e9034b 	rsceq	r0, r9, fp, asr #6
    1238:	03ad6c66 			; <UNDEFINED> instruction: 0x03ad6c66
    123c:	4b69740d 	blmi	1a5e278 <startup-0x1e5a1d88>
    1240:	69660e03 	stmdbvs	r6!, {r0, r1, r9, sl, fp}^
    1244:	6615034b 	ldrvs	r0, [r5], -fp, asr #6
    1248:	4d3f3459 	cfldrsmi	mvf3, [pc, #-356]!	; 10ec <startup-0x1fffef14>
    124c:	18034169 	stmdane	r3, {r0, r3, r5, r6, r8, lr}
    1250:	3f345990 	svccc	0x00345990
    1254:	0341694d 	movteq	r6, #6477	; 0x194d
    1258:	4b7401b3 	blmi	1d0192c <startup-0x1e2fe6d4>
    125c:	4d4d3f33 	stclmi	15, cr3, [sp, #-204]	; 0xffffff34
    1260:	660d033d 			; <UNDEFINED> instruction: 0x660d033d
    1264:	1703672f 	strne	r6, [r3, -pc, lsr #14]
    1268:	3f334b66 	svccc	0x00334b66
    126c:	033d4d4d 	teqeq	sp, #4928	; 0x1340
    1270:	334b660f 	movtcc	r6, #46607	; 0xb60f
    1274:	3d4d4d3f 	stclcc	13, cr4, [sp, #-252]	; 0xffffff04
    1278:	4b820f03 	blmi	fe084e8c <GPIO_Ports+0xde080ee4>
    127c:	5b4d3f33 	blpl	1350f50 <startup-0x1ecaf0b0>
    1280:	9024033d 	eorls	r0, r4, sp, lsr r3
    1284:	775ac04b 	ldrbvc	ip, [sl, -fp, asr #32]
    1288:	263d223d 			; <UNDEFINED> instruction: 0x263d223d
    128c:	db3f5a67 	blle	fd7c30 <startup-0x1f0283d0>
    1290:	038383cb 	orreq	r8, r3, #738197507	; 0x2c000003
    1294:	253d201b 	ldrcs	r2, [sp, #-27]!	; 0xffffffe5
    1298:	69683d59 	stmdbvs	r8!, {r0, r3, r4, r6, r8, sl, fp, ip, sp}^
    129c:	69683d67 	stmdbvs	r8!, {r0, r1, r2, r5, r6, r8, sl, fp, ip, sp}^
    12a0:	67683d67 	strbvs	r3, [r8, -r7, ror #26]!
    12a4:	4bba3f03 	blmi	fee90eb8 <GPIO_Ports+0xdee8cf10>
    12a8:	4d3f8433 	cfldrsmi	mvf8, [pc, #-204]!	; 11e4 <startup-0x1fffee1c>
    12ac:	03834069 	orreq	r4, r3, #105	; 0x69
    12b0:	4b6a9e0a 	blmi	1aa8ae0 <startup-0x1e557520>
    12b4:	69660c03 	stmdbvs	r6!, {r0, r1, sl, fp}^
    12b8:	01b8034b 			; <UNDEFINED> instruction: 0x01b8034b
    12bc:	033d4e66 	teqeq	sp, #1632	; 0x660
    12c0:	334b7416 	movtcc	r7, #46102	; 0xb416
    12c4:	4b4d4d4d 	blmi	1354800 <startup-0x1ecab800>
    12c8:	4b821403 	blmi	fe0862dc <GPIO_Ports+0xde082334>
    12cc:	4d4d4d33 	stclmi	13, cr4, [sp, #-204]	; 0xffffff34
    12d0:	8211034b 	andshi	r0, r1, #738197505	; 0x2c000001
    12d4:	4d4d334b 	stclmi	3, cr3, [sp, #-300]	; 0xfffffed4
    12d8:	10034b5b 	andne	r4, r3, fp, asr fp
    12dc:	4d334b74 	vldmdbmi	r3!, {d4-<overflow reg d61>}
    12e0:	034b694d 	movteq	r6, #47437	; 0xb94d
    12e4:	4b8200d3 	blmi	fe081638 <GPIO_Ports+0xde07d690>
    12e8:	4d4d4d33 	stclmi	13, cr4, [sp, #-204]	; 0xffffff34
    12ec:	00f0034b 	rscseq	r0, r0, fp, asr #6
    12f0:	033d4e82 	teqeq	sp, #2080	; 0x820
    12f4:	4c797425 	cfldrdmi	mvd7, [r9], #-148	; 0xffffff6c
    12f8:	03761e6c 	cmneq	r6, #108, 28	; 0x6c0
    12fc:	4c797413 	cfldrdmi	mvd7, [r9], #-76	; 0xffffffb4
    1300:	03761e6c 	cmneq	r6, #108, 28	; 0x6c0
    1304:	4c797411 	cfldrdmi	mvd7, [r9], #-68	; 0xffffffbc
    1308:	03761e6c 	cmneq	r6, #108, 28	; 0x6c0
    130c:	4c79742c 	cfldrdmi	mvd7, [r9], #-176	; 0xffffff50
    1310:	03761e6c 	cmneq	r6, #108, 28	; 0x6c0
    1314:	4c797427 	cfldrdmi	mvd7, [r9], #-156	; 0xffffff64
    1318:	03761e6c 	cmneq	r6, #108, 28	; 0x6c0
    131c:	4c79741d 	cfldrdmi	mvd7, [r9], #-116	; 0xffffff8c
    1320:	03761e6c 	cmneq	r6, #108, 28	; 0x6c0
    1324:	4c797410 	cfldrdmi	mvd7, [r9], #-64	; 0xffffffc0
    1328:	03761e6c 	cmneq	r6, #108, 28	; 0x6c0
    132c:	4c79740e 	cfldrdmi	mvd7, [r9], #-56	; 0xffffffc8
    1330:	03761e6c 	cmneq	r6, #108, 28	; 0x6c0
    1334:	4c787429 	cfldrdmi	mvd7, [r8], #-164	; 0xffffff5c
    1338:	03761e6c 	cmneq	r6, #108, 28	; 0x6c0
    133c:	4c787423 	cfldrdmi	mvd7, [r8], #-140	; 0xffffff74
    1340:	03761e6c 	cmneq	r6, #108, 28	; 0x6c0
    1344:	4c787425 	cfldrdmi	mvd7, [r8], #-148	; 0xffffff6c
    1348:	03761e6c 	cmneq	r6, #108, 28	; 0x6c0
    134c:	4c787414 	cfldrdmi	mvd7, [r8], #-80	; 0xffffffb0
    1350:	03761e6c 	cmneq	r6, #108, 28	; 0x6c0
    1354:	4c787412 	cfldrdmi	mvd7, [r8], #-72	; 0xffffffb8
    1358:	03761e6c 	cmneq	r6, #108, 28	; 0x6c0
    135c:	4c78742d 	cfldrdmi	mvd7, [r8], #-180	; 0xffffff4c
    1360:	03761e6c 	cmneq	r6, #108, 28	; 0x6c0
    1364:	4c787428 	cfldrdmi	mvd7, [r8], #-160	; 0xffffff60
    1368:	03761e6c 	cmneq	r6, #108, 28	; 0x6c0
    136c:	4c6a740c 	cfstrdmi	mvd7, [sl], #-48	; 0xffffffd0
    1370:	03681e6c 	cmneq	r8, #108, 28	; 0x6c0
    1374:	947402ac 	ldrbtls	r0, [r4], #-684	; 0xfffffd54
    1378:	ae1e974d 	cdpge	7, 1, cr9, cr14, cr13, {2}
    137c:	67661703 	strbvs	r1, [r6, -r3, lsl #14]!
    1380:	59502f2f 	ldmdbpl	r0, {r0, r1, r2, r3, r5, r8, r9, sl, fp, sp}^
    1384:	4e3e4c3e 	mrcmi	12, 1, r4, cr14, cr14, {1}
    1388:	5c765940 			; <UNDEFINED> instruction: 0x5c765940
    138c:	0a033d4d 	beq	d08c8 <startup-0x1ff2f738>
    1390:	03753066 	cmneq	r5, #102	; 0x66
    1394:	50675811 	rsbpl	r5, r7, r1, lsl r8
    1398:	3d4d5c68 	stclcc	12, cr5, [sp, #-416]	; 0xfffffe60
    139c:	6c661103 	stfvse	f1, [r6], #-12
    13a0:	0303044b 	movweq	r0, #13387	; 0x344b
    13a4:	4066679d 	mlsmi	r6, sp, r7, r6
    13a8:	3d3d4b4b 	fldmdbxcc	sp!, {d4-d40}	;@ Deprecated
    13ac:	4b693d3d 	blmi	1a508a8 <startup-0x1e5af758>
    13b0:	693d3d3d 	ldmdbvs	sp!, {r0, r2, r3, r4, r5, r8, sl, fp, ip, sp}
    13b4:	3d3d4b4b 	fldmdbxcc	sp!, {d4-d40}	;@ Deprecated
    13b8:	4b693d3d 	blmi	1a508b4 <startup-0x1e5af74c>
    13bc:	693d3d3d 	ldmdbvs	sp!, {r0, r2, r3, r4, r5, r8, sl, fp, ip, sp}
    13c0:	3d3d4b4b 	fldmdbxcc	sp!, {d4-d40}	;@ Deprecated
    13c4:	4b693d3d 	blmi	1a508c0 <startup-0x1e5af740>
    13c8:	693d3d3d 	ldmdbvs	sp!, {r0, r2, r3, r4, r5, r8, sl, fp, ip, sp}
    13cc:	3d3d4b4b 	fldmdbxcc	sp!, {d4-d40}	;@ Deprecated
    13d0:	4b693d3d 	blmi	1a508cc <startup-0x1e5af734>
    13d4:	693d3d3d 	ldmdbvs	sp!, {r0, r2, r3, r4, r5, r8, sl, fp, ip, sp}
    13d8:	3d3d4b4b 	fldmdbxcc	sp!, {d4-d40}	;@ Deprecated
    13dc:	04673d3d 	strbteq	r3, [r7], #-3389	; 0xfffff2c3
    13e0:	08580304 	ldmdaeq	r8, {r2, r8, r9}^
    13e4:	5a592f2e 	bpl	164d0a4 <startup-0x1e9b2f5c>
    13e8:	3e683e3e 	mcrcc	14, 3, r3, cr8, cr14, {1}
    13ec:	594bad30 	stmdbpl	fp, {r4, r5, r8, sl, fp, sp, pc}^
    13f0:	01040200 	mrseq	r0, R12_usr
    13f4:	59062006 	stmdbpl	r6, {r1, r2, sp}
    13f8:	3d4b2f76 	stclcc	15, cr2, [fp, #-472]	; 0xfffffe28
    13fc:	2f2f3d42 	svccs	0x002f3d42
    1400:	02002f2f 	andeq	r2, r0, #47, 30	; 0xbc
    1404:	20060104 	andcs	r0, r6, r4, lsl #2
    1408:	3e2f5d06 	cdpcc	13, 2, cr5, cr15, cr6, {0}
    140c:	0200c93e 	andeq	ip, r0, #1015808	; 0xf8000
    1410:	00390204 	eorseq	r0, r9, r4, lsl #4
    1414:	06010402 	streq	r0, [r1], -r2, lsl #8
    1418:	0402003c 	streq	r0, [r2], #-60	; 0xffffffc4
    141c:	003a0602 	eorseq	r0, sl, r2, lsl #12
    1420:	06010402 	streq	r0, [r1], -r2, lsl #8
    1424:	0903063c 	stmdbeq	r3, {r2, r3, r4, r5, r9, sl}
    1428:	132f023c 			; <UNDEFINED> instruction: 0x132f023c
    142c:	c93e3e2f 	ldmdbgt	lr!, {r0, r1, r2, r3, r5, r9, sl, fp, ip, sp}
    1430:	7575bbad 	ldrbvc	fp, [r5, #-2989]!	; 0xfffff453
    1434:	0200a075 	andeq	sl, r0, #117	; 0x75
    1438:	76030204 	strvc	r0, [r3], -r4, lsl #4
    143c:	0402003c 	streq	r0, [r2], #-60	; 0xffffffc4
    1440:	003c0601 	eorseq	r0, ip, r1, lsl #12
    1444:	06020402 	streq	r0, [r2], -r2, lsl #8
    1448:	0402003a 	streq	r0, [r2], #-58	; 0xffffffc6
    144c:	063c0601 	ldrteq	r0, [ip], -r1, lsl #12
    1450:	683c1003 	ldmdavs	ip!, {r0, r1, ip}
    1454:	03040200 	movweq	r0, #16896	; 0x4200
    1458:	0402003e 	streq	r0, [r2], #-62	; 0xffffffc2
    145c:	0200f303 	andeq	pc, r0, #201326592	; 0xc000000
    1460:	00390304 	eorseq	r0, r9, r4, lsl #6
    1464:	06010402 	streq	r0, [r1], -r2, lsl #8
    1468:	006c063c 	rsbeq	r0, ip, ip, lsr r6
    146c:	5a030402 	bpl	c247c <startup-0x1ff3db84>
    1470:	03040200 	movweq	r0, #16896	; 0x4200
    1474:	040200f3 	streq	r0, [r2], #-243	; 0xffffff0d
    1478:	02003903 	andeq	r3, r0, #49152	; 0xc000
    147c:	3c060104 	stfccs	f0, [r6], {4}
    1480:	003d4106 	eorseq	r4, sp, r6, lsl #2
    1484:	3e030402 	cdpcc	4, 0, cr0, cr3, cr2, {0}
    1488:	03040200 	movweq	r0, #16896	; 0x4200
    148c:	040200f0 	streq	r0, [r2], #-240	; 0xffffff10
    1490:	063c0601 	ldrteq	r0, [ip], -r1, lsl #12
    1494:	02004b6a 	andeq	r4, r0, #108544	; 0x1a800
    1498:	003e0304 	eorseq	r0, lr, r4, lsl #6
    149c:	f0030402 			; <UNDEFINED> instruction: 0xf0030402
    14a0:	01040200 	mrseq	r0, R12_usr
    14a4:	6c063c06 	stcvs	12, cr3, [r6], {6}
    14a8:	08a03f5c 	stmiaeq	r0!, {r2, r3, r4, r6, r8, r9, sl, fp, ip, sp}
    14ac:	9284e921 	addls	lr, r4, #540672	; 0x84000
    14b0:	02003ed8 	andeq	r3, r0, #216, 28	; 0xd80
    14b4:	90060104 	andls	r0, r6, r4, lsl #2
    14b8:	025a0806 	subseq	r0, sl, #393216	; 0x60000
    14bc:	00f41622 	rscseq	r1, r4, r2, lsr #12
    14c0:	06010402 	streq	r0, [r1], -r2, lsl #8
    14c4:	04020090 	streq	r0, [r2], #-144	; 0xffffff70
    14c8:	06580802 	ldrbeq	r0, [r8], -r2, lsl #16
    14cc:	0200d792 	andeq	sp, r0, #38273024	; 0x2480000
    14d0:	73030204 	movwvc	r0, #12804	; 0x3204
    14d4:	02009008 	andeq	r9, r0, #8
    14d8:	3c060104 	stfccs	f0, [r6], {4}
    14dc:	02040200 	andeq	r0, r4, #0, 4
    14e0:	746f0306 	strbtvc	r0, [pc], #-774	; 14e8 <startup-0x1fffeb18>
    14e4:	01040200 	mrseq	r0, R12_usr
    14e8:	06743c06 	ldrbteq	r3, [r4], -r6, lsl #24
    14ec:	4b662703 	blmi	198b100 <startup-0x1e674f00>
    14f0:	3f5959f3 	svccc	0x005959f3
    14f4:	312f4b92 			; <UNDEFINED> instruction: 0x312f4b92
    14f8:	67596731 	smmlarvs	r9, r1, r7, r6
    14fc:	67af5975 			; <UNDEFINED> instruction: 0x67af5975
    1500:	59598359 	ldmdbpl	r9, {r0, r3, r4, r6, r8, r9, pc}^
    1504:	67864ba0 	strvs	r4, [r6, r0, lsr #23]
    1508:	01040200 	mrseq	r0, R12_usr
    150c:	04020067 	streq	r0, [r2], #-103	; 0xffffff99
    1510:	49224901 	stmdbmi	r2!, {r0, r8, fp, lr}
    1514:	22bb5b22 	adcscs	r5, fp, #34816	; 0x8800
    1518:	02005559 	andeq	r5, r0, #373293056	; 0x16400000
    151c:	58060104 	stmdapl	r6, {r2, r8}
    1520:	9ff45006 	svcls	0x00f45006
    1524:	024baf08 	subeq	sl, fp, #8, 30
    1528:	01010007 	tsteq	r1, r7
    152c:	05000404 	streq	r0, [r0, #-1028]	; 0xfffffbfc
    1530:	00000002 	andeq	r0, r0, r2
    1534:	010f0320 	tsteq	pc, r0, lsr #6
    1538:	03025e13 	movweq	r5, #11795	; 0x2e13
    153c:	40010100 	andmi	r0, r1, r0, lsl #2
    1540:	02000001 	andeq	r0, r0, #1
    1544:	0000fa00 	andeq	pc, r0, r0, lsl #20
    1548:	fb010200 	blx	41d52 <startup-0x1ffbe2ae>
    154c:	01000d0e 	tsteq	r0, lr, lsl #26
    1550:	00010101 	andeq	r0, r1, r1, lsl #2
    1554:	00010000 	andeq	r0, r1, r0
    1558:	3a430100 	bcc	10c1960 <startup-0x1ef3e6a0>
    155c:	6573552f 	ldrbvs	r5, [r3, #-1327]!	; 0xfffffad1
    1560:	452f7372 	strmi	r7, [pc, #-882]!	; 11f6 <startup-0x1fffee0a>
    1564:	2f6b6972 	svccs	0x006b6972
    1568:	75636f44 	strbvc	r6, [r3, #-3908]!	; 0xfffff0bc
    156c:	746e656d 	strbtvc	r6, [lr], #-1389	; 0xfffffa93
    1570:	61442f73 	hvcvs	17139	; 0x42f3
    1574:	65746174 	ldrbvs	r6, [r4, #-372]!	; 0xfffffe8c
    1578:	73696e6b 	cmnvc	r9, #1712	; 0x6b0
    157c:	7270746b 	rsbsvc	r7, r0, #1795162112	; 0x6b000000
    1580:	6b656a6f 	blvs	195bf44 <startup-0x1e6a40bc>
    1584:	6f6b2f74 	svcvs	0x006b2f74
    1588:	696c2f64 	stmdbvs	ip!, {r2, r5, r6, r8, r9, sl, fp, sp}^
    158c:	3a630062 	bcc	18c171c <startup-0x1e73e8e4>
    1590:	6573635c 	ldrbvs	r6, [r3, #-860]!	; 0xfffffca4
    1594:	5c707061 	ldclpl	0, cr7, [r0], #-388	; 0xfffffe7c
    1598:	65646f63 	strbvs	r6, [r4, #-3939]!	; 0xfffff09d
    159c:	6574696c 	ldrbvs	r6, [r4, #-2412]!	; 0xfffff694
    15a0:	6f6f745c 	svcvs	0x006f745c
    15a4:	675c736c 	ldrbvs	r7, [ip, -ip, ror #6]
    15a8:	612d6363 			; <UNDEFINED> instruction: 0x612d6363
    15ac:	615c6d72 	cmpvs	ip, r2, ror sp
    15b0:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    15b4:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    15b8:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    15bc:	636e695c 	cmnvs	lr, #92, 18	; 0x170000
    15c0:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    15c4:	63616d5c 	cmnvs	r1, #92, 26	; 0x1700
    15c8:	656e6968 	strbvs	r6, [lr, #-2408]!	; 0xfffff698
    15cc:	5c3a6300 	ldcpl	3, cr6, [sl], #-0
    15d0:	61657363 	cmnvs	r5, r3, ror #6
    15d4:	635c7070 	cmpvs	ip, #112	; 0x70
    15d8:	6c65646f 	cfstrdvs	mvd6, [r5], #-444	; 0xfffffe44
    15dc:	5c657469 	cfstrdpl	mvd7, [r5], #-420	; 0xfffffe5c
    15e0:	6c6f6f74 	stclvs	15, cr6, [pc], #-464	; 1418 <startup-0x1fffebe8>
    15e4:	63675c73 	cmnvs	r7, #29440	; 0x7300
    15e8:	72612d63 	rsbvc	r2, r1, #6336	; 0x18c0
    15ec:	72615c6d 	rsbvc	r5, r1, #27904	; 0x6d00
    15f0:	6f6e2d6d 	svcvs	0x006e2d6d
    15f4:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    15f8:	5c696261 	sfmpl	f6, 2, [r9], #-388	; 0xfffffe7c
    15fc:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    1600:	5c656475 	cfstrdpl	mvd6, [r5], #-468	; 0xfffffe2c
    1604:	00737973 	rsbseq	r7, r3, r3, ror r9
    1608:	66756200 	ldrbtvs	r6, [r5], -r0, lsl #4
    160c:	2e726566 	cdpcs	5, 7, cr6, cr2, cr6, {3}
    1610:	00010063 	andeq	r0, r1, r3, rrx
    1614:	65645f00 	strbvs	r5, [r4, #-3840]!	; 0xfffff100
    1618:	6c756166 	ldfvse	f6, [r5], #-408	; 0xfffffe68
    161c:	79745f74 	ldmdbvc	r4!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    1620:	2e736570 	mrccs	5, 3, r6, cr3, cr0, {3}
    1624:	00020068 	andeq	r0, r2, r8, rrx
    1628:	74735f00 	ldrbtvc	r5, [r3], #-3840	; 0xfffff100
    162c:	746e6964 	strbtvc	r6, [lr], #-2404	; 0xfffff69c
    1630:	0300682e 	movweq	r6, #2094	; 0x82e
    1634:	75620000 	strbvc	r0, [r2, #-0]!
    1638:	72656666 	rsbvc	r6, r5, #106954752	; 0x6600000
    163c:	0100682e 	tsteq	r0, lr, lsr #16
    1640:	00000000 	andeq	r0, r0, r0
    1644:	3c340205 	lfmcc	f0, 4, [r4], #-20	; 0xffffffec
    1648:	4b152000 	blmi	549650 <startup-0x1fab69b0>
    164c:	4e4b4b4b 	vmlsmi.f64	d20, d11, d11
    1650:	c9325976 	ldmdbgt	r2!, {r1, r2, r4, r5, r6, r8, fp, ip, lr}
    1654:	214c5985 	smlalbbcs	r5, ip, r5, r9
    1658:	02007a4e 	andeq	r7, r0, #319488	; 0x4e000
    165c:	58060104 	stmdapl	r6, {r2, r8}
    1660:	02040200 	andeq	r0, r4, #0, 4
    1664:	04020066 	streq	r0, [r2], #-102	; 0xffffff9a
    1668:	02002004 	andeq	r2, r0, #4
    166c:	3f060404 	svccc	0x00060404
    1670:	04040200 	streq	r0, [r4], #-512	; 0xfffffe00
    1674:	595a4e67 	ldmdbpl	sl, {r0, r1, r2, r5, r6, r9, sl, fp, lr}^
    1678:	5985c932 	stmibpl	r5, {r1, r4, r5, r8, fp, lr, pc}
    167c:	0402214c 	streq	r2, [r2], #-332	; 0xfffffeb4
    1680:	Address 0x00001680 is out of bounds.


Disassembly of section .debug_str:

00000000 <.debug_str>:
       0:	52455352 	subpl	r5, r5, #1207959553	; 0x48000001
       4:	31444556 	cmpcc	r4, r6, asr r5
       8:	43545200 	cmpmi	r4, #0, 4
       c:	554b575f 	strbpl	r5, [fp, #-1887]	; 0xfffff8a1
      10:	52495f50 	subpl	r5, r9, #80, 30	; 0x140
      14:	45006e51 	strmi	r6, [r0, #-3665]	; 0xfffff1af
      18:	32495458 	subcc	r5, r9, #88, 8	; 0x58000000
      1c:	5152495f 	cmppl	r2, pc, asr r9
      20:	4d44006e 	stclmi	0, cr0, [r4, #-440]	; 0xfffffe48
      24:	535f3141 	cmppl	pc, #1073741840	; 0x40000010
      28:	61657274 	smcvs	22308	; 0x5724
      2c:	495f366d 	ldmdbmi	pc, {r0, r2, r3, r5, r6, r9, sl, ip, sp}^	; <UNPREDICTABLE>
      30:	006e5152 	rsbeq	r5, lr, r2, asr r1
      34:	384d4954 	stmdacc	sp, {r2, r4, r6, r8, fp, lr}^
      38:	5f50555f 	svcpl	0x0050555f
      3c:	314d4954 	cmpcc	sp, r4, asr r9
      40:	52495f33 	subpl	r5, r9, #51, 30	; 0xcc
      44:	53006e51 	movwpl	r6, #3665	; 0xe51
      48:	69737365 	ldmdbvs	r3!, {r0, r2, r5, r6, r8, r9, ip, sp, lr}^
      4c:	44496e6f 	strbmi	r6, [r9], #-3695	; 0xfffff191
      50:	6e616300 	cdpvs	3, 6, cr6, cr1, cr0, {0}
      54:	696e695f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, sp, lr}^
      58:	656e0074 	strbvs	r0, [lr, #-116]!	; 0xffffff8c
      5c:	6e614877 	mcrvs	8, 3, r4, cr1, cr7, {3}
      60:	72656c64 	rsbvc	r6, r5, #100, 24	; 0x6400
      64:	4e414300 	cdpmi	3, 4, cr4, cr1, cr0, {0}
      68:	696e495f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, lr}^
      6c:	70795474 	rsbsvc	r5, r9, r4, ror r4
      70:	66654465 	strbtvs	r4, [r5], -r5, ror #8
      74:	4e414300 	cdpmi	3, 4, cr4, cr1, cr0, {0}
      78:	6c69465f 	stclvs	6, cr4, [r9], #-380	; 0xfffffe84
      7c:	49726574 	ldmdbmi	r2!, {r2, r4, r5, r6, r8, sl, sp, lr}^
      80:	776f4c64 	strbvc	r4, [pc, -r4, ror #24]!
      84:	36317500 	ldrtcc	r7, [r1], -r0, lsl #10
      88:	73746962 	cmnvc	r4, #1605632	; 0x188000
      8c:	6e755f00 	cdpvs	15, 7, cr5, cr5, cr0, {0}
      90:	64657375 	strbtvs	r7, [r5], #-885	; 0xfffffc8b
      94:	414d4400 	cmpmi	sp, r0, lsl #8
      98:	74535f32 	ldrbvc	r5, [r3], #-3890	; 0xfffff0ce
      9c:	6d616572 	cfstr64vs	mvdx6, [r1, #-456]!	; 0xfffffe38
      a0:	52495f31 	subpl	r5, r9, #49, 30	; 0xc4
      a4:	47006e51 	smlsdmi	r0, r1, lr, r6
      a8:	5f4f4950 	svcpl	0x004f4950
      ac:	64507550 	ldrbvs	r7, [r0], #-1360	; 0xfffffab0
      b0:	504f4e5f 	subpl	r4, pc, pc, asr lr	; <UNPREDICTABLE>
      b4:	004c4c55 	subeq	r4, ip, r5, asr ip
      b8:	524f5456 	subpl	r5, pc, #1442840576	; 0x56000000
      bc:	49505300 	ldmdbmi	r0, {r8, r9, ip, lr}^
      c0:	52495f33 	subpl	r5, r9, #51, 30	; 0xcc
      c4:	46006e51 			; <UNDEFINED> instruction: 0x46006e51
      c8:	4853414c 	ldmdami	r3, {r2, r3, r6, r8, lr}^
      cc:	5152495f 	cmppl	r2, pc, asr r9
      d0:	4143006e 	cmpmi	r3, lr, rrx
      d4:	7369644e 	cmnvc	r9, #1308622848	; 0x4e000000
      d8:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
      dc:	746c6946 	strbtvc	r6, [ip], #-2374	; 0xfffff6ba
      e0:	61487265 	cmpvs	r8, r5, ror #4
      e4:	656c646e 	strbvs	r6, [ip, #-1134]!	; 0xfffffb92
      e8:	43440072 	movtmi	r0, #16498	; 0x4072
      ec:	495f494d 	ldmdbmi	pc, {r0, r2, r3, r6, r8, fp, lr}^	; <UNPREDICTABLE>
      f0:	006e5152 	rsbeq	r5, lr, r2, asr r1
      f4:	74617473 	strbtvc	r7, [r1], #-1139	; 0xfffffb8d
      f8:	41430065 	cmpmi	r3, r5, rrx
      fc:	54545f4e 	ldrbpl	r5, [r4], #-3918	; 0xfffff0b2
     100:	43004d43 	movwmi	r4, #3395	; 0xd43
     104:	4d5f4e41 	ldclmi	14, cr4, [pc, #-260]	; 8 <startup-0x1ffffff8>
     108:	0065646f 	rsbeq	r6, r5, pc, ror #8
     10c:	4f495047 	svcmi	0x00495047
     110:	7079544f 	rsbsvc	r5, r9, pc, asr #8
     114:	79545f65 	ldmdbvc	r4, {r0, r2, r5, r6, r8, r9, sl, fp, ip, lr}^
     118:	65446570 	strbvs	r6, [r4, #-1392]	; 0xfffffa90
     11c:	49540066 	ldmdbmi	r4, {r1, r2, r5, r6}^
     120:	495f324d 	ldmdbmi	pc, {r0, r2, r3, r6, r9, ip, sp}^	; <UNPREDICTABLE>
     124:	006e5152 	rsbeq	r5, lr, r2, asr r1
     128:	65436f74 	strbvs	r6, [r3, #-3956]	; 0xfffff08c
     12c:	6172746e 	cmnvs	r2, lr, ror #8
     130:	4349006c 	movtmi	r0, #36972	; 0x906c
     134:	73005250 	movwvc	r5, #592	; 0x250
     138:	69737365 	ldmdbvs	r3!, {r0, r2, r5, r6, r8, r9, ip, sp, lr}^
     13c:	44496e6f 	strbmi	r6, [r9], #-3695	; 0xfffff191
     140:	49564e00 	ldmdbmi	r6, {r9, sl, fp, lr}^
     144:	6e495f43 	cdpvs	15, 4, cr5, cr9, cr3, {2}
     148:	74537469 	ldrbvc	r7, [r3], #-1129	; 0xfffffb97
     14c:	74637572 	strbtvc	r7, [r3], #-1394	; 0xfffffa8e
     150:	00657275 	rsbeq	r7, r5, r5, ror r2
     154:	324e4143 	subcc	r4, lr, #-1073741808	; 0xc0000010
     158:	3058525f 	subscc	r5, r8, pc, asr r2
     15c:	5152495f 	cmppl	r2, pc, asr r9
     160:	5355006e 	cmppl	r5, #110	; 0x6e
     164:	36545241 	ldrbcc	r5, [r4], -r1, asr #4
     168:	5152495f 	cmppl	r2, pc, asr r9
     16c:	4143006e 	cmpmi	r3, lr, rrx
     170:	69465f4e 	stmdbvs	r6, {r1, r2, r3, r6, r8, r9, sl, fp, ip, lr}^
     174:	7265746c 	rsbvc	r7, r5, #108, 8	; 0x6c000000
     178:	6c616353 	stclvs	3, cr6, [r1], #-332	; 0xfffffeb4
     17c:	5f5f0065 	svcpl	0x005f0065
     180:	746e6975 	strbtvc	r6, [lr], #-2421	; 0xfffff68b
     184:	00745f38 	rsbseq	r5, r4, r8, lsr pc
     188:	32495053 	subcc	r5, r9, #83	; 0x53
     18c:	5152495f 	cmppl	r2, pc, asr r9
     190:	4954006e 	ldmdbmi	r4, {r1, r2, r3, r5, r6}^
     194:	425f384d 	subsmi	r3, pc, #5046272	; 0x4d0000
     198:	545f4b52 	ldrbpl	r4, [pc], #-2898	; 1a0 <startup-0x1ffffe60>
     19c:	32314d49 	eorscc	r4, r1, #4672	; 0x1240
     1a0:	5152495f 	cmppl	r2, pc, asr r9
     1a4:	5047006e 	subpl	r0, r7, lr, rrx
     1a8:	505f4f49 	subspl	r4, pc, r9, asr #30
     1ac:	5f645075 	svcpl	0x00645075
     1b0:	4e574f44 	cdpmi	15, 5, cr4, cr7, cr4, {2}
     1b4:	6e616300 	cdpvs	3, 6, cr6, cr1, cr0, {0}
     1b8:	7172695f 	cmnvc	r2, pc, asr r9
     1bc:	6e61685f 	mcrvs	8, 3, r6, cr1, cr15, {2}
     1c0:	72656c64 	rsbvc	r6, r5, #100, 24	; 0x6400
     1c4:	49564e00 	ldmdbmi	r6, {r9, sl, fp, lr}^
     1c8:	52495f43 	subpl	r5, r9, #268	; 0x10c
     1cc:	61684351 	cmnvs	r8, r1, asr r3
     1d0:	6c656e6e 	stclvs	14, cr6, [r5], #-440	; 0xfffffe48
     1d4:	00646d43 	rsbeq	r6, r4, r3, asr #26
     1d8:	43524941 	cmpmi	r2, #1064960	; 0x104000
     1dc:	6f6e0052 	svcvs	0x006e0052
     1e0:	73736553 	cmnvc	r3, #348127232	; 0x14c00000
     1e4:	496e6f69 	stmdbmi	lr!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
     1e8:	50430064 	subpl	r0, r3, r4, rrx
     1ec:	00444955 	subeq	r4, r4, r5, asr r9
     1f0:	32414d44 	subcc	r4, r1, #68, 26	; 0x1100
     1f4:	7274535f 	rsbsvc	r5, r4, #2080374785	; 0x7c000001
     1f8:	356d6165 	strbcc	r6, [sp, #-357]!	; 0xfffffe9b
     1fc:	5152495f 	cmppl	r2, pc, asr r9
     200:	5047006e 	subpl	r0, r7, lr, rrx
     204:	4d5f4f49 	ldclmi	15, cr4, [pc, #-292]	; e8 <startup-0x1fffff18>
     208:	5f65646f 	svcpl	0x0065646f
     20c:	54004641 	strpl	r4, [r0], #-1601	; 0xfffff9bf
     210:	5f314d49 	svcpl	0x00314d49
     214:	5f475254 	svcpl	0x00475254
     218:	5f4d4f43 	svcpl	0x004d4f43
     21c:	314d4954 	cmpcc	sp, r4, asr r9
     220:	52495f31 	subpl	r5, r9, #49, 30	; 0xc4
     224:	47006e51 	smlsdmi	r0, r1, lr, r6
     228:	5f4f4950 	svcpl	0x004f4950
     22c:	65646f4d 	strbvs	r6, [r4, #-3917]!	; 0xfffff0b3
     230:	004e415f 	subeq	r4, lr, pc, asr r1
     234:	734e4143 	movtvc	r4, #57667	; 0xe143
     238:	4d646e65 	stclmi	14, cr6, [r4, #-404]!	; 0xfffffe6c
     23c:	61737365 	cmnvs	r3, r5, ror #6
     240:	72006567 	andvc	r6, r0, #432013312	; 0x19c00000
     244:	67734d78 			; <UNDEFINED> instruction: 0x67734d78
     248:	73795300 	cmnvc	r9, #0, 6
     24c:	6b636954 	blvs	18da7a4 <startup-0x1e72585c>
     250:	5152495f 	cmppl	r2, pc, asr r9
     254:	5355006e 	cmppl	r5, #110	; 0x6e
     258:	33545241 	cmpcc	r4, #268435460	; 0x10000004
     25c:	5152495f 	cmppl	r2, pc, asr r9
     260:	4349006e 	movtmi	r0, #36974	; 0x906e
     264:	52005253 	andpl	r5, r0, #805306373	; 0x30000005
     268:	00523046 	subseq	r3, r2, r6, asr #32
     26c:	4f495047 	svcmi	0x00495047
     270:	79544f5f 	ldmdbvc	r4, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, lr}^
     274:	4f5f6570 	svcmi	0x005f6570
     278:	50470044 	subpl	r0, r7, r4, asr #32
     27c:	495f4f49 	ldmdbmi	pc, {r0, r3, r6, r8, r9, sl, fp, lr}^	; <UNPREDICTABLE>
     280:	5474696e 	ldrbtpl	r6, [r4], #-2414	; 0xfffff692
     284:	44657079 	strbtmi	r7, [r5], #-121	; 0xffffff87
     288:	43006665 	movwmi	r6, #1637	; 0x665
     28c:	465f4e41 	ldrbmi	r4, [pc], -r1, asr #28
     290:	65746c69 	ldrbvs	r6, [r4, #-3177]!	; 0xfffff397
     294:	67655272 			; <UNDEFINED> instruction: 0x67655272
     298:	65747369 	ldrbvs	r7, [r4, #-873]!	; 0xfffffc97
     29c:	79545f72 	ldmdbvc	r4, {r1, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
     2a0:	65446570 	strbvs	r6, [r4, #-1392]	; 0xfffffa90
     2a4:	46730066 	ldrbtmi	r0, [r3], -r6, rrx
     2a8:	4d4f4649 	stclmi	6, cr4, [pc, #-292]	; 18c <startup-0x1ffffe74>
     2ac:	426c6961 	rsbmi	r6, ip, #1589248	; 0x184000
     2b0:	4400786f 	strmi	r7, [r0], #-2159	; 0xfffff791
     2b4:	5f31414d 	svcpl	0x0031414d
     2b8:	65727453 	ldrbvs	r7, [r2, #-1107]!	; 0xfffffbad
     2bc:	5f326d61 	svcpl	0x00326d61
     2c0:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     2c4:	53455200 	movtpl	r5, #20992	; 0x5200
     2c8:	45565245 	ldrbmi	r5, [r6, #-581]	; 0xfffffdbb
     2cc:	52003044 	andpl	r3, r0, #68	; 0x44
     2d0:	52455345 	subpl	r5, r5, #335544321	; 0x14000001
     2d4:	31444556 	cmpcc	r4, r6, asr r5
     2d8:	736e7500 	cmnvc	lr, #0, 10
     2dc:	656e6769 	strbvs	r6, [lr, #-1897]!	; 0xfffff897
     2e0:	68632064 	stmdavs	r3!, {r2, r5, r6, sp}^
     2e4:	44007261 	strmi	r7, [r0], #-609	; 0xfffffd9f
     2e8:	5f32414d 	svcpl	0x0032414d
     2ec:	65727453 	ldrbvs	r7, [r2, #-1107]!	; 0xfffffbad
     2f0:	5f346d61 	svcpl	0x00346d61
     2f4:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     2f8:	53455200 	movtpl	r5, #20992	; 0x5200
     2fc:	45565245 	ldrbmi	r5, [r6, #-581]	; 0xfffffdbb
     300:	52003444 	andpl	r3, r0, #68, 8	; 0x44000000
     304:	52455345 	subpl	r5, r5, #335544321	; 0x14000001
     308:	35444556 	strbcc	r4, [r4, #-1366]	; 0xfffffaaa
     30c:	31465200 	mrscc	r5, (UNDEF: 102)
     310:	41490052 	qdaddmi	r0, r2, r9
     314:	47005242 	strmi	r5, [r0, -r2, asr #4]
     318:	5f4f4950 	svcpl	0x004f4950
     31c:	7079544f 	rsbsvc	r5, r9, pc, asr #8
     320:	50505f65 	subspl	r5, r0, r5, ror #30
     324:	43324900 	teqmi	r2, #0, 18
     328:	52455f31 	subpl	r5, r5, #49, 30	; 0xc4
     32c:	5152495f 	cmppl	r2, pc, asr r9
     330:	4143006e 	cmpmi	r3, lr, rrx
     334:	69465f4e 	stmdbvs	r6, {r1, r2, r3, r6, r8, r9, sl, fp, ip, lr}^
     338:	7265746c 	rsbvc	r7, r5, #108, 8	; 0x6c000000
     33c:	4f464946 	svcmi	0x00464946
     340:	69737341 	ldmdbvs	r3!, {r0, r6, r8, r9, ip, sp, lr}^
     344:	656d6e67 	strbvs	r6, [sp, #-3687]!	; 0xfffff199
     348:	4300746e 	movwmi	r7, #1134	; 0x46e
     34c:	415f4e41 	cmpmi	pc, r1, asr #28
     350:	004d4f42 	subeq	r4, sp, r2, asr #30
     354:	324e4143 	subcc	r4, lr, #-1073741808	; 0xc0000010
     358:	4543535f 	strbmi	r5, [r3, #-863]	; 0xfffffca1
     35c:	5152495f 	cmppl	r2, pc, asr r9
     360:	6568006e 	strbvs	r0, [r8, #-110]!	; 0xffffff92
     364:	72656461 	rsbvc	r6, r5, #1627389952	; 0x61000000
     368:	64745300 	ldrbtvs	r5, [r4], #-768	; 0xfffffd00
     36c:	52006449 	andpl	r6, r0, #1224736768	; 0x49000000
     370:	52455345 	subpl	r5, r5, #335544321	; 0x14000001
     374:	32444556 	subcc	r4, r4, #360710144	; 0x15800000
     378:	53455200 	movtpl	r5, #20992	; 0x5200
     37c:	45565245 	ldrbmi	r5, [r6, #-581]	; 0xfffffdbb
     380:	54003344 	strpl	r3, [r0], #-836	; 0xfffffcbc
     384:	5f354d49 	svcpl	0x00354d49
     388:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     38c:	61735500 	cmnvs	r3, r0, lsl #10
     390:	61466567 	cmpvs	r6, r7, ror #10
     394:	5f746c75 	svcpl	0x00746c75
     398:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     39c:	73655300 	cmnvc	r5, #0, 6
     3a0:	6e6f6973 			; <UNDEFINED> instruction: 0x6e6f6973
     3a4:	63414449 	movtvs	r4, #5193	; 0x1449
     3a8:	65766974 	ldrbvs	r6, [r6, #-2420]!	; 0xfffff68c
     3ac:	42435300 	submi	r5, r3, #0, 6
     3b0:	7079545f 	rsbsvc	r5, r9, pc, asr r4
     3b4:	50470065 	subpl	r0, r7, r5, rrx
     3b8:	75504f49 	ldrbvc	r4, [r0, #-3913]	; 0xfffff0b7
     3bc:	545f6450 	ldrbpl	r6, [pc], #-1104	; 3c4 <startup-0x1ffffc3c>
     3c0:	44657079 	strbtmi	r7, [r5], #-121	; 0xffffff87
     3c4:	44006665 	strmi	r6, [r0], #-1637	; 0xfffff99b
     3c8:	00525346 	subseq	r5, r2, r6, asr #6
     3cc:	614e4143 	cmpvs	lr, r3, asr #2
     3d0:	76697463 	strbtvc	r7, [r9], -r3, ror #8
     3d4:	46657461 	strbtmi	r7, [r5], -r1, ror #8
     3d8:	65746c69 	ldrbvs	r6, [r4, #-3177]!	; 0xfffff397
     3dc:	6e614872 	mcrvs	8, 3, r4, cr1, cr2, {3}
     3e0:	72656c64 	rsbvc	r6, r5, #100, 24	; 0x6400
     3e4:	49564e00 	ldmdbmi	r6, {r9, sl, fp, lr}^
     3e8:	52495f43 	subpl	r5, r9, #268	; 0x10c
     3ec:	61684351 	cmnvs	r8, r1, asr r3
     3f0:	6c656e6e 	stclvs	14, cr6, [r5], #-440	; 0xfffffe48
     3f4:	65657250 	strbvs	r7, [r5, #-592]!	; 0xfffffdb0
     3f8:	6974706d 	ldmdbvs	r4!, {r0, r2, r3, r5, r6, ip, sp, lr}^
     3fc:	72506e6f 	subsvc	r6, r0, #1776	; 0x6f0
     400:	69726f69 	ldmdbvs	r2!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
     404:	43007974 	movwmi	r7, #2420	; 0x974
     408:	73555c3a 	cmpvc	r5, #14848	; 0x3a00
     40c:	5c737265 	lfmpl	f7, 2, [r3], #-404	; 0xfffffe6c
     410:	6b697245 	blvs	1a5cd2c <startup-0x1e5a32d4>
     414:	636f445c 	cmnvs	pc, #92, 8	; 0x5c000000
     418:	6e656d75 	mcrvs	13, 3, r6, cr5, cr5, {3}
     41c:	445c7374 	ldrbmi	r7, [ip], #-884	; 0xfffffc8c
     420:	74617461 	strbtvc	r7, [r1], #-1121	; 0xfffffb9f
     424:	696e6b65 	stmdbvs	lr!, {r0, r2, r5, r6, r8, r9, fp, sp, lr}^
     428:	70746b73 	rsbsvc	r6, r4, r3, ror fp
     42c:	656a6f72 	strbvs	r6, [sl, #-3954]!	; 0xfffff08e
     430:	6b5c746b 	blvs	171d5e4 <startup-0x1e8e2a1c>
     434:	445c646f 	ldrbmi	r6, [ip], #-1135	; 0xfffffb91
     438:	00726f6f 	rsbseq	r6, r2, pc, ror #30
     43c:	69755f5f 	ldmdbvs	r5!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, ip, lr}^
     440:	3631746e 	ldrtcc	r7, [r1], -lr, ror #8
     444:	4700745f 	smlsdmi	r0, pc, r4, r7	; <UNPREDICTABLE>
     448:	5f4f4950 	svcpl	0x004f4950
     44c:	5f776f4c 	svcpl	0x00776f4c
     450:	65657053 	strbvs	r7, [r5, #-83]!	; 0xffffffad
     454:	5f5f0064 	svcpl	0x005f0064
     458:	73756e75 	cmnvc	r5, #1872	; 0x750
     45c:	5f5f6465 	svcpl	0x005f6465
     460:	4e414300 	cdpmi	3, 4, cr4, cr1, cr0, {0}
     464:	58525f31 	ldmdapl	r2, {r0, r4, r5, r8, r9, sl, fp, ip, lr}^
     468:	52495f30 	subpl	r5, r9, #48, 30	; 0xc0
     46c:	43006e51 	movwmi	r6, #3665	; 0xe51
     470:	465f4e41 	ldrbmi	r4, [pc], -r1, asr #28
     474:	65746c69 	ldrbvs	r6, [r4, #-3177]!	; 0xfffff397
     478:	74634172 	strbtvc	r4, [r3], #-370	; 0xfffffe8e
     47c:	74617669 	strbtvc	r7, [r1], #-1641	; 0xfffff997
     480:	006e6f69 	rsbeq	r6, lr, r9, ror #30
     484:	52534648 	subspl	r4, r3, #72, 12	; 0x4800000
     488:	61654800 	cmnvs	r5, r0, lsl #16
     48c:	00726564 	rsbseq	r6, r2, r4, ror #10
     490:	49747845 	ldmdbmi	r4!, {r0, r2, r6, fp, ip, sp, lr}^
     494:	41430064 	cmpmi	r3, r4, rrx
     498:	69465f4e 	stmdbvs	r6, {r1, r2, r3, r6, r8, r9, sl, fp, ip, lr}^
     49c:	7265746c 	rsbvc	r7, r5, #108, 8	; 0x6c000000
     4a0:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xfffff1b7
     4a4:	75727453 	ldrbvc	r7, [r2, #-1107]!	; 0xfffffbad
     4a8:	72757463 	rsbsvc	r7, r5, #1660944384	; 0x63000000
     4ac:	49540065 	ldmdbmi	r4, {r0, r2, r5, r6}^
     4b0:	495f344d 	ldmdbmi	pc, {r0, r2, r3, r6, sl, ip, sp}^	; <UNPREDICTABLE>
     4b4:	006e5152 	rsbeq	r5, lr, r2, asr r1
     4b8:	20554e47 	subscs	r4, r5, r7, asr #28
     4bc:	20393943 	eorscs	r3, r9, r3, asr #18
     4c0:	2e322e37 	mrccs	14, 1, r2, cr2, cr7, {1}
     4c4:	30322031 	eorscc	r2, r2, r1, lsr r0
     4c8:	39303731 	ldmdbcc	r0!, {r0, r4, r5, r8, r9, sl, ip, sp}
     4cc:	28203430 	stmdacs	r0!, {r4, r5, sl, ip, sp}
     4d0:	656c6572 	strbvs	r6, [ip, #-1394]!	; 0xfffffa8e
     4d4:	29657361 	stmdbcs	r5!, {r0, r5, r6, r8, r9, ip, sp, lr}^
     4d8:	52415b20 	subpl	r5, r1, #32, 22	; 0x8000
     4dc:	6d652f4d 	stclvs	15, cr2, [r5, #-308]!	; 0xfffffecc
     4e0:	64646562 	strbtvs	r6, [r4], #-1378	; 0xfffffa9e
     4e4:	372d6465 	strcc	r6, [sp, -r5, ror #8]!
     4e8:	6172622d 	cmnvs	r2, sp, lsr #4
     4ec:	2068636e 	rsbcs	r6, r8, lr, ror #6
     4f0:	69766572 	ldmdbvs	r6!, {r1, r4, r5, r6, r8, sl, sp, lr}^
     4f4:	6e6f6973 			; <UNDEFINED> instruction: 0x6e6f6973
     4f8:	35353220 	ldrcc	r3, [r5, #-544]!	; 0xfffffde0
     4fc:	5d343032 	ldcpl	0, cr3, [r4, #-200]!	; 0xffffff38
     500:	746d2d20 	strbtvc	r2, [sp], #-3360	; 0xfffff2e0
     504:	626d7568 	rsbvs	r7, sp, #104, 10	; 0x1a000000
     508:	616d2d20 	cmnvs	sp, r0, lsr #26
     50c:	3d686372 	stclcc	3, cr6, [r8, #-456]!	; 0xfffffe38
     510:	766d7261 	strbtvc	r7, [sp], -r1, ror #4
     514:	206d2d36 	rsbcs	r2, sp, r6, lsr sp
     518:	6c666d2d 	stclvs	13, cr6, [r6], #-180	; 0xffffff4c
     51c:	2d74616f 	ldfcse	f6, [r4, #-444]!	; 0xfffffe44
     520:	3d696261 	sfmcc	f6, 2, [r9, #-388]!	; 0xfffffe7c
     524:	74666f73 	strbtvc	r6, [r6], #-3955	; 0xfffff08d
     528:	746d2d20 	strbtvc	r2, [sp], #-3360	; 0xfffff2e0
     52c:	626d7568 	rsbvs	r7, sp, #104, 10	; 0x1a000000
     530:	616d2d20 	cmnvs	sp, r0, lsr #26
     534:	3d686372 	stclcc	3, cr6, [r8, #-456]!	; 0xfffffe38
     538:	766d7261 	strbtvc	r7, [sp], -r1, ror #4
     53c:	206d2d36 	rsbcs	r2, sp, r6, lsr sp
     540:	2d20672d 	stccs	7, cr6, [r0, #-180]!	; 0xffffff4c
     544:	2d20304f 	stccs	0, cr3, [r0, #-316]!	; 0xfffffec4
     548:	3d647473 	cfstrdcc	mvd7, [r4, #-460]!	; 0xfffffe34
     54c:	00393963 	eorseq	r3, r9, r3, ror #18
     550:	546e6143 	strbtpl	r6, [lr], #-323	; 0xfffffebd
     554:	67734d78 			; <UNDEFINED> instruction: 0x67734d78
     558:	43485300 	movtmi	r5, #33536	; 0x8300
     55c:	53005253 	movwpl	r5, #595	; 0x253
     560:	00524954 	subseq	r4, r2, r4, asr r9
     564:	31433249 	cmpcc	r3, r9, asr #4
     568:	5f56455f 	svcpl	0x0056455f
     56c:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     570:	6e616300 	cdpvs	3, 6, cr6, cr1, cr0, {0}
     574:	696e695f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, sp, lr}^
     578:	74735f74 	ldrbtvc	r5, [r3], #-3956	; 0xfffff08c
     57c:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
     580:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
     584:	6f4d5f4f 	svcvs	0x004d5f4f
     588:	4f5f6564 	svcmi	0x005f6564
     58c:	43005455 	movwmi	r5, #1109	; 0x455
     590:	495f4e41 	ldmdbmi	pc, {r0, r6, r9, sl, fp, lr}^	; <UNPREDICTABLE>
     594:	5374696e 	cmnpl	r4, #1802240	; 0x1b8000
     598:	63757274 	cmnvs	r5, #116, 4	; 0x40000007
     59c:	65727574 	ldrbvs	r7, [r2, #-1396]!	; 0xfffffa8c
     5a0:	4e414300 	cdpmi	3, 4, cr4, cr1, cr0, {0}
     5a4:	574a535f 	smlsldpl	r5, sl, pc, r3	; <UNPREDICTABLE>
     5a8:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
     5ac:	43435f31 	movtmi	r5, #16177	; 0x3f31
     5b0:	5152495f 	cmppl	r2, pc, asr r9
     5b4:	4148006e 	cmpmi	r8, lr, rrx
     5b8:	525f4853 	subspl	r4, pc, #5439488	; 0x530000
     5bc:	495f474e 	ldmdbmi	pc, {r1, r2, r3, r6, r8, r9, sl, lr}^	; <UNPREDICTABLE>
     5c0:	006e5152 	rsbeq	r5, lr, r2, asr r1
     5c4:	49545845 	ldmdbmi	r4, {r0, r2, r6, fp, ip, lr}^
     5c8:	52495f31 	subpl	r5, r9, #49, 30	; 0xc4
     5cc:	43006e51 	movwmi	r6, #3665	; 0xe51
     5d0:	5f314e41 	svcpl	0x00314e41
     5d4:	495f5854 	ldmdbmi	pc, {r2, r4, r6, fp, ip, lr}^	; <UNPREDICTABLE>
     5d8:	006e5152 	rsbeq	r5, lr, r2, asr r1
     5dc:	31414d44 	cmpcc	r1, r4, asr #26
     5e0:	7274535f 	rsbsvc	r5, r4, #2080374785	; 0x7c000001
     5e4:	356d6165 	strbcc	r6, [sp, #-357]!	; 0xfffffe9b
     5e8:	5152495f 	cmppl	r2, pc, asr r9
     5ec:	4954006e 	ldmdbmi	r4, {r1, r2, r3, r5, r6}^
     5f0:	545f384d 	ldrbpl	r3, [pc], #-2125	; 5f8 <startup-0x1ffffa08>
     5f4:	435f4752 	cmpmi	pc, #21495808	; 0x1480000
     5f8:	545f4d4f 	ldrbpl	r4, [pc], #-3407	; 600 <startup-0x1ffffa00>
     5fc:	34314d49 	ldrtcc	r4, [r1], #-3401	; 0xfffff2b7
     600:	5152495f 	cmppl	r2, pc, asr r9
     604:	4d44006e 	stclmi	0, cr0, [r4, #-440]	; 0xfffffe48
     608:	535f3241 	cmppl	pc, #268435460	; 0x10000004
     60c:	61657274 	smcvs	22308	; 0x5724
     610:	495f376d 	ldmdbmi	pc, {r0, r2, r3, r5, r6, r8, r9, sl, ip, sp}^	; <UNPREDICTABLE>
     614:	006e5152 	rsbeq	r5, lr, r2, asr r1
     618:	5f47544f 	svcpl	0x0047544f
     61c:	495f5346 	ldmdbmi	pc, {r1, r2, r6, r8, r9, ip, lr}^	; <UNPREDICTABLE>
     620:	006e5152 	rsbeq	r5, lr, r2, asr r1
     624:	4d6e6f4e 	stclmi	15, cr6, [lr, #-312]!	; 0xfffffec8
     628:	616b7361 	cmnvs	fp, r1, ror #6
     62c:	49656c62 	stmdbmi	r5!, {r1, r5, r6, sl, fp, sp, lr}^
     630:	495f746e 	ldmdbmi	pc, {r1, r2, r3, r5, r6, sl, ip, sp, lr}^	; <UNPREDICTABLE>
     634:	006e5152 	rsbeq	r5, lr, r2, asr r1
     638:	47445757 	smlsldmi	r5, r4, r7, r7
     63c:	5152495f 	cmppl	r2, pc, asr r9
     640:	544f006e 	strbpl	r0, [pc], #-110	; 648 <startup-0x1ffff9b8>
     644:	53485f47 	movtpl	r5, #36679	; 0x8f47
     648:	554b575f 	strbpl	r5, [fp, #-1887]	; 0xfffff8a1
     64c:	52495f50 	subpl	r5, r9, #80, 30	; 0x140
     650:	4d006e51 	stcmi	14, cr6, [r0, #-324]	; 0xfffffebc
     654:	726f6d65 	rsbvc	r6, pc, #6464	; 0x1940
     658:	6e614d79 	mcrvs	13, 3, r4, cr1, cr9, {3}
     65c:	6d656761 	stclvs	7, cr6, [r5, #-388]!	; 0xfffffe7c
     660:	5f746e65 	svcpl	0x00746e65
     664:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     668:	73795300 	cmnvc	r9, #0, 6
     66c:	436d6574 	cmnmi	sp, #116, 10	; 0x1d000000
     670:	4365726f 	cmnmi	r5, #-268435450	; 0xf0000006
     674:	6b636f6c 	blvs	18dc42c <startup-0x1e723bd4>
     678:	4d415400 	cfstrdmi	mvd5, [r1, #-0]
     67c:	54535f50 	ldrbpl	r5, [r3], #-3920	; 0xfffff0b0
     680:	5f504d41 	svcpl	0x00504d41
     684:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     688:	4e414300 	cdpmi	3, 4, cr4, cr1, cr0, {0}
     68c:	43535f31 	cmpmi	r3, #49, 30	; 0xc4
     690:	52495f45 	subpl	r5, r9, #276	; 0x114
     694:	43006e51 	movwmi	r6, #3665	; 0xe51
     698:	73552f3a 	cmpvc	r5, #58, 30	; 0xe8
     69c:	2f737265 	svccs	0x00737265
     6a0:	6b697245 	blvs	1a5cfbc <startup-0x1e5a3044>
     6a4:	636f442f 	cmnvs	pc, #788529152	; 0x2f000000
     6a8:	6e656d75 	mcrvs	13, 3, r6, cr5, cr5, {3}
     6ac:	442f7374 	strtmi	r7, [pc], #-884	; 6b4 <startup-0x1ffff94c>
     6b0:	74617461 	strbtvc	r7, [r1], #-1121	; 0xfffffb9f
     6b4:	696e6b65 	stmdbvs	lr!, {r0, r2, r5, r6, r8, r9, fp, sp, lr}^
     6b8:	70746b73 	rsbsvc	r6, r4, r3, ror fp
     6bc:	656a6f72 	strbvs	r6, [sl, #-3954]!	; 0xfffff08e
     6c0:	6b2f746b 	blvs	bdd874 <startup-0x1f42278c>
     6c4:	6c2f646f 	cfstrsvs	mvf6, [pc], #-444	; 510 <startup-0x1ffffaf0>
     6c8:	432f6269 			; <UNDEFINED> instruction: 0x432f6269
     6cc:	632e4e41 			; <UNDEFINED> instruction: 0x632e4e41
     6d0:	51524900 	cmppl	r2, r0, lsl #18
     6d4:	79545f6e 	ldmdbvc	r4, {r1, r2, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
     6d8:	47006570 	smlsdxmi	r0, r0, r5, r6
     6dc:	5f4f4950 	svcpl	0x004f4950
     6e0:	65646f4d 	strbvs	r6, [r4, #-3917]!	; 0xfffff0b3
     6e4:	004e495f 	subeq	r4, lr, pc, asr r9
     6e8:	32414d44 	subcc	r4, r1, #68, 26	; 0x1100
     6ec:	7274535f 	rsbsvc	r5, r4, #2080374785	; 0x7c000001
     6f0:	306d6165 	rsbcc	r6, sp, r5, ror #2
     6f4:	5152495f 	cmppl	r2, pc, asr r9
     6f8:	434c006e 	movtmi	r0, #49262	; 0xc06e
     6fc:	4900524b 	stmdbmi	r0, {r0, r1, r3, r6, r9, ip, lr}
     700:	5f324332 	svcpl	0x00324332
     704:	495f5245 	ldmdbmi	pc, {r0, r2, r6, r9, ip, lr}^	; <UNPREDICTABLE>
     708:	006e5152 	rsbeq	r5, lr, r2, asr r1
     70c:	5f4e4143 	svcpl	0x004e4143
     710:	73657250 	cmnvc	r5, #80, 4
     714:	656c6163 	strbvs	r6, [ip, #-355]!	; 0xfffffe9d
     718:	534f0072 	movtpl	r0, #61554	; 0xf072
     71c:	44454550 	strbmi	r4, [r5], #-1360	; 0xfffffab0
     720:	75420052 	strbvc	r0, [r2, #-82]	; 0xffffffae
     724:	75614673 	strbvc	r4, [r1, #-1651]!	; 0xfffff98d
     728:	495f746c 	ldmdbmi	pc, {r2, r3, r5, r6, sl, ip, sp, lr}^	; <UNPREDICTABLE>
     72c:	006e5152 	rsbeq	r5, lr, r2, asr r1
     730:	54524155 	ldrbpl	r4, [r2], #-341	; 0xfffffeab
     734:	52495f35 	subpl	r5, r9, #53, 30	; 0xd4
     738:	54006e51 	strpl	r6, [r0], #-3665	; 0xfffff1af
     73c:	5f314d49 	svcpl	0x00314d49
     740:	5f4b5242 	svcpl	0x004b5242
     744:	394d4954 	stmdbcc	sp, {r2, r4, r6, r8, fp, lr}^
     748:	5152495f 	cmppl	r2, pc, asr r9
     74c:	5047006e 	subpl	r0, r7, lr, rrx
     750:	4f5f4f49 	svcmi	0x005f4f49
     754:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0xfffff6ac
     758:	755f5f00 	ldrbvc	r5, [pc, #-3840]	; fffff860 <GPIO_Ports+0xdfffb8b8>
     75c:	33746e69 	cmncc	r4, #1680	; 0x690
     760:	00745f32 	rsbseq	r5, r4, r2, lsr pc
     764:	4f495047 	svcmi	0x00495047
     768:	64654d5f 	strbtvs	r4, [r5], #-3423	; 0xfffff2a1
     76c:	5f6d7569 	svcpl	0x006d7569
     770:	65657053 	strbvs	r7, [r5, #-83]!	; 0xffffffad
     774:	49540064 	ldmdbmi	r4, {r2, r5, r6}^
     778:	495f374d 	ldmdbmi	pc, {r0, r2, r3, r6, r8, r9, sl, ip, sp}^	; <UNPREDICTABLE>
     77c:	006e5152 	rsbeq	r5, lr, r2, asr r1
     780:	676e6f6c 	strbvs	r6, [lr, -ip, ror #30]!
     784:	6e6f6c20 	cdpvs	12, 6, cr6, cr15, cr0, {1}
     788:	6e692067 	cdpvs	0, 6, cr2, cr9, cr7, {3}
     78c:	54450074 	strbpl	r0, [r5], #-116	; 0xffffff8c
     790:	4b575f48 	blmi	15d84b8 <startup-0x1ea27b48>
     794:	495f5055 	ldmdbmi	pc, {r0, r2, r4, r6, ip, lr}^	; <UNPREDICTABLE>
     798:	006e5152 	rsbeq	r5, lr, r2, asr r1
     79c:	5f47544f 	svcpl	0x0047544f
     7a0:	495f5348 	ldmdbmi	pc, {r3, r6, r8, r9, ip, lr}^	; <UNPREDICTABLE>
     7a4:	006e5152 	rsbeq	r5, lr, r2, asr r1
     7a8:	44505550 	ldrbmi	r5, [r0], #-1360	; 0xfffffab0
     7ac:	736d0052 	cmnvc	sp, #82	; 0x52
     7b0:	70795467 	rsbsvc	r5, r9, r7, ror #8
     7b4:	50530065 	subspl	r0, r3, r5, rrx
     7b8:	495f3149 	ldmdbmi	pc, {r0, r3, r6, r8, ip, sp}^	; <UNPREDICTABLE>
     7bc:	006e5152 	rsbeq	r5, lr, r2, asr r1
     7c0:	6f696e75 	svcvs	0x00696e75
     7c4:	6c69466e 	stclvs	6, cr4, [r9], #-440	; 0xfffffe48
     7c8:	00726574 	rsbseq	r6, r2, r4, ror r5
     7cc:	646e6168 	strbtvs	r6, [lr], #-360	; 0xfffffe98
     7d0:	4c72656c 	cfldr64mi	mvdx6, [r2], #-432	; 0xfffffe50
     7d4:	00747369 	rsbseq	r7, r4, r9, ror #6
     7d8:	61435653 	cmpvs	r3, r3, asr r6
     7dc:	495f6c6c 	ldmdbmi	pc, {r2, r3, r5, r6, sl, fp, sp, lr}^	; <UNPREDICTABLE>
     7e0:	006e5152 	rsbeq	r5, lr, r2, asr r1
     7e4:	52525342 	subspl	r5, r2, #134217729	; 0x8000001
     7e8:	53420048 	movtpl	r0, #8264	; 0x2048
     7ec:	004c5252 	subeq	r5, ip, r2, asr r2
     7f0:	4f495047 	svcmi	0x00495047
     7f4:	6769485f 			; <UNDEFINED> instruction: 0x6769485f
     7f8:	70535f68 	subsvc	r5, r3, r8, ror #30
     7fc:	00646565 	rsbeq	r6, r4, r5, ror #10
     800:	6b73616d 	blvs	1cd8dbc <startup-0x1e327244>
     804:	55504600 	ldrbpl	r4, [r0, #-1536]	; 0xfffffa00
     808:	5152495f 	cmppl	r2, pc, asr r9
     80c:	4155006e 	cmpmi	r5, lr, rrx
     810:	5f345452 	svcpl	0x00345452
     814:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     818:	4e414300 	cdpmi	3, 4, cr4, cr1, cr0, {0}
     81c:	4c46525f 	sfmmi	f5, 2, [r6], {95}	; 0x5f
     820:	544f004d 	strbpl	r0, [pc], #-77	; 828 <startup-0x1ffff7d8>
     824:	53465f47 	movtpl	r5, #28487	; 0x6f47
     828:	554b575f 	strbpl	r5, [fp, #-1887]	; 0xfffff8a1
     82c:	52495f50 	subpl	r5, r9, #80, 30	; 0x140
     830:	45006e51 	strmi	r6, [r0, #-3665]	; 0xfffff1af
     834:	34495458 	strbcc	r5, [r9], #-1112	; 0xfffffba8
     838:	5152495f 	cmppl	r2, pc, asr r9
     83c:	4954006e 	ldmdbmi	r4, {r1, r2, r3, r5, r6}^
     840:	445f364d 	ldrbmi	r3, [pc], #-1613	; 848 <startup-0x1ffff7b8>
     844:	495f4341 	ldmdbmi	pc, {r0, r6, r8, r9, lr}^	; <UNPREDICTABLE>
     848:	006e5152 	rsbeq	r5, lr, r2, asr r1
     84c:	4f495047 	svcmi	0x00495047
     850:	6570535f 	ldrbvs	r5, [r0, #-863]!	; 0xfffffca1
     854:	49006465 	stmdbmi	r0, {r0, r2, r5, r6, sl, sp, lr}
     858:	5f324332 	svcpl	0x00324332
     85c:	495f5645 	ldmdbmi	pc, {r0, r2, r6, r9, sl, ip, lr}^	; <UNPREDICTABLE>
     860:	006e5152 	rsbeq	r5, lr, r2, asr r1
     864:	52314d46 	eorspl	r4, r1, #4480	; 0x1180
     868:	48445200 	stmdami	r4, {r9, ip, lr}^
     86c:	44540052 	ldrbmi	r0, [r4], #-82	; 0xffffffae
     870:	42005248 	andmi	r5, r0, #72, 4	; 0x80000004
     874:	00524146 	subseq	r4, r2, r6, asr #2
     878:	5f4e4143 	svcpl	0x004e4143
     87c:	746c6946 	strbtvc	r6, [ip], #-2374	; 0xfffff6ba
     880:	614d7265 	cmpvs	sp, r5, ror #4
     884:	64496b73 	strbvs	r6, [r9], #-2931	; 0xfffff48d
     888:	68676948 	stmdavs	r7!, {r3, r6, r8, fp, sp, lr}^
     88c:	67736d00 	ldrbvs	r6, [r3, -r0, lsl #26]!
     890:	006d754e 	rsbeq	r7, sp, lr, asr #10
     894:	31414d44 	cmpcc	r1, r4, asr #26
     898:	7274535f 	rsbsvc	r5, r4, #2080374785	; 0x7c000001
     89c:	316d6165 	cmncc	sp, r5, ror #2
     8a0:	5152495f 	cmppl	r2, pc, asr r9
     8a4:	4d44006e 	stclmi	0, cr0, [r4, #-440]	; 0xfffffe48
     8a8:	535f3241 	cmppl	pc, #268435460	; 0x10000004
     8ac:	61657274 	smcvs	22308	; 0x5724
     8b0:	495f336d 	ldmdbmi	pc, {r0, r2, r3, r5, r6, r8, r9, ip, sp}^	; <UNPREDICTABLE>
     8b4:	006e5152 	rsbeq	r5, lr, r2, asr r1
     8b8:	324e4143 	subcc	r4, lr, #-1073741808	; 0xc0000010
     8bc:	5f58545f 	svcpl	0x0058545f
     8c0:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     8c4:	4e414300 	cdpmi	3, 4, cr4, cr1, cr0, {0}
     8c8:	7079545f 	rsbsvc	r5, r9, pc, asr r4
     8cc:	66654465 	strbtvs	r4, [r5], -r5, ror #8
     8d0:	4e414300 	cdpmi	3, 4, cr4, cr1, cr0, {0}
     8d4:	6c69465f 	stclvs	6, cr4, [r9], #-380	; 0xfffffe84
     8d8:	4e726574 	mrcmi	5, 3, r6, cr2, cr4, {3}
     8dc:	65626d75 	strbvs	r6, [r2, #-3445]!	; 0xfffff28b
     8e0:	46730072 			; <UNDEFINED> instruction: 0x46730072
     8e4:	65746c69 	ldrbvs	r6, [r4, #-3177]!	; 0xfffff397
     8e8:	67655272 			; <UNDEFINED> instruction: 0x67655272
     8ec:	65747369 	ldrbvs	r7, [r4, #-873]!	; 0xfffffc97
     8f0:	564e0072 			; <UNDEFINED> instruction: 0x564e0072
     8f4:	495f4349 	ldmdbmi	pc, {r0, r3, r6, r8, r9, lr}^	; <UNPREDICTABLE>
     8f8:	68435152 	stmdavs	r3, {r1, r4, r6, r8, ip, lr}^
     8fc:	656e6e61 	strbvs	r6, [lr, #-3681]!	; 0xfffff19f
     900:	564e006c 	strbpl	r0, [lr], -ip, rrx
     904:	495f4349 	ldmdbmi	pc, {r0, r3, r6, r8, r9, lr}^	; <UNPREDICTABLE>
     908:	68435152 	stmdavs	r3, {r1, r4, r6, r8, ip, lr}^
     90c:	656e6e61 	strbvs	r6, [lr, #-3681]!	; 0xfffff19f
     910:	6275536c 	rsbsvs	r5, r5, #108, 6	; 0xb0000001
     914:	6f697250 	svcvs	0x00697250
     918:	79746972 	ldmdbvc	r4!, {r1, r4, r5, r6, r8, fp, sp, lr}^
     91c:	53494400 	movtpl	r4, #37888	; 0x9400
     920:	454c4241 	strbmi	r4, [ip, #-577]	; 0xfffffdbf
     924:	6e614300 	cdpvs	3, 6, cr4, cr1, cr0, {0}
     928:	734d7852 	movtvc	r7, #55378	; 0xd852
     92c:	41430067 	cmpmi	r3, r7, rrx
     930:	7369644e 	cmnvc	r9, #1308622848	; 0x4e000000
     934:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
     938:	466c6c41 	strbtmi	r6, [ip], -r1, asr #24
     93c:	65746c69 	ldrbvs	r6, [r4, #-3177]!	; 0xfffff397
     940:	6e614872 	mcrvs	8, 3, r4, cr1, cr2, {3}
     944:	72656c64 	rsbvc	r6, r5, #100, 24	; 0x6400
     948:	69660073 	stmdbvs	r6!, {r0, r1, r4, r5, r6}^
     94c:	7265746c 	rsbvc	r7, r5, #108, 8	; 0x6c000000
     950:	6f696e55 	svcvs	0x00696e55
     954:	4143006e 	cmpmi	r3, lr, rrx
     958:	6e61684e 	cdpvs	8, 6, cr6, cr1, cr14, {2}
     95c:	72656c64 	rsbvc	r6, r5, #100, 24	; 0x6400
     960:	7473694c 	ldrbtvc	r6, [r3], #-2380	; 0xfffff6b4
     964:	46746f4e 	ldrbtmi	r6, [r4], -lr, asr #30
     968:	006c6c75 	rsbeq	r6, ip, r5, ror ip
     96c:	31414d44 	cmpcc	r1, r4, asr #26
     970:	7274535f 	rsbsvc	r5, r4, #2080374785	; 0x7c000001
     974:	306d6165 	rsbcc	r6, sp, r5, ror #2
     978:	5152495f 	cmppl	r2, pc, asr r9
     97c:	5452006e 	ldrbpl	r0, [r2], #-110	; 0xffffff92
     980:	6c415f43 	mcrrvs	15, 4, r5, r1, cr3
     984:	5f6d7261 	svcpl	0x006d7261
     988:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     98c:	4e414300 	cdpmi	3, 4, cr4, cr1, cr0, {0}
     990:	5557415f 	ldrbpl	r4, [r7, #-351]	; 0xfffffea1
     994:	564e004d 	strbpl	r0, [lr], -sp, asr #32
     998:	545f4349 	ldrbpl	r4, [pc], #-841	; 9a0 <startup-0x1ffff660>
     99c:	00657079 	rsbeq	r7, r5, r9, ror r0
     9a0:	636e7546 	cmnvs	lr, #293601280	; 0x11800000
     9a4:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
     9a8:	74536c61 	ldrbvc	r6, [r3], #-3169	; 0xfffff39f
     9ac:	00657461 	rsbeq	r7, r5, r1, ror #8
     9b0:	33433249 	movtcc	r3, #12873	; 0x3249
     9b4:	5f52455f 	svcpl	0x0052455f
     9b8:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     9bc:	59524300 	ldmdbpl	r2, {r8, r9, lr}^
     9c0:	52495f50 	subpl	r5, r9, #80, 30	; 0x140
     9c4:	45006e51 	strmi	r6, [r0, #-3665]	; 0xfffff1af
     9c8:	31495458 	cmpcc	r9, r8, asr r4
     9cc:	30315f35 	eorscc	r5, r1, r5, lsr pc
     9d0:	5152495f 	cmppl	r2, pc, asr r9
     9d4:	6f6c006e 	svcvs	0x006c006e
     9d8:	6c20676e 	stcvs	7, cr6, [r0], #-440	; 0xfffffe48
     9dc:	20676e6f 	rsbcs	r6, r7, pc, ror #28
     9e0:	69736e75 	ldmdbvs	r3!, {r0, r2, r4, r5, r6, r9, sl, fp, sp, lr}^
     9e4:	64656e67 	strbtvs	r6, [r5], #-3687	; 0xfffff199
     9e8:	746e6920 	strbtvc	r6, [lr], #-2336	; 0xfffff6e0
     9ec:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
     9f0:	52495f33 	subpl	r5, r9, #51, 30	; 0xcc
     9f4:	55006e51 	strpl	r6, [r0, #-3665]	; 0xfffff1af
     9f8:	54524153 	ldrbpl	r4, [r2], #-339	; 0xfffffead
     9fc:	52495f31 	subpl	r5, r9, #49, 30	; 0xc4
     a00:	43006e51 	movwmi	r6, #3665	; 0xe51
     a04:	4e5f4e41 	cdpmi	14, 5, cr4, cr15, cr1, {2}
     a08:	00545241 	subseq	r5, r4, r1, asr #4
     a0c:	524c4452 	subpl	r4, ip, #1375731712	; 0x52000000
     a10:	4e414300 	cdpmi	3, 4, cr4, cr1, cr0, {0}
     a14:	4649465f 			; <UNDEFINED> instruction: 0x4649465f
     a18:	69614d4f 	stmdbvs	r1!, {r0, r1, r2, r3, r6, r8, sl, fp, lr}^
     a1c:	786f426c 	stmdavc	pc!, {r2, r3, r5, r6, r9, lr}^	; <UNPREDICTABLE>
     a20:	7079545f 	rsbsvc	r5, r9, pc, asr r4
     a24:	66654465 	strbtvs	r4, [r5], -r5, ror #8
     a28:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
     a2c:	6e495f4f 	cdpvs	15, 4, cr5, cr9, cr15, {2}
     a30:	74537469 	ldrbvc	r7, [r3], #-1129	; 0xfffffb97
     a34:	74637572 	strbtvc	r7, [r3], #-1394	; 0xfffffa8e
     a38:	00657275 	rsbeq	r7, r5, r5, ror r2
     a3c:	4f495047 	svcmi	0x00495047
     a40:	646f4d5f 	strbtvs	r4, [pc], #-3423	; a48 <startup-0x1ffff5b8>
     a44:	44540065 	ldrbmi	r0, [r4], #-101	; 0xffffff9b
     a48:	4300524c 	movwmi	r5, #588	; 0x24c
     a4c:	5f324e41 	svcpl	0x00324e41
     a50:	5f315852 	svcpl	0x00315852
     a54:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     a58:	43444100 	movtmi	r4, #16640	; 0x4100
     a5c:	5152495f 	cmppl	r2, pc, asr r9
     a60:	4143006e 	cmpmi	r3, lr, rrx
     a64:	69465f4e 	stmdbvs	r6, {r1, r2, r3, r6, r8, r9, sl, fp, ip, lr}^
     a68:	7265746c 	rsbvc	r7, r5, #108, 8	; 0x6c000000
     a6c:	69486449 	stmdbvs	r8, {r0, r3, r6, sl, sp, lr}^
     a70:	49006867 	stmdbmi	r0, {r0, r1, r2, r5, r6, fp, sp, lr}
     a74:	00524543 	subseq	r4, r2, r3, asr #10
     a78:	4f495047 	svcmi	0x00495047
     a7c:	65646f4d 	strbvs	r6, [r4, #-3917]!	; 0xfffff0b3
     a80:	7079545f 	rsbsvc	r5, r9, pc, asr r4
     a84:	66654465 	strbtvs	r4, [r5], -r5, ror #8
     a88:	44565000 	ldrbmi	r5, [r6], #-0
     a8c:	5152495f 	cmppl	r2, pc, asr r9
     a90:	4641006e 	strbmi	r0, [r1], -lr, rrx
     a94:	4f005253 	svcmi	0x00005253
     a98:	45505954 	ldrbmi	r5, [r0, #-2388]	; 0xfffff6ac
     a9c:	41430052 	qdaddmi	r0, r2, r3
     aa0:	6c69464e 	stclvs	6, cr4, [r9], #-312	; 0xfffffec8
     aa4:	48726574 	ldmdami	r2!, {r2, r4, r5, r6, r8, sl, sp, lr}^
     aa8:	6c646e61 	stclvs	14, cr6, [r4], #-388	; 0xfffffe7c
     aac:	46007265 	strmi	r7, [r0], -r5, ror #4
     ab0:	5f434d53 	svcpl	0x00434d53
     ab4:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     ab8:	54584500 	ldrbpl	r4, [r8], #-1280	; 0xfffffb00
     abc:	495f3049 	ldmdbmi	pc, {r0, r3, r6, ip, sp}^	; <UNPREDICTABLE>
     ac0:	006e5152 	rsbeq	r5, lr, r2, asr r1
     ac4:	52534643 	subspl	r4, r3, #70254592	; 0x4300000
     ac8:	414d4400 	cmpmi	sp, r0, lsl #8
     acc:	74535f31 	ldrbvc	r5, [r3], #-3889	; 0xfffff0cf
     ad0:	6d616572 	cfstr64vs	mvdx6, [r1, #-456]!	; 0xfffffe38
     ad4:	52495f34 	subpl	r5, r9, #52, 30	; 0xd0
     ad8:	44006e51 	strmi	r6, [r0], #-3665	; 0xfffff1af
     adc:	5f32414d 	svcpl	0x0032414d
     ae0:	65727453 	ldrbvs	r7, [r2, #-1107]!	; 0xfffffbad
     ae4:	5f366d61 	svcpl	0x00366d61
     ae8:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     aec:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
     af0:	6570534f 	ldrbvs	r5, [r0, #-847]!	; 0xfffffcb1
     af4:	545f6465 	ldrbpl	r6, [pc], #-1125	; afc <startup-0x1ffff504>
     af8:	44657079 	strbtmi	r7, [r5], #-121	; 0xffffff87
     afc:	44006665 	strmi	r6, [r0], #-1637	; 0xfffff99b
     b00:	67756265 	ldrbvs	r6, [r5, -r5, ror #4]!
     b04:	696e6f4d 	stmdbvs	lr!, {r0, r2, r3, r6, r8, r9, sl, fp, sp, lr}^
     b08:	5f726f74 	svcpl	0x00726f74
     b0c:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     b10:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
     b14:	69505f4f 	ldmdbvs	r0, {r0, r1, r2, r3, r6, r8, r9, sl, fp, ip, lr}^
     b18:	5346006e 	movtpl	r0, #24686	; 0x606e
     b1c:	49005231 	stmdbmi	r0, {r0, r4, r5, r9, ip, lr}
     b20:	5f334332 	svcpl	0x00334332
     b24:	495f5645 	ldmdbmi	pc, {r0, r2, r6, r9, sl, ip, lr}^	; <UNPREDICTABLE>
     b28:	006e5152 	rsbeq	r5, lr, r2, asr r1
     b2c:	5f4e4143 	svcpl	0x004e4143
     b30:	614d7854 	cmpvs	sp, r4, asr r8
     b34:	6f426c69 	svcvs	0x00426c69
     b38:	79545f78 	ldmdbvc	r4, {r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
     b3c:	65446570 	strbvs	r6, [r4, #-1392]	; 0xfffffa90
     b40:	50470066 	subpl	r0, r7, r6, rrx
     b44:	505f4f49 	subspl	r4, pc, r9, asr #30
     b48:	00645075 	rsbeq	r5, r4, r5, ror r0
     b4c:	5f485445 	svcpl	0x00485445
     b50:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     b54:	4e414300 	cdpmi	3, 4, cr4, cr1, cr0, {0}
     b58:	6c69465f 	stclvs	6, cr4, [r9], #-380	; 0xfffffe84
     b5c:	4d726574 	cfldr64mi	mvdx6, [r2, #-464]!	; 0xfffffe30
     b60:	496b7361 	stmdbmi	fp!, {r0, r5, r6, r8, r9, ip, sp, lr}^
     b64:	776f4c64 	strbvc	r4, [pc, -r4, ror #24]!
     b68:	464d4d00 	strbmi	r4, [sp], -r0, lsl #26
     b6c:	4d4d0052 	stclmi	0, cr0, [sp, #-328]	; 0xfffffeb8
     b70:	00524146 	subseq	r4, r2, r6, asr #2
     b74:	726f6873 	rsbvc	r6, pc, #7536640	; 0x730000
     b78:	6e692074 	mcrvs	0, 3, r2, cr9, cr4, {3}
     b7c:	43520074 	cmpmi	r2, #116	; 0x74
     b80:	52495f43 	subpl	r5, r9, #268	; 0x10c
     b84:	46006e51 			; <UNDEFINED> instruction: 0x46006e51
     b88:	52314146 	eorspl	r4, r1, #-2147483631	; 0x80000011
     b8c:	41534900 	cmpmi	r3, r0, lsl #18
     b90:	4d440052 	stclmi	0, cr0, [r4, #-328]	; 0xfffffeb8
     b94:	535f3141 	cmppl	pc, #1073741840	; 0x40000010
     b98:	61657274 	smcvs	22308	; 0x5724
     b9c:	495f336d 	ldmdbmi	pc, {r0, r2, r3, r5, r6, r8, r9, ip, sp}^	; <UNPREDICTABLE>
     ba0:	006e5152 	rsbeq	r5, lr, r2, asr r1
     ba4:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
     ba8:	495f3254 	ldmdbmi	pc, {r2, r4, r6, r9, ip, sp}^	; <UNPREDICTABLE>
     bac:	006e5152 	rsbeq	r5, lr, r2, asr r1
     bb0:	65646e69 	strbvs	r6, [r4, #-3689]!	; 0xfffff197
     bb4:	4e450078 	mcrmi	0, 2, r0, cr5, cr8, {3}
     bb8:	454c4241 	strbmi	r4, [ip, #-577]	; 0xfffffdbf
     bbc:	4e414300 	cdpmi	3, 4, cr4, cr1, cr0, {0}
     bc0:	3153425f 	cmpcc	r3, pc, asr r2
     bc4:	4e414300 	cdpmi	3, 4, cr4, cr1, cr0, {0}
     bc8:	3253425f 	subscc	r4, r3, #-268435451	; 0xf0000005
     bcc:	4e414300 	cdpmi	3, 4, cr4, cr1, cr0, {0}
     bd0:	6c69465f 	stclvs	6, cr4, [r9], #-380	; 0xfffffe84
     bd4:	4d726574 	cfldr64mi	mvdx6, [r2, #-464]!	; 0xfffffe30
     bd8:	0065646f 	rsbeq	r6, r5, pc, ror #8
     bdc:	614e4143 	cmpvs	lr, r3, asr #2
     be0:	69466464 	stmdbvs	r6, {r2, r5, r6, sl, sp, lr}^
     be4:	7265746c 	rsbvc	r7, r5, #108, 8	; 0x6c000000
     be8:	646e6148 	strbtvs	r6, [lr], #-328	; 0xfffffeb8
     bec:	0072656c 	rsbseq	r6, r2, ip, ror #10
     bf0:	746c6966 	strbtvc	r6, [ip], #-2406	; 0xfffff69a
     bf4:	47007265 	strmi	r7, [r0, -r5, ror #4]
     bf8:	5f4f4950 	svcpl	0x004f4950
     bfc:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0xfffff6ac
     c00:	00666544 	rsbeq	r6, r6, r4, asr #10
     c04:	314d4954 	cmpcc	sp, r4, asr r9
     c08:	5f50555f 	svcpl	0x0050555f
     c0c:	314d4954 	cmpcc	sp, r4, asr r9
     c10:	52495f30 	subpl	r5, r9, #48, 30	; 0xc0
     c14:	49006e51 	stmdbmi	r0, {r0, r4, r6, r9, sl, fp, sp, lr}
     c18:	525f4d54 	subspl	r4, pc, #84, 26	; 0x1500
     c1c:	66754278 			; <UNDEFINED> instruction: 0x66754278
     c20:	00726566 	rsbseq	r6, r2, r6, ror #10
     c24:	464e4143 	strbmi	r4, [lr], -r3, asr #2
     c28:	65746c69 	ldrbvs	r6, [r4, #-3177]!	; 0xfffff397
     c2c:	6e750072 	mrcvs	0, 3, r0, cr5, cr2, {3}
     c30:	4d6e6f69 	stclmi	15, cr6, [lr, #-420]!	; 0xfffffe5c
     c34:	006b7361 	rsbeq	r7, fp, r1, ror #6
     c38:	5f47544f 	svcpl	0x0047544f
     c3c:	455f5348 	ldrbmi	r5, [pc, #-840]	; 8fc <startup-0x1ffff704>
     c40:	4f5f3150 	svcmi	0x005f3150
     c44:	495f5455 	ldmdbmi	pc, {r0, r2, r4, r6, sl, ip, lr}^	; <UNPREDICTABLE>
     c48:	006e5152 	rsbeq	r5, lr, r2, asr r1
     c4c:	45444f4d 	strbmi	r4, [r4, #-3917]	; 0xfffff0b3
     c50:	564e0052 			; <UNDEFINED> instruction: 0x564e0052
     c54:	535f4349 	cmppl	pc, #603979777	; 0x24000001
     c58:	72507465 	subsvc	r7, r0, #1694498816	; 0x65000000
     c5c:	69726f69 	ldmdbvs	r2!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
     c60:	43007974 	movwmi	r7, #2420	; 0x974
     c64:	5f314e41 	svcpl	0x00314e41
     c68:	5f315852 	svcpl	0x00315852
     c6c:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     c70:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
     c74:	75505f4f 	ldrbvc	r5, [r0, #-3919]	; 0xfffff0b1
     c78:	555f6450 	ldrbpl	r6, [pc, #-1104]	; 830 <startup-0x1ffff7d0>
     c7c:	58450050 	stmdapl	r5, {r4, r6}^
     c80:	5f394954 	svcpl	0x00394954
     c84:	52495f35 	subpl	r5, r9, #53, 30	; 0xd4
     c88:	4e006e51 	mcrmi	14, 0, r6, cr0, cr1, {2}
     c8c:	5f434956 	svcpl	0x00434956
     c90:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xfffff1b7
     c94:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0xfffff6ac
     c98:	00666544 	rsbeq	r6, r6, r4, asr #10
     c9c:	726f6873 	rsbvc	r6, pc, #7536640	; 0x730000
     ca0:	6e752074 	mrcvs	0, 3, r2, cr5, cr4, {3}
     ca4:	6e676973 			; <UNDEFINED> instruction: 0x6e676973
     ca8:	69206465 	stmdbvs	r0!, {r0, r2, r5, r6, sl, sp, lr}
     cac:	5400746e 	strpl	r7, [r0], #-1134	; 0xfffffb92
     cb0:	5f384d49 	svcpl	0x00384d49
     cb4:	495f4343 	ldmdbmi	pc, {r0, r1, r6, r8, r9, lr}^	; <UNPREDICTABLE>
     cb8:	006e5152 	rsbeq	r5, lr, r2, asr r1
     cbc:	4f494453 	svcmi	0x00494453
     cc0:	5152495f 	cmppl	r2, pc, asr r9
     cc4:	5043006e 	subpl	r0, r3, lr, rrx
     cc8:	00524341 	subseq	r4, r2, r1, asr #6
     ccc:	52505349 	subspl	r5, r0, #603979777	; 0x24000001
     cd0:	54584500 	ldrbpl	r4, [r8], #-1280	; 0xfffffb00
     cd4:	495f3349 	ldmdbmi	pc, {r0, r3, r6, r8, r9, ip, sp}^	; <UNPREDICTABLE>
     cd8:	006e5152 	rsbeq	r5, lr, r2, asr r1
     cdc:	646e6550 	strbtvs	r6, [lr], #-1360	; 0xfffffab0
     ce0:	495f5653 	ldmdbmi	pc, {r0, r1, r4, r6, r9, sl, ip, lr}^	; <UNPREDICTABLE>
     ce4:	006e5152 	rsbeq	r5, lr, r2, asr r1
     ce8:	5f47544f 	svcpl	0x0047544f
     cec:	455f5348 	ldrbmi	r5, [pc, #-840]	; 9ac <startup-0x1ffff654>
     cf0:	495f3150 	ldmdbmi	pc, {r4, r6, r8, ip, sp}^	; <UNPREDICTABLE>
     cf4:	52495f4e 	subpl	r5, r9, #312	; 0x138
     cf8:	73006e51 	movwvc	r6, #3665	; 0xe51
     cfc:	614d7854 	cmpvs	sp, r4, asr r8
     d00:	6f426c69 	svcvs	0x00426c69
     d04:	4d440078 	stclmi	0, cr0, [r4, #-480]	; 0xfffffe20
     d08:	535f3141 	cmppl	pc, #1073741840	; 0x40000010
     d0c:	61657274 	smcvs	22308	; 0x5724
     d10:	495f376d 	ldmdbmi	pc, {r0, r2, r3, r5, r6, r8, r9, sl, ip, sp}^	; <UNPREDICTABLE>
     d14:	006e5152 	rsbeq	r5, lr, r2, asr r1
     d18:	6e695f5f 	mcrvs	15, 3, r5, cr9, cr15, {2}
     d1c:	5f323374 	svcpl	0x00323374
     d20:	53490074 	movtpl	r0, #36980	; 0x9074
     d24:	43005245 	movwmi	r5, #581	; 0x245
     d28:	465f4e41 	ldrbmi	r4, [pc], -r1, asr #28
     d2c:	65746c69 	ldrbvs	r6, [r4, #-3177]!	; 0xfffff397
     d30:	696e4972 	stmdbvs	lr!, {r1, r4, r5, r6, r8, fp, lr}^
     d34:	70795474 	rsbsvc	r5, r9, r4, ror r4
     d38:	66654465 	strbtvs	r4, [r5], -r5, ror #8
     d3c:	54445200 	strbpl	r5, [r4], #-512	; 0xfffffe00
     d40:	41430052 	qdaddmi	r0, r2, r3
     d44:	58545f4e 	ldmdapl	r4, {r1, r2, r3, r6, r8, r9, sl, fp, ip, lr}^
     d48:	54005046 	strpl	r5, [r0], #-70	; 0xffffffba
     d4c:	00525444 	subseq	r5, r2, r4, asr #8
     d50:	53746573 	cmnpl	r4, #482344960	; 0x1cc00000
     d54:	69737365 	ldmdbvs	r3!, {r0, r2, r5, r6, r8, r9, ip, sp, lr}^
     d58:	64496e6f 	strbvs	r6, [r9], #-3695	; 0xfffff191
     d5c:	414d4400 	cmpmi	sp, r0, lsl #8
     d60:	74535f32 	ldrbvc	r5, [r3], #-3890	; 0xfffff0ce
     d64:	6d616572 	cfstr64vs	mvdx6, [r1, #-456]!	; 0xfffffe38
     d68:	52495f32 	subpl	r5, r9, #50, 30	; 0xc8
     d6c:	47006e51 	smlsdmi	r0, r1, lr, r6
     d70:	5f4f4950 	svcpl	0x004f4950
     d74:	74736146 	ldrbtvc	r6, [r3], #-326	; 0xfffffeba
     d78:	6570535f 	ldrbvs	r5, [r0, #-863]!	; 0xfffffca1
     d7c:	43006465 	movwmi	r6, #1125	; 0x465
     d80:	445f4e41 	ldrbmi	r4, [pc], #-3649	; d88 <startup-0x1ffff278>
     d84:	696e4965 	stmdbvs	lr!, {r0, r2, r5, r6, r8, fp, lr}^
     d88:	41430074 	hvcmi	12292	; 0x3004
     d8c:	6c435f4e 	mcrrvs	15, 4, r5, r3, cr14
     d90:	46726165 	ldrbtmi	r6, [r2], -r5, ror #2
     d94:	0067616c 	rsbeq	r6, r7, ip, ror #2
     d98:	654d7852 	strbvs	r7, [sp, #-2130]	; 0xfffff7ae
     d9c:	67617373 			; <UNDEFINED> instruction: 0x67617373
     da0:	41430065 	cmpmi	r3, r5, rrx
     da4:	74535f4e 	ldrbvc	r5, [r3], #-3918	; 0xfffff0b2
     da8:	74637572 	strbtvc	r7, [r3], #-1394	; 0xfffffa8e
     dac:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xfffff1b7
     db0:	656c7300 	strbvs	r7, [ip, #-768]!	; 0xfffffd00
     db4:	74737065 	ldrbtvc	r7, [r3], #-101	; 0xffffff9b
     db8:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
     dbc:	4e414300 	cdpmi	3, 4, cr4, cr1, cr0, {0}
     dc0:	6c69465f 	stclvs	6, cr4, [r9], #-380	; 0xfffffe84
     dc4:	49726574 	ldmdbmi	r2!, {r2, r4, r5, r6, r8, sl, sp, lr}^
     dc8:	5374696e 	cmnpl	r4, #1802240	; 0x1b8000
     dcc:	63757274 	cmnvs	r5, #116, 4	; 0x40000007
     dd0:	41430074 	hvcmi	12292	; 0x3004
     dd4:	49465f4e 	stmdbmi	r6, {r1, r2, r3, r6, r8, r9, sl, fp, ip, lr}^
     dd8:	65524f46 	ldrbvs	r4, [r2, #-3910]	; 0xfffff0ba
     ddc:	7361656c 	cmnvc	r1, #108, 10	; 0x1b000000
     de0:	41430065 	cmpmi	r3, r5, rrx
     de4:	54545f4e 	ldrbpl	r5, [r4], #-3918	; 0xfffff0b2
     de8:	4d6d6f43 	stclmi	15, cr6, [sp, #-268]!	; 0xfffffef4
     dec:	4365646f 	cmnmi	r5, #1862270976	; 0x6f000000
     df0:	6d00646d 	cfstrsvs	mvf6, [r0, #-436]	; 0xfffffe4c
     df4:	61737365 	cmnvs	r3, r5, ror #6
     df8:	705f6567 	subsvc	r6, pc, r7, ror #10
     dfc:	69646e65 	stmdbvs	r4!, {r0, r2, r5, r6, r9, sl, fp, sp, lr}^
     e00:	4300676e 	movwmi	r6, #1902	; 0x76e
     e04:	545f4e41 	ldrbpl	r4, [pc], #-3649	; e0c <startup-0x1ffff1f4>
     e08:	736e6172 	cmnvc	lr, #-2147483620	; 0x8000001c
     e0c:	5374696d 	cmnpl	r4, #1785856	; 0x1b4000
     e10:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0xfffffe8c
     e14:	41430073 	hvcmi	12291	; 0x3003
     e18:	61425f4e 	cmpvs	r2, lr, asr #30
     e1c:	754e6b6e 	strbvc	r6, [lr, #-2926]	; 0xfffff492
     e20:	7265626d 	rsbvc	r6, r5, #-805306362	; 0xd0000006
     e24:	4e414300 	cdpmi	3, 4, cr4, cr1, cr0, {0}
     e28:	7465475f 	strbtvc	r4, [r5], #-1887	; 0xfffff8a1
     e2c:	5442534c 	strbpl	r5, [r2], #-844	; 0xfffffcb4
     e30:	736e6172 	cmnvc	lr, #-2147483620	; 0x8000001c
     e34:	4574696d 	ldrbmi	r6, [r4, #-2413]!	; 0xfffff693
     e38:	726f7272 	rsbvc	r7, pc, #536870919	; 0x20000007
     e3c:	6e756f43 	cdpvs	15, 7, cr6, cr5, cr3, {2}
     e40:	00726574 	rsbseq	r6, r2, r4, ror r5
     e44:	5f4e4143 	svcpl	0x004e4143
     e48:	4c746547 	cfldr64mi	mvdx6, [r4], #-284	; 0xfffffee4
     e4c:	45747361 	ldrbmi	r7, [r4, #-865]!	; 0xfffffc9f
     e50:	726f7272 	rsbvc	r7, pc, #536870919	; 0x20000007
     e54:	65646f43 	strbvs	r6, [r4, #-3907]!	; 0xfffff0bd
     e58:	696e4900 	stmdbvs	lr!, {r8, fp, lr}^
     e5c:	61745374 	cmnvs	r4, r4, ror r3
     e60:	00737574 	rsbseq	r7, r3, r4, ror r5
     e64:	5f4e4143 	svcpl	0x004e4143
     e68:	656b6157 	strbvs	r6, [fp, #-343]!	; 0xfffffea9
     e6c:	4e007055 	mcrmi	0, 0, r7, cr0, cr5, {2}
     e70:	74537765 	ldrbvc	r7, [r3], #-1893	; 0xfffff89b
     e74:	00657461 	rsbeq	r7, r5, r1, ror #8
     e78:	5f4e4143 	svcpl	0x004e4143
     e7c:	636e6143 	cmnvs	lr, #-1073741808	; 0xc0000010
     e80:	72546c65 	subsvc	r6, r4, #25856	; 0x6500
     e84:	6d736e61 	ldclvs	14, cr6, [r3, #-388]!	; 0xfffffe7c
     e88:	43007469 	movwmi	r7, #1129	; 0x469
     e8c:	73552f3a 	cmpvc	r5, #58, 30	; 0xe8
     e90:	2f737265 	svccs	0x00737265
     e94:	6b697245 	blvs	1a5d7b0 <startup-0x1e5a2850>
     e98:	636f442f 	cmnvs	pc, #788529152	; 0x2f000000
     e9c:	6e656d75 	mcrvs	13, 3, r6, cr5, cr5, {3}
     ea0:	442f7374 	strtmi	r7, [pc], #-884	; ea8 <startup-0x1ffff158>
     ea4:	74617461 	strbtvc	r7, [r1], #-1121	; 0xfffffb9f
     ea8:	696e6b65 	stmdbvs	lr!, {r0, r2, r5, r6, r8, r9, fp, sp, lr}^
     eac:	70746b73 	rsbsvc	r6, r4, r3, ror fp
     eb0:	656a6f72 	strbvs	r6, [sl, #-3954]!	; 0xfffff08e
     eb4:	6b2f746b 	blvs	bde068 <startup-0x1f421f98>
     eb8:	6c2f646f 	cfstrsvs	mvf6, [pc], #-444	; d04 <startup-0x1ffff2fc>
     ebc:	532f6269 			; <UNDEFINED> instruction: 0x532f6269
     ec0:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
     ec4:	6c5f3446 	cfldrdvs	mvd3, [pc], {70}	; 0x46
     ec8:	532f6269 			; <UNDEFINED> instruction: 0x532f6269
     ecc:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
     ed0:	78783446 	ldmdavc	r8!, {r1, r2, r6, sl, ip, sp}^
     ed4:	6474535f 	ldrbtvs	r5, [r4], #-863	; 0xfffffca1
     ed8:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
     edc:	445f6870 	ldrbmi	r6, [pc], #-2160	; ee4 <startup-0x1ffff11c>
     ee0:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
     ee4:	72732f72 	rsbsvc	r2, r3, #456	; 0x1c8
     ee8:	74732f63 	ldrbtvc	r2, [r3], #-3939	; 0xfffff09d
     eec:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
     ef0:	5f787834 	svcpl	0x00787834
     ef4:	2e6e6163 	powcsez	f6, f6, f3
     ef8:	41430063 	cmpmi	r3, r3, rrx
     efc:	6e495f4e 	cdpvs	15, 4, cr5, cr9, cr14, {2}
     f00:	74537469 	ldrbvc	r7, [r3], #-1129	; 0xfffffb97
     f04:	74637572 	strbtvc	r7, [r3], #-1394	; 0xfffffa8e
     f08:	4d785400 	cfldrdmi	mvd5, [r8, #-0]
     f0c:	61737365 	cmnvs	r3, r5, ror #6
     f10:	43006567 	movwmi	r6, #1383	; 0x567
     f14:	4d5f4e41 	ldclmi	14, cr4, [pc, #-260]	; e18 <startup-0x1ffff1e8>
     f18:	61737365 	cmnvs	r3, r5, ror #6
     f1c:	65506567 	ldrbvs	r6, [r0, #-1383]	; 0xfffffa99
     f20:	6e69646e 	cdpvs	4, 6, cr6, cr9, cr14, {3}
     f24:	41430067 	cmpmi	r3, r7, rrx
     f28:	6c535f4e 	mrrcvs	15, 4, r5, r3, cr14
     f2c:	53657661 	cmnpl	r5, #101711872	; 0x6100000
     f30:	74726174 	ldrbtvc	r6, [r2], #-372	; 0xfffffe8c
     f34:	6b6e6142 	blvs	1b99444 <startup-0x1e466bbc>
     f38:	4e414300 	cdpmi	3, 4, cr4, cr1, cr0, {0}
     f3c:	65704f5f 	ldrbvs	r4, [r0, #-3935]!	; 0xfffff0a1
     f40:	69746172 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, sp, lr}^
     f44:	6f4d676e 	svcvs	0x004d676e
     f48:	65526564 	ldrbvs	r6, [r2, #-1380]	; 0xfffffa9c
     f4c:	73657571 	cmnvc	r5, #473956352	; 0x1c400000
     f50:	69740074 	ldmdbvs	r4!, {r2, r4, r5, r6}^
     f54:	756f656d 	strbvc	r6, [pc, #-1389]!	; 9ef <startup-0x1ffff611>
     f58:	41430074 	hvcmi	12292	; 0x3004
     f5c:	72545f4e 	subsvc	r5, r4, #312	; 0x138
     f60:	6d736e61 	ldclvs	14, cr6, [r3, #-388]!	; 0xfffffe7c
     f64:	43007469 	movwmi	r7, #1129	; 0x469
     f68:	495f4e41 	ldmdbmi	pc, {r0, r6, r9, sl, fp, lr}^	; <UNPREDICTABLE>
     f6c:	41430054 	qdaddmi	r0, r4, r3
     f70:	6e495f4e 	cdpvs	15, 4, cr5, cr9, cr14, {2}
     f74:	43007469 	movwmi	r7, #1129	; 0x469
     f78:	535f4e41 	cmppl	pc, #1040	; 0x410
     f7c:	7065656c 	rsbvc	r6, r5, ip, ror #10
     f80:	5f744900 	svcpl	0x00744900
     f84:	00746942 	rsbseq	r6, r4, r2, asr #18
     f88:	5f4e4143 	svcpl	0x004e4143
     f8c:	49746547 	ldmdbmi	r4!, {r0, r1, r2, r6, r8, sl, sp, lr}^
     f90:	61745354 	cmnvs	r4, r4, asr r3
     f94:	00737574 	rsbseq	r7, r3, r4, ror r5
     f98:	5f4e4143 	svcpl	0x004e4143
     f9c:	47414c46 	strbmi	r4, [r1, -r6, asr #24]
     fa0:	69617700 	stmdbvs	r1!, {r8, r9, sl, ip, sp, lr}^
     fa4:	6c735f74 	ldclvs	15, cr5, [r3], #-464	; 0xfffffe30
     fa8:	46006b61 	strmi	r6, [r0], -r1, ror #22
     fac:	4e4f4649 	cdpmi	6, 4, cr4, cr15, cr9, {2}
     fb0:	65626d75 	strbvs	r6, [r2, #-3445]!	; 0xfffff28b
     fb4:	72650072 	rsbvc	r0, r5, #114	; 0x72
     fb8:	63726f72 	cmnvs	r2, #456	; 0x1c8
     fbc:	0065646f 	rsbeq	r6, r5, pc, ror #8
     fc0:	646e6570 	strbtvs	r6, [lr], #-1392	; 0xfffffa90
     fc4:	62676e69 	rsbvs	r6, r7, #1680	; 0x690
     fc8:	74737469 	ldrbtvc	r7, [r3], #-1129	; 0xfffffb97
     fcc:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
     fd0:	4e414300 	cdpmi	3, 4, cr4, cr1, cr0, {0}
     fd4:	6765525f 			; <UNDEFINED> instruction: 0x6765525f
     fd8:	4e414300 	cdpmi	3, 4, cr4, cr1, cr0, {0}
     fdc:	4742445f 	smlsldmi	r4, r2, pc, r4	; <UNPREDICTABLE>
     fe0:	65657246 	strbvs	r7, [r5, #-582]!	; 0xfffffdba
     fe4:	4300657a 	movwmi	r6, #1402	; 0x57a
     fe8:	4f5f4e41 	svcmi	0x005f4e41
     fec:	61726570 	cmnvs	r2, r0, ror r5
     ff0:	676e6974 			; <UNDEFINED> instruction: 0x676e6974
     ff4:	65646f4d 	strbvs	r6, [r4, #-3917]!	; 0xfffff0b3
     ff8:	616c6600 	cmnvs	ip, r0, lsl #12
     ffc:	706d7467 	rsbvc	r7, sp, r7, ror #8
    1000:	4e414300 	cdpmi	3, 4, cr4, cr1, cr0, {0}
    1004:	7465475f 	strbtvc	r4, [r5], #-1887	; 0xfffff8a1
    1008:	67616c46 	strbvs	r6, [r1, -r6, asr #24]!
    100c:	74617453 	strbtvc	r7, [r1], #-1107	; 0xfffffbad
    1010:	43007375 	movwmi	r7, #885	; 0x375
    1014:	495f4e41 	ldmdbmi	pc, {r0, r6, r9, sl, fp, lr}^	; <UNPREDICTABLE>
    1018:	6e6f4354 	mcrvs	3, 3, r4, cr15, cr4, {2}
    101c:	00676966 	rsbeq	r6, r7, r6, ror #18
    1020:	784e4143 	stmdavc	lr, {r0, r1, r6, r8, lr}^
    1024:	4e414300 	cdpmi	3, 4, cr4, cr1, cr0, {0}
    1028:	6365525f 	cmnvs	r5, #-268435451	; 0xf0000005
    102c:	65766965 	ldrbvs	r6, [r6, #-2405]!	; 0xfffff69b
    1030:	61725400 	cmnvs	r2, r0, lsl #8
    1034:	696d736e 	stmdbvs	sp!, {r1, r2, r3, r5, r6, r8, r9, ip, sp, lr}^
    1038:	69614d74 	stmdbvs	r1!, {r2, r4, r5, r6, r8, sl, fp, lr}^
    103c:	786f626c 	stmdavc	pc!, {r2, r3, r5, r6, r9, sp, lr}^	; <UNPREDICTABLE>
    1040:	65684300 	strbvs	r4, [r8, #-768]!	; 0xfffffd00
    1044:	54496b63 	strbpl	r6, [r9], #-2915	; 0xfffff49d
    1048:	74617453 	strbtvc	r7, [r1], #-1107	; 0xfffffbad
    104c:	43007375 	movwmi	r7, #885	; 0x375
    1050:	435f4e41 	cmpmi	pc, #1040	; 0x410
    1054:	7261656c 	rsbvc	r6, r1, #108, 10	; 0x1b000000
    1058:	65505449 	ldrbvs	r5, [r0, #-1097]	; 0xfffffbb7
    105c:	6e69646e 	cdpvs	4, 6, cr6, cr9, cr14, {3}
    1060:	74694267 	strbtvc	r4, [r9], #-615	; 0xfffffd99
    1064:	61727400 	cmnvs	r2, r0, lsl #8
    1068:	696d736e 	stmdbvs	sp!, {r1, r2, r3, r5, r6, r8, r9, ip, sp, lr}^
    106c:	616d5f74 	smcvs	54772	; 0xd5f4
    1070:	6f626c69 	svcvs	0x00626c69
    1074:	41430078 	hvcmi	12296	; 0x3008
    1078:	65475f4e 	strbvs	r5, [r7, #-3918]	; 0xfffff0b2
    107c:	63655274 	cmnvs	r5, #116, 4	; 0x40000007
    1080:	65766965 	ldrbvs	r6, [r6, #-2405]!	; 0xfffff69b
    1084:	6f727245 	svcvs	0x00727245
    1088:	756f4372 	strbvc	r4, [pc, #-882]!	; d1e <startup-0x1ffff2e2>
    108c:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
    1090:	6c696600 	stclvs	6, cr6, [r9], #-0
    1094:	5f726574 	svcpl	0x00726574
    1098:	626d756e 	rsbvs	r7, sp, #461373440	; 0x1b800000
    109c:	625f7265 	subsvs	r7, pc, #1342177286	; 0x50000006
    10a0:	705f7469 	subsvc	r7, pc, r9, ror #8
    10a4:	7700736f 	strvc	r7, [r0, -pc, ror #6]
    10a8:	75656b61 	strbvc	r6, [r5, #-2913]!	; 0xfffff49f
    10ac:	61747370 	cmnvs	r4, r0, ror r3
    10b0:	00737574 	rsbseq	r7, r3, r4, ror r5
    10b4:	5f4e4143 	svcpl	0x004e4143
    10b8:	746c6946 	strbtvc	r6, [ip], #-2374	; 0xfffff6ba
    10bc:	6e497265 	cdpvs	2, 4, cr7, cr9, cr5, {3}
    10c0:	77007469 	strvc	r7, [r0, -r9, ror #8]
    10c4:	5f746961 	svcpl	0x00746961
    10c8:	006b6361 	rsbeq	r6, fp, r1, ror #6
    10cc:	706e6970 	rsbvc	r6, lr, r0, ror r9
    10d0:	4200736f 	andmi	r7, r0, #-1140850687	; 0xbc000001
    10d4:	535f7469 	cmppl	pc, #1761607680	; 0x69000000
    10d8:	47005445 	strmi	r5, [r0, -r5, asr #8]
    10dc:	5f4f4950 	svcpl	0x004f4950
    10e0:	64616552 	strbtvs	r6, [r1], #-1362	; 0xfffffaae
    10e4:	7074754f 	rsbsvc	r7, r4, pc, asr #10
    10e8:	61447475 	hvcvs	18245	; 0x4745
    10ec:	47006174 	smlsdxmi	r0, r4, r1, r6
    10f0:	5f4f4950 	svcpl	0x004f4950
    10f4:	74004641 	strvc	r4, [r0], #-1601	; 0xfffff9bf
    10f8:	00706d65 	rsbseq	r6, r0, r5, ror #26
    10fc:	4f495047 	svcmi	0x00495047
    1100:	7274535f 	rsbsvc	r5, r4, #2080374785	; 0x7c000001
    1104:	49746375 	ldmdbmi	r4!, {r0, r2, r4, r5, r6, r8, r9, sp, lr}^
    1108:	0074696e 	rsbseq	r6, r4, lr, ror #18
    110c:	56746942 	ldrbtpl	r6, [r4], -r2, asr #18
    1110:	42006c61 	andmi	r6, r0, #24832	; 0x6100
    1114:	525f7469 	subspl	r7, pc, #1761607680	; 0x69000000
    1118:	54455345 	strbpl	r5, [r5], #-837	; 0xfffffcbb
    111c:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
    1120:	72575f4f 	subsvc	r5, r7, #316	; 0x13c
    1124:	42657469 	rsbmi	r7, r5, #1761607680	; 0x69000000
    1128:	47007469 	strmi	r7, [r0, -r9, ror #8]
    112c:	5f4f4950 	svcpl	0x004f4950
    1130:	42746553 	rsbsmi	r6, r4, #348127232	; 0x14c00000
    1134:	00737469 	rsbseq	r7, r3, r9, ror #8
    1138:	4f495047 	svcmi	0x00495047
    113c:	696e495f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, lr}^
    1140:	50470074 	subpl	r0, r7, r4, ror r0
    1144:	525f4f49 	subspl	r4, pc, #292	; 0x124
    1148:	74657365 	strbtvc	r7, [r5], #-869	; 0xfffffc9b
    114c:	73746942 	cmnvc	r4, #1081344	; 0x108000
    1150:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
    1154:	65445f4f 	strbvs	r5, [r4, #-3919]	; 0xfffff0b1
    1158:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xfffff1b7
    115c:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
    1160:	65525f4f 	ldrbvs	r5, [r2, #-3919]	; 0xfffff0b1
    1164:	6e496461 	cdpvs	4, 4, cr6, cr9, cr1, {3}
    1168:	44747570 	ldrbtmi	r7, [r4], #-1392	; 0xfffffa90
    116c:	42617461 	rsbmi	r7, r1, #1627389952	; 0x61000000
    1170:	47007469 	strmi	r7, [r0, -r9, ror #8]
    1174:	5f4f4950 	svcpl	0x004f4950
    1178:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xfffff1b7
    117c:	75727453 	ldrbvc	r7, [r2, #-1107]!	; 0xfffffbad
    1180:	50007463 	andpl	r7, r0, r3, ror #8
    1184:	5674726f 	ldrbtpl	r7, [r4], -pc, ror #4
    1188:	47006c61 	strmi	r6, [r0, -r1, ror #24]
    118c:	5f4f4950 	svcpl	0x004f4950
    1190:	536e6950 	cmnpl	lr, #80, 18	; 0x140000
    1194:	6372756f 	cmnvs	r2, #465567744	; 0x1bc00000
    1198:	50470065 	subpl	r0, r7, r5, rrx
    119c:	525f4f49 	subspl	r4, pc, #292	; 0x124
    11a0:	49646165 	stmdbmi	r4!, {r0, r2, r5, r6, r8, sp, lr}^
    11a4:	7475706e 	ldrbtvc	r7, [r5], #-110	; 0xffffff92
    11a8:	61746144 	cmnvs	r4, r4, asr #2
    11ac:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
    11b0:	69505f4f 	ldmdbvs	r0, {r0, r1, r2, r3, r6, r8, r9, sl, fp, ip, lr}^
    11b4:	636f4c6e 	cmnvs	pc, #28160	; 0x6e00
    11b8:	6e6f436b 	cdpvs	3, 6, cr4, cr15, cr11, {3}
    11bc:	00676966 	rsbeq	r6, r7, r6, ror #18
    11c0:	41746942 	cmnmi	r4, r2, asr #18
    11c4:	6f697463 	svcvs	0x00697463
    11c8:	7563006e 	strbvc	r0, [r3, #-110]!	; 0xffffff92
    11cc:	6e657272 	mcrvs	2, 3, r7, cr5, cr2, {3}
    11d0:	6e697074 	mcrvs	0, 3, r7, cr9, cr4, {3}
    11d4:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
    11d8:	72575f4f 	subsvc	r5, r7, #316	; 0x13c
    11dc:	00657469 	rsbeq	r7, r5, r9, ror #8
    11e0:	4f495047 	svcmi	0x00495047
    11e4:	3a430078 	bcc	10c13cc <startup-0x1ef3ec34>
    11e8:	6573552f 	ldrbvs	r5, [r3, #-1327]!	; 0xfffffad1
    11ec:	452f7372 	strmi	r7, [pc, #-882]!	; e82 <startup-0x1ffff17e>
    11f0:	2f6b6972 	svccs	0x006b6972
    11f4:	75636f44 	strbvc	r6, [r3, #-3908]!	; 0xfffff0bc
    11f8:	746e656d 	strbtvc	r6, [lr], #-1389	; 0xfffffa93
    11fc:	61442f73 	hvcvs	17139	; 0x42f3
    1200:	65746174 	ldrbvs	r6, [r4, #-372]!	; 0xfffffe8c
    1204:	73696e6b 	cmnvc	r9, #1712	; 0x6b0
    1208:	7270746b 	rsbsvc	r7, r0, #1795162112	; 0x6b000000
    120c:	6b656a6f 	blvs	195bbd0 <startup-0x1e6a4430>
    1210:	6f6b2f74 	svcvs	0x006b2f74
    1214:	696c2f64 	stmdbvs	ip!, {r2, r5, r6, r8, r9, sl, fp, sp}^
    1218:	54532f62 	ldrbpl	r2, [r3], #-3938	; 0xfffff09e
    121c:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
    1220:	696c5f34 	stmdbvs	ip!, {r2, r4, r5, r8, r9, sl, fp, ip, lr}^
    1224:	54532f62 	ldrbpl	r2, [r3], #-3938	; 0xfffff09e
    1228:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
    122c:	5f787834 	svcpl	0x00787834
    1230:	50647453 	rsbpl	r7, r4, r3, asr r4
    1234:	70697265 	rsbvc	r7, r9, r5, ror #4
    1238:	72445f68 	subvc	r5, r4, #104, 30	; 0x1a0
    123c:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
    1240:	6372732f 	cmnvs	r2, #-1140850688	; 0xbc000000
    1244:	6d74732f 	ldclvs	3, cr7, [r4, #-188]!	; 0xffffff44
    1248:	34663233 	strbtcc	r3, [r6], #-563	; 0xfffffdcd
    124c:	675f7878 			; <UNDEFINED> instruction: 0x675f7878
    1250:	2e6f6970 			; <UNDEFINED> instruction: 0x2e6f6970
    1254:	50470063 	subpl	r0, r7, r3, rrx
    1258:	545f4f49 	ldrbpl	r4, [pc], #-3913	; 1260 <startup-0x1fffeda0>
    125c:	6c67676f 	stclvs	7, cr6, [r7], #-444	; 0xfffffe44
    1260:	74694265 	strbtvc	r4, [r9], #-613	; 0xfffffd9b
    1264:	65740073 	ldrbvs	r0, [r4, #-115]!	; 0xffffff8d
    1268:	325f706d 	subscc	r7, pc, #109	; 0x6d
    126c:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
    1270:	69505f4f 	ldmdbvs	r0, {r0, r1, r2, r3, r6, r8, r9, sl, fp, ip, lr}^
    1274:	4346416e 	movtmi	r4, #24942	; 0x616e
    1278:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    127c:	50470067 	subpl	r0, r7, r7, rrx
    1280:	525f4f49 	subspl	r4, pc, #292	; 0x124
    1284:	4f646165 	svcmi	0x00646165
    1288:	75707475 	ldrbvc	r7, [r0, #-1141]!	; 0xfffffb8b
    128c:	74614474 	strbtvc	r4, [r1], #-1140	; 0xfffffb8c
    1290:	74694261 	strbtvc	r4, [r9], #-609	; 0xfffffd9f
    1294:	6e657300 	cdpvs	3, 6, cr7, cr5, cr0, {0}
    1298:	54726f73 	ldrbtpl	r6, [r2], #-3955	; 0xfffff08d
    129c:	00657079 	rsbeq	r7, r5, r9, ror r0
    12a0:	552f3a43 	strpl	r3, [pc, #-2627]!	; 865 <startup-0x1ffff79b>
    12a4:	73726573 	cmnvc	r2, #482344960	; 0x1cc00000
    12a8:	6972452f 	ldmdbvs	r2!, {r0, r1, r2, r3, r5, r8, sl, lr}^
    12ac:	6f442f6b 	svcvs	0x00442f6b
    12b0:	656d7563 	strbvs	r7, [sp, #-1379]!	; 0xfffffa9d
    12b4:	2f73746e 	svccs	0x0073746e
    12b8:	61746144 	cmnvs	r4, r4, asr #2
    12bc:	6e6b6574 	mcrvs	5, 3, r6, cr11, cr4, {3}
    12c0:	746b7369 	strbtvc	r7, [fp], #-873	; 0xfffffc97
    12c4:	6a6f7270 	bvs	1bddc8c <startup-0x1e422374>
    12c8:	2f746b65 	svccs	0x00746b65
    12cc:	2f646f6b 	svccs	0x00646f6b
    12d0:	2f62696c 	svccs	0x0062696c
    12d4:	454e4143 	strbmi	r4, [lr, #-323]	; 0xfffffebd
    12d8:	646f636e 	strbtvs	r6, [pc], #-878	; 12e0 <startup-0x1fffed20>
    12dc:	63654465 	cmnvs	r5, #1694498816	; 0x65000000
    12e0:	2e65646f 	cdpcs	4, 6, cr6, cr5, cr15, {3}
    12e4:	65640063 	strbvs	r0, [r4, #-99]!	; 0xffffff9d
    12e8:	65636976 	strbvs	r6, [r3, #-2422]!	; 0xfffff68a
    12ec:	7079745f 	rsbsvc	r7, r9, pc, asr r4
    12f0:	61760065 	cmnvs	r6, r5, rrx
    12f4:	5f65756c 	svcpl	0x0065756c
    12f8:	6e650030 	mcrvs	0, 3, r0, cr5, cr0, {1}
    12fc:	65646f63 	strbvs	r6, [r4, #-3939]!	; 0xfffff09d
    1300:	746f6d5f 	strbtvc	r6, [pc], #-3423	; 1308 <startup-0x1fffecf8>
    1304:	5f6e6f69 	svcpl	0x006e6f69
    1308:	6d72616c 	ldfvse	f6, [r2, #-432]!	; 0xfffffe50
    130c:	67736d5f 			; <UNDEFINED> instruction: 0x67736d5f
    1310:	6e697500 	cdpvs	5, 6, cr7, cr9, cr0, {0}
    1314:	44497469 	strbmi	r7, [r9], #-1129	; 0xfffffb97
    1318:	74616400 	strbtvc	r6, [r1], #-1024	; 0xfffffc00
    131c:	6f705f61 	svcvs	0x00705f61
    1320:	65746e69 	ldrbvs	r6, [r4, #-3689]!	; 0xfffff197
    1324:	6e650072 	mcrvs	0, 3, r0, cr5, cr2, {3}
    1328:	65646f63 	strbvs	r6, [r4, #-3939]!	; 0xfffff09d
    132c:	6f6f645f 	svcvs	0x006f645f
    1330:	69745f72 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    1334:	635f656d 	cmpvs	pc, #457179136	; 0x1b400000
    1338:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    133c:	6e650067 	cdpvs	0, 6, cr0, cr5, cr7, {3}
    1340:	65646f63 	strbvs	r6, [r4, #-3939]!	; 0xfffff09d
    1344:	7373615f 	cmnvc	r3, #-1073741801	; 0xc0000017
    1348:	5f6e6769 	svcpl	0x006e6769
    134c:	72006469 	andvc	r6, r0, #1761607680	; 0x69000000
    1350:	65757165 	ldrbvs	r7, [r5, #-357]!	; 0xfffffe9b
    1354:	64007473 	strvs	r7, [r0], #-1139	; 0xfffffb8d
    1358:	00747369 	rsbseq	r7, r4, r9, ror #6
    135c:	726f6f64 	rsbvc	r6, pc, #100, 30	; 0x190
    1360:	5f64695f 	svcpl	0x0064695f
    1364:	6f740030 	svcvs	0x00740030
    1368:	6e65635f 	mcrvs	3, 3, r6, cr5, cr15, {2}
    136c:	6c617274 	sfmvs	f7, 2, [r1], #-464	; 0xfffffe30
    1370:	636f6c00 	cmnvs	pc, #0, 24
    1374:	0064656b 	rsbeq	r6, r4, fp, ror #10
    1378:	726f6f64 	rsbvc	r6, pc, #100, 30	; 0x190
    137c:	5f64695f 	svcpl	0x0064695f
    1380:	65640031 	strbvs	r0, [r4, #-49]!	; 0xffffffcf
    1384:	65646f63 	strbvs	r6, [r4, #-3939]!	; 0xfffff09d
    1388:	6d65745f 	cfstrdvs	mvd7, [r5, #-380]!	; 0xfffffe84
    138c:	00444970 	subeq	r4, r4, r0, ror r9
    1390:	6f636564 	svcvs	0x00636564
    1394:	645f6564 	ldrbvs	r6, [pc], #-1380	; 139c <startup-0x1fffec64>
    1398:	5f726f6f 	svcpl	0x00726f6f
    139c:	666e6f63 	strbtvs	r6, [lr], -r3, ror #30
    13a0:	6d5f6769 	ldclvs	7, cr6, [pc, #-420]	; 1204 <startup-0x1fffedfc>
    13a4:	65006773 	strvs	r6, [r0, #-1907]	; 0xfffff88d
    13a8:	646f636e 	strbtvs	r6, [pc], #-878	; 13b0 <startup-0x1fffec50>
    13ac:	69645f65 	stmdbvs	r4!, {r0, r2, r5, r6, r8, r9, sl, fp, ip, lr}^
    13b0:	6e617473 	mcrvs	4, 3, r7, cr1, cr3, {3}
    13b4:	635f6563 	cmpvs	pc, #415236096	; 0x18c00000
    13b8:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    13bc:	6e650067 	cdpvs	0, 6, cr0, cr5, cr7, {3}
    13c0:	65646f63 	strbvs	r6, [r4, #-3939]!	; 0xfffff09d
    13c4:	7165725f 	cmnvc	r5, pc, asr r2
    13c8:	74736575 	ldrbtvc	r6, [r3], #-1397	; 0xfffffa8b
    13cc:	0064695f 	rsbeq	r6, r4, pc, asr r9
    13d0:	6f636564 	svcvs	0x00636564
    13d4:	495f6564 	ldmdbmi	pc, {r2, r5, r6, r8, sl, sp, lr}^	; <UNPREDICTABLE>
    13d8:	61760044 	cmnvs	r6, r4, asr #32
    13dc:	5f65756c 	svcpl	0x0065756c
    13e0:	65740031 	ldrbvs	r0, [r4, #-49]!	; 0xffffffcf
    13e4:	695f706d 	ldmdbvs	pc, {r0, r2, r3, r5, r6, ip, sp, lr}^	; <UNPREDICTABLE>
    13e8:	69740064 	ldmdbvs	r4!, {r2, r5, r6}^
    13ec:	305f656d 	subscc	r6, pc, sp, ror #10
    13f0:	6d697400 	cfstrdvs	mvd7, [r9, #-0]
    13f4:	00315f65 	eorseq	r5, r1, r5, ror #30
    13f8:	6f636e65 	svcvs	0x00636e65
    13fc:	645f6564 	ldrbvs	r6, [pc], #-1380	; 1404 <startup-0x1fffebfc>
    1400:	5f726f6f 	svcpl	0x00726f6f
    1404:	6d72616c 	ldfvse	f6, [r2, #-432]!	; 0xfffffe50
    1408:	67736d5f 			; <UNDEFINED> instruction: 0x67736d5f
    140c:	474e5200 	strbmi	r5, [lr, -r0, lsl #4]
    1410:	0054495f 	subseq	r4, r4, pc, asr r9
    1414:	5f474e52 	svcpl	0x00474e52
    1418:	6f435449 	svcvs	0x00435449
    141c:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    1420:	474e5200 	strbmi	r5, [lr, -r0, lsl #4]
    1424:	646d435f 	strbtvs	r4, [sp], #-863	; 0xfffffca1
    1428:	474e5200 	strbmi	r5, [lr, -r0, lsl #4]
    142c:	7465475f 	strbtvc	r4, [r5], #-1887	; 0xfffff8a1
    1430:	646e6152 	strbtvs	r6, [lr], #-338	; 0xfffffeae
    1434:	754e6d6f 	strbvc	r6, [lr, #-3439]	; 0xfffff291
    1438:	7265626d 	rsbvc	r6, r5, #-805306362	; 0xd0000006
    143c:	474e5200 	strbmi	r5, [lr, -r0, lsl #4]
    1440:	4965445f 	stmdbmi	r5!, {r0, r1, r2, r3, r4, r6, sl, lr}^
    1444:	0074696e 	rsbseq	r6, r4, lr, ror #18
    1448:	5f474e52 	svcpl	0x00474e52
    144c:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0xfffff6ac
    1450:	00666544 	rsbeq	r6, r6, r4, asr #10
    1454:	5f474e52 	svcpl	0x00474e52
    1458:	47414c46 	strbmi	r4, [r1, -r6, asr #24]
    145c:	474e5200 	strbmi	r5, [lr, -r0, lsl #4]
    1460:	656c435f 	strbvs	r4, [ip, #-863]!	; 0xfffffca1
    1464:	6c467261 	sfmvs	f7, 2, [r6], {97}	; 0x61
    1468:	52006761 	andpl	r6, r0, #25427968	; 0x1840000
    146c:	475f474e 	ldrbmi	r4, [pc, -lr, asr #14]
    1470:	54497465 	strbpl	r7, [r9], #-1125	; 0xfffffb9b
    1474:	74617453 	strbtvc	r7, [r1], #-1107	; 0xfffffbad
    1478:	43007375 	movwmi	r7, #885	; 0x375
    147c:	73552f3a 	cmpvc	r5, #58, 30	; 0xe8
    1480:	2f737265 	svccs	0x00737265
    1484:	6b697245 	blvs	1a5dda0 <startup-0x1e5a2260>
    1488:	636f442f 	cmnvs	pc, #788529152	; 0x2f000000
    148c:	6e656d75 	mcrvs	13, 3, r6, cr5, cr5, {3}
    1490:	442f7374 	strtmi	r7, [pc], #-884	; 1498 <startup-0x1fffeb68>
    1494:	74617461 	strbtvc	r7, [r1], #-1121	; 0xfffffb9f
    1498:	696e6b65 	stmdbvs	lr!, {r0, r2, r5, r6, r8, r9, fp, sp, lr}^
    149c:	70746b73 	rsbsvc	r6, r4, r3, ror fp
    14a0:	656a6f72 	strbvs	r6, [sl, #-3954]!	; 0xfffff08e
    14a4:	6b2f746b 	blvs	bde658 <startup-0x1f4219a8>
    14a8:	6c2f646f 	cfstrsvs	mvf6, [pc], #-444	; 12f4 <startup-0x1fffed0c>
    14ac:	532f6269 			; <UNDEFINED> instruction: 0x532f6269
    14b0:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
    14b4:	6c5f3446 	cfldrdvs	mvd3, [pc], {70}	; 0x46
    14b8:	532f6269 			; <UNDEFINED> instruction: 0x532f6269
    14bc:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
    14c0:	78783446 	ldmdavc	r8!, {r1, r2, r6, sl, ip, sp}^
    14c4:	6474535f 	ldrbtvs	r5, [r4], #-863	; 0xfffffca1
    14c8:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
    14cc:	445f6870 	ldrbmi	r6, [pc], #-2160	; 14d4 <startup-0x1fffeb2c>
    14d0:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
    14d4:	72732f72 	rsbsvc	r2, r3, #456	; 0x1c8
    14d8:	74732f63 	ldrbtvc	r2, [r3], #-3939	; 0xfffff09d
    14dc:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
    14e0:	5f787834 	svcpl	0x00787834
    14e4:	2e676e72 	mcrcs	14, 3, r6, cr7, cr2, {3}
    14e8:	4e520063 	cdpmi	0, 5, cr0, cr2, cr3, {3}
    14ec:	6c435f47 	mcrrvs	15, 4, r5, r3, cr7
    14f0:	49726165 	ldmdbmi	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    14f4:	6e655054 	mcrvs	0, 3, r5, cr5, cr4, {2}
    14f8:	676e6964 	strbvs	r6, [lr, -r4, ror #18]!
    14fc:	00746942 	rsbseq	r6, r4, r2, asr #18
    1500:	5f474e52 	svcpl	0x00474e52
    1504:	46746547 	ldrbtmi	r6, [r4], -r7, asr #10
    1508:	5367616c 	cmnpl	r7, #108, 2
    150c:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0xfffffe8c
    1510:	79530073 	ldmdbvc	r3, {r0, r1, r4, r5, r6}^
    1514:	63695473 	cmnvs	r9, #1929379840	; 0x73000000
    1518:	4c435f6b 	mcrrmi	15, 6, r5, r3, cr11
    151c:	756f534b 	strbvc	r5, [pc, #-843]!	; 11d9 <startup-0x1fffee27>
    1520:	00656372 	rsbeq	r6, r5, r2, ror r3
    1524:	4349564e 	movtmi	r5, #38478	; 0x964e
    1528:	696e495f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, lr}^
    152c:	72745374 	rsbsvc	r5, r4, #116, 6	; 0xd0000001
    1530:	00746375 	rsbseq	r6, r4, r5, ror r3
    1534:	4349564e 	movtmi	r5, #38478	; 0x964e
    1538:	6972505f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, ip, lr}^
    153c:	7469726f 	strbtvc	r7, [r9], #-623	; 0xfffffd91
    1540:	6f724779 	svcvs	0x00724779
    1544:	4e007075 	mcrmi	0, 0, r7, cr0, cr5, {3}
    1548:	5f434956 	svcpl	0x00434956
    154c:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xfffff1b7
    1550:	706d7400 	rsbvc	r7, sp, r0, lsl #8
    1554:	00657270 	rsbeq	r7, r5, r0, ror r2
    1558:	7366664f 	cmnvc	r6, #82837504	; 0x4f00000
    155c:	43007465 	movwmi	r7, #1125	; 0x465
    1560:	004c5254 	subeq	r5, ip, r4, asr r2
    1564:	4349564e 	movtmi	r5, #38478	; 0x964e
    1568:	7465535f 	strbtvc	r5, [r5], #-863	; 0xfffffca1
    156c:	74636556 	strbtvc	r6, [r3], #-1366	; 0xfffffaaa
    1570:	6154726f 	cmpvs	r4, pc, ror #4
    1574:	00656c62 	rsbeq	r6, r5, r2, ror #24
    1578:	494c4143 	stmdbmi	ip, {r0, r1, r6, r8, lr}^
    157c:	6d740042 	ldclvs	0, cr0, [r4, #-264]!	; 0xfffffef8
    1580:	62757370 	rsbsvs	r7, r5, #112, 6	; 0xc0000001
    1584:	49564e00 	ldmdbmi	r6, {r9, sl, fp, lr}^
    1588:	79535f43 	ldmdbvc	r3, {r0, r1, r6, r8, r9, sl, fp, ip, lr}^
    158c:	6d657473 	cfstrdvs	mvd7, [r5, #-460]!	; 0xfffffe34
    1590:	6f43504c 	svcvs	0x0043504c
    1594:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    1598:	73795300 	cmnvc	r9, #0, 6
    159c:	6b636954 	blvs	18dbaf4 <startup-0x1e72450c>
    15a0:	4b4c435f 	blmi	1312324 <startup-0x1ecedcdc>
    15a4:	72756f53 	rsbsvc	r6, r5, #332	; 0x14c
    15a8:	6f436563 	svcvs	0x00436563
    15ac:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    15b0:	73795300 	cmnvc	r9, #0, 6
    15b4:	6b636954 	blvs	18dbb0c <startup-0x1e7244f4>
    15b8:	7079545f 	rsbsvc	r5, r9, pc, asr r4
    15bc:	6d740065 	ldclvs	0, cr0, [r4, #-404]!	; 0xfffffe6c
    15c0:	69727070 	ldmdbvs	r2!, {r4, r5, r6, ip, sp, lr}^
    15c4:	7469726f 	strbtvc	r7, [r9], #-623	; 0xfffffd91
    15c8:	564e0079 			; <UNDEFINED> instruction: 0x564e0079
    15cc:	565f4349 	ldrbpl	r4, [pc], -r9, asr #6
    15d0:	54746365 	ldrbtpl	r6, [r4], #-869	; 0xfffffc9b
    15d4:	4c006261 	sfmmi	f6, 4, [r0], {97}	; 0x61
    15d8:	0044414f 	subeq	r4, r4, pc, asr #2
    15dc:	50776f4c 	rsbspl	r6, r7, ip, asr #30
    15e0:	7265776f 	rsbvc	r7, r5, #29097984	; 0x1bc0000
    15e4:	65646f4d 	strbvs	r6, [r4, #-3917]!	; 0xfffff0b3
    15e8:	2f3a4300 	svccs	0x003a4300
    15ec:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
    15f0:	72452f73 	subvc	r2, r5, #460	; 0x1cc
    15f4:	442f6b69 	strtmi	r6, [pc], #-2921	; 15fc <startup-0x1fffea04>
    15f8:	6d75636f 	ldclvs	3, cr6, [r5, #-444]!	; 0xfffffe44
    15fc:	73746e65 	cmnvc	r4, #1616	; 0x650
    1600:	7461442f 	strbtvc	r4, [r1], #-1071	; 0xfffffbd1
    1604:	6b657461 	blvs	195e790 <startup-0x1e6a1870>
    1608:	6b73696e 	blvs	1cdbbc8 <startup-0x1e324438>
    160c:	6f727074 	svcvs	0x00727074
    1610:	746b656a 	strbtvc	r6, [fp], #-1386	; 0xfffffa96
    1614:	646f6b2f 	strbtvs	r6, [pc], #-2863	; 161c <startup-0x1fffe9e4>
    1618:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    161c:	4d54532f 	ldclmi	3, cr5, [r4, #-188]	; 0xffffff44
    1620:	34463233 	strbcc	r3, [r6], #-563	; 0xfffffdcd
    1624:	62696c5f 	rsbvs	r6, r9, #24320	; 0x5f00
    1628:	4d54532f 	ldclmi	3, cr5, [r4, #-188]	; 0xffffff44
    162c:	34463233 	strbcc	r3, [r6], #-563	; 0xfffffdcd
    1630:	535f7878 	cmppl	pc, #120, 16	; 0x780000
    1634:	65506474 	ldrbvs	r6, [r0, #-1140]	; 0xfffffb8c
    1638:	68706972 	ldmdavs	r0!, {r1, r4, r5, r6, r8, fp, sp, lr}^
    163c:	6972445f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, sl, lr}^
    1640:	2f726576 	svccs	0x00726576
    1644:	2f637273 	svccs	0x00637273
    1648:	6373696d 	cmnvs	r3, #1785856	; 0x1b4000
    164c:	4e00632e 	cdpmi	3, 0, cr6, cr0, cr14, {1}
    1650:	5f434956 	svcpl	0x00434956
    1654:	6f697250 	svcvs	0x00697250
    1658:	79746972 	ldmdbvc	r4!, {r1, r4, r5, r6, r8, fp, sp, lr}^
    165c:	756f7247 	strbvc	r7, [pc, #-583]!	; 141d <startup-0x1fffebe3>
    1660:	6e6f4370 	mcrvs	3, 3, r4, cr15, cr0, {3}
    1664:	00676966 	rsbeq	r6, r7, r6, ror #18
    1668:	706c6c70 	rsbvc	r6, ip, r0, ror ip
    166c:	4c4c5000 	marmi	acc0, r5, ip
    1670:	43533249 	cmpmi	r3, #-1879048188	; 0x90000004
    1674:	00524746 	subseq	r4, r2, r6, asr #14
    1678:	5f434352 	svcpl	0x00434352
    167c:	43533249 	cmpmi	r3, #-1879048188	; 0x90000004
    1680:	6f434b4c 	svcvs	0x00434b4c
    1684:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    1688:	636f6e00 	cmnvs	pc, #0, 28
    168c:	52006469 	andpl	r6, r0, #1761607680	; 0x69000000
    1690:	475f4343 	ldrbmi	r4, [pc, -r3, asr #6]
    1694:	6c437465 	cfstrdvs	mvd7, [r3], {101}	; 0x65
    1698:	736b636f 	cmnvc	fp, #-1140850687	; 0xbc000001
    169c:	71657246 	cmnvc	r5, r6, asr #4
    16a0:	4c434800 	mcrrmi	8, 0, r4, r3, cr0
    16a4:	72465f4b 	subvc	r5, r6, #300	; 0x12c
    16a8:	65757165 	ldrbvs	r7, [r5, #-357]!	; 0xfffffe9b
    16ac:	0079636e 	rsbseq	r6, r9, lr, ror #6
    16b0:	5f434352 	svcpl	0x00434352
    16b4:	32425041 	subcc	r5, r2, #65	; 0x41
    16b8:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
    16bc:	6c436870 	mcrrvs	8, 7, r6, r3, cr0
    16c0:	4c6b636f 	stclmi	3, cr6, [fp], #-444	; 0xfffffe44
    16c4:	646f4d50 	strbtvs	r4, [pc], #-3408	; 16cc <startup-0x1fffe934>
    16c8:	646d4365 	strbtvs	r4, [sp], #-869	; 0xfffffc9b
    16cc:	43435200 	movtmi	r5, #12800	; 0x3200
    16d0:	4248415f 	submi	r4, r8, #-1073741801	; 0xc0000017
    16d4:	72655032 	rsbvc	r5, r5, #50	; 0x32
    16d8:	43687069 	cmnmi	r8, #105	; 0x69
    16dc:	6b636f6c 	blvs	18dd494 <startup-0x1e722b6c>
    16e0:	6f4d504c 	svcvs	0x004d504c
    16e4:	6d436564 	cfstr64vs	mvdx6, [r3, #-400]	; 0xfffffe70
    16e8:	6e690064 	cdpvs	0, 6, cr0, cr9, cr4, {3}
    16ec:	725f7469 	subsvc	r7, pc, #1761607680	; 0x69000000
    16f0:	5200676e 	andpl	r6, r0, #28835840	; 0x1b80000
    16f4:	415f4343 	cmpmi	pc, r3, asr #6
    16f8:	50314250 	eorspl	r4, r1, r0, asr r2
    16fc:	70697265 	rsbvc	r7, r9, r5, ror #4
    1700:	73655268 	cmnvc	r5, #104, 4	; 0x80000006
    1704:	6d437465 	cfstrdvs	mvd7, [r3, #-404]	; 0xfffffe6c
    1708:	43520064 	cmpmi	r2, #100	; 0x64
    170c:	6f4d5f43 	svcvs	0x004d5f43
    1710:	52006564 	andpl	r6, r0, #100, 10	; 0x19000000
    1714:	525f4343 	subspl	r4, pc, #201326593	; 0xc000001
    1718:	4c434354 	mcrrmi	3, 5, r4, r3, cr4
    171c:	756f534b 	strbvc	r5, [pc, #-843]!	; 13d9 <startup-0x1fffec27>
    1720:	00656372 	rsbeq	r6, r5, r2, ror r3
    1724:	5f434352 	svcpl	0x00434352
    1728:	32424841 	subcc	r4, r2, #4259840	; 0x410000
    172c:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
    1730:	6c436870 	mcrrvs	8, 7, r6, r3, cr0
    1734:	436b636f 	cmnmi	fp, #-1140850687	; 0xbc000001
    1738:	6400646d 	strvs	r6, [r0], #-1133	; 0xfffffb93
    173c:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
    1740:	6f446e00 	svcvs	0x00446e00
    1744:	0073726f 	rsbseq	r7, r3, pc, ror #4
    1748:	65526469 	ldrbvs	r6, [r2, #-1129]	; 0xfffffb97
    174c:	73657571 	cmnvc	r5, #473956352	; 0x1c400000
    1750:	43520074 	cmpmi	r2, #116	; 0x74
    1754:	4c505f43 	mrrcmi	15, 4, r5, r0, cr3
    1758:	5332494c 	teqpl	r2, #76, 18	; 0x130000
    175c:	00646d43 	rsbeq	r6, r4, r3, asr #26
    1760:	5f434352 	svcpl	0x00434352
    1764:	4b4c4348 	blmi	131248c <startup-0x1ecedb74>
    1768:	6d697400 	cfstrdvs	mvd7, [r9, #-0]
    176c:	616c5f65 	cmnvs	ip, r5, ror #30
    1770:	41006d72 	tstmi	r0, r2, ror sp
    1774:	4c324248 	lfmmi	f4, 4, [r2], #-288	; 0xfffffee0
    1778:	524e4550 	subpl	r4, lr, #80, 10	; 0x14000000
    177c:	43435200 	movtmi	r5, #12800	; 0x3200
    1780:	4941535f 	stmdbmi	r1, {r0, r1, r2, r3, r4, r6, r8, r9, ip, lr}^
    1784:	534c4c50 	movtpl	r4, #52304	; 0xcc50
    1788:	6c434941 	mcrrvs	9, 4, r4, r3, cr1	; <UNPREDICTABLE>
    178c:	7669446b 	strbtvc	r4, [r9], -fp, ror #8
    1790:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    1794:	69006769 	stmdbvs	r0, {r0, r3, r5, r6, r8, r9, sl, sp, lr}
    1798:	5f74696e 	svcpl	0x0074696e
    179c:	4f495047 	svcmi	0x00495047
    17a0:	726f505f 	rsbvc	r5, pc, #95	; 0x5f
    17a4:	53007374 	movwpl	r7, #884	; 0x374
    17a8:	69547379 	ldmdbvs	r4, {r0, r3, r4, r5, r6, r8, r9, ip, sp, lr}^
    17ac:	485f6b63 	ldmdami	pc, {r0, r1, r5, r6, r8, r9, fp, sp, lr}^	; <UNPREDICTABLE>
    17b0:	6c646e61 	stclvs	14, cr6, [r4], #-388	; 0xfffffe7c
    17b4:	52007265 	andpl	r7, r0, #1342177286	; 0x50000006
    17b8:	4c5f4343 	mrrcmi	3, 4, r4, pc, cr3	; <UNPREDICTABLE>
    17bc:	43434454 	movtmi	r4, #13396	; 0x3454
    17c0:	69444b4c 	stmdbvs	r4, {r2, r3, r6, r8, r9, fp, lr}^
    17c4:	6e6f4376 	mcrvs	3, 3, r4, cr15, cr6, {3}
    17c8:	00676966 	rsbeq	r6, r7, r6, ror #18
    17cc:	5f434352 	svcpl	0x00434352
    17d0:	33424841 	movtcc	r4, #10305	; 0x2841
    17d4:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
    17d8:	65526870 	ldrbvs	r6, [r2, #-2160]	; 0xfffff790
    17dc:	43746573 	cmnmi	r4, #482344960	; 0x1cc00000
    17e0:	5200646d 	andpl	r6, r0, #1828716544	; 0x6d000000
    17e4:	505f4343 	subspl	r4, pc, r3, asr #6
    17e8:	324b4c43 	subcc	r4, fp, #17152	; 0x4300
    17ec:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    17f0:	63006769 	movwvs	r6, #1897	; 0x769
    17f4:	72746e6f 	rsbsvc	r6, r4, #1776	; 0x6f0
    17f8:	69626c6f 	stmdbvs	r2!, {r0, r1, r2, r3, r5, r6, sl, fp, sp, lr}^
    17fc:	52007374 	andpl	r7, r0, #116, 6	; 0xd0000001
    1800:	445f4343 	ldrbmi	r4, [pc], #-835	; 1808 <startup-0x1fffe7f8>
    1804:	696e4965 	stmdbvs	lr!, {r0, r2, r5, r6, r8, fp, lr}^
    1808:	43520074 	cmpmi	r2, #116	; 0x74
    180c:	41535f43 	cmpmi	r3, r3, asr #30
    1810:	6f6c4249 	svcvs	0x006c4249
    1814:	43426b63 	movtmi	r6, #11107	; 0x2b63
    1818:	6f434b4c 	svcvs	0x00434b4c
    181c:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    1820:	42504100 	subsmi	r4, r0, #0, 2
    1824:	524e4532 	subpl	r4, lr, #209715200	; 0xc800000
    1828:	43435200 	movtmi	r5, #12800	; 0x3200
    182c:	7465475f 	strbtvc	r4, [r5], #-1887	; 0xfffff8a1
    1830:	43535953 	cmpmi	r3, #1359872	; 0x14c000
    1834:	6f534b4c 	svcvs	0x00534b4c
    1838:	65637275 	strbvs	r7, [r3, #-629]!	; 0xfffffd8b
    183c:	42484100 	submi	r4, r8, #0, 2
    1840:	45504c31 	ldrbmi	r4, [r0, #-3121]	; 0xfffff3cf
    1844:	5200524e 	andpl	r5, r0, #-536870908	; 0xe0000004
    1848:	505f4343 	subspl	r4, pc, r3, asr #6
    184c:	32494c4c 	subcc	r4, r9, #76, 24	; 0x4c00
    1850:	76694453 			; <UNDEFINED> instruction: 0x76694453
    1854:	43520051 	cmpmi	r2, #81	; 0x51
    1858:	48415f43 	stmdami	r1, {r0, r1, r6, r8, r9, sl, fp, ip, lr}^
    185c:	65503342 	ldrbvs	r3, [r0, #-834]	; 0xfffffcbe
    1860:	68706972 	ldmdavs	r0!, {r1, r4, r5, r6, r8, fp, sp, lr}^
    1864:	4b434400 	blmi	10d286c <startup-0x1ef2d794>
    1868:	52474643 	subpl	r4, r7, #70254592	; 0x4300000
    186c:	43435200 	movtmi	r5, #12800	; 0x3200
    1870:	4f434d5f 	svcmi	0x00434d5f
    1874:	76694432 			; <UNDEFINED> instruction: 0x76694432
    1878:	43435200 	movtmi	r5, #12800	; 0x3200
    187c:	5359535f 	cmppl	r9, #2080374785	; 0x7c000001
    1880:	534b4c43 	movtpl	r4, #48195	; 0xbc43
    1884:	6372756f 	cmnvs	r2, #465567744	; 0x1bc00000
    1888:	43520065 	cmpmi	r2, #101	; 0x65
    188c:	4c505f43 	mrrcmi	15, 4, r5, r0, cr3
    1890:	756f534c 	strbvc	r5, [pc, #-844]!	; 154c <startup-0x1fffeab4>
    1894:	00656372 	rsbeq	r6, r5, r2, ror r3
    1898:	5f434352 	svcpl	0x00434352
    189c:	31425041 	cmpcc	r2, r1, asr #32
    18a0:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
    18a4:	6c436870 	mcrrvs	8, 7, r6, r3, cr0
    18a8:	436b636f 	cmnmi	fp, #-1140850687	; 0xbc000001
    18ac:	5200646d 	andpl	r6, r0, #1828716544	; 0x6d000000
    18b0:	52455345 	subpl	r5, r5, #335544321	; 0x14000001
    18b4:	36444556 			; <UNDEFINED> instruction: 0x36444556
    18b8:	43435200 	movtmi	r5, #12800	; 0x3200
    18bc:	45534c5f 	ldrbmi	r4, [r3, #-3167]	; 0xfffff3a1
    18c0:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    18c4:	41006769 	tstmi	r0, r9, ror #14
    18c8:	52314248 	eorspl	r4, r1, #72, 4	; 0x80000004
    18cc:	00525453 	subseq	r5, r2, r3, asr r4
    18d0:	5f434352 	svcpl	0x00434352
    18d4:	32425041 	subcc	r5, r2, #65	; 0x41
    18d8:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
    18dc:	65526870 	ldrbvs	r6, [r2, #-2160]	; 0xfffff790
    18e0:	43746573 	cmnmi	r4, #482344960	; 0x1cc00000
    18e4:	7200646d 	andvc	r6, r0, #1828716544	; 0x6d000000
    18e8:	72757465 	rsbsvc	r7, r5, #1694498816	; 0x65000000
    18ec:	646f436e 	strbtvs	r4, [pc], #-878	; 18f4 <startup-0x1fffe70c>
    18f0:	43520065 	cmpmi	r2, #101	; 0x65
    18f4:	48415f43 	stmdami	r1, {r0, r1, r6, r8, r9, sl, fp, ip, lr}^
    18f8:	65503342 	ldrbvs	r3, [r0, #-834]	; 0xfffffcbe
    18fc:	68706972 	ldmdavs	r0!, {r1, r4, r5, r6, r8, fp, sp, lr}^
    1900:	636f6c43 	cmnvs	pc, #17152	; 0x4300
    1904:	4d504c6b 	ldclmi	12, cr4, [r0, #-428]	; 0xfffffe54
    1908:	4365646f 	cmnmi	r5, #1862270976	; 0x6f000000
    190c:	4100646d 	tstmi	r0, sp, ror #8
    1910:	45324248 	ldrmi	r4, [r2, #-584]!	; 0xfffffdb8
    1914:	5000524e 	andpl	r5, r0, lr, asr #4
    1918:	324b4c43 	subcc	r4, fp, #17152	; 0x4300
    191c:	6572465f 	ldrbvs	r4, [r2, #-1631]!	; 0xfffff9a1
    1920:	6e657571 	mcrvs	5, 3, r7, cr5, cr1, {3}
    1924:	47007963 	strmi	r7, [r0, -r3, ror #18]
    1928:	5f4f4950 	svcpl	0x004f4950
    192c:	64616572 	strbtvs	r6, [r1], #-1394	; 0xfffffa8e
    1930:	43435200 	movtmi	r5, #12800	; 0x3200
    1934:	5359535f 	cmppl	r9, #2080374785	; 0x7c000001
    1938:	004b4c43 	subeq	r4, fp, r3, asr #24
    193c:	4b4c4350 	blmi	1312684 <startup-0x1eced97c>
    1940:	72465f31 	subvc	r5, r6, #49, 30	; 0xc4
    1944:	65757165 	ldrbvs	r7, [r5, #-357]!	; 0xfffffe9b
    1948:	0079636e 	rsbseq	r6, r9, lr, ror #6
    194c:	4d4c4c50 	stclmi	12, cr4, [ip, #-320]	; 0xfffffec0
    1950:	4c4c5000 	marmi	acc0, r5, ip
    1954:	4c500050 	mrrcmi	0, 5, r0, r0, cr0	; <UNPREDICTABLE>
    1958:	5200514c 	andpl	r5, r0, #76, 2
    195c:	4c5f4343 	mrrcmi	3, 4, r4, pc, cr3	; <UNPREDICTABLE>
    1960:	6d434953 	vstrvs.16	s9, [r3, #-166]	; 0xffffff5a	; <UNPREDICTABLE>
    1964:	6c700064 	ldclvs	0, cr0, [r0], #-400	; 0xfffffe70
    1968:	756f736c 	strbvc	r7, [pc, #-876]!	; 1604 <startup-0x1fffe9fc>
    196c:	00656372 	rsbeq	r6, r5, r2, ror r3
    1970:	756f6d61 	strbvc	r6, [pc, #-3425]!	; c17 <startup-0x1ffff3e9>
    1974:	664f746e 	strbvs	r7, [pc], -lr, ror #8
    1978:	69746341 	ldmdbvs	r4!, {r0, r6, r8, r9, sp, lr}^
    197c:	6f446576 	svcvs	0x00446576
    1980:	0073726f 	rsbseq	r7, r3, pc, ror #4
    1984:	5f434352 	svcpl	0x00434352
    1988:	4b4c4348 	blmi	13126b0 <startup-0x1eced950>
    198c:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    1990:	52006769 	andpl	r6, r0, #27525120	; 0x1a40000
    1994:	485f4343 	ldmdami	pc, {r0, r1, r6, r8, r9, lr}^	; <UNPREDICTABLE>
    1998:	6f434553 	svcvs	0x00434553
    199c:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    19a0:	43444200 	movtmi	r4, #16896	; 0x4200
    19a4:	43520052 	cmpmi	r2, #82	; 0x52
    19a8:	534c5f43 	movtpl	r5, #53059	; 0xcf43
    19ac:	43520045 	cmpmi	r2, #69	; 0x45
    19b0:	41535f43 	cmpmi	r3, r3, asr #30
    19b4:	6f6c4249 	svcvs	0x006c4249
    19b8:	43416b63 	movtmi	r6, #7011	; 0x1b63
    19bc:	6f434b4c 	svcvs	0x00434b4c
    19c0:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    19c4:	61747300 	cmnvs	r4, r0, lsl #6
    19c8:	70757472 	rsbsvc	r7, r5, r2, ror r4
    19cc:	6e756f63 	cdpvs	15, 7, cr6, cr5, cr3, {3}
    19d0:	00726574 	rsbseq	r6, r2, r4, ror r5
    19d4:	5f434352 	svcpl	0x00434352
    19d8:	534c4c50 	movtpl	r4, #52304	; 0xcc50
    19dc:	6f434941 	svcvs	0x00434941
    19e0:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    19e4:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
    19e8:	69505f4f 	ldmdbvs	r0, {r0, r1, r2, r3, r6, r8, r9, sl, fp, ip, lr}^
    19ec:	5200736e 	andpl	r7, r0, #-1207959551	; 0xb8000001
    19f0:	485f4343 	ldmdami	pc, {r0, r1, r6, r8, r9, lr}^	; <UNPREDICTABLE>
    19f4:	52004553 	andpl	r4, r0, #348127232	; 0x14c00000
    19f8:	4d5f4343 	ldclmi	3, cr4, [pc, #-268]	; 18f4 <startup-0x1fffe70c>
    19fc:	43314f43 	teqmi	r1, #268	; 0x10c
    1a00:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    1a04:	43520067 	cmpmi	r2, #103	; 0x67
    1a08:	50415f43 	subpl	r5, r1, r3, asr #30
    1a0c:	65503242 	ldrbvs	r3, [r0, #-578]	; 0xfffffdbe
    1a10:	68706972 	ldmdavs	r0!, {r1, r4, r5, r6, r8, fp, sp, lr}^
    1a14:	636f6c43 	cmnvs	pc, #17152	; 0x4300
    1a18:	646d436b 	strbtvs	r4, [sp], #-875	; 0xfffffc95
    1a1c:	43435200 	movtmi	r5, #12800	; 0x3200
    1a20:	4c4c505f 	mcrrmi	0, 5, r5, ip, cr15
    1a24:	44494153 	strbmi	r4, [r9], #-339	; 0xfffffead
    1a28:	00517669 	subseq	r7, r1, r9, ror #12
    1a2c:	5f434352 	svcpl	0x00434352
    1a30:	534c4c50 	movtpl	r4, #52304	; 0xcc50
    1a34:	69444941 	stmdbvs	r4, {r0, r6, r8, fp, lr}^
    1a38:	52005276 	andpl	r5, r0, #1610612743	; 0x60000007
    1a3c:	535f4343 	cmppl	pc, #201326593	; 0xc000001
    1a40:	6c424941 	mcrrvs	9, 4, r4, r2, cr1	; <UNPREDICTABLE>
    1a44:	426b636f 	rsbmi	r6, fp, #-1140850687	; 0xbc000001
    1a48:	534b4c43 	movtpl	r4, #48195	; 0xbc43
    1a4c:	6372756f 	cmnvs	r2, #465567744	; 0x1bc00000
    1a50:	65730065 	ldrbvs	r0, [r3, #-101]!	; 0xffffff9b
    1a54:	6c41646e 	cfstrdvs	mvd6, [r1], {110}	; 0x6e
    1a58:	006d7261 	rsbeq	r7, sp, r1, ror #4
    1a5c:	69646e72 	stmdbvs	r4!, {r1, r4, r5, r6, r9, sl, fp, sp, lr}^
    1a60:	43520064 	cmpmi	r2, #100	; 0x64
    1a64:	434d5f43 	movtmi	r5, #57155	; 0xdf43
    1a68:	6f43324f 	svcvs	0x0043324f
    1a6c:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    1a70:	74656700 	strbtvc	r6, [r5], #-1792	; 0xfffff900
    1a74:	52006449 	andpl	r6, r0, #1224736768	; 0x49000000
    1a78:	495f4343 	ldmdbmi	pc, {r0, r1, r6, r8, r9, lr}^	; <UNPREDICTABLE>
    1a7c:	4c435332 	mcrrmi	3, 3, r5, r3, cr2
    1a80:	756f534b 	strbvc	r5, [pc, #-843]!	; 173d <startup-0x1fffe8c3>
    1a84:	00656372 	rsbeq	r6, r5, r2, ror r3
    1a88:	4f525245 	svcmi	0x00525245
    1a8c:	736d0052 	cmnvc	sp, #82	; 0x52
    1a90:	6b636954 	blvs	18dbfe8 <startup-0x1e724018>
    1a94:	43520073 	cmpmi	r2, #115	; 0x73
    1a98:	43505f43 	cmpmi	r0, #268	; 0x10c
    1a9c:	43314b4c 	teqmi	r1, #76, 22	; 0x13000
    1aa0:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    1aa4:	69740067 	ldmdbvs	r4!, {r0, r1, r2, r5, r6}^
    1aa8:	00736b63 	rsbseq	r6, r3, r3, ror #22
    1aac:	434c4c50 	movtmi	r4, #52304	; 0xcc50
    1ab0:	00524746 	subseq	r4, r2, r6, asr #14
    1ab4:	74736574 	ldrbtvc	r6, [r3], #-1396	; 0xfffffa8c
    1ab8:	0067734d 	rsbeq	r7, r7, sp, asr #6
    1abc:	5f434352 	svcpl	0x00434352
    1ac0:	61656c43 	cmnvs	r5, r3, asr #24
    1ac4:	616c4672 	smcvs	50274	; 0xc462
    1ac8:	50410067 	subpl	r0, r1, r7, rrx
    1acc:	42484142 	submi	r4, r8, #-2147483632	; 0x80000010
    1ad0:	73657250 	cmnvc	r5, #80, 4
    1ad4:	62615463 	rsbvs	r5, r1, #1660944384	; 0x63000000
    1ad8:	5200656c 	andpl	r6, r0, #108, 10	; 0x1b000000
    1adc:	535f4343 	cmppl	pc, #201326593	; 0xc000001
    1ae0:	4c504941 	mrrcmi	9, 4, r4, r0, cr1	; <UNPREDICTABLE>
    1ae4:	5332494c 	teqpl	r2, #76, 18	; 0x130000
    1ae8:	446b6c43 	strbtmi	r6, [fp], #-3139	; 0xfffff3bd
    1aec:	6f437669 	svcvs	0x00437669
    1af0:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    1af4:	43535300 	cmpmi	r3, #0, 6
    1af8:	41005247 	tstmi	r0, r7, asr #4
    1afc:	52324250 	eorspl	r4, r2, #80, 4
    1b00:	00525453 	subseq	r5, r2, r3, asr r4
    1b04:	5f434352 	svcpl	0x00434352
    1b08:	46746547 	ldrbtmi	r6, [r4], -r7, asr #10
    1b0c:	5367616c 	cmnpl	r7, #108, 2
    1b10:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0xfffffe8c
    1b14:	43520073 	cmpmi	r2, #115	; 0x73
    1b18:	6c435f43 	mcrrvs	15, 4, r5, r3, cr3
    1b1c:	736b636f 	cmnvc	fp, #-1140850687	; 0xbc000001
    1b20:	43435200 	movtmi	r5, #12800	; 0x3200
    1b24:	4354495f 	cmpmi	r4, #1556480	; 0x17c000
    1b28:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    1b2c:	43520067 	cmpmi	r2, #103	; 0x67
    1b30:	53485f43 	movtpl	r5, #36675	; 0x8f43
    1b34:	646d4349 	strbtvs	r4, [sp], #-841	; 0xfffffcb7
    1b38:	43435200 	movtmi	r5, #12800	; 0x3200
    1b3c:	6a64415f 	bvs	19120c0 <startup-0x1e6edf40>
    1b40:	48747375 	ldmdami	r4!, {r0, r2, r4, r5, r6, r8, r9, ip, sp, lr}^
    1b44:	61434953 	cmpvs	r3, r3, asr r9
    1b48:	7262696c 	rsbvc	r6, r2, #108, 18	; 0x1b0000
    1b4c:	6f697461 	svcvs	0x00697461
    1b50:	6c61566e 	stclvs	6, cr5, [r1], #-440	; 0xfffffe48
    1b54:	41006575 	tstmi	r0, r5, ror r5
    1b58:	4c324250 	lfmmi	f4, 4, [r2], #-320	; 0xfffffec0
    1b5c:	524e4550 	subpl	r4, lr, #80, 10	; 0x14000000
    1b60:	43435200 	movtmi	r5, #12800	; 0x3200
    1b64:	4250415f 	subsmi	r4, r0, #-1073741801	; 0xc0000017
    1b68:	72655031 	rsbvc	r5, r5, #49	; 0x31
    1b6c:	00687069 	rsbeq	r7, r8, r9, rrx
    1b70:	5f434352 	svcpl	0x00434352
    1b74:	43435452 	movtmi	r5, #13394	; 0x3452
    1b78:	6f434b4c 	svcvs	0x00434b4c
    1b7c:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    1b80:	43435200 	movtmi	r5, #12800	; 0x3200
    1b84:	414c465f 	cmpmi	ip, pc, asr r6
    1b88:	43520047 	cmpmi	r2, #71	; 0x47
    1b8c:	65475f43 	strbvs	r5, [r7, #-3907]	; 0xfffff0bd
    1b90:	53544974 	cmppl	r4, #116, 18	; 0x1d0000
    1b94:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0xfffffe8c
    1b98:	43520073 	cmpmi	r2, #115	; 0x73
    1b9c:	6c435f43 	mcrrvs	15, 4, r5, r3, cr3
    1ba0:	49726165 	ldmdbmi	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    1ba4:	6e655054 	mcrvs	0, 3, r5, cr5, cr4, {2}
    1ba8:	676e6964 	strbvs	r6, [lr, -r4, ror #18]!
    1bac:	00746942 	rsbseq	r6, r4, r2, asr #18
    1bb0:	5f434352 	svcpl	0x00434352
    1bb4:	636f6c43 	cmnvs	pc, #17152	; 0x4300
    1bb8:	6365536b 	cmnvs	r5, #-1409286143	; 0xac000001
    1bbc:	74697275 	strbtvc	r7, [r9], #-629	; 0xfffffd8b
    1bc0:	73795379 	cmnvc	r9, #-469762047	; 0xe4000001
    1bc4:	436d6574 	cmnmi	sp, #116, 10	; 0x1d000000
    1bc8:	5200646d 	andpl	r6, r0, #1828716544	; 0x6d000000
    1bcc:	545f4343 	ldrbpl	r4, [pc], #-835	; 1bd4 <startup-0x1fffe42c>
    1bd0:	4c434d49 	mcrrmi	13, 4, r4, r3, cr9
    1bd4:	6572504b 	ldrbvs	r5, [r2, #-75]!	; 0xffffffb5
    1bd8:	6e6f4373 	mcrvs	3, 3, r4, cr15, cr3, {3}
    1bdc:	00676966 	rsbeq	r6, r7, r6, ror #18
    1be0:	5f434352 	svcpl	0x00434352
    1be4:	42494153 	submi	r4, r9, #-1073741804	; 0xc0000014
    1be8:	6b636f6c 	blvs	18dd9a0 <startup-0x1e722660>
    1bec:	4b4c4341 	blmi	13128f8 <startup-0x1eced708>
    1bf0:	72756f53 	rsbsvc	r6, r5, #332	; 0x14c
    1bf4:	43006563 	movwmi	r6, #1379	; 0x563
    1bf8:	73552f3a 	cmpvc	r5, #58, 30	; 0xe8
    1bfc:	2f737265 	svccs	0x00737265
    1c00:	6b697245 	blvs	1a5e51c <startup-0x1e5a1ae4>
    1c04:	636f442f 	cmnvs	pc, #788529152	; 0x2f000000
    1c08:	6e656d75 	mcrvs	13, 3, r6, cr5, cr5, {3}
    1c0c:	442f7374 	strtmi	r7, [pc], #-884	; 1c14 <startup-0x1fffe3ec>
    1c10:	74617461 	strbtvc	r7, [r1], #-1121	; 0xfffffb9f
    1c14:	696e6b65 	stmdbvs	lr!, {r0, r2, r5, r6, r8, r9, fp, sp, lr}^
    1c18:	70746b73 	rsbsvc	r6, r4, r3, ror fp
    1c1c:	656a6f72 	strbvs	r6, [sl, #-3954]!	; 0xfffff08e
    1c20:	6b2f746b 	blvs	bdedd4 <startup-0x1f42122c>
    1c24:	442f646f 	strtmi	r6, [pc], #-1135	; 1c2c <startup-0x1fffe3d4>
    1c28:	2f726f6f 	svccs	0x00726f6f
    1c2c:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
    1c30:	2e707574 	mrccs	5, 3, r7, cr0, cr4, {3}
    1c34:	79730063 	ldmdbvc	r3!, {r0, r1, r5, r6}^
    1c38:	63697473 	cmnvs	r9, #1929379840	; 0x73000000
    1c3c:	6e495f6b 	cdpvs	15, 4, cr5, cr9, cr11, {3}
    1c40:	73007469 	movwvc	r7, #1129	; 0x469
    1c44:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0xfffffe8c
    1c48:	67657273 			; <UNDEFINED> instruction: 0x67657273
    1c4c:	43435200 	movtmi	r5, #12800	; 0x3200
    1c50:	4250415f 	subsmi	r4, r0, #-1073741801	; 0xc0000017
    1c54:	72655032 	rsbvc	r5, r5, #50	; 0x32
    1c58:	00687069 	rsbeq	r7, r8, r9, rrx
    1c5c:	31425041 	cmpcc	r2, r1, asr #32
    1c60:	4e45504c 	cdpmi	0, 4, cr5, cr5, cr12, {2}
    1c64:	63610052 	cmnvs	r1, #82	; 0x52
    1c68:	65766974 	ldrbvs	r6, [r6, #-2420]!	; 0xfffff68c
    1c6c:	6f6f645f 	svcvs	0x006f645f
    1c70:	43007372 	movwmi	r7, #882	; 0x372
    1c74:	5441474b 	strbpl	r4, [r1], #-1867	; 0xfffff8b5
    1c78:	00524e45 	subseq	r4, r2, r5, asr #28
    1c7c:	534c4c50 	movtpl	r4, #52304	; 0xcc50
    1c80:	004e4941 	subeq	r4, lr, r1, asr #18
    1c84:	534c4c50 	movtpl	r4, #52304	; 0xcc50
    1c88:	00514941 	subseq	r4, r1, r1, asr #18
    1c8c:	534c4c50 	movtpl	r4, #52304	; 0xcc50
    1c90:	00524941 	subseq	r4, r2, r1, asr #18
    1c94:	5f434352 	svcpl	0x00434352
    1c98:	314f434d 	cmpcc	pc, sp, asr #6
    1c9c:	72756f53 	rsbsvc	r6, r5, #332	; 0x14c
    1ca0:	52006563 	andpl	r6, r0, #415236096	; 0x18c00000
    1ca4:	415f4343 	cmpmi	pc, r3, asr #6
    1ca8:	50334248 	eorspl	r4, r3, r8, asr #4
    1cac:	70697265 	rsbvc	r7, r9, r5, ror #4
    1cb0:	6f6c4368 	svcvs	0x006c4368
    1cb4:	6d436b63 	vstrvs	d22, [r3, #-396]	; 0xfffffe74
    1cb8:	69740064 	ldmdbvs	r4!, {r2, r5, r6}^
    1cbc:	635f656d 	cmpvs	pc, #457179136	; 0x1b400000
    1cc0:	72746e65 	rsbsvc	r6, r4, #1616	; 0x650
    1cc4:	6c5f6c61 	mrrcvs	12, 6, r6, pc, cr1	; <UNPREDICTABLE>
    1cc8:	006d7261 	rsbeq	r7, sp, r1, ror #4
    1ccc:	5f434352 	svcpl	0x00434352
    1cd0:	434c4c50 	movtmi	r4, #52304	; 0xcc50
    1cd4:	5200646d 	andpl	r6, r0, #1828716544	; 0x6d000000
    1cd8:	425f4343 	subsmi	r4, pc, #201326593	; 0xc000001
    1cdc:	756b6361 	strbvc	r6, [fp, #-865]!	; 0xfffffc9f
    1ce0:	73655270 	cmnvc	r5, #112, 4
    1ce4:	6d437465 	cfstrdvs	mvd7, [r3, #-404]	; 0xfffffe6c
    1ce8:	48410064 	stmdami	r1, {r2, r5, r6}^
    1cec:	53523342 	cmppl	r2, #134217729	; 0x8000001
    1cf0:	45005254 	strmi	r5, [r0, #-596]	; 0xfffffdac
    1cf4:	726f7272 	rsbvc	r7, pc, #536870919	; 0x20000007
    1cf8:	74617453 	strbtvc	r7, [r1], #-1107	; 0xfffffbad
    1cfc:	73007375 	movwvc	r7, #885	; 0x375
    1d00:	74726174 	ldrbtvc	r6, [r2], #-372	; 0xfffffe8c
    1d04:	52007075 	andpl	r7, r0, #117	; 0x75
    1d08:	4d5f4343 	ldclmi	3, cr4, [pc, #-268]	; 1c04 <startup-0x1fffe3fc>
    1d0c:	53324f43 	teqpl	r2, #268	; 0x10c
    1d10:	6372756f 	cmnvs	r2, #465567744	; 0x1bc00000
    1d14:	50410065 	subpl	r0, r1, r5, rrx
    1d18:	53523142 	cmppl	r2, #-2147483632	; 0x80000010
    1d1c:	41005254 	tstmi	r0, r4, asr r2
    1d20:	45314250 	ldrmi	r4, [r1, #-592]!	; 0xfffffdb0
    1d24:	5200524e 	andpl	r5, r0, #-536870908	; 0xe0000004
    1d28:	4d5f4343 	ldclmi	3, cr4, [pc, #-268]	; 1c24 <startup-0x1fffe3dc>
    1d2c:	44314f43 	ldrtmi	r4, [r1], #-3907	; 0xfffff0bd
    1d30:	69007669 	stmdbvs	r0, {r0, r3, r5, r6, r9, sl, ip, sp, lr}
    1d34:	73734164 	cmnvc	r3, #100, 2
    1d38:	5f6e6769 	svcpl	0x006e6769
    1d3c:	646e6148 	strbtvs	r6, [lr], #-328	; 0xfffffeb8
    1d40:	0072656c 	rsbseq	r6, r2, ip, ror #10
    1d44:	5f434352 	svcpl	0x00434352
    1d48:	74696157 	strbtvc	r6, [r9], #-343	; 0xfffffea9
    1d4c:	48726f46 	ldmdami	r2!, {r1, r2, r6, r8, r9, sl, fp, sp, lr}^
    1d50:	74534553 	ldrbvc	r4, [r3], #-1363	; 0xfffffaad
    1d54:	55747261 	ldrbpl	r7, [r4, #-609]!	; 0xfffffd9f
    1d58:	55530070 	ldrbpl	r0, [r3, #-112]	; 0xffffff90
    1d5c:	53454343 	movtpl	r4, #21315	; 0x5343
    1d60:	43520053 	cmpmi	r2, #83	; 0x53
    1d64:	534c5f43 	movtpl	r5, #53059	; 0xcf43
    1d68:	646f4d45 	strbtvs	r4, [pc], #-3397	; 1d70 <startup-0x1fffe290>
    1d6c:	6e6f4365 	cdpvs	3, 6, cr4, cr15, cr5, {3}
    1d70:	00676966 	rsbeq	r6, r7, r6, ror #18
    1d74:	33424841 	movtcc	r4, #10305	; 0x2841
    1d78:	4e45504c 	cdpmi	0, 4, cr5, cr5, cr12, {2}
    1d7c:	79530052 	ldmdbvc	r3, {r1, r4, r6}^
    1d80:	63695473 	cmnvs	r9, #1929379840	; 0x73000000
    1d84:	6f435f6b 	svcvs	0x00435f6b
    1d88:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    1d8c:	6d697400 	cfstrdvs	mvd7, [r9, #-0]
    1d90:	6d740065 	ldclvs	0, cr0, [r4, #-404]!	; 0xfffffe6c
    1d94:	67657270 			; <UNDEFINED> instruction: 0x67657270
    1d98:	4b434400 	blmi	10d2da0 <startup-0x1ef2d260>
    1d9c:	52474643 	subpl	r4, r7, #70254592	; 0x4300000
    1da0:	43520032 	cmpmi	r2, #50	; 0x32
    1da4:	48415f43 	stmdami	r1, {r0, r1, r6, r8, r9, sl, fp, ip, lr}^
    1da8:	65503142 	ldrbvs	r3, [r0, #-322]	; 0xfffffebe
    1dac:	68706972 	ldmdavs	r0!, {r1, r4, r5, r6, r8, fp, sp, lr}^
    1db0:	65736800 	ldrbvs	r6, [r3, #-2048]!	; 0xfffff800
    1db4:	74617473 	strbtvc	r7, [r1], #-1139	; 0xfffffb8d
    1db8:	47007375 	smlsdxmi	r0, r5, r3, r7
    1dbc:	5f4f4950 	svcpl	0x004f4950
    1dc0:	706d616c 	rsbvc	r6, sp, ip, ror #2
    1dc4:	42484100 	submi	r4, r8, #0, 2
    1dc8:	524e4531 	subpl	r4, lr, #205520896	; 0xc400000
    1dcc:	43435200 	movtmi	r5, #12800	; 0x3200
    1dd0:	4248415f 	submi	r4, r8, #-1073741801	; 0xc0000017
    1dd4:	72655031 	rsbvc	r5, r5, #49	; 0x31
    1dd8:	52687069 	rsbpl	r7, r8, #105	; 0x69
    1ddc:	74657365 	strbtvc	r7, [r5], #-869	; 0xfffffc9b
    1de0:	00646d43 	rsbeq	r6, r4, r3, asr #26
    1de4:	32424841 	subcc	r4, r2, #4259840	; 0x410000
    1de8:	52545352 	subspl	r5, r4, #1207959553	; 0x48000001
    1dec:	43435200 	movtmi	r5, #12800	; 0x3200
    1df0:	6f6c435f 	svcvs	0x006c435f
    1df4:	54736b63 	ldrbtpl	r6, [r3], #-2915	; 0xfffff49d
    1df8:	44657079 	strbtmi	r7, [r5], #-121	; 0xffffff87
    1dfc:	52006665 	andpl	r6, r0, #105906176	; 0x6500000
    1e00:	545f4343 	ldrbpl	r4, [pc], #-835	; 1e08 <startup-0x1fffe1f8>
    1e04:	44657079 	strbtmi	r7, [r5], #-121	; 0xffffff87
    1e08:	70006665 	andvc	r6, r0, r5, ror #12
    1e0c:	77737361 	ldrbvc	r7, [r3, -r1, ror #6]!
    1e10:	0064726f 	rsbeq	r7, r4, pc, ror #4
    1e14:	5f434352 	svcpl	0x00434352
    1e18:	47005449 	strmi	r5, [r0, -r9, asr #8]
    1e1c:	5f4f4950 	svcpl	0x004f4950
    1e20:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
    1e24:	6d697400 	cfstrdvs	mvd7, [r9, #-0]
    1e28:	61745365 	cmnvs	r4, r5, ror #6
    1e2c:	7000706d 	andvc	r7, r0, sp, rrx
    1e30:	63766c6c 	cmnvs	r6, #108, 24	; 0x6c00
    1e34:	4352006f 	cmpmi	r2, #111	; 0x6f
    1e38:	50415f43 	subpl	r5, r1, r3, asr #30
    1e3c:	65503142 	ldrbvs	r3, [r0, #-322]	; 0xfffffebe
    1e40:	68706972 	ldmdavs	r0!, {r1, r4, r5, r6, r8, fp, sp, lr}^
    1e44:	636f6c43 	cmnvs	pc, #17152	; 0x4300
    1e48:	4d504c6b 	ldclmi	12, cr4, [r0, #-428]	; 0xfffffe54
    1e4c:	4365646f 	cmnmi	r5, #1862270976	; 0x6f000000
    1e50:	5000646d 	andpl	r6, r0, sp, ror #8
    1e54:	32494c4c 	subcc	r4, r9, #76, 24	; 0x4c00
    1e58:	52004e53 	andpl	r4, r0, #1328	; 0x530
    1e5c:	415f4343 	cmpmi	pc, r3, asr #6
    1e60:	50314248 	eorspl	r4, r1, r8, asr #4
    1e64:	70697265 	rsbvc	r7, r9, r5, ror #4
    1e68:	6f6c4368 	svcvs	0x006c4368
    1e6c:	504c6b63 	subpl	r6, ip, r3, ror #22
    1e70:	65646f4d 	strbvs	r6, [r4, #-3917]!	; 0xfffff0b3
    1e74:	00646d43 	rsbeq	r6, r4, r3, asr #26
    1e78:	494c4c50 	stmdbmi	ip, {r4, r6, sl, fp, lr}^
    1e7c:	00525332 	subseq	r5, r2, r2, lsr r3
    1e80:	6e69616d 	powvsez	f6, f1, #5.0
    1e84:	6c696d00 	stclvs	13, cr6, [r9], #-0
    1e88:	616c0069 	cmnvs	ip, r9, rrx
    1e8c:	69546d72 	ldmdbvs	r4, {r1, r4, r5, r6, r8, sl, fp, sp, lr}^
    1e90:	52006b63 	andpl	r6, r0, #101376	; 0x18c00
    1e94:	525f4343 	subspl	r4, pc, #201326593	; 0xc000001
    1e98:	4c434354 	mcrrmi	3, 5, r4, r3, cr4
    1e9c:	646d434b 	strbtvs	r4, [sp], #-843	; 0xfffffcb5
    1ea0:	43435200 	movtmi	r5, #12800	; 0x3200
    1ea4:	4248415f 	submi	r4, r8, #-1073741801	; 0xc0000017
    1ea8:	72655032 	rsbvc	r5, r5, #50	; 0x32
    1eac:	00687069 	rsbeq	r7, r8, r9, rrx
    1eb0:	72616c61 	rsbvc	r6, r1, #24832	; 0x6100
    1eb4:	676e696d 	strbvs	r6, [lr, -sp, ror #18]!
    1eb8:	6f6f645f 	svcvs	0x006f645f
    1ebc:	4c500072 	mrrcmi	0, 7, r0, r0, cr2	; <UNPREDICTABLE>
    1ec0:	4941534c 	stmdbmi	r1, {r2, r3, r6, r8, r9, ip, lr}^
    1ec4:	52474643 	subpl	r4, r7, #70254592	; 0x4300000
    1ec8:	4c4c5000 	marmi	acc0, r5, ip
    1ecc:	4352004e 	cmpmi	r2, #78	; 0x4e
    1ed0:	48415f43 	stmdami	r1, {r0, r1, r6, r8, r9, sl, fp, ip, lr}^
    1ed4:	65503142 	ldrbvs	r3, [r0, #-322]	; 0xfffffebe
    1ed8:	68706972 	ldmdavs	r0!, {r1, r4, r5, r6, r8, fp, sp, lr}^
    1edc:	636f6c43 	cmnvs	pc, #17152	; 0x4300
    1ee0:	646d436b 	strbtvs	r4, [sp], #-875	; 0xfffffc95
    1ee4:	43435200 	movtmi	r5, #12800	; 0x3200
    1ee8:	4c4c505f 	mcrrmi	0, 5, r5, ip, cr15
    1eec:	43533249 	cmpmi	r3, #-1879048188	; 0x90000004
    1ef0:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    1ef4:	59530067 	ldmdbpl	r3, {r0, r1, r2, r5, r6}^
    1ef8:	4b4c4353 	blmi	1312c4c <startup-0x1eced3b4>
    1efc:	6572465f 	ldrbvs	r4, [r2, #-1631]!	; 0xfffff9a1
    1f00:	6e657571 	mcrvs	5, 3, r7, cr5, cr1, {3}
    1f04:	52007963 	andpl	r7, r0, #1622016	; 0x18c000
    1f08:	545f4343 	ldrbpl	r4, [pc], #-835	; 1f10 <startup-0x1fffe0f0>
    1f0c:	4c434d49 	mcrrmi	13, 4, r4, r3, cr9
    1f10:	6572504b 	ldrbvs	r5, [r2, #-75]!	; 0xffffffb5
    1f14:	6c616373 	stclvs	3, cr6, [r1], #-460	; 0xfffffe34
    1f18:	70007265 	andvc	r7, r0, r5, ror #4
    1f1c:	63736572 	cmnvs	r3, #478150656	; 0x1c800000
    1f20:	43435200 	movtmi	r5, #12800	; 0x3200
    1f24:	4248415f 	submi	r4, r8, #-1073741801	; 0xc0000017
    1f28:	72655032 	rsbvc	r5, r5, #50	; 0x32
    1f2c:	52687069 	rsbpl	r7, r8, #105	; 0x69
    1f30:	74657365 	strbtvc	r7, [r5], #-869	; 0xfffffc9b
    1f34:	00646d43 	rsbeq	r6, r4, r3, asr #26
    1f38:	5f434352 	svcpl	0x00434352
    1f3c:	534c4c50 	movtpl	r4, #52304	; 0xcc50
    1f40:	6d434941 	vstrvs.16	s9, [r3, #-130]	; 0xffffff7e	; <UNPREDICTABLE>
    1f44:	48410064 	stmdami	r1, {r2, r5, r6}^
    1f48:	4e453342 	cdpmi	3, 4, cr3, cr5, cr2, {2}
    1f4c:	43520052 	cmpmi	r2, #82	; 0x52
    1f50:	59535f43 	ldmdbpl	r3, {r0, r1, r6, r8, r9, sl, fp, ip, lr}^
    1f54:	4b4c4353 	blmi	1312ca8 <startup-0x1eced358>
    1f58:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    1f5c:	52006769 	andpl	r6, r0, #27525120	; 0x1a40000
    1f60:	505f4343 	subspl	r4, pc, r3, asr #6
    1f64:	6f434c4c 	svcvs	0x00434c4c
    1f68:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    1f6c:	6c6c7000 	stclvs	0, cr7, [ip], #-0
    1f70:	7562006d 	strbvc	r0, [r2, #-109]!	; 0xffffff93
    1f74:	72656666 	rsbvc	r6, r5, #106954752	; 0x6600000
    1f78:	00747550 	rsbseq	r7, r4, r0, asr r5
    1f7c:	6e756f63 	cdpvs	15, 7, cr6, cr5, cr3, {3}
    1f80:	49460074 	stmdbmi	r6, {r2, r4, r5, r6}^
    1f84:	43004f46 	movwmi	r4, #3910	; 0xf46
    1f88:	73552f3a 	cmpvc	r5, #58, 30	; 0xe8
    1f8c:	2f737265 	svccs	0x00737265
    1f90:	6b697245 	blvs	1a5e8ac <startup-0x1e5a1754>
    1f94:	636f442f 	cmnvs	pc, #788529152	; 0x2f000000
    1f98:	6e656d75 	mcrvs	13, 3, r6, cr5, cr5, {3}
    1f9c:	442f7374 	strtmi	r7, [pc], #-884	; 1fa4 <startup-0x1fffe05c>
    1fa0:	74617461 	strbtvc	r7, [r1], #-1121	; 0xfffffb9f
    1fa4:	696e6b65 	stmdbvs	lr!, {r0, r2, r5, r6, r8, r9, fp, sp, lr}^
    1fa8:	70746b73 	rsbsvc	r6, r4, r3, ror fp
    1fac:	656a6f72 	strbvs	r6, [sl, #-3954]!	; 0xfffff08e
    1fb0:	6b2f746b 	blvs	bdf164 <startup-0x1f420e9c>
    1fb4:	6c2f646f 	cfstrsvs	mvf6, [pc], #-444	; 1e00 <startup-0x1fffe200>
    1fb8:	622f6269 	eorvs	r6, pc, #-1879048186	; 0x90000006
    1fbc:	65666675 	strbvs	r6, [r6, #-1653]!	; 0xfffff98b
    1fc0:	00632e72 	rsbeq	r2, r3, r2, ror lr
    1fc4:	66667562 	strbtvs	r7, [r6], -r2, ror #10
    1fc8:	764f7265 	strbvc	r7, [pc], -r5, ror #4
    1fcc:	69727265 	ldmdbvs	r2!, {r0, r2, r5, r6, r9, ip, sp, lr}^
    1fd0:	614c6564 	cmpvs	ip, r4, ror #10
    1fd4:	64007473 	strvs	r7, [r0], #-1139	; 0xfffffb8d
    1fd8:	00747365 	rsbseq	r7, r4, r5, ror #6
    1fdc:	66667562 	strbtvs	r7, [r6], -r2, ror #10
    1fe0:	656c6500 	strbvs	r6, [ip, #-1280]!	; 0xfffffb00
    1fe4:	7562006d 	strbvc	r0, [r2, #-109]!	; 0xffffff93
    1fe8:	72656666 	rsbvc	r6, r5, #106954752	; 0x6600000
    1fec:	00746547 	rsbseq	r6, r4, r7, asr #10
    1ff0:	66667562 	strbtvs	r7, [r6], -r2, ror #10
    1ff4:	6e497265 	cdpvs	2, 4, cr7, cr9, cr5, {3}
    1ff8:	62007469 	andvs	r7, r0, #1761607680	; 0x69000000
    1ffc:	65666675 	strbvs	r6, [r6, #-1653]!	; 0xfffff98b
    2000:	72700072 	rsbsvc	r0, r0, #114	; 0x72
    2004:	6e497665 	cdpvs	6, 4, cr7, cr9, cr5, {3}
    2008:	00786564 	rsbseq	r6, r8, r4, ror #10

Disassembly of section .comment:

00000000 <.comment>:
   0:	3a434347 	bcc	10d0d24 <startup-0x1ef2f2dc>
   4:	4e472820 	cdpmi	8, 4, cr2, cr7, cr0, {1}
   8:	6f542055 	svcvs	0x00542055
   c:	20736c6f 	rsbscs	r6, r3, pc, ror #24
  10:	20726f66 	rsbscs	r6, r2, r6, ror #30
  14:	206d7241 	rsbcs	r7, sp, r1, asr #4
  18:	65626d45 	strbvs	r6, [r2, #-3397]!	; 0xfffff2bb
  1c:	64656464 	strbtvs	r6, [r5], #-1124	; 0xfffffb9c
  20:	6f725020 	svcvs	0x00725020
  24:	73736563 	cmnvc	r3, #415236096	; 0x18c00000
  28:	2073726f 	rsbscs	r7, r3, pc, ror #4
  2c:	30322d37 	eorscc	r2, r2, r7, lsr sp
  30:	712d3731 			; <UNDEFINED> instruction: 0x712d3731
  34:	616d2d34 	cmnvs	sp, r4, lsr sp
  38:	29726f6a 	ldmdbcs	r2!, {r1, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
  3c:	322e3720 	eorcc	r3, lr, #32, 14	; 0x800000
  40:	3220312e 	eorcc	r3, r0, #-2147483637	; 0x8000000b
  44:	30373130 	eorscc	r3, r7, r0, lsr r1
  48:	20343039 	eorscs	r3, r4, r9, lsr r0
  4c:	6c657228 	sfmvs	f7, 2, [r5], #-160	; 0xffffff60
  50:	65736165 	ldrbvs	r6, [r3, #-357]!	; 0xfffffe9b
  54:	415b2029 	cmpmi	fp, r9, lsr #32
  58:	652f4d52 	strvs	r4, [pc, #-3410]!	; fffff30e <GPIO_Ports+0xdfffb366>
  5c:	6465626d 	strbtvs	r6, [r5], #-621	; 0xfffffd93
  60:	2d646564 	cfstr64cs	mvdx6, [r4, #-400]!	; 0xfffffe70
  64:	72622d37 	rsbvc	r2, r2, #3520	; 0xdc0
  68:	68636e61 	stmdavs	r3!, {r0, r5, r6, r9, sl, fp, sp, lr}^
  6c:	76657220 	strbtvc	r7, [r5], -r0, lsr #4
  70:	6f697369 	svcvs	0x00697369
  74:	3532206e 	ldrcc	r2, [r2, #-110]!	; 0xffffff92
  78:	34303235 	ldrtcc	r3, [r0], #-565	; 0xfffffdcb
  7c:	Address 0x0000007c is out of bounds.


Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00002b41 	andeq	r2, r0, r1, asr #22
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	00000021 	andeq	r0, r0, r1, lsr #32
  10:	2d533605 	ldclcs	6, cr3, [r3, #-20]	; 0xffffffec
  14:	0c06004d 	stceq	0, cr0, [r6], {77}	; 0x4d
  18:	01094d07 	tsteq	r9, r7, lsl #26
  1c:	01140412 	tsteq	r4, r2, lsl r4
  20:	03170115 	tsteq	r7, #1073741829	; 0x40000005
  24:	01190118 	tsteq	r9, r8, lsl r1
  28:	061e011a 			; <UNDEFINED> instruction: 0x061e011a

Disassembly of section .debug_frame:

00000000 <.debug_frame>:
       0:	0000000c 	andeq	r0, r0, ip
       4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
       8:	7c020001 	stcvc	0, cr0, [r2], {1}
       c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
      10:	0000001c 	andeq	r0, r0, ip, lsl r0
      14:	00000000 	andeq	r0, r0, r0
      18:	20000010 	andcs	r0, r0, r0, lsl r0
      1c:	00000060 	andeq	r0, r0, r0, rrx
      20:	40080e41 	andmi	r0, r8, r1, asr #28
      24:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
      28:	100e4101 	andne	r4, lr, r1, lsl #2
      2c:	00070d41 	andeq	r0, r7, r1, asr #26
      30:	0000001c 	andeq	r0, r0, ip, lsl r0
      34:	00000000 	andeq	r0, r0, r0
      38:	20000070 	andcs	r0, r0, r0, ror r0
      3c:	00000044 	andeq	r0, r0, r4, asr #32
      40:	40080e41 	andmi	r0, r8, r1, asr #28
      44:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
      48:	100e4101 	andne	r4, lr, r1, lsl #2
      4c:	00070d41 	andeq	r0, r7, r1, asr #26
      50:	0000001c 	andeq	r0, r0, ip, lsl r0
      54:	00000000 	andeq	r0, r0, r0
      58:	200000b4 	strhcs	r0, [r0], -r4
      5c:	00000098 	muleq	r0, r8, r0
      60:	40080e41 	andmi	r0, r8, r1, asr #28
      64:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
      68:	280e4101 	stmdacs	lr, {r0, r8, lr}
      6c:	00070d41 	andeq	r0, r7, r1, asr #26
      70:	00000020 	andeq	r0, r0, r0, lsr #32
      74:	00000000 	andeq	r0, r0, r0
      78:	2000014c 	andcs	r0, r0, ip, asr #2
      7c:	0000012c 	andeq	r0, r0, ip, lsr #2
      80:	400c0e41 	andmi	r0, ip, r1, asr #28
      84:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
      88:	018e4002 	orreq	r4, lr, r2
      8c:	41280e41 			; <UNDEFINED> instruction: 0x41280e41
      90:	0000070d 	andeq	r0, r0, sp, lsl #14
      94:	0000001c 	andeq	r0, r0, ip, lsl r0
      98:	00000000 	andeq	r0, r0, r0
      9c:	20000278 	andcs	r0, r0, r8, ror r2
      a0:	00000050 	andeq	r0, r0, r0, asr r0
      a4:	40080e41 	andmi	r0, r8, r1, asr #28
      a8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
      ac:	200e4101 	andcs	r4, lr, r1, lsl #2
      b0:	00070d41 	andeq	r0, r7, r1, asr #26
      b4:	0000001c 	andeq	r0, r0, ip, lsl r0
      b8:	00000000 	andeq	r0, r0, r0
      bc:	200002c8 	andcs	r0, r0, r8, asr #5
      c0:	00000032 	andeq	r0, r0, r2, lsr r0
      c4:	40080e41 	andmi	r0, r8, r1, asr #28
      c8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
      cc:	100e4101 	andne	r4, lr, r1, lsl #2
      d0:	00070d41 	andeq	r0, r7, r1, asr #26
      d4:	0000001c 	andeq	r0, r0, ip, lsl r0
      d8:	00000000 	andeq	r0, r0, r0
      dc:	200002fa 	strdcs	r0, [r0], -sl
      e0:	000000aa 	andeq	r0, r0, sl, lsr #1
      e4:	40080e41 	andmi	r0, r8, r1, asr #28
      e8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
      ec:	180e4101 	stmdane	lr, {r0, r8, lr}
      f0:	00070d41 	andeq	r0, r7, r1, asr #26
      f4:	0000001c 	andeq	r0, r0, ip, lsl r0
      f8:	00000000 	andeq	r0, r0, r0
      fc:	200003a4 	andcs	r0, r0, r4, lsr #7
     100:	0000006c 	andeq	r0, r0, ip, rrx
     104:	40080e41 	andmi	r0, r8, r1, asr #28
     108:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     10c:	200e4101 	andcs	r4, lr, r1, lsl #2
     110:	00070d41 	andeq	r0, r7, r1, asr #26
     114:	00000024 	andeq	r0, r0, r4, lsr #32
     118:	00000000 	andeq	r0, r0, r0
     11c:	20000410 	andcs	r0, r0, r0, lsl r4
     120:	00000134 	andeq	r0, r0, r4, lsr r1
     124:	40100e41 	andsmi	r0, r0, r1, asr #28
     128:	85400484 	strbhi	r0, [r0, #-1156]	; 0xfffffb7c
     12c:	02874003 	addeq	r4, r7, #3
     130:	41018e40 	tstmi	r1, r0, asr #28
     134:	0d41200e 	stcleq	0, cr2, [r1, #-56]	; 0xffffffc8
     138:	00000007 	andeq	r0, r0, r7
     13c:	0000001c 	andeq	r0, r0, ip, lsl r0
     140:	00000000 	andeq	r0, r0, r0
     144:	20000544 	andcs	r0, r0, r4, asr #10
     148:	00000098 	muleq	r0, r8, r0
     14c:	40080e41 	andmi	r0, r8, r1, asr #28
     150:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     154:	100e4101 	andne	r4, lr, r1, lsl #2
     158:	00070d41 	andeq	r0, r7, r1, asr #26
     15c:	00000024 	andeq	r0, r0, r4, lsr #32
     160:	00000000 	andeq	r0, r0, r0
     164:	200005dc 	ldrdcs	r0, [r0], -ip
     168:	000001bc 			; <UNDEFINED> instruction: 0x000001bc
     16c:	40140e41 	andsmi	r0, r4, r1, asr #28
     170:	85400584 	strbhi	r0, [r0, #-1412]	; 0xfffffa7c
     174:	03864004 	orreq	r4, r6, #4
     178:	40028740 	andmi	r8, r2, r0, asr #14
     17c:	0e41018e 	dvfeqd	f0, f1, #0.5
     180:	070d4138 	smladxeq	sp, r8, r1, r4
     184:	0000000c 	andeq	r0, r0, ip
     188:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     18c:	7c020001 	stcvc	0, cr0, [r2], {1}
     190:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     194:	0000001c 	andeq	r0, r0, ip, lsl r0
     198:	00000184 	andeq	r0, r0, r4, lsl #3
     19c:	20000798 	mulcs	r0, r8, r7
     1a0:	00000050 	andeq	r0, r0, r0, asr r0
     1a4:	40080e41 	andmi	r0, r8, r1, asr #28
     1a8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     1ac:	100e4101 	andne	r4, lr, r1, lsl #2
     1b0:	00070d41 	andeq	r0, r7, r1, asr #26
     1b4:	0000001c 	andeq	r0, r0, ip, lsl r0
     1b8:	00000184 	andeq	r0, r0, r4, lsl #3
     1bc:	200007e8 	andcs	r0, r0, r8, ror #15
     1c0:	000001c4 	andeq	r0, r0, r4, asr #3
     1c4:	40080e41 	andmi	r0, r8, r1, asr #28
     1c8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     1cc:	180e4101 	stmdane	lr, {r0, r8, lr}
     1d0:	00070d41 	andeq	r0, r7, r1, asr #26
     1d4:	00000020 	andeq	r0, r0, r0, lsr #32
     1d8:	00000184 	andeq	r0, r0, r4, lsl #3
     1dc:	200009ac 	andcs	r0, r0, ip, lsr #19
     1e0:	000001b0 			; <UNDEFINED> instruction: 0x000001b0
     1e4:	400c0e41 	andmi	r0, ip, r1, asr #28
     1e8:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
     1ec:	018e4002 	orreq	r4, lr, r2
     1f0:	41200e41 			; <UNDEFINED> instruction: 0x41200e41
     1f4:	0000070d 	andeq	r0, r0, sp, lsl #14
     1f8:	0000001c 	andeq	r0, r0, ip, lsl r0
     1fc:	00000184 	andeq	r0, r0, r4, lsl #3
     200:	20000b5c 	andcs	r0, r0, ip, asr fp
     204:	00000052 	andeq	r0, r0, r2, asr r0
     208:	40080e41 	andmi	r0, r8, r1, asr #28
     20c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     210:	100e4101 	andne	r4, lr, r1, lsl #2
     214:	00070d41 	andeq	r0, r7, r1, asr #26
     218:	0000001c 	andeq	r0, r0, ip, lsl r0
     21c:	00000184 	andeq	r0, r0, r4, lsl #3
     220:	20000bae 	andcs	r0, r0, lr, lsr #23
     224:	00000072 	andeq	r0, r0, r2, ror r0
     228:	40080e41 	andmi	r0, r8, r1, asr #28
     22c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     230:	100e4101 	andne	r4, lr, r1, lsl #2
     234:	00070d41 	andeq	r0, r7, r1, asr #26
     238:	0000001c 	andeq	r0, r0, ip, lsl r0
     23c:	00000184 	andeq	r0, r0, r4, lsl #3
     240:	20000c20 	andcs	r0, r0, r0, lsr #24
     244:	00000040 	andeq	r0, r0, r0, asr #32
     248:	40080e41 	andmi	r0, r8, r1, asr #28
     24c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     250:	100e4101 	andne	r4, lr, r1, lsl #2
     254:	00070d41 	andeq	r0, r7, r1, asr #26
     258:	0000001c 	andeq	r0, r0, ip, lsl r0
     25c:	00000184 	andeq	r0, r0, r4, lsl #3
     260:	20000c60 	andcs	r0, r0, r0, ror #24
     264:	000000c8 	andeq	r0, r0, r8, asr #1
     268:	40080e41 	andmi	r0, r8, r1, asr #28
     26c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     270:	100e4101 	andne	r4, lr, r1, lsl #2
     274:	00070d41 	andeq	r0, r7, r1, asr #26
     278:	00000020 	andeq	r0, r0, r0, lsr #32
     27c:	00000184 	andeq	r0, r0, r4, lsl #3
     280:	20000d28 	andcs	r0, r0, r8, lsr #26
     284:	000001e2 	andeq	r0, r0, r2, ror #3
     288:	400c0e41 	andmi	r0, ip, r1, asr #28
     28c:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
     290:	018e4002 	orreq	r4, lr, r2
     294:	41200e41 			; <UNDEFINED> instruction: 0x41200e41
     298:	0000070d 	andeq	r0, r0, sp, lsl #14
     29c:	0000001c 	andeq	r0, r0, ip, lsl r0
     2a0:	00000184 	andeq	r0, r0, r4, lsl #3
     2a4:	20000f0a 	andcs	r0, r0, sl, lsl #30
     2a8:	000000d6 	ldrdeq	r0, [r0], -r6
     2ac:	40080e41 	andmi	r0, r8, r1, asr #28
     2b0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     2b4:	180e4101 	stmdane	lr, {r0, r8, lr}
     2b8:	00070d41 	andeq	r0, r7, r1, asr #26
     2bc:	0000001c 	andeq	r0, r0, ip, lsl r0
     2c0:	00000184 	andeq	r0, r0, r4, lsl #3
     2c4:	20000fe0 	andcs	r0, r0, r0, ror #31
     2c8:	00000056 	andeq	r0, r0, r6, asr r0
     2cc:	40080e41 	andmi	r0, r8, r1, asr #28
     2d0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     2d4:	100e4101 	andne	r4, lr, r1, lsl #2
     2d8:	00070d41 	andeq	r0, r7, r1, asr #26
     2dc:	0000001c 	andeq	r0, r0, ip, lsl r0
     2e0:	00000184 	andeq	r0, r0, r4, lsl #3
     2e4:	20001036 	andcs	r1, r0, r6, lsr r0
     2e8:	000001aa 	andeq	r0, r0, sl, lsr #3
     2ec:	40080e41 	andmi	r0, r8, r1, asr #28
     2f0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     2f4:	180e4101 	stmdane	lr, {r0, r8, lr}
     2f8:	00070d41 	andeq	r0, r7, r1, asr #26
     2fc:	0000001c 	andeq	r0, r0, ip, lsl r0
     300:	00000184 	andeq	r0, r0, r4, lsl #3
     304:	200011e0 	andcs	r1, r0, r0, ror #3
     308:	00000038 	andeq	r0, r0, r8, lsr r0
     30c:	40080e41 	andmi	r0, r8, r1, asr #28
     310:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     314:	100e4101 	andne	r4, lr, r1, lsl #2
     318:	00070d41 	andeq	r0, r7, r1, asr #26
     31c:	0000001c 	andeq	r0, r0, ip, lsl r0
     320:	00000184 	andeq	r0, r0, r4, lsl #3
     324:	20001218 	andcs	r1, r0, r8, lsl r2
     328:	00000060 	andeq	r0, r0, r0, rrx
     32c:	40080e41 	andmi	r0, r8, r1, asr #28
     330:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     334:	180e4101 	stmdane	lr, {r0, r8, lr}
     338:	00070d41 	andeq	r0, r7, r1, asr #26
     33c:	0000001c 	andeq	r0, r0, ip, lsl r0
     340:	00000184 	andeq	r0, r0, r4, lsl #3
     344:	20001278 	andcs	r1, r0, r8, ror r2
     348:	00000124 	andeq	r0, r0, r4, lsr #2
     34c:	40080e41 	andmi	r0, r8, r1, asr #28
     350:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     354:	180e4101 	stmdane	lr, {r0, r8, lr}
     358:	00070d41 	andeq	r0, r7, r1, asr #26
     35c:	0000001c 	andeq	r0, r0, ip, lsl r0
     360:	00000184 	andeq	r0, r0, r4, lsl #3
     364:	2000139c 	mulcs	r0, ip, r3
     368:	00000042 	andeq	r0, r0, r2, asr #32
     36c:	40080e41 	andmi	r0, r8, r1, asr #28
     370:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     374:	180e4101 	stmdane	lr, {r0, r8, lr}
     378:	00070d41 	andeq	r0, r7, r1, asr #26
     37c:	0000001c 	andeq	r0, r0, ip, lsl r0
     380:	00000184 	andeq	r0, r0, r4, lsl #3
     384:	200013de 	ldrdcs	r1, [r0], -lr
     388:	00000062 	andeq	r0, r0, r2, rrx
     38c:	40080e41 	andmi	r0, r8, r1, asr #28
     390:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     394:	180e4101 	stmdane	lr, {r0, r8, lr}
     398:	00070d41 	andeq	r0, r7, r1, asr #26
     39c:	0000001c 	andeq	r0, r0, ip, lsl r0
     3a0:	00000184 	andeq	r0, r0, r4, lsl #3
     3a4:	20001440 	andcs	r1, r0, r0, asr #8
     3a8:	0000002e 	andeq	r0, r0, lr, lsr #32
     3ac:	40080e41 	andmi	r0, r8, r1, asr #28
     3b0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     3b4:	180e4101 	stmdane	lr, {r0, r8, lr}
     3b8:	00070d41 	andeq	r0, r7, r1, asr #26
     3bc:	0000001c 	andeq	r0, r0, ip, lsl r0
     3c0:	00000184 	andeq	r0, r0, r4, lsl #3
     3c4:	2000146e 	andcs	r1, r0, lr, ror #8
     3c8:	00000026 	andeq	r0, r0, r6, lsr #32
     3cc:	40080e41 	andmi	r0, r8, r1, asr #28
     3d0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     3d4:	180e4101 	stmdane	lr, {r0, r8, lr}
     3d8:	00070d41 	andeq	r0, r7, r1, asr #26
     3dc:	0000001c 	andeq	r0, r0, ip, lsl r0
     3e0:	00000184 	andeq	r0, r0, r4, lsl #3
     3e4:	20001494 	mulcs	r0, r4, r4
     3e8:	00000026 	andeq	r0, r0, r6, lsr #32
     3ec:	40080e41 	andmi	r0, r8, r1, asr #28
     3f0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     3f4:	180e4101 	stmdane	lr, {r0, r8, lr}
     3f8:	00070d41 	andeq	r0, r7, r1, asr #26
     3fc:	0000001c 	andeq	r0, r0, ip, lsl r0
     400:	00000184 	andeq	r0, r0, r4, lsl #3
     404:	200014ba 			; <UNDEFINED> instruction: 0x200014ba
     408:	0000003a 	andeq	r0, r0, sl, lsr r0
     40c:	40080e41 	andmi	r0, r8, r1, asr #28
     410:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     414:	180e4101 	stmdane	lr, {r0, r8, lr}
     418:	00070d41 	andeq	r0, r7, r1, asr #26
     41c:	0000001c 	andeq	r0, r0, ip, lsl r0
     420:	00000184 	andeq	r0, r0, r4, lsl #3
     424:	200014f4 	strdcs	r1, [r0], -r4
     428:	000000f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     42c:	40080e41 	andmi	r0, r8, r1, asr #28
     430:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     434:	180e4101 	stmdane	lr, {r0, r8, lr}
     438:	00070d41 	andeq	r0, r7, r1, asr #26
     43c:	0000001c 	andeq	r0, r0, ip, lsl r0
     440:	00000184 	andeq	r0, r0, r4, lsl #3
     444:	200015e4 	andcs	r1, r0, r4, ror #11
     448:	00000070 	andeq	r0, r0, r0, ror r0
     44c:	40080e41 	andmi	r0, r8, r1, asr #28
     450:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     454:	180e4101 	stmdane	lr, {r0, r8, lr}
     458:	00070d41 	andeq	r0, r7, r1, asr #26
     45c:	00000020 	andeq	r0, r0, r0, lsr #32
     460:	00000184 	andeq	r0, r0, r4, lsl #3
     464:	20001654 	andcs	r1, r0, r4, asr r6
     468:	000001f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     46c:	400c0e41 	andmi	r0, ip, r1, asr #28
     470:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
     474:	018e4002 	orreq	r4, lr, r2
     478:	41200e41 			; <UNDEFINED> instruction: 0x41200e41
     47c:	0000070d 	andeq	r0, r0, sp, lsl #14
     480:	0000001c 	andeq	r0, r0, ip, lsl r0
     484:	00000184 	andeq	r0, r0, r4, lsl #3
     488:	20001844 	andcs	r1, r0, r4, asr #16
     48c:	000000ec 	andeq	r0, r0, ip, ror #1
     490:	40080e41 	andmi	r0, r8, r1, asr #28
     494:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     498:	100e4101 	andne	r4, lr, r1, lsl #2
     49c:	00070d41 	andeq	r0, r7, r1, asr #26
     4a0:	0000001c 	andeq	r0, r0, ip, lsl r0
     4a4:	00000184 	andeq	r0, r0, r4, lsl #3
     4a8:	20001930 	andcs	r1, r0, r0, lsr r9
     4ac:	0000003a 	andeq	r0, r0, sl, lsr r0
     4b0:	40080e41 	andmi	r0, r8, r1, asr #28
     4b4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     4b8:	180e4101 	stmdane	lr, {r0, r8, lr}
     4bc:	00070d41 	andeq	r0, r7, r1, asr #26
     4c0:	0000000c 	andeq	r0, r0, ip
     4c4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     4c8:	7c020001 	stcvc	0, cr0, [r2], {1}
     4cc:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     4d0:	0000001c 	andeq	r0, r0, ip, lsl r0
     4d4:	000004c0 	andeq	r0, r0, r0, asr #9
     4d8:	2000196c 	andcs	r1, r0, ip, ror #18
     4dc:	00000170 	andeq	r0, r0, r0, ror r1
     4e0:	40080e41 	andmi	r0, r8, r1, asr #28
     4e4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     4e8:	100e4101 	andne	r4, lr, r1, lsl #2
     4ec:	00070d41 	andeq	r0, r7, r1, asr #26
     4f0:	0000001c 	andeq	r0, r0, ip, lsl r0
     4f4:	000004c0 	andeq	r0, r0, r0, asr #9
     4f8:	20001adc 	ldrdcs	r1, [r0], -ip
     4fc:	00000118 	andeq	r0, r0, r8, lsl r1
     500:	40080e41 	andmi	r0, r8, r1, asr #28
     504:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     508:	200e4101 	andcs	r4, lr, r1, lsl #2
     50c:	00070d41 	andeq	r0, r7, r1, asr #26
     510:	0000001c 	andeq	r0, r0, ip, lsl r0
     514:	000004c0 	andeq	r0, r0, r0, asr #9
     518:	20001bf4 	strdcs	r1, [r0], -r4
     51c:	00000034 	andeq	r0, r0, r4, lsr r0
     520:	40080e41 	andmi	r0, r8, r1, asr #28
     524:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     528:	100e4101 	andne	r4, lr, r1, lsl #2
     52c:	00070d41 	andeq	r0, r7, r1, asr #26
     530:	0000001c 	andeq	r0, r0, ip, lsl r0
     534:	000004c0 	andeq	r0, r0, r0, asr #9
     538:	20001c28 	andcs	r1, r0, r8, lsr #24
     53c:	00000046 	andeq	r0, r0, r6, asr #32
     540:	40080e41 	andmi	r0, r8, r1, asr #28
     544:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     548:	180e4101 	stmdane	lr, {r0, r8, lr}
     54c:	00070d41 	andeq	r0, r7, r1, asr #26
     550:	0000001c 	andeq	r0, r0, ip, lsl r0
     554:	000004c0 	andeq	r0, r0, r0, asr #9
     558:	20001c6e 	andcs	r1, r0, lr, ror #24
     55c:	00000042 	andeq	r0, r0, r2, asr #32
     560:	40080e41 	andmi	r0, r8, r1, asr #28
     564:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     568:	180e4101 	stmdane	lr, {r0, r8, lr}
     56c:	00070d41 	andeq	r0, r7, r1, asr #26
     570:	0000001c 	andeq	r0, r0, ip, lsl r0
     574:	000004c0 	andeq	r0, r0, r0, asr #9
     578:	20001cb0 			; <UNDEFINED> instruction: 0x20001cb0
     57c:	00000016 	andeq	r0, r0, r6, lsl r0
     580:	40080e41 	andmi	r0, r8, r1, asr #28
     584:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     588:	100e4101 	andne	r4, lr, r1, lsl #2
     58c:	00070d41 	andeq	r0, r7, r1, asr #26
     590:	0000001c 	andeq	r0, r0, ip, lsl r0
     594:	000004c0 	andeq	r0, r0, r0, asr #9
     598:	20001cc6 	andcs	r1, r0, r6, asr #25
     59c:	00000042 	andeq	r0, r0, r2, asr #32
     5a0:	40080e41 	andmi	r0, r8, r1, asr #28
     5a4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     5a8:	180e4101 	stmdane	lr, {r0, r8, lr}
     5ac:	00070d41 	andeq	r0, r7, r1, asr #26
     5b0:	0000001c 	andeq	r0, r0, ip, lsl r0
     5b4:	000004c0 	andeq	r0, r0, r0, asr #9
     5b8:	20001d08 	andcs	r1, r0, r8, lsl #26
     5bc:	00000016 	andeq	r0, r0, r6, lsl r0
     5c0:	40080e41 	andmi	r0, r8, r1, asr #28
     5c4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     5c8:	100e4101 	andne	r4, lr, r1, lsl #2
     5cc:	00070d41 	andeq	r0, r7, r1, asr #26
     5d0:	0000001c 	andeq	r0, r0, ip, lsl r0
     5d4:	000004c0 	andeq	r0, r0, r0, asr #9
     5d8:	20001d1e 	andcs	r1, r0, lr, lsl sp
     5dc:	0000001e 	andeq	r0, r0, lr, lsl r0
     5e0:	40080e41 	andmi	r0, r8, r1, asr #28
     5e4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     5e8:	100e4101 	andne	r4, lr, r1, lsl #2
     5ec:	00070d41 	andeq	r0, r7, r1, asr #26
     5f0:	0000001c 	andeq	r0, r0, ip, lsl r0
     5f4:	000004c0 	andeq	r0, r0, r0, asr #9
     5f8:	20001d3c 	andcs	r1, r0, ip, lsr sp
     5fc:	0000001e 	andeq	r0, r0, lr, lsl r0
     600:	40080e41 	andmi	r0, r8, r1, asr #28
     604:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     608:	100e4101 	andne	r4, lr, r1, lsl #2
     60c:	00070d41 	andeq	r0, r7, r1, asr #26
     610:	0000001c 	andeq	r0, r0, ip, lsl r0
     614:	000004c0 	andeq	r0, r0, r0, asr #9
     618:	20001d5a 	andcs	r1, r0, sl, asr sp
     61c:	0000003a 	andeq	r0, r0, sl, lsr r0
     620:	40080e41 	andmi	r0, r8, r1, asr #28
     624:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     628:	100e4101 	andne	r4, lr, r1, lsl #2
     62c:	00070d41 	andeq	r0, r7, r1, asr #26
     630:	0000001c 	andeq	r0, r0, ip, lsl r0
     634:	000004c0 	andeq	r0, r0, r0, asr #9
     638:	20001d94 	mulcs	r0, r4, sp
     63c:	0000001e 	andeq	r0, r0, lr, lsl r0
     640:	40080e41 	andmi	r0, r8, r1, asr #28
     644:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     648:	100e4101 	andne	r4, lr, r1, lsl #2
     64c:	00070d41 	andeq	r0, r7, r1, asr #26
     650:	0000001c 	andeq	r0, r0, ip, lsl r0
     654:	000004c0 	andeq	r0, r0, r0, asr #9
     658:	20001db2 			; <UNDEFINED> instruction: 0x20001db2
     65c:	00000024 	andeq	r0, r0, r4, lsr #32
     660:	40080e41 	andmi	r0, r8, r1, asr #28
     664:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     668:	100e4101 	andne	r4, lr, r1, lsl #2
     66c:	00070d41 	andeq	r0, r7, r1, asr #26
     670:	0000001c 	andeq	r0, r0, ip, lsl r0
     674:	000004c0 	andeq	r0, r0, r0, asr #9
     678:	20001dd6 	ldrdcs	r1, [r0], -r6
     67c:	000000a4 	andeq	r0, r0, r4, lsr #1
     680:	40080e41 	andmi	r0, r8, r1, asr #28
     684:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     688:	180e4101 	stmdane	lr, {r0, r8, lr}
     68c:	00070d41 	andeq	r0, r7, r1, asr #26
     690:	0000000c 	andeq	r0, r0, ip
     694:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     698:	7c020001 	stcvc	0, cr0, [r2], {1}
     69c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     6a0:	00000020 	andeq	r0, r0, r0, lsr #32
     6a4:	00000690 	muleq	r0, r0, r6
     6a8:	20001e7c 	andcs	r1, r0, ip, ror lr
     6ac:	000000d4 	ldrdeq	r0, [r0], -r4
     6b0:	400c0e41 	andmi	r0, ip, r1, asr #28
     6b4:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
     6b8:	018e4002 	orreq	r4, lr, r2
     6bc:	41200e41 			; <UNDEFINED> instruction: 0x41200e41
     6c0:	0000070d 	andeq	r0, r0, sp, lsl #14
     6c4:	0000001c 	andeq	r0, r0, ip, lsl r0
     6c8:	00000690 	muleq	r0, r0, r6
     6cc:	20001f50 	andcs	r1, r0, r0, asr pc
     6d0:	0000009c 	muleq	r0, ip, r0
     6d4:	40080e41 	andmi	r0, r8, r1, asr #28
     6d8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     6dc:	200e4101 	andcs	r4, lr, r1, lsl #2
     6e0:	00070d41 	andeq	r0, r7, r1, asr #26
     6e4:	0000001c 	andeq	r0, r0, ip, lsl r0
     6e8:	00000690 	muleq	r0, r0, r6
     6ec:	20001fec 	andcs	r1, r0, ip, ror #31
     6f0:	00000088 	andeq	r0, r0, r8, lsl #1
     6f4:	40080e41 	andmi	r0, r8, r1, asr #28
     6f8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     6fc:	200e4101 	andcs	r4, lr, r1, lsl #2
     700:	00070d41 	andeq	r0, r7, r1, asr #26
     704:	0000001c 	andeq	r0, r0, ip, lsl r0
     708:	00000690 	muleq	r0, r0, r6
     70c:	20002074 	andcs	r2, r0, r4, ror r0
     710:	00000028 	andeq	r0, r0, r8, lsr #32
     714:	40080e41 	andmi	r0, r8, r1, asr #28
     718:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     71c:	180e4101 	stmdane	lr, {r0, r8, lr}
     720:	00070d41 	andeq	r0, r7, r1, asr #26
     724:	00000020 	andeq	r0, r0, r0, lsr #32
     728:	00000690 	muleq	r0, r0, r6
     72c:	2000209c 	mulcs	r0, ip, r0
     730:	00000088 	andeq	r0, r0, r8, lsl #1
     734:	400c0e41 	andmi	r0, ip, r1, asr #28
     738:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
     73c:	018e4002 	orreq	r4, lr, r2
     740:	41200e41 			; <UNDEFINED> instruction: 0x41200e41
     744:	0000070d 	andeq	r0, r0, sp, lsl #14
     748:	00000020 	andeq	r0, r0, r0, lsr #32
     74c:	00000690 	muleq	r0, r0, r6
     750:	20002124 	andcs	r2, r0, r4, lsr #2
     754:	00000098 	muleq	r0, r8, r0
     758:	400c0e41 	andmi	r0, ip, r1, asr #28
     75c:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
     760:	018e4002 	orreq	r4, lr, r2
     764:	41200e41 			; <UNDEFINED> instruction: 0x41200e41
     768:	0000070d 	andeq	r0, r0, sp, lsl #14
     76c:	0000001c 	andeq	r0, r0, ip, lsl r0
     770:	00000690 	muleq	r0, r0, r6
     774:	200021bc 			; <UNDEFINED> instruction: 0x200021bc
     778:	0000003a 	andeq	r0, r0, sl, lsr r0
     77c:	40080e41 	andmi	r0, r8, r1, asr #28
     780:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     784:	200e4101 	andcs	r4, lr, r1, lsl #2
     788:	00070d41 	andeq	r0, r7, r1, asr #26
     78c:	0000001c 	andeq	r0, r0, ip, lsl r0
     790:	00000690 	muleq	r0, r0, r6
     794:	200021f6 	strdcs	r2, [r0], -r6
     798:	0000003a 	andeq	r0, r0, sl, lsr r0
     79c:	40080e41 	andmi	r0, r8, r1, asr #28
     7a0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     7a4:	100e4101 	andne	r4, lr, r1, lsl #2
     7a8:	00070d41 	andeq	r0, r7, r1, asr #26
     7ac:	0000001c 	andeq	r0, r0, ip, lsl r0
     7b0:	00000690 	muleq	r0, r0, r6
     7b4:	20002230 	andcs	r2, r0, r0, lsr r2
     7b8:	0000001e 	andeq	r0, r0, lr, lsl r0
     7bc:	40080e41 	andmi	r0, r8, r1, asr #28
     7c0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     7c4:	100e4101 	andne	r4, lr, r1, lsl #2
     7c8:	00070d41 	andeq	r0, r7, r1, asr #26
     7cc:	0000000c 	andeq	r0, r0, ip
     7d0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     7d4:	7c020001 	stcvc	0, cr0, [r2], {1}
     7d8:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     7dc:	00000018 	andeq	r0, r0, r8, lsl r0
     7e0:	000007cc 	andeq	r0, r0, ip, asr #15
     7e4:	20002250 	andcs	r2, r0, r0, asr r2
     7e8:	0000001a 	andeq	r0, r0, sl, lsl r0
     7ec:	40080e41 	andmi	r0, r8, r1, asr #28
     7f0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     7f4:	070d4101 	streq	r4, [sp, -r1, lsl #2]
     7f8:	0000001c 	andeq	r0, r0, ip, lsl r0
     7fc:	000007cc 	andeq	r0, r0, ip, asr #15
     800:	2000226a 	andcs	r2, r0, sl, ror #4
     804:	0000003a 	andeq	r0, r0, sl, lsr r0
     808:	40080e41 	andmi	r0, r8, r1, asr #28
     80c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     810:	100e4101 	andne	r4, lr, r1, lsl #2
     814:	00070d41 	andeq	r0, r7, r1, asr #26
     818:	00000018 	andeq	r0, r0, r8, lsl r0
     81c:	000007cc 	andeq	r0, r0, ip, asr #15
     820:	200022a4 	andcs	r2, r0, r4, lsr #5
     824:	00000014 	andeq	r0, r0, r4, lsl r0
     828:	40080e41 	andmi	r0, r8, r1, asr #28
     82c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     830:	070d4101 	streq	r4, [sp, -r1, lsl #2]
     834:	0000001c 	andeq	r0, r0, ip, lsl r0
     838:	000007cc 	andeq	r0, r0, ip, asr #15
     83c:	200022b8 			; <UNDEFINED> instruction: 0x200022b8
     840:	0000003c 	andeq	r0, r0, ip, lsr r0
     844:	40080e41 	andmi	r0, r8, r1, asr #28
     848:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     84c:	100e4101 	andne	r4, lr, r1, lsl #2
     850:	00070d41 	andeq	r0, r7, r1, asr #26
     854:	0000001c 	andeq	r0, r0, ip, lsl r0
     858:	000007cc 	andeq	r0, r0, ip, asr #15
     85c:	200022f4 	strdcs	r2, [r0], -r4
     860:	00000044 	andeq	r0, r0, r4, asr #32
     864:	40080e41 	andmi	r0, r8, r1, asr #28
     868:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     86c:	180e4101 	stmdane	lr, {r0, r8, lr}
     870:	00070d41 	andeq	r0, r7, r1, asr #26
     874:	0000001c 	andeq	r0, r0, ip, lsl r0
     878:	000007cc 	andeq	r0, r0, ip, asr #15
     87c:	20002338 	andcs	r2, r0, r8, lsr r3
     880:	00000024 	andeq	r0, r0, r4, lsr #32
     884:	40080e41 	andmi	r0, r8, r1, asr #28
     888:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     88c:	100e4101 	andne	r4, lr, r1, lsl #2
     890:	00070d41 	andeq	r0, r7, r1, asr #26
     894:	0000001c 	andeq	r0, r0, ip, lsl r0
     898:	000007cc 	andeq	r0, r0, ip, asr #15
     89c:	2000235c 	andcs	r2, r0, ip, asr r3
     8a0:	00000044 	andeq	r0, r0, r4, asr #32
     8a4:	40080e41 	andmi	r0, r8, r1, asr #28
     8a8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     8ac:	180e4101 	stmdane	lr, {r0, r8, lr}
     8b0:	00070d41 	andeq	r0, r7, r1, asr #26
     8b4:	0000001c 	andeq	r0, r0, ip, lsl r0
     8b8:	000007cc 	andeq	r0, r0, ip, asr #15
     8bc:	200023a0 	andcs	r2, r0, r0, lsr #7
     8c0:	00000024 	andeq	r0, r0, r4, lsr #32
     8c4:	40080e41 	andmi	r0, r8, r1, asr #28
     8c8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     8cc:	100e4101 	andne	r4, lr, r1, lsl #2
     8d0:	00070d41 	andeq	r0, r7, r1, asr #26
     8d4:	0000000c 	andeq	r0, r0, ip
     8d8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     8dc:	7c020001 	stcvc	0, cr0, [r2], {1}
     8e0:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     8e4:	0000001c 	andeq	r0, r0, ip, lsl r0
     8e8:	000008d4 	ldrdeq	r0, [r0], -r4
     8ec:	200023c4 	andcs	r2, r0, r4, asr #7
     8f0:	00000024 	andeq	r0, r0, r4, lsr #32
     8f4:	40080e41 	andmi	r0, r8, r1, asr #28
     8f8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     8fc:	100e4101 	andne	r4, lr, r1, lsl #2
     900:	00070d41 	andeq	r0, r7, r1, asr #26
     904:	00000024 	andeq	r0, r0, r4, lsr #32
     908:	000008d4 	ldrdeq	r0, [r0], -r4
     90c:	200023e8 	andcs	r2, r0, r8, ror #7
     910:	000000f8 	strdeq	r0, [r0], -r8
     914:	40100e41 	andsmi	r0, r0, r1, asr #28
     918:	85400484 	strbhi	r0, [r0, #-1156]	; 0xfffffb7c
     91c:	02874003 	addeq	r4, r7, #3
     920:	41018e40 	tstmi	r1, r0, asr #28
     924:	0d41200e 	stcleq	0, cr2, [r1, #-56]	; 0xffffffc8
     928:	00000007 	andeq	r0, r0, r7
     92c:	0000001c 	andeq	r0, r0, ip, lsl r0
     930:	000008d4 	ldrdeq	r0, [r0], -r4
     934:	200024e0 	andcs	r2, r0, r0, ror #9
     938:	0000002c 	andeq	r0, r0, ip, lsr #32
     93c:	40080e41 	andmi	r0, r8, r1, asr #28
     940:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     944:	100e4101 	andne	r4, lr, r1, lsl #2
     948:	00070d41 	andeq	r0, r7, r1, asr #26
     94c:	0000001c 	andeq	r0, r0, ip, lsl r0
     950:	000008d4 	ldrdeq	r0, [r0], -r4
     954:	2000250c 	andcs	r2, r0, ip, lsl #10
     958:	00000048 	andeq	r0, r0, r8, asr #32
     95c:	40080e41 	andmi	r0, r8, r1, asr #28
     960:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     964:	100e4101 	andne	r4, lr, r1, lsl #2
     968:	00070d41 	andeq	r0, r7, r1, asr #26
     96c:	0000001c 	andeq	r0, r0, ip, lsl r0
     970:	000008d4 	ldrdeq	r0, [r0], -r4
     974:	20002554 	andcs	r2, r0, r4, asr r5
     978:	00000034 	andeq	r0, r0, r4, lsr r0
     97c:	40080e41 	andmi	r0, r8, r1, asr #28
     980:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     984:	100e4101 	andne	r4, lr, r1, lsl #2
     988:	00070d41 	andeq	r0, r7, r1, asr #26
     98c:	0000000c 	andeq	r0, r0, ip
     990:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     994:	7c020001 	stcvc	0, cr0, [r2], {1}
     998:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     99c:	0000001c 	andeq	r0, r0, ip, lsl r0
     9a0:	0000098c 	andeq	r0, r0, ip, lsl #19
     9a4:	20002588 	andcs	r2, r0, r8, lsl #11
     9a8:	00000060 	andeq	r0, r0, r0, rrx
     9ac:	40080e41 	andmi	r0, r8, r1, asr #28
     9b0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     9b4:	100e4101 	andne	r4, lr, r1, lsl #2
     9b8:	00070d41 	andeq	r0, r7, r1, asr #26
     9bc:	0000001c 	andeq	r0, r0, ip, lsl r0
     9c0:	0000098c 	andeq	r0, r0, ip, lsl #19
     9c4:	200025e8 	andcs	r2, r0, r8, ror #11
     9c8:	00000048 	andeq	r0, r0, r8, asr #32
     9cc:	40080e41 	andmi	r0, r8, r1, asr #28
     9d0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     9d4:	100e4101 	andne	r4, lr, r1, lsl #2
     9d8:	00070d41 	andeq	r0, r7, r1, asr #26
     9dc:	00000018 	andeq	r0, r0, r8, lsl r0
     9e0:	0000098c 	andeq	r0, r0, ip, lsl #19
     9e4:	20002630 	andcs	r2, r0, r0, lsr r6
     9e8:	00000070 	andeq	r0, r0, r0, ror r0
     9ec:	40080e41 	andmi	r0, r8, r1, asr #28
     9f0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     9f4:	070d4101 	streq	r4, [sp, -r1, lsl #2]
     9f8:	0000001c 	andeq	r0, r0, ip, lsl r0
     9fc:	0000098c 	andeq	r0, r0, ip, lsl #19
     a00:	200026a0 	andcs	r2, r0, r0, lsr #13
     a04:	00000028 	andeq	r0, r0, r8, lsr #32
     a08:	40080e41 	andmi	r0, r8, r1, asr #28
     a0c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     a10:	100e4101 	andne	r4, lr, r1, lsl #2
     a14:	00070d41 	andeq	r0, r7, r1, asr #26
     a18:	00000020 	andeq	r0, r0, r0, lsr #32
     a1c:	0000098c 	andeq	r0, r0, ip, lsl #19
     a20:	200026c8 	andcs	r2, r0, r8, asr #13
     a24:	0000005e 	andeq	r0, r0, lr, asr r0
     a28:	400c0e41 	andmi	r0, ip, r1, asr #28
     a2c:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
     a30:	018e4002 	orreq	r4, lr, r2
     a34:	41180e41 	tstmi	r8, r1, asr #28
     a38:	0000070d 	andeq	r0, r0, sp, lsl #14
     a3c:	0000001c 	andeq	r0, r0, ip, lsl r0
     a40:	0000098c 	andeq	r0, r0, ip, lsl #19
     a44:	20002726 	andcs	r2, r0, r6, lsr #14
     a48:	0000003e 	andeq	r0, r0, lr, lsr r0
     a4c:	40080e41 	andmi	r0, r8, r1, asr #28
     a50:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     a54:	180e4101 	stmdane	lr, {r0, r8, lr}
     a58:	00070d41 	andeq	r0, r7, r1, asr #26
     a5c:	0000001c 	andeq	r0, r0, ip, lsl r0
     a60:	0000098c 	andeq	r0, r0, ip, lsl #19
     a64:	20002764 	andcs	r2, r0, r4, ror #14
     a68:	00000020 	andeq	r0, r0, r0, lsr #32
     a6c:	40080e41 	andmi	r0, r8, r1, asr #28
     a70:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     a74:	100e4101 	andne	r4, lr, r1, lsl #2
     a78:	00070d41 	andeq	r0, r7, r1, asr #26
     a7c:	0000001c 	andeq	r0, r0, ip, lsl r0
     a80:	0000098c 	andeq	r0, r0, ip, lsl #19
     a84:	20002784 	andcs	r2, r0, r4, lsl #15
     a88:	00000044 	andeq	r0, r0, r4, asr #32
     a8c:	40080e41 	andmi	r0, r8, r1, asr #28
     a90:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     a94:	100e4101 	andne	r4, lr, r1, lsl #2
     a98:	00070d41 	andeq	r0, r7, r1, asr #26
     a9c:	0000001c 	andeq	r0, r0, ip, lsl r0
     aa0:	0000098c 	andeq	r0, r0, ip, lsl #19
     aa4:	200027c8 	andcs	r2, r0, r8, asr #15
     aa8:	00000020 	andeq	r0, r0, r0, lsr #32
     aac:	40080e41 	andmi	r0, r8, r1, asr #28
     ab0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     ab4:	100e4101 	andne	r4, lr, r1, lsl #2
     ab8:	00070d41 	andeq	r0, r7, r1, asr #26
     abc:	0000001c 	andeq	r0, r0, ip, lsl r0
     ac0:	0000098c 	andeq	r0, r0, ip, lsl #19
     ac4:	200027e8 	andcs	r2, r0, r8, ror #15
     ac8:	0000003c 	andeq	r0, r0, ip, lsr r0
     acc:	40080e41 	andmi	r0, r8, r1, asr #28
     ad0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     ad4:	180e4101 	stmdane	lr, {r0, r8, lr}
     ad8:	00070d41 	andeq	r0, r7, r1, asr #26
     adc:	0000001c 	andeq	r0, r0, ip, lsl r0
     ae0:	0000098c 	andeq	r0, r0, ip, lsl #19
     ae4:	20002824 	andcs	r2, r0, r4, lsr #16
     ae8:	00000020 	andeq	r0, r0, r0, lsr #32
     aec:	40080e41 	andmi	r0, r8, r1, asr #28
     af0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     af4:	100e4101 	andne	r4, lr, r1, lsl #2
     af8:	00070d41 	andeq	r0, r7, r1, asr #26
     afc:	0000001c 	andeq	r0, r0, ip, lsl r0
     b00:	0000098c 	andeq	r0, r0, ip, lsl #19
     b04:	20002844 	andcs	r2, r0, r4, asr #16
     b08:	00000028 	andeq	r0, r0, r8, lsr #32
     b0c:	40080e41 	andmi	r0, r8, r1, asr #28
     b10:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     b14:	100e4101 	andne	r4, lr, r1, lsl #2
     b18:	00070d41 	andeq	r0, r7, r1, asr #26
     b1c:	0000001c 	andeq	r0, r0, ip, lsl r0
     b20:	0000098c 	andeq	r0, r0, ip, lsl #19
     b24:	2000286c 	andcs	r2, r0, ip, ror #16
     b28:	00000020 	andeq	r0, r0, r0, lsr #32
     b2c:	40080e41 	andmi	r0, r8, r1, asr #28
     b30:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     b34:	100e4101 	andne	r4, lr, r1, lsl #2
     b38:	00070d41 	andeq	r0, r7, r1, asr #26
     b3c:	0000001c 	andeq	r0, r0, ip, lsl r0
     b40:	0000098c 	andeq	r0, r0, ip, lsl #19
     b44:	2000288c 	andcs	r2, r0, ip, lsl #17
     b48:	00000030 	andeq	r0, r0, r0, lsr r0
     b4c:	40080e41 	andmi	r0, r8, r1, asr #28
     b50:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     b54:	180e4101 	stmdane	lr, {r0, r8, lr}
     b58:	00070d41 	andeq	r0, r7, r1, asr #26
     b5c:	0000001c 	andeq	r0, r0, ip, lsl r0
     b60:	0000098c 	andeq	r0, r0, ip, lsl #19
     b64:	200028bc 			; <UNDEFINED> instruction: 0x200028bc
     b68:	00000020 	andeq	r0, r0, r0, lsr #32
     b6c:	40080e41 	andmi	r0, r8, r1, asr #28
     b70:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     b74:	100e4101 	andne	r4, lr, r1, lsl #2
     b78:	00070d41 	andeq	r0, r7, r1, asr #26
     b7c:	0000001c 	andeq	r0, r0, ip, lsl r0
     b80:	0000098c 	andeq	r0, r0, ip, lsl #19
     b84:	200028dc 	ldrdcs	r2, [r0], -ip
     b88:	00000020 	andeq	r0, r0, r0, lsr #32
     b8c:	40080e41 	andmi	r0, r8, r1, asr #28
     b90:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     b94:	100e4101 	andne	r4, lr, r1, lsl #2
     b98:	00070d41 	andeq	r0, r7, r1, asr #26
     b9c:	0000001c 	andeq	r0, r0, ip, lsl r0
     ba0:	0000098c 	andeq	r0, r0, ip, lsl #19
     ba4:	200028fc 	strdcs	r2, [r0], -ip
     ba8:	00000040 	andeq	r0, r0, r0, asr #32
     bac:	40080e41 	andmi	r0, r8, r1, asr #28
     bb0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     bb4:	180e4101 	stmdane	lr, {r0, r8, lr}
     bb8:	00070d41 	andeq	r0, r7, r1, asr #26
     bbc:	0000001c 	andeq	r0, r0, ip, lsl r0
     bc0:	0000098c 	andeq	r0, r0, ip, lsl #19
     bc4:	2000293c 	andcs	r2, r0, ip, lsr r9
     bc8:	0000003c 	andeq	r0, r0, ip, lsr r0
     bcc:	40080e41 	andmi	r0, r8, r1, asr #28
     bd0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     bd4:	180e4101 	stmdane	lr, {r0, r8, lr}
     bd8:	00070d41 	andeq	r0, r7, r1, asr #26
     bdc:	0000001c 	andeq	r0, r0, ip, lsl r0
     be0:	0000098c 	andeq	r0, r0, ip, lsl #19
     be4:	20002978 	andcs	r2, r0, r8, ror r9
     be8:	00000034 	andeq	r0, r0, r4, lsr r0
     bec:	40080e41 	andmi	r0, r8, r1, asr #28
     bf0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     bf4:	180e4101 	stmdane	lr, {r0, r8, lr}
     bf8:	00070d41 	andeq	r0, r7, r1, asr #26
     bfc:	00000018 	andeq	r0, r0, r8, lsl r0
     c00:	0000098c 	andeq	r0, r0, ip, lsl #19
     c04:	200029ac 	andcs	r2, r0, ip, lsr #19
     c08:	0000001c 	andeq	r0, r0, ip, lsl r0
     c0c:	40080e41 	andmi	r0, r8, r1, asr #28
     c10:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     c14:	070d4101 	streq	r4, [sp, -r1, lsl #2]
     c18:	0000001c 	andeq	r0, r0, ip, lsl r0
     c1c:	0000098c 	andeq	r0, r0, ip, lsl #19
     c20:	200029c8 	andcs	r2, r0, r8, asr #19
     c24:	00000034 	andeq	r0, r0, r4, lsr r0
     c28:	40080e41 	andmi	r0, r8, r1, asr #28
     c2c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     c30:	180e4101 	stmdane	lr, {r0, r8, lr}
     c34:	00070d41 	andeq	r0, r7, r1, asr #26
     c38:	0000001c 	andeq	r0, r0, ip, lsl r0
     c3c:	0000098c 	andeq	r0, r0, ip, lsl #19
     c40:	200029fc 	strdcs	r2, [r0], -ip
     c44:	00000038 	andeq	r0, r0, r8, lsr r0
     c48:	40080e41 	andmi	r0, r8, r1, asr #28
     c4c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     c50:	180e4101 	stmdane	lr, {r0, r8, lr}
     c54:	00070d41 	andeq	r0, r7, r1, asr #26
     c58:	0000001c 	andeq	r0, r0, ip, lsl r0
     c5c:	0000098c 	andeq	r0, r0, ip, lsl #19
     c60:	20002a34 	andcs	r2, r0, r4, lsr sl
     c64:	0000003c 	andeq	r0, r0, ip, lsr r0
     c68:	40080e41 	andmi	r0, r8, r1, asr #28
     c6c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     c70:	180e4101 	stmdane	lr, {r0, r8, lr}
     c74:	00070d41 	andeq	r0, r7, r1, asr #26
     c78:	0000001c 	andeq	r0, r0, ip, lsl r0
     c7c:	0000098c 	andeq	r0, r0, ip, lsl #19
     c80:	20002a70 	andcs	r2, r0, r0, ror sl
     c84:	00000158 	andeq	r0, r0, r8, asr r1
     c88:	40080e41 	andmi	r0, r8, r1, asr #28
     c8c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     c90:	280e4101 	stmdacs	lr, {r0, r8, lr}
     c94:	00070d41 	andeq	r0, r7, r1, asr #26
     c98:	0000001c 	andeq	r0, r0, ip, lsl r0
     c9c:	0000098c 	andeq	r0, r0, ip, lsl #19
     ca0:	20002bc8 	andcs	r2, r0, r8, asr #23
     ca4:	00000060 	andeq	r0, r0, r0, rrx
     ca8:	40080e41 	andmi	r0, r8, r1, asr #28
     cac:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     cb0:	180e4101 	stmdane	lr, {r0, r8, lr}
     cb4:	00070d41 	andeq	r0, r7, r1, asr #26
     cb8:	0000001c 	andeq	r0, r0, ip, lsl r0
     cbc:	0000098c 	andeq	r0, r0, ip, lsl #19
     cc0:	20002c28 	andcs	r2, r0, r8, lsr #24
     cc4:	00000020 	andeq	r0, r0, r0, lsr #32
     cc8:	40080e41 	andmi	r0, r8, r1, asr #28
     ccc:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     cd0:	100e4101 	andne	r4, lr, r1, lsl #2
     cd4:	00070d41 	andeq	r0, r7, r1, asr #26
     cd8:	0000001c 	andeq	r0, r0, ip, lsl r0
     cdc:	0000098c 	andeq	r0, r0, ip, lsl #19
     ce0:	20002c48 	andcs	r2, r0, r8, asr #24
     ce4:	00000020 	andeq	r0, r0, r0, lsr #32
     ce8:	40080e41 	andmi	r0, r8, r1, asr #28
     cec:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     cf0:	100e4101 	andne	r4, lr, r1, lsl #2
     cf4:	00070d41 	andeq	r0, r7, r1, asr #26
     cf8:	0000001c 	andeq	r0, r0, ip, lsl r0
     cfc:	0000098c 	andeq	r0, r0, ip, lsl #19
     d00:	20002c68 	andcs	r2, r0, r8, ror #24
     d04:	0000001c 	andeq	r0, r0, ip, lsl r0
     d08:	40080e41 	andmi	r0, r8, r1, asr #28
     d0c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     d10:	100e4101 	andne	r4, lr, r1, lsl #2
     d14:	00070d41 	andeq	r0, r7, r1, asr #26
     d18:	0000001c 	andeq	r0, r0, ip, lsl r0
     d1c:	0000098c 	andeq	r0, r0, ip, lsl #19
     d20:	20002c84 	andcs	r2, r0, r4, lsl #25
     d24:	0000003c 	andeq	r0, r0, ip, lsr r0
     d28:	40080e41 	andmi	r0, r8, r1, asr #28
     d2c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     d30:	180e4101 	stmdane	lr, {r0, r8, lr}
     d34:	00070d41 	andeq	r0, r7, r1, asr #26
     d38:	0000001c 	andeq	r0, r0, ip, lsl r0
     d3c:	0000098c 	andeq	r0, r0, ip, lsl #19
     d40:	20002cc0 	andcs	r2, r0, r0, asr #25
     d44:	0000003c 	andeq	r0, r0, ip, lsr r0
     d48:	40080e41 	andmi	r0, r8, r1, asr #28
     d4c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     d50:	180e4101 	stmdane	lr, {r0, r8, lr}
     d54:	00070d41 	andeq	r0, r7, r1, asr #26
     d58:	0000001c 	andeq	r0, r0, ip, lsl r0
     d5c:	0000098c 	andeq	r0, r0, ip, lsl #19
     d60:	20002cfc 	strdcs	r2, [r0], -ip
     d64:	0000003c 	andeq	r0, r0, ip, lsr r0
     d68:	40080e41 	andmi	r0, r8, r1, asr #28
     d6c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     d70:	180e4101 	stmdane	lr, {r0, r8, lr}
     d74:	00070d41 	andeq	r0, r7, r1, asr #26
     d78:	0000001c 	andeq	r0, r0, ip, lsl r0
     d7c:	0000098c 	andeq	r0, r0, ip, lsl #19
     d80:	20002d38 	andcs	r2, r0, r8, lsr sp
     d84:	00000040 	andeq	r0, r0, r0, asr #32
     d88:	40080e41 	andmi	r0, r8, r1, asr #28
     d8c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     d90:	180e4101 	stmdane	lr, {r0, r8, lr}
     d94:	00070d41 	andeq	r0, r7, r1, asr #26
     d98:	0000001c 	andeq	r0, r0, ip, lsl r0
     d9c:	0000098c 	andeq	r0, r0, ip, lsl #19
     da0:	20002d78 	andcs	r2, r0, r8, ror sp
     da4:	0000003c 	andeq	r0, r0, ip, lsr r0
     da8:	40080e41 	andmi	r0, r8, r1, asr #28
     dac:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     db0:	180e4101 	stmdane	lr, {r0, r8, lr}
     db4:	00070d41 	andeq	r0, r7, r1, asr #26
     db8:	0000001c 	andeq	r0, r0, ip, lsl r0
     dbc:	0000098c 	andeq	r0, r0, ip, lsl #19
     dc0:	20002db4 			; <UNDEFINED> instruction: 0x20002db4
     dc4:	0000001c 	andeq	r0, r0, ip, lsl r0
     dc8:	40080e41 	andmi	r0, r8, r1, asr #28
     dcc:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     dd0:	100e4101 	andne	r4, lr, r1, lsl #2
     dd4:	00070d41 	andeq	r0, r7, r1, asr #26
     dd8:	0000001c 	andeq	r0, r0, ip, lsl r0
     ddc:	0000098c 	andeq	r0, r0, ip, lsl #19
     de0:	20002dd0 	ldrdcs	r2, [r0], -r0
     de4:	00000040 	andeq	r0, r0, r0, asr #32
     de8:	40080e41 	andmi	r0, r8, r1, asr #28
     dec:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     df0:	100e4101 	andne	r4, lr, r1, lsl #2
     df4:	00070d41 	andeq	r0, r7, r1, asr #26
     df8:	0000001c 	andeq	r0, r0, ip, lsl r0
     dfc:	0000098c 	andeq	r0, r0, ip, lsl #19
     e00:	20002e10 	andcs	r2, r0, r0, lsl lr
     e04:	00000040 	andeq	r0, r0, r0, asr #32
     e08:	40080e41 	andmi	r0, r8, r1, asr #28
     e0c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     e10:	100e4101 	andne	r4, lr, r1, lsl #2
     e14:	00070d41 	andeq	r0, r7, r1, asr #26
     e18:	0000001c 	andeq	r0, r0, ip, lsl r0
     e1c:	0000098c 	andeq	r0, r0, ip, lsl #19
     e20:	20002e50 	andcs	r2, r0, r0, asr lr
     e24:	00000040 	andeq	r0, r0, r0, asr #32
     e28:	40080e41 	andmi	r0, r8, r1, asr #28
     e2c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     e30:	100e4101 	andne	r4, lr, r1, lsl #2
     e34:	00070d41 	andeq	r0, r7, r1, asr #26
     e38:	0000001c 	andeq	r0, r0, ip, lsl r0
     e3c:	0000098c 	andeq	r0, r0, ip, lsl #19
     e40:	20002e90 	mulcs	r0, r0, lr
     e44:	00000040 	andeq	r0, r0, r0, asr #32
     e48:	40080e41 	andmi	r0, r8, r1, asr #28
     e4c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     e50:	100e4101 	andne	r4, lr, r1, lsl #2
     e54:	00070d41 	andeq	r0, r7, r1, asr #26
     e58:	0000001c 	andeq	r0, r0, ip, lsl r0
     e5c:	0000098c 	andeq	r0, r0, ip, lsl #19
     e60:	20002ed0 	ldrdcs	r2, [r0], -r0
     e64:	00000040 	andeq	r0, r0, r0, asr #32
     e68:	40080e41 	andmi	r0, r8, r1, asr #28
     e6c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     e70:	100e4101 	andne	r4, lr, r1, lsl #2
     e74:	00070d41 	andeq	r0, r7, r1, asr #26
     e78:	0000001c 	andeq	r0, r0, ip, lsl r0
     e7c:	0000098c 	andeq	r0, r0, ip, lsl #19
     e80:	20002f10 	andcs	r2, r0, r0, lsl pc
     e84:	00000040 	andeq	r0, r0, r0, asr #32
     e88:	40080e41 	andmi	r0, r8, r1, asr #28
     e8c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     e90:	100e4101 	andne	r4, lr, r1, lsl #2
     e94:	00070d41 	andeq	r0, r7, r1, asr #26
     e98:	0000001c 	andeq	r0, r0, ip, lsl r0
     e9c:	0000098c 	andeq	r0, r0, ip, lsl #19
     ea0:	20002f50 	andcs	r2, r0, r0, asr pc
     ea4:	00000040 	andeq	r0, r0, r0, asr #32
     ea8:	40080e41 	andmi	r0, r8, r1, asr #28
     eac:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     eb0:	100e4101 	andne	r4, lr, r1, lsl #2
     eb4:	00070d41 	andeq	r0, r7, r1, asr #26
     eb8:	0000001c 	andeq	r0, r0, ip, lsl r0
     ebc:	0000098c 	andeq	r0, r0, ip, lsl #19
     ec0:	20002f90 	mulcs	r0, r0, pc	; <UNPREDICTABLE>
     ec4:	00000040 	andeq	r0, r0, r0, asr #32
     ec8:	40080e41 	andmi	r0, r8, r1, asr #28
     ecc:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     ed0:	100e4101 	andne	r4, lr, r1, lsl #2
     ed4:	00070d41 	andeq	r0, r7, r1, asr #26
     ed8:	0000001c 	andeq	r0, r0, ip, lsl r0
     edc:	0000098c 	andeq	r0, r0, ip, lsl #19
     ee0:	20002fd0 	ldrdcs	r2, [r0], -r0
     ee4:	00000040 	andeq	r0, r0, r0, asr #32
     ee8:	40080e41 	andmi	r0, r8, r1, asr #28
     eec:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     ef0:	100e4101 	andne	r4, lr, r1, lsl #2
     ef4:	00070d41 	andeq	r0, r7, r1, asr #26
     ef8:	0000001c 	andeq	r0, r0, ip, lsl r0
     efc:	0000098c 	andeq	r0, r0, ip, lsl #19
     f00:	20003010 	andcs	r3, r0, r0, lsl r0
     f04:	00000040 	andeq	r0, r0, r0, asr #32
     f08:	40080e41 	andmi	r0, r8, r1, asr #28
     f0c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     f10:	100e4101 	andne	r4, lr, r1, lsl #2
     f14:	00070d41 	andeq	r0, r7, r1, asr #26
     f18:	0000001c 	andeq	r0, r0, ip, lsl r0
     f1c:	0000098c 	andeq	r0, r0, ip, lsl #19
     f20:	20003050 	andcs	r3, r0, r0, asr r0
     f24:	00000040 	andeq	r0, r0, r0, asr #32
     f28:	40080e41 	andmi	r0, r8, r1, asr #28
     f2c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     f30:	100e4101 	andne	r4, lr, r1, lsl #2
     f34:	00070d41 	andeq	r0, r7, r1, asr #26
     f38:	0000001c 	andeq	r0, r0, ip, lsl r0
     f3c:	0000098c 	andeq	r0, r0, ip, lsl #19
     f40:	20003090 	mulcs	r0, r0, r0
     f44:	00000040 	andeq	r0, r0, r0, asr #32
     f48:	40080e41 	andmi	r0, r8, r1, asr #28
     f4c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     f50:	100e4101 	andne	r4, lr, r1, lsl #2
     f54:	00070d41 	andeq	r0, r7, r1, asr #26
     f58:	0000001c 	andeq	r0, r0, ip, lsl r0
     f5c:	0000098c 	andeq	r0, r0, ip, lsl #19
     f60:	200030d0 	ldrdcs	r3, [r0], -r0
     f64:	00000040 	andeq	r0, r0, r0, asr #32
     f68:	40080e41 	andmi	r0, r8, r1, asr #28
     f6c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     f70:	100e4101 	andne	r4, lr, r1, lsl #2
     f74:	00070d41 	andeq	r0, r7, r1, asr #26
     f78:	0000001c 	andeq	r0, r0, ip, lsl r0
     f7c:	0000098c 	andeq	r0, r0, ip, lsl #19
     f80:	20003110 	andcs	r3, r0, r0, lsl r1
     f84:	00000040 	andeq	r0, r0, r0, asr #32
     f88:	40080e41 	andmi	r0, r8, r1, asr #28
     f8c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     f90:	100e4101 	andne	r4, lr, r1, lsl #2
     f94:	00070d41 	andeq	r0, r7, r1, asr #26
     f98:	0000001c 	andeq	r0, r0, ip, lsl r0
     f9c:	0000098c 	andeq	r0, r0, ip, lsl #19
     fa0:	20003150 	andcs	r3, r0, r0, asr r1
     fa4:	00000040 	andeq	r0, r0, r0, asr #32
     fa8:	40080e41 	andmi	r0, r8, r1, asr #28
     fac:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     fb0:	100e4101 	andne	r4, lr, r1, lsl #2
     fb4:	00070d41 	andeq	r0, r7, r1, asr #26
     fb8:	0000001c 	andeq	r0, r0, ip, lsl r0
     fbc:	0000098c 	andeq	r0, r0, ip, lsl #19
     fc0:	20003190 	mulcs	r0, r0, r1
     fc4:	0000003c 	andeq	r0, r0, ip, lsr r0
     fc8:	40080e41 	andmi	r0, r8, r1, asr #28
     fcc:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     fd0:	100e4101 	andne	r4, lr, r1, lsl #2
     fd4:	00070d41 	andeq	r0, r7, r1, asr #26
     fd8:	0000001c 	andeq	r0, r0, ip, lsl r0
     fdc:	0000098c 	andeq	r0, r0, ip, lsl #19
     fe0:	200031cc 	andcs	r3, r0, ip, asr #3
     fe4:	00000050 	andeq	r0, r0, r0, asr r0
     fe8:	40080e41 	andmi	r0, r8, r1, asr #28
     fec:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     ff0:	100e4101 	andne	r4, lr, r1, lsl #2
     ff4:	00070d41 	andeq	r0, r7, r1, asr #26
     ff8:	0000001c 	andeq	r0, r0, ip, lsl r0
     ffc:	0000098c 	andeq	r0, r0, ip, lsl #19
    1000:	2000321c 	andcs	r3, r0, ip, lsl r2
    1004:	00000084 	andeq	r0, r0, r4, lsl #1
    1008:	40080e41 	andmi	r0, r8, r1, asr #28
    100c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
    1010:	200e4101 	andcs	r4, lr, r1, lsl #2
    1014:	00070d41 	andeq	r0, r7, r1, asr #26
    1018:	00000018 	andeq	r0, r0, r8, lsl r0
    101c:	0000098c 	andeq	r0, r0, ip, lsl #19
    1020:	200032a0 	andcs	r3, r0, r0, lsr #5
    1024:	0000001c 	andeq	r0, r0, ip, lsl r0
    1028:	40080e41 	andmi	r0, r8, r1, asr #28
    102c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
    1030:	070d4101 	streq	r4, [sp, -r1, lsl #2]
    1034:	0000001c 	andeq	r0, r0, ip, lsl r0
    1038:	0000098c 	andeq	r0, r0, ip, lsl #19
    103c:	200032bc 			; <UNDEFINED> instruction: 0x200032bc
    1040:	00000044 	andeq	r0, r0, r4, asr #32
    1044:	40080e41 	andmi	r0, r8, r1, asr #28
    1048:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
    104c:	180e4101 	stmdane	lr, {r0, r8, lr}
    1050:	00070d41 	andeq	r0, r7, r1, asr #26
    1054:	0000001c 	andeq	r0, r0, ip, lsl r0
    1058:	0000098c 	andeq	r0, r0, ip, lsl #19
    105c:	20003300 	andcs	r3, r0, r0, lsl #6
    1060:	00000020 	andeq	r0, r0, r0, lsr #32
    1064:	40080e41 	andmi	r0, r8, r1, asr #28
    1068:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
    106c:	100e4101 	andne	r4, lr, r1, lsl #2
    1070:	00070d41 	andeq	r0, r7, r1, asr #26
    1074:	0000001c 	andeq	r0, r0, ip, lsl r0
    1078:	0000098c 	andeq	r0, r0, ip, lsl #19
    107c:	20003320 	andcs	r3, r0, r0, lsr #6
    1080:	000001c8 	andeq	r0, r0, r8, asr #3
    1084:	40080e41 	andmi	r0, r8, r1, asr #28
    1088:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
    108c:	100e4101 	andne	r4, lr, r1, lsl #2
    1090:	00070d41 	andeq	r0, r7, r1, asr #26
    1094:	0000000c 	andeq	r0, r0, ip
    1098:	0000098c 	andeq	r0, r0, ip, lsl #19
    109c:	20000000 	andcs	r0, r0, r0
    10a0:	0000000c 	andeq	r0, r0, ip
    10a4:	00000018 	andeq	r0, r0, r8, lsl r0
    10a8:	0000098c 	andeq	r0, r0, ip, lsl #19
    10ac:	200034e8 	andcs	r3, r0, r8, ror #9
    10b0:	00000018 	andeq	r0, r0, r8, lsl r0
    10b4:	40080e41 	andmi	r0, r8, r1, asr #28
    10b8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
    10bc:	070d4101 	streq	r4, [sp, -r1, lsl #2]
    10c0:	0000001c 	andeq	r0, r0, ip, lsl r0
    10c4:	0000098c 	andeq	r0, r0, ip, lsl #19
    10c8:	20003500 	andcs	r3, r0, r0, lsl #10
    10cc:	00000038 	andeq	r0, r0, r8, lsr r0
    10d0:	40080e41 	andmi	r0, r8, r1, asr #28
    10d4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
    10d8:	100e4101 	andne	r4, lr, r1, lsl #2
    10dc:	00070d41 	andeq	r0, r7, r1, asr #26
    10e0:	0000001c 	andeq	r0, r0, ip, lsl r0
    10e4:	0000098c 	andeq	r0, r0, ip, lsl #19
    10e8:	20003538 	andcs	r3, r0, r8, lsr r5
    10ec:	0000002c 	andeq	r0, r0, ip, lsr #32
    10f0:	40080e41 	andmi	r0, r8, r1, asr #28
    10f4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
    10f8:	180e4101 	stmdane	lr, {r0, r8, lr}
    10fc:	00070d41 	andeq	r0, r7, r1, asr #26
    1100:	00000018 	andeq	r0, r0, r8, lsl r0
    1104:	0000098c 	andeq	r0, r0, ip, lsl #19
    1108:	20003564 	andcs	r3, r0, r4, ror #10
    110c:	00000018 	andeq	r0, r0, r8, lsl r0
    1110:	40080e41 	andmi	r0, r8, r1, asr #28
    1114:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
    1118:	070d4101 	streq	r4, [sp, -r1, lsl #2]
    111c:	00000028 	andeq	r0, r0, r8, lsr #32
    1120:	0000098c 	andeq	r0, r0, ip, lsl #19
    1124:	2000357c 	andcs	r3, r0, ip, ror r5
    1128:	000004a0 	andeq	r0, r0, r0, lsr #9
    112c:	40140e41 	andsmi	r0, r4, r1, asr #28
    1130:	85400584 	strbhi	r0, [r0, #-1412]	; 0xfffffa7c
    1134:	03864004 	orreq	r4, r6, #4
    1138:	40028740 	andmi	r8, r2, r0, asr #14
    113c:	0e41018e 	dvfeqd	f0, f1, #0.5
    1140:	070c4178 	smlsdxeq	ip, r8, r1, r4
    1144:	00000068 	andeq	r0, r0, r8, rrx
    1148:	0000001c 	andeq	r0, r0, ip, lsl r0
    114c:	0000098c 	andeq	r0, r0, ip, lsl #19
    1150:	20003a1c 	andcs	r3, r0, ip, lsl sl
    1154:	00000054 	andeq	r0, r0, r4, asr r0
    1158:	40080e41 	andmi	r0, r8, r1, asr #28
    115c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
    1160:	180e4101 	stmdane	lr, {r0, r8, lr}
    1164:	00070d41 	andeq	r0, r7, r1, asr #26
    1168:	00000028 	andeq	r0, r0, r8, lsr #32
    116c:	0000098c 	andeq	r0, r0, ip, lsl #19
    1170:	20003a70 	andcs	r3, r0, r0, ror sl
    1174:	00000160 	andeq	r0, r0, r0, ror #2
    1178:	40140e41 	andsmi	r0, r4, r1, asr #28
    117c:	85400584 	strbhi	r0, [r0, #-1412]	; 0xfffffa7c
    1180:	03864004 	orreq	r4, r6, #4
    1184:	40028740 	andmi	r8, r2, r0, asr #14
    1188:	0e41018e 	dvfeqd	f0, f1, #0.5
    118c:	070c4150 	smlsdeq	ip, r0, r1, r4
    1190:	00000048 	andeq	r0, r0, r8, asr #32
    1194:	00000024 	andeq	r0, r0, r4, lsr #32
    1198:	0000098c 	andeq	r0, r0, ip, lsl #19
    119c:	20003bd0 	ldrdcs	r3, [r0], -r0
    11a0:	00000062 	andeq	r0, r0, r2, rrx
    11a4:	41100e41 	tstmi	r0, r1, asr #28
    11a8:	84401c0e 	strbhi	r1, [r0], #-3086	; 0xfffff3f2
    11ac:	06874007 	streq	r4, [r7], r7
    11b0:	41058e40 	tstmi	r5, r0, asr #28
    11b4:	0d41380e 	stcleq	8, cr3, [r1, #-56]	; 0xffffffc8
    11b8:	00000007 	andeq	r0, r0, r7
    11bc:	0000000c 	andeq	r0, r0, ip
    11c0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    11c4:	7c020001 	stcvc	0, cr0, [r2], {1}
    11c8:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    11cc:	0000001c 	andeq	r0, r0, ip, lsl r0
    11d0:	000011bc 			; <UNDEFINED> instruction: 0x000011bc
    11d4:	20003c34 	andcs	r3, r0, r4, lsr ip
    11d8:	00000028 	andeq	r0, r0, r8, lsr #32
    11dc:	40080e41 	andmi	r0, r8, r1, asr #28
    11e0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
    11e4:	100e4101 	andne	r4, lr, r1, lsl #2
    11e8:	00070d41 	andeq	r0, r7, r1, asr #26
    11ec:	0000001c 	andeq	r0, r0, ip, lsl r0
    11f0:	000011bc 			; <UNDEFINED> instruction: 0x000011bc
    11f4:	20003c5c 	andcs	r3, r0, ip, asr ip
    11f8:	00000062 	andeq	r0, r0, r2, rrx
    11fc:	40080e41 	andmi	r0, r8, r1, asr #28
    1200:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
    1204:	100e4101 	andne	r4, lr, r1, lsl #2
    1208:	00070d41 	andeq	r0, r7, r1, asr #26
    120c:	0000001c 	andeq	r0, r0, ip, lsl r0
    1210:	000011bc 			; <UNDEFINED> instruction: 0x000011bc
    1214:	20003cbe 			; <UNDEFINED> instruction: 0x20003cbe
    1218:	00000040 	andeq	r0, r0, r0, asr #32
    121c:	40080e41 	andmi	r0, r8, r1, asr #28
    1220:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
    1224:	180e4101 	stmdane	lr, {r0, r8, lr}
    1228:	00070d41 	andeq	r0, r7, r1, asr #26
    122c:	0000001c 	andeq	r0, r0, ip, lsl r0
    1230:	000011bc 			; <UNDEFINED> instruction: 0x000011bc
    1234:	20003cfe 	strdcs	r3, [r0], -lr
    1238:	0000005e 	andeq	r0, r0, lr, asr r0
    123c:	40080e41 	andmi	r0, r8, r1, asr #28
    1240:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
    1244:	100e4101 	andne	r4, lr, r1, lsl #2
    1248:	00070d41 	andeq	r0, r7, r1, asr #26
    124c:	0000000c 	andeq	r0, r0, ip
    1250:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    1254:	7c010001 	stcvc	0, cr0, [r1], {1}
    1258:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    125c:	0000000c 	andeq	r0, r0, ip
    1260:	0000124c 	andeq	r1, r0, ip, asr #4
    1264:	20003d5d 	andcs	r3, r0, sp, asr sp
    1268:	0000010a 	andeq	r0, r0, sl, lsl #2
    126c:	0000000c 	andeq	r0, r0, ip
    1270:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    1274:	7c020001 	stcvc	0, cr0, [r2], {1}
    1278:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    127c:	0000000c 	andeq	r0, r0, ip
    1280:	0000126c 	andeq	r1, r0, ip, ror #4
    1284:	20003e74 	andcs	r3, r0, r4, ror lr
    1288:	00000010 	andeq	r0, r0, r0, lsl r0

Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
   0:	20002588 	andcs	r2, r0, r8, lsl #11
   4:	20003c32 	andcs	r3, r0, r2, lsr ip
   8:	20000000 	andcs	r0, r0, r0
   c:	2000000c 	andcs	r0, r0, ip
	...
