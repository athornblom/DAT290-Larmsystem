
./Debug/Door.elf:     file format elf32-littlearm


Disassembly of section .text:

20000000 <startup>:

void startup(void) __attribute__((naked)) __attribute__((section(".start_section")));

void startup(void)
{
	__asm volatile(
20000000:	4802      	ldr	r0, [pc, #8]	; (2000000c <_exit+0x4>)
20000002:	4685      	mov	sp, r0
20000004:	f000 ffd6 	bl	20000fb4 <main>

20000008 <_exit>:
20000008:	e7fe      	b.n	20000008 <_exit>
		" LDR R0,=0x2001C000\n" /* set stack */
		" MOV SP,R0\n"
		" BL main\n"   /* call main */
		"_exit: B .\n" /* never return */
	);
}
2000000a:	46c0      	nop			; (mov r8, r8)
2000000c:	2001c000 	andcs	ip, r1, r0

20000010 <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
20000010:	b580      	push	{r7, lr}
20000012:	b082      	sub	sp, #8
20000014:	af00      	add	r7, sp, #0
20000016:	0002      	movs	r2, r0
20000018:	6039      	str	r1, [r7, #0]
2000001a:	1dfb      	adds	r3, r7, #7
2000001c:	701a      	strb	r2, [r3, #0]
  if((int32_t)IRQn < 0) {
2000001e:	1dfb      	adds	r3, r7, #7
20000020:	781b      	ldrb	r3, [r3, #0]
20000022:	2b7f      	cmp	r3, #127	; 0x7f
20000024:	d90d      	bls.n	20000042 <NVIC_SetPriority+0x32>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
20000026:	683b      	ldr	r3, [r7, #0]
20000028:	b2da      	uxtb	r2, r3
2000002a:	490f      	ldr	r1, [pc, #60]	; (20000068 <NVIC_SetPriority+0x58>)
2000002c:	1dfb      	adds	r3, r7, #7
2000002e:	781b      	ldrb	r3, [r3, #0]
20000030:	0018      	movs	r0, r3
20000032:	230f      	movs	r3, #15
20000034:	4003      	ands	r3, r0
20000036:	3b04      	subs	r3, #4
20000038:	0112      	lsls	r2, r2, #4
2000003a:	b2d2      	uxtb	r2, r2
2000003c:	18cb      	adds	r3, r1, r3
2000003e:	761a      	strb	r2, [r3, #24]
  }
  else {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
20000040:	e00d      	b.n	2000005e <NVIC_SetPriority+0x4e>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
20000042:	683b      	ldr	r3, [r7, #0]
20000044:	b2db      	uxtb	r3, r3
20000046:	4909      	ldr	r1, [pc, #36]	; (2000006c <NVIC_SetPriority+0x5c>)
20000048:	1dfa      	adds	r2, r7, #7
2000004a:	7812      	ldrb	r2, [r2, #0]
2000004c:	b252      	sxtb	r2, r2
2000004e:	011b      	lsls	r3, r3, #4
20000050:	b2d8      	uxtb	r0, r3
20000052:	23c0      	movs	r3, #192	; 0xc0
20000054:	009b      	lsls	r3, r3, #2
20000056:	188a      	adds	r2, r1, r2
20000058:	18d3      	adds	r3, r2, r3
2000005a:	1c02      	adds	r2, r0, #0
2000005c:	701a      	strb	r2, [r3, #0]
}
2000005e:	46c0      	nop			; (mov r8, r8)
20000060:	46bd      	mov	sp, r7
20000062:	b002      	add	sp, #8
20000064:	bd80      	pop	{r7, pc}
20000066:	46c0      	nop			; (mov r8, r8)
20000068:	e000ed00 	and	lr, r0, r0, lsl #26
2000006c:	e000e100 	and	lr, r0, r0, lsl #2

20000070 <SysTick_Config>:
    function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
20000070:	b580      	push	{r7, lr}
20000072:	b082      	sub	sp, #8
20000074:	af00      	add	r7, sp, #0
20000076:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk) { return (1UL); }    /* Reload value impossible */
20000078:	687b      	ldr	r3, [r7, #4]
2000007a:	3b01      	subs	r3, #1
2000007c:	4a0c      	ldr	r2, [pc, #48]	; (200000b0 <SysTick_Config+0x40>)
2000007e:	4293      	cmp	r3, r2
20000080:	d901      	bls.n	20000086 <SysTick_Config+0x16>
20000082:	2301      	movs	r3, #1
20000084:	e010      	b.n	200000a8 <SysTick_Config+0x38>

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
20000086:	4b0b      	ldr	r3, [pc, #44]	; (200000b4 <SysTick_Config+0x44>)
20000088:	687a      	ldr	r2, [r7, #4]
2000008a:	3a01      	subs	r2, #1
2000008c:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
2000008e:	2301      	movs	r3, #1
20000090:	425b      	negs	r3, r3
20000092:	210f      	movs	r1, #15
20000094:	0018      	movs	r0, r3
20000096:	f7ff ffbb 	bl	20000010 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
2000009a:	4b06      	ldr	r3, [pc, #24]	; (200000b4 <SysTick_Config+0x44>)
2000009c:	2200      	movs	r2, #0
2000009e:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
200000a0:	4b04      	ldr	r3, [pc, #16]	; (200000b4 <SysTick_Config+0x44>)
200000a2:	2207      	movs	r2, #7
200000a4:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
200000a6:	2300      	movs	r3, #0
}
200000a8:	0018      	movs	r0, r3
200000aa:	46bd      	mov	sp, r7
200000ac:	b002      	add	sp, #8
200000ae:	bd80      	pop	{r7, pc}
200000b0:	00ffffff 	ldrshteq	pc, [pc], #255	; <UNPREDICTABLE>
200000b4:	e000e010 	and	lr, r0, r0, lsl r0

200000b8 <RCC_DeInit>:
  *            - LSI, LSE and RTC clocks 
  * @param  None
  * @retval None
  */
void RCC_DeInit(void)
{
200000b8:	b580      	push	{r7, lr}
200000ba:	af00      	add	r7, sp, #0
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
200000bc:	4b14      	ldr	r3, [pc, #80]	; (20000110 <RCC_DeInit+0x58>)
200000be:	681a      	ldr	r2, [r3, #0]
200000c0:	4b13      	ldr	r3, [pc, #76]	; (20000110 <RCC_DeInit+0x58>)
200000c2:	2101      	movs	r1, #1
200000c4:	430a      	orrs	r2, r1
200000c6:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
200000c8:	4b11      	ldr	r3, [pc, #68]	; (20000110 <RCC_DeInit+0x58>)
200000ca:	2200      	movs	r2, #0
200000cc:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON, PLLON, PLLI2S and PLLSAI(STM32F42xxx/43xxx/446xx/469xx/479xx devices) bits */
  RCC->CR &= (uint32_t)0xEAF6FFFF;
200000ce:	4b10      	ldr	r3, [pc, #64]	; (20000110 <RCC_DeInit+0x58>)
200000d0:	681a      	ldr	r2, [r3, #0]
200000d2:	4b0f      	ldr	r3, [pc, #60]	; (20000110 <RCC_DeInit+0x58>)
200000d4:	490f      	ldr	r1, [pc, #60]	; (20000114 <RCC_DeInit+0x5c>)
200000d6:	400a      	ands	r2, r1
200000d8:	601a      	str	r2, [r3, #0]
  
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
200000da:	4b0d      	ldr	r3, [pc, #52]	; (20000110 <RCC_DeInit+0x58>)
200000dc:	4a0e      	ldr	r2, [pc, #56]	; (20000118 <RCC_DeInit+0x60>)
200000de:	605a      	str	r2, [r3, #4]

#if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F401xx) || defined(STM32F411xE) || defined(STM32F446xx) || defined(STM32F413_423xx) || defined(STM32F469_479xx)  
  /* Reset PLLI2SCFGR register */
  RCC->PLLI2SCFGR = 0x20003000;
200000e0:	4a0b      	ldr	r2, [pc, #44]	; (20000110 <RCC_DeInit+0x58>)
200000e2:	2384      	movs	r3, #132	; 0x84
200000e4:	490d      	ldr	r1, [pc, #52]	; (2000011c <RCC_DeInit+0x64>)
200000e6:	50d1      	str	r1, [r2, r3]
#endif /* STM32F40_41xxx || STM32F427_437xx || STM32F429_439xx || STM32F401xx || STM32F411xE || STM32F446xx || STM32F413_423xx || STM32F469_479xx */

#if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F446xx) || defined(STM32F469_479xx) 
  /* Reset PLLSAICFGR register, only available for STM32F42xxx/43xxx/446xx/469xx/479xx devices */
  RCC->PLLSAICFGR = 0x24003000;
200000e8:	4a09      	ldr	r2, [pc, #36]	; (20000110 <RCC_DeInit+0x58>)
200000ea:	2388      	movs	r3, #136	; 0x88
200000ec:	490c      	ldr	r1, [pc, #48]	; (20000120 <RCC_DeInit+0x68>)
200000ee:	50d1      	str	r1, [r2, r3]
#endif /* STM32F40_41xxx || STM32F427_437xx || STM32F429_439xx || STM32F446xx || STM32F469_479xx */
  
  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
200000f0:	4b07      	ldr	r3, [pc, #28]	; (20000110 <RCC_DeInit+0x58>)
200000f2:	681a      	ldr	r2, [r3, #0]
200000f4:	4b06      	ldr	r3, [pc, #24]	; (20000110 <RCC_DeInit+0x58>)
200000f6:	490b      	ldr	r1, [pc, #44]	; (20000124 <RCC_DeInit+0x6c>)
200000f8:	400a      	ands	r2, r1
200000fa:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
200000fc:	4b04      	ldr	r3, [pc, #16]	; (20000110 <RCC_DeInit+0x58>)
200000fe:	2200      	movs	r2, #0
20000100:	60da      	str	r2, [r3, #12]

  /* Disable Timers clock prescalers selection, only available for STM32F42/43xxx and STM32F413_423xx devices */
  RCC->DCKCFGR = 0x00000000;
20000102:	4a03      	ldr	r2, [pc, #12]	; (20000110 <RCC_DeInit+0x58>)
20000104:	238c      	movs	r3, #140	; 0x8c
20000106:	2100      	movs	r1, #0
20000108:	50d1      	str	r1, [r2, r3]
  
#if defined(STM32F410xx) || defined(STM32F413_423xx)
  /* Disable LPTIM and FMPI2C clock prescalers selection, only available for STM32F410xx and STM32F413_423xx devices */
  RCC->DCKCFGR2 = 0x00000000;
#endif /* STM32F410xx || STM32F413_423xx */  
}
2000010a:	46c0      	nop			; (mov r8, r8)
2000010c:	46bd      	mov	sp, r7
2000010e:	bd80      	pop	{r7, pc}
20000110:	40023800 	andmi	r3, r2, r0, lsl #16
20000114:	eaf6ffff 	b	1fdc0118 <startup-0x23fee8>
20000118:	24003010 	strcs	r3, [r0], #-16
2000011c:	20003000 	andcs	r3, r0, r0
20000120:	24003000 	strcs	r3, [r0], #-0
20000124:	fffbffff 			; <UNDEFINED> instruction: 0xfffbffff

20000128 <RCC_HSEConfig>:
  *            @arg RCC_HSE_ON: turn ON the HSE oscillator
  *            @arg RCC_HSE_Bypass: HSE oscillator bypassed with external clock
  * @retval None
  */
void RCC_HSEConfig(uint8_t RCC_HSE)
{
20000128:	b580      	push	{r7, lr}
2000012a:	b082      	sub	sp, #8
2000012c:	af00      	add	r7, sp, #0
2000012e:	0002      	movs	r2, r0
20000130:	1dfb      	adds	r3, r7, #7
20000132:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_HSE(RCC_HSE));

  /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
  *(__IO uint8_t *) CR_BYTE3_ADDRESS = RCC_HSE_OFF;
20000134:	4b05      	ldr	r3, [pc, #20]	; (2000014c <RCC_HSEConfig+0x24>)
20000136:	2200      	movs	r2, #0
20000138:	701a      	strb	r2, [r3, #0]

  /* Set the new HSE configuration -------------------------------------------*/
  *(__IO uint8_t *) CR_BYTE3_ADDRESS = RCC_HSE;
2000013a:	4a04      	ldr	r2, [pc, #16]	; (2000014c <RCC_HSEConfig+0x24>)
2000013c:	1dfb      	adds	r3, r7, #7
2000013e:	781b      	ldrb	r3, [r3, #0]
20000140:	7013      	strb	r3, [r2, #0]
}
20000142:	46c0      	nop			; (mov r8, r8)
20000144:	46bd      	mov	sp, r7
20000146:	b002      	add	sp, #8
20000148:	bd80      	pop	{r7, pc}
2000014a:	46c0      	nop			; (mov r8, r8)
2000014c:	40023802 	andmi	r3, r2, r2, lsl #16

20000150 <RCC_WaitForHSEStartUp>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: HSE oscillator is stable and ready to use
  *          - ERROR: HSE oscillator not yet ready
  */
ErrorStatus RCC_WaitForHSEStartUp(void)
{
20000150:	b590      	push	{r4, r7, lr}
20000152:	b083      	sub	sp, #12
20000154:	af00      	add	r7, sp, #0
  __IO uint32_t startupcounter = 0;
20000156:	2300      	movs	r3, #0
20000158:	603b      	str	r3, [r7, #0]
  ErrorStatus status = ERROR;
2000015a:	1dfb      	adds	r3, r7, #7
2000015c:	2200      	movs	r2, #0
2000015e:	701a      	strb	r2, [r3, #0]
  FlagStatus hsestatus = RESET;
20000160:	1dbb      	adds	r3, r7, #6
20000162:	2200      	movs	r2, #0
20000164:	701a      	strb	r2, [r3, #0]
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    hsestatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
20000166:	1dbc      	adds	r4, r7, #6
20000168:	2031      	movs	r0, #49	; 0x31
2000016a:	f000 fd9b 	bl	20000ca4 <RCC_GetFlagStatus>
2000016e:	0003      	movs	r3, r0
20000170:	7023      	strb	r3, [r4, #0]
    startupcounter++;
20000172:	683b      	ldr	r3, [r7, #0]
20000174:	3301      	adds	r3, #1
20000176:	603b      	str	r3, [r7, #0]
  } while((startupcounter != HSE_STARTUP_TIMEOUT) && (hsestatus == RESET));
20000178:	683a      	ldr	r2, [r7, #0]
2000017a:	23a0      	movs	r3, #160	; 0xa0
2000017c:	01db      	lsls	r3, r3, #7
2000017e:	429a      	cmp	r2, r3
20000180:	d003      	beq.n	2000018a <RCC_WaitForHSEStartUp+0x3a>
20000182:	1dbb      	adds	r3, r7, #6
20000184:	781b      	ldrb	r3, [r3, #0]
20000186:	2b00      	cmp	r3, #0
20000188:	d0ed      	beq.n	20000166 <RCC_WaitForHSEStartUp+0x16>

  if (RCC_GetFlagStatus(RCC_FLAG_HSERDY) != RESET)
2000018a:	2031      	movs	r0, #49	; 0x31
2000018c:	f000 fd8a 	bl	20000ca4 <RCC_GetFlagStatus>
20000190:	1e03      	subs	r3, r0, #0
20000192:	d003      	beq.n	2000019c <RCC_WaitForHSEStartUp+0x4c>
  {
    status = SUCCESS;
20000194:	1dfb      	adds	r3, r7, #7
20000196:	2201      	movs	r2, #1
20000198:	701a      	strb	r2, [r3, #0]
2000019a:	e002      	b.n	200001a2 <RCC_WaitForHSEStartUp+0x52>
  }
  else
  {
    status = ERROR;
2000019c:	1dfb      	adds	r3, r7, #7
2000019e:	2200      	movs	r2, #0
200001a0:	701a      	strb	r2, [r3, #0]
  }
  return (status);
200001a2:	1dfb      	adds	r3, r7, #7
200001a4:	781b      	ldrb	r3, [r3, #0]
}
200001a6:	0018      	movs	r0, r3
200001a8:	46bd      	mov	sp, r7
200001aa:	b003      	add	sp, #12
200001ac:	bd90      	pop	{r4, r7, pc}

200001ae <RCC_AdjustHSICalibrationValue>:
  * @param  HSICalibrationValue: specifies the calibration trimming value.
  *         This parameter must be a number between 0 and 0x1F.
  * @retval None
  */
void RCC_AdjustHSICalibrationValue(uint8_t HSICalibrationValue)
{
200001ae:	b580      	push	{r7, lr}
200001b0:	b084      	sub	sp, #16
200001b2:	af00      	add	r7, sp, #0
200001b4:	0002      	movs	r2, r0
200001b6:	1dfb      	adds	r3, r7, #7
200001b8:	701a      	strb	r2, [r3, #0]
  uint32_t tmpreg = 0;
200001ba:	2300      	movs	r3, #0
200001bc:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_CALIBRATION_VALUE(HSICalibrationValue));

  tmpreg = RCC->CR;
200001be:	4b0a      	ldr	r3, [pc, #40]	; (200001e8 <RCC_AdjustHSICalibrationValue+0x3a>)
200001c0:	681b      	ldr	r3, [r3, #0]
200001c2:	60fb      	str	r3, [r7, #12]

  /* Clear HSITRIM[4:0] bits */
  tmpreg &= ~RCC_CR_HSITRIM;
200001c4:	68fb      	ldr	r3, [r7, #12]
200001c6:	22f8      	movs	r2, #248	; 0xf8
200001c8:	4393      	bics	r3, r2
200001ca:	60fb      	str	r3, [r7, #12]

  /* Set the HSITRIM[4:0] bits according to HSICalibrationValue value */
  tmpreg |= (uint32_t)HSICalibrationValue << 3;
200001cc:	1dfb      	adds	r3, r7, #7
200001ce:	781b      	ldrb	r3, [r3, #0]
200001d0:	00db      	lsls	r3, r3, #3
200001d2:	68fa      	ldr	r2, [r7, #12]
200001d4:	4313      	orrs	r3, r2
200001d6:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CR = tmpreg;
200001d8:	4b03      	ldr	r3, [pc, #12]	; (200001e8 <RCC_AdjustHSICalibrationValue+0x3a>)
200001da:	68fa      	ldr	r2, [r7, #12]
200001dc:	601a      	str	r2, [r3, #0]
}
200001de:	46c0      	nop			; (mov r8, r8)
200001e0:	46bd      	mov	sp, r7
200001e2:	b004      	add	sp, #16
200001e4:	bd80      	pop	{r7, pc}
200001e6:	46c0      	nop			; (mov r8, r8)
200001e8:	40023800 	andmi	r3, r2, r0, lsl #16

200001ec <RCC_HSICmd>:
  * @note   When the HSI is stopped, HSIRDY flag goes low after 6 HSI oscillator
  *         clock cycles.  
  * @retval None
  */
void RCC_HSICmd(FunctionalState NewState)
{
200001ec:	b580      	push	{r7, lr}
200001ee:	b082      	sub	sp, #8
200001f0:	af00      	add	r7, sp, #0
200001f2:	0002      	movs	r2, r0
200001f4:	1dfb      	adds	r3, r7, #7
200001f6:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CR_HSION_BB = (uint32_t)NewState;
200001f8:	4b03      	ldr	r3, [pc, #12]	; (20000208 <RCC_HSICmd+0x1c>)
200001fa:	1dfa      	adds	r2, r7, #7
200001fc:	7812      	ldrb	r2, [r2, #0]
200001fe:	601a      	str	r2, [r3, #0]
}
20000200:	46c0      	nop			; (mov r8, r8)
20000202:	46bd      	mov	sp, r7
20000204:	b002      	add	sp, #8
20000206:	bd80      	pop	{r7, pc}
20000208:	42470000 	submi	r0, r7, #0

2000020c <RCC_LSEConfig>:
  *            @arg RCC_LSE_ON: turn ON the LSE oscillator
  *            @arg RCC_LSE_Bypass: LSE oscillator bypassed with external clock
  * @retval None
  */
void RCC_LSEConfig(uint8_t RCC_LSE)
{
2000020c:	b580      	push	{r7, lr}
2000020e:	b082      	sub	sp, #8
20000210:	af00      	add	r7, sp, #0
20000212:	0002      	movs	r2, r0
20000214:	1dfb      	adds	r3, r7, #7
20000216:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_LSE(RCC_LSE));

  /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
  /* Reset LSEON bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
20000218:	4b0c      	ldr	r3, [pc, #48]	; (2000024c <RCC_LSEConfig+0x40>)
2000021a:	2200      	movs	r2, #0
2000021c:	701a      	strb	r2, [r3, #0]

  /* Reset LSEBYP bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
2000021e:	4b0b      	ldr	r3, [pc, #44]	; (2000024c <RCC_LSEConfig+0x40>)
20000220:	2200      	movs	r2, #0
20000222:	701a      	strb	r2, [r3, #0]

  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch (RCC_LSE)
20000224:	1dfb      	adds	r3, r7, #7
20000226:	781b      	ldrb	r3, [r3, #0]
20000228:	2b01      	cmp	r3, #1
2000022a:	d002      	beq.n	20000232 <RCC_LSEConfig+0x26>
2000022c:	2b04      	cmp	r3, #4
2000022e:	d004      	beq.n	2000023a <RCC_LSEConfig+0x2e>
    case RCC_LSE_Bypass:
      /* Set LSEBYP and LSEON bits */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
      break;
    default:
      break;
20000230:	e007      	b.n	20000242 <RCC_LSEConfig+0x36>
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_ON;
20000232:	4b06      	ldr	r3, [pc, #24]	; (2000024c <RCC_LSEConfig+0x40>)
20000234:	2201      	movs	r2, #1
20000236:	701a      	strb	r2, [r3, #0]
      break;
20000238:	e003      	b.n	20000242 <RCC_LSEConfig+0x36>
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
2000023a:	4b04      	ldr	r3, [pc, #16]	; (2000024c <RCC_LSEConfig+0x40>)
2000023c:	2205      	movs	r2, #5
2000023e:	701a      	strb	r2, [r3, #0]
      break;
20000240:	46c0      	nop			; (mov r8, r8)
  }
}
20000242:	46c0      	nop			; (mov r8, r8)
20000244:	46bd      	mov	sp, r7
20000246:	b002      	add	sp, #8
20000248:	bd80      	pop	{r7, pc}
2000024a:	46c0      	nop			; (mov r8, r8)
2000024c:	40023870 	andmi	r3, r2, r0, ror r8

20000250 <RCC_LSICmd>:
  * @note   When the LSI is stopped, LSIRDY flag goes low after 6 LSI oscillator
  *         clock cycles. 
  * @retval None
  */
void RCC_LSICmd(FunctionalState NewState)
{
20000250:	b580      	push	{r7, lr}
20000252:	b082      	sub	sp, #8
20000254:	af00      	add	r7, sp, #0
20000256:	0002      	movs	r2, r0
20000258:	1dfb      	adds	r3, r7, #7
2000025a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CSR_LSION_BB = (uint32_t)NewState;
2000025c:	4b03      	ldr	r3, [pc, #12]	; (2000026c <RCC_LSICmd+0x1c>)
2000025e:	1dfa      	adds	r2, r7, #7
20000260:	7812      	ldrb	r2, [r2, #0]
20000262:	601a      	str	r2, [r3, #0]
}
20000264:	46c0      	nop			; (mov r8, r8)
20000266:	46bd      	mov	sp, r7
20000268:	b002      	add	sp, #8
2000026a:	bd80      	pop	{r7, pc}
2000026c:	42470e80 	submi	r0, r7, #128, 28	; 0x800

20000270 <RCC_PLLConfig>:
  *         correctly.
  *   
  * @retval None
  */
void RCC_PLLConfig(uint32_t RCC_PLLSource, uint32_t PLLM, uint32_t PLLN, uint32_t PLLP, uint32_t PLLQ)
{
20000270:	b580      	push	{r7, lr}
20000272:	b084      	sub	sp, #16
20000274:	af00      	add	r7, sp, #0
20000276:	60f8      	str	r0, [r7, #12]
20000278:	60b9      	str	r1, [r7, #8]
2000027a:	607a      	str	r2, [r7, #4]
2000027c:	603b      	str	r3, [r7, #0]
  assert_param(IS_RCC_PLLM_VALUE(PLLM));
  assert_param(IS_RCC_PLLN_VALUE(PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLP));
  assert_param(IS_RCC_PLLQ_VALUE(PLLQ));

  RCC->PLLCFGR = PLLM | (PLLN << 6) | (((PLLP >> 1) -1) << 16) | (RCC_PLLSource) |
2000027e:	687b      	ldr	r3, [r7, #4]
20000280:	019a      	lsls	r2, r3, #6
20000282:	68bb      	ldr	r3, [r7, #8]
20000284:	431a      	orrs	r2, r3
20000286:	683b      	ldr	r3, [r7, #0]
20000288:	085b      	lsrs	r3, r3, #1
2000028a:	3b01      	subs	r3, #1
2000028c:	041b      	lsls	r3, r3, #16
2000028e:	431a      	orrs	r2, r3
20000290:	68fb      	ldr	r3, [r7, #12]
20000292:	431a      	orrs	r2, r3
20000294:	0011      	movs	r1, r2
                 (PLLQ << 24);
20000296:	69bb      	ldr	r3, [r7, #24]
20000298:	061a      	lsls	r2, r3, #24
  RCC->PLLCFGR = PLLM | (PLLN << 6) | (((PLLP >> 1) -1) << 16) | (RCC_PLLSource) |
2000029a:	4b03      	ldr	r3, [pc, #12]	; (200002a8 <RCC_PLLConfig+0x38>)
2000029c:	430a      	orrs	r2, r1
2000029e:	605a      	str	r2, [r3, #4]
}
200002a0:	46c0      	nop			; (mov r8, r8)
200002a2:	46bd      	mov	sp, r7
200002a4:	b004      	add	sp, #16
200002a6:	bd80      	pop	{r7, pc}
200002a8:	40023800 	andmi	r3, r2, r0, lsl #16

200002ac <RCC_PLLCmd>:
  * @note   The main PLL is disabled by hardware when entering STOP and STANDBY modes.
  * @param  NewState: new state of the main PLL. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_PLLCmd(FunctionalState NewState)
{
200002ac:	b580      	push	{r7, lr}
200002ae:	b082      	sub	sp, #8
200002b0:	af00      	add	r7, sp, #0
200002b2:	0002      	movs	r2, r0
200002b4:	1dfb      	adds	r3, r7, #7
200002b6:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_PLLON_BB = (uint32_t)NewState;
200002b8:	4b03      	ldr	r3, [pc, #12]	; (200002c8 <RCC_PLLCmd+0x1c>)
200002ba:	1dfa      	adds	r2, r7, #7
200002bc:	7812      	ldrb	r2, [r2, #0]
200002be:	601a      	str	r2, [r3, #0]
}
200002c0:	46c0      	nop			; (mov r8, r8)
200002c2:	46bd      	mov	sp, r7
200002c4:	b002      	add	sp, #8
200002c6:	bd80      	pop	{r7, pc}
200002c8:	42470060 	submi	r0, r7, #96	; 0x60

200002cc <RCC_PLLI2SConfig>:
  *         on the I2S clock frequency.
  *   
  * @retval None
  */
void RCC_PLLI2SConfig(uint32_t PLLI2SN, uint32_t PLLI2SR)
{
200002cc:	b580      	push	{r7, lr}
200002ce:	b082      	sub	sp, #8
200002d0:	af00      	add	r7, sp, #0
200002d2:	6078      	str	r0, [r7, #4]
200002d4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RCC_PLLI2SN_VALUE(PLLI2SN));
  assert_param(IS_RCC_PLLI2SR_VALUE(PLLI2SR));

  RCC->PLLI2SCFGR = (PLLI2SN << 6) | (PLLI2SR << 28);
200002d6:	687b      	ldr	r3, [r7, #4]
200002d8:	019a      	lsls	r2, r3, #6
200002da:	683b      	ldr	r3, [r7, #0]
200002dc:	071b      	lsls	r3, r3, #28
200002de:	4904      	ldr	r1, [pc, #16]	; (200002f0 <RCC_PLLI2SConfig+0x24>)
200002e0:	4313      	orrs	r3, r2
200002e2:	2284      	movs	r2, #132	; 0x84
200002e4:	508b      	str	r3, [r1, r2]
}
200002e6:	46c0      	nop			; (mov r8, r8)
200002e8:	46bd      	mov	sp, r7
200002ea:	b002      	add	sp, #8
200002ec:	bd80      	pop	{r7, pc}
200002ee:	46c0      	nop			; (mov r8, r8)
200002f0:	40023800 	andmi	r3, r2, r0, lsl #16

200002f4 <RCC_PLLI2SCmd>:
  * @note   The PLLI2S is disabled by hardware when entering STOP and STANDBY modes.  
  * @param  NewState: new state of the PLLI2S. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_PLLI2SCmd(FunctionalState NewState)
{
200002f4:	b580      	push	{r7, lr}
200002f6:	b082      	sub	sp, #8
200002f8:	af00      	add	r7, sp, #0
200002fa:	0002      	movs	r2, r0
200002fc:	1dfb      	adds	r3, r7, #7
200002fe:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_PLLI2SON_BB = (uint32_t)NewState;
20000300:	4b03      	ldr	r3, [pc, #12]	; (20000310 <RCC_PLLI2SCmd+0x1c>)
20000302:	1dfa      	adds	r2, r7, #7
20000304:	7812      	ldrb	r2, [r2, #0]
20000306:	601a      	str	r2, [r3, #0]
}
20000308:	46c0      	nop			; (mov r8, r8)
2000030a:	46bd      	mov	sp, r7
2000030c:	b002      	add	sp, #8
2000030e:	bd80      	pop	{r7, pc}
20000310:	42470068 	submi	r0, r7, #104	; 0x68

20000314 <RCC_PLLSAIConfig>:
  *          This parameter must be a number between 2 and 7.
  *   
  * @retval None
  */
void RCC_PLLSAIConfig(uint32_t PLLSAIN, uint32_t PLLSAIQ, uint32_t PLLSAIR)
{
20000314:	b580      	push	{r7, lr}
20000316:	b084      	sub	sp, #16
20000318:	af00      	add	r7, sp, #0
2000031a:	60f8      	str	r0, [r7, #12]
2000031c:	60b9      	str	r1, [r7, #8]
2000031e:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_PLLSAIN_VALUE(PLLSAIN));
  assert_param(IS_RCC_PLLSAIR_VALUE(PLLSAIR));
  assert_param(IS_RCC_PLLSAIQ_VALUE(PLLSAIQ));
  
  RCC->PLLSAICFGR = (PLLSAIN << 6) | (PLLSAIQ << 24) | (PLLSAIR << 28);
20000320:	68fb      	ldr	r3, [r7, #12]
20000322:	019a      	lsls	r2, r3, #6
20000324:	68bb      	ldr	r3, [r7, #8]
20000326:	061b      	lsls	r3, r3, #24
20000328:	431a      	orrs	r2, r3
2000032a:	687b      	ldr	r3, [r7, #4]
2000032c:	071b      	lsls	r3, r3, #28
2000032e:	4904      	ldr	r1, [pc, #16]	; (20000340 <RCC_PLLSAIConfig+0x2c>)
20000330:	4313      	orrs	r3, r2
20000332:	2288      	movs	r2, #136	; 0x88
20000334:	508b      	str	r3, [r1, r2]
}
20000336:	46c0      	nop			; (mov r8, r8)
20000338:	46bd      	mov	sp, r7
2000033a:	b004      	add	sp, #16
2000033c:	bd80      	pop	{r7, pc}
2000033e:	46c0      	nop			; (mov r8, r8)
20000340:	40023800 	andmi	r3, r2, r0, lsl #16

20000344 <RCC_PLLSAICmd>:
  * @note   The PLLSAI is disabled by hardware when entering STOP and STANDBY modes.  
  * @param  NewState: new state of the PLLSAI. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_PLLSAICmd(FunctionalState NewState)
{
20000344:	b580      	push	{r7, lr}
20000346:	b082      	sub	sp, #8
20000348:	af00      	add	r7, sp, #0
2000034a:	0002      	movs	r2, r0
2000034c:	1dfb      	adds	r3, r7, #7
2000034e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_PLLSAION_BB = (uint32_t)NewState;
20000350:	4b03      	ldr	r3, [pc, #12]	; (20000360 <RCC_PLLSAICmd+0x1c>)
20000352:	1dfa      	adds	r2, r7, #7
20000354:	7812      	ldrb	r2, [r2, #0]
20000356:	601a      	str	r2, [r3, #0]
}
20000358:	46c0      	nop			; (mov r8, r8)
2000035a:	46bd      	mov	sp, r7
2000035c:	b002      	add	sp, #8
2000035e:	bd80      	pop	{r7, pc}
20000360:	42470070 	submi	r0, r7, #112	; 0x70

20000364 <RCC_ClockSecuritySystemCmd>:
  * @param  NewState: new state of the Clock Security System.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_ClockSecuritySystemCmd(FunctionalState NewState)
{
20000364:	b580      	push	{r7, lr}
20000366:	b082      	sub	sp, #8
20000368:	af00      	add	r7, sp, #0
2000036a:	0002      	movs	r2, r0
2000036c:	1dfb      	adds	r3, r7, #7
2000036e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_CSSON_BB = (uint32_t)NewState;
20000370:	4b03      	ldr	r3, [pc, #12]	; (20000380 <RCC_ClockSecuritySystemCmd+0x1c>)
20000372:	1dfa      	adds	r2, r7, #7
20000374:	7812      	ldrb	r2, [r2, #0]
20000376:	601a      	str	r2, [r3, #0]
}
20000378:	46c0      	nop			; (mov r8, r8)
2000037a:	46bd      	mov	sp, r7
2000037c:	b002      	add	sp, #8
2000037e:	bd80      	pop	{r7, pc}
20000380:	4247004c 	submi	r0, r7, #76	; 0x4c

20000384 <RCC_MCO1Config>:
  *            @arg RCC_MCO1Div_4: division by 4 applied to MCO1 clock
  *            @arg RCC_MCO1Div_5: division by 5 applied to MCO1 clock
  * @retval None
  */
void RCC_MCO1Config(uint32_t RCC_MCO1Source, uint32_t RCC_MCO1Div)
{
20000384:	b580      	push	{r7, lr}
20000386:	b084      	sub	sp, #16
20000388:	af00      	add	r7, sp, #0
2000038a:	6078      	str	r0, [r7, #4]
2000038c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
2000038e:	2300      	movs	r3, #0
20000390:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_MCO1SOURCE(RCC_MCO1Source));
  assert_param(IS_RCC_MCO1DIV(RCC_MCO1Div));  

  tmpreg = RCC->CFGR;
20000392:	4b0a      	ldr	r3, [pc, #40]	; (200003bc <RCC_MCO1Config+0x38>)
20000394:	689b      	ldr	r3, [r3, #8]
20000396:	60fb      	str	r3, [r7, #12]

  /* Clear MCO1[1:0] and MCO1PRE[2:0] bits */
  tmpreg &= CFGR_MCO1_RESET_MASK;
20000398:	68fb      	ldr	r3, [r7, #12]
2000039a:	4a09      	ldr	r2, [pc, #36]	; (200003c0 <RCC_MCO1Config+0x3c>)
2000039c:	4013      	ands	r3, r2
2000039e:	60fb      	str	r3, [r7, #12]

  /* Select MCO1 clock source and prescaler */
  tmpreg |= RCC_MCO1Source | RCC_MCO1Div;
200003a0:	687a      	ldr	r2, [r7, #4]
200003a2:	683b      	ldr	r3, [r7, #0]
200003a4:	4313      	orrs	r3, r2
200003a6:	68fa      	ldr	r2, [r7, #12]
200003a8:	4313      	orrs	r3, r2
200003aa:	60fb      	str	r3, [r7, #12]
  
  /* Store the new value */
  RCC->CFGR = tmpreg;
200003ac:	4b03      	ldr	r3, [pc, #12]	; (200003bc <RCC_MCO1Config+0x38>)
200003ae:	68fa      	ldr	r2, [r7, #12]
200003b0:	609a      	str	r2, [r3, #8]

#if defined(STM32F410xx)
  RCC_MCO1Cmd(ENABLE);
#endif /* STM32F410xx */   
}
200003b2:	46c0      	nop			; (mov r8, r8)
200003b4:	46bd      	mov	sp, r7
200003b6:	b004      	add	sp, #16
200003b8:	bd80      	pop	{r7, pc}
200003ba:	46c0      	nop			; (mov r8, r8)
200003bc:	40023800 	andmi	r3, r2, r0, lsl #16
200003c0:	f89fffff 			; <UNDEFINED> instruction: 0xf89fffff

200003c4 <RCC_MCO2Config>:
  * @note  For STM32F410xx devices to output I2SCLK clock on MCO2 you should have
  *        at last one of the SPI clocks enabled (SPI1, SPI2 or SPI5).
  * @retval None
  */
void RCC_MCO2Config(uint32_t RCC_MCO2Source, uint32_t RCC_MCO2Div)
{
200003c4:	b580      	push	{r7, lr}
200003c6:	b084      	sub	sp, #16
200003c8:	af00      	add	r7, sp, #0
200003ca:	6078      	str	r0, [r7, #4]
200003cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
200003ce:	2300      	movs	r3, #0
200003d0:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_MCO2SOURCE(RCC_MCO2Source));
  assert_param(IS_RCC_MCO2DIV(RCC_MCO2Div));
  
  tmpreg = RCC->CFGR;
200003d2:	4b0a      	ldr	r3, [pc, #40]	; (200003fc <RCC_MCO2Config+0x38>)
200003d4:	689b      	ldr	r3, [r3, #8]
200003d6:	60fb      	str	r3, [r7, #12]
  
  /* Clear MCO2 and MCO2PRE[2:0] bits */
  tmpreg &= CFGR_MCO2_RESET_MASK;
200003d8:	68fb      	ldr	r3, [r7, #12]
200003da:	015b      	lsls	r3, r3, #5
200003dc:	095b      	lsrs	r3, r3, #5
200003de:	60fb      	str	r3, [r7, #12]

  /* Select MCO2 clock source and prescaler */
  tmpreg |= RCC_MCO2Source | RCC_MCO2Div;
200003e0:	687a      	ldr	r2, [r7, #4]
200003e2:	683b      	ldr	r3, [r7, #0]
200003e4:	4313      	orrs	r3, r2
200003e6:	68fa      	ldr	r2, [r7, #12]
200003e8:	4313      	orrs	r3, r2
200003ea:	60fb      	str	r3, [r7, #12]
  
  /* Store the new value */
  RCC->CFGR = tmpreg;
200003ec:	4b03      	ldr	r3, [pc, #12]	; (200003fc <RCC_MCO2Config+0x38>)
200003ee:	68fa      	ldr	r2, [r7, #12]
200003f0:	609a      	str	r2, [r3, #8]

#if defined(STM32F410xx)
  RCC_MCO2Cmd(ENABLE);
#endif /* STM32F410xx */   
}
200003f2:	46c0      	nop			; (mov r8, r8)
200003f4:	46bd      	mov	sp, r7
200003f6:	b004      	add	sp, #16
200003f8:	bd80      	pop	{r7, pc}
200003fa:	46c0      	nop			; (mov r8, r8)
200003fc:	40023800 	andmi	r3, r2, r0, lsl #16

20000400 <RCC_SYSCLKConfig>:
  *            @arg RCC_SYSCLKSource_PLLCLK: PLL selected as system clock source (RCC_SYSCLKSource_PLLPCLK for STM32F446xx devices)
  *            @arg RCC_SYSCLKSource_PLLRCLK: PLL R selected as system clock source only for STM32F412xG, STM32F413_423xx and STM32F446xx devices
  * @retval None
  */
void RCC_SYSCLKConfig(uint32_t RCC_SYSCLKSource)
{
20000400:	b580      	push	{r7, lr}
20000402:	b084      	sub	sp, #16
20000404:	af00      	add	r7, sp, #0
20000406:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
20000408:	2300      	movs	r3, #0
2000040a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_SYSCLK_SOURCE(RCC_SYSCLKSource));

  tmpreg = RCC->CFGR;
2000040c:	4b08      	ldr	r3, [pc, #32]	; (20000430 <RCC_SYSCLKConfig+0x30>)
2000040e:	689b      	ldr	r3, [r3, #8]
20000410:	60fb      	str	r3, [r7, #12]

  /* Clear SW[1:0] bits */
  tmpreg &= ~RCC_CFGR_SW;
20000412:	68fb      	ldr	r3, [r7, #12]
20000414:	2203      	movs	r2, #3
20000416:	4393      	bics	r3, r2
20000418:	60fb      	str	r3, [r7, #12]

  /* Set SW[1:0] bits according to RCC_SYSCLKSource value */
  tmpreg |= RCC_SYSCLKSource;
2000041a:	68fa      	ldr	r2, [r7, #12]
2000041c:	687b      	ldr	r3, [r7, #4]
2000041e:	4313      	orrs	r3, r2
20000420:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;
20000422:	4b03      	ldr	r3, [pc, #12]	; (20000430 <RCC_SYSCLKConfig+0x30>)
20000424:	68fa      	ldr	r2, [r7, #12]
20000426:	609a      	str	r2, [r3, #8]
}
20000428:	46c0      	nop			; (mov r8, r8)
2000042a:	46bd      	mov	sp, r7
2000042c:	b004      	add	sp, #16
2000042e:	bd80      	pop	{r7, pc}
20000430:	40023800 	andmi	r3, r2, r0, lsl #16

20000434 <RCC_GetSYSCLKSource>:
  *              - 0x04: HSE used as system clock
  *              - 0x08: PLL used as system clock (PLL P for STM32F446xx devices)
  *              - 0x0C: PLL R used as system clock (only for STM32F412xG, STM32F413_423xx and STM32F446xx devices)
  */
uint8_t RCC_GetSYSCLKSource(void)
{
20000434:	b580      	push	{r7, lr}
20000436:	af00      	add	r7, sp, #0
  return ((uint8_t)(RCC->CFGR & RCC_CFGR_SWS));
20000438:	4b04      	ldr	r3, [pc, #16]	; (2000044c <RCC_GetSYSCLKSource+0x18>)
2000043a:	689b      	ldr	r3, [r3, #8]
2000043c:	b2db      	uxtb	r3, r3
2000043e:	220c      	movs	r2, #12
20000440:	4013      	ands	r3, r2
20000442:	b2db      	uxtb	r3, r3
}
20000444:	0018      	movs	r0, r3
20000446:	46bd      	mov	sp, r7
20000448:	bd80      	pop	{r7, pc}
2000044a:	46c0      	nop			; (mov r8, r8)
2000044c:	40023800 	andmi	r3, r2, r0, lsl #16

20000450 <RCC_HCLKConfig>:
  *            @arg RCC_SYSCLK_Div256: AHB clock = SYSCLK/256
  *            @arg RCC_SYSCLK_Div512: AHB clock = SYSCLK/512
  * @retval None
  */
void RCC_HCLKConfig(uint32_t RCC_SYSCLK)
{
20000450:	b580      	push	{r7, lr}
20000452:	b084      	sub	sp, #16
20000454:	af00      	add	r7, sp, #0
20000456:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
20000458:	2300      	movs	r3, #0
2000045a:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_HCLK(RCC_SYSCLK));

  tmpreg = RCC->CFGR;
2000045c:	4b08      	ldr	r3, [pc, #32]	; (20000480 <RCC_HCLKConfig+0x30>)
2000045e:	689b      	ldr	r3, [r3, #8]
20000460:	60fb      	str	r3, [r7, #12]

  /* Clear HPRE[3:0] bits */
  tmpreg &= ~RCC_CFGR_HPRE;
20000462:	68fb      	ldr	r3, [r7, #12]
20000464:	22f0      	movs	r2, #240	; 0xf0
20000466:	4393      	bics	r3, r2
20000468:	60fb      	str	r3, [r7, #12]

  /* Set HPRE[3:0] bits according to RCC_SYSCLK value */
  tmpreg |= RCC_SYSCLK;
2000046a:	68fa      	ldr	r2, [r7, #12]
2000046c:	687b      	ldr	r3, [r7, #4]
2000046e:	4313      	orrs	r3, r2
20000470:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;
20000472:	4b03      	ldr	r3, [pc, #12]	; (20000480 <RCC_HCLKConfig+0x30>)
20000474:	68fa      	ldr	r2, [r7, #12]
20000476:	609a      	str	r2, [r3, #8]
}
20000478:	46c0      	nop			; (mov r8, r8)
2000047a:	46bd      	mov	sp, r7
2000047c:	b004      	add	sp, #16
2000047e:	bd80      	pop	{r7, pc}
20000480:	40023800 	andmi	r3, r2, r0, lsl #16

20000484 <RCC_PCLK1Config>:
  *            @arg RCC_HCLK_Div8:  APB1 clock = HCLK/8
  *            @arg RCC_HCLK_Div16: APB1 clock = HCLK/16
  * @retval None
  */
void RCC_PCLK1Config(uint32_t RCC_HCLK)
{
20000484:	b580      	push	{r7, lr}
20000486:	b084      	sub	sp, #16
20000488:	af00      	add	r7, sp, #0
2000048a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
2000048c:	2300      	movs	r3, #0
2000048e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));

  tmpreg = RCC->CFGR;
20000490:	4b08      	ldr	r3, [pc, #32]	; (200004b4 <RCC_PCLK1Config+0x30>)
20000492:	689b      	ldr	r3, [r3, #8]
20000494:	60fb      	str	r3, [r7, #12]

  /* Clear PPRE1[2:0] bits */
  tmpreg &= ~RCC_CFGR_PPRE1;
20000496:	68fb      	ldr	r3, [r7, #12]
20000498:	4a07      	ldr	r2, [pc, #28]	; (200004b8 <RCC_PCLK1Config+0x34>)
2000049a:	4013      	ands	r3, r2
2000049c:	60fb      	str	r3, [r7, #12]

  /* Set PPRE1[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK;
2000049e:	68fa      	ldr	r2, [r7, #12]
200004a0:	687b      	ldr	r3, [r7, #4]
200004a2:	4313      	orrs	r3, r2
200004a4:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;
200004a6:	4b03      	ldr	r3, [pc, #12]	; (200004b4 <RCC_PCLK1Config+0x30>)
200004a8:	68fa      	ldr	r2, [r7, #12]
200004aa:	609a      	str	r2, [r3, #8]
}
200004ac:	46c0      	nop			; (mov r8, r8)
200004ae:	46bd      	mov	sp, r7
200004b0:	b004      	add	sp, #16
200004b2:	bd80      	pop	{r7, pc}
200004b4:	40023800 	andmi	r3, r2, r0, lsl #16
200004b8:	ffffe3ff 			; <UNDEFINED> instruction: 0xffffe3ff

200004bc <RCC_PCLK2Config>:
  *            @arg RCC_HCLK_Div8:  APB2 clock = HCLK/8
  *            @arg RCC_HCLK_Div16: APB2 clock = HCLK/16
  * @retval None
  */
void RCC_PCLK2Config(uint32_t RCC_HCLK)
{
200004bc:	b580      	push	{r7, lr}
200004be:	b084      	sub	sp, #16
200004c0:	af00      	add	r7, sp, #0
200004c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
200004c4:	2300      	movs	r3, #0
200004c6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));

  tmpreg = RCC->CFGR;
200004c8:	4b09      	ldr	r3, [pc, #36]	; (200004f0 <RCC_PCLK2Config+0x34>)
200004ca:	689b      	ldr	r3, [r3, #8]
200004cc:	60fb      	str	r3, [r7, #12]

  /* Clear PPRE2[2:0] bits */
  tmpreg &= ~RCC_CFGR_PPRE2;
200004ce:	68fb      	ldr	r3, [r7, #12]
200004d0:	4a08      	ldr	r2, [pc, #32]	; (200004f4 <RCC_PCLK2Config+0x38>)
200004d2:	4013      	ands	r3, r2
200004d4:	60fb      	str	r3, [r7, #12]

  /* Set PPRE2[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK << 3;
200004d6:	687b      	ldr	r3, [r7, #4]
200004d8:	00db      	lsls	r3, r3, #3
200004da:	68fa      	ldr	r2, [r7, #12]
200004dc:	4313      	orrs	r3, r2
200004de:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;
200004e0:	4b03      	ldr	r3, [pc, #12]	; (200004f0 <RCC_PCLK2Config+0x34>)
200004e2:	68fa      	ldr	r2, [r7, #12]
200004e4:	609a      	str	r2, [r3, #8]
}
200004e6:	46c0      	nop			; (mov r8, r8)
200004e8:	46bd      	mov	sp, r7
200004ea:	b004      	add	sp, #16
200004ec:	bd80      	pop	{r7, pc}
200004ee:	46c0      	nop			; (mov r8, r8)
200004f0:	40023800 	andmi	r3, r2, r0, lsl #16
200004f4:	ffff1fff 			; <UNDEFINED> instruction: 0xffff1fff

200004f8 <RCC_GetClocksFreq>:
  *         configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
200004f8:	b580      	push	{r7, lr}
200004fa:	b088      	sub	sp, #32
200004fc:	af00      	add	r7, sp, #0
200004fe:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
20000500:	2300      	movs	r3, #0
20000502:	61bb      	str	r3, [r7, #24]
20000504:	2300      	movs	r3, #0
20000506:	617b      	str	r3, [r7, #20]
20000508:	2300      	movs	r3, #0
2000050a:	61fb      	str	r3, [r7, #28]
2000050c:	2302      	movs	r3, #2
2000050e:	613b      	str	r3, [r7, #16]
20000510:	2300      	movs	r3, #0
20000512:	60fb      	str	r3, [r7, #12]
20000514:	2302      	movs	r3, #2
20000516:	60bb      	str	r3, [r7, #8]
#if defined(STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F446xx)  
  uint32_t pllr = 2;
#endif /* STM32F412xG || STM32F413_423xx || STM32F446xx */
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
20000518:	4b49      	ldr	r3, [pc, #292]	; (20000640 <RCC_GetClocksFreq+0x148>)
2000051a:	689b      	ldr	r3, [r3, #8]
2000051c:	220c      	movs	r2, #12
2000051e:	4013      	ands	r3, r2
20000520:	61bb      	str	r3, [r7, #24]
  
  switch (tmp)
20000522:	69bb      	ldr	r3, [r7, #24]
20000524:	2b04      	cmp	r3, #4
20000526:	d007      	beq.n	20000538 <RCC_GetClocksFreq+0x40>
20000528:	2b08      	cmp	r3, #8
2000052a:	d009      	beq.n	20000540 <RCC_GetClocksFreq+0x48>
2000052c:	2b00      	cmp	r3, #0
2000052e:	d141      	bne.n	200005b4 <RCC_GetClocksFreq+0xbc>
  {
  case 0x00:  /* HSI used as system clock source */
    RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
20000530:	687b      	ldr	r3, [r7, #4]
20000532:	4a44      	ldr	r2, [pc, #272]	; (20000644 <RCC_GetClocksFreq+0x14c>)
20000534:	601a      	str	r2, [r3, #0]
    break;
20000536:	e041      	b.n	200005bc <RCC_GetClocksFreq+0xc4>
  case 0x04:  /* HSE used as system clock  source */
    RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
20000538:	687b      	ldr	r3, [r7, #4]
2000053a:	4a43      	ldr	r2, [pc, #268]	; (20000648 <RCC_GetClocksFreq+0x150>)
2000053c:	601a      	str	r2, [r3, #0]
    break;
2000053e:	e03d      	b.n	200005bc <RCC_GetClocksFreq+0xc4>
  case 0x08:  /* PLL P used as system clock  source */
    
    /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLP
    */    
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
20000540:	4b3f      	ldr	r3, [pc, #252]	; (20000640 <RCC_GetClocksFreq+0x148>)
20000542:	685b      	ldr	r3, [r3, #4]
20000544:	0d9b      	lsrs	r3, r3, #22
20000546:	2201      	movs	r2, #1
20000548:	4013      	ands	r3, r2
2000054a:	60fb      	str	r3, [r7, #12]
    pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
2000054c:	4b3c      	ldr	r3, [pc, #240]	; (20000640 <RCC_GetClocksFreq+0x148>)
2000054e:	685b      	ldr	r3, [r3, #4]
20000550:	223f      	movs	r2, #63	; 0x3f
20000552:	4013      	ands	r3, r2
20000554:	60bb      	str	r3, [r7, #8]
    
    if (pllsource != 0)
20000556:	68fb      	ldr	r3, [r7, #12]
20000558:	2b00      	cmp	r3, #0
2000055a:	d00d      	beq.n	20000578 <RCC_GetClocksFreq+0x80>
    {
      /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
2000055c:	68b9      	ldr	r1, [r7, #8]
2000055e:	483a      	ldr	r0, [pc, #232]	; (20000648 <RCC_GetClocksFreq+0x150>)
20000560:	f002 fcce 	bl	20002f00 <__udivsi3>
20000564:	0003      	movs	r3, r0
20000566:	001a      	movs	r2, r3
20000568:	4b35      	ldr	r3, [pc, #212]	; (20000640 <RCC_GetClocksFreq+0x148>)
2000056a:	685b      	ldr	r3, [r3, #4]
2000056c:	099b      	lsrs	r3, r3, #6
2000056e:	05db      	lsls	r3, r3, #23
20000570:	0ddb      	lsrs	r3, r3, #23
20000572:	4353      	muls	r3, r2
20000574:	61fb      	str	r3, [r7, #28]
20000576:	e00c      	b.n	20000592 <RCC_GetClocksFreq+0x9a>
    }
    else
    {
      /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
20000578:	68b9      	ldr	r1, [r7, #8]
2000057a:	4832      	ldr	r0, [pc, #200]	; (20000644 <RCC_GetClocksFreq+0x14c>)
2000057c:	f002 fcc0 	bl	20002f00 <__udivsi3>
20000580:	0003      	movs	r3, r0
20000582:	001a      	movs	r2, r3
20000584:	4b2e      	ldr	r3, [pc, #184]	; (20000640 <RCC_GetClocksFreq+0x148>)
20000586:	685b      	ldr	r3, [r3, #4]
20000588:	099b      	lsrs	r3, r3, #6
2000058a:	05db      	lsls	r3, r3, #23
2000058c:	0ddb      	lsrs	r3, r3, #23
2000058e:	4353      	muls	r3, r2
20000590:	61fb      	str	r3, [r7, #28]
    }
    
    pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
20000592:	4b2b      	ldr	r3, [pc, #172]	; (20000640 <RCC_GetClocksFreq+0x148>)
20000594:	685b      	ldr	r3, [r3, #4]
20000596:	0c1b      	lsrs	r3, r3, #16
20000598:	2203      	movs	r2, #3
2000059a:	4013      	ands	r3, r2
2000059c:	3301      	adds	r3, #1
2000059e:	005b      	lsls	r3, r3, #1
200005a0:	613b      	str	r3, [r7, #16]
    RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
200005a2:	6939      	ldr	r1, [r7, #16]
200005a4:	69f8      	ldr	r0, [r7, #28]
200005a6:	f002 fcab 	bl	20002f00 <__udivsi3>
200005aa:	0003      	movs	r3, r0
200005ac:	001a      	movs	r2, r3
200005ae:	687b      	ldr	r3, [r7, #4]
200005b0:	601a      	str	r2, [r3, #0]
    break;
200005b2:	e003      	b.n	200005bc <RCC_GetClocksFreq+0xc4>
    RCC_Clocks->SYSCLK_Frequency = pllvco/pllr;    
    break;
#endif /* STM32F412xG || STM32F413_423xx || STM32F446xx */
    
  default:
    RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
200005b4:	687b      	ldr	r3, [r7, #4]
200005b6:	4a23      	ldr	r2, [pc, #140]	; (20000644 <RCC_GetClocksFreq+0x14c>)
200005b8:	601a      	str	r2, [r3, #0]
    break;
200005ba:	46c0      	nop			; (mov r8, r8)
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/
  
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
200005bc:	4b20      	ldr	r3, [pc, #128]	; (20000640 <RCC_GetClocksFreq+0x148>)
200005be:	689b      	ldr	r3, [r3, #8]
200005c0:	22f0      	movs	r2, #240	; 0xf0
200005c2:	4013      	ands	r3, r2
200005c4:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 4;
200005c6:	69bb      	ldr	r3, [r7, #24]
200005c8:	091b      	lsrs	r3, r3, #4
200005ca:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
200005cc:	4a1f      	ldr	r2, [pc, #124]	; (2000064c <RCC_GetClocksFreq+0x154>)
200005ce:	69bb      	ldr	r3, [r7, #24]
200005d0:	18d3      	adds	r3, r2, r3
200005d2:	781b      	ldrb	r3, [r3, #0]
200005d4:	b2db      	uxtb	r3, r3
200005d6:	617b      	str	r3, [r7, #20]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
200005d8:	687b      	ldr	r3, [r7, #4]
200005da:	681a      	ldr	r2, [r3, #0]
200005dc:	697b      	ldr	r3, [r7, #20]
200005de:	40da      	lsrs	r2, r3
200005e0:	687b      	ldr	r3, [r7, #4]
200005e2:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
200005e4:	4b16      	ldr	r3, [pc, #88]	; (20000640 <RCC_GetClocksFreq+0x148>)
200005e6:	689a      	ldr	r2, [r3, #8]
200005e8:	23e0      	movs	r3, #224	; 0xe0
200005ea:	015b      	lsls	r3, r3, #5
200005ec:	4013      	ands	r3, r2
200005ee:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 10;
200005f0:	69bb      	ldr	r3, [r7, #24]
200005f2:	0a9b      	lsrs	r3, r3, #10
200005f4:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
200005f6:	4a15      	ldr	r2, [pc, #84]	; (2000064c <RCC_GetClocksFreq+0x154>)
200005f8:	69bb      	ldr	r3, [r7, #24]
200005fa:	18d3      	adds	r3, r2, r3
200005fc:	781b      	ldrb	r3, [r3, #0]
200005fe:	b2db      	uxtb	r3, r3
20000600:	617b      	str	r3, [r7, #20]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
20000602:	687b      	ldr	r3, [r7, #4]
20000604:	685a      	ldr	r2, [r3, #4]
20000606:	697b      	ldr	r3, [r7, #20]
20000608:	40da      	lsrs	r2, r3
2000060a:	687b      	ldr	r3, [r7, #4]
2000060c:	609a      	str	r2, [r3, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
2000060e:	4b0c      	ldr	r3, [pc, #48]	; (20000640 <RCC_GetClocksFreq+0x148>)
20000610:	689a      	ldr	r2, [r3, #8]
20000612:	23e0      	movs	r3, #224	; 0xe0
20000614:	021b      	lsls	r3, r3, #8
20000616:	4013      	ands	r3, r2
20000618:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 13;
2000061a:	69bb      	ldr	r3, [r7, #24]
2000061c:	0b5b      	lsrs	r3, r3, #13
2000061e:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
20000620:	4a0a      	ldr	r2, [pc, #40]	; (2000064c <RCC_GetClocksFreq+0x154>)
20000622:	69bb      	ldr	r3, [r7, #24]
20000624:	18d3      	adds	r3, r2, r3
20000626:	781b      	ldrb	r3, [r3, #0]
20000628:	b2db      	uxtb	r3, r3
2000062a:	617b      	str	r3, [r7, #20]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
2000062c:	687b      	ldr	r3, [r7, #4]
2000062e:	685a      	ldr	r2, [r3, #4]
20000630:	697b      	ldr	r3, [r7, #20]
20000632:	40da      	lsrs	r2, r3
20000634:	687b      	ldr	r3, [r7, #4]
20000636:	60da      	str	r2, [r3, #12]
}
20000638:	46c0      	nop			; (mov r8, r8)
2000063a:	46bd      	mov	sp, r7
2000063c:	b008      	add	sp, #32
2000063e:	bd80      	pop	{r7, pc}
20000640:	40023800 	andmi	r3, r2, r0, lsl #16
20000644:	00f42400 	rscseq	r2, r4, r0, lsl #8
20000648:	017d7840 	cmneq	sp, r0, asr #16
2000064c:	20003040 	andcs	r3, r0, r0, asr #32

20000650 <RCC_RTCCLKConfig>:
  *         RTC clock source).
  *  
  * @retval None
  */
void RCC_RTCCLKConfig(uint32_t RCC_RTCCLKSource)
{
20000650:	b580      	push	{r7, lr}
20000652:	b084      	sub	sp, #16
20000654:	af00      	add	r7, sp, #0
20000656:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
20000658:	2300      	movs	r3, #0
2000065a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_RTCCLK_SOURCE(RCC_RTCCLKSource));

  if ((RCC_RTCCLKSource & 0x00000300) == 0x00000300)
2000065c:	687a      	ldr	r2, [r7, #4]
2000065e:	23c0      	movs	r3, #192	; 0xc0
20000660:	009b      	lsls	r3, r3, #2
20000662:	401a      	ands	r2, r3
20000664:	23c0      	movs	r3, #192	; 0xc0
20000666:	009b      	lsls	r3, r3, #2
20000668:	429a      	cmp	r2, r3
2000066a:	d10f      	bne.n	2000068c <RCC_RTCCLKConfig+0x3c>
  { /* If HSE is selected as RTC clock source, configure HSE division factor for RTC clock */
    tmpreg = RCC->CFGR;
2000066c:	4b0d      	ldr	r3, [pc, #52]	; (200006a4 <RCC_RTCCLKConfig+0x54>)
2000066e:	689b      	ldr	r3, [r3, #8]
20000670:	60fb      	str	r3, [r7, #12]

    /* Clear RTCPRE[4:0] bits */
    tmpreg &= ~RCC_CFGR_RTCPRE;
20000672:	68fb      	ldr	r3, [r7, #12]
20000674:	4a0c      	ldr	r2, [pc, #48]	; (200006a8 <RCC_RTCCLKConfig+0x58>)
20000676:	4013      	ands	r3, r2
20000678:	60fb      	str	r3, [r7, #12]

    /* Configure HSE division factor for RTC clock */
    tmpreg |= (RCC_RTCCLKSource & 0xFFFFCFF);
2000067a:	687b      	ldr	r3, [r7, #4]
2000067c:	4a0b      	ldr	r2, [pc, #44]	; (200006ac <RCC_RTCCLKConfig+0x5c>)
2000067e:	4013      	ands	r3, r2
20000680:	68fa      	ldr	r2, [r7, #12]
20000682:	4313      	orrs	r3, r2
20000684:	60fb      	str	r3, [r7, #12]

    /* Store the new value */
    RCC->CFGR = tmpreg;
20000686:	4b07      	ldr	r3, [pc, #28]	; (200006a4 <RCC_RTCCLKConfig+0x54>)
20000688:	68fa      	ldr	r2, [r7, #12]
2000068a:	609a      	str	r2, [r3, #8]
  }
    
  /* Select the RTC clock source */
  RCC->BDCR |= (RCC_RTCCLKSource & 0x00000FFF);
2000068c:	4b05      	ldr	r3, [pc, #20]	; (200006a4 <RCC_RTCCLKConfig+0x54>)
2000068e:	6f19      	ldr	r1, [r3, #112]	; 0x70
20000690:	687b      	ldr	r3, [r7, #4]
20000692:	051b      	lsls	r3, r3, #20
20000694:	0d1a      	lsrs	r2, r3, #20
20000696:	4b03      	ldr	r3, [pc, #12]	; (200006a4 <RCC_RTCCLKConfig+0x54>)
20000698:	430a      	orrs	r2, r1
2000069a:	671a      	str	r2, [r3, #112]	; 0x70
}
2000069c:	46c0      	nop			; (mov r8, r8)
2000069e:	46bd      	mov	sp, r7
200006a0:	b004      	add	sp, #16
200006a2:	bd80      	pop	{r7, pc}
200006a4:	40023800 	andmi	r3, r2, r0, lsl #16
200006a8:	ffe0ffff 			; <UNDEFINED> instruction: 0xffe0ffff
200006ac:	0ffffcff 	svceq	0x00fffcff

200006b0 <RCC_RTCCLKCmd>:
  *         using the RCC_RTCCLKConfig function.
  * @param  NewState: new state of the RTC clock. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_RTCCLKCmd(FunctionalState NewState)
{
200006b0:	b580      	push	{r7, lr}
200006b2:	b082      	sub	sp, #8
200006b4:	af00      	add	r7, sp, #0
200006b6:	0002      	movs	r2, r0
200006b8:	1dfb      	adds	r3, r7, #7
200006ba:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) BDCR_RTCEN_BB = (uint32_t)NewState;
200006bc:	4b03      	ldr	r3, [pc, #12]	; (200006cc <RCC_RTCCLKCmd+0x1c>)
200006be:	1dfa      	adds	r2, r7, #7
200006c0:	7812      	ldrb	r2, [r2, #0]
200006c2:	601a      	str	r2, [r3, #0]
}
200006c4:	46c0      	nop			; (mov r8, r8)
200006c6:	46bd      	mov	sp, r7
200006c8:	b002      	add	sp, #8
200006ca:	bd80      	pop	{r7, pc}
200006cc:	42470e3c 	submi	r0, r7, #60, 28	; 0x3c0

200006d0 <RCC_BackupResetCmd>:
  * @param  NewState: new state of the Backup domain reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_BackupResetCmd(FunctionalState NewState)
{
200006d0:	b580      	push	{r7, lr}
200006d2:	b082      	sub	sp, #8
200006d4:	af00      	add	r7, sp, #0
200006d6:	0002      	movs	r2, r0
200006d8:	1dfb      	adds	r3, r7, #7
200006da:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) BDCR_BDRST_BB = (uint32_t)NewState;
200006dc:	4b03      	ldr	r3, [pc, #12]	; (200006ec <RCC_BackupResetCmd+0x1c>)
200006de:	1dfa      	adds	r2, r7, #7
200006e0:	7812      	ldrb	r2, [r2, #0]
200006e2:	601a      	str	r2, [r3, #0]
}
200006e4:	46c0      	nop			; (mov r8, r8)
200006e6:	46bd      	mov	sp, r7
200006e8:	b002      	add	sp, #8
200006ea:	bd80      	pop	{r7, pc}
200006ec:	42470e40 	submi	r0, r7, #64, 28	; 0x400

200006f0 <RCC_I2SCLKConfig>:
  *            @arg RCC_I2S2CLKSource_Ext: External clock mapped on the I2S_CKIN pin
  *                                        used as I2S clock source
  * @retval None
  */
void RCC_I2SCLKConfig(uint32_t RCC_I2SCLKSource)
{
200006f0:	b580      	push	{r7, lr}
200006f2:	b082      	sub	sp, #8
200006f4:	af00      	add	r7, sp, #0
200006f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_I2SCLK_SOURCE(RCC_I2SCLKSource));

  *(__IO uint32_t *) CFGR_I2SSRC_BB = RCC_I2SCLKSource;  
200006f8:	4b03      	ldr	r3, [pc, #12]	; (20000708 <RCC_I2SCLKConfig+0x18>)
200006fa:	687a      	ldr	r2, [r7, #4]
200006fc:	601a      	str	r2, [r3, #0]
}
200006fe:	46c0      	nop			; (mov r8, r8)
20000700:	46bd      	mov	sp, r7
20000702:	b002      	add	sp, #8
20000704:	bd80      	pop	{r7, pc}
20000706:	46c0      	nop			; (mov r8, r8)
20000708:	4247015c 	submi	r0, r7, #92, 2

2000070c <RCC_SAIBlockACLKConfig>:
  *            @arg RCC_SAIACLKSource_Ext: External clock mapped on the I2S_CKIN pin
  *                                        used as SAI1 Block A clock
  * @retval None
  */
void RCC_SAIBlockACLKConfig(uint32_t RCC_SAIBlockACLKSource)
{
2000070c:	b580      	push	{r7, lr}
2000070e:	b084      	sub	sp, #16
20000710:	af00      	add	r7, sp, #0
20000712:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
20000714:	2300      	movs	r3, #0
20000716:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_SAIACLK_SOURCE(RCC_SAIBlockACLKSource));
  
  tmpreg = RCC->DCKCFGR;
20000718:	4a09      	ldr	r2, [pc, #36]	; (20000740 <RCC_SAIBlockACLKConfig+0x34>)
2000071a:	238c      	movs	r3, #140	; 0x8c
2000071c:	58d3      	ldr	r3, [r2, r3]
2000071e:	60fb      	str	r3, [r7, #12]

  /* Clear RCC_DCKCFGR_SAI1ASRC[1:0] bits */
  tmpreg &= ~RCC_DCKCFGR_SAI1ASRC;
20000720:	68fb      	ldr	r3, [r7, #12]
20000722:	4a08      	ldr	r2, [pc, #32]	; (20000744 <RCC_SAIBlockACLKConfig+0x38>)
20000724:	4013      	ands	r3, r2
20000726:	60fb      	str	r3, [r7, #12]

  /* Set SAI Block A source selection value */
  tmpreg |= RCC_SAIBlockACLKSource;
20000728:	68fa      	ldr	r2, [r7, #12]
2000072a:	687b      	ldr	r3, [r7, #4]
2000072c:	4313      	orrs	r3, r2
2000072e:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->DCKCFGR = tmpreg;
20000730:	4903      	ldr	r1, [pc, #12]	; (20000740 <RCC_SAIBlockACLKConfig+0x34>)
20000732:	228c      	movs	r2, #140	; 0x8c
20000734:	68fb      	ldr	r3, [r7, #12]
20000736:	508b      	str	r3, [r1, r2]
}
20000738:	46c0      	nop			; (mov r8, r8)
2000073a:	46bd      	mov	sp, r7
2000073c:	b004      	add	sp, #16
2000073e:	bd80      	pop	{r7, pc}
20000740:	40023800 	andmi	r3, r2, r0, lsl #16
20000744:	ffcfffff 			; <UNDEFINED> instruction: 0xffcfffff

20000748 <RCC_SAIBlockBCLKConfig>:
  *            @arg RCC_SAIBCLKSource_Ext: External clock mapped on the I2S_CKIN pin
  *                                        used as SAI1 Block B clock
  * @retval None
  */
void RCC_SAIBlockBCLKConfig(uint32_t RCC_SAIBlockBCLKSource)
{
20000748:	b580      	push	{r7, lr}
2000074a:	b084      	sub	sp, #16
2000074c:	af00      	add	r7, sp, #0
2000074e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
20000750:	2300      	movs	r3, #0
20000752:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_SAIBCLK_SOURCE(RCC_SAIBlockBCLKSource));
  
  tmpreg = RCC->DCKCFGR;
20000754:	4a09      	ldr	r2, [pc, #36]	; (2000077c <RCC_SAIBlockBCLKConfig+0x34>)
20000756:	238c      	movs	r3, #140	; 0x8c
20000758:	58d3      	ldr	r3, [r2, r3]
2000075a:	60fb      	str	r3, [r7, #12]

  /* Clear RCC_DCKCFGR_SAI1BSRC[1:0] bits */
  tmpreg &= ~RCC_DCKCFGR_SAI1BSRC;
2000075c:	68fb      	ldr	r3, [r7, #12]
2000075e:	4a08      	ldr	r2, [pc, #32]	; (20000780 <RCC_SAIBlockBCLKConfig+0x38>)
20000760:	4013      	ands	r3, r2
20000762:	60fb      	str	r3, [r7, #12]

  /* Set SAI Block B source selection value */
  tmpreg |= RCC_SAIBlockBCLKSource;
20000764:	68fa      	ldr	r2, [r7, #12]
20000766:	687b      	ldr	r3, [r7, #4]
20000768:	4313      	orrs	r3, r2
2000076a:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->DCKCFGR = tmpreg;
2000076c:	4903      	ldr	r1, [pc, #12]	; (2000077c <RCC_SAIBlockBCLKConfig+0x34>)
2000076e:	228c      	movs	r2, #140	; 0x8c
20000770:	68fb      	ldr	r3, [r7, #12]
20000772:	508b      	str	r3, [r1, r2]
}
20000774:	46c0      	nop			; (mov r8, r8)
20000776:	46bd      	mov	sp, r7
20000778:	b004      	add	sp, #16
2000077a:	bd80      	pop	{r7, pc}
2000077c:	40023800 	andmi	r3, r2, r0, lsl #16
20000780:	ff3fffff 			; <UNDEFINED> instruction: 0xff3fffff

20000784 <RCC_SAIPLLI2SClkDivConfig>:
  *          SAI1 clock frequency = f(PLLI2S_Q) / RCC_PLLI2SDivQ 
  *              
  * @retval None
  */
void RCC_SAIPLLI2SClkDivConfig(uint32_t RCC_PLLI2SDivQ)  
{
20000784:	b580      	push	{r7, lr}
20000786:	b084      	sub	sp, #16
20000788:	af00      	add	r7, sp, #0
2000078a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
2000078c:	2300      	movs	r3, #0
2000078e:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(RCC_PLLI2SDivQ));
  
  tmpreg = RCC->DCKCFGR;
20000790:	4a0a      	ldr	r2, [pc, #40]	; (200007bc <RCC_SAIPLLI2SClkDivConfig+0x38>)
20000792:	238c      	movs	r3, #140	; 0x8c
20000794:	58d3      	ldr	r3, [r2, r3]
20000796:	60fb      	str	r3, [r7, #12]

  /* Clear PLLI2SDIVQ[4:0] bits */
  tmpreg &= ~(RCC_DCKCFGR_PLLI2SDIVQ);
20000798:	68fb      	ldr	r3, [r7, #12]
2000079a:	221f      	movs	r2, #31
2000079c:	4393      	bics	r3, r2
2000079e:	60fb      	str	r3, [r7, #12]

  /* Set PLLI2SDIVQ values */
  tmpreg |= (RCC_PLLI2SDivQ - 1);
200007a0:	687b      	ldr	r3, [r7, #4]
200007a2:	3b01      	subs	r3, #1
200007a4:	68fa      	ldr	r2, [r7, #12]
200007a6:	4313      	orrs	r3, r2
200007a8:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->DCKCFGR = tmpreg;
200007aa:	4904      	ldr	r1, [pc, #16]	; (200007bc <RCC_SAIPLLI2SClkDivConfig+0x38>)
200007ac:	228c      	movs	r2, #140	; 0x8c
200007ae:	68fb      	ldr	r3, [r7, #12]
200007b0:	508b      	str	r3, [r1, r2]
}
200007b2:	46c0      	nop			; (mov r8, r8)
200007b4:	46bd      	mov	sp, r7
200007b6:	b004      	add	sp, #16
200007b8:	bd80      	pop	{r7, pc}
200007ba:	46c0      	nop			; (mov r8, r8)
200007bc:	40023800 	andmi	r3, r2, r0, lsl #16

200007c0 <RCC_SAIPLLSAIClkDivConfig>:
  *          SAI1 clock frequency = f(PLLSAI_Q) / RCC_PLLSAIDivQ  
  *              
  * @retval None
  */
void RCC_SAIPLLSAIClkDivConfig(uint32_t RCC_PLLSAIDivQ)  
{
200007c0:	b580      	push	{r7, lr}
200007c2:	b084      	sub	sp, #16
200007c4:	af00      	add	r7, sp, #0
200007c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
200007c8:	2300      	movs	r3, #0
200007ca:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(RCC_PLLSAIDivQ));
  
  tmpreg = RCC->DCKCFGR;
200007cc:	4a0a      	ldr	r2, [pc, #40]	; (200007f8 <RCC_SAIPLLSAIClkDivConfig+0x38>)
200007ce:	238c      	movs	r3, #140	; 0x8c
200007d0:	58d3      	ldr	r3, [r2, r3]
200007d2:	60fb      	str	r3, [r7, #12]

  /* Clear PLLI2SDIVQ[4:0] and PLLSAIDIVQ[4:0] bits */
  tmpreg &= ~(RCC_DCKCFGR_PLLSAIDIVQ);
200007d4:	68fb      	ldr	r3, [r7, #12]
200007d6:	4a09      	ldr	r2, [pc, #36]	; (200007fc <RCC_SAIPLLSAIClkDivConfig+0x3c>)
200007d8:	4013      	ands	r3, r2
200007da:	60fb      	str	r3, [r7, #12]

  /* Set PLLSAIDIVQ values */
  tmpreg |= ((RCC_PLLSAIDivQ - 1) << 8);
200007dc:	687b      	ldr	r3, [r7, #4]
200007de:	3b01      	subs	r3, #1
200007e0:	021b      	lsls	r3, r3, #8
200007e2:	68fa      	ldr	r2, [r7, #12]
200007e4:	4313      	orrs	r3, r2
200007e6:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->DCKCFGR = tmpreg;
200007e8:	4903      	ldr	r1, [pc, #12]	; (200007f8 <RCC_SAIPLLSAIClkDivConfig+0x38>)
200007ea:	228c      	movs	r2, #140	; 0x8c
200007ec:	68fb      	ldr	r3, [r7, #12]
200007ee:	508b      	str	r3, [r1, r2]
}
200007f0:	46c0      	nop			; (mov r8, r8)
200007f2:	46bd      	mov	sp, r7
200007f4:	b004      	add	sp, #16
200007f6:	bd80      	pop	{r7, pc}
200007f8:	40023800 	andmi	r3, r2, r0, lsl #16
200007fc:	ffffe0ff 			; <UNDEFINED> instruction: 0xffffe0ff

20000800 <RCC_LTDCCLKDivConfig>:
  *            @arg RCC_PLLSAIDivR_Div16: LTDC clock = f(PLLSAI_R)/16
  *            
  * @retval None
  */
void RCC_LTDCCLKDivConfig(uint32_t RCC_PLLSAIDivR)
{
20000800:	b580      	push	{r7, lr}
20000802:	b084      	sub	sp, #16
20000804:	af00      	add	r7, sp, #0
20000806:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
20000808:	2300      	movs	r3, #0
2000080a:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_PLLSAI_DIVR_VALUE(RCC_PLLSAIDivR));
  
  tmpreg = RCC->DCKCFGR;
2000080c:	4a09      	ldr	r2, [pc, #36]	; (20000834 <RCC_LTDCCLKDivConfig+0x34>)
2000080e:	238c      	movs	r3, #140	; 0x8c
20000810:	58d3      	ldr	r3, [r2, r3]
20000812:	60fb      	str	r3, [r7, #12]

  /* Clear PLLSAIDIVR[2:0] bits */
  tmpreg &= ~RCC_DCKCFGR_PLLSAIDIVR;
20000814:	68fb      	ldr	r3, [r7, #12]
20000816:	4a08      	ldr	r2, [pc, #32]	; (20000838 <RCC_LTDCCLKDivConfig+0x38>)
20000818:	4013      	ands	r3, r2
2000081a:	60fb      	str	r3, [r7, #12]

  /* Set PLLSAIDIVR values */
  tmpreg |= RCC_PLLSAIDivR;
2000081c:	68fa      	ldr	r2, [r7, #12]
2000081e:	687b      	ldr	r3, [r7, #4]
20000820:	4313      	orrs	r3, r2
20000822:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->DCKCFGR = tmpreg;
20000824:	4903      	ldr	r1, [pc, #12]	; (20000834 <RCC_LTDCCLKDivConfig+0x34>)
20000826:	228c      	movs	r2, #140	; 0x8c
20000828:	68fb      	ldr	r3, [r7, #12]
2000082a:	508b      	str	r3, [r1, r2]
}
2000082c:	46c0      	nop			; (mov r8, r8)
2000082e:	46bd      	mov	sp, r7
20000830:	b004      	add	sp, #16
20000832:	bd80      	pop	{r7, pc}
20000834:	40023800 	andmi	r3, r2, r0, lsl #16
20000838:	fffcffff 			; <UNDEFINED> instruction: 0xfffcffff

2000083c <RCC_TIMCLKPresConfig>:
  *                 else it is equal to [(HPRE * PPREx) / 4] if PPREx is corresponding 
  *                 to division by 8 or more.
  * @retval None
  */
void RCC_TIMCLKPresConfig(uint32_t RCC_TIMCLKPrescaler)
{
2000083c:	b580      	push	{r7, lr}
2000083e:	b082      	sub	sp, #8
20000840:	af00      	add	r7, sp, #0
20000842:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_TIMCLK_PRESCALER(RCC_TIMCLKPrescaler));

  *(__IO uint32_t *) DCKCFGR_TIMPRE_BB = RCC_TIMCLKPrescaler;
20000844:	4b03      	ldr	r3, [pc, #12]	; (20000854 <RCC_TIMCLKPresConfig+0x18>)
20000846:	687a      	ldr	r2, [r7, #4]
20000848:	601a      	str	r2, [r3, #0]
}
2000084a:	46c0      	nop			; (mov r8, r8)
2000084c:	46bd      	mov	sp, r7
2000084e:	b002      	add	sp, #8
20000850:	bd80      	pop	{r7, pc}
20000852:	46c0      	nop			; (mov r8, r8)
20000854:	424711e0 	submi	r1, r7, #224, 2	; 0x38

20000858 <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
20000858:	b580      	push	{r7, lr}
2000085a:	b082      	sub	sp, #8
2000085c:	af00      	add	r7, sp, #0
2000085e:	6078      	str	r0, [r7, #4]
20000860:	000a      	movs	r2, r1
20000862:	1cfb      	adds	r3, r7, #3
20000864:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
20000866:	1cfb      	adds	r3, r7, #3
20000868:	781b      	ldrb	r3, [r3, #0]
2000086a:	2b00      	cmp	r3, #0
2000086c:	d006      	beq.n	2000087c <RCC_AHB1PeriphClockCmd+0x24>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
2000086e:	4b09      	ldr	r3, [pc, #36]	; (20000894 <RCC_AHB1PeriphClockCmd+0x3c>)
20000870:	6b19      	ldr	r1, [r3, #48]	; 0x30
20000872:	4b08      	ldr	r3, [pc, #32]	; (20000894 <RCC_AHB1PeriphClockCmd+0x3c>)
20000874:	687a      	ldr	r2, [r7, #4]
20000876:	430a      	orrs	r2, r1
20000878:	631a      	str	r2, [r3, #48]	; 0x30
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
  }
}
2000087a:	e006      	b.n	2000088a <RCC_AHB1PeriphClockCmd+0x32>
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
2000087c:	4b05      	ldr	r3, [pc, #20]	; (20000894 <RCC_AHB1PeriphClockCmd+0x3c>)
2000087e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
20000880:	687b      	ldr	r3, [r7, #4]
20000882:	43d9      	mvns	r1, r3
20000884:	4b03      	ldr	r3, [pc, #12]	; (20000894 <RCC_AHB1PeriphClockCmd+0x3c>)
20000886:	400a      	ands	r2, r1
20000888:	631a      	str	r2, [r3, #48]	; 0x30
}
2000088a:	46c0      	nop			; (mov r8, r8)
2000088c:	46bd      	mov	sp, r7
2000088e:	b002      	add	sp, #8
20000890:	bd80      	pop	{r7, pc}
20000892:	46c0      	nop			; (mov r8, r8)
20000894:	40023800 	andmi	r3, r2, r0, lsl #16

20000898 <RCC_AHB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB2PeriphClockCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
{
20000898:	b580      	push	{r7, lr}
2000089a:	b082      	sub	sp, #8
2000089c:	af00      	add	r7, sp, #0
2000089e:	6078      	str	r0, [r7, #4]
200008a0:	000a      	movs	r2, r1
200008a2:	1cfb      	adds	r3, r7, #3
200008a4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
200008a6:	1cfb      	adds	r3, r7, #3
200008a8:	781b      	ldrb	r3, [r3, #0]
200008aa:	2b00      	cmp	r3, #0
200008ac:	d006      	beq.n	200008bc <RCC_AHB2PeriphClockCmd+0x24>
  {
    RCC->AHB2ENR |= RCC_AHB2Periph;
200008ae:	4b09      	ldr	r3, [pc, #36]	; (200008d4 <RCC_AHB2PeriphClockCmd+0x3c>)
200008b0:	6b59      	ldr	r1, [r3, #52]	; 0x34
200008b2:	4b08      	ldr	r3, [pc, #32]	; (200008d4 <RCC_AHB2PeriphClockCmd+0x3c>)
200008b4:	687a      	ldr	r2, [r7, #4]
200008b6:	430a      	orrs	r2, r1
200008b8:	635a      	str	r2, [r3, #52]	; 0x34
  }
  else
  {
    RCC->AHB2ENR &= ~RCC_AHB2Periph;
  }
}
200008ba:	e006      	b.n	200008ca <RCC_AHB2PeriphClockCmd+0x32>
    RCC->AHB2ENR &= ~RCC_AHB2Periph;
200008bc:	4b05      	ldr	r3, [pc, #20]	; (200008d4 <RCC_AHB2PeriphClockCmd+0x3c>)
200008be:	6b5a      	ldr	r2, [r3, #52]	; 0x34
200008c0:	687b      	ldr	r3, [r7, #4]
200008c2:	43d9      	mvns	r1, r3
200008c4:	4b03      	ldr	r3, [pc, #12]	; (200008d4 <RCC_AHB2PeriphClockCmd+0x3c>)
200008c6:	400a      	ands	r2, r1
200008c8:	635a      	str	r2, [r3, #52]	; 0x34
}
200008ca:	46c0      	nop			; (mov r8, r8)
200008cc:	46bd      	mov	sp, r7
200008ce:	b002      	add	sp, #8
200008d0:	bd80      	pop	{r7, pc}
200008d2:	46c0      	nop			; (mov r8, r8)
200008d4:	40023800 	andmi	r3, r2, r0, lsl #16

200008d8 <RCC_AHB3PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB3PeriphClockCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
{
200008d8:	b580      	push	{r7, lr}
200008da:	b082      	sub	sp, #8
200008dc:	af00      	add	r7, sp, #0
200008de:	6078      	str	r0, [r7, #4]
200008e0:	000a      	movs	r2, r1
200008e2:	1cfb      	adds	r3, r7, #3
200008e4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
200008e6:	1cfb      	adds	r3, r7, #3
200008e8:	781b      	ldrb	r3, [r3, #0]
200008ea:	2b00      	cmp	r3, #0
200008ec:	d006      	beq.n	200008fc <RCC_AHB3PeriphClockCmd+0x24>
  {
    RCC->AHB3ENR |= RCC_AHB3Periph;
200008ee:	4b09      	ldr	r3, [pc, #36]	; (20000914 <RCC_AHB3PeriphClockCmd+0x3c>)
200008f0:	6b99      	ldr	r1, [r3, #56]	; 0x38
200008f2:	4b08      	ldr	r3, [pc, #32]	; (20000914 <RCC_AHB3PeriphClockCmd+0x3c>)
200008f4:	687a      	ldr	r2, [r7, #4]
200008f6:	430a      	orrs	r2, r1
200008f8:	639a      	str	r2, [r3, #56]	; 0x38
  }
  else
  {
    RCC->AHB3ENR &= ~RCC_AHB3Periph;
  }
}
200008fa:	e006      	b.n	2000090a <RCC_AHB3PeriphClockCmd+0x32>
    RCC->AHB3ENR &= ~RCC_AHB3Periph;
200008fc:	4b05      	ldr	r3, [pc, #20]	; (20000914 <RCC_AHB3PeriphClockCmd+0x3c>)
200008fe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
20000900:	687b      	ldr	r3, [r7, #4]
20000902:	43d9      	mvns	r1, r3
20000904:	4b03      	ldr	r3, [pc, #12]	; (20000914 <RCC_AHB3PeriphClockCmd+0x3c>)
20000906:	400a      	ands	r2, r1
20000908:	639a      	str	r2, [r3, #56]	; 0x38
}
2000090a:	46c0      	nop			; (mov r8, r8)
2000090c:	46bd      	mov	sp, r7
2000090e:	b002      	add	sp, #8
20000910:	bd80      	pop	{r7, pc}
20000912:	46c0      	nop			; (mov r8, r8)
20000914:	40023800 	andmi	r3, r2, r0, lsl #16

20000918 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
20000918:	b580      	push	{r7, lr}
2000091a:	b082      	sub	sp, #8
2000091c:	af00      	add	r7, sp, #0
2000091e:	6078      	str	r0, [r7, #4]
20000920:	000a      	movs	r2, r1
20000922:	1cfb      	adds	r3, r7, #3
20000924:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
20000926:	1cfb      	adds	r3, r7, #3
20000928:	781b      	ldrb	r3, [r3, #0]
2000092a:	2b00      	cmp	r3, #0
2000092c:	d006      	beq.n	2000093c <RCC_APB1PeriphClockCmd+0x24>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
2000092e:	4b09      	ldr	r3, [pc, #36]	; (20000954 <RCC_APB1PeriphClockCmd+0x3c>)
20000930:	6c19      	ldr	r1, [r3, #64]	; 0x40
20000932:	4b08      	ldr	r3, [pc, #32]	; (20000954 <RCC_APB1PeriphClockCmd+0x3c>)
20000934:	687a      	ldr	r2, [r7, #4]
20000936:	430a      	orrs	r2, r1
20000938:	641a      	str	r2, [r3, #64]	; 0x40
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
2000093a:	e006      	b.n	2000094a <RCC_APB1PeriphClockCmd+0x32>
    RCC->APB1ENR &= ~RCC_APB1Periph;
2000093c:	4b05      	ldr	r3, [pc, #20]	; (20000954 <RCC_APB1PeriphClockCmd+0x3c>)
2000093e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
20000940:	687b      	ldr	r3, [r7, #4]
20000942:	43d9      	mvns	r1, r3
20000944:	4b03      	ldr	r3, [pc, #12]	; (20000954 <RCC_APB1PeriphClockCmd+0x3c>)
20000946:	400a      	ands	r2, r1
20000948:	641a      	str	r2, [r3, #64]	; 0x40
}
2000094a:	46c0      	nop			; (mov r8, r8)
2000094c:	46bd      	mov	sp, r7
2000094e:	b002      	add	sp, #8
20000950:	bd80      	pop	{r7, pc}
20000952:	46c0      	nop			; (mov r8, r8)
20000954:	40023800 	andmi	r3, r2, r0, lsl #16

20000958 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
20000958:	b580      	push	{r7, lr}
2000095a:	b082      	sub	sp, #8
2000095c:	af00      	add	r7, sp, #0
2000095e:	6078      	str	r0, [r7, #4]
20000960:	000a      	movs	r2, r1
20000962:	1cfb      	adds	r3, r7, #3
20000964:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
20000966:	1cfb      	adds	r3, r7, #3
20000968:	781b      	ldrb	r3, [r3, #0]
2000096a:	2b00      	cmp	r3, #0
2000096c:	d006      	beq.n	2000097c <RCC_APB2PeriphClockCmd+0x24>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
2000096e:	4b09      	ldr	r3, [pc, #36]	; (20000994 <RCC_APB2PeriphClockCmd+0x3c>)
20000970:	6c59      	ldr	r1, [r3, #68]	; 0x44
20000972:	4b08      	ldr	r3, [pc, #32]	; (20000994 <RCC_APB2PeriphClockCmd+0x3c>)
20000974:	687a      	ldr	r2, [r7, #4]
20000976:	430a      	orrs	r2, r1
20000978:	645a      	str	r2, [r3, #68]	; 0x44
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
2000097a:	e006      	b.n	2000098a <RCC_APB2PeriphClockCmd+0x32>
    RCC->APB2ENR &= ~RCC_APB2Periph;
2000097c:	4b05      	ldr	r3, [pc, #20]	; (20000994 <RCC_APB2PeriphClockCmd+0x3c>)
2000097e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
20000980:	687b      	ldr	r3, [r7, #4]
20000982:	43d9      	mvns	r1, r3
20000984:	4b03      	ldr	r3, [pc, #12]	; (20000994 <RCC_APB2PeriphClockCmd+0x3c>)
20000986:	400a      	ands	r2, r1
20000988:	645a      	str	r2, [r3, #68]	; 0x44
}
2000098a:	46c0      	nop			; (mov r8, r8)
2000098c:	46bd      	mov	sp, r7
2000098e:	b002      	add	sp, #8
20000990:	bd80      	pop	{r7, pc}
20000992:	46c0      	nop			; (mov r8, r8)
20000994:	40023800 	andmi	r3, r2, r0, lsl #16

20000998 <RCC_AHB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphResetCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
20000998:	b580      	push	{r7, lr}
2000099a:	b082      	sub	sp, #8
2000099c:	af00      	add	r7, sp, #0
2000099e:	6078      	str	r0, [r7, #4]
200009a0:	000a      	movs	r2, r1
200009a2:	1cfb      	adds	r3, r7, #3
200009a4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_RESET_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
200009a6:	1cfb      	adds	r3, r7, #3
200009a8:	781b      	ldrb	r3, [r3, #0]
200009aa:	2b00      	cmp	r3, #0
200009ac:	d006      	beq.n	200009bc <RCC_AHB1PeriphResetCmd+0x24>
  {
    RCC->AHB1RSTR |= RCC_AHB1Periph;
200009ae:	4b09      	ldr	r3, [pc, #36]	; (200009d4 <RCC_AHB1PeriphResetCmd+0x3c>)
200009b0:	6919      	ldr	r1, [r3, #16]
200009b2:	4b08      	ldr	r3, [pc, #32]	; (200009d4 <RCC_AHB1PeriphResetCmd+0x3c>)
200009b4:	687a      	ldr	r2, [r7, #4]
200009b6:	430a      	orrs	r2, r1
200009b8:	611a      	str	r2, [r3, #16]
  }
  else
  {
    RCC->AHB1RSTR &= ~RCC_AHB1Periph;
  }
}
200009ba:	e006      	b.n	200009ca <RCC_AHB1PeriphResetCmd+0x32>
    RCC->AHB1RSTR &= ~RCC_AHB1Periph;
200009bc:	4b05      	ldr	r3, [pc, #20]	; (200009d4 <RCC_AHB1PeriphResetCmd+0x3c>)
200009be:	691a      	ldr	r2, [r3, #16]
200009c0:	687b      	ldr	r3, [r7, #4]
200009c2:	43d9      	mvns	r1, r3
200009c4:	4b03      	ldr	r3, [pc, #12]	; (200009d4 <RCC_AHB1PeriphResetCmd+0x3c>)
200009c6:	400a      	ands	r2, r1
200009c8:	611a      	str	r2, [r3, #16]
}
200009ca:	46c0      	nop			; (mov r8, r8)
200009cc:	46bd      	mov	sp, r7
200009ce:	b002      	add	sp, #8
200009d0:	bd80      	pop	{r7, pc}
200009d2:	46c0      	nop			; (mov r8, r8)
200009d4:	40023800 	andmi	r3, r2, r0, lsl #16

200009d8 <RCC_AHB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB2PeriphResetCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
{
200009d8:	b580      	push	{r7, lr}
200009da:	b082      	sub	sp, #8
200009dc:	af00      	add	r7, sp, #0
200009de:	6078      	str	r0, [r7, #4]
200009e0:	000a      	movs	r2, r1
200009e2:	1cfb      	adds	r3, r7, #3
200009e4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
200009e6:	1cfb      	adds	r3, r7, #3
200009e8:	781b      	ldrb	r3, [r3, #0]
200009ea:	2b00      	cmp	r3, #0
200009ec:	d006      	beq.n	200009fc <RCC_AHB2PeriphResetCmd+0x24>
  {
    RCC->AHB2RSTR |= RCC_AHB2Periph;
200009ee:	4b09      	ldr	r3, [pc, #36]	; (20000a14 <RCC_AHB2PeriphResetCmd+0x3c>)
200009f0:	6959      	ldr	r1, [r3, #20]
200009f2:	4b08      	ldr	r3, [pc, #32]	; (20000a14 <RCC_AHB2PeriphResetCmd+0x3c>)
200009f4:	687a      	ldr	r2, [r7, #4]
200009f6:	430a      	orrs	r2, r1
200009f8:	615a      	str	r2, [r3, #20]
  }
  else
  {
    RCC->AHB2RSTR &= ~RCC_AHB2Periph;
  }
}
200009fa:	e006      	b.n	20000a0a <RCC_AHB2PeriphResetCmd+0x32>
    RCC->AHB2RSTR &= ~RCC_AHB2Periph;
200009fc:	4b05      	ldr	r3, [pc, #20]	; (20000a14 <RCC_AHB2PeriphResetCmd+0x3c>)
200009fe:	695a      	ldr	r2, [r3, #20]
20000a00:	687b      	ldr	r3, [r7, #4]
20000a02:	43d9      	mvns	r1, r3
20000a04:	4b03      	ldr	r3, [pc, #12]	; (20000a14 <RCC_AHB2PeriphResetCmd+0x3c>)
20000a06:	400a      	ands	r2, r1
20000a08:	615a      	str	r2, [r3, #20]
}
20000a0a:	46c0      	nop			; (mov r8, r8)
20000a0c:	46bd      	mov	sp, r7
20000a0e:	b002      	add	sp, #8
20000a10:	bd80      	pop	{r7, pc}
20000a12:	46c0      	nop			; (mov r8, r8)
20000a14:	40023800 	andmi	r3, r2, r0, lsl #16

20000a18 <RCC_AHB3PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB3PeriphResetCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
{
20000a18:	b580      	push	{r7, lr}
20000a1a:	b082      	sub	sp, #8
20000a1c:	af00      	add	r7, sp, #0
20000a1e:	6078      	str	r0, [r7, #4]
20000a20:	000a      	movs	r2, r1
20000a22:	1cfb      	adds	r3, r7, #3
20000a24:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
20000a26:	1cfb      	adds	r3, r7, #3
20000a28:	781b      	ldrb	r3, [r3, #0]
20000a2a:	2b00      	cmp	r3, #0
20000a2c:	d006      	beq.n	20000a3c <RCC_AHB3PeriphResetCmd+0x24>
  {
    RCC->AHB3RSTR |= RCC_AHB3Periph;
20000a2e:	4b09      	ldr	r3, [pc, #36]	; (20000a54 <RCC_AHB3PeriphResetCmd+0x3c>)
20000a30:	6999      	ldr	r1, [r3, #24]
20000a32:	4b08      	ldr	r3, [pc, #32]	; (20000a54 <RCC_AHB3PeriphResetCmd+0x3c>)
20000a34:	687a      	ldr	r2, [r7, #4]
20000a36:	430a      	orrs	r2, r1
20000a38:	619a      	str	r2, [r3, #24]
  }
  else
  {
    RCC->AHB3RSTR &= ~RCC_AHB3Periph;
  }
}
20000a3a:	e006      	b.n	20000a4a <RCC_AHB3PeriphResetCmd+0x32>
    RCC->AHB3RSTR &= ~RCC_AHB3Periph;
20000a3c:	4b05      	ldr	r3, [pc, #20]	; (20000a54 <RCC_AHB3PeriphResetCmd+0x3c>)
20000a3e:	699a      	ldr	r2, [r3, #24]
20000a40:	687b      	ldr	r3, [r7, #4]
20000a42:	43d9      	mvns	r1, r3
20000a44:	4b03      	ldr	r3, [pc, #12]	; (20000a54 <RCC_AHB3PeriphResetCmd+0x3c>)
20000a46:	400a      	ands	r2, r1
20000a48:	619a      	str	r2, [r3, #24]
}
20000a4a:	46c0      	nop			; (mov r8, r8)
20000a4c:	46bd      	mov	sp, r7
20000a4e:	b002      	add	sp, #8
20000a50:	bd80      	pop	{r7, pc}
20000a52:	46c0      	nop			; (mov r8, r8)
20000a54:	40023800 	andmi	r3, r2, r0, lsl #16

20000a58 <RCC_APB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
20000a58:	b580      	push	{r7, lr}
20000a5a:	b082      	sub	sp, #8
20000a5c:	af00      	add	r7, sp, #0
20000a5e:	6078      	str	r0, [r7, #4]
20000a60:	000a      	movs	r2, r1
20000a62:	1cfb      	adds	r3, r7, #3
20000a64:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
20000a66:	1cfb      	adds	r3, r7, #3
20000a68:	781b      	ldrb	r3, [r3, #0]
20000a6a:	2b00      	cmp	r3, #0
20000a6c:	d006      	beq.n	20000a7c <RCC_APB1PeriphResetCmd+0x24>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
20000a6e:	4b09      	ldr	r3, [pc, #36]	; (20000a94 <RCC_APB1PeriphResetCmd+0x3c>)
20000a70:	6a19      	ldr	r1, [r3, #32]
20000a72:	4b08      	ldr	r3, [pc, #32]	; (20000a94 <RCC_APB1PeriphResetCmd+0x3c>)
20000a74:	687a      	ldr	r2, [r7, #4]
20000a76:	430a      	orrs	r2, r1
20000a78:	621a      	str	r2, [r3, #32]
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
  }
}
20000a7a:	e006      	b.n	20000a8a <RCC_APB1PeriphResetCmd+0x32>
    RCC->APB1RSTR &= ~RCC_APB1Periph;
20000a7c:	4b05      	ldr	r3, [pc, #20]	; (20000a94 <RCC_APB1PeriphResetCmd+0x3c>)
20000a7e:	6a1a      	ldr	r2, [r3, #32]
20000a80:	687b      	ldr	r3, [r7, #4]
20000a82:	43d9      	mvns	r1, r3
20000a84:	4b03      	ldr	r3, [pc, #12]	; (20000a94 <RCC_APB1PeriphResetCmd+0x3c>)
20000a86:	400a      	ands	r2, r1
20000a88:	621a      	str	r2, [r3, #32]
}
20000a8a:	46c0      	nop			; (mov r8, r8)
20000a8c:	46bd      	mov	sp, r7
20000a8e:	b002      	add	sp, #8
20000a90:	bd80      	pop	{r7, pc}
20000a92:	46c0      	nop			; (mov r8, r8)
20000a94:	40023800 	andmi	r3, r2, r0, lsl #16

20000a98 <RCC_APB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
20000a98:	b580      	push	{r7, lr}
20000a9a:	b082      	sub	sp, #8
20000a9c:	af00      	add	r7, sp, #0
20000a9e:	6078      	str	r0, [r7, #4]
20000aa0:	000a      	movs	r2, r1
20000aa2:	1cfb      	adds	r3, r7, #3
20000aa4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_RESET_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
20000aa6:	1cfb      	adds	r3, r7, #3
20000aa8:	781b      	ldrb	r3, [r3, #0]
20000aaa:	2b00      	cmp	r3, #0
20000aac:	d006      	beq.n	20000abc <RCC_APB2PeriphResetCmd+0x24>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
20000aae:	4b09      	ldr	r3, [pc, #36]	; (20000ad4 <RCC_APB2PeriphResetCmd+0x3c>)
20000ab0:	6a59      	ldr	r1, [r3, #36]	; 0x24
20000ab2:	4b08      	ldr	r3, [pc, #32]	; (20000ad4 <RCC_APB2PeriphResetCmd+0x3c>)
20000ab4:	687a      	ldr	r2, [r7, #4]
20000ab6:	430a      	orrs	r2, r1
20000ab8:	625a      	str	r2, [r3, #36]	; 0x24
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
  }
}
20000aba:	e006      	b.n	20000aca <RCC_APB2PeriphResetCmd+0x32>
    RCC->APB2RSTR &= ~RCC_APB2Periph;
20000abc:	4b05      	ldr	r3, [pc, #20]	; (20000ad4 <RCC_APB2PeriphResetCmd+0x3c>)
20000abe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
20000ac0:	687b      	ldr	r3, [r7, #4]
20000ac2:	43d9      	mvns	r1, r3
20000ac4:	4b03      	ldr	r3, [pc, #12]	; (20000ad4 <RCC_APB2PeriphResetCmd+0x3c>)
20000ac6:	400a      	ands	r2, r1
20000ac8:	625a      	str	r2, [r3, #36]	; 0x24
}
20000aca:	46c0      	nop			; (mov r8, r8)
20000acc:	46bd      	mov	sp, r7
20000ace:	b002      	add	sp, #8
20000ad0:	bd80      	pop	{r7, pc}
20000ad2:	46c0      	nop			; (mov r8, r8)
20000ad4:	40023800 	andmi	r3, r2, r0, lsl #16

20000ad8 <RCC_AHB1PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockLPModeCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
20000ad8:	b580      	push	{r7, lr}
20000ada:	b082      	sub	sp, #8
20000adc:	af00      	add	r7, sp, #0
20000ade:	6078      	str	r0, [r7, #4]
20000ae0:	000a      	movs	r2, r1
20000ae2:	1cfb      	adds	r3, r7, #3
20000ae4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_LPMODE_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
20000ae6:	1cfb      	adds	r3, r7, #3
20000ae8:	781b      	ldrb	r3, [r3, #0]
20000aea:	2b00      	cmp	r3, #0
20000aec:	d006      	beq.n	20000afc <RCC_AHB1PeriphClockLPModeCmd+0x24>
  {
    RCC->AHB1LPENR |= RCC_AHB1Periph;
20000aee:	4b09      	ldr	r3, [pc, #36]	; (20000b14 <RCC_AHB1PeriphClockLPModeCmd+0x3c>)
20000af0:	6d19      	ldr	r1, [r3, #80]	; 0x50
20000af2:	4b08      	ldr	r3, [pc, #32]	; (20000b14 <RCC_AHB1PeriphClockLPModeCmd+0x3c>)
20000af4:	687a      	ldr	r2, [r7, #4]
20000af6:	430a      	orrs	r2, r1
20000af8:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    RCC->AHB1LPENR &= ~RCC_AHB1Periph;
  }
}
20000afa:	e006      	b.n	20000b0a <RCC_AHB1PeriphClockLPModeCmd+0x32>
    RCC->AHB1LPENR &= ~RCC_AHB1Periph;
20000afc:	4b05      	ldr	r3, [pc, #20]	; (20000b14 <RCC_AHB1PeriphClockLPModeCmd+0x3c>)
20000afe:	6d1a      	ldr	r2, [r3, #80]	; 0x50
20000b00:	687b      	ldr	r3, [r7, #4]
20000b02:	43d9      	mvns	r1, r3
20000b04:	4b03      	ldr	r3, [pc, #12]	; (20000b14 <RCC_AHB1PeriphClockLPModeCmd+0x3c>)
20000b06:	400a      	ands	r2, r1
20000b08:	651a      	str	r2, [r3, #80]	; 0x50
}
20000b0a:	46c0      	nop			; (mov r8, r8)
20000b0c:	46bd      	mov	sp, r7
20000b0e:	b002      	add	sp, #8
20000b10:	bd80      	pop	{r7, pc}
20000b12:	46c0      	nop			; (mov r8, r8)
20000b14:	40023800 	andmi	r3, r2, r0, lsl #16

20000b18 <RCC_AHB2PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB2PeriphClockLPModeCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
{
20000b18:	b580      	push	{r7, lr}
20000b1a:	b082      	sub	sp, #8
20000b1c:	af00      	add	r7, sp, #0
20000b1e:	6078      	str	r0, [r7, #4]
20000b20:	000a      	movs	r2, r1
20000b22:	1cfb      	adds	r3, r7, #3
20000b24:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
20000b26:	1cfb      	adds	r3, r7, #3
20000b28:	781b      	ldrb	r3, [r3, #0]
20000b2a:	2b00      	cmp	r3, #0
20000b2c:	d006      	beq.n	20000b3c <RCC_AHB2PeriphClockLPModeCmd+0x24>
  {
    RCC->AHB2LPENR |= RCC_AHB2Periph;
20000b2e:	4b09      	ldr	r3, [pc, #36]	; (20000b54 <RCC_AHB2PeriphClockLPModeCmd+0x3c>)
20000b30:	6d59      	ldr	r1, [r3, #84]	; 0x54
20000b32:	4b08      	ldr	r3, [pc, #32]	; (20000b54 <RCC_AHB2PeriphClockLPModeCmd+0x3c>)
20000b34:	687a      	ldr	r2, [r7, #4]
20000b36:	430a      	orrs	r2, r1
20000b38:	655a      	str	r2, [r3, #84]	; 0x54
  }
  else
  {
    RCC->AHB2LPENR &= ~RCC_AHB2Periph;
  }
}
20000b3a:	e006      	b.n	20000b4a <RCC_AHB2PeriphClockLPModeCmd+0x32>
    RCC->AHB2LPENR &= ~RCC_AHB2Periph;
20000b3c:	4b05      	ldr	r3, [pc, #20]	; (20000b54 <RCC_AHB2PeriphClockLPModeCmd+0x3c>)
20000b3e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
20000b40:	687b      	ldr	r3, [r7, #4]
20000b42:	43d9      	mvns	r1, r3
20000b44:	4b03      	ldr	r3, [pc, #12]	; (20000b54 <RCC_AHB2PeriphClockLPModeCmd+0x3c>)
20000b46:	400a      	ands	r2, r1
20000b48:	655a      	str	r2, [r3, #84]	; 0x54
}
20000b4a:	46c0      	nop			; (mov r8, r8)
20000b4c:	46bd      	mov	sp, r7
20000b4e:	b002      	add	sp, #8
20000b50:	bd80      	pop	{r7, pc}
20000b52:	46c0      	nop			; (mov r8, r8)
20000b54:	40023800 	andmi	r3, r2, r0, lsl #16

20000b58 <RCC_AHB3PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB3PeriphClockLPModeCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
{
20000b58:	b580      	push	{r7, lr}
20000b5a:	b082      	sub	sp, #8
20000b5c:	af00      	add	r7, sp, #0
20000b5e:	6078      	str	r0, [r7, #4]
20000b60:	000a      	movs	r2, r1
20000b62:	1cfb      	adds	r3, r7, #3
20000b64:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
20000b66:	1cfb      	adds	r3, r7, #3
20000b68:	781b      	ldrb	r3, [r3, #0]
20000b6a:	2b00      	cmp	r3, #0
20000b6c:	d006      	beq.n	20000b7c <RCC_AHB3PeriphClockLPModeCmd+0x24>
  {
    RCC->AHB3LPENR |= RCC_AHB3Periph;
20000b6e:	4b09      	ldr	r3, [pc, #36]	; (20000b94 <RCC_AHB3PeriphClockLPModeCmd+0x3c>)
20000b70:	6d99      	ldr	r1, [r3, #88]	; 0x58
20000b72:	4b08      	ldr	r3, [pc, #32]	; (20000b94 <RCC_AHB3PeriphClockLPModeCmd+0x3c>)
20000b74:	687a      	ldr	r2, [r7, #4]
20000b76:	430a      	orrs	r2, r1
20000b78:	659a      	str	r2, [r3, #88]	; 0x58
  }
  else
  {
    RCC->AHB3LPENR &= ~RCC_AHB3Periph;
  }
}
20000b7a:	e006      	b.n	20000b8a <RCC_AHB3PeriphClockLPModeCmd+0x32>
    RCC->AHB3LPENR &= ~RCC_AHB3Periph;
20000b7c:	4b05      	ldr	r3, [pc, #20]	; (20000b94 <RCC_AHB3PeriphClockLPModeCmd+0x3c>)
20000b7e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
20000b80:	687b      	ldr	r3, [r7, #4]
20000b82:	43d9      	mvns	r1, r3
20000b84:	4b03      	ldr	r3, [pc, #12]	; (20000b94 <RCC_AHB3PeriphClockLPModeCmd+0x3c>)
20000b86:	400a      	ands	r2, r1
20000b88:	659a      	str	r2, [r3, #88]	; 0x58
}
20000b8a:	46c0      	nop			; (mov r8, r8)
20000b8c:	46bd      	mov	sp, r7
20000b8e:	b002      	add	sp, #8
20000b90:	bd80      	pop	{r7, pc}
20000b92:	46c0      	nop			; (mov r8, r8)
20000b94:	40023800 	andmi	r3, r2, r0, lsl #16

20000b98 <RCC_APB1PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockLPModeCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
20000b98:	b580      	push	{r7, lr}
20000b9a:	b082      	sub	sp, #8
20000b9c:	af00      	add	r7, sp, #0
20000b9e:	6078      	str	r0, [r7, #4]
20000ba0:	000a      	movs	r2, r1
20000ba2:	1cfb      	adds	r3, r7, #3
20000ba4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
20000ba6:	1cfb      	adds	r3, r7, #3
20000ba8:	781b      	ldrb	r3, [r3, #0]
20000baa:	2b00      	cmp	r3, #0
20000bac:	d006      	beq.n	20000bbc <RCC_APB1PeriphClockLPModeCmd+0x24>
  {
    RCC->APB1LPENR |= RCC_APB1Periph;
20000bae:	4b09      	ldr	r3, [pc, #36]	; (20000bd4 <RCC_APB1PeriphClockLPModeCmd+0x3c>)
20000bb0:	6e19      	ldr	r1, [r3, #96]	; 0x60
20000bb2:	4b08      	ldr	r3, [pc, #32]	; (20000bd4 <RCC_APB1PeriphClockLPModeCmd+0x3c>)
20000bb4:	687a      	ldr	r2, [r7, #4]
20000bb6:	430a      	orrs	r2, r1
20000bb8:	661a      	str	r2, [r3, #96]	; 0x60
  }
  else
  {
    RCC->APB1LPENR &= ~RCC_APB1Periph;
  }
}
20000bba:	e006      	b.n	20000bca <RCC_APB1PeriphClockLPModeCmd+0x32>
    RCC->APB1LPENR &= ~RCC_APB1Periph;
20000bbc:	4b05      	ldr	r3, [pc, #20]	; (20000bd4 <RCC_APB1PeriphClockLPModeCmd+0x3c>)
20000bbe:	6e1a      	ldr	r2, [r3, #96]	; 0x60
20000bc0:	687b      	ldr	r3, [r7, #4]
20000bc2:	43d9      	mvns	r1, r3
20000bc4:	4b03      	ldr	r3, [pc, #12]	; (20000bd4 <RCC_APB1PeriphClockLPModeCmd+0x3c>)
20000bc6:	400a      	ands	r2, r1
20000bc8:	661a      	str	r2, [r3, #96]	; 0x60
}
20000bca:	46c0      	nop			; (mov r8, r8)
20000bcc:	46bd      	mov	sp, r7
20000bce:	b002      	add	sp, #8
20000bd0:	bd80      	pop	{r7, pc}
20000bd2:	46c0      	nop			; (mov r8, r8)
20000bd4:	40023800 	andmi	r3, r2, r0, lsl #16

20000bd8 <RCC_APB2PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockLPModeCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
20000bd8:	b580      	push	{r7, lr}
20000bda:	b082      	sub	sp, #8
20000bdc:	af00      	add	r7, sp, #0
20000bde:	6078      	str	r0, [r7, #4]
20000be0:	000a      	movs	r2, r1
20000be2:	1cfb      	adds	r3, r7, #3
20000be4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
20000be6:	1cfb      	adds	r3, r7, #3
20000be8:	781b      	ldrb	r3, [r3, #0]
20000bea:	2b00      	cmp	r3, #0
20000bec:	d006      	beq.n	20000bfc <RCC_APB2PeriphClockLPModeCmd+0x24>
  {
    RCC->APB2LPENR |= RCC_APB2Periph;
20000bee:	4b09      	ldr	r3, [pc, #36]	; (20000c14 <RCC_APB2PeriphClockLPModeCmd+0x3c>)
20000bf0:	6e59      	ldr	r1, [r3, #100]	; 0x64
20000bf2:	4b08      	ldr	r3, [pc, #32]	; (20000c14 <RCC_APB2PeriphClockLPModeCmd+0x3c>)
20000bf4:	687a      	ldr	r2, [r7, #4]
20000bf6:	430a      	orrs	r2, r1
20000bf8:	665a      	str	r2, [r3, #100]	; 0x64
  }
  else
  {
    RCC->APB2LPENR &= ~RCC_APB2Periph;
  }
}
20000bfa:	e006      	b.n	20000c0a <RCC_APB2PeriphClockLPModeCmd+0x32>
    RCC->APB2LPENR &= ~RCC_APB2Periph;
20000bfc:	4b05      	ldr	r3, [pc, #20]	; (20000c14 <RCC_APB2PeriphClockLPModeCmd+0x3c>)
20000bfe:	6e5a      	ldr	r2, [r3, #100]	; 0x64
20000c00:	687b      	ldr	r3, [r7, #4]
20000c02:	43d9      	mvns	r1, r3
20000c04:	4b03      	ldr	r3, [pc, #12]	; (20000c14 <RCC_APB2PeriphClockLPModeCmd+0x3c>)
20000c06:	400a      	ands	r2, r1
20000c08:	665a      	str	r2, [r3, #100]	; 0x64
}
20000c0a:	46c0      	nop			; (mov r8, r8)
20000c0c:	46bd      	mov	sp, r7
20000c0e:	b002      	add	sp, #8
20000c10:	bd80      	pop	{r7, pc}
20000c12:	46c0      	nop			; (mov r8, r8)
20000c14:	40023800 	andmi	r3, r2, r0, lsl #16

20000c18 <RCC_LSEModeConfig>:
  *            @arg RCC_LSE_LOWPOWER_MODE:  LSE oscillator in low power mode.
  *            @arg RCC_LSE_HIGHDRIVE_MODE: LSE oscillator in High Drive mode.
  * @retval None
  */
void RCC_LSEModeConfig(uint8_t RCC_Mode)
{
20000c18:	b580      	push	{r7, lr}
20000c1a:	b082      	sub	sp, #8
20000c1c:	af00      	add	r7, sp, #0
20000c1e:	0002      	movs	r2, r0
20000c20:	1dfb      	adds	r3, r7, #7
20000c22:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_LSE_MODE(RCC_Mode));
  
  if(RCC_Mode == RCC_LSE_HIGHDRIVE_MODE)
20000c24:	1dfb      	adds	r3, r7, #7
20000c26:	781b      	ldrb	r3, [r3, #0]
20000c28:	2b01      	cmp	r3, #1
20000c2a:	d106      	bne.n	20000c3a <RCC_LSEModeConfig+0x22>
  {
    SET_BIT(RCC->BDCR, RCC_BDCR_LSEMOD);
20000c2c:	4b08      	ldr	r3, [pc, #32]	; (20000c50 <RCC_LSEModeConfig+0x38>)
20000c2e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
20000c30:	4b07      	ldr	r3, [pc, #28]	; (20000c50 <RCC_LSEModeConfig+0x38>)
20000c32:	2108      	movs	r1, #8
20000c34:	430a      	orrs	r2, r1
20000c36:	671a      	str	r2, [r3, #112]	; 0x70
  }
  else
  {
    CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEMOD);
  }
}
20000c38:	e005      	b.n	20000c46 <RCC_LSEModeConfig+0x2e>
    CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEMOD);
20000c3a:	4b05      	ldr	r3, [pc, #20]	; (20000c50 <RCC_LSEModeConfig+0x38>)
20000c3c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
20000c3e:	4b04      	ldr	r3, [pc, #16]	; (20000c50 <RCC_LSEModeConfig+0x38>)
20000c40:	2108      	movs	r1, #8
20000c42:	438a      	bics	r2, r1
20000c44:	671a      	str	r2, [r3, #112]	; 0x70
}
20000c46:	46c0      	nop			; (mov r8, r8)
20000c48:	46bd      	mov	sp, r7
20000c4a:	b002      	add	sp, #8
20000c4c:	bd80      	pop	{r7, pc}
20000c4e:	46c0      	nop			; (mov r8, r8)
20000c50:	40023800 	andmi	r3, r2, r0, lsl #16

20000c54 <RCC_ITConfig>:
  * @param  NewState: new state of the specified RCC interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_ITConfig(uint8_t RCC_IT, FunctionalState NewState)
{
20000c54:	b580      	push	{r7, lr}
20000c56:	b082      	sub	sp, #8
20000c58:	af00      	add	r7, sp, #0
20000c5a:	0002      	movs	r2, r0
20000c5c:	1dfb      	adds	r3, r7, #7
20000c5e:	701a      	strb	r2, [r3, #0]
20000c60:	1dbb      	adds	r3, r7, #6
20000c62:	1c0a      	adds	r2, r1, #0
20000c64:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_IT(RCC_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
20000c66:	1dbb      	adds	r3, r7, #6
20000c68:	781b      	ldrb	r3, [r3, #0]
20000c6a:	2b00      	cmp	r3, #0
20000c6c:	d009      	beq.n	20000c82 <RCC_ITConfig+0x2e>
  {
    /* Perform Byte access to RCC_CIR[14:8] bits to enable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS |= RCC_IT;
20000c6e:	4b0c      	ldr	r3, [pc, #48]	; (20000ca0 <RCC_ITConfig+0x4c>)
20000c70:	781b      	ldrb	r3, [r3, #0]
20000c72:	b2da      	uxtb	r2, r3
20000c74:	490a      	ldr	r1, [pc, #40]	; (20000ca0 <RCC_ITConfig+0x4c>)
20000c76:	1dfb      	adds	r3, r7, #7
20000c78:	781b      	ldrb	r3, [r3, #0]
20000c7a:	4313      	orrs	r3, r2
20000c7c:	b2db      	uxtb	r3, r3
20000c7e:	700b      	strb	r3, [r1, #0]
  else
  {
    /* Perform Byte access to RCC_CIR[14:8] bits to disable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS &= (uint8_t)~RCC_IT;
  }
}
20000c80:	e00a      	b.n	20000c98 <RCC_ITConfig+0x44>
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS &= (uint8_t)~RCC_IT;
20000c82:	4b07      	ldr	r3, [pc, #28]	; (20000ca0 <RCC_ITConfig+0x4c>)
20000c84:	781b      	ldrb	r3, [r3, #0]
20000c86:	b2db      	uxtb	r3, r3
20000c88:	1dfa      	adds	r2, r7, #7
20000c8a:	7812      	ldrb	r2, [r2, #0]
20000c8c:	43d2      	mvns	r2, r2
20000c8e:	b2d2      	uxtb	r2, r2
20000c90:	4903      	ldr	r1, [pc, #12]	; (20000ca0 <RCC_ITConfig+0x4c>)
20000c92:	4013      	ands	r3, r2
20000c94:	b2db      	uxtb	r3, r3
20000c96:	700b      	strb	r3, [r1, #0]
}
20000c98:	46c0      	nop			; (mov r8, r8)
20000c9a:	46bd      	mov	sp, r7
20000c9c:	b002      	add	sp, #8
20000c9e:	bd80      	pop	{r7, pc}
20000ca0:	4002380d 	andmi	r3, r2, sp, lsl #16

20000ca4 <RCC_GetFlagStatus>:
  *            @arg RCC_FLAG_WWDGRST: Window Watchdog reset
  *            @arg RCC_FLAG_LPWRRST: Low Power reset
  * @retval The new state of RCC_FLAG (SET or RESET).
  */
FlagStatus RCC_GetFlagStatus(uint8_t RCC_FLAG)
{
20000ca4:	b580      	push	{r7, lr}
20000ca6:	b086      	sub	sp, #24
20000ca8:	af00      	add	r7, sp, #0
20000caa:	0002      	movs	r2, r0
20000cac:	1dfb      	adds	r3, r7, #7
20000cae:	701a      	strb	r2, [r3, #0]
  uint32_t tmp = 0;
20000cb0:	2300      	movs	r3, #0
20000cb2:	60fb      	str	r3, [r7, #12]
  uint32_t statusreg = 0;
20000cb4:	2300      	movs	r3, #0
20000cb6:	617b      	str	r3, [r7, #20]
  FlagStatus bitstatus = RESET;
20000cb8:	2313      	movs	r3, #19
20000cba:	18fb      	adds	r3, r7, r3
20000cbc:	2200      	movs	r2, #0
20000cbe:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_FLAG(RCC_FLAG));

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
20000cc0:	1dfb      	adds	r3, r7, #7
20000cc2:	781b      	ldrb	r3, [r3, #0]
20000cc4:	095b      	lsrs	r3, r3, #5
20000cc6:	b2db      	uxtb	r3, r3
20000cc8:	60fb      	str	r3, [r7, #12]
  if (tmp == 1)               /* The flag to check is in CR register */
20000cca:	68fb      	ldr	r3, [r7, #12]
20000ccc:	2b01      	cmp	r3, #1
20000cce:	d103      	bne.n	20000cd8 <RCC_GetFlagStatus+0x34>
  {
    statusreg = RCC->CR;
20000cd0:	4b14      	ldr	r3, [pc, #80]	; (20000d24 <RCC_GetFlagStatus+0x80>)
20000cd2:	681b      	ldr	r3, [r3, #0]
20000cd4:	617b      	str	r3, [r7, #20]
20000cd6:	e009      	b.n	20000cec <RCC_GetFlagStatus+0x48>
  }
  else if (tmp == 2)          /* The flag to check is in BDCR register */
20000cd8:	68fb      	ldr	r3, [r7, #12]
20000cda:	2b02      	cmp	r3, #2
20000cdc:	d103      	bne.n	20000ce6 <RCC_GetFlagStatus+0x42>
  {
    statusreg = RCC->BDCR;
20000cde:	4b11      	ldr	r3, [pc, #68]	; (20000d24 <RCC_GetFlagStatus+0x80>)
20000ce0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
20000ce2:	617b      	str	r3, [r7, #20]
20000ce4:	e002      	b.n	20000cec <RCC_GetFlagStatus+0x48>
  }
  else                       /* The flag to check is in CSR register */
  {
    statusreg = RCC->CSR;
20000ce6:	4b0f      	ldr	r3, [pc, #60]	; (20000d24 <RCC_GetFlagStatus+0x80>)
20000ce8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
20000cea:	617b      	str	r3, [r7, #20]
  }

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_MASK;
20000cec:	1dfb      	adds	r3, r7, #7
20000cee:	781b      	ldrb	r3, [r3, #0]
20000cf0:	221f      	movs	r2, #31
20000cf2:	4013      	ands	r3, r2
20000cf4:	60fb      	str	r3, [r7, #12]
  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
20000cf6:	697a      	ldr	r2, [r7, #20]
20000cf8:	68fb      	ldr	r3, [r7, #12]
20000cfa:	40da      	lsrs	r2, r3
20000cfc:	0013      	movs	r3, r2
20000cfe:	2201      	movs	r2, #1
20000d00:	4013      	ands	r3, r2
20000d02:	d004      	beq.n	20000d0e <RCC_GetFlagStatus+0x6a>
  {
    bitstatus = SET;
20000d04:	2313      	movs	r3, #19
20000d06:	18fb      	adds	r3, r7, r3
20000d08:	2201      	movs	r2, #1
20000d0a:	701a      	strb	r2, [r3, #0]
20000d0c:	e003      	b.n	20000d16 <RCC_GetFlagStatus+0x72>
  }
  else
  {
    bitstatus = RESET;
20000d0e:	2313      	movs	r3, #19
20000d10:	18fb      	adds	r3, r7, r3
20000d12:	2200      	movs	r2, #0
20000d14:	701a      	strb	r2, [r3, #0]
  }
  /* Return the flag status */
  return bitstatus;
20000d16:	2313      	movs	r3, #19
20000d18:	18fb      	adds	r3, r7, r3
20000d1a:	781b      	ldrb	r3, [r3, #0]
}
20000d1c:	0018      	movs	r0, r3
20000d1e:	46bd      	mov	sp, r7
20000d20:	b006      	add	sp, #24
20000d22:	bd80      	pop	{r7, pc}
20000d24:	40023800 	andmi	r3, r2, r0, lsl #16

20000d28 <RCC_ClearFlag>:
  *         RCC_FLAG_IWDGRST, RCC_FLAG_WWDGRST, RCC_FLAG_LPWRRST
  * @param  None
  * @retval None
  */
void RCC_ClearFlag(void)
{
20000d28:	b580      	push	{r7, lr}
20000d2a:	af00      	add	r7, sp, #0
  /* Set RMVF bit to clear the reset flags */
  RCC->CSR |= RCC_CSR_RMVF;
20000d2c:	4b04      	ldr	r3, [pc, #16]	; (20000d40 <RCC_ClearFlag+0x18>)
20000d2e:	6f5a      	ldr	r2, [r3, #116]	; 0x74
20000d30:	4b03      	ldr	r3, [pc, #12]	; (20000d40 <RCC_ClearFlag+0x18>)
20000d32:	2180      	movs	r1, #128	; 0x80
20000d34:	0449      	lsls	r1, r1, #17
20000d36:	430a      	orrs	r2, r1
20000d38:	675a      	str	r2, [r3, #116]	; 0x74
}
20000d3a:	46c0      	nop			; (mov r8, r8)
20000d3c:	46bd      	mov	sp, r7
20000d3e:	bd80      	pop	{r7, pc}
20000d40:	40023800 	andmi	r3, r2, r0, lsl #16

20000d44 <RCC_GetITStatus>:
  *            @arg RCC_IT_PLLSAIRDY: PLLSAI clock ready interrupt (only for STM32F42xxx/43xxx/446xx/469xx/479xx devices)
  *            @arg RCC_IT_CSS: Clock Security System interrupt
  * @retval The new state of RCC_IT (SET or RESET).
  */
ITStatus RCC_GetITStatus(uint8_t RCC_IT)
{
20000d44:	b580      	push	{r7, lr}
20000d46:	b084      	sub	sp, #16
20000d48:	af00      	add	r7, sp, #0
20000d4a:	0002      	movs	r2, r0
20000d4c:	1dfb      	adds	r3, r7, #7
20000d4e:	701a      	strb	r2, [r3, #0]
  ITStatus bitstatus = RESET;
20000d50:	230f      	movs	r3, #15
20000d52:	18fb      	adds	r3, r7, r3
20000d54:	2200      	movs	r2, #0
20000d56:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_GET_IT(RCC_IT));

  /* Check the status of the specified RCC interrupt */
  if ((RCC->CIR & RCC_IT) != (uint32_t)RESET)
20000d58:	4b0a      	ldr	r3, [pc, #40]	; (20000d84 <RCC_GetITStatus+0x40>)
20000d5a:	68db      	ldr	r3, [r3, #12]
20000d5c:	1dfa      	adds	r2, r7, #7
20000d5e:	7812      	ldrb	r2, [r2, #0]
20000d60:	4013      	ands	r3, r2
20000d62:	d004      	beq.n	20000d6e <RCC_GetITStatus+0x2a>
  {
    bitstatus = SET;
20000d64:	230f      	movs	r3, #15
20000d66:	18fb      	adds	r3, r7, r3
20000d68:	2201      	movs	r2, #1
20000d6a:	701a      	strb	r2, [r3, #0]
20000d6c:	e003      	b.n	20000d76 <RCC_GetITStatus+0x32>
  }
  else
  {
    bitstatus = RESET;
20000d6e:	230f      	movs	r3, #15
20000d70:	18fb      	adds	r3, r7, r3
20000d72:	2200      	movs	r2, #0
20000d74:	701a      	strb	r2, [r3, #0]
  }
  /* Return the RCC_IT status */
  return  bitstatus;
20000d76:	230f      	movs	r3, #15
20000d78:	18fb      	adds	r3, r7, r3
20000d7a:	781b      	ldrb	r3, [r3, #0]
}
20000d7c:	0018      	movs	r0, r3
20000d7e:	46bd      	mov	sp, r7
20000d80:	b004      	add	sp, #16
20000d82:	bd80      	pop	{r7, pc}
20000d84:	40023800 	andmi	r3, r2, r0, lsl #16

20000d88 <RCC_ClearITPendingBit>:
  *            @arg RCC_IT_PLLSAIRDY: PLLSAI ready interrupt (only for STM32F42xxx/43xxx/446xx/469xx/479xx devices) 
  *            @arg RCC_IT_CSS: Clock Security System interrupt
  * @retval None
  */
void RCC_ClearITPendingBit(uint8_t RCC_IT)
{
20000d88:	b580      	push	{r7, lr}
20000d8a:	b082      	sub	sp, #8
20000d8c:	af00      	add	r7, sp, #0
20000d8e:	0002      	movs	r2, r0
20000d90:	1dfb      	adds	r3, r7, #7
20000d92:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_CLEAR_IT(RCC_IT));

  /* Perform Byte access to RCC_CIR[23:16] bits to clear the selected interrupt
     pending bits */
  *(__IO uint8_t *) CIR_BYTE3_ADDRESS = RCC_IT;
20000d94:	4a03      	ldr	r2, [pc, #12]	; (20000da4 <RCC_ClearITPendingBit+0x1c>)
20000d96:	1dfb      	adds	r3, r7, #7
20000d98:	781b      	ldrb	r3, [r3, #0]
20000d9a:	7013      	strb	r3, [r2, #0]
}
20000d9c:	46c0      	nop			; (mov r8, r8)
20000d9e:	46bd      	mov	sp, r7
20000da0:	b002      	add	sp, #8
20000da2:	bd80      	pop	{r7, pc}
20000da4:	4002380e 	andmi	r3, r2, lr, lsl #16

20000da8 <init_GPIO_Ports>:
//======================================GPIO=========================================================
void init_GPIO_Ports()
{
20000da8:	b580      	push	{r7, lr}
20000daa:	b082      	sub	sp, #8
20000dac:	af00      	add	r7, sp, #0
	/*  Function used to set the GPIO configuration to the default reset state ****/
	GPIO_InitTypeDef init;
	//GPIO E UTPORTAR
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOE, ENABLE);
20000dae:	2101      	movs	r1, #1
20000db0:	2010      	movs	r0, #16
20000db2:	f7ff fd51 	bl	20000858 <RCC_AHB1PeriphClockCmd>
	GPIO_StructInit(&init);
20000db6:	003b      	movs	r3, r7
20000db8:	0018      	movs	r0, r3
20000dba:	f001 f8e7 	bl	20001f8c <GPIO_StructInit>
	init.GPIO_Pin = GPIO_Pin_1 | GPIO_Pin_3 | GPIO_Pin_5 | GPIO_Pin_7 | GPIO_Pin_9 | GPIO_Pin_11 | GPIO_Pin_13 | GPIO_Pin_15;
20000dbe:	003b      	movs	r3, r7
20000dc0:	4a64      	ldr	r2, [pc, #400]	; (20000f54 <init_GPIO_Ports+0x1ac>)
20000dc2:	601a      	str	r2, [r3, #0]
	init.GPIO_Mode = GPIO_Mode_OUT;
20000dc4:	003b      	movs	r3, r7
20000dc6:	2201      	movs	r2, #1
20000dc8:	711a      	strb	r2, [r3, #4]
	init.GPIO_OType = GPIO_OType_PP;
20000dca:	003b      	movs	r3, r7
20000dcc:	2200      	movs	r2, #0
20000dce:	719a      	strb	r2, [r3, #6]
	init.GPIO_PuPd = GPIO_PuPd_NOPULL;
20000dd0:	003b      	movs	r3, r7
20000dd2:	2200      	movs	r2, #0
20000dd4:	71da      	strb	r2, [r3, #7]
	GPIO_Init(GPIOE, &init);
20000dd6:	003b      	movs	r3, r7
20000dd8:	4a5f      	ldr	r2, [pc, #380]	; (20000f58 <init_GPIO_Ports+0x1b0>)
20000dda:	0019      	movs	r1, r3
20000ddc:	0010      	movs	r0, r2
20000dde:	f001 f849 	bl	20001e74 <GPIO_Init>
	
	//konfigurerar inport GPIO E
	GPIO_StructInit(&init);
20000de2:	003b      	movs	r3, r7
20000de4:	0018      	movs	r0, r3
20000de6:	f001 f8d1 	bl	20001f8c <GPIO_StructInit>
	init.GPIO_Pin = GPIO_Pin_0 | GPIO_Pin_2 | GPIO_Pin_4 | GPIO_Pin_6 | GPIO_Pin_8 | GPIO_Pin_10 | GPIO_Pin_12 |GPIO_Pin_14;
20000dea:	003b      	movs	r3, r7
20000dec:	4a5b      	ldr	r2, [pc, #364]	; (20000f5c <init_GPIO_Ports+0x1b4>)
20000dee:	601a      	str	r2, [r3, #0]
	init.GPIO_Mode = GPIO_Mode_IN;
20000df0:	003b      	movs	r3, r7
20000df2:	2200      	movs	r2, #0
20000df4:	711a      	strb	r2, [r3, #4]
	init.GPIO_PuPd = GPIO_PuPd_UP;
20000df6:	003b      	movs	r3, r7
20000df8:	2201      	movs	r2, #1
20000dfa:	71da      	strb	r2, [r3, #7]
	GPIO_Init(GPIOE, &init);
20000dfc:	003b      	movs	r3, r7
20000dfe:	4a56      	ldr	r2, [pc, #344]	; (20000f58 <init_GPIO_Ports+0x1b0>)
20000e00:	0019      	movs	r1, r3
20000e02:	0010      	movs	r0, r2
20000e04:	f001 f836 	bl	20001e74 <GPIO_Init>

    //GPIOA UTPORTAR
    RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
20000e08:	2101      	movs	r1, #1
20000e0a:	2001      	movs	r0, #1
20000e0c:	f7ff fd24 	bl	20000858 <RCC_AHB1PeriphClockCmd>
	GPIO_StructInit(&init);
20000e10:	003b      	movs	r3, r7
20000e12:	0018      	movs	r0, r3
20000e14:	f001 f8ba 	bl	20001f8c <GPIO_StructInit>
	init.GPIO_Pin = GPIO_Pin_1 | GPIO_Pin_3 | GPIO_Pin_5 | GPIO_Pin_7 | GPIO_Pin_9 | GPIO_Pin_11 | GPIO_Pin_13 | GPIO_Pin_15;
20000e18:	003b      	movs	r3, r7
20000e1a:	4a4e      	ldr	r2, [pc, #312]	; (20000f54 <init_GPIO_Ports+0x1ac>)
20000e1c:	601a      	str	r2, [r3, #0]
	init.GPIO_Mode = GPIO_Mode_OUT;
20000e1e:	003b      	movs	r3, r7
20000e20:	2201      	movs	r2, #1
20000e22:	711a      	strb	r2, [r3, #4]
	init.GPIO_OType = GPIO_OType_PP;
20000e24:	003b      	movs	r3, r7
20000e26:	2200      	movs	r2, #0
20000e28:	719a      	strb	r2, [r3, #6]
	init.GPIO_PuPd = GPIO_PuPd_NOPULL;
20000e2a:	003b      	movs	r3, r7
20000e2c:	2200      	movs	r2, #0
20000e2e:	71da      	strb	r2, [r3, #7]
	GPIO_Init(GPIOA, &init);
20000e30:	003b      	movs	r3, r7
20000e32:	4a4b      	ldr	r2, [pc, #300]	; (20000f60 <init_GPIO_Ports+0x1b8>)
20000e34:	0019      	movs	r1, r3
20000e36:	0010      	movs	r0, r2
20000e38:	f001 f81c 	bl	20001e74 <GPIO_Init>
	
	//konfigurerar inport GPIO a
	GPIO_StructInit(&init);
20000e3c:	003b      	movs	r3, r7
20000e3e:	0018      	movs	r0, r3
20000e40:	f001 f8a4 	bl	20001f8c <GPIO_StructInit>
	init.GPIO_Pin = GPIO_Pin_0 | GPIO_Pin_2 | GPIO_Pin_4 | GPIO_Pin_6 | GPIO_Pin_8 | GPIO_Pin_10 | GPIO_Pin_12 |GPIO_Pin_14;
20000e44:	003b      	movs	r3, r7
20000e46:	4a45      	ldr	r2, [pc, #276]	; (20000f5c <init_GPIO_Ports+0x1b4>)
20000e48:	601a      	str	r2, [r3, #0]
	init.GPIO_Mode = GPIO_Mode_IN;
20000e4a:	003b      	movs	r3, r7
20000e4c:	2200      	movs	r2, #0
20000e4e:	711a      	strb	r2, [r3, #4]
	init.GPIO_PuPd = GPIO_PuPd_UP;
20000e50:	003b      	movs	r3, r7
20000e52:	2201      	movs	r2, #1
20000e54:	71da      	strb	r2, [r3, #7]
	GPIO_Init(GPIOA, &init);
20000e56:	003b      	movs	r3, r7
20000e58:	4a41      	ldr	r2, [pc, #260]	; (20000f60 <init_GPIO_Ports+0x1b8>)
20000e5a:	0019      	movs	r1, r3
20000e5c:	0010      	movs	r0, r2
20000e5e:	f001 f809 	bl	20001e74 <GPIO_Init>

	//GPIO C UTPORTAR
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC, ENABLE);
20000e62:	2101      	movs	r1, #1
20000e64:	2004      	movs	r0, #4
20000e66:	f7ff fcf7 	bl	20000858 <RCC_AHB1PeriphClockCmd>
	GPIO_StructInit(&init);
20000e6a:	003b      	movs	r3, r7
20000e6c:	0018      	movs	r0, r3
20000e6e:	f001 f88d 	bl	20001f8c <GPIO_StructInit>
	init.GPIO_Pin = GPIO_Pin_1 | GPIO_Pin_3 | GPIO_Pin_5 | GPIO_Pin_7 | GPIO_Pin_9 | GPIO_Pin_11 | GPIO_Pin_13 | GPIO_Pin_15;
20000e72:	003b      	movs	r3, r7
20000e74:	4a37      	ldr	r2, [pc, #220]	; (20000f54 <init_GPIO_Ports+0x1ac>)
20000e76:	601a      	str	r2, [r3, #0]
	init.GPIO_Mode = GPIO_Mode_OUT;
20000e78:	003b      	movs	r3, r7
20000e7a:	2201      	movs	r2, #1
20000e7c:	711a      	strb	r2, [r3, #4]
	init.GPIO_OType = GPIO_OType_PP;
20000e7e:	003b      	movs	r3, r7
20000e80:	2200      	movs	r2, #0
20000e82:	719a      	strb	r2, [r3, #6]
	init.GPIO_PuPd = GPIO_PuPd_NOPULL;
20000e84:	003b      	movs	r3, r7
20000e86:	2200      	movs	r2, #0
20000e88:	71da      	strb	r2, [r3, #7]
	GPIO_Init(GPIOC, &init);
20000e8a:	003b      	movs	r3, r7
20000e8c:	4a35      	ldr	r2, [pc, #212]	; (20000f64 <init_GPIO_Ports+0x1bc>)
20000e8e:	0019      	movs	r1, r3
20000e90:	0010      	movs	r0, r2
20000e92:	f000 ffef 	bl	20001e74 <GPIO_Init>
	
	//konfigurerar inport GPIO C
	GPIO_StructInit(&init);
20000e96:	003b      	movs	r3, r7
20000e98:	0018      	movs	r0, r3
20000e9a:	f001 f877 	bl	20001f8c <GPIO_StructInit>
	init.GPIO_Pin = GPIO_Pin_0 | GPIO_Pin_2 | GPIO_Pin_4 | GPIO_Pin_6 | GPIO_Pin_8 | GPIO_Pin_10 | GPIO_Pin_12 |GPIO_Pin_14;
20000e9e:	003b      	movs	r3, r7
20000ea0:	4a2e      	ldr	r2, [pc, #184]	; (20000f5c <init_GPIO_Ports+0x1b4>)
20000ea2:	601a      	str	r2, [r3, #0]
	init.GPIO_Mode = GPIO_Mode_IN;
20000ea4:	003b      	movs	r3, r7
20000ea6:	2200      	movs	r2, #0
20000ea8:	711a      	strb	r2, [r3, #4]
	init.GPIO_PuPd = GPIO_PuPd_UP;
20000eaa:	003b      	movs	r3, r7
20000eac:	2201      	movs	r2, #1
20000eae:	71da      	strb	r2, [r3, #7]
	GPIO_Init(GPIOC, &init);
20000eb0:	003b      	movs	r3, r7
20000eb2:	4a2c      	ldr	r2, [pc, #176]	; (20000f64 <init_GPIO_Ports+0x1bc>)
20000eb4:	0019      	movs	r1, r3
20000eb6:	0010      	movs	r0, r2
20000eb8:	f000 ffdc 	bl	20001e74 <GPIO_Init>

	//GPIO D UTPORTAR
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOD, ENABLE);
20000ebc:	2101      	movs	r1, #1
20000ebe:	2008      	movs	r0, #8
20000ec0:	f7ff fcca 	bl	20000858 <RCC_AHB1PeriphClockCmd>
	GPIO_StructInit(&init);
20000ec4:	003b      	movs	r3, r7
20000ec6:	0018      	movs	r0, r3
20000ec8:	f001 f860 	bl	20001f8c <GPIO_StructInit>
	init.GPIO_Pin = GPIO_Pin_1 | GPIO_Pin_3 | GPIO_Pin_5 | GPIO_Pin_7 | GPIO_Pin_9 | GPIO_Pin_11 | GPIO_Pin_13 | GPIO_Pin_15;
20000ecc:	003b      	movs	r3, r7
20000ece:	4a21      	ldr	r2, [pc, #132]	; (20000f54 <init_GPIO_Ports+0x1ac>)
20000ed0:	601a      	str	r2, [r3, #0]
	init.GPIO_Mode = GPIO_Mode_OUT;
20000ed2:	003b      	movs	r3, r7
20000ed4:	2201      	movs	r2, #1
20000ed6:	711a      	strb	r2, [r3, #4]
	init.GPIO_OType = GPIO_OType_PP;
20000ed8:	003b      	movs	r3, r7
20000eda:	2200      	movs	r2, #0
20000edc:	719a      	strb	r2, [r3, #6]
	init.GPIO_PuPd = GPIO_PuPd_NOPULL;
20000ede:	003b      	movs	r3, r7
20000ee0:	2200      	movs	r2, #0
20000ee2:	71da      	strb	r2, [r3, #7]
	GPIO_Init(GPIOD, &init);
20000ee4:	003b      	movs	r3, r7
20000ee6:	4a20      	ldr	r2, [pc, #128]	; (20000f68 <init_GPIO_Ports+0x1c0>)
20000ee8:	0019      	movs	r1, r3
20000eea:	0010      	movs	r0, r2
20000eec:	f000 ffc2 	bl	20001e74 <GPIO_Init>
	
	//konfigurerar inport GPIO D
	GPIO_StructInit(&init);
20000ef0:	003b      	movs	r3, r7
20000ef2:	0018      	movs	r0, r3
20000ef4:	f001 f84a 	bl	20001f8c <GPIO_StructInit>
	init.GPIO_Pin = GPIO_Pin_0 | GPIO_Pin_2 | GPIO_Pin_4 | GPIO_Pin_6 | GPIO_Pin_8 | GPIO_Pin_10 | GPIO_Pin_12 |GPIO_Pin_14;
20000ef8:	003b      	movs	r3, r7
20000efa:	4a18      	ldr	r2, [pc, #96]	; (20000f5c <init_GPIO_Ports+0x1b4>)
20000efc:	601a      	str	r2, [r3, #0]
	init.GPIO_Mode = GPIO_Mode_IN;
20000efe:	003b      	movs	r3, r7
20000f00:	2200      	movs	r2, #0
20000f02:	711a      	strb	r2, [r3, #4]
	init.GPIO_PuPd = GPIO_PuPd_UP;
20000f04:	003b      	movs	r3, r7
20000f06:	2201      	movs	r2, #1
20000f08:	71da      	strb	r2, [r3, #7]
	GPIO_Init(GPIOD, &init);
20000f0a:	003b      	movs	r3, r7
20000f0c:	4a16      	ldr	r2, [pc, #88]	; (20000f68 <init_GPIO_Ports+0x1c0>)
20000f0e:	0019      	movs	r1, r3
20000f10:	0010      	movs	r0, r2
20000f12:	f000 ffaf 	bl	20001e74 <GPIO_Init>

	//GPIO B UTPORTAR
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE);
20000f16:	2101      	movs	r1, #1
20000f18:	2002      	movs	r0, #2
20000f1a:	f7ff fc9d 	bl	20000858 <RCC_AHB1PeriphClockCmd>
	GPIO_StructInit(&init);
20000f1e:	003b      	movs	r3, r7
20000f20:	0018      	movs	r0, r3
20000f22:	f001 f833 	bl	20001f8c <GPIO_StructInit>
	init.GPIO_Pin = GPIO_Pin_2;
20000f26:	003b      	movs	r3, r7
20000f28:	2204      	movs	r2, #4
20000f2a:	601a      	str	r2, [r3, #0]
	init.GPIO_Mode = GPIO_Mode_OUT;
20000f2c:	003b      	movs	r3, r7
20000f2e:	2201      	movs	r2, #1
20000f30:	711a      	strb	r2, [r3, #4]
	init.GPIO_OType = GPIO_OType_PP;
20000f32:	003b      	movs	r3, r7
20000f34:	2200      	movs	r2, #0
20000f36:	719a      	strb	r2, [r3, #6]
	init.GPIO_PuPd = GPIO_PuPd_NOPULL;
20000f38:	003b      	movs	r3, r7
20000f3a:	2200      	movs	r2, #0
20000f3c:	71da      	strb	r2, [r3, #7]
	GPIO_Init(GPIOB, &init);
20000f3e:	003b      	movs	r3, r7
20000f40:	4a0a      	ldr	r2, [pc, #40]	; (20000f6c <init_GPIO_Ports+0x1c4>)
20000f42:	0019      	movs	r1, r3
20000f44:	0010      	movs	r0, r2
20000f46:	f000 ff95 	bl	20001e74 <GPIO_Init>
20000f4a:	46c0      	nop			; (mov r8, r8)
20000f4c:	46bd      	mov	sp, r7
20000f4e:	b002      	add	sp, #8
20000f50:	bd80      	pop	{r7, pc}
20000f52:	46c0      	nop			; (mov r8, r8)
20000f54:	0000aaaa 	andeq	sl, r0, sl, lsr #21
20000f58:	40021000 	andmi	r1, r2, r0
20000f5c:	00005555 	andeq	r5, r0, r5, asr r5
20000f60:	40020000 	andmi	r0, r2, r0
20000f64:	40020800 	andmi	r0, r2, r0, lsl #16
20000f68:	40020c00 	andmi	r0, r2, r0, lsl #24
20000f6c:	40020400 	andmi	r0, r2, r0, lsl #8

20000f70 <SysTick_Handler>:
GPIO_TypeDef* GPIO_Ports[] = {GPIOE, GPIOA, GPIOC, GPIOD};

// ========================================= SYSTICK ================================================
volatile uint32_t msTicks = 0; /* Variable to store millisecond ticks */
void SysTick_Handler(void)
{ /* SysTick interrupt Handler. */
20000f70:	b580      	push	{r7, lr}
20000f72:	af00      	add	r7, sp, #0
	msTicks++;
20000f74:	4b03      	ldr	r3, [pc, #12]	; (20000f84 <SysTick_Handler+0x14>)
20000f76:	681b      	ldr	r3, [r3, #0]
20000f78:	1c5a      	adds	r2, r3, #1
20000f7a:	4b02      	ldr	r3, [pc, #8]	; (20000f84 <SysTick_Handler+0x14>)
20000f7c:	601a      	str	r2, [r3, #0]
}
20000f7e:	46c0      	nop			; (mov r8, r8)
20000f80:	46bd      	mov	sp, r7
20000f82:	bd80      	pop	{r7, pc}
20000f84:	2000303c 	andcs	r3, r0, ip, lsr r0

20000f88 <systick_Init>:
void systick_Init(void)
{
20000f88:	b580      	push	{r7, lr}
20000f8a:	b082      	sub	sp, #8
20000f8c:	af00      	add	r7, sp, #0
	// Initiera SysTick.
	*((void (**)(void))0x2001C03C) = SysTick_Handler;
20000f8e:	4b06      	ldr	r3, [pc, #24]	; (20000fa8 <systick_Init+0x20>)
20000f90:	4a06      	ldr	r2, [pc, #24]	; (20000fac <systick_Init+0x24>)
20000f92:	601a      	str	r2, [r3, #0]
	uint32_t returnCode;
	returnCode = SysTick_Config(168000000 / 1000); // Genererar ett SysTick-avbrott varje ms.
20000f94:	4b06      	ldr	r3, [pc, #24]	; (20000fb0 <systick_Init+0x28>)
20000f96:	0018      	movs	r0, r3
20000f98:	f7ff f86a 	bl	20000070 <SysTick_Config>
20000f9c:	0003      	movs	r3, r0
20000f9e:	607b      	str	r3, [r7, #4]

	if (returnCode != 0)
	{   // Om inte SysTick_Config lyckas...
		//typ reboot? bootloops är alltid kul
	}
}
20000fa0:	46c0      	nop			; (mov r8, r8)
20000fa2:	46bd      	mov	sp, r7
20000fa4:	b002      	add	sp, #8
20000fa6:	bd80      	pop	{r7, pc}
20000fa8:	2001c03c 	andcs	ip, r1, ip, lsr r0
20000fac:	20000f71 	andcs	r0, r0, r1, ror pc
20000fb0:	00029040 	andeq	r9, r2, r0, asr #32

20000fb4 <main>:

void main(void)
{
20000fb4:	b5f0      	push	{r4, r5, r6, r7, lr}
20000fb6:	46c6      	mov	lr, r8
20000fb8:	b500      	push	{lr}
20000fba:	4cfd      	ldr	r4, [pc, #1012]	; (200013b0 <main+0x3fc>)
20000fbc:	44a5      	add	sp, r4
20000fbe:	af00      	add	r7, sp, #0
	init_GPIO_Ports();
20000fc0:	f7ff fef2 	bl	20000da8 <init_GPIO_Ports>
	systick_Init();
20000fc4:	f7ff ffe0 	bl	20000f88 <systick_Init>
	while(msTicks < 2000);
20000fc8:	46c0      	nop			; (mov r8, r8)
20000fca:	4bfa      	ldr	r3, [pc, #1000]	; (200013b4 <main+0x400>)
20000fcc:	681b      	ldr	r3, [r3, #0]
20000fce:	4afa      	ldr	r2, [pc, #1000]	; (200013b8 <main+0x404>)
20000fd0:	4293      	cmp	r3, r2
20000fd2:	d9fa      	bls.n	20000fca <main+0x16>

	door door1, door2, door3, door4, door5, door6, door8, door9 ,door10, door11, door12, door13,door14,door15,door16, door17, door18, door19, door20, door21, door22, door23, door24 ,door25, door26, door27, door28,door29,door30,door31,door32;
	door all_doors[32] = {door1, door2, door3, door4, door5, door6, door8, door9 ,door10, door11, door12, door13,door14,door15,door16, door17, door18, door19, door20, door21, door22, door23, door24 ,door25, door26, door27, door28,door29,door30,door31,door32};
20000fd4:	4bf9      	ldr	r3, [pc, #996]	; (200013bc <main+0x408>)
20000fd6:	2281      	movs	r2, #129	; 0x81
20000fd8:	0112      	lsls	r2, r2, #4
20000fda:	4694      	mov	ip, r2
20000fdc:	2218      	movs	r2, #24
20000fde:	4690      	mov	r8, r2
20000fe0:	44b8      	add	r8, r7
20000fe2:	44c4      	add	ip, r8
20000fe4:	4463      	add	r3, ip
20000fe6:	0018      	movs	r0, r3
20000fe8:	2380      	movs	r3, #128	; 0x80
20000fea:	00db      	lsls	r3, r3, #3
20000fec:	001a      	movs	r2, r3
20000fee:	2100      	movs	r1, #0
20000ff0:	f002 f81b 	bl	2000302a <memset>
20000ff4:	4bf1      	ldr	r3, [pc, #964]	; (200013bc <main+0x408>)
20000ff6:	2681      	movs	r6, #129	; 0x81
20000ff8:	0136      	lsls	r6, r6, #4
20000ffa:	2218      	movs	r2, #24
20000ffc:	18b9      	adds	r1, r7, r2
20000ffe:	198a      	adds	r2, r1, r6
20001000:	18d2      	adds	r2, r2, r3
20001002:	23f8      	movs	r3, #248	; 0xf8
20001004:	00db      	lsls	r3, r3, #3
20001006:	2118      	movs	r1, #24
20001008:	468c      	mov	ip, r1
2000100a:	44bc      	add	ip, r7
2000100c:	4463      	add	r3, ip
2000100e:	0010      	movs	r0, r2
20001010:	0019      	movs	r1, r3
20001012:	2320      	movs	r3, #32
20001014:	001a      	movs	r2, r3
20001016:	f001 ffff 	bl	20003018 <memcpy>
2000101a:	4be8      	ldr	r3, [pc, #928]	; (200013bc <main+0x408>)
2000101c:	2281      	movs	r2, #129	; 0x81
2000101e:	0112      	lsls	r2, r2, #4
20001020:	4694      	mov	ip, r2
20001022:	2118      	movs	r1, #24
20001024:	4688      	mov	r8, r1
20001026:	44b8      	add	r8, r7
20001028:	44c4      	add	ip, r8
2000102a:	4463      	add	r3, ip
2000102c:	22f4      	movs	r2, #244	; 0xf4
2000102e:	00d2      	lsls	r2, r2, #3
20001030:	2118      	movs	r1, #24
20001032:	468c      	mov	ip, r1
20001034:	44bc      	add	ip, r7
20001036:	4462      	add	r2, ip
20001038:	3320      	adds	r3, #32
2000103a:	0011      	movs	r1, r2
2000103c:	2220      	movs	r2, #32
2000103e:	0018      	movs	r0, r3
20001040:	f001 ffea 	bl	20003018 <memcpy>
20001044:	4bdd      	ldr	r3, [pc, #884]	; (200013bc <main+0x408>)
20001046:	2281      	movs	r2, #129	; 0x81
20001048:	0112      	lsls	r2, r2, #4
2000104a:	4694      	mov	ip, r2
2000104c:	2118      	movs	r1, #24
2000104e:	4688      	mov	r8, r1
20001050:	44b8      	add	r8, r7
20001052:	44c4      	add	ip, r8
20001054:	4463      	add	r3, ip
20001056:	22f0      	movs	r2, #240	; 0xf0
20001058:	00d2      	lsls	r2, r2, #3
2000105a:	2118      	movs	r1, #24
2000105c:	468c      	mov	ip, r1
2000105e:	44bc      	add	ip, r7
20001060:	4462      	add	r2, ip
20001062:	3340      	adds	r3, #64	; 0x40
20001064:	0011      	movs	r1, r2
20001066:	2220      	movs	r2, #32
20001068:	0018      	movs	r0, r3
2000106a:	f001 ffd5 	bl	20003018 <memcpy>
2000106e:	4bd3      	ldr	r3, [pc, #844]	; (200013bc <main+0x408>)
20001070:	2281      	movs	r2, #129	; 0x81
20001072:	0112      	lsls	r2, r2, #4
20001074:	4694      	mov	ip, r2
20001076:	2118      	movs	r1, #24
20001078:	4688      	mov	r8, r1
2000107a:	44b8      	add	r8, r7
2000107c:	44c4      	add	ip, r8
2000107e:	4463      	add	r3, ip
20001080:	22ec      	movs	r2, #236	; 0xec
20001082:	00d2      	lsls	r2, r2, #3
20001084:	2118      	movs	r1, #24
20001086:	468c      	mov	ip, r1
20001088:	44bc      	add	ip, r7
2000108a:	4462      	add	r2, ip
2000108c:	3360      	adds	r3, #96	; 0x60
2000108e:	0011      	movs	r1, r2
20001090:	2220      	movs	r2, #32
20001092:	0018      	movs	r0, r3
20001094:	f001 ffc0 	bl	20003018 <memcpy>
20001098:	4bc8      	ldr	r3, [pc, #800]	; (200013bc <main+0x408>)
2000109a:	2281      	movs	r2, #129	; 0x81
2000109c:	0112      	lsls	r2, r2, #4
2000109e:	4694      	mov	ip, r2
200010a0:	2118      	movs	r1, #24
200010a2:	4688      	mov	r8, r1
200010a4:	44b8      	add	r8, r7
200010a6:	44c4      	add	ip, r8
200010a8:	4463      	add	r3, ip
200010aa:	22e8      	movs	r2, #232	; 0xe8
200010ac:	00d2      	lsls	r2, r2, #3
200010ae:	2118      	movs	r1, #24
200010b0:	468c      	mov	ip, r1
200010b2:	44bc      	add	ip, r7
200010b4:	4462      	add	r2, ip
200010b6:	3380      	adds	r3, #128	; 0x80
200010b8:	0011      	movs	r1, r2
200010ba:	2220      	movs	r2, #32
200010bc:	0018      	movs	r0, r3
200010be:	f001 ffab 	bl	20003018 <memcpy>
200010c2:	4bbe      	ldr	r3, [pc, #760]	; (200013bc <main+0x408>)
200010c4:	2281      	movs	r2, #129	; 0x81
200010c6:	0112      	lsls	r2, r2, #4
200010c8:	4694      	mov	ip, r2
200010ca:	2118      	movs	r1, #24
200010cc:	4688      	mov	r8, r1
200010ce:	44b8      	add	r8, r7
200010d0:	44c4      	add	ip, r8
200010d2:	4463      	add	r3, ip
200010d4:	22a0      	movs	r2, #160	; 0xa0
200010d6:	21e4      	movs	r1, #228	; 0xe4
200010d8:	00c9      	lsls	r1, r1, #3
200010da:	2018      	movs	r0, #24
200010dc:	4684      	mov	ip, r0
200010de:	44bc      	add	ip, r7
200010e0:	4461      	add	r1, ip
200010e2:	189b      	adds	r3, r3, r2
200010e4:	2220      	movs	r2, #32
200010e6:	0018      	movs	r0, r3
200010e8:	f001 ff96 	bl	20003018 <memcpy>
200010ec:	4bb3      	ldr	r3, [pc, #716]	; (200013bc <main+0x408>)
200010ee:	2281      	movs	r2, #129	; 0x81
200010f0:	0112      	lsls	r2, r2, #4
200010f2:	4694      	mov	ip, r2
200010f4:	2118      	movs	r1, #24
200010f6:	4688      	mov	r8, r1
200010f8:	44b8      	add	r8, r7
200010fa:	44c4      	add	ip, r8
200010fc:	4463      	add	r3, ip
200010fe:	22c0      	movs	r2, #192	; 0xc0
20001100:	49af      	ldr	r1, [pc, #700]	; (200013c0 <main+0x40c>)
20001102:	2081      	movs	r0, #129	; 0x81
20001104:	0100      	lsls	r0, r0, #4
20001106:	4684      	mov	ip, r0
20001108:	2018      	movs	r0, #24
2000110a:	4680      	mov	r8, r0
2000110c:	44b8      	add	r8, r7
2000110e:	44c4      	add	ip, r8
20001110:	4461      	add	r1, ip
20001112:	189b      	adds	r3, r3, r2
20001114:	2220      	movs	r2, #32
20001116:	0018      	movs	r0, r3
20001118:	f001 ff7e 	bl	20003018 <memcpy>
2000111c:	4ba7      	ldr	r3, [pc, #668]	; (200013bc <main+0x408>)
2000111e:	2281      	movs	r2, #129	; 0x81
20001120:	0112      	lsls	r2, r2, #4
20001122:	4694      	mov	ip, r2
20001124:	2118      	movs	r1, #24
20001126:	4688      	mov	r8, r1
20001128:	44b8      	add	r8, r7
2000112a:	44c4      	add	ip, r8
2000112c:	4463      	add	r3, ip
2000112e:	22e0      	movs	r2, #224	; 0xe0
20001130:	49a4      	ldr	r1, [pc, #656]	; (200013c4 <main+0x410>)
20001132:	2081      	movs	r0, #129	; 0x81
20001134:	0100      	lsls	r0, r0, #4
20001136:	4684      	mov	ip, r0
20001138:	2018      	movs	r0, #24
2000113a:	4680      	mov	r8, r0
2000113c:	44b8      	add	r8, r7
2000113e:	44c4      	add	ip, r8
20001140:	4461      	add	r1, ip
20001142:	189b      	adds	r3, r3, r2
20001144:	2220      	movs	r2, #32
20001146:	0018      	movs	r0, r3
20001148:	f001 ff66 	bl	20003018 <memcpy>
2000114c:	4b9b      	ldr	r3, [pc, #620]	; (200013bc <main+0x408>)
2000114e:	2218      	movs	r2, #24
20001150:	18b9      	adds	r1, r7, r2
20001152:	198a      	adds	r2, r1, r6
20001154:	18d2      	adds	r2, r2, r3
20001156:	2380      	movs	r3, #128	; 0x80
20001158:	005b      	lsls	r3, r3, #1
2000115a:	499b      	ldr	r1, [pc, #620]	; (200013c8 <main+0x414>)
2000115c:	2081      	movs	r0, #129	; 0x81
2000115e:	0100      	lsls	r0, r0, #4
20001160:	4684      	mov	ip, r0
20001162:	2018      	movs	r0, #24
20001164:	4680      	mov	r8, r0
20001166:	44b8      	add	r8, r7
20001168:	44c4      	add	ip, r8
2000116a:	4461      	add	r1, ip
2000116c:	18d3      	adds	r3, r2, r3
2000116e:	2220      	movs	r2, #32
20001170:	0018      	movs	r0, r3
20001172:	f001 ff51 	bl	20003018 <memcpy>
20001176:	4b91      	ldr	r3, [pc, #580]	; (200013bc <main+0x408>)
20001178:	2218      	movs	r2, #24
2000117a:	18b9      	adds	r1, r7, r2
2000117c:	198a      	adds	r2, r1, r6
2000117e:	18d2      	adds	r2, r2, r3
20001180:	2390      	movs	r3, #144	; 0x90
20001182:	005b      	lsls	r3, r3, #1
20001184:	4991      	ldr	r1, [pc, #580]	; (200013cc <main+0x418>)
20001186:	2081      	movs	r0, #129	; 0x81
20001188:	0100      	lsls	r0, r0, #4
2000118a:	4684      	mov	ip, r0
2000118c:	2018      	movs	r0, #24
2000118e:	4680      	mov	r8, r0
20001190:	44b8      	add	r8, r7
20001192:	44c4      	add	ip, r8
20001194:	4461      	add	r1, ip
20001196:	18d3      	adds	r3, r2, r3
20001198:	2220      	movs	r2, #32
2000119a:	0018      	movs	r0, r3
2000119c:	f001 ff3c 	bl	20003018 <memcpy>
200011a0:	4b86      	ldr	r3, [pc, #536]	; (200013bc <main+0x408>)
200011a2:	2218      	movs	r2, #24
200011a4:	18b9      	adds	r1, r7, r2
200011a6:	198a      	adds	r2, r1, r6
200011a8:	18d2      	adds	r2, r2, r3
200011aa:	23a0      	movs	r3, #160	; 0xa0
200011ac:	005b      	lsls	r3, r3, #1
200011ae:	4988      	ldr	r1, [pc, #544]	; (200013d0 <main+0x41c>)
200011b0:	2081      	movs	r0, #129	; 0x81
200011b2:	0100      	lsls	r0, r0, #4
200011b4:	4684      	mov	ip, r0
200011b6:	2018      	movs	r0, #24
200011b8:	4680      	mov	r8, r0
200011ba:	44b8      	add	r8, r7
200011bc:	44c4      	add	ip, r8
200011be:	4461      	add	r1, ip
200011c0:	18d3      	adds	r3, r2, r3
200011c2:	2220      	movs	r2, #32
200011c4:	0018      	movs	r0, r3
200011c6:	f001 ff27 	bl	20003018 <memcpy>
200011ca:	4b7c      	ldr	r3, [pc, #496]	; (200013bc <main+0x408>)
200011cc:	2218      	movs	r2, #24
200011ce:	18b9      	adds	r1, r7, r2
200011d0:	198a      	adds	r2, r1, r6
200011d2:	18d2      	adds	r2, r2, r3
200011d4:	23b0      	movs	r3, #176	; 0xb0
200011d6:	005b      	lsls	r3, r3, #1
200011d8:	497e      	ldr	r1, [pc, #504]	; (200013d4 <main+0x420>)
200011da:	2081      	movs	r0, #129	; 0x81
200011dc:	0100      	lsls	r0, r0, #4
200011de:	4684      	mov	ip, r0
200011e0:	2018      	movs	r0, #24
200011e2:	4680      	mov	r8, r0
200011e4:	44b8      	add	r8, r7
200011e6:	44c4      	add	ip, r8
200011e8:	4461      	add	r1, ip
200011ea:	18d3      	adds	r3, r2, r3
200011ec:	2220      	movs	r2, #32
200011ee:	0018      	movs	r0, r3
200011f0:	f001 ff12 	bl	20003018 <memcpy>
200011f4:	4b71      	ldr	r3, [pc, #452]	; (200013bc <main+0x408>)
200011f6:	2218      	movs	r2, #24
200011f8:	18b9      	adds	r1, r7, r2
200011fa:	198a      	adds	r2, r1, r6
200011fc:	18d2      	adds	r2, r2, r3
200011fe:	23c0      	movs	r3, #192	; 0xc0
20001200:	005b      	lsls	r3, r3, #1
20001202:	4975      	ldr	r1, [pc, #468]	; (200013d8 <main+0x424>)
20001204:	2081      	movs	r0, #129	; 0x81
20001206:	0100      	lsls	r0, r0, #4
20001208:	4684      	mov	ip, r0
2000120a:	2018      	movs	r0, #24
2000120c:	4680      	mov	r8, r0
2000120e:	44b8      	add	r8, r7
20001210:	44c4      	add	ip, r8
20001212:	4461      	add	r1, ip
20001214:	18d3      	adds	r3, r2, r3
20001216:	2220      	movs	r2, #32
20001218:	0018      	movs	r0, r3
2000121a:	f001 fefd 	bl	20003018 <memcpy>
2000121e:	4b67      	ldr	r3, [pc, #412]	; (200013bc <main+0x408>)
20001220:	2218      	movs	r2, #24
20001222:	18b9      	adds	r1, r7, r2
20001224:	198a      	adds	r2, r1, r6
20001226:	18d2      	adds	r2, r2, r3
20001228:	23d0      	movs	r3, #208	; 0xd0
2000122a:	005b      	lsls	r3, r3, #1
2000122c:	496b      	ldr	r1, [pc, #428]	; (200013dc <main+0x428>)
2000122e:	2081      	movs	r0, #129	; 0x81
20001230:	0100      	lsls	r0, r0, #4
20001232:	4684      	mov	ip, r0
20001234:	2018      	movs	r0, #24
20001236:	4680      	mov	r8, r0
20001238:	44b8      	add	r8, r7
2000123a:	44c4      	add	ip, r8
2000123c:	4461      	add	r1, ip
2000123e:	18d3      	adds	r3, r2, r3
20001240:	2220      	movs	r2, #32
20001242:	0018      	movs	r0, r3
20001244:	f001 fee8 	bl	20003018 <memcpy>
20001248:	4b5c      	ldr	r3, [pc, #368]	; (200013bc <main+0x408>)
2000124a:	2218      	movs	r2, #24
2000124c:	18b9      	adds	r1, r7, r2
2000124e:	198a      	adds	r2, r1, r6
20001250:	18d2      	adds	r2, r2, r3
20001252:	23e0      	movs	r3, #224	; 0xe0
20001254:	005b      	lsls	r3, r3, #1
20001256:	4962      	ldr	r1, [pc, #392]	; (200013e0 <main+0x42c>)
20001258:	2081      	movs	r0, #129	; 0x81
2000125a:	0100      	lsls	r0, r0, #4
2000125c:	4684      	mov	ip, r0
2000125e:	2018      	movs	r0, #24
20001260:	4680      	mov	r8, r0
20001262:	44b8      	add	r8, r7
20001264:	44c4      	add	ip, r8
20001266:	4461      	add	r1, ip
20001268:	18d3      	adds	r3, r2, r3
2000126a:	2220      	movs	r2, #32
2000126c:	0018      	movs	r0, r3
2000126e:	f001 fed3 	bl	20003018 <memcpy>
20001272:	4b52      	ldr	r3, [pc, #328]	; (200013bc <main+0x408>)
20001274:	2218      	movs	r2, #24
20001276:	18b9      	adds	r1, r7, r2
20001278:	198a      	adds	r2, r1, r6
2000127a:	18d2      	adds	r2, r2, r3
2000127c:	23f0      	movs	r3, #240	; 0xf0
2000127e:	005b      	lsls	r3, r3, #1
20001280:	4958      	ldr	r1, [pc, #352]	; (200013e4 <main+0x430>)
20001282:	2081      	movs	r0, #129	; 0x81
20001284:	0100      	lsls	r0, r0, #4
20001286:	4684      	mov	ip, r0
20001288:	2018      	movs	r0, #24
2000128a:	4680      	mov	r8, r0
2000128c:	44b8      	add	r8, r7
2000128e:	44c4      	add	ip, r8
20001290:	4461      	add	r1, ip
20001292:	18d3      	adds	r3, r2, r3
20001294:	2220      	movs	r2, #32
20001296:	0018      	movs	r0, r3
20001298:	f001 febe 	bl	20003018 <memcpy>
2000129c:	4b47      	ldr	r3, [pc, #284]	; (200013bc <main+0x408>)
2000129e:	2218      	movs	r2, #24
200012a0:	18b9      	adds	r1, r7, r2
200012a2:	198a      	adds	r2, r1, r6
200012a4:	18d2      	adds	r2, r2, r3
200012a6:	2380      	movs	r3, #128	; 0x80
200012a8:	009b      	lsls	r3, r3, #2
200012aa:	494f      	ldr	r1, [pc, #316]	; (200013e8 <main+0x434>)
200012ac:	2081      	movs	r0, #129	; 0x81
200012ae:	0100      	lsls	r0, r0, #4
200012b0:	4684      	mov	ip, r0
200012b2:	2018      	movs	r0, #24
200012b4:	4680      	mov	r8, r0
200012b6:	44b8      	add	r8, r7
200012b8:	44c4      	add	ip, r8
200012ba:	4461      	add	r1, ip
200012bc:	18d3      	adds	r3, r2, r3
200012be:	2220      	movs	r2, #32
200012c0:	0018      	movs	r0, r3
200012c2:	f001 fea9 	bl	20003018 <memcpy>
200012c6:	4b3d      	ldr	r3, [pc, #244]	; (200013bc <main+0x408>)
200012c8:	2218      	movs	r2, #24
200012ca:	18b9      	adds	r1, r7, r2
200012cc:	198a      	adds	r2, r1, r6
200012ce:	18d2      	adds	r2, r2, r3
200012d0:	2388      	movs	r3, #136	; 0x88
200012d2:	009b      	lsls	r3, r3, #2
200012d4:	4945      	ldr	r1, [pc, #276]	; (200013ec <main+0x438>)
200012d6:	2081      	movs	r0, #129	; 0x81
200012d8:	0100      	lsls	r0, r0, #4
200012da:	4684      	mov	ip, r0
200012dc:	2018      	movs	r0, #24
200012de:	4680      	mov	r8, r0
200012e0:	44b8      	add	r8, r7
200012e2:	44c4      	add	ip, r8
200012e4:	4461      	add	r1, ip
200012e6:	18d3      	adds	r3, r2, r3
200012e8:	2220      	movs	r2, #32
200012ea:	0018      	movs	r0, r3
200012ec:	f001 fe94 	bl	20003018 <memcpy>
200012f0:	4b32      	ldr	r3, [pc, #200]	; (200013bc <main+0x408>)
200012f2:	2218      	movs	r2, #24
200012f4:	18b9      	adds	r1, r7, r2
200012f6:	198a      	adds	r2, r1, r6
200012f8:	18d2      	adds	r2, r2, r3
200012fa:	2390      	movs	r3, #144	; 0x90
200012fc:	009b      	lsls	r3, r3, #2
200012fe:	493c      	ldr	r1, [pc, #240]	; (200013f0 <main+0x43c>)
20001300:	2081      	movs	r0, #129	; 0x81
20001302:	0100      	lsls	r0, r0, #4
20001304:	4684      	mov	ip, r0
20001306:	2018      	movs	r0, #24
20001308:	4680      	mov	r8, r0
2000130a:	44b8      	add	r8, r7
2000130c:	44c4      	add	ip, r8
2000130e:	4461      	add	r1, ip
20001310:	18d3      	adds	r3, r2, r3
20001312:	2220      	movs	r2, #32
20001314:	0018      	movs	r0, r3
20001316:	f001 fe7f 	bl	20003018 <memcpy>
2000131a:	4b28      	ldr	r3, [pc, #160]	; (200013bc <main+0x408>)
2000131c:	2218      	movs	r2, #24
2000131e:	18b9      	adds	r1, r7, r2
20001320:	198a      	adds	r2, r1, r6
20001322:	18d2      	adds	r2, r2, r3
20001324:	2398      	movs	r3, #152	; 0x98
20001326:	009b      	lsls	r3, r3, #2
20001328:	4932      	ldr	r1, [pc, #200]	; (200013f4 <main+0x440>)
2000132a:	2081      	movs	r0, #129	; 0x81
2000132c:	0100      	lsls	r0, r0, #4
2000132e:	4684      	mov	ip, r0
20001330:	2018      	movs	r0, #24
20001332:	4680      	mov	r8, r0
20001334:	44b8      	add	r8, r7
20001336:	44c4      	add	ip, r8
20001338:	4461      	add	r1, ip
2000133a:	18d3      	adds	r3, r2, r3
2000133c:	2220      	movs	r2, #32
2000133e:	0018      	movs	r0, r3
20001340:	f001 fe6a 	bl	20003018 <memcpy>
20001344:	4b1d      	ldr	r3, [pc, #116]	; (200013bc <main+0x408>)
20001346:	2218      	movs	r2, #24
20001348:	18b9      	adds	r1, r7, r2
2000134a:	198a      	adds	r2, r1, r6
2000134c:	18d2      	adds	r2, r2, r3
2000134e:	23a0      	movs	r3, #160	; 0xa0
20001350:	009b      	lsls	r3, r3, #2
20001352:	4929      	ldr	r1, [pc, #164]	; (200013f8 <main+0x444>)
20001354:	2081      	movs	r0, #129	; 0x81
20001356:	0100      	lsls	r0, r0, #4
20001358:	4684      	mov	ip, r0
2000135a:	2018      	movs	r0, #24
2000135c:	4680      	mov	r8, r0
2000135e:	44b8      	add	r8, r7
20001360:	44c4      	add	ip, r8
20001362:	4461      	add	r1, ip
20001364:	18d3      	adds	r3, r2, r3
20001366:	2220      	movs	r2, #32
20001368:	0018      	movs	r0, r3
2000136a:	f001 fe55 	bl	20003018 <memcpy>
2000136e:	4b13      	ldr	r3, [pc, #76]	; (200013bc <main+0x408>)
20001370:	2218      	movs	r2, #24
20001372:	18b9      	adds	r1, r7, r2
20001374:	198a      	adds	r2, r1, r6
20001376:	18d2      	adds	r2, r2, r3
20001378:	23a8      	movs	r3, #168	; 0xa8
2000137a:	009b      	lsls	r3, r3, #2
2000137c:	491f      	ldr	r1, [pc, #124]	; (200013fc <main+0x448>)
2000137e:	2081      	movs	r0, #129	; 0x81
20001380:	0100      	lsls	r0, r0, #4
20001382:	4684      	mov	ip, r0
20001384:	2018      	movs	r0, #24
20001386:	4680      	mov	r8, r0
20001388:	44b8      	add	r8, r7
2000138a:	44c4      	add	ip, r8
2000138c:	4461      	add	r1, ip
2000138e:	18d3      	adds	r3, r2, r3
20001390:	2220      	movs	r2, #32
20001392:	0018      	movs	r0, r3
20001394:	f001 fe40 	bl	20003018 <memcpy>
20001398:	4b08      	ldr	r3, [pc, #32]	; (200013bc <main+0x408>)
2000139a:	2218      	movs	r2, #24
2000139c:	18b9      	adds	r1, r7, r2
2000139e:	198a      	adds	r2, r1, r6
200013a0:	18d2      	adds	r2, r2, r3
200013a2:	23b0      	movs	r3, #176	; 0xb0
200013a4:	009b      	lsls	r3, r3, #2
200013a6:	4916      	ldr	r1, [pc, #88]	; (20001400 <main+0x44c>)
200013a8:	2081      	movs	r0, #129	; 0x81
200013aa:	0100      	lsls	r0, r0, #4
200013ac:	4684      	mov	ip, r0
200013ae:	e029      	b.n	20001404 <main+0x450>
200013b0:	fffff7d8 			; <UNDEFINED> instruction: 0xfffff7d8
200013b4:	2000303c 	andcs	r3, r0, ip, lsr r0
200013b8:	000007cf 	andeq	r0, r0, pc, asr #15
200013bc:	fffff7f0 			; <UNDEFINED> instruction: 0xfffff7f0
200013c0:	fffffef0 			; <UNDEFINED> instruction: 0xfffffef0
200013c4:	fffffed0 			; <UNDEFINED> instruction: 0xfffffed0
200013c8:	fffffeb0 			; <UNDEFINED> instruction: 0xfffffeb0
200013cc:	fffffe90 			; <UNDEFINED> instruction: 0xfffffe90
200013d0:	fffffe70 			; <UNDEFINED> instruction: 0xfffffe70
200013d4:	fffffe50 			; <UNDEFINED> instruction: 0xfffffe50
200013d8:	fffffe30 			; <UNDEFINED> instruction: 0xfffffe30
200013dc:	fffffe10 			; <UNDEFINED> instruction: 0xfffffe10
200013e0:	fffffdf0 			; <UNDEFINED> instruction: 0xfffffdf0
200013e4:	fffffdd0 			; <UNDEFINED> instruction: 0xfffffdd0
200013e8:	fffffdb0 			; <UNDEFINED> instruction: 0xfffffdb0
200013ec:	fffffd90 			; <UNDEFINED> instruction: 0xfffffd90
200013f0:	fffffd70 			; <UNDEFINED> instruction: 0xfffffd70
200013f4:	fffffd50 			; <UNDEFINED> instruction: 0xfffffd50
200013f8:	fffffd30 			; <UNDEFINED> instruction: 0xfffffd30
200013fc:	fffffd10 			; <UNDEFINED> instruction: 0xfffffd10
20001400:	fffffcf0 			; <UNDEFINED> instruction: 0xfffffcf0
20001404:	2018      	movs	r0, #24
20001406:	4680      	mov	r8, r0
20001408:	44b8      	add	r8, r7
2000140a:	44c4      	add	ip, r8
2000140c:	4461      	add	r1, ip
2000140e:	18d3      	adds	r3, r2, r3
20001410:	2220      	movs	r2, #32
20001412:	0018      	movs	r0, r3
20001414:	f001 fe00 	bl	20003018 <memcpy>
20001418:	4baf      	ldr	r3, [pc, #700]	; (200016d8 <main+0x724>)
2000141a:	2218      	movs	r2, #24
2000141c:	18b9      	adds	r1, r7, r2
2000141e:	198a      	adds	r2, r1, r6
20001420:	18d2      	adds	r2, r2, r3
20001422:	23b8      	movs	r3, #184	; 0xb8
20001424:	009b      	lsls	r3, r3, #2
20001426:	49ad      	ldr	r1, [pc, #692]	; (200016dc <main+0x728>)
20001428:	2081      	movs	r0, #129	; 0x81
2000142a:	0100      	lsls	r0, r0, #4
2000142c:	4684      	mov	ip, r0
2000142e:	2018      	movs	r0, #24
20001430:	4680      	mov	r8, r0
20001432:	44b8      	add	r8, r7
20001434:	44c4      	add	ip, r8
20001436:	4461      	add	r1, ip
20001438:	18d3      	adds	r3, r2, r3
2000143a:	2220      	movs	r2, #32
2000143c:	0018      	movs	r0, r3
2000143e:	f001 fdeb 	bl	20003018 <memcpy>
20001442:	4ba5      	ldr	r3, [pc, #660]	; (200016d8 <main+0x724>)
20001444:	2218      	movs	r2, #24
20001446:	18b9      	adds	r1, r7, r2
20001448:	198a      	adds	r2, r1, r6
2000144a:	18d2      	adds	r2, r2, r3
2000144c:	23c0      	movs	r3, #192	; 0xc0
2000144e:	009b      	lsls	r3, r3, #2
20001450:	49a3      	ldr	r1, [pc, #652]	; (200016e0 <main+0x72c>)
20001452:	2081      	movs	r0, #129	; 0x81
20001454:	0100      	lsls	r0, r0, #4
20001456:	4684      	mov	ip, r0
20001458:	2018      	movs	r0, #24
2000145a:	4680      	mov	r8, r0
2000145c:	44b8      	add	r8, r7
2000145e:	44c4      	add	ip, r8
20001460:	4461      	add	r1, ip
20001462:	18d3      	adds	r3, r2, r3
20001464:	2220      	movs	r2, #32
20001466:	0018      	movs	r0, r3
20001468:	f001 fdd6 	bl	20003018 <memcpy>
2000146c:	4b9a      	ldr	r3, [pc, #616]	; (200016d8 <main+0x724>)
2000146e:	2218      	movs	r2, #24
20001470:	18b9      	adds	r1, r7, r2
20001472:	198a      	adds	r2, r1, r6
20001474:	18d2      	adds	r2, r2, r3
20001476:	23c8      	movs	r3, #200	; 0xc8
20001478:	009b      	lsls	r3, r3, #2
2000147a:	499a      	ldr	r1, [pc, #616]	; (200016e4 <main+0x730>)
2000147c:	2081      	movs	r0, #129	; 0x81
2000147e:	0100      	lsls	r0, r0, #4
20001480:	4684      	mov	ip, r0
20001482:	2018      	movs	r0, #24
20001484:	4680      	mov	r8, r0
20001486:	44b8      	add	r8, r7
20001488:	44c4      	add	ip, r8
2000148a:	4461      	add	r1, ip
2000148c:	18d3      	adds	r3, r2, r3
2000148e:	2220      	movs	r2, #32
20001490:	0018      	movs	r0, r3
20001492:	f001 fdc1 	bl	20003018 <memcpy>
20001496:	4b90      	ldr	r3, [pc, #576]	; (200016d8 <main+0x724>)
20001498:	2218      	movs	r2, #24
2000149a:	18b9      	adds	r1, r7, r2
2000149c:	198a      	adds	r2, r1, r6
2000149e:	18d2      	adds	r2, r2, r3
200014a0:	23d0      	movs	r3, #208	; 0xd0
200014a2:	009b      	lsls	r3, r3, #2
200014a4:	4990      	ldr	r1, [pc, #576]	; (200016e8 <main+0x734>)
200014a6:	2081      	movs	r0, #129	; 0x81
200014a8:	0100      	lsls	r0, r0, #4
200014aa:	4684      	mov	ip, r0
200014ac:	2018      	movs	r0, #24
200014ae:	4680      	mov	r8, r0
200014b0:	44b8      	add	r8, r7
200014b2:	44c4      	add	ip, r8
200014b4:	4461      	add	r1, ip
200014b6:	18d3      	adds	r3, r2, r3
200014b8:	2220      	movs	r2, #32
200014ba:	0018      	movs	r0, r3
200014bc:	f001 fdac 	bl	20003018 <memcpy>
200014c0:	4b85      	ldr	r3, [pc, #532]	; (200016d8 <main+0x724>)
200014c2:	2218      	movs	r2, #24
200014c4:	18b9      	adds	r1, r7, r2
200014c6:	198a      	adds	r2, r1, r6
200014c8:	18d2      	adds	r2, r2, r3
200014ca:	23d8      	movs	r3, #216	; 0xd8
200014cc:	009b      	lsls	r3, r3, #2
200014ce:	4987      	ldr	r1, [pc, #540]	; (200016ec <main+0x738>)
200014d0:	2081      	movs	r0, #129	; 0x81
200014d2:	0100      	lsls	r0, r0, #4
200014d4:	4684      	mov	ip, r0
200014d6:	2018      	movs	r0, #24
200014d8:	4680      	mov	r8, r0
200014da:	44b8      	add	r8, r7
200014dc:	44c4      	add	ip, r8
200014de:	4461      	add	r1, ip
200014e0:	18d3      	adds	r3, r2, r3
200014e2:	2220      	movs	r2, #32
200014e4:	0018      	movs	r0, r3
200014e6:	f001 fd97 	bl	20003018 <memcpy>
200014ea:	4b7b      	ldr	r3, [pc, #492]	; (200016d8 <main+0x724>)
200014ec:	2218      	movs	r2, #24
200014ee:	18b9      	adds	r1, r7, r2
200014f0:	198a      	adds	r2, r1, r6
200014f2:	18d2      	adds	r2, r2, r3
200014f4:	23e0      	movs	r3, #224	; 0xe0
200014f6:	009b      	lsls	r3, r3, #2
200014f8:	497d      	ldr	r1, [pc, #500]	; (200016f0 <main+0x73c>)
200014fa:	2081      	movs	r0, #129	; 0x81
200014fc:	0100      	lsls	r0, r0, #4
200014fe:	4684      	mov	ip, r0
20001500:	2018      	movs	r0, #24
20001502:	4680      	mov	r8, r0
20001504:	44b8      	add	r8, r7
20001506:	44c4      	add	ip, r8
20001508:	4461      	add	r1, ip
2000150a:	18d3      	adds	r3, r2, r3
2000150c:	2220      	movs	r2, #32
2000150e:	0018      	movs	r0, r3
20001510:	f001 fd82 	bl	20003018 <memcpy>
20001514:	4b70      	ldr	r3, [pc, #448]	; (200016d8 <main+0x724>)
20001516:	2218      	movs	r2, #24
20001518:	18b9      	adds	r1, r7, r2
2000151a:	198a      	adds	r2, r1, r6
2000151c:	18d2      	adds	r2, r2, r3
2000151e:	23e8      	movs	r3, #232	; 0xe8
20001520:	009b      	lsls	r3, r3, #2
20001522:	4974      	ldr	r1, [pc, #464]	; (200016f4 <main+0x740>)
20001524:	2081      	movs	r0, #129	; 0x81
20001526:	0100      	lsls	r0, r0, #4
20001528:	4684      	mov	ip, r0
2000152a:	2018      	movs	r0, #24
2000152c:	4680      	mov	r8, r0
2000152e:	44b8      	add	r8, r7
20001530:	44c4      	add	ip, r8
20001532:	4461      	add	r1, ip
20001534:	18d3      	adds	r3, r2, r3
20001536:	2220      	movs	r2, #32
20001538:	0018      	movs	r0, r3
2000153a:	f001 fd6d 	bl	20003018 <memcpy>
2000153e:	4b66      	ldr	r3, [pc, #408]	; (200016d8 <main+0x724>)
20001540:	2218      	movs	r2, #24
20001542:	18ba      	adds	r2, r7, r2
20001544:	1992      	adds	r2, r2, r6
20001546:	18d2      	adds	r2, r2, r3
20001548:	23f0      	movs	r3, #240	; 0xf0
2000154a:	009b      	lsls	r3, r3, #2
2000154c:	496a      	ldr	r1, [pc, #424]	; (200016f8 <main+0x744>)
2000154e:	2081      	movs	r0, #129	; 0x81
20001550:	0100      	lsls	r0, r0, #4
20001552:	4684      	mov	ip, r0
20001554:	2018      	movs	r0, #24
20001556:	4680      	mov	r8, r0
20001558:	44b8      	add	r8, r7
2000155a:	44c4      	add	ip, r8
2000155c:	4461      	add	r1, ip
2000155e:	18d3      	adds	r3, r2, r3
20001560:	2220      	movs	r2, #32
20001562:	0018      	movs	r0, r3
20001564:	f001 fd58 	bl	20003018 <memcpy>

	int amountOfActiveDoors = 0;
20001568:	2300      	movs	r3, #0
2000156a:	4a64      	ldr	r2, [pc, #400]	; (200016fc <main+0x748>)
2000156c:	2118      	movs	r1, #24
2000156e:	468c      	mov	ip, r1
20001570:	44bc      	add	ip, r7
20001572:	4462      	add	r2, ip
20001574:	6013      	str	r3, [r2, #0]
	for (int j = 0; j < (sizeof(GPIO_Ports) /sizeof(GPIO_TypeDef *)); j++)
20001576:	2300      	movs	r3, #0
20001578:	4a61      	ldr	r2, [pc, #388]	; (20001700 <main+0x74c>)
2000157a:	2118      	movs	r1, #24
2000157c:	468c      	mov	ip, r1
2000157e:	44bc      	add	ip, r7
20001580:	4462      	add	r2, ip
20001582:	6013      	str	r3, [r2, #0]
20001584:	e047      	b.n	20001616 <main+0x662>
	{
		for (int i = 0; i < sizeof(GPIO_Pins) / sizeof(uint16_t); i = i + 2)
20001586:	2300      	movs	r3, #0
20001588:	4a5e      	ldr	r2, [pc, #376]	; (20001704 <main+0x750>)
2000158a:	2118      	movs	r1, #24
2000158c:	468c      	mov	ip, r1
2000158e:	44bc      	add	ip, r7
20001590:	4462      	add	r2, ip
20001592:	6013      	str	r3, [r2, #0]
20001594:	e02c      	b.n	200015f0 <main+0x63c>
		{
			if(!GPIO_ReadInputDataBit(GPIO_Ports[j], GPIO_Pins[i])){
20001596:	4b5c      	ldr	r3, [pc, #368]	; (20001708 <main+0x754>)
20001598:	4a59      	ldr	r2, [pc, #356]	; (20001700 <main+0x74c>)
2000159a:	2118      	movs	r1, #24
2000159c:	468c      	mov	ip, r1
2000159e:	44bc      	add	ip, r7
200015a0:	4462      	add	r2, ip
200015a2:	6812      	ldr	r2, [r2, #0]
200015a4:	0092      	lsls	r2, r2, #2
200015a6:	58d0      	ldr	r0, [r2, r3]
200015a8:	4b58      	ldr	r3, [pc, #352]	; (2000170c <main+0x758>)
200015aa:	4a56      	ldr	r2, [pc, #344]	; (20001704 <main+0x750>)
200015ac:	2118      	movs	r1, #24
200015ae:	468c      	mov	ip, r1
200015b0:	44bc      	add	ip, r7
200015b2:	4462      	add	r2, ip
200015b4:	6812      	ldr	r2, [r2, #0]
200015b6:	0052      	lsls	r2, r2, #1
200015b8:	5ad3      	ldrh	r3, [r2, r3]
200015ba:	0019      	movs	r1, r3
200015bc:	f000 fd23 	bl	20002006 <GPIO_ReadInputDataBit>
200015c0:	1e03      	subs	r3, r0, #0
200015c2:	d10a      	bne.n	200015da <main+0x626>
				amountOfActiveDoors++;
200015c4:	4a4d      	ldr	r2, [pc, #308]	; (200016fc <main+0x748>)
200015c6:	2318      	movs	r3, #24
200015c8:	18fb      	adds	r3, r7, r3
200015ca:	189b      	adds	r3, r3, r2
200015cc:	681b      	ldr	r3, [r3, #0]
200015ce:	3301      	adds	r3, #1
200015d0:	2118      	movs	r1, #24
200015d2:	468c      	mov	ip, r1
200015d4:	44bc      	add	ip, r7
200015d6:	4462      	add	r2, ip
200015d8:	6013      	str	r3, [r2, #0]
		for (int i = 0; i < sizeof(GPIO_Pins) / sizeof(uint16_t); i = i + 2)
200015da:	4a4a      	ldr	r2, [pc, #296]	; (20001704 <main+0x750>)
200015dc:	2318      	movs	r3, #24
200015de:	18fb      	adds	r3, r7, r3
200015e0:	189b      	adds	r3, r3, r2
200015e2:	681b      	ldr	r3, [r3, #0]
200015e4:	3302      	adds	r3, #2
200015e6:	2118      	movs	r1, #24
200015e8:	468c      	mov	ip, r1
200015ea:	44bc      	add	ip, r7
200015ec:	4462      	add	r2, ip
200015ee:	6013      	str	r3, [r2, #0]
200015f0:	4b44      	ldr	r3, [pc, #272]	; (20001704 <main+0x750>)
200015f2:	2218      	movs	r2, #24
200015f4:	4694      	mov	ip, r2
200015f6:	44bc      	add	ip, r7
200015f8:	4463      	add	r3, ip
200015fa:	681b      	ldr	r3, [r3, #0]
200015fc:	2b0f      	cmp	r3, #15
200015fe:	d9ca      	bls.n	20001596 <main+0x5e2>
	for (int j = 0; j < (sizeof(GPIO_Ports) /sizeof(GPIO_TypeDef *)); j++)
20001600:	4a3f      	ldr	r2, [pc, #252]	; (20001700 <main+0x74c>)
20001602:	2318      	movs	r3, #24
20001604:	18fb      	adds	r3, r7, r3
20001606:	189b      	adds	r3, r3, r2
20001608:	681b      	ldr	r3, [r3, #0]
2000160a:	3301      	adds	r3, #1
2000160c:	2118      	movs	r1, #24
2000160e:	468c      	mov	ip, r1
20001610:	44bc      	add	ip, r7
20001612:	4462      	add	r2, ip
20001614:	6013      	str	r3, [r2, #0]
20001616:	4b3a      	ldr	r3, [pc, #232]	; (20001700 <main+0x74c>)
20001618:	2218      	movs	r2, #24
2000161a:	4694      	mov	ip, r2
2000161c:	44bc      	add	ip, r7
2000161e:	4463      	add	r3, ip
20001620:	681b      	ldr	r3, [r3, #0]
20001622:	2b03      	cmp	r3, #3
20001624:	d9af      	bls.n	20001586 <main+0x5d2>
			}
		}
	}
	door active_doors[amountOfActiveDoors];
20001626:	4b35      	ldr	r3, [pc, #212]	; (200016fc <main+0x748>)
20001628:	2218      	movs	r2, #24
2000162a:	4694      	mov	ip, r2
2000162c:	44bc      	add	ip, r7
2000162e:	4463      	add	r3, ip
20001630:	681e      	ldr	r6, [r3, #0]
20001632:	1e73      	subs	r3, r6, #1
20001634:	22fd      	movs	r2, #253	; 0xfd
20001636:	00d2      	lsls	r2, r2, #3
20001638:	2118      	movs	r1, #24
2000163a:	468c      	mov	ip, r1
2000163c:	44bc      	add	ip, r7
2000163e:	4462      	add	r2, ip
20001640:	6013      	str	r3, [r2, #0]
20001642:	0033      	movs	r3, r6
20001644:	60bb      	str	r3, [r7, #8]
20001646:	2300      	movs	r3, #0
20001648:	60fb      	str	r3, [r7, #12]
2000164a:	68b9      	ldr	r1, [r7, #8]
2000164c:	68fa      	ldr	r2, [r7, #12]
2000164e:	000b      	movs	r3, r1
20001650:	0e1b      	lsrs	r3, r3, #24
20001652:	0010      	movs	r0, r2
20001654:	0200      	lsls	r0, r0, #8
20001656:	6178      	str	r0, [r7, #20]
20001658:	6978      	ldr	r0, [r7, #20]
2000165a:	4318      	orrs	r0, r3
2000165c:	6178      	str	r0, [r7, #20]
2000165e:	000b      	movs	r3, r1
20001660:	021b      	lsls	r3, r3, #8
20001662:	613b      	str	r3, [r7, #16]
20001664:	0033      	movs	r3, r6
20001666:	603b      	str	r3, [r7, #0]
20001668:	2300      	movs	r3, #0
2000166a:	607b      	str	r3, [r7, #4]
2000166c:	6839      	ldr	r1, [r7, #0]
2000166e:	687a      	ldr	r2, [r7, #4]
20001670:	000b      	movs	r3, r1
20001672:	0e1b      	lsrs	r3, r3, #24
20001674:	0010      	movs	r0, r2
20001676:	0205      	lsls	r5, r0, #8
20001678:	431d      	orrs	r5, r3
2000167a:	000b      	movs	r3, r1
2000167c:	021c      	lsls	r4, r3, #8
2000167e:	0033      	movs	r3, r6
20001680:	015b      	lsls	r3, r3, #5
20001682:	3303      	adds	r3, #3
20001684:	3307      	adds	r3, #7
20001686:	08db      	lsrs	r3, r3, #3
20001688:	00db      	lsls	r3, r3, #3
2000168a:	466a      	mov	r2, sp
2000168c:	1ad3      	subs	r3, r2, r3
2000168e:	469d      	mov	sp, r3
20001690:	466b      	mov	r3, sp
20001692:	3303      	adds	r3, #3
20001694:	089b      	lsrs	r3, r3, #2
20001696:	009b      	lsls	r3, r3, #2
20001698:	4a1d      	ldr	r2, [pc, #116]	; (20001710 <main+0x75c>)
2000169a:	2118      	movs	r1, #24
2000169c:	468c      	mov	ip, r1
2000169e:	44bc      	add	ip, r7
200016a0:	4462      	add	r2, ip
200016a2:	6013      	str	r3, [r2, #0]
	int counter = 0;
200016a4:	2300      	movs	r3, #0
200016a6:	2280      	movs	r2, #128	; 0x80
200016a8:	0112      	lsls	r2, r2, #4
200016aa:	2118      	movs	r1, #24
200016ac:	468c      	mov	ip, r1
200016ae:	44bc      	add	ip, r7
200016b0:	4462      	add	r2, ip
200016b2:	6013      	str	r3, [r2, #0]
	for (int j = 0; j < (sizeof(GPIO_Ports) /sizeof(GPIO_TypeDef *)); j++)
200016b4:	2300      	movs	r3, #0
200016b6:	4a17      	ldr	r2, [pc, #92]	; (20001714 <main+0x760>)
200016b8:	2118      	movs	r1, #24
200016ba:	468c      	mov	ip, r1
200016bc:	44bc      	add	ip, r7
200016be:	4462      	add	r2, ip
200016c0:	6013      	str	r3, [r2, #0]
200016c2:	e0f2      	b.n	200018aa <main+0x8f6>
	{
		for (int i = 0; i < sizeof(GPIO_Pins) / sizeof(uint16_t); i = i + 2)
200016c4:	2300      	movs	r3, #0
200016c6:	22ff      	movs	r2, #255	; 0xff
200016c8:	00d2      	lsls	r2, r2, #3
200016ca:	2118      	movs	r1, #24
200016cc:	468c      	mov	ip, r1
200016ce:	44bc      	add	ip, r7
200016d0:	4462      	add	r2, ip
200016d2:	6013      	str	r3, [r2, #0]
200016d4:	e0d4      	b.n	20001880 <main+0x8cc>
200016d6:	46c0      	nop			; (mov r8, r8)
200016d8:	fffff7f0 			; <UNDEFINED> instruction: 0xfffff7f0
200016dc:	fffffcd0 			; <UNDEFINED> instruction: 0xfffffcd0
200016e0:	fffffcb0 			; <UNDEFINED> instruction: 0xfffffcb0
200016e4:	fffffc90 			; <UNDEFINED> instruction: 0xfffffc90
200016e8:	fffffc70 			; <UNDEFINED> instruction: 0xfffffc70
200016ec:	fffffc50 			; <UNDEFINED> instruction: 0xfffffc50
200016f0:	fffffc30 			; <UNDEFINED> instruction: 0xfffffc30
200016f4:	fffffc10 			; <UNDEFINED> instruction: 0xfffffc10
200016f8:	fffffbf0 			; <UNDEFINED> instruction: 0xfffffbf0
200016fc:	00000804 	andeq	r0, r0, r4, lsl #16
20001700:	00000808 	andeq	r0, r0, r8, lsl #16
20001704:	0000080c 	andeq	r0, r0, ip, lsl #16
20001708:	20003070 	andcs	r3, r0, r0, ror r0
2000170c:	20003050 	andcs	r3, r0, r0, asr r0
20001710:	000007e4 	andeq	r0, r0, r4, ror #15
20001714:	000007fc 	strdeq	r0, [r0], -ip
		{
			if(!GPIO_ReadInputDataBit(GPIO_Ports[j], GPIO_Pins[i])){
20001718:	4bef      	ldr	r3, [pc, #956]	; (20001ad8 <main+0xb24>)
2000171a:	4af0      	ldr	r2, [pc, #960]	; (20001adc <main+0xb28>)
2000171c:	2118      	movs	r1, #24
2000171e:	468c      	mov	ip, r1
20001720:	44bc      	add	ip, r7
20001722:	4462      	add	r2, ip
20001724:	6812      	ldr	r2, [r2, #0]
20001726:	0092      	lsls	r2, r2, #2
20001728:	58d0      	ldr	r0, [r2, r3]
2000172a:	4bed      	ldr	r3, [pc, #948]	; (20001ae0 <main+0xb2c>)
2000172c:	22ff      	movs	r2, #255	; 0xff
2000172e:	00d2      	lsls	r2, r2, #3
20001730:	2118      	movs	r1, #24
20001732:	468c      	mov	ip, r1
20001734:	44bc      	add	ip, r7
20001736:	4462      	add	r2, ip
20001738:	6812      	ldr	r2, [r2, #0]
2000173a:	0052      	lsls	r2, r2, #1
2000173c:	5ad3      	ldrh	r3, [r2, r3]
2000173e:	0019      	movs	r1, r3
20001740:	f000 fc61 	bl	20002006 <GPIO_ReadInputDataBit>
20001744:	1e03      	subs	r3, r0, #0
20001746:	d000      	beq.n	2000174a <main+0x796>
20001748:	e08e      	b.n	20001868 <main+0x8b4>
				all_doors[counter].GPIO_read = GPIO_Pins[i];
2000174a:	4be5      	ldr	r3, [pc, #916]	; (20001ae0 <main+0xb2c>)
2000174c:	25ff      	movs	r5, #255	; 0xff
2000174e:	00ed      	lsls	r5, r5, #3
20001750:	2018      	movs	r0, #24
20001752:	183a      	adds	r2, r7, r0
20001754:	1952      	adds	r2, r2, r5
20001756:	6812      	ldr	r2, [r2, #0]
20001758:	0052      	lsls	r2, r2, #1
2000175a:	5ad3      	ldrh	r3, [r2, r3]
2000175c:	0019      	movs	r1, r3
2000175e:	4be1      	ldr	r3, [pc, #900]	; (20001ae4 <main+0xb30>)
20001760:	2481      	movs	r4, #129	; 0x81
20001762:	0124      	lsls	r4, r4, #4
20001764:	183a      	adds	r2, r7, r0
20001766:	1912      	adds	r2, r2, r4
20001768:	18d2      	adds	r2, r2, r3
2000176a:	2080      	movs	r0, #128	; 0x80
2000176c:	0100      	lsls	r0, r0, #4
2000176e:	2318      	movs	r3, #24
20001770:	18fb      	adds	r3, r7, r3
20001772:	181b      	adds	r3, r3, r0
20001774:	681b      	ldr	r3, [r3, #0]
20001776:	015b      	lsls	r3, r3, #5
20001778:	18d3      	adds	r3, r2, r3
2000177a:	3314      	adds	r3, #20
2000177c:	6019      	str	r1, [r3, #0]
				all_doors[counter].GPIO_lamp = GPIO_Pins[i+1];
2000177e:	2318      	movs	r3, #24
20001780:	18fb      	adds	r3, r7, r3
20001782:	195b      	adds	r3, r3, r5
20001784:	681b      	ldr	r3, [r3, #0]
20001786:	1c5a      	adds	r2, r3, #1
20001788:	4bd5      	ldr	r3, [pc, #852]	; (20001ae0 <main+0xb2c>)
2000178a:	0052      	lsls	r2, r2, #1
2000178c:	5ad3      	ldrh	r3, [r2, r3]
2000178e:	0019      	movs	r1, r3
20001790:	4bd4      	ldr	r3, [pc, #848]	; (20001ae4 <main+0xb30>)
20001792:	0025      	movs	r5, r4
20001794:	2418      	movs	r4, #24
20001796:	193a      	adds	r2, r7, r4
20001798:	1952      	adds	r2, r2, r5
2000179a:	18d2      	adds	r2, r2, r3
2000179c:	193b      	adds	r3, r7, r4
2000179e:	181b      	adds	r3, r3, r0
200017a0:	681b      	ldr	r3, [r3, #0]
200017a2:	015b      	lsls	r3, r3, #5
200017a4:	18d3      	adds	r3, r2, r3
200017a6:	3310      	adds	r3, #16
200017a8:	6019      	str	r1, [r3, #0]
				all_doors[counter].controlbits = 0;
200017aa:	4bce      	ldr	r3, [pc, #824]	; (20001ae4 <main+0xb30>)
200017ac:	0021      	movs	r1, r4
200017ae:	187a      	adds	r2, r7, r1
200017b0:	1952      	adds	r2, r2, r5
200017b2:	18d2      	adds	r2, r2, r3
200017b4:	187b      	adds	r3, r7, r1
200017b6:	181b      	adds	r3, r3, r0
200017b8:	681b      	ldr	r3, [r3, #0]
200017ba:	015b      	lsls	r3, r3, #5
200017bc:	18d3      	adds	r3, r2, r3
200017be:	3304      	adds	r3, #4
200017c0:	2200      	movs	r2, #0
200017c2:	601a      	str	r2, [r3, #0]
				all_doors[counter].time_larm = 0;
200017c4:	4bc7      	ldr	r3, [pc, #796]	; (20001ae4 <main+0xb30>)
200017c6:	187a      	adds	r2, r7, r1
200017c8:	1952      	adds	r2, r2, r5
200017ca:	18d2      	adds	r2, r2, r3
200017cc:	187b      	adds	r3, r7, r1
200017ce:	181b      	adds	r3, r3, r0
200017d0:	681b      	ldr	r3, [r3, #0]
200017d2:	015b      	lsls	r3, r3, #5
200017d4:	18d3      	adds	r3, r2, r3
200017d6:	3308      	adds	r3, #8
200017d8:	2200      	movs	r2, #0
200017da:	701a      	strb	r2, [r3, #0]
				all_doors[counter].time_central_larm = 2;
200017dc:	4bc1      	ldr	r3, [pc, #772]	; (20001ae4 <main+0xb30>)
200017de:	187a      	adds	r2, r7, r1
200017e0:	1952      	adds	r2, r2, r5
200017e2:	18d2      	adds	r2, r2, r3
200017e4:	187b      	adds	r3, r7, r1
200017e6:	181b      	adds	r3, r3, r0
200017e8:	681b      	ldr	r3, [r3, #0]
200017ea:	015b      	lsls	r3, r3, #5
200017ec:	18d3      	adds	r3, r2, r3
200017ee:	3309      	adds	r3, #9
200017f0:	2202      	movs	r2, #2
200017f2:	701a      	strb	r2, [r3, #0]
				all_doors[counter].GPIO_type = GPIO_Ports[j];
200017f4:	4bb8      	ldr	r3, [pc, #736]	; (20001ad8 <main+0xb24>)
200017f6:	4ab9      	ldr	r2, [pc, #740]	; (20001adc <main+0xb28>)
200017f8:	2418      	movs	r4, #24
200017fa:	46a4      	mov	ip, r4
200017fc:	44bc      	add	ip, r7
200017fe:	4462      	add	r2, ip
20001800:	6812      	ldr	r2, [r2, #0]
20001802:	0092      	lsls	r2, r2, #2
20001804:	58d2      	ldr	r2, [r2, r3]
20001806:	4bb7      	ldr	r3, [pc, #732]	; (20001ae4 <main+0xb30>)
20001808:	187c      	adds	r4, r7, r1
2000180a:	1961      	adds	r1, r4, r5
2000180c:	18c9      	adds	r1, r1, r3
2000180e:	0004      	movs	r4, r0
20001810:	2318      	movs	r3, #24
20001812:	18fb      	adds	r3, r7, r3
20001814:	181b      	adds	r3, r3, r0
20001816:	681b      	ldr	r3, [r3, #0]
20001818:	015b      	lsls	r3, r3, #5
2000181a:	18cb      	adds	r3, r1, r3
2000181c:	331c      	adds	r3, #28
2000181e:	601a      	str	r2, [r3, #0]
				active_doors[counter] = all_doors[counter];
20001820:	4bb1      	ldr	r3, [pc, #708]	; (20001ae8 <main+0xb34>)
20001822:	2218      	movs	r2, #24
20001824:	4694      	mov	ip, r2
20001826:	44bc      	add	ip, r7
20001828:	4463      	add	r3, ip
2000182a:	6818      	ldr	r0, [r3, #0]
2000182c:	2118      	movs	r1, #24
2000182e:	187b      	adds	r3, r7, r1
20001830:	191b      	adds	r3, r3, r4
20001832:	681b      	ldr	r3, [r3, #0]
20001834:	015b      	lsls	r3, r3, #5
20001836:	4aab      	ldr	r2, [pc, #684]	; (20001ae4 <main+0xb30>)
20001838:	1879      	adds	r1, r7, r1
2000183a:	1949      	adds	r1, r1, r5
2000183c:	1889      	adds	r1, r1, r2
2000183e:	2218      	movs	r2, #24
20001840:	18bd      	adds	r5, r7, r2
20001842:	192a      	adds	r2, r5, r4
20001844:	6812      	ldr	r2, [r2, #0]
20001846:	0152      	lsls	r2, r2, #5
20001848:	18c3      	adds	r3, r0, r3
2000184a:	188a      	adds	r2, r1, r2
2000184c:	ca23      	ldmia	r2!, {r0, r1, r5}
2000184e:	c323      	stmia	r3!, {r0, r1, r5}
20001850:	ca23      	ldmia	r2!, {r0, r1, r5}
20001852:	c323      	stmia	r3!, {r0, r1, r5}
20001854:	ca03      	ldmia	r2!, {r0, r1}
20001856:	c303      	stmia	r3!, {r0, r1}
				counter++;
20001858:	2218      	movs	r2, #24
2000185a:	18bb      	adds	r3, r7, r2
2000185c:	191b      	adds	r3, r3, r4
2000185e:	681b      	ldr	r3, [r3, #0]
20001860:	3301      	adds	r3, #1
20001862:	18ba      	adds	r2, r7, r2
20001864:	1912      	adds	r2, r2, r4
20001866:	6013      	str	r3, [r2, #0]
		for (int i = 0; i < sizeof(GPIO_Pins) / sizeof(uint16_t); i = i + 2)
20001868:	22ff      	movs	r2, #255	; 0xff
2000186a:	00d2      	lsls	r2, r2, #3
2000186c:	2318      	movs	r3, #24
2000186e:	18fb      	adds	r3, r7, r3
20001870:	189b      	adds	r3, r3, r2
20001872:	681b      	ldr	r3, [r3, #0]
20001874:	3302      	adds	r3, #2
20001876:	2118      	movs	r1, #24
20001878:	468c      	mov	ip, r1
2000187a:	44bc      	add	ip, r7
2000187c:	4462      	add	r2, ip
2000187e:	6013      	str	r3, [r2, #0]
20001880:	23ff      	movs	r3, #255	; 0xff
20001882:	00db      	lsls	r3, r3, #3
20001884:	2218      	movs	r2, #24
20001886:	4694      	mov	ip, r2
20001888:	44bc      	add	ip, r7
2000188a:	4463      	add	r3, ip
2000188c:	681b      	ldr	r3, [r3, #0]
2000188e:	2b0f      	cmp	r3, #15
20001890:	d800      	bhi.n	20001894 <main+0x8e0>
20001892:	e741      	b.n	20001718 <main+0x764>
	for (int j = 0; j < (sizeof(GPIO_Ports) /sizeof(GPIO_TypeDef *)); j++)
20001894:	4a91      	ldr	r2, [pc, #580]	; (20001adc <main+0xb28>)
20001896:	2318      	movs	r3, #24
20001898:	18fb      	adds	r3, r7, r3
2000189a:	189b      	adds	r3, r3, r2
2000189c:	681b      	ldr	r3, [r3, #0]
2000189e:	3301      	adds	r3, #1
200018a0:	2118      	movs	r1, #24
200018a2:	468c      	mov	ip, r1
200018a4:	44bc      	add	ip, r7
200018a6:	4462      	add	r2, ip
200018a8:	6013      	str	r3, [r2, #0]
200018aa:	4b8c      	ldr	r3, [pc, #560]	; (20001adc <main+0xb28>)
200018ac:	2218      	movs	r2, #24
200018ae:	4694      	mov	ip, r2
200018b0:	44bc      	add	ip, r7
200018b2:	4463      	add	r3, ip
200018b4:	681b      	ldr	r3, [r3, #0]
200018b6:	2b03      	cmp	r3, #3
200018b8:	d800      	bhi.n	200018bc <main+0x908>
200018ba:	e703      	b.n	200016c4 <main+0x710>
			}
		}
	}
	for (int i = 0; i < sizeof(active_doors)/sizeof(active_doors[0]); i++) //CHRISTMAST LIGHTS FTW
200018bc:	2300      	movs	r3, #0
200018be:	4a8b      	ldr	r2, [pc, #556]	; (20001aec <main+0xb38>)
200018c0:	2118      	movs	r1, #24
200018c2:	468c      	mov	ip, r1
200018c4:	44bc      	add	ip, r7
200018c6:	4462      	add	r2, ip
200018c8:	6013      	str	r3, [r2, #0]
200018ca:	e054      	b.n	20001976 <main+0x9c2>
	{
		GPIO_SetBits(active_doors[i].GPIO_type, active_doors[i].GPIO_lamp);
200018cc:	4986      	ldr	r1, [pc, #536]	; (20001ae8 <main+0xb34>)
200018ce:	2518      	movs	r5, #24
200018d0:	197b      	adds	r3, r7, r5
200018d2:	185b      	adds	r3, r3, r1
200018d4:	681a      	ldr	r2, [r3, #0]
200018d6:	4c85      	ldr	r4, [pc, #532]	; (20001aec <main+0xb38>)
200018d8:	197b      	adds	r3, r7, r5
200018da:	191b      	adds	r3, r3, r4
200018dc:	681b      	ldr	r3, [r3, #0]
200018de:	015b      	lsls	r3, r3, #5
200018e0:	18d3      	adds	r3, r2, r3
200018e2:	331c      	adds	r3, #28
200018e4:	6818      	ldr	r0, [r3, #0]
200018e6:	197b      	adds	r3, r7, r5
200018e8:	185b      	adds	r3, r3, r1
200018ea:	681a      	ldr	r2, [r3, #0]
200018ec:	197b      	adds	r3, r7, r5
200018ee:	191b      	adds	r3, r3, r4
200018f0:	681b      	ldr	r3, [r3, #0]
200018f2:	015b      	lsls	r3, r3, #5
200018f4:	18d3      	adds	r3, r2, r3
200018f6:	3310      	adds	r3, #16
200018f8:	681b      	ldr	r3, [r3, #0]
200018fa:	b29b      	uxth	r3, r3
200018fc:	0019      	movs	r1, r3
200018fe:	f000 fbda 	bl	200020b6 <GPIO_SetBits>
		int waitde = msTicks + 100;
20001902:	4b7b      	ldr	r3, [pc, #492]	; (20001af0 <main+0xb3c>)
20001904:	681b      	ldr	r3, [r3, #0]
20001906:	3364      	adds	r3, #100	; 0x64
20001908:	22fc      	movs	r2, #252	; 0xfc
2000190a:	00d2      	lsls	r2, r2, #3
2000190c:	2118      	movs	r1, #24
2000190e:	468c      	mov	ip, r1
20001910:	44bc      	add	ip, r7
20001912:	4462      	add	r2, ip
20001914:	6013      	str	r3, [r2, #0]
		while (msTicks < waitde);
20001916:	46c0      	nop			; (mov r8, r8)
20001918:	4b75      	ldr	r3, [pc, #468]	; (20001af0 <main+0xb3c>)
2000191a:	681a      	ldr	r2, [r3, #0]
2000191c:	23fc      	movs	r3, #252	; 0xfc
2000191e:	00db      	lsls	r3, r3, #3
20001920:	2118      	movs	r1, #24
20001922:	468c      	mov	ip, r1
20001924:	44bc      	add	ip, r7
20001926:	4463      	add	r3, ip
20001928:	681b      	ldr	r3, [r3, #0]
2000192a:	429a      	cmp	r2, r3
2000192c:	d3f4      	bcc.n	20001918 <main+0x964>
		GPIO_ResetBits(active_doors[i].GPIO_type, active_doors[i].GPIO_lamp);
2000192e:	4c6e      	ldr	r4, [pc, #440]	; (20001ae8 <main+0xb34>)
20001930:	2518      	movs	r5, #24
20001932:	197b      	adds	r3, r7, r5
20001934:	191b      	adds	r3, r3, r4
20001936:	681a      	ldr	r2, [r3, #0]
20001938:	496c      	ldr	r1, [pc, #432]	; (20001aec <main+0xb38>)
2000193a:	197b      	adds	r3, r7, r5
2000193c:	185b      	adds	r3, r3, r1
2000193e:	681b      	ldr	r3, [r3, #0]
20001940:	015b      	lsls	r3, r3, #5
20001942:	18d3      	adds	r3, r2, r3
20001944:	331c      	adds	r3, #28
20001946:	6818      	ldr	r0, [r3, #0]
20001948:	197b      	adds	r3, r7, r5
2000194a:	191b      	adds	r3, r3, r4
2000194c:	681a      	ldr	r2, [r3, #0]
2000194e:	000c      	movs	r4, r1
20001950:	197b      	adds	r3, r7, r5
20001952:	185b      	adds	r3, r3, r1
20001954:	681b      	ldr	r3, [r3, #0]
20001956:	015b      	lsls	r3, r3, #5
20001958:	18d3      	adds	r3, r2, r3
2000195a:	3310      	adds	r3, #16
2000195c:	681b      	ldr	r3, [r3, #0]
2000195e:	b29b      	uxth	r3, r3
20001960:	0019      	movs	r1, r3
20001962:	f000 fbb7 	bl	200020d4 <GPIO_ResetBits>
	for (int i = 0; i < sizeof(active_doors)/sizeof(active_doors[0]); i++) //CHRISTMAST LIGHTS FTW
20001966:	0021      	movs	r1, r4
20001968:	197b      	adds	r3, r7, r5
2000196a:	185b      	adds	r3, r3, r1
2000196c:	681b      	ldr	r3, [r3, #0]
2000196e:	3301      	adds	r3, #1
20001970:	197a      	adds	r2, r7, r5
20001972:	1852      	adds	r2, r2, r1
20001974:	6013      	str	r3, [r2, #0]
20001976:	0033      	movs	r3, r6
20001978:	015b      	lsls	r3, r3, #5
2000197a:	095a      	lsrs	r2, r3, #5
2000197c:	4b5b      	ldr	r3, [pc, #364]	; (20001aec <main+0xb38>)
2000197e:	2118      	movs	r1, #24
20001980:	468c      	mov	ip, r1
20001982:	44bc      	add	ip, r7
20001984:	4463      	add	r3, ip
20001986:	681b      	ldr	r3, [r3, #0]
20001988:	429a      	cmp	r2, r3
2000198a:	d89f      	bhi.n	200018cc <main+0x918>
		
	}
	GPIO_SetBits(GPIOB, GPIO_Pin_2);
2000198c:	4b59      	ldr	r3, [pc, #356]	; (20001af4 <main+0xb40>)
2000198e:	2104      	movs	r1, #4
20001990:	0018      	movs	r0, r3
20001992:	f000 fb90 	bl	200020b6 <GPIO_SetBits>
	//active_doors[2].controlbits |= 4;
	while (1)
	{
		for (int i = 0; i < sizeof(active_doors)/sizeof(active_doors[0]); i++)
20001996:	2300      	movs	r3, #0
20001998:	22fe      	movs	r2, #254	; 0xfe
2000199a:	00d2      	lsls	r2, r2, #3
2000199c:	2118      	movs	r1, #24
2000199e:	468c      	mov	ip, r1
200019a0:	44bc      	add	ip, r7
200019a2:	4462      	add	r2, ip
200019a4:	6013      	str	r3, [r2, #0]
200019a6:	e197      	b.n	20001cd8 <main+0xd24>
		{
			if (!(active_doors[i].controlbits & 4))
200019a8:	4b4f      	ldr	r3, [pc, #316]	; (20001ae8 <main+0xb34>)
200019aa:	2218      	movs	r2, #24
200019ac:	4694      	mov	ip, r2
200019ae:	44bc      	add	ip, r7
200019b0:	4463      	add	r3, ip
200019b2:	681a      	ldr	r2, [r3, #0]
200019b4:	23fe      	movs	r3, #254	; 0xfe
200019b6:	00db      	lsls	r3, r3, #3
200019b8:	2118      	movs	r1, #24
200019ba:	468c      	mov	ip, r1
200019bc:	44bc      	add	ip, r7
200019be:	4463      	add	r3, ip
200019c0:	681b      	ldr	r3, [r3, #0]
200019c2:	015b      	lsls	r3, r3, #5
200019c4:	18d3      	adds	r3, r2, r3
200019c6:	3304      	adds	r3, #4
200019c8:	681b      	ldr	r3, [r3, #0]
200019ca:	2204      	movs	r2, #4
200019cc:	4013      	ands	r3, r2
200019ce:	d000      	beq.n	200019d2 <main+0xa1e>
200019d0:	e176      	b.n	20001cc0 <main+0xd0c>
				{
				if (!GPIO_ReadInputDataBit(active_doors[i].GPIO_type, active_doors[i].GPIO_read)){ //GPIO pinnen är noll ifall dörren är stängd därför !
200019d2:	4945      	ldr	r1, [pc, #276]	; (20001ae8 <main+0xb34>)
200019d4:	2518      	movs	r5, #24
200019d6:	197b      	adds	r3, r7, r5
200019d8:	185b      	adds	r3, r3, r1
200019da:	681a      	ldr	r2, [r3, #0]
200019dc:	24fe      	movs	r4, #254	; 0xfe
200019de:	00e4      	lsls	r4, r4, #3
200019e0:	197b      	adds	r3, r7, r5
200019e2:	191b      	adds	r3, r3, r4
200019e4:	681b      	ldr	r3, [r3, #0]
200019e6:	015b      	lsls	r3, r3, #5
200019e8:	18d3      	adds	r3, r2, r3
200019ea:	331c      	adds	r3, #28
200019ec:	6818      	ldr	r0, [r3, #0]
200019ee:	197b      	adds	r3, r7, r5
200019f0:	185b      	adds	r3, r3, r1
200019f2:	681a      	ldr	r2, [r3, #0]
200019f4:	197b      	adds	r3, r7, r5
200019f6:	191b      	adds	r3, r3, r4
200019f8:	681b      	ldr	r3, [r3, #0]
200019fa:	015b      	lsls	r3, r3, #5
200019fc:	18d3      	adds	r3, r2, r3
200019fe:	3314      	adds	r3, #20
20001a00:	681b      	ldr	r3, [r3, #0]
20001a02:	b29b      	uxth	r3, r3
20001a04:	0019      	movs	r1, r3
20001a06:	f000 fafe 	bl	20002006 <GPIO_ReadInputDataBit>
20001a0a:	1e03      	subs	r3, r0, #0
20001a0c:	d11a      	bne.n	20001a44 <main+0xa90>
					active_doors[i].controlbits &= 0xFFFC; //Nollställer kontrollbiten för ifall en dörr är öppen och spam kontrollbiten för 
20001a0e:	4936      	ldr	r1, [pc, #216]	; (20001ae8 <main+0xb34>)
20001a10:	2418      	movs	r4, #24
20001a12:	193b      	adds	r3, r7, r4
20001a14:	185b      	adds	r3, r3, r1
20001a16:	681a      	ldr	r2, [r3, #0]
20001a18:	20fe      	movs	r0, #254	; 0xfe
20001a1a:	00c0      	lsls	r0, r0, #3
20001a1c:	193b      	adds	r3, r7, r4
20001a1e:	181b      	adds	r3, r3, r0
20001a20:	681b      	ldr	r3, [r3, #0]
20001a22:	015b      	lsls	r3, r3, #5
20001a24:	18d3      	adds	r3, r2, r3
20001a26:	3304      	adds	r3, #4
20001a28:	681b      	ldr	r3, [r3, #0]
20001a2a:	4a33      	ldr	r2, [pc, #204]	; (20001af8 <main+0xb44>)
20001a2c:	401a      	ands	r2, r3
20001a2e:	193b      	adds	r3, r7, r4
20001a30:	185b      	adds	r3, r3, r1
20001a32:	6819      	ldr	r1, [r3, #0]
20001a34:	193b      	adds	r3, r7, r4
20001a36:	181b      	adds	r3, r3, r0
20001a38:	681b      	ldr	r3, [r3, #0]
20001a3a:	015b      	lsls	r3, r3, #5
20001a3c:	18cb      	adds	r3, r1, r3
20001a3e:	3304      	adds	r3, #4
20001a40:	601a      	str	r2, [r3, #0]
20001a42:	e040      	b.n	20001ac6 <main+0xb12>
					//att skicka medelande till centralenheten, när den detekteras som stängd
					
				}
				else{
					if (!active_doors[i].controlbits & 1) // Kollar så att dörren inte larmar sen innan så larmtick inte uppdateras hela tiden
20001a44:	4b28      	ldr	r3, [pc, #160]	; (20001ae8 <main+0xb34>)
20001a46:	2218      	movs	r2, #24
20001a48:	4694      	mov	ip, r2
20001a4a:	44bc      	add	ip, r7
20001a4c:	4463      	add	r3, ip
20001a4e:	681a      	ldr	r2, [r3, #0]
20001a50:	23fe      	movs	r3, #254	; 0xfe
20001a52:	00db      	lsls	r3, r3, #3
20001a54:	2118      	movs	r1, #24
20001a56:	468c      	mov	ip, r1
20001a58:	44bc      	add	ip, r7
20001a5a:	4463      	add	r3, ip
20001a5c:	681b      	ldr	r3, [r3, #0]
20001a5e:	015b      	lsls	r3, r3, #5
20001a60:	18d3      	adds	r3, r2, r3
20001a62:	3304      	adds	r3, #4
20001a64:	681b      	ldr	r3, [r3, #0]
20001a66:	2b00      	cmp	r3, #0
20001a68:	d113      	bne.n	20001a92 <main+0xade>
					{
						active_doors[i].larmTick = msTicks;
20001a6a:	4b21      	ldr	r3, [pc, #132]	; (20001af0 <main+0xb3c>)
20001a6c:	681b      	ldr	r3, [r3, #0]
20001a6e:	0019      	movs	r1, r3
20001a70:	4b1d      	ldr	r3, [pc, #116]	; (20001ae8 <main+0xb34>)
20001a72:	2218      	movs	r2, #24
20001a74:	4694      	mov	ip, r2
20001a76:	44bc      	add	ip, r7
20001a78:	4463      	add	r3, ip
20001a7a:	681a      	ldr	r2, [r3, #0]
20001a7c:	23fe      	movs	r3, #254	; 0xfe
20001a7e:	00db      	lsls	r3, r3, #3
20001a80:	2018      	movs	r0, #24
20001a82:	4684      	mov	ip, r0
20001a84:	44bc      	add	ip, r7
20001a86:	4463      	add	r3, ip
20001a88:	681b      	ldr	r3, [r3, #0]
20001a8a:	015b      	lsls	r3, r3, #5
20001a8c:	18d3      	adds	r3, r2, r3
20001a8e:	3318      	adds	r3, #24
20001a90:	6019      	str	r1, [r3, #0]
					}
					active_doors[i].controlbits |= 1; // sätter dörrens larm kontrollbit till 1.
20001a92:	4915      	ldr	r1, [pc, #84]	; (20001ae8 <main+0xb34>)
20001a94:	2418      	movs	r4, #24
20001a96:	193b      	adds	r3, r7, r4
20001a98:	185b      	adds	r3, r3, r1
20001a9a:	681a      	ldr	r2, [r3, #0]
20001a9c:	20fe      	movs	r0, #254	; 0xfe
20001a9e:	00c0      	lsls	r0, r0, #3
20001aa0:	193b      	adds	r3, r7, r4
20001aa2:	181b      	adds	r3, r3, r0
20001aa4:	681b      	ldr	r3, [r3, #0]
20001aa6:	015b      	lsls	r3, r3, #5
20001aa8:	18d3      	adds	r3, r2, r3
20001aaa:	3304      	adds	r3, #4
20001aac:	681b      	ldr	r3, [r3, #0]
20001aae:	2201      	movs	r2, #1
20001ab0:	431a      	orrs	r2, r3
20001ab2:	193b      	adds	r3, r7, r4
20001ab4:	185b      	adds	r3, r3, r1
20001ab6:	6819      	ldr	r1, [r3, #0]
20001ab8:	193b      	adds	r3, r7, r4
20001aba:	181b      	adds	r3, r3, r0
20001abc:	681b      	ldr	r3, [r3, #0]
20001abe:	015b      	lsls	r3, r3, #5
20001ac0:	18cb      	adds	r3, r1, r3
20001ac2:	3304      	adds	r3, #4
20001ac4:	601a      	str	r2, [r3, #0]
				}
				for (int i = 0; i < sizeof(active_doors)/sizeof(active_doors[0]); i++)
20001ac6:	2300      	movs	r3, #0
20001ac8:	4a0c      	ldr	r2, [pc, #48]	; (20001afc <main+0xb48>)
20001aca:	2118      	movs	r1, #24
20001acc:	468c      	mov	ip, r1
20001ace:	44bc      	add	ip, r7
20001ad0:	4462      	add	r2, ip
20001ad2:	6013      	str	r3, [r2, #0]
20001ad4:	e0e8      	b.n	20001ca8 <main+0xcf4>
20001ad6:	46c0      	nop			; (mov r8, r8)
20001ad8:	20003070 	andcs	r3, r0, r0, ror r0
20001adc:	000007fc 	strdeq	r0, [r0], -ip
20001ae0:	20003050 	andcs	r3, r0, r0, asr r0
20001ae4:	fffff7f0 			; <UNDEFINED> instruction: 0xfffff7f0
20001ae8:	000007e4 	andeq	r0, r0, r4, ror #15
20001aec:	000007f4 	strdeq	r0, [r0], -r4
20001af0:	2000303c 	andcs	r3, r0, ip, lsr r0
20001af4:	40020400 	andmi	r0, r2, r0, lsl #8
20001af8:	0000fffc 	strdeq	pc, [r0], -ip
20001afc:	000007ec 	andeq	r0, r0, ip, ror #15
				{
					if (active_doors[i].controlbits & 1 && msTicks > (active_doors[i].larmTick + 1000 * 10 * active_doors[i].time_larm))
20001b00:	4b7c      	ldr	r3, [pc, #496]	; (20001cf4 <main+0xd40>)
20001b02:	2218      	movs	r2, #24
20001b04:	4694      	mov	ip, r2
20001b06:	44bc      	add	ip, r7
20001b08:	4463      	add	r3, ip
20001b0a:	681a      	ldr	r2, [r3, #0]
20001b0c:	4b7a      	ldr	r3, [pc, #488]	; (20001cf8 <main+0xd44>)
20001b0e:	2118      	movs	r1, #24
20001b10:	468c      	mov	ip, r1
20001b12:	44bc      	add	ip, r7
20001b14:	4463      	add	r3, ip
20001b16:	681b      	ldr	r3, [r3, #0]
20001b18:	015b      	lsls	r3, r3, #5
20001b1a:	18d3      	adds	r3, r2, r3
20001b1c:	3304      	adds	r3, #4
20001b1e:	681b      	ldr	r3, [r3, #0]
20001b20:	2201      	movs	r2, #1
20001b22:	4013      	ands	r3, r2
20001b24:	d03b      	beq.n	20001b9e <main+0xbea>
20001b26:	4973      	ldr	r1, [pc, #460]	; (20001cf4 <main+0xd40>)
20001b28:	2418      	movs	r4, #24
20001b2a:	193b      	adds	r3, r7, r4
20001b2c:	185b      	adds	r3, r3, r1
20001b2e:	681a      	ldr	r2, [r3, #0]
20001b30:	4871      	ldr	r0, [pc, #452]	; (20001cf8 <main+0xd44>)
20001b32:	193b      	adds	r3, r7, r4
20001b34:	181b      	adds	r3, r3, r0
20001b36:	681b      	ldr	r3, [r3, #0]
20001b38:	015b      	lsls	r3, r3, #5
20001b3a:	18d3      	adds	r3, r2, r3
20001b3c:	3318      	adds	r3, #24
20001b3e:	681a      	ldr	r2, [r3, #0]
20001b40:	193b      	adds	r3, r7, r4
20001b42:	185b      	adds	r3, r3, r1
20001b44:	6819      	ldr	r1, [r3, #0]
20001b46:	193b      	adds	r3, r7, r4
20001b48:	181b      	adds	r3, r3, r0
20001b4a:	681b      	ldr	r3, [r3, #0]
20001b4c:	015b      	lsls	r3, r3, #5
20001b4e:	18cb      	adds	r3, r1, r3
20001b50:	3308      	adds	r3, #8
20001b52:	781b      	ldrb	r3, [r3, #0]
20001b54:	0019      	movs	r1, r3
20001b56:	4b69      	ldr	r3, [pc, #420]	; (20001cfc <main+0xd48>)
20001b58:	434b      	muls	r3, r1
20001b5a:	18d3      	adds	r3, r2, r3
20001b5c:	001a      	movs	r2, r3
20001b5e:	4b68      	ldr	r3, [pc, #416]	; (20001d00 <main+0xd4c>)
20001b60:	681b      	ldr	r3, [r3, #0]
20001b62:	429a      	cmp	r2, r3
20001b64:	d21b      	bcs.n	20001b9e <main+0xbea>
					{
						GPIO_SetBits(active_doors[i].GPIO_type, active_doors[i].GPIO_lamp); // tänder lampan ifall tiden för att dörren ska larma har gått
20001b66:	4963      	ldr	r1, [pc, #396]	; (20001cf4 <main+0xd40>)
20001b68:	2518      	movs	r5, #24
20001b6a:	197b      	adds	r3, r7, r5
20001b6c:	185b      	adds	r3, r3, r1
20001b6e:	681a      	ldr	r2, [r3, #0]
20001b70:	4c61      	ldr	r4, [pc, #388]	; (20001cf8 <main+0xd44>)
20001b72:	197b      	adds	r3, r7, r5
20001b74:	191b      	adds	r3, r3, r4
20001b76:	681b      	ldr	r3, [r3, #0]
20001b78:	015b      	lsls	r3, r3, #5
20001b7a:	18d3      	adds	r3, r2, r3
20001b7c:	331c      	adds	r3, #28
20001b7e:	6818      	ldr	r0, [r3, #0]
20001b80:	197b      	adds	r3, r7, r5
20001b82:	185b      	adds	r3, r3, r1
20001b84:	681a      	ldr	r2, [r3, #0]
20001b86:	197b      	adds	r3, r7, r5
20001b88:	191b      	adds	r3, r3, r4
20001b8a:	681b      	ldr	r3, [r3, #0]
20001b8c:	015b      	lsls	r3, r3, #5
20001b8e:	18d3      	adds	r3, r2, r3
20001b90:	3310      	adds	r3, #16
20001b92:	681b      	ldr	r3, [r3, #0]
20001b94:	b29b      	uxth	r3, r3
20001b96:	0019      	movs	r1, r3
20001b98:	f000 fa8d 	bl	200020b6 <GPIO_SetBits>
20001b9c:	e01a      	b.n	20001bd4 <main+0xc20>
					}
					else
					{
						GPIO_ResetBits(active_doors[i].GPIO_type, active_doors[i].GPIO_lamp);	// släcker lampan annars
20001b9e:	4955      	ldr	r1, [pc, #340]	; (20001cf4 <main+0xd40>)
20001ba0:	2518      	movs	r5, #24
20001ba2:	197b      	adds	r3, r7, r5
20001ba4:	185b      	adds	r3, r3, r1
20001ba6:	681a      	ldr	r2, [r3, #0]
20001ba8:	4c53      	ldr	r4, [pc, #332]	; (20001cf8 <main+0xd44>)
20001baa:	197b      	adds	r3, r7, r5
20001bac:	191b      	adds	r3, r3, r4
20001bae:	681b      	ldr	r3, [r3, #0]
20001bb0:	015b      	lsls	r3, r3, #5
20001bb2:	18d3      	adds	r3, r2, r3
20001bb4:	331c      	adds	r3, #28
20001bb6:	6818      	ldr	r0, [r3, #0]
20001bb8:	197b      	adds	r3, r7, r5
20001bba:	185b      	adds	r3, r3, r1
20001bbc:	681a      	ldr	r2, [r3, #0]
20001bbe:	197b      	adds	r3, r7, r5
20001bc0:	191b      	adds	r3, r3, r4
20001bc2:	681b      	ldr	r3, [r3, #0]
20001bc4:	015b      	lsls	r3, r3, #5
20001bc6:	18d3      	adds	r3, r2, r3
20001bc8:	3310      	adds	r3, #16
20001bca:	681b      	ldr	r3, [r3, #0]
20001bcc:	b29b      	uxth	r3, r3
20001bce:	0019      	movs	r1, r3
20001bd0:	f000 fa80 	bl	200020d4 <GPIO_ResetBits>
					}
					if (active_doors[i].controlbits & 1 && msTicks > (active_doors[i].larmTick + 1000 * 10 * active_doors[i].time_central_larm) && active_doors[i].controlbits & 2)
20001bd4:	4b47      	ldr	r3, [pc, #284]	; (20001cf4 <main+0xd40>)
20001bd6:	2218      	movs	r2, #24
20001bd8:	4694      	mov	ip, r2
20001bda:	44bc      	add	ip, r7
20001bdc:	4463      	add	r3, ip
20001bde:	681a      	ldr	r2, [r3, #0]
20001be0:	4b45      	ldr	r3, [pc, #276]	; (20001cf8 <main+0xd44>)
20001be2:	2118      	movs	r1, #24
20001be4:	468c      	mov	ip, r1
20001be6:	44bc      	add	ip, r7
20001be8:	4463      	add	r3, ip
20001bea:	681b      	ldr	r3, [r3, #0]
20001bec:	015b      	lsls	r3, r3, #5
20001bee:	18d3      	adds	r3, r2, r3
20001bf0:	3304      	adds	r3, #4
20001bf2:	681b      	ldr	r3, [r3, #0]
20001bf4:	2201      	movs	r2, #1
20001bf6:	4013      	ands	r3, r2
20001bf8:	d04b      	beq.n	20001c92 <main+0xcde>
20001bfa:	493e      	ldr	r1, [pc, #248]	; (20001cf4 <main+0xd40>)
20001bfc:	2418      	movs	r4, #24
20001bfe:	193b      	adds	r3, r7, r4
20001c00:	185b      	adds	r3, r3, r1
20001c02:	681a      	ldr	r2, [r3, #0]
20001c04:	483c      	ldr	r0, [pc, #240]	; (20001cf8 <main+0xd44>)
20001c06:	193b      	adds	r3, r7, r4
20001c08:	181b      	adds	r3, r3, r0
20001c0a:	681b      	ldr	r3, [r3, #0]
20001c0c:	015b      	lsls	r3, r3, #5
20001c0e:	18d3      	adds	r3, r2, r3
20001c10:	3318      	adds	r3, #24
20001c12:	681a      	ldr	r2, [r3, #0]
20001c14:	193b      	adds	r3, r7, r4
20001c16:	185b      	adds	r3, r3, r1
20001c18:	6819      	ldr	r1, [r3, #0]
20001c1a:	193b      	adds	r3, r7, r4
20001c1c:	181b      	adds	r3, r3, r0
20001c1e:	681b      	ldr	r3, [r3, #0]
20001c20:	015b      	lsls	r3, r3, #5
20001c22:	18cb      	adds	r3, r1, r3
20001c24:	3309      	adds	r3, #9
20001c26:	781b      	ldrb	r3, [r3, #0]
20001c28:	0019      	movs	r1, r3
20001c2a:	4b34      	ldr	r3, [pc, #208]	; (20001cfc <main+0xd48>)
20001c2c:	434b      	muls	r3, r1
20001c2e:	18d3      	adds	r3, r2, r3
20001c30:	001a      	movs	r2, r3
20001c32:	4b33      	ldr	r3, [pc, #204]	; (20001d00 <main+0xd4c>)
20001c34:	681b      	ldr	r3, [r3, #0]
20001c36:	429a      	cmp	r2, r3
20001c38:	d22b      	bcs.n	20001c92 <main+0xcde>
20001c3a:	4b2e      	ldr	r3, [pc, #184]	; (20001cf4 <main+0xd40>)
20001c3c:	2218      	movs	r2, #24
20001c3e:	4694      	mov	ip, r2
20001c40:	44bc      	add	ip, r7
20001c42:	4463      	add	r3, ip
20001c44:	681a      	ldr	r2, [r3, #0]
20001c46:	4b2c      	ldr	r3, [pc, #176]	; (20001cf8 <main+0xd44>)
20001c48:	2118      	movs	r1, #24
20001c4a:	468c      	mov	ip, r1
20001c4c:	44bc      	add	ip, r7
20001c4e:	4463      	add	r3, ip
20001c50:	681b      	ldr	r3, [r3, #0]
20001c52:	015b      	lsls	r3, r3, #5
20001c54:	18d3      	adds	r3, r2, r3
20001c56:	3304      	adds	r3, #4
20001c58:	681b      	ldr	r3, [r3, #0]
20001c5a:	2202      	movs	r2, #2
20001c5c:	4013      	ands	r3, r2
20001c5e:	d018      	beq.n	20001c92 <main+0xcde>
					{
						active_doors[i].controlbits |= 2;
20001c60:	4924      	ldr	r1, [pc, #144]	; (20001cf4 <main+0xd40>)
20001c62:	2418      	movs	r4, #24
20001c64:	193b      	adds	r3, r7, r4
20001c66:	185b      	adds	r3, r3, r1
20001c68:	681a      	ldr	r2, [r3, #0]
20001c6a:	4823      	ldr	r0, [pc, #140]	; (20001cf8 <main+0xd44>)
20001c6c:	193b      	adds	r3, r7, r4
20001c6e:	181b      	adds	r3, r3, r0
20001c70:	681b      	ldr	r3, [r3, #0]
20001c72:	015b      	lsls	r3, r3, #5
20001c74:	18d3      	adds	r3, r2, r3
20001c76:	3304      	adds	r3, #4
20001c78:	681b      	ldr	r3, [r3, #0]
20001c7a:	2202      	movs	r2, #2
20001c7c:	431a      	orrs	r2, r3
20001c7e:	193b      	adds	r3, r7, r4
20001c80:	185b      	adds	r3, r3, r1
20001c82:	6819      	ldr	r1, [r3, #0]
20001c84:	193b      	adds	r3, r7, r4
20001c86:	181b      	adds	r3, r3, r0
20001c88:	681b      	ldr	r3, [r3, #0]
20001c8a:	015b      	lsls	r3, r3, #5
20001c8c:	18cb      	adds	r3, r1, r3
20001c8e:	3304      	adds	r3, #4
20001c90:	601a      	str	r2, [r3, #0]
				for (int i = 0; i < sizeof(active_doors)/sizeof(active_doors[0]); i++)
20001c92:	4a19      	ldr	r2, [pc, #100]	; (20001cf8 <main+0xd44>)
20001c94:	2318      	movs	r3, #24
20001c96:	18fb      	adds	r3, r7, r3
20001c98:	189b      	adds	r3, r3, r2
20001c9a:	681b      	ldr	r3, [r3, #0]
20001c9c:	3301      	adds	r3, #1
20001c9e:	2118      	movs	r1, #24
20001ca0:	468c      	mov	ip, r1
20001ca2:	44bc      	add	ip, r7
20001ca4:	4462      	add	r2, ip
20001ca6:	6013      	str	r3, [r2, #0]
20001ca8:	0033      	movs	r3, r6
20001caa:	015b      	lsls	r3, r3, #5
20001cac:	095a      	lsrs	r2, r3, #5
20001cae:	4b12      	ldr	r3, [pc, #72]	; (20001cf8 <main+0xd44>)
20001cb0:	2118      	movs	r1, #24
20001cb2:	468c      	mov	ip, r1
20001cb4:	44bc      	add	ip, r7
20001cb6:	4463      	add	r3, ip
20001cb8:	681b      	ldr	r3, [r3, #0]
20001cba:	429a      	cmp	r2, r3
20001cbc:	d900      	bls.n	20001cc0 <main+0xd0c>
20001cbe:	e71f      	b.n	20001b00 <main+0xb4c>
		for (int i = 0; i < sizeof(active_doors)/sizeof(active_doors[0]); i++)
20001cc0:	22fe      	movs	r2, #254	; 0xfe
20001cc2:	00d2      	lsls	r2, r2, #3
20001cc4:	2318      	movs	r3, #24
20001cc6:	18fb      	adds	r3, r7, r3
20001cc8:	189b      	adds	r3, r3, r2
20001cca:	681b      	ldr	r3, [r3, #0]
20001ccc:	3301      	adds	r3, #1
20001cce:	2118      	movs	r1, #24
20001cd0:	468c      	mov	ip, r1
20001cd2:	44bc      	add	ip, r7
20001cd4:	4462      	add	r2, ip
20001cd6:	6013      	str	r3, [r2, #0]
20001cd8:	0033      	movs	r3, r6
20001cda:	015b      	lsls	r3, r3, #5
20001cdc:	095a      	lsrs	r2, r3, #5
20001cde:	23fe      	movs	r3, #254	; 0xfe
20001ce0:	00db      	lsls	r3, r3, #3
20001ce2:	2118      	movs	r1, #24
20001ce4:	468c      	mov	ip, r1
20001ce6:	44bc      	add	ip, r7
20001ce8:	4463      	add	r3, ip
20001cea:	681b      	ldr	r3, [r3, #0]
20001cec:	429a      	cmp	r2, r3
20001cee:	d900      	bls.n	20001cf2 <main+0xd3e>
20001cf0:	e65a      	b.n	200019a8 <main+0x9f4>
20001cf2:	e650      	b.n	20001996 <main+0x9e2>
20001cf4:	000007e4 	andeq	r0, r0, r4, ror #15
20001cf8:	000007ec 	andeq	r0, r0, ip, ror #15
20001cfc:	00002710 	andeq	r2, r0, r0, lsl r7
20001d00:	2000303c 	andcs	r3, r0, ip, lsr r0

20001d04 <GPIO_DeInit>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F42xxx/43xxx devices.
  *                      x can be (A, B, C, D and H) to select the GPIO peripheral for STM32F401xx devices.  
  * @retval None
  */
void GPIO_DeInit(GPIO_TypeDef* GPIOx)
{
20001d04:	b580      	push	{r7, lr}
20001d06:	b082      	sub	sp, #8
20001d08:	af00      	add	r7, sp, #0
20001d0a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  if (GPIOx == GPIOA)
20001d0c:	687b      	ldr	r3, [r7, #4]
20001d0e:	4a4e      	ldr	r2, [pc, #312]	; (20001e48 <GPIO_DeInit+0x144>)
20001d10:	4293      	cmp	r3, r2
20001d12:	d108      	bne.n	20001d26 <GPIO_DeInit+0x22>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, ENABLE);
20001d14:	2101      	movs	r1, #1
20001d16:	2001      	movs	r0, #1
20001d18:	f7fe fe3e 	bl	20000998 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, DISABLE);
20001d1c:	2100      	movs	r1, #0
20001d1e:	2001      	movs	r0, #1
20001d20:	f7fe fe3a 	bl	20000998 <RCC_AHB1PeriphResetCmd>
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, ENABLE);
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, DISABLE);
    }
  }
}
20001d24:	e08c      	b.n	20001e40 <GPIO_DeInit+0x13c>
  else if (GPIOx == GPIOB)
20001d26:	687b      	ldr	r3, [r7, #4]
20001d28:	4a48      	ldr	r2, [pc, #288]	; (20001e4c <GPIO_DeInit+0x148>)
20001d2a:	4293      	cmp	r3, r2
20001d2c:	d108      	bne.n	20001d40 <GPIO_DeInit+0x3c>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, ENABLE);
20001d2e:	2101      	movs	r1, #1
20001d30:	2002      	movs	r0, #2
20001d32:	f7fe fe31 	bl	20000998 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, DISABLE);
20001d36:	2100      	movs	r1, #0
20001d38:	2002      	movs	r0, #2
20001d3a:	f7fe fe2d 	bl	20000998 <RCC_AHB1PeriphResetCmd>
}
20001d3e:	e07f      	b.n	20001e40 <GPIO_DeInit+0x13c>
  else if (GPIOx == GPIOC)
20001d40:	687b      	ldr	r3, [r7, #4]
20001d42:	4a43      	ldr	r2, [pc, #268]	; (20001e50 <GPIO_DeInit+0x14c>)
20001d44:	4293      	cmp	r3, r2
20001d46:	d108      	bne.n	20001d5a <GPIO_DeInit+0x56>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, ENABLE);
20001d48:	2101      	movs	r1, #1
20001d4a:	2004      	movs	r0, #4
20001d4c:	f7fe fe24 	bl	20000998 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, DISABLE);
20001d50:	2100      	movs	r1, #0
20001d52:	2004      	movs	r0, #4
20001d54:	f7fe fe20 	bl	20000998 <RCC_AHB1PeriphResetCmd>
}
20001d58:	e072      	b.n	20001e40 <GPIO_DeInit+0x13c>
  else if (GPIOx == GPIOD)
20001d5a:	687b      	ldr	r3, [r7, #4]
20001d5c:	4a3d      	ldr	r2, [pc, #244]	; (20001e54 <GPIO_DeInit+0x150>)
20001d5e:	4293      	cmp	r3, r2
20001d60:	d108      	bne.n	20001d74 <GPIO_DeInit+0x70>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, ENABLE);
20001d62:	2101      	movs	r1, #1
20001d64:	2008      	movs	r0, #8
20001d66:	f7fe fe17 	bl	20000998 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, DISABLE);
20001d6a:	2100      	movs	r1, #0
20001d6c:	2008      	movs	r0, #8
20001d6e:	f7fe fe13 	bl	20000998 <RCC_AHB1PeriphResetCmd>
}
20001d72:	e065      	b.n	20001e40 <GPIO_DeInit+0x13c>
  else if (GPIOx == GPIOE)
20001d74:	687b      	ldr	r3, [r7, #4]
20001d76:	4a38      	ldr	r2, [pc, #224]	; (20001e58 <GPIO_DeInit+0x154>)
20001d78:	4293      	cmp	r3, r2
20001d7a:	d108      	bne.n	20001d8e <GPIO_DeInit+0x8a>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, ENABLE);
20001d7c:	2101      	movs	r1, #1
20001d7e:	2010      	movs	r0, #16
20001d80:	f7fe fe0a 	bl	20000998 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, DISABLE);
20001d84:	2100      	movs	r1, #0
20001d86:	2010      	movs	r0, #16
20001d88:	f7fe fe06 	bl	20000998 <RCC_AHB1PeriphResetCmd>
}
20001d8c:	e058      	b.n	20001e40 <GPIO_DeInit+0x13c>
  else if (GPIOx == GPIOF)
20001d8e:	687b      	ldr	r3, [r7, #4]
20001d90:	4a32      	ldr	r2, [pc, #200]	; (20001e5c <GPIO_DeInit+0x158>)
20001d92:	4293      	cmp	r3, r2
20001d94:	d108      	bne.n	20001da8 <GPIO_DeInit+0xa4>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, ENABLE);
20001d96:	2101      	movs	r1, #1
20001d98:	2020      	movs	r0, #32
20001d9a:	f7fe fdfd 	bl	20000998 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, DISABLE);
20001d9e:	2100      	movs	r1, #0
20001da0:	2020      	movs	r0, #32
20001da2:	f7fe fdf9 	bl	20000998 <RCC_AHB1PeriphResetCmd>
}
20001da6:	e04b      	b.n	20001e40 <GPIO_DeInit+0x13c>
  else if (GPIOx == GPIOG)
20001da8:	687b      	ldr	r3, [r7, #4]
20001daa:	4a2d      	ldr	r2, [pc, #180]	; (20001e60 <GPIO_DeInit+0x15c>)
20001dac:	4293      	cmp	r3, r2
20001dae:	d108      	bne.n	20001dc2 <GPIO_DeInit+0xbe>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, ENABLE);
20001db0:	2101      	movs	r1, #1
20001db2:	2040      	movs	r0, #64	; 0x40
20001db4:	f7fe fdf0 	bl	20000998 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, DISABLE);
20001db8:	2100      	movs	r1, #0
20001dba:	2040      	movs	r0, #64	; 0x40
20001dbc:	f7fe fdec 	bl	20000998 <RCC_AHB1PeriphResetCmd>
}
20001dc0:	e03e      	b.n	20001e40 <GPIO_DeInit+0x13c>
  else if (GPIOx == GPIOH)
20001dc2:	687b      	ldr	r3, [r7, #4]
20001dc4:	4a27      	ldr	r2, [pc, #156]	; (20001e64 <GPIO_DeInit+0x160>)
20001dc6:	4293      	cmp	r3, r2
20001dc8:	d108      	bne.n	20001ddc <GPIO_DeInit+0xd8>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOH, ENABLE);
20001dca:	2101      	movs	r1, #1
20001dcc:	2080      	movs	r0, #128	; 0x80
20001dce:	f7fe fde3 	bl	20000998 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOH, DISABLE);
20001dd2:	2100      	movs	r1, #0
20001dd4:	2080      	movs	r0, #128	; 0x80
20001dd6:	f7fe fddf 	bl	20000998 <RCC_AHB1PeriphResetCmd>
}
20001dda:	e031      	b.n	20001e40 <GPIO_DeInit+0x13c>
  else if (GPIOx == GPIOI)
20001ddc:	687b      	ldr	r3, [r7, #4]
20001dde:	4a22      	ldr	r2, [pc, #136]	; (20001e68 <GPIO_DeInit+0x164>)
20001de0:	4293      	cmp	r3, r2
20001de2:	d10c      	bne.n	20001dfe <GPIO_DeInit+0xfa>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, ENABLE);
20001de4:	2380      	movs	r3, #128	; 0x80
20001de6:	005b      	lsls	r3, r3, #1
20001de8:	2101      	movs	r1, #1
20001dea:	0018      	movs	r0, r3
20001dec:	f7fe fdd4 	bl	20000998 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, DISABLE);
20001df0:	2380      	movs	r3, #128	; 0x80
20001df2:	005b      	lsls	r3, r3, #1
20001df4:	2100      	movs	r1, #0
20001df6:	0018      	movs	r0, r3
20001df8:	f7fe fdce 	bl	20000998 <RCC_AHB1PeriphResetCmd>
}
20001dfc:	e020      	b.n	20001e40 <GPIO_DeInit+0x13c>
  else if (GPIOx == GPIOJ)
20001dfe:	687b      	ldr	r3, [r7, #4]
20001e00:	4a1a      	ldr	r2, [pc, #104]	; (20001e6c <GPIO_DeInit+0x168>)
20001e02:	4293      	cmp	r3, r2
20001e04:	d10c      	bne.n	20001e20 <GPIO_DeInit+0x11c>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOJ, ENABLE);
20001e06:	2380      	movs	r3, #128	; 0x80
20001e08:	009b      	lsls	r3, r3, #2
20001e0a:	2101      	movs	r1, #1
20001e0c:	0018      	movs	r0, r3
20001e0e:	f7fe fdc3 	bl	20000998 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOJ, DISABLE);
20001e12:	2380      	movs	r3, #128	; 0x80
20001e14:	009b      	lsls	r3, r3, #2
20001e16:	2100      	movs	r1, #0
20001e18:	0018      	movs	r0, r3
20001e1a:	f7fe fdbd 	bl	20000998 <RCC_AHB1PeriphResetCmd>
}
20001e1e:	e00f      	b.n	20001e40 <GPIO_DeInit+0x13c>
    if (GPIOx == GPIOK)
20001e20:	687b      	ldr	r3, [r7, #4]
20001e22:	4a13      	ldr	r2, [pc, #76]	; (20001e70 <GPIO_DeInit+0x16c>)
20001e24:	4293      	cmp	r3, r2
20001e26:	d10b      	bne.n	20001e40 <GPIO_DeInit+0x13c>
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, ENABLE);
20001e28:	2380      	movs	r3, #128	; 0x80
20001e2a:	00db      	lsls	r3, r3, #3
20001e2c:	2101      	movs	r1, #1
20001e2e:	0018      	movs	r0, r3
20001e30:	f7fe fdb2 	bl	20000998 <RCC_AHB1PeriphResetCmd>
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, DISABLE);
20001e34:	2380      	movs	r3, #128	; 0x80
20001e36:	00db      	lsls	r3, r3, #3
20001e38:	2100      	movs	r1, #0
20001e3a:	0018      	movs	r0, r3
20001e3c:	f7fe fdac 	bl	20000998 <RCC_AHB1PeriphResetCmd>
}
20001e40:	46c0      	nop			; (mov r8, r8)
20001e42:	46bd      	mov	sp, r7
20001e44:	b002      	add	sp, #8
20001e46:	bd80      	pop	{r7, pc}
20001e48:	40020000 	andmi	r0, r2, r0
20001e4c:	40020400 	andmi	r0, r2, r0, lsl #8
20001e50:	40020800 	andmi	r0, r2, r0, lsl #16
20001e54:	40020c00 	andmi	r0, r2, r0, lsl #24
20001e58:	40021000 	andmi	r1, r2, r0
20001e5c:	40021400 	andmi	r1, r2, r0, lsl #8
20001e60:	40021800 	andmi	r1, r2, r0, lsl #16
20001e64:	40021c00 	andmi	r1, r2, r0, lsl #24
20001e68:	40022000 	andmi	r2, r2, r0
20001e6c:	40022400 	andmi	r2, r2, r0, lsl #8
20001e70:	40022800 	andmi	r2, r2, r0, lsl #16

20001e74 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
20001e74:	b580      	push	{r7, lr}
20001e76:	b086      	sub	sp, #24
20001e78:	af00      	add	r7, sp, #0
20001e7a:	6078      	str	r0, [r7, #4]
20001e7c:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
20001e7e:	2300      	movs	r3, #0
20001e80:	617b      	str	r3, [r7, #20]
20001e82:	2300      	movs	r3, #0
20001e84:	613b      	str	r3, [r7, #16]
20001e86:	2300      	movs	r3, #0
20001e88:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
20001e8a:	2300      	movs	r3, #0
20001e8c:	617b      	str	r3, [r7, #20]
20001e8e:	e076      	b.n	20001f7e <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
20001e90:	2201      	movs	r2, #1
20001e92:	697b      	ldr	r3, [r7, #20]
20001e94:	409a      	lsls	r2, r3
20001e96:	0013      	movs	r3, r2
20001e98:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
20001e9a:	683b      	ldr	r3, [r7, #0]
20001e9c:	681a      	ldr	r2, [r3, #0]
20001e9e:	693b      	ldr	r3, [r7, #16]
20001ea0:	4013      	ands	r3, r2
20001ea2:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
20001ea4:	68fa      	ldr	r2, [r7, #12]
20001ea6:	693b      	ldr	r3, [r7, #16]
20001ea8:	429a      	cmp	r2, r3
20001eaa:	d165      	bne.n	20001f78 <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
20001eac:	687b      	ldr	r3, [r7, #4]
20001eae:	681b      	ldr	r3, [r3, #0]
20001eb0:	697a      	ldr	r2, [r7, #20]
20001eb2:	0052      	lsls	r2, r2, #1
20001eb4:	2103      	movs	r1, #3
20001eb6:	4091      	lsls	r1, r2
20001eb8:	000a      	movs	r2, r1
20001eba:	43d2      	mvns	r2, r2
20001ebc:	401a      	ands	r2, r3
20001ebe:	687b      	ldr	r3, [r7, #4]
20001ec0:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
20001ec2:	687b      	ldr	r3, [r7, #4]
20001ec4:	681a      	ldr	r2, [r3, #0]
20001ec6:	683b      	ldr	r3, [r7, #0]
20001ec8:	791b      	ldrb	r3, [r3, #4]
20001eca:	0019      	movs	r1, r3
20001ecc:	697b      	ldr	r3, [r7, #20]
20001ece:	005b      	lsls	r3, r3, #1
20001ed0:	4099      	lsls	r1, r3
20001ed2:	000b      	movs	r3, r1
20001ed4:	431a      	orrs	r2, r3
20001ed6:	687b      	ldr	r3, [r7, #4]
20001ed8:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
20001eda:	683b      	ldr	r3, [r7, #0]
20001edc:	791b      	ldrb	r3, [r3, #4]
20001ede:	2b01      	cmp	r3, #1
20001ee0:	d003      	beq.n	20001eea <GPIO_Init+0x76>
20001ee2:	683b      	ldr	r3, [r7, #0]
20001ee4:	791b      	ldrb	r3, [r3, #4]
20001ee6:	2b02      	cmp	r3, #2
20001ee8:	d12e      	bne.n	20001f48 <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
20001eea:	687b      	ldr	r3, [r7, #4]
20001eec:	689b      	ldr	r3, [r3, #8]
20001eee:	697a      	ldr	r2, [r7, #20]
20001ef0:	0052      	lsls	r2, r2, #1
20001ef2:	2103      	movs	r1, #3
20001ef4:	4091      	lsls	r1, r2
20001ef6:	000a      	movs	r2, r1
20001ef8:	43d2      	mvns	r2, r2
20001efa:	401a      	ands	r2, r3
20001efc:	687b      	ldr	r3, [r7, #4]
20001efe:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
20001f00:	687b      	ldr	r3, [r7, #4]
20001f02:	689a      	ldr	r2, [r3, #8]
20001f04:	683b      	ldr	r3, [r7, #0]
20001f06:	795b      	ldrb	r3, [r3, #5]
20001f08:	0019      	movs	r1, r3
20001f0a:	697b      	ldr	r3, [r7, #20]
20001f0c:	005b      	lsls	r3, r3, #1
20001f0e:	4099      	lsls	r1, r3
20001f10:	000b      	movs	r3, r1
20001f12:	431a      	orrs	r2, r3
20001f14:	687b      	ldr	r3, [r7, #4]
20001f16:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
20001f18:	687b      	ldr	r3, [r7, #4]
20001f1a:	685b      	ldr	r3, [r3, #4]
20001f1c:	697a      	ldr	r2, [r7, #20]
20001f1e:	b292      	uxth	r2, r2
20001f20:	0011      	movs	r1, r2
20001f22:	2201      	movs	r2, #1
20001f24:	408a      	lsls	r2, r1
20001f26:	43d2      	mvns	r2, r2
20001f28:	401a      	ands	r2, r3
20001f2a:	687b      	ldr	r3, [r7, #4]
20001f2c:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
20001f2e:	687b      	ldr	r3, [r7, #4]
20001f30:	685b      	ldr	r3, [r3, #4]
20001f32:	683a      	ldr	r2, [r7, #0]
20001f34:	7992      	ldrb	r2, [r2, #6]
20001f36:	0011      	movs	r1, r2
20001f38:	697a      	ldr	r2, [r7, #20]
20001f3a:	b292      	uxth	r2, r2
20001f3c:	4091      	lsls	r1, r2
20001f3e:	000a      	movs	r2, r1
20001f40:	b292      	uxth	r2, r2
20001f42:	431a      	orrs	r2, r3
20001f44:	687b      	ldr	r3, [r7, #4]
20001f46:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
20001f48:	687b      	ldr	r3, [r7, #4]
20001f4a:	68db      	ldr	r3, [r3, #12]
20001f4c:	697a      	ldr	r2, [r7, #20]
20001f4e:	b292      	uxth	r2, r2
20001f50:	0052      	lsls	r2, r2, #1
20001f52:	2103      	movs	r1, #3
20001f54:	4091      	lsls	r1, r2
20001f56:	000a      	movs	r2, r1
20001f58:	43d2      	mvns	r2, r2
20001f5a:	401a      	ands	r2, r3
20001f5c:	687b      	ldr	r3, [r7, #4]
20001f5e:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
20001f60:	687b      	ldr	r3, [r7, #4]
20001f62:	68da      	ldr	r2, [r3, #12]
20001f64:	683b      	ldr	r3, [r7, #0]
20001f66:	79db      	ldrb	r3, [r3, #7]
20001f68:	0019      	movs	r1, r3
20001f6a:	697b      	ldr	r3, [r7, #20]
20001f6c:	005b      	lsls	r3, r3, #1
20001f6e:	4099      	lsls	r1, r3
20001f70:	000b      	movs	r3, r1
20001f72:	431a      	orrs	r2, r3
20001f74:	687b      	ldr	r3, [r7, #4]
20001f76:	60da      	str	r2, [r3, #12]
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
20001f78:	697b      	ldr	r3, [r7, #20]
20001f7a:	3301      	adds	r3, #1
20001f7c:	617b      	str	r3, [r7, #20]
20001f7e:	697b      	ldr	r3, [r7, #20]
20001f80:	2b0f      	cmp	r3, #15
20001f82:	d985      	bls.n	20001e90 <GPIO_Init+0x1c>
    }
  }
}
20001f84:	46c0      	nop			; (mov r8, r8)
20001f86:	46bd      	mov	sp, r7
20001f88:	b006      	add	sp, #24
20001f8a:	bd80      	pop	{r7, pc}

20001f8c <GPIO_StructInit>:
  * @brief  Fills each GPIO_InitStruct member with its default value.
  * @param  GPIO_InitStruct : pointer to a GPIO_InitTypeDef structure which will be initialized.
  * @retval None
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
20001f8c:	b580      	push	{r7, lr}
20001f8e:	b082      	sub	sp, #8
20001f90:	af00      	add	r7, sp, #0
20001f92:	6078      	str	r0, [r7, #4]
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
20001f94:	687b      	ldr	r3, [r7, #4]
20001f96:	4a09      	ldr	r2, [pc, #36]	; (20001fbc <GPIO_StructInit+0x30>)
20001f98:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN;
20001f9a:	687b      	ldr	r3, [r7, #4]
20001f9c:	2200      	movs	r2, #0
20001f9e:	711a      	strb	r2, [r3, #4]
  GPIO_InitStruct->GPIO_Speed = GPIO_Speed_2MHz;
20001fa0:	687b      	ldr	r3, [r7, #4]
20001fa2:	2200      	movs	r2, #0
20001fa4:	715a      	strb	r2, [r3, #5]
  GPIO_InitStruct->GPIO_OType = GPIO_OType_PP;
20001fa6:	687b      	ldr	r3, [r7, #4]
20001fa8:	2200      	movs	r2, #0
20001faa:	719a      	strb	r2, [r3, #6]
  GPIO_InitStruct->GPIO_PuPd = GPIO_PuPd_NOPULL;
20001fac:	687b      	ldr	r3, [r7, #4]
20001fae:	2200      	movs	r2, #0
20001fb0:	71da      	strb	r2, [r3, #7]
}
20001fb2:	46c0      	nop			; (mov r8, r8)
20001fb4:	46bd      	mov	sp, r7
20001fb6:	b002      	add	sp, #8
20001fb8:	bd80      	pop	{r7, pc}
20001fba:	46c0      	nop			; (mov r8, r8)
20001fbc:	0000ffff 	strdeq	pc, [r0], -pc	; <UNPREDICTABLE>

20001fc0 <GPIO_PinLockConfig>:
  * @param  GPIO_Pin: specifies the port bit to be locked.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_PinLockConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
20001fc0:	b580      	push	{r7, lr}
20001fc2:	b084      	sub	sp, #16
20001fc4:	af00      	add	r7, sp, #0
20001fc6:	6078      	str	r0, [r7, #4]
20001fc8:	000a      	movs	r2, r1
20001fca:	1cbb      	adds	r3, r7, #2
20001fcc:	801a      	strh	r2, [r3, #0]
  __IO uint32_t tmp = 0x00010000;
20001fce:	2380      	movs	r3, #128	; 0x80
20001fd0:	025b      	lsls	r3, r3, #9
20001fd2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  tmp |= GPIO_Pin;
20001fd4:	1cbb      	adds	r3, r7, #2
20001fd6:	881a      	ldrh	r2, [r3, #0]
20001fd8:	68fb      	ldr	r3, [r7, #12]
20001fda:	4313      	orrs	r3, r2
20001fdc:	60fb      	str	r3, [r7, #12]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
20001fde:	68fa      	ldr	r2, [r7, #12]
20001fe0:	687b      	ldr	r3, [r7, #4]
20001fe2:	61da      	str	r2, [r3, #28]
  /* Reset LCKK bit */
  GPIOx->LCKR =  GPIO_Pin;
20001fe4:	1cbb      	adds	r3, r7, #2
20001fe6:	881a      	ldrh	r2, [r3, #0]
20001fe8:	687b      	ldr	r3, [r7, #4]
20001fea:	61da      	str	r2, [r3, #28]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
20001fec:	68fa      	ldr	r2, [r7, #12]
20001fee:	687b      	ldr	r3, [r7, #4]
20001ff0:	61da      	str	r2, [r3, #28]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
20001ff2:	687b      	ldr	r3, [r7, #4]
20001ff4:	69db      	ldr	r3, [r3, #28]
20001ff6:	60fb      	str	r3, [r7, #12]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
20001ff8:	687b      	ldr	r3, [r7, #4]
20001ffa:	69db      	ldr	r3, [r3, #28]
20001ffc:	60fb      	str	r3, [r7, #12]
}
20001ffe:	46c0      	nop			; (mov r8, r8)
20002000:	46bd      	mov	sp, r7
20002002:	b004      	add	sp, #16
20002004:	bd80      	pop	{r7, pc}

20002006 <GPIO_ReadInputDataBit>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
uint8_t GPIO_ReadInputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
20002006:	b580      	push	{r7, lr}
20002008:	b084      	sub	sp, #16
2000200a:	af00      	add	r7, sp, #0
2000200c:	6078      	str	r0, [r7, #4]
2000200e:	000a      	movs	r2, r1
20002010:	1cbb      	adds	r3, r7, #2
20002012:	801a      	strh	r2, [r3, #0]
  uint8_t bitstatus = 0x00;
20002014:	230f      	movs	r3, #15
20002016:	18fb      	adds	r3, r7, r3
20002018:	2200      	movs	r2, #0
2000201a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
2000201c:	687b      	ldr	r3, [r7, #4]
2000201e:	691b      	ldr	r3, [r3, #16]
20002020:	1cba      	adds	r2, r7, #2
20002022:	8812      	ldrh	r2, [r2, #0]
20002024:	4013      	ands	r3, r2
20002026:	d004      	beq.n	20002032 <GPIO_ReadInputDataBit+0x2c>
  {
    bitstatus = (uint8_t)Bit_SET;
20002028:	230f      	movs	r3, #15
2000202a:	18fb      	adds	r3, r7, r3
2000202c:	2201      	movs	r2, #1
2000202e:	701a      	strb	r2, [r3, #0]
20002030:	e003      	b.n	2000203a <GPIO_ReadInputDataBit+0x34>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
20002032:	230f      	movs	r3, #15
20002034:	18fb      	adds	r3, r7, r3
20002036:	2200      	movs	r2, #0
20002038:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
2000203a:	230f      	movs	r3, #15
2000203c:	18fb      	adds	r3, r7, r3
2000203e:	781b      	ldrb	r3, [r3, #0]
}
20002040:	0018      	movs	r0, r3
20002042:	46bd      	mov	sp, r7
20002044:	b004      	add	sp, #16
20002046:	bd80      	pop	{r7, pc}

20002048 <GPIO_ReadInputData>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F42xxx/43xxx devices.
  *                      x can be (A, B, C, D and H) to select the GPIO peripheral for STM32F401xx devices. 
  * @retval GPIO input data port value.
  */
uint16_t GPIO_ReadInputData(GPIO_TypeDef* GPIOx)
{
20002048:	b580      	push	{r7, lr}
2000204a:	b082      	sub	sp, #8
2000204c:	af00      	add	r7, sp, #0
2000204e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  return ((uint16_t)GPIOx->IDR);
20002050:	687b      	ldr	r3, [r7, #4]
20002052:	691b      	ldr	r3, [r3, #16]
20002054:	b29b      	uxth	r3, r3
}
20002056:	0018      	movs	r0, r3
20002058:	46bd      	mov	sp, r7
2000205a:	b002      	add	sp, #8
2000205c:	bd80      	pop	{r7, pc}

2000205e <GPIO_ReadOutputDataBit>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *          This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The output port pin value.
  */
uint8_t GPIO_ReadOutputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
2000205e:	b580      	push	{r7, lr}
20002060:	b084      	sub	sp, #16
20002062:	af00      	add	r7, sp, #0
20002064:	6078      	str	r0, [r7, #4]
20002066:	000a      	movs	r2, r1
20002068:	1cbb      	adds	r3, r7, #2
2000206a:	801a      	strh	r2, [r3, #0]
  uint8_t bitstatus = 0x00;
2000206c:	230f      	movs	r3, #15
2000206e:	18fb      	adds	r3, r7, r3
20002070:	2200      	movs	r2, #0
20002072:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if (((GPIOx->ODR) & GPIO_Pin) != (uint32_t)Bit_RESET)
20002074:	687b      	ldr	r3, [r7, #4]
20002076:	695b      	ldr	r3, [r3, #20]
20002078:	1cba      	adds	r2, r7, #2
2000207a:	8812      	ldrh	r2, [r2, #0]
2000207c:	4013      	ands	r3, r2
2000207e:	d004      	beq.n	2000208a <GPIO_ReadOutputDataBit+0x2c>
  {
    bitstatus = (uint8_t)Bit_SET;
20002080:	230f      	movs	r3, #15
20002082:	18fb      	adds	r3, r7, r3
20002084:	2201      	movs	r2, #1
20002086:	701a      	strb	r2, [r3, #0]
20002088:	e003      	b.n	20002092 <GPIO_ReadOutputDataBit+0x34>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
2000208a:	230f      	movs	r3, #15
2000208c:	18fb      	adds	r3, r7, r3
2000208e:	2200      	movs	r2, #0
20002090:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
20002092:	230f      	movs	r3, #15
20002094:	18fb      	adds	r3, r7, r3
20002096:	781b      	ldrb	r3, [r3, #0]
}
20002098:	0018      	movs	r0, r3
2000209a:	46bd      	mov	sp, r7
2000209c:	b004      	add	sp, #16
2000209e:	bd80      	pop	{r7, pc}

200020a0 <GPIO_ReadOutputData>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F42xxx/43xxx devices.
  *                      x can be (A, B, C, D and H) to select the GPIO peripheral for STM32F401xx devices. 
  * @retval GPIO output data port value.
  */
uint16_t GPIO_ReadOutputData(GPIO_TypeDef* GPIOx)
{
200020a0:	b580      	push	{r7, lr}
200020a2:	b082      	sub	sp, #8
200020a4:	af00      	add	r7, sp, #0
200020a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  return ((uint16_t)GPIOx->ODR);
200020a8:	687b      	ldr	r3, [r7, #4]
200020aa:	695b      	ldr	r3, [r3, #20]
200020ac:	b29b      	uxth	r3, r3
}
200020ae:	0018      	movs	r0, r3
200020b0:	46bd      	mov	sp, r7
200020b2:	b002      	add	sp, #8
200020b4:	bd80      	pop	{r7, pc}

200020b6 <GPIO_SetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
200020b6:	b580      	push	{r7, lr}
200020b8:	b082      	sub	sp, #8
200020ba:	af00      	add	r7, sp, #0
200020bc:	6078      	str	r0, [r7, #4]
200020be:	000a      	movs	r2, r1
200020c0:	1cbb      	adds	r3, r7, #2
200020c2:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRL = GPIO_Pin;
200020c4:	687b      	ldr	r3, [r7, #4]
200020c6:	1cba      	adds	r2, r7, #2
200020c8:	8812      	ldrh	r2, [r2, #0]
200020ca:	831a      	strh	r2, [r3, #24]
}
200020cc:	46c0      	nop			; (mov r8, r8)
200020ce:	46bd      	mov	sp, r7
200020d0:	b002      	add	sp, #8
200020d2:	bd80      	pop	{r7, pc}

200020d4 <GPIO_ResetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
200020d4:	b580      	push	{r7, lr}
200020d6:	b082      	sub	sp, #8
200020d8:	af00      	add	r7, sp, #0
200020da:	6078      	str	r0, [r7, #4]
200020dc:	000a      	movs	r2, r1
200020de:	1cbb      	adds	r3, r7, #2
200020e0:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRH = GPIO_Pin;
200020e2:	687b      	ldr	r3, [r7, #4]
200020e4:	1cba      	adds	r2, r7, #2
200020e6:	8812      	ldrh	r2, [r2, #0]
200020e8:	835a      	strh	r2, [r3, #26]
}
200020ea:	46c0      	nop			; (mov r8, r8)
200020ec:	46bd      	mov	sp, r7
200020ee:	b002      	add	sp, #8
200020f0:	bd80      	pop	{r7, pc}

200020f2 <GPIO_WriteBit>:
  *            @arg Bit_RESET: to clear the port pin
  *            @arg Bit_SET: to set the port pin
  * @retval None
  */
void GPIO_WriteBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, BitAction BitVal)
{
200020f2:	b580      	push	{r7, lr}
200020f4:	b082      	sub	sp, #8
200020f6:	af00      	add	r7, sp, #0
200020f8:	6078      	str	r0, [r7, #4]
200020fa:	0008      	movs	r0, r1
200020fc:	0011      	movs	r1, r2
200020fe:	1cbb      	adds	r3, r7, #2
20002100:	1c02      	adds	r2, r0, #0
20002102:	801a      	strh	r2, [r3, #0]
20002104:	1c7b      	adds	r3, r7, #1
20002106:	1c0a      	adds	r2, r1, #0
20002108:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal));

  if (BitVal != Bit_RESET)
2000210a:	1c7b      	adds	r3, r7, #1
2000210c:	781b      	ldrb	r3, [r3, #0]
2000210e:	2b00      	cmp	r3, #0
20002110:	d004      	beq.n	2000211c <GPIO_WriteBit+0x2a>
  {
    GPIOx->BSRRL = GPIO_Pin;
20002112:	687b      	ldr	r3, [r7, #4]
20002114:	1cba      	adds	r2, r7, #2
20002116:	8812      	ldrh	r2, [r2, #0]
20002118:	831a      	strh	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRRH = GPIO_Pin ;
  }
}
2000211a:	e003      	b.n	20002124 <GPIO_WriteBit+0x32>
    GPIOx->BSRRH = GPIO_Pin ;
2000211c:	687b      	ldr	r3, [r7, #4]
2000211e:	1cba      	adds	r2, r7, #2
20002120:	8812      	ldrh	r2, [r2, #0]
20002122:	835a      	strh	r2, [r3, #26]
}
20002124:	46c0      	nop			; (mov r8, r8)
20002126:	46bd      	mov	sp, r7
20002128:	b002      	add	sp, #8
2000212a:	bd80      	pop	{r7, pc}

2000212c <GPIO_Write>:
  *                      x can be (A, B, C, D and H) to select the GPIO peripheral for STM32F401xx devices. 
  * @param  PortVal: specifies the value to be written to the port output data register.
  * @retval None
  */
void GPIO_Write(GPIO_TypeDef* GPIOx, uint16_t PortVal)
{
2000212c:	b580      	push	{r7, lr}
2000212e:	b082      	sub	sp, #8
20002130:	af00      	add	r7, sp, #0
20002132:	6078      	str	r0, [r7, #4]
20002134:	000a      	movs	r2, r1
20002136:	1cbb      	adds	r3, r7, #2
20002138:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR = PortVal;
2000213a:	1cbb      	adds	r3, r7, #2
2000213c:	881a      	ldrh	r2, [r3, #0]
2000213e:	687b      	ldr	r3, [r7, #4]
20002140:	615a      	str	r2, [r3, #20]
}
20002142:	46c0      	nop			; (mov r8, r8)
20002144:	46bd      	mov	sp, r7
20002146:	b002      	add	sp, #8
20002148:	bd80      	pop	{r7, pc}

2000214a <GPIO_ToggleBits>:
  *                      x can be (A, B, C, D and H) to select the GPIO peripheral for STM32F401xx devices. 
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void GPIO_ToggleBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
2000214a:	b580      	push	{r7, lr}
2000214c:	b082      	sub	sp, #8
2000214e:	af00      	add	r7, sp, #0
20002150:	6078      	str	r0, [r7, #4]
20002152:	000a      	movs	r2, r1
20002154:	1cbb      	adds	r3, r7, #2
20002156:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR ^= GPIO_Pin;
20002158:	687b      	ldr	r3, [r7, #4]
2000215a:	695a      	ldr	r2, [r3, #20]
2000215c:	1cbb      	adds	r3, r7, #2
2000215e:	881b      	ldrh	r3, [r3, #0]
20002160:	405a      	eors	r2, r3
20002162:	687b      	ldr	r3, [r7, #4]
20002164:	615a      	str	r2, [r3, #20]
}
20002166:	46c0      	nop			; (mov r8, r8)
20002168:	46bd      	mov	sp, r7
2000216a:	b002      	add	sp, #8
2000216c:	bd80      	pop	{r7, pc}

2000216e <GPIO_PinAFConfig>:
  *            @arg GPIO_AF_LTDC: Connect LTDC pins to AF14 for STM32F429xx/439xx devices. 
  *            @arg GPIO_AF_EVENTOUT: Connect EVENTOUT pins to AF15
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
2000216e:	b580      	push	{r7, lr}
20002170:	b084      	sub	sp, #16
20002172:	af00      	add	r7, sp, #0
20002174:	6078      	str	r0, [r7, #4]
20002176:	0008      	movs	r0, r1
20002178:	0011      	movs	r1, r2
2000217a:	1cbb      	adds	r3, r7, #2
2000217c:	1c02      	adds	r2, r0, #0
2000217e:	801a      	strh	r2, [r3, #0]
20002180:	1c7b      	adds	r3, r7, #1
20002182:	1c0a      	adds	r2, r1, #0
20002184:	701a      	strb	r2, [r3, #0]
  uint32_t temp = 0x00;
20002186:	2300      	movs	r3, #0
20002188:	60fb      	str	r3, [r7, #12]
  uint32_t temp_2 = 0x00;
2000218a:	2300      	movs	r3, #0
2000218c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
2000218e:	1c7b      	adds	r3, r7, #1
20002190:	781a      	ldrb	r2, [r3, #0]
20002192:	1cbb      	adds	r3, r7, #2
20002194:	881b      	ldrh	r3, [r3, #0]
20002196:	2107      	movs	r1, #7
20002198:	400b      	ands	r3, r1
2000219a:	009b      	lsls	r3, r3, #2
2000219c:	409a      	lsls	r2, r3
2000219e:	0013      	movs	r3, r2
200021a0:	60fb      	str	r3, [r7, #12]
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
200021a2:	1cbb      	adds	r3, r7, #2
200021a4:	881b      	ldrh	r3, [r3, #0]
200021a6:	08db      	lsrs	r3, r3, #3
200021a8:	b29b      	uxth	r3, r3
200021aa:	001a      	movs	r2, r3
200021ac:	687b      	ldr	r3, [r7, #4]
200021ae:	3208      	adds	r2, #8
200021b0:	0092      	lsls	r2, r2, #2
200021b2:	58d3      	ldr	r3, [r2, r3]
200021b4:	1cba      	adds	r2, r7, #2
200021b6:	8812      	ldrh	r2, [r2, #0]
200021b8:	2107      	movs	r1, #7
200021ba:	400a      	ands	r2, r1
200021bc:	0092      	lsls	r2, r2, #2
200021be:	210f      	movs	r1, #15
200021c0:	4091      	lsls	r1, r2
200021c2:	000a      	movs	r2, r1
200021c4:	43d2      	mvns	r2, r2
200021c6:	1cb9      	adds	r1, r7, #2
200021c8:	8809      	ldrh	r1, [r1, #0]
200021ca:	08c9      	lsrs	r1, r1, #3
200021cc:	b289      	uxth	r1, r1
200021ce:	0008      	movs	r0, r1
200021d0:	401a      	ands	r2, r3
200021d2:	0011      	movs	r1, r2
200021d4:	687b      	ldr	r3, [r7, #4]
200021d6:	0002      	movs	r2, r0
200021d8:	3208      	adds	r2, #8
200021da:	0092      	lsls	r2, r2, #2
200021dc:	50d1      	str	r1, [r2, r3]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
200021de:	1cbb      	adds	r3, r7, #2
200021e0:	881b      	ldrh	r3, [r3, #0]
200021e2:	08db      	lsrs	r3, r3, #3
200021e4:	b29b      	uxth	r3, r3
200021e6:	001a      	movs	r2, r3
200021e8:	687b      	ldr	r3, [r7, #4]
200021ea:	3208      	adds	r2, #8
200021ec:	0092      	lsls	r2, r2, #2
200021ee:	58d3      	ldr	r3, [r2, r3]
200021f0:	68fa      	ldr	r2, [r7, #12]
200021f2:	4313      	orrs	r3, r2
200021f4:	60bb      	str	r3, [r7, #8]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
200021f6:	1cbb      	adds	r3, r7, #2
200021f8:	881b      	ldrh	r3, [r3, #0]
200021fa:	08db      	lsrs	r3, r3, #3
200021fc:	b29b      	uxth	r3, r3
200021fe:	001a      	movs	r2, r3
20002200:	687b      	ldr	r3, [r7, #4]
20002202:	3208      	adds	r2, #8
20002204:	0092      	lsls	r2, r2, #2
20002206:	68b9      	ldr	r1, [r7, #8]
20002208:	50d1      	str	r1, [r2, r3]
}
2000220a:	46c0      	nop			; (mov r8, r8)
2000220c:	46bd      	mov	sp, r7
2000220e:	b004      	add	sp, #16
20002210:	bd80      	pop	{r7, pc}
20002212:	46c0      	nop			; (mov r8, r8)

20002214 <NVIC_PriorityGroupConfig>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void NVIC_PriorityGroupConfig(uint32_t NVIC_PriorityGroup)
{
20002214:	b580      	push	{r7, lr}
20002216:	b082      	sub	sp, #8
20002218:	af00      	add	r7, sp, #0
2000221a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
2000221c:	4b04      	ldr	r3, [pc, #16]	; (20002230 <NVIC_PriorityGroupConfig+0x1c>)
2000221e:	687a      	ldr	r2, [r7, #4]
20002220:	4904      	ldr	r1, [pc, #16]	; (20002234 <NVIC_PriorityGroupConfig+0x20>)
20002222:	430a      	orrs	r2, r1
20002224:	60da      	str	r2, [r3, #12]
}
20002226:	46c0      	nop			; (mov r8, r8)
20002228:	46bd      	mov	sp, r7
2000222a:	b002      	add	sp, #8
2000222c:	bd80      	pop	{r7, pc}
2000222e:	46c0      	nop			; (mov r8, r8)
20002230:	e000ed00 	and	lr, r0, r0, lsl #26
20002234:	05fa0000 	ldrbeq	r0, [sl, #0]!

20002238 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
20002238:	b5b0      	push	{r4, r5, r7, lr}
2000223a:	b084      	sub	sp, #16
2000223c:	af00      	add	r7, sp, #0
2000223e:	6078      	str	r0, [r7, #4]
  uint8_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
20002240:	230f      	movs	r3, #15
20002242:	18fb      	adds	r3, r7, r3
20002244:	2200      	movs	r2, #0
20002246:	701a      	strb	r2, [r3, #0]
20002248:	230e      	movs	r3, #14
2000224a:	18fb      	adds	r3, r7, r3
2000224c:	2200      	movs	r2, #0
2000224e:	701a      	strb	r2, [r3, #0]
20002250:	230d      	movs	r3, #13
20002252:	18fb      	adds	r3, r7, r3
20002254:	220f      	movs	r2, #15
20002256:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
20002258:	687b      	ldr	r3, [r7, #4]
2000225a:	78db      	ldrb	r3, [r3, #3]
2000225c:	2b00      	cmp	r3, #0
2000225e:	d04d      	beq.n	200022fc <NVIC_Init+0xc4>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
20002260:	4b31      	ldr	r3, [pc, #196]	; (20002328 <NVIC_Init+0xf0>)
20002262:	68db      	ldr	r3, [r3, #12]
20002264:	43db      	mvns	r3, r3
20002266:	0a1b      	lsrs	r3, r3, #8
20002268:	b2da      	uxtb	r2, r3
2000226a:	200f      	movs	r0, #15
2000226c:	183b      	adds	r3, r7, r0
2000226e:	2107      	movs	r1, #7
20002270:	400a      	ands	r2, r1
20002272:	701a      	strb	r2, [r3, #0]
    tmppre = (0x4 - tmppriority);
20002274:	250e      	movs	r5, #14
20002276:	197b      	adds	r3, r7, r5
20002278:	183a      	adds	r2, r7, r0
2000227a:	7812      	ldrb	r2, [r2, #0]
2000227c:	2104      	movs	r1, #4
2000227e:	1a8a      	subs	r2, r1, r2
20002280:	701a      	strb	r2, [r3, #0]
    tmpsub = tmpsub >> tmppriority;
20002282:	240d      	movs	r4, #13
20002284:	193b      	adds	r3, r7, r4
20002286:	781a      	ldrb	r2, [r3, #0]
20002288:	0001      	movs	r1, r0
2000228a:	187b      	adds	r3, r7, r1
2000228c:	781b      	ldrb	r3, [r3, #0]
2000228e:	411a      	asrs	r2, r3
20002290:	193b      	adds	r3, r7, r4
20002292:	701a      	strb	r2, [r3, #0]

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
20002294:	687b      	ldr	r3, [r7, #4]
20002296:	785b      	ldrb	r3, [r3, #1]
20002298:	001a      	movs	r2, r3
2000229a:	197b      	adds	r3, r7, r5
2000229c:	781b      	ldrb	r3, [r3, #0]
2000229e:	409a      	lsls	r2, r3
200022a0:	0008      	movs	r0, r1
200022a2:	187b      	adds	r3, r7, r1
200022a4:	701a      	strb	r2, [r3, #0]
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
200022a6:	687b      	ldr	r3, [r7, #4]
200022a8:	789b      	ldrb	r3, [r3, #2]
200022aa:	193a      	adds	r2, r7, r4
200022ac:	7812      	ldrb	r2, [r2, #0]
200022ae:	4013      	ands	r3, r2
200022b0:	b2d9      	uxtb	r1, r3
200022b2:	183b      	adds	r3, r7, r0
200022b4:	183a      	adds	r2, r7, r0
200022b6:	7812      	ldrb	r2, [r2, #0]
200022b8:	430a      	orrs	r2, r1
200022ba:	701a      	strb	r2, [r3, #0]
        
    tmppriority = tmppriority << 0x04;
200022bc:	183b      	adds	r3, r7, r0
200022be:	183a      	adds	r2, r7, r0
200022c0:	7812      	ldrb	r2, [r2, #0]
200022c2:	0112      	lsls	r2, r2, #4
200022c4:	701a      	strb	r2, [r3, #0]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
200022c6:	4a19      	ldr	r2, [pc, #100]	; (2000232c <NVIC_Init+0xf4>)
200022c8:	687b      	ldr	r3, [r7, #4]
200022ca:	781b      	ldrb	r3, [r3, #0]
200022cc:	0019      	movs	r1, r3
200022ce:	23c0      	movs	r3, #192	; 0xc0
200022d0:	009b      	lsls	r3, r3, #2
200022d2:	1852      	adds	r2, r2, r1
200022d4:	18d3      	adds	r3, r2, r3
200022d6:	183a      	adds	r2, r7, r0
200022d8:	7812      	ldrb	r2, [r2, #0]
200022da:	701a      	strb	r2, [r3, #0]
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
200022dc:	687b      	ldr	r3, [r7, #4]
200022de:	781b      	ldrb	r3, [r3, #0]
200022e0:	001a      	movs	r2, r3
200022e2:	231f      	movs	r3, #31
200022e4:	4013      	ands	r3, r2
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
200022e6:	4911      	ldr	r1, [pc, #68]	; (2000232c <NVIC_Init+0xf4>)
200022e8:	687a      	ldr	r2, [r7, #4]
200022ea:	7812      	ldrb	r2, [r2, #0]
200022ec:	0952      	lsrs	r2, r2, #5
200022ee:	b2d2      	uxtb	r2, r2
200022f0:	0010      	movs	r0, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
200022f2:	2201      	movs	r2, #1
200022f4:	409a      	lsls	r2, r3
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
200022f6:	0083      	lsls	r3, r0, #2
200022f8:	505a      	str	r2, [r3, r1]
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
200022fa:	e010      	b.n	2000231e <NVIC_Init+0xe6>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
200022fc:	687b      	ldr	r3, [r7, #4]
200022fe:	781b      	ldrb	r3, [r3, #0]
20002300:	001a      	movs	r2, r3
20002302:	231f      	movs	r3, #31
20002304:	4013      	ands	r3, r2
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
20002306:	4909      	ldr	r1, [pc, #36]	; (2000232c <NVIC_Init+0xf4>)
20002308:	687a      	ldr	r2, [r7, #4]
2000230a:	7812      	ldrb	r2, [r2, #0]
2000230c:	0952      	lsrs	r2, r2, #5
2000230e:	b2d2      	uxtb	r2, r2
20002310:	0010      	movs	r0, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
20002312:	2201      	movs	r2, #1
20002314:	409a      	lsls	r2, r3
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
20002316:	0003      	movs	r3, r0
20002318:	3320      	adds	r3, #32
2000231a:	009b      	lsls	r3, r3, #2
2000231c:	505a      	str	r2, [r3, r1]
}
2000231e:	46c0      	nop			; (mov r8, r8)
20002320:	46bd      	mov	sp, r7
20002322:	b004      	add	sp, #16
20002324:	bdb0      	pop	{r4, r5, r7, pc}
20002326:	46c0      	nop			; (mov r8, r8)
20002328:	e000ed00 	and	lr, r0, r0, lsl #26
2000232c:	e000e100 	and	lr, r0, r0, lsl #2

20002330 <NVIC_SetVectorTable>:
  *     @arg NVIC_VectTab_FLASH: Vector Table in internal FLASH.
  * @param  Offset: Vector Table base offset field. This value must be a multiple of 0x200.
  * @retval None
  */
void NVIC_SetVectorTable(uint32_t NVIC_VectTab, uint32_t Offset)
{ 
20002330:	b580      	push	{r7, lr}
20002332:	b082      	sub	sp, #8
20002334:	af00      	add	r7, sp, #0
20002336:	6078      	str	r0, [r7, #4]
20002338:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_VECTTAB(NVIC_VectTab));
  assert_param(IS_NVIC_OFFSET(Offset));  
   
  SCB->VTOR = NVIC_VectTab | (Offset & (uint32_t)0x1FFFFF80);
2000233a:	683b      	ldr	r3, [r7, #0]
2000233c:	4a05      	ldr	r2, [pc, #20]	; (20002354 <NVIC_SetVectorTable+0x24>)
2000233e:	4013      	ands	r3, r2
20002340:	0019      	movs	r1, r3
20002342:	4b05      	ldr	r3, [pc, #20]	; (20002358 <NVIC_SetVectorTable+0x28>)
20002344:	687a      	ldr	r2, [r7, #4]
20002346:	430a      	orrs	r2, r1
20002348:	609a      	str	r2, [r3, #8]
}
2000234a:	46c0      	nop			; (mov r8, r8)
2000234c:	46bd      	mov	sp, r7
2000234e:	b002      	add	sp, #8
20002350:	bd80      	pop	{r7, pc}
20002352:	46c0      	nop			; (mov r8, r8)
20002354:	1fffff80 	svcne	0x00ffff80
20002358:	e000ed00 	and	lr, r0, r0, lsl #26

2000235c <NVIC_SystemLPConfig>:
  *     @arg NVIC_LP_SLEEPONEXIT: Low Power Sleep on Exit.
  * @param  NewState: new state of LP condition. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void NVIC_SystemLPConfig(uint8_t LowPowerMode, FunctionalState NewState)
{
2000235c:	b580      	push	{r7, lr}
2000235e:	b082      	sub	sp, #8
20002360:	af00      	add	r7, sp, #0
20002362:	0002      	movs	r2, r0
20002364:	1dfb      	adds	r3, r7, #7
20002366:	701a      	strb	r2, [r3, #0]
20002368:	1dbb      	adds	r3, r7, #6
2000236a:	1c0a      	adds	r2, r1, #0
2000236c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_LP(LowPowerMode));
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  if (NewState != DISABLE)
2000236e:	1dbb      	adds	r3, r7, #6
20002370:	781b      	ldrb	r3, [r3, #0]
20002372:	2b00      	cmp	r3, #0
20002374:	d007      	beq.n	20002386 <NVIC_SystemLPConfig+0x2a>
  {
    SCB->SCR |= LowPowerMode;
20002376:	4b0a      	ldr	r3, [pc, #40]	; (200023a0 <NVIC_SystemLPConfig+0x44>)
20002378:	6919      	ldr	r1, [r3, #16]
2000237a:	1dfb      	adds	r3, r7, #7
2000237c:	781a      	ldrb	r2, [r3, #0]
2000237e:	4b08      	ldr	r3, [pc, #32]	; (200023a0 <NVIC_SystemLPConfig+0x44>)
20002380:	430a      	orrs	r2, r1
20002382:	611a      	str	r2, [r3, #16]
  }
  else
  {
    SCB->SCR &= (uint32_t)(~(uint32_t)LowPowerMode);
  }
}
20002384:	e007      	b.n	20002396 <NVIC_SystemLPConfig+0x3a>
    SCB->SCR &= (uint32_t)(~(uint32_t)LowPowerMode);
20002386:	4b06      	ldr	r3, [pc, #24]	; (200023a0 <NVIC_SystemLPConfig+0x44>)
20002388:	691a      	ldr	r2, [r3, #16]
2000238a:	1dfb      	adds	r3, r7, #7
2000238c:	781b      	ldrb	r3, [r3, #0]
2000238e:	43d9      	mvns	r1, r3
20002390:	4b03      	ldr	r3, [pc, #12]	; (200023a0 <NVIC_SystemLPConfig+0x44>)
20002392:	400a      	ands	r2, r1
20002394:	611a      	str	r2, [r3, #16]
}
20002396:	46c0      	nop			; (mov r8, r8)
20002398:	46bd      	mov	sp, r7
2000239a:	b002      	add	sp, #8
2000239c:	bd80      	pop	{r7, pc}
2000239e:	46c0      	nop			; (mov r8, r8)
200023a0:	e000ed00 	and	lr, r0, r0, lsl #26

200023a4 <SysTick_CLKSourceConfig>:
  *     @arg SysTick_CLKSource_HCLK_Div8: AHB clock divided by 8 selected as SysTick clock source.
  *     @arg SysTick_CLKSource_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void SysTick_CLKSourceConfig(uint32_t SysTick_CLKSource)
{
200023a4:	b580      	push	{r7, lr}
200023a6:	b082      	sub	sp, #8
200023a8:	af00      	add	r7, sp, #0
200023aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(SysTick_CLKSource));
  if (SysTick_CLKSource == SysTick_CLKSource_HCLK)
200023ac:	687b      	ldr	r3, [r7, #4]
200023ae:	2b04      	cmp	r3, #4
200023b0:	d106      	bne.n	200023c0 <SysTick_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SysTick_CLKSource_HCLK;
200023b2:	4b08      	ldr	r3, [pc, #32]	; (200023d4 <SysTick_CLKSourceConfig+0x30>)
200023b4:	681a      	ldr	r2, [r3, #0]
200023b6:	4b07      	ldr	r3, [pc, #28]	; (200023d4 <SysTick_CLKSourceConfig+0x30>)
200023b8:	2104      	movs	r1, #4
200023ba:	430a      	orrs	r2, r1
200023bc:	601a      	str	r2, [r3, #0]
  }
  else
  {
    SysTick->CTRL &= SysTick_CLKSource_HCLK_Div8;
  }
}
200023be:	e005      	b.n	200023cc <SysTick_CLKSourceConfig+0x28>
    SysTick->CTRL &= SysTick_CLKSource_HCLK_Div8;
200023c0:	4b04      	ldr	r3, [pc, #16]	; (200023d4 <SysTick_CLKSourceConfig+0x30>)
200023c2:	681a      	ldr	r2, [r3, #0]
200023c4:	4b03      	ldr	r3, [pc, #12]	; (200023d4 <SysTick_CLKSourceConfig+0x30>)
200023c6:	2104      	movs	r1, #4
200023c8:	438a      	bics	r2, r1
200023ca:	601a      	str	r2, [r3, #0]
}
200023cc:	46c0      	nop			; (mov r8, r8)
200023ce:	46bd      	mov	sp, r7
200023d0:	b002      	add	sp, #8
200023d2:	bd80      	pop	{r7, pc}
200023d4:	e000e010 	and	lr, r0, r0, lsl r0

200023d8 <bufferInit>:
#include "buffer.h"

//Nollställer bufferten
void bufferInit(FIFO *buffer) {
200023d8:	b580      	push	{r7, lr}
200023da:	b082      	sub	sp, #8
200023dc:	af00      	add	r7, sp, #0
200023de:	6078      	str	r0, [r7, #4]
    buffer->count = 0;
200023e0:	687b      	ldr	r3, [r7, #4]
200023e2:	2264      	movs	r2, #100	; 0x64
200023e4:	2100      	movs	r1, #0
200023e6:	5499      	strb	r1, [r3, r2]
    buffer->in = 0;
200023e8:	687b      	ldr	r3, [r7, #4]
200023ea:	2265      	movs	r2, #101	; 0x65
200023ec:	2100      	movs	r1, #0
200023ee:	5499      	strb	r1, [r3, r2]
    buffer->out = 0;
200023f0:	687b      	ldr	r3, [r7, #4]
200023f2:	2266      	movs	r2, #102	; 0x66
200023f4:	2100      	movs	r1, #0
200023f6:	5499      	strb	r1, [r3, r2]
}
200023f8:	46c0      	nop			; (mov r8, r8)
200023fa:	46bd      	mov	sp, r7
200023fc:	b002      	add	sp, #8
200023fe:	bd80      	pop	{r7, pc}

20002400 <bufferPut>:

//Lägger till ett elem i buffern.
//Returnerar 1 om det lyckades, 0 annars.
uint8_t bufferPut ( FIFO *buffer, uint8_t elem) {
20002400:	b580      	push	{r7, lr}
20002402:	b082      	sub	sp, #8
20002404:	af00      	add	r7, sp, #0
20002406:	6078      	str	r0, [r7, #4]
20002408:	000a      	movs	r2, r1
2000240a:	1cfb      	adds	r3, r7, #3
2000240c:	701a      	strb	r2, [r3, #0]
    //Kollar om bufferten är full.
    if (buffer->count == BUFFERSIZE){
2000240e:	687b      	ldr	r3, [r7, #4]
20002410:	2264      	movs	r2, #100	; 0x64
20002412:	5c9b      	ldrb	r3, [r3, r2]
20002414:	2b64      	cmp	r3, #100	; 0x64
20002416:	d101      	bne.n	2000241c <bufferPut+0x1c>
        return 0;
20002418:	2300      	movs	r3, #0
2000241a:	e01e      	b.n	2000245a <bufferPut+0x5a>
    }

    //Lägger elem i bufferten
    buffer->buff[buffer->in++] = elem;
2000241c:	687b      	ldr	r3, [r7, #4]
2000241e:	2265      	movs	r2, #101	; 0x65
20002420:	5c9b      	ldrb	r3, [r3, r2]
20002422:	1c5a      	adds	r2, r3, #1
20002424:	b2d0      	uxtb	r0, r2
20002426:	687a      	ldr	r2, [r7, #4]
20002428:	2165      	movs	r1, #101	; 0x65
2000242a:	5450      	strb	r0, [r2, r1]
2000242c:	0019      	movs	r1, r3
2000242e:	687b      	ldr	r3, [r7, #4]
20002430:	1cfa      	adds	r2, r7, #3
20002432:	7812      	ldrb	r2, [r2, #0]
20002434:	545a      	strb	r2, [r3, r1]
    buffer->count++;
20002436:	687b      	ldr	r3, [r7, #4]
20002438:	2264      	movs	r2, #100	; 0x64
2000243a:	5c9b      	ldrb	r3, [r3, r2]
2000243c:	3301      	adds	r3, #1
2000243e:	b2d9      	uxtb	r1, r3
20002440:	687b      	ldr	r3, [r7, #4]
20002442:	2264      	movs	r2, #100	; 0x64
20002444:	5499      	strb	r1, [r3, r2]

    //Justerar pekaren om vi nått slutet
    if (buffer->in == BUFFERSIZE)
20002446:	687b      	ldr	r3, [r7, #4]
20002448:	2265      	movs	r2, #101	; 0x65
2000244a:	5c9b      	ldrb	r3, [r3, r2]
2000244c:	2b64      	cmp	r3, #100	; 0x64
2000244e:	d103      	bne.n	20002458 <bufferPut+0x58>
        buffer->in = 0;
20002450:	687b      	ldr	r3, [r7, #4]
20002452:	2265      	movs	r2, #101	; 0x65
20002454:	2100      	movs	r1, #0
20002456:	5499      	strb	r1, [r3, r2]

    return 1;
20002458:	2301      	movs	r3, #1
}
2000245a:	0018      	movs	r0, r3
2000245c:	46bd      	mov	sp, r7
2000245e:	b002      	add	sp, #8
20002460:	bd80      	pop	{r7, pc}

20002462 <bufferOverrideLast>:

//Skriver över föregående elem i buffern.
//Ändrar inga indexeringsvariabler
void bufferOverrideLast ( FIFO *buffer, uint8_t elem) {
20002462:	b580      	push	{r7, lr}
20002464:	b084      	sub	sp, #16
20002466:	af00      	add	r7, sp, #0
20002468:	6078      	str	r0, [r7, #4]
2000246a:	000a      	movs	r2, r1
2000246c:	1cfb      	adds	r3, r7, #3
2000246e:	701a      	strb	r2, [r3, #0]
    //Index för föregående element i buffern
    uint8_t prevIndex;

    //Om index för nästa element är 0 så blir föregående BUFFERSIZE - 1
    //annars buffer->in - 1
    prevIndex =  (buffer->in == 0) ? BUFFERSIZE - 1 : buffer->in - 1;
20002470:	687b      	ldr	r3, [r7, #4]
20002472:	2265      	movs	r2, #101	; 0x65
20002474:	5c9b      	ldrb	r3, [r3, r2]
20002476:	2b00      	cmp	r3, #0
20002478:	d005      	beq.n	20002486 <bufferOverrideLast+0x24>
2000247a:	687b      	ldr	r3, [r7, #4]
2000247c:	2265      	movs	r2, #101	; 0x65
2000247e:	5c9b      	ldrb	r3, [r3, r2]
20002480:	3b01      	subs	r3, #1
20002482:	b2da      	uxtb	r2, r3
20002484:	e000      	b.n	20002488 <bufferOverrideLast+0x26>
20002486:	2263      	movs	r2, #99	; 0x63
20002488:	210f      	movs	r1, #15
2000248a:	187b      	adds	r3, r7, r1
2000248c:	701a      	strb	r2, [r3, #0]

    //Skriver över elem i bufferten
    buffer->buff[prevIndex] = elem;
2000248e:	187b      	adds	r3, r7, r1
20002490:	781b      	ldrb	r3, [r3, #0]
20002492:	687a      	ldr	r2, [r7, #4]
20002494:	1cf9      	adds	r1, r7, #3
20002496:	7809      	ldrb	r1, [r1, #0]
20002498:	54d1      	strb	r1, [r2, r3]
}
2000249a:	46c0      	nop			; (mov r8, r8)
2000249c:	46bd      	mov	sp, r7
2000249e:	b004      	add	sp, #16
200024a0:	bd80      	pop	{r7, pc}

200024a2 <bufferGet>:

//Hämtar ett element från buffern till dest.
//Returnerar 1 om det lyckades, 0 annars.
uint8_t bufferGet ( FIFO *buffer, uint8_t *dest) {
200024a2:	b580      	push	{r7, lr}
200024a4:	b082      	sub	sp, #8
200024a6:	af00      	add	r7, sp, #0
200024a8:	6078      	str	r0, [r7, #4]
200024aa:	6039      	str	r1, [r7, #0]
    //Kollar om bufferten är tom
    if (!buffer->count){
200024ac:	687b      	ldr	r3, [r7, #4]
200024ae:	2264      	movs	r2, #100	; 0x64
200024b0:	5c9b      	ldrb	r3, [r3, r2]
200024b2:	2b00      	cmp	r3, #0
200024b4:	d101      	bne.n	200024ba <bufferGet+0x18>
        return 0;
200024b6:	2300      	movs	r3, #0
200024b8:	e01e      	b.n	200024f8 <bufferGet+0x56>
    }

    //Hämtar element ur buffern till dest
    *dest = buffer->buff[buffer->out++];
200024ba:	687b      	ldr	r3, [r7, #4]
200024bc:	2266      	movs	r2, #102	; 0x66
200024be:	5c9b      	ldrb	r3, [r3, r2]
200024c0:	1c5a      	adds	r2, r3, #1
200024c2:	b2d0      	uxtb	r0, r2
200024c4:	687a      	ldr	r2, [r7, #4]
200024c6:	2166      	movs	r1, #102	; 0x66
200024c8:	5450      	strb	r0, [r2, r1]
200024ca:	001a      	movs	r2, r3
200024cc:	687b      	ldr	r3, [r7, #4]
200024ce:	5c9a      	ldrb	r2, [r3, r2]
200024d0:	683b      	ldr	r3, [r7, #0]
200024d2:	701a      	strb	r2, [r3, #0]
    buffer->count--;
200024d4:	687b      	ldr	r3, [r7, #4]
200024d6:	2264      	movs	r2, #100	; 0x64
200024d8:	5c9b      	ldrb	r3, [r3, r2]
200024da:	3b01      	subs	r3, #1
200024dc:	b2d9      	uxtb	r1, r3
200024de:	687b      	ldr	r3, [r7, #4]
200024e0:	2264      	movs	r2, #100	; 0x64
200024e2:	5499      	strb	r1, [r3, r2]

    //Justerar pekaren om vi nått slutet
    if (buffer->out == BUFFERSIZE)
200024e4:	687b      	ldr	r3, [r7, #4]
200024e6:	2266      	movs	r2, #102	; 0x66
200024e8:	5c9b      	ldrb	r3, [r3, r2]
200024ea:	2b64      	cmp	r3, #100	; 0x64
200024ec:	d103      	bne.n	200024f6 <bufferGet+0x54>
        buffer->out = 0;
200024ee:	687b      	ldr	r3, [r7, #4]
200024f0:	2266      	movs	r2, #102	; 0x66
200024f2:	2100      	movs	r1, #0
200024f4:	5499      	strb	r1, [r3, r2]

    return 1;
200024f6:	2301      	movs	r3, #1
200024f8:	0018      	movs	r0, r3
200024fa:	46bd      	mov	sp, r7
200024fc:	b002      	add	sp, #8
200024fe:	bd80      	pop	{r7, pc}

20002500 <USART_DeInit>:
  * @param  USARTx: where x can be 1, 2, 3, 4, 5, 6, 7 or 8 to select the USART or 
  *         UART peripheral.
  * @retval None
  */
void USART_DeInit(USART_TypeDef* USARTx)
{
20002500:	b580      	push	{r7, lr}
20002502:	b082      	sub	sp, #8
20002504:	af00      	add	r7, sp, #0
20002506:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  if (USARTx == USART1)
20002508:	687b      	ldr	r3, [r7, #4]
2000250a:	4a41      	ldr	r2, [pc, #260]	; (20002610 <USART_DeInit+0x110>)
2000250c:	4293      	cmp	r3, r2
2000250e:	d108      	bne.n	20002522 <USART_DeInit+0x22>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, ENABLE);
20002510:	2101      	movs	r1, #1
20002512:	2010      	movs	r0, #16
20002514:	f7fe fac0 	bl	20000a98 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, DISABLE);
20002518:	2100      	movs	r1, #0
2000251a:	2010      	movs	r0, #16
2000251c:	f7fe fabc 	bl	20000a98 <RCC_APB2PeriphResetCmd>
    { 
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART8, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART8, DISABLE);
    }
  }
}
20002520:	e071      	b.n	20002606 <USART_DeInit+0x106>
  else if (USARTx == USART2)
20002522:	687b      	ldr	r3, [r7, #4]
20002524:	4a3b      	ldr	r2, [pc, #236]	; (20002614 <USART_DeInit+0x114>)
20002526:	4293      	cmp	r3, r2
20002528:	d10c      	bne.n	20002544 <USART_DeInit+0x44>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, ENABLE);
2000252a:	2380      	movs	r3, #128	; 0x80
2000252c:	029b      	lsls	r3, r3, #10
2000252e:	2101      	movs	r1, #1
20002530:	0018      	movs	r0, r3
20002532:	f7fe fa91 	bl	20000a58 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, DISABLE);
20002536:	2380      	movs	r3, #128	; 0x80
20002538:	029b      	lsls	r3, r3, #10
2000253a:	2100      	movs	r1, #0
2000253c:	0018      	movs	r0, r3
2000253e:	f7fe fa8b 	bl	20000a58 <RCC_APB1PeriphResetCmd>
}
20002542:	e060      	b.n	20002606 <USART_DeInit+0x106>
  else if (USARTx == USART3)
20002544:	687b      	ldr	r3, [r7, #4]
20002546:	4a34      	ldr	r2, [pc, #208]	; (20002618 <USART_DeInit+0x118>)
20002548:	4293      	cmp	r3, r2
2000254a:	d10c      	bne.n	20002566 <USART_DeInit+0x66>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, ENABLE);
2000254c:	2380      	movs	r3, #128	; 0x80
2000254e:	02db      	lsls	r3, r3, #11
20002550:	2101      	movs	r1, #1
20002552:	0018      	movs	r0, r3
20002554:	f7fe fa80 	bl	20000a58 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, DISABLE);
20002558:	2380      	movs	r3, #128	; 0x80
2000255a:	02db      	lsls	r3, r3, #11
2000255c:	2100      	movs	r1, #0
2000255e:	0018      	movs	r0, r3
20002560:	f7fe fa7a 	bl	20000a58 <RCC_APB1PeriphResetCmd>
}
20002564:	e04f      	b.n	20002606 <USART_DeInit+0x106>
  else if (USARTx == UART4)
20002566:	687b      	ldr	r3, [r7, #4]
20002568:	4a2c      	ldr	r2, [pc, #176]	; (2000261c <USART_DeInit+0x11c>)
2000256a:	4293      	cmp	r3, r2
2000256c:	d10c      	bne.n	20002588 <USART_DeInit+0x88>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, ENABLE);
2000256e:	2380      	movs	r3, #128	; 0x80
20002570:	031b      	lsls	r3, r3, #12
20002572:	2101      	movs	r1, #1
20002574:	0018      	movs	r0, r3
20002576:	f7fe fa6f 	bl	20000a58 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, DISABLE);
2000257a:	2380      	movs	r3, #128	; 0x80
2000257c:	031b      	lsls	r3, r3, #12
2000257e:	2100      	movs	r1, #0
20002580:	0018      	movs	r0, r3
20002582:	f7fe fa69 	bl	20000a58 <RCC_APB1PeriphResetCmd>
}
20002586:	e03e      	b.n	20002606 <USART_DeInit+0x106>
  else if (USARTx == UART5)
20002588:	687b      	ldr	r3, [r7, #4]
2000258a:	4a25      	ldr	r2, [pc, #148]	; (20002620 <USART_DeInit+0x120>)
2000258c:	4293      	cmp	r3, r2
2000258e:	d10c      	bne.n	200025aa <USART_DeInit+0xaa>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, ENABLE);
20002590:	2380      	movs	r3, #128	; 0x80
20002592:	035b      	lsls	r3, r3, #13
20002594:	2101      	movs	r1, #1
20002596:	0018      	movs	r0, r3
20002598:	f7fe fa5e 	bl	20000a58 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, DISABLE);
2000259c:	2380      	movs	r3, #128	; 0x80
2000259e:	035b      	lsls	r3, r3, #13
200025a0:	2100      	movs	r1, #0
200025a2:	0018      	movs	r0, r3
200025a4:	f7fe fa58 	bl	20000a58 <RCC_APB1PeriphResetCmd>
}
200025a8:	e02d      	b.n	20002606 <USART_DeInit+0x106>
  else if (USARTx == USART6)
200025aa:	687b      	ldr	r3, [r7, #4]
200025ac:	4a1d      	ldr	r2, [pc, #116]	; (20002624 <USART_DeInit+0x124>)
200025ae:	4293      	cmp	r3, r2
200025b0:	d108      	bne.n	200025c4 <USART_DeInit+0xc4>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, ENABLE);
200025b2:	2101      	movs	r1, #1
200025b4:	2020      	movs	r0, #32
200025b6:	f7fe fa6f 	bl	20000a98 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, DISABLE);
200025ba:	2100      	movs	r1, #0
200025bc:	2020      	movs	r0, #32
200025be:	f7fe fa6b 	bl	20000a98 <RCC_APB2PeriphResetCmd>
}
200025c2:	e020      	b.n	20002606 <USART_DeInit+0x106>
  else if (USARTx == UART7)
200025c4:	687b      	ldr	r3, [r7, #4]
200025c6:	4a18      	ldr	r2, [pc, #96]	; (20002628 <USART_DeInit+0x128>)
200025c8:	4293      	cmp	r3, r2
200025ca:	d10c      	bne.n	200025e6 <USART_DeInit+0xe6>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART7, ENABLE);
200025cc:	2380      	movs	r3, #128	; 0x80
200025ce:	05db      	lsls	r3, r3, #23
200025d0:	2101      	movs	r1, #1
200025d2:	0018      	movs	r0, r3
200025d4:	f7fe fa40 	bl	20000a58 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART7, DISABLE);
200025d8:	2380      	movs	r3, #128	; 0x80
200025da:	05db      	lsls	r3, r3, #23
200025dc:	2100      	movs	r1, #0
200025de:	0018      	movs	r0, r3
200025e0:	f7fe fa3a 	bl	20000a58 <RCC_APB1PeriphResetCmd>
}
200025e4:	e00f      	b.n	20002606 <USART_DeInit+0x106>
    if (USARTx == UART8)
200025e6:	687b      	ldr	r3, [r7, #4]
200025e8:	4a10      	ldr	r2, [pc, #64]	; (2000262c <USART_DeInit+0x12c>)
200025ea:	4293      	cmp	r3, r2
200025ec:	d10b      	bne.n	20002606 <USART_DeInit+0x106>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART8, ENABLE);
200025ee:	2380      	movs	r3, #128	; 0x80
200025f0:	061b      	lsls	r3, r3, #24
200025f2:	2101      	movs	r1, #1
200025f4:	0018      	movs	r0, r3
200025f6:	f7fe fa2f 	bl	20000a58 <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART8, DISABLE);
200025fa:	2380      	movs	r3, #128	; 0x80
200025fc:	061b      	lsls	r3, r3, #24
200025fe:	2100      	movs	r1, #0
20002600:	0018      	movs	r0, r3
20002602:	f7fe fa29 	bl	20000a58 <RCC_APB1PeriphResetCmd>
}
20002606:	46c0      	nop			; (mov r8, r8)
20002608:	46bd      	mov	sp, r7
2000260a:	b002      	add	sp, #8
2000260c:	bd80      	pop	{r7, pc}
2000260e:	46c0      	nop			; (mov r8, r8)
20002610:	40011000 	andmi	r1, r1, r0
20002614:	40004400 	andmi	r4, r0, r0, lsl #8
20002618:	40004800 	andmi	r4, r0, r0, lsl #16
2000261c:	40004c00 	andmi	r4, r0, r0, lsl #24
20002620:	40005000 	andmi	r5, r0, r0
20002624:	40011400 	andmi	r1, r1, r0, lsl #8
20002628:	40007800 	andmi	r7, r0, r0, lsl #16
2000262c:	40007c00 	andmi	r7, r0, r0, lsl #24

20002630 <USART_Init>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
20002630:	b580      	push	{r7, lr}
20002632:	b08a      	sub	sp, #40	; 0x28
20002634:	af00      	add	r7, sp, #0
20002636:	6078      	str	r0, [r7, #4]
20002638:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00, apbclock = 0x00;
2000263a:	2300      	movs	r3, #0
2000263c:	627b      	str	r3, [r7, #36]	; 0x24
2000263e:	2300      	movs	r3, #0
20002640:	623b      	str	r3, [r7, #32]
  uint32_t integerdivider = 0x00;
20002642:	2300      	movs	r3, #0
20002644:	61fb      	str	r3, [r7, #28]
  uint32_t fractionaldivider = 0x00;
20002646:	2300      	movs	r3, #0
20002648:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  }

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
2000264a:	687b      	ldr	r3, [r7, #4]
2000264c:	8a1b      	ldrh	r3, [r3, #16]
2000264e:	b29b      	uxth	r3, r3
20002650:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
20002652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20002654:	4a56      	ldr	r2, [pc, #344]	; (200027b0 <USART_Init+0x180>)
20002656:	4013      	ands	r3, r2
20002658:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit :
      Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
2000265a:	683b      	ldr	r3, [r7, #0]
2000265c:	88db      	ldrh	r3, [r3, #6]
2000265e:	001a      	movs	r2, r3
20002660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20002662:	4313      	orrs	r3, r2
20002664:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
20002666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20002668:	b29a      	uxth	r2, r3
2000266a:	687b      	ldr	r3, [r7, #4]
2000266c:	821a      	strh	r2, [r3, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
2000266e:	687b      	ldr	r3, [r7, #4]
20002670:	899b      	ldrh	r3, [r3, #12]
20002672:	b29b      	uxth	r3, r3
20002674:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
20002676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20002678:	4a4e      	ldr	r2, [pc, #312]	; (200027b4 <USART_Init+0x184>)
2000267a:	4013      	ands	r3, r2
2000267c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
2000267e:	683b      	ldr	r3, [r7, #0]
20002680:	889a      	ldrh	r2, [r3, #4]
20002682:	683b      	ldr	r3, [r7, #0]
20002684:	891b      	ldrh	r3, [r3, #8]
20002686:	4313      	orrs	r3, r2
20002688:	b29a      	uxth	r2, r3
            USART_InitStruct->USART_Mode;
2000268a:	683b      	ldr	r3, [r7, #0]
2000268c:	895b      	ldrh	r3, [r3, #10]
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
2000268e:	4313      	orrs	r3, r2
20002690:	b29b      	uxth	r3, r3
20002692:	001a      	movs	r2, r3
20002694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20002696:	4313      	orrs	r3, r2
20002698:	627b      	str	r3, [r7, #36]	; 0x24

  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
2000269a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
2000269c:	b29a      	uxth	r2, r3
2000269e:	687b      	ldr	r3, [r7, #4]
200026a0:	819a      	strh	r2, [r3, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
200026a2:	687b      	ldr	r3, [r7, #4]
200026a4:	8a9b      	ldrh	r3, [r3, #20]
200026a6:	b29b      	uxth	r3, r3
200026a8:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);
200026aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
200026ac:	4a42      	ldr	r2, [pc, #264]	; (200027b8 <USART_Init+0x188>)
200026ae:	4013      	ands	r3, r2
200026b0:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART HFC : 
      Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
200026b2:	683b      	ldr	r3, [r7, #0]
200026b4:	899b      	ldrh	r3, [r3, #12]
200026b6:	001a      	movs	r2, r3
200026b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
200026ba:	4313      	orrs	r3, r2
200026bc:	627b      	str	r3, [r7, #36]	; 0x24

  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
200026be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
200026c0:	b29a      	uxth	r2, r3
200026c2:	687b      	ldr	r3, [r7, #4]
200026c4:	829a      	strh	r2, [r3, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate */
  RCC_GetClocksFreq(&RCC_ClocksStatus);
200026c6:	2308      	movs	r3, #8
200026c8:	18fb      	adds	r3, r7, r3
200026ca:	0018      	movs	r0, r3
200026cc:	f7fd ff14 	bl	200004f8 <RCC_GetClocksFreq>

  if ((USARTx == USART1) || (USARTx == USART6))
200026d0:	687b      	ldr	r3, [r7, #4]
200026d2:	4a3a      	ldr	r2, [pc, #232]	; (200027bc <USART_Init+0x18c>)
200026d4:	4293      	cmp	r3, r2
200026d6:	d003      	beq.n	200026e0 <USART_Init+0xb0>
200026d8:	687b      	ldr	r3, [r7, #4]
200026da:	4a39      	ldr	r2, [pc, #228]	; (200027c0 <USART_Init+0x190>)
200026dc:	4293      	cmp	r3, r2
200026de:	d104      	bne.n	200026ea <USART_Init+0xba>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
200026e0:	2308      	movs	r3, #8
200026e2:	18fb      	adds	r3, r7, r3
200026e4:	68db      	ldr	r3, [r3, #12]
200026e6:	623b      	str	r3, [r7, #32]
200026e8:	e003      	b.n	200026f2 <USART_Init+0xc2>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
200026ea:	2308      	movs	r3, #8
200026ec:	18fb      	adds	r3, r7, r3
200026ee:	689b      	ldr	r3, [r3, #8]
200026f0:	623b      	str	r3, [r7, #32]
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
200026f2:	687b      	ldr	r3, [r7, #4]
200026f4:	899b      	ldrh	r3, [r3, #12]
200026f6:	b29b      	uxth	r3, r3
200026f8:	b21b      	sxth	r3, r3
200026fa:	2b00      	cmp	r3, #0
200026fc:	da0f      	bge.n	2000271e <USART_Init+0xee>
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
200026fe:	6a3a      	ldr	r2, [r7, #32]
20002700:	0013      	movs	r3, r2
20002702:	009b      	lsls	r3, r3, #2
20002704:	189b      	adds	r3, r3, r2
20002706:	009a      	lsls	r2, r3, #2
20002708:	189a      	adds	r2, r3, r2
2000270a:	683b      	ldr	r3, [r7, #0]
2000270c:	681b      	ldr	r3, [r3, #0]
2000270e:	005b      	lsls	r3, r3, #1
20002710:	0019      	movs	r1, r3
20002712:	0010      	movs	r0, r2
20002714:	f000 fbf4 	bl	20002f00 <__udivsi3>
20002718:	0003      	movs	r3, r0
2000271a:	61fb      	str	r3, [r7, #28]
2000271c:	e00e      	b.n	2000273c <USART_Init+0x10c>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
2000271e:	6a3a      	ldr	r2, [r7, #32]
20002720:	0013      	movs	r3, r2
20002722:	009b      	lsls	r3, r3, #2
20002724:	189b      	adds	r3, r3, r2
20002726:	009a      	lsls	r2, r3, #2
20002728:	189a      	adds	r2, r3, r2
2000272a:	683b      	ldr	r3, [r7, #0]
2000272c:	681b      	ldr	r3, [r3, #0]
2000272e:	009b      	lsls	r3, r3, #2
20002730:	0019      	movs	r1, r3
20002732:	0010      	movs	r0, r2
20002734:	f000 fbe4 	bl	20002f00 <__udivsi3>
20002738:	0003      	movs	r3, r0
2000273a:	61fb      	str	r3, [r7, #28]
  }
  tmpreg = (integerdivider / 100) << 4;
2000273c:	69fb      	ldr	r3, [r7, #28]
2000273e:	2164      	movs	r1, #100	; 0x64
20002740:	0018      	movs	r0, r3
20002742:	f000 fbdd 	bl	20002f00 <__udivsi3>
20002746:	0003      	movs	r3, r0
20002748:	011b      	lsls	r3, r3, #4
2000274a:	627b      	str	r3, [r7, #36]	; 0x24

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
2000274c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
2000274e:	091b      	lsrs	r3, r3, #4
20002750:	2264      	movs	r2, #100	; 0x64
20002752:	4353      	muls	r3, r2
20002754:	69fa      	ldr	r2, [r7, #28]
20002756:	1ad3      	subs	r3, r2, r3
20002758:	61bb      	str	r3, [r7, #24]

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
2000275a:	687b      	ldr	r3, [r7, #4]
2000275c:	899b      	ldrh	r3, [r3, #12]
2000275e:	b29b      	uxth	r3, r3
20002760:	b21b      	sxth	r3, r3
20002762:	2b00      	cmp	r3, #0
20002764:	da0e      	bge.n	20002784 <USART_Init+0x154>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
20002766:	69bb      	ldr	r3, [r7, #24]
20002768:	00db      	lsls	r3, r3, #3
2000276a:	3332      	adds	r3, #50	; 0x32
2000276c:	2164      	movs	r1, #100	; 0x64
2000276e:	0018      	movs	r0, r3
20002770:	f000 fbc6 	bl	20002f00 <__udivsi3>
20002774:	0003      	movs	r3, r0
20002776:	001a      	movs	r2, r3
20002778:	2307      	movs	r3, #7
2000277a:	4013      	ands	r3, r2
2000277c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
2000277e:	4313      	orrs	r3, r2
20002780:	627b      	str	r3, [r7, #36]	; 0x24
20002782:	e00d      	b.n	200027a0 <USART_Init+0x170>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
20002784:	69bb      	ldr	r3, [r7, #24]
20002786:	011b      	lsls	r3, r3, #4
20002788:	3332      	adds	r3, #50	; 0x32
2000278a:	2164      	movs	r1, #100	; 0x64
2000278c:	0018      	movs	r0, r3
2000278e:	f000 fbb7 	bl	20002f00 <__udivsi3>
20002792:	0003      	movs	r3, r0
20002794:	001a      	movs	r2, r3
20002796:	230f      	movs	r3, #15
20002798:	4013      	ands	r3, r2
2000279a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
2000279c:	4313      	orrs	r3, r2
2000279e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  
  /* Write to USART BRR register */
  USARTx->BRR = (uint16_t)tmpreg;
200027a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
200027a2:	b29a      	uxth	r2, r3
200027a4:	687b      	ldr	r3, [r7, #4]
200027a6:	811a      	strh	r2, [r3, #8]
}
200027a8:	46c0      	nop			; (mov r8, r8)
200027aa:	46bd      	mov	sp, r7
200027ac:	b00a      	add	sp, #40	; 0x28
200027ae:	bd80      	pop	{r7, pc}
200027b0:	ffffcfff 			; <UNDEFINED> instruction: 0xffffcfff
200027b4:	ffffe9f3 			; <UNDEFINED> instruction: 0xffffe9f3
200027b8:	fffffcff 			; <UNDEFINED> instruction: 0xfffffcff
200027bc:	40011000 	andmi	r1, r1, r0
200027c0:	40011400 	andmi	r1, r1, r0, lsl #8

200027c4 <USART_StructInit>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void USART_StructInit(USART_InitTypeDef* USART_InitStruct)
{
200027c4:	b580      	push	{r7, lr}
200027c6:	b082      	sub	sp, #8
200027c8:	af00      	add	r7, sp, #0
200027ca:	6078      	str	r0, [r7, #4]
  /* USART_InitStruct members default value */
  USART_InitStruct->USART_BaudRate = 9600;
200027cc:	687b      	ldr	r3, [r7, #4]
200027ce:	2296      	movs	r2, #150	; 0x96
200027d0:	0192      	lsls	r2, r2, #6
200027d2:	601a      	str	r2, [r3, #0]
  USART_InitStruct->USART_WordLength = USART_WordLength_8b;
200027d4:	687b      	ldr	r3, [r7, #4]
200027d6:	2200      	movs	r2, #0
200027d8:	809a      	strh	r2, [r3, #4]
  USART_InitStruct->USART_StopBits = USART_StopBits_1;
200027da:	687b      	ldr	r3, [r7, #4]
200027dc:	2200      	movs	r2, #0
200027de:	80da      	strh	r2, [r3, #6]
  USART_InitStruct->USART_Parity = USART_Parity_No ;
200027e0:	687b      	ldr	r3, [r7, #4]
200027e2:	2200      	movs	r2, #0
200027e4:	811a      	strh	r2, [r3, #8]
  USART_InitStruct->USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
200027e6:	687b      	ldr	r3, [r7, #4]
200027e8:	220c      	movs	r2, #12
200027ea:	815a      	strh	r2, [r3, #10]
  USART_InitStruct->USART_HardwareFlowControl = USART_HardwareFlowControl_None;  
200027ec:	687b      	ldr	r3, [r7, #4]
200027ee:	2200      	movs	r2, #0
200027f0:	819a      	strh	r2, [r3, #12]
}
200027f2:	46c0      	nop			; (mov r8, r8)
200027f4:	46bd      	mov	sp, r7
200027f6:	b002      	add	sp, #8
200027f8:	bd80      	pop	{r7, pc}

200027fa <USART_ClockInit>:
  *         contains the configuration information for the specified  USART peripheral.
  * @note   The Smart Card and Synchronous modes are not available for UART4 and UART5.    
  * @retval None
  */
void USART_ClockInit(USART_TypeDef* USARTx, USART_ClockInitTypeDef* USART_ClockInitStruct)
{
200027fa:	b580      	push	{r7, lr}
200027fc:	b084      	sub	sp, #16
200027fe:	af00      	add	r7, sp, #0
20002800:	6078      	str	r0, [r7, #4]
20002802:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00;
20002804:	2300      	movs	r3, #0
20002806:	60fb      	str	r3, [r7, #12]
  assert_param(IS_USART_CPOL(USART_ClockInitStruct->USART_CPOL));
  assert_param(IS_USART_CPHA(USART_ClockInitStruct->USART_CPHA));
  assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));
  
/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
20002808:	687b      	ldr	r3, [r7, #4]
2000280a:	8a1b      	ldrh	r3, [r3, #16]
2000280c:	b29b      	uxth	r3, r3
2000280e:	60fb      	str	r3, [r7, #12]
  /* Clear CLKEN, CPOL, CPHA and LBCL bits */
  tmpreg &= (uint32_t)~((uint32_t)CR2_CLOCK_CLEAR_MASK);
20002810:	68fb      	ldr	r3, [r7, #12]
20002812:	4a0e      	ldr	r2, [pc, #56]	; (2000284c <USART_ClockInit+0x52>)
20002814:	4013      	ands	r3, r2
20002816:	60fb      	str	r3, [r7, #12]
  /* Configure the USART Clock, CPOL, CPHA and LastBit ------------*/
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
20002818:	683b      	ldr	r3, [r7, #0]
2000281a:	881a      	ldrh	r2, [r3, #0]
2000281c:	683b      	ldr	r3, [r7, #0]
2000281e:	885b      	ldrh	r3, [r3, #2]
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
20002820:	4313      	orrs	r3, r2
20002822:	b29a      	uxth	r2, r3
20002824:	683b      	ldr	r3, [r7, #0]
20002826:	889b      	ldrh	r3, [r3, #4]
20002828:	4313      	orrs	r3, r2
2000282a:	b29a      	uxth	r2, r3
2000282c:	683b      	ldr	r3, [r7, #0]
2000282e:	88db      	ldrh	r3, [r3, #6]
20002830:	4313      	orrs	r3, r2
20002832:	b29b      	uxth	r3, r3
20002834:	001a      	movs	r2, r3
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
20002836:	68fb      	ldr	r3, [r7, #12]
20002838:	4313      	orrs	r3, r2
2000283a:	60fb      	str	r3, [r7, #12]
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
2000283c:	68fb      	ldr	r3, [r7, #12]
2000283e:	b29a      	uxth	r2, r3
20002840:	687b      	ldr	r3, [r7, #4]
20002842:	821a      	strh	r2, [r3, #16]
}
20002844:	46c0      	nop			; (mov r8, r8)
20002846:	46bd      	mov	sp, r7
20002848:	b004      	add	sp, #16
2000284a:	bd80      	pop	{r7, pc}
2000284c:	fffff0ff 			; <UNDEFINED> instruction: 0xfffff0ff

20002850 <USART_ClockStructInit>:
  * @param  USART_ClockInitStruct: pointer to a USART_ClockInitTypeDef structure
  *         which will be initialized.
  * @retval None
  */
void USART_ClockStructInit(USART_ClockInitTypeDef* USART_ClockInitStruct)
{
20002850:	b580      	push	{r7, lr}
20002852:	b082      	sub	sp, #8
20002854:	af00      	add	r7, sp, #0
20002856:	6078      	str	r0, [r7, #4]
  /* USART_ClockInitStruct members default value */
  USART_ClockInitStruct->USART_Clock = USART_Clock_Disable;
20002858:	687b      	ldr	r3, [r7, #4]
2000285a:	2200      	movs	r2, #0
2000285c:	801a      	strh	r2, [r3, #0]
  USART_ClockInitStruct->USART_CPOL = USART_CPOL_Low;
2000285e:	687b      	ldr	r3, [r7, #4]
20002860:	2200      	movs	r2, #0
20002862:	805a      	strh	r2, [r3, #2]
  USART_ClockInitStruct->USART_CPHA = USART_CPHA_1Edge;
20002864:	687b      	ldr	r3, [r7, #4]
20002866:	2200      	movs	r2, #0
20002868:	809a      	strh	r2, [r3, #4]
  USART_ClockInitStruct->USART_LastBit = USART_LastBit_Disable;
2000286a:	687b      	ldr	r3, [r7, #4]
2000286c:	2200      	movs	r2, #0
2000286e:	80da      	strh	r2, [r3, #6]
}
20002870:	46c0      	nop			; (mov r8, r8)
20002872:	46bd      	mov	sp, r7
20002874:	b002      	add	sp, #8
20002876:	bd80      	pop	{r7, pc}

20002878 <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
20002878:	b580      	push	{r7, lr}
2000287a:	b082      	sub	sp, #8
2000287c:	af00      	add	r7, sp, #0
2000287e:	6078      	str	r0, [r7, #4]
20002880:	000a      	movs	r2, r1
20002882:	1cfb      	adds	r3, r7, #3
20002884:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
20002886:	1cfb      	adds	r3, r7, #3
20002888:	781b      	ldrb	r3, [r3, #0]
2000288a:	2b00      	cmp	r3, #0
2000288c:	d009      	beq.n	200028a2 <USART_Cmd+0x2a>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_UE;
2000288e:	687b      	ldr	r3, [r7, #4]
20002890:	899b      	ldrh	r3, [r3, #12]
20002892:	b29b      	uxth	r3, r3
20002894:	2280      	movs	r2, #128	; 0x80
20002896:	0192      	lsls	r2, r2, #6
20002898:	4313      	orrs	r3, r2
2000289a:	b29a      	uxth	r2, r3
2000289c:	687b      	ldr	r3, [r7, #4]
2000289e:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
  }
}
200028a0:	e007      	b.n	200028b2 <USART_Cmd+0x3a>
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
200028a2:	687b      	ldr	r3, [r7, #4]
200028a4:	899b      	ldrh	r3, [r3, #12]
200028a6:	b29b      	uxth	r3, r3
200028a8:	4a04      	ldr	r2, [pc, #16]	; (200028bc <USART_Cmd+0x44>)
200028aa:	4013      	ands	r3, r2
200028ac:	b29a      	uxth	r2, r3
200028ae:	687b      	ldr	r3, [r7, #4]
200028b0:	819a      	strh	r2, [r3, #12]
}
200028b2:	46c0      	nop			; (mov r8, r8)
200028b4:	46bd      	mov	sp, r7
200028b6:	b002      	add	sp, #8
200028b8:	bd80      	pop	{r7, pc}
200028ba:	46c0      	nop			; (mov r8, r8)
200028bc:	ffffdfff 			; <UNDEFINED> instruction: 0xffffdfff

200028c0 <USART_SetPrescaler>:
  * @param  USART_Prescaler: specifies the prescaler clock. 
  * @note   The function is used for IrDA mode with UART4 and UART5.   
  * @retval None
  */
void USART_SetPrescaler(USART_TypeDef* USARTx, uint8_t USART_Prescaler)
{ 
200028c0:	b580      	push	{r7, lr}
200028c2:	b082      	sub	sp, #8
200028c4:	af00      	add	r7, sp, #0
200028c6:	6078      	str	r0, [r7, #4]
200028c8:	000a      	movs	r2, r1
200028ca:	1cfb      	adds	r3, r7, #3
200028cc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Clear the USART prescaler */
  USARTx->GTPR &= USART_GTPR_GT;
200028ce:	687b      	ldr	r3, [r7, #4]
200028d0:	8b1b      	ldrh	r3, [r3, #24]
200028d2:	b29b      	uxth	r3, r3
200028d4:	22ff      	movs	r2, #255	; 0xff
200028d6:	4393      	bics	r3, r2
200028d8:	b29a      	uxth	r2, r3
200028da:	687b      	ldr	r3, [r7, #4]
200028dc:	831a      	strh	r2, [r3, #24]
  /* Set the USART prescaler */
  USARTx->GTPR |= USART_Prescaler;
200028de:	687b      	ldr	r3, [r7, #4]
200028e0:	8b1b      	ldrh	r3, [r3, #24]
200028e2:	b29a      	uxth	r2, r3
200028e4:	1cfb      	adds	r3, r7, #3
200028e6:	781b      	ldrb	r3, [r3, #0]
200028e8:	b29b      	uxth	r3, r3
200028ea:	4313      	orrs	r3, r2
200028ec:	b29a      	uxth	r2, r3
200028ee:	687b      	ldr	r3, [r7, #4]
200028f0:	831a      	strh	r2, [r3, #24]
}
200028f2:	46c0      	nop			; (mov r8, r8)
200028f4:	46bd      	mov	sp, r7
200028f6:	b002      	add	sp, #8
200028f8:	bd80      	pop	{r7, pc}

200028fa <USART_OverSampling8Cmd>:
  * @param  NewState: new state of the USART 8x oversampling mode.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_OverSampling8Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
200028fa:	b580      	push	{r7, lr}
200028fc:	b082      	sub	sp, #8
200028fe:	af00      	add	r7, sp, #0
20002900:	6078      	str	r0, [r7, #4]
20002902:	000a      	movs	r2, r1
20002904:	1cfb      	adds	r3, r7, #3
20002906:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
20002908:	1cfb      	adds	r3, r7, #3
2000290a:	781b      	ldrb	r3, [r3, #0]
2000290c:	2b00      	cmp	r3, #0
2000290e:	d008      	beq.n	20002922 <USART_OverSampling8Cmd+0x28>
  {
    /* Enable the 8x Oversampling mode by setting the OVER8 bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_OVER8;
20002910:	687b      	ldr	r3, [r7, #4]
20002912:	899b      	ldrh	r3, [r3, #12]
20002914:	b29b      	uxth	r3, r3
20002916:	4a09      	ldr	r2, [pc, #36]	; (2000293c <USART_OverSampling8Cmd+0x42>)
20002918:	4313      	orrs	r3, r2
2000291a:	b29a      	uxth	r2, r3
2000291c:	687b      	ldr	r3, [r7, #4]
2000291e:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the 8x Oversampling mode by clearing the OVER8 bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_OVER8);
  }
}  
20002920:	e007      	b.n	20002932 <USART_OverSampling8Cmd+0x38>
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_OVER8);
20002922:	687b      	ldr	r3, [r7, #4]
20002924:	899b      	ldrh	r3, [r3, #12]
20002926:	b29b      	uxth	r3, r3
20002928:	045b      	lsls	r3, r3, #17
2000292a:	0c5b      	lsrs	r3, r3, #17
2000292c:	b29a      	uxth	r2, r3
2000292e:	687b      	ldr	r3, [r7, #4]
20002930:	819a      	strh	r2, [r3, #12]
}  
20002932:	46c0      	nop			; (mov r8, r8)
20002934:	46bd      	mov	sp, r7
20002936:	b002      	add	sp, #8
20002938:	bd80      	pop	{r7, pc}
2000293a:	46c0      	nop			; (mov r8, r8)
2000293c:	ffff8000 			; <UNDEFINED> instruction: 0xffff8000

20002940 <USART_OneBitMethodCmd>:
  * @param  NewState: new state of the USART one bit sampling method.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_OneBitMethodCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
20002940:	b580      	push	{r7, lr}
20002942:	b082      	sub	sp, #8
20002944:	af00      	add	r7, sp, #0
20002946:	6078      	str	r0, [r7, #4]
20002948:	000a      	movs	r2, r1
2000294a:	1cfb      	adds	r3, r7, #3
2000294c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
2000294e:	1cfb      	adds	r3, r7, #3
20002950:	781b      	ldrb	r3, [r3, #0]
20002952:	2b00      	cmp	r3, #0
20002954:	d009      	beq.n	2000296a <USART_OneBitMethodCmd+0x2a>
  {
    /* Enable the one bit method by setting the ONEBITE bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_ONEBIT;
20002956:	687b      	ldr	r3, [r7, #4]
20002958:	8a9b      	ldrh	r3, [r3, #20]
2000295a:	b29b      	uxth	r3, r3
2000295c:	2280      	movs	r2, #128	; 0x80
2000295e:	0112      	lsls	r2, r2, #4
20002960:	4313      	orrs	r3, r2
20002962:	b29a      	uxth	r2, r3
20002964:	687b      	ldr	r3, [r7, #4]
20002966:	829a      	strh	r2, [r3, #20]
  else
  {
    /* Disable the one bit method by clearing the ONEBITE bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_ONEBIT);
  }
}
20002968:	e007      	b.n	2000297a <USART_OneBitMethodCmd+0x3a>
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_ONEBIT);
2000296a:	687b      	ldr	r3, [r7, #4]
2000296c:	8a9b      	ldrh	r3, [r3, #20]
2000296e:	b29b      	uxth	r3, r3
20002970:	4a04      	ldr	r2, [pc, #16]	; (20002984 <USART_OneBitMethodCmd+0x44>)
20002972:	4013      	ands	r3, r2
20002974:	b29a      	uxth	r2, r3
20002976:	687b      	ldr	r3, [r7, #4]
20002978:	829a      	strh	r2, [r3, #20]
}
2000297a:	46c0      	nop			; (mov r8, r8)
2000297c:	46bd      	mov	sp, r7
2000297e:	b002      	add	sp, #8
20002980:	bd80      	pop	{r7, pc}
20002982:	46c0      	nop			; (mov r8, r8)
20002984:	fffff7ff 			; <UNDEFINED> instruction: 0xfffff7ff

20002988 <USART_SendData>:
  *         UART peripheral.
  * @param  Data: the data to transmit.
  * @retval None
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
20002988:	b580      	push	{r7, lr}
2000298a:	b082      	sub	sp, #8
2000298c:	af00      	add	r7, sp, #0
2000298e:	6078      	str	r0, [r7, #4]
20002990:	000a      	movs	r2, r1
20002992:	1cbb      	adds	r3, r7, #2
20002994:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 
    
  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
20002996:	1cbb      	adds	r3, r7, #2
20002998:	881b      	ldrh	r3, [r3, #0]
2000299a:	05db      	lsls	r3, r3, #23
2000299c:	0ddb      	lsrs	r3, r3, #23
2000299e:	b29a      	uxth	r2, r3
200029a0:	687b      	ldr	r3, [r7, #4]
200029a2:	809a      	strh	r2, [r3, #4]
}
200029a4:	46c0      	nop			; (mov r8, r8)
200029a6:	46bd      	mov	sp, r7
200029a8:	b002      	add	sp, #8
200029aa:	bd80      	pop	{r7, pc}

200029ac <USART_ReceiveData>:
  * @param  USARTx: where x can be 1, 2, 3, 4, 5, 6, 7 or 8 to select the USART or 
  *         UART peripheral.
  * @retval The received data.
  */
uint16_t USART_ReceiveData(USART_TypeDef* USARTx)
{
200029ac:	b580      	push	{r7, lr}
200029ae:	b082      	sub	sp, #8
200029b0:	af00      	add	r7, sp, #0
200029b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Receive Data */
  return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);
200029b4:	687b      	ldr	r3, [r7, #4]
200029b6:	889b      	ldrh	r3, [r3, #4]
200029b8:	b29b      	uxth	r3, r3
200029ba:	05db      	lsls	r3, r3, #23
200029bc:	0ddb      	lsrs	r3, r3, #23
200029be:	b29b      	uxth	r3, r3
}
200029c0:	0018      	movs	r0, r3
200029c2:	46bd      	mov	sp, r7
200029c4:	b002      	add	sp, #8
200029c6:	bd80      	pop	{r7, pc}

200029c8 <USART_SetAddress>:
  *         UART peripheral.
  * @param  USART_Address: Indicates the address of the USART node.
  * @retval None
  */
void USART_SetAddress(USART_TypeDef* USARTx, uint8_t USART_Address)
{
200029c8:	b580      	push	{r7, lr}
200029ca:	b082      	sub	sp, #8
200029cc:	af00      	add	r7, sp, #0
200029ce:	6078      	str	r0, [r7, #4]
200029d0:	000a      	movs	r2, r1
200029d2:	1cfb      	adds	r3, r7, #3
200029d4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_ADDRESS(USART_Address)); 
    
  /* Clear the USART address */
  USARTx->CR2 &= (uint16_t)~((uint16_t)USART_CR2_ADD);
200029d6:	687b      	ldr	r3, [r7, #4]
200029d8:	8a1b      	ldrh	r3, [r3, #16]
200029da:	b29b      	uxth	r3, r3
200029dc:	220f      	movs	r2, #15
200029de:	4393      	bics	r3, r2
200029e0:	b29a      	uxth	r2, r3
200029e2:	687b      	ldr	r3, [r7, #4]
200029e4:	821a      	strh	r2, [r3, #16]
  /* Set the USART address node */
  USARTx->CR2 |= USART_Address;
200029e6:	687b      	ldr	r3, [r7, #4]
200029e8:	8a1b      	ldrh	r3, [r3, #16]
200029ea:	b29a      	uxth	r2, r3
200029ec:	1cfb      	adds	r3, r7, #3
200029ee:	781b      	ldrb	r3, [r3, #0]
200029f0:	b29b      	uxth	r3, r3
200029f2:	4313      	orrs	r3, r2
200029f4:	b29a      	uxth	r2, r3
200029f6:	687b      	ldr	r3, [r7, #4]
200029f8:	821a      	strh	r2, [r3, #16]
}
200029fa:	46c0      	nop			; (mov r8, r8)
200029fc:	46bd      	mov	sp, r7
200029fe:	b002      	add	sp, #8
20002a00:	bd80      	pop	{r7, pc}

20002a02 <USART_ReceiverWakeUpCmd>:
  * @param  NewState: new state of the USART mute mode.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ReceiverWakeUpCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
20002a02:	b580      	push	{r7, lr}
20002a04:	b082      	sub	sp, #8
20002a06:	af00      	add	r7, sp, #0
20002a08:	6078      	str	r0, [r7, #4]
20002a0a:	000a      	movs	r2, r1
20002a0c:	1cfb      	adds	r3, r7, #3
20002a0e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 
  
  if (NewState != DISABLE)
20002a10:	1cfb      	adds	r3, r7, #3
20002a12:	781b      	ldrb	r3, [r3, #0]
20002a14:	2b00      	cmp	r3, #0
20002a16:	d008      	beq.n	20002a2a <USART_ReceiverWakeUpCmd+0x28>
  {
    /* Enable the USART mute mode  by setting the RWU bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_RWU;
20002a18:	687b      	ldr	r3, [r7, #4]
20002a1a:	899b      	ldrh	r3, [r3, #12]
20002a1c:	b29b      	uxth	r3, r3
20002a1e:	2202      	movs	r2, #2
20002a20:	4313      	orrs	r3, r2
20002a22:	b29a      	uxth	r2, r3
20002a24:	687b      	ldr	r3, [r7, #4]
20002a26:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the USART mute mode by clearing the RWU bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_RWU);
  }
}
20002a28:	e007      	b.n	20002a3a <USART_ReceiverWakeUpCmd+0x38>
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_RWU);
20002a2a:	687b      	ldr	r3, [r7, #4]
20002a2c:	899b      	ldrh	r3, [r3, #12]
20002a2e:	b29b      	uxth	r3, r3
20002a30:	2202      	movs	r2, #2
20002a32:	4393      	bics	r3, r2
20002a34:	b29a      	uxth	r2, r3
20002a36:	687b      	ldr	r3, [r7, #4]
20002a38:	819a      	strh	r2, [r3, #12]
}
20002a3a:	46c0      	nop			; (mov r8, r8)
20002a3c:	46bd      	mov	sp, r7
20002a3e:	b002      	add	sp, #8
20002a40:	bd80      	pop	{r7, pc}

20002a42 <USART_WakeUpConfig>:
  *            @arg USART_WakeUp_IdleLine: WakeUp by an idle line detection
  *            @arg USART_WakeUp_AddressMark: WakeUp by an address mark
  * @retval None
  */
void USART_WakeUpConfig(USART_TypeDef* USARTx, uint16_t USART_WakeUp)
{
20002a42:	b580      	push	{r7, lr}
20002a44:	b082      	sub	sp, #8
20002a46:	af00      	add	r7, sp, #0
20002a48:	6078      	str	r0, [r7, #4]
20002a4a:	000a      	movs	r2, r1
20002a4c:	1cbb      	adds	r3, r7, #2
20002a4e:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_WAKEUP(USART_WakeUp));
  
  USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_WAKE);
20002a50:	687b      	ldr	r3, [r7, #4]
20002a52:	899b      	ldrh	r3, [r3, #12]
20002a54:	b29b      	uxth	r3, r3
20002a56:	4a09      	ldr	r2, [pc, #36]	; (20002a7c <USART_WakeUpConfig+0x3a>)
20002a58:	4013      	ands	r3, r2
20002a5a:	b29a      	uxth	r2, r3
20002a5c:	687b      	ldr	r3, [r7, #4]
20002a5e:	819a      	strh	r2, [r3, #12]
  USARTx->CR1 |= USART_WakeUp;
20002a60:	687b      	ldr	r3, [r7, #4]
20002a62:	899b      	ldrh	r3, [r3, #12]
20002a64:	b29a      	uxth	r2, r3
20002a66:	1cbb      	adds	r3, r7, #2
20002a68:	881b      	ldrh	r3, [r3, #0]
20002a6a:	4313      	orrs	r3, r2
20002a6c:	b29a      	uxth	r2, r3
20002a6e:	687b      	ldr	r3, [r7, #4]
20002a70:	819a      	strh	r2, [r3, #12]
}
20002a72:	46c0      	nop			; (mov r8, r8)
20002a74:	46bd      	mov	sp, r7
20002a76:	b002      	add	sp, #8
20002a78:	bd80      	pop	{r7, pc}
20002a7a:	46c0      	nop			; (mov r8, r8)
20002a7c:	fffff7ff 			; <UNDEFINED> instruction: 0xfffff7ff

20002a80 <USART_LINBreakDetectLengthConfig>:
  *            @arg USART_LINBreakDetectLength_10b: 10-bit break detection
  *            @arg USART_LINBreakDetectLength_11b: 11-bit break detection
  * @retval None
  */
void USART_LINBreakDetectLengthConfig(USART_TypeDef* USARTx, uint16_t USART_LINBreakDetectLength)
{
20002a80:	b580      	push	{r7, lr}
20002a82:	b082      	sub	sp, #8
20002a84:	af00      	add	r7, sp, #0
20002a86:	6078      	str	r0, [r7, #4]
20002a88:	000a      	movs	r2, r1
20002a8a:	1cbb      	adds	r3, r7, #2
20002a8c:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_LIN_BREAK_DETECT_LENGTH(USART_LINBreakDetectLength));
  
  USARTx->CR2 &= (uint16_t)~((uint16_t)USART_CR2_LBDL);
20002a8e:	687b      	ldr	r3, [r7, #4]
20002a90:	8a1b      	ldrh	r3, [r3, #16]
20002a92:	b29b      	uxth	r3, r3
20002a94:	2220      	movs	r2, #32
20002a96:	4393      	bics	r3, r2
20002a98:	b29a      	uxth	r2, r3
20002a9a:	687b      	ldr	r3, [r7, #4]
20002a9c:	821a      	strh	r2, [r3, #16]
  USARTx->CR2 |= USART_LINBreakDetectLength;  
20002a9e:	687b      	ldr	r3, [r7, #4]
20002aa0:	8a1b      	ldrh	r3, [r3, #16]
20002aa2:	b29a      	uxth	r2, r3
20002aa4:	1cbb      	adds	r3, r7, #2
20002aa6:	881b      	ldrh	r3, [r3, #0]
20002aa8:	4313      	orrs	r3, r2
20002aaa:	b29a      	uxth	r2, r3
20002aac:	687b      	ldr	r3, [r7, #4]
20002aae:	821a      	strh	r2, [r3, #16]
}
20002ab0:	46c0      	nop			; (mov r8, r8)
20002ab2:	46bd      	mov	sp, r7
20002ab4:	b002      	add	sp, #8
20002ab6:	bd80      	pop	{r7, pc}

20002ab8 <USART_LINCmd>:
  * @param  NewState: new state of the USART LIN mode.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_LINCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
20002ab8:	b580      	push	{r7, lr}
20002aba:	b082      	sub	sp, #8
20002abc:	af00      	add	r7, sp, #0
20002abe:	6078      	str	r0, [r7, #4]
20002ac0:	000a      	movs	r2, r1
20002ac2:	1cfb      	adds	r3, r7, #3
20002ac4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
20002ac6:	1cfb      	adds	r3, r7, #3
20002ac8:	781b      	ldrb	r3, [r3, #0]
20002aca:	2b00      	cmp	r3, #0
20002acc:	d009      	beq.n	20002ae2 <USART_LINCmd+0x2a>
  {
    /* Enable the LIN mode by setting the LINEN bit in the CR2 register */
    USARTx->CR2 |= USART_CR2_LINEN;
20002ace:	687b      	ldr	r3, [r7, #4]
20002ad0:	8a1b      	ldrh	r3, [r3, #16]
20002ad2:	b29b      	uxth	r3, r3
20002ad4:	2280      	movs	r2, #128	; 0x80
20002ad6:	01d2      	lsls	r2, r2, #7
20002ad8:	4313      	orrs	r3, r2
20002ada:	b29a      	uxth	r2, r3
20002adc:	687b      	ldr	r3, [r7, #4]
20002ade:	821a      	strh	r2, [r3, #16]
  else
  {
    /* Disable the LIN mode by clearing the LINEN bit in the CR2 register */
    USARTx->CR2 &= (uint16_t)~((uint16_t)USART_CR2_LINEN);
  }
}
20002ae0:	e007      	b.n	20002af2 <USART_LINCmd+0x3a>
    USARTx->CR2 &= (uint16_t)~((uint16_t)USART_CR2_LINEN);
20002ae2:	687b      	ldr	r3, [r7, #4]
20002ae4:	8a1b      	ldrh	r3, [r3, #16]
20002ae6:	b29b      	uxth	r3, r3
20002ae8:	4a04      	ldr	r2, [pc, #16]	; (20002afc <USART_LINCmd+0x44>)
20002aea:	4013      	ands	r3, r2
20002aec:	b29a      	uxth	r2, r3
20002aee:	687b      	ldr	r3, [r7, #4]
20002af0:	821a      	strh	r2, [r3, #16]
}
20002af2:	46c0      	nop			; (mov r8, r8)
20002af4:	46bd      	mov	sp, r7
20002af6:	b002      	add	sp, #8
20002af8:	bd80      	pop	{r7, pc}
20002afa:	46c0      	nop			; (mov r8, r8)
20002afc:	ffffbfff 			; <UNDEFINED> instruction: 0xffffbfff

20002b00 <USART_SendBreak>:
  * @param  USARTx: where x can be 1, 2, 3, 4, 5, 6, 7 or 8 to select the USART or 
  *         UART peripheral.
  * @retval None
  */
void USART_SendBreak(USART_TypeDef* USARTx)
{
20002b00:	b580      	push	{r7, lr}
20002b02:	b082      	sub	sp, #8
20002b04:	af00      	add	r7, sp, #0
20002b06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Send break characters */
  USARTx->CR1 |= USART_CR1_SBK;
20002b08:	687b      	ldr	r3, [r7, #4]
20002b0a:	899b      	ldrh	r3, [r3, #12]
20002b0c:	b29b      	uxth	r3, r3
20002b0e:	2201      	movs	r2, #1
20002b10:	4313      	orrs	r3, r2
20002b12:	b29a      	uxth	r2, r3
20002b14:	687b      	ldr	r3, [r7, #4]
20002b16:	819a      	strh	r2, [r3, #12]
}
20002b18:	46c0      	nop			; (mov r8, r8)
20002b1a:	46bd      	mov	sp, r7
20002b1c:	b002      	add	sp, #8
20002b1e:	bd80      	pop	{r7, pc}

20002b20 <USART_HalfDuplexCmd>:
  * @param  NewState: new state of the USART Communication.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_HalfDuplexCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
20002b20:	b580      	push	{r7, lr}
20002b22:	b082      	sub	sp, #8
20002b24:	af00      	add	r7, sp, #0
20002b26:	6078      	str	r0, [r7, #4]
20002b28:	000a      	movs	r2, r1
20002b2a:	1cfb      	adds	r3, r7, #3
20002b2c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
20002b2e:	1cfb      	adds	r3, r7, #3
20002b30:	781b      	ldrb	r3, [r3, #0]
20002b32:	2b00      	cmp	r3, #0
20002b34:	d008      	beq.n	20002b48 <USART_HalfDuplexCmd+0x28>
  {
    /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_HDSEL;
20002b36:	687b      	ldr	r3, [r7, #4]
20002b38:	8a9b      	ldrh	r3, [r3, #20]
20002b3a:	b29b      	uxth	r3, r3
20002b3c:	2208      	movs	r2, #8
20002b3e:	4313      	orrs	r3, r2
20002b40:	b29a      	uxth	r2, r3
20002b42:	687b      	ldr	r3, [r7, #4]
20002b44:	829a      	strh	r2, [r3, #20]
  else
  {
    /* Disable the Half-Duplex mode by clearing the HDSEL bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_HDSEL);
  }
}
20002b46:	e007      	b.n	20002b58 <USART_HalfDuplexCmd+0x38>
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_HDSEL);
20002b48:	687b      	ldr	r3, [r7, #4]
20002b4a:	8a9b      	ldrh	r3, [r3, #20]
20002b4c:	b29b      	uxth	r3, r3
20002b4e:	2208      	movs	r2, #8
20002b50:	4393      	bics	r3, r2
20002b52:	b29a      	uxth	r2, r3
20002b54:	687b      	ldr	r3, [r7, #4]
20002b56:	829a      	strh	r2, [r3, #20]
}
20002b58:	46c0      	nop			; (mov r8, r8)
20002b5a:	46bd      	mov	sp, r7
20002b5c:	b002      	add	sp, #8
20002b5e:	bd80      	pop	{r7, pc}

20002b60 <USART_SetGuardTime>:
  *         UART peripheral.
  * @param  USART_GuardTime: specifies the guard time.   
  * @retval None
  */
void USART_SetGuardTime(USART_TypeDef* USARTx, uint8_t USART_GuardTime)
{    
20002b60:	b580      	push	{r7, lr}
20002b62:	b082      	sub	sp, #8
20002b64:	af00      	add	r7, sp, #0
20002b66:	6078      	str	r0, [r7, #4]
20002b68:	000a      	movs	r2, r1
20002b6a:	1cfb      	adds	r3, r7, #3
20002b6c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_USART_1236_PERIPH(USARTx));
  
  /* Clear the USART Guard time */
  USARTx->GTPR &= USART_GTPR_PSC;
20002b6e:	687b      	ldr	r3, [r7, #4]
20002b70:	8b1b      	ldrh	r3, [r3, #24]
20002b72:	b29b      	uxth	r3, r3
20002b74:	22ff      	movs	r2, #255	; 0xff
20002b76:	4013      	ands	r3, r2
20002b78:	b29a      	uxth	r2, r3
20002b7a:	687b      	ldr	r3, [r7, #4]
20002b7c:	831a      	strh	r2, [r3, #24]
  /* Set the USART guard time */
  USARTx->GTPR |= (uint16_t)((uint16_t)USART_GuardTime << 0x08);
20002b7e:	687b      	ldr	r3, [r7, #4]
20002b80:	8b1b      	ldrh	r3, [r3, #24]
20002b82:	b29a      	uxth	r2, r3
20002b84:	1cfb      	adds	r3, r7, #3
20002b86:	781b      	ldrb	r3, [r3, #0]
20002b88:	b29b      	uxth	r3, r3
20002b8a:	021b      	lsls	r3, r3, #8
20002b8c:	b29b      	uxth	r3, r3
20002b8e:	4313      	orrs	r3, r2
20002b90:	b29a      	uxth	r2, r3
20002b92:	687b      	ldr	r3, [r7, #4]
20002b94:	831a      	strh	r2, [r3, #24]
}
20002b96:	46c0      	nop			; (mov r8, r8)
20002b98:	46bd      	mov	sp, r7
20002b9a:	b002      	add	sp, #8
20002b9c:	bd80      	pop	{r7, pc}

20002b9e <USART_SmartCardCmd>:
  * @param  NewState: new state of the Smart Card mode.
  *          This parameter can be: ENABLE or DISABLE.      
  * @retval None
  */
void USART_SmartCardCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
20002b9e:	b580      	push	{r7, lr}
20002ba0:	b082      	sub	sp, #8
20002ba2:	af00      	add	r7, sp, #0
20002ba4:	6078      	str	r0, [r7, #4]
20002ba6:	000a      	movs	r2, r1
20002ba8:	1cfb      	adds	r3, r7, #3
20002baa:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_USART_1236_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
20002bac:	1cfb      	adds	r3, r7, #3
20002bae:	781b      	ldrb	r3, [r3, #0]
20002bb0:	2b00      	cmp	r3, #0
20002bb2:	d008      	beq.n	20002bc6 <USART_SmartCardCmd+0x28>
  {
    /* Enable the SC mode by setting the SCEN bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_SCEN;
20002bb4:	687b      	ldr	r3, [r7, #4]
20002bb6:	8a9b      	ldrh	r3, [r3, #20]
20002bb8:	b29b      	uxth	r3, r3
20002bba:	2220      	movs	r2, #32
20002bbc:	4313      	orrs	r3, r2
20002bbe:	b29a      	uxth	r2, r3
20002bc0:	687b      	ldr	r3, [r7, #4]
20002bc2:	829a      	strh	r2, [r3, #20]
  else
  {
    /* Disable the SC mode by clearing the SCEN bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_SCEN);
  }
}
20002bc4:	e007      	b.n	20002bd6 <USART_SmartCardCmd+0x38>
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_SCEN);
20002bc6:	687b      	ldr	r3, [r7, #4]
20002bc8:	8a9b      	ldrh	r3, [r3, #20]
20002bca:	b29b      	uxth	r3, r3
20002bcc:	2220      	movs	r2, #32
20002bce:	4393      	bics	r3, r2
20002bd0:	b29a      	uxth	r2, r3
20002bd2:	687b      	ldr	r3, [r7, #4]
20002bd4:	829a      	strh	r2, [r3, #20]
}
20002bd6:	46c0      	nop			; (mov r8, r8)
20002bd8:	46bd      	mov	sp, r7
20002bda:	b002      	add	sp, #8
20002bdc:	bd80      	pop	{r7, pc}

20002bde <USART_SmartCardNACKCmd>:
  * @param  NewState: new state of the NACK transmission.
  *          This parameter can be: ENABLE or DISABLE.  
  * @retval None
  */
void USART_SmartCardNACKCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
20002bde:	b580      	push	{r7, lr}
20002be0:	b082      	sub	sp, #8
20002be2:	af00      	add	r7, sp, #0
20002be4:	6078      	str	r0, [r7, #4]
20002be6:	000a      	movs	r2, r1
20002be8:	1cfb      	adds	r3, r7, #3
20002bea:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_USART_1236_PERIPH(USARTx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
20002bec:	1cfb      	adds	r3, r7, #3
20002bee:	781b      	ldrb	r3, [r3, #0]
20002bf0:	2b00      	cmp	r3, #0
20002bf2:	d008      	beq.n	20002c06 <USART_SmartCardNACKCmd+0x28>
  {
    /* Enable the NACK transmission by setting the NACK bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_NACK;
20002bf4:	687b      	ldr	r3, [r7, #4]
20002bf6:	8a9b      	ldrh	r3, [r3, #20]
20002bf8:	b29b      	uxth	r3, r3
20002bfa:	2210      	movs	r2, #16
20002bfc:	4313      	orrs	r3, r2
20002bfe:	b29a      	uxth	r2, r3
20002c00:	687b      	ldr	r3, [r7, #4]
20002c02:	829a      	strh	r2, [r3, #20]
  else
  {
    /* Disable the NACK transmission by clearing the NACK bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_NACK);
  }
}
20002c04:	e007      	b.n	20002c16 <USART_SmartCardNACKCmd+0x38>
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_NACK);
20002c06:	687b      	ldr	r3, [r7, #4]
20002c08:	8a9b      	ldrh	r3, [r3, #20]
20002c0a:	b29b      	uxth	r3, r3
20002c0c:	2210      	movs	r2, #16
20002c0e:	4393      	bics	r3, r2
20002c10:	b29a      	uxth	r2, r3
20002c12:	687b      	ldr	r3, [r7, #4]
20002c14:	829a      	strh	r2, [r3, #20]
}
20002c16:	46c0      	nop			; (mov r8, r8)
20002c18:	46bd      	mov	sp, r7
20002c1a:	b002      	add	sp, #8
20002c1c:	bd80      	pop	{r7, pc}

20002c1e <USART_IrDAConfig>:
  *            @arg USART_IrDAMode_LowPower
  *            @arg USART_IrDAMode_Normal
  * @retval None
  */
void USART_IrDAConfig(USART_TypeDef* USARTx, uint16_t USART_IrDAMode)
{
20002c1e:	b580      	push	{r7, lr}
20002c20:	b082      	sub	sp, #8
20002c22:	af00      	add	r7, sp, #0
20002c24:	6078      	str	r0, [r7, #4]
20002c26:	000a      	movs	r2, r1
20002c28:	1cbb      	adds	r3, r7, #2
20002c2a:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_IRDA_MODE(USART_IrDAMode));
    
  USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_IRLP);
20002c2c:	687b      	ldr	r3, [r7, #4]
20002c2e:	8a9b      	ldrh	r3, [r3, #20]
20002c30:	b29b      	uxth	r3, r3
20002c32:	2204      	movs	r2, #4
20002c34:	4393      	bics	r3, r2
20002c36:	b29a      	uxth	r2, r3
20002c38:	687b      	ldr	r3, [r7, #4]
20002c3a:	829a      	strh	r2, [r3, #20]
  USARTx->CR3 |= USART_IrDAMode;
20002c3c:	687b      	ldr	r3, [r7, #4]
20002c3e:	8a9b      	ldrh	r3, [r3, #20]
20002c40:	b29a      	uxth	r2, r3
20002c42:	1cbb      	adds	r3, r7, #2
20002c44:	881b      	ldrh	r3, [r3, #0]
20002c46:	4313      	orrs	r3, r2
20002c48:	b29a      	uxth	r2, r3
20002c4a:	687b      	ldr	r3, [r7, #4]
20002c4c:	829a      	strh	r2, [r3, #20]
}
20002c4e:	46c0      	nop			; (mov r8, r8)
20002c50:	46bd      	mov	sp, r7
20002c52:	b002      	add	sp, #8
20002c54:	bd80      	pop	{r7, pc}

20002c56 <USART_IrDACmd>:
  * @param  NewState: new state of the IrDA mode.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_IrDACmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
20002c56:	b580      	push	{r7, lr}
20002c58:	b082      	sub	sp, #8
20002c5a:	af00      	add	r7, sp, #0
20002c5c:	6078      	str	r0, [r7, #4]
20002c5e:	000a      	movs	r2, r1
20002c60:	1cfb      	adds	r3, r7, #3
20002c62:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
    
  if (NewState != DISABLE)
20002c64:	1cfb      	adds	r3, r7, #3
20002c66:	781b      	ldrb	r3, [r3, #0]
20002c68:	2b00      	cmp	r3, #0
20002c6a:	d008      	beq.n	20002c7e <USART_IrDACmd+0x28>
  {
    /* Enable the IrDA mode by setting the IREN bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_IREN;
20002c6c:	687b      	ldr	r3, [r7, #4]
20002c6e:	8a9b      	ldrh	r3, [r3, #20]
20002c70:	b29b      	uxth	r3, r3
20002c72:	2202      	movs	r2, #2
20002c74:	4313      	orrs	r3, r2
20002c76:	b29a      	uxth	r2, r3
20002c78:	687b      	ldr	r3, [r7, #4]
20002c7a:	829a      	strh	r2, [r3, #20]
  else
  {
    /* Disable the IrDA mode by clearing the IREN bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_IREN);
  }
}
20002c7c:	e007      	b.n	20002c8e <USART_IrDACmd+0x38>
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_IREN);
20002c7e:	687b      	ldr	r3, [r7, #4]
20002c80:	8a9b      	ldrh	r3, [r3, #20]
20002c82:	b29b      	uxth	r3, r3
20002c84:	2202      	movs	r2, #2
20002c86:	4393      	bics	r3, r2
20002c88:	b29a      	uxth	r2, r3
20002c8a:	687b      	ldr	r3, [r7, #4]
20002c8c:	829a      	strh	r2, [r3, #20]
}
20002c8e:	46c0      	nop			; (mov r8, r8)
20002c90:	46bd      	mov	sp, r7
20002c92:	b002      	add	sp, #8
20002c94:	bd80      	pop	{r7, pc}

20002c96 <USART_DMACmd>:
  * @param  NewState: new state of the DMA Request sources.
  *          This parameter can be: ENABLE or DISABLE.   
  * @retval None
  */
void USART_DMACmd(USART_TypeDef* USARTx, uint16_t USART_DMAReq, FunctionalState NewState)
{
20002c96:	b580      	push	{r7, lr}
20002c98:	b082      	sub	sp, #8
20002c9a:	af00      	add	r7, sp, #0
20002c9c:	6078      	str	r0, [r7, #4]
20002c9e:	0008      	movs	r0, r1
20002ca0:	0011      	movs	r1, r2
20002ca2:	1cbb      	adds	r3, r7, #2
20002ca4:	1c02      	adds	r2, r0, #0
20002ca6:	801a      	strh	r2, [r3, #0]
20002ca8:	1c7b      	adds	r3, r7, #1
20002caa:	1c0a      	adds	r2, r1, #0
20002cac:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DMAREQ(USART_DMAReq));  
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 

  if (NewState != DISABLE)
20002cae:	1c7b      	adds	r3, r7, #1
20002cb0:	781b      	ldrb	r3, [r3, #0]
20002cb2:	2b00      	cmp	r3, #0
20002cb4:	d009      	beq.n	20002cca <USART_DMACmd+0x34>
  {
    /* Enable the DMA transfer for selected requests by setting the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 |= USART_DMAReq;
20002cb6:	687b      	ldr	r3, [r7, #4]
20002cb8:	8a9b      	ldrh	r3, [r3, #20]
20002cba:	b29a      	uxth	r2, r3
20002cbc:	1cbb      	adds	r3, r7, #2
20002cbe:	881b      	ldrh	r3, [r3, #0]
20002cc0:	4313      	orrs	r3, r2
20002cc2:	b29a      	uxth	r2, r3
20002cc4:	687b      	ldr	r3, [r7, #4]
20002cc6:	829a      	strh	r2, [r3, #20]
  {
    /* Disable the DMA transfer for selected requests by clearing the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 &= (uint16_t)~USART_DMAReq;
  }
}
20002cc8:	e00a      	b.n	20002ce0 <USART_DMACmd+0x4a>
    USARTx->CR3 &= (uint16_t)~USART_DMAReq;
20002cca:	687b      	ldr	r3, [r7, #4]
20002ccc:	8a9b      	ldrh	r3, [r3, #20]
20002cce:	b29b      	uxth	r3, r3
20002cd0:	1cba      	adds	r2, r7, #2
20002cd2:	8812      	ldrh	r2, [r2, #0]
20002cd4:	43d2      	mvns	r2, r2
20002cd6:	b292      	uxth	r2, r2
20002cd8:	4013      	ands	r3, r2
20002cda:	b29a      	uxth	r2, r3
20002cdc:	687b      	ldr	r3, [r7, #4]
20002cde:	829a      	strh	r2, [r3, #20]
}
20002ce0:	46c0      	nop			; (mov r8, r8)
20002ce2:	46bd      	mov	sp, r7
20002ce4:	b002      	add	sp, #8
20002ce6:	bd80      	pop	{r7, pc}

20002ce8 <USART_ITConfig>:
  * @param  NewState: new state of the specified USARTx interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState)
{
20002ce8:	b580      	push	{r7, lr}
20002cea:	b086      	sub	sp, #24
20002cec:	af00      	add	r7, sp, #0
20002cee:	6078      	str	r0, [r7, #4]
20002cf0:	0008      	movs	r0, r1
20002cf2:	0011      	movs	r1, r2
20002cf4:	1cbb      	adds	r3, r7, #2
20002cf6:	1c02      	adds	r2, r0, #0
20002cf8:	801a      	strh	r2, [r3, #0]
20002cfa:	1c7b      	adds	r3, r7, #1
20002cfc:	1c0a      	adds	r2, r1, #0
20002cfe:	701a      	strb	r2, [r3, #0]
  uint32_t usartreg = 0x00, itpos = 0x00, itmask = 0x00;
20002d00:	2300      	movs	r3, #0
20002d02:	613b      	str	r3, [r7, #16]
20002d04:	2300      	movs	r3, #0
20002d06:	60fb      	str	r3, [r7, #12]
20002d08:	2300      	movs	r3, #0
20002d0a:	60bb      	str	r3, [r7, #8]
  uint32_t usartxbase = 0x00;
20002d0c:	2300      	movs	r3, #0
20002d0e:	617b      	str	r3, [r7, #20]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  usartxbase = (uint32_t)USARTx;
20002d10:	687b      	ldr	r3, [r7, #4]
20002d12:	617b      	str	r3, [r7, #20]

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
20002d14:	1cbb      	adds	r3, r7, #2
20002d16:	881b      	ldrh	r3, [r3, #0]
20002d18:	b2db      	uxtb	r3, r3
20002d1a:	095b      	lsrs	r3, r3, #5
20002d1c:	b2db      	uxtb	r3, r3
20002d1e:	613b      	str	r3, [r7, #16]

  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
20002d20:	1cbb      	adds	r3, r7, #2
20002d22:	881b      	ldrh	r3, [r3, #0]
20002d24:	221f      	movs	r2, #31
20002d26:	4013      	ands	r3, r2
20002d28:	60fb      	str	r3, [r7, #12]
  itmask = (((uint32_t)0x01) << itpos);
20002d2a:	2201      	movs	r2, #1
20002d2c:	68fb      	ldr	r3, [r7, #12]
20002d2e:	409a      	lsls	r2, r3
20002d30:	0013      	movs	r3, r2
20002d32:	60bb      	str	r3, [r7, #8]
    
  if (usartreg == 0x01) /* The IT is in CR1 register */
20002d34:	693b      	ldr	r3, [r7, #16]
20002d36:	2b01      	cmp	r3, #1
20002d38:	d103      	bne.n	20002d42 <USART_ITConfig+0x5a>
  {
    usartxbase += 0x0C;
20002d3a:	697b      	ldr	r3, [r7, #20]
20002d3c:	330c      	adds	r3, #12
20002d3e:	617b      	str	r3, [r7, #20]
20002d40:	e009      	b.n	20002d56 <USART_ITConfig+0x6e>
  }
  else if (usartreg == 0x02) /* The IT is in CR2 register */
20002d42:	693b      	ldr	r3, [r7, #16]
20002d44:	2b02      	cmp	r3, #2
20002d46:	d103      	bne.n	20002d50 <USART_ITConfig+0x68>
  {
    usartxbase += 0x10;
20002d48:	697b      	ldr	r3, [r7, #20]
20002d4a:	3310      	adds	r3, #16
20002d4c:	617b      	str	r3, [r7, #20]
20002d4e:	e002      	b.n	20002d56 <USART_ITConfig+0x6e>
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14; 
20002d50:	697b      	ldr	r3, [r7, #20]
20002d52:	3314      	adds	r3, #20
20002d54:	617b      	str	r3, [r7, #20]
  }
  if (NewState != DISABLE)
20002d56:	1c7b      	adds	r3, r7, #1
20002d58:	781b      	ldrb	r3, [r3, #0]
20002d5a:	2b00      	cmp	r3, #0
20002d5c:	d006      	beq.n	20002d6c <USART_ITConfig+0x84>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
20002d5e:	697b      	ldr	r3, [r7, #20]
20002d60:	6819      	ldr	r1, [r3, #0]
20002d62:	697b      	ldr	r3, [r7, #20]
20002d64:	68ba      	ldr	r2, [r7, #8]
20002d66:	430a      	orrs	r2, r1
20002d68:	601a      	str	r2, [r3, #0]
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
  }
}
20002d6a:	e006      	b.n	20002d7a <USART_ITConfig+0x92>
    *(__IO uint32_t*)usartxbase &= ~itmask;
20002d6c:	697b      	ldr	r3, [r7, #20]
20002d6e:	681a      	ldr	r2, [r3, #0]
20002d70:	68bb      	ldr	r3, [r7, #8]
20002d72:	43d9      	mvns	r1, r3
20002d74:	697b      	ldr	r3, [r7, #20]
20002d76:	400a      	ands	r2, r1
20002d78:	601a      	str	r2, [r3, #0]
}
20002d7a:	46c0      	nop			; (mov r8, r8)
20002d7c:	46bd      	mov	sp, r7
20002d7e:	b006      	add	sp, #24
20002d80:	bd80      	pop	{r7, pc}

20002d82 <USART_GetFlagStatus>:
  *            @arg USART_FLAG_FE:   Framing Error flag
  *            @arg USART_FLAG_PE:   Parity Error flag
  * @retval The new state of USART_FLAG (SET or RESET).
  */
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
20002d82:	b580      	push	{r7, lr}
20002d84:	b084      	sub	sp, #16
20002d86:	af00      	add	r7, sp, #0
20002d88:	6078      	str	r0, [r7, #4]
20002d8a:	000a      	movs	r2, r1
20002d8c:	1cbb      	adds	r3, r7, #2
20002d8e:	801a      	strh	r2, [r3, #0]
  FlagStatus bitstatus = RESET;
20002d90:	230f      	movs	r3, #15
20002d92:	18fb      	adds	r3, r7, r3
20002d94:	2200      	movs	r2, #0
20002d96:	701a      	strb	r2, [r3, #0]
  if (USART_FLAG == USART_FLAG_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  if ((USARTx->SR & USART_FLAG) != (uint16_t)RESET)
20002d98:	687b      	ldr	r3, [r7, #4]
20002d9a:	881b      	ldrh	r3, [r3, #0]
20002d9c:	b29b      	uxth	r3, r3
20002d9e:	1cba      	adds	r2, r7, #2
20002da0:	8812      	ldrh	r2, [r2, #0]
20002da2:	4013      	ands	r3, r2
20002da4:	b29b      	uxth	r3, r3
20002da6:	2b00      	cmp	r3, #0
20002da8:	d004      	beq.n	20002db4 <USART_GetFlagStatus+0x32>
  {
    bitstatus = SET;
20002daa:	230f      	movs	r3, #15
20002dac:	18fb      	adds	r3, r7, r3
20002dae:	2201      	movs	r2, #1
20002db0:	701a      	strb	r2, [r3, #0]
20002db2:	e003      	b.n	20002dbc <USART_GetFlagStatus+0x3a>
  }
  else
  {
    bitstatus = RESET;
20002db4:	230f      	movs	r3, #15
20002db6:	18fb      	adds	r3, r7, r3
20002db8:	2200      	movs	r2, #0
20002dba:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
20002dbc:	230f      	movs	r3, #15
20002dbe:	18fb      	adds	r3, r7, r3
20002dc0:	781b      	ldrb	r3, [r3, #0]
}
20002dc2:	0018      	movs	r0, r3
20002dc4:	46bd      	mov	sp, r7
20002dc6:	b004      	add	sp, #16
20002dc8:	bd80      	pop	{r7, pc}

20002dca <USART_ClearFlag>:
  *          (USART_SendData()).
  *   
  * @retval None
  */
void USART_ClearFlag(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
20002dca:	b580      	push	{r7, lr}
20002dcc:	b082      	sub	sp, #8
20002dce:	af00      	add	r7, sp, #0
20002dd0:	6078      	str	r0, [r7, #4]
20002dd2:	000a      	movs	r2, r1
20002dd4:	1cbb      	adds	r3, r7, #2
20002dd6:	801a      	strh	r2, [r3, #0]
  if ((USART_FLAG & USART_FLAG_CTS) == USART_FLAG_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
       
  USARTx->SR = (uint16_t)~USART_FLAG;
20002dd8:	1cbb      	adds	r3, r7, #2
20002dda:	881b      	ldrh	r3, [r3, #0]
20002ddc:	43db      	mvns	r3, r3
20002dde:	b29a      	uxth	r2, r3
20002de0:	687b      	ldr	r3, [r7, #4]
20002de2:	801a      	strh	r2, [r3, #0]
}
20002de4:	46c0      	nop			; (mov r8, r8)
20002de6:	46bd      	mov	sp, r7
20002de8:	b002      	add	sp, #8
20002dea:	bd80      	pop	{r7, pc}

20002dec <USART_GetITStatus>:
  *            @arg USART_IT_FE:   Framing Error interrupt
  *            @arg USART_IT_PE:   Parity Error interrupt
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT)
{
20002dec:	b580      	push	{r7, lr}
20002dee:	b086      	sub	sp, #24
20002df0:	af00      	add	r7, sp, #0
20002df2:	6078      	str	r0, [r7, #4]
20002df4:	000a      	movs	r2, r1
20002df6:	1cbb      	adds	r3, r7, #2
20002df8:	801a      	strh	r2, [r3, #0]
  uint32_t bitpos = 0x00, itmask = 0x00, usartreg = 0x00;
20002dfa:	2300      	movs	r3, #0
20002dfc:	60fb      	str	r3, [r7, #12]
20002dfe:	2300      	movs	r3, #0
20002e00:	617b      	str	r3, [r7, #20]
20002e02:	2300      	movs	r3, #0
20002e04:	60bb      	str	r3, [r7, #8]
  ITStatus bitstatus = RESET;
20002e06:	2313      	movs	r3, #19
20002e08:	18fb      	adds	r3, r7, r3
20002e0a:	2200      	movs	r2, #0
20002e0c:	701a      	strb	r2, [r3, #0]
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
20002e0e:	1cbb      	adds	r3, r7, #2
20002e10:	881b      	ldrh	r3, [r3, #0]
20002e12:	b2db      	uxtb	r3, r3
20002e14:	095b      	lsrs	r3, r3, #5
20002e16:	b2db      	uxtb	r3, r3
20002e18:	60bb      	str	r3, [r7, #8]
  /* Get the interrupt position */
  itmask = USART_IT & IT_MASK;
20002e1a:	1cbb      	adds	r3, r7, #2
20002e1c:	881b      	ldrh	r3, [r3, #0]
20002e1e:	221f      	movs	r2, #31
20002e20:	4013      	ands	r3, r2
20002e22:	617b      	str	r3, [r7, #20]
  itmask = (uint32_t)0x01 << itmask;
20002e24:	2201      	movs	r2, #1
20002e26:	697b      	ldr	r3, [r7, #20]
20002e28:	409a      	lsls	r2, r3
20002e2a:	0013      	movs	r3, r2
20002e2c:	617b      	str	r3, [r7, #20]
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
20002e2e:	68bb      	ldr	r3, [r7, #8]
20002e30:	2b01      	cmp	r3, #1
20002e32:	d107      	bne.n	20002e44 <USART_GetITStatus+0x58>
  {
    itmask &= USARTx->CR1;
20002e34:	687b      	ldr	r3, [r7, #4]
20002e36:	899b      	ldrh	r3, [r3, #12]
20002e38:	b29b      	uxth	r3, r3
20002e3a:	001a      	movs	r2, r3
20002e3c:	697b      	ldr	r3, [r7, #20]
20002e3e:	4013      	ands	r3, r2
20002e40:	617b      	str	r3, [r7, #20]
20002e42:	e011      	b.n	20002e68 <USART_GetITStatus+0x7c>
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
20002e44:	68bb      	ldr	r3, [r7, #8]
20002e46:	2b02      	cmp	r3, #2
20002e48:	d107      	bne.n	20002e5a <USART_GetITStatus+0x6e>
  {
    itmask &= USARTx->CR2;
20002e4a:	687b      	ldr	r3, [r7, #4]
20002e4c:	8a1b      	ldrh	r3, [r3, #16]
20002e4e:	b29b      	uxth	r3, r3
20002e50:	001a      	movs	r2, r3
20002e52:	697b      	ldr	r3, [r7, #20]
20002e54:	4013      	ands	r3, r2
20002e56:	617b      	str	r3, [r7, #20]
20002e58:	e006      	b.n	20002e68 <USART_GetITStatus+0x7c>
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
20002e5a:	687b      	ldr	r3, [r7, #4]
20002e5c:	8a9b      	ldrh	r3, [r3, #20]
20002e5e:	b29b      	uxth	r3, r3
20002e60:	001a      	movs	r2, r3
20002e62:	697b      	ldr	r3, [r7, #20]
20002e64:	4013      	ands	r3, r2
20002e66:	617b      	str	r3, [r7, #20]
  }
  
  bitpos = USART_IT >> 0x08;
20002e68:	1cbb      	adds	r3, r7, #2
20002e6a:	881b      	ldrh	r3, [r3, #0]
20002e6c:	0a1b      	lsrs	r3, r3, #8
20002e6e:	b29b      	uxth	r3, r3
20002e70:	60fb      	str	r3, [r7, #12]
  bitpos = (uint32_t)0x01 << bitpos;
20002e72:	2201      	movs	r2, #1
20002e74:	68fb      	ldr	r3, [r7, #12]
20002e76:	409a      	lsls	r2, r3
20002e78:	0013      	movs	r3, r2
20002e7a:	60fb      	str	r3, [r7, #12]
  bitpos &= USARTx->SR;
20002e7c:	687b      	ldr	r3, [r7, #4]
20002e7e:	881b      	ldrh	r3, [r3, #0]
20002e80:	b29b      	uxth	r3, r3
20002e82:	001a      	movs	r2, r3
20002e84:	68fb      	ldr	r3, [r7, #12]
20002e86:	4013      	ands	r3, r2
20002e88:	60fb      	str	r3, [r7, #12]
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
20002e8a:	697b      	ldr	r3, [r7, #20]
20002e8c:	2b00      	cmp	r3, #0
20002e8e:	d007      	beq.n	20002ea0 <USART_GetITStatus+0xb4>
20002e90:	68fb      	ldr	r3, [r7, #12]
20002e92:	2b00      	cmp	r3, #0
20002e94:	d004      	beq.n	20002ea0 <USART_GetITStatus+0xb4>
  {
    bitstatus = SET;
20002e96:	2313      	movs	r3, #19
20002e98:	18fb      	adds	r3, r7, r3
20002e9a:	2201      	movs	r2, #1
20002e9c:	701a      	strb	r2, [r3, #0]
20002e9e:	e003      	b.n	20002ea8 <USART_GetITStatus+0xbc>
  }
  else
  {
    bitstatus = RESET;
20002ea0:	2313      	movs	r3, #19
20002ea2:	18fb      	adds	r3, r7, r3
20002ea4:	2200      	movs	r2, #0
20002ea6:	701a      	strb	r2, [r3, #0]
  }
  
  return bitstatus;  
20002ea8:	2313      	movs	r3, #19
20002eaa:	18fb      	adds	r3, r7, r3
20002eac:	781b      	ldrb	r3, [r3, #0]
}
20002eae:	0018      	movs	r0, r3
20002eb0:	46bd      	mov	sp, r7
20002eb2:	b006      	add	sp, #24
20002eb4:	bd80      	pop	{r7, pc}

20002eb6 <USART_ClearITPendingBit>:
  *          (USART_SendData()).
  *  
  * @retval None
  */
void USART_ClearITPendingBit(USART_TypeDef* USARTx, uint16_t USART_IT)
{
20002eb6:	b580      	push	{r7, lr}
20002eb8:	b084      	sub	sp, #16
20002eba:	af00      	add	r7, sp, #0
20002ebc:	6078      	str	r0, [r7, #4]
20002ebe:	000a      	movs	r2, r1
20002ec0:	1cbb      	adds	r3, r7, #2
20002ec2:	801a      	strh	r2, [r3, #0]
  uint16_t bitpos = 0x00, itmask = 0x00;
20002ec4:	210e      	movs	r1, #14
20002ec6:	187b      	adds	r3, r7, r1
20002ec8:	2200      	movs	r2, #0
20002eca:	801a      	strh	r2, [r3, #0]
20002ecc:	200c      	movs	r0, #12
20002ece:	183b      	adds	r3, r7, r0
20002ed0:	2200      	movs	r2, #0
20002ed2:	801a      	strh	r2, [r3, #0]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  bitpos = USART_IT >> 0x08;
20002ed4:	187b      	adds	r3, r7, r1
20002ed6:	1cba      	adds	r2, r7, #2
20002ed8:	8812      	ldrh	r2, [r2, #0]
20002eda:	0a12      	lsrs	r2, r2, #8
20002edc:	801a      	strh	r2, [r3, #0]
  itmask = ((uint16_t)0x01 << (uint16_t)bitpos);
20002ede:	187b      	adds	r3, r7, r1
20002ee0:	881b      	ldrh	r3, [r3, #0]
20002ee2:	2201      	movs	r2, #1
20002ee4:	409a      	lsls	r2, r3
20002ee6:	183b      	adds	r3, r7, r0
20002ee8:	801a      	strh	r2, [r3, #0]
  USARTx->SR = (uint16_t)~itmask;
20002eea:	183b      	adds	r3, r7, r0
20002eec:	881b      	ldrh	r3, [r3, #0]
20002eee:	43db      	mvns	r3, r3
20002ef0:	b29a      	uxth	r2, r3
20002ef2:	687b      	ldr	r3, [r7, #4]
20002ef4:	801a      	strh	r2, [r3, #0]
}
20002ef6:	46c0      	nop			; (mov r8, r8)
20002ef8:	46bd      	mov	sp, r7
20002efa:	b004      	add	sp, #16
20002efc:	bd80      	pop	{r7, pc}
20002efe:	46c0      	nop			; (mov r8, r8)

20002f00 <__udivsi3>:
20002f00:	2200      	movs	r2, #0
20002f02:	0843      	lsrs	r3, r0, #1
20002f04:	428b      	cmp	r3, r1
20002f06:	d374      	bcc.n	20002ff2 <__udivsi3+0xf2>
20002f08:	0903      	lsrs	r3, r0, #4
20002f0a:	428b      	cmp	r3, r1
20002f0c:	d35f      	bcc.n	20002fce <__udivsi3+0xce>
20002f0e:	0a03      	lsrs	r3, r0, #8
20002f10:	428b      	cmp	r3, r1
20002f12:	d344      	bcc.n	20002f9e <__udivsi3+0x9e>
20002f14:	0b03      	lsrs	r3, r0, #12
20002f16:	428b      	cmp	r3, r1
20002f18:	d328      	bcc.n	20002f6c <__udivsi3+0x6c>
20002f1a:	0c03      	lsrs	r3, r0, #16
20002f1c:	428b      	cmp	r3, r1
20002f1e:	d30d      	bcc.n	20002f3c <__udivsi3+0x3c>
20002f20:	22ff      	movs	r2, #255	; 0xff
20002f22:	0209      	lsls	r1, r1, #8
20002f24:	ba12      	rev	r2, r2
20002f26:	0c03      	lsrs	r3, r0, #16
20002f28:	428b      	cmp	r3, r1
20002f2a:	d302      	bcc.n	20002f32 <__udivsi3+0x32>
20002f2c:	1212      	asrs	r2, r2, #8
20002f2e:	0209      	lsls	r1, r1, #8
20002f30:	d065      	beq.n	20002ffe <__udivsi3+0xfe>
20002f32:	0b03      	lsrs	r3, r0, #12
20002f34:	428b      	cmp	r3, r1
20002f36:	d319      	bcc.n	20002f6c <__udivsi3+0x6c>
20002f38:	e000      	b.n	20002f3c <__udivsi3+0x3c>
20002f3a:	0a09      	lsrs	r1, r1, #8
20002f3c:	0bc3      	lsrs	r3, r0, #15
20002f3e:	428b      	cmp	r3, r1
20002f40:	d301      	bcc.n	20002f46 <__udivsi3+0x46>
20002f42:	03cb      	lsls	r3, r1, #15
20002f44:	1ac0      	subs	r0, r0, r3
20002f46:	4152      	adcs	r2, r2
20002f48:	0b83      	lsrs	r3, r0, #14
20002f4a:	428b      	cmp	r3, r1
20002f4c:	d301      	bcc.n	20002f52 <__udivsi3+0x52>
20002f4e:	038b      	lsls	r3, r1, #14
20002f50:	1ac0      	subs	r0, r0, r3
20002f52:	4152      	adcs	r2, r2
20002f54:	0b43      	lsrs	r3, r0, #13
20002f56:	428b      	cmp	r3, r1
20002f58:	d301      	bcc.n	20002f5e <__udivsi3+0x5e>
20002f5a:	034b      	lsls	r3, r1, #13
20002f5c:	1ac0      	subs	r0, r0, r3
20002f5e:	4152      	adcs	r2, r2
20002f60:	0b03      	lsrs	r3, r0, #12
20002f62:	428b      	cmp	r3, r1
20002f64:	d301      	bcc.n	20002f6a <__udivsi3+0x6a>
20002f66:	030b      	lsls	r3, r1, #12
20002f68:	1ac0      	subs	r0, r0, r3
20002f6a:	4152      	adcs	r2, r2
20002f6c:	0ac3      	lsrs	r3, r0, #11
20002f6e:	428b      	cmp	r3, r1
20002f70:	d301      	bcc.n	20002f76 <__udivsi3+0x76>
20002f72:	02cb      	lsls	r3, r1, #11
20002f74:	1ac0      	subs	r0, r0, r3
20002f76:	4152      	adcs	r2, r2
20002f78:	0a83      	lsrs	r3, r0, #10
20002f7a:	428b      	cmp	r3, r1
20002f7c:	d301      	bcc.n	20002f82 <__udivsi3+0x82>
20002f7e:	028b      	lsls	r3, r1, #10
20002f80:	1ac0      	subs	r0, r0, r3
20002f82:	4152      	adcs	r2, r2
20002f84:	0a43      	lsrs	r3, r0, #9
20002f86:	428b      	cmp	r3, r1
20002f88:	d301      	bcc.n	20002f8e <__udivsi3+0x8e>
20002f8a:	024b      	lsls	r3, r1, #9
20002f8c:	1ac0      	subs	r0, r0, r3
20002f8e:	4152      	adcs	r2, r2
20002f90:	0a03      	lsrs	r3, r0, #8
20002f92:	428b      	cmp	r3, r1
20002f94:	d301      	bcc.n	20002f9a <__udivsi3+0x9a>
20002f96:	020b      	lsls	r3, r1, #8
20002f98:	1ac0      	subs	r0, r0, r3
20002f9a:	4152      	adcs	r2, r2
20002f9c:	d2cd      	bcs.n	20002f3a <__udivsi3+0x3a>
20002f9e:	09c3      	lsrs	r3, r0, #7
20002fa0:	428b      	cmp	r3, r1
20002fa2:	d301      	bcc.n	20002fa8 <__udivsi3+0xa8>
20002fa4:	01cb      	lsls	r3, r1, #7
20002fa6:	1ac0      	subs	r0, r0, r3
20002fa8:	4152      	adcs	r2, r2
20002faa:	0983      	lsrs	r3, r0, #6
20002fac:	428b      	cmp	r3, r1
20002fae:	d301      	bcc.n	20002fb4 <__udivsi3+0xb4>
20002fb0:	018b      	lsls	r3, r1, #6
20002fb2:	1ac0      	subs	r0, r0, r3
20002fb4:	4152      	adcs	r2, r2
20002fb6:	0943      	lsrs	r3, r0, #5
20002fb8:	428b      	cmp	r3, r1
20002fba:	d301      	bcc.n	20002fc0 <__udivsi3+0xc0>
20002fbc:	014b      	lsls	r3, r1, #5
20002fbe:	1ac0      	subs	r0, r0, r3
20002fc0:	4152      	adcs	r2, r2
20002fc2:	0903      	lsrs	r3, r0, #4
20002fc4:	428b      	cmp	r3, r1
20002fc6:	d301      	bcc.n	20002fcc <__udivsi3+0xcc>
20002fc8:	010b      	lsls	r3, r1, #4
20002fca:	1ac0      	subs	r0, r0, r3
20002fcc:	4152      	adcs	r2, r2
20002fce:	08c3      	lsrs	r3, r0, #3
20002fd0:	428b      	cmp	r3, r1
20002fd2:	d301      	bcc.n	20002fd8 <__udivsi3+0xd8>
20002fd4:	00cb      	lsls	r3, r1, #3
20002fd6:	1ac0      	subs	r0, r0, r3
20002fd8:	4152      	adcs	r2, r2
20002fda:	0883      	lsrs	r3, r0, #2
20002fdc:	428b      	cmp	r3, r1
20002fde:	d301      	bcc.n	20002fe4 <__udivsi3+0xe4>
20002fe0:	008b      	lsls	r3, r1, #2
20002fe2:	1ac0      	subs	r0, r0, r3
20002fe4:	4152      	adcs	r2, r2
20002fe6:	0843      	lsrs	r3, r0, #1
20002fe8:	428b      	cmp	r3, r1
20002fea:	d301      	bcc.n	20002ff0 <__udivsi3+0xf0>
20002fec:	004b      	lsls	r3, r1, #1
20002fee:	1ac0      	subs	r0, r0, r3
20002ff0:	4152      	adcs	r2, r2
20002ff2:	1a41      	subs	r1, r0, r1
20002ff4:	d200      	bcs.n	20002ff8 <__udivsi3+0xf8>
20002ff6:	4601      	mov	r1, r0
20002ff8:	4152      	adcs	r2, r2
20002ffa:	4610      	mov	r0, r2
20002ffc:	4770      	bx	lr
20002ffe:	e7ff      	b.n	20003000 <__udivsi3+0x100>
20003000:	b501      	push	{r0, lr}
20003002:	2000      	movs	r0, #0
20003004:	f000 f806 	bl	20003014 <__aeabi_idiv0>
20003008:	bd02      	pop	{r1, pc}
2000300a:	46c0      	nop			; (mov r8, r8)

2000300c <__aeabi_uidivmod>:
2000300c:	2900      	cmp	r1, #0
2000300e:	d0f7      	beq.n	20003000 <__udivsi3+0x100>
20003010:	e776      	b.n	20002f00 <__udivsi3>
20003012:	4770      	bx	lr

20003014 <__aeabi_idiv0>:
20003014:	4770      	bx	lr
20003016:	46c0      	nop			; (mov r8, r8)

20003018 <memcpy>:
20003018:	2300      	movs	r3, #0
2000301a:	b510      	push	{r4, lr}
2000301c:	429a      	cmp	r2, r3
2000301e:	d100      	bne.n	20003022 <memcpy+0xa>
20003020:	bd10      	pop	{r4, pc}
20003022:	5ccc      	ldrb	r4, [r1, r3]
20003024:	54c4      	strb	r4, [r0, r3]
20003026:	3301      	adds	r3, #1
20003028:	e7f8      	b.n	2000301c <memcpy+0x4>

2000302a <memset>:
2000302a:	0003      	movs	r3, r0
2000302c:	1812      	adds	r2, r2, r0
2000302e:	4293      	cmp	r3, r2
20003030:	d100      	bne.n	20003034 <memset+0xa>
20003032:	4770      	bx	lr
20003034:	7019      	strb	r1, [r3, #0]
20003036:	3301      	adds	r3, #1
20003038:	e7f9      	b.n	2000302e <memset+0x4>
	...

2000303c <msTicks>:
2000303c:	00000000 	andeq	r0, r0, r0

20003040 <APBAHBPrescTable>:
20003040:	00000000 	andeq	r0, r0, r0
20003044:	04030201 	streq	r0, [r3], #-513	; 0xfffffdff
20003048:	04030201 	streq	r0, [r3], #-513	; 0xfffffdff
2000304c:	09080706 	stmdbeq	r8, {r1, r2, r8, r9, sl}

20003050 <GPIO_Pins>:
20003050:	00020001 	andeq	r0, r2, r1
20003054:	00080004 	andeq	r0, r8, r4
20003058:	00200010 	eoreq	r0, r0, r0, lsl r0
2000305c:	00800040 	addeq	r0, r0, r0, asr #32
20003060:	02000100 	andeq	r0, r0, #0, 2
20003064:	08000400 	stmdaeq	r0, {sl}
20003068:	20001000 	andcs	r1, r0, r0
2000306c:	80004000 	andhi	r4, r0, r0

20003070 <GPIO_Ports>:
20003070:	40021000 	andmi	r1, r2, r0
20003074:	40020000 	andmi	r0, r2, r0
20003078:	40020800 	andmi	r0, r2, r0, lsl #16
2000307c:	40020c00 	andmi	r0, r2, r0, lsl #24

Disassembly of section .debug_info:

00000000 <.debug_info>:
       0:	00001a0a 	andeq	r1, r0, sl, lsl #20
       4:	00000004 	andeq	r0, r0, r4
       8:	01040000 	mrseq	r0, (UNDEF: 4)
       c:	00000629 	andeq	r0, r0, r9, lsr #12
      10:	000e390c 	andeq	r3, lr, ip, lsl #18
      14:	00057d00 	andeq	r7, r5, r0, lsl #26
	...
      24:	10900200 	addsne	r0, r0, r0, lsl #4
      28:	01050000 	mrseq	r0, (UNDEF: 5)
      2c:	00000253 	andeq	r0, r0, r3, asr r2
      30:	0253c805 	subseq	ip, r3, #327680	; 0x50000
      34:	0f030000 	svceq	0x00030000
      38:	72000008 	andvc	r0, r0, #8
      3c:	00088a03 	andeq	r8, r8, r3, lsl #20
      40:	5c037400 	cfstrspl	mvf7, [r3], {-0}
      44:	75000009 	strvc	r0, [r0, #-9]
      48:	0004a103 	andeq	sl, r4, r3, lsl #2
      4c:	39037600 	stmdbcc	r3, {r9, sl, ip, sp, lr}
      50:	7b00000a 	blvc	80 <startup-0x1fffff80>
      54:	000f5e03 	andeq	r5, pc, r3, lsl #28
      58:	dd037c00 	stcle	12, cr7, [r3, #-0]
      5c:	7e000011 	mcrvc	0, 0, r0, cr0, cr1, {0}
      60:	00034d03 	andeq	r4, r3, r3, lsl #26
      64:	23047f00 	movwcs	r7, #20224	; 0x4f00
      68:	00000008 	andeq	r0, r0, r8
      6c:	00070b04 	andeq	r0, r7, r4, lsl #22
      70:	b0040100 	andlt	r0, r4, r0, lsl #2
      74:	02000008 	andeq	r0, r0, #8
      78:	00001c04 	andeq	r1, r0, r4, lsl #24
      7c:	c9040300 	stmdbgt	r4, {r8, r9}
      80:	04000000 	streq	r0, [r0], #-0
      84:	00100304 	andseq	r0, r0, r4, lsl #6
      88:	ae040500 	cfsh32ge	mvfx0, mvfx4, #0
      8c:	0600000e 	streq	r0, [r0], -lr
      90:	00079804 	andeq	r9, r7, r4, lsl #16
      94:	2a040700 	bcs	101c9c <startup-0x1fefe364>
      98:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
      9c:	0011d204 	andseq	sp, r1, r4, lsl #4
      a0:	25040900 	strcs	r0, [r4, #-2304]	; 0xfffff700
      a4:	0a00000b 	beq	d8 <startup-0x1fffff28>
      a8:	000cbf04 	andeq	fp, ip, r4, lsl #30
      ac:	e1040b00 	tst	r4, r0, lsl #22
      b0:	0c00000b 	stceq	0, cr0, [r0], {11}
      b4:	0003be04 	andeq	fp, r3, r4, lsl #28
      b8:	22040d00 	andcs	r0, r4, #0, 26
      bc:	0e000010 	mcreq	0, 0, r0, cr0, cr0, {0}
      c0:	000ee004 	andeq	lr, lr, r4
      c4:	b0040f00 	andlt	r0, r4, r0, lsl #30
      c8:	10000007 	andne	r0, r0, r7
      cc:	00003504 	andeq	r3, r0, r4, lsl #10
      d0:	b7041100 	strlt	r1, [r4, -r0, lsl #2]
      d4:	1200000d 	andne	r0, r0, #13
      d8:	0007a304 	andeq	sl, r7, r4, lsl #6
      dc:	6f041300 	svcvs	0x00041300
      e0:	14000005 	strne	r0, [r0], #-5
      e4:	00111604 	andseq	r1, r1, r4, lsl #12
      e8:	c0041500 	andgt	r1, r4, r0, lsl #10
      ec:	16000008 	strne	r0, [r0], -r8
      f0:	00114004 	andseq	r4, r1, r4
      f4:	83041700 	movwhi	r1, #18176	; 0x4700
      f8:	18000009 	stmdane	r0, {r0, r3}
      fc:	00108204 	andseq	r8, r0, r4, lsl #4
     100:	b5041900 	strlt	r1, [r4, #-2304]	; 0xfffff700
     104:	1a000002 	bne	114 <startup-0x1ffffeec>
     108:	00077d04 	andeq	r7, r7, r4, lsl #26
     10c:	5c041b00 			; <UNDEFINED> instruction: 0x5c041b00
     110:	1c000001 	stcne	0, cr0, [r0], {1}
     114:	000d6b04 	andeq	r6, sp, r4, lsl #22
     118:	1f041d00 	svcne	0x00041d00
     11c:	1e000006 	cdpne	0, 0, cr0, cr0, cr6, {0}
     120:	00072104 	andeq	r2, r7, r4, lsl #2
     124:	5a041f00 	bpl	107d2c <startup-0x1fef82d4>
     128:	20000004 	andcs	r0, r0, r4
     12c:	000b5704 	andeq	r5, fp, r4, lsl #14
     130:	2f042100 	svccs	0x00042100
     134:	22000009 	andcs	r0, r0, #9
     138:	000a2704 	andeq	r2, sl, r4, lsl #14
     13c:	ed042300 	stc	3, cr2, [r4, #-0]
     140:	24000001 	strcs	r0, [r0], #-1
     144:	000d7504 	andeq	r7, sp, r4, lsl #10
     148:	34042500 	strcc	r2, [r4], #-1280	; 0xfffffb00
     14c:	26000010 			; <UNDEFINED> instruction: 0x26000010
     150:	00036904 	andeq	r6, r3, r4, lsl #18
     154:	39042700 	stmdbcc	r4, {r8, r9, sl, sp}
     158:	2800000d 	stmdacs	r0, {r0, r2, r3}
     15c:	000cf104 	andeq	pc, ip, r4, lsl #2
     160:	fb042900 	blx	10a56a <startup-0x1fef5a96>
     164:	2a00000a 	bcs	194 <startup-0x1ffffe6c>
     168:	0001f704 	andeq	pc, r1, r4, lsl #14
     16c:	47042b00 	strmi	r2, [r4, -r0, lsl #22]
     170:	2c000000 	stccs	0, cr0, [r0], {-0}
     174:	0007d904 	andeq	sp, r7, r4, lsl #18
     178:	98042d00 	stmdals	r4, {r8, sl, fp, sp}
     17c:	2e000011 	mcrcs	0, 0, r0, cr0, cr1, {0}
     180:	0011fc04 	andseq	pc, r1, r4, lsl #24
     184:	9f042f00 	svcls	0x00042f00
     188:	3000000e 	andcc	r0, r0, lr
     18c:	0011a504 	andseq	sl, r1, r4, lsl #10
     190:	97043100 	strls	r3, [r4, -r0, lsl #2]
     194:	32000004 	andcc	r0, r0, #4
     198:	0000bf04 	andeq	fp, r0, r4, lsl #30
     19c:	c6043300 	strgt	r3, [r4], -r0, lsl #6
     1a0:	3400000a 	strcc	r0, [r0], #-10
     1a4:	00097804 	andeq	r7, r9, r4, lsl #16
     1a8:	35043500 	strcc	r3, [r4, #-1280]	; 0xfffffb00
     1ac:	3600000b 	strcc	r0, [r0], -fp
     1b0:	0009e904 	andeq	lr, r9, r4, lsl #18
     1b4:	eb043700 	bl	10ddbc <startup-0x1fef2244>
     1b8:	38000008 	stmdacc	r0, {r3}
     1bc:	00008804 	andeq	r8, r0, r4, lsl #16
     1c0:	75043900 	strvc	r3, [r4, #-2304]	; 0xfffff700
     1c4:	3a000012 	bcc	214 <startup-0x1ffffdec>
     1c8:	000c0004 	andeq	r0, ip, r4
     1cc:	17043b00 	strne	r3, [r4, -r0, lsl #22]
     1d0:	3c000004 	stccc	0, cr0, [r0], {4}
     1d4:	000fb004 	andeq	fp, pc, r4
     1d8:	01043d00 	tsteq	r4, r0, lsl #26
     1dc:	3e00000a 	cdpcc	0, 0, cr0, cr0, cr10, {0}
     1e0:	000c1b04 	andeq	r1, ip, r4, lsl #22
     1e4:	bf043f00 	svclt	0x00043f00
     1e8:	40000001 	andmi	r0, r0, r1
     1ec:	000da904 	andeq	sl, sp, r4, lsl #18
     1f0:	67044100 	strvs	r4, [r4, -r0, lsl #2]
     1f4:	42000004 	andmi	r0, r0, #4
     1f8:	00080304 	andeq	r0, r8, r4, lsl #6
     1fc:	7f044300 	svcvc	0x00044300
     200:	44000002 	strmi	r0, [r0], #-2
     204:	000f1f04 	andeq	r1, pc, r4, lsl #30
     208:	f1044500 			; <UNDEFINED> instruction: 0xf1044500
     20c:	46000007 	strmi	r0, [r0], -r7
     210:	0001cd04 	andeq	ip, r1, r4, lsl #26
     214:	90044700 	andls	r4, r4, r0, lsl #14
     218:	4800000f 	stmdami	r0, {r0, r1, r2, r3}
     21c:	000d2204 	andeq	r2, sp, r4, lsl #4
     220:	d4044900 	strle	r4, [r4], #-2304	; 0xfffff700
     224:	4a000010 	bmi	26c <startup-0x1ffffd94>
     228:	0011e904 	andseq	lr, r1, r4, lsl #18
     22c:	2d044b00 	vstrcs	d4, [r4, #-0]
     230:	4c000008 	stcmi	0, cr0, [r0], {8}
     234:	000a0f04 	andeq	r0, sl, r4, lsl #30
     238:	db044d00 	blle	113640 <startup-0x1feec9c0>
     23c:	4e000000 	cdpmi	0, 0, cr0, cr0, cr0, {0}
     240:	000d2f04 	andeq	r2, sp, r4, lsl #30
     244:	8a044f00 	bhi	113e4c <startup-0x1feec1b4>
     248:	50000007 	andpl	r0, r0, r7
     24c:	000a9f04 	andeq	r9, sl, r4, lsl #30
     250:	05005100 	streq	r5, [r0, #-256]	; 0xffffff00
     254:	040b0601 	streq	r0, [fp], #-1537	; 0xfffff9ff
     258:	d4060000 	strle	r0, [r6], #-0
     25c:	05000008 	streq	r0, [r0, #-8]
     260:	0025032f 	eoreq	r0, r5, pc, lsr #6
     264:	e3070000 	movw	r0, #28672	; 0x7000
     268:	06000001 	streq	r0, [r0], -r1
     26c:	0002712b 	andeq	r7, r2, fp, lsr #2
     270:	08010500 	stmdaeq	r1, {r8, sl}
     274:	00000409 	andeq	r0, r0, r9, lsl #8
     278:	f0050205 			; <UNDEFINED> instruction: 0xf0050205
     27c:	0700000f 	streq	r0, [r0, -pc]
     280:	0000053d 	andeq	r0, r0, sp, lsr r5
     284:	028a3906 	addeq	r3, sl, #98304	; 0x18000
     288:	02050000 	andeq	r0, r5, #0
     28c:	00117407 	andseq	r7, r1, r7, lsl #8
     290:	120e0700 	andne	r0, lr, #0, 14
     294:	4d060000 	stcmi	0, cr0, [r6, #-0]
     298:	0000029c 	muleq	r0, ip, r2
     29c:	f8050405 			; <UNDEFINED> instruction: 0xf8050405
     2a0:	07000009 	streq	r0, [r0, -r9]
     2a4:	000009a1 	andeq	r0, r0, r1, lsr #19
     2a8:	02ae4f06 	adceq	r4, lr, #6, 30
     2ac:	04050000 	streq	r0, [r5], #-0
     2b0:	000d4d07 	andeq	r4, sp, r7, lsl #26
     2b4:	05080500 	streq	r0, [r8, #-1280]	; 0xfffffb00
     2b8:	000009f3 	strdeq	r0, [r0], -r3
     2bc:	48070805 	stmdami	r7, {r0, r2, fp}
     2c0:	0800000d 	stmdaeq	r0, {r0, r2, r3}
     2c4:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
     2c8:	04050074 	streq	r0, [r5], #-116	; 0xffffff8c
     2cc:	000d5207 	andeq	r5, sp, r7, lsl #4
     2d0:	01e50700 	mvneq	r0, r0, lsl #14
     2d4:	18070000 	stmdane	r7, {}	; <UNPREDICTABLE>
     2d8:	00000266 	andeq	r0, r0, r6, ror #4
     2dc:	0002d109 	andeq	sp, r2, r9, lsl #2
     2e0:	02d10a00 	sbcseq	r0, r1, #0, 20
     2e4:	e1090000 	mrs	r0, (UNDEF: 9)
     2e8:	07000002 	streq	r0, [r0, -r2]
     2ec:	0000053f 	andeq	r0, r0, pc, lsr r5
     2f0:	027f2407 	rsbseq	r2, pc, #117440512	; 0x7000000
     2f4:	eb090000 	bl	2402fc <startup-0x1fdbfd04>
     2f8:	07000002 	streq	r0, [r0, -r2]
     2fc:	00001210 	andeq	r1, r0, r0, lsl r2
     300:	02912c07 	addseq	r2, r1, #1792	; 0x700
     304:	fb090000 	blx	24030e <startup-0x1fdbfcf2>
     308:	07000002 	streq	r0, [r0, -r2]
     30c:	000009a3 	andeq	r0, r0, r3, lsr #19
     310:	02a33007 	adceq	r3, r3, #7
     314:	0b090000 	bleq	24031c <startup-0x1fdbfce4>
     318:	0a000003 	beq	32c <startup-0x1ffffcd4>
     31c:	00000316 	andeq	r0, r0, r6, lsl r3
     320:	010e040b 	tsteq	lr, fp, lsl #8
     324:	03dc01a0 	bicseq	r0, ip, #160, 2	; 0x28
     328:	2c0c0000 	stccs	0, cr0, [ip], {-0}
     32c:	01000012 	tsteq	r0, r2, lsl r0
     330:	03ec01a2 	mvneq	r0, #-2147483608	; 0x80000028
     334:	0c000000 	stceq	0, cr0, [r0], {-0}
     338:	000003f5 	strdeq	r0, [r0], -r5
     33c:	f101a301 			; <UNDEFINED> instruction: 0xf101a301
     340:	20000003 	andcs	r0, r0, r3
     344:	000dd20c 	andeq	sp, sp, ip, lsl #4
     348:	01a40100 			; <UNDEFINED> instruction: 0x01a40100
     34c:	000003ec 	andeq	r0, r0, ip, ror #7
     350:	00050c80 	andeq	r0, r5, r0, lsl #25
     354:	a5010000 	strge	r0, [r1, #-0]
     358:	0003f101 	andeq	pc, r3, r1, lsl #2
     35c:	bc0da000 	stclt	0, cr10, [sp], {-0}
     360:	01000011 	tsteq	r0, r1, lsl r0
     364:	03ec01a6 	mvneq	r0, #-2147483607	; 0x80000029
     368:	01000000 	mrseq	r0, (UNDEF: 0)
     36c:	0004830d 	andeq	r8, r4, sp, lsl #6
     370:	01a70100 			; <UNDEFINED> instruction: 0x01a70100
     374:	000003f1 	strdeq	r0, [r0], -r1
     378:	8e0d0120 	adfhiep	f0, f5, f0
     37c:	01000001 	tsteq	r0, r1
     380:	03ec01a8 	mvneq	r0, #168, 2	; 0x2a
     384:	01800000 	orreq	r0, r0, r0
     388:	00048d0d 	andeq	r8, r4, sp, lsl #26
     38c:	01a90100 			; <UNDEFINED> instruction: 0x01a90100
     390:	000003f1 	strdeq	r0, [r0], -r1
     394:	470d01a0 	strmi	r0, [sp, -r0, lsr #3]
     398:	01000004 	tsteq	r0, r4
     39c:	03ec01aa 	mvneq	r0, #-2147483606	; 0x8000002a
     3a0:	02000000 	andeq	r0, r0, #0
     3a4:	0004290d 	andeq	r2, r4, sp, lsl #18
     3a8:	01ab0100 			; <UNDEFINED> instruction: 0x01ab0100
     3ac:	00000401 	andeq	r0, r0, r1, lsl #8
     3b0:	490e0220 	stmdbmi	lr, {r5, r9}
     3b4:	ac010050 	stcge	0, cr0, [r1], {80}	; 0x50
     3b8:	00042101 	andeq	r2, r4, r1, lsl #2
     3bc:	0d030000 	stceq	0, cr0, [r3, #-0]
     3c0:	00000433 	andeq	r0, r0, r3, lsr r4
     3c4:	2601ad01 	strcs	sl, [r1], -r1, lsl #26
     3c8:	f0000004 			; <UNDEFINED> instruction: 0xf0000004
     3cc:	071c0d03 	ldreq	r0, [ip, -r3, lsl #26]
     3d0:	ae010000 	cdpge	0, 0, cr0, cr1, cr0, {0}
     3d4:	00031601 	andeq	r1, r3, r1, lsl #12
     3d8:	000e0000 	andeq	r0, lr, r0
     3dc:	0003160f 	andeq	r1, r3, pc, lsl #12
     3e0:	0003ec00 	andeq	lr, r3, r0, lsl #24
     3e4:	02ca1000 	sbceq	r1, sl, #0
     3e8:	00070000 	andeq	r0, r7, r0
     3ec:	0003dc09 	andeq	sp, r3, r9, lsl #24
     3f0:	030b0f00 	movweq	r0, #48896	; 0xbf00
     3f4:	04010000 	streq	r0, [r1], #-0
     3f8:	ca100000 	bgt	400400 <startup-0x1fbffc00>
     3fc:	17000002 	strne	r0, [r0, -r2]
     400:	030b0f00 	movweq	r0, #48896	; 0xbf00
     404:	04110000 	ldreq	r0, [r1], #-0
     408:	ca100000 	bgt	400410 <startup-0x1fbffbf0>
     40c:	37000002 	strcc	r0, [r0, -r2]
     410:	02dc0f00 	sbcseq	r0, ip, #0, 30
     414:	04210000 	strteq	r0, [r1], #-0
     418:	ca100000 	bgt	400420 <startup-0x1fbffbe0>
     41c:	ef000002 	svc	0x00000002
     420:	04110900 	ldreq	r0, [r1], #-2304	; 0xfffff700
     424:	0b0f0000 	bleq	3c042c <startup-0x1fc3fbd4>
     428:	37000003 	strcc	r0, [r0, -r3]
     42c:	11000004 	tstne	r0, r4
     430:	000002ca 	andeq	r0, r0, sl, asr #5
     434:	06000283 	streq	r0, [r0], -r3, lsl #5
     438:	00000d08 	andeq	r0, r0, r8, lsl #26
     43c:	2001af01 	andcs	sl, r1, r1, lsl #30
     440:	12000003 	andne	r0, r0, #3
     444:	01c0018c 	biceq	r0, r0, ip, lsl #3
     448:	0000055e 	andeq	r0, r0, lr, asr r5
     44c:	0002540c 	andeq	r5, r2, ip, lsl #8
     450:	01c20100 	biceq	r0, r2, r0, lsl #2
     454:	0000031b 	andeq	r0, r0, fp, lsl r3
     458:	037d0c00 	cmneq	sp, #0, 24
     45c:	c3010000 	movwgt	r0, #4096	; 0x1000
     460:	00031601 	andeq	r1, r3, r1, lsl #12
     464:	ba0c0400 	blt	30146c <startup-0x1fcfeb94>
     468:	01000000 	mrseq	r0, (UNDEF: 0)
     46c:	031601c4 	tsteq	r6, #196, 2	; 0x31
     470:	0c080000 	stceq	0, cr0, [r8], {-0}
     474:	00000224 	andeq	r0, r0, r4, lsr #4
     478:	1601c501 	strne	ip, [r1], -r1, lsl #10
     47c:	0c000003 	stceq	0, cr0, [r0], {3}
     480:	52435313 	subpl	r5, r3, #1275068416	; 0x4c000000
     484:	01c60100 	biceq	r0, r6, r0, lsl #2
     488:	00000316 	andeq	r0, r0, r6, lsl r3
     48c:	43431310 	movtmi	r1, #13072	; 0x3310
     490:	c7010052 	smlsdgt	r1, r2, r0, r0
     494:	00031601 	andeq	r1, r3, r1, lsl #12
     498:	53131400 	tstpl	r3, #0, 8
     49c:	01005048 	tsteq	r0, r8, asr #32
     4a0:	056e01c8 	strbeq	r0, [lr, #-456]!	; 0xfffffe38
     4a4:	0c180000 	ldceq	0, cr0, [r8], {-0}
     4a8:	00000705 	andeq	r0, r0, r5, lsl #14
     4ac:	1601c901 	strne	ip, [r1], -r1, lsl #18
     4b0:	24000003 	strcs	r0, [r0], #-3
     4b4:	000ec20c 	andeq	ip, lr, ip, lsl #4
     4b8:	01ca0100 	biceq	r0, sl, r0, lsl #2
     4bc:	00000316 	andeq	r0, r0, r6, lsl r3
     4c0:	05c00c28 	strbeq	r0, [r0, #3112]	; 0xc28
     4c4:	cb010000 	blgt	404cc <startup-0x1ffbfb34>
     4c8:	00031601 	andeq	r1, r3, r1, lsl #12
     4cc:	cb0c2c00 	blgt	30b4d4 <startup-0x1fcf4b2c>
     4d0:	01000004 	tsteq	r0, r4
     4d4:	031601cc 	tsteq	r6, #204, 2	; 0x33
     4d8:	0c300000 	ldceq	0, cr0, [r0], #-0
     4dc:	00000fea 	andeq	r0, r0, sl, ror #31
     4e0:	1601cd01 	strne	ip, [r1], -r1, lsl #26
     4e4:	34000003 	strcc	r0, [r0], #-3
     4e8:	000bd20c 	andeq	sp, fp, ip, lsl #4
     4ec:	01ce0100 	biceq	r0, lr, r0, lsl #2
     4f0:	00000316 	andeq	r0, r0, r6, lsl r3
     4f4:	0e860c38 	mcreq	12, 4, r0, cr6, cr8, {1}
     4f8:	cf010000 	svcgt	0x00010000
     4fc:	00031601 	andeq	r1, r3, r1, lsl #12
     500:	50133c00 	andspl	r3, r3, r0, lsl #24
     504:	01005246 	tsteq	r0, r6, asr #4
     508:	058801d0 	streq	r0, [r8, #464]	; 0x1d0
     50c:	13400000 	movtne	r0, #0
     510:	00524644 	subseq	r4, r2, r4, asr #12
     514:	1b01d101 	blne	74920 <startup-0x1ff8b6e0>
     518:	48000003 	stmdami	r0, {r0, r1}
     51c:	52444113 	subpl	r4, r4, #-1073741820	; 0xc0000004
     520:	01d20100 	bicseq	r0, r2, r0, lsl #2
     524:	0000031b 	andeq	r0, r0, fp, lsl r3
     528:	0fcb0c4c 	svceq	0x00cb0c4c
     52c:	d3010000 	movwle	r0, #4096	; 0x1000
     530:	0005a201 	andeq	sl, r5, r1, lsl #4
     534:	130c5000 	movwne	r5, #49152	; 0xc000
     538:	01000010 	tsteq	r0, r0, lsl r0
     53c:	05bc01d4 	ldreq	r0, [ip, #468]!	; 0x1d4
     540:	0c600000 	stcleq	0, cr0, [r0], #-0
     544:	000003f5 	strdeq	r0, [r0], -r5
     548:	c101d501 	tstgt	r1, r1, lsl #10
     54c:	74000005 	strvc	r0, [r0], #-5
     550:	0011af0c 	andseq	sl, r1, ip, lsl #30
     554:	01d60100 	bicseq	r0, r6, r0, lsl #2
     558:	00000316 	andeq	r0, r0, r6, lsl r3
     55c:	dc0f0088 	stcle	0, cr0, [pc], {136}	; 0x88
     560:	6e000002 	cdpvs	0, 0, cr0, cr0, cr2, {0}
     564:	10000005 	andne	r0, r0, r5
     568:	000002ca 	andeq	r0, r0, sl, asr #5
     56c:	5e09000b 	cdppl	0, 0, cr0, cr9, cr11, {0}
     570:	0f000005 	svceq	0x00000005
     574:	0000031b 	andeq	r0, r0, fp, lsl r3
     578:	00000583 	andeq	r0, r0, r3, lsl #11
     57c:	0002ca10 	andeq	ip, r2, r0, lsl sl
     580:	0a000100 	beq	988 <startup-0x1ffff678>
     584:	00000573 	andeq	r0, r0, r3, ror r5
     588:	00058309 	andeq	r8, r5, r9, lsl #6
     58c:	031b0f00 	tsteq	fp, #0, 30
     590:	059d0000 	ldreq	r0, [sp]
     594:	ca100000 	bgt	40059c <startup-0x1fbffa64>
     598:	03000002 	movweq	r0, #2
     59c:	058d0a00 	streq	r0, [sp, #2560]	; 0xa00
     5a0:	9d090000 	stcls	0, cr0, [r9, #-0]
     5a4:	0f000005 	svceq	0x00000005
     5a8:	0000031b 	andeq	r0, r0, fp, lsl r3
     5ac:	000005b7 			; <UNDEFINED> instruction: 0x000005b7
     5b0:	0002ca10 	andeq	ip, r2, r0, lsl sl
     5b4:	0a000400 	beq	15bc <startup-0x1fffea44>
     5b8:	000005a7 	andeq	r0, r0, r7, lsr #11
     5bc:	0005b709 	andeq	fp, r5, r9, lsl #14
     5c0:	030b0f00 	movweq	r0, #48896	; 0xbf00
     5c4:	05d10000 	ldrbeq	r0, [r1]
     5c8:	ca100000 	bgt	4005d0 <startup-0x1fbffa30>
     5cc:	04000002 	streq	r0, [r0], #-2
     5d0:	04b10600 	ldrteq	r0, [r1], #1536	; 0x600
     5d4:	d7010000 	strle	r0, [r1, -r0]
     5d8:	00044301 	andeq	r4, r4, r1, lsl #6
     5dc:	01101200 	tsteq	r0, r0, lsl #4
     5e0:	061b02bf 			; <UNDEFINED> instruction: 0x061b02bf
     5e4:	300c0000 	andcc	r0, ip, r0
     5e8:	0100000b 	tsteq	r0, fp
     5ec:	031602c1 	tsteq	r6, #268435468	; 0x1000000c
     5f0:	0c000000 	stceq	0, cr0, [r0], {-0}
     5f4:	00000f47 	andeq	r0, r0, r7, asr #30
     5f8:	1602c201 	strne	ip, [r2], -r1, lsl #4
     5fc:	04000003 	streq	r0, [r0], #-3
     600:	4c415613 	mcrrmi	6, 1, r5, r1, cr3
     604:	02c30100 	sbceq	r0, r3, #0, 2
     608:	00000316 	andeq	r0, r0, r6, lsl r3
     60c:	0e920c08 	cdpeq	12, 9, cr0, cr2, cr8, {0}
     610:	c4010000 	strgt	r0, [r1], #-0
     614:	00031b02 	andeq	r1, r3, r2, lsl #22
     618:	06000c00 	streq	r0, [r0], -r0, lsl #24
     61c:	00000c66 	andeq	r0, r0, r6, ror #24
     620:	dd02c501 	cfstr32le	mvfx12, [r2, #-4]
     624:	0f000005 	svceq	0x00000005
     628:	0000030b 	andeq	r0, r0, fp, lsl #6
     62c:	00000637 	andeq	r0, r0, r7, lsr r6
     630:	0002ca10 	andeq	ip, r2, r0, lsl sl
     634:	14000100 	strne	r0, [r0], #-256	; 0xffffff00
     638:	00001095 	muleq	r0, r5, r0
     63c:	0606fa01 	streq	pc, [r6], -r1, lsl #20
     640:	15000003 	strne	r0, [r0, #-3]
     644:	000008a0 	andeq	r0, r0, r0, lsr #17
     648:	030b3b08 	movweq	r3, #47880	; 0xbb08
     64c:	07160000 	ldreq	r0, [r6, -r0]
     650:	00027101 	andeq	r7, r2, r1, lsl #2
     654:	035d0500 	cmpeq	sp, #0, 10
     658:	00000669 	andeq	r0, r0, r9, ror #12
     65c:	0012f504 	andseq	pc, r2, r4, lsl #10
     660:	53170000 	tstpl	r7, #0
     664:	01005445 	tsteq	r0, r5, asr #8
     668:	0a5b0600 	beq	16c1e70 <startup-0x1e93e190>
     66c:	5d050000 	stcpl	0, cr0, [r5, #-0]
     670:	00064e03 	andeq	r4, r6, r3, lsl #28
     674:	0b1c0600 	bleq	701e7c <startup-0x1f8fe184>
     678:	5d050000 	stcpl	0, cr0, [r5, #-0]
     67c:	00064e03 	andeq	r4, r6, r3, lsl #28
     680:	01071600 	tsteq	r7, r0, lsl #12
     684:	00000271 	andeq	r0, r0, r1, ror r2
     688:	9c035f05 	stcls	15, cr5, [r3], {5}
     68c:	04000006 	streq	r0, [r0], #-6
     690:	00000a31 	andeq	r0, r0, r1, lsr sl
     694:	104a0400 	subne	r0, sl, r0, lsl #8
     698:	00010000 	andeq	r0, r1, r0
     69c:	000d1206 	andeq	r1, sp, r6, lsl #4
     6a0:	035f0500 	cmpeq	pc, #0, 10
     6a4:	00000681 	andeq	r0, r0, r1, lsl #13
     6a8:	71010716 	tstvc	r1, r6, lsl r7
     6ac:	05000002 	streq	r0, [r0, #-2]
     6b0:	06c30362 	strbeq	r0, [r3], r2, ror #6
     6b4:	29040000 	stmdbcs	r4, {}	; <UNPREDICTABLE>
     6b8:	00000009 	andeq	r0, r0, r9
     6bc:	000d9704 	andeq	r9, sp, r4, lsl #14
     6c0:	06000100 	streq	r0, [r0], -r0, lsl #2
     6c4:	00000cb3 			; <UNDEFINED> instruction: 0x00000cb3
     6c8:	a8036205 	stmdage	r3, {r0, r2, r9, sp, lr}
     6cc:	12000006 	andne	r0, r0, #6
     6d0:	05c30528 	strbeq	r0, [r3, #1320]	; 0x528
     6d4:	0000075b 	andeq	r0, r0, fp, asr r7
     6d8:	0010ff0c 	andseq	pc, r0, ip, lsl #30
     6dc:	05c50500 	strbeq	r0, [r5, #1280]	; 0x500
     6e0:	00000316 	andeq	r0, r0, r6, lsl r3
     6e4:	0e8b0c00 	cdpeq	12, 8, cr0, cr11, cr0, {0}
     6e8:	c6050000 	strgt	r0, [r5], -r0
     6ec:	00031605 	andeq	r1, r3, r5, lsl #12
     6f0:	540c0400 	strpl	r0, [ip], #-1024	; 0xfffffc00
     6f4:	05000009 	streq	r0, [r0, #-9]
     6f8:	031605c7 	tsteq	r6, #834666496	; 0x31c00000
     6fc:	0c080000 	stceq	0, cr0, [r8], {-0}
     700:	00000a1b 	andeq	r0, r0, fp, lsl sl
     704:	1605c805 	strne	ip, [r5], -r5, lsl #16
     708:	0c000003 	stceq	0, cr0, [r0], {3}
     70c:	52444913 	subpl	r4, r4, #311296	; 0x4c000
     710:	05c90500 	strbeq	r0, [r9, #1280]	; 0x500
     714:	00000316 	andeq	r0, r0, r6, lsl r3
     718:	444f1310 	strbmi	r1, [pc], #-784	; 720 <startup-0x1ffff8e0>
     71c:	ca050052 	bgt	14086c <startup-0x1febf794>
     720:	00031605 	andeq	r1, r3, r5, lsl #12
     724:	710c1400 	tstvc	ip, r0, lsl #8
     728:	0500000a 	streq	r0, [r0, #-10]
     72c:	02f605cb 	rscseq	r0, r6, #851443712	; 0x32c00000
     730:	0c180000 	ldceq	0, cr0, [r8], {-0}
     734:	00000a4e 	andeq	r0, r0, lr, asr #20
     738:	f605cc05 			; <UNDEFINED> instruction: 0xf605cc05
     73c:	1a000002 	bne	74c <startup-0x1ffff8b4>
     740:	0009130c 	andeq	r1, r9, ip, lsl #6
     744:	05cd0500 	strbeq	r0, [sp, #1280]	; 0x500
     748:	00000316 	andeq	r0, r0, r6, lsl r3
     74c:	4641131c 			; <UNDEFINED> instruction: 0x4641131c
     750:	ce050052 	mcrgt	0, 0, r0, cr5, cr2, {2}
     754:	00076b05 	andeq	r6, r7, r5, lsl #22
     758:	0f002000 	svceq	0x00002000
     75c:	00000316 	andeq	r0, r0, r6, lsl r3
     760:	0000076b 	andeq	r0, r0, fp, ror #14
     764:	0002ca10 	andeq	ip, r2, r0, lsl sl
     768:	09000100 	stmdbeq	r0, {r8}
     76c:	0000075b 	andeq	r0, r0, fp, asr r7
     770:	00107506 	andseq	r7, r0, r6, lsl #10
     774:	05cf0500 	strbeq	r0, [pc, #1280]	; c7c <startup-0x1ffff384>
     778:	000006cf 	andeq	r0, r0, pc, asr #13
     77c:	64059812 	strvs	r9, [r5], #-2066	; 0xfffff7ee
     780:	00093f06 	andeq	r3, r9, r6, lsl #30
     784:	52431300 	subpl	r1, r3, #0, 6
     788:	06660500 	strbteq	r0, [r6], -r0, lsl #10
     78c:	00000316 	andeq	r0, r0, r6, lsl r3
     790:	09700c00 	ldmdbeq	r0!, {sl, fp}^
     794:	67050000 	strvs	r0, [r5, -r0]
     798:	00031606 	andeq	r1, r3, r6, lsl #12
     79c:	530c0400 	movwpl	r0, #50176	; 0xc400
     7a0:	05000011 	streq	r0, [r0, #-17]	; 0xffffffef
     7a4:	03160668 	tsteq	r6, #104, 12	; 0x6800000
     7a8:	13080000 	movwne	r0, #32768	; 0x8000
     7ac:	00524943 	subseq	r4, r2, r3, asr #18
     7b0:	16066905 	strne	r6, [r6], -r5, lsl #18
     7b4:	0c000003 	stceq	0, cr0, [r0], {3}
     7b8:	0004d00c 	andeq	sp, r4, ip
     7bc:	066a0500 	strbteq	r0, [sl], -r0, lsl #10
     7c0:	00000316 	andeq	r0, r0, r6, lsl r3
     7c4:	0fa70c10 	svceq	0x00a70c10
     7c8:	6b050000 	blvs	1407d0 <startup-0x1febf830>
     7cc:	00031606 	andeq	r1, r3, r6, lsl #12
     7d0:	aa0c1400 	bge	3057d8 <startup-0x1fcfa828>
     7d4:	0500000c 	streq	r0, [r0, #-12]
     7d8:	0316066c 	tsteq	r6, #108, 12	; 0x6c00000
     7dc:	0c180000 	ldceq	0, cr0, [r8], {-0}
     7e0:	000003f5 	strdeq	r0, [r0], -r5
     7e4:	0b066d05 	bleq	19bc00 <startup-0x1fe64400>
     7e8:	1c000003 	stcne	0, cr0, [r0], {3}
     7ec:	000ce80c 	andeq	lr, ip, ip, lsl #16
     7f0:	066e0500 	strbteq	r0, [lr], -r0, lsl #10
     7f4:	00000316 	andeq	r0, r0, r6, lsl r3
     7f8:	0a450c20 	beq	1143880 <startup-0x1eebc780>
     7fc:	6f050000 	svcvs	0x00050000
     800:	00031606 	andeq	r1, r3, r6, lsl #12
     804:	ff0c2400 			; <UNDEFINED> instruction: 0xff0c2400
     808:	05000003 	streq	r0, [r0, #-3]
     80c:	06270670 			; <UNDEFINED> instruction: 0x06270670
     810:	0c280000 	stceq	0, cr0, [r8], #-0
     814:	00000f31 	andeq	r0, r0, r1, lsr pc
     818:	16067105 	strne	r7, [r6], -r5, lsl #2
     81c:	30000003 	andcc	r0, r0, r3
     820:	0005480c 	andeq	r4, r5, ip, lsl #16
     824:	06720500 	ldrbteq	r0, [r2], -r0, lsl #10
     828:	00000316 	andeq	r0, r0, r6, lsl r3
     82c:	125c0c34 	subsne	r0, ip, #52, 24	; 0x3400
     830:	73050000 	movwvc	r0, #20480	; 0x5000
     834:	00031606 	andeq	r1, r3, r6, lsl #12
     838:	830c3800 	movwhi	r3, #51200	; 0xc800
     83c:	05000004 	streq	r0, [r0, #-4]
     840:	030b0674 	movweq	r0, #46708	; 0xb674
     844:	0c3c0000 	ldceq	0, cr0, [ip], #-0
     848:	00000d00 	andeq	r0, r0, r0, lsl #26
     84c:	16067505 	strne	r7, [r6], -r5, lsl #10
     850:	40000003 	andmi	r0, r0, r3
     854:	0003180c 	andeq	r1, r3, ip, lsl #16
     858:	06760500 	ldrbteq	r0, [r6], -r0, lsl #10
     85c:	00000316 	andeq	r0, r0, r6, lsl r3
     860:	048d0c44 	streq	r0, [sp], #3140	; 0xc44
     864:	77050000 	strvc	r0, [r5, -r0]
     868:	00062706 	andeq	r2, r6, r6, lsl #14
     86c:	340c4800 	strcc	r4, [ip], #-2048	; 0xfffff800
     870:	05000003 	streq	r0, [r0, #-3]
     874:	03160678 	tsteq	r6, #120, 12	; 0x7800000
     878:	0c500000 	mraeq	r0, r0, acc0
     87c:	0000020b 	andeq	r0, r0, fp, lsl #4
     880:	16067905 	strne	r7, [r6], -r5, lsl #18
     884:	54000003 	strpl	r0, [r0], #-3
     888:	000dd70c 	andeq	sp, sp, ip, lsl #14
     88c:	067a0500 	ldrbteq	r0, [sl], -r0, lsl #10
     890:	00000316 	andeq	r0, r0, r6, lsl r3
     894:	04290c58 	strteq	r0, [r9], #-3160	; 0xfffff3a8
     898:	7b050000 	blvc	1408a0 <startup-0x1febf760>
     89c:	00030b06 	andeq	r0, r3, r6, lsl #22
     8a0:	d70c5c00 	strle	r5, [ip, -r0, lsl #24]
     8a4:	0500000b 	streq	r0, [r0, #-11]
     8a8:	0316067c 	tsteq	r6, #124, 12	; 0x7c00000
     8ac:	0c600000 	stcleq	0, cr0, [r0], #-0
     8b0:	00000ad1 	ldrdeq	r0, [r0], -r1
     8b4:	16067d05 	strne	r7, [r6], -r5, lsl #26
     8b8:	64000003 	strvs	r0, [r0], #-3
     8bc:	0004330c 	andeq	r3, r4, ip, lsl #6
     8c0:	067e0500 	ldrbteq	r0, [lr], -r0, lsl #10
     8c4:	00000627 	andeq	r0, r0, r7, lsr #12
     8c8:	07000c68 	streq	r0, [r0, -r8, ror #24]
     8cc:	7f050000 	svcvc	0x00050000
     8d0:	00031606 	andeq	r1, r3, r6, lsl #12
     8d4:	43137000 	tstmi	r3, #0
     8d8:	05005253 	streq	r5, [r0, #-595]	; 0xfffffdad
     8dc:	03160680 	tsteq	r6, #128, 12	; 0x8000000
     8e0:	0c740000 	ldcleq	0, cr0, [r4], #-0
     8e4:	0000043d 	andeq	r0, r0, sp, lsr r4
     8e8:	27068105 	strcs	r8, [r6, -r5, lsl #2]
     8ec:	78000006 	stmdavc	r0, {r1, r2}
     8f0:	000a210c 	andeq	r2, sl, ip, lsl #2
     8f4:	06820500 	streq	r0, [r2], r0, lsl #10
     8f8:	00000316 	andeq	r0, r0, r6, lsl r3
     8fc:	005a0c80 	subseq	r0, sl, r0, lsl #25
     900:	83050000 	movwhi	r0, #20480	; 0x5000
     904:	00031606 	andeq	r1, r3, r6, lsl #12
     908:	4d0c8400 	cfstrsmi	mvf8, [ip, #-0]
     90c:	05000011 	streq	r0, [r0, #-17]	; 0xffffffef
     910:	03160684 	tsteq	r6, #132, 12	; 0x8400000
     914:	0c880000 	stceq	0, cr0, [r8], {0}
     918:	00000375 	andeq	r0, r0, r5, ror r3
     91c:	16068505 	strne	r8, [r6], -r5, lsl #10
     920:	8c000003 	stchi	0, cr0, [r0], {3}
     924:	000c120c 	andeq	r1, ip, ip, lsl #4
     928:	06860500 	streq	r0, [r6], r0, lsl #10
     92c:	00000316 	andeq	r0, r0, r6, lsl r3
     930:	0eb90c90 	mrceq	12, 5, r0, cr9, cr0, {4}
     934:	87050000 	strhi	r0, [r5, -r0]
     938:	00031606 	andeq	r1, r3, r6, lsl #12
     93c:	06009400 	streq	r9, [r0], -r0, lsl #8
     940:	00000fd0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     944:	7c068905 			; <UNDEFINED> instruction: 0x7c068905
     948:	18000007 	stmdane	r0, {r0, r1, r2}
     94c:	84300910 	ldrthi	r0, [r0], #-2320	; 0xfffff6f0
     950:	19000009 	stmdbne	r0, {r0, r3}
     954:	000011c1 	andeq	r1, r0, r1, asr #3
     958:	030b3209 	movweq	r3, #45577	; 0xb209
     95c:	19000000 	stmdbne	r0, {}	; <UNPREDICTABLE>
     960:	0000009a 	muleq	r0, sl, r0
     964:	030b3309 	movweq	r3, #45833	; 0xb309
     968:	19040000 	stmdbne	r4, {}	; <UNPREDICTABLE>
     96c:	000005da 	ldrdeq	r0, [r0], -sl
     970:	030b3409 	movweq	r3, #46089	; 0xb409
     974:	19080000 	stmdbne	r8, {}	; <UNPREDICTABLE>
     978:	00000550 	andeq	r0, r0, r0, asr r5
     97c:	030b3509 	movweq	r3, #46345	; 0xb509
     980:	000c0000 	andeq	r0, ip, r0
     984:	000fb907 	andeq	fp, pc, r7, lsl #18
     988:	4b360900 	blmi	d82d90 <startup-0x1f27d270>
     98c:	0f000009 	svceq	0x00000009
     990:	000002e6 	andeq	r0, r0, r6, ror #5
     994:	0000099f 	muleq	r0, pc, r9	; <UNPREDICTABLE>
     998:	0002ca10 	andeq	ip, r2, r0, lsl sl
     99c:	0a000f00 	beq	45a4 <startup-0x1fffba5c>
     9a0:	0000098f 	andeq	r0, r0, pc, lsl #19
     9a4:	00099f09 	andeq	r9, r9, r9, lsl #30
     9a8:	09ac1a00 	stmibeq	ip!, {r9, fp, ip}
     9ac:	99020000 	stmdbls	r2, {}	; <UNPREDICTABLE>
     9b0:	000009a4 	andeq	r0, r0, r4, lsr #19
     9b4:	30400305 	subcc	r0, r0, r5, lsl #6
     9b8:	071b2000 	ldreq	r2, [fp, -r0]
     9bc:	00027101 	andeq	r7, r2, r1, lsl #2
     9c0:	e0420a00 	sub	r0, r2, r0, lsl #20
     9c4:	04000009 	streq	r0, [r0], #-9
     9c8:	000008de 	ldrdeq	r0, [r0], -lr
     9cc:	076f0400 	strbeq	r0, [pc, -r0, lsl #8]!
     9d0:	04010000 	streq	r0, [r1], #-0
     9d4:	00000291 	muleq	r0, r1, r2
     9d8:	02cd0402 	sbceq	r0, sp, #33554432	; 0x2000000
     9dc:	00030000 	andeq	r0, r3, r0
     9e0:	000df607 	andeq	pc, sp, r7, lsl #12
     9e4:	ba470a00 	blt	11c31ec <startup-0x1ee3ce14>
     9e8:	1b000009 	blne	a14 <startup-0x1ffff5ec>
     9ec:	02710107 	rsbseq	r0, r1, #-1073741823	; 0xc0000001
     9f0:	4f0a0000 	svcmi	0x000a0000
     9f4:	00000a05 	andeq	r0, r0, r5, lsl #20
     9f8:	00044c04 	andeq	r4, r4, r4, lsl #24
     9fc:	8e040000 	cdphi	0, 0, cr0, cr4, cr0, {0}
     a00:	01000003 	tsteq	r0, r3
     a04:	012a0700 			; <UNDEFINED> instruction: 0x012a0700
     a08:	520a0000 	andpl	r0, sl, #0
     a0c:	000009eb 	andeq	r0, r0, fp, ror #19
     a10:	7101071b 	tstvc	r1, fp, lsl r7
     a14:	0a000002 	beq	a24 <startup-0x1ffff5dc>
     a18:	000a365a 	andeq	r3, sl, sl, asr r6
     a1c:	05600400 	strbeq	r0, [r0, #-1024]!	; 0xfffffc00
     a20:	04000000 	streq	r0, [r0], #-0
     a24:	000009bd 			; <UNDEFINED> instruction: 0x000009bd
     a28:	12870401 	addne	r0, r7, #16777216	; 0x1000000
     a2c:	04020000 	streq	r0, [r2], #-0
     a30:	00000a77 	andeq	r0, r0, r7, ror sl
     a34:	4c070003 	stcmi	0, cr0, [r7], {3}
     a38:	0a00000f 	beq	a7c <startup-0x1ffff584>
     a3c:	000a105f 	andeq	r1, sl, pc, asr r0
     a40:	01071b00 	tsteq	r7, r0, lsl #22
     a44:	00000271 	andeq	r0, r0, r1, ror r2
     a48:	0a616e0a 	beq	185c278 <startup-0x1e7a3d88>
     a4c:	a9040000 	stmdbge	r4, {}	; <UNPREDICTABLE>
     a50:	00000000 	andeq	r0, r0, r0
     a54:	00113304 	andseq	r3, r1, r4, lsl #6
     a58:	15040100 	strne	r0, [r4, #-256]	; 0xffffff00
     a5c:	02000002 	andeq	r0, r0, #2
     a60:	04ba0700 	ldrteq	r0, [sl], #1792	; 0x700
     a64:	720a0000 	andvc	r0, sl, #0
     a68:	00000a41 	andeq	r0, r0, r1, asr #20
     a6c:	840a0818 	strhi	r0, [sl], #-2072	; 0xfffff7e8
     a70:	00000ab1 			; <UNDEFINED> instruction: 0x00000ab1
     a74:	000f7019 	andeq	r7, pc, r9, lsl r0	; <UNPREDICTABLE>
     a78:	0b860a00 	bleq	fe183280 <GPIO_Ports+0xde180210>
     a7c:	00000003 	andeq	r0, r0, r3
     a80:	000d9f19 	andeq	r9, sp, r9, lsl pc
     a84:	e0890a00 	add	r0, r9, r0, lsl #20
     a88:	04000009 	streq	r0, [r0], #-9
     a8c:	000b4c19 	andeq	r4, fp, r9, lsl ip
     a90:	368c0a00 	strcc	r0, [ip], r0, lsl #20
     a94:	0500000a 	streq	r0, [r0, #-10]
     a98:	00099619 	andeq	r9, r9, r9, lsl r6
     a9c:	058f0a00 	streq	r0, [pc, #2560]	; 14a4 <startup-0x1fffeb5c>
     aa0:	0600000a 	streq	r0, [r0], -sl
     aa4:	000f9d19 	andeq	r9, pc, r9, lsl sp	; <UNPREDICTABLE>
     aa8:	61920a00 	orrsvs	r0, r2, r0, lsl #20
     aac:	0700000a 	streq	r0, [r0, -sl]
     ab0:	039c0700 	orrseq	r0, ip, #0, 14
     ab4:	940a0000 	strls	r0, [sl], #-0
     ab8:	00000a6c 	andeq	r0, r0, ip, ror #20
     abc:	0008ce1c 	andeq	ip, r8, ip, lsl lr
     ac0:	010b2000 	mrseq	r2, (UNDEF: 11)
     ac4:	00000b34 	andeq	r0, r0, r4, lsr fp
     ac8:	0064691d 	rsbeq	r6, r4, sp, lsl r9
     acc:	0b34030b 	bleq	d01700 <startup-0x1f2fe900>
     ad0:	19000000 	stmdbne	r0, {}	; <UNPREDICTABLE>
     ad4:	000002ea 	andeq	r0, r0, sl, ror #5
     ad8:	02c3040b 	sbceq	r0, r3, #184549376	; 0xb000000
     adc:	19040000 	stmdbne	r4, {}	; <UNPREDICTABLE>
     ae0:	000001d9 	ldrdeq	r0, [r0], -r9
     ae4:	0b34050b 	bleq	d01f18 <startup-0x1f2fe0e8>
     ae8:	19080000 	stmdbne	r8, {}	; <UNPREDICTABLE>
     aec:	00000c7a 	andeq	r0, r0, sl, ror ip
     af0:	0b34060b 	bleq	d02324 <startup-0x1f2fdcdc>
     af4:	19090000 	stmdbne	r9, {}	; <UNPREDICTABLE>
     af8:	00000ffa 	strdeq	r0, [r0], -sl
     afc:	02c3070b 	sbceq	r0, r3, #2883584	; 0x2c0000
     b00:	190c0000 	stmdbne	ip, {}	; <UNPREDICTABLE>
     b04:	00000f15 	andeq	r0, r0, r5, lsl pc
     b08:	02c3080b 	sbceq	r0, r3, #720896	; 0xb0000
     b0c:	19100000 	ldmdbne	r0, {}	; <UNPREDICTABLE>
     b10:	000005c5 	andeq	r0, r0, r5, asr #11
     b14:	02c3090b 	sbceq	r0, r3, #180224	; 0x2c000
     b18:	19140000 	ldmdbne	r4, {}	; <UNPREDICTABLE>
     b1c:	000010e8 	andeq	r1, r0, r8, ror #1
     b20:	02c30a0b 	sbceq	r0, r3, #45056	; 0xb000
     b24:	19180000 	ldmdbne	r8, {}	; <UNPREDICTABLE>
     b28:	00001018 	andeq	r1, r0, r8, lsl r0
     b2c:	0b3b0b0b 	bleq	ec3760 <startup-0x1f13c8a0>
     b30:	001c0000 	andseq	r0, ip, r0
     b34:	12080105 	andne	r0, r8, #1073741825	; 0x40000001
     b38:	1e000004 	cdpne	0, 0, cr0, cr0, cr4, {0}
     b3c:	00077004 	andeq	r7, r7, r4
     b40:	08cf0700 	stmiaeq	pc, {r8, r9, sl}^	; <UNPREDICTABLE>
     b44:	0c0b0000 	stceq	0, cr0, [fp], {-0}
     b48:	00000abc 			; <UNDEFINED> instruction: 0x00000abc
     b4c:	0002eb0f 	andeq	lr, r2, pc, lsl #22
     b50:	000b5c00 	andeq	r5, fp, r0, lsl #24
     b54:	02ca1000 	sbceq	r1, sl, #0
     b58:	000f0000 	andeq	r0, pc, r0
     b5c:	0007651f 	andeq	r6, r7, pc, lsl r5
     b60:	4c170400 	cfldrsmi	mvf0, [r7], {-0}
     b64:	0500000b 	streq	r0, [r0, #-11]
     b68:	00305003 	eorseq	r5, r0, r3
     b6c:	0b3b0f20 	bleq	ec47f4 <startup-0x1f13b80c>
     b70:	0b7d0000 	bleq	1f40b78 <startup-0x1e0bf488>
     b74:	ca100000 	bgt	400b7c <startup-0x1fbff484>
     b78:	03000002 	movweq	r0, #2
     b7c:	02491f00 	subeq	r1, r9, #0, 30
     b80:	1c040000 	stcne	0, cr0, [r4], {-0}
     b84:	00000b6d 	andeq	r0, r0, sp, ror #22
     b88:	30700305 	rsbscc	r0, r0, r5, lsl #6
     b8c:	3c1f2000 	ldccc	0, cr2, [pc], {-0}
     b90:	04000009 	streq	r0, [r0], #-9
     b94:	0003161f 	andeq	r1, r3, pc, lsl r6
     b98:	3c030500 	cfstr32cc	mvfx0, [r3], {-0}
     b9c:	20200030 	eorcs	r0, r0, r0, lsr r0
     ba0:	000010cf 	andeq	r1, r0, pc, asr #1
     ba4:	0fb43104 	svceq	0x00b43104
     ba8:	0d502000 	ldcleq	0, cr2, [r0, #-0]
     bac:	9c010000 	stcls	0, cr0, [r1], {-0}
     bb0:	00000e80 	andeq	r0, r0, r0, lsl #29
     bb4:	0004f01a 	andeq	pc, r4, sl, lsl r0	; <UNPREDICTABLE>
     bb8:	41370400 	teqmi	r7, r0, lsl #8
     bbc:	0300000b 	movweq	r0, #11
     bc0:	1a7f9891 	bne	1fe6e0c <startup-0x1e0191f4>
     bc4:	000004f6 	strdeq	r0, [r0], -r6
     bc8:	0b413704 	bleq	104e7e0 <startup-0x1efb1820>
     bcc:	91030000 	mrsls	r0, (UNDEF: 3)
     bd0:	fc1a7ef8 	ldc2	14, cr7, [sl], {248}	; 0xf8
     bd4:	04000004 	streq	r0, [r0], #-4
     bd8:	000b4137 	andeq	r4, fp, r7, lsr r1
     bdc:	d8910300 	ldmle	r1, {r8, r9}
     be0:	05021a7e 	streq	r1, [r2, #-2686]	; 0xfffff582
     be4:	37040000 	strcc	r0, [r4, -r0]
     be8:	00000b41 	andeq	r0, r0, r1, asr #22
     bec:	7eb89103 	asnvce	f1, f3
     bf0:	0005081a 	andeq	r0, r5, sl, lsl r8
     bf4:	41370400 	teqmi	r7, r0, lsl #8
     bf8:	0300000b 	movweq	r0, #11
     bfc:	1a7e9891 	bne	1fa6e48 <startup-0x1e0591b8>
     c00:	0000050e 	andeq	r0, r0, lr, lsl #10
     c04:	0b413704 	bleq	104e81c <startup-0x1efb17e4>
     c08:	91030000 	mrsls	r0, (UNDEF: 3)
     c0c:	141a7df8 	ldrne	r7, [sl], #-3576	; 0xfffff208
     c10:	04000005 	streq	r0, [r0], #-5
     c14:	000b4137 	andeq	r4, fp, r7, lsr r1
     c18:	d8910300 	ldmle	r1, {r8, r9}
     c1c:	051a1a7d 	ldreq	r1, [sl, #-2685]	; 0xfffff583
     c20:	37040000 	strcc	r0, [r4, -r0]
     c24:	00000b41 	andeq	r0, r0, r1, asr #22
     c28:	7db89103 	ldfvcd	f1, [r8, #12]!
     c2c:	000de11a 	andeq	lr, sp, sl, lsl r1
     c30:	41370400 	teqmi	r7, r0, lsl #8
     c34:	0300000b 	movweq	r0, #11
     c38:	1a7d9891 	bne	1f66e84 <startup-0x1e09917c>
     c3c:	00000de8 	andeq	r0, r0, r8, ror #27
     c40:	0b413704 	bleq	104e858 <startup-0x1efb17a8>
     c44:	91030000 	mrsls	r0, (UNDEF: 3)
     c48:	ef1a7cf8 	svc	0x001a7cf8
     c4c:	0400000d 	streq	r0, [r0], #-13
     c50:	000b4137 	andeq	r4, fp, r7, lsr r1
     c54:	d8910300 	ldmle	r1, {r8, r9}
     c58:	05ea1a7c 	strbeq	r1, [sl, #2684]!	; 0xa7c
     c5c:	37040000 	strcc	r0, [r4, -r0]
     c60:	00000b41 	andeq	r0, r0, r1, asr #22
     c64:	7cb89103 	ldfvcd	f1, [r8], #12
     c68:	000e071a 	andeq	r0, lr, sl, lsl r7
     c6c:	41370400 	teqmi	r7, r0, lsl #8
     c70:	0300000b 	movweq	r0, #11
     c74:	1a7c9891 	bne	1f26ec0 <startup-0x1e0d9140>
     c78:	00000e0e 	andeq	r0, r0, lr, lsl #28
     c7c:	0b413704 	bleq	104e894 <startup-0x1efb176c>
     c80:	91030000 	mrsls	r0, (UNDEF: 3)
     c84:	151a7bf8 	ldrne	r7, [sl, #-3064]	; 0xfffff408
     c88:	0400000e 	streq	r0, [r0], #-14
     c8c:	000b4137 	andeq	r4, fp, r7, lsr r1
     c90:	d8910300 	ldmle	r1, {r8, r9}
     c94:	11b51a7b 			; <UNDEFINED> instruction: 0x11b51a7b
     c98:	37040000 	strcc	r0, [r4, -r0]
     c9c:	00000b41 	andeq	r0, r0, r1, asr #22
     ca0:	7bb89103 	blvc	fee250b4 <GPIO_Ports+0xdee22044>
     ca4:	000e1c1a 	andeq	r1, lr, sl, lsl ip
     ca8:	41370400 	teqmi	r7, r0, lsl #8
     cac:	0300000b 	movweq	r0, #11
     cb0:	1a7b9891 	bne	1ee6efc <startup-0x1e119104>
     cb4:	00000e23 	andeq	r0, r0, r3, lsr #28
     cb8:	0b413704 	bleq	104e8d0 <startup-0x1efb1730>
     cbc:	91030000 	mrsls	r0, (UNDEF: 3)
     cc0:	f21a7af8 	vpmin.s16	<illegal reg q3.5>, q13, q12
     cc4:	0400000e 	streq	r0, [r0], #-14
     cc8:	000b4137 	andeq	r4, fp, r7, lsr r1
     ccc:	d8910300 	ldmle	r1, {r8, r9}
     cd0:	0ef91a7a 			; <UNDEFINED> instruction: 0x0ef91a7a
     cd4:	37040000 	strcc	r0, [r4, -r0]
     cd8:	00000b41 	andeq	r0, r0, r1, asr #22
     cdc:	7ab89103 	bvc	fee250f0 <GPIO_Ports+0xdee22080>
     ce0:	000f001a 	andeq	r0, pc, sl, lsl r0	; <UNPREDICTABLE>
     ce4:	41370400 	teqmi	r7, r0, lsl #8
     ce8:	0300000b 	movweq	r0, #11
     cec:	1a7a9891 	bne	1ea6f38 <startup-0x1e1590c8>
     cf0:	00000f07 	andeq	r0, r0, r7, lsl #30
     cf4:	0b413704 	bleq	104e90c <startup-0x1efb16f4>
     cf8:	91030000 	mrsls	r0, (UNDEF: 3)
     cfc:	0e1a79f8 			; <UNDEFINED> instruction: 0x0e1a79f8
     d00:	0400000f 	streq	r0, [r0], #-15
     d04:	000b4137 	andeq	r4, fp, r7, lsr r1
     d08:	d8910300 	ldmle	r1, {r8, r9}
     d0c:	000e1a79 	andeq	r1, lr, r9, ror sl
     d10:	37040000 	strcc	r0, [r4, -r0]
     d14:	00000b41 	andeq	r0, r0, r1, asr #22
     d18:	79b89103 	ldmibvc	r8!, {r0, r1, r8, ip, pc}
     d1c:	0000151a 	andeq	r1, r0, sl, lsl r5
     d20:	41370400 	teqmi	r7, r0, lsl #8
     d24:	0300000b 	movweq	r0, #11
     d28:	1a799891 	bne	1e66f74 <startup-0x1e19908c>
     d2c:	0000090c 	andeq	r0, r0, ip, lsl #18
     d30:	0b413704 	bleq	104e948 <startup-0x1efb16b8>
     d34:	91030000 	mrsls	r0, (UNDEF: 3)
     d38:	391a78f8 	ldmdbcc	sl, {r3, r4, r5, r6, r7, fp, ip, sp, lr}
     d3c:	0400000f 	streq	r0, [r0], #-15
     d40:	000b4137 	andeq	r4, fp, r7, lsr r1
     d44:	d8910300 	ldmle	r1, {r8, r9}
     d48:	0f401a78 	svceq	0x00401a78
     d4c:	37040000 	strcc	r0, [r4, -r0]
     d50:	00000b41 	andeq	r0, r0, r1, asr #22
     d54:	78b89103 	ldmvc	r8!, {r0, r1, r8, ip, pc}
     d58:	000fdc1a 	andeq	sp, pc, sl, lsl ip	; <UNPREDICTABLE>
     d5c:	41370400 	teqmi	r7, r0, lsl #8
     d60:	0300000b 	movweq	r0, #11
     d64:	1a789891 	bne	1e26fb0 <startup-0x1e1d9050>
     d68:	00000fe3 	andeq	r0, r0, r3, ror #31
     d6c:	0b413704 	bleq	104e984 <startup-0x1efb167c>
     d70:	91030000 	mrsls	r0, (UNDEF: 3)
     d74:	d41a77f8 	ldrle	r7, [sl], #-2040	; 0xfffff808
     d78:	04000000 	streq	r0, [r0], #-0
     d7c:	000b4137 	andeq	r4, fp, r7, lsr r1
     d80:	d8910300 	ldmle	r1, {r8, r9}
     d84:	05f61a77 	ldrbeq	r1, [r6, #2679]!	; 0xa77
     d88:	38040000 	stmdacc	r4, {}	; <UNPREDICTABLE>
     d8c:	00000e80 	andeq	r0, r0, r0, lsl #29
     d90:	6fd89103 	svcvs	0x00d89103
     d94:	0006c11a 	andeq	ip, r6, sl, lsl r1
     d98:	c33a0400 	teqgt	sl, #0, 8
     d9c:	02000002 	andeq	r0, r0, #2
     da0:	f31a5c91 	vqrdmlsh.s16	d5, d26, d1
     da4:	0400000b 	streq	r0, [r0], #-11
     da8:	000e9044 	andeq	r9, lr, r4, asr #32
     dac:	bc910400 	cfldrslt	mvf0, [r1], {0}
     db0:	4c1a067f 	ldcmi	6, cr0, [sl], {127}	; 0x7f
     db4:	04000007 	streq	r0, [r0], #-7
     db8:	0002c345 	andeq	ip, r2, r5, asr #6
     dbc:	58910200 	ldmpl	r1, {r9}
     dc0:	00157621 	andseq	r7, r5, r1, lsr #12
     dc4:	0000b020 	andeq	fp, r0, r0, lsr #32
     dc8:	000df000 	andeq	pc, sp, r0
     dcc:	006a2200 	rsbeq	r2, sl, r0, lsl #4
     dd0:	02c33b04 	sbceq	r3, r3, #4, 22	; 0x1000
     dd4:	91020000 	mrsls	r0, (UNDEF: 2)
     dd8:	15862360 	strne	r2, [r6, #864]	; 0x360
     ddc:	007a2000 	rsbseq	r2, sl, r0
     de0:	69220000 	stmdbvs	r2!, {}	; <UNPREDICTABLE>
     de4:	c33d0400 	teqgt	sp, #0, 8
     de8:	02000002 	andeq	r0, r0, #2
     dec:	00006491 	muleq	r0, r1, r4
     df0:	0016b421 	andseq	fp, r6, r1, lsr #8
     df4:	00020820 	andeq	r0, r2, r0, lsr #16
     df8:	000e2000 	andeq	r2, lr, r0
     dfc:	006a2200 	rsbeq	r2, sl, r0, lsl #4
     e00:	02c34604 	sbceq	r4, r3, #4, 12	; 0x400000
     e04:	91020000 	mrsls	r0, (UNDEF: 2)
     e08:	16c42354 			; <UNDEFINED> instruction: 0x16c42354
     e0c:	01d02000 	bicseq	r2, r0, r0
     e10:	69220000 	stmdbvs	r2!, {}	; <UNPREDICTABLE>
     e14:	c3480400 	movtgt	r0, #33792	; 0x8400
     e18:	02000002 	andeq	r0, r0, #2
     e1c:	00005091 	muleq	r0, r1, r0
     e20:	0018bc21 	andseq	fp, r8, r1, lsr #24
     e24:	0000d020 	andeq	sp, r0, r0, lsr #32
     e28:	000e5300 	andeq	r5, lr, r0, lsl #6
     e2c:	00692200 	rsbeq	r2, r9, r0, lsl #4
     e30:	02c35604 	sbceq	r5, r3, #4, 12	; 0x400000
     e34:	91020000 	mrsls	r0, (UNDEF: 2)
     e38:	18cc234c 	stmiane	ip, {r2, r3, r6, r8, r9, sp}^
     e3c:	009a2000 	addseq	r2, sl, r0
     e40:	731a0000 	tstvc	sl, #0
     e44:	0400000c 	streq	r0, [r0], #-12
     e48:	0002c359 	andeq	ip, r2, r9, asr r3
     e4c:	b8910300 	ldmlt	r1, {r8, r9}
     e50:	2300007f 	movwcs	r0, #127	; 0x7f
     e54:	20001996 	mulcs	r0, r6, r9
     e58:	0000035c 	andeq	r0, r0, ip, asr r3
     e5c:	04006922 	streq	r6, [r0], #-2338	; 0xfffff6de
     e60:	0002c362 	andeq	ip, r2, r2, ror #6
     e64:	48910200 	ldmmi	r1, {r9}
     e68:	001ac623 	andseq	ip, sl, r3, lsr #12
     e6c:	0001fa20 	andeq	pc, r1, r0, lsr #20
     e70:	00692200 	rsbeq	r2, r9, r0, lsl #4
     e74:	02c37204 	sbceq	r7, r3, #4, 4	; 0x40000000
     e78:	91020000 	mrsls	r0, (UNDEF: 2)
     e7c:	00000044 	andeq	r0, r0, r4, asr #32
     e80:	000b410f 	andeq	r4, fp, pc, lsl #2
     e84:	000e9000 	andeq	r9, lr, r0
     e88:	02ca1000 	sbceq	r1, sl, #0
     e8c:	001f0000 	andseq	r0, pc, r0
     e90:	000b410f 	andeq	r4, fp, pc, lsl #2
     e94:	000ea300 	andeq	sl, lr, r0, lsl #6
     e98:	02ca2400 	sbceq	r2, sl, #0, 8
     e9c:	91030000 	mrsls	r0, (UNDEF: 3)
     ea0:	20000640 	andcs	r0, r0, r0, asr #12
     ea4:	00000bac 	andeq	r0, r0, ip, lsr #23
     ea8:	0f882404 	svceq	0x00882404
     eac:	002c2000 	eoreq	r2, ip, r0
     eb0:	9c010000 	stcls	0, cr0, [r1], {-0}
     eb4:	00000ec7 	andeq	r0, r0, r7, asr #29
     eb8:	00011f1a 	andeq	r1, r1, sl, lsl pc
     ebc:	0b280400 	bleq	a01ec4 <startup-0x1f5fe13c>
     ec0:	02000003 	andeq	r0, r0, #3
     ec4:	25007491 	strcs	r7, [r0, #-1169]	; 0xfffffb6f
     ec8:	0000025a 	andeq	r0, r0, sl, asr r2
     ecc:	0f702004 	svceq	0x00702004
     ed0:	00182000 	andseq	r2, r8, r0
     ed4:	9c010000 	stcls	0, cr0, [r1], {-0}
     ed8:	000cd125 	andeq	sp, ip, r5, lsr #2
     edc:	000d0400 	andeq	r0, sp, r0, lsl #8
     ee0:	0c200000 	stceq	0, cr0, [r0], #-0
     ee4:	01000000 	mrseq	r0, (UNDEF: 0)
     ee8:	0244269c 	subeq	r2, r4, #156, 12	; 0x9c00000
     eec:	02030000 	andeq	r0, r3, #0
     ef0:	20000da8 	andcs	r0, r0, r8, lsr #27
     ef4:	000001c8 	andeq	r0, r0, r8, asr #3
     ef8:	0f0d9c01 	svceq	0x000d9c01
     efc:	a91a0000 	ldmdbge	sl, {}	; <UNPREDICTABLE>
     f00:	0300000e 	movweq	r0, #14
     f04:	000ab105 	andeq	fp, sl, r5, lsl #2
     f08:	70910200 	addsvc	r0, r1, r0, lsl #4
     f0c:	0b642700 	bleq	190ab14 <startup-0x1e6f54ec>
     f10:	5e020000 	cdppl	0, 0, cr0, cr2, cr0, {0}
     f14:	000d880c 	andeq	r8, sp, ip, lsl #16
     f18:	00002020 	andeq	r2, r0, r0, lsr #32
     f1c:	339c0100 	orrscc	r0, ip, #0, 2
     f20:	2800000f 	stmdacs	r0, {r0, r1, r2, r3}
     f24:	0000100c 	andeq	r1, r0, ip
     f28:	d10c5e02 	tstle	ip, r2, lsl #28
     f2c:	02000002 	andeq	r0, r0, #2
     f30:	29007791 	stmdbcs	r0, {r0, r4, r7, r8, r9, sl, ip, sp, lr}
     f34:	00000b15 	andeq	r0, r0, r5, lsl fp
     f38:	750c3c02 	strvc	r3, [ip, #-3074]	; 0xfffff3fe
     f3c:	44000006 	strmi	r0, [r0], #-6
     f40:	4420000d 	strtmi	r0, [r0], #-13
     f44:	01000000 	mrseq	r0, (UNDEF: 0)
     f48:	000f6c9c 	muleq	pc, ip, ip	; <UNPREDICTABLE>
     f4c:	100c2800 	andne	r2, ip, r0, lsl #16
     f50:	3c020000 	stccc	0, cr0, [r2], {-0}
     f54:	0002d10c 	andeq	sp, r2, ip, lsl #2
     f58:	6f910200 	svcvs	0x00910200
     f5c:	0010402a 	andseq	r4, r0, sl, lsr #32
     f60:	0c3e0200 	lfmeq	f0, 4, [lr], #-0
     f64:	00000675 	andeq	r0, r0, r5, ror r6
     f68:	00779102 	rsbseq	r9, r7, r2, lsl #2
     f6c:	0006e42b 	andeq	lr, r6, fp, lsr #8
     f70:	0c280200 	sfmeq	f0, 4, [r8], #-0
     f74:	20000d28 	andcs	r0, r0, r8, lsr #26
     f78:	0000001c 	andeq	r0, r0, ip, lsl r0
     f7c:	54299c01 	strtpl	r9, [r9], #-3073	; 0xfffff3ff
     f80:	0200000a 	andeq	r0, r0, #10
     f84:	06690bfb 			; <UNDEFINED> instruction: 0x06690bfb
     f88:	0ca40000 	stceq	0, cr0, [r4]
     f8c:	00842000 	addeq	r2, r4, r0
     f90:	9c010000 	stcls	0, cr0, [r1], {-0}
     f94:	00000fd5 	ldrdeq	r0, [r0], -r5
     f98:	000b0c28 	andeq	r0, fp, r8, lsr #24
     f9c:	0bfb0200 	bleq	ffec17a4 <GPIO_Ports+0xdfebe734>
     fa0:	000002d1 	ldrdeq	r0, [r0], -r1
     fa4:	2c679102 	stfcsp	f1, [r7], #-8
     fa8:	00706d74 	rsbseq	r6, r0, r4, ror sp
     fac:	0b0bfd02 	bleq	3003bc <startup-0x1fcffc44>
     fb0:	02000003 	andeq	r0, r0, #3
     fb4:	b92a6c91 	stmdblt	sl!, {r0, r4, r7, sl, fp, sp, lr}
     fb8:	0200000b 	andeq	r0, r0, #11
     fbc:	030b0bfe 	movweq	r0, #48126	; 0xbbfe
     fc0:	91020000 	mrsls	r0, (UNDEF: 2)
     fc4:	10402a74 	subne	r2, r0, r4, ror sl
     fc8:	ff020000 			; <UNDEFINED> instruction: 0xff020000
     fcc:	0006690b 	andeq	r6, r6, fp, lsl #18
     fd0:	73910200 	orrsvc	r0, r1, #0, 4
     fd4:	0a872700 	beq	fe1cabdc <GPIO_Ports+0xde1c7b6c>
     fd8:	d6020000 	strle	r0, [r2], -r0
     fdc:	000c540b 	andeq	r5, ip, fp, lsl #8
     fe0:	00005020 	andeq	r5, r0, r0, lsr #32
     fe4:	0a9c0100 	beq	fe7013ec <GPIO_Ports+0xde6fe37c>
     fe8:	28000010 	stmdacs	r0, {r4}
     fec:	0000100c 	andeq	r1, r0, ip
     ff0:	d10bd602 	tstle	fp, r2, lsl #12
     ff4:	02000002 	andeq	r0, r0, #2
     ff8:	43287791 			; <UNDEFINED> instruction: 0x43287791
     ffc:	0200000b 	andeq	r0, r0, #11
    1000:	069c0bd6 			; <UNDEFINED> instruction: 0x069c0bd6
    1004:	91020000 	mrsls	r0, (UNDEF: 2)
    1008:	c0270076 	eorgt	r0, r7, r6, ror r0
    100c:	0200000d 	andeq	r0, r0, #13
    1010:	0c180a9e 			; <UNDEFINED> instruction: 0x0c180a9e
    1014:	003c2000 	eorseq	r2, ip, r0
    1018:	9c010000 	stcls	0, cr0, [r1], {-0}
    101c:	00001030 	andeq	r1, r0, r0, lsr r0
    1020:	00015328 	andeq	r5, r1, r8, lsr #6
    1024:	0a9e0200 	beq	fe78182c <GPIO_Ports+0xde77e7bc>
    1028:	000002d1 	ldrdeq	r0, [r0], -r1
    102c:	00779102 	rsbseq	r9, r7, r2, lsl #2
    1030:	0000e527 	andeq	lr, r0, r7, lsr #10
    1034:	0a860200 	beq	fe18183c <GPIO_Ports+0xde17e7cc>
    1038:	20000bd8 	ldrdcs	r0, [r0], -r8
    103c:	00000040 	andeq	r0, r0, r0, asr #32
    1040:	10659c01 	rsbne	r9, r5, r1, lsl #24
    1044:	c3280000 			; <UNDEFINED> instruction: 0xc3280000
    1048:	0200000b 	andeq	r0, r0, #11
    104c:	030b0a86 	movweq	r0, #47750	; 0xba86
    1050:	91020000 	mrsls	r0, (UNDEF: 2)
    1054:	0b432874 	bleq	10cb22c <startup-0x1ef34dd4>
    1058:	86020000 	strhi	r0, [r2], -r0
    105c:	00069c0a 	andeq	r9, r6, sl, lsl #24
    1060:	73910200 	orrsvc	r0, r1, #0, 4
    1064:	10582700 	subsne	r2, r8, r0, lsl #14
    1068:	52020000 	andpl	r0, r2, #0
    106c:	000b980a 	andeq	r9, fp, sl, lsl #16
    1070:	00004020 	andeq	r4, r0, r0, lsr #32
    1074:	9a9c0100 	bls	fe70147c <GPIO_Ports+0xde6fe40c>
    1078:	28000010 	stmdacs	r0, {r4}
    107c:	00000adb 	ldrdeq	r0, [r0], -fp
    1080:	0b0a5202 	bleq	295890 <startup-0x1fd6a770>
    1084:	02000003 	andeq	r0, r0, #3
    1088:	43287491 			; <UNDEFINED> instruction: 0x43287491
    108c:	0200000b 	andeq	r0, r0, #11
    1090:	069c0a52 			; <UNDEFINED> instruction: 0x069c0a52
    1094:	91020000 	mrsls	r0, (UNDEF: 2)
    1098:	20270073 	eorcs	r0, r7, r3, ror r0
    109c:	02000005 	andeq	r0, r0, #5
    10a0:	0b580a19 	bleq	160390c <startup-0x1e9fc6f4>
    10a4:	00402000 	subeq	r2, r0, r0
    10a8:	9c010000 	stcls	0, cr0, [r1], {-0}
    10ac:	000010cf 	andeq	r1, r0, pc, asr #1
    10b0:	00035a28 	andeq	r5, r3, r8, lsr #20
    10b4:	0a190200 	beq	6418bc <startup-0x1f9be744>
    10b8:	0000030b 	andeq	r0, r0, fp, lsl #6
    10bc:	28749102 	ldmdacs	r4!, {r1, r8, ip, pc}^
    10c0:	00000b43 	andeq	r0, r0, r3, asr #22
    10c4:	9c0a1902 			; <UNDEFINED> instruction: 0x9c0a1902
    10c8:	02000006 	andeq	r0, r0, #6
    10cc:	27007391 			; <UNDEFINED> instruction: 0x27007391
    10d0:	00000102 	andeq	r0, r0, r2, lsl #2
    10d4:	1809fb02 	stmdane	r9, {r1, r8, r9, fp, ip, sp, lr, pc}
    10d8:	4020000b 	eormi	r0, r0, fp
    10dc:	01000000 	mrseq	r0, (UNDEF: 0)
    10e0:	0011049c 	mulseq	r1, ip, r4
    10e4:	11242800 			; <UNDEFINED> instruction: 0x11242800
    10e8:	fb020000 	blx	810f2 <startup-0x1ff7ef0e>
    10ec:	00030b09 	andeq	r0, r3, r9, lsl #22
    10f0:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    10f4:	000b4328 	andeq	r4, fp, r8, lsr #6
    10f8:	09fb0200 	ldmibeq	fp!, {r9}^
    10fc:	0000069c 	muleq	r0, ip, r6
    1100:	00739102 	rsbseq	r9, r3, r2, lsl #2
    1104:	0010aa27 	andseq	sl, r0, r7, lsr #20
    1108:	09db0200 	ldmibeq	fp, {r9}^
    110c:	20000ad8 	ldrdcs	r0, [r0], -r8
    1110:	00000040 	andeq	r0, r0, r0, asr #32
    1114:	11399c01 	teqne	r9, r1, lsl #24
    1118:	c7280000 	strgt	r0, [r8, -r0]!
    111c:	0200000e 	andeq	r0, r0, #14
    1120:	030b09db 	movweq	r0, #47579	; 0xb9db
    1124:	91020000 	mrsls	r0, (UNDEF: 2)
    1128:	0b432874 	bleq	10cb300 <startup-0x1ef34d00>
    112c:	db020000 	blle	81134 <startup-0x1ff7eecc>
    1130:	00069c09 	andeq	r9, r6, r9, lsl #24
    1134:	73910200 	orrsvc	r0, r1, #0, 4
    1138:	04d92700 	ldrbeq	r2, [r9], #1792	; 0x700
    113c:	aa020000 	bge	81144 <startup-0x1ff7eebc>
    1140:	000a9809 	andeq	r9, sl, r9, lsl #16
    1144:	00004020 	andeq	r4, r0, r0, lsr #32
    1148:	6e9c0100 	fmlvse	f0, f4, f0
    114c:	28000011 	stmdacs	r0, {r0, r4}
    1150:	00000bc3 	andeq	r0, r0, r3, asr #23
    1154:	0b09aa02 	bleq	26b964 <startup-0x1fd9469c>
    1158:	02000003 	andeq	r0, r0, #3
    115c:	43287491 			; <UNDEFINED> instruction: 0x43287491
    1160:	0200000b 	andeq	r0, r0, #11
    1164:	069c09aa 	ldreq	r0, [ip], sl, lsr #19
    1168:	91020000 	mrsls	r0, (UNDEF: 2)
    116c:	3c270073 	stccc	0, cr0, [r7], #-460	; 0xfffffe34
    1170:	02000001 	andeq	r0, r0, #1
    1174:	0a58097b 	beq	1603768 <startup-0x1e9fc898>
    1178:	00402000 	subeq	r2, r0, r0
    117c:	9c010000 	stcls	0, cr0, [r1], {-0}
    1180:	000011a3 	andeq	r1, r0, r3, lsr #3
    1184:	000adb28 	andeq	sp, sl, r8, lsr #22
    1188:	097b0200 	ldmdbeq	fp!, {r9}^
    118c:	0000030b 	andeq	r0, r0, fp, lsl #6
    1190:	28749102 	ldmdacs	r4!, {r1, r8, ip, pc}^
    1194:	00000b43 	andeq	r0, r0, r3, asr #22
    1198:	9c097b02 			; <UNDEFINED> instruction: 0x9c097b02
    119c:	02000006 	andeq	r0, r0, #6
    11a0:	27007391 			; <UNDEFINED> instruction: 0x27007391
    11a4:	0000029e 	muleq	r0, lr, r2
    11a8:	18094502 	stmdane	r9, {r1, r8, sl, lr}
    11ac:	4020000a 	eormi	r0, r0, sl
    11b0:	01000000 	mrseq	r0, (UNDEF: 0)
    11b4:	0011d89c 	mulseq	r1, ip, r8
    11b8:	035a2800 	cmpeq	sl, #0, 16
    11bc:	45020000 	strmi	r0, [r2, #-0]
    11c0:	00030b09 	andeq	r0, r3, r9, lsl #22
    11c4:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    11c8:	000b4328 	andeq	r4, fp, r8, lsr #6
    11cc:	09450200 	stmdbeq	r5, {r9}^
    11d0:	0000069c 	muleq	r0, ip, r6
    11d4:	00739102 	rsbseq	r9, r3, r2, lsl #2
    11d8:	00123727 	andseq	r3, r2, r7, lsr #14
    11dc:	092a0200 	stmdbeq	sl!, {r9}
    11e0:	200009d8 	ldrdcs	r0, [r0], -r8
    11e4:	00000040 	andeq	r0, r0, r0, asr #32
    11e8:	120d9c01 	andne	r9, sp, #256	; 0x100
    11ec:	24280000 	strtcs	r0, [r8], #-0
    11f0:	02000011 	andeq	r0, r0, #17
    11f4:	030b092a 	movweq	r0, #47402	; 0xb92a
    11f8:	91020000 	mrsls	r0, (UNDEF: 2)
    11fc:	0b432874 	bleq	10cb3d4 <startup-0x1ef34c2c>
    1200:	2a020000 	bcs	81208 <startup-0x1ff7edf8>
    1204:	00069c09 	andeq	r9, r6, r9, lsl #24
    1208:	73910200 	orrsvc	r0, r1, #0, 4
    120c:	0f792700 	svceq	0x00792700
    1210:	0d020000 	stceq	0, cr0, [r2, #-0]
    1214:	00099809 	andeq	r9, r9, r9, lsl #16
    1218:	00004020 	andeq	r4, r0, r0, lsr #32
    121c:	429c0100 	addsmi	r0, ip, #0, 2
    1220:	28000012 	stmdacs	r0, {r1, r4}
    1224:	00000ec7 	andeq	r0, r0, r7, asr #29
    1228:	0b090d02 	bleq	244638 <startup-0x1fdbb9c8>
    122c:	02000003 	andeq	r0, r0, #3
    1230:	43287491 			; <UNDEFINED> instruction: 0x43287491
    1234:	0200000b 	andeq	r0, r0, #11
    1238:	069c090d 	ldreq	r0, [ip], sp, lsl #18
    123c:	91020000 	mrsls	r0, (UNDEF: 2)
    1240:	3e270073 	mcrcc	0, 1, r0, cr7, cr3, {3}
    1244:	02000008 	andeq	r0, r0, #8
    1248:	095808e3 	ldmdbeq	r8, {r0, r1, r5, r6, r7, fp}^
    124c:	00402000 	subeq	r2, r0, r0
    1250:	9c010000 	stcls	0, cr0, [r1], {-0}
    1254:	00001277 	andeq	r1, r0, r7, ror r2
    1258:	000bc328 	andeq	ip, fp, r8, lsr #6
    125c:	08e30200 	stmiaeq	r3!, {r9}^
    1260:	0000030b 	andeq	r0, r0, fp, lsl #6
    1264:	28749102 	ldmdacs	r4!, {r1, r8, ip, pc}^
    1268:	00000b43 	andeq	r0, r0, r3, asr #22
    126c:	9c08e302 	stcls	3, cr14, [r8], {2}
    1270:	02000006 	andeq	r0, r0, #6
    1274:	27007391 			; <UNDEFINED> instruction: 0x27007391
    1278:	000003de 	ldrdeq	r0, [r0], -lr
    127c:	1808af02 	stmdane	r8, {r1, r8, r9, sl, fp, sp, pc}
    1280:	40200009 	eormi	r0, r0, r9
    1284:	01000000 	mrseq	r0, (UNDEF: 0)
    1288:	0012ac9c 	mulseq	r2, ip, ip
    128c:	0adb2800 	beq	ff6cb294 <GPIO_Ports+0xdf6c8224>
    1290:	af020000 	svcge	0x00020000
    1294:	00030b08 	andeq	r0, r3, r8, lsl #22
    1298:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    129c:	000b4328 	andeq	r4, fp, r8, lsr #6
    12a0:	08af0200 	stmiaeq	pc!, {r9}	; <UNPREDICTABLE>
    12a4:	0000069c 	muleq	r0, ip, r6
    12a8:	00739102 	rsbseq	r9, r3, r2, lsl #2
    12ac:	000c4f27 	andeq	r4, ip, r7, lsr #30
    12b0:	08760200 	ldmdaeq	r6!, {r9}^
    12b4:	200008d8 	ldrdcs	r0, [r0], -r8
    12b8:	00000040 	andeq	r0, r0, r0, asr #32
    12bc:	12e19c01 	rscne	r9, r1, #256	; 0x100
    12c0:	5a280000 	bpl	a012c8 <startup-0x1f5fed38>
    12c4:	02000003 	andeq	r0, r0, #3
    12c8:	030b0876 	movweq	r0, #47222	; 0xb876
    12cc:	91020000 	mrsls	r0, (UNDEF: 2)
    12d0:	0b432874 	bleq	10cb4a8 <startup-0x1ef34b58>
    12d4:	76020000 	strvc	r0, [r2], -r0
    12d8:	00069c08 	andeq	r9, r6, r8, lsl #24
    12dc:	73910200 	orrsvc	r0, r1, #0, 4
    12e0:	01772700 	cmneq	r7, r0, lsl #14
    12e4:	58020000 	stmdapl	r2, {}	; <UNPREDICTABLE>
    12e8:	00089808 	andeq	r9, r8, r8, lsl #16
    12ec:	00004020 	andeq	r4, r0, r0, lsr #32
    12f0:	169c0100 	ldrne	r0, [ip], r0, lsl #2
    12f4:	28000013 	stmdacs	r0, {r0, r1, r4}
    12f8:	00001124 	andeq	r1, r0, r4, lsr #2
    12fc:	0b085802 	bleq	21730c <startup-0x1fde8cf4>
    1300:	02000003 	andeq	r0, r0, #3
    1304:	43287491 			; <UNDEFINED> instruction: 0x43287491
    1308:	0200000b 	andeq	r0, r0, #11
    130c:	069c0858 			; <UNDEFINED> instruction: 0x069c0858
    1310:	91020000 	mrsls	r0, (UNDEF: 2)
    1314:	5d270073 	stcpl	0, cr0, [r7, #-460]!	; 0xfffffe34
    1318:	02000011 	andeq	r0, r0, #17
    131c:	08580838 	ldmdaeq	r8, {r3, r4, r5, fp}^
    1320:	00402000 	subeq	r2, r0, r0
    1324:	9c010000 	stcls	0, cr0, [r1], {-0}
    1328:	0000134b 	andeq	r1, r0, fp, asr #6
    132c:	000ec728 	andeq	ip, lr, r8, lsr #14
    1330:	08380200 	ldmdaeq	r8!, {r9}
    1334:	0000030b 	andeq	r0, r0, fp, lsl #6
    1338:	28749102 	ldmdacs	r4!, {r1, r8, ip, pc}^
    133c:	00000b43 	andeq	r0, r0, r3, asr #22
    1340:	9c083802 	stcls	8, cr3, [r8], {2}
    1344:	02000006 	andeq	r0, r0, #6
    1348:	27007391 			; <UNDEFINED> instruction: 0x27007391
    134c:	00000193 	muleq	r0, r3, r1
    1350:	3c080e02 	stccc	14, cr0, [r8], {2}
    1354:	1c200008 	stcne	0, cr0, [r0], #-32	; 0xffffffe0
    1358:	01000000 	mrseq	r0, (UNDEF: 0)
    135c:	0013719c 	mulseq	r3, ip, r1
    1360:	12182800 	andsne	r2, r8, #0, 16
    1364:	0e020000 	cdpeq	0, 0, cr0, cr2, cr0, {0}
    1368:	00030b08 	andeq	r0, r3, r8, lsl #22
    136c:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    1370:	026a2700 	rsbeq	r2, sl, #0, 14
    1374:	8e020000 	cdphi	0, 0, cr0, cr2, cr0, {0}
    1378:	00080007 	andeq	r0, r8, r7
    137c:	00003c20 	andeq	r3, r0, r0, lsr #24
    1380:	a69c0100 	ldrge	r0, [ip], r0, lsl #2
    1384:	28000013 	stmdacs	r0, {r0, r1, r4}
    1388:	00000864 	andeq	r0, r0, r4, ror #16
    138c:	0b078e02 	bleq	1e4b9c <startup-0x1fe1b464>
    1390:	02000003 	andeq	r0, r0, #3
    1394:	982a6c91 	stmdals	sl!, {r0, r4, r7, sl, fp, sp, lr}
    1398:	0200000e 	andeq	r0, r0, #14
    139c:	030b0790 	movweq	r0, #46992	; 0xb790
    13a0:	91020000 	mrsls	r0, (UNDEF: 2)
    13a4:	2a270074 	bcs	9c157c <startup-0x1f63ea84>
    13a8:	02000002 	andeq	r0, r0, #2
    13ac:	07c0072b 	strbeq	r0, [r0, fp, lsr #14]
    13b0:	00402000 	subeq	r2, r0, r0
    13b4:	9c010000 	stcls	0, cr0, [r1], {-0}
    13b8:	000013db 	ldrdeq	r1, [r0], -fp
    13bc:	00085528 	andeq	r5, r8, r8, lsr #10
    13c0:	072b0200 	streq	r0, [fp, -r0, lsl #4]!
    13c4:	0000030b 	andeq	r0, r0, fp, lsl #6
    13c8:	2a6c9102 	bcs	1b257d8 <startup-0x1e4da828>
    13cc:	00000e98 	muleq	r0, r8, lr
    13d0:	0b072d02 	bleq	1cc7e0 <startup-0x1fe33820>
    13d4:	02000003 	andeq	r0, r0, #3
    13d8:	27007491 			; <UNDEFINED> instruction: 0x27007491
    13dc:	000009cf 	andeq	r0, r0, pc, asr #19
    13e0:	84070b02 	strhi	r0, [r7], #-2818	; 0xfffff4fe
    13e4:	3c200007 	stccc	0, cr0, [r0], #-28	; 0xffffffe4
    13e8:	01000000 	mrseq	r0, (UNDEF: 0)
    13ec:	0014109c 	mulseq	r4, ip, r0
    13f0:	033e2800 	teqeq	lr, #0, 16
    13f4:	0b020000 	bleq	813fc <startup-0x1ff7ec04>
    13f8:	00030b07 	andeq	r0, r3, r7, lsl #22
    13fc:	6c910200 	lfmvs	f0, 4, [r1], {0}
    1400:	000e982a 	andeq	r9, lr, sl, lsr #16
    1404:	070d0200 	streq	r0, [sp, -r0, lsl #4]
    1408:	0000030b 	andeq	r0, r0, fp, lsl #6
    140c:	00749102 	rsbseq	r9, r4, r2, lsl #2
    1410:	00030127 	andeq	r0, r3, r7, lsr #2
    1414:	06ea0200 	strbteq	r0, [sl], r0, lsl #4
    1418:	20000748 	andcs	r0, r0, r8, asr #14
    141c:	0000003c 	andeq	r0, r0, ip, lsr r0
    1420:	14459c01 	strbne	r9, [r5], #-3073	; 0xfffff3ff
    1424:	73280000 			; <UNDEFINED> instruction: 0x73280000
    1428:	02000008 	andeq	r0, r0, #8
    142c:	030b06ea 	movweq	r0, #46826	; 0xb6ea
    1430:	91020000 	mrsls	r0, (UNDEF: 2)
    1434:	0e982a6c 	vfnmaeq.f32	s4, s16, s25
    1438:	ec020000 	stc	0, cr0, [r2], {-0}
    143c:	00030b06 	andeq	r0, r3, r6, lsl #22
    1440:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    1444:	072e2700 	streq	r2, [lr, -r0, lsl #14]!
    1448:	c6020000 	strgt	r0, [r2], -r0
    144c:	00070c06 	andeq	r0, r7, r6, lsl #24
    1450:	00003c20 	andeq	r3, r0, r0, lsr #24
    1454:	7a9c0100 	bvc	fe70185c <GPIO_Ports+0xde6fe7ec>
    1458:	28000014 	stmdacs	r0, {r2, r4}
    145c:	00000b95 	muleq	r0, r5, fp
    1460:	0b06c602 	bleq	1b2c70 <startup-0x1fe4d390>
    1464:	02000003 	andeq	r0, r0, #3
    1468:	982a6c91 	stmdals	sl!, {r0, r4, r7, sl, fp, sp, lr}
    146c:	0200000e 	andeq	r0, r0, #14
    1470:	030b06c8 	movweq	r0, #46792	; 0xb6c8
    1474:	91020000 	mrsls	r0, (UNDEF: 2)
    1478:	65270074 	strvs	r0, [r7, #-116]!	; 0xffffff8c
    147c:	02000000 	andeq	r0, r0, #0
    1480:	06f006ab 	ldrbteq	r0, [r0], fp, lsr #13
    1484:	001c2000 	andseq	r2, ip, r0
    1488:	9c010000 	stcls	0, cr0, [r1], {-0}
    148c:	000014a0 	andeq	r1, r0, r0, lsr #9
    1490:	00091828 	andeq	r1, r9, r8, lsr #16
    1494:	06ab0200 	strteq	r0, [fp], r0, lsl #4
    1498:	0000030b 	andeq	r0, r0, fp, lsl #6
    149c:	00749102 	rsbseq	r9, r4, r2, lsl #2
    14a0:	000c9727 	andeq	r9, ip, r7, lsr #14
    14a4:	05ef0200 	strbeq	r0, [pc, #512]!	; 16ac <startup-0x1fffe954>
    14a8:	200006d0 	ldrdcs	r0, [r0], -r0	; <UNPREDICTABLE>
    14ac:	00000020 	andeq	r0, r0, r0, lsr #32
    14b0:	14c69c01 	strbne	r9, [r6], #3073	; 0xc01
    14b4:	43280000 			; <UNDEFINED> instruction: 0x43280000
    14b8:	0200000b 	andeq	r0, r0, #11
    14bc:	069c05ef 	ldreq	r0, [ip], pc, ror #11
    14c0:	91020000 	mrsls	r0, (UNDEF: 2)
    14c4:	f1270077 			; <UNDEFINED> instruction: 0xf1270077
    14c8:	02000010 	andeq	r0, r0, #16
    14cc:	06b005de 	ssateq	r0, #17, lr, asr #11
    14d0:	00202000 	eoreq	r2, r0, r0
    14d4:	9c010000 	stcls	0, cr0, [r1], {-0}
    14d8:	000014ec 	andeq	r1, r0, ip, ror #9
    14dc:	000b4328 	andeq	r4, fp, r8, lsr #6
    14e0:	05de0200 	ldrbeq	r0, [lr, #512]	; 0x200
    14e4:	0000069c 	muleq	r0, ip, r6
    14e8:	00779102 	rsbseq	r9, r7, r2, lsl #2
    14ec:	000aea27 	andeq	lr, sl, r7, lsr #20
    14f0:	05be0200 	ldreq	r0, [lr, #512]!	; 0x200
    14f4:	20000650 	andcs	r0, r0, r0, asr r6
    14f8:	00000060 	andeq	r0, r0, r0, rrx
    14fc:	15219c01 	strne	r9, [r1, #-3073]!	; 0xfffff3ff
    1500:	66280000 	strtvs	r0, [r8], -r0
    1504:	02000001 	andeq	r0, r0, #1
    1508:	030b05be 	movweq	r0, #46526	; 0xb5be
    150c:	91020000 	mrsls	r0, (UNDEF: 2)
    1510:	0e982a6c 	vfnmaeq.f32	s4, s16, s25
    1514:	c0020000 	andgt	r0, r2, r0
    1518:	00030b05 	andeq	r0, r3, r5, lsl #22
    151c:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    1520:	00762d00 	rsbseq	r2, r6, r0, lsl #26
    1524:	25020000 	strcs	r0, [r2, #-0]
    1528:	0004f805 	andeq	pc, r4, r5, lsl #16
    152c:	00015820 	andeq	r5, r1, r0, lsr #16
    1530:	a19c0100 	orrsge	r0, ip, r0, lsl #2
    1534:	28000015 	stmdacs	r0, {r0, r2, r4}
    1538:	00000a66 	andeq	r0, r0, r6, ror #20
    153c:	a1052502 	tstge	r5, r2, lsl #10
    1540:	02000015 	andeq	r0, r0, #21
    1544:	742c5c91 	strtvc	r5, [ip], #-3217	; 0xfffff36f
    1548:	0200706d 	andeq	r7, r0, #109	; 0x6d
    154c:	030b0527 	movweq	r0, #46375	; 0xb527
    1550:	91020000 	mrsls	r0, (UNDEF: 2)
    1554:	12312a70 	eorsne	r2, r1, #112, 20	; 0x70000
    1558:	27020000 	strcs	r0, [r2, -r0]
    155c:	00030b05 	andeq	r0, r3, r5, lsl #22
    1560:	6c910200 	lfmvs	f0, 4, [r1], {0}
    1564:	0010512a 	andseq	r5, r0, sl, lsr #2
    1568:	05270200 	streq	r0, [r7, #-512]!	; 0xfffffe00
    156c:	0000030b 	andeq	r0, r0, fp, lsl #6
    1570:	2a749102 	bcs	1d25980 <startup-0x1e2da680>
    1574:	00000000 	andeq	r0, r0, r0
    1578:	0b052702 	bleq	14b188 <startup-0x1feb4e78>
    157c:	02000003 	andeq	r0, r0, #3
    1580:	152a6891 	strne	r6, [sl, #-2193]!	; 0xfffff76f
    1584:	02000006 	andeq	r0, r0, #6
    1588:	030b0527 	movweq	r0, #46375	; 0xb527
    158c:	91020000 	mrsls	r0, (UNDEF: 2)
    1590:	12a52a64 	adcne	r2, r5, #100, 20	; 0x64000
    1594:	27020000 	strcs	r0, [r2, -r0]
    1598:	00030b05 	andeq	r0, r3, r5, lsl #22
    159c:	60910200 	addsvs	r0, r1, r0, lsl #4
    15a0:	84041e00 	strhi	r1, [r4], #-3584	; 0xfffff200
    15a4:	27000009 	strcs	r0, [r0, -r9]
    15a8:	000002da 	ldrdeq	r0, [r0], -sl
    15ac:	bc04f102 	stfltd	f7, [r4], {2}
    15b0:	3c200004 	stccc	0, cr0, [r0], #-16
    15b4:	01000000 	mrseq	r0, (UNDEF: 0)
    15b8:	0015dc9c 	mulseq	r5, ip, ip
    15bc:	01b62800 			; <UNDEFINED> instruction: 0x01b62800
    15c0:	f1020000 	cps	#0
    15c4:	00030b04 	andeq	r0, r3, r4, lsl #22
    15c8:	6c910200 	lfmvs	f0, 4, [r1], {0}
    15cc:	000e982a 	andeq	r9, lr, sl, lsr #16
    15d0:	04f30200 	ldrbteq	r0, [r3], #512	; 0x200
    15d4:	0000030b 	andeq	r0, r0, fp, lsl #6
    15d8:	00749102 	rsbseq	r9, r4, r2, lsl #2
    15dc:	00094427 	andeq	r4, r9, r7, lsr #8
    15e0:	04d20200 	ldrbeq	r0, [r2], #512	; 0x200
    15e4:	20000484 	andcs	r0, r0, r4, lsl #9
    15e8:	00000038 	andeq	r0, r0, r8, lsr r0
    15ec:	16119c01 	ldrne	r9, [r1], -r1, lsl #24
    15f0:	b6280000 	strtlt	r0, [r8], -r0
    15f4:	02000001 	andeq	r0, r0, #1
    15f8:	030b04d2 	movweq	r0, #46290	; 0xb4d2
    15fc:	91020000 	mrsls	r0, (UNDEF: 2)
    1600:	0e982a6c 	vfnmaeq.f32	s4, s16, s25
    1604:	d4020000 	strle	r0, [r2], #-0
    1608:	00030b04 	andeq	r0, r3, r4, lsl #22
    160c:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    1610:	06d52700 	ldrbeq	r2, [r5], r0, lsl #14
    1614:	b3020000 	movwlt	r0, #8192	; 0x2000
    1618:	00045004 	andeq	r5, r4, r4
    161c:	00003420 	andeq	r3, r0, r0, lsr #8
    1620:	469c0100 	ldrmi	r0, [ip], r0, lsl #2
    1624:	28000016 	stmdacs	r0, {r1, r2, r4}
    1628:	000005cf 	andeq	r0, r0, pc, asr #11
    162c:	0b04b302 	bleq	12e23c <startup-0x1fed1dc4>
    1630:	02000003 	andeq	r0, r0, #3
    1634:	982a6c91 	stmdals	sl!, {r0, r4, r7, sl, fp, sp, lr}
    1638:	0200000e 	andeq	r0, r0, #14
    163c:	030b04b5 	movweq	r0, #46261	; 0xb4b5
    1640:	91020000 	mrsls	r0, (UNDEF: 2)
    1644:	202e0074 	eorcs	r0, lr, r4, ror r0
    1648:	02000003 	andeq	r0, r0, #3
    164c:	02d1049a 	sbcseq	r0, r1, #-1711276032	; 0x9a000000
    1650:	04340000 	ldrteq	r0, [r4], #-0
    1654:	001c2000 	andseq	r2, ip, r0
    1658:	9c010000 	stcls	0, cr0, [r1], {-0}
    165c:	00126427 	andseq	r6, r2, r7, lsr #8
    1660:	047d0200 	ldrbteq	r0, [sp], #-512	; 0xfffffe00
    1664:	20000400 	andcs	r0, r0, r0, lsl #8
    1668:	00000034 	andeq	r0, r0, r4, lsr r0
    166c:	16919c01 	ldrne	r9, [r1], r1, lsl #24
    1670:	ad280000 	stcge	0, cr0, [r8, #-0]
    1674:	02000003 	andeq	r0, r0, #3
    1678:	030b047d 	movweq	r0, #46205	; 0xb47d
    167c:	91020000 	mrsls	r0, (UNDEF: 2)
    1680:	0e982a6c 	vfnmaeq.f32	s4, s16, s25
    1684:	7f020000 	svcvc	0x00020000
    1688:	00030b04 	andeq	r0, r3, r4, lsl #22
    168c:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    1690:	08fd2700 	ldmeq	sp!, {r8, r9, sl, sp}^
    1694:	b5020000 	strlt	r0, [r2, #-0]
    1698:	0003c403 	andeq	ip, r3, r3, lsl #8
    169c:	00003c20 	andeq	r3, r0, r0, lsr #24
    16a0:	d59c0100 	ldrle	r0, [ip, #256]	; 0x100
    16a4:	28000016 	stmdacs	r0, {r1, r2, r4}
    16a8:	00000cd9 	ldrdeq	r0, [r0], -r9
    16ac:	0b03b502 	bleq	eeabc <startup-0x1ff11544>
    16b0:	02000003 	andeq	r0, r0, #3
    16b4:	82286c91 	eorhi	r6, r8, #37120	; 0x9100
    16b8:	02000003 	andeq	r0, r0, #3
    16bc:	030b03b5 	movweq	r0, #46005	; 0xb3b5
    16c0:	91020000 	mrsls	r0, (UNDEF: 2)
    16c4:	0e982a68 	vfnmaeq.f32	s4, s16, s17
    16c8:	b7020000 	strlt	r0, [r2, -r0]
    16cc:	00030b03 	andeq	r0, r3, r3, lsl #22
    16d0:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    16d4:	07ca2700 	strbeq	r2, [sl, r0, lsl #14]
    16d8:	88020000 	stmdahi	r2, {}	; <UNPREDICTABLE>
    16dc:	00038403 	andeq	r8, r3, r3, lsl #8
    16e0:	00004020 	andeq	r4, r0, r0, lsr #32
    16e4:	199c0100 	ldmibne	ip, {r8}
    16e8:	28000017 	stmdacs	r0, {r0, r1, r2, r4}
    16ec:	00000c40 	andeq	r0, r0, r0, asr #24
    16f0:	0b038802 	bleq	e3700 <startup-0x1ff1c900>
    16f4:	02000003 	andeq	r0, r0, #3
    16f8:	5f286c91 	svcpl	0x00286c91
    16fc:	0200000d 	andeq	r0, r0, #13
    1700:	030b0388 	movweq	r0, #45960	; 0xb388
    1704:	91020000 	mrsls	r0, (UNDEF: 2)
    1708:	0e982a68 	vfnmaeq.f32	s4, s16, s17
    170c:	8a020000 	bhi	81714 <startup-0x1ff7e8ec>
    1710:	00030b03 	andeq	r0, r3, r3, lsl #22
    1714:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    1718:	0b7a2700 	bleq	1e8b320 <startup-0x1e174ce0>
    171c:	6f020000 	svcvs	0x00020000
    1720:	00036403 	andeq	r6, r3, r3, lsl #8
    1724:	00002020 	andeq	r2, r0, r0, lsr #32
    1728:	3f9c0100 	svccc	0x009c0100
    172c:	28000017 	stmdacs	r0, {r0, r1, r2, r4}
    1730:	00000b43 	andeq	r0, r0, r3, asr #22
    1734:	9c036f02 	stcls	15, cr6, [r3], {2}
    1738:	02000006 	andeq	r0, r0, #6
    173c:	27007791 			; <UNDEFINED> instruction: 0x27007791
    1740:	0000124e 	andeq	r1, r0, lr, asr #4
    1744:	44035d02 	strmi	r5, [r3], #-3330	; 0xfffff2fe
    1748:	20200003 	eorcs	r0, r0, r3
    174c:	01000000 	mrseq	r0, (UNDEF: 0)
    1750:	0017659c 	mulseq	r7, ip, r5
    1754:	0b432800 	bleq	10cb75c <startup-0x1ef348a4>
    1758:	5d020000 	stcpl	0, cr0, [r2, #-0]
    175c:	00069c03 	andeq	r9, r6, r3, lsl #24
    1760:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    1764:	07542700 	ldrbeq	r2, [r4, -r0, lsl #14]
    1768:	49020000 	stmdbmi	r2, {}	; <UNPREDICTABLE>
    176c:	00031403 	andeq	r1, r3, r3, lsl #8
    1770:	00003020 	andeq	r3, r0, r0, lsr #32
    1774:	a99c0100 	ldmibge	ip, {r8}
    1778:	28000017 	stmdacs	r0, {r0, r1, r2, r4}
    177c:	00000c28 	andeq	r0, r0, r8, lsr #24
    1780:	0b034902 	bleq	d3b90 <startup-0x1ff2c470>
    1784:	02000003 	andeq	r0, r0, #3
    1788:	30287491 	mlacc	r8, r1, r4, r7
    178c:	0200000c 	andeq	r0, r0, #12
    1790:	030b0349 	movweq	r0, #45897	; 0xb349
    1794:	91020000 	mrsls	r0, (UNDEF: 2)
    1798:	0c382870 	ldceq	8, cr2, [r8], #-448	; 0xfffffe40
    179c:	49020000 	stmdbmi	r2, {}	; <UNPREDICTABLE>
    17a0:	00030b03 	andeq	r0, r3, r3, lsl #22
    17a4:	6c910200 	lfmvs	f0, 4, [r1], {0}
    17a8:	01a82700 			; <UNDEFINED> instruction: 0x01a82700
    17ac:	dc020000 	stcle	0, cr0, [r2], {-0}
    17b0:	0002f402 	andeq	pc, r2, r2, lsl #8
    17b4:	00002020 	andeq	r2, r0, r0, lsr #32
    17b8:	cf9c0100 	svcgt	0x009c0100
    17bc:	28000017 	stmdacs	r0, {r0, r1, r2, r4}
    17c0:	00000b43 	andeq	r0, r0, r3, asr #22
    17c4:	9c02dc02 	stcls	12, cr13, [r2], {2}
    17c8:	02000006 	andeq	r0, r0, #6
    17cc:	27007791 			; <UNDEFINED> instruction: 0x27007791
    17d0:	00001187 	andeq	r1, r0, r7, lsl #3
    17d4:	cc025102 	stfgts	f5, [r2], {2}
    17d8:	28200002 	stmdacs	r0!, {r1}
    17dc:	01000000 	mrseq	r0, (UNDEF: 0)
    17e0:	0018049c 	mulseq	r8, ip, r4
    17e4:	10a22800 	adcne	r2, r2, r0, lsl #16
    17e8:	51020000 	mrspl	r0, (UNDEF: 2)
    17ec:	00030b02 	andeq	r0, r3, r2, lsl #22
    17f0:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    17f4:	0010c728 	andseq	ip, r0, r8, lsr #14
    17f8:	02510200 	subseq	r0, r1, #0, 4
    17fc:	0000030b 	andeq	r0, r0, fp, lsl #6
    1800:	00709102 	rsbseq	r9, r0, r2, lsl #2
    1804:	000c8c27 	andeq	r8, ip, r7, lsr #24
    1808:	02330200 	eorseq	r0, r3, #0, 4
    180c:	200002ac 	andcs	r0, r0, ip, lsr #5
    1810:	00000020 	andeq	r0, r0, r0, lsr #32
    1814:	182a9c01 	stmdane	sl!, {r0, sl, fp, ip, pc}
    1818:	43280000 			; <UNDEFINED> instruction: 0x43280000
    181c:	0200000b 	andeq	r0, r0, #11
    1820:	069c0233 			; <UNDEFINED> instruction: 0x069c0233
    1824:	91020000 	mrsls	r0, (UNDEF: 2)
    1828:	97270077 			; <UNDEFINED> instruction: 0x97270077
    182c:	02000012 	andeq	r0, r0, #18
    1830:	0270021b 	rsbseq	r0, r0, #-1342177279	; 0xb0000001
    1834:	003c2000 	eorseq	r2, ip, r0
    1838:	9c010000 	stcls	0, cr0, [r1], {-0}
    183c:	0000188c 	andeq	r1, r0, ip, lsl #17
    1840:	0003d028 	andeq	sp, r3, r8, lsr #32
    1844:	021b0200 	andseq	r0, fp, #0, 4
    1848:	0000030b 	andeq	r0, r0, fp, lsl #6
    184c:	28749102 	ldmdacs	r4!, {r1, r8, ip, pc}^
    1850:	000005f1 	strdeq	r0, [r0], -r1
    1854:	0b021b02 	bleq	88464 <startup-0x1ff77b9c>
    1858:	02000003 	andeq	r0, r0, #3
    185c:	58287091 	stmdapl	r8!, {r0, r4, r7, ip, sp, lr}
    1860:	02000011 	andeq	r0, r0, #17
    1864:	030b021b 	movweq	r0, #45595	; 0xb21b
    1868:	91020000 	mrsls	r0, (UNDEF: 2)
    186c:	0600286c 	streq	r2, [r0], -ip, ror #16
    1870:	1b020000 	blne	81878 <startup-0x1ff7e788>
    1874:	00030b02 	andeq	r0, r3, r2, lsl #22
    1878:	68910200 	ldmvs	r1, {r9}
    187c:	00060528 	andeq	r0, r6, r8, lsr #10
    1880:	021b0200 	andseq	r0, fp, #0, 4
    1884:	0000030b 	andeq	r0, r0, fp, lsl #6
    1888:	00009102 	andeq	r9, r0, r2, lsl #2
    188c:	00060a27 	andeq	r0, r6, r7, lsr #20
    1890:	01b80200 			; <UNDEFINED> instruction: 0x01b80200
    1894:	20000250 	andcs	r0, r0, r0, asr r2
    1898:	00000020 	andeq	r0, r0, r0, lsr #32
    189c:	18b29c01 	ldmne	r2!, {r0, sl, fp, ip, pc}
    18a0:	43280000 			; <UNDEFINED> instruction: 0x43280000
    18a4:	0200000b 	andeq	r0, r0, #11
    18a8:	069c01b8 			; <UNDEFINED> instruction: 0x069c01b8
    18ac:	91020000 	mrsls	r0, (UNDEF: 2)
    18b0:	75270077 	strvc	r0, [r7, #-119]!	; 0xffffff89
    18b4:	02000004 	andeq	r0, r0, #4
    18b8:	020c0190 	andeq	r0, ip, #144, 2	; 0x24
    18bc:	00442000 	subeq	r2, r4, r0
    18c0:	9c010000 	stcls	0, cr0, [r1], {-0}
    18c4:	000018d8 	ldrdeq	r1, [r0], -r8
    18c8:	00071428 	andeq	r1, r7, r8, lsr #8
    18cc:	01900200 	orrseq	r0, r0, r0, lsl #4
    18d0:	000002d1 	ldrdeq	r0, [r0], -r1
    18d4:	00779102 	rsbseq	r9, r7, r2, lsl #2
    18d8:	000a9427 	andeq	r9, sl, r7, lsr #8
    18dc:	01770200 	cmneq	r7, r0, lsl #4
    18e0:	200001ec 	andcs	r0, r0, ip, ror #3
    18e4:	00000020 	andeq	r0, r0, r0, lsr #32
    18e8:	18fe9c01 	ldmne	lr!, {r0, sl, fp, ip, pc}^
    18ec:	43280000 			; <UNDEFINED> instruction: 0x43280000
    18f0:	0200000b 	andeq	r0, r0, #11
    18f4:	069c0177 			; <UNDEFINED> instruction: 0x069c0177
    18f8:	91020000 	mrsls	r0, (UNDEF: 2)
    18fc:	a8270077 	stmdage	r7!, {r0, r1, r2, r4, r5, r6}
    1900:	0200000a 	andeq	r0, r0, #10
    1904:	01ae0153 			; <UNDEFINED> instruction: 0x01ae0153
    1908:	003e2000 	eorseq	r2, lr, r0
    190c:	9c010000 	stcls	0, cr0, [r1], {-0}
    1910:	00001933 	andeq	r1, r0, r3, lsr r9
    1914:	000ab228 	andeq	fp, sl, r8, lsr #4
    1918:	01530200 	cmpeq	r3, r0, lsl #4
    191c:	000002d1 	ldrdeq	r0, [r0], -r1
    1920:	2a6f9102 	bcs	1be5d30 <startup-0x1e41a2d0>
    1924:	00000e98 	muleq	r0, r8, lr
    1928:	0b015502 	bleq	56d38 <startup-0x1ffa92c8>
    192c:	02000003 	andeq	r0, r0, #3
    1930:	2f007491 	svccs	0x00007491
    1934:	00000d81 	andeq	r0, r0, r1, lsl #27
    1938:	c3013402 	movwgt	r3, #5122	; 0x1402
    193c:	50000006 	andpl	r0, r0, r6
    1940:	5e200001 	cdppl	0, 2, cr0, cr0, cr1, {0}
    1944:	01000000 	mrseq	r0, (UNDEF: 0)
    1948:	00197b9c 	mulseq	r9, ip, fp
    194c:	07452a00 	strbeq	r2, [r5, -r0, lsl #20]
    1950:	36020000 	strcc	r0, [r2], -r0
    1954:	00031601 	andeq	r1, r3, r1, lsl #12
    1958:	68910200 	ldmvs	r1, {r9}
    195c:	000ed92a 	andeq	sp, lr, sl, lsr #18
    1960:	01370200 	teqeq	r7, r0, lsl #4
    1964:	000006c3 	andeq	r0, r0, r3, asr #13
    1968:	2a6f9102 	bcs	1be5d78 <startup-0x1e41a288>
    196c:	00000ed6 	ldrdeq	r0, [r0], -r6
    1970:	69013802 	stmdbvs	r1, {r1, fp, ip, sp}
    1974:	02000006 	andeq	r0, r0, #6
    1978:	27006e91 			; <UNDEFINED> instruction: 0x27006e91
    197c:	000006f2 	strdeq	r0, [r0], -r2
    1980:	28011c02 	stmdacs	r1, {r1, sl, fp, ip}
    1984:	28200001 	stmdacs	r0!, {r0}
    1988:	01000000 	mrseq	r0, (UNDEF: 0)
    198c:	0019a19c 	mulseq	r9, ip, r1
    1990:	07c22800 	strbeq	r2, [r2, r0, lsl #16]
    1994:	1c020000 	stcne	0, cr0, [r2], {-0}
    1998:	0002d101 	andeq	sp, r2, r1, lsl #2
    199c:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    19a0:	02f62500 	rscseq	r2, r6, #0, 10
    19a4:	e1020000 	mrs	r0, (UNDEF: 2)
    19a8:	200000b8 	strhcs	r0, [r0], -r8
    19ac:	00000070 	andeq	r0, r0, r0, ror r0
    19b0:	2a309c01 	bcs	c289bc <startup-0x1f3d7644>
    19b4:	0100000e 	tsteq	r0, lr
    19b8:	030b06e0 	movweq	r0, #46816	; 0xb6e0
    19bc:	00700000 	rsbseq	r0, r0, r0
    19c0:	00482000 	subeq	r2, r8, r0
    19c4:	9c010000 	stcls	0, cr0, [r1], {-0}
    19c8:	000019dc 	ldrdeq	r1, [r0], -ip
    19cc:	00096a28 	andeq	r6, r9, r8, lsr #20
    19d0:	06e00100 	strbteq	r0, [r0], r0, lsl #2
    19d4:	0000030b 	andeq	r0, r0, fp, lsl #6
    19d8:	00749102 	rsbseq	r9, r4, r2, lsl #2
    19dc:	00110531 	andseq	r0, r1, r1, lsr r5
    19e0:	065d0100 	ldrbeq	r0, [sp], -r0, lsl #2
    19e4:	20000010 	andcs	r0, r0, r0, lsl r0
    19e8:	00000060 	andeq	r0, r0, r0, rrx
    19ec:	90289c01 	eorls	r9, r8, r1, lsl #24
    19f0:	01000010 	tsteq	r0, r0, lsl r0
    19f4:	025a065d 	subseq	r0, sl, #97517568	; 0x5d00000
    19f8:	91020000 	mrsls	r0, (UNDEF: 2)
    19fc:	153c2877 	ldrne	r2, [ip, #-2167]!	; 0xfffff789
    1a00:	5d010000 	stcpl	0, cr0, [r1, #-0]
    1a04:	00030b06 	andeq	r0, r3, r6, lsl #22
    1a08:	70910200 	addsvc	r0, r1, r0, lsl #4
    1a0c:	06230000 	strteq	r0, [r3], -r0
    1a10:	00040000 	andeq	r0, r4, r0
    1a14:	00000309 	andeq	r0, r0, r9, lsl #6
    1a18:	06290104 	strteq	r0, [r9], -r4, lsl #2
    1a1c:	2f0c0000 	svccs	0x000c0000
    1a20:	7d000013 	stcvc	0, cr0, [r0, #-76]	; 0xffffffb4
    1a24:	04000005 	streq	r0, [r0], #-5
    1a28:	0e20001d 	miaeq	acc0, sp, r0
    1a2c:	3e000005 	cdpcc	0, 0, cr0, cr0, cr5, {0}
    1a30:	02000005 	andeq	r0, r0, #5
    1a34:	040b0601 	streq	r0, [fp], #-1537	; 0xfffff9ff
    1a38:	e3030000 	movw	r0, #12288	; 0x3000
    1a3c:	02000001 	andeq	r0, r0, #1
    1a40:	0000372b 	andeq	r3, r0, fp, lsr #14
    1a44:	08010200 	stmdaeq	r1, {r9}
    1a48:	00000409 	andeq	r0, r0, r9, lsl #8
    1a4c:	f0050202 			; <UNDEFINED> instruction: 0xf0050202
    1a50:	0300000f 	movweq	r0, #15
    1a54:	0000053d 	andeq	r0, r0, sp, lsr r5
    1a58:	00503902 	subseq	r3, r0, r2, lsl #18
    1a5c:	02020000 	andeq	r0, r2, #0
    1a60:	00117407 	andseq	r7, r1, r7, lsl #8
    1a64:	120e0300 	andne	r0, lr, #0, 6
    1a68:	4d020000 	stcmi	0, cr0, [r2, #-0]
    1a6c:	00000062 	andeq	r0, r0, r2, rrx
    1a70:	f8050402 			; <UNDEFINED> instruction: 0xf8050402
    1a74:	03000009 	movweq	r0, #9
    1a78:	000009a1 	andeq	r0, r0, r1, lsr #19
    1a7c:	00744f02 	rsbseq	r4, r4, r2, lsl #30
    1a80:	04020000 	streq	r0, [r2], #-0
    1a84:	000d4d07 	andeq	r4, sp, r7, lsl #26
    1a88:	05080200 	streq	r0, [r8, #-512]	; 0xfffffe00
    1a8c:	000009f3 	strdeq	r0, [r0], -r3
    1a90:	48070802 	stmdami	r7, {r1, fp}
    1a94:	0400000d 	streq	r0, [r0], #-13
    1a98:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    1a9c:	04020074 	streq	r0, [r2], #-116	; 0xffffff8c
    1aa0:	000d5207 	andeq	r5, sp, r7, lsl #4
    1aa4:	01e50300 	mvneq	r0, r0, lsl #6
    1aa8:	18030000 	stmdane	r3, {}	; <UNPREDICTABLE>
    1aac:	0000002c 	andeq	r0, r0, ip, lsr #32
    1ab0:	00053f03 	andeq	r3, r5, r3, lsl #30
    1ab4:	45240300 	strmi	r0, [r4, #-768]!	; 0xfffffd00
    1ab8:	05000000 	streq	r0, [r0, #-0]
    1abc:	000000a2 	andeq	r0, r0, r2, lsr #1
    1ac0:	00121003 	andseq	r1, r2, r3
    1ac4:	572c0300 	strpl	r0, [ip, -r0, lsl #6]!
    1ac8:	05000000 	streq	r0, [r0, #-0]
    1acc:	000000b2 	strheq	r0, [r0], -r2
    1ad0:	0009a303 	andeq	sl, r9, r3, lsl #6
    1ad4:	69300300 	ldmdbvs	r0!, {r8, r9}
    1ad8:	05000000 	streq	r0, [r0, #-0]
    1adc:	000000c2 	andeq	r0, r0, r2, asr #1
    1ae0:	00109506 	andseq	r9, r0, r6, lsl #10
    1ae4:	06fa0400 	ldrbteq	r0, [sl], r0, lsl #8
    1ae8:	000000bd 	strheq	r0, [r0], -sp
    1aec:	0008a007 	andeq	sl, r8, r7
    1af0:	c23b0500 	eorsgt	r0, fp, #0, 10
    1af4:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    1af8:	00370107 	eorseq	r0, r7, r7, lsl #2
    1afc:	5f060000 	svcpl	0x00060000
    1b00:	00010403 	andeq	r0, r1, r3, lsl #8
    1b04:	0a310900 	beq	c43f0c <startup-0x1f3bc0f4>
    1b08:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    1b0c:	0000104a 	andeq	r1, r0, sl, asr #32
    1b10:	280a0001 	stmdacs	sl, {r0}
    1b14:	9005c306 	andls	ip, r5, r6, lsl #6
    1b18:	0b000001 	bleq	1b24 <startup-0x1fffe4dc>
    1b1c:	000010ff 	strdeq	r1, [r0], -pc	; <UNPREDICTABLE>
    1b20:	cd05c506 	cfstr32gt	mvfx12, [r5, #-24]	; 0xffffffe8
    1b24:	00000000 	andeq	r0, r0, r0
    1b28:	000e8b0b 	andeq	r8, lr, fp, lsl #22
    1b2c:	05c60600 	strbeq	r0, [r6, #1536]	; 0x600
    1b30:	000000cd 	andeq	r0, r0, sp, asr #1
    1b34:	09540b04 	ldmdbeq	r4, {r2, r8, r9, fp}^
    1b38:	c7060000 	strgt	r0, [r6, -r0]
    1b3c:	0000cd05 	andeq	ip, r0, r5, lsl #26
    1b40:	1b0b0800 	blne	2c3b48 <startup-0x1fd3c4b8>
    1b44:	0600000a 	streq	r0, [r0], -sl
    1b48:	00cd05c8 	sbceq	r0, sp, r8, asr #11
    1b4c:	0c0c0000 	stceq	0, cr0, [ip], {-0}
    1b50:	00524449 	subseq	r4, r2, r9, asr #8
    1b54:	cd05c906 	vstrgt.16	s24, [r5, #-12]	; <UNPREDICTABLE>
    1b58:	10000000 	andne	r0, r0, r0
    1b5c:	52444f0c 	subpl	r4, r4, #12, 30	; 0x30
    1b60:	05ca0600 	strbeq	r0, [sl, #1536]	; 0x600
    1b64:	000000cd 	andeq	r0, r0, sp, asr #1
    1b68:	0a710b14 	beq	1c447c0 <startup-0x1e3bb840>
    1b6c:	cb060000 	blgt	181b74 <startup-0x1fe7e48c>
    1b70:	0000ad05 	andeq	sl, r0, r5, lsl #26
    1b74:	4e0b1800 	cdpmi	8, 0, cr1, cr11, cr0, {0}
    1b78:	0600000a 	streq	r0, [r0], -sl
    1b7c:	00ad05cc 	adceq	r0, sp, ip, asr #11
    1b80:	0b1a0000 	bleq	681b88 <startup-0x1f97e478>
    1b84:	00000913 	andeq	r0, r0, r3, lsl r9
    1b88:	cd05cd06 	stcgt	13, cr12, [r5, #-24]	; 0xffffffe8
    1b8c:	1c000000 	stcne	0, cr0, [r0], {-0}
    1b90:	5246410c 	subpl	r4, r6, #12, 2
    1b94:	05ce0600 	strbeq	r0, [lr, #1536]	; 0x600
    1b98:	000001a0 	andeq	r0, r0, r0, lsr #3
    1b9c:	cd0d0020 	stcgt	0, cr0, [sp, #-128]	; 0xffffff80
    1ba0:	a0000000 	andge	r0, r0, r0
    1ba4:	0e000001 	cdpeq	0, 0, cr0, cr0, cr1, {0}
    1ba8:	00000090 	muleq	r0, r0, r0
    1bac:	90050001 	andls	r0, r5, r1
    1bb0:	0f000001 	svceq	0x00000001
    1bb4:	00001075 	andeq	r1, r0, r5, ror r0
    1bb8:	0405cf06 	streq	ip, [r5], #-3846	; 0xfffff0fa
    1bbc:	10000001 	andne	r0, r0, r1
    1bc0:	00370107 	eorseq	r0, r7, r7, lsl #2
    1bc4:	42070000 	andmi	r0, r7, #0
    1bc8:	000001d7 	ldrdeq	r0, [r0], -r7
    1bcc:	0008de09 	andeq	sp, r8, r9, lsl #28
    1bd0:	6f090000 	svcvs	0x00090000
    1bd4:	01000007 	tsteq	r0, r7
    1bd8:	00029109 	andeq	r9, r2, r9, lsl #2
    1bdc:	cd090200 	sfmgt	f0, 4, [r9, #-0]
    1be0:	03000002 	movweq	r0, #2
    1be4:	0df60300 	ldcleq	3, cr0, [r6]
    1be8:	47070000 	strmi	r0, [r7, -r0]
    1bec:	000001b1 			; <UNDEFINED> instruction: 0x000001b1
    1bf0:	37010710 	smladcc	r1, r0, r7, r0
    1bf4:	07000000 	streq	r0, [r0, -r0]
    1bf8:	0001fc4f 	andeq	pc, r1, pc, asr #24
    1bfc:	044c0900 	strbeq	r0, [ip], #-2304	; 0xfffff700
    1c00:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    1c04:	0000038e 	andeq	r0, r0, lr, lsl #7
    1c08:	2a030001 	bcs	c1c14 <startup-0x1ff3e3ec>
    1c0c:	07000001 	streq	r0, [r0, -r1]
    1c10:	0001e252 	andeq	lr, r1, r2, asr r2
    1c14:	01071000 	mrseq	r1, (UNDEF: 7)
    1c18:	00000037 	andeq	r0, r0, r7, lsr r0
    1c1c:	022d5a07 	eoreq	r5, sp, #28672	; 0x7000
    1c20:	60090000 	andvs	r0, r9, r0
    1c24:	00000005 	andeq	r0, r0, r5
    1c28:	0009bd09 	andeq	fp, r9, r9, lsl #26
    1c2c:	87090100 	strhi	r0, [r9, -r0, lsl #2]
    1c30:	02000012 	andeq	r0, r0, #18
    1c34:	000a7709 	andeq	r7, sl, r9, lsl #14
    1c38:	03000300 	movweq	r0, #768	; 0x300
    1c3c:	00000f4c 	andeq	r0, r0, ip, asr #30
    1c40:	02075f07 	andeq	r5, r7, #7, 30
    1c44:	07100000 	ldreq	r0, [r0, -r0]
    1c48:	00003701 	andeq	r3, r0, r1, lsl #14
    1c4c:	586e0700 	stmdapl	lr!, {r8, r9, sl}^
    1c50:	09000002 	stmdbeq	r0, {r1}
    1c54:	000000a9 	andeq	r0, r0, r9, lsr #1
    1c58:	11330900 	teqne	r3, r0, lsl #18
    1c5c:	09010000 	stmdbeq	r1, {}	; <UNPREDICTABLE>
    1c60:	00000215 	andeq	r0, r0, r5, lsl r2
    1c64:	ba030002 	blt	c1c74 <startup-0x1ff3e38c>
    1c68:	07000004 	streq	r0, [r0, -r4]
    1c6c:	00023872 	andeq	r3, r2, r2, ror r8
    1c70:	01071000 	mrseq	r1, (UNDEF: 7)
    1c74:	00000037 	andeq	r0, r0, r7, lsr r0
    1c78:	027d7a07 	rsbseq	r7, sp, #28672	; 0x7000
    1c7c:	f1090000 			; <UNDEFINED> instruction: 0xf1090000
    1c80:	00000012 	andeq	r0, r0, r2, lsl r0
    1c84:	0012b109 	andseq	fp, r2, r9, lsl #2
    1c88:	03000100 	movweq	r0, #256	; 0x100
    1c8c:	0000141c 	andeq	r1, r0, ip, lsl r4
    1c90:	02637d07 	rsbeq	r7, r3, #448	; 0x1c0
    1c94:	08110000 	ldmdaeq	r1, {}	; <UNPREDICTABLE>
    1c98:	02cd8407 	sbceq	r8, sp, #117440512	; 0x7000000
    1c9c:	70120000 	andsvc	r0, r2, r0
    1ca0:	0700000f 	streq	r0, [r0, -pc]
    1ca4:	0000c286 	andeq	ip, r0, r6, lsl #5
    1ca8:	9f120000 	svcls	0x00120000
    1cac:	0700000d 	streq	r0, [r0, -sp]
    1cb0:	0001d789 	andeq	sp, r1, r9, lsl #15
    1cb4:	4c120400 	cfldrsmi	mvf0, [r2], {-0}
    1cb8:	0700000b 	streq	r0, [r0, -fp]
    1cbc:	00022d8c 	andeq	r2, r2, ip, lsl #27
    1cc0:	96120500 	ldrls	r0, [r2], -r0, lsl #10
    1cc4:	07000009 	streq	r0, [r0, -r9]
    1cc8:	0001fc8f 	andeq	pc, r1, pc, lsl #25
    1ccc:	9d120600 	ldcls	6, cr0, [r2, #-0]
    1cd0:	0700000f 	streq	r0, [r0, -pc]
    1cd4:	00025892 	muleq	r2, r2, r8
    1cd8:	03000700 	movweq	r0, #1792	; 0x700
    1cdc:	0000039c 	muleq	r0, ip, r3
    1ce0:	02889407 	addeq	r9, r8, #117440512	; 0x7000000
    1ce4:	59130000 	ldmdbpl	r3, {}	; <UNPREDICTABLE>
    1ce8:	01000014 	tsteq	r0, r4, lsl r0
    1cec:	216e0243 	cmncs	lr, r3, asr #4
    1cf0:	00a42000 	adceq	r2, r4, r0
    1cf4:	9c010000 	stcls	0, cr0, [r1], {-0}
    1cf8:	0000033a 	andeq	r0, r0, sl, lsr r3
    1cfc:	00143c14 	andseq	r3, r4, r4, lsl ip
    1d00:	02430100 	subeq	r0, r3, #0, 2
    1d04:	0000033a 	andeq	r0, r0, sl, lsr r3
    1d08:	146c9102 	strbtne	r9, [ip], #-258	; 0xfffffefe
    1d0c:	000013e7 	andeq	r1, r0, r7, ror #7
    1d10:	a2024301 	andge	r4, r2, #67108864	; 0x4000000
    1d14:	02000000 	andeq	r0, r0, #0
    1d18:	cd146a91 	vldrgt	s12, [r4, #-580]	; 0xfffffdbc
    1d1c:	01000012 	tsteq	r0, r2, lsl r0
    1d20:	00970243 	addseq	r0, r7, r3, asr #4
    1d24:	91020000 	mrsls	r0, (UNDEF: 2)
    1d28:	12d51569 	sbcsne	r1, r5, #440401920	; 0x1a400000
    1d2c:	45010000 	strmi	r0, [r1, #-0]
    1d30:	0000c202 	andeq	ip, r0, r2, lsl #4
    1d34:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    1d38:	00145215 	andseq	r5, r4, r5, lsl r2
    1d3c:	02460100 	subeq	r0, r6, #0, 2
    1d40:	000000c2 	andeq	r0, r0, r2, asr #1
    1d44:	00709102 	rsbseq	r9, r0, r2, lsl #2
    1d48:	01a50416 			; <UNDEFINED> instruction: 0x01a50416
    1d4c:	42130000 	andsmi	r0, r3, #0
    1d50:	01000014 	tsteq	r0, r4, lsl r0
    1d54:	214a01f0 	strdcs	r0, [sl, #-16]
    1d58:	00242000 	eoreq	r2, r4, r0
    1d5c:	9c010000 	stcls	0, cr0, [r1], {-0}
    1d60:	00000375 	andeq	r0, r0, r5, ror r3
    1d64:	00143c14 	andseq	r3, r4, r4, lsl ip
    1d68:	01f00100 	mvnseq	r0, r0, lsl #2
    1d6c:	0000033a 	andeq	r0, r0, sl, lsr r3
    1d70:	14749102 	ldrbtne	r9, [r4], #-258	; 0xfffffefe
    1d74:	00000f70 	andeq	r0, r0, r0, ror pc
    1d78:	a201f001 	andge	pc, r1, #1
    1d7c:	02000000 	andeq	r0, r0, #0
    1d80:	13007291 	movwne	r7, #657	; 0x291
    1d84:	00001431 	andeq	r1, r0, r1, lsr r4
    1d88:	2c01e001 	stccs	0, cr14, [r1], {1}
    1d8c:	1e200021 	cdpne	0, 2, cr0, cr0, cr1, {1}
    1d90:	01000000 	mrseq	r0, (UNDEF: 0)
    1d94:	0003aa9c 	muleq	r3, ip, sl
    1d98:	143c1400 	ldrtne	r1, [ip], #-1024	; 0xfffffc00
    1d9c:	e0010000 	and	r0, r1, r0
    1da0:	00033a01 	andeq	r3, r3, r1, lsl #20
    1da4:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    1da8:	0013df14 	andseq	sp, r3, r4, lsl pc
    1dac:	01e00100 	mvneq	r0, r0, lsl #2
    1db0:	000000a2 	andeq	r0, r0, r2, lsr #1
    1db4:	00729102 	rsbseq	r9, r2, r2, lsl #2
    1db8:	0012fb13 	andseq	pc, r2, r3, lsl fp	; <UNPREDICTABLE>
    1dbc:	01c70100 	biceq	r0, r7, r0, lsl #2
    1dc0:	200020f2 	strdcs	r2, [r0], -r2	; <UNPREDICTABLE>
    1dc4:	0000003a 	andeq	r0, r0, sl, lsr r0
    1dc8:	03ee9c01 	mvneq	r9, #256	; 0x100
    1dcc:	3c140000 	ldccc	0, cr0, [r4], {-0}
    1dd0:	01000014 	tsteq	r0, r4, lsl r0
    1dd4:	033a01c7 	teqeq	sl, #-1073741775	; 0xc0000031
    1dd8:	91020000 	mrsls	r0, (UNDEF: 2)
    1ddc:	0f701474 	svceq	0x00701474
    1de0:	c7010000 	strgt	r0, [r1, -r0]
    1de4:	0000a201 	andeq	sl, r0, r1, lsl #4
    1de8:	72910200 	addsvc	r0, r1, #0, 4
    1dec:	0012ea14 	andseq	lr, r2, r4, lsl sl
    1df0:	01c70100 	biceq	r0, r7, r0, lsl #2
    1df4:	0000027d 	andeq	r0, r0, sp, ror r2
    1df8:	00719102 	rsbseq	r9, r1, r2, lsl #2
    1dfc:	00132013 	andseq	r2, r3, r3, lsl r0
    1e00:	01b10100 			; <UNDEFINED> instruction: 0x01b10100
    1e04:	200020d4 	ldrdcs	r2, [r0], -r4
    1e08:	0000001e 	andeq	r0, r0, lr, lsl r0
    1e0c:	04239c01 	strteq	r9, [r3], #-3073	; 0xfffff3ff
    1e10:	3c140000 	ldccc	0, cr0, [r4], {-0}
    1e14:	01000014 	tsteq	r0, r4, lsl r0
    1e18:	033a01b1 	teqeq	sl, #1073741868	; 0x4000002c
    1e1c:	91020000 	mrsls	r0, (UNDEF: 2)
    1e20:	0f701474 	svceq	0x00701474
    1e24:	b1010000 	mrslt	r0, (UNDEF: 1)
    1e28:	0000a201 	andeq	sl, r0, r1, lsl #4
    1e2c:	72910200 	addsvc	r0, r1, #0, 4
    1e30:	13091300 	movwne	r1, #37632	; 0x9300
    1e34:	9c010000 	stcls	0, cr0, [r1], {-0}
    1e38:	0020b601 	eoreq	fp, r0, r1, lsl #12
    1e3c:	00001e20 	andeq	r1, r0, r0, lsr #28
    1e40:	589c0100 	ldmpl	ip, {r8}
    1e44:	14000004 	strne	r0, [r0], #-4
    1e48:	0000143c 	andeq	r1, r0, ip, lsr r4
    1e4c:	3a019c01 	bcc	68e58 <startup-0x1ff971a8>
    1e50:	02000003 	andeq	r0, r0, #3
    1e54:	70147491 	mulsvc	r4, r1, r4
    1e58:	0100000f 	tsteq	r0, pc
    1e5c:	00a2019c 	umlaleq	r0, r2, ip, r1
    1e60:	91020000 	mrsls	r0, (UNDEF: 2)
    1e64:	b9170072 	ldmdblt	r7, {r1, r4, r5, r6}
    1e68:	01000012 	tsteq	r0, r2, lsl r0
    1e6c:	00a20188 	adceq	r0, r2, r8, lsl #3
    1e70:	20a00000 	adccs	r0, r0, r0
    1e74:	00162000 	andseq	r2, r6, r0
    1e78:	9c010000 	stcls	0, cr0, [r1], {-0}
    1e7c:	00000482 	andeq	r0, r0, r2, lsl #9
    1e80:	00143c14 	andseq	r3, r4, r4, lsl ip
    1e84:	01880100 	orreq	r0, r8, r0, lsl #2
    1e88:	0000033a 	andeq	r0, r0, sl, lsr r3
    1e8c:	00749102 	rsbseq	r9, r4, r2, lsl #2
    1e90:	00146a17 	andseq	r6, r4, r7, lsl sl
    1e94:	016e0100 	cmneq	lr, r0, lsl #2
    1e98:	00000097 	muleq	r0, r7, r0
    1e9c:	2000205e 	andcs	r2, r0, lr, asr r0
    1ea0:	00000042 	andeq	r0, r0, r2, asr #32
    1ea4:	04ca9c01 	strbeq	r9, [sl], #3073	; 0xc01
    1ea8:	3c140000 	ldccc	0, cr0, [r4], {-0}
    1eac:	01000014 	tsteq	r0, r4, lsl r0
    1eb0:	033a016e 	teqeq	sl, #-2147483621	; 0x8000001b
    1eb4:	91020000 	mrsls	r0, (UNDEF: 2)
    1eb8:	0f70146c 	svceq	0x0070146c
    1ebc:	6e010000 	cdpvs	0, 0, cr0, cr1, cr0, {0}
    1ec0:	0000a201 	andeq	sl, r0, r1, lsl #4
    1ec4:	6a910200 	bvs	fe4426cc <GPIO_Ports+0xde43f65c>
    1ec8:	00104015 	andseq	r4, r0, r5, lsl r0
    1ecc:	01700100 	cmneq	r0, r0, lsl #2
    1ed0:	00000097 	muleq	r0, r7, r0
    1ed4:	00779102 	rsbseq	r9, r7, r2, lsl #2
    1ed8:	0013f617 	andseq	pc, r3, r7, lsl r6	; <UNPREDICTABLE>
    1edc:	015d0100 	cmpeq	sp, r0, lsl #2
    1ee0:	000000a2 	andeq	r0, r0, r2, lsr #1
    1ee4:	20002048 	andcs	r2, r0, r8, asr #32
    1ee8:	00000016 	andeq	r0, r0, r6, lsl r0
    1eec:	04f49c01 	ldrbteq	r9, [r4], #3073	; 0xc01
    1ef0:	3c140000 	ldccc	0, cr0, [r4], {-0}
    1ef4:	01000014 	tsteq	r0, r4, lsl r0
    1ef8:	033a015d 	teqeq	sl, #1073741847	; 0x40000017
    1efc:	91020000 	mrsls	r0, (UNDEF: 2)
    1f00:	b9170074 	ldmdblt	r7, {r2, r4, r5, r6}
    1f04:	01000013 	tsteq	r0, r3, lsl r0
    1f08:	00970143 	addseq	r0, r7, r3, asr #2
    1f0c:	20060000 	andcs	r0, r6, r0
    1f10:	00422000 	subeq	r2, r2, r0
    1f14:	9c010000 	stcls	0, cr0, [r1], {-0}
    1f18:	0000053c 	andeq	r0, r0, ip, lsr r5
    1f1c:	00143c14 	andseq	r3, r4, r4, lsl ip
    1f20:	01430100 	mrseq	r0, (UNDEF: 83)
    1f24:	0000033a 	andeq	r0, r0, sl, lsr r3
    1f28:	146c9102 	strbtne	r9, [ip], #-258	; 0xfffffefe
    1f2c:	00000f70 	andeq	r0, r0, r0, ror pc
    1f30:	a2014301 	andge	r4, r1, #67108864	; 0x4000000
    1f34:	02000000 	andeq	r0, r0, #0
    1f38:	40156a91 	mulsmi	r5, r1, sl
    1f3c:	01000010 	tsteq	r0, r0, lsl r0
    1f40:	00970145 	addseq	r0, r7, r5, asr #2
    1f44:	91020000 	mrsls	r0, (UNDEF: 2)
    1f48:	09130077 	ldmdbeq	r3, {r0, r1, r2, r4, r5, r6}
    1f4c:	01000014 	tsteq	r0, r4, lsl r0
    1f50:	1fc00115 	svcne	0x00c00115
    1f54:	00462000 	subeq	r2, r6, r0
    1f58:	9c010000 	stcls	0, cr0, [r1], {-0}
    1f5c:	00000580 	andeq	r0, r0, r0, lsl #11
    1f60:	00143c14 	andseq	r3, r4, r4, lsl ip
    1f64:	01150100 	tsteq	r5, r0, lsl #2
    1f68:	0000033a 	andeq	r0, r0, sl, lsr r3
    1f6c:	146c9102 	strbtne	r9, [ip], #-258	; 0xfffffefe
    1f70:	00000f70 	andeq	r0, r0, r0, ror pc
    1f74:	a2011501 	andge	r1, r1, #4194304	; 0x400000
    1f78:	02000000 	andeq	r0, r0, #0
    1f7c:	74186a91 	ldrvc	r6, [r8], #-2705	; 0xfffff56f
    1f80:	0100706d 	tsteq	r0, sp, rrx
    1f84:	00cd0117 	sbceq	r0, sp, r7, lsl r1
    1f88:	91020000 	mrsls	r0, (UNDEF: 2)
    1f8c:	da190074 	ble	642164 <startup-0x1f9bde9c>
    1f90:	01000012 	tsteq	r0, r2, lsl r0
    1f94:	001f8cfe 			; <UNDEFINED> instruction: 0x001f8cfe
    1f98:	00003420 	andeq	r3, r0, r0, lsr #8
    1f9c:	a49c0100 	ldrge	r0, [ip], #256	; 0x100
    1fa0:	1a000005 	bne	1fbc <startup-0x1fffe044>
    1fa4:	000013cf 	andeq	r1, r0, pc, asr #7
    1fa8:	05a4fe01 	streq	pc, [r4, #3585]!	; 0xe01
    1fac:	91020000 	mrsls	r0, (UNDEF: 2)
    1fb0:	04160074 	ldreq	r0, [r6], #-116	; 0xffffff8c
    1fb4:	000002cd 	andeq	r0, r0, sp, asr #5
    1fb8:	00131619 	andseq	r1, r3, r9, lsl r6
    1fbc:	74ca0100 	strbvc	r0, [sl], #256	; 0x100
    1fc0:	1820001e 	stmdane	r0!, {r1, r2, r3, r4}
    1fc4:	01000001 	tsteq	r0, r1
    1fc8:	0006069c 	muleq	r6, ip, r6
    1fcc:	143c1a00 	ldrtne	r1, [ip], #-2560	; 0xfffff600
    1fd0:	ca010000 	bgt	41fd8 <startup-0x1ffbe028>
    1fd4:	0000033a 	andeq	r0, r0, sl, lsr r3
    1fd8:	1a649102 	bne	19263e8 <startup-0x1e6d9c18>
    1fdc:	000013cf 	andeq	r1, r0, pc, asr #7
    1fe0:	05a4ca01 	streq	ip, [r4, #2561]!	; 0xa01
    1fe4:	91020000 	mrsls	r0, (UNDEF: 2)
    1fe8:	12aa1b60 	adcne	r1, sl, #96, 22	; 0x18000
    1fec:	cc010000 	stcgt	0, cr0, [r1], {-0}
    1ff0:	000000c2 	andeq	r0, r0, r2, asr #1
    1ff4:	1c749102 	ldfnep	f1, [r4], #-8
    1ff8:	00736f70 	rsbseq	r6, r3, r0, ror pc
    1ffc:	00c2cc01 	sbceq	ip, r2, r1, lsl #24
    2000:	91020000 	mrsls	r0, (UNDEF: 2)
    2004:	14261b70 	strtne	r1, [r6], #-2928	; 0xfffff490
    2008:	cc010000 	stcgt	0, cr0, [r1], {-0}
    200c:	000000c2 	andeq	r0, r0, r2, asr #1
    2010:	006c9102 	rsbeq	r9, ip, r2, lsl #2
    2014:	0013ad1d 	andseq	sl, r3, sp, lsl sp
    2018:	047f0100 	ldrbteq	r0, [pc], #-256	; 2020 <startup-0x1fffdfe0>
    201c:	7020001d 	eorvc	r0, r0, sp, lsl r0
    2020:	01000001 	tsteq	r0, r1
    2024:	143c1a9c 	ldrtne	r1, [ip], #-2716	; 0xfffff564
    2028:	7f010000 	svcvc	0x00010000
    202c:	0000033a 	andeq	r0, r0, sl, lsr r3
    2030:	00749102 	rsbseq	r9, r4, r2, lsl #2
    2034:	00054300 	andeq	r4, r5, r0, lsl #6
    2038:	c5000400 	strgt	r0, [r0, #-1024]	; 0xfffffc00
    203c:	04000004 	streq	r0, [r0], #-4
    2040:	00062901 	andeq	r2, r6, r1, lsl #18
    2044:	159f0c00 	ldrne	r0, [pc, #3072]	; 2c4c <startup-0x1fffd3b4>
    2048:	057d0000 	ldrbeq	r0, [sp, #-0]!
    204c:	22140000 	andscs	r0, r4, #0
    2050:	01c42000 	biceq	r2, r4, r0
    2054:	07f70000 	ldrbeq	r0, [r7, r0]!
    2058:	01020000 	mrseq	r0, (UNDEF: 2)
    205c:	00040b06 	andeq	r0, r4, r6, lsl #22
    2060:	01e30300 	mvneq	r0, r0, lsl #6
    2064:	2b020000 	blcs	8206c <startup-0x1ff7df94>
    2068:	00000037 	andeq	r0, r0, r7, lsr r0
    206c:	09080102 	stmdbeq	r8, {r1, r8}
    2070:	02000004 	andeq	r0, r0, #4
    2074:	0ff00502 	svceq	0x00f00502
    2078:	02020000 	andeq	r0, r2, #0
    207c:	00117407 	andseq	r7, r1, r7, lsl #8
    2080:	120e0300 	andne	r0, lr, #0, 6
    2084:	4d020000 	stcmi	0, cr0, [r2, #-0]
    2088:	00000057 	andeq	r0, r0, r7, asr r0
    208c:	f8050402 			; <UNDEFINED> instruction: 0xf8050402
    2090:	03000009 	movweq	r0, #9
    2094:	000009a1 	andeq	r0, r0, r1, lsr #19
    2098:	00694f02 	rsbeq	r4, r9, r2, lsl #30
    209c:	04020000 	streq	r0, [r2], #-0
    20a0:	000d4d07 	andeq	r4, sp, r7, lsl #26
    20a4:	05080200 	streq	r0, [r8, #-512]	; 0xfffffe00
    20a8:	000009f3 	strdeq	r0, [r0], -r3
    20ac:	48070802 	stmdami	r7, {r1, fp}
    20b0:	0400000d 	streq	r0, [r0], #-13
    20b4:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    20b8:	04020074 	streq	r0, [r2], #-116	; 0xffffff8c
    20bc:	000d5207 	andeq	r5, sp, r7, lsl #4
    20c0:	01e50300 	mvneq	r0, r0, lsl #6
    20c4:	18030000 	stmdane	r3, {}	; <UNPREDICTABLE>
    20c8:	0000002c 	andeq	r0, r0, ip, lsr #32
    20cc:	00008c05 	andeq	r8, r0, r5, lsl #24
    20d0:	12100300 	andsne	r0, r0, #0, 6
    20d4:	2c030000 	stccs	0, cr0, [r3], {-0}
    20d8:	0000004c 	andeq	r0, r0, ip, asr #32
    20dc:	00009c05 	andeq	r9, r0, r5, lsl #24
    20e0:	09a30300 	stmibeq	r3!, {r8, r9}
    20e4:	30030000 	andcc	r0, r3, r0
    20e8:	0000005e 	andeq	r0, r0, lr, asr r0
    20ec:	0000ac05 	andeq	sl, r0, r5, lsl #24
    20f0:	00b70600 	adcseq	r0, r7, r0, lsl #12
    20f4:	04070000 	streq	r0, [r7], #-0
    20f8:	01a0040e 	lsleq	r0, lr, #8
    20fc:	0000017d 	andeq	r0, r0, sp, ror r1
    2100:	00122c08 	andseq	r2, r2, r8, lsl #24
    2104:	01a20400 			; <UNDEFINED> instruction: 0x01a20400
    2108:	0000018d 	andeq	r0, r0, sp, lsl #3
    210c:	03f50800 	mvnseq	r0, #0, 16
    2110:	a3040000 	movwge	r0, #16384	; 0x4000
    2114:	00019201 	andeq	r9, r1, r1, lsl #4
    2118:	d2082000 	andle	r2, r8, #0
    211c:	0400000d 	streq	r0, [r0], #-13
    2120:	018d01a4 	orreq	r0, sp, r4, lsr #3
    2124:	08800000 	stmeq	r0, {}	; <UNPREDICTABLE>
    2128:	00000005 	andeq	r0, r0, r5
    212c:	9201a504 	andls	sl, r1, #4, 10	; 0x1000000
    2130:	a0000001 	andge	r0, r0, r1
    2134:	0011bc09 	andseq	fp, r1, r9, lsl #24
    2138:	01a60400 			; <UNDEFINED> instruction: 0x01a60400
    213c:	0000018d 	andeq	r0, r0, sp, lsl #3
    2140:	83090100 	movwhi	r0, #37120	; 0x9100
    2144:	04000004 	streq	r0, [r0], #-4
    2148:	019201a7 	orrseq	r0, r2, r7, lsr #3
    214c:	01200000 			; <UNDEFINED> instruction: 0x01200000
    2150:	00018e09 	andeq	r8, r1, r9, lsl #28
    2154:	01a80400 			; <UNDEFINED> instruction: 0x01a80400
    2158:	0000018d 	andeq	r0, r0, sp, lsl #3
    215c:	8d090180 	stfhis	f0, [r9, #-512]	; 0xfffffe00
    2160:	04000004 	streq	r0, [r0], #-4
    2164:	019201a9 	orrseq	r0, r2, r9, lsr #3
    2168:	01a00000 	moveq	r0, r0
    216c:	00044709 	andeq	r4, r4, r9, lsl #14
    2170:	01aa0400 			; <UNDEFINED> instruction: 0x01aa0400
    2174:	0000018d 	andeq	r0, r0, sp, lsl #3
    2178:	29090200 	stmdbcs	r9, {r9}
    217c:	04000004 	streq	r0, [r0], #-4
    2180:	01a201ab 			; <UNDEFINED> instruction: 0x01a201ab
    2184:	02200000 	eoreq	r0, r0, #0
    2188:	0050490a 	subseq	r4, r0, sl, lsl #18
    218c:	c201ac04 	andgt	sl, r1, #4, 24	; 0x400
    2190:	00000001 	andeq	r0, r0, r1
    2194:	04330903 	ldrteq	r0, [r3], #-2307	; 0xfffff6fd
    2198:	ad040000 	stcge	0, cr0, [r4, #-0]
    219c:	0001c701 	andeq	ip, r1, r1, lsl #14
    21a0:	0903f000 	stmdbeq	r3, {ip, sp, lr, pc}
    21a4:	0000071c 	andeq	r0, r0, ip, lsl r7
    21a8:	b701ae04 	strlt	sl, [r1, -r4, lsl #28]
    21ac:	00000000 	andeq	r0, r0, r0
    21b0:	b70b000e 	strlt	r0, [fp, -lr]
    21b4:	8d000000 	stchi	0, cr0, [r0, #-0]
    21b8:	0c000001 	stceq	0, cr0, [r0], {1}
    21bc:	00000085 	andeq	r0, r0, r5, lsl #1
    21c0:	7d050007 	stcvc	0, cr0, [r5, #-28]	; 0xffffffe4
    21c4:	0b000001 	bleq	21d0 <startup-0x1fffde30>
    21c8:	000000ac 	andeq	r0, r0, ip, lsr #1
    21cc:	000001a2 	andeq	r0, r0, r2, lsr #3
    21d0:	0000850c 	andeq	r8, r0, ip, lsl #10
    21d4:	0b001700 	bleq	7ddc <startup-0x1fff8224>
    21d8:	000000ac 	andeq	r0, r0, ip, lsr #1
    21dc:	000001b2 			; <UNDEFINED> instruction: 0x000001b2
    21e0:	0000850c 	andeq	r8, r0, ip, lsl #10
    21e4:	0b003700 	bleq	fdec <startup-0x1fff0214>
    21e8:	00000097 	muleq	r0, r7, r0
    21ec:	000001c2 	andeq	r0, r0, r2, asr #3
    21f0:	0000850c 	andeq	r8, r0, ip, lsl #10
    21f4:	0500ef00 	streq	lr, [r0, #-3840]	; 0xfffff100
    21f8:	000001b2 			; <UNDEFINED> instruction: 0x000001b2
    21fc:	0000ac0b 	andeq	sl, r0, fp, lsl #24
    2200:	0001d800 	andeq	sp, r1, r0, lsl #16
    2204:	00850d00 	addeq	r0, r5, r0, lsl #26
    2208:	02830000 	addeq	r0, r3, #0
    220c:	0d080e00 	stceq	14, cr0, [r8, #-0]
    2210:	af040000 	svcge	0x00040000
    2214:	0000c101 	andeq	ip, r0, r1, lsl #2
    2218:	048c0f00 	streq	r0, [ip], #3840	; 0xf00
    221c:	02ff01c0 	rscseq	r0, pc, #192, 2	; 0x30
    2220:	54080000 	strpl	r0, [r8], #-0
    2224:	04000002 	streq	r0, [r0], #-2
    2228:	00bc01c2 	adcseq	r0, ip, r2, asr #3
    222c:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    2230:	0000037d 	andeq	r0, r0, sp, ror r3
    2234:	b701c304 	strlt	ip, [r1, -r4, lsl #6]
    2238:	04000000 	streq	r0, [r0], #-0
    223c:	0000ba08 	andeq	fp, r0, r8, lsl #20
    2240:	01c40400 	biceq	r0, r4, r0, lsl #8
    2244:	000000b7 	strheq	r0, [r0], -r7
    2248:	02240808 	eoreq	r0, r4, #8, 16	; 0x80000
    224c:	c5040000 	strgt	r0, [r4, #-0]
    2250:	0000b701 	andeq	fp, r0, r1, lsl #14
    2254:	53100c00 	tstpl	r0, #0, 24
    2258:	04005243 	streq	r5, [r0], #-579	; 0xfffffdbd
    225c:	00b701c6 	adcseq	r0, r7, r6, asr #3
    2260:	10100000 	andsne	r0, r0, r0
    2264:	00524343 	subseq	r4, r2, r3, asr #6
    2268:	b701c704 	strlt	ip, [r1, -r4, lsl #14]
    226c:	14000000 	strne	r0, [r0], #-0
    2270:	50485310 	subpl	r5, r8, r0, lsl r3
    2274:	01c80400 	biceq	r0, r8, r0, lsl #8
    2278:	0000030f 	andeq	r0, r0, pc, lsl #6
    227c:	07050818 	smladeq	r5, r8, r8, r0
    2280:	c9040000 	stmdbgt	r4, {}	; <UNPREDICTABLE>
    2284:	0000b701 	andeq	fp, r0, r1, lsl #14
    2288:	c2082400 	andgt	r2, r8, #0, 8
    228c:	0400000e 	streq	r0, [r0], #-14
    2290:	00b701ca 	adcseq	r0, r7, sl, asr #3
    2294:	08280000 	stmdaeq	r8!, {}	; <UNPREDICTABLE>
    2298:	000005c0 	andeq	r0, r0, r0, asr #11
    229c:	b701cb04 	strlt	ip, [r1, -r4, lsl #22]
    22a0:	2c000000 	stccs	0, cr0, [r0], {-0}
    22a4:	0004cb08 	andeq	ip, r4, r8, lsl #22
    22a8:	01cc0400 	biceq	r0, ip, r0, lsl #8
    22ac:	000000b7 	strheq	r0, [r0], -r7
    22b0:	0fea0830 	svceq	0x00ea0830
    22b4:	cd040000 	stcgt	0, cr0, [r4, #-0]
    22b8:	0000b701 	andeq	fp, r0, r1, lsl #14
    22bc:	d2083400 	andle	r3, r8, #0, 8
    22c0:	0400000b 	streq	r0, [r0], #-11
    22c4:	00b701ce 	adcseq	r0, r7, lr, asr #3
    22c8:	08380000 	ldmdaeq	r8!, {}	; <UNPREDICTABLE>
    22cc:	00000e86 	andeq	r0, r0, r6, lsl #29
    22d0:	b701cf04 	strlt	ip, [r1, -r4, lsl #30]
    22d4:	3c000000 	stccc	0, cr0, [r0], {-0}
    22d8:	52465010 	subpl	r5, r6, #16
    22dc:	01d00400 	bicseq	r0, r0, r0, lsl #8
    22e0:	00000329 	andeq	r0, r0, r9, lsr #6
    22e4:	46441040 	strbmi	r1, [r4], -r0, asr #32
    22e8:	d1040052 	qaddle	r0, r2, r4
    22ec:	0000bc01 	andeq	fp, r0, r1, lsl #24
    22f0:	41104800 	tstmi	r0, r0, lsl #16
    22f4:	04005244 	streq	r5, [r0], #-580	; 0xfffffdbc
    22f8:	00bc01d2 	ldrsbteq	r0, [ip], r2
    22fc:	084c0000 	stmdaeq	ip, {}^	; <UNPREDICTABLE>
    2300:	00000fcb 	andeq	r0, r0, fp, asr #31
    2304:	4301d304 	movwmi	sp, #4868	; 0x1304
    2308:	50000003 	andpl	r0, r0, r3
    230c:	00101308 	andseq	r1, r0, r8, lsl #6
    2310:	01d40400 	bicseq	r0, r4, r0, lsl #8
    2314:	0000035d 	andeq	r0, r0, sp, asr r3
    2318:	03f50860 	mvnseq	r0, #96, 16	; 0x600000
    231c:	d5040000 	strle	r0, [r4, #-0]
    2320:	00036201 	andeq	r6, r3, r1, lsl #4
    2324:	af087400 	svcge	0x00087400
    2328:	04000011 	streq	r0, [r0], #-17	; 0xffffffef
    232c:	00b701d6 	ldrsbteq	r0, [r7], r6
    2330:	00880000 	addeq	r0, r8, r0
    2334:	0000970b 	andeq	r9, r0, fp, lsl #14
    2338:	00030f00 	andeq	r0, r3, r0, lsl #30
    233c:	00850c00 	addeq	r0, r5, r0, lsl #24
    2340:	000b0000 	andeq	r0, fp, r0
    2344:	0002ff05 	andeq	pc, r2, r5, lsl #30
    2348:	00bc0b00 	adcseq	r0, ip, r0, lsl #22
    234c:	03240000 			; <UNDEFINED> instruction: 0x03240000
    2350:	850c0000 	strhi	r0, [ip, #-0]
    2354:	01000000 	mrseq	r0, (UNDEF: 0)
    2358:	03140600 	tsteq	r4, #0, 12
    235c:	24050000 	strcs	r0, [r5], #-0
    2360:	0b000003 	bleq	2374 <startup-0x1fffdc8c>
    2364:	000000bc 	strheq	r0, [r0], -ip
    2368:	0000033e 	andeq	r0, r0, lr, lsr r3
    236c:	0000850c 	andeq	r8, r0, ip, lsl #10
    2370:	06000300 	streq	r0, [r0], -r0, lsl #6
    2374:	0000032e 	andeq	r0, r0, lr, lsr #6
    2378:	00033e05 	andeq	r3, r3, r5, lsl #28
    237c:	00bc0b00 	adcseq	r0, ip, r0, lsl #22
    2380:	03580000 	cmpeq	r8, #0
    2384:	850c0000 	strhi	r0, [ip, #-0]
    2388:	04000000 	streq	r0, [r0], #-0
    238c:	03480600 	movteq	r0, #34304	; 0x8600
    2390:	58050000 	stmdapl	r5, {}	; <UNPREDICTABLE>
    2394:	0b000003 	bleq	23a8 <startup-0x1fffdc58>
    2398:	000000ac 	andeq	r0, r0, ip, lsr #1
    239c:	00000372 	andeq	r0, r0, r2, ror r3
    23a0:	0000850c 	andeq	r8, r0, ip, lsl #10
    23a4:	0e000400 	cfcpyseq	mvf0, mvf0
    23a8:	000004b1 			; <UNDEFINED> instruction: 0x000004b1
    23ac:	e401d704 	str	sp, [r1], #-1796	; 0xfffff8fc
    23b0:	0f000001 	svceq	0x00000001
    23b4:	02bf0410 	adcseq	r0, pc, #16, 8	; 0x10000000
    23b8:	000003bc 			; <UNDEFINED> instruction: 0x000003bc
    23bc:	000b3008 	andeq	r3, fp, r8
    23c0:	02c10400 	sbceq	r0, r1, #0, 8
    23c4:	000000b7 	strheq	r0, [r0], -r7
    23c8:	0f470800 	svceq	0x00470800
    23cc:	c2040000 	andgt	r0, r4, #0
    23d0:	0000b702 	andeq	fp, r0, r2, lsl #14
    23d4:	56100400 	ldrpl	r0, [r0], -r0, lsl #8
    23d8:	04004c41 	streq	r4, [r0], #-3137	; 0xfffff3bf
    23dc:	00b702c3 	adcseq	r0, r7, r3, asr #5
    23e0:	08080000 	stmdaeq	r8, {}	; <UNPREDICTABLE>
    23e4:	00000e92 	muleq	r0, r2, lr
    23e8:	bc02c404 	cfstrslt	mvf12, [r2], {4}
    23ec:	0c000000 	stceq	0, cr0, [r0], {-0}
    23f0:	0c660e00 	stcleq	14, cr0, [r6], #-0
    23f4:	c5040000 	strgt	r0, [r4, #-0]
    23f8:	00037e02 	andeq	r7, r3, r2, lsl #28
    23fc:	10951100 	addsne	r1, r5, r0, lsl #2
    2400:	fa040000 	blx	102408 <startup-0x1fefdbf8>
    2404:	0000a706 	andeq	sl, r0, r6, lsl #14
    2408:	08a01200 	stmiaeq	r0!, {r9, ip}
    240c:	3b050000 	blcc	142414 <startup-0x1febdbec>
    2410:	000000ac 	andeq	r0, r0, ip, lsr #1
    2414:	37010713 	smladcc	r1, r3, r7, r0
    2418:	06000000 	streq	r0, [r0], -r0
    241c:	03fa035f 	mvnseq	r0, #2080374785	; 0x7c000001
    2420:	31140000 	tstcc	r4, r0
    2424:	0000000a 	andeq	r0, r0, sl
    2428:	00104a14 	andseq	r4, r0, r4, lsl sl
    242c:	0e000100 	adfeqs	f0, f0, f0
    2430:	00000d12 	andeq	r0, r0, r2, lsl sp
    2434:	df035f06 	svcle	0x00035f06
    2438:	15000003 	strne	r0, [r0, #-3]
    243c:	3f360704 	svccc	0x00360704
    2440:	16000004 	strne	r0, [r0], -r4
    2444:	00001545 	andeq	r1, r0, r5, asr #10
    2448:	008c3807 	addeq	r3, ip, r7, lsl #16
    244c:	16000000 	strne	r0, [r0], -r0
    2450:	00001570 	andeq	r1, r0, r0, ror r5
    2454:	008c3d07 	addeq	r3, ip, r7, lsl #26
    2458:	16010000 	strne	r0, [r1], -r0
    245c:	00001555 	andeq	r1, r0, r5, asr r5
    2460:	008c4207 	addeq	r4, ip, r7, lsl #4
    2464:	16020000 	strne	r0, [r2], -r0
    2468:	00001492 	muleq	r0, r2, r4
    246c:	03fa4707 	mvnseq	r4, #1835008	; 0x1c0000
    2470:	00030000 	andeq	r0, r3, r0
    2474:	00148103 	andseq	r8, r4, r3, lsl #2
    2478:	064a0700 	strbeq	r0, [sl], -r0, lsl #14
    247c:	17000004 	strne	r0, [r0, -r4]
    2480:	00001521 	andeq	r1, r0, r1, lsr #10
    2484:	23a4df01 			; <UNDEFINED> instruction: 0x23a4df01
    2488:	00342000 	eorseq	r2, r4, r0
    248c:	9c010000 	stcls	0, cr0, [r1], {-0}
    2490:	0000046e 	andeq	r0, r0, lr, ror #8
    2494:	0014a518 	andseq	sl, r4, r8, lsl r5
    2498:	acdf0100 	ldfgee	f0, [pc], {0}
    249c:	02000000 	andeq	r0, r0, #0
    24a0:	17007491 			; <UNDEFINED> instruction: 0x17007491
    24a4:	0000150d 	andeq	r1, r0, sp, lsl #10
    24a8:	235cc701 	cmpcs	ip, #262144	; 0x40000
    24ac:	00482000 	subeq	r2, r8, r0
    24b0:	9c010000 	stcls	0, cr0, [r1], {-0}
    24b4:	000004a0 	andeq	r0, r0, r0, lsr #9
    24b8:	00161318 	andseq	r1, r6, r8, lsl r3
    24bc:	8cc70100 	stfhie	f0, [r7], {0}
    24c0:	02000000 	andeq	r0, r0, #0
    24c4:	43187791 	tstmi	r8, #38010880	; 0x2440000
    24c8:	0100000b 	tsteq	r0, fp
    24cc:	0003fac7 	andeq	pc, r3, r7, asr #21
    24d0:	76910200 	ldrvc	r0, [r1], r0, lsl #4
    24d4:	14f21700 	ldrbtne	r1, [r2], #1792	; 0x700
    24d8:	b4010000 	strlt	r0, [r1], #-0
    24dc:	20002330 	andcs	r2, r0, r0, lsr r3
    24e0:	0000002c 	andeq	r0, r0, ip, lsr #32
    24e4:	04d29c01 	ldrbeq	r9, [r2], #3073	; 0xc01
    24e8:	92180000 	andsls	r0, r8, #0
    24ec:	01000015 	tsteq	r0, r5, lsl r0
    24f0:	0000acb4 			; <UNDEFINED> instruction: 0x0000acb4
    24f4:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    24f8:	0014eb18 	andseq	lr, r4, r8, lsl fp
    24fc:	acb40100 	ldfges	f0, [r4]
    2500:	02000000 	andeq	r0, r0, #0
    2504:	17007091 			; <UNDEFINED> instruction: 0x17007091
    2508:	000014da 	ldrdeq	r1, [r0], -sl
    250c:	22388801 	eorscs	r8, r8, #65536	; 0x10000
    2510:	00f82000 	rscseq	r2, r8, r0
    2514:	9c010000 	stcls	0, cr0, [r1], {-0}
    2518:	00000520 	andeq	r0, r0, r0, lsr #10
    251c:	0014b718 	andseq	fp, r4, r8, lsl r7
    2520:	20880100 	addcs	r0, r8, r0, lsl #2
    2524:	02000005 	andeq	r0, r0, #5
    2528:	39196491 	ldmdbcc	r9, {r0, r4, r7, sl, sp, lr}
    252c:	01000015 	tsteq	r0, r5, lsl r0
    2530:	00008c8a 	andeq	r8, r0, sl, lsl #25
    2534:	6f910200 	svcvs	0x00910200
    2538:	0014e419 	andseq	lr, r4, r9, lsl r4
    253c:	8c8a0100 	stfhis	f0, [sl], {0}
    2540:	02000000 	andeq	r0, r0, #0
    2544:	06196e91 			; <UNDEFINED> instruction: 0x06196e91
    2548:	01000015 	tsteq	r0, r5, lsl r0
    254c:	00008c8a 	andeq	r8, r0, sl, lsl #25
    2550:	6d910200 	lfmvs	f0, 4, [r1]
    2554:	3f041a00 	svccc	0x00041a00
    2558:	1b000004 	blne	2570 <startup-0x1fffda90>
    255c:	00001620 	andeq	r1, r0, r0, lsr #12
    2560:	22147601 	andscs	r7, r4, #1048576	; 0x100000
    2564:	00242000 	eoreq	r2, r4, r0
    2568:	9c010000 	stcls	0, cr0, [r1], {-0}
    256c:	0014c718 	andseq	ip, r4, r8, lsl r7
    2570:	ac760100 	ldfgee	f0, [r6], #-0
    2574:	02000000 	andeq	r0, r0, #0
    2578:	00007491 	muleq	r0, r1, r4
    257c:	000001a9 	andeq	r0, r0, r9, lsr #3
    2580:	06390004 	ldrteq	r0, [r9], -r4
    2584:	01040000 	mrseq	r0, (UNDEF: 4)
    2588:	00000629 	andeq	r0, r0, r9, lsr #12
    258c:	0016490c 	andseq	r4, r6, ip, lsl #18
    2590:	00057d00 	andeq	r7, r5, r0, lsl #26
    2594:	0023d800 	eoreq	sp, r3, r0, lsl #16
    2598:	00012820 	andeq	r2, r1, r0, lsr #16
    259c:	0009f500 	andeq	pc, r9, r0, lsl #10
    25a0:	06010200 	streq	r0, [r1], -r0, lsl #4
    25a4:	0000040b 	andeq	r0, r0, fp, lsl #8
    25a8:	0001e303 	andeq	lr, r1, r3, lsl #6
    25ac:	372b0200 	strcc	r0, [fp, -r0, lsl #4]!
    25b0:	02000000 	andeq	r0, r0, #0
    25b4:	04090801 	streq	r0, [r9], #-2049	; 0xfffff7ff
    25b8:	02020000 	andeq	r0, r2, #0
    25bc:	000ff005 	andeq	pc, pc, r5
    25c0:	07020200 	streq	r0, [r2, -r0, lsl #4]
    25c4:	00001174 	andeq	r1, r0, r4, ror r1
    25c8:	f8050402 			; <UNDEFINED> instruction: 0xf8050402
    25cc:	02000009 	andeq	r0, r0, #9
    25d0:	0d4d0704 	stcleq	7, cr0, [sp, #-16]
    25d4:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    25d8:	0009f305 	andeq	pc, r9, r5, lsl #6
    25dc:	07080200 	streq	r0, [r8, -r0, lsl #4]
    25e0:	00000d48 	andeq	r0, r0, r8, asr #26
    25e4:	69050404 	stmdbvs	r5, {r2, sl}
    25e8:	0200746e 	andeq	r7, r0, #1845493760	; 0x6e000000
    25ec:	0d520704 	ldcleq	7, cr0, [r2, #-16]
    25f0:	e5030000 	str	r0, [r3, #-0]
    25f4:	03000001 	movweq	r0, #1
    25f8:	00002c18 	andeq	r2, r0, r8, lsl ip
    25fc:	04670500 	strbteq	r0, [r7], #-1280	; 0xfffffb00
    2600:	0000b90c 	andeq	fp, r0, ip, lsl #18
    2604:	16b10600 	ldrtne	r0, [r1], r0, lsl #12
    2608:	0e040000 	cdpeq	0, 0, cr0, cr4, cr0, {0}
    260c:	000000b9 	strheq	r0, [r0], -r9
    2610:	16430600 	strbne	r0, [r3], -r0, lsl #12
    2614:	11040000 	mrsne	r0, (UNDEF: 4)
    2618:	00000076 	andeq	r0, r0, r6, ror r0
    261c:	6e690764 	cdpvs	7, 6, cr0, cr9, cr4, {3}
    2620:	76140400 	ldrvc	r0, [r4], -r0, lsl #8
    2624:	65000000 	strvs	r0, [r0, #-0]
    2628:	74756f07 	ldrbtvc	r6, [r5], #-3847	; 0xfffff0f9
    262c:	76170400 	ldrvc	r0, [r7], -r0, lsl #8
    2630:	66000000 	strvs	r0, [r0], -r0
    2634:	00760800 	rsbseq	r0, r6, r0, lsl #16
    2638:	00c90000 	sbceq	r0, r9, r0
    263c:	6f090000 	svcvs	0x00090000
    2640:	63000000 	movwvs	r0, #0
    2644:	16940300 	ldrne	r0, [r4], r0, lsl #6
    2648:	18040000 	stmdane	r4, {}	; <UNPREDICTABLE>
    264c:	00000081 	andeq	r0, r0, r1, lsl #1
    2650:	0016bb0a 	andseq	fp, r6, sl, lsl #22
    2654:	762d0100 	strtvc	r0, [sp], -r0, lsl #2
    2658:	a2000000 	andge	r0, r0, #0
    265c:	5e200024 	cdppl	0, 2, cr0, cr0, cr4, {1}
    2660:	01000000 	mrseq	r0, (UNDEF: 0)
    2664:	00010a9c 	muleq	r1, ip, sl
    2668:	16d00b00 	ldrbne	r0, [r0], r0, lsl #22
    266c:	2d010000 	stccs	0, cr0, [r1, #-0]
    2670:	0000010a 	andeq	r0, r0, sl, lsl #2
    2674:	0b749102 	bleq	1d26a84 <startup-0x1e2d957c>
    2678:	000016ac 	andeq	r1, r0, ip, lsr #13
    267c:	01102d01 	tsteq	r0, r1, lsl #26
    2680:	91020000 	mrsls	r0, (UNDEF: 2)
    2684:	040c0070 	streq	r0, [ip], #-112	; 0xffffff90
    2688:	000000c9 	andeq	r0, r0, r9, asr #1
    268c:	0076040c 	rsbseq	r0, r6, ip, lsl #8
    2690:	990d0000 	stmdbls	sp, {}	; <UNPREDICTABLE>
    2694:	01000016 	tsteq	r0, r6, lsl r0
    2698:	0024621f 	eoreq	r6, r4, pc, lsl r2
    269c:	00004020 	andeq	r4, r0, r0, lsr #32
    26a0:	569c0100 	ldrpl	r0, [ip], r0, lsl #2
    26a4:	0b000001 	bleq	26b0 <startup-0x1fffd950>
    26a8:	000016d0 	ldrdeq	r1, [r0], -r0
    26ac:	010a1f01 	tsteq	sl, r1, lsl #30
    26b0:	91020000 	mrsls	r0, (UNDEF: 2)
    26b4:	16b60b6c 	ldrtne	r0, [r6], ip, ror #22
    26b8:	1f010000 	svcne	0x00010000
    26bc:	00000076 	andeq	r0, r0, r6, ror r0
    26c0:	0e6b9102 	lgneqe	f1, f2
    26c4:	000016d7 	ldrdeq	r1, [r0], -r7
    26c8:	00762101 	rsbseq	r2, r6, r1, lsl #2
    26cc:	91020000 	mrsls	r0, (UNDEF: 2)
    26d0:	390a0077 	stmdbcc	sl, {r0, r1, r2, r4, r5, r6}
    26d4:	01000016 	tsteq	r0, r6, lsl r0
    26d8:	0000760c 	andeq	r7, r0, ip, lsl #12
    26dc:	00240000 	eoreq	r0, r4, r0
    26e0:	00006220 	andeq	r6, r0, r0, lsr #4
    26e4:	8c9c0100 	ldfhis	f0, [ip], {0}
    26e8:	0b000001 	bleq	26f4 <startup-0x1fffd90c>
    26ec:	000016d0 	ldrdeq	r1, [r0], -r0
    26f0:	010a0c01 	tsteq	sl, r1, lsl #24
    26f4:	91020000 	mrsls	r0, (UNDEF: 2)
    26f8:	16b60b74 			; <UNDEFINED> instruction: 0x16b60b74
    26fc:	0c010000 	stceq	0, cr0, [r1], {-0}
    2700:	00000076 	andeq	r0, r0, r6, ror r0
    2704:	00739102 	rsbseq	r9, r3, r2, lsl #2
    2708:	0016c50f 	andseq	ip, r6, pc, lsl #10
    270c:	d8040100 	stmdale	r4, {r8}
    2710:	28200023 	stmdacs	r0!, {r0, r1, r5}
    2714:	01000000 	mrseq	r0, (UNDEF: 0)
    2718:	16d00b9c 			; <UNDEFINED> instruction: 0x16d00b9c
    271c:	04010000 	streq	r0, [r1], #-0
    2720:	0000010a 	andeq	r0, r0, sl, lsl #2
    2724:	00749102 	rsbseq	r9, r4, r2, lsl #2
    2728:	0009cc00 	andeq	ip, r9, r0, lsl #24
    272c:	22000400 	andcs	r0, r0, #0, 8
    2730:	04000007 	streq	r0, [r0], #-7
    2734:	00062901 	andeq	r2, r6, r1, lsl #18
    2738:	1ab20c00 	bne	fec85740 <GPIO_Ports+0xdec826d0>
    273c:	057d0000 	ldrbeq	r0, [sp, #-0]!
    2740:	25000000 	strcs	r0, [r0, #-0]
    2744:	09fe2000 	ldmibeq	lr!, {sp}^
    2748:	0b470000 	bleq	11c2750 <startup-0x1ee3d8b0>
    274c:	01020000 	mrseq	r0, (UNDEF: 2)
    2750:	00040b06 	andeq	r0, r4, r6, lsl #22
    2754:	01e30300 	mvneq	r0, r0, lsl #6
    2758:	2b020000 	blcs	82760 <startup-0x1ff7d8a0>
    275c:	00000037 	andeq	r0, r0, r7, lsr r0
    2760:	09080102 	stmdbeq	r8, {r1, r8}
    2764:	02000004 	andeq	r0, r0, #4
    2768:	0ff00502 	svceq	0x00f00502
    276c:	3d030000 	stccc	0, cr0, [r3, #-0]
    2770:	02000005 	andeq	r0, r0, #5
    2774:	00005039 	andeq	r5, r0, r9, lsr r0
    2778:	07020200 	streq	r0, [r2, -r0, lsl #4]
    277c:	00001174 	andeq	r1, r0, r4, ror r1
    2780:	00120e03 	andseq	r0, r2, r3, lsl #28
    2784:	624d0200 	subvs	r0, sp, #0, 4
    2788:	02000000 	andeq	r0, r0, #0
    278c:	09f80504 	ldmibeq	r8!, {r2, r8, sl}^
    2790:	a1030000 	mrsge	r0, (UNDEF: 3)
    2794:	02000009 	andeq	r0, r0, #9
    2798:	0000744f 	andeq	r7, r0, pc, asr #8
    279c:	07040200 	streq	r0, [r4, -r0, lsl #4]
    27a0:	00000d4d 	andeq	r0, r0, sp, asr #26
    27a4:	f3050802 	vsub.i8	d0, d5, d2
    27a8:	02000009 	andeq	r0, r0, #9
    27ac:	0d480708 	stcleq	7, cr0, [r8, #-32]	; 0xffffffe0
    27b0:	04040000 	streq	r0, [r4], #-0
    27b4:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
    27b8:	07040200 	streq	r0, [r4, -r0, lsl #4]
    27bc:	00000d52 	andeq	r0, r0, r2, asr sp
    27c0:	0001e503 	andeq	lr, r1, r3, lsl #10
    27c4:	2c180300 	ldccs	3, cr0, [r8], {-0}
    27c8:	03000000 	movweq	r0, #0
    27cc:	0000053f 	andeq	r0, r0, pc, lsr r5
    27d0:	00452403 	subeq	r2, r5, r3, lsl #8
    27d4:	a2050000 	andge	r0, r5, #0
    27d8:	03000000 	movweq	r0, #0
    27dc:	00001210 	andeq	r1, r0, r0, lsl r2
    27e0:	00572c03 	subseq	r2, r7, r3, lsl #24
    27e4:	b2050000 	andlt	r0, r5, #0
    27e8:	03000000 	movweq	r0, #0
    27ec:	000009a3 	andeq	r0, r0, r3, lsr #19
    27f0:	00693003 	rsbeq	r3, r9, r3
    27f4:	95060000 	strls	r0, [r6, #-0]
    27f8:	04000010 	streq	r0, [r0], #-16
    27fc:	00bd06fa 	ldrshteq	r0, [sp], sl
    2800:	a0070000 	andge	r0, r7, r0
    2804:	05000008 	streq	r0, [r0, #-8]
    2808:	0000c23b 	andeq	ip, r0, fp, lsr r2
    280c:	01070800 	tsteq	r7, r0, lsl #16
    2810:	00000037 	andeq	r0, r0, r7, lsr r0
    2814:	ff035d06 			; <UNDEFINED> instruction: 0xff035d06
    2818:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    281c:	000012f5 	strdeq	r1, [r0], -r5
    2820:	45530a00 	ldrbmi	r0, [r3, #-2560]	; 0xfffff600
    2824:	00010054 	andeq	r0, r1, r4, asr r0
    2828:	000a5b0b 	andeq	r5, sl, fp, lsl #22
    282c:	035d0600 	cmpeq	sp, #0, 12
    2830:	000000e4 	andeq	r0, r0, r4, ror #1
    2834:	000b1c0b 	andeq	r1, fp, fp, lsl #24
    2838:	035d0600 	cmpeq	sp, #0, 12
    283c:	000000e4 	andeq	r0, r0, r4, ror #1
    2840:	37010708 	strcc	r0, [r1, -r8, lsl #14]
    2844:	06000000 	streq	r0, [r0], -r0
    2848:	0132035f 	teqeq	r2, pc, asr r3
    284c:	31090000 	mrscc	r0, (UNDEF: 9)
    2850:	0000000a 	andeq	r0, r0, sl
    2854:	00104a09 	andseq	r4, r0, r9, lsl #20
    2858:	0b000100 	bleq	2c60 <startup-0x1fffd3a0>
    285c:	00000d12 	andeq	r0, r0, r2, lsl sp
    2860:	17035f06 	strne	r5, [r3, -r6, lsl #30]
    2864:	0c000001 	stceq	0, cr0, [r0], {1}
    2868:	0773061c 			; <UNDEFINED> instruction: 0x0773061c
    286c:	000001fc 	strdeq	r0, [r0], -ip
    2870:	0052530d 	subseq	r5, r2, sp, lsl #6
    2874:	ad077506 	cfstr32ge	mvfx7, [r7, #-24]	; 0xffffffe8
    2878:	00000000 	andeq	r0, r0, r0
    287c:	0003f50e 	andeq	pc, r3, lr, lsl #10
    2880:	07760600 	ldrbeq	r0, [r6, -r0, lsl #12]!
    2884:	000000a2 	andeq	r0, r0, r2, lsr #1
    2888:	52440d02 	subpl	r0, r4, #2, 26	; 0x80
    288c:	07770600 	ldrbeq	r0, [r7, -r0, lsl #12]!
    2890:	000000ad 	andeq	r0, r0, sp, lsr #1
    2894:	03ff0e04 	mvnseq	r0, #4, 28	; 0x40
    2898:	78060000 	stmdavc	r6, {}	; <UNPREDICTABLE>
    289c:	0000a207 	andeq	sl, r0, r7, lsl #4
    28a0:	420d0600 	andmi	r0, sp, #0, 12
    28a4:	06005252 			; <UNDEFINED> instruction: 0x06005252
    28a8:	00ad0779 	adceq	r0, sp, r9, ror r7
    28ac:	0e080000 	cdpeq	0, 0, cr0, cr8, cr0, {0}
    28b0:	00000483 	andeq	r0, r0, r3, lsl #9
    28b4:	a2077a06 	andge	r7, r7, #24576	; 0x6000
    28b8:	0a000000 	beq	28c0 <startup-0x1fffd740>
    28bc:	3152430d 	cmpcc	r2, sp, lsl #6
    28c0:	077b0600 	ldrbeq	r0, [fp, -r0, lsl #12]!
    28c4:	000000ad 	andeq	r0, r0, sp, lsr #1
    28c8:	048d0e0c 	streq	r0, [sp], #3596	; 0xe0c
    28cc:	7c060000 	stcvc	0, cr0, [r6], {-0}
    28d0:	0000a207 	andeq	sl, r0, r7, lsl #4
    28d4:	430d0e00 	movwmi	r0, #56832	; 0xde00
    28d8:	06003252 			; <UNDEFINED> instruction: 0x06003252
    28dc:	00ad077d 	adceq	r0, sp, sp, ror r7
    28e0:	0e100000 	cdpeq	0, 1, cr0, cr0, cr0, {0}
    28e4:	00000429 	andeq	r0, r0, r9, lsr #8
    28e8:	a2077e06 	andge	r7, r7, #6, 28	; 0x60
    28ec:	12000000 	andne	r0, r0, #0
    28f0:	3352430d 	cmpcc	r2, #872415232	; 0x34000000
    28f4:	077f0600 	ldrbeq	r0, [pc, -r0, lsl #12]!
    28f8:	000000ad 	andeq	r0, r0, sp, lsr #1
    28fc:	04330e14 	ldrteq	r0, [r3], #-3604	; 0xfffff1ec
    2900:	80060000 	andhi	r0, r6, r0
    2904:	0000a207 	andeq	sl, r0, r7, lsl #4
    2908:	fb0e1600 	blx	388112 <startup-0x1fc77eee>
    290c:	06000016 			; <UNDEFINED> instruction: 0x06000016
    2910:	00ad0781 	adceq	r0, sp, r1, lsl #15
    2914:	0e180000 	cdpeq	0, 1, cr0, cr8, cr0, {0}
    2918:	0000043d 	andeq	r0, r0, sp, lsr r4
    291c:	a2078206 	andge	r8, r7, #1610612736	; 0x60000000
    2920:	1a000000 	bne	2928 <startup-0x1fffd6d8>
    2924:	17670b00 	strbne	r0, [r7, -r0, lsl #22]!
    2928:	83060000 	movwhi	r0, #24576	; 0x6000
    292c:	00013e07 	andeq	r3, r1, r7, lsl #28
    2930:	07100f00 	ldreq	r0, [r0, -r0, lsl #30]
    2934:	00025936 	andeq	r5, r2, r6, lsr r9
    2938:	17ed1000 	strbne	r1, [sp, r0]!
    293c:	38070000 	stmdacc	r7, {}	; <UNPREDICTABLE>
    2940:	000000c2 	andeq	r0, r0, r2, asr #1
    2944:	17c11000 	strbne	r1, [r1, r0]
    2948:	3e070000 	cdpcc	0, 0, cr0, cr7, cr0, {0}
    294c:	000000a2 	andeq	r0, r0, r2, lsr #1
    2950:	17751004 	ldrbne	r1, [r5, -r4]!
    2954:	41070000 	mrsmi	r0, (UNDEF: 7)
    2958:	000000a2 	andeq	r0, r0, r2, lsr #1
    295c:	188b1006 	stmne	fp, {r1, r2, ip}
    2960:	44070000 	strmi	r0, [r7], #-0
    2964:	000000a2 	andeq	r0, r0, r2, lsr #1
    2968:	195f1008 	ldmdbne	pc, {r3, ip}^	; <UNPREDICTABLE>
    296c:	4b070000 	blmi	1c2974 <startup-0x1fe3d68c>
    2970:	000000a2 	andeq	r0, r0, r2, lsr #1
    2974:	1932100a 	ldmdbne	r2!, {r1, r3, ip}
    2978:	4e070000 	cdpmi	0, 0, cr0, cr7, cr0, {0}
    297c:	000000a2 	andeq	r0, r0, r2, lsr #1
    2980:	fd03000c 	stc2	0, cr0, [r3, #-48]	; 0xffffffd0
    2984:	07000018 	smladeq	r0, r8, r0, r0
    2988:	00020851 	andeq	r0, r2, r1, asr r8
    298c:	07080f00 	streq	r0, [r8, -r0, lsl #30]
    2990:	00029d57 	andeq	r9, r2, r7, asr sp
    2994:	19c61000 	stmibne	r6, {ip}^
    2998:	5a070000 	bpl	1c29a0 <startup-0x1fe3d660>
    299c:	000000a2 	andeq	r0, r0, r2, lsr #1
    29a0:	1aa01000 	bne	fe8069a8 <GPIO_Ports+0xde803938>
    29a4:	5d070000 	stcpl	0, cr0, [r7, #-0]
    29a8:	000000a2 	andeq	r0, r0, r2, lsr #1
    29ac:	16f01002 	ldrbtne	r1, [r0], r2
    29b0:	60070000 	andvs	r0, r7, r0
    29b4:	000000a2 	andeq	r0, r0, r2, lsr #1
    29b8:	17df1004 	ldrbne	r1, [pc, r4]
    29bc:	63070000 	movwvs	r0, #28672	; 0x7000
    29c0:	000000a2 	andeq	r0, r0, r2, lsr #1
    29c4:	84030006 	strhi	r0, [r3], #-6
    29c8:	07000017 	smladeq	r0, r7, r0, r0
    29cc:	00026466 	andeq	r6, r2, r6, ror #8
    29d0:	08100f00 	ldmdaeq	r0, {r8, r9, sl, fp}
    29d4:	0002e130 	andeq	lr, r2, r0, lsr r1
    29d8:	11c11000 	bicne	r1, r1, r0
    29dc:	32080000 	andcc	r0, r8, #0
    29e0:	000000c2 	andeq	r0, r0, r2, asr #1
    29e4:	009a1000 	addseq	r1, sl, r0
    29e8:	33080000 	movwcc	r0, #32768	; 0x8000
    29ec:	000000c2 	andeq	r0, r0, r2, asr #1
    29f0:	05da1004 	ldrbeq	r1, [sl, #4]
    29f4:	34080000 	strcc	r0, [r8], #-0
    29f8:	000000c2 	andeq	r0, r0, r2, asr #1
    29fc:	05501008 	ldrbeq	r1, [r0, #-8]
    2a00:	35080000 	strcc	r0, [r8, #-0]
    2a04:	000000c2 	andeq	r0, r0, r2, asr #1
    2a08:	b903000c 	stmdblt	r3, {r2, r3}
    2a0c:	0800000f 	stmdaeq	r0, {r0, r1, r2, r3}
    2a10:	0002a836 	andeq	sl, r2, r6, lsr r8
    2a14:	18141100 	ldmdane	r4, {r8, ip}
    2a18:	ac010000 	stcge	0, cr0, [r1], {-0}
    2a1c:	002eb605 	eoreq	fp, lr, r5, lsl #12
    2a20:	00004820 	andeq	r4, r0, r0, lsr #16
    2a24:	3f9c0100 	svccc	0x009c0100
    2a28:	12000003 	andne	r0, r0, #3
    2a2c:	0000192b 	andeq	r1, r0, fp, lsr #18
    2a30:	3f05ac01 	svccc	0x0005ac01
    2a34:	02000003 	andeq	r0, r0, #3
    2a38:	1d126c91 	ldcne	12, cr6, [r2, #-580]	; 0xfffffdbc
    2a3c:	0100001a 	tsteq	r0, sl, lsl r0
    2a40:	00a205ac 	adceq	r0, r2, ip, lsr #11
    2a44:	91020000 	mrsls	r0, (UNDEF: 2)
    2a48:	1978136a 	ldmdbne	r8!, {r1, r3, r5, r6, r8, r9, ip}^
    2a4c:	ae010000 	cdpge	0, 0, cr0, cr1, cr0, {0}
    2a50:	0000a205 	andeq	sl, r0, r5, lsl #4
    2a54:	76910200 	ldrvc	r0, [r1], r0, lsl #4
    2a58:	001aab13 	andseq	sl, sl, r3, lsl fp
    2a5c:	05ae0100 	streq	r0, [lr, #256]!	; 0x100
    2a60:	000000a2 	andeq	r0, r0, r2, lsr #1
    2a64:	00749102 	rsbseq	r9, r4, r2, lsl #2
    2a68:	01fc0414 	mvnseq	r0, r4, lsl r4
    2a6c:	96150000 	ldrls	r0, [r5], -r0
    2a70:	01000019 	tsteq	r0, r9, lsl r0
    2a74:	010b0562 	tsteq	fp, r2, ror #10
    2a78:	2dec0000 	stclcs	0, cr0, [ip]
    2a7c:	00ca2000 	sbceq	r2, sl, r0
    2a80:	9c010000 	stcls	0, cr0, [r1], {-0}
    2a84:	000003ba 			; <UNDEFINED> instruction: 0x000003ba
    2a88:	00192b12 	andseq	r2, r9, r2, lsl fp
    2a8c:	05620100 	strbeq	r0, [r2, #-256]!	; 0xffffff00
    2a90:	0000033f 	andeq	r0, r0, pc, lsr r3
    2a94:	12649102 	rsbne	r9, r4, #-2147483648	; 0x80000000
    2a98:	00001a1d 	andeq	r1, r0, sp, lsl sl
    2a9c:	a2056201 	andge	r6, r5, #268435456	; 0x10000000
    2aa0:	02000000 	andeq	r0, r0, #0
    2aa4:	78136291 	ldmdavc	r3, {r0, r4, r7, r9, sp, lr}
    2aa8:	01000019 	tsteq	r0, r9, lsl r0
    2aac:	00c20564 	sbceq	r0, r2, r4, ror #10
    2ab0:	91020000 	mrsls	r0, (UNDEF: 2)
    2ab4:	1aab136c 	bne	feac786c <GPIO_Ports+0xdeac47fc>
    2ab8:	64010000 	strvs	r0, [r1], #-0
    2abc:	0000c205 	andeq	ip, r0, r5, lsl #4
    2ac0:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    2ac4:	001b4313 	andseq	r4, fp, r3, lsl r3
    2ac8:	05640100 	strbeq	r0, [r4, #-256]!	; 0xffffff00
    2acc:	000000c2 	andeq	r0, r0, r2, asr #1
    2ad0:	13689102 	cmnne	r8, #-2147483648	; 0x80000000
    2ad4:	00001040 	andeq	r1, r0, r0, asr #32
    2ad8:	0b056501 	bleq	15bee4 <startup-0x1fea411c>
    2adc:	02000001 	andeq	r0, r0, #1
    2ae0:	11007391 			; <UNDEFINED> instruction: 0x11007391
    2ae4:	000018b9 			; <UNDEFINED> instruction: 0x000018b9
    2ae8:	ca054001 	bgt	152af4 <startup-0x1fead50c>
    2aec:	2220002d 	eorcs	r0, r0, #45	; 0x2d
    2af0:	01000000 	mrseq	r0, (UNDEF: 0)
    2af4:	0003ef9c 	muleq	r3, ip, pc	; <UNPREDICTABLE>
    2af8:	192b1200 	stmdbne	fp!, {r9, ip}
    2afc:	40010000 	andmi	r0, r1, r0
    2b00:	00033f05 	andeq	r3, r3, r5, lsl #30
    2b04:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    2b08:	00185d12 	andseq	r5, r8, r2, lsl sp
    2b0c:	05400100 	strbeq	r0, [r0, #-256]	; 0xffffff00
    2b10:	000000a2 	andeq	r0, r0, r2, lsr #1
    2b14:	00729102 	rsbseq	r9, r2, r2, lsl #2
    2b18:	001a0915 	andseq	r0, sl, r5, lsl r9
    2b1c:	050f0100 	streq	r0, [pc, #-256]	; 2a24 <startup-0x1fffd5dc>
    2b20:	000000ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    2b24:	20002d82 	andcs	r2, r0, r2, lsl #27
    2b28:	00000048 	andeq	r0, r0, r8, asr #32
    2b2c:	04379c01 	ldrteq	r9, [r7], #-3073	; 0xfffff3ff
    2b30:	2b120000 	blcs	482b38 <startup-0x1fb7d4c8>
    2b34:	01000019 	tsteq	r0, r9, lsl r0
    2b38:	033f050f 	teqeq	pc, #62914560	; 0x3c00000
    2b3c:	91020000 	mrsls	r0, (UNDEF: 2)
    2b40:	185d126c 	ldmdane	sp, {r2, r3, r5, r6, r9, ip}^
    2b44:	0f010000 	svceq	0x00010000
    2b48:	0000a205 	andeq	sl, r0, r5, lsl #4
    2b4c:	6a910200 	bvs	fe443354 <GPIO_Ports+0xde4402e4>
    2b50:	00104013 	andseq	r4, r0, r3, lsl r0
    2b54:	05110100 	ldreq	r0, [r1, #-256]	; 0xffffff00
    2b58:	000000ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    2b5c:	00779102 	rsbseq	r9, r7, r2, lsl #2
    2b60:	00190f11 	andseq	r0, r9, r1, lsl pc
    2b64:	04cf0100 	strbeq	r0, [pc], #256	; 2b6c <startup-0x1fffd494>
    2b68:	20002ce8 	andcs	r2, r0, r8, ror #25
    2b6c:	0000009a 	muleq	r0, sl, r0
    2b70:	04b79c01 	ldrteq	r9, [r7], #3073	; 0xc01
    2b74:	2b120000 	blcs	482b7c <startup-0x1fb7d484>
    2b78:	01000019 	tsteq	r0, r9, lsl r0
    2b7c:	033f04cf 	teqeq	pc, #-822083584	; 0xcf000000
    2b80:	91020000 	mrsls	r0, (UNDEF: 2)
    2b84:	1a1d1264 	bne	74751c <startup-0x1f8b8ae4>
    2b88:	cf010000 	svcgt	0x00010000
    2b8c:	0000a204 	andeq	sl, r0, r4, lsl #4
    2b90:	62910200 	addsvs	r0, r1, #0, 4
    2b94:	000b4312 	andeq	r4, fp, r2, lsl r3
    2b98:	04cf0100 	strbeq	r0, [pc], #256	; 2ba0 <startup-0x1fffd460>
    2b9c:	00000132 	andeq	r0, r0, r2, lsr r1
    2ba0:	13619102 	cmnne	r1, #-2147483648	; 0x80000000
    2ba4:	00001b43 	andeq	r1, r0, r3, asr #22
    2ba8:	c204d101 	andgt	sp, r4, #1073741824	; 0x40000000
    2bac:	02000000 	andeq	r0, r0, #0
    2bb0:	79137091 	ldmdbvc	r3, {r0, r4, r7, ip, sp, lr}
    2bb4:	01000019 	tsteq	r0, r9, lsl r0
    2bb8:	00c204d1 	ldrdeq	r0, [r2], #65	; 0x41
    2bbc:	91020000 	mrsls	r0, (UNDEF: 2)
    2bc0:	1aab136c 	bne	feac7978 <GPIO_Ports+0xdeac4908>
    2bc4:	d1010000 	mrsle	r0, (UNDEF: 1)
    2bc8:	0000c204 	andeq	ip, r0, r4, lsl #4
    2bcc:	68910200 	ldmvs	r1, {r9}
    2bd0:	0018ae13 	andseq	sl, r8, r3, lsl lr
    2bd4:	04d20100 	ldrbeq	r0, [r2], #256	; 0x100
    2bd8:	000000c2 	andeq	r0, r0, r2, asr #1
    2bdc:	00749102 	rsbseq	r9, r4, r2, lsl #2
    2be0:	0017d211 	andseq	sp, r7, r1, lsl r2
    2be4:	044b0100 	strbeq	r0, [fp], #-256	; 0xffffff00
    2be8:	20002c96 	mulcs	r0, r6, ip
    2bec:	00000052 	andeq	r0, r0, r2, asr r0
    2bf0:	04fb9c01 	ldrbteq	r9, [fp], #3073	; 0xc01
    2bf4:	2b120000 	blcs	482bfc <startup-0x1fb7d404>
    2bf8:	01000019 	tsteq	r0, r9, lsl r0
    2bfc:	033f044b 	teqeq	pc, #1258291200	; 0x4b000000
    2c00:	91020000 	mrsls	r0, (UNDEF: 2)
    2c04:	191e1274 	ldmdbne	lr, {r2, r4, r5, r6, r9, ip}
    2c08:	4b010000 	blmi	42c10 <startup-0x1ffbd3f0>
    2c0c:	0000a204 	andeq	sl, r0, r4, lsl #4
    2c10:	72910200 	addsvc	r0, r1, #0, 4
    2c14:	000b4312 	andeq	r4, fp, r2, lsl r3
    2c18:	044b0100 	strbeq	r0, [fp], #-256	; 0xffffff00
    2c1c:	00000132 	andeq	r0, r0, r2, lsr r1
    2c20:	00719102 	rsbseq	r9, r1, r2, lsl #2
    2c24:	0019d211 	andseq	sp, r9, r1, lsl r2
    2c28:	041d0100 	ldreq	r0, [sp], #-256	; 0xffffff00
    2c2c:	20002c56 	andcs	r2, r0, r6, asr ip
    2c30:	00000040 	andeq	r0, r0, r0, asr #32
    2c34:	05309c01 	ldreq	r9, [r0, #-3073]!	; 0xfffff3ff
    2c38:	2b120000 	blcs	482c40 <startup-0x1fb7d3c0>
    2c3c:	01000019 	tsteq	r0, r9, lsl r0
    2c40:	033f041d 	teqeq	pc, #486539264	; 0x1d000000
    2c44:	91020000 	mrsls	r0, (UNDEF: 2)
    2c48:	0b431274 	bleq	10c7620 <startup-0x1ef389e0>
    2c4c:	1d010000 	stcne	0, cr0, [r1, #-0]
    2c50:	00013204 	andeq	r3, r1, r4, lsl #4
    2c54:	73910200 	orrsvc	r0, r1, #0, 4
    2c58:	19b51100 	ldmibne	r5!, {r8, ip}
    2c5c:	0b010000 	bleq	42c64 <startup-0x1ffbd39c>
    2c60:	002c1e04 	eoreq	r1, ip, r4, lsl #28
    2c64:	00003820 	andeq	r3, r0, r0, lsr #16
    2c68:	659c0100 	ldrvs	r0, [ip, #256]	; 0x100
    2c6c:	12000005 	andne	r0, r0, #5
    2c70:	0000192b 	andeq	r1, r0, fp, lsr #18
    2c74:	3f040b01 	svccc	0x00040b01
    2c78:	02000003 	andeq	r0, r0, #3
    2c7c:	fc127491 	ldc2	4, cr7, [r2], {145}	; 0x91
    2c80:	01000017 	tsteq	r0, r7, lsl r0
    2c84:	00a2040b 	adceq	r0, r2, fp, lsl #8
    2c88:	91020000 	mrsls	r0, (UNDEF: 2)
    2c8c:	f2110072 	vqadd.s16	q0, <illegal reg q0.5>, q9
    2c90:	01000019 	tsteq	r0, r9, lsl r0
    2c94:	2bde03c4 	blcs	ff783bac <GPIO_Ports+0xdf780b3c>
    2c98:	00402000 	subeq	r2, r0, r0
    2c9c:	9c010000 	stcls	0, cr0, [r1], {-0}
    2ca0:	0000059a 	muleq	r0, sl, r5
    2ca4:	00192b12 	andseq	r2, r9, r2, lsl fp
    2ca8:	03c40100 	biceq	r0, r4, #0, 2
    2cac:	0000033f 	andeq	r0, r0, pc, lsr r3
    2cb0:	12749102 	rsbsne	r9, r4, #-2147483648	; 0x80000000
    2cb4:	00000b43 	andeq	r0, r0, r3, asr #22
    2cb8:	3203c401 	andcc	ip, r3, #16777216	; 0x1000000
    2cbc:	02000001 	andeq	r0, r0, #1
    2cc0:	11007391 			; <UNDEFINED> instruction: 0x11007391
    2cc4:	0000194c 	andeq	r1, r0, ip, asr #18
    2cc8:	9e03ab01 	vmlals.f64	d10, d3, d1
    2ccc:	4020002b 	eormi	r0, r0, fp, lsr #32
    2cd0:	01000000 	mrseq	r0, (UNDEF: 0)
    2cd4:	0005cf9c 	muleq	r5, ip, pc	; <UNPREDICTABLE>
    2cd8:	192b1200 	stmdbne	fp!, {r9, ip}
    2cdc:	ab010000 	blge	42ce4 <startup-0x1ffbd31c>
    2ce0:	00033f03 	andeq	r3, r3, r3, lsl #30
    2ce4:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    2ce8:	000b4312 	andeq	r4, fp, r2, lsl r3
    2cec:	03ab0100 			; <UNDEFINED> instruction: 0x03ab0100
    2cf0:	00000132 	andeq	r0, r0, r2, lsr r1
    2cf4:	00739102 	rsbseq	r9, r3, r2, lsl #2
    2cf8:	0018da11 	andseq	sp, r8, r1, lsl sl
    2cfc:	03980100 	orrseq	r0, r8, #0, 2
    2d00:	20002b60 	andcs	r2, r0, r0, ror #22
    2d04:	0000003e 	andeq	r0, r0, lr, lsr r0
    2d08:	06049c01 	streq	r9, [r4], -r1, lsl #24
    2d0c:	2b120000 	blcs	482d14 <startup-0x1fb7d2ec>
    2d10:	01000019 	tsteq	r0, r9, lsl r0
    2d14:	033f0398 	teqeq	pc, #152, 6	; 0x60000002
    2d18:	91020000 	mrsls	r0, (UNDEF: 2)
    2d1c:	182c1274 	stmdane	ip!, {r2, r4, r5, r6, r9, ip}
    2d20:	98010000 	stmdals	r1, {}	; <UNPREDICTABLE>
    2d24:	00009703 	andeq	r9, r0, r3, lsl #14
    2d28:	73910200 	orrsvc	r0, r1, #0, 4
    2d2c:	1a6b1100 	bne	1ac7134 <startup-0x1e538ecc>
    2d30:	44010000 	strmi	r0, [r1], #-0
    2d34:	002b2003 	eoreq	r2, fp, r3
    2d38:	00004020 	andeq	r4, r0, r0, lsr #32
    2d3c:	399c0100 	ldmibcc	ip, {r8}
    2d40:	12000006 	andne	r0, r0, #6
    2d44:	0000192b 	andeq	r1, r0, fp, lsr #18
    2d48:	3f034401 	svccc	0x00034401
    2d4c:	02000003 	andeq	r0, r0, #3
    2d50:	43127491 	tstmi	r2, #-1862270976	; 0x91000000
    2d54:	0100000b 	tsteq	r0, fp
    2d58:	01320344 	teqeq	r2, r4, asr #6
    2d5c:	91020000 	mrsls	r0, (UNDEF: 2)
    2d60:	ed110073 	ldc	0, cr0, [r1, #-460]	; 0xfffffe34
    2d64:	01000018 	tsteq	r0, r8, lsl r0
    2d68:	2b00030f 	blcs	39ac <startup-0x1fffc654>
    2d6c:	00202000 	eoreq	r2, r0, r0
    2d70:	9c010000 	stcls	0, cr0, [r1], {-0}
    2d74:	0000065f 	andeq	r0, r0, pc, asr r6
    2d78:	00192b12 	andseq	r2, r9, r2, lsl fp
    2d7c:	030f0100 	movweq	r0, #61696	; 0xf100
    2d80:	0000033f 	andeq	r0, r0, pc, lsr r3
    2d84:	00749102 	rsbseq	r9, r4, r2, lsl #2
    2d88:	0019a811 	andseq	sl, r9, r1, lsl r8
    2d8c:	02f70100 	rscseq	r0, r7, #0, 2
    2d90:	20002ab8 			; <UNDEFINED> instruction: 0x20002ab8
    2d94:	00000048 	andeq	r0, r0, r8, asr #32
    2d98:	06949c01 	ldreq	r9, [r4], r1, lsl #24
    2d9c:	2b120000 	blcs	482da4 <startup-0x1fb7d25c>
    2da0:	01000019 	tsteq	r0, r9, lsl r0
    2da4:	033f02f7 	teqeq	pc, #1879048207	; 0x7000000f
    2da8:	91020000 	mrsls	r0, (UNDEF: 2)
    2dac:	0b431274 	bleq	10c7784 <startup-0x1ef3887c>
    2db0:	f7010000 			; <UNDEFINED> instruction: 0xf7010000
    2db4:	00013202 	andeq	r3, r1, r2, lsl #4
    2db8:	73910200 	orrsvc	r0, r1, #0, 4
    2dbc:	183c1100 	ldmdane	ip!, {r8, ip}
    2dc0:	e5010000 	str	r0, [r1, #-0]
    2dc4:	002a8002 	eoreq	r8, sl, r2
    2dc8:	00003820 	andeq	r3, r0, r0, lsr #16
    2dcc:	c99c0100 	ldmibgt	ip, {r8}
    2dd0:	12000006 	andne	r0, r0, #6
    2dd4:	0000192b 	andeq	r1, r0, fp, lsr #18
    2dd8:	3f02e501 	svccc	0x0002e501
    2ddc:	02000003 	andeq	r0, r0, #3
    2de0:	36127491 			; <UNDEFINED> instruction: 0x36127491
    2de4:	01000017 	tsteq	r0, r7, lsl r0
    2de8:	00a202e5 	adceq	r0, r2, r5, ror #5
    2dec:	91020000 	mrsls	r0, (UNDEF: 2)
    2df0:	58110072 	ldmdapl	r1, {r1, r4, r5, r6}
    2df4:	0100001a 	tsteq	r0, sl, lsl r0
    2df8:	2a4202a0 	bcs	1083880 <startup-0x1ef7c780>
    2dfc:	003e2000 	eorseq	r2, lr, r0
    2e00:	9c010000 	stcls	0, cr0, [r1], {-0}
    2e04:	000006fe 	strdeq	r0, [r0], -lr
    2e08:	00192b12 	andseq	r2, r9, r2, lsl fp
    2e0c:	02a00100 	adceq	r0, r0, #0, 2
    2e10:	0000033f 	andeq	r0, r0, pc, lsr r3
    2e14:	12749102 	rsbsne	r9, r4, #-2147483648	; 0x80000000
    2e18:	000017b4 			; <UNDEFINED> instruction: 0x000017b4
    2e1c:	a202a001 	andge	sl, r2, #1
    2e20:	02000000 	andeq	r0, r0, #0
    2e24:	11007291 			; <UNDEFINED> instruction: 0x11007291
    2e28:	00001700 	andeq	r1, r0, r0, lsl #14
    2e2c:	02028501 	andeq	r8, r2, #4194304	; 0x400000
    2e30:	4020002a 	eormi	r0, r0, sl, lsr #32
    2e34:	01000000 	mrseq	r0, (UNDEF: 0)
    2e38:	0007339c 	muleq	r7, ip, r3
    2e3c:	192b1200 	stmdbne	fp!, {r9, ip}
    2e40:	85010000 	strhi	r0, [r1, #-0]
    2e44:	00033f02 	andeq	r3, r3, r2, lsl #30
    2e48:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    2e4c:	000b4312 	andeq	r4, fp, r2, lsl r3
    2e50:	02850100 	addeq	r0, r5, #0, 2
    2e54:	00000132 	andeq	r0, r0, r2, lsr r1
    2e58:	00739102 	rsbseq	r9, r3, r2, lsl #2
    2e5c:	0018c911 	andseq	ip, r8, r1, lsl r9
    2e60:	02710100 	rsbseq	r0, r1, #0, 2
    2e64:	200029c8 	andcs	r2, r0, r8, asr #19
    2e68:	0000003a 	andeq	r0, r0, sl, lsr r0
    2e6c:	07689c01 	strbeq	r9, [r8, -r1, lsl #24]!
    2e70:	2b120000 	blcs	482e78 <startup-0x1fb7d188>
    2e74:	01000019 	tsteq	r0, r9, lsl r0
    2e78:	033f0271 	teqeq	pc, #268435463	; 0x10000007
    2e7c:	91020000 	mrsls	r0, (UNDEF: 2)
    2e80:	196a1274 	stmdbne	sl!, {r2, r4, r5, r6, r9, ip}^
    2e84:	71010000 	mrsvc	r0, (UNDEF: 1)
    2e88:	00009702 	andeq	r9, r0, r2, lsl #14
    2e8c:	73910200 	orrsvc	r0, r1, #0, 4
    2e90:	1b311500 	blne	c48298 <startup-0x1f3b7d68>
    2e94:	3d010000 	stccc	0, cr0, [r1, #-0]
    2e98:	0000a202 	andeq	sl, r0, r2, lsl #4
    2e9c:	0029ac00 	eoreq	sl, r9, r0, lsl #24
    2ea0:	00001c20 	andeq	r1, r0, r0, lsr #24
    2ea4:	929c0100 	addsls	r0, ip, #0, 2
    2ea8:	12000007 	andne	r0, r0, #7
    2eac:	0000192b 	andeq	r1, r0, fp, lsr #18
    2eb0:	3f023d01 	svccc	0x00023d01
    2eb4:	02000003 	andeq	r0, r0, #3
    2eb8:	11007491 			; <UNDEFINED> instruction: 0x11007491
    2ebc:	000017a5 	andeq	r1, r0, r5, lsr #15
    2ec0:	88022d01 	stmdahi	r2, {r0, r8, sl, fp, sp}
    2ec4:	24200029 	strtcs	r0, [r0], #-41	; 0xffffffd7
    2ec8:	01000000 	mrseq	r0, (UNDEF: 0)
    2ecc:	0007c79c 	muleq	r7, ip, r7
    2ed0:	192b1200 	stmdbne	fp!, {r9, ip}
    2ed4:	2d010000 	stccs	0, cr0, [r1, #-0]
    2ed8:	00033f02 	andeq	r3, r3, r2, lsl #30
    2edc:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    2ee0:	0017af12 	andseq	sl, r7, r2, lsl pc
    2ee4:	022d0100 	eoreq	r0, sp, #0, 2
    2ee8:	000000a2 	andeq	r0, r0, r2, lsr #1
    2eec:	00729102 	rsbseq	r9, r2, r2, lsl #2
    2ef0:	00175111 	andseq	r5, r7, r1, lsl r1
    2ef4:	01f40100 	mvnseq	r0, r0, lsl #2
    2ef8:	20002940 	andcs	r2, r0, r0, asr #18
    2efc:	00000048 	andeq	r0, r0, r8, asr #32
    2f00:	07fc9c01 	ldrbeq	r9, [ip, r1, lsl #24]!
    2f04:	2b120000 	blcs	482f0c <startup-0x1fb7d0f4>
    2f08:	01000019 	tsteq	r0, r9, lsl r0
    2f0c:	033f01f4 	teqeq	pc, #244, 2	; 0x3d
    2f10:	91020000 	mrsls	r0, (UNDEF: 2)
    2f14:	0b431274 	bleq	10c78ec <startup-0x1ef38714>
    2f18:	f4010000 	vst4.8	{d0-d3}, [r1], r0
    2f1c:	00013201 	andeq	r3, r1, r1, lsl #4
    2f20:	73910200 	orrsvc	r0, r1, #0, 4
    2f24:	197f1100 	ldmdbne	pc!, {r8, ip}^	; <UNPREDICTABLE>
    2f28:	da010000 	ble	42f30 <startup-0x1ffbd0d0>
    2f2c:	0028fa01 	eoreq	pc, r8, r1, lsl #20
    2f30:	00004620 	andeq	r4, r0, r0, lsr #12
    2f34:	319c0100 	orrscc	r0, ip, r0, lsl #2
    2f38:	12000008 	andne	r0, r0, #8
    2f3c:	0000192b 	andeq	r1, r0, fp, lsr #18
    2f40:	3f01da01 	svccc	0x0001da01
    2f44:	02000003 	andeq	r0, r0, #3
    2f48:	43127491 	tstmi	r2, #-1862270976	; 0x91000000
    2f4c:	0100000b 	tsteq	r0, fp
    2f50:	013201da 	teqeq	r2, sl	; <illegal shifter operand>
    2f54:	91020000 	mrsls	r0, (UNDEF: 2)
    2f58:	18110073 	ldmdane	r1, {r0, r1, r4, r5, r6}
    2f5c:	01000017 	tsteq	r0, r7, lsl r0
    2f60:	28c001c5 	stmiacs	r0, {r0, r2, r6, r7, r8}^
    2f64:	003a2000 	eorseq	r2, sl, r0
    2f68:	9c010000 	stcls	0, cr0, [r1], {-0}
    2f6c:	00000866 	andeq	r0, r0, r6, ror #16
    2f70:	00192b12 	andseq	r2, r9, r2, lsl fp
    2f74:	01c50100 	biceq	r0, r5, r0, lsl #2
    2f78:	0000033f 	andeq	r0, r0, pc, lsr r3
    2f7c:	12749102 	rsbsne	r9, r4, #-2147483648	; 0x80000000
    2f80:	00001a90 	muleq	r0, r0, sl
    2f84:	9701c501 	strls	ip, [r1, -r1, lsl #10]
    2f88:	02000000 	andeq	r0, r0, #0
    2f8c:	11007391 			; <UNDEFINED> instruction: 0x11007391
    2f90:	0000179b 	muleq	r0, fp, r7
    2f94:	7801ab01 	stmdavc	r1, {r0, r8, r9, fp, sp, pc}
    2f98:	48200028 	stmdami	r0!, {r3, r5}
    2f9c:	01000000 	mrseq	r0, (UNDEF: 0)
    2fa0:	00089b9c 	muleq	r8, ip, fp
    2fa4:	192b1200 	stmdbne	fp!, {r9, ip}
    2fa8:	ab010000 	blge	42fb0 <startup-0x1ffbd050>
    2fac:	00033f01 	andeq	r3, r3, r1, lsl #30
    2fb0:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    2fb4:	000b4312 	andeq	r4, fp, r2, lsl r3
    2fb8:	01ab0100 			; <UNDEFINED> instruction: 0x01ab0100
    2fbc:	00000132 	andeq	r0, r0, r2, lsr r1
    2fc0:	00739102 	rsbseq	r9, r3, r2, lsl #2
    2fc4:	00189811 	andseq	r9, r8, r1, lsl r8
    2fc8:	019a0100 	orrseq	r0, sl, r0, lsl #2
    2fcc:	20002850 	andcs	r2, r0, r0, asr r8
    2fd0:	00000028 	andeq	r0, r0, r8, lsr #32
    2fd4:	08c19c01 	stmiaeq	r1, {r0, sl, fp, ip, pc}^
    2fd8:	75120000 	ldrvc	r0, [r2, #-0]
    2fdc:	01000018 	tsteq	r0, r8, lsl r0
    2fe0:	08c1019a 	stmiaeq	r1, {r1, r3, r4, r7, r8}^
    2fe4:	91020000 	mrsls	r0, (UNDEF: 2)
    2fe8:	04140074 	ldreq	r0, [r4], #-116	; 0xffffff8c
    2fec:	0000029d 	muleq	r0, sp, r2
    2ff0:	001a4811 	andseq	r4, sl, r1, lsl r8
    2ff4:	017b0100 	cmneq	fp, r0, lsl #2
    2ff8:	200027fa 	strdcs	r2, [r0], -sl
    2ffc:	00000056 	andeq	r0, r0, r6, asr r0
    3000:	090b9c01 	stmdbeq	fp, {r0, sl, fp, ip, pc}
    3004:	2b120000 	blcs	48300c <startup-0x1fb7cff4>
    3008:	01000019 	tsteq	r0, r9, lsl r0
    300c:	033f017b 	teqeq	pc, #-1073741794	; 0xc000001e
    3010:	91020000 	mrsls	r0, (UNDEF: 2)
    3014:	1875126c 	ldmdane	r5!, {r2, r3, r5, r6, r9, ip}^
    3018:	7b010000 	blvc	43020 <startup-0x1ffbcfe0>
    301c:	0008c101 	andeq	ip, r8, r1, lsl #2
    3020:	68910200 	ldmvs	r1, {r9}
    3024:	000e9813 	andeq	r9, lr, r3, lsl r8
    3028:	017d0100 	cmneq	sp, r0, lsl #2
    302c:	000000c2 	andeq	r0, r0, r2, asr #1
    3030:	00749102 	rsbseq	r9, r4, r2, lsl #2
    3034:	001a7f11 	andseq	r7, sl, r1, lsl pc
    3038:	01670100 	cmneq	r7, r0, lsl #2
    303c:	200027c4 	andcs	r2, r0, r4, asr #15
    3040:	00000036 	andeq	r0, r0, r6, lsr r0
    3044:	09319c01 	ldmdbeq	r1!, {r0, sl, fp, ip, pc}
    3048:	26120000 	ldrcs	r0, [r2], -r0
    304c:	0100001a 	tsteq	r0, sl, lsl r0
    3050:	09310167 	ldmdbeq	r1!, {r0, r1, r2, r5, r6, r8}
    3054:	91020000 	mrsls	r0, (UNDEF: 2)
    3058:	04140074 	ldreq	r0, [r4], #-116	; 0xffffff8c
    305c:	00000259 	andeq	r0, r0, r9, asr r2
    3060:	00172b16 	andseq	r2, r7, r6, lsl fp
    3064:	30f60100 	rscscc	r0, r6, r0, lsl #2
    3068:	94200026 	strtls	r0, [r0], #-38	; 0xffffffda
    306c:	01000001 	tsteq	r0, r1
    3070:	0009af9c 	muleq	r9, ip, pc	; <UNPREDICTABLE>
    3074:	192b1700 	stmdbne	fp!, {r8, r9, sl, ip}
    3078:	f6010000 			; <UNDEFINED> instruction: 0xf6010000
    307c:	0000033f 	andeq	r0, r0, pc, lsr r3
    3080:	17549102 	ldrbne	r9, [r4, -r2, lsl #2]
    3084:	00001a26 	andeq	r1, r0, r6, lsr #20
    3088:	0931f601 	ldmdbeq	r1!, {r0, r9, sl, ip, sp, lr, pc}
    308c:	91020000 	mrsls	r0, (UNDEF: 2)
    3090:	0e981850 	mrceq	8, 4, r1, cr8, cr0, {2}
    3094:	f8010000 			; <UNDEFINED> instruction: 0xf8010000
    3098:	000000c2 	andeq	r0, r0, r2, asr #1
    309c:	18749102 	ldmdane	r4!, {r1, r8, ip, pc}^
    30a0:	0000180b 	andeq	r1, r0, fp, lsl #16
    30a4:	00c2f801 	sbceq	pc, r2, r1, lsl #16
    30a8:	91020000 	mrsls	r0, (UNDEF: 2)
    30ac:	16e11870 	uxtabne	r1, r1, r0, ror #16
    30b0:	f9010000 			; <UNDEFINED> instruction: 0xf9010000
    30b4:	000000c2 	andeq	r0, r0, r2, asr #1
    30b8:	186c9102 	stmdane	ip!, {r1, r8, ip, pc}^
    30bc:	000019e0 	andeq	r1, r0, r0, ror #19
    30c0:	00c2fa01 	sbceq	pc, r2, r1, lsl #20
    30c4:	91020000 	mrsls	r0, (UNDEF: 2)
    30c8:	1a371868 	bne	dc9270 <startup-0x1f236d90>
    30cc:	fb010000 	blx	430d6 <startup-0x1ffbcf2a>
    30d0:	000002e1 	andeq	r0, r0, r1, ror #5
    30d4:	00589102 	subseq	r9, r8, r2, lsl #2
    30d8:	00186819 	andseq	r6, r8, r9, lsl r8
    30dc:	00bb0100 	adcseq	r0, fp, r0, lsl #2
    30e0:	30200025 	eorcc	r0, r0, r5, lsr #32
    30e4:	01000001 	tsteq	r0, r1
    30e8:	192b179c 	stmdbne	fp!, {r2, r3, r4, r7, r8, r9, sl, ip}
    30ec:	bb010000 	bllt	430f4 <startup-0x1ffbcf0c>
    30f0:	0000033f 	andeq	r0, r0, pc, lsr r3
    30f4:	00749102 	rsbseq	r9, r4, r2, lsl #2
	...

Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
   0:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
   4:	030b130e 	movweq	r1, #45838	; 0xb30e
   8:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xfffff4f2
   c:	10011117 	andne	r1, r1, r7, lsl r1
  10:	02000017 	andeq	r0, r0, #23
  14:	0e030104 	adfeqs	f0, f3, f4
  18:	0b0b0b3e 	bleq	2c2d18 <startup-0x1fd3d2e8>
  1c:	0b3a1349 	bleq	e84d48 <startup-0x1f17b2b8>
  20:	13010b3b 	movwne	r0, #6971	; 0x1b3b
  24:	28030000 	stmdacs	r3, {}	; <UNPREDICTABLE>
  28:	1c0e0300 	stcne	3, cr0, [lr], {-0}
  2c:	0400000d 	streq	r0, [r0], #-13
  30:	0e030028 	cdpeq	0, 0, cr0, cr3, cr8, {1}
  34:	00000b1c 	andeq	r0, r0, ip, lsl fp
  38:	0b002405 	bleq	9054 <startup-0x1fff6fac>
  3c:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
  40:	0600000e 	streq	r0, [r0], -lr
  44:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
  48:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
  4c:	00001349 	andeq	r1, r0, r9, asr #6
  50:	03001607 	movweq	r1, #1543	; 0x607
  54:	3b0b3a0e 	blcc	2ce894 <startup-0x1fd3176c>
  58:	0013490b 	andseq	r4, r3, fp, lsl #18
  5c:	00240800 	eoreq	r0, r4, r0, lsl #16
  60:	0b3e0b0b 	bleq	f82c94 <startup-0x1f07d36c>
  64:	00000803 	andeq	r0, r0, r3, lsl #16
  68:	49003509 	stmdbmi	r0, {r0, r3, r8, sl, ip, sp}
  6c:	0a000013 	beq	c0 <startup-0x1fffff40>
  70:	13490026 	movtne	r0, #36902	; 0x9026
  74:	130b0000 	movwne	r0, #45056	; 0xb000
  78:	3a050b01 	bcc	142c84 <startup-0x1febd37c>
  7c:	01053b0b 	tsteq	r5, fp, lsl #22
  80:	0c000013 	stceq	0, cr0, [r0], {19}
  84:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
  88:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
  8c:	0b381349 	bleq	e04db8 <startup-0x1f1fb248>
  90:	0d0d0000 	stceq	0, cr0, [sp, #-0]
  94:	3a0e0300 	bcc	380c9c <startup-0x1fc7f364>
  98:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
  9c:	00053813 	andeq	r3, r5, r3, lsl r8
  a0:	000d0e00 	andeq	r0, sp, r0, lsl #28
  a4:	0b3a0803 	bleq	e820b8 <startup-0x1f17df48>
  a8:	1349053b 	movtne	r0, #38203	; 0x953b
  ac:	00000538 	andeq	r0, r0, r8, lsr r5
  b0:	4901010f 	stmdbmi	r1, {r0, r1, r2, r3, r8}
  b4:	00130113 	andseq	r0, r3, r3, lsl r1
  b8:	00211000 	eoreq	r1, r1, r0
  bc:	0b2f1349 	bleq	bc4de8 <startup-0x1f43b218>
  c0:	21110000 	tstcs	r1, r0
  c4:	2f134900 	svccs	0x00134900
  c8:	12000005 	andne	r0, r0, #5
  cc:	0b0b0113 	bleq	2c0520 <startup-0x1fd3fae0>
  d0:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
  d4:	00001301 	andeq	r1, r0, r1, lsl #6
  d8:	03000d13 	movweq	r0, #3347	; 0xd13
  dc:	3b0b3a08 	blcc	2ce904 <startup-0x1fd316fc>
  e0:	38134905 	ldmdacc	r3, {r0, r2, r8, fp, lr}
  e4:	1400000b 	strne	r0, [r0], #-11
  e8:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
  ec:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
  f0:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
  f4:	0000193c 	andeq	r1, r0, ip, lsr r9
  f8:	03003415 	movweq	r3, #1045	; 0x415
  fc:	3b0b3a0e 	blcc	2ce93c <startup-0x1fd316c4>
 100:	3f13490b 	svccc	0x0013490b
 104:	00193c19 	andseq	r3, r9, r9, lsl ip
 108:	01041600 	tsteq	r4, r0, lsl #12
 10c:	0b0b0b3e 	bleq	2c2e0c <startup-0x1fd3d1f4>
 110:	0b3a1349 	bleq	e84e3c <startup-0x1f17b1c4>
 114:	1301053b 	movwne	r0, #5435	; 0x153b
 118:	28170000 	ldmdacs	r7, {}	; <UNPREDICTABLE>
 11c:	1c080300 	stcne	3, cr0, [r8], {-0}
 120:	1800000b 	stmdane	r0, {r0, r1, r3}
 124:	0b0b0113 	bleq	2c0578 <startup-0x1fd3fa88>
 128:	0b3b0b3a 	bleq	ec2e18 <startup-0x1f13d1e8>
 12c:	00001301 	andeq	r1, r0, r1, lsl #6
 130:	03000d19 	movweq	r0, #3353	; 0xd19
 134:	3b0b3a0e 	blcc	2ce974 <startup-0x1fd3168c>
 138:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
 13c:	1a00000b 	bne	170 <startup-0x1ffffe90>
 140:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 144:	0b3b0b3a 	bleq	ec2e34 <startup-0x1f13d1cc>
 148:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 14c:	041b0000 	ldreq	r0, [fp], #-0
 150:	0b0b3e01 	bleq	2cf95c <startup-0x1fd306a4>
 154:	3a13490b 	bcc	4d2588 <startup-0x1fb2da78>
 158:	010b3b0b 	tsteq	fp, fp, lsl #22
 15c:	1c000013 	stcne	0, cr0, [r0], {19}
 160:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
 164:	0b3a0b0b 	bleq	e82d98 <startup-0x1f17d268>
 168:	13010b3b 	movwne	r0, #6971	; 0x1b3b
 16c:	0d1d0000 	ldceq	0, cr0, [sp, #-0]
 170:	3a080300 	bcc	200d78 <startup-0x1fdff288>
 174:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 178:	000b3813 	andeq	r3, fp, r3, lsl r8
 17c:	000f1e00 	andeq	r1, pc, r0, lsl #28
 180:	13490b0b 	movtne	r0, #39691	; 0x9b0b
 184:	341f0000 	ldrcc	r0, [pc], #-0	; 18c <startup-0x1ffffe74>
 188:	3a0e0300 	bcc	380d90 <startup-0x1fc7f270>
 18c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 190:	02193f13 	andseq	r3, r9, #19, 30	; 0x4c
 194:	20000018 	andcs	r0, r0, r8, lsl r0
 198:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 19c:	0b3a0e03 	bleq	e839b0 <startup-0x1f17c650>
 1a0:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 1a4:	06120111 			; <UNDEFINED> instruction: 0x06120111
 1a8:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 1ac:	00130119 	andseq	r0, r3, r9, lsl r1
 1b0:	010b2100 	mrseq	r2, (UNDEF: 27)
 1b4:	06120111 			; <UNDEFINED> instruction: 0x06120111
 1b8:	00001301 	andeq	r1, r0, r1, lsl #6
 1bc:	03003422 	movweq	r3, #1058	; 0x422
 1c0:	3b0b3a08 	blcc	2ce9e8 <startup-0x1fd31618>
 1c4:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 1c8:	23000018 	movwcs	r0, #24
 1cc:	0111010b 	tsteq	r1, fp, lsl #2
 1d0:	00000612 	andeq	r0, r0, r2, lsl r6
 1d4:	49002124 	stmdbmi	r0, {r2, r5, r8, sp}
 1d8:	00182f13 	andseq	r2, r8, r3, lsl pc
 1dc:	002e2500 	eoreq	r2, lr, r0, lsl #10
 1e0:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 1e4:	0b3b0b3a 	bleq	ec2ed4 <startup-0x1f13d12c>
 1e8:	01111927 	tsteq	r1, r7, lsr #18
 1ec:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 1f0:	00194297 	mulseq	r9, r7, r2
 1f4:	012e2600 			; <UNDEFINED> instruction: 0x012e2600
 1f8:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 1fc:	0b3b0b3a 	bleq	ec2eec <startup-0x1f13d114>
 200:	06120111 			; <UNDEFINED> instruction: 0x06120111
 204:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 208:	00130119 	andseq	r0, r3, r9, lsl r1
 20c:	012e2700 			; <UNDEFINED> instruction: 0x012e2700
 210:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 214:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 218:	01111927 	tsteq	r1, r7, lsr #18
 21c:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 220:	01194297 			; <UNDEFINED> instruction: 0x01194297
 224:	28000013 	stmdacs	r0, {r0, r1, r4}
 228:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
 22c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 230:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 234:	2e290000 	cdpcs	0, 2, cr0, cr9, cr0, {0}
 238:	03193f01 	tsteq	r9, #1, 30
 23c:	3b0b3a0e 	blcc	2cea7c <startup-0x1fd31584>
 240:	49192705 	ldmdbmi	r9, {r0, r2, r8, r9, sl, sp}
 244:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
 248:	97184006 	ldrls	r4, [r8, -r6]
 24c:	13011942 	movwne	r1, #6466	; 0x1942
 250:	342a0000 	strtcc	r0, [sl], #-0
 254:	3a0e0300 	bcc	380e5c <startup-0x1fc7f1a4>
 258:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 25c:	00180213 	andseq	r0, r8, r3, lsl r2
 260:	002e2b00 	eoreq	r2, lr, r0, lsl #22
 264:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 268:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 26c:	01111927 	tsteq	r1, r7, lsr #18
 270:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 274:	00194297 	mulseq	r9, r7, r2
 278:	00342c00 	eorseq	r2, r4, r0, lsl #24
 27c:	0b3a0803 	bleq	e82290 <startup-0x1f17dd70>
 280:	1349053b 	movtne	r0, #38203	; 0x953b
 284:	00001802 	andeq	r1, r0, r2, lsl #16
 288:	3f012e2d 	svccc	0x00012e2d
 28c:	3a0e0319 	bcc	380ef8 <startup-0x1fc7f108>
 290:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
 294:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 298:	96184006 	ldrls	r4, [r8], -r6
 29c:	13011942 	movwne	r1, #6466	; 0x1942
 2a0:	2e2e0000 	cdpcs	0, 2, cr0, cr14, cr0, {0}
 2a4:	03193f00 	tsteq	r9, #0, 30
 2a8:	3b0b3a0e 	blcc	2ceae8 <startup-0x1fd31518>
 2ac:	49192705 	ldmdbmi	r9, {r0, r2, r8, r9, sl, sp}
 2b0:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
 2b4:	97184006 	ldrls	r4, [r8, -r6]
 2b8:	00001942 	andeq	r1, r0, r2, asr #18
 2bc:	3f012e2f 	svccc	0x00012e2f
 2c0:	3a0e0319 	bcc	380f2c <startup-0x1fc7f0d4>
 2c4:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
 2c8:	11134919 	tstne	r3, r9, lsl r9
 2cc:	40061201 	andmi	r1, r6, r1, lsl #4
 2d0:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 2d4:	00001301 	andeq	r1, r0, r1, lsl #6
 2d8:	03012e30 	movweq	r2, #7728	; 0x1e30
 2dc:	3b0b3a0e 	blcc	2ceb1c <startup-0x1fd314e4>
 2e0:	49192705 	ldmdbmi	r9, {r0, r2, r8, r9, sl, sp}
 2e4:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
 2e8:	96184006 	ldrls	r4, [r8], -r6
 2ec:	13011942 	movwne	r1, #6466	; 0x1942
 2f0:	2e310000 	cdpcs	0, 3, cr0, cr1, cr0, {0}
 2f4:	3a0e0301 	bcc	380f00 <startup-0x1fc7f100>
 2f8:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
 2fc:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 300:	97184006 	ldrls	r4, [r8, -r6]
 304:	00001942 	andeq	r1, r0, r2, asr #18
 308:	01110100 	tsteq	r1, r0, lsl #2
 30c:	0b130e25 	bleq	4c3ba8 <startup-0x1fb3c458>
 310:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
 314:	06120111 			; <UNDEFINED> instruction: 0x06120111
 318:	00001710 	andeq	r1, r0, r0, lsl r7
 31c:	0b002402 	bleq	932c <startup-0x1fff6cd4>
 320:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
 324:	0300000e 	movweq	r0, #14
 328:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
 32c:	0b3b0b3a 	bleq	ec301c <startup-0x1f13cfe4>
 330:	00001349 	andeq	r1, r0, r9, asr #6
 334:	0b002404 	bleq	934c <startup-0x1fff6cb4>
 338:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
 33c:	05000008 	streq	r0, [r0, #-8]
 340:	13490035 	movtne	r0, #36917	; 0x9035
 344:	34060000 	strcc	r0, [r6], #-0
 348:	3a0e0300 	bcc	380f50 <startup-0x1fc7f0b0>
 34c:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 350:	3c193f13 	ldccc	15, cr3, [r9], {19}
 354:	07000019 	smladeq	r0, r9, r0, r0
 358:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 35c:	0b3b0b3a 	bleq	ec304c <startup-0x1f13cfb4>
 360:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
 364:	0000193c 	andeq	r1, r0, ip, lsr r9
 368:	3e010408 	cdpcc	4, 0, cr0, cr1, cr8, {0}
 36c:	490b0b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp}
 370:	3b0b3a13 	blcc	2cebc4 <startup-0x1fd3143c>
 374:	00130105 	andseq	r0, r3, r5, lsl #2
 378:	00280900 	eoreq	r0, r8, r0, lsl #18
 37c:	0b1c0e03 	bleq	703b90 <startup-0x1f8fc470>
 380:	130a0000 	movwne	r0, #40960	; 0xa000
 384:	3a0b0b01 	bcc	2c2f90 <startup-0x1fd3d070>
 388:	01053b0b 	tsteq	r5, fp, lsl #22
 38c:	0b000013 	bleq	3e0 <startup-0x1ffffc20>
 390:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
 394:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 398:	0b381349 	bleq	e050c4 <startup-0x1f1faf3c>
 39c:	0d0c0000 	stceq	0, cr0, [ip, #-0]
 3a0:	3a080300 	bcc	200fa8 <startup-0x1fdff058>
 3a4:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 3a8:	000b3813 	andeq	r3, fp, r3, lsl r8
 3ac:	01010d00 	tsteq	r1, r0, lsl #26
 3b0:	13011349 	movwne	r1, #4937	; 0x1349
 3b4:	210e0000 	mrscs	r0, (UNDEF: 14)
 3b8:	2f134900 	svccs	0x00134900
 3bc:	0f00000b 	svceq	0x0000000b
 3c0:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
 3c4:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 3c8:	00001349 	andeq	r1, r0, r9, asr #6
 3cc:	3e010410 	cfmvdlrcc	mvd1, r0
 3d0:	490b0b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp}
 3d4:	3b0b3a13 	blcc	2cec28 <startup-0x1fd313d8>
 3d8:	0013010b 	andseq	r0, r3, fp, lsl #2
 3dc:	01131100 	tsteq	r3, r0, lsl #2
 3e0:	0b3a0b0b 	bleq	e83014 <startup-0x1f17cfec>
 3e4:	13010b3b 	movwne	r0, #6971	; 0x1b3b
 3e8:	0d120000 	ldceq	0, cr0, [r2, #-0]
 3ec:	3a0e0300 	bcc	380ff4 <startup-0x1fc7f00c>
 3f0:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 3f4:	000b3813 	andeq	r3, fp, r3, lsl r8
 3f8:	012e1300 			; <UNDEFINED> instruction: 0x012e1300
 3fc:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 400:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 404:	01111927 	tsteq	r1, r7, lsr #18
 408:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 40c:	01194297 			; <UNDEFINED> instruction: 0x01194297
 410:	14000013 	strne	r0, [r0], #-19	; 0xffffffed
 414:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
 418:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 41c:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 420:	34150000 	ldrcc	r0, [r5], #-0
 424:	3a0e0300 	bcc	38102c <startup-0x1fc7efd4>
 428:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 42c:	00180213 	andseq	r0, r8, r3, lsl r2
 430:	000f1600 	andeq	r1, pc, r0, lsl #12
 434:	13490b0b 	movtne	r0, #39691	; 0x9b0b
 438:	2e170000 	cdpcs	0, 1, cr0, cr7, cr0, {0}
 43c:	03193f01 	tsteq	r9, #1, 30
 440:	3b0b3a0e 	blcc	2cec80 <startup-0x1fd31380>
 444:	49192705 	ldmdbmi	r9, {r0, r2, r8, r9, sl, sp}
 448:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
 44c:	97184006 	ldrls	r4, [r8, -r6]
 450:	13011942 	movwne	r1, #6466	; 0x1942
 454:	34180000 	ldrcc	r0, [r8], #-0
 458:	3a080300 	bcc	201060 <startup-0x1fdfefa0>
 45c:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 460:	00180213 	andseq	r0, r8, r3, lsl r2
 464:	012e1900 			; <UNDEFINED> instruction: 0x012e1900
 468:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 46c:	0b3b0b3a 	bleq	ec315c <startup-0x1f13cea4>
 470:	01111927 	tsteq	r1, r7, lsr #18
 474:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 478:	01194297 			; <UNDEFINED> instruction: 0x01194297
 47c:	1a000013 	bne	4d0 <startup-0x1ffffb30>
 480:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
 484:	0b3b0b3a 	bleq	ec3174 <startup-0x1f13ce8c>
 488:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 48c:	341b0000 	ldrcc	r0, [fp], #-0
 490:	3a0e0300 	bcc	381098 <startup-0x1fc7ef68>
 494:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 498:	00180213 	andseq	r0, r8, r3, lsl r2
 49c:	00341c00 	eorseq	r1, r4, r0, lsl #24
 4a0:	0b3a0803 	bleq	e824b4 <startup-0x1f17db4c>
 4a4:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 4a8:	00001802 	andeq	r1, r0, r2, lsl #16
 4ac:	3f012e1d 	svccc	0x00012e1d
 4b0:	3a0e0319 	bcc	38111c <startup-0x1fc7eee4>
 4b4:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 4b8:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 4bc:	96184006 	ldrls	r4, [r8], -r6
 4c0:	00001942 	andeq	r1, r0, r2, asr #18
 4c4:	01110100 	tsteq	r1, r0, lsl #2
 4c8:	0b130e25 	bleq	4c3d64 <startup-0x1fb3c29c>
 4cc:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
 4d0:	06120111 			; <UNDEFINED> instruction: 0x06120111
 4d4:	00001710 	andeq	r1, r0, r0, lsl r7
 4d8:	0b002402 	bleq	94e8 <startup-0x1fff6b18>
 4dc:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
 4e0:	0300000e 	movweq	r0, #14
 4e4:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
 4e8:	0b3b0b3a 	bleq	ec31d8 <startup-0x1f13ce28>
 4ec:	00001349 	andeq	r1, r0, r9, asr #6
 4f0:	0b002404 	bleq	9508 <startup-0x1fff6af8>
 4f4:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
 4f8:	05000008 	streq	r0, [r0, #-8]
 4fc:	13490035 	movtne	r0, #36917	; 0x9035
 500:	26060000 	strcs	r0, [r6], -r0
 504:	00134900 	andseq	r4, r3, r0, lsl #18
 508:	01130700 	tsteq	r3, r0, lsl #14
 50c:	0b3a050b 	bleq	e81940 <startup-0x1f17e6c0>
 510:	1301053b 	movwne	r0, #5435	; 0x153b
 514:	0d080000 	stceq	0, cr0, [r8, #-0]
 518:	3a0e0300 	bcc	381120 <startup-0x1fc7eee0>
 51c:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 520:	000b3813 	andeq	r3, fp, r3, lsl r8
 524:	000d0900 	andeq	r0, sp, r0, lsl #18
 528:	0b3a0e03 	bleq	e83d3c <startup-0x1f17c2c4>
 52c:	1349053b 	movtne	r0, #38203	; 0x953b
 530:	00000538 	andeq	r0, r0, r8, lsr r5
 534:	03000d0a 	movweq	r0, #3338	; 0xd0a
 538:	3b0b3a08 	blcc	2ced60 <startup-0x1fd312a0>
 53c:	38134905 	ldmdacc	r3, {r0, r2, r8, fp, lr}
 540:	0b000005 	bleq	55c <startup-0x1ffffaa4>
 544:	13490101 	movtne	r0, #37121	; 0x9101
 548:	00001301 	andeq	r1, r0, r1, lsl #6
 54c:	4900210c 	stmdbmi	r0, {r2, r3, r8, sp}
 550:	000b2f13 	andeq	r2, fp, r3, lsl pc
 554:	00210d00 	eoreq	r0, r1, r0, lsl #26
 558:	052f1349 	streq	r1, [pc, #-841]!	; 217 <startup-0x1ffffde9>
 55c:	160e0000 	strne	r0, [lr], -r0
 560:	3a0e0300 	bcc	381168 <startup-0x1fc7ee98>
 564:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 568:	0f000013 	svceq	0x00000013
 56c:	0b0b0113 	bleq	2c09c0 <startup-0x1fd3f640>
 570:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 574:	00001301 	andeq	r1, r0, r1, lsl #6
 578:	03000d10 	movweq	r0, #3344	; 0xd10
 57c:	3b0b3a08 	blcc	2ceda4 <startup-0x1fd3125c>
 580:	38134905 	ldmdacc	r3, {r0, r2, r8, fp, lr}
 584:	1100000b 	tstne	r0, fp
 588:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 58c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 590:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
 594:	0000193c 	andeq	r1, r0, ip, lsr r9
 598:	03003412 	movweq	r3, #1042	; 0x412
 59c:	3b0b3a0e 	blcc	2ceddc <startup-0x1fd31224>
 5a0:	3f13490b 	svccc	0x0013490b
 5a4:	00193c19 	andseq	r3, r9, r9, lsl ip
 5a8:	01041300 	mrseq	r1, LR_abt
 5ac:	0b0b0b3e 	bleq	2c32ac <startup-0x1fd3cd54>
 5b0:	0b3a1349 	bleq	e852dc <startup-0x1f17ad24>
 5b4:	1301053b 	movwne	r0, #5435	; 0x153b
 5b8:	28140000 	ldmdacs	r4, {}	; <UNPREDICTABLE>
 5bc:	1c0e0300 	stcne	3, cr0, [lr], {-0}
 5c0:	1500000b 	strne	r0, [r0, #-11]
 5c4:	0b0b0113 	bleq	2c0a18 <startup-0x1fd3f5e8>
 5c8:	0b3b0b3a 	bleq	ec32b8 <startup-0x1f13cd48>
 5cc:	00001301 	andeq	r1, r0, r1, lsl #6
 5d0:	03000d16 	movweq	r0, #3350	; 0xd16
 5d4:	3b0b3a0e 	blcc	2cee14 <startup-0x1fd311ec>
 5d8:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
 5dc:	1700000b 	strne	r0, [r0, -fp]
 5e0:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 5e4:	0b3a0e03 	bleq	e83df8 <startup-0x1f17c208>
 5e8:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 5ec:	06120111 			; <UNDEFINED> instruction: 0x06120111
 5f0:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 5f4:	00130119 	andseq	r0, r3, r9, lsl r1
 5f8:	00051800 	andeq	r1, r5, r0, lsl #16
 5fc:	0b3a0e03 	bleq	e83e10 <startup-0x1f17c1f0>
 600:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 604:	00001802 	andeq	r1, r0, r2, lsl #16
 608:	03003419 	movweq	r3, #1049	; 0x419
 60c:	3b0b3a0e 	blcc	2cee4c <startup-0x1fd311b4>
 610:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 614:	1a000018 	bne	67c <startup-0x1ffff984>
 618:	0b0b000f 	bleq	2c065c <startup-0x1fd3f9a4>
 61c:	00001349 	andeq	r1, r0, r9, asr #6
 620:	3f012e1b 	svccc	0x00012e1b
 624:	3a0e0319 	bcc	381290 <startup-0x1fc7ed70>
 628:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 62c:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 630:	97184006 	ldrls	r4, [r8, -r6]
 634:	00001942 	andeq	r1, r0, r2, asr #18
 638:	01110100 	tsteq	r1, r0, lsl #2
 63c:	0b130e25 	bleq	4c3ed8 <startup-0x1fb3c128>
 640:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
 644:	06120111 			; <UNDEFINED> instruction: 0x06120111
 648:	00001710 	andeq	r1, r0, r0, lsl r7
 64c:	0b002402 	bleq	965c <startup-0x1fff69a4>
 650:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
 654:	0300000e 	movweq	r0, #14
 658:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
 65c:	0b3b0b3a 	bleq	ec334c <startup-0x1f13ccb4>
 660:	00001349 	andeq	r1, r0, r9, asr #6
 664:	0b002404 	bleq	967c <startup-0x1fff6984>
 668:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
 66c:	05000008 	streq	r0, [r0, #-8]
 670:	0b0b0113 	bleq	2c0ac4 <startup-0x1fd3f53c>
 674:	0b3b0b3a 	bleq	ec3364 <startup-0x1f13cc9c>
 678:	00001301 	andeq	r1, r0, r1, lsl #6
 67c:	03000d06 	movweq	r0, #3334	; 0xd06
 680:	3b0b3a0e 	blcc	2ceec0 <startup-0x1fd31140>
 684:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
 688:	0700000b 	streq	r0, [r0, -fp]
 68c:	0803000d 	stmdaeq	r3, {r0, r2, r3}
 690:	0b3b0b3a 	bleq	ec3380 <startup-0x1f13cc80>
 694:	0b381349 	bleq	e053c0 <startup-0x1f1fac40>
 698:	01080000 	mrseq	r0, (UNDEF: 8)
 69c:	01134901 	tsteq	r3, r1, lsl #18
 6a0:	09000013 	stmdbeq	r0, {r0, r1, r4}
 6a4:	13490021 	movtne	r0, #36897	; 0x9021
 6a8:	00000b2f 	andeq	r0, r0, pc, lsr #22
 6ac:	3f012e0a 	svccc	0x00012e0a
 6b0:	3a0e0319 	bcc	38131c <startup-0x1fc7ece4>
 6b4:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 6b8:	11134919 	tstne	r3, r9, lsl r9
 6bc:	40061201 	andmi	r1, r6, r1, lsl #4
 6c0:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 6c4:	00001301 	andeq	r1, r0, r1, lsl #6
 6c8:	0300050b 	movweq	r0, #1291	; 0x50b
 6cc:	3b0b3a0e 	blcc	2cef0c <startup-0x1fd310f4>
 6d0:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 6d4:	0c000018 	stceq	0, cr0, [r0], {24}
 6d8:	0b0b000f 	bleq	2c071c <startup-0x1fd3f8e4>
 6dc:	00001349 	andeq	r1, r0, r9, asr #6
 6e0:	3f012e0d 	svccc	0x00012e0d
 6e4:	3a0e0319 	bcc	381350 <startup-0x1fc7ecb0>
 6e8:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 6ec:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 6f0:	97184006 	ldrls	r4, [r8, -r6]
 6f4:	13011942 	movwne	r1, #6466	; 0x1942
 6f8:	340e0000 	strcc	r0, [lr], #-0
 6fc:	3a0e0300 	bcc	381304 <startup-0x1fc7ecfc>
 700:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 704:	00180213 	andseq	r0, r8, r3, lsl r2
 708:	012e0f00 			; <UNDEFINED> instruction: 0x012e0f00
 70c:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 710:	0b3b0b3a 	bleq	ec3400 <startup-0x1f13cc00>
 714:	01111927 	tsteq	r1, r7, lsr #18
 718:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 71c:	00194297 	mulseq	r9, r7, r2
 720:	11010000 	mrsne	r0, (UNDEF: 1)
 724:	130e2501 	movwne	r2, #58625	; 0xe501
 728:	1b0e030b 	blne	38135c <startup-0x1fc7eca4>
 72c:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
 730:	00171006 	andseq	r1, r7, r6
 734:	00240200 	eoreq	r0, r4, r0, lsl #4
 738:	0b3e0b0b 	bleq	f8336c <startup-0x1f07cc94>
 73c:	00000e03 	andeq	r0, r0, r3, lsl #28
 740:	03001603 	movweq	r1, #1539	; 0x603
 744:	3b0b3a0e 	blcc	2cef84 <startup-0x1fd3107c>
 748:	0013490b 	andseq	r4, r3, fp, lsl #18
 74c:	00240400 	eoreq	r0, r4, r0, lsl #8
 750:	0b3e0b0b 	bleq	f83384 <startup-0x1f07cc7c>
 754:	00000803 	andeq	r0, r0, r3, lsl #16
 758:	49003505 	stmdbmi	r0, {r0, r2, r8, sl, ip, sp}
 75c:	06000013 			; <UNDEFINED> instruction: 0x06000013
 760:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 764:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 768:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
 76c:	0000193c 	andeq	r1, r0, ip, lsr r9
 770:	03003407 	movweq	r3, #1031	; 0x407
 774:	3b0b3a0e 	blcc	2cefb4 <startup-0x1fd3104c>
 778:	3f13490b 	svccc	0x0013490b
 77c:	00193c19 	andseq	r3, r9, r9, lsl ip
 780:	01040800 	tsteq	r4, r0, lsl #16
 784:	0b0b0b3e 	bleq	2c3484 <startup-0x1fd3cb7c>
 788:	0b3a1349 	bleq	e854b4 <startup-0x1f17ab4c>
 78c:	1301053b 	movwne	r0, #5435	; 0x153b
 790:	28090000 	stmdacs	r9, {}	; <UNPREDICTABLE>
 794:	1c0e0300 	stcne	3, cr0, [lr], {-0}
 798:	0a00000b 	beq	7cc <startup-0x1ffff834>
 79c:	08030028 	stmdaeq	r3, {r3, r5}
 7a0:	00000b1c 	andeq	r0, r0, ip, lsl fp
 7a4:	0300160b 	movweq	r1, #1547	; 0x60b
 7a8:	3b0b3a0e 	blcc	2cefe8 <startup-0x1fd31018>
 7ac:	00134905 	andseq	r4, r3, r5, lsl #18
 7b0:	01130c00 	tsteq	r3, r0, lsl #24
 7b4:	0b3a0b0b 	bleq	e833e8 <startup-0x1f17cc18>
 7b8:	1301053b 	movwne	r0, #5435	; 0x153b
 7bc:	0d0d0000 	stceq	0, cr0, [sp, #-0]
 7c0:	3a080300 	bcc	2013c8 <startup-0x1fdfec38>
 7c4:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 7c8:	000b3813 	andeq	r3, fp, r3, lsl r8
 7cc:	000d0e00 	andeq	r0, sp, r0, lsl #28
 7d0:	0b3a0e03 	bleq	e83fe4 <startup-0x1f17c01c>
 7d4:	1349053b 	movtne	r0, #38203	; 0x953b
 7d8:	00000b38 	andeq	r0, r0, r8, lsr fp
 7dc:	0b01130f 	bleq	45420 <startup-0x1ffbabe0>
 7e0:	3b0b3a0b 	blcc	2cf014 <startup-0x1fd30fec>
 7e4:	0013010b 	andseq	r0, r3, fp, lsl #2
 7e8:	000d1000 	andeq	r1, sp, r0
 7ec:	0b3a0e03 	bleq	e84000 <startup-0x1f17c000>
 7f0:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 7f4:	00000b38 	andeq	r0, r0, r8, lsr fp
 7f8:	3f012e11 	svccc	0x00012e11
 7fc:	3a0e0319 	bcc	381468 <startup-0x1fc7eb98>
 800:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
 804:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 808:	97184006 	ldrls	r4, [r8, -r6]
 80c:	13011942 	movwne	r1, #6466	; 0x1942
 810:	05120000 	ldreq	r0, [r2, #-0]
 814:	3a0e0300 	bcc	38141c <startup-0x1fc7ebe4>
 818:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 81c:	00180213 	andseq	r0, r8, r3, lsl r2
 820:	00341300 	eorseq	r1, r4, r0, lsl #6
 824:	0b3a0e03 	bleq	e84038 <startup-0x1f17bfc8>
 828:	1349053b 	movtne	r0, #38203	; 0x953b
 82c:	00001802 	andeq	r1, r0, r2, lsl #16
 830:	0b000f14 	bleq	4488 <startup-0x1fffbb78>
 834:	0013490b 	andseq	r4, r3, fp, lsl #18
 838:	012e1500 			; <UNDEFINED> instruction: 0x012e1500
 83c:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 840:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 844:	13491927 	movtne	r1, #39207	; 0x9927
 848:	06120111 			; <UNDEFINED> instruction: 0x06120111
 84c:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 850:	00130119 	andseq	r0, r3, r9, lsl r1
 854:	012e1600 			; <UNDEFINED> instruction: 0x012e1600
 858:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 85c:	0b3b0b3a 	bleq	ec354c <startup-0x1f13cab4>
 860:	01111927 	tsteq	r1, r7, lsr #18
 864:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 868:	01194296 			; <UNDEFINED> instruction: 0x01194296
 86c:	17000013 	smladne	r0, r3, r0, r0
 870:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
 874:	0b3b0b3a 	bleq	ec3564 <startup-0x1f13ca9c>
 878:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 87c:	34180000 	ldrcc	r0, [r8], #-0
 880:	3a0e0300 	bcc	381488 <startup-0x1fc7eb78>
 884:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 888:	00180213 	andseq	r0, r8, r3, lsl r2
 88c:	012e1900 			; <UNDEFINED> instruction: 0x012e1900
 890:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 894:	0b3b0b3a 	bleq	ec3584 <startup-0x1f13ca7c>
 898:	01111927 	tsteq	r1, r7, lsr #18
 89c:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 8a0:	00194296 	mulseq	r9, r6, r2
	...

Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	00000024 	andeq	r0, r0, r4, lsr #32
   4:	00000002 	andeq	r0, r0, r2
   8:	00040000 	andeq	r0, r4, r0
   c:	00000000 	andeq	r0, r0, r0
  10:	20000010 	andcs	r0, r0, r0, lsl r0
  14:	00001cf4 	strdeq	r1, [r0], -r4
  18:	20000000 	andcs	r0, r0, r0
  1c:	0000000c 	andeq	r0, r0, ip
	...
  28:	0000001c 	andeq	r0, r0, ip, lsl r0
  2c:	1a0e0002 	bne	38003c <startup-0x1fc7ffc4>
  30:	00040000 	andeq	r0, r4, r0
  34:	00000000 	andeq	r0, r0, r0
  38:	20001d04 	andcs	r1, r0, r4, lsl #26
  3c:	0000050e 	andeq	r0, r0, lr, lsl #10
	...
  48:	0000001c 	andeq	r0, r0, ip, lsl r0
  4c:	20350002 	eorscs	r0, r5, r2
  50:	00040000 	andeq	r0, r4, r0
  54:	00000000 	andeq	r0, r0, r0
  58:	20002214 	andcs	r2, r0, r4, lsl r2
  5c:	000001c4 	andeq	r0, r0, r4, asr #3
	...
  68:	0000001c 	andeq	r0, r0, ip, lsl r0
  6c:	257c0002 	ldrbcs	r0, [ip, #-2]!
  70:	00040000 	andeq	r0, r4, r0
  74:	00000000 	andeq	r0, r0, r0
  78:	200023d8 	ldrdcs	r2, [r0], -r8
  7c:	00000128 	andeq	r0, r0, r8, lsr #2
	...
  88:	0000001c 	andeq	r0, r0, ip, lsl r0
  8c:	27290002 	strcs	r0, [r9, -r2]!
  90:	00040000 	andeq	r0, r4, r0
  94:	00000000 	andeq	r0, r0, r0
  98:	20002500 	andcs	r2, r0, r0, lsl #10
  9c:	000009fe 	strdeq	r0, [r0], -lr
	...

Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
   0:	20000010 	andcs	r0, r0, r0, lsl r0
   4:	20001d04 	andcs	r1, r0, r4, lsl #26
   8:	20000000 	andcs	r0, r0, r0
   c:	2000000c 	andcs	r0, r0, ip
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
   0:	0000053a 	andeq	r0, r0, sl, lsr r5
   4:	02070002 	andeq	r0, r7, #2
   8:	01020000 	mrseq	r0, (UNDEF: 2)
   c:	000d0efb 	strdeq	r0, [sp], -fp
  10:	01010101 	tsteq	r1, r1, lsl #2
  14:	01000000 	mrseq	r0, (UNDEF: 0)
  18:	2e010000 	cdpcs	0, 0, cr0, cr1, cr0, {0}
  1c:	696c2f2e 	stmdbvs	ip!, {r1, r2, r3, r5, r8, r9, sl, fp, sp}^
  20:	54532f62 	ldrbpl	r2, [r3], #-3938	; 0xfffff09e
  24:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
  28:	696c5f34 	stmdbvs	ip!, {r2, r4, r5, r8, r9, sl, fp, ip, lr}^
  2c:	4d432f62 	stclmi	15, cr2, [r3, #-392]	; 0xfffffe78
  30:	2f534953 	svccs	0x00534953
  34:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
  38:	00656475 	rsbeq	r6, r5, r5, ror r4
  3c:	6c2f2e2e 	stcvs	14, cr2, [pc], #-184	; ffffff8c <GPIO_Ports+0xdfffcf1c>
  40:	532f6269 			; <UNDEFINED> instruction: 0x532f6269
  44:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
  48:	6c5f3446 	cfldrdvs	mvd3, [pc], {70}	; 0x46
  4c:	532f6269 			; <UNDEFINED> instruction: 0x532f6269
  50:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
  54:	78783446 	ldmdavc	r8!, {r1, r2, r6, sl, ip, sp}^
  58:	6474535f 	ldrbtvs	r5, [r4], #-863	; 0xfffffca1
  5c:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
  60:	445f6870 	ldrbmi	r6, [pc], #-2160	; 68 <startup-0x1fffff98>
  64:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
  68:	72732f72 	rsbsvc	r2, r3, #456	; 0x1c8
  6c:	3a430063 	bcc	10c0200 <startup-0x1ef3fe00>
  70:	6573552f 	ldrbvs	r5, [r3, #-1327]!	; 0xfffffad1
  74:	412f7372 			; <UNDEFINED> instruction: 0x412f7372
  78:	746d6164 	strbtvc	r6, [sp], #-356	; 0xfffffe9c
  7c:	656e4f2f 	strbvs	r4, [lr, #-3887]!	; 0xfffff0d1
  80:	76697244 	strbtvc	r7, [r9], -r4, asr #4
  84:	6f442f65 	svcvs	0x00442f65
  88:	656d756b 	strbvs	r7, [sp, #-1387]!	; 0xfffffa95
  8c:	472f746e 	strmi	r7, [pc, -lr, ror #8]!
  90:	75487469 	strbvc	r7, [r8, #-1129]	; 0xfffffb97
  94:	41442f62 	cmpmi	r4, r2, ror #30
  98:	30393254 	eorscc	r3, r9, r4, asr r2
  9c:	72614c2d 	rsbvc	r4, r1, #11520	; 0x2d00
  a0:	7379736d 	cmnvc	r9, #-1275068415	; 0xb4000001
  a4:	2f6d6574 	svccs	0x006d6574
  a8:	2f646f6b 	svccs	0x00646f6b
  ac:	726f6f44 	rsbvc	r6, pc, #68, 30	; 0x110
  b0:	2f2e2e00 	svccs	0x002e2e00
  b4:	2f62696c 	svccs	0x0062696c
  b8:	334d5453 	movtcc	r5, #54355	; 0xd453
  bc:	5f344632 	svcpl	0x00344632
  c0:	2f62696c 	svccs	0x0062696c
  c4:	334d5453 	movtcc	r5, #54355	; 0xd453
  c8:	78344632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, lr}
  cc:	74535f78 	ldrbvc	r5, [r3], #-3960	; 0xfffff088
  d0:	72655064 	rsbvc	r5, r5, #100	; 0x64
  d4:	5f687069 	svcpl	0x00687069
  d8:	76697244 	strbtvc	r7, [r9], -r4, asr #4
  dc:	692f7265 	stmdbvs	pc!, {r0, r2, r5, r6, r9, ip, sp, lr}	; <UNPREDICTABLE>
  e0:	6300636e 	movwvs	r6, #878	; 0x36e
  e4:	73635c3a 	cmnvc	r3, #14848	; 0x3a00
  e8:	70706165 	rsbsvc	r6, r0, r5, ror #2
  ec:	646f635c 	strbtvs	r6, [pc], #-860	; f4 <startup-0x1fffff0c>
  f0:	74696c65 	strbtvc	r6, [r9], #-3173	; 0xfffff39b
  f4:	6f745c65 	svcvs	0x00745c65
  f8:	5c736c6f 	ldclpl	12, cr6, [r3], #-444	; 0xfffffe44
  fc:	2d636367 	stclcs	3, cr6, [r3, #-412]!	; 0xfffffe64
 100:	5c6d7261 	sfmpl	f7, 2, [sp], #-388	; 0xfffffe7c
 104:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
 108:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
 10c:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
 110:	6e695c69 	cdpvs	12, 6, cr5, cr9, cr9, {3}
 114:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
 118:	616d5c65 	cmnvs	sp, r5, ror #24
 11c:	6e696863 	cdpvs	8, 6, cr6, cr9, cr3, {3}
 120:	3a630065 	bcc	18c02bc <startup-0x1e73fd44>
 124:	6573635c 	ldrbvs	r6, [r3, #-860]!	; 0xfffffca4
 128:	5c707061 	ldclpl	0, cr7, [r0], #-388	; 0xfffffe7c
 12c:	65646f63 	strbvs	r6, [r4, #-3939]!	; 0xfffff09d
 130:	6574696c 	ldrbvs	r6, [r4, #-2412]!	; 0xfffff694
 134:	6f6f745c 	svcvs	0x006f745c
 138:	675c736c 	ldrbvs	r7, [ip, -ip, ror #6]
 13c:	612d6363 			; <UNDEFINED> instruction: 0x612d6363
 140:	615c6d72 	cmpvs	ip, r2, ror sp
 144:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
 148:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
 14c:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
 150:	636e695c 	cmnvs	lr, #92, 18	; 0x170000
 154:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
 158:	7379735c 	cmnvc	r9, #92, 6	; 0x70000001
 15c:	6f630000 	svcvs	0x00630000
 160:	635f6572 	cmpvs	pc, #478150656	; 0x1c800000
 164:	682e346d 	stmdavs	lr!, {r0, r2, r3, r5, r6, sl, ip, sp}
 168:	00000100 	andeq	r0, r0, r0, lsl #2
 16c:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
 170:	78346632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, sp, lr}
 174:	63725f78 	cmnvs	r2, #120, 30	; 0x1e0
 178:	00632e63 	rsbeq	r2, r3, r3, ror #28
 17c:	69000002 	stmdbvs	r0, {r1}
 180:	2e74696e 	vsubcs.f16	s13, s8, s29	; <UNPREDICTABLE>
 184:	00030068 	andeq	r0, r3, r8, rrx
 188:	61747300 	cmnvs	r4, r0, lsl #6
 18c:	70757472 	rsbsvc	r7, r5, r2, ror r4
 190:	0300632e 	movweq	r6, #814	; 0x32e
 194:	74730000 	ldrbtvc	r0, [r3], #-0
 198:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
 19c:	2e787834 	mrccs	8, 3, r7, cr8, cr4, {1}
 1a0:	00040068 	andeq	r0, r4, r8, rrx
 1a4:	65645f00 	strbvs	r5, [r4, #-3840]!	; 0xfffff100
 1a8:	6c756166 	ldfvse	f6, [r5], #-408	; 0xfffffe68
 1ac:	79745f74 	ldmdbvc	r4!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
 1b0:	2e736570 	mrccs	5, 3, r6, cr3, cr0, {3}
 1b4:	00050068 	andeq	r0, r5, r8, rrx
 1b8:	74735f00 	ldrbtvc	r5, [r3], #-3840	; 0xfffff100
 1bc:	746e6964 	strbtvc	r6, [lr], #-2404	; 0xfffff69c
 1c0:	0600682e 	streq	r6, [r0], -lr, lsr #16
 1c4:	79730000 	ldmdbvc	r3!, {}^	; <UNPREDICTABLE>
 1c8:	6d657473 	cfstrdvs	mvd7, [r5, #-460]!	; 0xfffffe34
 1cc:	6d74735f 	ldclvs	3, cr7, [r4, #-380]!	; 0xfffffe84
 1d0:	34663233 	strbtcc	r3, [r6], #-563	; 0xfffffdcd
 1d4:	682e7878 	stmdavs	lr!, {r3, r4, r5, r6, fp, ip, sp, lr}
 1d8:	00000400 	andeq	r0, r0, r0, lsl #8
 1dc:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
 1e0:	78346632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, sp, lr}
 1e4:	63725f78 	cmnvs	r2, #120, 30	; 0x1e0
 1e8:	00682e63 	rsbeq	r2, r8, r3, ror #28
 1ec:	73000004 	movwvc	r0, #4
 1f0:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
 1f4:	78783466 	ldmdavc	r8!, {r1, r2, r5, r6, sl, ip, sp}^
 1f8:	6970675f 	ldmdbvs	r0!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, sp, lr}^
 1fc:	00682e6f 	rsbeq	r2, r8, pc, ror #28
 200:	73000004 	movwvc	r0, #4
 204:	74726174 	ldrbtvc	r6, [r2], #-372	; 0xfffffe8c
 208:	682e7075 	stmdavs	lr!, {r0, r2, r4, r5, r6, ip, sp, lr}
 20c:	00000300 	andeq	r0, r0, r0, lsl #6
 210:	02050000 	andeq	r0, r5, #0
 214:	20000010 	andcs	r0, r0, r0, lsl r0
 218:	010cdd03 	tsteq	ip, r3, lsl #26
 21c:	1ecd4b75 			; <UNDEFINED> instruction: 0x1ecd4b75
 220:	00fc03d8 	ldrsbteq	r0, [ip], #56	; 0x38
 224:	02004b90 	andeq	r4, r0, #144, 22	; 0x24000
 228:	58060104 	stmdapl	r6, {r2, r8}
 22c:	674b3006 	strbvs	r3, [fp, -r6]
 230:	04213f3d 	strteq	r3, [r1], #-3901	; 0xfffff0c3
 234:	73f70302 	mvnsvc	r0, #134217728	; 0x8000000
 238:	3f693082 	svccc	0x00693082
 23c:	4e4f4069 	cdpmi	0, 4, cr4, cr15, cr9, {3}
 240:	03503f69 	cmpeq	r0, #420	; 0x1a4
 244:	3f6be417 	svccc	0x006be417
 248:	740f034b 	strvc	r0, [pc], #-843	; 250 <startup-0x1ffffdb0>
 24c:	003d2f3d 	eorseq	r2, sp, sp, lsr pc
 250:	40020402 	andmi	r0, r2, r2, lsl #8
 254:	02040200 	andeq	r0, r4, #0, 4
 258:	04020067 	streq	r0, [r2], #-103	; 0xffffff99
 25c:	02003d02 	andeq	r3, r0, #2, 26	; 0x80
 260:	58060104 	stmdapl	r6, {r2, r8}
 264:	4e5a4c06 	cdpmi	12, 5, cr4, cr10, cr6, {0}
 268:	0b032f3e 	bleq	cbf68 <startup-0x1ff34098>
 26c:	3f32674a 	svccc	0x0032674a
 270:	033d694d 	teqeq	sp, #1261568	; 0x134000
 274:	4b6a7415 	blmi	1a9d2d0 <startup-0x1e562d30>
 278:	6c661403 	cfstrdvs	mvd1, [r6], #-12
 27c:	0b033f3f 	bleq	cff80 <startup-0x1ff30080>
 280:	20790366 	rsbscs	r0, r9, r6, ror #6
 284:	243d233d 	ldrtcs	r2, [sp], #-829	; 0xfffffcc3
 288:	6a740f03 	bvs	1d03e9c <startup-0x1e2fc164>
 28c:	00de034b 	sbcseq	r0, lr, fp, asr #6
 290:	2dbb7c66 	ldccs	12, cr7, [fp, #408]!	; 0x198
 294:	660e033e 			; <UNDEFINED> instruction: 0x660e033e
 298:	1a034b69 	bne	d3044 <startup-0x1ff2cfbc>
 29c:	03835d66 	orreq	r5, r3, #6528	; 0x1980
 2a0:	69740185 	ldmdbvs	r4!, {r0, r2, r7, r8}^
 2a4:	00e9034b 	rsceq	r0, r9, fp, asr #6
 2a8:	03ad6c66 			; <UNDEFINED> instruction: 0x03ad6c66
 2ac:	4b69740d 	blmi	1a5d2e8 <startup-0x1e5a2d18>
 2b0:	69660e03 	stmdbvs	r6!, {r0, r1, r9, sl, fp}^
 2b4:	6615034b 	ldrvs	r0, [r5], -fp, asr #6
 2b8:	4d3f3459 	cfldrsmi	mvf3, [pc, #-356]!	; 15c <startup-0x1ffffea4>
 2bc:	18034169 	stmdane	r3, {r0, r3, r5, r6, r8, lr}
 2c0:	3f345990 	svccc	0x00345990
 2c4:	0341694d 	movteq	r6, #6477	; 0x194d
 2c8:	4b7401b3 	blmi	1d0099c <startup-0x1e2ff664>
 2cc:	4d4d3f33 	stclmi	15, cr3, [sp, #-204]	; 0xffffff34
 2d0:	660d033d 			; <UNDEFINED> instruction: 0x660d033d
 2d4:	1703672f 	strne	r6, [r3, -pc, lsr #14]
 2d8:	3f334b66 	svccc	0x00334b66
 2dc:	033d4d4d 	teqeq	sp, #4928	; 0x1340
 2e0:	334b660f 	movtcc	r6, #46607	; 0xb60f
 2e4:	3d4d4d3f 	stclcc	13, cr4, [sp, #-252]	; 0xffffff04
 2e8:	4b820f03 	blmi	fe083efc <GPIO_Ports+0xde080e8c>
 2ec:	5b4d3f33 	blpl	134ffc0 <startup-0x1ecb0040>
 2f0:	9024033d 	eorls	r0, r4, sp, lsr r3
 2f4:	775ac04b 	ldrbvc	ip, [sl, -fp, asr #32]
 2f8:	263d223d 			; <UNDEFINED> instruction: 0x263d223d
 2fc:	db3f5a67 	blle	fd6ca0 <startup-0x1f029360>
 300:	038383cb 	orreq	r8, r3, #738197507	; 0x2c000003
 304:	253d201b 	ldrcs	r2, [sp, #-27]!	; 0xffffffe5
 308:	69683d59 	stmdbvs	r8!, {r0, r3, r4, r6, r8, sl, fp, ip, sp}^
 30c:	69683d67 	stmdbvs	r8!, {r0, r1, r2, r5, r6, r8, sl, fp, ip, sp}^
 310:	67683d67 	strbvs	r3, [r8, -r7, ror #26]!
 314:	4bba3f03 	blmi	fee8ff28 <GPIO_Ports+0xdee8ceb8>
 318:	4d3f8433 	cfldrsmi	mvf8, [pc, #-204]!	; 254 <startup-0x1ffffdac>
 31c:	03834069 	orreq	r4, r3, #105	; 0x69
 320:	4b6a9e0a 	blmi	1aa7b50 <startup-0x1e5584b0>
 324:	69660c03 	stmdbvs	r6!, {r0, r1, sl, fp}^
 328:	01b8034b 			; <UNDEFINED> instruction: 0x01b8034b
 32c:	033d4e66 	teqeq	sp, #1632	; 0x660
 330:	334b7416 	movtcc	r7, #46102	; 0xb416
 334:	4b4d4d4d 	blmi	1353870 <startup-0x1ecac790>
 338:	4b821403 	blmi	fe08534c <GPIO_Ports+0xde0822dc>
 33c:	4d4d4d33 	stclmi	13, cr4, [sp, #-204]	; 0xffffff34
 340:	8211034b 	andshi	r0, r1, #738197505	; 0x2c000001
 344:	4d4d334b 	stclmi	3, cr3, [sp, #-300]	; 0xfffffed4
 348:	10034b5b 	andne	r4, r3, fp, asr fp
 34c:	4d334b74 	vldmdbmi	r3!, {d4-<overflow reg d61>}
 350:	034b694d 	movteq	r6, #47437	; 0xb94d
 354:	4b8200d3 	blmi	fe0806a8 <GPIO_Ports+0xde07d638>
 358:	4d4d4d33 	stclmi	13, cr4, [sp, #-204]	; 0xffffff34
 35c:	00f0034b 	rscseq	r0, r0, fp, asr #6
 360:	033d4e82 	teqeq	sp, #2080	; 0x820
 364:	4c797425 	cfldrdmi	mvd7, [r9], #-148	; 0xffffff6c
 368:	03761e6c 	cmneq	r6, #108, 28	; 0x6c0
 36c:	4c797413 	cfldrdmi	mvd7, [r9], #-76	; 0xffffffb4
 370:	03761e6c 	cmneq	r6, #108, 28	; 0x6c0
 374:	4c797411 	cfldrdmi	mvd7, [r9], #-68	; 0xffffffbc
 378:	03761e6c 	cmneq	r6, #108, 28	; 0x6c0
 37c:	4c79742c 	cfldrdmi	mvd7, [r9], #-176	; 0xffffff50
 380:	03761e6c 	cmneq	r6, #108, 28	; 0x6c0
 384:	4c797427 	cfldrdmi	mvd7, [r9], #-156	; 0xffffff64
 388:	03761e6c 	cmneq	r6, #108, 28	; 0x6c0
 38c:	4c79741d 	cfldrdmi	mvd7, [r9], #-116	; 0xffffff8c
 390:	03761e6c 	cmneq	r6, #108, 28	; 0x6c0
 394:	4c797410 	cfldrdmi	mvd7, [r9], #-64	; 0xffffffc0
 398:	03761e6c 	cmneq	r6, #108, 28	; 0x6c0
 39c:	4c79740e 	cfldrdmi	mvd7, [r9], #-56	; 0xffffffc8
 3a0:	03761e6c 	cmneq	r6, #108, 28	; 0x6c0
 3a4:	4c787429 	cfldrdmi	mvd7, [r8], #-164	; 0xffffff5c
 3a8:	03761e6c 	cmneq	r6, #108, 28	; 0x6c0
 3ac:	4c787423 	cfldrdmi	mvd7, [r8], #-140	; 0xffffff74
 3b0:	03761e6c 	cmneq	r6, #108, 28	; 0x6c0
 3b4:	4c787425 	cfldrdmi	mvd7, [r8], #-148	; 0xffffff6c
 3b8:	03761e6c 	cmneq	r6, #108, 28	; 0x6c0
 3bc:	4c787414 	cfldrdmi	mvd7, [r8], #-80	; 0xffffffb0
 3c0:	03761e6c 	cmneq	r6, #108, 28	; 0x6c0
 3c4:	4c787412 	cfldrdmi	mvd7, [r8], #-72	; 0xffffffb8
 3c8:	03761e6c 	cmneq	r6, #108, 28	; 0x6c0
 3cc:	4c78742d 	cfldrdmi	mvd7, [r8], #-180	; 0xffffff4c
 3d0:	03761e6c 	cmneq	r6, #108, 28	; 0x6c0
 3d4:	4c787428 	cfldrdmi	mvd7, [r8], #-160	; 0xffffff60
 3d8:	03761e6c 	cmneq	r6, #108, 28	; 0x6c0
 3dc:	4c6a740c 	cfstrdmi	mvd7, [sl], #-48	; 0xffffffd0
 3e0:	03681e6c 	cmneq	r8, #108, 28	; 0x6c0
 3e4:	947402ac 	ldrbtls	r0, [r4], #-684	; 0xfffffd54
 3e8:	ae1e974d 	cdpge	7, 1, cr9, cr14, cr13, {2}
 3ec:	67661703 	strbvs	r1, [r6, -r3, lsl #14]!
 3f0:	59502f2f 	ldmdbpl	r0, {r0, r1, r2, r3, r5, r8, r9, sl, fp, sp}^
 3f4:	4e3e4c3e 	mrcmi	12, 1, r4, cr14, cr14, {1}
 3f8:	5c765940 			; <UNDEFINED> instruction: 0x5c765940
 3fc:	0a033d4d 	beq	cf938 <startup-0x1ff306c8>
 400:	03753066 	cmneq	r5, #102	; 0x66
 404:	50675811 	rsbpl	r5, r7, r1, lsl r8
 408:	3d4d5c68 	stclcc	12, cr5, [sp, #-416]	; 0xfffffe60
 40c:	6c661103 	stfvse	f1, [r6], #-12
 410:	0303044b 	movweq	r0, #13387	; 0x344b
 414:	4066679d 	mlsmi	r6, sp, r7, r6
 418:	3d3d4b4b 	fldmdbxcc	sp!, {d4-d40}	;@ Deprecated
 41c:	4b693d3d 	blmi	1a4f918 <startup-0x1e5b06e8>
 420:	693d3d3d 	ldmdbvs	sp!, {r0, r2, r3, r4, r5, r8, sl, fp, ip, sp}
 424:	3d3d4b4b 	fldmdbxcc	sp!, {d4-d40}	;@ Deprecated
 428:	4b693d3d 	blmi	1a4f924 <startup-0x1e5b06dc>
 42c:	693d3d3d 	ldmdbvs	sp!, {r0, r2, r3, r4, r5, r8, sl, fp, ip, sp}
 430:	3d3d4b4b 	fldmdbxcc	sp!, {d4-d40}	;@ Deprecated
 434:	4b693d3d 	blmi	1a4f930 <startup-0x1e5b06d0>
 438:	693d3d3d 	ldmdbvs	sp!, {r0, r2, r3, r4, r5, r8, sl, fp, ip, sp}
 43c:	3d3d4b4b 	fldmdbxcc	sp!, {d4-d40}	;@ Deprecated
 440:	4b693d3d 	blmi	1a4f93c <startup-0x1e5b06c4>
 444:	693d3d3d 	ldmdbvs	sp!, {r0, r2, r3, r4, r5, r8, sl, fp, ip, sp}
 448:	3d3d4b4b 	fldmdbxcc	sp!, {d4-d40}	;@ Deprecated
 44c:	04673d3d 	strbteq	r3, [r7], #-3389	; 0xfffff2c3
 450:	08530304 	ldmdaeq	r3, {r2, r8, r9}^
 454:	5a592f2e 	bpl	164c114 <startup-0x1e9b3eec>
 458:	a16c3e3e 	cmnge	ip, lr, lsr lr
 45c:	002f2f67 	eoreq	r2, pc, r7, ror #30
 460:	06010402 	streq	r0, [r1], -r2, lsl #8
 464:	025b0620 	subseq	r0, fp, #32, 12	; 0x2000000
 468:	751405ca 	ldrvc	r0, [r4, #-1482]	; 0xfffffa36
 46c:	67088484 	strvs	r8, [r8, -r4, lsl #9]
 470:	02040200 	andeq	r0, r4, #0, 4
 474:	040200a9 	streq	r0, [r2], #-169	; 0xffffff57
 478:	00ac0601 	adceq	r0, ip, r1, lsl #12
 47c:	06020402 	streq	r0, [r2], -r2, lsl #8
 480:	04020080 	streq	r0, [r2], #-128	; 0xffffff80
 484:	06ac0601 	strteq	r0, [ip], r1, lsl #12
 488:	02820903 	addeq	r0, r2, #49152	; 0xc000
 48c:	8483133f 	strhi	r1, [r3], #831	; 0x33f
 490:	08142a02 	ldmdaeq	r4, {r1, r9, fp, sp}
 494:	08910883 	ldmeq	r1, {r0, r1, r7, fp}
 498:	bbbbc959 	bllt	feef2a04 <GPIO_Ports+0xdeeef994>
 49c:	ad085908 	vstrge.16	s10, [r8, #-16]	; <UNPREDICTABLE>
 4a0:	02040200 	andeq	r0, r4, #0, 4
 4a4:	00827603 	addeq	r7, r2, r3, lsl #12
 4a8:	06010402 	streq	r0, [r1], -r2, lsl #8
 4ac:	040200ba 	streq	r0, [r2], #-186	; 0xffffff46
 4b0:	009c0602 	addseq	r0, ip, r2, lsl #12
 4b4:	06010402 	streq	r0, [r1], -r2, lsl #8
 4b8:	100306ac 	andne	r0, r3, ip, lsr #13
 4bc:	9f088490 	svcls	0x00088490
 4c0:	0402009f 	streq	r0, [r2], #-159	; 0xffffff61
 4c4:	00200601 	eoreq	r0, r0, r1, lsl #12
 4c8:	06020402 	streq	r0, [r2], -r2, lsl #8
 4cc:	040200ad 	streq	r0, [r2], #-173	; 0xffffff53
 4d0:	00a70802 	adceq	r0, r7, r2, lsl #16
 4d4:	06010402 	streq	r0, [r1], -r2, lsl #8
 4d8:	5cb40682 	ldcpl	6, cr0, [r4], #520	; 0x208
 4dc:	084c0892 	stmdaeq	ip, {r1, r4, r7, fp}^
 4e0:	08a308c9 	stmiaeq	r3!, {r0, r3, r6, r7, fp}
 4e4:	083e0830 	ldmdaeq	lr!, {r4, r5, fp}
 4e8:	00bc0892 	umlalseq	r0, ip, r2, r8
 4ec:	06010402 	streq	r0, [r1], -r2, lsl #8
 4f0:	08062e08 	stmdaeq	r6, {r3, r9, sl, fp, sp}
 4f4:	08b008e6 	ldmeq	r0!, {r1, r2, r5, r6, r7, fp}
 4f8:	040200a0 	streq	r0, [r2], #-160	; 0xffffff60
 4fc:	2e080601 	cfmadd32cs	mvax0, mvfx0, mvfx8, mvfx1
 500:	02040200 	andeq	r0, r4, #0, 4
 504:	0806e408 	stmdaeq	r6, {r3, sl, sp, lr, pc}
 508:	04020030 	streq	r0, [r2], #-48	; 0xffffffd0
 50c:	08740302 	ldmdaeq	r4!, {r1, r8, r9}^
 510:	04020082 	streq	r0, [r2], #-130	; 0xffffff7e
 514:	00ac0601 	adceq	r0, ip, r1, lsl #12
 518:	06020402 	streq	r0, [r2], -r2, lsl #8
 51c:	00ba7003 	adcseq	r7, sl, r3
 520:	06010402 	streq	r0, [r1], -r2, lsl #8
 524:	0902c8ba 	stmdbeq	r2, {r1, r3, r4, r5, r7, fp, lr, pc}
 528:	04010100 	streq	r0, [r1], #-256	; 0xffffff00
 52c:	02050004 	andeq	r0, r5, #4
 530:	20000000 	andcs	r0, r0, r0
 534:	13010d03 	movwne	r0, #7427	; 0x1d03
 538:	0003025e 	andeq	r0, r3, lr, asr r2
 53c:	02b50101 	adcseq	r0, r5, #1073741824	; 0x40000000
 540:	00020000 	andeq	r0, r2, r0
 544:	000001c9 	andeq	r0, r0, r9, asr #3
 548:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
 54c:	0101000d 	tsteq	r1, sp
 550:	00000101 	andeq	r0, r0, r1, lsl #2
 554:	00000100 	andeq	r0, r0, r0, lsl #2
 558:	2f3a4301 	svccs	0x003a4301
 55c:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
 560:	64412f73 	strbvs	r2, [r1], #-3955	; 0xfffff08d
 564:	2f746d61 	svccs	0x00746d61
 568:	44656e4f 	strbtmi	r6, [r5], #-3663	; 0xfffff1b1
 56c:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
 570:	6b6f442f 	blvs	1bd1634 <startup-0x1e42e9cc>
 574:	6e656d75 	mcrvs	13, 3, r6, cr5, cr5, {3}
 578:	69472f74 	stmdbvs	r7, {r2, r4, r5, r6, r8, r9, sl, fp, sp}^
 57c:	62754874 	rsbsvs	r4, r5, #116, 16	; 0x740000
 580:	5441442f 	strbpl	r4, [r1], #-1071	; 0xfffffbd1
 584:	2d303932 			; <UNDEFINED> instruction: 0x2d303932
 588:	6d72614c 	ldfvse	f6, [r2, #-304]!	; 0xfffffed0
 58c:	74737973 	ldrbtvc	r7, [r3], #-2419	; 0xfffff68d
 590:	6b2f6d65 	blvs	bdbb2c <startup-0x1f4244d4>
 594:	6c2f646f 	cfstrsvs	mvf6, [pc], #-444	; 3e0 <startup-0x1ffffc20>
 598:	532f6269 			; <UNDEFINED> instruction: 0x532f6269
 59c:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
 5a0:	6c5f3446 	cfldrdvs	mvd3, [pc], {70}	; 0x46
 5a4:	532f6269 			; <UNDEFINED> instruction: 0x532f6269
 5a8:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
 5ac:	78783446 	ldmdavc	r8!, {r1, r2, r6, sl, ip, sp}^
 5b0:	6474535f 	ldrbtvs	r5, [r4], #-863	; 0xfffffca1
 5b4:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
 5b8:	445f6870 	ldrbmi	r6, [pc], #-2160	; 5c0 <startup-0x1ffffa40>
 5bc:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
 5c0:	72732f72 	rsbsvc	r2, r3, #456	; 0x1c8
 5c4:	3a630063 	bcc	18c0758 <startup-0x1e73f8a8>
 5c8:	6573635c 	ldrbvs	r6, [r3, #-860]!	; 0xfffffca4
 5cc:	5c707061 	ldclpl	0, cr7, [r0], #-388	; 0xfffffe7c
 5d0:	65646f63 	strbvs	r6, [r4, #-3939]!	; 0xfffff09d
 5d4:	6574696c 	ldrbvs	r6, [r4, #-2412]!	; 0xfffff694
 5d8:	6f6f745c 	svcvs	0x006f745c
 5dc:	675c736c 	ldrbvs	r7, [ip, -ip, ror #6]
 5e0:	612d6363 			; <UNDEFINED> instruction: 0x612d6363
 5e4:	615c6d72 	cmpvs	ip, r2, ror sp
 5e8:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
 5ec:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
 5f0:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
 5f4:	636e695c 	cmnvs	lr, #92, 18	; 0x170000
 5f8:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
 5fc:	63616d5c 	cmnvs	r1, #92, 26	; 0x1700
 600:	656e6968 	strbvs	r6, [lr, #-2408]!	; 0xfffff698
 604:	5c3a6300 	ldcpl	3, cr6, [sl], #-0
 608:	61657363 	cmnvs	r5, r3, ror #6
 60c:	635c7070 	cmpvs	ip, #112	; 0x70
 610:	6c65646f 	cfstrdvs	mvd6, [r5], #-444	; 0xfffffe44
 614:	5c657469 	cfstrdpl	mvd7, [r5], #-420	; 0xfffffe5c
 618:	6c6f6f74 	stclvs	15, cr6, [pc], #-464	; 450 <startup-0x1ffffbb0>
 61c:	63675c73 	cmnvs	r7, #29440	; 0x7300
 620:	72612d63 	rsbvc	r2, r1, #6336	; 0x18c0
 624:	72615c6d 	rsbvc	r5, r1, #27904	; 0x6d00
 628:	6f6e2d6d 	svcvs	0x006e2d6d
 62c:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
 630:	5c696261 	sfmpl	f6, 2, [r9], #-388	; 0xfffffe7c
 634:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
 638:	5c656475 	cfstrdpl	mvd6, [r5], #-468	; 0xfffffe2c
 63c:	00737973 	rsbseq	r7, r3, r3, ror r9
 640:	6c2f2e2e 	stcvs	14, cr2, [pc], #-184	; 590 <startup-0x1ffffa70>
 644:	532f6269 			; <UNDEFINED> instruction: 0x532f6269
 648:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
 64c:	6c5f3446 	cfldrdvs	mvd3, [pc], {70}	; 0x46
 650:	432f6269 			; <UNDEFINED> instruction: 0x432f6269
 654:	5349534d 	movtpl	r5, #37709	; 0x934d
 658:	636e692f 	cmnvs	lr, #770048	; 0xbc000
 65c:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
 660:	2f2e2e00 	svccs	0x002e2e00
 664:	2f62696c 	svccs	0x0062696c
 668:	334d5453 	movtcc	r5, #54355	; 0xd453
 66c:	5f344632 	svcpl	0x00344632
 670:	2f62696c 	svccs	0x0062696c
 674:	334d5453 	movtcc	r5, #54355	; 0xd453
 678:	78344632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, lr}
 67c:	74535f78 	ldrbvc	r5, [r3], #-3960	; 0xfffff088
 680:	72655064 	rsbvc	r5, r5, #100	; 0x64
 684:	5f687069 	svcpl	0x00687069
 688:	76697244 	strbtvc	r7, [r9], -r4, asr #4
 68c:	692f7265 	stmdbvs	pc!, {r0, r2, r5, r6, r9, ip, sp, lr}	; <UNPREDICTABLE>
 690:	0000636e 	andeq	r6, r0, lr, ror #6
 694:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
 698:	78346632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, sp, lr}
 69c:	70675f78 	rsbvc	r5, r7, r8, ror pc
 6a0:	632e6f69 			; <UNDEFINED> instruction: 0x632e6f69
 6a4:	00000100 	andeq	r0, r0, r0, lsl #2
 6a8:	6665645f 			; <UNDEFINED> instruction: 0x6665645f
 6ac:	746c7561 	strbtvc	r7, [ip], #-1377	; 0xfffffa9f
 6b0:	7079745f 	rsbsvc	r7, r9, pc, asr r4
 6b4:	682e7365 	stmdavs	lr!, {r0, r2, r5, r6, r8, r9, ip, sp, lr}
 6b8:	00000200 	andeq	r0, r0, r0, lsl #4
 6bc:	6474735f 	ldrbtvs	r7, [r4], #-863	; 0xfffffca1
 6c0:	2e746e69 	cdpcs	14, 7, cr6, cr4, cr9, {3}
 6c4:	00030068 	andeq	r0, r3, r8, rrx
 6c8:	726f6300 	rsbvc	r6, pc, #0, 6
 6cc:	6d635f65 	stclvs	15, cr5, [r3, #-404]!	; 0xfffffe6c
 6d0:	00682e34 	rsbeq	r2, r8, r4, lsr lr
 6d4:	73000004 	movwvc	r0, #4
 6d8:	65747379 	ldrbvs	r7, [r4, #-889]!	; 0xfffffc87
 6dc:	74735f6d 	ldrbtvc	r5, [r3], #-3949	; 0xfffff093
 6e0:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
 6e4:	2e787834 	mrccs	8, 3, r7, cr8, cr4, {1}
 6e8:	00050068 	andeq	r0, r5, r8, rrx
 6ec:	6d747300 	ldclvs	3, cr7, [r4, #-0]
 6f0:	34663233 	strbtcc	r3, [r6], #-563	; 0xfffffdcd
 6f4:	682e7878 	stmdavs	lr!, {r3, r4, r5, r6, fp, ip, sp, lr}
 6f8:	00000500 	andeq	r0, r0, r0, lsl #10
 6fc:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
 700:	78346632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, sp, lr}
 704:	70675f78 	rsbvc	r5, r7, r8, ror pc
 708:	682e6f69 	stmdavs	lr!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}
 70c:	00000500 	andeq	r0, r0, r0, lsl #10
 710:	02050000 	andeq	r0, r5, #0
 714:	20001d04 	andcs	r1, r0, r4, lsl #26
 718:	0100ff03 	tsteq	r0, r3, lsl #30	; <UNPREDICTABLE>
 71c:	034b4c4e 	movteq	r4, #48206	; 0xbc4e
 720:	4a034a38 	bmi	d3008 <startup-0x1ff2cff8>
 724:	034b4c20 	movteq	r4, #48160	; 0xbc20
 728:	4f034a33 	svcmi	0x00034a33
 72c:	034b4c20 	movteq	r4, #48160	; 0xbc20
 730:	54034a2e 	strpl	r4, [r3], #-2606	; 0xfffff5d2
 734:	034b4c20 	movteq	r4, #48160	; 0xbc20
 738:	59034a29 	stmdbpl	r3, {r0, r3, r5, r9, fp, lr}
 73c:	034b4c20 	movteq	r4, #48160	; 0xbc20
 740:	5e034a24 	vmlapl.f32	s8, s6, s9
 744:	034b4c20 	movteq	r4, #48160	; 0xbc20
 748:	63034a1f 	movwvs	r4, #14879	; 0x3a1f
 74c:	034b4c20 	movteq	r4, #48160	; 0xbc20
 750:	68034a1a 	stmdavs	r3, {r1, r3, r4, r9, fp, lr}
 754:	034b4c20 	movteq	r4, #48160	; 0xbc20
 758:	6e034a15 			; <UNDEFINED> instruction: 0x6e034a15
 75c:	03674c20 	cmneq	r7, #32, 24	; 0x2000
 760:	7303660f 	movwvc	r6, #13839	; 0x360f
 764:	03674c20 	cmneq	r7, #32, 24	; 0x2000
 768:	7a03660a 	bvc	d9f98 <startup-0x1ff26068>
 76c:	69674c20 	stmdbvs	r7!, {r5, sl, fp, lr}^
 770:	90080c03 	andls	r0, r8, r3, lsl #24
 774:	660a0359 			; <UNDEFINED> instruction: 0x660a0359
 778:	4c5a5a3e 	vmovmi	r5, sl, s29, s30
 77c:	0200bcad 	andeq	fp, r0, #44288	; 0xad00
 780:	4a060104 	bmi	180b98 <startup-0x1fe7f468>
 784:	c0ad5006 	adcgt	r5, sp, r6
 788:	00bbccad 	adcseq	ip, fp, sp, lsr #25
 78c:	03020402 	movweq	r0, #9218	; 0x2402
 790:	0200ba62 	andeq	fp, r0, #401408	; 0x62000
 794:	3c060104 	stfccs	f0, [r6], {4}
 798:	3c210306 	stccc	3, cr0, [r1], #-24	; 0xffffffe8
 79c:	3d3d4c52 	ldccc	12, cr4, [sp, #-328]!	; 0xfffffeb8
 7a0:	033d3d3d 	teqeq	sp, #3904	; 0xf40
 7a4:	42757410 	rsbsmi	r7, r5, #16, 8	; 0x10000000
 7a8:	3e4c3e5a 	mcrcc	14, 2, r3, cr12, cr10, {2}
 7ac:	1c033d3e 	stcne	13, cr3, [r3], {62}	; 0x3e
 7b0:	6850754a 	ldmdavs	r0, {r1, r3, r6, r8, sl, ip, sp, lr}^
 7b4:	033d4c5c 	teqeq	sp, #92, 24	; 0x5c00
 7b8:	3d4e4a0a 	vstrcc	s9, [lr, #-40]	; 0xffffffd8
 7bc:	754a0c03 	strbvc	r0, [sl, #-3075]	; 0xfffff3fd
 7c0:	4c5c6850 	mrrcmi	8, 5, r6, ip, cr0
 7c4:	4a0a033d 	bmi	2814c0 <startup-0x1fd7eb40>
 7c8:	0f033d4e 	svceq	0x00033d4e
 7cc:	034b794a 	movteq	r7, #47434	; 0xb94a
 7d0:	4b794a0f 	blmi	1e53014 <startup-0x1e1acfec>
 7d4:	c04a1003 	subgt	r1, sl, r3
 7d8:	4c1e504c 	ldcmi	0, cr5, [lr], {76}	; 0x4c
 7dc:	784a0b03 	stmdavc	sl, {r0, r1, r8, r9, fp}^
 7e0:	4a0b034b 	bmi	2c1514 <startup-0x1fd3eaec>
 7e4:	ce037578 	cfrshl64gt	mvdx3, mvdx8, r7
 7e8:	2fbb4a00 	svccs	0x00bb4a00
 7ec:	c9089f35 	stmdbgt	r8, {r0, r2, r4, r5, r8, r9, sl, fp, ip, pc}
 7f0:	04029fbb 	streq	r9, [r2], #-4027	; 0xfffff045
 7f4:	fa010100 	blx	40bfc <startup-0x1ffbf404>
 7f8:	02000001 	andeq	r0, r0, #1
 7fc:	0001b500 	andeq	fp, r1, r0, lsl #10
 800:	fb010200 	blx	4100a <startup-0x1ffbeff6>
 804:	01000d0e 	tsteq	r0, lr, lsl #26
 808:	00010101 	andeq	r0, r1, r1, lsl #2
 80c:	00010000 	andeq	r0, r1, r0
 810:	3a430100 	bcc	10c0c18 <startup-0x1ef3f3e8>
 814:	6573552f 	ldrbvs	r5, [r3, #-1327]!	; 0xfffffad1
 818:	412f7372 			; <UNDEFINED> instruction: 0x412f7372
 81c:	746d6164 	strbtvc	r6, [sp], #-356	; 0xfffffe9c
 820:	656e4f2f 	strbvs	r4, [lr, #-3887]!	; 0xfffff0d1
 824:	76697244 	strbtvc	r7, [r9], -r4, asr #4
 828:	6f442f65 	svcvs	0x00442f65
 82c:	656d756b 	strbvs	r7, [sp, #-1387]!	; 0xfffffa95
 830:	472f746e 	strmi	r7, [pc, -lr, ror #8]!
 834:	75487469 	strbvc	r7, [r8, #-1129]	; 0xfffffb97
 838:	41442f62 	cmpmi	r4, r2, ror #30
 83c:	30393254 	eorscc	r3, r9, r4, asr r2
 840:	72614c2d 	rsbvc	r4, r1, #11520	; 0x2d00
 844:	7379736d 	cmnvc	r9, #-1275068415	; 0xb4000001
 848:	2f6d6574 	svccs	0x006d6574
 84c:	2f646f6b 	svccs	0x00646f6b
 850:	2f62696c 	svccs	0x0062696c
 854:	334d5453 	movtcc	r5, #54355	; 0xd453
 858:	5f344632 	svcpl	0x00344632
 85c:	2f62696c 	svccs	0x0062696c
 860:	334d5453 	movtcc	r5, #54355	; 0xd453
 864:	78344632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, lr}
 868:	74535f78 	ldrbvc	r5, [r3], #-3960	; 0xfffff088
 86c:	72655064 	rsbvc	r5, r5, #100	; 0x64
 870:	5f687069 	svcpl	0x00687069
 874:	76697244 	strbtvc	r7, [r9], -r4, asr #4
 878:	732f7265 			; <UNDEFINED> instruction: 0x732f7265
 87c:	63006372 	movwvs	r6, #882	; 0x372
 880:	73635c3a 	cmnvc	r3, #14848	; 0x3a00
 884:	70706165 	rsbsvc	r6, r0, r5, ror #2
 888:	646f635c 	strbtvs	r6, [pc], #-860	; 890 <startup-0x1ffff770>
 88c:	74696c65 	strbtvc	r6, [r9], #-3173	; 0xfffff39b
 890:	6f745c65 	svcvs	0x00745c65
 894:	5c736c6f 	ldclpl	12, cr6, [r3], #-444	; 0xfffffe44
 898:	2d636367 	stclcs	3, cr6, [r3, #-412]!	; 0xfffffe64
 89c:	5c6d7261 	sfmpl	f7, 2, [sp], #-388	; 0xfffffe7c
 8a0:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
 8a4:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
 8a8:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
 8ac:	6e695c69 	cdpvs	12, 6, cr5, cr9, cr9, {3}
 8b0:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
 8b4:	616d5c65 	cmnvs	sp, r5, ror #24
 8b8:	6e696863 	cdpvs	8, 6, cr6, cr9, cr3, {3}
 8bc:	3a630065 	bcc	18c0a58 <startup-0x1e73f5a8>
 8c0:	6573635c 	ldrbvs	r6, [r3, #-860]!	; 0xfffffca4
 8c4:	5c707061 	ldclpl	0, cr7, [r0], #-388	; 0xfffffe7c
 8c8:	65646f63 	strbvs	r6, [r4, #-3939]!	; 0xfffff09d
 8cc:	6574696c 	ldrbvs	r6, [r4, #-2412]!	; 0xfffff694
 8d0:	6f6f745c 	svcvs	0x006f745c
 8d4:	675c736c 	ldrbvs	r7, [ip, -ip, ror #6]
 8d8:	612d6363 			; <UNDEFINED> instruction: 0x612d6363
 8dc:	615c6d72 	cmpvs	ip, r2, ror sp
 8e0:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
 8e4:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
 8e8:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
 8ec:	636e695c 	cmnvs	lr, #92, 18	; 0x170000
 8f0:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
 8f4:	7379735c 	cmnvc	r9, #92, 6	; 0x70000001
 8f8:	2f2e2e00 	svccs	0x002e2e00
 8fc:	2f62696c 	svccs	0x0062696c
 900:	334d5453 	movtcc	r5, #54355	; 0xd453
 904:	5f344632 	svcpl	0x00344632
 908:	2f62696c 	svccs	0x0062696c
 90c:	49534d43 	ldmdbmi	r3, {r0, r1, r6, r8, sl, fp, lr}^
 910:	6e692f53 	mcrvs	15, 3, r2, cr9, cr3, {2}
 914:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
 918:	2e2e0065 	cdpcs	0, 2, cr0, cr14, cr5, {3}
 91c:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
 920:	4d54532f 	ldclmi	3, cr5, [r4, #-188]	; 0xffffff44
 924:	34463233 	strbcc	r3, [r6], #-563	; 0xfffffdcd
 928:	62696c5f 	rsbvs	r6, r9, #24320	; 0x5f00
 92c:	4d54532f 	ldclmi	3, cr5, [r4, #-188]	; 0xffffff44
 930:	34463233 	strbcc	r3, [r6], #-563	; 0xfffffdcd
 934:	535f7878 	cmppl	pc, #120, 16	; 0x780000
 938:	65506474 	ldrbvs	r6, [r0, #-1140]	; 0xfffffb8c
 93c:	68706972 	ldmdavs	r0!, {r1, r4, r5, r6, r8, fp, sp, lr}^
 940:	6972445f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, sl, lr}^
 944:	2f726576 	svccs	0x00726576
 948:	00636e69 	rsbeq	r6, r3, r9, ror #28
 94c:	73696d00 	cmnvc	r9, #0, 26
 950:	00632e63 	rsbeq	r2, r3, r3, ror #28
 954:	5f000001 	svcpl	0x00000001
 958:	61666564 	cmnvs	r6, r4, ror #10
 95c:	5f746c75 	svcpl	0x00746c75
 960:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
 964:	00682e73 	rsbeq	r2, r8, r3, ror lr
 968:	5f000002 	svcpl	0x00000002
 96c:	69647473 	stmdbvs	r4!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
 970:	682e746e 	stmdavs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
 974:	00000300 	andeq	r0, r0, r0, lsl #6
 978:	65726f63 	ldrbvs	r6, [r2, #-3939]!	; 0xfffff09d
 97c:	346d635f 	strbtcc	r6, [sp], #-863	; 0xfffffca1
 980:	0400682e 	streq	r6, [r0], #-2094	; 0xfffff7d2
 984:	79730000 	ldmdbvc	r3!, {}^	; <UNPREDICTABLE>
 988:	6d657473 	cfstrdvs	mvd7, [r5, #-460]!	; 0xfffffe34
 98c:	6d74735f 	ldclvs	3, cr7, [r4, #-380]!	; 0xfffffe84
 990:	34663233 	strbtcc	r3, [r6], #-563	; 0xfffffdcd
 994:	682e7878 	stmdavs	lr!, {r3, r4, r5, r6, fp, ip, sp, lr}
 998:	00000500 	andeq	r0, r0, r0, lsl #10
 99c:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
 9a0:	78346632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, sp, lr}
 9a4:	00682e78 	rsbeq	r2, r8, r8, ror lr
 9a8:	6d000005 	stcvs	0, cr0, [r0, #-20]	; 0xffffffec
 9ac:	2e637369 	cdpcs	3, 6, cr7, cr3, cr9, {3}
 9b0:	00050068 	andeq	r0, r5, r8, rrx
 9b4:	05000000 	streq	r0, [r0, #-0]
 9b8:	00221402 	eoreq	r1, r2, r2, lsl #8
 9bc:	00f60320 	rscseq	r0, r6, r0, lsr #6
 9c0:	03594f01 	cmpeq	r9, #1, 30
 9c4:	c14b900c 	cmpgt	fp, ip
 9c8:	92759f4d 	rsbsls	r9, r5, #308	; 0x134
 9cc:	b05aae91 			; <UNDEFINED> instruction: 0xb05aae91
 9d0:	032d6757 			; <UNDEFINED> instruction: 0x032d6757
 9d4:	571e2e09 	ldrpl	r2, [lr, -r9, lsl #28]
 9d8:	034d2d67 	movteq	r2, #56679	; 0xdd67
 9dc:	835d900c 	cmphi	sp, #12
 9e0:	95900d03 	ldrls	r0, [r0, #3331]	; 0xd03
 9e4:	841e7a4c 	ldrhi	r7, [lr], #-2636	; 0xfffff5b4
 9e8:	4d740b03 	fldmdbxmi	r4!, {d16}	;@ Deprecated
 9ec:	681e6c3e 	ldmdavs	lr, {r1, r2, r3, r4, r5, sl, fp, sp, lr}
 9f0:	01000602 	tsteq	r0, r2, lsl #12
 9f4:	00014e01 	andeq	r4, r1, r1, lsl #28
 9f8:	08000200 	stmdaeq	r0, {r9}
 9fc:	02000001 	andeq	r0, r0, #1
 a00:	0d0efb01 	vstreq	d15, [lr, #-4]
 a04:	01010100 	mrseq	r0, (UNDEF: 17)
 a08:	00000001 	andeq	r0, r0, r1
 a0c:	01000001 	tsteq	r0, r1
 a10:	552f3a43 	strpl	r3, [pc, #-2627]!	; ffffffd5 <GPIO_Ports+0xdfffcf65>
 a14:	73726573 	cmnvc	r2, #482344960	; 0x1cc00000
 a18:	6164412f 	cmnvs	r4, pc, lsr #2
 a1c:	4f2f746d 	svcmi	0x002f746d
 a20:	7244656e 	subvc	r6, r4, #461373440	; 0x1b800000
 a24:	2f657669 	svccs	0x00657669
 a28:	756b6f44 	strbvc	r6, [fp, #-3908]!	; 0xfffff0bc
 a2c:	746e656d 	strbtvc	r6, [lr], #-1389	; 0xfffffa93
 a30:	7469472f 	strbtvc	r4, [r9], #-1839	; 0xfffff8d1
 a34:	2f627548 	svccs	0x00627548
 a38:	32544144 	subscc	r4, r4, #68, 2
 a3c:	4c2d3039 	stcmi	0, cr3, [sp], #-228	; 0xffffff1c
 a40:	736d7261 	cmnvc	sp, #268435462	; 0x10000006
 a44:	65747379 	ldrbvs	r7, [r4, #-889]!	; 0xfffffc87
 a48:	6f6b2f6d 	svcvs	0x006b2f6d
 a4c:	696c2f64 	stmdbvs	ip!, {r2, r5, r6, r8, r9, sl, fp, sp}^
 a50:	3a630062 	bcc	18c0be0 <startup-0x1e73f420>
 a54:	6573635c 	ldrbvs	r6, [r3, #-860]!	; 0xfffffca4
 a58:	5c707061 	ldclpl	0, cr7, [r0], #-388	; 0xfffffe7c
 a5c:	65646f63 	strbvs	r6, [r4, #-3939]!	; 0xfffff09d
 a60:	6574696c 	ldrbvs	r6, [r4, #-2412]!	; 0xfffff694
 a64:	6f6f745c 	svcvs	0x006f745c
 a68:	675c736c 	ldrbvs	r7, [ip, -ip, ror #6]
 a6c:	612d6363 			; <UNDEFINED> instruction: 0x612d6363
 a70:	615c6d72 	cmpvs	ip, r2, ror sp
 a74:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
 a78:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
 a7c:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
 a80:	636e695c 	cmnvs	lr, #92, 18	; 0x170000
 a84:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
 a88:	63616d5c 	cmnvs	r1, #92, 26	; 0x1700
 a8c:	656e6968 	strbvs	r6, [lr, #-2408]!	; 0xfffff698
 a90:	5c3a6300 	ldcpl	3, cr6, [sl], #-0
 a94:	61657363 	cmnvs	r5, r3, ror #6
 a98:	635c7070 	cmpvs	ip, #112	; 0x70
 a9c:	6c65646f 	cfstrdvs	mvd6, [r5], #-444	; 0xfffffe44
 aa0:	5c657469 	cfstrdpl	mvd7, [r5], #-420	; 0xfffffe5c
 aa4:	6c6f6f74 	stclvs	15, cr6, [pc], #-464	; 8dc <startup-0x1ffff724>
 aa8:	63675c73 	cmnvs	r7, #29440	; 0x7300
 aac:	72612d63 	rsbvc	r2, r1, #6336	; 0x18c0
 ab0:	72615c6d 	rsbvc	r5, r1, #27904	; 0x6d00
 ab4:	6f6e2d6d 	svcvs	0x006e2d6d
 ab8:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
 abc:	5c696261 	sfmpl	f6, 2, [r9], #-388	; 0xfffffe7c
 ac0:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
 ac4:	5c656475 	cfstrdpl	mvd6, [r5], #-468	; 0xfffffe2c
 ac8:	00737973 	rsbseq	r7, r3, r3, ror r9
 acc:	66756200 	ldrbtvs	r6, [r5], -r0, lsl #4
 ad0:	2e726566 	cdpcs	5, 7, cr6, cr2, cr6, {3}
 ad4:	00010063 	andeq	r0, r1, r3, rrx
 ad8:	65645f00 	strbvs	r5, [r4, #-3840]!	; 0xfffff100
 adc:	6c756166 	ldfvse	f6, [r5], #-408	; 0xfffffe68
 ae0:	79745f74 	ldmdbvc	r4!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
 ae4:	2e736570 	mrccs	5, 3, r6, cr3, cr0, {3}
 ae8:	00020068 	andeq	r0, r2, r8, rrx
 aec:	74735f00 	ldrbtvc	r5, [r3], #-3840	; 0xfffff100
 af0:	746e6964 	strbtvc	r6, [lr], #-2404	; 0xfffff69c
 af4:	0300682e 	movweq	r6, #2094	; 0x82e
 af8:	75620000 	strbvc	r0, [r2, #-0]!
 afc:	72656666 	rsbvc	r6, r5, #106954752	; 0x6600000
 b00:	0100682e 	tsteq	r0, lr, lsr #16
 b04:	00000000 	andeq	r0, r0, r0
 b08:	23d80205 	bicscs	r0, r8, #1342177280	; 0x50000000
 b0c:	4b152000 	blmi	548b14 <startup-0x1fab74ec>
 b10:	4e4b4b4b 	vmlsmi.f64	d20, d11, d11
 b14:	c9325976 	ldmdbgt	r2!, {r1, r2, r4, r5, r6, r8, fp, ip, lr}
 b18:	214c5985 	smlalbbcs	r5, ip, r5, r9
 b1c:	02007a4e 	andeq	r7, r0, #319488	; 0x4e000
 b20:	58060104 	stmdapl	r6, {r2, r8}
 b24:	02040200 	andeq	r0, r4, #0, 4
 b28:	04020066 	streq	r0, [r2], #-102	; 0xffffff9a
 b2c:	02002004 	andeq	r2, r0, #4
 b30:	3f060404 	svccc	0x00060404
 b34:	04040200 	streq	r0, [r4], #-512	; 0xfffffe00
 b38:	595a4e67 	ldmdbpl	sl, {r0, r1, r2, r5, r6, r9, sl, fp, lr}^
 b3c:	5985c932 	stmibpl	r5, {r1, r4, r5, r8, fp, lr, pc}
 b40:	0402214c 	streq	r2, [r2], #-332	; 0xfffffeb4
 b44:	4f010100 	svcmi	0x00010100
 b48:	02000003 	andeq	r0, r0, #3
 b4c:	0001de00 	andeq	sp, r1, r0, lsl #28
 b50:	fb010200 	blx	4135a <startup-0x1ffbeca6>
 b54:	01000d0e 	tsteq	r0, lr, lsl #26
 b58:	00010101 	andeq	r0, r1, r1, lsl #2
 b5c:	00010000 	andeq	r0, r1, r0
 b60:	3a430100 	bcc	10c0f68 <startup-0x1ef3f098>
 b64:	6573552f 	ldrbvs	r5, [r3, #-1327]!	; 0xfffffad1
 b68:	412f7372 			; <UNDEFINED> instruction: 0x412f7372
 b6c:	746d6164 	strbtvc	r6, [sp], #-356	; 0xfffffe9c
 b70:	656e4f2f 	strbvs	r4, [lr, #-3887]!	; 0xfffff0d1
 b74:	76697244 	strbtvc	r7, [r9], -r4, asr #4
 b78:	6f442f65 	svcvs	0x00442f65
 b7c:	656d756b 	strbvs	r7, [sp, #-1387]!	; 0xfffffa95
 b80:	472f746e 	strmi	r7, [pc, -lr, ror #8]!
 b84:	75487469 	strbvc	r7, [r8, #-1129]	; 0xfffffb97
 b88:	41442f62 	cmpmi	r4, r2, ror #30
 b8c:	30393254 	eorscc	r3, r9, r4, asr r2
 b90:	72614c2d 	rsbvc	r4, r1, #11520	; 0x2d00
 b94:	7379736d 	cmnvc	r9, #-1275068415	; 0xb4000001
 b98:	2f6d6574 	svccs	0x006d6574
 b9c:	2f646f6b 	svccs	0x00646f6b
 ba0:	2f62696c 	svccs	0x0062696c
 ba4:	334d5453 	movtcc	r5, #54355	; 0xd453
 ba8:	5f344632 	svcpl	0x00344632
 bac:	2f62696c 	svccs	0x0062696c
 bb0:	334d5453 	movtcc	r5, #54355	; 0xd453
 bb4:	78344632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, lr}
 bb8:	74535f78 	ldrbvc	r5, [r3], #-3960	; 0xfffff088
 bbc:	72655064 	rsbvc	r5, r5, #100	; 0x64
 bc0:	5f687069 	svcpl	0x00687069
 bc4:	76697244 	strbtvc	r7, [r9], -r4, asr #4
 bc8:	732f7265 			; <UNDEFINED> instruction: 0x732f7265
 bcc:	63006372 	movwvs	r6, #882	; 0x372
 bd0:	73635c3a 	cmnvc	r3, #14848	; 0x3a00
 bd4:	70706165 	rsbsvc	r6, r0, r5, ror #2
 bd8:	646f635c 	strbtvs	r6, [pc], #-860	; be0 <startup-0x1ffff420>
 bdc:	74696c65 	strbtvc	r6, [r9], #-3173	; 0xfffff39b
 be0:	6f745c65 	svcvs	0x00745c65
 be4:	5c736c6f 	ldclpl	12, cr6, [r3], #-444	; 0xfffffe44
 be8:	2d636367 	stclcs	3, cr6, [r3, #-412]!	; 0xfffffe64
 bec:	5c6d7261 	sfmpl	f7, 2, [sp], #-388	; 0xfffffe7c
 bf0:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
 bf4:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
 bf8:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
 bfc:	6e695c69 	cdpvs	12, 6, cr5, cr9, cr9, {3}
 c00:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
 c04:	616d5c65 	cmnvs	sp, r5, ror #24
 c08:	6e696863 	cdpvs	8, 6, cr6, cr9, cr3, {3}
 c0c:	3a630065 	bcc	18c0da8 <startup-0x1e73f258>
 c10:	6573635c 	ldrbvs	r6, [r3, #-860]!	; 0xfffffca4
 c14:	5c707061 	ldclpl	0, cr7, [r0], #-388	; 0xfffffe7c
 c18:	65646f63 	strbvs	r6, [r4, #-3939]!	; 0xfffff09d
 c1c:	6574696c 	ldrbvs	r6, [r4, #-2412]!	; 0xfffff694
 c20:	6f6f745c 	svcvs	0x006f745c
 c24:	675c736c 	ldrbvs	r7, [ip, -ip, ror #6]
 c28:	612d6363 			; <UNDEFINED> instruction: 0x612d6363
 c2c:	615c6d72 	cmpvs	ip, r2, ror sp
 c30:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
 c34:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
 c38:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
 c3c:	636e695c 	cmnvs	lr, #92, 18	; 0x170000
 c40:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
 c44:	7379735c 	cmnvc	r9, #92, 6	; 0x70000001
 c48:	2f2e2e00 	svccs	0x002e2e00
 c4c:	2f62696c 	svccs	0x0062696c
 c50:	334d5453 	movtcc	r5, #54355	; 0xd453
 c54:	5f344632 	svcpl	0x00344632
 c58:	2f62696c 	svccs	0x0062696c
 c5c:	49534d43 	ldmdbmi	r3, {r0, r1, r6, r8, sl, fp, lr}^
 c60:	6e692f53 	mcrvs	15, 3, r2, cr9, cr3, {2}
 c64:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
 c68:	2e2e0065 	cdpcs	0, 2, cr0, cr14, cr5, {3}
 c6c:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
 c70:	4d54532f 	ldclmi	3, cr5, [r4, #-188]	; 0xffffff44
 c74:	34463233 	strbcc	r3, [r6], #-563	; 0xfffffdcd
 c78:	62696c5f 	rsbvs	r6, r9, #24320	; 0x5f00
 c7c:	4d54532f 	ldclmi	3, cr5, [r4, #-188]	; 0xffffff44
 c80:	34463233 	strbcc	r3, [r6], #-563	; 0xfffffdcd
 c84:	535f7878 	cmppl	pc, #120, 16	; 0x780000
 c88:	65506474 	ldrbvs	r6, [r0, #-1140]	; 0xfffffb8c
 c8c:	68706972 	ldmdavs	r0!, {r1, r4, r5, r6, r8, fp, sp, lr}^
 c90:	6972445f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, sl, lr}^
 c94:	2f726576 	svccs	0x00726576
 c98:	00636e69 	rsbeq	r6, r3, r9, ror #28
 c9c:	6d747300 	ldclvs	3, cr7, [r4, #-0]
 ca0:	34663233 	strbtcc	r3, [r6], #-563	; 0xfffffdcd
 ca4:	755f7878 	ldrbvc	r7, [pc, #-2168]	; 434 <startup-0x1ffffbcc>
 ca8:	74726173 	ldrbtvc	r6, [r2], #-371	; 0xfffffe8d
 cac:	0100632e 	tsteq	r0, lr, lsr #6
 cb0:	645f0000 	ldrbvs	r0, [pc], #-0	; cb8 <startup-0x1ffff348>
 cb4:	75616665 	strbvc	r6, [r1, #-1637]!	; 0xfffff99b
 cb8:	745f746c 	ldrbvc	r7, [pc], #-1132	; cc0 <startup-0x1ffff340>
 cbc:	73657079 	cmnvc	r5, #121	; 0x79
 cc0:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
 cc4:	735f0000 	cmpvc	pc, #0
 cc8:	6e696474 	mcrvs	4, 3, r6, cr9, cr4, {3}
 ccc:	00682e74 	rsbeq	r2, r8, r4, ror lr
 cd0:	63000003 	movwvs	r0, #3
 cd4:	5f65726f 	svcpl	0x0065726f
 cd8:	2e346d63 	cdpcs	13, 3, cr6, cr4, cr3, {3}
 cdc:	00040068 	andeq	r0, r4, r8, rrx
 ce0:	73797300 	cmnvc	r9, #0, 6
 ce4:	5f6d6574 	svcpl	0x006d6574
 ce8:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
 cec:	78346632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, sp, lr}
 cf0:	00682e78 	rsbeq	r2, r8, r8, ror lr
 cf4:	73000005 	movwvc	r0, #5
 cf8:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
 cfc:	78783466 	ldmdavc	r8!, {r1, r2, r5, r6, sl, ip, sp}^
 d00:	0500682e 	streq	r6, [r0, #-2094]	; 0xfffff7d2
 d04:	74730000 	ldrbtvc	r0, [r3], #-0
 d08:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
 d0c:	5f787834 	svcpl	0x00787834
 d10:	72617375 	rsbvc	r7, r1, #-738197503	; 0xd4000001
 d14:	00682e74 	rsbeq	r2, r8, r4, ror lr
 d18:	73000005 	movwvc	r0, #5
 d1c:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
 d20:	78783466 	ldmdavc	r8!, {r1, r2, r5, r6, sl, ip, sp}^
 d24:	6363725f 	cmnvs	r3, #-268435451	; 0xf0000005
 d28:	0500682e 	streq	r6, [r0, #-2094]	; 0xfffff7d2
 d2c:	00000000 	andeq	r0, r0, r0
 d30:	25000205 	strcs	r0, [r0, #-517]	; 0xfffffdfb
 d34:	bb032000 	bllt	c8d3c <startup-0x1ff372c4>
 d38:	4c4e0101 	stfmie	f0, [lr], {1}
 d3c:	4a28034b 	bmi	a01a70 <startup-0x1f5fe590>
 d40:	4c205a03 			; <UNDEFINED> instruction: 0x4c205a03
 d44:	66230367 	strtvs	r0, [r3], -r7, ror #6
 d48:	4c205f03 	stcmi	15, cr5, [r0], #-12
 d4c:	661e0367 	ldrvs	r0, [lr], -r7, ror #6
 d50:	4c206403 	cfstrsmi	mvf6, [r0], #-12
 d54:	66190367 	ldrvs	r0, [r9], -r7, ror #6
 d58:	4c206903 			; <UNDEFINED> instruction: 0x4c206903
 d5c:	66140367 	ldrvs	r0, [r4], -r7, ror #6
 d60:	4c206e03 	stcmi	14, cr6, [r0], #-12
 d64:	4a0f034b 	bmi	3c1a98 <startup-0x1fc3e568>
 d68:	4c207303 	stcmi	3, cr7, [r0], #-12
 d6c:	660a0367 	strvs	r0, [sl], -r7, ror #6
 d70:	4c207a03 			; <UNDEFINED> instruction: 0x4c207a03
 d74:	0c036967 			; <UNDEFINED> instruction: 0x0c036967
 d78:	4b594a08 	blmi	16535a0 <startup-0x1e9aca60>
 d7c:	2e13032f 	cdpcs	3, 1, cr0, cr3, cr15, {1}
 d80:	4d694e4d 	stclmi	14, cr4, [r9, #-308]!	; 0xfffffecc
 d84:	2d67504d 	stclcs	0, cr5, [r7, #-308]!	; 0xfffffecc
 d88:	4e4d4d6a 	cdpmi	13, 4, cr4, cr13, cr10, {3}
 d8c:	005a4e69 	subseq	r4, sl, r9, ror #28
 d90:	06010402 	streq	r0, [r1], -r2, lsl #8
 d94:	5c4c064a 	mcrrpl	6, 4, r0, ip, cr10
 d98:	e6f7694e 	ldrbt	r6, [r7], lr, asr #18
 d9c:	e8687785 	stmda	r8!, {r0, r2, r7, r8, r9, sl, ip, sp, lr}^
 da0:	09034bda 	stmdbeq	r3, {r1, r3, r4, r6, r7, r8, r9, fp, lr}
 da4:	3d4b4cd6 	stclcc	12, cr4, [fp, #-856]	; 0xfffffca8
 da8:	3d3d3d3d 	ldccc	13, cr3, [sp, #-244]!	; 0xffffff0c
 dac:	594a0c03 	stmdbpl	sl, {r0, r1, sl, fp}^
 db0:	4c2e0903 			; <UNDEFINED> instruction: 0x4c2e0903
 db4:	3fab4b50 	svccc	0x00ab4b50
 db8:	6609034b 	strvs	r0, [r9], -fp, asr #6
 dbc:	3d3d3d4c 	ldccc	13, cr3, [sp, #-304]!	; 0xfffffed0
 dc0:	4a0b033d 	bmi	2c1abc <startup-0x1fd3e544>
 dc4:	1e974d79 	mrcne	13, 4, r4, cr7, cr9, {3}
 dc8:	740b0384 	strvc	r0, [fp], #-900	; 0xfffffc7c
 dcc:	039f8479 	orrseq	r8, pc, #2030043136	; 0x79000000
 dd0:	4d794a0d 	vldmdbmi	r9!, {s9-s21}
 dd4:	03841e89 	orreq	r1, r4, #2192	; 0x890
 dd8:	4d79740b 	cfldrdmi	mvd7, [r9, #-44]!	; 0xffffffd4
 ddc:	03841e97 	orreq	r1, r4, #2416	; 0x970
 de0:	757a742a 	ldrbvc	r7, [sl, #-1066]!	; 0xfffffbd6
 de4:	4f4a0903 	svcmi	0x004a0903
 de8:	4a2e0367 	bmi	b81b8c <startup-0x1f47e474>
 dec:	039f847a 	orrseq	r8, pc, #2046820352	; 0x7a000000
 df0:	4d794a0b 	vldmdbmi	r9!, {s9-s19}
 df4:	03841e89 	orreq	r1, r4, #2192	; 0x890
 df8:	83794a0c 	cmnhi	r9, #12, 20	; 0xc000
 dfc:	743e0391 	ldrtvc	r0, [lr], #-913	; 0xfffffc6f
 e00:	03918379 	orrseq	r8, r1, #-469762047	; 0xe4000001
 e04:	4d794a0b 	vldmdbmi	r9!, {s9-s19}
 e08:	03841e97 	orreq	r1, r4, #2416	; 0x970
 e0c:	834f7409 	movthi	r7, #62473	; 0xf409
 e10:	794a2f03 	stmdbvc	sl, {r0, r1, r8, r9, sl, fp, sp}^
 e14:	841e894d 	ldrhi	r8, [lr], #-2381	; 0xfffff6b3
 e18:	4a00c503 	bmi	3222c <startup-0x1ffcddd4>
 e1c:	03bb8479 			; <UNDEFINED> instruction: 0x03bb8479
 e20:	4d784a0b 	vldmdbmi	r8!, {s9-s19}
 e24:	03841e89 	orreq	r1, r4, #2192	; 0x890
 e28:	4d784a0b 	vldmdbmi	r8!, {s9-s19}
 e2c:	03841e89 	orreq	r1, r4, #2192	; 0x890
 e30:	83794a39 	cmnhi	r9, #233472	; 0x39000
 e34:	4a0b0391 	bmi	2c1c80 <startup-0x1fd3e380>
 e38:	1e894d79 	mcrne	13, 4, r4, cr9, cr9, {3}
 e3c:	4a1f0384 	bmi	7c1c54 <startup-0x1f83e3ac>
 e40:	1e984ec0 	cdpne	14, 9, cr4, cr8, cr0, {6}
 e44:	00f203ae 	rscseq	r0, r2, lr, lsr #7
 e48:	0367bb4a 	cmneq	r7, #75776	; 0x12800
 e4c:	69312e0c 	ldmdbvs	r1!, {r2, r3, r9, sl, fp, sp}
 e50:	4c3e5a59 			; <UNDEFINED> instruction: 0x4c3e5a59
 e54:	4c3e4e3e 	ldcmi	14, cr4, [lr], #-248	; 0xffffff08
 e58:	03761e6c 	cmneq	r6, #108, 28	; 0x6c0
 e5c:	03754a15 	cmneq	r5, #86016	; 0x15000
 e60:	5c924a0b 	vldmiapl	r2, {s8-s18}
 e64:	1c033d4c 	stcne	13, cr3, [r3], {76}	; 0x4c
 e68:	740b034a 	strvc	r0, [fp], #-842	; 0xfffffcb6
 e6c:	4a160367 	bmi	581c10 <startup-0x1fa7e3f0>
 e70:	0c036775 	stceq	7, cr6, [r3], {117}	; 0x75
 e74:	5a59684a 	bpl	165afa4 <startup-0x1e9a505c>
 e78:	863e843e 			; <UNDEFINED> instruction: 0x863e843e
 e7c:	75595977 	ldrbvc	r5, [r9, #-2423]	; 0xfffff689
 e80:	01040200 	mrseq	r0, R12_usr
 e84:	3e063c06 	cdpcc	12, 0, cr3, cr6, cr6, {0}
 e88:	033d4d5c 	teqeq	sp, #92, 26	; 0x1700
 e8c:	03754a1d 	cmneq	r5, #118784	; 0x1d000
 e90:	6759820b 	ldrbvs	r8, [r9, -fp, lsl #4]
 e94:	00040267 	andeq	r0, r4, r7, ror #4
 e98:	Address 0x00000e98 is out of bounds.


Disassembly of section .debug_str:

00000000 <.debug_str>:
       0:	706c6c70 	rsbvc	r6, ip, r0, ror ip
       4:	45535200 	ldrbmi	r5, [r3, #-512]	; 0xfffffe00
       8:	44455652 	strbmi	r5, [r5], #-1618	; 0xfffff9ae
       c:	6f640031 	svcvs	0x00640031
      10:	3532726f 	ldrcc	r7, [r2, #-623]!	; 0xfffffd91
      14:	6f6f6400 	svcvs	0x006f6400
      18:	00363272 	eorseq	r3, r6, r2, ror r2
      1c:	5f435452 	svcpl	0x00435452
      20:	50554b57 	subspl	r4, r5, r7, asr fp
      24:	5152495f 	cmppl	r2, pc, asr r9
      28:	5845006e 	stmdapl	r5, {r1, r2, r3, r5, r6}^
      2c:	5f324954 	svcpl	0x00324954
      30:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
      34:	414d4400 	cmpmi	sp, r0, lsl #8
      38:	74535f31 	ldrbvc	r5, [r3], #-3889	; 0xfffff0cf
      3c:	6d616572 	cfstr64vs	mvdx6, [r1, #-456]!	; 0xfffffe38
      40:	52495f36 	subpl	r5, r9, #54, 30	; 0xd8
      44:	54006e51 	strpl	r6, [r0], #-3665	; 0xfffff1af
      48:	5f384d49 	svcpl	0x00384d49
      4c:	545f5055 	ldrbpl	r5, [pc], #-85	; 54 <startup-0x1fffffac>
      50:	33314d49 	teqcc	r1, #4672	; 0x1240
      54:	5152495f 	cmppl	r2, pc, asr r9
      58:	4c50006e 	mrrcmi	0, 6, r0, r0, cr14	; <UNPREDICTABLE>
      5c:	5332494c 	teqpl	r2, #76, 18	; 0x130000
      60:	52474643 	subpl	r4, r7, #70254592	; 0x4300000
      64:	43435200 	movtmi	r5, #12800	; 0x3200
      68:	5332495f 	teqpl	r2, #1556480	; 0x17c000
      6c:	434b4c43 	movtmi	r4, #48195	; 0xbc43
      70:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
      74:	43520067 	cmpmi	r2, #103	; 0x67
      78:	65475f43 	strbvs	r5, [r7, #-3907]	; 0xfffff0bd
      7c:	6f6c4374 	svcvs	0x006c4374
      80:	46736b63 	ldrbtmi	r6, [r3], -r3, ror #22
      84:	00716572 	rsbseq	r6, r1, r2, ror r5
      88:	32414d44 	subcc	r4, r1, #68, 26	; 0x1100
      8c:	7274535f 	rsbsvc	r5, r4, #2080374785	; 0x7c000001
      90:	316d6165 	cmncc	sp, r5, ror #2
      94:	5152495f 	cmppl	r2, pc, asr r9
      98:	4348006e 	movtmi	r0, #32878	; 0x806e
      9c:	465f4b4c 	ldrbmi	r4, [pc], -ip, asr #22
      a0:	75716572 	ldrbvc	r6, [r1, #-1394]!	; 0xfffffa8e
      a4:	79636e65 	stmdbvc	r3!, {r0, r2, r5, r6, r9, sl, fp, sp, lr}^
      a8:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
      ac:	75505f4f 	ldrbvc	r5, [r0, #-3919]	; 0xfffff0b1
      b0:	4e5f6450 	mrcmi	4, 2, r6, cr15, cr0, {2}
      b4:	4c55504f 	mrrcmi	0, 4, r5, r5, cr15	; <UNPREDICTABLE>
      b8:	5456004c 	ldrbpl	r0, [r6], #-76	; 0xffffffb4
      bc:	5300524f 	movwpl	r5, #591	; 0x24f
      c0:	5f334950 	svcpl	0x00334950
      c4:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
      c8:	414c4600 	cmpmi	ip, r0, lsl #12
      cc:	495f4853 	ldmdbmi	pc, {r0, r1, r4, r6, fp, lr}^	; <UNPREDICTABLE>
      d0:	006e5152 	rsbeq	r5, lr, r2, asr r1
      d4:	726f6f64 	rsbvc	r6, pc, #100, 30	; 0x190
      d8:	44003233 	strmi	r3, [r0], #-563	; 0xfffffdcd
      dc:	5f494d43 	svcpl	0x00494d43
      e0:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
      e4:	43435200 	movtmi	r5, #12800	; 0x3200
      e8:	4250415f 	subsmi	r4, r0, #-1073741801	; 0xc0000017
      ec:	72655032 	rsbvc	r5, r5, #50	; 0x32
      f0:	43687069 	cmnmi	r8, #105	; 0x69
      f4:	6b636f6c 	blvs	18dbeac <startup-0x1e724154>
      f8:	6f4d504c 	svcvs	0x004d504c
      fc:	6d436564 	cfstr64vs	mvdx6, [r3, #-400]	; 0xfffffe70
     100:	43520064 	cmpmi	r2, #100	; 0x64
     104:	48415f43 	stmdami	r1, {r0, r1, r6, r8, r9, sl, fp, ip, lr}^
     108:	65503242 	ldrbvs	r3, [r0, #-578]	; 0xfffffdbe
     10c:	68706972 	ldmdavs	r0!, {r1, r4, r5, r6, r8, fp, sp, lr}^
     110:	636f6c43 	cmnvs	pc, #17152	; 0x4300
     114:	4d504c6b 	ldclmi	12, cr4, [r0, #-428]	; 0xfffffe54
     118:	4365646f 	cmnmi	r5, #1862270976	; 0x6f000000
     11c:	7200646d 	andvc	r6, r0, #1828716544	; 0x6d000000
     120:	72757465 	rsbsvc	r7, r5, #1694498816	; 0x65000000
     124:	646f436e 	strbtvs	r4, [pc], #-878	; 12c <startup-0x1ffffed4>
     128:	50470065 	subpl	r0, r7, r5, rrx
     12c:	544f4f49 	strbpl	r4, [pc], #-3913	; 134 <startup-0x1ffffecc>
     130:	5f657079 	svcpl	0x00657079
     134:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0xfffff6ac
     138:	00666544 	rsbeq	r6, r6, r4, asr #10
     13c:	5f434352 	svcpl	0x00434352
     140:	31425041 	cmpcc	r2, r1, asr #32
     144:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
     148:	65526870 	ldrbvs	r6, [r2, #-2160]	; 0xfffff790
     14c:	43746573 	cmnmi	r4, #482344960	; 0x1cc00000
     150:	5200646d 	andpl	r6, r0, #1828716544	; 0x6d000000
     154:	4d5f4343 	ldclmi	3, cr4, [pc, #-268]	; 50 <startup-0x1fffffb0>
     158:	0065646f 	rsbeq	r6, r5, pc, ror #8
     15c:	324d4954 	subcc	r4, sp, #84, 18	; 0x150000
     160:	5152495f 	cmppl	r2, pc, asr r9
     164:	4352006e 	cmpmi	r2, #110	; 0x6e
     168:	54525f43 	ldrbpl	r5, [r2], #-3907	; 0xfffff0bd
     16c:	4b4c4343 	blmi	1310e80 <startup-0x1ecef180>
     170:	72756f53 	rsbsvc	r6, r5, #332	; 0x14c
     174:	52006563 	andpl	r6, r0, #415236096	; 0x18c00000
     178:	415f4343 	cmpmi	pc, r3, asr #6
     17c:	50324248 	eorspl	r4, r2, r8, asr #4
     180:	70697265 	rsbvc	r7, r9, r5, ror #4
     184:	6f6c4368 	svcvs	0x006c4368
     188:	6d436b63 	vstrvs	d22, [r3, #-396]	; 0xfffffe74
     18c:	43490064 	movtmi	r0, #36964	; 0x9064
     190:	52005250 	andpl	r5, r0, #80, 4
     194:	545f4343 	ldrbpl	r4, [pc], #-835	; 19c <startup-0x1ffffe64>
     198:	4c434d49 	mcrrmi	13, 4, r4, r3, cr9
     19c:	6572504b 	ldrbvs	r5, [r2, #-75]!	; 0xffffffb5
     1a0:	6e6f4373 	mcrvs	3, 3, r4, cr15, cr3, {3}
     1a4:	00676966 	rsbeq	r6, r7, r6, ror #18
     1a8:	5f434352 	svcpl	0x00434352
     1ac:	494c4c50 	stmdbmi	ip, {r4, r6, sl, fp, lr}^
     1b0:	6d435332 	stclvs	3, cr5, [r3, #-200]	; 0xffffff38
     1b4:	43520064 	cmpmi	r2, #100	; 0x64
     1b8:	43485f43 	movtmi	r5, #36675	; 0x8f43
     1bc:	43004b4c 	movwmi	r4, #2892	; 0xb4c
     1c0:	5f324e41 	svcpl	0x00324e41
     1c4:	5f305852 	svcpl	0x00305852
     1c8:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     1cc:	41535500 	cmpmi	r3, r0, lsl #10
     1d0:	5f365452 	svcpl	0x00365452
     1d4:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     1d8:	6d697400 	cfstrdvs	mvd7, [r9, #-0]
     1dc:	616c5f65 	cmnvs	ip, r5, ror #30
     1e0:	5f006d72 	svcpl	0x00006d72
     1e4:	6e69755f 	mcrvs	5, 3, r7, cr9, cr15, {2}
     1e8:	745f3874 	ldrbvc	r3, [pc], #-2164	; 1f0 <startup-0x1ffffe10>
     1ec:	49505300 	ldmdbmi	r0, {r8, r9, ip, lr}^
     1f0:	52495f32 	subpl	r5, r9, #50, 30	; 0xc8
     1f4:	54006e51 	strpl	r6, [r0], #-3665	; 0xfffff1af
     1f8:	5f384d49 	svcpl	0x00384d49
     1fc:	5f4b5242 	svcpl	0x004b5242
     200:	314d4954 	cmpcc	sp, r4, asr r9
     204:	52495f32 	subpl	r5, r9, #50, 30	; 0xc8
     208:	41006e51 	tstmi	r0, r1, asr lr
     20c:	4c324248 	lfmmi	f4, 4, [r2], #-288	; 0xfffffee0
     210:	524e4550 	subpl	r4, lr, #80, 10	; 0x14000000
     214:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
     218:	75505f4f 	ldrbvc	r5, [r0, #-3919]	; 0xfffff0b1
     21c:	445f6450 	ldrbmi	r6, [pc], #-1104	; 224 <startup-0x1ffffddc>
     220:	004e574f 	subeq	r5, lr, pc, asr #14
     224:	43524941 	cmpmi	r2, #1064960	; 0x104000
     228:	43520052 	cmpmi	r2, #82	; 0x52
     22c:	41535f43 	cmpmi	r3, r3, asr #30
     230:	4c4c5049 	mcrrmi	0, 4, r5, ip, cr9
     234:	43494153 	movtmi	r4, #37203	; 0x9153
     238:	69446b6c 	stmdbvs	r4, {r2, r3, r5, r6, r8, r9, fp, sp, lr}^
     23c:	6e6f4376 	mcrvs	3, 3, r4, cr15, cr6, {3}
     240:	00676966 	rsbeq	r6, r7, r6, ror #18
     244:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xfffff197
     248:	4950475f 	ldmdbmi	r0, {r0, r1, r2, r3, r4, r6, r8, r9, sl, lr}^
     24c:	6f505f4f 	svcvs	0x00505f4f
     250:	00737472 	rsbseq	r7, r3, r2, ror r4
     254:	49555043 	ldmdbmi	r5, {r0, r1, r6, ip, lr}^
     258:	79530044 	ldmdbvc	r3, {r2, r6}^
     25c:	63695473 	cmnvs	r9, #1929379840	; 0x73000000
     260:	61485f6b 	cmpvs	r8, fp, ror #30
     264:	656c646e 	strbvs	r6, [ip, #-1134]!	; 0xfffffb92
     268:	43520072 	cmpmi	r2, #114	; 0x72
     26c:	544c5f43 	strbpl	r5, [ip], #-3907	; 0xfffff0bd
     270:	4c434344 	mcrrmi	3, 4, r4, r3, cr4
     274:	7669444b 	strbtvc	r4, [r9], -fp, asr #8
     278:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
     27c:	44006769 	strmi	r6, [r0], #-1897	; 0xfffff897
     280:	5f32414d 	svcpl	0x0032414d
     284:	65727453 	ldrbvs	r7, [r2, #-1107]!	; 0xfffffbad
     288:	5f356d61 	svcpl	0x00356d61
     28c:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     290:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
     294:	6f4d5f4f 	svcvs	0x004d5f4f
     298:	415f6564 	cmpmi	pc, r4, ror #10
     29c:	43520046 	cmpmi	r2, #70	; 0x46
     2a0:	48415f43 	stmdami	r1, {r0, r1, r6, r8, r9, sl, fp, ip, lr}^
     2a4:	65503342 	ldrbvs	r3, [r0, #-834]	; 0xfffffcbe
     2a8:	68706972 	ldmdavs	r0!, {r1, r4, r5, r6, r8, fp, sp, lr}^
     2ac:	65736552 	ldrbvs	r6, [r3, #-1362]!	; 0xfffffaae
     2b0:	646d4374 	strbtvs	r4, [sp], #-884	; 0xfffffc8c
     2b4:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
     2b8:	52545f31 	subspl	r5, r4, #49, 30	; 0xc4
     2bc:	4f435f47 	svcmi	0x00435f47
     2c0:	49545f4d 	ldmdbmi	r4, {r0, r2, r3, r6, r8, r9, sl, fp, ip, lr}^
     2c4:	5f31314d 	svcpl	0x0031314d
     2c8:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     2cc:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
     2d0:	6f4d5f4f 	svcvs	0x004d5f4f
     2d4:	415f6564 	cmpmi	pc, r4, ror #10
     2d8:	4352004e 	cmpmi	r2, #78	; 0x4e
     2dc:	43505f43 	cmpmi	r0, #268	; 0x10c
     2e0:	43324b4c 	teqmi	r2, #76, 22	; 0x13000
     2e4:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
     2e8:	6f630067 	svcvs	0x00630067
     2ec:	6f72746e 	svcvs	0x0072746e
     2f0:	7469626c 	strbtvc	r6, [r9], #-620	; 0xfffffd94
     2f4:	43520073 	cmpmi	r2, #115	; 0x73
     2f8:	65445f43 	strbvs	r5, [r4, #-3907]	; 0xfffff0bd
     2fc:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xfffff1b7
     300:	43435200 	movtmi	r5, #12800	; 0x3200
     304:	4941535f 	stmdbmi	r1, {r0, r1, r2, r3, r4, r6, r8, r9, ip, lr}^
     308:	636f6c42 	cmnvs	pc, #16896	; 0x4200
     30c:	4c43426b 	sfmmi	f4, 2, [r3], {107}	; 0x6b
     310:	6e6f434b 	cdpvs	3, 6, cr4, cr15, cr11, {2}
     314:	00676966 	rsbeq	r6, r7, r6, ror #18
     318:	32425041 	subcc	r5, r2, #65	; 0x41
     31c:	00524e45 	subseq	r4, r2, r5, asr #28
     320:	5f434352 	svcpl	0x00434352
     324:	53746547 	cmnpl	r4, #297795584	; 0x11c00000
     328:	4c435359 	mcrrmi	3, 5, r5, r3, cr9
     32c:	756f534b 	strbvc	r5, [pc, #-843]!	; ffffffe9 <GPIO_Ports+0xdfffcf79>
     330:	00656372 	rsbeq	r6, r5, r2, ror r3
     334:	31424841 	cmpcc	r2, r1, asr #16
     338:	4e45504c 	cdpmi	0, 4, cr5, cr5, cr12, {2}
     33c:	43520052 	cmpmi	r2, #82	; 0x52
     340:	4c505f43 	mrrcmi	15, 4, r5, r0, cr3
     344:	5332494c 	teqpl	r2, #76, 18	; 0x130000
     348:	51766944 	cmnpl	r6, r4, asr #18
     34c:	73795300 	cmnvc	r9, #0, 6
     350:	6b636954 	blvs	18da8a8 <startup-0x1e725758>
     354:	5152495f 	cmppl	r2, pc, asr r9
     358:	4352006e 	cmpmi	r2, #110	; 0x6e
     35c:	48415f43 	stmdami	r1, {r0, r1, r6, r8, r9, sl, fp, ip, lr}^
     360:	65503342 	ldrbvs	r3, [r0, #-834]	; 0xfffffcbe
     364:	68706972 	ldmdavs	r0!, {r1, r4, r5, r6, r8, fp, sp, lr}^
     368:	41535500 	cmpmi	r3, r0, lsl #10
     36c:	5f335452 	svcpl	0x00335452
     370:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     374:	4b434400 	blmi	10d137c <startup-0x1ef2ec84>
     378:	52474643 	subpl	r4, r7, #70254592	; 0x4300000
     37c:	53434900 	movtpl	r4, #14592	; 0x3900
     380:	43520052 	cmpmi	r2, #82	; 0x52
     384:	434d5f43 	movtmi	r5, #57155	; 0xdf43
     388:	6944324f 	stmdbvs	r4, {r0, r1, r2, r3, r6, r9, ip, sp}^
     38c:	50470076 	subpl	r0, r7, r6, ror r0
     390:	4f5f4f49 	svcmi	0x005f4f49
     394:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0xfffff6ac
     398:	00444f5f 	subeq	r4, r4, pc, asr pc
     39c:	4f495047 	svcmi	0x00495047
     3a0:	696e495f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, lr}^
     3a4:	70795474 	rsbsvc	r5, r9, r4, ror r4
     3a8:	66654465 	strbtvs	r4, [r5], -r5, ror #8
     3ac:	43435200 	movtmi	r5, #12800	; 0x3200
     3b0:	5359535f 	cmppl	r9, #2080374785	; 0x7c000001
     3b4:	534b4c43 	movtpl	r4, #48195	; 0xbc43
     3b8:	6372756f 	cmnvs	r2, #465567744	; 0x1bc00000
     3bc:	4d440065 	stclmi	0, cr0, [r4, #-404]	; 0xfffffe6c
     3c0:	535f3141 	cmppl	pc, #1073741840	; 0x40000010
     3c4:	61657274 	smcvs	22308	; 0x5724
     3c8:	495f326d 	ldmdbmi	pc, {r0, r2, r3, r5, r6, r9, ip, sp}^	; <UNPREDICTABLE>
     3cc:	006e5152 	rsbeq	r5, lr, r2, asr r1
     3d0:	5f434352 	svcpl	0x00434352
     3d4:	534c4c50 	movtpl	r4, #52304	; 0xcc50
     3d8:	6372756f 	cmnvs	r2, #465567744	; 0x1bc00000
     3dc:	43520065 	cmpmi	r2, #101	; 0x65
     3e0:	50415f43 	subpl	r5, r1, r3, asr #30
     3e4:	65503142 	ldrbvs	r3, [r0, #-322]	; 0xfffffebe
     3e8:	68706972 	ldmdavs	r0!, {r1, r4, r5, r6, r8, fp, sp, lr}^
     3ec:	636f6c43 	cmnvs	pc, #17152	; 0x4300
     3f0:	646d436b 	strbtvs	r4, [sp], #-875	; 0xfffffc95
     3f4:	53455200 	movtpl	r5, #20992	; 0x5200
     3f8:	45565245 	ldrbmi	r5, [r6, #-581]	; 0xfffffdbb
     3fc:	52003044 	andpl	r3, r0, #68	; 0x44
     400:	52455345 	subpl	r5, r5, #335544321	; 0x14000001
     404:	31444556 	cmpcc	r4, r6, asr r5
     408:	736e7500 	cmnvc	lr, #0, 10
     40c:	656e6769 	strbvs	r6, [lr, #-1897]!	; 0xfffff897
     410:	68632064 	stmdavs	r3!, {r2, r5, r6, sp}^
     414:	44007261 	strmi	r7, [r0], #-609	; 0xfffffd9f
     418:	5f32414d 	svcpl	0x0032414d
     41c:	65727453 	ldrbvs	r7, [r2, #-1107]!	; 0xfffffbad
     420:	5f346d61 	svcpl	0x00346d61
     424:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     428:	53455200 	movtpl	r5, #20992	; 0x5200
     42c:	45565245 	ldrbmi	r5, [r6, #-581]	; 0xfffffdbb
     430:	52003444 	andpl	r3, r0, #68, 8	; 0x44000000
     434:	52455345 	subpl	r5, r5, #335544321	; 0x14000001
     438:	35444556 	strbcc	r4, [r4, #-1366]	; 0xfffffaaa
     43c:	53455200 	movtpl	r5, #20992	; 0x5200
     440:	45565245 	ldrbmi	r5, [r6, #-581]	; 0xfffffdbb
     444:	49003644 	stmdbmi	r0, {r2, r6, r9, sl, ip, sp}
     448:	00524241 	subseq	r4, r2, r1, asr #4
     44c:	4f495047 	svcmi	0x00495047
     450:	79544f5f 	ldmdbvc	r4, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, lr}^
     454:	505f6570 	subspl	r6, pc, r0, ror r5	; <UNPREDICTABLE>
     458:	32490050 	subcc	r0, r9, #80	; 0x50
     45c:	455f3143 	ldrbmi	r3, [pc, #-323]	; 321 <startup-0x1ffffcdf>
     460:	52495f52 	subpl	r5, r9, #328	; 0x148
     464:	43006e51 	movwmi	r6, #3665	; 0xe51
     468:	5f324e41 	svcpl	0x00324e41
     46c:	5f454353 	svcpl	0x00454353
     470:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     474:	43435200 	movtmi	r5, #12800	; 0x3200
     478:	45534c5f 	ldrbmi	r4, [r3, #-3167]	; 0xfffff3a1
     47c:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
     480:	52006769 	andpl	r6, r0, #27525120	; 0x1a40000
     484:	52455345 	subpl	r5, r5, #335544321	; 0x14000001
     488:	32444556 	subcc	r4, r4, #360710144	; 0x15800000
     48c:	53455200 	movtpl	r5, #20992	; 0x5200
     490:	45565245 	ldrbmi	r5, [r6, #-581]	; 0xfffffdbb
     494:	54003344 	strpl	r3, [r0], #-836	; 0xfffffcbc
     498:	5f354d49 	svcpl	0x00354d49
     49c:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     4a0:	61735500 	cmnvs	r3, r0, lsl #10
     4a4:	61466567 	cmpvs	r6, r7, ror #10
     4a8:	5f746c75 	svcpl	0x00746c75
     4ac:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     4b0:	42435300 	submi	r5, r3, #0, 6
     4b4:	7079545f 	rsbsvc	r5, r9, pc, asr r4
     4b8:	50470065 	subpl	r0, r7, r5, rrx
     4bc:	75504f49 	ldrbvc	r4, [r0, #-3913]	; 0xfffff0b7
     4c0:	545f6450 	ldrbpl	r6, [pc], #-1104	; 4c8 <startup-0x1ffffb38>
     4c4:	44657079 	strbtmi	r7, [r5], #-121	; 0xffffff87
     4c8:	44006665 	strmi	r6, [r0], #-1637	; 0xfffff99b
     4cc:	00525346 	subseq	r5, r2, r6, asr #6
     4d0:	31424841 	cmpcc	r2, r1, asr #16
     4d4:	52545352 	subspl	r5, r4, #1207959553	; 0x48000001
     4d8:	43435200 	movtmi	r5, #12800	; 0x3200
     4dc:	4250415f 	subsmi	r4, r0, #-1073741801	; 0xc0000017
     4e0:	72655032 	rsbvc	r5, r5, #50	; 0x32
     4e4:	52687069 	rsbpl	r7, r8, #105	; 0x69
     4e8:	74657365 	strbtvc	r7, [r5], #-869	; 0xfffffc9b
     4ec:	00646d43 	rsbeq	r6, r4, r3, asr #26
     4f0:	726f6f64 	rsbvc	r6, pc, #100, 30	; 0x190
     4f4:	6f640031 	svcvs	0x00640031
     4f8:	0032726f 	eorseq	r7, r2, pc, ror #4
     4fc:	726f6f64 	rsbvc	r6, pc, #100, 30	; 0x190
     500:	6f640033 	svcvs	0x00640033
     504:	0034726f 	eorseq	r7, r4, pc, ror #4
     508:	726f6f64 	rsbvc	r6, pc, #100, 30	; 0x190
     50c:	6f640035 	svcvs	0x00640035
     510:	0036726f 	eorseq	r7, r6, pc, ror #4
     514:	726f6f64 	rsbvc	r6, pc, #100, 30	; 0x190
     518:	6f640038 	svcvs	0x00640038
     51c:	0039726f 	eorseq	r7, r9, pc, ror #4
     520:	5f434352 	svcpl	0x00434352
     524:	33424841 	movtcc	r4, #10305	; 0x2841
     528:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
     52c:	6c436870 	mcrrvs	8, 7, r6, r3, cr0
     530:	4c6b636f 	stclmi	3, cr6, [fp], #-444	; 0xfffffe44
     534:	646f4d50 	strbtvs	r4, [pc], #-3408	; 53c <startup-0x1ffffac4>
     538:	646d4365 	strbtvs	r4, [sp], #-869	; 0xfffffc9b
     53c:	755f5f00 	ldrbvc	r5, [pc, #-3840]	; fffff644 <GPIO_Ports+0xdfffc5d4>
     540:	31746e69 	cmncc	r4, r9, ror #28
     544:	00745f36 	rsbseq	r5, r4, r6, lsr pc
     548:	32424841 	subcc	r4, r2, #4259840	; 0x410000
     54c:	00524e45 	subseq	r4, r2, r5, asr #28
     550:	4b4c4350 	blmi	1311298 <startup-0x1eceed68>
     554:	72465f32 	subvc	r5, r6, #50, 30	; 0xc8
     558:	65757165 	ldrbvs	r7, [r5, #-357]!	; 0xfffffe9b
     55c:	0079636e 	rsbseq	r6, r9, lr, ror #6
     560:	4f495047 	svcmi	0x00495047
     564:	776f4c5f 			; <UNDEFINED> instruction: 0x776f4c5f
     568:	6570535f 	ldrbvs	r5, [r0, #-863]!	; 0xfffffca1
     56c:	43006465 	movwmi	r6, #1125	; 0x465
     570:	5f314e41 	svcpl	0x00314e41
     574:	5f305852 	svcpl	0x00305852
     578:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     57c:	5c3a4300 	ldcpl	3, cr4, [sl], #-0
     580:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
     584:	64415c73 	strbvs	r5, [r1], #-3187	; 0xfffff38d
     588:	5c746d61 	ldclpl	13, cr6, [r4], #-388	; 0xfffffe7c
     58c:	44656e4f 	strbtmi	r6, [r5], #-3663	; 0xfffff1b1
     590:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
     594:	6b6f445c 	blvs	1bd170c <startup-0x1e42e8f4>
     598:	6e656d75 	mcrvs	13, 3, r6, cr5, cr5, {3}
     59c:	69475c74 	stmdbvs	r7, {r2, r4, r5, r6, sl, fp, ip, lr}^
     5a0:	62754874 	rsbsvs	r4, r5, #116, 16	; 0x740000
     5a4:	5441445c 	strbpl	r4, [r1], #-1116	; 0xfffffba4
     5a8:	2d303932 			; <UNDEFINED> instruction: 0x2d303932
     5ac:	6d72614c 	ldfvse	f6, [r2, #-304]!	; 0xfffffed0
     5b0:	74737973 	ldrbtvc	r7, [r3], #-2419	; 0xfffff68d
     5b4:	6b5c6d65 	blvs	171bb50 <startup-0x1e8e44b0>
     5b8:	445c646f 	ldrbmi	r6, [ip], #-1135	; 0xfffffb91
     5bc:	00726f6f 	rsbseq	r6, r2, pc, ror #30
     5c0:	52534648 	subspl	r4, r3, #72, 12	; 0x4800000
     5c4:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
     5c8:	65725f4f 	ldrbvs	r5, [r2, #-3919]!	; 0xfffff0b1
     5cc:	52006461 	andpl	r6, r0, #1627389952	; 0x61000000
     5d0:	535f4343 	cmppl	pc, #201326593	; 0xc000001
     5d4:	4c435359 	mcrrmi	3, 5, r5, r3, cr9
     5d8:	4350004b 	cmpmi	r0, #75	; 0x4b
     5dc:	5f314b4c 	svcpl	0x00314b4c
     5e0:	71657246 	cmnvc	r5, r6, asr #4
     5e4:	636e6575 	cmnvs	lr, #490733568	; 0x1d400000
     5e8:	6f640079 	svcvs	0x00640079
     5ec:	3331726f 	teqcc	r1, #-268435450	; 0xf0000006
     5f0:	4c4c5000 	marmi	acc0, r5, ip
     5f4:	6c61004d 	stclvs	0, cr0, [r1], #-308	; 0xfffffecc
     5f8:	6f645f6c 	svcvs	0x00645f6c
     5fc:	0073726f 	rsbseq	r7, r3, pc, ror #4
     600:	504c4c50 	subpl	r4, ip, r0, asr ip
     604:	4c4c5000 	marmi	acc0, r5, ip
     608:	43520051 	cmpmi	r2, #81	; 0x51
     60c:	534c5f43 	movtpl	r5, #53059	; 0xcf43
     610:	646d4349 	strbtvs	r4, [sp], #-841	; 0xfffffcb7
     614:	6c6c7000 	stclvs	0, cr7, [ip], #-0
     618:	72756f73 	rsbsvc	r6, r5, #460	; 0x1cc
     61c:	54006563 	strpl	r6, [r0], #-1379	; 0xfffffa9d
     620:	5f344d49 	svcpl	0x00344d49
     624:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     628:	554e4700 	strbpl	r4, [lr, #-1792]	; 0xfffff900
     62c:	39394320 	ldmdbcc	r9!, {r5, r8, r9, lr}
     630:	322e3720 	eorcc	r3, lr, #32, 14	; 0x800000
     634:	3220312e 	eorcc	r3, r0, #-2147483637	; 0x8000000b
     638:	30373130 	eorscc	r3, r7, r0, lsr r1
     63c:	20343039 	eorscs	r3, r4, r9, lsr r0
     640:	6c657228 	sfmvs	f7, 2, [r5], #-160	; 0xffffff60
     644:	65736165 	ldrbvs	r6, [r3, #-357]!	; 0xfffffe9b
     648:	415b2029 	cmpmi	fp, r9, lsr #32
     64c:	652f4d52 	strvs	r4, [pc, #-3410]!	; fffff902 <GPIO_Ports+0xdfffc892>
     650:	6465626d 	strbtvs	r6, [r5], #-621	; 0xfffffd93
     654:	2d646564 	cfstr64cs	mvdx6, [r4, #-400]!	; 0xfffffe70
     658:	72622d37 	rsbvc	r2, r2, #3520	; 0xdc0
     65c:	68636e61 	stmdavs	r3!, {r0, r5, r6, r9, sl, fp, sp, lr}^
     660:	76657220 	strbtvc	r7, [r5], -r0, lsr #4
     664:	6f697369 	svcvs	0x00697369
     668:	3532206e 	ldrcc	r2, [r2, #-110]!	; 0xffffff92
     66c:	34303235 	ldrtcc	r3, [r0], #-565	; 0xfffffdcb
     670:	6d2d205d 	stcvs	0, cr2, [sp, #-372]!	; 0xfffffe8c
     674:	6d756874 	ldclvs	8, cr6, [r5, #-464]!	; 0xfffffe30
     678:	6d2d2062 	stcvs	0, cr2, [sp, #-392]!	; 0xfffffe78
     67c:	68637261 	stmdavs	r3!, {r0, r5, r6, r9, ip, sp, lr}^
     680:	6d72613d 	ldfvse	f6, [r2, #-244]!	; 0xffffff0c
     684:	6d2d3676 	stcvs	6, cr3, [sp, #-472]!	; 0xfffffe28
     688:	666d2d20 	strbtvs	r2, [sp], -r0, lsr #26
     68c:	74616f6c 	strbtvc	r6, [r1], #-3948	; 0xfffff094
     690:	6962612d 	stmdbvs	r2!, {r0, r2, r3, r5, r8, sp, lr}^
     694:	666f733d 			; <UNDEFINED> instruction: 0x666f733d
     698:	6d2d2074 	stcvs	0, cr2, [sp, #-464]!	; 0xfffffe30
     69c:	6d756874 	ldclvs	8, cr6, [r5, #-464]!	; 0xfffffe30
     6a0:	6d2d2062 	stcvs	0, cr2, [sp, #-392]!	; 0xfffffe78
     6a4:	68637261 	stmdavs	r3!, {r0, r5, r6, r9, ip, sp, lr}^
     6a8:	6d72613d 	ldfvse	f6, [r2, #-244]!	; 0xffffff0c
     6ac:	6d2d3676 	stcvs	6, cr3, [sp, #-472]!	; 0xfffffe28
     6b0:	20672d20 	rsbcs	r2, r7, r0, lsr #26
     6b4:	20304f2d 	eorscs	r4, r0, sp, lsr #30
     6b8:	6474732d 	ldrbtvs	r7, [r4], #-813	; 0xfffffcd3
     6bc:	3939633d 	ldmdbcc	r9!, {r0, r2, r3, r4, r5, r8, r9, sp, lr}
     6c0:	6f6d6100 	svcvs	0x006d6100
     6c4:	4f746e75 	svcmi	0x00746e75
     6c8:	74634166 	strbtvc	r4, [r3], #-358	; 0xfffffe9a
     6cc:	44657669 	strbtmi	r7, [r5], #-1641	; 0xfffff997
     6d0:	73726f6f 	cmnvc	r2, #444	; 0x1bc
     6d4:	43435200 	movtmi	r5, #12800	; 0x3200
     6d8:	4c43485f 	mcrrmi	8, 5, r4, r3, cr15
     6dc:	6e6f434b 	cdpvs	3, 6, cr4, cr15, cr11, {2}
     6e0:	00676966 	rsbeq	r6, r7, r6, ror #18
     6e4:	5f434352 	svcpl	0x00434352
     6e8:	61656c43 	cmnvs	r5, r3, asr #24
     6ec:	616c4672 	smcvs	50274	; 0xc462
     6f0:	43520067 	cmpmi	r2, #103	; 0x67
     6f4:	53485f43 	movtpl	r5, #36675	; 0x8f43
     6f8:	6e6f4345 	cdpvs	3, 6, cr4, cr15, cr5, {2}
     6fc:	00676966 	rsbeq	r6, r7, r6, ror #18
     700:	52434442 	subpl	r4, r3, #1107296256	; 0x42000000
     704:	43485300 	movtmi	r5, #33536	; 0x8300
     708:	50005253 	andpl	r5, r0, r3, asr r2
     70c:	495f4456 	ldmdbmi	pc, {r1, r2, r4, r6, sl, lr}^	; <UNPREDICTABLE>
     710:	006e5152 	rsbeq	r5, lr, r2, asr r1
     714:	5f434352 	svcpl	0x00434352
     718:	0045534c 	subeq	r5, r5, ip, asr #6
     71c:	52495453 	subpl	r5, r9, #1392508928	; 0x53000000
     720:	43324900 	teqmi	r2, #0, 18
     724:	56455f31 			; <UNDEFINED> instruction: 0x56455f31
     728:	5152495f 	cmppl	r2, pc, asr r9
     72c:	4352006e 	cmpmi	r2, #110	; 0x6e
     730:	41535f43 	cmpmi	r3, r3, asr #30
     734:	6f6c4249 	svcvs	0x006c4249
     738:	43416b63 	movtmi	r6, #7011	; 0x1b63
     73c:	6f434b4c 	svcvs	0x00434b4c
     740:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
     744:	61747300 	cmnvs	r4, r0, lsl #6
     748:	70757472 	rsbsvc	r7, r5, r2, ror r4
     74c:	6e756f63 	cdpvs	15, 7, cr6, cr5, cr3, {3}
     750:	00726574 	rsbseq	r6, r2, r4, ror r5
     754:	5f434352 	svcpl	0x00434352
     758:	534c4c50 	movtpl	r4, #52304	; 0xcc50
     75c:	6f434941 	svcvs	0x00434941
     760:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
     764:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
     768:	69505f4f 	ldmdbvs	r0, {r0, r1, r2, r3, r6, r8, r9, sl, fp, ip, lr}^
     76c:	4700736e 	strmi	r7, [r0, -lr, ror #6]
     770:	5f4f4950 	svcpl	0x004f4950
     774:	65646f4d 	strbvs	r6, [r4, #-3917]!	; 0xfffff0b3
     778:	54554f5f 	ldrbpl	r4, [r5], #-3935	; 0xfffff0a1
     77c:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
     780:	43435f31 	movtmi	r5, #16177	; 0x3f31
     784:	5152495f 	cmppl	r2, pc, asr r9
     788:	4148006e 	cmpmi	r8, lr, rrx
     78c:	525f4853 	subspl	r4, pc, #5439488	; 0x530000
     790:	495f474e 	ldmdbmi	pc, {r1, r2, r3, r6, r8, r9, sl, lr}^	; <UNPREDICTABLE>
     794:	006e5152 	rsbeq	r5, lr, r2, asr r1
     798:	49545845 	ldmdbmi	r4, {r0, r2, r6, fp, ip, lr}^
     79c:	52495f31 	subpl	r5, r9, #49, 30	; 0xc4
     7a0:	43006e51 	movwmi	r6, #3665	; 0xe51
     7a4:	5f314e41 	svcpl	0x00314e41
     7a8:	495f5854 	ldmdbmi	pc, {r2, r4, r6, fp, ip, lr}^	; <UNPREDICTABLE>
     7ac:	006e5152 	rsbeq	r5, lr, r2, asr r1
     7b0:	31414d44 	cmpcc	r1, r4, asr #26
     7b4:	7274535f 	rsbsvc	r5, r4, #2080374785	; 0x7c000001
     7b8:	356d6165 	strbcc	r6, [sp, #-357]!	; 0xfffffe9b
     7bc:	5152495f 	cmppl	r2, pc, asr r9
     7c0:	4352006e 	cmpmi	r2, #110	; 0x6e
     7c4:	53485f43 	movtpl	r5, #36675	; 0x8f43
     7c8:	43520045 	cmpmi	r2, #69	; 0x45
     7cc:	434d5f43 	movtmi	r5, #57155	; 0xdf43
     7d0:	6f43314f 	svcvs	0x0043314f
     7d4:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
     7d8:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
     7dc:	52545f38 	subspl	r5, r4, #56, 30	; 0xe0
     7e0:	4f435f47 	svcmi	0x00435f47
     7e4:	49545f4d 	ldmdbmi	r4, {r0, r2, r3, r6, r8, r9, sl, fp, ip, lr}^
     7e8:	5f34314d 	svcpl	0x0034314d
     7ec:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     7f0:	414d4400 	cmpmi	sp, r0, lsl #8
     7f4:	74535f32 	ldrbvc	r5, [r3], #-3890	; 0xfffff0ce
     7f8:	6d616572 	cfstr64vs	mvdx6, [r1, #-456]!	; 0xfffffe38
     7fc:	52495f37 	subpl	r5, r9, #55, 30	; 0xdc
     800:	4f006e51 	svcmi	0x00006e51
     804:	465f4754 			; <UNDEFINED> instruction: 0x465f4754
     808:	52495f53 	subpl	r5, r9, #332	; 0x14c
     80c:	4e006e51 	mcrmi	14, 0, r6, cr0, cr1, {2}
     810:	614d6e6f 	cmpvs	sp, pc, ror #28
     814:	62616b73 	rsbvs	r6, r1, #117760	; 0x1cc00
     818:	6e49656c 	cdpvs	5, 4, cr6, cr9, cr12, {3}
     81c:	52495f74 	subpl	r5, r9, #116, 30	; 0x1d0
     820:	57006e51 	smlsdpl	r0, r1, lr, r6
     824:	5f474457 	svcpl	0x00474457
     828:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     82c:	47544f00 	ldrbmi	r4, [r4, -r0, lsl #30]
     830:	5f53485f 	svcpl	0x0053485f
     834:	50554b57 	subspl	r4, r5, r7, asr fp
     838:	5152495f 	cmppl	r2, pc, asr r9
     83c:	4352006e 	cmpmi	r2, #110	; 0x6e
     840:	50415f43 	subpl	r5, r1, r3, asr #30
     844:	65503242 	ldrbvs	r3, [r0, #-578]	; 0xfffffdbe
     848:	68706972 	ldmdavs	r0!, {r1, r4, r5, r6, r8, fp, sp, lr}^
     84c:	636f6c43 	cmnvs	pc, #17152	; 0x4300
     850:	646d436b 	strbtvs	r4, [sp], #-875	; 0xfffffc95
     854:	43435200 	movtmi	r5, #12800	; 0x3200
     858:	4c4c505f 	mcrrmi	0, 5, r5, ip, cr15
     85c:	44494153 	strbmi	r4, [r9], #-339	; 0xfffffead
     860:	00517669 	subseq	r7, r1, r9, ror #12
     864:	5f434352 	svcpl	0x00434352
     868:	534c4c50 	movtpl	r4, #52304	; 0xcc50
     86c:	69444941 	stmdbvs	r4, {r0, r6, r8, fp, lr}^
     870:	52005276 	andpl	r5, r0, #1610612743	; 0x60000007
     874:	535f4343 	cmppl	pc, #201326593	; 0xc000001
     878:	6c424941 	mcrrvs	9, 4, r4, r2, cr1	; <UNPREDICTABLE>
     87c:	426b636f 	rsbmi	r6, fp, #-1140850687	; 0xbc000001
     880:	534b4c43 	movtpl	r4, #48195	; 0xbc43
     884:	6372756f 	cmnvs	r2, #465567744	; 0x1bc00000
     888:	654d0065 	strbvs	r0, [sp, #-101]	; 0xffffff9b
     88c:	79726f6d 	ldmdbvc	r2!, {r0, r2, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
     890:	616e614d 	cmnvs	lr, sp, asr #2
     894:	656d6567 	strbvs	r6, [sp, #-1383]!	; 0xfffffa99
     898:	495f746e 	ldmdbmi	pc, {r1, r2, r3, r5, r6, sl, ip, sp, lr}^	; <UNPREDICTABLE>
     89c:	006e5152 	rsbeq	r5, lr, r2, asr r1
     8a0:	74737953 	ldrbtvc	r7, [r3], #-2387	; 0xfffff6ad
     8a4:	6f436d65 	svcvs	0x00436d65
     8a8:	6c436572 	cfstr64vs	mvdx6, [r3], {114}	; 0x72
     8ac:	006b636f 	rsbeq	r6, fp, pc, ror #6
     8b0:	504d4154 	subpl	r4, sp, r4, asr r1
     8b4:	4154535f 	cmpmi	r4, pc, asr r3
     8b8:	495f504d 	ldmdbmi	pc, {r0, r2, r3, r6, ip, lr}^	; <UNPREDICTABLE>
     8bc:	006e5152 	rsbeq	r5, lr, r2, asr r1
     8c0:	314e4143 	cmpcc	lr, r3, asr #2
     8c4:	4543535f 	strbmi	r5, [r3, #-863]	; 0xfffffca1
     8c8:	5152495f 	cmppl	r2, pc, asr r9
     8cc:	645f006e 	ldrbvs	r0, [pc], #-110	; 8d4 <startup-0x1ffff72c>
     8d0:	00726f6f 	rsbseq	r6, r2, pc, ror #30
     8d4:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     8d8:	7079545f 	rsbsvc	r5, r9, pc, asr r4
     8dc:	50470065 	subpl	r0, r7, r5, rrx
     8e0:	4d5f4f49 	ldclmi	15, cr4, [pc, #-292]	; 7c4 <startup-0x1ffff83c>
     8e4:	5f65646f 	svcpl	0x0065646f
     8e8:	44004e49 	strmi	r4, [r0], #-3657	; 0xfffff1b7
     8ec:	5f32414d 	svcpl	0x0032414d
     8f0:	65727453 	ldrbvs	r7, [r2, #-1107]!	; 0xfffffbad
     8f4:	5f306d61 	svcpl	0x00306d61
     8f8:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     8fc:	43435200 	movtmi	r5, #12800	; 0x3200
     900:	4f434d5f 	svcmi	0x00434d5f
     904:	6e6f4332 	mcrvs	3, 3, r4, cr15, cr2, {1}
     908:	00676966 	rsbeq	r6, r7, r6, ror #18
     90c:	726f6f64 	rsbvc	r6, pc, #100, 30	; 0x190
     910:	4c003732 	stcmi	7, cr3, [r0], {50}	; 0x32
     914:	00524b43 	subseq	r4, r2, r3, asr #22
     918:	5f434352 	svcpl	0x00434352
     91c:	43533249 	cmpmi	r3, #-1879048188	; 0x90000004
     920:	6f534b4c 	svcvs	0x00534b4c
     924:	65637275 	strbvs	r7, [r3, #-629]!	; 0xfffffd8b
     928:	52524500 	subspl	r4, r2, #0, 10
     92c:	4900524f 	stmdbmi	r0, {r0, r1, r2, r3, r6, r9, ip, lr}
     930:	5f324332 	svcpl	0x00324332
     934:	495f5245 	ldmdbmi	pc, {r0, r2, r6, r9, ip, lr}^	; <UNPREDICTABLE>
     938:	006e5152 	rsbeq	r5, lr, r2, asr r1
     93c:	6954736d 	ldmdbvs	r4, {r0, r2, r3, r5, r6, r8, r9, ip, sp, lr}^
     940:	00736b63 	rsbseq	r6, r3, r3, ror #22
     944:	5f434352 	svcpl	0x00434352
     948:	4b4c4350 	blmi	1311690 <startup-0x1ecee970>
     94c:	6e6f4331 	mcrvs	3, 3, r4, cr15, cr1, {1}
     950:	00676966 	rsbeq	r6, r7, r6, ror #18
     954:	4550534f 	ldrbmi	r5, [r0, #-847]	; 0xfffffcb1
     958:	00524445 	subseq	r4, r2, r5, asr #8
     95c:	46737542 	ldrbtmi	r7, [r3], -r2, asr #10
     960:	746c7561 	strbtvc	r7, [ip], #-1377	; 0xfffffa9f
     964:	5152495f 	cmppl	r2, pc, asr r9
     968:	6974006e 	ldmdbvs	r4!, {r1, r2, r3, r5, r6}^
     96c:	00736b63 	rsbseq	r6, r3, r3, ror #22
     970:	434c4c50 	movtmi	r4, #52304	; 0xcc50
     974:	00524746 	subseq	r4, r2, r6, asr #14
     978:	54524155 	ldrbpl	r4, [r2], #-341	; 0xfffffeab
     97c:	52495f35 	subpl	r5, r9, #53, 30	; 0xd4
     980:	54006e51 	strpl	r6, [r0], #-3665	; 0xfffff1af
     984:	5f314d49 	svcpl	0x00314d49
     988:	5f4b5242 	svcpl	0x004b5242
     98c:	394d4954 	stmdbcc	sp, {r2, r4, r6, r8, fp, lr}^
     990:	5152495f 	cmppl	r2, pc, asr r9
     994:	5047006e 	subpl	r0, r7, lr, rrx
     998:	4f5f4f49 	svcmi	0x005f4f49
     99c:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0xfffff6ac
     9a0:	755f5f00 	ldrbvc	r5, [pc, #-3840]	; fffffaa8 <GPIO_Ports+0xdfffca38>
     9a4:	33746e69 	cmncc	r4, #1680	; 0x690
     9a8:	00745f32 	rsbseq	r5, r4, r2, lsr pc
     9ac:	41425041 	cmpmi	r2, r1, asr #32
     9b0:	72504248 	subsvc	r4, r0, #72, 4	; 0x80000004
     9b4:	54637365 	strbtpl	r7, [r3], #-869	; 0xfffffc9b
     9b8:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
     9bc:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
     9c0:	654d5f4f 	strbvs	r5, [sp, #-3919]	; 0xfffff0b1
     9c4:	6d756964 			; <UNDEFINED> instruction: 0x6d756964
     9c8:	6570535f 	ldrbvs	r5, [r0, #-863]!	; 0xfffffca1
     9cc:	52006465 	andpl	r6, r0, #1694498816	; 0x65000000
     9d0:	535f4343 	cmppl	pc, #201326593	; 0xc000001
     9d4:	4c504941 	mrrcmi	9, 4, r4, r0, cr1	; <UNPREDICTABLE>
     9d8:	5332494c 	teqpl	r2, #76, 18	; 0x130000
     9dc:	446b6c43 	strbtmi	r6, [fp], #-3139	; 0xfffff3bd
     9e0:	6f437669 	svcvs	0x00437669
     9e4:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
     9e8:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
     9ec:	52495f37 	subpl	r5, r9, #55, 30	; 0xdc
     9f0:	6c006e51 	stcvs	14, cr6, [r0], {81}	; 0x51
     9f4:	20676e6f 	rsbcs	r6, r7, pc, ror #28
     9f8:	676e6f6c 	strbvs	r6, [lr, -ip, ror #30]!
     9fc:	746e6920 	strbtvc	r6, [lr], #-2336	; 0xfffff6e0
     a00:	48544500 	ldmdami	r4, {r8, sl, lr}^
     a04:	554b575f 	strbpl	r5, [fp, #-1887]	; 0xfffff8a1
     a08:	52495f50 	subpl	r5, r9, #80, 30	; 0x140
     a0c:	4f006e51 	svcmi	0x00006e51
     a10:	485f4754 	ldmdami	pc, {r2, r4, r6, r8, r9, sl, lr}^	; <UNPREDICTABLE>
     a14:	52495f53 	subpl	r5, r9, #332	; 0x14c
     a18:	50006e51 	andpl	r6, r0, r1, asr lr
     a1c:	52445055 	subpl	r5, r4, #85	; 0x55
     a20:	43535300 	cmpmi	r3, #0, 6
     a24:	53005247 	movwpl	r5, #583	; 0x247
     a28:	5f314950 	svcpl	0x00314950
     a2c:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     a30:	53494400 	movtpl	r4, #37888	; 0x9400
     a34:	454c4241 	strbmi	r4, [ip, #-577]	; 0xfffffdbf
     a38:	43565300 	cmpmi	r6, #0, 6
     a3c:	5f6c6c61 	svcpl	0x006c6c61
     a40:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     a44:	42504100 	subsmi	r4, r0, #0, 2
     a48:	54535232 	ldrbpl	r5, [r3], #-562	; 0xfffffdce
     a4c:	53420052 	movtpl	r0, #8274	; 0x2052
     a50:	00485252 	subeq	r5, r8, r2, asr r2
     a54:	5f434352 	svcpl	0x00434352
     a58:	46746547 	ldrbtmi	r6, [r4], -r7, asr #10
     a5c:	5367616c 	cmnpl	r7, #108, 2
     a60:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0xfffffe8c
     a64:	43520073 	cmpmi	r2, #115	; 0x73
     a68:	6c435f43 	mcrrvs	15, 4, r5, r3, cr3
     a6c:	736b636f 	cmnvc	fp, #-1140850687	; 0xbc000001
     a70:	52534200 	subspl	r4, r3, #0, 4
     a74:	47004c52 	smlsdmi	r0, r2, ip, r4
     a78:	5f4f4950 	svcpl	0x004f4950
     a7c:	68676948 	stmdavs	r7!, {r3, r6, r8, fp, sp, lr}^
     a80:	6570535f 	ldrbvs	r5, [r0, #-863]!	; 0xfffffca1
     a84:	52006465 	andpl	r6, r0, #1694498816	; 0x65000000
     a88:	495f4343 	ldmdbmi	pc, {r0, r1, r6, r8, r9, lr}^	; <UNPREDICTABLE>
     a8c:	6e6f4354 	mcrvs	3, 3, r4, cr15, cr4, {2}
     a90:	00676966 	rsbeq	r6, r7, r6, ror #18
     a94:	5f434352 	svcpl	0x00434352
     a98:	43495348 	movtmi	r5, #37704	; 0x9348
     a9c:	4600646d 	strmi	r6, [r0], -sp, ror #8
     aa0:	495f5550 	ldmdbmi	pc, {r4, r6, r8, sl, ip, lr}^	; <UNPREDICTABLE>
     aa4:	006e5152 	rsbeq	r5, lr, r2, asr r1
     aa8:	5f434352 	svcpl	0x00434352
     aac:	756a6441 	strbvc	r6, [sl, #-1089]!	; 0xfffffbbf
     ab0:	53487473 	movtpl	r7, #33907	; 0x8473
     ab4:	6c614349 	stclvs	3, cr4, [r1], #-292	; 0xfffffedc
     ab8:	61726269 	cmnvs	r2, r9, ror #4
     abc:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
     ac0:	756c6156 	strbvc	r6, [ip, #-342]!	; 0xfffffeaa
     ac4:	41550065 	cmpmi	r5, r5, rrx
     ac8:	5f345452 	svcpl	0x00345452
     acc:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     ad0:	42504100 	subsmi	r4, r0, #0, 2
     ad4:	45504c32 	ldrbmi	r4, [r0, #-3122]	; 0xfffff3ce
     ad8:	5200524e 	andpl	r5, r0, #-536870908	; 0xe0000004
     adc:	415f4343 	cmpmi	pc, r3, asr #6
     ae0:	50314250 	eorspl	r4, r1, r0, asr r2
     ae4:	70697265 	rsbvc	r7, r9, r5, ror #4
     ae8:	43520068 	cmpmi	r2, #104	; 0x68
     aec:	54525f43 	ldrbpl	r5, [r2], #-3907	; 0xfffff0bd
     af0:	4b4c4343 	blmi	1311804 <startup-0x1ecee7fc>
     af4:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
     af8:	4f006769 	svcmi	0x00006769
     afc:	465f4754 			; <UNDEFINED> instruction: 0x465f4754
     b00:	4b575f53 	blmi	15d8854 <startup-0x1ea277ac>
     b04:	495f5055 	ldmdbmi	pc, {r0, r2, r4, r6, ip, lr}^	; <UNPREDICTABLE>
     b08:	006e5152 	rsbeq	r5, lr, r2, asr r1
     b0c:	5f434352 	svcpl	0x00434352
     b10:	47414c46 	strbmi	r4, [r1, -r6, asr #24]
     b14:	43435200 	movtmi	r5, #12800	; 0x3200
     b18:	7465475f 	strbtvc	r4, [r5], #-1887	; 0xfffff8a1
     b1c:	74535449 	ldrbvc	r5, [r3], #-1097	; 0xfffffbb7
     b20:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
     b24:	54584500 	ldrbpl	r4, [r8], #-1280	; 0xfffffb00
     b28:	495f3449 	ldmdbmi	pc, {r0, r3, r6, sl, ip, sp}^	; <UNPREDICTABLE>
     b2c:	006e5152 	rsbeq	r5, lr, r2, asr r1
     b30:	4c525443 	cfldrdmi	mvd5, [r2], {67}	; 0x43
     b34:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
     b38:	41445f36 	cmpmi	r4, r6, lsr pc
     b3c:	52495f43 	subpl	r5, r9, #268	; 0x10c
     b40:	4e006e51 	mcrmi	14, 0, r6, cr0, cr1, {2}
     b44:	74537765 	ldrbvc	r7, [r3], #-1893	; 0xfffff89b
     b48:	00657461 	rsbeq	r7, r5, r1, ror #8
     b4c:	4f495047 	svcmi	0x00495047
     b50:	6570535f 	ldrbvs	r5, [r0, #-863]!	; 0xfffffca1
     b54:	49006465 	stmdbmi	r0, {r0, r2, r5, r6, sl, sp, lr}
     b58:	5f324332 	svcpl	0x00324332
     b5c:	495f5645 	ldmdbmi	pc, {r0, r2, r6, r9, sl, ip, lr}^	; <UNPREDICTABLE>
     b60:	006e5152 	rsbeq	r5, lr, r2, asr r1
     b64:	5f434352 	svcpl	0x00434352
     b68:	61656c43 	cmnvs	r5, r3, asr #24
     b6c:	50544972 	subspl	r4, r4, r2, ror r9
     b70:	69646e65 	stmdbvs	r4!, {r0, r2, r5, r6, r9, sl, fp, sp, lr}^
     b74:	6942676e 	stmdbvs	r2, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}^
     b78:	43520074 	cmpmi	r2, #116	; 0x74
     b7c:	6c435f43 	mcrrvs	15, 4, r5, r3, cr3
     b80:	536b636f 	cmnpl	fp, #-1140850687	; 0xbc000001
     b84:	72756365 	rsbsvc	r6, r5, #-1811939327	; 0x94000001
     b88:	53797469 	cmnpl	r9, #1761607680	; 0x69000000
     b8c:	65747379 	ldrbvs	r7, [r4, #-889]!	; 0xfffffc87
     b90:	646d436d 	strbtvs	r4, [sp], #-877	; 0xfffffc93
     b94:	43435200 	movtmi	r5, #12800	; 0x3200
     b98:	4941535f 	stmdbmi	r1, {r0, r1, r2, r3, r4, r6, r8, r9, ip, lr}^
     b9c:	636f6c42 	cmnvs	pc, #16896	; 0x4200
     ba0:	4c43416b 	stfmie	f4, [r3], {107}	; 0x6b
     ba4:	756f534b 	strbvc	r5, [pc, #-843]!	; 861 <startup-0x1ffff79f>
     ba8:	00656372 	rsbeq	r6, r5, r2, ror r3
     bac:	74737973 	ldrbtvc	r7, [r3], #-2419	; 0xfffff68d
     bb0:	5f6b6369 	svcpl	0x006b6369
     bb4:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xfffff1b7
     bb8:	61747300 	cmnvs	r4, r0, lsl #6
     bbc:	72737574 	rsbsvc	r7, r3, #116, 10	; 0x1d000000
     bc0:	52006765 	andpl	r6, r0, #26476544	; 0x1940000
     bc4:	415f4343 	cmpmi	pc, r3, asr #6
     bc8:	50324250 	eorspl	r4, r2, r0, asr r2
     bcc:	70697265 	rsbvc	r7, r9, r5, ror #4
     bd0:	46420068 	strbmi	r0, [r2], -r8, rrx
     bd4:	41005241 	tstmi	r0, r1, asr #4
     bd8:	4c314250 	lfmmi	f4, 4, [r1], #-320	; 0xfffffec0
     bdc:	524e4550 	subpl	r4, lr, #80, 10	; 0x14000000
     be0:	414d4400 	cmpmi	sp, r0, lsl #8
     be4:	74535f31 	ldrbvc	r5, [r3], #-3889	; 0xfffff0cf
     be8:	6d616572 	cfstr64vs	mvdx6, [r1, #-456]!	; 0xfffffe38
     bec:	52495f31 	subpl	r5, r9, #49, 30	; 0xc4
     bf0:	61006e51 	tstvs	r0, r1, asr lr
     bf4:	76697463 	strbtvc	r7, [r9], -r3, ror #8
     bf8:	6f645f65 	svcvs	0x00645f65
     bfc:	0073726f 	rsbseq	r7, r3, pc, ror #4
     c00:	32414d44 	subcc	r4, r1, #68, 26	; 0x1100
     c04:	7274535f 	rsbsvc	r5, r4, #2080374785	; 0x7c000001
     c08:	336d6165 	cmncc	sp, #1073741849	; 0x40000019
     c0c:	5152495f 	cmppl	r2, pc, asr r9
     c10:	4b43006e 	blmi	10c0dd0 <startup-0x1ef3f230>
     c14:	45544147 	ldrbmi	r4, [r4, #-327]	; 0xfffffeb9
     c18:	4300524e 	movwmi	r5, #590	; 0x24e
     c1c:	5f324e41 	svcpl	0x00324e41
     c20:	495f5854 	ldmdbmi	pc, {r2, r4, r6, fp, ip, lr}^	; <UNPREDICTABLE>
     c24:	006e5152 	rsbeq	r5, lr, r2, asr r1
     c28:	534c4c50 	movtpl	r4, #52304	; 0xcc50
     c2c:	004e4941 	subeq	r4, lr, r1, asr #18
     c30:	534c4c50 	movtpl	r4, #52304	; 0xcc50
     c34:	00514941 	subseq	r4, r1, r1, asr #18
     c38:	534c4c50 	movtpl	r4, #52304	; 0xcc50
     c3c:	00524941 	subseq	r4, r2, r1, asr #18
     c40:	5f434352 	svcpl	0x00434352
     c44:	314f434d 	cmpcc	pc, sp, asr #6
     c48:	72756f53 	rsbsvc	r6, r5, #332	; 0x14c
     c4c:	52006563 	andpl	r6, r0, #415236096	; 0x18c00000
     c50:	415f4343 	cmpmi	pc, r3, asr #6
     c54:	50334248 	eorspl	r4, r3, r8, asr #4
     c58:	70697265 	rsbvc	r7, r9, r5, ror #4
     c5c:	6f6c4368 	svcvs	0x006c4368
     c60:	6d436b63 	vstrvs	d22, [r3, #-396]	; 0xfffffe74
     c64:	79530064 	ldmdbvc	r3, {r2, r5, r6}^
     c68:	63695473 	cmnvs	r9, #1929379840	; 0x73000000
     c6c:	79545f6b 	ldmdbvc	r4, {r0, r1, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
     c70:	77006570 	smlsdxvc	r0, r0, r5, r6
     c74:	64746961 	ldrbtvs	r6, [r4], #-2401	; 0xfffff69f
     c78:	69740065 	ldmdbvs	r4!, {r0, r2, r5, r6}^
     c7c:	635f656d 	cmpvs	pc, #457179136	; 0x1b400000
     c80:	72746e65 	rsbsvc	r6, r4, #1616	; 0x650
     c84:	6c5f6c61 	mrrcvs	12, 6, r6, pc, cr1	; <UNPREDICTABLE>
     c88:	006d7261 	rsbeq	r7, sp, r1, ror #4
     c8c:	5f434352 	svcpl	0x00434352
     c90:	434c4c50 	movtmi	r4, #52304	; 0xcc50
     c94:	5200646d 	andpl	r6, r0, #1828716544	; 0x6d000000
     c98:	425f4343 	subsmi	r4, pc, #201326593	; 0xc000001
     c9c:	756b6361 	strbvc	r6, [fp, #-865]!	; 0xfffffc9f
     ca0:	73655270 	cmnvc	r5, #112, 4
     ca4:	6d437465 	cfstrdvs	mvd7, [r3, #-404]	; 0xfffffe6c
     ca8:	48410064 	stmdami	r1, {r2, r5, r6}^
     cac:	53523342 	cmppl	r2, #134217729	; 0x8000001
     cb0:	45005254 	strmi	r5, [r0, #-596]	; 0xfffffdac
     cb4:	726f7272 	rsbvc	r7, pc, #536870919	; 0x20000007
     cb8:	74617453 	strbtvc	r7, [r1], #-1107	; 0xfffffbad
     cbc:	44007375 	strmi	r7, [r0], #-885	; 0xfffffc8b
     cc0:	5f31414d 	svcpl	0x0031414d
     cc4:	65727453 	ldrbvs	r7, [r2, #-1107]!	; 0xfffffbad
     cc8:	5f306d61 	svcpl	0x00306d61
     ccc:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     cd0:	61747300 	cmnvs	r4, r0, lsl #6
     cd4:	70757472 	rsbsvc	r7, r5, r2, ror r4
     cd8:	43435200 	movtmi	r5, #12800	; 0x3200
     cdc:	4f434d5f 	svcmi	0x00434d5f
     ce0:	756f5332 	strbvc	r5, [pc, #-818]!	; 9b6 <startup-0x1ffff64a>
     ce4:	00656372 	rsbeq	r6, r5, r2, ror r3
     ce8:	31425041 	cmpcc	r2, r1, asr #32
     cec:	52545352 	subspl	r5, r4, #1207959553	; 0x48000001
     cf0:	43545200 	cmpmi	r4, #0, 4
     cf4:	616c415f 	cmnvs	ip, pc, asr r1
     cf8:	495f6d72 	ldmdbmi	pc, {r1, r4, r5, r6, r8, sl, fp, sp, lr}^	; <UNPREDICTABLE>
     cfc:	006e5152 	rsbeq	r5, lr, r2, asr r1
     d00:	31425041 	cmpcc	r2, r1, asr #32
     d04:	00524e45 	subseq	r4, r2, r5, asr #28
     d08:	4349564e 	movtmi	r5, #38478	; 0x964e
     d0c:	7079545f 	rsbsvc	r5, r9, pc, asr r4
     d10:	75460065 	strbvc	r0, [r6, #-101]	; 0xffffff9b
     d14:	6974636e 	ldmdbvs	r4!, {r1, r2, r3, r5, r6, r8, r9, sp, lr}^
     d18:	6c616e6f 	stclvs	14, cr6, [r1], #-444	; 0xfffffe44
     d1c:	74617453 	strbtvc	r7, [r1], #-1107	; 0xfffffbad
     d20:	32490065 	subcc	r0, r9, #101	; 0x65
     d24:	455f3343 	ldrbmi	r3, [pc, #-835]	; 9e9 <startup-0x1ffff617>
     d28:	52495f52 	subpl	r5, r9, #328	; 0x148
     d2c:	43006e51 	movwmi	r6, #3665	; 0xe51
     d30:	5f505952 	svcpl	0x00505952
     d34:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     d38:	54584500 	ldrbpl	r4, [r8], #-1280	; 0xfffffb00
     d3c:	5f353149 	svcpl	0x00353149
     d40:	495f3031 	ldmdbmi	pc, {r0, r4, r5, ip, sp}^	; <UNPREDICTABLE>
     d44:	006e5152 	rsbeq	r5, lr, r2, asr r1
     d48:	676e6f6c 	strbvs	r6, [lr, -ip, ror #30]!
     d4c:	6e6f6c20 	cdpvs	12, 6, cr6, cr15, cr0, {1}
     d50:	6e752067 	cdpvs	0, 7, cr2, cr5, cr7, {3}
     d54:	6e676973 			; <UNDEFINED> instruction: 0x6e676973
     d58:	69206465 	stmdbvs	r0!, {r0, r2, r5, r6, sl, sp, lr}
     d5c:	5200746e 	andpl	r7, r0, #1845493760	; 0x6e000000
     d60:	4d5f4343 	ldclmi	3, cr4, [pc, #-268]	; c5c <startup-0x1ffff3a4>
     d64:	44314f43 	ldrtmi	r4, [r1], #-3907	; 0xfffff0bd
     d68:	54007669 	strpl	r7, [r0], #-1641	; 0xfffff997
     d6c:	5f334d49 	svcpl	0x00334d49
     d70:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     d74:	41535500 	cmpmi	r3, r0, lsl #10
     d78:	5f315452 	svcpl	0x00315452
     d7c:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     d80:	43435200 	movtmi	r5, #12800	; 0x3200
     d84:	6961575f 	stmdbvs	r1!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, lr}^
     d88:	726f4674 	rsbvc	r4, pc, #116, 12	; 0x7400000
     d8c:	53455348 	movtpl	r5, #21320	; 0x5348
     d90:	74726174 	ldrbtvc	r6, [r2], #-372	; 0xfffffe8c
     d94:	53007055 	movwpl	r7, #85	; 0x55
     d98:	45434355 	strbmi	r4, [r3, #-853]	; 0xfffffcab
     d9c:	47005353 	smlsdmi	r0, r3, r3, r5
     da0:	5f4f4950 	svcpl	0x004f4950
     da4:	65646f4d 	strbvs	r6, [r4, #-3917]!	; 0xfffff0b3
     da8:	4e414300 	cdpmi	3, 4, cr4, cr1, cr0, {0}
     dac:	58525f32 	ldmdapl	r2, {r1, r4, r5, r8, r9, sl, fp, ip, lr}^
     db0:	52495f31 	subpl	r5, r9, #49, 30	; 0xc4
     db4:	41006e51 	tstmi	r0, r1, asr lr
     db8:	495f4344 	ldmdbmi	pc, {r2, r6, r8, r9, lr}^	; <UNPREDICTABLE>
     dbc:	006e5152 	rsbeq	r5, lr, r2, asr r1
     dc0:	5f434352 	svcpl	0x00434352
     dc4:	4d45534c 	stclmi	3, cr5, [r5, #-304]	; 0xfffffed0
     dc8:	4365646f 	cmnmi	r5, #1862270976	; 0x6f000000
     dcc:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
     dd0:	43490067 	movtmi	r0, #36967	; 0x9067
     dd4:	41005245 	tstmi	r0, r5, asr #4
     dd8:	4c334248 	lfmmi	f4, 4, [r3], #-288	; 0xfffffee0
     ddc:	524e4550 	subpl	r4, lr, #80, 10	; 0x14000000
     de0:	6f6f6400 	svcvs	0x006f6400
     de4:	00303172 	eorseq	r3, r0, r2, ror r1
     de8:	726f6f64 	rsbvc	r6, pc, #100, 30	; 0x190
     dec:	64003131 	strvs	r3, [r0], #-305	; 0xfffffecf
     df0:	31726f6f 	cmncc	r2, pc, ror #30
     df4:	50470032 	subpl	r0, r7, r2, lsr r0
     df8:	6f4d4f49 	svcvs	0x004d4f49
     dfc:	545f6564 	ldrbpl	r6, [pc], #-1380	; e04 <startup-0x1ffff1fc>
     e00:	44657079 	strbtmi	r7, [r5], #-121	; 0xffffff87
     e04:	64006665 	strvs	r6, [r0], #-1637	; 0xfffff99b
     e08:	31726f6f 	cmncc	r2, pc, ror #30
     e0c:	6f640034 	svcvs	0x00640034
     e10:	3531726f 	ldrcc	r7, [r1, #-623]!	; 0xfffffd91
     e14:	6f6f6400 	svcvs	0x006f6400
     e18:	00363172 	eorseq	r3, r6, r2, ror r1
     e1c:	726f6f64 	rsbvc	r6, pc, #100, 30	; 0x190
     e20:	64003831 	strvs	r3, [r0], #-2097	; 0xfffff7cf
     e24:	31726f6f 	cmncc	r2, pc, ror #30
     e28:	79530039 	ldmdbvc	r3, {r0, r3, r4, r5}^
     e2c:	63695473 	cmnvs	r9, #1929379840	; 0x73000000
     e30:	6f435f6b 	svcvs	0x00435f6b
     e34:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
     e38:	2f3a4300 	svccs	0x003a4300
     e3c:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
     e40:	64412f73 	strbvs	r2, [r1], #-3955	; 0xfffff08d
     e44:	2f746d61 	svccs	0x00746d61
     e48:	44656e4f 	strbtmi	r6, [r5], #-3663	; 0xfffff1b1
     e4c:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
     e50:	6b6f442f 	blvs	1bd1f14 <startup-0x1e42e0ec>
     e54:	6e656d75 	mcrvs	13, 3, r6, cr5, cr5, {3}
     e58:	69472f74 	stmdbvs	r7, {r2, r4, r5, r6, r8, r9, sl, fp, sp}^
     e5c:	62754874 	rsbsvs	r4, r5, #116, 16	; 0x740000
     e60:	5441442f 	strbpl	r4, [r1], #-1071	; 0xfffffbd1
     e64:	2d303932 			; <UNDEFINED> instruction: 0x2d303932
     e68:	6d72614c 	ldfvse	f6, [r2, #-304]!	; 0xfffffed0
     e6c:	74737973 	ldrbtvc	r7, [r3], #-2419	; 0xfffff68d
     e70:	6b2f6d65 	blvs	bdc40c <startup-0x1f423bf4>
     e74:	442f646f 	strtmi	r6, [pc], #-1135	; e7c <startup-0x1ffff184>
     e78:	2f726f6f 	svccs	0x00726f6f
     e7c:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
     e80:	2e707574 	mrccs	5, 3, r7, cr0, cr4, {3}
     e84:	46410063 	strbmi	r0, [r1], -r3, rrx
     e88:	4f005253 	svcmi	0x00005253
     e8c:	45505954 	ldrbmi	r5, [r0, #-2388]	; 0xfffff6ac
     e90:	41430052 	qdaddmi	r0, r2, r3
     e94:	0042494c 	subeq	r4, r2, ip, asr #18
     e98:	72706d74 	rsbsvc	r6, r0, #116, 26	; 0x1d00
     e9c:	46006765 	strmi	r6, [r0], -r5, ror #14
     ea0:	5f434d53 	svcpl	0x00434d53
     ea4:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     ea8:	696e6900 	stmdbvs	lr!, {r8, fp, sp, lr}^
     eac:	58450074 	stmdapl	r5, {r2, r4, r5, r6}^
     eb0:	5f304954 	svcpl	0x00304954
     eb4:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     eb8:	4b434400 	blmi	10d1ec0 <startup-0x1ef2e140>
     ebc:	52474643 	subpl	r4, r7, #70254592	; 0x4300000
     ec0:	46430032 			; <UNDEFINED> instruction: 0x46430032
     ec4:	52005253 	andpl	r5, r0, #805306373	; 0x30000005
     ec8:	415f4343 	cmpmi	pc, r3, asr #6
     ecc:	50314248 	eorspl	r4, r1, r8, asr #4
     ed0:	70697265 	rsbvc	r7, r9, r5, ror #4
     ed4:	73680068 	cmnvc	r8, #104	; 0x68
     ed8:	61747365 	cmnvs	r4, r5, ror #6
     edc:	00737574 	rsbseq	r7, r3, r4, ror r5
     ee0:	31414d44 	cmpcc	r1, r4, asr #26
     ee4:	7274535f 	rsbsvc	r5, r4, #2080374785	; 0x7c000001
     ee8:	346d6165 	strbtcc	r6, [sp], #-357	; 0xfffffe9b
     eec:	5152495f 	cmppl	r2, pc, asr r9
     ef0:	6f64006e 	svcvs	0x0064006e
     ef4:	3032726f 	eorscc	r7, r2, pc, ror #4
     ef8:	6f6f6400 	svcvs	0x006f6400
     efc:	00313272 	eorseq	r3, r1, r2, ror r2
     f00:	726f6f64 	rsbvc	r6, pc, #100, 30	; 0x190
     f04:	64003232 	strvs	r3, [r0], #-562	; 0xfffffdce
     f08:	32726f6f 	rsbscc	r6, r2, #444	; 0x1bc
     f0c:	6f640033 	svcvs	0x00640033
     f10:	3432726f 	ldrtcc	r7, [r2], #-623	; 0xfffffd91
     f14:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
     f18:	616c5f4f 	cmnvs	ip, pc, asr #30
     f1c:	4400706d 	strmi	r7, [r0], #-109	; 0xffffff93
     f20:	5f32414d 	svcpl	0x0032414d
     f24:	65727453 	ldrbvs	r7, [r2, #-1107]!	; 0xfffffbad
     f28:	5f366d61 	svcpl	0x00366d61
     f2c:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     f30:	42484100 	submi	r4, r8, #0, 2
     f34:	524e4531 	subpl	r4, lr, #205520896	; 0xc400000
     f38:	6f6f6400 	svcvs	0x006f6400
     f3c:	00383272 	eorseq	r3, r8, r2, ror r2
     f40:	726f6f64 	rsbvc	r6, pc, #100, 30	; 0x190
     f44:	4c003932 			; <UNDEFINED> instruction: 0x4c003932
     f48:	0044414f 	subeq	r4, r4, pc, asr #2
     f4c:	4f495047 	svcmi	0x00495047
     f50:	65657053 	strbvs	r7, [r5, #-83]!	; 0xffffffad
     f54:	79545f64 	ldmdbvc	r4, {r2, r5, r6, r8, r9, sl, fp, ip, lr}^
     f58:	65446570 	strbvs	r6, [r4, #-1392]	; 0xfffffa90
     f5c:	65440066 	strbvs	r0, [r4, #-102]	; 0xffffff9a
     f60:	4d677562 	cfstr64mi	mvdx7, [r7, #-392]!	; 0xfffffe78
     f64:	74696e6f 	strbtvc	r6, [r9], #-3695	; 0xfffff191
     f68:	495f726f 	ldmdbmi	pc, {r0, r1, r2, r3, r5, r6, r9, ip, sp, lr}^	; <UNPREDICTABLE>
     f6c:	006e5152 	rsbeq	r5, lr, r2, asr r1
     f70:	4f495047 	svcmi	0x00495047
     f74:	6e69505f 	mcrvs	0, 3, r5, cr9, cr15, {2}
     f78:	43435200 	movtmi	r5, #12800	; 0x3200
     f7c:	4248415f 	submi	r4, r8, #-1073741801	; 0xc0000017
     f80:	72655031 	rsbvc	r5, r5, #49	; 0x31
     f84:	52687069 	rsbpl	r7, r8, #105	; 0x69
     f88:	74657365 	strbtvc	r7, [r5], #-869	; 0xfffffc9b
     f8c:	00646d43 	rsbeq	r6, r4, r3, asr #26
     f90:	33433249 	movtcc	r3, #12873	; 0x3249
     f94:	5f56455f 	svcpl	0x0056455f
     f98:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     f9c:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
     fa0:	75505f4f 	ldrbvc	r5, [r0, #-3919]	; 0xfffff0b1
     fa4:	41006450 	tstmi	r0, r0, asr r4
     fa8:	52324248 	eorspl	r4, r2, #72, 4	; 0x80000004
     fac:	00525453 	subseq	r5, r2, r3, asr r4
     fb0:	5f485445 	svcpl	0x00485445
     fb4:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     fb8:	43435200 	movtmi	r5, #12800	; 0x3200
     fbc:	6f6c435f 	svcvs	0x006c435f
     fc0:	54736b63 	ldrbtpl	r6, [r3], #-2915	; 0xfffff49d
     fc4:	44657079 	strbtmi	r7, [r5], #-121	; 0xffffff87
     fc8:	4d006665 	stcmi	6, cr6, [r0, #-404]	; 0xfffffe6c
     fcc:	0052464d 	subseq	r4, r2, sp, asr #12
     fd0:	5f434352 	svcpl	0x00434352
     fd4:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0xfffff6ac
     fd8:	00666544 	rsbeq	r6, r6, r4, asr #10
     fdc:	726f6f64 	rsbvc	r6, pc, #100, 30	; 0x190
     fe0:	64003033 	strvs	r3, [r0], #-51	; 0xffffffcd
     fe4:	33726f6f 	cmncc	r2, #444	; 0x1bc
     fe8:	4d4d0031 	stclmi	0, cr0, [sp, #-196]	; 0xffffff3c
     fec:	00524146 	subseq	r4, r2, r6, asr #2
     ff0:	726f6873 	rsbvc	r6, pc, #7536640	; 0x730000
     ff4:	6e692074 	mcrvs	0, 3, r2, cr9, cr4, {3}
     ff8:	61700074 	cmnvs	r0, r4, ror r0
     ffc:	6f777373 	svcvs	0x00777373
    1000:	52006472 	andpl	r6, r0, #1912602624	; 0x72000000
    1004:	495f4343 	ldmdbmi	pc, {r0, r1, r6, r8, r9, lr}^	; <UNPREDICTABLE>
    1008:	006e5152 	rsbeq	r5, lr, r2, asr r1
    100c:	5f434352 	svcpl	0x00434352
    1010:	49005449 	stmdbmi	r0, {r0, r3, r6, sl, ip, lr}
    1014:	00524153 	subseq	r4, r2, r3, asr r1
    1018:	4f495047 	svcmi	0x00495047
    101c:	7079745f 	rsbsvc	r7, r9, pc, asr r4
    1020:	4d440065 	stclmi	0, cr0, [r4, #-404]	; 0xfffffe6c
    1024:	535f3141 	cmppl	pc, #1073741840	; 0x40000010
    1028:	61657274 	smcvs	22308	; 0x5724
    102c:	495f336d 	ldmdbmi	pc, {r0, r2, r3, r5, r6, r8, r9, ip, sp}^	; <UNPREDICTABLE>
    1030:	006e5152 	rsbeq	r5, lr, r2, asr r1
    1034:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    1038:	495f3254 	ldmdbmi	pc, {r2, r4, r6, r9, ip, sp}^	; <UNPREDICTABLE>
    103c:	006e5152 	rsbeq	r5, lr, r2, asr r1
    1040:	73746962 	cmnvc	r4, #1605632	; 0x188000
    1044:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0xfffffe8c
    1048:	4e450073 	mcrmi	0, 2, r0, cr5, cr3, {3}
    104c:	454c4241 	strbmi	r4, [ip, #-577]	; 0xfffffdbf
    1050:	6c6c7000 	stclvs	0, cr7, [ip], #-0
    1054:	006f6376 	rsbeq	r6, pc, r6, ror r3	; <UNPREDICTABLE>
    1058:	5f434352 	svcpl	0x00434352
    105c:	31425041 	cmpcc	r2, r1, asr #32
    1060:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
    1064:	6c436870 	mcrrvs	8, 7, r6, r3, cr0
    1068:	4c6b636f 	stclmi	3, cr6, [fp], #-444	; 0xfffffe44
    106c:	646f4d50 	strbtvs	r4, [pc], #-3408	; 1074 <startup-0x1fffef8c>
    1070:	646d4365 	strbtvs	r4, [sp], #-869	; 0xfffffc9b
    1074:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
    1078:	79545f4f 	ldmdbvc	r4, {r0, r1, r2, r3, r6, r8, r9, sl, fp, ip, lr}^
    107c:	65446570 	strbvs	r6, [r4, #-1392]	; 0xfffffa90
    1080:	49540066 	ldmdbmi	r4, {r1, r2, r5, r6}^
    1084:	555f314d 	ldrbpl	r3, [pc, #-333]	; f3f <startup-0x1ffff0c1>
    1088:	49545f50 	ldmdbmi	r4, {r4, r6, r8, r9, sl, fp, ip, lr}^
    108c:	5f30314d 	svcpl	0x0030314d
    1090:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
    1094:	4d544900 	vldrmi.16	s9, [r4, #-0]	; <UNPREDICTABLE>
    1098:	4278525f 	rsbsmi	r5, r8, #-268435451	; 0xf0000005
    109c:	65666675 	strbvs	r6, [r6, #-1653]!	; 0xfffff98b
    10a0:	4c500072 	mrrcmi	0, 7, r0, r0, cr2	; <UNPREDICTABLE>
    10a4:	5332494c 	teqpl	r2, #76, 18	; 0x130000
    10a8:	4352004e 	cmpmi	r2, #78	; 0x4e
    10ac:	48415f43 	stmdami	r1, {r0, r1, r6, r8, r9, sl, fp, ip, lr}^
    10b0:	65503142 	ldrbvs	r3, [r0, #-322]	; 0xfffffebe
    10b4:	68706972 	ldmdavs	r0!, {r1, r4, r5, r6, r8, fp, sp, lr}^
    10b8:	636f6c43 	cmnvs	pc, #17152	; 0x4300
    10bc:	4d504c6b 	ldclmi	12, cr4, [r0, #-428]	; 0xfffffe54
    10c0:	4365646f 	cmnmi	r5, #1862270976	; 0x6f000000
    10c4:	5000646d 	andpl	r6, r0, sp, ror #8
    10c8:	32494c4c 	subcc	r4, r9, #76, 24	; 0x4c00
    10cc:	6d005253 	sfmvs	f5, 4, [r0, #-332]	; 0xfffffeb4
    10d0:	006e6961 	rsbeq	r6, lr, r1, ror #18
    10d4:	5f47544f 	svcpl	0x0047544f
    10d8:	455f5348 	ldrbmi	r5, [pc, #-840]	; d98 <startup-0x1ffff268>
    10dc:	4f5f3150 	svcmi	0x005f3150
    10e0:	495f5455 	ldmdbmi	pc, {r0, r2, r4, r6, sl, ip, lr}^	; <UNPREDICTABLE>
    10e4:	006e5152 	rsbeq	r5, lr, r2, asr r1
    10e8:	6d72616c 	ldfvse	f6, [r2, #-432]!	; 0xfffffe50
    10ec:	6b636954 	blvs	18db644 <startup-0x1e7249bc>
    10f0:	43435200 	movtmi	r5, #12800	; 0x3200
    10f4:	4354525f 	cmpmi	r4, #-268435451	; 0xf0000005
    10f8:	434b4c43 	movtmi	r4, #48195	; 0xbc43
    10fc:	4d00646d 	cfstrsmi	mvf6, [r0, #-436]	; 0xfffffe4c
    1100:	5245444f 	subpl	r4, r5, #1325400064	; 0x4f000000
    1104:	49564e00 	ldmdbmi	r6, {r9, sl, fp, lr}^
    1108:	65535f43 	ldrbvs	r5, [r3, #-3907]	; 0xfffff0bd
    110c:	69725074 	ldmdbvs	r2!, {r2, r4, r5, r6, ip, lr}^
    1110:	7469726f 	strbtvc	r7, [r9], #-623	; 0xfffffd91
    1114:	41430079 	hvcmi	12297	; 0x3009
    1118:	525f314e 	subspl	r3, pc, #-2147483629	; 0x80000013
    111c:	495f3158 	ldmdbmi	pc, {r3, r4, r6, r8, ip, sp}^	; <UNPREDICTABLE>
    1120:	006e5152 	rsbeq	r5, lr, r2, asr r1
    1124:	5f434352 	svcpl	0x00434352
    1128:	32424841 	subcc	r4, r2, #4259840	; 0x410000
    112c:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
    1130:	47006870 	smlsdxmi	r0, r0, r8, r6
    1134:	5f4f4950 	svcpl	0x004f4950
    1138:	64507550 	ldrbvs	r7, [r0], #-1360	; 0xfffffab0
    113c:	0050555f 	subseq	r5, r0, pc, asr r5
    1140:	49545845 	ldmdbmi	r4, {r0, r2, r6, fp, ip, lr}^
    1144:	5f355f39 	svcpl	0x00355f39
    1148:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
    114c:	4c4c5000 	marmi	acc0, r5, ip
    1150:	43494153 	movtmi	r4, #37203	; 0x9153
    1154:	00524746 	subseq	r4, r2, r6, asr #14
    1158:	4e4c4c50 	mcrmi	12, 2, r4, cr12, cr0, {2}
    115c:	43435200 	movtmi	r5, #12800	; 0x3200
    1160:	4248415f 	submi	r4, r8, #-1073741801	; 0xc0000017
    1164:	72655031 	rsbvc	r5, r5, #49	; 0x31
    1168:	43687069 	cmnmi	r8, #105	; 0x69
    116c:	6b636f6c 	blvs	18dcf24 <startup-0x1e7230dc>
    1170:	00646d43 	rsbeq	r6, r4, r3, asr #26
    1174:	726f6873 	rsbvc	r6, pc, #7536640	; 0x730000
    1178:	6e752074 	mrcvs	0, 3, r2, cr5, cr4, {3}
    117c:	6e676973 			; <UNDEFINED> instruction: 0x6e676973
    1180:	69206465 	stmdbvs	r0!, {r0, r2, r5, r6, sl, sp, lr}
    1184:	5200746e 	andpl	r7, r0, #1845493760	; 0x6e000000
    1188:	505f4343 	subspl	r4, pc, r3, asr #6
    118c:	32494c4c 	subcc	r4, r9, #76, 24	; 0x4c00
    1190:	6e6f4353 	mcrvs	3, 3, r4, cr15, cr3, {2}
    1194:	00676966 	rsbeq	r6, r7, r6, ror #18
    1198:	384d4954 	stmdacc	sp, {r2, r4, r6, r8, fp, lr}^
    119c:	5f43435f 	svcpl	0x0043435f
    11a0:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
    11a4:	49445300 	stmdbmi	r4, {r8, r9, ip, lr}^
    11a8:	52495f4f 	subpl	r5, r9, #316	; 0x13c
    11ac:	43006e51 	movwmi	r6, #3665	; 0xe51
    11b0:	52434150 	subpl	r4, r3, #80, 2
    11b4:	6f6f6400 	svcvs	0x006f6400
    11b8:	00373172 	eorseq	r3, r7, r2, ror r1
    11bc:	52505349 	subspl	r5, r0, #603979777	; 0x24000001
    11c0:	53595300 	cmppl	r9, #0, 6
    11c4:	5f4b4c43 	svcpl	0x004b4c43
    11c8:	71657246 	cmnvc	r5, r6, asr #4
    11cc:	636e6575 	cmnvs	lr, #490733568	; 0x1d400000
    11d0:	58450079 	stmdapl	r5, {r0, r3, r4, r5, r6}^
    11d4:	5f334954 	svcpl	0x00334954
    11d8:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
    11dc:	6e655000 	cdpvs	0, 6, cr5, cr5, cr0, {0}
    11e0:	5f565364 	svcpl	0x00565364
    11e4:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
    11e8:	47544f00 	ldrbmi	r4, [r4, -r0, lsl #30]
    11ec:	5f53485f 	svcpl	0x0053485f
    11f0:	5f315045 	svcpl	0x00315045
    11f4:	495f4e49 	ldmdbmi	pc, {r0, r3, r6, r9, sl, fp, lr}^	; <UNPREDICTABLE>
    11f8:	006e5152 	rsbeq	r5, lr, r2, asr r1
    11fc:	31414d44 	cmpcc	r1, r4, asr #26
    1200:	7274535f 	rsbsvc	r5, r4, #2080374785	; 0x7c000001
    1204:	376d6165 	strbcc	r6, [sp, -r5, ror #2]!
    1208:	5152495f 	cmppl	r2, pc, asr r9
    120c:	5f5f006e 	svcpl	0x005f006e
    1210:	33746e69 	cmncc	r4, #1680	; 0x690
    1214:	00745f32 	rsbseq	r5, r4, r2, lsr pc
    1218:	5f434352 	svcpl	0x00434352
    121c:	434d4954 	movtmi	r4, #55636	; 0xd954
    1220:	72504b4c 	subsvc	r4, r0, #76, 22	; 0x13000
    1224:	61637365 	cmnvs	r3, r5, ror #6
    1228:	0072656c 	rsbseq	r6, r2, ip, ror #10
    122c:	52455349 	subpl	r5, r5, #603979777	; 0x24000001
    1230:	65727000 	ldrbvs	r7, [r2, #-0]!
    1234:	52006373 	andpl	r6, r0, #-872415231	; 0xcc000001
    1238:	415f4343 	cmpmi	pc, r3, asr #6
    123c:	50324248 	eorspl	r4, r2, r8, asr #4
    1240:	70697265 	rsbvc	r7, r9, r5, ror #4
    1244:	73655268 	cmnvc	r5, #104, 4	; 0x80000006
    1248:	6d437465 	cfstrdvs	mvd7, [r3, #-404]	; 0xfffffe6c
    124c:	43520064 	cmpmi	r2, #100	; 0x64
    1250:	4c505f43 	mrrcmi	15, 4, r5, r0, cr3
    1254:	4941534c 	stmdbmi	r1, {r2, r3, r6, r8, r9, ip, lr}^
    1258:	00646d43 	rsbeq	r6, r4, r3, asr #26
    125c:	33424841 	movtcc	r4, #10305	; 0x2841
    1260:	00524e45 	subseq	r4, r2, r5, asr #28
    1264:	5f434352 	svcpl	0x00434352
    1268:	43535953 	cmpmi	r3, #1359872	; 0x14c000
    126c:	6f434b4c 	svcvs	0x00434b4c
    1270:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    1274:	414d4400 	cmpmi	sp, r0, lsl #8
    1278:	74535f32 	ldrbvc	r5, [r3], #-3890	; 0xfffff0ce
    127c:	6d616572 	cfstr64vs	mvdx6, [r1, #-456]!	; 0xfffffe38
    1280:	52495f32 	subpl	r5, r9, #50, 30	; 0xc8
    1284:	47006e51 	smlsdmi	r0, r1, lr, r6
    1288:	5f4f4950 	svcpl	0x004f4950
    128c:	74736146 	ldrbtvc	r6, [r3], #-326	; 0xfffffeba
    1290:	6570535f 	ldrbvs	r5, [r0, #-863]!	; 0xfffffca1
    1294:	52006465 	andpl	r6, r0, #1694498816	; 0x65000000
    1298:	505f4343 	subspl	r4, pc, r3, asr #6
    129c:	6f434c4c 	svcvs	0x00434c4c
    12a0:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    12a4:	6c6c7000 	stclvs	0, cr7, [ip], #-0
    12a8:	6970006d 	ldmdbvs	r0!, {r0, r2, r3, r5, r6}^
    12ac:	736f706e 	cmnvc	pc, #110	; 0x6e
    12b0:	74694200 	strbtvc	r4, [r9], #-512	; 0xfffffe00
    12b4:	5445535f 	strbpl	r5, [r5], #-863	; 0xfffffca1
    12b8:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
    12bc:	65525f4f 	ldrbvs	r5, [r2, #-3919]	; 0xfffff0b1
    12c0:	754f6461 	strbvc	r6, [pc, #-1121]	; e67 <startup-0x1ffff199>
    12c4:	74757074 	ldrbtvc	r7, [r5], #-116	; 0xffffff8c
    12c8:	61746144 	cmnvs	r4, r4, asr #2
    12cc:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
    12d0:	46415f4f 	strbmi	r5, [r1], -pc, asr #30
    12d4:	6d657400 	cfstrdvs	mvd7, [r5, #-0]
    12d8:	50470070 	subpl	r0, r7, r0, ror r0
    12dc:	535f4f49 	cmppl	pc, #292	; 0x124
    12e0:	63757274 	cmnvs	r5, #116, 4	; 0x40000007
    12e4:	696e4974 	stmdbvs	lr!, {r2, r4, r5, r6, r8, fp, lr}^
    12e8:	69420074 	stmdbvs	r2, {r2, r4, r5, r6}^
    12ec:	6c615674 	stclvs	6, cr5, [r1], #-464	; 0xfffffe30
    12f0:	74694200 	strbtvc	r4, [r9], #-512	; 0xfffffe00
    12f4:	5345525f 	movtpl	r5, #21087	; 0x525f
    12f8:	47005445 	strmi	r5, [r0, -r5, asr #8]
    12fc:	5f4f4950 	svcpl	0x004f4950
    1300:	74697257 	strbtvc	r7, [r9], #-599	; 0xfffffda9
    1304:	74694265 	strbtvc	r4, [r9], #-613	; 0xfffffd9b
    1308:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
    130c:	65535f4f 	ldrbvs	r5, [r3, #-3919]	; 0xfffff0b1
    1310:	74694274 	strbtvc	r4, [r9], #-628	; 0xfffffd8c
    1314:	50470073 	subpl	r0, r7, r3, ror r0
    1318:	495f4f49 	ldmdbmi	pc, {r0, r3, r6, r8, r9, sl, fp, lr}^	; <UNPREDICTABLE>
    131c:	0074696e 	rsbseq	r6, r4, lr, ror #18
    1320:	4f495047 	svcmi	0x00495047
    1324:	7365525f 	cmnvc	r5, #-268435451	; 0xf0000005
    1328:	69427465 	stmdbvs	r2, {r0, r2, r5, r6, sl, ip, sp, lr}^
    132c:	43007374 	movwmi	r7, #884	; 0x374
    1330:	73552f3a 	cmpvc	r5, #58, 30	; 0xe8
    1334:	2f737265 	svccs	0x00737265
    1338:	6d616441 	cfstrdvs	mvd6, [r1, #-260]!	; 0xfffffefc
    133c:	6e4f2f74 	mcrvs	15, 2, r2, cr15, cr4, {3}
    1340:	69724465 	ldmdbvs	r2!, {r0, r2, r5, r6, sl, lr}^
    1344:	442f6576 	strtmi	r6, [pc], #-1398	; 134c <startup-0x1fffecb4>
    1348:	6d756b6f 	fldmdbxvs	r5!, {d22-d76}	;@ Deprecated
    134c:	2f746e65 	svccs	0x00746e65
    1350:	48746947 	ldmdami	r4!, {r0, r1, r2, r6, r8, fp, sp, lr}^
    1354:	442f6275 	strtmi	r6, [pc], #-629	; 135c <startup-0x1fffeca4>
    1358:	39325441 	ldmdbcc	r2!, {r0, r6, sl, ip, lr}
    135c:	614c2d30 	cmpvs	ip, r0, lsr sp
    1360:	79736d72 	ldmdbvc	r3!, {r1, r4, r5, r6, r8, sl, fp, sp, lr}^
    1364:	6d657473 	cfstrdvs	mvd7, [r5, #-460]!	; 0xfffffe34
    1368:	646f6b2f 	strbtvs	r6, [pc], #-2863	; 1370 <startup-0x1fffec90>
    136c:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    1370:	4d54532f 	ldclmi	3, cr5, [r4, #-188]	; 0xffffff44
    1374:	34463233 	strbcc	r3, [r6], #-563	; 0xfffffdcd
    1378:	62696c5f 	rsbvs	r6, r9, #24320	; 0x5f00
    137c:	4d54532f 	ldclmi	3, cr5, [r4, #-188]	; 0xffffff44
    1380:	34463233 	strbcc	r3, [r6], #-563	; 0xfffffdcd
    1384:	535f7878 	cmppl	pc, #120, 16	; 0x780000
    1388:	65506474 	ldrbvs	r6, [r0, #-1140]	; 0xfffffb8c
    138c:	68706972 	ldmdavs	r0!, {r1, r4, r5, r6, r8, fp, sp, lr}^
    1390:	6972445f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, sl, lr}^
    1394:	2f726576 	svccs	0x00726576
    1398:	2f637273 	svccs	0x00637273
    139c:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
    13a0:	78346632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, sp, lr}
    13a4:	70675f78 	rsbvc	r5, r7, r8, ror pc
    13a8:	632e6f69 			; <UNDEFINED> instruction: 0x632e6f69
    13ac:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
    13b0:	65445f4f 	strbvs	r5, [r4, #-3919]	; 0xfffff0b1
    13b4:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xfffff1b7
    13b8:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
    13bc:	65525f4f 	ldrbvs	r5, [r2, #-3919]	; 0xfffff0b1
    13c0:	6e496461 	cdpvs	4, 4, cr6, cr9, cr1, {3}
    13c4:	44747570 	ldrbtmi	r7, [r4], #-1392	; 0xfffffa90
    13c8:	42617461 	rsbmi	r7, r1, #1627389952	; 0x61000000
    13cc:	47007469 	strmi	r7, [r0, -r9, ror #8]
    13d0:	5f4f4950 	svcpl	0x004f4950
    13d4:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xfffff1b7
    13d8:	75727453 	ldrbvc	r7, [r2, #-1107]!	; 0xfffffbad
    13dc:	50007463 	andpl	r7, r0, r3, ror #8
    13e0:	5674726f 	ldrbtpl	r7, [r4], -pc, ror #4
    13e4:	47006c61 	strmi	r6, [r0, -r1, ror #24]
    13e8:	5f4f4950 	svcpl	0x004f4950
    13ec:	536e6950 	cmnpl	lr, #80, 18	; 0x140000
    13f0:	6372756f 	cmnvs	r2, #465567744	; 0x1bc00000
    13f4:	50470065 	subpl	r0, r7, r5, rrx
    13f8:	525f4f49 	subspl	r4, pc, #292	; 0x124
    13fc:	49646165 	stmdbmi	r4!, {r0, r2, r5, r6, r8, sp, lr}^
    1400:	7475706e 	ldrbtvc	r7, [r5], #-110	; 0xffffff92
    1404:	61746144 	cmnvs	r4, r4, asr #2
    1408:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
    140c:	69505f4f 	ldmdbvs	r0, {r0, r1, r2, r3, r6, r8, r9, sl, fp, ip, lr}^
    1410:	636f4c6e 	cmnvs	pc, #28160	; 0x6e00
    1414:	6e6f436b 	cdpvs	3, 6, cr4, cr15, cr11, {3}
    1418:	00676966 	rsbeq	r6, r7, r6, ror #18
    141c:	41746942 	cmnmi	r4, r2, asr #18
    1420:	6f697463 	svcvs	0x00697463
    1424:	7563006e 	strbvc	r0, [r3, #-110]!	; 0xffffff92
    1428:	6e657272 	mcrvs	2, 3, r7, cr5, cr2, {3}
    142c:	6e697074 	mcrvs	0, 3, r7, cr9, cr4, {3}
    1430:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
    1434:	72575f4f 	subsvc	r5, r7, #316	; 0x13c
    1438:	00657469 	rsbeq	r7, r5, r9, ror #8
    143c:	4f495047 	svcmi	0x00495047
    1440:	50470078 	subpl	r0, r7, r8, ror r0
    1444:	545f4f49 	ldrbpl	r4, [pc], #-3913	; 144c <startup-0x1fffebb4>
    1448:	6c67676f 	stclvs	7, cr6, [r7], #-444	; 0xfffffe44
    144c:	74694265 	strbtvc	r4, [r9], #-613	; 0xfffffd9b
    1450:	65740073 	ldrbvs	r0, [r4, #-115]!	; 0xffffff8d
    1454:	325f706d 	subscc	r7, pc, #109	; 0x6d
    1458:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
    145c:	69505f4f 	ldmdbvs	r0, {r0, r1, r2, r3, r6, r8, r9, sl, fp, ip, lr}^
    1460:	4346416e 	movtmi	r4, #24942	; 0x616e
    1464:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    1468:	50470067 	subpl	r0, r7, r7, rrx
    146c:	525f4f49 	subspl	r4, pc, #292	; 0x124
    1470:	4f646165 	svcmi	0x00646165
    1474:	75707475 	ldrbvc	r7, [r0, #-1141]!	; 0xfffffb8b
    1478:	74614474 	strbtvc	r4, [r1], #-1140	; 0xfffffb8c
    147c:	74694261 	strbtvc	r4, [r9], #-609	; 0xfffffd9f
    1480:	49564e00 	ldmdbmi	r6, {r9, sl, fp, lr}^
    1484:	6e495f43 	cdpvs	15, 4, cr5, cr9, cr3, {2}
    1488:	79547469 	ldmdbvc	r4, {r0, r3, r5, r6, sl, ip, sp, lr}^
    148c:	65446570 	strbvs	r6, [r4, #-1392]	; 0xfffffa90
    1490:	564e0066 	strbpl	r0, [lr], -r6, rrx
    1494:	495f4349 	ldmdbmi	pc, {r0, r3, r6, r8, r9, lr}^	; <UNPREDICTABLE>
    1498:	68435152 	stmdavs	r3, {r1, r4, r6, r8, ip, lr}^
    149c:	656e6e61 	strbvs	r6, [lr, #-3681]!	; 0xfffff19f
    14a0:	646d436c 	strbtvs	r4, [sp], #-876	; 0xfffffc94
    14a4:	73795300 	cmnvc	r9, #0, 6
    14a8:	6b636954 	blvs	18dba00 <startup-0x1e724600>
    14ac:	4b4c435f 	blmi	1312230 <startup-0x1eceddd0>
    14b0:	72756f53 	rsbsvc	r6, r5, #332	; 0x14c
    14b4:	4e006563 	cfsh32mi	mvfx6, mvfx0, #51
    14b8:	5f434956 	svcpl	0x00434956
    14bc:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xfffff1b7
    14c0:	75727453 	ldrbvc	r7, [r2, #-1107]!	; 0xfffffbad
    14c4:	4e007463 	cdpmi	4, 0, cr7, cr0, cr3, {3}
    14c8:	5f434956 	svcpl	0x00434956
    14cc:	6f697250 	svcvs	0x00697250
    14d0:	79746972 	ldmdbvc	r4!, {r1, r4, r5, r6, r8, fp, sp, lr}^
    14d4:	756f7247 	strbvc	r7, [pc, #-583]!	; 1295 <startup-0x1fffed6b>
    14d8:	564e0070 			; <UNDEFINED> instruction: 0x564e0070
    14dc:	495f4349 	ldmdbmi	pc, {r0, r3, r6, r8, r9, lr}^	; <UNPREDICTABLE>
    14e0:	0074696e 	rsbseq	r6, r4, lr, ror #18
    14e4:	70706d74 	rsbsvc	r6, r0, r4, ror sp
    14e8:	4f006572 	svcmi	0x00006572
    14ec:	65736666 	ldrbvs	r6, [r3, #-1638]!	; 0xfffff99a
    14f0:	564e0074 			; <UNDEFINED> instruction: 0x564e0074
    14f4:	535f4349 	cmppl	pc, #603979777	; 0x24000001
    14f8:	65567465 	ldrbvs	r7, [r6, #-1125]	; 0xfffffb9b
    14fc:	726f7463 	rsbvc	r7, pc, #1660944384	; 0x63000000
    1500:	6c626154 	stfvse	f6, [r2], #-336	; 0xfffffeb0
    1504:	6d740065 	ldclvs	0, cr0, [r4, #-404]!	; 0xfffffe6c
    1508:	62757370 	rsbsvs	r7, r5, #112, 6	; 0xc0000001
    150c:	49564e00 	ldmdbmi	r6, {r9, sl, fp, lr}^
    1510:	79535f43 	ldmdbvc	r3, {r0, r1, r6, r8, r9, sl, fp, ip, lr}^
    1514:	6d657473 	cfstrdvs	mvd7, [r5, #-460]!	; 0xfffffe34
    1518:	6f43504c 	svcvs	0x0043504c
    151c:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    1520:	73795300 	cmnvc	r9, #0, 6
    1524:	6b636954 	blvs	18dba7c <startup-0x1e724584>
    1528:	4b4c435f 	blmi	13122ac <startup-0x1ecedd54>
    152c:	72756f53 	rsbsvc	r6, r5, #332	; 0x14c
    1530:	6f436563 	svcvs	0x00436563
    1534:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    1538:	706d7400 	rsbvc	r7, sp, r0, lsl #8
    153c:	6f697270 	svcvs	0x00697270
    1540:	79746972 	ldmdbvc	r4!, {r1, r4, r5, r6, r8, fp, sp, lr}^
    1544:	49564e00 	ldmdbmi	r6, {r9, sl, fp, lr}^
    1548:	52495f43 	subpl	r5, r9, #268	; 0x10c
    154c:	61684351 	cmnvs	r8, r1, asr r3
    1550:	6c656e6e 	stclvs	14, cr6, [r5], #-440	; 0xfffffe48
    1554:	49564e00 	ldmdbmi	r6, {r9, sl, fp, lr}^
    1558:	52495f43 	subpl	r5, r9, #268	; 0x10c
    155c:	61684351 	cmnvs	r8, r1, asr r3
    1560:	6c656e6e 	stclvs	14, cr6, [r5], #-440	; 0xfffffe48
    1564:	50627553 	rsbpl	r7, r2, r3, asr r5
    1568:	726f6972 	rsbvc	r6, pc, #1867776	; 0x1c8000
    156c:	00797469 	rsbseq	r7, r9, r9, ror #8
    1570:	4349564e 	movtmi	r5, #38478	; 0x964e
    1574:	5152495f 	cmppl	r2, pc, asr r9
    1578:	6e616843 	cdpvs	8, 6, cr6, cr1, cr3, {2}
    157c:	506c656e 	rsbpl	r6, ip, lr, ror #10
    1580:	6d656572 	cfstr64vs	mvdx6, [r5, #-456]!	; 0xfffffe38
    1584:	6f697470 	svcvs	0x00697470
    1588:	6972506e 	ldmdbvs	r2!, {r1, r2, r3, r5, r6, ip, lr}^
    158c:	7469726f 	strbtvc	r7, [r9], #-623	; 0xfffffd91
    1590:	564e0079 			; <UNDEFINED> instruction: 0x564e0079
    1594:	565f4349 	ldrbpl	r4, [pc], -r9, asr #6
    1598:	54746365 	ldrbtpl	r6, [r4], #-869	; 0xfffffc9b
    159c:	43006261 	movwmi	r6, #609	; 0x261
    15a0:	73552f3a 	cmpvc	r5, #58, 30	; 0xe8
    15a4:	2f737265 	svccs	0x00737265
    15a8:	6d616441 	cfstrdvs	mvd6, [r1, #-260]!	; 0xfffffefc
    15ac:	6e4f2f74 	mcrvs	15, 2, r2, cr15, cr4, {3}
    15b0:	69724465 	ldmdbvs	r2!, {r0, r2, r5, r6, sl, lr}^
    15b4:	442f6576 	strtmi	r6, [pc], #-1398	; 15bc <startup-0x1fffea44>
    15b8:	6d756b6f 	fldmdbxvs	r5!, {d22-d76}	;@ Deprecated
    15bc:	2f746e65 	svccs	0x00746e65
    15c0:	48746947 	ldmdami	r4!, {r0, r1, r2, r6, r8, fp, sp, lr}^
    15c4:	442f6275 	strtmi	r6, [pc], #-629	; 15cc <startup-0x1fffea34>
    15c8:	39325441 	ldmdbcc	r2!, {r0, r6, sl, ip, lr}
    15cc:	614c2d30 	cmpvs	ip, r0, lsr sp
    15d0:	79736d72 	ldmdbvc	r3!, {r1, r4, r5, r6, r8, sl, fp, sp, lr}^
    15d4:	6d657473 	cfstrdvs	mvd7, [r5, #-460]!	; 0xfffffe34
    15d8:	646f6b2f 	strbtvs	r6, [pc], #-2863	; 15e0 <startup-0x1fffea20>
    15dc:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    15e0:	4d54532f 	ldclmi	3, cr5, [r4, #-188]	; 0xffffff44
    15e4:	34463233 	strbcc	r3, [r6], #-563	; 0xfffffdcd
    15e8:	62696c5f 	rsbvs	r6, r9, #24320	; 0x5f00
    15ec:	4d54532f 	ldclmi	3, cr5, [r4, #-188]	; 0xffffff44
    15f0:	34463233 	strbcc	r3, [r6], #-563	; 0xfffffdcd
    15f4:	535f7878 	cmppl	pc, #120, 16	; 0x780000
    15f8:	65506474 	ldrbvs	r6, [r0, #-1140]	; 0xfffffb8c
    15fc:	68706972 	ldmdavs	r0!, {r1, r4, r5, r6, r8, fp, sp, lr}^
    1600:	6972445f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, sl, lr}^
    1604:	2f726576 	svccs	0x00726576
    1608:	2f637273 	svccs	0x00637273
    160c:	6373696d 	cmnvs	r3, #1785856	; 0x1b4000
    1610:	4c00632e 	stcmi	3, cr6, [r0], {46}	; 0x2e
    1614:	6f50776f 	svcvs	0x0050776f
    1618:	4d726577 	cfldr64mi	mvdx6, [r2, #-476]!	; 0xfffffe24
    161c:	0065646f 	rsbeq	r6, r5, pc, ror #8
    1620:	4349564e 	movtmi	r5, #38478	; 0x964e
    1624:	6972505f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, ip, lr}^
    1628:	7469726f 	strbtvc	r7, [r9], #-623	; 0xfffffd91
    162c:	6f724779 	svcvs	0x00724779
    1630:	6f437075 	svcvs	0x00437075
    1634:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    1638:	66756200 	ldrbtvs	r6, [r5], -r0, lsl #4
    163c:	50726566 	rsbspl	r6, r2, r6, ror #10
    1640:	63007475 	movwvs	r7, #1141	; 0x475
    1644:	746e756f 	strbtvc	r7, [lr], #-1391	; 0xfffffa91
    1648:	2f3a4300 	svccs	0x003a4300
    164c:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
    1650:	64412f73 	strbvs	r2, [r1], #-3955	; 0xfffff08d
    1654:	2f746d61 	svccs	0x00746d61
    1658:	44656e4f 	strbtmi	r6, [r5], #-3663	; 0xfffff1b1
    165c:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
    1660:	6b6f442f 	blvs	1bd2724 <startup-0x1e42d8dc>
    1664:	6e656d75 	mcrvs	13, 3, r6, cr5, cr5, {3}
    1668:	69472f74 	stmdbvs	r7, {r2, r4, r5, r6, r8, r9, sl, fp, sp}^
    166c:	62754874 	rsbsvs	r4, r5, #116, 16	; 0x740000
    1670:	5441442f 	strbpl	r4, [r1], #-1071	; 0xfffffbd1
    1674:	2d303932 			; <UNDEFINED> instruction: 0x2d303932
    1678:	6d72614c 	ldfvse	f6, [r2, #-304]!	; 0xfffffed0
    167c:	74737973 	ldrbtvc	r7, [r3], #-2419	; 0xfffff68d
    1680:	6b2f6d65 	blvs	bdcc1c <startup-0x1f4233e4>
    1684:	6c2f646f 	cfstrsvs	mvf6, [pc], #-444	; 14d0 <startup-0x1fffeb30>
    1688:	622f6269 	eorvs	r6, pc, #-1879048186	; 0x90000006
    168c:	65666675 	strbvs	r6, [r6, #-1653]!	; 0xfffff98b
    1690:	00632e72 	rsbeq	r2, r3, r2, ror lr
    1694:	4f464946 	svcmi	0x00464946
    1698:	66756200 	ldrbtvs	r6, [r5], -r0, lsl #4
    169c:	4f726566 	svcmi	0x00726566
    16a0:	72726576 	rsbsvc	r6, r2, #494927872	; 0x1d800000
    16a4:	4c656469 	cfstrdmi	mvd6, [r5], #-420	; 0xfffffe5c
    16a8:	00747361 	rsbseq	r7, r4, r1, ror #6
    16ac:	74736564 	ldrbtvc	r6, [r3], #-1380	; 0xfffffa9c
    16b0:	66756200 	ldrbtvs	r6, [r5], -r0, lsl #4
    16b4:	6c650066 	stclvs	0, cr0, [r5], #-408	; 0xfffffe68
    16b8:	62006d65 	andvs	r6, r0, #6464	; 0x1940
    16bc:	65666675 	strbvs	r6, [r6, #-1653]!	; 0xfffff98b
    16c0:	74654772 	strbtvc	r4, [r5], #-1906	; 0xfffff88e
    16c4:	66756200 	ldrbtvs	r6, [r5], -r0, lsl #4
    16c8:	49726566 	ldmdbmi	r2!, {r1, r2, r5, r6, r8, sl, sp, lr}^
    16cc:	0074696e 	rsbseq	r6, r4, lr, ror #18
    16d0:	66667562 	strbtvs	r7, [r6], -r2, ror #10
    16d4:	70007265 	andvc	r7, r0, r5, ror #4
    16d8:	49766572 	ldmdbmi	r6!, {r1, r4, r5, r6, r8, sl, sp, lr}^
    16dc:	7865646e 	stmdavc	r5!, {r1, r2, r3, r5, r6, sl, sp, lr}^
    16e0:	746e6900 	strbtvc	r6, [lr], #-2304	; 0xfffff700
    16e4:	72656765 	rsbvc	r6, r5, #26476544	; 0x1940000
    16e8:	69766964 	ldmdbvs	r6!, {r2, r5, r6, r8, fp, sp, lr}^
    16ec:	00726564 	rsbseq	r6, r2, r4, ror #10
    16f0:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    16f4:	50435f54 	subpl	r5, r3, r4, asr pc
    16f8:	47004148 	strmi	r4, [r0, -r8, asr #2]
    16fc:	00525054 	subseq	r5, r2, r4, asr r0
    1700:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    1704:	65525f54 	ldrbvs	r5, [r2, #-3924]	; 0xfffff0ac
    1708:	76696563 	strbtvc	r6, [r9], -r3, ror #10
    170c:	61577265 	cmpvs	r7, r5, ror #4
    1710:	7055656b 	subsvc	r6, r5, fp, ror #10
    1714:	00646d43 	rsbeq	r6, r4, r3, asr #26
    1718:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    171c:	65535f54 	ldrbvs	r5, [r3, #-3924]	; 0xfffff0ac
    1720:	65725074 	ldrbvs	r5, [r2, #-116]!	; 0xffffff8c
    1724:	6c616373 	stclvs	3, cr6, [r1], #-460	; 0xfffffe34
    1728:	55007265 	strpl	r7, [r0, #-613]	; 0xfffffd9b
    172c:	54524153 	ldrbpl	r4, [r2], #-339	; 0xfffffead
    1730:	696e495f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, lr}^
    1734:	53550074 	cmppl	r5, #116	; 0x74
    1738:	5f545241 	svcpl	0x00545241
    173c:	424e494c 	submi	r4, lr, #76, 18	; 0x130000
    1740:	6b616572 	blvs	185ad10 <startup-0x1e7a52f0>
    1744:	65746544 	ldrbvs	r6, [r4, #-1348]!	; 0xfffffabc
    1748:	654c7463 	strbvs	r7, [ip, #-1123]	; 0xfffffb9d
    174c:	6874676e 	ldmdavs	r4!, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}^
    1750:	41535500 	cmpmi	r3, r0, lsl #10
    1754:	4f5f5452 	svcmi	0x005f5452
    1758:	6942656e 	stmdbvs	r2, {r1, r2, r3, r5, r6, r8, sl, sp, lr}^
    175c:	74654d74 	strbtvc	r4, [r5], #-3444	; 0xfffff28c
    1760:	43646f68 	cmnmi	r4, #104, 30	; 0x1a0
    1764:	5500646d 	strpl	r6, [r0, #-1133]	; 0xfffffb93
    1768:	54524153 	ldrbpl	r4, [r2], #-339	; 0xfffffead
    176c:	7079545f 	rsbsvc	r5, r9, pc, asr r4
    1770:	66654465 	strbtvs	r4, [r5], -r5, ror #8
    1774:	41535500 	cmpmi	r3, r0, lsl #10
    1778:	535f5452 	cmppl	pc, #1375731712	; 0x52000000
    177c:	42706f74 	rsbsmi	r6, r0, #116, 30	; 0x1d0
    1780:	00737469 	rsbseq	r7, r3, r9, ror #8
    1784:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    1788:	6c435f54 	mcrrvs	15, 5, r5, r3, cr4
    178c:	496b636f 	stmdbmi	fp!, {r0, r1, r2, r3, r5, r6, r8, r9, sp, lr}^
    1790:	5474696e 	ldrbtpl	r6, [r4], #-2414	; 0xfffff692
    1794:	44657079 	strbtmi	r7, [r5], #-121	; 0xffffff87
    1798:	55006665 	strpl	r6, [r0, #-1637]	; 0xfffff99b
    179c:	54524153 	ldrbpl	r4, [r2], #-339	; 0xfffffead
    17a0:	646d435f 	strbtvs	r4, [sp], #-863	; 0xfffffca1
    17a4:	41535500 	cmpmi	r3, r0, lsl #10
    17a8:	535f5452 	cmppl	pc, #1375731712	; 0x52000000
    17ac:	44646e65 	strbtmi	r6, [r4], #-3685	; 0xfffff19b
    17b0:	00617461 	rsbeq	r7, r1, r1, ror #8
    17b4:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    17b8:	61575f54 	cmpvs	r7, r4, asr pc
    17bc:	7055656b 	subsvc	r6, r5, fp, ror #10
    17c0:	41535500 	cmpmi	r3, r0, lsl #10
    17c4:	575f5452 			; <UNDEFINED> instruction: 0x575f5452
    17c8:	4c64726f 	sfmmi	f7, 2, [r4], #-444	; 0xfffffe44
    17cc:	74676e65 	strbtvc	r6, [r7], #-3685	; 0xfffff19b
    17d0:	53550068 	cmppl	r5, #104	; 0x68
    17d4:	5f545241 	svcpl	0x00545241
    17d8:	43414d44 	movtmi	r4, #7492	; 0x1d44
    17dc:	5500646d 	strpl	r6, [r0, #-1133]	; 0xfffffb93
    17e0:	54524153 	ldrbpl	r4, [r2], #-339	; 0xfffffead
    17e4:	73614c5f 	cmnvc	r1, #24320	; 0x5f00
    17e8:	74694274 	strbtvc	r4, [r9], #-628	; 0xfffffd8c
    17ec:	41535500 	cmpmi	r3, r0, lsl #10
    17f0:	425f5452 	subsmi	r5, pc, #1375731712	; 0x52000000
    17f4:	52647561 	rsbpl	r7, r4, #406847488	; 0x18400000
    17f8:	00657461 	rsbeq	r7, r5, r1, ror #8
    17fc:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    1800:	72495f54 	subvc	r5, r9, #84, 30	; 0x150
    1804:	6f4d4144 	svcvs	0x004d4144
    1808:	61006564 	tstvs	r0, r4, ror #10
    180c:	6c636270 	sfmvs	f6, 2, [r3], #-448	; 0xfffffe40
    1810:	006b636f 	rsbeq	r6, fp, pc, ror #6
    1814:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    1818:	6c435f54 	mcrrvs	15, 5, r5, r3, cr4
    181c:	49726165 	ldmdbmi	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    1820:	6e655054 	mcrvs	0, 3, r5, cr5, cr4, {2}
    1824:	676e6964 	strbvs	r6, [lr, -r4, ror #18]!
    1828:	00746942 	rsbseq	r6, r4, r2, asr #18
    182c:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    1830:	75475f54 	strbvc	r5, [r7, #-3924]	; 0xfffff0ac
    1834:	54647261 	strbtpl	r7, [r4], #-609	; 0xfffffd9f
    1838:	00656d69 	rsbeq	r6, r5, r9, ror #26
    183c:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    1840:	494c5f54 	stmdbmi	ip, {r2, r4, r6, r8, r9, sl, fp, ip, lr}^
    1844:	6572424e 	ldrbvs	r4, [r2, #-590]!	; 0xfffffdb2
    1848:	65446b61 	strbvs	r6, [r4, #-2913]	; 0xfffff49f
    184c:	74636574 	strbtvc	r6, [r3], #-1396	; 0xfffffa8c
    1850:	676e654c 	strbvs	r6, [lr, -ip, asr #10]!
    1854:	6f436874 	svcvs	0x00436874
    1858:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    185c:	41535500 	cmpmi	r3, r0, lsl #10
    1860:	465f5452 			; <UNDEFINED> instruction: 0x465f5452
    1864:	0047414c 	subeq	r4, r7, ip, asr #2
    1868:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    186c:	65445f54 	strbvs	r5, [r4, #-3924]	; 0xfffff0ac
    1870:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xfffff1b7
    1874:	41535500 	cmpmi	r3, r0, lsl #10
    1878:	435f5452 	cmpmi	pc, #1375731712	; 0x52000000
    187c:	6b636f6c 	blvs	18dd634 <startup-0x1e7229cc>
    1880:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xfffff1b7
    1884:	75727453 	ldrbvc	r7, [r2, #-1107]!	; 0xfffffbad
    1888:	55007463 	strpl	r7, [r0, #-1123]	; 0xfffffb9d
    188c:	54524153 	ldrbpl	r4, [r2], #-339	; 0xfffffead
    1890:	7261505f 	rsbvc	r5, r1, #95	; 0x5f
    1894:	00797469 	rsbseq	r7, r9, r9, ror #8
    1898:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    189c:	6c435f54 	mcrrvs	15, 5, r5, r3, cr4
    18a0:	536b636f 	cmnpl	fp, #-1140850687	; 0xbc000001
    18a4:	63757274 	cmnvs	r5, #116, 4	; 0x40000007
    18a8:	696e4974 	stmdbvs	lr!, {r2, r4, r5, r6, r8, fp, lr}^
    18ac:	73750074 	cmnvc	r5, #116	; 0x74
    18b0:	78747261 	ldmdavc	r4!, {r0, r5, r6, r9, ip, sp, lr}^
    18b4:	65736162 	ldrbvs	r6, [r3, #-354]!	; 0xfffffe9e
    18b8:	41535500 	cmpmi	r3, r0, lsl #10
    18bc:	435f5452 	cmpmi	pc, #1375731712	; 0x52000000
    18c0:	7261656c 	rsbvc	r6, r1, #108, 10	; 0x1b000000
    18c4:	67616c46 	strbvs	r6, [r1, -r6, asr #24]!
    18c8:	41535500 	cmpmi	r3, r0, lsl #10
    18cc:	535f5452 	cmppl	pc, #1375731712	; 0x52000000
    18d0:	64417465 	strbvs	r7, [r1], #-1125	; 0xfffffb9b
    18d4:	73657264 	cmnvc	r5, #100, 4	; 0x40000006
    18d8:	53550073 	cmppl	r5, #115	; 0x73
    18dc:	5f545241 	svcpl	0x00545241
    18e0:	47746553 			; <UNDEFINED> instruction: 0x47746553
    18e4:	64726175 	ldrbtvs	r6, [r2], #-373	; 0xfffffe8b
    18e8:	656d6954 	strbvs	r6, [sp, #-2388]!	; 0xfffff6ac
    18ec:	41535500 	cmpmi	r3, r0, lsl #10
    18f0:	535f5452 	cmppl	pc, #1375731712	; 0x52000000
    18f4:	42646e65 	rsbmi	r6, r4, #1616	; 0x650
    18f8:	6b616572 	blvs	185aec8 <startup-0x1e7a5138>
    18fc:	41535500 	cmpmi	r3, r0, lsl #10
    1900:	495f5452 	ldmdbmi	pc, {r1, r4, r6, sl, ip, lr}^	; <UNPREDICTABLE>
    1904:	5474696e 	ldrbtpl	r6, [r4], #-2414	; 0xfffff692
    1908:	44657079 	strbtmi	r7, [r5], #-121	; 0xffffff87
    190c:	55006665 	strpl	r6, [r0, #-1637]	; 0xfffff99b
    1910:	54524153 	ldrbpl	r4, [r2], #-339	; 0xfffffead
    1914:	4354495f 	cmpmi	r4, #1556480	; 0x17c000
    1918:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    191c:	53550067 	cmppl	r5, #103	; 0x67
    1920:	5f545241 	svcpl	0x00545241
    1924:	52414d44 	subpl	r4, r1, #68, 26	; 0x1100
    1928:	55007165 	strpl	r7, [r0, #-357]	; 0xfffffe9b
    192c:	54524153 	ldrbpl	r4, [r2], #-339	; 0xfffffead
    1930:	53550078 	cmppl	r5, #120	; 0x78
    1934:	5f545241 	svcpl	0x00545241
    1938:	64726148 	ldrbtvs	r6, [r2], #-328	; 0xfffffeb8
    193c:	65726177 	ldrbvs	r6, [r2, #-375]!	; 0xfffffe89
    1940:	776f6c46 	strbvc	r6, [pc, -r6, asr #24]!
    1944:	746e6f43 	strbtvc	r6, [lr], #-3907	; 0xfffff0bd
    1948:	006c6f72 	rsbeq	r6, ip, r2, ror pc
    194c:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    1950:	6d535f54 	ldclvs	15, cr5, [r3, #-336]	; 0xfffffeb0
    1954:	43747261 	cmnmi	r4, #268435462	; 0x10000006
    1958:	43647261 	cmnmi	r4, #268435462	; 0x10000006
    195c:	5500646d 	strpl	r6, [r0, #-1133]	; 0xfffffb93
    1960:	54524153 	ldrbpl	r4, [r2], #-339	; 0xfffffead
    1964:	646f4d5f 	strbtvs	r4, [pc], #-3423	; 196c <startup-0x1fffe694>
    1968:	53550065 	cmppl	r5, #101	; 0x65
    196c:	5f545241 	svcpl	0x00545241
    1970:	72646441 	rsbvc	r6, r4, #1090519040	; 0x41000000
    1974:	00737365 	rsbseq	r7, r3, r5, ror #6
    1978:	70746962 	rsbsvc	r6, r4, r2, ror #18
    197c:	5500736f 	strpl	r7, [r0, #-879]	; 0xfffffc91
    1980:	54524153 	ldrbpl	r4, [r2], #-339	; 0xfffffead
    1984:	65764f5f 	ldrbvs	r4, [r6, #-3935]!	; 0xfffff0a1
    1988:	6d615372 	stclvs	3, cr5, [r1, #-456]!	; 0xfffffe38
    198c:	6e696c70 	mcrvs	12, 3, r6, cr9, cr0, {3}
    1990:	6d433867 	stclvs	8, cr3, [r3, #-412]	; 0xfffffe64
    1994:	53550064 	cmppl	r5, #100	; 0x64
    1998:	5f545241 	svcpl	0x00545241
    199c:	49746547 	ldmdbmi	r4!, {r0, r1, r2, r6, r8, sl, sp, lr}^
    19a0:	61745354 	cmnvs	r4, r4, asr r3
    19a4:	00737574 	rsbseq	r7, r3, r4, ror r5
    19a8:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    19ac:	494c5f54 	stmdbmi	ip, {r2, r4, r6, r8, r9, sl, fp, ip, lr}^
    19b0:	646d434e 	strbtvs	r4, [sp], #-846	; 0xfffffcb2
    19b4:	41535500 	cmpmi	r3, r0, lsl #10
    19b8:	495f5452 	ldmdbmi	pc, {r1, r4, r6, sl, ip, lr}^	; <UNPREDICTABLE>
    19bc:	43414472 	movtmi	r4, #5234	; 0x1472
    19c0:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    19c4:	53550067 	cmppl	r5, #103	; 0x67
    19c8:	5f545241 	svcpl	0x00545241
    19cc:	636f6c43 	cmnvs	pc, #17152	; 0x4300
    19d0:	5355006b 	cmppl	r5, #107	; 0x6b
    19d4:	5f545241 	svcpl	0x00545241
    19d8:	41447249 	cmpmi	r4, r9, asr #4
    19dc:	00646d43 	rsbeq	r6, r4, r3, asr #26
    19e0:	63617266 	cmnvs	r1, #1610612742	; 0x60000006
    19e4:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
    19e8:	69646c61 	stmdbvs	r4!, {r0, r5, r6, sl, fp, sp, lr}^
    19ec:	65646976 	strbvs	r6, [r4, #-2422]!	; 0xfffff68a
    19f0:	53550072 	cmppl	r5, #114	; 0x72
    19f4:	5f545241 	svcpl	0x00545241
    19f8:	72616d53 	rsbvc	r6, r1, #5312	; 0x14c0
    19fc:	72614374 	rsbvc	r4, r1, #116, 6	; 0xd0000001
    1a00:	43414e64 	movtmi	r4, #7780	; 0x1e64
    1a04:	646d434b 	strbtvs	r4, [sp], #-843	; 0xfffffcb5
    1a08:	41535500 	cmpmi	r3, r0, lsl #10
    1a0c:	475f5452 			; <UNDEFINED> instruction: 0x475f5452
    1a10:	6c467465 	cfstrdvs	mvd7, [r6], {101}	; 0x65
    1a14:	74536761 	ldrbvc	r6, [r3], #-1889	; 0xfffff89f
    1a18:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
    1a1c:	41535500 	cmpmi	r3, r0, lsl #10
    1a20:	495f5452 	ldmdbmi	pc, {r1, r4, r6, sl, ip, lr}^	; <UNPREDICTABLE>
    1a24:	53550054 	cmppl	r5, #84	; 0x54
    1a28:	5f545241 	svcpl	0x00545241
    1a2c:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xfffff1b7
    1a30:	75727453 	ldrbvc	r7, [r2, #-1107]!	; 0xfffffbad
    1a34:	52007463 	andpl	r7, r0, #1660944384	; 0x63000000
    1a38:	435f4343 	cmpmi	pc, #201326593	; 0xc000001
    1a3c:	6b636f6c 	blvs	18dd7f4 <startup-0x1e72280c>
    1a40:	61745373 	cmnvs	r4, r3, ror r3
    1a44:	00737574 	rsbseq	r7, r3, r4, ror r5
    1a48:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    1a4c:	6c435f54 	mcrrvs	15, 5, r5, r3, cr4
    1a50:	496b636f 	stmdbmi	fp!, {r0, r1, r2, r3, r5, r6, r8, r9, sp, lr}^
    1a54:	0074696e 	rsbseq	r6, r4, lr, ror #18
    1a58:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    1a5c:	61575f54 	cmpvs	r7, r4, asr pc
    1a60:	7055656b 	subsvc	r6, r5, fp, ror #10
    1a64:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    1a68:	55006769 	strpl	r6, [r0, #-1897]	; 0xfffff897
    1a6c:	54524153 	ldrbpl	r4, [r2], #-339	; 0xfffffead
    1a70:	6c61485f 	stclvs	8, cr4, [r1], #-380	; 0xfffffe84
    1a74:	70754466 	rsbsvc	r4, r5, r6, ror #8
    1a78:	4378656c 	cmnmi	r8, #108, 10	; 0x1b000000
    1a7c:	5500646d 	strpl	r6, [r0, #-1133]	; 0xfffffb93
    1a80:	54524153 	ldrbpl	r4, [r2], #-339	; 0xfffffead
    1a84:	7274535f 	rsbsvc	r5, r4, #2080374785	; 0x7c000001
    1a88:	49746375 	ldmdbmi	r4!, {r0, r2, r4, r5, r6, r8, r9, sp, lr}^
    1a8c:	0074696e 	rsbseq	r6, r4, lr, ror #18
    1a90:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    1a94:	72505f54 	subsvc	r5, r0, #84, 30	; 0x150
    1a98:	61637365 	cmnvs	r3, r5, ror #6
    1a9c:	0072656c 	rsbseq	r6, r2, ip, ror #10
    1aa0:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    1aa4:	50435f54 	subpl	r5, r3, r4, asr pc
    1aa8:	69004c4f 	stmdbvs	r0, {r0, r1, r2, r3, r6, sl, fp, lr}
    1aac:	73616d74 	cmnvc	r1, #116, 26	; 0x1d00
    1ab0:	3a43006b 	bcc	10c1c64 <startup-0x1ef3e39c>
    1ab4:	6573552f 	ldrbvs	r5, [r3, #-1327]!	; 0xfffffad1
    1ab8:	412f7372 			; <UNDEFINED> instruction: 0x412f7372
    1abc:	746d6164 	strbtvc	r6, [sp], #-356	; 0xfffffe9c
    1ac0:	656e4f2f 	strbvs	r4, [lr, #-3887]!	; 0xfffff0d1
    1ac4:	76697244 	strbtvc	r7, [r9], -r4, asr #4
    1ac8:	6f442f65 	svcvs	0x00442f65
    1acc:	656d756b 	strbvs	r7, [sp, #-1387]!	; 0xfffffa95
    1ad0:	472f746e 	strmi	r7, [pc, -lr, ror #8]!
    1ad4:	75487469 	strbvc	r7, [r8, #-1129]	; 0xfffffb97
    1ad8:	41442f62 	cmpmi	r4, r2, ror #30
    1adc:	30393254 	eorscc	r3, r9, r4, asr r2
    1ae0:	72614c2d 	rsbvc	r4, r1, #11520	; 0x2d00
    1ae4:	7379736d 	cmnvc	r9, #-1275068415	; 0xb4000001
    1ae8:	2f6d6574 	svccs	0x006d6574
    1aec:	2f646f6b 	svccs	0x00646f6b
    1af0:	2f62696c 	svccs	0x0062696c
    1af4:	334d5453 	movtcc	r5, #54355	; 0xd453
    1af8:	5f344632 	svcpl	0x00344632
    1afc:	2f62696c 	svccs	0x0062696c
    1b00:	334d5453 	movtcc	r5, #54355	; 0xd453
    1b04:	78344632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, lr}
    1b08:	74535f78 	ldrbvc	r5, [r3], #-3960	; 0xfffff088
    1b0c:	72655064 	rsbvc	r5, r5, #100	; 0x64
    1b10:	5f687069 	svcpl	0x00687069
    1b14:	76697244 	strbtvc	r7, [r9], -r4, asr #4
    1b18:	732f7265 			; <UNDEFINED> instruction: 0x732f7265
    1b1c:	732f6372 			; <UNDEFINED> instruction: 0x732f6372
    1b20:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
    1b24:	78783466 	ldmdavc	r8!, {r1, r2, r5, r6, sl, ip, sp}^
    1b28:	6173755f 	cmnvs	r3, pc, asr r5
    1b2c:	632e7472 			; <UNDEFINED> instruction: 0x632e7472
    1b30:	41535500 	cmpmi	r3, r0, lsl #10
    1b34:	525f5452 	subspl	r5, pc, #1375731712	; 0x52000000
    1b38:	69656365 	stmdbvs	r5!, {r0, r2, r5, r6, r8, r9, sp, lr}^
    1b3c:	61446576 	hvcvs	18006	; 0x4656
    1b40:	75006174 	strvc	r6, [r0, #-372]	; 0xfffffe8c
    1b44:	74726173 	ldrbtvc	r6, [r2], #-371	; 0xfffffe8d
    1b48:	00676572 	rsbeq	r6, r7, r2, ror r5

Disassembly of section .comment:

00000000 <.comment>:
   0:	3a434347 	bcc	10d0d24 <startup-0x1ef2f2dc>
   4:	4e472820 	cdpmi	8, 4, cr2, cr7, cr0, {1}
   8:	6f542055 	svcvs	0x00542055
   c:	20736c6f 	rsbscs	r6, r3, pc, ror #24
  10:	20726f66 	rsbscs	r6, r2, r6, ror #30
  14:	206d7241 	rsbcs	r7, sp, r1, asr #4
  18:	65626d45 	strbvs	r6, [r2, #-3397]!	; 0xfffff2bb
  1c:	64656464 	strbtvs	r6, [r5], #-1124	; 0xfffffb9c
  20:	6f725020 	svcvs	0x00725020
  24:	73736563 	cmnvc	r3, #415236096	; 0x18c00000
  28:	2073726f 	rsbscs	r7, r3, pc, ror #4
  2c:	30322d37 	eorscc	r2, r2, r7, lsr sp
  30:	712d3731 			; <UNDEFINED> instruction: 0x712d3731
  34:	616d2d34 	cmnvs	sp, r4, lsr sp
  38:	29726f6a 	ldmdbcs	r2!, {r1, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
  3c:	322e3720 	eorcc	r3, lr, #32, 14	; 0x800000
  40:	3220312e 	eorcc	r3, r0, #-2147483637	; 0x8000000b
  44:	30373130 	eorscc	r3, r7, r0, lsr r1
  48:	20343039 	eorscs	r3, r4, r9, lsr r0
  4c:	6c657228 	sfmvs	f7, 2, [r5], #-160	; 0xffffff60
  50:	65736165 	ldrbvs	r6, [r3, #-357]!	; 0xfffffe9b
  54:	415b2029 	cmpmi	fp, r9, lsr #32
  58:	652f4d52 	strvs	r4, [pc, #-3410]!	; fffff30e <GPIO_Ports+0xdfffc29e>
  5c:	6465626d 	strbtvs	r6, [r5], #-621	; 0xfffffd93
  60:	2d646564 	cfstr64cs	mvdx6, [r4, #-400]!	; 0xfffffe70
  64:	72622d37 	rsbvc	r2, r2, #3520	; 0xdc0
  68:	68636e61 	stmdavs	r3!, {r0, r5, r6, r9, sl, fp, sp, lr}^
  6c:	76657220 	strbtvc	r7, [r5], -r0, lsr #4
  70:	6f697369 	svcvs	0x00697369
  74:	3532206e 	ldrcc	r2, [r2, #-110]!	; 0xffffff92
  78:	34303235 	ldrtcc	r3, [r0], #-565	; 0xfffffdcb
  7c:	Address 0x0000007c is out of bounds.


Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00002b41 	andeq	r2, r0, r1, asr #22
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	00000021 	andeq	r0, r0, r1, lsr #32
  10:	2d533605 	ldclcs	6, cr3, [r3, #-20]	; 0xffffffec
  14:	0c06004d 	stceq	0, cr0, [r6], {77}	; 0x4d
  18:	01094d07 	tsteq	r9, r7, lsl #26
  1c:	01140412 	tsteq	r4, r2, lsl r4
  20:	03170115 	tsteq	r7, #1073741829	; 0x40000005
  24:	01190118 	tsteq	r9, r8, lsl r1
  28:	061e011a 			; <UNDEFINED> instruction: 0x061e011a

Disassembly of section .debug_frame:

00000000 <.debug_frame>:
   0:	0000000c 	andeq	r0, r0, ip
   4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   8:	7c020001 	stcvc	0, cr0, [r2], {1}
   c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  10:	0000001c 	andeq	r0, r0, ip, lsl r0
  14:	00000000 	andeq	r0, r0, r0
  18:	20000010 	andcs	r0, r0, r0, lsl r0
  1c:	00000060 	andeq	r0, r0, r0, rrx
  20:	40080e41 	andmi	r0, r8, r1, asr #28
  24:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  28:	100e4101 	andne	r4, lr, r1, lsl #2
  2c:	00070d41 	andeq	r0, r7, r1, asr #26
  30:	0000001c 	andeq	r0, r0, ip, lsl r0
  34:	00000000 	andeq	r0, r0, r0
  38:	20000070 	andcs	r0, r0, r0, ror r0
  3c:	00000048 	andeq	r0, r0, r8, asr #32
  40:	40080e41 	andmi	r0, r8, r1, asr #28
  44:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  48:	100e4101 	andne	r4, lr, r1, lsl #2
  4c:	00070d41 	andeq	r0, r7, r1, asr #26
  50:	00000018 	andeq	r0, r0, r8, lsl r0
  54:	00000000 	andeq	r0, r0, r0
  58:	200000b8 	strhcs	r0, [r0], -r8
  5c:	00000070 	andeq	r0, r0, r0, ror r0
  60:	40080e41 	andmi	r0, r8, r1, asr #28
  64:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  68:	070d4101 	streq	r4, [sp, -r1, lsl #2]
  6c:	0000001c 	andeq	r0, r0, ip, lsl r0
  70:	00000000 	andeq	r0, r0, r0
  74:	20000128 	andcs	r0, r0, r8, lsr #2
  78:	00000028 	andeq	r0, r0, r8, lsr #32
  7c:	40080e41 	andmi	r0, r8, r1, asr #28
  80:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  84:	100e4101 	andne	r4, lr, r1, lsl #2
  88:	00070d41 	andeq	r0, r7, r1, asr #26
  8c:	00000020 	andeq	r0, r0, r0, lsr #32
  90:	00000000 	andeq	r0, r0, r0
  94:	20000150 	andcs	r0, r0, r0, asr r1
  98:	0000005e 	andeq	r0, r0, lr, asr r0
  9c:	400c0e41 	andmi	r0, ip, r1, asr #28
  a0:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
  a4:	018e4002 	orreq	r4, lr, r2
  a8:	41180e41 	tstmi	r8, r1, asr #28
  ac:	0000070d 	andeq	r0, r0, sp, lsl #14
  b0:	0000001c 	andeq	r0, r0, ip, lsl r0
  b4:	00000000 	andeq	r0, r0, r0
  b8:	200001ae 	andcs	r0, r0, lr, lsr #3
  bc:	0000003e 	andeq	r0, r0, lr, lsr r0
  c0:	40080e41 	andmi	r0, r8, r1, asr #28
  c4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  c8:	180e4101 	stmdane	lr, {r0, r8, lr}
  cc:	00070d41 	andeq	r0, r7, r1, asr #26
  d0:	0000001c 	andeq	r0, r0, ip, lsl r0
  d4:	00000000 	andeq	r0, r0, r0
  d8:	200001ec 	andcs	r0, r0, ip, ror #3
  dc:	00000020 	andeq	r0, r0, r0, lsr #32
  e0:	40080e41 	andmi	r0, r8, r1, asr #28
  e4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  e8:	100e4101 	andne	r4, lr, r1, lsl #2
  ec:	00070d41 	andeq	r0, r7, r1, asr #26
  f0:	0000001c 	andeq	r0, r0, ip, lsl r0
  f4:	00000000 	andeq	r0, r0, r0
  f8:	2000020c 	andcs	r0, r0, ip, lsl #4
  fc:	00000044 	andeq	r0, r0, r4, asr #32
 100:	40080e41 	andmi	r0, r8, r1, asr #28
 104:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 108:	100e4101 	andne	r4, lr, r1, lsl #2
 10c:	00070d41 	andeq	r0, r7, r1, asr #26
 110:	0000001c 	andeq	r0, r0, ip, lsl r0
 114:	00000000 	andeq	r0, r0, r0
 118:	20000250 	andcs	r0, r0, r0, asr r2
 11c:	00000020 	andeq	r0, r0, r0, lsr #32
 120:	40080e41 	andmi	r0, r8, r1, asr #28
 124:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 128:	100e4101 	andne	r4, lr, r1, lsl #2
 12c:	00070d41 	andeq	r0, r7, r1, asr #26
 130:	0000001c 	andeq	r0, r0, ip, lsl r0
 134:	00000000 	andeq	r0, r0, r0
 138:	20000270 	andcs	r0, r0, r0, ror r2
 13c:	0000003c 	andeq	r0, r0, ip, lsr r0
 140:	40080e41 	andmi	r0, r8, r1, asr #28
 144:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 148:	180e4101 	stmdane	lr, {r0, r8, lr}
 14c:	00070d41 	andeq	r0, r7, r1, asr #26
 150:	0000001c 	andeq	r0, r0, ip, lsl r0
 154:	00000000 	andeq	r0, r0, r0
 158:	200002ac 	andcs	r0, r0, ip, lsr #5
 15c:	00000020 	andeq	r0, r0, r0, lsr #32
 160:	40080e41 	andmi	r0, r8, r1, asr #28
 164:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 168:	100e4101 	andne	r4, lr, r1, lsl #2
 16c:	00070d41 	andeq	r0, r7, r1, asr #26
 170:	0000001c 	andeq	r0, r0, ip, lsl r0
 174:	00000000 	andeq	r0, r0, r0
 178:	200002cc 	andcs	r0, r0, ip, asr #5
 17c:	00000028 	andeq	r0, r0, r8, lsr #32
 180:	40080e41 	andmi	r0, r8, r1, asr #28
 184:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 188:	100e4101 	andne	r4, lr, r1, lsl #2
 18c:	00070d41 	andeq	r0, r7, r1, asr #26
 190:	0000001c 	andeq	r0, r0, ip, lsl r0
 194:	00000000 	andeq	r0, r0, r0
 198:	200002f4 	strdcs	r0, [r0], -r4
 19c:	00000020 	andeq	r0, r0, r0, lsr #32
 1a0:	40080e41 	andmi	r0, r8, r1, asr #28
 1a4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 1a8:	100e4101 	andne	r4, lr, r1, lsl #2
 1ac:	00070d41 	andeq	r0, r7, r1, asr #26
 1b0:	0000001c 	andeq	r0, r0, ip, lsl r0
 1b4:	00000000 	andeq	r0, r0, r0
 1b8:	20000314 	andcs	r0, r0, r4, lsl r3
 1bc:	00000030 	andeq	r0, r0, r0, lsr r0
 1c0:	40080e41 	andmi	r0, r8, r1, asr #28
 1c4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 1c8:	180e4101 	stmdane	lr, {r0, r8, lr}
 1cc:	00070d41 	andeq	r0, r7, r1, asr #26
 1d0:	0000001c 	andeq	r0, r0, ip, lsl r0
 1d4:	00000000 	andeq	r0, r0, r0
 1d8:	20000344 	andcs	r0, r0, r4, asr #6
 1dc:	00000020 	andeq	r0, r0, r0, lsr #32
 1e0:	40080e41 	andmi	r0, r8, r1, asr #28
 1e4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 1e8:	100e4101 	andne	r4, lr, r1, lsl #2
 1ec:	00070d41 	andeq	r0, r7, r1, asr #26
 1f0:	0000001c 	andeq	r0, r0, ip, lsl r0
 1f4:	00000000 	andeq	r0, r0, r0
 1f8:	20000364 	andcs	r0, r0, r4, ror #6
 1fc:	00000020 	andeq	r0, r0, r0, lsr #32
 200:	40080e41 	andmi	r0, r8, r1, asr #28
 204:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 208:	100e4101 	andne	r4, lr, r1, lsl #2
 20c:	00070d41 	andeq	r0, r7, r1, asr #26
 210:	0000001c 	andeq	r0, r0, ip, lsl r0
 214:	00000000 	andeq	r0, r0, r0
 218:	20000384 	andcs	r0, r0, r4, lsl #7
 21c:	00000040 	andeq	r0, r0, r0, asr #32
 220:	40080e41 	andmi	r0, r8, r1, asr #28
 224:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 228:	180e4101 	stmdane	lr, {r0, r8, lr}
 22c:	00070d41 	andeq	r0, r7, r1, asr #26
 230:	0000001c 	andeq	r0, r0, ip, lsl r0
 234:	00000000 	andeq	r0, r0, r0
 238:	200003c4 	andcs	r0, r0, r4, asr #7
 23c:	0000003c 	andeq	r0, r0, ip, lsr r0
 240:	40080e41 	andmi	r0, r8, r1, asr #28
 244:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 248:	180e4101 	stmdane	lr, {r0, r8, lr}
 24c:	00070d41 	andeq	r0, r7, r1, asr #26
 250:	0000001c 	andeq	r0, r0, ip, lsl r0
 254:	00000000 	andeq	r0, r0, r0
 258:	20000400 	andcs	r0, r0, r0, lsl #8
 25c:	00000034 	andeq	r0, r0, r4, lsr r0
 260:	40080e41 	andmi	r0, r8, r1, asr #28
 264:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 268:	180e4101 	stmdane	lr, {r0, r8, lr}
 26c:	00070d41 	andeq	r0, r7, r1, asr #26
 270:	00000018 	andeq	r0, r0, r8, lsl r0
 274:	00000000 	andeq	r0, r0, r0
 278:	20000434 	andcs	r0, r0, r4, lsr r4
 27c:	0000001c 	andeq	r0, r0, ip, lsl r0
 280:	40080e41 	andmi	r0, r8, r1, asr #28
 284:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 288:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 28c:	0000001c 	andeq	r0, r0, ip, lsl r0
 290:	00000000 	andeq	r0, r0, r0
 294:	20000450 	andcs	r0, r0, r0, asr r4
 298:	00000034 	andeq	r0, r0, r4, lsr r0
 29c:	40080e41 	andmi	r0, r8, r1, asr #28
 2a0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 2a4:	180e4101 	stmdane	lr, {r0, r8, lr}
 2a8:	00070d41 	andeq	r0, r7, r1, asr #26
 2ac:	0000001c 	andeq	r0, r0, ip, lsl r0
 2b0:	00000000 	andeq	r0, r0, r0
 2b4:	20000484 	andcs	r0, r0, r4, lsl #9
 2b8:	00000038 	andeq	r0, r0, r8, lsr r0
 2bc:	40080e41 	andmi	r0, r8, r1, asr #28
 2c0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 2c4:	180e4101 	stmdane	lr, {r0, r8, lr}
 2c8:	00070d41 	andeq	r0, r7, r1, asr #26
 2cc:	0000001c 	andeq	r0, r0, ip, lsl r0
 2d0:	00000000 	andeq	r0, r0, r0
 2d4:	200004bc 			; <UNDEFINED> instruction: 0x200004bc
 2d8:	0000003c 	andeq	r0, r0, ip, lsr r0
 2dc:	40080e41 	andmi	r0, r8, r1, asr #28
 2e0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 2e4:	180e4101 	stmdane	lr, {r0, r8, lr}
 2e8:	00070d41 	andeq	r0, r7, r1, asr #26
 2ec:	0000001c 	andeq	r0, r0, ip, lsl r0
 2f0:	00000000 	andeq	r0, r0, r0
 2f4:	200004f8 	strdcs	r0, [r0], -r8
 2f8:	00000158 	andeq	r0, r0, r8, asr r1
 2fc:	40080e41 	andmi	r0, r8, r1, asr #28
 300:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 304:	280e4101 	stmdacs	lr, {r0, r8, lr}
 308:	00070d41 	andeq	r0, r7, r1, asr #26
 30c:	0000001c 	andeq	r0, r0, ip, lsl r0
 310:	00000000 	andeq	r0, r0, r0
 314:	20000650 	andcs	r0, r0, r0, asr r6
 318:	00000060 	andeq	r0, r0, r0, rrx
 31c:	40080e41 	andmi	r0, r8, r1, asr #28
 320:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 324:	180e4101 	stmdane	lr, {r0, r8, lr}
 328:	00070d41 	andeq	r0, r7, r1, asr #26
 32c:	0000001c 	andeq	r0, r0, ip, lsl r0
 330:	00000000 	andeq	r0, r0, r0
 334:	200006b0 			; <UNDEFINED> instruction: 0x200006b0
 338:	00000020 	andeq	r0, r0, r0, lsr #32
 33c:	40080e41 	andmi	r0, r8, r1, asr #28
 340:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 344:	100e4101 	andne	r4, lr, r1, lsl #2
 348:	00070d41 	andeq	r0, r7, r1, asr #26
 34c:	0000001c 	andeq	r0, r0, ip, lsl r0
 350:	00000000 	andeq	r0, r0, r0
 354:	200006d0 	ldrdcs	r0, [r0], -r0	; <UNPREDICTABLE>
 358:	00000020 	andeq	r0, r0, r0, lsr #32
 35c:	40080e41 	andmi	r0, r8, r1, asr #28
 360:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 364:	100e4101 	andne	r4, lr, r1, lsl #2
 368:	00070d41 	andeq	r0, r7, r1, asr #26
 36c:	0000001c 	andeq	r0, r0, ip, lsl r0
 370:	00000000 	andeq	r0, r0, r0
 374:	200006f0 	strdcs	r0, [r0], -r0	; <UNPREDICTABLE>
 378:	0000001c 	andeq	r0, r0, ip, lsl r0
 37c:	40080e41 	andmi	r0, r8, r1, asr #28
 380:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 384:	100e4101 	andne	r4, lr, r1, lsl #2
 388:	00070d41 	andeq	r0, r7, r1, asr #26
 38c:	0000001c 	andeq	r0, r0, ip, lsl r0
 390:	00000000 	andeq	r0, r0, r0
 394:	2000070c 	andcs	r0, r0, ip, lsl #14
 398:	0000003c 	andeq	r0, r0, ip, lsr r0
 39c:	40080e41 	andmi	r0, r8, r1, asr #28
 3a0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 3a4:	180e4101 	stmdane	lr, {r0, r8, lr}
 3a8:	00070d41 	andeq	r0, r7, r1, asr #26
 3ac:	0000001c 	andeq	r0, r0, ip, lsl r0
 3b0:	00000000 	andeq	r0, r0, r0
 3b4:	20000748 	andcs	r0, r0, r8, asr #14
 3b8:	0000003c 	andeq	r0, r0, ip, lsr r0
 3bc:	40080e41 	andmi	r0, r8, r1, asr #28
 3c0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 3c4:	180e4101 	stmdane	lr, {r0, r8, lr}
 3c8:	00070d41 	andeq	r0, r7, r1, asr #26
 3cc:	0000001c 	andeq	r0, r0, ip, lsl r0
 3d0:	00000000 	andeq	r0, r0, r0
 3d4:	20000784 	andcs	r0, r0, r4, lsl #15
 3d8:	0000003c 	andeq	r0, r0, ip, lsr r0
 3dc:	40080e41 	andmi	r0, r8, r1, asr #28
 3e0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 3e4:	180e4101 	stmdane	lr, {r0, r8, lr}
 3e8:	00070d41 	andeq	r0, r7, r1, asr #26
 3ec:	0000001c 	andeq	r0, r0, ip, lsl r0
 3f0:	00000000 	andeq	r0, r0, r0
 3f4:	200007c0 	andcs	r0, r0, r0, asr #15
 3f8:	00000040 	andeq	r0, r0, r0, asr #32
 3fc:	40080e41 	andmi	r0, r8, r1, asr #28
 400:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 404:	180e4101 	stmdane	lr, {r0, r8, lr}
 408:	00070d41 	andeq	r0, r7, r1, asr #26
 40c:	0000001c 	andeq	r0, r0, ip, lsl r0
 410:	00000000 	andeq	r0, r0, r0
 414:	20000800 	andcs	r0, r0, r0, lsl #16
 418:	0000003c 	andeq	r0, r0, ip, lsr r0
 41c:	40080e41 	andmi	r0, r8, r1, asr #28
 420:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 424:	180e4101 	stmdane	lr, {r0, r8, lr}
 428:	00070d41 	andeq	r0, r7, r1, asr #26
 42c:	0000001c 	andeq	r0, r0, ip, lsl r0
 430:	00000000 	andeq	r0, r0, r0
 434:	2000083c 	andcs	r0, r0, ip, lsr r8
 438:	0000001c 	andeq	r0, r0, ip, lsl r0
 43c:	40080e41 	andmi	r0, r8, r1, asr #28
 440:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 444:	100e4101 	andne	r4, lr, r1, lsl #2
 448:	00070d41 	andeq	r0, r7, r1, asr #26
 44c:	0000001c 	andeq	r0, r0, ip, lsl r0
 450:	00000000 	andeq	r0, r0, r0
 454:	20000858 	andcs	r0, r0, r8, asr r8
 458:	00000040 	andeq	r0, r0, r0, asr #32
 45c:	40080e41 	andmi	r0, r8, r1, asr #28
 460:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 464:	100e4101 	andne	r4, lr, r1, lsl #2
 468:	00070d41 	andeq	r0, r7, r1, asr #26
 46c:	0000001c 	andeq	r0, r0, ip, lsl r0
 470:	00000000 	andeq	r0, r0, r0
 474:	20000898 	mulcs	r0, r8, r8
 478:	00000040 	andeq	r0, r0, r0, asr #32
 47c:	40080e41 	andmi	r0, r8, r1, asr #28
 480:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 484:	100e4101 	andne	r4, lr, r1, lsl #2
 488:	00070d41 	andeq	r0, r7, r1, asr #26
 48c:	0000001c 	andeq	r0, r0, ip, lsl r0
 490:	00000000 	andeq	r0, r0, r0
 494:	200008d8 	ldrdcs	r0, [r0], -r8
 498:	00000040 	andeq	r0, r0, r0, asr #32
 49c:	40080e41 	andmi	r0, r8, r1, asr #28
 4a0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 4a4:	100e4101 	andne	r4, lr, r1, lsl #2
 4a8:	00070d41 	andeq	r0, r7, r1, asr #26
 4ac:	0000001c 	andeq	r0, r0, ip, lsl r0
 4b0:	00000000 	andeq	r0, r0, r0
 4b4:	20000918 	andcs	r0, r0, r8, lsl r9
 4b8:	00000040 	andeq	r0, r0, r0, asr #32
 4bc:	40080e41 	andmi	r0, r8, r1, asr #28
 4c0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 4c4:	100e4101 	andne	r4, lr, r1, lsl #2
 4c8:	00070d41 	andeq	r0, r7, r1, asr #26
 4cc:	0000001c 	andeq	r0, r0, ip, lsl r0
 4d0:	00000000 	andeq	r0, r0, r0
 4d4:	20000958 	andcs	r0, r0, r8, asr r9
 4d8:	00000040 	andeq	r0, r0, r0, asr #32
 4dc:	40080e41 	andmi	r0, r8, r1, asr #28
 4e0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 4e4:	100e4101 	andne	r4, lr, r1, lsl #2
 4e8:	00070d41 	andeq	r0, r7, r1, asr #26
 4ec:	0000001c 	andeq	r0, r0, ip, lsl r0
 4f0:	00000000 	andeq	r0, r0, r0
 4f4:	20000998 	mulcs	r0, r8, r9
 4f8:	00000040 	andeq	r0, r0, r0, asr #32
 4fc:	40080e41 	andmi	r0, r8, r1, asr #28
 500:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 504:	100e4101 	andne	r4, lr, r1, lsl #2
 508:	00070d41 	andeq	r0, r7, r1, asr #26
 50c:	0000001c 	andeq	r0, r0, ip, lsl r0
 510:	00000000 	andeq	r0, r0, r0
 514:	200009d8 	ldrdcs	r0, [r0], -r8
 518:	00000040 	andeq	r0, r0, r0, asr #32
 51c:	40080e41 	andmi	r0, r8, r1, asr #28
 520:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 524:	100e4101 	andne	r4, lr, r1, lsl #2
 528:	00070d41 	andeq	r0, r7, r1, asr #26
 52c:	0000001c 	andeq	r0, r0, ip, lsl r0
 530:	00000000 	andeq	r0, r0, r0
 534:	20000a18 	andcs	r0, r0, r8, lsl sl
 538:	00000040 	andeq	r0, r0, r0, asr #32
 53c:	40080e41 	andmi	r0, r8, r1, asr #28
 540:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 544:	100e4101 	andne	r4, lr, r1, lsl #2
 548:	00070d41 	andeq	r0, r7, r1, asr #26
 54c:	0000001c 	andeq	r0, r0, ip, lsl r0
 550:	00000000 	andeq	r0, r0, r0
 554:	20000a58 	andcs	r0, r0, r8, asr sl
 558:	00000040 	andeq	r0, r0, r0, asr #32
 55c:	40080e41 	andmi	r0, r8, r1, asr #28
 560:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 564:	100e4101 	andne	r4, lr, r1, lsl #2
 568:	00070d41 	andeq	r0, r7, r1, asr #26
 56c:	0000001c 	andeq	r0, r0, ip, lsl r0
 570:	00000000 	andeq	r0, r0, r0
 574:	20000a98 	mulcs	r0, r8, sl
 578:	00000040 	andeq	r0, r0, r0, asr #32
 57c:	40080e41 	andmi	r0, r8, r1, asr #28
 580:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 584:	100e4101 	andne	r4, lr, r1, lsl #2
 588:	00070d41 	andeq	r0, r7, r1, asr #26
 58c:	0000001c 	andeq	r0, r0, ip, lsl r0
 590:	00000000 	andeq	r0, r0, r0
 594:	20000ad8 	ldrdcs	r0, [r0], -r8
 598:	00000040 	andeq	r0, r0, r0, asr #32
 59c:	40080e41 	andmi	r0, r8, r1, asr #28
 5a0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 5a4:	100e4101 	andne	r4, lr, r1, lsl #2
 5a8:	00070d41 	andeq	r0, r7, r1, asr #26
 5ac:	0000001c 	andeq	r0, r0, ip, lsl r0
 5b0:	00000000 	andeq	r0, r0, r0
 5b4:	20000b18 	andcs	r0, r0, r8, lsl fp
 5b8:	00000040 	andeq	r0, r0, r0, asr #32
 5bc:	40080e41 	andmi	r0, r8, r1, asr #28
 5c0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 5c4:	100e4101 	andne	r4, lr, r1, lsl #2
 5c8:	00070d41 	andeq	r0, r7, r1, asr #26
 5cc:	0000001c 	andeq	r0, r0, ip, lsl r0
 5d0:	00000000 	andeq	r0, r0, r0
 5d4:	20000b58 	andcs	r0, r0, r8, asr fp
 5d8:	00000040 	andeq	r0, r0, r0, asr #32
 5dc:	40080e41 	andmi	r0, r8, r1, asr #28
 5e0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 5e4:	100e4101 	andne	r4, lr, r1, lsl #2
 5e8:	00070d41 	andeq	r0, r7, r1, asr #26
 5ec:	0000001c 	andeq	r0, r0, ip, lsl r0
 5f0:	00000000 	andeq	r0, r0, r0
 5f4:	20000b98 	mulcs	r0, r8, fp
 5f8:	00000040 	andeq	r0, r0, r0, asr #32
 5fc:	40080e41 	andmi	r0, r8, r1, asr #28
 600:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 604:	100e4101 	andne	r4, lr, r1, lsl #2
 608:	00070d41 	andeq	r0, r7, r1, asr #26
 60c:	0000001c 	andeq	r0, r0, ip, lsl r0
 610:	00000000 	andeq	r0, r0, r0
 614:	20000bd8 	ldrdcs	r0, [r0], -r8
 618:	00000040 	andeq	r0, r0, r0, asr #32
 61c:	40080e41 	andmi	r0, r8, r1, asr #28
 620:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 624:	100e4101 	andne	r4, lr, r1, lsl #2
 628:	00070d41 	andeq	r0, r7, r1, asr #26
 62c:	0000001c 	andeq	r0, r0, ip, lsl r0
 630:	00000000 	andeq	r0, r0, r0
 634:	20000c18 	andcs	r0, r0, r8, lsl ip
 638:	0000003c 	andeq	r0, r0, ip, lsr r0
 63c:	40080e41 	andmi	r0, r8, r1, asr #28
 640:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 644:	100e4101 	andne	r4, lr, r1, lsl #2
 648:	00070d41 	andeq	r0, r7, r1, asr #26
 64c:	0000001c 	andeq	r0, r0, ip, lsl r0
 650:	00000000 	andeq	r0, r0, r0
 654:	20000c54 	andcs	r0, r0, r4, asr ip
 658:	00000050 	andeq	r0, r0, r0, asr r0
 65c:	40080e41 	andmi	r0, r8, r1, asr #28
 660:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 664:	100e4101 	andne	r4, lr, r1, lsl #2
 668:	00070d41 	andeq	r0, r7, r1, asr #26
 66c:	0000001c 	andeq	r0, r0, ip, lsl r0
 670:	00000000 	andeq	r0, r0, r0
 674:	20000ca4 	andcs	r0, r0, r4, lsr #25
 678:	00000084 	andeq	r0, r0, r4, lsl #1
 67c:	40080e41 	andmi	r0, r8, r1, asr #28
 680:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 684:	200e4101 	andcs	r4, lr, r1, lsl #2
 688:	00070d41 	andeq	r0, r7, r1, asr #26
 68c:	00000018 	andeq	r0, r0, r8, lsl r0
 690:	00000000 	andeq	r0, r0, r0
 694:	20000d28 	andcs	r0, r0, r8, lsr #26
 698:	0000001c 	andeq	r0, r0, ip, lsl r0
 69c:	40080e41 	andmi	r0, r8, r1, asr #28
 6a0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 6a4:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 6a8:	0000001c 	andeq	r0, r0, ip, lsl r0
 6ac:	00000000 	andeq	r0, r0, r0
 6b0:	20000d44 	andcs	r0, r0, r4, asr #26
 6b4:	00000044 	andeq	r0, r0, r4, asr #32
 6b8:	40080e41 	andmi	r0, r8, r1, asr #28
 6bc:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 6c0:	180e4101 	stmdane	lr, {r0, r8, lr}
 6c4:	00070d41 	andeq	r0, r7, r1, asr #26
 6c8:	0000001c 	andeq	r0, r0, ip, lsl r0
 6cc:	00000000 	andeq	r0, r0, r0
 6d0:	20000d88 	andcs	r0, r0, r8, lsl #27
 6d4:	00000020 	andeq	r0, r0, r0, lsr #32
 6d8:	40080e41 	andmi	r0, r8, r1, asr #28
 6dc:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 6e0:	100e4101 	andne	r4, lr, r1, lsl #2
 6e4:	00070d41 	andeq	r0, r7, r1, asr #26
 6e8:	0000001c 	andeq	r0, r0, ip, lsl r0
 6ec:	00000000 	andeq	r0, r0, r0
 6f0:	20000da8 	andcs	r0, r0, r8, lsr #27
 6f4:	000001c8 	andeq	r0, r0, r8, asr #3
 6f8:	40080e41 	andmi	r0, r8, r1, asr #28
 6fc:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 700:	100e4101 	andne	r4, lr, r1, lsl #2
 704:	00070d41 	andeq	r0, r7, r1, asr #26
 708:	0000000c 	andeq	r0, r0, ip
 70c:	00000000 	andeq	r0, r0, r0
 710:	20000000 	andcs	r0, r0, r0
 714:	0000000c 	andeq	r0, r0, ip
 718:	00000018 	andeq	r0, r0, r8, lsl r0
 71c:	00000000 	andeq	r0, r0, r0
 720:	20000f70 	andcs	r0, r0, r0, ror pc
 724:	00000018 	andeq	r0, r0, r8, lsl r0
 728:	40080e41 	andmi	r0, r8, r1, asr #28
 72c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 730:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 734:	0000001c 	andeq	r0, r0, ip, lsl r0
 738:	00000000 	andeq	r0, r0, r0
 73c:	20000f88 	andcs	r0, r0, r8, lsl #31
 740:	0000002c 	andeq	r0, r0, ip, lsr #32
 744:	40080e41 	andmi	r0, r8, r1, asr #28
 748:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 74c:	100e4101 	andne	r4, lr, r1, lsl #2
 750:	00070d41 	andeq	r0, r7, r1, asr #26
 754:	0000002c 	andeq	r0, r0, ip, lsr #32
 758:	00000000 	andeq	r0, r0, r0
 75c:	20000fb4 			; <UNDEFINED> instruction: 0x20000fb4
 760:	00000d50 	andeq	r0, r0, r0, asr sp
 764:	40140e41 	andsmi	r0, r4, r1, asr #28
 768:	85400584 	strbhi	r0, [r0, #-1412]	; 0xfffffa7c
 76c:	03864004 	orreq	r4, r6, #4
 770:	40028740 	andmi	r8, r2, r0, asr #14
 774:	0e42018e 	dvfeqd	f0, f2, #0.5
 778:	06884018 	pkhbteq	r4, r8, r8
 77c:	10c00e42 	sbcne	r0, r0, r2, asr #28
 780:	00070d41 	andeq	r0, r7, r1, asr #26
 784:	0000000c 	andeq	r0, r0, ip
 788:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 78c:	7c020001 	stcvc	0, cr0, [r2], {1}
 790:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 794:	0000001c 	andeq	r0, r0, ip, lsl r0
 798:	00000784 	andeq	r0, r0, r4, lsl #15
 79c:	20001d04 	andcs	r1, r0, r4, lsl #26
 7a0:	00000170 	andeq	r0, r0, r0, ror r1
 7a4:	40080e41 	andmi	r0, r8, r1, asr #28
 7a8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 7ac:	100e4101 	andne	r4, lr, r1, lsl #2
 7b0:	00070d41 	andeq	r0, r7, r1, asr #26
 7b4:	0000001c 	andeq	r0, r0, ip, lsl r0
 7b8:	00000784 	andeq	r0, r0, r4, lsl #15
 7bc:	20001e74 	andcs	r1, r0, r4, ror lr
 7c0:	00000118 	andeq	r0, r0, r8, lsl r1
 7c4:	40080e41 	andmi	r0, r8, r1, asr #28
 7c8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 7cc:	200e4101 	andcs	r4, lr, r1, lsl #2
 7d0:	00070d41 	andeq	r0, r7, r1, asr #26
 7d4:	0000001c 	andeq	r0, r0, ip, lsl r0
 7d8:	00000784 	andeq	r0, r0, r4, lsl #15
 7dc:	20001f8c 	andcs	r1, r0, ip, lsl #31
 7e0:	00000034 	andeq	r0, r0, r4, lsr r0
 7e4:	40080e41 	andmi	r0, r8, r1, asr #28
 7e8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 7ec:	100e4101 	andne	r4, lr, r1, lsl #2
 7f0:	00070d41 	andeq	r0, r7, r1, asr #26
 7f4:	0000001c 	andeq	r0, r0, ip, lsl r0
 7f8:	00000784 	andeq	r0, r0, r4, lsl #15
 7fc:	20001fc0 	andcs	r1, r0, r0, asr #31
 800:	00000046 	andeq	r0, r0, r6, asr #32
 804:	40080e41 	andmi	r0, r8, r1, asr #28
 808:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 80c:	180e4101 	stmdane	lr, {r0, r8, lr}
 810:	00070d41 	andeq	r0, r7, r1, asr #26
 814:	0000001c 	andeq	r0, r0, ip, lsl r0
 818:	00000784 	andeq	r0, r0, r4, lsl #15
 81c:	20002006 	andcs	r2, r0, r6
 820:	00000042 	andeq	r0, r0, r2, asr #32
 824:	40080e41 	andmi	r0, r8, r1, asr #28
 828:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 82c:	180e4101 	stmdane	lr, {r0, r8, lr}
 830:	00070d41 	andeq	r0, r7, r1, asr #26
 834:	0000001c 	andeq	r0, r0, ip, lsl r0
 838:	00000784 	andeq	r0, r0, r4, lsl #15
 83c:	20002048 	andcs	r2, r0, r8, asr #32
 840:	00000016 	andeq	r0, r0, r6, lsl r0
 844:	40080e41 	andmi	r0, r8, r1, asr #28
 848:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 84c:	100e4101 	andne	r4, lr, r1, lsl #2
 850:	00070d41 	andeq	r0, r7, r1, asr #26
 854:	0000001c 	andeq	r0, r0, ip, lsl r0
 858:	00000784 	andeq	r0, r0, r4, lsl #15
 85c:	2000205e 	andcs	r2, r0, lr, asr r0
 860:	00000042 	andeq	r0, r0, r2, asr #32
 864:	40080e41 	andmi	r0, r8, r1, asr #28
 868:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 86c:	180e4101 	stmdane	lr, {r0, r8, lr}
 870:	00070d41 	andeq	r0, r7, r1, asr #26
 874:	0000001c 	andeq	r0, r0, ip, lsl r0
 878:	00000784 	andeq	r0, r0, r4, lsl #15
 87c:	200020a0 	andcs	r2, r0, r0, lsr #1
 880:	00000016 	andeq	r0, r0, r6, lsl r0
 884:	40080e41 	andmi	r0, r8, r1, asr #28
 888:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 88c:	100e4101 	andne	r4, lr, r1, lsl #2
 890:	00070d41 	andeq	r0, r7, r1, asr #26
 894:	0000001c 	andeq	r0, r0, ip, lsl r0
 898:	00000784 	andeq	r0, r0, r4, lsl #15
 89c:	200020b6 	strhcs	r2, [r0], -r6
 8a0:	0000001e 	andeq	r0, r0, lr, lsl r0
 8a4:	40080e41 	andmi	r0, r8, r1, asr #28
 8a8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 8ac:	100e4101 	andne	r4, lr, r1, lsl #2
 8b0:	00070d41 	andeq	r0, r7, r1, asr #26
 8b4:	0000001c 	andeq	r0, r0, ip, lsl r0
 8b8:	00000784 	andeq	r0, r0, r4, lsl #15
 8bc:	200020d4 	ldrdcs	r2, [r0], -r4
 8c0:	0000001e 	andeq	r0, r0, lr, lsl r0
 8c4:	40080e41 	andmi	r0, r8, r1, asr #28
 8c8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 8cc:	100e4101 	andne	r4, lr, r1, lsl #2
 8d0:	00070d41 	andeq	r0, r7, r1, asr #26
 8d4:	0000001c 	andeq	r0, r0, ip, lsl r0
 8d8:	00000784 	andeq	r0, r0, r4, lsl #15
 8dc:	200020f2 	strdcs	r2, [r0], -r2	; <UNPREDICTABLE>
 8e0:	0000003a 	andeq	r0, r0, sl, lsr r0
 8e4:	40080e41 	andmi	r0, r8, r1, asr #28
 8e8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 8ec:	100e4101 	andne	r4, lr, r1, lsl #2
 8f0:	00070d41 	andeq	r0, r7, r1, asr #26
 8f4:	0000001c 	andeq	r0, r0, ip, lsl r0
 8f8:	00000784 	andeq	r0, r0, r4, lsl #15
 8fc:	2000212c 	andcs	r2, r0, ip, lsr #2
 900:	0000001e 	andeq	r0, r0, lr, lsl r0
 904:	40080e41 	andmi	r0, r8, r1, asr #28
 908:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 90c:	100e4101 	andne	r4, lr, r1, lsl #2
 910:	00070d41 	andeq	r0, r7, r1, asr #26
 914:	0000001c 	andeq	r0, r0, ip, lsl r0
 918:	00000784 	andeq	r0, r0, r4, lsl #15
 91c:	2000214a 	andcs	r2, r0, sl, asr #2
 920:	00000024 	andeq	r0, r0, r4, lsr #32
 924:	40080e41 	andmi	r0, r8, r1, asr #28
 928:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 92c:	100e4101 	andne	r4, lr, r1, lsl #2
 930:	00070d41 	andeq	r0, r7, r1, asr #26
 934:	0000001c 	andeq	r0, r0, ip, lsl r0
 938:	00000784 	andeq	r0, r0, r4, lsl #15
 93c:	2000216e 	andcs	r2, r0, lr, ror #2
 940:	000000a4 	andeq	r0, r0, r4, lsr #1
 944:	40080e41 	andmi	r0, r8, r1, asr #28
 948:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 94c:	180e4101 	stmdane	lr, {r0, r8, lr}
 950:	00070d41 	andeq	r0, r7, r1, asr #26
 954:	0000000c 	andeq	r0, r0, ip
 958:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 95c:	7c020001 	stcvc	0, cr0, [r2], {1}
 960:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 964:	0000001c 	andeq	r0, r0, ip, lsl r0
 968:	00000954 	andeq	r0, r0, r4, asr r9
 96c:	20002214 	andcs	r2, r0, r4, lsl r2
 970:	00000024 	andeq	r0, r0, r4, lsr #32
 974:	40080e41 	andmi	r0, r8, r1, asr #28
 978:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 97c:	100e4101 	andne	r4, lr, r1, lsl #2
 980:	00070d41 	andeq	r0, r7, r1, asr #26
 984:	00000024 	andeq	r0, r0, r4, lsr #32
 988:	00000954 	andeq	r0, r0, r4, asr r9
 98c:	20002238 	andcs	r2, r0, r8, lsr r2
 990:	000000f8 	strdeq	r0, [r0], -r8
 994:	40100e41 	andsmi	r0, r0, r1, asr #28
 998:	85400484 	strbhi	r0, [r0, #-1156]	; 0xfffffb7c
 99c:	02874003 	addeq	r4, r7, #3
 9a0:	41018e40 	tstmi	r1, r0, asr #28
 9a4:	0d41200e 	stcleq	0, cr2, [r1, #-56]	; 0xffffffc8
 9a8:	00000007 	andeq	r0, r0, r7
 9ac:	0000001c 	andeq	r0, r0, ip, lsl r0
 9b0:	00000954 	andeq	r0, r0, r4, asr r9
 9b4:	20002330 	andcs	r2, r0, r0, lsr r3
 9b8:	0000002c 	andeq	r0, r0, ip, lsr #32
 9bc:	40080e41 	andmi	r0, r8, r1, asr #28
 9c0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 9c4:	100e4101 	andne	r4, lr, r1, lsl #2
 9c8:	00070d41 	andeq	r0, r7, r1, asr #26
 9cc:	0000001c 	andeq	r0, r0, ip, lsl r0
 9d0:	00000954 	andeq	r0, r0, r4, asr r9
 9d4:	2000235c 	andcs	r2, r0, ip, asr r3
 9d8:	00000048 	andeq	r0, r0, r8, asr #32
 9dc:	40080e41 	andmi	r0, r8, r1, asr #28
 9e0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 9e4:	100e4101 	andne	r4, lr, r1, lsl #2
 9e8:	00070d41 	andeq	r0, r7, r1, asr #26
 9ec:	0000001c 	andeq	r0, r0, ip, lsl r0
 9f0:	00000954 	andeq	r0, r0, r4, asr r9
 9f4:	200023a4 	andcs	r2, r0, r4, lsr #7
 9f8:	00000034 	andeq	r0, r0, r4, lsr r0
 9fc:	40080e41 	andmi	r0, r8, r1, asr #28
 a00:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 a04:	100e4101 	andne	r4, lr, r1, lsl #2
 a08:	00070d41 	andeq	r0, r7, r1, asr #26
 a0c:	0000000c 	andeq	r0, r0, ip
 a10:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 a14:	7c020001 	stcvc	0, cr0, [r2], {1}
 a18:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 a1c:	0000001c 	andeq	r0, r0, ip, lsl r0
 a20:	00000a0c 	andeq	r0, r0, ip, lsl #20
 a24:	200023d8 	ldrdcs	r2, [r0], -r8
 a28:	00000028 	andeq	r0, r0, r8, lsr #32
 a2c:	40080e41 	andmi	r0, r8, r1, asr #28
 a30:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 a34:	100e4101 	andne	r4, lr, r1, lsl #2
 a38:	00070d41 	andeq	r0, r7, r1, asr #26
 a3c:	0000001c 	andeq	r0, r0, ip, lsl r0
 a40:	00000a0c 	andeq	r0, r0, ip, lsl #20
 a44:	20002400 	andcs	r2, r0, r0, lsl #8
 a48:	00000062 	andeq	r0, r0, r2, rrx
 a4c:	40080e41 	andmi	r0, r8, r1, asr #28
 a50:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 a54:	100e4101 	andne	r4, lr, r1, lsl #2
 a58:	00070d41 	andeq	r0, r7, r1, asr #26
 a5c:	0000001c 	andeq	r0, r0, ip, lsl r0
 a60:	00000a0c 	andeq	r0, r0, ip, lsl #20
 a64:	20002462 	andcs	r2, r0, r2, ror #8
 a68:	00000040 	andeq	r0, r0, r0, asr #32
 a6c:	40080e41 	andmi	r0, r8, r1, asr #28
 a70:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 a74:	180e4101 	stmdane	lr, {r0, r8, lr}
 a78:	00070d41 	andeq	r0, r7, r1, asr #26
 a7c:	0000001c 	andeq	r0, r0, ip, lsl r0
 a80:	00000a0c 	andeq	r0, r0, ip, lsl #20
 a84:	200024a2 	andcs	r2, r0, r2, lsr #9
 a88:	0000005e 	andeq	r0, r0, lr, asr r0
 a8c:	40080e41 	andmi	r0, r8, r1, asr #28
 a90:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 a94:	100e4101 	andne	r4, lr, r1, lsl #2
 a98:	00070d41 	andeq	r0, r7, r1, asr #26
 a9c:	0000000c 	andeq	r0, r0, ip
 aa0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 aa4:	7c020001 	stcvc	0, cr0, [r2], {1}
 aa8:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 aac:	0000001c 	andeq	r0, r0, ip, lsl r0
 ab0:	00000a9c 	muleq	r0, ip, sl
 ab4:	20002500 	andcs	r2, r0, r0, lsl #10
 ab8:	00000130 	andeq	r0, r0, r0, lsr r1
 abc:	40080e41 	andmi	r0, r8, r1, asr #28
 ac0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 ac4:	100e4101 	andne	r4, lr, r1, lsl #2
 ac8:	00070d41 	andeq	r0, r7, r1, asr #26
 acc:	0000001c 	andeq	r0, r0, ip, lsl r0
 ad0:	00000a9c 	muleq	r0, ip, sl
 ad4:	20002630 	andcs	r2, r0, r0, lsr r6
 ad8:	00000194 	muleq	r0, r4, r1
 adc:	40080e41 	andmi	r0, r8, r1, asr #28
 ae0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 ae4:	300e4101 	andcc	r4, lr, r1, lsl #2
 ae8:	00070d41 	andeq	r0, r7, r1, asr #26
 aec:	0000001c 	andeq	r0, r0, ip, lsl r0
 af0:	00000a9c 	muleq	r0, ip, sl
 af4:	200027c4 	andcs	r2, r0, r4, asr #15
 af8:	00000036 	andeq	r0, r0, r6, lsr r0
 afc:	40080e41 	andmi	r0, r8, r1, asr #28
 b00:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 b04:	100e4101 	andne	r4, lr, r1, lsl #2
 b08:	00070d41 	andeq	r0, r7, r1, asr #26
 b0c:	0000001c 	andeq	r0, r0, ip, lsl r0
 b10:	00000a9c 	muleq	r0, ip, sl
 b14:	200027fa 	strdcs	r2, [r0], -sl
 b18:	00000056 	andeq	r0, r0, r6, asr r0
 b1c:	40080e41 	andmi	r0, r8, r1, asr #28
 b20:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 b24:	180e4101 	stmdane	lr, {r0, r8, lr}
 b28:	00070d41 	andeq	r0, r7, r1, asr #26
 b2c:	0000001c 	andeq	r0, r0, ip, lsl r0
 b30:	00000a9c 	muleq	r0, ip, sl
 b34:	20002850 	andcs	r2, r0, r0, asr r8
 b38:	00000028 	andeq	r0, r0, r8, lsr #32
 b3c:	40080e41 	andmi	r0, r8, r1, asr #28
 b40:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 b44:	100e4101 	andne	r4, lr, r1, lsl #2
 b48:	00070d41 	andeq	r0, r7, r1, asr #26
 b4c:	0000001c 	andeq	r0, r0, ip, lsl r0
 b50:	00000a9c 	muleq	r0, ip, sl
 b54:	20002878 	andcs	r2, r0, r8, ror r8
 b58:	00000048 	andeq	r0, r0, r8, asr #32
 b5c:	40080e41 	andmi	r0, r8, r1, asr #28
 b60:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 b64:	100e4101 	andne	r4, lr, r1, lsl #2
 b68:	00070d41 	andeq	r0, r7, r1, asr #26
 b6c:	0000001c 	andeq	r0, r0, ip, lsl r0
 b70:	00000a9c 	muleq	r0, ip, sl
 b74:	200028c0 	andcs	r2, r0, r0, asr #17
 b78:	0000003a 	andeq	r0, r0, sl, lsr r0
 b7c:	40080e41 	andmi	r0, r8, r1, asr #28
 b80:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 b84:	100e4101 	andne	r4, lr, r1, lsl #2
 b88:	00070d41 	andeq	r0, r7, r1, asr #26
 b8c:	0000001c 	andeq	r0, r0, ip, lsl r0
 b90:	00000a9c 	muleq	r0, ip, sl
 b94:	200028fa 	strdcs	r2, [r0], -sl
 b98:	00000046 	andeq	r0, r0, r6, asr #32
 b9c:	40080e41 	andmi	r0, r8, r1, asr #28
 ba0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 ba4:	100e4101 	andne	r4, lr, r1, lsl #2
 ba8:	00070d41 	andeq	r0, r7, r1, asr #26
 bac:	0000001c 	andeq	r0, r0, ip, lsl r0
 bb0:	00000a9c 	muleq	r0, ip, sl
 bb4:	20002940 	andcs	r2, r0, r0, asr #18
 bb8:	00000048 	andeq	r0, r0, r8, asr #32
 bbc:	40080e41 	andmi	r0, r8, r1, asr #28
 bc0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 bc4:	100e4101 	andne	r4, lr, r1, lsl #2
 bc8:	00070d41 	andeq	r0, r7, r1, asr #26
 bcc:	0000001c 	andeq	r0, r0, ip, lsl r0
 bd0:	00000a9c 	muleq	r0, ip, sl
 bd4:	20002988 	andcs	r2, r0, r8, lsl #19
 bd8:	00000024 	andeq	r0, r0, r4, lsr #32
 bdc:	40080e41 	andmi	r0, r8, r1, asr #28
 be0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 be4:	100e4101 	andne	r4, lr, r1, lsl #2
 be8:	00070d41 	andeq	r0, r7, r1, asr #26
 bec:	0000001c 	andeq	r0, r0, ip, lsl r0
 bf0:	00000a9c 	muleq	r0, ip, sl
 bf4:	200029ac 	andcs	r2, r0, ip, lsr #19
 bf8:	0000001c 	andeq	r0, r0, ip, lsl r0
 bfc:	40080e41 	andmi	r0, r8, r1, asr #28
 c00:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 c04:	100e4101 	andne	r4, lr, r1, lsl #2
 c08:	00070d41 	andeq	r0, r7, r1, asr #26
 c0c:	0000001c 	andeq	r0, r0, ip, lsl r0
 c10:	00000a9c 	muleq	r0, ip, sl
 c14:	200029c8 	andcs	r2, r0, r8, asr #19
 c18:	0000003a 	andeq	r0, r0, sl, lsr r0
 c1c:	40080e41 	andmi	r0, r8, r1, asr #28
 c20:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 c24:	100e4101 	andne	r4, lr, r1, lsl #2
 c28:	00070d41 	andeq	r0, r7, r1, asr #26
 c2c:	0000001c 	andeq	r0, r0, ip, lsl r0
 c30:	00000a9c 	muleq	r0, ip, sl
 c34:	20002a02 	andcs	r2, r0, r2, lsl #20
 c38:	00000040 	andeq	r0, r0, r0, asr #32
 c3c:	40080e41 	andmi	r0, r8, r1, asr #28
 c40:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 c44:	100e4101 	andne	r4, lr, r1, lsl #2
 c48:	00070d41 	andeq	r0, r7, r1, asr #26
 c4c:	0000001c 	andeq	r0, r0, ip, lsl r0
 c50:	00000a9c 	muleq	r0, ip, sl
 c54:	20002a42 	andcs	r2, r0, r2, asr #20
 c58:	0000003e 	andeq	r0, r0, lr, lsr r0
 c5c:	40080e41 	andmi	r0, r8, r1, asr #28
 c60:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 c64:	100e4101 	andne	r4, lr, r1, lsl #2
 c68:	00070d41 	andeq	r0, r7, r1, asr #26
 c6c:	0000001c 	andeq	r0, r0, ip, lsl r0
 c70:	00000a9c 	muleq	r0, ip, sl
 c74:	20002a80 	andcs	r2, r0, r0, lsl #21
 c78:	00000038 	andeq	r0, r0, r8, lsr r0
 c7c:	40080e41 	andmi	r0, r8, r1, asr #28
 c80:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 c84:	100e4101 	andne	r4, lr, r1, lsl #2
 c88:	00070d41 	andeq	r0, r7, r1, asr #26
 c8c:	0000001c 	andeq	r0, r0, ip, lsl r0
 c90:	00000a9c 	muleq	r0, ip, sl
 c94:	20002ab8 			; <UNDEFINED> instruction: 0x20002ab8
 c98:	00000048 	andeq	r0, r0, r8, asr #32
 c9c:	40080e41 	andmi	r0, r8, r1, asr #28
 ca0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 ca4:	100e4101 	andne	r4, lr, r1, lsl #2
 ca8:	00070d41 	andeq	r0, r7, r1, asr #26
 cac:	0000001c 	andeq	r0, r0, ip, lsl r0
 cb0:	00000a9c 	muleq	r0, ip, sl
 cb4:	20002b00 	andcs	r2, r0, r0, lsl #22
 cb8:	00000020 	andeq	r0, r0, r0, lsr #32
 cbc:	40080e41 	andmi	r0, r8, r1, asr #28
 cc0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 cc4:	100e4101 	andne	r4, lr, r1, lsl #2
 cc8:	00070d41 	andeq	r0, r7, r1, asr #26
 ccc:	0000001c 	andeq	r0, r0, ip, lsl r0
 cd0:	00000a9c 	muleq	r0, ip, sl
 cd4:	20002b20 	andcs	r2, r0, r0, lsr #22
 cd8:	00000040 	andeq	r0, r0, r0, asr #32
 cdc:	40080e41 	andmi	r0, r8, r1, asr #28
 ce0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 ce4:	100e4101 	andne	r4, lr, r1, lsl #2
 ce8:	00070d41 	andeq	r0, r7, r1, asr #26
 cec:	0000001c 	andeq	r0, r0, ip, lsl r0
 cf0:	00000a9c 	muleq	r0, ip, sl
 cf4:	20002b60 	andcs	r2, r0, r0, ror #22
 cf8:	0000003e 	andeq	r0, r0, lr, lsr r0
 cfc:	40080e41 	andmi	r0, r8, r1, asr #28
 d00:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 d04:	100e4101 	andne	r4, lr, r1, lsl #2
 d08:	00070d41 	andeq	r0, r7, r1, asr #26
 d0c:	0000001c 	andeq	r0, r0, ip, lsl r0
 d10:	00000a9c 	muleq	r0, ip, sl
 d14:	20002b9e 	mulcs	r0, lr, fp
 d18:	00000040 	andeq	r0, r0, r0, asr #32
 d1c:	40080e41 	andmi	r0, r8, r1, asr #28
 d20:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 d24:	100e4101 	andne	r4, lr, r1, lsl #2
 d28:	00070d41 	andeq	r0, r7, r1, asr #26
 d2c:	0000001c 	andeq	r0, r0, ip, lsl r0
 d30:	00000a9c 	muleq	r0, ip, sl
 d34:	20002bde 	ldrdcs	r2, [r0], -lr
 d38:	00000040 	andeq	r0, r0, r0, asr #32
 d3c:	40080e41 	andmi	r0, r8, r1, asr #28
 d40:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 d44:	100e4101 	andne	r4, lr, r1, lsl #2
 d48:	00070d41 	andeq	r0, r7, r1, asr #26
 d4c:	0000001c 	andeq	r0, r0, ip, lsl r0
 d50:	00000a9c 	muleq	r0, ip, sl
 d54:	20002c1e 	andcs	r2, r0, lr, lsl ip
 d58:	00000038 	andeq	r0, r0, r8, lsr r0
 d5c:	40080e41 	andmi	r0, r8, r1, asr #28
 d60:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 d64:	100e4101 	andne	r4, lr, r1, lsl #2
 d68:	00070d41 	andeq	r0, r7, r1, asr #26
 d6c:	0000001c 	andeq	r0, r0, ip, lsl r0
 d70:	00000a9c 	muleq	r0, ip, sl
 d74:	20002c56 	andcs	r2, r0, r6, asr ip
 d78:	00000040 	andeq	r0, r0, r0, asr #32
 d7c:	40080e41 	andmi	r0, r8, r1, asr #28
 d80:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 d84:	100e4101 	andne	r4, lr, r1, lsl #2
 d88:	00070d41 	andeq	r0, r7, r1, asr #26
 d8c:	0000001c 	andeq	r0, r0, ip, lsl r0
 d90:	00000a9c 	muleq	r0, ip, sl
 d94:	20002c96 	mulcs	r0, r6, ip
 d98:	00000052 	andeq	r0, r0, r2, asr r0
 d9c:	40080e41 	andmi	r0, r8, r1, asr #28
 da0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 da4:	100e4101 	andne	r4, lr, r1, lsl #2
 da8:	00070d41 	andeq	r0, r7, r1, asr #26
 dac:	0000001c 	andeq	r0, r0, ip, lsl r0
 db0:	00000a9c 	muleq	r0, ip, sl
 db4:	20002ce8 	andcs	r2, r0, r8, ror #25
 db8:	0000009a 	muleq	r0, sl, r0
 dbc:	40080e41 	andmi	r0, r8, r1, asr #28
 dc0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 dc4:	200e4101 	andcs	r4, lr, r1, lsl #2
 dc8:	00070d41 	andeq	r0, r7, r1, asr #26
 dcc:	0000001c 	andeq	r0, r0, ip, lsl r0
 dd0:	00000a9c 	muleq	r0, ip, sl
 dd4:	20002d82 	andcs	r2, r0, r2, lsl #27
 dd8:	00000048 	andeq	r0, r0, r8, asr #32
 ddc:	40080e41 	andmi	r0, r8, r1, asr #28
 de0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 de4:	180e4101 	stmdane	lr, {r0, r8, lr}
 de8:	00070d41 	andeq	r0, r7, r1, asr #26
 dec:	0000001c 	andeq	r0, r0, ip, lsl r0
 df0:	00000a9c 	muleq	r0, ip, sl
 df4:	20002dca 	andcs	r2, r0, sl, asr #27
 df8:	00000022 	andeq	r0, r0, r2, lsr #32
 dfc:	40080e41 	andmi	r0, r8, r1, asr #28
 e00:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 e04:	100e4101 	andne	r4, lr, r1, lsl #2
 e08:	00070d41 	andeq	r0, r7, r1, asr #26
 e0c:	0000001c 	andeq	r0, r0, ip, lsl r0
 e10:	00000a9c 	muleq	r0, ip, sl
 e14:	20002dec 	andcs	r2, r0, ip, ror #27
 e18:	000000ca 	andeq	r0, r0, sl, asr #1
 e1c:	40080e41 	andmi	r0, r8, r1, asr #28
 e20:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 e24:	200e4101 	andcs	r4, lr, r1, lsl #2
 e28:	00070d41 	andeq	r0, r7, r1, asr #26
 e2c:	0000001c 	andeq	r0, r0, ip, lsl r0
 e30:	00000a9c 	muleq	r0, ip, sl
 e34:	20002eb6 			; <UNDEFINED> instruction: 0x20002eb6
 e38:	00000048 	andeq	r0, r0, r8, asr #32
 e3c:	40080e41 	andmi	r0, r8, r1, asr #28
 e40:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 e44:	180e4101 	stmdane	lr, {r0, r8, lr}
 e48:	00070d41 	andeq	r0, r7, r1, asr #26
 e4c:	0000000c 	andeq	r0, r0, ip
 e50:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 e54:	7c010001 	stcvc	0, cr0, [r1], {1}
 e58:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 e5c:	0000000c 	andeq	r0, r0, ip
 e60:	00000e4c 	andeq	r0, r0, ip, asr #28
 e64:	20002f01 	andcs	r2, r0, r1, lsl #30
 e68:	0000010a 	andeq	r0, r0, sl, lsl #2
 e6c:	0000000c 	andeq	r0, r0, ip
 e70:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 e74:	7c020001 	stcvc	0, cr0, [r2], {1}
 e78:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 e7c:	00000014 	andeq	r0, r0, r4, lsl r0
 e80:	00000e6c 	andeq	r0, r0, ip, ror #28
 e84:	20003018 	andcs	r3, r0, r8, lsl r0
 e88:	00000012 	andeq	r0, r0, r2, lsl r0
 e8c:	84080e42 	strhi	r0, [r8], #-3650	; 0xfffff1be
 e90:	00018e02 	andeq	r8, r1, r2, lsl #28
 e94:	0000000c 	andeq	r0, r0, ip
 e98:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 e9c:	7c020001 	stcvc	0, cr0, [r2], {1}
 ea0:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 ea4:	0000000c 	andeq	r0, r0, ip
 ea8:	00000e94 	muleq	r0, r4, lr
 eac:	2000302a 	andcs	r3, r0, sl, lsr #32
 eb0:	00000010 	andeq	r0, r0, r0, lsl r0
