
./Debug/Door.elf:     file format elf32-littlearm


Disassembly of section .text:

20000000 <startup>:

void startup(void) __attribute__((naked)) __attribute__((section(".start_section")));

void startup(void)
{
	__asm volatile(
20000000:	4802      	ldr	r0, [pc, #8]	; (2000000c <_exit+0x4>)
20000002:	4685      	mov	sp, r0
20000004:	f000 ff2e 	bl	20000e64 <main>

20000008 <_exit>:
20000008:	e7fe      	b.n	20000008 <_exit>
		" LDR R0,=0x2001C000\n" /* set stack */
		" MOV SP,R0\n"
		" BL main\n"   /* call main */
		"_exit: B .\n" /* never return */
	);
}
2000000a:	46c0      	nop			; (mov r8, r8)
2000000c:	2001c000 	andcs	ip, r1, r0

20000010 <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
20000010:	b580      	push	{r7, lr}
20000012:	b082      	sub	sp, #8
20000014:	af00      	add	r7, sp, #0
20000016:	0002      	movs	r2, r0
20000018:	6039      	str	r1, [r7, #0]
2000001a:	1dfb      	adds	r3, r7, #7
2000001c:	701a      	strb	r2, [r3, #0]
  if((int32_t)IRQn < 0) {
2000001e:	1dfb      	adds	r3, r7, #7
20000020:	781b      	ldrb	r3, [r3, #0]
20000022:	2b7f      	cmp	r3, #127	; 0x7f
20000024:	d90d      	bls.n	20000042 <NVIC_SetPriority+0x32>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
20000026:	683b      	ldr	r3, [r7, #0]
20000028:	b2da      	uxtb	r2, r3
2000002a:	490f      	ldr	r1, [pc, #60]	; (20000068 <NVIC_SetPriority+0x58>)
2000002c:	1dfb      	adds	r3, r7, #7
2000002e:	781b      	ldrb	r3, [r3, #0]
20000030:	0018      	movs	r0, r3
20000032:	230f      	movs	r3, #15
20000034:	4003      	ands	r3, r0
20000036:	3b04      	subs	r3, #4
20000038:	0112      	lsls	r2, r2, #4
2000003a:	b2d2      	uxtb	r2, r2
2000003c:	18cb      	adds	r3, r1, r3
2000003e:	761a      	strb	r2, [r3, #24]
  }
  else {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
20000040:	e00d      	b.n	2000005e <NVIC_SetPriority+0x4e>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
20000042:	683b      	ldr	r3, [r7, #0]
20000044:	b2db      	uxtb	r3, r3
20000046:	4909      	ldr	r1, [pc, #36]	; (2000006c <NVIC_SetPriority+0x5c>)
20000048:	1dfa      	adds	r2, r7, #7
2000004a:	7812      	ldrb	r2, [r2, #0]
2000004c:	b252      	sxtb	r2, r2
2000004e:	011b      	lsls	r3, r3, #4
20000050:	b2d8      	uxtb	r0, r3
20000052:	23c0      	movs	r3, #192	; 0xc0
20000054:	009b      	lsls	r3, r3, #2
20000056:	188a      	adds	r2, r1, r2
20000058:	18d3      	adds	r3, r2, r3
2000005a:	1c02      	adds	r2, r0, #0
2000005c:	701a      	strb	r2, [r3, #0]
}
2000005e:	46c0      	nop			; (mov r8, r8)
20000060:	46bd      	mov	sp, r7
20000062:	b002      	add	sp, #8
20000064:	bd80      	pop	{r7, pc}
20000066:	46c0      	nop			; (mov r8, r8)
20000068:	e000ed00 	and	lr, r0, r0, lsl #26
2000006c:	e000e100 	and	lr, r0, r0, lsl #2

20000070 <SysTick_Config>:
    function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
20000070:	b580      	push	{r7, lr}
20000072:	b082      	sub	sp, #8
20000074:	af00      	add	r7, sp, #0
20000076:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk) { return (1UL); }    /* Reload value impossible */
20000078:	687b      	ldr	r3, [r7, #4]
2000007a:	3b01      	subs	r3, #1
2000007c:	4a0c      	ldr	r2, [pc, #48]	; (200000b0 <SysTick_Config+0x40>)
2000007e:	4293      	cmp	r3, r2
20000080:	d901      	bls.n	20000086 <SysTick_Config+0x16>
20000082:	2301      	movs	r3, #1
20000084:	e010      	b.n	200000a8 <SysTick_Config+0x38>

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
20000086:	4b0b      	ldr	r3, [pc, #44]	; (200000b4 <SysTick_Config+0x44>)
20000088:	687a      	ldr	r2, [r7, #4]
2000008a:	3a01      	subs	r2, #1
2000008c:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
2000008e:	2301      	movs	r3, #1
20000090:	425b      	negs	r3, r3
20000092:	210f      	movs	r1, #15
20000094:	0018      	movs	r0, r3
20000096:	f7ff ffbb 	bl	20000010 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
2000009a:	4b06      	ldr	r3, [pc, #24]	; (200000b4 <SysTick_Config+0x44>)
2000009c:	2200      	movs	r2, #0
2000009e:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
200000a0:	4b04      	ldr	r3, [pc, #16]	; (200000b4 <SysTick_Config+0x44>)
200000a2:	2207      	movs	r2, #7
200000a4:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
200000a6:	2300      	movs	r3, #0
}
200000a8:	0018      	movs	r0, r3
200000aa:	46bd      	mov	sp, r7
200000ac:	b002      	add	sp, #8
200000ae:	bd80      	pop	{r7, pc}
200000b0:	00ffffff 	ldrshteq	pc, [pc], #255	; <UNPREDICTABLE>
200000b4:	e000e010 	and	lr, r0, r0, lsl r0

200000b8 <RCC_DeInit>:
  *            - LSI, LSE and RTC clocks 
  * @param  None
  * @retval None
  */
void RCC_DeInit(void)
{
200000b8:	b580      	push	{r7, lr}
200000ba:	af00      	add	r7, sp, #0
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
200000bc:	4b14      	ldr	r3, [pc, #80]	; (20000110 <RCC_DeInit+0x58>)
200000be:	681a      	ldr	r2, [r3, #0]
200000c0:	4b13      	ldr	r3, [pc, #76]	; (20000110 <RCC_DeInit+0x58>)
200000c2:	2101      	movs	r1, #1
200000c4:	430a      	orrs	r2, r1
200000c6:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
200000c8:	4b11      	ldr	r3, [pc, #68]	; (20000110 <RCC_DeInit+0x58>)
200000ca:	2200      	movs	r2, #0
200000cc:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON, PLLON, PLLI2S and PLLSAI(STM32F42xxx/43xxx/446xx/469xx/479xx devices) bits */
  RCC->CR &= (uint32_t)0xEAF6FFFF;
200000ce:	4b10      	ldr	r3, [pc, #64]	; (20000110 <RCC_DeInit+0x58>)
200000d0:	681a      	ldr	r2, [r3, #0]
200000d2:	4b0f      	ldr	r3, [pc, #60]	; (20000110 <RCC_DeInit+0x58>)
200000d4:	490f      	ldr	r1, [pc, #60]	; (20000114 <RCC_DeInit+0x5c>)
200000d6:	400a      	ands	r2, r1
200000d8:	601a      	str	r2, [r3, #0]
  
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
200000da:	4b0d      	ldr	r3, [pc, #52]	; (20000110 <RCC_DeInit+0x58>)
200000dc:	4a0e      	ldr	r2, [pc, #56]	; (20000118 <RCC_DeInit+0x60>)
200000de:	605a      	str	r2, [r3, #4]

#if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F401xx) || defined(STM32F411xE) || defined(STM32F446xx) || defined(STM32F413_423xx) || defined(STM32F469_479xx)  
  /* Reset PLLI2SCFGR register */
  RCC->PLLI2SCFGR = 0x20003000;
200000e0:	4a0b      	ldr	r2, [pc, #44]	; (20000110 <RCC_DeInit+0x58>)
200000e2:	2384      	movs	r3, #132	; 0x84
200000e4:	490d      	ldr	r1, [pc, #52]	; (2000011c <RCC_DeInit+0x64>)
200000e6:	50d1      	str	r1, [r2, r3]
#endif /* STM32F40_41xxx || STM32F427_437xx || STM32F429_439xx || STM32F401xx || STM32F411xE || STM32F446xx || STM32F413_423xx || STM32F469_479xx */

#if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F446xx) || defined(STM32F469_479xx) 
  /* Reset PLLSAICFGR register, only available for STM32F42xxx/43xxx/446xx/469xx/479xx devices */
  RCC->PLLSAICFGR = 0x24003000;
200000e8:	4a09      	ldr	r2, [pc, #36]	; (20000110 <RCC_DeInit+0x58>)
200000ea:	2388      	movs	r3, #136	; 0x88
200000ec:	490c      	ldr	r1, [pc, #48]	; (20000120 <RCC_DeInit+0x68>)
200000ee:	50d1      	str	r1, [r2, r3]
#endif /* STM32F40_41xxx || STM32F427_437xx || STM32F429_439xx || STM32F446xx || STM32F469_479xx */
  
  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
200000f0:	4b07      	ldr	r3, [pc, #28]	; (20000110 <RCC_DeInit+0x58>)
200000f2:	681a      	ldr	r2, [r3, #0]
200000f4:	4b06      	ldr	r3, [pc, #24]	; (20000110 <RCC_DeInit+0x58>)
200000f6:	490b      	ldr	r1, [pc, #44]	; (20000124 <RCC_DeInit+0x6c>)
200000f8:	400a      	ands	r2, r1
200000fa:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
200000fc:	4b04      	ldr	r3, [pc, #16]	; (20000110 <RCC_DeInit+0x58>)
200000fe:	2200      	movs	r2, #0
20000100:	60da      	str	r2, [r3, #12]

  /* Disable Timers clock prescalers selection, only available for STM32F42/43xxx and STM32F413_423xx devices */
  RCC->DCKCFGR = 0x00000000;
20000102:	4a03      	ldr	r2, [pc, #12]	; (20000110 <RCC_DeInit+0x58>)
20000104:	238c      	movs	r3, #140	; 0x8c
20000106:	2100      	movs	r1, #0
20000108:	50d1      	str	r1, [r2, r3]
  
#if defined(STM32F410xx) || defined(STM32F413_423xx)
  /* Disable LPTIM and FMPI2C clock prescalers selection, only available for STM32F410xx and STM32F413_423xx devices */
  RCC->DCKCFGR2 = 0x00000000;
#endif /* STM32F410xx || STM32F413_423xx */  
}
2000010a:	46c0      	nop			; (mov r8, r8)
2000010c:	46bd      	mov	sp, r7
2000010e:	bd80      	pop	{r7, pc}
20000110:	40023800 	andmi	r3, r2, r0, lsl #16
20000114:	eaf6ffff 	b	1fdc0118 <startup-0x23fee8>
20000118:	24003010 	strcs	r3, [r0], #-16
2000011c:	20003000 	andcs	r3, r0, r0
20000120:	24003000 	strcs	r3, [r0], #-0
20000124:	fffbffff 			; <UNDEFINED> instruction: 0xfffbffff

20000128 <RCC_HSEConfig>:
  *            @arg RCC_HSE_ON: turn ON the HSE oscillator
  *            @arg RCC_HSE_Bypass: HSE oscillator bypassed with external clock
  * @retval None
  */
void RCC_HSEConfig(uint8_t RCC_HSE)
{
20000128:	b580      	push	{r7, lr}
2000012a:	b082      	sub	sp, #8
2000012c:	af00      	add	r7, sp, #0
2000012e:	0002      	movs	r2, r0
20000130:	1dfb      	adds	r3, r7, #7
20000132:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_HSE(RCC_HSE));

  /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
  *(__IO uint8_t *) CR_BYTE3_ADDRESS = RCC_HSE_OFF;
20000134:	4b05      	ldr	r3, [pc, #20]	; (2000014c <RCC_HSEConfig+0x24>)
20000136:	2200      	movs	r2, #0
20000138:	701a      	strb	r2, [r3, #0]

  /* Set the new HSE configuration -------------------------------------------*/
  *(__IO uint8_t *) CR_BYTE3_ADDRESS = RCC_HSE;
2000013a:	4a04      	ldr	r2, [pc, #16]	; (2000014c <RCC_HSEConfig+0x24>)
2000013c:	1dfb      	adds	r3, r7, #7
2000013e:	781b      	ldrb	r3, [r3, #0]
20000140:	7013      	strb	r3, [r2, #0]
}
20000142:	46c0      	nop			; (mov r8, r8)
20000144:	46bd      	mov	sp, r7
20000146:	b002      	add	sp, #8
20000148:	bd80      	pop	{r7, pc}
2000014a:	46c0      	nop			; (mov r8, r8)
2000014c:	40023802 	andmi	r3, r2, r2, lsl #16

20000150 <RCC_WaitForHSEStartUp>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: HSE oscillator is stable and ready to use
  *          - ERROR: HSE oscillator not yet ready
  */
ErrorStatus RCC_WaitForHSEStartUp(void)
{
20000150:	b590      	push	{r4, r7, lr}
20000152:	b083      	sub	sp, #12
20000154:	af00      	add	r7, sp, #0
  __IO uint32_t startupcounter = 0;
20000156:	2300      	movs	r3, #0
20000158:	603b      	str	r3, [r7, #0]
  ErrorStatus status = ERROR;
2000015a:	1dfb      	adds	r3, r7, #7
2000015c:	2200      	movs	r2, #0
2000015e:	701a      	strb	r2, [r3, #0]
  FlagStatus hsestatus = RESET;
20000160:	1dbb      	adds	r3, r7, #6
20000162:	2200      	movs	r2, #0
20000164:	701a      	strb	r2, [r3, #0]
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    hsestatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
20000166:	1dbc      	adds	r4, r7, #6
20000168:	2031      	movs	r0, #49	; 0x31
2000016a:	f000 fd9b 	bl	20000ca4 <RCC_GetFlagStatus>
2000016e:	0003      	movs	r3, r0
20000170:	7023      	strb	r3, [r4, #0]
    startupcounter++;
20000172:	683b      	ldr	r3, [r7, #0]
20000174:	3301      	adds	r3, #1
20000176:	603b      	str	r3, [r7, #0]
  } while((startupcounter != HSE_STARTUP_TIMEOUT) && (hsestatus == RESET));
20000178:	683a      	ldr	r2, [r7, #0]
2000017a:	23a0      	movs	r3, #160	; 0xa0
2000017c:	01db      	lsls	r3, r3, #7
2000017e:	429a      	cmp	r2, r3
20000180:	d003      	beq.n	2000018a <RCC_WaitForHSEStartUp+0x3a>
20000182:	1dbb      	adds	r3, r7, #6
20000184:	781b      	ldrb	r3, [r3, #0]
20000186:	2b00      	cmp	r3, #0
20000188:	d0ed      	beq.n	20000166 <RCC_WaitForHSEStartUp+0x16>

  if (RCC_GetFlagStatus(RCC_FLAG_HSERDY) != RESET)
2000018a:	2031      	movs	r0, #49	; 0x31
2000018c:	f000 fd8a 	bl	20000ca4 <RCC_GetFlagStatus>
20000190:	1e03      	subs	r3, r0, #0
20000192:	d003      	beq.n	2000019c <RCC_WaitForHSEStartUp+0x4c>
  {
    status = SUCCESS;
20000194:	1dfb      	adds	r3, r7, #7
20000196:	2201      	movs	r2, #1
20000198:	701a      	strb	r2, [r3, #0]
2000019a:	e002      	b.n	200001a2 <RCC_WaitForHSEStartUp+0x52>
  }
  else
  {
    status = ERROR;
2000019c:	1dfb      	adds	r3, r7, #7
2000019e:	2200      	movs	r2, #0
200001a0:	701a      	strb	r2, [r3, #0]
  }
  return (status);
200001a2:	1dfb      	adds	r3, r7, #7
200001a4:	781b      	ldrb	r3, [r3, #0]
}
200001a6:	0018      	movs	r0, r3
200001a8:	46bd      	mov	sp, r7
200001aa:	b003      	add	sp, #12
200001ac:	bd90      	pop	{r4, r7, pc}

200001ae <RCC_AdjustHSICalibrationValue>:
  * @param  HSICalibrationValue: specifies the calibration trimming value.
  *         This parameter must be a number between 0 and 0x1F.
  * @retval None
  */
void RCC_AdjustHSICalibrationValue(uint8_t HSICalibrationValue)
{
200001ae:	b580      	push	{r7, lr}
200001b0:	b084      	sub	sp, #16
200001b2:	af00      	add	r7, sp, #0
200001b4:	0002      	movs	r2, r0
200001b6:	1dfb      	adds	r3, r7, #7
200001b8:	701a      	strb	r2, [r3, #0]
  uint32_t tmpreg = 0;
200001ba:	2300      	movs	r3, #0
200001bc:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_CALIBRATION_VALUE(HSICalibrationValue));

  tmpreg = RCC->CR;
200001be:	4b0a      	ldr	r3, [pc, #40]	; (200001e8 <RCC_AdjustHSICalibrationValue+0x3a>)
200001c0:	681b      	ldr	r3, [r3, #0]
200001c2:	60fb      	str	r3, [r7, #12]

  /* Clear HSITRIM[4:0] bits */
  tmpreg &= ~RCC_CR_HSITRIM;
200001c4:	68fb      	ldr	r3, [r7, #12]
200001c6:	22f8      	movs	r2, #248	; 0xf8
200001c8:	4393      	bics	r3, r2
200001ca:	60fb      	str	r3, [r7, #12]

  /* Set the HSITRIM[4:0] bits according to HSICalibrationValue value */
  tmpreg |= (uint32_t)HSICalibrationValue << 3;
200001cc:	1dfb      	adds	r3, r7, #7
200001ce:	781b      	ldrb	r3, [r3, #0]
200001d0:	00db      	lsls	r3, r3, #3
200001d2:	68fa      	ldr	r2, [r7, #12]
200001d4:	4313      	orrs	r3, r2
200001d6:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CR = tmpreg;
200001d8:	4b03      	ldr	r3, [pc, #12]	; (200001e8 <RCC_AdjustHSICalibrationValue+0x3a>)
200001da:	68fa      	ldr	r2, [r7, #12]
200001dc:	601a      	str	r2, [r3, #0]
}
200001de:	46c0      	nop			; (mov r8, r8)
200001e0:	46bd      	mov	sp, r7
200001e2:	b004      	add	sp, #16
200001e4:	bd80      	pop	{r7, pc}
200001e6:	46c0      	nop			; (mov r8, r8)
200001e8:	40023800 	andmi	r3, r2, r0, lsl #16

200001ec <RCC_HSICmd>:
  * @note   When the HSI is stopped, HSIRDY flag goes low after 6 HSI oscillator
  *         clock cycles.  
  * @retval None
  */
void RCC_HSICmd(FunctionalState NewState)
{
200001ec:	b580      	push	{r7, lr}
200001ee:	b082      	sub	sp, #8
200001f0:	af00      	add	r7, sp, #0
200001f2:	0002      	movs	r2, r0
200001f4:	1dfb      	adds	r3, r7, #7
200001f6:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CR_HSION_BB = (uint32_t)NewState;
200001f8:	4b03      	ldr	r3, [pc, #12]	; (20000208 <RCC_HSICmd+0x1c>)
200001fa:	1dfa      	adds	r2, r7, #7
200001fc:	7812      	ldrb	r2, [r2, #0]
200001fe:	601a      	str	r2, [r3, #0]
}
20000200:	46c0      	nop			; (mov r8, r8)
20000202:	46bd      	mov	sp, r7
20000204:	b002      	add	sp, #8
20000206:	bd80      	pop	{r7, pc}
20000208:	42470000 	submi	r0, r7, #0

2000020c <RCC_LSEConfig>:
  *            @arg RCC_LSE_ON: turn ON the LSE oscillator
  *            @arg RCC_LSE_Bypass: LSE oscillator bypassed with external clock
  * @retval None
  */
void RCC_LSEConfig(uint8_t RCC_LSE)
{
2000020c:	b580      	push	{r7, lr}
2000020e:	b082      	sub	sp, #8
20000210:	af00      	add	r7, sp, #0
20000212:	0002      	movs	r2, r0
20000214:	1dfb      	adds	r3, r7, #7
20000216:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_LSE(RCC_LSE));

  /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
  /* Reset LSEON bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
20000218:	4b0c      	ldr	r3, [pc, #48]	; (2000024c <RCC_LSEConfig+0x40>)
2000021a:	2200      	movs	r2, #0
2000021c:	701a      	strb	r2, [r3, #0]

  /* Reset LSEBYP bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
2000021e:	4b0b      	ldr	r3, [pc, #44]	; (2000024c <RCC_LSEConfig+0x40>)
20000220:	2200      	movs	r2, #0
20000222:	701a      	strb	r2, [r3, #0]

  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch (RCC_LSE)
20000224:	1dfb      	adds	r3, r7, #7
20000226:	781b      	ldrb	r3, [r3, #0]
20000228:	2b01      	cmp	r3, #1
2000022a:	d002      	beq.n	20000232 <RCC_LSEConfig+0x26>
2000022c:	2b04      	cmp	r3, #4
2000022e:	d004      	beq.n	2000023a <RCC_LSEConfig+0x2e>
    case RCC_LSE_Bypass:
      /* Set LSEBYP and LSEON bits */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
      break;
    default:
      break;
20000230:	e007      	b.n	20000242 <RCC_LSEConfig+0x36>
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_ON;
20000232:	4b06      	ldr	r3, [pc, #24]	; (2000024c <RCC_LSEConfig+0x40>)
20000234:	2201      	movs	r2, #1
20000236:	701a      	strb	r2, [r3, #0]
      break;
20000238:	e003      	b.n	20000242 <RCC_LSEConfig+0x36>
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
2000023a:	4b04      	ldr	r3, [pc, #16]	; (2000024c <RCC_LSEConfig+0x40>)
2000023c:	2205      	movs	r2, #5
2000023e:	701a      	strb	r2, [r3, #0]
      break;
20000240:	46c0      	nop			; (mov r8, r8)
  }
}
20000242:	46c0      	nop			; (mov r8, r8)
20000244:	46bd      	mov	sp, r7
20000246:	b002      	add	sp, #8
20000248:	bd80      	pop	{r7, pc}
2000024a:	46c0      	nop			; (mov r8, r8)
2000024c:	40023870 	andmi	r3, r2, r0, ror r8

20000250 <RCC_LSICmd>:
  * @note   When the LSI is stopped, LSIRDY flag goes low after 6 LSI oscillator
  *         clock cycles. 
  * @retval None
  */
void RCC_LSICmd(FunctionalState NewState)
{
20000250:	b580      	push	{r7, lr}
20000252:	b082      	sub	sp, #8
20000254:	af00      	add	r7, sp, #0
20000256:	0002      	movs	r2, r0
20000258:	1dfb      	adds	r3, r7, #7
2000025a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CSR_LSION_BB = (uint32_t)NewState;
2000025c:	4b03      	ldr	r3, [pc, #12]	; (2000026c <RCC_LSICmd+0x1c>)
2000025e:	1dfa      	adds	r2, r7, #7
20000260:	7812      	ldrb	r2, [r2, #0]
20000262:	601a      	str	r2, [r3, #0]
}
20000264:	46c0      	nop			; (mov r8, r8)
20000266:	46bd      	mov	sp, r7
20000268:	b002      	add	sp, #8
2000026a:	bd80      	pop	{r7, pc}
2000026c:	42470e80 	submi	r0, r7, #128, 28	; 0x800

20000270 <RCC_PLLConfig>:
  *         correctly.
  *   
  * @retval None
  */
void RCC_PLLConfig(uint32_t RCC_PLLSource, uint32_t PLLM, uint32_t PLLN, uint32_t PLLP, uint32_t PLLQ)
{
20000270:	b580      	push	{r7, lr}
20000272:	b084      	sub	sp, #16
20000274:	af00      	add	r7, sp, #0
20000276:	60f8      	str	r0, [r7, #12]
20000278:	60b9      	str	r1, [r7, #8]
2000027a:	607a      	str	r2, [r7, #4]
2000027c:	603b      	str	r3, [r7, #0]
  assert_param(IS_RCC_PLLM_VALUE(PLLM));
  assert_param(IS_RCC_PLLN_VALUE(PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLP));
  assert_param(IS_RCC_PLLQ_VALUE(PLLQ));

  RCC->PLLCFGR = PLLM | (PLLN << 6) | (((PLLP >> 1) -1) << 16) | (RCC_PLLSource) |
2000027e:	687b      	ldr	r3, [r7, #4]
20000280:	019a      	lsls	r2, r3, #6
20000282:	68bb      	ldr	r3, [r7, #8]
20000284:	431a      	orrs	r2, r3
20000286:	683b      	ldr	r3, [r7, #0]
20000288:	085b      	lsrs	r3, r3, #1
2000028a:	3b01      	subs	r3, #1
2000028c:	041b      	lsls	r3, r3, #16
2000028e:	431a      	orrs	r2, r3
20000290:	68fb      	ldr	r3, [r7, #12]
20000292:	431a      	orrs	r2, r3
20000294:	0011      	movs	r1, r2
                 (PLLQ << 24);
20000296:	69bb      	ldr	r3, [r7, #24]
20000298:	061a      	lsls	r2, r3, #24
  RCC->PLLCFGR = PLLM | (PLLN << 6) | (((PLLP >> 1) -1) << 16) | (RCC_PLLSource) |
2000029a:	4b03      	ldr	r3, [pc, #12]	; (200002a8 <RCC_PLLConfig+0x38>)
2000029c:	430a      	orrs	r2, r1
2000029e:	605a      	str	r2, [r3, #4]
}
200002a0:	46c0      	nop			; (mov r8, r8)
200002a2:	46bd      	mov	sp, r7
200002a4:	b004      	add	sp, #16
200002a6:	bd80      	pop	{r7, pc}
200002a8:	40023800 	andmi	r3, r2, r0, lsl #16

200002ac <RCC_PLLCmd>:
  * @note   The main PLL is disabled by hardware when entering STOP and STANDBY modes.
  * @param  NewState: new state of the main PLL. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_PLLCmd(FunctionalState NewState)
{
200002ac:	b580      	push	{r7, lr}
200002ae:	b082      	sub	sp, #8
200002b0:	af00      	add	r7, sp, #0
200002b2:	0002      	movs	r2, r0
200002b4:	1dfb      	adds	r3, r7, #7
200002b6:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_PLLON_BB = (uint32_t)NewState;
200002b8:	4b03      	ldr	r3, [pc, #12]	; (200002c8 <RCC_PLLCmd+0x1c>)
200002ba:	1dfa      	adds	r2, r7, #7
200002bc:	7812      	ldrb	r2, [r2, #0]
200002be:	601a      	str	r2, [r3, #0]
}
200002c0:	46c0      	nop			; (mov r8, r8)
200002c2:	46bd      	mov	sp, r7
200002c4:	b002      	add	sp, #8
200002c6:	bd80      	pop	{r7, pc}
200002c8:	42470060 	submi	r0, r7, #96	; 0x60

200002cc <RCC_PLLI2SConfig>:
  *         on the I2S clock frequency.
  *   
  * @retval None
  */
void RCC_PLLI2SConfig(uint32_t PLLI2SN, uint32_t PLLI2SR)
{
200002cc:	b580      	push	{r7, lr}
200002ce:	b082      	sub	sp, #8
200002d0:	af00      	add	r7, sp, #0
200002d2:	6078      	str	r0, [r7, #4]
200002d4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RCC_PLLI2SN_VALUE(PLLI2SN));
  assert_param(IS_RCC_PLLI2SR_VALUE(PLLI2SR));

  RCC->PLLI2SCFGR = (PLLI2SN << 6) | (PLLI2SR << 28);
200002d6:	687b      	ldr	r3, [r7, #4]
200002d8:	019a      	lsls	r2, r3, #6
200002da:	683b      	ldr	r3, [r7, #0]
200002dc:	071b      	lsls	r3, r3, #28
200002de:	4904      	ldr	r1, [pc, #16]	; (200002f0 <RCC_PLLI2SConfig+0x24>)
200002e0:	4313      	orrs	r3, r2
200002e2:	2284      	movs	r2, #132	; 0x84
200002e4:	508b      	str	r3, [r1, r2]
}
200002e6:	46c0      	nop			; (mov r8, r8)
200002e8:	46bd      	mov	sp, r7
200002ea:	b002      	add	sp, #8
200002ec:	bd80      	pop	{r7, pc}
200002ee:	46c0      	nop			; (mov r8, r8)
200002f0:	40023800 	andmi	r3, r2, r0, lsl #16

200002f4 <RCC_PLLI2SCmd>:
  * @note   The PLLI2S is disabled by hardware when entering STOP and STANDBY modes.  
  * @param  NewState: new state of the PLLI2S. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_PLLI2SCmd(FunctionalState NewState)
{
200002f4:	b580      	push	{r7, lr}
200002f6:	b082      	sub	sp, #8
200002f8:	af00      	add	r7, sp, #0
200002fa:	0002      	movs	r2, r0
200002fc:	1dfb      	adds	r3, r7, #7
200002fe:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_PLLI2SON_BB = (uint32_t)NewState;
20000300:	4b03      	ldr	r3, [pc, #12]	; (20000310 <RCC_PLLI2SCmd+0x1c>)
20000302:	1dfa      	adds	r2, r7, #7
20000304:	7812      	ldrb	r2, [r2, #0]
20000306:	601a      	str	r2, [r3, #0]
}
20000308:	46c0      	nop			; (mov r8, r8)
2000030a:	46bd      	mov	sp, r7
2000030c:	b002      	add	sp, #8
2000030e:	bd80      	pop	{r7, pc}
20000310:	42470068 	submi	r0, r7, #104	; 0x68

20000314 <RCC_PLLSAIConfig>:
  *          This parameter must be a number between 2 and 7.
  *   
  * @retval None
  */
void RCC_PLLSAIConfig(uint32_t PLLSAIN, uint32_t PLLSAIQ, uint32_t PLLSAIR)
{
20000314:	b580      	push	{r7, lr}
20000316:	b084      	sub	sp, #16
20000318:	af00      	add	r7, sp, #0
2000031a:	60f8      	str	r0, [r7, #12]
2000031c:	60b9      	str	r1, [r7, #8]
2000031e:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_PLLSAIN_VALUE(PLLSAIN));
  assert_param(IS_RCC_PLLSAIR_VALUE(PLLSAIR));
  assert_param(IS_RCC_PLLSAIQ_VALUE(PLLSAIQ));
  
  RCC->PLLSAICFGR = (PLLSAIN << 6) | (PLLSAIQ << 24) | (PLLSAIR << 28);
20000320:	68fb      	ldr	r3, [r7, #12]
20000322:	019a      	lsls	r2, r3, #6
20000324:	68bb      	ldr	r3, [r7, #8]
20000326:	061b      	lsls	r3, r3, #24
20000328:	431a      	orrs	r2, r3
2000032a:	687b      	ldr	r3, [r7, #4]
2000032c:	071b      	lsls	r3, r3, #28
2000032e:	4904      	ldr	r1, [pc, #16]	; (20000340 <RCC_PLLSAIConfig+0x2c>)
20000330:	4313      	orrs	r3, r2
20000332:	2288      	movs	r2, #136	; 0x88
20000334:	508b      	str	r3, [r1, r2]
}
20000336:	46c0      	nop			; (mov r8, r8)
20000338:	46bd      	mov	sp, r7
2000033a:	b004      	add	sp, #16
2000033c:	bd80      	pop	{r7, pc}
2000033e:	46c0      	nop			; (mov r8, r8)
20000340:	40023800 	andmi	r3, r2, r0, lsl #16

20000344 <RCC_PLLSAICmd>:
  * @note   The PLLSAI is disabled by hardware when entering STOP and STANDBY modes.  
  * @param  NewState: new state of the PLLSAI. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_PLLSAICmd(FunctionalState NewState)
{
20000344:	b580      	push	{r7, lr}
20000346:	b082      	sub	sp, #8
20000348:	af00      	add	r7, sp, #0
2000034a:	0002      	movs	r2, r0
2000034c:	1dfb      	adds	r3, r7, #7
2000034e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_PLLSAION_BB = (uint32_t)NewState;
20000350:	4b03      	ldr	r3, [pc, #12]	; (20000360 <RCC_PLLSAICmd+0x1c>)
20000352:	1dfa      	adds	r2, r7, #7
20000354:	7812      	ldrb	r2, [r2, #0]
20000356:	601a      	str	r2, [r3, #0]
}
20000358:	46c0      	nop			; (mov r8, r8)
2000035a:	46bd      	mov	sp, r7
2000035c:	b002      	add	sp, #8
2000035e:	bd80      	pop	{r7, pc}
20000360:	42470070 	submi	r0, r7, #112	; 0x70

20000364 <RCC_ClockSecuritySystemCmd>:
  * @param  NewState: new state of the Clock Security System.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_ClockSecuritySystemCmd(FunctionalState NewState)
{
20000364:	b580      	push	{r7, lr}
20000366:	b082      	sub	sp, #8
20000368:	af00      	add	r7, sp, #0
2000036a:	0002      	movs	r2, r0
2000036c:	1dfb      	adds	r3, r7, #7
2000036e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_CSSON_BB = (uint32_t)NewState;
20000370:	4b03      	ldr	r3, [pc, #12]	; (20000380 <RCC_ClockSecuritySystemCmd+0x1c>)
20000372:	1dfa      	adds	r2, r7, #7
20000374:	7812      	ldrb	r2, [r2, #0]
20000376:	601a      	str	r2, [r3, #0]
}
20000378:	46c0      	nop			; (mov r8, r8)
2000037a:	46bd      	mov	sp, r7
2000037c:	b002      	add	sp, #8
2000037e:	bd80      	pop	{r7, pc}
20000380:	4247004c 	submi	r0, r7, #76	; 0x4c

20000384 <RCC_MCO1Config>:
  *            @arg RCC_MCO1Div_4: division by 4 applied to MCO1 clock
  *            @arg RCC_MCO1Div_5: division by 5 applied to MCO1 clock
  * @retval None
  */
void RCC_MCO1Config(uint32_t RCC_MCO1Source, uint32_t RCC_MCO1Div)
{
20000384:	b580      	push	{r7, lr}
20000386:	b084      	sub	sp, #16
20000388:	af00      	add	r7, sp, #0
2000038a:	6078      	str	r0, [r7, #4]
2000038c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
2000038e:	2300      	movs	r3, #0
20000390:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_MCO1SOURCE(RCC_MCO1Source));
  assert_param(IS_RCC_MCO1DIV(RCC_MCO1Div));  

  tmpreg = RCC->CFGR;
20000392:	4b0a      	ldr	r3, [pc, #40]	; (200003bc <RCC_MCO1Config+0x38>)
20000394:	689b      	ldr	r3, [r3, #8]
20000396:	60fb      	str	r3, [r7, #12]

  /* Clear MCO1[1:0] and MCO1PRE[2:0] bits */
  tmpreg &= CFGR_MCO1_RESET_MASK;
20000398:	68fb      	ldr	r3, [r7, #12]
2000039a:	4a09      	ldr	r2, [pc, #36]	; (200003c0 <RCC_MCO1Config+0x3c>)
2000039c:	4013      	ands	r3, r2
2000039e:	60fb      	str	r3, [r7, #12]

  /* Select MCO1 clock source and prescaler */
  tmpreg |= RCC_MCO1Source | RCC_MCO1Div;
200003a0:	687a      	ldr	r2, [r7, #4]
200003a2:	683b      	ldr	r3, [r7, #0]
200003a4:	4313      	orrs	r3, r2
200003a6:	68fa      	ldr	r2, [r7, #12]
200003a8:	4313      	orrs	r3, r2
200003aa:	60fb      	str	r3, [r7, #12]
  
  /* Store the new value */
  RCC->CFGR = tmpreg;
200003ac:	4b03      	ldr	r3, [pc, #12]	; (200003bc <RCC_MCO1Config+0x38>)
200003ae:	68fa      	ldr	r2, [r7, #12]
200003b0:	609a      	str	r2, [r3, #8]

#if defined(STM32F410xx)
  RCC_MCO1Cmd(ENABLE);
#endif /* STM32F410xx */   
}
200003b2:	46c0      	nop			; (mov r8, r8)
200003b4:	46bd      	mov	sp, r7
200003b6:	b004      	add	sp, #16
200003b8:	bd80      	pop	{r7, pc}
200003ba:	46c0      	nop			; (mov r8, r8)
200003bc:	40023800 	andmi	r3, r2, r0, lsl #16
200003c0:	f89fffff 			; <UNDEFINED> instruction: 0xf89fffff

200003c4 <RCC_MCO2Config>:
  * @note  For STM32F410xx devices to output I2SCLK clock on MCO2 you should have
  *        at last one of the SPI clocks enabled (SPI1, SPI2 or SPI5).
  * @retval None
  */
void RCC_MCO2Config(uint32_t RCC_MCO2Source, uint32_t RCC_MCO2Div)
{
200003c4:	b580      	push	{r7, lr}
200003c6:	b084      	sub	sp, #16
200003c8:	af00      	add	r7, sp, #0
200003ca:	6078      	str	r0, [r7, #4]
200003cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
200003ce:	2300      	movs	r3, #0
200003d0:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_MCO2SOURCE(RCC_MCO2Source));
  assert_param(IS_RCC_MCO2DIV(RCC_MCO2Div));
  
  tmpreg = RCC->CFGR;
200003d2:	4b0a      	ldr	r3, [pc, #40]	; (200003fc <RCC_MCO2Config+0x38>)
200003d4:	689b      	ldr	r3, [r3, #8]
200003d6:	60fb      	str	r3, [r7, #12]
  
  /* Clear MCO2 and MCO2PRE[2:0] bits */
  tmpreg &= CFGR_MCO2_RESET_MASK;
200003d8:	68fb      	ldr	r3, [r7, #12]
200003da:	015b      	lsls	r3, r3, #5
200003dc:	095b      	lsrs	r3, r3, #5
200003de:	60fb      	str	r3, [r7, #12]

  /* Select MCO2 clock source and prescaler */
  tmpreg |= RCC_MCO2Source | RCC_MCO2Div;
200003e0:	687a      	ldr	r2, [r7, #4]
200003e2:	683b      	ldr	r3, [r7, #0]
200003e4:	4313      	orrs	r3, r2
200003e6:	68fa      	ldr	r2, [r7, #12]
200003e8:	4313      	orrs	r3, r2
200003ea:	60fb      	str	r3, [r7, #12]
  
  /* Store the new value */
  RCC->CFGR = tmpreg;
200003ec:	4b03      	ldr	r3, [pc, #12]	; (200003fc <RCC_MCO2Config+0x38>)
200003ee:	68fa      	ldr	r2, [r7, #12]
200003f0:	609a      	str	r2, [r3, #8]

#if defined(STM32F410xx)
  RCC_MCO2Cmd(ENABLE);
#endif /* STM32F410xx */   
}
200003f2:	46c0      	nop			; (mov r8, r8)
200003f4:	46bd      	mov	sp, r7
200003f6:	b004      	add	sp, #16
200003f8:	bd80      	pop	{r7, pc}
200003fa:	46c0      	nop			; (mov r8, r8)
200003fc:	40023800 	andmi	r3, r2, r0, lsl #16

20000400 <RCC_SYSCLKConfig>:
  *            @arg RCC_SYSCLKSource_PLLCLK: PLL selected as system clock source (RCC_SYSCLKSource_PLLPCLK for STM32F446xx devices)
  *            @arg RCC_SYSCLKSource_PLLRCLK: PLL R selected as system clock source only for STM32F412xG, STM32F413_423xx and STM32F446xx devices
  * @retval None
  */
void RCC_SYSCLKConfig(uint32_t RCC_SYSCLKSource)
{
20000400:	b580      	push	{r7, lr}
20000402:	b084      	sub	sp, #16
20000404:	af00      	add	r7, sp, #0
20000406:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
20000408:	2300      	movs	r3, #0
2000040a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_SYSCLK_SOURCE(RCC_SYSCLKSource));

  tmpreg = RCC->CFGR;
2000040c:	4b08      	ldr	r3, [pc, #32]	; (20000430 <RCC_SYSCLKConfig+0x30>)
2000040e:	689b      	ldr	r3, [r3, #8]
20000410:	60fb      	str	r3, [r7, #12]

  /* Clear SW[1:0] bits */
  tmpreg &= ~RCC_CFGR_SW;
20000412:	68fb      	ldr	r3, [r7, #12]
20000414:	2203      	movs	r2, #3
20000416:	4393      	bics	r3, r2
20000418:	60fb      	str	r3, [r7, #12]

  /* Set SW[1:0] bits according to RCC_SYSCLKSource value */
  tmpreg |= RCC_SYSCLKSource;
2000041a:	68fa      	ldr	r2, [r7, #12]
2000041c:	687b      	ldr	r3, [r7, #4]
2000041e:	4313      	orrs	r3, r2
20000420:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;
20000422:	4b03      	ldr	r3, [pc, #12]	; (20000430 <RCC_SYSCLKConfig+0x30>)
20000424:	68fa      	ldr	r2, [r7, #12]
20000426:	609a      	str	r2, [r3, #8]
}
20000428:	46c0      	nop			; (mov r8, r8)
2000042a:	46bd      	mov	sp, r7
2000042c:	b004      	add	sp, #16
2000042e:	bd80      	pop	{r7, pc}
20000430:	40023800 	andmi	r3, r2, r0, lsl #16

20000434 <RCC_GetSYSCLKSource>:
  *              - 0x04: HSE used as system clock
  *              - 0x08: PLL used as system clock (PLL P for STM32F446xx devices)
  *              - 0x0C: PLL R used as system clock (only for STM32F412xG, STM32F413_423xx and STM32F446xx devices)
  */
uint8_t RCC_GetSYSCLKSource(void)
{
20000434:	b580      	push	{r7, lr}
20000436:	af00      	add	r7, sp, #0
  return ((uint8_t)(RCC->CFGR & RCC_CFGR_SWS));
20000438:	4b04      	ldr	r3, [pc, #16]	; (2000044c <RCC_GetSYSCLKSource+0x18>)
2000043a:	689b      	ldr	r3, [r3, #8]
2000043c:	b2db      	uxtb	r3, r3
2000043e:	220c      	movs	r2, #12
20000440:	4013      	ands	r3, r2
20000442:	b2db      	uxtb	r3, r3
}
20000444:	0018      	movs	r0, r3
20000446:	46bd      	mov	sp, r7
20000448:	bd80      	pop	{r7, pc}
2000044a:	46c0      	nop			; (mov r8, r8)
2000044c:	40023800 	andmi	r3, r2, r0, lsl #16

20000450 <RCC_HCLKConfig>:
  *            @arg RCC_SYSCLK_Div256: AHB clock = SYSCLK/256
  *            @arg RCC_SYSCLK_Div512: AHB clock = SYSCLK/512
  * @retval None
  */
void RCC_HCLKConfig(uint32_t RCC_SYSCLK)
{
20000450:	b580      	push	{r7, lr}
20000452:	b084      	sub	sp, #16
20000454:	af00      	add	r7, sp, #0
20000456:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
20000458:	2300      	movs	r3, #0
2000045a:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_HCLK(RCC_SYSCLK));

  tmpreg = RCC->CFGR;
2000045c:	4b08      	ldr	r3, [pc, #32]	; (20000480 <RCC_HCLKConfig+0x30>)
2000045e:	689b      	ldr	r3, [r3, #8]
20000460:	60fb      	str	r3, [r7, #12]

  /* Clear HPRE[3:0] bits */
  tmpreg &= ~RCC_CFGR_HPRE;
20000462:	68fb      	ldr	r3, [r7, #12]
20000464:	22f0      	movs	r2, #240	; 0xf0
20000466:	4393      	bics	r3, r2
20000468:	60fb      	str	r3, [r7, #12]

  /* Set HPRE[3:0] bits according to RCC_SYSCLK value */
  tmpreg |= RCC_SYSCLK;
2000046a:	68fa      	ldr	r2, [r7, #12]
2000046c:	687b      	ldr	r3, [r7, #4]
2000046e:	4313      	orrs	r3, r2
20000470:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;
20000472:	4b03      	ldr	r3, [pc, #12]	; (20000480 <RCC_HCLKConfig+0x30>)
20000474:	68fa      	ldr	r2, [r7, #12]
20000476:	609a      	str	r2, [r3, #8]
}
20000478:	46c0      	nop			; (mov r8, r8)
2000047a:	46bd      	mov	sp, r7
2000047c:	b004      	add	sp, #16
2000047e:	bd80      	pop	{r7, pc}
20000480:	40023800 	andmi	r3, r2, r0, lsl #16

20000484 <RCC_PCLK1Config>:
  *            @arg RCC_HCLK_Div8:  APB1 clock = HCLK/8
  *            @arg RCC_HCLK_Div16: APB1 clock = HCLK/16
  * @retval None
  */
void RCC_PCLK1Config(uint32_t RCC_HCLK)
{
20000484:	b580      	push	{r7, lr}
20000486:	b084      	sub	sp, #16
20000488:	af00      	add	r7, sp, #0
2000048a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
2000048c:	2300      	movs	r3, #0
2000048e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));

  tmpreg = RCC->CFGR;
20000490:	4b08      	ldr	r3, [pc, #32]	; (200004b4 <RCC_PCLK1Config+0x30>)
20000492:	689b      	ldr	r3, [r3, #8]
20000494:	60fb      	str	r3, [r7, #12]

  /* Clear PPRE1[2:0] bits */
  tmpreg &= ~RCC_CFGR_PPRE1;
20000496:	68fb      	ldr	r3, [r7, #12]
20000498:	4a07      	ldr	r2, [pc, #28]	; (200004b8 <RCC_PCLK1Config+0x34>)
2000049a:	4013      	ands	r3, r2
2000049c:	60fb      	str	r3, [r7, #12]

  /* Set PPRE1[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK;
2000049e:	68fa      	ldr	r2, [r7, #12]
200004a0:	687b      	ldr	r3, [r7, #4]
200004a2:	4313      	orrs	r3, r2
200004a4:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;
200004a6:	4b03      	ldr	r3, [pc, #12]	; (200004b4 <RCC_PCLK1Config+0x30>)
200004a8:	68fa      	ldr	r2, [r7, #12]
200004aa:	609a      	str	r2, [r3, #8]
}
200004ac:	46c0      	nop			; (mov r8, r8)
200004ae:	46bd      	mov	sp, r7
200004b0:	b004      	add	sp, #16
200004b2:	bd80      	pop	{r7, pc}
200004b4:	40023800 	andmi	r3, r2, r0, lsl #16
200004b8:	ffffe3ff 			; <UNDEFINED> instruction: 0xffffe3ff

200004bc <RCC_PCLK2Config>:
  *            @arg RCC_HCLK_Div8:  APB2 clock = HCLK/8
  *            @arg RCC_HCLK_Div16: APB2 clock = HCLK/16
  * @retval None
  */
void RCC_PCLK2Config(uint32_t RCC_HCLK)
{
200004bc:	b580      	push	{r7, lr}
200004be:	b084      	sub	sp, #16
200004c0:	af00      	add	r7, sp, #0
200004c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
200004c4:	2300      	movs	r3, #0
200004c6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));

  tmpreg = RCC->CFGR;
200004c8:	4b09      	ldr	r3, [pc, #36]	; (200004f0 <RCC_PCLK2Config+0x34>)
200004ca:	689b      	ldr	r3, [r3, #8]
200004cc:	60fb      	str	r3, [r7, #12]

  /* Clear PPRE2[2:0] bits */
  tmpreg &= ~RCC_CFGR_PPRE2;
200004ce:	68fb      	ldr	r3, [r7, #12]
200004d0:	4a08      	ldr	r2, [pc, #32]	; (200004f4 <RCC_PCLK2Config+0x38>)
200004d2:	4013      	ands	r3, r2
200004d4:	60fb      	str	r3, [r7, #12]

  /* Set PPRE2[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK << 3;
200004d6:	687b      	ldr	r3, [r7, #4]
200004d8:	00db      	lsls	r3, r3, #3
200004da:	68fa      	ldr	r2, [r7, #12]
200004dc:	4313      	orrs	r3, r2
200004de:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;
200004e0:	4b03      	ldr	r3, [pc, #12]	; (200004f0 <RCC_PCLK2Config+0x34>)
200004e2:	68fa      	ldr	r2, [r7, #12]
200004e4:	609a      	str	r2, [r3, #8]
}
200004e6:	46c0      	nop			; (mov r8, r8)
200004e8:	46bd      	mov	sp, r7
200004ea:	b004      	add	sp, #16
200004ec:	bd80      	pop	{r7, pc}
200004ee:	46c0      	nop			; (mov r8, r8)
200004f0:	40023800 	andmi	r3, r2, r0, lsl #16
200004f4:	ffff1fff 			; <UNDEFINED> instruction: 0xffff1fff

200004f8 <RCC_GetClocksFreq>:
  *         configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
200004f8:	b580      	push	{r7, lr}
200004fa:	b088      	sub	sp, #32
200004fc:	af00      	add	r7, sp, #0
200004fe:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
20000500:	2300      	movs	r3, #0
20000502:	61bb      	str	r3, [r7, #24]
20000504:	2300      	movs	r3, #0
20000506:	617b      	str	r3, [r7, #20]
20000508:	2300      	movs	r3, #0
2000050a:	61fb      	str	r3, [r7, #28]
2000050c:	2302      	movs	r3, #2
2000050e:	613b      	str	r3, [r7, #16]
20000510:	2300      	movs	r3, #0
20000512:	60fb      	str	r3, [r7, #12]
20000514:	2302      	movs	r3, #2
20000516:	60bb      	str	r3, [r7, #8]
#if defined(STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F446xx)  
  uint32_t pllr = 2;
#endif /* STM32F412xG || STM32F413_423xx || STM32F446xx */
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
20000518:	4b49      	ldr	r3, [pc, #292]	; (20000640 <RCC_GetClocksFreq+0x148>)
2000051a:	689b      	ldr	r3, [r3, #8]
2000051c:	220c      	movs	r2, #12
2000051e:	4013      	ands	r3, r2
20000520:	61bb      	str	r3, [r7, #24]
  
  switch (tmp)
20000522:	69bb      	ldr	r3, [r7, #24]
20000524:	2b04      	cmp	r3, #4
20000526:	d007      	beq.n	20000538 <RCC_GetClocksFreq+0x40>
20000528:	2b08      	cmp	r3, #8
2000052a:	d009      	beq.n	20000540 <RCC_GetClocksFreq+0x48>
2000052c:	2b00      	cmp	r3, #0
2000052e:	d141      	bne.n	200005b4 <RCC_GetClocksFreq+0xbc>
  {
  case 0x00:  /* HSI used as system clock source */
    RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
20000530:	687b      	ldr	r3, [r7, #4]
20000532:	4a44      	ldr	r2, [pc, #272]	; (20000644 <RCC_GetClocksFreq+0x14c>)
20000534:	601a      	str	r2, [r3, #0]
    break;
20000536:	e041      	b.n	200005bc <RCC_GetClocksFreq+0xc4>
  case 0x04:  /* HSE used as system clock  source */
    RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
20000538:	687b      	ldr	r3, [r7, #4]
2000053a:	4a43      	ldr	r2, [pc, #268]	; (20000648 <RCC_GetClocksFreq+0x150>)
2000053c:	601a      	str	r2, [r3, #0]
    break;
2000053e:	e03d      	b.n	200005bc <RCC_GetClocksFreq+0xc4>
  case 0x08:  /* PLL P used as system clock  source */
    
    /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLP
    */    
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
20000540:	4b3f      	ldr	r3, [pc, #252]	; (20000640 <RCC_GetClocksFreq+0x148>)
20000542:	685b      	ldr	r3, [r3, #4]
20000544:	0d9b      	lsrs	r3, r3, #22
20000546:	2201      	movs	r2, #1
20000548:	4013      	ands	r3, r2
2000054a:	60fb      	str	r3, [r7, #12]
    pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
2000054c:	4b3c      	ldr	r3, [pc, #240]	; (20000640 <RCC_GetClocksFreq+0x148>)
2000054e:	685b      	ldr	r3, [r3, #4]
20000550:	223f      	movs	r2, #63	; 0x3f
20000552:	4013      	ands	r3, r2
20000554:	60bb      	str	r3, [r7, #8]
    
    if (pllsource != 0)
20000556:	68fb      	ldr	r3, [r7, #12]
20000558:	2b00      	cmp	r3, #0
2000055a:	d00d      	beq.n	20000578 <RCC_GetClocksFreq+0x80>
    {
      /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
2000055c:	68b9      	ldr	r1, [r7, #8]
2000055e:	483a      	ldr	r0, [pc, #232]	; (20000648 <RCC_GetClocksFreq+0x150>)
20000560:	f000 ff24 	bl	200013ac <__udivsi3>
20000564:	0003      	movs	r3, r0
20000566:	001a      	movs	r2, r3
20000568:	4b35      	ldr	r3, [pc, #212]	; (20000640 <RCC_GetClocksFreq+0x148>)
2000056a:	685b      	ldr	r3, [r3, #4]
2000056c:	099b      	lsrs	r3, r3, #6
2000056e:	05db      	lsls	r3, r3, #23
20000570:	0ddb      	lsrs	r3, r3, #23
20000572:	4353      	muls	r3, r2
20000574:	61fb      	str	r3, [r7, #28]
20000576:	e00c      	b.n	20000592 <RCC_GetClocksFreq+0x9a>
    }
    else
    {
      /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
20000578:	68b9      	ldr	r1, [r7, #8]
2000057a:	4832      	ldr	r0, [pc, #200]	; (20000644 <RCC_GetClocksFreq+0x14c>)
2000057c:	f000 ff16 	bl	200013ac <__udivsi3>
20000580:	0003      	movs	r3, r0
20000582:	001a      	movs	r2, r3
20000584:	4b2e      	ldr	r3, [pc, #184]	; (20000640 <RCC_GetClocksFreq+0x148>)
20000586:	685b      	ldr	r3, [r3, #4]
20000588:	099b      	lsrs	r3, r3, #6
2000058a:	05db      	lsls	r3, r3, #23
2000058c:	0ddb      	lsrs	r3, r3, #23
2000058e:	4353      	muls	r3, r2
20000590:	61fb      	str	r3, [r7, #28]
    }
    
    pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
20000592:	4b2b      	ldr	r3, [pc, #172]	; (20000640 <RCC_GetClocksFreq+0x148>)
20000594:	685b      	ldr	r3, [r3, #4]
20000596:	0c1b      	lsrs	r3, r3, #16
20000598:	2203      	movs	r2, #3
2000059a:	4013      	ands	r3, r2
2000059c:	3301      	adds	r3, #1
2000059e:	005b      	lsls	r3, r3, #1
200005a0:	613b      	str	r3, [r7, #16]
    RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
200005a2:	6939      	ldr	r1, [r7, #16]
200005a4:	69f8      	ldr	r0, [r7, #28]
200005a6:	f000 ff01 	bl	200013ac <__udivsi3>
200005aa:	0003      	movs	r3, r0
200005ac:	001a      	movs	r2, r3
200005ae:	687b      	ldr	r3, [r7, #4]
200005b0:	601a      	str	r2, [r3, #0]
    break;
200005b2:	e003      	b.n	200005bc <RCC_GetClocksFreq+0xc4>
    RCC_Clocks->SYSCLK_Frequency = pllvco/pllr;    
    break;
#endif /* STM32F412xG || STM32F413_423xx || STM32F446xx */
    
  default:
    RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
200005b4:	687b      	ldr	r3, [r7, #4]
200005b6:	4a23      	ldr	r2, [pc, #140]	; (20000644 <RCC_GetClocksFreq+0x14c>)
200005b8:	601a      	str	r2, [r3, #0]
    break;
200005ba:	46c0      	nop			; (mov r8, r8)
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/
  
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
200005bc:	4b20      	ldr	r3, [pc, #128]	; (20000640 <RCC_GetClocksFreq+0x148>)
200005be:	689b      	ldr	r3, [r3, #8]
200005c0:	22f0      	movs	r2, #240	; 0xf0
200005c2:	4013      	ands	r3, r2
200005c4:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 4;
200005c6:	69bb      	ldr	r3, [r7, #24]
200005c8:	091b      	lsrs	r3, r3, #4
200005ca:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
200005cc:	4a1f      	ldr	r2, [pc, #124]	; (2000064c <RCC_GetClocksFreq+0x154>)
200005ce:	69bb      	ldr	r3, [r7, #24]
200005d0:	18d3      	adds	r3, r2, r3
200005d2:	781b      	ldrb	r3, [r3, #0]
200005d4:	b2db      	uxtb	r3, r3
200005d6:	617b      	str	r3, [r7, #20]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
200005d8:	687b      	ldr	r3, [r7, #4]
200005da:	681a      	ldr	r2, [r3, #0]
200005dc:	697b      	ldr	r3, [r7, #20]
200005de:	40da      	lsrs	r2, r3
200005e0:	687b      	ldr	r3, [r7, #4]
200005e2:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
200005e4:	4b16      	ldr	r3, [pc, #88]	; (20000640 <RCC_GetClocksFreq+0x148>)
200005e6:	689a      	ldr	r2, [r3, #8]
200005e8:	23e0      	movs	r3, #224	; 0xe0
200005ea:	015b      	lsls	r3, r3, #5
200005ec:	4013      	ands	r3, r2
200005ee:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 10;
200005f0:	69bb      	ldr	r3, [r7, #24]
200005f2:	0a9b      	lsrs	r3, r3, #10
200005f4:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
200005f6:	4a15      	ldr	r2, [pc, #84]	; (2000064c <RCC_GetClocksFreq+0x154>)
200005f8:	69bb      	ldr	r3, [r7, #24]
200005fa:	18d3      	adds	r3, r2, r3
200005fc:	781b      	ldrb	r3, [r3, #0]
200005fe:	b2db      	uxtb	r3, r3
20000600:	617b      	str	r3, [r7, #20]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
20000602:	687b      	ldr	r3, [r7, #4]
20000604:	685a      	ldr	r2, [r3, #4]
20000606:	697b      	ldr	r3, [r7, #20]
20000608:	40da      	lsrs	r2, r3
2000060a:	687b      	ldr	r3, [r7, #4]
2000060c:	609a      	str	r2, [r3, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
2000060e:	4b0c      	ldr	r3, [pc, #48]	; (20000640 <RCC_GetClocksFreq+0x148>)
20000610:	689a      	ldr	r2, [r3, #8]
20000612:	23e0      	movs	r3, #224	; 0xe0
20000614:	021b      	lsls	r3, r3, #8
20000616:	4013      	ands	r3, r2
20000618:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 13;
2000061a:	69bb      	ldr	r3, [r7, #24]
2000061c:	0b5b      	lsrs	r3, r3, #13
2000061e:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
20000620:	4a0a      	ldr	r2, [pc, #40]	; (2000064c <RCC_GetClocksFreq+0x154>)
20000622:	69bb      	ldr	r3, [r7, #24]
20000624:	18d3      	adds	r3, r2, r3
20000626:	781b      	ldrb	r3, [r3, #0]
20000628:	b2db      	uxtb	r3, r3
2000062a:	617b      	str	r3, [r7, #20]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
2000062c:	687b      	ldr	r3, [r7, #4]
2000062e:	685a      	ldr	r2, [r3, #4]
20000630:	697b      	ldr	r3, [r7, #20]
20000632:	40da      	lsrs	r2, r3
20000634:	687b      	ldr	r3, [r7, #4]
20000636:	60da      	str	r2, [r3, #12]
}
20000638:	46c0      	nop			; (mov r8, r8)
2000063a:	46bd      	mov	sp, r7
2000063c:	b008      	add	sp, #32
2000063e:	bd80      	pop	{r7, pc}
20000640:	40023800 	andmi	r3, r2, r0, lsl #16
20000644:	00f42400 	rscseq	r2, r4, r0, lsl #8
20000648:	017d7840 	cmneq	sp, r0, asr #16
2000064c:	200014c8 	andcs	r1, r0, r8, asr #9

20000650 <RCC_RTCCLKConfig>:
  *         RTC clock source).
  *  
  * @retval None
  */
void RCC_RTCCLKConfig(uint32_t RCC_RTCCLKSource)
{
20000650:	b580      	push	{r7, lr}
20000652:	b084      	sub	sp, #16
20000654:	af00      	add	r7, sp, #0
20000656:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
20000658:	2300      	movs	r3, #0
2000065a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_RTCCLK_SOURCE(RCC_RTCCLKSource));

  if ((RCC_RTCCLKSource & 0x00000300) == 0x00000300)
2000065c:	687a      	ldr	r2, [r7, #4]
2000065e:	23c0      	movs	r3, #192	; 0xc0
20000660:	009b      	lsls	r3, r3, #2
20000662:	401a      	ands	r2, r3
20000664:	23c0      	movs	r3, #192	; 0xc0
20000666:	009b      	lsls	r3, r3, #2
20000668:	429a      	cmp	r2, r3
2000066a:	d10f      	bne.n	2000068c <RCC_RTCCLKConfig+0x3c>
  { /* If HSE is selected as RTC clock source, configure HSE division factor for RTC clock */
    tmpreg = RCC->CFGR;
2000066c:	4b0d      	ldr	r3, [pc, #52]	; (200006a4 <RCC_RTCCLKConfig+0x54>)
2000066e:	689b      	ldr	r3, [r3, #8]
20000670:	60fb      	str	r3, [r7, #12]

    /* Clear RTCPRE[4:0] bits */
    tmpreg &= ~RCC_CFGR_RTCPRE;
20000672:	68fb      	ldr	r3, [r7, #12]
20000674:	4a0c      	ldr	r2, [pc, #48]	; (200006a8 <RCC_RTCCLKConfig+0x58>)
20000676:	4013      	ands	r3, r2
20000678:	60fb      	str	r3, [r7, #12]

    /* Configure HSE division factor for RTC clock */
    tmpreg |= (RCC_RTCCLKSource & 0xFFFFCFF);
2000067a:	687b      	ldr	r3, [r7, #4]
2000067c:	4a0b      	ldr	r2, [pc, #44]	; (200006ac <RCC_RTCCLKConfig+0x5c>)
2000067e:	4013      	ands	r3, r2
20000680:	68fa      	ldr	r2, [r7, #12]
20000682:	4313      	orrs	r3, r2
20000684:	60fb      	str	r3, [r7, #12]

    /* Store the new value */
    RCC->CFGR = tmpreg;
20000686:	4b07      	ldr	r3, [pc, #28]	; (200006a4 <RCC_RTCCLKConfig+0x54>)
20000688:	68fa      	ldr	r2, [r7, #12]
2000068a:	609a      	str	r2, [r3, #8]
  }
    
  /* Select the RTC clock source */
  RCC->BDCR |= (RCC_RTCCLKSource & 0x00000FFF);
2000068c:	4b05      	ldr	r3, [pc, #20]	; (200006a4 <RCC_RTCCLKConfig+0x54>)
2000068e:	6f19      	ldr	r1, [r3, #112]	; 0x70
20000690:	687b      	ldr	r3, [r7, #4]
20000692:	051b      	lsls	r3, r3, #20
20000694:	0d1a      	lsrs	r2, r3, #20
20000696:	4b03      	ldr	r3, [pc, #12]	; (200006a4 <RCC_RTCCLKConfig+0x54>)
20000698:	430a      	orrs	r2, r1
2000069a:	671a      	str	r2, [r3, #112]	; 0x70
}
2000069c:	46c0      	nop			; (mov r8, r8)
2000069e:	46bd      	mov	sp, r7
200006a0:	b004      	add	sp, #16
200006a2:	bd80      	pop	{r7, pc}
200006a4:	40023800 	andmi	r3, r2, r0, lsl #16
200006a8:	ffe0ffff 			; <UNDEFINED> instruction: 0xffe0ffff
200006ac:	0ffffcff 	svceq	0x00fffcff

200006b0 <RCC_RTCCLKCmd>:
  *         using the RCC_RTCCLKConfig function.
  * @param  NewState: new state of the RTC clock. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_RTCCLKCmd(FunctionalState NewState)
{
200006b0:	b580      	push	{r7, lr}
200006b2:	b082      	sub	sp, #8
200006b4:	af00      	add	r7, sp, #0
200006b6:	0002      	movs	r2, r0
200006b8:	1dfb      	adds	r3, r7, #7
200006ba:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) BDCR_RTCEN_BB = (uint32_t)NewState;
200006bc:	4b03      	ldr	r3, [pc, #12]	; (200006cc <RCC_RTCCLKCmd+0x1c>)
200006be:	1dfa      	adds	r2, r7, #7
200006c0:	7812      	ldrb	r2, [r2, #0]
200006c2:	601a      	str	r2, [r3, #0]
}
200006c4:	46c0      	nop			; (mov r8, r8)
200006c6:	46bd      	mov	sp, r7
200006c8:	b002      	add	sp, #8
200006ca:	bd80      	pop	{r7, pc}
200006cc:	42470e3c 	submi	r0, r7, #60, 28	; 0x3c0

200006d0 <RCC_BackupResetCmd>:
  * @param  NewState: new state of the Backup domain reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_BackupResetCmd(FunctionalState NewState)
{
200006d0:	b580      	push	{r7, lr}
200006d2:	b082      	sub	sp, #8
200006d4:	af00      	add	r7, sp, #0
200006d6:	0002      	movs	r2, r0
200006d8:	1dfb      	adds	r3, r7, #7
200006da:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) BDCR_BDRST_BB = (uint32_t)NewState;
200006dc:	4b03      	ldr	r3, [pc, #12]	; (200006ec <RCC_BackupResetCmd+0x1c>)
200006de:	1dfa      	adds	r2, r7, #7
200006e0:	7812      	ldrb	r2, [r2, #0]
200006e2:	601a      	str	r2, [r3, #0]
}
200006e4:	46c0      	nop			; (mov r8, r8)
200006e6:	46bd      	mov	sp, r7
200006e8:	b002      	add	sp, #8
200006ea:	bd80      	pop	{r7, pc}
200006ec:	42470e40 	submi	r0, r7, #64, 28	; 0x400

200006f0 <RCC_I2SCLKConfig>:
  *            @arg RCC_I2S2CLKSource_Ext: External clock mapped on the I2S_CKIN pin
  *                                        used as I2S clock source
  * @retval None
  */
void RCC_I2SCLKConfig(uint32_t RCC_I2SCLKSource)
{
200006f0:	b580      	push	{r7, lr}
200006f2:	b082      	sub	sp, #8
200006f4:	af00      	add	r7, sp, #0
200006f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_I2SCLK_SOURCE(RCC_I2SCLKSource));

  *(__IO uint32_t *) CFGR_I2SSRC_BB = RCC_I2SCLKSource;  
200006f8:	4b03      	ldr	r3, [pc, #12]	; (20000708 <RCC_I2SCLKConfig+0x18>)
200006fa:	687a      	ldr	r2, [r7, #4]
200006fc:	601a      	str	r2, [r3, #0]
}
200006fe:	46c0      	nop			; (mov r8, r8)
20000700:	46bd      	mov	sp, r7
20000702:	b002      	add	sp, #8
20000704:	bd80      	pop	{r7, pc}
20000706:	46c0      	nop			; (mov r8, r8)
20000708:	4247015c 	submi	r0, r7, #92, 2

2000070c <RCC_SAIBlockACLKConfig>:
  *            @arg RCC_SAIACLKSource_Ext: External clock mapped on the I2S_CKIN pin
  *                                        used as SAI1 Block A clock
  * @retval None
  */
void RCC_SAIBlockACLKConfig(uint32_t RCC_SAIBlockACLKSource)
{
2000070c:	b580      	push	{r7, lr}
2000070e:	b084      	sub	sp, #16
20000710:	af00      	add	r7, sp, #0
20000712:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
20000714:	2300      	movs	r3, #0
20000716:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_SAIACLK_SOURCE(RCC_SAIBlockACLKSource));
  
  tmpreg = RCC->DCKCFGR;
20000718:	4a09      	ldr	r2, [pc, #36]	; (20000740 <RCC_SAIBlockACLKConfig+0x34>)
2000071a:	238c      	movs	r3, #140	; 0x8c
2000071c:	58d3      	ldr	r3, [r2, r3]
2000071e:	60fb      	str	r3, [r7, #12]

  /* Clear RCC_DCKCFGR_SAI1ASRC[1:0] bits */
  tmpreg &= ~RCC_DCKCFGR_SAI1ASRC;
20000720:	68fb      	ldr	r3, [r7, #12]
20000722:	4a08      	ldr	r2, [pc, #32]	; (20000744 <RCC_SAIBlockACLKConfig+0x38>)
20000724:	4013      	ands	r3, r2
20000726:	60fb      	str	r3, [r7, #12]

  /* Set SAI Block A source selection value */
  tmpreg |= RCC_SAIBlockACLKSource;
20000728:	68fa      	ldr	r2, [r7, #12]
2000072a:	687b      	ldr	r3, [r7, #4]
2000072c:	4313      	orrs	r3, r2
2000072e:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->DCKCFGR = tmpreg;
20000730:	4903      	ldr	r1, [pc, #12]	; (20000740 <RCC_SAIBlockACLKConfig+0x34>)
20000732:	228c      	movs	r2, #140	; 0x8c
20000734:	68fb      	ldr	r3, [r7, #12]
20000736:	508b      	str	r3, [r1, r2]
}
20000738:	46c0      	nop			; (mov r8, r8)
2000073a:	46bd      	mov	sp, r7
2000073c:	b004      	add	sp, #16
2000073e:	bd80      	pop	{r7, pc}
20000740:	40023800 	andmi	r3, r2, r0, lsl #16
20000744:	ffcfffff 			; <UNDEFINED> instruction: 0xffcfffff

20000748 <RCC_SAIBlockBCLKConfig>:
  *            @arg RCC_SAIBCLKSource_Ext: External clock mapped on the I2S_CKIN pin
  *                                        used as SAI1 Block B clock
  * @retval None
  */
void RCC_SAIBlockBCLKConfig(uint32_t RCC_SAIBlockBCLKSource)
{
20000748:	b580      	push	{r7, lr}
2000074a:	b084      	sub	sp, #16
2000074c:	af00      	add	r7, sp, #0
2000074e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
20000750:	2300      	movs	r3, #0
20000752:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_SAIBCLK_SOURCE(RCC_SAIBlockBCLKSource));
  
  tmpreg = RCC->DCKCFGR;
20000754:	4a09      	ldr	r2, [pc, #36]	; (2000077c <RCC_SAIBlockBCLKConfig+0x34>)
20000756:	238c      	movs	r3, #140	; 0x8c
20000758:	58d3      	ldr	r3, [r2, r3]
2000075a:	60fb      	str	r3, [r7, #12]

  /* Clear RCC_DCKCFGR_SAI1BSRC[1:0] bits */
  tmpreg &= ~RCC_DCKCFGR_SAI1BSRC;
2000075c:	68fb      	ldr	r3, [r7, #12]
2000075e:	4a08      	ldr	r2, [pc, #32]	; (20000780 <RCC_SAIBlockBCLKConfig+0x38>)
20000760:	4013      	ands	r3, r2
20000762:	60fb      	str	r3, [r7, #12]

  /* Set SAI Block B source selection value */
  tmpreg |= RCC_SAIBlockBCLKSource;
20000764:	68fa      	ldr	r2, [r7, #12]
20000766:	687b      	ldr	r3, [r7, #4]
20000768:	4313      	orrs	r3, r2
2000076a:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->DCKCFGR = tmpreg;
2000076c:	4903      	ldr	r1, [pc, #12]	; (2000077c <RCC_SAIBlockBCLKConfig+0x34>)
2000076e:	228c      	movs	r2, #140	; 0x8c
20000770:	68fb      	ldr	r3, [r7, #12]
20000772:	508b      	str	r3, [r1, r2]
}
20000774:	46c0      	nop			; (mov r8, r8)
20000776:	46bd      	mov	sp, r7
20000778:	b004      	add	sp, #16
2000077a:	bd80      	pop	{r7, pc}
2000077c:	40023800 	andmi	r3, r2, r0, lsl #16
20000780:	ff3fffff 			; <UNDEFINED> instruction: 0xff3fffff

20000784 <RCC_SAIPLLI2SClkDivConfig>:
  *          SAI1 clock frequency = f(PLLI2S_Q) / RCC_PLLI2SDivQ 
  *              
  * @retval None
  */
void RCC_SAIPLLI2SClkDivConfig(uint32_t RCC_PLLI2SDivQ)  
{
20000784:	b580      	push	{r7, lr}
20000786:	b084      	sub	sp, #16
20000788:	af00      	add	r7, sp, #0
2000078a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
2000078c:	2300      	movs	r3, #0
2000078e:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(RCC_PLLI2SDivQ));
  
  tmpreg = RCC->DCKCFGR;
20000790:	4a0a      	ldr	r2, [pc, #40]	; (200007bc <RCC_SAIPLLI2SClkDivConfig+0x38>)
20000792:	238c      	movs	r3, #140	; 0x8c
20000794:	58d3      	ldr	r3, [r2, r3]
20000796:	60fb      	str	r3, [r7, #12]

  /* Clear PLLI2SDIVQ[4:0] bits */
  tmpreg &= ~(RCC_DCKCFGR_PLLI2SDIVQ);
20000798:	68fb      	ldr	r3, [r7, #12]
2000079a:	221f      	movs	r2, #31
2000079c:	4393      	bics	r3, r2
2000079e:	60fb      	str	r3, [r7, #12]

  /* Set PLLI2SDIVQ values */
  tmpreg |= (RCC_PLLI2SDivQ - 1);
200007a0:	687b      	ldr	r3, [r7, #4]
200007a2:	3b01      	subs	r3, #1
200007a4:	68fa      	ldr	r2, [r7, #12]
200007a6:	4313      	orrs	r3, r2
200007a8:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->DCKCFGR = tmpreg;
200007aa:	4904      	ldr	r1, [pc, #16]	; (200007bc <RCC_SAIPLLI2SClkDivConfig+0x38>)
200007ac:	228c      	movs	r2, #140	; 0x8c
200007ae:	68fb      	ldr	r3, [r7, #12]
200007b0:	508b      	str	r3, [r1, r2]
}
200007b2:	46c0      	nop			; (mov r8, r8)
200007b4:	46bd      	mov	sp, r7
200007b6:	b004      	add	sp, #16
200007b8:	bd80      	pop	{r7, pc}
200007ba:	46c0      	nop			; (mov r8, r8)
200007bc:	40023800 	andmi	r3, r2, r0, lsl #16

200007c0 <RCC_SAIPLLSAIClkDivConfig>:
  *          SAI1 clock frequency = f(PLLSAI_Q) / RCC_PLLSAIDivQ  
  *              
  * @retval None
  */
void RCC_SAIPLLSAIClkDivConfig(uint32_t RCC_PLLSAIDivQ)  
{
200007c0:	b580      	push	{r7, lr}
200007c2:	b084      	sub	sp, #16
200007c4:	af00      	add	r7, sp, #0
200007c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
200007c8:	2300      	movs	r3, #0
200007ca:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(RCC_PLLSAIDivQ));
  
  tmpreg = RCC->DCKCFGR;
200007cc:	4a0a      	ldr	r2, [pc, #40]	; (200007f8 <RCC_SAIPLLSAIClkDivConfig+0x38>)
200007ce:	238c      	movs	r3, #140	; 0x8c
200007d0:	58d3      	ldr	r3, [r2, r3]
200007d2:	60fb      	str	r3, [r7, #12]

  /* Clear PLLI2SDIVQ[4:0] and PLLSAIDIVQ[4:0] bits */
  tmpreg &= ~(RCC_DCKCFGR_PLLSAIDIVQ);
200007d4:	68fb      	ldr	r3, [r7, #12]
200007d6:	4a09      	ldr	r2, [pc, #36]	; (200007fc <RCC_SAIPLLSAIClkDivConfig+0x3c>)
200007d8:	4013      	ands	r3, r2
200007da:	60fb      	str	r3, [r7, #12]

  /* Set PLLSAIDIVQ values */
  tmpreg |= ((RCC_PLLSAIDivQ - 1) << 8);
200007dc:	687b      	ldr	r3, [r7, #4]
200007de:	3b01      	subs	r3, #1
200007e0:	021b      	lsls	r3, r3, #8
200007e2:	68fa      	ldr	r2, [r7, #12]
200007e4:	4313      	orrs	r3, r2
200007e6:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->DCKCFGR = tmpreg;
200007e8:	4903      	ldr	r1, [pc, #12]	; (200007f8 <RCC_SAIPLLSAIClkDivConfig+0x38>)
200007ea:	228c      	movs	r2, #140	; 0x8c
200007ec:	68fb      	ldr	r3, [r7, #12]
200007ee:	508b      	str	r3, [r1, r2]
}
200007f0:	46c0      	nop			; (mov r8, r8)
200007f2:	46bd      	mov	sp, r7
200007f4:	b004      	add	sp, #16
200007f6:	bd80      	pop	{r7, pc}
200007f8:	40023800 	andmi	r3, r2, r0, lsl #16
200007fc:	ffffe0ff 			; <UNDEFINED> instruction: 0xffffe0ff

20000800 <RCC_LTDCCLKDivConfig>:
  *            @arg RCC_PLLSAIDivR_Div16: LTDC clock = f(PLLSAI_R)/16
  *            
  * @retval None
  */
void RCC_LTDCCLKDivConfig(uint32_t RCC_PLLSAIDivR)
{
20000800:	b580      	push	{r7, lr}
20000802:	b084      	sub	sp, #16
20000804:	af00      	add	r7, sp, #0
20000806:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
20000808:	2300      	movs	r3, #0
2000080a:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_PLLSAI_DIVR_VALUE(RCC_PLLSAIDivR));
  
  tmpreg = RCC->DCKCFGR;
2000080c:	4a09      	ldr	r2, [pc, #36]	; (20000834 <RCC_LTDCCLKDivConfig+0x34>)
2000080e:	238c      	movs	r3, #140	; 0x8c
20000810:	58d3      	ldr	r3, [r2, r3]
20000812:	60fb      	str	r3, [r7, #12]

  /* Clear PLLSAIDIVR[2:0] bits */
  tmpreg &= ~RCC_DCKCFGR_PLLSAIDIVR;
20000814:	68fb      	ldr	r3, [r7, #12]
20000816:	4a08      	ldr	r2, [pc, #32]	; (20000838 <RCC_LTDCCLKDivConfig+0x38>)
20000818:	4013      	ands	r3, r2
2000081a:	60fb      	str	r3, [r7, #12]

  /* Set PLLSAIDIVR values */
  tmpreg |= RCC_PLLSAIDivR;
2000081c:	68fa      	ldr	r2, [r7, #12]
2000081e:	687b      	ldr	r3, [r7, #4]
20000820:	4313      	orrs	r3, r2
20000822:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->DCKCFGR = tmpreg;
20000824:	4903      	ldr	r1, [pc, #12]	; (20000834 <RCC_LTDCCLKDivConfig+0x34>)
20000826:	228c      	movs	r2, #140	; 0x8c
20000828:	68fb      	ldr	r3, [r7, #12]
2000082a:	508b      	str	r3, [r1, r2]
}
2000082c:	46c0      	nop			; (mov r8, r8)
2000082e:	46bd      	mov	sp, r7
20000830:	b004      	add	sp, #16
20000832:	bd80      	pop	{r7, pc}
20000834:	40023800 	andmi	r3, r2, r0, lsl #16
20000838:	fffcffff 			; <UNDEFINED> instruction: 0xfffcffff

2000083c <RCC_TIMCLKPresConfig>:
  *                 else it is equal to [(HPRE * PPREx) / 4] if PPREx is corresponding 
  *                 to division by 8 or more.
  * @retval None
  */
void RCC_TIMCLKPresConfig(uint32_t RCC_TIMCLKPrescaler)
{
2000083c:	b580      	push	{r7, lr}
2000083e:	b082      	sub	sp, #8
20000840:	af00      	add	r7, sp, #0
20000842:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_TIMCLK_PRESCALER(RCC_TIMCLKPrescaler));

  *(__IO uint32_t *) DCKCFGR_TIMPRE_BB = RCC_TIMCLKPrescaler;
20000844:	4b03      	ldr	r3, [pc, #12]	; (20000854 <RCC_TIMCLKPresConfig+0x18>)
20000846:	687a      	ldr	r2, [r7, #4]
20000848:	601a      	str	r2, [r3, #0]
}
2000084a:	46c0      	nop			; (mov r8, r8)
2000084c:	46bd      	mov	sp, r7
2000084e:	b002      	add	sp, #8
20000850:	bd80      	pop	{r7, pc}
20000852:	46c0      	nop			; (mov r8, r8)
20000854:	424711e0 	submi	r1, r7, #224, 2	; 0x38

20000858 <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
20000858:	b580      	push	{r7, lr}
2000085a:	b082      	sub	sp, #8
2000085c:	af00      	add	r7, sp, #0
2000085e:	6078      	str	r0, [r7, #4]
20000860:	000a      	movs	r2, r1
20000862:	1cfb      	adds	r3, r7, #3
20000864:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
20000866:	1cfb      	adds	r3, r7, #3
20000868:	781b      	ldrb	r3, [r3, #0]
2000086a:	2b00      	cmp	r3, #0
2000086c:	d006      	beq.n	2000087c <RCC_AHB1PeriphClockCmd+0x24>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
2000086e:	4b09      	ldr	r3, [pc, #36]	; (20000894 <RCC_AHB1PeriphClockCmd+0x3c>)
20000870:	6b19      	ldr	r1, [r3, #48]	; 0x30
20000872:	4b08      	ldr	r3, [pc, #32]	; (20000894 <RCC_AHB1PeriphClockCmd+0x3c>)
20000874:	687a      	ldr	r2, [r7, #4]
20000876:	430a      	orrs	r2, r1
20000878:	631a      	str	r2, [r3, #48]	; 0x30
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
  }
}
2000087a:	e006      	b.n	2000088a <RCC_AHB1PeriphClockCmd+0x32>
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
2000087c:	4b05      	ldr	r3, [pc, #20]	; (20000894 <RCC_AHB1PeriphClockCmd+0x3c>)
2000087e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
20000880:	687b      	ldr	r3, [r7, #4]
20000882:	43d9      	mvns	r1, r3
20000884:	4b03      	ldr	r3, [pc, #12]	; (20000894 <RCC_AHB1PeriphClockCmd+0x3c>)
20000886:	400a      	ands	r2, r1
20000888:	631a      	str	r2, [r3, #48]	; 0x30
}
2000088a:	46c0      	nop			; (mov r8, r8)
2000088c:	46bd      	mov	sp, r7
2000088e:	b002      	add	sp, #8
20000890:	bd80      	pop	{r7, pc}
20000892:	46c0      	nop			; (mov r8, r8)
20000894:	40023800 	andmi	r3, r2, r0, lsl #16

20000898 <RCC_AHB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB2PeriphClockCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
{
20000898:	b580      	push	{r7, lr}
2000089a:	b082      	sub	sp, #8
2000089c:	af00      	add	r7, sp, #0
2000089e:	6078      	str	r0, [r7, #4]
200008a0:	000a      	movs	r2, r1
200008a2:	1cfb      	adds	r3, r7, #3
200008a4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
200008a6:	1cfb      	adds	r3, r7, #3
200008a8:	781b      	ldrb	r3, [r3, #0]
200008aa:	2b00      	cmp	r3, #0
200008ac:	d006      	beq.n	200008bc <RCC_AHB2PeriphClockCmd+0x24>
  {
    RCC->AHB2ENR |= RCC_AHB2Periph;
200008ae:	4b09      	ldr	r3, [pc, #36]	; (200008d4 <RCC_AHB2PeriphClockCmd+0x3c>)
200008b0:	6b59      	ldr	r1, [r3, #52]	; 0x34
200008b2:	4b08      	ldr	r3, [pc, #32]	; (200008d4 <RCC_AHB2PeriphClockCmd+0x3c>)
200008b4:	687a      	ldr	r2, [r7, #4]
200008b6:	430a      	orrs	r2, r1
200008b8:	635a      	str	r2, [r3, #52]	; 0x34
  }
  else
  {
    RCC->AHB2ENR &= ~RCC_AHB2Periph;
  }
}
200008ba:	e006      	b.n	200008ca <RCC_AHB2PeriphClockCmd+0x32>
    RCC->AHB2ENR &= ~RCC_AHB2Periph;
200008bc:	4b05      	ldr	r3, [pc, #20]	; (200008d4 <RCC_AHB2PeriphClockCmd+0x3c>)
200008be:	6b5a      	ldr	r2, [r3, #52]	; 0x34
200008c0:	687b      	ldr	r3, [r7, #4]
200008c2:	43d9      	mvns	r1, r3
200008c4:	4b03      	ldr	r3, [pc, #12]	; (200008d4 <RCC_AHB2PeriphClockCmd+0x3c>)
200008c6:	400a      	ands	r2, r1
200008c8:	635a      	str	r2, [r3, #52]	; 0x34
}
200008ca:	46c0      	nop			; (mov r8, r8)
200008cc:	46bd      	mov	sp, r7
200008ce:	b002      	add	sp, #8
200008d0:	bd80      	pop	{r7, pc}
200008d2:	46c0      	nop			; (mov r8, r8)
200008d4:	40023800 	andmi	r3, r2, r0, lsl #16

200008d8 <RCC_AHB3PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB3PeriphClockCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
{
200008d8:	b580      	push	{r7, lr}
200008da:	b082      	sub	sp, #8
200008dc:	af00      	add	r7, sp, #0
200008de:	6078      	str	r0, [r7, #4]
200008e0:	000a      	movs	r2, r1
200008e2:	1cfb      	adds	r3, r7, #3
200008e4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
200008e6:	1cfb      	adds	r3, r7, #3
200008e8:	781b      	ldrb	r3, [r3, #0]
200008ea:	2b00      	cmp	r3, #0
200008ec:	d006      	beq.n	200008fc <RCC_AHB3PeriphClockCmd+0x24>
  {
    RCC->AHB3ENR |= RCC_AHB3Periph;
200008ee:	4b09      	ldr	r3, [pc, #36]	; (20000914 <RCC_AHB3PeriphClockCmd+0x3c>)
200008f0:	6b99      	ldr	r1, [r3, #56]	; 0x38
200008f2:	4b08      	ldr	r3, [pc, #32]	; (20000914 <RCC_AHB3PeriphClockCmd+0x3c>)
200008f4:	687a      	ldr	r2, [r7, #4]
200008f6:	430a      	orrs	r2, r1
200008f8:	639a      	str	r2, [r3, #56]	; 0x38
  }
  else
  {
    RCC->AHB3ENR &= ~RCC_AHB3Periph;
  }
}
200008fa:	e006      	b.n	2000090a <RCC_AHB3PeriphClockCmd+0x32>
    RCC->AHB3ENR &= ~RCC_AHB3Periph;
200008fc:	4b05      	ldr	r3, [pc, #20]	; (20000914 <RCC_AHB3PeriphClockCmd+0x3c>)
200008fe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
20000900:	687b      	ldr	r3, [r7, #4]
20000902:	43d9      	mvns	r1, r3
20000904:	4b03      	ldr	r3, [pc, #12]	; (20000914 <RCC_AHB3PeriphClockCmd+0x3c>)
20000906:	400a      	ands	r2, r1
20000908:	639a      	str	r2, [r3, #56]	; 0x38
}
2000090a:	46c0      	nop			; (mov r8, r8)
2000090c:	46bd      	mov	sp, r7
2000090e:	b002      	add	sp, #8
20000910:	bd80      	pop	{r7, pc}
20000912:	46c0      	nop			; (mov r8, r8)
20000914:	40023800 	andmi	r3, r2, r0, lsl #16

20000918 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
20000918:	b580      	push	{r7, lr}
2000091a:	b082      	sub	sp, #8
2000091c:	af00      	add	r7, sp, #0
2000091e:	6078      	str	r0, [r7, #4]
20000920:	000a      	movs	r2, r1
20000922:	1cfb      	adds	r3, r7, #3
20000924:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
20000926:	1cfb      	adds	r3, r7, #3
20000928:	781b      	ldrb	r3, [r3, #0]
2000092a:	2b00      	cmp	r3, #0
2000092c:	d006      	beq.n	2000093c <RCC_APB1PeriphClockCmd+0x24>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
2000092e:	4b09      	ldr	r3, [pc, #36]	; (20000954 <RCC_APB1PeriphClockCmd+0x3c>)
20000930:	6c19      	ldr	r1, [r3, #64]	; 0x40
20000932:	4b08      	ldr	r3, [pc, #32]	; (20000954 <RCC_APB1PeriphClockCmd+0x3c>)
20000934:	687a      	ldr	r2, [r7, #4]
20000936:	430a      	orrs	r2, r1
20000938:	641a      	str	r2, [r3, #64]	; 0x40
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
2000093a:	e006      	b.n	2000094a <RCC_APB1PeriphClockCmd+0x32>
    RCC->APB1ENR &= ~RCC_APB1Periph;
2000093c:	4b05      	ldr	r3, [pc, #20]	; (20000954 <RCC_APB1PeriphClockCmd+0x3c>)
2000093e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
20000940:	687b      	ldr	r3, [r7, #4]
20000942:	43d9      	mvns	r1, r3
20000944:	4b03      	ldr	r3, [pc, #12]	; (20000954 <RCC_APB1PeriphClockCmd+0x3c>)
20000946:	400a      	ands	r2, r1
20000948:	641a      	str	r2, [r3, #64]	; 0x40
}
2000094a:	46c0      	nop			; (mov r8, r8)
2000094c:	46bd      	mov	sp, r7
2000094e:	b002      	add	sp, #8
20000950:	bd80      	pop	{r7, pc}
20000952:	46c0      	nop			; (mov r8, r8)
20000954:	40023800 	andmi	r3, r2, r0, lsl #16

20000958 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
20000958:	b580      	push	{r7, lr}
2000095a:	b082      	sub	sp, #8
2000095c:	af00      	add	r7, sp, #0
2000095e:	6078      	str	r0, [r7, #4]
20000960:	000a      	movs	r2, r1
20000962:	1cfb      	adds	r3, r7, #3
20000964:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
20000966:	1cfb      	adds	r3, r7, #3
20000968:	781b      	ldrb	r3, [r3, #0]
2000096a:	2b00      	cmp	r3, #0
2000096c:	d006      	beq.n	2000097c <RCC_APB2PeriphClockCmd+0x24>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
2000096e:	4b09      	ldr	r3, [pc, #36]	; (20000994 <RCC_APB2PeriphClockCmd+0x3c>)
20000970:	6c59      	ldr	r1, [r3, #68]	; 0x44
20000972:	4b08      	ldr	r3, [pc, #32]	; (20000994 <RCC_APB2PeriphClockCmd+0x3c>)
20000974:	687a      	ldr	r2, [r7, #4]
20000976:	430a      	orrs	r2, r1
20000978:	645a      	str	r2, [r3, #68]	; 0x44
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
2000097a:	e006      	b.n	2000098a <RCC_APB2PeriphClockCmd+0x32>
    RCC->APB2ENR &= ~RCC_APB2Periph;
2000097c:	4b05      	ldr	r3, [pc, #20]	; (20000994 <RCC_APB2PeriphClockCmd+0x3c>)
2000097e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
20000980:	687b      	ldr	r3, [r7, #4]
20000982:	43d9      	mvns	r1, r3
20000984:	4b03      	ldr	r3, [pc, #12]	; (20000994 <RCC_APB2PeriphClockCmd+0x3c>)
20000986:	400a      	ands	r2, r1
20000988:	645a      	str	r2, [r3, #68]	; 0x44
}
2000098a:	46c0      	nop			; (mov r8, r8)
2000098c:	46bd      	mov	sp, r7
2000098e:	b002      	add	sp, #8
20000990:	bd80      	pop	{r7, pc}
20000992:	46c0      	nop			; (mov r8, r8)
20000994:	40023800 	andmi	r3, r2, r0, lsl #16

20000998 <RCC_AHB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphResetCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
20000998:	b580      	push	{r7, lr}
2000099a:	b082      	sub	sp, #8
2000099c:	af00      	add	r7, sp, #0
2000099e:	6078      	str	r0, [r7, #4]
200009a0:	000a      	movs	r2, r1
200009a2:	1cfb      	adds	r3, r7, #3
200009a4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_RESET_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
200009a6:	1cfb      	adds	r3, r7, #3
200009a8:	781b      	ldrb	r3, [r3, #0]
200009aa:	2b00      	cmp	r3, #0
200009ac:	d006      	beq.n	200009bc <RCC_AHB1PeriphResetCmd+0x24>
  {
    RCC->AHB1RSTR |= RCC_AHB1Periph;
200009ae:	4b09      	ldr	r3, [pc, #36]	; (200009d4 <RCC_AHB1PeriphResetCmd+0x3c>)
200009b0:	6919      	ldr	r1, [r3, #16]
200009b2:	4b08      	ldr	r3, [pc, #32]	; (200009d4 <RCC_AHB1PeriphResetCmd+0x3c>)
200009b4:	687a      	ldr	r2, [r7, #4]
200009b6:	430a      	orrs	r2, r1
200009b8:	611a      	str	r2, [r3, #16]
  }
  else
  {
    RCC->AHB1RSTR &= ~RCC_AHB1Periph;
  }
}
200009ba:	e006      	b.n	200009ca <RCC_AHB1PeriphResetCmd+0x32>
    RCC->AHB1RSTR &= ~RCC_AHB1Periph;
200009bc:	4b05      	ldr	r3, [pc, #20]	; (200009d4 <RCC_AHB1PeriphResetCmd+0x3c>)
200009be:	691a      	ldr	r2, [r3, #16]
200009c0:	687b      	ldr	r3, [r7, #4]
200009c2:	43d9      	mvns	r1, r3
200009c4:	4b03      	ldr	r3, [pc, #12]	; (200009d4 <RCC_AHB1PeriphResetCmd+0x3c>)
200009c6:	400a      	ands	r2, r1
200009c8:	611a      	str	r2, [r3, #16]
}
200009ca:	46c0      	nop			; (mov r8, r8)
200009cc:	46bd      	mov	sp, r7
200009ce:	b002      	add	sp, #8
200009d0:	bd80      	pop	{r7, pc}
200009d2:	46c0      	nop			; (mov r8, r8)
200009d4:	40023800 	andmi	r3, r2, r0, lsl #16

200009d8 <RCC_AHB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB2PeriphResetCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
{
200009d8:	b580      	push	{r7, lr}
200009da:	b082      	sub	sp, #8
200009dc:	af00      	add	r7, sp, #0
200009de:	6078      	str	r0, [r7, #4]
200009e0:	000a      	movs	r2, r1
200009e2:	1cfb      	adds	r3, r7, #3
200009e4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
200009e6:	1cfb      	adds	r3, r7, #3
200009e8:	781b      	ldrb	r3, [r3, #0]
200009ea:	2b00      	cmp	r3, #0
200009ec:	d006      	beq.n	200009fc <RCC_AHB2PeriphResetCmd+0x24>
  {
    RCC->AHB2RSTR |= RCC_AHB2Periph;
200009ee:	4b09      	ldr	r3, [pc, #36]	; (20000a14 <RCC_AHB2PeriphResetCmd+0x3c>)
200009f0:	6959      	ldr	r1, [r3, #20]
200009f2:	4b08      	ldr	r3, [pc, #32]	; (20000a14 <RCC_AHB2PeriphResetCmd+0x3c>)
200009f4:	687a      	ldr	r2, [r7, #4]
200009f6:	430a      	orrs	r2, r1
200009f8:	615a      	str	r2, [r3, #20]
  }
  else
  {
    RCC->AHB2RSTR &= ~RCC_AHB2Periph;
  }
}
200009fa:	e006      	b.n	20000a0a <RCC_AHB2PeriphResetCmd+0x32>
    RCC->AHB2RSTR &= ~RCC_AHB2Periph;
200009fc:	4b05      	ldr	r3, [pc, #20]	; (20000a14 <RCC_AHB2PeriphResetCmd+0x3c>)
200009fe:	695a      	ldr	r2, [r3, #20]
20000a00:	687b      	ldr	r3, [r7, #4]
20000a02:	43d9      	mvns	r1, r3
20000a04:	4b03      	ldr	r3, [pc, #12]	; (20000a14 <RCC_AHB2PeriphResetCmd+0x3c>)
20000a06:	400a      	ands	r2, r1
20000a08:	615a      	str	r2, [r3, #20]
}
20000a0a:	46c0      	nop			; (mov r8, r8)
20000a0c:	46bd      	mov	sp, r7
20000a0e:	b002      	add	sp, #8
20000a10:	bd80      	pop	{r7, pc}
20000a12:	46c0      	nop			; (mov r8, r8)
20000a14:	40023800 	andmi	r3, r2, r0, lsl #16

20000a18 <RCC_AHB3PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB3PeriphResetCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
{
20000a18:	b580      	push	{r7, lr}
20000a1a:	b082      	sub	sp, #8
20000a1c:	af00      	add	r7, sp, #0
20000a1e:	6078      	str	r0, [r7, #4]
20000a20:	000a      	movs	r2, r1
20000a22:	1cfb      	adds	r3, r7, #3
20000a24:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
20000a26:	1cfb      	adds	r3, r7, #3
20000a28:	781b      	ldrb	r3, [r3, #0]
20000a2a:	2b00      	cmp	r3, #0
20000a2c:	d006      	beq.n	20000a3c <RCC_AHB3PeriphResetCmd+0x24>
  {
    RCC->AHB3RSTR |= RCC_AHB3Periph;
20000a2e:	4b09      	ldr	r3, [pc, #36]	; (20000a54 <RCC_AHB3PeriphResetCmd+0x3c>)
20000a30:	6999      	ldr	r1, [r3, #24]
20000a32:	4b08      	ldr	r3, [pc, #32]	; (20000a54 <RCC_AHB3PeriphResetCmd+0x3c>)
20000a34:	687a      	ldr	r2, [r7, #4]
20000a36:	430a      	orrs	r2, r1
20000a38:	619a      	str	r2, [r3, #24]
  }
  else
  {
    RCC->AHB3RSTR &= ~RCC_AHB3Periph;
  }
}
20000a3a:	e006      	b.n	20000a4a <RCC_AHB3PeriphResetCmd+0x32>
    RCC->AHB3RSTR &= ~RCC_AHB3Periph;
20000a3c:	4b05      	ldr	r3, [pc, #20]	; (20000a54 <RCC_AHB3PeriphResetCmd+0x3c>)
20000a3e:	699a      	ldr	r2, [r3, #24]
20000a40:	687b      	ldr	r3, [r7, #4]
20000a42:	43d9      	mvns	r1, r3
20000a44:	4b03      	ldr	r3, [pc, #12]	; (20000a54 <RCC_AHB3PeriphResetCmd+0x3c>)
20000a46:	400a      	ands	r2, r1
20000a48:	619a      	str	r2, [r3, #24]
}
20000a4a:	46c0      	nop			; (mov r8, r8)
20000a4c:	46bd      	mov	sp, r7
20000a4e:	b002      	add	sp, #8
20000a50:	bd80      	pop	{r7, pc}
20000a52:	46c0      	nop			; (mov r8, r8)
20000a54:	40023800 	andmi	r3, r2, r0, lsl #16

20000a58 <RCC_APB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
20000a58:	b580      	push	{r7, lr}
20000a5a:	b082      	sub	sp, #8
20000a5c:	af00      	add	r7, sp, #0
20000a5e:	6078      	str	r0, [r7, #4]
20000a60:	000a      	movs	r2, r1
20000a62:	1cfb      	adds	r3, r7, #3
20000a64:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
20000a66:	1cfb      	adds	r3, r7, #3
20000a68:	781b      	ldrb	r3, [r3, #0]
20000a6a:	2b00      	cmp	r3, #0
20000a6c:	d006      	beq.n	20000a7c <RCC_APB1PeriphResetCmd+0x24>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
20000a6e:	4b09      	ldr	r3, [pc, #36]	; (20000a94 <RCC_APB1PeriphResetCmd+0x3c>)
20000a70:	6a19      	ldr	r1, [r3, #32]
20000a72:	4b08      	ldr	r3, [pc, #32]	; (20000a94 <RCC_APB1PeriphResetCmd+0x3c>)
20000a74:	687a      	ldr	r2, [r7, #4]
20000a76:	430a      	orrs	r2, r1
20000a78:	621a      	str	r2, [r3, #32]
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
  }
}
20000a7a:	e006      	b.n	20000a8a <RCC_APB1PeriphResetCmd+0x32>
    RCC->APB1RSTR &= ~RCC_APB1Periph;
20000a7c:	4b05      	ldr	r3, [pc, #20]	; (20000a94 <RCC_APB1PeriphResetCmd+0x3c>)
20000a7e:	6a1a      	ldr	r2, [r3, #32]
20000a80:	687b      	ldr	r3, [r7, #4]
20000a82:	43d9      	mvns	r1, r3
20000a84:	4b03      	ldr	r3, [pc, #12]	; (20000a94 <RCC_APB1PeriphResetCmd+0x3c>)
20000a86:	400a      	ands	r2, r1
20000a88:	621a      	str	r2, [r3, #32]
}
20000a8a:	46c0      	nop			; (mov r8, r8)
20000a8c:	46bd      	mov	sp, r7
20000a8e:	b002      	add	sp, #8
20000a90:	bd80      	pop	{r7, pc}
20000a92:	46c0      	nop			; (mov r8, r8)
20000a94:	40023800 	andmi	r3, r2, r0, lsl #16

20000a98 <RCC_APB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
20000a98:	b580      	push	{r7, lr}
20000a9a:	b082      	sub	sp, #8
20000a9c:	af00      	add	r7, sp, #0
20000a9e:	6078      	str	r0, [r7, #4]
20000aa0:	000a      	movs	r2, r1
20000aa2:	1cfb      	adds	r3, r7, #3
20000aa4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_RESET_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
20000aa6:	1cfb      	adds	r3, r7, #3
20000aa8:	781b      	ldrb	r3, [r3, #0]
20000aaa:	2b00      	cmp	r3, #0
20000aac:	d006      	beq.n	20000abc <RCC_APB2PeriphResetCmd+0x24>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
20000aae:	4b09      	ldr	r3, [pc, #36]	; (20000ad4 <RCC_APB2PeriphResetCmd+0x3c>)
20000ab0:	6a59      	ldr	r1, [r3, #36]	; 0x24
20000ab2:	4b08      	ldr	r3, [pc, #32]	; (20000ad4 <RCC_APB2PeriphResetCmd+0x3c>)
20000ab4:	687a      	ldr	r2, [r7, #4]
20000ab6:	430a      	orrs	r2, r1
20000ab8:	625a      	str	r2, [r3, #36]	; 0x24
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
  }
}
20000aba:	e006      	b.n	20000aca <RCC_APB2PeriphResetCmd+0x32>
    RCC->APB2RSTR &= ~RCC_APB2Periph;
20000abc:	4b05      	ldr	r3, [pc, #20]	; (20000ad4 <RCC_APB2PeriphResetCmd+0x3c>)
20000abe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
20000ac0:	687b      	ldr	r3, [r7, #4]
20000ac2:	43d9      	mvns	r1, r3
20000ac4:	4b03      	ldr	r3, [pc, #12]	; (20000ad4 <RCC_APB2PeriphResetCmd+0x3c>)
20000ac6:	400a      	ands	r2, r1
20000ac8:	625a      	str	r2, [r3, #36]	; 0x24
}
20000aca:	46c0      	nop			; (mov r8, r8)
20000acc:	46bd      	mov	sp, r7
20000ace:	b002      	add	sp, #8
20000ad0:	bd80      	pop	{r7, pc}
20000ad2:	46c0      	nop			; (mov r8, r8)
20000ad4:	40023800 	andmi	r3, r2, r0, lsl #16

20000ad8 <RCC_AHB1PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockLPModeCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
20000ad8:	b580      	push	{r7, lr}
20000ada:	b082      	sub	sp, #8
20000adc:	af00      	add	r7, sp, #0
20000ade:	6078      	str	r0, [r7, #4]
20000ae0:	000a      	movs	r2, r1
20000ae2:	1cfb      	adds	r3, r7, #3
20000ae4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_LPMODE_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
20000ae6:	1cfb      	adds	r3, r7, #3
20000ae8:	781b      	ldrb	r3, [r3, #0]
20000aea:	2b00      	cmp	r3, #0
20000aec:	d006      	beq.n	20000afc <RCC_AHB1PeriphClockLPModeCmd+0x24>
  {
    RCC->AHB1LPENR |= RCC_AHB1Periph;
20000aee:	4b09      	ldr	r3, [pc, #36]	; (20000b14 <RCC_AHB1PeriphClockLPModeCmd+0x3c>)
20000af0:	6d19      	ldr	r1, [r3, #80]	; 0x50
20000af2:	4b08      	ldr	r3, [pc, #32]	; (20000b14 <RCC_AHB1PeriphClockLPModeCmd+0x3c>)
20000af4:	687a      	ldr	r2, [r7, #4]
20000af6:	430a      	orrs	r2, r1
20000af8:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    RCC->AHB1LPENR &= ~RCC_AHB1Periph;
  }
}
20000afa:	e006      	b.n	20000b0a <RCC_AHB1PeriphClockLPModeCmd+0x32>
    RCC->AHB1LPENR &= ~RCC_AHB1Periph;
20000afc:	4b05      	ldr	r3, [pc, #20]	; (20000b14 <RCC_AHB1PeriphClockLPModeCmd+0x3c>)
20000afe:	6d1a      	ldr	r2, [r3, #80]	; 0x50
20000b00:	687b      	ldr	r3, [r7, #4]
20000b02:	43d9      	mvns	r1, r3
20000b04:	4b03      	ldr	r3, [pc, #12]	; (20000b14 <RCC_AHB1PeriphClockLPModeCmd+0x3c>)
20000b06:	400a      	ands	r2, r1
20000b08:	651a      	str	r2, [r3, #80]	; 0x50
}
20000b0a:	46c0      	nop			; (mov r8, r8)
20000b0c:	46bd      	mov	sp, r7
20000b0e:	b002      	add	sp, #8
20000b10:	bd80      	pop	{r7, pc}
20000b12:	46c0      	nop			; (mov r8, r8)
20000b14:	40023800 	andmi	r3, r2, r0, lsl #16

20000b18 <RCC_AHB2PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB2PeriphClockLPModeCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
{
20000b18:	b580      	push	{r7, lr}
20000b1a:	b082      	sub	sp, #8
20000b1c:	af00      	add	r7, sp, #0
20000b1e:	6078      	str	r0, [r7, #4]
20000b20:	000a      	movs	r2, r1
20000b22:	1cfb      	adds	r3, r7, #3
20000b24:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
20000b26:	1cfb      	adds	r3, r7, #3
20000b28:	781b      	ldrb	r3, [r3, #0]
20000b2a:	2b00      	cmp	r3, #0
20000b2c:	d006      	beq.n	20000b3c <RCC_AHB2PeriphClockLPModeCmd+0x24>
  {
    RCC->AHB2LPENR |= RCC_AHB2Periph;
20000b2e:	4b09      	ldr	r3, [pc, #36]	; (20000b54 <RCC_AHB2PeriphClockLPModeCmd+0x3c>)
20000b30:	6d59      	ldr	r1, [r3, #84]	; 0x54
20000b32:	4b08      	ldr	r3, [pc, #32]	; (20000b54 <RCC_AHB2PeriphClockLPModeCmd+0x3c>)
20000b34:	687a      	ldr	r2, [r7, #4]
20000b36:	430a      	orrs	r2, r1
20000b38:	655a      	str	r2, [r3, #84]	; 0x54
  }
  else
  {
    RCC->AHB2LPENR &= ~RCC_AHB2Periph;
  }
}
20000b3a:	e006      	b.n	20000b4a <RCC_AHB2PeriphClockLPModeCmd+0x32>
    RCC->AHB2LPENR &= ~RCC_AHB2Periph;
20000b3c:	4b05      	ldr	r3, [pc, #20]	; (20000b54 <RCC_AHB2PeriphClockLPModeCmd+0x3c>)
20000b3e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
20000b40:	687b      	ldr	r3, [r7, #4]
20000b42:	43d9      	mvns	r1, r3
20000b44:	4b03      	ldr	r3, [pc, #12]	; (20000b54 <RCC_AHB2PeriphClockLPModeCmd+0x3c>)
20000b46:	400a      	ands	r2, r1
20000b48:	655a      	str	r2, [r3, #84]	; 0x54
}
20000b4a:	46c0      	nop			; (mov r8, r8)
20000b4c:	46bd      	mov	sp, r7
20000b4e:	b002      	add	sp, #8
20000b50:	bd80      	pop	{r7, pc}
20000b52:	46c0      	nop			; (mov r8, r8)
20000b54:	40023800 	andmi	r3, r2, r0, lsl #16

20000b58 <RCC_AHB3PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB3PeriphClockLPModeCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
{
20000b58:	b580      	push	{r7, lr}
20000b5a:	b082      	sub	sp, #8
20000b5c:	af00      	add	r7, sp, #0
20000b5e:	6078      	str	r0, [r7, #4]
20000b60:	000a      	movs	r2, r1
20000b62:	1cfb      	adds	r3, r7, #3
20000b64:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
20000b66:	1cfb      	adds	r3, r7, #3
20000b68:	781b      	ldrb	r3, [r3, #0]
20000b6a:	2b00      	cmp	r3, #0
20000b6c:	d006      	beq.n	20000b7c <RCC_AHB3PeriphClockLPModeCmd+0x24>
  {
    RCC->AHB3LPENR |= RCC_AHB3Periph;
20000b6e:	4b09      	ldr	r3, [pc, #36]	; (20000b94 <RCC_AHB3PeriphClockLPModeCmd+0x3c>)
20000b70:	6d99      	ldr	r1, [r3, #88]	; 0x58
20000b72:	4b08      	ldr	r3, [pc, #32]	; (20000b94 <RCC_AHB3PeriphClockLPModeCmd+0x3c>)
20000b74:	687a      	ldr	r2, [r7, #4]
20000b76:	430a      	orrs	r2, r1
20000b78:	659a      	str	r2, [r3, #88]	; 0x58
  }
  else
  {
    RCC->AHB3LPENR &= ~RCC_AHB3Periph;
  }
}
20000b7a:	e006      	b.n	20000b8a <RCC_AHB3PeriphClockLPModeCmd+0x32>
    RCC->AHB3LPENR &= ~RCC_AHB3Periph;
20000b7c:	4b05      	ldr	r3, [pc, #20]	; (20000b94 <RCC_AHB3PeriphClockLPModeCmd+0x3c>)
20000b7e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
20000b80:	687b      	ldr	r3, [r7, #4]
20000b82:	43d9      	mvns	r1, r3
20000b84:	4b03      	ldr	r3, [pc, #12]	; (20000b94 <RCC_AHB3PeriphClockLPModeCmd+0x3c>)
20000b86:	400a      	ands	r2, r1
20000b88:	659a      	str	r2, [r3, #88]	; 0x58
}
20000b8a:	46c0      	nop			; (mov r8, r8)
20000b8c:	46bd      	mov	sp, r7
20000b8e:	b002      	add	sp, #8
20000b90:	bd80      	pop	{r7, pc}
20000b92:	46c0      	nop			; (mov r8, r8)
20000b94:	40023800 	andmi	r3, r2, r0, lsl #16

20000b98 <RCC_APB1PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockLPModeCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
20000b98:	b580      	push	{r7, lr}
20000b9a:	b082      	sub	sp, #8
20000b9c:	af00      	add	r7, sp, #0
20000b9e:	6078      	str	r0, [r7, #4]
20000ba0:	000a      	movs	r2, r1
20000ba2:	1cfb      	adds	r3, r7, #3
20000ba4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
20000ba6:	1cfb      	adds	r3, r7, #3
20000ba8:	781b      	ldrb	r3, [r3, #0]
20000baa:	2b00      	cmp	r3, #0
20000bac:	d006      	beq.n	20000bbc <RCC_APB1PeriphClockLPModeCmd+0x24>
  {
    RCC->APB1LPENR |= RCC_APB1Periph;
20000bae:	4b09      	ldr	r3, [pc, #36]	; (20000bd4 <RCC_APB1PeriphClockLPModeCmd+0x3c>)
20000bb0:	6e19      	ldr	r1, [r3, #96]	; 0x60
20000bb2:	4b08      	ldr	r3, [pc, #32]	; (20000bd4 <RCC_APB1PeriphClockLPModeCmd+0x3c>)
20000bb4:	687a      	ldr	r2, [r7, #4]
20000bb6:	430a      	orrs	r2, r1
20000bb8:	661a      	str	r2, [r3, #96]	; 0x60
  }
  else
  {
    RCC->APB1LPENR &= ~RCC_APB1Periph;
  }
}
20000bba:	e006      	b.n	20000bca <RCC_APB1PeriphClockLPModeCmd+0x32>
    RCC->APB1LPENR &= ~RCC_APB1Periph;
20000bbc:	4b05      	ldr	r3, [pc, #20]	; (20000bd4 <RCC_APB1PeriphClockLPModeCmd+0x3c>)
20000bbe:	6e1a      	ldr	r2, [r3, #96]	; 0x60
20000bc0:	687b      	ldr	r3, [r7, #4]
20000bc2:	43d9      	mvns	r1, r3
20000bc4:	4b03      	ldr	r3, [pc, #12]	; (20000bd4 <RCC_APB1PeriphClockLPModeCmd+0x3c>)
20000bc6:	400a      	ands	r2, r1
20000bc8:	661a      	str	r2, [r3, #96]	; 0x60
}
20000bca:	46c0      	nop			; (mov r8, r8)
20000bcc:	46bd      	mov	sp, r7
20000bce:	b002      	add	sp, #8
20000bd0:	bd80      	pop	{r7, pc}
20000bd2:	46c0      	nop			; (mov r8, r8)
20000bd4:	40023800 	andmi	r3, r2, r0, lsl #16

20000bd8 <RCC_APB2PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockLPModeCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
20000bd8:	b580      	push	{r7, lr}
20000bda:	b082      	sub	sp, #8
20000bdc:	af00      	add	r7, sp, #0
20000bde:	6078      	str	r0, [r7, #4]
20000be0:	000a      	movs	r2, r1
20000be2:	1cfb      	adds	r3, r7, #3
20000be4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
20000be6:	1cfb      	adds	r3, r7, #3
20000be8:	781b      	ldrb	r3, [r3, #0]
20000bea:	2b00      	cmp	r3, #0
20000bec:	d006      	beq.n	20000bfc <RCC_APB2PeriphClockLPModeCmd+0x24>
  {
    RCC->APB2LPENR |= RCC_APB2Periph;
20000bee:	4b09      	ldr	r3, [pc, #36]	; (20000c14 <RCC_APB2PeriphClockLPModeCmd+0x3c>)
20000bf0:	6e59      	ldr	r1, [r3, #100]	; 0x64
20000bf2:	4b08      	ldr	r3, [pc, #32]	; (20000c14 <RCC_APB2PeriphClockLPModeCmd+0x3c>)
20000bf4:	687a      	ldr	r2, [r7, #4]
20000bf6:	430a      	orrs	r2, r1
20000bf8:	665a      	str	r2, [r3, #100]	; 0x64
  }
  else
  {
    RCC->APB2LPENR &= ~RCC_APB2Periph;
  }
}
20000bfa:	e006      	b.n	20000c0a <RCC_APB2PeriphClockLPModeCmd+0x32>
    RCC->APB2LPENR &= ~RCC_APB2Periph;
20000bfc:	4b05      	ldr	r3, [pc, #20]	; (20000c14 <RCC_APB2PeriphClockLPModeCmd+0x3c>)
20000bfe:	6e5a      	ldr	r2, [r3, #100]	; 0x64
20000c00:	687b      	ldr	r3, [r7, #4]
20000c02:	43d9      	mvns	r1, r3
20000c04:	4b03      	ldr	r3, [pc, #12]	; (20000c14 <RCC_APB2PeriphClockLPModeCmd+0x3c>)
20000c06:	400a      	ands	r2, r1
20000c08:	665a      	str	r2, [r3, #100]	; 0x64
}
20000c0a:	46c0      	nop			; (mov r8, r8)
20000c0c:	46bd      	mov	sp, r7
20000c0e:	b002      	add	sp, #8
20000c10:	bd80      	pop	{r7, pc}
20000c12:	46c0      	nop			; (mov r8, r8)
20000c14:	40023800 	andmi	r3, r2, r0, lsl #16

20000c18 <RCC_LSEModeConfig>:
  *            @arg RCC_LSE_LOWPOWER_MODE:  LSE oscillator in low power mode.
  *            @arg RCC_LSE_HIGHDRIVE_MODE: LSE oscillator in High Drive mode.
  * @retval None
  */
void RCC_LSEModeConfig(uint8_t RCC_Mode)
{
20000c18:	b580      	push	{r7, lr}
20000c1a:	b082      	sub	sp, #8
20000c1c:	af00      	add	r7, sp, #0
20000c1e:	0002      	movs	r2, r0
20000c20:	1dfb      	adds	r3, r7, #7
20000c22:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_LSE_MODE(RCC_Mode));
  
  if(RCC_Mode == RCC_LSE_HIGHDRIVE_MODE)
20000c24:	1dfb      	adds	r3, r7, #7
20000c26:	781b      	ldrb	r3, [r3, #0]
20000c28:	2b01      	cmp	r3, #1
20000c2a:	d106      	bne.n	20000c3a <RCC_LSEModeConfig+0x22>
  {
    SET_BIT(RCC->BDCR, RCC_BDCR_LSEMOD);
20000c2c:	4b08      	ldr	r3, [pc, #32]	; (20000c50 <RCC_LSEModeConfig+0x38>)
20000c2e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
20000c30:	4b07      	ldr	r3, [pc, #28]	; (20000c50 <RCC_LSEModeConfig+0x38>)
20000c32:	2108      	movs	r1, #8
20000c34:	430a      	orrs	r2, r1
20000c36:	671a      	str	r2, [r3, #112]	; 0x70
  }
  else
  {
    CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEMOD);
  }
}
20000c38:	e005      	b.n	20000c46 <RCC_LSEModeConfig+0x2e>
    CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEMOD);
20000c3a:	4b05      	ldr	r3, [pc, #20]	; (20000c50 <RCC_LSEModeConfig+0x38>)
20000c3c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
20000c3e:	4b04      	ldr	r3, [pc, #16]	; (20000c50 <RCC_LSEModeConfig+0x38>)
20000c40:	2108      	movs	r1, #8
20000c42:	438a      	bics	r2, r1
20000c44:	671a      	str	r2, [r3, #112]	; 0x70
}
20000c46:	46c0      	nop			; (mov r8, r8)
20000c48:	46bd      	mov	sp, r7
20000c4a:	b002      	add	sp, #8
20000c4c:	bd80      	pop	{r7, pc}
20000c4e:	46c0      	nop			; (mov r8, r8)
20000c50:	40023800 	andmi	r3, r2, r0, lsl #16

20000c54 <RCC_ITConfig>:
  * @param  NewState: new state of the specified RCC interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_ITConfig(uint8_t RCC_IT, FunctionalState NewState)
{
20000c54:	b580      	push	{r7, lr}
20000c56:	b082      	sub	sp, #8
20000c58:	af00      	add	r7, sp, #0
20000c5a:	0002      	movs	r2, r0
20000c5c:	1dfb      	adds	r3, r7, #7
20000c5e:	701a      	strb	r2, [r3, #0]
20000c60:	1dbb      	adds	r3, r7, #6
20000c62:	1c0a      	adds	r2, r1, #0
20000c64:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_IT(RCC_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
20000c66:	1dbb      	adds	r3, r7, #6
20000c68:	781b      	ldrb	r3, [r3, #0]
20000c6a:	2b00      	cmp	r3, #0
20000c6c:	d009      	beq.n	20000c82 <RCC_ITConfig+0x2e>
  {
    /* Perform Byte access to RCC_CIR[14:8] bits to enable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS |= RCC_IT;
20000c6e:	4b0c      	ldr	r3, [pc, #48]	; (20000ca0 <RCC_ITConfig+0x4c>)
20000c70:	781b      	ldrb	r3, [r3, #0]
20000c72:	b2da      	uxtb	r2, r3
20000c74:	490a      	ldr	r1, [pc, #40]	; (20000ca0 <RCC_ITConfig+0x4c>)
20000c76:	1dfb      	adds	r3, r7, #7
20000c78:	781b      	ldrb	r3, [r3, #0]
20000c7a:	4313      	orrs	r3, r2
20000c7c:	b2db      	uxtb	r3, r3
20000c7e:	700b      	strb	r3, [r1, #0]
  else
  {
    /* Perform Byte access to RCC_CIR[14:8] bits to disable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS &= (uint8_t)~RCC_IT;
  }
}
20000c80:	e00a      	b.n	20000c98 <RCC_ITConfig+0x44>
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS &= (uint8_t)~RCC_IT;
20000c82:	4b07      	ldr	r3, [pc, #28]	; (20000ca0 <RCC_ITConfig+0x4c>)
20000c84:	781b      	ldrb	r3, [r3, #0]
20000c86:	b2db      	uxtb	r3, r3
20000c88:	1dfa      	adds	r2, r7, #7
20000c8a:	7812      	ldrb	r2, [r2, #0]
20000c8c:	43d2      	mvns	r2, r2
20000c8e:	b2d2      	uxtb	r2, r2
20000c90:	4903      	ldr	r1, [pc, #12]	; (20000ca0 <RCC_ITConfig+0x4c>)
20000c92:	4013      	ands	r3, r2
20000c94:	b2db      	uxtb	r3, r3
20000c96:	700b      	strb	r3, [r1, #0]
}
20000c98:	46c0      	nop			; (mov r8, r8)
20000c9a:	46bd      	mov	sp, r7
20000c9c:	b002      	add	sp, #8
20000c9e:	bd80      	pop	{r7, pc}
20000ca0:	4002380d 	andmi	r3, r2, sp, lsl #16

20000ca4 <RCC_GetFlagStatus>:
  *            @arg RCC_FLAG_WWDGRST: Window Watchdog reset
  *            @arg RCC_FLAG_LPWRRST: Low Power reset
  * @retval The new state of RCC_FLAG (SET or RESET).
  */
FlagStatus RCC_GetFlagStatus(uint8_t RCC_FLAG)
{
20000ca4:	b580      	push	{r7, lr}
20000ca6:	b086      	sub	sp, #24
20000ca8:	af00      	add	r7, sp, #0
20000caa:	0002      	movs	r2, r0
20000cac:	1dfb      	adds	r3, r7, #7
20000cae:	701a      	strb	r2, [r3, #0]
  uint32_t tmp = 0;
20000cb0:	2300      	movs	r3, #0
20000cb2:	60fb      	str	r3, [r7, #12]
  uint32_t statusreg = 0;
20000cb4:	2300      	movs	r3, #0
20000cb6:	617b      	str	r3, [r7, #20]
  FlagStatus bitstatus = RESET;
20000cb8:	2313      	movs	r3, #19
20000cba:	18fb      	adds	r3, r7, r3
20000cbc:	2200      	movs	r2, #0
20000cbe:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_FLAG(RCC_FLAG));

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
20000cc0:	1dfb      	adds	r3, r7, #7
20000cc2:	781b      	ldrb	r3, [r3, #0]
20000cc4:	095b      	lsrs	r3, r3, #5
20000cc6:	b2db      	uxtb	r3, r3
20000cc8:	60fb      	str	r3, [r7, #12]
  if (tmp == 1)               /* The flag to check is in CR register */
20000cca:	68fb      	ldr	r3, [r7, #12]
20000ccc:	2b01      	cmp	r3, #1
20000cce:	d103      	bne.n	20000cd8 <RCC_GetFlagStatus+0x34>
  {
    statusreg = RCC->CR;
20000cd0:	4b14      	ldr	r3, [pc, #80]	; (20000d24 <RCC_GetFlagStatus+0x80>)
20000cd2:	681b      	ldr	r3, [r3, #0]
20000cd4:	617b      	str	r3, [r7, #20]
20000cd6:	e009      	b.n	20000cec <RCC_GetFlagStatus+0x48>
  }
  else if (tmp == 2)          /* The flag to check is in BDCR register */
20000cd8:	68fb      	ldr	r3, [r7, #12]
20000cda:	2b02      	cmp	r3, #2
20000cdc:	d103      	bne.n	20000ce6 <RCC_GetFlagStatus+0x42>
  {
    statusreg = RCC->BDCR;
20000cde:	4b11      	ldr	r3, [pc, #68]	; (20000d24 <RCC_GetFlagStatus+0x80>)
20000ce0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
20000ce2:	617b      	str	r3, [r7, #20]
20000ce4:	e002      	b.n	20000cec <RCC_GetFlagStatus+0x48>
  }
  else                       /* The flag to check is in CSR register */
  {
    statusreg = RCC->CSR;
20000ce6:	4b0f      	ldr	r3, [pc, #60]	; (20000d24 <RCC_GetFlagStatus+0x80>)
20000ce8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
20000cea:	617b      	str	r3, [r7, #20]
  }

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_MASK;
20000cec:	1dfb      	adds	r3, r7, #7
20000cee:	781b      	ldrb	r3, [r3, #0]
20000cf0:	221f      	movs	r2, #31
20000cf2:	4013      	ands	r3, r2
20000cf4:	60fb      	str	r3, [r7, #12]
  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
20000cf6:	697a      	ldr	r2, [r7, #20]
20000cf8:	68fb      	ldr	r3, [r7, #12]
20000cfa:	40da      	lsrs	r2, r3
20000cfc:	0013      	movs	r3, r2
20000cfe:	2201      	movs	r2, #1
20000d00:	4013      	ands	r3, r2
20000d02:	d004      	beq.n	20000d0e <RCC_GetFlagStatus+0x6a>
  {
    bitstatus = SET;
20000d04:	2313      	movs	r3, #19
20000d06:	18fb      	adds	r3, r7, r3
20000d08:	2201      	movs	r2, #1
20000d0a:	701a      	strb	r2, [r3, #0]
20000d0c:	e003      	b.n	20000d16 <RCC_GetFlagStatus+0x72>
  }
  else
  {
    bitstatus = RESET;
20000d0e:	2313      	movs	r3, #19
20000d10:	18fb      	adds	r3, r7, r3
20000d12:	2200      	movs	r2, #0
20000d14:	701a      	strb	r2, [r3, #0]
  }
  /* Return the flag status */
  return bitstatus;
20000d16:	2313      	movs	r3, #19
20000d18:	18fb      	adds	r3, r7, r3
20000d1a:	781b      	ldrb	r3, [r3, #0]
}
20000d1c:	0018      	movs	r0, r3
20000d1e:	46bd      	mov	sp, r7
20000d20:	b006      	add	sp, #24
20000d22:	bd80      	pop	{r7, pc}
20000d24:	40023800 	andmi	r3, r2, r0, lsl #16

20000d28 <RCC_ClearFlag>:
  *         RCC_FLAG_IWDGRST, RCC_FLAG_WWDGRST, RCC_FLAG_LPWRRST
  * @param  None
  * @retval None
  */
void RCC_ClearFlag(void)
{
20000d28:	b580      	push	{r7, lr}
20000d2a:	af00      	add	r7, sp, #0
  /* Set RMVF bit to clear the reset flags */
  RCC->CSR |= RCC_CSR_RMVF;
20000d2c:	4b04      	ldr	r3, [pc, #16]	; (20000d40 <RCC_ClearFlag+0x18>)
20000d2e:	6f5a      	ldr	r2, [r3, #116]	; 0x74
20000d30:	4b03      	ldr	r3, [pc, #12]	; (20000d40 <RCC_ClearFlag+0x18>)
20000d32:	2180      	movs	r1, #128	; 0x80
20000d34:	0449      	lsls	r1, r1, #17
20000d36:	430a      	orrs	r2, r1
20000d38:	675a      	str	r2, [r3, #116]	; 0x74
}
20000d3a:	46c0      	nop			; (mov r8, r8)
20000d3c:	46bd      	mov	sp, r7
20000d3e:	bd80      	pop	{r7, pc}
20000d40:	40023800 	andmi	r3, r2, r0, lsl #16

20000d44 <RCC_GetITStatus>:
  *            @arg RCC_IT_PLLSAIRDY: PLLSAI clock ready interrupt (only for STM32F42xxx/43xxx/446xx/469xx/479xx devices)
  *            @arg RCC_IT_CSS: Clock Security System interrupt
  * @retval The new state of RCC_IT (SET or RESET).
  */
ITStatus RCC_GetITStatus(uint8_t RCC_IT)
{
20000d44:	b580      	push	{r7, lr}
20000d46:	b084      	sub	sp, #16
20000d48:	af00      	add	r7, sp, #0
20000d4a:	0002      	movs	r2, r0
20000d4c:	1dfb      	adds	r3, r7, #7
20000d4e:	701a      	strb	r2, [r3, #0]
  ITStatus bitstatus = RESET;
20000d50:	230f      	movs	r3, #15
20000d52:	18fb      	adds	r3, r7, r3
20000d54:	2200      	movs	r2, #0
20000d56:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_GET_IT(RCC_IT));

  /* Check the status of the specified RCC interrupt */
  if ((RCC->CIR & RCC_IT) != (uint32_t)RESET)
20000d58:	4b0a      	ldr	r3, [pc, #40]	; (20000d84 <RCC_GetITStatus+0x40>)
20000d5a:	68db      	ldr	r3, [r3, #12]
20000d5c:	1dfa      	adds	r2, r7, #7
20000d5e:	7812      	ldrb	r2, [r2, #0]
20000d60:	4013      	ands	r3, r2
20000d62:	d004      	beq.n	20000d6e <RCC_GetITStatus+0x2a>
  {
    bitstatus = SET;
20000d64:	230f      	movs	r3, #15
20000d66:	18fb      	adds	r3, r7, r3
20000d68:	2201      	movs	r2, #1
20000d6a:	701a      	strb	r2, [r3, #0]
20000d6c:	e003      	b.n	20000d76 <RCC_GetITStatus+0x32>
  }
  else
  {
    bitstatus = RESET;
20000d6e:	230f      	movs	r3, #15
20000d70:	18fb      	adds	r3, r7, r3
20000d72:	2200      	movs	r2, #0
20000d74:	701a      	strb	r2, [r3, #0]
  }
  /* Return the RCC_IT status */
  return  bitstatus;
20000d76:	230f      	movs	r3, #15
20000d78:	18fb      	adds	r3, r7, r3
20000d7a:	781b      	ldrb	r3, [r3, #0]
}
20000d7c:	0018      	movs	r0, r3
20000d7e:	46bd      	mov	sp, r7
20000d80:	b004      	add	sp, #16
20000d82:	bd80      	pop	{r7, pc}
20000d84:	40023800 	andmi	r3, r2, r0, lsl #16

20000d88 <RCC_ClearITPendingBit>:
  *            @arg RCC_IT_PLLSAIRDY: PLLSAI ready interrupt (only for STM32F42xxx/43xxx/446xx/469xx/479xx devices) 
  *            @arg RCC_IT_CSS: Clock Security System interrupt
  * @retval None
  */
void RCC_ClearITPendingBit(uint8_t RCC_IT)
{
20000d88:	b580      	push	{r7, lr}
20000d8a:	b082      	sub	sp, #8
20000d8c:	af00      	add	r7, sp, #0
20000d8e:	0002      	movs	r2, r0
20000d90:	1dfb      	adds	r3, r7, #7
20000d92:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_CLEAR_IT(RCC_IT));

  /* Perform Byte access to RCC_CIR[23:16] bits to clear the selected interrupt
     pending bits */
  *(__IO uint8_t *) CIR_BYTE3_ADDRESS = RCC_IT;
20000d94:	4a03      	ldr	r2, [pc, #12]	; (20000da4 <RCC_ClearITPendingBit+0x1c>)
20000d96:	1dfb      	adds	r3, r7, #7
20000d98:	781b      	ldrb	r3, [r3, #0]
20000d9a:	7013      	strb	r3, [r2, #0]
}
20000d9c:	46c0      	nop			; (mov r8, r8)
20000d9e:	46bd      	mov	sp, r7
20000da0:	b002      	add	sp, #8
20000da2:	bd80      	pop	{r7, pc}
20000da4:	4002380e 	andmi	r3, r2, lr, lsl #16

20000da8 <Port_init>:
		GPIO_Pin_4, GPIO_Pin_5, GPIO_Pin_6, GPIO_Pin_7,
		GPIO_Pin_8, GPIO_Pin_9, GPIO_Pin_10, GPIO_Pin_11,
		GPIO_Pin_12, GPIO_Pin_13, GPIO_Pin_14, GPIO_Pin_15};

void Port_init()
{
20000da8:	b580      	push	{r7, lr}
20000daa:	b082      	sub	sp, #8
20000dac:	af00      	add	r7, sp, #0
	/*  Function used to set the GPIO configuration to the default reset state ****/
	GPIO_InitTypeDef init;

	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
20000dae:	2101      	movs	r1, #1
20000db0:	2001      	movs	r0, #1
20000db2:	f7ff fd51 	bl	20000858 <RCC_AHB1PeriphClockCmd>
	GPIO_StructInit(&init);
20000db6:	003b      	movs	r3, r7
20000db8:	0018      	movs	r0, r3
20000dba:	f000 f9b3 	bl	20001124 <GPIO_StructInit>
	init.GPIO_Pin = GPIO_Pin_1 | GPIO_Pin_3 | GPIO_Pin_5 | GPIO_Pin_7;
20000dbe:	003b      	movs	r3, r7
20000dc0:	22aa      	movs	r2, #170	; 0xaa
20000dc2:	601a      	str	r2, [r3, #0]
	init.GPIO_Mode = GPIO_Mode_OUT;
20000dc4:	003b      	movs	r3, r7
20000dc6:	2201      	movs	r2, #1
20000dc8:	711a      	strb	r2, [r3, #4]
	init.GPIO_OType = GPIO_OType_PP;
20000dca:	003b      	movs	r3, r7
20000dcc:	2200      	movs	r2, #0
20000dce:	719a      	strb	r2, [r3, #6]
	GPIO_Init(GPIOA, &init);
20000dd0:	003b      	movs	r3, r7
20000dd2:	4a0e      	ldr	r2, [pc, #56]	; (20000e0c <Port_init+0x64>)
20000dd4:	0019      	movs	r1, r3
20000dd6:	0010      	movs	r0, r2
20000dd8:	f000 f918 	bl	2000100c <GPIO_Init>

	//konfigurerar inport
	GPIO_StructInit(&init);
20000ddc:	003b      	movs	r3, r7
20000dde:	0018      	movs	r0, r3
20000de0:	f000 f9a0 	bl	20001124 <GPIO_StructInit>
	init.GPIO_Pin = GPIO_Pin_0 | GPIO_Pin_2 | GPIO_Pin_4 | GPIO_Pin_6;
20000de4:	003b      	movs	r3, r7
20000de6:	2255      	movs	r2, #85	; 0x55
20000de8:	601a      	str	r2, [r3, #0]
	init.GPIO_Mode = GPIO_Mode_IN;
20000dea:	003b      	movs	r3, r7
20000dec:	2200      	movs	r2, #0
20000dee:	711a      	strb	r2, [r3, #4]
	init.GPIO_PuPd = GPIO_PuPd_UP;
20000df0:	003b      	movs	r3, r7
20000df2:	2201      	movs	r2, #1
20000df4:	71da      	strb	r2, [r3, #7]
	GPIO_Init(GPIOA, &init);
20000df6:	003b      	movs	r3, r7
20000df8:	4a04      	ldr	r2, [pc, #16]	; (20000e0c <Port_init+0x64>)
20000dfa:	0019      	movs	r1, r3
20000dfc:	0010      	movs	r0, r2
20000dfe:	f000 f905 	bl	2000100c <GPIO_Init>
}
20000e02:	46c0      	nop			; (mov r8, r8)
20000e04:	46bd      	mov	sp, r7
20000e06:	b002      	add	sp, #8
20000e08:	bd80      	pop	{r7, pc}
20000e0a:	46c0      	nop			; (mov r8, r8)
20000e0c:	40020000 	andmi	r0, r2, r0

20000e10 <SysTick_Handler>:

volatile uint32_t msTicks = 0;                              /* Variable to store millisecond ticks */
  
void SysTick_Handler(void)  {                               /* SysTick interrupt Handler. */
20000e10:	b580      	push	{r7, lr}
20000e12:	af00      	add	r7, sp, #0
	msTicks++;
20000e14:	4b11      	ldr	r3, [pc, #68]	; (20000e5c <SysTick_Handler+0x4c>)
20000e16:	681b      	ldr	r3, [r3, #0]
20000e18:	1c5a      	adds	r2, r3, #1
20000e1a:	4b10      	ldr	r3, [pc, #64]	; (20000e5c <SysTick_Handler+0x4c>)
20000e1c:	601a      	str	r2, [r3, #0]
	if (msTicks % 1000 == 0) {
20000e1e:	4b0f      	ldr	r3, [pc, #60]	; (20000e5c <SysTick_Handler+0x4c>)
20000e20:	681a      	ldr	r2, [r3, #0]
20000e22:	23fa      	movs	r3, #250	; 0xfa
20000e24:	0099      	lsls	r1, r3, #2
20000e26:	0010      	movs	r0, r2
20000e28:	f000 fb46 	bl	200014b8 <__aeabi_uidivmod>
20000e2c:	1e0b      	subs	r3, r1, #0
20000e2e:	d104      	bne.n	20000e3a <SysTick_Handler+0x2a>
		GPIO_SetBits(GPIOA,GPIO_Pin_1);
20000e30:	4b0b      	ldr	r3, [pc, #44]	; (20000e60 <SysTick_Handler+0x50>)
20000e32:	2102      	movs	r1, #2
20000e34:	0018      	movs	r0, r3
20000e36:	f000 fa0a 	bl	2000124e <GPIO_SetBits>
	}
	if (msTicks % 2000 == 0) {
20000e3a:	4b08      	ldr	r3, [pc, #32]	; (20000e5c <SysTick_Handler+0x4c>)
20000e3c:	681a      	ldr	r2, [r3, #0]
20000e3e:	23fa      	movs	r3, #250	; 0xfa
20000e40:	00d9      	lsls	r1, r3, #3
20000e42:	0010      	movs	r0, r2
20000e44:	f000 fb38 	bl	200014b8 <__aeabi_uidivmod>
20000e48:	1e0b      	subs	r3, r1, #0
20000e4a:	d104      	bne.n	20000e56 <SysTick_Handler+0x46>
		GPIO_ResetBits(GPIOA,GPIO_Pin_1);
20000e4c:	4b04      	ldr	r3, [pc, #16]	; (20000e60 <SysTick_Handler+0x50>)
20000e4e:	2102      	movs	r1, #2
20000e50:	0018      	movs	r0, r3
20000e52:	f000 fa0b 	bl	2000126c <GPIO_ResetBits>
	}
}
20000e56:	46c0      	nop			; (mov r8, r8)
20000e58:	46bd      	mov	sp, r7
20000e5a:	bd80      	pop	{r7, pc}
20000e5c:	200014c4 	andcs	r1, r0, r4, asr #9
20000e60:	40020000 	andmi	r0, r2, r0

20000e64 <main>:

void main(void)
{
20000e64:	b580      	push	{r7, lr}
20000e66:	b082      	sub	sp, #8
20000e68:	af00      	add	r7, sp, #0
	//app_init();
	Port_init();
20000e6a:	f7ff ff9d 	bl	20000da8 <Port_init>
	*((void (**)(void) ) 0x2001C03C ) = SysTick_Handler;
20000e6e:	4b07      	ldr	r3, [pc, #28]	; (20000e8c <main+0x28>)
20000e70:	4a07      	ldr	r2, [pc, #28]	; (20000e90 <main+0x2c>)
20000e72:	601a      	str	r2, [r3, #0]
	uint32_t returnCode;
	GPIO_SetBits(GPIOA,GPIO_Pin_1);
20000e74:	4b07      	ldr	r3, [pc, #28]	; (20000e94 <main+0x30>)
20000e76:	2102      	movs	r1, #2
20000e78:	0018      	movs	r0, r3
20000e7a:	f000 f9e8 	bl	2000124e <GPIO_SetBits>
  
  returnCode = SysTick_Config(168000000/1000);      /* Configure SysTick to generate an interrupt every millisecond */
20000e7e:	4b06      	ldr	r3, [pc, #24]	; (20000e98 <main+0x34>)
20000e80:	0018      	movs	r0, r3
20000e82:	f7ff f8f5 	bl	20000070 <SysTick_Config>
20000e86:	0003      	movs	r3, r0
20000e88:	607b      	str	r3, [r7, #4]
  
  if (returnCode != 0)  {                                   /* Check return code for errors */
    // Error Handling 
  }
  
  while(1) {
20000e8a:	e7fe      	b.n	20000e8a <main+0x26>
20000e8c:	2001c03c 	andcs	ip, r1, ip, lsr r0
20000e90:	20000e11 	andcs	r0, r0, r1, lsl lr
20000e94:	40020000 	andmi	r0, r2, r0
20000e98:	00029040 	andeq	r9, r2, r0, asr #32

20000e9c <GPIO_DeInit>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F42xxx/43xxx devices.
  *                      x can be (A, B, C, D and H) to select the GPIO peripheral for STM32F401xx devices.  
  * @retval None
  */
void GPIO_DeInit(GPIO_TypeDef* GPIOx)
{
20000e9c:	b580      	push	{r7, lr}
20000e9e:	b082      	sub	sp, #8
20000ea0:	af00      	add	r7, sp, #0
20000ea2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  if (GPIOx == GPIOA)
20000ea4:	687b      	ldr	r3, [r7, #4]
20000ea6:	4a4e      	ldr	r2, [pc, #312]	; (20000fe0 <GPIO_DeInit+0x144>)
20000ea8:	4293      	cmp	r3, r2
20000eaa:	d108      	bne.n	20000ebe <GPIO_DeInit+0x22>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, ENABLE);
20000eac:	2101      	movs	r1, #1
20000eae:	2001      	movs	r0, #1
20000eb0:	f7ff fd72 	bl	20000998 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, DISABLE);
20000eb4:	2100      	movs	r1, #0
20000eb6:	2001      	movs	r0, #1
20000eb8:	f7ff fd6e 	bl	20000998 <RCC_AHB1PeriphResetCmd>
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, ENABLE);
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, DISABLE);
    }
  }
}
20000ebc:	e08c      	b.n	20000fd8 <GPIO_DeInit+0x13c>
  else if (GPIOx == GPIOB)
20000ebe:	687b      	ldr	r3, [r7, #4]
20000ec0:	4a48      	ldr	r2, [pc, #288]	; (20000fe4 <GPIO_DeInit+0x148>)
20000ec2:	4293      	cmp	r3, r2
20000ec4:	d108      	bne.n	20000ed8 <GPIO_DeInit+0x3c>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, ENABLE);
20000ec6:	2101      	movs	r1, #1
20000ec8:	2002      	movs	r0, #2
20000eca:	f7ff fd65 	bl	20000998 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, DISABLE);
20000ece:	2100      	movs	r1, #0
20000ed0:	2002      	movs	r0, #2
20000ed2:	f7ff fd61 	bl	20000998 <RCC_AHB1PeriphResetCmd>
}
20000ed6:	e07f      	b.n	20000fd8 <GPIO_DeInit+0x13c>
  else if (GPIOx == GPIOC)
20000ed8:	687b      	ldr	r3, [r7, #4]
20000eda:	4a43      	ldr	r2, [pc, #268]	; (20000fe8 <GPIO_DeInit+0x14c>)
20000edc:	4293      	cmp	r3, r2
20000ede:	d108      	bne.n	20000ef2 <GPIO_DeInit+0x56>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, ENABLE);
20000ee0:	2101      	movs	r1, #1
20000ee2:	2004      	movs	r0, #4
20000ee4:	f7ff fd58 	bl	20000998 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, DISABLE);
20000ee8:	2100      	movs	r1, #0
20000eea:	2004      	movs	r0, #4
20000eec:	f7ff fd54 	bl	20000998 <RCC_AHB1PeriphResetCmd>
}
20000ef0:	e072      	b.n	20000fd8 <GPIO_DeInit+0x13c>
  else if (GPIOx == GPIOD)
20000ef2:	687b      	ldr	r3, [r7, #4]
20000ef4:	4a3d      	ldr	r2, [pc, #244]	; (20000fec <GPIO_DeInit+0x150>)
20000ef6:	4293      	cmp	r3, r2
20000ef8:	d108      	bne.n	20000f0c <GPIO_DeInit+0x70>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, ENABLE);
20000efa:	2101      	movs	r1, #1
20000efc:	2008      	movs	r0, #8
20000efe:	f7ff fd4b 	bl	20000998 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, DISABLE);
20000f02:	2100      	movs	r1, #0
20000f04:	2008      	movs	r0, #8
20000f06:	f7ff fd47 	bl	20000998 <RCC_AHB1PeriphResetCmd>
}
20000f0a:	e065      	b.n	20000fd8 <GPIO_DeInit+0x13c>
  else if (GPIOx == GPIOE)
20000f0c:	687b      	ldr	r3, [r7, #4]
20000f0e:	4a38      	ldr	r2, [pc, #224]	; (20000ff0 <GPIO_DeInit+0x154>)
20000f10:	4293      	cmp	r3, r2
20000f12:	d108      	bne.n	20000f26 <GPIO_DeInit+0x8a>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, ENABLE);
20000f14:	2101      	movs	r1, #1
20000f16:	2010      	movs	r0, #16
20000f18:	f7ff fd3e 	bl	20000998 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, DISABLE);
20000f1c:	2100      	movs	r1, #0
20000f1e:	2010      	movs	r0, #16
20000f20:	f7ff fd3a 	bl	20000998 <RCC_AHB1PeriphResetCmd>
}
20000f24:	e058      	b.n	20000fd8 <GPIO_DeInit+0x13c>
  else if (GPIOx == GPIOF)
20000f26:	687b      	ldr	r3, [r7, #4]
20000f28:	4a32      	ldr	r2, [pc, #200]	; (20000ff4 <GPIO_DeInit+0x158>)
20000f2a:	4293      	cmp	r3, r2
20000f2c:	d108      	bne.n	20000f40 <GPIO_DeInit+0xa4>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, ENABLE);
20000f2e:	2101      	movs	r1, #1
20000f30:	2020      	movs	r0, #32
20000f32:	f7ff fd31 	bl	20000998 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, DISABLE);
20000f36:	2100      	movs	r1, #0
20000f38:	2020      	movs	r0, #32
20000f3a:	f7ff fd2d 	bl	20000998 <RCC_AHB1PeriphResetCmd>
}
20000f3e:	e04b      	b.n	20000fd8 <GPIO_DeInit+0x13c>
  else if (GPIOx == GPIOG)
20000f40:	687b      	ldr	r3, [r7, #4]
20000f42:	4a2d      	ldr	r2, [pc, #180]	; (20000ff8 <GPIO_DeInit+0x15c>)
20000f44:	4293      	cmp	r3, r2
20000f46:	d108      	bne.n	20000f5a <GPIO_DeInit+0xbe>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, ENABLE);
20000f48:	2101      	movs	r1, #1
20000f4a:	2040      	movs	r0, #64	; 0x40
20000f4c:	f7ff fd24 	bl	20000998 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, DISABLE);
20000f50:	2100      	movs	r1, #0
20000f52:	2040      	movs	r0, #64	; 0x40
20000f54:	f7ff fd20 	bl	20000998 <RCC_AHB1PeriphResetCmd>
}
20000f58:	e03e      	b.n	20000fd8 <GPIO_DeInit+0x13c>
  else if (GPIOx == GPIOH)
20000f5a:	687b      	ldr	r3, [r7, #4]
20000f5c:	4a27      	ldr	r2, [pc, #156]	; (20000ffc <GPIO_DeInit+0x160>)
20000f5e:	4293      	cmp	r3, r2
20000f60:	d108      	bne.n	20000f74 <GPIO_DeInit+0xd8>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOH, ENABLE);
20000f62:	2101      	movs	r1, #1
20000f64:	2080      	movs	r0, #128	; 0x80
20000f66:	f7ff fd17 	bl	20000998 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOH, DISABLE);
20000f6a:	2100      	movs	r1, #0
20000f6c:	2080      	movs	r0, #128	; 0x80
20000f6e:	f7ff fd13 	bl	20000998 <RCC_AHB1PeriphResetCmd>
}
20000f72:	e031      	b.n	20000fd8 <GPIO_DeInit+0x13c>
  else if (GPIOx == GPIOI)
20000f74:	687b      	ldr	r3, [r7, #4]
20000f76:	4a22      	ldr	r2, [pc, #136]	; (20001000 <GPIO_DeInit+0x164>)
20000f78:	4293      	cmp	r3, r2
20000f7a:	d10c      	bne.n	20000f96 <GPIO_DeInit+0xfa>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, ENABLE);
20000f7c:	2380      	movs	r3, #128	; 0x80
20000f7e:	005b      	lsls	r3, r3, #1
20000f80:	2101      	movs	r1, #1
20000f82:	0018      	movs	r0, r3
20000f84:	f7ff fd08 	bl	20000998 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, DISABLE);
20000f88:	2380      	movs	r3, #128	; 0x80
20000f8a:	005b      	lsls	r3, r3, #1
20000f8c:	2100      	movs	r1, #0
20000f8e:	0018      	movs	r0, r3
20000f90:	f7ff fd02 	bl	20000998 <RCC_AHB1PeriphResetCmd>
}
20000f94:	e020      	b.n	20000fd8 <GPIO_DeInit+0x13c>
  else if (GPIOx == GPIOJ)
20000f96:	687b      	ldr	r3, [r7, #4]
20000f98:	4a1a      	ldr	r2, [pc, #104]	; (20001004 <GPIO_DeInit+0x168>)
20000f9a:	4293      	cmp	r3, r2
20000f9c:	d10c      	bne.n	20000fb8 <GPIO_DeInit+0x11c>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOJ, ENABLE);
20000f9e:	2380      	movs	r3, #128	; 0x80
20000fa0:	009b      	lsls	r3, r3, #2
20000fa2:	2101      	movs	r1, #1
20000fa4:	0018      	movs	r0, r3
20000fa6:	f7ff fcf7 	bl	20000998 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOJ, DISABLE);
20000faa:	2380      	movs	r3, #128	; 0x80
20000fac:	009b      	lsls	r3, r3, #2
20000fae:	2100      	movs	r1, #0
20000fb0:	0018      	movs	r0, r3
20000fb2:	f7ff fcf1 	bl	20000998 <RCC_AHB1PeriphResetCmd>
}
20000fb6:	e00f      	b.n	20000fd8 <GPIO_DeInit+0x13c>
    if (GPIOx == GPIOK)
20000fb8:	687b      	ldr	r3, [r7, #4]
20000fba:	4a13      	ldr	r2, [pc, #76]	; (20001008 <GPIO_DeInit+0x16c>)
20000fbc:	4293      	cmp	r3, r2
20000fbe:	d10b      	bne.n	20000fd8 <GPIO_DeInit+0x13c>
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, ENABLE);
20000fc0:	2380      	movs	r3, #128	; 0x80
20000fc2:	00db      	lsls	r3, r3, #3
20000fc4:	2101      	movs	r1, #1
20000fc6:	0018      	movs	r0, r3
20000fc8:	f7ff fce6 	bl	20000998 <RCC_AHB1PeriphResetCmd>
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, DISABLE);
20000fcc:	2380      	movs	r3, #128	; 0x80
20000fce:	00db      	lsls	r3, r3, #3
20000fd0:	2100      	movs	r1, #0
20000fd2:	0018      	movs	r0, r3
20000fd4:	f7ff fce0 	bl	20000998 <RCC_AHB1PeriphResetCmd>
}
20000fd8:	46c0      	nop			; (mov r8, r8)
20000fda:	46bd      	mov	sp, r7
20000fdc:	b002      	add	sp, #8
20000fde:	bd80      	pop	{r7, pc}
20000fe0:	40020000 	andmi	r0, r2, r0
20000fe4:	40020400 	andmi	r0, r2, r0, lsl #8
20000fe8:	40020800 	andmi	r0, r2, r0, lsl #16
20000fec:	40020c00 	andmi	r0, r2, r0, lsl #24
20000ff0:	40021000 	andmi	r1, r2, r0
20000ff4:	40021400 	andmi	r1, r2, r0, lsl #8
20000ff8:	40021800 	andmi	r1, r2, r0, lsl #16
20000ffc:	40021c00 	andmi	r1, r2, r0, lsl #24
20001000:	40022000 	andmi	r2, r2, r0
20001004:	40022400 	andmi	r2, r2, r0, lsl #8
20001008:	40022800 	andmi	r2, r2, r0, lsl #16

2000100c <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
2000100c:	b580      	push	{r7, lr}
2000100e:	b086      	sub	sp, #24
20001010:	af00      	add	r7, sp, #0
20001012:	6078      	str	r0, [r7, #4]
20001014:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
20001016:	2300      	movs	r3, #0
20001018:	617b      	str	r3, [r7, #20]
2000101a:	2300      	movs	r3, #0
2000101c:	613b      	str	r3, [r7, #16]
2000101e:	2300      	movs	r3, #0
20001020:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
20001022:	2300      	movs	r3, #0
20001024:	617b      	str	r3, [r7, #20]
20001026:	e076      	b.n	20001116 <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
20001028:	2201      	movs	r2, #1
2000102a:	697b      	ldr	r3, [r7, #20]
2000102c:	409a      	lsls	r2, r3
2000102e:	0013      	movs	r3, r2
20001030:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
20001032:	683b      	ldr	r3, [r7, #0]
20001034:	681a      	ldr	r2, [r3, #0]
20001036:	693b      	ldr	r3, [r7, #16]
20001038:	4013      	ands	r3, r2
2000103a:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
2000103c:	68fa      	ldr	r2, [r7, #12]
2000103e:	693b      	ldr	r3, [r7, #16]
20001040:	429a      	cmp	r2, r3
20001042:	d165      	bne.n	20001110 <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
20001044:	687b      	ldr	r3, [r7, #4]
20001046:	681b      	ldr	r3, [r3, #0]
20001048:	697a      	ldr	r2, [r7, #20]
2000104a:	0052      	lsls	r2, r2, #1
2000104c:	2103      	movs	r1, #3
2000104e:	4091      	lsls	r1, r2
20001050:	000a      	movs	r2, r1
20001052:	43d2      	mvns	r2, r2
20001054:	401a      	ands	r2, r3
20001056:	687b      	ldr	r3, [r7, #4]
20001058:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
2000105a:	687b      	ldr	r3, [r7, #4]
2000105c:	681a      	ldr	r2, [r3, #0]
2000105e:	683b      	ldr	r3, [r7, #0]
20001060:	791b      	ldrb	r3, [r3, #4]
20001062:	0019      	movs	r1, r3
20001064:	697b      	ldr	r3, [r7, #20]
20001066:	005b      	lsls	r3, r3, #1
20001068:	4099      	lsls	r1, r3
2000106a:	000b      	movs	r3, r1
2000106c:	431a      	orrs	r2, r3
2000106e:	687b      	ldr	r3, [r7, #4]
20001070:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
20001072:	683b      	ldr	r3, [r7, #0]
20001074:	791b      	ldrb	r3, [r3, #4]
20001076:	2b01      	cmp	r3, #1
20001078:	d003      	beq.n	20001082 <GPIO_Init+0x76>
2000107a:	683b      	ldr	r3, [r7, #0]
2000107c:	791b      	ldrb	r3, [r3, #4]
2000107e:	2b02      	cmp	r3, #2
20001080:	d12e      	bne.n	200010e0 <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
20001082:	687b      	ldr	r3, [r7, #4]
20001084:	689b      	ldr	r3, [r3, #8]
20001086:	697a      	ldr	r2, [r7, #20]
20001088:	0052      	lsls	r2, r2, #1
2000108a:	2103      	movs	r1, #3
2000108c:	4091      	lsls	r1, r2
2000108e:	000a      	movs	r2, r1
20001090:	43d2      	mvns	r2, r2
20001092:	401a      	ands	r2, r3
20001094:	687b      	ldr	r3, [r7, #4]
20001096:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
20001098:	687b      	ldr	r3, [r7, #4]
2000109a:	689a      	ldr	r2, [r3, #8]
2000109c:	683b      	ldr	r3, [r7, #0]
2000109e:	795b      	ldrb	r3, [r3, #5]
200010a0:	0019      	movs	r1, r3
200010a2:	697b      	ldr	r3, [r7, #20]
200010a4:	005b      	lsls	r3, r3, #1
200010a6:	4099      	lsls	r1, r3
200010a8:	000b      	movs	r3, r1
200010aa:	431a      	orrs	r2, r3
200010ac:	687b      	ldr	r3, [r7, #4]
200010ae:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
200010b0:	687b      	ldr	r3, [r7, #4]
200010b2:	685b      	ldr	r3, [r3, #4]
200010b4:	697a      	ldr	r2, [r7, #20]
200010b6:	b292      	uxth	r2, r2
200010b8:	0011      	movs	r1, r2
200010ba:	2201      	movs	r2, #1
200010bc:	408a      	lsls	r2, r1
200010be:	43d2      	mvns	r2, r2
200010c0:	401a      	ands	r2, r3
200010c2:	687b      	ldr	r3, [r7, #4]
200010c4:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
200010c6:	687b      	ldr	r3, [r7, #4]
200010c8:	685b      	ldr	r3, [r3, #4]
200010ca:	683a      	ldr	r2, [r7, #0]
200010cc:	7992      	ldrb	r2, [r2, #6]
200010ce:	0011      	movs	r1, r2
200010d0:	697a      	ldr	r2, [r7, #20]
200010d2:	b292      	uxth	r2, r2
200010d4:	4091      	lsls	r1, r2
200010d6:	000a      	movs	r2, r1
200010d8:	b292      	uxth	r2, r2
200010da:	431a      	orrs	r2, r3
200010dc:	687b      	ldr	r3, [r7, #4]
200010de:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
200010e0:	687b      	ldr	r3, [r7, #4]
200010e2:	68db      	ldr	r3, [r3, #12]
200010e4:	697a      	ldr	r2, [r7, #20]
200010e6:	b292      	uxth	r2, r2
200010e8:	0052      	lsls	r2, r2, #1
200010ea:	2103      	movs	r1, #3
200010ec:	4091      	lsls	r1, r2
200010ee:	000a      	movs	r2, r1
200010f0:	43d2      	mvns	r2, r2
200010f2:	401a      	ands	r2, r3
200010f4:	687b      	ldr	r3, [r7, #4]
200010f6:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
200010f8:	687b      	ldr	r3, [r7, #4]
200010fa:	68da      	ldr	r2, [r3, #12]
200010fc:	683b      	ldr	r3, [r7, #0]
200010fe:	79db      	ldrb	r3, [r3, #7]
20001100:	0019      	movs	r1, r3
20001102:	697b      	ldr	r3, [r7, #20]
20001104:	005b      	lsls	r3, r3, #1
20001106:	4099      	lsls	r1, r3
20001108:	000b      	movs	r3, r1
2000110a:	431a      	orrs	r2, r3
2000110c:	687b      	ldr	r3, [r7, #4]
2000110e:	60da      	str	r2, [r3, #12]
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
20001110:	697b      	ldr	r3, [r7, #20]
20001112:	3301      	adds	r3, #1
20001114:	617b      	str	r3, [r7, #20]
20001116:	697b      	ldr	r3, [r7, #20]
20001118:	2b0f      	cmp	r3, #15
2000111a:	d985      	bls.n	20001028 <GPIO_Init+0x1c>
    }
  }
}
2000111c:	46c0      	nop			; (mov r8, r8)
2000111e:	46bd      	mov	sp, r7
20001120:	b006      	add	sp, #24
20001122:	bd80      	pop	{r7, pc}

20001124 <GPIO_StructInit>:
  * @brief  Fills each GPIO_InitStruct member with its default value.
  * @param  GPIO_InitStruct : pointer to a GPIO_InitTypeDef structure which will be initialized.
  * @retval None
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
20001124:	b580      	push	{r7, lr}
20001126:	b082      	sub	sp, #8
20001128:	af00      	add	r7, sp, #0
2000112a:	6078      	str	r0, [r7, #4]
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
2000112c:	687b      	ldr	r3, [r7, #4]
2000112e:	4a09      	ldr	r2, [pc, #36]	; (20001154 <GPIO_StructInit+0x30>)
20001130:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN;
20001132:	687b      	ldr	r3, [r7, #4]
20001134:	2200      	movs	r2, #0
20001136:	711a      	strb	r2, [r3, #4]
  GPIO_InitStruct->GPIO_Speed = GPIO_Speed_2MHz;
20001138:	687b      	ldr	r3, [r7, #4]
2000113a:	2200      	movs	r2, #0
2000113c:	715a      	strb	r2, [r3, #5]
  GPIO_InitStruct->GPIO_OType = GPIO_OType_PP;
2000113e:	687b      	ldr	r3, [r7, #4]
20001140:	2200      	movs	r2, #0
20001142:	719a      	strb	r2, [r3, #6]
  GPIO_InitStruct->GPIO_PuPd = GPIO_PuPd_NOPULL;
20001144:	687b      	ldr	r3, [r7, #4]
20001146:	2200      	movs	r2, #0
20001148:	71da      	strb	r2, [r3, #7]
}
2000114a:	46c0      	nop			; (mov r8, r8)
2000114c:	46bd      	mov	sp, r7
2000114e:	b002      	add	sp, #8
20001150:	bd80      	pop	{r7, pc}
20001152:	46c0      	nop			; (mov r8, r8)
20001154:	0000ffff 	strdeq	pc, [r0], -pc	; <UNPREDICTABLE>

20001158 <GPIO_PinLockConfig>:
  * @param  GPIO_Pin: specifies the port bit to be locked.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_PinLockConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
20001158:	b580      	push	{r7, lr}
2000115a:	b084      	sub	sp, #16
2000115c:	af00      	add	r7, sp, #0
2000115e:	6078      	str	r0, [r7, #4]
20001160:	000a      	movs	r2, r1
20001162:	1cbb      	adds	r3, r7, #2
20001164:	801a      	strh	r2, [r3, #0]
  __IO uint32_t tmp = 0x00010000;
20001166:	2380      	movs	r3, #128	; 0x80
20001168:	025b      	lsls	r3, r3, #9
2000116a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  tmp |= GPIO_Pin;
2000116c:	1cbb      	adds	r3, r7, #2
2000116e:	881a      	ldrh	r2, [r3, #0]
20001170:	68fb      	ldr	r3, [r7, #12]
20001172:	4313      	orrs	r3, r2
20001174:	60fb      	str	r3, [r7, #12]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
20001176:	68fa      	ldr	r2, [r7, #12]
20001178:	687b      	ldr	r3, [r7, #4]
2000117a:	61da      	str	r2, [r3, #28]
  /* Reset LCKK bit */
  GPIOx->LCKR =  GPIO_Pin;
2000117c:	1cbb      	adds	r3, r7, #2
2000117e:	881a      	ldrh	r2, [r3, #0]
20001180:	687b      	ldr	r3, [r7, #4]
20001182:	61da      	str	r2, [r3, #28]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
20001184:	68fa      	ldr	r2, [r7, #12]
20001186:	687b      	ldr	r3, [r7, #4]
20001188:	61da      	str	r2, [r3, #28]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
2000118a:	687b      	ldr	r3, [r7, #4]
2000118c:	69db      	ldr	r3, [r3, #28]
2000118e:	60fb      	str	r3, [r7, #12]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
20001190:	687b      	ldr	r3, [r7, #4]
20001192:	69db      	ldr	r3, [r3, #28]
20001194:	60fb      	str	r3, [r7, #12]
}
20001196:	46c0      	nop			; (mov r8, r8)
20001198:	46bd      	mov	sp, r7
2000119a:	b004      	add	sp, #16
2000119c:	bd80      	pop	{r7, pc}

2000119e <GPIO_ReadInputDataBit>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
uint8_t GPIO_ReadInputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
2000119e:	b580      	push	{r7, lr}
200011a0:	b084      	sub	sp, #16
200011a2:	af00      	add	r7, sp, #0
200011a4:	6078      	str	r0, [r7, #4]
200011a6:	000a      	movs	r2, r1
200011a8:	1cbb      	adds	r3, r7, #2
200011aa:	801a      	strh	r2, [r3, #0]
  uint8_t bitstatus = 0x00;
200011ac:	230f      	movs	r3, #15
200011ae:	18fb      	adds	r3, r7, r3
200011b0:	2200      	movs	r2, #0
200011b2:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
200011b4:	687b      	ldr	r3, [r7, #4]
200011b6:	691b      	ldr	r3, [r3, #16]
200011b8:	1cba      	adds	r2, r7, #2
200011ba:	8812      	ldrh	r2, [r2, #0]
200011bc:	4013      	ands	r3, r2
200011be:	d004      	beq.n	200011ca <GPIO_ReadInputDataBit+0x2c>
  {
    bitstatus = (uint8_t)Bit_SET;
200011c0:	230f      	movs	r3, #15
200011c2:	18fb      	adds	r3, r7, r3
200011c4:	2201      	movs	r2, #1
200011c6:	701a      	strb	r2, [r3, #0]
200011c8:	e003      	b.n	200011d2 <GPIO_ReadInputDataBit+0x34>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
200011ca:	230f      	movs	r3, #15
200011cc:	18fb      	adds	r3, r7, r3
200011ce:	2200      	movs	r2, #0
200011d0:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
200011d2:	230f      	movs	r3, #15
200011d4:	18fb      	adds	r3, r7, r3
200011d6:	781b      	ldrb	r3, [r3, #0]
}
200011d8:	0018      	movs	r0, r3
200011da:	46bd      	mov	sp, r7
200011dc:	b004      	add	sp, #16
200011de:	bd80      	pop	{r7, pc}

200011e0 <GPIO_ReadInputData>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F42xxx/43xxx devices.
  *                      x can be (A, B, C, D and H) to select the GPIO peripheral for STM32F401xx devices. 
  * @retval GPIO input data port value.
  */
uint16_t GPIO_ReadInputData(GPIO_TypeDef* GPIOx)
{
200011e0:	b580      	push	{r7, lr}
200011e2:	b082      	sub	sp, #8
200011e4:	af00      	add	r7, sp, #0
200011e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  return ((uint16_t)GPIOx->IDR);
200011e8:	687b      	ldr	r3, [r7, #4]
200011ea:	691b      	ldr	r3, [r3, #16]
200011ec:	b29b      	uxth	r3, r3
}
200011ee:	0018      	movs	r0, r3
200011f0:	46bd      	mov	sp, r7
200011f2:	b002      	add	sp, #8
200011f4:	bd80      	pop	{r7, pc}

200011f6 <GPIO_ReadOutputDataBit>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *          This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The output port pin value.
  */
uint8_t GPIO_ReadOutputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
200011f6:	b580      	push	{r7, lr}
200011f8:	b084      	sub	sp, #16
200011fa:	af00      	add	r7, sp, #0
200011fc:	6078      	str	r0, [r7, #4]
200011fe:	000a      	movs	r2, r1
20001200:	1cbb      	adds	r3, r7, #2
20001202:	801a      	strh	r2, [r3, #0]
  uint8_t bitstatus = 0x00;
20001204:	230f      	movs	r3, #15
20001206:	18fb      	adds	r3, r7, r3
20001208:	2200      	movs	r2, #0
2000120a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if (((GPIOx->ODR) & GPIO_Pin) != (uint32_t)Bit_RESET)
2000120c:	687b      	ldr	r3, [r7, #4]
2000120e:	695b      	ldr	r3, [r3, #20]
20001210:	1cba      	adds	r2, r7, #2
20001212:	8812      	ldrh	r2, [r2, #0]
20001214:	4013      	ands	r3, r2
20001216:	d004      	beq.n	20001222 <GPIO_ReadOutputDataBit+0x2c>
  {
    bitstatus = (uint8_t)Bit_SET;
20001218:	230f      	movs	r3, #15
2000121a:	18fb      	adds	r3, r7, r3
2000121c:	2201      	movs	r2, #1
2000121e:	701a      	strb	r2, [r3, #0]
20001220:	e003      	b.n	2000122a <GPIO_ReadOutputDataBit+0x34>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
20001222:	230f      	movs	r3, #15
20001224:	18fb      	adds	r3, r7, r3
20001226:	2200      	movs	r2, #0
20001228:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
2000122a:	230f      	movs	r3, #15
2000122c:	18fb      	adds	r3, r7, r3
2000122e:	781b      	ldrb	r3, [r3, #0]
}
20001230:	0018      	movs	r0, r3
20001232:	46bd      	mov	sp, r7
20001234:	b004      	add	sp, #16
20001236:	bd80      	pop	{r7, pc}

20001238 <GPIO_ReadOutputData>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F42xxx/43xxx devices.
  *                      x can be (A, B, C, D and H) to select the GPIO peripheral for STM32F401xx devices. 
  * @retval GPIO output data port value.
  */
uint16_t GPIO_ReadOutputData(GPIO_TypeDef* GPIOx)
{
20001238:	b580      	push	{r7, lr}
2000123a:	b082      	sub	sp, #8
2000123c:	af00      	add	r7, sp, #0
2000123e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  return ((uint16_t)GPIOx->ODR);
20001240:	687b      	ldr	r3, [r7, #4]
20001242:	695b      	ldr	r3, [r3, #20]
20001244:	b29b      	uxth	r3, r3
}
20001246:	0018      	movs	r0, r3
20001248:	46bd      	mov	sp, r7
2000124a:	b002      	add	sp, #8
2000124c:	bd80      	pop	{r7, pc}

2000124e <GPIO_SetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
2000124e:	b580      	push	{r7, lr}
20001250:	b082      	sub	sp, #8
20001252:	af00      	add	r7, sp, #0
20001254:	6078      	str	r0, [r7, #4]
20001256:	000a      	movs	r2, r1
20001258:	1cbb      	adds	r3, r7, #2
2000125a:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRL = GPIO_Pin;
2000125c:	687b      	ldr	r3, [r7, #4]
2000125e:	1cba      	adds	r2, r7, #2
20001260:	8812      	ldrh	r2, [r2, #0]
20001262:	831a      	strh	r2, [r3, #24]
}
20001264:	46c0      	nop			; (mov r8, r8)
20001266:	46bd      	mov	sp, r7
20001268:	b002      	add	sp, #8
2000126a:	bd80      	pop	{r7, pc}

2000126c <GPIO_ResetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
2000126c:	b580      	push	{r7, lr}
2000126e:	b082      	sub	sp, #8
20001270:	af00      	add	r7, sp, #0
20001272:	6078      	str	r0, [r7, #4]
20001274:	000a      	movs	r2, r1
20001276:	1cbb      	adds	r3, r7, #2
20001278:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRH = GPIO_Pin;
2000127a:	687b      	ldr	r3, [r7, #4]
2000127c:	1cba      	adds	r2, r7, #2
2000127e:	8812      	ldrh	r2, [r2, #0]
20001280:	835a      	strh	r2, [r3, #26]
}
20001282:	46c0      	nop			; (mov r8, r8)
20001284:	46bd      	mov	sp, r7
20001286:	b002      	add	sp, #8
20001288:	bd80      	pop	{r7, pc}

2000128a <GPIO_WriteBit>:
  *            @arg Bit_RESET: to clear the port pin
  *            @arg Bit_SET: to set the port pin
  * @retval None
  */
void GPIO_WriteBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, BitAction BitVal)
{
2000128a:	b580      	push	{r7, lr}
2000128c:	b082      	sub	sp, #8
2000128e:	af00      	add	r7, sp, #0
20001290:	6078      	str	r0, [r7, #4]
20001292:	0008      	movs	r0, r1
20001294:	0011      	movs	r1, r2
20001296:	1cbb      	adds	r3, r7, #2
20001298:	1c02      	adds	r2, r0, #0
2000129a:	801a      	strh	r2, [r3, #0]
2000129c:	1c7b      	adds	r3, r7, #1
2000129e:	1c0a      	adds	r2, r1, #0
200012a0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal));

  if (BitVal != Bit_RESET)
200012a2:	1c7b      	adds	r3, r7, #1
200012a4:	781b      	ldrb	r3, [r3, #0]
200012a6:	2b00      	cmp	r3, #0
200012a8:	d004      	beq.n	200012b4 <GPIO_WriteBit+0x2a>
  {
    GPIOx->BSRRL = GPIO_Pin;
200012aa:	687b      	ldr	r3, [r7, #4]
200012ac:	1cba      	adds	r2, r7, #2
200012ae:	8812      	ldrh	r2, [r2, #0]
200012b0:	831a      	strh	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRRH = GPIO_Pin ;
  }
}
200012b2:	e003      	b.n	200012bc <GPIO_WriteBit+0x32>
    GPIOx->BSRRH = GPIO_Pin ;
200012b4:	687b      	ldr	r3, [r7, #4]
200012b6:	1cba      	adds	r2, r7, #2
200012b8:	8812      	ldrh	r2, [r2, #0]
200012ba:	835a      	strh	r2, [r3, #26]
}
200012bc:	46c0      	nop			; (mov r8, r8)
200012be:	46bd      	mov	sp, r7
200012c0:	b002      	add	sp, #8
200012c2:	bd80      	pop	{r7, pc}

200012c4 <GPIO_Write>:
  *                      x can be (A, B, C, D and H) to select the GPIO peripheral for STM32F401xx devices. 
  * @param  PortVal: specifies the value to be written to the port output data register.
  * @retval None
  */
void GPIO_Write(GPIO_TypeDef* GPIOx, uint16_t PortVal)
{
200012c4:	b580      	push	{r7, lr}
200012c6:	b082      	sub	sp, #8
200012c8:	af00      	add	r7, sp, #0
200012ca:	6078      	str	r0, [r7, #4]
200012cc:	000a      	movs	r2, r1
200012ce:	1cbb      	adds	r3, r7, #2
200012d0:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR = PortVal;
200012d2:	1cbb      	adds	r3, r7, #2
200012d4:	881a      	ldrh	r2, [r3, #0]
200012d6:	687b      	ldr	r3, [r7, #4]
200012d8:	615a      	str	r2, [r3, #20]
}
200012da:	46c0      	nop			; (mov r8, r8)
200012dc:	46bd      	mov	sp, r7
200012de:	b002      	add	sp, #8
200012e0:	bd80      	pop	{r7, pc}

200012e2 <GPIO_ToggleBits>:
  *                      x can be (A, B, C, D and H) to select the GPIO peripheral for STM32F401xx devices. 
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void GPIO_ToggleBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
200012e2:	b580      	push	{r7, lr}
200012e4:	b082      	sub	sp, #8
200012e6:	af00      	add	r7, sp, #0
200012e8:	6078      	str	r0, [r7, #4]
200012ea:	000a      	movs	r2, r1
200012ec:	1cbb      	adds	r3, r7, #2
200012ee:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR ^= GPIO_Pin;
200012f0:	687b      	ldr	r3, [r7, #4]
200012f2:	695a      	ldr	r2, [r3, #20]
200012f4:	1cbb      	adds	r3, r7, #2
200012f6:	881b      	ldrh	r3, [r3, #0]
200012f8:	405a      	eors	r2, r3
200012fa:	687b      	ldr	r3, [r7, #4]
200012fc:	615a      	str	r2, [r3, #20]
}
200012fe:	46c0      	nop			; (mov r8, r8)
20001300:	46bd      	mov	sp, r7
20001302:	b002      	add	sp, #8
20001304:	bd80      	pop	{r7, pc}

20001306 <GPIO_PinAFConfig>:
  *            @arg GPIO_AF_LTDC: Connect LTDC pins to AF14 for STM32F429xx/439xx devices. 
  *            @arg GPIO_AF_EVENTOUT: Connect EVENTOUT pins to AF15
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
20001306:	b580      	push	{r7, lr}
20001308:	b084      	sub	sp, #16
2000130a:	af00      	add	r7, sp, #0
2000130c:	6078      	str	r0, [r7, #4]
2000130e:	0008      	movs	r0, r1
20001310:	0011      	movs	r1, r2
20001312:	1cbb      	adds	r3, r7, #2
20001314:	1c02      	adds	r2, r0, #0
20001316:	801a      	strh	r2, [r3, #0]
20001318:	1c7b      	adds	r3, r7, #1
2000131a:	1c0a      	adds	r2, r1, #0
2000131c:	701a      	strb	r2, [r3, #0]
  uint32_t temp = 0x00;
2000131e:	2300      	movs	r3, #0
20001320:	60fb      	str	r3, [r7, #12]
  uint32_t temp_2 = 0x00;
20001322:	2300      	movs	r3, #0
20001324:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
20001326:	1c7b      	adds	r3, r7, #1
20001328:	781a      	ldrb	r2, [r3, #0]
2000132a:	1cbb      	adds	r3, r7, #2
2000132c:	881b      	ldrh	r3, [r3, #0]
2000132e:	2107      	movs	r1, #7
20001330:	400b      	ands	r3, r1
20001332:	009b      	lsls	r3, r3, #2
20001334:	409a      	lsls	r2, r3
20001336:	0013      	movs	r3, r2
20001338:	60fb      	str	r3, [r7, #12]
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
2000133a:	1cbb      	adds	r3, r7, #2
2000133c:	881b      	ldrh	r3, [r3, #0]
2000133e:	08db      	lsrs	r3, r3, #3
20001340:	b29b      	uxth	r3, r3
20001342:	001a      	movs	r2, r3
20001344:	687b      	ldr	r3, [r7, #4]
20001346:	3208      	adds	r2, #8
20001348:	0092      	lsls	r2, r2, #2
2000134a:	58d3      	ldr	r3, [r2, r3]
2000134c:	1cba      	adds	r2, r7, #2
2000134e:	8812      	ldrh	r2, [r2, #0]
20001350:	2107      	movs	r1, #7
20001352:	400a      	ands	r2, r1
20001354:	0092      	lsls	r2, r2, #2
20001356:	210f      	movs	r1, #15
20001358:	4091      	lsls	r1, r2
2000135a:	000a      	movs	r2, r1
2000135c:	43d2      	mvns	r2, r2
2000135e:	1cb9      	adds	r1, r7, #2
20001360:	8809      	ldrh	r1, [r1, #0]
20001362:	08c9      	lsrs	r1, r1, #3
20001364:	b289      	uxth	r1, r1
20001366:	0008      	movs	r0, r1
20001368:	401a      	ands	r2, r3
2000136a:	0011      	movs	r1, r2
2000136c:	687b      	ldr	r3, [r7, #4]
2000136e:	0002      	movs	r2, r0
20001370:	3208      	adds	r2, #8
20001372:	0092      	lsls	r2, r2, #2
20001374:	50d1      	str	r1, [r2, r3]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
20001376:	1cbb      	adds	r3, r7, #2
20001378:	881b      	ldrh	r3, [r3, #0]
2000137a:	08db      	lsrs	r3, r3, #3
2000137c:	b29b      	uxth	r3, r3
2000137e:	001a      	movs	r2, r3
20001380:	687b      	ldr	r3, [r7, #4]
20001382:	3208      	adds	r2, #8
20001384:	0092      	lsls	r2, r2, #2
20001386:	58d3      	ldr	r3, [r2, r3]
20001388:	68fa      	ldr	r2, [r7, #12]
2000138a:	4313      	orrs	r3, r2
2000138c:	60bb      	str	r3, [r7, #8]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
2000138e:	1cbb      	adds	r3, r7, #2
20001390:	881b      	ldrh	r3, [r3, #0]
20001392:	08db      	lsrs	r3, r3, #3
20001394:	b29b      	uxth	r3, r3
20001396:	001a      	movs	r2, r3
20001398:	687b      	ldr	r3, [r7, #4]
2000139a:	3208      	adds	r2, #8
2000139c:	0092      	lsls	r2, r2, #2
2000139e:	68b9      	ldr	r1, [r7, #8]
200013a0:	50d1      	str	r1, [r2, r3]
}
200013a2:	46c0      	nop			; (mov r8, r8)
200013a4:	46bd      	mov	sp, r7
200013a6:	b004      	add	sp, #16
200013a8:	bd80      	pop	{r7, pc}
200013aa:	46c0      	nop			; (mov r8, r8)

200013ac <__udivsi3>:
200013ac:	2200      	movs	r2, #0
200013ae:	0843      	lsrs	r3, r0, #1
200013b0:	428b      	cmp	r3, r1
200013b2:	d374      	bcc.n	2000149e <__udivsi3+0xf2>
200013b4:	0903      	lsrs	r3, r0, #4
200013b6:	428b      	cmp	r3, r1
200013b8:	d35f      	bcc.n	2000147a <__udivsi3+0xce>
200013ba:	0a03      	lsrs	r3, r0, #8
200013bc:	428b      	cmp	r3, r1
200013be:	d344      	bcc.n	2000144a <__udivsi3+0x9e>
200013c0:	0b03      	lsrs	r3, r0, #12
200013c2:	428b      	cmp	r3, r1
200013c4:	d328      	bcc.n	20001418 <__udivsi3+0x6c>
200013c6:	0c03      	lsrs	r3, r0, #16
200013c8:	428b      	cmp	r3, r1
200013ca:	d30d      	bcc.n	200013e8 <__udivsi3+0x3c>
200013cc:	22ff      	movs	r2, #255	; 0xff
200013ce:	0209      	lsls	r1, r1, #8
200013d0:	ba12      	rev	r2, r2
200013d2:	0c03      	lsrs	r3, r0, #16
200013d4:	428b      	cmp	r3, r1
200013d6:	d302      	bcc.n	200013de <__udivsi3+0x32>
200013d8:	1212      	asrs	r2, r2, #8
200013da:	0209      	lsls	r1, r1, #8
200013dc:	d065      	beq.n	200014aa <__udivsi3+0xfe>
200013de:	0b03      	lsrs	r3, r0, #12
200013e0:	428b      	cmp	r3, r1
200013e2:	d319      	bcc.n	20001418 <__udivsi3+0x6c>
200013e4:	e000      	b.n	200013e8 <__udivsi3+0x3c>
200013e6:	0a09      	lsrs	r1, r1, #8
200013e8:	0bc3      	lsrs	r3, r0, #15
200013ea:	428b      	cmp	r3, r1
200013ec:	d301      	bcc.n	200013f2 <__udivsi3+0x46>
200013ee:	03cb      	lsls	r3, r1, #15
200013f0:	1ac0      	subs	r0, r0, r3
200013f2:	4152      	adcs	r2, r2
200013f4:	0b83      	lsrs	r3, r0, #14
200013f6:	428b      	cmp	r3, r1
200013f8:	d301      	bcc.n	200013fe <__udivsi3+0x52>
200013fa:	038b      	lsls	r3, r1, #14
200013fc:	1ac0      	subs	r0, r0, r3
200013fe:	4152      	adcs	r2, r2
20001400:	0b43      	lsrs	r3, r0, #13
20001402:	428b      	cmp	r3, r1
20001404:	d301      	bcc.n	2000140a <__udivsi3+0x5e>
20001406:	034b      	lsls	r3, r1, #13
20001408:	1ac0      	subs	r0, r0, r3
2000140a:	4152      	adcs	r2, r2
2000140c:	0b03      	lsrs	r3, r0, #12
2000140e:	428b      	cmp	r3, r1
20001410:	d301      	bcc.n	20001416 <__udivsi3+0x6a>
20001412:	030b      	lsls	r3, r1, #12
20001414:	1ac0      	subs	r0, r0, r3
20001416:	4152      	adcs	r2, r2
20001418:	0ac3      	lsrs	r3, r0, #11
2000141a:	428b      	cmp	r3, r1
2000141c:	d301      	bcc.n	20001422 <__udivsi3+0x76>
2000141e:	02cb      	lsls	r3, r1, #11
20001420:	1ac0      	subs	r0, r0, r3
20001422:	4152      	adcs	r2, r2
20001424:	0a83      	lsrs	r3, r0, #10
20001426:	428b      	cmp	r3, r1
20001428:	d301      	bcc.n	2000142e <__udivsi3+0x82>
2000142a:	028b      	lsls	r3, r1, #10
2000142c:	1ac0      	subs	r0, r0, r3
2000142e:	4152      	adcs	r2, r2
20001430:	0a43      	lsrs	r3, r0, #9
20001432:	428b      	cmp	r3, r1
20001434:	d301      	bcc.n	2000143a <__udivsi3+0x8e>
20001436:	024b      	lsls	r3, r1, #9
20001438:	1ac0      	subs	r0, r0, r3
2000143a:	4152      	adcs	r2, r2
2000143c:	0a03      	lsrs	r3, r0, #8
2000143e:	428b      	cmp	r3, r1
20001440:	d301      	bcc.n	20001446 <__udivsi3+0x9a>
20001442:	020b      	lsls	r3, r1, #8
20001444:	1ac0      	subs	r0, r0, r3
20001446:	4152      	adcs	r2, r2
20001448:	d2cd      	bcs.n	200013e6 <__udivsi3+0x3a>
2000144a:	09c3      	lsrs	r3, r0, #7
2000144c:	428b      	cmp	r3, r1
2000144e:	d301      	bcc.n	20001454 <__udivsi3+0xa8>
20001450:	01cb      	lsls	r3, r1, #7
20001452:	1ac0      	subs	r0, r0, r3
20001454:	4152      	adcs	r2, r2
20001456:	0983      	lsrs	r3, r0, #6
20001458:	428b      	cmp	r3, r1
2000145a:	d301      	bcc.n	20001460 <__udivsi3+0xb4>
2000145c:	018b      	lsls	r3, r1, #6
2000145e:	1ac0      	subs	r0, r0, r3
20001460:	4152      	adcs	r2, r2
20001462:	0943      	lsrs	r3, r0, #5
20001464:	428b      	cmp	r3, r1
20001466:	d301      	bcc.n	2000146c <__udivsi3+0xc0>
20001468:	014b      	lsls	r3, r1, #5
2000146a:	1ac0      	subs	r0, r0, r3
2000146c:	4152      	adcs	r2, r2
2000146e:	0903      	lsrs	r3, r0, #4
20001470:	428b      	cmp	r3, r1
20001472:	d301      	bcc.n	20001478 <__udivsi3+0xcc>
20001474:	010b      	lsls	r3, r1, #4
20001476:	1ac0      	subs	r0, r0, r3
20001478:	4152      	adcs	r2, r2
2000147a:	08c3      	lsrs	r3, r0, #3
2000147c:	428b      	cmp	r3, r1
2000147e:	d301      	bcc.n	20001484 <__udivsi3+0xd8>
20001480:	00cb      	lsls	r3, r1, #3
20001482:	1ac0      	subs	r0, r0, r3
20001484:	4152      	adcs	r2, r2
20001486:	0883      	lsrs	r3, r0, #2
20001488:	428b      	cmp	r3, r1
2000148a:	d301      	bcc.n	20001490 <__udivsi3+0xe4>
2000148c:	008b      	lsls	r3, r1, #2
2000148e:	1ac0      	subs	r0, r0, r3
20001490:	4152      	adcs	r2, r2
20001492:	0843      	lsrs	r3, r0, #1
20001494:	428b      	cmp	r3, r1
20001496:	d301      	bcc.n	2000149c <__udivsi3+0xf0>
20001498:	004b      	lsls	r3, r1, #1
2000149a:	1ac0      	subs	r0, r0, r3
2000149c:	4152      	adcs	r2, r2
2000149e:	1a41      	subs	r1, r0, r1
200014a0:	d200      	bcs.n	200014a4 <__udivsi3+0xf8>
200014a2:	4601      	mov	r1, r0
200014a4:	4152      	adcs	r2, r2
200014a6:	4610      	mov	r0, r2
200014a8:	4770      	bx	lr
200014aa:	e7ff      	b.n	200014ac <__udivsi3+0x100>
200014ac:	b501      	push	{r0, lr}
200014ae:	2000      	movs	r0, #0
200014b0:	f000 f806 	bl	200014c0 <__aeabi_idiv0>
200014b4:	bd02      	pop	{r1, pc}
200014b6:	46c0      	nop			; (mov r8, r8)

200014b8 <__aeabi_uidivmod>:
200014b8:	2900      	cmp	r1, #0
200014ba:	d0f7      	beq.n	200014ac <__udivsi3+0x100>
200014bc:	e776      	b.n	200013ac <__udivsi3>
200014be:	4770      	bx	lr

200014c0 <__aeabi_idiv0>:
200014c0:	4770      	bx	lr
200014c2:	46c0      	nop			; (mov r8, r8)

200014c4 <msTicks>:
200014c4:	00000000 	andeq	r0, r0, r0

200014c8 <APBAHBPrescTable>:
200014c8:	00000000 	andeq	r0, r0, r0
200014cc:	04030201 	streq	r0, [r3], #-513	; 0xfffffdff
200014d0:	04030201 	streq	r0, [r3], #-513	; 0xfffffdff
200014d4:	09080706 	stmdbeq	r8, {r1, r2, r8, r9, sl}

200014d8 <GPIO_Pins>:
200014d8:	00020001 	andeq	r0, r2, r1
200014dc:	00080004 	andeq	r0, r8, r4
200014e0:	00200010 	eoreq	r0, r0, r0, lsl r0
200014e4:	00800040 	addeq	r0, r0, r0, asr #32
200014e8:	02000100 	andeq	r0, r0, #0, 2
200014ec:	08000400 	stmdaeq	r0, {sl}
200014f0:	20001000 	andcs	r1, r0, r0
200014f4:	80004000 	andhi	r4, r0, r0

Disassembly of section .debug_info:

00000000 <.debug_info>:
       0:	00001655 	andeq	r1, r0, r5, asr r6
       4:	00000004 	andeq	r0, r0, r4
       8:	01040000 	mrseq	r0, (UNDEF: 4)
       c:	0000056f 	andeq	r0, r0, pc, ror #10
      10:	000efd0c 	andeq	pc, lr, ip, lsl #26
      14:	00108800 	andseq	r8, r0, r0, lsl #16
	...
      24:	0ea50200 	cdpeq	2, 10, cr0, cr5, cr0, {0}
      28:	01050000 	mrseq	r0, (UNDEF: 5)
      2c:	00000253 	andeq	r0, r0, r3, asr r2
      30:	0253c804 	subseq	ip, r3, #4, 16	; 0x40000
      34:	38030000 	stmdacc	r3, {}	; <UNPREDICTABLE>
      38:	72000007 	andvc	r0, r0, #7
      3c:	0007b303 	andeq	fp, r7, r3, lsl #6
      40:	78037400 	stmdavc	r3, {sl, ip, sp, lr}
      44:	75000008 	strvc	r0, [r0, #-8]
      48:	00046503 	andeq	r6, r4, r3, lsl #10
      4c:	55037600 	strpl	r7, [r3, #-1536]	; 0xfffffa00
      50:	7b000009 	blvc	7c <startup-0x1fffff84>
      54:	000d8b03 	andeq	r8, sp, r3, lsl #22
      58:	09037c00 	stmdbeq	r3, {sl, fp, ip, sp, lr}
      5c:	7e000010 	mcrvc	0, 0, r0, cr0, cr0, {0}
      60:	00030703 	andeq	r0, r3, r3, lsl #14
      64:	4c047f00 	stcmi	15, cr7, [r4], {-0}
      68:	00000007 	andeq	r0, r0, r7
      6c:	000cea04 	andeq	lr, ip, r4, lsl #20
      70:	d9040100 	stmdble	r4, {r8}
      74:	02000007 	andeq	r0, r0, #7
      78:	00000e04 	andeq	r0, r0, r4, lsl #28
      7c:	bb040300 	bllt	100c84 <startup-0x1feff37c>
      80:	04000000 	streq	r0, [r0], #-0
      84:	000e1904 	andeq	r1, lr, r4, lsl #18
      88:	16040500 	strne	r0, [r4], -r0, lsl #10
      8c:	0600000d 	streq	r0, [r0], -sp
      90:	0006c104 	andeq	ip, r6, r4, lsl #2
      94:	1c040700 	stcne	7, cr0, [r4], {-0}
      98:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
      9c:	000ffe04 	andeq	pc, pc, r4, lsl #28
      a0:	41040900 	tstmi	r4, r0, lsl #18
      a4:	0a00000a 	beq	d4 <startup-0x1fffff2c>
      a8:	000ba804 	andeq	sl, fp, r4, lsl #16
      ac:	f0040b00 			; <UNDEFINED> instruction: 0xf0040b00
      b0:	0c00000a 	stceq	0, cr0, [r0], {10}
      b4:	00038204 	andeq	r8, r3, r4, lsl #4
      b8:	37040d00 	strcc	r0, [r4, -r0, lsl #26]
      bc:	0e00000e 	cdpeq	0, 0, cr0, cr0, cr14, {0}
      c0:	000d4804 	andeq	r4, sp, r4, lsl #16
      c4:	d9040f00 	stmdble	r4, {r8, r9, sl, fp}
      c8:	10000006 	andne	r0, r0, r6
      cc:	00002704 	andeq	r2, r0, r4, lsl #14
      d0:	a0041100 	andge	r1, r4, r0, lsl #2
      d4:	1200000c 	andne	r0, r0, #12
      d8:	0006cc04 	andeq	ip, r6, r4, lsl #24
      dc:	0e041300 	cdpeq	3, 0, cr1, cr4, cr0, {0}
      e0:	14000005 	strne	r0, [r0], #-5
      e4:	000f4e04 	andeq	r4, pc, r4, lsl #28
      e8:	e9041500 	stmdb	r4, {r8, sl, ip}
      ec:	16000007 	strne	r0, [r0], -r7
      f0:	000f7804 	andeq	r7, pc, r4, lsl #16
      f4:	9f041700 	svcls	0x00041700
      f8:	18000008 	stmdane	r0, {r3}
      fc:	000e9704 	andeq	r9, lr, r4, lsl #14
     100:	7b041900 	blvc	106508 <startup-0x1fef9af8>
     104:	1a000002 	bne	114 <startup-0x1ffffeec>
     108:	0006a604 	andeq	sl, r6, r4, lsl #12
     10c:	3c041b00 			; <UNDEFINED> instruction: 0x3c041b00
     110:	1c000001 	stcne	0, cr0, [r0], {1}
     114:	000c5404 	andeq	r5, ip, r4, lsl #8
     118:	65041d00 	strvs	r1, [r4, #-3328]	; 0xfffff300
     11c:	1e000005 	cdpne	0, 0, cr0, cr0, cr5, {0}
     120:	00064a04 	andeq	r4, r6, r4, lsl #20
     124:	1e041f00 	cdpne	15, 0, cr1, cr4, cr0, {0}
     128:	20000004 	andcs	r0, r0, r4
     12c:	000a7304 	andeq	r7, sl, r4, lsl #6
     130:	4b042100 	blmi	108538 <startup-0x1fef7ac8>
     134:	22000008 	andcs	r0, r0, #8
     138:	00094304 	andeq	r4, r9, r4, lsl #6
     13c:	c3042300 	movwgt	r2, #17152	; 0x4300
     140:	24000001 	strcs	r0, [r0], #-1
     144:	000c5e04 	andeq	r5, ip, r4, lsl #28
     148:	49042500 	stmdbmi	r4, {r8, sl, sp}
     14c:	2600000e 	strcs	r0, [r0], -lr
     150:	00032304 	andeq	r2, r3, r4, lsl #6
     154:	22042700 	andcs	r2, r4, #0, 14
     158:	2800000c 	stmdacs	r0, {r2, r3}
     15c:	000bda04 	andeq	sp, fp, r4, lsl #20
     160:	17042900 	strne	r2, [r4, -r0, lsl #18]
     164:	2a00000a 	bcs	194 <startup-0x1ffffe6c>
     168:	0001cd04 	andeq	ip, r1, r4, lsl #26
     16c:	39042b00 	stmdbcc	r4, {r8, r9, fp, sp}
     170:	2c000000 	stccs	0, cr0, [r0], {-0}
     174:	00070204 	andeq	r0, r7, r4, lsl #4
     178:	cb042d00 	blgt	10b580 <startup-0x1fef4a80>
     17c:	2e00000f 	cdpcs	0, 0, cr0, cr0, cr15, {0}
     180:	00102804 	andseq	r2, r0, r4, lsl #16
     184:	0c042f00 	stceq	15, cr2, [r4], {-0}
     188:	3000000d 	andcc	r0, r0, sp
     18c:	000fd804 	andeq	sp, pc, r4, lsl #16
     190:	5b043100 	blpl	10c598 <startup-0x1fef3a68>
     194:	32000004 	andcc	r0, r0, #4
     198:	0000b104 	andeq	fp, r0, r4, lsl #2
     19c:	e2043300 	and	r3, r4, #0, 6
     1a0:	34000009 	strcc	r0, [r0], #-9
     1a4:	00089404 	andeq	r9, r8, r4, lsl #8
     1a8:	51043500 	tstpl	r4, r0, lsl #10
     1ac:	3600000a 	strcc	r0, [r0], -sl
     1b0:	00090504 	andeq	r0, r9, r4, lsl #10
     1b4:	0e043700 	cdpeq	7, 0, cr3, cr4, cr0, {0}
     1b8:	38000008 	stmdacc	r0, {r3}
     1bc:	00007a04 	andeq	r7, r0, r4, lsl #20
     1c0:	c3043900 	movwgt	r3, #18688	; 0x4900
     1c4:	3a000010 	bcc	20c <startup-0x1ffffdf4>
     1c8:	000b0204 	andeq	r0, fp, r4, lsl #4
     1cc:	db043b00 	blle	10edd4 <startup-0x1fef122c>
     1d0:	3c000003 	stccc	0, cr0, [r0], {3}
     1d4:	000ddd04 	andeq	sp, sp, r4, lsl #26
     1d8:	1d043d00 	stcne	13, cr3, [r4, #-0]
     1dc:	3e000009 	cdpcc	0, 0, cr0, cr0, cr9, {0}
     1e0:	000b1d04 	andeq	r1, fp, r4, lsl #26
     1e4:	88043f00 	stmdahi	r4, {r8, r9, sl, fp, ip, sp}
     1e8:	40000001 	andmi	r0, r0, r1
     1ec:	000c9204 	andeq	r9, ip, r4, lsl #4
     1f0:	2b044100 	blcs	1105f8 <startup-0x1feefa08>
     1f4:	42000004 	andmi	r0, r0, #4
     1f8:	00072c04 	andeq	r2, r7, r4, lsl #24
     1fc:	45044300 	strmi	r4, [r4, #-768]	; 0xfffffd00
     200:	44000002 	strmi	r0, [r0], #-2
     204:	000d5a04 	andeq	r5, sp, r4, lsl #20
     208:	1a044500 	bne	111610 <startup-0x1feee9f0>
     20c:	46000007 	strmi	r0, [r0], -r7
     210:	00019604 	andeq	r9, r1, r4, lsl #12
     214:	bd044700 	stclt	7, cr4, [r4, #-0]
     218:	4800000d 	stmdami	r0, {r0, r2, r3}
     21c:	000c0b04 	andeq	r0, ip, r4, lsl #22
     220:	e9044900 	stmdb	r4, {r8, fp, lr}
     224:	4a00000e 	bmi	264 <startup-0x1ffffd9c>
     228:	00101504 	andseq	r1, r0, r4, lsl #10
     22c:	56044b00 	strpl	r4, [r4], -r0, lsl #22
     230:	4c000007 	stcmi	0, cr0, [r0], {7}
     234:	00092b04 	andeq	r2, r9, r4, lsl #22
     238:	c6044d00 	strgt	r4, [r4], -r0, lsl #26
     23c:	4e000000 	cdpmi	0, 0, cr0, cr0, cr0, {0}
     240:	000c1804 	andeq	r1, ip, r4, lsl #16
     244:	b3044f00 	movwlt	r4, #20224	; 0x4f00
     248:	50000006 	andpl	r0, r0, r6
     24c:	0009bb04 	andeq	fp, r9, r4, lsl #22
     250:	05005100 	streq	r5, [r0, #-256]	; 0xffffff00
     254:	03cf0601 	biceq	r0, pc, #1048576	; 0x100000
     258:	f7060000 			; <UNDEFINED> instruction: 0xf7060000
     25c:	04000007 	streq	r0, [r0], #-7
     260:	0025032f 	eoreq	r0, r5, pc, lsr #6
     264:	b9070000 	stmdblt	r7, {}	; <UNPREDICTABLE>
     268:	05000001 	streq	r0, [r0, #-1]
     26c:	0002712b 	andeq	r7, r2, fp, lsr #2
     270:	08010500 	stmdaeq	r1, {r8, sl}
     274:	000003cd 	andeq	r0, r0, sp, asr #7
     278:	0f050205 	svceq	0x00050205
     27c:	0700000e 	streq	r0, [r0, -lr]
     280:	000004dc 	ldrdeq	r0, [r0], -ip
     284:	028a3905 	addeq	r3, sl, #81920	; 0x14000
     288:	02050000 	andeq	r0, r5, #0
     28c:	000fa707 	andeq	sl, pc, r7, lsl #14
     290:	103a0700 	eorsne	r0, sl, r0, lsl #14
     294:	4d050000 	stcmi	0, cr0, [r5, #-0]
     298:	0000029c 	muleq	r0, ip, r2
     29c:	14050405 	strne	r0, [r5], #-1029	; 0xfffffbfb
     2a0:	07000009 	streq	r0, [r0, -r9]
     2a4:	000008bd 			; <UNDEFINED> instruction: 0x000008bd
     2a8:	02ae4f05 	adceq	r4, lr, #5, 30
     2ac:	04050000 	streq	r0, [r5], #-0
     2b0:	000c3607 	andeq	r3, ip, r7, lsl #12
     2b4:	05080500 	streq	r0, [r8, #-1280]	; 0xfffffb00
     2b8:	0000090f 	andeq	r0, r0, pc, lsl #18
     2bc:	31070805 	tstcc	r7, r5, lsl #16
     2c0:	0800000c 	stmdaeq	r0, {r2, r3}
     2c4:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
     2c8:	04050074 	streq	r0, [r5], #-116	; 0xffffff8c
     2cc:	000c3b07 	andeq	r3, ip, r7, lsl #22
     2d0:	01bb0700 			; <UNDEFINED> instruction: 0x01bb0700
     2d4:	18060000 	stmdane	r6, {}	; <UNPREDICTABLE>
     2d8:	00000266 	andeq	r0, r0, r6, ror #4
     2dc:	0002d109 	andeq	sp, r2, r9, lsl #2
     2e0:	02d10a00 	sbcseq	r0, r1, #0, 20
     2e4:	e1090000 	mrs	r0, (UNDEF: 9)
     2e8:	07000002 	streq	r0, [r0, -r2]
     2ec:	000004de 	ldrdeq	r0, [r0], -lr
     2f0:	027f2406 	rsbseq	r2, pc, #100663296	; 0x6000000
     2f4:	eb090000 	bl	2402fc <startup-0x1fdbfd04>
     2f8:	07000002 	streq	r0, [r0, -r2]
     2fc:	0000103c 	andeq	r1, r0, ip, lsr r0
     300:	02912c06 	addseq	r2, r1, #1536	; 0x600
     304:	fb090000 	blx	24030e <startup-0x1fdbfcf2>
     308:	07000002 	streq	r0, [r0, -r2]
     30c:	000008bf 			; <UNDEFINED> instruction: 0x000008bf
     310:	02a33006 	adceq	r3, r3, #6
     314:	0b090000 	bleq	24031c <startup-0x1fdbfce4>
     318:	0a000003 	beq	32c <startup-0x1ffffcd4>
     31c:	00000316 	andeq	r0, r0, r6, lsl r3
     320:	010e040b 	tsteq	lr, fp, lsl #8
     324:	03dc01a0 	bicseq	r0, ip, #160, 2	; 0x28
     328:	580c0000 	stmdapl	ip, {}	; <UNPREDICTABLE>
     32c:	01000010 	tsteq	r0, r0, lsl r0
     330:	03ec01a2 	mvneq	r0, #-2147483608	; 0x80000028
     334:	0c000000 	stceq	0, cr0, [r0], {-0}
     338:	000003b9 			; <UNDEFINED> instruction: 0x000003b9
     33c:	f101a301 			; <UNDEFINED> instruction: 0xf101a301
     340:	20000003 	andcs	r0, r0, r3
     344:	000cbb0c 	andeq	fp, ip, ip, lsl #22
     348:	01a40100 			; <UNDEFINED> instruction: 0x01a40100
     34c:	000003ec 	andeq	r0, r0, ip, ror #7
     350:	00050c80 	andeq	r0, r5, r0, lsl #25
     354:	a5010000 	strge	r0, [r1, #-0]
     358:	0003f101 	andeq	pc, r3, r1, lsl #2
     35c:	e80da000 	stmda	sp, {sp, pc}
     360:	0100000f 	tsteq	r0, pc
     364:	03ec01a6 	mvneq	r0, #-2147483607	; 0x80000029
     368:	01000000 	mrseq	r0, (UNDEF: 0)
     36c:	0004470d 	andeq	r4, r4, sp, lsl #14
     370:	01a70100 			; <UNDEFINED> instruction: 0x01a70100
     374:	000003f1 	strdeq	r0, [r0], -r1
     378:	570d0120 	strpl	r0, [sp, -r0, lsr #2]
     37c:	01000001 	tsteq	r0, r1
     380:	03ec01a8 	mvneq	r0, #168, 2	; 0x2a
     384:	01800000 	orreq	r0, r0, r0
     388:	0004510d 	andeq	r5, r4, sp, lsl #2
     38c:	01a90100 			; <UNDEFINED> instruction: 0x01a90100
     390:	000003f1 	strdeq	r0, [r0], -r1
     394:	0b0d01a0 	bleq	340a1c <startup-0x1fcbf5e4>
     398:	01000004 	tsteq	r0, r4
     39c:	03ec01aa 	mvneq	r0, #-2147483606	; 0x8000002a
     3a0:	02000000 	andeq	r0, r0, #0
     3a4:	0003ed0d 	andeq	lr, r3, sp, lsl #26
     3a8:	01ab0100 			; <UNDEFINED> instruction: 0x01ab0100
     3ac:	00000401 	andeq	r0, r0, r1, lsl #8
     3b0:	490e0220 	stmdbmi	lr, {r5, r9}
     3b4:	ac010050 	stcge	0, cr0, [r1], {80}	; 0x50
     3b8:	00042101 	andeq	r2, r4, r1, lsl #2
     3bc:	0d030000 	stceq	0, cr0, [r3, #-0]
     3c0:	000003f7 	strdeq	r0, [r0], -r7
     3c4:	2601ad01 	strcs	sl, [r1], -r1, lsl #26
     3c8:	f0000004 			; <UNDEFINED> instruction: 0xf0000004
     3cc:	06450d03 	strbeq	r0, [r5], -r3, lsl #26
     3d0:	ae010000 	cdpge	0, 0, cr0, cr1, cr0, {0}
     3d4:	00031601 	andeq	r1, r3, r1, lsl #12
     3d8:	000e0000 	andeq	r0, lr, r0
     3dc:	0003160f 	andeq	r1, r3, pc, lsl #12
     3e0:	0003ec00 	andeq	lr, r3, r0, lsl #24
     3e4:	02ca1000 	sbceq	r1, sl, #0
     3e8:	00070000 	andeq	r0, r7, r0
     3ec:	0003dc09 	andeq	sp, r3, r9, lsl #24
     3f0:	030b0f00 	movweq	r0, #48896	; 0xbf00
     3f4:	04010000 	streq	r0, [r1], #-0
     3f8:	ca100000 	bgt	400400 <startup-0x1fbffc00>
     3fc:	17000002 	strne	r0, [r0, -r2]
     400:	030b0f00 	movweq	r0, #48896	; 0xbf00
     404:	04110000 	ldreq	r0, [r1], #-0
     408:	ca100000 	bgt	400410 <startup-0x1fbffbf0>
     40c:	37000002 	strcc	r0, [r0, -r2]
     410:	02dc0f00 	sbcseq	r0, ip, #0, 30
     414:	04210000 	strteq	r0, [r1], #-0
     418:	ca100000 	bgt	400420 <startup-0x1fbffbe0>
     41c:	ef000002 	svc	0x00000002
     420:	04110900 	ldreq	r0, [r1], #-2304	; 0xfffff700
     424:	0b0f0000 	bleq	3c042c <startup-0x1fc3fbd4>
     428:	37000003 	strcc	r0, [r0, -r3]
     42c:	11000004 	tstne	r0, r4
     430:	000002ca 	andeq	r0, r0, sl, asr #5
     434:	06000283 	streq	r0, [r0], -r3, lsl #5
     438:	00000bf1 	strdeq	r0, [r0], -r1
     43c:	2001af01 	andcs	sl, r1, r1, lsl #30
     440:	12000003 	andne	r0, r0, #3
     444:	01c0018c 	biceq	r0, r0, ip, lsl #3
     448:	0000055e 	andeq	r0, r0, lr, asr r5
     44c:	00021a0c 	andeq	r1, r2, ip, lsl #20
     450:	01c20100 	biceq	r0, r2, r0, lsl #2
     454:	0000031b 	andeq	r0, r0, fp, lsl r3
     458:	03370c00 	teqeq	r7, #0, 24
     45c:	c3010000 	movwgt	r0, #4096	; 0x1000
     460:	00031601 	andeq	r1, r3, r1, lsl #12
     464:	ac0c0400 	cfstrsge	mvf0, [ip], {-0}
     468:	01000000 	mrseq	r0, (UNDEF: 0)
     46c:	031601c4 	tsteq	r6, #196, 2	; 0x31
     470:	0c080000 	stceq	0, cr0, [r8], {-0}
     474:	000001fa 	strdeq	r0, [r0], -sl
     478:	1601c501 	strne	ip, [r1], -r1, lsl #10
     47c:	0c000003 	stceq	0, cr0, [r0], {3}
     480:	52435313 	subpl	r5, r3, #1275068416	; 0x4c000000
     484:	01c60100 	biceq	r0, r6, r0, lsl #2
     488:	00000316 	andeq	r0, r0, r6, lsl r3
     48c:	43431310 	movtmi	r1, #13072	; 0x3310
     490:	c7010052 	smlsdgt	r1, r2, r0, r0
     494:	00031601 	andeq	r1, r3, r1, lsl #12
     498:	53131400 	tstpl	r3, #0, 8
     49c:	01005048 	tsteq	r0, r8, asr #32
     4a0:	056e01c8 	strbeq	r0, [lr, #-456]!	; 0xfffffe38
     4a4:	0c180000 	ldceq	0, cr0, [r8], {-0}
     4a8:	00000637 	andeq	r0, r0, r7, lsr r6
     4ac:	1601c901 	strne	ip, [r1], -r1, lsl #18
     4b0:	24000003 	strcs	r0, [r0], #-3
     4b4:	000d2a0c 	andeq	r2, sp, ip, lsl #20
     4b8:	01ca0100 	biceq	r0, sl, r0, lsl #2
     4bc:	00000316 	andeq	r0, r0, r6, lsl r3
     4c0:	051c0c28 	ldreq	r0, [ip, #-3112]	; 0xfffff3d8
     4c4:	cb010000 	blgt	404cc <startup-0x1ffbfb34>
     4c8:	00031601 	andeq	r1, r3, r1, lsl #12
     4cc:	8f0c2c00 	svchi	0x000c2c00
     4d0:	01000004 	tsteq	r0, r4
     4d4:	031601cc 	tsteq	r6, #204, 2	; 0x33
     4d8:	0c300000 	ldceq	0, cr0, [r0], #-0
     4dc:	00000e09 	andeq	r0, r0, r9, lsl #28
     4e0:	1601cd01 	strne	ip, [r1], -r1, lsl #26
     4e4:	34000003 	strcc	r0, [r0], #-3
     4e8:	000ae10c 	andeq	lr, sl, ip, lsl #2
     4ec:	01ce0100 	biceq	r0, lr, r0, lsl #2
     4f0:	00000316 	andeq	r0, r0, r6, lsl r3
     4f4:	0cf30c38 	ldcleq	12, cr0, [r3], #224	; 0xe0
     4f8:	cf010000 	svcgt	0x00010000
     4fc:	00031601 	andeq	r1, r3, r1, lsl #12
     500:	50133c00 	andspl	r3, r3, r0, lsl #24
     504:	01005246 	tsteq	r0, r6, asr #4
     508:	058801d0 	streq	r0, [r8, #464]	; 0x1d0
     50c:	13400000 	movtne	r0, #0
     510:	00524644 	subseq	r4, r2, r4, asr #12
     514:	1b01d101 	blne	74920 <startup-0x1ff8b6e0>
     518:	48000003 	stmdami	r0, {r0, r1}
     51c:	52444113 	subpl	r4, r4, #-1073741820	; 0xc0000004
     520:	01d20100 	bicseq	r0, r2, r0, lsl #2
     524:	0000031b 	andeq	r0, r0, fp, lsl r3
     528:	0df80c4c 	ldcleq	12, cr0, [r8, #304]!	; 0x130
     52c:	d3010000 	movwle	r0, #4096	; 0x1000
     530:	0005a201 	andeq	sl, r5, r1, lsl #4
     534:	320c5000 	andcc	r5, ip, #0
     538:	0100000e 	tsteq	r0, lr
     53c:	05bc01d4 	ldreq	r0, [ip, #468]!	; 0x1d4
     540:	0c600000 	stcleq	0, cr0, [r0], #-0
     544:	000003b9 			; <UNDEFINED> instruction: 0x000003b9
     548:	c101d501 	tstgt	r1, r1, lsl #10
     54c:	74000005 	strvc	r0, [r0], #-5
     550:	000fe20c 	andeq	lr, pc, ip, lsl #4
     554:	01d60100 	bicseq	r0, r6, r0, lsl #2
     558:	00000316 	andeq	r0, r0, r6, lsl r3
     55c:	dc0f0088 	stcle	0, cr0, [pc], {136}	; 0x88
     560:	6e000002 	cdpvs	0, 0, cr0, cr0, cr2, {0}
     564:	10000005 	andne	r0, r0, r5
     568:	000002ca 	andeq	r0, r0, sl, asr #5
     56c:	5e09000b 	cdppl	0, 0, cr0, cr9, cr11, {0}
     570:	0f000005 	svceq	0x00000005
     574:	0000031b 	andeq	r0, r0, fp, lsl r3
     578:	00000583 	andeq	r0, r0, r3, lsl #11
     57c:	0002ca10 	andeq	ip, r2, r0, lsl sl
     580:	0a000100 	beq	988 <startup-0x1ffff678>
     584:	00000573 	andeq	r0, r0, r3, ror r5
     588:	00058309 	andeq	r8, r5, r9, lsl #6
     58c:	031b0f00 	tsteq	fp, #0, 30
     590:	059d0000 	ldreq	r0, [sp]
     594:	ca100000 	bgt	40059c <startup-0x1fbffa64>
     598:	03000002 	movweq	r0, #2
     59c:	058d0a00 	streq	r0, [sp, #2560]	; 0xa00
     5a0:	9d090000 	stcls	0, cr0, [r9, #-0]
     5a4:	0f000005 	svceq	0x00000005
     5a8:	0000031b 	andeq	r0, r0, fp, lsl r3
     5ac:	000005b7 			; <UNDEFINED> instruction: 0x000005b7
     5b0:	0002ca10 	andeq	ip, r2, r0, lsl sl
     5b4:	0a000400 	beq	15bc <startup-0x1fffea44>
     5b8:	000005a7 	andeq	r0, r0, r7, lsr #11
     5bc:	0005b709 	andeq	fp, r5, r9, lsl #14
     5c0:	030b0f00 	movweq	r0, #48896	; 0xbf00
     5c4:	05d10000 	ldrbeq	r0, [r1]
     5c8:	ca100000 	bgt	4005d0 <startup-0x1fbffa30>
     5cc:	04000002 	streq	r0, [r0], #-2
     5d0:	04750600 	ldrbteq	r0, [r5], #-1536	; 0xfffffa00
     5d4:	d7010000 	strle	r0, [r1, -r0]
     5d8:	00044301 	andeq	r4, r4, r1, lsl #6
     5dc:	01101200 	tsteq	r0, r0, lsl #4
     5e0:	061b02bf 			; <UNDEFINED> instruction: 0x061b02bf
     5e4:	4c0c0000 	stcmi	0, cr0, [ip], {-0}
     5e8:	0100000a 	tsteq	r0, sl
     5ec:	031602c1 	tsteq	r6, #268435468	; 0x1000000c
     5f0:	0c000000 	stceq	0, cr0, [r0], {-0}
     5f4:	00000d74 	andeq	r0, r0, r4, ror sp
     5f8:	1602c201 	strne	ip, [r2], -r1, lsl #4
     5fc:	04000003 	streq	r0, [r0], #-3
     600:	4c415613 	mcrrmi	6, 1, r5, r1, cr3
     604:	02c30100 	sbceq	r0, r3, #0, 2
     608:	00000316 	andeq	r0, r0, r6, lsl r3
     60c:	0cff0c08 	ldcleq	12, cr0, [pc], #32	; 634 <startup-0x1ffff9cc>
     610:	c4010000 	strgt	r0, [r1], #-0
     614:	00031b02 	andeq	r1, r3, r2, lsl #22
     618:	06000c00 	streq	r0, [r0], -r0, lsl #24
     61c:	00000b68 	andeq	r0, r0, r8, ror #22
     620:	dd02c501 	cfstr32le	mvfx12, [r2, #-4]
     624:	0f000005 	svceq	0x00000005
     628:	0000030b 	andeq	r0, r0, fp, lsl #6
     62c:	00000637 	andeq	r0, r0, r7, lsr r6
     630:	0002ca10 	andeq	ip, r2, r0, lsl sl
     634:	14000100 	strne	r0, [r0], #-256	; 0xffffff00
     638:	00000eaa 	andeq	r0, r0, sl, lsr #29
     63c:	0606fa01 	streq	pc, [r6], -r1, lsl #20
     640:	15000003 	strne	r0, [r0, #-3]
     644:	000007c9 	andeq	r0, r0, r9, asr #15
     648:	030b3b07 	movweq	r3, #47879	; 0xbb07
     64c:	07160000 	ldreq	r0, [r6, -r0]
     650:	00027101 	andeq	r7, r2, r1, lsl #2
     654:	035d0400 	cmpeq	sp, #0, 8
     658:	00000669 	andeq	r0, r0, r9, ror #12
     65c:	00114304 	andseq	r4, r1, r4, lsl #6
     660:	53170000 	tstpl	r7, #0
     664:	01005445 	tsteq	r0, r5, asr #8
     668:	09770600 	ldmdbeq	r7!, {r9, sl}^
     66c:	5d040000 	stcpl	0, cr0, [r4, #-0]
     670:	00064e03 	andeq	r4, r6, r3, lsl #28
     674:	0a380600 	beq	e01e7c <startup-0x1f1fe184>
     678:	5d040000 	stcpl	0, cr0, [r4, #-0]
     67c:	00064e03 	andeq	r4, r6, r3, lsl #28
     680:	01071600 	tsteq	r7, r0, lsl #12
     684:	00000271 	andeq	r0, r0, r1, ror r2
     688:	9c035f04 	stcls	15, cr5, [r3], {4}
     68c:	04000006 	streq	r0, [r0], #-6
     690:	0000094d 	andeq	r0, r0, sp, asr #18
     694:	0e5f0400 	cdpeq	4, 5, cr0, cr15, cr0, {0}
     698:	00010000 	andeq	r0, r1, r0
     69c:	000bfb06 	andeq	pc, fp, r6, lsl #22
     6a0:	035f0400 	cmpeq	pc, #0, 8
     6a4:	00000681 	andeq	r0, r0, r1, lsl #13
     6a8:	71010716 	tstvc	r1, r6, lsl r7
     6ac:	04000002 	streq	r0, [r0], #-2
     6b0:	06c30362 	strbeq	r0, [r3], r2, ror #6
     6b4:	45040000 	strmi	r0, [r4, #-0]
     6b8:	00000008 	andeq	r0, r0, r8
     6bc:	000c8004 	andeq	r8, ip, r4
     6c0:	06000100 	streq	r0, [r0], -r0, lsl #2
     6c4:	00000b9c 	muleq	r0, ip, fp
     6c8:	a8036204 	stmdage	r3, {r2, r9, sp, lr}
     6cc:	12000006 	andne	r0, r0, #6
     6d0:	05c30428 	strbeq	r0, [r3, #1064]	; 0x428
     6d4:	0000075b 	andeq	r0, r0, fp, asr r7
     6d8:	000f370c 	andeq	r3, pc, ip, lsl #14
     6dc:	05c50400 	strbeq	r0, [r5, #1024]	; 0x400
     6e0:	00000316 	andeq	r0, r0, r6, lsl r3
     6e4:	0cf80c00 	ldcleq	12, cr0, [r8]
     6e8:	c6040000 	strgt	r0, [r4], -r0
     6ec:	00031605 	andeq	r1, r3, r5, lsl #12
     6f0:	700c0400 	andvc	r0, ip, r0, lsl #8
     6f4:	04000008 	streq	r0, [r0], #-8
     6f8:	031605c7 	tsteq	r6, #834666496	; 0x31c00000
     6fc:	0c080000 	stceq	0, cr0, [r8], {-0}
     700:	00000937 	andeq	r0, r0, r7, lsr r9
     704:	1605c804 	strne	ip, [r5], -r4, lsl #16
     708:	0c000003 	stceq	0, cr0, [r0], {3}
     70c:	52444913 	subpl	r4, r4, #311296	; 0x4c000
     710:	05c90400 	strbeq	r0, [r9, #1024]	; 0x400
     714:	00000316 	andeq	r0, r0, r6, lsl r3
     718:	444f1310 	strbmi	r1, [pc], #-784	; 720 <startup-0x1ffff8e0>
     71c:	ca040052 	bgt	10086c <startup-0x1feff794>
     720:	00031605 	andeq	r1, r3, r5, lsl #12
     724:	8d0c1400 	cfstrshi	mvf1, [ip, #-0]
     728:	04000009 	streq	r0, [r0], #-9
     72c:	02f605cb 	rscseq	r0, r6, #851443712	; 0x32c00000
     730:	0c180000 	ldceq	0, cr0, [r8], {-0}
     734:	0000096a 	andeq	r0, r0, sl, ror #18
     738:	f605cc04 			; <UNDEFINED> instruction: 0xf605cc04
     73c:	1a000002 	bne	74c <startup-0x1ffff8b4>
     740:	00082f0c 	andeq	r2, r8, ip, lsl #30
     744:	05cd0400 	strbeq	r0, [sp, #1024]	; 0x400
     748:	00000316 	andeq	r0, r0, r6, lsl r3
     74c:	4641131c 			; <UNDEFINED> instruction: 0x4641131c
     750:	ce040052 	mcrgt	0, 0, r0, cr4, cr2, {2}
     754:	00076b05 	andeq	r6, r7, r5, lsl #22
     758:	0f002000 	svceq	0x00002000
     75c:	00000316 	andeq	r0, r0, r6, lsl r3
     760:	0000076b 	andeq	r0, r0, fp, ror #14
     764:	0002ca10 	andeq	ip, r2, r0, lsl sl
     768:	09000100 	stmdbeq	r0, {r8}
     76c:	0000075b 	andeq	r0, r0, fp, asr r7
     770:	000e8a06 	andeq	r8, lr, r6, lsl #20
     774:	05cf0400 	strbeq	r0, [pc, #1024]	; b7c <startup-0x1ffff484>
     778:	000006cf 	andeq	r0, r0, pc, asr #13
     77c:	64049812 	strvs	r9, [r4], #-2066	; 0xfffff7ee
     780:	00093f06 	andeq	r3, r9, r6, lsl #30
     784:	52431300 	subpl	r1, r3, #0, 6
     788:	06660400 	strbteq	r0, [r6], -r0, lsl #8
     78c:	00000316 	andeq	r0, r0, r6, lsl r3
     790:	088c0c00 	stmeq	ip, {sl, fp}
     794:	67040000 	strvs	r0, [r4, -r0]
     798:	00031606 	andeq	r1, r3, r6, lsl #12
     79c:	8b0c0400 	blhi	3017a4 <startup-0x1fcfe85c>
     7a0:	0400000f 	streq	r0, [r0], #-15
     7a4:	03160668 	tsteq	r6, #104, 12	; 0x6800000
     7a8:	13080000 	movwne	r0, #32768	; 0x8000
     7ac:	00524943 	subseq	r4, r2, r3, asr #18
     7b0:	16066904 	strne	r6, [r6], -r4, lsl #18
     7b4:	0c000003 	stceq	0, cr0, [r0], {3}
     7b8:	0004940c 	andeq	r9, r4, ip, lsl #8
     7bc:	066a0400 	strbteq	r0, [sl], -r0, lsl #8
     7c0:	00000316 	andeq	r0, r0, r6, lsl r3
     7c4:	0dd40c10 	ldcleq	12, cr0, [r4, #64]	; 0x40
     7c8:	6b040000 	blvs	1007d0 <startup-0x1feff830>
     7cc:	00031606 	andeq	r1, r3, r6, lsl #12
     7d0:	930c1400 	movwls	r1, #50176	; 0xc400
     7d4:	0400000b 	streq	r0, [r0], #-11
     7d8:	0316066c 	tsteq	r6, #108, 12	; 0x6c00000
     7dc:	0c180000 	ldceq	0, cr0, [r8], {-0}
     7e0:	000003b9 			; <UNDEFINED> instruction: 0x000003b9
     7e4:	0b066d04 	bleq	19bbfc <startup-0x1fe64404>
     7e8:	1c000003 	stcne	0, cr0, [r0], {3}
     7ec:	000bd10c 	andeq	sp, fp, ip, lsl #2
     7f0:	066e0400 	strbteq	r0, [lr], -r0, lsl #8
     7f4:	00000316 	andeq	r0, r0, r6, lsl r3
     7f8:	09610c20 	stmdbeq	r1!, {r5, sl, fp}^
     7fc:	6f040000 	svcvs	0x00040000
     800:	00031606 	andeq	r1, r3, r6, lsl #12
     804:	c30c2400 	movwgt	r2, #50176	; 0xc400
     808:	04000003 	streq	r0, [r0], #-3
     80c:	06270670 			; <UNDEFINED> instruction: 0x06270670
     810:	0c280000 	stceq	0, cr0, [r8], #-0
     814:	00000d6c 	andeq	r0, r0, ip, ror #26
     818:	16067104 	strne	r7, [r6], -r4, lsl #2
     81c:	30000003 	andcc	r0, r0, r3
     820:	0004e70c 	andeq	lr, r4, ip, lsl #14
     824:	06720400 	ldrbteq	r0, [r2], -r0, lsl #8
     828:	00000316 	andeq	r0, r0, r6, lsl r3
     82c:	10aa0c34 	adcne	r0, sl, r4, lsr ip
     830:	73040000 	movwvc	r0, #16384	; 0x4000
     834:	00031606 	andeq	r1, r3, r6, lsl #12
     838:	470c3800 	strmi	r3, [ip, -r0, lsl #16]
     83c:	04000004 	streq	r0, [r0], #-4
     840:	030b0674 	movweq	r0, #46708	; 0xb674
     844:	0c3c0000 	ldceq	0, cr0, [ip], #-0
     848:	00000be9 	andeq	r0, r0, r9, ror #23
     84c:	16067504 	strne	r7, [r6], -r4, lsl #10
     850:	40000003 	andmi	r0, r0, r3
     854:	0002d20c 	andeq	sp, r2, ip, lsl #4
     858:	06760400 	ldrbteq	r0, [r6], -r0, lsl #8
     85c:	00000316 	andeq	r0, r0, r6, lsl r3
     860:	04510c44 	ldrbeq	r0, [r1], #-3140	; 0xfffff3bc
     864:	77040000 	strvc	r0, [r4, -r0]
     868:	00062706 	andeq	r2, r6, r6, lsl #14
     86c:	ee0c4800 	cdp	8, 0, cr4, cr12, cr0, {0}
     870:	04000002 	streq	r0, [r0], #-2
     874:	03160678 	tsteq	r6, #120, 12	; 0x7800000
     878:	0c500000 	mraeq	r0, r0, acc0
     87c:	000001e1 	andeq	r0, r0, r1, ror #3
     880:	16067904 	strne	r7, [r6], -r4, lsl #18
     884:	54000003 	strpl	r0, [r0], #-3
     888:	000cc00c 	andeq	ip, ip, ip
     88c:	067a0400 	ldrbteq	r0, [sl], -r0, lsl #8
     890:	00000316 	andeq	r0, r0, r6, lsl r3
     894:	03ed0c58 	mvneq	r0, #88, 24	; 0x5800
     898:	7b040000 	blvc	1008a0 <startup-0x1feff760>
     89c:	00030b06 	andeq	r0, r3, r6, lsl #22
     8a0:	e60c5c00 	str	r5, [ip], -r0, lsl #24
     8a4:	0400000a 	streq	r0, [r0], #-10
     8a8:	0316067c 	tsteq	r6, #124, 12	; 0x7c00000
     8ac:	0c600000 	stcleq	0, cr0, [r0], #-0
     8b0:	000009ed 	andeq	r0, r0, sp, ror #19
     8b4:	16067d04 	strne	r7, [r6], -r4, lsl #26
     8b8:	64000003 	strvs	r0, [r0], #-3
     8bc:	0003f70c 	andeq	pc, r3, ip, lsl #14
     8c0:	067e0400 	ldrbteq	r0, [lr], -r0, lsl #8
     8c4:	00000627 	andeq	r0, r0, r7, lsr #12
     8c8:	06320c68 	ldrteq	r0, [r2], -r8, ror #24
     8cc:	7f040000 	svcvc	0x00040000
     8d0:	00031606 	andeq	r1, r3, r6, lsl #12
     8d4:	43137000 	tstmi	r3, #0
     8d8:	04005253 	streq	r5, [r0], #-595	; 0xfffffdad
     8dc:	03160680 	tsteq	r6, #128, 12	; 0x8000000
     8e0:	0c740000 	ldcleq	0, cr0, [r4], #-0
     8e4:	00000401 	andeq	r0, r0, r1, lsl #8
     8e8:	27068104 	strcs	r8, [r6, -r4, lsl #2]
     8ec:	78000006 	stmdavc	r0, {r1, r2}
     8f0:	00093d0c 	andeq	r3, r9, ip, lsl #26
     8f4:	06820400 	streq	r0, [r2], r0, lsl #8
     8f8:	00000316 	andeq	r0, r0, r6, lsl r3
     8fc:	004c0c80 	subeq	r0, ip, r0, lsl #25
     900:	83040000 	movwhi	r0, #16384	; 0x4000
     904:	00031606 	andeq	r1, r3, r6, lsl #12
     908:	850c8400 	strhi	r8, [ip, #-1024]	; 0xfffffc00
     90c:	0400000f 	streq	r0, [r0], #-15
     910:	03160684 	tsteq	r6, #132, 12	; 0x8400000
     914:	0c880000 	stceq	0, cr0, [r8], {0}
     918:	0000032f 	andeq	r0, r0, pc, lsr #6
     91c:	16068504 	strne	r8, [r6], -r4, lsl #10
     920:	8c000003 	stchi	0, cr0, [r0], {3}
     924:	000b140c 	andeq	r1, fp, ip, lsl #8
     928:	06860400 	streq	r0, [r6], r0, lsl #8
     92c:	00000316 	andeq	r0, r0, r6, lsl r3
     930:	0d210c90 	stceq	12, cr0, [r1, #-576]!	; 0xfffffdc0
     934:	87040000 	strhi	r0, [r4, -r0]
     938:	00031606 	andeq	r1, r3, r6, lsl #12
     93c:	06009400 	streq	r9, [r0], -r0, lsl #8
     940:	00000dfd 	strdeq	r0, [r0], -sp
     944:	7c068904 			; <UNDEFINED> instruction: 0x7c068904
     948:	18000007 	stmdane	r0, {r0, r1, r2}
     94c:	84300810 	ldrthi	r0, [r0], #-2064	; 0xfffff7f0
     950:	19000009 	stmdbne	r0, {r0, r3}
     954:	00000fed 	andeq	r0, r0, sp, ror #31
     958:	030b3208 	movweq	r3, #45576	; 0xb208
     95c:	19000000 	stmdbne	r0, {}	; <UNPREDICTABLE>
     960:	0000008c 	andeq	r0, r0, ip, lsl #1
     964:	030b3308 	movweq	r3, #45832	; 0xb308
     968:	19040000 	stmdbne	r4, {}	; <UNPREDICTABLE>
     96c:	0000052c 	andeq	r0, r0, ip, lsr #10
     970:	030b3408 	movweq	r3, #46088	; 0xb408
     974:	19080000 	stmdbne	r8, {}	; <UNPREDICTABLE>
     978:	000004ef 	andeq	r0, r0, pc, ror #9
     97c:	030b3508 	movweq	r3, #46344	; 0xb508
     980:	000c0000 	andeq	r0, ip, r0
     984:	000de607 	andeq	lr, sp, r7, lsl #12
     988:	4b360800 	blmi	d82990 <startup-0x1f27d670>
     98c:	0f000009 	svceq	0x00000009
     990:	000002e6 	andeq	r0, r0, r6, ror #5
     994:	0000099f 	muleq	r0, pc, r9	; <UNPREDICTABLE>
     998:	0002ca10 	andeq	ip, r2, r0, lsl sl
     99c:	0a000f00 	beq	45a4 <startup-0x1fffba5c>
     9a0:	0000098f 	andeq	r0, r0, pc, lsl #19
     9a4:	00099f09 	andeq	r9, r9, r9, lsl #30
     9a8:	08c81a00 	stmiaeq	r8, {r9, fp, ip}^
     9ac:	99020000 	stmdbls	r2, {}	; <UNPREDICTABLE>
     9b0:	000009a4 	andeq	r0, r0, r4, lsr #19
     9b4:	14c80305 	strbne	r0, [r8], #773	; 0x305
     9b8:	071b2000 	ldreq	r2, [fp, -r0]
     9bc:	00027101 	andeq	r7, r2, r1, lsl #2
     9c0:	e0420900 	sub	r0, r2, r0, lsl #18
     9c4:	04000009 	streq	r0, [r0], #-9
     9c8:	00000801 	andeq	r0, r0, r1, lsl #16
     9cc:	06980400 	ldreq	r0, [r8], r0, lsl #8
     9d0:	04010000 	streq	r0, [r1], #-0
     9d4:	00000257 	andeq	r0, r0, r7, asr r2
     9d8:	02930402 	addseq	r0, r3, #33554432	; 0x2000000
     9dc:	00030000 	andeq	r0, r3, r0
     9e0:	000cca07 	andeq	ip, ip, r7, lsl #20
     9e4:	ba470900 	blt	11c2dec <startup-0x1ee3d214>
     9e8:	1b000009 	blne	a14 <startup-0x1ffff5ec>
     9ec:	02710107 	rsbseq	r0, r1, #-1073741823	; 0xc0000001
     9f0:	4f090000 	svcmi	0x00090000
     9f4:	00000a05 	andeq	r0, r0, r5, lsl #20
     9f8:	00041004 	andeq	r1, r4, r4
     9fc:	48040000 	stmdami	r4, {}	; <UNPREDICTABLE>
     a00:	01000003 	tsteq	r0, r3
     a04:	010a0700 	tsteq	sl, r0, lsl #14
     a08:	52090000 	andpl	r0, r9, #0
     a0c:	000009eb 	andeq	r0, r0, fp, ror #19
     a10:	7101071b 	tstvc	r1, fp, lsl r7
     a14:	09000002 	stmdbeq	r0, {r1}
     a18:	000a365a 	andeq	r3, sl, sl, asr r6
     a1c:	04ff0400 	ldrbteq	r0, [pc], #1024	; a24 <startup-0x1ffff5dc>
     a20:	04000000 	streq	r0, [r0], #-0
     a24:	000008d9 	ldrdeq	r0, [r0], -r9
     a28:	10d50401 	sbcsne	r0, r5, r1, lsl #8
     a2c:	04020000 	streq	r0, [r2], #-0
     a30:	00000993 	muleq	r0, r3, r9
     a34:	79070003 	stmdbvc	r7, {r0, r1}
     a38:	0900000d 	stmdbeq	r0, {r0, r2, r3}
     a3c:	000a105f 	andeq	r1, sl, pc, asr r0
     a40:	01071b00 	tsteq	r7, r0, lsl #22
     a44:	00000271 	andeq	r0, r0, r1, ror r2
     a48:	0a616e09 	beq	185c274 <startup-0x1e7a3d8c>
     a4c:	9b040000 	blls	100a54 <startup-0x1feff5ac>
     a50:	00000000 	andeq	r0, r0, r0
     a54:	000f6b04 	andeq	r6, pc, r4, lsl #22
     a58:	eb040100 	bl	100e60 <startup-0x1feff1a0>
     a5c:	02000001 	andeq	r0, r0, #1
     a60:	047e0700 	ldrbteq	r0, [lr], #-1792	; 0xfffff900
     a64:	72090000 	andvc	r0, r9, #0
     a68:	00000a41 	andeq	r0, r0, r1, asr #20
     a6c:	84090818 	strhi	r0, [r9], #-2072	; 0xfffff7e8
     a70:	00000ab1 			; <UNDEFINED> instruction: 0x00000ab1
     a74:	000d9d19 	andeq	r9, sp, r9, lsl sp
     a78:	0b860900 	bleq	fe182e80 <GPIO_Pins+0xde1819a8>
     a7c:	00000003 	andeq	r0, r0, r3
     a80:	000c8819 	andeq	r8, ip, r9, lsl r8
     a84:	e0890900 	add	r0, r9, r0, lsl #18
     a88:	04000009 	streq	r0, [r0], #-9
     a8c:	000a6819 	andeq	r6, sl, r9, lsl r8
     a90:	368c0900 	strcc	r0, [ip], r0, lsl #18
     a94:	0500000a 	streq	r0, [r0, #-10]
     a98:	0008b219 	andeq	fp, r8, r9, lsl r2
     a9c:	058f0900 	streq	r0, [pc, #2304]	; 13a4 <startup-0x1fffec5c>
     aa0:	0600000a 	streq	r0, [r0], -sl
     aa4:	000dca19 	andeq	ip, sp, r9, lsl sl
     aa8:	61920900 	orrsvs	r0, r2, r0, lsl #18
     aac:	0700000a 	streq	r0, [r0, -sl]
     ab0:	03600700 	cmneq	r0, #0, 14
     ab4:	94090000 	strls	r0, [r9], #-0
     ab8:	00000a6c 	andeq	r0, r0, ip, ror #20
     abc:	0002eb0f 	andeq	lr, r2, pc, lsl #22
     ac0:	000acc00 	andeq	ip, sl, r0, lsl #24
     ac4:	02ca1000 	sbceq	r1, sl, #0
     ac8:	000f0000 	andeq	r0, pc, r0
     acc:	00068e1c 	andeq	r8, r6, ip, lsl lr
     ad0:	bc180300 	ldclt	3, cr0, [r8], {-0}
     ad4:	0500000a 	streq	r0, [r0, #-10]
     ad8:	0014d803 	andseq	sp, r4, r3, lsl #16
     adc:	08581c20 	ldmdaeq	r8, {r5, sl, fp, ip}^
     ae0:	32030000 	andcc	r0, r3, #0
     ae4:	00000316 	andeq	r0, r0, r6, lsl r3
     ae8:	14c40305 	strbne	r0, [r4], #773	; 0x305
     aec:	e41d2000 	ldr	r2, [sp], #-0
     af0:	0300000e 	movweq	r0, #14
     af4:	000e643e 	andeq	r6, lr, lr, lsr r4
     af8:	00003820 	andeq	r3, r0, r0, lsr #16
     afc:	129c0100 	addsne	r0, ip, #0, 2
     b00:	1a00000b 	bne	b34 <startup-0x1ffff4cc>
     b04:	000004b4 			; <UNDEFINED> instruction: 0x000004b4
     b08:	030b4303 	movweq	r4, #45827	; 0xb303
     b0c:	91020000 	mrsls	r0, (UNDEF: 2)
     b10:	201e0074 	andscs	r0, lr, r4, ror r0
     b14:	03000002 	movweq	r0, #2
     b18:	000e1034 	andeq	r1, lr, r4, lsr r0
     b1c:	00005420 	andeq	r5, r0, r0, lsr #8
     b20:	1f9c0100 	svcne	0x009c0100
     b24:	00000356 	andeq	r0, r0, r6, asr r3
     b28:	0da81e03 	stceq	14, cr1, [r8, #12]!
     b2c:	00682000 	rsbeq	r2, r8, r0
     b30:	9c010000 	stcls	0, cr0, [r1], {-0}
     b34:	00000b47 	andeq	r0, r0, r7, asr #22
     b38:	00035b1a 	andeq	r5, r3, sl, lsl fp
     b3c:	b1210300 			; <UNDEFINED> instruction: 0xb1210300
     b40:	0200000a 	andeq	r0, r0, #10
     b44:	20007091 	mulcs	r0, r1, r0
     b48:	00000bba 			; <UNDEFINED> instruction: 0x00000bba
     b4c:	00000e03 	andeq	r0, r0, r3, lsl #28
     b50:	000c2000 	andeq	r2, ip, r0
     b54:	9c010000 	stcls	0, cr0, [r1], {-0}
     b58:	000a8021 	andeq	r8, sl, r1, lsr #32
     b5c:	0c5e0200 	lfmeq	f0, 2, [lr], {-0}
     b60:	20000d88 	andcs	r0, r0, r8, lsl #27
     b64:	00000020 	andeq	r0, r0, r0, lsr #32
     b68:	0b7e9c01 	bleq	1fa7b74 <startup-0x1e05848c>
     b6c:	2b220000 	blcs	880b74 <startup-0x1f77f48c>
     b70:	0200000e 	andeq	r0, r0, #14
     b74:	02d10c5e 	sbcseq	r0, r1, #24064	; 0x5e00
     b78:	91020000 	mrsls	r0, (UNDEF: 2)
     b7c:	31230077 			; <UNDEFINED> instruction: 0x31230077
     b80:	0200000a 	andeq	r0, r0, #10
     b84:	06750c3c 			; <UNDEFINED> instruction: 0x06750c3c
     b88:	0d440000 	stcleq	0, cr0, [r4, #-0]
     b8c:	00442000 	subeq	r2, r4, r0
     b90:	9c010000 	stcls	0, cr0, [r1], {-0}
     b94:	00000bb7 			; <UNDEFINED> instruction: 0x00000bb7
     b98:	000e2b22 	andeq	r2, lr, r2, lsr #22
     b9c:	0c3c0200 	lfmeq	f0, 4, [ip], #-0
     ba0:	000002d1 	ldrdeq	r0, [r0], -r1
     ba4:	246f9102 	strbtcs	r9, [pc], #-258	; bac <startup-0x1ffff454>
     ba8:	00000e55 	andeq	r0, r0, r5, asr lr
     bac:	750c3e02 	strvc	r3, [ip, #-3586]	; 0xfffff1fe
     bb0:	02000006 	andeq	r0, r0, #6
     bb4:	25007791 	strcs	r7, [r0, #-1937]	; 0xfffff86f
     bb8:	00000616 	andeq	r0, r0, r6, lsl r6
     bbc:	280c2802 	stmdacs	ip, {r1, fp, sp}
     bc0:	1c20000d 	stcne	0, cr0, [r0], #-52	; 0xffffffcc
     bc4:	01000000 	mrseq	r0, (UNDEF: 0)
     bc8:	0970239c 	ldmdbeq	r0!, {r2, r3, r4, r7, r8, r9, sp}^
     bcc:	fb020000 	blx	80bd6 <startup-0x1ff7f42a>
     bd0:	0006690b 	andeq	r6, r6, fp, lsl #18
     bd4:	000ca400 	andeq	sl, ip, r0, lsl #8
     bd8:	00008420 	andeq	r8, r0, r0, lsr #8
     bdc:	209c0100 	addscs	r0, ip, r0, lsl #2
     be0:	2200000c 	andcs	r0, r0, #12
     be4:	00000a28 	andeq	r0, r0, r8, lsr #20
     be8:	d10bfb02 	tstle	fp, r2, lsl #22	; <UNPREDICTABLE>
     bec:	02000002 	andeq	r0, r0, #2
     bf0:	74266791 	strtvc	r6, [r6], #-1937	; 0xfffff86f
     bf4:	0200706d 	andeq	r7, r0, #109	; 0x6d
     bf8:	030b0bfd 	movweq	r0, #48125	; 0xbbfd
     bfc:	91020000 	mrsls	r0, (UNDEF: 2)
     c00:	0ac8246c 	beq	ff209db8 <GPIO_Pins+0xdf2088e0>
     c04:	fe020000 	cdp2	0, 0, cr0, cr2, cr0, {0}
     c08:	00030b0b 	andeq	r0, r3, fp, lsl #22
     c0c:	74910200 	ldrvc	r0, [r1], #512	; 0x200
     c10:	000e5524 	andeq	r5, lr, r4, lsr #10
     c14:	0bff0200 	bleq	fffc141c <GPIO_Pins+0xdffbff44>
     c18:	00000669 	andeq	r0, r0, r9, ror #12
     c1c:	00739102 	rsbseq	r9, r3, r2, lsl #2
     c20:	0009a321 	andeq	sl, r9, r1, lsr #6
     c24:	0bd60200 	bleq	ff58142c <GPIO_Pins+0xdf57ff54>
     c28:	20000c54 	andcs	r0, r0, r4, asr ip
     c2c:	00000050 	andeq	r0, r0, r0, asr r0
     c30:	0c559c01 	mrrceq	12, 0, r9, r5, cr1
     c34:	2b220000 	blcs	880c3c <startup-0x1f77f3c4>
     c38:	0200000e 	andeq	r0, r0, #14
     c3c:	02d10bd6 	sbcseq	r0, r1, #219136	; 0x35800
     c40:	91020000 	mrsls	r0, (UNDEF: 2)
     c44:	0a5f2277 	beq	17c9628 <startup-0x1e8369d8>
     c48:	d6020000 	strle	r0, [r2], -r0
     c4c:	00069c0b 	andeq	r9, r6, fp, lsl #24
     c50:	76910200 	ldrvc	r0, [r1], r0, lsl #4
     c54:	0ca92100 	stfeqs	f2, [r9]
     c58:	9e020000 	cdpls	0, 0, cr0, cr2, cr0, {0}
     c5c:	000c180a 	andeq	r1, ip, sl, lsl #16
     c60:	00003c20 	andeq	r3, r0, r0, lsr #24
     c64:	7b9c0100 	blvc	fe70106c <GPIO_Pins+0xde6ffb94>
     c68:	2200000c 	andcs	r0, r0, #12
     c6c:	00000133 	andeq	r0, r0, r3, lsr r1
     c70:	d10a9e02 	tstle	sl, r2, lsl #28
     c74:	02000002 	andeq	r0, r0, #2
     c78:	21007791 			; <UNDEFINED> instruction: 0x21007791
     c7c:	000000d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     c80:	d80a8602 	stmdale	sl, {r1, r9, sl, pc}
     c84:	4020000b 	eormi	r0, r0, fp
     c88:	01000000 	mrseq	r0, (UNDEF: 0)
     c8c:	000cb09c 	muleq	ip, ip, r0
     c90:	0ad22200 	beq	ff489498 <GPIO_Pins+0xdf487fc0>
     c94:	86020000 	strhi	r0, [r2], -r0
     c98:	00030b0a 	andeq	r0, r3, sl, lsl #22
     c9c:	74910200 	ldrvc	r0, [r1], #512	; 0x200
     ca0:	000a5f22 	andeq	r5, sl, r2, lsr #30
     ca4:	0a860200 	beq	fe1814ac <GPIO_Pins+0xde17ffd4>
     ca8:	0000069c 	muleq	r0, ip, r6
     cac:	00739102 	rsbseq	r9, r3, r2, lsl #2
     cb0:	000e6d21 	andeq	r6, lr, r1, lsr #26
     cb4:	0a520200 	beq	14814bc <startup-0x1eb7eb44>
     cb8:	20000b98 	mulcs	r0, r8, fp
     cbc:	00000040 	andeq	r0, r0, r0, asr #32
     cc0:	0ce59c01 	stcleq	12, cr9, [r5], #4
     cc4:	f7220000 			; <UNDEFINED> instruction: 0xf7220000
     cc8:	02000009 	andeq	r0, r0, #9
     ccc:	030b0a52 	movweq	r0, #47698	; 0xba52
     cd0:	91020000 	mrsls	r0, (UNDEF: 2)
     cd4:	0a5f2274 	beq	17c96ac <startup-0x1e836954>
     cd8:	52020000 	andpl	r0, r2, #0
     cdc:	00069c0a 	andeq	r9, r6, sl, lsl #24
     ce0:	73910200 	orrsvc	r0, r1, #0, 4
     ce4:	04bf2100 	ldrteq	r2, [pc], #256	; cec <startup-0x1ffff314>
     ce8:	19020000 	stmdbne	r2, {}	; <UNPREDICTABLE>
     cec:	000b580a 	andeq	r5, fp, sl, lsl #16
     cf0:	00004020 	andeq	r4, r0, r0, lsr #32
     cf4:	1a9c0100 	bne	fe7010fc <GPIO_Pins+0xde6ffc24>
     cf8:	2200000d 	andcs	r0, r0, #13
     cfc:	00000314 	andeq	r0, r0, r4, lsl r3
     d00:	0b0a1902 	bleq	287110 <startup-0x1fd78ef0>
     d04:	02000003 	andeq	r0, r0, #3
     d08:	5f227491 	svcpl	0x00227491
     d0c:	0200000a 	andeq	r0, r0, #10
     d10:	069c0a19 			; <UNDEFINED> instruction: 0x069c0a19
     d14:	91020000 	mrsls	r0, (UNDEF: 2)
     d18:	ed210073 	stc	0, cr0, [r1, #-460]!	; 0xfffffe34
     d1c:	02000000 	andeq	r0, r0, #0
     d20:	0b1809fb 	bleq	603514 <startup-0x1f9fcaec>
     d24:	00402000 	subeq	r2, r0, r0
     d28:	9c010000 	stcls	0, cr0, [r1], {-0}
     d2c:	00000d4f 	andeq	r0, r0, pc, asr #26
     d30:	000f5c22 	andeq	r5, pc, r2, lsr #24
     d34:	09fb0200 	ldmibeq	fp!, {r9}^
     d38:	0000030b 	andeq	r0, r0, fp, lsl #6
     d3c:	22749102 	rsbscs	r9, r4, #-2147483648	; 0x80000000
     d40:	00000a5f 	andeq	r0, r0, pc, asr sl
     d44:	9c09fb02 			; <UNDEFINED> instruction: 0x9c09fb02
     d48:	02000006 	andeq	r0, r0, #6
     d4c:	21007391 			; <UNDEFINED> instruction: 0x21007391
     d50:	00000ebf 			; <UNDEFINED> instruction: 0x00000ebf
     d54:	d809db02 	stmdale	r9, {r1, r8, r9, fp, ip, lr, pc}
     d58:	4020000a 	eormi	r0, r0, sl
     d5c:	01000000 	mrseq	r0, (UNDEF: 0)
     d60:	000d849c 	muleq	sp, ip, r4
     d64:	0d2f2200 	sfmeq	f2, 4, [pc, #-0]	; d6c <startup-0x1ffff294>
     d68:	db020000 	blle	80d70 <startup-0x1ff7f290>
     d6c:	00030b09 	andeq	r0, r3, r9, lsl #22
     d70:	74910200 	ldrvc	r0, [r1], #512	; 0x200
     d74:	000a5f22 	andeq	r5, sl, r2, lsr #30
     d78:	09db0200 	ldmibeq	fp, {r9}^
     d7c:	0000069c 	muleq	r0, ip, r6
     d80:	00739102 	rsbseq	r9, r3, r2, lsl #2
     d84:	00049d21 	andeq	r9, r4, r1, lsr #26
     d88:	09aa0200 	stmibeq	sl!, {r9}
     d8c:	20000a98 	mulcs	r0, r8, sl
     d90:	00000040 	andeq	r0, r0, r0, asr #32
     d94:	0db99c01 	ldceq	12, cr9, [r9, #4]!
     d98:	d2220000 	eorle	r0, r2, #0
     d9c:	0200000a 	andeq	r0, r0, #10
     da0:	030b09aa 	movweq	r0, #47530	; 0xb9aa
     da4:	91020000 	mrsls	r0, (UNDEF: 2)
     da8:	0a5f2274 	beq	17c9780 <startup-0x1e836880>
     dac:	aa020000 	bge	80db4 <startup-0x1ff7f24c>
     db0:	00069c09 	andeq	r9, r6, r9, lsl #24
     db4:	73910200 	orrsvc	r0, r1, #0, 4
     db8:	011c2100 	tsteq	ip, r0, lsl #2
     dbc:	7b020000 	blvc	80dc4 <startup-0x1ff7f23c>
     dc0:	000a5809 	andeq	r5, sl, r9, lsl #16
     dc4:	00004020 	andeq	r4, r0, r0, lsr #32
     dc8:	ee9c0100 	fmle	f0, f4, f0
     dcc:	2200000d 	andcs	r0, r0, #13
     dd0:	000009f7 	strdeq	r0, [r0], -r7
     dd4:	0b097b02 	bleq	25f9e4 <startup-0x1fda061c>
     dd8:	02000003 	andeq	r0, r0, #3
     ddc:	5f227491 	svcpl	0x00227491
     de0:	0200000a 	andeq	r0, r0, #10
     de4:	069c097b 			; <UNDEFINED> instruction: 0x069c097b
     de8:	91020000 	mrsls	r0, (UNDEF: 2)
     dec:	64210073 	strtvs	r0, [r1], #-115	; 0xffffff8d
     df0:	02000002 	andeq	r0, r0, #2
     df4:	0a180945 	beq	603310 <startup-0x1f9fccf0>
     df8:	00402000 	subeq	r2, r0, r0
     dfc:	9c010000 	stcls	0, cr0, [r1], {-0}
     e00:	00000e23 	andeq	r0, r0, r3, lsr #28
     e04:	00031422 	andeq	r1, r3, r2, lsr #8
     e08:	09450200 	stmdbeq	r5, {r9}^
     e0c:	0000030b 	andeq	r0, r0, fp, lsl #6
     e10:	22749102 	rsbscs	r9, r4, #-2147483648	; 0x80000000
     e14:	00000a5f 	andeq	r0, r0, pc, asr sl
     e18:	9c094502 	cfstr32ls	mvfx4, [r9], {2}
     e1c:	02000006 	andeq	r0, r0, #6
     e20:	21007391 			; <UNDEFINED> instruction: 0x21007391
     e24:	00001063 	andeq	r1, r0, r3, rrx
     e28:	d8092a02 	stmdale	r9, {r1, r9, fp, sp}
     e2c:	40200009 	eormi	r0, r0, r9
     e30:	01000000 	mrseq	r0, (UNDEF: 0)
     e34:	000e589c 	muleq	lr, ip, r8
     e38:	0f5c2200 	svceq	0x005c2200
     e3c:	2a020000 	bcs	80e44 <startup-0x1ff7f1bc>
     e40:	00030b09 	andeq	r0, r3, r9, lsl #22
     e44:	74910200 	ldrvc	r0, [r1], #512	; 0x200
     e48:	000a5f22 	andeq	r5, sl, r2, lsr #30
     e4c:	092a0200 	stmdbeq	sl!, {r9}
     e50:	0000069c 	muleq	r0, ip, r6
     e54:	00739102 	rsbseq	r9, r3, r2, lsl #2
     e58:	000da621 	andeq	sl, sp, r1, lsr #12
     e5c:	090d0200 	stmdbeq	sp, {r9}
     e60:	20000998 	mulcs	r0, r8, r9
     e64:	00000040 	andeq	r0, r0, r0, asr #32
     e68:	0e8d9c01 	cdpeq	12, 8, cr9, cr13, cr1, {0}
     e6c:	2f220000 	svccs	0x00220000
     e70:	0200000d 	andeq	r0, r0, #13
     e74:	030b090d 	movweq	r0, #47373	; 0xb90d
     e78:	91020000 	mrsls	r0, (UNDEF: 2)
     e7c:	0a5f2274 	beq	17c9854 <startup-0x1e8367ac>
     e80:	0d020000 	stceq	0, cr0, [r2, #-0]
     e84:	00069c09 	andeq	r9, r6, r9, lsl #24
     e88:	73910200 	orrsvc	r0, r1, #0, 4
     e8c:	07672100 	strbeq	r2, [r7, -r0, lsl #2]!
     e90:	e3020000 	movw	r0, #8192	; 0x2000
     e94:	00095808 	andeq	r5, r9, r8, lsl #16
     e98:	00004020 	andeq	r4, r0, r0, lsr #32
     e9c:	c29c0100 	addsgt	r0, ip, #0, 2
     ea0:	2200000e 	andcs	r0, r0, #14
     ea4:	00000ad2 	ldrdeq	r0, [r0], -r2
     ea8:	0b08e302 	bleq	239ab8 <startup-0x1fdc6548>
     eac:	02000003 	andeq	r0, r0, #3
     eb0:	5f227491 	svcpl	0x00227491
     eb4:	0200000a 	andeq	r0, r0, #10
     eb8:	069c08e3 	ldreq	r0, [ip], r3, ror #17
     ebc:	91020000 	mrsls	r0, (UNDEF: 2)
     ec0:	a2210073 	eorge	r0, r1, #115	; 0x73
     ec4:	02000003 	andeq	r0, r0, #3
     ec8:	091808af 	ldmdbeq	r8, {r0, r1, r2, r3, r5, r7, fp}
     ecc:	00402000 	subeq	r2, r0, r0
     ed0:	9c010000 	stcls	0, cr0, [r1], {-0}
     ed4:	00000ef7 	strdeq	r0, [r0], -r7
     ed8:	0009f722 	andeq	pc, r9, r2, lsr #14
     edc:	08af0200 	stmiaeq	pc!, {r9}	; <UNPREDICTABLE>
     ee0:	0000030b 	andeq	r0, r0, fp, lsl #6
     ee4:	22749102 	rsbscs	r9, r4, #-2147483648	; 0x80000000
     ee8:	00000a5f 	andeq	r0, r0, pc, asr sl
     eec:	9c08af02 	stcls	15, cr10, [r8], {2}
     ef0:	02000006 	andeq	r0, r0, #6
     ef4:	21007391 			; <UNDEFINED> instruction: 0x21007391
     ef8:	00000b51 	andeq	r0, r0, r1, asr fp
     efc:	d8087602 	stmdale	r8, {r1, r9, sl, ip, sp, lr}
     f00:	40200008 	eormi	r0, r0, r8
     f04:	01000000 	mrseq	r0, (UNDEF: 0)
     f08:	000f2c9c 	muleq	pc, ip, ip	; <UNPREDICTABLE>
     f0c:	03142200 	tsteq	r4, #0, 4
     f10:	76020000 	strvc	r0, [r2], -r0
     f14:	00030b08 	andeq	r0, r3, r8, lsl #22
     f18:	74910200 	ldrvc	r0, [r1], #512	; 0x200
     f1c:	000a5f22 	andeq	r5, sl, r2, lsr #30
     f20:	08760200 	ldmdaeq	r6!, {r9}^
     f24:	0000069c 	muleq	r0, ip, r6
     f28:	00739102 	rsbseq	r9, r3, r2, lsl #2
     f2c:	0001a221 	andeq	sl, r1, r1, lsr #4
     f30:	08580200 	ldmdaeq	r8, {r9}^
     f34:	20000898 	mulcs	r0, r8, r8
     f38:	00000040 	andeq	r0, r0, r0, asr #32
     f3c:	0f619c01 	svceq	0x00619c01
     f40:	5c220000 	stcpl	0, cr0, [r2], #-0
     f44:	0200000f 	andeq	r0, r0, #15
     f48:	030b0858 	movweq	r0, #47192	; 0xb858
     f4c:	91020000 	mrsls	r0, (UNDEF: 2)
     f50:	0a5f2274 	beq	17c9928 <startup-0x1e8366d8>
     f54:	58020000 	stmdapl	r2, {}	; <UNPREDICTABLE>
     f58:	00069c08 	andeq	r9, r6, r8, lsl #24
     f5c:	73910200 	orrsvc	r0, r1, #0, 4
     f60:	0f902100 	svceq	0x00902100
     f64:	38020000 	stmdacc	r2, {}	; <UNPREDICTABLE>
     f68:	00085808 	andeq	r5, r8, r8, lsl #16
     f6c:	00004020 	andeq	r4, r0, r0, lsr #32
     f70:	969c0100 	ldrls	r0, [ip], r0, lsl #2
     f74:	2200000f 	andcs	r0, r0, #15
     f78:	00000d2f 	andeq	r0, r0, pc, lsr #26
     f7c:	0b083802 	bleq	20ef8c <startup-0x1fdf1074>
     f80:	02000003 	andeq	r0, r0, #3
     f84:	5f227491 	svcpl	0x00227491
     f88:	0200000a 	andeq	r0, r0, #10
     f8c:	069c0838 			; <UNDEFINED> instruction: 0x069c0838
     f90:	91020000 	mrsls	r0, (UNDEF: 2)
     f94:	5c210073 	stcpl	0, cr0, [r1], #-460	; 0xfffffe34
     f98:	02000001 	andeq	r0, r0, #1
     f9c:	083c080e 	ldmdaeq	ip!, {r1, r2, r3, fp}
     fa0:	001c2000 	andseq	r2, ip, r0
     fa4:	9c010000 	stcls	0, cr0, [r1], {-0}
     fa8:	00000fbc 			; <UNDEFINED> instruction: 0x00000fbc
     fac:	00104422 	andseq	r4, r0, r2, lsr #8
     fb0:	080e0200 	stmdaeq	lr, {r9}
     fb4:	0000030b 	andeq	r0, r0, fp, lsl #6
     fb8:	00749102 	rsbseq	r9, r4, r2, lsl #2
     fbc:	00023021 	andeq	r3, r2, r1, lsr #32
     fc0:	078e0200 	streq	r0, [lr, r0, lsl #4]
     fc4:	20000800 	andcs	r0, r0, r0, lsl #16
     fc8:	0000003c 	andeq	r0, r0, ip, lsr r0
     fcc:	0ff19c01 	svceq	0x00f19c01
     fd0:	8d220000 	stchi	0, cr0, [r2, #-0]
     fd4:	02000007 	andeq	r0, r0, #7
     fd8:	030b078e 	movweq	r0, #46990	; 0xb78e
     fdc:	91020000 	mrsls	r0, (UNDEF: 2)
     fe0:	0d05246c 	cfstrseq	mvf2, [r5, #-432]	; 0xfffffe50
     fe4:	90020000 	andls	r0, r2, r0
     fe8:	00030b07 	andeq	r0, r3, r7, lsl #22
     fec:	74910200 	ldrvc	r0, [r1], #512	; 0x200
     ff0:	02002100 	andeq	r2, r0, #0, 2
     ff4:	2b020000 	blcs	80ffc <startup-0x1ff7f004>
     ff8:	0007c007 	andeq	ip, r7, r7
     ffc:	00004020 	andeq	r4, r0, r0, lsr #32
    1000:	269c0100 	ldrcs	r0, [ip], r0, lsl #2
    1004:	22000010 	andcs	r0, r0, #16
    1008:	0000077e 	andeq	r0, r0, lr, ror r7
    100c:	0b072b02 	bleq	1cbc1c <startup-0x1fe343e4>
    1010:	02000003 	andeq	r0, r0, #3
    1014:	05246c91 	streq	r6, [r4, #-3217]!	; 0xfffff36f
    1018:	0200000d 	andeq	r0, r0, #13
    101c:	030b072d 	movweq	r0, #46893	; 0xb72d
    1020:	91020000 	mrsls	r0, (UNDEF: 2)
    1024:	eb210074 	bl	8411fc <startup-0x1f7bee04>
    1028:	02000008 	andeq	r0, r0, #8
    102c:	0784070b 	streq	r0, [r4, fp, lsl #14]
    1030:	003c2000 	eorseq	r2, ip, r0
    1034:	9c010000 	stcls	0, cr0, [r1], {-0}
    1038:	0000105b 	andeq	r1, r0, fp, asr r0
    103c:	0002f822 	andeq	pc, r2, r2, lsr #16
    1040:	070b0200 	streq	r0, [fp, -r0, lsl #4]
    1044:	0000030b 	andeq	r0, r0, fp, lsl #6
    1048:	246c9102 	strbtcs	r9, [ip], #-258	; 0xfffffefe
    104c:	00000d05 	andeq	r0, r0, r5, lsl #26
    1050:	0b070d02 	bleq	1c4460 <startup-0x1fe3bba0>
    1054:	02000003 	andeq	r0, r0, #3
    1058:	21007491 			; <UNDEFINED> instruction: 0x21007491
    105c:	000002bb 			; <UNDEFINED> instruction: 0x000002bb
    1060:	4806ea02 	stmdami	r6, {r1, r9, fp, sp, lr, pc}
    1064:	3c200007 	stccc	0, cr0, [r0], #-28	; 0xffffffe4
    1068:	01000000 	mrseq	r0, (UNDEF: 0)
    106c:	0010909c 	mulseq	r0, ip, r0
    1070:	079c2200 	ldreq	r2, [ip, r0, lsl #4]
    1074:	ea020000 	b	8107c <startup-0x1ff7ef84>
    1078:	00030b06 	andeq	r0, r3, r6, lsl #22
    107c:	6c910200 	lfmvs	f0, 4, [r1], {0}
    1080:	000d0524 	andeq	r0, sp, r4, lsr #10
    1084:	06ec0200 	strbteq	r0, [ip], r0, lsl #4
    1088:	0000030b 	andeq	r0, r0, fp, lsl #6
    108c:	00749102 	rsbseq	r9, r4, r2, lsl #2
    1090:	00065721 	andeq	r5, r6, r1, lsr #14
    1094:	06c60200 	strbeq	r0, [r6], r0, lsl #4
    1098:	2000070c 	andcs	r0, r0, ip, lsl #14
    109c:	0000003c 	andeq	r0, r0, ip, lsr r0
    10a0:	10c59c01 	sbcne	r9, r5, r1, lsl #24
    10a4:	b1220000 			; <UNDEFINED> instruction: 0xb1220000
    10a8:	0200000a 	andeq	r0, r0, #10
    10ac:	030b06c6 	movweq	r0, #46790	; 0xb6c6
    10b0:	91020000 	mrsls	r0, (UNDEF: 2)
    10b4:	0d05246c 	cfstrseq	mvf2, [r5, #-432]	; 0xfffffe50
    10b8:	c8020000 	stmdagt	r2, {}	; <UNPREDICTABLE>
    10bc:	00030b06 	andeq	r0, r3, r6, lsl #22
    10c0:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    10c4:	00572100 	subseq	r2, r7, r0, lsl #2
    10c8:	ab020000 	blge	810d0 <startup-0x1ff7ef30>
    10cc:	0006f006 	andeq	pc, r6, r6
    10d0:	00001c20 	andeq	r1, r0, r0, lsr #24
    10d4:	eb9c0100 	bl	fe7014dc <GPIO_Pins+0xde700004>
    10d8:	22000010 	andcs	r0, r0, #16
    10dc:	00000834 	andeq	r0, r0, r4, lsr r8
    10e0:	0b06ab02 	bleq	1abcf0 <startup-0x1fe54310>
    10e4:	02000003 	andeq	r0, r0, #3
    10e8:	21007491 			; <UNDEFINED> instruction: 0x21007491
    10ec:	00000b80 	andeq	r0, r0, r0, lsl #23
    10f0:	d005ef02 	andle	lr, r5, r2, lsl #30
    10f4:	20200006 	eorcs	r0, r0, r6
    10f8:	01000000 	mrseq	r0, (UNDEF: 0)
    10fc:	0011119c 	mulseq	r1, ip, r1
    1100:	0a5f2200 	beq	17c9908 <startup-0x1e8366f8>
    1104:	ef020000 	svc	0x00020000
    1108:	00069c05 	andeq	r9, r6, r5, lsl #24
    110c:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    1110:	0f292100 	svceq	0x00292100
    1114:	de020000 	cdple	0, 0, cr0, cr2, cr0, {0}
    1118:	0006b005 	andeq	fp, r6, r5
    111c:	00002020 	andeq	r2, r0, r0, lsr #32
    1120:	379c0100 	ldrcc	r0, [ip, r0, lsl #2]
    1124:	22000011 	andcs	r0, r0, #17
    1128:	00000a5f 	andeq	r0, r0, pc, asr sl
    112c:	9c05de02 	stcls	14, cr13, [r5], {2}
    1130:	02000006 	andeq	r0, r0, #6
    1134:	21007791 			; <UNDEFINED> instruction: 0x21007791
    1138:	00000a06 	andeq	r0, r0, r6, lsl #20
    113c:	5005be02 	andpl	fp, r5, r2, lsl #28
    1140:	60200006 	eorvs	r0, r0, r6
    1144:	01000000 	mrseq	r0, (UNDEF: 0)
    1148:	00116c9c 	mulseq	r1, ip, ip
    114c:	01462200 	mrseq	r2, (UNDEF: 102)
    1150:	be020000 	cdplt	0, 0, cr0, cr2, cr0, {0}
    1154:	00030b05 	andeq	r0, r3, r5, lsl #22
    1158:	6c910200 	lfmvs	f0, 4, [r1], {0}
    115c:	000d0524 	andeq	r0, sp, r4, lsr #10
    1160:	05c00200 	strbeq	r0, [r0, #512]	; 0x200
    1164:	0000030b 	andeq	r0, r0, fp, lsl #6
    1168:	00749102 	rsbseq	r9, r4, r2, lsl #2
    116c:	00006827 	andeq	r6, r0, r7, lsr #16
    1170:	05250200 	streq	r0, [r5, #-512]!	; 0xfffffe00
    1174:	200004f8 	strdcs	r0, [r0], -r8
    1178:	00000158 	andeq	r0, r0, r8, asr r1
    117c:	11ec9c01 	mvnne	r9, r1, lsl #24
    1180:	82220000 	eorhi	r0, r2, #0
    1184:	02000009 	andeq	r0, r0, #9
    1188:	11ec0525 	mvnne	r0, r5, lsr #10
    118c:	91020000 	mrsls	r0, (UNDEF: 2)
    1190:	6d74265c 	ldclvs	6, cr2, [r4, #-368]!	; 0xfffffe90
    1194:	27020070 	smlsdxcs	r2, r0, r0, r0
    1198:	00030b05 	andeq	r0, r3, r5, lsl #22
    119c:	70910200 	addsvc	r0, r1, r0, lsl #4
    11a0:	00105d24 	andseq	r5, r0, r4, lsr #26
    11a4:	05270200 	streq	r0, [r7, #-512]!	; 0xfffffe00
    11a8:	0000030b 	andeq	r0, r0, fp, lsl #6
    11ac:	246c9102 	strbtcs	r9, [ip], #-258	; 0xfffffefe
    11b0:	00000e66 	andeq	r0, r0, r6, ror #28
    11b4:	0b052702 	bleq	14adc4 <startup-0x1feb523c>
    11b8:	02000003 	andeq	r0, r0, #3
    11bc:	00247491 	mlaeq	r4, r1, r4, r7
    11c0:	02000000 	andeq	r0, r0, #0
    11c4:	030b0527 	movweq	r0, #46375	; 0xb527
    11c8:	91020000 	mrsls	r0, (UNDEF: 2)
    11cc:	055b2468 	ldrbeq	r2, [fp, #-1128]	; 0xfffffb98
    11d0:	27020000 	strcs	r0, [r2, -r0]
    11d4:	00030b05 	andeq	r0, r3, r5, lsl #22
    11d8:	64910200 	ldrvs	r0, [r1], #512	; 0x200
    11dc:	0010f324 	andseq	pc, r0, r4, lsr #6
    11e0:	05270200 	streq	r0, [r7, #-512]!	; 0xfffffe00
    11e4:	0000030b 	andeq	r0, r0, fp, lsl #6
    11e8:	00609102 	rsbeq	r9, r0, r2, lsl #2
    11ec:	09840428 	stmibeq	r4, {r3, r5, sl}
    11f0:	a0210000 	eorge	r0, r1, r0
    11f4:	02000002 	andeq	r0, r0, #2
    11f8:	04bc04f1 	ldrteq	r0, [ip], #1265	; 0x4f1
    11fc:	003c2000 	eorseq	r2, ip, r0
    1200:	9c010000 	stcls	0, cr0, [r1], {-0}
    1204:	00001227 	andeq	r1, r0, r7, lsr #4
    1208:	00017f22 	andeq	r7, r1, r2, lsr #30
    120c:	04f10200 	ldrbteq	r0, [r1], #512	; 0x200
    1210:	0000030b 	andeq	r0, r0, fp, lsl #6
    1214:	246c9102 	strbtcs	r9, [ip], #-258	; 0xfffffefe
    1218:	00000d05 	andeq	r0, r0, r5, lsl #26
    121c:	0b04f302 	bleq	13de2c <startup-0x1fec21d4>
    1220:	02000003 	andeq	r0, r0, #3
    1224:	21007491 			; <UNDEFINED> instruction: 0x21007491
    1228:	00000860 	andeq	r0, r0, r0, ror #16
    122c:	8404d202 	strhi	sp, [r4], #-514	; 0xfffffdfe
    1230:	38200004 	stmdacc	r0!, {r2}
    1234:	01000000 	mrseq	r0, (UNDEF: 0)
    1238:	00125c9c 	mulseq	r2, ip, ip
    123c:	017f2200 	cmneq	pc, r0, lsl #4
    1240:	d2020000 	andle	r0, r2, #0
    1244:	00030b04 	andeq	r0, r3, r4, lsl #22
    1248:	6c910200 	lfmvs	f0, 4, [r1], {0}
    124c:	000d0524 	andeq	r0, sp, r4, lsr #10
    1250:	04d40200 	ldrbeq	r0, [r4], #512	; 0x200
    1254:	0000030b 	andeq	r0, r0, fp, lsl #6
    1258:	00749102 	rsbseq	r9, r4, r2, lsl #2
    125c:	00060721 	andeq	r0, r6, r1, lsr #14
    1260:	04b30200 	ldrteq	r0, [r3], #512	; 0x200
    1264:	20000450 	andcs	r0, r0, r0, asr r4
    1268:	00000034 	andeq	r0, r0, r4, lsr r0
    126c:	12919c01 	addsne	r9, r1, #256	; 0x100
    1270:	21220000 			; <UNDEFINED> instruction: 0x21220000
    1274:	02000005 	andeq	r0, r0, #5
    1278:	030b04b3 	movweq	r0, #46259	; 0xb4b3
    127c:	91020000 	mrsls	r0, (UNDEF: 2)
    1280:	0d05246c 	cfstrseq	mvf2, [r5, #-432]	; 0xfffffe50
    1284:	b5020000 	strlt	r0, [r2, #-0]
    1288:	00030b04 	andeq	r0, r3, r4, lsl #22
    128c:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    1290:	02da2900 	sbcseq	r2, sl, #0, 18
    1294:	9a020000 	bls	8129c <startup-0x1ff7ed64>
    1298:	0002d104 	andeq	sp, r2, r4, lsl #2
    129c:	00043400 	andeq	r3, r4, r0, lsl #8
    12a0:	00001c20 	andeq	r1, r0, r0, lsr #24
    12a4:	219c0100 	orrscs	r0, ip, r0, lsl #2
    12a8:	000010b2 	strheq	r1, [r0], -r2
    12ac:	00047d02 	andeq	r7, r4, r2, lsl #26
    12b0:	34200004 	strtcc	r0, [r0], #-4
    12b4:	01000000 	mrseq	r0, (UNDEF: 0)
    12b8:	0012dc9c 	mulseq	r2, ip, ip
    12bc:	03712200 	cmneq	r1, #0, 4
    12c0:	7d020000 	stcvc	0, cr0, [r2, #-0]
    12c4:	00030b04 	andeq	r0, r3, r4, lsl #22
    12c8:	6c910200 	lfmvs	f0, 4, [r1], {0}
    12cc:	000d0524 	andeq	r0, sp, r4, lsr #10
    12d0:	047f0200 	ldrbteq	r0, [pc], #-512	; 12d8 <startup-0x1fffed28>
    12d4:	0000030b 	andeq	r0, r0, fp, lsl #6
    12d8:	00749102 	rsbseq	r9, r4, r2, lsl #2
    12dc:	00082021 	andeq	r2, r8, r1, lsr #32
    12e0:	03b50200 			; <UNDEFINED> instruction: 0x03b50200
    12e4:	200003c4 	andcs	r0, r0, r4, asr #7
    12e8:	0000003c 	andeq	r0, r0, ip, lsr r0
    12ec:	13209c01 			; <UNDEFINED> instruction: 0x13209c01
    12f0:	c2220000 	eorgt	r0, r2, #0
    12f4:	0200000b 	andeq	r0, r0, #11
    12f8:	030b03b5 	movweq	r0, #46005	; 0xb3b5
    12fc:	91020000 	mrsls	r0, (UNDEF: 2)
    1300:	033c226c 	teqeq	ip, #108, 4	; 0xc0000006
    1304:	b5020000 	strlt	r0, [r2, #-0]
    1308:	00030b03 	andeq	r0, r3, r3, lsl #22
    130c:	68910200 	ldmvs	r1, {r9}
    1310:	000d0524 	andeq	r0, sp, r4, lsr #10
    1314:	03b70200 			; <UNDEFINED> instruction: 0x03b70200
    1318:	0000030b 	andeq	r0, r0, fp, lsl #6
    131c:	00749102 	rsbseq	r9, r4, r2, lsl #2
    1320:	0006f321 	andeq	pc, r6, r1, lsr #6
    1324:	03880200 	orreq	r0, r8, #0, 4
    1328:	20000384 	andcs	r0, r0, r4, lsl #7
    132c:	00000040 	andeq	r0, r0, r0, asr #32
    1330:	13649c01 	cmnne	r4, #256	; 0x100
    1334:	42220000 	eormi	r0, r2, #0
    1338:	0200000b 	andeq	r0, r0, #11
    133c:	030b0388 	movweq	r0, #45960	; 0xb388
    1340:	91020000 	mrsls	r0, (UNDEF: 2)
    1344:	0c48226c 	sfmeq	f2, 2, [r8], {108}	; 0x6c
    1348:	88020000 	stmdahi	r2, {}	; <UNPREDICTABLE>
    134c:	00030b03 	andeq	r0, r3, r3, lsl #22
    1350:	68910200 	ldmvs	r1, {r9}
    1354:	000d0524 	andeq	r0, sp, r4, lsr #10
    1358:	038a0200 	orreq	r0, sl, #0, 4
    135c:	0000030b 	andeq	r0, r0, fp, lsl #6
    1360:	00749102 	rsbseq	r9, r4, r2, lsl #2
    1364:	000a9621 	andeq	r9, sl, r1, lsr #12
    1368:	036f0200 	cmneq	pc, #0, 4
    136c:	20000364 	andcs	r0, r0, r4, ror #6
    1370:	00000020 	andeq	r0, r0, r0, lsr #32
    1374:	138a9c01 	orrne	r9, sl, #256	; 0x100
    1378:	5f220000 	svcpl	0x00220000
    137c:	0200000a 	andeq	r0, r0, #10
    1380:	069c036f 	ldreq	r0, [ip], pc, ror #6
    1384:	91020000 	mrsls	r0, (UNDEF: 2)
    1388:	7a210077 	bvc	84156c <startup-0x1f7bea94>
    138c:	02000010 	andeq	r0, r0, #16
    1390:	0344035d 	movteq	r0, #17245	; 0x435d
    1394:	00202000 	eoreq	r2, r0, r0
    1398:	9c010000 	stcls	0, cr0, [r1], {-0}
    139c:	000013b0 			; <UNDEFINED> instruction: 0x000013b0
    13a0:	000a5f22 	andeq	r5, sl, r2, lsr #30
    13a4:	035d0200 	cmpeq	sp, #0, 4
    13a8:	0000069c 	muleq	r0, ip, r6
    13ac:	00779102 	rsbseq	r9, r7, r2, lsl #2
    13b0:	00067d21 	andeq	r7, r6, r1, lsr #26
    13b4:	03490200 	movteq	r0, #37376	; 0x9200
    13b8:	20000314 	andcs	r0, r0, r4, lsl r3
    13bc:	00000030 	andeq	r0, r0, r0, lsr r0
    13c0:	13f49c01 	mvnsne	r9, #256	; 0x100
    13c4:	2a220000 	bcs	8813cc <startup-0x1f77ec34>
    13c8:	0200000b 	andeq	r0, r0, #11
    13cc:	030b0349 	movweq	r0, #45897	; 0xb349
    13d0:	91020000 	mrsls	r0, (UNDEF: 2)
    13d4:	0b322274 	bleq	c89dac <startup-0x1f376254>
    13d8:	49020000 	stmdbmi	r2, {}	; <UNPREDICTABLE>
    13dc:	00030b03 	andeq	r0, r3, r3, lsl #22
    13e0:	70910200 	addsvc	r0, r1, r0, lsl #4
    13e4:	000b3a22 	andeq	r3, fp, r2, lsr #20
    13e8:	03490200 	movteq	r0, #37376	; 0x9200
    13ec:	0000030b 	andeq	r0, r0, fp, lsl #6
    13f0:	006c9102 	rsbeq	r9, ip, r2, lsl #2
    13f4:	00017121 	andeq	r7, r1, r1, lsr #2
    13f8:	02dc0200 	sbcseq	r0, ip, #0, 4
    13fc:	200002f4 	strdcs	r0, [r0], -r4
    1400:	00000020 	andeq	r0, r0, r0, lsr #32
    1404:	141a9c01 	ldrne	r9, [sl], #-3073	; 0xfffff3ff
    1408:	5f220000 	svcpl	0x00220000
    140c:	0200000a 	andeq	r0, r0, #10
    1410:	069c02dc 			; <UNDEFINED> instruction: 0x069c02dc
    1414:	91020000 	mrsls	r0, (UNDEF: 2)
    1418:	ba210077 	blt	8415fc <startup-0x1f7bea04>
    141c:	0200000f 	andeq	r0, r0, #15
    1420:	02cc0251 	sbceq	r0, ip, #268435461	; 0x10000005
    1424:	00282000 	eoreq	r2, r8, r0
    1428:	9c010000 	stcls	0, cr0, [r1], {-0}
    142c:	0000144f 	andeq	r1, r0, pc, asr #8
    1430:	000eb722 	andeq	fp, lr, r2, lsr #14
    1434:	02510200 	subseq	r0, r1, #0, 4
    1438:	0000030b 	andeq	r0, r0, fp, lsl #6
    143c:	22749102 	rsbscs	r9, r4, #-2147483648	; 0x80000000
    1440:	00000edc 	ldrdeq	r0, [r0], -ip
    1444:	0b025102 	bleq	95854 <startup-0x1ff6a7ac>
    1448:	02000003 	andeq	r0, r0, #3
    144c:	21007091 	swpcs	r7, r1, [r0]
    1450:	00000b75 	andeq	r0, r0, r5, ror fp
    1454:	ac023302 	stcge	3, cr3, [r2], {2}
    1458:	20200002 	eorcs	r0, r0, r2
    145c:	01000000 	mrseq	r0, (UNDEF: 0)
    1460:	0014759c 	mulseq	r4, ip, r5
    1464:	0a5f2200 	beq	17c9c6c <startup-0x1e836394>
    1468:	33020000 	movwcc	r0, #8192	; 0x2000
    146c:	00069c02 	andeq	r9, r6, r2, lsl #24
    1470:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    1474:	10e52100 	rscne	r2, r5, r0, lsl #2
    1478:	1b020000 	blne	81480 <startup-0x1ff7eb80>
    147c:	00027002 	andeq	r7, r2, r2
    1480:	00003c20 	andeq	r3, r0, r0, lsr #24
    1484:	d79c0100 	ldrle	r0, [ip, r0, lsl #2]
    1488:	22000014 	andcs	r0, r0, #20
    148c:	00000394 	muleq	r0, r4, r3
    1490:	0b021b02 	bleq	880a0 <startup-0x1ff77f60>
    1494:	02000003 	andeq	r0, r0, #3
    1498:	3c227491 	cfstrscc	mvf7, [r2], #-580	; 0xfffffdbc
    149c:	02000005 	andeq	r0, r0, #5
    14a0:	030b021b 	movweq	r0, #45595	; 0xb21b
    14a4:	91020000 	mrsls	r0, (UNDEF: 2)
    14a8:	05412270 	strbeq	r2, [r1, #-624]	; 0xfffffd90
    14ac:	1b020000 	blne	814b4 <startup-0x1ff7eb4c>
    14b0:	00030b02 	andeq	r0, r3, r2, lsl #22
    14b4:	6c910200 	lfmvs	f0, 4, [r1], {0}
    14b8:	00054622 	andeq	r4, r5, r2, lsr #12
    14bc:	021b0200 	andseq	r0, fp, #0, 4
    14c0:	0000030b 	andeq	r0, r0, fp, lsl #6
    14c4:	22689102 	rsbcs	r9, r8, #-2147483648	; 0x80000000
    14c8:	0000054b 	andeq	r0, r0, fp, asr #10
    14cc:	0b021b02 	bleq	880dc <startup-0x1ff77f24>
    14d0:	02000003 	andeq	r0, r0, #3
    14d4:	21000091 	swpcs	r0, r1, [r0]	; <UNPREDICTABLE>
    14d8:	00000550 	andeq	r0, r0, r0, asr r5
    14dc:	5001b802 	andpl	fp, r1, r2, lsl #16
    14e0:	20200002 	eorcs	r0, r0, r2
    14e4:	01000000 	mrseq	r0, (UNDEF: 0)
    14e8:	0014fd9c 	mulseq	r4, ip, sp
    14ec:	0a5f2200 	beq	17c9cf4 <startup-0x1e83630c>
    14f0:	b8020000 	stmdalt	r2, {}	; <UNPREDICTABLE>
    14f4:	00069c01 	andeq	r9, r6, r1, lsl #24
    14f8:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    14fc:	04392100 	ldrteq	r2, [r9], #-256	; 0xffffff00
    1500:	90020000 	andls	r0, r2, r0
    1504:	00020c01 	andeq	r0, r2, r1, lsl #24
    1508:	00004420 	andeq	r4, r0, r0, lsr #8
    150c:	239c0100 	orrscs	r0, ip, #0, 2
    1510:	22000015 	andcs	r0, r0, #21
    1514:	0000063d 	andeq	r0, r0, sp, lsr r6
    1518:	d1019002 	tstle	r1, r2
    151c:	02000002 	andeq	r0, r0, #2
    1520:	21007791 			; <UNDEFINED> instruction: 0x21007791
    1524:	000009b0 			; <UNDEFINED> instruction: 0x000009b0
    1528:	ec017702 	stc	7, cr7, [r1], {2}
    152c:	20200001 	eorcs	r0, r0, r1
    1530:	01000000 	mrseq	r0, (UNDEF: 0)
    1534:	0015499c 	mulseq	r5, ip, r9
    1538:	0a5f2200 	beq	17c9d40 <startup-0x1e8362c0>
    153c:	77020000 	strvc	r0, [r2, -r0]
    1540:	00069c01 	andeq	r9, r6, r1, lsl #24
    1544:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    1548:	09c42100 	stmibeq	r4, {r8, sp}^
    154c:	53020000 	movwpl	r0, #8192	; 0x2000
    1550:	0001ae01 	andeq	sl, r1, r1, lsl #28
    1554:	00003e20 	andeq	r3, r0, r0, lsr #28
    1558:	7e9c0100 	fmlvce	f0, f4, f0
    155c:	22000015 	andcs	r0, r0, #21
    1560:	000009ce 	andeq	r0, r0, lr, asr #19
    1564:	d1015302 	tstle	r1, r2, lsl #6
    1568:	02000002 	andeq	r0, r0, #2
    156c:	05246f91 	streq	r6, [r4, #-3985]!	; 0xfffff06f
    1570:	0200000d 	andeq	r0, r0, #13
    1574:	030b0155 	movweq	r0, #45397	; 0xb155
    1578:	91020000 	mrsls	r0, (UNDEF: 2)
    157c:	6a2a0074 	bvs	a81754 <startup-0x1f57e8ac>
    1580:	0200000c 	andeq	r0, r0, #12
    1584:	06c30134 			; <UNDEFINED> instruction: 0x06c30134
    1588:	01500000 	cmpeq	r0, r0
    158c:	005e2000 	subseq	r2, lr, r0
    1590:	9c010000 	stcls	0, cr0, [r1], {-0}
    1594:	000015c6 	andeq	r1, r0, r6, asr #11
    1598:	00066e24 	andeq	r6, r6, r4, lsr #28
    159c:	01360200 	teqeq	r6, r0, lsl #4
    15a0:	00000316 	andeq	r0, r0, r6, lsl r3
    15a4:	24689102 	strbtcs	r9, [r8], #-258	; 0xfffffefe
    15a8:	00000d41 	andeq	r0, r0, r1, asr #26
    15ac:	c3013702 	movwgt	r3, #5890	; 0x1702
    15b0:	02000006 	andeq	r0, r0, #6
    15b4:	3e246f91 	mcrcc	15, 1, r6, cr4, cr1, {4}
    15b8:	0200000d 	andeq	r0, r0, #13
    15bc:	06690138 			; <UNDEFINED> instruction: 0x06690138
    15c0:	91020000 	mrsls	r0, (UNDEF: 2)
    15c4:	2421006e 	strtcs	r0, [r1], #-110	; 0xffffff92
    15c8:	02000006 	andeq	r0, r0, #6
    15cc:	0128011c 			; <UNDEFINED> instruction: 0x0128011c
    15d0:	00282000 	eoreq	r2, r8, r0
    15d4:	9c010000 	stcls	0, cr0, [r1], {-0}
    15d8:	000015ec 	andeq	r1, r0, ip, ror #11
    15dc:	0006eb22 	andeq	lr, r6, r2, lsr #22
    15e0:	011c0200 	tsteq	ip, r0, lsl #4
    15e4:	000002d1 	ldrdeq	r0, [r0], -r1
    15e8:	00779102 	rsbseq	r9, r7, r2, lsl #2
    15ec:	0002b020 	andeq	fp, r2, r0, lsr #32
    15f0:	b8e10200 	stmialt	r1!, {r9}^
    15f4:	70200000 	eorvc	r0, r0, r0
    15f8:	01000000 	mrseq	r0, (UNDEF: 0)
    15fc:	0cdb2b9c 	vldmiaeq	fp, {d18-d31}
    1600:	e0010000 	and	r0, r1, r0
    1604:	00030b06 	andeq	r0, r3, r6, lsl #22
    1608:	00007000 	andeq	r7, r0, r0
    160c:	00004820 	andeq	r4, r0, r0, lsr #16
    1610:	279c0100 	ldrcs	r0, [ip, r0, lsl #2]
    1614:	22000016 	andcs	r0, r0, #22
    1618:	00000886 	andeq	r0, r0, r6, lsl #17
    161c:	0b06e001 	bleq	1b9628 <startup-0x1fe469d8>
    1620:	02000003 	andeq	r0, r0, #3
    1624:	2c007491 	cfstrscs	mvf7, [r0], {145}	; 0x91
    1628:	00000f3d 	andeq	r0, r0, sp, lsr pc
    162c:	10065d01 	andne	r5, r6, r1, lsl #26
    1630:	60200000 	eorvs	r0, r0, r0
    1634:	01000000 	mrseq	r0, (UNDEF: 0)
    1638:	0ea5229c 	mcreq	2, 5, r2, cr5, cr12, {4}
    163c:	5d010000 	stcpl	0, cr0, [r1, #-0]
    1640:	00025a06 	andeq	r5, r2, r6, lsl #20
    1644:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    1648:	000e2222 	andeq	r2, lr, r2, lsr #4
    164c:	065d0100 	ldrbeq	r0, [sp], -r0, lsl #2
    1650:	0000030b 	andeq	r0, r0, fp, lsl #6
    1654:	00709102 	rsbseq	r9, r0, r2, lsl #2
    1658:	00062300 	andeq	r2, r6, r0, lsl #6
    165c:	d7000400 	strle	r0, [r0, -r0, lsl #8]
    1660:	04000002 	streq	r0, [r0], #-2
    1664:	00056f01 	andeq	r6, r5, r1, lsl #30
    1668:	12290c00 	eorne	r0, r9, #0, 24
    166c:	10880000 	addne	r0, r8, r0
    1670:	0e9c0000 	cdpeq	0, 9, cr0, cr12, cr0, {0}
    1674:	050e2000 	streq	r2, [lr, #-0]
    1678:	04140000 	ldreq	r0, [r4], #-0
    167c:	01020000 	mrseq	r0, (UNDEF: 2)
    1680:	0003cf06 	andeq	ip, r3, r6, lsl #30
    1684:	01b90300 			; <UNDEFINED> instruction: 0x01b90300
    1688:	2b020000 	blcs	81690 <startup-0x1ff7e970>
    168c:	00000037 	andeq	r0, r0, r7, lsr r0
    1690:	cd080102 	stfgts	f0, [r8, #-8]
    1694:	02000003 	andeq	r0, r0, #3
    1698:	0e0f0502 	cfsh32eq	mvfx0, mvfx15, #2
    169c:	dc030000 	stcle	0, cr0, [r3], {-0}
    16a0:	02000004 	andeq	r0, r0, #4
    16a4:	00005039 	andeq	r5, r0, r9, lsr r0
    16a8:	07020200 	streq	r0, [r2, -r0, lsl #4]
    16ac:	00000fa7 	andeq	r0, r0, r7, lsr #31
    16b0:	00103a03 	andseq	r3, r0, r3, lsl #20
    16b4:	624d0200 	subvs	r0, sp, #0, 4
    16b8:	02000000 	andeq	r0, r0, #0
    16bc:	09140504 	ldmdbeq	r4, {r2, r8, sl}
    16c0:	bd030000 	stclt	0, cr0, [r3, #-0]
    16c4:	02000008 	andeq	r0, r0, #8
    16c8:	0000744f 	andeq	r7, r0, pc, asr #8
    16cc:	07040200 	streq	r0, [r4, -r0, lsl #4]
    16d0:	00000c36 	andeq	r0, r0, r6, lsr ip
    16d4:	0f050802 	svceq	0x00050802
    16d8:	02000009 	andeq	r0, r0, #9
    16dc:	0c310708 	ldceq	7, cr0, [r1], #-32	; 0xffffffe0
    16e0:	04040000 	streq	r0, [r4], #-0
    16e4:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
    16e8:	07040200 	streq	r0, [r4, -r0, lsl #4]
    16ec:	00000c3b 	andeq	r0, r0, fp, lsr ip
    16f0:	0001bb03 	andeq	fp, r1, r3, lsl #22
    16f4:	2c180300 	ldccs	3, cr0, [r8], {-0}
    16f8:	03000000 	movweq	r0, #0
    16fc:	000004de 	ldrdeq	r0, [r0], -lr
    1700:	00452403 	subeq	r2, r5, r3, lsl #8
    1704:	a2050000 	andge	r0, r5, #0
    1708:	03000000 	movweq	r0, #0
    170c:	0000103c 	andeq	r1, r0, ip, lsr r0
    1710:	00572c03 	subseq	r2, r7, r3, lsl #24
    1714:	b2050000 	andlt	r0, r5, #0
    1718:	03000000 	movweq	r0, #0
    171c:	000008bf 			; <UNDEFINED> instruction: 0x000008bf
    1720:	00693003 	rsbeq	r3, r9, r3
    1724:	c2050000 	andgt	r0, r5, #0
    1728:	06000000 	streq	r0, [r0], -r0
    172c:	00000eaa 	andeq	r0, r0, sl, lsr #29
    1730:	bd06fa04 	vstrlt	s30, [r6, #-16]
    1734:	07000000 	streq	r0, [r0, -r0]
    1738:	000007c9 	andeq	r0, r0, r9, asr #15
    173c:	00c23b05 	sbceq	r3, r2, r5, lsl #22
    1740:	07080000 	streq	r0, [r8, -r0]
    1744:	00003701 	andeq	r3, r0, r1, lsl #14
    1748:	035f0600 	cmpeq	pc, #0, 12
    174c:	00000104 	andeq	r0, r0, r4, lsl #2
    1750:	00094d09 	andeq	r4, r9, r9, lsl #26
    1754:	5f090000 	svcpl	0x00090000
    1758:	0100000e 	tsteq	r0, lr
    175c:	06280a00 	strteq	r0, [r8], -r0, lsl #20
    1760:	019005c3 	orrseq	r0, r0, r3, asr #11
    1764:	370b0000 	strcc	r0, [fp, -r0]
    1768:	0600000f 	streq	r0, [r0], -pc
    176c:	00cd05c5 	sbceq	r0, sp, r5, asr #11
    1770:	0b000000 	bleq	1778 <startup-0x1fffe888>
    1774:	00000cf8 	strdeq	r0, [r0], -r8
    1778:	cd05c606 	stcgt	6, cr12, [r5, #-24]	; 0xffffffe8
    177c:	04000000 	streq	r0, [r0], #-0
    1780:	0008700b 	andeq	r7, r8, fp
    1784:	05c70600 	strbeq	r0, [r7, #1536]	; 0x600
    1788:	000000cd 	andeq	r0, r0, sp, asr #1
    178c:	09370b08 	ldmdbeq	r7!, {r3, r8, r9, fp}
    1790:	c8060000 	stmdagt	r6, {}	; <UNPREDICTABLE>
    1794:	0000cd05 	andeq	ip, r0, r5, lsl #26
    1798:	490c0c00 	stmdbmi	ip, {sl, fp}
    179c:	06005244 	streq	r5, [r0], -r4, asr #4
    17a0:	00cd05c9 	sbceq	r0, sp, r9, asr #11
    17a4:	0c100000 	ldceq	0, cr0, [r0], {-0}
    17a8:	0052444f 	subseq	r4, r2, pc, asr #8
    17ac:	cd05ca06 	vstrgt	s24, [r5, #-24]	; 0xffffffe8
    17b0:	14000000 	strne	r0, [r0], #-0
    17b4:	00098d0b 	andeq	r8, r9, fp, lsl #26
    17b8:	05cb0600 	strbeq	r0, [fp, #1536]	; 0x600
    17bc:	000000ad 	andeq	r0, r0, sp, lsr #1
    17c0:	096a0b18 	stmdbeq	sl!, {r3, r4, r8, r9, fp}^
    17c4:	cc060000 	stcgt	0, cr0, [r6], {-0}
    17c8:	0000ad05 	andeq	sl, r0, r5, lsl #26
    17cc:	2f0b1a00 	svccs	0x000b1a00
    17d0:	06000008 	streq	r0, [r0], -r8
    17d4:	00cd05cd 	sbceq	r0, sp, sp, asr #11
    17d8:	0c1c0000 	ldceq	0, cr0, [ip], {-0}
    17dc:	00524641 	subseq	r4, r2, r1, asr #12
    17e0:	a005ce06 	andge	ip, r5, r6, lsl #28
    17e4:	20000001 	andcs	r0, r0, r1
    17e8:	00cd0d00 	sbceq	r0, sp, r0, lsl #26
    17ec:	01a00000 	moveq	r0, r0
    17f0:	900e0000 	andls	r0, lr, r0
    17f4:	01000000 	mrseq	r0, (UNDEF: 0)
    17f8:	01900500 	orrseq	r0, r0, r0, lsl #10
    17fc:	8a0f0000 	bhi	3c1804 <startup-0x1fc3e7fc>
    1800:	0600000e 	streq	r0, [r0], -lr
    1804:	010405cf 	smlabteq	r4, pc, r5, r0	; <UNPREDICTABLE>
    1808:	07100000 	ldreq	r0, [r0, -r0]
    180c:	00003701 	andeq	r3, r0, r1, lsl #14
    1810:	d7420700 	strble	r0, [r2, -r0, lsl #14]
    1814:	09000001 	stmdbeq	r0, {r0}
    1818:	00000801 	andeq	r0, r0, r1, lsl #16
    181c:	06980900 	ldreq	r0, [r8], r0, lsl #18
    1820:	09010000 	stmdbeq	r1, {}	; <UNPREDICTABLE>
    1824:	00000257 	andeq	r0, r0, r7, asr r2
    1828:	02930902 	addseq	r0, r3, #32768	; 0x8000
    182c:	00030000 	andeq	r0, r3, r0
    1830:	000cca03 	andeq	ip, ip, r3, lsl #20
    1834:	b1470700 	cmplt	r7, r0, lsl #14
    1838:	10000001 	andne	r0, r0, r1
    183c:	00370107 	eorseq	r0, r7, r7, lsl #2
    1840:	4f070000 	svcmi	0x00070000
    1844:	000001fc 	strdeq	r0, [r0], -ip
    1848:	00041009 	andeq	r1, r4, r9
    184c:	48090000 	stmdami	r9, {}	; <UNPREDICTABLE>
    1850:	01000003 	tsteq	r0, r3
    1854:	010a0300 	mrseq	r0, (UNDEF: 58)
    1858:	52070000 	andpl	r0, r7, #0
    185c:	000001e2 	andeq	r0, r0, r2, ror #3
    1860:	37010710 	smladcc	r1, r0, r7, r0
    1864:	07000000 	streq	r0, [r0, -r0]
    1868:	00022d5a 	andeq	r2, r2, sl, asr sp
    186c:	04ff0900 	ldrbteq	r0, [pc], #2304	; 1874 <startup-0x1fffe78c>
    1870:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    1874:	000008d9 	ldrdeq	r0, [r0], -r9
    1878:	10d50901 	sbcsne	r0, r5, r1, lsl #18
    187c:	09020000 	stmdbeq	r2, {}	; <UNPREDICTABLE>
    1880:	00000993 	muleq	r0, r3, r9
    1884:	79030003 	stmdbvc	r3, {r0, r1}
    1888:	0700000d 	streq	r0, [r0, -sp]
    188c:	0002075f 	andeq	r0, r2, pc, asr r7
    1890:	01071000 	mrseq	r1, (UNDEF: 7)
    1894:	00000037 	andeq	r0, r0, r7, lsr r0
    1898:	02586e07 	subseq	r6, r8, #7, 28	; 0x70
    189c:	9b090000 	blls	2418a4 <startup-0x1fdbe75c>
    18a0:	00000000 	andeq	r0, r0, r0
    18a4:	000f6b09 	andeq	r6, pc, r9, lsl #22
    18a8:	eb090100 	bl	241cb0 <startup-0x1fdbe350>
    18ac:	02000001 	andeq	r0, r0, #1
    18b0:	047e0300 	ldrbteq	r0, [lr], #-768	; 0xfffffd00
    18b4:	72070000 	andvc	r0, r7, #0
    18b8:	00000238 	andeq	r0, r0, r8, lsr r2
    18bc:	37010710 	smladcc	r1, r0, r7, r0
    18c0:	07000000 	streq	r0, [r0, -r0]
    18c4:	00027d7a 	andeq	r7, r2, sl, ror sp
    18c8:	113f0900 	teqne	pc, r0, lsl #18
    18cc:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    18d0:	000010ff 	strdeq	r1, [r0], -pc	; <UNPREDICTABLE>
    18d4:	ec030001 	stc	0, cr0, [r3], {1}
    18d8:	07000011 	smladeq	r0, r1, r0, r0
    18dc:	0002637d 	andeq	r6, r2, sp, ror r3
    18e0:	07081100 	streq	r1, [r8, -r0, lsl #2]
    18e4:	0002cd84 	andeq	ip, r2, r4, lsl #27
    18e8:	0d9d1200 	lfmeq	f1, 4, [sp]
    18ec:	86070000 	strhi	r0, [r7], -r0
    18f0:	000000c2 	andeq	r0, r0, r2, asr #1
    18f4:	0c881200 	sfmeq	f1, 4, [r8], {0}
    18f8:	89070000 	stmdbhi	r7, {}	; <UNPREDICTABLE>
    18fc:	000001d7 	ldrdeq	r0, [r0], -r7
    1900:	0a681204 	beq	1a06118 <startup-0x1e5f9ee8>
    1904:	8c070000 	stchi	0, cr0, [r7], {-0}
    1908:	0000022d 	andeq	r0, r0, sp, lsr #4
    190c:	08b21205 	ldmeq	r2!, {r0, r2, r9, ip}
    1910:	8f070000 	svchi	0x00070000
    1914:	000001fc 	strdeq	r0, [r0], -ip
    1918:	0dca1206 	sfmeq	f1, 2, [sl, #24]
    191c:	92070000 	andls	r0, r7, #0
    1920:	00000258 	andeq	r0, r0, r8, asr r2
    1924:	60030007 	andvs	r0, r3, r7
    1928:	07000003 	streq	r0, [r0, -r3]
    192c:	00028894 	muleq	r2, r4, r8
    1930:	12861300 	addne	r1, r6, #0, 6
    1934:	43010000 	movwmi	r0, #4096	; 0x1000
    1938:	00130602 	andseq	r0, r3, r2, lsl #12
    193c:	0000a420 	andeq	sl, r0, r0, lsr #8
    1940:	3a9c0100 	bcc	fe701d48 <GPIO_Pins+0xde700870>
    1944:	14000003 	strne	r0, [r0], #-3
    1948:	0000120c 	andeq	r1, r0, ip, lsl #4
    194c:	3a024301 	bcc	92558 <startup-0x1ff6daa8>
    1950:	02000003 	andeq	r0, r0, #3
    1954:	b7146c91 			; <UNDEFINED> instruction: 0xb7146c91
    1958:	01000011 	tsteq	r0, r1, lsl r0
    195c:	00a20243 	adceq	r0, r2, r3, asr #4
    1960:	91020000 	mrsls	r0, (UNDEF: 2)
    1964:	111b146a 	tstne	fp, sl, ror #8
    1968:	43010000 	movwmi	r0, #4096	; 0x1000
    196c:	00009702 	andeq	r9, r0, r2, lsl #14
    1970:	69910200 	ldmibvs	r1, {r9}
    1974:	00112315 	andseq	r2, r1, r5, lsl r3
    1978:	02450100 	subeq	r0, r5, #0, 2
    197c:	000000c2 	andeq	r0, r0, r2, asr #1
    1980:	15749102 	ldrbne	r9, [r4, #-258]!	; 0xfffffefe
    1984:	00001222 	andeq	r1, r0, r2, lsr #4
    1988:	c2024601 	andgt	r4, r2, #1048576	; 0x100000
    198c:	02000000 	andeq	r0, r0, #0
    1990:	16007091 			; <UNDEFINED> instruction: 0x16007091
    1994:	0001a504 	andeq	sl, r1, r4, lsl #10
    1998:	12121300 	andsne	r1, r2, #0, 6
    199c:	f0010000 			; <UNDEFINED> instruction: 0xf0010000
    19a0:	0012e201 	andseq	lr, r2, r1, lsl #4
    19a4:	00002420 	andeq	r2, r0, r0, lsr #8
    19a8:	759c0100 	ldrvc	r0, [ip, #256]	; 0x100
    19ac:	14000003 	strne	r0, [r0], #-3
    19b0:	0000120c 	andeq	r1, r0, ip, lsl #4
    19b4:	3a01f001 	bcc	7d9c0 <startup-0x1ff82640>
    19b8:	02000003 	andeq	r0, r0, #3
    19bc:	9d147491 	cfldrsls	mvf7, [r4, #-580]	; 0xfffffdbc
    19c0:	0100000d 	tsteq	r0, sp
    19c4:	00a201f0 	strdeq	r0, [r2], r0	; <UNPREDICTABLE>
    19c8:	91020000 	mrsls	r0, (UNDEF: 2)
    19cc:	01130072 	tsteq	r3, r2, ror r0
    19d0:	01000012 	tsteq	r0, r2, lsl r0
    19d4:	12c401e0 	sbcne	r0, r4, #224, 2	; 0x38
    19d8:	001e2000 	andseq	r2, lr, r0
    19dc:	9c010000 	stcls	0, cr0, [r1], {-0}
    19e0:	000003aa 	andeq	r0, r0, sl, lsr #7
    19e4:	00120c14 	andseq	r0, r2, r4, lsl ip
    19e8:	01e00100 	mvneq	r0, r0, lsl #2
    19ec:	0000033a 	andeq	r0, r0, sl, lsr r3
    19f0:	14749102 	ldrbtne	r9, [r4], #-258	; 0xfffffefe
    19f4:	000011af 	andeq	r1, r0, pc, lsr #3
    19f8:	a201e001 	andge	lr, r1, #1
    19fc:	02000000 	andeq	r0, r0, #0
    1a00:	13007291 	movwne	r7, #657	; 0x291
    1a04:	00001149 	andeq	r1, r0, r9, asr #2
    1a08:	8a01c701 	bhi	73614 <startup-0x1ff8c9ec>
    1a0c:	3a200012 	bcc	801a5c <startup-0x1f7fe5a4>
    1a10:	01000000 	mrseq	r0, (UNDEF: 0)
    1a14:	0003ee9c 	muleq	r3, ip, lr
    1a18:	120c1400 	andne	r1, ip, #0, 8
    1a1c:	c7010000 	strgt	r0, [r1, -r0]
    1a20:	00033a01 	andeq	r3, r3, r1, lsl #20
    1a24:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    1a28:	000d9d14 	andeq	r9, sp, r4, lsl sp
    1a2c:	01c70100 	biceq	r0, r7, r0, lsl #2
    1a30:	000000a2 	andeq	r0, r0, r2, lsr #1
    1a34:	14729102 	ldrbtne	r9, [r2], #-258	; 0xfffffefe
    1a38:	00001138 	andeq	r1, r0, r8, lsr r1
    1a3c:	7d01c701 	stcvc	7, cr12, [r1, #-4]
    1a40:	02000002 	andeq	r0, r0, #2
    1a44:	13007191 	movwne	r7, #401	; 0x191
    1a48:	0000116e 	andeq	r1, r0, lr, ror #2
    1a4c:	6c01b101 	stfvsd	f3, [r1], {1}
    1a50:	1e200012 	miane	acc0, r2, r0
    1a54:	01000000 	mrseq	r0, (UNDEF: 0)
    1a58:	0004239c 	muleq	r4, ip, r3
    1a5c:	120c1400 	andne	r1, ip, #0, 8
    1a60:	b1010000 	mrslt	r0, (UNDEF: 1)
    1a64:	00033a01 	andeq	r3, r3, r1, lsl #20
    1a68:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    1a6c:	000d9d14 	andeq	r9, sp, r4, lsl sp
    1a70:	01b10100 			; <UNDEFINED> instruction: 0x01b10100
    1a74:	000000a2 	andeq	r0, r0, r2, lsr #1
    1a78:	00729102 	rsbseq	r9, r2, r2, lsl #2
    1a7c:	00115713 	andseq	r5, r1, r3, lsl r7
    1a80:	019c0100 	orrseq	r0, ip, r0, lsl #2
    1a84:	2000124e 	andcs	r1, r0, lr, asr #4
    1a88:	0000001e 	andeq	r0, r0, lr, lsl r0
    1a8c:	04589c01 	ldrbeq	r9, [r8], #-3073	; 0xfffff3ff
    1a90:	0c140000 	ldceq	0, cr0, [r4], {-0}
    1a94:	01000012 	tsteq	r0, r2, lsl r0
    1a98:	033a019c 	teqeq	sl, #156, 2	; 0x27
    1a9c:	91020000 	mrsls	r0, (UNDEF: 2)
    1aa0:	0d9d1474 	cfldrseq	mvf1, [sp, #464]	; 0x1d0
    1aa4:	9c010000 	stcls	0, cr0, [r1], {-0}
    1aa8:	0000a201 	andeq	sl, r0, r1, lsl #4
    1aac:	72910200 	addsvc	r0, r1, #0, 4
    1ab0:	11071700 	tstne	r7, r0, lsl #14
    1ab4:	88010000 	stmdahi	r1, {}	; <UNPREDICTABLE>
    1ab8:	0000a201 	andeq	sl, r0, r1, lsl #4
    1abc:	00123800 	andseq	r3, r2, r0, lsl #16
    1ac0:	00001620 	andeq	r1, r0, r0, lsr #12
    1ac4:	829c0100 	addshi	r0, ip, #0, 2
    1ac8:	14000004 	strne	r0, [r0], #-4
    1acc:	0000120c 	andeq	r1, r0, ip, lsl #4
    1ad0:	3a018801 	bcc	63adc <startup-0x1ff9c524>
    1ad4:	02000003 	andeq	r0, r0, #3
    1ad8:	17007491 			; <UNDEFINED> instruction: 0x17007491
    1adc:	00001297 	muleq	r0, r7, r2
    1ae0:	97016e01 	strls	r6, [r1, -r1, lsl #28]
    1ae4:	f6000000 			; <UNDEFINED> instruction: 0xf6000000
    1ae8:	42200011 	eormi	r0, r0, #17
    1aec:	01000000 	mrseq	r0, (UNDEF: 0)
    1af0:	0004ca9c 	muleq	r4, ip, sl
    1af4:	120c1400 	andne	r1, ip, #0, 8
    1af8:	6e010000 	cdpvs	0, 0, cr0, cr1, cr0, {0}
    1afc:	00033a01 	andeq	r3, r3, r1, lsl #20
    1b00:	6c910200 	lfmvs	f0, 4, [r1], {0}
    1b04:	000d9d14 	andeq	r9, sp, r4, lsl sp
    1b08:	016e0100 	cmneq	lr, r0, lsl #2
    1b0c:	000000a2 	andeq	r0, r0, r2, lsr #1
    1b10:	156a9102 	strbne	r9, [sl, #-258]!	; 0xfffffefe
    1b14:	00000e55 	andeq	r0, r0, r5, asr lr
    1b18:	97017001 	strls	r7, [r1, -r1]
    1b1c:	02000000 	andeq	r0, r0, #0
    1b20:	17007791 			; <UNDEFINED> instruction: 0x17007791
    1b24:	000011c6 	andeq	r1, r0, r6, asr #3
    1b28:	a2015d01 	andge	r5, r1, #1, 26	; 0x40
    1b2c:	e0000000 	and	r0, r0, r0
    1b30:	16200011 			; <UNDEFINED> instruction: 0x16200011
    1b34:	01000000 	mrseq	r0, (UNDEF: 0)
    1b38:	0004f49c 	muleq	r4, ip, r4
    1b3c:	120c1400 	andne	r1, ip, #0, 8
    1b40:	5d010000 	stcpl	0, cr0, [r1, #-0]
    1b44:	00033a01 	andeq	r3, r3, r1, lsl #20
    1b48:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    1b4c:	11891700 	orrne	r1, r9, r0, lsl #14
    1b50:	43010000 	movwmi	r0, #4096	; 0x1000
    1b54:	00009701 	andeq	r9, r0, r1, lsl #14
    1b58:	00119e00 	andseq	r9, r1, r0, lsl #28
    1b5c:	00004220 	andeq	r4, r0, r0, lsr #4
    1b60:	3c9c0100 	ldfccs	f0, [ip], {0}
    1b64:	14000005 	strne	r0, [r0], #-5
    1b68:	0000120c 	andeq	r1, r0, ip, lsl #4
    1b6c:	3a014301 	bcc	52778 <startup-0x1ffad888>
    1b70:	02000003 	andeq	r0, r0, #3
    1b74:	9d146c91 	ldcls	12, cr6, [r4, #-580]	; 0xfffffdbc
    1b78:	0100000d 	tsteq	r0, sp
    1b7c:	00a20143 	adceq	r0, r2, r3, asr #2
    1b80:	91020000 	mrsls	r0, (UNDEF: 2)
    1b84:	0e55156a 	cdpeq	5, 5, cr1, cr5, cr10, {3}
    1b88:	45010000 	strmi	r0, [r1, #-0]
    1b8c:	00009701 	andeq	r9, r0, r1, lsl #14
    1b90:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    1b94:	11d91300 	bicsne	r1, r9, r0, lsl #6
    1b98:	15010000 	strne	r0, [r1, #-0]
    1b9c:	00115801 	andseq	r5, r1, r1, lsl #16
    1ba0:	00004620 	andeq	r4, r0, r0, lsr #12
    1ba4:	809c0100 	addshi	r0, ip, r0, lsl #2
    1ba8:	14000005 	strne	r0, [r0], #-5
    1bac:	0000120c 	andeq	r1, r0, ip, lsl #4
    1bb0:	3a011501 	bcc	46fbc <startup-0x1ffb9044>
    1bb4:	02000003 	andeq	r0, r0, #3
    1bb8:	9d146c91 	ldcls	12, cr6, [r4, #-580]	; 0xfffffdbc
    1bbc:	0100000d 	tsteq	r0, sp
    1bc0:	00a20115 	adceq	r0, r2, r5, lsl r1
    1bc4:	91020000 	mrsls	r0, (UNDEF: 2)
    1bc8:	6d74186a 	ldclvs	8, cr1, [r4, #-424]!	; 0xfffffe58
    1bcc:	17010070 	smlsdxne	r1, r0, r0, r0
    1bd0:	0000cd01 	andeq	ip, r0, r1, lsl #26
    1bd4:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    1bd8:	11281900 			; <UNDEFINED> instruction: 0x11281900
    1bdc:	fe010000 	cdp2	0, 0, cr0, cr1, cr0, {0}
    1be0:	20001124 	andcs	r1, r0, r4, lsr #2
    1be4:	00000034 	andeq	r0, r0, r4, lsr r0
    1be8:	05a49c01 	streq	r9, [r4, #3073]!	; 0xc01
    1bec:	9f1a0000 	svcls	0x001a0000
    1bf0:	01000011 	tsteq	r0, r1, lsl r0
    1bf4:	0005a4fe 	strdeq	sl, [r5], -lr
    1bf8:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    1bfc:	cd041600 	stcgt	6, cr1, [r4, #-0]
    1c00:	19000002 	stmdbne	r0, {r1}
    1c04:	00001164 	andeq	r1, r0, r4, ror #2
    1c08:	100cca01 	andne	ip, ip, r1, lsl #20
    1c0c:	01182000 	tsteq	r8, r0
    1c10:	9c010000 	stcls	0, cr0, [r1], {-0}
    1c14:	00000606 	andeq	r0, r0, r6, lsl #12
    1c18:	00120c1a 	andseq	r0, r2, sl, lsl ip
    1c1c:	3aca0100 	bcc	ff282024 <GPIO_Pins+0xdf280b4c>
    1c20:	02000003 	andeq	r0, r0, #3
    1c24:	9f1a6491 	svcls	0x001a6491
    1c28:	01000011 	tsteq	r0, r1, lsl r0
    1c2c:	0005a4ca 	andeq	sl, r5, sl, asr #9
    1c30:	60910200 	addsvs	r0, r1, r0, lsl #4
    1c34:	0010f81b 	andseq	pc, r0, fp, lsl r8	; <UNPREDICTABLE>
    1c38:	c2cc0100 	sbcgt	r0, ip, #0, 2
    1c3c:	02000000 	andeq	r0, r0, #0
    1c40:	701c7491 	mulsvc	ip, r1, r4
    1c44:	0100736f 	tsteq	r0, pc, ror #6
    1c48:	0000c2cc 	andeq	ip, r0, ip, asr #5
    1c4c:	70910200 	addsvc	r0, r1, r0, lsl #4
    1c50:	0011f61b 	andseq	pc, r1, fp, lsl r6	; <UNPREDICTABLE>
    1c54:	c2cc0100 	sbcgt	r0, ip, #0, 2
    1c58:	02000000 	andeq	r0, r0, #0
    1c5c:	1d006c91 	stcne	12, cr6, [r0, #-580]	; 0xfffffdbc
    1c60:	0000117d 	andeq	r1, r0, sp, ror r1
    1c64:	0e9c7f01 	cdpeq	15, 9, cr7, cr12, cr1, {0}
    1c68:	01702000 	cmneq	r0, r0
    1c6c:	9c010000 	stcls	0, cr0, [r1], {-0}
    1c70:	00120c1a 	andseq	r0, r2, sl, lsl ip
    1c74:	3a7f0100 	bcc	1fc207c <startup-0x1e03df84>
    1c78:	02000003 	andeq	r0, r0, #3
    1c7c:	00007491 	muleq	r0, r1, r4

Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
   0:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
   4:	030b130e 	movweq	r1, #45838	; 0xb30e
   8:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xfffff4f2
   c:	10011117 	andne	r1, r1, r7, lsl r1
  10:	02000017 	andeq	r0, r0, #23
  14:	0e030104 	adfeqs	f0, f3, f4
  18:	0b0b0b3e 	bleq	2c2d18 <startup-0x1fd3d2e8>
  1c:	0b3a1349 	bleq	e84d48 <startup-0x1f17b2b8>
  20:	13010b3b 	movwne	r0, #6971	; 0x1b3b
  24:	28030000 	stmdacs	r3, {}	; <UNPREDICTABLE>
  28:	1c0e0300 	stcne	3, cr0, [lr], {-0}
  2c:	0400000d 	streq	r0, [r0], #-13
  30:	0e030028 	cdpeq	0, 0, cr0, cr3, cr8, {1}
  34:	00000b1c 	andeq	r0, r0, ip, lsl fp
  38:	0b002405 	bleq	9054 <startup-0x1fff6fac>
  3c:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
  40:	0600000e 	streq	r0, [r0], -lr
  44:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
  48:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
  4c:	00001349 	andeq	r1, r0, r9, asr #6
  50:	03001607 	movweq	r1, #1543	; 0x607
  54:	3b0b3a0e 	blcc	2ce894 <startup-0x1fd3176c>
  58:	0013490b 	andseq	r4, r3, fp, lsl #18
  5c:	00240800 	eoreq	r0, r4, r0, lsl #16
  60:	0b3e0b0b 	bleq	f82c94 <startup-0x1f07d36c>
  64:	00000803 	andeq	r0, r0, r3, lsl #16
  68:	49003509 	stmdbmi	r0, {r0, r3, r8, sl, ip, sp}
  6c:	0a000013 	beq	c0 <startup-0x1fffff40>
  70:	13490026 	movtne	r0, #36902	; 0x9026
  74:	130b0000 	movwne	r0, #45056	; 0xb000
  78:	3a050b01 	bcc	142c84 <startup-0x1febd37c>
  7c:	01053b0b 	tsteq	r5, fp, lsl #22
  80:	0c000013 	stceq	0, cr0, [r0], {19}
  84:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
  88:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
  8c:	0b381349 	bleq	e04db8 <startup-0x1f1fb248>
  90:	0d0d0000 	stceq	0, cr0, [sp, #-0]
  94:	3a0e0300 	bcc	380c9c <startup-0x1fc7f364>
  98:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
  9c:	00053813 	andeq	r3, r5, r3, lsl r8
  a0:	000d0e00 	andeq	r0, sp, r0, lsl #28
  a4:	0b3a0803 	bleq	e820b8 <startup-0x1f17df48>
  a8:	1349053b 	movtne	r0, #38203	; 0x953b
  ac:	00000538 	andeq	r0, r0, r8, lsr r5
  b0:	4901010f 	stmdbmi	r1, {r0, r1, r2, r3, r8}
  b4:	00130113 	andseq	r0, r3, r3, lsl r1
  b8:	00211000 	eoreq	r1, r1, r0
  bc:	0b2f1349 	bleq	bc4de8 <startup-0x1f43b218>
  c0:	21110000 	tstcs	r1, r0
  c4:	2f134900 	svccs	0x00134900
  c8:	12000005 	andne	r0, r0, #5
  cc:	0b0b0113 	bleq	2c0520 <startup-0x1fd3fae0>
  d0:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
  d4:	00001301 	andeq	r1, r0, r1, lsl #6
  d8:	03000d13 	movweq	r0, #3347	; 0xd13
  dc:	3b0b3a08 	blcc	2ce904 <startup-0x1fd316fc>
  e0:	38134905 	ldmdacc	r3, {r0, r2, r8, fp, lr}
  e4:	1400000b 	strne	r0, [r0], #-11
  e8:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
  ec:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
  f0:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
  f4:	0000193c 	andeq	r1, r0, ip, lsr r9
  f8:	03003415 	movweq	r3, #1045	; 0x415
  fc:	3b0b3a0e 	blcc	2ce93c <startup-0x1fd316c4>
 100:	3f13490b 	svccc	0x0013490b
 104:	00193c19 	andseq	r3, r9, r9, lsl ip
 108:	01041600 	tsteq	r4, r0, lsl #12
 10c:	0b0b0b3e 	bleq	2c2e0c <startup-0x1fd3d1f4>
 110:	0b3a1349 	bleq	e84e3c <startup-0x1f17b1c4>
 114:	1301053b 	movwne	r0, #5435	; 0x153b
 118:	28170000 	ldmdacs	r7, {}	; <UNPREDICTABLE>
 11c:	1c080300 	stcne	3, cr0, [r8], {-0}
 120:	1800000b 	stmdane	r0, {r0, r1, r3}
 124:	0b0b0113 	bleq	2c0578 <startup-0x1fd3fa88>
 128:	0b3b0b3a 	bleq	ec2e18 <startup-0x1f13d1e8>
 12c:	00001301 	andeq	r1, r0, r1, lsl #6
 130:	03000d19 	movweq	r0, #3353	; 0xd19
 134:	3b0b3a0e 	blcc	2ce974 <startup-0x1fd3168c>
 138:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
 13c:	1a00000b 	bne	170 <startup-0x1ffffe90>
 140:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 144:	0b3b0b3a 	bleq	ec2e34 <startup-0x1f13d1cc>
 148:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 14c:	041b0000 	ldreq	r0, [fp], #-0
 150:	0b0b3e01 	bleq	2cf95c <startup-0x1fd306a4>
 154:	3a13490b 	bcc	4d2588 <startup-0x1fb2da78>
 158:	010b3b0b 	tsteq	fp, fp, lsl #22
 15c:	1c000013 	stcne	0, cr0, [r0], {19}
 160:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 164:	0b3b0b3a 	bleq	ec2e54 <startup-0x1f13d1ac>
 168:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
 16c:	00001802 	andeq	r1, r0, r2, lsl #16
 170:	3f012e1d 	svccc	0x00012e1d
 174:	3a0e0319 	bcc	380de0 <startup-0x1fc7f220>
 178:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 17c:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 180:	96184006 	ldrls	r4, [r8], -r6
 184:	13011942 	movwne	r1, #6466	; 0x1942
 188:	2e1e0000 	cdpcs	0, 1, cr0, cr14, cr0, {0}
 18c:	03193f00 	tsteq	r9, #0, 30
 190:	3b0b3a0e 	blcc	2ce9d0 <startup-0x1fd31630>
 194:	1119270b 	tstne	r9, fp, lsl #14
 198:	40061201 	andmi	r1, r6, r1, lsl #4
 19c:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 1a0:	2e1f0000 	cdpcs	0, 1, cr0, cr15, cr0, {0}
 1a4:	03193f01 	tsteq	r9, #1, 30
 1a8:	3b0b3a0e 	blcc	2ce9e8 <startup-0x1fd31618>
 1ac:	1201110b 	andne	r1, r1, #-1073741822	; 0xc0000002
 1b0:	96184006 	ldrls	r4, [r8], -r6
 1b4:	13011942 	movwne	r1, #6466	; 0x1942
 1b8:	2e200000 	cdpcs	0, 2, cr0, cr0, cr0, {0}
 1bc:	03193f00 	tsteq	r9, #0, 30
 1c0:	3b0b3a0e 	blcc	2cea00 <startup-0x1fd31600>
 1c4:	1119270b 	tstne	r9, fp, lsl #14
 1c8:	40061201 	andmi	r1, r6, r1, lsl #4
 1cc:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 1d0:	2e210000 	cdpcs	0, 2, cr0, cr1, cr0, {0}
 1d4:	03193f01 	tsteq	r9, #1, 30
 1d8:	3b0b3a0e 	blcc	2cea18 <startup-0x1fd315e8>
 1dc:	11192705 	tstne	r9, r5, lsl #14
 1e0:	40061201 	andmi	r1, r6, r1, lsl #4
 1e4:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 1e8:	00001301 	andeq	r1, r0, r1, lsl #6
 1ec:	03000522 	movweq	r0, #1314	; 0x522
 1f0:	3b0b3a0e 	blcc	2cea30 <startup-0x1fd315d0>
 1f4:	02134905 	andseq	r4, r3, #81920	; 0x14000
 1f8:	23000018 	movwcs	r0, #24
 1fc:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 200:	0b3a0e03 	bleq	e83a14 <startup-0x1f17c5ec>
 204:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
 208:	01111349 	tsteq	r1, r9, asr #6
 20c:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 210:	01194297 			; <UNDEFINED> instruction: 0x01194297
 214:	24000013 	strcs	r0, [r0], #-19	; 0xffffffed
 218:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 21c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 220:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 224:	2e250000 	cdpcs	0, 2, cr0, cr5, cr0, {0}
 228:	03193f00 	tsteq	r9, #0, 30
 22c:	3b0b3a0e 	blcc	2cea6c <startup-0x1fd31594>
 230:	11192705 	tstne	r9, r5, lsl #14
 234:	40061201 	andmi	r1, r6, r1, lsl #4
 238:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 23c:	34260000 	strtcc	r0, [r6], #-0
 240:	3a080300 	bcc	200e48 <startup-0x1fdff1b8>
 244:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 248:	00180213 	andseq	r0, r8, r3, lsl r2
 24c:	012e2700 			; <UNDEFINED> instruction: 0x012e2700
 250:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 254:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 258:	01111927 	tsteq	r1, r7, lsr #18
 25c:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 260:	01194296 			; <UNDEFINED> instruction: 0x01194296
 264:	28000013 	stmdacs	r0, {r0, r1, r4}
 268:	0b0b000f 	bleq	2c02ac <startup-0x1fd3fd54>
 26c:	00001349 	andeq	r1, r0, r9, asr #6
 270:	3f002e29 	svccc	0x00002e29
 274:	3a0e0319 	bcc	380ee0 <startup-0x1fc7f120>
 278:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
 27c:	11134919 	tstne	r3, r9, lsl r9
 280:	40061201 	andmi	r1, r6, r1, lsl #4
 284:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 288:	2e2a0000 	cdpcs	0, 2, cr0, cr10, cr0, {0}
 28c:	03193f01 	tsteq	r9, #1, 30
 290:	3b0b3a0e 	blcc	2cead0 <startup-0x1fd31530>
 294:	49192705 	ldmdbmi	r9, {r0, r2, r8, r9, sl, sp}
 298:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
 29c:	96184006 	ldrls	r4, [r8], -r6
 2a0:	13011942 	movwne	r1, #6466	; 0x1942
 2a4:	2e2b0000 	cdpcs	0, 2, cr0, cr11, cr0, {0}
 2a8:	3a0e0301 	bcc	380eb4 <startup-0x1fc7f14c>
 2ac:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
 2b0:	11134919 	tstne	r3, r9, lsl r9
 2b4:	40061201 	andmi	r1, r6, r1, lsl #4
 2b8:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 2bc:	00001301 	andeq	r1, r0, r1, lsl #6
 2c0:	03012e2c 	movweq	r2, #7724	; 0x1e2c
 2c4:	3b0b3a0e 	blcc	2ceb04 <startup-0x1fd314fc>
 2c8:	11192705 	tstne	r9, r5, lsl #14
 2cc:	40061201 	andmi	r1, r6, r1, lsl #4
 2d0:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 2d4:	01000000 	mrseq	r0, (UNDEF: 0)
 2d8:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
 2dc:	0e030b13 	vmoveq.32	d3[0], r0
 2e0:	01110e1b 	tsteq	r1, fp, lsl lr
 2e4:	17100612 			; <UNDEFINED> instruction: 0x17100612
 2e8:	24020000 	strcs	r0, [r2], #-0
 2ec:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 2f0:	000e030b 	andeq	r0, lr, fp, lsl #6
 2f4:	00160300 	andseq	r0, r6, r0, lsl #6
 2f8:	0b3a0e03 	bleq	e83b0c <startup-0x1f17c4f4>
 2fc:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 300:	24040000 	strcs	r0, [r4], #-0
 304:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 308:	0008030b 	andeq	r0, r8, fp, lsl #6
 30c:	00350500 	eorseq	r0, r5, r0, lsl #10
 310:	00001349 	andeq	r1, r0, r9, asr #6
 314:	03003406 	movweq	r3, #1030	; 0x406
 318:	3b0b3a0e 	blcc	2ceb58 <startup-0x1fd314a8>
 31c:	3f134905 	svccc	0x00134905
 320:	00193c19 	andseq	r3, r9, r9, lsl ip
 324:	00340700 	eorseq	r0, r4, r0, lsl #14
 328:	0b3a0e03 	bleq	e83b3c <startup-0x1f17c4c4>
 32c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 330:	193c193f 	ldmdbne	ip!, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
 334:	04080000 	streq	r0, [r8], #-0
 338:	0b0b3e01 	bleq	2cfb44 <startup-0x1fd304bc>
 33c:	3a13490b 	bcc	4d2770 <startup-0x1fb2d890>
 340:	01053b0b 	tsteq	r5, fp, lsl #22
 344:	09000013 	stmdbeq	r0, {r0, r1, r4}
 348:	0e030028 	cdpeq	0, 0, cr0, cr3, cr8, {1}
 34c:	00000b1c 	andeq	r0, r0, ip, lsl fp
 350:	0b01130a 	bleq	44f80 <startup-0x1ffbb080>
 354:	3b0b3a0b 	blcc	2ceb88 <startup-0x1fd31478>
 358:	00130105 	andseq	r0, r3, r5, lsl #2
 35c:	000d0b00 	andeq	r0, sp, r0, lsl #22
 360:	0b3a0e03 	bleq	e83b74 <startup-0x1f17c48c>
 364:	1349053b 	movtne	r0, #38203	; 0x953b
 368:	00000b38 	andeq	r0, r0, r8, lsr fp
 36c:	03000d0c 	movweq	r0, #3340	; 0xd0c
 370:	3b0b3a08 	blcc	2ceb98 <startup-0x1fd31468>
 374:	38134905 	ldmdacc	r3, {r0, r2, r8, fp, lr}
 378:	0d00000b 	stceq	0, cr0, [r0, #-44]	; 0xffffffd4
 37c:	13490101 	movtne	r0, #37121	; 0x9101
 380:	00001301 	andeq	r1, r0, r1, lsl #6
 384:	4900210e 	stmdbmi	r0, {r1, r2, r3, r8, sp}
 388:	000b2f13 	andeq	r2, fp, r3, lsl pc
 38c:	00160f00 	andseq	r0, r6, r0, lsl #30
 390:	0b3a0e03 	bleq	e83ba4 <startup-0x1f17c45c>
 394:	1349053b 	movtne	r0, #38203	; 0x953b
 398:	04100000 	ldreq	r0, [r0], #-0
 39c:	0b0b3e01 	bleq	2cfba8 <startup-0x1fd30458>
 3a0:	3a13490b 	bcc	4d27d4 <startup-0x1fb2d82c>
 3a4:	010b3b0b 	tsteq	fp, fp, lsl #22
 3a8:	11000013 	tstne	r0, r3, lsl r0
 3ac:	0b0b0113 	bleq	2c0800 <startup-0x1fd3f800>
 3b0:	0b3b0b3a 	bleq	ec30a0 <startup-0x1f13cf60>
 3b4:	00001301 	andeq	r1, r0, r1, lsl #6
 3b8:	03000d12 	movweq	r0, #3346	; 0xd12
 3bc:	3b0b3a0e 	blcc	2cebfc <startup-0x1fd31404>
 3c0:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
 3c4:	1300000b 	movwne	r0, #11
 3c8:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 3cc:	0b3a0e03 	bleq	e83be0 <startup-0x1f17c420>
 3d0:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
 3d4:	06120111 			; <UNDEFINED> instruction: 0x06120111
 3d8:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 3dc:	00130119 	andseq	r0, r3, r9, lsl r1
 3e0:	00051400 	andeq	r1, r5, r0, lsl #8
 3e4:	0b3a0e03 	bleq	e83bf8 <startup-0x1f17c408>
 3e8:	1349053b 	movtne	r0, #38203	; 0x953b
 3ec:	00001802 	andeq	r1, r0, r2, lsl #16
 3f0:	03003415 	movweq	r3, #1045	; 0x415
 3f4:	3b0b3a0e 	blcc	2cec34 <startup-0x1fd313cc>
 3f8:	02134905 	andseq	r4, r3, #81920	; 0x14000
 3fc:	16000018 			; <UNDEFINED> instruction: 0x16000018
 400:	0b0b000f 	bleq	2c0444 <startup-0x1fd3fbbc>
 404:	00001349 	andeq	r1, r0, r9, asr #6
 408:	3f012e17 	svccc	0x00012e17
 40c:	3a0e0319 	bcc	381078 <startup-0x1fc7ef88>
 410:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
 414:	11134919 	tstne	r3, r9, lsl r9
 418:	40061201 	andmi	r1, r6, r1, lsl #4
 41c:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 420:	00001301 	andeq	r1, r0, r1, lsl #6
 424:	03003418 	movweq	r3, #1048	; 0x418
 428:	3b0b3a08 	blcc	2cec50 <startup-0x1fd313b0>
 42c:	02134905 	andseq	r4, r3, #81920	; 0x14000
 430:	19000018 	stmdbne	r0, {r3, r4}
 434:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 438:	0b3a0e03 	bleq	e83c4c <startup-0x1f17c3b4>
 43c:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 440:	06120111 			; <UNDEFINED> instruction: 0x06120111
 444:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 448:	00130119 	andseq	r0, r3, r9, lsl r1
 44c:	00051a00 	andeq	r1, r5, r0, lsl #20
 450:	0b3a0e03 	bleq	e83c64 <startup-0x1f17c39c>
 454:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 458:	00001802 	andeq	r1, r0, r2, lsl #16
 45c:	0300341b 	movweq	r3, #1051	; 0x41b
 460:	3b0b3a0e 	blcc	2ceca0 <startup-0x1fd31360>
 464:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 468:	1c000018 	stcne	0, cr0, [r0], {24}
 46c:	08030034 	stmdaeq	r3, {r2, r4, r5}
 470:	0b3b0b3a 	bleq	ec3160 <startup-0x1f13cea0>
 474:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 478:	2e1d0000 	cdpcs	0, 1, cr0, cr13, cr0, {0}
 47c:	03193f01 	tsteq	r9, #1, 30
 480:	3b0b3a0e 	blcc	2cecc0 <startup-0x1fd31340>
 484:	1119270b 	tstne	r9, fp, lsl #14
 488:	40061201 	andmi	r1, r6, r1, lsl #4
 48c:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 490:	Address 0x00000490 is out of bounds.


Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	00000024 	andeq	r0, r0, r4, lsr #32
   4:	00000002 	andeq	r0, r0, r2
   8:	00040000 	andeq	r0, r4, r0
   c:	00000000 	andeq	r0, r0, r0
  10:	20000010 	andcs	r0, r0, r0, lsl r0
  14:	00000e8c 	andeq	r0, r0, ip, lsl #29
  18:	20000000 	andcs	r0, r0, r0
  1c:	0000000c 	andeq	r0, r0, ip
	...
  28:	0000001c 	andeq	r0, r0, ip, lsl r0
  2c:	16590002 	ldrbne	r0, [r9], -r2
  30:	00040000 	andeq	r0, r4, r0
  34:	00000000 	andeq	r0, r0, r0
  38:	20000e9c 	mulcs	r0, ip, lr
  3c:	0000050e 	andeq	r0, r0, lr, lsl #10
	...

Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
   0:	20000010 	andcs	r0, r0, r0, lsl r0
   4:	20000e9c 	mulcs	r0, ip, lr
   8:	20000000 	andcs	r0, r0, r0
   c:	2000000c 	andcs	r0, r0, ip
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
   0:	00000410 	andeq	r0, r0, r0, lsl r4
   4:	01cf0002 	biceq	r0, pc, r2
   8:	01020000 	mrseq	r0, (UNDEF: 2)
   c:	000d0efb 	strdeq	r0, [sp], -fp
  10:	01010101 	tsteq	r1, r1, lsl #2
  14:	01000000 	mrseq	r0, (UNDEF: 0)
  18:	2e010000 	cdpcs	0, 0, cr0, cr1, cr0, {0}
  1c:	696c2f2e 	stmdbvs	ip!, {r1, r2, r3, r5, r8, r9, sl, fp, sp}^
  20:	54532f62 	ldrbpl	r2, [r3], #-3938	; 0xfffff09e
  24:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
  28:	696c5f34 	stmdbvs	ip!, {r2, r4, r5, r8, r9, sl, fp, ip, lr}^
  2c:	4d432f62 	stclmi	15, cr2, [r3, #-392]	; 0xfffffe78
  30:	2f534953 	svccs	0x00534953
  34:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
  38:	00656475 	rsbeq	r6, r5, r5, ror r4
  3c:	6c2f2e2e 	stcvs	14, cr2, [pc], #-184	; ffffff8c <GPIO_Pins+0xdfffeab4>
  40:	532f6269 			; <UNDEFINED> instruction: 0x532f6269
  44:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
  48:	6c5f3446 	cfldrdvs	mvd3, [pc], {70}	; 0x46
  4c:	532f6269 			; <UNDEFINED> instruction: 0x532f6269
  50:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
  54:	78783446 	ldmdavc	r8!, {r1, r2, r6, sl, ip, sp}^
  58:	6474535f 	ldrbtvs	r5, [r4], #-863	; 0xfffffca1
  5c:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
  60:	445f6870 	ldrbmi	r6, [pc], #-2160	; 68 <startup-0x1fffff98>
  64:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
  68:	72732f72 	rsbsvc	r2, r3, #456	; 0x1c8
  6c:	3a430063 	bcc	10c0200 <startup-0x1ef3fe00>
  70:	7469672f 	strbtvc	r6, [r9], #-1839	; 0xfffff8d1
  74:	5441442f 	strbpl	r4, [r1], #-1071	; 0xfffffbd1
  78:	2d303932 			; <UNDEFINED> instruction: 0x2d303932
  7c:	6d72614c 	ldfvse	f6, [r2, #-304]!	; 0xfffffed0
  80:	74737973 	ldrbtvc	r7, [r3], #-2419	; 0xfffff68d
  84:	6b2f6d65 	blvs	bdb620 <startup-0x1f4249e0>
  88:	442f646f 	strtmi	r6, [pc], #-1135	; 90 <startup-0x1fffff70>
  8c:	00726f6f 	rsbseq	r6, r2, pc, ror #30
  90:	6c2f2e2e 	stcvs	14, cr2, [pc], #-184	; ffffffe0 <GPIO_Pins+0xdfffeb08>
  94:	532f6269 			; <UNDEFINED> instruction: 0x532f6269
  98:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
  9c:	6c5f3446 	cfldrdvs	mvd3, [pc], {70}	; 0x46
  a0:	532f6269 			; <UNDEFINED> instruction: 0x532f6269
  a4:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
  a8:	78783446 	ldmdavc	r8!, {r1, r2, r6, sl, ip, sp}^
  ac:	6474535f 	ldrbtvs	r5, [r4], #-863	; 0xfffffca1
  b0:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
  b4:	445f6870 	ldrbmi	r6, [pc], #-2160	; bc <startup-0x1fffff44>
  b8:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
  bc:	6e692f72 	mcrvs	15, 3, r2, cr9, cr2, {3}
  c0:	3a630063 	bcc	18c0254 <startup-0x1e73fdac>
  c4:	6573635c 	ldrbvs	r6, [r3, #-860]!	; 0xfffffca4
  c8:	5c707061 	ldclpl	0, cr7, [r0], #-388	; 0xfffffe7c
  cc:	65646f63 	strbvs	r6, [r4, #-3939]!	; 0xfffff09d
  d0:	6574696c 	ldrbvs	r6, [r4, #-2412]!	; 0xfffff694
  d4:	6f6f745c 	svcvs	0x006f745c
  d8:	675c736c 	ldrbvs	r7, [ip, -ip, ror #6]
  dc:	612d6363 			; <UNDEFINED> instruction: 0x612d6363
  e0:	615c6d72 	cmpvs	ip, r2, ror sp
  e4:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
  e8:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
  ec:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
  f0:	636e695c 	cmnvs	lr, #92, 18	; 0x170000
  f4:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
  f8:	63616d5c 	cmnvs	r1, #92, 26	; 0x1700
  fc:	656e6968 	strbvs	r6, [lr, #-2408]!	; 0xfffff698
 100:	5c3a6300 	ldcpl	3, cr6, [sl], #-0
 104:	61657363 	cmnvs	r5, r3, ror #6
 108:	635c7070 	cmpvs	ip, #112	; 0x70
 10c:	6c65646f 	cfstrdvs	mvd6, [r5], #-444	; 0xfffffe44
 110:	5c657469 	cfstrdpl	mvd7, [r5], #-420	; 0xfffffe5c
 114:	6c6f6f74 	stclvs	15, cr6, [pc], #-464	; ffffff4c <GPIO_Pins+0xdfffea74>
 118:	63675c73 	cmnvs	r7, #29440	; 0x7300
 11c:	72612d63 	rsbvc	r2, r1, #6336	; 0x18c0
 120:	72615c6d 	rsbvc	r5, r1, #27904	; 0x6d00
 124:	6f6e2d6d 	svcvs	0x006e2d6d
 128:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
 12c:	5c696261 	sfmpl	f6, 2, [r9], #-388	; 0xfffffe7c
 130:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
 134:	5c656475 	cfstrdpl	mvd6, [r5], #-468	; 0xfffffe2c
 138:	00737973 	rsbseq	r7, r3, r3, ror r9
 13c:	726f6300 	rsbvc	r6, pc, #0, 6
 140:	6d635f65 	stclvs	15, cr5, [r3, #-404]!	; 0xfffffe6c
 144:	00682e34 	rsbeq	r2, r8, r4, lsr lr
 148:	73000001 	movwvc	r0, #1
 14c:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
 150:	78783466 	ldmdavc	r8!, {r1, r2, r5, r6, sl, ip, sp}^
 154:	6363725f 	cmnvs	r3, #-268435451	; 0xf0000005
 158:	0200632e 	andeq	r6, r0, #-1207959552	; 0xb8000000
 15c:	74730000 	ldrbtvc	r0, [r3], #-0
 160:	75747261 	ldrbvc	r7, [r4, #-609]!	; 0xfffffd9f
 164:	00632e70 	rsbeq	r2, r3, r0, ror lr
 168:	73000003 	movwvc	r0, #3
 16c:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
 170:	78783466 	ldmdavc	r8!, {r1, r2, r5, r6, sl, ip, sp}^
 174:	0400682e 	streq	r6, [r0], #-2094	; 0xfffff7d2
 178:	645f0000 	ldrbvs	r0, [pc], #-0	; 180 <startup-0x1ffffe80>
 17c:	75616665 	strbvc	r6, [r1, #-1637]!	; 0xfffff99b
 180:	745f746c 	ldrbvc	r7, [pc], #-1132	; 188 <startup-0x1ffffe78>
 184:	73657079 	cmnvc	r5, #121	; 0x79
 188:	0500682e 	streq	r6, [r0, #-2094]	; 0xfffff7d2
 18c:	735f0000 	cmpvc	pc, #0
 190:	6e696474 	mcrvs	4, 3, r6, cr9, cr4, {3}
 194:	00682e74 	rsbeq	r2, r8, r4, ror lr
 198:	73000006 	movwvc	r0, #6
 19c:	65747379 	ldrbvs	r7, [r4, #-889]!	; 0xfffffc87
 1a0:	74735f6d 	ldrbtvc	r5, [r3], #-3949	; 0xfffff093
 1a4:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
 1a8:	2e787834 	mrccs	8, 3, r7, cr8, cr4, {1}
 1ac:	00040068 	andeq	r0, r4, r8, rrx
 1b0:	6d747300 	ldclvs	3, cr7, [r4, #-0]
 1b4:	34663233 	strbtcc	r3, [r6], #-563	; 0xfffffdcd
 1b8:	725f7878 	subsvc	r7, pc, #120, 16	; 0x780000
 1bc:	682e6363 	stmdavs	lr!, {r0, r1, r5, r6, r8, r9, sp, lr}
 1c0:	00000400 	andeq	r0, r0, r0, lsl #8
 1c4:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
 1c8:	78346632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, sp, lr}
 1cc:	70675f78 	rsbvc	r5, r7, r8, ror pc
 1d0:	682e6f69 	stmdavs	lr!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}
 1d4:	00000400 	andeq	r0, r0, r0, lsl #8
 1d8:	02050000 	andeq	r0, r5, #0
 1dc:	20000010 	andcs	r0, r0, r0, lsl r0
 1e0:	010cdd03 	tsteq	ip, r3, lsl #26
 1e4:	1ecd4b75 			; <UNDEFINED> instruction: 0x1ecd4b75
 1e8:	00fc03d8 	ldrsbteq	r0, [ip], #56	; 0x38
 1ec:	02004b90 	andeq	r4, r0, #144, 22	; 0x24000
 1f0:	58060104 	stmdapl	r6, {r2, r8}
 1f4:	674b3006 	strbvs	r3, [fp, -r6]
 1f8:	04213f3d 	strteq	r3, [r1], #-3901	; 0xfffff0c3
 1fc:	73f70302 	mvnsvc	r0, #134217728	; 0x8000000
 200:	3f693082 	svccc	0x00693082
 204:	4e4f4069 	cdpmi	0, 4, cr4, cr15, cr9, {3}
 208:	03503f69 	cmpeq	r0, #420	; 0x1a4
 20c:	3f6be417 	svccc	0x006be417
 210:	740f034b 	strvc	r0, [pc], #-843	; 218 <startup-0x1ffffde8>
 214:	003d2f3d 	eorseq	r2, sp, sp, lsr pc
 218:	40020402 	andmi	r0, r2, r2, lsl #8
 21c:	02040200 	andeq	r0, r4, #0, 4
 220:	04020067 	streq	r0, [r2], #-103	; 0xffffff99
 224:	02003d02 	andeq	r3, r0, #2, 26	; 0x80
 228:	58060104 	stmdapl	r6, {r2, r8}
 22c:	4e5a4c06 	cdpmi	12, 5, cr4, cr10, cr6, {0}
 230:	0b032f3e 	bleq	cbf30 <startup-0x1ff340d0>
 234:	3f32674a 	svccc	0x0032674a
 238:	033d694d 	teqeq	sp, #1261568	; 0x134000
 23c:	4b6a7415 	blmi	1a9d298 <startup-0x1e562d68>
 240:	6c661403 	cfstrdvs	mvd1, [r6], #-12
 244:	0b033f3f 	bleq	cff48 <startup-0x1ff300b8>
 248:	20790366 	rsbscs	r0, r9, r6, ror #6
 24c:	243d233d 	ldrtcs	r2, [sp], #-829	; 0xfffffcc3
 250:	6a740f03 	bvs	1d03e64 <startup-0x1e2fc19c>
 254:	00de034b 	sbcseq	r0, lr, fp, asr #6
 258:	2dbb7c66 	ldccs	12, cr7, [fp, #408]!	; 0x198
 25c:	660e033e 			; <UNDEFINED> instruction: 0x660e033e
 260:	1a034b69 	bne	d300c <startup-0x1ff2cff4>
 264:	03835d66 	orreq	r5, r3, #6528	; 0x1980
 268:	69740185 	ldmdbvs	r4!, {r0, r2, r7, r8}^
 26c:	00e9034b 	rsceq	r0, r9, fp, asr #6
 270:	03ad6c66 			; <UNDEFINED> instruction: 0x03ad6c66
 274:	4b69740d 	blmi	1a5d2b0 <startup-0x1e5a2d50>
 278:	69660e03 	stmdbvs	r6!, {r0, r1, r9, sl, fp}^
 27c:	6615034b 	ldrvs	r0, [r5], -fp, asr #6
 280:	4d3f3459 	cfldrsmi	mvf3, [pc, #-356]!	; 124 <startup-0x1ffffedc>
 284:	18034169 	stmdane	r3, {r0, r3, r5, r6, r8, lr}
 288:	3f345990 	svccc	0x00345990
 28c:	0341694d 	movteq	r6, #6477	; 0x194d
 290:	4b7401b3 	blmi	1d00964 <startup-0x1e2ff69c>
 294:	4d4d3f33 	stclmi	15, cr3, [sp, #-204]	; 0xffffff34
 298:	660d033d 			; <UNDEFINED> instruction: 0x660d033d
 29c:	1703672f 	strne	r6, [r3, -pc, lsr #14]
 2a0:	3f334b66 	svccc	0x00334b66
 2a4:	033d4d4d 	teqeq	sp, #4928	; 0x1340
 2a8:	334b660f 	movtcc	r6, #46607	; 0xb60f
 2ac:	3d4d4d3f 	stclcc	13, cr4, [sp, #-252]	; 0xffffff04
 2b0:	4b820f03 	blmi	fe083ec4 <GPIO_Pins+0xde0829ec>
 2b4:	5b4d3f33 	blpl	134ff88 <startup-0x1ecb0078>
 2b8:	9024033d 	eorls	r0, r4, sp, lsr r3
 2bc:	775ac04b 	ldrbvc	ip, [sl, -fp, asr #32]
 2c0:	263d223d 			; <UNDEFINED> instruction: 0x263d223d
 2c4:	db3f5a67 	blle	fd6c68 <startup-0x1f029398>
 2c8:	038383cb 	orreq	r8, r3, #738197507	; 0x2c000003
 2cc:	253d201b 	ldrcs	r2, [sp, #-27]!	; 0xffffffe5
 2d0:	69683d59 	stmdbvs	r8!, {r0, r3, r4, r6, r8, sl, fp, ip, sp}^
 2d4:	69683d67 	stmdbvs	r8!, {r0, r1, r2, r5, r6, r8, sl, fp, ip, sp}^
 2d8:	67683d67 	strbvs	r3, [r8, -r7, ror #26]!
 2dc:	4bba3f03 	blmi	fee8fef0 <GPIO_Pins+0xdee8ea18>
 2e0:	4d3f8433 	cfldrsmi	mvf8, [pc, #-204]!	; 21c <startup-0x1ffffde4>
 2e4:	03834069 	orreq	r4, r3, #105	; 0x69
 2e8:	4b6a9e0a 	blmi	1aa7b18 <startup-0x1e5584e8>
 2ec:	69660c03 	stmdbvs	r6!, {r0, r1, sl, fp}^
 2f0:	01b8034b 			; <UNDEFINED> instruction: 0x01b8034b
 2f4:	033d4e66 	teqeq	sp, #1632	; 0x660
 2f8:	334b7416 	movtcc	r7, #46102	; 0xb416
 2fc:	4b4d4d4d 	blmi	1353838 <startup-0x1ecac7c8>
 300:	4b821403 	blmi	fe085314 <GPIO_Pins+0xde083e3c>
 304:	4d4d4d33 	stclmi	13, cr4, [sp, #-204]	; 0xffffff34
 308:	8211034b 	andshi	r0, r1, #738197505	; 0x2c000001
 30c:	4d4d334b 	stclmi	3, cr3, [sp, #-300]	; 0xfffffed4
 310:	10034b5b 	andne	r4, r3, fp, asr fp
 314:	4d334b74 	vldmdbmi	r3!, {d4-<overflow reg d61>}
 318:	034b694d 	movteq	r6, #47437	; 0xb94d
 31c:	4b8200d3 	blmi	fe080670 <GPIO_Pins+0xde07f198>
 320:	4d4d4d33 	stclmi	13, cr4, [sp, #-204]	; 0xffffff34
 324:	00f0034b 	rscseq	r0, r0, fp, asr #6
 328:	033d4e82 	teqeq	sp, #2080	; 0x820
 32c:	4c797425 	cfldrdmi	mvd7, [r9], #-148	; 0xffffff6c
 330:	03761e6c 	cmneq	r6, #108, 28	; 0x6c0
 334:	4c797413 	cfldrdmi	mvd7, [r9], #-76	; 0xffffffb4
 338:	03761e6c 	cmneq	r6, #108, 28	; 0x6c0
 33c:	4c797411 	cfldrdmi	mvd7, [r9], #-68	; 0xffffffbc
 340:	03761e6c 	cmneq	r6, #108, 28	; 0x6c0
 344:	4c79742c 	cfldrdmi	mvd7, [r9], #-176	; 0xffffff50
 348:	03761e6c 	cmneq	r6, #108, 28	; 0x6c0
 34c:	4c797427 	cfldrdmi	mvd7, [r9], #-156	; 0xffffff64
 350:	03761e6c 	cmneq	r6, #108, 28	; 0x6c0
 354:	4c79741d 	cfldrdmi	mvd7, [r9], #-116	; 0xffffff8c
 358:	03761e6c 	cmneq	r6, #108, 28	; 0x6c0
 35c:	4c797410 	cfldrdmi	mvd7, [r9], #-64	; 0xffffffc0
 360:	03761e6c 	cmneq	r6, #108, 28	; 0x6c0
 364:	4c79740e 	cfldrdmi	mvd7, [r9], #-56	; 0xffffffc8
 368:	03761e6c 	cmneq	r6, #108, 28	; 0x6c0
 36c:	4c787429 	cfldrdmi	mvd7, [r8], #-164	; 0xffffff5c
 370:	03761e6c 	cmneq	r6, #108, 28	; 0x6c0
 374:	4c787423 	cfldrdmi	mvd7, [r8], #-140	; 0xffffff74
 378:	03761e6c 	cmneq	r6, #108, 28	; 0x6c0
 37c:	4c787425 	cfldrdmi	mvd7, [r8], #-148	; 0xffffff6c
 380:	03761e6c 	cmneq	r6, #108, 28	; 0x6c0
 384:	4c787414 	cfldrdmi	mvd7, [r8], #-80	; 0xffffffb0
 388:	03761e6c 	cmneq	r6, #108, 28	; 0x6c0
 38c:	4c787412 	cfldrdmi	mvd7, [r8], #-72	; 0xffffffb8
 390:	03761e6c 	cmneq	r6, #108, 28	; 0x6c0
 394:	4c78742d 	cfldrdmi	mvd7, [r8], #-180	; 0xffffff4c
 398:	03761e6c 	cmneq	r6, #108, 28	; 0x6c0
 39c:	4c787428 	cfldrdmi	mvd7, [r8], #-160	; 0xffffff60
 3a0:	03761e6c 	cmneq	r6, #108, 28	; 0x6c0
 3a4:	4c6a740c 	cfstrdmi	mvd7, [sl], #-48	; 0xffffffd0
 3a8:	03681e6c 	cmneq	r8, #108, 28	; 0x6c0
 3ac:	947402ac 	ldrbtls	r0, [r4], #-684	; 0xfffffd54
 3b0:	ae1e974d 	cdpge	7, 1, cr9, cr14, cr13, {2}
 3b4:	67661703 	strbvs	r1, [r6, -r3, lsl #14]!
 3b8:	59502f2f 	ldmdbpl	r0, {r0, r1, r2, r3, r5, r8, r9, sl, fp, sp}^
 3bc:	4e3e4c3e 	mrcmi	12, 1, r4, cr14, cr14, {1}
 3c0:	5c765940 			; <UNDEFINED> instruction: 0x5c765940
 3c4:	0a033d4d 	beq	cf900 <startup-0x1ff30700>
 3c8:	03753066 	cmneq	r5, #102	; 0x66
 3cc:	50675811 	rsbpl	r5, r7, r1, lsl r8
 3d0:	3d4d5c68 	stclcc	12, cr5, [sp, #-416]	; 0xfffffe60
 3d4:	6c661103 	stfvse	f1, [r6], #-12
 3d8:	0303044b 	movweq	r0, #13387	; 0x344b
 3dc:	406667b9 	strhtmi	r6, [r6], #-121	; 0xffffff87
 3e0:	3d3d4b4b 	fldmdbxcc	sp!, {d4-d40}	;@ Deprecated
 3e4:	3d4b693d 	vstrcc.16	s13, [fp, #-122]	; 0xffffff86	; <UNPREDICTABLE>
 3e8:	78673d3d 	stmdavc	r7!, {r0, r2, r3, r4, r5, r8, sl, fp, ip, sp}^
 3ec:	5a91592f 	bpl	fe4568b0 <GPIO_Pins+0xde4553d8>
 3f0:	3e775a91 			; <UNDEFINED> instruction: 0x3e775a91
 3f4:	005a3e2f 	subseq	r3, sl, pc, lsr #28
 3f8:	6c010402 	cfstrsvs	mvf0, [r1], {2}
 3fc:	01000902 	tsteq	r0, r2, lsl #18
 400:	00030401 	andeq	r0, r3, r1, lsl #8
 404:	00000205 	andeq	r0, r0, r5, lsl #4
 408:	0e032000 	cdpeq	0, 0, cr2, cr3, cr0, {0}
 40c:	025e1301 	subseq	r1, lr, #67108864	; 0x4000000
 410:	01010003 	tsteq	r1, r3
 414:	00000294 	muleq	r0, r4, r2
 418:	01a80002 			; <UNDEFINED> instruction: 0x01a80002
 41c:	01020000 	mrseq	r0, (UNDEF: 2)
 420:	000d0efb 	strdeq	r0, [sp], -fp
 424:	01010101 	tsteq	r1, r1, lsl #2
 428:	01000000 	mrseq	r0, (UNDEF: 0)
 42c:	43010000 	movwmi	r0, #4096	; 0x1000
 430:	69672f3a 	stmdbvs	r7!, {r1, r3, r4, r5, r8, r9, sl, fp, sp}^
 434:	41442f74 	hvcmi	17140	; 0x42f4
 438:	30393254 	eorscc	r3, r9, r4, asr r2
 43c:	72614c2d 	rsbvc	r4, r1, #11520	; 0x2d00
 440:	7379736d 	cmnvc	r9, #-1275068415	; 0xb4000001
 444:	2f6d6574 	svccs	0x006d6574
 448:	2f646f6b 	svccs	0x00646f6b
 44c:	2f62696c 	svccs	0x0062696c
 450:	334d5453 	movtcc	r5, #54355	; 0xd453
 454:	5f344632 	svcpl	0x00344632
 458:	2f62696c 	svccs	0x0062696c
 45c:	334d5453 	movtcc	r5, #54355	; 0xd453
 460:	78344632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, lr}
 464:	74535f78 	ldrbvc	r5, [r3], #-3960	; 0xfffff088
 468:	72655064 	rsbvc	r5, r5, #100	; 0x64
 46c:	5f687069 	svcpl	0x00687069
 470:	76697244 	strbtvc	r7, [r9], -r4, asr #4
 474:	732f7265 			; <UNDEFINED> instruction: 0x732f7265
 478:	63006372 	movwvs	r6, #882	; 0x372
 47c:	73635c3a 	cmnvc	r3, #14848	; 0x3a00
 480:	70706165 	rsbsvc	r6, r0, r5, ror #2
 484:	646f635c 	strbtvs	r6, [pc], #-860	; 48c <startup-0x1ffffb74>
 488:	74696c65 	strbtvc	r6, [r9], #-3173	; 0xfffff39b
 48c:	6f745c65 	svcvs	0x00745c65
 490:	5c736c6f 	ldclpl	12, cr6, [r3], #-444	; 0xfffffe44
 494:	2d636367 	stclcs	3, cr6, [r3, #-412]!	; 0xfffffe64
 498:	5c6d7261 	sfmpl	f7, 2, [sp], #-388	; 0xfffffe7c
 49c:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
 4a0:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
 4a4:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
 4a8:	6e695c69 	cdpvs	12, 6, cr5, cr9, cr9, {3}
 4ac:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
 4b0:	616d5c65 	cmnvs	sp, r5, ror #24
 4b4:	6e696863 	cdpvs	8, 6, cr6, cr9, cr3, {3}
 4b8:	3a630065 	bcc	18c0654 <startup-0x1e73f9ac>
 4bc:	6573635c 	ldrbvs	r6, [r3, #-860]!	; 0xfffffca4
 4c0:	5c707061 	ldclpl	0, cr7, [r0], #-388	; 0xfffffe7c
 4c4:	65646f63 	strbvs	r6, [r4, #-3939]!	; 0xfffff09d
 4c8:	6574696c 	ldrbvs	r6, [r4, #-2412]!	; 0xfffff694
 4cc:	6f6f745c 	svcvs	0x006f745c
 4d0:	675c736c 	ldrbvs	r7, [ip, -ip, ror #6]
 4d4:	612d6363 			; <UNDEFINED> instruction: 0x612d6363
 4d8:	615c6d72 	cmpvs	ip, r2, ror sp
 4dc:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
 4e0:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
 4e4:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
 4e8:	636e695c 	cmnvs	lr, #92, 18	; 0x170000
 4ec:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
 4f0:	7379735c 	cmnvc	r9, #92, 6	; 0x70000001
 4f4:	2f2e2e00 	svccs	0x002e2e00
 4f8:	2f62696c 	svccs	0x0062696c
 4fc:	334d5453 	movtcc	r5, #54355	; 0xd453
 500:	5f344632 	svcpl	0x00344632
 504:	2f62696c 	svccs	0x0062696c
 508:	49534d43 	ldmdbmi	r3, {r0, r1, r6, r8, sl, fp, lr}^
 50c:	6e692f53 	mcrvs	15, 3, r2, cr9, cr3, {2}
 510:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
 514:	2e2e0065 	cdpcs	0, 2, cr0, cr14, cr5, {3}
 518:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
 51c:	4d54532f 	ldclmi	3, cr5, [r4, #-188]	; 0xffffff44
 520:	34463233 	strbcc	r3, [r6], #-563	; 0xfffffdcd
 524:	62696c5f 	rsbvs	r6, r9, #24320	; 0x5f00
 528:	4d54532f 	ldclmi	3, cr5, [r4, #-188]	; 0xffffff44
 52c:	34463233 	strbcc	r3, [r6], #-563	; 0xfffffdcd
 530:	535f7878 	cmppl	pc, #120, 16	; 0x780000
 534:	65506474 	ldrbvs	r6, [r0, #-1140]	; 0xfffffb8c
 538:	68706972 	ldmdavs	r0!, {r1, r4, r5, r6, r8, fp, sp, lr}^
 53c:	6972445f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, sl, lr}^
 540:	2f726576 	svccs	0x00726576
 544:	00636e69 	rsbeq	r6, r3, r9, ror #28
 548:	6d747300 	ldclvs	3, cr7, [r4, #-0]
 54c:	34663233 	strbtcc	r3, [r6], #-563	; 0xfffffdcd
 550:	675f7878 			; <UNDEFINED> instruction: 0x675f7878
 554:	2e6f6970 			; <UNDEFINED> instruction: 0x2e6f6970
 558:	00010063 	andeq	r0, r1, r3, rrx
 55c:	65645f00 	strbvs	r5, [r4, #-3840]!	; 0xfffff100
 560:	6c756166 	ldfvse	f6, [r5], #-408	; 0xfffffe68
 564:	79745f74 	ldmdbvc	r4!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
 568:	2e736570 	mrccs	5, 3, r6, cr3, cr0, {3}
 56c:	00020068 	andeq	r0, r2, r8, rrx
 570:	74735f00 	ldrbtvc	r5, [r3], #-3840	; 0xfffff100
 574:	746e6964 	strbtvc	r6, [lr], #-2404	; 0xfffff69c
 578:	0300682e 	movweq	r6, #2094	; 0x82e
 57c:	6f630000 	svcvs	0x00630000
 580:	635f6572 	cmpvs	pc, #478150656	; 0x1c800000
 584:	682e346d 	stmdavs	lr!, {r0, r2, r3, r5, r6, sl, ip, sp}
 588:	00000400 	andeq	r0, r0, r0, lsl #8
 58c:	74737973 	ldrbtvc	r7, [r3], #-2419	; 0xfffff68d
 590:	735f6d65 	cmpvc	pc, #6464	; 0x1940
 594:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
 598:	78783466 	ldmdavc	r8!, {r1, r2, r5, r6, sl, ip, sp}^
 59c:	0500682e 	streq	r6, [r0, #-2094]	; 0xfffff7d2
 5a0:	74730000 	ldrbtvc	r0, [r3], #-0
 5a4:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
 5a8:	2e787834 	mrccs	8, 3, r7, cr8, cr4, {1}
 5ac:	00050068 	andeq	r0, r5, r8, rrx
 5b0:	6d747300 	ldclvs	3, cr7, [r4, #-0]
 5b4:	34663233 	strbtcc	r3, [r6], #-563	; 0xfffffdcd
 5b8:	675f7878 			; <UNDEFINED> instruction: 0x675f7878
 5bc:	2e6f6970 			; <UNDEFINED> instruction: 0x2e6f6970
 5c0:	00050068 	andeq	r0, r5, r8, rrx
 5c4:	05000000 	streq	r0, [r0, #-0]
 5c8:	000e9c02 	andeq	r9, lr, r2, lsl #24
 5cc:	00ff0320 	rscseq	r0, pc, r0, lsr #6
 5d0:	4b4c4e01 	blmi	1313ddc <startup-0x1ecec224>
 5d4:	034a3803 	movteq	r3, #43011	; 0xa803
 5d8:	4b4c204a 	blmi	1308708 <startup-0x1ecf78f8>
 5dc:	034a3303 	movteq	r3, #41731	; 0xa303
 5e0:	4b4c204f 	blmi	1308724 <startup-0x1ecf78dc>
 5e4:	034a2e03 	movteq	r2, #44547	; 0xae03
 5e8:	4b4c2054 	blmi	1308740 <startup-0x1ecf78c0>
 5ec:	034a2903 	movteq	r2, #43267	; 0xa903
 5f0:	4b4c2059 	blmi	130875c <startup-0x1ecf78a4>
 5f4:	034a2403 	movteq	r2, #41987	; 0xa403
 5f8:	4b4c205e 	blmi	1308778 <startup-0x1ecf7888>
 5fc:	034a1f03 	movteq	r1, #44803	; 0xaf03
 600:	4b4c2063 	blmi	1308794 <startup-0x1ecf786c>
 604:	034a1a03 	movteq	r1, #43523	; 0xaa03
 608:	4b4c2068 	blmi	13087b0 <startup-0x1ecf7850>
 60c:	034a1503 	movteq	r1, #42243	; 0xa503
 610:	674c206e 	strbvs	r2, [ip, -lr, rrx]
 614:	03660f03 	cmneq	r6, #3, 30
 618:	674c2073 	smlsldxvs	r2, ip, r3, r0
 61c:	03660a03 	cmneq	r6, #12288	; 0x3000
 620:	674c207a 	smlsldxvs	r2, ip, sl, r0
 624:	080c0369 	stmdaeq	ip, {r0, r3, r5, r6, r8, r9}
 628:	0a035990 	beq	d6c70 <startup-0x1ff29390>
 62c:	5a5a3e66 	bpl	168ffcc <startup-0x1e970034>
 630:	00bcad4c 	adcseq	sl, ip, ip, asr #26
 634:	06010402 	streq	r0, [r1], -r2, lsl #8
 638:	ad50064a 	ldclge	6, cr0, [r0, #-296]	; 0xfffffed8
 63c:	bbccadc0 	bllt	ff32bd44 <GPIO_Pins+0xdf32a86c>
 640:	02040200 	andeq	r0, r4, #0, 4
 644:	00ba6203 	adcseq	r6, sl, r3, lsl #4
 648:	06010402 	streq	r0, [r1], -r2, lsl #8
 64c:	2103063c 	tstcs	r3, ip, lsr r6
 650:	3d4c523c 	sfmcc	f5, 2, [ip, #-240]	; 0xffffff10
 654:	3d3d3d3d 	ldccc	13, cr3, [sp, #-244]!	; 0xffffff0c
 658:	75741003 	ldrbvc	r1, [r4, #-3]!
 65c:	4c3e5a42 			; <UNDEFINED> instruction: 0x4c3e5a42
 660:	033d3e3e 	teqeq	sp, #992	; 0x3e0
 664:	50754a1c 	rsbspl	r4, r5, ip, lsl sl
 668:	3d4c5c68 	stclcc	12, cr5, [ip, #-416]	; 0xfffffe60
 66c:	4e4a0a03 	vmlami.f32	s1, s20, s6
 670:	4a0c033d 	bmi	30136c <startup-0x1fcfec94>
 674:	5c685075 	stclpl	0, cr5, [r8], #-468	; 0xfffffe2c
 678:	0a033d4c 	beq	cfbb0 <startup-0x1ff30450>
 67c:	033d4e4a 	teqeq	sp, #1184	; 0x4a0
 680:	4b794a0f 	blmi	1e52ec4 <startup-0x1e1ad13c>
 684:	794a0f03 	stmdbvc	sl, {r0, r1, r8, r9, sl, fp}^
 688:	4a10034b 	bmi	4013bc <startup-0x1fbfec44>
 68c:	1e504cc0 	cdpne	12, 5, cr4, cr0, cr0, {6}
 690:	4a0b034c 	bmi	2c13c8 <startup-0x1fd3ec38>
 694:	0b034b78 	bleq	d347c <startup-0x1ff2cb84>
 698:	0375784a 	cmneq	r5, #4849664	; 0x4a0000
 69c:	bb4a00ce 	bllt	12809dc <startup-0x1ed7f624>
 6a0:	089f352f 	ldmeq	pc, {r0, r1, r2, r3, r5, r8, sl, ip, sp}	; <UNPREDICTABLE>
 6a4:	029fbbc9 	addseq	fp, pc, #205824	; 0x32400
 6a8:	01010004 	tsteq	r1, r4

Disassembly of section .debug_str:

00000000 <.debug_str>:
       0:	706c6c70 	rsbvc	r6, ip, r0, ror ip
       4:	45535200 	ldrbmi	r5, [r3, #-512]	; 0xfffffe00
       8:	44455652 	strbmi	r5, [r5], #-1618	; 0xfffff9ae
       c:	54520031 	ldrbpl	r0, [r2], #-49	; 0xffffffcf
      10:	4b575f43 	blmi	15d7d24 <startup-0x1ea282dc>
      14:	495f5055 	ldmdbmi	pc, {r0, r2, r4, r6, ip, lr}^	; <UNPREDICTABLE>
      18:	006e5152 	rsbeq	r5, lr, r2, asr r1
      1c:	49545845 	ldmdbmi	r4, {r0, r2, r6, fp, ip, lr}^
      20:	52495f32 	subpl	r5, r9, #50, 30	; 0xc8
      24:	44006e51 	strmi	r6, [r0], #-3665	; 0xfffff1af
      28:	5f31414d 	svcpl	0x0031414d
      2c:	65727453 	ldrbvs	r7, [r2, #-1107]!	; 0xfffffbad
      30:	5f366d61 	svcpl	0x00366d61
      34:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
      38:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
      3c:	50555f38 	subspl	r5, r5, r8, lsr pc
      40:	4d49545f 	cfstrdmi	mvd5, [r9, #-380]	; 0xfffffe84
      44:	495f3331 	ldmdbmi	pc, {r0, r4, r5, r8, r9, ip, sp}^	; <UNPREDICTABLE>
      48:	006e5152 	rsbeq	r5, lr, r2, asr r1
      4c:	494c4c50 	stmdbmi	ip, {r4, r6, sl, fp, lr}^
      50:	46435332 			; <UNDEFINED> instruction: 0x46435332
      54:	52005247 	andpl	r5, r0, #1879048196	; 0x70000004
      58:	495f4343 	ldmdbmi	pc, {r0, r1, r6, r8, r9, lr}^	; <UNPREDICTABLE>
      5c:	4c435332 	mcrrmi	3, 3, r5, r3, cr2
      60:	6e6f434b 	cdpvs	3, 6, cr4, cr15, cr11, {2}
      64:	00676966 	rsbeq	r6, r7, r6, ror #18
      68:	5f434352 	svcpl	0x00434352
      6c:	43746547 	cmnmi	r4, #297795584	; 0x11c00000
      70:	6b636f6c 	blvs	18dbe28 <startup-0x1e7241d8>
      74:	65724673 	ldrbvs	r4, [r2, #-1651]!	; 0xfffff98d
      78:	4d440071 	stclmi	0, cr0, [r4, #-452]	; 0xfffffe3c
      7c:	535f3241 	cmppl	pc, #268435460	; 0x10000004
      80:	61657274 	smcvs	22308	; 0x5724
      84:	495f316d 	ldmdbmi	pc, {r0, r2, r3, r5, r6, r8, ip, sp}^	; <UNPREDICTABLE>
      88:	006e5152 	rsbeq	r5, lr, r2, asr r1
      8c:	4b4c4348 	blmi	1310db4 <startup-0x1ecef24c>
      90:	6572465f 	ldrbvs	r4, [r2, #-1631]!	; 0xfffff9a1
      94:	6e657571 	mcrvs	5, 3, r7, cr5, cr1, {3}
      98:	47007963 	strmi	r7, [r0, -r3, ror #18]
      9c:	5f4f4950 	svcpl	0x004f4950
      a0:	64507550 	ldrbvs	r7, [r0], #-1360	; 0xfffffab0
      a4:	504f4e5f 	subpl	r4, pc, pc, asr lr	; <UNPREDICTABLE>
      a8:	004c4c55 	subeq	r4, ip, r5, asr ip
      ac:	524f5456 	subpl	r5, pc, #1442840576	; 0x56000000
      b0:	49505300 	ldmdbmi	r0, {r8, r9, ip, lr}^
      b4:	52495f33 	subpl	r5, r9, #51, 30	; 0xcc
      b8:	46006e51 			; <UNDEFINED> instruction: 0x46006e51
      bc:	4853414c 	ldmdami	r3, {r2, r3, r6, r8, lr}^
      c0:	5152495f 	cmppl	r2, pc, asr r9
      c4:	4344006e 	movtmi	r0, #16494	; 0x406e
      c8:	495f494d 	ldmdbmi	pc, {r0, r2, r3, r6, r8, fp, lr}^	; <UNPREDICTABLE>
      cc:	006e5152 	rsbeq	r5, lr, r2, asr r1
      d0:	5f434352 	svcpl	0x00434352
      d4:	32425041 	subcc	r5, r2, #65	; 0x41
      d8:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
      dc:	6c436870 	mcrrvs	8, 7, r6, r3, cr0
      e0:	4c6b636f 	stclmi	3, cr6, [fp], #-444	; 0xfffffe44
      e4:	646f4d50 	strbtvs	r4, [pc], #-3408	; ec <startup-0x1fffff14>
      e8:	646d4365 	strbtvs	r4, [sp], #-869	; 0xfffffc9b
      ec:	43435200 	movtmi	r5, #12800	; 0x3200
      f0:	4248415f 	submi	r4, r8, #-1073741801	; 0xc0000017
      f4:	72655032 	rsbvc	r5, r5, #50	; 0x32
      f8:	43687069 	cmnmi	r8, #105	; 0x69
      fc:	6b636f6c 	blvs	18dbeb4 <startup-0x1e72414c>
     100:	6f4d504c 	svcvs	0x004d504c
     104:	6d436564 	cfstr64vs	mvdx6, [r3, #-400]	; 0xfffffe70
     108:	50470064 	subpl	r0, r7, r4, rrx
     10c:	544f4f49 	strbpl	r4, [pc], #-3913	; 114 <startup-0x1ffffeec>
     110:	5f657079 	svcpl	0x00657079
     114:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0xfffff6ac
     118:	00666544 	rsbeq	r6, r6, r4, asr #10
     11c:	5f434352 	svcpl	0x00434352
     120:	31425041 	cmpcc	r2, r1, asr #32
     124:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
     128:	65526870 	ldrbvs	r6, [r2, #-2160]	; 0xfffff790
     12c:	43746573 	cmnmi	r4, #482344960	; 0x1cc00000
     130:	5200646d 	andpl	r6, r0, #1828716544	; 0x6d000000
     134:	4d5f4343 	ldclmi	3, cr4, [pc, #-268]	; 30 <startup-0x1fffffd0>
     138:	0065646f 	rsbeq	r6, r5, pc, ror #8
     13c:	324d4954 	subcc	r4, sp, #84, 18	; 0x150000
     140:	5152495f 	cmppl	r2, pc, asr r9
     144:	4352006e 	cmpmi	r2, #110	; 0x6e
     148:	54525f43 	ldrbpl	r5, [r2], #-3907	; 0xfffff0bd
     14c:	4b4c4343 	blmi	1310e60 <startup-0x1ecef1a0>
     150:	72756f53 	rsbsvc	r6, r5, #332	; 0x14c
     154:	49006563 	stmdbmi	r0, {r0, r1, r5, r6, r8, sl, sp, lr}
     158:	00525043 	subseq	r5, r2, r3, asr #32
     15c:	5f434352 	svcpl	0x00434352
     160:	434d4954 	movtmi	r4, #55636	; 0xd954
     164:	72504b4c 	subsvc	r4, r0, #76, 22	; 0x13000
     168:	6f437365 	svcvs	0x00437365
     16c:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
     170:	43435200 	movtmi	r5, #12800	; 0x3200
     174:	4c4c505f 	mcrrmi	0, 5, r5, ip, cr15
     178:	43533249 	cmpmi	r3, #-1879048188	; 0x90000004
     17c:	5200646d 	andpl	r6, r0, #1828716544	; 0x6d000000
     180:	485f4343 	ldmdami	pc, {r0, r1, r6, r8, r9, lr}^	; <UNPREDICTABLE>
     184:	004b4c43 	subeq	r4, fp, r3, asr #24
     188:	324e4143 	subcc	r4, lr, #-1073741808	; 0xc0000010
     18c:	3058525f 	subscc	r5, r8, pc, asr r2
     190:	5152495f 	cmppl	r2, pc, asr r9
     194:	5355006e 	cmppl	r5, #110	; 0x6e
     198:	36545241 	ldrbcc	r5, [r4], -r1, asr #4
     19c:	5152495f 	cmppl	r2, pc, asr r9
     1a0:	4352006e 	cmpmi	r2, #110	; 0x6e
     1a4:	48415f43 	stmdami	r1, {r0, r1, r6, r8, r9, sl, fp, ip, lr}^
     1a8:	65503242 	ldrbvs	r3, [r0, #-578]	; 0xfffffdbe
     1ac:	68706972 	ldmdavs	r0!, {r1, r4, r5, r6, r8, fp, sp, lr}^
     1b0:	636f6c43 	cmnvs	pc, #17152	; 0x4300
     1b4:	646d436b 	strbtvs	r4, [sp], #-875	; 0xfffffc95
     1b8:	755f5f00 	ldrbvc	r5, [pc, #-3840]	; fffff2c0 <GPIO_Pins+0xdfffdde8>
     1bc:	38746e69 	ldmdacc	r4!, {r0, r3, r5, r6, r9, sl, fp, sp, lr}^
     1c0:	5300745f 	movwpl	r7, #1119	; 0x45f
     1c4:	5f324950 	svcpl	0x00324950
     1c8:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     1cc:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
     1d0:	52425f38 	subpl	r5, r2, #56, 30	; 0xe0
     1d4:	49545f4b 	ldmdbmi	r4, {r0, r1, r3, r6, r8, r9, sl, fp, ip, lr}^
     1d8:	5f32314d 	svcpl	0x0032314d
     1dc:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     1e0:	42484100 	submi	r4, r8, #0, 2
     1e4:	45504c32 	ldrbmi	r4, [r0, #-3122]	; 0xfffff3ce
     1e8:	4700524e 	strmi	r5, [r0, -lr, asr #4]
     1ec:	5f4f4950 	svcpl	0x004f4950
     1f0:	64507550 	ldrbvs	r7, [r0], #-1360	; 0xfffffab0
     1f4:	574f445f 	smlsldpl	r4, pc, pc, r4	; <UNPREDICTABLE>
     1f8:	4941004e 	stmdbmi	r1, {r1, r2, r3, r6}^
     1fc:	00524352 	subseq	r4, r2, r2, asr r3
     200:	5f434352 	svcpl	0x00434352
     204:	50494153 	subpl	r4, r9, r3, asr r1
     208:	41534c4c 	cmpmi	r3, ip, asr #24
     20c:	6b6c4349 	blvs	1b10f38 <startup-0x1e4ef0c8>
     210:	43766944 	cmnmi	r6, #68, 18	; 0x110000
     214:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
     218:	50430067 	subpl	r0, r3, r7, rrx
     21c:	00444955 	subeq	r4, r4, r5, asr r9
     220:	54737953 	ldrbtpl	r7, [r3], #-2387	; 0xfffff6ad
     224:	5f6b6369 	svcpl	0x006b6369
     228:	646e6148 	strbtvs	r6, [lr], #-328	; 0xfffffeb8
     22c:	0072656c 	rsbseq	r6, r2, ip, ror #10
     230:	5f434352 	svcpl	0x00434352
     234:	4344544c 	movtmi	r5, #17484	; 0x444c
     238:	444b4c43 	strbmi	r4, [fp], #-3139	; 0xfffff3bd
     23c:	6f437669 	svcvs	0x00437669
     240:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
     244:	414d4400 	cmpmi	sp, r0, lsl #8
     248:	74535f32 	ldrbvc	r5, [r3], #-3890	; 0xfffff0ce
     24c:	6d616572 	cfstr64vs	mvdx6, [r1, #-456]!	; 0xfffffe38
     250:	52495f35 	subpl	r5, r9, #53, 30	; 0xd4
     254:	47006e51 	smlsdmi	r0, r1, lr, r6
     258:	5f4f4950 	svcpl	0x004f4950
     25c:	65646f4d 	strbvs	r6, [r4, #-3917]!	; 0xfffff0b3
     260:	0046415f 	subeq	r4, r6, pc, asr r1
     264:	5f434352 	svcpl	0x00434352
     268:	33424841 	movtcc	r4, #10305	; 0x2841
     26c:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
     270:	65526870 	ldrbvs	r6, [r2, #-2160]	; 0xfffff790
     274:	43746573 	cmnmi	r4, #482344960	; 0x1cc00000
     278:	5400646d 	strpl	r6, [r0], #-1133	; 0xfffffb93
     27c:	5f314d49 	svcpl	0x00314d49
     280:	5f475254 	svcpl	0x00475254
     284:	5f4d4f43 	svcpl	0x004d4f43
     288:	314d4954 	cmpcc	sp, r4, asr r9
     28c:	52495f31 	subpl	r5, r9, #49, 30	; 0xc4
     290:	47006e51 	smlsdmi	r0, r1, lr, r6
     294:	5f4f4950 	svcpl	0x004f4950
     298:	65646f4d 	strbvs	r6, [r4, #-3917]!	; 0xfffff0b3
     29c:	004e415f 	subeq	r4, lr, pc, asr r1
     2a0:	5f434352 	svcpl	0x00434352
     2a4:	4b4c4350 	blmi	1310fec <startup-0x1ecef014>
     2a8:	6e6f4332 	mcrvs	3, 3, r4, cr15, cr2, {1}
     2ac:	00676966 	rsbeq	r6, r7, r6, ror #18
     2b0:	5f434352 	svcpl	0x00434352
     2b4:	6e496544 	cdpvs	5, 4, cr6, cr9, cr4, {2}
     2b8:	52007469 	andpl	r7, r0, #1761607680	; 0x69000000
     2bc:	535f4343 	cmppl	pc, #201326593	; 0xc000001
     2c0:	6c424941 	mcrrvs	9, 4, r4, r2, cr1	; <UNPREDICTABLE>
     2c4:	426b636f 	rsbmi	r6, fp, #-1140850687	; 0xbc000001
     2c8:	434b4c43 	movtmi	r4, #48195	; 0xbc43
     2cc:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
     2d0:	50410067 	subpl	r0, r1, r7, rrx
     2d4:	4e453242 	cdpmi	2, 4, cr3, cr5, cr2, {2}
     2d8:	43520052 	cmpmi	r2, #82	; 0x52
     2dc:	65475f43 	strbvs	r5, [r7, #-3907]	; 0xfffff0bd
     2e0:	53595374 	cmppl	r9, #116, 6	; 0xd0000001
     2e4:	534b4c43 	movtpl	r4, #48195	; 0xbc43
     2e8:	6372756f 	cmnvs	r2, #465567744	; 0x1bc00000
     2ec:	48410065 	stmdami	r1, {r0, r2, r5, r6}^
     2f0:	504c3142 	subpl	r3, ip, r2, asr #2
     2f4:	00524e45 	subseq	r4, r2, r5, asr #28
     2f8:	5f434352 	svcpl	0x00434352
     2fc:	494c4c50 	stmdbmi	ip, {r4, r6, sl, fp, lr}^
     300:	69445332 	stmdbvs	r4, {r1, r4, r5, r8, r9, ip, lr}^
     304:	53005176 	movwpl	r5, #374	; 0x176
     308:	69547379 	ldmdbvs	r4, {r0, r3, r4, r5, r6, r8, r9, ip, sp, lr}^
     30c:	495f6b63 	ldmdbmi	pc, {r0, r1, r5, r6, r8, r9, fp, sp, lr}^	; <UNPREDICTABLE>
     310:	006e5152 	rsbeq	r5, lr, r2, asr r1
     314:	5f434352 	svcpl	0x00434352
     318:	33424841 	movtcc	r4, #10305	; 0x2841
     31c:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
     320:	55006870 	strpl	r6, [r0, #-2160]	; 0xfffff790
     324:	54524153 	ldrbpl	r4, [r2], #-339	; 0xfffffead
     328:	52495f33 	subpl	r5, r9, #51, 30	; 0xcc
     32c:	44006e51 	strmi	r6, [r0], #-3665	; 0xfffff1af
     330:	46434b43 	strbmi	r4, [r3], -r3, asr #22
     334:	49005247 	stmdbmi	r0, {r0, r1, r2, r6, r9, ip, lr}
     338:	00525343 	subseq	r5, r2, r3, asr #6
     33c:	5f434352 	svcpl	0x00434352
     340:	324f434d 	subcc	r4, pc, #872415233	; 0x34000001
     344:	00766944 	rsbseq	r6, r6, r4, asr #18
     348:	4f495047 	svcmi	0x00495047
     34c:	79544f5f 	ldmdbvc	r4, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, lr}^
     350:	4f5f6570 	svcmi	0x005f6570
     354:	6f500044 	svcvs	0x00500044
     358:	695f7472 	ldmdbvs	pc, {r1, r4, r5, r6, sl, ip, sp, lr}^	; <UNPREDICTABLE>
     35c:	0074696e 	rsbseq	r6, r4, lr, ror #18
     360:	4f495047 	svcmi	0x00495047
     364:	696e495f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, lr}^
     368:	70795474 	rsbsvc	r5, r9, r4, ror r4
     36c:	66654465 	strbtvs	r4, [r5], -r5, ror #8
     370:	43435200 	movtmi	r5, #12800	; 0x3200
     374:	5359535f 	cmppl	r9, #2080374785	; 0x7c000001
     378:	534b4c43 	movtpl	r4, #48195	; 0xbc43
     37c:	6372756f 	cmnvs	r2, #465567744	; 0x1bc00000
     380:	4d440065 	stclmi	0, cr0, [r4, #-404]	; 0xfffffe6c
     384:	535f3141 	cmppl	pc, #1073741840	; 0x40000010
     388:	61657274 	smcvs	22308	; 0x5724
     38c:	495f326d 	ldmdbmi	pc, {r0, r2, r3, r5, r6, r9, ip, sp}^	; <UNPREDICTABLE>
     390:	006e5152 	rsbeq	r5, lr, r2, asr r1
     394:	5f434352 	svcpl	0x00434352
     398:	534c4c50 	movtpl	r4, #52304	; 0xcc50
     39c:	6372756f 	cmnvs	r2, #465567744	; 0x1bc00000
     3a0:	43520065 	cmpmi	r2, #101	; 0x65
     3a4:	50415f43 	subpl	r5, r1, r3, asr #30
     3a8:	65503142 	ldrbvs	r3, [r0, #-322]	; 0xfffffebe
     3ac:	68706972 	ldmdavs	r0!, {r1, r4, r5, r6, r8, fp, sp, lr}^
     3b0:	636f6c43 	cmnvs	pc, #17152	; 0x4300
     3b4:	646d436b 	strbtvs	r4, [sp], #-875	; 0xfffffc95
     3b8:	53455200 	movtpl	r5, #20992	; 0x5200
     3bc:	45565245 	ldrbmi	r5, [r6, #-581]	; 0xfffffdbb
     3c0:	52003044 	andpl	r3, r0, #68	; 0x44
     3c4:	52455345 	subpl	r5, r5, #335544321	; 0x14000001
     3c8:	31444556 	cmpcc	r4, r6, asr r5
     3cc:	736e7500 	cmnvc	lr, #0, 10
     3d0:	656e6769 	strbvs	r6, [lr, #-1897]!	; 0xfffff897
     3d4:	68632064 	stmdavs	r3!, {r2, r5, r6, sp}^
     3d8:	44007261 	strmi	r7, [r0], #-609	; 0xfffffd9f
     3dc:	5f32414d 	svcpl	0x0032414d
     3e0:	65727453 	ldrbvs	r7, [r2, #-1107]!	; 0xfffffbad
     3e4:	5f346d61 	svcpl	0x00346d61
     3e8:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     3ec:	53455200 	movtpl	r5, #20992	; 0x5200
     3f0:	45565245 	ldrbmi	r5, [r6, #-581]	; 0xfffffdbb
     3f4:	52003444 	andpl	r3, r0, #68, 8	; 0x44000000
     3f8:	52455345 	subpl	r5, r5, #335544321	; 0x14000001
     3fc:	35444556 	strbcc	r4, [r4, #-1366]	; 0xfffffaaa
     400:	53455200 	movtpl	r5, #20992	; 0x5200
     404:	45565245 	ldrbmi	r5, [r6, #-581]	; 0xfffffdbb
     408:	49003644 	stmdbmi	r0, {r2, r6, r9, sl, ip, sp}
     40c:	00524241 	subseq	r4, r2, r1, asr #4
     410:	4f495047 	svcmi	0x00495047
     414:	79544f5f 	ldmdbvc	r4, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, lr}^
     418:	505f6570 	subspl	r6, pc, r0, ror r5	; <UNPREDICTABLE>
     41c:	32490050 	subcc	r0, r9, #80	; 0x50
     420:	455f3143 	ldrbmi	r3, [pc, #-323]	; 2e5 <startup-0x1ffffd1b>
     424:	52495f52 	subpl	r5, r9, #328	; 0x148
     428:	43006e51 	movwmi	r6, #3665	; 0xe51
     42c:	5f324e41 	svcpl	0x00324e41
     430:	5f454353 	svcpl	0x00454353
     434:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     438:	43435200 	movtmi	r5, #12800	; 0x3200
     43c:	45534c5f 	ldrbmi	r4, [r3, #-3167]	; 0xfffff3a1
     440:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
     444:	52006769 	andpl	r6, r0, #27525120	; 0x1a40000
     448:	52455345 	subpl	r5, r5, #335544321	; 0x14000001
     44c:	32444556 	subcc	r4, r4, #360710144	; 0x15800000
     450:	53455200 	movtpl	r5, #20992	; 0x5200
     454:	45565245 	ldrbmi	r5, [r6, #-581]	; 0xfffffdbb
     458:	54003344 	strpl	r3, [r0], #-836	; 0xfffffcbc
     45c:	5f354d49 	svcpl	0x00354d49
     460:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     464:	61735500 	cmnvs	r3, r0, lsl #10
     468:	61466567 	cmpvs	r6, r7, ror #10
     46c:	5f746c75 	svcpl	0x00746c75
     470:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     474:	42435300 	submi	r5, r3, #0, 6
     478:	7079545f 	rsbsvc	r5, r9, pc, asr r4
     47c:	50470065 	subpl	r0, r7, r5, rrx
     480:	75504f49 	ldrbvc	r4, [r0, #-3913]	; 0xfffff0b7
     484:	545f6450 	ldrbpl	r6, [pc], #-1104	; 48c <startup-0x1ffffb74>
     488:	44657079 	strbtmi	r7, [r5], #-121	; 0xffffff87
     48c:	44006665 	strmi	r6, [r0], #-1637	; 0xfffff99b
     490:	00525346 	subseq	r5, r2, r6, asr #6
     494:	31424841 	cmpcc	r2, r1, asr #16
     498:	52545352 	subspl	r5, r4, #1207959553	; 0x48000001
     49c:	43435200 	movtmi	r5, #12800	; 0x3200
     4a0:	4250415f 	subsmi	r4, r0, #-1073741801	; 0xc0000017
     4a4:	72655032 	rsbvc	r5, r5, #50	; 0x32
     4a8:	52687069 	rsbpl	r7, r8, #105	; 0x69
     4ac:	74657365 	strbtvc	r7, [r5], #-869	; 0xfffffc9b
     4b0:	00646d43 	rsbeq	r6, r4, r3, asr #26
     4b4:	75746572 	ldrbvc	r6, [r4, #-1394]!	; 0xfffffa8e
     4b8:	6f436e72 	svcvs	0x00436e72
     4bc:	52006564 	andpl	r6, r0, #100, 10	; 0x19000000
     4c0:	415f4343 	cmpmi	pc, r3, asr #6
     4c4:	50334248 	eorspl	r4, r3, r8, asr #4
     4c8:	70697265 	rsbvc	r7, r9, r5, ror #4
     4cc:	6f6c4368 	svcvs	0x006c4368
     4d0:	504c6b63 	subpl	r6, ip, r3, ror #22
     4d4:	65646f4d 	strbvs	r6, [r4, #-3917]!	; 0xfffff0b3
     4d8:	00646d43 	rsbeq	r6, r4, r3, asr #26
     4dc:	69755f5f 	ldmdbvs	r5!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, ip, lr}^
     4e0:	3631746e 	ldrtcc	r7, [r1], -lr, ror #8
     4e4:	4100745f 	tstmi	r0, pc, asr r4
     4e8:	45324248 	ldrmi	r4, [r2, #-584]!	; 0xfffffdb8
     4ec:	5000524e 	andpl	r5, r0, lr, asr #4
     4f0:	324b4c43 	subcc	r4, fp, #17152	; 0x4300
     4f4:	6572465f 	ldrbvs	r4, [r2, #-1631]!	; 0xfffff9a1
     4f8:	6e657571 	mcrvs	5, 3, r7, cr5, cr1, {3}
     4fc:	47007963 	strmi	r7, [r0, -r3, ror #18]
     500:	5f4f4950 	svcpl	0x004f4950
     504:	5f776f4c 	svcpl	0x00776f4c
     508:	65657053 	strbvs	r7, [r5, #-83]!	; 0xffffffad
     50c:	41430064 	cmpmi	r3, r4, rrx
     510:	525f314e 	subspl	r3, pc, #-2147483629	; 0x80000013
     514:	495f3058 	ldmdbmi	pc, {r3, r4, r6, ip, sp}^	; <UNPREDICTABLE>
     518:	006e5152 	rsbeq	r5, lr, r2, asr r1
     51c:	52534648 	subspl	r4, r3, #72, 12	; 0x4800000
     520:	43435200 	movtmi	r5, #12800	; 0x3200
     524:	5359535f 	cmppl	r9, #2080374785	; 0x7c000001
     528:	004b4c43 	subeq	r4, fp, r3, asr #24
     52c:	4b4c4350 	blmi	1311274 <startup-0x1eceed8c>
     530:	72465f31 	subvc	r5, r6, #49, 30	; 0xc4
     534:	65757165 	ldrbvs	r7, [r5, #-357]!	; 0xfffffe9b
     538:	0079636e 	rsbseq	r6, r9, lr, ror #6
     53c:	4d4c4c50 	stclmi	12, cr4, [ip, #-320]	; 0xfffffec0
     540:	4c4c5000 	marmi	acc0, r5, ip
     544:	4c50004e 	mrrcmi	0, 4, r0, r0, cr14	; <UNPREDICTABLE>
     548:	5000504c 	andpl	r5, r0, ip, asr #32
     54c:	00514c4c 	subseq	r4, r1, ip, asr #24
     550:	5f434352 	svcpl	0x00434352
     554:	4349534c 	movtmi	r5, #37708	; 0x934c
     558:	7000646d 	andvc	r6, r0, sp, ror #8
     55c:	6f736c6c 	svcvs	0x00736c6c
     560:	65637275 	strbvs	r7, [r3, #-629]!	; 0xfffffd8b
     564:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
     568:	52495f34 	subpl	r5, r9, #52, 30	; 0xd0
     56c:	47006e51 	smlsdmi	r0, r1, lr, r6
     570:	4320554e 			; <UNDEFINED> instruction: 0x4320554e
     574:	37203939 			; <UNDEFINED> instruction: 0x37203939
     578:	312e322e 			; <UNDEFINED> instruction: 0x312e322e
     57c:	31303220 	teqcc	r0, r0, lsr #4
     580:	30393037 	eorscc	r3, r9, r7, lsr r0
     584:	72282034 	eorvc	r2, r8, #52	; 0x34
     588:	61656c65 	cmnvs	r5, r5, ror #24
     58c:	20296573 	eorcs	r6, r9, r3, ror r5
     590:	4d52415b 	ldfmie	f4, [r2, #-364]	; 0xfffffe94
     594:	626d652f 	rsbvs	r6, sp, #197132288	; 0xbc00000
     598:	65646465 	strbvs	r6, [r4, #-1125]!	; 0xfffffb9b
     59c:	2d372d64 	ldccs	13, cr2, [r7, #-400]!	; 0xfffffe70
     5a0:	6e617262 	cdpvs	2, 6, cr7, cr1, cr2, {3}
     5a4:	72206863 	eorvc	r6, r0, #6488064	; 0x630000
     5a8:	73697665 	cmnvc	r9, #105906176	; 0x6500000
     5ac:	206e6f69 	rsbcs	r6, lr, r9, ror #30
     5b0:	32353532 	eorscc	r3, r5, #209715200	; 0xc800000
     5b4:	205d3430 	subscs	r3, sp, r0, lsr r4
     5b8:	68746d2d 	ldmdavs	r4!, {r0, r2, r3, r5, r8, sl, fp, sp, lr}^
     5bc:	20626d75 	rsbcs	r6, r2, r5, ror sp
     5c0:	72616d2d 	rsbvc	r6, r1, #2880	; 0xb40
     5c4:	613d6863 	teqvs	sp, r3, ror #16
     5c8:	36766d72 			; <UNDEFINED> instruction: 0x36766d72
     5cc:	2d206d2d 	stccs	13, cr6, [r0, #-180]!	; 0xffffff4c
     5d0:	6f6c666d 	svcvs	0x006c666d
     5d4:	612d7461 			; <UNDEFINED> instruction: 0x612d7461
     5d8:	733d6962 	teqvc	sp, #1605632	; 0x188000
     5dc:	2074666f 	rsbscs	r6, r4, pc, ror #12
     5e0:	68746d2d 	ldmdavs	r4!, {r0, r2, r3, r5, r8, sl, fp, sp, lr}^
     5e4:	20626d75 	rsbcs	r6, r2, r5, ror sp
     5e8:	72616d2d 	rsbvc	r6, r1, #2880	; 0xb40
     5ec:	613d6863 	teqvs	sp, r3, ror #16
     5f0:	36766d72 			; <UNDEFINED> instruction: 0x36766d72
     5f4:	2d206d2d 	stccs	13, cr6, [r0, #-180]!	; 0xffffff4c
     5f8:	4f2d2067 	svcmi	0x002d2067
     5fc:	732d2030 			; <UNDEFINED> instruction: 0x732d2030
     600:	633d6474 	teqvs	sp, #116, 8	; 0x74000000
     604:	52003939 	andpl	r3, r0, #933888	; 0xe4000
     608:	485f4343 	ldmdami	pc, {r0, r1, r6, r8, r9, lr}^	; <UNPREDICTABLE>
     60c:	434b4c43 	movtmi	r4, #48195	; 0xbc43
     610:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
     614:	43520067 	cmpmi	r2, #103	; 0x67
     618:	6c435f43 	mcrrvs	15, 4, r5, r3, cr3
     61c:	46726165 	ldrbtmi	r6, [r2], -r5, ror #2
     620:	0067616c 	rsbeq	r6, r7, ip, ror #2
     624:	5f434352 	svcpl	0x00434352
     628:	43455348 	movtmi	r5, #21320	; 0x5348
     62c:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
     630:	44420067 	strbmi	r0, [r2], #-103	; 0xffffff99
     634:	53005243 	movwpl	r5, #579	; 0x243
     638:	52534348 	subspl	r4, r3, #72, 6	; 0x20000001
     63c:	43435200 	movtmi	r5, #12800	; 0x3200
     640:	45534c5f 	ldrbmi	r4, [r3, #-3167]	; 0xfffff3a1
     644:	49545300 	ldmdbmi	r4, {r8, r9, ip, lr}^
     648:	32490052 	subcc	r0, r9, #82	; 0x52
     64c:	455f3143 	ldrbmi	r3, [pc, #-323]	; 511 <startup-0x1ffffaef>
     650:	52495f56 	subpl	r5, r9, #344	; 0x158
     654:	52006e51 	andpl	r6, r0, #1296	; 0x510
     658:	535f4343 	cmppl	pc, #201326593	; 0xc000001
     65c:	6c424941 	mcrrvs	9, 4, r4, r2, cr1	; <UNPREDICTABLE>
     660:	416b636f 	cmnmi	fp, pc, ror #6
     664:	434b4c43 	movtmi	r4, #48195	; 0xbc43
     668:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
     66c:	74730067 	ldrbtvc	r0, [r3], #-103	; 0xffffff99
     670:	75747261 	ldrbvc	r7, [r4, #-609]!	; 0xfffffd9f
     674:	756f6370 	strbvc	r6, [pc, #-880]!	; 30c <startup-0x1ffffcf4>
     678:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
     67c:	43435200 	movtmi	r5, #12800	; 0x3200
     680:	4c4c505f 	mcrrmi	0, 5, r5, ip, cr15
     684:	43494153 	movtmi	r4, #37203	; 0x9153
     688:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
     68c:	50470067 	subpl	r0, r7, r7, rrx
     690:	505f4f49 	subspl	r4, pc, r9, asr #30
     694:	00736e69 	rsbseq	r6, r3, r9, ror #28
     698:	4f495047 	svcmi	0x00495047
     69c:	646f4d5f 	strbtvs	r4, [pc], #-3423	; 6a4 <startup-0x1ffff95c>
     6a0:	554f5f65 	strbpl	r5, [pc, #-3941]	; fffff743 <GPIO_Pins+0xdfffe26b>
     6a4:	49540054 	ldmdbmi	r4, {r2, r4, r6}^
     6a8:	435f314d 	cmpmi	pc, #1073741843	; 0x40000013
     6ac:	52495f43 	subpl	r5, r9, #268	; 0x10c
     6b0:	48006e51 	stmdami	r0, {r0, r4, r6, r9, sl, fp, sp, lr}
     6b4:	5f485341 	svcpl	0x00485341
     6b8:	5f474e52 	svcpl	0x00474e52
     6bc:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     6c0:	54584500 	ldrbpl	r4, [r8], #-1280	; 0xfffffb00
     6c4:	495f3149 	ldmdbmi	pc, {r0, r3, r6, r8, ip, sp}^	; <UNPREDICTABLE>
     6c8:	006e5152 	rsbeq	r5, lr, r2, asr r1
     6cc:	314e4143 	cmpcc	lr, r3, asr #2
     6d0:	5f58545f 	svcpl	0x0058545f
     6d4:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     6d8:	414d4400 	cmpmi	sp, r0, lsl #8
     6dc:	74535f31 	ldrbvc	r5, [r3], #-3889	; 0xfffff0cf
     6e0:	6d616572 	cfstr64vs	mvdx6, [r1, #-456]!	; 0xfffffe38
     6e4:	52495f35 	subpl	r5, r9, #53, 30	; 0xd4
     6e8:	52006e51 	andpl	r6, r0, #1296	; 0x510
     6ec:	485f4343 	ldmdami	pc, {r0, r1, r6, r8, r9, lr}^	; <UNPREDICTABLE>
     6f0:	52004553 	andpl	r4, r0, #348127232	; 0x14c00000
     6f4:	4d5f4343 	ldclmi	3, cr4, [pc, #-268]	; 5f0 <startup-0x1ffffa10>
     6f8:	43314f43 	teqmi	r1, #268	; 0x10c
     6fc:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
     700:	49540067 	ldmdbmi	r4, {r0, r1, r2, r5, r6}^
     704:	545f384d 	ldrbpl	r3, [pc], #-2125	; 70c <startup-0x1ffff8f4>
     708:	435f4752 	cmpmi	pc, #21495808	; 0x1480000
     70c:	545f4d4f 	ldrbpl	r4, [pc], #-3407	; 714 <startup-0x1ffff8ec>
     710:	34314d49 	ldrtcc	r4, [r1], #-3401	; 0xfffff2b7
     714:	5152495f 	cmppl	r2, pc, asr r9
     718:	4d44006e 	stclmi	0, cr0, [r4, #-440]	; 0xfffffe48
     71c:	535f3241 	cmppl	pc, #268435460	; 0x10000004
     720:	61657274 	smcvs	22308	; 0x5724
     724:	495f376d 	ldmdbmi	pc, {r0, r2, r3, r5, r6, r8, r9, sl, ip, sp}^	; <UNPREDICTABLE>
     728:	006e5152 	rsbeq	r5, lr, r2, asr r1
     72c:	5f47544f 	svcpl	0x0047544f
     730:	495f5346 	ldmdbmi	pc, {r1, r2, r6, r8, r9, ip, lr}^	; <UNPREDICTABLE>
     734:	006e5152 	rsbeq	r5, lr, r2, asr r1
     738:	4d6e6f4e 	stclmi	15, cr6, [lr, #-312]!	; 0xfffffec8
     73c:	616b7361 	cmnvs	fp, r1, ror #6
     740:	49656c62 	stmdbmi	r5!, {r1, r5, r6, sl, fp, sp, lr}^
     744:	495f746e 	ldmdbmi	pc, {r1, r2, r3, r5, r6, sl, ip, sp, lr}^	; <UNPREDICTABLE>
     748:	006e5152 	rsbeq	r5, lr, r2, asr r1
     74c:	47445757 	smlsldmi	r5, r4, r7, r7
     750:	5152495f 	cmppl	r2, pc, asr r9
     754:	544f006e 	strbpl	r0, [pc], #-110	; 75c <startup-0x1ffff8a4>
     758:	53485f47 	movtpl	r5, #36679	; 0x8f47
     75c:	554b575f 	strbpl	r5, [fp, #-1887]	; 0xfffff8a1
     760:	52495f50 	subpl	r5, r9, #80, 30	; 0x140
     764:	52006e51 	andpl	r6, r0, #1296	; 0x510
     768:	415f4343 	cmpmi	pc, r3, asr #6
     76c:	50324250 	eorspl	r4, r2, r0, asr r2
     770:	70697265 	rsbvc	r7, r9, r5, ror #4
     774:	6f6c4368 	svcvs	0x006c4368
     778:	6d436b63 	vstrvs	d22, [r3, #-396]	; 0xfffffe74
     77c:	43520064 	cmpmi	r2, #100	; 0x64
     780:	4c505f43 	mrrcmi	15, 4, r5, r0, cr3
     784:	4941534c 	stmdbmi	r1, {r2, r3, r6, r8, r9, ip, lr}^
     788:	51766944 	cmnpl	r6, r4, asr #18
     78c:	43435200 	movtmi	r5, #12800	; 0x3200
     790:	4c4c505f 	mcrrmi	0, 5, r5, ip, cr15
     794:	44494153 	strbmi	r4, [r9], #-339	; 0xfffffead
     798:	00527669 	subseq	r7, r2, r9, ror #12
     79c:	5f434352 	svcpl	0x00434352
     7a0:	42494153 	submi	r4, r9, #-1073741804	; 0xc0000014
     7a4:	6b636f6c 	blvs	18dc55c <startup-0x1e723aa4>
     7a8:	4b4c4342 	blmi	13114b8 <startup-0x1eceeb48>
     7ac:	72756f53 	rsbsvc	r6, r5, #332	; 0x14c
     7b0:	4d006563 	cfstr32mi	mvfx6, [r0, #-396]	; 0xfffffe74
     7b4:	726f6d65 	rsbvc	r6, pc, #6464	; 0x1940
     7b8:	6e614d79 	mcrvs	13, 3, r4, cr1, cr9, {3}
     7bc:	6d656761 	stclvs	7, cr6, [r5, #-388]!	; 0xfffffe7c
     7c0:	5f746e65 	svcpl	0x00746e65
     7c4:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     7c8:	73795300 	cmnvc	r9, #0, 6
     7cc:	436d6574 	cmnmi	sp, #116, 10	; 0x1d000000
     7d0:	4365726f 	cmnmi	r5, #-268435450	; 0xf0000006
     7d4:	6b636f6c 	blvs	18dc58c <startup-0x1e723a74>
     7d8:	4d415400 	cfstrdmi	mvd5, [r1, #-0]
     7dc:	54535f50 	ldrbpl	r5, [r3], #-3920	; 0xfffff0b0
     7e0:	5f504d41 	svcpl	0x00504d41
     7e4:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     7e8:	4e414300 	cdpmi	3, 4, cr4, cr1, cr0, {0}
     7ec:	43535f31 	cmpmi	r3, #49, 30	; 0xc4
     7f0:	52495f45 	subpl	r5, r9, #276	; 0x114
     7f4:	49006e51 	stmdbmi	r0, {r0, r4, r6, r9, sl, fp, sp, lr}
     7f8:	5f6e5152 	svcpl	0x006e5152
     7fc:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0xfffff6ac
     800:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
     804:	6f4d5f4f 	svcvs	0x004d5f4f
     808:	495f6564 	ldmdbmi	pc, {r2, r5, r6, r8, sl, sp, lr}^	; <UNPREDICTABLE>
     80c:	4d44004e 	stclmi	0, cr0, [r4, #-312]	; 0xfffffec8
     810:	535f3241 	cmppl	pc, #268435460	; 0x10000004
     814:	61657274 	smcvs	22308	; 0x5724
     818:	495f306d 	ldmdbmi	pc, {r0, r2, r3, r5, r6, ip, sp}^	; <UNPREDICTABLE>
     81c:	006e5152 	rsbeq	r5, lr, r2, asr r1
     820:	5f434352 	svcpl	0x00434352
     824:	324f434d 	subcc	r4, pc, #872415233	; 0x34000001
     828:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
     82c:	4c006769 	stcmi	7, cr6, [r0], {105}	; 0x69
     830:	00524b43 	subseq	r4, r2, r3, asr #22
     834:	5f434352 	svcpl	0x00434352
     838:	43533249 	cmpmi	r3, #-1879048188	; 0x90000004
     83c:	6f534b4c 	svcvs	0x00534b4c
     840:	65637275 	strbvs	r7, [r3, #-629]!	; 0xfffffd8b
     844:	52524500 	subspl	r4, r2, #0, 10
     848:	4900524f 	stmdbmi	r0, {r0, r1, r2, r3, r6, r9, ip, lr}
     84c:	5f324332 	svcpl	0x00324332
     850:	495f5245 	ldmdbmi	pc, {r0, r2, r6, r9, ip, lr}^	; <UNPREDICTABLE>
     854:	006e5152 	rsbeq	r5, lr, r2, asr r1
     858:	6954736d 	ldmdbvs	r4, {r0, r2, r3, r5, r6, r8, r9, ip, sp, lr}^
     85c:	00736b63 	rsbseq	r6, r3, r3, ror #22
     860:	5f434352 	svcpl	0x00434352
     864:	4b4c4350 	blmi	13115ac <startup-0x1eceea54>
     868:	6e6f4331 	mcrvs	3, 3, r4, cr15, cr1, {1}
     86c:	00676966 	rsbeq	r6, r7, r6, ror #18
     870:	4550534f 	ldrbmi	r5, [r0, #-847]	; 0xfffffcb1
     874:	00524445 	subseq	r4, r2, r5, asr #8
     878:	46737542 	ldrbtmi	r7, [r3], -r2, asr #10
     87c:	746c7561 	strbtvc	r7, [ip], #-1377	; 0xfffffa9f
     880:	5152495f 	cmppl	r2, pc, asr r9
     884:	6974006e 	ldmdbvs	r4!, {r1, r2, r3, r5, r6}^
     888:	00736b63 	rsbseq	r6, r3, r3, ror #22
     88c:	434c4c50 	movtmi	r4, #52304	; 0xcc50
     890:	00524746 	subseq	r4, r2, r6, asr #14
     894:	54524155 	ldrbpl	r4, [r2], #-341	; 0xfffffeab
     898:	52495f35 	subpl	r5, r9, #53, 30	; 0xd4
     89c:	54006e51 	strpl	r6, [r0], #-3665	; 0xfffff1af
     8a0:	5f314d49 	svcpl	0x00314d49
     8a4:	5f4b5242 	svcpl	0x004b5242
     8a8:	394d4954 	stmdbcc	sp, {r2, r4, r6, r8, fp, lr}^
     8ac:	5152495f 	cmppl	r2, pc, asr r9
     8b0:	5047006e 	subpl	r0, r7, lr, rrx
     8b4:	4f5f4f49 	svcmi	0x005f4f49
     8b8:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0xfffff6ac
     8bc:	755f5f00 	ldrbvc	r5, [pc, #-3840]	; fffff9c4 <GPIO_Pins+0xdfffe4ec>
     8c0:	33746e69 	cmncc	r4, #1680	; 0x690
     8c4:	00745f32 	rsbseq	r5, r4, r2, lsr pc
     8c8:	41425041 	cmpmi	r2, r1, asr #32
     8cc:	72504248 	subsvc	r4, r0, #72, 4	; 0x80000004
     8d0:	54637365 	strbtpl	r7, [r3], #-869	; 0xfffffc9b
     8d4:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
     8d8:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
     8dc:	654d5f4f 	strbvs	r5, [sp, #-3919]	; 0xfffff0b1
     8e0:	6d756964 			; <UNDEFINED> instruction: 0x6d756964
     8e4:	6570535f 	ldrbvs	r5, [r0, #-863]!	; 0xfffffca1
     8e8:	52006465 	andpl	r6, r0, #1694498816	; 0x65000000
     8ec:	535f4343 	cmppl	pc, #201326593	; 0xc000001
     8f0:	4c504941 	mrrcmi	9, 4, r4, r0, cr1	; <UNPREDICTABLE>
     8f4:	5332494c 	teqpl	r2, #76, 18	; 0x130000
     8f8:	446b6c43 	strbtmi	r6, [fp], #-3139	; 0xfffff3bd
     8fc:	6f437669 	svcvs	0x00437669
     900:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
     904:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
     908:	52495f37 	subpl	r5, r9, #55, 30	; 0xdc
     90c:	6c006e51 	stcvs	14, cr6, [r0], {81}	; 0x51
     910:	20676e6f 	rsbcs	r6, r7, pc, ror #28
     914:	676e6f6c 	strbvs	r6, [lr, -ip, ror #30]!
     918:	746e6920 	strbtvc	r6, [lr], #-2336	; 0xfffff6e0
     91c:	48544500 	ldmdami	r4, {r8, sl, lr}^
     920:	554b575f 	strbpl	r5, [fp, #-1887]	; 0xfffff8a1
     924:	52495f50 	subpl	r5, r9, #80, 30	; 0x140
     928:	4f006e51 	svcmi	0x00006e51
     92c:	485f4754 	ldmdami	pc, {r2, r4, r6, r8, r9, sl, lr}^	; <UNPREDICTABLE>
     930:	52495f53 	subpl	r5, r9, #332	; 0x14c
     934:	50006e51 	andpl	r6, r0, r1, asr lr
     938:	52445055 	subpl	r5, r4, #85	; 0x55
     93c:	43535300 	cmpmi	r3, #0, 6
     940:	53005247 	movwpl	r5, #583	; 0x247
     944:	5f314950 	svcpl	0x00314950
     948:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     94c:	53494400 	movtpl	r4, #37888	; 0x9400
     950:	454c4241 	strbmi	r4, [ip, #-577]	; 0xfffffdbf
     954:	43565300 	cmpmi	r6, #0, 6
     958:	5f6c6c61 	svcpl	0x006c6c61
     95c:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     960:	42504100 	subsmi	r4, r0, #0, 2
     964:	54535232 	ldrbpl	r5, [r3], #-562	; 0xfffffdce
     968:	53420052 	movtpl	r0, #8274	; 0x2052
     96c:	00485252 	subeq	r5, r8, r2, asr r2
     970:	5f434352 	svcpl	0x00434352
     974:	46746547 	ldrbtmi	r6, [r4], -r7, asr #10
     978:	5367616c 	cmnpl	r7, #108, 2
     97c:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0xfffffe8c
     980:	43520073 	cmpmi	r2, #115	; 0x73
     984:	6c435f43 	mcrrvs	15, 4, r5, r3, cr3
     988:	736b636f 	cmnvc	fp, #-1140850687	; 0xbc000001
     98c:	52534200 	subspl	r4, r3, #0, 4
     990:	47004c52 	smlsdmi	r0, r2, ip, r4
     994:	5f4f4950 	svcpl	0x004f4950
     998:	68676948 	stmdavs	r7!, {r3, r6, r8, fp, sp, lr}^
     99c:	6570535f 	ldrbvs	r5, [r0, #-863]!	; 0xfffffca1
     9a0:	52006465 	andpl	r6, r0, #1694498816	; 0x65000000
     9a4:	495f4343 	ldmdbmi	pc, {r0, r1, r6, r8, r9, lr}^	; <UNPREDICTABLE>
     9a8:	6e6f4354 	mcrvs	3, 3, r4, cr15, cr4, {2}
     9ac:	00676966 	rsbeq	r6, r7, r6, ror #18
     9b0:	5f434352 	svcpl	0x00434352
     9b4:	43495348 	movtmi	r5, #37704	; 0x9348
     9b8:	4600646d 	strmi	r6, [r0], -sp, ror #8
     9bc:	495f5550 	ldmdbmi	pc, {r4, r6, r8, sl, ip, lr}^	; <UNPREDICTABLE>
     9c0:	006e5152 	rsbeq	r5, lr, r2, asr r1
     9c4:	5f434352 	svcpl	0x00434352
     9c8:	756a6441 	strbvc	r6, [sl, #-1089]!	; 0xfffffbbf
     9cc:	53487473 	movtpl	r7, #33907	; 0x8473
     9d0:	6c614349 	stclvs	3, cr4, [r1], #-292	; 0xfffffedc
     9d4:	61726269 	cmnvs	r2, r9, ror #4
     9d8:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
     9dc:	756c6156 	strbvc	r6, [ip, #-342]!	; 0xfffffeaa
     9e0:	41550065 	cmpmi	r5, r5, rrx
     9e4:	5f345452 	svcpl	0x00345452
     9e8:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     9ec:	42504100 	subsmi	r4, r0, #0, 2
     9f0:	45504c32 	ldrbmi	r4, [r0, #-3122]	; 0xfffff3ce
     9f4:	5200524e 	andpl	r5, r0, #-536870908	; 0xe0000004
     9f8:	415f4343 	cmpmi	pc, r3, asr #6
     9fc:	50314250 	eorspl	r4, r1, r0, asr r2
     a00:	70697265 	rsbvc	r7, r9, r5, ror #4
     a04:	43520068 	cmpmi	r2, #104	; 0x68
     a08:	54525f43 	ldrbpl	r5, [r2], #-3907	; 0xfffff0bd
     a0c:	4b4c4343 	blmi	1311720 <startup-0x1ecee8e0>
     a10:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
     a14:	4f006769 	svcmi	0x00006769
     a18:	465f4754 			; <UNDEFINED> instruction: 0x465f4754
     a1c:	4b575f53 	blmi	15d8770 <startup-0x1ea27890>
     a20:	495f5055 	ldmdbmi	pc, {r0, r2, r4, r6, ip, lr}^	; <UNPREDICTABLE>
     a24:	006e5152 	rsbeq	r5, lr, r2, asr r1
     a28:	5f434352 	svcpl	0x00434352
     a2c:	47414c46 	strbmi	r4, [r1, -r6, asr #24]
     a30:	43435200 	movtmi	r5, #12800	; 0x3200
     a34:	7465475f 	strbtvc	r4, [r5], #-1887	; 0xfffff8a1
     a38:	74535449 	ldrbvc	r5, [r3], #-1097	; 0xfffffbb7
     a3c:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
     a40:	54584500 	ldrbpl	r4, [r8], #-1280	; 0xfffffb00
     a44:	495f3449 	ldmdbmi	pc, {r0, r3, r6, sl, ip, sp}^	; <UNPREDICTABLE>
     a48:	006e5152 	rsbeq	r5, lr, r2, asr r1
     a4c:	4c525443 	cfldrdmi	mvd5, [r2], {67}	; 0x43
     a50:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
     a54:	41445f36 	cmpmi	r4, r6, lsr pc
     a58:	52495f43 	subpl	r5, r9, #268	; 0x10c
     a5c:	4e006e51 	mcrmi	14, 0, r6, cr0, cr1, {2}
     a60:	74537765 	ldrbvc	r7, [r3], #-1893	; 0xfffff89b
     a64:	00657461 	rsbeq	r7, r5, r1, ror #8
     a68:	4f495047 	svcmi	0x00495047
     a6c:	6570535f 	ldrbvs	r5, [r0, #-863]!	; 0xfffffca1
     a70:	49006465 	stmdbmi	r0, {r0, r2, r5, r6, sl, sp, lr}
     a74:	5f324332 	svcpl	0x00324332
     a78:	495f5645 	ldmdbmi	pc, {r0, r2, r6, r9, sl, ip, lr}^	; <UNPREDICTABLE>
     a7c:	006e5152 	rsbeq	r5, lr, r2, asr r1
     a80:	5f434352 	svcpl	0x00434352
     a84:	61656c43 	cmnvs	r5, r3, asr #24
     a88:	50544972 	subspl	r4, r4, r2, ror r9
     a8c:	69646e65 	stmdbvs	r4!, {r0, r2, r5, r6, r9, sl, fp, sp, lr}^
     a90:	6942676e 	stmdbvs	r2, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}^
     a94:	43520074 	cmpmi	r2, #116	; 0x74
     a98:	6c435f43 	mcrrvs	15, 4, r5, r3, cr3
     a9c:	536b636f 	cmnpl	fp, #-1140850687	; 0xbc000001
     aa0:	72756365 	rsbsvc	r6, r5, #-1811939327	; 0x94000001
     aa4:	53797469 	cmnpl	r9, #1761607680	; 0x69000000
     aa8:	65747379 	ldrbvs	r7, [r4, #-889]!	; 0xfffffc87
     aac:	646d436d 	strbtvs	r4, [sp], #-877	; 0xfffffc93
     ab0:	43435200 	movtmi	r5, #12800	; 0x3200
     ab4:	4941535f 	stmdbmi	r1, {r0, r1, r2, r3, r4, r6, r8, r9, ip, lr}^
     ab8:	636f6c42 	cmnvs	pc, #16896	; 0x4200
     abc:	4c43416b 	stfmie	f4, [r3], {107}	; 0x6b
     ac0:	756f534b 	strbvc	r5, [pc, #-843]!	; 77d <startup-0x1ffff883>
     ac4:	00656372 	rsbeq	r6, r5, r2, ror r3
     ac8:	74617473 	strbtvc	r7, [r1], #-1139	; 0xfffffb8d
     acc:	65727375 	ldrbvs	r7, [r2, #-885]!	; 0xfffffc8b
     ad0:	43520067 	cmpmi	r2, #103	; 0x67
     ad4:	50415f43 	subpl	r5, r1, r3, asr #30
     ad8:	65503242 	ldrbvs	r3, [r0, #-578]	; 0xfffffdbe
     adc:	68706972 	ldmdavs	r0!, {r1, r4, r5, r6, r8, fp, sp, lr}^
     ae0:	41464200 	mrsmi	r4, (UNDEF: 102)
     ae4:	50410052 	subpl	r0, r1, r2, asr r0
     ae8:	504c3142 	subpl	r3, ip, r2, asr #2
     aec:	00524e45 	subseq	r4, r2, r5, asr #28
     af0:	31414d44 	cmpcc	r1, r4, asr #26
     af4:	7274535f 	rsbsvc	r5, r4, #2080374785	; 0x7c000001
     af8:	316d6165 	cmncc	sp, r5, ror #2
     afc:	5152495f 	cmppl	r2, pc, asr r9
     b00:	4d44006e 	stclmi	0, cr0, [r4, #-440]	; 0xfffffe48
     b04:	535f3241 	cmppl	pc, #268435460	; 0x10000004
     b08:	61657274 	smcvs	22308	; 0x5724
     b0c:	495f336d 	ldmdbmi	pc, {r0, r2, r3, r5, r6, r8, r9, ip, sp}^	; <UNPREDICTABLE>
     b10:	006e5152 	rsbeq	r5, lr, r2, asr r1
     b14:	41474b43 	cmpmi	r7, r3, asr #22
     b18:	524e4554 	subpl	r4, lr, #84, 10	; 0x15000000
     b1c:	4e414300 	cdpmi	3, 4, cr4, cr1, cr0, {0}
     b20:	58545f32 	ldmdapl	r4, {r1, r4, r5, r8, r9, sl, fp, ip, lr}^
     b24:	5152495f 	cmppl	r2, pc, asr r9
     b28:	4c50006e 	mrrcmi	0, 6, r0, r0, cr14	; <UNPREDICTABLE>
     b2c:	4941534c 	stmdbmi	r1, {r2, r3, r6, r8, r9, ip, lr}^
     b30:	4c50004e 	mrrcmi	0, 4, r0, r0, cr14	; <UNPREDICTABLE>
     b34:	4941534c 	stmdbmi	r1, {r2, r3, r6, r8, r9, ip, lr}^
     b38:	4c500051 	mrrcmi	0, 5, r0, r0, cr1	; <UNPREDICTABLE>
     b3c:	4941534c 	stmdbmi	r1, {r2, r3, r6, r8, r9, ip, lr}^
     b40:	43520052 	cmpmi	r2, #82	; 0x52
     b44:	434d5f43 	movtmi	r5, #57155	; 0xdf43
     b48:	6f53314f 	svcvs	0x0053314f
     b4c:	65637275 	strbvs	r7, [r3, #-629]!	; 0xfffffd8b
     b50:	43435200 	movtmi	r5, #12800	; 0x3200
     b54:	4248415f 	submi	r4, r8, #-1073741801	; 0xc0000017
     b58:	72655033 	rsbvc	r5, r5, #51	; 0x33
     b5c:	43687069 	cmnmi	r8, #105	; 0x69
     b60:	6b636f6c 	blvs	18dc918 <startup-0x1e7236e8>
     b64:	00646d43 	rsbeq	r6, r4, r3, asr #26
     b68:	54737953 	ldrbtpl	r7, [r3], #-2387	; 0xfffff6ad
     b6c:	5f6b6369 	svcpl	0x006b6369
     b70:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0xfffff6ac
     b74:	43435200 	movtmi	r5, #12800	; 0x3200
     b78:	4c4c505f 	mcrrmi	0, 5, r5, ip, cr15
     b7c:	00646d43 	rsbeq	r6, r4, r3, asr #26
     b80:	5f434352 	svcpl	0x00434352
     b84:	6b636142 	blvs	18d9094 <startup-0x1e726f6c>
     b88:	65527075 	ldrbvs	r7, [r2, #-117]	; 0xffffff8b
     b8c:	43746573 	cmnmi	r4, #482344960	; 0x1cc00000
     b90:	4100646d 	tstmi	r0, sp, ror #8
     b94:	52334248 	eorspl	r4, r3, #72, 4	; 0x80000004
     b98:	00525453 	subseq	r5, r2, r3, asr r4
     b9c:	6f727245 	svcvs	0x00727245
     ba0:	61745372 	cmnvs	r4, r2, ror r3
     ba4:	00737574 	rsbseq	r7, r3, r4, ror r5
     ba8:	31414d44 	cmpcc	r1, r4, asr #26
     bac:	7274535f 	rsbsvc	r5, r4, #2080374785	; 0x7c000001
     bb0:	306d6165 	rsbcc	r6, sp, r5, ror #2
     bb4:	5152495f 	cmppl	r2, pc, asr r9
     bb8:	7473006e 	ldrbtvc	r0, [r3], #-110	; 0xffffff92
     bbc:	75747261 	ldrbvc	r7, [r4, #-609]!	; 0xfffffd9f
     bc0:	43520070 	cmpmi	r2, #112	; 0x70
     bc4:	434d5f43 	movtmi	r5, #57155	; 0xdf43
     bc8:	6f53324f 	svcvs	0x0053324f
     bcc:	65637275 	strbvs	r7, [r3, #-629]!	; 0xfffffd8b
     bd0:	42504100 	subsmi	r4, r0, #0, 2
     bd4:	54535231 	ldrbpl	r5, [r3], #-561	; 0xfffffdcf
     bd8:	54520052 	ldrbpl	r0, [r2], #-82	; 0xffffffae
     bdc:	6c415f43 	mcrrvs	15, 4, r5, r1, cr3
     be0:	5f6d7261 	svcpl	0x006d7261
     be4:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     be8:	42504100 	subsmi	r4, r0, #0, 2
     bec:	524e4531 	subpl	r4, lr, #205520896	; 0xc400000
     bf0:	49564e00 	ldmdbmi	r6, {r9, sl, fp, lr}^
     bf4:	79545f43 	ldmdbvc	r4, {r0, r1, r6, r8, r9, sl, fp, ip, lr}^
     bf8:	46006570 			; <UNDEFINED> instruction: 0x46006570
     bfc:	74636e75 	strbtvc	r6, [r3], #-3701	; 0xfffff18b
     c00:	616e6f69 	cmnvs	lr, r9, ror #30
     c04:	6174536c 	cmnvs	r4, ip, ror #6
     c08:	49006574 	stmdbmi	r0, {r2, r4, r5, r6, r8, sl, sp, lr}
     c0c:	5f334332 	svcpl	0x00334332
     c10:	495f5245 	ldmdbmi	pc, {r0, r2, r6, r9, ip, lr}^	; <UNPREDICTABLE>
     c14:	006e5152 	rsbeq	r5, lr, r2, asr r1
     c18:	50595243 	subspl	r5, r9, r3, asr #4
     c1c:	5152495f 	cmppl	r2, pc, asr r9
     c20:	5845006e 	stmdapl	r5, {r1, r2, r3, r5, r6}^
     c24:	35314954 	ldrcc	r4, [r1, #-2388]!	; 0xfffff6ac
     c28:	5f30315f 	svcpl	0x0030315f
     c2c:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     c30:	6e6f6c00 	cdpvs	12, 6, cr6, cr15, cr0, {0}
     c34:	6f6c2067 	svcvs	0x006c2067
     c38:	7520676e 	strvc	r6, [r0, #-1902]!	; 0xfffff892
     c3c:	6769736e 	strbvs	r7, [r9, -lr, ror #6]!
     c40:	2064656e 	rsbcs	r6, r4, lr, ror #10
     c44:	00746e69 	rsbseq	r6, r4, r9, ror #28
     c48:	5f434352 	svcpl	0x00434352
     c4c:	314f434d 	cmpcc	pc, sp, asr #6
     c50:	00766944 	rsbseq	r6, r6, r4, asr #18
     c54:	334d4954 	movtcc	r4, #55636	; 0xd954
     c58:	5152495f 	cmppl	r2, pc, asr r9
     c5c:	5355006e 	cmppl	r5, #110	; 0x6e
     c60:	31545241 	cmpcc	r4, r1, asr #4
     c64:	5152495f 	cmppl	r2, pc, asr r9
     c68:	4352006e 	cmpmi	r2, #110	; 0x6e
     c6c:	61575f43 	cmpvs	r7, r3, asr #30
     c70:	6f467469 	svcvs	0x00467469
     c74:	45534872 	ldrbmi	r4, [r3, #-2162]	; 0xfffff78e
     c78:	72617453 	rsbvc	r7, r1, #1392508928	; 0x53000000
     c7c:	00705574 	rsbseq	r5, r0, r4, ror r5
     c80:	43435553 	movtmi	r5, #13651	; 0x3553
     c84:	00535345 	subseq	r5, r3, r5, asr #6
     c88:	4f495047 	svcmi	0x00495047
     c8c:	646f4d5f 	strbtvs	r4, [pc], #-3423	; c94 <startup-0x1ffff36c>
     c90:	41430065 	cmpmi	r3, r5, rrx
     c94:	525f324e 	subspl	r3, pc, #-536870908	; 0xe0000004
     c98:	495f3158 	ldmdbmi	pc, {r3, r4, r6, r8, ip, sp}^	; <UNPREDICTABLE>
     c9c:	006e5152 	rsbeq	r5, lr, r2, asr r1
     ca0:	5f434441 	svcpl	0x00434441
     ca4:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     ca8:	43435200 	movtmi	r5, #12800	; 0x3200
     cac:	45534c5f 	ldrbmi	r4, [r3, #-3167]	; 0xfffff3a1
     cb0:	65646f4d 	strbvs	r6, [r4, #-3917]!	; 0xfffff0b3
     cb4:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
     cb8:	49006769 	stmdbmi	r0, {r0, r3, r5, r6, r8, r9, sl, sp, lr}
     cbc:	00524543 	subseq	r4, r2, r3, asr #10
     cc0:	33424841 	movtcc	r4, #10305	; 0x2841
     cc4:	4e45504c 	cdpmi	0, 4, cr5, cr5, cr12, {2}
     cc8:	50470052 	subpl	r0, r7, r2, asr r0
     ccc:	6f4d4f49 	svcvs	0x004d4f49
     cd0:	545f6564 	ldrbpl	r6, [pc], #-1380	; cd8 <startup-0x1ffff328>
     cd4:	44657079 	strbtmi	r7, [r5], #-121	; 0xffffff87
     cd8:	53006665 	movwpl	r6, #1637	; 0x665
     cdc:	69547379 	ldmdbvs	r4, {r0, r3, r4, r5, r6, r8, r9, ip, sp, lr}^
     ce0:	435f6b63 	cmpmi	pc, #101376	; 0x18c00
     ce4:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
     ce8:	56500067 	ldrbpl	r0, [r0], -r7, rrx
     cec:	52495f44 	subpl	r5, r9, #68, 30	; 0x110
     cf0:	41006e51 	tstmi	r0, r1, asr lr
     cf4:	00525346 	subseq	r5, r2, r6, asr #6
     cf8:	5059544f 	subspl	r5, r9, pc, asr #8
     cfc:	43005245 	movwmi	r5, #581	; 0x245
     d00:	42494c41 	submi	r4, r9, #16640	; 0x4100
     d04:	706d7400 	rsbvc	r7, sp, r0, lsl #8
     d08:	00676572 	rsbeq	r6, r7, r2, ror r5
     d0c:	434d5346 	movtmi	r5, #54086	; 0xd346
     d10:	5152495f 	cmppl	r2, pc, asr r9
     d14:	5845006e 	stmdapl	r5, {r1, r2, r3, r5, r6}^
     d18:	5f304954 	svcpl	0x00304954
     d1c:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     d20:	4b434400 	blmi	10d1d28 <startup-0x1ef2e2d8>
     d24:	52474643 	subpl	r4, r7, #70254592	; 0x4300000
     d28:	46430032 			; <UNDEFINED> instruction: 0x46430032
     d2c:	52005253 	andpl	r5, r0, #805306373	; 0x30000005
     d30:	415f4343 	cmpmi	pc, r3, asr #6
     d34:	50314248 	eorspl	r4, r1, r8, asr #4
     d38:	70697265 	rsbvc	r7, r9, r5, ror #4
     d3c:	73680068 	cmnvc	r8, #104	; 0x68
     d40:	61747365 	cmnvs	r4, r5, ror #6
     d44:	00737574 	rsbseq	r7, r3, r4, ror r5
     d48:	31414d44 	cmpcc	r1, r4, asr #26
     d4c:	7274535f 	rsbsvc	r5, r4, #2080374785	; 0x7c000001
     d50:	346d6165 	strbtcc	r6, [sp], #-357	; 0xfffffe9b
     d54:	5152495f 	cmppl	r2, pc, asr r9
     d58:	4d44006e 	stclmi	0, cr0, [r4, #-440]	; 0xfffffe48
     d5c:	535f3241 	cmppl	pc, #268435460	; 0x10000004
     d60:	61657274 	smcvs	22308	; 0x5724
     d64:	495f366d 	ldmdbmi	pc, {r0, r2, r3, r5, r6, r9, sl, ip, sp}^	; <UNPREDICTABLE>
     d68:	006e5152 	rsbeq	r5, lr, r2, asr r1
     d6c:	31424841 	cmpcc	r2, r1, asr #16
     d70:	00524e45 	subseq	r4, r2, r5, asr #28
     d74:	44414f4c 	strbmi	r4, [r1], #-3916	; 0xfffff0b4
     d78:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
     d7c:	6570534f 	ldrbvs	r5, [r0, #-847]!	; 0xfffffcb1
     d80:	545f6465 	ldrbpl	r6, [pc], #-1125	; d88 <startup-0x1ffff278>
     d84:	44657079 	strbtmi	r7, [r5], #-121	; 0xffffff87
     d88:	44006665 	strmi	r6, [r0], #-1637	; 0xfffff99b
     d8c:	67756265 	ldrbvs	r6, [r5, -r5, ror #4]!
     d90:	696e6f4d 	stmdbvs	lr!, {r0, r2, r3, r6, r8, r9, sl, fp, sp, lr}^
     d94:	5f726f74 	svcpl	0x00726f74
     d98:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     d9c:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
     da0:	69505f4f 	ldmdbvs	r0, {r0, r1, r2, r3, r6, r8, r9, sl, fp, ip, lr}^
     da4:	4352006e 	cmpmi	r2, #110	; 0x6e
     da8:	48415f43 	stmdami	r1, {r0, r1, r6, r8, r9, sl, fp, ip, lr}^
     dac:	65503142 	ldrbvs	r3, [r0, #-322]	; 0xfffffebe
     db0:	68706972 	ldmdavs	r0!, {r1, r4, r5, r6, r8, fp, sp, lr}^
     db4:	65736552 	ldrbvs	r6, [r3, #-1362]!	; 0xfffffaae
     db8:	646d4374 	strbtvs	r4, [sp], #-884	; 0xfffffc8c
     dbc:	43324900 	teqmi	r2, #0, 18
     dc0:	56455f33 			; <UNDEFINED> instruction: 0x56455f33
     dc4:	5152495f 	cmppl	r2, pc, asr r9
     dc8:	5047006e 	subpl	r0, r7, lr, rrx
     dcc:	505f4f49 	subspl	r4, pc, r9, asr #30
     dd0:	00645075 	rsbeq	r5, r4, r5, ror r0
     dd4:	32424841 	subcc	r4, r2, #4259840	; 0x410000
     dd8:	52545352 	subspl	r5, r4, #1207959553	; 0x48000001
     ddc:	48544500 	ldmdami	r4, {r8, sl, lr}^
     de0:	5152495f 	cmppl	r2, pc, asr r9
     de4:	4352006e 	cmpmi	r2, #110	; 0x6e
     de8:	6c435f43 	mcrrvs	15, 4, r5, r3, cr3
     dec:	736b636f 	cmnvc	fp, #-1140850687	; 0xbc000001
     df0:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0xfffff6ac
     df4:	00666544 	rsbeq	r6, r6, r4, asr #10
     df8:	52464d4d 	subpl	r4, r6, #4928	; 0x1340
     dfc:	43435200 	movtmi	r5, #12800	; 0x3200
     e00:	7079545f 	rsbsvc	r5, r9, pc, asr r4
     e04:	66654465 	strbtvs	r4, [r5], -r5, ror #8
     e08:	464d4d00 	strbmi	r4, [sp], -r0, lsl #26
     e0c:	73005241 	movwvc	r5, #577	; 0x241
     e10:	74726f68 	ldrbtvc	r6, [r2], #-3944	; 0xfffff098
     e14:	746e6920 	strbtvc	r6, [lr], #-2336	; 0xfffff6e0
     e18:	43435200 	movtmi	r5, #12800	; 0x3200
     e1c:	5152495f 	cmppl	r2, pc, asr r9
     e20:	7270006e 	rsbsvc	r0, r0, #110	; 0x6e
     e24:	69726f69 	ldmdbvs	r2!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
     e28:	52007974 	andpl	r7, r0, #116, 18	; 0x1d0000
     e2c:	495f4343 	ldmdbmi	pc, {r0, r1, r6, r8, r9, lr}^	; <UNPREDICTABLE>
     e30:	53490054 	movtpl	r0, #36948	; 0x9054
     e34:	44005241 	strmi	r5, [r0], #-577	; 0xfffffdbf
     e38:	5f31414d 	svcpl	0x0031414d
     e3c:	65727453 	ldrbvs	r7, [r2, #-1107]!	; 0xfffffbad
     e40:	5f336d61 	svcpl	0x00336d61
     e44:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     e48:	41535500 	cmpmi	r3, r0, lsl #10
     e4c:	5f325452 	svcpl	0x00325452
     e50:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     e54:	74696200 	strbtvc	r6, [r9], #-512	; 0xfffffe00
     e58:	74617473 	strbtvc	r7, [r1], #-1139	; 0xfffffb8d
     e5c:	45007375 	strmi	r7, [r0, #-885]	; 0xfffffc8b
     e60:	4c42414e 	stfmie	f4, [r2], {78}	; 0x4e
     e64:	6c700045 	ldclvs	0, cr0, [r0], #-276	; 0xfffffeec
     e68:	6f63766c 	svcvs	0x0063766c
     e6c:	43435200 	movtmi	r5, #12800	; 0x3200
     e70:	4250415f 	subsmi	r4, r0, #-1073741801	; 0xc0000017
     e74:	72655031 	rsbvc	r5, r5, #49	; 0x31
     e78:	43687069 	cmnmi	r8, #105	; 0x69
     e7c:	6b636f6c 	blvs	18dcc34 <startup-0x1e7233cc>
     e80:	6f4d504c 	svcvs	0x004d504c
     e84:	6d436564 	cfstr64vs	mvdx6, [r3, #-400]	; 0xfffffe70
     e88:	50470064 	subpl	r0, r7, r4, rrx
     e8c:	545f4f49 	ldrbpl	r4, [pc], #-3913	; e94 <startup-0x1ffff16c>
     e90:	44657079 	strbtmi	r7, [r5], #-121	; 0xffffff87
     e94:	54006665 	strpl	r6, [r0], #-1637	; 0xfffff99b
     e98:	5f314d49 	svcpl	0x00314d49
     e9c:	545f5055 	ldrbpl	r5, [pc], #-85	; ea4 <startup-0x1ffff15c>
     ea0:	30314d49 	eorscc	r4, r1, r9, asr #26
     ea4:	5152495f 	cmppl	r2, pc, asr r9
     ea8:	5449006e 	strbpl	r0, [r9], #-110	; 0xffffff92
     eac:	78525f4d 	ldmdavc	r2, {r0, r2, r3, r6, r8, r9, sl, fp, ip, lr}^
     eb0:	66667542 	strbtvs	r7, [r6], -r2, asr #10
     eb4:	50007265 	andpl	r7, r0, r5, ror #4
     eb8:	32494c4c 	subcc	r4, r9, #76, 24	; 0x4c00
     ebc:	52004e53 	andpl	r4, r0, #1328	; 0x530
     ec0:	415f4343 	cmpmi	pc, r3, asr #6
     ec4:	50314248 	eorspl	r4, r1, r8, asr #4
     ec8:	70697265 	rsbvc	r7, r9, r5, ror #4
     ecc:	6f6c4368 	svcvs	0x006c4368
     ed0:	504c6b63 	subpl	r6, ip, r3, ror #22
     ed4:	65646f4d 	strbvs	r6, [r4, #-3917]!	; 0xfffff0b3
     ed8:	00646d43 	rsbeq	r6, r4, r3, asr #26
     edc:	494c4c50 	stmdbmi	ip, {r4, r6, sl, fp, lr}^
     ee0:	00525332 	subseq	r5, r2, r2, lsr r3
     ee4:	6e69616d 	powvsez	f6, f1, #5.0
     ee8:	47544f00 	ldrbmi	r4, [r4, -r0, lsl #30]
     eec:	5f53485f 	svcpl	0x0053485f
     ef0:	5f315045 	svcpl	0x00315045
     ef4:	5f54554f 	svcpl	0x0054554f
     ef8:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     efc:	2f3a4300 	svccs	0x003a4300
     f00:	2f746967 	svccs	0x00746967
     f04:	32544144 	subscc	r4, r4, #68, 2
     f08:	4c2d3039 	stcmi	0, cr3, [sp], #-228	; 0xffffff1c
     f0c:	736d7261 	cmnvc	sp, #268435462	; 0x10000006
     f10:	65747379 	ldrbvs	r7, [r4, #-889]!	; 0xfffffc87
     f14:	6f6b2f6d 	svcvs	0x006b2f6d
     f18:	6f442f64 	svcvs	0x00442f64
     f1c:	732f726f 			; <UNDEFINED> instruction: 0x732f726f
     f20:	74726174 	ldrbtvc	r6, [r2], #-372	; 0xfffffe8c
     f24:	632e7075 			; <UNDEFINED> instruction: 0x632e7075
     f28:	43435200 	movtmi	r5, #12800	; 0x3200
     f2c:	4354525f 	cmpmi	r4, #-268435451	; 0xf0000005
     f30:	434b4c43 	movtmi	r4, #48195	; 0xbc43
     f34:	4d00646d 	cfstrsmi	mvf6, [r0, #-436]	; 0xfffffe4c
     f38:	5245444f 	subpl	r4, r5, #1325400064	; 0x4f000000
     f3c:	49564e00 	ldmdbmi	r6, {r9, sl, fp, lr}^
     f40:	65535f43 	ldrbvs	r5, [r3, #-3907]	; 0xfffff0bd
     f44:	69725074 	ldmdbvs	r2!, {r2, r4, r5, r6, ip, lr}^
     f48:	7469726f 	strbtvc	r7, [r9], #-623	; 0xfffffd91
     f4c:	41430079 	hvcmi	12297	; 0x3009
     f50:	525f314e 	subspl	r3, pc, #-2147483629	; 0x80000013
     f54:	495f3158 	ldmdbmi	pc, {r3, r4, r6, r8, ip, sp}^	; <UNPREDICTABLE>
     f58:	006e5152 	rsbeq	r5, lr, r2, asr r1
     f5c:	5f434352 	svcpl	0x00434352
     f60:	32424841 	subcc	r4, r2, #4259840	; 0x410000
     f64:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
     f68:	47006870 	smlsdxmi	r0, r0, r8, r6
     f6c:	5f4f4950 	svcpl	0x004f4950
     f70:	64507550 	ldrbvs	r7, [r0], #-1360	; 0xfffffab0
     f74:	0050555f 	subseq	r5, r0, pc, asr r5
     f78:	49545845 	ldmdbmi	r4, {r0, r2, r6, fp, ip, lr}^
     f7c:	5f355f39 	svcpl	0x00355f39
     f80:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     f84:	4c4c5000 	marmi	acc0, r5, ip
     f88:	43494153 	movtmi	r4, #37203	; 0x9153
     f8c:	00524746 	subseq	r4, r2, r6, asr #14
     f90:	5f434352 	svcpl	0x00434352
     f94:	31424841 	cmpcc	r2, r1, asr #16
     f98:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
     f9c:	6c436870 	mcrrvs	8, 7, r6, r3, cr0
     fa0:	436b636f 	cmnmi	fp, #-1140850687	; 0xbc000001
     fa4:	7300646d 	movwvc	r6, #1133	; 0x46d
     fa8:	74726f68 	ldrbtvc	r6, [r2], #-3944	; 0xfffff098
     fac:	736e7520 	cmnvc	lr, #32, 10	; 0x8000000
     fb0:	656e6769 	strbvs	r6, [lr, #-1897]!	; 0xfffff897
     fb4:	6e692064 	cdpvs	0, 6, cr2, cr9, cr4, {3}
     fb8:	43520074 	cmpmi	r2, #116	; 0x74
     fbc:	4c505f43 	mrrcmi	15, 4, r5, r0, cr3
     fc0:	5332494c 	teqpl	r2, #76, 18	; 0x130000
     fc4:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
     fc8:	54006769 	strpl	r6, [r0], #-1897	; 0xfffff897
     fcc:	5f384d49 	svcpl	0x00384d49
     fd0:	495f4343 	ldmdbmi	pc, {r0, r1, r6, r8, r9, lr}^	; <UNPREDICTABLE>
     fd4:	006e5152 	rsbeq	r5, lr, r2, asr r1
     fd8:	4f494453 	svcmi	0x00494453
     fdc:	5152495f 	cmppl	r2, pc, asr r9
     fe0:	5043006e 	subpl	r0, r3, lr, rrx
     fe4:	00524341 	subseq	r4, r2, r1, asr #6
     fe8:	52505349 	subspl	r5, r0, #603979777	; 0x24000001
     fec:	53595300 	cmppl	r9, #0, 6
     ff0:	5f4b4c43 	svcpl	0x004b4c43
     ff4:	71657246 	cmnvc	r5, r6, asr #4
     ff8:	636e6575 	cmnvs	lr, #490733568	; 0x1d400000
     ffc:	58450079 	stmdapl	r5, {r0, r3, r4, r5, r6}^
    1000:	5f334954 	svcpl	0x00334954
    1004:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
    1008:	6e655000 	cdpvs	0, 6, cr5, cr5, cr0, {0}
    100c:	5f565364 	svcpl	0x00565364
    1010:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
    1014:	47544f00 	ldrbmi	r4, [r4, -r0, lsl #30]
    1018:	5f53485f 	svcpl	0x0053485f
    101c:	5f315045 	svcpl	0x00315045
    1020:	495f4e49 	ldmdbmi	pc, {r0, r3, r6, r9, sl, fp, lr}^	; <UNPREDICTABLE>
    1024:	006e5152 	rsbeq	r5, lr, r2, asr r1
    1028:	31414d44 	cmpcc	r1, r4, asr #26
    102c:	7274535f 	rsbsvc	r5, r4, #2080374785	; 0x7c000001
    1030:	376d6165 	strbcc	r6, [sp, -r5, ror #2]!
    1034:	5152495f 	cmppl	r2, pc, asr r9
    1038:	5f5f006e 	svcpl	0x005f006e
    103c:	33746e69 	cmncc	r4, #1680	; 0x690
    1040:	00745f32 	rsbseq	r5, r4, r2, lsr pc
    1044:	5f434352 	svcpl	0x00434352
    1048:	434d4954 	movtmi	r4, #55636	; 0xd954
    104c:	72504b4c 	subsvc	r4, r0, #76, 22	; 0x13000
    1050:	61637365 	cmnvs	r3, r5, ror #6
    1054:	0072656c 	rsbseq	r6, r2, ip, ror #10
    1058:	52455349 	subpl	r5, r5, #603979777	; 0x24000001
    105c:	65727000 	ldrbvs	r7, [r2, #-0]!
    1060:	52006373 	andpl	r6, r0, #-872415231	; 0xcc000001
    1064:	415f4343 	cmpmi	pc, r3, asr #6
    1068:	50324248 	eorspl	r4, r2, r8, asr #4
    106c:	70697265 	rsbvc	r7, r9, r5, ror #4
    1070:	73655268 	cmnvc	r5, #104, 4	; 0x80000006
    1074:	6d437465 	cfstrdvs	mvd7, [r3, #-404]	; 0xfffffe6c
    1078:	43520064 	cmpmi	r2, #100	; 0x64
    107c:	4c505f43 	mrrcmi	15, 4, r5, r0, cr3
    1080:	4941534c 	stmdbmi	r1, {r2, r3, r6, r8, r9, ip, lr}^
    1084:	00646d43 	rsbeq	r6, r4, r3, asr #26
    1088:	675c3a43 	ldrbvs	r3, [ip, -r3, asr #20]
    108c:	445c7469 	ldrbmi	r7, [ip], #-1129	; 0xfffffb97
    1090:	39325441 	ldmdbcc	r2!, {r0, r6, sl, ip, lr}
    1094:	614c2d30 	cmpvs	ip, r0, lsr sp
    1098:	79736d72 	ldmdbvc	r3!, {r1, r4, r5, r6, r8, sl, fp, sp, lr}^
    109c:	6d657473 	cfstrdvs	mvd7, [r5, #-460]!	; 0xfffffe34
    10a0:	646f6b5c 	strbtvs	r6, [pc], #-2908	; 10a8 <startup-0x1fffef58>
    10a4:	6f6f445c 	svcvs	0x006f445c
    10a8:	48410072 	stmdami	r1, {r1, r4, r5, r6}^
    10ac:	4e453342 	cdpmi	3, 4, cr3, cr5, cr2, {2}
    10b0:	43520052 	cmpmi	r2, #82	; 0x52
    10b4:	59535f43 	ldmdbpl	r3, {r0, r1, r6, r8, r9, sl, fp, ip, lr}^
    10b8:	4b4c4353 	blmi	1311e0c <startup-0x1ecee1f4>
    10bc:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    10c0:	44006769 	strmi	r6, [r0], #-1897	; 0xfffff897
    10c4:	5f32414d 	svcpl	0x0032414d
    10c8:	65727453 	ldrbvs	r7, [r2, #-1107]!	; 0xfffffbad
    10cc:	5f326d61 	svcpl	0x00326d61
    10d0:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
    10d4:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
    10d8:	61465f4f 	cmpvs	r6, pc, asr #30
    10dc:	535f7473 	cmppl	pc, #1929379840	; 0x73000000
    10e0:	64656570 	strbtvs	r6, [r5], #-1392	; 0xfffffa90
    10e4:	43435200 	movtmi	r5, #12800	; 0x3200
    10e8:	4c4c505f 	mcrrmi	0, 5, r5, ip, cr15
    10ec:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    10f0:	70006769 	andvc	r6, r0, r9, ror #14
    10f4:	006d6c6c 	rsbeq	r6, sp, ip, ror #24
    10f8:	706e6970 	rsbvc	r6, lr, r0, ror r9
    10fc:	4200736f 	andmi	r7, r0, #-1140850687	; 0xbc000001
    1100:	535f7469 	cmppl	pc, #1761607680	; 0x69000000
    1104:	47005445 	strmi	r5, [r0, -r5, asr #8]
    1108:	5f4f4950 	svcpl	0x004f4950
    110c:	64616552 	strbtvs	r6, [r1], #-1362	; 0xfffffaae
    1110:	7074754f 	rsbsvc	r7, r4, pc, asr #10
    1114:	61447475 	hvcvs	18245	; 0x4745
    1118:	47006174 	smlsdxmi	r0, r4, r1, r6
    111c:	5f4f4950 	svcpl	0x004f4950
    1120:	74004641 	strvc	r4, [r0], #-1601	; 0xfffff9bf
    1124:	00706d65 	rsbseq	r6, r0, r5, ror #26
    1128:	4f495047 	svcmi	0x00495047
    112c:	7274535f 	rsbsvc	r5, r4, #2080374785	; 0x7c000001
    1130:	49746375 	ldmdbmi	r4!, {r0, r2, r4, r5, r6, r8, r9, sp, lr}^
    1134:	0074696e 	rsbseq	r6, r4, lr, ror #18
    1138:	56746942 	ldrbtpl	r6, [r4], -r2, asr #18
    113c:	42006c61 	andmi	r6, r0, #24832	; 0x6100
    1140:	525f7469 	subspl	r7, pc, #1761607680	; 0x69000000
    1144:	54455345 	strbpl	r5, [r5], #-837	; 0xfffffcbb
    1148:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
    114c:	72575f4f 	subsvc	r5, r7, #316	; 0x13c
    1150:	42657469 	rsbmi	r7, r5, #1761607680	; 0x69000000
    1154:	47007469 	strmi	r7, [r0, -r9, ror #8]
    1158:	5f4f4950 	svcpl	0x004f4950
    115c:	42746553 	rsbsmi	r6, r4, #348127232	; 0x14c00000
    1160:	00737469 	rsbseq	r7, r3, r9, ror #8
    1164:	4f495047 	svcmi	0x00495047
    1168:	696e495f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, lr}^
    116c:	50470074 	subpl	r0, r7, r4, ror r0
    1170:	525f4f49 	subspl	r4, pc, #292	; 0x124
    1174:	74657365 	strbtvc	r7, [r5], #-869	; 0xfffffc9b
    1178:	73746942 	cmnvc	r4, #1081344	; 0x108000
    117c:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
    1180:	65445f4f 	strbvs	r5, [r4, #-3919]	; 0xfffff0b1
    1184:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xfffff1b7
    1188:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
    118c:	65525f4f 	ldrbvs	r5, [r2, #-3919]	; 0xfffff0b1
    1190:	6e496461 	cdpvs	4, 4, cr6, cr9, cr1, {3}
    1194:	44747570 	ldrbtmi	r7, [r4], #-1392	; 0xfffffa90
    1198:	42617461 	rsbmi	r7, r1, #1627389952	; 0x61000000
    119c:	47007469 	strmi	r7, [r0, -r9, ror #8]
    11a0:	5f4f4950 	svcpl	0x004f4950
    11a4:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xfffff1b7
    11a8:	75727453 	ldrbvc	r7, [r2, #-1107]!	; 0xfffffbad
    11ac:	50007463 	andpl	r7, r0, r3, ror #8
    11b0:	5674726f 	ldrbtpl	r7, [r4], -pc, ror #4
    11b4:	47006c61 	strmi	r6, [r0, -r1, ror #24]
    11b8:	5f4f4950 	svcpl	0x004f4950
    11bc:	536e6950 	cmnpl	lr, #80, 18	; 0x140000
    11c0:	6372756f 	cmnvs	r2, #465567744	; 0x1bc00000
    11c4:	50470065 	subpl	r0, r7, r5, rrx
    11c8:	525f4f49 	subspl	r4, pc, #292	; 0x124
    11cc:	49646165 	stmdbmi	r4!, {r0, r2, r5, r6, r8, sp, lr}^
    11d0:	7475706e 	ldrbtvc	r7, [r5], #-110	; 0xffffff92
    11d4:	61746144 	cmnvs	r4, r4, asr #2
    11d8:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
    11dc:	69505f4f 	ldmdbvs	r0, {r0, r1, r2, r3, r6, r8, r9, sl, fp, ip, lr}^
    11e0:	636f4c6e 	cmnvs	pc, #28160	; 0x6e00
    11e4:	6e6f436b 	cdpvs	3, 6, cr4, cr15, cr11, {3}
    11e8:	00676966 	rsbeq	r6, r7, r6, ror #18
    11ec:	41746942 	cmnmi	r4, r2, asr #18
    11f0:	6f697463 	svcvs	0x00697463
    11f4:	7563006e 	strbvc	r0, [r3, #-110]!	; 0xffffff92
    11f8:	6e657272 	mcrvs	2, 3, r7, cr5, cr2, {3}
    11fc:	6e697074 	mcrvs	0, 3, r7, cr9, cr4, {3}
    1200:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
    1204:	72575f4f 	subsvc	r5, r7, #316	; 0x13c
    1208:	00657469 	rsbeq	r7, r5, r9, ror #8
    120c:	4f495047 	svcmi	0x00495047
    1210:	50470078 	subpl	r0, r7, r8, ror r0
    1214:	545f4f49 	ldrbpl	r4, [pc], #-3913	; 121c <startup-0x1fffede4>
    1218:	6c67676f 	stclvs	7, cr6, [r7], #-444	; 0xfffffe44
    121c:	74694265 	strbtvc	r4, [r9], #-613	; 0xfffffd9b
    1220:	65740073 	ldrbvs	r0, [r4, #-115]!	; 0xffffff8d
    1224:	325f706d 	subscc	r7, pc, #109	; 0x6d
    1228:	2f3a4300 	svccs	0x003a4300
    122c:	2f746967 	svccs	0x00746967
    1230:	32544144 	subscc	r4, r4, #68, 2
    1234:	4c2d3039 	stcmi	0, cr3, [sp], #-228	; 0xffffff1c
    1238:	736d7261 	cmnvc	sp, #268435462	; 0x10000006
    123c:	65747379 	ldrbvs	r7, [r4, #-889]!	; 0xfffffc87
    1240:	6f6b2f6d 	svcvs	0x006b2f6d
    1244:	696c2f64 	stmdbvs	ip!, {r2, r5, r6, r8, r9, sl, fp, sp}^
    1248:	54532f62 	ldrbpl	r2, [r3], #-3938	; 0xfffff09e
    124c:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
    1250:	696c5f34 	stmdbvs	ip!, {r2, r4, r5, r8, r9, sl, fp, ip, lr}^
    1254:	54532f62 	ldrbpl	r2, [r3], #-3938	; 0xfffff09e
    1258:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
    125c:	5f787834 	svcpl	0x00787834
    1260:	50647453 	rsbpl	r7, r4, r3, asr r4
    1264:	70697265 	rsbvc	r7, r9, r5, ror #4
    1268:	72445f68 	subvc	r5, r4, #104, 30	; 0x1a0
    126c:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
    1270:	6372732f 	cmnvs	r2, #-1140850688	; 0xbc000000
    1274:	6d74732f 	ldclvs	3, cr7, [r4, #-188]!	; 0xffffff44
    1278:	34663233 	strbtcc	r3, [r6], #-563	; 0xfffffdcd
    127c:	675f7878 			; <UNDEFINED> instruction: 0x675f7878
    1280:	2e6f6970 			; <UNDEFINED> instruction: 0x2e6f6970
    1284:	50470063 	subpl	r0, r7, r3, rrx
    1288:	505f4f49 	subspl	r4, pc, r9, asr #30
    128c:	46416e69 	strbmi	r6, [r1], -r9, ror #28
    1290:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    1294:	47006769 	strmi	r6, [r0, -r9, ror #14]
    1298:	5f4f4950 	svcpl	0x004f4950
    129c:	64616552 	strbtvs	r6, [r1], #-1362	; 0xfffffaae
    12a0:	7074754f 	rsbsvc	r7, r4, pc, asr #10
    12a4:	61447475 	hvcvs	18245	; 0x4745
    12a8:	69426174 	stmdbvs	r2, {r2, r4, r5, r6, r8, sp, lr}^
    12ac:	Address 0x000012ac is out of bounds.


Disassembly of section .comment:

00000000 <.comment>:
   0:	3a434347 	bcc	10d0d24 <startup-0x1ef2f2dc>
   4:	4e472820 	cdpmi	8, 4, cr2, cr7, cr0, {1}
   8:	6f542055 	svcvs	0x00542055
   c:	20736c6f 	rsbscs	r6, r3, pc, ror #24
  10:	20726f66 	rsbscs	r6, r2, r6, ror #30
  14:	206d7241 	rsbcs	r7, sp, r1, asr #4
  18:	65626d45 	strbvs	r6, [r2, #-3397]!	; 0xfffff2bb
  1c:	64656464 	strbtvs	r6, [r5], #-1124	; 0xfffffb9c
  20:	6f725020 	svcvs	0x00725020
  24:	73736563 	cmnvc	r3, #415236096	; 0x18c00000
  28:	2073726f 	rsbscs	r7, r3, pc, ror #4
  2c:	30322d37 	eorscc	r2, r2, r7, lsr sp
  30:	712d3731 			; <UNDEFINED> instruction: 0x712d3731
  34:	616d2d34 	cmnvs	sp, r4, lsr sp
  38:	29726f6a 	ldmdbcs	r2!, {r1, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
  3c:	322e3720 	eorcc	r3, lr, #32, 14	; 0x800000
  40:	3220312e 	eorcc	r3, r0, #-2147483637	; 0x8000000b
  44:	30373130 	eorscc	r3, r7, r0, lsr r1
  48:	20343039 	eorscs	r3, r4, r9, lsr r0
  4c:	6c657228 	sfmvs	f7, 2, [r5], #-160	; 0xffffff60
  50:	65736165 	ldrbvs	r6, [r3, #-357]!	; 0xfffffe9b
  54:	415b2029 	cmpmi	fp, r9, lsr #32
  58:	652f4d52 	strvs	r4, [pc, #-3410]!	; fffff30e <GPIO_Pins+0xdfffde36>
  5c:	6465626d 	strbtvs	r6, [r5], #-621	; 0xfffffd93
  60:	2d646564 	cfstr64cs	mvdx6, [r4, #-400]!	; 0xfffffe70
  64:	72622d37 	rsbvc	r2, r2, #3520	; 0xdc0
  68:	68636e61 	stmdavs	r3!, {r0, r5, r6, r9, sl, fp, sp, lr}^
  6c:	76657220 	strbtvc	r7, [r5], -r0, lsr #4
  70:	6f697369 	svcvs	0x00697369
  74:	3532206e 	ldrcc	r2, [r2, #-110]!	; 0xffffff92
  78:	34303235 	ldrtcc	r3, [r0], #-565	; 0xfffffdcb
  7c:	Address 0x0000007c is out of bounds.


Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00002b41 	andeq	r2, r0, r1, asr #22
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	00000021 	andeq	r0, r0, r1, lsr #32
  10:	2d533605 	ldclcs	6, cr3, [r3, #-20]	; 0xffffffec
  14:	0c06004d 	stceq	0, cr0, [r6], {77}	; 0x4d
  18:	01094d07 	tsteq	r9, r7, lsl #26
  1c:	01140412 	tsteq	r4, r2, lsl r4
  20:	03170115 	tsteq	r7, #1073741829	; 0x40000005
  24:	01190118 	tsteq	r9, r8, lsl r1
  28:	061e011a 			; <UNDEFINED> instruction: 0x061e011a

Disassembly of section .debug_frame:

00000000 <.debug_frame>:
   0:	0000000c 	andeq	r0, r0, ip
   4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   8:	7c020001 	stcvc	0, cr0, [r2], {1}
   c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  10:	0000001c 	andeq	r0, r0, ip, lsl r0
  14:	00000000 	andeq	r0, r0, r0
  18:	20000010 	andcs	r0, r0, r0, lsl r0
  1c:	00000060 	andeq	r0, r0, r0, rrx
  20:	40080e41 	andmi	r0, r8, r1, asr #28
  24:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  28:	100e4101 	andne	r4, lr, r1, lsl #2
  2c:	00070d41 	andeq	r0, r7, r1, asr #26
  30:	0000001c 	andeq	r0, r0, ip, lsl r0
  34:	00000000 	andeq	r0, r0, r0
  38:	20000070 	andcs	r0, r0, r0, ror r0
  3c:	00000048 	andeq	r0, r0, r8, asr #32
  40:	40080e41 	andmi	r0, r8, r1, asr #28
  44:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  48:	100e4101 	andne	r4, lr, r1, lsl #2
  4c:	00070d41 	andeq	r0, r7, r1, asr #26
  50:	00000018 	andeq	r0, r0, r8, lsl r0
  54:	00000000 	andeq	r0, r0, r0
  58:	200000b8 	strhcs	r0, [r0], -r8
  5c:	00000070 	andeq	r0, r0, r0, ror r0
  60:	40080e41 	andmi	r0, r8, r1, asr #28
  64:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  68:	070d4101 	streq	r4, [sp, -r1, lsl #2]
  6c:	0000001c 	andeq	r0, r0, ip, lsl r0
  70:	00000000 	andeq	r0, r0, r0
  74:	20000128 	andcs	r0, r0, r8, lsr #2
  78:	00000028 	andeq	r0, r0, r8, lsr #32
  7c:	40080e41 	andmi	r0, r8, r1, asr #28
  80:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  84:	100e4101 	andne	r4, lr, r1, lsl #2
  88:	00070d41 	andeq	r0, r7, r1, asr #26
  8c:	00000020 	andeq	r0, r0, r0, lsr #32
  90:	00000000 	andeq	r0, r0, r0
  94:	20000150 	andcs	r0, r0, r0, asr r1
  98:	0000005e 	andeq	r0, r0, lr, asr r0
  9c:	400c0e41 	andmi	r0, ip, r1, asr #28
  a0:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
  a4:	018e4002 	orreq	r4, lr, r2
  a8:	41180e41 	tstmi	r8, r1, asr #28
  ac:	0000070d 	andeq	r0, r0, sp, lsl #14
  b0:	0000001c 	andeq	r0, r0, ip, lsl r0
  b4:	00000000 	andeq	r0, r0, r0
  b8:	200001ae 	andcs	r0, r0, lr, lsr #3
  bc:	0000003e 	andeq	r0, r0, lr, lsr r0
  c0:	40080e41 	andmi	r0, r8, r1, asr #28
  c4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  c8:	180e4101 	stmdane	lr, {r0, r8, lr}
  cc:	00070d41 	andeq	r0, r7, r1, asr #26
  d0:	0000001c 	andeq	r0, r0, ip, lsl r0
  d4:	00000000 	andeq	r0, r0, r0
  d8:	200001ec 	andcs	r0, r0, ip, ror #3
  dc:	00000020 	andeq	r0, r0, r0, lsr #32
  e0:	40080e41 	andmi	r0, r8, r1, asr #28
  e4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  e8:	100e4101 	andne	r4, lr, r1, lsl #2
  ec:	00070d41 	andeq	r0, r7, r1, asr #26
  f0:	0000001c 	andeq	r0, r0, ip, lsl r0
  f4:	00000000 	andeq	r0, r0, r0
  f8:	2000020c 	andcs	r0, r0, ip, lsl #4
  fc:	00000044 	andeq	r0, r0, r4, asr #32
 100:	40080e41 	andmi	r0, r8, r1, asr #28
 104:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 108:	100e4101 	andne	r4, lr, r1, lsl #2
 10c:	00070d41 	andeq	r0, r7, r1, asr #26
 110:	0000001c 	andeq	r0, r0, ip, lsl r0
 114:	00000000 	andeq	r0, r0, r0
 118:	20000250 	andcs	r0, r0, r0, asr r2
 11c:	00000020 	andeq	r0, r0, r0, lsr #32
 120:	40080e41 	andmi	r0, r8, r1, asr #28
 124:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 128:	100e4101 	andne	r4, lr, r1, lsl #2
 12c:	00070d41 	andeq	r0, r7, r1, asr #26
 130:	0000001c 	andeq	r0, r0, ip, lsl r0
 134:	00000000 	andeq	r0, r0, r0
 138:	20000270 	andcs	r0, r0, r0, ror r2
 13c:	0000003c 	andeq	r0, r0, ip, lsr r0
 140:	40080e41 	andmi	r0, r8, r1, asr #28
 144:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 148:	180e4101 	stmdane	lr, {r0, r8, lr}
 14c:	00070d41 	andeq	r0, r7, r1, asr #26
 150:	0000001c 	andeq	r0, r0, ip, lsl r0
 154:	00000000 	andeq	r0, r0, r0
 158:	200002ac 	andcs	r0, r0, ip, lsr #5
 15c:	00000020 	andeq	r0, r0, r0, lsr #32
 160:	40080e41 	andmi	r0, r8, r1, asr #28
 164:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 168:	100e4101 	andne	r4, lr, r1, lsl #2
 16c:	00070d41 	andeq	r0, r7, r1, asr #26
 170:	0000001c 	andeq	r0, r0, ip, lsl r0
 174:	00000000 	andeq	r0, r0, r0
 178:	200002cc 	andcs	r0, r0, ip, asr #5
 17c:	00000028 	andeq	r0, r0, r8, lsr #32
 180:	40080e41 	andmi	r0, r8, r1, asr #28
 184:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 188:	100e4101 	andne	r4, lr, r1, lsl #2
 18c:	00070d41 	andeq	r0, r7, r1, asr #26
 190:	0000001c 	andeq	r0, r0, ip, lsl r0
 194:	00000000 	andeq	r0, r0, r0
 198:	200002f4 	strdcs	r0, [r0], -r4
 19c:	00000020 	andeq	r0, r0, r0, lsr #32
 1a0:	40080e41 	andmi	r0, r8, r1, asr #28
 1a4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 1a8:	100e4101 	andne	r4, lr, r1, lsl #2
 1ac:	00070d41 	andeq	r0, r7, r1, asr #26
 1b0:	0000001c 	andeq	r0, r0, ip, lsl r0
 1b4:	00000000 	andeq	r0, r0, r0
 1b8:	20000314 	andcs	r0, r0, r4, lsl r3
 1bc:	00000030 	andeq	r0, r0, r0, lsr r0
 1c0:	40080e41 	andmi	r0, r8, r1, asr #28
 1c4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 1c8:	180e4101 	stmdane	lr, {r0, r8, lr}
 1cc:	00070d41 	andeq	r0, r7, r1, asr #26
 1d0:	0000001c 	andeq	r0, r0, ip, lsl r0
 1d4:	00000000 	andeq	r0, r0, r0
 1d8:	20000344 	andcs	r0, r0, r4, asr #6
 1dc:	00000020 	andeq	r0, r0, r0, lsr #32
 1e0:	40080e41 	andmi	r0, r8, r1, asr #28
 1e4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 1e8:	100e4101 	andne	r4, lr, r1, lsl #2
 1ec:	00070d41 	andeq	r0, r7, r1, asr #26
 1f0:	0000001c 	andeq	r0, r0, ip, lsl r0
 1f4:	00000000 	andeq	r0, r0, r0
 1f8:	20000364 	andcs	r0, r0, r4, ror #6
 1fc:	00000020 	andeq	r0, r0, r0, lsr #32
 200:	40080e41 	andmi	r0, r8, r1, asr #28
 204:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 208:	100e4101 	andne	r4, lr, r1, lsl #2
 20c:	00070d41 	andeq	r0, r7, r1, asr #26
 210:	0000001c 	andeq	r0, r0, ip, lsl r0
 214:	00000000 	andeq	r0, r0, r0
 218:	20000384 	andcs	r0, r0, r4, lsl #7
 21c:	00000040 	andeq	r0, r0, r0, asr #32
 220:	40080e41 	andmi	r0, r8, r1, asr #28
 224:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 228:	180e4101 	stmdane	lr, {r0, r8, lr}
 22c:	00070d41 	andeq	r0, r7, r1, asr #26
 230:	0000001c 	andeq	r0, r0, ip, lsl r0
 234:	00000000 	andeq	r0, r0, r0
 238:	200003c4 	andcs	r0, r0, r4, asr #7
 23c:	0000003c 	andeq	r0, r0, ip, lsr r0
 240:	40080e41 	andmi	r0, r8, r1, asr #28
 244:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 248:	180e4101 	stmdane	lr, {r0, r8, lr}
 24c:	00070d41 	andeq	r0, r7, r1, asr #26
 250:	0000001c 	andeq	r0, r0, ip, lsl r0
 254:	00000000 	andeq	r0, r0, r0
 258:	20000400 	andcs	r0, r0, r0, lsl #8
 25c:	00000034 	andeq	r0, r0, r4, lsr r0
 260:	40080e41 	andmi	r0, r8, r1, asr #28
 264:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 268:	180e4101 	stmdane	lr, {r0, r8, lr}
 26c:	00070d41 	andeq	r0, r7, r1, asr #26
 270:	00000018 	andeq	r0, r0, r8, lsl r0
 274:	00000000 	andeq	r0, r0, r0
 278:	20000434 	andcs	r0, r0, r4, lsr r4
 27c:	0000001c 	andeq	r0, r0, ip, lsl r0
 280:	40080e41 	andmi	r0, r8, r1, asr #28
 284:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 288:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 28c:	0000001c 	andeq	r0, r0, ip, lsl r0
 290:	00000000 	andeq	r0, r0, r0
 294:	20000450 	andcs	r0, r0, r0, asr r4
 298:	00000034 	andeq	r0, r0, r4, lsr r0
 29c:	40080e41 	andmi	r0, r8, r1, asr #28
 2a0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 2a4:	180e4101 	stmdane	lr, {r0, r8, lr}
 2a8:	00070d41 	andeq	r0, r7, r1, asr #26
 2ac:	0000001c 	andeq	r0, r0, ip, lsl r0
 2b0:	00000000 	andeq	r0, r0, r0
 2b4:	20000484 	andcs	r0, r0, r4, lsl #9
 2b8:	00000038 	andeq	r0, r0, r8, lsr r0
 2bc:	40080e41 	andmi	r0, r8, r1, asr #28
 2c0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 2c4:	180e4101 	stmdane	lr, {r0, r8, lr}
 2c8:	00070d41 	andeq	r0, r7, r1, asr #26
 2cc:	0000001c 	andeq	r0, r0, ip, lsl r0
 2d0:	00000000 	andeq	r0, r0, r0
 2d4:	200004bc 			; <UNDEFINED> instruction: 0x200004bc
 2d8:	0000003c 	andeq	r0, r0, ip, lsr r0
 2dc:	40080e41 	andmi	r0, r8, r1, asr #28
 2e0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 2e4:	180e4101 	stmdane	lr, {r0, r8, lr}
 2e8:	00070d41 	andeq	r0, r7, r1, asr #26
 2ec:	0000001c 	andeq	r0, r0, ip, lsl r0
 2f0:	00000000 	andeq	r0, r0, r0
 2f4:	200004f8 	strdcs	r0, [r0], -r8
 2f8:	00000158 	andeq	r0, r0, r8, asr r1
 2fc:	40080e41 	andmi	r0, r8, r1, asr #28
 300:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 304:	280e4101 	stmdacs	lr, {r0, r8, lr}
 308:	00070d41 	andeq	r0, r7, r1, asr #26
 30c:	0000001c 	andeq	r0, r0, ip, lsl r0
 310:	00000000 	andeq	r0, r0, r0
 314:	20000650 	andcs	r0, r0, r0, asr r6
 318:	00000060 	andeq	r0, r0, r0, rrx
 31c:	40080e41 	andmi	r0, r8, r1, asr #28
 320:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 324:	180e4101 	stmdane	lr, {r0, r8, lr}
 328:	00070d41 	andeq	r0, r7, r1, asr #26
 32c:	0000001c 	andeq	r0, r0, ip, lsl r0
 330:	00000000 	andeq	r0, r0, r0
 334:	200006b0 			; <UNDEFINED> instruction: 0x200006b0
 338:	00000020 	andeq	r0, r0, r0, lsr #32
 33c:	40080e41 	andmi	r0, r8, r1, asr #28
 340:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 344:	100e4101 	andne	r4, lr, r1, lsl #2
 348:	00070d41 	andeq	r0, r7, r1, asr #26
 34c:	0000001c 	andeq	r0, r0, ip, lsl r0
 350:	00000000 	andeq	r0, r0, r0
 354:	200006d0 	ldrdcs	r0, [r0], -r0	; <UNPREDICTABLE>
 358:	00000020 	andeq	r0, r0, r0, lsr #32
 35c:	40080e41 	andmi	r0, r8, r1, asr #28
 360:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 364:	100e4101 	andne	r4, lr, r1, lsl #2
 368:	00070d41 	andeq	r0, r7, r1, asr #26
 36c:	0000001c 	andeq	r0, r0, ip, lsl r0
 370:	00000000 	andeq	r0, r0, r0
 374:	200006f0 	strdcs	r0, [r0], -r0	; <UNPREDICTABLE>
 378:	0000001c 	andeq	r0, r0, ip, lsl r0
 37c:	40080e41 	andmi	r0, r8, r1, asr #28
 380:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 384:	100e4101 	andne	r4, lr, r1, lsl #2
 388:	00070d41 	andeq	r0, r7, r1, asr #26
 38c:	0000001c 	andeq	r0, r0, ip, lsl r0
 390:	00000000 	andeq	r0, r0, r0
 394:	2000070c 	andcs	r0, r0, ip, lsl #14
 398:	0000003c 	andeq	r0, r0, ip, lsr r0
 39c:	40080e41 	andmi	r0, r8, r1, asr #28
 3a0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 3a4:	180e4101 	stmdane	lr, {r0, r8, lr}
 3a8:	00070d41 	andeq	r0, r7, r1, asr #26
 3ac:	0000001c 	andeq	r0, r0, ip, lsl r0
 3b0:	00000000 	andeq	r0, r0, r0
 3b4:	20000748 	andcs	r0, r0, r8, asr #14
 3b8:	0000003c 	andeq	r0, r0, ip, lsr r0
 3bc:	40080e41 	andmi	r0, r8, r1, asr #28
 3c0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 3c4:	180e4101 	stmdane	lr, {r0, r8, lr}
 3c8:	00070d41 	andeq	r0, r7, r1, asr #26
 3cc:	0000001c 	andeq	r0, r0, ip, lsl r0
 3d0:	00000000 	andeq	r0, r0, r0
 3d4:	20000784 	andcs	r0, r0, r4, lsl #15
 3d8:	0000003c 	andeq	r0, r0, ip, lsr r0
 3dc:	40080e41 	andmi	r0, r8, r1, asr #28
 3e0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 3e4:	180e4101 	stmdane	lr, {r0, r8, lr}
 3e8:	00070d41 	andeq	r0, r7, r1, asr #26
 3ec:	0000001c 	andeq	r0, r0, ip, lsl r0
 3f0:	00000000 	andeq	r0, r0, r0
 3f4:	200007c0 	andcs	r0, r0, r0, asr #15
 3f8:	00000040 	andeq	r0, r0, r0, asr #32
 3fc:	40080e41 	andmi	r0, r8, r1, asr #28
 400:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 404:	180e4101 	stmdane	lr, {r0, r8, lr}
 408:	00070d41 	andeq	r0, r7, r1, asr #26
 40c:	0000001c 	andeq	r0, r0, ip, lsl r0
 410:	00000000 	andeq	r0, r0, r0
 414:	20000800 	andcs	r0, r0, r0, lsl #16
 418:	0000003c 	andeq	r0, r0, ip, lsr r0
 41c:	40080e41 	andmi	r0, r8, r1, asr #28
 420:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 424:	180e4101 	stmdane	lr, {r0, r8, lr}
 428:	00070d41 	andeq	r0, r7, r1, asr #26
 42c:	0000001c 	andeq	r0, r0, ip, lsl r0
 430:	00000000 	andeq	r0, r0, r0
 434:	2000083c 	andcs	r0, r0, ip, lsr r8
 438:	0000001c 	andeq	r0, r0, ip, lsl r0
 43c:	40080e41 	andmi	r0, r8, r1, asr #28
 440:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 444:	100e4101 	andne	r4, lr, r1, lsl #2
 448:	00070d41 	andeq	r0, r7, r1, asr #26
 44c:	0000001c 	andeq	r0, r0, ip, lsl r0
 450:	00000000 	andeq	r0, r0, r0
 454:	20000858 	andcs	r0, r0, r8, asr r8
 458:	00000040 	andeq	r0, r0, r0, asr #32
 45c:	40080e41 	andmi	r0, r8, r1, asr #28
 460:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 464:	100e4101 	andne	r4, lr, r1, lsl #2
 468:	00070d41 	andeq	r0, r7, r1, asr #26
 46c:	0000001c 	andeq	r0, r0, ip, lsl r0
 470:	00000000 	andeq	r0, r0, r0
 474:	20000898 	mulcs	r0, r8, r8
 478:	00000040 	andeq	r0, r0, r0, asr #32
 47c:	40080e41 	andmi	r0, r8, r1, asr #28
 480:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 484:	100e4101 	andne	r4, lr, r1, lsl #2
 488:	00070d41 	andeq	r0, r7, r1, asr #26
 48c:	0000001c 	andeq	r0, r0, ip, lsl r0
 490:	00000000 	andeq	r0, r0, r0
 494:	200008d8 	ldrdcs	r0, [r0], -r8
 498:	00000040 	andeq	r0, r0, r0, asr #32
 49c:	40080e41 	andmi	r0, r8, r1, asr #28
 4a0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 4a4:	100e4101 	andne	r4, lr, r1, lsl #2
 4a8:	00070d41 	andeq	r0, r7, r1, asr #26
 4ac:	0000001c 	andeq	r0, r0, ip, lsl r0
 4b0:	00000000 	andeq	r0, r0, r0
 4b4:	20000918 	andcs	r0, r0, r8, lsl r9
 4b8:	00000040 	andeq	r0, r0, r0, asr #32
 4bc:	40080e41 	andmi	r0, r8, r1, asr #28
 4c0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 4c4:	100e4101 	andne	r4, lr, r1, lsl #2
 4c8:	00070d41 	andeq	r0, r7, r1, asr #26
 4cc:	0000001c 	andeq	r0, r0, ip, lsl r0
 4d0:	00000000 	andeq	r0, r0, r0
 4d4:	20000958 	andcs	r0, r0, r8, asr r9
 4d8:	00000040 	andeq	r0, r0, r0, asr #32
 4dc:	40080e41 	andmi	r0, r8, r1, asr #28
 4e0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 4e4:	100e4101 	andne	r4, lr, r1, lsl #2
 4e8:	00070d41 	andeq	r0, r7, r1, asr #26
 4ec:	0000001c 	andeq	r0, r0, ip, lsl r0
 4f0:	00000000 	andeq	r0, r0, r0
 4f4:	20000998 	mulcs	r0, r8, r9
 4f8:	00000040 	andeq	r0, r0, r0, asr #32
 4fc:	40080e41 	andmi	r0, r8, r1, asr #28
 500:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 504:	100e4101 	andne	r4, lr, r1, lsl #2
 508:	00070d41 	andeq	r0, r7, r1, asr #26
 50c:	0000001c 	andeq	r0, r0, ip, lsl r0
 510:	00000000 	andeq	r0, r0, r0
 514:	200009d8 	ldrdcs	r0, [r0], -r8
 518:	00000040 	andeq	r0, r0, r0, asr #32
 51c:	40080e41 	andmi	r0, r8, r1, asr #28
 520:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 524:	100e4101 	andne	r4, lr, r1, lsl #2
 528:	00070d41 	andeq	r0, r7, r1, asr #26
 52c:	0000001c 	andeq	r0, r0, ip, lsl r0
 530:	00000000 	andeq	r0, r0, r0
 534:	20000a18 	andcs	r0, r0, r8, lsl sl
 538:	00000040 	andeq	r0, r0, r0, asr #32
 53c:	40080e41 	andmi	r0, r8, r1, asr #28
 540:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 544:	100e4101 	andne	r4, lr, r1, lsl #2
 548:	00070d41 	andeq	r0, r7, r1, asr #26
 54c:	0000001c 	andeq	r0, r0, ip, lsl r0
 550:	00000000 	andeq	r0, r0, r0
 554:	20000a58 	andcs	r0, r0, r8, asr sl
 558:	00000040 	andeq	r0, r0, r0, asr #32
 55c:	40080e41 	andmi	r0, r8, r1, asr #28
 560:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 564:	100e4101 	andne	r4, lr, r1, lsl #2
 568:	00070d41 	andeq	r0, r7, r1, asr #26
 56c:	0000001c 	andeq	r0, r0, ip, lsl r0
 570:	00000000 	andeq	r0, r0, r0
 574:	20000a98 	mulcs	r0, r8, sl
 578:	00000040 	andeq	r0, r0, r0, asr #32
 57c:	40080e41 	andmi	r0, r8, r1, asr #28
 580:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 584:	100e4101 	andne	r4, lr, r1, lsl #2
 588:	00070d41 	andeq	r0, r7, r1, asr #26
 58c:	0000001c 	andeq	r0, r0, ip, lsl r0
 590:	00000000 	andeq	r0, r0, r0
 594:	20000ad8 	ldrdcs	r0, [r0], -r8
 598:	00000040 	andeq	r0, r0, r0, asr #32
 59c:	40080e41 	andmi	r0, r8, r1, asr #28
 5a0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 5a4:	100e4101 	andne	r4, lr, r1, lsl #2
 5a8:	00070d41 	andeq	r0, r7, r1, asr #26
 5ac:	0000001c 	andeq	r0, r0, ip, lsl r0
 5b0:	00000000 	andeq	r0, r0, r0
 5b4:	20000b18 	andcs	r0, r0, r8, lsl fp
 5b8:	00000040 	andeq	r0, r0, r0, asr #32
 5bc:	40080e41 	andmi	r0, r8, r1, asr #28
 5c0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 5c4:	100e4101 	andne	r4, lr, r1, lsl #2
 5c8:	00070d41 	andeq	r0, r7, r1, asr #26
 5cc:	0000001c 	andeq	r0, r0, ip, lsl r0
 5d0:	00000000 	andeq	r0, r0, r0
 5d4:	20000b58 	andcs	r0, r0, r8, asr fp
 5d8:	00000040 	andeq	r0, r0, r0, asr #32
 5dc:	40080e41 	andmi	r0, r8, r1, asr #28
 5e0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 5e4:	100e4101 	andne	r4, lr, r1, lsl #2
 5e8:	00070d41 	andeq	r0, r7, r1, asr #26
 5ec:	0000001c 	andeq	r0, r0, ip, lsl r0
 5f0:	00000000 	andeq	r0, r0, r0
 5f4:	20000b98 	mulcs	r0, r8, fp
 5f8:	00000040 	andeq	r0, r0, r0, asr #32
 5fc:	40080e41 	andmi	r0, r8, r1, asr #28
 600:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 604:	100e4101 	andne	r4, lr, r1, lsl #2
 608:	00070d41 	andeq	r0, r7, r1, asr #26
 60c:	0000001c 	andeq	r0, r0, ip, lsl r0
 610:	00000000 	andeq	r0, r0, r0
 614:	20000bd8 	ldrdcs	r0, [r0], -r8
 618:	00000040 	andeq	r0, r0, r0, asr #32
 61c:	40080e41 	andmi	r0, r8, r1, asr #28
 620:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 624:	100e4101 	andne	r4, lr, r1, lsl #2
 628:	00070d41 	andeq	r0, r7, r1, asr #26
 62c:	0000001c 	andeq	r0, r0, ip, lsl r0
 630:	00000000 	andeq	r0, r0, r0
 634:	20000c18 	andcs	r0, r0, r8, lsl ip
 638:	0000003c 	andeq	r0, r0, ip, lsr r0
 63c:	40080e41 	andmi	r0, r8, r1, asr #28
 640:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 644:	100e4101 	andne	r4, lr, r1, lsl #2
 648:	00070d41 	andeq	r0, r7, r1, asr #26
 64c:	0000001c 	andeq	r0, r0, ip, lsl r0
 650:	00000000 	andeq	r0, r0, r0
 654:	20000c54 	andcs	r0, r0, r4, asr ip
 658:	00000050 	andeq	r0, r0, r0, asr r0
 65c:	40080e41 	andmi	r0, r8, r1, asr #28
 660:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 664:	100e4101 	andne	r4, lr, r1, lsl #2
 668:	00070d41 	andeq	r0, r7, r1, asr #26
 66c:	0000001c 	andeq	r0, r0, ip, lsl r0
 670:	00000000 	andeq	r0, r0, r0
 674:	20000ca4 	andcs	r0, r0, r4, lsr #25
 678:	00000084 	andeq	r0, r0, r4, lsl #1
 67c:	40080e41 	andmi	r0, r8, r1, asr #28
 680:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 684:	200e4101 	andcs	r4, lr, r1, lsl #2
 688:	00070d41 	andeq	r0, r7, r1, asr #26
 68c:	00000018 	andeq	r0, r0, r8, lsl r0
 690:	00000000 	andeq	r0, r0, r0
 694:	20000d28 	andcs	r0, r0, r8, lsr #26
 698:	0000001c 	andeq	r0, r0, ip, lsl r0
 69c:	40080e41 	andmi	r0, r8, r1, asr #28
 6a0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 6a4:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 6a8:	0000001c 	andeq	r0, r0, ip, lsl r0
 6ac:	00000000 	andeq	r0, r0, r0
 6b0:	20000d44 	andcs	r0, r0, r4, asr #26
 6b4:	00000044 	andeq	r0, r0, r4, asr #32
 6b8:	40080e41 	andmi	r0, r8, r1, asr #28
 6bc:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 6c0:	180e4101 	stmdane	lr, {r0, r8, lr}
 6c4:	00070d41 	andeq	r0, r7, r1, asr #26
 6c8:	0000001c 	andeq	r0, r0, ip, lsl r0
 6cc:	00000000 	andeq	r0, r0, r0
 6d0:	20000d88 	andcs	r0, r0, r8, lsl #27
 6d4:	00000020 	andeq	r0, r0, r0, lsr #32
 6d8:	40080e41 	andmi	r0, r8, r1, asr #28
 6dc:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 6e0:	100e4101 	andne	r4, lr, r1, lsl #2
 6e4:	00070d41 	andeq	r0, r7, r1, asr #26
 6e8:	0000000c 	andeq	r0, r0, ip
 6ec:	00000000 	andeq	r0, r0, r0
 6f0:	20000000 	andcs	r0, r0, r0
 6f4:	0000000c 	andeq	r0, r0, ip
 6f8:	0000001c 	andeq	r0, r0, ip, lsl r0
 6fc:	00000000 	andeq	r0, r0, r0
 700:	20000da8 	andcs	r0, r0, r8, lsr #27
 704:	00000068 	andeq	r0, r0, r8, rrx
 708:	40080e41 	andmi	r0, r8, r1, asr #28
 70c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 710:	100e4101 	andne	r4, lr, r1, lsl #2
 714:	00070d41 	andeq	r0, r7, r1, asr #26
 718:	00000018 	andeq	r0, r0, r8, lsl r0
 71c:	00000000 	andeq	r0, r0, r0
 720:	20000e10 	andcs	r0, r0, r0, lsl lr
 724:	00000054 	andeq	r0, r0, r4, asr r0
 728:	40080e41 	andmi	r0, r8, r1, asr #28
 72c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 730:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 734:	0000001c 	andeq	r0, r0, ip, lsl r0
 738:	00000000 	andeq	r0, r0, r0
 73c:	20000e64 	andcs	r0, r0, r4, ror #28
 740:	00000038 	andeq	r0, r0, r8, lsr r0
 744:	40080e41 	andmi	r0, r8, r1, asr #28
 748:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 74c:	100e4101 	andne	r4, lr, r1, lsl #2
 750:	00070d41 	andeq	r0, r7, r1, asr #26
 754:	0000000c 	andeq	r0, r0, ip
 758:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 75c:	7c020001 	stcvc	0, cr0, [r2], {1}
 760:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 764:	0000001c 	andeq	r0, r0, ip, lsl r0
 768:	00000754 	andeq	r0, r0, r4, asr r7
 76c:	20000e9c 	mulcs	r0, ip, lr
 770:	00000170 	andeq	r0, r0, r0, ror r1
 774:	40080e41 	andmi	r0, r8, r1, asr #28
 778:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 77c:	100e4101 	andne	r4, lr, r1, lsl #2
 780:	00070d41 	andeq	r0, r7, r1, asr #26
 784:	0000001c 	andeq	r0, r0, ip, lsl r0
 788:	00000754 	andeq	r0, r0, r4, asr r7
 78c:	2000100c 	andcs	r1, r0, ip
 790:	00000118 	andeq	r0, r0, r8, lsl r1
 794:	40080e41 	andmi	r0, r8, r1, asr #28
 798:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 79c:	200e4101 	andcs	r4, lr, r1, lsl #2
 7a0:	00070d41 	andeq	r0, r7, r1, asr #26
 7a4:	0000001c 	andeq	r0, r0, ip, lsl r0
 7a8:	00000754 	andeq	r0, r0, r4, asr r7
 7ac:	20001124 	andcs	r1, r0, r4, lsr #2
 7b0:	00000034 	andeq	r0, r0, r4, lsr r0
 7b4:	40080e41 	andmi	r0, r8, r1, asr #28
 7b8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 7bc:	100e4101 	andne	r4, lr, r1, lsl #2
 7c0:	00070d41 	andeq	r0, r7, r1, asr #26
 7c4:	0000001c 	andeq	r0, r0, ip, lsl r0
 7c8:	00000754 	andeq	r0, r0, r4, asr r7
 7cc:	20001158 	andcs	r1, r0, r8, asr r1
 7d0:	00000046 	andeq	r0, r0, r6, asr #32
 7d4:	40080e41 	andmi	r0, r8, r1, asr #28
 7d8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 7dc:	180e4101 	stmdane	lr, {r0, r8, lr}
 7e0:	00070d41 	andeq	r0, r7, r1, asr #26
 7e4:	0000001c 	andeq	r0, r0, ip, lsl r0
 7e8:	00000754 	andeq	r0, r0, r4, asr r7
 7ec:	2000119e 	mulcs	r0, lr, r1
 7f0:	00000042 	andeq	r0, r0, r2, asr #32
 7f4:	40080e41 	andmi	r0, r8, r1, asr #28
 7f8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 7fc:	180e4101 	stmdane	lr, {r0, r8, lr}
 800:	00070d41 	andeq	r0, r7, r1, asr #26
 804:	0000001c 	andeq	r0, r0, ip, lsl r0
 808:	00000754 	andeq	r0, r0, r4, asr r7
 80c:	200011e0 	andcs	r1, r0, r0, ror #3
 810:	00000016 	andeq	r0, r0, r6, lsl r0
 814:	40080e41 	andmi	r0, r8, r1, asr #28
 818:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 81c:	100e4101 	andne	r4, lr, r1, lsl #2
 820:	00070d41 	andeq	r0, r7, r1, asr #26
 824:	0000001c 	andeq	r0, r0, ip, lsl r0
 828:	00000754 	andeq	r0, r0, r4, asr r7
 82c:	200011f6 	strdcs	r1, [r0], -r6
 830:	00000042 	andeq	r0, r0, r2, asr #32
 834:	40080e41 	andmi	r0, r8, r1, asr #28
 838:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 83c:	180e4101 	stmdane	lr, {r0, r8, lr}
 840:	00070d41 	andeq	r0, r7, r1, asr #26
 844:	0000001c 	andeq	r0, r0, ip, lsl r0
 848:	00000754 	andeq	r0, r0, r4, asr r7
 84c:	20001238 	andcs	r1, r0, r8, lsr r2
 850:	00000016 	andeq	r0, r0, r6, lsl r0
 854:	40080e41 	andmi	r0, r8, r1, asr #28
 858:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 85c:	100e4101 	andne	r4, lr, r1, lsl #2
 860:	00070d41 	andeq	r0, r7, r1, asr #26
 864:	0000001c 	andeq	r0, r0, ip, lsl r0
 868:	00000754 	andeq	r0, r0, r4, asr r7
 86c:	2000124e 	andcs	r1, r0, lr, asr #4
 870:	0000001e 	andeq	r0, r0, lr, lsl r0
 874:	40080e41 	andmi	r0, r8, r1, asr #28
 878:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 87c:	100e4101 	andne	r4, lr, r1, lsl #2
 880:	00070d41 	andeq	r0, r7, r1, asr #26
 884:	0000001c 	andeq	r0, r0, ip, lsl r0
 888:	00000754 	andeq	r0, r0, r4, asr r7
 88c:	2000126c 	andcs	r1, r0, ip, ror #4
 890:	0000001e 	andeq	r0, r0, lr, lsl r0
 894:	40080e41 	andmi	r0, r8, r1, asr #28
 898:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 89c:	100e4101 	andne	r4, lr, r1, lsl #2
 8a0:	00070d41 	andeq	r0, r7, r1, asr #26
 8a4:	0000001c 	andeq	r0, r0, ip, lsl r0
 8a8:	00000754 	andeq	r0, r0, r4, asr r7
 8ac:	2000128a 	andcs	r1, r0, sl, lsl #5
 8b0:	0000003a 	andeq	r0, r0, sl, lsr r0
 8b4:	40080e41 	andmi	r0, r8, r1, asr #28
 8b8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 8bc:	100e4101 	andne	r4, lr, r1, lsl #2
 8c0:	00070d41 	andeq	r0, r7, r1, asr #26
 8c4:	0000001c 	andeq	r0, r0, ip, lsl r0
 8c8:	00000754 	andeq	r0, r0, r4, asr r7
 8cc:	200012c4 	andcs	r1, r0, r4, asr #5
 8d0:	0000001e 	andeq	r0, r0, lr, lsl r0
 8d4:	40080e41 	andmi	r0, r8, r1, asr #28
 8d8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 8dc:	100e4101 	andne	r4, lr, r1, lsl #2
 8e0:	00070d41 	andeq	r0, r7, r1, asr #26
 8e4:	0000001c 	andeq	r0, r0, ip, lsl r0
 8e8:	00000754 	andeq	r0, r0, r4, asr r7
 8ec:	200012e2 	andcs	r1, r0, r2, ror #5
 8f0:	00000024 	andeq	r0, r0, r4, lsr #32
 8f4:	40080e41 	andmi	r0, r8, r1, asr #28
 8f8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 8fc:	100e4101 	andne	r4, lr, r1, lsl #2
 900:	00070d41 	andeq	r0, r7, r1, asr #26
 904:	0000001c 	andeq	r0, r0, ip, lsl r0
 908:	00000754 	andeq	r0, r0, r4, asr r7
 90c:	20001306 	andcs	r1, r0, r6, lsl #6
 910:	000000a4 	andeq	r0, r0, r4, lsr #1
 914:	40080e41 	andmi	r0, r8, r1, asr #28
 918:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 91c:	180e4101 	stmdane	lr, {r0, r8, lr}
 920:	00070d41 	andeq	r0, r7, r1, asr #26
 924:	0000000c 	andeq	r0, r0, ip
 928:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 92c:	7c010001 	stcvc	0, cr0, [r1], {1}
 930:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 934:	0000000c 	andeq	r0, r0, ip
 938:	00000924 	andeq	r0, r0, r4, lsr #18
 93c:	200013ad 	andcs	r1, r0, sp, lsr #7
 940:	0000010a 	andeq	r0, r0, sl, lsl #2
