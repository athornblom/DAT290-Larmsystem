
./Debug/Door.elf:     file format elf32-littlearm


Disassembly of section .text:

20000000 <startup>:

void startup(void) __attribute__((naked)) __attribute__((section (".start_section")) );

void startup ( void )
{
__asm volatile(
20000000:	4802      	ldr	r0, [pc, #8]	; (2000000c <_exit+0x4>)
20000002:	4685      	mov	sp, r0
20000004:	f000 f838 	bl	20000078 <main>

20000008 <_exit>:
20000008:	e7fe      	b.n	20000008 <_exit>
	" LDR R0,=0x2001C000\n"		/* set stack */
	" MOV SP,R0\n"
	" BL main\n"				/* call main */
	"_exit: B .\n"				/* never return */
	) ;
}
2000000a:	46c0      	nop			; (mov r8, r8)
2000000c:	2001c000 	andcs	ip, r1, r0

20000010 <app_init>:

void app_init(){
20000010:	b580      	push	{r7, lr}
20000012:	b082      	sub	sp, #8
20000014:	af00      	add	r7, sp, #0
/*  Function used to set the GPIO configuration to the default reset state ****/
	GPIO_InitTypeDef init;
	
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
20000016:	2101      	movs	r1, #1
20000018:	2001      	movs	r0, #1
2000001a:	f000 fec9 	bl	20000db0 <RCC_AHB1PeriphClockCmd>
	GPIO_StructInit(&init);
2000001e:	003b      	movs	r3, r7
20000020:	0018      	movs	r0, r3
20000022:	f000 f9b1 	bl	20000388 <GPIO_StructInit>
	init.GPIO_Pin = GPIO_Pin_1 | GPIO_Pin_3 | GPIO_Pin_5 | GPIO_Pin_7;
20000026:	003b      	movs	r3, r7
20000028:	22aa      	movs	r2, #170	; 0xaa
2000002a:	601a      	str	r2, [r3, #0]
	init.GPIO_Mode = GPIO_Mode_OUT;
2000002c:	003b      	movs	r3, r7
2000002e:	2201      	movs	r2, #1
20000030:	711a      	strb	r2, [r3, #4]
	init.GPIO_OType = GPIO_OType_PP;
20000032:	003b      	movs	r3, r7
20000034:	2200      	movs	r2, #0
20000036:	719a      	strb	r2, [r3, #6]
	GPIO_Init(GPIOA,&init);
20000038:	003b      	movs	r3, r7
2000003a:	4a0e      	ldr	r2, [pc, #56]	; (20000074 <app_init+0x64>)
2000003c:	0019      	movs	r1, r3
2000003e:	0010      	movs	r0, r2
20000040:	f000 f916 	bl	20000270 <GPIO_Init>
	


//konfigurerar inport
	GPIO_StructInit(&init);
20000044:	003b      	movs	r3, r7
20000046:	0018      	movs	r0, r3
20000048:	f000 f99e 	bl	20000388 <GPIO_StructInit>
	init.GPIO_Pin = GPIO_Pin_0 | GPIO_Pin_2 | GPIO_Pin_4 | GPIO_Pin_6;
2000004c:	003b      	movs	r3, r7
2000004e:	2255      	movs	r2, #85	; 0x55
20000050:	601a      	str	r2, [r3, #0]
	init.GPIO_Mode = GPIO_Mode_IN;
20000052:	003b      	movs	r3, r7
20000054:	2200      	movs	r2, #0
20000056:	711a      	strb	r2, [r3, #4]
	init.GPIO_PuPd = GPIO_PuPd_UP;
20000058:	003b      	movs	r3, r7
2000005a:	2201      	movs	r2, #1
2000005c:	71da      	strb	r2, [r3, #7]
	GPIO_Init(GPIOA,&init);
2000005e:	003b      	movs	r3, r7
20000060:	4a04      	ldr	r2, [pc, #16]	; (20000074 <app_init+0x64>)
20000062:	0019      	movs	r1, r3
20000064:	0010      	movs	r0, r2
20000066:	f000 f903 	bl	20000270 <GPIO_Init>
	
	
}
2000006a:	46c0      	nop			; (mov r8, r8)
2000006c:	46bd      	mov	sp, r7
2000006e:	b002      	add	sp, #8
20000070:	bd80      	pop	{r7, pc}
20000072:	46c0      	nop			; (mov r8, r8)
20000074:	40020000 	andmi	r0, r2, r0

20000078 <main>:
void main(void)
{
20000078:	b580      	push	{r7, lr}
2000007a:	af00      	add	r7, sp, #0
	app_init();
2000007c:	f7ff ffc8 	bl	20000010 <app_init>

	while (1) {
		if (GPIO_ReadInputData(GPIOA) & (1<<2)) {
20000080:	4b1e      	ldr	r3, [pc, #120]	; (200000fc <main+0x84>)
20000082:	0018      	movs	r0, r3
20000084:	f000 f9de 	bl	20000444 <GPIO_ReadInputData>
20000088:	0003      	movs	r3, r0
2000008a:	001a      	movs	r2, r3
2000008c:	2304      	movs	r3, #4
2000008e:	4013      	ands	r3, r2
20000090:	d005      	beq.n	2000009e <main+0x26>
			GPIO_ResetBits(GPIOA,GPIO_Pin_1);
20000092:	4b1a      	ldr	r3, [pc, #104]	; (200000fc <main+0x84>)
20000094:	2102      	movs	r1, #2
20000096:	0018      	movs	r0, r3
20000098:	f000 fa1a 	bl	200004d0 <GPIO_ResetBits>
2000009c:	e004      	b.n	200000a8 <main+0x30>
		} else {
			GPIO_SetBits(GPIOA,GPIO_Pin_1);
2000009e:	4b17      	ldr	r3, [pc, #92]	; (200000fc <main+0x84>)
200000a0:	2102      	movs	r1, #2
200000a2:	0018      	movs	r0, r3
200000a4:	f000 fa05 	bl	200004b2 <GPIO_SetBits>
		}
		if (GPIO_ReadInputData(GPIOA) & (1<<4)) {
200000a8:	4b14      	ldr	r3, [pc, #80]	; (200000fc <main+0x84>)
200000aa:	0018      	movs	r0, r3
200000ac:	f000 f9ca 	bl	20000444 <GPIO_ReadInputData>
200000b0:	0003      	movs	r3, r0
200000b2:	001a      	movs	r2, r3
200000b4:	2310      	movs	r3, #16
200000b6:	4013      	ands	r3, r2
200000b8:	d005      	beq.n	200000c6 <main+0x4e>
			GPIO_ResetBits(GPIOA,GPIO_Pin_3);
200000ba:	4b10      	ldr	r3, [pc, #64]	; (200000fc <main+0x84>)
200000bc:	2108      	movs	r1, #8
200000be:	0018      	movs	r0, r3
200000c0:	f000 fa06 	bl	200004d0 <GPIO_ResetBits>
200000c4:	e004      	b.n	200000d0 <main+0x58>
		} else {
			GPIO_SetBits(GPIOA,GPIO_Pin_3);
200000c6:	4b0d      	ldr	r3, [pc, #52]	; (200000fc <main+0x84>)
200000c8:	2108      	movs	r1, #8
200000ca:	0018      	movs	r0, r3
200000cc:	f000 f9f1 	bl	200004b2 <GPIO_SetBits>
		}
		if (GPIO_ReadInputData(GPIOA) & (1<<6)) {
200000d0:	4b0a      	ldr	r3, [pc, #40]	; (200000fc <main+0x84>)
200000d2:	0018      	movs	r0, r3
200000d4:	f000 f9b6 	bl	20000444 <GPIO_ReadInputData>
200000d8:	0003      	movs	r3, r0
200000da:	001a      	movs	r2, r3
200000dc:	2340      	movs	r3, #64	; 0x40
200000de:	4013      	ands	r3, r2
200000e0:	d005      	beq.n	200000ee <main+0x76>
			GPIO_ResetBits(GPIOA,GPIO_Pin_5);
200000e2:	4b06      	ldr	r3, [pc, #24]	; (200000fc <main+0x84>)
200000e4:	2120      	movs	r1, #32
200000e6:	0018      	movs	r0, r3
200000e8:	f000 f9f2 	bl	200004d0 <GPIO_ResetBits>
200000ec:	e7c8      	b.n	20000080 <main+0x8>
		} else {
			GPIO_SetBits(GPIOA,GPIO_Pin_5);
200000ee:	4b03      	ldr	r3, [pc, #12]	; (200000fc <main+0x84>)
200000f0:	2120      	movs	r1, #32
200000f2:	0018      	movs	r0, r3
200000f4:	f000 f9dd 	bl	200004b2 <GPIO_SetBits>
		if (GPIO_ReadInputData(GPIOA) & (1<<2)) {
200000f8:	e7c2      	b.n	20000080 <main+0x8>
200000fa:	46c0      	nop			; (mov r8, r8)
200000fc:	40020000 	andmi	r0, r2, r0

20000100 <GPIO_DeInit>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F42xxx/43xxx devices.
  *                      x can be (A, B, C, D and H) to select the GPIO peripheral for STM32F401xx devices.  
  * @retval None
  */
void GPIO_DeInit(GPIO_TypeDef* GPIOx)
{
20000100:	b580      	push	{r7, lr}
20000102:	b082      	sub	sp, #8
20000104:	af00      	add	r7, sp, #0
20000106:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  if (GPIOx == GPIOA)
20000108:	687b      	ldr	r3, [r7, #4]
2000010a:	4a4e      	ldr	r2, [pc, #312]	; (20000244 <GPIO_DeInit+0x144>)
2000010c:	4293      	cmp	r3, r2
2000010e:	d108      	bne.n	20000122 <GPIO_DeInit+0x22>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, ENABLE);
20000110:	2101      	movs	r1, #1
20000112:	2001      	movs	r0, #1
20000114:	f000 feec 	bl	20000ef0 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, DISABLE);
20000118:	2100      	movs	r1, #0
2000011a:	2001      	movs	r0, #1
2000011c:	f000 fee8 	bl	20000ef0 <RCC_AHB1PeriphResetCmd>
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, ENABLE);
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, DISABLE);
    }
  }
}
20000120:	e08c      	b.n	2000023c <GPIO_DeInit+0x13c>
  else if (GPIOx == GPIOB)
20000122:	687b      	ldr	r3, [r7, #4]
20000124:	4a48      	ldr	r2, [pc, #288]	; (20000248 <GPIO_DeInit+0x148>)
20000126:	4293      	cmp	r3, r2
20000128:	d108      	bne.n	2000013c <GPIO_DeInit+0x3c>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, ENABLE);
2000012a:	2101      	movs	r1, #1
2000012c:	2002      	movs	r0, #2
2000012e:	f000 fedf 	bl	20000ef0 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, DISABLE);
20000132:	2100      	movs	r1, #0
20000134:	2002      	movs	r0, #2
20000136:	f000 fedb 	bl	20000ef0 <RCC_AHB1PeriphResetCmd>
}
2000013a:	e07f      	b.n	2000023c <GPIO_DeInit+0x13c>
  else if (GPIOx == GPIOC)
2000013c:	687b      	ldr	r3, [r7, #4]
2000013e:	4a43      	ldr	r2, [pc, #268]	; (2000024c <GPIO_DeInit+0x14c>)
20000140:	4293      	cmp	r3, r2
20000142:	d108      	bne.n	20000156 <GPIO_DeInit+0x56>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, ENABLE);
20000144:	2101      	movs	r1, #1
20000146:	2004      	movs	r0, #4
20000148:	f000 fed2 	bl	20000ef0 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, DISABLE);
2000014c:	2100      	movs	r1, #0
2000014e:	2004      	movs	r0, #4
20000150:	f000 fece 	bl	20000ef0 <RCC_AHB1PeriphResetCmd>
}
20000154:	e072      	b.n	2000023c <GPIO_DeInit+0x13c>
  else if (GPIOx == GPIOD)
20000156:	687b      	ldr	r3, [r7, #4]
20000158:	4a3d      	ldr	r2, [pc, #244]	; (20000250 <GPIO_DeInit+0x150>)
2000015a:	4293      	cmp	r3, r2
2000015c:	d108      	bne.n	20000170 <GPIO_DeInit+0x70>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, ENABLE);
2000015e:	2101      	movs	r1, #1
20000160:	2008      	movs	r0, #8
20000162:	f000 fec5 	bl	20000ef0 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, DISABLE);
20000166:	2100      	movs	r1, #0
20000168:	2008      	movs	r0, #8
2000016a:	f000 fec1 	bl	20000ef0 <RCC_AHB1PeriphResetCmd>
}
2000016e:	e065      	b.n	2000023c <GPIO_DeInit+0x13c>
  else if (GPIOx == GPIOE)
20000170:	687b      	ldr	r3, [r7, #4]
20000172:	4a38      	ldr	r2, [pc, #224]	; (20000254 <GPIO_DeInit+0x154>)
20000174:	4293      	cmp	r3, r2
20000176:	d108      	bne.n	2000018a <GPIO_DeInit+0x8a>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, ENABLE);
20000178:	2101      	movs	r1, #1
2000017a:	2010      	movs	r0, #16
2000017c:	f000 feb8 	bl	20000ef0 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, DISABLE);
20000180:	2100      	movs	r1, #0
20000182:	2010      	movs	r0, #16
20000184:	f000 feb4 	bl	20000ef0 <RCC_AHB1PeriphResetCmd>
}
20000188:	e058      	b.n	2000023c <GPIO_DeInit+0x13c>
  else if (GPIOx == GPIOF)
2000018a:	687b      	ldr	r3, [r7, #4]
2000018c:	4a32      	ldr	r2, [pc, #200]	; (20000258 <GPIO_DeInit+0x158>)
2000018e:	4293      	cmp	r3, r2
20000190:	d108      	bne.n	200001a4 <GPIO_DeInit+0xa4>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, ENABLE);
20000192:	2101      	movs	r1, #1
20000194:	2020      	movs	r0, #32
20000196:	f000 feab 	bl	20000ef0 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, DISABLE);
2000019a:	2100      	movs	r1, #0
2000019c:	2020      	movs	r0, #32
2000019e:	f000 fea7 	bl	20000ef0 <RCC_AHB1PeriphResetCmd>
}
200001a2:	e04b      	b.n	2000023c <GPIO_DeInit+0x13c>
  else if (GPIOx == GPIOG)
200001a4:	687b      	ldr	r3, [r7, #4]
200001a6:	4a2d      	ldr	r2, [pc, #180]	; (2000025c <GPIO_DeInit+0x15c>)
200001a8:	4293      	cmp	r3, r2
200001aa:	d108      	bne.n	200001be <GPIO_DeInit+0xbe>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, ENABLE);
200001ac:	2101      	movs	r1, #1
200001ae:	2040      	movs	r0, #64	; 0x40
200001b0:	f000 fe9e 	bl	20000ef0 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, DISABLE);
200001b4:	2100      	movs	r1, #0
200001b6:	2040      	movs	r0, #64	; 0x40
200001b8:	f000 fe9a 	bl	20000ef0 <RCC_AHB1PeriphResetCmd>
}
200001bc:	e03e      	b.n	2000023c <GPIO_DeInit+0x13c>
  else if (GPIOx == GPIOH)
200001be:	687b      	ldr	r3, [r7, #4]
200001c0:	4a27      	ldr	r2, [pc, #156]	; (20000260 <GPIO_DeInit+0x160>)
200001c2:	4293      	cmp	r3, r2
200001c4:	d108      	bne.n	200001d8 <GPIO_DeInit+0xd8>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOH, ENABLE);
200001c6:	2101      	movs	r1, #1
200001c8:	2080      	movs	r0, #128	; 0x80
200001ca:	f000 fe91 	bl	20000ef0 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOH, DISABLE);
200001ce:	2100      	movs	r1, #0
200001d0:	2080      	movs	r0, #128	; 0x80
200001d2:	f000 fe8d 	bl	20000ef0 <RCC_AHB1PeriphResetCmd>
}
200001d6:	e031      	b.n	2000023c <GPIO_DeInit+0x13c>
  else if (GPIOx == GPIOI)
200001d8:	687b      	ldr	r3, [r7, #4]
200001da:	4a22      	ldr	r2, [pc, #136]	; (20000264 <GPIO_DeInit+0x164>)
200001dc:	4293      	cmp	r3, r2
200001de:	d10c      	bne.n	200001fa <GPIO_DeInit+0xfa>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, ENABLE);
200001e0:	2380      	movs	r3, #128	; 0x80
200001e2:	005b      	lsls	r3, r3, #1
200001e4:	2101      	movs	r1, #1
200001e6:	0018      	movs	r0, r3
200001e8:	f000 fe82 	bl	20000ef0 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, DISABLE);
200001ec:	2380      	movs	r3, #128	; 0x80
200001ee:	005b      	lsls	r3, r3, #1
200001f0:	2100      	movs	r1, #0
200001f2:	0018      	movs	r0, r3
200001f4:	f000 fe7c 	bl	20000ef0 <RCC_AHB1PeriphResetCmd>
}
200001f8:	e020      	b.n	2000023c <GPIO_DeInit+0x13c>
  else if (GPIOx == GPIOJ)
200001fa:	687b      	ldr	r3, [r7, #4]
200001fc:	4a1a      	ldr	r2, [pc, #104]	; (20000268 <GPIO_DeInit+0x168>)
200001fe:	4293      	cmp	r3, r2
20000200:	d10c      	bne.n	2000021c <GPIO_DeInit+0x11c>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOJ, ENABLE);
20000202:	2380      	movs	r3, #128	; 0x80
20000204:	009b      	lsls	r3, r3, #2
20000206:	2101      	movs	r1, #1
20000208:	0018      	movs	r0, r3
2000020a:	f000 fe71 	bl	20000ef0 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOJ, DISABLE);
2000020e:	2380      	movs	r3, #128	; 0x80
20000210:	009b      	lsls	r3, r3, #2
20000212:	2100      	movs	r1, #0
20000214:	0018      	movs	r0, r3
20000216:	f000 fe6b 	bl	20000ef0 <RCC_AHB1PeriphResetCmd>
}
2000021a:	e00f      	b.n	2000023c <GPIO_DeInit+0x13c>
    if (GPIOx == GPIOK)
2000021c:	687b      	ldr	r3, [r7, #4]
2000021e:	4a13      	ldr	r2, [pc, #76]	; (2000026c <GPIO_DeInit+0x16c>)
20000220:	4293      	cmp	r3, r2
20000222:	d10b      	bne.n	2000023c <GPIO_DeInit+0x13c>
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, ENABLE);
20000224:	2380      	movs	r3, #128	; 0x80
20000226:	00db      	lsls	r3, r3, #3
20000228:	2101      	movs	r1, #1
2000022a:	0018      	movs	r0, r3
2000022c:	f000 fe60 	bl	20000ef0 <RCC_AHB1PeriphResetCmd>
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, DISABLE);
20000230:	2380      	movs	r3, #128	; 0x80
20000232:	00db      	lsls	r3, r3, #3
20000234:	2100      	movs	r1, #0
20000236:	0018      	movs	r0, r3
20000238:	f000 fe5a 	bl	20000ef0 <RCC_AHB1PeriphResetCmd>
}
2000023c:	46c0      	nop			; (mov r8, r8)
2000023e:	46bd      	mov	sp, r7
20000240:	b002      	add	sp, #8
20000242:	bd80      	pop	{r7, pc}
20000244:	40020000 	andmi	r0, r2, r0
20000248:	40020400 	andmi	r0, r2, r0, lsl #8
2000024c:	40020800 	andmi	r0, r2, r0, lsl #16
20000250:	40020c00 	andmi	r0, r2, r0, lsl #24
20000254:	40021000 	andmi	r1, r2, r0
20000258:	40021400 	andmi	r1, r2, r0, lsl #8
2000025c:	40021800 	andmi	r1, r2, r0, lsl #16
20000260:	40021c00 	andmi	r1, r2, r0, lsl #24
20000264:	40022000 	andmi	r2, r2, r0
20000268:	40022400 	andmi	r2, r2, r0, lsl #8
2000026c:	40022800 	andmi	r2, r2, r0, lsl #16

20000270 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
20000270:	b580      	push	{r7, lr}
20000272:	b086      	sub	sp, #24
20000274:	af00      	add	r7, sp, #0
20000276:	6078      	str	r0, [r7, #4]
20000278:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
2000027a:	2300      	movs	r3, #0
2000027c:	617b      	str	r3, [r7, #20]
2000027e:	2300      	movs	r3, #0
20000280:	613b      	str	r3, [r7, #16]
20000282:	2300      	movs	r3, #0
20000284:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
20000286:	2300      	movs	r3, #0
20000288:	617b      	str	r3, [r7, #20]
2000028a:	e076      	b.n	2000037a <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
2000028c:	2201      	movs	r2, #1
2000028e:	697b      	ldr	r3, [r7, #20]
20000290:	409a      	lsls	r2, r3
20000292:	0013      	movs	r3, r2
20000294:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
20000296:	683b      	ldr	r3, [r7, #0]
20000298:	681a      	ldr	r2, [r3, #0]
2000029a:	693b      	ldr	r3, [r7, #16]
2000029c:	4013      	ands	r3, r2
2000029e:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
200002a0:	68fa      	ldr	r2, [r7, #12]
200002a2:	693b      	ldr	r3, [r7, #16]
200002a4:	429a      	cmp	r2, r3
200002a6:	d165      	bne.n	20000374 <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
200002a8:	687b      	ldr	r3, [r7, #4]
200002aa:	681b      	ldr	r3, [r3, #0]
200002ac:	697a      	ldr	r2, [r7, #20]
200002ae:	0052      	lsls	r2, r2, #1
200002b0:	2103      	movs	r1, #3
200002b2:	4091      	lsls	r1, r2
200002b4:	000a      	movs	r2, r1
200002b6:	43d2      	mvns	r2, r2
200002b8:	401a      	ands	r2, r3
200002ba:	687b      	ldr	r3, [r7, #4]
200002bc:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
200002be:	687b      	ldr	r3, [r7, #4]
200002c0:	681a      	ldr	r2, [r3, #0]
200002c2:	683b      	ldr	r3, [r7, #0]
200002c4:	791b      	ldrb	r3, [r3, #4]
200002c6:	0019      	movs	r1, r3
200002c8:	697b      	ldr	r3, [r7, #20]
200002ca:	005b      	lsls	r3, r3, #1
200002cc:	4099      	lsls	r1, r3
200002ce:	000b      	movs	r3, r1
200002d0:	431a      	orrs	r2, r3
200002d2:	687b      	ldr	r3, [r7, #4]
200002d4:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
200002d6:	683b      	ldr	r3, [r7, #0]
200002d8:	791b      	ldrb	r3, [r3, #4]
200002da:	2b01      	cmp	r3, #1
200002dc:	d003      	beq.n	200002e6 <GPIO_Init+0x76>
200002de:	683b      	ldr	r3, [r7, #0]
200002e0:	791b      	ldrb	r3, [r3, #4]
200002e2:	2b02      	cmp	r3, #2
200002e4:	d12e      	bne.n	20000344 <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
200002e6:	687b      	ldr	r3, [r7, #4]
200002e8:	689b      	ldr	r3, [r3, #8]
200002ea:	697a      	ldr	r2, [r7, #20]
200002ec:	0052      	lsls	r2, r2, #1
200002ee:	2103      	movs	r1, #3
200002f0:	4091      	lsls	r1, r2
200002f2:	000a      	movs	r2, r1
200002f4:	43d2      	mvns	r2, r2
200002f6:	401a      	ands	r2, r3
200002f8:	687b      	ldr	r3, [r7, #4]
200002fa:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
200002fc:	687b      	ldr	r3, [r7, #4]
200002fe:	689a      	ldr	r2, [r3, #8]
20000300:	683b      	ldr	r3, [r7, #0]
20000302:	795b      	ldrb	r3, [r3, #5]
20000304:	0019      	movs	r1, r3
20000306:	697b      	ldr	r3, [r7, #20]
20000308:	005b      	lsls	r3, r3, #1
2000030a:	4099      	lsls	r1, r3
2000030c:	000b      	movs	r3, r1
2000030e:	431a      	orrs	r2, r3
20000310:	687b      	ldr	r3, [r7, #4]
20000312:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
20000314:	687b      	ldr	r3, [r7, #4]
20000316:	685b      	ldr	r3, [r3, #4]
20000318:	697a      	ldr	r2, [r7, #20]
2000031a:	b292      	uxth	r2, r2
2000031c:	0011      	movs	r1, r2
2000031e:	2201      	movs	r2, #1
20000320:	408a      	lsls	r2, r1
20000322:	43d2      	mvns	r2, r2
20000324:	401a      	ands	r2, r3
20000326:	687b      	ldr	r3, [r7, #4]
20000328:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
2000032a:	687b      	ldr	r3, [r7, #4]
2000032c:	685b      	ldr	r3, [r3, #4]
2000032e:	683a      	ldr	r2, [r7, #0]
20000330:	7992      	ldrb	r2, [r2, #6]
20000332:	0011      	movs	r1, r2
20000334:	697a      	ldr	r2, [r7, #20]
20000336:	b292      	uxth	r2, r2
20000338:	4091      	lsls	r1, r2
2000033a:	000a      	movs	r2, r1
2000033c:	b292      	uxth	r2, r2
2000033e:	431a      	orrs	r2, r3
20000340:	687b      	ldr	r3, [r7, #4]
20000342:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
20000344:	687b      	ldr	r3, [r7, #4]
20000346:	68db      	ldr	r3, [r3, #12]
20000348:	697a      	ldr	r2, [r7, #20]
2000034a:	b292      	uxth	r2, r2
2000034c:	0052      	lsls	r2, r2, #1
2000034e:	2103      	movs	r1, #3
20000350:	4091      	lsls	r1, r2
20000352:	000a      	movs	r2, r1
20000354:	43d2      	mvns	r2, r2
20000356:	401a      	ands	r2, r3
20000358:	687b      	ldr	r3, [r7, #4]
2000035a:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
2000035c:	687b      	ldr	r3, [r7, #4]
2000035e:	68da      	ldr	r2, [r3, #12]
20000360:	683b      	ldr	r3, [r7, #0]
20000362:	79db      	ldrb	r3, [r3, #7]
20000364:	0019      	movs	r1, r3
20000366:	697b      	ldr	r3, [r7, #20]
20000368:	005b      	lsls	r3, r3, #1
2000036a:	4099      	lsls	r1, r3
2000036c:	000b      	movs	r3, r1
2000036e:	431a      	orrs	r2, r3
20000370:	687b      	ldr	r3, [r7, #4]
20000372:	60da      	str	r2, [r3, #12]
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
20000374:	697b      	ldr	r3, [r7, #20]
20000376:	3301      	adds	r3, #1
20000378:	617b      	str	r3, [r7, #20]
2000037a:	697b      	ldr	r3, [r7, #20]
2000037c:	2b0f      	cmp	r3, #15
2000037e:	d985      	bls.n	2000028c <GPIO_Init+0x1c>
    }
  }
}
20000380:	46c0      	nop			; (mov r8, r8)
20000382:	46bd      	mov	sp, r7
20000384:	b006      	add	sp, #24
20000386:	bd80      	pop	{r7, pc}

20000388 <GPIO_StructInit>:
  * @brief  Fills each GPIO_InitStruct member with its default value.
  * @param  GPIO_InitStruct : pointer to a GPIO_InitTypeDef structure which will be initialized.
  * @retval None
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
20000388:	b580      	push	{r7, lr}
2000038a:	b082      	sub	sp, #8
2000038c:	af00      	add	r7, sp, #0
2000038e:	6078      	str	r0, [r7, #4]
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
20000390:	687b      	ldr	r3, [r7, #4]
20000392:	4a09      	ldr	r2, [pc, #36]	; (200003b8 <GPIO_StructInit+0x30>)
20000394:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN;
20000396:	687b      	ldr	r3, [r7, #4]
20000398:	2200      	movs	r2, #0
2000039a:	711a      	strb	r2, [r3, #4]
  GPIO_InitStruct->GPIO_Speed = GPIO_Speed_2MHz;
2000039c:	687b      	ldr	r3, [r7, #4]
2000039e:	2200      	movs	r2, #0
200003a0:	715a      	strb	r2, [r3, #5]
  GPIO_InitStruct->GPIO_OType = GPIO_OType_PP;
200003a2:	687b      	ldr	r3, [r7, #4]
200003a4:	2200      	movs	r2, #0
200003a6:	719a      	strb	r2, [r3, #6]
  GPIO_InitStruct->GPIO_PuPd = GPIO_PuPd_NOPULL;
200003a8:	687b      	ldr	r3, [r7, #4]
200003aa:	2200      	movs	r2, #0
200003ac:	71da      	strb	r2, [r3, #7]
}
200003ae:	46c0      	nop			; (mov r8, r8)
200003b0:	46bd      	mov	sp, r7
200003b2:	b002      	add	sp, #8
200003b4:	bd80      	pop	{r7, pc}
200003b6:	46c0      	nop			; (mov r8, r8)
200003b8:	0000ffff 	strdeq	pc, [r0], -pc	; <UNPREDICTABLE>

200003bc <GPIO_PinLockConfig>:
  * @param  GPIO_Pin: specifies the port bit to be locked.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_PinLockConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
200003bc:	b580      	push	{r7, lr}
200003be:	b084      	sub	sp, #16
200003c0:	af00      	add	r7, sp, #0
200003c2:	6078      	str	r0, [r7, #4]
200003c4:	000a      	movs	r2, r1
200003c6:	1cbb      	adds	r3, r7, #2
200003c8:	801a      	strh	r2, [r3, #0]
  __IO uint32_t tmp = 0x00010000;
200003ca:	2380      	movs	r3, #128	; 0x80
200003cc:	025b      	lsls	r3, r3, #9
200003ce:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  tmp |= GPIO_Pin;
200003d0:	1cbb      	adds	r3, r7, #2
200003d2:	881a      	ldrh	r2, [r3, #0]
200003d4:	68fb      	ldr	r3, [r7, #12]
200003d6:	4313      	orrs	r3, r2
200003d8:	60fb      	str	r3, [r7, #12]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
200003da:	68fa      	ldr	r2, [r7, #12]
200003dc:	687b      	ldr	r3, [r7, #4]
200003de:	61da      	str	r2, [r3, #28]
  /* Reset LCKK bit */
  GPIOx->LCKR =  GPIO_Pin;
200003e0:	1cbb      	adds	r3, r7, #2
200003e2:	881a      	ldrh	r2, [r3, #0]
200003e4:	687b      	ldr	r3, [r7, #4]
200003e6:	61da      	str	r2, [r3, #28]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
200003e8:	68fa      	ldr	r2, [r7, #12]
200003ea:	687b      	ldr	r3, [r7, #4]
200003ec:	61da      	str	r2, [r3, #28]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
200003ee:	687b      	ldr	r3, [r7, #4]
200003f0:	69db      	ldr	r3, [r3, #28]
200003f2:	60fb      	str	r3, [r7, #12]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
200003f4:	687b      	ldr	r3, [r7, #4]
200003f6:	69db      	ldr	r3, [r3, #28]
200003f8:	60fb      	str	r3, [r7, #12]
}
200003fa:	46c0      	nop			; (mov r8, r8)
200003fc:	46bd      	mov	sp, r7
200003fe:	b004      	add	sp, #16
20000400:	bd80      	pop	{r7, pc}

20000402 <GPIO_ReadInputDataBit>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
uint8_t GPIO_ReadInputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
20000402:	b580      	push	{r7, lr}
20000404:	b084      	sub	sp, #16
20000406:	af00      	add	r7, sp, #0
20000408:	6078      	str	r0, [r7, #4]
2000040a:	000a      	movs	r2, r1
2000040c:	1cbb      	adds	r3, r7, #2
2000040e:	801a      	strh	r2, [r3, #0]
  uint8_t bitstatus = 0x00;
20000410:	230f      	movs	r3, #15
20000412:	18fb      	adds	r3, r7, r3
20000414:	2200      	movs	r2, #0
20000416:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
20000418:	687b      	ldr	r3, [r7, #4]
2000041a:	691b      	ldr	r3, [r3, #16]
2000041c:	1cba      	adds	r2, r7, #2
2000041e:	8812      	ldrh	r2, [r2, #0]
20000420:	4013      	ands	r3, r2
20000422:	d004      	beq.n	2000042e <GPIO_ReadInputDataBit+0x2c>
  {
    bitstatus = (uint8_t)Bit_SET;
20000424:	230f      	movs	r3, #15
20000426:	18fb      	adds	r3, r7, r3
20000428:	2201      	movs	r2, #1
2000042a:	701a      	strb	r2, [r3, #0]
2000042c:	e003      	b.n	20000436 <GPIO_ReadInputDataBit+0x34>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
2000042e:	230f      	movs	r3, #15
20000430:	18fb      	adds	r3, r7, r3
20000432:	2200      	movs	r2, #0
20000434:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
20000436:	230f      	movs	r3, #15
20000438:	18fb      	adds	r3, r7, r3
2000043a:	781b      	ldrb	r3, [r3, #0]
}
2000043c:	0018      	movs	r0, r3
2000043e:	46bd      	mov	sp, r7
20000440:	b004      	add	sp, #16
20000442:	bd80      	pop	{r7, pc}

20000444 <GPIO_ReadInputData>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F42xxx/43xxx devices.
  *                      x can be (A, B, C, D and H) to select the GPIO peripheral for STM32F401xx devices. 
  * @retval GPIO input data port value.
  */
uint16_t GPIO_ReadInputData(GPIO_TypeDef* GPIOx)
{
20000444:	b580      	push	{r7, lr}
20000446:	b082      	sub	sp, #8
20000448:	af00      	add	r7, sp, #0
2000044a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  return ((uint16_t)GPIOx->IDR);
2000044c:	687b      	ldr	r3, [r7, #4]
2000044e:	691b      	ldr	r3, [r3, #16]
20000450:	b29b      	uxth	r3, r3
}
20000452:	0018      	movs	r0, r3
20000454:	46bd      	mov	sp, r7
20000456:	b002      	add	sp, #8
20000458:	bd80      	pop	{r7, pc}

2000045a <GPIO_ReadOutputDataBit>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *          This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The output port pin value.
  */
uint8_t GPIO_ReadOutputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
2000045a:	b580      	push	{r7, lr}
2000045c:	b084      	sub	sp, #16
2000045e:	af00      	add	r7, sp, #0
20000460:	6078      	str	r0, [r7, #4]
20000462:	000a      	movs	r2, r1
20000464:	1cbb      	adds	r3, r7, #2
20000466:	801a      	strh	r2, [r3, #0]
  uint8_t bitstatus = 0x00;
20000468:	230f      	movs	r3, #15
2000046a:	18fb      	adds	r3, r7, r3
2000046c:	2200      	movs	r2, #0
2000046e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if (((GPIOx->ODR) & GPIO_Pin) != (uint32_t)Bit_RESET)
20000470:	687b      	ldr	r3, [r7, #4]
20000472:	695b      	ldr	r3, [r3, #20]
20000474:	1cba      	adds	r2, r7, #2
20000476:	8812      	ldrh	r2, [r2, #0]
20000478:	4013      	ands	r3, r2
2000047a:	d004      	beq.n	20000486 <GPIO_ReadOutputDataBit+0x2c>
  {
    bitstatus = (uint8_t)Bit_SET;
2000047c:	230f      	movs	r3, #15
2000047e:	18fb      	adds	r3, r7, r3
20000480:	2201      	movs	r2, #1
20000482:	701a      	strb	r2, [r3, #0]
20000484:	e003      	b.n	2000048e <GPIO_ReadOutputDataBit+0x34>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
20000486:	230f      	movs	r3, #15
20000488:	18fb      	adds	r3, r7, r3
2000048a:	2200      	movs	r2, #0
2000048c:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
2000048e:	230f      	movs	r3, #15
20000490:	18fb      	adds	r3, r7, r3
20000492:	781b      	ldrb	r3, [r3, #0]
}
20000494:	0018      	movs	r0, r3
20000496:	46bd      	mov	sp, r7
20000498:	b004      	add	sp, #16
2000049a:	bd80      	pop	{r7, pc}

2000049c <GPIO_ReadOutputData>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F42xxx/43xxx devices.
  *                      x can be (A, B, C, D and H) to select the GPIO peripheral for STM32F401xx devices. 
  * @retval GPIO output data port value.
  */
uint16_t GPIO_ReadOutputData(GPIO_TypeDef* GPIOx)
{
2000049c:	b580      	push	{r7, lr}
2000049e:	b082      	sub	sp, #8
200004a0:	af00      	add	r7, sp, #0
200004a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  return ((uint16_t)GPIOx->ODR);
200004a4:	687b      	ldr	r3, [r7, #4]
200004a6:	695b      	ldr	r3, [r3, #20]
200004a8:	b29b      	uxth	r3, r3
}
200004aa:	0018      	movs	r0, r3
200004ac:	46bd      	mov	sp, r7
200004ae:	b002      	add	sp, #8
200004b0:	bd80      	pop	{r7, pc}

200004b2 <GPIO_SetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
200004b2:	b580      	push	{r7, lr}
200004b4:	b082      	sub	sp, #8
200004b6:	af00      	add	r7, sp, #0
200004b8:	6078      	str	r0, [r7, #4]
200004ba:	000a      	movs	r2, r1
200004bc:	1cbb      	adds	r3, r7, #2
200004be:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRL = GPIO_Pin;
200004c0:	687b      	ldr	r3, [r7, #4]
200004c2:	1cba      	adds	r2, r7, #2
200004c4:	8812      	ldrh	r2, [r2, #0]
200004c6:	831a      	strh	r2, [r3, #24]
}
200004c8:	46c0      	nop			; (mov r8, r8)
200004ca:	46bd      	mov	sp, r7
200004cc:	b002      	add	sp, #8
200004ce:	bd80      	pop	{r7, pc}

200004d0 <GPIO_ResetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
200004d0:	b580      	push	{r7, lr}
200004d2:	b082      	sub	sp, #8
200004d4:	af00      	add	r7, sp, #0
200004d6:	6078      	str	r0, [r7, #4]
200004d8:	000a      	movs	r2, r1
200004da:	1cbb      	adds	r3, r7, #2
200004dc:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRH = GPIO_Pin;
200004de:	687b      	ldr	r3, [r7, #4]
200004e0:	1cba      	adds	r2, r7, #2
200004e2:	8812      	ldrh	r2, [r2, #0]
200004e4:	835a      	strh	r2, [r3, #26]
}
200004e6:	46c0      	nop			; (mov r8, r8)
200004e8:	46bd      	mov	sp, r7
200004ea:	b002      	add	sp, #8
200004ec:	bd80      	pop	{r7, pc}

200004ee <GPIO_WriteBit>:
  *            @arg Bit_RESET: to clear the port pin
  *            @arg Bit_SET: to set the port pin
  * @retval None
  */
void GPIO_WriteBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, BitAction BitVal)
{
200004ee:	b580      	push	{r7, lr}
200004f0:	b082      	sub	sp, #8
200004f2:	af00      	add	r7, sp, #0
200004f4:	6078      	str	r0, [r7, #4]
200004f6:	0008      	movs	r0, r1
200004f8:	0011      	movs	r1, r2
200004fa:	1cbb      	adds	r3, r7, #2
200004fc:	1c02      	adds	r2, r0, #0
200004fe:	801a      	strh	r2, [r3, #0]
20000500:	1c7b      	adds	r3, r7, #1
20000502:	1c0a      	adds	r2, r1, #0
20000504:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal));

  if (BitVal != Bit_RESET)
20000506:	1c7b      	adds	r3, r7, #1
20000508:	781b      	ldrb	r3, [r3, #0]
2000050a:	2b00      	cmp	r3, #0
2000050c:	d004      	beq.n	20000518 <GPIO_WriteBit+0x2a>
  {
    GPIOx->BSRRL = GPIO_Pin;
2000050e:	687b      	ldr	r3, [r7, #4]
20000510:	1cba      	adds	r2, r7, #2
20000512:	8812      	ldrh	r2, [r2, #0]
20000514:	831a      	strh	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRRH = GPIO_Pin ;
  }
}
20000516:	e003      	b.n	20000520 <GPIO_WriteBit+0x32>
    GPIOx->BSRRH = GPIO_Pin ;
20000518:	687b      	ldr	r3, [r7, #4]
2000051a:	1cba      	adds	r2, r7, #2
2000051c:	8812      	ldrh	r2, [r2, #0]
2000051e:	835a      	strh	r2, [r3, #26]
}
20000520:	46c0      	nop			; (mov r8, r8)
20000522:	46bd      	mov	sp, r7
20000524:	b002      	add	sp, #8
20000526:	bd80      	pop	{r7, pc}

20000528 <GPIO_Write>:
  *                      x can be (A, B, C, D and H) to select the GPIO peripheral for STM32F401xx devices. 
  * @param  PortVal: specifies the value to be written to the port output data register.
  * @retval None
  */
void GPIO_Write(GPIO_TypeDef* GPIOx, uint16_t PortVal)
{
20000528:	b580      	push	{r7, lr}
2000052a:	b082      	sub	sp, #8
2000052c:	af00      	add	r7, sp, #0
2000052e:	6078      	str	r0, [r7, #4]
20000530:	000a      	movs	r2, r1
20000532:	1cbb      	adds	r3, r7, #2
20000534:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR = PortVal;
20000536:	1cbb      	adds	r3, r7, #2
20000538:	881a      	ldrh	r2, [r3, #0]
2000053a:	687b      	ldr	r3, [r7, #4]
2000053c:	615a      	str	r2, [r3, #20]
}
2000053e:	46c0      	nop			; (mov r8, r8)
20000540:	46bd      	mov	sp, r7
20000542:	b002      	add	sp, #8
20000544:	bd80      	pop	{r7, pc}

20000546 <GPIO_ToggleBits>:
  *                      x can be (A, B, C, D and H) to select the GPIO peripheral for STM32F401xx devices. 
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void GPIO_ToggleBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
20000546:	b580      	push	{r7, lr}
20000548:	b082      	sub	sp, #8
2000054a:	af00      	add	r7, sp, #0
2000054c:	6078      	str	r0, [r7, #4]
2000054e:	000a      	movs	r2, r1
20000550:	1cbb      	adds	r3, r7, #2
20000552:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR ^= GPIO_Pin;
20000554:	687b      	ldr	r3, [r7, #4]
20000556:	695a      	ldr	r2, [r3, #20]
20000558:	1cbb      	adds	r3, r7, #2
2000055a:	881b      	ldrh	r3, [r3, #0]
2000055c:	405a      	eors	r2, r3
2000055e:	687b      	ldr	r3, [r7, #4]
20000560:	615a      	str	r2, [r3, #20]
}
20000562:	46c0      	nop			; (mov r8, r8)
20000564:	46bd      	mov	sp, r7
20000566:	b002      	add	sp, #8
20000568:	bd80      	pop	{r7, pc}

2000056a <GPIO_PinAFConfig>:
  *            @arg GPIO_AF_LTDC: Connect LTDC pins to AF14 for STM32F429xx/439xx devices. 
  *            @arg GPIO_AF_EVENTOUT: Connect EVENTOUT pins to AF15
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
2000056a:	b580      	push	{r7, lr}
2000056c:	b084      	sub	sp, #16
2000056e:	af00      	add	r7, sp, #0
20000570:	6078      	str	r0, [r7, #4]
20000572:	0008      	movs	r0, r1
20000574:	0011      	movs	r1, r2
20000576:	1cbb      	adds	r3, r7, #2
20000578:	1c02      	adds	r2, r0, #0
2000057a:	801a      	strh	r2, [r3, #0]
2000057c:	1c7b      	adds	r3, r7, #1
2000057e:	1c0a      	adds	r2, r1, #0
20000580:	701a      	strb	r2, [r3, #0]
  uint32_t temp = 0x00;
20000582:	2300      	movs	r3, #0
20000584:	60fb      	str	r3, [r7, #12]
  uint32_t temp_2 = 0x00;
20000586:	2300      	movs	r3, #0
20000588:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
2000058a:	1c7b      	adds	r3, r7, #1
2000058c:	781a      	ldrb	r2, [r3, #0]
2000058e:	1cbb      	adds	r3, r7, #2
20000590:	881b      	ldrh	r3, [r3, #0]
20000592:	2107      	movs	r1, #7
20000594:	400b      	ands	r3, r1
20000596:	009b      	lsls	r3, r3, #2
20000598:	409a      	lsls	r2, r3
2000059a:	0013      	movs	r3, r2
2000059c:	60fb      	str	r3, [r7, #12]
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
2000059e:	1cbb      	adds	r3, r7, #2
200005a0:	881b      	ldrh	r3, [r3, #0]
200005a2:	08db      	lsrs	r3, r3, #3
200005a4:	b29b      	uxth	r3, r3
200005a6:	001a      	movs	r2, r3
200005a8:	687b      	ldr	r3, [r7, #4]
200005aa:	3208      	adds	r2, #8
200005ac:	0092      	lsls	r2, r2, #2
200005ae:	58d3      	ldr	r3, [r2, r3]
200005b0:	1cba      	adds	r2, r7, #2
200005b2:	8812      	ldrh	r2, [r2, #0]
200005b4:	2107      	movs	r1, #7
200005b6:	400a      	ands	r2, r1
200005b8:	0092      	lsls	r2, r2, #2
200005ba:	210f      	movs	r1, #15
200005bc:	4091      	lsls	r1, r2
200005be:	000a      	movs	r2, r1
200005c0:	43d2      	mvns	r2, r2
200005c2:	1cb9      	adds	r1, r7, #2
200005c4:	8809      	ldrh	r1, [r1, #0]
200005c6:	08c9      	lsrs	r1, r1, #3
200005c8:	b289      	uxth	r1, r1
200005ca:	0008      	movs	r0, r1
200005cc:	401a      	ands	r2, r3
200005ce:	0011      	movs	r1, r2
200005d0:	687b      	ldr	r3, [r7, #4]
200005d2:	0002      	movs	r2, r0
200005d4:	3208      	adds	r2, #8
200005d6:	0092      	lsls	r2, r2, #2
200005d8:	50d1      	str	r1, [r2, r3]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
200005da:	1cbb      	adds	r3, r7, #2
200005dc:	881b      	ldrh	r3, [r3, #0]
200005de:	08db      	lsrs	r3, r3, #3
200005e0:	b29b      	uxth	r3, r3
200005e2:	001a      	movs	r2, r3
200005e4:	687b      	ldr	r3, [r7, #4]
200005e6:	3208      	adds	r2, #8
200005e8:	0092      	lsls	r2, r2, #2
200005ea:	58d3      	ldr	r3, [r2, r3]
200005ec:	68fa      	ldr	r2, [r7, #12]
200005ee:	4313      	orrs	r3, r2
200005f0:	60bb      	str	r3, [r7, #8]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
200005f2:	1cbb      	adds	r3, r7, #2
200005f4:	881b      	ldrh	r3, [r3, #0]
200005f6:	08db      	lsrs	r3, r3, #3
200005f8:	b29b      	uxth	r3, r3
200005fa:	001a      	movs	r2, r3
200005fc:	687b      	ldr	r3, [r7, #4]
200005fe:	3208      	adds	r2, #8
20000600:	0092      	lsls	r2, r2, #2
20000602:	68b9      	ldr	r1, [r7, #8]
20000604:	50d1      	str	r1, [r2, r3]
}
20000606:	46c0      	nop			; (mov r8, r8)
20000608:	46bd      	mov	sp, r7
2000060a:	b004      	add	sp, #16
2000060c:	bd80      	pop	{r7, pc}
2000060e:	46c0      	nop			; (mov r8, r8)

20000610 <RCC_DeInit>:
  *            - LSI, LSE and RTC clocks 
  * @param  None
  * @retval None
  */
void RCC_DeInit(void)
{
20000610:	b580      	push	{r7, lr}
20000612:	af00      	add	r7, sp, #0
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
20000614:	4b14      	ldr	r3, [pc, #80]	; (20000668 <RCC_DeInit+0x58>)
20000616:	681a      	ldr	r2, [r3, #0]
20000618:	4b13      	ldr	r3, [pc, #76]	; (20000668 <RCC_DeInit+0x58>)
2000061a:	2101      	movs	r1, #1
2000061c:	430a      	orrs	r2, r1
2000061e:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
20000620:	4b11      	ldr	r3, [pc, #68]	; (20000668 <RCC_DeInit+0x58>)
20000622:	2200      	movs	r2, #0
20000624:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON, PLLON, PLLI2S and PLLSAI(STM32F42xxx/43xxx/446xx/469xx/479xx devices) bits */
  RCC->CR &= (uint32_t)0xEAF6FFFF;
20000626:	4b10      	ldr	r3, [pc, #64]	; (20000668 <RCC_DeInit+0x58>)
20000628:	681a      	ldr	r2, [r3, #0]
2000062a:	4b0f      	ldr	r3, [pc, #60]	; (20000668 <RCC_DeInit+0x58>)
2000062c:	490f      	ldr	r1, [pc, #60]	; (2000066c <RCC_DeInit+0x5c>)
2000062e:	400a      	ands	r2, r1
20000630:	601a      	str	r2, [r3, #0]
  
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
20000632:	4b0d      	ldr	r3, [pc, #52]	; (20000668 <RCC_DeInit+0x58>)
20000634:	4a0e      	ldr	r2, [pc, #56]	; (20000670 <RCC_DeInit+0x60>)
20000636:	605a      	str	r2, [r3, #4]

#if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F401xx) || defined(STM32F411xE) || defined(STM32F446xx) || defined(STM32F413_423xx) || defined(STM32F469_479xx)  
  /* Reset PLLI2SCFGR register */
  RCC->PLLI2SCFGR = 0x20003000;
20000638:	4a0b      	ldr	r2, [pc, #44]	; (20000668 <RCC_DeInit+0x58>)
2000063a:	2384      	movs	r3, #132	; 0x84
2000063c:	490d      	ldr	r1, [pc, #52]	; (20000674 <RCC_DeInit+0x64>)
2000063e:	50d1      	str	r1, [r2, r3]
#endif /* STM32F40_41xxx || STM32F427_437xx || STM32F429_439xx || STM32F401xx || STM32F411xE || STM32F446xx || STM32F413_423xx || STM32F469_479xx */

#if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F446xx) || defined(STM32F469_479xx) 
  /* Reset PLLSAICFGR register, only available for STM32F42xxx/43xxx/446xx/469xx/479xx devices */
  RCC->PLLSAICFGR = 0x24003000;
20000640:	4a09      	ldr	r2, [pc, #36]	; (20000668 <RCC_DeInit+0x58>)
20000642:	2388      	movs	r3, #136	; 0x88
20000644:	490c      	ldr	r1, [pc, #48]	; (20000678 <RCC_DeInit+0x68>)
20000646:	50d1      	str	r1, [r2, r3]
#endif /* STM32F40_41xxx || STM32F427_437xx || STM32F429_439xx || STM32F446xx || STM32F469_479xx */
  
  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
20000648:	4b07      	ldr	r3, [pc, #28]	; (20000668 <RCC_DeInit+0x58>)
2000064a:	681a      	ldr	r2, [r3, #0]
2000064c:	4b06      	ldr	r3, [pc, #24]	; (20000668 <RCC_DeInit+0x58>)
2000064e:	490b      	ldr	r1, [pc, #44]	; (2000067c <RCC_DeInit+0x6c>)
20000650:	400a      	ands	r2, r1
20000652:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
20000654:	4b04      	ldr	r3, [pc, #16]	; (20000668 <RCC_DeInit+0x58>)
20000656:	2200      	movs	r2, #0
20000658:	60da      	str	r2, [r3, #12]

  /* Disable Timers clock prescalers selection, only available for STM32F42/43xxx and STM32F413_423xx devices */
  RCC->DCKCFGR = 0x00000000;
2000065a:	4a03      	ldr	r2, [pc, #12]	; (20000668 <RCC_DeInit+0x58>)
2000065c:	238c      	movs	r3, #140	; 0x8c
2000065e:	2100      	movs	r1, #0
20000660:	50d1      	str	r1, [r2, r3]
  
#if defined(STM32F410xx) || defined(STM32F413_423xx)
  /* Disable LPTIM and FMPI2C clock prescalers selection, only available for STM32F410xx and STM32F413_423xx devices */
  RCC->DCKCFGR2 = 0x00000000;
#endif /* STM32F410xx || STM32F413_423xx */  
}
20000662:	46c0      	nop			; (mov r8, r8)
20000664:	46bd      	mov	sp, r7
20000666:	bd80      	pop	{r7, pc}
20000668:	40023800 	andmi	r3, r2, r0, lsl #16
2000066c:	eaf6ffff 	b	1fdc0670 <startup-0x23f990>
20000670:	24003010 	strcs	r3, [r0], #-16
20000674:	20003000 	andcs	r3, r0, r0
20000678:	24003000 	strcs	r3, [r0], #-0
2000067c:	fffbffff 			; <UNDEFINED> instruction: 0xfffbffff

20000680 <RCC_HSEConfig>:
  *            @arg RCC_HSE_ON: turn ON the HSE oscillator
  *            @arg RCC_HSE_Bypass: HSE oscillator bypassed with external clock
  * @retval None
  */
void RCC_HSEConfig(uint8_t RCC_HSE)
{
20000680:	b580      	push	{r7, lr}
20000682:	b082      	sub	sp, #8
20000684:	af00      	add	r7, sp, #0
20000686:	0002      	movs	r2, r0
20000688:	1dfb      	adds	r3, r7, #7
2000068a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_HSE(RCC_HSE));

  /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
  *(__IO uint8_t *) CR_BYTE3_ADDRESS = RCC_HSE_OFF;
2000068c:	4b05      	ldr	r3, [pc, #20]	; (200006a4 <RCC_HSEConfig+0x24>)
2000068e:	2200      	movs	r2, #0
20000690:	701a      	strb	r2, [r3, #0]

  /* Set the new HSE configuration -------------------------------------------*/
  *(__IO uint8_t *) CR_BYTE3_ADDRESS = RCC_HSE;
20000692:	4a04      	ldr	r2, [pc, #16]	; (200006a4 <RCC_HSEConfig+0x24>)
20000694:	1dfb      	adds	r3, r7, #7
20000696:	781b      	ldrb	r3, [r3, #0]
20000698:	7013      	strb	r3, [r2, #0]
}
2000069a:	46c0      	nop			; (mov r8, r8)
2000069c:	46bd      	mov	sp, r7
2000069e:	b002      	add	sp, #8
200006a0:	bd80      	pop	{r7, pc}
200006a2:	46c0      	nop			; (mov r8, r8)
200006a4:	40023802 	andmi	r3, r2, r2, lsl #16

200006a8 <RCC_WaitForHSEStartUp>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: HSE oscillator is stable and ready to use
  *          - ERROR: HSE oscillator not yet ready
  */
ErrorStatus RCC_WaitForHSEStartUp(void)
{
200006a8:	b590      	push	{r4, r7, lr}
200006aa:	b083      	sub	sp, #12
200006ac:	af00      	add	r7, sp, #0
  __IO uint32_t startupcounter = 0;
200006ae:	2300      	movs	r3, #0
200006b0:	603b      	str	r3, [r7, #0]
  ErrorStatus status = ERROR;
200006b2:	1dfb      	adds	r3, r7, #7
200006b4:	2200      	movs	r2, #0
200006b6:	701a      	strb	r2, [r3, #0]
  FlagStatus hsestatus = RESET;
200006b8:	1dbb      	adds	r3, r7, #6
200006ba:	2200      	movs	r2, #0
200006bc:	701a      	strb	r2, [r3, #0]
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    hsestatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
200006be:	1dbc      	adds	r4, r7, #6
200006c0:	2031      	movs	r0, #49	; 0x31
200006c2:	f000 fd9b 	bl	200011fc <RCC_GetFlagStatus>
200006c6:	0003      	movs	r3, r0
200006c8:	7023      	strb	r3, [r4, #0]
    startupcounter++;
200006ca:	683b      	ldr	r3, [r7, #0]
200006cc:	3301      	adds	r3, #1
200006ce:	603b      	str	r3, [r7, #0]
  } while((startupcounter != HSE_STARTUP_TIMEOUT) && (hsestatus == RESET));
200006d0:	683a      	ldr	r2, [r7, #0]
200006d2:	23a0      	movs	r3, #160	; 0xa0
200006d4:	01db      	lsls	r3, r3, #7
200006d6:	429a      	cmp	r2, r3
200006d8:	d003      	beq.n	200006e2 <RCC_WaitForHSEStartUp+0x3a>
200006da:	1dbb      	adds	r3, r7, #6
200006dc:	781b      	ldrb	r3, [r3, #0]
200006de:	2b00      	cmp	r3, #0
200006e0:	d0ed      	beq.n	200006be <RCC_WaitForHSEStartUp+0x16>

  if (RCC_GetFlagStatus(RCC_FLAG_HSERDY) != RESET)
200006e2:	2031      	movs	r0, #49	; 0x31
200006e4:	f000 fd8a 	bl	200011fc <RCC_GetFlagStatus>
200006e8:	1e03      	subs	r3, r0, #0
200006ea:	d003      	beq.n	200006f4 <RCC_WaitForHSEStartUp+0x4c>
  {
    status = SUCCESS;
200006ec:	1dfb      	adds	r3, r7, #7
200006ee:	2201      	movs	r2, #1
200006f0:	701a      	strb	r2, [r3, #0]
200006f2:	e002      	b.n	200006fa <RCC_WaitForHSEStartUp+0x52>
  }
  else
  {
    status = ERROR;
200006f4:	1dfb      	adds	r3, r7, #7
200006f6:	2200      	movs	r2, #0
200006f8:	701a      	strb	r2, [r3, #0]
  }
  return (status);
200006fa:	1dfb      	adds	r3, r7, #7
200006fc:	781b      	ldrb	r3, [r3, #0]
}
200006fe:	0018      	movs	r0, r3
20000700:	46bd      	mov	sp, r7
20000702:	b003      	add	sp, #12
20000704:	bd90      	pop	{r4, r7, pc}

20000706 <RCC_AdjustHSICalibrationValue>:
  * @param  HSICalibrationValue: specifies the calibration trimming value.
  *         This parameter must be a number between 0 and 0x1F.
  * @retval None
  */
void RCC_AdjustHSICalibrationValue(uint8_t HSICalibrationValue)
{
20000706:	b580      	push	{r7, lr}
20000708:	b084      	sub	sp, #16
2000070a:	af00      	add	r7, sp, #0
2000070c:	0002      	movs	r2, r0
2000070e:	1dfb      	adds	r3, r7, #7
20000710:	701a      	strb	r2, [r3, #0]
  uint32_t tmpreg = 0;
20000712:	2300      	movs	r3, #0
20000714:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_CALIBRATION_VALUE(HSICalibrationValue));

  tmpreg = RCC->CR;
20000716:	4b0a      	ldr	r3, [pc, #40]	; (20000740 <RCC_AdjustHSICalibrationValue+0x3a>)
20000718:	681b      	ldr	r3, [r3, #0]
2000071a:	60fb      	str	r3, [r7, #12]

  /* Clear HSITRIM[4:0] bits */
  tmpreg &= ~RCC_CR_HSITRIM;
2000071c:	68fb      	ldr	r3, [r7, #12]
2000071e:	22f8      	movs	r2, #248	; 0xf8
20000720:	4393      	bics	r3, r2
20000722:	60fb      	str	r3, [r7, #12]

  /* Set the HSITRIM[4:0] bits according to HSICalibrationValue value */
  tmpreg |= (uint32_t)HSICalibrationValue << 3;
20000724:	1dfb      	adds	r3, r7, #7
20000726:	781b      	ldrb	r3, [r3, #0]
20000728:	00db      	lsls	r3, r3, #3
2000072a:	68fa      	ldr	r2, [r7, #12]
2000072c:	4313      	orrs	r3, r2
2000072e:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CR = tmpreg;
20000730:	4b03      	ldr	r3, [pc, #12]	; (20000740 <RCC_AdjustHSICalibrationValue+0x3a>)
20000732:	68fa      	ldr	r2, [r7, #12]
20000734:	601a      	str	r2, [r3, #0]
}
20000736:	46c0      	nop			; (mov r8, r8)
20000738:	46bd      	mov	sp, r7
2000073a:	b004      	add	sp, #16
2000073c:	bd80      	pop	{r7, pc}
2000073e:	46c0      	nop			; (mov r8, r8)
20000740:	40023800 	andmi	r3, r2, r0, lsl #16

20000744 <RCC_HSICmd>:
  * @note   When the HSI is stopped, HSIRDY flag goes low after 6 HSI oscillator
  *         clock cycles.  
  * @retval None
  */
void RCC_HSICmd(FunctionalState NewState)
{
20000744:	b580      	push	{r7, lr}
20000746:	b082      	sub	sp, #8
20000748:	af00      	add	r7, sp, #0
2000074a:	0002      	movs	r2, r0
2000074c:	1dfb      	adds	r3, r7, #7
2000074e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CR_HSION_BB = (uint32_t)NewState;
20000750:	4b03      	ldr	r3, [pc, #12]	; (20000760 <RCC_HSICmd+0x1c>)
20000752:	1dfa      	adds	r2, r7, #7
20000754:	7812      	ldrb	r2, [r2, #0]
20000756:	601a      	str	r2, [r3, #0]
}
20000758:	46c0      	nop			; (mov r8, r8)
2000075a:	46bd      	mov	sp, r7
2000075c:	b002      	add	sp, #8
2000075e:	bd80      	pop	{r7, pc}
20000760:	42470000 	submi	r0, r7, #0

20000764 <RCC_LSEConfig>:
  *            @arg RCC_LSE_ON: turn ON the LSE oscillator
  *            @arg RCC_LSE_Bypass: LSE oscillator bypassed with external clock
  * @retval None
  */
void RCC_LSEConfig(uint8_t RCC_LSE)
{
20000764:	b580      	push	{r7, lr}
20000766:	b082      	sub	sp, #8
20000768:	af00      	add	r7, sp, #0
2000076a:	0002      	movs	r2, r0
2000076c:	1dfb      	adds	r3, r7, #7
2000076e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_LSE(RCC_LSE));

  /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
  /* Reset LSEON bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
20000770:	4b0c      	ldr	r3, [pc, #48]	; (200007a4 <RCC_LSEConfig+0x40>)
20000772:	2200      	movs	r2, #0
20000774:	701a      	strb	r2, [r3, #0]

  /* Reset LSEBYP bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
20000776:	4b0b      	ldr	r3, [pc, #44]	; (200007a4 <RCC_LSEConfig+0x40>)
20000778:	2200      	movs	r2, #0
2000077a:	701a      	strb	r2, [r3, #0]

  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch (RCC_LSE)
2000077c:	1dfb      	adds	r3, r7, #7
2000077e:	781b      	ldrb	r3, [r3, #0]
20000780:	2b01      	cmp	r3, #1
20000782:	d002      	beq.n	2000078a <RCC_LSEConfig+0x26>
20000784:	2b04      	cmp	r3, #4
20000786:	d004      	beq.n	20000792 <RCC_LSEConfig+0x2e>
    case RCC_LSE_Bypass:
      /* Set LSEBYP and LSEON bits */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
      break;
    default:
      break;
20000788:	e007      	b.n	2000079a <RCC_LSEConfig+0x36>
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_ON;
2000078a:	4b06      	ldr	r3, [pc, #24]	; (200007a4 <RCC_LSEConfig+0x40>)
2000078c:	2201      	movs	r2, #1
2000078e:	701a      	strb	r2, [r3, #0]
      break;
20000790:	e003      	b.n	2000079a <RCC_LSEConfig+0x36>
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
20000792:	4b04      	ldr	r3, [pc, #16]	; (200007a4 <RCC_LSEConfig+0x40>)
20000794:	2205      	movs	r2, #5
20000796:	701a      	strb	r2, [r3, #0]
      break;
20000798:	46c0      	nop			; (mov r8, r8)
  }
}
2000079a:	46c0      	nop			; (mov r8, r8)
2000079c:	46bd      	mov	sp, r7
2000079e:	b002      	add	sp, #8
200007a0:	bd80      	pop	{r7, pc}
200007a2:	46c0      	nop			; (mov r8, r8)
200007a4:	40023870 	andmi	r3, r2, r0, ror r8

200007a8 <RCC_LSICmd>:
  * @note   When the LSI is stopped, LSIRDY flag goes low after 6 LSI oscillator
  *         clock cycles. 
  * @retval None
  */
void RCC_LSICmd(FunctionalState NewState)
{
200007a8:	b580      	push	{r7, lr}
200007aa:	b082      	sub	sp, #8
200007ac:	af00      	add	r7, sp, #0
200007ae:	0002      	movs	r2, r0
200007b0:	1dfb      	adds	r3, r7, #7
200007b2:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CSR_LSION_BB = (uint32_t)NewState;
200007b4:	4b03      	ldr	r3, [pc, #12]	; (200007c4 <RCC_LSICmd+0x1c>)
200007b6:	1dfa      	adds	r2, r7, #7
200007b8:	7812      	ldrb	r2, [r2, #0]
200007ba:	601a      	str	r2, [r3, #0]
}
200007bc:	46c0      	nop			; (mov r8, r8)
200007be:	46bd      	mov	sp, r7
200007c0:	b002      	add	sp, #8
200007c2:	bd80      	pop	{r7, pc}
200007c4:	42470e80 	submi	r0, r7, #128, 28	; 0x800

200007c8 <RCC_PLLConfig>:
  *         correctly.
  *   
  * @retval None
  */
void RCC_PLLConfig(uint32_t RCC_PLLSource, uint32_t PLLM, uint32_t PLLN, uint32_t PLLP, uint32_t PLLQ)
{
200007c8:	b580      	push	{r7, lr}
200007ca:	b084      	sub	sp, #16
200007cc:	af00      	add	r7, sp, #0
200007ce:	60f8      	str	r0, [r7, #12]
200007d0:	60b9      	str	r1, [r7, #8]
200007d2:	607a      	str	r2, [r7, #4]
200007d4:	603b      	str	r3, [r7, #0]
  assert_param(IS_RCC_PLLM_VALUE(PLLM));
  assert_param(IS_RCC_PLLN_VALUE(PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLP));
  assert_param(IS_RCC_PLLQ_VALUE(PLLQ));

  RCC->PLLCFGR = PLLM | (PLLN << 6) | (((PLLP >> 1) -1) << 16) | (RCC_PLLSource) |
200007d6:	687b      	ldr	r3, [r7, #4]
200007d8:	019a      	lsls	r2, r3, #6
200007da:	68bb      	ldr	r3, [r7, #8]
200007dc:	431a      	orrs	r2, r3
200007de:	683b      	ldr	r3, [r7, #0]
200007e0:	085b      	lsrs	r3, r3, #1
200007e2:	3b01      	subs	r3, #1
200007e4:	041b      	lsls	r3, r3, #16
200007e6:	431a      	orrs	r2, r3
200007e8:	68fb      	ldr	r3, [r7, #12]
200007ea:	431a      	orrs	r2, r3
200007ec:	0011      	movs	r1, r2
                 (PLLQ << 24);
200007ee:	69bb      	ldr	r3, [r7, #24]
200007f0:	061a      	lsls	r2, r3, #24
  RCC->PLLCFGR = PLLM | (PLLN << 6) | (((PLLP >> 1) -1) << 16) | (RCC_PLLSource) |
200007f2:	4b03      	ldr	r3, [pc, #12]	; (20000800 <RCC_PLLConfig+0x38>)
200007f4:	430a      	orrs	r2, r1
200007f6:	605a      	str	r2, [r3, #4]
}
200007f8:	46c0      	nop			; (mov r8, r8)
200007fa:	46bd      	mov	sp, r7
200007fc:	b004      	add	sp, #16
200007fe:	bd80      	pop	{r7, pc}
20000800:	40023800 	andmi	r3, r2, r0, lsl #16

20000804 <RCC_PLLCmd>:
  * @note   The main PLL is disabled by hardware when entering STOP and STANDBY modes.
  * @param  NewState: new state of the main PLL. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_PLLCmd(FunctionalState NewState)
{
20000804:	b580      	push	{r7, lr}
20000806:	b082      	sub	sp, #8
20000808:	af00      	add	r7, sp, #0
2000080a:	0002      	movs	r2, r0
2000080c:	1dfb      	adds	r3, r7, #7
2000080e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_PLLON_BB = (uint32_t)NewState;
20000810:	4b03      	ldr	r3, [pc, #12]	; (20000820 <RCC_PLLCmd+0x1c>)
20000812:	1dfa      	adds	r2, r7, #7
20000814:	7812      	ldrb	r2, [r2, #0]
20000816:	601a      	str	r2, [r3, #0]
}
20000818:	46c0      	nop			; (mov r8, r8)
2000081a:	46bd      	mov	sp, r7
2000081c:	b002      	add	sp, #8
2000081e:	bd80      	pop	{r7, pc}
20000820:	42470060 	submi	r0, r7, #96	; 0x60

20000824 <RCC_PLLI2SConfig>:
  *         on the I2S clock frequency.
  *   
  * @retval None
  */
void RCC_PLLI2SConfig(uint32_t PLLI2SN, uint32_t PLLI2SR)
{
20000824:	b580      	push	{r7, lr}
20000826:	b082      	sub	sp, #8
20000828:	af00      	add	r7, sp, #0
2000082a:	6078      	str	r0, [r7, #4]
2000082c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RCC_PLLI2SN_VALUE(PLLI2SN));
  assert_param(IS_RCC_PLLI2SR_VALUE(PLLI2SR));

  RCC->PLLI2SCFGR = (PLLI2SN << 6) | (PLLI2SR << 28);
2000082e:	687b      	ldr	r3, [r7, #4]
20000830:	019a      	lsls	r2, r3, #6
20000832:	683b      	ldr	r3, [r7, #0]
20000834:	071b      	lsls	r3, r3, #28
20000836:	4904      	ldr	r1, [pc, #16]	; (20000848 <RCC_PLLI2SConfig+0x24>)
20000838:	4313      	orrs	r3, r2
2000083a:	2284      	movs	r2, #132	; 0x84
2000083c:	508b      	str	r3, [r1, r2]
}
2000083e:	46c0      	nop			; (mov r8, r8)
20000840:	46bd      	mov	sp, r7
20000842:	b002      	add	sp, #8
20000844:	bd80      	pop	{r7, pc}
20000846:	46c0      	nop			; (mov r8, r8)
20000848:	40023800 	andmi	r3, r2, r0, lsl #16

2000084c <RCC_PLLI2SCmd>:
  * @note   The PLLI2S is disabled by hardware when entering STOP and STANDBY modes.  
  * @param  NewState: new state of the PLLI2S. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_PLLI2SCmd(FunctionalState NewState)
{
2000084c:	b580      	push	{r7, lr}
2000084e:	b082      	sub	sp, #8
20000850:	af00      	add	r7, sp, #0
20000852:	0002      	movs	r2, r0
20000854:	1dfb      	adds	r3, r7, #7
20000856:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_PLLI2SON_BB = (uint32_t)NewState;
20000858:	4b03      	ldr	r3, [pc, #12]	; (20000868 <RCC_PLLI2SCmd+0x1c>)
2000085a:	1dfa      	adds	r2, r7, #7
2000085c:	7812      	ldrb	r2, [r2, #0]
2000085e:	601a      	str	r2, [r3, #0]
}
20000860:	46c0      	nop			; (mov r8, r8)
20000862:	46bd      	mov	sp, r7
20000864:	b002      	add	sp, #8
20000866:	bd80      	pop	{r7, pc}
20000868:	42470068 	submi	r0, r7, #104	; 0x68

2000086c <RCC_PLLSAIConfig>:
  *          This parameter must be a number between 2 and 7.
  *   
  * @retval None
  */
void RCC_PLLSAIConfig(uint32_t PLLSAIN, uint32_t PLLSAIQ, uint32_t PLLSAIR)
{
2000086c:	b580      	push	{r7, lr}
2000086e:	b084      	sub	sp, #16
20000870:	af00      	add	r7, sp, #0
20000872:	60f8      	str	r0, [r7, #12]
20000874:	60b9      	str	r1, [r7, #8]
20000876:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_PLLSAIN_VALUE(PLLSAIN));
  assert_param(IS_RCC_PLLSAIR_VALUE(PLLSAIR));
  assert_param(IS_RCC_PLLSAIQ_VALUE(PLLSAIQ));
  
  RCC->PLLSAICFGR = (PLLSAIN << 6) | (PLLSAIQ << 24) | (PLLSAIR << 28);
20000878:	68fb      	ldr	r3, [r7, #12]
2000087a:	019a      	lsls	r2, r3, #6
2000087c:	68bb      	ldr	r3, [r7, #8]
2000087e:	061b      	lsls	r3, r3, #24
20000880:	431a      	orrs	r2, r3
20000882:	687b      	ldr	r3, [r7, #4]
20000884:	071b      	lsls	r3, r3, #28
20000886:	4904      	ldr	r1, [pc, #16]	; (20000898 <RCC_PLLSAIConfig+0x2c>)
20000888:	4313      	orrs	r3, r2
2000088a:	2288      	movs	r2, #136	; 0x88
2000088c:	508b      	str	r3, [r1, r2]
}
2000088e:	46c0      	nop			; (mov r8, r8)
20000890:	46bd      	mov	sp, r7
20000892:	b004      	add	sp, #16
20000894:	bd80      	pop	{r7, pc}
20000896:	46c0      	nop			; (mov r8, r8)
20000898:	40023800 	andmi	r3, r2, r0, lsl #16

2000089c <RCC_PLLSAICmd>:
  * @note   The PLLSAI is disabled by hardware when entering STOP and STANDBY modes.  
  * @param  NewState: new state of the PLLSAI. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_PLLSAICmd(FunctionalState NewState)
{
2000089c:	b580      	push	{r7, lr}
2000089e:	b082      	sub	sp, #8
200008a0:	af00      	add	r7, sp, #0
200008a2:	0002      	movs	r2, r0
200008a4:	1dfb      	adds	r3, r7, #7
200008a6:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_PLLSAION_BB = (uint32_t)NewState;
200008a8:	4b03      	ldr	r3, [pc, #12]	; (200008b8 <RCC_PLLSAICmd+0x1c>)
200008aa:	1dfa      	adds	r2, r7, #7
200008ac:	7812      	ldrb	r2, [r2, #0]
200008ae:	601a      	str	r2, [r3, #0]
}
200008b0:	46c0      	nop			; (mov r8, r8)
200008b2:	46bd      	mov	sp, r7
200008b4:	b002      	add	sp, #8
200008b6:	bd80      	pop	{r7, pc}
200008b8:	42470070 	submi	r0, r7, #112	; 0x70

200008bc <RCC_ClockSecuritySystemCmd>:
  * @param  NewState: new state of the Clock Security System.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_ClockSecuritySystemCmd(FunctionalState NewState)
{
200008bc:	b580      	push	{r7, lr}
200008be:	b082      	sub	sp, #8
200008c0:	af00      	add	r7, sp, #0
200008c2:	0002      	movs	r2, r0
200008c4:	1dfb      	adds	r3, r7, #7
200008c6:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_CSSON_BB = (uint32_t)NewState;
200008c8:	4b03      	ldr	r3, [pc, #12]	; (200008d8 <RCC_ClockSecuritySystemCmd+0x1c>)
200008ca:	1dfa      	adds	r2, r7, #7
200008cc:	7812      	ldrb	r2, [r2, #0]
200008ce:	601a      	str	r2, [r3, #0]
}
200008d0:	46c0      	nop			; (mov r8, r8)
200008d2:	46bd      	mov	sp, r7
200008d4:	b002      	add	sp, #8
200008d6:	bd80      	pop	{r7, pc}
200008d8:	4247004c 	submi	r0, r7, #76	; 0x4c

200008dc <RCC_MCO1Config>:
  *            @arg RCC_MCO1Div_4: division by 4 applied to MCO1 clock
  *            @arg RCC_MCO1Div_5: division by 5 applied to MCO1 clock
  * @retval None
  */
void RCC_MCO1Config(uint32_t RCC_MCO1Source, uint32_t RCC_MCO1Div)
{
200008dc:	b580      	push	{r7, lr}
200008de:	b084      	sub	sp, #16
200008e0:	af00      	add	r7, sp, #0
200008e2:	6078      	str	r0, [r7, #4]
200008e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
200008e6:	2300      	movs	r3, #0
200008e8:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_MCO1SOURCE(RCC_MCO1Source));
  assert_param(IS_RCC_MCO1DIV(RCC_MCO1Div));  

  tmpreg = RCC->CFGR;
200008ea:	4b0a      	ldr	r3, [pc, #40]	; (20000914 <RCC_MCO1Config+0x38>)
200008ec:	689b      	ldr	r3, [r3, #8]
200008ee:	60fb      	str	r3, [r7, #12]

  /* Clear MCO1[1:0] and MCO1PRE[2:0] bits */
  tmpreg &= CFGR_MCO1_RESET_MASK;
200008f0:	68fb      	ldr	r3, [r7, #12]
200008f2:	4a09      	ldr	r2, [pc, #36]	; (20000918 <RCC_MCO1Config+0x3c>)
200008f4:	4013      	ands	r3, r2
200008f6:	60fb      	str	r3, [r7, #12]

  /* Select MCO1 clock source and prescaler */
  tmpreg |= RCC_MCO1Source | RCC_MCO1Div;
200008f8:	687a      	ldr	r2, [r7, #4]
200008fa:	683b      	ldr	r3, [r7, #0]
200008fc:	4313      	orrs	r3, r2
200008fe:	68fa      	ldr	r2, [r7, #12]
20000900:	4313      	orrs	r3, r2
20000902:	60fb      	str	r3, [r7, #12]
  
  /* Store the new value */
  RCC->CFGR = tmpreg;
20000904:	4b03      	ldr	r3, [pc, #12]	; (20000914 <RCC_MCO1Config+0x38>)
20000906:	68fa      	ldr	r2, [r7, #12]
20000908:	609a      	str	r2, [r3, #8]

#if defined(STM32F410xx)
  RCC_MCO1Cmd(ENABLE);
#endif /* STM32F410xx */   
}
2000090a:	46c0      	nop			; (mov r8, r8)
2000090c:	46bd      	mov	sp, r7
2000090e:	b004      	add	sp, #16
20000910:	bd80      	pop	{r7, pc}
20000912:	46c0      	nop			; (mov r8, r8)
20000914:	40023800 	andmi	r3, r2, r0, lsl #16
20000918:	f89fffff 			; <UNDEFINED> instruction: 0xf89fffff

2000091c <RCC_MCO2Config>:
  * @note  For STM32F410xx devices to output I2SCLK clock on MCO2 you should have
  *        at last one of the SPI clocks enabled (SPI1, SPI2 or SPI5).
  * @retval None
  */
void RCC_MCO2Config(uint32_t RCC_MCO2Source, uint32_t RCC_MCO2Div)
{
2000091c:	b580      	push	{r7, lr}
2000091e:	b084      	sub	sp, #16
20000920:	af00      	add	r7, sp, #0
20000922:	6078      	str	r0, [r7, #4]
20000924:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
20000926:	2300      	movs	r3, #0
20000928:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_MCO2SOURCE(RCC_MCO2Source));
  assert_param(IS_RCC_MCO2DIV(RCC_MCO2Div));
  
  tmpreg = RCC->CFGR;
2000092a:	4b0a      	ldr	r3, [pc, #40]	; (20000954 <RCC_MCO2Config+0x38>)
2000092c:	689b      	ldr	r3, [r3, #8]
2000092e:	60fb      	str	r3, [r7, #12]
  
  /* Clear MCO2 and MCO2PRE[2:0] bits */
  tmpreg &= CFGR_MCO2_RESET_MASK;
20000930:	68fb      	ldr	r3, [r7, #12]
20000932:	015b      	lsls	r3, r3, #5
20000934:	095b      	lsrs	r3, r3, #5
20000936:	60fb      	str	r3, [r7, #12]

  /* Select MCO2 clock source and prescaler */
  tmpreg |= RCC_MCO2Source | RCC_MCO2Div;
20000938:	687a      	ldr	r2, [r7, #4]
2000093a:	683b      	ldr	r3, [r7, #0]
2000093c:	4313      	orrs	r3, r2
2000093e:	68fa      	ldr	r2, [r7, #12]
20000940:	4313      	orrs	r3, r2
20000942:	60fb      	str	r3, [r7, #12]
  
  /* Store the new value */
  RCC->CFGR = tmpreg;
20000944:	4b03      	ldr	r3, [pc, #12]	; (20000954 <RCC_MCO2Config+0x38>)
20000946:	68fa      	ldr	r2, [r7, #12]
20000948:	609a      	str	r2, [r3, #8]

#if defined(STM32F410xx)
  RCC_MCO2Cmd(ENABLE);
#endif /* STM32F410xx */   
}
2000094a:	46c0      	nop			; (mov r8, r8)
2000094c:	46bd      	mov	sp, r7
2000094e:	b004      	add	sp, #16
20000950:	bd80      	pop	{r7, pc}
20000952:	46c0      	nop			; (mov r8, r8)
20000954:	40023800 	andmi	r3, r2, r0, lsl #16

20000958 <RCC_SYSCLKConfig>:
  *            @arg RCC_SYSCLKSource_PLLCLK: PLL selected as system clock source (RCC_SYSCLKSource_PLLPCLK for STM32F446xx devices)
  *            @arg RCC_SYSCLKSource_PLLRCLK: PLL R selected as system clock source only for STM32F412xG, STM32F413_423xx and STM32F446xx devices
  * @retval None
  */
void RCC_SYSCLKConfig(uint32_t RCC_SYSCLKSource)
{
20000958:	b580      	push	{r7, lr}
2000095a:	b084      	sub	sp, #16
2000095c:	af00      	add	r7, sp, #0
2000095e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
20000960:	2300      	movs	r3, #0
20000962:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_SYSCLK_SOURCE(RCC_SYSCLKSource));

  tmpreg = RCC->CFGR;
20000964:	4b08      	ldr	r3, [pc, #32]	; (20000988 <RCC_SYSCLKConfig+0x30>)
20000966:	689b      	ldr	r3, [r3, #8]
20000968:	60fb      	str	r3, [r7, #12]

  /* Clear SW[1:0] bits */
  tmpreg &= ~RCC_CFGR_SW;
2000096a:	68fb      	ldr	r3, [r7, #12]
2000096c:	2203      	movs	r2, #3
2000096e:	4393      	bics	r3, r2
20000970:	60fb      	str	r3, [r7, #12]

  /* Set SW[1:0] bits according to RCC_SYSCLKSource value */
  tmpreg |= RCC_SYSCLKSource;
20000972:	68fa      	ldr	r2, [r7, #12]
20000974:	687b      	ldr	r3, [r7, #4]
20000976:	4313      	orrs	r3, r2
20000978:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;
2000097a:	4b03      	ldr	r3, [pc, #12]	; (20000988 <RCC_SYSCLKConfig+0x30>)
2000097c:	68fa      	ldr	r2, [r7, #12]
2000097e:	609a      	str	r2, [r3, #8]
}
20000980:	46c0      	nop			; (mov r8, r8)
20000982:	46bd      	mov	sp, r7
20000984:	b004      	add	sp, #16
20000986:	bd80      	pop	{r7, pc}
20000988:	40023800 	andmi	r3, r2, r0, lsl #16

2000098c <RCC_GetSYSCLKSource>:
  *              - 0x04: HSE used as system clock
  *              - 0x08: PLL used as system clock (PLL P for STM32F446xx devices)
  *              - 0x0C: PLL R used as system clock (only for STM32F412xG, STM32F413_423xx and STM32F446xx devices)
  */
uint8_t RCC_GetSYSCLKSource(void)
{
2000098c:	b580      	push	{r7, lr}
2000098e:	af00      	add	r7, sp, #0
  return ((uint8_t)(RCC->CFGR & RCC_CFGR_SWS));
20000990:	4b04      	ldr	r3, [pc, #16]	; (200009a4 <RCC_GetSYSCLKSource+0x18>)
20000992:	689b      	ldr	r3, [r3, #8]
20000994:	b2db      	uxtb	r3, r3
20000996:	220c      	movs	r2, #12
20000998:	4013      	ands	r3, r2
2000099a:	b2db      	uxtb	r3, r3
}
2000099c:	0018      	movs	r0, r3
2000099e:	46bd      	mov	sp, r7
200009a0:	bd80      	pop	{r7, pc}
200009a2:	46c0      	nop			; (mov r8, r8)
200009a4:	40023800 	andmi	r3, r2, r0, lsl #16

200009a8 <RCC_HCLKConfig>:
  *            @arg RCC_SYSCLK_Div256: AHB clock = SYSCLK/256
  *            @arg RCC_SYSCLK_Div512: AHB clock = SYSCLK/512
  * @retval None
  */
void RCC_HCLKConfig(uint32_t RCC_SYSCLK)
{
200009a8:	b580      	push	{r7, lr}
200009aa:	b084      	sub	sp, #16
200009ac:	af00      	add	r7, sp, #0
200009ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
200009b0:	2300      	movs	r3, #0
200009b2:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_HCLK(RCC_SYSCLK));

  tmpreg = RCC->CFGR;
200009b4:	4b08      	ldr	r3, [pc, #32]	; (200009d8 <RCC_HCLKConfig+0x30>)
200009b6:	689b      	ldr	r3, [r3, #8]
200009b8:	60fb      	str	r3, [r7, #12]

  /* Clear HPRE[3:0] bits */
  tmpreg &= ~RCC_CFGR_HPRE;
200009ba:	68fb      	ldr	r3, [r7, #12]
200009bc:	22f0      	movs	r2, #240	; 0xf0
200009be:	4393      	bics	r3, r2
200009c0:	60fb      	str	r3, [r7, #12]

  /* Set HPRE[3:0] bits according to RCC_SYSCLK value */
  tmpreg |= RCC_SYSCLK;
200009c2:	68fa      	ldr	r2, [r7, #12]
200009c4:	687b      	ldr	r3, [r7, #4]
200009c6:	4313      	orrs	r3, r2
200009c8:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;
200009ca:	4b03      	ldr	r3, [pc, #12]	; (200009d8 <RCC_HCLKConfig+0x30>)
200009cc:	68fa      	ldr	r2, [r7, #12]
200009ce:	609a      	str	r2, [r3, #8]
}
200009d0:	46c0      	nop			; (mov r8, r8)
200009d2:	46bd      	mov	sp, r7
200009d4:	b004      	add	sp, #16
200009d6:	bd80      	pop	{r7, pc}
200009d8:	40023800 	andmi	r3, r2, r0, lsl #16

200009dc <RCC_PCLK1Config>:
  *            @arg RCC_HCLK_Div8:  APB1 clock = HCLK/8
  *            @arg RCC_HCLK_Div16: APB1 clock = HCLK/16
  * @retval None
  */
void RCC_PCLK1Config(uint32_t RCC_HCLK)
{
200009dc:	b580      	push	{r7, lr}
200009de:	b084      	sub	sp, #16
200009e0:	af00      	add	r7, sp, #0
200009e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
200009e4:	2300      	movs	r3, #0
200009e6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));

  tmpreg = RCC->CFGR;
200009e8:	4b08      	ldr	r3, [pc, #32]	; (20000a0c <RCC_PCLK1Config+0x30>)
200009ea:	689b      	ldr	r3, [r3, #8]
200009ec:	60fb      	str	r3, [r7, #12]

  /* Clear PPRE1[2:0] bits */
  tmpreg &= ~RCC_CFGR_PPRE1;
200009ee:	68fb      	ldr	r3, [r7, #12]
200009f0:	4a07      	ldr	r2, [pc, #28]	; (20000a10 <RCC_PCLK1Config+0x34>)
200009f2:	4013      	ands	r3, r2
200009f4:	60fb      	str	r3, [r7, #12]

  /* Set PPRE1[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK;
200009f6:	68fa      	ldr	r2, [r7, #12]
200009f8:	687b      	ldr	r3, [r7, #4]
200009fa:	4313      	orrs	r3, r2
200009fc:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;
200009fe:	4b03      	ldr	r3, [pc, #12]	; (20000a0c <RCC_PCLK1Config+0x30>)
20000a00:	68fa      	ldr	r2, [r7, #12]
20000a02:	609a      	str	r2, [r3, #8]
}
20000a04:	46c0      	nop			; (mov r8, r8)
20000a06:	46bd      	mov	sp, r7
20000a08:	b004      	add	sp, #16
20000a0a:	bd80      	pop	{r7, pc}
20000a0c:	40023800 	andmi	r3, r2, r0, lsl #16
20000a10:	ffffe3ff 			; <UNDEFINED> instruction: 0xffffe3ff

20000a14 <RCC_PCLK2Config>:
  *            @arg RCC_HCLK_Div8:  APB2 clock = HCLK/8
  *            @arg RCC_HCLK_Div16: APB2 clock = HCLK/16
  * @retval None
  */
void RCC_PCLK2Config(uint32_t RCC_HCLK)
{
20000a14:	b580      	push	{r7, lr}
20000a16:	b084      	sub	sp, #16
20000a18:	af00      	add	r7, sp, #0
20000a1a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
20000a1c:	2300      	movs	r3, #0
20000a1e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));

  tmpreg = RCC->CFGR;
20000a20:	4b09      	ldr	r3, [pc, #36]	; (20000a48 <RCC_PCLK2Config+0x34>)
20000a22:	689b      	ldr	r3, [r3, #8]
20000a24:	60fb      	str	r3, [r7, #12]

  /* Clear PPRE2[2:0] bits */
  tmpreg &= ~RCC_CFGR_PPRE2;
20000a26:	68fb      	ldr	r3, [r7, #12]
20000a28:	4a08      	ldr	r2, [pc, #32]	; (20000a4c <RCC_PCLK2Config+0x38>)
20000a2a:	4013      	ands	r3, r2
20000a2c:	60fb      	str	r3, [r7, #12]

  /* Set PPRE2[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK << 3;
20000a2e:	687b      	ldr	r3, [r7, #4]
20000a30:	00db      	lsls	r3, r3, #3
20000a32:	68fa      	ldr	r2, [r7, #12]
20000a34:	4313      	orrs	r3, r2
20000a36:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;
20000a38:	4b03      	ldr	r3, [pc, #12]	; (20000a48 <RCC_PCLK2Config+0x34>)
20000a3a:	68fa      	ldr	r2, [r7, #12]
20000a3c:	609a      	str	r2, [r3, #8]
}
20000a3e:	46c0      	nop			; (mov r8, r8)
20000a40:	46bd      	mov	sp, r7
20000a42:	b004      	add	sp, #16
20000a44:	bd80      	pop	{r7, pc}
20000a46:	46c0      	nop			; (mov r8, r8)
20000a48:	40023800 	andmi	r3, r2, r0, lsl #16
20000a4c:	ffff1fff 			; <UNDEFINED> instruction: 0xffff1fff

20000a50 <RCC_GetClocksFreq>:
  *         configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
20000a50:	b580      	push	{r7, lr}
20000a52:	b088      	sub	sp, #32
20000a54:	af00      	add	r7, sp, #0
20000a56:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
20000a58:	2300      	movs	r3, #0
20000a5a:	61bb      	str	r3, [r7, #24]
20000a5c:	2300      	movs	r3, #0
20000a5e:	617b      	str	r3, [r7, #20]
20000a60:	2300      	movs	r3, #0
20000a62:	61fb      	str	r3, [r7, #28]
20000a64:	2302      	movs	r3, #2
20000a66:	613b      	str	r3, [r7, #16]
20000a68:	2300      	movs	r3, #0
20000a6a:	60fb      	str	r3, [r7, #12]
20000a6c:	2302      	movs	r3, #2
20000a6e:	60bb      	str	r3, [r7, #8]
#if defined(STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F446xx)  
  uint32_t pllr = 2;
#endif /* STM32F412xG || STM32F413_423xx || STM32F446xx */
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
20000a70:	4b49      	ldr	r3, [pc, #292]	; (20000b98 <RCC_GetClocksFreq+0x148>)
20000a72:	689b      	ldr	r3, [r3, #8]
20000a74:	220c      	movs	r2, #12
20000a76:	4013      	ands	r3, r2
20000a78:	61bb      	str	r3, [r7, #24]
  
  switch (tmp)
20000a7a:	69bb      	ldr	r3, [r7, #24]
20000a7c:	2b04      	cmp	r3, #4
20000a7e:	d007      	beq.n	20000a90 <RCC_GetClocksFreq+0x40>
20000a80:	2b08      	cmp	r3, #8
20000a82:	d009      	beq.n	20000a98 <RCC_GetClocksFreq+0x48>
20000a84:	2b00      	cmp	r3, #0
20000a86:	d141      	bne.n	20000b0c <RCC_GetClocksFreq+0xbc>
  {
  case 0x00:  /* HSI used as system clock source */
    RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
20000a88:	687b      	ldr	r3, [r7, #4]
20000a8a:	4a44      	ldr	r2, [pc, #272]	; (20000b9c <RCC_GetClocksFreq+0x14c>)
20000a8c:	601a      	str	r2, [r3, #0]
    break;
20000a8e:	e041      	b.n	20000b14 <RCC_GetClocksFreq+0xc4>
  case 0x04:  /* HSE used as system clock  source */
    RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
20000a90:	687b      	ldr	r3, [r7, #4]
20000a92:	4a43      	ldr	r2, [pc, #268]	; (20000ba0 <RCC_GetClocksFreq+0x150>)
20000a94:	601a      	str	r2, [r3, #0]
    break;
20000a96:	e03d      	b.n	20000b14 <RCC_GetClocksFreq+0xc4>
  case 0x08:  /* PLL P used as system clock  source */
    
    /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLP
    */    
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
20000a98:	4b3f      	ldr	r3, [pc, #252]	; (20000b98 <RCC_GetClocksFreq+0x148>)
20000a9a:	685b      	ldr	r3, [r3, #4]
20000a9c:	0d9b      	lsrs	r3, r3, #22
20000a9e:	2201      	movs	r2, #1
20000aa0:	4013      	ands	r3, r2
20000aa2:	60fb      	str	r3, [r7, #12]
    pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
20000aa4:	4b3c      	ldr	r3, [pc, #240]	; (20000b98 <RCC_GetClocksFreq+0x148>)
20000aa6:	685b      	ldr	r3, [r3, #4]
20000aa8:	223f      	movs	r2, #63	; 0x3f
20000aaa:	4013      	ands	r3, r2
20000aac:	60bb      	str	r3, [r7, #8]
    
    if (pllsource != 0)
20000aae:	68fb      	ldr	r3, [r7, #12]
20000ab0:	2b00      	cmp	r3, #0
20000ab2:	d00d      	beq.n	20000ad0 <RCC_GetClocksFreq+0x80>
    {
      /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
20000ab4:	68b9      	ldr	r1, [r7, #8]
20000ab6:	483a      	ldr	r0, [pc, #232]	; (20000ba0 <RCC_GetClocksFreq+0x150>)
20000ab8:	f000 fc22 	bl	20001300 <__udivsi3>
20000abc:	0003      	movs	r3, r0
20000abe:	001a      	movs	r2, r3
20000ac0:	4b35      	ldr	r3, [pc, #212]	; (20000b98 <RCC_GetClocksFreq+0x148>)
20000ac2:	685b      	ldr	r3, [r3, #4]
20000ac4:	099b      	lsrs	r3, r3, #6
20000ac6:	05db      	lsls	r3, r3, #23
20000ac8:	0ddb      	lsrs	r3, r3, #23
20000aca:	4353      	muls	r3, r2
20000acc:	61fb      	str	r3, [r7, #28]
20000ace:	e00c      	b.n	20000aea <RCC_GetClocksFreq+0x9a>
    }
    else
    {
      /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
20000ad0:	68b9      	ldr	r1, [r7, #8]
20000ad2:	4832      	ldr	r0, [pc, #200]	; (20000b9c <RCC_GetClocksFreq+0x14c>)
20000ad4:	f000 fc14 	bl	20001300 <__udivsi3>
20000ad8:	0003      	movs	r3, r0
20000ada:	001a      	movs	r2, r3
20000adc:	4b2e      	ldr	r3, [pc, #184]	; (20000b98 <RCC_GetClocksFreq+0x148>)
20000ade:	685b      	ldr	r3, [r3, #4]
20000ae0:	099b      	lsrs	r3, r3, #6
20000ae2:	05db      	lsls	r3, r3, #23
20000ae4:	0ddb      	lsrs	r3, r3, #23
20000ae6:	4353      	muls	r3, r2
20000ae8:	61fb      	str	r3, [r7, #28]
    }
    
    pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
20000aea:	4b2b      	ldr	r3, [pc, #172]	; (20000b98 <RCC_GetClocksFreq+0x148>)
20000aec:	685b      	ldr	r3, [r3, #4]
20000aee:	0c1b      	lsrs	r3, r3, #16
20000af0:	2203      	movs	r2, #3
20000af2:	4013      	ands	r3, r2
20000af4:	3301      	adds	r3, #1
20000af6:	005b      	lsls	r3, r3, #1
20000af8:	613b      	str	r3, [r7, #16]
    RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
20000afa:	6939      	ldr	r1, [r7, #16]
20000afc:	69f8      	ldr	r0, [r7, #28]
20000afe:	f000 fbff 	bl	20001300 <__udivsi3>
20000b02:	0003      	movs	r3, r0
20000b04:	001a      	movs	r2, r3
20000b06:	687b      	ldr	r3, [r7, #4]
20000b08:	601a      	str	r2, [r3, #0]
    break;
20000b0a:	e003      	b.n	20000b14 <RCC_GetClocksFreq+0xc4>
    RCC_Clocks->SYSCLK_Frequency = pllvco/pllr;    
    break;
#endif /* STM32F412xG || STM32F413_423xx || STM32F446xx */
    
  default:
    RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
20000b0c:	687b      	ldr	r3, [r7, #4]
20000b0e:	4a23      	ldr	r2, [pc, #140]	; (20000b9c <RCC_GetClocksFreq+0x14c>)
20000b10:	601a      	str	r2, [r3, #0]
    break;
20000b12:	46c0      	nop			; (mov r8, r8)
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/
  
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
20000b14:	4b20      	ldr	r3, [pc, #128]	; (20000b98 <RCC_GetClocksFreq+0x148>)
20000b16:	689b      	ldr	r3, [r3, #8]
20000b18:	22f0      	movs	r2, #240	; 0xf0
20000b1a:	4013      	ands	r3, r2
20000b1c:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 4;
20000b1e:	69bb      	ldr	r3, [r7, #24]
20000b20:	091b      	lsrs	r3, r3, #4
20000b22:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
20000b24:	4a1f      	ldr	r2, [pc, #124]	; (20000ba4 <RCC_GetClocksFreq+0x154>)
20000b26:	69bb      	ldr	r3, [r7, #24]
20000b28:	18d3      	adds	r3, r2, r3
20000b2a:	781b      	ldrb	r3, [r3, #0]
20000b2c:	b2db      	uxtb	r3, r3
20000b2e:	617b      	str	r3, [r7, #20]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
20000b30:	687b      	ldr	r3, [r7, #4]
20000b32:	681a      	ldr	r2, [r3, #0]
20000b34:	697b      	ldr	r3, [r7, #20]
20000b36:	40da      	lsrs	r2, r3
20000b38:	687b      	ldr	r3, [r7, #4]
20000b3a:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
20000b3c:	4b16      	ldr	r3, [pc, #88]	; (20000b98 <RCC_GetClocksFreq+0x148>)
20000b3e:	689a      	ldr	r2, [r3, #8]
20000b40:	23e0      	movs	r3, #224	; 0xe0
20000b42:	015b      	lsls	r3, r3, #5
20000b44:	4013      	ands	r3, r2
20000b46:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 10;
20000b48:	69bb      	ldr	r3, [r7, #24]
20000b4a:	0a9b      	lsrs	r3, r3, #10
20000b4c:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
20000b4e:	4a15      	ldr	r2, [pc, #84]	; (20000ba4 <RCC_GetClocksFreq+0x154>)
20000b50:	69bb      	ldr	r3, [r7, #24]
20000b52:	18d3      	adds	r3, r2, r3
20000b54:	781b      	ldrb	r3, [r3, #0]
20000b56:	b2db      	uxtb	r3, r3
20000b58:	617b      	str	r3, [r7, #20]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
20000b5a:	687b      	ldr	r3, [r7, #4]
20000b5c:	685a      	ldr	r2, [r3, #4]
20000b5e:	697b      	ldr	r3, [r7, #20]
20000b60:	40da      	lsrs	r2, r3
20000b62:	687b      	ldr	r3, [r7, #4]
20000b64:	609a      	str	r2, [r3, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
20000b66:	4b0c      	ldr	r3, [pc, #48]	; (20000b98 <RCC_GetClocksFreq+0x148>)
20000b68:	689a      	ldr	r2, [r3, #8]
20000b6a:	23e0      	movs	r3, #224	; 0xe0
20000b6c:	021b      	lsls	r3, r3, #8
20000b6e:	4013      	ands	r3, r2
20000b70:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 13;
20000b72:	69bb      	ldr	r3, [r7, #24]
20000b74:	0b5b      	lsrs	r3, r3, #13
20000b76:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
20000b78:	4a0a      	ldr	r2, [pc, #40]	; (20000ba4 <RCC_GetClocksFreq+0x154>)
20000b7a:	69bb      	ldr	r3, [r7, #24]
20000b7c:	18d3      	adds	r3, r2, r3
20000b7e:	781b      	ldrb	r3, [r3, #0]
20000b80:	b2db      	uxtb	r3, r3
20000b82:	617b      	str	r3, [r7, #20]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
20000b84:	687b      	ldr	r3, [r7, #4]
20000b86:	685a      	ldr	r2, [r3, #4]
20000b88:	697b      	ldr	r3, [r7, #20]
20000b8a:	40da      	lsrs	r2, r3
20000b8c:	687b      	ldr	r3, [r7, #4]
20000b8e:	60da      	str	r2, [r3, #12]
}
20000b90:	46c0      	nop			; (mov r8, r8)
20000b92:	46bd      	mov	sp, r7
20000b94:	b008      	add	sp, #32
20000b96:	bd80      	pop	{r7, pc}
20000b98:	40023800 	andmi	r3, r2, r0, lsl #16
20000b9c:	00f42400 	rscseq	r2, r4, r0, lsl #8
20000ba0:	017d7840 	cmneq	sp, r0, asr #16
20000ba4:	20001418 	andcs	r1, r0, r8, lsl r4

20000ba8 <RCC_RTCCLKConfig>:
  *         RTC clock source).
  *  
  * @retval None
  */
void RCC_RTCCLKConfig(uint32_t RCC_RTCCLKSource)
{
20000ba8:	b580      	push	{r7, lr}
20000baa:	b084      	sub	sp, #16
20000bac:	af00      	add	r7, sp, #0
20000bae:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
20000bb0:	2300      	movs	r3, #0
20000bb2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_RTCCLK_SOURCE(RCC_RTCCLKSource));

  if ((RCC_RTCCLKSource & 0x00000300) == 0x00000300)
20000bb4:	687a      	ldr	r2, [r7, #4]
20000bb6:	23c0      	movs	r3, #192	; 0xc0
20000bb8:	009b      	lsls	r3, r3, #2
20000bba:	401a      	ands	r2, r3
20000bbc:	23c0      	movs	r3, #192	; 0xc0
20000bbe:	009b      	lsls	r3, r3, #2
20000bc0:	429a      	cmp	r2, r3
20000bc2:	d10f      	bne.n	20000be4 <RCC_RTCCLKConfig+0x3c>
  { /* If HSE is selected as RTC clock source, configure HSE division factor for RTC clock */
    tmpreg = RCC->CFGR;
20000bc4:	4b0d      	ldr	r3, [pc, #52]	; (20000bfc <RCC_RTCCLKConfig+0x54>)
20000bc6:	689b      	ldr	r3, [r3, #8]
20000bc8:	60fb      	str	r3, [r7, #12]

    /* Clear RTCPRE[4:0] bits */
    tmpreg &= ~RCC_CFGR_RTCPRE;
20000bca:	68fb      	ldr	r3, [r7, #12]
20000bcc:	4a0c      	ldr	r2, [pc, #48]	; (20000c00 <RCC_RTCCLKConfig+0x58>)
20000bce:	4013      	ands	r3, r2
20000bd0:	60fb      	str	r3, [r7, #12]

    /* Configure HSE division factor for RTC clock */
    tmpreg |= (RCC_RTCCLKSource & 0xFFFFCFF);
20000bd2:	687b      	ldr	r3, [r7, #4]
20000bd4:	4a0b      	ldr	r2, [pc, #44]	; (20000c04 <RCC_RTCCLKConfig+0x5c>)
20000bd6:	4013      	ands	r3, r2
20000bd8:	68fa      	ldr	r2, [r7, #12]
20000bda:	4313      	orrs	r3, r2
20000bdc:	60fb      	str	r3, [r7, #12]

    /* Store the new value */
    RCC->CFGR = tmpreg;
20000bde:	4b07      	ldr	r3, [pc, #28]	; (20000bfc <RCC_RTCCLKConfig+0x54>)
20000be0:	68fa      	ldr	r2, [r7, #12]
20000be2:	609a      	str	r2, [r3, #8]
  }
    
  /* Select the RTC clock source */
  RCC->BDCR |= (RCC_RTCCLKSource & 0x00000FFF);
20000be4:	4b05      	ldr	r3, [pc, #20]	; (20000bfc <RCC_RTCCLKConfig+0x54>)
20000be6:	6f19      	ldr	r1, [r3, #112]	; 0x70
20000be8:	687b      	ldr	r3, [r7, #4]
20000bea:	051b      	lsls	r3, r3, #20
20000bec:	0d1a      	lsrs	r2, r3, #20
20000bee:	4b03      	ldr	r3, [pc, #12]	; (20000bfc <RCC_RTCCLKConfig+0x54>)
20000bf0:	430a      	orrs	r2, r1
20000bf2:	671a      	str	r2, [r3, #112]	; 0x70
}
20000bf4:	46c0      	nop			; (mov r8, r8)
20000bf6:	46bd      	mov	sp, r7
20000bf8:	b004      	add	sp, #16
20000bfa:	bd80      	pop	{r7, pc}
20000bfc:	40023800 	andmi	r3, r2, r0, lsl #16
20000c00:	ffe0ffff 			; <UNDEFINED> instruction: 0xffe0ffff
20000c04:	0ffffcff 	svceq	0x00fffcff

20000c08 <RCC_RTCCLKCmd>:
  *         using the RCC_RTCCLKConfig function.
  * @param  NewState: new state of the RTC clock. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_RTCCLKCmd(FunctionalState NewState)
{
20000c08:	b580      	push	{r7, lr}
20000c0a:	b082      	sub	sp, #8
20000c0c:	af00      	add	r7, sp, #0
20000c0e:	0002      	movs	r2, r0
20000c10:	1dfb      	adds	r3, r7, #7
20000c12:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) BDCR_RTCEN_BB = (uint32_t)NewState;
20000c14:	4b03      	ldr	r3, [pc, #12]	; (20000c24 <RCC_RTCCLKCmd+0x1c>)
20000c16:	1dfa      	adds	r2, r7, #7
20000c18:	7812      	ldrb	r2, [r2, #0]
20000c1a:	601a      	str	r2, [r3, #0]
}
20000c1c:	46c0      	nop			; (mov r8, r8)
20000c1e:	46bd      	mov	sp, r7
20000c20:	b002      	add	sp, #8
20000c22:	bd80      	pop	{r7, pc}
20000c24:	42470e3c 	submi	r0, r7, #60, 28	; 0x3c0

20000c28 <RCC_BackupResetCmd>:
  * @param  NewState: new state of the Backup domain reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_BackupResetCmd(FunctionalState NewState)
{
20000c28:	b580      	push	{r7, lr}
20000c2a:	b082      	sub	sp, #8
20000c2c:	af00      	add	r7, sp, #0
20000c2e:	0002      	movs	r2, r0
20000c30:	1dfb      	adds	r3, r7, #7
20000c32:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) BDCR_BDRST_BB = (uint32_t)NewState;
20000c34:	4b03      	ldr	r3, [pc, #12]	; (20000c44 <RCC_BackupResetCmd+0x1c>)
20000c36:	1dfa      	adds	r2, r7, #7
20000c38:	7812      	ldrb	r2, [r2, #0]
20000c3a:	601a      	str	r2, [r3, #0]
}
20000c3c:	46c0      	nop			; (mov r8, r8)
20000c3e:	46bd      	mov	sp, r7
20000c40:	b002      	add	sp, #8
20000c42:	bd80      	pop	{r7, pc}
20000c44:	42470e40 	submi	r0, r7, #64, 28	; 0x400

20000c48 <RCC_I2SCLKConfig>:
  *            @arg RCC_I2S2CLKSource_Ext: External clock mapped on the I2S_CKIN pin
  *                                        used as I2S clock source
  * @retval None
  */
void RCC_I2SCLKConfig(uint32_t RCC_I2SCLKSource)
{
20000c48:	b580      	push	{r7, lr}
20000c4a:	b082      	sub	sp, #8
20000c4c:	af00      	add	r7, sp, #0
20000c4e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_I2SCLK_SOURCE(RCC_I2SCLKSource));

  *(__IO uint32_t *) CFGR_I2SSRC_BB = RCC_I2SCLKSource;  
20000c50:	4b03      	ldr	r3, [pc, #12]	; (20000c60 <RCC_I2SCLKConfig+0x18>)
20000c52:	687a      	ldr	r2, [r7, #4]
20000c54:	601a      	str	r2, [r3, #0]
}
20000c56:	46c0      	nop			; (mov r8, r8)
20000c58:	46bd      	mov	sp, r7
20000c5a:	b002      	add	sp, #8
20000c5c:	bd80      	pop	{r7, pc}
20000c5e:	46c0      	nop			; (mov r8, r8)
20000c60:	4247015c 	submi	r0, r7, #92, 2

20000c64 <RCC_SAIBlockACLKConfig>:
  *            @arg RCC_SAIACLKSource_Ext: External clock mapped on the I2S_CKIN pin
  *                                        used as SAI1 Block A clock
  * @retval None
  */
void RCC_SAIBlockACLKConfig(uint32_t RCC_SAIBlockACLKSource)
{
20000c64:	b580      	push	{r7, lr}
20000c66:	b084      	sub	sp, #16
20000c68:	af00      	add	r7, sp, #0
20000c6a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
20000c6c:	2300      	movs	r3, #0
20000c6e:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_SAIACLK_SOURCE(RCC_SAIBlockACLKSource));
  
  tmpreg = RCC->DCKCFGR;
20000c70:	4a09      	ldr	r2, [pc, #36]	; (20000c98 <RCC_SAIBlockACLKConfig+0x34>)
20000c72:	238c      	movs	r3, #140	; 0x8c
20000c74:	58d3      	ldr	r3, [r2, r3]
20000c76:	60fb      	str	r3, [r7, #12]

  /* Clear RCC_DCKCFGR_SAI1ASRC[1:0] bits */
  tmpreg &= ~RCC_DCKCFGR_SAI1ASRC;
20000c78:	68fb      	ldr	r3, [r7, #12]
20000c7a:	4a08      	ldr	r2, [pc, #32]	; (20000c9c <RCC_SAIBlockACLKConfig+0x38>)
20000c7c:	4013      	ands	r3, r2
20000c7e:	60fb      	str	r3, [r7, #12]

  /* Set SAI Block A source selection value */
  tmpreg |= RCC_SAIBlockACLKSource;
20000c80:	68fa      	ldr	r2, [r7, #12]
20000c82:	687b      	ldr	r3, [r7, #4]
20000c84:	4313      	orrs	r3, r2
20000c86:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->DCKCFGR = tmpreg;
20000c88:	4903      	ldr	r1, [pc, #12]	; (20000c98 <RCC_SAIBlockACLKConfig+0x34>)
20000c8a:	228c      	movs	r2, #140	; 0x8c
20000c8c:	68fb      	ldr	r3, [r7, #12]
20000c8e:	508b      	str	r3, [r1, r2]
}
20000c90:	46c0      	nop			; (mov r8, r8)
20000c92:	46bd      	mov	sp, r7
20000c94:	b004      	add	sp, #16
20000c96:	bd80      	pop	{r7, pc}
20000c98:	40023800 	andmi	r3, r2, r0, lsl #16
20000c9c:	ffcfffff 			; <UNDEFINED> instruction: 0xffcfffff

20000ca0 <RCC_SAIBlockBCLKConfig>:
  *            @arg RCC_SAIBCLKSource_Ext: External clock mapped on the I2S_CKIN pin
  *                                        used as SAI1 Block B clock
  * @retval None
  */
void RCC_SAIBlockBCLKConfig(uint32_t RCC_SAIBlockBCLKSource)
{
20000ca0:	b580      	push	{r7, lr}
20000ca2:	b084      	sub	sp, #16
20000ca4:	af00      	add	r7, sp, #0
20000ca6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
20000ca8:	2300      	movs	r3, #0
20000caa:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_SAIBCLK_SOURCE(RCC_SAIBlockBCLKSource));
  
  tmpreg = RCC->DCKCFGR;
20000cac:	4a09      	ldr	r2, [pc, #36]	; (20000cd4 <RCC_SAIBlockBCLKConfig+0x34>)
20000cae:	238c      	movs	r3, #140	; 0x8c
20000cb0:	58d3      	ldr	r3, [r2, r3]
20000cb2:	60fb      	str	r3, [r7, #12]

  /* Clear RCC_DCKCFGR_SAI1BSRC[1:0] bits */
  tmpreg &= ~RCC_DCKCFGR_SAI1BSRC;
20000cb4:	68fb      	ldr	r3, [r7, #12]
20000cb6:	4a08      	ldr	r2, [pc, #32]	; (20000cd8 <RCC_SAIBlockBCLKConfig+0x38>)
20000cb8:	4013      	ands	r3, r2
20000cba:	60fb      	str	r3, [r7, #12]

  /* Set SAI Block B source selection value */
  tmpreg |= RCC_SAIBlockBCLKSource;
20000cbc:	68fa      	ldr	r2, [r7, #12]
20000cbe:	687b      	ldr	r3, [r7, #4]
20000cc0:	4313      	orrs	r3, r2
20000cc2:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->DCKCFGR = tmpreg;
20000cc4:	4903      	ldr	r1, [pc, #12]	; (20000cd4 <RCC_SAIBlockBCLKConfig+0x34>)
20000cc6:	228c      	movs	r2, #140	; 0x8c
20000cc8:	68fb      	ldr	r3, [r7, #12]
20000cca:	508b      	str	r3, [r1, r2]
}
20000ccc:	46c0      	nop			; (mov r8, r8)
20000cce:	46bd      	mov	sp, r7
20000cd0:	b004      	add	sp, #16
20000cd2:	bd80      	pop	{r7, pc}
20000cd4:	40023800 	andmi	r3, r2, r0, lsl #16
20000cd8:	ff3fffff 			; <UNDEFINED> instruction: 0xff3fffff

20000cdc <RCC_SAIPLLI2SClkDivConfig>:
  *          SAI1 clock frequency = f(PLLI2S_Q) / RCC_PLLI2SDivQ 
  *              
  * @retval None
  */
void RCC_SAIPLLI2SClkDivConfig(uint32_t RCC_PLLI2SDivQ)  
{
20000cdc:	b580      	push	{r7, lr}
20000cde:	b084      	sub	sp, #16
20000ce0:	af00      	add	r7, sp, #0
20000ce2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
20000ce4:	2300      	movs	r3, #0
20000ce6:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(RCC_PLLI2SDivQ));
  
  tmpreg = RCC->DCKCFGR;
20000ce8:	4a0a      	ldr	r2, [pc, #40]	; (20000d14 <RCC_SAIPLLI2SClkDivConfig+0x38>)
20000cea:	238c      	movs	r3, #140	; 0x8c
20000cec:	58d3      	ldr	r3, [r2, r3]
20000cee:	60fb      	str	r3, [r7, #12]

  /* Clear PLLI2SDIVQ[4:0] bits */
  tmpreg &= ~(RCC_DCKCFGR_PLLI2SDIVQ);
20000cf0:	68fb      	ldr	r3, [r7, #12]
20000cf2:	221f      	movs	r2, #31
20000cf4:	4393      	bics	r3, r2
20000cf6:	60fb      	str	r3, [r7, #12]

  /* Set PLLI2SDIVQ values */
  tmpreg |= (RCC_PLLI2SDivQ - 1);
20000cf8:	687b      	ldr	r3, [r7, #4]
20000cfa:	3b01      	subs	r3, #1
20000cfc:	68fa      	ldr	r2, [r7, #12]
20000cfe:	4313      	orrs	r3, r2
20000d00:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->DCKCFGR = tmpreg;
20000d02:	4904      	ldr	r1, [pc, #16]	; (20000d14 <RCC_SAIPLLI2SClkDivConfig+0x38>)
20000d04:	228c      	movs	r2, #140	; 0x8c
20000d06:	68fb      	ldr	r3, [r7, #12]
20000d08:	508b      	str	r3, [r1, r2]
}
20000d0a:	46c0      	nop			; (mov r8, r8)
20000d0c:	46bd      	mov	sp, r7
20000d0e:	b004      	add	sp, #16
20000d10:	bd80      	pop	{r7, pc}
20000d12:	46c0      	nop			; (mov r8, r8)
20000d14:	40023800 	andmi	r3, r2, r0, lsl #16

20000d18 <RCC_SAIPLLSAIClkDivConfig>:
  *          SAI1 clock frequency = f(PLLSAI_Q) / RCC_PLLSAIDivQ  
  *              
  * @retval None
  */
void RCC_SAIPLLSAIClkDivConfig(uint32_t RCC_PLLSAIDivQ)  
{
20000d18:	b580      	push	{r7, lr}
20000d1a:	b084      	sub	sp, #16
20000d1c:	af00      	add	r7, sp, #0
20000d1e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
20000d20:	2300      	movs	r3, #0
20000d22:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(RCC_PLLSAIDivQ));
  
  tmpreg = RCC->DCKCFGR;
20000d24:	4a0a      	ldr	r2, [pc, #40]	; (20000d50 <RCC_SAIPLLSAIClkDivConfig+0x38>)
20000d26:	238c      	movs	r3, #140	; 0x8c
20000d28:	58d3      	ldr	r3, [r2, r3]
20000d2a:	60fb      	str	r3, [r7, #12]

  /* Clear PLLI2SDIVQ[4:0] and PLLSAIDIVQ[4:0] bits */
  tmpreg &= ~(RCC_DCKCFGR_PLLSAIDIVQ);
20000d2c:	68fb      	ldr	r3, [r7, #12]
20000d2e:	4a09      	ldr	r2, [pc, #36]	; (20000d54 <RCC_SAIPLLSAIClkDivConfig+0x3c>)
20000d30:	4013      	ands	r3, r2
20000d32:	60fb      	str	r3, [r7, #12]

  /* Set PLLSAIDIVQ values */
  tmpreg |= ((RCC_PLLSAIDivQ - 1) << 8);
20000d34:	687b      	ldr	r3, [r7, #4]
20000d36:	3b01      	subs	r3, #1
20000d38:	021b      	lsls	r3, r3, #8
20000d3a:	68fa      	ldr	r2, [r7, #12]
20000d3c:	4313      	orrs	r3, r2
20000d3e:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->DCKCFGR = tmpreg;
20000d40:	4903      	ldr	r1, [pc, #12]	; (20000d50 <RCC_SAIPLLSAIClkDivConfig+0x38>)
20000d42:	228c      	movs	r2, #140	; 0x8c
20000d44:	68fb      	ldr	r3, [r7, #12]
20000d46:	508b      	str	r3, [r1, r2]
}
20000d48:	46c0      	nop			; (mov r8, r8)
20000d4a:	46bd      	mov	sp, r7
20000d4c:	b004      	add	sp, #16
20000d4e:	bd80      	pop	{r7, pc}
20000d50:	40023800 	andmi	r3, r2, r0, lsl #16
20000d54:	ffffe0ff 			; <UNDEFINED> instruction: 0xffffe0ff

20000d58 <RCC_LTDCCLKDivConfig>:
  *            @arg RCC_PLLSAIDivR_Div16: LTDC clock = f(PLLSAI_R)/16
  *            
  * @retval None
  */
void RCC_LTDCCLKDivConfig(uint32_t RCC_PLLSAIDivR)
{
20000d58:	b580      	push	{r7, lr}
20000d5a:	b084      	sub	sp, #16
20000d5c:	af00      	add	r7, sp, #0
20000d5e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
20000d60:	2300      	movs	r3, #0
20000d62:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_PLLSAI_DIVR_VALUE(RCC_PLLSAIDivR));
  
  tmpreg = RCC->DCKCFGR;
20000d64:	4a09      	ldr	r2, [pc, #36]	; (20000d8c <RCC_LTDCCLKDivConfig+0x34>)
20000d66:	238c      	movs	r3, #140	; 0x8c
20000d68:	58d3      	ldr	r3, [r2, r3]
20000d6a:	60fb      	str	r3, [r7, #12]

  /* Clear PLLSAIDIVR[2:0] bits */
  tmpreg &= ~RCC_DCKCFGR_PLLSAIDIVR;
20000d6c:	68fb      	ldr	r3, [r7, #12]
20000d6e:	4a08      	ldr	r2, [pc, #32]	; (20000d90 <RCC_LTDCCLKDivConfig+0x38>)
20000d70:	4013      	ands	r3, r2
20000d72:	60fb      	str	r3, [r7, #12]

  /* Set PLLSAIDIVR values */
  tmpreg |= RCC_PLLSAIDivR;
20000d74:	68fa      	ldr	r2, [r7, #12]
20000d76:	687b      	ldr	r3, [r7, #4]
20000d78:	4313      	orrs	r3, r2
20000d7a:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->DCKCFGR = tmpreg;
20000d7c:	4903      	ldr	r1, [pc, #12]	; (20000d8c <RCC_LTDCCLKDivConfig+0x34>)
20000d7e:	228c      	movs	r2, #140	; 0x8c
20000d80:	68fb      	ldr	r3, [r7, #12]
20000d82:	508b      	str	r3, [r1, r2]
}
20000d84:	46c0      	nop			; (mov r8, r8)
20000d86:	46bd      	mov	sp, r7
20000d88:	b004      	add	sp, #16
20000d8a:	bd80      	pop	{r7, pc}
20000d8c:	40023800 	andmi	r3, r2, r0, lsl #16
20000d90:	fffcffff 			; <UNDEFINED> instruction: 0xfffcffff

20000d94 <RCC_TIMCLKPresConfig>:
  *                 else it is equal to [(HPRE * PPREx) / 4] if PPREx is corresponding 
  *                 to division by 8 or more.
  * @retval None
  */
void RCC_TIMCLKPresConfig(uint32_t RCC_TIMCLKPrescaler)
{
20000d94:	b580      	push	{r7, lr}
20000d96:	b082      	sub	sp, #8
20000d98:	af00      	add	r7, sp, #0
20000d9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_TIMCLK_PRESCALER(RCC_TIMCLKPrescaler));

  *(__IO uint32_t *) DCKCFGR_TIMPRE_BB = RCC_TIMCLKPrescaler;
20000d9c:	4b03      	ldr	r3, [pc, #12]	; (20000dac <RCC_TIMCLKPresConfig+0x18>)
20000d9e:	687a      	ldr	r2, [r7, #4]
20000da0:	601a      	str	r2, [r3, #0]
}
20000da2:	46c0      	nop			; (mov r8, r8)
20000da4:	46bd      	mov	sp, r7
20000da6:	b002      	add	sp, #8
20000da8:	bd80      	pop	{r7, pc}
20000daa:	46c0      	nop			; (mov r8, r8)
20000dac:	424711e0 	submi	r1, r7, #224, 2	; 0x38

20000db0 <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
20000db0:	b580      	push	{r7, lr}
20000db2:	b082      	sub	sp, #8
20000db4:	af00      	add	r7, sp, #0
20000db6:	6078      	str	r0, [r7, #4]
20000db8:	000a      	movs	r2, r1
20000dba:	1cfb      	adds	r3, r7, #3
20000dbc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
20000dbe:	1cfb      	adds	r3, r7, #3
20000dc0:	781b      	ldrb	r3, [r3, #0]
20000dc2:	2b00      	cmp	r3, #0
20000dc4:	d006      	beq.n	20000dd4 <RCC_AHB1PeriphClockCmd+0x24>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
20000dc6:	4b09      	ldr	r3, [pc, #36]	; (20000dec <RCC_AHB1PeriphClockCmd+0x3c>)
20000dc8:	6b19      	ldr	r1, [r3, #48]	; 0x30
20000dca:	4b08      	ldr	r3, [pc, #32]	; (20000dec <RCC_AHB1PeriphClockCmd+0x3c>)
20000dcc:	687a      	ldr	r2, [r7, #4]
20000dce:	430a      	orrs	r2, r1
20000dd0:	631a      	str	r2, [r3, #48]	; 0x30
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
  }
}
20000dd2:	e006      	b.n	20000de2 <RCC_AHB1PeriphClockCmd+0x32>
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
20000dd4:	4b05      	ldr	r3, [pc, #20]	; (20000dec <RCC_AHB1PeriphClockCmd+0x3c>)
20000dd6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
20000dd8:	687b      	ldr	r3, [r7, #4]
20000dda:	43d9      	mvns	r1, r3
20000ddc:	4b03      	ldr	r3, [pc, #12]	; (20000dec <RCC_AHB1PeriphClockCmd+0x3c>)
20000dde:	400a      	ands	r2, r1
20000de0:	631a      	str	r2, [r3, #48]	; 0x30
}
20000de2:	46c0      	nop			; (mov r8, r8)
20000de4:	46bd      	mov	sp, r7
20000de6:	b002      	add	sp, #8
20000de8:	bd80      	pop	{r7, pc}
20000dea:	46c0      	nop			; (mov r8, r8)
20000dec:	40023800 	andmi	r3, r2, r0, lsl #16

20000df0 <RCC_AHB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB2PeriphClockCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
{
20000df0:	b580      	push	{r7, lr}
20000df2:	b082      	sub	sp, #8
20000df4:	af00      	add	r7, sp, #0
20000df6:	6078      	str	r0, [r7, #4]
20000df8:	000a      	movs	r2, r1
20000dfa:	1cfb      	adds	r3, r7, #3
20000dfc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
20000dfe:	1cfb      	adds	r3, r7, #3
20000e00:	781b      	ldrb	r3, [r3, #0]
20000e02:	2b00      	cmp	r3, #0
20000e04:	d006      	beq.n	20000e14 <RCC_AHB2PeriphClockCmd+0x24>
  {
    RCC->AHB2ENR |= RCC_AHB2Periph;
20000e06:	4b09      	ldr	r3, [pc, #36]	; (20000e2c <RCC_AHB2PeriphClockCmd+0x3c>)
20000e08:	6b59      	ldr	r1, [r3, #52]	; 0x34
20000e0a:	4b08      	ldr	r3, [pc, #32]	; (20000e2c <RCC_AHB2PeriphClockCmd+0x3c>)
20000e0c:	687a      	ldr	r2, [r7, #4]
20000e0e:	430a      	orrs	r2, r1
20000e10:	635a      	str	r2, [r3, #52]	; 0x34
  }
  else
  {
    RCC->AHB2ENR &= ~RCC_AHB2Periph;
  }
}
20000e12:	e006      	b.n	20000e22 <RCC_AHB2PeriphClockCmd+0x32>
    RCC->AHB2ENR &= ~RCC_AHB2Periph;
20000e14:	4b05      	ldr	r3, [pc, #20]	; (20000e2c <RCC_AHB2PeriphClockCmd+0x3c>)
20000e16:	6b5a      	ldr	r2, [r3, #52]	; 0x34
20000e18:	687b      	ldr	r3, [r7, #4]
20000e1a:	43d9      	mvns	r1, r3
20000e1c:	4b03      	ldr	r3, [pc, #12]	; (20000e2c <RCC_AHB2PeriphClockCmd+0x3c>)
20000e1e:	400a      	ands	r2, r1
20000e20:	635a      	str	r2, [r3, #52]	; 0x34
}
20000e22:	46c0      	nop			; (mov r8, r8)
20000e24:	46bd      	mov	sp, r7
20000e26:	b002      	add	sp, #8
20000e28:	bd80      	pop	{r7, pc}
20000e2a:	46c0      	nop			; (mov r8, r8)
20000e2c:	40023800 	andmi	r3, r2, r0, lsl #16

20000e30 <RCC_AHB3PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB3PeriphClockCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
{
20000e30:	b580      	push	{r7, lr}
20000e32:	b082      	sub	sp, #8
20000e34:	af00      	add	r7, sp, #0
20000e36:	6078      	str	r0, [r7, #4]
20000e38:	000a      	movs	r2, r1
20000e3a:	1cfb      	adds	r3, r7, #3
20000e3c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
20000e3e:	1cfb      	adds	r3, r7, #3
20000e40:	781b      	ldrb	r3, [r3, #0]
20000e42:	2b00      	cmp	r3, #0
20000e44:	d006      	beq.n	20000e54 <RCC_AHB3PeriphClockCmd+0x24>
  {
    RCC->AHB3ENR |= RCC_AHB3Periph;
20000e46:	4b09      	ldr	r3, [pc, #36]	; (20000e6c <RCC_AHB3PeriphClockCmd+0x3c>)
20000e48:	6b99      	ldr	r1, [r3, #56]	; 0x38
20000e4a:	4b08      	ldr	r3, [pc, #32]	; (20000e6c <RCC_AHB3PeriphClockCmd+0x3c>)
20000e4c:	687a      	ldr	r2, [r7, #4]
20000e4e:	430a      	orrs	r2, r1
20000e50:	639a      	str	r2, [r3, #56]	; 0x38
  }
  else
  {
    RCC->AHB3ENR &= ~RCC_AHB3Periph;
  }
}
20000e52:	e006      	b.n	20000e62 <RCC_AHB3PeriphClockCmd+0x32>
    RCC->AHB3ENR &= ~RCC_AHB3Periph;
20000e54:	4b05      	ldr	r3, [pc, #20]	; (20000e6c <RCC_AHB3PeriphClockCmd+0x3c>)
20000e56:	6b9a      	ldr	r2, [r3, #56]	; 0x38
20000e58:	687b      	ldr	r3, [r7, #4]
20000e5a:	43d9      	mvns	r1, r3
20000e5c:	4b03      	ldr	r3, [pc, #12]	; (20000e6c <RCC_AHB3PeriphClockCmd+0x3c>)
20000e5e:	400a      	ands	r2, r1
20000e60:	639a      	str	r2, [r3, #56]	; 0x38
}
20000e62:	46c0      	nop			; (mov r8, r8)
20000e64:	46bd      	mov	sp, r7
20000e66:	b002      	add	sp, #8
20000e68:	bd80      	pop	{r7, pc}
20000e6a:	46c0      	nop			; (mov r8, r8)
20000e6c:	40023800 	andmi	r3, r2, r0, lsl #16

20000e70 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
20000e70:	b580      	push	{r7, lr}
20000e72:	b082      	sub	sp, #8
20000e74:	af00      	add	r7, sp, #0
20000e76:	6078      	str	r0, [r7, #4]
20000e78:	000a      	movs	r2, r1
20000e7a:	1cfb      	adds	r3, r7, #3
20000e7c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
20000e7e:	1cfb      	adds	r3, r7, #3
20000e80:	781b      	ldrb	r3, [r3, #0]
20000e82:	2b00      	cmp	r3, #0
20000e84:	d006      	beq.n	20000e94 <RCC_APB1PeriphClockCmd+0x24>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
20000e86:	4b09      	ldr	r3, [pc, #36]	; (20000eac <RCC_APB1PeriphClockCmd+0x3c>)
20000e88:	6c19      	ldr	r1, [r3, #64]	; 0x40
20000e8a:	4b08      	ldr	r3, [pc, #32]	; (20000eac <RCC_APB1PeriphClockCmd+0x3c>)
20000e8c:	687a      	ldr	r2, [r7, #4]
20000e8e:	430a      	orrs	r2, r1
20000e90:	641a      	str	r2, [r3, #64]	; 0x40
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
20000e92:	e006      	b.n	20000ea2 <RCC_APB1PeriphClockCmd+0x32>
    RCC->APB1ENR &= ~RCC_APB1Periph;
20000e94:	4b05      	ldr	r3, [pc, #20]	; (20000eac <RCC_APB1PeriphClockCmd+0x3c>)
20000e96:	6c1a      	ldr	r2, [r3, #64]	; 0x40
20000e98:	687b      	ldr	r3, [r7, #4]
20000e9a:	43d9      	mvns	r1, r3
20000e9c:	4b03      	ldr	r3, [pc, #12]	; (20000eac <RCC_APB1PeriphClockCmd+0x3c>)
20000e9e:	400a      	ands	r2, r1
20000ea0:	641a      	str	r2, [r3, #64]	; 0x40
}
20000ea2:	46c0      	nop			; (mov r8, r8)
20000ea4:	46bd      	mov	sp, r7
20000ea6:	b002      	add	sp, #8
20000ea8:	bd80      	pop	{r7, pc}
20000eaa:	46c0      	nop			; (mov r8, r8)
20000eac:	40023800 	andmi	r3, r2, r0, lsl #16

20000eb0 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
20000eb0:	b580      	push	{r7, lr}
20000eb2:	b082      	sub	sp, #8
20000eb4:	af00      	add	r7, sp, #0
20000eb6:	6078      	str	r0, [r7, #4]
20000eb8:	000a      	movs	r2, r1
20000eba:	1cfb      	adds	r3, r7, #3
20000ebc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
20000ebe:	1cfb      	adds	r3, r7, #3
20000ec0:	781b      	ldrb	r3, [r3, #0]
20000ec2:	2b00      	cmp	r3, #0
20000ec4:	d006      	beq.n	20000ed4 <RCC_APB2PeriphClockCmd+0x24>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
20000ec6:	4b09      	ldr	r3, [pc, #36]	; (20000eec <RCC_APB2PeriphClockCmd+0x3c>)
20000ec8:	6c59      	ldr	r1, [r3, #68]	; 0x44
20000eca:	4b08      	ldr	r3, [pc, #32]	; (20000eec <RCC_APB2PeriphClockCmd+0x3c>)
20000ecc:	687a      	ldr	r2, [r7, #4]
20000ece:	430a      	orrs	r2, r1
20000ed0:	645a      	str	r2, [r3, #68]	; 0x44
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
20000ed2:	e006      	b.n	20000ee2 <RCC_APB2PeriphClockCmd+0x32>
    RCC->APB2ENR &= ~RCC_APB2Periph;
20000ed4:	4b05      	ldr	r3, [pc, #20]	; (20000eec <RCC_APB2PeriphClockCmd+0x3c>)
20000ed6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
20000ed8:	687b      	ldr	r3, [r7, #4]
20000eda:	43d9      	mvns	r1, r3
20000edc:	4b03      	ldr	r3, [pc, #12]	; (20000eec <RCC_APB2PeriphClockCmd+0x3c>)
20000ede:	400a      	ands	r2, r1
20000ee0:	645a      	str	r2, [r3, #68]	; 0x44
}
20000ee2:	46c0      	nop			; (mov r8, r8)
20000ee4:	46bd      	mov	sp, r7
20000ee6:	b002      	add	sp, #8
20000ee8:	bd80      	pop	{r7, pc}
20000eea:	46c0      	nop			; (mov r8, r8)
20000eec:	40023800 	andmi	r3, r2, r0, lsl #16

20000ef0 <RCC_AHB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphResetCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
20000ef0:	b580      	push	{r7, lr}
20000ef2:	b082      	sub	sp, #8
20000ef4:	af00      	add	r7, sp, #0
20000ef6:	6078      	str	r0, [r7, #4]
20000ef8:	000a      	movs	r2, r1
20000efa:	1cfb      	adds	r3, r7, #3
20000efc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_RESET_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
20000efe:	1cfb      	adds	r3, r7, #3
20000f00:	781b      	ldrb	r3, [r3, #0]
20000f02:	2b00      	cmp	r3, #0
20000f04:	d006      	beq.n	20000f14 <RCC_AHB1PeriphResetCmd+0x24>
  {
    RCC->AHB1RSTR |= RCC_AHB1Periph;
20000f06:	4b09      	ldr	r3, [pc, #36]	; (20000f2c <RCC_AHB1PeriphResetCmd+0x3c>)
20000f08:	6919      	ldr	r1, [r3, #16]
20000f0a:	4b08      	ldr	r3, [pc, #32]	; (20000f2c <RCC_AHB1PeriphResetCmd+0x3c>)
20000f0c:	687a      	ldr	r2, [r7, #4]
20000f0e:	430a      	orrs	r2, r1
20000f10:	611a      	str	r2, [r3, #16]
  }
  else
  {
    RCC->AHB1RSTR &= ~RCC_AHB1Periph;
  }
}
20000f12:	e006      	b.n	20000f22 <RCC_AHB1PeriphResetCmd+0x32>
    RCC->AHB1RSTR &= ~RCC_AHB1Periph;
20000f14:	4b05      	ldr	r3, [pc, #20]	; (20000f2c <RCC_AHB1PeriphResetCmd+0x3c>)
20000f16:	691a      	ldr	r2, [r3, #16]
20000f18:	687b      	ldr	r3, [r7, #4]
20000f1a:	43d9      	mvns	r1, r3
20000f1c:	4b03      	ldr	r3, [pc, #12]	; (20000f2c <RCC_AHB1PeriphResetCmd+0x3c>)
20000f1e:	400a      	ands	r2, r1
20000f20:	611a      	str	r2, [r3, #16]
}
20000f22:	46c0      	nop			; (mov r8, r8)
20000f24:	46bd      	mov	sp, r7
20000f26:	b002      	add	sp, #8
20000f28:	bd80      	pop	{r7, pc}
20000f2a:	46c0      	nop			; (mov r8, r8)
20000f2c:	40023800 	andmi	r3, r2, r0, lsl #16

20000f30 <RCC_AHB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB2PeriphResetCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
{
20000f30:	b580      	push	{r7, lr}
20000f32:	b082      	sub	sp, #8
20000f34:	af00      	add	r7, sp, #0
20000f36:	6078      	str	r0, [r7, #4]
20000f38:	000a      	movs	r2, r1
20000f3a:	1cfb      	adds	r3, r7, #3
20000f3c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
20000f3e:	1cfb      	adds	r3, r7, #3
20000f40:	781b      	ldrb	r3, [r3, #0]
20000f42:	2b00      	cmp	r3, #0
20000f44:	d006      	beq.n	20000f54 <RCC_AHB2PeriphResetCmd+0x24>
  {
    RCC->AHB2RSTR |= RCC_AHB2Periph;
20000f46:	4b09      	ldr	r3, [pc, #36]	; (20000f6c <RCC_AHB2PeriphResetCmd+0x3c>)
20000f48:	6959      	ldr	r1, [r3, #20]
20000f4a:	4b08      	ldr	r3, [pc, #32]	; (20000f6c <RCC_AHB2PeriphResetCmd+0x3c>)
20000f4c:	687a      	ldr	r2, [r7, #4]
20000f4e:	430a      	orrs	r2, r1
20000f50:	615a      	str	r2, [r3, #20]
  }
  else
  {
    RCC->AHB2RSTR &= ~RCC_AHB2Periph;
  }
}
20000f52:	e006      	b.n	20000f62 <RCC_AHB2PeriphResetCmd+0x32>
    RCC->AHB2RSTR &= ~RCC_AHB2Periph;
20000f54:	4b05      	ldr	r3, [pc, #20]	; (20000f6c <RCC_AHB2PeriphResetCmd+0x3c>)
20000f56:	695a      	ldr	r2, [r3, #20]
20000f58:	687b      	ldr	r3, [r7, #4]
20000f5a:	43d9      	mvns	r1, r3
20000f5c:	4b03      	ldr	r3, [pc, #12]	; (20000f6c <RCC_AHB2PeriphResetCmd+0x3c>)
20000f5e:	400a      	ands	r2, r1
20000f60:	615a      	str	r2, [r3, #20]
}
20000f62:	46c0      	nop			; (mov r8, r8)
20000f64:	46bd      	mov	sp, r7
20000f66:	b002      	add	sp, #8
20000f68:	bd80      	pop	{r7, pc}
20000f6a:	46c0      	nop			; (mov r8, r8)
20000f6c:	40023800 	andmi	r3, r2, r0, lsl #16

20000f70 <RCC_AHB3PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB3PeriphResetCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
{
20000f70:	b580      	push	{r7, lr}
20000f72:	b082      	sub	sp, #8
20000f74:	af00      	add	r7, sp, #0
20000f76:	6078      	str	r0, [r7, #4]
20000f78:	000a      	movs	r2, r1
20000f7a:	1cfb      	adds	r3, r7, #3
20000f7c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
20000f7e:	1cfb      	adds	r3, r7, #3
20000f80:	781b      	ldrb	r3, [r3, #0]
20000f82:	2b00      	cmp	r3, #0
20000f84:	d006      	beq.n	20000f94 <RCC_AHB3PeriphResetCmd+0x24>
  {
    RCC->AHB3RSTR |= RCC_AHB3Periph;
20000f86:	4b09      	ldr	r3, [pc, #36]	; (20000fac <RCC_AHB3PeriphResetCmd+0x3c>)
20000f88:	6999      	ldr	r1, [r3, #24]
20000f8a:	4b08      	ldr	r3, [pc, #32]	; (20000fac <RCC_AHB3PeriphResetCmd+0x3c>)
20000f8c:	687a      	ldr	r2, [r7, #4]
20000f8e:	430a      	orrs	r2, r1
20000f90:	619a      	str	r2, [r3, #24]
  }
  else
  {
    RCC->AHB3RSTR &= ~RCC_AHB3Periph;
  }
}
20000f92:	e006      	b.n	20000fa2 <RCC_AHB3PeriphResetCmd+0x32>
    RCC->AHB3RSTR &= ~RCC_AHB3Periph;
20000f94:	4b05      	ldr	r3, [pc, #20]	; (20000fac <RCC_AHB3PeriphResetCmd+0x3c>)
20000f96:	699a      	ldr	r2, [r3, #24]
20000f98:	687b      	ldr	r3, [r7, #4]
20000f9a:	43d9      	mvns	r1, r3
20000f9c:	4b03      	ldr	r3, [pc, #12]	; (20000fac <RCC_AHB3PeriphResetCmd+0x3c>)
20000f9e:	400a      	ands	r2, r1
20000fa0:	619a      	str	r2, [r3, #24]
}
20000fa2:	46c0      	nop			; (mov r8, r8)
20000fa4:	46bd      	mov	sp, r7
20000fa6:	b002      	add	sp, #8
20000fa8:	bd80      	pop	{r7, pc}
20000faa:	46c0      	nop			; (mov r8, r8)
20000fac:	40023800 	andmi	r3, r2, r0, lsl #16

20000fb0 <RCC_APB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
20000fb0:	b580      	push	{r7, lr}
20000fb2:	b082      	sub	sp, #8
20000fb4:	af00      	add	r7, sp, #0
20000fb6:	6078      	str	r0, [r7, #4]
20000fb8:	000a      	movs	r2, r1
20000fba:	1cfb      	adds	r3, r7, #3
20000fbc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
20000fbe:	1cfb      	adds	r3, r7, #3
20000fc0:	781b      	ldrb	r3, [r3, #0]
20000fc2:	2b00      	cmp	r3, #0
20000fc4:	d006      	beq.n	20000fd4 <RCC_APB1PeriphResetCmd+0x24>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
20000fc6:	4b09      	ldr	r3, [pc, #36]	; (20000fec <RCC_APB1PeriphResetCmd+0x3c>)
20000fc8:	6a19      	ldr	r1, [r3, #32]
20000fca:	4b08      	ldr	r3, [pc, #32]	; (20000fec <RCC_APB1PeriphResetCmd+0x3c>)
20000fcc:	687a      	ldr	r2, [r7, #4]
20000fce:	430a      	orrs	r2, r1
20000fd0:	621a      	str	r2, [r3, #32]
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
  }
}
20000fd2:	e006      	b.n	20000fe2 <RCC_APB1PeriphResetCmd+0x32>
    RCC->APB1RSTR &= ~RCC_APB1Periph;
20000fd4:	4b05      	ldr	r3, [pc, #20]	; (20000fec <RCC_APB1PeriphResetCmd+0x3c>)
20000fd6:	6a1a      	ldr	r2, [r3, #32]
20000fd8:	687b      	ldr	r3, [r7, #4]
20000fda:	43d9      	mvns	r1, r3
20000fdc:	4b03      	ldr	r3, [pc, #12]	; (20000fec <RCC_APB1PeriphResetCmd+0x3c>)
20000fde:	400a      	ands	r2, r1
20000fe0:	621a      	str	r2, [r3, #32]
}
20000fe2:	46c0      	nop			; (mov r8, r8)
20000fe4:	46bd      	mov	sp, r7
20000fe6:	b002      	add	sp, #8
20000fe8:	bd80      	pop	{r7, pc}
20000fea:	46c0      	nop			; (mov r8, r8)
20000fec:	40023800 	andmi	r3, r2, r0, lsl #16

20000ff0 <RCC_APB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
20000ff0:	b580      	push	{r7, lr}
20000ff2:	b082      	sub	sp, #8
20000ff4:	af00      	add	r7, sp, #0
20000ff6:	6078      	str	r0, [r7, #4]
20000ff8:	000a      	movs	r2, r1
20000ffa:	1cfb      	adds	r3, r7, #3
20000ffc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_RESET_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
20000ffe:	1cfb      	adds	r3, r7, #3
20001000:	781b      	ldrb	r3, [r3, #0]
20001002:	2b00      	cmp	r3, #0
20001004:	d006      	beq.n	20001014 <RCC_APB2PeriphResetCmd+0x24>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
20001006:	4b09      	ldr	r3, [pc, #36]	; (2000102c <RCC_APB2PeriphResetCmd+0x3c>)
20001008:	6a59      	ldr	r1, [r3, #36]	; 0x24
2000100a:	4b08      	ldr	r3, [pc, #32]	; (2000102c <RCC_APB2PeriphResetCmd+0x3c>)
2000100c:	687a      	ldr	r2, [r7, #4]
2000100e:	430a      	orrs	r2, r1
20001010:	625a      	str	r2, [r3, #36]	; 0x24
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
  }
}
20001012:	e006      	b.n	20001022 <RCC_APB2PeriphResetCmd+0x32>
    RCC->APB2RSTR &= ~RCC_APB2Periph;
20001014:	4b05      	ldr	r3, [pc, #20]	; (2000102c <RCC_APB2PeriphResetCmd+0x3c>)
20001016:	6a5a      	ldr	r2, [r3, #36]	; 0x24
20001018:	687b      	ldr	r3, [r7, #4]
2000101a:	43d9      	mvns	r1, r3
2000101c:	4b03      	ldr	r3, [pc, #12]	; (2000102c <RCC_APB2PeriphResetCmd+0x3c>)
2000101e:	400a      	ands	r2, r1
20001020:	625a      	str	r2, [r3, #36]	; 0x24
}
20001022:	46c0      	nop			; (mov r8, r8)
20001024:	46bd      	mov	sp, r7
20001026:	b002      	add	sp, #8
20001028:	bd80      	pop	{r7, pc}
2000102a:	46c0      	nop			; (mov r8, r8)
2000102c:	40023800 	andmi	r3, r2, r0, lsl #16

20001030 <RCC_AHB1PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockLPModeCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
20001030:	b580      	push	{r7, lr}
20001032:	b082      	sub	sp, #8
20001034:	af00      	add	r7, sp, #0
20001036:	6078      	str	r0, [r7, #4]
20001038:	000a      	movs	r2, r1
2000103a:	1cfb      	adds	r3, r7, #3
2000103c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_LPMODE_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
2000103e:	1cfb      	adds	r3, r7, #3
20001040:	781b      	ldrb	r3, [r3, #0]
20001042:	2b00      	cmp	r3, #0
20001044:	d006      	beq.n	20001054 <RCC_AHB1PeriphClockLPModeCmd+0x24>
  {
    RCC->AHB1LPENR |= RCC_AHB1Periph;
20001046:	4b09      	ldr	r3, [pc, #36]	; (2000106c <RCC_AHB1PeriphClockLPModeCmd+0x3c>)
20001048:	6d19      	ldr	r1, [r3, #80]	; 0x50
2000104a:	4b08      	ldr	r3, [pc, #32]	; (2000106c <RCC_AHB1PeriphClockLPModeCmd+0x3c>)
2000104c:	687a      	ldr	r2, [r7, #4]
2000104e:	430a      	orrs	r2, r1
20001050:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    RCC->AHB1LPENR &= ~RCC_AHB1Periph;
  }
}
20001052:	e006      	b.n	20001062 <RCC_AHB1PeriphClockLPModeCmd+0x32>
    RCC->AHB1LPENR &= ~RCC_AHB1Periph;
20001054:	4b05      	ldr	r3, [pc, #20]	; (2000106c <RCC_AHB1PeriphClockLPModeCmd+0x3c>)
20001056:	6d1a      	ldr	r2, [r3, #80]	; 0x50
20001058:	687b      	ldr	r3, [r7, #4]
2000105a:	43d9      	mvns	r1, r3
2000105c:	4b03      	ldr	r3, [pc, #12]	; (2000106c <RCC_AHB1PeriphClockLPModeCmd+0x3c>)
2000105e:	400a      	ands	r2, r1
20001060:	651a      	str	r2, [r3, #80]	; 0x50
}
20001062:	46c0      	nop			; (mov r8, r8)
20001064:	46bd      	mov	sp, r7
20001066:	b002      	add	sp, #8
20001068:	bd80      	pop	{r7, pc}
2000106a:	46c0      	nop			; (mov r8, r8)
2000106c:	40023800 	andmi	r3, r2, r0, lsl #16

20001070 <RCC_AHB2PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB2PeriphClockLPModeCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
{
20001070:	b580      	push	{r7, lr}
20001072:	b082      	sub	sp, #8
20001074:	af00      	add	r7, sp, #0
20001076:	6078      	str	r0, [r7, #4]
20001078:	000a      	movs	r2, r1
2000107a:	1cfb      	adds	r3, r7, #3
2000107c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
2000107e:	1cfb      	adds	r3, r7, #3
20001080:	781b      	ldrb	r3, [r3, #0]
20001082:	2b00      	cmp	r3, #0
20001084:	d006      	beq.n	20001094 <RCC_AHB2PeriphClockLPModeCmd+0x24>
  {
    RCC->AHB2LPENR |= RCC_AHB2Periph;
20001086:	4b09      	ldr	r3, [pc, #36]	; (200010ac <RCC_AHB2PeriphClockLPModeCmd+0x3c>)
20001088:	6d59      	ldr	r1, [r3, #84]	; 0x54
2000108a:	4b08      	ldr	r3, [pc, #32]	; (200010ac <RCC_AHB2PeriphClockLPModeCmd+0x3c>)
2000108c:	687a      	ldr	r2, [r7, #4]
2000108e:	430a      	orrs	r2, r1
20001090:	655a      	str	r2, [r3, #84]	; 0x54
  }
  else
  {
    RCC->AHB2LPENR &= ~RCC_AHB2Periph;
  }
}
20001092:	e006      	b.n	200010a2 <RCC_AHB2PeriphClockLPModeCmd+0x32>
    RCC->AHB2LPENR &= ~RCC_AHB2Periph;
20001094:	4b05      	ldr	r3, [pc, #20]	; (200010ac <RCC_AHB2PeriphClockLPModeCmd+0x3c>)
20001096:	6d5a      	ldr	r2, [r3, #84]	; 0x54
20001098:	687b      	ldr	r3, [r7, #4]
2000109a:	43d9      	mvns	r1, r3
2000109c:	4b03      	ldr	r3, [pc, #12]	; (200010ac <RCC_AHB2PeriphClockLPModeCmd+0x3c>)
2000109e:	400a      	ands	r2, r1
200010a0:	655a      	str	r2, [r3, #84]	; 0x54
}
200010a2:	46c0      	nop			; (mov r8, r8)
200010a4:	46bd      	mov	sp, r7
200010a6:	b002      	add	sp, #8
200010a8:	bd80      	pop	{r7, pc}
200010aa:	46c0      	nop			; (mov r8, r8)
200010ac:	40023800 	andmi	r3, r2, r0, lsl #16

200010b0 <RCC_AHB3PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB3PeriphClockLPModeCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
{
200010b0:	b580      	push	{r7, lr}
200010b2:	b082      	sub	sp, #8
200010b4:	af00      	add	r7, sp, #0
200010b6:	6078      	str	r0, [r7, #4]
200010b8:	000a      	movs	r2, r1
200010ba:	1cfb      	adds	r3, r7, #3
200010bc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
200010be:	1cfb      	adds	r3, r7, #3
200010c0:	781b      	ldrb	r3, [r3, #0]
200010c2:	2b00      	cmp	r3, #0
200010c4:	d006      	beq.n	200010d4 <RCC_AHB3PeriphClockLPModeCmd+0x24>
  {
    RCC->AHB3LPENR |= RCC_AHB3Periph;
200010c6:	4b09      	ldr	r3, [pc, #36]	; (200010ec <RCC_AHB3PeriphClockLPModeCmd+0x3c>)
200010c8:	6d99      	ldr	r1, [r3, #88]	; 0x58
200010ca:	4b08      	ldr	r3, [pc, #32]	; (200010ec <RCC_AHB3PeriphClockLPModeCmd+0x3c>)
200010cc:	687a      	ldr	r2, [r7, #4]
200010ce:	430a      	orrs	r2, r1
200010d0:	659a      	str	r2, [r3, #88]	; 0x58
  }
  else
  {
    RCC->AHB3LPENR &= ~RCC_AHB3Periph;
  }
}
200010d2:	e006      	b.n	200010e2 <RCC_AHB3PeriphClockLPModeCmd+0x32>
    RCC->AHB3LPENR &= ~RCC_AHB3Periph;
200010d4:	4b05      	ldr	r3, [pc, #20]	; (200010ec <RCC_AHB3PeriphClockLPModeCmd+0x3c>)
200010d6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
200010d8:	687b      	ldr	r3, [r7, #4]
200010da:	43d9      	mvns	r1, r3
200010dc:	4b03      	ldr	r3, [pc, #12]	; (200010ec <RCC_AHB3PeriphClockLPModeCmd+0x3c>)
200010de:	400a      	ands	r2, r1
200010e0:	659a      	str	r2, [r3, #88]	; 0x58
}
200010e2:	46c0      	nop			; (mov r8, r8)
200010e4:	46bd      	mov	sp, r7
200010e6:	b002      	add	sp, #8
200010e8:	bd80      	pop	{r7, pc}
200010ea:	46c0      	nop			; (mov r8, r8)
200010ec:	40023800 	andmi	r3, r2, r0, lsl #16

200010f0 <RCC_APB1PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockLPModeCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
200010f0:	b580      	push	{r7, lr}
200010f2:	b082      	sub	sp, #8
200010f4:	af00      	add	r7, sp, #0
200010f6:	6078      	str	r0, [r7, #4]
200010f8:	000a      	movs	r2, r1
200010fa:	1cfb      	adds	r3, r7, #3
200010fc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
200010fe:	1cfb      	adds	r3, r7, #3
20001100:	781b      	ldrb	r3, [r3, #0]
20001102:	2b00      	cmp	r3, #0
20001104:	d006      	beq.n	20001114 <RCC_APB1PeriphClockLPModeCmd+0x24>
  {
    RCC->APB1LPENR |= RCC_APB1Periph;
20001106:	4b09      	ldr	r3, [pc, #36]	; (2000112c <RCC_APB1PeriphClockLPModeCmd+0x3c>)
20001108:	6e19      	ldr	r1, [r3, #96]	; 0x60
2000110a:	4b08      	ldr	r3, [pc, #32]	; (2000112c <RCC_APB1PeriphClockLPModeCmd+0x3c>)
2000110c:	687a      	ldr	r2, [r7, #4]
2000110e:	430a      	orrs	r2, r1
20001110:	661a      	str	r2, [r3, #96]	; 0x60
  }
  else
  {
    RCC->APB1LPENR &= ~RCC_APB1Periph;
  }
}
20001112:	e006      	b.n	20001122 <RCC_APB1PeriphClockLPModeCmd+0x32>
    RCC->APB1LPENR &= ~RCC_APB1Periph;
20001114:	4b05      	ldr	r3, [pc, #20]	; (2000112c <RCC_APB1PeriphClockLPModeCmd+0x3c>)
20001116:	6e1a      	ldr	r2, [r3, #96]	; 0x60
20001118:	687b      	ldr	r3, [r7, #4]
2000111a:	43d9      	mvns	r1, r3
2000111c:	4b03      	ldr	r3, [pc, #12]	; (2000112c <RCC_APB1PeriphClockLPModeCmd+0x3c>)
2000111e:	400a      	ands	r2, r1
20001120:	661a      	str	r2, [r3, #96]	; 0x60
}
20001122:	46c0      	nop			; (mov r8, r8)
20001124:	46bd      	mov	sp, r7
20001126:	b002      	add	sp, #8
20001128:	bd80      	pop	{r7, pc}
2000112a:	46c0      	nop			; (mov r8, r8)
2000112c:	40023800 	andmi	r3, r2, r0, lsl #16

20001130 <RCC_APB2PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockLPModeCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
20001130:	b580      	push	{r7, lr}
20001132:	b082      	sub	sp, #8
20001134:	af00      	add	r7, sp, #0
20001136:	6078      	str	r0, [r7, #4]
20001138:	000a      	movs	r2, r1
2000113a:	1cfb      	adds	r3, r7, #3
2000113c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
2000113e:	1cfb      	adds	r3, r7, #3
20001140:	781b      	ldrb	r3, [r3, #0]
20001142:	2b00      	cmp	r3, #0
20001144:	d006      	beq.n	20001154 <RCC_APB2PeriphClockLPModeCmd+0x24>
  {
    RCC->APB2LPENR |= RCC_APB2Periph;
20001146:	4b09      	ldr	r3, [pc, #36]	; (2000116c <RCC_APB2PeriphClockLPModeCmd+0x3c>)
20001148:	6e59      	ldr	r1, [r3, #100]	; 0x64
2000114a:	4b08      	ldr	r3, [pc, #32]	; (2000116c <RCC_APB2PeriphClockLPModeCmd+0x3c>)
2000114c:	687a      	ldr	r2, [r7, #4]
2000114e:	430a      	orrs	r2, r1
20001150:	665a      	str	r2, [r3, #100]	; 0x64
  }
  else
  {
    RCC->APB2LPENR &= ~RCC_APB2Periph;
  }
}
20001152:	e006      	b.n	20001162 <RCC_APB2PeriphClockLPModeCmd+0x32>
    RCC->APB2LPENR &= ~RCC_APB2Periph;
20001154:	4b05      	ldr	r3, [pc, #20]	; (2000116c <RCC_APB2PeriphClockLPModeCmd+0x3c>)
20001156:	6e5a      	ldr	r2, [r3, #100]	; 0x64
20001158:	687b      	ldr	r3, [r7, #4]
2000115a:	43d9      	mvns	r1, r3
2000115c:	4b03      	ldr	r3, [pc, #12]	; (2000116c <RCC_APB2PeriphClockLPModeCmd+0x3c>)
2000115e:	400a      	ands	r2, r1
20001160:	665a      	str	r2, [r3, #100]	; 0x64
}
20001162:	46c0      	nop			; (mov r8, r8)
20001164:	46bd      	mov	sp, r7
20001166:	b002      	add	sp, #8
20001168:	bd80      	pop	{r7, pc}
2000116a:	46c0      	nop			; (mov r8, r8)
2000116c:	40023800 	andmi	r3, r2, r0, lsl #16

20001170 <RCC_LSEModeConfig>:
  *            @arg RCC_LSE_LOWPOWER_MODE:  LSE oscillator in low power mode.
  *            @arg RCC_LSE_HIGHDRIVE_MODE: LSE oscillator in High Drive mode.
  * @retval None
  */
void RCC_LSEModeConfig(uint8_t RCC_Mode)
{
20001170:	b580      	push	{r7, lr}
20001172:	b082      	sub	sp, #8
20001174:	af00      	add	r7, sp, #0
20001176:	0002      	movs	r2, r0
20001178:	1dfb      	adds	r3, r7, #7
2000117a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_LSE_MODE(RCC_Mode));
  
  if(RCC_Mode == RCC_LSE_HIGHDRIVE_MODE)
2000117c:	1dfb      	adds	r3, r7, #7
2000117e:	781b      	ldrb	r3, [r3, #0]
20001180:	2b01      	cmp	r3, #1
20001182:	d106      	bne.n	20001192 <RCC_LSEModeConfig+0x22>
  {
    SET_BIT(RCC->BDCR, RCC_BDCR_LSEMOD);
20001184:	4b08      	ldr	r3, [pc, #32]	; (200011a8 <RCC_LSEModeConfig+0x38>)
20001186:	6f1a      	ldr	r2, [r3, #112]	; 0x70
20001188:	4b07      	ldr	r3, [pc, #28]	; (200011a8 <RCC_LSEModeConfig+0x38>)
2000118a:	2108      	movs	r1, #8
2000118c:	430a      	orrs	r2, r1
2000118e:	671a      	str	r2, [r3, #112]	; 0x70
  }
  else
  {
    CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEMOD);
  }
}
20001190:	e005      	b.n	2000119e <RCC_LSEModeConfig+0x2e>
    CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEMOD);
20001192:	4b05      	ldr	r3, [pc, #20]	; (200011a8 <RCC_LSEModeConfig+0x38>)
20001194:	6f1a      	ldr	r2, [r3, #112]	; 0x70
20001196:	4b04      	ldr	r3, [pc, #16]	; (200011a8 <RCC_LSEModeConfig+0x38>)
20001198:	2108      	movs	r1, #8
2000119a:	438a      	bics	r2, r1
2000119c:	671a      	str	r2, [r3, #112]	; 0x70
}
2000119e:	46c0      	nop			; (mov r8, r8)
200011a0:	46bd      	mov	sp, r7
200011a2:	b002      	add	sp, #8
200011a4:	bd80      	pop	{r7, pc}
200011a6:	46c0      	nop			; (mov r8, r8)
200011a8:	40023800 	andmi	r3, r2, r0, lsl #16

200011ac <RCC_ITConfig>:
  * @param  NewState: new state of the specified RCC interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_ITConfig(uint8_t RCC_IT, FunctionalState NewState)
{
200011ac:	b580      	push	{r7, lr}
200011ae:	b082      	sub	sp, #8
200011b0:	af00      	add	r7, sp, #0
200011b2:	0002      	movs	r2, r0
200011b4:	1dfb      	adds	r3, r7, #7
200011b6:	701a      	strb	r2, [r3, #0]
200011b8:	1dbb      	adds	r3, r7, #6
200011ba:	1c0a      	adds	r2, r1, #0
200011bc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_IT(RCC_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
200011be:	1dbb      	adds	r3, r7, #6
200011c0:	781b      	ldrb	r3, [r3, #0]
200011c2:	2b00      	cmp	r3, #0
200011c4:	d009      	beq.n	200011da <RCC_ITConfig+0x2e>
  {
    /* Perform Byte access to RCC_CIR[14:8] bits to enable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS |= RCC_IT;
200011c6:	4b0c      	ldr	r3, [pc, #48]	; (200011f8 <RCC_ITConfig+0x4c>)
200011c8:	781b      	ldrb	r3, [r3, #0]
200011ca:	b2da      	uxtb	r2, r3
200011cc:	490a      	ldr	r1, [pc, #40]	; (200011f8 <RCC_ITConfig+0x4c>)
200011ce:	1dfb      	adds	r3, r7, #7
200011d0:	781b      	ldrb	r3, [r3, #0]
200011d2:	4313      	orrs	r3, r2
200011d4:	b2db      	uxtb	r3, r3
200011d6:	700b      	strb	r3, [r1, #0]
  else
  {
    /* Perform Byte access to RCC_CIR[14:8] bits to disable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS &= (uint8_t)~RCC_IT;
  }
}
200011d8:	e00a      	b.n	200011f0 <RCC_ITConfig+0x44>
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS &= (uint8_t)~RCC_IT;
200011da:	4b07      	ldr	r3, [pc, #28]	; (200011f8 <RCC_ITConfig+0x4c>)
200011dc:	781b      	ldrb	r3, [r3, #0]
200011de:	b2db      	uxtb	r3, r3
200011e0:	1dfa      	adds	r2, r7, #7
200011e2:	7812      	ldrb	r2, [r2, #0]
200011e4:	43d2      	mvns	r2, r2
200011e6:	b2d2      	uxtb	r2, r2
200011e8:	4903      	ldr	r1, [pc, #12]	; (200011f8 <RCC_ITConfig+0x4c>)
200011ea:	4013      	ands	r3, r2
200011ec:	b2db      	uxtb	r3, r3
200011ee:	700b      	strb	r3, [r1, #0]
}
200011f0:	46c0      	nop			; (mov r8, r8)
200011f2:	46bd      	mov	sp, r7
200011f4:	b002      	add	sp, #8
200011f6:	bd80      	pop	{r7, pc}
200011f8:	4002380d 	andmi	r3, r2, sp, lsl #16

200011fc <RCC_GetFlagStatus>:
  *            @arg RCC_FLAG_WWDGRST: Window Watchdog reset
  *            @arg RCC_FLAG_LPWRRST: Low Power reset
  * @retval The new state of RCC_FLAG (SET or RESET).
  */
FlagStatus RCC_GetFlagStatus(uint8_t RCC_FLAG)
{
200011fc:	b580      	push	{r7, lr}
200011fe:	b086      	sub	sp, #24
20001200:	af00      	add	r7, sp, #0
20001202:	0002      	movs	r2, r0
20001204:	1dfb      	adds	r3, r7, #7
20001206:	701a      	strb	r2, [r3, #0]
  uint32_t tmp = 0;
20001208:	2300      	movs	r3, #0
2000120a:	60fb      	str	r3, [r7, #12]
  uint32_t statusreg = 0;
2000120c:	2300      	movs	r3, #0
2000120e:	617b      	str	r3, [r7, #20]
  FlagStatus bitstatus = RESET;
20001210:	2313      	movs	r3, #19
20001212:	18fb      	adds	r3, r7, r3
20001214:	2200      	movs	r2, #0
20001216:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_FLAG(RCC_FLAG));

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
20001218:	1dfb      	adds	r3, r7, #7
2000121a:	781b      	ldrb	r3, [r3, #0]
2000121c:	095b      	lsrs	r3, r3, #5
2000121e:	b2db      	uxtb	r3, r3
20001220:	60fb      	str	r3, [r7, #12]
  if (tmp == 1)               /* The flag to check is in CR register */
20001222:	68fb      	ldr	r3, [r7, #12]
20001224:	2b01      	cmp	r3, #1
20001226:	d103      	bne.n	20001230 <RCC_GetFlagStatus+0x34>
  {
    statusreg = RCC->CR;
20001228:	4b14      	ldr	r3, [pc, #80]	; (2000127c <RCC_GetFlagStatus+0x80>)
2000122a:	681b      	ldr	r3, [r3, #0]
2000122c:	617b      	str	r3, [r7, #20]
2000122e:	e009      	b.n	20001244 <RCC_GetFlagStatus+0x48>
  }
  else if (tmp == 2)          /* The flag to check is in BDCR register */
20001230:	68fb      	ldr	r3, [r7, #12]
20001232:	2b02      	cmp	r3, #2
20001234:	d103      	bne.n	2000123e <RCC_GetFlagStatus+0x42>
  {
    statusreg = RCC->BDCR;
20001236:	4b11      	ldr	r3, [pc, #68]	; (2000127c <RCC_GetFlagStatus+0x80>)
20001238:	6f1b      	ldr	r3, [r3, #112]	; 0x70
2000123a:	617b      	str	r3, [r7, #20]
2000123c:	e002      	b.n	20001244 <RCC_GetFlagStatus+0x48>
  }
  else                       /* The flag to check is in CSR register */
  {
    statusreg = RCC->CSR;
2000123e:	4b0f      	ldr	r3, [pc, #60]	; (2000127c <RCC_GetFlagStatus+0x80>)
20001240:	6f5b      	ldr	r3, [r3, #116]	; 0x74
20001242:	617b      	str	r3, [r7, #20]
  }

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_MASK;
20001244:	1dfb      	adds	r3, r7, #7
20001246:	781b      	ldrb	r3, [r3, #0]
20001248:	221f      	movs	r2, #31
2000124a:	4013      	ands	r3, r2
2000124c:	60fb      	str	r3, [r7, #12]
  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
2000124e:	697a      	ldr	r2, [r7, #20]
20001250:	68fb      	ldr	r3, [r7, #12]
20001252:	40da      	lsrs	r2, r3
20001254:	0013      	movs	r3, r2
20001256:	2201      	movs	r2, #1
20001258:	4013      	ands	r3, r2
2000125a:	d004      	beq.n	20001266 <RCC_GetFlagStatus+0x6a>
  {
    bitstatus = SET;
2000125c:	2313      	movs	r3, #19
2000125e:	18fb      	adds	r3, r7, r3
20001260:	2201      	movs	r2, #1
20001262:	701a      	strb	r2, [r3, #0]
20001264:	e003      	b.n	2000126e <RCC_GetFlagStatus+0x72>
  }
  else
  {
    bitstatus = RESET;
20001266:	2313      	movs	r3, #19
20001268:	18fb      	adds	r3, r7, r3
2000126a:	2200      	movs	r2, #0
2000126c:	701a      	strb	r2, [r3, #0]
  }
  /* Return the flag status */
  return bitstatus;
2000126e:	2313      	movs	r3, #19
20001270:	18fb      	adds	r3, r7, r3
20001272:	781b      	ldrb	r3, [r3, #0]
}
20001274:	0018      	movs	r0, r3
20001276:	46bd      	mov	sp, r7
20001278:	b006      	add	sp, #24
2000127a:	bd80      	pop	{r7, pc}
2000127c:	40023800 	andmi	r3, r2, r0, lsl #16

20001280 <RCC_ClearFlag>:
  *         RCC_FLAG_IWDGRST, RCC_FLAG_WWDGRST, RCC_FLAG_LPWRRST
  * @param  None
  * @retval None
  */
void RCC_ClearFlag(void)
{
20001280:	b580      	push	{r7, lr}
20001282:	af00      	add	r7, sp, #0
  /* Set RMVF bit to clear the reset flags */
  RCC->CSR |= RCC_CSR_RMVF;
20001284:	4b04      	ldr	r3, [pc, #16]	; (20001298 <RCC_ClearFlag+0x18>)
20001286:	6f5a      	ldr	r2, [r3, #116]	; 0x74
20001288:	4b03      	ldr	r3, [pc, #12]	; (20001298 <RCC_ClearFlag+0x18>)
2000128a:	2180      	movs	r1, #128	; 0x80
2000128c:	0449      	lsls	r1, r1, #17
2000128e:	430a      	orrs	r2, r1
20001290:	675a      	str	r2, [r3, #116]	; 0x74
}
20001292:	46c0      	nop			; (mov r8, r8)
20001294:	46bd      	mov	sp, r7
20001296:	bd80      	pop	{r7, pc}
20001298:	40023800 	andmi	r3, r2, r0, lsl #16

2000129c <RCC_GetITStatus>:
  *            @arg RCC_IT_PLLSAIRDY: PLLSAI clock ready interrupt (only for STM32F42xxx/43xxx/446xx/469xx/479xx devices)
  *            @arg RCC_IT_CSS: Clock Security System interrupt
  * @retval The new state of RCC_IT (SET or RESET).
  */
ITStatus RCC_GetITStatus(uint8_t RCC_IT)
{
2000129c:	b580      	push	{r7, lr}
2000129e:	b084      	sub	sp, #16
200012a0:	af00      	add	r7, sp, #0
200012a2:	0002      	movs	r2, r0
200012a4:	1dfb      	adds	r3, r7, #7
200012a6:	701a      	strb	r2, [r3, #0]
  ITStatus bitstatus = RESET;
200012a8:	230f      	movs	r3, #15
200012aa:	18fb      	adds	r3, r7, r3
200012ac:	2200      	movs	r2, #0
200012ae:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_GET_IT(RCC_IT));

  /* Check the status of the specified RCC interrupt */
  if ((RCC->CIR & RCC_IT) != (uint32_t)RESET)
200012b0:	4b0a      	ldr	r3, [pc, #40]	; (200012dc <RCC_GetITStatus+0x40>)
200012b2:	68db      	ldr	r3, [r3, #12]
200012b4:	1dfa      	adds	r2, r7, #7
200012b6:	7812      	ldrb	r2, [r2, #0]
200012b8:	4013      	ands	r3, r2
200012ba:	d004      	beq.n	200012c6 <RCC_GetITStatus+0x2a>
  {
    bitstatus = SET;
200012bc:	230f      	movs	r3, #15
200012be:	18fb      	adds	r3, r7, r3
200012c0:	2201      	movs	r2, #1
200012c2:	701a      	strb	r2, [r3, #0]
200012c4:	e003      	b.n	200012ce <RCC_GetITStatus+0x32>
  }
  else
  {
    bitstatus = RESET;
200012c6:	230f      	movs	r3, #15
200012c8:	18fb      	adds	r3, r7, r3
200012ca:	2200      	movs	r2, #0
200012cc:	701a      	strb	r2, [r3, #0]
  }
  /* Return the RCC_IT status */
  return  bitstatus;
200012ce:	230f      	movs	r3, #15
200012d0:	18fb      	adds	r3, r7, r3
200012d2:	781b      	ldrb	r3, [r3, #0]
}
200012d4:	0018      	movs	r0, r3
200012d6:	46bd      	mov	sp, r7
200012d8:	b004      	add	sp, #16
200012da:	bd80      	pop	{r7, pc}
200012dc:	40023800 	andmi	r3, r2, r0, lsl #16

200012e0 <RCC_ClearITPendingBit>:
  *            @arg RCC_IT_PLLSAIRDY: PLLSAI ready interrupt (only for STM32F42xxx/43xxx/446xx/469xx/479xx devices) 
  *            @arg RCC_IT_CSS: Clock Security System interrupt
  * @retval None
  */
void RCC_ClearITPendingBit(uint8_t RCC_IT)
{
200012e0:	b580      	push	{r7, lr}
200012e2:	b082      	sub	sp, #8
200012e4:	af00      	add	r7, sp, #0
200012e6:	0002      	movs	r2, r0
200012e8:	1dfb      	adds	r3, r7, #7
200012ea:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_CLEAR_IT(RCC_IT));

  /* Perform Byte access to RCC_CIR[23:16] bits to clear the selected interrupt
     pending bits */
  *(__IO uint8_t *) CIR_BYTE3_ADDRESS = RCC_IT;
200012ec:	4a03      	ldr	r2, [pc, #12]	; (200012fc <RCC_ClearITPendingBit+0x1c>)
200012ee:	1dfb      	adds	r3, r7, #7
200012f0:	781b      	ldrb	r3, [r3, #0]
200012f2:	7013      	strb	r3, [r2, #0]
}
200012f4:	46c0      	nop			; (mov r8, r8)
200012f6:	46bd      	mov	sp, r7
200012f8:	b002      	add	sp, #8
200012fa:	bd80      	pop	{r7, pc}
200012fc:	4002380e 	andmi	r3, r2, lr, lsl #16

20001300 <__udivsi3>:
20001300:	2200      	movs	r2, #0
20001302:	0843      	lsrs	r3, r0, #1
20001304:	428b      	cmp	r3, r1
20001306:	d374      	bcc.n	200013f2 <__udivsi3+0xf2>
20001308:	0903      	lsrs	r3, r0, #4
2000130a:	428b      	cmp	r3, r1
2000130c:	d35f      	bcc.n	200013ce <__udivsi3+0xce>
2000130e:	0a03      	lsrs	r3, r0, #8
20001310:	428b      	cmp	r3, r1
20001312:	d344      	bcc.n	2000139e <__udivsi3+0x9e>
20001314:	0b03      	lsrs	r3, r0, #12
20001316:	428b      	cmp	r3, r1
20001318:	d328      	bcc.n	2000136c <__udivsi3+0x6c>
2000131a:	0c03      	lsrs	r3, r0, #16
2000131c:	428b      	cmp	r3, r1
2000131e:	d30d      	bcc.n	2000133c <__udivsi3+0x3c>
20001320:	22ff      	movs	r2, #255	; 0xff
20001322:	0209      	lsls	r1, r1, #8
20001324:	ba12      	rev	r2, r2
20001326:	0c03      	lsrs	r3, r0, #16
20001328:	428b      	cmp	r3, r1
2000132a:	d302      	bcc.n	20001332 <__udivsi3+0x32>
2000132c:	1212      	asrs	r2, r2, #8
2000132e:	0209      	lsls	r1, r1, #8
20001330:	d065      	beq.n	200013fe <__udivsi3+0xfe>
20001332:	0b03      	lsrs	r3, r0, #12
20001334:	428b      	cmp	r3, r1
20001336:	d319      	bcc.n	2000136c <__udivsi3+0x6c>
20001338:	e000      	b.n	2000133c <__udivsi3+0x3c>
2000133a:	0a09      	lsrs	r1, r1, #8
2000133c:	0bc3      	lsrs	r3, r0, #15
2000133e:	428b      	cmp	r3, r1
20001340:	d301      	bcc.n	20001346 <__udivsi3+0x46>
20001342:	03cb      	lsls	r3, r1, #15
20001344:	1ac0      	subs	r0, r0, r3
20001346:	4152      	adcs	r2, r2
20001348:	0b83      	lsrs	r3, r0, #14
2000134a:	428b      	cmp	r3, r1
2000134c:	d301      	bcc.n	20001352 <__udivsi3+0x52>
2000134e:	038b      	lsls	r3, r1, #14
20001350:	1ac0      	subs	r0, r0, r3
20001352:	4152      	adcs	r2, r2
20001354:	0b43      	lsrs	r3, r0, #13
20001356:	428b      	cmp	r3, r1
20001358:	d301      	bcc.n	2000135e <__udivsi3+0x5e>
2000135a:	034b      	lsls	r3, r1, #13
2000135c:	1ac0      	subs	r0, r0, r3
2000135e:	4152      	adcs	r2, r2
20001360:	0b03      	lsrs	r3, r0, #12
20001362:	428b      	cmp	r3, r1
20001364:	d301      	bcc.n	2000136a <__udivsi3+0x6a>
20001366:	030b      	lsls	r3, r1, #12
20001368:	1ac0      	subs	r0, r0, r3
2000136a:	4152      	adcs	r2, r2
2000136c:	0ac3      	lsrs	r3, r0, #11
2000136e:	428b      	cmp	r3, r1
20001370:	d301      	bcc.n	20001376 <__udivsi3+0x76>
20001372:	02cb      	lsls	r3, r1, #11
20001374:	1ac0      	subs	r0, r0, r3
20001376:	4152      	adcs	r2, r2
20001378:	0a83      	lsrs	r3, r0, #10
2000137a:	428b      	cmp	r3, r1
2000137c:	d301      	bcc.n	20001382 <__udivsi3+0x82>
2000137e:	028b      	lsls	r3, r1, #10
20001380:	1ac0      	subs	r0, r0, r3
20001382:	4152      	adcs	r2, r2
20001384:	0a43      	lsrs	r3, r0, #9
20001386:	428b      	cmp	r3, r1
20001388:	d301      	bcc.n	2000138e <__udivsi3+0x8e>
2000138a:	024b      	lsls	r3, r1, #9
2000138c:	1ac0      	subs	r0, r0, r3
2000138e:	4152      	adcs	r2, r2
20001390:	0a03      	lsrs	r3, r0, #8
20001392:	428b      	cmp	r3, r1
20001394:	d301      	bcc.n	2000139a <__udivsi3+0x9a>
20001396:	020b      	lsls	r3, r1, #8
20001398:	1ac0      	subs	r0, r0, r3
2000139a:	4152      	adcs	r2, r2
2000139c:	d2cd      	bcs.n	2000133a <__udivsi3+0x3a>
2000139e:	09c3      	lsrs	r3, r0, #7
200013a0:	428b      	cmp	r3, r1
200013a2:	d301      	bcc.n	200013a8 <__udivsi3+0xa8>
200013a4:	01cb      	lsls	r3, r1, #7
200013a6:	1ac0      	subs	r0, r0, r3
200013a8:	4152      	adcs	r2, r2
200013aa:	0983      	lsrs	r3, r0, #6
200013ac:	428b      	cmp	r3, r1
200013ae:	d301      	bcc.n	200013b4 <__udivsi3+0xb4>
200013b0:	018b      	lsls	r3, r1, #6
200013b2:	1ac0      	subs	r0, r0, r3
200013b4:	4152      	adcs	r2, r2
200013b6:	0943      	lsrs	r3, r0, #5
200013b8:	428b      	cmp	r3, r1
200013ba:	d301      	bcc.n	200013c0 <__udivsi3+0xc0>
200013bc:	014b      	lsls	r3, r1, #5
200013be:	1ac0      	subs	r0, r0, r3
200013c0:	4152      	adcs	r2, r2
200013c2:	0903      	lsrs	r3, r0, #4
200013c4:	428b      	cmp	r3, r1
200013c6:	d301      	bcc.n	200013cc <__udivsi3+0xcc>
200013c8:	010b      	lsls	r3, r1, #4
200013ca:	1ac0      	subs	r0, r0, r3
200013cc:	4152      	adcs	r2, r2
200013ce:	08c3      	lsrs	r3, r0, #3
200013d0:	428b      	cmp	r3, r1
200013d2:	d301      	bcc.n	200013d8 <__udivsi3+0xd8>
200013d4:	00cb      	lsls	r3, r1, #3
200013d6:	1ac0      	subs	r0, r0, r3
200013d8:	4152      	adcs	r2, r2
200013da:	0883      	lsrs	r3, r0, #2
200013dc:	428b      	cmp	r3, r1
200013de:	d301      	bcc.n	200013e4 <__udivsi3+0xe4>
200013e0:	008b      	lsls	r3, r1, #2
200013e2:	1ac0      	subs	r0, r0, r3
200013e4:	4152      	adcs	r2, r2
200013e6:	0843      	lsrs	r3, r0, #1
200013e8:	428b      	cmp	r3, r1
200013ea:	d301      	bcc.n	200013f0 <__udivsi3+0xf0>
200013ec:	004b      	lsls	r3, r1, #1
200013ee:	1ac0      	subs	r0, r0, r3
200013f0:	4152      	adcs	r2, r2
200013f2:	1a41      	subs	r1, r0, r1
200013f4:	d200      	bcs.n	200013f8 <__udivsi3+0xf8>
200013f6:	4601      	mov	r1, r0
200013f8:	4152      	adcs	r2, r2
200013fa:	4610      	mov	r0, r2
200013fc:	4770      	bx	lr
200013fe:	e7ff      	b.n	20001400 <__udivsi3+0x100>
20001400:	b501      	push	{r0, lr}
20001402:	2000      	movs	r0, #0
20001404:	f000 f806 	bl	20001414 <__aeabi_idiv0>
20001408:	bd02      	pop	{r1, pc}
2000140a:	46c0      	nop			; (mov r8, r8)

2000140c <__aeabi_uidivmod>:
2000140c:	2900      	cmp	r1, #0
2000140e:	d0f7      	beq.n	20001400 <__udivsi3+0x100>
20001410:	e776      	b.n	20001300 <__udivsi3>
20001412:	4770      	bx	lr

20001414 <__aeabi_idiv0>:
20001414:	4770      	bx	lr
20001416:	46c0      	nop			; (mov r8, r8)

20001418 <APBAHBPrescTable>:
20001418:	00000000 	andeq	r0, r0, r0
2000141c:	04030201 	streq	r0, [r3], #-513	; 0xfffffdff
20001420:	04030201 	streq	r0, [r3], #-513	; 0xfffffdff
20001424:	09080706 	stmdbeq	r8, {r1, r2, r8, r9, sl}

Disassembly of section .debug_info:

00000000 <.debug_info>:
       0:	000002e7 	andeq	r0, r0, r7, ror #5
       4:	00000004 	andeq	r0, r0, r4
       8:	01040000 	mrseq	r0, (UNDEF: 4)
       c:	0000008b 	andeq	r0, r0, fp, lsl #1
      10:	0002ca0c 	andeq	ip, r2, ip, lsl #20
      14:	00020900 	andeq	r0, r2, r0, lsl #18
	...
      24:	06010200 	streq	r0, [r1], -r0, lsl #4
      28:	0000013d 	andeq	r0, r0, sp, lsr r1
      2c:	3b080102 	blcc	20043c <startup-0x1fdffbc4>
      30:	02000001 	andeq	r0, r0, #1
      34:	007b0502 	rsbseq	r0, fp, r2, lsl #10
      38:	b6030000 	strlt	r0, [r3], -r0
      3c:	02000001 	andeq	r0, r0, #1
      40:	00004539 	andeq	r4, r0, r9, lsr r5
      44:	07020200 	streq	r0, [r2, -r0, lsl #4]
      48:	00000068 	andeq	r0, r0, r8, rrx
      4c:	00005103 	andeq	r5, r0, r3, lsl #2
      50:	574d0200 	strbpl	r0, [sp, -r0, lsl #4]
      54:	02000000 	andeq	r0, r0, #0
      58:	02650504 	rsbeq	r0, r5, #4, 10	; 0x1000000
      5c:	d2030000 	andle	r0, r3, #0
      60:	02000001 	andeq	r0, r0, #1
      64:	0000694f 	andeq	r6, r0, pc, asr #18
      68:	07040200 	streq	r0, [r4, -r0, lsl #4]
      6c:	00000339 	andeq	r0, r0, r9, lsr r3
      70:	60050802 	andvs	r0, r5, r2, lsl #16
      74:	02000002 	andeq	r0, r0, #2
      78:	03340708 	teqeq	r4, #8, 14	; 0x200000
      7c:	04040000 	streq	r0, [r4], #-0
      80:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
      84:	07040200 	streq	r0, [r4, -r0, lsl #4]
      88:	0000033e 	andeq	r0, r0, lr, lsr r3
      8c:	0001b803 	andeq	fp, r1, r3, lsl #16
      90:	3a240300 	bcc	900c98 <startup-0x1f6ff368>
      94:	05000000 	streq	r0, [r0, #-0]
      98:	0000008c 	andeq	r0, r0, ip, lsl #1
      9c:	00005303 	andeq	r5, r0, r3, lsl #6
      a0:	4c2c0300 	stcmi	3, cr0, [ip], #-0
      a4:	05000000 	streq	r0, [r0, #-0]
      a8:	0000009c 	muleq	r0, ip, r0
      ac:	0001d403 	andeq	sp, r1, r3, lsl #8
      b0:	5e300300 	cdppl	3, 3, cr0, cr0, cr0, {0}
      b4:	05000000 	streq	r0, [r0, #-0]
      b8:	000000ac 	andeq	r0, r0, ip, lsr #1
      bc:	00017d06 	andeq	r7, r1, r6, lsl #26
      c0:	06fa0400 	ldrbteq	r0, [sl], r0, lsl #8
      c4:	000000a7 	andeq	r0, r0, r7, lsr #1
      c8:	00026e07 	andeq	r6, r2, r7, lsl #28
      cc:	ac3b0500 	cfldr32ge	mvfx0, [fp], #-0
      d0:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
      d4:	002c0107 	eoreq	r0, ip, r7, lsl #2
      d8:	5f060000 	svcpl	0x00060000
      dc:	0000ee03 	andeq	lr, r0, r3, lsl #28
      e0:	015f0900 	cmpeq	pc, r0, lsl #18
      e4:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
      e8:	00000134 	andeq	r0, r0, r4, lsr r1
      ec:	280a0001 	stmdacs	sl, {r0}
      f0:	7a05c306 	bvc	170d10 <startup-0x1fe8f2f0>
      f4:	0b000001 	bleq	100 <startup-0x1fffff00>
      f8:	00000085 	andeq	r0, r0, r5, lsl #1
      fc:	b705c506 	strlt	ip, [r5, -r6, lsl #10]
     100:	00000000 	andeq	r0, r0, r0
     104:	00012d0b 	andeq	r2, r1, fp, lsl #26
     108:	05c60600 	strbeq	r0, [r6, #1536]	; 0x600
     10c:	000000b7 	strheq	r0, [r0], -r7
     110:	01ef0b04 	mvneq	r0, r4, lsl #22
     114:	c7060000 	strgt	r0, [r6, -r0]
     118:	0000b705 	andeq	fp, r0, r5, lsl #14
     11c:	4c0b0800 	stcmi	8, cr0, [fp], {-0}
     120:	06000002 	streq	r0, [r0], -r2
     124:	00b705c8 	adcseq	r0, r7, r8, asr #11
     128:	0c0c0000 	stceq	0, cr0, [ip], {-0}
     12c:	00524449 	subseq	r4, r2, r9, asr #8
     130:	b705c906 	strlt	ip, [r5, -r6, lsl #18]
     134:	10000000 	andne	r0, r0, r0
     138:	52444f0c 	subpl	r4, r4, #12, 30	; 0x30
     13c:	05ca0600 	strbeq	r0, [sl, #1536]	; 0x600
     140:	000000b7 	strheq	r0, [r0], -r7
     144:	03170b14 	tsteq	r7, #20, 22	; 0x5000
     148:	cb060000 	blgt	180150 <startup-0x1fe7feb0>
     14c:	00009705 	andeq	r9, r0, r5, lsl #14
     150:	670b1800 	strvs	r1, [fp, -r0, lsl #16]
     154:	06000001 	streq	r0, [r0], -r1
     158:	009705cc 	addseq	r0, r7, ip, asr #11
     15c:	0b1a0000 	bleq	680164 <startup-0x1f97fe9c>
     160:	00000013 	andeq	r0, r0, r3, lsl r0
     164:	b705cd06 	strlt	ip, [r5, -r6, lsl #26]
     168:	1c000000 	stcne	0, cr0, [r0], {-0}
     16c:	5246410c 	subpl	r4, r6, #12, 2
     170:	05ce0600 	strbeq	r0, [lr, #1536]	; 0x600
     174:	0000018a 	andeq	r0, r0, sl, lsl #3
     178:	b70d0020 	strlt	r0, [sp, -r0, lsr #32]
     17c:	8a000000 	bhi	184 <startup-0x1ffffe7c>
     180:	0e000001 	cdpeq	0, 0, cr0, cr0, cr1, {0}
     184:	00000085 	andeq	r0, r0, r5, lsl #1
     188:	7a050001 	bvc	140194 <startup-0x1febfe6c>
     18c:	0f000001 	svceq	0x00000001
     190:	000001fc 	strdeq	r0, [r0], -ip
     194:	ee05cf06 	cdp	15, 0, cr12, cr5, cr6, {0}
     198:	10000000 	andne	r0, r0, r0
     19c:	002c0107 	eoreq	r0, ip, r7, lsl #2
     1a0:	42070000 	andmi	r0, r7, #0
     1a4:	000001c1 	andeq	r0, r0, r1, asr #3
     1a8:	00014909 	andeq	r4, r1, r9, lsl #18
     1ac:	26090000 	strcs	r0, [r9], -r0
     1b0:	01000003 	tsteq	r0, r3
     1b4:	00001809 	andeq	r1, r0, r9, lsl #16
     1b8:	5b090200 	blpl	2409c0 <startup-0x1fdbf640>
     1bc:	03000000 	movweq	r0, #0
     1c0:	034b0300 	movteq	r0, #45824	; 0xb300
     1c4:	47070000 	strmi	r0, [r7, -r0]
     1c8:	0000019b 	muleq	r0, fp, r1
     1cc:	2c010710 	stccs	7, cr0, [r1], {16}
     1d0:	07000000 	streq	r0, [r0, -r0]
     1d4:	0001e64f 	andeq	lr, r1, pc, asr #12
     1d8:	02520900 	subseq	r0, r2, #0, 18
     1dc:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
     1e0:	00000034 	andeq	r0, r0, r4, lsr r0
     1e4:	8b030001 	blhi	c01f0 <startup-0x1ff3fe10>
     1e8:	07000002 	streq	r0, [r0, -r2]
     1ec:	0001cc52 	andeq	ip, r1, r2, asr ip
     1f0:	01071000 	mrseq	r1, (UNDEF: 7)
     1f4:	0000002c 	andeq	r0, r0, ip, lsr #32
     1f8:	02175a07 	andseq	r5, r7, #28672	; 0x7000
     1fc:	42090000 	andmi	r0, r9, #0
     200:	00000000 	andeq	r0, r0, r0
     204:	0001a409 	andeq	sl, r1, r9, lsl #8
     208:	94090100 	strls	r0, [r9], #-256	; 0xffffff00
     20c:	02000001 	andeq	r0, r0, #1
     210:	00016d09 	andeq	r6, r1, r9, lsl #26
     214:	03000300 	movweq	r0, #768	; 0x300
     218:	000001dd 	ldrdeq	r0, [r0], -sp
     21c:	01f15f07 	mvnseq	r5, r7, lsl #30
     220:	07100000 	ldreq	r0, [r0, -r0]
     224:	00002c01 	andeq	r2, r0, r1, lsl #24
     228:	426e0700 	rsbmi	r0, lr, #0, 14
     22c:	09000002 	stmdbeq	r0, {r1}
     230:	000001c1 	andeq	r0, r0, r1, asr #3
     234:	027e0900 	rsbseq	r0, lr, #0, 18
     238:	09010000 	stmdbeq	r1, {}	; <UNPREDICTABLE>
     23c:	00000025 	andeq	r0, r0, r5, lsr #32
     240:	b9030002 	stmdblt	r3, {r1}
     244:	07000002 	streq	r0, [r0, -r2]
     248:	00022272 	andeq	r2, r2, r2, ror r2
     24c:	07081100 	streq	r1, [r8, -r0, lsl #2]
     250:	00029284 	andeq	r9, r2, r4, lsl #5
     254:	031d1200 	tsteq	sp, #0, 4
     258:	86070000 	strhi	r0, [r7], -r0
     25c:	000000ac 	andeq	r0, r0, ip, lsr #1
     260:	01231200 			; <UNDEFINED> instruction: 0x01231200
     264:	89070000 	stmdbhi	r7, {}	; <UNPREDICTABLE>
     268:	000001c1 	andeq	r0, r0, r1, asr #3
     26c:	00081204 	andeq	r1, r8, r4, lsl #4
     270:	8c070000 	stchi	0, cr0, [r7], {-0}
     274:	00000217 	andeq	r0, r0, r7, lsl r2
     278:	029d1205 	addseq	r1, sp, #1342177280	; 0x50000000
     27c:	8f070000 	svchi	0x00070000
     280:	000001e6 	andeq	r0, r0, r6, ror #3
     284:	018a1206 	orreq	r1, sl, r6, lsl #4
     288:	92070000 	andls	r0, r7, #0
     28c:	00000242 	andeq	r0, r0, r2, asr #4
     290:	a8030007 	stmdage	r3, {r0, r1, r2}
     294:	07000002 	streq	r0, [r0, -r2]
     298:	00024d94 	muleq	r2, r4, sp
     29c:	08010200 	stmdaeq	r1, {r9}
     2a0:	00000144 	andeq	r0, r0, r4, asr #2
     2a4:	0001f713 	andeq	pc, r1, r3, lsl r7	; <UNPREDICTABLE>
     2a8:	782c0100 	stmdavc	ip!, {r8}
     2ac:	88200000 	stmdahi	r0!, {}	; <UNPREDICTABLE>
     2b0:	01000000 	mrseq	r0, (UNDEF: 0)
     2b4:	0156149c 			; <UNDEFINED> instruction: 0x0156149c
     2b8:	16010000 	strne	r0, [r1], -r0
     2bc:	20000010 	andcs	r0, r0, r0, lsl r0
     2c0:	00000068 	andeq	r0, r0, r8, rrx
     2c4:	02d99c01 	sbcseq	r9, r9, #256	; 0x100
     2c8:	5a150000 	bpl	5402d0 <startup-0x1fabfd30>
     2cc:	01000001 	tsteq	r0, r1
     2d0:	00029218 	andeq	r9, r2, r8, lsl r2
     2d4:	70910200 	addsvc	r0, r1, r0, lsl #4
     2d8:	00001600 	andeq	r1, r0, r0, lsl #12
     2dc:	0c010000 	stceq	0, cr0, [r1], {-0}
     2e0:	20000000 	andcs	r0, r0, r0
     2e4:	0000000c 	andeq	r0, r0, ip
     2e8:	23009c01 	movwcs	r9, #3073	; 0xc01
     2ec:	04000006 	streq	r0, [r0], #-6
     2f0:	00014800 	andeq	r4, r1, r0, lsl #16
     2f4:	8b010400 	blhi	412fc <startup-0x1ffbed04>
     2f8:	0c000000 	stceq	0, cr0, [r0], {-0}
     2fc:	000003e1 	andeq	r0, r0, r1, ror #7
     300:	00000209 	andeq	r0, r0, r9, lsl #4
     304:	20000100 	andcs	r0, r0, r0, lsl #2
     308:	0000050e 	andeq	r0, r0, lr, lsl #10
     30c:	000001dc 	ldrdeq	r0, [r0], -ip
     310:	3d060102 	stfccs	f0, [r6, #-8]
     314:	03000001 	movweq	r0, #1
     318:	0000046b 	andeq	r0, r0, fp, ror #8
     31c:	00372b02 	eorseq	r2, r7, r2, lsl #22
     320:	01020000 	mrseq	r0, (UNDEF: 2)
     324:	00013b08 	andeq	r3, r1, r8, lsl #22
     328:	05020200 	streq	r0, [r2, #-512]	; 0xfffffe00
     32c:	0000007b 	andeq	r0, r0, fp, ror r0
     330:	0001b603 	andeq	fp, r1, r3, lsl #12
     334:	50390200 	eorspl	r0, r9, r0, lsl #4
     338:	02000000 	andeq	r0, r0, #0
     33c:	00680702 	rsbeq	r0, r8, r2, lsl #14
     340:	51030000 	mrspl	r0, (UNDEF: 3)
     344:	02000000 	andeq	r0, r0, #0
     348:	0000624d 	andeq	r6, r0, sp, asr #4
     34c:	05040200 	streq	r0, [r4, #-512]	; 0xfffffe00
     350:	00000265 	andeq	r0, r0, r5, ror #4
     354:	0001d203 	andeq	sp, r1, r3, lsl #4
     358:	744f0200 	strbvc	r0, [pc], #-512	; 360 <startup-0x1ffffca0>
     35c:	02000000 	andeq	r0, r0, #0
     360:	03390704 	teqeq	r9, #4, 14	; 0x100000
     364:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
     368:	00026005 	andeq	r6, r2, r5
     36c:	07080200 	streq	r0, [r8, -r0, lsl #4]
     370:	00000334 	andeq	r0, r0, r4, lsr r3
     374:	69050404 	stmdbvs	r5, {r2, sl}
     378:	0200746e 	andeq	r7, r0, #1845493760	; 0x6e000000
     37c:	033e0704 	teqeq	lr, #4, 14	; 0x100000
     380:	6d030000 	stcvs	0, cr0, [r3, #-0]
     384:	03000004 	movweq	r0, #4
     388:	00002c18 	andeq	r2, r0, r8, lsl ip
     38c:	01b80300 			; <UNDEFINED> instruction: 0x01b80300
     390:	24030000 	strcs	r0, [r3], #-0
     394:	00000045 	andeq	r0, r0, r5, asr #32
     398:	0000a205 	andeq	sl, r0, r5, lsl #4
     39c:	00530300 	subseq	r0, r3, r0, lsl #6
     3a0:	2c030000 	stccs	0, cr0, [r3], {-0}
     3a4:	00000057 	andeq	r0, r0, r7, asr r0
     3a8:	0000b205 	andeq	fp, r0, r5, lsl #4
     3ac:	01d40300 	bicseq	r0, r4, r0, lsl #6
     3b0:	30030000 	andcc	r0, r3, r0
     3b4:	00000069 	andeq	r0, r0, r9, rrx
     3b8:	0000c205 	andeq	ip, r0, r5, lsl #4
     3bc:	017d0600 	cmneq	sp, r0, lsl #12
     3c0:	fa040000 	blx	1003c8 <startup-0x1feffc38>
     3c4:	0000bd06 	andeq	fp, r0, r6, lsl #26
     3c8:	026e0700 	rsbeq	r0, lr, #0, 14
     3cc:	3b050000 	blcc	1403d4 <startup-0x1febfc2c>
     3d0:	000000c2 	andeq	r0, r0, r2, asr #1
     3d4:	37010708 	strcc	r0, [r1, -r8, lsl #14]
     3d8:	06000000 	streq	r0, [r0], -r0
     3dc:	0104035f 	tsteq	r4, pc, asr r3
     3e0:	5f090000 	svcpl	0x00090000
     3e4:	00000001 	andeq	r0, r0, r1
     3e8:	00013409 	andeq	r3, r1, r9, lsl #8
     3ec:	0a000100 	beq	7f4 <startup-0x1ffff80c>
     3f0:	05c30628 	strbeq	r0, [r3, #1576]	; 0x628
     3f4:	00000190 	muleq	r0, r0, r1
     3f8:	0000850b 	andeq	r8, r0, fp, lsl #10
     3fc:	05c50600 	strbeq	r0, [r5, #1536]	; 0x600
     400:	000000cd 	andeq	r0, r0, sp, asr #1
     404:	012d0b00 			; <UNDEFINED> instruction: 0x012d0b00
     408:	c6060000 	strgt	r0, [r6], -r0
     40c:	0000cd05 	andeq	ip, r0, r5, lsl #26
     410:	ef0b0400 	svc	0x000b0400
     414:	06000001 	streq	r0, [r0], -r1
     418:	00cd05c7 	sbceq	r0, sp, r7, asr #11
     41c:	0b080000 	bleq	200424 <startup-0x1fdffbdc>
     420:	0000024c 	andeq	r0, r0, ip, asr #4
     424:	cd05c806 	stcgt	8, cr12, [r5, #-24]	; 0xffffffe8
     428:	0c000000 	stceq	0, cr0, [r0], {-0}
     42c:	5244490c 	subpl	r4, r4, #12, 18	; 0x30000
     430:	05c90600 	strbeq	r0, [r9, #1536]	; 0x600
     434:	000000cd 	andeq	r0, r0, sp, asr #1
     438:	444f0c10 	strbmi	r0, [pc], #-3088	; 440 <startup-0x1ffffbc0>
     43c:	ca060052 	bgt	18058c <startup-0x1fe7fa74>
     440:	0000cd05 	andeq	ip, r0, r5, lsl #26
     444:	170b1400 	strne	r1, [fp, -r0, lsl #8]
     448:	06000003 	streq	r0, [r0], -r3
     44c:	00ad05cb 	adceq	r0, sp, fp, asr #11
     450:	0b180000 	bleq	600458 <startup-0x1f9ffba8>
     454:	00000167 	andeq	r0, r0, r7, ror #2
     458:	ad05cc06 	stcge	12, cr12, [r5, #-24]	; 0xffffffe8
     45c:	1a000000 	bne	464 <startup-0x1ffffb9c>
     460:	0000130b 	andeq	r1, r0, fp, lsl #6
     464:	05cd0600 	strbeq	r0, [sp, #1536]	; 0x600
     468:	000000cd 	andeq	r0, r0, sp, asr #1
     46c:	46410c1c 			; <UNDEFINED> instruction: 0x46410c1c
     470:	ce060052 	mcrgt	0, 0, r0, cr6, cr2, {2}
     474:	0001a005 	andeq	sl, r1, r5
     478:	0d002000 	stceq	0, cr2, [r0, #-0]
     47c:	000000cd 	andeq	r0, r0, sp, asr #1
     480:	000001a0 	andeq	r0, r0, r0, lsr #3
     484:	0000900e 	andeq	r9, r0, lr
     488:	05000100 	streq	r0, [r0, #-256]	; 0xffffff00
     48c:	00000190 	muleq	r0, r0, r1
     490:	0001fc0f 	andeq	pc, r1, pc, lsl #24
     494:	05cf0600 	strbeq	r0, [pc, #1536]	; a9c <startup-0x1ffff564>
     498:	00000104 	andeq	r0, r0, r4, lsl #2
     49c:	37010710 	smladcc	r1, r0, r7, r0
     4a0:	07000000 	streq	r0, [r0, -r0]
     4a4:	0001d742 	andeq	sp, r1, r2, asr #14
     4a8:	01490900 	cmpeq	r9, r0, lsl #18
     4ac:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
     4b0:	00000326 	andeq	r0, r0, r6, lsr #6
     4b4:	00180901 	andseq	r0, r8, r1, lsl #18
     4b8:	09020000 	stmdbeq	r2, {}	; <UNPREDICTABLE>
     4bc:	0000005b 	andeq	r0, r0, fp, asr r0
     4c0:	4b030003 	blmi	c04d4 <startup-0x1ff3fb2c>
     4c4:	07000003 	streq	r0, [r0, -r3]
     4c8:	0001b147 	andeq	fp, r1, r7, asr #2
     4cc:	01071000 	mrseq	r1, (UNDEF: 7)
     4d0:	00000037 	andeq	r0, r0, r7, lsr r0
     4d4:	01fc4f07 	mvnseq	r4, r7, lsl #30
     4d8:	52090000 	andpl	r0, r9, #0
     4dc:	00000002 	andeq	r0, r0, r2
     4e0:	00003409 	andeq	r3, r0, r9, lsl #8
     4e4:	03000100 	movweq	r0, #256	; 0x100
     4e8:	0000028b 	andeq	r0, r0, fp, lsl #5
     4ec:	01e25207 	mvneq	r5, r7, lsl #4
     4f0:	07100000 	ldreq	r0, [r0, -r0]
     4f4:	00003701 	andeq	r3, r0, r1, lsl #14
     4f8:	2d5a0700 	ldclcs	7, cr0, [sl, #-0]
     4fc:	09000002 	stmdbeq	r0, {r1}
     500:	00000042 	andeq	r0, r0, r2, asr #32
     504:	01a40900 			; <UNDEFINED> instruction: 0x01a40900
     508:	09010000 	stmdbeq	r1, {}	; <UNPREDICTABLE>
     50c:	00000194 	muleq	r0, r4, r1
     510:	016d0902 	cmneq	sp, r2, lsl #18
     514:	00030000 	andeq	r0, r3, r0
     518:	0001dd03 	andeq	sp, r1, r3, lsl #26
     51c:	075f0700 	ldrbeq	r0, [pc, -r0, lsl #14]
     520:	10000002 	andne	r0, r0, r2
     524:	00370107 	eorseq	r0, r7, r7, lsl #2
     528:	6e070000 	cdpvs	0, 0, cr0, cr7, cr0, {0}
     52c:	00000258 	andeq	r0, r0, r8, asr r2
     530:	0001c109 	andeq	ip, r1, r9, lsl #2
     534:	7e090000 	cdpvc	0, 0, cr0, cr9, cr0, {0}
     538:	01000002 	tsteq	r0, r2
     53c:	00002509 	andeq	r2, r0, r9, lsl #10
     540:	03000200 	movweq	r0, #512	; 0x200
     544:	000002b9 			; <UNDEFINED> instruction: 0x000002b9
     548:	02387207 	eorseq	r7, r8, #1879048192	; 0x70000000
     54c:	07100000 	ldreq	r0, [r0, -r0]
     550:	00003701 	andeq	r3, r0, r1, lsl #14
     554:	7d7a0700 	ldclvc	7, cr0, [sl, #-0]
     558:	09000002 	stmdbeq	r0, {r1}
     55c:	000003a3 	andeq	r0, r0, r3, lsr #7
     560:	03630900 	cmneq	r3, #0, 18
     564:	00010000 	andeq	r0, r1, r0
     568:	0004e203 	andeq	lr, r4, r3, lsl #4
     56c:	637d0700 	cmnvs	sp, #0, 14
     570:	11000002 	tstne	r0, r2
     574:	cd840708 	stcgt	7, cr0, [r4, #32]
     578:	12000002 	andne	r0, r0, #2
     57c:	0000031d 	andeq	r0, r0, sp, lsl r3
     580:	00c28607 	sbceq	r8, r2, r7, lsl #12
     584:	12000000 	andne	r0, r0, #0
     588:	00000123 	andeq	r0, r0, r3, lsr #2
     58c:	01d78907 	bicseq	r8, r7, r7, lsl #18
     590:	12040000 	andne	r0, r4, #0
     594:	00000008 	andeq	r0, r0, r8
     598:	022d8c07 	eoreq	r8, sp, #1792	; 0x700
     59c:	12050000 	andne	r0, r5, #0
     5a0:	0000029d 	muleq	r0, sp, r2
     5a4:	01fc8f07 	mvnseq	r8, r7, lsl #30
     5a8:	12060000 	andne	r0, r6, #0
     5ac:	0000018a 	andeq	r0, r0, sl, lsl #3
     5b0:	02589207 	subseq	r9, r8, #1879048192	; 0x70000000
     5b4:	00070000 	andeq	r0, r7, r0
     5b8:	0002a803 	andeq	sl, r2, r3, lsl #16
     5bc:	88940700 	ldmhi	r4, {r8, r9, sl}
     5c0:	13000002 	movwne	r0, #2
     5c4:	0000051f 	andeq	r0, r0, pc, lsl r5
     5c8:	6a024301 	bvs	911d4 <startup-0x1ff6ee2c>
     5cc:	a4200005 	strtge	r0, [r0], #-5
     5d0:	01000000 	mrseq	r0, (UNDEF: 0)
     5d4:	00033a9c 	muleq	r3, ip, sl
     5d8:	05021400 	streq	r1, [r2, #-1024]	; 0xfffffc00
     5dc:	43010000 	movwmi	r0, #4096	; 0x1000
     5e0:	00033a02 	andeq	r3, r3, r2, lsl #20
     5e4:	6c910200 	lfmvs	f0, 4, [r1], {0}
     5e8:	0004ad14 	andeq	sl, r4, r4, lsl sp
     5ec:	02430100 	subeq	r0, r3, #0, 2
     5f0:	000000a2 	andeq	r0, r0, r2, lsr #1
     5f4:	146a9102 	strbtne	r9, [sl], #-258	; 0xfffffefe
     5f8:	0000037f 	andeq	r0, r0, pc, ror r3
     5fc:	97024301 	strls	r4, [r2, -r1, lsl #6]
     600:	02000000 	andeq	r0, r0, #0
     604:	87156991 			; <UNDEFINED> instruction: 0x87156991
     608:	01000003 	tsteq	r0, r3
     60c:	00c20245 	sbceq	r0, r2, r5, asr #4
     610:	91020000 	mrsls	r0, (UNDEF: 2)
     614:	05181574 	ldreq	r1, [r8, #-1396]	; 0xfffffa8c
     618:	46010000 	strmi	r0, [r1], -r0
     61c:	0000c202 	andeq	ip, r0, r2, lsl #4
     620:	70910200 	addsvc	r0, r1, r0, lsl #4
     624:	a5041600 	strge	r1, [r4, #-1536]	; 0xfffffa00
     628:	13000001 	movwne	r0, #1
     62c:	00000508 	andeq	r0, r0, r8, lsl #10
     630:	4601f001 	strmi	pc, [r1], -r1
     634:	24200005 	strtcs	r0, [r0], #-5
     638:	01000000 	mrseq	r0, (UNDEF: 0)
     63c:	0003759c 	muleq	r3, ip, r5
     640:	05021400 	streq	r1, [r2, #-1024]	; 0xfffffc00
     644:	f0010000 			; <UNDEFINED> instruction: 0xf0010000
     648:	00033a01 	andeq	r3, r3, r1, lsl #20
     64c:	74910200 	ldrvc	r0, [r1], #512	; 0x200
     650:	00031d14 	andeq	r1, r3, r4, lsl sp
     654:	01f00100 	mvnseq	r0, r0, lsl #2
     658:	000000a2 	andeq	r0, r0, r2, lsr #1
     65c:	00729102 	rsbseq	r9, r2, r2, lsl #2
     660:	0004f713 	andeq	pc, r4, r3, lsl r7	; <UNPREDICTABLE>
     664:	01e00100 	mvneq	r0, r0, lsl #2
     668:	20000528 	andcs	r0, r0, r8, lsr #10
     66c:	0000001e 	andeq	r0, r0, lr, lsl r0
     670:	03aa9c01 			; <UNDEFINED> instruction: 0x03aa9c01
     674:	02140000 	andseq	r0, r4, #0
     678:	01000005 	tsteq	r0, r5
     67c:	033a01e0 	teqeq	sl, #224, 2	; 0x38
     680:	91020000 	mrsls	r0, (UNDEF: 2)
     684:	04a51474 	strteq	r1, [r5], #1140	; 0x474
     688:	e0010000 	and	r0, r1, r0
     68c:	0000a201 	andeq	sl, r0, r1, lsl #4
     690:	72910200 	addsvc	r0, r1, #0, 4
     694:	03ad1300 			; <UNDEFINED> instruction: 0x03ad1300
     698:	c7010000 	strgt	r0, [r1, -r0]
     69c:	0004ee01 	andeq	lr, r4, r1, lsl #28
     6a0:	00003a20 	andeq	r3, r0, r0, lsr #20
     6a4:	ee9c0100 	fmle	f0, f4, f0
     6a8:	14000003 	strne	r0, [r0], #-3
     6ac:	00000502 	andeq	r0, r0, r2, lsl #10
     6b0:	3a01c701 	bcc	722bc <startup-0x1ff8dd44>
     6b4:	02000003 	andeq	r0, r0, #3
     6b8:	1d147491 	cfldrsne	mvf7, [r4, #-580]	; 0xfffffdbc
     6bc:	01000003 	tsteq	r0, r3
     6c0:	00a201c7 	adceq	r0, r2, r7, asr #3
     6c4:	91020000 	mrsls	r0, (UNDEF: 2)
     6c8:	039c1472 	orrseq	r1, ip, #1912602624	; 0x72000000
     6cc:	c7010000 	strgt	r0, [r1, -r0]
     6d0:	00027d01 	andeq	r7, r2, r1, lsl #26
     6d4:	71910200 	orrsvc	r0, r1, r0, lsl #4
     6d8:	03d21300 	bicseq	r1, r2, #0, 6
     6dc:	b1010000 	mrslt	r0, (UNDEF: 1)
     6e0:	0004d001 	andeq	sp, r4, r1
     6e4:	00001e20 	andeq	r1, r0, r0, lsr #28
     6e8:	239c0100 	orrscs	r0, ip, #0, 2
     6ec:	14000004 	strne	r0, [r0], #-4
     6f0:	00000502 	andeq	r0, r0, r2, lsl #10
     6f4:	3a01b101 	bcc	6cb00 <startup-0x1ff93500>
     6f8:	02000003 	andeq	r0, r0, #3
     6fc:	1d147491 	cfldrsne	mvf7, [r4, #-580]	; 0xfffffdbc
     700:	01000003 	tsteq	r0, r3
     704:	00a201b1 	strhteq	r0, [r2], r1
     708:	91020000 	mrsls	r0, (UNDEF: 2)
     70c:	bb130072 	bllt	4c08dc <startup-0x1fb3f724>
     710:	01000003 	tsteq	r0, r3
     714:	04b2019c 	ldrteq	r0, [r2], #412	; 0x19c
     718:	001e2000 	andseq	r2, lr, r0
     71c:	9c010000 	stcls	0, cr0, [r1], {-0}
     720:	00000458 	andeq	r0, r0, r8, asr r4
     724:	00050214 	andeq	r0, r5, r4, lsl r2
     728:	019c0100 	orrseq	r0, ip, r0, lsl #2
     72c:	0000033a 	andeq	r0, r0, sl, lsr r3
     730:	14749102 	ldrbtne	r9, [r4], #-258	; 0xfffffefe
     734:	0000031d 	andeq	r0, r0, sp, lsl r3
     738:	a2019c01 	andge	r9, r1, #256	; 0x100
     73c:	02000000 	andeq	r0, r0, #0
     740:	17007291 			; <UNDEFINED> instruction: 0x17007291
     744:	0000036b 	andeq	r0, r0, fp, ror #6
     748:	a2018801 	andge	r8, r1, #65536	; 0x10000
     74c:	9c000000 	stcls	0, cr0, [r0], {-0}
     750:	16200004 	strtne	r0, [r0], -r4
     754:	01000000 	mrseq	r0, (UNDEF: 0)
     758:	0004829c 	muleq	r4, ip, r2
     75c:	05021400 	streq	r1, [r2, #-1024]	; 0xfffffc00
     760:	88010000 	stmdahi	r1, {}	; <UNPREDICTABLE>
     764:	00033a01 	andeq	r3, r3, r1, lsl #20
     768:	74910200 	ldrvc	r0, [r1], #512	; 0x200
     76c:	05301700 	ldreq	r1, [r0, #-1792]!	; 0xfffff900
     770:	6e010000 	cdpvs	0, 0, cr0, cr1, cr0, {0}
     774:	00009701 	andeq	r9, r0, r1, lsl #14
     778:	00045a00 	andeq	r5, r4, r0, lsl #20
     77c:	00004220 	andeq	r4, r0, r0, lsr #4
     780:	ca9c0100 	bgt	fe700b88 <APBAHBPrescTable+0xde6ff770>
     784:	14000004 	strne	r0, [r0], #-4
     788:	00000502 	andeq	r0, r0, r2, lsl #10
     78c:	3a016e01 	bcc	5bf98 <startup-0x1ffa4068>
     790:	02000003 	andeq	r0, r0, #3
     794:	1d146c91 	ldcne	12, cr6, [r4, #-580]	; 0xfffffdbc
     798:	01000003 	tsteq	r0, r3
     79c:	00a2016e 	adceq	r0, r2, lr, ror #2
     7a0:	91020000 	mrsls	r0, (UNDEF: 2)
     7a4:	048b156a 	streq	r1, [fp], #1386	; 0x56a
     7a8:	70010000 	andvc	r0, r1, r0
     7ac:	00009701 	andeq	r9, r0, r1, lsl #14
     7b0:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
     7b4:	04bc1700 	ldrteq	r1, [ip], #1792	; 0x700
     7b8:	5d010000 	stcpl	0, cr0, [r1, #-0]
     7bc:	0000a201 	andeq	sl, r0, r1, lsl #4
     7c0:	00044400 	andeq	r4, r4, r0, lsl #8
     7c4:	00001620 	andeq	r1, r0, r0, lsr #12
     7c8:	f49c0100 			; <UNDEFINED> instruction: 0xf49c0100
     7cc:	14000004 	strne	r0, [r0], #-4
     7d0:	00000502 	andeq	r0, r0, r2, lsl #10
     7d4:	3a015d01 	bcc	57be0 <startup-0x1ffa8420>
     7d8:	02000003 	andeq	r0, r0, #3
     7dc:	17007491 			; <UNDEFINED> instruction: 0x17007491
     7e0:	00000475 	andeq	r0, r0, r5, ror r4
     7e4:	97014301 	strls	r4, [r1, -r1, lsl #6]
     7e8:	02000000 	andeq	r0, r0, #0
     7ec:	42200004 	eormi	r0, r0, #4
     7f0:	01000000 	mrseq	r0, (UNDEF: 0)
     7f4:	00053c9c 	muleq	r5, ip, ip
     7f8:	05021400 	streq	r1, [r2, #-1024]	; 0xfffffc00
     7fc:	43010000 	movwmi	r0, #4096	; 0x1000
     800:	00033a01 	andeq	r3, r3, r1, lsl #20
     804:	6c910200 	lfmvs	f0, 4, [r1], {0}
     808:	00031d14 	andeq	r1, r3, r4, lsl sp
     80c:	01430100 	mrseq	r0, (UNDEF: 83)
     810:	000000a2 	andeq	r0, r0, r2, lsr #1
     814:	156a9102 	strbne	r9, [sl, #-258]!	; 0xfffffefe
     818:	0000048b 	andeq	r0, r0, fp, lsl #9
     81c:	97014501 	strls	r4, [r1, -r1, lsl #10]
     820:	02000000 	andeq	r0, r0, #0
     824:	13007791 	movwne	r7, #1937	; 0x791
     828:	000004cf 	andeq	r0, r0, pc, asr #9
     82c:	bc011501 	cfstr32lt	mvfx1, [r1], {1}
     830:	46200003 	strtmi	r0, [r0], -r3
     834:	01000000 	mrseq	r0, (UNDEF: 0)
     838:	0005809c 	muleq	r5, ip, r0
     83c:	05021400 	streq	r1, [r2, #-1024]	; 0xfffffc00
     840:	15010000 	strne	r0, [r1, #-0]
     844:	00033a01 	andeq	r3, r3, r1, lsl #20
     848:	6c910200 	lfmvs	f0, 4, [r1], {0}
     84c:	00031d14 	andeq	r1, r3, r4, lsl sp
     850:	01150100 	tsteq	r5, r0, lsl #2
     854:	000000a2 	andeq	r0, r0, r2, lsr #1
     858:	186a9102 	stmdane	sl!, {r1, r8, ip, pc}^
     85c:	00706d74 	rsbseq	r6, r0, r4, ror sp
     860:	cd011701 	stcgt	7, cr1, [r1, #-4]
     864:	02000000 	andeq	r0, r0, #0
     868:	19007491 	stmdbne	r0, {r0, r4, r7, sl, ip, sp, lr}
     86c:	0000038c 	andeq	r0, r0, ip, lsl #7
     870:	0388fe01 	orreq	pc, r8, #1, 28
     874:	00342000 	eorseq	r2, r4, r0
     878:	9c010000 	stcls	0, cr0, [r1], {-0}
     87c:	000005a4 	andeq	r0, r0, r4, lsr #11
     880:	0004951a 	andeq	r9, r4, sl, lsl r5
     884:	a4fe0100 	ldrbtge	r0, [lr], #256	; 0x100
     888:	02000005 	andeq	r0, r0, #5
     88c:	16007491 			; <UNDEFINED> instruction: 0x16007491
     890:	0002cd04 	andeq	ip, r2, r4, lsl #26
     894:	03c81900 	biceq	r1, r8, #0, 18
     898:	ca010000 	bgt	408a0 <startup-0x1ffbf760>
     89c:	20000270 	andcs	r0, r0, r0, ror r2
     8a0:	00000118 	andeq	r0, r0, r8, lsl r1
     8a4:	06069c01 	streq	r9, [r6], -r1, lsl #24
     8a8:	021a0000 	andseq	r0, sl, #0
     8ac:	01000005 	tsteq	r0, r5
     8b0:	00033aca 	andeq	r3, r3, sl, asr #21
     8b4:	64910200 	ldrvs	r0, [r1], #512	; 0x200
     8b8:	0004951a 	andeq	r9, r4, sl, lsl r5
     8bc:	a4ca0100 	strbge	r0, [sl], #256	; 0x100
     8c0:	02000005 	andeq	r0, r0, #5
     8c4:	5c1b6091 	ldcpl	0, cr6, [fp], {145}	; 0x91
     8c8:	01000003 	tsteq	r0, r3
     8cc:	0000c2cc 	andeq	ip, r0, ip, asr #5
     8d0:	74910200 	ldrvc	r0, [r1], #512	; 0x200
     8d4:	736f701c 	cmnvc	pc, #28
     8d8:	c2cc0100 	sbcgt	r0, ip, #0, 2
     8dc:	02000000 	andeq	r0, r0, #0
     8e0:	ec1b7091 	ldc	0, cr7, [fp], {145}	; 0x91
     8e4:	01000004 	tsteq	r0, r4
     8e8:	0000c2cc 	andeq	ip, r0, ip, asr #5
     8ec:	6c910200 	lfmvs	f0, 4, [r1], {0}
     8f0:	045f1d00 	ldrbeq	r1, [pc], #-3328	; 8f8 <startup-0x1ffff708>
     8f4:	7f010000 	svcvc	0x00010000
     8f8:	20000100 	andcs	r0, r0, r0, lsl #2
     8fc:	00000170 	andeq	r0, r0, r0, ror r1
     900:	021a9c01 	andseq	r9, sl, #256	; 0x100
     904:	01000005 	tsteq	r0, r5
     908:	00033a7f 	andeq	r3, r3, pc, ror sl
     90c:	74910200 	ldrvc	r0, [r1], #512	; 0x200
     910:	0e5f0000 	cdpeq	0, 5, cr0, cr15, cr0, {0}
     914:	00040000 	andeq	r0, r4, r0
     918:	00000304 	andeq	r0, r0, r4, lsl #6
     91c:	008b0104 	addeq	r0, fp, r4, lsl #2
     920:	470c0000 	strmi	r0, [ip, -r0]
     924:	09000007 	stmdbeq	r0, {r0, r1, r2}
     928:	10000002 	andne	r0, r0, r2
     92c:	f0200006 			; <UNDEFINED> instruction: 0xf0200006
     930:	9500000c 	strls	r0, [r0, #-12]
     934:	02000004 	andeq	r0, r0, #4
     938:	013d0601 	teqeq	sp, r1, lsl #12
     93c:	6b030000 	blvs	c0944 <startup-0x1ff3f6bc>
     940:	02000004 	andeq	r0, r0, #4
     944:	0000372b 	andeq	r3, r0, fp, lsr #14
     948:	08010200 	stmdaeq	r1, {r9}
     94c:	0000013b 	andeq	r0, r0, fp, lsr r1
     950:	7b050202 	blvc	141160 <startup-0x1febeea0>
     954:	03000000 	movweq	r0, #0
     958:	000001b6 			; <UNDEFINED> instruction: 0x000001b6
     95c:	00503902 	subseq	r3, r0, r2, lsl #18
     960:	02020000 	andeq	r0, r2, #0
     964:	00006807 	andeq	r6, r0, r7, lsl #16
     968:	00510300 	subseq	r0, r1, r0, lsl #6
     96c:	4d020000 	stcmi	0, cr0, [r2, #-0]
     970:	00000062 	andeq	r0, r0, r2, rrx
     974:	65050402 	strvs	r0, [r5, #-1026]	; 0xfffffbfe
     978:	03000002 	movweq	r0, #2
     97c:	000001d2 	ldrdeq	r0, [r0], -r2
     980:	00744f02 	rsbseq	r4, r4, r2, lsl #30
     984:	04020000 	streq	r0, [r2], #-0
     988:	00033907 	andeq	r3, r3, r7, lsl #18
     98c:	05080200 	streq	r0, [r8, #-512]	; 0xfffffe00
     990:	00000260 	andeq	r0, r0, r0, ror #4
     994:	34070802 	strcc	r0, [r7], #-2050	; 0xfffff7fe
     998:	04000003 	streq	r0, [r0], #-3
     99c:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
     9a0:	04020074 	streq	r0, [r2], #-116	; 0xffffff8c
     9a4:	00033e07 	andeq	r3, r3, r7, lsl #28
     9a8:	046d0300 	strbteq	r0, [sp], #-768	; 0xfffffd00
     9ac:	18030000 	stmdane	r3, {}	; <UNPREDICTABLE>
     9b0:	0000002c 	andeq	r0, r0, ip, lsr #32
     9b4:	00009705 	andeq	r9, r0, r5, lsl #14
     9b8:	00a20600 	adceq	r0, r2, r0, lsl #12
     9bc:	b8030000 	stmdalt	r3, {}	; <UNPREDICTABLE>
     9c0:	03000001 	movweq	r0, #1
     9c4:	00004524 	andeq	r4, r0, r4, lsr #10
     9c8:	00530300 	subseq	r0, r3, r0, lsl #6
     9cc:	2c030000 	stccs	0, cr0, [r3], {-0}
     9d0:	00000057 	andeq	r0, r0, r7, asr r0
     9d4:	0000b706 	andeq	fp, r0, r6, lsl #14
     9d8:	01d40300 	bicseq	r0, r4, r0, lsl #6
     9dc:	30030000 	andcc	r0, r3, r0
     9e0:	00000069 	andeq	r0, r0, r9, rrx
     9e4:	0000c706 	andeq	ip, r0, r6, lsl #14
     9e8:	00c70700 	sbceq	r0, r7, r0, lsl #14
     9ec:	00e70000 	rsceq	r0, r7, r0
     9f0:	90080000 	andls	r0, r8, r0
     9f4:	01000000 	mrseq	r0, (UNDEF: 0)
     9f8:	017d0900 	cmneq	sp, r0, lsl #18
     9fc:	fa040000 	blx	100a04 <startup-0x1feff5fc>
     a00:	0000c206 	andeq	ip, r0, r6, lsl #4
     a04:	026e0a00 	rsbeq	r0, lr, #0, 20
     a08:	3b050000 	blcc	140a10 <startup-0x1febf5f0>
     a0c:	000000c7 	andeq	r0, r0, r7, asr #1
     a10:	3701070b 	strcc	r0, [r1, -fp, lsl #14]
     a14:	06000000 	streq	r0, [r0], -r0
     a18:	0119035d 	tsteq	r9, sp, asr r3
     a1c:	a70c0000 	strge	r0, [ip, -r0]
     a20:	00000003 	andeq	r0, r0, r3
     a24:	5445530d 	strbpl	r5, [r5], #-781	; 0xfffffcf3
     a28:	0e000100 	adfeqs	f0, f0, f0
     a2c:	00000a98 	muleq	r0, r8, sl
     a30:	fe035d06 	vsdot.s8	d5, d3, d6[0]
     a34:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
     a38:	00000c2a 	andeq	r0, r0, sl, lsr #24
     a3c:	fe035d06 	vsdot.s8	d5, d3, d6[0]
     a40:	0b000000 	bleq	a48 <startup-0x1ffff5b8>
     a44:	00370107 	eorseq	r0, r7, r7, lsl #2
     a48:	5f060000 	svcpl	0x00060000
     a4c:	00014c03 	andeq	r4, r1, r3, lsl #24
     a50:	015f0c00 	cmpeq	pc, r0, lsl #24
     a54:	0c000000 	stceq	0, cr0, [r0], {-0}
     a58:	00000134 	andeq	r0, r0, r4, lsr r1
     a5c:	ed0e0001 	stc	0, cr0, [lr, #-4]
     a60:	06000009 	streq	r0, [r0], -r9
     a64:	0131035f 	teqeq	r1, pc, asr r3
     a68:	070b0000 	streq	r0, [fp, -r0]
     a6c:	00003701 	andeq	r3, r0, r1, lsl #14
     a70:	03620600 	cmneq	r2, #0, 12
     a74:	00000173 	andeq	r0, r0, r3, ror r1
     a78:	0009880c 	andeq	r8, r9, ip, lsl #16
     a7c:	090c0000 	stmdbeq	ip, {}	; <UNPREDICTABLE>
     a80:	0100000d 	tsteq	r0, sp
     a84:	07e80e00 	strbeq	r0, [r8, r0, lsl #28]!
     a88:	62060000 	andvs	r0, r6, #0
     a8c:	00015803 	andeq	r5, r1, r3, lsl #16
     a90:	06980f00 	ldreq	r0, [r8], r0, lsl #30
     a94:	03420664 	movteq	r0, #9828	; 0x2664
     a98:	43100000 	tstmi	r0, #0
     a9c:	66060052 			; <UNDEFINED> instruction: 0x66060052
     aa0:	0000d206 	andeq	sp, r0, r6, lsl #4
     aa4:	cd110000 	ldcgt	0, cr0, [r1, #-0]
     aa8:	06000007 	streq	r0, [r0], -r7
     aac:	00d20667 	sbcseq	r0, r2, r7, ror #12
     ab0:	11040000 	mrsne	r0, (UNDEF: 4)
     ab4:	00000a46 	andeq	r0, r0, r6, asr #20
     ab8:	d2066806 	andle	r6, r6, #393216	; 0x60000
     abc:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
     ac0:	52494310 	subpl	r4, r9, #16, 6	; 0x40000000
     ac4:	06690600 	strbteq	r0, [r9], -r0, lsl #12
     ac8:	000000d2 	ldrdeq	r0, [r0], -r2
     acc:	067b110c 	ldrbteq	r1, [fp], -ip, lsl #2
     ad0:	6a060000 	bvs	180ad8 <startup-0x1fe7f528>
     ad4:	0000d206 	andeq	sp, r0, r6, lsl #4
     ad8:	07111000 	ldreq	r1, [r1, -r0]
     adc:	0600000c 	streq	r0, [r0], -ip
     ae0:	00d2066b 	sbcseq	r0, r2, fp, ror #12
     ae4:	11140000 	tstne	r4, r0
     ae8:	00000b1e 	andeq	r0, r0, lr, lsl fp
     aec:	d2066c06 	andle	r6, r6, #1536	; 0x600
     af0:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
     af4:	000a4b11 	andeq	r4, sl, r1, lsl fp
     af8:	066d0600 	strbteq	r0, [sp], -r0, lsl #12
     afc:	000000c7 	andeq	r0, r0, r7, asr #1
     b00:	0cc3111c 	stfeqe	f1, [r3], {28}
     b04:	6e060000 	cdpvs	0, 0, cr0, cr6, cr0, {0}
     b08:	0000d206 	andeq	sp, r0, r6, lsl #4
     b0c:	bb112000 	bllt	448b14 <startup-0x1fbb74ec>
     b10:	06000006 	streq	r0, [r0], -r6
     b14:	00d2066f 	sbcseq	r0, r2, pc, ror #12
     b18:	11240000 			; <UNDEFINED> instruction: 0x11240000
     b1c:	00000a55 	andeq	r0, r0, r5, asr sl
     b20:	d7067006 	strle	r7, [r6, -r6]
     b24:	28000000 	stmdacs	r0, {}	; <UNPREDICTABLE>
     b28:	000d3111 	andeq	r3, sp, r1, lsl r1
     b2c:	06710600 	ldrbteq	r0, [r1], -r0, lsl #12
     b30:	000000d2 	ldrdeq	r0, [r0], -r2
     b34:	0c3b1130 	ldfeqs	f1, [fp], #-192	; 0xffffff40
     b38:	72060000 	andvc	r0, r6, #0
     b3c:	0000d206 	andeq	sp, r0, r6, lsl #4
     b40:	c9113400 	ldmdbgt	r1, {sl, ip, sp}
     b44:	06000009 	streq	r0, [r0], -r9
     b48:	00d20673 	sbcseq	r0, r2, r3, ror r6
     b4c:	11380000 	teqne	r8, r0
     b50:	00000a5f 	andeq	r0, r0, pc, asr sl
     b54:	c7067406 	strgt	r7, [r6, -r6, lsl #8]
     b58:	3c000000 	stccc	0, cr0, [r0], {-0}
     b5c:	000c3311 	andeq	r3, ip, r1, lsl r3
     b60:	06750600 	ldrbteq	r0, [r5], -r0, lsl #12
     b64:	000000d2 	ldrdeq	r0, [r0], -r2
     b68:	0b161140 	bleq	585070 <startup-0x1fa7af90>
     b6c:	76060000 	strvc	r0, [r6], -r0
     b70:	0000d206 	andeq	sp, r0, r6, lsl #4
     b74:	69114400 	ldmdbvs	r1, {sl, lr}
     b78:	0600000a 	streq	r0, [r0], -sl
     b7c:	00d70677 	sbcseq	r0, r7, r7, ror r6
     b80:	11480000 	mrsne	r0, (UNDEF: 72)
     b84:	00000633 	andeq	r0, r0, r3, lsr r6
     b88:	d2067806 	andle	r7, r6, #393216	; 0x60000
     b8c:	50000000 	andpl	r0, r0, r0
     b90:	0009e311 	andeq	lr, r9, r1, lsl r3
     b94:	06790600 	ldrbteq	r0, [r9], -r0, lsl #12
     b98:	000000d2 	ldrdeq	r0, [r0], -r2
     b9c:	0cb91154 	ldfeqs	f1, [r9], #336	; 0x150
     ba0:	7a060000 	bvc	180ba8 <startup-0x1fe7f458>
     ba4:	0000d206 	andeq	sp, r0, r6, lsl #4
     ba8:	73115800 	tstvc	r1, #0, 16
     bac:	0600000a 	streq	r0, [r0], -sl
     bb0:	00c7067b 	sbceq	r0, r7, fp, ror r6
     bb4:	115c0000 	cmpne	ip, r0
     bb8:	00000558 	andeq	r0, r0, r8, asr r5
     bbc:	d2067c06 	andle	r7, r6, #1536	; 0x600
     bc0:	60000000 	andvs	r0, r0, r0
     bc4:	00093b11 	andeq	r3, r9, r1, lsl fp
     bc8:	067d0600 	ldrbteq	r0, [sp], -r0, lsl #12
     bcc:	000000d2 	ldrdeq	r0, [r0], -r2
     bd0:	0a7d1164 	beq	1f45168 <startup-0x1e0bae98>
     bd4:	7e060000 	cdpvc	0, 0, cr0, cr6, cr0, {0}
     bd8:	0000d706 	andeq	sp, r0, r6, lsl #14
     bdc:	e0116800 	ands	r6, r1, r0, lsl #16
     be0:	0600000c 	streq	r0, [r0], -ip
     be4:	00d2067f 	sbcseq	r0, r2, pc, ror r6
     be8:	10700000 	rsbsne	r0, r0, r0
     bec:	00525343 	subseq	r5, r2, r3, asr #6
     bf0:	d2068006 	andle	r8, r6, #6
     bf4:	74000000 	strvc	r0, [r0], #-0
     bf8:	000a8711 	andeq	r8, sl, r1, lsl r7
     bfc:	06810600 	streq	r0, [r1], r0, lsl #12
     c00:	000000d7 	ldrdeq	r0, [r0], -r7
     c04:	0cb31178 	ldfeqs	f1, [r3], #480	; 0x1e0
     c08:	82060000 	andhi	r0, r6, #0
     c0c:	0000d206 	andeq	sp, r0, r6, lsl #4
     c10:	e8118000 	ldmda	r1, {pc}
     c14:	06000008 	streq	r0, [r0], -r8
     c18:	00d20683 	sbcseq	r0, r2, r3, lsl #13
     c1c:	11840000 	orrne	r0, r4, r0
     c20:	00000a40 	andeq	r0, r0, r0, asr #20
     c24:	d2068406 	andle	r8, r6, #100663296	; 0x6000000
     c28:	88000000 	stmdahi	r0, {}	; <UNPREDICTABLE>
     c2c:	00066511 	andeq	r6, r6, r1, lsl r5
     c30:	06850600 	streq	r0, [r5], r0, lsl #12
     c34:	000000d2 	ldrdeq	r0, [r0], -r2
     c38:	0cd7118c 	ldfeqe	f1, [r7], {140}	; 0x8c
     c3c:	86060000 	strhi	r0, [r6], -r0
     c40:	0000d206 	andeq	sp, r0, r6, lsl #4
     c44:	84119000 	ldrhi	r9, [r1], #-0
     c48:	06000006 	streq	r0, [r0], -r6
     c4c:	00d20687 	sbcseq	r0, r2, r7, lsl #13
     c50:	00940000 	addseq	r0, r4, r0
     c54:	0008820e 	andeq	r8, r8, lr, lsl #4
     c58:	06890600 	streq	r0, [r9], r0, lsl #12
     c5c:	0000017f 	andeq	r0, r0, pc, ror r1
     c60:	30071012 	andcc	r1, r7, r2, lsl r0
     c64:	00000387 	andeq	r0, r0, r7, lsl #7
     c68:	00059813 	andeq	r9, r5, r3, lsl r8
     c6c:	c7320700 	ldrgt	r0, [r2, -r0, lsl #14]!
     c70:	00000000 	andeq	r0, r0, r0
     c74:	00082c13 	andeq	r2, r8, r3, lsl ip
     c78:	c7330700 	ldrgt	r0, [r3, -r0, lsl #14]!
     c7c:	04000000 	streq	r0, [r0], #-0
     c80:	000b8d13 	andeq	r8, fp, r3, lsl sp
     c84:	c7340700 	ldrgt	r0, [r4, -r0, lsl #14]!
     c88:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
     c8c:	00069413 	andeq	r9, r6, r3, lsl r4
     c90:	c7350700 	ldrgt	r0, [r5, -r0, lsl #14]!
     c94:	0c000000 	stceq	0, cr0, [r0], {-0}
     c98:	0d1f0300 	ldceq	3, cr0, [pc, #-0]	; ca0 <startup-0x1ffff360>
     c9c:	36070000 	strcc	r0, [r7], -r0
     ca0:	0000034e 	andeq	r0, r0, lr, asr #6
     ca4:	0000a707 	andeq	sl, r0, r7, lsl #14
     ca8:	0003a200 	andeq	sl, r3, r0, lsl #4
     cac:	00900800 	addseq	r0, r0, r0, lsl #16
     cb0:	000f0000 	andeq	r0, pc, r0
     cb4:	00039205 	andeq	r9, r3, r5, lsl #4
     cb8:	03a20600 			; <UNDEFINED> instruction: 0x03a20600
     cbc:	9d140000 	ldcls	0, cr0, [r4, #-0]
     cc0:	0100000b 	tsteq	r0, fp
     cc4:	0003a799 	muleq	r3, r9, r7
     cc8:	18030500 	stmdane	r3, {r8, sl}
     ccc:	15200014 	strne	r0, [r0, #-20]!	; 0xffffffec
     cd0:	00000602 	andeq	r0, r0, r2, lsl #12
     cd4:	e00c5e01 	and	r5, ip, r1, lsl #28
     cd8:	20200012 	eorcs	r0, r0, r2, lsl r0
     cdc:	01000000 	mrseq	r0, (UNDEF: 0)
     ce0:	0003e39c 	muleq	r3, ip, r3
     ce4:	06181600 	ldreq	r1, [r8], -r0, lsl #12
     ce8:	5e010000 	cdppl	0, 0, cr0, cr1, cr0, {0}
     cec:	0000970c 	andeq	r9, r0, ip, lsl #14
     cf0:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
     cf4:	0c231700 	stceq	7, cr1, [r3], #-0
     cf8:	3c010000 	stccc	0, cr0, [r1], {-0}
     cfc:	0001250c 	andeq	r2, r1, ip, lsl #10
     d00:	00129c00 	andseq	r9, r2, r0, lsl #24
     d04:	00004420 	andeq	r4, r0, r0, lsr #8
     d08:	1c9c0100 	ldfnes	f0, [ip], {0}
     d0c:	16000004 	strne	r0, [r0], -r4
     d10:	00000618 	andeq	r0, r0, r8, lsl r6
     d14:	970c3c01 	strls	r3, [ip, -r1, lsl #24]
     d18:	02000000 	andeq	r0, r0, #0
     d1c:	8b186f91 	blhi	61cb68 <startup-0x1f9e3498>
     d20:	01000004 	tsteq	r0, r4
     d24:	01250c3e 			; <UNDEFINED> instruction: 0x01250c3e
     d28:	91020000 	mrsls	r0, (UNDEF: 2)
     d2c:	6d190077 	ldcvs	0, cr0, [r9, #-476]	; 0xfffffe24
     d30:	01000006 	tsteq	r0, r6
     d34:	12800c28 	addne	r0, r0, #40, 24	; 0x2800
     d38:	001c2000 	andseq	r2, ip, r0
     d3c:	9c010000 	stcls	0, cr0, [r1], {-0}
     d40:	000a9117 	andeq	r9, sl, r7, lsl r1
     d44:	0bfb0100 	bleq	ffec114c <APBAHBPrescTable+0xdfebfd34>
     d48:	00000119 	andeq	r0, r0, r9, lsl r1
     d4c:	200011fc 	strdcs	r1, [r0], -ip
     d50:	00000084 	andeq	r0, r0, r4, lsl #1
     d54:	04859c01 	streq	r9, [r5], #3073	; 0xc01
     d58:	51160000 	tstpl	r6, r0
     d5c:	01000008 	tsteq	r0, r8
     d60:	00970bfb 			; <UNDEFINED> instruction: 0x00970bfb
     d64:	91020000 	mrsls	r0, (UNDEF: 2)
     d68:	6d741a67 	vldmdbvs	r4!, {s3-s105}
     d6c:	fd010070 	stc2	0, cr0, [r1, #-448]	; 0xfffffe40
     d70:	0000c70b 	andeq	ip, r0, fp, lsl #14
     d74:	6c910200 	lfmvs	f0, 4, [r1], {0}
     d78:	00058e18 	andeq	r8, r5, r8, lsl lr
     d7c:	0bfe0100 	bleq	fff81184 <APBAHBPrescTable+0xdff7fd6c>
     d80:	000000c7 	andeq	r0, r0, r7, asr #1
     d84:	18749102 	ldmdane	r4!, {r1, r8, ip, pc}^
     d88:	0000048b 	andeq	r0, r0, fp, lsl #9
     d8c:	190bff01 	stmdbne	fp, {r0, r8, r9, sl, fp, ip, sp, lr, pc}
     d90:	02000001 	andeq	r0, r0, #1
     d94:	15007391 	strne	r7, [r0, #-913]	; 0xfffffc6f
     d98:	00000cfc 	strdeq	r0, [r0], -ip
     d9c:	ac0bd601 	stcge	6, cr13, [fp], {1}
     da0:	50200011 	eorpl	r0, r0, r1, lsl r0
     da4:	01000000 	mrseq	r0, (UNDEF: 0)
     da8:	0004ba9c 	muleq	r4, ip, sl
     dac:	06181600 	ldreq	r1, [r8], -r0, lsl #12
     db0:	d6010000 	strle	r0, [r1], -r0
     db4:	0000970b 	andeq	r9, r0, fp, lsl #14
     db8:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
     dbc:	0007c416 	andeq	ip, r7, r6, lsl r4
     dc0:	0bd60100 	bleq	ff5811c8 <APBAHBPrescTable+0xdf57fdb0>
     dc4:	0000014c 	andeq	r0, r0, ip, asr #2
     dc8:	00769102 	rsbseq	r9, r6, r2, lsl #2
     dcc:	0009d115 	andeq	sp, r9, r5, lsl r1
     dd0:	0a9e0100 	beq	fe7811d8 <APBAHBPrescTable+0xde77fdc0>
     dd4:	20001170 	andcs	r1, r0, r0, ror r1
     dd8:	0000003c 	andeq	r0, r0, ip, lsr r0
     ddc:	04e09c01 	strbteq	r9, [r0], #3073	; 0xc01
     de0:	27160000 	ldrcs	r0, [r6, -r0]
     de4:	0100000b 	tsteq	r0, fp
     de8:	00970a9e 	umullseq	r0, r7, lr, sl
     dec:	91020000 	mrsls	r0, (UNDEF: 2)
     df0:	48150077 	ldmdami	r5, {r0, r1, r2, r4, r5, r6}
     df4:	01000006 	tsteq	r0, r6
     df8:	11300a86 	teqne	r0, r6, lsl #21
     dfc:	00402000 	subeq	r2, r0, r0
     e00:	9c010000 	stcls	0, cr0, [r1], {-0}
     e04:	00000515 	andeq	r0, r0, r5, lsl r5
     e08:	000c6f16 	andeq	r6, ip, r6, lsl pc
     e0c:	0a860100 	beq	fe181214 <APBAHBPrescTable+0xde17fdfc>
     e10:	000000c7 	andeq	r0, r0, r7, asr #1
     e14:	16749102 	ldrbtne	r9, [r4], -r2, lsl #2
     e18:	000007c4 	andeq	r0, r0, r4, asr #15
     e1c:	4c0a8601 	stcmi	6, cr8, [sl], {1}
     e20:	02000001 	andeq	r0, r0, #1
     e24:	15007391 	strne	r7, [r0, #-913]	; 0xfffffc6f
     e28:	00000b47 	andeq	r0, r0, r7, asr #22
     e2c:	f00a5201 			; <UNDEFINED> instruction: 0xf00a5201
     e30:	40200010 	eormi	r0, r0, r0, lsl r0
     e34:	01000000 	mrseq	r0, (UNDEF: 0)
     e38:	00054a9c 	muleq	r5, ip, sl
     e3c:	083b1600 	ldmdaeq	fp!, {r9, sl, ip}
     e40:	52010000 	andpl	r0, r1, #0
     e44:	0000c70a 	andeq	ip, r0, sl, lsl #14
     e48:	74910200 	ldrvc	r0, [r1], #512	; 0x200
     e4c:	0007c416 	andeq	ip, r7, r6, lsl r4
     e50:	0a520100 	beq	1481258 <startup-0x1eb7eda8>
     e54:	0000014c 	andeq	r0, r0, ip, asr #2
     e58:	00739102 	rsbseq	r9, r3, r2, lsl #2
     e5c:	000c4315 	andeq	r4, ip, r5, lsl r3
     e60:	0a190100 	beq	641268 <startup-0x1f9bed98>
     e64:	200010b0 	strhcs	r1, [r0], -r0
     e68:	00000040 	andeq	r0, r0, r0, asr #32
     e6c:	057f9c01 	ldrbeq	r9, [pc, #-3073]!	; 273 <startup-0x1ffffd8d>
     e70:	45160000 	ldrmi	r0, [r6, #-0]
     e74:	01000009 	tsteq	r0, r9
     e78:	00c70a19 	sbceq	r0, r7, r9, lsl sl
     e7c:	91020000 	mrsls	r0, (UNDEF: 2)
     e80:	07c41674 			; <UNDEFINED> instruction: 0x07c41674
     e84:	19010000 	stmdbne	r1, {}	; <UNPREDICTABLE>
     e88:	00014c0a 	andeq	r4, r1, sl, lsl #24
     e8c:	73910200 	orrsvc	r0, r1, #0, 4
     e90:	08f31500 	ldmeq	r3!, {r8, sl, ip}^
     e94:	fb010000 	blx	40e9e <startup-0x1ffbf162>
     e98:	00107009 	andseq	r7, r0, r9
     e9c:	00004020 	andeq	r4, r0, r0, lsr #32
     ea0:	b49c0100 	ldrlt	r0, [ip], #256	; 0x100
     ea4:	16000005 	strne	r0, [r0], -r5
     ea8:	0000092c 	andeq	r0, r0, ip, lsr #18
     eac:	c709fb01 	strgt	pc, [r9, -r1, lsl #22]
     eb0:	02000000 	andeq	r0, r0, #0
     eb4:	c4167491 	ldrgt	r7, [r6], #-1169	; 0xfffffb6f
     eb8:	01000007 	tsteq	r0, r7
     ebc:	014c09fb 	strdeq	r0, [ip, #-155]	; 0xffffff65
     ec0:	91020000 	mrsls	r0, (UNDEF: 2)
     ec4:	54150073 	ldrpl	r0, [r5], #-115	; 0xffffff8d
     ec8:	0100000d 	tsteq	r0, sp
     ecc:	103009db 	ldrsbtne	r0, [r0], -fp
     ed0:	00402000 	subeq	r2, r0, r0
     ed4:	9c010000 	stcls	0, cr0, [r1], {-0}
     ed8:	000005e9 	andeq	r0, r0, r9, ror #11
     edc:	00062416 	andeq	r2, r6, r6, lsl r4
     ee0:	09db0100 	ldmibeq	fp, {r8}^
     ee4:	000000c7 	andeq	r0, r0, r7, asr #1
     ee8:	16749102 	ldrbtne	r9, [r4], -r2, lsl #2
     eec:	000007c4 	andeq	r0, r0, r4, asr #15
     ef0:	4c09db01 			; <UNDEFINED> instruction: 0x4c09db01
     ef4:	02000001 	andeq	r0, r0, #1
     ef8:	15007391 	strne	r7, [r0, #-913]	; 0xfffffc6f
     efc:	00000a09 	andeq	r0, r0, r9, lsl #20
     f00:	f009aa01 			; <UNDEFINED> instruction: 0xf009aa01
     f04:	4020000f 	eormi	r0, r0, pc
     f08:	01000000 	mrseq	r0, (UNDEF: 0)
     f0c:	00061e9c 	muleq	r6, ip, lr
     f10:	0c6f1600 	stcleq	6, cr1, [pc], #-0	; f18 <startup-0x1ffff0e8>
     f14:	aa010000 	bge	40f1c <startup-0x1ffbf0e4>
     f18:	0000c709 	andeq	ip, r0, r9, lsl #14
     f1c:	74910200 	ldrvc	r0, [r1], #512	; 0x200
     f20:	0007c416 	andeq	ip, r7, r6, lsl r4
     f24:	09aa0100 	stmibeq	sl!, {r8}
     f28:	0000014c 	andeq	r0, r0, ip, asr #2
     f2c:	00739102 	rsbseq	r9, r3, r2, lsl #2
     f30:	0005c215 	andeq	ip, r5, r5, lsl r2
     f34:	097b0100 	ldmdbeq	fp!, {r8}^
     f38:	20000fb0 			; <UNDEFINED> instruction: 0x20000fb0
     f3c:	00000040 	andeq	r0, r0, r0, asr #32
     f40:	06539c01 	ldrbeq	r9, [r3], -r1, lsl #24
     f44:	3b160000 	blcc	580f4c <startup-0x1fa7f0b4>
     f48:	01000008 	tsteq	r0, r8
     f4c:	00c7097b 	sbceq	r0, r7, fp, ror r9
     f50:	91020000 	mrsls	r0, (UNDEF: 2)
     f54:	07c41674 			; <UNDEFINED> instruction: 0x07c41674
     f58:	7b010000 	blvc	40f60 <startup-0x1ffbf0a0>
     f5c:	00014c09 	andeq	r4, r1, r9, lsl #24
     f60:	73910200 	orrsvc	r0, r1, #0, 4
     f64:	06d41500 	ldrbeq	r1, [r4], r0, lsl #10
     f68:	45010000 	strmi	r0, [r1, #-0]
     f6c:	000f7009 	andeq	r7, pc, r9
     f70:	00004020 	andeq	r4, r0, r0, lsr #32
     f74:	889c0100 	ldmhi	ip, {r8}
     f78:	16000006 	strne	r0, [r0], -r6
     f7c:	00000945 	andeq	r0, r0, r5, asr #18
     f80:	c7094501 	strgt	r4, [r9, -r1, lsl #10]
     f84:	02000000 	andeq	r0, r0, #0
     f88:	c4167491 	ldrgt	r7, [r6], #-1169	; 0xfffffb6f
     f8c:	01000007 	tsteq	r0, r7
     f90:	014c0945 	cmpeq	ip, r5, asr #18
     f94:	91020000 	mrsls	r0, (UNDEF: 2)
     f98:	30150073 	andscc	r0, r5, r3, ror r0
     f9c:	0100000b 	tsteq	r0, fp
     fa0:	0f30092a 	svceq	0x0030092a
     fa4:	00402000 	subeq	r2, r0, r0
     fa8:	9c010000 	stcls	0, cr0, [r1], {-0}
     fac:	000006bd 			; <UNDEFINED> instruction: 0x000006bd
     fb0:	00092c16 	andeq	r2, r9, r6, lsl ip
     fb4:	092a0100 	stmdbeq	sl!, {r8}
     fb8:	000000c7 	andeq	r0, r0, r7, asr #1
     fbc:	16749102 	ldrbtne	r9, [r4], -r2, lsl #2
     fc0:	000007c4 	andeq	r0, r0, r4, asr #15
     fc4:	4c092a01 			; <UNDEFINED> instruction: 0x4c092a01
     fc8:	02000001 	andeq	r0, r0, #1
     fcc:	15007391 	strne	r7, [r0, #-913]	; 0xfffffc6f
     fd0:	00000702 	andeq	r0, r0, r2, lsl #14
     fd4:	f0090d01 			; <UNDEFINED> instruction: 0xf0090d01
     fd8:	4020000e 	eormi	r0, r0, lr
     fdc:	01000000 	mrseq	r0, (UNDEF: 0)
     fe0:	0006f29c 	muleq	r6, ip, r2
     fe4:	06241600 	strteq	r1, [r4], -r0, lsl #12
     fe8:	0d010000 	stceq	0, cr0, [r1, #-0]
     fec:	0000c709 	andeq	ip, r0, r9, lsl #14
     ff0:	74910200 	ldrvc	r0, [r1], #512	; 0x200
     ff4:	0007c416 	andeq	ip, r7, r6, lsl r4
     ff8:	090d0100 	stmdbeq	sp, {r8}
     ffc:	0000014c 	andeq	r0, r0, ip, asr #2
    1000:	00739102 	rsbseq	r9, r3, r2, lsl #2
    1004:	000bf015 	andeq	pc, fp, r5, lsl r0	; <UNPREDICTABLE>
    1008:	08e30100 	stmiaeq	r3!, {r8}^
    100c:	20000eb0 			; <UNDEFINED> instruction: 0x20000eb0
    1010:	00000040 	andeq	r0, r0, r0, asr #32
    1014:	07279c01 	streq	r9, [r7, -r1, lsl #24]!
    1018:	6f160000 	svcvs	0x00160000
    101c:	0100000c 	tsteq	r0, ip
    1020:	00c708e3 	sbceq	r0, r7, r3, ror #17
    1024:	91020000 	mrsls	r0, (UNDEF: 2)
    1028:	07c41674 			; <UNDEFINED> instruction: 0x07c41674
    102c:	e3010000 	movw	r0, #4096	; 0x1000
    1030:	00014c08 	andeq	r4, r1, r8, lsl #24
    1034:	73910200 	orrsvc	r0, r1, #0, 4
    1038:	0ce51500 	cfstr64eq	mvdx1, [r5]
    103c:	af010000 	svcge	0x00010000
    1040:	000e7008 	andeq	r7, lr, r8
    1044:	00004020 	andeq	r4, r0, r0, lsr #32
    1048:	5c9c0100 	ldfpls	f0, [ip], {0}
    104c:	16000007 	strne	r0, [r0], -r7
    1050:	0000083b 	andeq	r0, r0, fp, lsr r8
    1054:	c708af01 	strgt	sl, [r8, -r1, lsl #30]
    1058:	02000000 	andeq	r0, r0, #0
    105c:	c4167491 	ldrgt	r7, [r6], #-1169	; 0xfffffb6f
    1060:	01000007 	tsteq	r0, r7
    1064:	014c08af 	smlaltbeq	r0, ip, pc, r8	; <UNPREDICTABLE>
    1068:	91020000 	mrsls	r0, (UNDEF: 2)
    106c:	71150073 	tstvc	r5, r3, ror r0
    1070:	0100000d 	tsteq	r0, sp
    1074:	0e300876 	mrceq	8, 1, r0, cr0, cr6, {3}
    1078:	00402000 	subeq	r2, r0, r0
    107c:	9c010000 	stcls	0, cr0, [r1], {-0}
    1080:	00000791 	muleq	r0, r1, r7
    1084:	00094516 	andeq	r4, r9, r6, lsl r5
    1088:	08760100 	ldmdaeq	r6!, {r8}^
    108c:	000000c7 	andeq	r0, r0, r7, asr #1
    1090:	16749102 	ldrbtne	r9, [r4], -r2, lsl #2
    1094:	000007c4 	andeq	r0, r0, r4, asr #15
    1098:	4c087601 	stcmi	6, cr7, [r8], {1}
    109c:	02000001 	andeq	r0, r0, #1
    10a0:	15007391 	strne	r7, [r0, #-913]	; 0xfffffc6f
    10a4:	000006a4 	andeq	r0, r0, r4, lsr #13
    10a8:	f0085801 			; <UNDEFINED> instruction: 0xf0085801
    10ac:	4020000d 	eormi	r0, r0, sp
    10b0:	01000000 	mrseq	r0, (UNDEF: 0)
    10b4:	0007c69c 	muleq	r7, ip, r6
    10b8:	092c1600 	stmdbeq	ip!, {r9, sl, ip}
    10bc:	58010000 	stmdapl	r1, {}	; <UNPREDICTABLE>
    10c0:	0000c708 	andeq	ip, r0, r8, lsl #14
    10c4:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    10c8:	0007c416 	andeq	ip, r7, r6, lsl r4
    10cc:	08580100 	ldmdaeq	r8, {r8}^
    10d0:	0000014c 	andeq	r0, r0, ip, asr #2
    10d4:	00739102 	rsbseq	r9, r3, r2, lsl #2
    10d8:	000aff15 	andeq	pc, sl, r5, lsl pc	; <UNPREDICTABLE>
    10dc:	08380100 	ldmdaeq	r8!, {r8}
    10e0:	20000db0 			; <UNDEFINED> instruction: 0x20000db0
    10e4:	00000040 	andeq	r0, r0, r0, asr #32
    10e8:	07fb9c01 	ldrbeq	r9, [fp, r1, lsl #24]!
    10ec:	24160000 	ldrcs	r0, [r6], #-0
    10f0:	01000006 	tsteq	r0, r6
    10f4:	00c70838 	sbceq	r0, r7, r8, lsr r8
    10f8:	91020000 	mrsls	r0, (UNDEF: 2)
    10fc:	07c41674 			; <UNDEFINED> instruction: 0x07c41674
    1100:	38010000 	stmdacc	r1, {}	; <UNPREDICTABLE>
    1104:	00014c08 	andeq	r4, r1, r8, lsl #24
    1108:	73910200 	orrsvc	r0, r1, #0, 4
    110c:	0c7e1500 	cfldr64eq	mvdx1, [lr], #-0
    1110:	0e010000 	cdpeq	0, 0, cr0, cr1, cr0, {0}
    1114:	000d9408 	andeq	r9, sp, r8, lsl #8
    1118:	00001c20 	andeq	r1, r0, r0, lsr #24
    111c:	219c0100 	orrscs	r0, ip, r0, lsl #2
    1120:	16000008 	strne	r0, [r0], -r8
    1124:	00000ae0 	andeq	r0, r0, r0, ror #21
    1128:	c7080e01 	strgt	r0, [r8, -r1, lsl #28]
    112c:	02000000 	andeq	r0, r0, #0
    1130:	15007491 	strne	r7, [r0, #-1169]	; 0xfffffb6f
    1134:	000008d3 	ldrdeq	r0, [r0], -r3
    1138:	58078e01 	stmdapl	r7, {r0, r9, sl, fp, pc}
    113c:	3c20000d 	stccc	0, cr0, [r0], #-52	; 0xffffffcc
    1140:	01000000 	mrseq	r0, (UNDEF: 0)
    1144:	0008569c 	muleq	r8, ip, r6
    1148:	057f1600 	ldrbeq	r1, [pc, #-1536]!	; b50 <startup-0x1ffff4b0>
    114c:	8e010000 	cdphi	0, 0, cr0, cr1, cr0, {0}
    1150:	0000c707 	andeq	ip, r0, r7, lsl #14
    1154:	6c910200 	lfmvs	f0, 4, [r1], {0}
    1158:	00068d18 	andeq	r8, r6, r8, lsl sp
    115c:	07900100 	ldreq	r0, [r0, r0, lsl #2]
    1160:	000000c7 	andeq	r0, r0, r7, asr #1
    1164:	00749102 	rsbseq	r9, r4, r2, lsl #2
    1168:	0005de15 	andeq	sp, r5, r5, lsl lr
    116c:	072b0100 	streq	r0, [fp, -r0, lsl #2]!
    1170:	20000d18 	andcs	r0, r0, r8, lsl sp
    1174:	00000040 	andeq	r0, r0, r0, asr #32
    1178:	088b9c01 	stmeq	fp, {r0, sl, fp, ip, pc}
    117c:	70160000 	andsvc	r0, r6, r0
    1180:	01000005 	tsteq	r0, r5
    1184:	00c7072b 	sbceq	r0, r7, fp, lsr #14
    1188:	91020000 	mrsls	r0, (UNDEF: 2)
    118c:	068d186c 	streq	r1, [sp], ip, ror #16
    1190:	2d010000 	stccs	0, cr0, [r1, #-0]
    1194:	0000c707 	andeq	ip, r0, r7, lsl #14
    1198:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    119c:	09601500 	stmdbeq	r0!, {r8, sl, ip}^
    11a0:	0b010000 	bleq	411a8 <startup-0x1ffbee58>
    11a4:	000cdc07 	andeq	sp, ip, r7, lsl #24
    11a8:	00003c20 	andeq	r3, r0, r0, lsr #24
    11ac:	c09c0100 	addsgt	r0, ip, r0, lsl #2
    11b0:	16000008 	strne	r0, [r0], -r8
    11b4:	000009a9 	andeq	r0, r0, r9, lsr #19
    11b8:	c7070b01 	strgt	r0, [r7, -r1, lsl #22]
    11bc:	02000000 	andeq	r0, r0, #0
    11c0:	8d186c91 	ldchi	12, cr6, [r8, #-580]	; 0xfffffdbc
    11c4:	01000006 	tsteq	r0, r6
    11c8:	00c7070d 	sbceq	r0, r7, sp, lsl #14
    11cc:	91020000 	mrsls	r0, (UNDEF: 2)
    11d0:	b1150074 	tstlt	r5, r4, ror r0
    11d4:	0100000a 	tsteq	r0, sl
    11d8:	0ca006ea 	stceq	6, cr0, [r0], #936	; 0x3a8
    11dc:	003c2000 	eorseq	r2, ip, r0
    11e0:	9c010000 	stcls	0, cr0, [r1], {-0}
    11e4:	000008f5 	strdeq	r0, [r0], -r5
    11e8:	0008bc16 	andeq	fp, r8, r6, lsl ip
    11ec:	06ea0100 	strbteq	r0, [sl], r0, lsl #2
    11f0:	000000c7 	andeq	r0, r0, r7, asr #1
    11f4:	186c9102 	stmdane	ip!, {r1, r8, ip, pc}^
    11f8:	0000068d 	andeq	r0, r0, sp, lsl #13
    11fc:	c706ec01 	strgt	lr, [r6, -r1, lsl #24]
    1200:	02000000 	andeq	r0, r0, #0
    1204:	15007491 	strne	r7, [r0, #-1169]	; 0xfffffb6f
    1208:	000006eb 	andeq	r0, r0, fp, ror #13
    120c:	6406c601 	strvs	ip, [r6], #-1537	; 0xfffff9ff
    1210:	3c20000c 	stccc	0, cr0, [r0], #-48	; 0xffffffd0
    1214:	01000000 	mrseq	r0, (UNDEF: 0)
    1218:	00092a9c 	muleq	r9, ip, sl
    121c:	08a51600 	stmiaeq	r5!, {r9, sl, ip}
    1220:	c6010000 	strgt	r0, [r1], -r0
    1224:	0000c706 	andeq	ip, r0, r6, lsl #14
    1228:	6c910200 	lfmvs	f0, 4, [r1], {0}
    122c:	00068d18 	andeq	r8, r6, r8, lsl sp
    1230:	06c80100 	strbeq	r0, [r8], r0, lsl #2
    1234:	000000c7 	andeq	r0, r0, r7, asr #1
    1238:	00749102 	rsbseq	r9, r4, r2, lsl #2
    123c:	000c9315 	andeq	r9, ip, r5, lsl r3
    1240:	06ab0100 	strteq	r0, [fp], r0, lsl #2
    1244:	20000c48 	andcs	r0, r0, r8, asr #24
    1248:	0000001c 	andeq	r0, r0, ip, lsl r0
    124c:	09509c01 	ldmdbeq	r0, {r0, sl, fp, ip, pc}^
    1250:	2f160000 	svccs	0x00160000
    1254:	0100000a 	tsteq	r0, sl
    1258:	00c706ab 	sbceq	r0, r7, fp, lsr #13
    125c:	91020000 	mrsls	r0, (UNDEF: 2)
    1260:	d5150074 	ldrle	r0, [r5, #-116]	; 0xffffff8c
    1264:	01000007 	tsteq	r0, r7
    1268:	0c2805ef 	cfstr32eq	mvfx0, [r8], #-956	; 0xfffffc44
    126c:	00202000 	eoreq	r2, r0, r0
    1270:	9c010000 	stcls	0, cr0, [r1], {-0}
    1274:	00000976 	andeq	r0, r0, r6, ror r9
    1278:	0007c416 	andeq	ip, r7, r6, lsl r4
    127c:	05ef0100 	strbeq	r0, [pc, #256]!	; 1384 <startup-0x1fffec7c>
    1280:	0000014c 	andeq	r0, r0, ip, asr #2
    1284:	00779102 	rsbseq	r9, r7, r2, lsl #2
    1288:	00097a15 	andeq	r7, r9, r5, lsl sl
    128c:	05de0100 	ldrbeq	r0, [lr, #256]	; 0x100
    1290:	20000c08 	andcs	r0, r0, r8, lsl #24
    1294:	00000020 	andeq	r0, r0, r0, lsr #32
    1298:	099c9c01 	ldmibeq	ip, {r0, sl, fp, ip, pc}
    129c:	c4160000 	ldrgt	r0, [r6], #-0
    12a0:	01000007 	tsteq	r0, r7
    12a4:	014c05de 	ldrdeq	r0, [ip, #-94]	; 0xffffffa2
    12a8:	91020000 	mrsls	r0, (UNDEF: 2)
    12ac:	39150077 	ldmdbcc	r5, {r0, r1, r2, r4, r5, r6}
    12b0:	0100000d 	tsteq	r0, sp
    12b4:	0ba805be 	bleq	fea029b4 <APBAHBPrescTable+0xdea0159c>
    12b8:	00602000 	rsbeq	r2, r0, r0
    12bc:	9c010000 	stcls	0, cr0, [r1], {-0}
    12c0:	000009d1 	ldrdeq	r0, [r0], -r1
    12c4:	00089416 	andeq	r9, r8, r6, lsl r4
    12c8:	05be0100 	ldreq	r0, [lr, #256]!	; 0x100
    12cc:	000000c7 	andeq	r0, r0, r7, asr #1
    12d0:	186c9102 	stmdane	ip!, {r1, r8, ip, pc}^
    12d4:	0000068d 	andeq	r0, r0, sp, lsl #13
    12d8:	c705c001 	strgt	ip, [r5, -r1]
    12dc:	02000000 	andeq	r0, r0, #0
    12e0:	1b007491 	blne	1e52c <startup-0x1ffe1ad4>
    12e4:	00000bde 	ldrdeq	r0, [r0], -lr
    12e8:	50052501 	andpl	r2, r5, r1, lsl #10
    12ec:	5820000a 	stmdapl	r0!, {r1, r3}
    12f0:	01000001 	tsteq	r0, r1
    12f4:	000a519c 	muleq	sl, ip, r1
    12f8:	063d1600 	ldrteq	r1, [sp], -r0, lsl #12
    12fc:	25010000 	strcs	r0, [r1, #-0]
    1300:	000a5105 	andeq	r5, sl, r5, lsl #2
    1304:	5c910200 	lfmpl	f0, 4, [r1], {0}
    1308:	706d741a 	rsbvc	r7, sp, sl, lsl r4
    130c:	05270100 	streq	r0, [r7, #-256]!	; 0xffffff00
    1310:	000000c7 	andeq	r0, r0, r7, asr #1
    1314:	18709102 	ldmdane	r0!, {r1, r8, ip, pc}^
    1318:	0000088e 	andeq	r0, r0, lr, lsl #17
    131c:	c7052701 	strgt	r2, [r5, -r1, lsl #14]
    1320:	02000000 	andeq	r0, r0, #0
    1324:	4a186c91 	bmi	61c570 <startup-0x1f9e3a90>
    1328:	01000008 	tsteq	r0, r8
    132c:	00c70527 	sbceq	r0, r7, r7, lsr #10
    1330:	91020000 	mrsls	r0, (UNDEF: 2)
    1334:	05ae1874 	streq	r1, [lr, #2164]!	; 0x874
    1338:	27010000 	strcs	r0, [r1, -r0]
    133c:	0000c705 	andeq	ip, r0, r5, lsl #14
    1340:	68910200 	ldmvs	r1, {r9}
    1344:	000d4a18 	andeq	r4, sp, r8, lsl sl
    1348:	05270100 	streq	r0, [r7, #-256]!	; 0xffffff00
    134c:	000000c7 	andeq	r0, r0, r7, asr #1
    1350:	18649102 	stmdane	r4!, {r1, r8, ip, pc}^
    1354:	000005a9 	andeq	r0, r0, r9, lsr #11
    1358:	c7052701 	strgt	r2, [r5, -r1, lsl #14]
    135c:	02000000 	andeq	r0, r0, #0
    1360:	1c006091 	stcne	0, cr6, [r0], {145}	; 0x91
    1364:	00038704 	andeq	r8, r3, r4, lsl #14
    1368:	0b641500 	bleq	1906770 <startup-0x1e6f9890>
    136c:	f1010000 	setend	le
    1370:	000a1404 	andeq	r1, sl, r4, lsl #8
    1374:	00003c20 	andeq	r3, r0, r0, lsr #24
    1378:	8c9c0100 	ldfhis	f0, [ip], {0}
    137c:	1600000a 	strne	r0, [r0], -sl
    1380:	00000547 	andeq	r0, r0, r7, asr #10
    1384:	c704f101 	strgt	pc, [r4, -r1, lsl #2]
    1388:	02000000 	andeq	r0, r0, #0
    138c:	8d186c91 	ldchi	12, cr6, [r8, #-580]	; 0xfffffdbc
    1390:	01000006 	tsteq	r0, r6
    1394:	00c704f3 	strdeq	r0, [r7], #67	; 0x43
    1398:	91020000 	mrsls	r0, (UNDEF: 2)
    139c:	c4150074 	ldrgt	r0, [r5], #-116	; 0xffffff8c
    13a0:	01000006 	tsteq	r0, r6
    13a4:	09dc04d2 	ldmibeq	ip, {r1, r4, r6, r7, sl}^
    13a8:	00382000 	eorseq	r2, r8, r0
    13ac:	9c010000 	stcls	0, cr0, [r1], {-0}
    13b0:	00000ac1 	andeq	r0, r0, r1, asr #21
    13b4:	00054716 	andeq	r4, r5, r6, lsl r7
    13b8:	04d20100 	ldrbeq	r0, [r2], #256	; 0x100
    13bc:	000000c7 	andeq	r0, r0, r7, asr #1
    13c0:	186c9102 	stmdane	ip!, {r1, r8, ip, pc}^
    13c4:	0000068d 	andeq	r0, r0, sp, lsl #13
    13c8:	c704d401 	strgt	sp, [r4, -r1, lsl #8]
    13cc:	02000000 	andeq	r0, r0, #0
    13d0:	15007491 	strne	r7, [r0, #-1169]	; 0xfffffb6f
    13d4:	00000719 	andeq	r0, r0, r9, lsl r7
    13d8:	a804b301 	stmdage	r4, {r0, r8, r9, ip, sp, pc}
    13dc:	34200009 	strtcc	r0, [r0], #-9
    13e0:	01000000 	mrseq	r0, (UNDEF: 0)
    13e4:	000af69c 	muleq	sl, ip, r6
    13e8:	08691600 	stmdaeq	r9!, {r9, sl, ip}^
    13ec:	b3010000 	movwlt	r0, #4096	; 0x1000
    13f0:	0000c704 	andeq	ip, r0, r4, lsl #14
    13f4:	6c910200 	lfmvs	f0, 4, [r1], {0}
    13f8:	00068d18 	andeq	r8, r6, r8, lsl sp
    13fc:	04b50100 	ldrteq	r0, [r5], #256	; 0x100
    1400:	000000c7 	andeq	r0, r0, r7, asr #1
    1404:	00749102 	rsbseq	r9, r4, r2, lsl #2
    1408:	0008021d 	andeq	r0, r8, sp, lsl r2
    140c:	049a0100 	ldreq	r0, [sl], #256	; 0x100
    1410:	00000097 	muleq	r0, r7, r0
    1414:	2000098c 	andcs	r0, r0, ip, lsl #19
    1418:	0000001c 	andeq	r0, r0, ip, lsl r0
    141c:	28159c01 	ldmdacs	r5, {r0, sl, fp, ip, pc}
    1420:	01000007 	tsteq	r0, r7
    1424:	0958047d 	ldmdbeq	r8, {r0, r2, r3, r4, r5, r6, sl}^
    1428:	00342000 	eorseq	r2, r4, r0
    142c:	9c010000 	stcls	0, cr0, [r1], {-0}
    1430:	00000b41 	andeq	r0, r0, r1, asr #22
    1434:	000b7416 	andeq	r7, fp, r6, lsl r4
    1438:	047d0100 	ldrbteq	r0, [sp], #-256	; 0xffffff00
    143c:	000000c7 	andeq	r0, r0, r7, asr #1
    1440:	186c9102 	stmdane	ip!, {r1, r8, ip, pc}^
    1444:	0000068d 	andeq	r0, r0, sp, lsl #13
    1448:	c7047f01 	strgt	r7, [r4, -r1, lsl #30]
    144c:	02000000 	andeq	r0, r0, #0
    1450:	15007491 	strne	r7, [r0, #-1169]	; 0xfffffb6f
    1454:	00000ca4 	andeq	r0, r0, r4, lsr #25
    1458:	1c03b501 	cfstr32ne	mvfx11, [r3], {1}
    145c:	3c200009 	stccc	0, cr0, [r0], #-36	; 0xffffffdc
    1460:	01000000 	mrseq	r0, (UNDEF: 0)
    1464:	000b859c 	muleq	fp, ip, r5
    1468:	0a201600 	beq	806c70 <startup-0x1f7f9390>
    146c:	b5010000 	strlt	r0, [r1, #-0]
    1470:	0000c703 	andeq	ip, r0, r3, lsl #14
    1474:	6c910200 	lfmvs	f0, 4, [r1], {0}
    1478:	00095416 	andeq	r5, r9, r6, lsl r4
    147c:	03b50100 			; <UNDEFINED> instruction: 0x03b50100
    1480:	000000c7 	andeq	r0, r0, r7, asr #1
    1484:	18689102 	stmdane	r8!, {r1, r8, ip, pc}^
    1488:	0000068d 	andeq	r0, r0, sp, lsl #13
    148c:	c703b701 	strgt	fp, [r3, -r1, lsl #14]
    1490:	02000000 	andeq	r0, r0, #0
    1494:	15007491 	strne	r7, [r0, #-1169]	; 0xfffffb6f
    1498:	0000085a 	andeq	r0, r0, sl, asr r8
    149c:	dc038801 	stcle	8, cr8, [r3], {1}
    14a0:	40200008 	eormi	r0, r0, r8
    14a4:	01000000 	mrseq	r0, (UNDEF: 0)
    14a8:	000bc99c 	muleq	fp, ip, r9
    14ac:	05b31600 	ldreq	r1, [r3, #1536]!	; 0x600
    14b0:	88010000 	stmdahi	r1, {}	; <UNPREDICTABLE>
    14b4:	0000c703 	andeq	ip, r0, r3, lsl #14
    14b8:	6c910200 	lfmvs	f0, 4, [r1], {0}
    14bc:	0009fd16 	andeq	pc, r9, r6, lsl sp	; <UNPREDICTABLE>
    14c0:	03880100 	orreq	r0, r8, #0, 2
    14c4:	000000c7 	andeq	r0, r0, r7, asr #1
    14c8:	18689102 	stmdane	r8!, {r1, r8, ip, pc}^
    14cc:	0000068d 	andeq	r0, r0, sp, lsl #13
    14d0:	c7038a01 	strgt	r8, [r3, -r1, lsl #20]
    14d4:	02000000 	andeq	r0, r0, #0
    14d8:	15007491 	strne	r7, [r0, #-1169]	; 0xfffffb6f
    14dc:	0000098e 	andeq	r0, r0, lr, lsl #19
    14e0:	bc036f01 	stclt	15, cr6, [r3], {1}
    14e4:	20200008 	eorcs	r0, r0, r8
    14e8:	01000000 	mrseq	r0, (UNDEF: 0)
    14ec:	000bef9c 	muleq	fp, ip, pc	; <UNPREDICTABLE>
    14f0:	07c41600 	strbeq	r1, [r4, r0, lsl #12]
    14f4:	6f010000 	svcvs	0x00010000
    14f8:	00014c03 	andeq	r4, r1, r3, lsl #24
    14fc:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    1500:	05621500 	strbeq	r1, [r2, #-1280]!	; 0xfffffb00
    1504:	5d010000 	stcpl	0, cr0, [r1, #-0]
    1508:	00089c03 	andeq	r9, r8, r3, lsl #24
    150c:	00002020 	andeq	r2, r0, r0, lsr #32
    1510:	159c0100 	ldrne	r0, [ip, #256]	; 0x100
    1514:	1600000c 	strne	r0, [r0], -ip
    1518:	000007c4 	andeq	r0, r0, r4, asr #15
    151c:	4c035d01 	stcmi	13, cr5, [r3], {1}
    1520:	02000001 	andeq	r0, r0, #1
    1524:	15007791 	strne	r7, [r0, #-1937]	; 0xfffff86f
    1528:	000009b8 			; <UNDEFINED> instruction: 0x000009b8
    152c:	6c034901 			; <UNDEFINED> instruction: 0x6c034901
    1530:	30200008 	eorcc	r0, r0, r8
    1534:	01000000 	mrseq	r0, (UNDEF: 0)
    1538:	000c599c 	muleq	ip, ip, r9
    153c:	0ac81600 	beq	ff206d44 <APBAHBPrescTable+0xdf20592c>
    1540:	49010000 	stmdbmi	r1, {}	; <UNPREDICTABLE>
    1544:	0000c703 	andeq	ip, r0, r3, lsl #14
    1548:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    154c:	000ad016 	andeq	sp, sl, r6, lsl r0
    1550:	03490100 	movteq	r0, #37120	; 0x9100
    1554:	000000c7 	andeq	r0, r0, r7, asr #1
    1558:	16709102 	ldrbtne	r9, [r0], -r2, lsl #2
    155c:	00000ad8 	ldrdeq	r0, [r0], -r8
    1560:	c7034901 	strgt	r4, [r3, -r1, lsl #18]
    1564:	02000000 	andeq	r0, r0, #0
    1568:	15006c91 	strne	r6, [r0, #-3217]	; 0xfffff36f
    156c:	00000874 	andeq	r0, r0, r4, ror r8
    1570:	4c02dc01 	stcmi	12, cr13, [r2], {1}
    1574:	20200008 	eorcs	r0, r0, r8
    1578:	01000000 	mrseq	r0, (UNDEF: 0)
    157c:	000c7f9c 	muleq	ip, ip, pc	; <UNPREDICTABLE>
    1580:	07c41600 	strbeq	r1, [r4, r0, lsl #12]
    1584:	dc010000 	stcle	0, cr0, [r1], {-0}
    1588:	00014c02 	andeq	r4, r1, r2, lsl #24
    158c:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    1590:	09101500 	ldmdbeq	r0, {r8, sl, ip}
    1594:	51010000 	mrspl	r0, (UNDEF: 1)
    1598:	00082402 	andeq	r2, r8, r2, lsl #8
    159c:	00002820 	andeq	r2, r0, r0, lsr #16
    15a0:	b49c0100 	ldrlt	r0, [ip], #256	; 0x100
    15a4:	1600000c 	strne	r0, [r0], -ip
    15a8:	00000bd6 	ldrdeq	r0, [r0], -r6
    15ac:	c7025101 	strgt	r5, [r2, -r1, lsl #2]
    15b0:	02000000 	andeq	r0, r0, #0
    15b4:	1b167491 	blne	59e800 <startup-0x1fa61800>
    15b8:	0100000c 	tsteq	r0, ip
    15bc:	00c70251 	sbceq	r0, r7, r1, asr r2
    15c0:	91020000 	mrsls	r0, (UNDEF: 2)
    15c4:	f4150070 			; <UNDEFINED> instruction: 0xf4150070
    15c8:	0100000a 	tsteq	r0, sl
    15cc:	08040233 	stmdaeq	r4, {r0, r1, r4, r5, r9}
    15d0:	00202000 	eoreq	r2, r0, r0
    15d4:	9c010000 	stcls	0, cr0, [r1], {-0}
    15d8:	00000cda 	ldrdeq	r0, [r0], -sl
    15dc:	0007c416 	andeq	ip, r7, r6, lsl r4
    15e0:	02330100 	eorseq	r0, r3, #0, 2
    15e4:	0000014c 	andeq	r0, r0, ip, asr #2
    15e8:	00779102 	rsbseq	r9, r7, r2, lsl #2
    15ec:	000d1115 	andeq	r1, sp, r5, lsl r1
    15f0:	021b0100 	andseq	r0, fp, #0, 2
    15f4:	200007c8 	andcs	r0, r0, r8, asr #15
    15f8:	0000003c 	andeq	r0, r0, ip, lsr r0
    15fc:	0d3c9c01 	ldceq	12, cr9, [ip, #-4]!
    1600:	f4160000 			; <UNDEFINED> instruction: 0xf4160000
    1604:	01000007 	tsteq	r0, r7
    1608:	00c7021b 	sbceq	r0, r7, fp, lsl r2
    160c:	91020000 	mrsls	r0, (UNDEF: 2)
    1610:	061f1674 			; <UNDEFINED> instruction: 0x061f1674
    1614:	1b010000 	blne	4161c <startup-0x1ffbe9e4>
    1618:	0000c702 	andeq	ip, r0, r2, lsl #14
    161c:	70910200 	addsvc	r0, r1, r0, lsl #4
    1620:	0005d916 	andeq	sp, r5, r6, lsl r9
    1624:	021b0100 	andseq	r0, fp, #0, 2
    1628:	000000c7 	andeq	r0, r0, r7, asr #1
    162c:	166c9102 	strbtne	r9, [ip], -r2, lsl #2
    1630:	000005f8 	strdeq	r0, [r0], -r8
    1634:	c7021b01 	strgt	r1, [r2, -r1, lsl #22]
    1638:	02000000 	andeq	r0, r0, #0
    163c:	fd166891 	ldc2	8, cr6, [r6, #-580]	; 0xfffffdbc
    1640:	01000005 	tsteq	r0, r5
    1644:	00c7021b 	sbceq	r0, r7, fp, lsl r2
    1648:	91020000 	mrsls	r0, (UNDEF: 2)
    164c:	cc150000 	ldcgt	0, cr0, [r5], {-0}
    1650:	0100000c 	tsteq	r0, ip
    1654:	07a801b8 			; <UNDEFINED> instruction: 0x07a801b8
    1658:	00202000 	eoreq	r2, r0, r0
    165c:	9c010000 	stcls	0, cr0, [r1], {-0}
    1660:	00000d62 	andeq	r0, r0, r2, ror #26
    1664:	0007c416 	andeq	ip, r7, r6, lsl r4
    1668:	01b80100 			; <UNDEFINED> instruction: 0x01b80100
    166c:	0000014c 	andeq	r0, r0, ip, asr #2
    1670:	00779102 	rsbseq	r9, r7, r2, lsl #2
    1674:	00073915 	andeq	r3, r7, r5, lsl r9
    1678:	01900100 	orrseq	r0, r0, r0, lsl #2
    167c:	20000764 	andcs	r0, r0, r4, ror #14
    1680:	00000044 	andeq	r0, r0, r4, asr #32
    1684:	0d889c01 	stceq	12, cr9, [r8, #4]
    1688:	50160000 	andspl	r0, r6, r0
    168c:	01000005 	tsteq	r0, r5
    1690:	00970190 	umullseq	r0, r7, r0, r1
    1694:	91020000 	mrsls	r0, (UNDEF: 2)
    1698:	21150077 	tstcs	r5, r7, ror r0
    169c:	01000009 	tsteq	r0, r9
    16a0:	07440177 	smlsldxeq	r0, r4, r7, r1
    16a4:	00202000 	eoreq	r2, r0, r0
    16a8:	9c010000 	stcls	0, cr0, [r1], {-0}
    16ac:	00000dae 	andeq	r0, r0, lr, lsr #27
    16b0:	0007c416 	andeq	ip, r7, r6, lsl r4
    16b4:	01770100 	cmneq	r7, r0, lsl #2
    16b8:	0000014c 	andeq	r0, r0, ip, asr #2
    16bc:	00779102 	rsbseq	r9, r7, r2, lsl #2
    16c0:	000bae15 	andeq	sl, fp, r5, lsl lr
    16c4:	01530100 	cmpeq	r3, r0, lsl #2
    16c8:	20000706 	andcs	r0, r0, r6, lsl #14
    16cc:	0000003e 	andeq	r0, r0, lr, lsr r0
    16d0:	0de39c01 	stcleq	12, cr9, [r3, #4]!
    16d4:	b8160000 	ldmdalt	r6, {}	; <UNPREDICTABLE>
    16d8:	0100000b 	tsteq	r0, fp
    16dc:	00970153 	addseq	r0, r7, r3, asr r1
    16e0:	91020000 	mrsls	r0, (UNDEF: 2)
    16e4:	068d186f 	streq	r1, [sp], pc, ror #16
    16e8:	55010000 	strpl	r0, [r1, #-0]
    16ec:	0000c701 	andeq	ip, r0, r1, lsl #14
    16f0:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    16f4:	08161e00 	ldmdaeq	r6, {r9, sl, fp, ip}
    16f8:	34010000 	strcc	r0, [r1], #-0
    16fc:	00017301 	andeq	r7, r1, r1, lsl #6
    1700:	0006a800 	andeq	sl, r6, r0, lsl #16
    1704:	00005e20 	andeq	r5, r0, r0, lsr #28
    1708:	2b9c0100 	blcs	fe701b10 <APBAHBPrescTable+0xde7006f8>
    170c:	1800000e 	stmdane	r0, {r1, r2, r3}
    1710:	00000c60 	andeq	r0, r0, r0, ror #24
    1714:	d2013601 	andle	r3, r1, #1048576	; 0x100000
    1718:	02000000 	andeq	r0, r0, #0
    171c:	cf186891 	svcgt	0x00186891
    1720:	0100000b 	tsteq	r0, fp
    1724:	01730137 	cmneq	r3, r7, lsr r1
    1728:	91020000 	mrsls	r0, (UNDEF: 2)
    172c:	0bcc186f 	bleq	ff3078f0 <APBAHBPrescTable+0xdf3064d8>
    1730:	38010000 	stmdacc	r1, {}	; <UNPREDICTABLE>
    1734:	00011901 	andeq	r1, r1, r1, lsl #18
    1738:	6e910200 	cdpvs	2, 9, cr0, cr1, cr0, {0}
    173c:	0aa31500 	beq	fe8c6b44 <APBAHBPrescTable+0xde8c572c>
    1740:	1c010000 	stcne	0, cr0, [r1], {-0}
    1744:	00068001 	andeq	r8, r6, r1
    1748:	00002820 	andeq	r2, r0, r0, lsr #16
    174c:	519c0100 	orrspl	r0, ip, r0, lsl #2
    1750:	1600000e 	strne	r0, [r0], -lr
    1754:	00000b85 	andeq	r0, r0, r5, lsl #23
    1758:	97011c01 	strls	r1, [r1, -r1, lsl #24]
    175c:	02000000 	andeq	r0, r0, #0
    1760:	1f007791 	svcne	0x00007791
    1764:	00000c10 	andeq	r0, r0, r0, lsl ip
    1768:	0610e101 	ldreq	lr, [r0], -r1, lsl #2
    176c:	00702000 	rsbseq	r2, r0, r0
    1770:	9c010000 	stcls	0, cr0, [r1], {-0}
	...

Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
   0:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
   4:	030b130e 	movweq	r1, #45838	; 0xb30e
   8:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xfffff4f2
   c:	10011117 	andne	r1, r1, r7, lsl r1
  10:	02000017 	andeq	r0, r0, #23
  14:	0b0b0024 	bleq	2c00ac <startup-0x1fd3ff54>
  18:	0e030b3e 	vmoveq.16	d3[0], r0
  1c:	16030000 	strne	r0, [r3], -r0
  20:	3a0e0300 	bcc	380c28 <startup-0x1fc7f3d8>
  24:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
  28:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
  2c:	0b0b0024 	bleq	2c00c4 <startup-0x1fd3ff3c>
  30:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
  34:	35050000 	strcc	r0, [r5, #-0]
  38:	00134900 	andseq	r4, r3, r0, lsl #18
  3c:	00340600 	eorseq	r0, r4, r0, lsl #12
  40:	0b3a0e03 	bleq	e83854 <startup-0x1f17c7ac>
  44:	1349053b 	movtne	r0, #38203	; 0x953b
  48:	193c193f 	ldmdbne	ip!, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
  4c:	34070000 	strcc	r0, [r7], #-0
  50:	3a0e0300 	bcc	380c58 <startup-0x1fc7f3a8>
  54:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
  58:	3c193f13 	ldccc	15, cr3, [r9], {19}
  5c:	08000019 	stmdaeq	r0, {r0, r3, r4}
  60:	0b3e0104 	bleq	f80478 <startup-0x1f07fb88>
  64:	13490b0b 	movtne	r0, #39691	; 0x9b0b
  68:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
  6c:	00001301 	andeq	r1, r0, r1, lsl #6
  70:	03002809 	movweq	r2, #2057	; 0x809
  74:	000b1c0e 	andeq	r1, fp, lr, lsl #24
  78:	01130a00 	tsteq	r3, r0, lsl #20
  7c:	0b3a0b0b 	bleq	e82cb0 <startup-0x1f17d350>
  80:	1301053b 	movwne	r0, #5435	; 0x153b
  84:	0d0b0000 	stceq	0, cr0, [fp, #-0]
  88:	3a0e0300 	bcc	380c90 <startup-0x1fc7f370>
  8c:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
  90:	000b3813 	andeq	r3, fp, r3, lsl r8
  94:	000d0c00 	andeq	r0, sp, r0, lsl #24
  98:	0b3a0803 	bleq	e820ac <startup-0x1f17df54>
  9c:	1349053b 	movtne	r0, #38203	; 0x953b
  a0:	00000b38 	andeq	r0, r0, r8, lsr fp
  a4:	4901010d 	stmdbmi	r1, {r0, r2, r3, r8}
  a8:	00130113 	andseq	r0, r3, r3, lsl r1
  ac:	00210e00 	eoreq	r0, r1, r0, lsl #28
  b0:	0b2f1349 	bleq	bc4ddc <startup-0x1f43b224>
  b4:	160f0000 	strne	r0, [pc], -r0
  b8:	3a0e0300 	bcc	380cc0 <startup-0x1fc7f340>
  bc:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
  c0:	10000013 	andne	r0, r0, r3, lsl r0
  c4:	0b3e0104 	bleq	f804dc <startup-0x1f07fb24>
  c8:	13490b0b 	movtne	r0, #39691	; 0x9b0b
  cc:	0b3b0b3a 	bleq	ec2dbc <startup-0x1f13d244>
  d0:	00001301 	andeq	r1, r0, r1, lsl #6
  d4:	0b011311 	bleq	44d20 <startup-0x1ffbb2e0>
  d8:	3b0b3a0b 	blcc	2ce90c <startup-0x1fd316f4>
  dc:	0013010b 	andseq	r0, r3, fp, lsl #2
  e0:	000d1200 	andeq	r1, sp, r0, lsl #4
  e4:	0b3a0e03 	bleq	e838f8 <startup-0x1f17c708>
  e8:	13490b3b 	movtne	r0, #39739	; 0x9b3b
  ec:	00000b38 	andeq	r0, r0, r8, lsr fp
  f0:	3f002e13 	svccc	0x00002e13
  f4:	3a0e0319 	bcc	380d60 <startup-0x1fc7f2a0>
  f8:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
  fc:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 100:	96184006 	ldrls	r4, [r8], -r6
 104:	00001942 	andeq	r1, r0, r2, asr #18
 108:	3f012e14 	svccc	0x00012e14
 10c:	3a0e0319 	bcc	380d78 <startup-0x1fc7f288>
 110:	110b3b0b 	tstne	fp, fp, lsl #22
 114:	40061201 	andmi	r1, r6, r1, lsl #4
 118:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 11c:	00001301 	andeq	r1, r0, r1, lsl #6
 120:	03003415 	movweq	r3, #1045	; 0x415
 124:	3b0b3a0e 	blcc	2ce964 <startup-0x1fd3169c>
 128:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 12c:	16000018 			; <UNDEFINED> instruction: 0x16000018
 130:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
 134:	0b3a0e03 	bleq	e83948 <startup-0x1f17c6b8>
 138:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 13c:	06120111 			; <UNDEFINED> instruction: 0x06120111
 140:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 144:	00000019 	andeq	r0, r0, r9, lsl r0
 148:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
 14c:	030b130e 	movweq	r1, #45838	; 0xb30e
 150:	110e1b0e 	tstne	lr, lr, lsl #22
 154:	10061201 	andne	r1, r6, r1, lsl #4
 158:	02000017 	andeq	r0, r0, #23
 15c:	0b0b0024 	bleq	2c01f4 <startup-0x1fd3fe0c>
 160:	0e030b3e 	vmoveq.16	d3[0], r0
 164:	16030000 	strne	r0, [r3], -r0
 168:	3a0e0300 	bcc	380d70 <startup-0x1fc7f290>
 16c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 170:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
 174:	0b0b0024 	bleq	2c020c <startup-0x1fd3fdf4>
 178:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
 17c:	35050000 	strcc	r0, [r5, #-0]
 180:	00134900 	andseq	r4, r3, r0, lsl #18
 184:	00340600 	eorseq	r0, r4, r0, lsl #12
 188:	0b3a0e03 	bleq	e8399c <startup-0x1f17c664>
 18c:	1349053b 	movtne	r0, #38203	; 0x953b
 190:	193c193f 	ldmdbne	ip!, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
 194:	34070000 	strcc	r0, [r7], #-0
 198:	3a0e0300 	bcc	380da0 <startup-0x1fc7f260>
 19c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 1a0:	3c193f13 	ldccc	15, cr3, [r9], {19}
 1a4:	08000019 	stmdaeq	r0, {r0, r3, r4}
 1a8:	0b3e0104 	bleq	f805c0 <startup-0x1f07fa40>
 1ac:	13490b0b 	movtne	r0, #39691	; 0x9b0b
 1b0:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 1b4:	00001301 	andeq	r1, r0, r1, lsl #6
 1b8:	03002809 	movweq	r2, #2057	; 0x809
 1bc:	000b1c0e 	andeq	r1, fp, lr, lsl #24
 1c0:	01130a00 	tsteq	r3, r0, lsl #20
 1c4:	0b3a0b0b 	bleq	e82df8 <startup-0x1f17d208>
 1c8:	1301053b 	movwne	r0, #5435	; 0x153b
 1cc:	0d0b0000 	stceq	0, cr0, [fp, #-0]
 1d0:	3a0e0300 	bcc	380dd8 <startup-0x1fc7f228>
 1d4:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 1d8:	000b3813 	andeq	r3, fp, r3, lsl r8
 1dc:	000d0c00 	andeq	r0, sp, r0, lsl #24
 1e0:	0b3a0803 	bleq	e821f4 <startup-0x1f17de0c>
 1e4:	1349053b 	movtne	r0, #38203	; 0x953b
 1e8:	00000b38 	andeq	r0, r0, r8, lsr fp
 1ec:	4901010d 	stmdbmi	r1, {r0, r2, r3, r8}
 1f0:	00130113 	andseq	r0, r3, r3, lsl r1
 1f4:	00210e00 	eoreq	r0, r1, r0, lsl #28
 1f8:	0b2f1349 	bleq	bc4f24 <startup-0x1f43b0dc>
 1fc:	160f0000 	strne	r0, [pc], -r0
 200:	3a0e0300 	bcc	380e08 <startup-0x1fc7f1f8>
 204:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 208:	10000013 	andne	r0, r0, r3, lsl r0
 20c:	0b3e0104 	bleq	f80624 <startup-0x1f07f9dc>
 210:	13490b0b 	movtne	r0, #39691	; 0x9b0b
 214:	0b3b0b3a 	bleq	ec2f04 <startup-0x1f13d0fc>
 218:	00001301 	andeq	r1, r0, r1, lsl #6
 21c:	0b011311 	bleq	44e68 <startup-0x1ffbb198>
 220:	3b0b3a0b 	blcc	2cea54 <startup-0x1fd315ac>
 224:	0013010b 	andseq	r0, r3, fp, lsl #2
 228:	000d1200 	andeq	r1, sp, r0, lsl #4
 22c:	0b3a0e03 	bleq	e83a40 <startup-0x1f17c5c0>
 230:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 234:	00000b38 	andeq	r0, r0, r8, lsr fp
 238:	3f012e13 	svccc	0x00012e13
 23c:	3a0e0319 	bcc	380ea8 <startup-0x1fc7f158>
 240:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
 244:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 248:	97184006 	ldrls	r4, [r8, -r6]
 24c:	13011942 	movwne	r1, #6466	; 0x1942
 250:	05140000 	ldreq	r0, [r4, #-0]
 254:	3a0e0300 	bcc	380e5c <startup-0x1fc7f1a4>
 258:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 25c:	00180213 	andseq	r0, r8, r3, lsl r2
 260:	00341500 	eorseq	r1, r4, r0, lsl #10
 264:	0b3a0e03 	bleq	e83a78 <startup-0x1f17c588>
 268:	1349053b 	movtne	r0, #38203	; 0x953b
 26c:	00001802 	andeq	r1, r0, r2, lsl #16
 270:	0b000f16 	bleq	3ed0 <startup-0x1fffc130>
 274:	0013490b 	andseq	r4, r3, fp, lsl #18
 278:	012e1700 			; <UNDEFINED> instruction: 0x012e1700
 27c:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 280:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 284:	13491927 	movtne	r1, #39207	; 0x9927
 288:	06120111 			; <UNDEFINED> instruction: 0x06120111
 28c:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 290:	00130119 	andseq	r0, r3, r9, lsl r1
 294:	00341800 	eorseq	r1, r4, r0, lsl #16
 298:	0b3a0803 	bleq	e822ac <startup-0x1f17dd54>
 29c:	1349053b 	movtne	r0, #38203	; 0x953b
 2a0:	00001802 	andeq	r1, r0, r2, lsl #16
 2a4:	3f012e19 	svccc	0x00012e19
 2a8:	3a0e0319 	bcc	380f14 <startup-0x1fc7f0ec>
 2ac:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 2b0:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 2b4:	97184006 	ldrls	r4, [r8, -r6]
 2b8:	13011942 	movwne	r1, #6466	; 0x1942
 2bc:	051a0000 	ldreq	r0, [sl, #-0]
 2c0:	3a0e0300 	bcc	380ec8 <startup-0x1fc7f138>
 2c4:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 2c8:	00180213 	andseq	r0, r8, r3, lsl r2
 2cc:	00341b00 	eorseq	r1, r4, r0, lsl #22
 2d0:	0b3a0e03 	bleq	e83ae4 <startup-0x1f17c51c>
 2d4:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 2d8:	00001802 	andeq	r1, r0, r2, lsl #16
 2dc:	0300341c 	movweq	r3, #1052	; 0x41c
 2e0:	3b0b3a08 	blcc	2ceb08 <startup-0x1fd314f8>
 2e4:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 2e8:	1d000018 	stcne	0, cr0, [r0, #-96]	; 0xffffffa0
 2ec:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 2f0:	0b3a0e03 	bleq	e83b04 <startup-0x1f17c4fc>
 2f4:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 2f8:	06120111 			; <UNDEFINED> instruction: 0x06120111
 2fc:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 300:	00000019 	andeq	r0, r0, r9, lsl r0
 304:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
 308:	030b130e 	movweq	r1, #45838	; 0xb30e
 30c:	110e1b0e 	tstne	lr, lr, lsl #22
 310:	10061201 	andne	r1, r6, r1, lsl #4
 314:	02000017 	andeq	r0, r0, #23
 318:	0b0b0024 	bleq	2c03b0 <startup-0x1fd3fc50>
 31c:	0e030b3e 	vmoveq.16	d3[0], r0
 320:	16030000 	strne	r0, [r3], -r0
 324:	3a0e0300 	bcc	380f2c <startup-0x1fc7f0d4>
 328:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 32c:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
 330:	0b0b0024 	bleq	2c03c8 <startup-0x1fd3fc38>
 334:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
 338:	26050000 	strcs	r0, [r5], -r0
 33c:	00134900 	andseq	r4, r3, r0, lsl #18
 340:	00350600 	eorseq	r0, r5, r0, lsl #12
 344:	00001349 	andeq	r1, r0, r9, asr #6
 348:	49010107 	stmdbmi	r1, {r0, r1, r2, r8}
 34c:	00130113 	andseq	r0, r3, r3, lsl r1
 350:	00210800 	eoreq	r0, r1, r0, lsl #16
 354:	0b2f1349 	bleq	bc5080 <startup-0x1f43af80>
 358:	34090000 	strcc	r0, [r9], #-0
 35c:	3a0e0300 	bcc	380f64 <startup-0x1fc7f09c>
 360:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 364:	3c193f13 	ldccc	15, cr3, [r9], {19}
 368:	0a000019 	beq	3d4 <startup-0x1ffffc2c>
 36c:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 370:	0b3b0b3a 	bleq	ec3060 <startup-0x1f13cfa0>
 374:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
 378:	0000193c 	andeq	r1, r0, ip, lsr r9
 37c:	3e01040b 	cdpcc	4, 0, cr0, cr1, cr11, {0}
 380:	490b0b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp}
 384:	3b0b3a13 	blcc	2cebd8 <startup-0x1fd31428>
 388:	00130105 	andseq	r0, r3, r5, lsl #2
 38c:	00280c00 	eoreq	r0, r8, r0, lsl #24
 390:	0b1c0e03 	bleq	703ba4 <startup-0x1f8fc45c>
 394:	280d0000 	stmdacs	sp, {}	; <UNPREDICTABLE>
 398:	1c080300 	stcne	3, cr0, [r8], {-0}
 39c:	0e00000b 	cdpeq	0, 0, cr0, cr0, cr11, {0}
 3a0:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
 3a4:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 3a8:	00001349 	andeq	r1, r0, r9, asr #6
 3ac:	0b01130f 	bleq	44ff0 <startup-0x1ffbb010>
 3b0:	3b0b3a0b 	blcc	2cebe4 <startup-0x1fd3141c>
 3b4:	00130105 	andseq	r0, r3, r5, lsl #2
 3b8:	000d1000 	andeq	r1, sp, r0
 3bc:	0b3a0803 	bleq	e823d0 <startup-0x1f17dc30>
 3c0:	1349053b 	movtne	r0, #38203	; 0x953b
 3c4:	00000b38 	andeq	r0, r0, r8, lsr fp
 3c8:	03000d11 	movweq	r0, #3345	; 0xd11
 3cc:	3b0b3a0e 	blcc	2cec0c <startup-0x1fd313f4>
 3d0:	38134905 	ldmdacc	r3, {r0, r2, r8, fp, lr}
 3d4:	1200000b 	andne	r0, r0, #11
 3d8:	0b0b0113 	bleq	2c082c <startup-0x1fd3f7d4>
 3dc:	0b3b0b3a 	bleq	ec30cc <startup-0x1f13cf34>
 3e0:	00001301 	andeq	r1, r0, r1, lsl #6
 3e4:	03000d13 	movweq	r0, #3347	; 0xd13
 3e8:	3b0b3a0e 	blcc	2cec28 <startup-0x1fd313d8>
 3ec:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
 3f0:	1400000b 	strne	r0, [r0], #-11
 3f4:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 3f8:	0b3b0b3a 	bleq	ec30e8 <startup-0x1f13cf18>
 3fc:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 400:	2e150000 	cdpcs	0, 1, cr0, cr5, cr0, {0}
 404:	03193f01 	tsteq	r9, #1, 30
 408:	3b0b3a0e 	blcc	2cec48 <startup-0x1fd313b8>
 40c:	11192705 	tstne	r9, r5, lsl #14
 410:	40061201 	andmi	r1, r6, r1, lsl #4
 414:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 418:	00001301 	andeq	r1, r0, r1, lsl #6
 41c:	03000516 	movweq	r0, #1302	; 0x516
 420:	3b0b3a0e 	blcc	2cec60 <startup-0x1fd313a0>
 424:	02134905 	andseq	r4, r3, #81920	; 0x14000
 428:	17000018 	smladne	r0, r8, r0, r0
 42c:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 430:	0b3a0e03 	bleq	e83c44 <startup-0x1f17c3bc>
 434:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
 438:	01111349 	tsteq	r1, r9, asr #6
 43c:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 440:	01194297 			; <UNDEFINED> instruction: 0x01194297
 444:	18000013 	stmdane	r0, {r0, r1, r4}
 448:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 44c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 450:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 454:	2e190000 	cdpcs	0, 1, cr0, cr9, cr0, {0}
 458:	03193f00 	tsteq	r9, #0, 30
 45c:	3b0b3a0e 	blcc	2cec9c <startup-0x1fd31364>
 460:	11192705 	tstne	r9, r5, lsl #14
 464:	40061201 	andmi	r1, r6, r1, lsl #4
 468:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 46c:	341a0000 	ldrcc	r0, [sl], #-0
 470:	3a080300 	bcc	201078 <startup-0x1fdfef88>
 474:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 478:	00180213 	andseq	r0, r8, r3, lsl r2
 47c:	012e1b00 			; <UNDEFINED> instruction: 0x012e1b00
 480:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 484:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 488:	01111927 	tsteq	r1, r7, lsr #18
 48c:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 490:	01194296 			; <UNDEFINED> instruction: 0x01194296
 494:	1c000013 	stcne	0, cr0, [r0], {19}
 498:	0b0b000f 	bleq	2c04dc <startup-0x1fd3fb24>
 49c:	00001349 	andeq	r1, r0, r9, asr #6
 4a0:	3f002e1d 	svccc	0x00002e1d
 4a4:	3a0e0319 	bcc	381110 <startup-0x1fc7eef0>
 4a8:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
 4ac:	11134919 	tstne	r3, r9, lsl r9
 4b0:	40061201 	andmi	r1, r6, r1, lsl #4
 4b4:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 4b8:	2e1e0000 	cdpcs	0, 1, cr0, cr14, cr0, {0}
 4bc:	03193f01 	tsteq	r9, #1, 30
 4c0:	3b0b3a0e 	blcc	2ced00 <startup-0x1fd31300>
 4c4:	49192705 	ldmdbmi	r9, {r0, r2, r8, r9, sl, sp}
 4c8:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
 4cc:	96184006 	ldrls	r4, [r8], -r6
 4d0:	13011942 	movwne	r1, #6466	; 0x1942
 4d4:	2e1f0000 	cdpcs	0, 1, cr0, cr15, cr0, {0}
 4d8:	03193f00 	tsteq	r9, #0, 30
 4dc:	3b0b3a0e 	blcc	2ced1c <startup-0x1fd312e4>
 4e0:	1119270b 	tstne	r9, fp, lsl #14
 4e4:	40061201 	andmi	r1, r6, r1, lsl #4
 4e8:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 4ec:	Address 0x000004ec is out of bounds.


Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	00000024 	andeq	r0, r0, r4, lsr #32
   4:	00000002 	andeq	r0, r0, r2
   8:	00040000 	andeq	r0, r4, r0
   c:	00000000 	andeq	r0, r0, r0
  10:	20000010 	andcs	r0, r0, r0, lsl r0
  14:	000000f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
  18:	20000000 	andcs	r0, r0, r0
  1c:	0000000c 	andeq	r0, r0, ip
	...
  28:	0000001c 	andeq	r0, r0, ip, lsl r0
  2c:	02eb0002 	rsceq	r0, fp, #2
  30:	00040000 	andeq	r0, r4, r0
  34:	00000000 	andeq	r0, r0, r0
  38:	20000100 	andcs	r0, r0, r0, lsl #2
  3c:	0000050e 	andeq	r0, r0, lr, lsl #10
	...
  48:	0000001c 	andeq	r0, r0, ip, lsl r0
  4c:	09120002 	ldmdbeq	r2, {r1}
  50:	00040000 	andeq	r0, r4, r0
  54:	00000000 	andeq	r0, r0, r0
  58:	20000610 	andcs	r0, r0, r0, lsl r6
  5c:	00000cf0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
	...

Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
   0:	20000010 	andcs	r0, r0, r0, lsl r0
   4:	20000100 	andcs	r0, r0, r0, lsl #2
   8:	20000000 	andcs	r0, r0, r0
   c:	2000000c 	andcs	r0, r0, ip
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
   0:	000001d8 	ldrdeq	r0, [r0], -r8
   4:	01980002 	orrseq	r0, r8, r2
   8:	01020000 	mrseq	r0, (UNDEF: 2)
   c:	000d0efb 	strdeq	r0, [sp], -fp
  10:	01010101 	tsteq	r1, r1, lsl #2
  14:	01000000 	mrseq	r0, (UNDEF: 0)
  18:	43010000 	movwmi	r0, #4096	; 0x1000
  1c:	73552f3a 	cmpvc	r5, #58, 30	; 0xe8
  20:	2f737265 	svccs	0x00737265
  24:	6d616441 	cfstrdvs	mvd6, [r1, #-260]!	; 0xfffffefc
  28:	6e4f2f74 	mcrvs	15, 2, r2, cr15, cr4, {3}
  2c:	69724465 	ldmdbvs	r2!, {r0, r2, r5, r6, sl, lr}^
  30:	442f6576 	strtmi	r6, [pc], #-1398	; 38 <startup-0x1fffffc8>
  34:	6d756b6f 	fldmdbxvs	r5!, {d22-d76}	;@ Deprecated
  38:	2f746e65 	svccs	0x00746e65
  3c:	48746947 	ldmdami	r4!, {r0, r1, r2, r6, r8, fp, sp, lr}^
  40:	442f6275 	strtmi	r6, [pc], #-629	; 48 <startup-0x1fffffb8>
  44:	39325441 	ldmdbcc	r2!, {r0, r6, sl, ip, lr}
  48:	614c2d30 	cmpvs	ip, r0, lsr sp
  4c:	79736d72 	ldmdbvc	r3!, {r1, r4, r5, r6, r8, sl, fp, sp, lr}^
  50:	6d657473 	cfstrdvs	mvd7, [r5, #-460]!	; 0xfffffe34
  54:	646f6b2f 	strbtvs	r6, [pc], #-2863	; 5c <startup-0x1fffffa4>
  58:	6f6f442f 	svcvs	0x006f442f
  5c:	3a630072 	bcc	18c022c <startup-0x1e73fdd4>
  60:	6573635c 	ldrbvs	r6, [r3, #-860]!	; 0xfffffca4
  64:	5c707061 	ldclpl	0, cr7, [r0], #-388	; 0xfffffe7c
  68:	65646f63 	strbvs	r6, [r4, #-3939]!	; 0xfffff09d
  6c:	6574696c 	ldrbvs	r6, [r4, #-2412]!	; 0xfffff694
  70:	6f6f745c 	svcvs	0x006f745c
  74:	675c736c 	ldrbvs	r7, [ip, -ip, ror #6]
  78:	612d6363 			; <UNDEFINED> instruction: 0x612d6363
  7c:	615c6d72 	cmpvs	ip, r2, ror sp
  80:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
  84:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
  88:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
  8c:	636e695c 	cmnvs	lr, #92, 18	; 0x170000
  90:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
  94:	63616d5c 	cmnvs	r1, #92, 26	; 0x1700
  98:	656e6968 	strbvs	r6, [lr, #-2408]!	; 0xfffff698
  9c:	5c3a6300 	ldcpl	3, cr6, [sl], #-0
  a0:	61657363 	cmnvs	r5, r3, ror #6
  a4:	635c7070 	cmpvs	ip, #112	; 0x70
  a8:	6c65646f 	cfstrdvs	mvd6, [r5], #-444	; 0xfffffe44
  ac:	5c657469 	cfstrdpl	mvd7, [r5], #-420	; 0xfffffe5c
  b0:	6c6f6f74 	stclvs	15, cr6, [pc], #-464	; fffffee8 <APBAHBPrescTable+0xdfffead0>
  b4:	63675c73 	cmnvs	r7, #29440	; 0x7300
  b8:	72612d63 	rsbvc	r2, r1, #6336	; 0x18c0
  bc:	72615c6d 	rsbvc	r5, r1, #27904	; 0x6d00
  c0:	6f6e2d6d 	svcvs	0x006e2d6d
  c4:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
  c8:	5c696261 	sfmpl	f6, 2, [r9], #-388	; 0xfffffe7c
  cc:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
  d0:	5c656475 	cfstrdpl	mvd6, [r5], #-468	; 0xfffffe2c
  d4:	00737973 	rsbseq	r7, r3, r3, ror r9
  d8:	6c2f2e2e 	stcvs	14, cr2, [pc], #-184	; 28 <startup-0x1fffffd8>
  dc:	532f6269 			; <UNDEFINED> instruction: 0x532f6269
  e0:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
  e4:	6c5f3446 	cfldrdvs	mvd3, [pc], {70}	; 0x46
  e8:	432f6269 			; <UNDEFINED> instruction: 0x432f6269
  ec:	5349534d 	movtpl	r5, #37709	; 0x934d
  f0:	636e692f 	cmnvs	lr, #770048	; 0xbc000
  f4:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
  f8:	2f2e2e00 	svccs	0x002e2e00
  fc:	2f62696c 	svccs	0x0062696c
 100:	334d5453 	movtcc	r5, #54355	; 0xd453
 104:	5f344632 	svcpl	0x00344632
 108:	2f62696c 	svccs	0x0062696c
 10c:	334d5453 	movtcc	r5, #54355	; 0xd453
 110:	78344632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, lr}
 114:	74535f78 	ldrbvc	r5, [r3], #-3960	; 0xfffff088
 118:	72655064 	rsbvc	r5, r5, #100	; 0x64
 11c:	5f687069 	svcpl	0x00687069
 120:	76697244 	strbtvc	r7, [r9], -r4, asr #4
 124:	692f7265 	stmdbvs	pc!, {r0, r2, r5, r6, r9, ip, sp, lr}	; <UNPREDICTABLE>
 128:	0000636e 	andeq	r6, r0, lr, ror #6
 12c:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
 130:	2e707574 	mrccs	5, 3, r7, cr0, cr4, {3}
 134:	00010063 	andeq	r0, r1, r3, rrx
 138:	65645f00 	strbvs	r5, [r4, #-3840]!	; 0xfffff100
 13c:	6c756166 	ldfvse	f6, [r5], #-408	; 0xfffffe68
 140:	79745f74 	ldmdbvc	r4!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
 144:	2e736570 	mrccs	5, 3, r6, cr3, cr0, {3}
 148:	00020068 	andeq	r0, r2, r8, rrx
 14c:	74735f00 	ldrbtvc	r5, [r3], #-3840	; 0xfffff100
 150:	746e6964 	strbtvc	r6, [lr], #-2404	; 0xfffff69c
 154:	0300682e 	movweq	r6, #2094	; 0x82e
 158:	6f630000 	svcvs	0x00630000
 15c:	635f6572 	cmpvs	pc, #478150656	; 0x1c800000
 160:	682e346d 	stmdavs	lr!, {r0, r2, r3, r5, r6, sl, ip, sp}
 164:	00000400 	andeq	r0, r0, r0, lsl #8
 168:	74737973 	ldrbtvc	r7, [r3], #-2419	; 0xfffff68d
 16c:	735f6d65 	cmpvc	pc, #6464	; 0x1940
 170:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
 174:	78783466 	ldmdavc	r8!, {r1, r2, r5, r6, sl, ip, sp}^
 178:	0500682e 	streq	r6, [r0, #-2094]	; 0xfffff7d2
 17c:	74730000 	ldrbtvc	r0, [r3], #-0
 180:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
 184:	2e787834 	mrccs	8, 3, r7, cr8, cr4, {1}
 188:	00050068 	andeq	r0, r5, r8, rrx
 18c:	6d747300 	ldclvs	3, cr7, [r4, #-0]
 190:	34663233 	strbtcc	r3, [r6], #-563	; 0xfffffdcd
 194:	675f7878 			; <UNDEFINED> instruction: 0x675f7878
 198:	2e6f6970 			; <UNDEFINED> instruction: 0x2e6f6970
 19c:	00050068 	andeq	r0, r5, r8, rrx
 1a0:	05000000 	streq	r0, [r0, #-0]
 1a4:	00000002 	andeq	r0, r0, r2
 1a8:	010c0320 	tsteq	ip, r0, lsr #6
 1ac:	03025e13 	movweq	r5, #11795	; 0x2e13
 1b0:	00010100 	andeq	r0, r1, r0, lsl #2
 1b4:	00100205 	andseq	r0, r0, r5, lsl #4
 1b8:	15032000 	strne	r2, [r3, #-0]
 1bc:	4b4b4001 	blmi	12d01c8 <startup-0x1ed2fe38>
 1c0:	6b3d3d3d 	blvs	f4f6bc <startup-0x1f0b0944>
 1c4:	3d3d3d4b 	ldccc	13, cr3, [sp, #-300]!	; 0xfffffed4
 1c8:	312f7669 			; <UNDEFINED> instruction: 0x312f7669
 1cc:	915a6891 			; <UNDEFINED> instruction: 0x915a6891
 1d0:	68915a68 	ldmvs	r1, {r3, r5, r6, r9, fp, ip, lr}
 1d4:	02587303 	subseq	r7, r8, #201326592	; 0xc000000
 1d8:	01010004 	tsteq	r1, r4
 1dc:	000002b5 			; <UNDEFINED> instruction: 0x000002b5
 1e0:	01c90002 	biceq	r0, r9, r2
 1e4:	01020000 	mrseq	r0, (UNDEF: 2)
 1e8:	000d0efb 	strdeq	r0, [sp], -fp
 1ec:	01010101 	tsteq	r1, r1, lsl #2
 1f0:	01000000 	mrseq	r0, (UNDEF: 0)
 1f4:	43010000 	movwmi	r0, #4096	; 0x1000
 1f8:	73552f3a 	cmpvc	r5, #58, 30	; 0xe8
 1fc:	2f737265 	svccs	0x00737265
 200:	6d616441 	cfstrdvs	mvd6, [r1, #-260]!	; 0xfffffefc
 204:	6e4f2f74 	mcrvs	15, 2, r2, cr15, cr4, {3}
 208:	69724465 	ldmdbvs	r2!, {r0, r2, r5, r6, sl, lr}^
 20c:	442f6576 	strtmi	r6, [pc], #-1398	; 214 <startup-0x1ffffdec>
 210:	6d756b6f 	fldmdbxvs	r5!, {d22-d76}	;@ Deprecated
 214:	2f746e65 	svccs	0x00746e65
 218:	48746947 	ldmdami	r4!, {r0, r1, r2, r6, r8, fp, sp, lr}^
 21c:	442f6275 	strtmi	r6, [pc], #-629	; 224 <startup-0x1ffffddc>
 220:	39325441 	ldmdbcc	r2!, {r0, r6, sl, ip, lr}
 224:	614c2d30 	cmpvs	ip, r0, lsr sp
 228:	79736d72 	ldmdbvc	r3!, {r1, r4, r5, r6, r8, sl, fp, sp, lr}^
 22c:	6d657473 	cfstrdvs	mvd7, [r5, #-460]!	; 0xfffffe34
 230:	646f6b2f 	strbtvs	r6, [pc], #-2863	; 238 <startup-0x1ffffdc8>
 234:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
 238:	4d54532f 	ldclmi	3, cr5, [r4, #-188]	; 0xffffff44
 23c:	34463233 	strbcc	r3, [r6], #-563	; 0xfffffdcd
 240:	62696c5f 	rsbvs	r6, r9, #24320	; 0x5f00
 244:	4d54532f 	ldclmi	3, cr5, [r4, #-188]	; 0xffffff44
 248:	34463233 	strbcc	r3, [r6], #-563	; 0xfffffdcd
 24c:	535f7878 	cmppl	pc, #120, 16	; 0x780000
 250:	65506474 	ldrbvs	r6, [r0, #-1140]	; 0xfffffb8c
 254:	68706972 	ldmdavs	r0!, {r1, r4, r5, r6, r8, fp, sp, lr}^
 258:	6972445f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, sl, lr}^
 25c:	2f726576 	svccs	0x00726576
 260:	00637273 	rsbeq	r7, r3, r3, ror r2
 264:	635c3a63 	cmpvs	ip, #405504	; 0x63000
 268:	70616573 	rsbvc	r6, r1, r3, ror r5
 26c:	6f635c70 	svcvs	0x00635c70
 270:	696c6564 	stmdbvs	ip!, {r2, r5, r6, r8, sl, sp, lr}^
 274:	745c6574 	ldrbvc	r6, [ip], #-1396	; 0xfffffa8c
 278:	736c6f6f 	cmnvc	ip, #444	; 0x1bc
 27c:	6363675c 	cmnvs	r3, #92, 14	; 0x1700000
 280:	6d72612d 	ldfvse	f6, [r2, #-180]!	; 0xffffff4c
 284:	6d72615c 	ldfvse	f6, [r2, #-368]!	; 0xfffffe90
 288:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
 28c:	61652d65 	cmnvs	r5, r5, ror #26
 290:	695c6962 	ldmdbvs	ip, {r1, r5, r6, r8, fp, sp, lr}^
 294:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
 298:	6d5c6564 	cfldr64vs	mvdx6, [ip, #-400]	; 0xfffffe70
 29c:	69686361 	stmdbvs	r8!, {r0, r5, r6, r8, r9, sp, lr}^
 2a0:	6300656e 	movwvs	r6, #1390	; 0x56e
 2a4:	73635c3a 	cmnvc	r3, #14848	; 0x3a00
 2a8:	70706165 	rsbsvc	r6, r0, r5, ror #2
 2ac:	646f635c 	strbtvs	r6, [pc], #-860	; 2b4 <startup-0x1ffffd4c>
 2b0:	74696c65 	strbtvc	r6, [r9], #-3173	; 0xfffff39b
 2b4:	6f745c65 	svcvs	0x00745c65
 2b8:	5c736c6f 	ldclpl	12, cr6, [r3], #-444	; 0xfffffe44
 2bc:	2d636367 	stclcs	3, cr6, [r3, #-412]!	; 0xfffffe64
 2c0:	5c6d7261 	sfmpl	f7, 2, [sp], #-388	; 0xfffffe7c
 2c4:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
 2c8:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
 2cc:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
 2d0:	6e695c69 	cdpvs	12, 6, cr5, cr9, cr9, {3}
 2d4:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
 2d8:	79735c65 	ldmdbvc	r3!, {r0, r2, r5, r6, sl, fp, ip, lr}^
 2dc:	2e2e0073 	mcrcs	0, 1, r0, cr14, cr3, {3}
 2e0:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
 2e4:	4d54532f 	ldclmi	3, cr5, [r4, #-188]	; 0xffffff44
 2e8:	34463233 	strbcc	r3, [r6], #-563	; 0xfffffdcd
 2ec:	62696c5f 	rsbvs	r6, r9, #24320	; 0x5f00
 2f0:	534d432f 	movtpl	r4, #54063	; 0xd32f
 2f4:	692f5349 	stmdbvs	pc!, {r0, r3, r6, r8, r9, ip, lr}	; <UNPREDICTABLE>
 2f8:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
 2fc:	2e006564 	cfsh32cs	mvfx6, mvfx0, #52
 300:	696c2f2e 	stmdbvs	ip!, {r1, r2, r3, r5, r8, r9, sl, fp, sp}^
 304:	54532f62 	ldrbpl	r2, [r3], #-3938	; 0xfffff09e
 308:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
 30c:	696c5f34 	stmdbvs	ip!, {r2, r4, r5, r8, r9, sl, fp, ip, lr}^
 310:	54532f62 	ldrbpl	r2, [r3], #-3938	; 0xfffff09e
 314:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
 318:	5f787834 	svcpl	0x00787834
 31c:	50647453 	rsbpl	r7, r4, r3, asr r4
 320:	70697265 	rsbvc	r7, r9, r5, ror #4
 324:	72445f68 	subvc	r5, r4, #104, 30	; 0x1a0
 328:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
 32c:	636e692f 	cmnvs	lr, #770048	; 0xbc000
 330:	74730000 	ldrbtvc	r0, [r3], #-0
 334:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
 338:	5f787834 	svcpl	0x00787834
 33c:	6f697067 	svcvs	0x00697067
 340:	0100632e 	tsteq	r0, lr, lsr #6
 344:	645f0000 	ldrbvs	r0, [pc], #-0	; 34c <startup-0x1ffffcb4>
 348:	75616665 	strbvc	r6, [r1, #-1637]!	; 0xfffff99b
 34c:	745f746c 	ldrbvc	r7, [pc], #-1132	; 354 <startup-0x1ffffcac>
 350:	73657079 	cmnvc	r5, #121	; 0x79
 354:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
 358:	735f0000 	cmpvc	pc, #0
 35c:	6e696474 	mcrvs	4, 3, r6, cr9, cr4, {3}
 360:	00682e74 	rsbeq	r2, r8, r4, ror lr
 364:	63000003 	movwvs	r0, #3
 368:	5f65726f 	svcpl	0x0065726f
 36c:	2e346d63 	cdpcs	13, 3, cr6, cr4, cr3, {3}
 370:	00040068 	andeq	r0, r4, r8, rrx
 374:	73797300 	cmnvc	r9, #0, 6
 378:	5f6d6574 	svcpl	0x006d6574
 37c:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
 380:	78346632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, sp, lr}
 384:	00682e78 	rsbeq	r2, r8, r8, ror lr
 388:	73000005 	movwvc	r0, #5
 38c:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
 390:	78783466 	ldmdavc	r8!, {r1, r2, r5, r6, sl, ip, sp}^
 394:	0500682e 	streq	r6, [r0, #-2094]	; 0xfffff7d2
 398:	74730000 	ldrbtvc	r0, [r3], #-0
 39c:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
 3a0:	5f787834 	svcpl	0x00787834
 3a4:	6f697067 	svcvs	0x00697067
 3a8:	0500682e 	streq	r6, [r0, #-2094]	; 0xfffff7d2
 3ac:	00000000 	andeq	r0, r0, r0
 3b0:	01000205 	tsteq	r0, r5, lsl #4
 3b4:	ff032000 			; <UNDEFINED> instruction: 0xff032000
 3b8:	4c4e0100 	stfmie	f0, [lr], {-0}
 3bc:	4a38034b 	bmi	e010f0 <startup-0x1f1fef10>
 3c0:	4c204a03 			; <UNDEFINED> instruction: 0x4c204a03
 3c4:	4a33034b 	bmi	cc10f8 <startup-0x1f33ef08>
 3c8:	4c204f03 	stcmi	15, cr4, [r0], #-12
 3cc:	4a2e034b 	bmi	b81100 <startup-0x1f47ef00>
 3d0:	4c205403 	cfstrsmi	mvf5, [r0], #-12
 3d4:	4a29034b 	bmi	a41108 <startup-0x1f5beef8>
 3d8:	4c205903 			; <UNDEFINED> instruction: 0x4c205903
 3dc:	4a24034b 	bmi	901110 <startup-0x1f6feef0>
 3e0:	4c205e03 	stcmi	14, cr5, [r0], #-12
 3e4:	4a1f034b 	bmi	7c1118 <startup-0x1f83eee8>
 3e8:	4c206303 	stcmi	3, cr6, [r0], #-12
 3ec:	4a1a034b 	bmi	681120 <startup-0x1f97eee0>
 3f0:	4c206803 	stcmi	8, cr6, [r0], #-12
 3f4:	4a15034b 	bmi	541128 <startup-0x1fabeed8>
 3f8:	4c206e03 	stcmi	14, cr6, [r0], #-12
 3fc:	660f0367 	strvs	r0, [pc], -r7, ror #6
 400:	4c207303 	stcmi	3, cr7, [r0], #-12
 404:	660a0367 	strvs	r0, [sl], -r7, ror #6
 408:	4c207a03 			; <UNDEFINED> instruction: 0x4c207a03
 40c:	0c036967 			; <UNDEFINED> instruction: 0x0c036967
 410:	03599008 	cmpeq	r9, #8
 414:	5a3e660a 	bpl	f99c44 <startup-0x1f0663bc>
 418:	bcad4c5a 	stclt	12, cr4, [sp], #360	; 0x168
 41c:	01040200 	mrseq	r0, R12_usr
 420:	50064a06 	andpl	r4, r6, r6, lsl #20
 424:	ccadc0ad 	stcgt	0, cr12, [sp], #692	; 0x2b4
 428:	040200bb 	streq	r0, [r2], #-187	; 0xffffff45
 42c:	ba620302 	blt	188103c <startup-0x1e77efc4>
 430:	01040200 	mrseq	r0, R12_usr
 434:	03063c06 	movweq	r3, #27654	; 0x6c06
 438:	4c523c21 	mrrcmi	12, 2, r3, r2, cr1
 43c:	3d3d3d3d 	ldccc	13, cr3, [sp, #-244]!	; 0xffffff0c
 440:	7410033d 	ldrvc	r0, [r0], #-829	; 0xfffffcc3
 444:	3e5a4275 	mrccc	2, 2, r4, cr10, cr5, {3}
 448:	3d3e3e4c 	ldccc	14, cr3, [lr, #-304]!	; 0xfffffed0
 44c:	754a1c03 	strbvc	r1, [sl, #-3075]	; 0xfffff3fd
 450:	4c5c6850 	mrrcmi	8, 5, r6, ip, cr0
 454:	4a0a033d 	bmi	281150 <startup-0x1fd7eeb0>
 458:	0c033d4e 	stceq	13, cr3, [r3], {78}	; 0x4e
 45c:	6850754a 	ldmdavs	r0, {r1, r3, r6, r8, sl, ip, sp, lr}^
 460:	033d4c5c 	teqeq	sp, #92, 24	; 0x5c00
 464:	3d4e4a0a 	vstrcc	s9, [lr, #-40]	; 0xffffffd8
 468:	794a0f03 	stmdbvc	sl, {r0, r1, r8, r9, sl, fp}^
 46c:	4a0f034b 	bmi	3c11a0 <startup-0x1fc3ee60>
 470:	10034b79 	andne	r4, r3, r9, ror fp
 474:	504cc04a 	subpl	ip, ip, sl, asr #32
 478:	0b034c1e 	bleq	d34f8 <startup-0x1ff2cb08>
 47c:	034b784a 	movteq	r7, #47178	; 0xb84a
 480:	75784a0b 	ldrbvc	r4, [r8, #-2571]!	; 0xfffff5f5
 484:	4a00ce03 	bmi	33c98 <startup-0x1ffcc368>
 488:	9f352fbb 	svcls	0x00352fbb
 48c:	9fbbc908 	svcls	0x00bbc908
 490:	01000402 	tsteq	r0, r2, lsl #8
 494:	0003b501 	andeq	fp, r3, r1, lsl #10
 498:	c7000200 	strgt	r0, [r0, -r0, lsl #4]
 49c:	02000001 	andeq	r0, r0, #1
 4a0:	0d0efb01 	vstreq	d15, [lr, #-4]
 4a4:	01010100 	mrseq	r0, (UNDEF: 17)
 4a8:	00000001 	andeq	r0, r0, r1
 4ac:	01000001 	tsteq	r0, r1
 4b0:	552f3a43 	strpl	r3, [pc, #-2627]!	; fffffa75 <APBAHBPrescTable+0xdfffe65d>
 4b4:	73726573 	cmnvc	r2, #482344960	; 0x1cc00000
 4b8:	6164412f 	cmnvs	r4, pc, lsr #2
 4bc:	4f2f746d 	svcmi	0x002f746d
 4c0:	7244656e 	subvc	r6, r4, #461373440	; 0x1b800000
 4c4:	2f657669 	svccs	0x00657669
 4c8:	756b6f44 	strbvc	r6, [fp, #-3908]!	; 0xfffff0bc
 4cc:	746e656d 	strbtvc	r6, [lr], #-1389	; 0xfffffa93
 4d0:	7469472f 	strbtvc	r4, [r9], #-1839	; 0xfffff8d1
 4d4:	2f627548 	svccs	0x00627548
 4d8:	32544144 	subscc	r4, r4, #68, 2
 4dc:	4c2d3039 	stcmi	0, cr3, [sp], #-228	; 0xffffff1c
 4e0:	736d7261 	cmnvc	sp, #268435462	; 0x10000006
 4e4:	65747379 	ldrbvs	r7, [r4, #-889]!	; 0xfffffc87
 4e8:	6f6b2f6d 	svcvs	0x006b2f6d
 4ec:	696c2f64 	stmdbvs	ip!, {r2, r5, r6, r8, r9, sl, fp, sp}^
 4f0:	54532f62 	ldrbpl	r2, [r3], #-3938	; 0xfffff09e
 4f4:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
 4f8:	696c5f34 	stmdbvs	ip!, {r2, r4, r5, r8, r9, sl, fp, ip, lr}^
 4fc:	54532f62 	ldrbpl	r2, [r3], #-3938	; 0xfffff09e
 500:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
 504:	5f787834 	svcpl	0x00787834
 508:	50647453 	rsbpl	r7, r4, r3, asr r4
 50c:	70697265 	rsbvc	r7, r9, r5, ror #4
 510:	72445f68 	subvc	r5, r4, #104, 30	; 0x1a0
 514:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
 518:	6372732f 	cmnvs	r2, #-1140850688	; 0xbc000000
 51c:	5c3a6300 	ldcpl	3, cr6, [sl], #-0
 520:	61657363 	cmnvs	r5, r3, ror #6
 524:	635c7070 	cmpvs	ip, #112	; 0x70
 528:	6c65646f 	cfstrdvs	mvd6, [r5], #-444	; 0xfffffe44
 52c:	5c657469 	cfstrdpl	mvd7, [r5], #-420	; 0xfffffe5c
 530:	6c6f6f74 	stclvs	15, cr6, [pc], #-464	; 368 <startup-0x1ffffc98>
 534:	63675c73 	cmnvs	r7, #29440	; 0x7300
 538:	72612d63 	rsbvc	r2, r1, #6336	; 0x18c0
 53c:	72615c6d 	rsbvc	r5, r1, #27904	; 0x6d00
 540:	6f6e2d6d 	svcvs	0x006e2d6d
 544:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
 548:	5c696261 	sfmpl	f6, 2, [r9], #-388	; 0xfffffe7c
 54c:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
 550:	5c656475 	cfstrdpl	mvd6, [r5], #-468	; 0xfffffe2c
 554:	6863616d 	stmdavs	r3!, {r0, r2, r3, r5, r6, r8, sp, lr}^
 558:	00656e69 	rsbeq	r6, r5, r9, ror #28
 55c:	635c3a63 	cmpvs	ip, #405504	; 0x63000
 560:	70616573 	rsbvc	r6, r1, r3, ror r5
 564:	6f635c70 	svcvs	0x00635c70
 568:	696c6564 	stmdbvs	ip!, {r2, r5, r6, r8, sl, sp, lr}^
 56c:	745c6574 	ldrbvc	r6, [ip], #-1396	; 0xfffffa8c
 570:	736c6f6f 	cmnvc	ip, #444	; 0x1bc
 574:	6363675c 	cmnvs	r3, #92, 14	; 0x1700000
 578:	6d72612d 	ldfvse	f6, [r2, #-180]!	; 0xffffff4c
 57c:	6d72615c 	ldfvse	f6, [r2, #-368]!	; 0xfffffe90
 580:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
 584:	61652d65 	cmnvs	r5, r5, ror #26
 588:	695c6962 	ldmdbvs	ip, {r1, r5, r6, r8, fp, sp, lr}^
 58c:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
 590:	735c6564 	cmpvc	ip, #100, 10	; 0x19000000
 594:	2e007379 	mcrcs	3, 0, r7, cr0, cr9, {3}
 598:	696c2f2e 	stmdbvs	ip!, {r1, r2, r3, r5, r8, r9, sl, fp, sp}^
 59c:	54532f62 	ldrbpl	r2, [r3], #-3938	; 0xfffff09e
 5a0:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
 5a4:	696c5f34 	stmdbvs	ip!, {r2, r4, r5, r8, r9, sl, fp, ip, lr}^
 5a8:	4d432f62 	stclmi	15, cr2, [r3, #-392]	; 0xfffffe78
 5ac:	2f534953 	svccs	0x00534953
 5b0:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
 5b4:	00656475 	rsbeq	r6, r5, r5, ror r4
 5b8:	6c2f2e2e 	stcvs	14, cr2, [pc], #-184	; 508 <startup-0x1ffffaf8>
 5bc:	532f6269 			; <UNDEFINED> instruction: 0x532f6269
 5c0:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
 5c4:	6c5f3446 	cfldrdvs	mvd3, [pc], {70}	; 0x46
 5c8:	532f6269 			; <UNDEFINED> instruction: 0x532f6269
 5cc:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
 5d0:	78783446 	ldmdavc	r8!, {r1, r2, r6, sl, ip, sp}^
 5d4:	6474535f 	ldrbtvs	r5, [r4], #-863	; 0xfffffca1
 5d8:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
 5dc:	445f6870 	ldrbmi	r6, [pc], #-2160	; 5e4 <startup-0x1ffffa1c>
 5e0:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
 5e4:	6e692f72 	mcrvs	15, 3, r2, cr9, cr2, {3}
 5e8:	73000063 	movwvc	r0, #99	; 0x63
 5ec:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
 5f0:	78783466 	ldmdavc	r8!, {r1, r2, r5, r6, sl, ip, sp}^
 5f4:	6363725f 	cmnvs	r3, #-268435451	; 0xf0000005
 5f8:	0100632e 	tsteq	r0, lr, lsr #6
 5fc:	645f0000 	ldrbvs	r0, [pc], #-0	; 604 <startup-0x1ffff9fc>
 600:	75616665 	strbvc	r6, [r1, #-1637]!	; 0xfffff99b
 604:	745f746c 	ldrbvc	r7, [pc], #-1132	; 60c <startup-0x1ffff9f4>
 608:	73657079 	cmnvc	r5, #121	; 0x79
 60c:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
 610:	735f0000 	cmpvc	pc, #0
 614:	6e696474 	mcrvs	4, 3, r6, cr9, cr4, {3}
 618:	00682e74 	rsbeq	r2, r8, r4, ror lr
 61c:	63000003 	movwvs	r0, #3
 620:	5f65726f 	svcpl	0x0065726f
 624:	2e346d63 	cdpcs	13, 3, cr6, cr4, cr3, {3}
 628:	00040068 	andeq	r0, r4, r8, rrx
 62c:	73797300 	cmnvc	r9, #0, 6
 630:	5f6d6574 	svcpl	0x006d6574
 634:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
 638:	78346632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, sp, lr}
 63c:	00682e78 	rsbeq	r2, r8, r8, ror lr
 640:	73000005 	movwvc	r0, #5
 644:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
 648:	78783466 	ldmdavc	r8!, {r1, r2, r5, r6, sl, ip, sp}^
 64c:	0500682e 	streq	r6, [r0, #-2094]	; 0xfffff7d2
 650:	74730000 	ldrbtvc	r0, [r3], #-0
 654:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
 658:	5f787834 	svcpl	0x00787834
 65c:	2e636372 	mcrcs	3, 3, r6, cr3, cr2, {3}
 660:	00050068 	andeq	r0, r5, r8, rrx
 664:	05000000 	streq	r0, [r0, #-0]
 668:	00061002 	andeq	r1, r6, r2
 66c:	01e10320 	mvneq	r0, r0, lsr #6
 670:	3f693001 	svccc	0x00693001
 674:	4e4f4069 	cdpmi	0, 4, cr4, cr15, cr9, {3}
 678:	03503f69 	cmpeq	r0, #420	; 0x1a4
 67c:	3f6be417 	svccc	0x006be417
 680:	740f034b 	strvc	r0, [pc], #-843	; 688 <startup-0x1ffff978>
 684:	003d2f3d 	eorseq	r2, sp, sp, lsr pc
 688:	40020402 	andmi	r0, r2, r2, lsl #8
 68c:	02040200 	andeq	r0, r4, #0, 4
 690:	04020067 	streq	r0, [r2], #-103	; 0xffffff99
 694:	02003d02 	andeq	r3, r0, #2, 26	; 0x80
 698:	58060104 	stmdapl	r6, {r2, r8}
 69c:	4e5a4c06 	cdpmi	12, 5, cr4, cr10, cr6, {0}
 6a0:	0b032f3e 	bleq	cc3a0 <startup-0x1ff33c60>
 6a4:	3f32674a 	svccc	0x0032674a
 6a8:	033d694d 	teqeq	sp, #1261568	; 0x134000
 6ac:	4b6a7415 	blmi	1a9d708 <startup-0x1e5628f8>
 6b0:	6c661403 	cfstrdvs	mvd1, [r6], #-12
 6b4:	0b033f3f 	bleq	d03b8 <startup-0x1ff2fc48>
 6b8:	20790366 	rsbscs	r0, r9, r6, ror #6
 6bc:	243d233d 	ldrtcs	r2, [sp], #-829	; 0xfffffcc3
 6c0:	6a740f03 	bvs	1d042d4 <startup-0x1e2fbd2c>
 6c4:	00de034b 	sbcseq	r0, lr, fp, asr #6
 6c8:	2dbb7c66 	ldccs	12, cr7, [fp, #408]!	; 0x198
 6cc:	660e033e 			; <UNDEFINED> instruction: 0x660e033e
 6d0:	1a034b69 	bne	d347c <startup-0x1ff2cb84>
 6d4:	03835d66 	orreq	r5, r3, #6528	; 0x1980
 6d8:	69740185 	ldmdbvs	r4!, {r0, r2, r7, r8}^
 6dc:	00e9034b 	rsceq	r0, r9, fp, asr #6
 6e0:	03ad6c66 			; <UNDEFINED> instruction: 0x03ad6c66
 6e4:	4b69740d 	blmi	1a5d720 <startup-0x1e5a28e0>
 6e8:	69660e03 	stmdbvs	r6!, {r0, r1, r9, sl, fp}^
 6ec:	6615034b 	ldrvs	r0, [r5], -fp, asr #6
 6f0:	4d3f3459 	cfldrsmi	mvf3, [pc, #-356]!	; 594 <startup-0x1ffffa6c>
 6f4:	18034169 	stmdane	r3, {r0, r3, r5, r6, r8, lr}
 6f8:	3f345990 	svccc	0x00345990
 6fc:	0341694d 	movteq	r6, #6477	; 0x194d
 700:	4b7401b3 	blmi	1d00dd4 <startup-0x1e2ff22c>
 704:	4d4d3f33 	stclmi	15, cr3, [sp, #-204]	; 0xffffff34
 708:	660d033d 			; <UNDEFINED> instruction: 0x660d033d
 70c:	1703672f 	strne	r6, [r3, -pc, lsr #14]
 710:	3f334b66 	svccc	0x00334b66
 714:	033d4d4d 	teqeq	sp, #4928	; 0x1340
 718:	334b660f 	movtcc	r6, #46607	; 0xb60f
 71c:	3d4d4d3f 	stclcc	13, cr4, [sp, #-252]	; 0xffffff04
 720:	4b820f03 	blmi	fe084334 <APBAHBPrescTable+0xde082f1c>
 724:	5b4d3f33 	blpl	13503f8 <startup-0x1ecafc08>
 728:	9024033d 	eorls	r0, r4, sp, lsr r3
 72c:	775ac04b 	ldrbvc	ip, [sl, -fp, asr #32]
 730:	263d223d 			; <UNDEFINED> instruction: 0x263d223d
 734:	db3f5a67 	blle	fd70d8 <startup-0x1f028f28>
 738:	038383cb 	orreq	r8, r3, #738197507	; 0x2c000003
 73c:	253d201b 	ldrcs	r2, [sp, #-27]!	; 0xffffffe5
 740:	69683d59 	stmdbvs	r8!, {r0, r3, r4, r6, r8, sl, fp, ip, sp}^
 744:	69683d67 	stmdbvs	r8!, {r0, r1, r2, r5, r6, r8, sl, fp, ip, sp}^
 748:	67683d67 	strbvs	r3, [r8, -r7, ror #26]!
 74c:	4bba3f03 	blmi	fee90360 <APBAHBPrescTable+0xdee8ef48>
 750:	4d3f8433 	cfldrsmi	mvf8, [pc, #-204]!	; 68c <startup-0x1ffff974>
 754:	03834069 	orreq	r4, r3, #105	; 0x69
 758:	4b6a9e0a 	blmi	1aa7f88 <startup-0x1e558078>
 75c:	69660c03 	stmdbvs	r6!, {r0, r1, sl, fp}^
 760:	01b8034b 			; <UNDEFINED> instruction: 0x01b8034b
 764:	033d4e66 	teqeq	sp, #1632	; 0x660
 768:	334b7416 	movtcc	r7, #46102	; 0xb416
 76c:	4b4d4d4d 	blmi	1353ca8 <startup-0x1ecac358>
 770:	4b821403 	blmi	fe085784 <APBAHBPrescTable+0xde08436c>
 774:	4d4d4d33 	stclmi	13, cr4, [sp, #-204]	; 0xffffff34
 778:	8211034b 	andshi	r0, r1, #738197505	; 0x2c000001
 77c:	4d4d334b 	stclmi	3, cr3, [sp, #-300]	; 0xfffffed4
 780:	10034b5b 	andne	r4, r3, fp, asr fp
 784:	4d334b74 	vldmdbmi	r3!, {d4-<overflow reg d61>}
 788:	034b694d 	movteq	r6, #47437	; 0xb94d
 78c:	4b8200d3 	blmi	fe080ae0 <APBAHBPrescTable+0xde07f6c8>
 790:	4d4d4d33 	stclmi	13, cr4, [sp, #-204]	; 0xffffff34
 794:	00f0034b 	rscseq	r0, r0, fp, asr #6
 798:	033d4e82 	teqeq	sp, #2080	; 0x820
 79c:	4c797425 	cfldrdmi	mvd7, [r9], #-148	; 0xffffff6c
 7a0:	03761e6c 	cmneq	r6, #108, 28	; 0x6c0
 7a4:	4c797413 	cfldrdmi	mvd7, [r9], #-76	; 0xffffffb4
 7a8:	03761e6c 	cmneq	r6, #108, 28	; 0x6c0
 7ac:	4c797411 	cfldrdmi	mvd7, [r9], #-68	; 0xffffffbc
 7b0:	03761e6c 	cmneq	r6, #108, 28	; 0x6c0
 7b4:	4c79742c 	cfldrdmi	mvd7, [r9], #-176	; 0xffffff50
 7b8:	03761e6c 	cmneq	r6, #108, 28	; 0x6c0
 7bc:	4c797427 	cfldrdmi	mvd7, [r9], #-156	; 0xffffff64
 7c0:	03761e6c 	cmneq	r6, #108, 28	; 0x6c0
 7c4:	4c79741d 	cfldrdmi	mvd7, [r9], #-116	; 0xffffff8c
 7c8:	03761e6c 	cmneq	r6, #108, 28	; 0x6c0
 7cc:	4c797410 	cfldrdmi	mvd7, [r9], #-64	; 0xffffffc0
 7d0:	03761e6c 	cmneq	r6, #108, 28	; 0x6c0
 7d4:	4c79740e 	cfldrdmi	mvd7, [r9], #-56	; 0xffffffc8
 7d8:	03761e6c 	cmneq	r6, #108, 28	; 0x6c0
 7dc:	4c787429 	cfldrdmi	mvd7, [r8], #-164	; 0xffffff5c
 7e0:	03761e6c 	cmneq	r6, #108, 28	; 0x6c0
 7e4:	4c787423 	cfldrdmi	mvd7, [r8], #-140	; 0xffffff74
 7e8:	03761e6c 	cmneq	r6, #108, 28	; 0x6c0
 7ec:	4c787425 	cfldrdmi	mvd7, [r8], #-148	; 0xffffff6c
 7f0:	03761e6c 	cmneq	r6, #108, 28	; 0x6c0
 7f4:	4c787414 	cfldrdmi	mvd7, [r8], #-80	; 0xffffffb0
 7f8:	03761e6c 	cmneq	r6, #108, 28	; 0x6c0
 7fc:	4c787412 	cfldrdmi	mvd7, [r8], #-72	; 0xffffffb8
 800:	03761e6c 	cmneq	r6, #108, 28	; 0x6c0
 804:	4c78742d 	cfldrdmi	mvd7, [r8], #-180	; 0xffffff4c
 808:	03761e6c 	cmneq	r6, #108, 28	; 0x6c0
 80c:	4c787428 	cfldrdmi	mvd7, [r8], #-160	; 0xffffff60
 810:	03761e6c 	cmneq	r6, #108, 28	; 0x6c0
 814:	4c6a740c 	cfstrdmi	mvd7, [sl], #-48	; 0xffffffd0
 818:	03681e6c 	cmneq	r8, #108, 28	; 0x6c0
 81c:	947402ac 	ldrbtls	r0, [r4], #-684	; 0xfffffd54
 820:	ae1e974d 	cdpge	7, 1, cr9, cr14, cr13, {2}
 824:	67661703 	strbvs	r1, [r6, -r3, lsl #14]!
 828:	59502f2f 	ldmdbpl	r0, {r0, r1, r2, r3, r5, r8, r9, sl, fp, sp}^
 82c:	4e3e4c3e 	mrcmi	12, 1, r4, cr14, cr14, {1}
 830:	5c765940 			; <UNDEFINED> instruction: 0x5c765940
 834:	0a033d4d 	beq	cfd70 <startup-0x1ff30290>
 838:	03753066 	cmneq	r5, #102	; 0x66
 83c:	50675811 	rsbpl	r5, r7, r1, lsl r8
 840:	3d4d5c68 	stclcc	12, cr5, [sp, #-416]	; 0xfffffe60
 844:	6c661103 	stfvse	f1, [r6], #-12
 848:	0006024b 	andeq	r0, r6, fp, asr #4
 84c:	Address 0x0000084c is out of bounds.


Disassembly of section .debug_str:

00000000 <.debug_str>:
   0:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
   4:	00707574 	rsbseq	r7, r0, r4, ror r5
   8:	4f495047 	svcmi	0x00495047
   c:	6570535f 	ldrbvs	r5, [r0, #-863]!	; 0xfffffca1
  10:	4c006465 	cfstrsmi	mvf6, [r0], {101}	; 0x65
  14:	00524b43 	subseq	r4, r2, r3, asr #22
  18:	4f495047 	svcmi	0x00495047
  1c:	646f4d5f 	strbtvs	r4, [pc], #-3423	; 24 <startup-0x1fffffdc>
  20:	46415f65 	strbmi	r5, [r1], -r5, ror #30
  24:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
  28:	75505f4f 	ldrbvc	r5, [r0, #-3919]	; 0xfffff0b1
  2c:	445f6450 	ldrbmi	r6, [pc], #-1104	; 34 <startup-0x1fffffcc>
  30:	004e574f 	subeq	r5, lr, pc, asr #14
  34:	4f495047 	svcmi	0x00495047
  38:	79544f5f 	ldmdbvc	r4, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, lr}^
  3c:	4f5f6570 	svcmi	0x005f6570
  40:	50470044 	subpl	r0, r7, r4, asr #32
  44:	4c5f4f49 	mrrcmi	15, 4, r4, pc, cr9	; <UNPREDICTABLE>
  48:	535f776f 	cmppl	pc, #29097984	; 0x1bc0000
  4c:	64656570 	strbtvs	r6, [r5], #-1392	; 0xfffffa90
  50:	695f5f00 	ldmdbvs	pc, {r8, r9, sl, fp, ip, lr}^	; <UNPREDICTABLE>
  54:	3233746e 	eorscc	r7, r3, #1845493760	; 0x6e000000
  58:	4700745f 	smlsdmi	r0, pc, r4, r7	; <UNPREDICTABLE>
  5c:	5f4f4950 	svcpl	0x004f4950
  60:	65646f4d 	strbvs	r6, [r4, #-3917]!	; 0xfffff0b3
  64:	004e415f 	subeq	r4, lr, pc, asr r1
  68:	726f6873 	rsbvc	r6, pc, #7536640	; 0x730000
  6c:	6e752074 	mrcvs	0, 3, r2, cr5, cr4, {3}
  70:	6e676973 			; <UNDEFINED> instruction: 0x6e676973
  74:	69206465 	stmdbvs	r0!, {r0, r2, r5, r6, sl, sp, lr}
  78:	7300746e 	movwvc	r7, #1134	; 0x46e
  7c:	74726f68 	ldrbtvc	r6, [r2], #-3944	; 0xfffff098
  80:	746e6920 	strbtvc	r6, [lr], #-2336	; 0xfffff6e0
  84:	444f4d00 	strbmi	r4, [pc], #-3328	; 8c <startup-0x1fffff74>
  88:	47005245 	strmi	r5, [r0, -r5, asr #4]
  8c:	4320554e 			; <UNDEFINED> instruction: 0x4320554e
  90:	37203939 			; <UNDEFINED> instruction: 0x37203939
  94:	312e322e 			; <UNDEFINED> instruction: 0x312e322e
  98:	31303220 	teqcc	r0, r0, lsr #4
  9c:	30393037 	eorscc	r3, r9, r7, lsr r0
  a0:	72282034 	eorvc	r2, r8, #52	; 0x34
  a4:	61656c65 	cmnvs	r5, r5, ror #24
  a8:	20296573 	eorcs	r6, r9, r3, ror r5
  ac:	4d52415b 	ldfmie	f4, [r2, #-364]	; 0xfffffe94
  b0:	626d652f 	rsbvs	r6, sp, #197132288	; 0xbc00000
  b4:	65646465 	strbvs	r6, [r4, #-1125]!	; 0xfffffb9b
  b8:	2d372d64 	ldccs	13, cr2, [r7, #-400]!	; 0xfffffe70
  bc:	6e617262 	cdpvs	2, 6, cr7, cr1, cr2, {3}
  c0:	72206863 	eorvc	r6, r0, #6488064	; 0x630000
  c4:	73697665 	cmnvc	r9, #105906176	; 0x6500000
  c8:	206e6f69 	rsbcs	r6, lr, r9, ror #30
  cc:	32353532 	eorscc	r3, r5, #209715200	; 0xc800000
  d0:	205d3430 	subscs	r3, sp, r0, lsr r4
  d4:	68746d2d 	ldmdavs	r4!, {r0, r2, r3, r5, r8, sl, fp, sp, lr}^
  d8:	20626d75 	rsbcs	r6, r2, r5, ror sp
  dc:	72616d2d 	rsbvc	r6, r1, #2880	; 0xb40
  e0:	613d6863 	teqvs	sp, r3, ror #16
  e4:	36766d72 			; <UNDEFINED> instruction: 0x36766d72
  e8:	2d206d2d 	stccs	13, cr6, [r0, #-180]!	; 0xffffff4c
  ec:	6f6c666d 	svcvs	0x006c666d
  f0:	612d7461 			; <UNDEFINED> instruction: 0x612d7461
  f4:	733d6962 	teqvc	sp, #1605632	; 0x188000
  f8:	2074666f 	rsbscs	r6, r4, pc, ror #12
  fc:	68746d2d 	ldmdavs	r4!, {r0, r2, r3, r5, r8, sl, fp, sp, lr}^
 100:	20626d75 	rsbcs	r6, r2, r5, ror sp
 104:	72616d2d 	rsbvc	r6, r1, #2880	; 0xb40
 108:	613d6863 	teqvs	sp, r3, ror #16
 10c:	36766d72 			; <UNDEFINED> instruction: 0x36766d72
 110:	2d206d2d 	stccs	13, cr6, [r0, #-180]!	; 0xffffff4c
 114:	4f2d2067 	svcmi	0x002d2067
 118:	732d2030 			; <UNDEFINED> instruction: 0x732d2030
 11c:	633d6474 	teqvs	sp, #116, 8	; 0x74000000
 120:	47003939 	smladxmi	r0, r9, r9, r3
 124:	5f4f4950 	svcpl	0x004f4950
 128:	65646f4d 	strbvs	r6, [r4, #-3917]!	; 0xfffff0b3
 12c:	59544f00 	ldmdbpl	r4, {r8, r9, sl, fp, lr}^
 130:	00524550 	subseq	r4, r2, r0, asr r5
 134:	42414e45 	submi	r4, r1, #1104	; 0x450
 138:	7500454c 	strvc	r4, [r0, #-1356]	; 0xfffffab4
 13c:	6769736e 	strbvs	r7, [r9, -lr, ror #6]!
 140:	2064656e 	rsbcs	r6, r4, lr, ror #10
 144:	72616863 	rsbvc	r6, r1, #6488064	; 0x630000
 148:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
 14c:	6f4d5f4f 	svcvs	0x004d5f4f
 150:	495f6564 	ldmdbmi	pc, {r2, r5, r6, r8, sl, sp, lr}^	; <UNPREDICTABLE>
 154:	7061004e 	rsbvc	r0, r1, lr, asr #32
 158:	6e695f70 	mcrvs	15, 3, r5, cr9, cr0, {3}
 15c:	44007469 	strmi	r7, [r0], #-1129	; 0xfffffb97
 160:	42415349 	submi	r5, r1, #603979777	; 0x24000001
 164:	4200454c 	andmi	r4, r0, #76, 10	; 0x13000000
 168:	48525253 	ldmdami	r2, {r0, r1, r4, r6, r9, ip, lr}^
 16c:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
 170:	69485f4f 	stmdbvs	r8, {r0, r1, r2, r3, r6, r8, r9, sl, fp, ip, lr}^
 174:	535f6867 	cmppl	pc, #6750208	; 0x670000
 178:	64656570 	strbtvs	r6, [r5], #-1392	; 0xfffffa90
 17c:	4d544900 	vldrmi.16	s9, [r4, #-0]	; <UNPREDICTABLE>
 180:	4278525f 	rsbsmi	r5, r8, #-268435451	; 0xf0000005
 184:	65666675 	strbvs	r6, [r6, #-1653]!	; 0xfffff98b
 188:	50470072 	subpl	r0, r7, r2, ror r0
 18c:	505f4f49 	subspl	r4, pc, r9, asr #30
 190:	00645075 	rsbeq	r5, r4, r5, ror r0
 194:	4f495047 	svcmi	0x00495047
 198:	7361465f 	cmnvc	r1, #99614720	; 0x5f00000
 19c:	70535f74 	subsvc	r5, r3, r4, ror pc
 1a0:	00646565 	rsbeq	r6, r4, r5, ror #10
 1a4:	4f495047 	svcmi	0x00495047
 1a8:	64654d5f 	strbtvs	r4, [r5], #-3423	; 0xfffff2a1
 1ac:	5f6d7569 	svcpl	0x006d7569
 1b0:	65657053 	strbvs	r7, [r5, #-83]!	; 0xffffffad
 1b4:	5f5f0064 	svcpl	0x005f0064
 1b8:	746e6975 	strbtvc	r6, [lr], #-2421	; 0xfffff68b
 1bc:	745f3631 	ldrbvc	r3, [pc], #-1585	; 1c4 <startup-0x1ffffe3c>
 1c0:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
 1c4:	75505f4f 	ldrbvc	r5, [r0, #-3919]	; 0xfffff0b1
 1c8:	4e5f6450 	mrcmi	4, 2, r6, cr15, cr0, {2}
 1cc:	4c55504f 	mrrcmi	0, 4, r5, r5, cr15	; <UNPREDICTABLE>
 1d0:	5f5f004c 	svcpl	0x005f004c
 1d4:	746e6975 	strbtvc	r6, [lr], #-2421	; 0xfffff68b
 1d8:	745f3233 	ldrbvc	r3, [pc], #-563	; 1e0 <startup-0x1ffffe20>
 1dc:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
 1e0:	6570534f 	ldrbvs	r5, [r0, #-847]!	; 0xfffffcb1
 1e4:	545f6465 	ldrbpl	r6, [pc], #-1125	; 1ec <startup-0x1ffffe14>
 1e8:	44657079 	strbtmi	r7, [r5], #-121	; 0xffffff87
 1ec:	4f006665 	svcmi	0x00006665
 1f0:	45455053 	strbmi	r5, [r5, #-83]	; 0xffffffad
 1f4:	6d005244 	sfmvs	f5, 4, [r0, #-272]	; 0xfffffef0
 1f8:	006e6961 	rsbeq	r6, lr, r1, ror #18
 1fc:	4f495047 	svcmi	0x00495047
 200:	7079545f 	rsbsvc	r5, r9, pc, asr r4
 204:	66654465 	strbtvs	r4, [r5], -r5, ror #8
 208:	5c3a4300 	ldcpl	3, cr4, [sl], #-0
 20c:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
 210:	64415c73 	strbvs	r5, [r1], #-3187	; 0xfffff38d
 214:	5c746d61 	ldclpl	13, cr6, [r4], #-388	; 0xfffffe7c
 218:	44656e4f 	strbtmi	r6, [r5], #-3663	; 0xfffff1b1
 21c:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
 220:	6b6f445c 	blvs	1bd1398 <startup-0x1e42ec68>
 224:	6e656d75 	mcrvs	13, 3, r6, cr5, cr5, {3}
 228:	69475c74 	stmdbvs	r7, {r2, r4, r5, r6, sl, fp, ip, lr}^
 22c:	62754874 	rsbsvs	r4, r5, #116, 16	; 0x740000
 230:	5441445c 	strbpl	r4, [r1], #-1116	; 0xfffffba4
 234:	2d303932 			; <UNDEFINED> instruction: 0x2d303932
 238:	6d72614c 	ldfvse	f6, [r2, #-304]!	; 0xfffffed0
 23c:	74737973 	ldrbtvc	r7, [r3], #-2419	; 0xfffff68d
 240:	6b5c6d65 	blvs	171b7dc <startup-0x1e8e4824>
 244:	445c646f 	ldrbmi	r6, [ip], #-1135	; 0xfffffb91
 248:	00726f6f 	rsbseq	r6, r2, pc, ror #30
 24c:	44505550 	ldrbmi	r5, [r0], #-1360	; 0xfffffab0
 250:	50470052 	subpl	r0, r7, r2, asr r0
 254:	4f5f4f49 	svcmi	0x005f4f49
 258:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0xfffff6ac
 25c:	0050505f 	subseq	r5, r0, pc, asr r0
 260:	676e6f6c 	strbvs	r6, [lr, -ip, ror #30]!
 264:	6e6f6c20 	cdpvs	12, 6, cr6, cr15, cr0, {1}
 268:	6e692067 	cdpvs	0, 6, cr2, cr9, cr7, {3}
 26c:	79530074 	ldmdbvc	r3, {r2, r4, r5, r6}^
 270:	6d657473 	cfstrdvs	mvd7, [r5, #-460]!	; 0xfffffe34
 274:	65726f43 	ldrbvs	r6, [r2, #-3907]!	; 0xfffff0bd
 278:	636f6c43 	cmnvs	pc, #17152	; 0x4300
 27c:	5047006b 	subpl	r0, r7, fp, rrx
 280:	505f4f49 	subspl	r4, pc, r9, asr #30
 284:	5f645075 	svcpl	0x00645075
 288:	47005055 	smlsdmi	r0, r5, r0, r5
 28c:	4f4f4950 	svcmi	0x004f4950
 290:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0xfffff6ac
 294:	7079545f 	rsbsvc	r5, r9, pc, asr r4
 298:	66654465 	strbtvs	r4, [r5], -r5, ror #8
 29c:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
 2a0:	544f5f4f 	strbpl	r5, [pc], #-3919	; 2a8 <startup-0x1ffffd58>
 2a4:	00657079 	rsbeq	r7, r5, r9, ror r0
 2a8:	4f495047 	svcmi	0x00495047
 2ac:	696e495f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, lr}^
 2b0:	70795474 	rsbsvc	r5, r9, r4, ror r4
 2b4:	66654465 	strbtvs	r4, [r5], -r5, ror #8
 2b8:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
 2bc:	5075504f 	rsbspl	r5, r5, pc, asr #32
 2c0:	79545f64 	ldmdbvc	r4, {r2, r5, r6, r8, r9, sl, fp, ip, lr}^
 2c4:	65446570 	strbvs	r6, [r4, #-1392]	; 0xfffffa90
 2c8:	3a430066 	bcc	10c0468 <startup-0x1ef3fb98>
 2cc:	6573552f 	ldrbvs	r5, [r3, #-1327]!	; 0xfffffad1
 2d0:	412f7372 			; <UNDEFINED> instruction: 0x412f7372
 2d4:	746d6164 	strbtvc	r6, [sp], #-356	; 0xfffffe9c
 2d8:	656e4f2f 	strbvs	r4, [lr, #-3887]!	; 0xfffff0d1
 2dc:	76697244 	strbtvc	r7, [r9], -r4, asr #4
 2e0:	6f442f65 	svcvs	0x00442f65
 2e4:	656d756b 	strbvs	r7, [sp, #-1387]!	; 0xfffffa95
 2e8:	472f746e 	strmi	r7, [pc, -lr, ror #8]!
 2ec:	75487469 	strbvc	r7, [r8, #-1129]	; 0xfffffb97
 2f0:	41442f62 	cmpmi	r4, r2, ror #30
 2f4:	30393254 	eorscc	r3, r9, r4, asr r2
 2f8:	72614c2d 	rsbvc	r4, r1, #11520	; 0x2d00
 2fc:	7379736d 	cmnvc	r9, #-1275068415	; 0xb4000001
 300:	2f6d6574 	svccs	0x006d6574
 304:	2f646f6b 	svccs	0x00646f6b
 308:	726f6f44 	rsbvc	r6, pc, #68, 30	; 0x110
 30c:	6174732f 	cmnvs	r4, pc, lsr #6
 310:	70757472 	rsbsvc	r7, r5, r2, ror r4
 314:	4200632e 	andmi	r6, r0, #-1207959552	; 0xb8000000
 318:	4c525253 	lfmmi	f5, 2, [r2], {83}	; 0x53
 31c:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
 320:	69505f4f 	ldmdbvs	r0, {r0, r1, r2, r3, r6, r8, r9, sl, fp, ip, lr}^
 324:	5047006e 	subpl	r0, r7, lr, rrx
 328:	4d5f4f49 	ldclmi	15, cr4, [pc, #-292]	; 20c <startup-0x1ffffdf4>
 32c:	5f65646f 	svcpl	0x0065646f
 330:	0054554f 	subseq	r5, r4, pc, asr #10
 334:	676e6f6c 	strbvs	r6, [lr, -ip, ror #30]!
 338:	6e6f6c20 	cdpvs	12, 6, cr6, cr15, cr0, {1}
 33c:	6e752067 	cdpvs	0, 7, cr2, cr5, cr7, {3}
 340:	6e676973 			; <UNDEFINED> instruction: 0x6e676973
 344:	69206465 	stmdbvs	r0!, {r0, r2, r5, r6, sl, sp, lr}
 348:	4700746e 	strmi	r7, [r0, -lr, ror #8]
 34c:	4d4f4950 	vstrmi.16	s9, [pc, #-160]	; 2b4 <startup-0x1ffffd4c>	; <UNPREDICTABLE>
 350:	5f65646f 	svcpl	0x0065646f
 354:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0xfffff6ac
 358:	00666544 	rsbeq	r6, r6, r4, asr #10
 35c:	706e6970 	rsbvc	r6, lr, r0, ror r9
 360:	4200736f 	andmi	r7, r0, #-1140850687	; 0xbc000001
 364:	535f7469 	cmppl	pc, #1761607680	; 0x69000000
 368:	47005445 	strmi	r5, [r0, -r5, asr #8]
 36c:	5f4f4950 	svcpl	0x004f4950
 370:	64616552 	strbtvs	r6, [r1], #-1362	; 0xfffffaae
 374:	7074754f 	rsbsvc	r7, r4, pc, asr #10
 378:	61447475 	hvcvs	18245	; 0x4745
 37c:	47006174 	smlsdxmi	r0, r4, r1, r6
 380:	5f4f4950 	svcpl	0x004f4950
 384:	74004641 	strvc	r4, [r0], #-1601	; 0xfffff9bf
 388:	00706d65 	rsbseq	r6, r0, r5, ror #26
 38c:	4f495047 	svcmi	0x00495047
 390:	7274535f 	rsbsvc	r5, r4, #2080374785	; 0x7c000001
 394:	49746375 	ldmdbmi	r4!, {r0, r2, r4, r5, r6, r8, r9, sp, lr}^
 398:	0074696e 	rsbseq	r6, r4, lr, ror #18
 39c:	56746942 	ldrbtpl	r6, [r4], -r2, asr #18
 3a0:	42006c61 	andmi	r6, r0, #24832	; 0x6100
 3a4:	525f7469 	subspl	r7, pc, #1761607680	; 0x69000000
 3a8:	54455345 	strbpl	r5, [r5], #-837	; 0xfffffcbb
 3ac:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
 3b0:	72575f4f 	subsvc	r5, r7, #316	; 0x13c
 3b4:	42657469 	rsbmi	r7, r5, #1761607680	; 0x69000000
 3b8:	47007469 	strmi	r7, [r0, -r9, ror #8]
 3bc:	5f4f4950 	svcpl	0x004f4950
 3c0:	42746553 	rsbsmi	r6, r4, #348127232	; 0x14c00000
 3c4:	00737469 	rsbseq	r7, r3, r9, ror #8
 3c8:	4f495047 	svcmi	0x00495047
 3cc:	696e495f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, lr}^
 3d0:	50470074 	subpl	r0, r7, r4, ror r0
 3d4:	525f4f49 	subspl	r4, pc, #292	; 0x124
 3d8:	74657365 	strbtvc	r7, [r5], #-869	; 0xfffffc9b
 3dc:	73746942 	cmnvc	r4, #1081344	; 0x108000
 3e0:	2f3a4300 	svccs	0x003a4300
 3e4:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
 3e8:	64412f73 	strbvs	r2, [r1], #-3955	; 0xfffff08d
 3ec:	2f746d61 	svccs	0x00746d61
 3f0:	44656e4f 	strbtmi	r6, [r5], #-3663	; 0xfffff1b1
 3f4:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
 3f8:	6b6f442f 	blvs	1bd14bc <startup-0x1e42eb44>
 3fc:	6e656d75 	mcrvs	13, 3, r6, cr5, cr5, {3}
 400:	69472f74 	stmdbvs	r7, {r2, r4, r5, r6, r8, r9, sl, fp, sp}^
 404:	62754874 	rsbsvs	r4, r5, #116, 16	; 0x740000
 408:	5441442f 	strbpl	r4, [r1], #-1071	; 0xfffffbd1
 40c:	2d303932 			; <UNDEFINED> instruction: 0x2d303932
 410:	6d72614c 	ldfvse	f6, [r2, #-304]!	; 0xfffffed0
 414:	74737973 	ldrbtvc	r7, [r3], #-2419	; 0xfffff68d
 418:	6b2f6d65 	blvs	bdb9b4 <startup-0x1f42464c>
 41c:	6c2f646f 	cfstrsvs	mvf6, [pc], #-444	; 268 <startup-0x1ffffd98>
 420:	532f6269 			; <UNDEFINED> instruction: 0x532f6269
 424:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
 428:	6c5f3446 	cfldrdvs	mvd3, [pc], {70}	; 0x46
 42c:	532f6269 			; <UNDEFINED> instruction: 0x532f6269
 430:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
 434:	78783446 	ldmdavc	r8!, {r1, r2, r6, sl, ip, sp}^
 438:	6474535f 	ldrbtvs	r5, [r4], #-863	; 0xfffffca1
 43c:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
 440:	445f6870 	ldrbmi	r6, [pc], #-2160	; 448 <startup-0x1ffffbb8>
 444:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
 448:	72732f72 	rsbsvc	r2, r3, #456	; 0x1c8
 44c:	74732f63 	ldrbtvc	r2, [r3], #-3939	; 0xfffff09d
 450:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
 454:	5f787834 	svcpl	0x00787834
 458:	6f697067 	svcvs	0x00697067
 45c:	4700632e 	strmi	r6, [r0, -lr, lsr #6]
 460:	5f4f4950 	svcpl	0x004f4950
 464:	6e496544 	cdpvs	5, 4, cr6, cr9, cr4, {2}
 468:	5f007469 	svcpl	0x00007469
 46c:	6e69755f 	mcrvs	5, 3, r7, cr9, cr15, {2}
 470:	745f3874 	ldrbvc	r3, [pc], #-2164	; 478 <startup-0x1ffffb88>
 474:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
 478:	65525f4f 	ldrbvs	r5, [r2, #-3919]	; 0xfffff0b1
 47c:	6e496461 	cdpvs	4, 4, cr6, cr9, cr1, {3}
 480:	44747570 	ldrbtmi	r7, [r4], #-1392	; 0xfffffa90
 484:	42617461 	rsbmi	r7, r1, #1627389952	; 0x61000000
 488:	62007469 	andvs	r7, r0, #1761607680	; 0x69000000
 48c:	74737469 	ldrbtvc	r7, [r3], #-1129	; 0xfffffb97
 490:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
 494:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
 498:	6e495f4f 	cdpvs	15, 4, cr5, cr9, cr15, {2}
 49c:	74537469 	ldrbvc	r7, [r3], #-1129	; 0xfffffb97
 4a0:	74637572 	strbtvc	r7, [r3], #-1394	; 0xfffffa8e
 4a4:	726f5000 	rsbvc	r5, pc, #0
 4a8:	6c615674 	stclvs	6, cr5, [r1], #-464	; 0xfffffe30
 4ac:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
 4b0:	69505f4f 	ldmdbvs	r0, {r0, r1, r2, r3, r6, r8, r9, sl, fp, ip, lr}^
 4b4:	756f536e 	strbvc	r5, [pc, #-878]!	; 14e <startup-0x1ffffeb2>
 4b8:	00656372 	rsbeq	r6, r5, r2, ror r3
 4bc:	4f495047 	svcmi	0x00495047
 4c0:	6165525f 	cmnvs	r5, pc, asr r2
 4c4:	706e4964 	rsbvc	r4, lr, r4, ror #18
 4c8:	61447475 	hvcvs	18245	; 0x4745
 4cc:	47006174 	smlsdxmi	r0, r4, r1, r6
 4d0:	5f4f4950 	svcpl	0x004f4950
 4d4:	4c6e6950 			; <UNDEFINED> instruction: 0x4c6e6950
 4d8:	436b636f 	cmnmi	fp, #-1140850687	; 0xbc000001
 4dc:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
 4e0:	69420067 	stmdbvs	r2, {r0, r1, r2, r5, r6}^
 4e4:	74634174 	strbtvc	r4, [r3], #-372	; 0xfffffe8c
 4e8:	006e6f69 	rsbeq	r6, lr, r9, ror #30
 4ec:	72727563 	rsbsvc	r7, r2, #415236096	; 0x18c00000
 4f0:	70746e65 	rsbsvc	r6, r4, r5, ror #28
 4f4:	47006e69 	strmi	r6, [r0, -r9, ror #28]
 4f8:	5f4f4950 	svcpl	0x004f4950
 4fc:	74697257 	strbtvc	r7, [r9], #-599	; 0xfffffda9
 500:	50470065 	subpl	r0, r7, r5, rrx
 504:	00784f49 	rsbseq	r4, r8, r9, asr #30
 508:	4f495047 	svcmi	0x00495047
 50c:	676f545f 			; <UNDEFINED> instruction: 0x676f545f
 510:	42656c67 	rsbmi	r6, r5, #26368	; 0x6700
 514:	00737469 	rsbseq	r7, r3, r9, ror #8
 518:	706d6574 	rsbvc	r6, sp, r4, ror r5
 51c:	4700325f 	smlsdmi	r0, pc, r2, r3	; <UNPREDICTABLE>
 520:	5f4f4950 	svcpl	0x004f4950
 524:	416e6950 	cmnmi	lr, r0, asr r9
 528:	6e6f4346 	cdpvs	3, 6, cr4, cr15, cr6, {2}
 52c:	00676966 	rsbeq	r6, r7, r6, ror #18
 530:	4f495047 	svcmi	0x00495047
 534:	6165525f 	cmnvs	r5, pc, asr r2
 538:	74754f64 	ldrbtvc	r4, [r5], #-3940	; 0xfffff09c
 53c:	44747570 	ldrbtmi	r7, [r4], #-1392	; 0xfffffa90
 540:	42617461 	rsbmi	r7, r1, #1627389952	; 0x61000000
 544:	52007469 	andpl	r7, r0, #1761607680	; 0x69000000
 548:	485f4343 	ldmdami	pc, {r0, r1, r6, r8, r9, lr}^	; <UNPREDICTABLE>
 54c:	004b4c43 	subeq	r4, fp, r3, asr #24
 550:	5f434352 	svcpl	0x00434352
 554:	0045534c 	subeq	r5, r5, ip, asr #6
 558:	31425041 	cmpcc	r2, r1, asr #32
 55c:	4e45504c 	cdpmi	0, 4, cr5, cr5, cr12, {2}
 560:	43520052 	cmpmi	r2, #82	; 0x52
 564:	4c505f43 	mrrcmi	15, 4, r5, r0, cr3
 568:	4941534c 	stmdbmi	r1, {r2, r3, r6, r8, r9, ip, lr}^
 56c:	00646d43 	rsbeq	r6, r4, r3, asr #26
 570:	5f434352 	svcpl	0x00434352
 574:	534c4c50 	movtpl	r4, #52304	; 0xcc50
 578:	69444941 	stmdbvs	r4, {r0, r6, r8, fp, lr}^
 57c:	52005176 	andpl	r5, r0, #-2147483619	; 0x8000001d
 580:	505f4343 	subspl	r4, pc, r3, asr #6
 584:	41534c4c 	cmpmi	r3, ip, asr #24
 588:	76694449 	strbtvc	r4, [r9], -r9, asr #8
 58c:	74730052 	ldrbtvc	r0, [r3], #-82	; 0xffffffae
 590:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
 594:	00676572 	rsbeq	r6, r7, r2, ror r5
 598:	43535953 	cmpmi	r3, #1359872	; 0x14c000
 59c:	465f4b4c 	ldrbmi	r4, [pc], -ip, asr #22
 5a0:	75716572 	ldrbvc	r6, [r1, #-1394]!	; 0xfffffa8e
 5a4:	79636e65 	stmdbvc	r3!, {r0, r2, r5, r6, r9, sl, fp, sp, lr}^
 5a8:	6c6c7000 	stclvs	0, cr7, [ip], #-0
 5ac:	6c70006d 	ldclvs	0, cr0, [r0], #-436	; 0xfffffe4c
 5b0:	5200706c 	andpl	r7, r0, #108	; 0x6c
 5b4:	4d5f4343 	ldclmi	3, cr4, [pc, #-268]	; 4b0 <startup-0x1ffffb50>
 5b8:	53314f43 	teqpl	r1, #268	; 0x10c
 5bc:	6372756f 	cmnvs	r2, #465567744	; 0x1bc00000
 5c0:	43520065 	cmpmi	r2, #101	; 0x65
 5c4:	50415f43 	subpl	r5, r1, r3, asr #30
 5c8:	65503142 	ldrbvs	r3, [r0, #-322]	; 0xfffffebe
 5cc:	68706972 	ldmdavs	r0!, {r1, r4, r5, r6, r8, fp, sp, lr}^
 5d0:	65736552 	ldrbvs	r6, [r3, #-1362]!	; 0xfffffaae
 5d4:	646d4374 	strbtvs	r4, [sp], #-884	; 0xfffffc8c
 5d8:	4c4c5000 	marmi	acc0, r5, ip
 5dc:	4352004e 	cmpmi	r2, #78	; 0x4e
 5e0:	41535f43 	cmpmi	r3, r3, asr #30
 5e4:	4c4c5049 	mcrrmi	0, 4, r5, ip, cr9
 5e8:	43494153 	movtmi	r4, #37203	; 0x9153
 5ec:	69446b6c 	stmdbvs	r4, {r2, r3, r5, r6, r8, r9, fp, sp, lr}^
 5f0:	6e6f4376 	mcrvs	3, 3, r4, cr15, cr6, {3}
 5f4:	00676966 	rsbeq	r6, r7, r6, ror #18
 5f8:	504c4c50 	subpl	r4, ip, r0, asr ip
 5fc:	4c4c5000 	marmi	acc0, r5, ip
 600:	43520051 	cmpmi	r2, #81	; 0x51
 604:	6c435f43 	mcrrvs	15, 4, r5, r3, cr3
 608:	49726165 	ldmdbmi	r2!, {r0, r2, r5, r6, r8, sp, lr}^
 60c:	6e655054 	mcrvs	0, 3, r5, cr5, cr4, {2}
 610:	676e6964 	strbvs	r6, [lr, -r4, ror #18]!
 614:	00746942 	rsbseq	r6, r4, r2, asr #18
 618:	5f434352 	svcpl	0x00434352
 61c:	50005449 	andpl	r5, r0, r9, asr #8
 620:	004d4c4c 	subeq	r4, sp, ip, asr #24
 624:	5f434352 	svcpl	0x00434352
 628:	31424841 	cmpcc	r2, r1, asr #16
 62c:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
 630:	41006870 	tstmi	r0, r0, ror r8
 634:	4c314248 	lfmmi	f4, 4, [r1], #-288	; 0xfffffee0
 638:	524e4550 	subpl	r4, lr, #80, 10	; 0x14000000
 63c:	43435200 	movtmi	r5, #12800	; 0x3200
 640:	6f6c435f 	svcvs	0x006c435f
 644:	00736b63 	rsbseq	r6, r3, r3, ror #22
 648:	5f434352 	svcpl	0x00434352
 64c:	32425041 	subcc	r5, r2, #65	; 0x41
 650:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
 654:	6c436870 	mcrrvs	8, 7, r6, r3, cr0
 658:	4c6b636f 	stclmi	3, cr6, [fp], #-444	; 0xfffffe44
 65c:	646f4d50 	strbtvs	r4, [pc], #-3408	; 664 <startup-0x1ffff99c>
 660:	646d4365 	strbtvs	r4, [sp], #-869	; 0xfffffc9b
 664:	4b434400 	blmi	10d166c <startup-0x1ef2e994>
 668:	52474643 	subpl	r4, r7, #70254592	; 0x4300000
 66c:	43435200 	movtmi	r5, #12800	; 0x3200
 670:	656c435f 	strbvs	r4, [ip, #-863]!	; 0xfffffca1
 674:	6c467261 	sfmvs	f7, 2, [r6], {97}	; 0x61
 678:	41006761 	tstmi	r0, r1, ror #14
 67c:	52314248 	eorspl	r4, r1, #72, 4	; 0x80000004
 680:	00525453 	subseq	r5, r2, r3, asr r4
 684:	434b4344 	movtmi	r4, #45892	; 0xb344
 688:	32524746 	subscc	r4, r2, #18350080	; 0x1180000
 68c:	706d7400 	rsbvc	r7, sp, r0, lsl #8
 690:	00676572 	rsbeq	r6, r7, r2, ror r5
 694:	4b4c4350 	blmi	13113dc <startup-0x1eceec24>
 698:	72465f32 	subvc	r5, r6, #50, 30	; 0xc8
 69c:	65757165 	ldrbvs	r7, [r5, #-357]!	; 0xfffffe9b
 6a0:	0079636e 	rsbseq	r6, r9, lr, ror #6
 6a4:	5f434352 	svcpl	0x00434352
 6a8:	32424841 	subcc	r4, r2, #4259840	; 0x410000
 6ac:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
 6b0:	6c436870 	mcrrvs	8, 7, r6, r3, cr0
 6b4:	436b636f 	cmnmi	fp, #-1140850687	; 0xbc000001
 6b8:	4100646d 	tstmi	r0, sp, ror #8
 6bc:	52324250 	eorspl	r4, r2, #80, 4
 6c0:	00525453 	subseq	r5, r2, r3, asr r4
 6c4:	5f434352 	svcpl	0x00434352
 6c8:	4b4c4350 	blmi	1311410 <startup-0x1eceebf0>
 6cc:	6e6f4331 	mcrvs	3, 3, r4, cr15, cr1, {1}
 6d0:	00676966 	rsbeq	r6, r7, r6, ror #18
 6d4:	5f434352 	svcpl	0x00434352
 6d8:	33424841 	movtcc	r4, #10305	; 0x2841
 6dc:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
 6e0:	65526870 	ldrbvs	r6, [r2, #-2160]	; 0xfffff790
 6e4:	43746573 	cmnmi	r4, #482344960	; 0x1cc00000
 6e8:	5200646d 	andpl	r6, r0, #1828716544	; 0x6d000000
 6ec:	535f4343 	cmppl	pc, #201326593	; 0xc000001
 6f0:	6c424941 	mcrrvs	9, 4, r4, r2, cr1	; <UNPREDICTABLE>
 6f4:	416b636f 	cmnmi	fp, pc, ror #6
 6f8:	434b4c43 	movtmi	r4, #48195	; 0xbc43
 6fc:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
 700:	43520067 	cmpmi	r2, #103	; 0x67
 704:	48415f43 	stmdami	r1, {r0, r1, r6, r8, r9, sl, fp, ip, lr}^
 708:	65503142 	ldrbvs	r3, [r0, #-322]	; 0xfffffebe
 70c:	68706972 	ldmdavs	r0!, {r1, r4, r5, r6, r8, fp, sp, lr}^
 710:	65736552 	ldrbvs	r6, [r3, #-1362]!	; 0xfffffaae
 714:	646d4374 	strbtvs	r4, [sp], #-884	; 0xfffffc8c
 718:	43435200 	movtmi	r5, #12800	; 0x3200
 71c:	4c43485f 	mcrrmi	8, 5, r4, r3, cr15
 720:	6e6f434b 	cdpvs	3, 6, cr4, cr15, cr11, {2}
 724:	00676966 	rsbeq	r6, r7, r6, ror #18
 728:	5f434352 	svcpl	0x00434352
 72c:	43535953 	cmpmi	r3, #1359872	; 0x14c000
 730:	6f434b4c 	svcvs	0x00434b4c
 734:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
 738:	43435200 	movtmi	r5, #12800	; 0x3200
 73c:	45534c5f 	ldrbmi	r4, [r3, #-3167]	; 0xfffff3a1
 740:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
 744:	43006769 	movwmi	r6, #1897	; 0x769
 748:	73552f3a 	cmpvc	r5, #58, 30	; 0xe8
 74c:	2f737265 	svccs	0x00737265
 750:	6d616441 	cfstrdvs	mvd6, [r1, #-260]!	; 0xfffffefc
 754:	6e4f2f74 	mcrvs	15, 2, r2, cr15, cr4, {3}
 758:	69724465 	ldmdbvs	r2!, {r0, r2, r5, r6, sl, lr}^
 75c:	442f6576 	strtmi	r6, [pc], #-1398	; 764 <startup-0x1ffff89c>
 760:	6d756b6f 	fldmdbxvs	r5!, {d22-d76}	;@ Deprecated
 764:	2f746e65 	svccs	0x00746e65
 768:	48746947 	ldmdami	r4!, {r0, r1, r2, r6, r8, fp, sp, lr}^
 76c:	442f6275 	strtmi	r6, [pc], #-629	; 774 <startup-0x1ffff88c>
 770:	39325441 	ldmdbcc	r2!, {r0, r6, sl, ip, lr}
 774:	614c2d30 	cmpvs	ip, r0, lsr sp
 778:	79736d72 	ldmdbvc	r3!, {r1, r4, r5, r6, r8, sl, fp, sp, lr}^
 77c:	6d657473 	cfstrdvs	mvd7, [r5, #-460]!	; 0xfffffe34
 780:	646f6b2f 	strbtvs	r6, [pc], #-2863	; 788 <startup-0x1ffff878>
 784:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
 788:	4d54532f 	ldclmi	3, cr5, [r4, #-188]	; 0xffffff44
 78c:	34463233 	strbcc	r3, [r6], #-563	; 0xfffffdcd
 790:	62696c5f 	rsbvs	r6, r9, #24320	; 0x5f00
 794:	4d54532f 	ldclmi	3, cr5, [r4, #-188]	; 0xffffff44
 798:	34463233 	strbcc	r3, [r6], #-563	; 0xfffffdcd
 79c:	535f7878 	cmppl	pc, #120, 16	; 0x780000
 7a0:	65506474 	ldrbvs	r6, [r0, #-1140]	; 0xfffffb8c
 7a4:	68706972 	ldmdavs	r0!, {r1, r4, r5, r6, r8, fp, sp, lr}^
 7a8:	6972445f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, sl, lr}^
 7ac:	2f726576 	svccs	0x00726576
 7b0:	2f637273 	svccs	0x00637273
 7b4:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
 7b8:	78346632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, sp, lr}
 7bc:	63725f78 	cmnvs	r2, #120, 30	; 0x1e0
 7c0:	00632e63 	rsbeq	r2, r3, r3, ror #28
 7c4:	5377654e 	cmnpl	r7, #327155712	; 0x13800000
 7c8:	65746174 	ldrbvs	r6, [r4, #-372]!	; 0xfffffe8c
 7cc:	4c4c5000 	marmi	acc0, r5, ip
 7d0:	52474643 	subpl	r4, r7, #70254592	; 0x4300000
 7d4:	43435200 	movtmi	r5, #12800	; 0x3200
 7d8:	6361425f 	cmnvs	r1, #-268435451	; 0xf0000005
 7dc:	5270756b 	rsbspl	r7, r0, #448790528	; 0x1ac00000
 7e0:	74657365 	strbtvc	r7, [r5], #-869	; 0xfffffc9b
 7e4:	00646d43 	rsbeq	r6, r4, r3, asr #26
 7e8:	6f727245 	svcvs	0x00727245
 7ec:	61745372 	cmnvs	r4, r2, ror r3
 7f0:	00737574 	rsbseq	r7, r3, r4, ror r5
 7f4:	5f434352 	svcpl	0x00434352
 7f8:	534c4c50 	movtpl	r4, #52304	; 0xcc50
 7fc:	6372756f 	cmnvs	r2, #465567744	; 0x1bc00000
 800:	43520065 	cmpmi	r2, #101	; 0x65
 804:	65475f43 	strbvs	r5, [r7, #-3907]	; 0xfffff0bd
 808:	53595374 	cmppl	r9, #116, 6	; 0xd0000001
 80c:	534b4c43 	movtpl	r4, #48195	; 0xbc43
 810:	6372756f 	cmnvs	r2, #465567744	; 0x1bc00000
 814:	43520065 	cmpmi	r2, #101	; 0x65
 818:	61575f43 	cmpvs	r7, r3, asr #30
 81c:	6f467469 	svcvs	0x00467469
 820:	45534872 	ldrbmi	r4, [r3, #-2162]	; 0xfffff78e
 824:	72617453 	rsbvc	r7, r1, #1392508928	; 0x53000000
 828:	00705574 	rsbseq	r5, r0, r4, ror r5
 82c:	4b4c4348 	blmi	1311554 <startup-0x1eceeaac>
 830:	6572465f 	ldrbvs	r4, [r2, #-1631]!	; 0xfffff9a1
 834:	6e657571 	mcrvs	5, 3, r7, cr5, cr1, {3}
 838:	52007963 	andpl	r7, r0, #1622016	; 0x18c000
 83c:	415f4343 	cmpmi	pc, r3, asr #6
 840:	50314250 	eorspl	r4, r1, r0, asr r2
 844:	70697265 	rsbvc	r7, r9, r5, ror #4
 848:	6c700068 	ldclvs	0, cr0, [r0], #-416	; 0xfffffe60
 84c:	6f63766c 	svcvs	0x0063766c
 850:	43435200 	movtmi	r5, #12800	; 0x3200
 854:	414c465f 	cmpmi	ip, pc, asr r6
 858:	43520047 	cmpmi	r2, #71	; 0x47
 85c:	434d5f43 	movtmi	r5, #57155	; 0xdf43
 860:	6f43314f 	svcvs	0x0043314f
 864:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
 868:	43435200 	movtmi	r5, #12800	; 0x3200
 86c:	5359535f 	cmppl	r9, #2080374785	; 0x7c000001
 870:	004b4c43 	subeq	r4, fp, r3, asr #24
 874:	5f434352 	svcpl	0x00434352
 878:	494c4c50 	stmdbmi	ip, {r4, r6, sl, fp, lr}^
 87c:	6d435332 	stclvs	3, cr5, [r3, #-200]	; 0xffffff38
 880:	43520064 	cmpmi	r2, #100	; 0x64
 884:	79545f43 	ldmdbvc	r4, {r0, r1, r6, r8, r9, sl, fp, ip, lr}^
 888:	65446570 	strbvs	r6, [r4, #-1392]	; 0xfffffa90
 88c:	72700066 	rsbsvc	r0, r0, #102	; 0x66
 890:	00637365 	rsbeq	r7, r3, r5, ror #6
 894:	5f434352 	svcpl	0x00434352
 898:	43435452 	movtmi	r5, #13394	; 0x3452
 89c:	6f534b4c 	svcvs	0x00534b4c
 8a0:	65637275 	strbvs	r7, [r3, #-629]!	; 0xfffffd8b
 8a4:	43435200 	movtmi	r5, #12800	; 0x3200
 8a8:	4941535f 	stmdbmi	r1, {r0, r1, r2, r3, r4, r6, r8, r9, ip, lr}^
 8ac:	636f6c42 	cmnvs	pc, #16896	; 0x4200
 8b0:	4c43416b 	stfmie	f4, [r3], {107}	; 0x6b
 8b4:	756f534b 	strbvc	r5, [pc, #-843]!	; 571 <startup-0x1ffffa8f>
 8b8:	00656372 	rsbeq	r6, r5, r2, ror r3
 8bc:	5f434352 	svcpl	0x00434352
 8c0:	42494153 	submi	r4, r9, #-1073741804	; 0xc0000014
 8c4:	6b636f6c 	blvs	18dc67c <startup-0x1e723984>
 8c8:	4b4c4342 	blmi	13115d8 <startup-0x1eceea28>
 8cc:	72756f53 	rsbsvc	r6, r5, #332	; 0x14c
 8d0:	52006563 	andpl	r6, r0, #415236096	; 0x18c00000
 8d4:	4c5f4343 	mrrcmi	3, 4, r4, pc, cr3	; <UNPREDICTABLE>
 8d8:	43434454 	movtmi	r4, #13396	; 0x3454
 8dc:	69444b4c 	stmdbvs	r4, {r2, r3, r6, r8, r9, fp, lr}^
 8e0:	6e6f4376 	mcrvs	3, 3, r4, cr15, cr6, {3}
 8e4:	00676966 	rsbeq	r6, r7, r6, ror #18
 8e8:	494c4c50 	stmdbmi	ip, {r4, r6, sl, fp, lr}^
 8ec:	46435332 			; <UNDEFINED> instruction: 0x46435332
 8f0:	52005247 	andpl	r5, r0, #1879048196	; 0x70000004
 8f4:	415f4343 	cmpmi	pc, r3, asr #6
 8f8:	50324248 	eorspl	r4, r2, r8, asr #4
 8fc:	70697265 	rsbvc	r7, r9, r5, ror #4
 900:	6f6c4368 	svcvs	0x006c4368
 904:	504c6b63 	subpl	r6, ip, r3, ror #22
 908:	65646f4d 	strbvs	r6, [r4, #-3917]!	; 0xfffff0b3
 90c:	00646d43 	rsbeq	r6, r4, r3, asr #26
 910:	5f434352 	svcpl	0x00434352
 914:	494c4c50 	stmdbmi	ip, {r4, r6, sl, fp, lr}^
 918:	6f435332 	svcvs	0x00435332
 91c:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
 920:	43435200 	movtmi	r5, #12800	; 0x3200
 924:	4953485f 	ldmdbmi	r3, {r0, r1, r2, r3, r4, r6, fp, lr}^
 928:	00646d43 	rsbeq	r6, r4, r3, asr #26
 92c:	5f434352 	svcpl	0x00434352
 930:	32424841 	subcc	r4, r2, #4259840	; 0x410000
 934:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
 938:	41006870 	tstmi	r0, r0, ror r8
 93c:	4c324250 	lfmmi	f4, 4, [r2], #-320	; 0xfffffec0
 940:	524e4550 	subpl	r4, lr, #80, 10	; 0x14000000
 944:	43435200 	movtmi	r5, #12800	; 0x3200
 948:	4248415f 	submi	r4, r8, #-1073741801	; 0xc0000017
 94c:	72655033 	rsbvc	r5, r5, #51	; 0x33
 950:	00687069 	rsbeq	r7, r8, r9, rrx
 954:	5f434352 	svcpl	0x00434352
 958:	324f434d 	subcc	r4, pc, #872415233	; 0x34000001
 95c:	00766944 	rsbseq	r6, r6, r4, asr #18
 960:	5f434352 	svcpl	0x00434352
 964:	50494153 	subpl	r4, r9, r3, asr r1
 968:	32494c4c 	subcc	r4, r9, #76, 24	; 0x4c00
 96c:	6b6c4353 	blvs	1b116c0 <startup-0x1e4ee940>
 970:	43766944 	cmnmi	r6, #68, 18	; 0x110000
 974:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
 978:	43520067 	cmpmi	r2, #103	; 0x67
 97c:	54525f43 	ldrbpl	r5, [r2], #-3907	; 0xfffff0bd
 980:	4b4c4343 	blmi	1311694 <startup-0x1ecee96c>
 984:	00646d43 	rsbeq	r6, r4, r3, asr #26
 988:	4f525245 	svcmi	0x00525245
 98c:	43520052 	cmpmi	r2, #82	; 0x52
 990:	6c435f43 	mcrrvs	15, 4, r5, r3, cr3
 994:	536b636f 	cmnpl	fp, #-1140850687	; 0xbc000001
 998:	72756365 	rsbsvc	r6, r5, #-1811939327	; 0x94000001
 99c:	53797469 	cmnpl	r9, #1761607680	; 0x69000000
 9a0:	65747379 	ldrbvs	r7, [r4, #-889]!	; 0xfffffc87
 9a4:	646d436d 	strbtvs	r4, [sp], #-877	; 0xfffffc93
 9a8:	43435200 	movtmi	r5, #12800	; 0x3200
 9ac:	4c4c505f 	mcrrmi	0, 5, r5, ip, cr15
 9b0:	44533249 	ldrbmi	r3, [r3], #-585	; 0xfffffdb7
 9b4:	00517669 	subseq	r7, r1, r9, ror #12
 9b8:	5f434352 	svcpl	0x00434352
 9bc:	534c4c50 	movtpl	r4, #52304	; 0xcc50
 9c0:	6f434941 	svcvs	0x00434941
 9c4:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
 9c8:	42484100 	submi	r4, r8, #0, 2
 9cc:	524e4533 	subpl	r4, lr, #213909504	; 0xcc00000
 9d0:	43435200 	movtmi	r5, #12800	; 0x3200
 9d4:	45534c5f 	ldrbmi	r4, [r3, #-3167]	; 0xfffff3a1
 9d8:	65646f4d 	strbvs	r6, [r4, #-3917]!	; 0xfffff0b3
 9dc:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
 9e0:	41006769 	tstmi	r0, r9, ror #14
 9e4:	4c324248 	lfmmi	f4, 4, [r2], #-288	; 0xfffffee0
 9e8:	524e4550 	subpl	r4, lr, #80, 10	; 0x14000000
 9ec:	6e754600 	cdpvs	6, 7, cr4, cr5, cr0, {0}
 9f0:	6f697463 	svcvs	0x00697463
 9f4:	536c616e 	cmnpl	ip, #-2147483621	; 0x8000001b
 9f8:	65746174 	ldrbvs	r6, [r4, #-372]!	; 0xfffffe8c
 9fc:	43435200 	movtmi	r5, #12800	; 0x3200
 a00:	4f434d5f 	svcmi	0x00434d5f
 a04:	76694431 			; <UNDEFINED> instruction: 0x76694431
 a08:	43435200 	movtmi	r5, #12800	; 0x3200
 a0c:	4250415f 	subsmi	r4, r0, #-1073741801	; 0xc0000017
 a10:	72655032 	rsbvc	r5, r5, #50	; 0x32
 a14:	52687069 	rsbpl	r7, r8, #105	; 0x69
 a18:	74657365 	strbtvc	r7, [r5], #-869	; 0xfffffc9b
 a1c:	00646d43 	rsbeq	r6, r4, r3, asr #26
 a20:	5f434352 	svcpl	0x00434352
 a24:	324f434d 	subcc	r4, pc, #872415233	; 0x34000001
 a28:	72756f53 	rsbsvc	r6, r5, #332	; 0x14c
 a2c:	52006563 	andpl	r6, r0, #415236096	; 0x18c00000
 a30:	495f4343 	ldmdbmi	pc, {r0, r1, r6, r8, r9, lr}^	; <UNPREDICTABLE>
 a34:	4c435332 	mcrrmi	3, 3, r5, r3, cr2
 a38:	756f534b 	strbvc	r5, [pc, #-843]!	; 6f5 <startup-0x1ffff90b>
 a3c:	00656372 	rsbeq	r6, r5, r2, ror r3
 a40:	534c4c50 	movtpl	r4, #52304	; 0xcc50
 a44:	46434941 	strbmi	r4, [r3], -r1, asr #18
 a48:	52005247 	andpl	r5, r0, #1879048196	; 0x70000004
 a4c:	52455345 	subpl	r5, r5, #335544321	; 0x14000001
 a50:	30444556 	subcc	r4, r4, r6, asr r5
 a54:	53455200 	movtpl	r5, #20992	; 0x5200
 a58:	45565245 	ldrbmi	r5, [r6, #-581]	; 0xfffffdbb
 a5c:	52003144 	andpl	r3, r0, #68, 2
 a60:	52455345 	subpl	r5, r5, #335544321	; 0x14000001
 a64:	32444556 	subcc	r4, r4, #360710144	; 0x15800000
 a68:	53455200 	movtpl	r5, #20992	; 0x5200
 a6c:	45565245 	ldrbmi	r5, [r6, #-581]	; 0xfffffdbb
 a70:	52003344 	andpl	r3, r0, #68, 6	; 0x10000001
 a74:	52455345 	subpl	r5, r5, #335544321	; 0x14000001
 a78:	34444556 	strbcc	r4, [r4], #-1366	; 0xfffffaaa
 a7c:	53455200 	movtpl	r5, #20992	; 0x5200
 a80:	45565245 	ldrbmi	r5, [r6, #-581]	; 0xfffffdbb
 a84:	52003544 	andpl	r3, r0, #68, 10	; 0x11000000
 a88:	52455345 	subpl	r5, r5, #335544321	; 0x14000001
 a8c:	36444556 			; <UNDEFINED> instruction: 0x36444556
 a90:	43435200 	movtmi	r5, #12800	; 0x3200
 a94:	7465475f 	strbtvc	r4, [r5], #-1887	; 0xfffff8a1
 a98:	67616c46 	strbvs	r6, [r1, -r6, asr #24]!
 a9c:	74617453 	strbtvc	r7, [r1], #-1107	; 0xfffffbad
 aa0:	52007375 	andpl	r7, r0, #-738197503	; 0xd4000001
 aa4:	485f4343 	ldmdami	pc, {r0, r1, r6, r8, r9, lr}^	; <UNPREDICTABLE>
 aa8:	6f434553 	svcvs	0x00434553
 aac:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
 ab0:	43435200 	movtmi	r5, #12800	; 0x3200
 ab4:	4941535f 	stmdbmi	r1, {r0, r1, r2, r3, r4, r6, r8, r9, ip, lr}^
 ab8:	636f6c42 	cmnvs	pc, #16896	; 0x4200
 abc:	4c43426b 	sfmmi	f4, 2, [r3], {107}	; 0x6b
 ac0:	6e6f434b 	cdpvs	3, 6, cr4, cr15, cr11, {2}
 ac4:	00676966 	rsbeq	r6, r7, r6, ror #18
 ac8:	534c4c50 	movtpl	r4, #52304	; 0xcc50
 acc:	004e4941 	subeq	r4, lr, r1, asr #18
 ad0:	534c4c50 	movtpl	r4, #52304	; 0xcc50
 ad4:	00514941 	subseq	r4, r1, r1, asr #18
 ad8:	534c4c50 	movtpl	r4, #52304	; 0xcc50
 adc:	00524941 	subseq	r4, r2, r1, asr #18
 ae0:	5f434352 	svcpl	0x00434352
 ae4:	434d4954 	movtmi	r4, #55636	; 0xd954
 ae8:	72504b4c 	subsvc	r4, r0, #76, 22	; 0x13000
 aec:	61637365 	cmnvs	r3, r5, ror #6
 af0:	0072656c 	rsbseq	r6, r2, ip, ror #10
 af4:	5f434352 	svcpl	0x00434352
 af8:	434c4c50 	movtmi	r4, #52304	; 0xcc50
 afc:	5200646d 	andpl	r6, r0, #1828716544	; 0x6d000000
 b00:	415f4343 	cmpmi	pc, r3, asr #6
 b04:	50314248 	eorspl	r4, r1, r8, asr #4
 b08:	70697265 	rsbvc	r7, r9, r5, ror #4
 b0c:	6f6c4368 	svcvs	0x006c4368
 b10:	6d436b63 	vstrvs	d22, [r3, #-396]	; 0xfffffe74
 b14:	50410064 	subpl	r0, r1, r4, rrx
 b18:	4e453242 	cdpmi	2, 4, cr3, cr5, cr2, {2}
 b1c:	48410052 	stmdami	r1, {r1, r4, r6}^
 b20:	53523342 	cmppl	r2, #134217729	; 0x8000001
 b24:	52005254 	andpl	r5, r0, #84, 4	; 0x40000005
 b28:	4d5f4343 	ldclmi	3, cr4, [pc, #-268]	; a24 <startup-0x1ffff5dc>
 b2c:	0065646f 	rsbeq	r6, r5, pc, ror #8
 b30:	5f434352 	svcpl	0x00434352
 b34:	32424841 	subcc	r4, r2, #4259840	; 0x410000
 b38:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
 b3c:	65526870 	ldrbvs	r6, [r2, #-2160]	; 0xfffff790
 b40:	43746573 	cmnmi	r4, #482344960	; 0x1cc00000
 b44:	5200646d 	andpl	r6, r0, #1828716544	; 0x6d000000
 b48:	415f4343 	cmpmi	pc, r3, asr #6
 b4c:	50314250 	eorspl	r4, r1, r0, asr r2
 b50:	70697265 	rsbvc	r7, r9, r5, ror #4
 b54:	6f6c4368 	svcvs	0x006c4368
 b58:	504c6b63 	subpl	r6, ip, r3, ror #22
 b5c:	65646f4d 	strbvs	r6, [r4, #-3917]!	; 0xfffff0b3
 b60:	00646d43 	rsbeq	r6, r4, r3, asr #26
 b64:	5f434352 	svcpl	0x00434352
 b68:	4b4c4350 	blmi	13118b0 <startup-0x1ecee750>
 b6c:	6e6f4332 	mcrvs	3, 3, r4, cr15, cr2, {1}
 b70:	00676966 	rsbeq	r6, r7, r6, ror #18
 b74:	5f434352 	svcpl	0x00434352
 b78:	43535953 	cmpmi	r3, #1359872	; 0x14c000
 b7c:	6f534b4c 	svcvs	0x00534b4c
 b80:	65637275 	strbvs	r7, [r3, #-629]!	; 0xfffffd8b
 b84:	43435200 	movtmi	r5, #12800	; 0x3200
 b88:	4553485f 	ldrbmi	r4, [r3, #-2143]	; 0xfffff7a1
 b8c:	4c435000 	marmi	acc0, r5, r3
 b90:	465f314b 	ldrbmi	r3, [pc], -fp, asr #2
 b94:	75716572 	ldrbvc	r6, [r1, #-1394]!	; 0xfffffa8e
 b98:	79636e65 	stmdbvc	r3!, {r0, r2, r5, r6, r9, sl, fp, sp, lr}^
 b9c:	42504100 	subsmi	r4, r0, #0, 2
 ba0:	50424841 	subpl	r4, r2, r1, asr #16
 ba4:	63736572 	cmnvs	r3, #478150656	; 0x1c800000
 ba8:	6c626154 	stfvse	f6, [r2], #-336	; 0xfffffeb0
 bac:	43520065 	cmpmi	r2, #101	; 0x65
 bb0:	64415f43 	strbvs	r5, [r1], #-3907	; 0xfffff0bd
 bb4:	7473756a 	ldrbtvc	r7, [r3], #-1386	; 0xfffffa96
 bb8:	43495348 	movtmi	r5, #37704	; 0x9348
 bbc:	62696c61 	rsbvs	r6, r9, #24832	; 0x6100
 bc0:	69746172 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, sp, lr}^
 bc4:	61566e6f 	cmpvs	r6, pc, ror #28
 bc8:	0065756c 	rsbeq	r7, r5, ip, ror #10
 bcc:	73657368 	cmnvc	r5, #104, 6	; 0xa0000001
 bd0:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0xfffffe8c
 bd4:	4c500073 	mrrcmi	0, 7, r0, r0, cr3	; <UNPREDICTABLE>
 bd8:	5332494c 	teqpl	r2, #76, 18	; 0x130000
 bdc:	4352004e 	cmpmi	r2, #78	; 0x4e
 be0:	65475f43 	strbvs	r5, [r7, #-3907]	; 0xfffff0bd
 be4:	6f6c4374 	svcvs	0x006c4374
 be8:	46736b63 	ldrbtmi	r6, [r3], -r3, ror #22
 bec:	00716572 	rsbseq	r6, r1, r2, ror r5
 bf0:	5f434352 	svcpl	0x00434352
 bf4:	32425041 	subcc	r5, r2, #65	; 0x41
 bf8:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
 bfc:	6c436870 	mcrrvs	8, 7, r6, r3, cr0
 c00:	436b636f 	cmnmi	fp, #-1140850687	; 0xbc000001
 c04:	4100646d 	tstmi	r0, sp, ror #8
 c08:	52324248 	eorspl	r4, r2, #72, 4	; 0x80000004
 c0c:	00525453 	subseq	r5, r2, r3, asr r4
 c10:	5f434352 	svcpl	0x00434352
 c14:	6e496544 	cdpvs	5, 4, cr6, cr9, cr4, {2}
 c18:	50007469 	andpl	r7, r0, r9, ror #8
 c1c:	32494c4c 	subcc	r4, r9, #76, 24	; 0x4c00
 c20:	52005253 	andpl	r5, r0, #805306373	; 0x30000005
 c24:	475f4343 	ldrbmi	r4, [pc, -r3, asr #6]
 c28:	54497465 	strbpl	r7, [r9], #-1125	; 0xfffffb9b
 c2c:	74617453 	strbtvc	r7, [r1], #-1107	; 0xfffffbad
 c30:	41007375 	tstmi	r0, r5, ror r3
 c34:	45314250 	ldrmi	r4, [r1, #-592]!	; 0xfffffdb0
 c38:	4100524e 	tstmi	r0, lr, asr #4
 c3c:	45324248 	ldrmi	r4, [r2, #-584]!	; 0xfffffdb8
 c40:	5200524e 	andpl	r5, r0, #-536870908	; 0xe0000004
 c44:	415f4343 	cmpmi	pc, r3, asr #6
 c48:	50334248 	eorspl	r4, r3, r8, asr #4
 c4c:	70697265 	rsbvc	r7, r9, r5, ror #4
 c50:	6f6c4368 	svcvs	0x006c4368
 c54:	504c6b63 	subpl	r6, ip, r3, ror #22
 c58:	65646f4d 	strbvs	r6, [r4, #-3917]!	; 0xfffff0b3
 c5c:	00646d43 	rsbeq	r6, r4, r3, asr #26
 c60:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
 c64:	63707574 	cmnvs	r0, #116, 10	; 0x1d000000
 c68:	746e756f 	strbtvc	r7, [lr], #-1391	; 0xfffffa91
 c6c:	52007265 	andpl	r7, r0, #1342177286	; 0x50000006
 c70:	415f4343 	cmpmi	pc, r3, asr #6
 c74:	50324250 	eorspl	r4, r2, r0, asr r2
 c78:	70697265 	rsbvc	r7, r9, r5, ror #4
 c7c:	43520068 	cmpmi	r2, #104	; 0x68
 c80:	49545f43 	ldmdbmi	r4, {r0, r1, r6, r8, r9, sl, fp, ip, lr}^
 c84:	4b4c434d 	blmi	13119c0 <startup-0x1ecee640>
 c88:	73657250 	cmnvc	r5, #80, 4
 c8c:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
 c90:	52006769 	andpl	r6, r0, #27525120	; 0x1a40000
 c94:	495f4343 	ldmdbmi	pc, {r0, r1, r6, r8, r9, lr}^	; <UNPREDICTABLE>
 c98:	4c435332 	mcrrmi	3, 3, r5, r3, cr2
 c9c:	6e6f434b 	cdpvs	3, 6, cr4, cr15, cr11, {2}
 ca0:	00676966 	rsbeq	r6, r7, r6, ror #18
 ca4:	5f434352 	svcpl	0x00434352
 ca8:	324f434d 	subcc	r4, pc, #872415233	; 0x34000001
 cac:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
 cb0:	53006769 	movwpl	r6, #1897	; 0x769
 cb4:	52474353 	subpl	r4, r7, #1275068417	; 0x4c000001
 cb8:	42484100 	submi	r4, r8, #0, 2
 cbc:	45504c33 	ldrbmi	r4, [r0, #-3123]	; 0xfffff3cd
 cc0:	4100524e 	tstmi	r0, lr, asr #4
 cc4:	52314250 	eorspl	r4, r1, #80, 4
 cc8:	00525453 	subseq	r5, r2, r3, asr r4
 ccc:	5f434352 	svcpl	0x00434352
 cd0:	4349534c 	movtmi	r5, #37708	; 0x934c
 cd4:	4300646d 	movwmi	r6, #1133	; 0x46d
 cd8:	5441474b 	strbpl	r4, [r1], #-1867	; 0xfffff8b5
 cdc:	00524e45 	subseq	r4, r2, r5, asr #28
 ce0:	52434442 	subpl	r4, r3, #1107296256	; 0x42000000
 ce4:	43435200 	movtmi	r5, #12800	; 0x3200
 ce8:	4250415f 	subsmi	r4, r0, #-1073741801	; 0xc0000017
 cec:	72655031 	rsbvc	r5, r5, #49	; 0x31
 cf0:	43687069 	cmnmi	r8, #105	; 0x69
 cf4:	6b636f6c 	blvs	18dcaac <startup-0x1e723554>
 cf8:	00646d43 	rsbeq	r6, r4, r3, asr #26
 cfc:	5f434352 	svcpl	0x00434352
 d00:	6f435449 	svcvs	0x00435449
 d04:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
 d08:	43555300 	cmpmi	r5, #0, 6
 d0c:	53534543 	cmppl	r3, #281018368	; 0x10c00000
 d10:	43435200 	movtmi	r5, #12800	; 0x3200
 d14:	4c4c505f 	mcrrmi	0, 5, r5, ip, cr15
 d18:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
 d1c:	52006769 	andpl	r6, r0, #27525120	; 0x1a40000
 d20:	435f4343 	cmpmi	pc, #201326593	; 0xc000001
 d24:	6b636f6c 	blvs	18dcadc <startup-0x1e723524>
 d28:	70795473 	rsbsvc	r5, r9, r3, ror r4
 d2c:	66654465 	strbtvs	r4, [r5], -r5, ror #8
 d30:	42484100 	submi	r4, r8, #0, 2
 d34:	524e4531 	subpl	r4, lr, #205520896	; 0xc400000
 d38:	43435200 	movtmi	r5, #12800	; 0x3200
 d3c:	4354525f 	cmpmi	r4, #-268435451	; 0xf0000005
 d40:	434b4c43 	movtmi	r4, #48195	; 0xbc43
 d44:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
 d48:	6c700067 	ldclvs	0, cr0, [r0], #-412	; 0xfffffe64
 d4c:	756f736c 	strbvc	r7, [pc, #-876]!	; 9e8 <startup-0x1ffff618>
 d50:	00656372 	rsbeq	r6, r5, r2, ror r3
 d54:	5f434352 	svcpl	0x00434352
 d58:	31424841 	cmpcc	r2, r1, asr #16
 d5c:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
 d60:	6c436870 	mcrrvs	8, 7, r6, r3, cr0
 d64:	4c6b636f 	stclmi	3, cr6, [fp], #-444	; 0xfffffe44
 d68:	646f4d50 	strbtvs	r4, [pc], #-3408	; d70 <startup-0x1ffff290>
 d6c:	646d4365 	strbtvs	r4, [sp], #-869	; 0xfffffc9b
 d70:	43435200 	movtmi	r5, #12800	; 0x3200
 d74:	4248415f 	submi	r4, r8, #-1073741801	; 0xc0000017
 d78:	72655033 	rsbvc	r5, r5, #51	; 0x33
 d7c:	43687069 	cmnmi	r8, #105	; 0x69
 d80:	6b636f6c 	blvs	18dcb38 <startup-0x1e7234c8>
 d84:	00646d43 	rsbeq	r6, r4, r3, asr #26

Disassembly of section .comment:

00000000 <.comment>:
   0:	3a434347 	bcc	10d0d24 <startup-0x1ef2f2dc>
   4:	4e472820 	cdpmi	8, 4, cr2, cr7, cr0, {1}
   8:	6f542055 	svcvs	0x00542055
   c:	20736c6f 	rsbscs	r6, r3, pc, ror #24
  10:	20726f66 	rsbscs	r6, r2, r6, ror #30
  14:	206d7241 	rsbcs	r7, sp, r1, asr #4
  18:	65626d45 	strbvs	r6, [r2, #-3397]!	; 0xfffff2bb
  1c:	64656464 	strbtvs	r6, [r5], #-1124	; 0xfffffb9c
  20:	6f725020 	svcvs	0x00725020
  24:	73736563 	cmnvc	r3, #415236096	; 0x18c00000
  28:	2073726f 	rsbscs	r7, r3, pc, ror #4
  2c:	30322d37 	eorscc	r2, r2, r7, lsr sp
  30:	712d3731 			; <UNDEFINED> instruction: 0x712d3731
  34:	616d2d34 	cmnvs	sp, r4, lsr sp
  38:	29726f6a 	ldmdbcs	r2!, {r1, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
  3c:	322e3720 	eorcc	r3, lr, #32, 14	; 0x800000
  40:	3220312e 	eorcc	r3, r0, #-2147483637	; 0x8000000b
  44:	30373130 	eorscc	r3, r7, r0, lsr r1
  48:	20343039 	eorscs	r3, r4, r9, lsr r0
  4c:	6c657228 	sfmvs	f7, 2, [r5], #-160	; 0xffffff60
  50:	65736165 	ldrbvs	r6, [r3, #-357]!	; 0xfffffe9b
  54:	415b2029 	cmpmi	fp, r9, lsr #32
  58:	652f4d52 	strvs	r4, [pc, #-3410]!	; fffff30e <APBAHBPrescTable+0xdfffdef6>
  5c:	6465626d 	strbtvs	r6, [r5], #-621	; 0xfffffd93
  60:	2d646564 	cfstr64cs	mvdx6, [r4, #-400]!	; 0xfffffe70
  64:	72622d37 	rsbvc	r2, r2, #3520	; 0xdc0
  68:	68636e61 	stmdavs	r3!, {r0, r5, r6, r9, sl, fp, sp, lr}^
  6c:	76657220 	strbtvc	r7, [r5], -r0, lsr #4
  70:	6f697369 	svcvs	0x00697369
  74:	3532206e 	ldrcc	r2, [r2, #-110]!	; 0xffffff92
  78:	34303235 	ldrtcc	r3, [r0], #-565	; 0xfffffdcb
  7c:	Address 0x0000007c is out of bounds.


Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00002b41 	andeq	r2, r0, r1, asr #22
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	00000021 	andeq	r0, r0, r1, lsr #32
  10:	2d533605 	ldclcs	6, cr3, [r3, #-20]	; 0xffffffec
  14:	0c06004d 	stceq	0, cr0, [r6], {77}	; 0x4d
  18:	01094d07 	tsteq	r9, r7, lsl #26
  1c:	01140412 	tsteq	r4, r2, lsl r4
  20:	03170115 	tsteq	r7, #1073741829	; 0x40000005
  24:	01190118 	tsteq	r9, r8, lsl r1
  28:	061e011a 			; <UNDEFINED> instruction: 0x061e011a

Disassembly of section .debug_frame:

00000000 <.debug_frame>:
   0:	0000000c 	andeq	r0, r0, ip
   4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   8:	7c020001 	stcvc	0, cr0, [r2], {1}
   c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  10:	0000000c 	andeq	r0, r0, ip
  14:	00000000 	andeq	r0, r0, r0
  18:	20000000 	andcs	r0, r0, r0
  1c:	0000000c 	andeq	r0, r0, ip
  20:	0000001c 	andeq	r0, r0, ip, lsl r0
  24:	00000000 	andeq	r0, r0, r0
  28:	20000010 	andcs	r0, r0, r0, lsl r0
  2c:	00000068 	andeq	r0, r0, r8, rrx
  30:	40080e41 	andmi	r0, r8, r1, asr #28
  34:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  38:	100e4101 	andne	r4, lr, r1, lsl #2
  3c:	00070d41 	andeq	r0, r7, r1, asr #26
  40:	00000018 	andeq	r0, r0, r8, lsl r0
  44:	00000000 	andeq	r0, r0, r0
  48:	20000078 	andcs	r0, r0, r8, ror r0
  4c:	00000088 	andeq	r0, r0, r8, lsl #1
  50:	40080e41 	andmi	r0, r8, r1, asr #28
  54:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  58:	070d4101 	streq	r4, [sp, -r1, lsl #2]
  5c:	0000000c 	andeq	r0, r0, ip
  60:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
  64:	7c020001 	stcvc	0, cr0, [r2], {1}
  68:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  6c:	0000001c 	andeq	r0, r0, ip, lsl r0
  70:	0000005c 	andeq	r0, r0, ip, asr r0
  74:	20000100 	andcs	r0, r0, r0, lsl #2
  78:	00000170 	andeq	r0, r0, r0, ror r1
  7c:	40080e41 	andmi	r0, r8, r1, asr #28
  80:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  84:	100e4101 	andne	r4, lr, r1, lsl #2
  88:	00070d41 	andeq	r0, r7, r1, asr #26
  8c:	0000001c 	andeq	r0, r0, ip, lsl r0
  90:	0000005c 	andeq	r0, r0, ip, asr r0
  94:	20000270 	andcs	r0, r0, r0, ror r2
  98:	00000118 	andeq	r0, r0, r8, lsl r1
  9c:	40080e41 	andmi	r0, r8, r1, asr #28
  a0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  a4:	200e4101 	andcs	r4, lr, r1, lsl #2
  a8:	00070d41 	andeq	r0, r7, r1, asr #26
  ac:	0000001c 	andeq	r0, r0, ip, lsl r0
  b0:	0000005c 	andeq	r0, r0, ip, asr r0
  b4:	20000388 	andcs	r0, r0, r8, lsl #7
  b8:	00000034 	andeq	r0, r0, r4, lsr r0
  bc:	40080e41 	andmi	r0, r8, r1, asr #28
  c0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  c4:	100e4101 	andne	r4, lr, r1, lsl #2
  c8:	00070d41 	andeq	r0, r7, r1, asr #26
  cc:	0000001c 	andeq	r0, r0, ip, lsl r0
  d0:	0000005c 	andeq	r0, r0, ip, asr r0
  d4:	200003bc 			; <UNDEFINED> instruction: 0x200003bc
  d8:	00000046 	andeq	r0, r0, r6, asr #32
  dc:	40080e41 	andmi	r0, r8, r1, asr #28
  e0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  e4:	180e4101 	stmdane	lr, {r0, r8, lr}
  e8:	00070d41 	andeq	r0, r7, r1, asr #26
  ec:	0000001c 	andeq	r0, r0, ip, lsl r0
  f0:	0000005c 	andeq	r0, r0, ip, asr r0
  f4:	20000402 	andcs	r0, r0, r2, lsl #8
  f8:	00000042 	andeq	r0, r0, r2, asr #32
  fc:	40080e41 	andmi	r0, r8, r1, asr #28
 100:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 104:	180e4101 	stmdane	lr, {r0, r8, lr}
 108:	00070d41 	andeq	r0, r7, r1, asr #26
 10c:	0000001c 	andeq	r0, r0, ip, lsl r0
 110:	0000005c 	andeq	r0, r0, ip, asr r0
 114:	20000444 	andcs	r0, r0, r4, asr #8
 118:	00000016 	andeq	r0, r0, r6, lsl r0
 11c:	40080e41 	andmi	r0, r8, r1, asr #28
 120:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 124:	100e4101 	andne	r4, lr, r1, lsl #2
 128:	00070d41 	andeq	r0, r7, r1, asr #26
 12c:	0000001c 	andeq	r0, r0, ip, lsl r0
 130:	0000005c 	andeq	r0, r0, ip, asr r0
 134:	2000045a 	andcs	r0, r0, sl, asr r4
 138:	00000042 	andeq	r0, r0, r2, asr #32
 13c:	40080e41 	andmi	r0, r8, r1, asr #28
 140:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 144:	180e4101 	stmdane	lr, {r0, r8, lr}
 148:	00070d41 	andeq	r0, r7, r1, asr #26
 14c:	0000001c 	andeq	r0, r0, ip, lsl r0
 150:	0000005c 	andeq	r0, r0, ip, asr r0
 154:	2000049c 	mulcs	r0, ip, r4
 158:	00000016 	andeq	r0, r0, r6, lsl r0
 15c:	40080e41 	andmi	r0, r8, r1, asr #28
 160:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 164:	100e4101 	andne	r4, lr, r1, lsl #2
 168:	00070d41 	andeq	r0, r7, r1, asr #26
 16c:	0000001c 	andeq	r0, r0, ip, lsl r0
 170:	0000005c 	andeq	r0, r0, ip, asr r0
 174:	200004b2 			; <UNDEFINED> instruction: 0x200004b2
 178:	0000001e 	andeq	r0, r0, lr, lsl r0
 17c:	40080e41 	andmi	r0, r8, r1, asr #28
 180:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 184:	100e4101 	andne	r4, lr, r1, lsl #2
 188:	00070d41 	andeq	r0, r7, r1, asr #26
 18c:	0000001c 	andeq	r0, r0, ip, lsl r0
 190:	0000005c 	andeq	r0, r0, ip, asr r0
 194:	200004d0 	ldrdcs	r0, [r0], -r0	; <UNPREDICTABLE>
 198:	0000001e 	andeq	r0, r0, lr, lsl r0
 19c:	40080e41 	andmi	r0, r8, r1, asr #28
 1a0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 1a4:	100e4101 	andne	r4, lr, r1, lsl #2
 1a8:	00070d41 	andeq	r0, r7, r1, asr #26
 1ac:	0000001c 	andeq	r0, r0, ip, lsl r0
 1b0:	0000005c 	andeq	r0, r0, ip, asr r0
 1b4:	200004ee 	andcs	r0, r0, lr, ror #9
 1b8:	0000003a 	andeq	r0, r0, sl, lsr r0
 1bc:	40080e41 	andmi	r0, r8, r1, asr #28
 1c0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 1c4:	100e4101 	andne	r4, lr, r1, lsl #2
 1c8:	00070d41 	andeq	r0, r7, r1, asr #26
 1cc:	0000001c 	andeq	r0, r0, ip, lsl r0
 1d0:	0000005c 	andeq	r0, r0, ip, asr r0
 1d4:	20000528 	andcs	r0, r0, r8, lsr #10
 1d8:	0000001e 	andeq	r0, r0, lr, lsl r0
 1dc:	40080e41 	andmi	r0, r8, r1, asr #28
 1e0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 1e4:	100e4101 	andne	r4, lr, r1, lsl #2
 1e8:	00070d41 	andeq	r0, r7, r1, asr #26
 1ec:	0000001c 	andeq	r0, r0, ip, lsl r0
 1f0:	0000005c 	andeq	r0, r0, ip, asr r0
 1f4:	20000546 	andcs	r0, r0, r6, asr #10
 1f8:	00000024 	andeq	r0, r0, r4, lsr #32
 1fc:	40080e41 	andmi	r0, r8, r1, asr #28
 200:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 204:	100e4101 	andne	r4, lr, r1, lsl #2
 208:	00070d41 	andeq	r0, r7, r1, asr #26
 20c:	0000001c 	andeq	r0, r0, ip, lsl r0
 210:	0000005c 	andeq	r0, r0, ip, asr r0
 214:	2000056a 	andcs	r0, r0, sl, ror #10
 218:	000000a4 	andeq	r0, r0, r4, lsr #1
 21c:	40080e41 	andmi	r0, r8, r1, asr #28
 220:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 224:	180e4101 	stmdane	lr, {r0, r8, lr}
 228:	00070d41 	andeq	r0, r7, r1, asr #26
 22c:	0000000c 	andeq	r0, r0, ip
 230:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 234:	7c020001 	stcvc	0, cr0, [r2], {1}
 238:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 23c:	00000018 	andeq	r0, r0, r8, lsl r0
 240:	0000022c 	andeq	r0, r0, ip, lsr #4
 244:	20000610 	andcs	r0, r0, r0, lsl r6
 248:	00000070 	andeq	r0, r0, r0, ror r0
 24c:	40080e41 	andmi	r0, r8, r1, asr #28
 250:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 254:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 258:	0000001c 	andeq	r0, r0, ip, lsl r0
 25c:	0000022c 	andeq	r0, r0, ip, lsr #4
 260:	20000680 	andcs	r0, r0, r0, lsl #13
 264:	00000028 	andeq	r0, r0, r8, lsr #32
 268:	40080e41 	andmi	r0, r8, r1, asr #28
 26c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 270:	100e4101 	andne	r4, lr, r1, lsl #2
 274:	00070d41 	andeq	r0, r7, r1, asr #26
 278:	00000020 	andeq	r0, r0, r0, lsr #32
 27c:	0000022c 	andeq	r0, r0, ip, lsr #4
 280:	200006a8 	andcs	r0, r0, r8, lsr #13
 284:	0000005e 	andeq	r0, r0, lr, asr r0
 288:	400c0e41 	andmi	r0, ip, r1, asr #28
 28c:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 290:	018e4002 	orreq	r4, lr, r2
 294:	41180e41 	tstmi	r8, r1, asr #28
 298:	0000070d 	andeq	r0, r0, sp, lsl #14
 29c:	0000001c 	andeq	r0, r0, ip, lsl r0
 2a0:	0000022c 	andeq	r0, r0, ip, lsr #4
 2a4:	20000706 	andcs	r0, r0, r6, lsl #14
 2a8:	0000003e 	andeq	r0, r0, lr, lsr r0
 2ac:	40080e41 	andmi	r0, r8, r1, asr #28
 2b0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 2b4:	180e4101 	stmdane	lr, {r0, r8, lr}
 2b8:	00070d41 	andeq	r0, r7, r1, asr #26
 2bc:	0000001c 	andeq	r0, r0, ip, lsl r0
 2c0:	0000022c 	andeq	r0, r0, ip, lsr #4
 2c4:	20000744 	andcs	r0, r0, r4, asr #14
 2c8:	00000020 	andeq	r0, r0, r0, lsr #32
 2cc:	40080e41 	andmi	r0, r8, r1, asr #28
 2d0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 2d4:	100e4101 	andne	r4, lr, r1, lsl #2
 2d8:	00070d41 	andeq	r0, r7, r1, asr #26
 2dc:	0000001c 	andeq	r0, r0, ip, lsl r0
 2e0:	0000022c 	andeq	r0, r0, ip, lsr #4
 2e4:	20000764 	andcs	r0, r0, r4, ror #14
 2e8:	00000044 	andeq	r0, r0, r4, asr #32
 2ec:	40080e41 	andmi	r0, r8, r1, asr #28
 2f0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 2f4:	100e4101 	andne	r4, lr, r1, lsl #2
 2f8:	00070d41 	andeq	r0, r7, r1, asr #26
 2fc:	0000001c 	andeq	r0, r0, ip, lsl r0
 300:	0000022c 	andeq	r0, r0, ip, lsr #4
 304:	200007a8 	andcs	r0, r0, r8, lsr #15
 308:	00000020 	andeq	r0, r0, r0, lsr #32
 30c:	40080e41 	andmi	r0, r8, r1, asr #28
 310:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 314:	100e4101 	andne	r4, lr, r1, lsl #2
 318:	00070d41 	andeq	r0, r7, r1, asr #26
 31c:	0000001c 	andeq	r0, r0, ip, lsl r0
 320:	0000022c 	andeq	r0, r0, ip, lsr #4
 324:	200007c8 	andcs	r0, r0, r8, asr #15
 328:	0000003c 	andeq	r0, r0, ip, lsr r0
 32c:	40080e41 	andmi	r0, r8, r1, asr #28
 330:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 334:	180e4101 	stmdane	lr, {r0, r8, lr}
 338:	00070d41 	andeq	r0, r7, r1, asr #26
 33c:	0000001c 	andeq	r0, r0, ip, lsl r0
 340:	0000022c 	andeq	r0, r0, ip, lsr #4
 344:	20000804 	andcs	r0, r0, r4, lsl #16
 348:	00000020 	andeq	r0, r0, r0, lsr #32
 34c:	40080e41 	andmi	r0, r8, r1, asr #28
 350:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 354:	100e4101 	andne	r4, lr, r1, lsl #2
 358:	00070d41 	andeq	r0, r7, r1, asr #26
 35c:	0000001c 	andeq	r0, r0, ip, lsl r0
 360:	0000022c 	andeq	r0, r0, ip, lsr #4
 364:	20000824 	andcs	r0, r0, r4, lsr #16
 368:	00000028 	andeq	r0, r0, r8, lsr #32
 36c:	40080e41 	andmi	r0, r8, r1, asr #28
 370:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 374:	100e4101 	andne	r4, lr, r1, lsl #2
 378:	00070d41 	andeq	r0, r7, r1, asr #26
 37c:	0000001c 	andeq	r0, r0, ip, lsl r0
 380:	0000022c 	andeq	r0, r0, ip, lsr #4
 384:	2000084c 	andcs	r0, r0, ip, asr #16
 388:	00000020 	andeq	r0, r0, r0, lsr #32
 38c:	40080e41 	andmi	r0, r8, r1, asr #28
 390:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 394:	100e4101 	andne	r4, lr, r1, lsl #2
 398:	00070d41 	andeq	r0, r7, r1, asr #26
 39c:	0000001c 	andeq	r0, r0, ip, lsl r0
 3a0:	0000022c 	andeq	r0, r0, ip, lsr #4
 3a4:	2000086c 	andcs	r0, r0, ip, ror #16
 3a8:	00000030 	andeq	r0, r0, r0, lsr r0
 3ac:	40080e41 	andmi	r0, r8, r1, asr #28
 3b0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 3b4:	180e4101 	stmdane	lr, {r0, r8, lr}
 3b8:	00070d41 	andeq	r0, r7, r1, asr #26
 3bc:	0000001c 	andeq	r0, r0, ip, lsl r0
 3c0:	0000022c 	andeq	r0, r0, ip, lsr #4
 3c4:	2000089c 	mulcs	r0, ip, r8
 3c8:	00000020 	andeq	r0, r0, r0, lsr #32
 3cc:	40080e41 	andmi	r0, r8, r1, asr #28
 3d0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 3d4:	100e4101 	andne	r4, lr, r1, lsl #2
 3d8:	00070d41 	andeq	r0, r7, r1, asr #26
 3dc:	0000001c 	andeq	r0, r0, ip, lsl r0
 3e0:	0000022c 	andeq	r0, r0, ip, lsr #4
 3e4:	200008bc 			; <UNDEFINED> instruction: 0x200008bc
 3e8:	00000020 	andeq	r0, r0, r0, lsr #32
 3ec:	40080e41 	andmi	r0, r8, r1, asr #28
 3f0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 3f4:	100e4101 	andne	r4, lr, r1, lsl #2
 3f8:	00070d41 	andeq	r0, r7, r1, asr #26
 3fc:	0000001c 	andeq	r0, r0, ip, lsl r0
 400:	0000022c 	andeq	r0, r0, ip, lsr #4
 404:	200008dc 	ldrdcs	r0, [r0], -ip
 408:	00000040 	andeq	r0, r0, r0, asr #32
 40c:	40080e41 	andmi	r0, r8, r1, asr #28
 410:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 414:	180e4101 	stmdane	lr, {r0, r8, lr}
 418:	00070d41 	andeq	r0, r7, r1, asr #26
 41c:	0000001c 	andeq	r0, r0, ip, lsl r0
 420:	0000022c 	andeq	r0, r0, ip, lsr #4
 424:	2000091c 	andcs	r0, r0, ip, lsl r9
 428:	0000003c 	andeq	r0, r0, ip, lsr r0
 42c:	40080e41 	andmi	r0, r8, r1, asr #28
 430:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 434:	180e4101 	stmdane	lr, {r0, r8, lr}
 438:	00070d41 	andeq	r0, r7, r1, asr #26
 43c:	0000001c 	andeq	r0, r0, ip, lsl r0
 440:	0000022c 	andeq	r0, r0, ip, lsr #4
 444:	20000958 	andcs	r0, r0, r8, asr r9
 448:	00000034 	andeq	r0, r0, r4, lsr r0
 44c:	40080e41 	andmi	r0, r8, r1, asr #28
 450:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 454:	180e4101 	stmdane	lr, {r0, r8, lr}
 458:	00070d41 	andeq	r0, r7, r1, asr #26
 45c:	00000018 	andeq	r0, r0, r8, lsl r0
 460:	0000022c 	andeq	r0, r0, ip, lsr #4
 464:	2000098c 	andcs	r0, r0, ip, lsl #19
 468:	0000001c 	andeq	r0, r0, ip, lsl r0
 46c:	40080e41 	andmi	r0, r8, r1, asr #28
 470:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 474:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 478:	0000001c 	andeq	r0, r0, ip, lsl r0
 47c:	0000022c 	andeq	r0, r0, ip, lsr #4
 480:	200009a8 	andcs	r0, r0, r8, lsr #19
 484:	00000034 	andeq	r0, r0, r4, lsr r0
 488:	40080e41 	andmi	r0, r8, r1, asr #28
 48c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 490:	180e4101 	stmdane	lr, {r0, r8, lr}
 494:	00070d41 	andeq	r0, r7, r1, asr #26
 498:	0000001c 	andeq	r0, r0, ip, lsl r0
 49c:	0000022c 	andeq	r0, r0, ip, lsr #4
 4a0:	200009dc 	ldrdcs	r0, [r0], -ip
 4a4:	00000038 	andeq	r0, r0, r8, lsr r0
 4a8:	40080e41 	andmi	r0, r8, r1, asr #28
 4ac:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 4b0:	180e4101 	stmdane	lr, {r0, r8, lr}
 4b4:	00070d41 	andeq	r0, r7, r1, asr #26
 4b8:	0000001c 	andeq	r0, r0, ip, lsl r0
 4bc:	0000022c 	andeq	r0, r0, ip, lsr #4
 4c0:	20000a14 	andcs	r0, r0, r4, lsl sl
 4c4:	0000003c 	andeq	r0, r0, ip, lsr r0
 4c8:	40080e41 	andmi	r0, r8, r1, asr #28
 4cc:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 4d0:	180e4101 	stmdane	lr, {r0, r8, lr}
 4d4:	00070d41 	andeq	r0, r7, r1, asr #26
 4d8:	0000001c 	andeq	r0, r0, ip, lsl r0
 4dc:	0000022c 	andeq	r0, r0, ip, lsr #4
 4e0:	20000a50 	andcs	r0, r0, r0, asr sl
 4e4:	00000158 	andeq	r0, r0, r8, asr r1
 4e8:	40080e41 	andmi	r0, r8, r1, asr #28
 4ec:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 4f0:	280e4101 	stmdacs	lr, {r0, r8, lr}
 4f4:	00070d41 	andeq	r0, r7, r1, asr #26
 4f8:	0000001c 	andeq	r0, r0, ip, lsl r0
 4fc:	0000022c 	andeq	r0, r0, ip, lsr #4
 500:	20000ba8 	andcs	r0, r0, r8, lsr #23
 504:	00000060 	andeq	r0, r0, r0, rrx
 508:	40080e41 	andmi	r0, r8, r1, asr #28
 50c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 510:	180e4101 	stmdane	lr, {r0, r8, lr}
 514:	00070d41 	andeq	r0, r7, r1, asr #26
 518:	0000001c 	andeq	r0, r0, ip, lsl r0
 51c:	0000022c 	andeq	r0, r0, ip, lsr #4
 520:	20000c08 	andcs	r0, r0, r8, lsl #24
 524:	00000020 	andeq	r0, r0, r0, lsr #32
 528:	40080e41 	andmi	r0, r8, r1, asr #28
 52c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 530:	100e4101 	andne	r4, lr, r1, lsl #2
 534:	00070d41 	andeq	r0, r7, r1, asr #26
 538:	0000001c 	andeq	r0, r0, ip, lsl r0
 53c:	0000022c 	andeq	r0, r0, ip, lsr #4
 540:	20000c28 	andcs	r0, r0, r8, lsr #24
 544:	00000020 	andeq	r0, r0, r0, lsr #32
 548:	40080e41 	andmi	r0, r8, r1, asr #28
 54c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 550:	100e4101 	andne	r4, lr, r1, lsl #2
 554:	00070d41 	andeq	r0, r7, r1, asr #26
 558:	0000001c 	andeq	r0, r0, ip, lsl r0
 55c:	0000022c 	andeq	r0, r0, ip, lsr #4
 560:	20000c48 	andcs	r0, r0, r8, asr #24
 564:	0000001c 	andeq	r0, r0, ip, lsl r0
 568:	40080e41 	andmi	r0, r8, r1, asr #28
 56c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 570:	100e4101 	andne	r4, lr, r1, lsl #2
 574:	00070d41 	andeq	r0, r7, r1, asr #26
 578:	0000001c 	andeq	r0, r0, ip, lsl r0
 57c:	0000022c 	andeq	r0, r0, ip, lsr #4
 580:	20000c64 	andcs	r0, r0, r4, ror #24
 584:	0000003c 	andeq	r0, r0, ip, lsr r0
 588:	40080e41 	andmi	r0, r8, r1, asr #28
 58c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 590:	180e4101 	stmdane	lr, {r0, r8, lr}
 594:	00070d41 	andeq	r0, r7, r1, asr #26
 598:	0000001c 	andeq	r0, r0, ip, lsl r0
 59c:	0000022c 	andeq	r0, r0, ip, lsr #4
 5a0:	20000ca0 	andcs	r0, r0, r0, lsr #25
 5a4:	0000003c 	andeq	r0, r0, ip, lsr r0
 5a8:	40080e41 	andmi	r0, r8, r1, asr #28
 5ac:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 5b0:	180e4101 	stmdane	lr, {r0, r8, lr}
 5b4:	00070d41 	andeq	r0, r7, r1, asr #26
 5b8:	0000001c 	andeq	r0, r0, ip, lsl r0
 5bc:	0000022c 	andeq	r0, r0, ip, lsr #4
 5c0:	20000cdc 	ldrdcs	r0, [r0], -ip
 5c4:	0000003c 	andeq	r0, r0, ip, lsr r0
 5c8:	40080e41 	andmi	r0, r8, r1, asr #28
 5cc:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 5d0:	180e4101 	stmdane	lr, {r0, r8, lr}
 5d4:	00070d41 	andeq	r0, r7, r1, asr #26
 5d8:	0000001c 	andeq	r0, r0, ip, lsl r0
 5dc:	0000022c 	andeq	r0, r0, ip, lsr #4
 5e0:	20000d18 	andcs	r0, r0, r8, lsl sp
 5e4:	00000040 	andeq	r0, r0, r0, asr #32
 5e8:	40080e41 	andmi	r0, r8, r1, asr #28
 5ec:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 5f0:	180e4101 	stmdane	lr, {r0, r8, lr}
 5f4:	00070d41 	andeq	r0, r7, r1, asr #26
 5f8:	0000001c 	andeq	r0, r0, ip, lsl r0
 5fc:	0000022c 	andeq	r0, r0, ip, lsr #4
 600:	20000d58 	andcs	r0, r0, r8, asr sp
 604:	0000003c 	andeq	r0, r0, ip, lsr r0
 608:	40080e41 	andmi	r0, r8, r1, asr #28
 60c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 610:	180e4101 	stmdane	lr, {r0, r8, lr}
 614:	00070d41 	andeq	r0, r7, r1, asr #26
 618:	0000001c 	andeq	r0, r0, ip, lsl r0
 61c:	0000022c 	andeq	r0, r0, ip, lsr #4
 620:	20000d94 	mulcs	r0, r4, sp
 624:	0000001c 	andeq	r0, r0, ip, lsl r0
 628:	40080e41 	andmi	r0, r8, r1, asr #28
 62c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 630:	100e4101 	andne	r4, lr, r1, lsl #2
 634:	00070d41 	andeq	r0, r7, r1, asr #26
 638:	0000001c 	andeq	r0, r0, ip, lsl r0
 63c:	0000022c 	andeq	r0, r0, ip, lsr #4
 640:	20000db0 			; <UNDEFINED> instruction: 0x20000db0
 644:	00000040 	andeq	r0, r0, r0, asr #32
 648:	40080e41 	andmi	r0, r8, r1, asr #28
 64c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 650:	100e4101 	andne	r4, lr, r1, lsl #2
 654:	00070d41 	andeq	r0, r7, r1, asr #26
 658:	0000001c 	andeq	r0, r0, ip, lsl r0
 65c:	0000022c 	andeq	r0, r0, ip, lsr #4
 660:	20000df0 	strdcs	r0, [r0], -r0	; <UNPREDICTABLE>
 664:	00000040 	andeq	r0, r0, r0, asr #32
 668:	40080e41 	andmi	r0, r8, r1, asr #28
 66c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 670:	100e4101 	andne	r4, lr, r1, lsl #2
 674:	00070d41 	andeq	r0, r7, r1, asr #26
 678:	0000001c 	andeq	r0, r0, ip, lsl r0
 67c:	0000022c 	andeq	r0, r0, ip, lsr #4
 680:	20000e30 	andcs	r0, r0, r0, lsr lr
 684:	00000040 	andeq	r0, r0, r0, asr #32
 688:	40080e41 	andmi	r0, r8, r1, asr #28
 68c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 690:	100e4101 	andne	r4, lr, r1, lsl #2
 694:	00070d41 	andeq	r0, r7, r1, asr #26
 698:	0000001c 	andeq	r0, r0, ip, lsl r0
 69c:	0000022c 	andeq	r0, r0, ip, lsr #4
 6a0:	20000e70 	andcs	r0, r0, r0, ror lr
 6a4:	00000040 	andeq	r0, r0, r0, asr #32
 6a8:	40080e41 	andmi	r0, r8, r1, asr #28
 6ac:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 6b0:	100e4101 	andne	r4, lr, r1, lsl #2
 6b4:	00070d41 	andeq	r0, r7, r1, asr #26
 6b8:	0000001c 	andeq	r0, r0, ip, lsl r0
 6bc:	0000022c 	andeq	r0, r0, ip, lsr #4
 6c0:	20000eb0 			; <UNDEFINED> instruction: 0x20000eb0
 6c4:	00000040 	andeq	r0, r0, r0, asr #32
 6c8:	40080e41 	andmi	r0, r8, r1, asr #28
 6cc:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 6d0:	100e4101 	andne	r4, lr, r1, lsl #2
 6d4:	00070d41 	andeq	r0, r7, r1, asr #26
 6d8:	0000001c 	andeq	r0, r0, ip, lsl r0
 6dc:	0000022c 	andeq	r0, r0, ip, lsr #4
 6e0:	20000ef0 	strdcs	r0, [r0], -r0	; <UNPREDICTABLE>
 6e4:	00000040 	andeq	r0, r0, r0, asr #32
 6e8:	40080e41 	andmi	r0, r8, r1, asr #28
 6ec:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 6f0:	100e4101 	andne	r4, lr, r1, lsl #2
 6f4:	00070d41 	andeq	r0, r7, r1, asr #26
 6f8:	0000001c 	andeq	r0, r0, ip, lsl r0
 6fc:	0000022c 	andeq	r0, r0, ip, lsr #4
 700:	20000f30 	andcs	r0, r0, r0, lsr pc
 704:	00000040 	andeq	r0, r0, r0, asr #32
 708:	40080e41 	andmi	r0, r8, r1, asr #28
 70c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 710:	100e4101 	andne	r4, lr, r1, lsl #2
 714:	00070d41 	andeq	r0, r7, r1, asr #26
 718:	0000001c 	andeq	r0, r0, ip, lsl r0
 71c:	0000022c 	andeq	r0, r0, ip, lsr #4
 720:	20000f70 	andcs	r0, r0, r0, ror pc
 724:	00000040 	andeq	r0, r0, r0, asr #32
 728:	40080e41 	andmi	r0, r8, r1, asr #28
 72c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 730:	100e4101 	andne	r4, lr, r1, lsl #2
 734:	00070d41 	andeq	r0, r7, r1, asr #26
 738:	0000001c 	andeq	r0, r0, ip, lsl r0
 73c:	0000022c 	andeq	r0, r0, ip, lsr #4
 740:	20000fb0 			; <UNDEFINED> instruction: 0x20000fb0
 744:	00000040 	andeq	r0, r0, r0, asr #32
 748:	40080e41 	andmi	r0, r8, r1, asr #28
 74c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 750:	100e4101 	andne	r4, lr, r1, lsl #2
 754:	00070d41 	andeq	r0, r7, r1, asr #26
 758:	0000001c 	andeq	r0, r0, ip, lsl r0
 75c:	0000022c 	andeq	r0, r0, ip, lsr #4
 760:	20000ff0 	strdcs	r0, [r0], -r0	; <UNPREDICTABLE>
 764:	00000040 	andeq	r0, r0, r0, asr #32
 768:	40080e41 	andmi	r0, r8, r1, asr #28
 76c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 770:	100e4101 	andne	r4, lr, r1, lsl #2
 774:	00070d41 	andeq	r0, r7, r1, asr #26
 778:	0000001c 	andeq	r0, r0, ip, lsl r0
 77c:	0000022c 	andeq	r0, r0, ip, lsr #4
 780:	20001030 	andcs	r1, r0, r0, lsr r0
 784:	00000040 	andeq	r0, r0, r0, asr #32
 788:	40080e41 	andmi	r0, r8, r1, asr #28
 78c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 790:	100e4101 	andne	r4, lr, r1, lsl #2
 794:	00070d41 	andeq	r0, r7, r1, asr #26
 798:	0000001c 	andeq	r0, r0, ip, lsl r0
 79c:	0000022c 	andeq	r0, r0, ip, lsr #4
 7a0:	20001070 	andcs	r1, r0, r0, ror r0
 7a4:	00000040 	andeq	r0, r0, r0, asr #32
 7a8:	40080e41 	andmi	r0, r8, r1, asr #28
 7ac:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 7b0:	100e4101 	andne	r4, lr, r1, lsl #2
 7b4:	00070d41 	andeq	r0, r7, r1, asr #26
 7b8:	0000001c 	andeq	r0, r0, ip, lsl r0
 7bc:	0000022c 	andeq	r0, r0, ip, lsr #4
 7c0:	200010b0 	strhcs	r1, [r0], -r0
 7c4:	00000040 	andeq	r0, r0, r0, asr #32
 7c8:	40080e41 	andmi	r0, r8, r1, asr #28
 7cc:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 7d0:	100e4101 	andne	r4, lr, r1, lsl #2
 7d4:	00070d41 	andeq	r0, r7, r1, asr #26
 7d8:	0000001c 	andeq	r0, r0, ip, lsl r0
 7dc:	0000022c 	andeq	r0, r0, ip, lsr #4
 7e0:	200010f0 	strdcs	r1, [r0], -r0
 7e4:	00000040 	andeq	r0, r0, r0, asr #32
 7e8:	40080e41 	andmi	r0, r8, r1, asr #28
 7ec:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 7f0:	100e4101 	andne	r4, lr, r1, lsl #2
 7f4:	00070d41 	andeq	r0, r7, r1, asr #26
 7f8:	0000001c 	andeq	r0, r0, ip, lsl r0
 7fc:	0000022c 	andeq	r0, r0, ip, lsr #4
 800:	20001130 	andcs	r1, r0, r0, lsr r1
 804:	00000040 	andeq	r0, r0, r0, asr #32
 808:	40080e41 	andmi	r0, r8, r1, asr #28
 80c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 810:	100e4101 	andne	r4, lr, r1, lsl #2
 814:	00070d41 	andeq	r0, r7, r1, asr #26
 818:	0000001c 	andeq	r0, r0, ip, lsl r0
 81c:	0000022c 	andeq	r0, r0, ip, lsr #4
 820:	20001170 	andcs	r1, r0, r0, ror r1
 824:	0000003c 	andeq	r0, r0, ip, lsr r0
 828:	40080e41 	andmi	r0, r8, r1, asr #28
 82c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 830:	100e4101 	andne	r4, lr, r1, lsl #2
 834:	00070d41 	andeq	r0, r7, r1, asr #26
 838:	0000001c 	andeq	r0, r0, ip, lsl r0
 83c:	0000022c 	andeq	r0, r0, ip, lsr #4
 840:	200011ac 	andcs	r1, r0, ip, lsr #3
 844:	00000050 	andeq	r0, r0, r0, asr r0
 848:	40080e41 	andmi	r0, r8, r1, asr #28
 84c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 850:	100e4101 	andne	r4, lr, r1, lsl #2
 854:	00070d41 	andeq	r0, r7, r1, asr #26
 858:	0000001c 	andeq	r0, r0, ip, lsl r0
 85c:	0000022c 	andeq	r0, r0, ip, lsr #4
 860:	200011fc 	strdcs	r1, [r0], -ip
 864:	00000084 	andeq	r0, r0, r4, lsl #1
 868:	40080e41 	andmi	r0, r8, r1, asr #28
 86c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 870:	200e4101 	andcs	r4, lr, r1, lsl #2
 874:	00070d41 	andeq	r0, r7, r1, asr #26
 878:	00000018 	andeq	r0, r0, r8, lsl r0
 87c:	0000022c 	andeq	r0, r0, ip, lsr #4
 880:	20001280 	andcs	r1, r0, r0, lsl #5
 884:	0000001c 	andeq	r0, r0, ip, lsl r0
 888:	40080e41 	andmi	r0, r8, r1, asr #28
 88c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 890:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 894:	0000001c 	andeq	r0, r0, ip, lsl r0
 898:	0000022c 	andeq	r0, r0, ip, lsr #4
 89c:	2000129c 	mulcs	r0, ip, r2
 8a0:	00000044 	andeq	r0, r0, r4, asr #32
 8a4:	40080e41 	andmi	r0, r8, r1, asr #28
 8a8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 8ac:	180e4101 	stmdane	lr, {r0, r8, lr}
 8b0:	00070d41 	andeq	r0, r7, r1, asr #26
 8b4:	0000001c 	andeq	r0, r0, ip, lsl r0
 8b8:	0000022c 	andeq	r0, r0, ip, lsr #4
 8bc:	200012e0 	andcs	r1, r0, r0, ror #5
 8c0:	00000020 	andeq	r0, r0, r0, lsr #32
 8c4:	40080e41 	andmi	r0, r8, r1, asr #28
 8c8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 8cc:	100e4101 	andne	r4, lr, r1, lsl #2
 8d0:	00070d41 	andeq	r0, r7, r1, asr #26
 8d4:	0000000c 	andeq	r0, r0, ip
 8d8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 8dc:	7c010001 	stcvc	0, cr0, [r1], {1}
 8e0:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 8e4:	0000000c 	andeq	r0, r0, ip
 8e8:	000008d4 	ldrdeq	r0, [r0], -r4
 8ec:	20001301 	andcs	r1, r0, r1, lsl #6
 8f0:	0000010a 	andeq	r0, r0, sl, lsl #2
