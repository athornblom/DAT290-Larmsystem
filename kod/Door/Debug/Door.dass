
./Debug/Door.elf:     file format elf32-littlearm


Disassembly of section .text:

20000000 <startup>:
#include "stm32f4xx_rng.h"
void startup(void) __attribute__((naked)) __attribute__((section(".start_section")));

void startup(void)
{
	__asm volatile(
20000000:	4802      	ldr	r0, [pc, #8]	; (2000000c <_exit+0x4>)
20000002:	4685      	mov	sp, r0
20000004:	f002 fcac 	bl	20002960 <main>

20000008 <_exit>:
20000008:	e7fe      	b.n	20000008 <_exit>
		" LDR R0,=0x2001C000\n" /* set stack */
		" MOV SP,R0\n"
		" BL main\n"   /* call main */
		"_exit: B .\n" /* never return */
	);
}
2000000a:	46c0      	nop			; (mov r8, r8)
2000000c:	2001c000 	andcs	ip, r1, r0

20000010 <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
20000010:	b580      	push	{r7, lr}
20000012:	b082      	sub	sp, #8
20000014:	af00      	add	r7, sp, #0
20000016:	0002      	movs	r2, r0
20000018:	6039      	str	r1, [r7, #0]
2000001a:	1dfb      	adds	r3, r7, #7
2000001c:	701a      	strb	r2, [r3, #0]
  if((int32_t)IRQn < 0) {
2000001e:	1dfb      	adds	r3, r7, #7
20000020:	781b      	ldrb	r3, [r3, #0]
20000022:	2b7f      	cmp	r3, #127	; 0x7f
20000024:	d90d      	bls.n	20000042 <NVIC_SetPriority+0x32>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
20000026:	683b      	ldr	r3, [r7, #0]
20000028:	b2da      	uxtb	r2, r3
2000002a:	490f      	ldr	r1, [pc, #60]	; (20000068 <NVIC_SetPriority+0x58>)
2000002c:	1dfb      	adds	r3, r7, #7
2000002e:	781b      	ldrb	r3, [r3, #0]
20000030:	0018      	movs	r0, r3
20000032:	230f      	movs	r3, #15
20000034:	4003      	ands	r3, r0
20000036:	3b04      	subs	r3, #4
20000038:	0112      	lsls	r2, r2, #4
2000003a:	b2d2      	uxtb	r2, r2
2000003c:	18cb      	adds	r3, r1, r3
2000003e:	761a      	strb	r2, [r3, #24]
  }
  else {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
20000040:	e00d      	b.n	2000005e <NVIC_SetPriority+0x4e>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
20000042:	683b      	ldr	r3, [r7, #0]
20000044:	b2db      	uxtb	r3, r3
20000046:	4909      	ldr	r1, [pc, #36]	; (2000006c <NVIC_SetPriority+0x5c>)
20000048:	1dfa      	adds	r2, r7, #7
2000004a:	7812      	ldrb	r2, [r2, #0]
2000004c:	b252      	sxtb	r2, r2
2000004e:	011b      	lsls	r3, r3, #4
20000050:	b2d8      	uxtb	r0, r3
20000052:	23c0      	movs	r3, #192	; 0xc0
20000054:	009b      	lsls	r3, r3, #2
20000056:	188a      	adds	r2, r1, r2
20000058:	18d3      	adds	r3, r2, r3
2000005a:	1c02      	adds	r2, r0, #0
2000005c:	701a      	strb	r2, [r3, #0]
}
2000005e:	46c0      	nop			; (mov r8, r8)
20000060:	46bd      	mov	sp, r7
20000062:	b002      	add	sp, #8
20000064:	bd80      	pop	{r7, pc}
20000066:	46c0      	nop			; (mov r8, r8)
20000068:	e000ed00 	and	lr, r0, r0, lsl #26
2000006c:	e000e100 	and	lr, r0, r0, lsl #2

20000070 <CANhandlerListNotFull>:
uint8_t SessionIDActive;
uint32_t SessionID;

//Kollar om det finns plats i handlerList
//Returnerar 1 om det finns plats, 0 annars
uint8_t CANhandlerListNotFull(void){
20000070:	b580      	push	{r7, lr}
20000072:	b082      	sub	sp, #8
20000074:	af00      	add	r7, sp, #0
    for (uint8_t index = 0; index < HANDLERLISTSIZE; index++){
20000076:	1dfb      	adds	r3, r7, #7
20000078:	2200      	movs	r2, #0
2000007a:	701a      	strb	r2, [r3, #0]
2000007c:	e00f      	b.n	2000009e <CANhandlerListNotFull+0x2e>
            if (handlerList[index].state == DISABLE){
2000007e:	1dfb      	adds	r3, r7, #7
20000080:	781b      	ldrb	r3, [r3, #0]
20000082:	4a0b      	ldr	r2, [pc, #44]	; (200000b0 <CANhandlerListNotFull+0x40>)
20000084:	011b      	lsls	r3, r3, #4
20000086:	18d3      	adds	r3, r2, r3
20000088:	330c      	adds	r3, #12
2000008a:	781b      	ldrb	r3, [r3, #0]
2000008c:	2b00      	cmp	r3, #0
2000008e:	d101      	bne.n	20000094 <CANhandlerListNotFull+0x24>
                return 1;
20000090:	2301      	movs	r3, #1
20000092:	e009      	b.n	200000a8 <CANhandlerListNotFull+0x38>
    for (uint8_t index = 0; index < HANDLERLISTSIZE; index++){
20000094:	1dfb      	adds	r3, r7, #7
20000096:	781a      	ldrb	r2, [r3, #0]
20000098:	1dfb      	adds	r3, r7, #7
2000009a:	3201      	adds	r2, #1
2000009c:	701a      	strb	r2, [r3, #0]
2000009e:	1dfb      	adds	r3, r7, #7
200000a0:	781b      	ldrb	r3, [r3, #0]
200000a2:	2b0d      	cmp	r3, #13
200000a4:	d9eb      	bls.n	2000007e <CANhandlerListNotFull+0xe>
            }
    }
    return 0;
200000a6:	2300      	movs	r3, #0
}
200000a8:	0018      	movs	r0, r3
200000aa:	46bd      	mov	sp, r7
200000ac:	b002      	add	sp, #8
200000ae:	bd80      	pop	{r7, pc}
200000b0:	20003cf0 	strdcs	r3, [r0], -r0

200000b4 <CANactivateFilterHandler>:

//Ativerar ett filtet med index från handlerList
void CANactivateFilterHandler (uint8_t index){
200000b4:	b580      	push	{r7, lr}
200000b6:	b088      	sub	sp, #32
200000b8:	af00      	add	r7, sp, #0
200000ba:	0002      	movs	r2, r0
200000bc:	1dfb      	adds	r3, r7, #7
200000be:	701a      	strb	r2, [r3, #0]
            handlerList[index].state = ENABLE;
200000c0:	1dfb      	adds	r3, r7, #7
200000c2:	781b      	ldrb	r3, [r3, #0]
200000c4:	4a20      	ldr	r2, [pc, #128]	; (20000148 <CANactivateFilterHandler+0x94>)
200000c6:	011b      	lsls	r3, r3, #4
200000c8:	18d3      	adds	r3, r2, r3
200000ca:	330c      	adds	r3, #12
200000cc:	2201      	movs	r2, #1
200000ce:	701a      	strb	r2, [r3, #0]

            //Union för omvandling mellan CANFilter och uint16_t
            filterUnion unionFilter, unionMask;
            unionFilter.filter = handlerList[index].filter;
200000d0:	1dfb      	adds	r3, r7, #7
200000d2:	781b      	ldrb	r3, [r3, #0]
200000d4:	4a1c      	ldr	r2, [pc, #112]	; (20000148 <CANactivateFilterHandler+0x94>)
200000d6:	011b      	lsls	r3, r3, #4
200000d8:	18d3      	adds	r3, r2, r3
200000da:	3304      	adds	r3, #4
200000dc:	681b      	ldr	r3, [r3, #0]
200000de:	61fb      	str	r3, [r7, #28]
            unionMask.filter = handlerList[index].mask;
200000e0:	1dfb      	adds	r3, r7, #7
200000e2:	781b      	ldrb	r3, [r3, #0]
200000e4:	4a18      	ldr	r2, [pc, #96]	; (20000148 <CANactivateFilterHandler+0x94>)
200000e6:	011b      	lsls	r3, r3, #4
200000e8:	18d3      	adds	r3, r2, r3
200000ea:	3308      	adds	r3, #8
200000ec:	681b      	ldr	r3, [r3, #0]
200000ee:	61bb      	str	r3, [r7, #24]

            /* CAN filter init */
            CAN_FilterInitTypeDef CAN_FilterInitStructure;
            CAN_FilterInitStructure.CAN_FilterNumber = index;
200000f0:	2108      	movs	r1, #8
200000f2:	187b      	adds	r3, r7, r1
200000f4:	1dfa      	adds	r2, r7, #7
200000f6:	7812      	ldrb	r2, [r2, #0]
200000f8:	729a      	strb	r2, [r3, #10]
            CAN_FilterInitStructure.CAN_FilterMode = CAN_FilterMode_IdMask;
200000fa:	187b      	adds	r3, r7, r1
200000fc:	2200      	movs	r2, #0
200000fe:	72da      	strb	r2, [r3, #11]
            CAN_FilterInitStructure.CAN_FilterScale = CAN_FilterScale_32bit;
20000100:	187b      	adds	r3, r7, r1
20000102:	2201      	movs	r2, #1
20000104:	731a      	strb	r2, [r3, #12]
            CAN_FilterInitStructure.CAN_FilterIdHigh = unionFilter.u16bits[1];
20000106:	201c      	movs	r0, #28
20000108:	183b      	adds	r3, r7, r0
2000010a:	885a      	ldrh	r2, [r3, #2]
2000010c:	187b      	adds	r3, r7, r1
2000010e:	801a      	strh	r2, [r3, #0]
            CAN_FilterInitStructure.CAN_FilterIdLow = unionFilter.u16bits[0];
20000110:	183b      	adds	r3, r7, r0
20000112:	881a      	ldrh	r2, [r3, #0]
20000114:	187b      	adds	r3, r7, r1
20000116:	805a      	strh	r2, [r3, #2]
            CAN_FilterInitStructure.CAN_FilterMaskIdHigh = unionMask.u16bits[1];
20000118:	2018      	movs	r0, #24
2000011a:	183b      	adds	r3, r7, r0
2000011c:	885a      	ldrh	r2, [r3, #2]
2000011e:	187b      	adds	r3, r7, r1
20000120:	809a      	strh	r2, [r3, #4]
            CAN_FilterInitStructure.CAN_FilterMaskIdLow = unionMask.u16bits[0];
20000122:	183b      	adds	r3, r7, r0
20000124:	881a      	ldrh	r2, [r3, #0]
20000126:	187b      	adds	r3, r7, r1
20000128:	80da      	strh	r2, [r3, #6]
            CAN_FilterInitStructure.CAN_FilterFIFOAssignment = 0;
2000012a:	187b      	adds	r3, r7, r1
2000012c:	2200      	movs	r2, #0
2000012e:	811a      	strh	r2, [r3, #8]
            CAN_FilterInitStructure.CAN_FilterActivation = ENABLE;
20000130:	187b      	adds	r3, r7, r1
20000132:	2201      	movs	r2, #1
20000134:	735a      	strb	r2, [r3, #13]
            CAN_FilterInit(&CAN_FilterInitStructure);
20000136:	187b      	adds	r3, r7, r1
20000138:	0018      	movs	r0, r3
2000013a:	f000 fc37 	bl	200009ac <CAN_FilterInit>
}
2000013e:	46c0      	nop			; (mov r8, r8)
20000140:	46bd      	mov	sp, r7
20000142:	b008      	add	sp, #32
20000144:	bd80      	pop	{r7, pc}
20000146:	46c0      	nop			; (mov r8, r8)
20000148:	20003cf0 	strdcs	r3, [r0], -r0

2000014c <CANaddFilterHandler>:

//Lägger till ett filter, returnerar index för filtret i handlerList
//Om session ID är aktiverat läggs det automatiskt till i filtret
//Kolla att det finns plats i handlerList innan med handlerListNotFull()
uint8_t CANaddFilterHandler(void (*newHandler)(CanRxMsg *), CANFilter *filter, CANFilter *mask){
2000014c:	b590      	push	{r4, r7, lr}
2000014e:	b087      	sub	sp, #28
20000150:	af00      	add	r7, sp, #0
20000152:	60f8      	str	r0, [r7, #12]
20000154:	60b9      	str	r1, [r7, #8]
20000156:	607a      	str	r2, [r7, #4]
    for (uint8_t index = 0; index < HANDLERLISTSIZE; index++){
20000158:	2317      	movs	r3, #23
2000015a:	18fb      	adds	r3, r7, r3
2000015c:	2200      	movs	r2, #0
2000015e:	701a      	strb	r2, [r3, #0]
20000160:	e076      	b.n	20000250 <CANaddFilterHandler+0x104>
        if (handlerList[index].state == DISABLE){
20000162:	2317      	movs	r3, #23
20000164:	18fb      	adds	r3, r7, r3
20000166:	781b      	ldrb	r3, [r3, #0]
20000168:	4a3e      	ldr	r2, [pc, #248]	; (20000264 <CANaddFilterHandler+0x118>)
2000016a:	011b      	lsls	r3, r3, #4
2000016c:	18d3      	adds	r3, r2, r3
2000016e:	330c      	adds	r3, #12
20000170:	781b      	ldrb	r3, [r3, #0]
20000172:	2b00      	cmp	r3, #0
20000174:	d166      	bne.n	20000244 <CANaddFilterHandler+0xf8>
            //Aktiverar session ID om det är aktivt
            if (SessionIDActive == SESSIONIDACTIVE){
20000176:	4b3c      	ldr	r3, [pc, #240]	; (20000268 <CANaddFilterHandler+0x11c>)
20000178:	781b      	ldrb	r3, [r3, #0]
2000017a:	2b01      	cmp	r3, #1
2000017c:	d13d      	bne.n	200001fa <CANaddFilterHandler+0xae>
                //Används för omvandling och tilldeling av sessionID
                Header header;

                //Alla meddelanden med sessionID aktivt måste vara extended
                filter->IDE = 1;
2000017e:	68bb      	ldr	r3, [r7, #8]
20000180:	781a      	ldrb	r2, [r3, #0]
20000182:	2104      	movs	r1, #4
20000184:	430a      	orrs	r2, r1
20000186:	701a      	strb	r2, [r3, #0]
                mask->IDE = 1;
20000188:	687b      	ldr	r3, [r7, #4]
2000018a:	781a      	ldrb	r2, [r3, #0]
2000018c:	2104      	movs	r1, #4
2000018e:	430a      	orrs	r2, r1
20000190:	701a      	strb	r2, [r3, #0]

                //Skriver sessionID
                UINT32toHEADER(filter->ID, header);
20000192:	68bb      	ldr	r3, [r7, #8]
20000194:	681b      	ldr	r3, [r3, #0]
20000196:	08da      	lsrs	r2, r3, #3
20000198:	2010      	movs	r0, #16
2000019a:	183b      	adds	r3, r7, r0
2000019c:	601a      	str	r2, [r3, #0]
                header.sessionID = SessionID;
2000019e:	4b33      	ldr	r3, [pc, #204]	; (2000026c <CANaddFilterHandler+0x120>)
200001a0:	681b      	ldr	r3, [r3, #0]
200001a2:	059b      	lsls	r3, r3, #22
200001a4:	0d9b      	lsrs	r3, r3, #22
200001a6:	b29b      	uxth	r3, r3
200001a8:	059b      	lsls	r3, r3, #22
200001aa:	0d9b      	lsrs	r3, r3, #22
200001ac:	021b      	lsls	r3, r3, #8
200001ae:	693a      	ldr	r2, [r7, #16]
200001b0:	492f      	ldr	r1, [pc, #188]	; (20000270 <CANaddFilterHandler+0x124>)
200001b2:	400a      	ands	r2, r1
200001b4:	4313      	orrs	r3, r2
200001b6:	613b      	str	r3, [r7, #16]
                HEADERtoUINT32(header, filter->ID);
200001b8:	0004      	movs	r4, r0
200001ba:	183b      	adds	r3, r7, r0
200001bc:	681b      	ldr	r3, [r3, #0]
200001be:	00db      	lsls	r3, r3, #3
200001c0:	08da      	lsrs	r2, r3, #3
200001c2:	68bb      	ldr	r3, [r7, #8]
200001c4:	00d2      	lsls	r2, r2, #3
200001c6:	6819      	ldr	r1, [r3, #0]
200001c8:	2007      	movs	r0, #7
200001ca:	4001      	ands	r1, r0
200001cc:	430a      	orrs	r2, r1
200001ce:	601a      	str	r2, [r3, #0]

                //Skriver sessionID masken
                UINT32toHEADER(mask->ID, header);
200001d0:	687b      	ldr	r3, [r7, #4]
200001d2:	681b      	ldr	r3, [r3, #0]
200001d4:	08da      	lsrs	r2, r3, #3
200001d6:	0020      	movs	r0, r4
200001d8:	183b      	adds	r3, r7, r0
200001da:	601a      	str	r2, [r3, #0]
                header.sessionID = ~0;
200001dc:	693b      	ldr	r3, [r7, #16]
200001de:	4a25      	ldr	r2, [pc, #148]	; (20000274 <CANaddFilterHandler+0x128>)
200001e0:	4313      	orrs	r3, r2
200001e2:	613b      	str	r3, [r7, #16]
                HEADERtoUINT32(header, mask->ID);
200001e4:	183b      	adds	r3, r7, r0
200001e6:	681b      	ldr	r3, [r3, #0]
200001e8:	00db      	lsls	r3, r3, #3
200001ea:	08da      	lsrs	r2, r3, #3
200001ec:	687b      	ldr	r3, [r7, #4]
200001ee:	00d2      	lsls	r2, r2, #3
200001f0:	6819      	ldr	r1, [r3, #0]
200001f2:	2007      	movs	r0, #7
200001f4:	4001      	ands	r1, r0
200001f6:	430a      	orrs	r2, r1
200001f8:	601a      	str	r2, [r3, #0]
            }

            handlerList[index].filter = *filter;
200001fa:	2117      	movs	r1, #23
200001fc:	187b      	adds	r3, r7, r1
200001fe:	781b      	ldrb	r3, [r3, #0]
20000200:	4a18      	ldr	r2, [pc, #96]	; (20000264 <CANaddFilterHandler+0x118>)
20000202:	011b      	lsls	r3, r3, #4
20000204:	18d3      	adds	r3, r2, r3
20000206:	3304      	adds	r3, #4
20000208:	68ba      	ldr	r2, [r7, #8]
2000020a:	6812      	ldr	r2, [r2, #0]
2000020c:	601a      	str	r2, [r3, #0]
            handlerList[index].mask = *mask;
2000020e:	187b      	adds	r3, r7, r1
20000210:	781b      	ldrb	r3, [r3, #0]
20000212:	4a14      	ldr	r2, [pc, #80]	; (20000264 <CANaddFilterHandler+0x118>)
20000214:	011b      	lsls	r3, r3, #4
20000216:	18d3      	adds	r3, r2, r3
20000218:	3308      	adds	r3, #8
2000021a:	687a      	ldr	r2, [r7, #4]
2000021c:	6812      	ldr	r2, [r2, #0]
2000021e:	601a      	str	r2, [r3, #0]
            handlerList[index].handler = newHandler;
20000220:	0008      	movs	r0, r1
20000222:	187b      	adds	r3, r7, r1
20000224:	781a      	ldrb	r2, [r3, #0]
20000226:	4b0f      	ldr	r3, [pc, #60]	; (20000264 <CANaddFilterHandler+0x118>)
20000228:	0112      	lsls	r2, r2, #4
2000022a:	68f9      	ldr	r1, [r7, #12]
2000022c:	50d1      	str	r1, [r2, r3]

            //Aktiverar filtret
            CANactivateFilterHandler(index);
2000022e:	0001      	movs	r1, r0
20000230:	000c      	movs	r4, r1
20000232:	187b      	adds	r3, r7, r1
20000234:	781b      	ldrb	r3, [r3, #0]
20000236:	0018      	movs	r0, r3
20000238:	f7ff ff3c 	bl	200000b4 <CANactivateFilterHandler>

            return index;
2000023c:	0021      	movs	r1, r4
2000023e:	187b      	adds	r3, r7, r1
20000240:	781b      	ldrb	r3, [r3, #0]
20000242:	e00b      	b.n	2000025c <CANaddFilterHandler+0x110>
    for (uint8_t index = 0; index < HANDLERLISTSIZE; index++){
20000244:	2117      	movs	r1, #23
20000246:	187b      	adds	r3, r7, r1
20000248:	781a      	ldrb	r2, [r3, #0]
2000024a:	187b      	adds	r3, r7, r1
2000024c:	3201      	adds	r2, #1
2000024e:	701a      	strb	r2, [r3, #0]
20000250:	2317      	movs	r3, #23
20000252:	18fb      	adds	r3, r7, r3
20000254:	781b      	ldrb	r3, [r3, #0]
20000256:	2b0d      	cmp	r3, #13
20000258:	d983      	bls.n	20000162 <CANaddFilterHandler+0x16>
        }
    }

    //Detta händer bara om man inte kollat så det finns plats innan man lägger till filtret.
    //Skulle man sedan avaktivera filtret med denna index så händer ingenting, se CANdisableFilterHandler.
    return HANDLERLISTSIZE;
2000025a:	230e      	movs	r3, #14
}
2000025c:	0018      	movs	r0, r3
2000025e:	46bd      	mov	sp, r7
20000260:	b007      	add	sp, #28
20000262:	bd90      	pop	{r4, r7, pc}
20000264:	20003cf0 	strdcs	r3, [r0], -r0
20000268:	20003dd0 	ldrdcs	r3, [r0], -r0
2000026c:	20003cec 	andcs	r3, r0, ip, ror #25
20000270:	fffc00ff 			; <UNDEFINED> instruction: 0xfffc00ff
20000274:	0003ff00 	andeq	pc, r3, r0, lsl #30

20000278 <CANdisableFilterHandler>:

//Avaktiverar CANFilterHandler med index index från handlerList
void CANdisableFilterHandler(uint8_t index){
20000278:	b580      	push	{r7, lr}
2000027a:	b086      	sub	sp, #24
2000027c:	af00      	add	r7, sp, #0
2000027e:	0002      	movs	r2, r0
20000280:	1dfb      	adds	r3, r7, #7
20000282:	701a      	strb	r2, [r3, #0]
    if (index < HANDLERLISTSIZE){
20000284:	1dfb      	adds	r3, r7, #7
20000286:	781b      	ldrb	r3, [r3, #0]
20000288:	2b0d      	cmp	r3, #13
2000028a:	d816      	bhi.n	200002ba <CANdisableFilterHandler+0x42>
        handlerList[index].state = DISABLE;
2000028c:	1dfb      	adds	r3, r7, #7
2000028e:	781b      	ldrb	r3, [r3, #0]
20000290:	4a0c      	ldr	r2, [pc, #48]	; (200002c4 <CANdisableFilterHandler+0x4c>)
20000292:	011b      	lsls	r3, r3, #4
20000294:	18d3      	adds	r3, r2, r3
20000296:	330c      	adds	r3, #12
20000298:	2200      	movs	r2, #0
2000029a:	701a      	strb	r2, [r3, #0]

        //Avaktiverar filtret
        CAN_FilterInitTypeDef CAN_FilterInitStructure;
        CAN_FilterInitStructure.CAN_FilterNumber = index;
2000029c:	2108      	movs	r1, #8
2000029e:	187b      	adds	r3, r7, r1
200002a0:	1dfa      	adds	r2, r7, #7
200002a2:	7812      	ldrb	r2, [r2, #0]
200002a4:	729a      	strb	r2, [r3, #10]
        CAN_FilterInitStructure.CAN_FilterFIFOAssignment = 0;
200002a6:	187b      	adds	r3, r7, r1
200002a8:	2200      	movs	r2, #0
200002aa:	811a      	strh	r2, [r3, #8]
        CAN_FilterInitStructure.CAN_FilterActivation = DISABLE;
200002ac:	187b      	adds	r3, r7, r1
200002ae:	2200      	movs	r2, #0
200002b0:	735a      	strb	r2, [r3, #13]
        CAN_FilterInit(&CAN_FilterInitStructure);
200002b2:	187b      	adds	r3, r7, r1
200002b4:	0018      	movs	r0, r3
200002b6:	f000 fb79 	bl	200009ac <CAN_FilterInit>
    }
}
200002ba:	46c0      	nop			; (mov r8, r8)
200002bc:	46bd      	mov	sp, r7
200002be:	b006      	add	sp, #24
200002c0:	bd80      	pop	{r7, pc}
200002c2:	46c0      	nop			; (mov r8, r8)
200002c4:	20003cf0 	strdcs	r3, [r0], -r0

200002c8 <CANdisableAllFilterHandlers>:

//Avaktiverar alla CANFilterHandlers
void CANdisableAllFilterHandlers(void){
200002c8:	b580      	push	{r7, lr}
200002ca:	b082      	sub	sp, #8
200002cc:	af00      	add	r7, sp, #0
    for (uint8_t index = 0; index < HANDLERLISTSIZE; index++){
200002ce:	1dfb      	adds	r3, r7, #7
200002d0:	2200      	movs	r2, #0
200002d2:	701a      	strb	r2, [r3, #0]
200002d4:	e009      	b.n	200002ea <CANdisableAllFilterHandlers+0x22>
        CANdisableFilterHandler(index);
200002d6:	1dfb      	adds	r3, r7, #7
200002d8:	781b      	ldrb	r3, [r3, #0]
200002da:	0018      	movs	r0, r3
200002dc:	f7ff ffcc 	bl	20000278 <CANdisableFilterHandler>
    for (uint8_t index = 0; index < HANDLERLISTSIZE; index++){
200002e0:	1dfb      	adds	r3, r7, #7
200002e2:	781a      	ldrb	r2, [r3, #0]
200002e4:	1dfb      	adds	r3, r7, #7
200002e6:	3201      	adds	r2, #1
200002e8:	701a      	strb	r2, [r3, #0]
200002ea:	1dfb      	adds	r3, r7, #7
200002ec:	781b      	ldrb	r3, [r3, #0]
200002ee:	2b0d      	cmp	r3, #13
200002f0:	d9f1      	bls.n	200002d6 <CANdisableAllFilterHandlers+0xe>
    }
}
200002f2:	46c0      	nop			; (mov r8, r8)
200002f4:	46bd      	mov	sp, r7
200002f6:	b002      	add	sp, #8
200002f8:	bd80      	pop	{r7, pc}

200002fa <CANsendMessage>:

//Skickar ett CAN-meddelande
//Omvandlar till extended om det inte redan är det samt session ID är aktivt
//Returnderar numret för mailboxen som används eller CAN_TxStatus_NoMailBox om det misslyckades
uint8_t CANsendMessage(CanTxMsg *msg){
200002fa:	b580      	push	{r7, lr}
200002fc:	b084      	sub	sp, #16
200002fe:	af00      	add	r7, sp, #0
20000300:	6078      	str	r0, [r7, #4]
    //Justerar endast meddelandet om sessionID är aktivt
    if (SessionIDActive == SESSIONIDACTIVE){
20000302:	4b24      	ldr	r3, [pc, #144]	; (20000394 <CANsendMessage+0x9a>)
20000304:	781b      	ldrb	r3, [r3, #0]
20000306:	2b01      	cmp	r3, #1
20000308:	d138      	bne.n	2000037c <CANsendMessage+0x82>
        //Används för omvandling och tilldeling av session ID
        Header header;

        //Om standardmeddelande omvandla till extended
        if (msg->IDE == CAN_Id_Standard){
2000030a:	687b      	ldr	r3, [r7, #4]
2000030c:	7a1b      	ldrb	r3, [r3, #8]
2000030e:	2b00      	cmp	r3, #0
20000310:	d11a      	bne.n	20000348 <CANsendMessage+0x4e>
            msg->IDE = CAN_Id_Extended;
20000312:	687b      	ldr	r3, [r7, #4]
20000314:	2204      	movs	r2, #4
20000316:	721a      	strb	r2, [r3, #8]

            //Skriver sessionID
            UINT32toHEADER(msg->StdId << STDtoEXTLENGTHDIFF, header);
20000318:	687b      	ldr	r3, [r7, #4]
2000031a:	681a      	ldr	r2, [r3, #0]
2000031c:	200c      	movs	r0, #12
2000031e:	183b      	adds	r3, r7, r0
20000320:	0492      	lsls	r2, r2, #18
20000322:	601a      	str	r2, [r3, #0]
            header.sessionID = SessionID;
20000324:	4b1c      	ldr	r3, [pc, #112]	; (20000398 <CANsendMessage+0x9e>)
20000326:	681b      	ldr	r3, [r3, #0]
20000328:	059b      	lsls	r3, r3, #22
2000032a:	0d9b      	lsrs	r3, r3, #22
2000032c:	b29b      	uxth	r3, r3
2000032e:	059b      	lsls	r3, r3, #22
20000330:	0d9b      	lsrs	r3, r3, #22
20000332:	021b      	lsls	r3, r3, #8
20000334:	68fa      	ldr	r2, [r7, #12]
20000336:	4919      	ldr	r1, [pc, #100]	; (2000039c <CANsendMessage+0xa2>)
20000338:	400a      	ands	r2, r1
2000033a:	4313      	orrs	r3, r2
2000033c:	60fb      	str	r3, [r7, #12]
            HEADERtoUINT32(header, msg->ExtId);
2000033e:	183b      	adds	r3, r7, r0
20000340:	681a      	ldr	r2, [r3, #0]
20000342:	687b      	ldr	r3, [r7, #4]
20000344:	605a      	str	r2, [r3, #4]
20000346:	e019      	b.n	2000037c <CANsendMessage+0x82>
        }

        //Annars om det redan är ett meddelande med extended ID
        //justeras endast sessionsbitarna om sessions ID är aktivt
        else if (msg->IDE == CAN_Id_Extended){
20000348:	687b      	ldr	r3, [r7, #4]
2000034a:	7a1b      	ldrb	r3, [r3, #8]
2000034c:	2b04      	cmp	r3, #4
2000034e:	d115      	bne.n	2000037c <CANsendMessage+0x82>
            UINT32toHEADER(msg->ExtId, header);
20000350:	200c      	movs	r0, #12
20000352:	183b      	adds	r3, r7, r0
20000354:	687a      	ldr	r2, [r7, #4]
20000356:	6852      	ldr	r2, [r2, #4]
20000358:	601a      	str	r2, [r3, #0]
            header.sessionID = SessionID;
2000035a:	4b0f      	ldr	r3, [pc, #60]	; (20000398 <CANsendMessage+0x9e>)
2000035c:	681b      	ldr	r3, [r3, #0]
2000035e:	059b      	lsls	r3, r3, #22
20000360:	0d9b      	lsrs	r3, r3, #22
20000362:	b29b      	uxth	r3, r3
20000364:	059b      	lsls	r3, r3, #22
20000366:	0d9b      	lsrs	r3, r3, #22
20000368:	021b      	lsls	r3, r3, #8
2000036a:	68fa      	ldr	r2, [r7, #12]
2000036c:	490b      	ldr	r1, [pc, #44]	; (2000039c <CANsendMessage+0xa2>)
2000036e:	400a      	ands	r2, r1
20000370:	4313      	orrs	r3, r2
20000372:	60fb      	str	r3, [r7, #12]
            HEADERtoUINT32(header, msg->ExtId);
20000374:	183b      	adds	r3, r7, r0
20000376:	681a      	ldr	r2, [r3, #0]
20000378:	687b      	ldr	r3, [r7, #4]
2000037a:	605a      	str	r2, [r3, #4]
        }
    }

	return CAN_Transmit(CAN1, msg);
2000037c:	687b      	ldr	r3, [r7, #4]
2000037e:	4a08      	ldr	r2, [pc, #32]	; (200003a0 <CANsendMessage+0xa6>)
20000380:	0019      	movs	r1, r3
20000382:	0010      	movs	r0, r2
20000384:	f000 fcd0 	bl	20000d28 <CAN_Transmit>
20000388:	0003      	movs	r3, r0
}
2000038a:	0018      	movs	r0, r3
2000038c:	46bd      	mov	sp, r7
2000038e:	b004      	add	sp, #16
20000390:	bd80      	pop	{r7, pc}
20000392:	46c0      	nop			; (mov r8, r8)
20000394:	20003dd0 	ldrdcs	r3, [r0], -r0
20000398:	20003cec 	andcs	r3, r0, ip, ror #25
2000039c:	fffc00ff 			; <UNDEFINED> instruction: 0xfffc00ff
200003a0:	40006400 	andmi	r6, r0, r0, lsl #8

200003a4 <can_irq_handler>:

//Avbrottshanterare för mottagna meddelanden på FIFO 0.
//Anropar meddelandes hanteringsfunktion.
void can_irq_handler(void){
200003a4:	b580      	push	{r7, lr}
200003a6:	b086      	sub	sp, #24
200003a8:	af00      	add	r7, sp, #0
    //Kollar FIFO 0 pending Interrupt
    if(CAN_GetITStatus(CAN1, CAN_IT_FMP0)) {
200003aa:	4b17      	ldr	r3, [pc, #92]	; (20000408 <can_irq_handler+0x64>)
200003ac:	2102      	movs	r1, #2
200003ae:	0018      	movs	r0, r3
200003b0:	f001 f950 	bl	20001654 <CAN_GetITStatus>
200003b4:	1e03      	subs	r3, r0, #0
200003b6:	d022      	beq.n	200003fe <can_irq_handler+0x5a>
        //Kollar så att det finns meddelande som väntar i FIFO0
        if (CAN_MessagePending(CAN1, CAN_FIFO0)) {
200003b8:	4b13      	ldr	r3, [pc, #76]	; (20000408 <can_irq_handler+0x64>)
200003ba:	2100      	movs	r1, #0
200003bc:	0018      	movs	r0, r3
200003be:	f000 ff2b 	bl	20001218 <CAN_MessagePending>
200003c2:	1e03      	subs	r3, r0, #0
200003c4:	d01b      	beq.n	200003fe <can_irq_handler+0x5a>
            //Läser meddelandet
            CanRxMsg rxMsg;
            CAN_Receive(CAN1, CAN_FIFO0, &rxMsg);
200003c6:	1d3b      	adds	r3, r7, #4
200003c8:	480f      	ldr	r0, [pc, #60]	; (20000408 <can_irq_handler+0x64>)
200003ca:	001a      	movs	r2, r3
200003cc:	2100      	movs	r1, #0
200003ce:	f000 fe32 	bl	20001036 <CAN_Receive>

            //Anropar hanteringsfunktionen för meddelandet
            if (rxMsg.FMI < HANDLERLISTSIZE){
200003d2:	1d3b      	adds	r3, r7, #4
200003d4:	7cdb      	ldrb	r3, [r3, #19]
200003d6:	2b0d      	cmp	r3, #13
200003d8:	d811      	bhi.n	200003fe <can_irq_handler+0x5a>
                if (handlerList[rxMsg.FMI].state == ENABLE){
200003da:	1d3b      	adds	r3, r7, #4
200003dc:	7cdb      	ldrb	r3, [r3, #19]
200003de:	4a0b      	ldr	r2, [pc, #44]	; (2000040c <can_irq_handler+0x68>)
200003e0:	011b      	lsls	r3, r3, #4
200003e2:	18d3      	adds	r3, r2, r3
200003e4:	330c      	adds	r3, #12
200003e6:	781b      	ldrb	r3, [r3, #0]
200003e8:	2b01      	cmp	r3, #1
200003ea:	d108      	bne.n	200003fe <can_irq_handler+0x5a>
                    handlerList[rxMsg.FMI].handler(&rxMsg);
200003ec:	1d3b      	adds	r3, r7, #4
200003ee:	7cdb      	ldrb	r3, [r3, #19]
200003f0:	001a      	movs	r2, r3
200003f2:	4b06      	ldr	r3, [pc, #24]	; (2000040c <can_irq_handler+0x68>)
200003f4:	0112      	lsls	r2, r2, #4
200003f6:	58d3      	ldr	r3, [r2, r3]
200003f8:	1d3a      	adds	r2, r7, #4
200003fa:	0010      	movs	r0, r2
200003fc:	4798      	blx	r3
                }
            }
        }
    }
}
200003fe:	46c0      	nop			; (mov r8, r8)
20000400:	46bd      	mov	sp, r7
20000402:	b006      	add	sp, #24
20000404:	bd80      	pop	{r7, pc}
20000406:	46c0      	nop			; (mov r8, r8)
20000408:	40006400 	andmi	r6, r0, r0, lsl #8
2000040c:	20003cf0 	strdcs	r3, [r0], -r0

20000410 <setSessionId>:

//Sätter session ID,  ändra även session ID för aktiva filter
//Använder de första 10 bitarna av ID
void setSessionId(uint16_t ID){
20000410:	b5b0      	push	{r4, r5, r7, lr}
20000412:	b084      	sub	sp, #16
20000414:	af00      	add	r7, sp, #0
20000416:	0002      	movs	r2, r0
20000418:	1dbb      	adds	r3, r7, #6
2000041a:	801a      	strh	r2, [r3, #0]
    SessionIDActive = SESSIONIDACTIVE;
2000041c:	4b44      	ldr	r3, [pc, #272]	; (20000530 <setSessionId+0x120>)
2000041e:	2201      	movs	r2, #1
20000420:	701a      	strb	r2, [r3, #0]
    SessionID = ID;
20000422:	1dbb      	adds	r3, r7, #6
20000424:	881a      	ldrh	r2, [r3, #0]
20000426:	4b43      	ldr	r3, [pc, #268]	; (20000534 <setSessionId+0x124>)
20000428:	601a      	str	r2, [r3, #0]

    for (uint8_t index = 0; index < HANDLERLISTSIZE; index++){
2000042a:	230f      	movs	r3, #15
2000042c:	18fb      	adds	r3, r7, r3
2000042e:	2200      	movs	r2, #0
20000430:	701a      	strb	r2, [r3, #0]
20000432:	e073      	b.n	2000051c <setSessionId+0x10c>
        //Justerar filter som är aktiva
        if(handlerList[index].state == ENABLE){
20000434:	230f      	movs	r3, #15
20000436:	18fb      	adds	r3, r7, r3
20000438:	781b      	ldrb	r3, [r3, #0]
2000043a:	4a3f      	ldr	r2, [pc, #252]	; (20000538 <setSessionId+0x128>)
2000043c:	011b      	lsls	r3, r3, #4
2000043e:	18d3      	adds	r3, r2, r3
20000440:	330c      	adds	r3, #12
20000442:	781b      	ldrb	r3, [r3, #0]
20000444:	2b01      	cmp	r3, #1
20000446:	d163      	bne.n	20000510 <setSessionId+0x100>
            //Används för omvandling
            Header header;

            //Filtrer och masken måste vara av typ extended
            handlerList[index].filter.IDE = 1;
20000448:	200f      	movs	r0, #15
2000044a:	183b      	adds	r3, r7, r0
2000044c:	781b      	ldrb	r3, [r3, #0]
2000044e:	4a3a      	ldr	r2, [pc, #232]	; (20000538 <setSessionId+0x128>)
20000450:	011b      	lsls	r3, r3, #4
20000452:	18d3      	adds	r3, r2, r3
20000454:	791a      	ldrb	r2, [r3, #4]
20000456:	2104      	movs	r1, #4
20000458:	430a      	orrs	r2, r1
2000045a:	711a      	strb	r2, [r3, #4]
            handlerList[index].mask.IDE = 1;
2000045c:	183b      	adds	r3, r7, r0
2000045e:	781b      	ldrb	r3, [r3, #0]
20000460:	4a35      	ldr	r2, [pc, #212]	; (20000538 <setSessionId+0x128>)
20000462:	2108      	movs	r1, #8
20000464:	011b      	lsls	r3, r3, #4
20000466:	18d3      	adds	r3, r2, r3
20000468:	185b      	adds	r3, r3, r1
2000046a:	781a      	ldrb	r2, [r3, #0]
2000046c:	2104      	movs	r1, #4
2000046e:	430a      	orrs	r2, r1
20000470:	701a      	strb	r2, [r3, #0]

            //Ändrar filter
            UINT32toHEADER(handlerList[index].filter.ID, header);
20000472:	183b      	adds	r3, r7, r0
20000474:	781b      	ldrb	r3, [r3, #0]
20000476:	4a30      	ldr	r2, [pc, #192]	; (20000538 <setSessionId+0x128>)
20000478:	011b      	lsls	r3, r3, #4
2000047a:	18d3      	adds	r3, r2, r3
2000047c:	685b      	ldr	r3, [r3, #4]
2000047e:	08da      	lsrs	r2, r3, #3
20000480:	2508      	movs	r5, #8
20000482:	197b      	adds	r3, r7, r5
20000484:	601a      	str	r2, [r3, #0]
            header.sessionID = SessionID;
20000486:	4b2b      	ldr	r3, [pc, #172]	; (20000534 <setSessionId+0x124>)
20000488:	681b      	ldr	r3, [r3, #0]
2000048a:	059b      	lsls	r3, r3, #22
2000048c:	0d9b      	lsrs	r3, r3, #22
2000048e:	b29b      	uxth	r3, r3
20000490:	059b      	lsls	r3, r3, #22
20000492:	0d9b      	lsrs	r3, r3, #22
20000494:	021b      	lsls	r3, r3, #8
20000496:	68ba      	ldr	r2, [r7, #8]
20000498:	4928      	ldr	r1, [pc, #160]	; (2000053c <setSessionId+0x12c>)
2000049a:	400a      	ands	r2, r1
2000049c:	4313      	orrs	r3, r2
2000049e:	60bb      	str	r3, [r7, #8]
            HEADERtoUINT32(header, handlerList[index].filter.ID);
200004a0:	197b      	adds	r3, r7, r5
200004a2:	681a      	ldr	r2, [r3, #0]
200004a4:	0004      	movs	r4, r0
200004a6:	183b      	adds	r3, r7, r0
200004a8:	781b      	ldrb	r3, [r3, #0]
200004aa:	00d2      	lsls	r2, r2, #3
200004ac:	08d2      	lsrs	r2, r2, #3
200004ae:	4922      	ldr	r1, [pc, #136]	; (20000538 <setSessionId+0x128>)
200004b0:	011b      	lsls	r3, r3, #4
200004b2:	18cb      	adds	r3, r1, r3
200004b4:	00d2      	lsls	r2, r2, #3
200004b6:	6859      	ldr	r1, [r3, #4]
200004b8:	2007      	movs	r0, #7
200004ba:	4001      	ands	r1, r0
200004bc:	430a      	orrs	r2, r1
200004be:	605a      	str	r2, [r3, #4]

            //Ändrar masken
            UINT32toHEADER(handlerList[index].mask.ID, header);
200004c0:	0020      	movs	r0, r4
200004c2:	183b      	adds	r3, r7, r0
200004c4:	781b      	ldrb	r3, [r3, #0]
200004c6:	4a1c      	ldr	r2, [pc, #112]	; (20000538 <setSessionId+0x128>)
200004c8:	2108      	movs	r1, #8
200004ca:	011b      	lsls	r3, r3, #4
200004cc:	18d3      	adds	r3, r2, r3
200004ce:	185b      	adds	r3, r3, r1
200004d0:	681b      	ldr	r3, [r3, #0]
200004d2:	08da      	lsrs	r2, r3, #3
200004d4:	197b      	adds	r3, r7, r5
200004d6:	601a      	str	r2, [r3, #0]
            header.sessionID = ~0;
200004d8:	68bb      	ldr	r3, [r7, #8]
200004da:	4a19      	ldr	r2, [pc, #100]	; (20000540 <setSessionId+0x130>)
200004dc:	4313      	orrs	r3, r2
200004de:	60bb      	str	r3, [r7, #8]
            HEADERtoUINT32(header, handlerList[index].mask.ID);
200004e0:	197b      	adds	r3, r7, r5
200004e2:	681a      	ldr	r2, [r3, #0]
200004e4:	0004      	movs	r4, r0
200004e6:	183b      	adds	r3, r7, r0
200004e8:	781b      	ldrb	r3, [r3, #0]
200004ea:	00d2      	lsls	r2, r2, #3
200004ec:	08d2      	lsrs	r2, r2, #3
200004ee:	4912      	ldr	r1, [pc, #72]	; (20000538 <setSessionId+0x128>)
200004f0:	2008      	movs	r0, #8
200004f2:	011b      	lsls	r3, r3, #4
200004f4:	18cb      	adds	r3, r1, r3
200004f6:	181b      	adds	r3, r3, r0
200004f8:	00d2      	lsls	r2, r2, #3
200004fa:	6819      	ldr	r1, [r3, #0]
200004fc:	2007      	movs	r0, #7
200004fe:	4001      	ands	r1, r0
20000500:	430a      	orrs	r2, r1
20000502:	601a      	str	r2, [r3, #0]

            CANactivateFilterHandler(index);
20000504:	0020      	movs	r0, r4
20000506:	183b      	adds	r3, r7, r0
20000508:	781b      	ldrb	r3, [r3, #0]
2000050a:	0018      	movs	r0, r3
2000050c:	f7ff fdd2 	bl	200000b4 <CANactivateFilterHandler>
    for (uint8_t index = 0; index < HANDLERLISTSIZE; index++){
20000510:	210f      	movs	r1, #15
20000512:	187b      	adds	r3, r7, r1
20000514:	781a      	ldrb	r2, [r3, #0]
20000516:	187b      	adds	r3, r7, r1
20000518:	3201      	adds	r2, #1
2000051a:	701a      	strb	r2, [r3, #0]
2000051c:	230f      	movs	r3, #15
2000051e:	18fb      	adds	r3, r7, r3
20000520:	781b      	ldrb	r3, [r3, #0]
20000522:	2b0d      	cmp	r3, #13
20000524:	d986      	bls.n	20000434 <setSessionId+0x24>
        }
    }
}
20000526:	46c0      	nop			; (mov r8, r8)
20000528:	46bd      	mov	sp, r7
2000052a:	b004      	add	sp, #16
2000052c:	bdb0      	pop	{r4, r5, r7, pc}
2000052e:	46c0      	nop			; (mov r8, r8)
20000530:	20003dd0 	ldrdcs	r3, [r0], -r0
20000534:	20003cec 	andcs	r3, r0, ip, ror #25
20000538:	20003cf0 	strdcs	r3, [r0], -r0
2000053c:	fffc00ff 			; <UNDEFINED> instruction: 0xfffc00ff
20000540:	0003ff00 	andeq	pc, r3, r0, lsl #30

20000544 <noSessionId>:

//Avaktiverar session ID för aktiva filter och kommande filter
void noSessionId(void){
20000544:	b580      	push	{r7, lr}
20000546:	b082      	sub	sp, #8
20000548:	af00      	add	r7, sp, #0
    SessionIDActive = SESSIONIDINACTIVE;
2000054a:	4b21      	ldr	r3, [pc, #132]	; (200005d0 <noSessionId+0x8c>)
2000054c:	2200      	movs	r2, #0
2000054e:	701a      	strb	r2, [r3, #0]

    for (uint8_t index = 0; index < HANDLERLISTSIZE; index++){
20000550:	1dfb      	adds	r3, r7, #7
20000552:	2200      	movs	r2, #0
20000554:	701a      	strb	r2, [r3, #0]
20000556:	e032      	b.n	200005be <noSessionId+0x7a>
        //Avaktiverar filtering för sessionID på de aktiva filtren
        if(handlerList[index].state == ENABLE){
20000558:	1dfb      	adds	r3, r7, #7
2000055a:	781b      	ldrb	r3, [r3, #0]
2000055c:	4a1d      	ldr	r2, [pc, #116]	; (200005d4 <noSessionId+0x90>)
2000055e:	011b      	lsls	r3, r3, #4
20000560:	18d3      	adds	r3, r2, r3
20000562:	330c      	adds	r3, #12
20000564:	781b      	ldrb	r3, [r3, #0]
20000566:	2b01      	cmp	r3, #1
20000568:	d124      	bne.n	200005b4 <noSessionId+0x70>
            //Används för omvandling
            Header header;

            UINT32toHEADER(handlerList[index].mask.ID, header);
2000056a:	1dfb      	adds	r3, r7, #7
2000056c:	781b      	ldrb	r3, [r3, #0]
2000056e:	4a19      	ldr	r2, [pc, #100]	; (200005d4 <noSessionId+0x90>)
20000570:	2108      	movs	r1, #8
20000572:	011b      	lsls	r3, r3, #4
20000574:	18d3      	adds	r3, r2, r3
20000576:	185b      	adds	r3, r3, r1
20000578:	681b      	ldr	r3, [r3, #0]
2000057a:	08da      	lsrs	r2, r3, #3
2000057c:	003b      	movs	r3, r7
2000057e:	601a      	str	r2, [r3, #0]
            header.sessionID  = 0;
20000580:	683b      	ldr	r3, [r7, #0]
20000582:	4a15      	ldr	r2, [pc, #84]	; (200005d8 <noSessionId+0x94>)
20000584:	4013      	ands	r3, r2
20000586:	603b      	str	r3, [r7, #0]
            HEADERtoUINT32(header, handlerList[index].mask.ID);
20000588:	003b      	movs	r3, r7
2000058a:	681a      	ldr	r2, [r3, #0]
2000058c:	1dfb      	adds	r3, r7, #7
2000058e:	781b      	ldrb	r3, [r3, #0]
20000590:	00d2      	lsls	r2, r2, #3
20000592:	08d2      	lsrs	r2, r2, #3
20000594:	490f      	ldr	r1, [pc, #60]	; (200005d4 <noSessionId+0x90>)
20000596:	2008      	movs	r0, #8
20000598:	011b      	lsls	r3, r3, #4
2000059a:	18cb      	adds	r3, r1, r3
2000059c:	181b      	adds	r3, r3, r0
2000059e:	00d2      	lsls	r2, r2, #3
200005a0:	6819      	ldr	r1, [r3, #0]
200005a2:	2007      	movs	r0, #7
200005a4:	4001      	ands	r1, r0
200005a6:	430a      	orrs	r2, r1
200005a8:	601a      	str	r2, [r3, #0]
            CANactivateFilterHandler(index);
200005aa:	1dfb      	adds	r3, r7, #7
200005ac:	781b      	ldrb	r3, [r3, #0]
200005ae:	0018      	movs	r0, r3
200005b0:	f7ff fd80 	bl	200000b4 <CANactivateFilterHandler>
    for (uint8_t index = 0; index < HANDLERLISTSIZE; index++){
200005b4:	1dfb      	adds	r3, r7, #7
200005b6:	781a      	ldrb	r2, [r3, #0]
200005b8:	1dfb      	adds	r3, r7, #7
200005ba:	3201      	adds	r2, #1
200005bc:	701a      	strb	r2, [r3, #0]
200005be:	1dfb      	adds	r3, r7, #7
200005c0:	781b      	ldrb	r3, [r3, #0]
200005c2:	2b0d      	cmp	r3, #13
200005c4:	d9c8      	bls.n	20000558 <noSessionId+0x14>
        }
    }
}
200005c6:	46c0      	nop			; (mov r8, r8)
200005c8:	46bd      	mov	sp, r7
200005ca:	b002      	add	sp, #8
200005cc:	bd80      	pop	{r7, pc}
200005ce:	46c0      	nop			; (mov r8, r8)
200005d0:	20003dd0 	ldrdcs	r3, [r0], -r0
200005d4:	20003cf0 	strdcs	r3, [r0], -r0
200005d8:	fffc00ff 			; <UNDEFINED> instruction: 0xfffc00ff

200005dc <can_init>:

uint8_t can_init() {
200005dc:	b5f0      	push	{r4, r5, r6, r7, lr}
200005de:	b089      	sub	sp, #36	; 0x24
200005e0:	af00      	add	r7, sp, #0
	CAN_InitTypeDef CAN_InitStructure;
	NVIC_InitTypeDef NVIC_InitStructure;
	GPIO_InitTypeDef GPIO_InitStructure;

	RCC_APB1PeriphClockCmd(RCC_APB1Periph_CAN1, ENABLE);
200005e2:	2380      	movs	r3, #128	; 0x80
200005e4:	049b      	lsls	r3, r3, #18
200005e6:	2101      	movs	r1, #1
200005e8:	0018      	movs	r0, r3
200005ea:	f001 fe43 	bl	20002274 <RCC_APB1PeriphClockCmd>
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);
200005ee:	2380      	movs	r3, #128	; 0x80
200005f0:	01db      	lsls	r3, r3, #7
200005f2:	2101      	movs	r1, #1
200005f4:	0018      	movs	r0, r3
200005f6:	f001 fe5d 	bl	200022b4 <RCC_APB2PeriphClockCmd>
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE);
200005fa:	2101      	movs	r1, #1
200005fc:	2002      	movs	r0, #2
200005fe:	f001 fdd9 	bl	200021b4 <RCC_AHB1PeriphClockCmd>

	// Connect CAN pins to AF9. See more below
	GPIO_PinAFConfig(GPIOB, GPIO_PinSource9, GPIO_AF_CAN1);
20000602:	4b61      	ldr	r3, [pc, #388]	; (20000788 <can_init+0x1ac>)
20000604:	2209      	movs	r2, #9
20000606:	2109      	movs	r1, #9
20000608:	0018      	movs	r0, r3
2000060a:	f003 fa84 	bl	20003b16 <GPIO_PinAFConfig>
    GPIO_PinAFConfig(GPIOB, GPIO_PinSource8, GPIO_AF_CAN1);  
2000060e:	4b5e      	ldr	r3, [pc, #376]	; (20000788 <can_init+0x1ac>)
20000610:	2209      	movs	r2, #9
20000612:	2108      	movs	r1, #8
20000614:	0018      	movs	r0, r3
20000616:	f003 fa7e 	bl	20003b16 <GPIO_PinAFConfig>
	// Configure CAN RX and TX pins
	// See page 41 of MD407 reference manual
	// Connect CAN1 pins to AF
    // PB9 - CAN1 TX
    // PB8 - CAN1 RX
    GPIO_PinAFConfig(GPIOB, GPIO_PinSource9, GPIO_AF_CAN1);  	
2000061a:	4b5b      	ldr	r3, [pc, #364]	; (20000788 <can_init+0x1ac>)
2000061c:	2209      	movs	r2, #9
2000061e:	2109      	movs	r1, #9
20000620:	0018      	movs	r0, r3
20000622:	f003 fa78 	bl	20003b16 <GPIO_PinAFConfig>
    GPIO_PinAFConfig(GPIOB, GPIO_PinSource8, GPIO_AF_CAN1);  
20000626:	4b58      	ldr	r3, [pc, #352]	; (20000788 <can_init+0x1ac>)
20000628:	2209      	movs	r2, #9
2000062a:	2108      	movs	r1, #8
2000062c:	0018      	movs	r0, r3
2000062e:	f003 fa72 	bl	20003b16 <GPIO_PinAFConfig>

    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_9;
20000632:	1d3b      	adds	r3, r7, #4
20000634:	2280      	movs	r2, #128	; 0x80
20000636:	0092      	lsls	r2, r2, #2
20000638:	601a      	str	r2, [r3, #0]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
2000063a:	1d3b      	adds	r3, r7, #4
2000063c:	2202      	movs	r2, #2
2000063e:	711a      	strb	r2, [r3, #4]
    GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
20000640:	1d3b      	adds	r3, r7, #4
20000642:	2200      	movs	r2, #0
20000644:	719a      	strb	r2, [r3, #6]
    GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
20000646:	1d3b      	adds	r3, r7, #4
20000648:	2200      	movs	r2, #0
2000064a:	71da      	strb	r2, [r3, #7]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
2000064c:	1d3b      	adds	r3, r7, #4
2000064e:	2202      	movs	r2, #2
20000650:	715a      	strb	r2, [r3, #5]
    GPIO_Init(GPIOB, &GPIO_InitStructure);	
20000652:	1d3b      	adds	r3, r7, #4
20000654:	4a4c      	ldr	r2, [pc, #304]	; (20000788 <can_init+0x1ac>)
20000656:	0019      	movs	r1, r3
20000658:	0010      	movs	r0, r2
2000065a:	f003 f8df 	bl	2000381c <GPIO_Init>

    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_8;	
2000065e:	1d3b      	adds	r3, r7, #4
20000660:	2280      	movs	r2, #128	; 0x80
20000662:	0052      	lsls	r2, r2, #1
20000664:	601a      	str	r2, [r3, #0]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
20000666:	1d3b      	adds	r3, r7, #4
20000668:	2202      	movs	r2, #2
2000066a:	711a      	strb	r2, [r3, #4]
    GPIO_InitStructure.GPIO_OType = GPIO_Mode_IN;
2000066c:	1d3b      	adds	r3, r7, #4
2000066e:	2200      	movs	r2, #0
20000670:	719a      	strb	r2, [r3, #6]
    GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;	
20000672:	1d3b      	adds	r3, r7, #4
20000674:	2201      	movs	r2, #1
20000676:	71da      	strb	r2, [r3, #7]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
20000678:	1d3b      	adds	r3, r7, #4
2000067a:	2202      	movs	r2, #2
2000067c:	715a      	strb	r2, [r3, #5]
    GPIO_Init(GPIOB, &GPIO_InitStructure);
2000067e:	1d3b      	adds	r3, r7, #4
20000680:	4a41      	ldr	r2, [pc, #260]	; (20000788 <can_init+0x1ac>)
20000682:	0019      	movs	r1, r3
20000684:	0010      	movs	r0, r2
20000686:	f003 f8c9 	bl	2000381c <GPIO_Init>
    
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_6;
2000068a:	1d3b      	adds	r3, r7, #4
2000068c:	2240      	movs	r2, #64	; 0x40
2000068e:	601a      	str	r2, [r3, #0]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
20000690:	1d3b      	adds	r3, r7, #4
20000692:	2202      	movs	r2, #2
20000694:	711a      	strb	r2, [r3, #4]
    GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
20000696:	1d3b      	adds	r3, r7, #4
20000698:	2200      	movs	r2, #0
2000069a:	719a      	strb	r2, [r3, #6]
    GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
2000069c:	1d3b      	adds	r3, r7, #4
2000069e:	2200      	movs	r2, #0
200006a0:	71da      	strb	r2, [r3, #7]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
200006a2:	1d3b      	adds	r3, r7, #4
200006a4:	2202      	movs	r2, #2
200006a6:	715a      	strb	r2, [r3, #5]
    GPIO_Init(GPIOB, &GPIO_InitStructure);	
200006a8:	1d3b      	adds	r3, r7, #4
200006aa:	4a37      	ldr	r2, [pc, #220]	; (20000788 <can_init+0x1ac>)
200006ac:	0019      	movs	r1, r3
200006ae:	0010      	movs	r0, r2
200006b0:	f003 f8b4 	bl	2000381c <GPIO_Init>

    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_5;	
200006b4:	1d3b      	adds	r3, r7, #4
200006b6:	2220      	movs	r2, #32
200006b8:	601a      	str	r2, [r3, #0]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
200006ba:	1d3b      	adds	r3, r7, #4
200006bc:	2202      	movs	r2, #2
200006be:	711a      	strb	r2, [r3, #4]
    GPIO_InitStructure.GPIO_OType = GPIO_Mode_IN;
200006c0:	1d3b      	adds	r3, r7, #4
200006c2:	2200      	movs	r2, #0
200006c4:	719a      	strb	r2, [r3, #6]
    GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;	
200006c6:	1d3b      	adds	r3, r7, #4
200006c8:	2201      	movs	r2, #1
200006ca:	71da      	strb	r2, [r3, #7]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
200006cc:	1d3b      	adds	r3, r7, #4
200006ce:	2202      	movs	r2, #2
200006d0:	715a      	strb	r2, [r3, #5]
    GPIO_Init(GPIOB, &GPIO_InitStructure);
200006d2:	1d3b      	adds	r3, r7, #4
200006d4:	4a2c      	ldr	r2, [pc, #176]	; (20000788 <can_init+0x1ac>)
200006d6:	0019      	movs	r1, r3
200006d8:	0010      	movs	r0, r2
200006da:	f003 f89f 	bl	2000381c <GPIO_Init>
	
	NVIC_InitStructure.NVIC_IRQChannel = CAN1_RX0_IRQn;
200006de:	210c      	movs	r1, #12
200006e0:	187b      	adds	r3, r7, r1
200006e2:	2214      	movs	r2, #20
200006e4:	701a      	strb	r2, [r3, #0]
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = __CAN_IRQ_PRIORITY;
200006e6:	187b      	adds	r3, r7, r1
200006e8:	2202      	movs	r2, #2
200006ea:	705a      	strb	r2, [r3, #1]
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0x2;
200006ec:	187b      	adds	r3, r7, r1
200006ee:	2202      	movs	r2, #2
200006f0:	709a      	strb	r2, [r3, #2]
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
200006f2:	187b      	adds	r3, r7, r1
200006f4:	2201      	movs	r2, #1
200006f6:	70da      	strb	r2, [r3, #3]
	NVIC_Init(&NVIC_InitStructure);
200006f8:	187b      	adds	r3, r7, r1
200006fa:	0018      	movs	r0, r3
200006fc:	f002 ff06 	bl	2000350c <NVIC_Init>

	/* CAN register init */
	CAN_DeInit(CAN1);
20000700:	4b22      	ldr	r3, [pc, #136]	; (2000078c <can_init+0x1b0>)
20000702:	0018      	movs	r0, r3
20000704:	f000 f848 	bl	20000798 <CAN_DeInit>

	/* CAN cell init */
	CAN_InitStructure.CAN_TTCM = DISABLE; // time-triggered communication mode = DISABLED
20000708:	2510      	movs	r5, #16
2000070a:	197b      	adds	r3, r7, r5
2000070c:	2200      	movs	r2, #0
2000070e:	719a      	strb	r2, [r3, #6]
    CAN_InitStructure.CAN_ABOM = DISABLE; // automatic bus-off management mode = DISABLED
20000710:	197b      	adds	r3, r7, r5
20000712:	2200      	movs	r2, #0
20000714:	71da      	strb	r2, [r3, #7]
    CAN_InitStructure.CAN_AWUM = DISABLE; // automatic wake-up mode = DISABLED
20000716:	197b      	adds	r3, r7, r5
20000718:	2200      	movs	r2, #0
2000071a:	721a      	strb	r2, [r3, #8]
    CAN_InitStructure.CAN_NART = DISABLE; // non-automatic retransmission mode = DISABLED
2000071c:	197b      	adds	r3, r7, r5
2000071e:	2200      	movs	r2, #0
20000720:	725a      	strb	r2, [r3, #9]
    CAN_InitStructure.CAN_RFLM = DISABLE; // receive FIFO locked mode = DISABLED
20000722:	197b      	adds	r3, r7, r5
20000724:	2200      	movs	r2, #0
20000726:	729a      	strb	r2, [r3, #10]
    CAN_InitStructure.CAN_TXFP = DISABLE; // transmit FIFO priority = DISABLED
20000728:	197b      	adds	r3, r7, r5
2000072a:	2200      	movs	r2, #0
2000072c:	72da      	strb	r2, [r3, #11]
    CAN_InitStructure.CAN_Mode = CAN_Mode_Normal; // normal CAN mode
2000072e:	197b      	adds	r3, r7, r5
20000730:	2200      	movs	r2, #0
20000732:	709a      	strb	r2, [r3, #2]

	/* CAN Baudrate = 1 MBps (CAN clocked at 30 MHz) */
	CAN_InitStructure.CAN_BS1 = CAN_BS1_3tq;
20000734:	197b      	adds	r3, r7, r5
20000736:	2202      	movs	r2, #2
20000738:	711a      	strb	r2, [r3, #4]
	CAN_InitStructure.CAN_BS2 = CAN_BS2_4tq;
2000073a:	197b      	adds	r3, r7, r5
2000073c:	2203      	movs	r2, #3
2000073e:	715a      	strb	r2, [r3, #5]
	CAN_InitStructure.CAN_Prescaler = 7;
20000740:	197b      	adds	r3, r7, r5
20000742:	2207      	movs	r2, #7
20000744:	801a      	strh	r2, [r3, #0]

    //Avaktiverar alla filter
    CANdisableAllFilterHandlers();
20000746:	f7ff fdbf 	bl	200002c8 <CANdisableAllFilterHandlers>

	uint8_t can_init_status = CAN_Init(CAN1, &CAN_InitStructure);
2000074a:	261f      	movs	r6, #31
2000074c:	19bc      	adds	r4, r7, r6
2000074e:	197b      	adds	r3, r7, r5
20000750:	4a0e      	ldr	r2, [pc, #56]	; (2000078c <can_init+0x1b0>)
20000752:	0019      	movs	r1, r3
20000754:	0010      	movs	r0, r2
20000756:	f000 f847 	bl	200007e8 <CAN_Init>
2000075a:	0003      	movs	r3, r0
2000075c:	7023      	strb	r3, [r4, #0]

	*((void (**)(void) ) CAN1_IRQ_VECTOR ) = can_irq_handler;
2000075e:	4b0c      	ldr	r3, [pc, #48]	; (20000790 <can_init+0x1b4>)
20000760:	4a0c      	ldr	r2, [pc, #48]	; (20000794 <can_init+0x1b8>)
20000762:	601a      	str	r2, [r3, #0]
	// We need the following function because it's not equivalent to what NVIC_Init does with respect
	// to IRQ priority. Which seems bananas to me...
    NVIC_SetPriority( CAN1_RX0_IRQn, __CAN_IRQ_PRIORITY);
20000764:	2102      	movs	r1, #2
20000766:	2014      	movs	r0, #20
20000768:	f7ff fc52 	bl	20000010 <NVIC_SetPriority>
	CAN_ITConfig(CAN1, CAN_IT_FMP0, ENABLE);
2000076c:	4b07      	ldr	r3, [pc, #28]	; (2000078c <can_init+0x1b0>)
2000076e:	2201      	movs	r2, #1
20000770:	2102      	movs	r1, #2
20000772:	0018      	movs	r0, r3
20000774:	f000 fea1 	bl	200014ba <CAN_ITConfig>

    //Avaktiverar Session ID
    noSessionId();
20000778:	f7ff fee4 	bl	20000544 <noSessionId>

	return can_init_status;
2000077c:	19bb      	adds	r3, r7, r6
2000077e:	781b      	ldrb	r3, [r3, #0]
20000780:	0018      	movs	r0, r3
20000782:	46bd      	mov	sp, r7
20000784:	b009      	add	sp, #36	; 0x24
20000786:	bdf0      	pop	{r4, r5, r6, r7, pc}
20000788:	40020400 	andmi	r0, r2, r0, lsl #8
2000078c:	40006400 	andmi	r6, r0, r0, lsl #8
20000790:	2001c090 	mulcs	r1, r0, r0
20000794:	200003a5 	andcs	r0, r0, r5, lsr #7

20000798 <CAN_DeInit>:
  * @param  CANx: where x can be 1,2 or 3 to select the CAN peripheral.
  * @note   CAN3 peripheral is available only for STM32F413_423xx devices
  * @retval None.
  */
void CAN_DeInit(CAN_TypeDef* CANx)
{
20000798:	b580      	push	{r7, lr}
2000079a:	b082      	sub	sp, #8
2000079c:	af00      	add	r7, sp, #0
2000079e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
 
  if (CANx == CAN1)
200007a0:	687b      	ldr	r3, [r7, #4]
200007a2:	4a10      	ldr	r2, [pc, #64]	; (200007e4 <CAN_DeInit+0x4c>)
200007a4:	4293      	cmp	r3, r2
200007a6:	d10c      	bne.n	200007c2 <CAN_DeInit+0x2a>
  {
    /* Enable CAN1 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_CAN1, ENABLE);
200007a8:	2380      	movs	r3, #128	; 0x80
200007aa:	049b      	lsls	r3, r3, #18
200007ac:	2101      	movs	r1, #1
200007ae:	0018      	movs	r0, r3
200007b0:	f001 fe00 	bl	200023b4 <RCC_APB1PeriphResetCmd>
    /* Release CAN1 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_CAN1, DISABLE);
200007b4:	2380      	movs	r3, #128	; 0x80
200007b6:	049b      	lsls	r3, r3, #18
200007b8:	2100      	movs	r1, #0
200007ba:	0018      	movs	r0, r3
200007bc:	f001 fdfa 	bl	200023b4 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_CAN2, ENABLE);
    /* Release CAN2 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_CAN2, DISABLE);
  }
#endif /* STM32F413_423xx */
}
200007c0:	e00b      	b.n	200007da <CAN_DeInit+0x42>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_CAN2, ENABLE);
200007c2:	2380      	movs	r3, #128	; 0x80
200007c4:	04db      	lsls	r3, r3, #19
200007c6:	2101      	movs	r1, #1
200007c8:	0018      	movs	r0, r3
200007ca:	f001 fdf3 	bl	200023b4 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_CAN2, DISABLE);
200007ce:	2380      	movs	r3, #128	; 0x80
200007d0:	04db      	lsls	r3, r3, #19
200007d2:	2100      	movs	r1, #0
200007d4:	0018      	movs	r0, r3
200007d6:	f001 fded 	bl	200023b4 <RCC_APB1PeriphResetCmd>
}
200007da:	46c0      	nop			; (mov r8, r8)
200007dc:	46bd      	mov	sp, r7
200007de:	b002      	add	sp, #8
200007e0:	bd80      	pop	{r7, pc}
200007e2:	46c0      	nop			; (mov r8, r8)
200007e4:	40006400 	andmi	r6, r0, r0, lsl #8

200007e8 <CAN_Init>:
  * @note   CAN3 peripheral is available only for STM32F413_423xx devices
  * @retval Constant indicates initialization succeed which will be 
  *         CAN_InitStatus_Failed or CAN_InitStatus_Success.
  */
uint8_t CAN_Init(CAN_TypeDef* CANx, CAN_InitTypeDef* CAN_InitStruct)
{
200007e8:	b580      	push	{r7, lr}
200007ea:	b084      	sub	sp, #16
200007ec:	af00      	add	r7, sp, #0
200007ee:	6078      	str	r0, [r7, #4]
200007f0:	6039      	str	r1, [r7, #0]
  uint8_t InitStatus = CAN_InitStatus_Failed;
200007f2:	230f      	movs	r3, #15
200007f4:	18fb      	adds	r3, r7, r3
200007f6:	2200      	movs	r2, #0
200007f8:	701a      	strb	r2, [r3, #0]
  uint32_t wait_ack = 0x00000000;
200007fa:	2300      	movs	r3, #0
200007fc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_CAN_BS1(CAN_InitStruct->CAN_BS1));
  assert_param(IS_CAN_BS2(CAN_InitStruct->CAN_BS2));
  assert_param(IS_CAN_PRESCALER(CAN_InitStruct->CAN_Prescaler));

  /* Exit from sleep mode */
  CANx->MCR &= (~(uint32_t)CAN_MCR_SLEEP);
200007fe:	687b      	ldr	r3, [r7, #4]
20000800:	681b      	ldr	r3, [r3, #0]
20000802:	2202      	movs	r2, #2
20000804:	4393      	bics	r3, r2
20000806:	001a      	movs	r2, r3
20000808:	687b      	ldr	r3, [r7, #4]
2000080a:	601a      	str	r2, [r3, #0]

  /* Request initialisation */
  CANx->MCR |= CAN_MCR_INRQ ;
2000080c:	687b      	ldr	r3, [r7, #4]
2000080e:	681b      	ldr	r3, [r3, #0]
20000810:	2201      	movs	r2, #1
20000812:	431a      	orrs	r2, r3
20000814:	687b      	ldr	r3, [r7, #4]
20000816:	601a      	str	r2, [r3, #0]

  /* Wait the acknowledge */
  while (((CANx->MSR & CAN_MSR_INAK) != CAN_MSR_INAK) && (wait_ack != INAK_TIMEOUT))
20000818:	e002      	b.n	20000820 <CAN_Init+0x38>
  {
    wait_ack++;
2000081a:	68bb      	ldr	r3, [r7, #8]
2000081c:	3301      	adds	r3, #1
2000081e:	60bb      	str	r3, [r7, #8]
  while (((CANx->MSR & CAN_MSR_INAK) != CAN_MSR_INAK) && (wait_ack != INAK_TIMEOUT))
20000820:	687b      	ldr	r3, [r7, #4]
20000822:	685b      	ldr	r3, [r3, #4]
20000824:	2201      	movs	r2, #1
20000826:	4013      	ands	r3, r2
20000828:	2b01      	cmp	r3, #1
2000082a:	d003      	beq.n	20000834 <CAN_Init+0x4c>
2000082c:	68bb      	ldr	r3, [r7, #8]
2000082e:	4a5e      	ldr	r2, [pc, #376]	; (200009a8 <CAN_Init+0x1c0>)
20000830:	4293      	cmp	r3, r2
20000832:	d1f2      	bne.n	2000081a <CAN_Init+0x32>
  }

  /* Check acknowledge */
  if ((CANx->MSR & CAN_MSR_INAK) != CAN_MSR_INAK)
20000834:	687b      	ldr	r3, [r7, #4]
20000836:	685b      	ldr	r3, [r3, #4]
20000838:	2201      	movs	r2, #1
2000083a:	4013      	ands	r3, r2
2000083c:	2b01      	cmp	r3, #1
2000083e:	d004      	beq.n	2000084a <CAN_Init+0x62>
  {
    InitStatus = CAN_InitStatus_Failed;
20000840:	230f      	movs	r3, #15
20000842:	18fb      	adds	r3, r7, r3
20000844:	2200      	movs	r2, #0
20000846:	701a      	strb	r2, [r3, #0]
20000848:	e0a6      	b.n	20000998 <CAN_Init+0x1b0>
  }
  else 
  {
    /* Set the time triggered communication mode */
    if (CAN_InitStruct->CAN_TTCM == ENABLE)
2000084a:	683b      	ldr	r3, [r7, #0]
2000084c:	799b      	ldrb	r3, [r3, #6]
2000084e:	2b01      	cmp	r3, #1
20000850:	d106      	bne.n	20000860 <CAN_Init+0x78>
    {
      CANx->MCR |= CAN_MCR_TTCM;
20000852:	687b      	ldr	r3, [r7, #4]
20000854:	681b      	ldr	r3, [r3, #0]
20000856:	2280      	movs	r2, #128	; 0x80
20000858:	431a      	orrs	r2, r3
2000085a:	687b      	ldr	r3, [r7, #4]
2000085c:	601a      	str	r2, [r3, #0]
2000085e:	e006      	b.n	2000086e <CAN_Init+0x86>
    }
    else
    {
      CANx->MCR &= ~(uint32_t)CAN_MCR_TTCM;
20000860:	687b      	ldr	r3, [r7, #4]
20000862:	681b      	ldr	r3, [r3, #0]
20000864:	2280      	movs	r2, #128	; 0x80
20000866:	4393      	bics	r3, r2
20000868:	001a      	movs	r2, r3
2000086a:	687b      	ldr	r3, [r7, #4]
2000086c:	601a      	str	r2, [r3, #0]
    }

    /* Set the automatic bus-off management */
    if (CAN_InitStruct->CAN_ABOM == ENABLE)
2000086e:	683b      	ldr	r3, [r7, #0]
20000870:	79db      	ldrb	r3, [r3, #7]
20000872:	2b01      	cmp	r3, #1
20000874:	d106      	bne.n	20000884 <CAN_Init+0x9c>
    {
      CANx->MCR |= CAN_MCR_ABOM;
20000876:	687b      	ldr	r3, [r7, #4]
20000878:	681b      	ldr	r3, [r3, #0]
2000087a:	2240      	movs	r2, #64	; 0x40
2000087c:	431a      	orrs	r2, r3
2000087e:	687b      	ldr	r3, [r7, #4]
20000880:	601a      	str	r2, [r3, #0]
20000882:	e006      	b.n	20000892 <CAN_Init+0xaa>
    }
    else
    {
      CANx->MCR &= ~(uint32_t)CAN_MCR_ABOM;
20000884:	687b      	ldr	r3, [r7, #4]
20000886:	681b      	ldr	r3, [r3, #0]
20000888:	2240      	movs	r2, #64	; 0x40
2000088a:	4393      	bics	r3, r2
2000088c:	001a      	movs	r2, r3
2000088e:	687b      	ldr	r3, [r7, #4]
20000890:	601a      	str	r2, [r3, #0]
    }

    /* Set the automatic wake-up mode */
    if (CAN_InitStruct->CAN_AWUM == ENABLE)
20000892:	683b      	ldr	r3, [r7, #0]
20000894:	7a1b      	ldrb	r3, [r3, #8]
20000896:	2b01      	cmp	r3, #1
20000898:	d106      	bne.n	200008a8 <CAN_Init+0xc0>
    {
      CANx->MCR |= CAN_MCR_AWUM;
2000089a:	687b      	ldr	r3, [r7, #4]
2000089c:	681b      	ldr	r3, [r3, #0]
2000089e:	2220      	movs	r2, #32
200008a0:	431a      	orrs	r2, r3
200008a2:	687b      	ldr	r3, [r7, #4]
200008a4:	601a      	str	r2, [r3, #0]
200008a6:	e006      	b.n	200008b6 <CAN_Init+0xce>
    }
    else
    {
      CANx->MCR &= ~(uint32_t)CAN_MCR_AWUM;
200008a8:	687b      	ldr	r3, [r7, #4]
200008aa:	681b      	ldr	r3, [r3, #0]
200008ac:	2220      	movs	r2, #32
200008ae:	4393      	bics	r3, r2
200008b0:	001a      	movs	r2, r3
200008b2:	687b      	ldr	r3, [r7, #4]
200008b4:	601a      	str	r2, [r3, #0]
    }

    /* Set the no automatic retransmission */
    if (CAN_InitStruct->CAN_NART == ENABLE)
200008b6:	683b      	ldr	r3, [r7, #0]
200008b8:	7a5b      	ldrb	r3, [r3, #9]
200008ba:	2b01      	cmp	r3, #1
200008bc:	d106      	bne.n	200008cc <CAN_Init+0xe4>
    {
      CANx->MCR |= CAN_MCR_NART;
200008be:	687b      	ldr	r3, [r7, #4]
200008c0:	681b      	ldr	r3, [r3, #0]
200008c2:	2210      	movs	r2, #16
200008c4:	431a      	orrs	r2, r3
200008c6:	687b      	ldr	r3, [r7, #4]
200008c8:	601a      	str	r2, [r3, #0]
200008ca:	e006      	b.n	200008da <CAN_Init+0xf2>
    }
    else
    {
      CANx->MCR &= ~(uint32_t)CAN_MCR_NART;
200008cc:	687b      	ldr	r3, [r7, #4]
200008ce:	681b      	ldr	r3, [r3, #0]
200008d0:	2210      	movs	r2, #16
200008d2:	4393      	bics	r3, r2
200008d4:	001a      	movs	r2, r3
200008d6:	687b      	ldr	r3, [r7, #4]
200008d8:	601a      	str	r2, [r3, #0]
    }

    /* Set the receive FIFO locked mode */
    if (CAN_InitStruct->CAN_RFLM == ENABLE)
200008da:	683b      	ldr	r3, [r7, #0]
200008dc:	7a9b      	ldrb	r3, [r3, #10]
200008de:	2b01      	cmp	r3, #1
200008e0:	d106      	bne.n	200008f0 <CAN_Init+0x108>
    {
      CANx->MCR |= CAN_MCR_RFLM;
200008e2:	687b      	ldr	r3, [r7, #4]
200008e4:	681b      	ldr	r3, [r3, #0]
200008e6:	2208      	movs	r2, #8
200008e8:	431a      	orrs	r2, r3
200008ea:	687b      	ldr	r3, [r7, #4]
200008ec:	601a      	str	r2, [r3, #0]
200008ee:	e006      	b.n	200008fe <CAN_Init+0x116>
    }
    else
    {
      CANx->MCR &= ~(uint32_t)CAN_MCR_RFLM;
200008f0:	687b      	ldr	r3, [r7, #4]
200008f2:	681b      	ldr	r3, [r3, #0]
200008f4:	2208      	movs	r2, #8
200008f6:	4393      	bics	r3, r2
200008f8:	001a      	movs	r2, r3
200008fa:	687b      	ldr	r3, [r7, #4]
200008fc:	601a      	str	r2, [r3, #0]
    }

    /* Set the transmit FIFO priority */
    if (CAN_InitStruct->CAN_TXFP == ENABLE)
200008fe:	683b      	ldr	r3, [r7, #0]
20000900:	7adb      	ldrb	r3, [r3, #11]
20000902:	2b01      	cmp	r3, #1
20000904:	d106      	bne.n	20000914 <CAN_Init+0x12c>
    {
      CANx->MCR |= CAN_MCR_TXFP;
20000906:	687b      	ldr	r3, [r7, #4]
20000908:	681b      	ldr	r3, [r3, #0]
2000090a:	2204      	movs	r2, #4
2000090c:	431a      	orrs	r2, r3
2000090e:	687b      	ldr	r3, [r7, #4]
20000910:	601a      	str	r2, [r3, #0]
20000912:	e006      	b.n	20000922 <CAN_Init+0x13a>
    }
    else
    {
      CANx->MCR &= ~(uint32_t)CAN_MCR_TXFP;
20000914:	687b      	ldr	r3, [r7, #4]
20000916:	681b      	ldr	r3, [r3, #0]
20000918:	2204      	movs	r2, #4
2000091a:	4393      	bics	r3, r2
2000091c:	001a      	movs	r2, r3
2000091e:	687b      	ldr	r3, [r7, #4]
20000920:	601a      	str	r2, [r3, #0]
    }

    /* Set the bit timing register */
    CANx->BTR = (uint32_t)((uint32_t)CAN_InitStruct->CAN_Mode << 30) | \
20000922:	683b      	ldr	r3, [r7, #0]
20000924:	789b      	ldrb	r3, [r3, #2]
20000926:	079a      	lsls	r2, r3, #30
                ((uint32_t)CAN_InitStruct->CAN_SJW << 24) | \
20000928:	683b      	ldr	r3, [r7, #0]
2000092a:	78db      	ldrb	r3, [r3, #3]
2000092c:	061b      	lsls	r3, r3, #24
    CANx->BTR = (uint32_t)((uint32_t)CAN_InitStruct->CAN_Mode << 30) | \
2000092e:	431a      	orrs	r2, r3
                ((uint32_t)CAN_InitStruct->CAN_BS1 << 16) | \
20000930:	683b      	ldr	r3, [r7, #0]
20000932:	791b      	ldrb	r3, [r3, #4]
20000934:	041b      	lsls	r3, r3, #16
                ((uint32_t)CAN_InitStruct->CAN_SJW << 24) | \
20000936:	431a      	orrs	r2, r3
                ((uint32_t)CAN_InitStruct->CAN_BS2 << 20) | \
20000938:	683b      	ldr	r3, [r7, #0]
2000093a:	795b      	ldrb	r3, [r3, #5]
2000093c:	051b      	lsls	r3, r3, #20
                ((uint32_t)CAN_InitStruct->CAN_BS1 << 16) | \
2000093e:	431a      	orrs	r2, r3
               ((uint32_t)CAN_InitStruct->CAN_Prescaler - 1);
20000940:	683b      	ldr	r3, [r7, #0]
20000942:	881b      	ldrh	r3, [r3, #0]
20000944:	3b01      	subs	r3, #1
                ((uint32_t)CAN_InitStruct->CAN_BS2 << 20) | \
20000946:	431a      	orrs	r2, r3
    CANx->BTR = (uint32_t)((uint32_t)CAN_InitStruct->CAN_Mode << 30) | \
20000948:	687b      	ldr	r3, [r7, #4]
2000094a:	61da      	str	r2, [r3, #28]

    /* Request leave initialisation */
    CANx->MCR &= ~(uint32_t)CAN_MCR_INRQ;
2000094c:	687b      	ldr	r3, [r7, #4]
2000094e:	681b      	ldr	r3, [r3, #0]
20000950:	2201      	movs	r2, #1
20000952:	4393      	bics	r3, r2
20000954:	001a      	movs	r2, r3
20000956:	687b      	ldr	r3, [r7, #4]
20000958:	601a      	str	r2, [r3, #0]

   /* Wait the acknowledge */
   wait_ack = 0;
2000095a:	2300      	movs	r3, #0
2000095c:	60bb      	str	r3, [r7, #8]

   while (((CANx->MSR & CAN_MSR_INAK) == CAN_MSR_INAK) && (wait_ack != INAK_TIMEOUT))
2000095e:	e002      	b.n	20000966 <CAN_Init+0x17e>
   {
     wait_ack++;
20000960:	68bb      	ldr	r3, [r7, #8]
20000962:	3301      	adds	r3, #1
20000964:	60bb      	str	r3, [r7, #8]
   while (((CANx->MSR & CAN_MSR_INAK) == CAN_MSR_INAK) && (wait_ack != INAK_TIMEOUT))
20000966:	687b      	ldr	r3, [r7, #4]
20000968:	685b      	ldr	r3, [r3, #4]
2000096a:	2201      	movs	r2, #1
2000096c:	4013      	ands	r3, r2
2000096e:	2b01      	cmp	r3, #1
20000970:	d103      	bne.n	2000097a <CAN_Init+0x192>
20000972:	68bb      	ldr	r3, [r7, #8]
20000974:	4a0c      	ldr	r2, [pc, #48]	; (200009a8 <CAN_Init+0x1c0>)
20000976:	4293      	cmp	r3, r2
20000978:	d1f2      	bne.n	20000960 <CAN_Init+0x178>
   }

    /* ...and check acknowledged */
    if ((CANx->MSR & CAN_MSR_INAK) == CAN_MSR_INAK)
2000097a:	687b      	ldr	r3, [r7, #4]
2000097c:	685b      	ldr	r3, [r3, #4]
2000097e:	2201      	movs	r2, #1
20000980:	4013      	ands	r3, r2
20000982:	2b01      	cmp	r3, #1
20000984:	d104      	bne.n	20000990 <CAN_Init+0x1a8>
    {
      InitStatus = CAN_InitStatus_Failed;
20000986:	230f      	movs	r3, #15
20000988:	18fb      	adds	r3, r7, r3
2000098a:	2200      	movs	r2, #0
2000098c:	701a      	strb	r2, [r3, #0]
2000098e:	e003      	b.n	20000998 <CAN_Init+0x1b0>
    }
    else
    {
      InitStatus = CAN_InitStatus_Success ;
20000990:	230f      	movs	r3, #15
20000992:	18fb      	adds	r3, r7, r3
20000994:	2201      	movs	r2, #1
20000996:	701a      	strb	r2, [r3, #0]
    }
  }

  /* At this step, return the status of initialization */
  return InitStatus;
20000998:	230f      	movs	r3, #15
2000099a:	18fb      	adds	r3, r7, r3
2000099c:	781b      	ldrb	r3, [r3, #0]
}
2000099e:	0018      	movs	r0, r3
200009a0:	46bd      	mov	sp, r7
200009a2:	b004      	add	sp, #16
200009a4:	bd80      	pop	{r7, pc}
200009a6:	46c0      	nop			; (mov r8, r8)
200009a8:	0000ffff 	strdeq	pc, [r0], -pc	; <UNPREDICTABLE>

200009ac <CAN_FilterInit>:
  * @param  CAN_FilterInitStruct: pointer to a CAN_FilterInitTypeDef structure that
  *         contains the configuration information.
  * @retval None
  */
void CAN_FilterInit(CAN_FilterInitTypeDef* CAN_FilterInitStruct)
{
200009ac:	b590      	push	{r4, r7, lr}
200009ae:	b085      	sub	sp, #20
200009b0:	af00      	add	r7, sp, #0
200009b2:	6078      	str	r0, [r7, #4]
  uint32_t filter_number_bit_pos = 0;
200009b4:	2300      	movs	r3, #0
200009b6:	60fb      	str	r3, [r7, #12]
  assert_param(IS_CAN_FILTER_MODE(CAN_FilterInitStruct->CAN_FilterMode));
  assert_param(IS_CAN_FILTER_SCALE(CAN_FilterInitStruct->CAN_FilterScale));
  assert_param(IS_CAN_FILTER_FIFO(CAN_FilterInitStruct->CAN_FilterFIFOAssignment));
  assert_param(IS_FUNCTIONAL_STATE(CAN_FilterInitStruct->CAN_FilterActivation));

  filter_number_bit_pos = ((uint32_t)1) << CAN_FilterInitStruct->CAN_FilterNumber;
200009b8:	687b      	ldr	r3, [r7, #4]
200009ba:	7a9b      	ldrb	r3, [r3, #10]
200009bc:	001a      	movs	r2, r3
200009be:	2301      	movs	r3, #1
200009c0:	4093      	lsls	r3, r2
200009c2:	60fb      	str	r3, [r7, #12]

  /* Initialisation mode for the filter */
  CAN1->FMR |= FMR_FINIT;
200009c4:	4a64      	ldr	r2, [pc, #400]	; (20000b58 <CAN_FilterInit+0x1ac>)
200009c6:	2380      	movs	r3, #128	; 0x80
200009c8:	009b      	lsls	r3, r3, #2
200009ca:	58d3      	ldr	r3, [r2, r3]
200009cc:	4962      	ldr	r1, [pc, #392]	; (20000b58 <CAN_FilterInit+0x1ac>)
200009ce:	2201      	movs	r2, #1
200009d0:	431a      	orrs	r2, r3
200009d2:	2380      	movs	r3, #128	; 0x80
200009d4:	009b      	lsls	r3, r3, #2
200009d6:	50ca      	str	r2, [r1, r3]

  /* Filter Deactivation */
  CAN1->FA1R &= ~(uint32_t)filter_number_bit_pos;
200009d8:	4a5f      	ldr	r2, [pc, #380]	; (20000b58 <CAN_FilterInit+0x1ac>)
200009da:	2387      	movs	r3, #135	; 0x87
200009dc:	009b      	lsls	r3, r3, #2
200009de:	58d3      	ldr	r3, [r2, r3]
200009e0:	68fa      	ldr	r2, [r7, #12]
200009e2:	43d2      	mvns	r2, r2
200009e4:	495c      	ldr	r1, [pc, #368]	; (20000b58 <CAN_FilterInit+0x1ac>)
200009e6:	401a      	ands	r2, r3
200009e8:	2387      	movs	r3, #135	; 0x87
200009ea:	009b      	lsls	r3, r3, #2
200009ec:	50ca      	str	r2, [r1, r3]

  /* Filter Scale */
  if (CAN_FilterInitStruct->CAN_FilterScale == CAN_FilterScale_16bit)
200009ee:	687b      	ldr	r3, [r7, #4]
200009f0:	7b1b      	ldrb	r3, [r3, #12]
200009f2:	2b00      	cmp	r3, #0
200009f4:	d12c      	bne.n	20000a50 <CAN_FilterInit+0xa4>
  {
    /* 16-bit scale for the filter */
    CAN1->FS1R &= ~(uint32_t)filter_number_bit_pos;
200009f6:	4a58      	ldr	r2, [pc, #352]	; (20000b58 <CAN_FilterInit+0x1ac>)
200009f8:	2383      	movs	r3, #131	; 0x83
200009fa:	009b      	lsls	r3, r3, #2
200009fc:	58d3      	ldr	r3, [r2, r3]
200009fe:	68fa      	ldr	r2, [r7, #12]
20000a00:	43d2      	mvns	r2, r2
20000a02:	4955      	ldr	r1, [pc, #340]	; (20000b58 <CAN_FilterInit+0x1ac>)
20000a04:	401a      	ands	r2, r3
20000a06:	2383      	movs	r3, #131	; 0x83
20000a08:	009b      	lsls	r3, r3, #2
20000a0a:	50ca      	str	r2, [r1, r3]

    /* First 16-bit identifier and First 16-bit mask */
    /* Or First 16-bit identifier and Second 16-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdLow) << 16) |
20000a0c:	687b      	ldr	r3, [r7, #4]
20000a0e:	88db      	ldrh	r3, [r3, #6]
20000a10:	041b      	lsls	r3, r3, #16
        (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdLow);
20000a12:	687a      	ldr	r2, [r7, #4]
20000a14:	8852      	ldrh	r2, [r2, #2]
20000a16:	0014      	movs	r4, r2
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
20000a18:	494f      	ldr	r1, [pc, #316]	; (20000b58 <CAN_FilterInit+0x1ac>)
20000a1a:	687a      	ldr	r2, [r7, #4]
20000a1c:	7a92      	ldrb	r2, [r2, #10]
20000a1e:	0010      	movs	r0, r2
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdLow) << 16) |
20000a20:	4323      	orrs	r3, r4
20000a22:	001a      	movs	r2, r3
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
20000a24:	0003      	movs	r3, r0
20000a26:	3348      	adds	r3, #72	; 0x48
20000a28:	00db      	lsls	r3, r3, #3
20000a2a:	505a      	str	r2, [r3, r1]

    /* Second 16-bit identifier and Second 16-bit mask */
    /* Or Third 16-bit identifier and Fourth 16-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR2 = 
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdHigh) << 16) |
20000a2c:	687b      	ldr	r3, [r7, #4]
20000a2e:	889b      	ldrh	r3, [r3, #4]
20000a30:	041b      	lsls	r3, r3, #16
        (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdHigh);
20000a32:	687a      	ldr	r2, [r7, #4]
20000a34:	8812      	ldrh	r2, [r2, #0]
20000a36:	0014      	movs	r4, r2
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR2 = 
20000a38:	4947      	ldr	r1, [pc, #284]	; (20000b58 <CAN_FilterInit+0x1ac>)
20000a3a:	687a      	ldr	r2, [r7, #4]
20000a3c:	7a92      	ldrb	r2, [r2, #10]
20000a3e:	0010      	movs	r0, r2
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdHigh) << 16) |
20000a40:	4323      	orrs	r3, r4
20000a42:	001a      	movs	r2, r3
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR2 = 
20000a44:	0003      	movs	r3, r0
20000a46:	3348      	adds	r3, #72	; 0x48
20000a48:	00db      	lsls	r3, r3, #3
20000a4a:	18cb      	adds	r3, r1, r3
20000a4c:	3304      	adds	r3, #4
20000a4e:	601a      	str	r2, [r3, #0]
  }

  if (CAN_FilterInitStruct->CAN_FilterScale == CAN_FilterScale_32bit)
20000a50:	687b      	ldr	r3, [r7, #4]
20000a52:	7b1b      	ldrb	r3, [r3, #12]
20000a54:	2b01      	cmp	r3, #1
20000a56:	d12b      	bne.n	20000ab0 <CAN_FilterInit+0x104>
  {
    /* 32-bit scale for the filter */
    CAN1->FS1R |= filter_number_bit_pos;
20000a58:	4a3f      	ldr	r2, [pc, #252]	; (20000b58 <CAN_FilterInit+0x1ac>)
20000a5a:	2383      	movs	r3, #131	; 0x83
20000a5c:	009b      	lsls	r3, r3, #2
20000a5e:	58d2      	ldr	r2, [r2, r3]
20000a60:	493d      	ldr	r1, [pc, #244]	; (20000b58 <CAN_FilterInit+0x1ac>)
20000a62:	68fb      	ldr	r3, [r7, #12]
20000a64:	431a      	orrs	r2, r3
20000a66:	2383      	movs	r3, #131	; 0x83
20000a68:	009b      	lsls	r3, r3, #2
20000a6a:	50ca      	str	r2, [r1, r3]
    /* 32-bit identifier or First 32-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdHigh) << 16) |
20000a6c:	687b      	ldr	r3, [r7, #4]
20000a6e:	881b      	ldrh	r3, [r3, #0]
20000a70:	041b      	lsls	r3, r3, #16
        (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdLow);
20000a72:	687a      	ldr	r2, [r7, #4]
20000a74:	8852      	ldrh	r2, [r2, #2]
20000a76:	0014      	movs	r4, r2
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
20000a78:	4937      	ldr	r1, [pc, #220]	; (20000b58 <CAN_FilterInit+0x1ac>)
20000a7a:	687a      	ldr	r2, [r7, #4]
20000a7c:	7a92      	ldrb	r2, [r2, #10]
20000a7e:	0010      	movs	r0, r2
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdHigh) << 16) |
20000a80:	4323      	orrs	r3, r4
20000a82:	001a      	movs	r2, r3
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
20000a84:	0003      	movs	r3, r0
20000a86:	3348      	adds	r3, #72	; 0x48
20000a88:	00db      	lsls	r3, r3, #3
20000a8a:	505a      	str	r2, [r3, r1]
    /* 32-bit mask or Second 32-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR2 = 
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdHigh) << 16) |
20000a8c:	687b      	ldr	r3, [r7, #4]
20000a8e:	889b      	ldrh	r3, [r3, #4]
20000a90:	041b      	lsls	r3, r3, #16
        (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdLow);
20000a92:	687a      	ldr	r2, [r7, #4]
20000a94:	88d2      	ldrh	r2, [r2, #6]
20000a96:	0014      	movs	r4, r2
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR2 = 
20000a98:	492f      	ldr	r1, [pc, #188]	; (20000b58 <CAN_FilterInit+0x1ac>)
20000a9a:	687a      	ldr	r2, [r7, #4]
20000a9c:	7a92      	ldrb	r2, [r2, #10]
20000a9e:	0010      	movs	r0, r2
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdHigh) << 16) |
20000aa0:	4323      	orrs	r3, r4
20000aa2:	001a      	movs	r2, r3
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR2 = 
20000aa4:	0003      	movs	r3, r0
20000aa6:	3348      	adds	r3, #72	; 0x48
20000aa8:	00db      	lsls	r3, r3, #3
20000aaa:	18cb      	adds	r3, r1, r3
20000aac:	3304      	adds	r3, #4
20000aae:	601a      	str	r2, [r3, #0]
  }

  /* Filter Mode */
  if (CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdMask)
20000ab0:	687b      	ldr	r3, [r7, #4]
20000ab2:	7adb      	ldrb	r3, [r3, #11]
20000ab4:	2b00      	cmp	r3, #0
20000ab6:	d10b      	bne.n	20000ad0 <CAN_FilterInit+0x124>
  {
    /*Id/Mask mode for the filter*/
    CAN1->FM1R &= ~(uint32_t)filter_number_bit_pos;
20000ab8:	4a27      	ldr	r2, [pc, #156]	; (20000b58 <CAN_FilterInit+0x1ac>)
20000aba:	2381      	movs	r3, #129	; 0x81
20000abc:	009b      	lsls	r3, r3, #2
20000abe:	58d3      	ldr	r3, [r2, r3]
20000ac0:	68fa      	ldr	r2, [r7, #12]
20000ac2:	43d2      	mvns	r2, r2
20000ac4:	4924      	ldr	r1, [pc, #144]	; (20000b58 <CAN_FilterInit+0x1ac>)
20000ac6:	401a      	ands	r2, r3
20000ac8:	2381      	movs	r3, #129	; 0x81
20000aca:	009b      	lsls	r3, r3, #2
20000acc:	50ca      	str	r2, [r1, r3]
20000ace:	e009      	b.n	20000ae4 <CAN_FilterInit+0x138>
  }
  else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
  {
    /*Identifier list mode for the filter*/
    CAN1->FM1R |= (uint32_t)filter_number_bit_pos;
20000ad0:	4a21      	ldr	r2, [pc, #132]	; (20000b58 <CAN_FilterInit+0x1ac>)
20000ad2:	2381      	movs	r3, #129	; 0x81
20000ad4:	009b      	lsls	r3, r3, #2
20000ad6:	58d2      	ldr	r2, [r2, r3]
20000ad8:	491f      	ldr	r1, [pc, #124]	; (20000b58 <CAN_FilterInit+0x1ac>)
20000ada:	68fb      	ldr	r3, [r7, #12]
20000adc:	431a      	orrs	r2, r3
20000ade:	2381      	movs	r3, #129	; 0x81
20000ae0:	009b      	lsls	r3, r3, #2
20000ae2:	50ca      	str	r2, [r1, r3]
  }

  /* Filter FIFO assignment */
  if (CAN_FilterInitStruct->CAN_FilterFIFOAssignment == CAN_Filter_FIFO0)
20000ae4:	687b      	ldr	r3, [r7, #4]
20000ae6:	891b      	ldrh	r3, [r3, #8]
20000ae8:	2b00      	cmp	r3, #0
20000aea:	d10a      	bne.n	20000b02 <CAN_FilterInit+0x156>
  {
    /* FIFO 0 assignation for the filter */
    CAN1->FFA1R &= ~(uint32_t)filter_number_bit_pos;
20000aec:	4a1a      	ldr	r2, [pc, #104]	; (20000b58 <CAN_FilterInit+0x1ac>)
20000aee:	2385      	movs	r3, #133	; 0x85
20000af0:	009b      	lsls	r3, r3, #2
20000af2:	58d3      	ldr	r3, [r2, r3]
20000af4:	68fa      	ldr	r2, [r7, #12]
20000af6:	43d2      	mvns	r2, r2
20000af8:	4917      	ldr	r1, [pc, #92]	; (20000b58 <CAN_FilterInit+0x1ac>)
20000afa:	401a      	ands	r2, r3
20000afc:	2385      	movs	r3, #133	; 0x85
20000afe:	009b      	lsls	r3, r3, #2
20000b00:	50ca      	str	r2, [r1, r3]
  }

  if (CAN_FilterInitStruct->CAN_FilterFIFOAssignment == CAN_Filter_FIFO1)
20000b02:	687b      	ldr	r3, [r7, #4]
20000b04:	891b      	ldrh	r3, [r3, #8]
20000b06:	2b01      	cmp	r3, #1
20000b08:	d109      	bne.n	20000b1e <CAN_FilterInit+0x172>
  {
    /* FIFO 1 assignation for the filter */
    CAN1->FFA1R |= (uint32_t)filter_number_bit_pos;
20000b0a:	4a13      	ldr	r2, [pc, #76]	; (20000b58 <CAN_FilterInit+0x1ac>)
20000b0c:	2385      	movs	r3, #133	; 0x85
20000b0e:	009b      	lsls	r3, r3, #2
20000b10:	58d2      	ldr	r2, [r2, r3]
20000b12:	4911      	ldr	r1, [pc, #68]	; (20000b58 <CAN_FilterInit+0x1ac>)
20000b14:	68fb      	ldr	r3, [r7, #12]
20000b16:	431a      	orrs	r2, r3
20000b18:	2385      	movs	r3, #133	; 0x85
20000b1a:	009b      	lsls	r3, r3, #2
20000b1c:	50ca      	str	r2, [r1, r3]
  }
  
  /* Filter activation */
  if (CAN_FilterInitStruct->CAN_FilterActivation == ENABLE)
20000b1e:	687b      	ldr	r3, [r7, #4]
20000b20:	7b5b      	ldrb	r3, [r3, #13]
20000b22:	2b01      	cmp	r3, #1
20000b24:	d109      	bne.n	20000b3a <CAN_FilterInit+0x18e>
  {
    CAN1->FA1R |= filter_number_bit_pos;
20000b26:	4a0c      	ldr	r2, [pc, #48]	; (20000b58 <CAN_FilterInit+0x1ac>)
20000b28:	2387      	movs	r3, #135	; 0x87
20000b2a:	009b      	lsls	r3, r3, #2
20000b2c:	58d2      	ldr	r2, [r2, r3]
20000b2e:	490a      	ldr	r1, [pc, #40]	; (20000b58 <CAN_FilterInit+0x1ac>)
20000b30:	68fb      	ldr	r3, [r7, #12]
20000b32:	431a      	orrs	r2, r3
20000b34:	2387      	movs	r3, #135	; 0x87
20000b36:	009b      	lsls	r3, r3, #2
20000b38:	50ca      	str	r2, [r1, r3]
  }

  /* Leave the initialisation mode for the filter */
  CAN1->FMR &= ~FMR_FINIT;
20000b3a:	4a07      	ldr	r2, [pc, #28]	; (20000b58 <CAN_FilterInit+0x1ac>)
20000b3c:	2380      	movs	r3, #128	; 0x80
20000b3e:	009b      	lsls	r3, r3, #2
20000b40:	58d3      	ldr	r3, [r2, r3]
20000b42:	4905      	ldr	r1, [pc, #20]	; (20000b58 <CAN_FilterInit+0x1ac>)
20000b44:	2201      	movs	r2, #1
20000b46:	4393      	bics	r3, r2
20000b48:	001a      	movs	r2, r3
20000b4a:	2380      	movs	r3, #128	; 0x80
20000b4c:	009b      	lsls	r3, r3, #2
20000b4e:	50ca      	str	r2, [r1, r3]
}
20000b50:	46c0      	nop			; (mov r8, r8)
20000b52:	46bd      	mov	sp, r7
20000b54:	b005      	add	sp, #20
20000b56:	bd90      	pop	{r4, r7, pc}
20000b58:	40006400 	andmi	r6, r0, r0, lsl #8

20000b5c <CAN_StructInit>:
  * @brief  Fills each CAN_InitStruct member with its default value.
  * @param  CAN_InitStruct: pointer to a CAN_InitTypeDef structure which ill be initialized.
  * @retval None
  */
void CAN_StructInit(CAN_InitTypeDef* CAN_InitStruct)
{
20000b5c:	b580      	push	{r7, lr}
20000b5e:	b082      	sub	sp, #8
20000b60:	af00      	add	r7, sp, #0
20000b62:	6078      	str	r0, [r7, #4]
  /* Reset CAN init structure parameters values */
  
  /* Initialize the time triggered communication mode */
  CAN_InitStruct->CAN_TTCM = DISABLE;
20000b64:	687b      	ldr	r3, [r7, #4]
20000b66:	2200      	movs	r2, #0
20000b68:	719a      	strb	r2, [r3, #6]
  
  /* Initialize the automatic bus-off management */
  CAN_InitStruct->CAN_ABOM = DISABLE;
20000b6a:	687b      	ldr	r3, [r7, #4]
20000b6c:	2200      	movs	r2, #0
20000b6e:	71da      	strb	r2, [r3, #7]
  
  /* Initialize the automatic wake-up mode */
  CAN_InitStruct->CAN_AWUM = DISABLE;
20000b70:	687b      	ldr	r3, [r7, #4]
20000b72:	2200      	movs	r2, #0
20000b74:	721a      	strb	r2, [r3, #8]
  
  /* Initialize the no automatic retransmission */
  CAN_InitStruct->CAN_NART = DISABLE;
20000b76:	687b      	ldr	r3, [r7, #4]
20000b78:	2200      	movs	r2, #0
20000b7a:	725a      	strb	r2, [r3, #9]
  
  /* Initialize the receive FIFO locked mode */
  CAN_InitStruct->CAN_RFLM = DISABLE;
20000b7c:	687b      	ldr	r3, [r7, #4]
20000b7e:	2200      	movs	r2, #0
20000b80:	729a      	strb	r2, [r3, #10]
  
  /* Initialize the transmit FIFO priority */
  CAN_InitStruct->CAN_TXFP = DISABLE;
20000b82:	687b      	ldr	r3, [r7, #4]
20000b84:	2200      	movs	r2, #0
20000b86:	72da      	strb	r2, [r3, #11]
  
  /* Initialize the CAN_Mode member */
  CAN_InitStruct->CAN_Mode = CAN_Mode_Normal;
20000b88:	687b      	ldr	r3, [r7, #4]
20000b8a:	2200      	movs	r2, #0
20000b8c:	709a      	strb	r2, [r3, #2]
  
  /* Initialize the CAN_SJW member */
  CAN_InitStruct->CAN_SJW = CAN_SJW_1tq;
20000b8e:	687b      	ldr	r3, [r7, #4]
20000b90:	2200      	movs	r2, #0
20000b92:	70da      	strb	r2, [r3, #3]
  
  /* Initialize the CAN_BS1 member */
  CAN_InitStruct->CAN_BS1 = CAN_BS1_4tq;
20000b94:	687b      	ldr	r3, [r7, #4]
20000b96:	2203      	movs	r2, #3
20000b98:	711a      	strb	r2, [r3, #4]
  
  /* Initialize the CAN_BS2 member */
  CAN_InitStruct->CAN_BS2 = CAN_BS2_3tq;
20000b9a:	687b      	ldr	r3, [r7, #4]
20000b9c:	2202      	movs	r2, #2
20000b9e:	715a      	strb	r2, [r3, #5]
  
  /* Initialize the CAN_Prescaler member */
  CAN_InitStruct->CAN_Prescaler = 1;
20000ba0:	687b      	ldr	r3, [r7, #4]
20000ba2:	2201      	movs	r2, #1
20000ba4:	801a      	strh	r2, [r3, #0]
}
20000ba6:	46c0      	nop			; (mov r8, r8)
20000ba8:	46bd      	mov	sp, r7
20000baa:	b002      	add	sp, #8
20000bac:	bd80      	pop	{r7, pc}

20000bae <CAN_SlaveStartBank>:
  * @brief  Select the start bank filter for slave CAN.
  * @param  CAN_BankNumber: Select the start slave bank filter from 1..27.
  * @retval None
  */
void CAN_SlaveStartBank(uint8_t CAN_BankNumber) 
{
20000bae:	b580      	push	{r7, lr}
20000bb0:	b082      	sub	sp, #8
20000bb2:	af00      	add	r7, sp, #0
20000bb4:	0002      	movs	r2, r0
20000bb6:	1dfb      	adds	r3, r7, #7
20000bb8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_CAN_BANKNUMBER(CAN_BankNumber));
  
  /* Enter Initialisation mode for the filter */
  CAN1->FMR |= FMR_FINIT;
20000bba:	4a17      	ldr	r2, [pc, #92]	; (20000c18 <CAN_SlaveStartBank+0x6a>)
20000bbc:	2380      	movs	r3, #128	; 0x80
20000bbe:	009b      	lsls	r3, r3, #2
20000bc0:	58d3      	ldr	r3, [r2, r3]
20000bc2:	4915      	ldr	r1, [pc, #84]	; (20000c18 <CAN_SlaveStartBank+0x6a>)
20000bc4:	2201      	movs	r2, #1
20000bc6:	431a      	orrs	r2, r3
20000bc8:	2380      	movs	r3, #128	; 0x80
20000bca:	009b      	lsls	r3, r3, #2
20000bcc:	50ca      	str	r2, [r1, r3]
  
  /* Select the start slave bank */
  CAN1->FMR &= (uint32_t)0xFFFFC0F1 ;
20000bce:	4a12      	ldr	r2, [pc, #72]	; (20000c18 <CAN_SlaveStartBank+0x6a>)
20000bd0:	2380      	movs	r3, #128	; 0x80
20000bd2:	009b      	lsls	r3, r3, #2
20000bd4:	58d3      	ldr	r3, [r2, r3]
20000bd6:	4910      	ldr	r1, [pc, #64]	; (20000c18 <CAN_SlaveStartBank+0x6a>)
20000bd8:	4a10      	ldr	r2, [pc, #64]	; (20000c1c <CAN_SlaveStartBank+0x6e>)
20000bda:	401a      	ands	r2, r3
20000bdc:	2380      	movs	r3, #128	; 0x80
20000bde:	009b      	lsls	r3, r3, #2
20000be0:	50ca      	str	r2, [r1, r3]
  CAN1->FMR |= (uint32_t)(CAN_BankNumber)<<8;
20000be2:	4a0d      	ldr	r2, [pc, #52]	; (20000c18 <CAN_SlaveStartBank+0x6a>)
20000be4:	2380      	movs	r3, #128	; 0x80
20000be6:	009b      	lsls	r3, r3, #2
20000be8:	58d2      	ldr	r2, [r2, r3]
20000bea:	1dfb      	adds	r3, r7, #7
20000bec:	781b      	ldrb	r3, [r3, #0]
20000bee:	021b      	lsls	r3, r3, #8
20000bf0:	4909      	ldr	r1, [pc, #36]	; (20000c18 <CAN_SlaveStartBank+0x6a>)
20000bf2:	431a      	orrs	r2, r3
20000bf4:	2380      	movs	r3, #128	; 0x80
20000bf6:	009b      	lsls	r3, r3, #2
20000bf8:	50ca      	str	r2, [r1, r3]
  
  /* Leave Initialisation mode for the filter */
  CAN1->FMR &= ~FMR_FINIT;
20000bfa:	4a07      	ldr	r2, [pc, #28]	; (20000c18 <CAN_SlaveStartBank+0x6a>)
20000bfc:	2380      	movs	r3, #128	; 0x80
20000bfe:	009b      	lsls	r3, r3, #2
20000c00:	58d3      	ldr	r3, [r2, r3]
20000c02:	4905      	ldr	r1, [pc, #20]	; (20000c18 <CAN_SlaveStartBank+0x6a>)
20000c04:	2201      	movs	r2, #1
20000c06:	4393      	bics	r3, r2
20000c08:	001a      	movs	r2, r3
20000c0a:	2380      	movs	r3, #128	; 0x80
20000c0c:	009b      	lsls	r3, r3, #2
20000c0e:	50ca      	str	r2, [r1, r3]
}
20000c10:	46c0      	nop			; (mov r8, r8)
20000c12:	46bd      	mov	sp, r7
20000c14:	b002      	add	sp, #8
20000c16:	bd80      	pop	{r7, pc}
20000c18:	40006400 	andmi	r6, r0, r0, lsl #8
20000c1c:	ffffc0f1 			; <UNDEFINED> instruction: 0xffffc0f1

20000c20 <CAN_DBGFreeze>:
  *          or DISABLE (CAN is working during debug).
  * @note   CAN3 peripheral is available only for STM32F413_423xx devices
  * @retval None
  */
void CAN_DBGFreeze(CAN_TypeDef* CANx, FunctionalState NewState)
{
20000c20:	b580      	push	{r7, lr}
20000c22:	b082      	sub	sp, #8
20000c24:	af00      	add	r7, sp, #0
20000c26:	6078      	str	r0, [r7, #4]
20000c28:	000a      	movs	r2, r1
20000c2a:	1cfb      	adds	r3, r7, #3
20000c2c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
20000c2e:	1cfb      	adds	r3, r7, #3
20000c30:	781b      	ldrb	r3, [r3, #0]
20000c32:	2b00      	cmp	r3, #0
20000c34:	d007      	beq.n	20000c46 <CAN_DBGFreeze+0x26>
  {
    /* Enable Debug Freeze  */
    CANx->MCR |= MCR_DBF;
20000c36:	687b      	ldr	r3, [r7, #4]
20000c38:	681b      	ldr	r3, [r3, #0]
20000c3a:	2280      	movs	r2, #128	; 0x80
20000c3c:	0252      	lsls	r2, r2, #9
20000c3e:	431a      	orrs	r2, r3
20000c40:	687b      	ldr	r3, [r7, #4]
20000c42:	601a      	str	r2, [r3, #0]
  else
  {
    /* Disable Debug Freeze */
    CANx->MCR &= ~MCR_DBF;
  }
}
20000c44:	e005      	b.n	20000c52 <CAN_DBGFreeze+0x32>
    CANx->MCR &= ~MCR_DBF;
20000c46:	687b      	ldr	r3, [r7, #4]
20000c48:	681b      	ldr	r3, [r3, #0]
20000c4a:	4a04      	ldr	r2, [pc, #16]	; (20000c5c <CAN_DBGFreeze+0x3c>)
20000c4c:	401a      	ands	r2, r3
20000c4e:	687b      	ldr	r3, [r7, #4]
20000c50:	601a      	str	r2, [r3, #0]
}
20000c52:	46c0      	nop			; (mov r8, r8)
20000c54:	46bd      	mov	sp, r7
20000c56:	b002      	add	sp, #8
20000c58:	bd80      	pop	{r7, pc}
20000c5a:	46c0      	nop			; (mov r8, r8)
20000c5c:	fffeffff 			; <UNDEFINED> instruction: 0xfffeffff

20000c60 <CAN_TTComModeCmd>:
  *         in data byte 7.
  * @note   CAN3 peripheral is available only for STM32F413_423xx devices
  * @retval None
  */
void CAN_TTComModeCmd(CAN_TypeDef* CANx, FunctionalState NewState)
{
20000c60:	b580      	push	{r7, lr}
20000c62:	b082      	sub	sp, #8
20000c64:	af00      	add	r7, sp, #0
20000c66:	6078      	str	r0, [r7, #4]
20000c68:	000a      	movs	r2, r1
20000c6a:	1cfb      	adds	r3, r7, #3
20000c6c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
20000c6e:	1cfb      	adds	r3, r7, #3
20000c70:	781b      	ldrb	r3, [r3, #0]
20000c72:	2b00      	cmp	r3, #0
20000c74:	d02a      	beq.n	20000ccc <CAN_TTComModeCmd+0x6c>
  {
    /* Enable the TTCM mode */
    CANx->MCR |= CAN_MCR_TTCM;
20000c76:	687b      	ldr	r3, [r7, #4]
20000c78:	681b      	ldr	r3, [r3, #0]
20000c7a:	2280      	movs	r2, #128	; 0x80
20000c7c:	431a      	orrs	r2, r3
20000c7e:	687b      	ldr	r3, [r7, #4]
20000c80:	601a      	str	r2, [r3, #0]

    /* Set TGT bits */
    CANx->sTxMailBox[0].TDTR |= ((uint32_t)CAN_TDT0R_TGT);
20000c82:	687a      	ldr	r2, [r7, #4]
20000c84:	23c2      	movs	r3, #194	; 0xc2
20000c86:	005b      	lsls	r3, r3, #1
20000c88:	58d3      	ldr	r3, [r2, r3]
20000c8a:	2280      	movs	r2, #128	; 0x80
20000c8c:	0052      	lsls	r2, r2, #1
20000c8e:	431a      	orrs	r2, r3
20000c90:	0011      	movs	r1, r2
20000c92:	687a      	ldr	r2, [r7, #4]
20000c94:	23c2      	movs	r3, #194	; 0xc2
20000c96:	005b      	lsls	r3, r3, #1
20000c98:	50d1      	str	r1, [r2, r3]
    CANx->sTxMailBox[1].TDTR |= ((uint32_t)CAN_TDT1R_TGT);
20000c9a:	687a      	ldr	r2, [r7, #4]
20000c9c:	23ca      	movs	r3, #202	; 0xca
20000c9e:	005b      	lsls	r3, r3, #1
20000ca0:	58d3      	ldr	r3, [r2, r3]
20000ca2:	2280      	movs	r2, #128	; 0x80
20000ca4:	0052      	lsls	r2, r2, #1
20000ca6:	431a      	orrs	r2, r3
20000ca8:	0011      	movs	r1, r2
20000caa:	687a      	ldr	r2, [r7, #4]
20000cac:	23ca      	movs	r3, #202	; 0xca
20000cae:	005b      	lsls	r3, r3, #1
20000cb0:	50d1      	str	r1, [r2, r3]
    CANx->sTxMailBox[2].TDTR |= ((uint32_t)CAN_TDT2R_TGT);
20000cb2:	687a      	ldr	r2, [r7, #4]
20000cb4:	23d2      	movs	r3, #210	; 0xd2
20000cb6:	005b      	lsls	r3, r3, #1
20000cb8:	58d3      	ldr	r3, [r2, r3]
20000cba:	2280      	movs	r2, #128	; 0x80
20000cbc:	0052      	lsls	r2, r2, #1
20000cbe:	431a      	orrs	r2, r3
20000cc0:	0011      	movs	r1, r2
20000cc2:	687a      	ldr	r2, [r7, #4]
20000cc4:	23d2      	movs	r3, #210	; 0xd2
20000cc6:	005b      	lsls	r3, r3, #1
20000cc8:	50d1      	str	r1, [r2, r3]
    /* Reset TGT bits */
    CANx->sTxMailBox[0].TDTR &= ((uint32_t)~CAN_TDT0R_TGT);
    CANx->sTxMailBox[1].TDTR &= ((uint32_t)~CAN_TDT1R_TGT);
    CANx->sTxMailBox[2].TDTR &= ((uint32_t)~CAN_TDT2R_TGT);
  }
}
20000cca:	e027      	b.n	20000d1c <CAN_TTComModeCmd+0xbc>
    CANx->MCR &= (uint32_t)(~(uint32_t)CAN_MCR_TTCM);
20000ccc:	687b      	ldr	r3, [r7, #4]
20000cce:	681b      	ldr	r3, [r3, #0]
20000cd0:	2280      	movs	r2, #128	; 0x80
20000cd2:	4393      	bics	r3, r2
20000cd4:	001a      	movs	r2, r3
20000cd6:	687b      	ldr	r3, [r7, #4]
20000cd8:	601a      	str	r2, [r3, #0]
    CANx->sTxMailBox[0].TDTR &= ((uint32_t)~CAN_TDT0R_TGT);
20000cda:	687a      	ldr	r2, [r7, #4]
20000cdc:	23c2      	movs	r3, #194	; 0xc2
20000cde:	005b      	lsls	r3, r3, #1
20000ce0:	58d3      	ldr	r3, [r2, r3]
20000ce2:	4a10      	ldr	r2, [pc, #64]	; (20000d24 <CAN_TTComModeCmd+0xc4>)
20000ce4:	4013      	ands	r3, r2
20000ce6:	0019      	movs	r1, r3
20000ce8:	687a      	ldr	r2, [r7, #4]
20000cea:	23c2      	movs	r3, #194	; 0xc2
20000cec:	005b      	lsls	r3, r3, #1
20000cee:	50d1      	str	r1, [r2, r3]
    CANx->sTxMailBox[1].TDTR &= ((uint32_t)~CAN_TDT1R_TGT);
20000cf0:	687a      	ldr	r2, [r7, #4]
20000cf2:	23ca      	movs	r3, #202	; 0xca
20000cf4:	005b      	lsls	r3, r3, #1
20000cf6:	58d3      	ldr	r3, [r2, r3]
20000cf8:	4a0a      	ldr	r2, [pc, #40]	; (20000d24 <CAN_TTComModeCmd+0xc4>)
20000cfa:	4013      	ands	r3, r2
20000cfc:	0019      	movs	r1, r3
20000cfe:	687a      	ldr	r2, [r7, #4]
20000d00:	23ca      	movs	r3, #202	; 0xca
20000d02:	005b      	lsls	r3, r3, #1
20000d04:	50d1      	str	r1, [r2, r3]
    CANx->sTxMailBox[2].TDTR &= ((uint32_t)~CAN_TDT2R_TGT);
20000d06:	687a      	ldr	r2, [r7, #4]
20000d08:	23d2      	movs	r3, #210	; 0xd2
20000d0a:	005b      	lsls	r3, r3, #1
20000d0c:	58d3      	ldr	r3, [r2, r3]
20000d0e:	4a05      	ldr	r2, [pc, #20]	; (20000d24 <CAN_TTComModeCmd+0xc4>)
20000d10:	4013      	ands	r3, r2
20000d12:	0019      	movs	r1, r3
20000d14:	687a      	ldr	r2, [r7, #4]
20000d16:	23d2      	movs	r3, #210	; 0xd2
20000d18:	005b      	lsls	r3, r3, #1
20000d1a:	50d1      	str	r1, [r2, r3]
}
20000d1c:	46c0      	nop			; (mov r8, r8)
20000d1e:	46bd      	mov	sp, r7
20000d20:	b002      	add	sp, #8
20000d22:	bd80      	pop	{r7, pc}
20000d24:	fffffeff 			; <UNDEFINED> instruction: 0xfffffeff

20000d28 <CAN_Transmit>:
  * @note   CAN3 peripheral is available only for STM32F413_423xx devices
  * @retval The number of the mailbox that is used for transmission or
  *         CAN_TxStatus_NoMailBox if there is no empty mailbox.
  */
uint8_t CAN_Transmit(CAN_TypeDef* CANx, CanTxMsg* TxMessage)
{
20000d28:	b590      	push	{r4, r7, lr}
20000d2a:	b085      	sub	sp, #20
20000d2c:	af00      	add	r7, sp, #0
20000d2e:	6078      	str	r0, [r7, #4]
20000d30:	6039      	str	r1, [r7, #0]
  uint8_t transmit_mailbox = 0;
20000d32:	230f      	movs	r3, #15
20000d34:	18fb      	adds	r3, r7, r3
20000d36:	2200      	movs	r2, #0
20000d38:	701a      	strb	r2, [r3, #0]
  assert_param(IS_CAN_IDTYPE(TxMessage->IDE));
  assert_param(IS_CAN_RTR(TxMessage->RTR));
  assert_param(IS_CAN_DLC(TxMessage->DLC));

  /* Select one empty transmit mailbox */
  if ((CANx->TSR&CAN_TSR_TME0) == CAN_TSR_TME0)
20000d3a:	687b      	ldr	r3, [r7, #4]
20000d3c:	689a      	ldr	r2, [r3, #8]
20000d3e:	2380      	movs	r3, #128	; 0x80
20000d40:	04db      	lsls	r3, r3, #19
20000d42:	401a      	ands	r2, r3
20000d44:	2380      	movs	r3, #128	; 0x80
20000d46:	04db      	lsls	r3, r3, #19
20000d48:	429a      	cmp	r2, r3
20000d4a:	d104      	bne.n	20000d56 <CAN_Transmit+0x2e>
  {
    transmit_mailbox = 0;
20000d4c:	230f      	movs	r3, #15
20000d4e:	18fb      	adds	r3, r7, r3
20000d50:	2200      	movs	r2, #0
20000d52:	701a      	strb	r2, [r3, #0]
20000d54:	e01f      	b.n	20000d96 <CAN_Transmit+0x6e>
  }
  else if ((CANx->TSR&CAN_TSR_TME1) == CAN_TSR_TME1)
20000d56:	687b      	ldr	r3, [r7, #4]
20000d58:	689a      	ldr	r2, [r3, #8]
20000d5a:	2380      	movs	r3, #128	; 0x80
20000d5c:	051b      	lsls	r3, r3, #20
20000d5e:	401a      	ands	r2, r3
20000d60:	2380      	movs	r3, #128	; 0x80
20000d62:	051b      	lsls	r3, r3, #20
20000d64:	429a      	cmp	r2, r3
20000d66:	d104      	bne.n	20000d72 <CAN_Transmit+0x4a>
  {
    transmit_mailbox = 1;
20000d68:	230f      	movs	r3, #15
20000d6a:	18fb      	adds	r3, r7, r3
20000d6c:	2201      	movs	r2, #1
20000d6e:	701a      	strb	r2, [r3, #0]
20000d70:	e011      	b.n	20000d96 <CAN_Transmit+0x6e>
  }
  else if ((CANx->TSR&CAN_TSR_TME2) == CAN_TSR_TME2)
20000d72:	687b      	ldr	r3, [r7, #4]
20000d74:	689a      	ldr	r2, [r3, #8]
20000d76:	2380      	movs	r3, #128	; 0x80
20000d78:	055b      	lsls	r3, r3, #21
20000d7a:	401a      	ands	r2, r3
20000d7c:	2380      	movs	r3, #128	; 0x80
20000d7e:	055b      	lsls	r3, r3, #21
20000d80:	429a      	cmp	r2, r3
20000d82:	d104      	bne.n	20000d8e <CAN_Transmit+0x66>
  {
    transmit_mailbox = 2;
20000d84:	230f      	movs	r3, #15
20000d86:	18fb      	adds	r3, r7, r3
20000d88:	2202      	movs	r2, #2
20000d8a:	701a      	strb	r2, [r3, #0]
20000d8c:	e003      	b.n	20000d96 <CAN_Transmit+0x6e>
  }
  else
  {
    transmit_mailbox = CAN_TxStatus_NoMailBox;
20000d8e:	230f      	movs	r3, #15
20000d90:	18fb      	adds	r3, r7, r3
20000d92:	2204      	movs	r2, #4
20000d94:	701a      	strb	r2, [r3, #0]
  }

  if (transmit_mailbox != CAN_TxStatus_NoMailBox)
20000d96:	230f      	movs	r3, #15
20000d98:	18fb      	adds	r3, r7, r3
20000d9a:	781b      	ldrb	r3, [r3, #0]
20000d9c:	2b04      	cmp	r3, #4
20000d9e:	d100      	bne.n	20000da2 <CAN_Transmit+0x7a>
20000da0:	e0ac      	b.n	20000efc <CAN_Transmit+0x1d4>
  {
    /* Set up the Id */
    CANx->sTxMailBox[transmit_mailbox].TIR &= TMIDxR_TXRQ;
20000da2:	210f      	movs	r1, #15
20000da4:	187b      	adds	r3, r7, r1
20000da6:	781a      	ldrb	r2, [r3, #0]
20000da8:	687b      	ldr	r3, [r7, #4]
20000daa:	3218      	adds	r2, #24
20000dac:	0112      	lsls	r2, r2, #4
20000dae:	58d3      	ldr	r3, [r2, r3]
20000db0:	187a      	adds	r2, r7, r1
20000db2:	7812      	ldrb	r2, [r2, #0]
20000db4:	2101      	movs	r1, #1
20000db6:	4019      	ands	r1, r3
20000db8:	687b      	ldr	r3, [r7, #4]
20000dba:	3218      	adds	r2, #24
20000dbc:	0112      	lsls	r2, r2, #4
20000dbe:	50d1      	str	r1, [r2, r3]
    if (TxMessage->IDE == CAN_Id_Standard)
20000dc0:	683b      	ldr	r3, [r7, #0]
20000dc2:	7a1b      	ldrb	r3, [r3, #8]
20000dc4:	2b00      	cmp	r3, #0
20000dc6:	d114      	bne.n	20000df2 <CAN_Transmit+0xca>
    {
      assert_param(IS_CAN_STDID(TxMessage->StdId));  
      CANx->sTxMailBox[transmit_mailbox].TIR |= ((TxMessage->StdId << 21) | \
20000dc8:	200f      	movs	r0, #15
20000dca:	183b      	adds	r3, r7, r0
20000dcc:	781a      	ldrb	r2, [r3, #0]
20000dce:	687b      	ldr	r3, [r7, #4]
20000dd0:	3218      	adds	r2, #24
20000dd2:	0112      	lsls	r2, r2, #4
20000dd4:	58d1      	ldr	r1, [r2, r3]
20000dd6:	683b      	ldr	r3, [r7, #0]
20000dd8:	681b      	ldr	r3, [r3, #0]
20000dda:	055b      	lsls	r3, r3, #21
                                                  TxMessage->RTR);
20000ddc:	683a      	ldr	r2, [r7, #0]
20000dde:	7a52      	ldrb	r2, [r2, #9]
      CANx->sTxMailBox[transmit_mailbox].TIR |= ((TxMessage->StdId << 21) | \
20000de0:	4313      	orrs	r3, r2
20000de2:	183a      	adds	r2, r7, r0
20000de4:	7812      	ldrb	r2, [r2, #0]
20000de6:	4319      	orrs	r1, r3
20000de8:	687b      	ldr	r3, [r7, #4]
20000dea:	3218      	adds	r2, #24
20000dec:	0112      	lsls	r2, r2, #4
20000dee:	50d1      	str	r1, [r2, r3]
20000df0:	e016      	b.n	20000e20 <CAN_Transmit+0xf8>
    }
    else
    {
      assert_param(IS_CAN_EXTID(TxMessage->ExtId));
      CANx->sTxMailBox[transmit_mailbox].TIR |= ((TxMessage->ExtId << 3) | \
20000df2:	200f      	movs	r0, #15
20000df4:	183b      	adds	r3, r7, r0
20000df6:	781a      	ldrb	r2, [r3, #0]
20000df8:	687b      	ldr	r3, [r7, #4]
20000dfa:	3218      	adds	r2, #24
20000dfc:	0112      	lsls	r2, r2, #4
20000dfe:	58d1      	ldr	r1, [r2, r3]
20000e00:	683b      	ldr	r3, [r7, #0]
20000e02:	685b      	ldr	r3, [r3, #4]
20000e04:	00db      	lsls	r3, r3, #3
                                                  TxMessage->IDE | \
20000e06:	683a      	ldr	r2, [r7, #0]
20000e08:	7a12      	ldrb	r2, [r2, #8]
      CANx->sTxMailBox[transmit_mailbox].TIR |= ((TxMessage->ExtId << 3) | \
20000e0a:	4313      	orrs	r3, r2
                                                  TxMessage->RTR);
20000e0c:	683a      	ldr	r2, [r7, #0]
20000e0e:	7a52      	ldrb	r2, [r2, #9]
                                                  TxMessage->IDE | \
20000e10:	4313      	orrs	r3, r2
      CANx->sTxMailBox[transmit_mailbox].TIR |= ((TxMessage->ExtId << 3) | \
20000e12:	183a      	adds	r2, r7, r0
20000e14:	7812      	ldrb	r2, [r2, #0]
20000e16:	4319      	orrs	r1, r3
20000e18:	687b      	ldr	r3, [r7, #4]
20000e1a:	3218      	adds	r2, #24
20000e1c:	0112      	lsls	r2, r2, #4
20000e1e:	50d1      	str	r1, [r2, r3]
    }
    
    /* Set up the DLC */
    TxMessage->DLC &= (uint8_t)0x0000000F;
20000e20:	683b      	ldr	r3, [r7, #0]
20000e22:	7a9b      	ldrb	r3, [r3, #10]
20000e24:	220f      	movs	r2, #15
20000e26:	4013      	ands	r3, r2
20000e28:	b2da      	uxtb	r2, r3
20000e2a:	683b      	ldr	r3, [r7, #0]
20000e2c:	729a      	strb	r2, [r3, #10]
    CANx->sTxMailBox[transmit_mailbox].TDTR &= (uint32_t)0xFFFFFFF0;
20000e2e:	240f      	movs	r4, #15
20000e30:	193b      	adds	r3, r7, r4
20000e32:	781b      	ldrb	r3, [r3, #0]
20000e34:	687a      	ldr	r2, [r7, #4]
20000e36:	3318      	adds	r3, #24
20000e38:	011b      	lsls	r3, r3, #4
20000e3a:	18d3      	adds	r3, r2, r3
20000e3c:	3304      	adds	r3, #4
20000e3e:	681a      	ldr	r2, [r3, #0]
20000e40:	193b      	adds	r3, r7, r4
20000e42:	781b      	ldrb	r3, [r3, #0]
20000e44:	210f      	movs	r1, #15
20000e46:	438a      	bics	r2, r1
20000e48:	6879      	ldr	r1, [r7, #4]
20000e4a:	3318      	adds	r3, #24
20000e4c:	011b      	lsls	r3, r3, #4
20000e4e:	18cb      	adds	r3, r1, r3
20000e50:	3304      	adds	r3, #4
20000e52:	601a      	str	r2, [r3, #0]
    CANx->sTxMailBox[transmit_mailbox].TDTR |= TxMessage->DLC;
20000e54:	193b      	adds	r3, r7, r4
20000e56:	781b      	ldrb	r3, [r3, #0]
20000e58:	687a      	ldr	r2, [r7, #4]
20000e5a:	3318      	adds	r3, #24
20000e5c:	011b      	lsls	r3, r3, #4
20000e5e:	18d3      	adds	r3, r2, r3
20000e60:	3304      	adds	r3, #4
20000e62:	681a      	ldr	r2, [r3, #0]
20000e64:	683b      	ldr	r3, [r7, #0]
20000e66:	7a9b      	ldrb	r3, [r3, #10]
20000e68:	0019      	movs	r1, r3
20000e6a:	193b      	adds	r3, r7, r4
20000e6c:	781b      	ldrb	r3, [r3, #0]
20000e6e:	430a      	orrs	r2, r1
20000e70:	6879      	ldr	r1, [r7, #4]
20000e72:	3318      	adds	r3, #24
20000e74:	011b      	lsls	r3, r3, #4
20000e76:	18cb      	adds	r3, r1, r3
20000e78:	3304      	adds	r3, #4
20000e7a:	601a      	str	r2, [r3, #0]

    /* Set up the data field */
    CANx->sTxMailBox[transmit_mailbox].TDLR = (((uint32_t)TxMessage->Data[3] << 24) | 
20000e7c:	683b      	ldr	r3, [r7, #0]
20000e7e:	7b9b      	ldrb	r3, [r3, #14]
20000e80:	061a      	lsls	r2, r3, #24
                                             ((uint32_t)TxMessage->Data[2] << 16) |
20000e82:	683b      	ldr	r3, [r7, #0]
20000e84:	7b5b      	ldrb	r3, [r3, #13]
20000e86:	041b      	lsls	r3, r3, #16
    CANx->sTxMailBox[transmit_mailbox].TDLR = (((uint32_t)TxMessage->Data[3] << 24) | 
20000e88:	431a      	orrs	r2, r3
                                             ((uint32_t)TxMessage->Data[1] << 8) | 
20000e8a:	683b      	ldr	r3, [r7, #0]
20000e8c:	7b1b      	ldrb	r3, [r3, #12]
20000e8e:	021b      	lsls	r3, r3, #8
                                             ((uint32_t)TxMessage->Data[2] << 16) |
20000e90:	4313      	orrs	r3, r2
                                             ((uint32_t)TxMessage->Data[0]));
20000e92:	683a      	ldr	r2, [r7, #0]
20000e94:	7ad2      	ldrb	r2, [r2, #11]
20000e96:	0010      	movs	r0, r2
    CANx->sTxMailBox[transmit_mailbox].TDLR = (((uint32_t)TxMessage->Data[3] << 24) | 
20000e98:	193a      	adds	r2, r7, r4
20000e9a:	7811      	ldrb	r1, [r2, #0]
                                             ((uint32_t)TxMessage->Data[1] << 8) | 
20000e9c:	4303      	orrs	r3, r0
20000e9e:	001a      	movs	r2, r3
    CANx->sTxMailBox[transmit_mailbox].TDLR = (((uint32_t)TxMessage->Data[3] << 24) | 
20000ea0:	6878      	ldr	r0, [r7, #4]
20000ea2:	23c4      	movs	r3, #196	; 0xc4
20000ea4:	005b      	lsls	r3, r3, #1
20000ea6:	0109      	lsls	r1, r1, #4
20000ea8:	1841      	adds	r1, r0, r1
20000eaa:	18cb      	adds	r3, r1, r3
20000eac:	601a      	str	r2, [r3, #0]
    CANx->sTxMailBox[transmit_mailbox].TDHR = (((uint32_t)TxMessage->Data[7] << 24) | 
20000eae:	683b      	ldr	r3, [r7, #0]
20000eb0:	7c9b      	ldrb	r3, [r3, #18]
20000eb2:	061a      	lsls	r2, r3, #24
                                             ((uint32_t)TxMessage->Data[6] << 16) |
20000eb4:	683b      	ldr	r3, [r7, #0]
20000eb6:	7c5b      	ldrb	r3, [r3, #17]
20000eb8:	041b      	lsls	r3, r3, #16
    CANx->sTxMailBox[transmit_mailbox].TDHR = (((uint32_t)TxMessage->Data[7] << 24) | 
20000eba:	431a      	orrs	r2, r3
                                             ((uint32_t)TxMessage->Data[5] << 8) |
20000ebc:	683b      	ldr	r3, [r7, #0]
20000ebe:	7c1b      	ldrb	r3, [r3, #16]
20000ec0:	021b      	lsls	r3, r3, #8
                                             ((uint32_t)TxMessage->Data[6] << 16) |
20000ec2:	4313      	orrs	r3, r2
                                             ((uint32_t)TxMessage->Data[4]));
20000ec4:	683a      	ldr	r2, [r7, #0]
20000ec6:	7bd2      	ldrb	r2, [r2, #15]
20000ec8:	0010      	movs	r0, r2
    CANx->sTxMailBox[transmit_mailbox].TDHR = (((uint32_t)TxMessage->Data[7] << 24) | 
20000eca:	193a      	adds	r2, r7, r4
20000ecc:	7811      	ldrb	r1, [r2, #0]
                                             ((uint32_t)TxMessage->Data[5] << 8) |
20000ece:	4303      	orrs	r3, r0
20000ed0:	001a      	movs	r2, r3
    CANx->sTxMailBox[transmit_mailbox].TDHR = (((uint32_t)TxMessage->Data[7] << 24) | 
20000ed2:	6878      	ldr	r0, [r7, #4]
20000ed4:	23c6      	movs	r3, #198	; 0xc6
20000ed6:	005b      	lsls	r3, r3, #1
20000ed8:	0109      	lsls	r1, r1, #4
20000eda:	1841      	adds	r1, r0, r1
20000edc:	18cb      	adds	r3, r1, r3
20000ede:	601a      	str	r2, [r3, #0]
    /* Request transmission */
    CANx->sTxMailBox[transmit_mailbox].TIR |= TMIDxR_TXRQ;
20000ee0:	193b      	adds	r3, r7, r4
20000ee2:	781a      	ldrb	r2, [r3, #0]
20000ee4:	687b      	ldr	r3, [r7, #4]
20000ee6:	3218      	adds	r2, #24
20000ee8:	0112      	lsls	r2, r2, #4
20000eea:	58d3      	ldr	r3, [r2, r3]
20000eec:	193a      	adds	r2, r7, r4
20000eee:	7812      	ldrb	r2, [r2, #0]
20000ef0:	2101      	movs	r1, #1
20000ef2:	4319      	orrs	r1, r3
20000ef4:	687b      	ldr	r3, [r7, #4]
20000ef6:	3218      	adds	r2, #24
20000ef8:	0112      	lsls	r2, r2, #4
20000efa:	50d1      	str	r1, [r2, r3]
  }
  return transmit_mailbox;
20000efc:	230f      	movs	r3, #15
20000efe:	18fb      	adds	r3, r7, r3
20000f00:	781b      	ldrb	r3, [r3, #0]
}
20000f02:	0018      	movs	r0, r3
20000f04:	46bd      	mov	sp, r7
20000f06:	b005      	add	sp, #20
20000f08:	bd90      	pop	{r4, r7, pc}

20000f0a <CAN_TransmitStatus>:
  * @note   CAN3 peripheral is available only for STM32F413_423xx devices
  * @retval CAN_TxStatus_Ok if the CAN driver transmits the message, 
  *         CAN_TxStatus_Failed in an other case.
  */
uint8_t CAN_TransmitStatus(CAN_TypeDef* CANx, uint8_t TransmitMailbox)
{
20000f0a:	b580      	push	{r7, lr}
20000f0c:	b084      	sub	sp, #16
20000f0e:	af00      	add	r7, sp, #0
20000f10:	6078      	str	r0, [r7, #4]
20000f12:	000a      	movs	r2, r1
20000f14:	1cfb      	adds	r3, r7, #3
20000f16:	701a      	strb	r2, [r3, #0]
  uint32_t state = 0;
20000f18:	2300      	movs	r3, #0
20000f1a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_TRANSMITMAILBOX(TransmitMailbox));
 
  switch (TransmitMailbox)
20000f1c:	1cfb      	adds	r3, r7, #3
20000f1e:	781b      	ldrb	r3, [r3, #0]
20000f20:	2b01      	cmp	r3, #1
20000f22:	d009      	beq.n	20000f38 <CAN_TransmitStatus+0x2e>
20000f24:	2b02      	cmp	r3, #2
20000f26:	d00d      	beq.n	20000f44 <CAN_TransmitStatus+0x3a>
20000f28:	2b00      	cmp	r3, #0
20000f2a:	d111      	bne.n	20000f50 <CAN_TransmitStatus+0x46>
  {
    case (CAN_TXMAILBOX_0): 
      state =   CANx->TSR &  (CAN_TSR_RQCP0 | CAN_TSR_TXOK0 | CAN_TSR_TME0);
20000f2c:	687b      	ldr	r3, [r7, #4]
20000f2e:	689b      	ldr	r3, [r3, #8]
20000f30:	4a25      	ldr	r2, [pc, #148]	; (20000fc8 <CAN_TransmitStatus+0xbe>)
20000f32:	4013      	ands	r3, r2
20000f34:	60fb      	str	r3, [r7, #12]
      break;
20000f36:	e00e      	b.n	20000f56 <CAN_TransmitStatus+0x4c>
    case (CAN_TXMAILBOX_1): 
      state =   CANx->TSR &  (CAN_TSR_RQCP1 | CAN_TSR_TXOK1 | CAN_TSR_TME1);
20000f38:	687b      	ldr	r3, [r7, #4]
20000f3a:	689b      	ldr	r3, [r3, #8]
20000f3c:	4a23      	ldr	r2, [pc, #140]	; (20000fcc <CAN_TransmitStatus+0xc2>)
20000f3e:	4013      	ands	r3, r2
20000f40:	60fb      	str	r3, [r7, #12]
      break;
20000f42:	e008      	b.n	20000f56 <CAN_TransmitStatus+0x4c>
    case (CAN_TXMAILBOX_2): 
      state =   CANx->TSR &  (CAN_TSR_RQCP2 | CAN_TSR_TXOK2 | CAN_TSR_TME2);
20000f44:	687b      	ldr	r3, [r7, #4]
20000f46:	689b      	ldr	r3, [r3, #8]
20000f48:	4a21      	ldr	r2, [pc, #132]	; (20000fd0 <CAN_TransmitStatus+0xc6>)
20000f4a:	4013      	ands	r3, r2
20000f4c:	60fb      	str	r3, [r7, #12]
      break;
20000f4e:	e002      	b.n	20000f56 <CAN_TransmitStatus+0x4c>
    default:
      state = CAN_TxStatus_Failed;
20000f50:	2300      	movs	r3, #0
20000f52:	60fb      	str	r3, [r7, #12]
      break;
20000f54:	46c0      	nop			; (mov r8, r8)
  }
  switch (state)
20000f56:	68fb      	ldr	r3, [r7, #12]
20000f58:	4a1e      	ldr	r2, [pc, #120]	; (20000fd4 <CAN_TransmitStatus+0xca>)
20000f5a:	4293      	cmp	r3, r2
20000f5c:	d01b      	beq.n	20000f96 <CAN_TransmitStatus+0x8c>
20000f5e:	4a1d      	ldr	r2, [pc, #116]	; (20000fd4 <CAN_TransmitStatus+0xca>)
20000f60:	4293      	cmp	r3, r2
20000f62:	d808      	bhi.n	20000f76 <CAN_TransmitStatus+0x6c>
20000f64:	4a1c      	ldr	r2, [pc, #112]	; (20000fd8 <CAN_TransmitStatus+0xce>)
20000f66:	4293      	cmp	r3, r2
20000f68:	d012      	beq.n	20000f90 <CAN_TransmitStatus+0x86>
20000f6a:	4a17      	ldr	r2, [pc, #92]	; (20000fc8 <CAN_TransmitStatus+0xbe>)
20000f6c:	4293      	cmp	r3, r2
20000f6e:	d018      	beq.n	20000fa2 <CAN_TransmitStatus+0x98>
20000f70:	2b00      	cmp	r3, #0
20000f72:	d00a      	beq.n	20000f8a <CAN_TransmitStatus+0x80>
20000f74:	e01e      	b.n	20000fb4 <CAN_TransmitStatus+0xaa>
20000f76:	4a19      	ldr	r2, [pc, #100]	; (20000fdc <CAN_TransmitStatus+0xd2>)
20000f78:	4293      	cmp	r3, r2
20000f7a:	d00f      	beq.n	20000f9c <CAN_TransmitStatus+0x92>
20000f7c:	4a14      	ldr	r2, [pc, #80]	; (20000fd0 <CAN_TransmitStatus+0xc6>)
20000f7e:	4293      	cmp	r3, r2
20000f80:	d015      	beq.n	20000fae <CAN_TransmitStatus+0xa4>
20000f82:	4a12      	ldr	r2, [pc, #72]	; (20000fcc <CAN_TransmitStatus+0xc2>)
20000f84:	4293      	cmp	r3, r2
20000f86:	d00f      	beq.n	20000fa8 <CAN_TransmitStatus+0x9e>
20000f88:	e014      	b.n	20000fb4 <CAN_TransmitStatus+0xaa>
  {
      /* transmit pending  */
    case (0x0): state = CAN_TxStatus_Pending;
20000f8a:	2302      	movs	r3, #2
20000f8c:	60fb      	str	r3, [r7, #12]
      break;
20000f8e:	e014      	b.n	20000fba <CAN_TransmitStatus+0xb0>
      /* transmit failed  */
     case (CAN_TSR_RQCP0 | CAN_TSR_TME0): state = CAN_TxStatus_Failed;
20000f90:	2300      	movs	r3, #0
20000f92:	60fb      	str	r3, [r7, #12]
      break;
20000f94:	e011      	b.n	20000fba <CAN_TransmitStatus+0xb0>
     case (CAN_TSR_RQCP1 | CAN_TSR_TME1): state = CAN_TxStatus_Failed;
20000f96:	2300      	movs	r3, #0
20000f98:	60fb      	str	r3, [r7, #12]
      break;
20000f9a:	e00e      	b.n	20000fba <CAN_TransmitStatus+0xb0>
     case (CAN_TSR_RQCP2 | CAN_TSR_TME2): state = CAN_TxStatus_Failed;
20000f9c:	2300      	movs	r3, #0
20000f9e:	60fb      	str	r3, [r7, #12]
      break;
20000fa0:	e00b      	b.n	20000fba <CAN_TransmitStatus+0xb0>
      /* transmit succeeded  */
    case (CAN_TSR_RQCP0 | CAN_TSR_TXOK0 | CAN_TSR_TME0):state = CAN_TxStatus_Ok;
20000fa2:	2301      	movs	r3, #1
20000fa4:	60fb      	str	r3, [r7, #12]
      break;
20000fa6:	e008      	b.n	20000fba <CAN_TransmitStatus+0xb0>
    case (CAN_TSR_RQCP1 | CAN_TSR_TXOK1 | CAN_TSR_TME1):state = CAN_TxStatus_Ok;
20000fa8:	2301      	movs	r3, #1
20000faa:	60fb      	str	r3, [r7, #12]
      break;
20000fac:	e005      	b.n	20000fba <CAN_TransmitStatus+0xb0>
    case (CAN_TSR_RQCP2 | CAN_TSR_TXOK2 | CAN_TSR_TME2):state = CAN_TxStatus_Ok;
20000fae:	2301      	movs	r3, #1
20000fb0:	60fb      	str	r3, [r7, #12]
      break;
20000fb2:	e002      	b.n	20000fba <CAN_TransmitStatus+0xb0>
    default: state = CAN_TxStatus_Failed;
20000fb4:	2300      	movs	r3, #0
20000fb6:	60fb      	str	r3, [r7, #12]
      break;
20000fb8:	46c0      	nop			; (mov r8, r8)
  }
  return (uint8_t) state;
20000fba:	68fb      	ldr	r3, [r7, #12]
20000fbc:	b2db      	uxtb	r3, r3
}
20000fbe:	0018      	movs	r0, r3
20000fc0:	46bd      	mov	sp, r7
20000fc2:	b004      	add	sp, #16
20000fc4:	bd80      	pop	{r7, pc}
20000fc6:	46c0      	nop			; (mov r8, r8)
20000fc8:	04000003 	streq	r0, [r0], #-3
20000fcc:	08000300 	stmdaeq	r0, {r8, r9}
20000fd0:	10030000 	andne	r0, r3, r0
20000fd4:	08000100 	stmdaeq	r0, {r8}
20000fd8:	04000001 	streq	r0, [r0], #-1
20000fdc:	10010000 	andne	r0, r1, r0

20000fe0 <CAN_CancelTransmit>:
  * @param  Mailbox: Mailbox number.
  * @note   CAN3 peripheral is available only for STM32F413_423xx devices
  * @retval None
  */
void CAN_CancelTransmit(CAN_TypeDef* CANx, uint8_t Mailbox)
{
20000fe0:	b580      	push	{r7, lr}
20000fe2:	b082      	sub	sp, #8
20000fe4:	af00      	add	r7, sp, #0
20000fe6:	6078      	str	r0, [r7, #4]
20000fe8:	000a      	movs	r2, r1
20000fea:	1cfb      	adds	r3, r7, #3
20000fec:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_TRANSMITMAILBOX(Mailbox));
  /* abort transmission */
  switch (Mailbox)
20000fee:	1cfb      	adds	r3, r7, #3
20000ff0:	781b      	ldrb	r3, [r3, #0]
20000ff2:	2b01      	cmp	r3, #1
20000ff4:	d00b      	beq.n	2000100e <CAN_CancelTransmit+0x2e>
20000ff6:	2b02      	cmp	r3, #2
20000ff8:	d011      	beq.n	2000101e <CAN_CancelTransmit+0x3e>
20000ffa:	2b00      	cmp	r3, #0
20000ffc:	d000      	beq.n	20001000 <CAN_CancelTransmit+0x20>
    case (CAN_TXMAILBOX_1): CANx->TSR |= CAN_TSR_ABRQ1;
      break;
    case (CAN_TXMAILBOX_2): CANx->TSR |= CAN_TSR_ABRQ2;
      break;
    default:
      break;
20000ffe:	e016      	b.n	2000102e <CAN_CancelTransmit+0x4e>
    case (CAN_TXMAILBOX_0): CANx->TSR |= CAN_TSR_ABRQ0;
20001000:	687b      	ldr	r3, [r7, #4]
20001002:	689b      	ldr	r3, [r3, #8]
20001004:	2280      	movs	r2, #128	; 0x80
20001006:	431a      	orrs	r2, r3
20001008:	687b      	ldr	r3, [r7, #4]
2000100a:	609a      	str	r2, [r3, #8]
      break;
2000100c:	e00f      	b.n	2000102e <CAN_CancelTransmit+0x4e>
    case (CAN_TXMAILBOX_1): CANx->TSR |= CAN_TSR_ABRQ1;
2000100e:	687b      	ldr	r3, [r7, #4]
20001010:	689b      	ldr	r3, [r3, #8]
20001012:	2280      	movs	r2, #128	; 0x80
20001014:	0212      	lsls	r2, r2, #8
20001016:	431a      	orrs	r2, r3
20001018:	687b      	ldr	r3, [r7, #4]
2000101a:	609a      	str	r2, [r3, #8]
      break;
2000101c:	e007      	b.n	2000102e <CAN_CancelTransmit+0x4e>
    case (CAN_TXMAILBOX_2): CANx->TSR |= CAN_TSR_ABRQ2;
2000101e:	687b      	ldr	r3, [r7, #4]
20001020:	689b      	ldr	r3, [r3, #8]
20001022:	2280      	movs	r2, #128	; 0x80
20001024:	0412      	lsls	r2, r2, #16
20001026:	431a      	orrs	r2, r3
20001028:	687b      	ldr	r3, [r7, #4]
2000102a:	609a      	str	r2, [r3, #8]
      break;
2000102c:	46c0      	nop			; (mov r8, r8)
  }
}
2000102e:	46c0      	nop			; (mov r8, r8)
20001030:	46bd      	mov	sp, r7
20001032:	b002      	add	sp, #8
20001034:	bd80      	pop	{r7, pc}

20001036 <CAN_Receive>:
  *         CAN DLC, CAN data and FMI number.
  * @note   CAN3 peripheral is available only for STM32F413_423xx devices
  * @retval None
  */
void CAN_Receive(CAN_TypeDef* CANx, uint8_t FIFONumber, CanRxMsg* RxMessage)
{
20001036:	b580      	push	{r7, lr}
20001038:	b084      	sub	sp, #16
2000103a:	af00      	add	r7, sp, #0
2000103c:	60f8      	str	r0, [r7, #12]
2000103e:	607a      	str	r2, [r7, #4]
20001040:	200b      	movs	r0, #11
20001042:	183b      	adds	r3, r7, r0
20001044:	1c0a      	adds	r2, r1, #0
20001046:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_FIFO(FIFONumber));
  /* Get the Id */
  RxMessage->IDE = (uint8_t)0x04 & CANx->sFIFOMailBox[FIFONumber].RIR;
20001048:	183b      	adds	r3, r7, r0
2000104a:	781a      	ldrb	r2, [r3, #0]
2000104c:	68fb      	ldr	r3, [r7, #12]
2000104e:	321b      	adds	r2, #27
20001050:	0112      	lsls	r2, r2, #4
20001052:	58d3      	ldr	r3, [r2, r3]
20001054:	b2db      	uxtb	r3, r3
20001056:	2204      	movs	r2, #4
20001058:	4013      	ands	r3, r2
2000105a:	b2da      	uxtb	r2, r3
2000105c:	687b      	ldr	r3, [r7, #4]
2000105e:	721a      	strb	r2, [r3, #8]
  if (RxMessage->IDE == CAN_Id_Standard)
20001060:	687b      	ldr	r3, [r7, #4]
20001062:	7a1b      	ldrb	r3, [r3, #8]
20001064:	2b00      	cmp	r3, #0
20001066:	d10c      	bne.n	20001082 <CAN_Receive+0x4c>
  {
    RxMessage->StdId = (uint32_t)0x000007FF & (CANx->sFIFOMailBox[FIFONumber].RIR >> 21);
20001068:	230b      	movs	r3, #11
2000106a:	18fb      	adds	r3, r7, r3
2000106c:	781a      	ldrb	r2, [r3, #0]
2000106e:	68fb      	ldr	r3, [r7, #12]
20001070:	321b      	adds	r2, #27
20001072:	0112      	lsls	r2, r2, #4
20001074:	58d3      	ldr	r3, [r2, r3]
20001076:	0d5b      	lsrs	r3, r3, #21
20001078:	055b      	lsls	r3, r3, #21
2000107a:	0d5a      	lsrs	r2, r3, #21
2000107c:	687b      	ldr	r3, [r7, #4]
2000107e:	601a      	str	r2, [r3, #0]
20001080:	e00b      	b.n	2000109a <CAN_Receive+0x64>
  }
  else
  {
    RxMessage->ExtId = (uint32_t)0x1FFFFFFF & (CANx->sFIFOMailBox[FIFONumber].RIR >> 3);
20001082:	230b      	movs	r3, #11
20001084:	18fb      	adds	r3, r7, r3
20001086:	781a      	ldrb	r2, [r3, #0]
20001088:	68fb      	ldr	r3, [r7, #12]
2000108a:	321b      	adds	r2, #27
2000108c:	0112      	lsls	r2, r2, #4
2000108e:	58d3      	ldr	r3, [r2, r3]
20001090:	08db      	lsrs	r3, r3, #3
20001092:	00db      	lsls	r3, r3, #3
20001094:	08da      	lsrs	r2, r3, #3
20001096:	687b      	ldr	r3, [r7, #4]
20001098:	605a      	str	r2, [r3, #4]
  }
  
  RxMessage->RTR = (uint8_t)0x02 & CANx->sFIFOMailBox[FIFONumber].RIR;
2000109a:	210b      	movs	r1, #11
2000109c:	187b      	adds	r3, r7, r1
2000109e:	781a      	ldrb	r2, [r3, #0]
200010a0:	68fb      	ldr	r3, [r7, #12]
200010a2:	321b      	adds	r2, #27
200010a4:	0112      	lsls	r2, r2, #4
200010a6:	58d3      	ldr	r3, [r2, r3]
200010a8:	b2db      	uxtb	r3, r3
200010aa:	2202      	movs	r2, #2
200010ac:	4013      	ands	r3, r2
200010ae:	b2da      	uxtb	r2, r3
200010b0:	687b      	ldr	r3, [r7, #4]
200010b2:	725a      	strb	r2, [r3, #9]
  /* Get the DLC */
  RxMessage->DLC = (uint8_t)0x0F & CANx->sFIFOMailBox[FIFONumber].RDTR;
200010b4:	187b      	adds	r3, r7, r1
200010b6:	781b      	ldrb	r3, [r3, #0]
200010b8:	68fa      	ldr	r2, [r7, #12]
200010ba:	331b      	adds	r3, #27
200010bc:	011b      	lsls	r3, r3, #4
200010be:	18d3      	adds	r3, r2, r3
200010c0:	3304      	adds	r3, #4
200010c2:	681b      	ldr	r3, [r3, #0]
200010c4:	b2db      	uxtb	r3, r3
200010c6:	220f      	movs	r2, #15
200010c8:	4013      	ands	r3, r2
200010ca:	b2da      	uxtb	r2, r3
200010cc:	687b      	ldr	r3, [r7, #4]
200010ce:	729a      	strb	r2, [r3, #10]
  /* Get the FMI */
  RxMessage->FMI = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDTR >> 8);
200010d0:	0008      	movs	r0, r1
200010d2:	183b      	adds	r3, r7, r0
200010d4:	781b      	ldrb	r3, [r3, #0]
200010d6:	68fa      	ldr	r2, [r7, #12]
200010d8:	331b      	adds	r3, #27
200010da:	011b      	lsls	r3, r3, #4
200010dc:	18d3      	adds	r3, r2, r3
200010de:	3304      	adds	r3, #4
200010e0:	681b      	ldr	r3, [r3, #0]
200010e2:	0a1b      	lsrs	r3, r3, #8
200010e4:	b2da      	uxtb	r2, r3
200010e6:	687b      	ldr	r3, [r7, #4]
200010e8:	74da      	strb	r2, [r3, #19]
  /* Get the data field */
  RxMessage->Data[0] = (uint8_t)0xFF & CANx->sFIFOMailBox[FIFONumber].RDLR;
200010ea:	183b      	adds	r3, r7, r0
200010ec:	781a      	ldrb	r2, [r3, #0]
200010ee:	68f9      	ldr	r1, [r7, #12]
200010f0:	23dc      	movs	r3, #220	; 0xdc
200010f2:	005b      	lsls	r3, r3, #1
200010f4:	0112      	lsls	r2, r2, #4
200010f6:	188a      	adds	r2, r1, r2
200010f8:	18d3      	adds	r3, r2, r3
200010fa:	681b      	ldr	r3, [r3, #0]
200010fc:	b2da      	uxtb	r2, r3
200010fe:	687b      	ldr	r3, [r7, #4]
20001100:	72da      	strb	r2, [r3, #11]
  RxMessage->Data[1] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDLR >> 8);
20001102:	183b      	adds	r3, r7, r0
20001104:	781a      	ldrb	r2, [r3, #0]
20001106:	68f9      	ldr	r1, [r7, #12]
20001108:	23dc      	movs	r3, #220	; 0xdc
2000110a:	005b      	lsls	r3, r3, #1
2000110c:	0112      	lsls	r2, r2, #4
2000110e:	188a      	adds	r2, r1, r2
20001110:	18d3      	adds	r3, r2, r3
20001112:	681b      	ldr	r3, [r3, #0]
20001114:	0a1b      	lsrs	r3, r3, #8
20001116:	b2da      	uxtb	r2, r3
20001118:	687b      	ldr	r3, [r7, #4]
2000111a:	731a      	strb	r2, [r3, #12]
  RxMessage->Data[2] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDLR >> 16);
2000111c:	183b      	adds	r3, r7, r0
2000111e:	781a      	ldrb	r2, [r3, #0]
20001120:	68f9      	ldr	r1, [r7, #12]
20001122:	23dc      	movs	r3, #220	; 0xdc
20001124:	005b      	lsls	r3, r3, #1
20001126:	0112      	lsls	r2, r2, #4
20001128:	188a      	adds	r2, r1, r2
2000112a:	18d3      	adds	r3, r2, r3
2000112c:	681b      	ldr	r3, [r3, #0]
2000112e:	0c1b      	lsrs	r3, r3, #16
20001130:	b2da      	uxtb	r2, r3
20001132:	687b      	ldr	r3, [r7, #4]
20001134:	735a      	strb	r2, [r3, #13]
  RxMessage->Data[3] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDLR >> 24);
20001136:	183b      	adds	r3, r7, r0
20001138:	781a      	ldrb	r2, [r3, #0]
2000113a:	68f9      	ldr	r1, [r7, #12]
2000113c:	23dc      	movs	r3, #220	; 0xdc
2000113e:	005b      	lsls	r3, r3, #1
20001140:	0112      	lsls	r2, r2, #4
20001142:	188a      	adds	r2, r1, r2
20001144:	18d3      	adds	r3, r2, r3
20001146:	681b      	ldr	r3, [r3, #0]
20001148:	0e1b      	lsrs	r3, r3, #24
2000114a:	b2da      	uxtb	r2, r3
2000114c:	687b      	ldr	r3, [r7, #4]
2000114e:	739a      	strb	r2, [r3, #14]
  RxMessage->Data[4] = (uint8_t)0xFF & CANx->sFIFOMailBox[FIFONumber].RDHR;
20001150:	183b      	adds	r3, r7, r0
20001152:	781a      	ldrb	r2, [r3, #0]
20001154:	68f9      	ldr	r1, [r7, #12]
20001156:	23de      	movs	r3, #222	; 0xde
20001158:	005b      	lsls	r3, r3, #1
2000115a:	0112      	lsls	r2, r2, #4
2000115c:	188a      	adds	r2, r1, r2
2000115e:	18d3      	adds	r3, r2, r3
20001160:	681b      	ldr	r3, [r3, #0]
20001162:	b2da      	uxtb	r2, r3
20001164:	687b      	ldr	r3, [r7, #4]
20001166:	73da      	strb	r2, [r3, #15]
  RxMessage->Data[5] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDHR >> 8);
20001168:	183b      	adds	r3, r7, r0
2000116a:	781a      	ldrb	r2, [r3, #0]
2000116c:	68f9      	ldr	r1, [r7, #12]
2000116e:	23de      	movs	r3, #222	; 0xde
20001170:	005b      	lsls	r3, r3, #1
20001172:	0112      	lsls	r2, r2, #4
20001174:	188a      	adds	r2, r1, r2
20001176:	18d3      	adds	r3, r2, r3
20001178:	681b      	ldr	r3, [r3, #0]
2000117a:	0a1b      	lsrs	r3, r3, #8
2000117c:	b2da      	uxtb	r2, r3
2000117e:	687b      	ldr	r3, [r7, #4]
20001180:	741a      	strb	r2, [r3, #16]
  RxMessage->Data[6] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDHR >> 16);
20001182:	183b      	adds	r3, r7, r0
20001184:	781a      	ldrb	r2, [r3, #0]
20001186:	68f9      	ldr	r1, [r7, #12]
20001188:	23de      	movs	r3, #222	; 0xde
2000118a:	005b      	lsls	r3, r3, #1
2000118c:	0112      	lsls	r2, r2, #4
2000118e:	188a      	adds	r2, r1, r2
20001190:	18d3      	adds	r3, r2, r3
20001192:	681b      	ldr	r3, [r3, #0]
20001194:	0c1b      	lsrs	r3, r3, #16
20001196:	b2da      	uxtb	r2, r3
20001198:	687b      	ldr	r3, [r7, #4]
2000119a:	745a      	strb	r2, [r3, #17]
  RxMessage->Data[7] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDHR >> 24);
2000119c:	183b      	adds	r3, r7, r0
2000119e:	781a      	ldrb	r2, [r3, #0]
200011a0:	68f9      	ldr	r1, [r7, #12]
200011a2:	23de      	movs	r3, #222	; 0xde
200011a4:	005b      	lsls	r3, r3, #1
200011a6:	0112      	lsls	r2, r2, #4
200011a8:	188a      	adds	r2, r1, r2
200011aa:	18d3      	adds	r3, r2, r3
200011ac:	681b      	ldr	r3, [r3, #0]
200011ae:	0e1b      	lsrs	r3, r3, #24
200011b0:	b2da      	uxtb	r2, r3
200011b2:	687b      	ldr	r3, [r7, #4]
200011b4:	749a      	strb	r2, [r3, #18]
  /* Release the FIFO */
  /* Release FIFO0 */
  if (FIFONumber == CAN_FIFO0)
200011b6:	183b      	adds	r3, r7, r0
200011b8:	781b      	ldrb	r3, [r3, #0]
200011ba:	2b00      	cmp	r3, #0
200011bc:	d106      	bne.n	200011cc <CAN_Receive+0x196>
  {
    CANx->RF0R |= CAN_RF0R_RFOM0;
200011be:	68fb      	ldr	r3, [r7, #12]
200011c0:	68db      	ldr	r3, [r3, #12]
200011c2:	2220      	movs	r2, #32
200011c4:	431a      	orrs	r2, r3
200011c6:	68fb      	ldr	r3, [r7, #12]
200011c8:	60da      	str	r2, [r3, #12]
  /* Release FIFO1 */
  else /* FIFONumber == CAN_FIFO1 */
  {
    CANx->RF1R |= CAN_RF1R_RFOM1;
  }
}
200011ca:	e005      	b.n	200011d8 <CAN_Receive+0x1a2>
    CANx->RF1R |= CAN_RF1R_RFOM1;
200011cc:	68fb      	ldr	r3, [r7, #12]
200011ce:	691b      	ldr	r3, [r3, #16]
200011d0:	2220      	movs	r2, #32
200011d2:	431a      	orrs	r2, r3
200011d4:	68fb      	ldr	r3, [r7, #12]
200011d6:	611a      	str	r2, [r3, #16]
}
200011d8:	46c0      	nop			; (mov r8, r8)
200011da:	46bd      	mov	sp, r7
200011dc:	b004      	add	sp, #16
200011de:	bd80      	pop	{r7, pc}

200011e0 <CAN_FIFORelease>:
  * @param  FIFONumber: FIFO to release, CAN_FIFO0 or CAN_FIFO1.
  * @note   CAN3 peripheral is available only for STM32F413_423xx devices
  * @retval None
  */
void CAN_FIFORelease(CAN_TypeDef* CANx, uint8_t FIFONumber)
{
200011e0:	b580      	push	{r7, lr}
200011e2:	b082      	sub	sp, #8
200011e4:	af00      	add	r7, sp, #0
200011e6:	6078      	str	r0, [r7, #4]
200011e8:	000a      	movs	r2, r1
200011ea:	1cfb      	adds	r3, r7, #3
200011ec:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_FIFO(FIFONumber));
  /* Release FIFO0 */
  if (FIFONumber == CAN_FIFO0)
200011ee:	1cfb      	adds	r3, r7, #3
200011f0:	781b      	ldrb	r3, [r3, #0]
200011f2:	2b00      	cmp	r3, #0
200011f4:	d106      	bne.n	20001204 <CAN_FIFORelease+0x24>
  {
    CANx->RF0R |= CAN_RF0R_RFOM0;
200011f6:	687b      	ldr	r3, [r7, #4]
200011f8:	68db      	ldr	r3, [r3, #12]
200011fa:	2220      	movs	r2, #32
200011fc:	431a      	orrs	r2, r3
200011fe:	687b      	ldr	r3, [r7, #4]
20001200:	60da      	str	r2, [r3, #12]
  /* Release FIFO1 */
  else /* FIFONumber == CAN_FIFO1 */
  {
    CANx->RF1R |= CAN_RF1R_RFOM1;
  }
}
20001202:	e005      	b.n	20001210 <CAN_FIFORelease+0x30>
    CANx->RF1R |= CAN_RF1R_RFOM1;
20001204:	687b      	ldr	r3, [r7, #4]
20001206:	691b      	ldr	r3, [r3, #16]
20001208:	2220      	movs	r2, #32
2000120a:	431a      	orrs	r2, r3
2000120c:	687b      	ldr	r3, [r7, #4]
2000120e:	611a      	str	r2, [r3, #16]
}
20001210:	46c0      	nop			; (mov r8, r8)
20001212:	46bd      	mov	sp, r7
20001214:	b002      	add	sp, #8
20001216:	bd80      	pop	{r7, pc}

20001218 <CAN_MessagePending>:
  * @param  FIFONumber: Receive FIFO number, CAN_FIFO0 or CAN_FIFO1.
  * @note   CAN3 peripheral is available only for STM32F413_423xx devices
  * @retval NbMessage : which is the number of pending message.
  */
uint8_t CAN_MessagePending(CAN_TypeDef* CANx, uint8_t FIFONumber)
{
20001218:	b580      	push	{r7, lr}
2000121a:	b084      	sub	sp, #16
2000121c:	af00      	add	r7, sp, #0
2000121e:	6078      	str	r0, [r7, #4]
20001220:	000a      	movs	r2, r1
20001222:	1cfb      	adds	r3, r7, #3
20001224:	701a      	strb	r2, [r3, #0]
  uint8_t message_pending=0;
20001226:	230f      	movs	r3, #15
20001228:	18fb      	adds	r3, r7, r3
2000122a:	2200      	movs	r2, #0
2000122c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_FIFO(FIFONumber));
  if (FIFONumber == CAN_FIFO0)
2000122e:	1cfb      	adds	r3, r7, #3
20001230:	781b      	ldrb	r3, [r3, #0]
20001232:	2b00      	cmp	r3, #0
20001234:	d108      	bne.n	20001248 <CAN_MessagePending+0x30>
  {
    message_pending = (uint8_t)(CANx->RF0R&(uint32_t)0x03);
20001236:	687b      	ldr	r3, [r7, #4]
20001238:	68db      	ldr	r3, [r3, #12]
2000123a:	b2da      	uxtb	r2, r3
2000123c:	230f      	movs	r3, #15
2000123e:	18fb      	adds	r3, r7, r3
20001240:	2103      	movs	r1, #3
20001242:	400a      	ands	r2, r1
20001244:	701a      	strb	r2, [r3, #0]
20001246:	e010      	b.n	2000126a <CAN_MessagePending+0x52>
  }
  else if (FIFONumber == CAN_FIFO1)
20001248:	1cfb      	adds	r3, r7, #3
2000124a:	781b      	ldrb	r3, [r3, #0]
2000124c:	2b01      	cmp	r3, #1
2000124e:	d108      	bne.n	20001262 <CAN_MessagePending+0x4a>
  {
    message_pending = (uint8_t)(CANx->RF1R&(uint32_t)0x03);
20001250:	687b      	ldr	r3, [r7, #4]
20001252:	691b      	ldr	r3, [r3, #16]
20001254:	b2da      	uxtb	r2, r3
20001256:	230f      	movs	r3, #15
20001258:	18fb      	adds	r3, r7, r3
2000125a:	2103      	movs	r1, #3
2000125c:	400a      	ands	r2, r1
2000125e:	701a      	strb	r2, [r3, #0]
20001260:	e003      	b.n	2000126a <CAN_MessagePending+0x52>
  }
  else
  {
    message_pending = 0;
20001262:	230f      	movs	r3, #15
20001264:	18fb      	adds	r3, r7, r3
20001266:	2200      	movs	r2, #0
20001268:	701a      	strb	r2, [r3, #0]
  }
  return message_pending;
2000126a:	230f      	movs	r3, #15
2000126c:	18fb      	adds	r3, r7, r3
2000126e:	781b      	ldrb	r3, [r3, #0]
}
20001270:	0018      	movs	r0, r3
20001272:	46bd      	mov	sp, r7
20001274:	b004      	add	sp, #16
20001276:	bd80      	pop	{r7, pc}

20001278 <CAN_OperatingModeRequest>:
  * @retval status of the requested mode which can be 
  *         - CAN_ModeStatus_Failed:  CAN failed entering the specific mode 
  *         - CAN_ModeStatus_Success: CAN Succeed entering the specific mode 
  */
uint8_t CAN_OperatingModeRequest(CAN_TypeDef* CANx, uint8_t CAN_OperatingMode)
{
20001278:	b580      	push	{r7, lr}
2000127a:	b084      	sub	sp, #16
2000127c:	af00      	add	r7, sp, #0
2000127e:	6078      	str	r0, [r7, #4]
20001280:	000a      	movs	r2, r1
20001282:	1cfb      	adds	r3, r7, #3
20001284:	701a      	strb	r2, [r3, #0]
  uint8_t status = CAN_ModeStatus_Failed;
20001286:	230f      	movs	r3, #15
20001288:	18fb      	adds	r3, r7, r3
2000128a:	2200      	movs	r2, #0
2000128c:	701a      	strb	r2, [r3, #0]
  
  /* Timeout for INAK or also for SLAK bits*/
  uint32_t timeout = INAK_TIMEOUT; 
2000128e:	4b42      	ldr	r3, [pc, #264]	; (20001398 <CAN_OperatingModeRequest+0x120>)
20001290:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_OPERATING_MODE(CAN_OperatingMode));

  if (CAN_OperatingMode == CAN_OperatingMode_Initialization)
20001292:	1cfb      	adds	r3, r7, #3
20001294:	781b      	ldrb	r3, [r3, #0]
20001296:	2b00      	cmp	r3, #0
20001298:	d124      	bne.n	200012e4 <CAN_OperatingModeRequest+0x6c>
  {
    /* Request initialisation */
    CANx->MCR = (uint32_t)((CANx->MCR & (uint32_t)(~(uint32_t)CAN_MCR_SLEEP)) | CAN_MCR_INRQ);
2000129a:	687b      	ldr	r3, [r7, #4]
2000129c:	681b      	ldr	r3, [r3, #0]
2000129e:	2203      	movs	r2, #3
200012a0:	4393      	bics	r3, r2
200012a2:	2201      	movs	r2, #1
200012a4:	431a      	orrs	r2, r3
200012a6:	687b      	ldr	r3, [r7, #4]
200012a8:	601a      	str	r2, [r3, #0]

    /* Wait the acknowledge */
    while (((CANx->MSR & CAN_MODE_MASK) != CAN_MSR_INAK) && (timeout != 0))
200012aa:	e002      	b.n	200012b2 <CAN_OperatingModeRequest+0x3a>
    {
      timeout--;
200012ac:	68bb      	ldr	r3, [r7, #8]
200012ae:	3b01      	subs	r3, #1
200012b0:	60bb      	str	r3, [r7, #8]
    while (((CANx->MSR & CAN_MODE_MASK) != CAN_MSR_INAK) && (timeout != 0))
200012b2:	687b      	ldr	r3, [r7, #4]
200012b4:	685b      	ldr	r3, [r3, #4]
200012b6:	2203      	movs	r2, #3
200012b8:	4013      	ands	r3, r2
200012ba:	2b01      	cmp	r3, #1
200012bc:	d002      	beq.n	200012c4 <CAN_OperatingModeRequest+0x4c>
200012be:	68bb      	ldr	r3, [r7, #8]
200012c0:	2b00      	cmp	r3, #0
200012c2:	d1f3      	bne.n	200012ac <CAN_OperatingModeRequest+0x34>
    }
    if ((CANx->MSR & CAN_MODE_MASK) != CAN_MSR_INAK)
200012c4:	687b      	ldr	r3, [r7, #4]
200012c6:	685b      	ldr	r3, [r3, #4]
200012c8:	2203      	movs	r2, #3
200012ca:	4013      	ands	r3, r2
200012cc:	2b01      	cmp	r3, #1
200012ce:	d004      	beq.n	200012da <CAN_OperatingModeRequest+0x62>
    {
      status = CAN_ModeStatus_Failed;
200012d0:	230f      	movs	r3, #15
200012d2:	18fb      	adds	r3, r7, r3
200012d4:	2200      	movs	r2, #0
200012d6:	701a      	strb	r2, [r3, #0]
200012d8:	e057      	b.n	2000138a <CAN_OperatingModeRequest+0x112>
    }
    else
    {
      status = CAN_ModeStatus_Success;
200012da:	230f      	movs	r3, #15
200012dc:	18fb      	adds	r3, r7, r3
200012de:	2201      	movs	r2, #1
200012e0:	701a      	strb	r2, [r3, #0]
200012e2:	e052      	b.n	2000138a <CAN_OperatingModeRequest+0x112>
    }
  }
  else  if (CAN_OperatingMode == CAN_OperatingMode_Normal)
200012e4:	1cfb      	adds	r3, r7, #3
200012e6:	781b      	ldrb	r3, [r3, #0]
200012e8:	2b01      	cmp	r3, #1
200012ea:	d121      	bne.n	20001330 <CAN_OperatingModeRequest+0xb8>
  {
    /* Request leave initialisation and sleep mode  and enter Normal mode */
    CANx->MCR &= (uint32_t)(~(CAN_MCR_SLEEP|CAN_MCR_INRQ));
200012ec:	687b      	ldr	r3, [r7, #4]
200012ee:	681b      	ldr	r3, [r3, #0]
200012f0:	2203      	movs	r2, #3
200012f2:	4393      	bics	r3, r2
200012f4:	001a      	movs	r2, r3
200012f6:	687b      	ldr	r3, [r7, #4]
200012f8:	601a      	str	r2, [r3, #0]

    /* Wait the acknowledge */
    while (((CANx->MSR & CAN_MODE_MASK) != 0) && (timeout!=0))
200012fa:	e002      	b.n	20001302 <CAN_OperatingModeRequest+0x8a>
    {
      timeout--;
200012fc:	68bb      	ldr	r3, [r7, #8]
200012fe:	3b01      	subs	r3, #1
20001300:	60bb      	str	r3, [r7, #8]
    while (((CANx->MSR & CAN_MODE_MASK) != 0) && (timeout!=0))
20001302:	687b      	ldr	r3, [r7, #4]
20001304:	685b      	ldr	r3, [r3, #4]
20001306:	2203      	movs	r2, #3
20001308:	4013      	ands	r3, r2
2000130a:	d002      	beq.n	20001312 <CAN_OperatingModeRequest+0x9a>
2000130c:	68bb      	ldr	r3, [r7, #8]
2000130e:	2b00      	cmp	r3, #0
20001310:	d1f4      	bne.n	200012fc <CAN_OperatingModeRequest+0x84>
    }
    if ((CANx->MSR & CAN_MODE_MASK) != 0)
20001312:	687b      	ldr	r3, [r7, #4]
20001314:	685b      	ldr	r3, [r3, #4]
20001316:	2203      	movs	r2, #3
20001318:	4013      	ands	r3, r2
2000131a:	d004      	beq.n	20001326 <CAN_OperatingModeRequest+0xae>
    {
      status = CAN_ModeStatus_Failed;
2000131c:	230f      	movs	r3, #15
2000131e:	18fb      	adds	r3, r7, r3
20001320:	2200      	movs	r2, #0
20001322:	701a      	strb	r2, [r3, #0]
20001324:	e031      	b.n	2000138a <CAN_OperatingModeRequest+0x112>
    }
    else
    {
      status = CAN_ModeStatus_Success;
20001326:	230f      	movs	r3, #15
20001328:	18fb      	adds	r3, r7, r3
2000132a:	2201      	movs	r2, #1
2000132c:	701a      	strb	r2, [r3, #0]
2000132e:	e02c      	b.n	2000138a <CAN_OperatingModeRequest+0x112>
    }
  }
  else  if (CAN_OperatingMode == CAN_OperatingMode_Sleep)
20001330:	1cfb      	adds	r3, r7, #3
20001332:	781b      	ldrb	r3, [r3, #0]
20001334:	2b02      	cmp	r3, #2
20001336:	d124      	bne.n	20001382 <CAN_OperatingModeRequest+0x10a>
  {
    /* Request Sleep mode */
    CANx->MCR = (uint32_t)((CANx->MCR & (uint32_t)(~(uint32_t)CAN_MCR_INRQ)) | CAN_MCR_SLEEP);
20001338:	687b      	ldr	r3, [r7, #4]
2000133a:	681b      	ldr	r3, [r3, #0]
2000133c:	2203      	movs	r2, #3
2000133e:	4393      	bics	r3, r2
20001340:	2202      	movs	r2, #2
20001342:	431a      	orrs	r2, r3
20001344:	687b      	ldr	r3, [r7, #4]
20001346:	601a      	str	r2, [r3, #0]

    /* Wait the acknowledge */
    while (((CANx->MSR & CAN_MODE_MASK) != CAN_MSR_SLAK) && (timeout!=0))
20001348:	e002      	b.n	20001350 <CAN_OperatingModeRequest+0xd8>
    {
      timeout--;
2000134a:	68bb      	ldr	r3, [r7, #8]
2000134c:	3b01      	subs	r3, #1
2000134e:	60bb      	str	r3, [r7, #8]
    while (((CANx->MSR & CAN_MODE_MASK) != CAN_MSR_SLAK) && (timeout!=0))
20001350:	687b      	ldr	r3, [r7, #4]
20001352:	685b      	ldr	r3, [r3, #4]
20001354:	2203      	movs	r2, #3
20001356:	4013      	ands	r3, r2
20001358:	2b02      	cmp	r3, #2
2000135a:	d002      	beq.n	20001362 <CAN_OperatingModeRequest+0xea>
2000135c:	68bb      	ldr	r3, [r7, #8]
2000135e:	2b00      	cmp	r3, #0
20001360:	d1f3      	bne.n	2000134a <CAN_OperatingModeRequest+0xd2>
    }
    if ((CANx->MSR & CAN_MODE_MASK) != CAN_MSR_SLAK)
20001362:	687b      	ldr	r3, [r7, #4]
20001364:	685b      	ldr	r3, [r3, #4]
20001366:	2203      	movs	r2, #3
20001368:	4013      	ands	r3, r2
2000136a:	2b02      	cmp	r3, #2
2000136c:	d004      	beq.n	20001378 <CAN_OperatingModeRequest+0x100>
    {
      status = CAN_ModeStatus_Failed;
2000136e:	230f      	movs	r3, #15
20001370:	18fb      	adds	r3, r7, r3
20001372:	2200      	movs	r2, #0
20001374:	701a      	strb	r2, [r3, #0]
20001376:	e008      	b.n	2000138a <CAN_OperatingModeRequest+0x112>
    }
    else
    {
      status = CAN_ModeStatus_Success;
20001378:	230f      	movs	r3, #15
2000137a:	18fb      	adds	r3, r7, r3
2000137c:	2201      	movs	r2, #1
2000137e:	701a      	strb	r2, [r3, #0]
20001380:	e003      	b.n	2000138a <CAN_OperatingModeRequest+0x112>
    }
  }
  else
  {
    status = CAN_ModeStatus_Failed;
20001382:	230f      	movs	r3, #15
20001384:	18fb      	adds	r3, r7, r3
20001386:	2200      	movs	r2, #0
20001388:	701a      	strb	r2, [r3, #0]
  }

  return  (uint8_t) status;
2000138a:	230f      	movs	r3, #15
2000138c:	18fb      	adds	r3, r7, r3
2000138e:	781b      	ldrb	r3, [r3, #0]
}
20001390:	0018      	movs	r0, r3
20001392:	46bd      	mov	sp, r7
20001394:	b004      	add	sp, #16
20001396:	bd80      	pop	{r7, pc}
20001398:	0000ffff 	strdeq	pc, [r0], -pc	; <UNPREDICTABLE>

2000139c <CAN_Sleep>:
  * @param  CANx: where x can be 1,2 or 3 to select the CAN peripheral.
  * @note   CAN3 peripheral is available only for STM32F413_423xx devices
  * @retval CAN_Sleep_Ok if sleep entered, CAN_Sleep_Failed otherwise.
  */
uint8_t CAN_Sleep(CAN_TypeDef* CANx)
{
2000139c:	b580      	push	{r7, lr}
2000139e:	b084      	sub	sp, #16
200013a0:	af00      	add	r7, sp, #0
200013a2:	6078      	str	r0, [r7, #4]
  uint8_t sleepstatus = CAN_Sleep_Failed;
200013a4:	230f      	movs	r3, #15
200013a6:	18fb      	adds	r3, r7, r3
200013a8:	2200      	movs	r2, #0
200013aa:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
    
  /* Request Sleep mode */
   CANx->MCR = (((CANx->MCR) & (uint32_t)(~(uint32_t)CAN_MCR_INRQ)) | CAN_MCR_SLEEP);
200013ac:	687b      	ldr	r3, [r7, #4]
200013ae:	681b      	ldr	r3, [r3, #0]
200013b0:	2203      	movs	r2, #3
200013b2:	4393      	bics	r3, r2
200013b4:	2202      	movs	r2, #2
200013b6:	431a      	orrs	r2, r3
200013b8:	687b      	ldr	r3, [r7, #4]
200013ba:	601a      	str	r2, [r3, #0]
   
  /* Sleep mode status */
  if ((CANx->MSR & (CAN_MSR_SLAK|CAN_MSR_INAK)) == CAN_MSR_SLAK)
200013bc:	687b      	ldr	r3, [r7, #4]
200013be:	685b      	ldr	r3, [r3, #4]
200013c0:	2203      	movs	r2, #3
200013c2:	4013      	ands	r3, r2
200013c4:	2b02      	cmp	r3, #2
200013c6:	d103      	bne.n	200013d0 <CAN_Sleep+0x34>
  {
    /* Sleep mode not entered */
    sleepstatus =  CAN_Sleep_Ok;
200013c8:	230f      	movs	r3, #15
200013ca:	18fb      	adds	r3, r7, r3
200013cc:	2201      	movs	r2, #1
200013ce:	701a      	strb	r2, [r3, #0]
  }
  /* return sleep mode status */
   return (uint8_t)sleepstatus;
200013d0:	230f      	movs	r3, #15
200013d2:	18fb      	adds	r3, r7, r3
200013d4:	781b      	ldrb	r3, [r3, #0]
}
200013d6:	0018      	movs	r0, r3
200013d8:	46bd      	mov	sp, r7
200013da:	b004      	add	sp, #16
200013dc:	bd80      	pop	{r7, pc}

200013de <CAN_WakeUp>:
  * @param  CANx: where x can be 1,2 or 3 to select the CAN peripheral.
  * @note   CAN3 peripheral is available only for STM32F413_423xx devices
  * @retval CAN_WakeUp_Ok if sleep mode left, CAN_WakeUp_Failed otherwise.
  */
uint8_t CAN_WakeUp(CAN_TypeDef* CANx)
{
200013de:	b580      	push	{r7, lr}
200013e0:	b084      	sub	sp, #16
200013e2:	af00      	add	r7, sp, #0
200013e4:	6078      	str	r0, [r7, #4]
  uint32_t wait_slak = SLAK_TIMEOUT;
200013e6:	4b15      	ldr	r3, [pc, #84]	; (2000143c <CAN_WakeUp+0x5e>)
200013e8:	60fb      	str	r3, [r7, #12]
  uint8_t wakeupstatus = CAN_WakeUp_Failed;
200013ea:	230b      	movs	r3, #11
200013ec:	18fb      	adds	r3, r7, r3
200013ee:	2200      	movs	r2, #0
200013f0:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
    
  /* Wake up request */
  CANx->MCR &= ~(uint32_t)CAN_MCR_SLEEP;
200013f2:	687b      	ldr	r3, [r7, #4]
200013f4:	681b      	ldr	r3, [r3, #0]
200013f6:	2202      	movs	r2, #2
200013f8:	4393      	bics	r3, r2
200013fa:	001a      	movs	r2, r3
200013fc:	687b      	ldr	r3, [r7, #4]
200013fe:	601a      	str	r2, [r3, #0]
    
  /* Sleep mode status */
  while(((CANx->MSR & CAN_MSR_SLAK) == CAN_MSR_SLAK)&&(wait_slak!=0x00))
20001400:	e002      	b.n	20001408 <CAN_WakeUp+0x2a>
  {
   wait_slak--;
20001402:	68fb      	ldr	r3, [r7, #12]
20001404:	3b01      	subs	r3, #1
20001406:	60fb      	str	r3, [r7, #12]
  while(((CANx->MSR & CAN_MSR_SLAK) == CAN_MSR_SLAK)&&(wait_slak!=0x00))
20001408:	687b      	ldr	r3, [r7, #4]
2000140a:	685b      	ldr	r3, [r3, #4]
2000140c:	2202      	movs	r2, #2
2000140e:	4013      	ands	r3, r2
20001410:	2b02      	cmp	r3, #2
20001412:	d102      	bne.n	2000141a <CAN_WakeUp+0x3c>
20001414:	68fb      	ldr	r3, [r7, #12]
20001416:	2b00      	cmp	r3, #0
20001418:	d1f3      	bne.n	20001402 <CAN_WakeUp+0x24>
  }
  if((CANx->MSR & CAN_MSR_SLAK) != CAN_MSR_SLAK)
2000141a:	687b      	ldr	r3, [r7, #4]
2000141c:	685b      	ldr	r3, [r3, #4]
2000141e:	2202      	movs	r2, #2
20001420:	4013      	ands	r3, r2
20001422:	2b02      	cmp	r3, #2
20001424:	d003      	beq.n	2000142e <CAN_WakeUp+0x50>
  {
   /* wake up done : Sleep mode exited */
    wakeupstatus = CAN_WakeUp_Ok;
20001426:	230b      	movs	r3, #11
20001428:	18fb      	adds	r3, r7, r3
2000142a:	2201      	movs	r2, #1
2000142c:	701a      	strb	r2, [r3, #0]
  }
  /* return wakeup status */
  return (uint8_t)wakeupstatus;
2000142e:	230b      	movs	r3, #11
20001430:	18fb      	adds	r3, r7, r3
20001432:	781b      	ldrb	r3, [r3, #0]
}
20001434:	0018      	movs	r0, r3
20001436:	46bd      	mov	sp, r7
20001438:	b004      	add	sp, #16
2000143a:	bd80      	pop	{r7, pc}
2000143c:	0000ffff 	strdeq	pc, [r0], -pc	; <UNPREDICTABLE>

20001440 <CAN_GetLastErrorCode>:
  *          - CAN_ERRORCODE_BitDominantErr: Bit Dominant Error
  *          - CAN_ERRORCODE_CRCErr: CRC Error
  *          - CAN_ERRORCODE_SoftwareSetErr: Software Set Error  
  */
uint8_t CAN_GetLastErrorCode(CAN_TypeDef* CANx)
{
20001440:	b580      	push	{r7, lr}
20001442:	b084      	sub	sp, #16
20001444:	af00      	add	r7, sp, #0
20001446:	6078      	str	r0, [r7, #4]
  uint8_t errorcode=0;
20001448:	210f      	movs	r1, #15
2000144a:	187b      	adds	r3, r7, r1
2000144c:	2200      	movs	r2, #0
2000144e:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  
  /* Get the error code*/
  errorcode = (((uint8_t)CANx->ESR) & (uint8_t)CAN_ESR_LEC);
20001450:	687b      	ldr	r3, [r7, #4]
20001452:	699b      	ldr	r3, [r3, #24]
20001454:	b2da      	uxtb	r2, r3
20001456:	0008      	movs	r0, r1
20001458:	187b      	adds	r3, r7, r1
2000145a:	2170      	movs	r1, #112	; 0x70
2000145c:	400a      	ands	r2, r1
2000145e:	701a      	strb	r2, [r3, #0]
  
  /* Return the error code*/
  return errorcode;
20001460:	0001      	movs	r1, r0
20001462:	187b      	adds	r3, r7, r1
20001464:	781b      	ldrb	r3, [r3, #0]
}
20001466:	0018      	movs	r0, r3
20001468:	46bd      	mov	sp, r7
2000146a:	b004      	add	sp, #16
2000146c:	bd80      	pop	{r7, pc}

2000146e <CAN_GetReceiveErrorCounter>:
  * @param  CANx: where x can be 1,2 or 3 to select the CAN peripheral.
  * @note   CAN3 peripheral is available only for STM32F413_423xx devices
  * @retval CAN Receive Error Counter. 
  */
uint8_t CAN_GetReceiveErrorCounter(CAN_TypeDef* CANx)
{
2000146e:	b580      	push	{r7, lr}
20001470:	b084      	sub	sp, #16
20001472:	af00      	add	r7, sp, #0
20001474:	6078      	str	r0, [r7, #4]
  uint8_t counter=0;
20001476:	210f      	movs	r1, #15
20001478:	187b      	adds	r3, r7, r1
2000147a:	2200      	movs	r2, #0
2000147c:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  
  /* Get the Receive Error Counter*/
  counter = (uint8_t)((CANx->ESR & CAN_ESR_REC)>> 24);
2000147e:	687b      	ldr	r3, [r7, #4]
20001480:	699b      	ldr	r3, [r3, #24]
20001482:	0e1a      	lsrs	r2, r3, #24
20001484:	187b      	adds	r3, r7, r1
20001486:	701a      	strb	r2, [r3, #0]
  
  /* Return the Receive Error Counter*/
  return counter;
20001488:	187b      	adds	r3, r7, r1
2000148a:	781b      	ldrb	r3, [r3, #0]
}
2000148c:	0018      	movs	r0, r3
2000148e:	46bd      	mov	sp, r7
20001490:	b004      	add	sp, #16
20001492:	bd80      	pop	{r7, pc}

20001494 <CAN_GetLSBTransmitErrorCounter>:
  * @param  CANx: where x can be 1,2 or 3 to select the CAN peripheral.
  * @note   CAN3 peripheral is available only for STM32F413_423xx devices
  * @retval LSB of the 9-bit CAN Transmit Error Counter. 
  */
uint8_t CAN_GetLSBTransmitErrorCounter(CAN_TypeDef* CANx)
{
20001494:	b580      	push	{r7, lr}
20001496:	b084      	sub	sp, #16
20001498:	af00      	add	r7, sp, #0
2000149a:	6078      	str	r0, [r7, #4]
  uint8_t counter=0;
2000149c:	210f      	movs	r1, #15
2000149e:	187b      	adds	r3, r7, r1
200014a0:	2200      	movs	r2, #0
200014a2:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  
  /* Get the LSB of the 9-bit CANx Transmit Error Counter(TEC) */
  counter = (uint8_t)((CANx->ESR & CAN_ESR_TEC)>> 16);
200014a4:	687b      	ldr	r3, [r7, #4]
200014a6:	699b      	ldr	r3, [r3, #24]
200014a8:	0c1a      	lsrs	r2, r3, #16
200014aa:	187b      	adds	r3, r7, r1
200014ac:	701a      	strb	r2, [r3, #0]
  
  /* Return the LSB of the 9-bit CANx Transmit Error Counter(TEC) */
  return counter;
200014ae:	187b      	adds	r3, r7, r1
200014b0:	781b      	ldrb	r3, [r3, #0]
}
200014b2:	0018      	movs	r0, r3
200014b4:	46bd      	mov	sp, r7
200014b6:	b004      	add	sp, #16
200014b8:	bd80      	pop	{r7, pc}

200014ba <CAN_ITConfig>:
  * @note   CAN3 peripheral is available only for STM32F413_423xx devices
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void CAN_ITConfig(CAN_TypeDef* CANx, uint32_t CAN_IT, FunctionalState NewState)
{
200014ba:	b580      	push	{r7, lr}
200014bc:	b084      	sub	sp, #16
200014be:	af00      	add	r7, sp, #0
200014c0:	60f8      	str	r0, [r7, #12]
200014c2:	60b9      	str	r1, [r7, #8]
200014c4:	1dfb      	adds	r3, r7, #7
200014c6:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_IT(CAN_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
200014c8:	1dfb      	adds	r3, r7, #7
200014ca:	781b      	ldrb	r3, [r3, #0]
200014cc:	2b00      	cmp	r3, #0
200014ce:	d006      	beq.n	200014de <CAN_ITConfig+0x24>
  {
    /* Enable the selected CANx interrupt */
    CANx->IER |= CAN_IT;
200014d0:	68fb      	ldr	r3, [r7, #12]
200014d2:	695a      	ldr	r2, [r3, #20]
200014d4:	68bb      	ldr	r3, [r7, #8]
200014d6:	431a      	orrs	r2, r3
200014d8:	68fb      	ldr	r3, [r7, #12]
200014da:	615a      	str	r2, [r3, #20]
  else
  {
    /* Disable the selected CANx interrupt */
    CANx->IER &= ~CAN_IT;
  }
}
200014dc:	e006      	b.n	200014ec <CAN_ITConfig+0x32>
    CANx->IER &= ~CAN_IT;
200014de:	68fb      	ldr	r3, [r7, #12]
200014e0:	695b      	ldr	r3, [r3, #20]
200014e2:	68ba      	ldr	r2, [r7, #8]
200014e4:	43d2      	mvns	r2, r2
200014e6:	401a      	ands	r2, r3
200014e8:	68fb      	ldr	r3, [r7, #12]
200014ea:	615a      	str	r2, [r3, #20]
}
200014ec:	46c0      	nop			; (mov r8, r8)
200014ee:	46bd      	mov	sp, r7
200014f0:	b004      	add	sp, #16
200014f2:	bd80      	pop	{r7, pc}

200014f4 <CAN_GetFlagStatus>:
  *            @arg CAN_FLAG_LEC: Last error code Flag
  * @note   CAN3 peripheral is available only for STM32F413_423xx devices
  * @retval The new state of CAN_FLAG (SET or RESET).
  */
FlagStatus CAN_GetFlagStatus(CAN_TypeDef* CANx, uint32_t CAN_FLAG)
{
200014f4:	b580      	push	{r7, lr}
200014f6:	b084      	sub	sp, #16
200014f8:	af00      	add	r7, sp, #0
200014fa:	6078      	str	r0, [r7, #4]
200014fc:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
200014fe:	230f      	movs	r3, #15
20001500:	18fb      	adds	r3, r7, r3
20001502:	2200      	movs	r2, #0
20001504:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_GET_FLAG(CAN_FLAG));
  

  if((CAN_FLAG & CAN_FLAGS_ESR) != (uint32_t)RESET)
20001506:	683a      	ldr	r2, [r7, #0]
20001508:	23f0      	movs	r3, #240	; 0xf0
2000150a:	041b      	lsls	r3, r3, #16
2000150c:	4013      	ands	r3, r2
2000150e:	d010      	beq.n	20001532 <CAN_GetFlagStatus+0x3e>
  { 
    /* Check the status of the specified CAN flag */
    if ((CANx->ESR & (CAN_FLAG & 0x000FFFFF)) != (uint32_t)RESET)
20001510:	687b      	ldr	r3, [r7, #4]
20001512:	699b      	ldr	r3, [r3, #24]
20001514:	683a      	ldr	r2, [r7, #0]
20001516:	4013      	ands	r3, r2
20001518:	031b      	lsls	r3, r3, #12
2000151a:	0b1b      	lsrs	r3, r3, #12
2000151c:	d004      	beq.n	20001528 <CAN_GetFlagStatus+0x34>
    { 
      /* CAN_FLAG is set */
      bitstatus = SET;
2000151e:	230f      	movs	r3, #15
20001520:	18fb      	adds	r3, r7, r3
20001522:	2201      	movs	r2, #1
20001524:	701a      	strb	r2, [r3, #0]
20001526:	e056      	b.n	200015d6 <CAN_GetFlagStatus+0xe2>
    }
    else
    { 
      /* CAN_FLAG is reset */
      bitstatus = RESET;
20001528:	230f      	movs	r3, #15
2000152a:	18fb      	adds	r3, r7, r3
2000152c:	2200      	movs	r2, #0
2000152e:	701a      	strb	r2, [r3, #0]
20001530:	e051      	b.n	200015d6 <CAN_GetFlagStatus+0xe2>
    }
  }
  else if((CAN_FLAG & CAN_FLAGS_MSR) != (uint32_t)RESET)
20001532:	683a      	ldr	r2, [r7, #0]
20001534:	2380      	movs	r3, #128	; 0x80
20001536:	045b      	lsls	r3, r3, #17
20001538:	4013      	ands	r3, r2
2000153a:	d010      	beq.n	2000155e <CAN_GetFlagStatus+0x6a>
  { 
    /* Check the status of the specified CAN flag */
    if ((CANx->MSR & (CAN_FLAG & 0x000FFFFF)) != (uint32_t)RESET)
2000153c:	687b      	ldr	r3, [r7, #4]
2000153e:	685b      	ldr	r3, [r3, #4]
20001540:	683a      	ldr	r2, [r7, #0]
20001542:	4013      	ands	r3, r2
20001544:	031b      	lsls	r3, r3, #12
20001546:	0b1b      	lsrs	r3, r3, #12
20001548:	d004      	beq.n	20001554 <CAN_GetFlagStatus+0x60>
    { 
      /* CAN_FLAG is set */
      bitstatus = SET;
2000154a:	230f      	movs	r3, #15
2000154c:	18fb      	adds	r3, r7, r3
2000154e:	2201      	movs	r2, #1
20001550:	701a      	strb	r2, [r3, #0]
20001552:	e040      	b.n	200015d6 <CAN_GetFlagStatus+0xe2>
    }
    else
    { 
      /* CAN_FLAG is reset */
      bitstatus = RESET;
20001554:	230f      	movs	r3, #15
20001556:	18fb      	adds	r3, r7, r3
20001558:	2200      	movs	r2, #0
2000155a:	701a      	strb	r2, [r3, #0]
2000155c:	e03b      	b.n	200015d6 <CAN_GetFlagStatus+0xe2>
    }
  }
  else if((CAN_FLAG & CAN_FLAGS_TSR) != (uint32_t)RESET)
2000155e:	683a      	ldr	r2, [r7, #0]
20001560:	2380      	movs	r3, #128	; 0x80
20001562:	051b      	lsls	r3, r3, #20
20001564:	4013      	ands	r3, r2
20001566:	d010      	beq.n	2000158a <CAN_GetFlagStatus+0x96>
  { 
    /* Check the status of the specified CAN flag */
    if ((CANx->TSR & (CAN_FLAG & 0x000FFFFF)) != (uint32_t)RESET)
20001568:	687b      	ldr	r3, [r7, #4]
2000156a:	689b      	ldr	r3, [r3, #8]
2000156c:	683a      	ldr	r2, [r7, #0]
2000156e:	4013      	ands	r3, r2
20001570:	031b      	lsls	r3, r3, #12
20001572:	0b1b      	lsrs	r3, r3, #12
20001574:	d004      	beq.n	20001580 <CAN_GetFlagStatus+0x8c>
    { 
      /* CAN_FLAG is set */
      bitstatus = SET;
20001576:	230f      	movs	r3, #15
20001578:	18fb      	adds	r3, r7, r3
2000157a:	2201      	movs	r2, #1
2000157c:	701a      	strb	r2, [r3, #0]
2000157e:	e02a      	b.n	200015d6 <CAN_GetFlagStatus+0xe2>
    }
    else
    { 
      /* CAN_FLAG is reset */
      bitstatus = RESET;
20001580:	230f      	movs	r3, #15
20001582:	18fb      	adds	r3, r7, r3
20001584:	2200      	movs	r2, #0
20001586:	701a      	strb	r2, [r3, #0]
20001588:	e025      	b.n	200015d6 <CAN_GetFlagStatus+0xe2>
    }
  }
  else if((CAN_FLAG & CAN_FLAGS_RF0R) != (uint32_t)RESET)
2000158a:	683a      	ldr	r2, [r7, #0]
2000158c:	2380      	movs	r3, #128	; 0x80
2000158e:	049b      	lsls	r3, r3, #18
20001590:	4013      	ands	r3, r2
20001592:	d010      	beq.n	200015b6 <CAN_GetFlagStatus+0xc2>
  { 
    /* Check the status of the specified CAN flag */
    if ((CANx->RF0R & (CAN_FLAG & 0x000FFFFF)) != (uint32_t)RESET)
20001594:	687b      	ldr	r3, [r7, #4]
20001596:	68db      	ldr	r3, [r3, #12]
20001598:	683a      	ldr	r2, [r7, #0]
2000159a:	4013      	ands	r3, r2
2000159c:	031b      	lsls	r3, r3, #12
2000159e:	0b1b      	lsrs	r3, r3, #12
200015a0:	d004      	beq.n	200015ac <CAN_GetFlagStatus+0xb8>
    { 
      /* CAN_FLAG is set */
      bitstatus = SET;
200015a2:	230f      	movs	r3, #15
200015a4:	18fb      	adds	r3, r7, r3
200015a6:	2201      	movs	r2, #1
200015a8:	701a      	strb	r2, [r3, #0]
200015aa:	e014      	b.n	200015d6 <CAN_GetFlagStatus+0xe2>
    }
    else
    { 
      /* CAN_FLAG is reset */
      bitstatus = RESET;
200015ac:	230f      	movs	r3, #15
200015ae:	18fb      	adds	r3, r7, r3
200015b0:	2200      	movs	r2, #0
200015b2:	701a      	strb	r2, [r3, #0]
200015b4:	e00f      	b.n	200015d6 <CAN_GetFlagStatus+0xe2>
    }
  }
  else /* If(CAN_FLAG & CAN_FLAGS_RF1R != (uint32_t)RESET) */
  { 
    /* Check the status of the specified CAN flag */
    if ((uint32_t)(CANx->RF1R & (CAN_FLAG & 0x000FFFFF)) != (uint32_t)RESET)
200015b6:	687b      	ldr	r3, [r7, #4]
200015b8:	691b      	ldr	r3, [r3, #16]
200015ba:	683a      	ldr	r2, [r7, #0]
200015bc:	4013      	ands	r3, r2
200015be:	031b      	lsls	r3, r3, #12
200015c0:	0b1b      	lsrs	r3, r3, #12
200015c2:	d004      	beq.n	200015ce <CAN_GetFlagStatus+0xda>
    { 
      /* CAN_FLAG is set */
      bitstatus = SET;
200015c4:	230f      	movs	r3, #15
200015c6:	18fb      	adds	r3, r7, r3
200015c8:	2201      	movs	r2, #1
200015ca:	701a      	strb	r2, [r3, #0]
200015cc:	e003      	b.n	200015d6 <CAN_GetFlagStatus+0xe2>
    }
    else
    { 
      /* CAN_FLAG is reset */
      bitstatus = RESET;
200015ce:	230f      	movs	r3, #15
200015d0:	18fb      	adds	r3, r7, r3
200015d2:	2200      	movs	r2, #0
200015d4:	701a      	strb	r2, [r3, #0]
    }
  }
  /* Return the CAN_FLAG status */
  return  bitstatus;
200015d6:	230f      	movs	r3, #15
200015d8:	18fb      	adds	r3, r7, r3
200015da:	781b      	ldrb	r3, [r3, #0]
}
200015dc:	0018      	movs	r0, r3
200015de:	46bd      	mov	sp, r7
200015e0:	b004      	add	sp, #16
200015e2:	bd80      	pop	{r7, pc}

200015e4 <CAN_ClearFlag>:
  *            @arg CAN_FLAG_LEC: Last error code Flag
  * @note   CAN3 peripheral is available only for STM32F413_423xx devices
  * @retval None
  */
void CAN_ClearFlag(CAN_TypeDef* CANx, uint32_t CAN_FLAG)
{
200015e4:	b580      	push	{r7, lr}
200015e6:	b084      	sub	sp, #16
200015e8:	af00      	add	r7, sp, #0
200015ea:	6078      	str	r0, [r7, #4]
200015ec:	6039      	str	r1, [r7, #0]
  uint32_t flagtmp=0;
200015ee:	2300      	movs	r3, #0
200015f0:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_CLEAR_FLAG(CAN_FLAG));
  
  if (CAN_FLAG == CAN_FLAG_LEC) /* ESR register */
200015f2:	683b      	ldr	r3, [r7, #0]
200015f4:	4a16      	ldr	r2, [pc, #88]	; (20001650 <CAN_ClearFlag+0x6c>)
200015f6:	4293      	cmp	r3, r2
200015f8:	d103      	bne.n	20001602 <CAN_ClearFlag+0x1e>
  {
    /* Clear the selected CAN flags */
    CANx->ESR = (uint32_t)RESET;
200015fa:	687b      	ldr	r3, [r7, #4]
200015fc:	2200      	movs	r2, #0
200015fe:	619a      	str	r2, [r3, #24]
    {
      /* Operating mode Flags */
      CANx->MSR = (uint32_t)(flagtmp);
    }
  }
}
20001600:	e021      	b.n	20001646 <CAN_ClearFlag+0x62>
    flagtmp = CAN_FLAG & 0x000FFFFF;
20001602:	683b      	ldr	r3, [r7, #0]
20001604:	031b      	lsls	r3, r3, #12
20001606:	0b1b      	lsrs	r3, r3, #12
20001608:	60fb      	str	r3, [r7, #12]
    if ((CAN_FLAG & CAN_FLAGS_RF0R)!=(uint32_t)RESET)
2000160a:	683a      	ldr	r2, [r7, #0]
2000160c:	2380      	movs	r3, #128	; 0x80
2000160e:	049b      	lsls	r3, r3, #18
20001610:	4013      	ands	r3, r2
20001612:	d003      	beq.n	2000161c <CAN_ClearFlag+0x38>
      CANx->RF0R = (uint32_t)(flagtmp);
20001614:	687b      	ldr	r3, [r7, #4]
20001616:	68fa      	ldr	r2, [r7, #12]
20001618:	60da      	str	r2, [r3, #12]
}
2000161a:	e014      	b.n	20001646 <CAN_ClearFlag+0x62>
    else if ((CAN_FLAG & CAN_FLAGS_RF1R)!=(uint32_t)RESET)
2000161c:	683a      	ldr	r2, [r7, #0]
2000161e:	2380      	movs	r3, #128	; 0x80
20001620:	04db      	lsls	r3, r3, #19
20001622:	4013      	ands	r3, r2
20001624:	d003      	beq.n	2000162e <CAN_ClearFlag+0x4a>
      CANx->RF1R = (uint32_t)(flagtmp);
20001626:	687b      	ldr	r3, [r7, #4]
20001628:	68fa      	ldr	r2, [r7, #12]
2000162a:	611a      	str	r2, [r3, #16]
}
2000162c:	e00b      	b.n	20001646 <CAN_ClearFlag+0x62>
    else if ((CAN_FLAG & CAN_FLAGS_TSR)!=(uint32_t)RESET)
2000162e:	683a      	ldr	r2, [r7, #0]
20001630:	2380      	movs	r3, #128	; 0x80
20001632:	051b      	lsls	r3, r3, #20
20001634:	4013      	ands	r3, r2
20001636:	d003      	beq.n	20001640 <CAN_ClearFlag+0x5c>
      CANx->TSR = (uint32_t)(flagtmp);
20001638:	687b      	ldr	r3, [r7, #4]
2000163a:	68fa      	ldr	r2, [r7, #12]
2000163c:	609a      	str	r2, [r3, #8]
}
2000163e:	e002      	b.n	20001646 <CAN_ClearFlag+0x62>
      CANx->MSR = (uint32_t)(flagtmp);
20001640:	687b      	ldr	r3, [r7, #4]
20001642:	68fa      	ldr	r2, [r7, #12]
20001644:	605a      	str	r2, [r3, #4]
}
20001646:	46c0      	nop			; (mov r8, r8)
20001648:	46bd      	mov	sp, r7
2000164a:	b004      	add	sp, #16
2000164c:	bd80      	pop	{r7, pc}
2000164e:	46c0      	nop			; (mov r8, r8)
20001650:	30f00070 	rscscc	r0, r0, r0, ror r0

20001654 <CAN_GetITStatus>:
  *            @arg CAN_IT_ERR: Error Interrupt
  * @note   CAN3 peripheral is available only for STM32F413_423xx devices
  * @retval The current state of CAN_IT (SET or RESET).
  */
ITStatus CAN_GetITStatus(CAN_TypeDef* CANx, uint32_t CAN_IT)
{
20001654:	b590      	push	{r4, r7, lr}
20001656:	b085      	sub	sp, #20
20001658:	af00      	add	r7, sp, #0
2000165a:	6078      	str	r0, [r7, #4]
2000165c:	6039      	str	r1, [r7, #0]
  ITStatus itstatus = RESET;
2000165e:	230f      	movs	r3, #15
20001660:	18fb      	adds	r3, r7, r3
20001662:	2200      	movs	r2, #0
20001664:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_IT(CAN_IT));
  
  /* check the interrupt enable bit */
 if((CANx->IER & CAN_IT) != RESET)
20001666:	687b      	ldr	r3, [r7, #4]
20001668:	695b      	ldr	r3, [r3, #20]
2000166a:	683a      	ldr	r2, [r7, #0]
2000166c:	4013      	ands	r3, r2
2000166e:	d100      	bne.n	20001672 <CAN_GetITStatus+0x1e>
20001670:	e0db      	b.n	2000182a <CAN_GetITStatus+0x1d6>
 {
   /* in case the Interrupt is enabled, .... */
    switch (CAN_IT)
20001672:	683b      	ldr	r3, [r7, #0]
20001674:	2b40      	cmp	r3, #64	; 0x40
20001676:	d100      	bne.n	2000167a <CAN_GetITStatus+0x26>
20001678:	e079      	b.n	2000176e <CAN_GetITStatus+0x11a>
2000167a:	d80e      	bhi.n	2000169a <CAN_GetITStatus+0x46>
2000167c:	2b04      	cmp	r3, #4
2000167e:	d04a      	beq.n	20001716 <CAN_GetITStatus+0xc2>
20001680:	d804      	bhi.n	2000168c <CAN_GetITStatus+0x38>
20001682:	2b01      	cmp	r3, #1
20001684:	d030      	beq.n	200016e8 <CAN_GetITStatus+0x94>
20001686:	2b02      	cmp	r3, #2
20001688:	d03a      	beq.n	20001700 <CAN_GetITStatus+0xac>
2000168a:	e0c8      	b.n	2000181e <CAN_GetITStatus+0x1ca>
2000168c:	2b10      	cmp	r3, #16
2000168e:	d058      	beq.n	20001742 <CAN_GetITStatus+0xee>
20001690:	2b20      	cmp	r3, #32
20001692:	d061      	beq.n	20001758 <CAN_GetITStatus+0x104>
20001694:	2b08      	cmp	r3, #8
20001696:	d049      	beq.n	2000172c <CAN_GetITStatus+0xd8>
20001698:	e0c1      	b.n	2000181e <CAN_GetITStatus+0x1ca>
2000169a:	2280      	movs	r2, #128	; 0x80
2000169c:	0112      	lsls	r2, r2, #4
2000169e:	4293      	cmp	r3, r2
200016a0:	d100      	bne.n	200016a4 <CAN_GetITStatus+0x50>
200016a2:	e0a6      	b.n	200017f2 <CAN_GetITStatus+0x19e>
200016a4:	2280      	movs	r2, #128	; 0x80
200016a6:	0112      	lsls	r2, r2, #4
200016a8:	4293      	cmp	r3, r2
200016aa:	d80f      	bhi.n	200016cc <CAN_GetITStatus+0x78>
200016ac:	2280      	movs	r2, #128	; 0x80
200016ae:	0092      	lsls	r2, r2, #2
200016b0:	4293      	cmp	r3, r2
200016b2:	d100      	bne.n	200016b6 <CAN_GetITStatus+0x62>
200016b4:	e087      	b.n	200017c6 <CAN_GetITStatus+0x172>
200016b6:	2280      	movs	r2, #128	; 0x80
200016b8:	00d2      	lsls	r2, r2, #3
200016ba:	4293      	cmp	r3, r2
200016bc:	d100      	bne.n	200016c0 <CAN_GetITStatus+0x6c>
200016be:	e08d      	b.n	200017dc <CAN_GetITStatus+0x188>
200016c0:	2280      	movs	r2, #128	; 0x80
200016c2:	0052      	lsls	r2, r2, #1
200016c4:	4293      	cmp	r3, r2
200016c6:	d100      	bne.n	200016ca <CAN_GetITStatus+0x76>
200016c8:	e072      	b.n	200017b0 <CAN_GetITStatus+0x15c>
200016ca:	e0a8      	b.n	2000181e <CAN_GetITStatus+0x1ca>
200016cc:	2280      	movs	r2, #128	; 0x80
200016ce:	0252      	lsls	r2, r2, #9
200016d0:	4293      	cmp	r3, r2
200016d2:	d057      	beq.n	20001784 <CAN_GetITStatus+0x130>
200016d4:	2280      	movs	r2, #128	; 0x80
200016d6:	0292      	lsls	r2, r2, #10
200016d8:	4293      	cmp	r3, r2
200016da:	d05e      	beq.n	2000179a <CAN_GetITStatus+0x146>
200016dc:	2280      	movs	r2, #128	; 0x80
200016de:	0212      	lsls	r2, r2, #8
200016e0:	4293      	cmp	r3, r2
200016e2:	d100      	bne.n	200016e6 <CAN_GetITStatus+0x92>
200016e4:	e090      	b.n	20001808 <CAN_GetITStatus+0x1b4>
200016e6:	e09a      	b.n	2000181e <CAN_GetITStatus+0x1ca>
    {
      case CAN_IT_TME:
        /* Check CAN_TSR_RQCPx bits */
        itstatus = CheckITStatus(CANx->TSR, CAN_TSR_RQCP0|CAN_TSR_RQCP1|CAN_TSR_RQCP2);  
200016e8:	687b      	ldr	r3, [r7, #4]
200016ea:	689b      	ldr	r3, [r3, #8]
200016ec:	220f      	movs	r2, #15
200016ee:	18bc      	adds	r4, r7, r2
200016f0:	4a53      	ldr	r2, [pc, #332]	; (20001840 <CAN_GetITStatus+0x1ec>)
200016f2:	0011      	movs	r1, r2
200016f4:	0018      	movs	r0, r3
200016f6:	f000 f91b 	bl	20001930 <CheckITStatus>
200016fa:	0003      	movs	r3, r0
200016fc:	7023      	strb	r3, [r4, #0]
        break;
200016fe:	e098      	b.n	20001832 <CAN_GetITStatus+0x1de>
      case CAN_IT_FMP0:
        /* Check CAN_RF0R_FMP0 bit */
        itstatus = CheckITStatus(CANx->RF0R, CAN_RF0R_FMP0);  
20001700:	687b      	ldr	r3, [r7, #4]
20001702:	68db      	ldr	r3, [r3, #12]
20001704:	220f      	movs	r2, #15
20001706:	18bc      	adds	r4, r7, r2
20001708:	2103      	movs	r1, #3
2000170a:	0018      	movs	r0, r3
2000170c:	f000 f910 	bl	20001930 <CheckITStatus>
20001710:	0003      	movs	r3, r0
20001712:	7023      	strb	r3, [r4, #0]
        break;
20001714:	e08d      	b.n	20001832 <CAN_GetITStatus+0x1de>
      case CAN_IT_FF0:
        /* Check CAN_RF0R_FULL0 bit */
        itstatus = CheckITStatus(CANx->RF0R, CAN_RF0R_FULL0);  
20001716:	687b      	ldr	r3, [r7, #4]
20001718:	68db      	ldr	r3, [r3, #12]
2000171a:	220f      	movs	r2, #15
2000171c:	18bc      	adds	r4, r7, r2
2000171e:	2108      	movs	r1, #8
20001720:	0018      	movs	r0, r3
20001722:	f000 f905 	bl	20001930 <CheckITStatus>
20001726:	0003      	movs	r3, r0
20001728:	7023      	strb	r3, [r4, #0]
        break;
2000172a:	e082      	b.n	20001832 <CAN_GetITStatus+0x1de>
      case CAN_IT_FOV0:
        /* Check CAN_RF0R_FOVR0 bit */
        itstatus = CheckITStatus(CANx->RF0R, CAN_RF0R_FOVR0);  
2000172c:	687b      	ldr	r3, [r7, #4]
2000172e:	68db      	ldr	r3, [r3, #12]
20001730:	220f      	movs	r2, #15
20001732:	18bc      	adds	r4, r7, r2
20001734:	2110      	movs	r1, #16
20001736:	0018      	movs	r0, r3
20001738:	f000 f8fa 	bl	20001930 <CheckITStatus>
2000173c:	0003      	movs	r3, r0
2000173e:	7023      	strb	r3, [r4, #0]
        break;
20001740:	e077      	b.n	20001832 <CAN_GetITStatus+0x1de>
      case CAN_IT_FMP1:
        /* Check CAN_RF1R_FMP1 bit */
        itstatus = CheckITStatus(CANx->RF1R, CAN_RF1R_FMP1);  
20001742:	687b      	ldr	r3, [r7, #4]
20001744:	691b      	ldr	r3, [r3, #16]
20001746:	220f      	movs	r2, #15
20001748:	18bc      	adds	r4, r7, r2
2000174a:	2103      	movs	r1, #3
2000174c:	0018      	movs	r0, r3
2000174e:	f000 f8ef 	bl	20001930 <CheckITStatus>
20001752:	0003      	movs	r3, r0
20001754:	7023      	strb	r3, [r4, #0]
        break;
20001756:	e06c      	b.n	20001832 <CAN_GetITStatus+0x1de>
      case CAN_IT_FF1:
        /* Check CAN_RF1R_FULL1 bit */
        itstatus = CheckITStatus(CANx->RF1R, CAN_RF1R_FULL1);  
20001758:	687b      	ldr	r3, [r7, #4]
2000175a:	691b      	ldr	r3, [r3, #16]
2000175c:	220f      	movs	r2, #15
2000175e:	18bc      	adds	r4, r7, r2
20001760:	2108      	movs	r1, #8
20001762:	0018      	movs	r0, r3
20001764:	f000 f8e4 	bl	20001930 <CheckITStatus>
20001768:	0003      	movs	r3, r0
2000176a:	7023      	strb	r3, [r4, #0]
        break;
2000176c:	e061      	b.n	20001832 <CAN_GetITStatus+0x1de>
      case CAN_IT_FOV1:
        /* Check CAN_RF1R_FOVR1 bit */
        itstatus = CheckITStatus(CANx->RF1R, CAN_RF1R_FOVR1);  
2000176e:	687b      	ldr	r3, [r7, #4]
20001770:	691b      	ldr	r3, [r3, #16]
20001772:	220f      	movs	r2, #15
20001774:	18bc      	adds	r4, r7, r2
20001776:	2110      	movs	r1, #16
20001778:	0018      	movs	r0, r3
2000177a:	f000 f8d9 	bl	20001930 <CheckITStatus>
2000177e:	0003      	movs	r3, r0
20001780:	7023      	strb	r3, [r4, #0]
        break;
20001782:	e056      	b.n	20001832 <CAN_GetITStatus+0x1de>
      case CAN_IT_WKU:
        /* Check CAN_MSR_WKUI bit */
        itstatus = CheckITStatus(CANx->MSR, CAN_MSR_WKUI);  
20001784:	687b      	ldr	r3, [r7, #4]
20001786:	685b      	ldr	r3, [r3, #4]
20001788:	220f      	movs	r2, #15
2000178a:	18bc      	adds	r4, r7, r2
2000178c:	2108      	movs	r1, #8
2000178e:	0018      	movs	r0, r3
20001790:	f000 f8ce 	bl	20001930 <CheckITStatus>
20001794:	0003      	movs	r3, r0
20001796:	7023      	strb	r3, [r4, #0]
        break;
20001798:	e04b      	b.n	20001832 <CAN_GetITStatus+0x1de>
      case CAN_IT_SLK:
        /* Check CAN_MSR_SLAKI bit */
        itstatus = CheckITStatus(CANx->MSR, CAN_MSR_SLAKI);  
2000179a:	687b      	ldr	r3, [r7, #4]
2000179c:	685b      	ldr	r3, [r3, #4]
2000179e:	220f      	movs	r2, #15
200017a0:	18bc      	adds	r4, r7, r2
200017a2:	2110      	movs	r1, #16
200017a4:	0018      	movs	r0, r3
200017a6:	f000 f8c3 	bl	20001930 <CheckITStatus>
200017aa:	0003      	movs	r3, r0
200017ac:	7023      	strb	r3, [r4, #0]
        break;
200017ae:	e040      	b.n	20001832 <CAN_GetITStatus+0x1de>
      case CAN_IT_EWG:
        /* Check CAN_ESR_EWGF bit */
        itstatus = CheckITStatus(CANx->ESR, CAN_ESR_EWGF);  
200017b0:	687b      	ldr	r3, [r7, #4]
200017b2:	699b      	ldr	r3, [r3, #24]
200017b4:	220f      	movs	r2, #15
200017b6:	18bc      	adds	r4, r7, r2
200017b8:	2101      	movs	r1, #1
200017ba:	0018      	movs	r0, r3
200017bc:	f000 f8b8 	bl	20001930 <CheckITStatus>
200017c0:	0003      	movs	r3, r0
200017c2:	7023      	strb	r3, [r4, #0]
        break;
200017c4:	e035      	b.n	20001832 <CAN_GetITStatus+0x1de>
      case CAN_IT_EPV:
        /* Check CAN_ESR_EPVF bit */
        itstatus = CheckITStatus(CANx->ESR, CAN_ESR_EPVF);  
200017c6:	687b      	ldr	r3, [r7, #4]
200017c8:	699b      	ldr	r3, [r3, #24]
200017ca:	220f      	movs	r2, #15
200017cc:	18bc      	adds	r4, r7, r2
200017ce:	2102      	movs	r1, #2
200017d0:	0018      	movs	r0, r3
200017d2:	f000 f8ad 	bl	20001930 <CheckITStatus>
200017d6:	0003      	movs	r3, r0
200017d8:	7023      	strb	r3, [r4, #0]
        break;
200017da:	e02a      	b.n	20001832 <CAN_GetITStatus+0x1de>
      case CAN_IT_BOF:
        /* Check CAN_ESR_BOFF bit */
        itstatus = CheckITStatus(CANx->ESR, CAN_ESR_BOFF);  
200017dc:	687b      	ldr	r3, [r7, #4]
200017de:	699b      	ldr	r3, [r3, #24]
200017e0:	220f      	movs	r2, #15
200017e2:	18bc      	adds	r4, r7, r2
200017e4:	2104      	movs	r1, #4
200017e6:	0018      	movs	r0, r3
200017e8:	f000 f8a2 	bl	20001930 <CheckITStatus>
200017ec:	0003      	movs	r3, r0
200017ee:	7023      	strb	r3, [r4, #0]
        break;
200017f0:	e01f      	b.n	20001832 <CAN_GetITStatus+0x1de>
      case CAN_IT_LEC:
        /* Check CAN_ESR_LEC bit */
        itstatus = CheckITStatus(CANx->ESR, CAN_ESR_LEC);  
200017f2:	687b      	ldr	r3, [r7, #4]
200017f4:	699b      	ldr	r3, [r3, #24]
200017f6:	220f      	movs	r2, #15
200017f8:	18bc      	adds	r4, r7, r2
200017fa:	2170      	movs	r1, #112	; 0x70
200017fc:	0018      	movs	r0, r3
200017fe:	f000 f897 	bl	20001930 <CheckITStatus>
20001802:	0003      	movs	r3, r0
20001804:	7023      	strb	r3, [r4, #0]
        break;
20001806:	e014      	b.n	20001832 <CAN_GetITStatus+0x1de>
      case CAN_IT_ERR:
        /* Check CAN_MSR_ERRI bit */ 
        itstatus = CheckITStatus(CANx->MSR, CAN_MSR_ERRI); 
20001808:	687b      	ldr	r3, [r7, #4]
2000180a:	685b      	ldr	r3, [r3, #4]
2000180c:	220f      	movs	r2, #15
2000180e:	18bc      	adds	r4, r7, r2
20001810:	2104      	movs	r1, #4
20001812:	0018      	movs	r0, r3
20001814:	f000 f88c 	bl	20001930 <CheckITStatus>
20001818:	0003      	movs	r3, r0
2000181a:	7023      	strb	r3, [r4, #0]
        break;
2000181c:	e009      	b.n	20001832 <CAN_GetITStatus+0x1de>
      default:
        /* in case of error, return RESET */
        itstatus = RESET;
2000181e:	230f      	movs	r3, #15
20001820:	18fb      	adds	r3, r7, r3
20001822:	2200      	movs	r2, #0
20001824:	701a      	strb	r2, [r3, #0]
        break;
20001826:	46c0      	nop			; (mov r8, r8)
20001828:	e003      	b.n	20001832 <CAN_GetITStatus+0x1de>
    }
  }
  else
  {
   /* in case the Interrupt is not enabled, return RESET */
    itstatus  = RESET;
2000182a:	230f      	movs	r3, #15
2000182c:	18fb      	adds	r3, r7, r3
2000182e:	2200      	movs	r2, #0
20001830:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return the CAN_IT status */
  return  itstatus;
20001832:	230f      	movs	r3, #15
20001834:	18fb      	adds	r3, r7, r3
20001836:	781b      	ldrb	r3, [r3, #0]
}
20001838:	0018      	movs	r0, r3
2000183a:	46bd      	mov	sp, r7
2000183c:	b005      	add	sp, #20
2000183e:	bd90      	pop	{r4, r7, pc}
20001840:	00010101 	andeq	r0, r1, r1, lsl #2

20001844 <CAN_ClearITPendingBit>:
  *            @arg CAN_IT_ERR: Error Interrupt
  * @note   CAN3 peripheral is available only for STM32F413_423xx devices
  * @retval None
  */
void CAN_ClearITPendingBit(CAN_TypeDef* CANx, uint32_t CAN_IT)
{
20001844:	b580      	push	{r7, lr}
20001846:	b082      	sub	sp, #8
20001848:	af00      	add	r7, sp, #0
2000184a:	6078      	str	r0, [r7, #4]
2000184c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_CLEAR_IT(CAN_IT));

  switch (CAN_IT)
2000184e:	683b      	ldr	r3, [r7, #0]
20001850:	2280      	movs	r2, #128	; 0x80
20001852:	0052      	lsls	r2, r2, #1
20001854:	4293      	cmp	r3, r2
20001856:	d04a      	beq.n	200018ee <CAN_ClearITPendingBit+0xaa>
20001858:	2280      	movs	r2, #128	; 0x80
2000185a:	0052      	lsls	r2, r2, #1
2000185c:	4293      	cmp	r3, r2
2000185e:	d80c      	bhi.n	2000187a <CAN_ClearITPendingBit+0x36>
20001860:	2b08      	cmp	r3, #8
20001862:	d030      	beq.n	200018c6 <CAN_ClearITPendingBit+0x82>
20001864:	d804      	bhi.n	20001870 <CAN_ClearITPendingBit+0x2c>
20001866:	2b01      	cmp	r3, #1
20001868:	d025      	beq.n	200018b6 <CAN_ClearITPendingBit+0x72>
2000186a:	2b04      	cmp	r3, #4
2000186c:	d027      	beq.n	200018be <CAN_ClearITPendingBit+0x7a>
      /* Clear CAN_MSR_ERRI (rc_w1) */
      CANx->MSR = CAN_MSR_ERRI; 
       /* @note BOFF, EPVF and EWGF Flags are cleared by hardware depending on the CAN Bus status*/
       break;
    default:
       break;
2000186e:	e058      	b.n	20001922 <CAN_ClearITPendingBit+0xde>
  switch (CAN_IT)
20001870:	2b20      	cmp	r3, #32
20001872:	d02c      	beq.n	200018ce <CAN_ClearITPendingBit+0x8a>
20001874:	2b40      	cmp	r3, #64	; 0x40
20001876:	d02e      	beq.n	200018d6 <CAN_ClearITPendingBit+0x92>
       break;
20001878:	e053      	b.n	20001922 <CAN_ClearITPendingBit+0xde>
  switch (CAN_IT)
2000187a:	2280      	movs	r2, #128	; 0x80
2000187c:	0112      	lsls	r2, r2, #4
2000187e:	4293      	cmp	r3, r2
20001880:	d041      	beq.n	20001906 <CAN_ClearITPendingBit+0xc2>
20001882:	2280      	movs	r2, #128	; 0x80
20001884:	0112      	lsls	r2, r2, #4
20001886:	4293      	cmp	r3, r2
20001888:	d808      	bhi.n	2000189c <CAN_ClearITPendingBit+0x58>
2000188a:	2280      	movs	r2, #128	; 0x80
2000188c:	0092      	lsls	r2, r2, #2
2000188e:	4293      	cmp	r3, r2
20001890:	d031      	beq.n	200018f6 <CAN_ClearITPendingBit+0xb2>
20001892:	2280      	movs	r2, #128	; 0x80
20001894:	00d2      	lsls	r2, r2, #3
20001896:	4293      	cmp	r3, r2
20001898:	d031      	beq.n	200018fe <CAN_ClearITPendingBit+0xba>
       break;
2000189a:	e042      	b.n	20001922 <CAN_ClearITPendingBit+0xde>
  switch (CAN_IT)
2000189c:	2280      	movs	r2, #128	; 0x80
2000189e:	0252      	lsls	r2, r2, #9
200018a0:	4293      	cmp	r3, r2
200018a2:	d01c      	beq.n	200018de <CAN_ClearITPendingBit+0x9a>
200018a4:	2280      	movs	r2, #128	; 0x80
200018a6:	0292      	lsls	r2, r2, #10
200018a8:	4293      	cmp	r3, r2
200018aa:	d01c      	beq.n	200018e6 <CAN_ClearITPendingBit+0xa2>
200018ac:	2280      	movs	r2, #128	; 0x80
200018ae:	0212      	lsls	r2, r2, #8
200018b0:	4293      	cmp	r3, r2
200018b2:	d02f      	beq.n	20001914 <CAN_ClearITPendingBit+0xd0>
       break;
200018b4:	e035      	b.n	20001922 <CAN_ClearITPendingBit+0xde>
      CANx->TSR = CAN_TSR_RQCP0|CAN_TSR_RQCP1|CAN_TSR_RQCP2;  
200018b6:	687b      	ldr	r3, [r7, #4]
200018b8:	4a1c      	ldr	r2, [pc, #112]	; (2000192c <CAN_ClearITPendingBit+0xe8>)
200018ba:	609a      	str	r2, [r3, #8]
      break;
200018bc:	e031      	b.n	20001922 <CAN_ClearITPendingBit+0xde>
      CANx->RF0R = CAN_RF0R_FULL0; 
200018be:	687b      	ldr	r3, [r7, #4]
200018c0:	2208      	movs	r2, #8
200018c2:	60da      	str	r2, [r3, #12]
      break;
200018c4:	e02d      	b.n	20001922 <CAN_ClearITPendingBit+0xde>
      CANx->RF0R = CAN_RF0R_FOVR0; 
200018c6:	687b      	ldr	r3, [r7, #4]
200018c8:	2210      	movs	r2, #16
200018ca:	60da      	str	r2, [r3, #12]
      break;
200018cc:	e029      	b.n	20001922 <CAN_ClearITPendingBit+0xde>
      CANx->RF1R = CAN_RF1R_FULL1;  
200018ce:	687b      	ldr	r3, [r7, #4]
200018d0:	2208      	movs	r2, #8
200018d2:	611a      	str	r2, [r3, #16]
      break;
200018d4:	e025      	b.n	20001922 <CAN_ClearITPendingBit+0xde>
      CANx->RF1R = CAN_RF1R_FOVR1; 
200018d6:	687b      	ldr	r3, [r7, #4]
200018d8:	2210      	movs	r2, #16
200018da:	611a      	str	r2, [r3, #16]
      break;
200018dc:	e021      	b.n	20001922 <CAN_ClearITPendingBit+0xde>
      CANx->MSR = CAN_MSR_WKUI;  
200018de:	687b      	ldr	r3, [r7, #4]
200018e0:	2208      	movs	r2, #8
200018e2:	605a      	str	r2, [r3, #4]
      break;
200018e4:	e01d      	b.n	20001922 <CAN_ClearITPendingBit+0xde>
      CANx->MSR = CAN_MSR_SLAKI;   
200018e6:	687b      	ldr	r3, [r7, #4]
200018e8:	2210      	movs	r2, #16
200018ea:	605a      	str	r2, [r3, #4]
      break;
200018ec:	e019      	b.n	20001922 <CAN_ClearITPendingBit+0xde>
      CANx->MSR = CAN_MSR_ERRI;
200018ee:	687b      	ldr	r3, [r7, #4]
200018f0:	2204      	movs	r2, #4
200018f2:	605a      	str	r2, [r3, #4]
      break;
200018f4:	e015      	b.n	20001922 <CAN_ClearITPendingBit+0xde>
      CANx->MSR = CAN_MSR_ERRI; 
200018f6:	687b      	ldr	r3, [r7, #4]
200018f8:	2204      	movs	r2, #4
200018fa:	605a      	str	r2, [r3, #4]
      break;
200018fc:	e011      	b.n	20001922 <CAN_ClearITPendingBit+0xde>
      CANx->MSR = CAN_MSR_ERRI; 
200018fe:	687b      	ldr	r3, [r7, #4]
20001900:	2204      	movs	r2, #4
20001902:	605a      	str	r2, [r3, #4]
       break;
20001904:	e00d      	b.n	20001922 <CAN_ClearITPendingBit+0xde>
      CANx->ESR = RESET; 
20001906:	687b      	ldr	r3, [r7, #4]
20001908:	2200      	movs	r2, #0
2000190a:	619a      	str	r2, [r3, #24]
      CANx->MSR = CAN_MSR_ERRI; 
2000190c:	687b      	ldr	r3, [r7, #4]
2000190e:	2204      	movs	r2, #4
20001910:	605a      	str	r2, [r3, #4]
      break;
20001912:	e006      	b.n	20001922 <CAN_ClearITPendingBit+0xde>
      CANx->ESR = RESET; 
20001914:	687b      	ldr	r3, [r7, #4]
20001916:	2200      	movs	r2, #0
20001918:	619a      	str	r2, [r3, #24]
      CANx->MSR = CAN_MSR_ERRI; 
2000191a:	687b      	ldr	r3, [r7, #4]
2000191c:	2204      	movs	r2, #4
2000191e:	605a      	str	r2, [r3, #4]
       break;
20001920:	46c0      	nop			; (mov r8, r8)
   }
}
20001922:	46c0      	nop			; (mov r8, r8)
20001924:	46bd      	mov	sp, r7
20001926:	b002      	add	sp, #8
20001928:	bd80      	pop	{r7, pc}
2000192a:	46c0      	nop			; (mov r8, r8)
2000192c:	00010101 	andeq	r0, r1, r1, lsl #2

20001930 <CheckITStatus>:
  * @param  CAN_Reg: specifies the CAN interrupt register to check.
  * @param  It_Bit: specifies the interrupt source bit to check.
  * @retval The new state of the CAN Interrupt (SET or RESET).
  */
static ITStatus CheckITStatus(uint32_t CAN_Reg, uint32_t It_Bit)
{
20001930:	b580      	push	{r7, lr}
20001932:	b084      	sub	sp, #16
20001934:	af00      	add	r7, sp, #0
20001936:	6078      	str	r0, [r7, #4]
20001938:	6039      	str	r1, [r7, #0]
  ITStatus pendingbitstatus = RESET;
2000193a:	230f      	movs	r3, #15
2000193c:	18fb      	adds	r3, r7, r3
2000193e:	2200      	movs	r2, #0
20001940:	701a      	strb	r2, [r3, #0]
  
  if ((CAN_Reg & It_Bit) != (uint32_t)RESET)
20001942:	687b      	ldr	r3, [r7, #4]
20001944:	683a      	ldr	r2, [r7, #0]
20001946:	4013      	ands	r3, r2
20001948:	d004      	beq.n	20001954 <CheckITStatus+0x24>
  {
    /* CAN_IT is set */
    pendingbitstatus = SET;
2000194a:	230f      	movs	r3, #15
2000194c:	18fb      	adds	r3, r7, r3
2000194e:	2201      	movs	r2, #1
20001950:	701a      	strb	r2, [r3, #0]
20001952:	e003      	b.n	2000195c <CheckITStatus+0x2c>
  }
  else
  {
    /* CAN_IT is reset */
    pendingbitstatus = RESET;
20001954:	230f      	movs	r3, #15
20001956:	18fb      	adds	r3, r7, r3
20001958:	2200      	movs	r2, #0
2000195a:	701a      	strb	r2, [r3, #0]
  }
  return pendingbitstatus;
2000195c:	230f      	movs	r3, #15
2000195e:	18fb      	adds	r3, r7, r3
20001960:	781b      	ldrb	r3, [r3, #0]
}
20001962:	0018      	movs	r0, r3
20001964:	46bd      	mov	sp, r7
20001966:	b004      	add	sp, #16
20001968:	bd80      	pop	{r7, pc}
2000196a:	46c0      	nop			; (mov r8, r8)

2000196c <NVIC_SetPriority>:
{
2000196c:	b580      	push	{r7, lr}
2000196e:	b082      	sub	sp, #8
20001970:	af00      	add	r7, sp, #0
20001972:	0002      	movs	r2, r0
20001974:	6039      	str	r1, [r7, #0]
20001976:	1dfb      	adds	r3, r7, #7
20001978:	701a      	strb	r2, [r3, #0]
  if((int32_t)IRQn < 0) {
2000197a:	1dfb      	adds	r3, r7, #7
2000197c:	781b      	ldrb	r3, [r3, #0]
2000197e:	2b7f      	cmp	r3, #127	; 0x7f
20001980:	d90d      	bls.n	2000199e <NVIC_SetPriority+0x32>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
20001982:	683b      	ldr	r3, [r7, #0]
20001984:	b2da      	uxtb	r2, r3
20001986:	490f      	ldr	r1, [pc, #60]	; (200019c4 <NVIC_SetPriority+0x58>)
20001988:	1dfb      	adds	r3, r7, #7
2000198a:	781b      	ldrb	r3, [r3, #0]
2000198c:	0018      	movs	r0, r3
2000198e:	230f      	movs	r3, #15
20001990:	4003      	ands	r3, r0
20001992:	3b04      	subs	r3, #4
20001994:	0112      	lsls	r2, r2, #4
20001996:	b2d2      	uxtb	r2, r2
20001998:	18cb      	adds	r3, r1, r3
2000199a:	761a      	strb	r2, [r3, #24]
}
2000199c:	e00d      	b.n	200019ba <NVIC_SetPriority+0x4e>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
2000199e:	683b      	ldr	r3, [r7, #0]
200019a0:	b2db      	uxtb	r3, r3
200019a2:	4909      	ldr	r1, [pc, #36]	; (200019c8 <NVIC_SetPriority+0x5c>)
200019a4:	1dfa      	adds	r2, r7, #7
200019a6:	7812      	ldrb	r2, [r2, #0]
200019a8:	b252      	sxtb	r2, r2
200019aa:	011b      	lsls	r3, r3, #4
200019ac:	b2d8      	uxtb	r0, r3
200019ae:	23c0      	movs	r3, #192	; 0xc0
200019b0:	009b      	lsls	r3, r3, #2
200019b2:	188a      	adds	r2, r1, r2
200019b4:	18d3      	adds	r3, r2, r3
200019b6:	1c02      	adds	r2, r0, #0
200019b8:	701a      	strb	r2, [r3, #0]
}
200019ba:	46c0      	nop			; (mov r8, r8)
200019bc:	46bd      	mov	sp, r7
200019be:	b002      	add	sp, #8
200019c0:	bd80      	pop	{r7, pc}
200019c2:	46c0      	nop			; (mov r8, r8)
200019c4:	e000ed00 	and	lr, r0, r0, lsl #26
200019c8:	e000e100 	and	lr, r0, r0, lsl #2

200019cc <SysTick_Config>:
    function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
200019cc:	b580      	push	{r7, lr}
200019ce:	b082      	sub	sp, #8
200019d0:	af00      	add	r7, sp, #0
200019d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk) { return (1UL); }    /* Reload value impossible */
200019d4:	687b      	ldr	r3, [r7, #4]
200019d6:	3b01      	subs	r3, #1
200019d8:	4a0c      	ldr	r2, [pc, #48]	; (20001a0c <SysTick_Config+0x40>)
200019da:	4293      	cmp	r3, r2
200019dc:	d901      	bls.n	200019e2 <SysTick_Config+0x16>
200019de:	2301      	movs	r3, #1
200019e0:	e010      	b.n	20001a04 <SysTick_Config+0x38>

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
200019e2:	4b0b      	ldr	r3, [pc, #44]	; (20001a10 <SysTick_Config+0x44>)
200019e4:	687a      	ldr	r2, [r7, #4]
200019e6:	3a01      	subs	r2, #1
200019e8:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
200019ea:	2301      	movs	r3, #1
200019ec:	425b      	negs	r3, r3
200019ee:	210f      	movs	r1, #15
200019f0:	0018      	movs	r0, r3
200019f2:	f7ff ffbb 	bl	2000196c <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
200019f6:	4b06      	ldr	r3, [pc, #24]	; (20001a10 <SysTick_Config+0x44>)
200019f8:	2200      	movs	r2, #0
200019fa:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
200019fc:	4b04      	ldr	r3, [pc, #16]	; (20001a10 <SysTick_Config+0x44>)
200019fe:	2207      	movs	r2, #7
20001a00:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
20001a02:	2300      	movs	r3, #0
}
20001a04:	0018      	movs	r0, r3
20001a06:	46bd      	mov	sp, r7
20001a08:	b002      	add	sp, #8
20001a0a:	bd80      	pop	{r7, pc}
20001a0c:	00ffffff 	ldrshteq	pc, [pc], #255	; <UNPREDICTABLE>
20001a10:	e000e010 	and	lr, r0, r0, lsl r0

20001a14 <RCC_DeInit>:
  *            - LSI, LSE and RTC clocks 
  * @param  None
  * @retval None
  */
void RCC_DeInit(void)
{
20001a14:	b580      	push	{r7, lr}
20001a16:	af00      	add	r7, sp, #0
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
20001a18:	4b14      	ldr	r3, [pc, #80]	; (20001a6c <RCC_DeInit+0x58>)
20001a1a:	681a      	ldr	r2, [r3, #0]
20001a1c:	4b13      	ldr	r3, [pc, #76]	; (20001a6c <RCC_DeInit+0x58>)
20001a1e:	2101      	movs	r1, #1
20001a20:	430a      	orrs	r2, r1
20001a22:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
20001a24:	4b11      	ldr	r3, [pc, #68]	; (20001a6c <RCC_DeInit+0x58>)
20001a26:	2200      	movs	r2, #0
20001a28:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON, PLLON, PLLI2S and PLLSAI(STM32F42xxx/43xxx/446xx/469xx/479xx devices) bits */
  RCC->CR &= (uint32_t)0xEAF6FFFF;
20001a2a:	4b10      	ldr	r3, [pc, #64]	; (20001a6c <RCC_DeInit+0x58>)
20001a2c:	681a      	ldr	r2, [r3, #0]
20001a2e:	4b0f      	ldr	r3, [pc, #60]	; (20001a6c <RCC_DeInit+0x58>)
20001a30:	490f      	ldr	r1, [pc, #60]	; (20001a70 <RCC_DeInit+0x5c>)
20001a32:	400a      	ands	r2, r1
20001a34:	601a      	str	r2, [r3, #0]
  
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
20001a36:	4b0d      	ldr	r3, [pc, #52]	; (20001a6c <RCC_DeInit+0x58>)
20001a38:	4a0e      	ldr	r2, [pc, #56]	; (20001a74 <RCC_DeInit+0x60>)
20001a3a:	605a      	str	r2, [r3, #4]

#if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F401xx) || defined(STM32F411xE) || defined(STM32F446xx) || defined(STM32F413_423xx) || defined(STM32F469_479xx)  
  /* Reset PLLI2SCFGR register */
  RCC->PLLI2SCFGR = 0x20003000;
20001a3c:	4a0b      	ldr	r2, [pc, #44]	; (20001a6c <RCC_DeInit+0x58>)
20001a3e:	2384      	movs	r3, #132	; 0x84
20001a40:	490d      	ldr	r1, [pc, #52]	; (20001a78 <RCC_DeInit+0x64>)
20001a42:	50d1      	str	r1, [r2, r3]
#endif /* STM32F40_41xxx || STM32F427_437xx || STM32F429_439xx || STM32F401xx || STM32F411xE || STM32F446xx || STM32F413_423xx || STM32F469_479xx */

#if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F446xx) || defined(STM32F469_479xx) 
  /* Reset PLLSAICFGR register, only available for STM32F42xxx/43xxx/446xx/469xx/479xx devices */
  RCC->PLLSAICFGR = 0x24003000;
20001a44:	4a09      	ldr	r2, [pc, #36]	; (20001a6c <RCC_DeInit+0x58>)
20001a46:	2388      	movs	r3, #136	; 0x88
20001a48:	490c      	ldr	r1, [pc, #48]	; (20001a7c <RCC_DeInit+0x68>)
20001a4a:	50d1      	str	r1, [r2, r3]
#endif /* STM32F40_41xxx || STM32F427_437xx || STM32F429_439xx || STM32F446xx || STM32F469_479xx */
  
  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
20001a4c:	4b07      	ldr	r3, [pc, #28]	; (20001a6c <RCC_DeInit+0x58>)
20001a4e:	681a      	ldr	r2, [r3, #0]
20001a50:	4b06      	ldr	r3, [pc, #24]	; (20001a6c <RCC_DeInit+0x58>)
20001a52:	490b      	ldr	r1, [pc, #44]	; (20001a80 <RCC_DeInit+0x6c>)
20001a54:	400a      	ands	r2, r1
20001a56:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
20001a58:	4b04      	ldr	r3, [pc, #16]	; (20001a6c <RCC_DeInit+0x58>)
20001a5a:	2200      	movs	r2, #0
20001a5c:	60da      	str	r2, [r3, #12]

  /* Disable Timers clock prescalers selection, only available for STM32F42/43xxx and STM32F413_423xx devices */
  RCC->DCKCFGR = 0x00000000;
20001a5e:	4a03      	ldr	r2, [pc, #12]	; (20001a6c <RCC_DeInit+0x58>)
20001a60:	238c      	movs	r3, #140	; 0x8c
20001a62:	2100      	movs	r1, #0
20001a64:	50d1      	str	r1, [r2, r3]
  
#if defined(STM32F410xx) || defined(STM32F413_423xx)
  /* Disable LPTIM and FMPI2C clock prescalers selection, only available for STM32F410xx and STM32F413_423xx devices */
  RCC->DCKCFGR2 = 0x00000000;
#endif /* STM32F410xx || STM32F413_423xx */  
}
20001a66:	46c0      	nop			; (mov r8, r8)
20001a68:	46bd      	mov	sp, r7
20001a6a:	bd80      	pop	{r7, pc}
20001a6c:	40023800 	andmi	r3, r2, r0, lsl #16
20001a70:	eaf6ffff 	b	1fdc1a74 <startup-0x23e58c>
20001a74:	24003010 	strcs	r3, [r0], #-16
20001a78:	20003000 	andcs	r3, r0, r0
20001a7c:	24003000 	strcs	r3, [r0], #-0
20001a80:	fffbffff 			; <UNDEFINED> instruction: 0xfffbffff

20001a84 <RCC_HSEConfig>:
  *            @arg RCC_HSE_ON: turn ON the HSE oscillator
  *            @arg RCC_HSE_Bypass: HSE oscillator bypassed with external clock
  * @retval None
  */
void RCC_HSEConfig(uint8_t RCC_HSE)
{
20001a84:	b580      	push	{r7, lr}
20001a86:	b082      	sub	sp, #8
20001a88:	af00      	add	r7, sp, #0
20001a8a:	0002      	movs	r2, r0
20001a8c:	1dfb      	adds	r3, r7, #7
20001a8e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_HSE(RCC_HSE));

  /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
  *(__IO uint8_t *) CR_BYTE3_ADDRESS = RCC_HSE_OFF;
20001a90:	4b05      	ldr	r3, [pc, #20]	; (20001aa8 <RCC_HSEConfig+0x24>)
20001a92:	2200      	movs	r2, #0
20001a94:	701a      	strb	r2, [r3, #0]

  /* Set the new HSE configuration -------------------------------------------*/
  *(__IO uint8_t *) CR_BYTE3_ADDRESS = RCC_HSE;
20001a96:	4a04      	ldr	r2, [pc, #16]	; (20001aa8 <RCC_HSEConfig+0x24>)
20001a98:	1dfb      	adds	r3, r7, #7
20001a9a:	781b      	ldrb	r3, [r3, #0]
20001a9c:	7013      	strb	r3, [r2, #0]
}
20001a9e:	46c0      	nop			; (mov r8, r8)
20001aa0:	46bd      	mov	sp, r7
20001aa2:	b002      	add	sp, #8
20001aa4:	bd80      	pop	{r7, pc}
20001aa6:	46c0      	nop			; (mov r8, r8)
20001aa8:	40023802 	andmi	r3, r2, r2, lsl #16

20001aac <RCC_WaitForHSEStartUp>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: HSE oscillator is stable and ready to use
  *          - ERROR: HSE oscillator not yet ready
  */
ErrorStatus RCC_WaitForHSEStartUp(void)
{
20001aac:	b590      	push	{r4, r7, lr}
20001aae:	b083      	sub	sp, #12
20001ab0:	af00      	add	r7, sp, #0
  __IO uint32_t startupcounter = 0;
20001ab2:	2300      	movs	r3, #0
20001ab4:	603b      	str	r3, [r7, #0]
  ErrorStatus status = ERROR;
20001ab6:	1dfb      	adds	r3, r7, #7
20001ab8:	2200      	movs	r2, #0
20001aba:	701a      	strb	r2, [r3, #0]
  FlagStatus hsestatus = RESET;
20001abc:	1dbb      	adds	r3, r7, #6
20001abe:	2200      	movs	r2, #0
20001ac0:	701a      	strb	r2, [r3, #0]
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    hsestatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
20001ac2:	1dbc      	adds	r4, r7, #6
20001ac4:	2031      	movs	r0, #49	; 0x31
20001ac6:	f000 fd9b 	bl	20002600 <RCC_GetFlagStatus>
20001aca:	0003      	movs	r3, r0
20001acc:	7023      	strb	r3, [r4, #0]
    startupcounter++;
20001ace:	683b      	ldr	r3, [r7, #0]
20001ad0:	3301      	adds	r3, #1
20001ad2:	603b      	str	r3, [r7, #0]
  } while((startupcounter != HSE_STARTUP_TIMEOUT) && (hsestatus == RESET));
20001ad4:	683a      	ldr	r2, [r7, #0]
20001ad6:	23a0      	movs	r3, #160	; 0xa0
20001ad8:	01db      	lsls	r3, r3, #7
20001ada:	429a      	cmp	r2, r3
20001adc:	d003      	beq.n	20001ae6 <RCC_WaitForHSEStartUp+0x3a>
20001ade:	1dbb      	adds	r3, r7, #6
20001ae0:	781b      	ldrb	r3, [r3, #0]
20001ae2:	2b00      	cmp	r3, #0
20001ae4:	d0ed      	beq.n	20001ac2 <RCC_WaitForHSEStartUp+0x16>

  if (RCC_GetFlagStatus(RCC_FLAG_HSERDY) != RESET)
20001ae6:	2031      	movs	r0, #49	; 0x31
20001ae8:	f000 fd8a 	bl	20002600 <RCC_GetFlagStatus>
20001aec:	1e03      	subs	r3, r0, #0
20001aee:	d003      	beq.n	20001af8 <RCC_WaitForHSEStartUp+0x4c>
  {
    status = SUCCESS;
20001af0:	1dfb      	adds	r3, r7, #7
20001af2:	2201      	movs	r2, #1
20001af4:	701a      	strb	r2, [r3, #0]
20001af6:	e002      	b.n	20001afe <RCC_WaitForHSEStartUp+0x52>
  }
  else
  {
    status = ERROR;
20001af8:	1dfb      	adds	r3, r7, #7
20001afa:	2200      	movs	r2, #0
20001afc:	701a      	strb	r2, [r3, #0]
  }
  return (status);
20001afe:	1dfb      	adds	r3, r7, #7
20001b00:	781b      	ldrb	r3, [r3, #0]
}
20001b02:	0018      	movs	r0, r3
20001b04:	46bd      	mov	sp, r7
20001b06:	b003      	add	sp, #12
20001b08:	bd90      	pop	{r4, r7, pc}

20001b0a <RCC_AdjustHSICalibrationValue>:
  * @param  HSICalibrationValue: specifies the calibration trimming value.
  *         This parameter must be a number between 0 and 0x1F.
  * @retval None
  */
void RCC_AdjustHSICalibrationValue(uint8_t HSICalibrationValue)
{
20001b0a:	b580      	push	{r7, lr}
20001b0c:	b084      	sub	sp, #16
20001b0e:	af00      	add	r7, sp, #0
20001b10:	0002      	movs	r2, r0
20001b12:	1dfb      	adds	r3, r7, #7
20001b14:	701a      	strb	r2, [r3, #0]
  uint32_t tmpreg = 0;
20001b16:	2300      	movs	r3, #0
20001b18:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_CALIBRATION_VALUE(HSICalibrationValue));

  tmpreg = RCC->CR;
20001b1a:	4b0a      	ldr	r3, [pc, #40]	; (20001b44 <RCC_AdjustHSICalibrationValue+0x3a>)
20001b1c:	681b      	ldr	r3, [r3, #0]
20001b1e:	60fb      	str	r3, [r7, #12]

  /* Clear HSITRIM[4:0] bits */
  tmpreg &= ~RCC_CR_HSITRIM;
20001b20:	68fb      	ldr	r3, [r7, #12]
20001b22:	22f8      	movs	r2, #248	; 0xf8
20001b24:	4393      	bics	r3, r2
20001b26:	60fb      	str	r3, [r7, #12]

  /* Set the HSITRIM[4:0] bits according to HSICalibrationValue value */
  tmpreg |= (uint32_t)HSICalibrationValue << 3;
20001b28:	1dfb      	adds	r3, r7, #7
20001b2a:	781b      	ldrb	r3, [r3, #0]
20001b2c:	00db      	lsls	r3, r3, #3
20001b2e:	68fa      	ldr	r2, [r7, #12]
20001b30:	4313      	orrs	r3, r2
20001b32:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CR = tmpreg;
20001b34:	4b03      	ldr	r3, [pc, #12]	; (20001b44 <RCC_AdjustHSICalibrationValue+0x3a>)
20001b36:	68fa      	ldr	r2, [r7, #12]
20001b38:	601a      	str	r2, [r3, #0]
}
20001b3a:	46c0      	nop			; (mov r8, r8)
20001b3c:	46bd      	mov	sp, r7
20001b3e:	b004      	add	sp, #16
20001b40:	bd80      	pop	{r7, pc}
20001b42:	46c0      	nop			; (mov r8, r8)
20001b44:	40023800 	andmi	r3, r2, r0, lsl #16

20001b48 <RCC_HSICmd>:
  * @note   When the HSI is stopped, HSIRDY flag goes low after 6 HSI oscillator
  *         clock cycles.  
  * @retval None
  */
void RCC_HSICmd(FunctionalState NewState)
{
20001b48:	b580      	push	{r7, lr}
20001b4a:	b082      	sub	sp, #8
20001b4c:	af00      	add	r7, sp, #0
20001b4e:	0002      	movs	r2, r0
20001b50:	1dfb      	adds	r3, r7, #7
20001b52:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CR_HSION_BB = (uint32_t)NewState;
20001b54:	4b03      	ldr	r3, [pc, #12]	; (20001b64 <RCC_HSICmd+0x1c>)
20001b56:	1dfa      	adds	r2, r7, #7
20001b58:	7812      	ldrb	r2, [r2, #0]
20001b5a:	601a      	str	r2, [r3, #0]
}
20001b5c:	46c0      	nop			; (mov r8, r8)
20001b5e:	46bd      	mov	sp, r7
20001b60:	b002      	add	sp, #8
20001b62:	bd80      	pop	{r7, pc}
20001b64:	42470000 	submi	r0, r7, #0

20001b68 <RCC_LSEConfig>:
  *            @arg RCC_LSE_ON: turn ON the LSE oscillator
  *            @arg RCC_LSE_Bypass: LSE oscillator bypassed with external clock
  * @retval None
  */
void RCC_LSEConfig(uint8_t RCC_LSE)
{
20001b68:	b580      	push	{r7, lr}
20001b6a:	b082      	sub	sp, #8
20001b6c:	af00      	add	r7, sp, #0
20001b6e:	0002      	movs	r2, r0
20001b70:	1dfb      	adds	r3, r7, #7
20001b72:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_LSE(RCC_LSE));

  /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
  /* Reset LSEON bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
20001b74:	4b0c      	ldr	r3, [pc, #48]	; (20001ba8 <RCC_LSEConfig+0x40>)
20001b76:	2200      	movs	r2, #0
20001b78:	701a      	strb	r2, [r3, #0]

  /* Reset LSEBYP bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
20001b7a:	4b0b      	ldr	r3, [pc, #44]	; (20001ba8 <RCC_LSEConfig+0x40>)
20001b7c:	2200      	movs	r2, #0
20001b7e:	701a      	strb	r2, [r3, #0]

  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch (RCC_LSE)
20001b80:	1dfb      	adds	r3, r7, #7
20001b82:	781b      	ldrb	r3, [r3, #0]
20001b84:	2b01      	cmp	r3, #1
20001b86:	d002      	beq.n	20001b8e <RCC_LSEConfig+0x26>
20001b88:	2b04      	cmp	r3, #4
20001b8a:	d004      	beq.n	20001b96 <RCC_LSEConfig+0x2e>
    case RCC_LSE_Bypass:
      /* Set LSEBYP and LSEON bits */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
      break;
    default:
      break;
20001b8c:	e007      	b.n	20001b9e <RCC_LSEConfig+0x36>
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_ON;
20001b8e:	4b06      	ldr	r3, [pc, #24]	; (20001ba8 <RCC_LSEConfig+0x40>)
20001b90:	2201      	movs	r2, #1
20001b92:	701a      	strb	r2, [r3, #0]
      break;
20001b94:	e003      	b.n	20001b9e <RCC_LSEConfig+0x36>
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
20001b96:	4b04      	ldr	r3, [pc, #16]	; (20001ba8 <RCC_LSEConfig+0x40>)
20001b98:	2205      	movs	r2, #5
20001b9a:	701a      	strb	r2, [r3, #0]
      break;
20001b9c:	46c0      	nop			; (mov r8, r8)
  }
}
20001b9e:	46c0      	nop			; (mov r8, r8)
20001ba0:	46bd      	mov	sp, r7
20001ba2:	b002      	add	sp, #8
20001ba4:	bd80      	pop	{r7, pc}
20001ba6:	46c0      	nop			; (mov r8, r8)
20001ba8:	40023870 	andmi	r3, r2, r0, ror r8

20001bac <RCC_LSICmd>:
  * @note   When the LSI is stopped, LSIRDY flag goes low after 6 LSI oscillator
  *         clock cycles. 
  * @retval None
  */
void RCC_LSICmd(FunctionalState NewState)
{
20001bac:	b580      	push	{r7, lr}
20001bae:	b082      	sub	sp, #8
20001bb0:	af00      	add	r7, sp, #0
20001bb2:	0002      	movs	r2, r0
20001bb4:	1dfb      	adds	r3, r7, #7
20001bb6:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CSR_LSION_BB = (uint32_t)NewState;
20001bb8:	4b03      	ldr	r3, [pc, #12]	; (20001bc8 <RCC_LSICmd+0x1c>)
20001bba:	1dfa      	adds	r2, r7, #7
20001bbc:	7812      	ldrb	r2, [r2, #0]
20001bbe:	601a      	str	r2, [r3, #0]
}
20001bc0:	46c0      	nop			; (mov r8, r8)
20001bc2:	46bd      	mov	sp, r7
20001bc4:	b002      	add	sp, #8
20001bc6:	bd80      	pop	{r7, pc}
20001bc8:	42470e80 	submi	r0, r7, #128, 28	; 0x800

20001bcc <RCC_PLLConfig>:
  *         correctly.
  *   
  * @retval None
  */
void RCC_PLLConfig(uint32_t RCC_PLLSource, uint32_t PLLM, uint32_t PLLN, uint32_t PLLP, uint32_t PLLQ)
{
20001bcc:	b580      	push	{r7, lr}
20001bce:	b084      	sub	sp, #16
20001bd0:	af00      	add	r7, sp, #0
20001bd2:	60f8      	str	r0, [r7, #12]
20001bd4:	60b9      	str	r1, [r7, #8]
20001bd6:	607a      	str	r2, [r7, #4]
20001bd8:	603b      	str	r3, [r7, #0]
  assert_param(IS_RCC_PLLM_VALUE(PLLM));
  assert_param(IS_RCC_PLLN_VALUE(PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLP));
  assert_param(IS_RCC_PLLQ_VALUE(PLLQ));

  RCC->PLLCFGR = PLLM | (PLLN << 6) | (((PLLP >> 1) -1) << 16) | (RCC_PLLSource) |
20001bda:	687b      	ldr	r3, [r7, #4]
20001bdc:	019a      	lsls	r2, r3, #6
20001bde:	68bb      	ldr	r3, [r7, #8]
20001be0:	431a      	orrs	r2, r3
20001be2:	683b      	ldr	r3, [r7, #0]
20001be4:	085b      	lsrs	r3, r3, #1
20001be6:	3b01      	subs	r3, #1
20001be8:	041b      	lsls	r3, r3, #16
20001bea:	431a      	orrs	r2, r3
20001bec:	68fb      	ldr	r3, [r7, #12]
20001bee:	431a      	orrs	r2, r3
20001bf0:	0011      	movs	r1, r2
                 (PLLQ << 24);
20001bf2:	69bb      	ldr	r3, [r7, #24]
20001bf4:	061a      	lsls	r2, r3, #24
  RCC->PLLCFGR = PLLM | (PLLN << 6) | (((PLLP >> 1) -1) << 16) | (RCC_PLLSource) |
20001bf6:	4b03      	ldr	r3, [pc, #12]	; (20001c04 <RCC_PLLConfig+0x38>)
20001bf8:	430a      	orrs	r2, r1
20001bfa:	605a      	str	r2, [r3, #4]
}
20001bfc:	46c0      	nop			; (mov r8, r8)
20001bfe:	46bd      	mov	sp, r7
20001c00:	b004      	add	sp, #16
20001c02:	bd80      	pop	{r7, pc}
20001c04:	40023800 	andmi	r3, r2, r0, lsl #16

20001c08 <RCC_PLLCmd>:
  * @note   The main PLL is disabled by hardware when entering STOP and STANDBY modes.
  * @param  NewState: new state of the main PLL. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_PLLCmd(FunctionalState NewState)
{
20001c08:	b580      	push	{r7, lr}
20001c0a:	b082      	sub	sp, #8
20001c0c:	af00      	add	r7, sp, #0
20001c0e:	0002      	movs	r2, r0
20001c10:	1dfb      	adds	r3, r7, #7
20001c12:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_PLLON_BB = (uint32_t)NewState;
20001c14:	4b03      	ldr	r3, [pc, #12]	; (20001c24 <RCC_PLLCmd+0x1c>)
20001c16:	1dfa      	adds	r2, r7, #7
20001c18:	7812      	ldrb	r2, [r2, #0]
20001c1a:	601a      	str	r2, [r3, #0]
}
20001c1c:	46c0      	nop			; (mov r8, r8)
20001c1e:	46bd      	mov	sp, r7
20001c20:	b002      	add	sp, #8
20001c22:	bd80      	pop	{r7, pc}
20001c24:	42470060 	submi	r0, r7, #96	; 0x60

20001c28 <RCC_PLLI2SConfig>:
  *         on the I2S clock frequency.
  *   
  * @retval None
  */
void RCC_PLLI2SConfig(uint32_t PLLI2SN, uint32_t PLLI2SR)
{
20001c28:	b580      	push	{r7, lr}
20001c2a:	b082      	sub	sp, #8
20001c2c:	af00      	add	r7, sp, #0
20001c2e:	6078      	str	r0, [r7, #4]
20001c30:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RCC_PLLI2SN_VALUE(PLLI2SN));
  assert_param(IS_RCC_PLLI2SR_VALUE(PLLI2SR));

  RCC->PLLI2SCFGR = (PLLI2SN << 6) | (PLLI2SR << 28);
20001c32:	687b      	ldr	r3, [r7, #4]
20001c34:	019a      	lsls	r2, r3, #6
20001c36:	683b      	ldr	r3, [r7, #0]
20001c38:	071b      	lsls	r3, r3, #28
20001c3a:	4904      	ldr	r1, [pc, #16]	; (20001c4c <RCC_PLLI2SConfig+0x24>)
20001c3c:	4313      	orrs	r3, r2
20001c3e:	2284      	movs	r2, #132	; 0x84
20001c40:	508b      	str	r3, [r1, r2]
}
20001c42:	46c0      	nop			; (mov r8, r8)
20001c44:	46bd      	mov	sp, r7
20001c46:	b002      	add	sp, #8
20001c48:	bd80      	pop	{r7, pc}
20001c4a:	46c0      	nop			; (mov r8, r8)
20001c4c:	40023800 	andmi	r3, r2, r0, lsl #16

20001c50 <RCC_PLLI2SCmd>:
  * @note   The PLLI2S is disabled by hardware when entering STOP and STANDBY modes.  
  * @param  NewState: new state of the PLLI2S. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_PLLI2SCmd(FunctionalState NewState)
{
20001c50:	b580      	push	{r7, lr}
20001c52:	b082      	sub	sp, #8
20001c54:	af00      	add	r7, sp, #0
20001c56:	0002      	movs	r2, r0
20001c58:	1dfb      	adds	r3, r7, #7
20001c5a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_PLLI2SON_BB = (uint32_t)NewState;
20001c5c:	4b03      	ldr	r3, [pc, #12]	; (20001c6c <RCC_PLLI2SCmd+0x1c>)
20001c5e:	1dfa      	adds	r2, r7, #7
20001c60:	7812      	ldrb	r2, [r2, #0]
20001c62:	601a      	str	r2, [r3, #0]
}
20001c64:	46c0      	nop			; (mov r8, r8)
20001c66:	46bd      	mov	sp, r7
20001c68:	b002      	add	sp, #8
20001c6a:	bd80      	pop	{r7, pc}
20001c6c:	42470068 	submi	r0, r7, #104	; 0x68

20001c70 <RCC_PLLSAIConfig>:
  *          This parameter must be a number between 2 and 7.
  *   
  * @retval None
  */
void RCC_PLLSAIConfig(uint32_t PLLSAIN, uint32_t PLLSAIQ, uint32_t PLLSAIR)
{
20001c70:	b580      	push	{r7, lr}
20001c72:	b084      	sub	sp, #16
20001c74:	af00      	add	r7, sp, #0
20001c76:	60f8      	str	r0, [r7, #12]
20001c78:	60b9      	str	r1, [r7, #8]
20001c7a:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_PLLSAIN_VALUE(PLLSAIN));
  assert_param(IS_RCC_PLLSAIR_VALUE(PLLSAIR));
  assert_param(IS_RCC_PLLSAIQ_VALUE(PLLSAIQ));
  
  RCC->PLLSAICFGR = (PLLSAIN << 6) | (PLLSAIQ << 24) | (PLLSAIR << 28);
20001c7c:	68fb      	ldr	r3, [r7, #12]
20001c7e:	019a      	lsls	r2, r3, #6
20001c80:	68bb      	ldr	r3, [r7, #8]
20001c82:	061b      	lsls	r3, r3, #24
20001c84:	431a      	orrs	r2, r3
20001c86:	687b      	ldr	r3, [r7, #4]
20001c88:	071b      	lsls	r3, r3, #28
20001c8a:	4904      	ldr	r1, [pc, #16]	; (20001c9c <RCC_PLLSAIConfig+0x2c>)
20001c8c:	4313      	orrs	r3, r2
20001c8e:	2288      	movs	r2, #136	; 0x88
20001c90:	508b      	str	r3, [r1, r2]
}
20001c92:	46c0      	nop			; (mov r8, r8)
20001c94:	46bd      	mov	sp, r7
20001c96:	b004      	add	sp, #16
20001c98:	bd80      	pop	{r7, pc}
20001c9a:	46c0      	nop			; (mov r8, r8)
20001c9c:	40023800 	andmi	r3, r2, r0, lsl #16

20001ca0 <RCC_PLLSAICmd>:
  * @note   The PLLSAI is disabled by hardware when entering STOP and STANDBY modes.  
  * @param  NewState: new state of the PLLSAI. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_PLLSAICmd(FunctionalState NewState)
{
20001ca0:	b580      	push	{r7, lr}
20001ca2:	b082      	sub	sp, #8
20001ca4:	af00      	add	r7, sp, #0
20001ca6:	0002      	movs	r2, r0
20001ca8:	1dfb      	adds	r3, r7, #7
20001caa:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_PLLSAION_BB = (uint32_t)NewState;
20001cac:	4b03      	ldr	r3, [pc, #12]	; (20001cbc <RCC_PLLSAICmd+0x1c>)
20001cae:	1dfa      	adds	r2, r7, #7
20001cb0:	7812      	ldrb	r2, [r2, #0]
20001cb2:	601a      	str	r2, [r3, #0]
}
20001cb4:	46c0      	nop			; (mov r8, r8)
20001cb6:	46bd      	mov	sp, r7
20001cb8:	b002      	add	sp, #8
20001cba:	bd80      	pop	{r7, pc}
20001cbc:	42470070 	submi	r0, r7, #112	; 0x70

20001cc0 <RCC_ClockSecuritySystemCmd>:
  * @param  NewState: new state of the Clock Security System.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_ClockSecuritySystemCmd(FunctionalState NewState)
{
20001cc0:	b580      	push	{r7, lr}
20001cc2:	b082      	sub	sp, #8
20001cc4:	af00      	add	r7, sp, #0
20001cc6:	0002      	movs	r2, r0
20001cc8:	1dfb      	adds	r3, r7, #7
20001cca:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_CSSON_BB = (uint32_t)NewState;
20001ccc:	4b03      	ldr	r3, [pc, #12]	; (20001cdc <RCC_ClockSecuritySystemCmd+0x1c>)
20001cce:	1dfa      	adds	r2, r7, #7
20001cd0:	7812      	ldrb	r2, [r2, #0]
20001cd2:	601a      	str	r2, [r3, #0]
}
20001cd4:	46c0      	nop			; (mov r8, r8)
20001cd6:	46bd      	mov	sp, r7
20001cd8:	b002      	add	sp, #8
20001cda:	bd80      	pop	{r7, pc}
20001cdc:	4247004c 	submi	r0, r7, #76	; 0x4c

20001ce0 <RCC_MCO1Config>:
  *            @arg RCC_MCO1Div_4: division by 4 applied to MCO1 clock
  *            @arg RCC_MCO1Div_5: division by 5 applied to MCO1 clock
  * @retval None
  */
void RCC_MCO1Config(uint32_t RCC_MCO1Source, uint32_t RCC_MCO1Div)
{
20001ce0:	b580      	push	{r7, lr}
20001ce2:	b084      	sub	sp, #16
20001ce4:	af00      	add	r7, sp, #0
20001ce6:	6078      	str	r0, [r7, #4]
20001ce8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
20001cea:	2300      	movs	r3, #0
20001cec:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_MCO1SOURCE(RCC_MCO1Source));
  assert_param(IS_RCC_MCO1DIV(RCC_MCO1Div));  

  tmpreg = RCC->CFGR;
20001cee:	4b0a      	ldr	r3, [pc, #40]	; (20001d18 <RCC_MCO1Config+0x38>)
20001cf0:	689b      	ldr	r3, [r3, #8]
20001cf2:	60fb      	str	r3, [r7, #12]

  /* Clear MCO1[1:0] and MCO1PRE[2:0] bits */
  tmpreg &= CFGR_MCO1_RESET_MASK;
20001cf4:	68fb      	ldr	r3, [r7, #12]
20001cf6:	4a09      	ldr	r2, [pc, #36]	; (20001d1c <RCC_MCO1Config+0x3c>)
20001cf8:	4013      	ands	r3, r2
20001cfa:	60fb      	str	r3, [r7, #12]

  /* Select MCO1 clock source and prescaler */
  tmpreg |= RCC_MCO1Source | RCC_MCO1Div;
20001cfc:	687a      	ldr	r2, [r7, #4]
20001cfe:	683b      	ldr	r3, [r7, #0]
20001d00:	4313      	orrs	r3, r2
20001d02:	68fa      	ldr	r2, [r7, #12]
20001d04:	4313      	orrs	r3, r2
20001d06:	60fb      	str	r3, [r7, #12]
  
  /* Store the new value */
  RCC->CFGR = tmpreg;
20001d08:	4b03      	ldr	r3, [pc, #12]	; (20001d18 <RCC_MCO1Config+0x38>)
20001d0a:	68fa      	ldr	r2, [r7, #12]
20001d0c:	609a      	str	r2, [r3, #8]

#if defined(STM32F410xx)
  RCC_MCO1Cmd(ENABLE);
#endif /* STM32F410xx */   
}
20001d0e:	46c0      	nop			; (mov r8, r8)
20001d10:	46bd      	mov	sp, r7
20001d12:	b004      	add	sp, #16
20001d14:	bd80      	pop	{r7, pc}
20001d16:	46c0      	nop			; (mov r8, r8)
20001d18:	40023800 	andmi	r3, r2, r0, lsl #16
20001d1c:	f89fffff 			; <UNDEFINED> instruction: 0xf89fffff

20001d20 <RCC_MCO2Config>:
  * @note  For STM32F410xx devices to output I2SCLK clock on MCO2 you should have
  *        at last one of the SPI clocks enabled (SPI1, SPI2 or SPI5).
  * @retval None
  */
void RCC_MCO2Config(uint32_t RCC_MCO2Source, uint32_t RCC_MCO2Div)
{
20001d20:	b580      	push	{r7, lr}
20001d22:	b084      	sub	sp, #16
20001d24:	af00      	add	r7, sp, #0
20001d26:	6078      	str	r0, [r7, #4]
20001d28:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
20001d2a:	2300      	movs	r3, #0
20001d2c:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_MCO2SOURCE(RCC_MCO2Source));
  assert_param(IS_RCC_MCO2DIV(RCC_MCO2Div));
  
  tmpreg = RCC->CFGR;
20001d2e:	4b0a      	ldr	r3, [pc, #40]	; (20001d58 <RCC_MCO2Config+0x38>)
20001d30:	689b      	ldr	r3, [r3, #8]
20001d32:	60fb      	str	r3, [r7, #12]
  
  /* Clear MCO2 and MCO2PRE[2:0] bits */
  tmpreg &= CFGR_MCO2_RESET_MASK;
20001d34:	68fb      	ldr	r3, [r7, #12]
20001d36:	015b      	lsls	r3, r3, #5
20001d38:	095b      	lsrs	r3, r3, #5
20001d3a:	60fb      	str	r3, [r7, #12]

  /* Select MCO2 clock source and prescaler */
  tmpreg |= RCC_MCO2Source | RCC_MCO2Div;
20001d3c:	687a      	ldr	r2, [r7, #4]
20001d3e:	683b      	ldr	r3, [r7, #0]
20001d40:	4313      	orrs	r3, r2
20001d42:	68fa      	ldr	r2, [r7, #12]
20001d44:	4313      	orrs	r3, r2
20001d46:	60fb      	str	r3, [r7, #12]
  
  /* Store the new value */
  RCC->CFGR = tmpreg;
20001d48:	4b03      	ldr	r3, [pc, #12]	; (20001d58 <RCC_MCO2Config+0x38>)
20001d4a:	68fa      	ldr	r2, [r7, #12]
20001d4c:	609a      	str	r2, [r3, #8]

#if defined(STM32F410xx)
  RCC_MCO2Cmd(ENABLE);
#endif /* STM32F410xx */   
}
20001d4e:	46c0      	nop			; (mov r8, r8)
20001d50:	46bd      	mov	sp, r7
20001d52:	b004      	add	sp, #16
20001d54:	bd80      	pop	{r7, pc}
20001d56:	46c0      	nop			; (mov r8, r8)
20001d58:	40023800 	andmi	r3, r2, r0, lsl #16

20001d5c <RCC_SYSCLKConfig>:
  *            @arg RCC_SYSCLKSource_PLLCLK: PLL selected as system clock source (RCC_SYSCLKSource_PLLPCLK for STM32F446xx devices)
  *            @arg RCC_SYSCLKSource_PLLRCLK: PLL R selected as system clock source only for STM32F412xG, STM32F413_423xx and STM32F446xx devices
  * @retval None
  */
void RCC_SYSCLKConfig(uint32_t RCC_SYSCLKSource)
{
20001d5c:	b580      	push	{r7, lr}
20001d5e:	b084      	sub	sp, #16
20001d60:	af00      	add	r7, sp, #0
20001d62:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
20001d64:	2300      	movs	r3, #0
20001d66:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_SYSCLK_SOURCE(RCC_SYSCLKSource));

  tmpreg = RCC->CFGR;
20001d68:	4b08      	ldr	r3, [pc, #32]	; (20001d8c <RCC_SYSCLKConfig+0x30>)
20001d6a:	689b      	ldr	r3, [r3, #8]
20001d6c:	60fb      	str	r3, [r7, #12]

  /* Clear SW[1:0] bits */
  tmpreg &= ~RCC_CFGR_SW;
20001d6e:	68fb      	ldr	r3, [r7, #12]
20001d70:	2203      	movs	r2, #3
20001d72:	4393      	bics	r3, r2
20001d74:	60fb      	str	r3, [r7, #12]

  /* Set SW[1:0] bits according to RCC_SYSCLKSource value */
  tmpreg |= RCC_SYSCLKSource;
20001d76:	68fa      	ldr	r2, [r7, #12]
20001d78:	687b      	ldr	r3, [r7, #4]
20001d7a:	4313      	orrs	r3, r2
20001d7c:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;
20001d7e:	4b03      	ldr	r3, [pc, #12]	; (20001d8c <RCC_SYSCLKConfig+0x30>)
20001d80:	68fa      	ldr	r2, [r7, #12]
20001d82:	609a      	str	r2, [r3, #8]
}
20001d84:	46c0      	nop			; (mov r8, r8)
20001d86:	46bd      	mov	sp, r7
20001d88:	b004      	add	sp, #16
20001d8a:	bd80      	pop	{r7, pc}
20001d8c:	40023800 	andmi	r3, r2, r0, lsl #16

20001d90 <RCC_GetSYSCLKSource>:
  *              - 0x04: HSE used as system clock
  *              - 0x08: PLL used as system clock (PLL P for STM32F446xx devices)
  *              - 0x0C: PLL R used as system clock (only for STM32F412xG, STM32F413_423xx and STM32F446xx devices)
  */
uint8_t RCC_GetSYSCLKSource(void)
{
20001d90:	b580      	push	{r7, lr}
20001d92:	af00      	add	r7, sp, #0
  return ((uint8_t)(RCC->CFGR & RCC_CFGR_SWS));
20001d94:	4b04      	ldr	r3, [pc, #16]	; (20001da8 <RCC_GetSYSCLKSource+0x18>)
20001d96:	689b      	ldr	r3, [r3, #8]
20001d98:	b2db      	uxtb	r3, r3
20001d9a:	220c      	movs	r2, #12
20001d9c:	4013      	ands	r3, r2
20001d9e:	b2db      	uxtb	r3, r3
}
20001da0:	0018      	movs	r0, r3
20001da2:	46bd      	mov	sp, r7
20001da4:	bd80      	pop	{r7, pc}
20001da6:	46c0      	nop			; (mov r8, r8)
20001da8:	40023800 	andmi	r3, r2, r0, lsl #16

20001dac <RCC_HCLKConfig>:
  *            @arg RCC_SYSCLK_Div256: AHB clock = SYSCLK/256
  *            @arg RCC_SYSCLK_Div512: AHB clock = SYSCLK/512
  * @retval None
  */
void RCC_HCLKConfig(uint32_t RCC_SYSCLK)
{
20001dac:	b580      	push	{r7, lr}
20001dae:	b084      	sub	sp, #16
20001db0:	af00      	add	r7, sp, #0
20001db2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
20001db4:	2300      	movs	r3, #0
20001db6:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_HCLK(RCC_SYSCLK));

  tmpreg = RCC->CFGR;
20001db8:	4b08      	ldr	r3, [pc, #32]	; (20001ddc <RCC_HCLKConfig+0x30>)
20001dba:	689b      	ldr	r3, [r3, #8]
20001dbc:	60fb      	str	r3, [r7, #12]

  /* Clear HPRE[3:0] bits */
  tmpreg &= ~RCC_CFGR_HPRE;
20001dbe:	68fb      	ldr	r3, [r7, #12]
20001dc0:	22f0      	movs	r2, #240	; 0xf0
20001dc2:	4393      	bics	r3, r2
20001dc4:	60fb      	str	r3, [r7, #12]

  /* Set HPRE[3:0] bits according to RCC_SYSCLK value */
  tmpreg |= RCC_SYSCLK;
20001dc6:	68fa      	ldr	r2, [r7, #12]
20001dc8:	687b      	ldr	r3, [r7, #4]
20001dca:	4313      	orrs	r3, r2
20001dcc:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;
20001dce:	4b03      	ldr	r3, [pc, #12]	; (20001ddc <RCC_HCLKConfig+0x30>)
20001dd0:	68fa      	ldr	r2, [r7, #12]
20001dd2:	609a      	str	r2, [r3, #8]
}
20001dd4:	46c0      	nop			; (mov r8, r8)
20001dd6:	46bd      	mov	sp, r7
20001dd8:	b004      	add	sp, #16
20001dda:	bd80      	pop	{r7, pc}
20001ddc:	40023800 	andmi	r3, r2, r0, lsl #16

20001de0 <RCC_PCLK1Config>:
  *            @arg RCC_HCLK_Div8:  APB1 clock = HCLK/8
  *            @arg RCC_HCLK_Div16: APB1 clock = HCLK/16
  * @retval None
  */
void RCC_PCLK1Config(uint32_t RCC_HCLK)
{
20001de0:	b580      	push	{r7, lr}
20001de2:	b084      	sub	sp, #16
20001de4:	af00      	add	r7, sp, #0
20001de6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
20001de8:	2300      	movs	r3, #0
20001dea:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));

  tmpreg = RCC->CFGR;
20001dec:	4b08      	ldr	r3, [pc, #32]	; (20001e10 <RCC_PCLK1Config+0x30>)
20001dee:	689b      	ldr	r3, [r3, #8]
20001df0:	60fb      	str	r3, [r7, #12]

  /* Clear PPRE1[2:0] bits */
  tmpreg &= ~RCC_CFGR_PPRE1;
20001df2:	68fb      	ldr	r3, [r7, #12]
20001df4:	4a07      	ldr	r2, [pc, #28]	; (20001e14 <RCC_PCLK1Config+0x34>)
20001df6:	4013      	ands	r3, r2
20001df8:	60fb      	str	r3, [r7, #12]

  /* Set PPRE1[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK;
20001dfa:	68fa      	ldr	r2, [r7, #12]
20001dfc:	687b      	ldr	r3, [r7, #4]
20001dfe:	4313      	orrs	r3, r2
20001e00:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;
20001e02:	4b03      	ldr	r3, [pc, #12]	; (20001e10 <RCC_PCLK1Config+0x30>)
20001e04:	68fa      	ldr	r2, [r7, #12]
20001e06:	609a      	str	r2, [r3, #8]
}
20001e08:	46c0      	nop			; (mov r8, r8)
20001e0a:	46bd      	mov	sp, r7
20001e0c:	b004      	add	sp, #16
20001e0e:	bd80      	pop	{r7, pc}
20001e10:	40023800 	andmi	r3, r2, r0, lsl #16
20001e14:	ffffe3ff 			; <UNDEFINED> instruction: 0xffffe3ff

20001e18 <RCC_PCLK2Config>:
  *            @arg RCC_HCLK_Div8:  APB2 clock = HCLK/8
  *            @arg RCC_HCLK_Div16: APB2 clock = HCLK/16
  * @retval None
  */
void RCC_PCLK2Config(uint32_t RCC_HCLK)
{
20001e18:	b580      	push	{r7, lr}
20001e1a:	b084      	sub	sp, #16
20001e1c:	af00      	add	r7, sp, #0
20001e1e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
20001e20:	2300      	movs	r3, #0
20001e22:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));

  tmpreg = RCC->CFGR;
20001e24:	4b09      	ldr	r3, [pc, #36]	; (20001e4c <RCC_PCLK2Config+0x34>)
20001e26:	689b      	ldr	r3, [r3, #8]
20001e28:	60fb      	str	r3, [r7, #12]

  /* Clear PPRE2[2:0] bits */
  tmpreg &= ~RCC_CFGR_PPRE2;
20001e2a:	68fb      	ldr	r3, [r7, #12]
20001e2c:	4a08      	ldr	r2, [pc, #32]	; (20001e50 <RCC_PCLK2Config+0x38>)
20001e2e:	4013      	ands	r3, r2
20001e30:	60fb      	str	r3, [r7, #12]

  /* Set PPRE2[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK << 3;
20001e32:	687b      	ldr	r3, [r7, #4]
20001e34:	00db      	lsls	r3, r3, #3
20001e36:	68fa      	ldr	r2, [r7, #12]
20001e38:	4313      	orrs	r3, r2
20001e3a:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;
20001e3c:	4b03      	ldr	r3, [pc, #12]	; (20001e4c <RCC_PCLK2Config+0x34>)
20001e3e:	68fa      	ldr	r2, [r7, #12]
20001e40:	609a      	str	r2, [r3, #8]
}
20001e42:	46c0      	nop			; (mov r8, r8)
20001e44:	46bd      	mov	sp, r7
20001e46:	b004      	add	sp, #16
20001e48:	bd80      	pop	{r7, pc}
20001e4a:	46c0      	nop			; (mov r8, r8)
20001e4c:	40023800 	andmi	r3, r2, r0, lsl #16
20001e50:	ffff1fff 			; <UNDEFINED> instruction: 0xffff1fff

20001e54 <RCC_GetClocksFreq>:
  *         configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
20001e54:	b580      	push	{r7, lr}
20001e56:	b088      	sub	sp, #32
20001e58:	af00      	add	r7, sp, #0
20001e5a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
20001e5c:	2300      	movs	r3, #0
20001e5e:	61bb      	str	r3, [r7, #24]
20001e60:	2300      	movs	r3, #0
20001e62:	617b      	str	r3, [r7, #20]
20001e64:	2300      	movs	r3, #0
20001e66:	61fb      	str	r3, [r7, #28]
20001e68:	2302      	movs	r3, #2
20001e6a:	613b      	str	r3, [r7, #16]
20001e6c:	2300      	movs	r3, #0
20001e6e:	60fb      	str	r3, [r7, #12]
20001e70:	2302      	movs	r3, #2
20001e72:	60bb      	str	r3, [r7, #8]
#if defined(STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F446xx)  
  uint32_t pllr = 2;
#endif /* STM32F412xG || STM32F413_423xx || STM32F446xx */
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
20001e74:	4b49      	ldr	r3, [pc, #292]	; (20001f9c <RCC_GetClocksFreq+0x148>)
20001e76:	689b      	ldr	r3, [r3, #8]
20001e78:	220c      	movs	r2, #12
20001e7a:	4013      	ands	r3, r2
20001e7c:	61bb      	str	r3, [r7, #24]
  
  switch (tmp)
20001e7e:	69bb      	ldr	r3, [r7, #24]
20001e80:	2b04      	cmp	r3, #4
20001e82:	d007      	beq.n	20001e94 <RCC_GetClocksFreq+0x40>
20001e84:	2b08      	cmp	r3, #8
20001e86:	d009      	beq.n	20001e9c <RCC_GetClocksFreq+0x48>
20001e88:	2b00      	cmp	r3, #0
20001e8a:	d141      	bne.n	20001f10 <RCC_GetClocksFreq+0xbc>
  {
  case 0x00:  /* HSI used as system clock source */
    RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
20001e8c:	687b      	ldr	r3, [r7, #4]
20001e8e:	4a44      	ldr	r2, [pc, #272]	; (20001fa0 <RCC_GetClocksFreq+0x14c>)
20001e90:	601a      	str	r2, [r3, #0]
    break;
20001e92:	e041      	b.n	20001f18 <RCC_GetClocksFreq+0xc4>
  case 0x04:  /* HSE used as system clock  source */
    RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
20001e94:	687b      	ldr	r3, [r7, #4]
20001e96:	4a43      	ldr	r2, [pc, #268]	; (20001fa4 <RCC_GetClocksFreq+0x150>)
20001e98:	601a      	str	r2, [r3, #0]
    break;
20001e9a:	e03d      	b.n	20001f18 <RCC_GetClocksFreq+0xc4>
  case 0x08:  /* PLL P used as system clock  source */
    
    /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLP
    */    
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
20001e9c:	4b3f      	ldr	r3, [pc, #252]	; (20001f9c <RCC_GetClocksFreq+0x148>)
20001e9e:	685b      	ldr	r3, [r3, #4]
20001ea0:	0d9b      	lsrs	r3, r3, #22
20001ea2:	2201      	movs	r2, #1
20001ea4:	4013      	ands	r3, r2
20001ea6:	60fb      	str	r3, [r7, #12]
    pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
20001ea8:	4b3c      	ldr	r3, [pc, #240]	; (20001f9c <RCC_GetClocksFreq+0x148>)
20001eaa:	685b      	ldr	r3, [r3, #4]
20001eac:	223f      	movs	r2, #63	; 0x3f
20001eae:	4013      	ands	r3, r2
20001eb0:	60bb      	str	r3, [r7, #8]
    
    if (pllsource != 0)
20001eb2:	68fb      	ldr	r3, [r7, #12]
20001eb4:	2b00      	cmp	r3, #0
20001eb6:	d00d      	beq.n	20001ed4 <RCC_GetClocksFreq+0x80>
    {
      /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
20001eb8:	68b9      	ldr	r1, [r7, #8]
20001eba:	483a      	ldr	r0, [pc, #232]	; (20001fa4 <RCC_GetClocksFreq+0x150>)
20001ebc:	f001 fe7e 	bl	20003bbc <__udivsi3>
20001ec0:	0003      	movs	r3, r0
20001ec2:	001a      	movs	r2, r3
20001ec4:	4b35      	ldr	r3, [pc, #212]	; (20001f9c <RCC_GetClocksFreq+0x148>)
20001ec6:	685b      	ldr	r3, [r3, #4]
20001ec8:	099b      	lsrs	r3, r3, #6
20001eca:	05db      	lsls	r3, r3, #23
20001ecc:	0ddb      	lsrs	r3, r3, #23
20001ece:	4353      	muls	r3, r2
20001ed0:	61fb      	str	r3, [r7, #28]
20001ed2:	e00c      	b.n	20001eee <RCC_GetClocksFreq+0x9a>
    }
    else
    {
      /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
20001ed4:	68b9      	ldr	r1, [r7, #8]
20001ed6:	4832      	ldr	r0, [pc, #200]	; (20001fa0 <RCC_GetClocksFreq+0x14c>)
20001ed8:	f001 fe70 	bl	20003bbc <__udivsi3>
20001edc:	0003      	movs	r3, r0
20001ede:	001a      	movs	r2, r3
20001ee0:	4b2e      	ldr	r3, [pc, #184]	; (20001f9c <RCC_GetClocksFreq+0x148>)
20001ee2:	685b      	ldr	r3, [r3, #4]
20001ee4:	099b      	lsrs	r3, r3, #6
20001ee6:	05db      	lsls	r3, r3, #23
20001ee8:	0ddb      	lsrs	r3, r3, #23
20001eea:	4353      	muls	r3, r2
20001eec:	61fb      	str	r3, [r7, #28]
    }
    
    pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
20001eee:	4b2b      	ldr	r3, [pc, #172]	; (20001f9c <RCC_GetClocksFreq+0x148>)
20001ef0:	685b      	ldr	r3, [r3, #4]
20001ef2:	0c1b      	lsrs	r3, r3, #16
20001ef4:	2203      	movs	r2, #3
20001ef6:	4013      	ands	r3, r2
20001ef8:	3301      	adds	r3, #1
20001efa:	005b      	lsls	r3, r3, #1
20001efc:	613b      	str	r3, [r7, #16]
    RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
20001efe:	6939      	ldr	r1, [r7, #16]
20001f00:	69f8      	ldr	r0, [r7, #28]
20001f02:	f001 fe5b 	bl	20003bbc <__udivsi3>
20001f06:	0003      	movs	r3, r0
20001f08:	001a      	movs	r2, r3
20001f0a:	687b      	ldr	r3, [r7, #4]
20001f0c:	601a      	str	r2, [r3, #0]
    break;
20001f0e:	e003      	b.n	20001f18 <RCC_GetClocksFreq+0xc4>
    RCC_Clocks->SYSCLK_Frequency = pllvco/pllr;    
    break;
#endif /* STM32F412xG || STM32F413_423xx || STM32F446xx */
    
  default:
    RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
20001f10:	687b      	ldr	r3, [r7, #4]
20001f12:	4a23      	ldr	r2, [pc, #140]	; (20001fa0 <RCC_GetClocksFreq+0x14c>)
20001f14:	601a      	str	r2, [r3, #0]
    break;
20001f16:	46c0      	nop			; (mov r8, r8)
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/
  
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
20001f18:	4b20      	ldr	r3, [pc, #128]	; (20001f9c <RCC_GetClocksFreq+0x148>)
20001f1a:	689b      	ldr	r3, [r3, #8]
20001f1c:	22f0      	movs	r2, #240	; 0xf0
20001f1e:	4013      	ands	r3, r2
20001f20:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 4;
20001f22:	69bb      	ldr	r3, [r7, #24]
20001f24:	091b      	lsrs	r3, r3, #4
20001f26:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
20001f28:	4a1f      	ldr	r2, [pc, #124]	; (20001fa8 <RCC_GetClocksFreq+0x154>)
20001f2a:	69bb      	ldr	r3, [r7, #24]
20001f2c:	18d3      	adds	r3, r2, r3
20001f2e:	781b      	ldrb	r3, [r3, #0]
20001f30:	b2db      	uxtb	r3, r3
20001f32:	617b      	str	r3, [r7, #20]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
20001f34:	687b      	ldr	r3, [r7, #4]
20001f36:	681a      	ldr	r2, [r3, #0]
20001f38:	697b      	ldr	r3, [r7, #20]
20001f3a:	40da      	lsrs	r2, r3
20001f3c:	687b      	ldr	r3, [r7, #4]
20001f3e:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
20001f40:	4b16      	ldr	r3, [pc, #88]	; (20001f9c <RCC_GetClocksFreq+0x148>)
20001f42:	689a      	ldr	r2, [r3, #8]
20001f44:	23e0      	movs	r3, #224	; 0xe0
20001f46:	015b      	lsls	r3, r3, #5
20001f48:	4013      	ands	r3, r2
20001f4a:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 10;
20001f4c:	69bb      	ldr	r3, [r7, #24]
20001f4e:	0a9b      	lsrs	r3, r3, #10
20001f50:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
20001f52:	4a15      	ldr	r2, [pc, #84]	; (20001fa8 <RCC_GetClocksFreq+0x154>)
20001f54:	69bb      	ldr	r3, [r7, #24]
20001f56:	18d3      	adds	r3, r2, r3
20001f58:	781b      	ldrb	r3, [r3, #0]
20001f5a:	b2db      	uxtb	r3, r3
20001f5c:	617b      	str	r3, [r7, #20]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
20001f5e:	687b      	ldr	r3, [r7, #4]
20001f60:	685a      	ldr	r2, [r3, #4]
20001f62:	697b      	ldr	r3, [r7, #20]
20001f64:	40da      	lsrs	r2, r3
20001f66:	687b      	ldr	r3, [r7, #4]
20001f68:	609a      	str	r2, [r3, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
20001f6a:	4b0c      	ldr	r3, [pc, #48]	; (20001f9c <RCC_GetClocksFreq+0x148>)
20001f6c:	689a      	ldr	r2, [r3, #8]
20001f6e:	23e0      	movs	r3, #224	; 0xe0
20001f70:	021b      	lsls	r3, r3, #8
20001f72:	4013      	ands	r3, r2
20001f74:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 13;
20001f76:	69bb      	ldr	r3, [r7, #24]
20001f78:	0b5b      	lsrs	r3, r3, #13
20001f7a:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
20001f7c:	4a0a      	ldr	r2, [pc, #40]	; (20001fa8 <RCC_GetClocksFreq+0x154>)
20001f7e:	69bb      	ldr	r3, [r7, #24]
20001f80:	18d3      	adds	r3, r2, r3
20001f82:	781b      	ldrb	r3, [r3, #0]
20001f84:	b2db      	uxtb	r3, r3
20001f86:	617b      	str	r3, [r7, #20]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
20001f88:	687b      	ldr	r3, [r7, #4]
20001f8a:	685a      	ldr	r2, [r3, #4]
20001f8c:	697b      	ldr	r3, [r7, #20]
20001f8e:	40da      	lsrs	r2, r3
20001f90:	687b      	ldr	r3, [r7, #4]
20001f92:	60da      	str	r2, [r3, #12]
}
20001f94:	46c0      	nop			; (mov r8, r8)
20001f96:	46bd      	mov	sp, r7
20001f98:	b008      	add	sp, #32
20001f9a:	bd80      	pop	{r7, pc}
20001f9c:	40023800 	andmi	r3, r2, r0, lsl #16
20001fa0:	00f42400 	rscseq	r2, r4, r0, lsl #8
20001fa4:	017d7840 	cmneq	sp, r0, asr #16
20001fa8:	20003dd4 	ldrdcs	r3, [r0], -r4

20001fac <RCC_RTCCLKConfig>:
  *         RTC clock source).
  *  
  * @retval None
  */
void RCC_RTCCLKConfig(uint32_t RCC_RTCCLKSource)
{
20001fac:	b580      	push	{r7, lr}
20001fae:	b084      	sub	sp, #16
20001fb0:	af00      	add	r7, sp, #0
20001fb2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
20001fb4:	2300      	movs	r3, #0
20001fb6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_RTCCLK_SOURCE(RCC_RTCCLKSource));

  if ((RCC_RTCCLKSource & 0x00000300) == 0x00000300)
20001fb8:	687a      	ldr	r2, [r7, #4]
20001fba:	23c0      	movs	r3, #192	; 0xc0
20001fbc:	009b      	lsls	r3, r3, #2
20001fbe:	401a      	ands	r2, r3
20001fc0:	23c0      	movs	r3, #192	; 0xc0
20001fc2:	009b      	lsls	r3, r3, #2
20001fc4:	429a      	cmp	r2, r3
20001fc6:	d10f      	bne.n	20001fe8 <RCC_RTCCLKConfig+0x3c>
  { /* If HSE is selected as RTC clock source, configure HSE division factor for RTC clock */
    tmpreg = RCC->CFGR;
20001fc8:	4b0d      	ldr	r3, [pc, #52]	; (20002000 <RCC_RTCCLKConfig+0x54>)
20001fca:	689b      	ldr	r3, [r3, #8]
20001fcc:	60fb      	str	r3, [r7, #12]

    /* Clear RTCPRE[4:0] bits */
    tmpreg &= ~RCC_CFGR_RTCPRE;
20001fce:	68fb      	ldr	r3, [r7, #12]
20001fd0:	4a0c      	ldr	r2, [pc, #48]	; (20002004 <RCC_RTCCLKConfig+0x58>)
20001fd2:	4013      	ands	r3, r2
20001fd4:	60fb      	str	r3, [r7, #12]

    /* Configure HSE division factor for RTC clock */
    tmpreg |= (RCC_RTCCLKSource & 0xFFFFCFF);
20001fd6:	687b      	ldr	r3, [r7, #4]
20001fd8:	4a0b      	ldr	r2, [pc, #44]	; (20002008 <RCC_RTCCLKConfig+0x5c>)
20001fda:	4013      	ands	r3, r2
20001fdc:	68fa      	ldr	r2, [r7, #12]
20001fde:	4313      	orrs	r3, r2
20001fe0:	60fb      	str	r3, [r7, #12]

    /* Store the new value */
    RCC->CFGR = tmpreg;
20001fe2:	4b07      	ldr	r3, [pc, #28]	; (20002000 <RCC_RTCCLKConfig+0x54>)
20001fe4:	68fa      	ldr	r2, [r7, #12]
20001fe6:	609a      	str	r2, [r3, #8]
  }
    
  /* Select the RTC clock source */
  RCC->BDCR |= (RCC_RTCCLKSource & 0x00000FFF);
20001fe8:	4b05      	ldr	r3, [pc, #20]	; (20002000 <RCC_RTCCLKConfig+0x54>)
20001fea:	6f19      	ldr	r1, [r3, #112]	; 0x70
20001fec:	687b      	ldr	r3, [r7, #4]
20001fee:	051b      	lsls	r3, r3, #20
20001ff0:	0d1a      	lsrs	r2, r3, #20
20001ff2:	4b03      	ldr	r3, [pc, #12]	; (20002000 <RCC_RTCCLKConfig+0x54>)
20001ff4:	430a      	orrs	r2, r1
20001ff6:	671a      	str	r2, [r3, #112]	; 0x70
}
20001ff8:	46c0      	nop			; (mov r8, r8)
20001ffa:	46bd      	mov	sp, r7
20001ffc:	b004      	add	sp, #16
20001ffe:	bd80      	pop	{r7, pc}
20002000:	40023800 	andmi	r3, r2, r0, lsl #16
20002004:	ffe0ffff 			; <UNDEFINED> instruction: 0xffe0ffff
20002008:	0ffffcff 	svceq	0x00fffcff

2000200c <RCC_RTCCLKCmd>:
  *         using the RCC_RTCCLKConfig function.
  * @param  NewState: new state of the RTC clock. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_RTCCLKCmd(FunctionalState NewState)
{
2000200c:	b580      	push	{r7, lr}
2000200e:	b082      	sub	sp, #8
20002010:	af00      	add	r7, sp, #0
20002012:	0002      	movs	r2, r0
20002014:	1dfb      	adds	r3, r7, #7
20002016:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) BDCR_RTCEN_BB = (uint32_t)NewState;
20002018:	4b03      	ldr	r3, [pc, #12]	; (20002028 <RCC_RTCCLKCmd+0x1c>)
2000201a:	1dfa      	adds	r2, r7, #7
2000201c:	7812      	ldrb	r2, [r2, #0]
2000201e:	601a      	str	r2, [r3, #0]
}
20002020:	46c0      	nop			; (mov r8, r8)
20002022:	46bd      	mov	sp, r7
20002024:	b002      	add	sp, #8
20002026:	bd80      	pop	{r7, pc}
20002028:	42470e3c 	submi	r0, r7, #60, 28	; 0x3c0

2000202c <RCC_BackupResetCmd>:
  * @param  NewState: new state of the Backup domain reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_BackupResetCmd(FunctionalState NewState)
{
2000202c:	b580      	push	{r7, lr}
2000202e:	b082      	sub	sp, #8
20002030:	af00      	add	r7, sp, #0
20002032:	0002      	movs	r2, r0
20002034:	1dfb      	adds	r3, r7, #7
20002036:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) BDCR_BDRST_BB = (uint32_t)NewState;
20002038:	4b03      	ldr	r3, [pc, #12]	; (20002048 <RCC_BackupResetCmd+0x1c>)
2000203a:	1dfa      	adds	r2, r7, #7
2000203c:	7812      	ldrb	r2, [r2, #0]
2000203e:	601a      	str	r2, [r3, #0]
}
20002040:	46c0      	nop			; (mov r8, r8)
20002042:	46bd      	mov	sp, r7
20002044:	b002      	add	sp, #8
20002046:	bd80      	pop	{r7, pc}
20002048:	42470e40 	submi	r0, r7, #64, 28	; 0x400

2000204c <RCC_I2SCLKConfig>:
  *            @arg RCC_I2S2CLKSource_Ext: External clock mapped on the I2S_CKIN pin
  *                                        used as I2S clock source
  * @retval None
  */
void RCC_I2SCLKConfig(uint32_t RCC_I2SCLKSource)
{
2000204c:	b580      	push	{r7, lr}
2000204e:	b082      	sub	sp, #8
20002050:	af00      	add	r7, sp, #0
20002052:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_I2SCLK_SOURCE(RCC_I2SCLKSource));

  *(__IO uint32_t *) CFGR_I2SSRC_BB = RCC_I2SCLKSource;  
20002054:	4b03      	ldr	r3, [pc, #12]	; (20002064 <RCC_I2SCLKConfig+0x18>)
20002056:	687a      	ldr	r2, [r7, #4]
20002058:	601a      	str	r2, [r3, #0]
}
2000205a:	46c0      	nop			; (mov r8, r8)
2000205c:	46bd      	mov	sp, r7
2000205e:	b002      	add	sp, #8
20002060:	bd80      	pop	{r7, pc}
20002062:	46c0      	nop			; (mov r8, r8)
20002064:	4247015c 	submi	r0, r7, #92, 2

20002068 <RCC_SAIBlockACLKConfig>:
  *            @arg RCC_SAIACLKSource_Ext: External clock mapped on the I2S_CKIN pin
  *                                        used as SAI1 Block A clock
  * @retval None
  */
void RCC_SAIBlockACLKConfig(uint32_t RCC_SAIBlockACLKSource)
{
20002068:	b580      	push	{r7, lr}
2000206a:	b084      	sub	sp, #16
2000206c:	af00      	add	r7, sp, #0
2000206e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
20002070:	2300      	movs	r3, #0
20002072:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_SAIACLK_SOURCE(RCC_SAIBlockACLKSource));
  
  tmpreg = RCC->DCKCFGR;
20002074:	4a09      	ldr	r2, [pc, #36]	; (2000209c <RCC_SAIBlockACLKConfig+0x34>)
20002076:	238c      	movs	r3, #140	; 0x8c
20002078:	58d3      	ldr	r3, [r2, r3]
2000207a:	60fb      	str	r3, [r7, #12]

  /* Clear RCC_DCKCFGR_SAI1ASRC[1:0] bits */
  tmpreg &= ~RCC_DCKCFGR_SAI1ASRC;
2000207c:	68fb      	ldr	r3, [r7, #12]
2000207e:	4a08      	ldr	r2, [pc, #32]	; (200020a0 <RCC_SAIBlockACLKConfig+0x38>)
20002080:	4013      	ands	r3, r2
20002082:	60fb      	str	r3, [r7, #12]

  /* Set SAI Block A source selection value */
  tmpreg |= RCC_SAIBlockACLKSource;
20002084:	68fa      	ldr	r2, [r7, #12]
20002086:	687b      	ldr	r3, [r7, #4]
20002088:	4313      	orrs	r3, r2
2000208a:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->DCKCFGR = tmpreg;
2000208c:	4903      	ldr	r1, [pc, #12]	; (2000209c <RCC_SAIBlockACLKConfig+0x34>)
2000208e:	228c      	movs	r2, #140	; 0x8c
20002090:	68fb      	ldr	r3, [r7, #12]
20002092:	508b      	str	r3, [r1, r2]
}
20002094:	46c0      	nop			; (mov r8, r8)
20002096:	46bd      	mov	sp, r7
20002098:	b004      	add	sp, #16
2000209a:	bd80      	pop	{r7, pc}
2000209c:	40023800 	andmi	r3, r2, r0, lsl #16
200020a0:	ffcfffff 			; <UNDEFINED> instruction: 0xffcfffff

200020a4 <RCC_SAIBlockBCLKConfig>:
  *            @arg RCC_SAIBCLKSource_Ext: External clock mapped on the I2S_CKIN pin
  *                                        used as SAI1 Block B clock
  * @retval None
  */
void RCC_SAIBlockBCLKConfig(uint32_t RCC_SAIBlockBCLKSource)
{
200020a4:	b580      	push	{r7, lr}
200020a6:	b084      	sub	sp, #16
200020a8:	af00      	add	r7, sp, #0
200020aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
200020ac:	2300      	movs	r3, #0
200020ae:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_SAIBCLK_SOURCE(RCC_SAIBlockBCLKSource));
  
  tmpreg = RCC->DCKCFGR;
200020b0:	4a09      	ldr	r2, [pc, #36]	; (200020d8 <RCC_SAIBlockBCLKConfig+0x34>)
200020b2:	238c      	movs	r3, #140	; 0x8c
200020b4:	58d3      	ldr	r3, [r2, r3]
200020b6:	60fb      	str	r3, [r7, #12]

  /* Clear RCC_DCKCFGR_SAI1BSRC[1:0] bits */
  tmpreg &= ~RCC_DCKCFGR_SAI1BSRC;
200020b8:	68fb      	ldr	r3, [r7, #12]
200020ba:	4a08      	ldr	r2, [pc, #32]	; (200020dc <RCC_SAIBlockBCLKConfig+0x38>)
200020bc:	4013      	ands	r3, r2
200020be:	60fb      	str	r3, [r7, #12]

  /* Set SAI Block B source selection value */
  tmpreg |= RCC_SAIBlockBCLKSource;
200020c0:	68fa      	ldr	r2, [r7, #12]
200020c2:	687b      	ldr	r3, [r7, #4]
200020c4:	4313      	orrs	r3, r2
200020c6:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->DCKCFGR = tmpreg;
200020c8:	4903      	ldr	r1, [pc, #12]	; (200020d8 <RCC_SAIBlockBCLKConfig+0x34>)
200020ca:	228c      	movs	r2, #140	; 0x8c
200020cc:	68fb      	ldr	r3, [r7, #12]
200020ce:	508b      	str	r3, [r1, r2]
}
200020d0:	46c0      	nop			; (mov r8, r8)
200020d2:	46bd      	mov	sp, r7
200020d4:	b004      	add	sp, #16
200020d6:	bd80      	pop	{r7, pc}
200020d8:	40023800 	andmi	r3, r2, r0, lsl #16
200020dc:	ff3fffff 			; <UNDEFINED> instruction: 0xff3fffff

200020e0 <RCC_SAIPLLI2SClkDivConfig>:
  *          SAI1 clock frequency = f(PLLI2S_Q) / RCC_PLLI2SDivQ 
  *              
  * @retval None
  */
void RCC_SAIPLLI2SClkDivConfig(uint32_t RCC_PLLI2SDivQ)  
{
200020e0:	b580      	push	{r7, lr}
200020e2:	b084      	sub	sp, #16
200020e4:	af00      	add	r7, sp, #0
200020e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
200020e8:	2300      	movs	r3, #0
200020ea:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(RCC_PLLI2SDivQ));
  
  tmpreg = RCC->DCKCFGR;
200020ec:	4a0a      	ldr	r2, [pc, #40]	; (20002118 <RCC_SAIPLLI2SClkDivConfig+0x38>)
200020ee:	238c      	movs	r3, #140	; 0x8c
200020f0:	58d3      	ldr	r3, [r2, r3]
200020f2:	60fb      	str	r3, [r7, #12]

  /* Clear PLLI2SDIVQ[4:0] bits */
  tmpreg &= ~(RCC_DCKCFGR_PLLI2SDIVQ);
200020f4:	68fb      	ldr	r3, [r7, #12]
200020f6:	221f      	movs	r2, #31
200020f8:	4393      	bics	r3, r2
200020fa:	60fb      	str	r3, [r7, #12]

  /* Set PLLI2SDIVQ values */
  tmpreg |= (RCC_PLLI2SDivQ - 1);
200020fc:	687b      	ldr	r3, [r7, #4]
200020fe:	3b01      	subs	r3, #1
20002100:	68fa      	ldr	r2, [r7, #12]
20002102:	4313      	orrs	r3, r2
20002104:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->DCKCFGR = tmpreg;
20002106:	4904      	ldr	r1, [pc, #16]	; (20002118 <RCC_SAIPLLI2SClkDivConfig+0x38>)
20002108:	228c      	movs	r2, #140	; 0x8c
2000210a:	68fb      	ldr	r3, [r7, #12]
2000210c:	508b      	str	r3, [r1, r2]
}
2000210e:	46c0      	nop			; (mov r8, r8)
20002110:	46bd      	mov	sp, r7
20002112:	b004      	add	sp, #16
20002114:	bd80      	pop	{r7, pc}
20002116:	46c0      	nop			; (mov r8, r8)
20002118:	40023800 	andmi	r3, r2, r0, lsl #16

2000211c <RCC_SAIPLLSAIClkDivConfig>:
  *          SAI1 clock frequency = f(PLLSAI_Q) / RCC_PLLSAIDivQ  
  *              
  * @retval None
  */
void RCC_SAIPLLSAIClkDivConfig(uint32_t RCC_PLLSAIDivQ)  
{
2000211c:	b580      	push	{r7, lr}
2000211e:	b084      	sub	sp, #16
20002120:	af00      	add	r7, sp, #0
20002122:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
20002124:	2300      	movs	r3, #0
20002126:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(RCC_PLLSAIDivQ));
  
  tmpreg = RCC->DCKCFGR;
20002128:	4a0a      	ldr	r2, [pc, #40]	; (20002154 <RCC_SAIPLLSAIClkDivConfig+0x38>)
2000212a:	238c      	movs	r3, #140	; 0x8c
2000212c:	58d3      	ldr	r3, [r2, r3]
2000212e:	60fb      	str	r3, [r7, #12]

  /* Clear PLLI2SDIVQ[4:0] and PLLSAIDIVQ[4:0] bits */
  tmpreg &= ~(RCC_DCKCFGR_PLLSAIDIVQ);
20002130:	68fb      	ldr	r3, [r7, #12]
20002132:	4a09      	ldr	r2, [pc, #36]	; (20002158 <RCC_SAIPLLSAIClkDivConfig+0x3c>)
20002134:	4013      	ands	r3, r2
20002136:	60fb      	str	r3, [r7, #12]

  /* Set PLLSAIDIVQ values */
  tmpreg |= ((RCC_PLLSAIDivQ - 1) << 8);
20002138:	687b      	ldr	r3, [r7, #4]
2000213a:	3b01      	subs	r3, #1
2000213c:	021b      	lsls	r3, r3, #8
2000213e:	68fa      	ldr	r2, [r7, #12]
20002140:	4313      	orrs	r3, r2
20002142:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->DCKCFGR = tmpreg;
20002144:	4903      	ldr	r1, [pc, #12]	; (20002154 <RCC_SAIPLLSAIClkDivConfig+0x38>)
20002146:	228c      	movs	r2, #140	; 0x8c
20002148:	68fb      	ldr	r3, [r7, #12]
2000214a:	508b      	str	r3, [r1, r2]
}
2000214c:	46c0      	nop			; (mov r8, r8)
2000214e:	46bd      	mov	sp, r7
20002150:	b004      	add	sp, #16
20002152:	bd80      	pop	{r7, pc}
20002154:	40023800 	andmi	r3, r2, r0, lsl #16
20002158:	ffffe0ff 			; <UNDEFINED> instruction: 0xffffe0ff

2000215c <RCC_LTDCCLKDivConfig>:
  *            @arg RCC_PLLSAIDivR_Div16: LTDC clock = f(PLLSAI_R)/16
  *            
  * @retval None
  */
void RCC_LTDCCLKDivConfig(uint32_t RCC_PLLSAIDivR)
{
2000215c:	b580      	push	{r7, lr}
2000215e:	b084      	sub	sp, #16
20002160:	af00      	add	r7, sp, #0
20002162:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
20002164:	2300      	movs	r3, #0
20002166:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_PLLSAI_DIVR_VALUE(RCC_PLLSAIDivR));
  
  tmpreg = RCC->DCKCFGR;
20002168:	4a09      	ldr	r2, [pc, #36]	; (20002190 <RCC_LTDCCLKDivConfig+0x34>)
2000216a:	238c      	movs	r3, #140	; 0x8c
2000216c:	58d3      	ldr	r3, [r2, r3]
2000216e:	60fb      	str	r3, [r7, #12]

  /* Clear PLLSAIDIVR[2:0] bits */
  tmpreg &= ~RCC_DCKCFGR_PLLSAIDIVR;
20002170:	68fb      	ldr	r3, [r7, #12]
20002172:	4a08      	ldr	r2, [pc, #32]	; (20002194 <RCC_LTDCCLKDivConfig+0x38>)
20002174:	4013      	ands	r3, r2
20002176:	60fb      	str	r3, [r7, #12]

  /* Set PLLSAIDIVR values */
  tmpreg |= RCC_PLLSAIDivR;
20002178:	68fa      	ldr	r2, [r7, #12]
2000217a:	687b      	ldr	r3, [r7, #4]
2000217c:	4313      	orrs	r3, r2
2000217e:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->DCKCFGR = tmpreg;
20002180:	4903      	ldr	r1, [pc, #12]	; (20002190 <RCC_LTDCCLKDivConfig+0x34>)
20002182:	228c      	movs	r2, #140	; 0x8c
20002184:	68fb      	ldr	r3, [r7, #12]
20002186:	508b      	str	r3, [r1, r2]
}
20002188:	46c0      	nop			; (mov r8, r8)
2000218a:	46bd      	mov	sp, r7
2000218c:	b004      	add	sp, #16
2000218e:	bd80      	pop	{r7, pc}
20002190:	40023800 	andmi	r3, r2, r0, lsl #16
20002194:	fffcffff 			; <UNDEFINED> instruction: 0xfffcffff

20002198 <RCC_TIMCLKPresConfig>:
  *                 else it is equal to [(HPRE * PPREx) / 4] if PPREx is corresponding 
  *                 to division by 8 or more.
  * @retval None
  */
void RCC_TIMCLKPresConfig(uint32_t RCC_TIMCLKPrescaler)
{
20002198:	b580      	push	{r7, lr}
2000219a:	b082      	sub	sp, #8
2000219c:	af00      	add	r7, sp, #0
2000219e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_TIMCLK_PRESCALER(RCC_TIMCLKPrescaler));

  *(__IO uint32_t *) DCKCFGR_TIMPRE_BB = RCC_TIMCLKPrescaler;
200021a0:	4b03      	ldr	r3, [pc, #12]	; (200021b0 <RCC_TIMCLKPresConfig+0x18>)
200021a2:	687a      	ldr	r2, [r7, #4]
200021a4:	601a      	str	r2, [r3, #0]
}
200021a6:	46c0      	nop			; (mov r8, r8)
200021a8:	46bd      	mov	sp, r7
200021aa:	b002      	add	sp, #8
200021ac:	bd80      	pop	{r7, pc}
200021ae:	46c0      	nop			; (mov r8, r8)
200021b0:	424711e0 	submi	r1, r7, #224, 2	; 0x38

200021b4 <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
200021b4:	b580      	push	{r7, lr}
200021b6:	b082      	sub	sp, #8
200021b8:	af00      	add	r7, sp, #0
200021ba:	6078      	str	r0, [r7, #4]
200021bc:	000a      	movs	r2, r1
200021be:	1cfb      	adds	r3, r7, #3
200021c0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
200021c2:	1cfb      	adds	r3, r7, #3
200021c4:	781b      	ldrb	r3, [r3, #0]
200021c6:	2b00      	cmp	r3, #0
200021c8:	d006      	beq.n	200021d8 <RCC_AHB1PeriphClockCmd+0x24>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
200021ca:	4b09      	ldr	r3, [pc, #36]	; (200021f0 <RCC_AHB1PeriphClockCmd+0x3c>)
200021cc:	6b19      	ldr	r1, [r3, #48]	; 0x30
200021ce:	4b08      	ldr	r3, [pc, #32]	; (200021f0 <RCC_AHB1PeriphClockCmd+0x3c>)
200021d0:	687a      	ldr	r2, [r7, #4]
200021d2:	430a      	orrs	r2, r1
200021d4:	631a      	str	r2, [r3, #48]	; 0x30
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
  }
}
200021d6:	e006      	b.n	200021e6 <RCC_AHB1PeriphClockCmd+0x32>
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
200021d8:	4b05      	ldr	r3, [pc, #20]	; (200021f0 <RCC_AHB1PeriphClockCmd+0x3c>)
200021da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
200021dc:	687b      	ldr	r3, [r7, #4]
200021de:	43d9      	mvns	r1, r3
200021e0:	4b03      	ldr	r3, [pc, #12]	; (200021f0 <RCC_AHB1PeriphClockCmd+0x3c>)
200021e2:	400a      	ands	r2, r1
200021e4:	631a      	str	r2, [r3, #48]	; 0x30
}
200021e6:	46c0      	nop			; (mov r8, r8)
200021e8:	46bd      	mov	sp, r7
200021ea:	b002      	add	sp, #8
200021ec:	bd80      	pop	{r7, pc}
200021ee:	46c0      	nop			; (mov r8, r8)
200021f0:	40023800 	andmi	r3, r2, r0, lsl #16

200021f4 <RCC_AHB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB2PeriphClockCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
{
200021f4:	b580      	push	{r7, lr}
200021f6:	b082      	sub	sp, #8
200021f8:	af00      	add	r7, sp, #0
200021fa:	6078      	str	r0, [r7, #4]
200021fc:	000a      	movs	r2, r1
200021fe:	1cfb      	adds	r3, r7, #3
20002200:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
20002202:	1cfb      	adds	r3, r7, #3
20002204:	781b      	ldrb	r3, [r3, #0]
20002206:	2b00      	cmp	r3, #0
20002208:	d006      	beq.n	20002218 <RCC_AHB2PeriphClockCmd+0x24>
  {
    RCC->AHB2ENR |= RCC_AHB2Periph;
2000220a:	4b09      	ldr	r3, [pc, #36]	; (20002230 <RCC_AHB2PeriphClockCmd+0x3c>)
2000220c:	6b59      	ldr	r1, [r3, #52]	; 0x34
2000220e:	4b08      	ldr	r3, [pc, #32]	; (20002230 <RCC_AHB2PeriphClockCmd+0x3c>)
20002210:	687a      	ldr	r2, [r7, #4]
20002212:	430a      	orrs	r2, r1
20002214:	635a      	str	r2, [r3, #52]	; 0x34
  }
  else
  {
    RCC->AHB2ENR &= ~RCC_AHB2Periph;
  }
}
20002216:	e006      	b.n	20002226 <RCC_AHB2PeriphClockCmd+0x32>
    RCC->AHB2ENR &= ~RCC_AHB2Periph;
20002218:	4b05      	ldr	r3, [pc, #20]	; (20002230 <RCC_AHB2PeriphClockCmd+0x3c>)
2000221a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
2000221c:	687b      	ldr	r3, [r7, #4]
2000221e:	43d9      	mvns	r1, r3
20002220:	4b03      	ldr	r3, [pc, #12]	; (20002230 <RCC_AHB2PeriphClockCmd+0x3c>)
20002222:	400a      	ands	r2, r1
20002224:	635a      	str	r2, [r3, #52]	; 0x34
}
20002226:	46c0      	nop			; (mov r8, r8)
20002228:	46bd      	mov	sp, r7
2000222a:	b002      	add	sp, #8
2000222c:	bd80      	pop	{r7, pc}
2000222e:	46c0      	nop			; (mov r8, r8)
20002230:	40023800 	andmi	r3, r2, r0, lsl #16

20002234 <RCC_AHB3PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB3PeriphClockCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
{
20002234:	b580      	push	{r7, lr}
20002236:	b082      	sub	sp, #8
20002238:	af00      	add	r7, sp, #0
2000223a:	6078      	str	r0, [r7, #4]
2000223c:	000a      	movs	r2, r1
2000223e:	1cfb      	adds	r3, r7, #3
20002240:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
20002242:	1cfb      	adds	r3, r7, #3
20002244:	781b      	ldrb	r3, [r3, #0]
20002246:	2b00      	cmp	r3, #0
20002248:	d006      	beq.n	20002258 <RCC_AHB3PeriphClockCmd+0x24>
  {
    RCC->AHB3ENR |= RCC_AHB3Periph;
2000224a:	4b09      	ldr	r3, [pc, #36]	; (20002270 <RCC_AHB3PeriphClockCmd+0x3c>)
2000224c:	6b99      	ldr	r1, [r3, #56]	; 0x38
2000224e:	4b08      	ldr	r3, [pc, #32]	; (20002270 <RCC_AHB3PeriphClockCmd+0x3c>)
20002250:	687a      	ldr	r2, [r7, #4]
20002252:	430a      	orrs	r2, r1
20002254:	639a      	str	r2, [r3, #56]	; 0x38
  }
  else
  {
    RCC->AHB3ENR &= ~RCC_AHB3Periph;
  }
}
20002256:	e006      	b.n	20002266 <RCC_AHB3PeriphClockCmd+0x32>
    RCC->AHB3ENR &= ~RCC_AHB3Periph;
20002258:	4b05      	ldr	r3, [pc, #20]	; (20002270 <RCC_AHB3PeriphClockCmd+0x3c>)
2000225a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
2000225c:	687b      	ldr	r3, [r7, #4]
2000225e:	43d9      	mvns	r1, r3
20002260:	4b03      	ldr	r3, [pc, #12]	; (20002270 <RCC_AHB3PeriphClockCmd+0x3c>)
20002262:	400a      	ands	r2, r1
20002264:	639a      	str	r2, [r3, #56]	; 0x38
}
20002266:	46c0      	nop			; (mov r8, r8)
20002268:	46bd      	mov	sp, r7
2000226a:	b002      	add	sp, #8
2000226c:	bd80      	pop	{r7, pc}
2000226e:	46c0      	nop			; (mov r8, r8)
20002270:	40023800 	andmi	r3, r2, r0, lsl #16

20002274 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
20002274:	b580      	push	{r7, lr}
20002276:	b082      	sub	sp, #8
20002278:	af00      	add	r7, sp, #0
2000227a:	6078      	str	r0, [r7, #4]
2000227c:	000a      	movs	r2, r1
2000227e:	1cfb      	adds	r3, r7, #3
20002280:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
20002282:	1cfb      	adds	r3, r7, #3
20002284:	781b      	ldrb	r3, [r3, #0]
20002286:	2b00      	cmp	r3, #0
20002288:	d006      	beq.n	20002298 <RCC_APB1PeriphClockCmd+0x24>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
2000228a:	4b09      	ldr	r3, [pc, #36]	; (200022b0 <RCC_APB1PeriphClockCmd+0x3c>)
2000228c:	6c19      	ldr	r1, [r3, #64]	; 0x40
2000228e:	4b08      	ldr	r3, [pc, #32]	; (200022b0 <RCC_APB1PeriphClockCmd+0x3c>)
20002290:	687a      	ldr	r2, [r7, #4]
20002292:	430a      	orrs	r2, r1
20002294:	641a      	str	r2, [r3, #64]	; 0x40
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
20002296:	e006      	b.n	200022a6 <RCC_APB1PeriphClockCmd+0x32>
    RCC->APB1ENR &= ~RCC_APB1Periph;
20002298:	4b05      	ldr	r3, [pc, #20]	; (200022b0 <RCC_APB1PeriphClockCmd+0x3c>)
2000229a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
2000229c:	687b      	ldr	r3, [r7, #4]
2000229e:	43d9      	mvns	r1, r3
200022a0:	4b03      	ldr	r3, [pc, #12]	; (200022b0 <RCC_APB1PeriphClockCmd+0x3c>)
200022a2:	400a      	ands	r2, r1
200022a4:	641a      	str	r2, [r3, #64]	; 0x40
}
200022a6:	46c0      	nop			; (mov r8, r8)
200022a8:	46bd      	mov	sp, r7
200022aa:	b002      	add	sp, #8
200022ac:	bd80      	pop	{r7, pc}
200022ae:	46c0      	nop			; (mov r8, r8)
200022b0:	40023800 	andmi	r3, r2, r0, lsl #16

200022b4 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
200022b4:	b580      	push	{r7, lr}
200022b6:	b082      	sub	sp, #8
200022b8:	af00      	add	r7, sp, #0
200022ba:	6078      	str	r0, [r7, #4]
200022bc:	000a      	movs	r2, r1
200022be:	1cfb      	adds	r3, r7, #3
200022c0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
200022c2:	1cfb      	adds	r3, r7, #3
200022c4:	781b      	ldrb	r3, [r3, #0]
200022c6:	2b00      	cmp	r3, #0
200022c8:	d006      	beq.n	200022d8 <RCC_APB2PeriphClockCmd+0x24>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
200022ca:	4b09      	ldr	r3, [pc, #36]	; (200022f0 <RCC_APB2PeriphClockCmd+0x3c>)
200022cc:	6c59      	ldr	r1, [r3, #68]	; 0x44
200022ce:	4b08      	ldr	r3, [pc, #32]	; (200022f0 <RCC_APB2PeriphClockCmd+0x3c>)
200022d0:	687a      	ldr	r2, [r7, #4]
200022d2:	430a      	orrs	r2, r1
200022d4:	645a      	str	r2, [r3, #68]	; 0x44
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
200022d6:	e006      	b.n	200022e6 <RCC_APB2PeriphClockCmd+0x32>
    RCC->APB2ENR &= ~RCC_APB2Periph;
200022d8:	4b05      	ldr	r3, [pc, #20]	; (200022f0 <RCC_APB2PeriphClockCmd+0x3c>)
200022da:	6c5a      	ldr	r2, [r3, #68]	; 0x44
200022dc:	687b      	ldr	r3, [r7, #4]
200022de:	43d9      	mvns	r1, r3
200022e0:	4b03      	ldr	r3, [pc, #12]	; (200022f0 <RCC_APB2PeriphClockCmd+0x3c>)
200022e2:	400a      	ands	r2, r1
200022e4:	645a      	str	r2, [r3, #68]	; 0x44
}
200022e6:	46c0      	nop			; (mov r8, r8)
200022e8:	46bd      	mov	sp, r7
200022ea:	b002      	add	sp, #8
200022ec:	bd80      	pop	{r7, pc}
200022ee:	46c0      	nop			; (mov r8, r8)
200022f0:	40023800 	andmi	r3, r2, r0, lsl #16

200022f4 <RCC_AHB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphResetCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
200022f4:	b580      	push	{r7, lr}
200022f6:	b082      	sub	sp, #8
200022f8:	af00      	add	r7, sp, #0
200022fa:	6078      	str	r0, [r7, #4]
200022fc:	000a      	movs	r2, r1
200022fe:	1cfb      	adds	r3, r7, #3
20002300:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_RESET_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
20002302:	1cfb      	adds	r3, r7, #3
20002304:	781b      	ldrb	r3, [r3, #0]
20002306:	2b00      	cmp	r3, #0
20002308:	d006      	beq.n	20002318 <RCC_AHB1PeriphResetCmd+0x24>
  {
    RCC->AHB1RSTR |= RCC_AHB1Periph;
2000230a:	4b09      	ldr	r3, [pc, #36]	; (20002330 <RCC_AHB1PeriphResetCmd+0x3c>)
2000230c:	6919      	ldr	r1, [r3, #16]
2000230e:	4b08      	ldr	r3, [pc, #32]	; (20002330 <RCC_AHB1PeriphResetCmd+0x3c>)
20002310:	687a      	ldr	r2, [r7, #4]
20002312:	430a      	orrs	r2, r1
20002314:	611a      	str	r2, [r3, #16]
  }
  else
  {
    RCC->AHB1RSTR &= ~RCC_AHB1Periph;
  }
}
20002316:	e006      	b.n	20002326 <RCC_AHB1PeriphResetCmd+0x32>
    RCC->AHB1RSTR &= ~RCC_AHB1Periph;
20002318:	4b05      	ldr	r3, [pc, #20]	; (20002330 <RCC_AHB1PeriphResetCmd+0x3c>)
2000231a:	691a      	ldr	r2, [r3, #16]
2000231c:	687b      	ldr	r3, [r7, #4]
2000231e:	43d9      	mvns	r1, r3
20002320:	4b03      	ldr	r3, [pc, #12]	; (20002330 <RCC_AHB1PeriphResetCmd+0x3c>)
20002322:	400a      	ands	r2, r1
20002324:	611a      	str	r2, [r3, #16]
}
20002326:	46c0      	nop			; (mov r8, r8)
20002328:	46bd      	mov	sp, r7
2000232a:	b002      	add	sp, #8
2000232c:	bd80      	pop	{r7, pc}
2000232e:	46c0      	nop			; (mov r8, r8)
20002330:	40023800 	andmi	r3, r2, r0, lsl #16

20002334 <RCC_AHB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB2PeriphResetCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
{
20002334:	b580      	push	{r7, lr}
20002336:	b082      	sub	sp, #8
20002338:	af00      	add	r7, sp, #0
2000233a:	6078      	str	r0, [r7, #4]
2000233c:	000a      	movs	r2, r1
2000233e:	1cfb      	adds	r3, r7, #3
20002340:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
20002342:	1cfb      	adds	r3, r7, #3
20002344:	781b      	ldrb	r3, [r3, #0]
20002346:	2b00      	cmp	r3, #0
20002348:	d006      	beq.n	20002358 <RCC_AHB2PeriphResetCmd+0x24>
  {
    RCC->AHB2RSTR |= RCC_AHB2Periph;
2000234a:	4b09      	ldr	r3, [pc, #36]	; (20002370 <RCC_AHB2PeriphResetCmd+0x3c>)
2000234c:	6959      	ldr	r1, [r3, #20]
2000234e:	4b08      	ldr	r3, [pc, #32]	; (20002370 <RCC_AHB2PeriphResetCmd+0x3c>)
20002350:	687a      	ldr	r2, [r7, #4]
20002352:	430a      	orrs	r2, r1
20002354:	615a      	str	r2, [r3, #20]
  }
  else
  {
    RCC->AHB2RSTR &= ~RCC_AHB2Periph;
  }
}
20002356:	e006      	b.n	20002366 <RCC_AHB2PeriphResetCmd+0x32>
    RCC->AHB2RSTR &= ~RCC_AHB2Periph;
20002358:	4b05      	ldr	r3, [pc, #20]	; (20002370 <RCC_AHB2PeriphResetCmd+0x3c>)
2000235a:	695a      	ldr	r2, [r3, #20]
2000235c:	687b      	ldr	r3, [r7, #4]
2000235e:	43d9      	mvns	r1, r3
20002360:	4b03      	ldr	r3, [pc, #12]	; (20002370 <RCC_AHB2PeriphResetCmd+0x3c>)
20002362:	400a      	ands	r2, r1
20002364:	615a      	str	r2, [r3, #20]
}
20002366:	46c0      	nop			; (mov r8, r8)
20002368:	46bd      	mov	sp, r7
2000236a:	b002      	add	sp, #8
2000236c:	bd80      	pop	{r7, pc}
2000236e:	46c0      	nop			; (mov r8, r8)
20002370:	40023800 	andmi	r3, r2, r0, lsl #16

20002374 <RCC_AHB3PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB3PeriphResetCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
{
20002374:	b580      	push	{r7, lr}
20002376:	b082      	sub	sp, #8
20002378:	af00      	add	r7, sp, #0
2000237a:	6078      	str	r0, [r7, #4]
2000237c:	000a      	movs	r2, r1
2000237e:	1cfb      	adds	r3, r7, #3
20002380:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
20002382:	1cfb      	adds	r3, r7, #3
20002384:	781b      	ldrb	r3, [r3, #0]
20002386:	2b00      	cmp	r3, #0
20002388:	d006      	beq.n	20002398 <RCC_AHB3PeriphResetCmd+0x24>
  {
    RCC->AHB3RSTR |= RCC_AHB3Periph;
2000238a:	4b09      	ldr	r3, [pc, #36]	; (200023b0 <RCC_AHB3PeriphResetCmd+0x3c>)
2000238c:	6999      	ldr	r1, [r3, #24]
2000238e:	4b08      	ldr	r3, [pc, #32]	; (200023b0 <RCC_AHB3PeriphResetCmd+0x3c>)
20002390:	687a      	ldr	r2, [r7, #4]
20002392:	430a      	orrs	r2, r1
20002394:	619a      	str	r2, [r3, #24]
  }
  else
  {
    RCC->AHB3RSTR &= ~RCC_AHB3Periph;
  }
}
20002396:	e006      	b.n	200023a6 <RCC_AHB3PeriphResetCmd+0x32>
    RCC->AHB3RSTR &= ~RCC_AHB3Periph;
20002398:	4b05      	ldr	r3, [pc, #20]	; (200023b0 <RCC_AHB3PeriphResetCmd+0x3c>)
2000239a:	699a      	ldr	r2, [r3, #24]
2000239c:	687b      	ldr	r3, [r7, #4]
2000239e:	43d9      	mvns	r1, r3
200023a0:	4b03      	ldr	r3, [pc, #12]	; (200023b0 <RCC_AHB3PeriphResetCmd+0x3c>)
200023a2:	400a      	ands	r2, r1
200023a4:	619a      	str	r2, [r3, #24]
}
200023a6:	46c0      	nop			; (mov r8, r8)
200023a8:	46bd      	mov	sp, r7
200023aa:	b002      	add	sp, #8
200023ac:	bd80      	pop	{r7, pc}
200023ae:	46c0      	nop			; (mov r8, r8)
200023b0:	40023800 	andmi	r3, r2, r0, lsl #16

200023b4 <RCC_APB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
200023b4:	b580      	push	{r7, lr}
200023b6:	b082      	sub	sp, #8
200023b8:	af00      	add	r7, sp, #0
200023ba:	6078      	str	r0, [r7, #4]
200023bc:	000a      	movs	r2, r1
200023be:	1cfb      	adds	r3, r7, #3
200023c0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
200023c2:	1cfb      	adds	r3, r7, #3
200023c4:	781b      	ldrb	r3, [r3, #0]
200023c6:	2b00      	cmp	r3, #0
200023c8:	d006      	beq.n	200023d8 <RCC_APB1PeriphResetCmd+0x24>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
200023ca:	4b09      	ldr	r3, [pc, #36]	; (200023f0 <RCC_APB1PeriphResetCmd+0x3c>)
200023cc:	6a19      	ldr	r1, [r3, #32]
200023ce:	4b08      	ldr	r3, [pc, #32]	; (200023f0 <RCC_APB1PeriphResetCmd+0x3c>)
200023d0:	687a      	ldr	r2, [r7, #4]
200023d2:	430a      	orrs	r2, r1
200023d4:	621a      	str	r2, [r3, #32]
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
  }
}
200023d6:	e006      	b.n	200023e6 <RCC_APB1PeriphResetCmd+0x32>
    RCC->APB1RSTR &= ~RCC_APB1Periph;
200023d8:	4b05      	ldr	r3, [pc, #20]	; (200023f0 <RCC_APB1PeriphResetCmd+0x3c>)
200023da:	6a1a      	ldr	r2, [r3, #32]
200023dc:	687b      	ldr	r3, [r7, #4]
200023de:	43d9      	mvns	r1, r3
200023e0:	4b03      	ldr	r3, [pc, #12]	; (200023f0 <RCC_APB1PeriphResetCmd+0x3c>)
200023e2:	400a      	ands	r2, r1
200023e4:	621a      	str	r2, [r3, #32]
}
200023e6:	46c0      	nop			; (mov r8, r8)
200023e8:	46bd      	mov	sp, r7
200023ea:	b002      	add	sp, #8
200023ec:	bd80      	pop	{r7, pc}
200023ee:	46c0      	nop			; (mov r8, r8)
200023f0:	40023800 	andmi	r3, r2, r0, lsl #16

200023f4 <RCC_APB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
200023f4:	b580      	push	{r7, lr}
200023f6:	b082      	sub	sp, #8
200023f8:	af00      	add	r7, sp, #0
200023fa:	6078      	str	r0, [r7, #4]
200023fc:	000a      	movs	r2, r1
200023fe:	1cfb      	adds	r3, r7, #3
20002400:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_RESET_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
20002402:	1cfb      	adds	r3, r7, #3
20002404:	781b      	ldrb	r3, [r3, #0]
20002406:	2b00      	cmp	r3, #0
20002408:	d006      	beq.n	20002418 <RCC_APB2PeriphResetCmd+0x24>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
2000240a:	4b09      	ldr	r3, [pc, #36]	; (20002430 <RCC_APB2PeriphResetCmd+0x3c>)
2000240c:	6a59      	ldr	r1, [r3, #36]	; 0x24
2000240e:	4b08      	ldr	r3, [pc, #32]	; (20002430 <RCC_APB2PeriphResetCmd+0x3c>)
20002410:	687a      	ldr	r2, [r7, #4]
20002412:	430a      	orrs	r2, r1
20002414:	625a      	str	r2, [r3, #36]	; 0x24
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
  }
}
20002416:	e006      	b.n	20002426 <RCC_APB2PeriphResetCmd+0x32>
    RCC->APB2RSTR &= ~RCC_APB2Periph;
20002418:	4b05      	ldr	r3, [pc, #20]	; (20002430 <RCC_APB2PeriphResetCmd+0x3c>)
2000241a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
2000241c:	687b      	ldr	r3, [r7, #4]
2000241e:	43d9      	mvns	r1, r3
20002420:	4b03      	ldr	r3, [pc, #12]	; (20002430 <RCC_APB2PeriphResetCmd+0x3c>)
20002422:	400a      	ands	r2, r1
20002424:	625a      	str	r2, [r3, #36]	; 0x24
}
20002426:	46c0      	nop			; (mov r8, r8)
20002428:	46bd      	mov	sp, r7
2000242a:	b002      	add	sp, #8
2000242c:	bd80      	pop	{r7, pc}
2000242e:	46c0      	nop			; (mov r8, r8)
20002430:	40023800 	andmi	r3, r2, r0, lsl #16

20002434 <RCC_AHB1PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockLPModeCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
20002434:	b580      	push	{r7, lr}
20002436:	b082      	sub	sp, #8
20002438:	af00      	add	r7, sp, #0
2000243a:	6078      	str	r0, [r7, #4]
2000243c:	000a      	movs	r2, r1
2000243e:	1cfb      	adds	r3, r7, #3
20002440:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_LPMODE_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
20002442:	1cfb      	adds	r3, r7, #3
20002444:	781b      	ldrb	r3, [r3, #0]
20002446:	2b00      	cmp	r3, #0
20002448:	d006      	beq.n	20002458 <RCC_AHB1PeriphClockLPModeCmd+0x24>
  {
    RCC->AHB1LPENR |= RCC_AHB1Periph;
2000244a:	4b09      	ldr	r3, [pc, #36]	; (20002470 <RCC_AHB1PeriphClockLPModeCmd+0x3c>)
2000244c:	6d19      	ldr	r1, [r3, #80]	; 0x50
2000244e:	4b08      	ldr	r3, [pc, #32]	; (20002470 <RCC_AHB1PeriphClockLPModeCmd+0x3c>)
20002450:	687a      	ldr	r2, [r7, #4]
20002452:	430a      	orrs	r2, r1
20002454:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    RCC->AHB1LPENR &= ~RCC_AHB1Periph;
  }
}
20002456:	e006      	b.n	20002466 <RCC_AHB1PeriphClockLPModeCmd+0x32>
    RCC->AHB1LPENR &= ~RCC_AHB1Periph;
20002458:	4b05      	ldr	r3, [pc, #20]	; (20002470 <RCC_AHB1PeriphClockLPModeCmd+0x3c>)
2000245a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
2000245c:	687b      	ldr	r3, [r7, #4]
2000245e:	43d9      	mvns	r1, r3
20002460:	4b03      	ldr	r3, [pc, #12]	; (20002470 <RCC_AHB1PeriphClockLPModeCmd+0x3c>)
20002462:	400a      	ands	r2, r1
20002464:	651a      	str	r2, [r3, #80]	; 0x50
}
20002466:	46c0      	nop			; (mov r8, r8)
20002468:	46bd      	mov	sp, r7
2000246a:	b002      	add	sp, #8
2000246c:	bd80      	pop	{r7, pc}
2000246e:	46c0      	nop			; (mov r8, r8)
20002470:	40023800 	andmi	r3, r2, r0, lsl #16

20002474 <RCC_AHB2PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB2PeriphClockLPModeCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
{
20002474:	b580      	push	{r7, lr}
20002476:	b082      	sub	sp, #8
20002478:	af00      	add	r7, sp, #0
2000247a:	6078      	str	r0, [r7, #4]
2000247c:	000a      	movs	r2, r1
2000247e:	1cfb      	adds	r3, r7, #3
20002480:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
20002482:	1cfb      	adds	r3, r7, #3
20002484:	781b      	ldrb	r3, [r3, #0]
20002486:	2b00      	cmp	r3, #0
20002488:	d006      	beq.n	20002498 <RCC_AHB2PeriphClockLPModeCmd+0x24>
  {
    RCC->AHB2LPENR |= RCC_AHB2Periph;
2000248a:	4b09      	ldr	r3, [pc, #36]	; (200024b0 <RCC_AHB2PeriphClockLPModeCmd+0x3c>)
2000248c:	6d59      	ldr	r1, [r3, #84]	; 0x54
2000248e:	4b08      	ldr	r3, [pc, #32]	; (200024b0 <RCC_AHB2PeriphClockLPModeCmd+0x3c>)
20002490:	687a      	ldr	r2, [r7, #4]
20002492:	430a      	orrs	r2, r1
20002494:	655a      	str	r2, [r3, #84]	; 0x54
  }
  else
  {
    RCC->AHB2LPENR &= ~RCC_AHB2Periph;
  }
}
20002496:	e006      	b.n	200024a6 <RCC_AHB2PeriphClockLPModeCmd+0x32>
    RCC->AHB2LPENR &= ~RCC_AHB2Periph;
20002498:	4b05      	ldr	r3, [pc, #20]	; (200024b0 <RCC_AHB2PeriphClockLPModeCmd+0x3c>)
2000249a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
2000249c:	687b      	ldr	r3, [r7, #4]
2000249e:	43d9      	mvns	r1, r3
200024a0:	4b03      	ldr	r3, [pc, #12]	; (200024b0 <RCC_AHB2PeriphClockLPModeCmd+0x3c>)
200024a2:	400a      	ands	r2, r1
200024a4:	655a      	str	r2, [r3, #84]	; 0x54
}
200024a6:	46c0      	nop			; (mov r8, r8)
200024a8:	46bd      	mov	sp, r7
200024aa:	b002      	add	sp, #8
200024ac:	bd80      	pop	{r7, pc}
200024ae:	46c0      	nop			; (mov r8, r8)
200024b0:	40023800 	andmi	r3, r2, r0, lsl #16

200024b4 <RCC_AHB3PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB3PeriphClockLPModeCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
{
200024b4:	b580      	push	{r7, lr}
200024b6:	b082      	sub	sp, #8
200024b8:	af00      	add	r7, sp, #0
200024ba:	6078      	str	r0, [r7, #4]
200024bc:	000a      	movs	r2, r1
200024be:	1cfb      	adds	r3, r7, #3
200024c0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
200024c2:	1cfb      	adds	r3, r7, #3
200024c4:	781b      	ldrb	r3, [r3, #0]
200024c6:	2b00      	cmp	r3, #0
200024c8:	d006      	beq.n	200024d8 <RCC_AHB3PeriphClockLPModeCmd+0x24>
  {
    RCC->AHB3LPENR |= RCC_AHB3Periph;
200024ca:	4b09      	ldr	r3, [pc, #36]	; (200024f0 <RCC_AHB3PeriphClockLPModeCmd+0x3c>)
200024cc:	6d99      	ldr	r1, [r3, #88]	; 0x58
200024ce:	4b08      	ldr	r3, [pc, #32]	; (200024f0 <RCC_AHB3PeriphClockLPModeCmd+0x3c>)
200024d0:	687a      	ldr	r2, [r7, #4]
200024d2:	430a      	orrs	r2, r1
200024d4:	659a      	str	r2, [r3, #88]	; 0x58
  }
  else
  {
    RCC->AHB3LPENR &= ~RCC_AHB3Periph;
  }
}
200024d6:	e006      	b.n	200024e6 <RCC_AHB3PeriphClockLPModeCmd+0x32>
    RCC->AHB3LPENR &= ~RCC_AHB3Periph;
200024d8:	4b05      	ldr	r3, [pc, #20]	; (200024f0 <RCC_AHB3PeriphClockLPModeCmd+0x3c>)
200024da:	6d9a      	ldr	r2, [r3, #88]	; 0x58
200024dc:	687b      	ldr	r3, [r7, #4]
200024de:	43d9      	mvns	r1, r3
200024e0:	4b03      	ldr	r3, [pc, #12]	; (200024f0 <RCC_AHB3PeriphClockLPModeCmd+0x3c>)
200024e2:	400a      	ands	r2, r1
200024e4:	659a      	str	r2, [r3, #88]	; 0x58
}
200024e6:	46c0      	nop			; (mov r8, r8)
200024e8:	46bd      	mov	sp, r7
200024ea:	b002      	add	sp, #8
200024ec:	bd80      	pop	{r7, pc}
200024ee:	46c0      	nop			; (mov r8, r8)
200024f0:	40023800 	andmi	r3, r2, r0, lsl #16

200024f4 <RCC_APB1PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockLPModeCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
200024f4:	b580      	push	{r7, lr}
200024f6:	b082      	sub	sp, #8
200024f8:	af00      	add	r7, sp, #0
200024fa:	6078      	str	r0, [r7, #4]
200024fc:	000a      	movs	r2, r1
200024fe:	1cfb      	adds	r3, r7, #3
20002500:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
20002502:	1cfb      	adds	r3, r7, #3
20002504:	781b      	ldrb	r3, [r3, #0]
20002506:	2b00      	cmp	r3, #0
20002508:	d006      	beq.n	20002518 <RCC_APB1PeriphClockLPModeCmd+0x24>
  {
    RCC->APB1LPENR |= RCC_APB1Periph;
2000250a:	4b09      	ldr	r3, [pc, #36]	; (20002530 <RCC_APB1PeriphClockLPModeCmd+0x3c>)
2000250c:	6e19      	ldr	r1, [r3, #96]	; 0x60
2000250e:	4b08      	ldr	r3, [pc, #32]	; (20002530 <RCC_APB1PeriphClockLPModeCmd+0x3c>)
20002510:	687a      	ldr	r2, [r7, #4]
20002512:	430a      	orrs	r2, r1
20002514:	661a      	str	r2, [r3, #96]	; 0x60
  }
  else
  {
    RCC->APB1LPENR &= ~RCC_APB1Periph;
  }
}
20002516:	e006      	b.n	20002526 <RCC_APB1PeriphClockLPModeCmd+0x32>
    RCC->APB1LPENR &= ~RCC_APB1Periph;
20002518:	4b05      	ldr	r3, [pc, #20]	; (20002530 <RCC_APB1PeriphClockLPModeCmd+0x3c>)
2000251a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
2000251c:	687b      	ldr	r3, [r7, #4]
2000251e:	43d9      	mvns	r1, r3
20002520:	4b03      	ldr	r3, [pc, #12]	; (20002530 <RCC_APB1PeriphClockLPModeCmd+0x3c>)
20002522:	400a      	ands	r2, r1
20002524:	661a      	str	r2, [r3, #96]	; 0x60
}
20002526:	46c0      	nop			; (mov r8, r8)
20002528:	46bd      	mov	sp, r7
2000252a:	b002      	add	sp, #8
2000252c:	bd80      	pop	{r7, pc}
2000252e:	46c0      	nop			; (mov r8, r8)
20002530:	40023800 	andmi	r3, r2, r0, lsl #16

20002534 <RCC_APB2PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockLPModeCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
20002534:	b580      	push	{r7, lr}
20002536:	b082      	sub	sp, #8
20002538:	af00      	add	r7, sp, #0
2000253a:	6078      	str	r0, [r7, #4]
2000253c:	000a      	movs	r2, r1
2000253e:	1cfb      	adds	r3, r7, #3
20002540:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
20002542:	1cfb      	adds	r3, r7, #3
20002544:	781b      	ldrb	r3, [r3, #0]
20002546:	2b00      	cmp	r3, #0
20002548:	d006      	beq.n	20002558 <RCC_APB2PeriphClockLPModeCmd+0x24>
  {
    RCC->APB2LPENR |= RCC_APB2Periph;
2000254a:	4b09      	ldr	r3, [pc, #36]	; (20002570 <RCC_APB2PeriphClockLPModeCmd+0x3c>)
2000254c:	6e59      	ldr	r1, [r3, #100]	; 0x64
2000254e:	4b08      	ldr	r3, [pc, #32]	; (20002570 <RCC_APB2PeriphClockLPModeCmd+0x3c>)
20002550:	687a      	ldr	r2, [r7, #4]
20002552:	430a      	orrs	r2, r1
20002554:	665a      	str	r2, [r3, #100]	; 0x64
  }
  else
  {
    RCC->APB2LPENR &= ~RCC_APB2Periph;
  }
}
20002556:	e006      	b.n	20002566 <RCC_APB2PeriphClockLPModeCmd+0x32>
    RCC->APB2LPENR &= ~RCC_APB2Periph;
20002558:	4b05      	ldr	r3, [pc, #20]	; (20002570 <RCC_APB2PeriphClockLPModeCmd+0x3c>)
2000255a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
2000255c:	687b      	ldr	r3, [r7, #4]
2000255e:	43d9      	mvns	r1, r3
20002560:	4b03      	ldr	r3, [pc, #12]	; (20002570 <RCC_APB2PeriphClockLPModeCmd+0x3c>)
20002562:	400a      	ands	r2, r1
20002564:	665a      	str	r2, [r3, #100]	; 0x64
}
20002566:	46c0      	nop			; (mov r8, r8)
20002568:	46bd      	mov	sp, r7
2000256a:	b002      	add	sp, #8
2000256c:	bd80      	pop	{r7, pc}
2000256e:	46c0      	nop			; (mov r8, r8)
20002570:	40023800 	andmi	r3, r2, r0, lsl #16

20002574 <RCC_LSEModeConfig>:
  *            @arg RCC_LSE_LOWPOWER_MODE:  LSE oscillator in low power mode.
  *            @arg RCC_LSE_HIGHDRIVE_MODE: LSE oscillator in High Drive mode.
  * @retval None
  */
void RCC_LSEModeConfig(uint8_t RCC_Mode)
{
20002574:	b580      	push	{r7, lr}
20002576:	b082      	sub	sp, #8
20002578:	af00      	add	r7, sp, #0
2000257a:	0002      	movs	r2, r0
2000257c:	1dfb      	adds	r3, r7, #7
2000257e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_LSE_MODE(RCC_Mode));
  
  if(RCC_Mode == RCC_LSE_HIGHDRIVE_MODE)
20002580:	1dfb      	adds	r3, r7, #7
20002582:	781b      	ldrb	r3, [r3, #0]
20002584:	2b01      	cmp	r3, #1
20002586:	d106      	bne.n	20002596 <RCC_LSEModeConfig+0x22>
  {
    SET_BIT(RCC->BDCR, RCC_BDCR_LSEMOD);
20002588:	4b08      	ldr	r3, [pc, #32]	; (200025ac <RCC_LSEModeConfig+0x38>)
2000258a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
2000258c:	4b07      	ldr	r3, [pc, #28]	; (200025ac <RCC_LSEModeConfig+0x38>)
2000258e:	2108      	movs	r1, #8
20002590:	430a      	orrs	r2, r1
20002592:	671a      	str	r2, [r3, #112]	; 0x70
  }
  else
  {
    CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEMOD);
  }
}
20002594:	e005      	b.n	200025a2 <RCC_LSEModeConfig+0x2e>
    CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEMOD);
20002596:	4b05      	ldr	r3, [pc, #20]	; (200025ac <RCC_LSEModeConfig+0x38>)
20002598:	6f1a      	ldr	r2, [r3, #112]	; 0x70
2000259a:	4b04      	ldr	r3, [pc, #16]	; (200025ac <RCC_LSEModeConfig+0x38>)
2000259c:	2108      	movs	r1, #8
2000259e:	438a      	bics	r2, r1
200025a0:	671a      	str	r2, [r3, #112]	; 0x70
}
200025a2:	46c0      	nop			; (mov r8, r8)
200025a4:	46bd      	mov	sp, r7
200025a6:	b002      	add	sp, #8
200025a8:	bd80      	pop	{r7, pc}
200025aa:	46c0      	nop			; (mov r8, r8)
200025ac:	40023800 	andmi	r3, r2, r0, lsl #16

200025b0 <RCC_ITConfig>:
  * @param  NewState: new state of the specified RCC interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_ITConfig(uint8_t RCC_IT, FunctionalState NewState)
{
200025b0:	b580      	push	{r7, lr}
200025b2:	b082      	sub	sp, #8
200025b4:	af00      	add	r7, sp, #0
200025b6:	0002      	movs	r2, r0
200025b8:	1dfb      	adds	r3, r7, #7
200025ba:	701a      	strb	r2, [r3, #0]
200025bc:	1dbb      	adds	r3, r7, #6
200025be:	1c0a      	adds	r2, r1, #0
200025c0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_IT(RCC_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
200025c2:	1dbb      	adds	r3, r7, #6
200025c4:	781b      	ldrb	r3, [r3, #0]
200025c6:	2b00      	cmp	r3, #0
200025c8:	d009      	beq.n	200025de <RCC_ITConfig+0x2e>
  {
    /* Perform Byte access to RCC_CIR[14:8] bits to enable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS |= RCC_IT;
200025ca:	4b0c      	ldr	r3, [pc, #48]	; (200025fc <RCC_ITConfig+0x4c>)
200025cc:	781b      	ldrb	r3, [r3, #0]
200025ce:	b2da      	uxtb	r2, r3
200025d0:	490a      	ldr	r1, [pc, #40]	; (200025fc <RCC_ITConfig+0x4c>)
200025d2:	1dfb      	adds	r3, r7, #7
200025d4:	781b      	ldrb	r3, [r3, #0]
200025d6:	4313      	orrs	r3, r2
200025d8:	b2db      	uxtb	r3, r3
200025da:	700b      	strb	r3, [r1, #0]
  else
  {
    /* Perform Byte access to RCC_CIR[14:8] bits to disable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS &= (uint8_t)~RCC_IT;
  }
}
200025dc:	e00a      	b.n	200025f4 <RCC_ITConfig+0x44>
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS &= (uint8_t)~RCC_IT;
200025de:	4b07      	ldr	r3, [pc, #28]	; (200025fc <RCC_ITConfig+0x4c>)
200025e0:	781b      	ldrb	r3, [r3, #0]
200025e2:	b2db      	uxtb	r3, r3
200025e4:	1dfa      	adds	r2, r7, #7
200025e6:	7812      	ldrb	r2, [r2, #0]
200025e8:	43d2      	mvns	r2, r2
200025ea:	b2d2      	uxtb	r2, r2
200025ec:	4903      	ldr	r1, [pc, #12]	; (200025fc <RCC_ITConfig+0x4c>)
200025ee:	4013      	ands	r3, r2
200025f0:	b2db      	uxtb	r3, r3
200025f2:	700b      	strb	r3, [r1, #0]
}
200025f4:	46c0      	nop			; (mov r8, r8)
200025f6:	46bd      	mov	sp, r7
200025f8:	b002      	add	sp, #8
200025fa:	bd80      	pop	{r7, pc}
200025fc:	4002380d 	andmi	r3, r2, sp, lsl #16

20002600 <RCC_GetFlagStatus>:
  *            @arg RCC_FLAG_WWDGRST: Window Watchdog reset
  *            @arg RCC_FLAG_LPWRRST: Low Power reset
  * @retval The new state of RCC_FLAG (SET or RESET).
  */
FlagStatus RCC_GetFlagStatus(uint8_t RCC_FLAG)
{
20002600:	b580      	push	{r7, lr}
20002602:	b086      	sub	sp, #24
20002604:	af00      	add	r7, sp, #0
20002606:	0002      	movs	r2, r0
20002608:	1dfb      	adds	r3, r7, #7
2000260a:	701a      	strb	r2, [r3, #0]
  uint32_t tmp = 0;
2000260c:	2300      	movs	r3, #0
2000260e:	60fb      	str	r3, [r7, #12]
  uint32_t statusreg = 0;
20002610:	2300      	movs	r3, #0
20002612:	617b      	str	r3, [r7, #20]
  FlagStatus bitstatus = RESET;
20002614:	2313      	movs	r3, #19
20002616:	18fb      	adds	r3, r7, r3
20002618:	2200      	movs	r2, #0
2000261a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_FLAG(RCC_FLAG));

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
2000261c:	1dfb      	adds	r3, r7, #7
2000261e:	781b      	ldrb	r3, [r3, #0]
20002620:	095b      	lsrs	r3, r3, #5
20002622:	b2db      	uxtb	r3, r3
20002624:	60fb      	str	r3, [r7, #12]
  if (tmp == 1)               /* The flag to check is in CR register */
20002626:	68fb      	ldr	r3, [r7, #12]
20002628:	2b01      	cmp	r3, #1
2000262a:	d103      	bne.n	20002634 <RCC_GetFlagStatus+0x34>
  {
    statusreg = RCC->CR;
2000262c:	4b14      	ldr	r3, [pc, #80]	; (20002680 <RCC_GetFlagStatus+0x80>)
2000262e:	681b      	ldr	r3, [r3, #0]
20002630:	617b      	str	r3, [r7, #20]
20002632:	e009      	b.n	20002648 <RCC_GetFlagStatus+0x48>
  }
  else if (tmp == 2)          /* The flag to check is in BDCR register */
20002634:	68fb      	ldr	r3, [r7, #12]
20002636:	2b02      	cmp	r3, #2
20002638:	d103      	bne.n	20002642 <RCC_GetFlagStatus+0x42>
  {
    statusreg = RCC->BDCR;
2000263a:	4b11      	ldr	r3, [pc, #68]	; (20002680 <RCC_GetFlagStatus+0x80>)
2000263c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
2000263e:	617b      	str	r3, [r7, #20]
20002640:	e002      	b.n	20002648 <RCC_GetFlagStatus+0x48>
  }
  else                       /* The flag to check is in CSR register */
  {
    statusreg = RCC->CSR;
20002642:	4b0f      	ldr	r3, [pc, #60]	; (20002680 <RCC_GetFlagStatus+0x80>)
20002644:	6f5b      	ldr	r3, [r3, #116]	; 0x74
20002646:	617b      	str	r3, [r7, #20]
  }

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_MASK;
20002648:	1dfb      	adds	r3, r7, #7
2000264a:	781b      	ldrb	r3, [r3, #0]
2000264c:	221f      	movs	r2, #31
2000264e:	4013      	ands	r3, r2
20002650:	60fb      	str	r3, [r7, #12]
  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
20002652:	697a      	ldr	r2, [r7, #20]
20002654:	68fb      	ldr	r3, [r7, #12]
20002656:	40da      	lsrs	r2, r3
20002658:	0013      	movs	r3, r2
2000265a:	2201      	movs	r2, #1
2000265c:	4013      	ands	r3, r2
2000265e:	d004      	beq.n	2000266a <RCC_GetFlagStatus+0x6a>
  {
    bitstatus = SET;
20002660:	2313      	movs	r3, #19
20002662:	18fb      	adds	r3, r7, r3
20002664:	2201      	movs	r2, #1
20002666:	701a      	strb	r2, [r3, #0]
20002668:	e003      	b.n	20002672 <RCC_GetFlagStatus+0x72>
  }
  else
  {
    bitstatus = RESET;
2000266a:	2313      	movs	r3, #19
2000266c:	18fb      	adds	r3, r7, r3
2000266e:	2200      	movs	r2, #0
20002670:	701a      	strb	r2, [r3, #0]
  }
  /* Return the flag status */
  return bitstatus;
20002672:	2313      	movs	r3, #19
20002674:	18fb      	adds	r3, r7, r3
20002676:	781b      	ldrb	r3, [r3, #0]
}
20002678:	0018      	movs	r0, r3
2000267a:	46bd      	mov	sp, r7
2000267c:	b006      	add	sp, #24
2000267e:	bd80      	pop	{r7, pc}
20002680:	40023800 	andmi	r3, r2, r0, lsl #16

20002684 <RCC_ClearFlag>:
  *         RCC_FLAG_IWDGRST, RCC_FLAG_WWDGRST, RCC_FLAG_LPWRRST
  * @param  None
  * @retval None
  */
void RCC_ClearFlag(void)
{
20002684:	b580      	push	{r7, lr}
20002686:	af00      	add	r7, sp, #0
  /* Set RMVF bit to clear the reset flags */
  RCC->CSR |= RCC_CSR_RMVF;
20002688:	4b04      	ldr	r3, [pc, #16]	; (2000269c <RCC_ClearFlag+0x18>)
2000268a:	6f5a      	ldr	r2, [r3, #116]	; 0x74
2000268c:	4b03      	ldr	r3, [pc, #12]	; (2000269c <RCC_ClearFlag+0x18>)
2000268e:	2180      	movs	r1, #128	; 0x80
20002690:	0449      	lsls	r1, r1, #17
20002692:	430a      	orrs	r2, r1
20002694:	675a      	str	r2, [r3, #116]	; 0x74
}
20002696:	46c0      	nop			; (mov r8, r8)
20002698:	46bd      	mov	sp, r7
2000269a:	bd80      	pop	{r7, pc}
2000269c:	40023800 	andmi	r3, r2, r0, lsl #16

200026a0 <RCC_GetITStatus>:
  *            @arg RCC_IT_PLLSAIRDY: PLLSAI clock ready interrupt (only for STM32F42xxx/43xxx/446xx/469xx/479xx devices)
  *            @arg RCC_IT_CSS: Clock Security System interrupt
  * @retval The new state of RCC_IT (SET or RESET).
  */
ITStatus RCC_GetITStatus(uint8_t RCC_IT)
{
200026a0:	b580      	push	{r7, lr}
200026a2:	b084      	sub	sp, #16
200026a4:	af00      	add	r7, sp, #0
200026a6:	0002      	movs	r2, r0
200026a8:	1dfb      	adds	r3, r7, #7
200026aa:	701a      	strb	r2, [r3, #0]
  ITStatus bitstatus = RESET;
200026ac:	230f      	movs	r3, #15
200026ae:	18fb      	adds	r3, r7, r3
200026b0:	2200      	movs	r2, #0
200026b2:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_GET_IT(RCC_IT));

  /* Check the status of the specified RCC interrupt */
  if ((RCC->CIR & RCC_IT) != (uint32_t)RESET)
200026b4:	4b0a      	ldr	r3, [pc, #40]	; (200026e0 <RCC_GetITStatus+0x40>)
200026b6:	68db      	ldr	r3, [r3, #12]
200026b8:	1dfa      	adds	r2, r7, #7
200026ba:	7812      	ldrb	r2, [r2, #0]
200026bc:	4013      	ands	r3, r2
200026be:	d004      	beq.n	200026ca <RCC_GetITStatus+0x2a>
  {
    bitstatus = SET;
200026c0:	230f      	movs	r3, #15
200026c2:	18fb      	adds	r3, r7, r3
200026c4:	2201      	movs	r2, #1
200026c6:	701a      	strb	r2, [r3, #0]
200026c8:	e003      	b.n	200026d2 <RCC_GetITStatus+0x32>
  }
  else
  {
    bitstatus = RESET;
200026ca:	230f      	movs	r3, #15
200026cc:	18fb      	adds	r3, r7, r3
200026ce:	2200      	movs	r2, #0
200026d0:	701a      	strb	r2, [r3, #0]
  }
  /* Return the RCC_IT status */
  return  bitstatus;
200026d2:	230f      	movs	r3, #15
200026d4:	18fb      	adds	r3, r7, r3
200026d6:	781b      	ldrb	r3, [r3, #0]
}
200026d8:	0018      	movs	r0, r3
200026da:	46bd      	mov	sp, r7
200026dc:	b004      	add	sp, #16
200026de:	bd80      	pop	{r7, pc}
200026e0:	40023800 	andmi	r3, r2, r0, lsl #16

200026e4 <RCC_ClearITPendingBit>:
  *            @arg RCC_IT_PLLSAIRDY: PLLSAI ready interrupt (only for STM32F42xxx/43xxx/446xx/469xx/479xx devices) 
  *            @arg RCC_IT_CSS: Clock Security System interrupt
  * @retval None
  */
void RCC_ClearITPendingBit(uint8_t RCC_IT)
{
200026e4:	b580      	push	{r7, lr}
200026e6:	b082      	sub	sp, #8
200026e8:	af00      	add	r7, sp, #0
200026ea:	0002      	movs	r2, r0
200026ec:	1dfb      	adds	r3, r7, #7
200026ee:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_CLEAR_IT(RCC_IT));

  /* Perform Byte access to RCC_CIR[23:16] bits to clear the selected interrupt
     pending bits */
  *(__IO uint8_t *) CIR_BYTE3_ADDRESS = RCC_IT;
200026f0:	4a03      	ldr	r2, [pc, #12]	; (20002700 <RCC_ClearITPendingBit+0x1c>)
200026f2:	1dfb      	adds	r3, r7, #7
200026f4:	781b      	ldrb	r3, [r3, #0]
200026f6:	7013      	strb	r3, [r2, #0]
}
200026f8:	46c0      	nop			; (mov r8, r8)
200026fa:	46bd      	mov	sp, r7
200026fc:	b002      	add	sp, #8
200026fe:	bd80      	pop	{r7, pc}
20002700:	4002380e 	andmi	r3, r2, lr, lsl #16

20002704 <init_GPIO_Ports>:
//======================================GPIO=========================================================
void init_GPIO_Ports()
{
20002704:	b580      	push	{r7, lr}
20002706:	b082      	sub	sp, #8
20002708:	af00      	add	r7, sp, #0
	/*  Function used to set the GPIO configuration to the default reset state ****/
	GPIO_InitTypeDef init;
	//GPIO E UTPORTAR
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOE, ENABLE);
2000270a:	2101      	movs	r1, #1
2000270c:	2010      	movs	r0, #16
2000270e:	f7ff fd51 	bl	200021b4 <RCC_AHB1PeriphClockCmd>
	GPIO_StructInit(&init);
20002712:	003b      	movs	r3, r7
20002714:	0018      	movs	r0, r3
20002716:	f001 f90d 	bl	20003934 <GPIO_StructInit>
	init.GPIO_Pin = GPIO_Pin_1 | GPIO_Pin_3 | GPIO_Pin_5 | GPIO_Pin_7 | GPIO_Pin_9 | GPIO_Pin_11 | GPIO_Pin_13 | GPIO_Pin_15;
2000271a:	003b      	movs	r3, r7
2000271c:	4a64      	ldr	r2, [pc, #400]	; (200028b0 <init_GPIO_Ports+0x1ac>)
2000271e:	601a      	str	r2, [r3, #0]
	init.GPIO_Mode = GPIO_Mode_OUT;
20002720:	003b      	movs	r3, r7
20002722:	2201      	movs	r2, #1
20002724:	711a      	strb	r2, [r3, #4]
	init.GPIO_OType = GPIO_OType_PP;
20002726:	003b      	movs	r3, r7
20002728:	2200      	movs	r2, #0
2000272a:	719a      	strb	r2, [r3, #6]
	init.GPIO_PuPd = GPIO_PuPd_NOPULL;
2000272c:	003b      	movs	r3, r7
2000272e:	2200      	movs	r2, #0
20002730:	71da      	strb	r2, [r3, #7]
	GPIO_Init(GPIOE, &init);
20002732:	003b      	movs	r3, r7
20002734:	4a5f      	ldr	r2, [pc, #380]	; (200028b4 <init_GPIO_Ports+0x1b0>)
20002736:	0019      	movs	r1, r3
20002738:	0010      	movs	r0, r2
2000273a:	f001 f86f 	bl	2000381c <GPIO_Init>
	
	//konfigurerar inport GPIO E
	GPIO_StructInit(&init);
2000273e:	003b      	movs	r3, r7
20002740:	0018      	movs	r0, r3
20002742:	f001 f8f7 	bl	20003934 <GPIO_StructInit>
	init.GPIO_Pin = GPIO_Pin_0 | GPIO_Pin_2 | GPIO_Pin_4 | GPIO_Pin_6 | GPIO_Pin_8 | GPIO_Pin_10 | GPIO_Pin_12 |GPIO_Pin_14;
20002746:	003b      	movs	r3, r7
20002748:	4a5b      	ldr	r2, [pc, #364]	; (200028b8 <init_GPIO_Ports+0x1b4>)
2000274a:	601a      	str	r2, [r3, #0]
	init.GPIO_Mode = GPIO_Mode_IN;
2000274c:	003b      	movs	r3, r7
2000274e:	2200      	movs	r2, #0
20002750:	711a      	strb	r2, [r3, #4]
	init.GPIO_PuPd = GPIO_PuPd_UP;
20002752:	003b      	movs	r3, r7
20002754:	2201      	movs	r2, #1
20002756:	71da      	strb	r2, [r3, #7]
	GPIO_Init(GPIOE, &init);
20002758:	003b      	movs	r3, r7
2000275a:	4a56      	ldr	r2, [pc, #344]	; (200028b4 <init_GPIO_Ports+0x1b0>)
2000275c:	0019      	movs	r1, r3
2000275e:	0010      	movs	r0, r2
20002760:	f001 f85c 	bl	2000381c <GPIO_Init>

    //GPIOA UTPORTAR
    RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
20002764:	2101      	movs	r1, #1
20002766:	2001      	movs	r0, #1
20002768:	f7ff fd24 	bl	200021b4 <RCC_AHB1PeriphClockCmd>
	GPIO_StructInit(&init);
2000276c:	003b      	movs	r3, r7
2000276e:	0018      	movs	r0, r3
20002770:	f001 f8e0 	bl	20003934 <GPIO_StructInit>
	init.GPIO_Pin = GPIO_Pin_1 | GPIO_Pin_3 | GPIO_Pin_5 | GPIO_Pin_7 | GPIO_Pin_9 | GPIO_Pin_11 | GPIO_Pin_13 | GPIO_Pin_15;
20002774:	003b      	movs	r3, r7
20002776:	4a4e      	ldr	r2, [pc, #312]	; (200028b0 <init_GPIO_Ports+0x1ac>)
20002778:	601a      	str	r2, [r3, #0]
	init.GPIO_Mode = GPIO_Mode_OUT;
2000277a:	003b      	movs	r3, r7
2000277c:	2201      	movs	r2, #1
2000277e:	711a      	strb	r2, [r3, #4]
	init.GPIO_OType = GPIO_OType_PP;
20002780:	003b      	movs	r3, r7
20002782:	2200      	movs	r2, #0
20002784:	719a      	strb	r2, [r3, #6]
	init.GPIO_PuPd = GPIO_PuPd_NOPULL;
20002786:	003b      	movs	r3, r7
20002788:	2200      	movs	r2, #0
2000278a:	71da      	strb	r2, [r3, #7]
	GPIO_Init(GPIOA, &init);
2000278c:	003b      	movs	r3, r7
2000278e:	4a4b      	ldr	r2, [pc, #300]	; (200028bc <init_GPIO_Ports+0x1b8>)
20002790:	0019      	movs	r1, r3
20002792:	0010      	movs	r0, r2
20002794:	f001 f842 	bl	2000381c <GPIO_Init>
	
	//konfigurerar inport GPIO a
	GPIO_StructInit(&init);
20002798:	003b      	movs	r3, r7
2000279a:	0018      	movs	r0, r3
2000279c:	f001 f8ca 	bl	20003934 <GPIO_StructInit>
	init.GPIO_Pin = GPIO_Pin_0 | GPIO_Pin_2 | GPIO_Pin_4 | GPIO_Pin_6 | GPIO_Pin_8 | GPIO_Pin_10 | GPIO_Pin_12 |GPIO_Pin_14;
200027a0:	003b      	movs	r3, r7
200027a2:	4a45      	ldr	r2, [pc, #276]	; (200028b8 <init_GPIO_Ports+0x1b4>)
200027a4:	601a      	str	r2, [r3, #0]
	init.GPIO_Mode = GPIO_Mode_IN;
200027a6:	003b      	movs	r3, r7
200027a8:	2200      	movs	r2, #0
200027aa:	711a      	strb	r2, [r3, #4]
	init.GPIO_PuPd = GPIO_PuPd_UP;
200027ac:	003b      	movs	r3, r7
200027ae:	2201      	movs	r2, #1
200027b0:	71da      	strb	r2, [r3, #7]
	GPIO_Init(GPIOA, &init);
200027b2:	003b      	movs	r3, r7
200027b4:	4a41      	ldr	r2, [pc, #260]	; (200028bc <init_GPIO_Ports+0x1b8>)
200027b6:	0019      	movs	r1, r3
200027b8:	0010      	movs	r0, r2
200027ba:	f001 f82f 	bl	2000381c <GPIO_Init>

	//GPIO C UTPORTAR
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC, ENABLE);
200027be:	2101      	movs	r1, #1
200027c0:	2004      	movs	r0, #4
200027c2:	f7ff fcf7 	bl	200021b4 <RCC_AHB1PeriphClockCmd>
	GPIO_StructInit(&init);
200027c6:	003b      	movs	r3, r7
200027c8:	0018      	movs	r0, r3
200027ca:	f001 f8b3 	bl	20003934 <GPIO_StructInit>
	init.GPIO_Pin = GPIO_Pin_1 | GPIO_Pin_3 | GPIO_Pin_5 | GPIO_Pin_7 | GPIO_Pin_9 | GPIO_Pin_11 | GPIO_Pin_13 | GPIO_Pin_15;
200027ce:	003b      	movs	r3, r7
200027d0:	4a37      	ldr	r2, [pc, #220]	; (200028b0 <init_GPIO_Ports+0x1ac>)
200027d2:	601a      	str	r2, [r3, #0]
	init.GPIO_Mode = GPIO_Mode_OUT;
200027d4:	003b      	movs	r3, r7
200027d6:	2201      	movs	r2, #1
200027d8:	711a      	strb	r2, [r3, #4]
	init.GPIO_OType = GPIO_OType_PP;
200027da:	003b      	movs	r3, r7
200027dc:	2200      	movs	r2, #0
200027de:	719a      	strb	r2, [r3, #6]
	init.GPIO_PuPd = GPIO_PuPd_NOPULL;
200027e0:	003b      	movs	r3, r7
200027e2:	2200      	movs	r2, #0
200027e4:	71da      	strb	r2, [r3, #7]
	GPIO_Init(GPIOC, &init);
200027e6:	003b      	movs	r3, r7
200027e8:	4a35      	ldr	r2, [pc, #212]	; (200028c0 <init_GPIO_Ports+0x1bc>)
200027ea:	0019      	movs	r1, r3
200027ec:	0010      	movs	r0, r2
200027ee:	f001 f815 	bl	2000381c <GPIO_Init>
	
	//konfigurerar inport GPIO C
	GPIO_StructInit(&init);
200027f2:	003b      	movs	r3, r7
200027f4:	0018      	movs	r0, r3
200027f6:	f001 f89d 	bl	20003934 <GPIO_StructInit>
	init.GPIO_Pin = GPIO_Pin_0 | GPIO_Pin_2 | GPIO_Pin_4 | GPIO_Pin_6 | GPIO_Pin_8 | GPIO_Pin_10 | GPIO_Pin_12 |GPIO_Pin_14;
200027fa:	003b      	movs	r3, r7
200027fc:	4a2e      	ldr	r2, [pc, #184]	; (200028b8 <init_GPIO_Ports+0x1b4>)
200027fe:	601a      	str	r2, [r3, #0]
	init.GPIO_Mode = GPIO_Mode_IN;
20002800:	003b      	movs	r3, r7
20002802:	2200      	movs	r2, #0
20002804:	711a      	strb	r2, [r3, #4]
	init.GPIO_PuPd = GPIO_PuPd_UP;
20002806:	003b      	movs	r3, r7
20002808:	2201      	movs	r2, #1
2000280a:	71da      	strb	r2, [r3, #7]
	GPIO_Init(GPIOC, &init);
2000280c:	003b      	movs	r3, r7
2000280e:	4a2c      	ldr	r2, [pc, #176]	; (200028c0 <init_GPIO_Ports+0x1bc>)
20002810:	0019      	movs	r1, r3
20002812:	0010      	movs	r0, r2
20002814:	f001 f802 	bl	2000381c <GPIO_Init>

	//GPIO D UTPORTAR
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOD, ENABLE);
20002818:	2101      	movs	r1, #1
2000281a:	2008      	movs	r0, #8
2000281c:	f7ff fcca 	bl	200021b4 <RCC_AHB1PeriphClockCmd>
	GPIO_StructInit(&init);
20002820:	003b      	movs	r3, r7
20002822:	0018      	movs	r0, r3
20002824:	f001 f886 	bl	20003934 <GPIO_StructInit>
	init.GPIO_Pin = GPIO_Pin_1 | GPIO_Pin_3 | GPIO_Pin_5 | GPIO_Pin_7 | GPIO_Pin_9 | GPIO_Pin_11 | GPIO_Pin_13 | GPIO_Pin_15;
20002828:	003b      	movs	r3, r7
2000282a:	4a21      	ldr	r2, [pc, #132]	; (200028b0 <init_GPIO_Ports+0x1ac>)
2000282c:	601a      	str	r2, [r3, #0]
	init.GPIO_Mode = GPIO_Mode_OUT;
2000282e:	003b      	movs	r3, r7
20002830:	2201      	movs	r2, #1
20002832:	711a      	strb	r2, [r3, #4]
	init.GPIO_OType = GPIO_OType_PP;
20002834:	003b      	movs	r3, r7
20002836:	2200      	movs	r2, #0
20002838:	719a      	strb	r2, [r3, #6]
	init.GPIO_PuPd = GPIO_PuPd_NOPULL;
2000283a:	003b      	movs	r3, r7
2000283c:	2200      	movs	r2, #0
2000283e:	71da      	strb	r2, [r3, #7]
	GPIO_Init(GPIOD, &init);
20002840:	003b      	movs	r3, r7
20002842:	4a20      	ldr	r2, [pc, #128]	; (200028c4 <init_GPIO_Ports+0x1c0>)
20002844:	0019      	movs	r1, r3
20002846:	0010      	movs	r0, r2
20002848:	f000 ffe8 	bl	2000381c <GPIO_Init>
	
	//konfigurerar inport GPIO D
	GPIO_StructInit(&init);
2000284c:	003b      	movs	r3, r7
2000284e:	0018      	movs	r0, r3
20002850:	f001 f870 	bl	20003934 <GPIO_StructInit>
	init.GPIO_Pin = GPIO_Pin_0 | GPIO_Pin_2 | GPIO_Pin_4 | GPIO_Pin_6 | GPIO_Pin_8 | GPIO_Pin_10 | GPIO_Pin_12 |GPIO_Pin_14;
20002854:	003b      	movs	r3, r7
20002856:	4a18      	ldr	r2, [pc, #96]	; (200028b8 <init_GPIO_Ports+0x1b4>)
20002858:	601a      	str	r2, [r3, #0]
	init.GPIO_Mode = GPIO_Mode_IN;
2000285a:	003b      	movs	r3, r7
2000285c:	2200      	movs	r2, #0
2000285e:	711a      	strb	r2, [r3, #4]
	init.GPIO_PuPd = GPIO_PuPd_UP;
20002860:	003b      	movs	r3, r7
20002862:	2201      	movs	r2, #1
20002864:	71da      	strb	r2, [r3, #7]
	GPIO_Init(GPIOD, &init);
20002866:	003b      	movs	r3, r7
20002868:	4a16      	ldr	r2, [pc, #88]	; (200028c4 <init_GPIO_Ports+0x1c0>)
2000286a:	0019      	movs	r1, r3
2000286c:	0010      	movs	r0, r2
2000286e:	f000 ffd5 	bl	2000381c <GPIO_Init>

	//GPIO B UTPORTAR
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE);
20002872:	2101      	movs	r1, #1
20002874:	2002      	movs	r0, #2
20002876:	f7ff fc9d 	bl	200021b4 <RCC_AHB1PeriphClockCmd>
	GPIO_StructInit(&init);
2000287a:	003b      	movs	r3, r7
2000287c:	0018      	movs	r0, r3
2000287e:	f001 f859 	bl	20003934 <GPIO_StructInit>
	init.GPIO_Pin = GPIO_Pin_2;
20002882:	003b      	movs	r3, r7
20002884:	2204      	movs	r2, #4
20002886:	601a      	str	r2, [r3, #0]
	init.GPIO_Mode = GPIO_Mode_OUT;
20002888:	003b      	movs	r3, r7
2000288a:	2201      	movs	r2, #1
2000288c:	711a      	strb	r2, [r3, #4]
	init.GPIO_OType = GPIO_OType_PP;
2000288e:	003b      	movs	r3, r7
20002890:	2200      	movs	r2, #0
20002892:	719a      	strb	r2, [r3, #6]
	init.GPIO_PuPd = GPIO_PuPd_NOPULL;
20002894:	003b      	movs	r3, r7
20002896:	2200      	movs	r2, #0
20002898:	71da      	strb	r2, [r3, #7]
	GPIO_Init(GPIOB, &init);
2000289a:	003b      	movs	r3, r7
2000289c:	4a0a      	ldr	r2, [pc, #40]	; (200028c8 <init_GPIO_Ports+0x1c4>)
2000289e:	0019      	movs	r1, r3
200028a0:	0010      	movs	r0, r2
200028a2:	f000 ffbb 	bl	2000381c <GPIO_Init>
200028a6:	46c0      	nop			; (mov r8, r8)
200028a8:	46bd      	mov	sp, r7
200028aa:	b002      	add	sp, #8
200028ac:	bd80      	pop	{r7, pc}
200028ae:	46c0      	nop			; (mov r8, r8)
200028b0:	0000aaaa 	andeq	sl, r0, sl, lsr #21
200028b4:	40021000 	andmi	r1, r2, r0
200028b8:	00005555 	andeq	r5, r0, r5, asr r5
200028bc:	40020000 	andmi	r0, r2, r0
200028c0:	40020800 	andmi	r0, r2, r0, lsl #16
200028c4:	40020c00 	andmi	r0, r2, r0, lsl #24
200028c8:	40020400 	andmi	r0, r2, r0, lsl #8

200028cc <SysTick_Handler>:
GPIO_TypeDef* GPIO_Ports[] = {GPIOE, GPIOA, GPIOD, GPIOC};

// ========================================= SYSTICK ================================================
volatile uint32_t msTicks = 0; /* Variable to store millisecond ticks */
void SysTick_Handler(void)
{ /* SysTick interrupt Handler. */
200028cc:	b580      	push	{r7, lr}
200028ce:	af00      	add	r7, sp, #0
	msTicks++;
200028d0:	4b03      	ldr	r3, [pc, #12]	; (200028e0 <SysTick_Handler+0x14>)
200028d2:	681b      	ldr	r3, [r3, #0]
200028d4:	1c5a      	adds	r2, r3, #1
200028d6:	4b02      	ldr	r3, [pc, #8]	; (200028e0 <SysTick_Handler+0x14>)
200028d8:	601a      	str	r2, [r3, #0]
}
200028da:	46c0      	nop			; (mov r8, r8)
200028dc:	46bd      	mov	sp, r7
200028de:	bd80      	pop	{r7, pc}
200028e0:	20003ce8 	andcs	r3, r0, r8, ror #25

200028e4 <systick_Init>:
void systick_Init(void)
{
200028e4:	b580      	push	{r7, lr}
200028e6:	b082      	sub	sp, #8
200028e8:	af00      	add	r7, sp, #0
	// Initiera SysTick.
	*((void (**)(void))0x2001C03C) = SysTick_Handler;
200028ea:	4b09      	ldr	r3, [pc, #36]	; (20002910 <systick_Init+0x2c>)
200028ec:	4a09      	ldr	r2, [pc, #36]	; (20002914 <systick_Init+0x30>)
200028ee:	601a      	str	r2, [r3, #0]
	uint32_t returnCode;
	returnCode = SysTick_Config(168000000 / 1000); // Genererar ett SysTick-avbrott varje ms.
200028f0:	4b09      	ldr	r3, [pc, #36]	; (20002918 <systick_Init+0x34>)
200028f2:	0018      	movs	r0, r3
200028f4:	f7ff f86a 	bl	200019cc <SysTick_Config>
200028f8:	0003      	movs	r3, r0
200028fa:	607b      	str	r3, [r7, #4]

	if (returnCode != 0)
200028fc:	687b      	ldr	r3, [r7, #4]
200028fe:	2b00      	cmp	r3, #0
20002900:	d001      	beq.n	20002906 <systick_Init+0x22>
	{   
		systick_Init();
20002902:	f7ff ffef 	bl	200028e4 <systick_Init>
	}
}
20002906:	46c0      	nop			; (mov r8, r8)
20002908:	46bd      	mov	sp, r7
2000290a:	b002      	add	sp, #8
2000290c:	bd80      	pop	{r7, pc}
2000290e:	46c0      	nop			; (mov r8, r8)
20002910:	2001c03c 	andcs	ip, r1, ip, lsr r0
20002914:	200028cd 	andcs	r2, r0, sp, asr #17
20002918:	00029040 	andeq	r9, r2, r0, asr #32

2000291c <delay>:
void delay (int mili){
2000291c:	b580      	push	{r7, lr}
2000291e:	b084      	sub	sp, #16
20002920:	af00      	add	r7, sp, #0
20002922:	6078      	str	r0, [r7, #4]
		int time = msTicks + mili;
20002924:	4b07      	ldr	r3, [pc, #28]	; (20002944 <delay+0x28>)
20002926:	681a      	ldr	r2, [r3, #0]
20002928:	687b      	ldr	r3, [r7, #4]
2000292a:	18d3      	adds	r3, r2, r3
2000292c:	60fb      	str	r3, [r7, #12]
		while(time > msTicks);
2000292e:	46c0      	nop			; (mov r8, r8)
20002930:	68fa      	ldr	r2, [r7, #12]
20002932:	4b04      	ldr	r3, [pc, #16]	; (20002944 <delay+0x28>)
20002934:	681b      	ldr	r3, [r3, #0]
20002936:	429a      	cmp	r2, r3
20002938:	d8fa      	bhi.n	20002930 <delay+0x14>
	}
2000293a:	46c0      	nop			; (mov r8, r8)
2000293c:	46bd      	mov	sp, r7
2000293e:	b004      	add	sp, #16
20002940:	bd80      	pop	{r7, pc}
20002942:	46c0      	nop			; (mov r8, r8)
20002944:	20003ce8 	andcs	r3, r0, r8, ror #25

20002948 <init_rng>:
//======================================== Slumptals generator CAN =========================================
void init_rng(void){
20002948:	b580      	push	{r7, lr}
2000294a:	af00      	add	r7, sp, #0
	RCC_AHB2PeriphClockCmd(RCC_AHB2Periph_RNG, ENABLE);
2000294c:	2101      	movs	r1, #1
2000294e:	2040      	movs	r0, #64	; 0x40
20002950:	f7ff fc50 	bl	200021f4 <RCC_AHB2PeriphClockCmd>
    RNG_Cmd(ENABLE);
20002954:	2001      	movs	r0, #1
20002956:	f000 fb6e 	bl	20003036 <RNG_Cmd>
}
2000295a:	46c0      	nop			; (mov r8, r8)
2000295c:	46bd      	mov	sp, r7
2000295e:	bd80      	pop	{r7, pc}

20002960 <main>:

void sendAlarm(door);
void getId (int);

void main(void)
{
20002960:	b5f0      	push	{r4, r5, r6, r7, lr}
20002962:	b099      	sub	sp, #100	; 0x64
20002964:	af04      	add	r7, sp, #16
	init_GPIO_Ports();
20002966:	f7ff fecd 	bl	20002704 <init_GPIO_Ports>
	systick_Init();
2000296a:	f7ff ffbb 	bl	200028e4 <systick_Init>
	can_init();
2000296e:	f7fd fe35 	bl	200005dc <can_init>
	init_rng();
20002972:	f7ff ffe9 	bl	20002948 <init_rng>
	while(msTicks < 2000);
20002976:	46c0      	nop			; (mov r8, r8)
20002978:	4be1      	ldr	r3, [pc, #900]	; (20002d00 <main+0x3a0>)
2000297a:	681b      	ldr	r3, [r3, #0]
2000297c:	4ae1      	ldr	r2, [pc, #900]	; (20002d04 <main+0x3a4>)
2000297e:	4293      	cmp	r3, r2
20002980:	d9fa      	bls.n	20002978 <main+0x18>

	//door door1, door2, door3, door4, door5, door6, door8, door9 ,door10, door11, door12, door13,door14,door15,door16, door17, door18, door19, door20, door21, door22, door23, door24 ,door25, door26, door27, door28,door29,door30,door31,door32;
	//door all_doors[32] = {door1, door2, door3, door4, door5, door6, door8, door9 ,door10, door11, door12, door13,door14,door15,door16, door17, door18, door19, door20, door21, door22, door23, door24 ,door25, door26, door27, door28,door29,door30,door31,door32};

	volatile int amountOfActiveDoors = 0;
20002982:	2300      	movs	r3, #0
20002984:	61bb      	str	r3, [r7, #24]
	for (int j = 0; j < (sizeof(GPIO_Ports) /sizeof(GPIO_TypeDef *)); j++)
20002986:	2300      	movs	r3, #0
20002988:	647b      	str	r3, [r7, #68]	; 0x44
2000298a:	e01b      	b.n	200029c4 <main+0x64>
	{
		for (int i = 0; i < sizeof(GPIO_Pins) / sizeof(uint16_t); i = i + 2)
2000298c:	2300      	movs	r3, #0
2000298e:	64bb      	str	r3, [r7, #72]	; 0x48
20002990:	e012      	b.n	200029b8 <main+0x58>
		{
			if(!GPIO_ReadInputDataBit(GPIO_Ports[j], GPIO_Pins[i])){
20002992:	4bdd      	ldr	r3, [pc, #884]	; (20002d08 <main+0x3a8>)
20002994:	6c7a      	ldr	r2, [r7, #68]	; 0x44
20002996:	0092      	lsls	r2, r2, #2
20002998:	58d0      	ldr	r0, [r2, r3]
2000299a:	4bdc      	ldr	r3, [pc, #880]	; (20002d0c <main+0x3ac>)
2000299c:	6cba      	ldr	r2, [r7, #72]	; 0x48
2000299e:	0052      	lsls	r2, r2, #1
200029a0:	5ad3      	ldrh	r3, [r2, r3]
200029a2:	0019      	movs	r1, r3
200029a4:	f001 f803 	bl	200039ae <GPIO_ReadInputDataBit>
200029a8:	1e03      	subs	r3, r0, #0
200029aa:	d102      	bne.n	200029b2 <main+0x52>
				amountOfActiveDoors++;
200029ac:	69bb      	ldr	r3, [r7, #24]
200029ae:	3301      	adds	r3, #1
200029b0:	61bb      	str	r3, [r7, #24]
		for (int i = 0; i < sizeof(GPIO_Pins) / sizeof(uint16_t); i = i + 2)
200029b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
200029b4:	3302      	adds	r3, #2
200029b6:	64bb      	str	r3, [r7, #72]	; 0x48
200029b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
200029ba:	2b0f      	cmp	r3, #15
200029bc:	d9e9      	bls.n	20002992 <main+0x32>
	for (int j = 0; j < (sizeof(GPIO_Ports) /sizeof(GPIO_TypeDef *)); j++)
200029be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
200029c0:	3301      	adds	r3, #1
200029c2:	647b      	str	r3, [r7, #68]	; 0x44
200029c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
200029c6:	2b03      	cmp	r3, #3
200029c8:	d9e0      	bls.n	2000298c <main+0x2c>
			}
		}
	}
	volatile door active_doors[amountOfActiveDoors];
200029ca:	69be      	ldr	r6, [r7, #24]
200029cc:	1e73      	subs	r3, r6, #1
200029ce:	623b      	str	r3, [r7, #32]
200029d0:	0033      	movs	r3, r6
200029d2:	60bb      	str	r3, [r7, #8]
200029d4:	2300      	movs	r3, #0
200029d6:	60fb      	str	r3, [r7, #12]
200029d8:	68b9      	ldr	r1, [r7, #8]
200029da:	68fa      	ldr	r2, [r7, #12]
200029dc:	000b      	movs	r3, r1
200029de:	0e1b      	lsrs	r3, r3, #24
200029e0:	0010      	movs	r0, r2
200029e2:	0200      	lsls	r0, r0, #8
200029e4:	6178      	str	r0, [r7, #20]
200029e6:	6978      	ldr	r0, [r7, #20]
200029e8:	4318      	orrs	r0, r3
200029ea:	6178      	str	r0, [r7, #20]
200029ec:	000b      	movs	r3, r1
200029ee:	021b      	lsls	r3, r3, #8
200029f0:	613b      	str	r3, [r7, #16]
200029f2:	0033      	movs	r3, r6
200029f4:	603b      	str	r3, [r7, #0]
200029f6:	2300      	movs	r3, #0
200029f8:	607b      	str	r3, [r7, #4]
200029fa:	6839      	ldr	r1, [r7, #0]
200029fc:	687a      	ldr	r2, [r7, #4]
200029fe:	000b      	movs	r3, r1
20002a00:	0e1b      	lsrs	r3, r3, #24
20002a02:	0010      	movs	r0, r2
20002a04:	0205      	lsls	r5, r0, #8
20002a06:	431d      	orrs	r5, r3
20002a08:	000b      	movs	r3, r1
20002a0a:	021c      	lsls	r4, r3, #8
20002a0c:	0033      	movs	r3, r6
20002a0e:	015b      	lsls	r3, r3, #5
20002a10:	3303      	adds	r3, #3
20002a12:	3307      	adds	r3, #7
20002a14:	08db      	lsrs	r3, r3, #3
20002a16:	00db      	lsls	r3, r3, #3
20002a18:	466a      	mov	r2, sp
20002a1a:	1ad3      	subs	r3, r2, r3
20002a1c:	469d      	mov	sp, r3
20002a1e:	ab04      	add	r3, sp, #16
20002a20:	3303      	adds	r3, #3
20002a22:	089b      	lsrs	r3, r3, #2
20002a24:	009b      	lsls	r3, r3, #2
20002a26:	61fb      	str	r3, [r7, #28]
	int counter = 0;
20002a28:	2300      	movs	r3, #0
20002a2a:	64fb      	str	r3, [r7, #76]	; 0x4c
	for (int j = 0; j < (sizeof(GPIO_Ports) /sizeof(GPIO_TypeDef *)); j++)
20002a2c:	2300      	movs	r3, #0
20002a2e:	643b      	str	r3, [r7, #64]	; 0x40
20002a30:	e051      	b.n	20002ad6 <main+0x176>
	{
		for (int i = 0; i < sizeof(GPIO_Pins) / sizeof(uint16_t); i = i + 2)
20002a32:	2300      	movs	r3, #0
20002a34:	63fb      	str	r3, [r7, #60]	; 0x3c
20002a36:	e048      	b.n	20002aca <main+0x16a>
		{
			if(!GPIO_ReadInputDataBit(GPIO_Ports[j], GPIO_Pins[i])){
20002a38:	4bb3      	ldr	r3, [pc, #716]	; (20002d08 <main+0x3a8>)
20002a3a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
20002a3c:	0092      	lsls	r2, r2, #2
20002a3e:	58d0      	ldr	r0, [r2, r3]
20002a40:	4bb2      	ldr	r3, [pc, #712]	; (20002d0c <main+0x3ac>)
20002a42:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
20002a44:	0052      	lsls	r2, r2, #1
20002a46:	5ad3      	ldrh	r3, [r2, r3]
20002a48:	0019      	movs	r1, r3
20002a4a:	f000 ffb0 	bl	200039ae <GPIO_ReadInputDataBit>
20002a4e:	1e03      	subs	r3, r0, #0
20002a50:	d138      	bne.n	20002ac4 <main+0x164>
				active_doors[counter].GPIO_read = GPIO_Pins[i];
20002a52:	4bae      	ldr	r3, [pc, #696]	; (20002d0c <main+0x3ac>)
20002a54:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
20002a56:	0052      	lsls	r2, r2, #1
20002a58:	5ad3      	ldrh	r3, [r2, r3]
20002a5a:	0019      	movs	r1, r3
20002a5c:	69fa      	ldr	r2, [r7, #28]
20002a5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
20002a60:	015b      	lsls	r3, r3, #5
20002a62:	18d3      	adds	r3, r2, r3
20002a64:	3314      	adds	r3, #20
20002a66:	6019      	str	r1, [r3, #0]
				active_doors[counter].GPIO_lamp = GPIO_Pins[i+1];
20002a68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
20002a6a:	1c5a      	adds	r2, r3, #1
20002a6c:	4ba7      	ldr	r3, [pc, #668]	; (20002d0c <main+0x3ac>)
20002a6e:	0052      	lsls	r2, r2, #1
20002a70:	5ad3      	ldrh	r3, [r2, r3]
20002a72:	0019      	movs	r1, r3
20002a74:	69fa      	ldr	r2, [r7, #28]
20002a76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
20002a78:	015b      	lsls	r3, r3, #5
20002a7a:	18d3      	adds	r3, r2, r3
20002a7c:	3310      	adds	r3, #16
20002a7e:	6019      	str	r1, [r3, #0]
				active_doors[counter].controlbits = 0;
20002a80:	69fa      	ldr	r2, [r7, #28]
20002a82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
20002a84:	015b      	lsls	r3, r3, #5
20002a86:	18d3      	adds	r3, r2, r3
20002a88:	3304      	adds	r3, #4
20002a8a:	2200      	movs	r2, #0
20002a8c:	601a      	str	r2, [r3, #0]
				active_doors[counter].time_larm = 0;
20002a8e:	69fa      	ldr	r2, [r7, #28]
20002a90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
20002a92:	015b      	lsls	r3, r3, #5
20002a94:	18d3      	adds	r3, r2, r3
20002a96:	3308      	adds	r3, #8
20002a98:	2200      	movs	r2, #0
20002a9a:	701a      	strb	r2, [r3, #0]
				active_doors[counter].time_central_larm = 1;
20002a9c:	69fa      	ldr	r2, [r7, #28]
20002a9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
20002aa0:	015b      	lsls	r3, r3, #5
20002aa2:	18d3      	adds	r3, r2, r3
20002aa4:	3309      	adds	r3, #9
20002aa6:	2201      	movs	r2, #1
20002aa8:	701a      	strb	r2, [r3, #0]
				active_doors[counter].GPIO_type = GPIO_Ports[j];
20002aaa:	4b97      	ldr	r3, [pc, #604]	; (20002d08 <main+0x3a8>)
20002aac:	6c3a      	ldr	r2, [r7, #64]	; 0x40
20002aae:	0092      	lsls	r2, r2, #2
20002ab0:	58d2      	ldr	r2, [r2, r3]
20002ab2:	69f9      	ldr	r1, [r7, #28]
20002ab4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
20002ab6:	015b      	lsls	r3, r3, #5
20002ab8:	18cb      	adds	r3, r1, r3
20002aba:	331c      	adds	r3, #28
20002abc:	601a      	str	r2, [r3, #0]
				//active_doors[counter] = all_doors[counter];
				counter++;
20002abe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
20002ac0:	3301      	adds	r3, #1
20002ac2:	64fb      	str	r3, [r7, #76]	; 0x4c
		for (int i = 0; i < sizeof(GPIO_Pins) / sizeof(uint16_t); i = i + 2)
20002ac4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
20002ac6:	3302      	adds	r3, #2
20002ac8:	63fb      	str	r3, [r7, #60]	; 0x3c
20002aca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
20002acc:	2b0f      	cmp	r3, #15
20002ace:	d9b3      	bls.n	20002a38 <main+0xd8>
	for (int j = 0; j < (sizeof(GPIO_Ports) /sizeof(GPIO_TypeDef *)); j++)
20002ad0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
20002ad2:	3301      	adds	r3, #1
20002ad4:	643b      	str	r3, [r7, #64]	; 0x40
20002ad6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
20002ad8:	2b03      	cmp	r3, #3
20002ada:	d9aa      	bls.n	20002a32 <main+0xd2>
			}
		}
	}
	
	getId((sizeof(active_doors)/sizeof(active_doors[0])));
20002adc:	0033      	movs	r3, r6
20002ade:	015b      	lsls	r3, r3, #5
20002ae0:	095b      	lsrs	r3, r3, #5
20002ae2:	0018      	movs	r0, r3
20002ae4:	f000 f9b8 	bl	20002e58 <getId>
	if(id == 0){ // debugging
20002ae8:	4b89      	ldr	r3, [pc, #548]	; (20002d10 <main+0x3b0>)
20002aea:	681b      	ldr	r3, [r3, #0]
20002aec:	2b00      	cmp	r3, #0
20002aee:	d106      	bne.n	20002afe <main+0x19e>
		GPIO_SetBits(GPIOC, GPIO_Pin_13);
20002af0:	2380      	movs	r3, #128	; 0x80
20002af2:	019b      	lsls	r3, r3, #6
20002af4:	4a87      	ldr	r2, [pc, #540]	; (20002d14 <main+0x3b4>)
20002af6:	0019      	movs	r1, r3
20002af8:	0010      	movs	r0, r2
20002afa:	f000 ffb0 	bl	20003a5e <GPIO_SetBits>
	}
	// ================================== LIGHTS =========================================================
	for (int i = 0; i < sizeof(active_doors)/sizeof(active_doors[0]); i++) //CHRISTMAST LIGHTS FTW
20002afe:	2300      	movs	r3, #0
20002b00:	63bb      	str	r3, [r7, #56]	; 0x38
20002b02:	e015      	b.n	20002b30 <main+0x1d0>
	{
		GPIO_SetBits(active_doors[i].GPIO_type, active_doors[i].GPIO_lamp);
20002b04:	69fa      	ldr	r2, [r7, #28]
20002b06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
20002b08:	015b      	lsls	r3, r3, #5
20002b0a:	18d3      	adds	r3, r2, r3
20002b0c:	331c      	adds	r3, #28
20002b0e:	6818      	ldr	r0, [r3, #0]
20002b10:	69fa      	ldr	r2, [r7, #28]
20002b12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
20002b14:	015b      	lsls	r3, r3, #5
20002b16:	18d3      	adds	r3, r2, r3
20002b18:	3310      	adds	r3, #16
20002b1a:	681b      	ldr	r3, [r3, #0]
20002b1c:	b29b      	uxth	r3, r3
20002b1e:	0019      	movs	r1, r3
20002b20:	f000 ff9d 	bl	20003a5e <GPIO_SetBits>
		delay(100);	
20002b24:	2064      	movs	r0, #100	; 0x64
20002b26:	f7ff fef9 	bl	2000291c <delay>
	for (int i = 0; i < sizeof(active_doors)/sizeof(active_doors[0]); i++) //CHRISTMAST LIGHTS FTW
20002b2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
20002b2c:	3301      	adds	r3, #1
20002b2e:	63bb      	str	r3, [r7, #56]	; 0x38
20002b30:	0033      	movs	r3, r6
20002b32:	015b      	lsls	r3, r3, #5
20002b34:	095a      	lsrs	r2, r3, #5
20002b36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
20002b38:	429a      	cmp	r2, r3
20002b3a:	d8e3      	bhi.n	20002b04 <main+0x1a4>
		
	}
	for (int i = sizeof(active_doors)/sizeof(active_doors[0]); i >= 0 ; i--) //CHRISTMAST LIGHTS FTW
20002b3c:	0033      	movs	r3, r6
20002b3e:	015b      	lsls	r3, r3, #5
20002b40:	095b      	lsrs	r3, r3, #5
20002b42:	637b      	str	r3, [r7, #52]	; 0x34
20002b44:	e015      	b.n	20002b72 <main+0x212>
	{
		GPIO_ResetBits(active_doors[i].GPIO_type, active_doors[i].GPIO_lamp);
20002b46:	69fa      	ldr	r2, [r7, #28]
20002b48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
20002b4a:	015b      	lsls	r3, r3, #5
20002b4c:	18d3      	adds	r3, r2, r3
20002b4e:	331c      	adds	r3, #28
20002b50:	6818      	ldr	r0, [r3, #0]
20002b52:	69fa      	ldr	r2, [r7, #28]
20002b54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
20002b56:	015b      	lsls	r3, r3, #5
20002b58:	18d3      	adds	r3, r2, r3
20002b5a:	3310      	adds	r3, #16
20002b5c:	681b      	ldr	r3, [r3, #0]
20002b5e:	b29b      	uxth	r3, r3
20002b60:	0019      	movs	r1, r3
20002b62:	f000 ff8b 	bl	20003a7c <GPIO_ResetBits>
		delay(100);
20002b66:	2064      	movs	r0, #100	; 0x64
20002b68:	f7ff fed8 	bl	2000291c <delay>
	for (int i = sizeof(active_doors)/sizeof(active_doors[0]); i >= 0 ; i--) //CHRISTMAST LIGHTS FTW
20002b6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
20002b6e:	3b01      	subs	r3, #1
20002b70:	637b      	str	r3, [r7, #52]	; 0x34
20002b72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
20002b74:	2b00      	cmp	r3, #0
20002b76:	dae6      	bge.n	20002b46 <main+0x1e6>
	}
	delay(200);
20002b78:	20c8      	movs	r0, #200	; 0xc8
20002b7a:	f7ff fecf 	bl	2000291c <delay>
	for (int i = 0; i < sizeof(active_doors)/sizeof(active_doors[0]); i++) //CHRISTMAST LIGHTS FTW
20002b7e:	2300      	movs	r3, #0
20002b80:	633b      	str	r3, [r7, #48]	; 0x30
20002b82:	e012      	b.n	20002baa <main+0x24a>
	{
		GPIO_SetBits(active_doors[i].GPIO_type, active_doors[i].GPIO_lamp);
20002b84:	69fa      	ldr	r2, [r7, #28]
20002b86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
20002b88:	015b      	lsls	r3, r3, #5
20002b8a:	18d3      	adds	r3, r2, r3
20002b8c:	331c      	adds	r3, #28
20002b8e:	6818      	ldr	r0, [r3, #0]
20002b90:	69fa      	ldr	r2, [r7, #28]
20002b92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
20002b94:	015b      	lsls	r3, r3, #5
20002b96:	18d3      	adds	r3, r2, r3
20002b98:	3310      	adds	r3, #16
20002b9a:	681b      	ldr	r3, [r3, #0]
20002b9c:	b29b      	uxth	r3, r3
20002b9e:	0019      	movs	r1, r3
20002ba0:	f000 ff5d 	bl	20003a5e <GPIO_SetBits>
	for (int i = 0; i < sizeof(active_doors)/sizeof(active_doors[0]); i++) //CHRISTMAST LIGHTS FTW
20002ba4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
20002ba6:	3301      	adds	r3, #1
20002ba8:	633b      	str	r3, [r7, #48]	; 0x30
20002baa:	0033      	movs	r3, r6
20002bac:	015b      	lsls	r3, r3, #5
20002bae:	095a      	lsrs	r2, r3, #5
20002bb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
20002bb2:	429a      	cmp	r2, r3
20002bb4:	d8e6      	bhi.n	20002b84 <main+0x224>
	}
	delay(3000);
20002bb6:	4b58      	ldr	r3, [pc, #352]	; (20002d18 <main+0x3b8>)
20002bb8:	0018      	movs	r0, r3
20002bba:	f7ff feaf 	bl	2000291c <delay>
	for (int i = 0; i < sizeof(active_doors)/sizeof(active_doors[0]); i++) //CHRISTMAST LIGHTS FTW
20002bbe:	2300      	movs	r3, #0
20002bc0:	62fb      	str	r3, [r7, #44]	; 0x2c
20002bc2:	e012      	b.n	20002bea <main+0x28a>
	{
		GPIO_ResetBits(active_doors[i].GPIO_type, active_doors[i].GPIO_lamp);
20002bc4:	69fa      	ldr	r2, [r7, #28]
20002bc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
20002bc8:	015b      	lsls	r3, r3, #5
20002bca:	18d3      	adds	r3, r2, r3
20002bcc:	331c      	adds	r3, #28
20002bce:	6818      	ldr	r0, [r3, #0]
20002bd0:	69fa      	ldr	r2, [r7, #28]
20002bd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
20002bd4:	015b      	lsls	r3, r3, #5
20002bd6:	18d3      	adds	r3, r2, r3
20002bd8:	3310      	adds	r3, #16
20002bda:	681b      	ldr	r3, [r3, #0]
20002bdc:	b29b      	uxth	r3, r3
20002bde:	0019      	movs	r1, r3
20002be0:	f000 ff4c 	bl	20003a7c <GPIO_ResetBits>
	for (int i = 0; i < sizeof(active_doors)/sizeof(active_doors[0]); i++) //CHRISTMAST LIGHTS FTW
20002be4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
20002be6:	3301      	adds	r3, #1
20002be8:	62fb      	str	r3, [r7, #44]	; 0x2c
20002bea:	0033      	movs	r3, r6
20002bec:	015b      	lsls	r3, r3, #5
20002bee:	095a      	lsrs	r2, r3, #5
20002bf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
20002bf2:	429a      	cmp	r2, r3
20002bf4:	d8e6      	bhi.n	20002bc4 <main+0x264>
	}
	

	GPIO_SetBits(GPIOB, GPIO_Pin_2);
20002bf6:	4b49      	ldr	r3, [pc, #292]	; (20002d1c <main+0x3bc>)
20002bf8:	2104      	movs	r1, #4
20002bfa:	0018      	movs	r0, r3
20002bfc:	f000 ff2f 	bl	20003a5e <GPIO_SetBits>
	//active_doors[2].controlbits |= 4;
	while (1)
	{
		for (int i = 0; i < sizeof(active_doors)/sizeof(active_doors[0]); i++)
20002c00:	2300      	movs	r3, #0
20002c02:	62bb      	str	r3, [r7, #40]	; 0x28
20002c04:	e0fd      	b.n	20002e02 <main+0x4a2>
		{
		
			if (!(active_doors[i].controlbits & 4))
20002c06:	69fa      	ldr	r2, [r7, #28]
20002c08:	6abb      	ldr	r3, [r7, #40]	; 0x28
20002c0a:	015b      	lsls	r3, r3, #5
20002c0c:	18d3      	adds	r3, r2, r3
20002c0e:	3304      	adds	r3, #4
20002c10:	681b      	ldr	r3, [r3, #0]
20002c12:	2204      	movs	r2, #4
20002c14:	4013      	ands	r3, r2
20002c16:	d000      	beq.n	20002c1a <main+0x2ba>
20002c18:	e0f0      	b.n	20002dfc <main+0x49c>
				{
				if (!GPIO_ReadInputDataBit(active_doors[i].GPIO_type, active_doors[i].GPIO_read)){ //GPIO pinnen är noll ifall dörren är stängd därför !
20002c1a:	69fa      	ldr	r2, [r7, #28]
20002c1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
20002c1e:	015b      	lsls	r3, r3, #5
20002c20:	18d3      	adds	r3, r2, r3
20002c22:	331c      	adds	r3, #28
20002c24:	6818      	ldr	r0, [r3, #0]
20002c26:	69fa      	ldr	r2, [r7, #28]
20002c28:	6abb      	ldr	r3, [r7, #40]	; 0x28
20002c2a:	015b      	lsls	r3, r3, #5
20002c2c:	18d3      	adds	r3, r2, r3
20002c2e:	3314      	adds	r3, #20
20002c30:	681b      	ldr	r3, [r3, #0]
20002c32:	b29b      	uxth	r3, r3
20002c34:	0019      	movs	r1, r3
20002c36:	f000 feba 	bl	200039ae <GPIO_ReadInputDataBit>
20002c3a:	1e03      	subs	r3, r0, #0
20002c3c:	d10e      	bne.n	20002c5c <main+0x2fc>
					active_doors[i].controlbits &= 0xFFFC; //Nollställer kontrollbiten för ifall en dörr är öppen och spam kontrollbiten för 
20002c3e:	69fa      	ldr	r2, [r7, #28]
20002c40:	6abb      	ldr	r3, [r7, #40]	; 0x28
20002c42:	015b      	lsls	r3, r3, #5
20002c44:	18d3      	adds	r3, r2, r3
20002c46:	3304      	adds	r3, #4
20002c48:	681b      	ldr	r3, [r3, #0]
20002c4a:	4a35      	ldr	r2, [pc, #212]	; (20002d20 <main+0x3c0>)
20002c4c:	401a      	ands	r2, r3
20002c4e:	69f9      	ldr	r1, [r7, #28]
20002c50:	6abb      	ldr	r3, [r7, #40]	; 0x28
20002c52:	015b      	lsls	r3, r3, #5
20002c54:	18cb      	adds	r3, r1, r3
20002c56:	3304      	adds	r3, #4
20002c58:	601a      	str	r2, [r3, #0]
20002c5a:	e01e      	b.n	20002c9a <main+0x33a>
					//att skicka medelande till centralenheten, när den detekteras som stängd
					
				}
				else{
					if (!active_doors[i].controlbits & 1) // Kollar så att dörren inte larmar sen innan så larmtick inte uppdateras hela tiden
20002c5c:	69fa      	ldr	r2, [r7, #28]
20002c5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
20002c60:	015b      	lsls	r3, r3, #5
20002c62:	18d3      	adds	r3, r2, r3
20002c64:	3304      	adds	r3, #4
20002c66:	681b      	ldr	r3, [r3, #0]
20002c68:	2b00      	cmp	r3, #0
20002c6a:	d108      	bne.n	20002c7e <main+0x31e>
					{
						active_doors[i].larmTick = msTicks;
20002c6c:	4b24      	ldr	r3, [pc, #144]	; (20002d00 <main+0x3a0>)
20002c6e:	681b      	ldr	r3, [r3, #0]
20002c70:	0019      	movs	r1, r3
20002c72:	69fa      	ldr	r2, [r7, #28]
20002c74:	6abb      	ldr	r3, [r7, #40]	; 0x28
20002c76:	015b      	lsls	r3, r3, #5
20002c78:	18d3      	adds	r3, r2, r3
20002c7a:	3318      	adds	r3, #24
20002c7c:	6019      	str	r1, [r3, #0]
					}
					active_doors[i].controlbits |= 1; // sätter dörrens larm kontrollbit till 1.
20002c7e:	69fa      	ldr	r2, [r7, #28]
20002c80:	6abb      	ldr	r3, [r7, #40]	; 0x28
20002c82:	015b      	lsls	r3, r3, #5
20002c84:	18d3      	adds	r3, r2, r3
20002c86:	3304      	adds	r3, #4
20002c88:	681b      	ldr	r3, [r3, #0]
20002c8a:	2201      	movs	r2, #1
20002c8c:	431a      	orrs	r2, r3
20002c8e:	69f9      	ldr	r1, [r7, #28]
20002c90:	6abb      	ldr	r3, [r7, #40]	; 0x28
20002c92:	015b      	lsls	r3, r3, #5
20002c94:	18cb      	adds	r3, r1, r3
20002c96:	3304      	adds	r3, #4
20002c98:	601a      	str	r2, [r3, #0]
				}
				for (int i = 0; i < sizeof(active_doors)/sizeof(active_doors[0]); i++)
20002c9a:	2300      	movs	r3, #0
20002c9c:	627b      	str	r3, [r7, #36]	; 0x24
20002c9e:	e0a6      	b.n	20002dee <main+0x48e>
				{
					if (active_doors[i].controlbits & 1 && msTicks > (active_doors[i].larmTick + 1000 * 10 * active_doors[i].time_larm))
20002ca0:	69fa      	ldr	r2, [r7, #28]
20002ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20002ca4:	015b      	lsls	r3, r3, #5
20002ca6:	18d3      	adds	r3, r2, r3
20002ca8:	3304      	adds	r3, #4
20002caa:	681b      	ldr	r3, [r3, #0]
20002cac:	2201      	movs	r2, #1
20002cae:	4013      	ands	r3, r2
20002cb0:	d03a      	beq.n	20002d28 <main+0x3c8>
20002cb2:	69fa      	ldr	r2, [r7, #28]
20002cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20002cb6:	015b      	lsls	r3, r3, #5
20002cb8:	18d3      	adds	r3, r2, r3
20002cba:	3318      	adds	r3, #24
20002cbc:	681a      	ldr	r2, [r3, #0]
20002cbe:	69f9      	ldr	r1, [r7, #28]
20002cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20002cc2:	015b      	lsls	r3, r3, #5
20002cc4:	18cb      	adds	r3, r1, r3
20002cc6:	3308      	adds	r3, #8
20002cc8:	781b      	ldrb	r3, [r3, #0]
20002cca:	b2db      	uxtb	r3, r3
20002ccc:	0019      	movs	r1, r3
20002cce:	4b15      	ldr	r3, [pc, #84]	; (20002d24 <main+0x3c4>)
20002cd0:	434b      	muls	r3, r1
20002cd2:	18d3      	adds	r3, r2, r3
20002cd4:	001a      	movs	r2, r3
20002cd6:	4b0a      	ldr	r3, [pc, #40]	; (20002d00 <main+0x3a0>)
20002cd8:	681b      	ldr	r3, [r3, #0]
20002cda:	429a      	cmp	r2, r3
20002cdc:	d224      	bcs.n	20002d28 <main+0x3c8>
					{
						GPIO_SetBits(active_doors[i].GPIO_type, active_doors[i].GPIO_lamp); // tänder lampan ifall tiden för att dörren ska larma har gått
20002cde:	69fa      	ldr	r2, [r7, #28]
20002ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20002ce2:	015b      	lsls	r3, r3, #5
20002ce4:	18d3      	adds	r3, r2, r3
20002ce6:	331c      	adds	r3, #28
20002ce8:	6818      	ldr	r0, [r3, #0]
20002cea:	69fa      	ldr	r2, [r7, #28]
20002cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20002cee:	015b      	lsls	r3, r3, #5
20002cf0:	18d3      	adds	r3, r2, r3
20002cf2:	3310      	adds	r3, #16
20002cf4:	681b      	ldr	r3, [r3, #0]
20002cf6:	b29b      	uxth	r3, r3
20002cf8:	0019      	movs	r1, r3
20002cfa:	f000 feb0 	bl	20003a5e <GPIO_SetBits>
20002cfe:	e023      	b.n	20002d48 <main+0x3e8>
20002d00:	20003ce8 	andcs	r3, r0, r8, ror #25
20002d04:	000007cf 	andeq	r0, r0, pc, asr #15
20002d08:	20003e08 	andcs	r3, r0, r8, lsl #28
20002d0c:	20003de8 	andcs	r3, r0, r8, ror #27
20002d10:	20003ce4 	andcs	r3, r0, r4, ror #25
20002d14:	40020800 	andmi	r0, r2, r0, lsl #16
20002d18:	00000bb8 			; <UNDEFINED> instruction: 0x00000bb8
20002d1c:	40020400 	andmi	r0, r2, r0, lsl #8
20002d20:	0000fffc 	strdeq	pc, [r0], -ip
20002d24:	00002710 	andeq	r2, r0, r0, lsl r7
					}
					else
					{
						GPIO_ResetBits(active_doors[i].GPIO_type, active_doors[i].GPIO_lamp);	// släcker lampan annars
20002d28:	69fa      	ldr	r2, [r7, #28]
20002d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20002d2c:	015b      	lsls	r3, r3, #5
20002d2e:	18d3      	adds	r3, r2, r3
20002d30:	331c      	adds	r3, #28
20002d32:	6818      	ldr	r0, [r3, #0]
20002d34:	69fa      	ldr	r2, [r7, #28]
20002d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20002d38:	015b      	lsls	r3, r3, #5
20002d3a:	18d3      	adds	r3, r2, r3
20002d3c:	3310      	adds	r3, #16
20002d3e:	681b      	ldr	r3, [r3, #0]
20002d40:	b29b      	uxth	r3, r3
20002d42:	0019      	movs	r1, r3
20002d44:	f000 fe9a 	bl	20003a7c <GPIO_ResetBits>
					}
					if ((active_doors[i].controlbits & 1 )&& msTicks > (active_doors[i].larmTick + 1000 * 10 * active_doors[i].time_central_larm) && !(active_doors[i].controlbits & 2))
20002d48:	69fa      	ldr	r2, [r7, #28]
20002d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20002d4c:	015b      	lsls	r3, r3, #5
20002d4e:	18d3      	adds	r3, r2, r3
20002d50:	3304      	adds	r3, #4
20002d52:	681b      	ldr	r3, [r3, #0]
20002d54:	2201      	movs	r2, #1
20002d56:	4013      	ands	r3, r2
20002d58:	d046      	beq.n	20002de8 <main+0x488>
20002d5a:	69fa      	ldr	r2, [r7, #28]
20002d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20002d5e:	015b      	lsls	r3, r3, #5
20002d60:	18d3      	adds	r3, r2, r3
20002d62:	3318      	adds	r3, #24
20002d64:	681a      	ldr	r2, [r3, #0]
20002d66:	69f9      	ldr	r1, [r7, #28]
20002d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20002d6a:	015b      	lsls	r3, r3, #5
20002d6c:	18cb      	adds	r3, r1, r3
20002d6e:	3309      	adds	r3, #9
20002d70:	781b      	ldrb	r3, [r3, #0]
20002d72:	b2db      	uxtb	r3, r3
20002d74:	0019      	movs	r1, r3
20002d76:	4b27      	ldr	r3, [pc, #156]	; (20002e14 <main+0x4b4>)
20002d78:	434b      	muls	r3, r1
20002d7a:	18d3      	adds	r3, r2, r3
20002d7c:	001a      	movs	r2, r3
20002d7e:	4b26      	ldr	r3, [pc, #152]	; (20002e18 <main+0x4b8>)
20002d80:	681b      	ldr	r3, [r3, #0]
20002d82:	429a      	cmp	r2, r3
20002d84:	d230      	bcs.n	20002de8 <main+0x488>
20002d86:	69fa      	ldr	r2, [r7, #28]
20002d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20002d8a:	015b      	lsls	r3, r3, #5
20002d8c:	18d3      	adds	r3, r2, r3
20002d8e:	3304      	adds	r3, #4
20002d90:	681b      	ldr	r3, [r3, #0]
20002d92:	2202      	movs	r2, #2
20002d94:	4013      	ands	r3, r2
20002d96:	d127      	bne.n	20002de8 <main+0x488>
					{
						active_doors[i].controlbits |= 2;
20002d98:	69fa      	ldr	r2, [r7, #28]
20002d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20002d9c:	015b      	lsls	r3, r3, #5
20002d9e:	18d3      	adds	r3, r2, r3
20002da0:	3304      	adds	r3, #4
20002da2:	681b      	ldr	r3, [r3, #0]
20002da4:	2202      	movs	r2, #2
20002da6:	431a      	orrs	r2, r3
20002da8:	69f9      	ldr	r1, [r7, #28]
20002daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20002dac:	015b      	lsls	r3, r3, #5
20002dae:	18cb      	adds	r3, r1, r3
20002db0:	3304      	adds	r3, #4
20002db2:	601a      	str	r2, [r3, #0]
						sendAlarm(active_doors[i]);
20002db4:	69fc      	ldr	r4, [r7, #28]
20002db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20002db8:	015b      	lsls	r3, r3, #5
20002dba:	469c      	mov	ip, r3
20002dbc:	2110      	movs	r1, #16
20002dbe:	4663      	mov	r3, ip
20002dc0:	18e2      	adds	r2, r4, r3
20002dc2:	1851      	adds	r1, r2, r1
20002dc4:	466a      	mov	r2, sp
20002dc6:	c929      	ldmia	r1!, {r0, r3, r5}
20002dc8:	c229      	stmia	r2!, {r0, r3, r5}
20002dca:	6809      	ldr	r1, [r1, #0]
20002dcc:	6011      	str	r1, [r2, #0]
20002dce:	4663      	mov	r3, ip
20002dd0:	5918      	ldr	r0, [r3, r4]
20002dd2:	4663      	mov	r3, ip
20002dd4:	18e2      	adds	r2, r4, r3
20002dd6:	6851      	ldr	r1, [r2, #4]
20002dd8:	4663      	mov	r3, ip
20002dda:	18e2      	adds	r2, r4, r3
20002ddc:	6892      	ldr	r2, [r2, #8]
20002dde:	0023      	movs	r3, r4
20002de0:	4463      	add	r3, ip
20002de2:	68db      	ldr	r3, [r3, #12]
20002de4:	f000 f8e8 	bl	20002fb8 <sendAlarm>
				for (int i = 0; i < sizeof(active_doors)/sizeof(active_doors[0]); i++)
20002de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20002dea:	3301      	adds	r3, #1
20002dec:	627b      	str	r3, [r7, #36]	; 0x24
20002dee:	0033      	movs	r3, r6
20002df0:	015b      	lsls	r3, r3, #5
20002df2:	095a      	lsrs	r2, r3, #5
20002df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20002df6:	429a      	cmp	r2, r3
20002df8:	d900      	bls.n	20002dfc <main+0x49c>
20002dfa:	e751      	b.n	20002ca0 <main+0x340>
		for (int i = 0; i < sizeof(active_doors)/sizeof(active_doors[0]); i++)
20002dfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
20002dfe:	3301      	adds	r3, #1
20002e00:	62bb      	str	r3, [r7, #40]	; 0x28
20002e02:	0033      	movs	r3, r6
20002e04:	015b      	lsls	r3, r3, #5
20002e06:	095a      	lsrs	r2, r3, #5
20002e08:	6abb      	ldr	r3, [r7, #40]	; 0x28
20002e0a:	429a      	cmp	r2, r3
20002e0c:	d900      	bls.n	20002e10 <main+0x4b0>
20002e0e:	e6fa      	b.n	20002c06 <main+0x2a6>
20002e10:	e6f6      	b.n	20002c00 <main+0x2a0>
20002e12:	46c0      	nop			; (mov r8, r8)
20002e14:	00002710 	andeq	r2, r0, r0, lsl r7
20002e18:	20003ce8 	andcs	r3, r0, r8, ror #25

20002e1c <idAssign_Handler>:
			}
		}
	}
	}
	
	void idAssign_Handler(CanRxMsg* msg){
20002e1c:	b580      	push	{r7, lr}
20002e1e:	b084      	sub	sp, #16
20002e20:	af00      	add	r7, sp, #0
20002e22:	6078      	str	r0, [r7, #4]
		uint32_t rndid = *(uint32_t *)(&(msg->Data[0]));
20002e24:	687b      	ldr	r3, [r7, #4]
20002e26:	330b      	adds	r3, #11
20002e28:	681b      	ldr	r3, [r3, #0]
20002e2a:	60fb      	str	r3, [r7, #12]
		if(rndid == id){
20002e2c:	4b08      	ldr	r3, [pc, #32]	; (20002e50 <idAssign_Handler+0x34>)
20002e2e:	681b      	ldr	r3, [r3, #0]
20002e30:	68fa      	ldr	r2, [r7, #12]
20002e32:	429a      	cmp	r2, r3
20002e34:	d107      	bne.n	20002e46 <idAssign_Handler+0x2a>
			id = msg->Data[1];
20002e36:	687b      	ldr	r3, [r7, #4]
20002e38:	7b1b      	ldrb	r3, [r3, #12]
20002e3a:	001a      	movs	r2, r3
20002e3c:	4b04      	ldr	r3, [pc, #16]	; (20002e50 <idAssign_Handler+0x34>)
20002e3e:	601a      	str	r2, [r3, #0]
			nocid = 0;
20002e40:	4b04      	ldr	r3, [pc, #16]	; (20002e54 <idAssign_Handler+0x38>)
20002e42:	2200      	movs	r2, #0
20002e44:	701a      	strb	r2, [r3, #0]

		}
	}
20002e46:	46c0      	nop			; (mov r8, r8)
20002e48:	46bd      	mov	sp, r7
20002e4a:	b004      	add	sp, #16
20002e4c:	bd80      	pop	{r7, pc}
20002e4e:	46c0      	nop			; (mov r8, r8)
20002e50:	20003ce4 	andcs	r3, r0, r4, ror #25
20002e54:	20003de4 	andcs	r3, r0, r4, ror #27

20002e58 <getId>:

	void getId (int nDoors){
20002e58:	b5f0      	push	{r4, r5, r6, r7, lr}
20002e5a:	b08f      	sub	sp, #60	; 0x3c
20002e5c:	af02      	add	r7, sp, #8
20002e5e:	6078      	str	r0, [r7, #4]
		CANFilter filter = empty_mask;
20002e60:	2300      	movs	r3, #0
20002e62:	62bb      	str	r3, [r7, #40]	; 0x28
		CANFilter mask = empty_mask;
20002e64:	2300      	movs	r3, #0
20002e66:	627b      	str	r3, [r7, #36]	; 0x24

		//används för omvandling
		Header header = empty_header;
20002e68:	2300      	movs	r3, #0
20002e6a:	623b      	str	r3, [r7, #32]

		//skriver mask
		mask.IDE = 1;
20002e6c:	2024      	movs	r0, #36	; 0x24
20002e6e:	183b      	adds	r3, r7, r0
20002e70:	781a      	ldrb	r2, [r3, #0]
20002e72:	2104      	movs	r1, #4
20002e74:	430a      	orrs	r2, r1
20002e76:	701a      	strb	r2, [r3, #0]
		mask.RTR = 1;
20002e78:	183b      	adds	r3, r7, r0
20002e7a:	781a      	ldrb	r2, [r3, #0]
20002e7c:	2102      	movs	r1, #2
20002e7e:	430a      	orrs	r2, r1
20002e80:	701a      	strb	r2, [r3, #0]
		header.msgType = ~0;
20002e82:	2023      	movs	r0, #35	; 0x23
20002e84:	183b      	adds	r3, r7, r0
20002e86:	781a      	ldrb	r2, [r3, #0]
20002e88:	211c      	movs	r1, #28
20002e8a:	430a      	orrs	r2, r1
20002e8c:	701a      	strb	r2, [r3, #0]
		header.ID = ~0;
20002e8e:	2422      	movs	r4, #34	; 0x22
20002e90:	193b      	adds	r3, r7, r4
20002e92:	881a      	ldrh	r2, [r3, #0]
20002e94:	21fe      	movs	r1, #254	; 0xfe
20002e96:	0049      	lsls	r1, r1, #1
20002e98:	430a      	orrs	r2, r1
20002e9a:	801a      	strh	r2, [r3, #0]
		header.toCentral = ~0;
20002e9c:	183b      	adds	r3, r7, r0
20002e9e:	781a      	ldrb	r2, [r3, #0]
20002ea0:	2102      	movs	r1, #2
20002ea2:	430a      	orrs	r2, r1
20002ea4:	701a      	strb	r2, [r3, #0]
		HEADERtoUINT32(header, mask.ID);
20002ea6:	2520      	movs	r5, #32
20002ea8:	197b      	adds	r3, r7, r5
20002eaa:	681b      	ldr	r3, [r3, #0]
20002eac:	00db      	lsls	r3, r3, #3
20002eae:	08db      	lsrs	r3, r3, #3
20002eb0:	00db      	lsls	r3, r3, #3
20002eb2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
20002eb4:	2107      	movs	r1, #7
20002eb6:	400a      	ands	r2, r1
20002eb8:	4313      	orrs	r3, r2
20002eba:	627b      	str	r3, [r7, #36]	; 0x24

		//Skriver filter
		filter.IDE = 1;
20002ebc:	2628      	movs	r6, #40	; 0x28
20002ebe:	19bb      	adds	r3, r7, r6
20002ec0:	781a      	ldrb	r2, [r3, #0]
20002ec2:	2104      	movs	r1, #4
20002ec4:	430a      	orrs	r2, r1
20002ec6:	701a      	strb	r2, [r3, #0]
		filter.RTR = 0;
20002ec8:	19bb      	adds	r3, r7, r6
20002eca:	781a      	ldrb	r2, [r3, #0]
20002ecc:	2102      	movs	r1, #2
20002ece:	438a      	bics	r2, r1
20002ed0:	701a      	strb	r2, [r3, #0]
		header.msgType = assignID_msg_type;
20002ed2:	183b      	adds	r3, r7, r0
20002ed4:	781a      	ldrb	r2, [r3, #0]
20002ed6:	211c      	movs	r1, #28
20002ed8:	438a      	bics	r2, r1
20002eda:	1c11      	adds	r1, r2, #0
20002edc:	2208      	movs	r2, #8
20002ede:	430a      	orrs	r2, r1
20002ee0:	701a      	strb	r2, [r3, #0]
		header.ID = 0;
20002ee2:	193b      	adds	r3, r7, r4
20002ee4:	881a      	ldrh	r2, [r3, #0]
20002ee6:	492e      	ldr	r1, [pc, #184]	; (20002fa0 <getId+0x148>)
20002ee8:	400a      	ands	r2, r1
20002eea:	801a      	strh	r2, [r3, #0]
		header.toCentral = 0;
20002eec:	183b      	adds	r3, r7, r0
20002eee:	781a      	ldrb	r2, [r3, #0]
20002ef0:	2102      	movs	r1, #2
20002ef2:	438a      	bics	r2, r1
20002ef4:	701a      	strb	r2, [r3, #0]
		HEADERtoUINT32(header, filter.ID);
20002ef6:	197b      	adds	r3, r7, r5
20002ef8:	681b      	ldr	r3, [r3, #0]
20002efa:	00db      	lsls	r3, r3, #3
20002efc:	08db      	lsrs	r3, r3, #3
20002efe:	00db      	lsls	r3, r3, #3
20002f00:	6aba      	ldr	r2, [r7, #40]	; 0x28
20002f02:	2107      	movs	r1, #7
20002f04:	400a      	ands	r2, r1
20002f06:	4313      	orrs	r3, r2
20002f08:	62bb      	str	r3, [r7, #40]	; 0x28

		if (CANhandlerListNotFull()){
20002f0a:	f7fd f8b1 	bl	20000070 <CANhandlerListNotFull>
20002f0e:	1e03      	subs	r3, r0, #0
20002f10:	d007      	beq.n	20002f22 <getId+0xca>
			CANaddFilterHandler(idAssign_Handler, &filter, &mask);
20002f12:	2324      	movs	r3, #36	; 0x24
20002f14:	18fa      	adds	r2, r7, r3
20002f16:	2328      	movs	r3, #40	; 0x28
20002f18:	18f9      	adds	r1, r7, r3
20002f1a:	4b22      	ldr	r3, [pc, #136]	; (20002fa4 <getId+0x14c>)
20002f1c:	0018      	movs	r0, r3
20002f1e:	f7fd f915 	bl	2000014c <CANaddFilterHandler>
		}


		int timeStamp = msTicks + 60 * 1000; 
20002f22:	4b21      	ldr	r3, [pc, #132]	; (20002fa8 <getId+0x150>)
20002f24:	681b      	ldr	r3, [r3, #0]
20002f26:	4a21      	ldr	r2, [pc, #132]	; (20002fac <getId+0x154>)
20002f28:	4694      	mov	ip, r2
20002f2a:	4463      	add	r3, ip
20002f2c:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (RNG_GetFlagStatus(RNG_FLAG_DRDY) == SET && //Nytt meddelande finns
20002f2e:	2001      	movs	r0, #1
20002f30:	f000 f8c6 	bl	200030c0 <RNG_GetFlagStatus>
20002f34:	0003      	movs	r3, r0
20002f36:	2b01      	cmp	r3, #1
20002f38:	d12e      	bne.n	20002f98 <getId+0x140>
             RNG_GetFlagStatus(RNG_FLAG_CECS) == RESET && //Inget klockfel
20002f3a:	2002      	movs	r0, #2
20002f3c:	f000 f8c0 	bl	200030c0 <RNG_GetFlagStatus>
20002f40:	1e03      	subs	r3, r0, #0
		if (RNG_GetFlagStatus(RNG_FLAG_DRDY) == SET && //Nytt meddelande finns
20002f42:	d129      	bne.n	20002f98 <getId+0x140>
             RNG_GetFlagStatus(RNG_FLAG_SECS) == RESET){ //Inget seedfel
20002f44:	2004      	movs	r0, #4
20002f46:	f000 f8bb 	bl	200030c0 <RNG_GetFlagStatus>
20002f4a:	1e03      	subs	r3, r0, #0
             RNG_GetFlagStatus(RNG_FLAG_CECS) == RESET && //Inget klockfel
20002f4c:	d124      	bne.n	20002f98 <getId+0x140>
                    id = RNG_GetRandomNumber();
20002f4e:	f000 f88f 	bl	20003070 <RNG_GetRandomNumber>
20002f52:	0002      	movs	r2, r0
20002f54:	4b16      	ldr	r3, [pc, #88]	; (20002fb0 <getId+0x158>)
20002f56:	601a      	str	r2, [r3, #0]
			 		CanTxMsg idRequest;
					
					encode_request_id(&idRequest,id,0, nDoors, 69);
20002f58:	4b15      	ldr	r3, [pc, #84]	; (20002fb0 <getId+0x158>)
20002f5a:	6819      	ldr	r1, [r3, #0]
20002f5c:	687b      	ldr	r3, [r7, #4]
20002f5e:	b2da      	uxtb	r2, r3
20002f60:	230c      	movs	r3, #12
20002f62:	18f8      	adds	r0, r7, r3
20002f64:	2345      	movs	r3, #69	; 0x45
20002f66:	9300      	str	r3, [sp, #0]
20002f68:	0013      	movs	r3, r2
20002f6a:	2200      	movs	r2, #0
20002f6c:	f000 f979 	bl	20003262 <encode_request_id>
					while (msTicks < timeStamp && nocid)
20002f70:	e009      	b.n	20002f86 <getId+0x12e>
					{
						CANsendMessage(&idRequest);
20002f72:	230c      	movs	r3, #12
20002f74:	18fb      	adds	r3, r7, r3
20002f76:	0018      	movs	r0, r3
20002f78:	f7fd f9bf 	bl	200002fa <CANsendMessage>
						delay(1000);
20002f7c:	23fa      	movs	r3, #250	; 0xfa
20002f7e:	009b      	lsls	r3, r3, #2
20002f80:	0018      	movs	r0, r3
20002f82:	f7ff fccb 	bl	2000291c <delay>
					while (msTicks < timeStamp && nocid)
20002f86:	4b08      	ldr	r3, [pc, #32]	; (20002fa8 <getId+0x150>)
20002f88:	681a      	ldr	r2, [r3, #0]
20002f8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
20002f8c:	429a      	cmp	r2, r3
20002f8e:	d203      	bcs.n	20002f98 <getId+0x140>
20002f90:	4b08      	ldr	r3, [pc, #32]	; (20002fb4 <getId+0x15c>)
20002f92:	781b      	ldrb	r3, [r3, #0]
20002f94:	2b00      	cmp	r3, #0
20002f96:	d1ec      	bne.n	20002f72 <getId+0x11a>
					}
			 }
	}
20002f98:	46c0      	nop			; (mov r8, r8)
20002f9a:	46bd      	mov	sp, r7
20002f9c:	b00d      	add	sp, #52	; 0x34
20002f9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
20002fa0:	fffffe03 			; <UNDEFINED> instruction: 0xfffffe03
20002fa4:	20002e1d 	andcs	r2, r0, sp, lsl lr
20002fa8:	20003ce8 	andcs	r3, r0, r8, ror #25
20002fac:	0000ea60 	andeq	lr, r0, r0, ror #20
20002fb0:	20003ce4 	andcs	r3, r0, r4, ror #25
20002fb4:	20003de4 	andcs	r3, r0, r4, ror #27

20002fb8 <sendAlarm>:

	void sendAlarm (door alarming_door){
20002fb8:	b084      	sub	sp, #16
20002fba:	b590      	push	{r4, r7, lr}
20002fbc:	b087      	sub	sp, #28
20002fbe:	af00      	add	r7, sp, #0
20002fc0:	2428      	movs	r4, #40	; 0x28
20002fc2:	193c      	adds	r4, r7, r4
20002fc4:	6020      	str	r0, [r4, #0]
20002fc6:	6061      	str	r1, [r4, #4]
20002fc8:	60a2      	str	r2, [r4, #8]
20002fca:	60e3      	str	r3, [r4, #12]
		CanTxMsg testMsg = {
20002fcc:	1d3b      	adds	r3, r7, #4
20002fce:	0018      	movs	r0, r3
20002fd0:	2314      	movs	r3, #20
20002fd2:	001a      	movs	r2, r3
20002fd4:	2100      	movs	r1, #0
20002fd6:	f000 fe7d 	bl	20003cd4 <memset>
20002fda:	1d3b      	adds	r3, r7, #4
20002fdc:	2204      	movs	r2, #4
20002fde:	605a      	str	r2, [r3, #4]
20002fe0:	1d3b      	adds	r3, r7, #4
20002fe2:	2204      	movs	r2, #4
20002fe4:	721a      	strb	r2, [r3, #8]
20002fe6:	1d3b      	adds	r3, r7, #4
20002fe8:	2204      	movs	r2, #4
20002fea:	729a      	strb	r2, [r3, #10]
20002fec:	1d3b      	adds	r3, r7, #4
20002fee:	220a      	movs	r2, #10
20002ff0:	72da      	strb	r2, [r3, #11]
20002ff2:	1d3b      	adds	r3, r7, #4
20002ff4:	220b      	movs	r2, #11
20002ff6:	731a      	strb	r2, [r3, #12]
20002ff8:	1d3b      	adds	r3, r7, #4
20002ffa:	220c      	movs	r2, #12
20002ffc:	735a      	strb	r2, [r3, #13]
20002ffe:	1d3b      	adds	r3, r7, #4
20003000:	2201      	movs	r2, #1
20003002:	739a      	strb	r2, [r3, #14]
							0, 0x4, CAN_Id_Extended, CAN_RTR_DATA, 4, {0xa,0xb,0xc,1} 
						};
						CANsendMessage(&testMsg);
20003004:	1d3b      	adds	r3, r7, #4
20003006:	0018      	movs	r0, r3
20003008:	f7fd f977 	bl	200002fa <CANsendMessage>
2000300c:	46c0      	nop			; (mov r8, r8)
2000300e:	46bd      	mov	sp, r7
20003010:	b007      	add	sp, #28
20003012:	bc90      	pop	{r4, r7}
20003014:	bc08      	pop	{r3}
20003016:	b004      	add	sp, #16
20003018:	4718      	bx	r3
2000301a:	46c0      	nop			; (mov r8, r8)

2000301c <RNG_DeInit>:
  * @brief  De-initializes the RNG peripheral registers to their default reset values.
  * @param  None
  * @retval None
  */
void RNG_DeInit(void)
{
2000301c:	b580      	push	{r7, lr}
2000301e:	af00      	add	r7, sp, #0
#if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F469_479xx)  
  /* Enable RNG reset state */
  RCC_AHB2PeriphResetCmd(RCC_AHB2Periph_RNG, ENABLE);
20003020:	2101      	movs	r1, #1
20003022:	2040      	movs	r0, #64	; 0x40
20003024:	f7ff f986 	bl	20002334 <RCC_AHB2PeriphResetCmd>

  /* Release RNG from reset state */
  RCC_AHB2PeriphResetCmd(RCC_AHB2Periph_RNG, DISABLE);
20003028:	2100      	movs	r1, #0
2000302a:	2040      	movs	r0, #64	; 0x40
2000302c:	f7ff f982 	bl	20002334 <RCC_AHB2PeriphResetCmd>
  RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_RNG, ENABLE);

  /* Release RNG from reset state */
  RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_RNG, DISABLE); 
#endif /* STM32F410xx*/  
}
20003030:	46c0      	nop			; (mov r8, r8)
20003032:	46bd      	mov	sp, r7
20003034:	bd80      	pop	{r7, pc}

20003036 <RNG_Cmd>:
  * @param  NewState: new state of the RNG peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RNG_Cmd(FunctionalState NewState)
{
20003036:	b580      	push	{r7, lr}
20003038:	b082      	sub	sp, #8
2000303a:	af00      	add	r7, sp, #0
2000303c:	0002      	movs	r2, r0
2000303e:	1dfb      	adds	r3, r7, #7
20003040:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
20003042:	1dfb      	adds	r3, r7, #7
20003044:	781b      	ldrb	r3, [r3, #0]
20003046:	2b00      	cmp	r3, #0
20003048:	d006      	beq.n	20003058 <RNG_Cmd+0x22>
  {
    /* Enable the RNG */
    RNG->CR |= RNG_CR_RNGEN;
2000304a:	4b08      	ldr	r3, [pc, #32]	; (2000306c <RNG_Cmd+0x36>)
2000304c:	681a      	ldr	r2, [r3, #0]
2000304e:	4b07      	ldr	r3, [pc, #28]	; (2000306c <RNG_Cmd+0x36>)
20003050:	2104      	movs	r1, #4
20003052:	430a      	orrs	r2, r1
20003054:	601a      	str	r2, [r3, #0]
  else
  {
    /* Disable the RNG */
    RNG->CR &= ~RNG_CR_RNGEN;
  }
}
20003056:	e005      	b.n	20003064 <RNG_Cmd+0x2e>
    RNG->CR &= ~RNG_CR_RNGEN;
20003058:	4b04      	ldr	r3, [pc, #16]	; (2000306c <RNG_Cmd+0x36>)
2000305a:	681a      	ldr	r2, [r3, #0]
2000305c:	4b03      	ldr	r3, [pc, #12]	; (2000306c <RNG_Cmd+0x36>)
2000305e:	2104      	movs	r1, #4
20003060:	438a      	bics	r2, r1
20003062:	601a      	str	r2, [r3, #0]
}
20003064:	46c0      	nop			; (mov r8, r8)
20003066:	46bd      	mov	sp, r7
20003068:	b002      	add	sp, #8
2000306a:	bd80      	pop	{r7, pc}
2000306c:	50060800 	andpl	r0, r6, r0, lsl #16

20003070 <RNG_GetRandomNumber>:
  *         
  * @param  None
  * @retval 32-bit random number.
  */
uint32_t RNG_GetRandomNumber(void)
{
20003070:	b580      	push	{r7, lr}
20003072:	af00      	add	r7, sp, #0
  /* Return the 32 bit random number from the DR register */
  return RNG->DR;
20003074:	4b02      	ldr	r3, [pc, #8]	; (20003080 <RNG_GetRandomNumber+0x10>)
20003076:	689b      	ldr	r3, [r3, #8]
}
20003078:	0018      	movs	r0, r3
2000307a:	46bd      	mov	sp, r7
2000307c:	bd80      	pop	{r7, pc}
2000307e:	46c0      	nop			; (mov r8, r8)
20003080:	50060800 	andpl	r0, r6, r0, lsl #16

20003084 <RNG_ITConfig>:
  * @param  NewState: new state of the RNG interrupt.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RNG_ITConfig(FunctionalState NewState)
{
20003084:	b580      	push	{r7, lr}
20003086:	b082      	sub	sp, #8
20003088:	af00      	add	r7, sp, #0
2000308a:	0002      	movs	r2, r0
2000308c:	1dfb      	adds	r3, r7, #7
2000308e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
20003090:	1dfb      	adds	r3, r7, #7
20003092:	781b      	ldrb	r3, [r3, #0]
20003094:	2b00      	cmp	r3, #0
20003096:	d006      	beq.n	200030a6 <RNG_ITConfig+0x22>
  {
    /* Enable the RNG interrupt */
    RNG->CR |= RNG_CR_IE;
20003098:	4b08      	ldr	r3, [pc, #32]	; (200030bc <RNG_ITConfig+0x38>)
2000309a:	681a      	ldr	r2, [r3, #0]
2000309c:	4b07      	ldr	r3, [pc, #28]	; (200030bc <RNG_ITConfig+0x38>)
2000309e:	2108      	movs	r1, #8
200030a0:	430a      	orrs	r2, r1
200030a2:	601a      	str	r2, [r3, #0]
  else
  {
    /* Disable the RNG interrupt */
    RNG->CR &= ~RNG_CR_IE;
  }
}
200030a4:	e005      	b.n	200030b2 <RNG_ITConfig+0x2e>
    RNG->CR &= ~RNG_CR_IE;
200030a6:	4b05      	ldr	r3, [pc, #20]	; (200030bc <RNG_ITConfig+0x38>)
200030a8:	681a      	ldr	r2, [r3, #0]
200030aa:	4b04      	ldr	r3, [pc, #16]	; (200030bc <RNG_ITConfig+0x38>)
200030ac:	2108      	movs	r1, #8
200030ae:	438a      	bics	r2, r1
200030b0:	601a      	str	r2, [r3, #0]
}
200030b2:	46c0      	nop			; (mov r8, r8)
200030b4:	46bd      	mov	sp, r7
200030b6:	b002      	add	sp, #8
200030b8:	bd80      	pop	{r7, pc}
200030ba:	46c0      	nop			; (mov r8, r8)
200030bc:	50060800 	andpl	r0, r6, r0, lsl #16

200030c0 <RNG_GetFlagStatus>:
  *            @arg RNG_FLAG_CECS: Clock Error Current flag.
  *            @arg RNG_FLAG_SECS: Seed Error Current flag.
  * @retval The new state of RNG_FLAG (SET or RESET).
  */
FlagStatus RNG_GetFlagStatus(uint8_t RNG_FLAG)
{
200030c0:	b580      	push	{r7, lr}
200030c2:	b084      	sub	sp, #16
200030c4:	af00      	add	r7, sp, #0
200030c6:	0002      	movs	r2, r0
200030c8:	1dfb      	adds	r3, r7, #7
200030ca:	701a      	strb	r2, [r3, #0]
  FlagStatus bitstatus = RESET;
200030cc:	230f      	movs	r3, #15
200030ce:	18fb      	adds	r3, r7, r3
200030d0:	2200      	movs	r2, #0
200030d2:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RNG_GET_FLAG(RNG_FLAG));

  /* Check the status of the specified RNG flag */
  if ((RNG->SR & RNG_FLAG) != (uint8_t)RESET)
200030d4:	4b0a      	ldr	r3, [pc, #40]	; (20003100 <RNG_GetFlagStatus+0x40>)
200030d6:	685b      	ldr	r3, [r3, #4]
200030d8:	1dfa      	adds	r2, r7, #7
200030da:	7812      	ldrb	r2, [r2, #0]
200030dc:	4013      	ands	r3, r2
200030de:	d004      	beq.n	200030ea <RNG_GetFlagStatus+0x2a>
  {
    /* RNG_FLAG is set */
    bitstatus = SET;
200030e0:	230f      	movs	r3, #15
200030e2:	18fb      	adds	r3, r7, r3
200030e4:	2201      	movs	r2, #1
200030e6:	701a      	strb	r2, [r3, #0]
200030e8:	e003      	b.n	200030f2 <RNG_GetFlagStatus+0x32>
  }
  else
  {
    /* RNG_FLAG is reset */
    bitstatus = RESET;
200030ea:	230f      	movs	r3, #15
200030ec:	18fb      	adds	r3, r7, r3
200030ee:	2200      	movs	r2, #0
200030f0:	701a      	strb	r2, [r3, #0]
  }
  /* Return the RNG_FLAG status */
  return  bitstatus;
200030f2:	230f      	movs	r3, #15
200030f4:	18fb      	adds	r3, r7, r3
200030f6:	781b      	ldrb	r3, [r3, #0]
}
200030f8:	0018      	movs	r0, r3
200030fa:	46bd      	mov	sp, r7
200030fc:	b004      	add	sp, #16
200030fe:	bd80      	pop	{r7, pc}
20003100:	50060800 	andpl	r0, r6, r0, lsl #16

20003104 <RNG_ClearFlag>:
  *         This flag is cleared only by reading the Random number data (using 
  *         RNG_GetRandomNumber() function).                           
  * @retval None
  */
void RNG_ClearFlag(uint8_t RNG_FLAG)
{
20003104:	b580      	push	{r7, lr}
20003106:	b082      	sub	sp, #8
20003108:	af00      	add	r7, sp, #0
2000310a:	0002      	movs	r2, r0
2000310c:	1dfb      	adds	r3, r7, #7
2000310e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RNG_CLEAR_FLAG(RNG_FLAG));
  /* Clear the selected RNG flags */
  RNG->SR = ~(uint32_t)(((uint32_t)RNG_FLAG) << 4);
20003110:	1dfb      	adds	r3, r7, #7
20003112:	781b      	ldrb	r3, [r3, #0]
20003114:	011a      	lsls	r2, r3, #4
20003116:	4b03      	ldr	r3, [pc, #12]	; (20003124 <RNG_ClearFlag+0x20>)
20003118:	43d2      	mvns	r2, r2
2000311a:	605a      	str	r2, [r3, #4]
}
2000311c:	46c0      	nop			; (mov r8, r8)
2000311e:	46bd      	mov	sp, r7
20003120:	b002      	add	sp, #8
20003122:	bd80      	pop	{r7, pc}
20003124:	50060800 	andpl	r0, r6, r0, lsl #16

20003128 <RNG_GetITStatus>:
  *            @arg RNG_IT_CEI: Clock Error Interrupt.
  *            @arg RNG_IT_SEI: Seed Error Interrupt.                   
  * @retval The new state of RNG_IT (SET or RESET).
  */
ITStatus RNG_GetITStatus(uint8_t RNG_IT)
{
20003128:	b580      	push	{r7, lr}
2000312a:	b084      	sub	sp, #16
2000312c:	af00      	add	r7, sp, #0
2000312e:	0002      	movs	r2, r0
20003130:	1dfb      	adds	r3, r7, #7
20003132:	701a      	strb	r2, [r3, #0]
  ITStatus bitstatus = RESET;
20003134:	230f      	movs	r3, #15
20003136:	18fb      	adds	r3, r7, r3
20003138:	2200      	movs	r2, #0
2000313a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RNG_GET_IT(RNG_IT));

  /* Check the status of the specified RNG interrupt */
  if ((RNG->SR & RNG_IT) != (uint8_t)RESET)
2000313c:	4b0a      	ldr	r3, [pc, #40]	; (20003168 <RNG_GetITStatus+0x40>)
2000313e:	685b      	ldr	r3, [r3, #4]
20003140:	1dfa      	adds	r2, r7, #7
20003142:	7812      	ldrb	r2, [r2, #0]
20003144:	4013      	ands	r3, r2
20003146:	d004      	beq.n	20003152 <RNG_GetITStatus+0x2a>
  {
    /* RNG_IT is set */
    bitstatus = SET;
20003148:	230f      	movs	r3, #15
2000314a:	18fb      	adds	r3, r7, r3
2000314c:	2201      	movs	r2, #1
2000314e:	701a      	strb	r2, [r3, #0]
20003150:	e003      	b.n	2000315a <RNG_GetITStatus+0x32>
  }
  else
  {
    /* RNG_IT is reset */
    bitstatus = RESET;
20003152:	230f      	movs	r3, #15
20003154:	18fb      	adds	r3, r7, r3
20003156:	2200      	movs	r2, #0
20003158:	701a      	strb	r2, [r3, #0]
  }
  /* Return the RNG_IT status */
  return bitstatus;
2000315a:	230f      	movs	r3, #15
2000315c:	18fb      	adds	r3, r7, r3
2000315e:	781b      	ldrb	r3, [r3, #0]
}
20003160:	0018      	movs	r0, r3
20003162:	46bd      	mov	sp, r7
20003164:	b004      	add	sp, #16
20003166:	bd80      	pop	{r7, pc}
20003168:	50060800 	andpl	r0, r6, r0, lsl #16

2000316c <RNG_ClearITPendingBit>:
  *            @arg RNG_IT_CEI: Clock Error Interrupt.
  *            @arg RNG_IT_SEI: Seed Error Interrupt.
  * @retval None
  */
void RNG_ClearITPendingBit(uint8_t RNG_IT)
{
2000316c:	b580      	push	{r7, lr}
2000316e:	b082      	sub	sp, #8
20003170:	af00      	add	r7, sp, #0
20003172:	0002      	movs	r2, r0
20003174:	1dfb      	adds	r3, r7, #7
20003176:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RNG_IT(RNG_IT));

  /* Clear the selected RNG interrupt pending bit */
  RNG->SR = (uint8_t)~RNG_IT;
20003178:	1dfb      	adds	r3, r7, #7
2000317a:	781b      	ldrb	r3, [r3, #0]
2000317c:	43db      	mvns	r3, r3
2000317e:	b2da      	uxtb	r2, r3
20003180:	4b02      	ldr	r3, [pc, #8]	; (2000318c <RNG_ClearITPendingBit+0x20>)
20003182:	605a      	str	r2, [r3, #4]
}
20003184:	46c0      	nop			; (mov r8, r8)
20003186:	46bd      	mov	sp, r7
20003188:	b002      	add	sp, #8
2000318a:	bd80      	pop	{r7, pc}
2000318c:	50060800 	andpl	r0, r6, r0, lsl #16

20003190 <encode_door_config>:
#include "stm32f4xx.h"
#include "stm32f4xx_rcc.h"
#include "stm32f4xx_gpio.h"


uint8_t encode_door_config(CanTxMsg *msg, uint8_t to_central, uint8_t door_id_0, uint8_t door_id_1, uint16_t time_0, uint16_t time_1, uint8_t locked){
20003190:	b590      	push	{r4, r7, lr}
20003192:	b085      	sub	sp, #20
20003194:	af00      	add	r7, sp, #0
20003196:	6078      	str	r0, [r7, #4]
20003198:	000c      	movs	r4, r1
2000319a:	0010      	movs	r0, r2
2000319c:	0019      	movs	r1, r3
2000319e:	1cfb      	adds	r3, r7, #3
200031a0:	1c22      	adds	r2, r4, #0
200031a2:	701a      	strb	r2, [r3, #0]
200031a4:	1cbb      	adds	r3, r7, #2
200031a6:	1c02      	adds	r2, r0, #0
200031a8:	701a      	strb	r2, [r3, #0]
200031aa:	1c7b      	adds	r3, r7, #1
200031ac:	1c0a      	adds	r2, r1, #0
200031ae:	701a      	strb	r2, [r3, #0]
    if(door_id_0 > door_id_1 || door_id_1 > 31){
200031b0:	1cba      	adds	r2, r7, #2
200031b2:	1c7b      	adds	r3, r7, #1
200031b4:	7812      	ldrb	r2, [r2, #0]
200031b6:	781b      	ldrb	r3, [r3, #0]
200031b8:	429a      	cmp	r2, r3
200031ba:	d803      	bhi.n	200031c4 <encode_door_config+0x34>
200031bc:	1c7b      	adds	r3, r7, #1
200031be:	781b      	ldrb	r3, [r3, #0]
200031c0:	2b1f      	cmp	r3, #31
200031c2:	d901      	bls.n	200031c8 <encode_door_config+0x38>
        return 0;
200031c4:	2300      	movs	r3, #0
200031c6:	e048      	b.n	2000325a <encode_door_config+0xca>
    }
    
    uint8_t *data_pointer =  &(msg->Data);
200031c8:	687b      	ldr	r3, [r7, #4]
200031ca:	330b      	adds	r3, #11
200031cc:	60fb      	str	r3, [r7, #12]
    
    
    Header header = empty_header;
200031ce:	2300      	movs	r3, #0
200031d0:	60bb      	str	r3, [r7, #8]
    header.msgType = 2;
200031d2:	200b      	movs	r0, #11
200031d4:	183b      	adds	r3, r7, r0
200031d6:	781a      	ldrb	r2, [r3, #0]
200031d8:	211c      	movs	r1, #28
200031da:	438a      	bics	r2, r1
200031dc:	1c11      	adds	r1, r2, #0
200031de:	2208      	movs	r2, #8
200031e0:	430a      	orrs	r2, r1
200031e2:	701a      	strb	r2, [r3, #0]
    header.toCentral = to_central;
200031e4:	1cfb      	adds	r3, r7, #3
200031e6:	781b      	ldrb	r3, [r3, #0]
200031e8:	2201      	movs	r2, #1
200031ea:	4013      	ands	r3, r2
200031ec:	b2da      	uxtb	r2, r3
200031ee:	183b      	adds	r3, r7, r0
200031f0:	2101      	movs	r1, #1
200031f2:	400a      	ands	r2, r1
200031f4:	1890      	adds	r0, r2, r2
200031f6:	781a      	ldrb	r2, [r3, #0]
200031f8:	2102      	movs	r1, #2
200031fa:	438a      	bics	r2, r1
200031fc:	1c11      	adds	r1, r2, #0
200031fe:	1c02      	adds	r2, r0, #0
20003200:	430a      	orrs	r2, r1
20003202:	701a      	strb	r2, [r3, #0]
    HEADERtoUINT32(header, msg->ExtId);
20003204:	2308      	movs	r3, #8
20003206:	18fb      	adds	r3, r7, r3
20003208:	681a      	ldr	r2, [r3, #0]
2000320a:	687b      	ldr	r3, [r7, #4]
2000320c:	605a      	str	r2, [r3, #4]
    
    msg->DLC = 7;
2000320e:	687b      	ldr	r3, [r7, #4]
20003210:	2207      	movs	r2, #7
20003212:	729a      	strb	r2, [r3, #10]
    msg->IDE = CAN_Id_Extended;
20003214:	687b      	ldr	r3, [r7, #4]
20003216:	2204      	movs	r2, #4
20003218:	721a      	strb	r2, [r3, #8]
    msg->RTR = CAN_RTR_Data;
2000321a:	687b      	ldr	r3, [r7, #4]
2000321c:	2200      	movs	r2, #0
2000321e:	725a      	strb	r2, [r3, #9]
    
    //Dörrintervall skrivs till de 16 första databitarna
    *data_pointer = door_id_0;
20003220:	68fb      	ldr	r3, [r7, #12]
20003222:	1cba      	adds	r2, r7, #2
20003224:	7812      	ldrb	r2, [r2, #0]
20003226:	701a      	strb	r2, [r3, #0]
    *(data_pointer + 1) = door_id_1;
20003228:	68fb      	ldr	r3, [r7, #12]
2000322a:	3301      	adds	r3, #1
2000322c:	1c7a      	adds	r2, r7, #1
2000322e:	7812      	ldrb	r2, [r2, #0]
20003230:	701a      	strb	r2, [r3, #0]
    
    
    //De två tidsvärdena skrivs till bit 16-47
    *(data_pointer + 2) = time_0;
20003232:	68fb      	ldr	r3, [r7, #12]
20003234:	3302      	adds	r3, #2
20003236:	2120      	movs	r1, #32
20003238:	187a      	adds	r2, r7, r1
2000323a:	8812      	ldrh	r2, [r2, #0]
2000323c:	b2d2      	uxtb	r2, r2
2000323e:	701a      	strb	r2, [r3, #0]
    *(data_pointer + 4) = time_0;
20003240:	68fb      	ldr	r3, [r7, #12]
20003242:	3304      	adds	r3, #4
20003244:	187a      	adds	r2, r7, r1
20003246:	8812      	ldrh	r2, [r2, #0]
20003248:	b2d2      	uxtb	r2, r2
2000324a:	701a      	strb	r2, [r3, #0]
    
    //Låsflagga skrivs till bit 48-55
    *(data_pointer + 6) = locked;
2000324c:	68fb      	ldr	r3, [r7, #12]
2000324e:	3306      	adds	r3, #6
20003250:	2228      	movs	r2, #40	; 0x28
20003252:	18ba      	adds	r2, r7, r2
20003254:	7812      	ldrb	r2, [r2, #0]
20003256:	701a      	strb	r2, [r3, #0]
    
    return 1;
20003258:	2301      	movs	r3, #1
}
2000325a:	0018      	movs	r0, r3
2000325c:	46bd      	mov	sp, r7
2000325e:	b005      	add	sp, #20
20003260:	bd90      	pop	{r4, r7, pc}

20003262 <encode_request_id>:
 * uint32_t temp_id: temporärt, förslagsvis slumpgenererat id
 * uint8_t device_type: 0 för dörrenhet, 1 för rörelseenhet
 * uint8_t value_0: antal dörrar eller avståndssensorer
 * uint8_t value_1: antal vibrationssensorer
 */
uint8_t encode_request_id(CanTxMsg *msg, uint32_t temp_id, uint8_t device_type, uint8_t value_0, uint8_t value_1){
20003262:	b580      	push	{r7, lr}
20003264:	b086      	sub	sp, #24
20003266:	af00      	add	r7, sp, #0
20003268:	60f8      	str	r0, [r7, #12]
2000326a:	60b9      	str	r1, [r7, #8]
2000326c:	0019      	movs	r1, r3
2000326e:	1dfb      	adds	r3, r7, #7
20003270:	701a      	strb	r2, [r3, #0]
20003272:	1dbb      	adds	r3, r7, #6
20003274:	1c0a      	adds	r2, r1, #0
20003276:	701a      	strb	r2, [r3, #0]
    uint8_t *data_pointer =  &(msg->Data[0]);
20003278:	68fb      	ldr	r3, [r7, #12]
2000327a:	330b      	adds	r3, #11
2000327c:	617b      	str	r3, [r7, #20]
    
    
    Header header = empty_header;
2000327e:	2300      	movs	r3, #0
20003280:	613b      	str	r3, [r7, #16]
    header.msgType = reqID_msg_type;
20003282:	2013      	movs	r0, #19
20003284:	183b      	adds	r3, r7, r0
20003286:	781a      	ldrb	r2, [r3, #0]
20003288:	211c      	movs	r1, #28
2000328a:	438a      	bics	r2, r1
2000328c:	1c11      	adds	r1, r2, #0
2000328e:	220c      	movs	r2, #12
20003290:	430a      	orrs	r2, r1
20003292:	701a      	strb	r2, [r3, #0]
    header.toCentral = 1;
20003294:	183b      	adds	r3, r7, r0
20003296:	781a      	ldrb	r2, [r3, #0]
20003298:	2102      	movs	r1, #2
2000329a:	430a      	orrs	r2, r1
2000329c:	701a      	strb	r2, [r3, #0]
    HEADERtoUINT32(header, msg->ExtId);
2000329e:	2310      	movs	r3, #16
200032a0:	18fb      	adds	r3, r7, r3
200032a2:	681a      	ldr	r2, [r3, #0]
200032a4:	68fb      	ldr	r3, [r7, #12]
200032a6:	605a      	str	r2, [r3, #4]

    msg->DLC = 7;
200032a8:	68fb      	ldr	r3, [r7, #12]
200032aa:	2207      	movs	r2, #7
200032ac:	729a      	strb	r2, [r3, #10]
    
    msg->IDE = CAN_Id_Extended;
200032ae:	68fb      	ldr	r3, [r7, #12]
200032b0:	2204      	movs	r2, #4
200032b2:	721a      	strb	r2, [r3, #8]
    msg->RTR = CAN_RTR_Data;
200032b4:	68fb      	ldr	r3, [r7, #12]
200032b6:	2200      	movs	r2, #0
200032b8:	725a      	strb	r2, [r3, #9]
    
    //Id skrivs in i bytearrayen för data
    *data_pointer = temp_id;
200032ba:	68bb      	ldr	r3, [r7, #8]
200032bc:	b2da      	uxtb	r2, r3
200032be:	697b      	ldr	r3, [r7, #20]
200032c0:	701a      	strb	r2, [r3, #0]
    *(data_pointer + 4) = device_type;
200032c2:	697b      	ldr	r3, [r7, #20]
200032c4:	3304      	adds	r3, #4
200032c6:	1dfa      	adds	r2, r7, #7
200032c8:	7812      	ldrb	r2, [r2, #0]
200032ca:	701a      	strb	r2, [r3, #0]
    *(data_pointer + 5) = value_0;
200032cc:	697b      	ldr	r3, [r7, #20]
200032ce:	3305      	adds	r3, #5
200032d0:	1dba      	adds	r2, r7, #6
200032d2:	7812      	ldrb	r2, [r2, #0]
200032d4:	701a      	strb	r2, [r3, #0]
    *(data_pointer + 6) = value_1;
200032d6:	697b      	ldr	r3, [r7, #20]
200032d8:	3306      	adds	r3, #6
200032da:	2220      	movs	r2, #32
200032dc:	18ba      	adds	r2, r7, r2
200032de:	7812      	ldrb	r2, [r2, #0]
200032e0:	701a      	strb	r2, [r3, #0]
    
    return 1;
200032e2:	2301      	movs	r3, #1
}
200032e4:	0018      	movs	r0, r3
200032e6:	46bd      	mov	sp, r7
200032e8:	b006      	add	sp, #24
200032ea:	bd80      	pop	{r7, pc}

200032ec <encode_assign_id>:

uint8_t encode_assign_id(CanTxMsg *msg, CanRxMsg *request, uint8_t id){
200032ec:	b580      	push	{r7, lr}
200032ee:	b086      	sub	sp, #24
200032f0:	af00      	add	r7, sp, #0
200032f2:	60f8      	str	r0, [r7, #12]
200032f4:	60b9      	str	r1, [r7, #8]
200032f6:	1dfb      	adds	r3, r7, #7
200032f8:	701a      	strb	r2, [r3, #0]
    uint8_t *data_pointer =  &(msg->Data[0]);
200032fa:	68fb      	ldr	r3, [r7, #12]
200032fc:	330b      	adds	r3, #11
200032fe:	617b      	str	r3, [r7, #20]
    
    
    Header header = empty_header;
20003300:	2300      	movs	r3, #0
20003302:	613b      	str	r3, [r7, #16]
    header.msgType = assignID_msg_type;
20003304:	2013      	movs	r0, #19
20003306:	183b      	adds	r3, r7, r0
20003308:	781a      	ldrb	r2, [r3, #0]
2000330a:	211c      	movs	r1, #28
2000330c:	438a      	bics	r2, r1
2000330e:	1c11      	adds	r1, r2, #0
20003310:	2208      	movs	r2, #8
20003312:	430a      	orrs	r2, r1
20003314:	701a      	strb	r2, [r3, #0]
    header.toCentral = 0;
20003316:	183b      	adds	r3, r7, r0
20003318:	781a      	ldrb	r2, [r3, #0]
2000331a:	2102      	movs	r1, #2
2000331c:	438a      	bics	r2, r1
2000331e:	701a      	strb	r2, [r3, #0]
    HEADERtoUINT32(header, msg->ExtId);
20003320:	2310      	movs	r3, #16
20003322:	18fb      	adds	r3, r7, r3
20003324:	681a      	ldr	r2, [r3, #0]
20003326:	68fb      	ldr	r3, [r7, #12]
20003328:	605a      	str	r2, [r3, #4]
    
    msg->DLC = 5;
2000332a:	68fb      	ldr	r3, [r7, #12]
2000332c:	2205      	movs	r2, #5
2000332e:	729a      	strb	r2, [r3, #10]
    
    msg->IDE = CAN_Id_Extended; //Alternativen är CAN_Id_Standard eller FCAN_Id_Extended
20003330:	68fb      	ldr	r3, [r7, #12]
20003332:	2204      	movs	r2, #4
20003334:	721a      	strb	r2, [r3, #8]
    msg->RTR = CAN_RTR_Data;
20003336:	68fb      	ldr	r3, [r7, #12]
20003338:	2200      	movs	r2, #0
2000333a:	725a      	strb	r2, [r3, #9]
    
    //Första 4 bytes är slumptalet från förfrågan
    *data_pointer = *(uint32_t *)(&(request->Data[0]));
2000333c:	68bb      	ldr	r3, [r7, #8]
2000333e:	330b      	adds	r3, #11
20003340:	681b      	ldr	r3, [r3, #0]
20003342:	b2da      	uxtb	r2, r3
20003344:	697b      	ldr	r3, [r7, #20]
20003346:	701a      	strb	r2, [r3, #0]

    //Id skickas i andra byten
    *(data_pointer + 4) = id;
20003348:	697b      	ldr	r3, [r7, #20]
2000334a:	3304      	adds	r3, #4
2000334c:	1dfa      	adds	r2, r7, #7
2000334e:	7812      	ldrb	r2, [r2, #0]
20003350:	701a      	strb	r2, [r3, #0]
}
20003352:	46c0      	nop			; (mov r8, r8)
20003354:	0018      	movs	r0, r3
20003356:	46bd      	mov	sp, r7
20003358:	b006      	add	sp, #24
2000335a:	bd80      	pop	{r7, pc}

2000335c <encode_distance_config>:

uint8_t encode_distance_config(CanTxMsg *msg, uint32_t dist){
2000335c:	b580      	push	{r7, lr}
2000335e:	b084      	sub	sp, #16
20003360:	af00      	add	r7, sp, #0
20003362:	6078      	str	r0, [r7, #4]
20003364:	6039      	str	r1, [r7, #0]
    uint8_t *data_pointer =  &(msg->Data[0]);
20003366:	687b      	ldr	r3, [r7, #4]
20003368:	330b      	adds	r3, #11
2000336a:	60fb      	str	r3, [r7, #12]
    
    msg->DLC = 4;
2000336c:	687b      	ldr	r3, [r7, #4]
2000336e:	2204      	movs	r2, #4
20003370:	729a      	strb	r2, [r3, #10]
    
    //Avstånd skrivs in i bytearrayen för data
    *data_pointer = dist;
20003372:	683b      	ldr	r3, [r7, #0]
20003374:	b2da      	uxtb	r2, r3
20003376:	68fb      	ldr	r3, [r7, #12]
20003378:	701a      	strb	r2, [r3, #0]
}
2000337a:	46c0      	nop			; (mov r8, r8)
2000337c:	0018      	movs	r0, r3
2000337e:	46bd      	mov	sp, r7
20003380:	b004      	add	sp, #16
20003382:	bd80      	pop	{r7, pc}

20003384 <decode_door_config_msg>:

uint8_t decode_door_config_msg(CanRxMsg *msg, uint8_t *door_id_0, uint8_t *door_id_1, uint16_t *time_0, uint16_t *time_1, uint8_t *locked) {
20003384:	b580      	push	{r7, lr}
20003386:	b086      	sub	sp, #24
20003388:	af00      	add	r7, sp, #0
2000338a:	60f8      	str	r0, [r7, #12]
2000338c:	60b9      	str	r1, [r7, #8]
2000338e:	607a      	str	r2, [r7, #4]
20003390:	603b      	str	r3, [r7, #0]
    uint8_t *data_pointer =  &(msg->Data);
20003392:	68fb      	ldr	r3, [r7, #12]
20003394:	330b      	adds	r3, #11
20003396:	617b      	str	r3, [r7, #20]
    
    door_id_0 = data_pointer;
20003398:	697b      	ldr	r3, [r7, #20]
2000339a:	60bb      	str	r3, [r7, #8]
    door_id_1 = data_pointer + 1;
2000339c:	697b      	ldr	r3, [r7, #20]
2000339e:	3301      	adds	r3, #1
200033a0:	607b      	str	r3, [r7, #4]
    
    time_0 = data_pointer + 2;
200033a2:	697b      	ldr	r3, [r7, #20]
200033a4:	3302      	adds	r3, #2
200033a6:	603b      	str	r3, [r7, #0]
    time_1 = data_pointer + 4;
200033a8:	697b      	ldr	r3, [r7, #20]
200033aa:	3304      	adds	r3, #4
200033ac:	623b      	str	r3, [r7, #32]
    
    locked = data_pointer + 6;
200033ae:	697b      	ldr	r3, [r7, #20]
200033b0:	3306      	adds	r3, #6
200033b2:	627b      	str	r3, [r7, #36]	; 0x24
    
    
    return 1;
200033b4:	2301      	movs	r3, #1
}
200033b6:	0018      	movs	r0, r3
200033b8:	46bd      	mov	sp, r7
200033ba:	b006      	add	sp, #24
200033bc:	bd80      	pop	{r7, pc}

200033be <bufferInit>:
#include "buffer.h"

//Nollställer bufferten
void bufferInit(FIFO *buffer) {
200033be:	b580      	push	{r7, lr}
200033c0:	b082      	sub	sp, #8
200033c2:	af00      	add	r7, sp, #0
200033c4:	6078      	str	r0, [r7, #4]
    buffer->count = 0;
200033c6:	687b      	ldr	r3, [r7, #4]
200033c8:	2264      	movs	r2, #100	; 0x64
200033ca:	2100      	movs	r1, #0
200033cc:	5499      	strb	r1, [r3, r2]
    buffer->in = 0;
200033ce:	687b      	ldr	r3, [r7, #4]
200033d0:	2265      	movs	r2, #101	; 0x65
200033d2:	2100      	movs	r1, #0
200033d4:	5499      	strb	r1, [r3, r2]
    buffer->out = 0;
200033d6:	687b      	ldr	r3, [r7, #4]
200033d8:	2266      	movs	r2, #102	; 0x66
200033da:	2100      	movs	r1, #0
200033dc:	5499      	strb	r1, [r3, r2]
}
200033de:	46c0      	nop			; (mov r8, r8)
200033e0:	46bd      	mov	sp, r7
200033e2:	b002      	add	sp, #8
200033e4:	bd80      	pop	{r7, pc}

200033e6 <bufferPut>:

//Lägger till ett elem i buffern.
//Returnerar 1 om det lyckades, 0 annars.
uint8_t bufferPut ( FIFO *buffer, uint8_t elem) {
200033e6:	b580      	push	{r7, lr}
200033e8:	b082      	sub	sp, #8
200033ea:	af00      	add	r7, sp, #0
200033ec:	6078      	str	r0, [r7, #4]
200033ee:	000a      	movs	r2, r1
200033f0:	1cfb      	adds	r3, r7, #3
200033f2:	701a      	strb	r2, [r3, #0]
    //Kollar om bufferten är full.
    if (buffer->count == BUFFERSIZE){
200033f4:	687b      	ldr	r3, [r7, #4]
200033f6:	2264      	movs	r2, #100	; 0x64
200033f8:	5c9b      	ldrb	r3, [r3, r2]
200033fa:	2b64      	cmp	r3, #100	; 0x64
200033fc:	d101      	bne.n	20003402 <bufferPut+0x1c>
        return 0;
200033fe:	2300      	movs	r3, #0
20003400:	e01e      	b.n	20003440 <bufferPut+0x5a>
    }

    //Lägger elem i bufferten
    buffer->buff[buffer->in++] = elem;
20003402:	687b      	ldr	r3, [r7, #4]
20003404:	2265      	movs	r2, #101	; 0x65
20003406:	5c9b      	ldrb	r3, [r3, r2]
20003408:	1c5a      	adds	r2, r3, #1
2000340a:	b2d0      	uxtb	r0, r2
2000340c:	687a      	ldr	r2, [r7, #4]
2000340e:	2165      	movs	r1, #101	; 0x65
20003410:	5450      	strb	r0, [r2, r1]
20003412:	0019      	movs	r1, r3
20003414:	687b      	ldr	r3, [r7, #4]
20003416:	1cfa      	adds	r2, r7, #3
20003418:	7812      	ldrb	r2, [r2, #0]
2000341a:	545a      	strb	r2, [r3, r1]
    buffer->count++;
2000341c:	687b      	ldr	r3, [r7, #4]
2000341e:	2264      	movs	r2, #100	; 0x64
20003420:	5c9b      	ldrb	r3, [r3, r2]
20003422:	3301      	adds	r3, #1
20003424:	b2d9      	uxtb	r1, r3
20003426:	687b      	ldr	r3, [r7, #4]
20003428:	2264      	movs	r2, #100	; 0x64
2000342a:	5499      	strb	r1, [r3, r2]

    //Justerar pekaren om vi nått slutet
    if (buffer->in == BUFFERSIZE)
2000342c:	687b      	ldr	r3, [r7, #4]
2000342e:	2265      	movs	r2, #101	; 0x65
20003430:	5c9b      	ldrb	r3, [r3, r2]
20003432:	2b64      	cmp	r3, #100	; 0x64
20003434:	d103      	bne.n	2000343e <bufferPut+0x58>
        buffer->in = 0;
20003436:	687b      	ldr	r3, [r7, #4]
20003438:	2265      	movs	r2, #101	; 0x65
2000343a:	2100      	movs	r1, #0
2000343c:	5499      	strb	r1, [r3, r2]

    return 1;
2000343e:	2301      	movs	r3, #1
}
20003440:	0018      	movs	r0, r3
20003442:	46bd      	mov	sp, r7
20003444:	b002      	add	sp, #8
20003446:	bd80      	pop	{r7, pc}

20003448 <bufferOverrideLast>:

//Skriver över föregående elem i buffern.
//Ändrar inga indexeringsvariabler
void bufferOverrideLast ( FIFO *buffer, uint8_t elem) {
20003448:	b580      	push	{r7, lr}
2000344a:	b084      	sub	sp, #16
2000344c:	af00      	add	r7, sp, #0
2000344e:	6078      	str	r0, [r7, #4]
20003450:	000a      	movs	r2, r1
20003452:	1cfb      	adds	r3, r7, #3
20003454:	701a      	strb	r2, [r3, #0]
    //Index för föregående element i buffern
    uint8_t prevIndex;

    //Om index för nästa element är 0 så blir föregående BUFFERSIZE - 1
    //annars buffer->in - 1
    prevIndex =  (buffer->in == 0) ? BUFFERSIZE - 1 : buffer->in - 1;
20003456:	687b      	ldr	r3, [r7, #4]
20003458:	2265      	movs	r2, #101	; 0x65
2000345a:	5c9b      	ldrb	r3, [r3, r2]
2000345c:	2b00      	cmp	r3, #0
2000345e:	d005      	beq.n	2000346c <bufferOverrideLast+0x24>
20003460:	687b      	ldr	r3, [r7, #4]
20003462:	2265      	movs	r2, #101	; 0x65
20003464:	5c9b      	ldrb	r3, [r3, r2]
20003466:	3b01      	subs	r3, #1
20003468:	b2da      	uxtb	r2, r3
2000346a:	e000      	b.n	2000346e <bufferOverrideLast+0x26>
2000346c:	2263      	movs	r2, #99	; 0x63
2000346e:	210f      	movs	r1, #15
20003470:	187b      	adds	r3, r7, r1
20003472:	701a      	strb	r2, [r3, #0]

    //Skriver över elem i bufferten
    buffer->buff[prevIndex] = elem;
20003474:	187b      	adds	r3, r7, r1
20003476:	781b      	ldrb	r3, [r3, #0]
20003478:	687a      	ldr	r2, [r7, #4]
2000347a:	1cf9      	adds	r1, r7, #3
2000347c:	7809      	ldrb	r1, [r1, #0]
2000347e:	54d1      	strb	r1, [r2, r3]
}
20003480:	46c0      	nop			; (mov r8, r8)
20003482:	46bd      	mov	sp, r7
20003484:	b004      	add	sp, #16
20003486:	bd80      	pop	{r7, pc}

20003488 <bufferGet>:

//Hämtar ett element från buffern till dest.
//Returnerar 1 om det lyckades, 0 annars.
uint8_t bufferGet ( FIFO *buffer, uint8_t *dest) {
20003488:	b580      	push	{r7, lr}
2000348a:	b082      	sub	sp, #8
2000348c:	af00      	add	r7, sp, #0
2000348e:	6078      	str	r0, [r7, #4]
20003490:	6039      	str	r1, [r7, #0]
    //Kollar om bufferten är tom
    if (!buffer->count){
20003492:	687b      	ldr	r3, [r7, #4]
20003494:	2264      	movs	r2, #100	; 0x64
20003496:	5c9b      	ldrb	r3, [r3, r2]
20003498:	2b00      	cmp	r3, #0
2000349a:	d101      	bne.n	200034a0 <bufferGet+0x18>
        return 0;
2000349c:	2300      	movs	r3, #0
2000349e:	e01e      	b.n	200034de <bufferGet+0x56>
    }

    //Hämtar element ur buffern till dest
    *dest = buffer->buff[buffer->out++];
200034a0:	687b      	ldr	r3, [r7, #4]
200034a2:	2266      	movs	r2, #102	; 0x66
200034a4:	5c9b      	ldrb	r3, [r3, r2]
200034a6:	1c5a      	adds	r2, r3, #1
200034a8:	b2d0      	uxtb	r0, r2
200034aa:	687a      	ldr	r2, [r7, #4]
200034ac:	2166      	movs	r1, #102	; 0x66
200034ae:	5450      	strb	r0, [r2, r1]
200034b0:	001a      	movs	r2, r3
200034b2:	687b      	ldr	r3, [r7, #4]
200034b4:	5c9a      	ldrb	r2, [r3, r2]
200034b6:	683b      	ldr	r3, [r7, #0]
200034b8:	701a      	strb	r2, [r3, #0]
    buffer->count--;
200034ba:	687b      	ldr	r3, [r7, #4]
200034bc:	2264      	movs	r2, #100	; 0x64
200034be:	5c9b      	ldrb	r3, [r3, r2]
200034c0:	3b01      	subs	r3, #1
200034c2:	b2d9      	uxtb	r1, r3
200034c4:	687b      	ldr	r3, [r7, #4]
200034c6:	2264      	movs	r2, #100	; 0x64
200034c8:	5499      	strb	r1, [r3, r2]

    //Justerar pekaren om vi nått slutet
    if (buffer->out == BUFFERSIZE)
200034ca:	687b      	ldr	r3, [r7, #4]
200034cc:	2266      	movs	r2, #102	; 0x66
200034ce:	5c9b      	ldrb	r3, [r3, r2]
200034d0:	2b64      	cmp	r3, #100	; 0x64
200034d2:	d103      	bne.n	200034dc <bufferGet+0x54>
        buffer->out = 0;
200034d4:	687b      	ldr	r3, [r7, #4]
200034d6:	2266      	movs	r2, #102	; 0x66
200034d8:	2100      	movs	r1, #0
200034da:	5499      	strb	r1, [r3, r2]

    return 1;
200034dc:	2301      	movs	r3, #1
200034de:	0018      	movs	r0, r3
200034e0:	46bd      	mov	sp, r7
200034e2:	b002      	add	sp, #8
200034e4:	bd80      	pop	{r7, pc}
	...

200034e8 <NVIC_PriorityGroupConfig>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void NVIC_PriorityGroupConfig(uint32_t NVIC_PriorityGroup)
{
200034e8:	b580      	push	{r7, lr}
200034ea:	b082      	sub	sp, #8
200034ec:	af00      	add	r7, sp, #0
200034ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
200034f0:	4b04      	ldr	r3, [pc, #16]	; (20003504 <NVIC_PriorityGroupConfig+0x1c>)
200034f2:	687a      	ldr	r2, [r7, #4]
200034f4:	4904      	ldr	r1, [pc, #16]	; (20003508 <NVIC_PriorityGroupConfig+0x20>)
200034f6:	430a      	orrs	r2, r1
200034f8:	60da      	str	r2, [r3, #12]
}
200034fa:	46c0      	nop			; (mov r8, r8)
200034fc:	46bd      	mov	sp, r7
200034fe:	b002      	add	sp, #8
20003500:	bd80      	pop	{r7, pc}
20003502:	46c0      	nop			; (mov r8, r8)
20003504:	e000ed00 	and	lr, r0, r0, lsl #26
20003508:	05fa0000 	ldrbeq	r0, [sl, #0]!

2000350c <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
2000350c:	b5b0      	push	{r4, r5, r7, lr}
2000350e:	b084      	sub	sp, #16
20003510:	af00      	add	r7, sp, #0
20003512:	6078      	str	r0, [r7, #4]
  uint8_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
20003514:	230f      	movs	r3, #15
20003516:	18fb      	adds	r3, r7, r3
20003518:	2200      	movs	r2, #0
2000351a:	701a      	strb	r2, [r3, #0]
2000351c:	230e      	movs	r3, #14
2000351e:	18fb      	adds	r3, r7, r3
20003520:	2200      	movs	r2, #0
20003522:	701a      	strb	r2, [r3, #0]
20003524:	230d      	movs	r3, #13
20003526:	18fb      	adds	r3, r7, r3
20003528:	220f      	movs	r2, #15
2000352a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
2000352c:	687b      	ldr	r3, [r7, #4]
2000352e:	78db      	ldrb	r3, [r3, #3]
20003530:	2b00      	cmp	r3, #0
20003532:	d04d      	beq.n	200035d0 <NVIC_Init+0xc4>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
20003534:	4b31      	ldr	r3, [pc, #196]	; (200035fc <NVIC_Init+0xf0>)
20003536:	68db      	ldr	r3, [r3, #12]
20003538:	43db      	mvns	r3, r3
2000353a:	0a1b      	lsrs	r3, r3, #8
2000353c:	b2da      	uxtb	r2, r3
2000353e:	200f      	movs	r0, #15
20003540:	183b      	adds	r3, r7, r0
20003542:	2107      	movs	r1, #7
20003544:	400a      	ands	r2, r1
20003546:	701a      	strb	r2, [r3, #0]
    tmppre = (0x4 - tmppriority);
20003548:	250e      	movs	r5, #14
2000354a:	197b      	adds	r3, r7, r5
2000354c:	183a      	adds	r2, r7, r0
2000354e:	7812      	ldrb	r2, [r2, #0]
20003550:	2104      	movs	r1, #4
20003552:	1a8a      	subs	r2, r1, r2
20003554:	701a      	strb	r2, [r3, #0]
    tmpsub = tmpsub >> tmppriority;
20003556:	240d      	movs	r4, #13
20003558:	193b      	adds	r3, r7, r4
2000355a:	781a      	ldrb	r2, [r3, #0]
2000355c:	0001      	movs	r1, r0
2000355e:	187b      	adds	r3, r7, r1
20003560:	781b      	ldrb	r3, [r3, #0]
20003562:	411a      	asrs	r2, r3
20003564:	193b      	adds	r3, r7, r4
20003566:	701a      	strb	r2, [r3, #0]

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
20003568:	687b      	ldr	r3, [r7, #4]
2000356a:	785b      	ldrb	r3, [r3, #1]
2000356c:	001a      	movs	r2, r3
2000356e:	197b      	adds	r3, r7, r5
20003570:	781b      	ldrb	r3, [r3, #0]
20003572:	409a      	lsls	r2, r3
20003574:	0008      	movs	r0, r1
20003576:	187b      	adds	r3, r7, r1
20003578:	701a      	strb	r2, [r3, #0]
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
2000357a:	687b      	ldr	r3, [r7, #4]
2000357c:	789b      	ldrb	r3, [r3, #2]
2000357e:	193a      	adds	r2, r7, r4
20003580:	7812      	ldrb	r2, [r2, #0]
20003582:	4013      	ands	r3, r2
20003584:	b2d9      	uxtb	r1, r3
20003586:	183b      	adds	r3, r7, r0
20003588:	183a      	adds	r2, r7, r0
2000358a:	7812      	ldrb	r2, [r2, #0]
2000358c:	430a      	orrs	r2, r1
2000358e:	701a      	strb	r2, [r3, #0]
        
    tmppriority = tmppriority << 0x04;
20003590:	183b      	adds	r3, r7, r0
20003592:	183a      	adds	r2, r7, r0
20003594:	7812      	ldrb	r2, [r2, #0]
20003596:	0112      	lsls	r2, r2, #4
20003598:	701a      	strb	r2, [r3, #0]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
2000359a:	4a19      	ldr	r2, [pc, #100]	; (20003600 <NVIC_Init+0xf4>)
2000359c:	687b      	ldr	r3, [r7, #4]
2000359e:	781b      	ldrb	r3, [r3, #0]
200035a0:	0019      	movs	r1, r3
200035a2:	23c0      	movs	r3, #192	; 0xc0
200035a4:	009b      	lsls	r3, r3, #2
200035a6:	1852      	adds	r2, r2, r1
200035a8:	18d3      	adds	r3, r2, r3
200035aa:	183a      	adds	r2, r7, r0
200035ac:	7812      	ldrb	r2, [r2, #0]
200035ae:	701a      	strb	r2, [r3, #0]
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
200035b0:	687b      	ldr	r3, [r7, #4]
200035b2:	781b      	ldrb	r3, [r3, #0]
200035b4:	001a      	movs	r2, r3
200035b6:	231f      	movs	r3, #31
200035b8:	4013      	ands	r3, r2
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
200035ba:	4911      	ldr	r1, [pc, #68]	; (20003600 <NVIC_Init+0xf4>)
200035bc:	687a      	ldr	r2, [r7, #4]
200035be:	7812      	ldrb	r2, [r2, #0]
200035c0:	0952      	lsrs	r2, r2, #5
200035c2:	b2d2      	uxtb	r2, r2
200035c4:	0010      	movs	r0, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
200035c6:	2201      	movs	r2, #1
200035c8:	409a      	lsls	r2, r3
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
200035ca:	0083      	lsls	r3, r0, #2
200035cc:	505a      	str	r2, [r3, r1]
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
200035ce:	e010      	b.n	200035f2 <NVIC_Init+0xe6>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
200035d0:	687b      	ldr	r3, [r7, #4]
200035d2:	781b      	ldrb	r3, [r3, #0]
200035d4:	001a      	movs	r2, r3
200035d6:	231f      	movs	r3, #31
200035d8:	4013      	ands	r3, r2
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
200035da:	4909      	ldr	r1, [pc, #36]	; (20003600 <NVIC_Init+0xf4>)
200035dc:	687a      	ldr	r2, [r7, #4]
200035de:	7812      	ldrb	r2, [r2, #0]
200035e0:	0952      	lsrs	r2, r2, #5
200035e2:	b2d2      	uxtb	r2, r2
200035e4:	0010      	movs	r0, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
200035e6:	2201      	movs	r2, #1
200035e8:	409a      	lsls	r2, r3
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
200035ea:	0003      	movs	r3, r0
200035ec:	3320      	adds	r3, #32
200035ee:	009b      	lsls	r3, r3, #2
200035f0:	505a      	str	r2, [r3, r1]
}
200035f2:	46c0      	nop			; (mov r8, r8)
200035f4:	46bd      	mov	sp, r7
200035f6:	b004      	add	sp, #16
200035f8:	bdb0      	pop	{r4, r5, r7, pc}
200035fa:	46c0      	nop			; (mov r8, r8)
200035fc:	e000ed00 	and	lr, r0, r0, lsl #26
20003600:	e000e100 	and	lr, r0, r0, lsl #2

20003604 <NVIC_SetVectorTable>:
  *     @arg NVIC_VectTab_FLASH: Vector Table in internal FLASH.
  * @param  Offset: Vector Table base offset field. This value must be a multiple of 0x200.
  * @retval None
  */
void NVIC_SetVectorTable(uint32_t NVIC_VectTab, uint32_t Offset)
{ 
20003604:	b580      	push	{r7, lr}
20003606:	b082      	sub	sp, #8
20003608:	af00      	add	r7, sp, #0
2000360a:	6078      	str	r0, [r7, #4]
2000360c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_VECTTAB(NVIC_VectTab));
  assert_param(IS_NVIC_OFFSET(Offset));  
   
  SCB->VTOR = NVIC_VectTab | (Offset & (uint32_t)0x1FFFFF80);
2000360e:	683b      	ldr	r3, [r7, #0]
20003610:	4a05      	ldr	r2, [pc, #20]	; (20003628 <NVIC_SetVectorTable+0x24>)
20003612:	4013      	ands	r3, r2
20003614:	0019      	movs	r1, r3
20003616:	4b05      	ldr	r3, [pc, #20]	; (2000362c <NVIC_SetVectorTable+0x28>)
20003618:	687a      	ldr	r2, [r7, #4]
2000361a:	430a      	orrs	r2, r1
2000361c:	609a      	str	r2, [r3, #8]
}
2000361e:	46c0      	nop			; (mov r8, r8)
20003620:	46bd      	mov	sp, r7
20003622:	b002      	add	sp, #8
20003624:	bd80      	pop	{r7, pc}
20003626:	46c0      	nop			; (mov r8, r8)
20003628:	1fffff80 	svcne	0x00ffff80
2000362c:	e000ed00 	and	lr, r0, r0, lsl #26

20003630 <NVIC_SystemLPConfig>:
  *     @arg NVIC_LP_SLEEPONEXIT: Low Power Sleep on Exit.
  * @param  NewState: new state of LP condition. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void NVIC_SystemLPConfig(uint8_t LowPowerMode, FunctionalState NewState)
{
20003630:	b580      	push	{r7, lr}
20003632:	b082      	sub	sp, #8
20003634:	af00      	add	r7, sp, #0
20003636:	0002      	movs	r2, r0
20003638:	1dfb      	adds	r3, r7, #7
2000363a:	701a      	strb	r2, [r3, #0]
2000363c:	1dbb      	adds	r3, r7, #6
2000363e:	1c0a      	adds	r2, r1, #0
20003640:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_LP(LowPowerMode));
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  if (NewState != DISABLE)
20003642:	1dbb      	adds	r3, r7, #6
20003644:	781b      	ldrb	r3, [r3, #0]
20003646:	2b00      	cmp	r3, #0
20003648:	d007      	beq.n	2000365a <NVIC_SystemLPConfig+0x2a>
  {
    SCB->SCR |= LowPowerMode;
2000364a:	4b0a      	ldr	r3, [pc, #40]	; (20003674 <NVIC_SystemLPConfig+0x44>)
2000364c:	6919      	ldr	r1, [r3, #16]
2000364e:	1dfb      	adds	r3, r7, #7
20003650:	781a      	ldrb	r2, [r3, #0]
20003652:	4b08      	ldr	r3, [pc, #32]	; (20003674 <NVIC_SystemLPConfig+0x44>)
20003654:	430a      	orrs	r2, r1
20003656:	611a      	str	r2, [r3, #16]
  }
  else
  {
    SCB->SCR &= (uint32_t)(~(uint32_t)LowPowerMode);
  }
}
20003658:	e007      	b.n	2000366a <NVIC_SystemLPConfig+0x3a>
    SCB->SCR &= (uint32_t)(~(uint32_t)LowPowerMode);
2000365a:	4b06      	ldr	r3, [pc, #24]	; (20003674 <NVIC_SystemLPConfig+0x44>)
2000365c:	691a      	ldr	r2, [r3, #16]
2000365e:	1dfb      	adds	r3, r7, #7
20003660:	781b      	ldrb	r3, [r3, #0]
20003662:	43d9      	mvns	r1, r3
20003664:	4b03      	ldr	r3, [pc, #12]	; (20003674 <NVIC_SystemLPConfig+0x44>)
20003666:	400a      	ands	r2, r1
20003668:	611a      	str	r2, [r3, #16]
}
2000366a:	46c0      	nop			; (mov r8, r8)
2000366c:	46bd      	mov	sp, r7
2000366e:	b002      	add	sp, #8
20003670:	bd80      	pop	{r7, pc}
20003672:	46c0      	nop			; (mov r8, r8)
20003674:	e000ed00 	and	lr, r0, r0, lsl #26

20003678 <SysTick_CLKSourceConfig>:
  *     @arg SysTick_CLKSource_HCLK_Div8: AHB clock divided by 8 selected as SysTick clock source.
  *     @arg SysTick_CLKSource_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void SysTick_CLKSourceConfig(uint32_t SysTick_CLKSource)
{
20003678:	b580      	push	{r7, lr}
2000367a:	b082      	sub	sp, #8
2000367c:	af00      	add	r7, sp, #0
2000367e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(SysTick_CLKSource));
  if (SysTick_CLKSource == SysTick_CLKSource_HCLK)
20003680:	687b      	ldr	r3, [r7, #4]
20003682:	2b04      	cmp	r3, #4
20003684:	d106      	bne.n	20003694 <SysTick_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SysTick_CLKSource_HCLK;
20003686:	4b08      	ldr	r3, [pc, #32]	; (200036a8 <SysTick_CLKSourceConfig+0x30>)
20003688:	681a      	ldr	r2, [r3, #0]
2000368a:	4b07      	ldr	r3, [pc, #28]	; (200036a8 <SysTick_CLKSourceConfig+0x30>)
2000368c:	2104      	movs	r1, #4
2000368e:	430a      	orrs	r2, r1
20003690:	601a      	str	r2, [r3, #0]
  }
  else
  {
    SysTick->CTRL &= SysTick_CLKSource_HCLK_Div8;
  }
}
20003692:	e005      	b.n	200036a0 <SysTick_CLKSourceConfig+0x28>
    SysTick->CTRL &= SysTick_CLKSource_HCLK_Div8;
20003694:	4b04      	ldr	r3, [pc, #16]	; (200036a8 <SysTick_CLKSourceConfig+0x30>)
20003696:	681a      	ldr	r2, [r3, #0]
20003698:	4b03      	ldr	r3, [pc, #12]	; (200036a8 <SysTick_CLKSourceConfig+0x30>)
2000369a:	2104      	movs	r1, #4
2000369c:	438a      	bics	r2, r1
2000369e:	601a      	str	r2, [r3, #0]
}
200036a0:	46c0      	nop			; (mov r8, r8)
200036a2:	46bd      	mov	sp, r7
200036a4:	b002      	add	sp, #8
200036a6:	bd80      	pop	{r7, pc}
200036a8:	e000e010 	and	lr, r0, r0, lsl r0

200036ac <GPIO_DeInit>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F42xxx/43xxx devices.
  *                      x can be (A, B, C, D and H) to select the GPIO peripheral for STM32F401xx devices.  
  * @retval None
  */
void GPIO_DeInit(GPIO_TypeDef* GPIOx)
{
200036ac:	b580      	push	{r7, lr}
200036ae:	b082      	sub	sp, #8
200036b0:	af00      	add	r7, sp, #0
200036b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  if (GPIOx == GPIOA)
200036b4:	687b      	ldr	r3, [r7, #4]
200036b6:	4a4e      	ldr	r2, [pc, #312]	; (200037f0 <GPIO_DeInit+0x144>)
200036b8:	4293      	cmp	r3, r2
200036ba:	d108      	bne.n	200036ce <GPIO_DeInit+0x22>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, ENABLE);
200036bc:	2101      	movs	r1, #1
200036be:	2001      	movs	r0, #1
200036c0:	f7fe fe18 	bl	200022f4 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, DISABLE);
200036c4:	2100      	movs	r1, #0
200036c6:	2001      	movs	r0, #1
200036c8:	f7fe fe14 	bl	200022f4 <RCC_AHB1PeriphResetCmd>
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, ENABLE);
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, DISABLE);
    }
  }
}
200036cc:	e08c      	b.n	200037e8 <GPIO_DeInit+0x13c>
  else if (GPIOx == GPIOB)
200036ce:	687b      	ldr	r3, [r7, #4]
200036d0:	4a48      	ldr	r2, [pc, #288]	; (200037f4 <GPIO_DeInit+0x148>)
200036d2:	4293      	cmp	r3, r2
200036d4:	d108      	bne.n	200036e8 <GPIO_DeInit+0x3c>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, ENABLE);
200036d6:	2101      	movs	r1, #1
200036d8:	2002      	movs	r0, #2
200036da:	f7fe fe0b 	bl	200022f4 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, DISABLE);
200036de:	2100      	movs	r1, #0
200036e0:	2002      	movs	r0, #2
200036e2:	f7fe fe07 	bl	200022f4 <RCC_AHB1PeriphResetCmd>
}
200036e6:	e07f      	b.n	200037e8 <GPIO_DeInit+0x13c>
  else if (GPIOx == GPIOC)
200036e8:	687b      	ldr	r3, [r7, #4]
200036ea:	4a43      	ldr	r2, [pc, #268]	; (200037f8 <GPIO_DeInit+0x14c>)
200036ec:	4293      	cmp	r3, r2
200036ee:	d108      	bne.n	20003702 <GPIO_DeInit+0x56>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, ENABLE);
200036f0:	2101      	movs	r1, #1
200036f2:	2004      	movs	r0, #4
200036f4:	f7fe fdfe 	bl	200022f4 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, DISABLE);
200036f8:	2100      	movs	r1, #0
200036fa:	2004      	movs	r0, #4
200036fc:	f7fe fdfa 	bl	200022f4 <RCC_AHB1PeriphResetCmd>
}
20003700:	e072      	b.n	200037e8 <GPIO_DeInit+0x13c>
  else if (GPIOx == GPIOD)
20003702:	687b      	ldr	r3, [r7, #4]
20003704:	4a3d      	ldr	r2, [pc, #244]	; (200037fc <GPIO_DeInit+0x150>)
20003706:	4293      	cmp	r3, r2
20003708:	d108      	bne.n	2000371c <GPIO_DeInit+0x70>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, ENABLE);
2000370a:	2101      	movs	r1, #1
2000370c:	2008      	movs	r0, #8
2000370e:	f7fe fdf1 	bl	200022f4 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, DISABLE);
20003712:	2100      	movs	r1, #0
20003714:	2008      	movs	r0, #8
20003716:	f7fe fded 	bl	200022f4 <RCC_AHB1PeriphResetCmd>
}
2000371a:	e065      	b.n	200037e8 <GPIO_DeInit+0x13c>
  else if (GPIOx == GPIOE)
2000371c:	687b      	ldr	r3, [r7, #4]
2000371e:	4a38      	ldr	r2, [pc, #224]	; (20003800 <GPIO_DeInit+0x154>)
20003720:	4293      	cmp	r3, r2
20003722:	d108      	bne.n	20003736 <GPIO_DeInit+0x8a>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, ENABLE);
20003724:	2101      	movs	r1, #1
20003726:	2010      	movs	r0, #16
20003728:	f7fe fde4 	bl	200022f4 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, DISABLE);
2000372c:	2100      	movs	r1, #0
2000372e:	2010      	movs	r0, #16
20003730:	f7fe fde0 	bl	200022f4 <RCC_AHB1PeriphResetCmd>
}
20003734:	e058      	b.n	200037e8 <GPIO_DeInit+0x13c>
  else if (GPIOx == GPIOF)
20003736:	687b      	ldr	r3, [r7, #4]
20003738:	4a32      	ldr	r2, [pc, #200]	; (20003804 <GPIO_DeInit+0x158>)
2000373a:	4293      	cmp	r3, r2
2000373c:	d108      	bne.n	20003750 <GPIO_DeInit+0xa4>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, ENABLE);
2000373e:	2101      	movs	r1, #1
20003740:	2020      	movs	r0, #32
20003742:	f7fe fdd7 	bl	200022f4 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, DISABLE);
20003746:	2100      	movs	r1, #0
20003748:	2020      	movs	r0, #32
2000374a:	f7fe fdd3 	bl	200022f4 <RCC_AHB1PeriphResetCmd>
}
2000374e:	e04b      	b.n	200037e8 <GPIO_DeInit+0x13c>
  else if (GPIOx == GPIOG)
20003750:	687b      	ldr	r3, [r7, #4]
20003752:	4a2d      	ldr	r2, [pc, #180]	; (20003808 <GPIO_DeInit+0x15c>)
20003754:	4293      	cmp	r3, r2
20003756:	d108      	bne.n	2000376a <GPIO_DeInit+0xbe>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, ENABLE);
20003758:	2101      	movs	r1, #1
2000375a:	2040      	movs	r0, #64	; 0x40
2000375c:	f7fe fdca 	bl	200022f4 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, DISABLE);
20003760:	2100      	movs	r1, #0
20003762:	2040      	movs	r0, #64	; 0x40
20003764:	f7fe fdc6 	bl	200022f4 <RCC_AHB1PeriphResetCmd>
}
20003768:	e03e      	b.n	200037e8 <GPIO_DeInit+0x13c>
  else if (GPIOx == GPIOH)
2000376a:	687b      	ldr	r3, [r7, #4]
2000376c:	4a27      	ldr	r2, [pc, #156]	; (2000380c <GPIO_DeInit+0x160>)
2000376e:	4293      	cmp	r3, r2
20003770:	d108      	bne.n	20003784 <GPIO_DeInit+0xd8>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOH, ENABLE);
20003772:	2101      	movs	r1, #1
20003774:	2080      	movs	r0, #128	; 0x80
20003776:	f7fe fdbd 	bl	200022f4 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOH, DISABLE);
2000377a:	2100      	movs	r1, #0
2000377c:	2080      	movs	r0, #128	; 0x80
2000377e:	f7fe fdb9 	bl	200022f4 <RCC_AHB1PeriphResetCmd>
}
20003782:	e031      	b.n	200037e8 <GPIO_DeInit+0x13c>
  else if (GPIOx == GPIOI)
20003784:	687b      	ldr	r3, [r7, #4]
20003786:	4a22      	ldr	r2, [pc, #136]	; (20003810 <GPIO_DeInit+0x164>)
20003788:	4293      	cmp	r3, r2
2000378a:	d10c      	bne.n	200037a6 <GPIO_DeInit+0xfa>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, ENABLE);
2000378c:	2380      	movs	r3, #128	; 0x80
2000378e:	005b      	lsls	r3, r3, #1
20003790:	2101      	movs	r1, #1
20003792:	0018      	movs	r0, r3
20003794:	f7fe fdae 	bl	200022f4 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, DISABLE);
20003798:	2380      	movs	r3, #128	; 0x80
2000379a:	005b      	lsls	r3, r3, #1
2000379c:	2100      	movs	r1, #0
2000379e:	0018      	movs	r0, r3
200037a0:	f7fe fda8 	bl	200022f4 <RCC_AHB1PeriphResetCmd>
}
200037a4:	e020      	b.n	200037e8 <GPIO_DeInit+0x13c>
  else if (GPIOx == GPIOJ)
200037a6:	687b      	ldr	r3, [r7, #4]
200037a8:	4a1a      	ldr	r2, [pc, #104]	; (20003814 <GPIO_DeInit+0x168>)
200037aa:	4293      	cmp	r3, r2
200037ac:	d10c      	bne.n	200037c8 <GPIO_DeInit+0x11c>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOJ, ENABLE);
200037ae:	2380      	movs	r3, #128	; 0x80
200037b0:	009b      	lsls	r3, r3, #2
200037b2:	2101      	movs	r1, #1
200037b4:	0018      	movs	r0, r3
200037b6:	f7fe fd9d 	bl	200022f4 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOJ, DISABLE);
200037ba:	2380      	movs	r3, #128	; 0x80
200037bc:	009b      	lsls	r3, r3, #2
200037be:	2100      	movs	r1, #0
200037c0:	0018      	movs	r0, r3
200037c2:	f7fe fd97 	bl	200022f4 <RCC_AHB1PeriphResetCmd>
}
200037c6:	e00f      	b.n	200037e8 <GPIO_DeInit+0x13c>
    if (GPIOx == GPIOK)
200037c8:	687b      	ldr	r3, [r7, #4]
200037ca:	4a13      	ldr	r2, [pc, #76]	; (20003818 <GPIO_DeInit+0x16c>)
200037cc:	4293      	cmp	r3, r2
200037ce:	d10b      	bne.n	200037e8 <GPIO_DeInit+0x13c>
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, ENABLE);
200037d0:	2380      	movs	r3, #128	; 0x80
200037d2:	00db      	lsls	r3, r3, #3
200037d4:	2101      	movs	r1, #1
200037d6:	0018      	movs	r0, r3
200037d8:	f7fe fd8c 	bl	200022f4 <RCC_AHB1PeriphResetCmd>
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, DISABLE);
200037dc:	2380      	movs	r3, #128	; 0x80
200037de:	00db      	lsls	r3, r3, #3
200037e0:	2100      	movs	r1, #0
200037e2:	0018      	movs	r0, r3
200037e4:	f7fe fd86 	bl	200022f4 <RCC_AHB1PeriphResetCmd>
}
200037e8:	46c0      	nop			; (mov r8, r8)
200037ea:	46bd      	mov	sp, r7
200037ec:	b002      	add	sp, #8
200037ee:	bd80      	pop	{r7, pc}
200037f0:	40020000 	andmi	r0, r2, r0
200037f4:	40020400 	andmi	r0, r2, r0, lsl #8
200037f8:	40020800 	andmi	r0, r2, r0, lsl #16
200037fc:	40020c00 	andmi	r0, r2, r0, lsl #24
20003800:	40021000 	andmi	r1, r2, r0
20003804:	40021400 	andmi	r1, r2, r0, lsl #8
20003808:	40021800 	andmi	r1, r2, r0, lsl #16
2000380c:	40021c00 	andmi	r1, r2, r0, lsl #24
20003810:	40022000 	andmi	r2, r2, r0
20003814:	40022400 	andmi	r2, r2, r0, lsl #8
20003818:	40022800 	andmi	r2, r2, r0, lsl #16

2000381c <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
2000381c:	b580      	push	{r7, lr}
2000381e:	b086      	sub	sp, #24
20003820:	af00      	add	r7, sp, #0
20003822:	6078      	str	r0, [r7, #4]
20003824:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
20003826:	2300      	movs	r3, #0
20003828:	617b      	str	r3, [r7, #20]
2000382a:	2300      	movs	r3, #0
2000382c:	613b      	str	r3, [r7, #16]
2000382e:	2300      	movs	r3, #0
20003830:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
20003832:	2300      	movs	r3, #0
20003834:	617b      	str	r3, [r7, #20]
20003836:	e076      	b.n	20003926 <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
20003838:	2201      	movs	r2, #1
2000383a:	697b      	ldr	r3, [r7, #20]
2000383c:	409a      	lsls	r2, r3
2000383e:	0013      	movs	r3, r2
20003840:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
20003842:	683b      	ldr	r3, [r7, #0]
20003844:	681a      	ldr	r2, [r3, #0]
20003846:	693b      	ldr	r3, [r7, #16]
20003848:	4013      	ands	r3, r2
2000384a:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
2000384c:	68fa      	ldr	r2, [r7, #12]
2000384e:	693b      	ldr	r3, [r7, #16]
20003850:	429a      	cmp	r2, r3
20003852:	d165      	bne.n	20003920 <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
20003854:	687b      	ldr	r3, [r7, #4]
20003856:	681b      	ldr	r3, [r3, #0]
20003858:	697a      	ldr	r2, [r7, #20]
2000385a:	0052      	lsls	r2, r2, #1
2000385c:	2103      	movs	r1, #3
2000385e:	4091      	lsls	r1, r2
20003860:	000a      	movs	r2, r1
20003862:	43d2      	mvns	r2, r2
20003864:	401a      	ands	r2, r3
20003866:	687b      	ldr	r3, [r7, #4]
20003868:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
2000386a:	687b      	ldr	r3, [r7, #4]
2000386c:	681a      	ldr	r2, [r3, #0]
2000386e:	683b      	ldr	r3, [r7, #0]
20003870:	791b      	ldrb	r3, [r3, #4]
20003872:	0019      	movs	r1, r3
20003874:	697b      	ldr	r3, [r7, #20]
20003876:	005b      	lsls	r3, r3, #1
20003878:	4099      	lsls	r1, r3
2000387a:	000b      	movs	r3, r1
2000387c:	431a      	orrs	r2, r3
2000387e:	687b      	ldr	r3, [r7, #4]
20003880:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
20003882:	683b      	ldr	r3, [r7, #0]
20003884:	791b      	ldrb	r3, [r3, #4]
20003886:	2b01      	cmp	r3, #1
20003888:	d003      	beq.n	20003892 <GPIO_Init+0x76>
2000388a:	683b      	ldr	r3, [r7, #0]
2000388c:	791b      	ldrb	r3, [r3, #4]
2000388e:	2b02      	cmp	r3, #2
20003890:	d12e      	bne.n	200038f0 <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
20003892:	687b      	ldr	r3, [r7, #4]
20003894:	689b      	ldr	r3, [r3, #8]
20003896:	697a      	ldr	r2, [r7, #20]
20003898:	0052      	lsls	r2, r2, #1
2000389a:	2103      	movs	r1, #3
2000389c:	4091      	lsls	r1, r2
2000389e:	000a      	movs	r2, r1
200038a0:	43d2      	mvns	r2, r2
200038a2:	401a      	ands	r2, r3
200038a4:	687b      	ldr	r3, [r7, #4]
200038a6:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
200038a8:	687b      	ldr	r3, [r7, #4]
200038aa:	689a      	ldr	r2, [r3, #8]
200038ac:	683b      	ldr	r3, [r7, #0]
200038ae:	795b      	ldrb	r3, [r3, #5]
200038b0:	0019      	movs	r1, r3
200038b2:	697b      	ldr	r3, [r7, #20]
200038b4:	005b      	lsls	r3, r3, #1
200038b6:	4099      	lsls	r1, r3
200038b8:	000b      	movs	r3, r1
200038ba:	431a      	orrs	r2, r3
200038bc:	687b      	ldr	r3, [r7, #4]
200038be:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
200038c0:	687b      	ldr	r3, [r7, #4]
200038c2:	685b      	ldr	r3, [r3, #4]
200038c4:	697a      	ldr	r2, [r7, #20]
200038c6:	b292      	uxth	r2, r2
200038c8:	0011      	movs	r1, r2
200038ca:	2201      	movs	r2, #1
200038cc:	408a      	lsls	r2, r1
200038ce:	43d2      	mvns	r2, r2
200038d0:	401a      	ands	r2, r3
200038d2:	687b      	ldr	r3, [r7, #4]
200038d4:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
200038d6:	687b      	ldr	r3, [r7, #4]
200038d8:	685b      	ldr	r3, [r3, #4]
200038da:	683a      	ldr	r2, [r7, #0]
200038dc:	7992      	ldrb	r2, [r2, #6]
200038de:	0011      	movs	r1, r2
200038e0:	697a      	ldr	r2, [r7, #20]
200038e2:	b292      	uxth	r2, r2
200038e4:	4091      	lsls	r1, r2
200038e6:	000a      	movs	r2, r1
200038e8:	b292      	uxth	r2, r2
200038ea:	431a      	orrs	r2, r3
200038ec:	687b      	ldr	r3, [r7, #4]
200038ee:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
200038f0:	687b      	ldr	r3, [r7, #4]
200038f2:	68db      	ldr	r3, [r3, #12]
200038f4:	697a      	ldr	r2, [r7, #20]
200038f6:	b292      	uxth	r2, r2
200038f8:	0052      	lsls	r2, r2, #1
200038fa:	2103      	movs	r1, #3
200038fc:	4091      	lsls	r1, r2
200038fe:	000a      	movs	r2, r1
20003900:	43d2      	mvns	r2, r2
20003902:	401a      	ands	r2, r3
20003904:	687b      	ldr	r3, [r7, #4]
20003906:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
20003908:	687b      	ldr	r3, [r7, #4]
2000390a:	68da      	ldr	r2, [r3, #12]
2000390c:	683b      	ldr	r3, [r7, #0]
2000390e:	79db      	ldrb	r3, [r3, #7]
20003910:	0019      	movs	r1, r3
20003912:	697b      	ldr	r3, [r7, #20]
20003914:	005b      	lsls	r3, r3, #1
20003916:	4099      	lsls	r1, r3
20003918:	000b      	movs	r3, r1
2000391a:	431a      	orrs	r2, r3
2000391c:	687b      	ldr	r3, [r7, #4]
2000391e:	60da      	str	r2, [r3, #12]
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
20003920:	697b      	ldr	r3, [r7, #20]
20003922:	3301      	adds	r3, #1
20003924:	617b      	str	r3, [r7, #20]
20003926:	697b      	ldr	r3, [r7, #20]
20003928:	2b0f      	cmp	r3, #15
2000392a:	d985      	bls.n	20003838 <GPIO_Init+0x1c>
    }
  }
}
2000392c:	46c0      	nop			; (mov r8, r8)
2000392e:	46bd      	mov	sp, r7
20003930:	b006      	add	sp, #24
20003932:	bd80      	pop	{r7, pc}

20003934 <GPIO_StructInit>:
  * @brief  Fills each GPIO_InitStruct member with its default value.
  * @param  GPIO_InitStruct : pointer to a GPIO_InitTypeDef structure which will be initialized.
  * @retval None
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
20003934:	b580      	push	{r7, lr}
20003936:	b082      	sub	sp, #8
20003938:	af00      	add	r7, sp, #0
2000393a:	6078      	str	r0, [r7, #4]
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
2000393c:	687b      	ldr	r3, [r7, #4]
2000393e:	4a09      	ldr	r2, [pc, #36]	; (20003964 <GPIO_StructInit+0x30>)
20003940:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN;
20003942:	687b      	ldr	r3, [r7, #4]
20003944:	2200      	movs	r2, #0
20003946:	711a      	strb	r2, [r3, #4]
  GPIO_InitStruct->GPIO_Speed = GPIO_Speed_2MHz;
20003948:	687b      	ldr	r3, [r7, #4]
2000394a:	2200      	movs	r2, #0
2000394c:	715a      	strb	r2, [r3, #5]
  GPIO_InitStruct->GPIO_OType = GPIO_OType_PP;
2000394e:	687b      	ldr	r3, [r7, #4]
20003950:	2200      	movs	r2, #0
20003952:	719a      	strb	r2, [r3, #6]
  GPIO_InitStruct->GPIO_PuPd = GPIO_PuPd_NOPULL;
20003954:	687b      	ldr	r3, [r7, #4]
20003956:	2200      	movs	r2, #0
20003958:	71da      	strb	r2, [r3, #7]
}
2000395a:	46c0      	nop			; (mov r8, r8)
2000395c:	46bd      	mov	sp, r7
2000395e:	b002      	add	sp, #8
20003960:	bd80      	pop	{r7, pc}
20003962:	46c0      	nop			; (mov r8, r8)
20003964:	0000ffff 	strdeq	pc, [r0], -pc	; <UNPREDICTABLE>

20003968 <GPIO_PinLockConfig>:
  * @param  GPIO_Pin: specifies the port bit to be locked.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_PinLockConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
20003968:	b580      	push	{r7, lr}
2000396a:	b084      	sub	sp, #16
2000396c:	af00      	add	r7, sp, #0
2000396e:	6078      	str	r0, [r7, #4]
20003970:	000a      	movs	r2, r1
20003972:	1cbb      	adds	r3, r7, #2
20003974:	801a      	strh	r2, [r3, #0]
  __IO uint32_t tmp = 0x00010000;
20003976:	2380      	movs	r3, #128	; 0x80
20003978:	025b      	lsls	r3, r3, #9
2000397a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  tmp |= GPIO_Pin;
2000397c:	1cbb      	adds	r3, r7, #2
2000397e:	881a      	ldrh	r2, [r3, #0]
20003980:	68fb      	ldr	r3, [r7, #12]
20003982:	4313      	orrs	r3, r2
20003984:	60fb      	str	r3, [r7, #12]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
20003986:	68fa      	ldr	r2, [r7, #12]
20003988:	687b      	ldr	r3, [r7, #4]
2000398a:	61da      	str	r2, [r3, #28]
  /* Reset LCKK bit */
  GPIOx->LCKR =  GPIO_Pin;
2000398c:	1cbb      	adds	r3, r7, #2
2000398e:	881a      	ldrh	r2, [r3, #0]
20003990:	687b      	ldr	r3, [r7, #4]
20003992:	61da      	str	r2, [r3, #28]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
20003994:	68fa      	ldr	r2, [r7, #12]
20003996:	687b      	ldr	r3, [r7, #4]
20003998:	61da      	str	r2, [r3, #28]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
2000399a:	687b      	ldr	r3, [r7, #4]
2000399c:	69db      	ldr	r3, [r3, #28]
2000399e:	60fb      	str	r3, [r7, #12]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
200039a0:	687b      	ldr	r3, [r7, #4]
200039a2:	69db      	ldr	r3, [r3, #28]
200039a4:	60fb      	str	r3, [r7, #12]
}
200039a6:	46c0      	nop			; (mov r8, r8)
200039a8:	46bd      	mov	sp, r7
200039aa:	b004      	add	sp, #16
200039ac:	bd80      	pop	{r7, pc}

200039ae <GPIO_ReadInputDataBit>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
uint8_t GPIO_ReadInputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
200039ae:	b580      	push	{r7, lr}
200039b0:	b084      	sub	sp, #16
200039b2:	af00      	add	r7, sp, #0
200039b4:	6078      	str	r0, [r7, #4]
200039b6:	000a      	movs	r2, r1
200039b8:	1cbb      	adds	r3, r7, #2
200039ba:	801a      	strh	r2, [r3, #0]
  uint8_t bitstatus = 0x00;
200039bc:	230f      	movs	r3, #15
200039be:	18fb      	adds	r3, r7, r3
200039c0:	2200      	movs	r2, #0
200039c2:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
200039c4:	687b      	ldr	r3, [r7, #4]
200039c6:	691b      	ldr	r3, [r3, #16]
200039c8:	1cba      	adds	r2, r7, #2
200039ca:	8812      	ldrh	r2, [r2, #0]
200039cc:	4013      	ands	r3, r2
200039ce:	d004      	beq.n	200039da <GPIO_ReadInputDataBit+0x2c>
  {
    bitstatus = (uint8_t)Bit_SET;
200039d0:	230f      	movs	r3, #15
200039d2:	18fb      	adds	r3, r7, r3
200039d4:	2201      	movs	r2, #1
200039d6:	701a      	strb	r2, [r3, #0]
200039d8:	e003      	b.n	200039e2 <GPIO_ReadInputDataBit+0x34>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
200039da:	230f      	movs	r3, #15
200039dc:	18fb      	adds	r3, r7, r3
200039de:	2200      	movs	r2, #0
200039e0:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
200039e2:	230f      	movs	r3, #15
200039e4:	18fb      	adds	r3, r7, r3
200039e6:	781b      	ldrb	r3, [r3, #0]
}
200039e8:	0018      	movs	r0, r3
200039ea:	46bd      	mov	sp, r7
200039ec:	b004      	add	sp, #16
200039ee:	bd80      	pop	{r7, pc}

200039f0 <GPIO_ReadInputData>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F42xxx/43xxx devices.
  *                      x can be (A, B, C, D and H) to select the GPIO peripheral for STM32F401xx devices. 
  * @retval GPIO input data port value.
  */
uint16_t GPIO_ReadInputData(GPIO_TypeDef* GPIOx)
{
200039f0:	b580      	push	{r7, lr}
200039f2:	b082      	sub	sp, #8
200039f4:	af00      	add	r7, sp, #0
200039f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  return ((uint16_t)GPIOx->IDR);
200039f8:	687b      	ldr	r3, [r7, #4]
200039fa:	691b      	ldr	r3, [r3, #16]
200039fc:	b29b      	uxth	r3, r3
}
200039fe:	0018      	movs	r0, r3
20003a00:	46bd      	mov	sp, r7
20003a02:	b002      	add	sp, #8
20003a04:	bd80      	pop	{r7, pc}

20003a06 <GPIO_ReadOutputDataBit>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *          This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The output port pin value.
  */
uint8_t GPIO_ReadOutputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
20003a06:	b580      	push	{r7, lr}
20003a08:	b084      	sub	sp, #16
20003a0a:	af00      	add	r7, sp, #0
20003a0c:	6078      	str	r0, [r7, #4]
20003a0e:	000a      	movs	r2, r1
20003a10:	1cbb      	adds	r3, r7, #2
20003a12:	801a      	strh	r2, [r3, #0]
  uint8_t bitstatus = 0x00;
20003a14:	230f      	movs	r3, #15
20003a16:	18fb      	adds	r3, r7, r3
20003a18:	2200      	movs	r2, #0
20003a1a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if (((GPIOx->ODR) & GPIO_Pin) != (uint32_t)Bit_RESET)
20003a1c:	687b      	ldr	r3, [r7, #4]
20003a1e:	695b      	ldr	r3, [r3, #20]
20003a20:	1cba      	adds	r2, r7, #2
20003a22:	8812      	ldrh	r2, [r2, #0]
20003a24:	4013      	ands	r3, r2
20003a26:	d004      	beq.n	20003a32 <GPIO_ReadOutputDataBit+0x2c>
  {
    bitstatus = (uint8_t)Bit_SET;
20003a28:	230f      	movs	r3, #15
20003a2a:	18fb      	adds	r3, r7, r3
20003a2c:	2201      	movs	r2, #1
20003a2e:	701a      	strb	r2, [r3, #0]
20003a30:	e003      	b.n	20003a3a <GPIO_ReadOutputDataBit+0x34>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
20003a32:	230f      	movs	r3, #15
20003a34:	18fb      	adds	r3, r7, r3
20003a36:	2200      	movs	r2, #0
20003a38:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
20003a3a:	230f      	movs	r3, #15
20003a3c:	18fb      	adds	r3, r7, r3
20003a3e:	781b      	ldrb	r3, [r3, #0]
}
20003a40:	0018      	movs	r0, r3
20003a42:	46bd      	mov	sp, r7
20003a44:	b004      	add	sp, #16
20003a46:	bd80      	pop	{r7, pc}

20003a48 <GPIO_ReadOutputData>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F42xxx/43xxx devices.
  *                      x can be (A, B, C, D and H) to select the GPIO peripheral for STM32F401xx devices. 
  * @retval GPIO output data port value.
  */
uint16_t GPIO_ReadOutputData(GPIO_TypeDef* GPIOx)
{
20003a48:	b580      	push	{r7, lr}
20003a4a:	b082      	sub	sp, #8
20003a4c:	af00      	add	r7, sp, #0
20003a4e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  return ((uint16_t)GPIOx->ODR);
20003a50:	687b      	ldr	r3, [r7, #4]
20003a52:	695b      	ldr	r3, [r3, #20]
20003a54:	b29b      	uxth	r3, r3
}
20003a56:	0018      	movs	r0, r3
20003a58:	46bd      	mov	sp, r7
20003a5a:	b002      	add	sp, #8
20003a5c:	bd80      	pop	{r7, pc}

20003a5e <GPIO_SetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
20003a5e:	b580      	push	{r7, lr}
20003a60:	b082      	sub	sp, #8
20003a62:	af00      	add	r7, sp, #0
20003a64:	6078      	str	r0, [r7, #4]
20003a66:	000a      	movs	r2, r1
20003a68:	1cbb      	adds	r3, r7, #2
20003a6a:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRL = GPIO_Pin;
20003a6c:	687b      	ldr	r3, [r7, #4]
20003a6e:	1cba      	adds	r2, r7, #2
20003a70:	8812      	ldrh	r2, [r2, #0]
20003a72:	831a      	strh	r2, [r3, #24]
}
20003a74:	46c0      	nop			; (mov r8, r8)
20003a76:	46bd      	mov	sp, r7
20003a78:	b002      	add	sp, #8
20003a7a:	bd80      	pop	{r7, pc}

20003a7c <GPIO_ResetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
20003a7c:	b580      	push	{r7, lr}
20003a7e:	b082      	sub	sp, #8
20003a80:	af00      	add	r7, sp, #0
20003a82:	6078      	str	r0, [r7, #4]
20003a84:	000a      	movs	r2, r1
20003a86:	1cbb      	adds	r3, r7, #2
20003a88:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRH = GPIO_Pin;
20003a8a:	687b      	ldr	r3, [r7, #4]
20003a8c:	1cba      	adds	r2, r7, #2
20003a8e:	8812      	ldrh	r2, [r2, #0]
20003a90:	835a      	strh	r2, [r3, #26]
}
20003a92:	46c0      	nop			; (mov r8, r8)
20003a94:	46bd      	mov	sp, r7
20003a96:	b002      	add	sp, #8
20003a98:	bd80      	pop	{r7, pc}

20003a9a <GPIO_WriteBit>:
  *            @arg Bit_RESET: to clear the port pin
  *            @arg Bit_SET: to set the port pin
  * @retval None
  */
void GPIO_WriteBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, BitAction BitVal)
{
20003a9a:	b580      	push	{r7, lr}
20003a9c:	b082      	sub	sp, #8
20003a9e:	af00      	add	r7, sp, #0
20003aa0:	6078      	str	r0, [r7, #4]
20003aa2:	0008      	movs	r0, r1
20003aa4:	0011      	movs	r1, r2
20003aa6:	1cbb      	adds	r3, r7, #2
20003aa8:	1c02      	adds	r2, r0, #0
20003aaa:	801a      	strh	r2, [r3, #0]
20003aac:	1c7b      	adds	r3, r7, #1
20003aae:	1c0a      	adds	r2, r1, #0
20003ab0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal));

  if (BitVal != Bit_RESET)
20003ab2:	1c7b      	adds	r3, r7, #1
20003ab4:	781b      	ldrb	r3, [r3, #0]
20003ab6:	2b00      	cmp	r3, #0
20003ab8:	d004      	beq.n	20003ac4 <GPIO_WriteBit+0x2a>
  {
    GPIOx->BSRRL = GPIO_Pin;
20003aba:	687b      	ldr	r3, [r7, #4]
20003abc:	1cba      	adds	r2, r7, #2
20003abe:	8812      	ldrh	r2, [r2, #0]
20003ac0:	831a      	strh	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRRH = GPIO_Pin ;
  }
}
20003ac2:	e003      	b.n	20003acc <GPIO_WriteBit+0x32>
    GPIOx->BSRRH = GPIO_Pin ;
20003ac4:	687b      	ldr	r3, [r7, #4]
20003ac6:	1cba      	adds	r2, r7, #2
20003ac8:	8812      	ldrh	r2, [r2, #0]
20003aca:	835a      	strh	r2, [r3, #26]
}
20003acc:	46c0      	nop			; (mov r8, r8)
20003ace:	46bd      	mov	sp, r7
20003ad0:	b002      	add	sp, #8
20003ad2:	bd80      	pop	{r7, pc}

20003ad4 <GPIO_Write>:
  *                      x can be (A, B, C, D and H) to select the GPIO peripheral for STM32F401xx devices. 
  * @param  PortVal: specifies the value to be written to the port output data register.
  * @retval None
  */
void GPIO_Write(GPIO_TypeDef* GPIOx, uint16_t PortVal)
{
20003ad4:	b580      	push	{r7, lr}
20003ad6:	b082      	sub	sp, #8
20003ad8:	af00      	add	r7, sp, #0
20003ada:	6078      	str	r0, [r7, #4]
20003adc:	000a      	movs	r2, r1
20003ade:	1cbb      	adds	r3, r7, #2
20003ae0:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR = PortVal;
20003ae2:	1cbb      	adds	r3, r7, #2
20003ae4:	881a      	ldrh	r2, [r3, #0]
20003ae6:	687b      	ldr	r3, [r7, #4]
20003ae8:	615a      	str	r2, [r3, #20]
}
20003aea:	46c0      	nop			; (mov r8, r8)
20003aec:	46bd      	mov	sp, r7
20003aee:	b002      	add	sp, #8
20003af0:	bd80      	pop	{r7, pc}

20003af2 <GPIO_ToggleBits>:
  *                      x can be (A, B, C, D and H) to select the GPIO peripheral for STM32F401xx devices. 
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void GPIO_ToggleBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
20003af2:	b580      	push	{r7, lr}
20003af4:	b082      	sub	sp, #8
20003af6:	af00      	add	r7, sp, #0
20003af8:	6078      	str	r0, [r7, #4]
20003afa:	000a      	movs	r2, r1
20003afc:	1cbb      	adds	r3, r7, #2
20003afe:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR ^= GPIO_Pin;
20003b00:	687b      	ldr	r3, [r7, #4]
20003b02:	695a      	ldr	r2, [r3, #20]
20003b04:	1cbb      	adds	r3, r7, #2
20003b06:	881b      	ldrh	r3, [r3, #0]
20003b08:	405a      	eors	r2, r3
20003b0a:	687b      	ldr	r3, [r7, #4]
20003b0c:	615a      	str	r2, [r3, #20]
}
20003b0e:	46c0      	nop			; (mov r8, r8)
20003b10:	46bd      	mov	sp, r7
20003b12:	b002      	add	sp, #8
20003b14:	bd80      	pop	{r7, pc}

20003b16 <GPIO_PinAFConfig>:
  *            @arg GPIO_AF_LTDC: Connect LTDC pins to AF14 for STM32F429xx/439xx devices. 
  *            @arg GPIO_AF_EVENTOUT: Connect EVENTOUT pins to AF15
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
20003b16:	b580      	push	{r7, lr}
20003b18:	b084      	sub	sp, #16
20003b1a:	af00      	add	r7, sp, #0
20003b1c:	6078      	str	r0, [r7, #4]
20003b1e:	0008      	movs	r0, r1
20003b20:	0011      	movs	r1, r2
20003b22:	1cbb      	adds	r3, r7, #2
20003b24:	1c02      	adds	r2, r0, #0
20003b26:	801a      	strh	r2, [r3, #0]
20003b28:	1c7b      	adds	r3, r7, #1
20003b2a:	1c0a      	adds	r2, r1, #0
20003b2c:	701a      	strb	r2, [r3, #0]
  uint32_t temp = 0x00;
20003b2e:	2300      	movs	r3, #0
20003b30:	60fb      	str	r3, [r7, #12]
  uint32_t temp_2 = 0x00;
20003b32:	2300      	movs	r3, #0
20003b34:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
20003b36:	1c7b      	adds	r3, r7, #1
20003b38:	781a      	ldrb	r2, [r3, #0]
20003b3a:	1cbb      	adds	r3, r7, #2
20003b3c:	881b      	ldrh	r3, [r3, #0]
20003b3e:	2107      	movs	r1, #7
20003b40:	400b      	ands	r3, r1
20003b42:	009b      	lsls	r3, r3, #2
20003b44:	409a      	lsls	r2, r3
20003b46:	0013      	movs	r3, r2
20003b48:	60fb      	str	r3, [r7, #12]
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
20003b4a:	1cbb      	adds	r3, r7, #2
20003b4c:	881b      	ldrh	r3, [r3, #0]
20003b4e:	08db      	lsrs	r3, r3, #3
20003b50:	b29b      	uxth	r3, r3
20003b52:	001a      	movs	r2, r3
20003b54:	687b      	ldr	r3, [r7, #4]
20003b56:	3208      	adds	r2, #8
20003b58:	0092      	lsls	r2, r2, #2
20003b5a:	58d3      	ldr	r3, [r2, r3]
20003b5c:	1cba      	adds	r2, r7, #2
20003b5e:	8812      	ldrh	r2, [r2, #0]
20003b60:	2107      	movs	r1, #7
20003b62:	400a      	ands	r2, r1
20003b64:	0092      	lsls	r2, r2, #2
20003b66:	210f      	movs	r1, #15
20003b68:	4091      	lsls	r1, r2
20003b6a:	000a      	movs	r2, r1
20003b6c:	43d2      	mvns	r2, r2
20003b6e:	1cb9      	adds	r1, r7, #2
20003b70:	8809      	ldrh	r1, [r1, #0]
20003b72:	08c9      	lsrs	r1, r1, #3
20003b74:	b289      	uxth	r1, r1
20003b76:	0008      	movs	r0, r1
20003b78:	401a      	ands	r2, r3
20003b7a:	0011      	movs	r1, r2
20003b7c:	687b      	ldr	r3, [r7, #4]
20003b7e:	0002      	movs	r2, r0
20003b80:	3208      	adds	r2, #8
20003b82:	0092      	lsls	r2, r2, #2
20003b84:	50d1      	str	r1, [r2, r3]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
20003b86:	1cbb      	adds	r3, r7, #2
20003b88:	881b      	ldrh	r3, [r3, #0]
20003b8a:	08db      	lsrs	r3, r3, #3
20003b8c:	b29b      	uxth	r3, r3
20003b8e:	001a      	movs	r2, r3
20003b90:	687b      	ldr	r3, [r7, #4]
20003b92:	3208      	adds	r2, #8
20003b94:	0092      	lsls	r2, r2, #2
20003b96:	58d3      	ldr	r3, [r2, r3]
20003b98:	68fa      	ldr	r2, [r7, #12]
20003b9a:	4313      	orrs	r3, r2
20003b9c:	60bb      	str	r3, [r7, #8]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
20003b9e:	1cbb      	adds	r3, r7, #2
20003ba0:	881b      	ldrh	r3, [r3, #0]
20003ba2:	08db      	lsrs	r3, r3, #3
20003ba4:	b29b      	uxth	r3, r3
20003ba6:	001a      	movs	r2, r3
20003ba8:	687b      	ldr	r3, [r7, #4]
20003baa:	3208      	adds	r2, #8
20003bac:	0092      	lsls	r2, r2, #2
20003bae:	68b9      	ldr	r1, [r7, #8]
20003bb0:	50d1      	str	r1, [r2, r3]
}
20003bb2:	46c0      	nop			; (mov r8, r8)
20003bb4:	46bd      	mov	sp, r7
20003bb6:	b004      	add	sp, #16
20003bb8:	bd80      	pop	{r7, pc}
20003bba:	46c0      	nop			; (mov r8, r8)

20003bbc <__udivsi3>:
20003bbc:	2200      	movs	r2, #0
20003bbe:	0843      	lsrs	r3, r0, #1
20003bc0:	428b      	cmp	r3, r1
20003bc2:	d374      	bcc.n	20003cae <__udivsi3+0xf2>
20003bc4:	0903      	lsrs	r3, r0, #4
20003bc6:	428b      	cmp	r3, r1
20003bc8:	d35f      	bcc.n	20003c8a <__udivsi3+0xce>
20003bca:	0a03      	lsrs	r3, r0, #8
20003bcc:	428b      	cmp	r3, r1
20003bce:	d344      	bcc.n	20003c5a <__udivsi3+0x9e>
20003bd0:	0b03      	lsrs	r3, r0, #12
20003bd2:	428b      	cmp	r3, r1
20003bd4:	d328      	bcc.n	20003c28 <__udivsi3+0x6c>
20003bd6:	0c03      	lsrs	r3, r0, #16
20003bd8:	428b      	cmp	r3, r1
20003bda:	d30d      	bcc.n	20003bf8 <__udivsi3+0x3c>
20003bdc:	22ff      	movs	r2, #255	; 0xff
20003bde:	0209      	lsls	r1, r1, #8
20003be0:	ba12      	rev	r2, r2
20003be2:	0c03      	lsrs	r3, r0, #16
20003be4:	428b      	cmp	r3, r1
20003be6:	d302      	bcc.n	20003bee <__udivsi3+0x32>
20003be8:	1212      	asrs	r2, r2, #8
20003bea:	0209      	lsls	r1, r1, #8
20003bec:	d065      	beq.n	20003cba <__udivsi3+0xfe>
20003bee:	0b03      	lsrs	r3, r0, #12
20003bf0:	428b      	cmp	r3, r1
20003bf2:	d319      	bcc.n	20003c28 <__udivsi3+0x6c>
20003bf4:	e000      	b.n	20003bf8 <__udivsi3+0x3c>
20003bf6:	0a09      	lsrs	r1, r1, #8
20003bf8:	0bc3      	lsrs	r3, r0, #15
20003bfa:	428b      	cmp	r3, r1
20003bfc:	d301      	bcc.n	20003c02 <__udivsi3+0x46>
20003bfe:	03cb      	lsls	r3, r1, #15
20003c00:	1ac0      	subs	r0, r0, r3
20003c02:	4152      	adcs	r2, r2
20003c04:	0b83      	lsrs	r3, r0, #14
20003c06:	428b      	cmp	r3, r1
20003c08:	d301      	bcc.n	20003c0e <__udivsi3+0x52>
20003c0a:	038b      	lsls	r3, r1, #14
20003c0c:	1ac0      	subs	r0, r0, r3
20003c0e:	4152      	adcs	r2, r2
20003c10:	0b43      	lsrs	r3, r0, #13
20003c12:	428b      	cmp	r3, r1
20003c14:	d301      	bcc.n	20003c1a <__udivsi3+0x5e>
20003c16:	034b      	lsls	r3, r1, #13
20003c18:	1ac0      	subs	r0, r0, r3
20003c1a:	4152      	adcs	r2, r2
20003c1c:	0b03      	lsrs	r3, r0, #12
20003c1e:	428b      	cmp	r3, r1
20003c20:	d301      	bcc.n	20003c26 <__udivsi3+0x6a>
20003c22:	030b      	lsls	r3, r1, #12
20003c24:	1ac0      	subs	r0, r0, r3
20003c26:	4152      	adcs	r2, r2
20003c28:	0ac3      	lsrs	r3, r0, #11
20003c2a:	428b      	cmp	r3, r1
20003c2c:	d301      	bcc.n	20003c32 <__udivsi3+0x76>
20003c2e:	02cb      	lsls	r3, r1, #11
20003c30:	1ac0      	subs	r0, r0, r3
20003c32:	4152      	adcs	r2, r2
20003c34:	0a83      	lsrs	r3, r0, #10
20003c36:	428b      	cmp	r3, r1
20003c38:	d301      	bcc.n	20003c3e <__udivsi3+0x82>
20003c3a:	028b      	lsls	r3, r1, #10
20003c3c:	1ac0      	subs	r0, r0, r3
20003c3e:	4152      	adcs	r2, r2
20003c40:	0a43      	lsrs	r3, r0, #9
20003c42:	428b      	cmp	r3, r1
20003c44:	d301      	bcc.n	20003c4a <__udivsi3+0x8e>
20003c46:	024b      	lsls	r3, r1, #9
20003c48:	1ac0      	subs	r0, r0, r3
20003c4a:	4152      	adcs	r2, r2
20003c4c:	0a03      	lsrs	r3, r0, #8
20003c4e:	428b      	cmp	r3, r1
20003c50:	d301      	bcc.n	20003c56 <__udivsi3+0x9a>
20003c52:	020b      	lsls	r3, r1, #8
20003c54:	1ac0      	subs	r0, r0, r3
20003c56:	4152      	adcs	r2, r2
20003c58:	d2cd      	bcs.n	20003bf6 <__udivsi3+0x3a>
20003c5a:	09c3      	lsrs	r3, r0, #7
20003c5c:	428b      	cmp	r3, r1
20003c5e:	d301      	bcc.n	20003c64 <__udivsi3+0xa8>
20003c60:	01cb      	lsls	r3, r1, #7
20003c62:	1ac0      	subs	r0, r0, r3
20003c64:	4152      	adcs	r2, r2
20003c66:	0983      	lsrs	r3, r0, #6
20003c68:	428b      	cmp	r3, r1
20003c6a:	d301      	bcc.n	20003c70 <__udivsi3+0xb4>
20003c6c:	018b      	lsls	r3, r1, #6
20003c6e:	1ac0      	subs	r0, r0, r3
20003c70:	4152      	adcs	r2, r2
20003c72:	0943      	lsrs	r3, r0, #5
20003c74:	428b      	cmp	r3, r1
20003c76:	d301      	bcc.n	20003c7c <__udivsi3+0xc0>
20003c78:	014b      	lsls	r3, r1, #5
20003c7a:	1ac0      	subs	r0, r0, r3
20003c7c:	4152      	adcs	r2, r2
20003c7e:	0903      	lsrs	r3, r0, #4
20003c80:	428b      	cmp	r3, r1
20003c82:	d301      	bcc.n	20003c88 <__udivsi3+0xcc>
20003c84:	010b      	lsls	r3, r1, #4
20003c86:	1ac0      	subs	r0, r0, r3
20003c88:	4152      	adcs	r2, r2
20003c8a:	08c3      	lsrs	r3, r0, #3
20003c8c:	428b      	cmp	r3, r1
20003c8e:	d301      	bcc.n	20003c94 <__udivsi3+0xd8>
20003c90:	00cb      	lsls	r3, r1, #3
20003c92:	1ac0      	subs	r0, r0, r3
20003c94:	4152      	adcs	r2, r2
20003c96:	0883      	lsrs	r3, r0, #2
20003c98:	428b      	cmp	r3, r1
20003c9a:	d301      	bcc.n	20003ca0 <__udivsi3+0xe4>
20003c9c:	008b      	lsls	r3, r1, #2
20003c9e:	1ac0      	subs	r0, r0, r3
20003ca0:	4152      	adcs	r2, r2
20003ca2:	0843      	lsrs	r3, r0, #1
20003ca4:	428b      	cmp	r3, r1
20003ca6:	d301      	bcc.n	20003cac <__udivsi3+0xf0>
20003ca8:	004b      	lsls	r3, r1, #1
20003caa:	1ac0      	subs	r0, r0, r3
20003cac:	4152      	adcs	r2, r2
20003cae:	1a41      	subs	r1, r0, r1
20003cb0:	d200      	bcs.n	20003cb4 <__udivsi3+0xf8>
20003cb2:	4601      	mov	r1, r0
20003cb4:	4152      	adcs	r2, r2
20003cb6:	4610      	mov	r0, r2
20003cb8:	4770      	bx	lr
20003cba:	e7ff      	b.n	20003cbc <__udivsi3+0x100>
20003cbc:	b501      	push	{r0, lr}
20003cbe:	2000      	movs	r0, #0
20003cc0:	f000 f806 	bl	20003cd0 <__aeabi_idiv0>
20003cc4:	bd02      	pop	{r1, pc}
20003cc6:	46c0      	nop			; (mov r8, r8)

20003cc8 <__aeabi_uidivmod>:
20003cc8:	2900      	cmp	r1, #0
20003cca:	d0f7      	beq.n	20003cbc <__udivsi3+0x100>
20003ccc:	e776      	b.n	20003bbc <__udivsi3>
20003cce:	4770      	bx	lr

20003cd0 <__aeabi_idiv0>:
20003cd0:	4770      	bx	lr
20003cd2:	46c0      	nop			; (mov r8, r8)

20003cd4 <memset>:
20003cd4:	0003      	movs	r3, r0
20003cd6:	1812      	adds	r2, r2, r0
20003cd8:	4293      	cmp	r3, r2
20003cda:	d100      	bne.n	20003cde <memset+0xa>
20003cdc:	4770      	bx	lr
20003cde:	7019      	strb	r1, [r3, #0]
20003ce0:	3301      	adds	r3, #1
20003ce2:	e7f9      	b.n	20003cd8 <memset+0x4>

20003ce4 <id>:
20003ce4:	00000000 	andeq	r0, r0, r0

20003ce8 <msTicks>:
20003ce8:	00000000 	andeq	r0, r0, r0

20003cec <SessionID>:
20003cec:	00000000 	andeq	r0, r0, r0

20003cf0 <handlerList>:
	...

20003dd0 <SessionIDActive>:
20003dd0:	00000000 	andeq	r0, r0, r0

20003dd4 <APBAHBPrescTable>:
20003dd4:	00000000 	andeq	r0, r0, r0
20003dd8:	04030201 	streq	r0, [r3], #-513	; 0xfffffdff
20003ddc:	04030201 	streq	r0, [r3], #-513	; 0xfffffdff
20003de0:	09080706 	stmdbeq	r8, {r1, r2, r8, r9, sl}

20003de4 <nocid>:
20003de4:	00000001 	andeq	r0, r0, r1

20003de8 <GPIO_Pins>:
20003de8:	00020001 	andeq	r0, r2, r1
20003dec:	00080004 	andeq	r0, r8, r4
20003df0:	00200010 	eoreq	r0, r0, r0, lsl r0
20003df4:	00800040 	addeq	r0, r0, r0, asr #32
20003df8:	02000100 	andeq	r0, r0, #0, 2
20003dfc:	08000400 	stmdaeq	r0, {sl}
20003e00:	20001000 	andcs	r1, r0, r0
20003e04:	80004000 	andhi	r4, r0, r0

20003e08 <GPIO_Ports>:
20003e08:	40021000 	andmi	r1, r2, r0
20003e0c:	40020000 	andmi	r0, r2, r0
20003e10:	40020c00 	andmi	r0, r2, r0, lsl #24
20003e14:	40020800 	andmi	r0, r2, r0, lsl #16

Disassembly of section .debug_info:

00000000 <.debug_info>:
       0:	000010dc 	ldrdeq	r1, [r0], -ip
       4:	00000004 	andeq	r0, r0, r4
       8:	01040000 	mrseq	r0, (UNDEF: 4)
       c:	000004b3 			; <UNDEFINED> instruction: 0x000004b3
      10:	0007c60c 	andeq	ip, r7, ip, lsl #12
      14:	00043c00 	andeq	r3, r4, r0, lsl #24
      18:	00001000 	andeq	r1, r0, r0
      1c:	00078820 	andeq	r8, r7, r0, lsr #16
      20:	00000000 	andeq	r0, r0, r0
      24:	0c240200 	sfmeq	f0, 4, [r4], #-0
      28:	01050000 	mrseq	r0, (UNDEF: 5)
      2c:	00000253 	andeq	r0, r0, r3, asr r2
      30:	0253c803 	subseq	ip, r3, #196608	; 0x30000
      34:	1f030000 	svcne	0x00030000
      38:	72000006 	andvc	r0, r0, #6
      3c:	00064e03 	andeq	r4, r6, r3, lsl #28
      40:	e3037400 	movw	r7, #13312	; 0x3400
      44:	75000006 	strvc	r0, [r0, #-6]
      48:	00038503 	andeq	r8, r3, r3, lsl #10
      4c:	99037600 	stmdbls	r3, {r9, sl, ip, sp, lr}
      50:	7b000007 	blvc	74 <startup-0x1fffff8c>
      54:	000b1103 	andeq	r1, fp, r3, lsl #2
      58:	ee037c00 	cdp	12, 0, cr7, cr3, cr0, {0}
      5c:	7e00000c 	cdpvc	0, 0, cr0, cr0, cr12, {0}
      60:	00024103 	andeq	r4, r2, r3, lsl #2
      64:	33047f00 	movwcc	r7, #20224	; 0x4f00
      68:	00000006 	andeq	r0, r0, r6
      6c:	000a9b04 	andeq	r9, sl, r4, lsl #22
      70:	74040100 	strvc	r0, [r4], #-256	; 0xffffff00
      74:	02000006 	andeq	r0, r0, #6
      78:	00000904 	andeq	r0, r0, r4, lsl #18
      7c:	bf040300 	svclt	0x00040300
      80:	04000000 	streq	r0, [r0], #-0
      84:	000b9004 	andeq	r9, fp, r4
      88:	cb040500 	blgt	101490 <startup-0x1fefeb70>
      8c:	0600000a 	streq	r0, [r0], -sl
      90:	0005bf04 	andeq	fp, r5, r4, lsl #30
      94:	17040700 	strne	r0, [r4, -r0, lsl #14]
      98:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
      9c:	000ce304 	andeq	lr, ip, r4, lsl #6
      a0:	3c040900 			; <UNDEFINED> instruction: 0x3c040900
      a4:	0a000008 	beq	cc <startup-0x1fffff34>
      a8:	00097e04 	andeq	r7, r9, r4, lsl #28
      ac:	9d040b00 	vstrls	d0, [r4, #-0]
      b0:	0c000008 	stceq	0, cr0, [r0], {8}
      b4:	0002ab04 	andeq	sl, r2, r4, lsl #22
      b8:	a4040d00 	strge	r0, [r4], #-3328	; 0xfffff300
      bc:	0e00000b 	cdpeq	0, 0, cr0, cr0, cr11, {0}
      c0:	000adb04 	andeq	sp, sl, r4, lsl #22
      c4:	d7040f00 	strle	r0, [r4, -r0, lsl #30]
      c8:	10000005 	andne	r0, r0, r5
      cc:	00002204 	andeq	r2, r0, r4, lsl #4
      d0:	6b041100 	blvs	1044d8 <startup-0x1fefbb28>
      d4:	1200000a 	andne	r0, r0, #10
      d8:	0005ca04 	andeq	ip, r5, r4, lsl #20
      dc:	19041300 	stmdbne	r4, {r8, r9, ip}
      e0:	14000004 	strne	r0, [r0], #-4
      e4:	000c7504 	andeq	r7, ip, r4, lsl #10
      e8:	84041500 	strhi	r1, [r4], #-1280	; 0xfffffb00
      ec:	16000006 	strne	r0, [r0], -r6
      f0:	000c9004 	andeq	r9, ip, r4
      f4:	fc041700 	stc2	7, cr1, [r4], {-0}
      f8:	18000006 	stmdane	r0, {r1, r2}
      fc:	000c1604 	andeq	r1, ip, r4, lsl #12
     100:	07041900 	streq	r1, [r4, -r0, lsl #18]
     104:	1a000002 	bne	114 <startup-0x1ffffeec>
     108:	0005a404 	andeq	sl, r5, r4, lsl #8
     10c:	16041b00 	strne	r1, [r4], -r0, lsl #22
     110:	1c000001 	stcne	0, cr0, [r0], {1}
     114:	0009ff04 	andeq	pc, r9, r4, lsl #30
     118:	a9041d00 	stmdbge	r4, {r8, sl, fp, ip}
     11c:	1e000004 	cdpne	0, 0, cr0, cr0, cr4, {0}
     120:	00055f04 	andeq	r5, r5, r4, lsl #30
     124:	1d041f00 	stcne	15, cr1, [r4, #-0]
     128:	20000003 	andcs	r0, r0, r3
     12c:	00086004 	andeq	r6, r8, r4
     130:	c0042100 	andgt	r2, r4, r0, lsl #2
     134:	22000006 	andcs	r0, r0, #6
     138:	00077704 	andeq	r7, r7, r4, lsl #14
     13c:	80042300 	andhi	r2, r4, r0, lsl #6
     140:	24000001 	strcs	r0, [r0], #-1
     144:	000a0904 	andeq	r0, sl, r4, lsl #18
     148:	b6042500 	strlt	r2, [r4], -r0, lsl #10
     14c:	2600000b 	strcs	r0, [r0], -fp
     150:	00024e04 	andeq	r4, r2, r4, lsl #28
     154:	d9042700 	stmdble	r4, {r8, r9, sl, sp}
     158:	28000009 	stmdacs	r0, {r0, r3}
     15c:	00099004 	andeq	r9, r9, r4
     160:	2b042900 	blcs	10a568 <startup-0x1fef5a98>
     164:	2a000008 	bcs	18c <startup-0x1ffffe74>
     168:	00018a04 	andeq	r8, r1, r4, lsl #20
     16c:	34042b00 	strcc	r2, [r4], #-2816	; 0xfffff500
     170:	2c000000 	stccs	0, cr0, [r0], {-0}
     174:	0005e904 	andeq	lr, r5, r4, lsl #18
     178:	c1042d00 	tstgt	r4, r0, lsl #26
     17c:	2e00000c 	cdpcs	0, 0, cr0, cr0, cr12, {0}
     180:	000d1804 	andeq	r1, sp, r4, lsl #16
     184:	c1042f00 	tstgt	r4, r0, lsl #30
     188:	3000000a 	andcc	r0, r0, sl
     18c:	000cce04 	andeq	ip, ip, r4, lsl #28
     190:	7b043100 	blvc	10c598 <startup-0x1fef3a68>
     194:	32000003 	andcc	r0, r0, #3
     198:	0000b504 	andeq	fp, r0, r4, lsl #10
     19c:	17043300 	strne	r3, [r4, -r0, lsl #6]
     1a0:	34000008 	strcc	r0, [r0], #-8
     1a4:	0006f104 	andeq	pc, r6, r4, lsl #2
     1a8:	47043500 	strmi	r3, [r4, -r0, lsl #10]
     1ac:	36000008 	strcc	r0, [r0], -r8
     1b0:	00073704 	andeq	r3, r7, r4, lsl #14
     1b4:	a9043700 	stmdbge	r4, {r8, r9, sl, ip, sp}
     1b8:	38000006 	stmdacc	r0, {r1, r2}
     1bc:	00008d04 	andeq	r8, r0, r4, lsl #26
     1c0:	6f043900 	svcvs	0x00043900
     1c4:	3a00000d 	bcc	200 <startup-0x1ffffe00>
     1c8:	0008af04 	andeq	sl, r8, r4, lsl #30
     1cc:	df043b00 	svcle	0x00043b00
     1d0:	3c000002 	stccc	0, cr0, [r0], {2}
     1d4:	000b5e04 	andeq	r5, fp, r4, lsl #28
     1d8:	4f043d00 	svcmi	0x00043d00
     1dc:	3e000007 	cdpcc	0, 0, cr0, cr0, cr7, {0}
     1e0:	0008c104 	andeq	ip, r8, r4, lsl #2
     1e4:	4c043f00 	stcmi	15, cr3, [r4], {-0}
     1e8:	40000001 	andmi	r0, r0, r1
     1ec:	000a5d04 	andeq	r5, sl, r4, lsl #26
     1f0:	4c044100 	stfmis	f4, [r4], {-0}
     1f4:	42000003 	andmi	r0, r0, #3
     1f8:	00061304 	andeq	r1, r6, r4, lsl #6
     1fc:	e8044300 	stmda	r4, {r8, r9, lr}
     200:	44000001 	strmi	r0, [r0], #-1
     204:	000aed04 	andeq	lr, sl, r4, lsl #26
     208:	01044500 	tsteq	r4, r0, lsl #10
     20c:	46000006 	strmi	r0, [r0], -r6
     210:	00015a04 	andeq	r5, r1, r4, lsl #20
     214:	31044700 	tstcc	r4, r0, lsl #14
     218:	4800000b 	stmdami	r0, {r0, r1, r3}
     21c:	0009c204 	andeq	ip, r9, r4, lsl #4
     220:	4a044900 	bmi	112628 <startup-0x1feed9d8>
     224:	4a00000c 	bmi	25c <startup-0x1ffffda4>
     228:	000cfa04 	andeq	pc, ip, r4, lsl #20
     22c:	3d044b00 	vstrcc	d4, [r4, #-0]
     230:	4c000006 	stcmi	0, cr0, [r0], {6}
     234:	00075d04 	andeq	r5, r7, r4, lsl #26
     238:	e2044d00 	and	r4, r4, #0, 26
     23c:	4e000000 	cdpmi	0, 0, cr0, cr0, cr0, {0}
     240:	0009cf04 	andeq	ip, r9, r4, lsl #30
     244:	b1044f00 	tstlt	r4, r0, lsl #30
     248:	50000005 	andpl	r0, r0, r5
     24c:	00080e04 	andeq	r0, r8, r4, lsl #28
     250:	05005100 	streq	r5, [r0, #-256]	; 0xffffff00
     254:	02d30601 	sbcseq	r0, r3, #1048576	; 0x100000
     258:	92060000 	andls	r0, r6, #0
     25c:	03000006 	movweq	r0, #6
     260:	0025032f 	eoreq	r0, r5, pc, lsr #6
     264:	76070000 	strvc	r0, [r7], -r0
     268:	04000001 	streq	r0, [r0], #-1
     26c:	0002712b 	andeq	r7, r2, fp, lsr #2
     270:	08010500 	stmdaeq	r1, {r8, sl}
     274:	000002d1 	ldrdeq	r0, [r0], -r1
     278:	86050205 	strhi	r0, [r5], -r5, lsl #4
     27c:	0700000b 	streq	r0, [r0, -fp]
     280:	000003ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
     284:	028a3904 	addeq	r3, sl, #4, 18	; 0x10000
     288:	02050000 	andeq	r0, r5, #0
     28c:	000cae07 	andeq	sl, ip, r7, lsl #28
     290:	0d2a0700 	stceq	7, cr0, [sl, #-0]
     294:	4d040000 	stcmi	0, cr0, [r4, #-0]
     298:	0000029c 	muleq	r0, ip, r2
     29c:	46050405 	strmi	r0, [r5], -r5, lsl #8
     2a0:	07000007 	streq	r0, [r0, -r7]
     2a4:	0000071a 	andeq	r0, r0, sl, lsl r7
     2a8:	02ae4f04 	adceq	r4, lr, #4, 30
     2ac:	04050000 	streq	r0, [r5], #-0
     2b0:	0009ed07 	andeq	lr, r9, r7, lsl #26
     2b4:	05080500 	streq	r0, [r8, #-1280]	; 0xfffffb00
     2b8:	00000741 	andeq	r0, r0, r1, asr #14
     2bc:	e8070805 	stmda	r7, {r0, r2, fp}
     2c0:	08000009 	stmdaeq	r0, {r0, r3}
     2c4:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
     2c8:	04050074 	streq	r0, [r5], #-116	; 0xffffff8c
     2cc:	0009f207 	andeq	pc, r9, r7, lsl #4
     2d0:	01780700 	cmneq	r8, r0, lsl #14
     2d4:	18050000 	stmdane	r5, {}	; <UNPREDICTABLE>
     2d8:	00000266 	andeq	r0, r0, r6, ror #4
     2dc:	0002d109 	andeq	sp, r2, r9, lsl #2
     2e0:	04010700 	streq	r0, [r1], #-1792	; 0xfffff900
     2e4:	24050000 	strcs	r0, [r5], #-0
     2e8:	0000027f 	andeq	r0, r0, pc, ror r2
     2ec:	0002e109 	andeq	lr, r2, r9, lsl #2
     2f0:	0d2c0700 	stceq	7, cr0, [ip, #-0]
     2f4:	2c050000 	stccs	0, cr0, [r5], {-0}
     2f8:	00000291 	muleq	r0, r1, r2
     2fc:	0002f109 	andeq	pc, r2, r9, lsl #2
     300:	071c0700 	ldreq	r0, [ip, -r0, lsl #14]
     304:	30050000 	andcc	r0, r5, r0
     308:	000002a3 	andeq	r0, r0, r3, lsr #5
     30c:	00030109 	andeq	r0, r3, r9, lsl #2
     310:	030c0a00 	movweq	r0, #51712	; 0xca00
     314:	040b0000 	streq	r0, [fp], #-0
     318:	01a0010e 	lsleq	r0, lr, #2
     31c:	000003d2 	ldrdeq	r0, [r0], -r2
     320:	000d340c 	andeq	r3, sp, ip, lsl #8
     324:	01a20100 			; <UNDEFINED> instruction: 0x01a20100
     328:	000003e2 	andeq	r0, r0, r2, ror #7
     32c:	02bd0c00 	adcseq	r0, sp, #0, 24
     330:	a3010000 	movwge	r0, #4096	; 0x1000
     334:	0003e701 	andeq	lr, r3, r1, lsl #14
     338:	850c2000 	strhi	r2, [ip, #-0]
     33c:	0100000a 	tsteq	r0, sl
     340:	03e201a4 	mvneq	r0, #164, 2	; 0x29
     344:	0c800000 	stceq	0, cr0, [r0], {0}
     348:	00000000 	andeq	r0, r0, r0
     34c:	e701a501 	str	sl, [r1, -r1, lsl #10]
     350:	a0000003 	andge	r0, r0, r3
     354:	000cde0d 	andeq	sp, ip, sp, lsl #28
     358:	01a60100 			; <UNDEFINED> instruction: 0x01a60100
     35c:	000003e2 	andeq	r0, r0, r2, ror #7
     360:	670d0100 	strvs	r0, [sp, -r0, lsl #2]
     364:	01000003 	tsteq	r0, r3
     368:	03e701a7 	mvneq	r0, #-1073741783	; 0xc0000029
     36c:	01200000 			; <UNDEFINED> instruction: 0x01200000
     370:	00012a0d 	andeq	r2, r1, sp, lsl #20
     374:	01a80100 			; <UNDEFINED> instruction: 0x01a80100
     378:	000003e2 	andeq	r0, r0, r2, ror #7
     37c:	710d0180 	smlabbvc	sp, r0, r1, r0
     380:	01000003 	tsteq	r0, r3
     384:	03e701a9 	mvneq	r0, #1073741866	; 0x4000002a
     388:	01a00000 	moveq	r0, r0
     38c:	00030a0d 	andeq	r0, r3, sp, lsl #20
     390:	01aa0100 			; <UNDEFINED> instruction: 0x01aa0100
     394:	000003e2 	andeq	r0, r0, r2, ror #7
     398:	f10d0200 			; <UNDEFINED> instruction: 0xf10d0200
     39c:	01000002 	tsteq	r0, r2
     3a0:	03f701ab 	mvnseq	r0, #-1073741782	; 0xc000002a
     3a4:	02200000 	eoreq	r0, r0, #0
     3a8:	0050490e 	subseq	r4, r0, lr, lsl #18
     3ac:	1701ac01 	strne	sl, [r1, -r1, lsl #24]
     3b0:	00000004 	andeq	r0, r0, r4
     3b4:	02fb0d03 	rscseq	r0, fp, #3, 26	; 0xc0
     3b8:	ad010000 	stcge	0, cr0, [r1, #-0]
     3bc:	00041c01 	andeq	r1, r4, r1, lsl #24
     3c0:	0d03f000 	stceq	0, cr15, [r3, #-0]
     3c4:	0000055a 	andeq	r0, r0, sl, asr r5
     3c8:	0c01ae01 	stceq	14, cr10, [r1], {1}
     3cc:	00000003 	andeq	r0, r0, r3
     3d0:	0c0f000e 	stceq	0, cr0, [pc], {14}
     3d4:	e2000003 	and	r0, r0, #3
     3d8:	10000003 	andne	r0, r0, r3
     3dc:	000002ca 	andeq	r0, r0, sl, asr #5
     3e0:	d2090007 	andle	r0, r9, #7
     3e4:	0f000003 	svceq	0x00000003
     3e8:	00000301 	andeq	r0, r0, r1, lsl #6
     3ec:	000003f7 	strdeq	r0, [r0], -r7
     3f0:	0002ca10 	andeq	ip, r2, r0, lsl sl
     3f4:	0f001700 	svceq	0x00001700
     3f8:	00000301 	andeq	r0, r0, r1, lsl #6
     3fc:	00000407 	andeq	r0, r0, r7, lsl #8
     400:	0002ca10 	andeq	ip, r2, r0, lsl sl
     404:	0f003700 	svceq	0x00003700
     408:	000002dc 	ldrdeq	r0, [r0], -ip
     40c:	00000417 	andeq	r0, r0, r7, lsl r4
     410:	0002ca10 	andeq	ip, r2, r0, lsl sl
     414:	0900ef00 	stmdbeq	r0, {r8, r9, sl, fp, sp, lr, pc}
     418:	00000407 	andeq	r0, r0, r7, lsl #8
     41c:	0003010f 	andeq	r0, r3, pc, lsl #2
     420:	00042d00 	andeq	r2, r4, r0, lsl #26
     424:	02ca1100 	sbceq	r1, sl, #0, 2
     428:	02830000 	addeq	r0, r3, #0
     42c:	09a80600 	stmibeq	r8!, {r9, sl}
     430:	af010000 	svcge	0x00010000
     434:	00031601 	andeq	r1, r3, r1, lsl #12
     438:	018c1200 	orreq	r1, ip, r0, lsl #4
     43c:	055401c0 	ldrbeq	r0, [r4, #-448]	; 0xfffffe40
     440:	e20c0000 	and	r0, ip, #0
     444:	01000001 	tsteq	r0, r1
     448:	031101c2 	tsteq	r1, #-2147483600	; 0x80000030
     44c:	0c000000 	stceq	0, cr0, [r0], {-0}
     450:	0000025a 	andeq	r0, r0, sl, asr r2
     454:	0c01c301 	stceq	3, cr12, [r1], {1}
     458:	04000003 	streq	r0, [r0], #-3
     45c:	0000b00c 	andeq	fp, r0, ip
     460:	01c40100 	biceq	r0, r4, r0, lsl #2
     464:	0000030c 	andeq	r0, r0, ip, lsl #6
     468:	01d00c08 	bicseq	r0, r0, r8, lsl #24
     46c:	c5010000 	strgt	r0, [r1, #-0]
     470:	00030c01 	andeq	r0, r3, r1, lsl #24
     474:	53130c00 	tstpl	r3, #0, 24
     478:	01005243 	tsteq	r0, r3, asr #4
     47c:	030c01c6 	movweq	r0, #49606	; 0xc1c6
     480:	13100000 	tstne	r0, #0
     484:	00524343 	subseq	r4, r2, r3, asr #6
     488:	0c01c701 	stceq	7, cr12, [r1], {1}
     48c:	14000003 	strne	r0, [r0], #-3
     490:	50485313 	subpl	r5, r8, r3, lsl r3
     494:	01c80100 	biceq	r0, r8, r0, lsl #2
     498:	00000564 	andeq	r0, r0, r4, ror #10
     49c:	05540c18 	ldrbeq	r0, [r4, #-3096]	; 0xfffff3e8
     4a0:	c9010000 	stmdbgt	r1, {}	; <UNPREDICTABLE>
     4a4:	00030c01 	andeq	r0, r3, r1, lsl #24
     4a8:	d60c2400 	strle	r2, [ip], -r0, lsl #8
     4ac:	0100000a 	tsteq	r0, sl
     4b0:	030c01ca 	movweq	r0, #49610	; 0xc1ca
     4b4:	0c280000 	stceq	0, cr0, [r8], #-0
     4b8:	0000047f 	andeq	r0, r0, pc, ror r4
     4bc:	0c01cb01 			; <UNDEFINED> instruction: 0x0c01cb01
     4c0:	2c000003 	stccs	0, cr0, [r0], {3}
     4c4:	0003bf0c 	andeq	fp, r3, ip, lsl #30
     4c8:	01cc0100 	biceq	r0, ip, r0, lsl #2
     4cc:	0000030c 	andeq	r0, r0, ip, lsl #6
     4d0:	0b800c30 	bleq	fe003598 <GPIO_Ports+0xddfff790>
     4d4:	cd010000 	stcgt	0, cr0, [r1, #-0]
     4d8:	00030c01 	andeq	r0, r3, r1, lsl #24
     4dc:	7c0c3400 	cfstrsvc	mvf3, [ip], {-0}
     4e0:	01000008 	tsteq	r0, r8
     4e4:	030c01ce 	movweq	r0, #49614	; 0xc1ce
     4e8:	0c380000 	ldceq	0, cr0, [r8], #-0
     4ec:	00000aa4 	andeq	r0, r0, r4, lsr #21
     4f0:	0c01cf01 	stceq	15, cr12, [r1], {1}
     4f4:	3c000003 	stccc	0, cr0, [r0], {3}
     4f8:	52465013 	subpl	r5, r6, #19
     4fc:	01d00100 	bicseq	r0, r0, r0, lsl #2
     500:	0000057e 	andeq	r0, r0, lr, ror r5
     504:	46441340 	strbmi	r1, [r4], -r0, asr #6
     508:	d1010052 	qaddle	r0, r2, r1
     50c:	00031101 	andeq	r1, r3, r1, lsl #2
     510:	41134800 	tstmi	r3, r0, lsl #16
     514:	01005244 	tsteq	r0, r4, asr #4
     518:	031101d2 	tsteq	r1, #-2147483596	; 0x80000034
     51c:	0c4c0000 	mareq	acc0, r0, ip
     520:	00000b7b 	andeq	r0, r0, fp, ror fp
     524:	9801d301 	stmdals	r1, {r0, r8, r9, ip, lr, pc}
     528:	50000005 	andpl	r0, r0, r5
     52c:	000b9f0c 	andeq	r9, fp, ip, lsl #30
     530:	01d40100 	bicseq	r0, r4, r0, lsl #2
     534:	000005b2 			; <UNDEFINED> instruction: 0x000005b2
     538:	02bd0c60 	adcseq	r0, sp, #96, 24	; 0x6000
     53c:	d5010000 	strle	r0, [r1, #-0]
     540:	0005b701 	andeq	fp, r5, r1, lsl #14
     544:	d80c7400 	stmdale	ip, {sl, ip, sp, lr}
     548:	0100000c 	tsteq	r0, ip
     54c:	030c01d6 	movweq	r0, #49622	; 0xc1d6
     550:	00880000 	addeq	r0, r8, r0
     554:	0002dc0f 	andeq	sp, r2, pc, lsl #24
     558:	00056400 	andeq	r6, r5, r0, lsl #8
     55c:	02ca1000 	sbceq	r1, sl, #0
     560:	000b0000 	andeq	r0, fp, r0
     564:	00055409 	andeq	r5, r5, r9, lsl #8
     568:	03110f00 	tsteq	r1, #0, 30
     56c:	05790000 	ldrbeq	r0, [r9, #-0]!
     570:	ca100000 	bgt	400578 <startup-0x1fbffa88>
     574:	01000002 	tsteq	r0, r2
     578:	05690a00 	strbeq	r0, [r9, #-2560]!	; 0xfffff600
     57c:	79090000 	stmdbvc	r9, {}	; <UNPREDICTABLE>
     580:	0f000005 	svceq	0x00000005
     584:	00000311 	andeq	r0, r0, r1, lsl r3
     588:	00000593 	muleq	r0, r3, r5
     58c:	0002ca10 	andeq	ip, r2, r0, lsl sl
     590:	0a000300 	beq	1198 <startup-0x1fffee68>
     594:	00000583 	andeq	r0, r0, r3, lsl #11
     598:	00059309 	andeq	r9, r5, r9, lsl #6
     59c:	03110f00 	tsteq	r1, #0, 30
     5a0:	05ad0000 	streq	r0, [sp, #0]!
     5a4:	ca100000 	bgt	4005ac <startup-0x1fbffa54>
     5a8:	04000002 	streq	r0, [r0], #-2
     5ac:	059d0a00 	ldreq	r0, [sp, #2560]	; 0xa00
     5b0:	ad090000 	stcge	0, cr0, [r9, #-0]
     5b4:	0f000005 	svceq	0x00000005
     5b8:	00000301 	andeq	r0, r0, r1, lsl #6
     5bc:	000005c7 	andeq	r0, r0, r7, asr #11
     5c0:	0002ca10 	andeq	ip, r2, r0, lsl sl
     5c4:	06000400 	streq	r0, [r0], -r0, lsl #8
     5c8:	000003a5 	andeq	r0, r0, r5, lsr #7
     5cc:	3901d701 	stmdbcc	r1, {r0, r8, r9, sl, ip, lr, pc}
     5d0:	0f000004 	svceq	0x00000004
     5d4:	00000301 	andeq	r0, r0, r1, lsl #6
     5d8:	000005e3 	andeq	r0, r0, r3, ror #11
     5dc:	0002ca10 	andeq	ip, r2, r0, lsl sl
     5e0:	14000700 	strne	r0, [r0], #-1792	; 0xfffff900
     5e4:	00000c29 	andeq	r0, r0, r9, lsr #24
     5e8:	fc06fa01 	stc2	10, cr15, [r6], {1}	; <UNPREDICTABLE>
     5ec:	15000002 	strne	r0, [r0, #-2]
     5f0:	00000664 	andeq	r0, r0, r4, ror #12
     5f4:	03013b06 	movweq	r3, #6918	; 0x1b06
     5f8:	07160000 	ldreq	r0, [r6, -r0]
     5fc:	00027101 	andeq	r7, r2, r1, lsl #2
     600:	035f0300 	cmpeq	pc, #0, 6
     604:	00000615 	andeq	r0, r0, r5, lsl r6
     608:	00092f04 	andeq	r2, r9, r4, lsl #30
     60c:	c8040000 	stmdagt	r4, {}	; <UNPREDICTABLE>
     610:	0100000b 	tsteq	r0, fp
     614:	09b20600 	ldmibeq	r2!, {r9, sl}
     618:	5f030000 	svcpl	0x00030000
     61c:	0005fa03 	andeq	pc, r5, r3, lsl #20
     620:	03101200 	tsteq	r0, #0, 4
     624:	065f0395 			; <UNDEFINED> instruction: 0x065f0395
     628:	54130000 	ldrpl	r0, [r3], #-0
     62c:	03005249 	movweq	r5, #585	; 0x249
     630:	030c0397 	movweq	r0, #50071	; 0xc397
     634:	0c000000 	stceq	0, cr0, [r0], {-0}
     638:	00000d5d 	andeq	r0, r0, sp, asr sp
     63c:	0c039803 	stceq	8, cr9, [r3], {3}
     640:	04000003 	streq	r0, [r0], #-3
     644:	000a580c 	andeq	r5, sl, ip, lsl #16
     648:	03990300 	orrseq	r0, r9, #0, 6
     64c:	0000030c 	andeq	r0, r0, ip, lsl #6
     650:	08770c08 	ldmdaeq	r7!, {r3, sl, fp}^
     654:	9a030000 	bls	c065c <startup-0x1ff3f9a4>
     658:	00030c03 	andeq	r0, r3, r3, lsl #24
     65c:	06000c00 	streq	r0, [r0], -r0, lsl #24
     660:	00000b3e 	andeq	r0, r0, lr, lsr fp
     664:	21039b03 	tstcs	r3, r3, lsl #22
     668:	12000006 	andne	r0, r0, #6
     66c:	03a10310 			; <UNDEFINED> instruction: 0x03a10310
     670:	000006a9 	andeq	r0, r0, r9, lsr #13
     674:	52495213 	subpl	r5, r9, #805306369	; 0x30000001
     678:	03a30300 			; <UNDEFINED> instruction: 0x03a30300
     67c:	0000030c 	andeq	r0, r0, ip, lsl #6
     680:	0d4f0c00 	stcleq	12, cr0, [pc, #-0]	; 688 <startup-0x1ffff978>
     684:	a4030000 	strge	r0, [r3], #-0
     688:	00030c03 	andeq	r0, r3, r3, lsl #24
     68c:	1e0c0400 	cfcpysne	mvf0, mvf12
     690:	0300000a 	movweq	r0, #10
     694:	030c03a5 	movweq	r0, #50085	; 0xc3a5
     698:	0c080000 	stceq	0, cr0, [r8], {-0}
     69c:	00000872 	andeq	r0, r0, r2, ror r8
     6a0:	0c03a603 	stceq	6, cr10, [r3], {3}
     6a4:	0c000003 	stceq	0, cr0, [r0], {3}
     6a8:	0a230600 	beq	8c1eb0 <startup-0x1f73e150>
     6ac:	a7030000 	strge	r0, [r3, -r0]
     6b0:	00066b03 	andeq	r6, r6, r3, lsl #22
     6b4:	03081200 	movweq	r1, #33280	; 0x8200
     6b8:	06d903ad 	ldrbeq	r0, [r9], sp, lsr #7
     6bc:	46130000 	ldrmi	r0, [r3], -r0
     6c0:	03003152 	movweq	r3, #338	; 0x152
     6c4:	030c03af 	movweq	r0, #50095	; 0xc3af
     6c8:	13000000 	movwne	r0, #0
     6cc:	00325246 	eorseq	r5, r2, r6, asr #4
     6d0:	0c03b003 	stceq	0, cr11, [r3], {3}
     6d4:	04000003 	streq	r0, [r0], #-3
     6d8:	02830600 	addeq	r0, r3, #0, 12
     6dc:	b1030000 	mrslt	r0, (UNDEF: 3)
     6e0:	0006b503 	andeq	fp, r6, r3, lsl #10
     6e4:	03200b00 	nopeq	{0}	; <UNPREDICTABLE>
     6e8:	1b03b703 	blne	ee2fc <startup-0x1ff11d04>
     6ec:	13000008 	movwne	r0, #8
     6f0:	0052434d 	subseq	r4, r2, sp, asr #6
     6f4:	0c03b903 			; <UNDEFINED> instruction: 0x0c03b903
     6f8:	00000003 	andeq	r0, r0, r3
     6fc:	52534d13 	subspl	r4, r3, #1216	; 0x4c0
     700:	03ba0300 			; <UNDEFINED> instruction: 0x03ba0300
     704:	0000030c 	andeq	r0, r0, ip, lsl #6
     708:	53541304 	cmppl	r4, #4, 6	; 0x10000000
     70c:	bb030052 	bllt	c085c <startup-0x1ff3f7a4>
     710:	00030c03 	andeq	r0, r3, r3, lsl #24
     714:	5f0c0800 	svcpl	0x000c0800
     718:	03000002 	movweq	r0, #2
     71c:	030c03bc 	movweq	r0, #50108	; 0xc3bc
     720:	0c0c0000 	stceq	0, cr0, [ip], {-0}
     724:	00000305 	andeq	r0, r0, r5, lsl #6
     728:	0c03bd03 	stceq	13, cr11, [r3], {3}
     72c:	10000003 	andne	r0, r0, r3
     730:	52454913 	subpl	r4, r5, #311296	; 0x4c000
     734:	03be0300 			; <UNDEFINED> instruction: 0x03be0300
     738:	0000030c 	andeq	r0, r0, ip, lsl #6
     73c:	53451314 	movtpl	r1, #21268	; 0x5314
     740:	bf030052 	svclt	0x00030052
     744:	00030c03 	andeq	r0, r3, r3, lsl #24
     748:	42131800 	andsmi	r1, r3, #0, 16
     74c:	03005254 	movweq	r5, #596	; 0x254
     750:	030c03c0 	movweq	r0, #50112	; 0xc3c0
     754:	0c1c0000 	ldceq	0, cr0, [ip], {-0}
     758:	000002bd 			; <UNDEFINED> instruction: 0x000002bd
     75c:	1b03c103 	blne	f0b70 <startup-0x1ff0f490>
     760:	20000008 	andcs	r0, r0, r8
     764:	000d0d0d 	andeq	r0, sp, sp, lsl #26
     768:	03c20300 	biceq	r0, r2, #0, 6
     76c:	0000082b 	andeq	r0, r0, fp, lsr #16
     770:	9e0d0180 	adfls<illegal precision>	f0, f5, f0
     774:	03000002 	movweq	r0, #2
     778:	083b03c3 	ldmdaeq	fp!, {r0, r1, r6, r7, r8, r9}
     77c:	01b00000 	movseq	r0, r0
     780:	0002c70d 	andeq	ip, r2, sp, lsl #14
     784:	03c40300 	biceq	r0, r4, #0, 6
     788:	0000084b 	andeq	r0, r0, fp, asr #16
     78c:	460e01d0 			; <UNDEFINED> instruction: 0x460e01d0
     790:	0300524d 	movweq	r5, #589	; 0x24d
     794:	030c03c5 	movweq	r0, #50117	; 0xc3c5
     798:	02000000 	andeq	r0, r0, #0
     79c:	00086d0d 	andeq	r6, r8, sp, lsl #26
     7a0:	03c60300 	biceq	r0, r6, #0, 6
     7a4:	0000030c 	andeq	r0, r0, ip, lsl #6
     7a8:	670d0204 	strvs	r0, [sp, -r4, lsl #4]
     7ac:	03000003 	movweq	r0, #3
     7b0:	030103c7 	movweq	r0, #5063	; 0x13c7
     7b4:	02080000 	andeq	r0, r8, #0
     7b8:	000b2c0d 	andeq	r2, fp, sp, lsl #24
     7bc:	03c80300 	biceq	r0, r8, #0, 6
     7c0:	0000030c 	andeq	r0, r0, ip, lsl #6
     7c4:	710d020c 	tstvc	sp, ip, lsl #4
     7c8:	03000003 	movweq	r0, #3
     7cc:	030103c9 	movweq	r0, #5065	; 0x13c9
     7d0:	02100000 	andseq	r0, r0, #0
     7d4:	000b990d 	andeq	r9, fp, sp, lsl #18
     7d8:	03ca0300 	biceq	r0, sl, #0, 6
     7dc:	0000030c 	andeq	r0, r0, ip, lsl #6
     7e0:	f10d0214 			; <UNDEFINED> instruction: 0xf10d0214
     7e4:	03000002 	movweq	r0, #2
     7e8:	030103cb 	movweq	r0, #5067	; 0x13cb
     7ec:	02180000 	andseq	r0, r8, #0
     7f0:	000b9a0d 	andeq	r9, fp, sp, lsl #20
     7f4:	03cc0300 	biceq	r0, ip, #0, 6
     7f8:	0000030c 	andeq	r0, r0, ip, lsl #6
     7fc:	fb0d021c 	blx	341076 <startup-0x1fcbef8a>
     800:	03000002 	movweq	r0, #2
     804:	05d303cd 	ldrbeq	r0, [r3, #973]	; 0x3cd
     808:	02200000 	eoreq	r0, r0, #0
     80c:	0008f40d 	andeq	pc, r8, sp, lsl #8
     810:	03ce0300 	biceq	r0, lr, #0, 6
     814:	0000085b 	andeq	r0, r0, fp, asr r8
     818:	0f000240 	svceq	0x00000240
     81c:	00000301 	andeq	r0, r0, r1, lsl #6
     820:	0000082b 	andeq	r0, r0, fp, lsr #16
     824:	0002ca10 	andeq	ip, r2, r0, lsl sl
     828:	0f005700 	svceq	0x00005700
     82c:	0000065f 	andeq	r0, r0, pc, asr r6
     830:	0000083b 	andeq	r0, r0, fp, lsr r8
     834:	0002ca10 	andeq	ip, r2, r0, lsl sl
     838:	0f000200 	svceq	0x00000200
     83c:	000006a9 	andeq	r0, r0, r9, lsr #13
     840:	0000084b 	andeq	r0, r0, fp, asr #16
     844:	0002ca10 	andeq	ip, r2, r0, lsl sl
     848:	0f000100 	svceq	0x00000100
     84c:	00000301 	andeq	r0, r0, r1, lsl #6
     850:	0000085b 	andeq	r0, r0, fp, asr r8
     854:	0002ca10 	andeq	ip, r2, r0, lsl sl
     858:	0f000b00 	svceq	0x00000b00
     85c:	000006d9 	ldrdeq	r0, [r0], -r9
     860:	0000086b 	andeq	r0, r0, fp, ror #16
     864:	0002ca10 	andeq	ip, r2, r0, lsl sl
     868:	06001b00 	streq	r1, [r0], -r0, lsl #22
     86c:	000008ce 	andeq	r0, r0, lr, asr #17
     870:	e503cf03 	str	ip, [r3, #-3843]	; 0xfffff0fd
     874:	12000006 	andne	r0, r0, #6
     878:	05c30328 	strbeq	r0, [r3, #808]	; 0x328
     87c:	00000903 	andeq	r0, r0, r3, lsl #18
     880:	000c5e0c 	andeq	r5, ip, ip, lsl #28
     884:	05c50300 	strbeq	r0, [r5, #768]	; 0x300
     888:	0000030c 	andeq	r0, r0, ip, lsl #6
     88c:	0aa90c00 	beq	fea43894 <GPIO_Ports+0xdea3fa8c>
     890:	c6030000 	strgt	r0, [r3], -r0
     894:	00030c05 	andeq	r0, r3, r5, lsl #24
     898:	db0c0400 	blle	3018a0 <startup-0x1fcfe760>
     89c:	03000006 	movweq	r0, #6
     8a0:	030c05c7 	movweq	r0, #50631	; 0xc5c7
     8a4:	0c080000 	stceq	0, cr0, [r8], {-0}
     8a8:	00000769 	andeq	r0, r0, r9, ror #14
     8ac:	0c05c803 	stceq	8, cr12, [r5], {3}
     8b0:	0c000003 	stceq	0, cr0, [r0], {3}
     8b4:	52444913 	subpl	r4, r4, #311296	; 0x4c000
     8b8:	05c90300 	strbeq	r0, [r9, #768]	; 0x300
     8bc:	0000030c 	andeq	r0, r0, ip, lsl #6
     8c0:	444f1310 	strbmi	r1, [pc], #-784	; 8c8 <startup-0x1ffff738>
     8c4:	ca030052 	bgt	c0a14 <startup-0x1ff3f5ec>
     8c8:	00030c05 	andeq	r0, r3, r5, lsl #24
     8cc:	ab0c1400 	blge	3058d4 <startup-0x1fcfa72c>
     8d0:	03000007 	movweq	r0, #7
     8d4:	02ec05cb 	rsceq	r0, ip, #851443712	; 0x32c00000
     8d8:	0c180000 	ldceq	0, cr0, [r8], {-0}
     8dc:	000007a5 	andeq	r0, r0, r5, lsr #15
     8e0:	ec05cc03 	stc	12, cr12, [r5], {3}
     8e4:	1a000002 	bne	8f4 <startup-0x1ffff70c>
     8e8:	0006bb0c 	andeq	fp, r6, ip, lsl #22
     8ec:	05cd0300 	strbeq	r0, [sp, #768]	; 0x300
     8f0:	0000030c 	andeq	r0, r0, ip, lsl #6
     8f4:	4641131c 			; <UNDEFINED> instruction: 0x4641131c
     8f8:	ce030052 	mcrgt	0, 0, r0, cr3, cr2, {2}
     8fc:	00091305 	andeq	r1, r9, r5, lsl #6
     900:	0f002000 	svceq	0x00002000
     904:	0000030c 	andeq	r0, r0, ip, lsl #6
     908:	00000913 	andeq	r0, r0, r3, lsl r9
     90c:	0002ca10 	andeq	ip, r2, r0, lsl sl
     910:	09000100 	stmdbeq	r0, {r8}
     914:	00000903 	andeq	r0, r0, r3, lsl #18
     918:	000c0906 	andeq	r0, ip, r6, lsl #18
     91c:	05cf0300 	strbeq	r0, [pc, #768]	; c24 <startup-0x1ffff3dc>
     920:	00000877 	andeq	r0, r0, r7, ror r8
     924:	3d070c17 	stccc	12, cr0, [r7, #-92]	; 0xffffffa4
     928:	000009b1 			; <UNDEFINED> instruction: 0x000009b1
     92c:	0006cd18 	andeq	ip, r6, r8, lsl sp
     930:	e13f0700 	teq	pc, r0, lsl #14
     934:	00000002 	andeq	r0, r0, r2
     938:	0000fb18 	andeq	pc, r0, r8, lsl fp	; <UNPREDICTABLE>
     93c:	d1420700 	cmple	r2, r0, lsl #14
     940:	02000002 	andeq	r0, r0, #2
     944:	00059c18 	andeq	r9, r5, r8, lsl ip
     948:	d1450700 	cmple	r5, r0, lsl #14
     94c:	03000002 	movweq	r0, #2
     950:	000bcf18 	andeq	ip, fp, r8, lsl pc
     954:	d14a0700 	cmple	sl, r0, lsl #14
     958:	04000002 	streq	r0, [r0], #-2
     95c:	000bd718 	andeq	sp, fp, r8, lsl r7
     960:	d14e0700 	cmple	lr, r0, lsl #14
     964:	05000002 	streq	r0, [r0, #-2]
     968:	0000f218 	andeq	pc, r0, r8, lsl r2	; <UNPREDICTABLE>
     96c:	15510700 	ldrbne	r0, [r1, #-1792]	; 0xfffff900
     970:	06000006 	streq	r0, [r0], -r6
     974:	00034318 	andeq	r4, r3, r8, lsl r3
     978:	15540700 	ldrbne	r0, [r4, #-1792]	; 0xfffff900
     97c:	07000006 	streq	r0, [r0, -r6]
     980:	00099f18 	andeq	r9, r9, r8, lsl pc
     984:	15570700 	ldrbne	r0, [r7, #-1792]	; 0xfffff900
     988:	08000006 	stmdaeq	r0, {r1, r2}
     98c:	000a1518 	andeq	r1, sl, r8, lsl r5
     990:	155a0700 	ldrbne	r0, [sl, #-1792]	; 0xfffff900
     994:	09000006 	stmdbeq	r0, {r1, r2}
     998:	00082218 	andeq	r2, r8, r8, lsl r2
     99c:	155d0700 	ldrbne	r0, [sp, #-1792]	; 0xfffff900
     9a0:	0a000006 	beq	9c0 <startup-0x1ffff640>
     9a4:	000d5418 	andeq	r5, sp, r8, lsl r4
     9a8:	15600700 	strbne	r0, [r0, #-1792]!	; 0xfffff900
     9ac:	0b000006 	bleq	9cc <startup-0x1ffff634>
     9b0:	00650700 	rsbeq	r0, r5, r0, lsl #14
     9b4:	62070000 	andvs	r0, r7, #0
     9b8:	00000924 	andeq	r0, r0, r4, lsr #18
     9bc:	67070e17 	smladvs	r7, r7, lr, r0
     9c0:	00000a31 	andeq	r0, r0, r1, lsr sl
     9c4:	000a7418 	andeq	r7, sl, r8, lsl r4
     9c8:	e1690700 	cmn	r9, r0, lsl #14
     9cc:	00000002 	andeq	r0, r0, r2
     9d0:	00007518 	andeq	r7, r0, r8, lsl r5
     9d4:	e16d0700 	cmn	sp, r0, lsl #14
     9d8:	02000002 	andeq	r0, r0, #2
     9dc:	00088118 	andeq	r8, r8, r8, lsl r1
     9e0:	e1710700 	cmn	r1, r0, lsl #14
     9e4:	04000002 	streq	r0, [r0], #-2
     9e8:	000b6718 	andeq	r6, fp, r8, lsl r7
     9ec:	e1760700 	cmn	r6, r0, lsl #14
     9f0:	06000002 	streq	r0, [r0], -r2
     9f4:	00032a18 	andeq	r2, r3, r8, lsl sl
     9f8:	e17b0700 	cmn	fp, r0, lsl #14
     9fc:	08000002 	stmdaeq	r0, {r1}
     a00:	0008da18 	andeq	sp, r8, r8, lsl sl
     a04:	d17e0700 	cmnle	lr, r0, lsl #14
     a08:	0a000002 	beq	a18 <startup-0x1ffff5e8>
     a0c:	000bdf18 	andeq	sp, fp, r8, lsl pc
     a10:	d1800700 	orrle	r0, r0, r0, lsl #14
     a14:	0b000002 	bleq	a24 <startup-0x1ffff5dc>
     a18:	00016618 	andeq	r6, r1, r8, lsl r6
     a1c:	d1830700 	orrle	r0, r3, r0, lsl #14
     a20:	0c000002 	stceq	0, cr0, [r0], {2}
     a24:	00042718 	andeq	r2, r4, r8, lsl r7
     a28:	15860700 	strne	r0, [r6, #1792]	; 0x700
     a2c:	0d000006 	stceq	0, cr0, [r0, #-24]	; 0xffffffe8
     a30:	0d390700 	ldceq	7, cr0, [r9, #-0]
     a34:	88070000 	stmdahi	r7, {}	; <UNPREDICTABLE>
     a38:	000009bc 			; <UNDEFINED> instruction: 0x000009bc
     a3c:	8d071417 	cfstrshi	mvf1, [r7, #-92]	; 0xffffffa4
     a40:	00000a8d 	andeq	r0, r0, sp, lsl #21
     a44:	00036118 	andeq	r6, r3, r8, lsl r1
     a48:	018f0700 	orreq	r0, pc, r0, lsl #14
     a4c:	00000003 	andeq	r0, r0, r3
     a50:	00048b18 	andeq	r8, r4, r8, lsl fp
     a54:	01920700 	orrseq	r0, r2, r0, lsl #14
     a58:	04000003 	streq	r0, [r0], #-3
     a5c:	45444919 	strbmi	r4, [r4, #-2329]	; 0xfffff6e7
     a60:	d1950700 	orrsle	r0, r5, r0, lsl #14
     a64:	08000002 	stmdaeq	r0, {r1}
     a68:	52545219 	subspl	r5, r4, #-1879048191	; 0x90000001
     a6c:	d1990700 	orrsle	r0, r9, r0, lsl #14
     a70:	09000002 	stmdbeq	r0, {r1}
     a74:	434c4419 	movtmi	r4, #50201	; 0xc419
     a78:	d19d0700 	orrsle	r0, sp, r0, lsl #14
     a7c:	0a000002 	beq	a8c <startup-0x1ffff574>
     a80:	001fa118 	andseq	sl, pc, r8, lsl r1	; <UNPREDICTABLE>
     a84:	8da10700 	stchi	7, cr0, [r1]
     a88:	0b00000a 	bleq	ab8 <startup-0x1ffff548>
     a8c:	02d10f00 	sbcseq	r0, r1, #0, 30
     a90:	0a9d0000 	beq	fe740a98 <GPIO_Ports+0xde73cc90>
     a94:	ca100000 	bgt	400a9c <startup-0x1fbff564>
     a98:	07000002 	streq	r0, [r0, -r2]
     a9c:	054b0700 	strbeq	r0, [fp, #-1792]	; 0xfffff900
     aa0:	a3070000 	movwge	r0, #28672	; 0x7000
     aa4:	00000a3c 	andeq	r0, r0, ip, lsr sl
     aa8:	a8071417 	stmdage	r7, {r0, r1, r2, r4, sl, ip}
     aac:	00000b05 	andeq	r0, r0, r5, lsl #22
     ab0:	00036118 	andeq	r6, r3, r8, lsl r1
     ab4:	01aa0700 			; <UNDEFINED> instruction: 0x01aa0700
     ab8:	00000003 	andeq	r0, r0, r3
     abc:	00048b18 	andeq	r8, r4, r8, lsl fp
     ac0:	01ad0700 			; <UNDEFINED> instruction: 0x01ad0700
     ac4:	04000003 	streq	r0, [r0], #-3
     ac8:	45444919 	strbmi	r4, [r4, #-2329]	; 0xfffff6e7
     acc:	d1b00700 	lslsle	r0, r0, #14
     ad0:	08000002 	stmdaeq	r0, {r1}
     ad4:	52545219 	subspl	r5, r4, #-1879048191	; 0x90000001
     ad8:	d1b40700 			; <UNDEFINED> instruction: 0xd1b40700
     adc:	09000002 	stmdbeq	r0, {r1}
     ae0:	434c4419 	movtmi	r4, #50201	; 0xc419
     ae4:	d1b80700 			; <UNDEFINED> instruction: 0xd1b80700
     ae8:	0a000002 	beq	af8 <startup-0x1ffff508>
     aec:	001fa118 	andseq	sl, pc, r8, lsl r1	; <UNPREDICTABLE>
     af0:	8dbb0700 	ldchi	7, cr0, [fp]
     af4:	0b00000a 	bleq	b24 <startup-0x1ffff4dc>
     af8:	494d4619 	stmdbmi	sp, {r0, r3, r4, r9, sl, lr}^
     afc:	d1be0700 			; <UNDEFINED> instruction: 0xd1be0700
     b00:	13000002 	movwne	r0, #2
     b04:	09370700 	ldmdbeq	r7!, {r8, r9, sl}
     b08:	c1070000 	mrsgt	r0, (UNDEF: 7)
     b0c:	00000aa8 	andeq	r0, r0, r8, lsr #21
     b10:	13080417 	movwne	r0, #33815	; 0x8417
     b14:	00000b72 	andeq	r0, r0, r2, ror fp
     b18:	0008961a 	andeq	r9, r8, sl, lsl r6
     b1c:	01150800 	tsteq	r5, r0, lsl #16
     b20:	04000003 	streq	r0, [r0], #-3
     b24:	1a001808 	bne	6b4c <startup-0x1fff94b4>
     b28:	0000012f 	andeq	r0, r0, pc, lsr #2
     b2c:	03011908 	movweq	r1, #6408	; 0x1908
     b30:	0a040000 	beq	100b38 <startup-0x1feff4c8>
     b34:	491b000e 	ldmdbmi	fp, {r1, r2, r3}
     b38:	1d080044 	stcne	0, cr0, [r8, #-272]	; 0xfffffef0
     b3c:	00000301 	andeq	r0, r0, r1, lsl #6
     b40:	00070704 	andeq	r0, r7, r4, lsl #14
     b44:	0001201a 	andeq	r2, r1, sl, lsl r0
     b48:	01210800 			; <UNDEFINED> instruction: 0x01210800
     b4c:	04000003 	streq	r0, [r0], #-3
     b50:	1a000601 	bne	235c <startup-0x1fffdca4>
     b54:	0000076f 	andeq	r0, r0, pc, ror #14
     b58:	03012408 	movweq	r2, #5128	; 0x1408
     b5c:	03040000 	movweq	r0, #16384	; 0x4000
     b60:	ec1a0003 	ldc	0, cr0, [sl], {3}
     b64:	08000008 	stmdaeq	r0, {r3}
     b68:	00030127 	andeq	r0, r3, r7, lsr #2
     b6c:	00030400 	andeq	r0, r3, r0, lsl #8
     b70:	84070000 	strhi	r0, [r7], #-0
     b74:	08000004 	stmdaeq	r0, {r2}
     b78:	000b1028 	andeq	r1, fp, r8, lsr #32
     b7c:	08041700 	stmdaeq	r4, {r8, r9, sl, ip}
     b80:	000bc12d 	andeq	ip, fp, sp, lsr #2
     b84:	08eb1a00 	stmiaeq	fp!, {r9, fp, ip}^
     b88:	2f080000 	svccs	0x00080000
     b8c:	00000301 	andeq	r0, r0, r1, lsl #6
     b90:	001f0104 	andseq	r0, pc, r4, lsl #2
     b94:	5254521b 	subspl	r5, r4, #-1342177279	; 0xb0000001
     b98:	01320800 	teqeq	r2, r0, lsl #16
     b9c:	04000003 	streq	r0, [r0], #-3
     ba0:	1b001e01 	blne	83ac <startup-0x1fff7c54>
     ba4:	00454449 	subeq	r4, r5, r9, asr #8
     ba8:	03013508 	movweq	r3, #5384	; 0x1508
     bac:	01040000 	mrseq	r0, (UNDEF: 4)
     bb0:	491b001d 	ldmdbmi	fp, {r0, r2, r3, r4}
     bb4:	37080044 	strcc	r0, [r8, -r4, asr #32]
     bb8:	00000301 	andeq	r0, r0, r1, lsl #6
     bbc:	00001d04 	andeq	r1, r0, r4, lsl #26
     bc0:	0c360700 	ldceq	7, cr0, [r6], #-0
     bc4:	38080000 	stmdacc	r8, {}	; <UNPREDICTABLE>
     bc8:	00000b7d 	andeq	r0, r0, sp, ror fp
     bcc:	36090417 			; <UNDEFINED> instruction: 0x36090417
     bd0:	00000c05 	andeq	r0, r0, r5, lsl #24
     bd4:	00090418 	andeq	r0, r9, r8, lsl r4
     bd8:	d1380900 	teqle	r8, r0, lsl #18
     bdc:	00000002 	andeq	r0, r0, r2
     be0:	0003dd18 	andeq	sp, r3, r8, lsl sp
     be4:	d13d0900 	teqle	sp, r0, lsl #18
     be8:	01000002 	tsteq	r0, r2
     bec:	00091418 	andeq	r1, r9, r8, lsl r4
     bf0:	d1420900 	cmple	r2, r0, lsl #18
     bf4:	02000002 	andeq	r0, r0, #2
     bf8:	0001bd18 	andeq	fp, r1, r8, lsl sp
     bfc:	15470900 	strbne	r0, [r7, #-2304]	; 0xfffff700
     c00:	03000006 	movweq	r0, #6
     c04:	0c9d0700 	ldceq	7, cr0, [sp], {0}
     c08:	4a090000 	bmi	240c10 <startup-0x1fdbf3f0>
     c0c:	00000bcc 	andeq	r0, r0, ip, asr #23
     c10:	7101071c 	tstvc	r1, ip, lsl r7
     c14:	0a000002 	beq	c24 <startup-0x1ffff3dc>
     c18:	000c3642 	andeq	r3, ip, r2, asr #12
     c1c:	069c0400 	ldreq	r0, [ip], r0, lsl #8
     c20:	04000000 	streq	r0, [r0], #-0
     c24:	0000057c 	andeq	r0, r0, ip, ror r5
     c28:	01fa0401 	mvnseq	r0, r1, lsl #8
     c2c:	04020000 	streq	r0, [r2], #-0
     c30:	0000021f 	andeq	r0, r0, pc, lsl r2
     c34:	8a070003 	bhi	1c0c48 <startup-0x1fe3f3b8>
     c38:	0a00000a 	beq	c68 <startup-0x1ffff398>
     c3c:	000c1047 	andeq	r1, ip, r7, asr #32
     c40:	01071c00 	tsteq	r7, r0, lsl #24
     c44:	00000271 	andeq	r0, r0, r1, ror r2
     c48:	0c5b4f0a 	mrrceq	15, 0, r4, fp, cr10
     c4c:	0f040000 	svceq	0x00040000
     c50:	00000003 	andeq	r0, r0, r3
     c54:	00026404 	andeq	r6, r2, r4, lsl #8
     c58:	07000100 	streq	r0, [r0, -r0, lsl #2]
     c5c:	00000104 	andeq	r0, r0, r4, lsl #2
     c60:	0c41520a 	sfmeq	f5, 2, [r1], {10}
     c64:	071c0000 	ldreq	r0, [ip, -r0]
     c68:	00027101 	andeq	r7, r2, r1, lsl #2
     c6c:	8c5a0a00 	mrrchi	10, 0, r0, sl, cr0
     c70:	0400000c 	streq	r0, [r0], #-12
     c74:	0000040a 	andeq	r0, r0, sl, lsl #8
     c78:	07250400 	streq	r0, [r5, -r0, lsl #8]!
     c7c:	04010000 	streq	r0, [r1], #-0
     c80:	00000d81 	andeq	r0, r0, r1, lsl #27
     c84:	07b10402 	ldreq	r0, [r1, r2, lsl #8]!
     c88:	00030000 	andeq	r0, r3, r0
     c8c:	000aff07 	andeq	pc, sl, r7, lsl #30
     c90:	665f0a00 	ldrbvs	r0, [pc], -r0, lsl #20
     c94:	1c00000c 	stcne	0, cr0, [r0], {12}
     c98:	02710107 	rsbseq	r0, r1, #-1073741823	; 0xc0000001
     c9c:	6e0a0000 	cdpvs	0, 0, cr0, cr10, cr0, {0}
     ca0:	00000cb7 			; <UNDEFINED> instruction: 0x00000cb7
     ca4:	00009f04 	andeq	r9, r0, r4, lsl #30
     ca8:	83040000 	movwhi	r0, #16384	; 0x4000
     cac:	0100000c 	tsteq	r0, ip
     cb0:	00019e04 	andeq	r9, r1, r4, lsl #28
     cb4:	07000200 	streq	r0, [r0, -r0, lsl #4]
     cb8:	000003ae 	andeq	r0, r0, lr, lsr #7
     cbc:	0c97720a 	lfmeq	f7, 4, [r7], {10}
     cc0:	08170000 	ldmdaeq	r7, {}	; <UNPREDICTABLE>
     cc4:	0d07840a 	cfstrseq	mvf8, [r7, #-40]	; 0xffffffd8
     cc8:	23180000 	tstcs	r8, #0
     ccc:	0a00000b 	beq	d00 <startup-0x1ffff300>
     cd0:	00030186 	andeq	r0, r3, r6, lsl #3
     cd4:	4e180000 	cdpmi	0, 1, cr0, cr8, cr0, {0}
     cd8:	0a00000a 	beq	d08 <startup-0x1ffff2f8>
     cdc:	000c3689 	andeq	r3, ip, r9, lsl #13
     ce0:	55180400 	ldrpl	r0, [r8, #-1024]	; 0xfffffc00
     ce4:	0a000008 	beq	d0c <startup-0x1ffff2f4>
     ce8:	000c8c8c 	andeq	r8, ip, ip, lsl #25
     cec:	0f180500 	svceq	0x00180500
     cf0:	0a000007 	beq	d14 <startup-0x1ffff2ec>
     cf4:	000c5b8f 	andeq	r5, ip, pc, lsl #23
     cf8:	54180600 	ldrpl	r0, [r8], #-1536	; 0xfffffa00
     cfc:	0a00000b 	beq	d30 <startup-0x1ffff2d0>
     d00:	000cb792 	muleq	ip, r2, r7
     d04:	07000700 	streq	r0, [r0, -r0, lsl #14]
     d08:	00000272 	andeq	r0, r0, r2, ror r2
     d0c:	0cc2940a 	cfstrdeq	mvd9, [r2], {10}
     d10:	041d0000 	ldreq	r0, [sp], #-0
     d14:	0d310f02 	ldceq	15, cr0, [r1, #-8]!
     d18:	851e0000 	ldrhi	r0, [lr, #-0]
     d1c:	02000000 	andeq	r0, r0, #0
     d20:	000d3110 	andeq	r3, sp, r0, lsl r1
     d24:	0c021e00 	stceq	14, cr1, [r2], {-0}
     d28:	11020000 	mrsne	r0, (UNDEF: 2)
     d2c:	00000bc1 	andeq	r0, r0, r1, asr #23
     d30:	02e10f00 	rsceq	r0, r1, #0, 30
     d34:	0d410000 	stcleq	0, cr0, [r1, #-0]
     d38:	ca100000 	bgt	400d40 <startup-0x1fbff2c0>
     d3c:	01000002 	tsteq	r0, r2
     d40:	095c0700 	ldmdbeq	ip, {r8, r9, sl}^
     d44:	12020000 	andne	r0, r2, #0
     d48:	00000d12 	andeq	r0, r0, r2, lsl sp
     d4c:	14021017 	strne	r1, [r2], #-23	; 0xffffffe9
     d50:	00000d85 	andeq	r0, r0, r5, lsl #27
     d54:	0001b518 	andeq	fp, r1, r8, lsl r5
     d58:	96150200 	ldrls	r0, [r5], -r0, lsl #4
     d5c:	0000000d 	andeq	r0, r0, sp
     d60:	000c0218 	andeq	r0, ip, r8, lsl r2
     d64:	c1160200 	tstgt	r6, r0, lsl #4
     d68:	0400000b 	streq	r0, [r0], #-11
     d6c:	0007c118 	andeq	ip, r7, r8, lsl r1
     d70:	c1170200 	tstgt	r7, r0, lsl #4
     d74:	0800000b 	stmdaeq	r0, {r0, r1, r3}
     d78:	0000ec18 	andeq	lr, r0, r8, lsl ip
     d7c:	15180200 	ldrne	r0, [r8, #-512]	; 0xfffffe00
     d80:	0c000006 	stceq	0, cr0, [r0], {6}
     d84:	0d901f00 	ldceq	15, cr1, [r0]
     d88:	90200000 	eorls	r0, r0, r0
     d8c:	0000000d 	andeq	r0, r0, sp
     d90:	0b050421 	bleq	141e1c <startup-0x1febe1e4>
     d94:	04210000 	strteq	r0, [r1], #-0
     d98:	00000d85 	andeq	r0, r0, r5, lsl #27
     d9c:	000ab007 	andeq	fp, sl, r7
     da0:	4c190200 	lfmmi	f0, 4, [r9], {-0}
     da4:	0f00000d 	svceq	0x0000000d
     da8:	00000d9c 	muleq	r0, ip, sp
     dac:	00000db7 			; <UNDEFINED> instruction: 0x00000db7
     db0:	0002ca10 	andeq	ip, r2, r0, lsl sl
     db4:	22000d00 	andcs	r0, r0, #0, 26
     db8:	0000078d 	andeq	r0, r0, sp, lsl #15
     dbc:	0da71e02 	stceq	14, cr1, [r7, #8]!
     dc0:	03050000 	movweq	r0, #20480	; 0x5000
     dc4:	20003cf0 	strdcs	r3, [r0], -r0
     dc8:	00039522 	andeq	r9, r3, r2, lsr #10
     dcc:	d1230200 			; <UNDEFINED> instruction: 0xd1230200
     dd0:	05000002 	streq	r0, [r0, #-2]
     dd4:	003dd003 	eorseq	sp, sp, r3
     dd8:	00472220 	subeq	r2, r7, r0, lsr #4
     ddc:	24020000 	strcs	r0, [r2], #-0
     de0:	00000301 	andeq	r0, r0, r1, lsl #6
     de4:	3cec0305 	stclcc	3, cr0, [ip], #20
     de8:	51232000 			; <UNDEFINED> instruction: 0x51232000
     dec:	02000000 	andeq	r0, r0, #0
     df0:	0002d1ec 	andeq	sp, r2, ip, ror #3
     df4:	0005dc00 	andeq	sp, r5, r0, lsl #24
     df8:	0001bc20 	andeq	fp, r1, r0, lsr #24
     dfc:	3d9c0100 	ldfccs	f0, [ip]
     e00:	2400000e 	strcs	r0, [r0], #-14
     e04:	0000058a 	andeq	r0, r0, sl, lsl #11
     e08:	09b1ed02 	ldmibeq	r1!, {r1, r8, sl, fp, sp, lr, pc}
     e0c:	91020000 	mrsls	r0, (UNDEF: 2)
     e10:	01392458 	teqeq	r9, r8, asr r4
     e14:	ee020000 	cdp	0, 0, cr0, cr2, cr0, {0}
     e18:	00000c05 	andeq	r0, r0, r5, lsl #24
     e1c:	24549102 	ldrbcs	r9, [r4], #-258	; 0xfffffefe
     e20:	00000a3b 	andeq	r0, r0, fp, lsr sl
     e24:	0d07ef02 	stceq	15, cr14, [r7, #-8]
     e28:	91020000 	mrsls	r0, (UNDEF: 2)
     e2c:	056c254c 	strbeq	r2, [ip, #-1356]!	; 0xfffffab4
     e30:	37020000 	strcc	r0, [r2, -r0]
     e34:	0002d101 	andeq	sp, r2, r1, lsl #2
     e38:	67910200 	ldrvs	r0, [r1, r0, lsl #4]
     e3c:	01d62600 	bicseq	r2, r6, r0, lsl #12
     e40:	db020000 	blle	80e48 <startup-0x1ff7f1b8>
     e44:	20000544 	andcs	r0, r0, r4, asr #10
     e48:	00000098 	muleq	r0, r8, r0
     e4c:	0e839c01 	cdpeq	12, 8, cr9, cr3, cr1, {0}
     e50:	50270000 	eorpl	r0, r7, r0
     e54:	76200005 	strtvc	r0, [r0], -r5
     e58:	24000000 	strcs	r0, [r0], #-0
     e5c:	00000bc2 	andeq	r0, r0, r2, asr #23
     e60:	02d1de02 	sbcseq	sp, r1, #2, 28
     e64:	91020000 	mrsls	r0, (UNDEF: 2)
     e68:	056a2777 	strbeq	r2, [sl, #-1911]!	; 0xfffff889
     e6c:	004a2000 	subeq	r2, sl, r0
     e70:	5a240000 	bpl	900e78 <startup-0x1f6ff188>
     e74:	02000003 	andeq	r0, r0, #3
     e78:	000b72e2 	andeq	r7, fp, r2, ror #5
     e7c:	70910200 	addsvc	r0, r1, r0, lsl #4
     e80:	26000000 	strcs	r0, [r0], -r0
     e84:	00000d62 	andeq	r0, r0, r2, ror #26
     e88:	0410bd02 	ldreq	fp, [r0], #-3330	; 0xfffff2fe
     e8c:	01342000 	teqeq	r4, r0
     e90:	9c010000 	stcls	0, cr0, [r1], {-0}
     e94:	00000ed6 	ldrdeq	r0, [r0], -r6
     e98:	00444928 	subeq	r4, r4, r8, lsr #18
     e9c:	02e1bd02 	rsceq	fp, r1, #2, 26	; 0x80
     ea0:	91020000 	mrsls	r0, (UNDEF: 2)
     ea4:	042a2766 	strteq	r2, [sl], #-1894	; 0xfffff89a
     ea8:	00fc2000 	rscseq	r2, ip, r0
     eac:	c2240000 	eorgt	r0, r4, #0
     eb0:	0200000b 	andeq	r0, r0, #11
     eb4:	0002d1c1 	andeq	sp, r2, r1, asr #3
     eb8:	6f910200 	svcvs	0x00910200
     ebc:	00044827 	andeq	r4, r4, r7, lsr #16
     ec0:	0000c820 	andeq	ip, r0, r0, lsr #16
     ec4:	035a2400 	cmpeq	sl, #0, 8
     ec8:	c5020000 	strgt	r0, [r2, #-0]
     ecc:	00000b72 	andeq	r0, r0, r2, ror fp
     ed0:	00689102 	rsbeq	r9, r8, r2, lsl #2
     ed4:	ad260000 	stcge	0, cr0, [r6, #-0]
     ed8:	02000001 	andeq	r0, r0, #1
     edc:	0003a4a8 	andeq	sl, r3, r8, lsr #9
     ee0:	00006c20 	andeq	r6, r0, r0, lsr #24
     ee4:	049c0100 	ldreq	r0, [ip], #256	; 0x100
     ee8:	2700000f 	strcs	r0, [r0, -pc]
     eec:	200003c6 	andcs	r0, r0, r6, asr #7
     ef0:	00000038 	andeq	r0, r0, r8, lsr r0
     ef4:	00023b24 	andeq	r3, r2, r4, lsr #22
     ef8:	05ae0200 	streq	r0, [lr, #512]!	; 0x200
     efc:	0200000b 	andeq	r0, r0, #11
     f00:	00006491 	muleq	r0, r1, r4
     f04:	00022c29 	andeq	r2, r2, r9, lsr #24
     f08:	d18a0200 	orrle	r0, sl, r0, lsl #4
     f0c:	fa000002 	blx	f1c <startup-0x1ffff0e4>
     f10:	aa200002 	bge	800f20 <startup-0x1f7ff0e0>
     f14:	01000000 	mrseq	r0, (UNDEF: 0)
     f18:	000f449c 	muleq	pc, ip, r4	; <UNPREDICTABLE>
     f1c:	736d2800 	cmnvc	sp, #0, 16
     f20:	8a020067 	bhi	810c4 <startup-0x1ff7ef3c>
     f24:	00000f44 	andeq	r0, r0, r4, asr #30
     f28:	276c9102 	strbcs	r9, [ip, -r2, lsl #2]!
     f2c:	2000030a 	andcs	r0, r0, sl, lsl #6
     f30:	00000072 	andeq	r0, r0, r2, ror r0
     f34:	00035a24 	andeq	r5, r3, r4, lsr #20
     f38:	728e0200 	addvc	r0, lr, #0, 4
     f3c:	0200000b 	andeq	r0, r0, #11
     f40:	00007491 	muleq	r0, r1, r4
     f44:	0a9d0421 	beq	fe741fd0 <GPIO_Ports+0xde73e1c8>
     f48:	40260000 	eormi	r0, r6, r0
     f4c:	02000009 	andeq	r0, r0, #9
     f50:	0002c881 	andeq	ip, r2, r1, lsl #17
     f54:	00003220 	andeq	r3, r0, r0, lsr #4
     f58:	789c0100 	ldmvc	ip, {r8}
     f5c:	2700000f 	strcs	r0, [r0, -pc]
     f60:	200002ce 	andcs	r0, r0, lr, asr #5
     f64:	00000024 	andeq	r0, r0, r4, lsr #32
     f68:	000bc224 	andeq	ip, fp, r4, lsr #4
     f6c:	d1820200 	orrle	r0, r2, r0, lsl #4
     f70:	02000002 	andeq	r0, r0, #2
     f74:	00007791 	muleq	r0, r1, r7
     f78:	0000ca26 	andeq	ip, r0, r6, lsr #20
     f7c:	78730200 	ldmdavc	r3!, {r9}^
     f80:	50200002 	eorpl	r0, r0, r2
     f84:	01000000 	mrseq	r0, (UNDEF: 0)
     f88:	000fb49c 	muleq	pc, ip, r4	; <UNPREDICTABLE>
     f8c:	0bc22a00 	bleq	ff08b794 <GPIO_Ports+0xdf08798c>
     f90:	73020000 	movwvc	r0, #8192	; 0x2000
     f94:	000002d1 	ldrdeq	r0, [r0], -r1
     f98:	27679102 	strbcs	r9, [r7, -r2, lsl #2]!
     f9c:	2000028c 	andcs	r0, r0, ip, lsl #5
     fa0:	0000002e 	andeq	r0, r0, lr, lsr #32
     fa4:	00049124 	andeq	r9, r4, r4, lsr #2
     fa8:	31780200 	cmncc	r8, r0, lsl #4
     fac:	0200000a 	andeq	r0, r0, #10
     fb0:	00006891 	muleq	r0, r1, r8
     fb4:	000bee29 	andeq	lr, fp, r9, lsr #28
     fb8:	d14b0200 	mrsle	r0, (UNDEF: 107)
     fbc:	4c000002 	stcmi	0, cr0, [r0], {2}
     fc0:	2c200001 	stccs	0, cr0, [r0], #-4
     fc4:	01000001 	tsteq	r0, r1
     fc8:	0010289c 	mulseq	r0, ip, r8
     fcc:	005a2a00 	subseq	r2, sl, r0, lsl #20
     fd0:	4b020000 	blmi	80fd8 <startup-0x1ff7f028>
     fd4:	00000d96 	muleq	r0, r6, sp
     fd8:	2a649102 	bcs	19253e8 <startup-0x1e6dac18>
     fdc:	00000c02 	andeq	r0, r0, r2, lsl #24
     fe0:	10284b02 	eorne	r4, r8, r2, lsl #22
     fe4:	91020000 	mrsls	r0, (UNDEF: 2)
     fe8:	07c12a60 	strbeq	r2, [r1, r0, ror #20]
     fec:	4b020000 	blmi	80ff4 <startup-0x1ff7f00c>
     ff0:	00001028 	andeq	r1, r0, r8, lsr #32
     ff4:	275c9102 	ldrbcs	r9, [ip, -r2, lsl #2]
     ff8:	20000158 	andcs	r0, r0, r8, asr r1
     ffc:	00000102 	andeq	r0, r0, r2, lsl #2
    1000:	000bc224 	andeq	ip, fp, r4, lsr #4
    1004:	d14c0200 	mrsle	r0, (UNDEF: 108)
    1008:	02000002 	andeq	r0, r0, #2
    100c:	7e276f91 	mcrvc	15, 1, r6, cr7, cr1, {4}
    1010:	7c200001 	stcvc	0, cr0, [r0], #-4
    1014:	24000000 	strcs	r0, [r0], #-0
    1018:	0000035a 	andeq	r0, r0, sl, asr r3
    101c:	0b725102 	bleq	1c9542c <startup-0x1e36abd4>
    1020:	91020000 	mrsls	r0, (UNDEF: 2)
    1024:	00000068 	andeq	r0, r0, r8, rrx
    1028:	0bc10421 	bleq	ff0420b4 <GPIO_Ports+0xdf03e2ac>
    102c:	c4260000 	strtgt	r0, [r6], #-0
    1030:	02000003 	andeq	r0, r0, #3
    1034:	0000b432 	andeq	fp, r0, r2, lsr r4
    1038:	00009820 	andeq	r9, r0, r0, lsr #16
    103c:	7c9c0100 	ldfvcs	f0, [ip], {0}
    1040:	2a000010 	bcs	1088 <startup-0x1fffef78>
    1044:	00000bc2 	andeq	r0, r0, r2, asr #23
    1048:	02d13202 	sbcseq	r3, r1, #536870912	; 0x20000000
    104c:	91020000 	mrsls	r0, (UNDEF: 2)
    1050:	0781245f 			; <UNDEFINED> instruction: 0x0781245f
    1054:	36020000 	strcc	r0, [r2], -r0
    1058:	00000d41 	andeq	r0, r0, r1, asr #26
    105c:	24749102 	ldrbtcs	r9, [r4], #-258	; 0xfffffefe
    1060:	00000c40 	andeq	r0, r0, r0, asr #24
    1064:	0d413602 	stcleq	6, cr3, [r1, #-8]
    1068:	91020000 	mrsls	r0, (UNDEF: 2)
    106c:	04912470 	ldreq	r2, [r1], #1136	; 0x470
    1070:	3b020000 	blcc	81078 <startup-0x1ff7ef88>
    1074:	00000a31 	andeq	r0, r0, r1, lsr sl
    1078:	00609102 	rsbeq	r9, r0, r2, lsl #2
    107c:	0009682b 	andeq	r6, r9, fp, lsr #16
    1080:	d1280200 			; <UNDEFINED> instruction: 0xd1280200
    1084:	70000002 	andvc	r0, r0, r2
    1088:	44200000 	strtmi	r0, [r0], #-0
    108c:	01000000 	mrseq	r0, (UNDEF: 0)
    1090:	0010ae9c 	mulseq	r0, ip, lr
    1094:	00762700 	rsbseq	r2, r6, r0, lsl #14
    1098:	00302000 	eorseq	r2, r0, r0
    109c:	c2240000 	eorgt	r0, r4, #0
    10a0:	0200000b 	andeq	r0, r0, #11
    10a4:	0002d129 	andeq	sp, r2, r9, lsr #2
    10a8:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    10ac:	642c0000 	strtvs	r0, [ip], #-0
    10b0:	0100000c 	tsteq	r0, ip
    10b4:	0010065d 	andseq	r0, r0, sp, asr r6
    10b8:	00602000 	rsbeq	r2, r0, r0
    10bc:	9c010000 	stcls	0, cr0, [r1], {-0}
    10c0:	000c242d 	andeq	r2, ip, sp, lsr #8
    10c4:	065d0100 	ldrbeq	r0, [sp], -r0, lsl #2
    10c8:	0000025a 	andeq	r0, r0, sl, asr r2
    10cc:	2d779102 	ldfcsp	f1, [r7, #-8]!
    10d0:	00001d97 	muleq	r0, r7, sp
    10d4:	01065d01 	tsteq	r6, r1, lsl #26
    10d8:	02000003 	andeq	r0, r0, #3
    10dc:	00007091 	muleq	r0, r1, r0
    10e0:	00000ba6 	andeq	r0, r0, r6, lsr #23
    10e4:	029b0004 	addseq	r0, fp, #4
    10e8:	01040000 	mrseq	r0, (UNDEF: 4)
    10ec:	000004b3 			; <UNDEFINED> instruction: 0x000004b3
    10f0:	000db40c 	andeq	fp, sp, ip, lsl #8
    10f4:	00043c00 	andeq	r3, r4, r0, lsl #24
    10f8:	00079800 	andeq	r9, r7, r0, lsl #16
    10fc:	0011d220 	andseq	sp, r1, r0, lsr #4
    1100:	0002c400 	andeq	ip, r2, r0, lsl #8
    1104:	06010200 	streq	r0, [r1], -r0, lsl #4
    1108:	000002d3 	ldrdeq	r0, [r0], -r3
    110c:	00017603 	andeq	r7, r1, r3, lsl #12
    1110:	372b0200 	strcc	r0, [fp, -r0, lsl #4]!
    1114:	02000000 	andeq	r0, r0, #0
    1118:	02d10801 	sbcseq	r0, r1, #65536	; 0x10000
    111c:	02020000 	andeq	r0, r2, #0
    1120:	000b8605 	andeq	r8, fp, r5, lsl #12
    1124:	03ff0300 	mvnseq	r0, #0, 6
    1128:	39020000 	stmdbcc	r2, {}	; <UNPREDICTABLE>
    112c:	00000050 	andeq	r0, r0, r0, asr r0
    1130:	ae070202 	cdpge	2, 0, cr0, cr7, cr2, {0}
    1134:	0300000c 	movweq	r0, #12
    1138:	00000d2a 	andeq	r0, r0, sl, lsr #26
    113c:	00624d02 	rsbeq	r4, r2, r2, lsl #26
    1140:	04020000 	streq	r0, [r2], #-0
    1144:	00074605 	andeq	r4, r7, r5, lsl #12
    1148:	071a0300 	ldreq	r0, [sl, -r0, lsl #6]
    114c:	4f020000 	svcmi	0x00020000
    1150:	00000074 	andeq	r0, r0, r4, ror r0
    1154:	ed070402 	cfstrs	mvf0, [r7, #-8]
    1158:	02000009 	andeq	r0, r0, #9
    115c:	07410508 	strbeq	r0, [r1, -r8, lsl #10]
    1160:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    1164:	0009e807 	andeq	lr, r9, r7, lsl #16
    1168:	05040400 	streq	r0, [r4, #-1024]	; 0xfffffc00
    116c:	00746e69 	rsbseq	r6, r4, r9, ror #28
    1170:	f2070402 	vshl.s8	d0, d2, d7
    1174:	03000009 	movweq	r0, #9
    1178:	00000178 	andeq	r0, r0, r8, ror r1
    117c:	002c1803 	eoreq	r1, ip, r3, lsl #16
    1180:	01030000 	mrseq	r0, (UNDEF: 3)
    1184:	03000004 	movweq	r0, #4
    1188:	00004524 	andeq	r4, r0, r4, lsr #10
    118c:	0d2c0300 	stceq	3, cr0, [ip, #-0]
    1190:	2c030000 	stccs	0, cr0, [r3], {-0}
    1194:	00000057 	andeq	r0, r0, r7, asr r0
    1198:	0000ad05 	andeq	sl, r0, r5, lsl #26
    119c:	071c0300 	ldreq	r0, [ip, -r0, lsl #6]
    11a0:	30030000 	andcc	r0, r3, r0
    11a4:	00000069 	andeq	r0, r0, r9, rrx
    11a8:	0000bd05 	andeq	fp, r0, r5, lsl #26
    11ac:	00bd0600 	adcseq	r0, sp, r0, lsl #12
    11b0:	00dd0000 	sbcseq	r0, sp, r0
    11b4:	90070000 	andls	r0, r7, r0
    11b8:	07000000 	streq	r0, [r0, -r0]
    11bc:	0c290800 	stceq	8, cr0, [r9], #-0
    11c0:	fa040000 	blx	1011c8 <startup-0x1fefee38>
    11c4:	0000b806 	andeq	fp, r0, r6, lsl #16
    11c8:	06640900 	strbteq	r0, [r4], -r0, lsl #18
    11cc:	3b050000 	blcc	1411d4 <startup-0x1febee2c>
    11d0:	000000bd 	strheq	r0, [r0], -sp
    11d4:	3701070a 	strcc	r0, [r1, -sl, lsl #14]
    11d8:	06000000 	streq	r0, [r0], -r0
    11dc:	010f035d 	tsteq	pc, sp, asr r3	; <UNPREDICTABLE>
    11e0:	920b0000 	andls	r0, fp, #0
    11e4:	0000001e 	andeq	r0, r0, lr, lsl r0
    11e8:	5445530c 	strbpl	r5, [r5], #-780	; 0xfffffcf4
    11ec:	0d000100 	stfeqs	f0, [r0, #-0]
    11f0:	0000158f 	andeq	r1, r0, pc, lsl #11
    11f4:	f4035d06 			; <UNDEFINED> instruction: 0xf4035d06
    11f8:	0d000000 	stceq	0, cr0, [r0, #-0]
    11fc:	00001066 	andeq	r1, r0, r6, rrx
    1200:	f4035d06 			; <UNDEFINED> instruction: 0xf4035d06
    1204:	0a000000 	beq	120c <startup-0x1fffedf4>
    1208:	00370107 	eorseq	r0, r7, r7, lsl #2
    120c:	5f060000 	svcpl	0x00060000
    1210:	00014203 	andeq	r4, r1, r3, lsl #4
    1214:	092f0b00 	stmdbeq	pc!, {r8, r9, fp}	; <UNPREDICTABLE>
    1218:	0b000000 	bleq	1220 <startup-0x1fffede0>
    121c:	00000bc8 	andeq	r0, r0, r8, asr #23
    1220:	b20d0001 	andlt	r0, sp, #1
    1224:	06000009 	streq	r0, [r0], -r9
    1228:	0127035f 			; <UNDEFINED> instruction: 0x0127035f
    122c:	100e0000 	andne	r0, lr, r0
    1230:	8c039506 	cfstr32hi	mvfx9, [r3], {6}
    1234:	0f000001 	svceq	0x00000001
    1238:	00524954 	subseq	r4, r2, r4, asr r9
    123c:	c8039706 	stmdagt	r3, {r1, r2, r8, r9, sl, ip, pc}
    1240:	00000000 	andeq	r0, r0, r0
    1244:	000d5d10 	andeq	r5, sp, r0, lsl sp
    1248:	03980600 	orrseq	r0, r8, #0, 12
    124c:	000000c8 	andeq	r0, r0, r8, asr #1
    1250:	0a581004 	beq	1605268 <startup-0x1e9fad98>
    1254:	99060000 	stmdbls	r6, {}	; <UNPREDICTABLE>
    1258:	0000c803 	andeq	ip, r0, r3, lsl #16
    125c:	77100800 	ldrvc	r0, [r0, -r0, lsl #16]
    1260:	06000008 	streq	r0, [r0], -r8
    1264:	00c8039a 	smulleq	r0, r8, sl, r3
    1268:	000c0000 	andeq	r0, ip, r0
    126c:	000b3e0d 	andeq	r3, fp, sp, lsl #28
    1270:	039b0600 	orrseq	r0, fp, #0, 12
    1274:	0000014e 	andeq	r0, r0, lr, asr #2
    1278:	a106100e 	tstge	r6, lr
    127c:	0001d603 	andeq	sp, r1, r3, lsl #12
    1280:	49520f00 	ldmdbmi	r2, {r8, r9, sl, fp}^
    1284:	a3060052 	movwge	r0, #24658	; 0x6052
    1288:	0000c803 	andeq	ip, r0, r3, lsl #16
    128c:	4f100000 	svcmi	0x00100000
    1290:	0600000d 	streq	r0, [r0], -sp
    1294:	00c803a4 	sbceq	r0, r8, r4, lsr #7
    1298:	10040000 	andne	r0, r4, r0
    129c:	00000a1e 	andeq	r0, r0, lr, lsl sl
    12a0:	c803a506 	stmdagt	r3, {r1, r2, r8, sl, sp, pc}
    12a4:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    12a8:	00087210 	andeq	r7, r8, r0, lsl r2
    12ac:	03a60600 			; <UNDEFINED> instruction: 0x03a60600
    12b0:	000000c8 	andeq	r0, r0, r8, asr #1
    12b4:	230d000c 	movwcs	r0, #53260	; 0xd00c
    12b8:	0600000a 	streq	r0, [r0], -sl
    12bc:	019803a7 	orrseq	r0, r8, r7, lsr #7
    12c0:	080e0000 	stmdaeq	lr, {}	; <UNPREDICTABLE>
    12c4:	0603ad06 	streq	sl, [r3], -r6, lsl #26
    12c8:	0f000002 	svceq	0x00000002
    12cc:	00315246 	eorseq	r5, r1, r6, asr #4
    12d0:	c803af06 	stmdagt	r3, {r1, r2, r8, r9, sl, fp, sp, pc}
    12d4:	00000000 	andeq	r0, r0, r0
    12d8:	3252460f 	subscc	r4, r2, #15728640	; 0xf00000
    12dc:	03b00600 	movseq	r0, #0, 12
    12e0:	000000c8 	andeq	r0, r0, r8, asr #1
    12e4:	830d0004 	movwhi	r0, #53252	; 0xd004
    12e8:	06000002 	streq	r0, [r0], -r2
    12ec:	01e203b1 	strheq	r0, [r2, #49]!	; 0x31
    12f0:	20110000 	andscs	r0, r1, r0
    12f4:	03b70603 			; <UNDEFINED> instruction: 0x03b70603
    12f8:	00000348 	andeq	r0, r0, r8, asr #6
    12fc:	52434d0f 	subpl	r4, r3, #960	; 0x3c0
    1300:	03b90600 			; <UNDEFINED> instruction: 0x03b90600
    1304:	000000c8 	andeq	r0, r0, r8, asr #1
    1308:	534d0f00 	movtpl	r0, #57088	; 0xdf00
    130c:	ba060052 	blt	18145c <startup-0x1fe7eba4>
    1310:	0000c803 	andeq	ip, r0, r3, lsl #16
    1314:	540f0400 	strpl	r0, [pc], #-1024	; 131c <startup-0x1fffece4>
    1318:	06005253 			; <UNDEFINED> instruction: 0x06005253
    131c:	00c803bb 	strheq	r0, [r8], #59	; 0x3b
    1320:	10080000 	andne	r0, r8, r0
    1324:	0000025f 	andeq	r0, r0, pc, asr r2
    1328:	c803bc06 	stmdagt	r3, {r1, r2, sl, fp, ip, sp, pc}
    132c:	0c000000 	stceq	0, cr0, [r0], {-0}
    1330:	00030510 	andeq	r0, r3, r0, lsl r5
    1334:	03bd0600 			; <UNDEFINED> instruction: 0x03bd0600
    1338:	000000c8 	andeq	r0, r0, r8, asr #1
    133c:	45490f10 	strbmi	r0, [r9, #-3856]	; 0xfffff0f0
    1340:	be060052 	mcrlt	0, 0, r0, cr6, cr2, {2}
    1344:	0000c803 	andeq	ip, r0, r3, lsl #16
    1348:	450f1400 	strmi	r1, [pc, #-1024]	; f50 <startup-0x1ffff0b0>
    134c:	06005253 			; <UNDEFINED> instruction: 0x06005253
    1350:	00c803bf 	strheq	r0, [r8], #63	; 0x3f
    1354:	0f180000 	svceq	0x00180000
    1358:	00525442 	subseq	r5, r2, r2, asr #8
    135c:	c803c006 	stmdagt	r3, {r1, r2, lr, pc}
    1360:	1c000000 	stcne	0, cr0, [r0], {-0}
    1364:	0002bd10 	andeq	fp, r2, r0, lsl sp
    1368:	03c10600 	biceq	r0, r1, #0, 12
    136c:	00000348 	andeq	r0, r0, r8, asr #6
    1370:	0d0d1220 	sfmeq	f1, 4, [sp, #-128]	; 0xffffff80
    1374:	c2060000 	andgt	r0, r6, #0
    1378:	00035803 	andeq	r5, r3, r3, lsl #16
    137c:	12018000 	andne	r8, r1, #0
    1380:	0000029e 	muleq	r0, lr, r2
    1384:	6803c306 	stmdavs	r3, {r1, r2, r8, r9, lr, pc}
    1388:	b0000003 	andlt	r0, r0, r3
    138c:	02c71201 	sbceq	r1, r7, #268435456	; 0x10000000
    1390:	c4060000 	strgt	r0, [r6], #-0
    1394:	00037803 	andeq	r7, r3, r3, lsl #16
    1398:	1301d000 	movwne	sp, #4096	; 0x1000
    139c:	00524d46 	subseq	r4, r2, r6, asr #26
    13a0:	c803c506 	stmdagt	r3, {r1, r2, r8, sl, lr, pc}
    13a4:	00000000 	andeq	r0, r0, r0
    13a8:	086d1202 	stmdaeq	sp!, {r1, r9, ip}^
    13ac:	c6060000 	strgt	r0, [r6], -r0
    13b0:	0000c803 	andeq	ip, r0, r3, lsl #16
    13b4:	12020400 	andne	r0, r2, #0, 8
    13b8:	00000367 	andeq	r0, r0, r7, ror #6
    13bc:	bd03c706 	stclt	7, cr12, [r3, #-24]	; 0xffffffe8
    13c0:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    13c4:	0b2c1202 	bleq	b05bd4 <startup-0x1f4fa42c>
    13c8:	c8060000 	stmdagt	r6, {}	; <UNPREDICTABLE>
    13cc:	0000c803 	andeq	ip, r0, r3, lsl #16
    13d0:	12020c00 	andne	r0, r2, #0, 24
    13d4:	00000371 	andeq	r0, r0, r1, ror r3
    13d8:	bd03c906 	vstrlt.16	s24, [r3, #-12]	; <UNPREDICTABLE>
    13dc:	10000000 	andne	r0, r0, r0
    13e0:	0b991202 	bleq	fe645bf0 <GPIO_Ports+0xde641de8>
    13e4:	ca060000 	bgt	1813ec <startup-0x1fe7ec14>
    13e8:	0000c803 	andeq	ip, r0, r3, lsl #16
    13ec:	12021400 	andne	r1, r2, #0, 8
    13f0:	000002f1 	strdeq	r0, [r0], -r1
    13f4:	bd03cb06 	vstrlt	d12, [r3, #-24]	; 0xffffffe8
    13f8:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    13fc:	0b9a1202 	bleq	fe685c0c <GPIO_Ports+0xde681e04>
    1400:	cc060000 	stcgt	0, cr0, [r6], {-0}
    1404:	0000c803 	andeq	ip, r0, r3, lsl #16
    1408:	12021c00 	andne	r1, r2, #0, 24
    140c:	000002fb 	strdeq	r0, [r0], -fp
    1410:	cd03cd06 	stcgt	13, cr12, [r3, #-24]	; 0xffffffe8
    1414:	20000000 	andcs	r0, r0, r0
    1418:	08f41202 	ldmeq	r4!, {r1, r9, ip}^
    141c:	ce060000 	cdpgt	0, 0, cr0, cr6, cr0, {0}
    1420:	00038803 	andeq	r8, r3, r3, lsl #16
    1424:	00024000 	andeq	r4, r2, r0
    1428:	0000bd06 	andeq	fp, r0, r6, lsl #26
    142c:	00035800 	andeq	r5, r3, r0, lsl #16
    1430:	00900700 	addseq	r0, r0, r0, lsl #14
    1434:	00570000 	subseq	r0, r7, r0
    1438:	00018c06 	andeq	r8, r1, r6, lsl #24
    143c:	00036800 	andeq	r6, r3, r0, lsl #16
    1440:	00900700 	addseq	r0, r0, r0, lsl #14
    1444:	00020000 	andeq	r0, r2, r0
    1448:	0001d606 	andeq	sp, r1, r6, lsl #12
    144c:	00037800 	andeq	r7, r3, r0, lsl #16
    1450:	00900700 	addseq	r0, r0, r0, lsl #14
    1454:	00010000 	andeq	r0, r1, r0
    1458:	0000bd06 	andeq	fp, r0, r6, lsl #26
    145c:	00038800 	andeq	r8, r3, r0, lsl #16
    1460:	00900700 	addseq	r0, r0, r0, lsl #14
    1464:	000b0000 	andeq	r0, fp, r0
    1468:	00020606 	andeq	r0, r2, r6, lsl #12
    146c:	00039800 	andeq	r9, r3, r0, lsl #16
    1470:	00900700 	addseq	r0, r0, r0, lsl #14
    1474:	001b0000 	andseq	r0, fp, r0
    1478:	0008ce0d 	andeq	ip, r8, sp, lsl #28
    147c:	03cf0600 	biceq	r0, pc, #0, 12
    1480:	00000212 	andeq	r0, r0, r2, lsl r2
    1484:	3d070c14 	stccc	12, cr0, [r7, #-80]	; 0xffffffb0
    1488:	00000431 	andeq	r0, r0, r1, lsr r4
    148c:	0006cd15 	andeq	ip, r6, r5, lsl sp
    1490:	a23f0700 	eorsge	r0, pc, #0, 14
    1494:	00000000 	andeq	r0, r0, r0
    1498:	0000fb15 	andeq	pc, r0, r5, lsl fp	; <UNPREDICTABLE>
    149c:	97420700 	strbls	r0, [r2, -r0, lsl #14]
    14a0:	02000000 	andeq	r0, r0, #0
    14a4:	00059c15 	andeq	r9, r5, r5, lsl ip
    14a8:	97450700 	strbls	r0, [r5, -r0, lsl #14]
    14ac:	03000000 	movweq	r0, #0
    14b0:	000bcf15 	andeq	ip, fp, r5, lsl pc
    14b4:	974a0700 	strbls	r0, [sl, -r0, lsl #14]
    14b8:	04000000 	streq	r0, [r0], #-0
    14bc:	000bd715 	andeq	sp, fp, r5, lsl r7
    14c0:	974e0700 	strbls	r0, [lr, -r0, lsl #14]
    14c4:	05000000 	streq	r0, [r0, #-0]
    14c8:	0000f215 	andeq	pc, r0, r5, lsl r2	; <UNPREDICTABLE>
    14cc:	42510700 	subsmi	r0, r1, #0, 14
    14d0:	06000001 	streq	r0, [r0], -r1
    14d4:	00034315 	andeq	r4, r3, r5, lsl r3
    14d8:	42540700 	subsmi	r0, r4, #0, 14
    14dc:	07000001 	streq	r0, [r0, -r1]
    14e0:	00099f15 	andeq	r9, r9, r5, lsl pc
    14e4:	42570700 	subsmi	r0, r7, #0, 14
    14e8:	08000001 	stmdaeq	r0, {r0}
    14ec:	000a1515 	andeq	r1, sl, r5, lsl r5
    14f0:	425a0700 	subsmi	r0, sl, #0, 14
    14f4:	09000001 	stmdbeq	r0, {r0}
    14f8:	00082215 	andeq	r2, r8, r5, lsl r2
    14fc:	425d0700 	subsmi	r0, sp, #0, 14
    1500:	0a000001 	beq	150c <startup-0x1fffeaf4>
    1504:	000d5415 	andeq	r5, sp, r5, lsl r4
    1508:	42600700 	rsbmi	r0, r0, #0, 14
    150c:	0b000001 	bleq	1518 <startup-0x1fffeae8>
    1510:	00650300 	rsbeq	r0, r5, r0, lsl #6
    1514:	62070000 	andvs	r0, r7, #0
    1518:	000003a4 	andeq	r0, r0, r4, lsr #7
    151c:	67070e14 	smladvs	r7, r4, lr, r0
    1520:	000004b1 			; <UNDEFINED> instruction: 0x000004b1
    1524:	000a7415 	andeq	r7, sl, r5, lsl r4
    1528:	a2690700 	rsbge	r0, r9, #0, 14
    152c:	00000000 	andeq	r0, r0, r0
    1530:	00007515 	andeq	r7, r0, r5, lsl r5
    1534:	a26d0700 	rsbge	r0, sp, #0, 14
    1538:	02000000 	andeq	r0, r0, #0
    153c:	00088115 	andeq	r8, r8, r5, lsl r1
    1540:	a2710700 	rsbsge	r0, r1, #0, 14
    1544:	04000000 	streq	r0, [r0], #-0
    1548:	000b6715 	andeq	r6, fp, r5, lsl r7
    154c:	a2760700 	rsbsge	r0, r6, #0, 14
    1550:	06000000 	streq	r0, [r0], -r0
    1554:	00032a15 	andeq	r2, r3, r5, lsl sl
    1558:	a27b0700 	rsbsge	r0, fp, #0, 14
    155c:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    1560:	0008da15 	andeq	sp, r8, r5, lsl sl
    1564:	977e0700 	ldrbls	r0, [lr, -r0, lsl #14]!
    1568:	0a000000 	beq	1570 <startup-0x1fffea90>
    156c:	000bdf15 	andeq	sp, fp, r5, lsl pc
    1570:	97800700 	strls	r0, [r0, r0, lsl #14]
    1574:	0b000000 	bleq	157c <startup-0x1fffea84>
    1578:	00016615 	andeq	r6, r1, r5, lsl r6
    157c:	97830700 	strls	r0, [r3, r0, lsl #14]
    1580:	0c000000 	stceq	0, cr0, [r0], {-0}
    1584:	00042715 	andeq	r2, r4, r5, lsl r7
    1588:	42860700 	addmi	r0, r6, #0, 14
    158c:	0d000001 	stceq	0, cr0, [r0, #-4]
    1590:	0d390300 	ldceq	3, cr0, [r9, #-0]
    1594:	88070000 	stmdahi	r7, {}	; <UNPREDICTABLE>
    1598:	0000043c 	andeq	r0, r0, ip, lsr r4
    159c:	8d071414 	cfstrshi	mvf1, [r7, #-80]	; 0xffffffb0
    15a0:	0000050d 	andeq	r0, r0, sp, lsl #10
    15a4:	00036115 	andeq	r6, r3, r5, lsl r1
    15a8:	bd8f0700 	stclt	7, cr0, [pc]	; 15b0 <startup-0x1fffea50>
    15ac:	00000000 	andeq	r0, r0, r0
    15b0:	00048b15 	andeq	r8, r4, r5, lsl fp
    15b4:	bd920700 	ldclt	7, cr0, [r2]
    15b8:	04000000 	streq	r0, [r0], #-0
    15bc:	45444916 	strbmi	r4, [r4, #-2326]	; 0xfffff6ea
    15c0:	97950700 	ldrls	r0, [r5, r0, lsl #14]
    15c4:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    15c8:	52545216 	subspl	r5, r4, #1610612737	; 0x60000001
    15cc:	97990700 	ldrls	r0, [r9, r0, lsl #14]
    15d0:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    15d4:	434c4416 	movtmi	r4, #50198	; 0xc416
    15d8:	979d0700 	ldrls	r0, [sp, r0, lsl #14]
    15dc:	0a000000 	beq	15e4 <startup-0x1fffea1c>
    15e0:	001fa115 	andseq	sl, pc, r5, lsl r1	; <UNPREDICTABLE>
    15e4:	0da10700 	stceq	7, cr0, [r1]
    15e8:	0b000005 	bleq	1604 <startup-0x1fffe9fc>
    15ec:	00970600 	addseq	r0, r7, r0, lsl #12
    15f0:	051d0000 	ldreq	r0, [sp, #-0]
    15f4:	90070000 	andls	r0, r7, r0
    15f8:	07000000 	streq	r0, [r0, -r0]
    15fc:	054b0300 	strbeq	r0, [fp, #-768]	; 0xfffffd00
    1600:	a3070000 	movwge	r0, #28672	; 0x7000
    1604:	000004bc 			; <UNDEFINED> instruction: 0x000004bc
    1608:	a8071414 	stmdage	r7, {r2, r4, sl, ip}
    160c:	00000585 	andeq	r0, r0, r5, lsl #11
    1610:	00036115 	andeq	r6, r3, r5, lsl r1
    1614:	bdaa0700 	stclt	7, cr0, [sl]
    1618:	00000000 	andeq	r0, r0, r0
    161c:	00048b15 	andeq	r8, r4, r5, lsl fp
    1620:	bdad0700 	stclt	7, cr0, [sp]
    1624:	04000000 	streq	r0, [r0], #-0
    1628:	45444916 	strbmi	r4, [r4, #-2326]	; 0xfffff6ea
    162c:	97b00700 	ldrls	r0, [r0, r0, lsl #14]!
    1630:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    1634:	52545216 	subspl	r5, r4, #1610612737	; 0x60000001
    1638:	97b40700 	ldrls	r0, [r4, r0, lsl #14]!
    163c:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    1640:	434c4416 	movtmi	r4, #50198	; 0xc416
    1644:	97b80700 	ldrls	r0, [r8, r0, lsl #14]!
    1648:	0a000000 	beq	1650 <startup-0x1fffe9b0>
    164c:	001fa115 	andseq	sl, pc, r5, lsl r1	; <UNPREDICTABLE>
    1650:	0dbb0700 	ldceq	7, cr0, [fp]
    1654:	0b000005 	bleq	1670 <startup-0x1fffe990>
    1658:	494d4616 	stmdbmi	sp, {r1, r2, r4, r9, sl, lr}^
    165c:	97be0700 	ldrls	r0, [lr, r0, lsl #14]!
    1660:	13000000 	movwne	r0, #0
    1664:	09370300 	ldmdbeq	r7!, {r8, r9}
    1668:	c1070000 	mrsgt	r0, (UNDEF: 7)
    166c:	00000528 	andeq	r0, r0, r8, lsr #10
    1670:	00106117 	andseq	r6, r0, r7, lsl r1
    1674:	07230100 	streq	r0, [r3, -r0, lsl #2]!
    1678:	0000011b 	andeq	r0, r0, fp, lsl r1
    167c:	20001930 	andcs	r1, r0, r0, lsr r9
    1680:	0000003a 	andeq	r0, r0, sl, lsr r0
    1684:	05d89c01 	ldrbeq	r9, [r8, #3073]	; 0xc01
    1688:	f1180000 			; <UNDEFINED> instruction: 0xf1180000
    168c:	0100000f 	tsteq	r0, pc
    1690:	00bd0723 	adcseq	r0, sp, r3, lsr #14
    1694:	91020000 	mrsls	r0, (UNDEF: 2)
    1698:	0fa1186c 	svceq	0x00a1186c
    169c:	23010000 	movwcs	r0, #4096	; 0x1000
    16a0:	0000bd07 	andeq	fp, r0, r7, lsl #26
    16a4:	68910200 	ldmvs	r1, {r9}
    16a8:	000fe019 	andeq	lr, pc, r9, lsl r0	; <UNPREDICTABLE>
    16ac:	07250100 	streq	r0, [r5, -r0, lsl #2]!
    16b0:	0000011b 	andeq	r0, r0, fp, lsl r1
    16b4:	00779102 	rsbseq	r9, r7, r2, lsl #2
    16b8:	00106f1a 	andseq	r6, r0, sl, lsl pc
    16bc:	06d50100 	ldrbeq	r0, [r5], r0, lsl #2
    16c0:	20001844 	andcs	r1, r0, r4, asr #16
    16c4:	000000ec 	andeq	r0, r0, ip, ror #1
    16c8:	060d9c01 	streq	r9, [sp], -r1, lsl #24
    16cc:	40180000 	andsmi	r0, r8, r0
    16d0:	01000010 	tsteq	r0, r0, lsl r0
    16d4:	060d06d5 			; <UNDEFINED> instruction: 0x060d06d5
    16d8:	91020000 	mrsls	r0, (UNDEF: 2)
    16dc:	0f871874 	svceq	0x00871874
    16e0:	d5010000 	strle	r0, [r1, #-0]
    16e4:	0000bd06 	andeq	fp, r0, r6, lsl #26
    16e8:	70910200 	addsvc	r0, r1, r0, lsl #4
    16ec:	98041b00 	stmdals	r4, {r8, r9, fp, ip}
    16f0:	1c000003 	stcne	0, cr0, [r0], {3}
    16f4:	00000fa8 	andeq	r0, r0, r8, lsr #31
    16f8:	1b066c01 	blne	19c704 <startup-0x1fe638fc>
    16fc:	54000001 	strpl	r0, [r0], #-1
    1700:	f0200016 			; <UNDEFINED> instruction: 0xf0200016
    1704:	01000001 	tsteq	r0, r1
    1708:	00065b9c 	muleq	r6, ip, fp
    170c:	10401800 	subne	r1, r0, r0, lsl #16
    1710:	6c010000 	stcvs	0, cr0, [r1], {-0}
    1714:	00060d06 	andeq	r0, r6, r6, lsl #26
    1718:	64910200 	ldrvs	r0, [r1], #512	; 0x200
    171c:	000f8718 	andeq	r8, pc, r8, lsl r7	; <UNPREDICTABLE>
    1720:	066c0100 	strbteq	r0, [ip], -r0, lsl #2
    1724:	000000bd 	strheq	r0, [r0], -sp
    1728:	19609102 	stmdbne	r0!, {r1, r8, ip, pc}^
    172c:	00000fe8 	andeq	r0, r0, r8, ror #31
    1730:	1b066e01 	blne	19cf3c <startup-0x1fe630c4>
    1734:	02000001 	andeq	r0, r0, #1
    1738:	1a006f91 	bne	1d584 <startup-0x1ffe2a7c>
    173c:	00000d9c 	muleq	r0, ip, sp
    1740:	e4062f01 	str	r2, [r6], #-3841	; 0xfffff0ff
    1744:	70200015 	eorvc	r0, r0, r5, lsl r0
    1748:	01000000 	mrseq	r0, (UNDEF: 0)
    174c:	00069f9c 	muleq	r6, ip, pc	; <UNPREDICTABLE>
    1750:	10401800 	subne	r1, r0, r0, lsl #16
    1754:	2f010000 	svccs	0x00010000
    1758:	00060d06 	andeq	r0, r6, r6, lsl #26
    175c:	6c910200 	lfmvs	f0, 4, [r1], {0}
    1760:	000fb818 	andeq	fp, pc, r8, lsl r8	; <UNPREDICTABLE>
    1764:	062f0100 	strteq	r0, [pc], -r0, lsl #2
    1768:	000000bd 	strheq	r0, [r0], -sp
    176c:	19689102 	stmdbne	r8!, {r1, r8, ip, pc}^
    1770:	00001019 	andeq	r1, r0, r9, lsl r0
    1774:	bd063101 	stflts	f3, [r6, #-4]
    1778:	02000000 	andeq	r0, r0, #0
    177c:	1d007491 	cfstrsne	mvf7, [r0, #-580]	; 0xfffffdbc
    1780:	00001021 	andeq	r1, r0, r1, lsr #32
    1784:	0f05ca01 	svceq	0x0005ca01
    1788:	f4000001 	vst4.8	{d0-d3}, [r0], r1
    178c:	f0200014 			; <UNDEFINED> instruction: 0xf0200014
    1790:	01000000 	mrseq	r0, (UNDEF: 0)
    1794:	0006e79c 	muleq	r6, ip, r7
    1798:	10401800 	subne	r1, r0, r0, lsl #16
    179c:	ca010000 	bgt	417a4 <startup-0x1ffbe85c>
    17a0:	00060d05 	andeq	r0, r6, r5, lsl #26
    17a4:	6c910200 	lfmvs	f0, 4, [r1], {0}
    17a8:	000fb818 	andeq	fp, pc, r8, lsl r8	; <UNPREDICTABLE>
    17ac:	05ca0100 	strbeq	r0, [sl, #256]	; 0x100
    17b0:	000000bd 	strheq	r0, [r0], -sp
    17b4:	19689102 	stmdbne	r8!, {r1, r8, ip, pc}^
    17b8:	00000fe7 	andeq	r0, r0, r7, ror #31
    17bc:	0f05cc01 	svceq	0x0005cc01
    17c0:	02000001 	andeq	r0, r0, #1
    17c4:	1a007791 	bne	1f610 <startup-0x1ffe09f0>
    17c8:	00001033 	andeq	r1, r0, r3, lsr r0
    17cc:	ba05a101 	blt	169bd8 <startup-0x1fe96428>
    17d0:	3a200014 	bcc	801828 <startup-0x1f7fe7d8>
    17d4:	01000000 	mrseq	r0, (UNDEF: 0)
    17d8:	00072b9c 	muleq	r7, ip, fp
    17dc:	10401800 	subne	r1, r0, r0, lsl #16
    17e0:	a1010000 	mrsge	r0, (UNDEF: 1)
    17e4:	00060d05 	andeq	r0, r6, r5, lsl #26
    17e8:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    17ec:	000f8718 	andeq	r8, pc, r8, lsl r7	; <UNPREDICTABLE>
    17f0:	05a10100 	streq	r0, [r1, #256]!	; 0x100
    17f4:	000000bd 	strheq	r0, [r0], -sp
    17f8:	18709102 	ldmdane	r0!, {r1, r8, ip, pc}^
    17fc:	00000efe 	strdeq	r0, [r0], -lr
    1800:	4205a101 	andmi	sl, r5, #1073741824	; 0x40000000
    1804:	02000001 	andeq	r0, r0, #1
    1808:	1d006f91 	stcne	15, cr6, [r0, #-580]	; 0xfffffdbc
    180c:	00000eb4 			; <UNDEFINED> instruction: 0x00000eb4
    1810:	9704d301 	strls	sp, [r4, -r1, lsl #6]
    1814:	94000000 	strls	r0, [r0], #-0
    1818:	26200014 			; <UNDEFINED> instruction: 0x26200014
    181c:	01000000 	mrseq	r0, (UNDEF: 0)
    1820:	0007649c 	muleq	r7, ip, r4
    1824:	10401800 	subne	r1, r0, r0, lsl #16
    1828:	d3010000 	movwle	r0, #4096	; 0x1000
    182c:	00060d04 	andeq	r0, r6, r4, lsl #26
    1830:	6c910200 	lfmvs	f0, 4, [r1], {0}
    1834:	00145019 	andseq	r5, r4, r9, lsl r0
    1838:	04d50100 	ldrbeq	r0, [r5], #256	; 0x100
    183c:	00000097 	muleq	r0, r7, r0
    1840:	00779102 	rsbseq	r9, r7, r2, lsl #2
    1844:	0010961d 	andseq	r9, r0, sp, lsl r6
    1848:	04be0100 	ldrteq	r0, [lr], #256	; 0x100
    184c:	00000097 	muleq	r0, r7, r0
    1850:	2000146e 	andcs	r1, r0, lr, ror #8
    1854:	00000026 	andeq	r0, r0, r6, lsr #32
    1858:	079d9c01 	ldreq	r9, [sp, r1, lsl #24]
    185c:	40180000 	andsmi	r0, r8, r0
    1860:	01000010 	tsteq	r0, r0, lsl r0
    1864:	060d04be 			; <UNDEFINED> instruction: 0x060d04be
    1868:	91020000 	mrsls	r0, (UNDEF: 2)
    186c:	1450196c 	ldrbne	r1, [r0], #-2412	; 0xfffff694
    1870:	c0010000 	andgt	r0, r1, r0
    1874:	00009704 	andeq	r9, r0, r4, lsl #14
    1878:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    187c:	0ed31d00 	cdpeq	13, 13, cr1, cr3, cr0, {0}
    1880:	a4010000 	strge	r0, [r1], #-0
    1884:	00009704 	andeq	r9, r0, r4, lsl #14
    1888:	00144000 	andseq	r4, r4, r0
    188c:	00002e20 	andeq	r2, r0, r0, lsr #28
    1890:	d69c0100 	ldrle	r0, [ip], r0, lsl #2
    1894:	18000007 	stmdane	r0, {r0, r1, r2}
    1898:	00001040 	andeq	r1, r0, r0, asr #32
    189c:	0d04a401 	cfstrseq	mvf10, [r4, #-4]
    18a0:	02000006 	andeq	r0, r0, #6
    18a4:	d6196c91 			; <UNDEFINED> instruction: 0xd6196c91
    18a8:	0100000f 	tsteq	r0, pc
    18ac:	009704a6 	addseq	r0, r7, r6, lsr #9
    18b0:	91020000 	mrsls	r0, (UNDEF: 2)
    18b4:	f31d0077 	vqadd.u16	q0, <illegal reg q6.5>, <illegal reg q11.5>
    18b8:	0100000e 	tsteq	r0, lr
    18bc:	00970466 	addseq	r0, r7, r6, ror #8
    18c0:	13de0000 	bicsne	r0, lr, #0
    18c4:	00622000 	rsbeq	r2, r2, r0
    18c8:	9c010000 	stcls	0, cr0, [r1], {-0}
    18cc:	0000081e 	andeq	r0, r0, lr, lsl r8
    18d0:	00104018 	andseq	r4, r0, r8, lsl r0
    18d4:	04660100 	strbteq	r0, [r6], #-256	; 0xffffff00
    18d8:	0000060d 	andeq	r0, r0, sp, lsl #12
    18dc:	196c9102 	stmdbne	ip!, {r1, r8, ip, pc}^
    18e0:	00000fc1 	andeq	r0, r0, r1, asr #31
    18e4:	bd046801 	stclt	8, cr6, [r4, #-4]
    18e8:	02000000 	andeq	r0, r0, #0
    18ec:	c7197491 			; <UNDEFINED> instruction: 0xc7197491
    18f0:	01000010 	tsteq	r0, r0, lsl r0
    18f4:	00970469 	addseq	r0, r7, r9, ror #8
    18f8:	91020000 	mrsls	r0, (UNDEF: 2)
    18fc:	971d0073 			; <UNDEFINED> instruction: 0x971d0073
    1900:	0100000f 	tsteq	r0, pc
    1904:	0097044c 	addseq	r0, r7, ip, asr #8
    1908:	139c0000 	orrsne	r0, ip, #0
    190c:	00422000 	subeq	r2, r2, r0
    1910:	9c010000 	stcls	0, cr0, [r1], {-0}
    1914:	00000857 	andeq	r0, r0, r7, asr r8
    1918:	00104018 	andseq	r4, r0, r8, lsl r0
    191c:	044c0100 	strbeq	r0, [ip], #-256	; 0xffffff00
    1920:	0000060d 	andeq	r0, r0, sp, lsl #12
    1924:	196c9102 	stmdbne	ip!, {r1, r8, ip, pc}^
    1928:	00000e40 	andeq	r0, r0, r0, asr #28
    192c:	97044e01 	strls	r4, [r4, -r1, lsl #28]
    1930:	02000000 	andeq	r0, r0, #0
    1934:	1d007791 	stcne	7, cr7, [r0, #-580]	; 0xfffffdbc
    1938:	00000f59 	andeq	r0, r0, r9, asr pc
    193c:	9703fa01 	strls	pc, [r3, -r1, lsl #20]
    1940:	78000000 	stmdavc	r0, {}	; <UNPREDICTABLE>
    1944:	24200012 	strtcs	r0, [r0], #-18	; 0xffffffee
    1948:	01000001 	tsteq	r0, r1
    194c:	0008ae9c 	muleq	r8, ip, lr
    1950:	10401800 	subne	r1, r0, r0, lsl #16
    1954:	fa010000 	blx	4195c <startup-0x1ffbe6a4>
    1958:	00060d03 	andeq	r0, r6, r3, lsl #26
    195c:	6c910200 	lfmvs	f0, 4, [r1], {0}
    1960:	00100718 	andseq	r0, r0, r8, lsl r7
    1964:	03fa0100 	mvnseq	r0, #0, 2
    1968:	00000097 	muleq	r0, r7, r0
    196c:	196b9102 	stmdbne	fp!, {r1, r8, ip, pc}^
    1970:	00000575 	andeq	r0, r0, r5, ror r5
    1974:	9703fc01 	strls	pc, [r3, -r1, lsl #24]
    1978:	02000000 	andeq	r0, r0, #0
    197c:	72197791 	andsvc	r7, r9, #38010880	; 0x2440000
    1980:	0100000f 	tsteq	r0, pc
    1984:	00bd03ff 	ldrshteq	r0, [sp], pc
    1988:	91020000 	mrsls	r0, (UNDEF: 2)
    198c:	331d0070 	tstcc	sp, #112	; 0x70
    1990:	0100000f 	tsteq	r0, pc
    1994:	009703c8 	addseq	r0, r7, r8, asr #7
    1998:	12180000 	andsne	r0, r8, #0
    199c:	00602000 	rsbeq	r2, r0, r0
    19a0:	9c010000 	stcls	0, cr0, [r1], {-0}
    19a4:	000008f6 	strdeq	r0, [r0], -r6
    19a8:	00104018 	andseq	r4, r0, r8, lsl r0
    19ac:	03c80100 	biceq	r0, r8, #0, 2
    19b0:	0000060d 	andeq	r0, r0, sp, lsl #12
    19b4:	186c9102 	stmdane	ip!, {r1, r8, ip, pc}^
    19b8:	00000fcb 	andeq	r0, r0, fp, asr #31
    19bc:	9703c801 	strls	ip, [r3, -r1, lsl #16]
    19c0:	02000000 	andeq	r0, r0, #0
    19c4:	82196b91 	andshi	r6, r9, #148480	; 0x24400
    19c8:	0100000e 	tsteq	r0, lr
    19cc:	009703ca 	addseq	r0, r7, sl, asr #7
    19d0:	91020000 	mrsls	r0, (UNDEF: 2)
    19d4:	611a0077 	tstvs	sl, r7, ror r0
    19d8:	0100000e 	tsteq	r0, lr
    19dc:	11e003b0 	strhne	r0, [r0, #48]!	; 0x30
    19e0:	00382000 	eorseq	r2, r8, r0
    19e4:	9c010000 	stcls	0, cr0, [r1], {-0}
    19e8:	0000092b 	andeq	r0, r0, fp, lsr #18
    19ec:	00104018 	andseq	r4, r0, r8, lsl r0
    19f0:	03b00100 	movseq	r0, #0, 2
    19f4:	0000060d 	andeq	r0, r0, sp, lsl #12
    19f8:	18749102 	ldmdane	r4!, {r1, r8, ip, pc}^
    19fc:	00000fcb 	andeq	r0, r0, fp, asr #31
    1a00:	9703b001 	strls	fp, [r3, -r1]
    1a04:	02000000 	andeq	r0, r0, #0
    1a08:	1a007391 	bne	1e854 <startup-0x1ffe17ac>
    1a0c:	00001045 	andeq	r1, r0, r5, asr #32
    1a10:	36037e01 	strcc	r7, [r3], -r1, lsl #28
    1a14:	aa200010 	bge	801a5c <startup-0x1f7fe5a4>
    1a18:	01000001 	tsteq	r0, r1
    1a1c:	00096f9c 	muleq	r9, ip, pc	; <UNPREDICTABLE>
    1a20:	10401800 	subne	r1, r0, r0, lsl #16
    1a24:	7e010000 	cdpvc	0, 0, cr0, cr1, cr0, {0}
    1a28:	00060d03 	andeq	r0, r6, r3, lsl #26
    1a2c:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    1a30:	000fcb18 	andeq	ip, pc, r8, lsl fp	; <UNPREDICTABLE>
    1a34:	037e0100 	cmneq	lr, #0, 2
    1a38:	00000097 	muleq	r0, r7, r0
    1a3c:	18739102 	ldmdane	r3!, {r1, r8, ip, pc}^
    1a40:	00000daa 	andeq	r0, r0, sl, lsr #27
    1a44:	6f037e01 	svcvs	0x00037e01
    1a48:	02000009 	andeq	r0, r0, #9
    1a4c:	1b006c91 	blne	1cc98 <startup-0x1ffe3368>
    1a50:	00058504 	andeq	r8, r5, r4, lsl #10
    1a54:	0f071a00 	svceq	0x00071a00
    1a58:	4e010000 	cdpmi	0, 0, cr0, cr1, cr0, {0}
    1a5c:	000fe003 	andeq	lr, pc, r3
    1a60:	00005620 	andeq	r5, r0, r0, lsr #12
    1a64:	aa9c0100 	bge	fe701e6c <GPIO_Ports+0xde6fe064>
    1a68:	18000009 	stmdane	r0, {r0, r3}
    1a6c:	00001040 	andeq	r1, r0, r0, asr #32
    1a70:	0d034e01 	stceq	14, cr4, [r3, #-4]
    1a74:	02000006 	andeq	r0, r0, #6
    1a78:	59187491 	ldmdbpl	r8, {r0, r4, r7, sl, ip, sp, lr}
    1a7c:	01000010 	tsteq	r0, r0, lsl r0
    1a80:	0097034e 	addseq	r0, r7, lr, asr #6
    1a84:	91020000 	mrsls	r0, (UNDEF: 2)
    1a88:	921d0073 	andsls	r0, sp, #115	; 0x73
    1a8c:	0100000e 	tsteq	r0, lr
    1a90:	00970317 	addseq	r0, r7, r7, lsl r3
    1a94:	0f0a0000 	svceq	0x000a0000
    1a98:	00d62000 	sbcseq	r2, r6, r0
    1a9c:	9c010000 	stcls	0, cr0, [r1], {-0}
    1aa0:	000009f2 	strdeq	r0, [r0], -r2
    1aa4:	00104018 	andseq	r4, r0, r8, lsl r0
    1aa8:	03170100 	tsteq	r7, #0, 2
    1aac:	0000060d 	andeq	r0, r0, sp, lsl #12
    1ab0:	186c9102 	stmdane	ip!, {r1, r8, ip, pc}^
    1ab4:	00001051 	andeq	r1, r0, r1, asr r0
    1ab8:	97031701 	strls	r1, [r3, -r1, lsl #14]
    1abc:	02000000 	andeq	r0, r0, #0
    1ac0:	ec196b91 			; <UNDEFINED> instruction: 0xec196b91
    1ac4:	01000000 	mrseq	r0, (UNDEF: 0)
    1ac8:	00bd0319 	adcseq	r0, sp, r9, lsl r3
    1acc:	91020000 	mrsls	r0, (UNDEF: 2)
    1ad0:	7a1d0074 	bvc	741ca8 <startup-0x1f8be358>
    1ad4:	0100000f 	tsteq	r0, pc
    1ad8:	009702ce 	addseq	r0, r7, lr, asr #5
    1adc:	0d280000 	stceq	0, cr0, [r8, #-0]
    1ae0:	01e22000 	mvneq	r2, r0
    1ae4:	9c010000 	stcls	0, cr0, [r1], {-0}
    1ae8:	00000a3a 	andeq	r0, r0, sl, lsr sl
    1aec:	00104018 	andseq	r4, r0, r8, lsl r0
    1af0:	02ce0100 	sbceq	r0, lr, #0, 2
    1af4:	0000060d 	andeq	r0, r0, sp, lsl #12
    1af8:	18649102 	stmdane	r4!, {r1, r8, ip, pc}^
    1afc:	00000f29 	andeq	r0, r0, r9, lsr #30
    1b00:	3a02ce01 	bcc	b530c <startup-0x1ff4acf4>
    1b04:	0200000a 	andeq	r0, r0, #10
    1b08:	85196091 	ldrhi	r6, [r9, #-145]	; 0xffffff6f
    1b0c:	01000010 	tsteq	r0, r0, lsl r0
    1b10:	009702d0 			; <UNDEFINED> instruction: 0x009702d0
    1b14:	91020000 	mrsls	r0, (UNDEF: 2)
    1b18:	041b006f 	ldreq	r0, [fp], #-111	; 0xffffff91
    1b1c:	0000051d 	andeq	r0, r0, sp, lsl r5
    1b20:	000e711a 	andeq	r7, lr, sl, lsl r1
    1b24:	02970100 	addseq	r0, r7, #0, 2
    1b28:	20000c60 	andcs	r0, r0, r0, ror #24
    1b2c:	000000c8 	andeq	r0, r0, r8, asr #1
    1b30:	0a759c01 	beq	1d68b3c <startup-0x1e2974c4>
    1b34:	40180000 	andsmi	r0, r8, r0
    1b38:	01000010 	tsteq	r0, r0, lsl r0
    1b3c:	060d0297 			; <UNDEFINED> instruction: 0x060d0297
    1b40:	91020000 	mrsls	r0, (UNDEF: 2)
    1b44:	0efe1874 	mrceq	8, 7, r1, cr14, cr4, {3}
    1b48:	97010000 	strls	r0, [r1, -r0]
    1b4c:	00014202 	andeq	r4, r1, r2, lsl #4
    1b50:	73910200 	orrsvc	r0, r1, #0, 4
    1b54:	0ff91a00 	svceq	0x00f91a00
    1b58:	78010000 	stmdavc	r1, {}	; <UNPREDICTABLE>
    1b5c:	000c2002 	andeq	r2, ip, r2
    1b60:	00004020 	andeq	r4, r0, r0, lsr #32
    1b64:	aa9c0100 	bge	fe701f6c <GPIO_Ports+0xde6fe164>
    1b68:	1800000a 	stmdane	r0, {r1, r3}
    1b6c:	00001040 	andeq	r1, r0, r0, asr #32
    1b70:	0d027801 	stceq	8, cr7, [r2, #-4]
    1b74:	02000006 	andeq	r0, r0, #6
    1b78:	fe187491 	mrc2	4, 0, r7, cr8, cr1, {4}
    1b7c:	0100000e 	tsteq	r0, lr
    1b80:	01420278 	hvceq	8232	; 0x2028
    1b84:	91020000 	mrsls	r0, (UNDEF: 2)
    1b88:	461a0073 			; <UNDEFINED> instruction: 0x461a0073
    1b8c:	0100000f 	tsteq	r0, pc
    1b90:	0bae025e 	bleq	feb82510 <GPIO_Ports+0xdeb7e708>
    1b94:	00722000 	rsbseq	r2, r2, r0
    1b98:	9c010000 	stcls	0, cr0, [r1], {-0}
    1b9c:	00000ad0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    1ba0:	000ea518 	andeq	sl, lr, r8, lsl r5
    1ba4:	025e0100 	subseq	r0, lr, #0, 2
    1ba8:	00000097 	muleq	r0, r7, r0
    1bac:	00779102 	rsbseq	r9, r7, r2, lsl #2
    1bb0:	000e311a 	andeq	r3, lr, sl, lsl r1
    1bb4:	021c0100 	andseq	r0, ip, #0, 2
    1bb8:	20000b5c 	andcs	r0, r0, ip, asr fp
    1bbc:	00000052 	andeq	r0, r0, r2, asr r0
    1bc0:	0af69c01 	beq	ffda8bcc <GPIO_Ports+0xdfda4dc4>
    1bc4:	1a180000 	bne	601bcc <startup-0x1f9fe434>
    1bc8:	0100000f 	tsteq	r0, pc
    1bcc:	0af6021c 	beq	ffd82444 <GPIO_Ports+0xdfd7e63c>
    1bd0:	91020000 	mrsls	r0, (UNDEF: 2)
    1bd4:	041b0074 	ldreq	r0, [fp], #-116	; 0xffffff8c
    1bd8:	00000431 	andeq	r0, r0, r1, lsr r4
    1bdc:	0010d41a 	andseq	sp, r0, sl, lsl r4
    1be0:	01c00100 	biceq	r0, r0, r0, lsl #2
    1be4:	200009ac 	andcs	r0, r0, ip, lsr #19
    1be8:	000001b0 			; <UNDEFINED> instruction: 0x000001b0
    1bec:	0b319c01 	bleq	c68bf8 <startup-0x1f397408>
    1bf0:	4c180000 	ldcmi	0, cr0, [r8], {-0}
    1bf4:	0100000e 	tsteq	r0, lr
    1bf8:	0b3101c0 	bleq	c42300 <startup-0x1f3bdd00>
    1bfc:	91020000 	mrsls	r0, (UNDEF: 2)
    1c00:	10b11964 	adcsne	r1, r1, r4, ror #18
    1c04:	c2010000 	andgt	r0, r1, #0
    1c08:	0000bd01 	andeq	fp, r0, r1, lsl #26
    1c0c:	6c910200 	lfmvs	f0, 4, [r1], {0}
    1c10:	b1041b00 	tstlt	r4, r0, lsl #22
    1c14:	1e000004 	cdpne	0, 0, cr0, cr0, cr4, {0}
    1c18:	00000f8e 	andeq	r0, r0, lr, lsl #31
    1c1c:	0097d801 	addseq	sp, r7, r1, lsl #16
    1c20:	07e80000 	strbeq	r0, [r8, r0]!
    1c24:	01c42000 	biceq	r2, r4, r0
    1c28:	9c010000 	stcls	0, cr0, [r1], {-0}
    1c2c:	00000b89 	andeq	r0, r0, r9, lsl #23
    1c30:	0010401f 	andseq	r4, r0, pc, lsl r0
    1c34:	0dd80100 	ldfeqe	f0, [r8]
    1c38:	02000006 	andeq	r0, r0, #6
    1c3c:	1a1f6c91 	bne	7dce88 <startup-0x1f823178>
    1c40:	0100000f 	tsteq	r0, pc
    1c44:	000af6d8 	ldrdeq	pc, [sl], -r8
    1c48:	68910200 	ldmvs	r1, {r9}
    1c4c:	000ee820 	andeq	lr, lr, r0, lsr #16
    1c50:	97da0100 	ldrbls	r0, [sl, r0, lsl #2]
    1c54:	02000000 	andeq	r0, r0, #0
    1c58:	e3207791 			; <UNDEFINED> instruction: 0xe3207791
    1c5c:	01000010 	tsteq	r0, r0, lsl r0
    1c60:	0000bddb 	ldrdeq	fp, [r0], -fp	; <UNPREDICTABLE>
    1c64:	70910200 	addsvc	r0, r1, r0, lsl #4
    1c68:	0d912100 	ldfeqs	f2, [r1]
    1c6c:	a7010000 	strge	r0, [r1, -r0]
    1c70:	20000798 	mulcs	r0, r8, r7
    1c74:	00000050 	andeq	r0, r0, r0, asr r0
    1c78:	401f9c01 	andsmi	r9, pc, r1, lsl #24
    1c7c:	01000010 	tsteq	r0, r0, lsl r0
    1c80:	00060da7 	andeq	r0, r6, r7, lsr #27
    1c84:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    1c88:	1b340000 	blne	d01c90 <startup-0x1f2fe370>
    1c8c:	00040000 	andeq	r0, r4, r0
    1c90:	000004a3 	andeq	r0, r0, r3, lsr #9
    1c94:	04b30104 	ldrteq	r0, [r3], #260	; 0x104
    1c98:	e40c0000 	str	r0, [ip], #-0
    1c9c:	3c000017 	stccc	0, cr0, [r0], {23}
    1ca0:	00000004 	andeq	r0, r0, r4
    1ca4:	00000000 	andeq	r0, r0, r0
    1ca8:	e9000000 	stmdb	r0, {}	; <UNPREDICTABLE>
    1cac:	02000006 	andeq	r0, r0, #6
    1cb0:	00000c24 	andeq	r0, r0, r4, lsr #24
    1cb4:	02530105 	subseq	r0, r3, #1073741825	; 0x40000001
    1cb8:	c8050000 	stmdagt	r5, {}	; <UNPREDICTABLE>
    1cbc:	00000253 	andeq	r0, r0, r3, asr r2
    1cc0:	00061f03 	andeq	r1, r6, r3, lsl #30
    1cc4:	4e037200 	cdpmi	2, 0, cr7, cr3, cr0, {0}
    1cc8:	74000006 	strvc	r0, [r0], #-6
    1ccc:	0006e303 	andeq	lr, r6, r3, lsl #6
    1cd0:	85037500 	strhi	r7, [r3, #-1280]	; 0xfffffb00
    1cd4:	76000003 	strvc	r0, [r0], -r3
    1cd8:	00079903 	andeq	r9, r7, r3, lsl #18
    1cdc:	11037b00 	tstne	r3, r0, lsl #22
    1ce0:	7c00000b 	stcvc	0, cr0, [r0], {11}
    1ce4:	000cee03 	andeq	lr, ip, r3, lsl #28
    1ce8:	41037e00 	tstmi	r3, r0, lsl #28
    1cec:	7f000002 	svcvc	0x00000002
    1cf0:	00063304 	andeq	r3, r6, r4, lsl #6
    1cf4:	9b040000 	blls	101cfc <startup-0x1fefe304>
    1cf8:	0100000a 	tsteq	r0, sl
    1cfc:	00067404 	andeq	r7, r6, r4, lsl #8
    1d00:	09040200 	stmdbeq	r4, {r9}
    1d04:	03000000 	movweq	r0, #0
    1d08:	0000bf04 	andeq	fp, r0, r4, lsl #30
    1d0c:	90040400 	andls	r0, r4, r0, lsl #8
    1d10:	0500000b 	streq	r0, [r0, #-11]
    1d14:	000acb04 	andeq	ip, sl, r4, lsl #22
    1d18:	bf040600 	svclt	0x00040600
    1d1c:	07000005 	streq	r0, [r0, -r5]
    1d20:	00001704 	andeq	r1, r0, r4, lsl #14
    1d24:	e3040800 	movw	r0, #18432	; 0x4800
    1d28:	0900000c 	stmdbeq	r0, {r2, r3}
    1d2c:	00083c04 	andeq	r3, r8, r4, lsl #24
    1d30:	7e040a00 	vmlavc.f32	s0, s8, s0
    1d34:	0b000009 	bleq	1d60 <startup-0x1fffe2a0>
    1d38:	00089d04 	andeq	r9, r8, r4, lsl #26
    1d3c:	ab040c00 	blge	104d44 <startup-0x1fefb2bc>
    1d40:	0d000002 	stceq	0, cr0, [r0, #-8]
    1d44:	000ba404 	andeq	sl, fp, r4, lsl #8
    1d48:	db040e00 	blle	105550 <startup-0x1fefaab0>
    1d4c:	0f00000a 	svceq	0x0000000a
    1d50:	0005d704 	andeq	sp, r5, r4, lsl #14
    1d54:	22041000 	andcs	r1, r4, #0
    1d58:	11000000 	mrsne	r0, (UNDEF: 0)
    1d5c:	000a6b04 	andeq	r6, sl, r4, lsl #22
    1d60:	ca041200 	bgt	106568 <startup-0x1fef9a98>
    1d64:	13000005 	movwne	r0, #5
    1d68:	00041904 	andeq	r1, r4, r4, lsl #18
    1d6c:	75041400 	strvc	r1, [r4, #-1024]	; 0xfffffc00
    1d70:	1500000c 	strne	r0, [r0, #-12]
    1d74:	00068404 	andeq	r8, r6, r4, lsl #8
    1d78:	90041600 	andls	r1, r4, r0, lsl #12
    1d7c:	1700000c 	strne	r0, [r0, -ip]
    1d80:	0006fc04 	andeq	pc, r6, r4, lsl #24
    1d84:	16041800 	strne	r1, [r4], -r0, lsl #16
    1d88:	1900000c 	stmdbne	r0, {r2, r3}
    1d8c:	00020704 	andeq	r0, r2, r4, lsl #14
    1d90:	a4041a00 	strge	r1, [r4], #-2560	; 0xfffff600
    1d94:	1b000005 	blne	1db0 <startup-0x1fffe250>
    1d98:	00011604 	andeq	r1, r1, r4, lsl #12
    1d9c:	ff041c00 			; <UNDEFINED> instruction: 0xff041c00
    1da0:	1d000009 	stcne	0, cr0, [r0, #-36]	; 0xffffffdc
    1da4:	0004a904 	andeq	sl, r4, r4, lsl #18
    1da8:	5f041e00 	svcpl	0x00041e00
    1dac:	1f000005 	svcne	0x00000005
    1db0:	00031d04 	andeq	r1, r3, r4, lsl #26
    1db4:	60042000 	andvs	r2, r4, r0
    1db8:	21000008 	tstcs	r0, r8
    1dbc:	0006c004 	andeq	ip, r6, r4
    1dc0:	77042200 	strvc	r2, [r4, -r0, lsl #4]
    1dc4:	23000007 	movwcs	r0, #7
    1dc8:	00018004 	andeq	r8, r1, r4
    1dcc:	09042400 	stmdbeq	r4, {sl, sp}
    1dd0:	2500000a 	strcs	r0, [r0, #-10]
    1dd4:	000bb604 	andeq	fp, fp, r4, lsl #12
    1dd8:	4e042600 	cfmadd32mi	mvax0, mvfx2, mvfx4, mvfx0
    1ddc:	27000002 	strcs	r0, [r0, -r2]
    1de0:	0009d904 	andeq	sp, r9, r4, lsl #18
    1de4:	90042800 	andls	r2, r4, r0, lsl #16
    1de8:	29000009 	stmdbcs	r0, {r0, r3}
    1dec:	00082b04 	andeq	r2, r8, r4, lsl #22
    1df0:	8a042a00 	bhi	10c5f8 <startup-0x1fef3a08>
    1df4:	2b000001 	blcs	1e00 <startup-0x1fffe200>
    1df8:	00003404 	andeq	r3, r0, r4, lsl #8
    1dfc:	e9042c00 	stmdb	r4, {sl, fp, sp}
    1e00:	2d000005 	stccs	0, cr0, [r0, #-20]	; 0xffffffec
    1e04:	000cc104 	andeq	ip, ip, r4, lsl #2
    1e08:	18042e00 	stmdane	r4, {r9, sl, fp, sp}
    1e0c:	2f00000d 	svccs	0x0000000d
    1e10:	000ac104 	andeq	ip, sl, r4, lsl #2
    1e14:	ce043000 	cdpgt	0, 0, cr3, cr4, cr0, {0}
    1e18:	3100000c 	tstcc	r0, ip
    1e1c:	00037b04 	andeq	r7, r3, r4, lsl #22
    1e20:	b5043200 	strlt	r3, [r4, #-512]	; 0xfffffe00
    1e24:	33000000 	movwcc	r0, #0
    1e28:	00081704 	andeq	r1, r8, r4, lsl #14
    1e2c:	f1043400 			; <UNDEFINED> instruction: 0xf1043400
    1e30:	35000006 	strcc	r0, [r0, #-6]
    1e34:	00084704 	andeq	r4, r8, r4, lsl #14
    1e38:	37043600 	strcc	r3, [r4, -r0, lsl #12]
    1e3c:	37000007 	strcc	r0, [r0, -r7]
    1e40:	0006a904 	andeq	sl, r6, r4, lsl #18
    1e44:	8d043800 	stchi	8, cr3, [r4, #-0]
    1e48:	39000000 	stmdbcc	r0, {}	; <UNPREDICTABLE>
    1e4c:	000d6f04 	andeq	r6, sp, r4, lsl #30
    1e50:	af043a00 	svcge	0x00043a00
    1e54:	3b000008 	blcc	1e7c <startup-0x1fffe184>
    1e58:	0002df04 	andeq	sp, r2, r4, lsl #30
    1e5c:	5e043c00 	cdppl	12, 0, cr3, cr4, cr0, {0}
    1e60:	3d00000b 	stccc	0, cr0, [r0, #-44]	; 0xffffffd4
    1e64:	00074f04 	andeq	r4, r7, r4, lsl #30
    1e68:	c1043e00 	tstgt	r4, r0, lsl #28
    1e6c:	3f000008 	svccc	0x00000008
    1e70:	00014c04 	andeq	r4, r1, r4, lsl #24
    1e74:	5d044000 	stcpl	0, cr4, [r4, #-0]
    1e78:	4100000a 	tstmi	r0, sl
    1e7c:	00034c04 	andeq	r4, r3, r4, lsl #24
    1e80:	13044200 	movwne	r4, #16896	; 0x4200
    1e84:	43000006 	movwmi	r0, #6
    1e88:	0001e804 	andeq	lr, r1, r4, lsl #16
    1e8c:	ed044400 	cfstrs	mvf4, [r4, #-0]
    1e90:	4500000a 	strmi	r0, [r0, #-10]
    1e94:	00060104 	andeq	r0, r6, r4, lsl #2
    1e98:	5a044600 	bpl	1136a0 <startup-0x1feec960>
    1e9c:	47000001 	strmi	r0, [r0, -r1]
    1ea0:	000b3104 	andeq	r3, fp, r4, lsl #2
    1ea4:	c2044800 	andgt	r4, r4, #0, 16
    1ea8:	49000009 	stmdbmi	r0, {r0, r3}
    1eac:	000c4a04 	andeq	r4, ip, r4, lsl #20
    1eb0:	fa044a00 	blx	1146b8 <startup-0x1feeb948>
    1eb4:	4b00000c 	blmi	1eec <startup-0x1fffe114>
    1eb8:	00063d04 	andeq	r3, r6, r4, lsl #26
    1ebc:	5d044c00 	stcpl	12, cr4, [r4, #-0]
    1ec0:	4d000007 	stcmi	0, cr0, [r0, #-28]	; 0xffffffe4
    1ec4:	0000e204 	andeq	lr, r0, r4, lsl #4
    1ec8:	cf044e00 	svcgt	0x00044e00
    1ecc:	4f000009 	svcmi	0x00000009
    1ed0:	0005b104 	andeq	fp, r5, r4, lsl #2
    1ed4:	0e045000 	cdpeq	0, 0, cr5, cr4, cr0, {0}
    1ed8:	51000008 	tstpl	r0, r8
    1edc:	06010500 	streq	r0, [r1], -r0, lsl #10
    1ee0:	000002d3 	ldrdeq	r0, [r0], -r3
    1ee4:	00069206 	andeq	r9, r6, r6, lsl #4
    1ee8:	032f0500 			; <UNDEFINED> instruction: 0x032f0500
    1eec:	00000025 	andeq	r0, r0, r5, lsr #32
    1ef0:	00017607 	andeq	r7, r1, r7, lsl #12
    1ef4:	712b0600 			; <UNDEFINED> instruction: 0x712b0600
    1ef8:	05000002 	streq	r0, [r0, #-2]
    1efc:	02d10801 	sbcseq	r0, r1, #65536	; 0x10000
    1f00:	02050000 	andeq	r0, r5, #0
    1f04:	000b8605 	andeq	r8, fp, r5, lsl #12
    1f08:	03ff0700 	mvnseq	r0, #0, 14
    1f0c:	39060000 	stmdbcc	r6, {}	; <UNPREDICTABLE>
    1f10:	0000028a 	andeq	r0, r0, sl, lsl #5
    1f14:	ae070205 	cdpge	2, 0, cr0, cr7, cr5, {0}
    1f18:	0700000c 	streq	r0, [r0, -ip]
    1f1c:	00000d2a 	andeq	r0, r0, sl, lsr #26
    1f20:	029c4d06 	addseq	r4, ip, #384	; 0x180
    1f24:	04050000 	streq	r0, [r5], #-0
    1f28:	00074605 	andeq	r4, r7, r5, lsl #12
    1f2c:	071a0700 	ldreq	r0, [sl, -r0, lsl #14]
    1f30:	4f060000 	svcmi	0x00060000
    1f34:	000002ae 	andeq	r0, r0, lr, lsr #5
    1f38:	ed070405 	cfstrs	mvf0, [r7, #-20]	; 0xffffffec
    1f3c:	05000009 	streq	r0, [r0, #-9]
    1f40:	07410508 	strbeq	r0, [r1, -r8, lsl #10]
    1f44:	08050000 	stmdaeq	r5, {}	; <UNPREDICTABLE>
    1f48:	0009e807 	andeq	lr, r9, r7, lsl #16
    1f4c:	05040800 	streq	r0, [r4, #-2048]	; 0xfffff800
    1f50:	00746e69 	rsbseq	r6, r4, r9, ror #28
    1f54:	0002c309 	andeq	ip, r2, r9, lsl #6
    1f58:	07040500 	streq	r0, [r4, -r0, lsl #10]
    1f5c:	000009f2 	strdeq	r0, [r0], -r2
    1f60:	00017807 	andeq	r7, r1, r7, lsl #16
    1f64:	66180700 	ldrvs	r0, [r8], -r0, lsl #14
    1f68:	09000002 	stmdbeq	r0, {r1}
    1f6c:	000002d6 	ldrdeq	r0, [r0], -r6
    1f70:	0002d60a 	andeq	sp, r2, sl, lsl #12
    1f74:	02e60900 	rsceq	r0, r6, #0, 18
    1f78:	01070000 	mrseq	r0, (UNDEF: 7)
    1f7c:	07000004 	streq	r0, [r0, -r4]
    1f80:	00027f24 	andeq	r7, r2, r4, lsr #30
    1f84:	02f00900 	rscseq	r0, r0, #0, 18
    1f88:	2c070000 	stccs	0, cr0, [r7], {-0}
    1f8c:	0700000d 	streq	r0, [r0, -sp]
    1f90:	0002912c 	andeq	r9, r2, ip, lsr #2
    1f94:	03000900 	movweq	r0, #2304	; 0x900
    1f98:	1c070000 	stcne	0, cr0, [r7], {-0}
    1f9c:	07000007 	streq	r0, [r0, -r7]
    1fa0:	0002a330 	andeq	sl, r2, r0, lsr r3
    1fa4:	03100900 	tsteq	r0, #0, 18
    1fa8:	1b0a0000 	blne	281fb0 <startup-0x1fd7e050>
    1fac:	0b000003 	bleq	1fc0 <startup-0x1fffe040>
    1fb0:	a0010e04 	andge	r0, r1, r4, lsl #28
    1fb4:	0003e101 	andeq	lr, r3, r1, lsl #2
    1fb8:	0d340c00 	ldceq	12, cr0, [r4, #-0]
    1fbc:	a2010000 	andge	r0, r1, #0
    1fc0:	0003f101 	andeq	pc, r3, r1, lsl #2
    1fc4:	bd0c0000 	stclt	0, cr0, [ip, #-0]
    1fc8:	01000002 	tsteq	r0, r2
    1fcc:	03f601a3 	mvnseq	r0, #-1073741784	; 0xc0000028
    1fd0:	0c200000 	stceq	0, cr0, [r0], #-0
    1fd4:	00000a85 	andeq	r0, r0, r5, lsl #21
    1fd8:	f101a401 			; <UNDEFINED> instruction: 0xf101a401
    1fdc:	80000003 	andhi	r0, r0, r3
    1fe0:	0000000c 	andeq	r0, r0, ip
    1fe4:	01a50100 			; <UNDEFINED> instruction: 0x01a50100
    1fe8:	000003f6 	strdeq	r0, [r0], -r6
    1fec:	0cde0da0 	ldcleq	13, cr0, [lr], {160}	; 0xa0
    1ff0:	a6010000 	strge	r0, [r1], -r0
    1ff4:	0003f101 	andeq	pc, r3, r1, lsl #2
    1ff8:	0d010000 	stceq	0, cr0, [r1, #-0]
    1ffc:	00000367 	andeq	r0, r0, r7, ror #6
    2000:	f601a701 			; <UNDEFINED> instruction: 0xf601a701
    2004:	20000003 	andcs	r0, r0, r3
    2008:	012a0d01 			; <UNDEFINED> instruction: 0x012a0d01
    200c:	a8010000 	stmdage	r1, {}	; <UNPREDICTABLE>
    2010:	0003f101 	andeq	pc, r3, r1, lsl #2
    2014:	0d018000 	stceq	0, cr8, [r1, #-0]
    2018:	00000371 	andeq	r0, r0, r1, ror r3
    201c:	f601a901 			; <UNDEFINED> instruction: 0xf601a901
    2020:	a0000003 	andge	r0, r0, r3
    2024:	030a0d01 	movweq	r0, #44289	; 0xad01
    2028:	aa010000 	bge	42030 <startup-0x1ffbdfd0>
    202c:	0003f101 	andeq	pc, r3, r1, lsl #2
    2030:	0d020000 	stceq	0, cr0, [r2, #-0]
    2034:	000002f1 	strdeq	r0, [r0], -r1
    2038:	0601ab01 	streq	sl, [r1], -r1, lsl #22
    203c:	20000004 	andcs	r0, r0, r4
    2040:	50490e02 	subpl	r0, r9, r2, lsl #28
    2044:	01ac0100 			; <UNDEFINED> instruction: 0x01ac0100
    2048:	00000426 	andeq	r0, r0, r6, lsr #8
    204c:	fb0d0300 	blx	342c56 <startup-0x1fcbd3aa>
    2050:	01000002 	tsteq	r0, r2
    2054:	042b01ad 	strteq	r0, [fp], #-429	; 0xfffffe53
    2058:	03f00000 	mvnseq	r0, #0
    205c:	00055a0d 	andeq	r5, r5, sp, lsl #20
    2060:	01ae0100 			; <UNDEFINED> instruction: 0x01ae0100
    2064:	0000031b 	andeq	r0, r0, fp, lsl r3
    2068:	0f000e00 	svceq	0x00000e00
    206c:	0000031b 	andeq	r0, r0, fp, lsl r3
    2070:	000003f1 	strdeq	r0, [r0], -r1
    2074:	0002cf10 	andeq	ip, r2, r0, lsl pc
    2078:	09000700 	stmdbeq	r0, {r8, r9, sl}
    207c:	000003e1 	andeq	r0, r0, r1, ror #7
    2080:	0003100f 	andeq	r1, r3, pc
    2084:	00040600 	andeq	r0, r4, r0, lsl #12
    2088:	02cf1000 	sbceq	r1, pc, #0
    208c:	00170000 	andseq	r0, r7, r0
    2090:	0003100f 	andeq	r1, r3, pc
    2094:	00041600 	andeq	r1, r4, r0, lsl #12
    2098:	02cf1000 	sbceq	r1, pc, #0
    209c:	00370000 	eorseq	r0, r7, r0
    20a0:	0002e10f 	andeq	lr, r2, pc, lsl #2
    20a4:	00042600 	andeq	r2, r4, r0, lsl #12
    20a8:	02cf1000 	sbceq	r1, pc, #0
    20ac:	00ef0000 	rsceq	r0, pc, r0
    20b0:	00041609 	andeq	r1, r4, r9, lsl #12
    20b4:	03100f00 	tsteq	r0, #0, 30
    20b8:	043c0000 	ldrteq	r0, [ip], #-0
    20bc:	cf110000 	svcgt	0x00110000
    20c0:	83000002 	movwhi	r0, #2
    20c4:	a8060002 	stmdage	r6, {r1}
    20c8:	01000009 	tsteq	r0, r9
    20cc:	032501af 			; <UNDEFINED> instruction: 0x032501af
    20d0:	8c120000 	ldchi	0, cr0, [r2], {-0}
    20d4:	6301c001 	movwvs	ip, #4097	; 0x1001
    20d8:	0c000005 	stceq	0, cr0, [r0], {5}
    20dc:	000001e2 	andeq	r0, r0, r2, ror #3
    20e0:	2001c201 	andcs	ip, r1, r1, lsl #4
    20e4:	00000003 	andeq	r0, r0, r3
    20e8:	00025a0c 	andeq	r5, r2, ip, lsl #20
    20ec:	01c30100 	biceq	r0, r3, r0, lsl #2
    20f0:	0000031b 	andeq	r0, r0, fp, lsl r3
    20f4:	00b00c04 	adcseq	r0, r0, r4, lsl #24
    20f8:	c4010000 	strgt	r0, [r1], #-0
    20fc:	00031b01 	andeq	r1, r3, r1, lsl #22
    2100:	d00c0800 	andle	r0, ip, r0, lsl #16
    2104:	01000001 	tsteq	r0, r1
    2108:	031b01c5 	tsteq	fp, #1073741873	; 0x40000031
    210c:	130c0000 	movwne	r0, #49152	; 0xc000
    2110:	00524353 	subseq	r4, r2, r3, asr r3
    2114:	1b01c601 	blne	73920 <startup-0x1ff8c6e0>
    2118:	10000003 	andne	r0, r0, r3
    211c:	52434313 	subpl	r4, r3, #1275068416	; 0x4c000000
    2120:	01c70100 	biceq	r0, r7, r0, lsl #2
    2124:	0000031b 	andeq	r0, r0, fp, lsl r3
    2128:	48531314 	ldmdami	r3, {r2, r4, r8, r9, ip}^
    212c:	c8010050 	stmdagt	r1, {r4, r6}
    2130:	00057301 	andeq	r7, r5, r1, lsl #6
    2134:	540c1800 	strpl	r1, [ip], #-2048	; 0xfffff800
    2138:	01000005 	tsteq	r0, r5
    213c:	031b01c9 	tsteq	fp, #1073741874	; 0x40000032
    2140:	0c240000 	stceq	0, cr0, [r4], #-0
    2144:	00000ad6 	ldrdeq	r0, [r0], -r6
    2148:	1b01ca01 	blne	74954 <startup-0x1ff8b6ac>
    214c:	28000003 	stmdacs	r0, {r0, r1}
    2150:	00047f0c 	andeq	r7, r4, ip, lsl #30
    2154:	01cb0100 	biceq	r0, fp, r0, lsl #2
    2158:	0000031b 	andeq	r0, r0, fp, lsl r3
    215c:	03bf0c2c 			; <UNDEFINED> instruction: 0x03bf0c2c
    2160:	cc010000 	stcgt	0, cr0, [r1], {-0}
    2164:	00031b01 	andeq	r1, r3, r1, lsl #22
    2168:	800c3000 	andhi	r3, ip, r0
    216c:	0100000b 	tsteq	r0, fp
    2170:	031b01cd 	tsteq	fp, #1073741875	; 0x40000033
    2174:	0c340000 	ldceq	0, cr0, [r4], #-0
    2178:	0000087c 	andeq	r0, r0, ip, ror r8
    217c:	1b01ce01 	blne	75988 <startup-0x1ff8a678>
    2180:	38000003 	stmdacc	r0, {r0, r1}
    2184:	000aa40c 	andeq	sl, sl, ip, lsl #8
    2188:	01cf0100 	biceq	r0, pc, r0, lsl #2
    218c:	0000031b 	andeq	r0, r0, fp, lsl r3
    2190:	4650133c 			; <UNDEFINED> instruction: 0x4650133c
    2194:	d0010052 	andle	r0, r1, r2, asr r0
    2198:	00058d01 	andeq	r8, r5, r1, lsl #26
    219c:	44134000 	ldrmi	r4, [r3], #-0
    21a0:	01005246 	tsteq	r0, r6, asr #4
    21a4:	032001d1 			; <UNDEFINED> instruction: 0x032001d1
    21a8:	13480000 	movtne	r0, #32768	; 0x8000
    21ac:	00524441 	subseq	r4, r2, r1, asr #8
    21b0:	2001d201 	andcs	sp, r1, r1, lsl #4
    21b4:	4c000003 	stcmi	0, cr0, [r0], {3}
    21b8:	000b7b0c 	andeq	r7, fp, ip, lsl #22
    21bc:	01d30100 	bicseq	r0, r3, r0, lsl #2
    21c0:	000005a7 	andeq	r0, r0, r7, lsr #11
    21c4:	0b9f0c50 	bleq	fe7c530c <GPIO_Ports+0xde7c1504>
    21c8:	d4010000 	strle	r0, [r1], #-0
    21cc:	0005c101 	andeq	ip, r5, r1, lsl #2
    21d0:	bd0c6000 	stclt	0, cr6, [ip, #-0]
    21d4:	01000002 	tsteq	r0, r2
    21d8:	05c601d5 	strbeq	r0, [r6, #469]	; 0x1d5
    21dc:	0c740000 	ldcleq	0, cr0, [r4], #-0
    21e0:	00000cd8 	ldrdeq	r0, [r0], -r8
    21e4:	1b01d601 	blne	779f0 <startup-0x1ff88610>
    21e8:	88000003 	stmdahi	r0, {r0, r1}
    21ec:	02e10f00 	rsceq	r0, r1, #0, 30
    21f0:	05730000 	ldrbeq	r0, [r3, #-0]!
    21f4:	cf100000 	svcgt	0x00100000
    21f8:	0b000002 	bleq	2208 <startup-0x1fffddf8>
    21fc:	05630900 	strbeq	r0, [r3, #-2304]!	; 0xfffff700
    2200:	200f0000 	andcs	r0, pc, r0
    2204:	88000003 	stmdahi	r0, {r0, r1}
    2208:	10000005 	andne	r0, r0, r5
    220c:	000002cf 	andeq	r0, r0, pc, asr #5
    2210:	780a0001 	stmdavc	sl, {r0}
    2214:	09000005 	stmdbeq	r0, {r0, r2}
    2218:	00000588 	andeq	r0, r0, r8, lsl #11
    221c:	0003200f 	andeq	r2, r3, pc
    2220:	0005a200 	andeq	sl, r5, r0, lsl #4
    2224:	02cf1000 	sbceq	r1, pc, #0
    2228:	00030000 	andeq	r0, r3, r0
    222c:	0005920a 	andeq	r9, r5, sl, lsl #4
    2230:	05a20900 	streq	r0, [r2, #2304]!	; 0x900
    2234:	200f0000 	andcs	r0, pc, r0
    2238:	bc000003 	stclt	0, cr0, [r0], {3}
    223c:	10000005 	andne	r0, r0, r5
    2240:	000002cf 	andeq	r0, r0, pc, asr #5
    2244:	ac0a0004 	stcge	0, cr0, [sl], {4}
    2248:	09000005 	stmdbeq	r0, {r0, r2}
    224c:	000005bc 			; <UNDEFINED> instruction: 0x000005bc
    2250:	0003100f 	andeq	r1, r3, pc
    2254:	0005d600 	andeq	sp, r5, r0, lsl #12
    2258:	02cf1000 	sbceq	r1, pc, #0
    225c:	00040000 	andeq	r0, r4, r0
    2260:	0003a506 	andeq	sl, r3, r6, lsl #10
    2264:	01d70100 	bicseq	r0, r7, r0, lsl #2
    2268:	00000448 	andeq	r0, r0, r8, asr #8
    226c:	bf011012 	svclt	0x00011012
    2270:	00062002 	andeq	r2, r6, r2
    2274:	161e0c00 	ldrne	r0, [lr], -r0, lsl #24
    2278:	c1010000 	mrsgt	r0, (UNDEF: 1)
    227c:	00031b02 	andeq	r1, r3, r2, lsl #22
    2280:	770c0000 	strvc	r0, [ip, -r0]
    2284:	01000018 	tsteq	r0, r8, lsl r0
    2288:	031b02c2 	tsteq	fp, #536870924	; 0x2000000c
    228c:	13040000 	movwne	r0, #16384	; 0x4000
    2290:	004c4156 	subeq	r4, ip, r6, asr r1
    2294:	1b02c301 	blne	b2ea0 <startup-0x1ff4d160>
    2298:	08000003 	stmdaeq	r0, {r0, r1}
    229c:	0018310c 	andseq	r3, r8, ip, lsl #2
    22a0:	02c40100 	sbceq	r0, r4, #0, 2
    22a4:	00000320 	andeq	r0, r0, r0, lsr #6
    22a8:	0406000c 	streq	r0, [r6], #-12
    22ac:	01000017 	tsteq	r0, r7, lsl r0
    22b0:	05e202c5 	strbeq	r0, [r2, #709]!	; 0x2c5
    22b4:	100f0000 	andne	r0, pc, r0
    22b8:	3c000003 	stccc	0, cr0, [r0], {3}
    22bc:	10000006 	andne	r0, r0, r6
    22c0:	000002cf 	andeq	r0, r0, pc, asr #5
    22c4:	29140001 	ldmdbcs	r4, {r0}
    22c8:	0100000c 	tsteq	r0, ip
    22cc:	030b06fa 	movweq	r0, #46842	; 0xb6fa
    22d0:	64150000 	ldrvs	r0, [r5], #-0
    22d4:	08000006 	stmdaeq	r0, {r1, r2}
    22d8:	0003103b 	andeq	r1, r3, fp, lsr r0
    22dc:	01071600 	tsteq	r7, r0, lsl #12
    22e0:	00000271 	andeq	r0, r0, r1, ror r2
    22e4:	6e035d05 	cdpvs	13, 0, cr5, cr3, cr5, {0}
    22e8:	04000006 	streq	r0, [r0], #-6
    22ec:	00001e92 	muleq	r0, r2, lr
    22f0:	45531700 	ldrbmi	r1, [r3, #-1792]	; 0xfffff900
    22f4:	00010054 	andeq	r0, r1, r4, asr r0
    22f8:	00158f06 	andseq	r8, r5, r6, lsl #30
    22fc:	035d0500 	cmpeq	sp, #0, 10
    2300:	00000653 	andeq	r0, r0, r3, asr r6
    2304:	00106606 	andseq	r6, r0, r6, lsl #12
    2308:	035d0500 	cmpeq	sp, #0, 10
    230c:	00000653 	andeq	r0, r0, r3, asr r6
    2310:	71010716 	tstvc	r1, r6, lsl r7
    2314:	05000002 	streq	r0, [r0, #-2]
    2318:	06a1035f 	ssateq	r0, #2, pc, asr #6	; <UNPREDICTABLE>
    231c:	2f040000 	svccs	0x00040000
    2320:	00000009 	andeq	r0, r0, r9
    2324:	000bc804 	andeq	ip, fp, r4, lsl #16
    2328:	06000100 	streq	r0, [r0], -r0, lsl #2
    232c:	000009b2 			; <UNDEFINED> instruction: 0x000009b2
    2330:	86035f05 	strhi	r5, [r3], -r5, lsl #30
    2334:	16000006 	strne	r0, [r0], -r6
    2338:	02710107 	rsbseq	r0, r1, #-1073741823	; 0xc0000001
    233c:	62050000 	andvs	r0, r5, #0
    2340:	0006c803 	andeq	ip, r6, r3, lsl #16
    2344:	150c0400 	strne	r0, [ip, #-1024]	; 0xfffffc00
    2348:	04000000 	streq	r0, [r0], #-0
    234c:	000017b1 			; <UNDEFINED> instruction: 0x000017b1
    2350:	4a060001 	bmi	18235c <startup-0x1fe7dca4>
    2354:	05000017 	streq	r0, [r0, #-23]	; 0xffffffe9
    2358:	06ad0362 	strteq	r0, [sp], r2, ror #6
    235c:	28120000 	ldmdacs	r2, {}	; <UNPREDICTABLE>
    2360:	6005c305 	andvs	ip, r5, r5, lsl #6
    2364:	0c000007 	stceq	0, cr0, [r0], {7}
    2368:	00000c5e 	andeq	r0, r0, lr, asr ip
    236c:	1b05c505 	blne	173788 <startup-0x1fe8c878>
    2370:	00000003 	andeq	r0, r0, r3
    2374:	000aa90c 	andeq	sl, sl, ip, lsl #18
    2378:	05c60500 	strbeq	r0, [r6, #1280]	; 0x500
    237c:	0000031b 	andeq	r0, r0, fp, lsl r3
    2380:	06db0c04 	ldrbeq	r0, [fp], r4, lsl #24
    2384:	c7050000 	strgt	r0, [r5, -r0]
    2388:	00031b05 	andeq	r1, r3, r5, lsl #22
    238c:	690c0800 	stmdbvs	ip, {fp}
    2390:	05000007 	streq	r0, [r0, #-7]
    2394:	031b05c8 	tsteq	fp, #200, 10	; 0x32000000
    2398:	130c0000 	movwne	r0, #49152	; 0xc000
    239c:	00524449 	subseq	r4, r2, r9, asr #8
    23a0:	1b05c905 	blne	1747bc <startup-0x1fe8b844>
    23a4:	10000003 	andne	r0, r0, r3
    23a8:	52444f13 	subpl	r4, r4, #19, 30	; 0x4c
    23ac:	05ca0500 	strbeq	r0, [sl, #1280]	; 0x500
    23b0:	0000031b 	andeq	r0, r0, fp, lsl r3
    23b4:	07ab0c14 			; <UNDEFINED> instruction: 0x07ab0c14
    23b8:	cb050000 	blgt	1423c0 <startup-0x1febdc40>
    23bc:	0002fb05 	andeq	pc, r2, r5, lsl #22
    23c0:	a50c1800 	strge	r1, [ip, #-2048]	; 0xfffff800
    23c4:	05000007 	streq	r0, [r0, #-7]
    23c8:	02fb05cc 	rscseq	r0, fp, #204, 10	; 0x33000000
    23cc:	0c1a0000 	ldceq	0, cr0, [sl], {-0}
    23d0:	000006bb 			; <UNDEFINED> instruction: 0x000006bb
    23d4:	1b05cd05 	blne	1757f0 <startup-0x1fe8a810>
    23d8:	1c000003 	stcne	0, cr0, [r0], {3}
    23dc:	52464113 	subpl	r4, r6, #-1073741820	; 0xc0000004
    23e0:	05ce0500 	strbeq	r0, [lr, #1280]	; 0x500
    23e4:	00000770 	andeq	r0, r0, r0, ror r7
    23e8:	1b0f0020 	blne	3c2470 <startup-0x1fc3db90>
    23ec:	70000003 	andvc	r0, r0, r3
    23f0:	10000007 	andne	r0, r0, r7
    23f4:	000002cf 	andeq	r0, r0, pc, asr #5
    23f8:	60090001 	andvs	r0, r9, r1
    23fc:	06000007 	streq	r0, [r0], -r7
    2400:	00000c09 	andeq	r0, r0, r9, lsl #24
    2404:	d405cf05 	strle	ip, [r5], #-3845	; 0xfffff0fb
    2408:	12000006 	andne	r0, r0, #6
    240c:	06640598 			; <UNDEFINED> instruction: 0x06640598
    2410:	00000944 	andeq	r0, r0, r4, asr #18
    2414:	00524313 	subseq	r4, r2, r3, lsl r3
    2418:	1b066605 	blne	19bc34 <startup-0x1fe643cc>
    241c:	00000003 	andeq	r0, r0, r3
    2420:	0015300c 	andseq	r3, r5, ip
    2424:	06670500 	strbteq	r0, [r7], -r0, lsl #10
    2428:	0000031b 	andeq	r0, r0, fp, lsl r3
    242c:	19730c04 	ldmdbne	r3!, {r2, sl, fp}^
    2430:	68050000 	stmdavs	r5, {}	; <UNPREDICTABLE>
    2434:	00031b06 	andeq	r1, r3, r6, lsl #22
    2438:	43130800 	tstmi	r3, #0, 16
    243c:	05005249 	streq	r5, [r0, #-585]	; 0xfffffdb7
    2440:	031b0669 	tsteq	fp, #110100480	; 0x6900000
    2444:	0c0c0000 	stceq	0, cr0, [ip], {-0}
    2448:	0000134b 	andeq	r1, r0, fp, asr #6
    244c:	1b066a05 	blne	19cc68 <startup-0x1fe63398>
    2450:	10000003 	andne	r0, r0, r3
    2454:	0018930c 	andseq	r9, r8, ip, lsl #6
    2458:	066b0500 	strbteq	r0, [fp], -r0, lsl #10
    245c:	0000031b 	andeq	r0, r0, fp, lsl r3
    2460:	17410c14 	smlaldne	r0, r1, r4, ip
    2464:	6c050000 	stcvs	0, cr0, [r5], {-0}
    2468:	00031b06 	andeq	r1, r3, r6, lsl #22
    246c:	bd0c1800 	stclt	8, cr1, [ip, #-0]
    2470:	05000002 	streq	r0, [r0, #-2]
    2474:	0310066d 	tsteq	r0, #114294784	; 0x6d00000
    2478:	0c1c0000 	ldceq	0, cr0, [ip], {-0}
    247c:	0000176d 	andeq	r1, r0, sp, ror #14
    2480:	1b066e05 	blne	19dc9c <startup-0x1fe62364>
    2484:	20000003 	andcs	r0, r0, r3
    2488:	00157f0c 	andseq	r7, r5, ip, lsl #30
    248c:	066f0500 	strbteq	r0, [pc], -r0, lsl #10
    2490:	0000031b 	andeq	r0, r0, fp, lsl r3
    2494:	02c70c24 	sbceq	r0, r7, #36, 24	; 0x2400
    2498:	70050000 	andvc	r0, r5, r0
    249c:	00062c06 	andeq	r2, r6, r6, lsl #24
    24a0:	6f0c2800 	svcvs	0x000c2800
    24a4:	05000018 	streq	r0, [r0, #-24]	; 0xffffffe8
    24a8:	031b0671 	tsteq	fp, #118489088	; 0x7100000
    24ac:	0c300000 	ldceq	0, cr0, [r0], #-0
    24b0:	00001393 	muleq	r0, r3, r3
    24b4:	1b067205 	blne	19ecd0 <startup-0x1fe61330>
    24b8:	34000003 	strcc	r0, [r0], #-3
    24bc:	0019f50c 	andseq	pc, r9, ip, lsl #10
    24c0:	06730500 	ldrbteq	r0, [r3], -r0, lsl #10
    24c4:	0000031b 	andeq	r0, r0, fp, lsl r3
    24c8:	03670c38 	cmneq	r7, #56, 24	; 0x3800
    24cc:	74050000 	strvc	r0, [r5], #-0
    24d0:	00031006 	andeq	r1, r3, r6
    24d4:	760c3c00 	strvc	r3, [ip], -r0, lsl #24
    24d8:	05000017 	streq	r0, [r0, #-23]	; 0xffffffe9
    24dc:	031b0675 	tsteq	fp, #122683392	; 0x7500000
    24e0:	0c400000 	mareq	acc0, r0, r0
    24e4:	000012a5 	andeq	r1, r0, r5, lsr #5
    24e8:	1b067605 	blne	19fd04 <startup-0x1fe602fc>
    24ec:	44000003 	strmi	r0, [r0], #-3
    24f0:	0003710c 	andeq	r7, r3, ip, lsl #2
    24f4:	06770500 	ldrbteq	r0, [r7], -r0, lsl #10
    24f8:	0000062c 	andeq	r0, r0, ip, lsr #12
    24fc:	12c10c48 	sbcne	r0, r1, #72, 24	; 0x4800
    2500:	78050000 	stmdavc	r5, {}	; <UNPREDICTABLE>
    2504:	00031b06 	andeq	r1, r3, r6, lsl #22
    2508:	f70c5000 			; <UNDEFINED> instruction: 0xf70c5000
    250c:	05000011 	streq	r0, [r0, #-17]	; 0xffffffef
    2510:	031b0679 	tsteq	fp, #126877696	; 0x7900000
    2514:	0c540000 	mraeq	r0, r4, acc0
    2518:	000017cb 	andeq	r1, r0, fp, asr #15
    251c:	1b067a05 	blne	1a0d38 <startup-0x1fe5f2c8>
    2520:	58000003 	stmdapl	r0, {r0, r1}
    2524:	0002f10c 	andeq	pc, r2, ip, lsl #2
    2528:	067b0500 	ldrbteq	r0, [fp], -r0, lsl #10
    252c:	00000310 	andeq	r0, r0, r0, lsl r3
    2530:	16a60c5c 	ssatne	r0, #7, ip, asr #24
    2534:	7c050000 	stcvc	0, cr0, [r5], {-0}
    2538:	00031b06 	andeq	r1, r3, r6, lsl #22
    253c:	db0c6000 	blle	31a544 <startup-0x1fce5abc>
    2540:	05000015 	streq	r0, [r0, #-21]	; 0xffffffeb
    2544:	031b067d 	tsteq	fp, #131072000	; 0x7d00000
    2548:	0c640000 	stcleq	0, cr0, [r4], #-0
    254c:	000002fb 	strdeq	r0, [r0], -fp
    2550:	2c067e05 	stccs	14, cr7, [r6], {5}
    2554:	68000006 	stmdavs	r0, {r1, r2}
    2558:	0014250c 	andseq	r2, r4, ip, lsl #10
    255c:	067f0500 	ldrbteq	r0, [pc], -r0, lsl #10
    2560:	0000031b 	andeq	r0, r0, fp, lsl r3
    2564:	53431370 	movtpl	r1, #13168	; 0x3370
    2568:	80050052 	andhi	r0, r5, r2, asr r0
    256c:	00031b06 	andeq	r1, r3, r6, lsl #22
    2570:	330c7400 	movwcc	r7, #50176	; 0xc400
    2574:	05000013 	streq	r0, [r0, #-19]	; 0xffffffed
    2578:	062c0681 	strteq	r0, [ip], -r1, lsl #13
    257c:	0c780000 	ldcleq	0, cr0, [r8], #-0
    2580:	00001579 	andeq	r1, r0, r9, ror r5
    2584:	1b068205 	blne	1a2da0 <startup-0x1fe5d260>
    2588:	80000003 	andhi	r0, r0, r3
    258c:	0010f10c 	andseq	pc, r0, ip, lsl #2
    2590:	06830500 	streq	r0, [r3], r0, lsl #10
    2594:	0000031b 	andeq	r0, r0, fp, lsl r3
    2598:	196d0c84 	stmdbne	sp!, {r2, r7, sl, fp}^
    259c:	84050000 	strhi	r0, [r5], #-0
    25a0:	00031b06 	andeq	r1, r3, r6, lsl #22
    25a4:	e90c8800 	stmdb	ip, {fp, pc}
    25a8:	05000012 	streq	r0, [r0, #-18]	; 0xffffffee
    25ac:	031b0685 	tsteq	fp, #139460608	; 0x8500000
    25b0:	0c8c0000 	stceq	0, cr0, [ip], {0}
    25b4:	000016bd 			; <UNDEFINED> instruction: 0x000016bd
    25b8:	1b068605 	blne	1a3dd4 <startup-0x1fe5c22c>
    25bc:	90000003 	andls	r0, r0, r3
    25c0:	0018430c 	andseq	r4, r8, ip, lsl #6
    25c4:	06870500 	streq	r0, [r7], r0, lsl #10
    25c8:	0000031b 	andeq	r0, r0, fp, lsl r3
    25cc:	ae060094 	mcrge	0, 0, r0, cr6, cr4, {4}
    25d0:	05000018 	streq	r0, [r0, #-24]	; 0xffffffe8
    25d4:	07810689 	streq	r0, [r1, r9, lsl #13]
    25d8:	10180000 	andsne	r0, r8, r0
    25dc:	09893009 	stmibeq	r9, {r0, r3, ip, sp}
    25e0:	a5190000 	ldrge	r0, [r9, #-0]
    25e4:	09000019 	stmdbeq	r0, {r0, r3, r4}
    25e8:	00031032 	andeq	r1, r3, r2, lsr r0
    25ec:	25190000 	ldrcs	r0, [r9, #-0]
    25f0:	09000011 	stmdbeq	r0, {r0, r4}
    25f4:	00031033 	andeq	r1, r3, r3, lsr r0
    25f8:	c0190400 	andsgt	r0, r9, r0, lsl #8
    25fc:	09000013 	stmdbeq	r0, {r0, r1, r4}
    2600:	00031034 	andeq	r1, r3, r4, lsr r0
    2604:	9b190800 	blls	64460c <startup-0x1f9bb9f4>
    2608:	09000013 	stmdbeq	r0, {r0, r1, r4}
    260c:	00031035 	andeq	r1, r3, r5, lsr r0
    2610:	07000c00 	streq	r0, [r0, -r0, lsl #24]
    2614:	0000189c 	muleq	r0, ip, r8
    2618:	09503609 	ldmdbeq	r0, {r0, r3, r9, sl, ip, sp}^
    261c:	eb0f0000 	bl	3c2624 <startup-0x1fc3d9dc>
    2620:	a4000002 	strge	r0, [r0], #-2
    2624:	10000009 	andne	r0, r0, r9
    2628:	000002cf 	andeq	r0, r0, pc, asr #5
    262c:	940a000f 	strls	r0, [sl], #-15
    2630:	09000009 	stmdbeq	r0, {r0, r3}
    2634:	000009a4 	andeq	r0, r0, r4, lsr #19
    2638:	00154e1a 	andseq	r4, r5, sl, lsl lr
    263c:	a9990200 	ldmibge	r9, {r9}
    2640:	05000009 	streq	r0, [r0, #-9]
    2644:	003dd403 	eorseq	sp, sp, r3, lsl #8
    2648:	01071b20 	tsteq	r7, r0, lsr #22
    264c:	00000271 	andeq	r0, r0, r1, ror r2
    2650:	09e5420a 	stmibeq	r5!, {r1, r3, r9, lr}^
    2654:	9c040000 	stcls	0, cr0, [r4], {-0}
    2658:	00000006 	andeq	r0, r0, r6
    265c:	00057c04 	andeq	r7, r5, r4, lsl #24
    2660:	fa040100 	blx	102a68 <startup-0x1fefd598>
    2664:	02000001 	andeq	r0, r0, #1
    2668:	00021f04 	andeq	r1, r2, r4, lsl #30
    266c:	07000300 	streq	r0, [r0, -r0, lsl #6]
    2670:	00000a8a 	andeq	r0, r0, sl, lsl #21
    2674:	09bf470a 	ldmibeq	pc!, {r1, r3, r8, r9, sl, lr}	; <UNPREDICTABLE>
    2678:	071b0000 	ldreq	r0, [fp, -r0]
    267c:	00027101 	andeq	r7, r2, r1, lsl #2
    2680:	0a4f0a00 	beq	13c4e88 <startup-0x1ec3b178>
    2684:	0400000a 	streq	r0, [r0], #-10
    2688:	0000030f 	andeq	r0, r0, pc, lsl #6
    268c:	02640400 	rsbeq	r0, r4, #0, 8
    2690:	00010000 	andeq	r0, r1, r0
    2694:	00010407 	andeq	r0, r1, r7, lsl #8
    2698:	f0520a00 			; <UNDEFINED> instruction: 0xf0520a00
    269c:	1b000009 	blne	26c8 <startup-0x1fffd938>
    26a0:	02710107 	rsbseq	r0, r1, #-1073741823	; 0xc0000001
    26a4:	5a0a0000 	bpl	2826ac <startup-0x1fd7d954>
    26a8:	00000a3b 	andeq	r0, r0, fp, lsr sl
    26ac:	00040a04 	andeq	r0, r4, r4, lsl #20
    26b0:	25040000 	strcs	r0, [r4, #-0]
    26b4:	01000007 	tsteq	r0, r7
    26b8:	000d8104 	andeq	r8, sp, r4, lsl #2
    26bc:	b1040200 	mrslt	r0, R12_usr
    26c0:	03000007 	movweq	r0, #7
    26c4:	0aff0700 	beq	fffc42cc <GPIO_Ports+0xdffc04c4>
    26c8:	5f0a0000 	svcpl	0x000a0000
    26cc:	00000a15 	andeq	r0, r0, r5, lsl sl
    26d0:	7101071b 	tstvc	r1, fp, lsl r7
    26d4:	0a000002 	beq	26e4 <startup-0x1fffd91c>
    26d8:	000a666e 	andeq	r6, sl, lr, ror #12
    26dc:	009f0400 	addseq	r0, pc, r0, lsl #8
    26e0:	04000000 	streq	r0, [r0], #-0
    26e4:	00000c83 	andeq	r0, r0, r3, lsl #25
    26e8:	019e0401 	orrseq	r0, lr, r1, lsl #8
    26ec:	00020000 	andeq	r0, r2, r0
    26f0:	0003ae07 	andeq	sl, r3, r7, lsl #28
    26f4:	46720a00 	ldrbtmi	r0, [r2], -r0, lsl #20
    26f8:	1800000a 	stmdane	r0, {r1, r3}
    26fc:	b6840a08 	strlt	r0, [r4], r8, lsl #20
    2700:	1900000a 	stmdbne	r0, {r1, r3}
    2704:	00000b23 	andeq	r0, r0, r3, lsr #22
    2708:	0310860a 	tsteq	r0, #10485760	; 0xa00000
    270c:	19000000 	stmdbne	r0, {}	; <UNPREDICTABLE>
    2710:	00000a4e 	andeq	r0, r0, lr, asr #20
    2714:	09e5890a 	stmibeq	r5!, {r1, r3, r8, fp, pc}^
    2718:	19040000 	stmdbne	r4, {}	; <UNPREDICTABLE>
    271c:	00000855 	andeq	r0, r0, r5, asr r8
    2720:	0a3b8c0a 	beq	ee5750 <startup-0x1f11a8b0>
    2724:	19050000 	stmdbne	r5, {}	; <UNPREDICTABLE>
    2728:	0000070f 	andeq	r0, r0, pc, lsl #14
    272c:	0a0a8f0a 	beq	2a635c <startup-0x1fd59ca4>
    2730:	19060000 	stmdbne	r6, {}	; <UNPREDICTABLE>
    2734:	00000b54 	andeq	r0, r0, r4, asr fp
    2738:	0a66920a 	beq	19a6f68 <startup-0x1e659098>
    273c:	00070000 	andeq	r0, r7, r0
    2740:	00027207 	andeq	r7, r2, r7, lsl #4
    2744:	71940a00 	orrsvc	r0, r4, r0, lsl #20
    2748:	1c00000a 	stcne	0, cr0, [r0], {10}
    274c:	00001967 	andeq	r1, r0, r7, ror #18
    2750:	39010b20 	stmdbcc	r1, {r5, r8, r9, fp}
    2754:	1d00000b 	stcne	0, cr0, [r0, #-44]	; 0xffffffd4
    2758:	0b006469 	bleq	1b904 <startup-0x1ffe46fc>
    275c:	000b3903 	andeq	r3, fp, r3, lsl #18
    2760:	77190000 	ldrvc	r0, [r9, -r0]
    2764:	0b000012 	bleq	27b4 <startup-0x1fffd84c>
    2768:	0002c304 	andeq	ip, r2, r4, lsl #6
    276c:	ed190400 	cfldrs	mvf0, [r9, #-0]
    2770:	0b000011 	bleq	27bc <startup-0x1fffd844>
    2774:	000b3905 	andeq	r3, fp, r5, lsl #18
    2778:	11190800 	tstne	r9, r0, lsl #16
    277c:	0b000017 	bleq	27e0 <startup-0x1fffd820>
    2780:	000b3906 	andeq	r3, fp, r6, lsl #18
    2784:	ba190900 	blt	644b8c <startup-0x1f9bb474>
    2788:	0b000018 	bleq	27f0 <startup-0x1fffd810>
    278c:	0002c307 	andeq	ip, r2, r7, lsl #6
    2790:	65190c00 	ldrvs	r0, [r9, #-3072]	; 0xfffff400
    2794:	0b000018 	bleq	27fc <startup-0x1fffd804>
    2798:	0002c308 	andeq	ip, r2, r8, lsl #6
    279c:	ab191000 	blge	6467a4 <startup-0x1f9b985c>
    27a0:	0b000013 	bleq	27f4 <startup-0x1fffd80c>
    27a4:	0002c309 	andeq	ip, r2, r9, lsl #6
    27a8:	39191400 	ldmdbcc	r9, {sl, ip}
    27ac:	0b000019 	bleq	2818 <startup-0x1fffd7e8>
    27b0:	0002c30a 	andeq	ip, r2, sl, lsl #6
    27b4:	ca191800 	bgt	6487bc <startup-0x1f9b7844>
    27b8:	0b000018 	bleq	2820 <startup-0x1fffd7e0>
    27bc:	000b400b 	andeq	r4, fp, fp
    27c0:	05001c00 	streq	r1, [r0, #-3072]	; 0xfffff400
    27c4:	02da0801 	sbcseq	r0, sl, #65536	; 0x10000
    27c8:	041e0000 	ldreq	r0, [lr], #-0
    27cc:	00000775 	andeq	r0, r0, r5, ror r7
    27d0:	00196807 	andseq	r6, r9, r7, lsl #16
    27d4:	c10c0b00 	tstgt	ip, r0, lsl #22
    27d8:	0900000a 	stmdbeq	r0, {r1, r3}
    27dc:	00000b46 	andeq	r0, r0, r6, asr #22
    27e0:	8d0c1418 	cfstrshi	mvf1, [ip, #-96]	; 0xffffffa0
    27e4:	00000ba7 	andeq	r0, r0, r7, lsr #23
    27e8:	00036119 	andeq	r6, r3, r9, lsl r1
    27ec:	108f0c00 	addne	r0, pc, r0, lsl #24
    27f0:	00000003 	andeq	r0, r0, r3
    27f4:	00048b19 	andeq	r8, r4, r9, lsl fp
    27f8:	10920c00 	addsne	r0, r2, r0, lsl #24
    27fc:	04000003 	streq	r0, [r0], #-3
    2800:	4544491d 	strbmi	r4, [r4, #-2333]	; 0xfffff6e3
    2804:	d6950c00 	ldrle	r0, [r5], r0, lsl #24
    2808:	08000002 	stmdaeq	r0, {r1}
    280c:	5254521d 	subspl	r5, r4, #-805306367	; 0xd0000001
    2810:	d6990c00 	ldrle	r0, [r9], r0, lsl #24
    2814:	09000002 	stmdbeq	r0, {r1}
    2818:	434c441d 	movtmi	r4, #50205	; 0xc41d
    281c:	d69d0c00 	ldrle	r0, [sp], r0, lsl #24
    2820:	0a000002 	beq	2830 <startup-0x1fffd7d0>
    2824:	001fa119 	andseq	sl, pc, r9, lsl r1	; <UNPREDICTABLE>
    2828:	a7a10c00 	strge	r0, [r1, r0, lsl #24]!
    282c:	0b00000b 	bleq	2860 <startup-0x1fffd7a0>
    2830:	02d60f00 	sbcseq	r0, r6, #0, 30
    2834:	0bb70000 	bleq	fedc283c <GPIO_Ports+0xdedbea34>
    2838:	cf100000 	svcgt	0x00100000
    283c:	07000002 	streq	r0, [r0, -r2]
    2840:	054b0700 	strbeq	r0, [fp, #-1792]	; 0xfffff900
    2844:	a30c0000 	movwge	r0, #49152	; 0xc000
    2848:	00000b56 	andeq	r0, r0, r6, asr fp
    284c:	a80c1418 	stmdage	ip, {r3, r4, sl, ip}
    2850:	00000c1f 	andeq	r0, r0, pc, lsl ip
    2854:	00036119 	andeq	r6, r3, r9, lsl r1
    2858:	10aa0c00 	adcne	r0, sl, r0, lsl #24
    285c:	00000003 	andeq	r0, r0, r3
    2860:	00048b19 	andeq	r8, r4, r9, lsl fp
    2864:	10ad0c00 	adcne	r0, sp, r0, lsl #24
    2868:	04000003 	streq	r0, [r0], #-3
    286c:	4544491d 	strbmi	r4, [r4, #-2333]	; 0xfffff6e3
    2870:	d6b00c00 	ldrtle	r0, [r0], r0, lsl #24
    2874:	08000002 	stmdaeq	r0, {r1}
    2878:	5254521d 	subspl	r5, r4, #-805306367	; 0xd0000001
    287c:	d6b40c00 	ldrtle	r0, [r4], r0, lsl #24
    2880:	09000002 	stmdbeq	r0, {r1}
    2884:	434c441d 	movtmi	r4, #50205	; 0xc41d
    2888:	d6b80c00 	ldrtle	r0, [r8], r0, lsl #24
    288c:	0a000002 	beq	289c <startup-0x1fffd764>
    2890:	001fa119 	andseq	sl, pc, r9, lsl r1	; <UNPREDICTABLE>
    2894:	a7bb0c00 	ldrge	r0, [fp, r0, lsl #24]!
    2898:	0b00000b 	bleq	28cc <startup-0x1fffd734>
    289c:	494d461d 	stmdbmi	sp, {r0, r2, r3, r4, r9, sl, lr}^
    28a0:	d6be0c00 	ldrtle	r0, [lr], r0, lsl #24
    28a4:	13000002 	movwne	r0, #2
    28a8:	09370700 	ldmdbeq	r7!, {r8, r9, sl}
    28ac:	c10c0000 	mrsgt	r0, (UNDEF: 12)
    28b0:	00000bc2 	andeq	r0, r0, r2, asr #23
    28b4:	130d0418 	movwne	r0, #54296	; 0xd418
    28b8:	00000c8c 	andeq	r0, r0, ip, lsl #25
    28bc:	0008961f 	andeq	r9, r8, pc, lsl r6
    28c0:	10150d00 	andsne	r0, r5, r0, lsl #26
    28c4:	04000003 	streq	r0, [r0], #-3
    28c8:	1f001808 	svcne	0x00001808
    28cc:	0000012f 	andeq	r0, r0, pc, lsr #2
    28d0:	0310190d 	tsteq	r0, #212992	; 0x34000
    28d4:	0a040000 	beq	1028dc <startup-0x1fefd724>
    28d8:	4920000e 	stmdbmi	r0!, {r1, r2, r3}
    28dc:	1d0d0044 	stcne	0, cr0, [sp, #-272]	; 0xfffffef0
    28e0:	00000310 	andeq	r0, r0, r0, lsl r3
    28e4:	00070704 	andeq	r0, r7, r4, lsl #14
    28e8:	0001201f 	andeq	r2, r1, pc, lsl r0
    28ec:	10210d00 	eorne	r0, r1, r0, lsl #26
    28f0:	04000003 	streq	r0, [r0], #-3
    28f4:	1f000601 	svcne	0x00000601
    28f8:	0000076f 	andeq	r0, r0, pc, ror #14
    28fc:	0310240d 	tsteq	r0, #218103808	; 0xd000000
    2900:	03040000 	movweq	r0, #16384	; 0x4000
    2904:	ec1f0003 	ldc	0, cr0, [pc], {3}
    2908:	0d000008 	stceq	0, cr0, [r0, #-32]	; 0xffffffe0
    290c:	00031027 	andeq	r1, r3, r7, lsr #32
    2910:	00030400 	andeq	r0, r3, r0, lsl #8
    2914:	84070000 	strhi	r0, [r7], #-0
    2918:	0d000004 	stceq	0, cr0, [r0, #-16]
    291c:	000c2a28 	andeq	r2, ip, r8, lsr #20
    2920:	0d041800 	stceq	8, cr1, [r4, #-0]
    2924:	000cdb2d 	andeq	sp, ip, sp, lsr #22
    2928:	08eb1f00 	stmiaeq	fp!, {r8, r9, sl, fp, ip}^
    292c:	2f0d0000 	svccs	0x000d0000
    2930:	00000310 	andeq	r0, r0, r0, lsl r3
    2934:	001f0104 	andseq	r0, pc, r4, lsl #2
    2938:	52545220 	subspl	r5, r4, #32, 4
    293c:	10320d00 	eorsne	r0, r2, r0, lsl #26
    2940:	04000003 	streq	r0, [r0], #-3
    2944:	20001e01 	andcs	r1, r0, r1, lsl #28
    2948:	00454449 	subeq	r4, r5, r9, asr #8
    294c:	0310350d 	tsteq	r0, #54525952	; 0x3400000
    2950:	01040000 	mrseq	r0, (UNDEF: 4)
    2954:	4920001d 	stmdbmi	r0!, {r0, r2, r3, r4}
    2958:	370d0044 	strcc	r0, [sp, -r4, asr #32]
    295c:	00000310 	andeq	r0, r0, r0, lsl r3
    2960:	00001d04 	andeq	r1, r0, r4, lsl #26
    2964:	0c360700 	ldceq	7, cr0, [r6], #-0
    2968:	380d0000 	stmdacc	sp, {}	; <UNPREDICTABLE>
    296c:	00000c97 	muleq	r0, r7, ip
    2970:	00646921 	rsbeq	r6, r4, r1, lsr #18
    2974:	03101904 	tsteq	r0, #4, 18	; 0x10000
    2978:	03050000 	movweq	r0, #20480	; 0x5000
    297c:	20003ce4 	andcs	r3, r0, r4, ror #25
    2980:	00110d22 	andseq	r0, r1, r2, lsr #26
    2984:	391a0400 	ldmdbcc	sl, {sl}
    2988:	0500000b 	streq	r0, [r0, #-11]
    298c:	003de403 	eorseq	lr, sp, r3, lsl #8
    2990:	02f00f20 	rscseq	r0, r0, #32, 30	; 0x80
    2994:	0d170000 	ldceq	0, cr0, [r7, #-0]
    2998:	cf100000 	svcgt	0x00100000
    299c:	0f000002 	svceq	0x00000002
    29a0:	14692200 	strbtne	r2, [r9], #-512	; 0xfffffe00
    29a4:	1c040000 	stcne	0, cr0, [r4], {-0}
    29a8:	00000d07 	andeq	r0, r0, r7, lsl #26
    29ac:	3de80305 	stclcc	3, cr0, [r8, #20]!
    29b0:	400f2000 	andmi	r2, pc, r0
    29b4:	3800000b 	stmdacc	r0, {r0, r1, r3}
    29b8:	1000000d 	andne	r0, r0, sp
    29bc:	000002cf 	andeq	r0, r0, pc, asr #5
    29c0:	20220003 	eorcs	r0, r2, r3
    29c4:	04000012 	streq	r0, [r0], #-18	; 0xffffffee
    29c8:	000d2821 	andeq	r2, sp, r1, lsr #16
    29cc:	08030500 	stmdaeq	r3, {r8, sl}
    29d0:	2220003e 	eorcs	r0, r0, #62	; 0x3e
    29d4:	00001512 	andeq	r1, r0, r2, lsl r5
    29d8:	031b2404 	tsteq	fp, #4, 8	; 0x4000000
    29dc:	03050000 	movweq	r0, #20480	; 0x5000
    29e0:	20003ce8 	andcs	r3, r0, r8, ror #25
    29e4:	0014d623 	andseq	sp, r4, r3, lsr #12
    29e8:	b8e60400 	stmialt	r6!, {sl}^
    29ec:	6220002f 	eorvs	r0, r0, #47	; 0x2f
    29f0:	01000000 	mrseq	r0, (UNDEF: 0)
    29f4:	000d8c9c 	muleq	sp, ip, ip
    29f8:	195f2400 	ldmdbne	pc, {sl, sp}^	; <UNPREDICTABLE>
    29fc:	e6040000 	str	r0, [r4], -r0
    2a00:	00000b46 	andeq	r0, r0, r6, asr #22
    2a04:	1a709102 	bne	1c26e14 <startup-0x1e3d91ec>
    2a08:	00001538 	andeq	r1, r0, r8, lsr r5
    2a0c:	0bb7e704 	bleq	fedfc624 <GPIO_Ports+0xdedf881c>
    2a10:	91020000 	mrsls	r0, (UNDEF: 2)
    2a14:	f523004c 			; <UNDEFINED> instruction: 0xf523004c
    2a18:	04000014 	streq	r0, [r0], #-20	; 0xffffffec
    2a1c:	002e58ba 	strhteq	r5, [lr], -sl
    2a20:	00016020 	andeq	r6, r1, r0, lsr #32
    2a24:	019c0100 	orrseq	r0, ip, r0, lsl #2
    2a28:	2400000e 	strcs	r0, [r0], #-14
    2a2c:	000011c5 	andeq	r1, r0, r5, asr #3
    2a30:	02c3ba04 	sbceq	fp, r3, #4, 20	; 0x4000
    2a34:	91030000 	mrsls	r0, (UNDEF: 3)
    2a38:	021a7fbc 	andseq	r7, sl, #188, 30	; 0x2f0
    2a3c:	0400000c 	streq	r0, [r0], #-12
    2a40:	000cdbbb 			; <UNDEFINED> instruction: 0x000cdbbb
    2a44:	60910200 	addsvs	r0, r1, r0, lsl #4
    2a48:	0007c11a 	andeq	ip, r7, sl, lsl r1
    2a4c:	dbbc0400 	blle	fef03a54 <GPIO_Ports+0xdeeffc4c>
    2a50:	0200000c 	andeq	r0, r0, #12
    2a54:	5a1a5c91 	bpl	699ca0 <startup-0x1f966360>
    2a58:	04000003 	streq	r0, [r0], #-3
    2a5c:	000c8cbf 			; <UNDEFINED> instruction: 0x000c8cbf
    2a60:	58910200 	ldmpl	r1, {r9}
    2a64:	0018d41a 	andseq	sp, r8, sl, lsl r4
    2a68:	c3d60400 	bicsgt	r0, r6, #0, 8
    2a6c:	02000002 	andeq	r0, r0, #2
    2a70:	4e256491 	mcrmi	4, 1, r6, cr5, cr1, {4}
    2a74:	4a20002f 	bmi	802b38 <startup-0x1f7fd4c8>
    2a78:	1a000000 	bne	2a80 <startup-0x1fffd580>
    2a7c:	000011cc 	andeq	r1, r0, ip, asr #3
    2a80:	0bb7db04 	bleq	fedf9698 <GPIO_Ports+0xdedf5890>
    2a84:	91020000 	mrsls	r0, (UNDEF: 2)
    2a88:	26000044 	strcs	r0, [r0], -r4, asr #32
    2a8c:	0000178a 	andeq	r1, r0, sl, lsl #15
    2a90:	2e1cb104 	mnfcse	f3, f4
    2a94:	003c2000 	eorseq	r2, ip, r0
    2a98:	9c010000 	stcls	0, cr0, [r1], {-0}
    2a9c:	00000e33 	andeq	r0, r0, r3, lsr lr
    2aa0:	67736d27 	ldrbvs	r6, [r3, -r7, lsr #26]!
    2aa4:	33b10400 			; <UNDEFINED> instruction: 0x33b10400
    2aa8:	0200000e 	andeq	r0, r0, #14
    2aac:	e01a6c91 	muls	sl, r1, ip
    2ab0:	04000014 	streq	r0, [r0], #-20	; 0xffffffec
    2ab4:	000310b2 	strheq	r1, [r3], -r2
    2ab8:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    2abc:	1f041e00 	svcne	0x00041e00
    2ac0:	2300000c 	movwcs	r0, #12
    2ac4:	0000192f 	andeq	r1, r0, pc, lsr #18
    2ac8:	29604204 	stmdbcs	r0!, {r2, r9, lr}^
    2acc:	04bc2000 	ldrteq	r2, [ip], #0
    2ad0:	9c010000 	stcls	0, cr0, [r1], {-0}
    2ad4:	00000f71 	andeq	r0, r0, r1, ror pc
    2ad8:	0013f41a 	andseq	pc, r3, sl, lsl r4	; <UNPREDICTABLE>
    2adc:	ca4d0400 	bgt	1343ae4 <startup-0x1ecbc51c>
    2ae0:	03000002 	movweq	r0, #2
    2ae4:	1a7fb091 	bne	1feed30 <startup-0x1e0112d0>
    2ae8:	000016b0 			; <UNDEFINED> instruction: 0x000016b0
    2aec:	0f855704 	svceq	0x00855704
    2af0:	91040000 	mrsls	r0, (UNDEF: 4)
    2af4:	1a067fb4 	bne	1a29cc <startup-0x1fe5d634>
    2af8:	00001450 	andeq	r1, r0, r0, asr r4
    2afc:	02c35804 	sbceq	r5, r3, #4, 16	; 0x40000
    2b00:	91020000 	mrsls	r0, (UNDEF: 2)
    2b04:	29862864 	stmibcs	r6, {r2, r5, r6, fp, sp}
    2b08:	00442000 	subeq	r2, r4, r0
    2b0c:	0eab0000 	cdpeq	0, 10, cr0, cr11, cr0, {0}
    2b10:	6a290000 	bvs	a42b18 <startup-0x1f5bd4e8>
    2b14:	c34e0400 	movtgt	r0, #58368	; 0xe400
    2b18:	02000002 	andeq	r0, r0, #2
    2b1c:	8c255c91 	stchi	12, cr5, [r5], #-580	; 0xfffffdbc
    2b20:	32200029 	eorcc	r0, r0, #41	; 0x29
    2b24:	29000000 	stmdbcs	r0, {}	; <UNPREDICTABLE>
    2b28:	50040069 	andpl	r0, r4, r9, rrx
    2b2c:	000002c3 	andeq	r0, r0, r3, asr #5
    2b30:	00609102 	rsbeq	r9, r0, r2, lsl #2
    2b34:	2a2c2800 	bcs	b0cb3c <startup-0x1f4f34c4>
    2b38:	00b02000 	adcseq	r2, r0, r0
    2b3c:	0edb0000 	cdpeq	0, 13, cr0, cr11, cr0, {0}
    2b40:	6a290000 	bvs	a42b48 <startup-0x1f5bd4b8>
    2b44:	c3590400 	cmpgt	r9, #0, 8
    2b48:	02000002 	andeq	r0, r0, #2
    2b4c:	32255891 	eorcc	r5, r5, #9502720	; 0x910000
    2b50:	9e20002a 	cdpls	0, 2, cr0, cr0, cr10, {1}
    2b54:	29000000 	stmdbcs	r0, {}	; <UNPREDICTABLE>
    2b58:	5b040069 	blpl	102d04 <startup-0x1fefd2fc>
    2b5c:	000002c3 	andeq	r0, r0, r3, asr #5
    2b60:	00549102 	subseq	r9, r4, r2, lsl #2
    2b64:	2afe2800 	bcs	fff8cb6c <GPIO_Ports+0xdff88d64>
    2b68:	003e2000 	eorseq	r2, lr, r0
    2b6c:	0ef50000 	cdpeq	0, 15, cr0, cr5, cr0, {0}
    2b70:	69290000 	stmdbvs	r9!, {}	; <UNPREDICTABLE>
    2b74:	c36f0400 	cmngt	pc, #0, 8
    2b78:	02000002 	andeq	r0, r0, #2
    2b7c:	28005091 	stmdacs	r0, {r0, r4, r7, ip, lr}
    2b80:	20002b3c 	andcs	r2, r0, ip, lsr fp
    2b84:	0000003c 	andeq	r0, r0, ip, lsr r0
    2b88:	00000f0f 	andeq	r0, r0, pc, lsl #30
    2b8c:	04006929 	streq	r6, [r0], #-2345	; 0xfffff6d7
    2b90:	0002c375 	andeq	ip, r2, r5, ror r3
    2b94:	4c910200 	lfmmi	f0, 4, [r1], {0}
    2b98:	2b7e2800 	blcs	1f8cba0 <startup-0x1e073460>
    2b9c:	00382000 	eorseq	r2, r8, r0
    2ba0:	0f290000 	svceq	0x00290000
    2ba4:	69290000 	stmdbvs	r9!, {}	; <UNPREDICTABLE>
    2ba8:	c37b0400 	cmngt	fp, #0, 8
    2bac:	02000002 	andeq	r0, r0, #2
    2bb0:	28004891 	stmdacs	r0, {r0, r4, r7, fp, lr}
    2bb4:	20002bbe 			; <UNDEFINED> instruction: 0x20002bbe
    2bb8:	00000038 	andeq	r0, r0, r8, lsr r0
    2bbc:	00000f43 	andeq	r0, r0, r3, asr #30
    2bc0:	04006929 	streq	r6, [r0], #-2345	; 0xfffff6d7
    2bc4:	0002c380 	andeq	ip, r2, r0, lsl #7
    2bc8:	44910200 	ldrmi	r0, [r1], #512	; 0x200
    2bcc:	2c002500 	cfstr32cs	mvfx2, [r0], {-0}
    2bd0:	02102000 	andseq	r2, r0, #0
    2bd4:	69290000 	stmdbvs	r9!, {}	; <UNPREDICTABLE>
    2bd8:	c38a0400 	orrgt	r0, sl, #0, 8
    2bdc:	02000002 	andeq	r0, r0, #2
    2be0:	9a254091 	bls	952e2c <startup-0x1f6ad1d4>
    2be4:	6220002c 	eorvs	r0, r0, #44	; 0x2c
    2be8:	29000001 	stmdbcs	r0, {r0}
    2bec:	9b040069 	blls	102d98 <startup-0x1fefd268>
    2bf0:	000002c3 	andeq	r0, r0, r3, asr #5
    2bf4:	7fbc9103 	svcvc	0x00bc9103
    2bf8:	0f000000 	svceq	0x00000000
    2bfc:	00000b51 	andeq	r0, r0, r1, asr fp
    2c00:	00000f85 	andeq	r0, r0, r5, lsl #31
    2c04:	0002cf2a 	andeq	ip, r2, sl, lsr #30
    2c08:	b8910400 	ldmlt	r1, {sl}
    2c0c:	0900067f 	stmdbeq	r0, {r0, r1, r2, r3, r4, r5, r6, r9, sl}
    2c10:	00000f71 	andeq	r0, r0, r1, ror pc
    2c14:	00116e2b 	andseq	r6, r1, fp, lsr #28
    2c18:	483a0400 	ldmdami	sl!, {sl}
    2c1c:	18200029 	stmdane	r0!, {r0, r3, r5}
    2c20:	01000000 	mrseq	r0, (UNDEF: 0)
    2c24:	11bf269c 			; <UNDEFINED> instruction: 0x11bf269c
    2c28:	35040000 	strcc	r0, [r4, #-0]
    2c2c:	2000291c 	andcs	r2, r0, ip, lsl r9
    2c30:	0000002c 	andeq	r0, r0, ip, lsr #32
    2c34:	0fcd9c01 	svceq	0x00cd9c01
    2c38:	34240000 	strtcc	r0, [r4], #-0
    2c3c:	04000019 	streq	r0, [r0], #-25	; 0xffffffe7
    2c40:	0002c335 	andeq	ip, r2, r5, lsr r3
    2c44:	6c910200 	lfmvs	f0, 4, [r1], {0}
    2c48:	0018371a 	andseq	r3, r8, sl, lsl r7
    2c4c:	c3360400 	teqgt	r6, #0, 8
    2c50:	02000002 	andeq	r0, r0, #2
    2c54:	23007491 	movwcs	r7, #1169	; 0x491
    2c58:	00001680 	andeq	r1, r0, r0, lsl #13
    2c5c:	28e42904 	stmiacs	r4!, {r2, r8, fp, sp}^
    2c60:	00382000 	eorseq	r2, r8, r0
    2c64:	9c010000 	stcls	0, cr0, [r1], {-0}
    2c68:	00000ff1 	strdeq	r0, [r0], -r1
    2c6c:	00136b1a 	andseq	r6, r3, sl, lsl fp
    2c70:	102d0400 	eorne	r0, sp, r0, lsl #8
    2c74:	02000003 	andeq	r0, r0, #3
    2c78:	2c007491 	cfstrscs	mvf7, [r0], {145}	; 0x91
    2c7c:	0000122b 	andeq	r1, r0, fp, lsr #4
    2c80:	28cc2504 	stmiacs	ip, {r2, r8, sl, sp}^
    2c84:	00182000 	andseq	r2, r8, r0
    2c88:	9c010000 	stcls	0, cr0, [r1], {-0}
    2c8c:	0017562c 	andseq	r5, r7, ip, lsr #12
    2c90:	000f0400 	andeq	r0, pc, r0, lsl #8
    2c94:	0c200000 	stceq	0, cr0, [r0], #-0
    2c98:	01000000 	mrseq	r0, (UNDEF: 0)
    2c9c:	121b2d9c 	andsne	r2, fp, #156, 26	; 0x2700
    2ca0:	02030000 	andeq	r0, r3, #0
    2ca4:	20002704 	andcs	r2, r0, r4, lsl #14
    2ca8:	000001c8 	andeq	r0, r0, r8, asr #3
    2cac:	10379c01 	eorsne	r9, r7, r1, lsl #24
    2cb0:	551a0000 	ldrpl	r0, [sl, #-0]
    2cb4:	03000000 	movweq	r0, #0
    2cb8:	000ab605 	andeq	fp, sl, r5, lsl #12
    2cbc:	70910200 	addsvc	r0, r1, r0, lsl #4
    2cc0:	16232e00 	strtne	r2, [r3], -r0, lsl #28
    2cc4:	5e020000 	cdppl	0, 0, cr0, cr2, cr0, {0}
    2cc8:	0026e40c 	eoreq	lr, r6, ip, lsl #8
    2ccc:	00002020 	andeq	r2, r0, r0, lsr #32
    2cd0:	5d9c0100 	ldfpls	f0, [ip]
    2cd4:	2f000010 	svccs	0x00000010
    2cd8:	000018c3 	andeq	r1, r0, r3, asr #17
    2cdc:	d60c5e02 	strle	r5, [ip], -r2, lsl #28
    2ce0:	02000002 	andeq	r0, r0, #2
    2ce4:	30007791 	mulcc	r0, r1, r7
    2ce8:	0000160e 	andeq	r1, r0, lr, lsl #12
    2cec:	7a0c3c02 	bvc	311cfc <startup-0x1fcee304>
    2cf0:	a0000006 	andge	r0, r0, r6
    2cf4:	44200026 	strtmi	r0, [r0], #-38	; 0xffffffda
    2cf8:	01000000 	mrseq	r0, (UNDEF: 0)
    2cfc:	0010969c 	mulseq	r0, ip, r6
    2d00:	18c32f00 	stmiane	r3, {r8, r9, sl, fp, sp}^
    2d04:	3c020000 	stccc	0, cr0, [r2], {-0}
    2d08:	0002d60c 	andeq	sp, r2, ip, lsl #12
    2d0c:	6f910200 	svcvs	0x00910200
    2d10:	000fe731 	andeq	lr, pc, r1, lsr r7	; <UNPREDICTABLE>
    2d14:	0c3e0200 	lfmeq	f0, 4, [lr], #-0
    2d18:	0000067a 	andeq	r0, r0, sl, ror r6
    2d1c:	00779102 	rsbseq	r9, r7, r2, lsl #2
    2d20:	00154032 	andseq	r4, r5, r2, lsr r0
    2d24:	0c280200 	sfmeq	f0, 4, [r8], #-0
    2d28:	20002684 	andcs	r2, r0, r4, lsl #13
    2d2c:	0000001c 	andeq	r0, r0, ip, lsl r0
    2d30:	88309c01 	ldmdahi	r0!, {r0, sl, fp, ip, pc}
    2d34:	02000015 	andeq	r0, r0, #21
    2d38:	066e0bfb 			; <UNDEFINED> instruction: 0x066e0bfb
    2d3c:	26000000 	strcs	r0, [r0], -r0
    2d40:	00842000 	addeq	r2, r4, r0
    2d44:	9c010000 	stcls	0, cr0, [r1], {-0}
    2d48:	000010ff 	strdeq	r1, [r0], -pc	; <UNPREDICTABLE>
    2d4c:	0016052f 	andseq	r0, r6, pc, lsr #10
    2d50:	0bfb0200 	bleq	ffec3558 <GPIO_Ports+0xdfebf750>
    2d54:	000002d6 	ldrdeq	r0, [r0], -r6
    2d58:	33679102 	cmncc	r7, #-2147483648	; 0x80000000
    2d5c:	00706d74 	rsbseq	r6, r0, r4, ror sp
    2d60:	100bfd02 	andne	pc, fp, r2, lsl #26
    2d64:	02000003 	andeq	r0, r0, #3
    2d68:	8d316c91 	ldchi	12, cr6, [r1, #-580]!	; 0xfffffdbc
    2d6c:	02000016 	andeq	r0, r0, #22
    2d70:	03100bfe 	tsteq	r0, #260096	; 0x3f800
    2d74:	91020000 	mrsls	r0, (UNDEF: 2)
    2d78:	0fe73174 	svceq	0x00e73174
    2d7c:	ff020000 			; <UNDEFINED> instruction: 0xff020000
    2d80:	00066e0b 	andeq	r6, r6, fp, lsl #28
    2d84:	73910200 	orrsvc	r0, r1, #0, 4
    2d88:	15a52e00 	strne	r2, [r5, #3584]!	; 0xe00
    2d8c:	d6020000 	strle	r0, [r2], -r0
    2d90:	0025b00b 	eoreq	fp, r5, fp
    2d94:	00005020 	andeq	r5, r0, r0, lsr #32
    2d98:	349c0100 	ldrcc	r0, [ip], #256	; 0x100
    2d9c:	2f000011 	svccs	0x00000011
    2da0:	000018c3 	andeq	r1, r0, r3, asr #17
    2da4:	d60bd602 	strle	sp, [fp], -r2, lsl #12
    2da8:	02000002 	andeq	r0, r0, #2
    2dac:	fe2f7791 	mcr2	7, 1, r7, cr15, cr1, {4}
    2db0:	0200000e 	andeq	r0, r0, #14
    2db4:	06a10bd6 	ssateq	r0, #2, r6, asr #23
    2db8:	91020000 	mrsls	r0, (UNDEF: 2)
    2dbc:	b92e0076 	stmdblt	lr!, {r1, r2, r4, r5, r6}
    2dc0:	02000017 	andeq	r0, r0, #23
    2dc4:	25740a9e 	ldrbcs	r0, [r4, #-2718]!	; 0xfffff562
    2dc8:	003c2000 	eorseq	r2, ip, r0
    2dcc:	9c010000 	stcls	0, cr0, [r1], {-0}
    2dd0:	0000115a 	andeq	r1, r0, sl, asr r1
    2dd4:	00118e2f 	andseq	r8, r1, pc, lsr #28
    2dd8:	0a9e0200 	beq	fe7835e0 <GPIO_Ports+0xde77f7d8>
    2ddc:	000002d6 	ldrdeq	r0, [r0], -r6
    2de0:	00779102 	rsbseq	r9, r7, r2, lsl #2
    2de4:	0011342e 	andseq	r3, r1, lr, lsr #8
    2de8:	0a860200 	beq	fe1835f0 <GPIO_Ports+0xde17f7e8>
    2dec:	20002534 	andcs	r2, r0, r4, lsr r5
    2df0:	00000040 	andeq	r0, r0, r0, asr #32
    2df4:	118f9c01 	orrne	r9, pc, r1, lsl #24
    2df8:	972f0000 	strls	r0, [pc, -r0]!
    2dfc:	02000016 	andeq	r0, r0, #22
    2e00:	03100a86 	tsteq	r0, #548864	; 0x86000
    2e04:	91020000 	mrsls	r0, (UNDEF: 2)
    2e08:	0efe2f74 	mrceq	15, 7, r2, cr14, cr4, {3}
    2e0c:	86020000 	strhi	r0, [r2], -r0
    2e10:	0006a10a 	andeq	sl, r6, sl, lsl #2
    2e14:	73910200 	orrsvc	r0, r1, #0, 4
    2e18:	18e52e00 	stmiane	r5!, {r9, sl, fp, sp}^
    2e1c:	52020000 	andpl	r0, r2, #0
    2e20:	0024f40a 	eoreq	pc, r4, sl, lsl #8
    2e24:	00004020 	andeq	r4, r0, r0, lsr #32
    2e28:	c49c0100 	ldrgt	r0, [ip], #256	; 0x100
    2e2c:	2f000011 	svccs	0x00000011
    2e30:	000015e5 	andeq	r1, r0, r5, ror #11
    2e34:	100a5202 	andne	r5, sl, r2, lsl #4
    2e38:	02000003 	andeq	r0, r0, #3
    2e3c:	fe2f7491 	mcr2	4, 1, r7, cr15, cr1, {4}
    2e40:	0200000e 	andeq	r0, r0, #14
    2e44:	06a10a52 	ssateq	r0, #2, r2, asr #20
    2e48:	91020000 	mrsls	r0, (UNDEF: 2)
    2e4c:	762e0073 			; <UNDEFINED> instruction: 0x762e0073
    2e50:	02000013 	andeq	r0, r0, #19
    2e54:	24b40a19 	ldrtcs	r0, [r4], #2585	; 0xa19
    2e58:	00402000 	subeq	r2, r0, r0
    2e5c:	9c010000 	stcls	0, cr0, [r1], {-0}
    2e60:	000011f9 	strdeq	r1, [r0], -r9
    2e64:	0012da2f 	andseq	sp, r2, pc, lsr #20
    2e68:	0a190200 	beq	643670 <startup-0x1f9bc990>
    2e6c:	00000310 	andeq	r0, r0, r0, lsl r3
    2e70:	2f749102 	svccs	0x00749102
    2e74:	00000efe 	strdeq	r0, [r0], -lr
    2e78:	a10a1902 	tstge	sl, r2, lsl #18
    2e7c:	02000006 	andeq	r0, r0, #6
    2e80:	2e007391 	mcrcs	3, 0, r7, cr0, cr1, {4}
    2e84:	00001151 	andeq	r1, r0, r1, asr r1
    2e88:	7409fb02 	strvc	pc, [r9], #-2818	; 0xfffff4fe
    2e8c:	40200024 	eormi	r0, r0, r4, lsr #32
    2e90:	01000000 	mrseq	r0, (UNDEF: 0)
    2e94:	00122e9c 	mulseq	r2, ip, lr
    2e98:	19502f00 	ldmdbne	r0, {r8, r9, sl, fp, sp}^
    2e9c:	fb020000 	blx	82ea6 <startup-0x1ff7d15a>
    2ea0:	00031009 	andeq	r1, r3, r9
    2ea4:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    2ea8:	000efe2f 	andeq	pc, lr, pc, lsr #28
    2eac:	09fb0200 	ldmibeq	fp!, {r9}^
    2eb0:	000006a1 	andeq	r0, r0, r1, lsr #13
    2eb4:	00739102 	rsbseq	r9, r3, r2, lsl #2
    2eb8:	00190a2e 	andseq	r0, r9, lr, lsr #20
    2ebc:	09db0200 	ldmibeq	fp, {r9}^
    2ec0:	20002434 	andcs	r2, r0, r4, lsr r4
    2ec4:	00000040 	andeq	r0, r0, r0, asr #32
    2ec8:	12639c01 	rsbne	r9, r3, #256	; 0x100
    2ecc:	4c2f0000 	stcmi	0, cr0, [pc], #-0	; 2ed4 <startup-0x1fffd12c>
    2ed0:	02000018 	andeq	r0, r0, #24
    2ed4:	031009db 	tsteq	r0, #3588096	; 0x36c000
    2ed8:	91020000 	mrsls	r0, (UNDEF: 2)
    2edc:	0efe2f74 	mrceq	15, 7, r2, cr14, cr4, {3}
    2ee0:	db020000 	blle	82ee8 <startup-0x1ff7d118>
    2ee4:	0006a109 	andeq	sl, r6, r9, lsl #2
    2ee8:	73910200 	orrsvc	r0, r1, #0, 4
    2eec:	13542e00 	cmpne	r4, #0, 28
    2ef0:	aa020000 	bge	82ef8 <startup-0x1ff7d108>
    2ef4:	0023f409 	eoreq	pc, r3, r9, lsl #8
    2ef8:	00004020 	andeq	r4, r0, r0, lsr #32
    2efc:	989c0100 	ldmls	ip, {r8}
    2f00:	2f000012 	svccs	0x00000012
    2f04:	00001697 	muleq	r0, r7, r6
    2f08:	1009aa02 	andne	sl, r9, r2, lsl #20
    2f0c:	02000003 	andeq	r0, r0, #3
    2f10:	fe2f7491 	mcr2	4, 1, r7, cr15, cr1, {4}
    2f14:	0200000e 	andeq	r0, r0, #14
    2f18:	06a109aa 	strteq	r0, [r1], sl, lsr #19
    2f1c:	91020000 	mrsls	r0, (UNDEF: 2)
    2f20:	772e0073 			; <UNDEFINED> instruction: 0x772e0073
    2f24:	02000011 	andeq	r0, r0, #17
    2f28:	23b4097b 			; <UNDEFINED> instruction: 0x23b4097b
    2f2c:	00402000 	subeq	r2, r0, r0
    2f30:	9c010000 	stcls	0, cr0, [r1], {-0}
    2f34:	000012cd 	andeq	r1, r0, sp, asr #5
    2f38:	0015e52f 	andseq	lr, r5, pc, lsr #10
    2f3c:	097b0200 	ldmdbeq	fp!, {r9}^
    2f40:	00000310 	andeq	r0, r0, r0, lsl r3
    2f44:	2f749102 	svccs	0x00749102
    2f48:	00000efe 	strdeq	r0, [r0], -lr
    2f4c:	a1097b02 	tstge	r9, r2, lsl #22
    2f50:	02000006 	andeq	r0, r0, #6
    2f54:	2e007391 	mcrcs	3, 0, r7, cr0, cr1, {4}
    2f58:	00001250 	andeq	r1, r0, r0, asr r2
    2f5c:	74094502 	strvc	r4, [r9], #-1282	; 0xfffffafe
    2f60:	40200023 	eormi	r0, r0, r3, lsr #32
    2f64:	01000000 	mrseq	r0, (UNDEF: 0)
    2f68:	0013029c 	mulseq	r3, ip, r2
    2f6c:	12da2f00 	sbcsne	r2, sl, #0, 30
    2f70:	45020000 	strmi	r0, [r2, #-0]
    2f74:	00031009 	andeq	r1, r3, r9
    2f78:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    2f7c:	000efe2f 	andeq	pc, lr, pc, lsr #28
    2f80:	09450200 	stmdbeq	r5, {r9}^
    2f84:	000006a1 	andeq	r0, r0, r1, lsr #13
    2f88:	00739102 	rsbseq	r9, r3, r2, lsl #2
    2f8c:	0019d02e 	andseq	sp, r9, lr, lsr #32
    2f90:	092a0200 	stmdbeq	sl!, {r9}
    2f94:	20002334 	andcs	r2, r0, r4, lsr r3
    2f98:	00000040 	andeq	r0, r0, r0, asr #32
    2f9c:	13379c01 	teqne	r7, #256	; 0x100
    2fa0:	502f0000 	eorpl	r0, pc, r0
    2fa4:	02000019 	andeq	r0, r0, #25
    2fa8:	0310092a 	tsteq	r0, #688128	; 0xa8000
    2fac:	91020000 	mrsls	r0, (UNDEF: 2)
    2fb0:	0efe2f74 	mrceq	15, 7, r2, cr14, cr4, {3}
    2fb4:	2a020000 	bcs	82fbc <startup-0x1ff7d044>
    2fb8:	0006a109 	andeq	sl, r6, r9, lsl #2
    2fbc:	73910200 	orrsvc	r0, r1, #0, 4
    2fc0:	187c2e00 	ldmdane	ip!, {r9, sl, fp, sp}^
    2fc4:	0d020000 	stceq	0, cr0, [r2, #-0]
    2fc8:	0022f409 	eoreq	pc, r2, r9, lsl #8
    2fcc:	00004020 	andeq	r4, r0, r0, lsr #32
    2fd0:	6c9c0100 	ldfvss	f0, [ip], {0}
    2fd4:	2f000013 	svccs	0x00000013
    2fd8:	0000184c 	andeq	r1, r0, ip, asr #16
    2fdc:	10090d02 	andne	r0, r9, r2, lsl #26
    2fe0:	02000003 	andeq	r0, r0, #3
    2fe4:	fe2f7491 	mcr2	4, 1, r7, cr15, cr1, {4}
    2fe8:	0200000e 	andeq	r0, r0, #14
    2fec:	06a1090d 	strteq	r0, [r1], sp, lsl #18
    2ff0:	91020000 	mrsls	r0, (UNDEF: 2)
    2ff4:	8a2e0073 	bhi	b831c8 <startup-0x1f47ce38>
    2ff8:	02000014 	andeq	r0, r0, #20
    2ffc:	22b408e3 	adcscs	r0, r4, #14876672	; 0xe30000
    3000:	00402000 	subeq	r2, r0, r0
    3004:	9c010000 	stcls	0, cr0, [r1], {-0}
    3008:	000013a1 	andeq	r1, r0, r1, lsr #7
    300c:	0016972f 	andseq	r9, r6, pc, lsr #14
    3010:	08e30200 	stmiaeq	r3!, {r9}^
    3014:	00000310 	andeq	r0, r0, r0, lsl r3
    3018:	2f749102 	svccs	0x00749102
    301c:	00000efe 	strdeq	r0, [r0], -lr
    3020:	a108e302 	tstge	r8, r2, lsl #6
    3024:	02000006 	andeq	r0, r0, #6
    3028:	2e007391 	mcrcs	3, 0, r7, cr0, cr1, {4}
    302c:	0000131c 	andeq	r1, r0, ip, lsl r3
    3030:	7408af02 	strvc	sl, [r8], #-3842	; 0xfffff0fe
    3034:	40200022 	eormi	r0, r0, r2, lsr #32
    3038:	01000000 	mrseq	r0, (UNDEF: 0)
    303c:	0013d69c 	mulseq	r3, ip, r6
    3040:	15e52f00 	strbne	r2, [r5, #3840]!	; 0xf00
    3044:	af020000 	svcge	0x00020000
    3048:	00031008 	andeq	r1, r3, r8
    304c:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    3050:	000efe2f 	andeq	pc, lr, pc, lsr #28
    3054:	08af0200 	stmiaeq	pc!, {r9}	; <UNPREDICTABLE>
    3058:	000006a1 	andeq	r0, r0, r1, lsr #13
    305c:	00739102 	rsbseq	r9, r3, r2, lsl #2
    3060:	0016ed2e 	andseq	lr, r6, lr, lsr #26
    3064:	08760200 	ldmdaeq	r6!, {r9}^
    3068:	20002234 	andcs	r2, r0, r4, lsr r2
    306c:	00000040 	andeq	r0, r0, r0, asr #32
    3070:	140b9c01 	strne	r9, [fp], #-3073	; 0xfffff3ff
    3074:	da2f0000 	ble	bc307c <startup-0x1f43cf84>
    3078:	02000012 	andeq	r0, r0, #18
    307c:	03100876 	tsteq	r0, #7733248	; 0x760000
    3080:	91020000 	mrsls	r0, (UNDEF: 2)
    3084:	0efe2f74 	mrceq	15, 7, r2, cr14, cr4, {3}
    3088:	76020000 	strvc	r0, [r2], -r0
    308c:	0006a108 	andeq	sl, r6, r8, lsl #2
    3090:	73910200 	orrsvc	r0, r1, #0, 4
    3094:	11a82e00 			; <UNDEFINED> instruction: 0x11a82e00
    3098:	58020000 	stmdapl	r2, {}	; <UNPREDICTABLE>
    309c:	0021f408 	eoreq	pc, r1, r8, lsl #8
    30a0:	00004020 	andeq	r4, r0, r0, lsr #32
    30a4:	409c0100 	addsmi	r0, ip, r0, lsl #2
    30a8:	2f000014 	svccs	0x00000014
    30ac:	00001950 	andeq	r1, r0, r0, asr r9
    30b0:	10085802 	andne	r5, r8, r2, lsl #16
    30b4:	02000003 	andeq	r0, r0, #3
    30b8:	fe2f7491 	mcr2	4, 1, r7, cr15, cr1, {4}
    30bc:	0200000e 	andeq	r0, r0, #14
    30c0:	06a10858 	ssateq	r0, #2, r8, asr #16
    30c4:	91020000 	mrsls	r0, (UNDEF: 2)
    30c8:	7d2e0073 	stcvc	0, cr0, [lr, #-460]!	; 0xfffffe34
    30cc:	02000019 	andeq	r0, r0, #25
    30d0:	21b40838 			; <UNDEFINED> instruction: 0x21b40838
    30d4:	00402000 	subeq	r2, r0, r0
    30d8:	9c010000 	stcls	0, cr0, [r1], {-0}
    30dc:	00001475 	andeq	r1, r0, r5, ror r4
    30e0:	00184c2f 	andseq	r4, r8, pc, lsr #24
    30e4:	08380200 	ldmdaeq	r8!, {r9}
    30e8:	00000310 	andeq	r0, r0, r0, lsl r3
    30ec:	2f749102 	svccs	0x00749102
    30f0:	00000efe 	strdeq	r0, [r0], -lr
    30f4:	a1083802 	tstge	r8, r2, lsl #16
    30f8:	02000006 	andeq	r0, r0, #6
    30fc:	2e007391 	mcrcs	3, 0, r7, cr0, cr1, {4}
    3100:	00001654 	andeq	r1, r0, r4, asr r6
    3104:	98080e02 	stmdals	r8, {r1, r9, sl, fp}
    3108:	1c200021 	stcne	0, cr0, [r0], #-132	; 0xffffff7c
    310c:	01000000 	mrseq	r0, (UNDEF: 0)
    3110:	00149b9c 	mulseq	r4, ip, fp
    3114:	19b62f00 	ldmibne	r6!, {r8, r9, sl, fp, sp}
    3118:	0e020000 	cdpeq	0, 0, cr0, cr2, cr0, {0}
    311c:	00031008 	andeq	r1, r3, r8
    3120:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    3124:	123b2e00 	eorsne	r2, fp, #0, 28
    3128:	8e020000 	cdphi	0, 0, cr0, cr2, cr0, {0}
    312c:	00215c07 	eoreq	r5, r1, r7, lsl #24
    3130:	00003c20 	andeq	r3, r0, r0, lsr #24
    3134:	d09c0100 	addsle	r0, ip, r0, lsl #2
    3138:	2f000014 	svccs	0x00000014
    313c:	000014b0 			; <UNDEFINED> instruction: 0x000014b0
    3140:	10078e02 	andne	r8, r7, r2, lsl #28
    3144:	02000003 	andeq	r0, r0, #3
    3148:	3c316c91 	ldccc	12, cr6, [r1], #-580	; 0xfffffdbc
    314c:	02000018 	andeq	r0, r0, #24
    3150:	03100790 	tsteq	r0, #144, 14	; 0x2400000
    3154:	91020000 	mrsls	r0, (UNDEF: 2)
    3158:	012e0074 			; <UNDEFINED> instruction: 0x012e0074
    315c:	02000012 	andeq	r0, r0, #18
    3160:	211c072b 	tstcs	ip, fp, lsr #14
    3164:	00402000 	subeq	r2, r0, r0
    3168:	9c010000 	stcls	0, cr0, [r1], {-0}
    316c:	00001505 	andeq	r1, r0, r5, lsl #10
    3170:	0014a12f 	andseq	sl, r4, pc, lsr #2
    3174:	072b0200 	streq	r0, [fp, -r0, lsl #4]!
    3178:	00000310 	andeq	r0, r0, r0, lsl r3
    317c:	316c9102 	cmncc	ip, r2, lsl #2
    3180:	0000183c 	andeq	r1, r0, ip, lsr r8
    3184:	10072d02 	andne	r2, r7, r2, lsl #26
    3188:	02000003 	andeq	r0, r0, #3
    318c:	2e007491 	mcrcs	4, 0, r7, cr0, cr1, {4}
    3190:	0000155f 	andeq	r1, r0, pc, asr r5
    3194:	e0070b02 	and	r0, r7, r2, lsl #22
    3198:	3c200020 	stccc	0, cr0, [r0], #-128	; 0xffffff80
    319c:	01000000 	mrseq	r0, (UNDEF: 0)
    31a0:	00153a9c 	mulseq	r5, ip, sl
    31a4:	12cb2f00 	sbcne	r2, fp, #0, 30
    31a8:	0b020000 	bleq	831b0 <startup-0x1ff7ce50>
    31ac:	00031007 	andeq	r1, r3, r7
    31b0:	6c910200 	lfmvs	f0, 4, [r1], {0}
    31b4:	00183c31 	andseq	r3, r8, r1, lsr ip
    31b8:	070d0200 	streq	r0, [sp, -r0, lsl #4]
    31bc:	00000310 	andeq	r0, r0, r0, lsl r3
    31c0:	00749102 	rsbseq	r9, r4, r2, lsl #2
    31c4:	00128e2e 	andseq	r8, r2, lr, lsr #28
    31c8:	06ea0200 	strbteq	r0, [sl], r0, lsl #4
    31cc:	200020a4 	andcs	r2, r0, r4, lsr #1
    31d0:	0000003c 	andeq	r0, r0, ip, lsr r0
    31d4:	156f9c01 	strbne	r9, [pc, #-3073]!	; 25db <startup-0x1fffda25>
    31d8:	bf2f0000 	svclt	0x002f0000
    31dc:	02000014 	andeq	r0, r0, #20
    31e0:	031006ea 	tsteq	r0, #245366784	; 0xea00000
    31e4:	91020000 	mrsls	r0, (UNDEF: 2)
    31e8:	183c316c 	ldmdane	ip!, {r2, r3, r5, r6, r8, ip, sp}
    31ec:	ec020000 	stc	0, cr0, [r2], {-0}
    31f0:	00031006 	andeq	r1, r3, r6
    31f4:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    31f8:	14322e00 	ldrtne	r2, [r2], #-3584	; 0xfffff200
    31fc:	c6020000 	strgt	r0, [r2], -r0
    3200:	00206806 	eoreq	r6, r0, r6, lsl #16
    3204:	00003c20 	andeq	r3, r0, r0, lsr #24
    3208:	a49c0100 	ldrge	r0, [ip], #256	; 0x100
    320c:	2f000015 	svccs	0x00000015
    3210:	00001669 	andeq	r1, r0, r9, ror #12
    3214:	1006c602 	andne	ip, r6, r2, lsl #12
    3218:	02000003 	andeq	r0, r0, #3
    321c:	3c316c91 	ldccc	12, cr6, [r1], #-580	; 0xfffffdbc
    3220:	02000018 	andeq	r0, r0, #24
    3224:	031006c8 	tsteq	r0, #200, 12	; 0xc800000
    3228:	91020000 	mrsls	r0, (UNDEF: 2)
    322c:	fc2e0074 	stc2	0, cr0, [lr], #-464	; 0xfffffe30
    3230:	02000010 	andeq	r0, r0, #16
    3234:	204c06ab 	subcs	r0, ip, fp, lsr #13
    3238:	001c2000 	andseq	r2, ip, r0
    323c:	9c010000 	stcls	0, cr0, [r1], {-0}
    3240:	000015ca 	andeq	r1, r0, sl, asr #11
    3244:	0014fb2f 	andseq	pc, r4, pc, lsr #22
    3248:	06ab0200 	strteq	r0, [fp], r0, lsl #4
    324c:	00000310 	andeq	r0, r0, r0, lsl r3
    3250:	00749102 	rsbseq	r9, r4, r2, lsl #2
    3254:	00172e2e 	andseq	r2, r7, lr, lsr #28
    3258:	05ef0200 	strbeq	r0, [pc, #512]!	; 3460 <startup-0x1fffcba0>
    325c:	2000202c 	andcs	r2, r0, ip, lsr #32
    3260:	00000020 	andeq	r0, r0, r0, lsr #32
    3264:	15f09c01 	ldrbne	r9, [r0, #3073]!	; 0xc01
    3268:	fe2f0000 	cdp2	0, 2, cr0, cr15, cr0, {0}
    326c:	0200000e 	andeq	r0, r0, #14
    3270:	06a105ef 	strteq	r0, [r1], pc, ror #11
    3274:	91020000 	mrsls	r0, (UNDEF: 2)
    3278:	422e0077 	eormi	r0, lr, #119	; 0x77
    327c:	02000019 	andeq	r0, r0, #25
    3280:	200c05de 	ldrdcs	r0, [ip], -lr
    3284:	00202000 	eoreq	r2, r0, r0
    3288:	9c010000 	stcls	0, cr0, [r1], {-0}
    328c:	00001616 	andeq	r1, r0, r6, lsl r6
    3290:	000efe2f 	andeq	pc, lr, pc, lsr #28
    3294:	05de0200 	ldrbeq	r0, [lr, #512]	; 0x200
    3298:	000006a1 	andeq	r0, r0, r1, lsr #13
    329c:	00779102 	rsbseq	r9, r7, r2, lsl #2
    32a0:	0015f42e 	andseq	pc, r5, lr, lsr #8
    32a4:	05be0200 	ldreq	r0, [lr, #512]!	; 0x200
    32a8:	20001fac 	andcs	r1, r0, ip, lsr #31
    32ac:	00000060 	andeq	r0, r0, r0, rrx
    32b0:	164b9c01 	strbne	r9, [fp], -r1, lsl #24
    32b4:	972f0000 	strls	r0, [pc, -r0]!
    32b8:	02000011 	andeq	r0, r0, #17
    32bc:	031005be 	tsteq	r0, #796917760	; 0x2f800000
    32c0:	91020000 	mrsls	r0, (UNDEF: 2)
    32c4:	183c316c 	ldmdane	ip!, {r2, r3, r5, r6, r8, ip, sp}
    32c8:	c0020000 	andgt	r0, r2, r0
    32cc:	00031005 	andeq	r1, r3, r5
    32d0:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    32d4:	11133400 	tstne	r3, r0, lsl #8
    32d8:	25020000 	strcs	r0, [r2, #-0]
    32dc:	001e5405 	andseq	r5, lr, r5, lsl #8
    32e0:	00015820 	andeq	r5, r1, r0, lsr #16
    32e4:	cb9c0100 	blgt	fe7036ec <GPIO_Ports+0xde6ff8e4>
    32e8:	2f000016 	svccs	0x00000016
    32ec:	0000159a 	muleq	r0, sl, r5
    32f0:	cb052502 	blgt	14c700 <startup-0x1feb3900>
    32f4:	02000016 	andeq	r0, r0, #22
    32f8:	74335c91 	ldrtvc	r5, [r3], #-3217	; 0xfffff36f
    32fc:	0200706d 	andeq	r7, r0, #109	; 0x6d
    3300:	03100527 	tsteq	r0, #163577856	; 0x9c00000
    3304:	91020000 	mrsls	r0, (UNDEF: 2)
    3308:	19ca3170 	stmibne	sl, {r4, r5, r6, r8, ip, sp}^
    330c:	27020000 	strcs	r0, [r2, -r0]
    3310:	00031005 	andeq	r1, r3, r5
    3314:	6c910200 	lfmvs	f0, 4, [r1], {0}
    3318:	0018de31 	andseq	sp, r8, r1, lsr lr
    331c:	05270200 	streq	r0, [r7, #-512]!	; 0xfffffe00
    3320:	00000310 	andeq	r0, r0, r0, lsl r3
    3324:	31749102 	cmncc	r4, r2, lsl #2
    3328:	000010ec 	andeq	r1, r0, ip, ror #1
    332c:	10052702 	andne	r2, r5, r2, lsl #14
    3330:	02000003 	andeq	r0, r0, #3
    3334:	ea316891 	b	c5d580 <startup-0x1f3a2a80>
    3338:	02000013 	andeq	r0, r0, #19
    333c:	03100527 	tsteq	r0, #163577856	; 0x9c00000
    3340:	91020000 	mrsls	r0, (UNDEF: 2)
    3344:	1a1c3164 	bne	70f8dc <startup-0x1f8f0724>
    3348:	27020000 	strcs	r0, [r2, -r0]
    334c:	00031005 	andeq	r1, r3, r5
    3350:	60910200 	addsvs	r0, r1, r0, lsl #4
    3354:	89041e00 	stmdbhi	r4, {r9, sl, fp, ip}
    3358:	2e000009 	cdpcs	0, 0, cr0, cr0, cr9, {0}
    335c:	00001267 	andeq	r1, r0, r7, ror #4
    3360:	1804f102 	stmdane	r4, {r1, r8, ip, sp, lr, pc}
    3364:	3c20001e 	stccc	0, cr0, [r0], #-120	; 0xffffff88
    3368:	01000000 	mrseq	r0, (UNDEF: 0)
    336c:	0017069c 	mulseq	r7, ip, r6
    3370:	11e42f00 	mvnne	r2, r0, lsl #30
    3374:	f1020000 	cps	#0
    3378:	00031004 	andeq	r1, r3, r4
    337c:	6c910200 	lfmvs	f0, 4, [r1], {0}
    3380:	00183c31 	andseq	r3, r8, r1, lsr ip
    3384:	04f30200 	ldrbteq	r0, [r3], #512	; 0x200
    3388:	00000310 	andeq	r0, r0, r0, lsl r3
    338c:	00749102 	rsbseq	r9, r4, r2, lsl #2
    3390:	00151a2e 	andseq	r1, r5, lr, lsr #20
    3394:	04d20200 	ldrbeq	r0, [r2], #512	; 0x200
    3398:	20001de0 	andcs	r1, r0, r0, ror #27
    339c:	00000038 	andeq	r0, r0, r8, lsr r0
    33a0:	173b9c01 	ldrne	r9, [fp, -r1, lsl #24]!
    33a4:	e42f0000 	strt	r0, [pc], #-0	; 33ac <startup-0x1fffcc54>
    33a8:	02000011 	andeq	r0, r0, #17
    33ac:	031004d2 	tsteq	r0, #-771751936	; 0xd2000000
    33b0:	91020000 	mrsls	r0, (UNDEF: 2)
    33b4:	183c316c 	ldmdane	ip!, {r2, r3, r5, r6, r8, ip, sp}
    33b8:	d4020000 	strle	r0, [r2], #-0
    33bc:	00031004 	andeq	r1, r3, r4
    33c0:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    33c4:	14082e00 	strne	r2, [r8], #-3584	; 0xfffff200
    33c8:	b3020000 	movwlt	r0, #8192	; 0x2000
    33cc:	001dac04 	andseq	sl, sp, r4, lsl #24
    33d0:	00003420 	andeq	r3, r0, r0, lsr #8
    33d4:	709c0100 	addsvc	r0, ip, r0, lsl #2
    33d8:	2f000017 	svccs	0x00000017
    33dc:	000013b5 			; <UNDEFINED> instruction: 0x000013b5
    33e0:	1004b302 	andne	fp, r4, r2, lsl #6
    33e4:	02000003 	andeq	r0, r0, #3
    33e8:	3c316c91 	ldccc	12, cr6, [r1], #-580	; 0xfffffdbc
    33ec:	02000018 	andeq	r0, r0, #24
    33f0:	031004b5 	tsteq	r0, #-1258291200	; 0xb5000000
    33f4:	91020000 	mrsls	r0, (UNDEF: 2)
    33f8:	ad350074 	ldcge	0, cr0, [r5, #-464]!	; 0xfffffe30
    33fc:	02000012 	andeq	r0, r0, #18
    3400:	02d6049a 	sbcseq	r0, r6, #-1711276032	; 0x9a000000
    3404:	1d900000 	ldcne	0, cr0, [r0]
    3408:	001c2000 	andseq	r2, ip, r0
    340c:	9c010000 	stcls	0, cr0, [r1], {-0}
    3410:	0019fd2e 	andseq	pc, r9, lr, lsr #26
    3414:	047d0200 	ldrbteq	r0, [sp], #-512	; 0xfffffe00
    3418:	20001d5c 	andcs	r1, r0, ip, asr sp
    341c:	00000034 	andeq	r0, r0, r4, lsr r0
    3420:	17bb9c01 	ldrne	r9, [fp, r1, lsl #24]!
    3424:	fd2f0000 	stc2	0, cr0, [pc, #-0]	; 342c <startup-0x1fffcbd4>
    3428:	02000012 	andeq	r0, r0, #18
    342c:	0310047d 	tsteq	r0, #2097152000	; 0x7d000000
    3430:	91020000 	mrsls	r0, (UNDEF: 2)
    3434:	183c316c 	ldmdane	ip!, {r2, r3, r5, r6, r8, ip, sp}
    3438:	7f020000 	svcvc	0x00020000
    343c:	00031004 	andeq	r1, r3, r4
    3440:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    3444:	14e62e00 	strbtne	r2, [r6], #3584	; 0xe00
    3448:	b5020000 	strlt	r0, [r2, #-0]
    344c:	001d2003 	andseq	r2, sp, r3
    3450:	00003c20 	andeq	r3, r0, r0, lsr #24
    3454:	ff9c0100 			; <UNDEFINED> instruction: 0xff9c0100
    3458:	2f000017 	svccs	0x00000017
    345c:	0000175e 	andeq	r1, r0, lr, asr r7
    3460:	1003b502 	andne	fp, r3, r2, lsl #10
    3464:	02000003 	andeq	r0, r0, #3
    3468:	f12f6c91 			; <UNDEFINED> instruction: 0xf12f6c91
    346c:	02000012 	andeq	r0, r0, #18
    3470:	031003b5 	tsteq	r0, #-738197502	; 0xd4000002
    3474:	91020000 	mrsls	r0, (UNDEF: 2)
    3478:	183c3168 	ldmdane	ip!, {r3, r5, r6, r8, ip, sp}
    347c:	b7020000 	strlt	r0, [r2, -r0]
    3480:	00031003 	andeq	r1, r3, r3
    3484:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    3488:	147b2e00 	ldrbtne	r2, [fp], #-3584	; 0xfffff200
    348c:	88020000 	stmdahi	r2, {}	; <UNPREDICTABLE>
    3490:	001ce003 	andseq	lr, ip, r3
    3494:	00004020 	andeq	r4, r0, r0, lsr #32
    3498:	439c0100 	orrsmi	r0, ip, #0, 2
    349c:	2f000018 	svccs	0x00000018
    34a0:	000016de 	ldrdeq	r1, [r0], -lr
    34a4:	10038802 	andne	r8, r3, r2, lsl #16
    34a8:	02000003 	andeq	r0, r0, #3
    34ac:	7e2f6c91 	mcrvc	12, 1, r6, cr15, cr1, {4}
    34b0:	02000017 	andeq	r0, r0, #23
    34b4:	03100388 	tsteq	r0, #136, 6	; 0x20000002
    34b8:	91020000 	mrsls	r0, (UNDEF: 2)
    34bc:	183c3168 	ldmdane	ip!, {r3, r5, r6, r8, ip, sp}
    34c0:	8a020000 	bhi	834c8 <startup-0x1ff7cb38>
    34c4:	00031003 	andeq	r1, r3, r3
    34c8:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    34cc:	16392e00 	ldrtne	r2, [r9], -r0, lsl #28
    34d0:	6f020000 	svcvs	0x00020000
    34d4:	001cc003 	andseq	ip, ip, r3
    34d8:	00002020 	andeq	r2, r0, r0, lsr #32
    34dc:	699c0100 	ldmibvs	ip, {r8}
    34e0:	2f000018 	svccs	0x00000018
    34e4:	00000efe 	strdeq	r0, [r0], -lr
    34e8:	a1036f02 	tstge	r3, r2, lsl #30
    34ec:	02000006 	andeq	r0, r0, #6
    34f0:	2e007791 	mcrcs	7, 0, r7, cr0, cr1, {4}
    34f4:	000019e7 	andeq	r1, r0, r7, ror #19
    34f8:	a0035d02 	andge	r5, r3, r2, lsl #26
    34fc:	2020001c 	eorcs	r0, r0, ip, lsl r0
    3500:	01000000 	mrseq	r0, (UNDEF: 0)
    3504:	00188f9c 	mulseq	r8, ip, pc	; <UNPREDICTABLE>
    3508:	0efe2f00 	cdpeq	15, 15, cr2, cr14, cr0, {0}
    350c:	5d020000 	stcpl	0, cr0, [r2, #-0]
    3510:	0006a103 	andeq	sl, r6, r3, lsl #2
    3514:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    3518:	14582e00 	ldrbne	r2, [r8], #-3584	; 0xfffff200
    351c:	49020000 	stmdbmi	r2, {}	; <UNPREDICTABLE>
    3520:	001c7003 	andseq	r7, ip, r3
    3524:	00003020 	andeq	r3, r0, r0, lsr #32
    3528:	d39c0100 	orrsle	r0, ip, #0, 2
    352c:	2f000018 	svccs	0x00000018
    3530:	000016c6 	andeq	r1, r0, r6, asr #13
    3534:	10034902 	andne	r4, r3, r2, lsl #18
    3538:	02000003 	andeq	r0, r0, #3
    353c:	ce2f7491 	mcrgt	4, 1, r7, cr15, cr1, {4}
    3540:	02000016 	andeq	r0, r0, #22
    3544:	03100349 	tsteq	r0, #603979777	; 0x24000001
    3548:	91020000 	mrsls	r0, (UNDEF: 2)
    354c:	16d62f70 			; <UNDEFINED> instruction: 0x16d62f70
    3550:	49020000 	stmdbmi	r2, {}	; <UNPREDICTABLE>
    3554:	00031003 	andeq	r1, r3, r3
    3558:	6c910200 	lfmvs	f0, 4, [r1], {0}
    355c:	11d62e00 	bicsne	r2, r6, r0, lsl #28
    3560:	dc020000 	stcle	0, cr0, [r2], {-0}
    3564:	001c5002 	andseq	r5, ip, r2
    3568:	00002020 	andeq	r2, r0, r0, lsr #32
    356c:	f99c0100 			; <UNDEFINED> instruction: 0xf99c0100
    3570:	2f000018 	svccs	0x00000018
    3574:	00000efe 	strdeq	r0, [r0], -lr
    3578:	a102dc02 	tstge	r2, r2, lsl #24
    357c:	02000006 	andeq	r0, r0, #6
    3580:	2e007791 	mcrcs	7, 0, r7, cr0, cr1, {4}
    3584:	00001994 	muleq	r0, r4, r9
    3588:	28025102 	stmdacs	r2, {r1, r8, ip, lr}
    358c:	2820001c 	stmdacs	r0!, {r2, r3, r4}
    3590:	01000000 	mrseq	r0, (UNDEF: 0)
    3594:	00192e9c 	mulseq	r9, ip, lr
    3598:	19022f00 	stmdbne	r2, {r8, r9, sl, fp, sp}
    359c:	51020000 	mrspl	r0, (UNDEF: 2)
    35a0:	00031002 	andeq	r1, r3, r2
    35a4:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    35a8:	0019272f 	andseq	r2, r9, pc, lsr #14
    35ac:	02510200 	subseq	r0, r1, #0, 4
    35b0:	00000310 	andeq	r0, r0, r0, lsl r3
    35b4:	00709102 	rsbseq	r9, r0, r2, lsl #2
    35b8:	0017232e 	andseq	r2, r7, lr, lsr #6
    35bc:	02330200 	eorseq	r0, r3, #0, 4
    35c0:	20001c08 	andcs	r1, r0, r8, lsl #24
    35c4:	00000020 	andeq	r0, r0, r0, lsr #32
    35c8:	19549c01 	ldmdbne	r4, {r0, sl, fp, ip, pc}^
    35cc:	fe2f0000 	cdp2	0, 2, cr0, cr15, cr0, {0}
    35d0:	0200000e 	andeq	r0, r0, #14
    35d4:	06a10233 			; <UNDEFINED> instruction: 0x06a10233
    35d8:	91020000 	mrsls	r0, (UNDEF: 2)
    35dc:	0e2e0077 	mcreq	0, 1, r0, cr14, cr7, {3}
    35e0:	0200001a 	andeq	r0, r0, #26
    35e4:	1bcc021b 	blne	ff303e58 <GPIO_Ports+0xdf300050>
    35e8:	003c2000 	eorseq	r2, ip, r0
    35ec:	9c010000 	stcls	0, cr0, [r1], {-0}
    35f0:	000019b6 			; <UNDEFINED> instruction: 0x000019b6
    35f4:	00130e2f 	andseq	r0, r3, pc, lsr #28
    35f8:	021b0200 	andseq	r0, fp, #0, 4
    35fc:	00000310 	andeq	r0, r0, r0, lsl r3
    3600:	2f749102 	svccs	0x00749102
    3604:	000013d0 	ldrdeq	r1, [r0], -r0
    3608:	10021b02 	andne	r1, r2, r2, lsl #22
    360c:	02000003 	andeq	r0, r0, #3
    3610:	782f7091 	stmdavc	pc!, {r0, r4, r7, ip, sp, lr}	; <UNPREDICTABLE>
    3614:	02000019 	andeq	r0, r0, #25
    3618:	0310021b 	tsteq	r0, #-1342177279	; 0xb0000001
    361c:	91020000 	mrsls	r0, (UNDEF: 2)
    3620:	13d52f6c 	bicsne	r2, r5, #108, 30	; 0x1b0
    3624:	1b020000 	blne	8362c <startup-0x1ff7c9d4>
    3628:	00031002 	andeq	r1, r3, r2
    362c:	68910200 	ldmvs	r1, {r9}
    3630:	0013da2f 	andseq	sp, r3, pc, lsr #20
    3634:	021b0200 	andseq	r0, fp, #0, 4
    3638:	00000310 	andeq	r0, r0, r0, lsl r3
    363c:	00009102 	andeq	r9, r0, r2, lsl #2
    3640:	0013df2e 	andseq	sp, r3, lr, lsr #30
    3644:	01b80200 			; <UNDEFINED> instruction: 0x01b80200
    3648:	20001bac 	andcs	r1, r0, ip, lsr #23
    364c:	00000020 	andeq	r0, r0, r0, lsr #32
    3650:	19dc9c01 	ldmibne	ip, {r0, sl, fp, ip, pc}^
    3654:	fe2f0000 	cdp2	0, 2, cr0, cr15, cr0, {0}
    3658:	0200000e 	andeq	r0, r0, #14
    365c:	06a101b8 			; <UNDEFINED> instruction: 0x06a101b8
    3660:	91020000 	mrsls	r0, (UNDEF: 2)
    3664:	3d2e0077 	stccc	0, cr0, [lr, #-476]!	; 0xfffffe24
    3668:	02000013 	andeq	r0, r0, #19
    366c:	1b680190 	blne	1a03cb4 <startup-0x1e5fc34c>
    3670:	00442000 	subeq	r2, r4, r0
    3674:	9c010000 	stcls	0, cr0, [r1], {-0}
    3678:	00001a02 	andeq	r1, r0, r2, lsl #20
    367c:	00142a2f 	andseq	r2, r4, pc, lsr #20
    3680:	01900200 	orrseq	r0, r0, r0, lsl #4
    3684:	000002d6 	ldrdeq	r0, [r0], -r6
    3688:	00779102 	rsbseq	r9, r7, r2, lsl #2
    368c:	0015b22e 	andseq	fp, r5, lr, lsr #4
    3690:	01770200 	cmneq	r7, r0, lsl #4
    3694:	20001b48 	andcs	r1, r0, r8, asr #22
    3698:	00000020 	andeq	r0, r0, r0, lsr #32
    369c:	1a289c01 	bne	a2a6a8 <startup-0x1f5d5958>
    36a0:	fe2f0000 	cdp2	0, 2, cr0, cr15, cr0, {0}
    36a4:	0200000e 	andeq	r0, r0, #14
    36a8:	06a10177 			; <UNDEFINED> instruction: 0x06a10177
    36ac:	91020000 	mrsls	r0, (UNDEF: 2)
    36b0:	bd2e0077 	stclt	0, cr0, [lr, #-476]!	; 0xfffffe24
    36b4:	02000015 	andeq	r0, r0, #21
    36b8:	1b0a0153 	blne	283c0c <startup-0x1fd7c3f4>
    36bc:	003e2000 	eorseq	r2, lr, r0
    36c0:	9c010000 	stcls	0, cr0, [r1], {-0}
    36c4:	00001a5d 	andeq	r1, r0, sp, asr sl
    36c8:	0015c72f 	andseq	ip, r5, pc, lsr #14
    36cc:	01530200 	cmpeq	r3, r0, lsl #4
    36d0:	000002d6 	ldrdeq	r0, [r0], -r6
    36d4:	316f9102 	cmncc	pc, r2, lsl #2
    36d8:	0000183c 	andeq	r1, r0, ip, lsr r8
    36dc:	10015502 	andne	r5, r1, r2, lsl #10
    36e0:	02000003 	andeq	r0, r0, #3
    36e4:	36007491 			; <UNDEFINED> instruction: 0x36007491
    36e8:	0000179b 	muleq	r0, fp, r7
    36ec:	c8013402 	stmdagt	r1, {r1, sl, ip, sp}
    36f0:	ac000006 	stcge	0, cr0, [r0], {6}
    36f4:	5e20001a 	miapl	acc0, sl, r0
    36f8:	01000000 	mrseq	r0, (UNDEF: 0)
    36fc:	001aa59c 	mulseq	sl, ip, r5
    3700:	14493100 	strbne	r3, [r9], #-256	; 0xffffff00
    3704:	36020000 	strcc	r0, [r2], -r0
    3708:	00031b01 	andeq	r1, r3, r1, lsl #22
    370c:	68910200 	ldmvs	r1, {r9}
    3710:	00057531 	andeq	r7, r5, r1, lsr r5
    3714:	01370200 	teqeq	r7, r0, lsl #4
    3718:	000006c8 	andeq	r0, r0, r8, asr #13
    371c:	316f9102 	cmncc	pc, r2, lsl #2
    3720:	0000185b 	andeq	r1, r0, fp, asr r8
    3724:	6e013802 	cdpvs	8, 0, cr3, cr1, cr2, {0}
    3728:	02000006 	andeq	r0, r0, #6
    372c:	2e006e91 	mcrcs	14, 0, r6, cr0, cr1, {4}
    3730:	00001417 	andeq	r1, r0, r7, lsl r4
    3734:	84011c02 	strhi	r1, [r1], #-3074	; 0xfffff3fe
    3738:	2820001a 	stmdacs	r0!, {r1, r3, r4}
    373c:	01000000 	mrseq	r0, (UNDEF: 0)
    3740:	001acb9c 	mulseq	sl, ip, fp
    3744:	14732f00 	ldrbtne	r2, [r3], #-3840	; 0xfffff100
    3748:	1c020000 	stcne	0, cr0, [r2], {-0}
    374c:	0002d601 	andeq	sp, r2, r1, lsl #12
    3750:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    3754:	12832c00 	addne	r2, r3, #0, 24
    3758:	e1020000 	mrs	r0, (UNDEF: 2)
    375c:	20001a14 	andcs	r1, r0, r4, lsl sl
    3760:	00000070 	andeq	r0, r0, r0, ror r0
    3764:	d5379c01 	ldrle	r9, [r7, #-3073]!	; 0xfffff3ff
    3768:	01000017 	tsteq	r0, r7, lsl r0
    376c:	031006e0 	tsteq	r0, #224, 12	; 0xe000000
    3770:	19cc0000 	stmibne	ip, {}^	; <UNPREDICTABLE>
    3774:	00482000 	subeq	r2, r8, r0
    3778:	9c010000 	stcls	0, cr0, [r1], {-0}
    377c:	00001b06 	andeq	r1, r0, r6, lsl #22
    3780:	00152a2f 	andseq	r2, r5, pc, lsr #20
    3784:	06e00100 	strbteq	r0, [r0], r0, lsl #2
    3788:	00000310 	andeq	r0, r0, r0, lsl r3
    378c:	00749102 	rsbseq	r9, r4, r2, lsl #2
    3790:	000c6438 	andeq	r6, ip, r8, lsr r4
    3794:	065d0100 	ldrbeq	r0, [sp], -r0, lsl #2
    3798:	2000196c 	andcs	r1, r0, ip, ror #18
    379c:	00000060 	andeq	r0, r0, r0, rrx
    37a0:	242f9c01 	strtcs	r9, [pc], #-3073	; 37a8 <startup-0x1fffc858>
    37a4:	0100000c 	tsteq	r0, ip
    37a8:	025a065d 	subseq	r0, sl, #97517568	; 0x5d00000
    37ac:	91020000 	mrsls	r0, (UNDEF: 2)
    37b0:	1d972f77 	ldcne	15, cr2, [r7, #476]	; 0x1dc
    37b4:	5d010000 	stcpl	0, cr0, [r1, #-0]
    37b8:	00031006 	andeq	r1, r3, r6
    37bc:	70910200 	addsvc	r0, r1, r0, lsl #4
    37c0:	028d0000 	addeq	r0, sp, #0
    37c4:	00040000 	andeq	r0, r4, r0
    37c8:	00000837 	andeq	r0, r0, r7, lsr r8
    37cc:	04b30104 	ldrteq	r0, [r3], #260	; 0x104
    37d0:	680c0000 	stmdavs	ip, {}	; <UNPREDICTABLE>
    37d4:	3c00001a 	stccc	0, cr0, [r0], {26}
    37d8:	1c000004 	stcne	0, cr0, [r0], {4}
    37dc:	74200030 	strtvc	r0, [r0], #-48	; 0xffffffd0
    37e0:	bd000001 	stclt	0, cr0, [r0, #-4]
    37e4:	0200000c 	andeq	r0, r0, #12
    37e8:	02d30601 	sbcseq	r0, r3, #1048576	; 0x100000
    37ec:	76030000 	strvc	r0, [r3], -r0
    37f0:	02000001 	andeq	r0, r0, #1
    37f4:	0000372b 	andeq	r3, r0, fp, lsr #14
    37f8:	08010200 	stmdaeq	r1, {r9}
    37fc:	000002d1 	ldrdeq	r0, [r0], -r1
    3800:	86050202 	strhi	r0, [r5], -r2, lsl #4
    3804:	0200000b 	andeq	r0, r0, #11
    3808:	0cae0702 	stceq	7, cr0, [lr], #8
    380c:	2a030000 	bcs	c3814 <startup-0x1ff3c7ec>
    3810:	0200000d 	andeq	r0, r0, #13
    3814:	0000574d 	andeq	r5, r0, sp, asr #14
    3818:	05040200 	streq	r0, [r4, #-512]	; 0xfffffe00
    381c:	00000746 	andeq	r0, r0, r6, asr #14
    3820:	00071a03 	andeq	r1, r7, r3, lsl #20
    3824:	694f0200 	stmdbvs	pc, {r9}^	; <UNPREDICTABLE>
    3828:	02000000 	andeq	r0, r0, #0
    382c:	09ed0704 	stmibeq	sp!, {r2, r8, r9, sl}^
    3830:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    3834:	00074105 	andeq	r4, r7, r5, lsl #2
    3838:	07080200 	streq	r0, [r8, -r0, lsl #4]
    383c:	000009e8 	andeq	r0, r0, r8, ror #19
    3840:	69050404 	stmdbvs	r5, {r2, sl}
    3844:	0200746e 	andeq	r7, r0, #1845493760	; 0x6e000000
    3848:	09f20704 	ldmibeq	r2!, {r2, r8, r9, sl}^
    384c:	78030000 	stmdavc	r3, {}	; <UNPREDICTABLE>
    3850:	03000001 	movweq	r0, #1
    3854:	00002c18 	andeq	r2, r0, r8, lsl ip
    3858:	0d2c0300 	stceq	3, cr0, [ip, #-0]
    385c:	2c030000 	stccs	0, cr0, [r3], {-0}
    3860:	0000004c 	andeq	r0, r0, ip, asr #32
    3864:	00009705 	andeq	r9, r0, r5, lsl #14
    3868:	071c0300 	ldreq	r0, [ip, -r0, lsl #6]
    386c:	30030000 	andcc	r0, r3, r0
    3870:	0000005e 	andeq	r0, r0, lr, asr r0
    3874:	0000a705 	andeq	sl, r0, r5, lsl #14
    3878:	0c290600 	stceq	6, cr0, [r9], #-0
    387c:	fa040000 	blx	103884 <startup-0x1fefc77c>
    3880:	0000a206 	andeq	sl, r0, r6, lsl #4
    3884:	06640700 	strbteq	r0, [r4], -r0, lsl #14
    3888:	3b050000 	blcc	143890 <startup-0x1febc770>
    388c:	000000a7 	andeq	r0, r0, r7, lsr #1
    3890:	37010708 	strcc	r0, [r1, -r8, lsl #14]
    3894:	06000000 	streq	r0, [r0], -r0
    3898:	00e9035d 	rsceq	r0, r9, sp, asr r3
    389c:	92090000 	andls	r0, r9, #0
    38a0:	0000001e 	andeq	r0, r0, lr, lsl r0
    38a4:	5445530a 	strbpl	r5, [r5], #-778	; 0xfffffcf6
    38a8:	0b000100 	bleq	3cb0 <startup-0x1fffc350>
    38ac:	0000158f 	andeq	r1, r0, pc, lsl #11
    38b0:	ce035d06 	cdpgt	13, 0, cr5, cr3, cr6, {0}
    38b4:	0b000000 	bleq	38bc <startup-0x1fffc744>
    38b8:	00001066 	andeq	r1, r0, r6, rrx
    38bc:	ce035d06 	cdpgt	13, 0, cr5, cr3, cr6, {0}
    38c0:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    38c4:	00370107 	eorseq	r0, r7, r7, lsl #2
    38c8:	5f060000 	svcpl	0x00060000
    38cc:	00011c03 	andeq	r1, r1, r3, lsl #24
    38d0:	092f0900 	stmdbeq	pc!, {r8, fp}	; <UNPREDICTABLE>
    38d4:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    38d8:	00000bc8 	andeq	r0, r0, r8, asr #23
    38dc:	b20b0001 	andlt	r0, fp, #1
    38e0:	06000009 	streq	r0, [r0], -r9
    38e4:	0101035f 	tsteq	r1, pc, asr r3
    38e8:	0c0c0000 	stceq	0, cr0, [ip], {-0}
    38ec:	5607d906 	strpl	sp, [r7], -r6, lsl #18
    38f0:	0d000001 	stceq	0, cr0, [r0, #-4]
    38f4:	06005243 	streq	r5, [r0], -r3, asr #4
    38f8:	00b207db 	ldrsbteq	r0, [r2], fp
    38fc:	0d000000 	stceq	0, cr0, [r0, #-0]
    3900:	06005253 			; <UNDEFINED> instruction: 0x06005253
    3904:	00b207dc 	ldrsbteq	r0, [r2], ip
    3908:	0d040000 	stceq	0, cr0, [r4, #-0]
    390c:	06005244 	streq	r5, [r0], -r4, asr #4
    3910:	00b207dd 	ldrsbteq	r0, [r2], sp
    3914:	00080000 	andeq	r0, r8, r0
    3918:	001a5c0b 	andseq	r5, sl, fp, lsl #24
    391c:	07de0600 	ldrbeq	r0, [lr, r0, lsl #12]
    3920:	00000128 	andeq	r0, r0, r8, lsr #2
    3924:	001b0c0e 	andseq	r0, fp, lr, lsl #24
    3928:	017d0100 	cmneq	sp, r0, lsl #2
    392c:	2000316c 	andcs	r3, r0, ip, ror #2
    3930:	00000024 	andeq	r0, r0, r4, lsr #32
    3934:	01889c01 	orreq	r9, r8, r1, lsl #24
    3938:	210f0000 	mrscs	r0, CPSR
    393c:	0100001a 	tsteq	r0, sl, lsl r0
    3940:	008c017d 	addeq	r0, ip, sp, ror r1
    3944:	91020000 	mrsls	r0, (UNDEF: 2)
    3948:	fc100077 	ldc2	0, cr0, [r0], {119}	; 0x77
    394c:	0100001a 	tsteq	r0, sl, lsl r0
    3950:	00f5015f 	rscseq	r0, r5, pc, asr r1
    3954:	31280000 			; <UNDEFINED> instruction: 0x31280000
    3958:	00442000 	subeq	r2, r4, r0
    395c:	9c010000 	stcls	0, cr0, [r1], {-0}
    3960:	000001c1 	andeq	r0, r0, r1, asr #3
    3964:	001a210f 	andseq	r2, sl, pc, lsl #2
    3968:	015f0100 	cmpeq	pc, r0, lsl #2
    396c:	0000008c 	andeq	r0, r0, ip, lsl #1
    3970:	116f9102 	cmnne	pc, r2, lsl #2
    3974:	00000fe7 	andeq	r0, r0, r7, ror #31
    3978:	f5016101 			; <UNDEFINED> instruction: 0xf5016101
    397c:	02000000 	andeq	r0, r0, #0
    3980:	0e007791 	mcreq	7, 0, r7, cr0, cr1, {4}
    3984:	00001aee 	andeq	r1, r0, lr, ror #21
    3988:	04014f01 	streq	r4, [r1], #-3841	; 0xfffff0ff
    398c:	24200031 	strtcs	r0, [r0], #-49	; 0xffffffcf
    3990:	01000000 	mrseq	r0, (UNDEF: 0)
    3994:	0001e79c 	muleq	r1, ip, r7
    3998:	1ae50f00 	bne	ff9475a0 <GPIO_Ports+0xdf943798>
    399c:	4f010000 	svcmi	0x00010000
    39a0:	00008c01 	andeq	r8, r0, r1, lsl #24
    39a4:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    39a8:	1b221000 	blne	8879b0 <startup-0x1f778650>
    39ac:	2e010000 	cdpcs	0, 0, cr0, cr1, cr0, {0}
    39b0:	0000e901 	andeq	lr, r0, r1, lsl #18
    39b4:	0030c000 	eorseq	ip, r0, r0
    39b8:	00004420 	andeq	r4, r0, r0, lsr #8
    39bc:	209c0100 	addscs	r0, ip, r0, lsl #2
    39c0:	0f000002 	svceq	0x00000002
    39c4:	00001ae5 	andeq	r1, r0, r5, ror #21
    39c8:	8c012e01 	stchi	14, cr2, [r1], {1}
    39cc:	02000000 	andeq	r0, r0, #0
    39d0:	e7116f91 			; <UNDEFINED> instruction: 0xe7116f91
    39d4:	0100000f 	tsteq	r0, pc
    39d8:	00e90130 	rsceq	r0, r9, r0, lsr r1
    39dc:	91020000 	mrsls	r0, (UNDEF: 2)
    39e0:	280e0077 	stmdacs	lr, {r0, r1, r2, r4, r5, r6}
    39e4:	0100001a 	tsteq	r0, sl, lsl r0
    39e8:	30840114 	addcc	r0, r4, r4, lsl r1
    39ec:	003c2000 	eorseq	r2, ip, r0
    39f0:	9c010000 	stcls	0, cr0, [r1], {-0}
    39f4:	00000246 	andeq	r0, r0, r6, asr #4
    39f8:	000efe0f 	andeq	pc, lr, pc, lsl #28
    39fc:	01140100 	tsteq	r4, r0, lsl #2
    3a00:	0000011c 	andeq	r0, r0, ip, lsl r1
    3a04:	00779102 	rsbseq	r9, r7, r2, lsl #2
    3a08:	001a3d12 	andseq	r3, sl, r2, lsl sp
    3a0c:	a7b90100 	ldrge	r0, [r9, r0, lsl #2]!
    3a10:	70000000 	andvc	r0, r0, r0
    3a14:	14200030 	strtne	r0, [r0], #-48	; 0xffffffd0
    3a18:	01000000 	mrseq	r0, (UNDEF: 0)
    3a1c:	1a35139c 	bne	d48894 <startup-0x1f2b776c>
    3a20:	7b010000 	blvc	43a28 <startup-0x1ffbc5d8>
    3a24:	20003036 	andcs	r3, r0, r6, lsr r0
    3a28:	0000003a 	andeq	r0, r0, sl, lsr r0
    3a2c:	027f9c01 	rsbseq	r9, pc, #256	; 0x100
    3a30:	fe140000 	cdp2	0, 1, cr0, cr4, cr0, {0}
    3a34:	0100000e 	tsteq	r0, lr
    3a38:	00011c7b 	andeq	r1, r1, fp, ror ip
    3a3c:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    3a40:	1a511500 	bne	1448e48 <startup-0x1ebb71b8>
    3a44:	63010000 	movwvs	r0, #4096	; 0x1000
    3a48:	2000301c 	andcs	r3, r0, ip, lsl r0
    3a4c:	0000001a 	andeq	r0, r0, sl, lsl r0
    3a50:	64009c01 	strvs	r9, [r0], #-3073	; 0xfffff3ff
    3a54:	04000004 	streq	r0, [r0], #-4
    3a58:	00099200 	andeq	r9, r9, r0, lsl #4
    3a5c:	b3010400 	movwlt	r0, #5120	; 0x1400
    3a60:	0c000004 	stceq	0, cr0, [r0], {4}
    3a64:	00001b75 	andeq	r1, r0, r5, ror fp
    3a68:	0000043c 	andeq	r0, r0, ip, lsr r4
    3a6c:	20003190 	mulcs	r0, r0, r1
    3a70:	0000022e 	andeq	r0, r0, lr, lsr #4
    3a74:	00000ec2 	andeq	r0, r0, r2, asr #29
    3a78:	d3060102 	movwle	r0, #24834	; 0x6102
    3a7c:	03000002 	movweq	r0, #2
    3a80:	00000176 	andeq	r0, r0, r6, ror r1
    3a84:	00372b02 	eorseq	r2, r7, r2, lsl #22
    3a88:	01020000 	mrseq	r0, (UNDEF: 2)
    3a8c:	0002d108 	andeq	sp, r2, r8, lsl #2
    3a90:	05020200 	streq	r0, [r2, #-512]	; 0xfffffe00
    3a94:	00000b86 	andeq	r0, r0, r6, lsl #23
    3a98:	0003ff03 	andeq	pc, r3, r3, lsl #30
    3a9c:	50390200 	eorspl	r0, r9, r0, lsl #4
    3aa0:	02000000 	andeq	r0, r0, #0
    3aa4:	0cae0702 	stceq	7, cr0, [lr], #8
    3aa8:	2a030000 	bcs	c3ab0 <startup-0x1ff3c550>
    3aac:	0200000d 	andeq	r0, r0, #13
    3ab0:	0000624d 	andeq	r6, r0, sp, asr #4
    3ab4:	05040200 	streq	r0, [r4, #-512]	; 0xfffffe00
    3ab8:	00000746 	andeq	r0, r0, r6, asr #14
    3abc:	00071a03 	andeq	r1, r7, r3, lsl #20
    3ac0:	744f0200 	strbvc	r0, [pc], #-512	; 3ac8 <startup-0x1fffc538>
    3ac4:	02000000 	andeq	r0, r0, #0
    3ac8:	09ed0704 	stmibeq	sp!, {r2, r8, r9, sl}^
    3acc:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    3ad0:	00074105 	andeq	r4, r7, r5, lsl #2
    3ad4:	07080200 	streq	r0, [r8, -r0, lsl #4]
    3ad8:	000009e8 	andeq	r0, r0, r8, ror #19
    3adc:	69050404 	stmdbvs	r5, {r2, sl}
    3ae0:	0200746e 	andeq	r7, r0, #1845493760	; 0x6e000000
    3ae4:	09f20704 	ldmibeq	r2!, {r2, r8, r9, sl}^
    3ae8:	78030000 	stmdavc	r3, {}	; <UNPREDICTABLE>
    3aec:	03000001 	movweq	r0, #1
    3af0:	00002c18 	andeq	r2, r0, r8, lsl ip
    3af4:	04010300 	streq	r0, [r1], #-768	; 0xfffffd00
    3af8:	24030000 	strcs	r0, [r3], #-0
    3afc:	00000045 	andeq	r0, r0, r5, asr #32
    3b00:	000d2c03 	andeq	r2, sp, r3, lsl #24
    3b04:	572c0300 	strpl	r0, [ip, -r0, lsl #6]!
    3b08:	05000000 	streq	r0, [r0, #-0]
    3b0c:	000000ad 	andeq	r0, r0, sp, lsr #1
    3b10:	00071c03 	andeq	r1, r7, r3, lsl #24
    3b14:	69300300 	ldmdbvs	r0!, {r8, r9}
    3b18:	06000000 	streq	r0, [r0], -r0
    3b1c:	00000c29 	andeq	r0, r0, r9, lsr #24
    3b20:	b806fa04 	stmdalt	r6, {r2, r9, fp, ip, sp, lr, pc}
    3b24:	07000000 	streq	r0, [r0, -r0]
    3b28:	00000664 	andeq	r0, r0, r4, ror #12
    3b2c:	00bd3b05 	adcseq	r3, sp, r5, lsl #22
    3b30:	14080000 	strne	r0, [r8], #-0
    3b34:	01308d06 	teqeq	r0, r6, lsl #26
    3b38:	61090000 	mrsvs	r0, (UNDEF: 9)
    3b3c:	06000003 	streq	r0, [r0], -r3
    3b40:	0000bd8f 	andeq	fp, r0, pc, lsl #27
    3b44:	8b090000 	blhi	243b4c <startup-0x1fdbc4b4>
    3b48:	06000004 	streq	r0, [r0], -r4
    3b4c:	0000bd92 	muleq	r0, r2, sp
    3b50:	490a0400 	stmdbmi	sl, {sl}
    3b54:	06004544 	streq	r4, [r0], -r4, asr #10
    3b58:	00009795 	muleq	r0, r5, r7
    3b5c:	520a0800 	andpl	r0, sl, #0, 16
    3b60:	06005254 			; <UNDEFINED> instruction: 0x06005254
    3b64:	00009799 	muleq	r0, r9, r7
    3b68:	440a0900 	strmi	r0, [sl], #-2304	; 0xfffff700
    3b6c:	0600434c 	streq	r4, [r0], -ip, asr #6
    3b70:	0000979d 	muleq	r0, sp, r7
    3b74:	a1090a00 	tstge	r9, r0, lsl #20
    3b78:	0600001f 			; <UNDEFINED> instruction: 0x0600001f
    3b7c:	000130a1 	andeq	r3, r1, r1, lsr #1
    3b80:	0b000b00 	bleq	6788 <startup-0x1fff9878>
    3b84:	00000097 	muleq	r0, r7, r0
    3b88:	00000140 	andeq	r0, r0, r0, asr #2
    3b8c:	0000900c 	andeq	r9, r0, ip
    3b90:	03000700 	movweq	r0, #1792	; 0x700
    3b94:	0000054b 	andeq	r0, r0, fp, asr #10
    3b98:	00dfa306 	sbcseq	sl, pc, r6, lsl #6
    3b9c:	14080000 	strne	r0, [r8], #-0
    3ba0:	01a8a806 			; <UNDEFINED> instruction: 0x01a8a806
    3ba4:	61090000 	mrsvs	r0, (UNDEF: 9)
    3ba8:	06000003 	streq	r0, [r0], -r3
    3bac:	0000bdaa 	andeq	fp, r0, sl, lsr #27
    3bb0:	8b090000 	blhi	243bb8 <startup-0x1fdbc448>
    3bb4:	06000004 	streq	r0, [r0], -r4
    3bb8:	0000bdad 	andeq	fp, r0, sp, lsr #27
    3bbc:	490a0400 	stmdbmi	sl, {sl}
    3bc0:	06004544 	streq	r4, [r0], -r4, asr #10
    3bc4:	000097b0 			; <UNDEFINED> instruction: 0x000097b0
    3bc8:	520a0800 	andpl	r0, sl, #0, 16
    3bcc:	06005254 			; <UNDEFINED> instruction: 0x06005254
    3bd0:	000097b4 			; <UNDEFINED> instruction: 0x000097b4
    3bd4:	440a0900 	strmi	r0, [sl], #-2304	; 0xfffff700
    3bd8:	0600434c 	streq	r4, [r0], -ip, asr #6
    3bdc:	000097b8 			; <UNDEFINED> instruction: 0x000097b8
    3be0:	a1090a00 	tstge	r9, r0, lsl #20
    3be4:	0600001f 			; <UNDEFINED> instruction: 0x0600001f
    3be8:	000130bb 	strheq	r3, [r1], -fp
    3bec:	460a0b00 	strmi	r0, [sl], -r0, lsl #22
    3bf0:	0600494d 	streq	r4, [r0], -sp, asr #18
    3bf4:	000097be 			; <UNDEFINED> instruction: 0x000097be
    3bf8:	03001300 	movweq	r1, #768	; 0x300
    3bfc:	00000937 	andeq	r0, r0, r7, lsr r9
    3c00:	014bc106 	cmpeq	fp, r6, lsl #2
    3c04:	04080000 	streq	r0, [r8], #-0
    3c08:	02151307 	andseq	r1, r5, #469762048	; 0x1c000000
    3c0c:	960d0000 	strls	r0, [sp], -r0
    3c10:	07000008 	streq	r0, [r0, -r8]
    3c14:	0000bd15 	andeq	fp, r0, r5, lsl sp
    3c18:	18080400 	stmdane	r8, {sl}
    3c1c:	012f0d00 			; <UNDEFINED> instruction: 0x012f0d00
    3c20:	19070000 	stmdbne	r7, {}	; <UNPREDICTABLE>
    3c24:	000000bd 	strheq	r0, [r0], -sp
    3c28:	000e0a04 	andeq	r0, lr, r4, lsl #20
    3c2c:	0044490e 	subeq	r4, r4, lr, lsl #18
    3c30:	00bd1d07 	adcseq	r1, sp, r7, lsl #26
    3c34:	07040000 	streq	r0, [r4, -r0]
    3c38:	200d0007 	andcs	r0, sp, r7
    3c3c:	07000001 	streq	r0, [r0, -r1]
    3c40:	0000bd21 	andeq	fp, r0, r1, lsr #26
    3c44:	06010400 	streq	r0, [r1], -r0, lsl #8
    3c48:	076f0d00 	strbeq	r0, [pc, -r0, lsl #26]!
    3c4c:	24070000 	strcs	r0, [r7], #-0
    3c50:	000000bd 	strheq	r0, [r0], -sp
    3c54:	00030304 	andeq	r0, r3, r4, lsl #6
    3c58:	0008ec0d 	andeq	lr, r8, sp, lsl #24
    3c5c:	bd270700 	stclt	7, cr0, [r7, #-0]
    3c60:	04000000 	streq	r0, [r0], #-0
    3c64:	00000003 	andeq	r0, r0, r3
    3c68:	00048403 	andeq	r8, r4, r3, lsl #8
    3c6c:	b3280700 			; <UNDEFINED> instruction: 0xb3280700
    3c70:	0f000001 	svceq	0x00000001
    3c74:	00001b5e 	andeq	r1, r0, lr, asr fp
    3c78:	00976401 	addseq	r6, r7, r1, lsl #8
    3c7c:	33840000 	orrcc	r0, r4, #0
    3c80:	003a2000 	eorseq	r2, sl, r0
    3c84:	9c010000 	stcls	0, cr0, [r1], {-0}
    3c88:	0000029c 	muleq	r0, ip, r2
    3c8c:	67736d10 			; <UNDEFINED> instruction: 0x67736d10
    3c90:	9c640100 	stflse	f0, [r4], #-0
    3c94:	02000002 	andeq	r0, r0, #2
    3c98:	34116c91 	ldrcc	r6, [r1], #-3217	; 0xfffff36f
    3c9c:	0100001b 	tsteq	r0, fp, lsl r0
    3ca0:	0002a264 	andeq	sl, r2, r4, ror #4
    3ca4:	68910200 	ldmvs	r1, {r9}
    3ca8:	001b3e11 	andseq	r3, fp, r1, lsl lr
    3cac:	a2640100 	rsbge	r0, r4, #0, 2
    3cb0:	02000002 	andeq	r0, r0, #2
    3cb4:	48116491 	ldmdami	r1, {r0, r4, r7, sl, sp, lr}
    3cb8:	0100001b 	tsteq	r0, fp, lsl r0
    3cbc:	0002a864 	andeq	sl, r2, r4, ror #16
    3cc0:	60910200 	addsvs	r0, r1, r0, lsl #4
    3cc4:	001b4f11 	andseq	r4, fp, r1, lsl pc
    3cc8:	a8640100 	stmdage	r4!, {r8}^
    3ccc:	02000002 	andeq	r0, r0, #2
    3cd0:	f9110091 			; <UNDEFINED> instruction: 0xf9110091
    3cd4:	0100001b 	tsteq	r0, fp, lsl r0
    3cd8:	0002a264 	andeq	sl, r2, r4, ror #4
    3cdc:	04910200 	ldreq	r0, [r1], #512	; 0x200
    3ce0:	001bd412 	andseq	sp, fp, r2, lsl r4
    3ce4:	a2650100 	rsbge	r0, r5, #0, 2
    3ce8:	02000002 	andeq	r0, r0, #2
    3cec:	13007491 	movwne	r7, #1169	; 0x491
    3cf0:	0001a804 	andeq	sl, r1, r4, lsl #16
    3cf4:	97041300 	strls	r1, [r4, -r0, lsl #6]
    3cf8:	13000000 	movwne	r0, #0
    3cfc:	0000a204 	andeq	sl, r0, r4, lsl #4
    3d00:	1c290f00 	stcne	15, cr0, [r9], #-0
    3d04:	5b010000 	blpl	43d0c <startup-0x1ffbc2f4>
    3d08:	00000097 	muleq	r0, r7, r0
    3d0c:	2000335c 	andcs	r3, r0, ip, asr r3
    3d10:	00000028 	andeq	r0, r0, r8, lsr #32
    3d14:	02f29c01 	rscseq	r9, r2, #256	; 0x100
    3d18:	6d100000 	ldcvs	0, cr0, [r0, #-0]
    3d1c:	01006773 	tsteq	r0, r3, ror r7
    3d20:	0002f25b 	andeq	pc, r2, fp, asr r2	; <UNPREDICTABLE>
    3d24:	6c910200 	lfmvs	f0, 4, [r1], {0}
    3d28:	001bf411 	andseq	pc, fp, r1, lsl r4	; <UNPREDICTABLE>
    3d2c:	bd5b0100 	ldflte	f0, [fp, #-0]
    3d30:	02000000 	andeq	r0, r0, #0
    3d34:	d4126891 	ldrle	r6, [r2], #-2193	; 0xfffff76f
    3d38:	0100001b 	tsteq	r0, fp, lsl r0
    3d3c:	0002a25c 	andeq	sl, r2, ip, asr r2
    3d40:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    3d44:	40041300 	andmi	r1, r4, r0, lsl #6
    3d48:	0f000001 	svceq	0x00000001
    3d4c:	00001bc3 	andeq	r1, r0, r3, asr #23
    3d50:	00974601 	addseq	r4, r7, r1, lsl #12
    3d54:	32ec0000 	rsccc	r0, ip, #0
    3d58:	00702000 	rsbseq	r2, r0, r0
    3d5c:	9c010000 	stcls	0, cr0, [r1], {-0}
    3d60:	00000357 	andeq	r0, r0, r7, asr r3
    3d64:	67736d10 			; <UNDEFINED> instruction: 0x67736d10
    3d68:	f2460100 	vrhadd.s8	d16, d6, d0
    3d6c:	02000002 	andeq	r0, r0, #2
    3d70:	56116c91 			; <UNDEFINED> instruction: 0x56116c91
    3d74:	0100001b 	tsteq	r0, fp, lsl r0
    3d78:	00029c46 	andeq	r9, r2, r6, asr #24
    3d7c:	68910200 	ldmvs	r1, {r9}
    3d80:	00646910 	rsbeq	r6, r4, r0, lsl r9
    3d84:	00974601 	addseq	r4, r7, r1, lsl #12
    3d88:	91020000 	mrsls	r0, (UNDEF: 2)
    3d8c:	1bd41267 	blne	ff508730 <GPIO_Ports+0xdf504928>
    3d90:	47010000 	strmi	r0, [r1, -r0]
    3d94:	000002a2 	andeq	r0, r0, r2, lsr #5
    3d98:	12749102 	rsbsne	r9, r4, #-2147483648	; 0x80000000
    3d9c:	0000035a 	andeq	r0, r0, sl, asr r3
    3da0:	02154a01 	andseq	r4, r5, #4096	; 0x1000
    3da4:	91020000 	mrsls	r0, (UNDEF: 2)
    3da8:	0c0f0070 	stceq	0, cr0, [pc], {112}	; 0x70
    3dac:	0100001c 	tsteq	r0, ip, lsl r0
    3db0:	0000972f 	andeq	r9, r0, pc, lsr #14
    3db4:	00326200 	eorseq	r6, r2, r0, lsl #4
    3db8:	00008a20 	andeq	r8, r0, r0, lsr #20
    3dbc:	d39c0100 	orrsle	r0, ip, #0, 2
    3dc0:	10000003 	andne	r0, r0, r3
    3dc4:	0067736d 	rsbeq	r7, r7, sp, ror #6
    3dc8:	02f22f01 	rscseq	r2, r2, #1, 30
    3dcc:	91020000 	mrsls	r0, (UNDEF: 2)
    3dd0:	1c40116c 	stfnee	f1, [r0], {108}	; 0x6c
    3dd4:	2f010000 	svccs	0x00010000
    3dd8:	000000bd 	strheq	r0, [r0], -sp
    3ddc:	11689102 	cmnne	r8, r2, lsl #2
    3de0:	00001c00 	andeq	r1, r0, r0, lsl #24
    3de4:	00972f01 	addseq	r2, r7, r1, lsl #30
    3de8:	91020000 	mrsls	r0, (UNDEF: 2)
    3dec:	1c481167 	stfnee	f1, [r8], {103}	; 0x67
    3df0:	2f010000 	svccs	0x00010000
    3df4:	00000097 	muleq	r0, r7, r0
    3df8:	11669102 	cmnne	r6, r2, lsl #2
    3dfc:	00001c50 	andeq	r1, r0, r0, asr ip
    3e00:	00972f01 	addseq	r2, r7, r1, lsl #30
    3e04:	91020000 	mrsls	r0, (UNDEF: 2)
    3e08:	1bd41200 	blne	ff508610 <GPIO_Ports+0xdf504808>
    3e0c:	30010000 	andcc	r0, r1, r0
    3e10:	000002a2 	andeq	r0, r0, r2, lsr #5
    3e14:	12749102 	rsbsne	r9, r4, #-2147483648	; 0x80000000
    3e18:	0000035a 	andeq	r0, r0, sl, asr r3
    3e1c:	02153301 	andseq	r3, r5, #67108864	; 0x4000000
    3e20:	91020000 	mrsls	r0, (UNDEF: 2)
    3e24:	e1140070 	tst	r4, r0, ror r0
    3e28:	0100001b 	tsteq	r0, fp, lsl r0
    3e2c:	00009708 	andeq	r9, r0, r8, lsl #14
    3e30:	00319000 	eorseq	r9, r1, r0
    3e34:	0000d220 	andeq	sp, r0, r0, lsr #4
    3e38:	109c0100 	addsne	r0, ip, r0, lsl #2
    3e3c:	0067736d 	rsbeq	r7, r7, sp, ror #6
    3e40:	02f20801 	rscseq	r0, r2, #65536	; 0x10000
    3e44:	91020000 	mrsls	r0, (UNDEF: 2)
    3e48:	1c1e1164 	ldfnes	f1, [lr], {100}	; 0x64
    3e4c:	08010000 	stmdaeq	r1, {}	; <UNPREDICTABLE>
    3e50:	00000097 	muleq	r0, r7, r0
    3e54:	11639102 	cmnne	r3, r2, lsl #2
    3e58:	00001b34 	andeq	r1, r0, r4, lsr fp
    3e5c:	00970801 	addseq	r0, r7, r1, lsl #16
    3e60:	91020000 	mrsls	r0, (UNDEF: 2)
    3e64:	1b3e1162 	blne	f883f4 <startup-0x1f077c0c>
    3e68:	08010000 	stmdaeq	r1, {}	; <UNPREDICTABLE>
    3e6c:	00000097 	muleq	r0, r7, r0
    3e70:	11619102 	cmnne	r1, r2, lsl #2
    3e74:	00001b48 	andeq	r1, r0, r8, asr #22
    3e78:	00a20801 	adceq	r0, r2, r1, lsl #16
    3e7c:	91020000 	mrsls	r0, (UNDEF: 2)
    3e80:	1b4f1100 	blne	13c8288 <startup-0x1ec37d78>
    3e84:	08010000 	stmdaeq	r1, {}	; <UNPREDICTABLE>
    3e88:	000000a2 	andeq	r0, r0, r2, lsr #1
    3e8c:	11049102 	tstne	r4, r2, lsl #2
    3e90:	00001bf9 	strdeq	r1, [r0], -r9
    3e94:	00970801 	addseq	r0, r7, r1, lsl #16
    3e98:	91020000 	mrsls	r0, (UNDEF: 2)
    3e9c:	1bd41208 	blne	ff5086c4 <GPIO_Ports+0xdf5048bc>
    3ea0:	0d010000 	stceq	0, cr0, [r1, #-0]
    3ea4:	000002a2 	andeq	r0, r0, r2, lsr #5
    3ea8:	126c9102 	rsbne	r9, ip, #-2147483648	; 0x80000000
    3eac:	0000035a 	andeq	r0, r0, sl, asr r3
    3eb0:	02151001 	andseq	r1, r5, #1
    3eb4:	91020000 	mrsls	r0, (UNDEF: 2)
    3eb8:	a9000068 	stmdbge	r0, {r3, r5, r6}
    3ebc:	04000001 	streq	r0, [r0], #-1
    3ec0:	000ac500 	andeq	ip, sl, r0, lsl #10
    3ec4:	b3010400 	movwlt	r0, #5120	; 0x1400
    3ec8:	0c000004 	stceq	0, cr0, [r0], {4}
    3ecc:	00001c68 	andeq	r1, r0, r8, ror #24
    3ed0:	0000043c 	andeq	r0, r0, ip, lsr r4
    3ed4:	200033be 			; <UNDEFINED> instruction: 0x200033be
    3ed8:	00000128 	andeq	r0, r0, r8, lsr #2
    3edc:	000010b9 	strheq	r1, [r0], -r9
    3ee0:	d3060102 	movwle	r0, #24834	; 0x6102
    3ee4:	03000002 	movweq	r0, #2
    3ee8:	00000176 	andeq	r0, r0, r6, ror r1
    3eec:	00372b02 	eorseq	r2, r7, r2, lsl #22
    3ef0:	01020000 	mrseq	r0, (UNDEF: 2)
    3ef4:	0002d108 	andeq	sp, r2, r8, lsl #2
    3ef8:	05020200 	streq	r0, [r2, #-512]	; 0xfffffe00
    3efc:	00000b86 	andeq	r0, r0, r6, lsl #23
    3f00:	ae070202 	cdpge	2, 0, cr0, cr7, cr2, {0}
    3f04:	0200000c 	andeq	r0, r0, #12
    3f08:	07460504 	strbeq	r0, [r6, -r4, lsl #10]
    3f0c:	04020000 	streq	r0, [r2], #-0
    3f10:	0009ed07 	andeq	lr, r9, r7, lsl #26
    3f14:	05080200 	streq	r0, [r8, #-512]	; 0xfffffe00
    3f18:	00000741 	andeq	r0, r0, r1, asr #14
    3f1c:	e8070802 	stmda	r7, {r1, fp}
    3f20:	04000009 	streq	r0, [r0], #-9
    3f24:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    3f28:	04020074 	streq	r0, [r2], #-116	; 0xffffff8c
    3f2c:	0009f207 	andeq	pc, r9, r7, lsl #4
    3f30:	01780300 	cmneq	r8, r0, lsl #6
    3f34:	18030000 	stmdane	r3, {}	; <UNPREDICTABLE>
    3f38:	0000002c 	andeq	r0, r0, ip, lsr #32
    3f3c:	0c046705 	stceq	7, cr6, [r4], {5}
    3f40:	000000b9 	strheq	r0, [r0], -r9
    3f44:	001cd006 	andseq	sp, ip, r6
    3f48:	b90e0400 	stmdblt	lr, {sl}
    3f4c:	00000000 	andeq	r0, r0, r0
    3f50:	001c6206 	andseq	r6, ip, r6, lsl #4
    3f54:	76110400 	ldrvc	r0, [r1], -r0, lsl #8
    3f58:	64000000 	strvs	r0, [r0], #-0
    3f5c:	006e6907 	rsbeq	r6, lr, r7, lsl #18
    3f60:	00761404 	rsbseq	r1, r6, r4, lsl #8
    3f64:	07650000 	strbeq	r0, [r5, -r0]!
    3f68:	0074756f 	rsbseq	r7, r4, pc, ror #10
    3f6c:	00761704 	rsbseq	r1, r6, r4, lsl #14
    3f70:	00660000 	rsbeq	r0, r6, r0
    3f74:	00007608 	andeq	r7, r0, r8, lsl #12
    3f78:	0000c900 	andeq	ip, r0, r0, lsl #18
    3f7c:	006f0900 	rsbeq	r0, pc, r0, lsl #18
    3f80:	00630000 	rsbeq	r0, r3, r0
    3f84:	001cb303 	andseq	fp, ip, r3, lsl #6
    3f88:	81180400 	tsthi	r8, r0, lsl #8
    3f8c:	0a000000 	beq	3f94 <startup-0x1fffc06c>
    3f90:	00001cda 	ldrdeq	r1, [r0], -sl
    3f94:	00762d01 	rsbseq	r2, r6, r1, lsl #26
    3f98:	34880000 	strcc	r0, [r8], #0
    3f9c:	005e2000 	subseq	r2, lr, r0
    3fa0:	9c010000 	stcls	0, cr0, [r1], {-0}
    3fa4:	0000010a 	andeq	r0, r0, sl, lsl #2
    3fa8:	001cef0b 	andseq	lr, ip, fp, lsl #30
    3fac:	0a2d0100 	beq	b443b4 <startup-0x1f4bbc4c>
    3fb0:	02000001 	andeq	r0, r0, #1
    3fb4:	cb0b7491 	blgt	2e1200 <startup-0x1fd1ee00>
    3fb8:	0100001c 	tsteq	r0, ip, lsl r0
    3fbc:	0001102d 	andeq	r1, r1, sp, lsr #32
    3fc0:	70910200 	addsvc	r0, r1, r0, lsl #4
    3fc4:	c9040c00 	stmdbgt	r4, {sl, fp}
    3fc8:	0c000000 	stceq	0, cr0, [r0], {-0}
    3fcc:	00007604 	andeq	r7, r0, r4, lsl #12
    3fd0:	1cb80d00 	ldcne	13, cr0, [r8]
    3fd4:	1f010000 	svcne	0x00010000
    3fd8:	20003448 	andcs	r3, r0, r8, asr #8
    3fdc:	00000040 	andeq	r0, r0, r0, asr #32
    3fe0:	01569c01 	cmpeq	r6, r1, lsl #24
    3fe4:	ef0b0000 	svc	0x000b0000
    3fe8:	0100001c 	tsteq	r0, ip, lsl r0
    3fec:	00010a1f 	andeq	r0, r1, pc, lsl sl
    3ff0:	6c910200 	lfmvs	f0, 4, [r1], {0}
    3ff4:	001cd50b 	andseq	sp, ip, fp, lsl #10
    3ff8:	761f0100 	ldrvc	r0, [pc], -r0, lsl #2
    3ffc:	02000000 	andeq	r0, r0, #0
    4000:	f60e6b91 			; <UNDEFINED> instruction: 0xf60e6b91
    4004:	0100001c 	tsteq	r0, ip, lsl r0
    4008:	00007621 	andeq	r7, r0, r1, lsr #12
    400c:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    4010:	1c580a00 	mrrcne	10, 0, r0, r8, cr0
    4014:	0c010000 	stceq	0, cr0, [r1], {-0}
    4018:	00000076 	andeq	r0, r0, r6, ror r0
    401c:	200033e6 	andcs	r3, r0, r6, ror #7
    4020:	00000062 	andeq	r0, r0, r2, rrx
    4024:	018c9c01 	orreq	r9, ip, r1, lsl #24
    4028:	ef0b0000 	svc	0x000b0000
    402c:	0100001c 	tsteq	r0, ip, lsl r0
    4030:	00010a0c 	andeq	r0, r1, ip, lsl #20
    4034:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    4038:	001cd50b 	andseq	sp, ip, fp, lsl #10
    403c:	760c0100 	strvc	r0, [ip], -r0, lsl #2
    4040:	02000000 	andeq	r0, r0, #0
    4044:	0f007391 	svceq	0x00007391
    4048:	00001ce4 	andeq	r1, r0, r4, ror #25
    404c:	33be0401 			; <UNDEFINED> instruction: 0x33be0401
    4050:	00282000 	eoreq	r2, r8, r0
    4054:	9c010000 	stcls	0, cr0, [r1], {-0}
    4058:	001cef0b 	andseq	lr, ip, fp, lsl #30
    405c:	0a040100 	beq	104464 <startup-0x1fefbb9c>
    4060:	02000001 	andeq	r0, r0, #1
    4064:	00007491 	muleq	r0, r1, r4
    4068:	00000543 	andeq	r0, r0, r3, asr #10
    406c:	0bae0004 	bleq	feb84084 <GPIO_Ports+0xdeb8027c>
    4070:	01040000 	mrseq	r0, (UNDEF: 4)
    4074:	000004b3 			; <UNDEFINED> instruction: 0x000004b3
    4078:	001dad0c 	andseq	sl, sp, ip, lsl #26
    407c:	00043c00 	andeq	r3, r4, r0, lsl #24
    4080:	0034e800 	eorseq	lr, r4, r0, lsl #16
    4084:	0001c420 	andeq	ip, r1, r0, lsr #8
    4088:	00120b00 	andseq	r0, r2, r0, lsl #22
    408c:	06010200 	streq	r0, [r1], -r0, lsl #4
    4090:	000002d3 	ldrdeq	r0, [r0], -r3
    4094:	00017603 	andeq	r7, r1, r3, lsl #12
    4098:	372b0200 	strcc	r0, [fp, -r0, lsl #4]!
    409c:	02000000 	andeq	r0, r0, #0
    40a0:	02d10801 	sbcseq	r0, r1, #65536	; 0x10000
    40a4:	02020000 	andeq	r0, r2, #0
    40a8:	000b8605 	andeq	r8, fp, r5, lsl #12
    40ac:	07020200 	streq	r0, [r2, -r0, lsl #4]
    40b0:	00000cae 	andeq	r0, r0, lr, lsr #25
    40b4:	000d2a03 	andeq	r2, sp, r3, lsl #20
    40b8:	574d0200 	strbpl	r0, [sp, -r0, lsl #4]
    40bc:	02000000 	andeq	r0, r0, #0
    40c0:	07460504 	strbeq	r0, [r6, -r4, lsl #10]
    40c4:	1a030000 	bne	c40cc <startup-0x1ff3bf34>
    40c8:	02000007 	andeq	r0, r0, #7
    40cc:	0000694f 	andeq	r6, r0, pc, asr #18
    40d0:	07040200 	streq	r0, [r4, -r0, lsl #4]
    40d4:	000009ed 	andeq	r0, r0, sp, ror #19
    40d8:	41050802 	tstmi	r5, r2, lsl #16
    40dc:	02000007 	andeq	r0, r0, #7
    40e0:	09e80708 	stmibeq	r8!, {r3, r8, r9, sl}^
    40e4:	04040000 	streq	r0, [r4], #-0
    40e8:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
    40ec:	07040200 	streq	r0, [r4, -r0, lsl #4]
    40f0:	000009f2 	strdeq	r0, [r0], -r2
    40f4:	00017803 	andeq	r7, r1, r3, lsl #16
    40f8:	2c180300 	ldccs	3, cr0, [r8], {-0}
    40fc:	05000000 	streq	r0, [r0, #-0]
    4100:	0000008c 	andeq	r0, r0, ip, lsl #1
    4104:	000d2c03 	andeq	r2, sp, r3, lsl #24
    4108:	4c2c0300 	stcmi	3, cr0, [ip], #-0
    410c:	05000000 	streq	r0, [r0, #-0]
    4110:	0000009c 	muleq	r0, ip, r0
    4114:	00071c03 	andeq	r1, r7, r3, lsl #24
    4118:	5e300300 	cdppl	3, 3, cr0, cr0, cr0, {0}
    411c:	05000000 	streq	r0, [r0, #-0]
    4120:	000000ac 	andeq	r0, r0, ip, lsr #1
    4124:	0000b706 	andeq	fp, r0, r6, lsl #14
    4128:	0e040700 	cdpeq	7, 0, cr0, cr4, cr0, {0}
    412c:	7d01a004 	stcvc	0, cr10, [r1, #-16]
    4130:	08000001 	stmdaeq	r0, {r0}
    4134:	00000d34 	andeq	r0, r0, r4, lsr sp
    4138:	8d01a204 	sfmhi	f2, 1, [r1, #-16]
    413c:	00000001 	andeq	r0, r0, r1
    4140:	0002bd08 	andeq	fp, r2, r8, lsl #26
    4144:	01a30400 			; <UNDEFINED> instruction: 0x01a30400
    4148:	00000192 	muleq	r0, r2, r1
    414c:	0a850820 	beq	fe1461d4 <GPIO_Ports+0xde1423cc>
    4150:	a4040000 	strge	r0, [r4], #-0
    4154:	00018d01 	andeq	r8, r1, r1, lsl #26
    4158:	00088000 	andeq	r8, r8, r0
    415c:	04000000 	streq	r0, [r0], #-0
    4160:	019201a5 	orrseq	r0, r2, r5, lsr #3
    4164:	09a00000 	stmibeq	r0!, {}	; <UNPREDICTABLE>
    4168:	00000cde 	ldrdeq	r0, [r0], -lr
    416c:	8d01a604 	stchi	6, cr10, [r1, #-16]
    4170:	00000001 	andeq	r0, r0, r1
    4174:	03670901 	cmneq	r7, #16384	; 0x4000
    4178:	a7040000 	strge	r0, [r4, -r0]
    417c:	00019201 	andeq	r9, r1, r1, lsl #4
    4180:	09012000 	stmdbeq	r1, {sp}
    4184:	0000012a 	andeq	r0, r0, sl, lsr #2
    4188:	8d01a804 	stchi	8, cr10, [r1, #-16]
    418c:	80000001 	andhi	r0, r0, r1
    4190:	03710901 	cmneq	r1, #16384	; 0x4000
    4194:	a9040000 	stmdbge	r4, {}	; <UNPREDICTABLE>
    4198:	00019201 	andeq	r9, r1, r1, lsl #4
    419c:	0901a000 	stmdbeq	r1, {sp, pc}
    41a0:	0000030a 	andeq	r0, r0, sl, lsl #6
    41a4:	8d01aa04 	vstrhi	s20, [r1, #-16]
    41a8:	00000001 	andeq	r0, r0, r1
    41ac:	02f10902 	rscseq	r0, r1, #32768	; 0x8000
    41b0:	ab040000 	blge	1041b8 <startup-0x1fefbe48>
    41b4:	0001a201 	andeq	sl, r1, r1, lsl #4
    41b8:	0a022000 	beq	8c1c0 <startup-0x1ff73e40>
    41bc:	04005049 	streq	r5, [r0], #-73	; 0xffffffb7
    41c0:	01c201ac 	biceq	r0, r2, ip, lsr #3
    41c4:	03000000 	movweq	r0, #0
    41c8:	0002fb09 	andeq	pc, r2, r9, lsl #22
    41cc:	01ad0400 			; <UNDEFINED> instruction: 0x01ad0400
    41d0:	000001c7 	andeq	r0, r0, r7, asr #3
    41d4:	5a0903f0 	bpl	24519c <startup-0x1fdbae64>
    41d8:	04000005 	streq	r0, [r0], #-5
    41dc:	00b701ae 	adcseq	r0, r7, lr, lsr #3
    41e0:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    41e4:	00b70b00 	adcseq	r0, r7, r0, lsl #22
    41e8:	018d0000 	orreq	r0, sp, r0
    41ec:	850c0000 	strhi	r0, [ip, #-0]
    41f0:	07000000 	streq	r0, [r0, -r0]
    41f4:	017d0500 	cmneq	sp, r0, lsl #10
    41f8:	ac0b0000 	stcge	0, cr0, [fp], {-0}
    41fc:	a2000000 	andge	r0, r0, #0
    4200:	0c000001 	stceq	0, cr0, [r0], {1}
    4204:	00000085 	andeq	r0, r0, r5, lsl #1
    4208:	ac0b0017 	stcge	0, cr0, [fp], {23}
    420c:	b2000000 	andlt	r0, r0, #0
    4210:	0c000001 	stceq	0, cr0, [r0], {1}
    4214:	00000085 	andeq	r0, r0, r5, lsl #1
    4218:	970b0037 	smladxls	fp, r7, r0, r0
    421c:	c2000000 	andgt	r0, r0, #0
    4220:	0c000001 	stceq	0, cr0, [r0], {1}
    4224:	00000085 	andeq	r0, r0, r5, lsl #1
    4228:	b20500ef 	andlt	r0, r5, #239	; 0xef
    422c:	0b000001 	bleq	4238 <startup-0x1fffbdc8>
    4230:	000000ac 	andeq	r0, r0, ip, lsr #1
    4234:	000001d8 	ldrdeq	r0, [r0], -r8
    4238:	0000850d 	andeq	r8, r0, sp, lsl #10
    423c:	00028300 	andeq	r8, r2, r0, lsl #6
    4240:	0009a80e 	andeq	sl, r9, lr, lsl #16
    4244:	01af0400 			; <UNDEFINED> instruction: 0x01af0400
    4248:	000000c1 	andeq	r0, r0, r1, asr #1
    424c:	c0048c0f 	andgt	r8, r4, pc, lsl #24
    4250:	0002ff01 	andeq	pc, r2, r1, lsl #30
    4254:	01e20800 	mvneq	r0, r0, lsl #16
    4258:	c2040000 	andgt	r0, r4, #0
    425c:	0000bc01 	andeq	fp, r0, r1, lsl #24
    4260:	5a080000 	bpl	204268 <startup-0x1fdfbd98>
    4264:	04000002 	streq	r0, [r0], #-2
    4268:	00b701c3 	adcseq	r0, r7, r3, asr #3
    426c:	08040000 	stmdaeq	r4, {}	; <UNPREDICTABLE>
    4270:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
    4274:	b701c404 	strlt	ip, [r1, -r4, lsl #8]
    4278:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    427c:	0001d008 	andeq	sp, r1, r8
    4280:	01c50400 	biceq	r0, r5, r0, lsl #8
    4284:	000000b7 	strheq	r0, [r0], -r7
    4288:	4353100c 	cmpmi	r3, #12
    428c:	c6040052 			; <UNDEFINED> instruction: 0xc6040052
    4290:	0000b701 	andeq	fp, r0, r1, lsl #14
    4294:	43101000 	tstmi	r0, #0
    4298:	04005243 	streq	r5, [r0], #-579	; 0xfffffdbd
    429c:	00b701c7 	adcseq	r0, r7, r7, asr #3
    42a0:	10140000 	andsne	r0, r4, r0
    42a4:	00504853 	subseq	r4, r0, r3, asr r8
    42a8:	0f01c804 	svceq	0x0001c804
    42ac:	18000003 	stmdane	r0, {r0, r1}
    42b0:	00055408 	andeq	r5, r5, r8, lsl #8
    42b4:	01c90400 	biceq	r0, r9, r0, lsl #8
    42b8:	000000b7 	strheq	r0, [r0], -r7
    42bc:	0ad60824 	beq	ff586354 <GPIO_Ports+0xdf58254c>
    42c0:	ca040000 	bgt	1042c8 <startup-0x1fefbd38>
    42c4:	0000b701 	andeq	fp, r0, r1, lsl #14
    42c8:	7f082800 	svcvc	0x00082800
    42cc:	04000004 	streq	r0, [r0], #-4
    42d0:	00b701cb 	adcseq	r0, r7, fp, asr #3
    42d4:	082c0000 	stmdaeq	ip!, {}	; <UNPREDICTABLE>
    42d8:	000003bf 			; <UNDEFINED> instruction: 0x000003bf
    42dc:	b701cc04 	strlt	ip, [r1, -r4, lsl #24]
    42e0:	30000000 	andcc	r0, r0, r0
    42e4:	000b8008 	andeq	r8, fp, r8
    42e8:	01cd0400 	biceq	r0, sp, r0, lsl #8
    42ec:	000000b7 	strheq	r0, [r0], -r7
    42f0:	087c0834 	ldmdaeq	ip!, {r2, r4, r5, fp}^
    42f4:	ce040000 	cdpgt	0, 0, cr0, cr4, cr0, {0}
    42f8:	0000b701 	andeq	fp, r0, r1, lsl #14
    42fc:	a4083800 	strge	r3, [r8], #-2048	; 0xfffff800
    4300:	0400000a 	streq	r0, [r0], #-10
    4304:	00b701cf 	adcseq	r0, r7, pc, asr #3
    4308:	103c0000 	eorsne	r0, ip, r0
    430c:	00524650 	subseq	r4, r2, r0, asr r6
    4310:	2901d004 	stmdbcs	r1, {r2, ip, lr, pc}
    4314:	40000003 	andmi	r0, r0, r3
    4318:	52464410 	subpl	r4, r6, #16, 8	; 0x10000000
    431c:	01d10400 	bicseq	r0, r1, r0, lsl #8
    4320:	000000bc 	strheq	r0, [r0], -ip
    4324:	44411048 	strbmi	r1, [r1], #-72	; 0xffffffb8
    4328:	d2040052 	andle	r0, r4, #82	; 0x52
    432c:	0000bc01 	andeq	fp, r0, r1, lsl #24
    4330:	7b084c00 	blvc	217338 <startup-0x1fde8cc8>
    4334:	0400000b 	streq	r0, [r0], #-11
    4338:	034301d3 	movteq	r0, #12755	; 0x31d3
    433c:	08500000 	ldmdaeq	r0, {}^	; <UNPREDICTABLE>
    4340:	00000b9f 	muleq	r0, pc, fp	; <UNPREDICTABLE>
    4344:	5d01d404 	cfstrspl	mvf13, [r1, #-16]
    4348:	60000003 	andvs	r0, r0, r3
    434c:	0002bd08 	andeq	fp, r2, r8, lsl #26
    4350:	01d50400 	bicseq	r0, r5, r0, lsl #8
    4354:	00000362 	andeq	r0, r0, r2, ror #6
    4358:	0cd80874 	ldcleq	8, cr0, [r8], {116}	; 0x74
    435c:	d6040000 	strle	r0, [r4], -r0
    4360:	0000b701 	andeq	fp, r0, r1, lsl #14
    4364:	0b008800 	bleq	2636c <startup-0x1ffd9c94>
    4368:	00000097 	muleq	r0, r7, r0
    436c:	0000030f 	andeq	r0, r0, pc, lsl #6
    4370:	0000850c 	andeq	r8, r0, ip, lsl #10
    4374:	05000b00 	streq	r0, [r0, #-2816]	; 0xfffff500
    4378:	000002ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    437c:	0000bc0b 	andeq	fp, r0, fp, lsl #24
    4380:	00032400 	andeq	r2, r3, r0, lsl #8
    4384:	00850c00 	addeq	r0, r5, r0, lsl #24
    4388:	00010000 	andeq	r0, r1, r0
    438c:	00031406 	andeq	r1, r3, r6, lsl #8
    4390:	03240500 			; <UNDEFINED> instruction: 0x03240500
    4394:	bc0b0000 	stclt	0, cr0, [fp], {-0}
    4398:	3e000000 	cdpcc	0, 0, cr0, cr0, cr0, {0}
    439c:	0c000003 	stceq	0, cr0, [r0], {3}
    43a0:	00000085 	andeq	r0, r0, r5, lsl #1
    43a4:	2e060003 	cdpcs	0, 0, cr0, cr6, cr3, {0}
    43a8:	05000003 	streq	r0, [r0, #-3]
    43ac:	0000033e 	andeq	r0, r0, lr, lsr r3
    43b0:	0000bc0b 	andeq	fp, r0, fp, lsl #24
    43b4:	00035800 	andeq	r5, r3, r0, lsl #16
    43b8:	00850c00 	addeq	r0, r5, r0, lsl #24
    43bc:	00040000 	andeq	r0, r4, r0
    43c0:	00034806 	andeq	r4, r3, r6, lsl #16
    43c4:	03580500 	cmpeq	r8, #0, 10
    43c8:	ac0b0000 	stcge	0, cr0, [fp], {-0}
    43cc:	72000000 	andvc	r0, r0, #0
    43d0:	0c000003 	stceq	0, cr0, [r0], {3}
    43d4:	00000085 	andeq	r0, r0, r5, lsl #1
    43d8:	a50e0004 	strge	r0, [lr, #-4]
    43dc:	04000003 	streq	r0, [r0], #-3
    43e0:	01e401d7 	ldrdeq	r0, [r4, #23]!
    43e4:	100f0000 	andne	r0, pc, r0
    43e8:	bc02bf04 	stclt	15, cr11, [r2], {4}
    43ec:	08000003 	stmdaeq	r0, {r0, r1}
    43f0:	0000161e 	andeq	r1, r0, lr, lsl r6
    43f4:	b702c104 	strlt	ip, [r2, -r4, lsl #2]
    43f8:	00000000 	andeq	r0, r0, r0
    43fc:	00187708 	andseq	r7, r8, r8, lsl #14
    4400:	02c20400 	sbceq	r0, r2, #0, 8
    4404:	000000b7 	strheq	r0, [r0], -r7
    4408:	41561004 	cmpmi	r6, r4
    440c:	c304004c 	movwgt	r0, #16460	; 0x404c
    4410:	0000b702 	andeq	fp, r0, r2, lsl #14
    4414:	31080800 	tstcc	r8, r0, lsl #16
    4418:	04000018 	streq	r0, [r0], #-24	; 0xffffffe8
    441c:	00bc02c4 	adcseq	r0, ip, r4, asr #5
    4420:	000c0000 	andeq	r0, ip, r0
    4424:	0017040e 	andseq	r0, r7, lr, lsl #8
    4428:	02c50400 	sbceq	r0, r5, #0, 8
    442c:	0000037e 	andeq	r0, r0, lr, ror r3
    4430:	000c2911 	andeq	r2, ip, r1, lsl r9
    4434:	06fa0400 	ldrbteq	r0, [sl], r0, lsl #8
    4438:	000000a7 	andeq	r0, r0, r7, lsr #1
    443c:	00066412 	andeq	r6, r6, r2, lsl r4
    4440:	ac3b0500 	cfldr32ge	mvfx0, [fp], #-0
    4444:	13000000 	movwne	r0, #0
    4448:	00370107 	eorseq	r0, r7, r7, lsl #2
    444c:	5f060000 	svcpl	0x00060000
    4450:	0003fa03 	andeq	pc, r3, r3, lsl #20
    4454:	092f1400 	stmdbeq	pc!, {sl, ip}	; <UNPREDICTABLE>
    4458:	14000000 	strne	r0, [r0], #-0
    445c:	00000bc8 	andeq	r0, r0, r8, asr #23
    4460:	b20e0001 	andlt	r0, lr, #1
    4464:	06000009 	streq	r0, [r0], -r9
    4468:	03df035f 	bicseq	r0, pc, #2080374785	; 0x7c000001
    446c:	04150000 	ldreq	r0, [r5], #-0
    4470:	043f3607 	ldrteq	r3, [pc], #-1543	; 4478 <startup-0x1fffbb88>
    4474:	04160000 	ldreq	r0, [r6], #-0
    4478:	07000009 	streq	r0, [r0, -r9]
    447c:	00008c38 	andeq	r8, r0, r8, lsr ip
    4480:	dd160000 	ldcle	0, cr0, [r6, #-0]
    4484:	07000003 	streq	r0, [r0, -r3]
    4488:	00008c3d 	andeq	r8, r0, sp, lsr ip
    448c:	14160100 	ldrne	r0, [r6], #-256	; 0xffffff00
    4490:	07000009 	streq	r0, [r0, -r9]
    4494:	00008c42 	andeq	r8, r0, r2, asr #24
    4498:	bd160200 	lfmlt	f0, 4, [r6, #-0]
    449c:	07000001 	streq	r0, [r0, -r1]
    44a0:	0003fa47 	andeq	pc, r3, r7, asr #20
    44a4:	03000300 	movweq	r0, #768	; 0x300
    44a8:	00000c9d 	muleq	r0, sp, ip
    44ac:	04064a07 	streq	r4, [r6], #-2567	; 0xfffff5f9
    44b0:	7c170000 	ldcvc	0, cr0, [r7], {-0}
    44b4:	0100001d 	tsteq	r0, sp, lsl r0
    44b8:	003678df 	ldrsbteq	r7, [r6], -pc
    44bc:	00003420 	andeq	r3, r0, r0, lsr #8
    44c0:	6e9c0100 	fmlvse	f0, f4, f0
    44c4:	18000004 	stmdane	r0, {r2}
    44c8:	00001d00 	andeq	r1, r0, r0, lsl #26
    44cc:	00acdf01 	adceq	sp, ip, r1, lsl #30
    44d0:	91020000 	mrsls	r0, (UNDEF: 2)
    44d4:	68170074 	ldmdavs	r7, {r2, r4, r5, r6}
    44d8:	0100001d 	tsteq	r0, sp, lsl r0
    44dc:	003630c7 	eorseq	r3, r6, r7, asr #1
    44e0:	00004820 	andeq	r4, r0, r0, lsr #16
    44e4:	a09c0100 	addsge	r0, ip, r0, lsl #2
    44e8:	18000004 	stmdane	r0, {r2}
    44ec:	00001e21 	andeq	r1, r0, r1, lsr #28
    44f0:	008cc701 	addeq	ip, ip, r1, lsl #14
    44f4:	91020000 	mrsls	r0, (UNDEF: 2)
    44f8:	0efe1877 	mrceq	8, 7, r1, cr14, cr7, {3}
    44fc:	c7010000 	strgt	r0, [r1, -r0]
    4500:	000003fa 	strdeq	r0, [r0], -sl
    4504:	00769102 	rsbseq	r9, r6, r2, lsl #2
    4508:	001d4d17 	andseq	r4, sp, r7, lsl sp
    450c:	04b40100 	ldrteq	r0, [r4], #256	; 0x100
    4510:	2c200036 	stccs	0, cr0, [r0], #-216	; 0xffffff28
    4514:	01000000 	mrseq	r0, (UNDEF: 0)
    4518:	0004d29c 	muleq	r4, ip, r2
    451c:	1da01800 	stcne	8, cr1, [r0]
    4520:	b4010000 	strlt	r0, [r1], #-0
    4524:	000000ac 	andeq	r0, r0, ip, lsr #1
    4528:	18749102 	ldmdane	r4!, {r1, r8, ip, pc}^
    452c:	00001d46 	andeq	r1, r0, r6, asr #26
    4530:	00acb401 	adceq	fp, ip, r1, lsl #8
    4534:	91020000 	mrsls	r0, (UNDEF: 2)
    4538:	35170070 	ldrcc	r0, [r7, #-112]	; 0xffffff90
    453c:	0100001d 	tsteq	r0, sp, lsl r0
    4540:	00350c88 	eorseq	r0, r5, r8, lsl #25
    4544:	0000f820 	andeq	pc, r0, r0, lsr #16
    4548:	209c0100 	addscs	r0, ip, r0, lsl #2
    454c:	18000005 	stmdane	r0, {r0, r2}
    4550:	00001d12 	andeq	r1, r0, r2, lsl sp
    4554:	05208801 	streq	r8, [r0, #-2049]!	; 0xfffff7ff
    4558:	91020000 	mrsls	r0, (UNDEF: 2)
    455c:	1d941964 	vldrne.16	s2, [r4, #200]	; 0xc8	; <UNPREDICTABLE>
    4560:	8a010000 	bhi	44568 <startup-0x1ffbba98>
    4564:	0000008c 	andeq	r0, r0, ip, lsl #1
    4568:	196f9102 	stmdbne	pc!, {r1, r8, ip, pc}^	; <UNPREDICTABLE>
    456c:	00001d3f 	andeq	r1, r0, pc, lsr sp
    4570:	008c8a01 	addeq	r8, ip, r1, lsl #20
    4574:	91020000 	mrsls	r0, (UNDEF: 2)
    4578:	1d61196e 			; <UNDEFINED> instruction: 0x1d61196e
    457c:	8a010000 	bhi	44584 <startup-0x1ffbba7c>
    4580:	0000008c 	andeq	r0, r0, ip, lsl #1
    4584:	006d9102 	rsbeq	r9, sp, r2, lsl #2
    4588:	043f041a 	ldrteq	r0, [pc], #-1050	; 4590 <startup-0x1fffba70>
    458c:	2e1b0000 	cdpcs	0, 1, cr0, cr11, cr0, {0}
    4590:	0100001e 	tsteq	r0, lr, lsl r0
    4594:	0034e876 	eorseq	lr, r4, r6, ror r8
    4598:	00002420 	andeq	r2, r0, r0, lsr #8
    459c:	189c0100 	ldmne	ip, {r8}
    45a0:	00001d22 	andeq	r1, r0, r2, lsr #26
    45a4:	00ac7601 	adceq	r7, ip, r1, lsl #12
    45a8:	91020000 	mrsls	r0, (UNDEF: 2)
    45ac:	23000074 	movwcs	r0, #116	; 0x74
    45b0:	04000006 	streq	r0, [r0], #-6
    45b4:	000d2200 	andeq	r2, sp, r0, lsl #4
    45b8:	b3010400 	movwlt	r0, #5120	; 0x1400
    45bc:	0c000004 	stceq	0, cr0, [r0], {4}
    45c0:	00001ecc 	andeq	r1, r0, ip, asr #29
    45c4:	0000043c 	andeq	r0, r0, ip, lsr r4
    45c8:	200036ac 	andcs	r3, r0, ip, lsr #13
    45cc:	0000050e 	andeq	r0, r0, lr, lsl #10
    45d0:	00001409 	andeq	r1, r0, r9, lsl #8
    45d4:	d3060102 	movwle	r0, #24834	; 0x6102
    45d8:	03000002 	movweq	r0, #2
    45dc:	00000176 	andeq	r0, r0, r6, ror r1
    45e0:	00372b02 	eorseq	r2, r7, r2, lsl #22
    45e4:	01020000 	mrseq	r0, (UNDEF: 2)
    45e8:	0002d108 	andeq	sp, r2, r8, lsl #2
    45ec:	05020200 	streq	r0, [r2, #-512]	; 0xfffffe00
    45f0:	00000b86 	andeq	r0, r0, r6, lsl #23
    45f4:	0003ff03 	andeq	pc, r3, r3, lsl #30
    45f8:	50390200 	eorspl	r0, r9, r0, lsl #4
    45fc:	02000000 	andeq	r0, r0, #0
    4600:	0cae0702 	stceq	7, cr0, [lr], #8
    4604:	2a030000 	bcs	c460c <startup-0x1ff3b9f4>
    4608:	0200000d 	andeq	r0, r0, #13
    460c:	0000624d 	andeq	r6, r0, sp, asr #4
    4610:	05040200 	streq	r0, [r4, #-512]	; 0xfffffe00
    4614:	00000746 	andeq	r0, r0, r6, asr #14
    4618:	00071a03 	andeq	r1, r7, r3, lsl #20
    461c:	744f0200 	strbvc	r0, [pc], #-512	; 4624 <startup-0x1fffb9dc>
    4620:	02000000 	andeq	r0, r0, #0
    4624:	09ed0704 	stmibeq	sp!, {r2, r8, r9, sl}^
    4628:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    462c:	00074105 	andeq	r4, r7, r5, lsl #2
    4630:	07080200 	streq	r0, [r8, -r0, lsl #4]
    4634:	000009e8 	andeq	r0, r0, r8, ror #19
    4638:	69050404 	stmdbvs	r5, {r2, sl}
    463c:	0200746e 	andeq	r7, r0, #1845493760	; 0x6e000000
    4640:	09f20704 	ldmibeq	r2!, {r2, r8, r9, sl}^
    4644:	78030000 	stmdavc	r3, {}	; <UNPREDICTABLE>
    4648:	03000001 	movweq	r0, #1
    464c:	00002c18 	andeq	r2, r0, r8, lsl ip
    4650:	04010300 	streq	r0, [r1], #-768	; 0xfffffd00
    4654:	24030000 	strcs	r0, [r3], #-0
    4658:	00000045 	andeq	r0, r0, r5, asr #32
    465c:	0000a205 	andeq	sl, r0, r5, lsl #4
    4660:	0d2c0300 	stceq	3, cr0, [ip, #-0]
    4664:	2c030000 	stccs	0, cr0, [r3], {-0}
    4668:	00000057 	andeq	r0, r0, r7, asr r0
    466c:	0000b205 	andeq	fp, r0, r5, lsl #4
    4670:	071c0300 	ldreq	r0, [ip, -r0, lsl #6]
    4674:	30030000 	andcc	r0, r3, r0
    4678:	00000069 	andeq	r0, r0, r9, rrx
    467c:	0000c205 	andeq	ip, r0, r5, lsl #4
    4680:	0c290600 	stceq	6, cr0, [r9], #-0
    4684:	fa040000 	blx	10468c <startup-0x1fefb974>
    4688:	0000bd06 	andeq	fp, r0, r6, lsl #26
    468c:	06640700 	strbteq	r0, [r4], -r0, lsl #14
    4690:	3b050000 	blcc	144698 <startup-0x1febb968>
    4694:	000000c2 	andeq	r0, r0, r2, asr #1
    4698:	37010708 	strcc	r0, [r1, -r8, lsl #14]
    469c:	06000000 	streq	r0, [r0], -r0
    46a0:	0104035f 	tsteq	r4, pc, asr r3
    46a4:	2f090000 	svccs	0x00090000
    46a8:	00000009 	andeq	r0, r0, r9
    46ac:	000bc809 	andeq	ip, fp, r9, lsl #16
    46b0:	0a000100 	beq	4ab8 <startup-0x1fffb548>
    46b4:	05c30628 	strbeq	r0, [r3, #1576]	; 0x628
    46b8:	00000190 	muleq	r0, r0, r1
    46bc:	000c5e0b 	andeq	r5, ip, fp, lsl #28
    46c0:	05c50600 	strbeq	r0, [r5, #1536]	; 0x600
    46c4:	000000cd 	andeq	r0, r0, sp, asr #1
    46c8:	0aa90b00 	beq	fea472d0 <GPIO_Ports+0xdea434c8>
    46cc:	c6060000 	strgt	r0, [r6], -r0
    46d0:	0000cd05 	andeq	ip, r0, r5, lsl #26
    46d4:	db0b0400 	blle	2c56dc <startup-0x1fd3a924>
    46d8:	06000006 	streq	r0, [r0], -r6
    46dc:	00cd05c7 	sbceq	r0, sp, r7, asr #11
    46e0:	0b080000 	bleq	2046e8 <startup-0x1fdfb918>
    46e4:	00000769 	andeq	r0, r0, r9, ror #14
    46e8:	cd05c806 	stcgt	8, cr12, [r5, #-24]	; 0xffffffe8
    46ec:	0c000000 	stceq	0, cr0, [r0], {-0}
    46f0:	5244490c 	subpl	r4, r4, #12, 18	; 0x30000
    46f4:	05c90600 	strbeq	r0, [r9, #1536]	; 0x600
    46f8:	000000cd 	andeq	r0, r0, sp, asr #1
    46fc:	444f0c10 	strbmi	r0, [pc], #-3088	; 4704 <startup-0x1fffb8fc>
    4700:	ca060052 	bgt	184850 <startup-0x1fe7b7b0>
    4704:	0000cd05 	andeq	ip, r0, r5, lsl #26
    4708:	ab0b1400 	blge	2c9710 <startup-0x1fd368f0>
    470c:	06000007 	streq	r0, [r0], -r7
    4710:	00ad05cb 	adceq	r0, sp, fp, asr #11
    4714:	0b180000 	bleq	60471c <startup-0x1f9fb8e4>
    4718:	000007a5 	andeq	r0, r0, r5, lsr #15
    471c:	ad05cc06 	stcge	12, cr12, [r5, #-24]	; 0xffffffe8
    4720:	1a000000 	bne	4728 <startup-0x1fffb8d8>
    4724:	0006bb0b 	andeq	fp, r6, fp, lsl #22
    4728:	05cd0600 	strbeq	r0, [sp, #1536]	; 0x600
    472c:	000000cd 	andeq	r0, r0, sp, asr #1
    4730:	46410c1c 			; <UNDEFINED> instruction: 0x46410c1c
    4734:	ce060052 	mcrgt	0, 0, r0, cr6, cr2, {2}
    4738:	0001a005 	andeq	sl, r1, r5
    473c:	0d002000 	stceq	0, cr2, [r0, #-0]
    4740:	000000cd 	andeq	r0, r0, sp, asr #1
    4744:	000001a0 	andeq	r0, r0, r0, lsr #3
    4748:	0000900e 	andeq	r9, r0, lr
    474c:	05000100 	streq	r0, [r0, #-256]	; 0xffffff00
    4750:	00000190 	muleq	r0, r0, r1
    4754:	000c090f 	andeq	r0, ip, pc, lsl #18
    4758:	05cf0600 	strbeq	r0, [pc, #1536]	; 4d60 <startup-0x1fffb2a0>
    475c:	00000104 	andeq	r0, r0, r4, lsl #2
    4760:	37010710 	smladcc	r1, r0, r7, r0
    4764:	07000000 	streq	r0, [r0, -r0]
    4768:	0001d742 	andeq	sp, r1, r2, asr #14
    476c:	069c0900 	ldreq	r0, [ip], r0, lsl #18
    4770:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    4774:	0000057c 	andeq	r0, r0, ip, ror r5
    4778:	01fa0901 	mvnseq	r0, r1, lsl #18
    477c:	09020000 	stmdbeq	r2, {}	; <UNPREDICTABLE>
    4780:	0000021f 	andeq	r0, r0, pc, lsl r2
    4784:	8a030003 	bhi	c4798 <startup-0x1ff3b868>
    4788:	0700000a 	streq	r0, [r0, -sl]
    478c:	0001b147 	andeq	fp, r1, r7, asr #2
    4790:	01071000 	mrseq	r1, (UNDEF: 7)
    4794:	00000037 	andeq	r0, r0, r7, lsr r0
    4798:	01fc4f07 	mvnseq	r4, r7, lsl #30
    479c:	0f090000 	svceq	0x00090000
    47a0:	00000003 	andeq	r0, r0, r3
    47a4:	00026409 	andeq	r6, r2, r9, lsl #8
    47a8:	03000100 	movweq	r0, #256	; 0x100
    47ac:	00000104 	andeq	r0, r0, r4, lsl #2
    47b0:	01e25207 	mvneq	r5, r7, lsl #4
    47b4:	07100000 	ldreq	r0, [r0, -r0]
    47b8:	00003701 	andeq	r3, r0, r1, lsl #14
    47bc:	2d5a0700 	ldclcs	7, cr0, [sl, #-0]
    47c0:	09000002 	stmdbeq	r0, {r1}
    47c4:	0000040a 	andeq	r0, r0, sl, lsl #8
    47c8:	07250900 	streq	r0, [r5, -r0, lsl #18]!
    47cc:	09010000 	stmdbeq	r1, {}	; <UNPREDICTABLE>
    47d0:	00000d81 	andeq	r0, r0, r1, lsl #27
    47d4:	07b10902 	ldreq	r0, [r1, r2, lsl #18]!
    47d8:	00030000 	andeq	r0, r3, r0
    47dc:	000aff03 	andeq	pc, sl, r3, lsl #30
    47e0:	075f0700 	ldrbeq	r0, [pc, -r0, lsl #14]
    47e4:	10000002 	andne	r0, r0, r2
    47e8:	00370107 	eorseq	r0, r7, r7, lsl #2
    47ec:	6e070000 	cdpvs	0, 0, cr0, cr7, cr0, {0}
    47f0:	00000258 	andeq	r0, r0, r8, asr r2
    47f4:	00009f09 	andeq	r9, r0, r9, lsl #30
    47f8:	83090000 	movwhi	r0, #36864	; 0x9000
    47fc:	0100000c 	tsteq	r0, ip
    4800:	00019e09 	andeq	r9, r1, r9, lsl #28
    4804:	03000200 	movweq	r0, #512	; 0x200
    4808:	000003ae 	andeq	r0, r0, lr, lsr #7
    480c:	02387207 	eorseq	r7, r8, #1879048192	; 0x70000000
    4810:	07100000 	ldreq	r0, [r0, -r0]
    4814:	00003701 	andeq	r3, r0, r1, lsl #14
    4818:	7d7a0700 	ldclvc	7, cr0, [sl, #-0]
    481c:	09000002 	stmdbeq	r0, {r1}
    4820:	00001e8e 	andeq	r1, r0, lr, lsl #29
    4824:	1e4e0900 	vmlane.f16	s1, s28, s0	; <UNPREDICTABLE>
    4828:	00010000 	andeq	r0, r1, r0
    482c:	001fb903 	andseq	fp, pc, r3, lsl #18
    4830:	637d0700 	cmnvs	sp, #0, 14
    4834:	11000002 	tstne	r0, r2
    4838:	cd840708 	stcgt	7, cr0, [r4, #32]
    483c:	12000002 	andne	r0, r0, #2
    4840:	00000b23 	andeq	r0, r0, r3, lsr #22
    4844:	00c28607 	sbceq	r8, r2, r7, lsl #12
    4848:	12000000 	andne	r0, r0, #0
    484c:	00000a4e 	andeq	r0, r0, lr, asr #20
    4850:	01d78907 	bicseq	r8, r7, r7, lsl #18
    4854:	12040000 	andne	r0, r4, #0
    4858:	00000855 	andeq	r0, r0, r5, asr r8
    485c:	022d8c07 	eoreq	r8, sp, #1792	; 0x700
    4860:	12050000 	andne	r0, r5, #0
    4864:	0000070f 	andeq	r0, r0, pc, lsl #14
    4868:	01fc8f07 	mvnseq	r8, r7, lsl #30
    486c:	12060000 	andne	r0, r6, #0
    4870:	00000b54 	andeq	r0, r0, r4, asr fp
    4874:	02589207 	subseq	r9, r8, #1879048192	; 0x70000000
    4878:	00070000 	andeq	r0, r7, r0
    487c:	00027203 	andeq	r7, r2, r3, lsl #4
    4880:	88940700 	ldmhi	r4, {r8, r9, sl}
    4884:	13000002 	movwne	r0, #2
    4888:	00001ff6 	strdeq	r1, [r0], -r6
    488c:	16024301 	strne	r4, [r2], -r1, lsl #6
    4890:	a420003b 	strtge	r0, [r0], #-59	; 0xffffffc5
    4894:	01000000 	mrseq	r0, (UNDEF: 0)
    4898:	00033a9c 	muleq	r3, ip, sl
    489c:	1fd91400 	svcne	0x00d91400
    48a0:	43010000 	movwmi	r0, #4096	; 0x1000
    48a4:	00033a02 	andeq	r3, r3, r2, lsl #20
    48a8:	6c910200 	lfmvs	f0, 4, [r1], {0}
    48ac:	001f8414 	andseq	r8, pc, r4, lsl r4	; <UNPREDICTABLE>
    48b0:	02430100 	subeq	r0, r3, #0, 2
    48b4:	000000a2 	andeq	r0, r0, r2, lsr #1
    48b8:	146a9102 	strbtne	r9, [sl], #-258	; 0xfffffefe
    48bc:	00001e6a 	andeq	r1, r0, sl, ror #28
    48c0:	97024301 	strls	r4, [r2, -r1, lsl #6]
    48c4:	02000000 	andeq	r0, r0, #0
    48c8:	72156991 	andsvc	r6, r5, #2375680	; 0x244000
    48cc:	0100001e 	tsteq	r0, lr, lsl r0
    48d0:	00c20245 	sbceq	r0, r2, r5, asr #4
    48d4:	91020000 	mrsls	r0, (UNDEF: 2)
    48d8:	1fef1574 	svcne	0x00ef1574
    48dc:	46010000 	strmi	r0, [r1], -r0
    48e0:	0000c202 	andeq	ip, r0, r2, lsl #4
    48e4:	70910200 	addsvc	r0, r1, r0, lsl #4
    48e8:	a5041600 	strge	r1, [r4, #-1536]	; 0xfffffa00
    48ec:	13000001 	movwne	r0, #1
    48f0:	00001fdf 	ldrdeq	r1, [r0], -pc	; <UNPREDICTABLE>
    48f4:	f201f001 	vhadd.s8	d15, d1, d1
    48f8:	2420003a 	strtcs	r0, [r0], #-58	; 0xffffffc6
    48fc:	01000000 	mrseq	r0, (UNDEF: 0)
    4900:	0003759c 	muleq	r3, ip, r5
    4904:	1fd91400 	svcne	0x00d91400
    4908:	f0010000 			; <UNDEFINED> instruction: 0xf0010000
    490c:	00033a01 	andeq	r3, r3, r1, lsl #20
    4910:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    4914:	000b2314 	andeq	r2, fp, r4, lsl r3
    4918:	01f00100 	mvnseq	r0, r0, lsl #2
    491c:	000000a2 	andeq	r0, r0, r2, lsr #1
    4920:	00729102 	rsbseq	r9, r2, r2, lsl #2
    4924:	001fce13 	andseq	ip, pc, r3, lsl lr	; <UNPREDICTABLE>
    4928:	01e00100 	mvneq	r0, r0, lsl #2
    492c:	20003ad4 	ldrdcs	r3, [r0], -r4
    4930:	0000001e 	andeq	r0, r0, lr, lsl r0
    4934:	03aa9c01 			; <UNDEFINED> instruction: 0x03aa9c01
    4938:	d9140000 	ldmdble	r4, {}	; <UNPREDICTABLE>
    493c:	0100001f 	tsteq	r0, pc, lsl r0
    4940:	033a01e0 	teqeq	sl, #224, 2	; 0x38
    4944:	91020000 	mrsls	r0, (UNDEF: 2)
    4948:	1f7c1474 	svcne	0x007c1474
    494c:	e0010000 	and	r0, r1, r0
    4950:	0000a201 	andeq	sl, r0, r1, lsl #4
    4954:	72910200 	addsvc	r0, r1, #0, 4
    4958:	1e981300 	cdpne	3, 9, cr1, cr8, cr0, {0}
    495c:	c7010000 	strgt	r0, [r1, -r0]
    4960:	003a9a01 	eorseq	r9, sl, r1, lsl #20
    4964:	00003a20 	andeq	r3, r0, r0, lsr #20
    4968:	ee9c0100 	fmle	f0, f4, f0
    496c:	14000003 	strne	r0, [r0], #-3
    4970:	00001fd9 	ldrdeq	r1, [r0], -r9
    4974:	3a01c701 	bcc	76580 <startup-0x1ff89a80>
    4978:	02000003 	andeq	r0, r0, #3
    497c:	23147491 	tstcs	r4, #-1862270976	; 0x91000000
    4980:	0100000b 	tsteq	r0, fp
    4984:	00a201c7 	adceq	r0, r2, r7, asr #3
    4988:	91020000 	mrsls	r0, (UNDEF: 2)
    498c:	1e871472 	mcrne	4, 4, r1, cr7, cr2, {3}
    4990:	c7010000 	strgt	r0, [r1, -r0]
    4994:	00027d01 	andeq	r7, r2, r1, lsl #26
    4998:	71910200 	orrsvc	r0, r1, r0, lsl #4
    499c:	1ebd1300 	cdpne	3, 11, cr1, cr13, cr0, {0}
    49a0:	b1010000 	mrslt	r0, (UNDEF: 1)
    49a4:	003a7c01 	eorseq	r7, sl, r1, lsl #24
    49a8:	00001e20 	andeq	r1, r0, r0, lsr #28
    49ac:	239c0100 	orrscs	r0, ip, #0, 2
    49b0:	14000004 	strne	r0, [r0], #-4
    49b4:	00001fd9 	ldrdeq	r1, [r0], -r9
    49b8:	3a01b101 	bcc	70dc4 <startup-0x1ff8f23c>
    49bc:	02000003 	andeq	r0, r0, #3
    49c0:	23147491 	tstcs	r4, #-1862270976	; 0x91000000
    49c4:	0100000b 	tsteq	r0, fp
    49c8:	00a201b1 	strhteq	r0, [r2], r1
    49cc:	91020000 	mrsls	r0, (UNDEF: 2)
    49d0:	a6130072 			; <UNDEFINED> instruction: 0xa6130072
    49d4:	0100001e 	tsteq	r0, lr, lsl r0
    49d8:	3a5e019c 	bcc	1785050 <startup-0x1e87afb0>
    49dc:	001e2000 	andseq	r2, lr, r0
    49e0:	9c010000 	stcls	0, cr0, [r1], {-0}
    49e4:	00000458 	andeq	r0, r0, r8, asr r4
    49e8:	001fd914 	andseq	sp, pc, r4, lsl r9	; <UNPREDICTABLE>
    49ec:	019c0100 	orrseq	r0, ip, r0, lsl #2
    49f0:	0000033a 	andeq	r0, r0, sl, lsr r3
    49f4:	14749102 	ldrbtne	r9, [r4], #-258	; 0xfffffefe
    49f8:	00000b23 	andeq	r0, r0, r3, lsr #22
    49fc:	a2019c01 	andge	r9, r1, #256	; 0x100
    4a00:	02000000 	andeq	r0, r0, #0
    4a04:	17007291 			; <UNDEFINED> instruction: 0x17007291
    4a08:	00001e56 	andeq	r1, r0, r6, asr lr
    4a0c:	a2018801 	andge	r8, r1, #65536	; 0x10000
    4a10:	48000000 	stmdami	r0, {}	; <UNPREDICTABLE>
    4a14:	1620003a 			; <UNDEFINED> instruction: 0x1620003a
    4a18:	01000000 	mrseq	r0, (UNDEF: 0)
    4a1c:	0004829c 	muleq	r4, ip, r2
    4a20:	1fd91400 	svcne	0x00d91400
    4a24:	88010000 	stmdahi	r1, {}	; <UNPREDICTABLE>
    4a28:	00033a01 	andeq	r3, r3, r1, lsl #20
    4a2c:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    4a30:	20071700 	andcs	r1, r7, r0, lsl #14
    4a34:	6e010000 	cdpvs	0, 0, cr0, cr1, cr0, {0}
    4a38:	00009701 	andeq	r9, r0, r1, lsl #14
    4a3c:	003a0600 	eorseq	r0, sl, r0, lsl #12
    4a40:	00004220 	andeq	r4, r0, r0, lsr #4
    4a44:	ca9c0100 	bgt	fe704e4c <GPIO_Ports+0xde701044>
    4a48:	14000004 	strne	r0, [r0], #-4
    4a4c:	00001fd9 	ldrdeq	r1, [r0], -r9
    4a50:	3a016e01 	bcc	6025c <startup-0x1ff9fda4>
    4a54:	02000003 	andeq	r0, r0, #3
    4a58:	23146c91 	tstcs	r4, #37120	; 0x9100
    4a5c:	0100000b 	tsteq	r0, fp
    4a60:	00a2016e 	adceq	r0, r2, lr, ror #2
    4a64:	91020000 	mrsls	r0, (UNDEF: 2)
    4a68:	0fe7156a 	svceq	0x00e7156a
    4a6c:	70010000 	andvc	r0, r1, r0
    4a70:	00009701 	andeq	r9, r0, r1, lsl #14
    4a74:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    4a78:	1f931700 	svcne	0x00931700
    4a7c:	5d010000 	stcpl	0, cr0, [r1, #-0]
    4a80:	0000a201 	andeq	sl, r0, r1, lsl #4
    4a84:	0039f000 	eorseq	pc, r9, r0
    4a88:	00001620 	andeq	r1, r0, r0, lsr #12
    4a8c:	f49c0100 			; <UNDEFINED> instruction: 0xf49c0100
    4a90:	14000004 	strne	r0, [r0], #-4
    4a94:	00001fd9 	ldrdeq	r1, [r0], -r9
    4a98:	3a015d01 	bcc	5bea4 <startup-0x1ffa415c>
    4a9c:	02000003 	andeq	r0, r0, #3
    4aa0:	17007491 			; <UNDEFINED> instruction: 0x17007491
    4aa4:	00001f56 	andeq	r1, r0, r6, asr pc
    4aa8:	97014301 	strls	r4, [r1, -r1, lsl #6]
    4aac:	ae000000 	cdpge	0, 0, cr0, cr0, cr0, {0}
    4ab0:	42200039 	eormi	r0, r0, #57	; 0x39
    4ab4:	01000000 	mrseq	r0, (UNDEF: 0)
    4ab8:	00053c9c 	muleq	r5, ip, ip
    4abc:	1fd91400 	svcne	0x00d91400
    4ac0:	43010000 	movwmi	r0, #4096	; 0x1000
    4ac4:	00033a01 	andeq	r3, r3, r1, lsl #20
    4ac8:	6c910200 	lfmvs	f0, 4, [r1], {0}
    4acc:	000b2314 	andeq	r2, fp, r4, lsl r3
    4ad0:	01430100 	mrseq	r0, (UNDEF: 83)
    4ad4:	000000a2 	andeq	r0, r0, r2, lsr #1
    4ad8:	156a9102 	strbne	r9, [sl, #-258]!	; 0xfffffefe
    4adc:	00000fe7 	andeq	r0, r0, r7, ror #31
    4ae0:	97014501 	strls	r4, [r1, -r1, lsl #10]
    4ae4:	02000000 	andeq	r0, r0, #0
    4ae8:	13007791 	movwne	r7, #1937	; 0x791
    4aec:	00001fa6 	andeq	r1, r0, r6, lsr #31
    4af0:	68011501 	stmdavs	r1, {r0, r8, sl, ip}
    4af4:	46200039 			; <UNDEFINED> instruction: 0x46200039
    4af8:	01000000 	mrseq	r0, (UNDEF: 0)
    4afc:	0005809c 	muleq	r5, ip, r0
    4b00:	1fd91400 	svcne	0x00d91400
    4b04:	15010000 	strne	r0, [r1, #-0]
    4b08:	00033a01 	andeq	r3, r3, r1, lsl #20
    4b0c:	6c910200 	lfmvs	f0, 4, [r1], {0}
    4b10:	000b2314 	andeq	r2, fp, r4, lsl r3
    4b14:	01150100 	tsteq	r5, r0, lsl #2
    4b18:	000000a2 	andeq	r0, r0, r2, lsr #1
    4b1c:	186a9102 	stmdane	sl!, {r1, r8, ip, pc}^
    4b20:	00706d74 	rsbseq	r6, r0, r4, ror sp
    4b24:	cd011701 	stcgt	7, cr1, [r1, #-4]
    4b28:	02000000 	andeq	r0, r0, #0
    4b2c:	19007491 	stmdbne	r0, {r0, r4, r7, sl, ip, sp, lr}
    4b30:	00001e77 	andeq	r1, r0, r7, ror lr
    4b34:	3934fe01 	ldmdbcc	r4!, {r0, r9, sl, fp, ip, sp, lr, pc}
    4b38:	00342000 	eorseq	r2, r4, r0
    4b3c:	9c010000 	stcls	0, cr0, [r1], {-0}
    4b40:	000005a4 	andeq	r0, r0, r4, lsr #11
    4b44:	001f6c1a 	andseq	r6, pc, sl, lsl ip	; <UNPREDICTABLE>
    4b48:	a4fe0100 	ldrbtge	r0, [lr], #256	; 0x100
    4b4c:	02000005 	andeq	r0, r0, #5
    4b50:	16007491 			; <UNDEFINED> instruction: 0x16007491
    4b54:	0002cd04 	andeq	ip, r2, r4, lsl #26
    4b58:	1eb31900 	vmovne.f16	s2, #48	; 0x41800000  16.0	; <UNPREDICTABLE>
    4b5c:	ca010000 	bgt	44b64 <startup-0x1ffbb49c>
    4b60:	2000381c 	andcs	r3, r0, ip, lsl r8
    4b64:	00000118 	andeq	r0, r0, r8, lsl r1
    4b68:	06069c01 	streq	r9, [r6], -r1, lsl #24
    4b6c:	d91a0000 	ldmdble	sl, {}	; <UNPREDICTABLE>
    4b70:	0100001f 	tsteq	r0, pc, lsl r0
    4b74:	00033aca 	andeq	r3, r3, sl, asr #21
    4b78:	64910200 	ldrvs	r0, [r1], #512	; 0x200
    4b7c:	001f6c1a 	andseq	r6, pc, sl, lsl ip	; <UNPREDICTABLE>
    4b80:	a4ca0100 	strbge	r0, [sl], #256	; 0x100
    4b84:	02000005 	andeq	r0, r0, #5
    4b88:	471b6091 			; <UNDEFINED> instruction: 0x471b6091
    4b8c:	0100001e 	tsteq	r0, lr, lsl r0
    4b90:	0000c2cc 	andeq	ip, r0, ip, asr #5
    4b94:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    4b98:	736f701c 	cmnvc	pc, #28
    4b9c:	c2cc0100 	sbcgt	r0, ip, #0, 2
    4ba0:	02000000 	andeq	r0, r0, #0
    4ba4:	c31b7091 	tstgt	fp, #145	; 0x91
    4ba8:	0100001f 	tsteq	r0, pc, lsl r0
    4bac:	0000c2cc 	andeq	ip, r0, ip, asr #5
    4bb0:	6c910200 	lfmvs	f0, 4, [r1], {0}
    4bb4:	1f4a1d00 	svcne	0x004a1d00
    4bb8:	7f010000 	svcvc	0x00010000
    4bbc:	200036ac 	andcs	r3, r0, ip, lsr #13
    4bc0:	00000170 	andeq	r0, r0, r0, ror r1
    4bc4:	d91a9c01 	ldmdble	sl, {r0, sl, fp, ip, pc}
    4bc8:	0100001f 	tsteq	r0, pc, lsl r0
    4bcc:	00033a7f 	andeq	r3, r3, pc, ror sl
    4bd0:	74910200 	ldrvc	r0, [r1], #512	; 0x200
	...

Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
   0:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
   4:	030b130e 	movweq	r1, #45838	; 0xb30e
   8:	110e1b0e 	tstne	lr, lr, lsl #22
   c:	10061201 	andne	r1, r6, r1, lsl #4
  10:	02000017 	andeq	r0, r0, #23
  14:	0e030104 	adfeqs	f0, f3, f4
  18:	0b0b0b3e 	bleq	2c2d18 <startup-0x1fd3d2e8>
  1c:	0b3a1349 	bleq	e84d48 <startup-0x1f17b2b8>
  20:	13010b3b 	movwne	r0, #6971	; 0x1b3b
  24:	28030000 	stmdacs	r3, {}	; <UNPREDICTABLE>
  28:	1c0e0300 	stcne	3, cr0, [lr], {-0}
  2c:	0400000d 	streq	r0, [r0], #-13
  30:	0e030028 	cdpeq	0, 0, cr0, cr3, cr8, {1}
  34:	00000b1c 	andeq	r0, r0, ip, lsl fp
  38:	0b002405 	bleq	9054 <startup-0x1fff6fac>
  3c:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
  40:	0600000e 	streq	r0, [r0], -lr
  44:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
  48:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
  4c:	00001349 	andeq	r1, r0, r9, asr #6
  50:	03001607 	movweq	r1, #1543	; 0x607
  54:	3b0b3a0e 	blcc	2ce894 <startup-0x1fd3176c>
  58:	0013490b 	andseq	r4, r3, fp, lsl #18
  5c:	00240800 	eoreq	r0, r4, r0, lsl #16
  60:	0b3e0b0b 	bleq	f82c94 <startup-0x1f07d36c>
  64:	00000803 	andeq	r0, r0, r3, lsl #16
  68:	49003509 	stmdbmi	r0, {r0, r3, r8, sl, ip, sp}
  6c:	0a000013 	beq	c0 <startup-0x1fffff40>
  70:	13490026 	movtne	r0, #36902	; 0x9026
  74:	130b0000 	movwne	r0, #45056	; 0xb000
  78:	3a050b01 	bcc	142c84 <startup-0x1febd37c>
  7c:	01053b0b 	tsteq	r5, fp, lsl #22
  80:	0c000013 	stceq	0, cr0, [r0], {19}
  84:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
  88:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
  8c:	0b381349 	bleq	e04db8 <startup-0x1f1fb248>
  90:	0d0d0000 	stceq	0, cr0, [sp, #-0]
  94:	3a0e0300 	bcc	380c9c <startup-0x1fc7f364>
  98:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
  9c:	00053813 	andeq	r3, r5, r3, lsl r8
  a0:	000d0e00 	andeq	r0, sp, r0, lsl #28
  a4:	0b3a0803 	bleq	e820b8 <startup-0x1f17df48>
  a8:	1349053b 	movtne	r0, #38203	; 0x953b
  ac:	00000538 	andeq	r0, r0, r8, lsr r5
  b0:	4901010f 	stmdbmi	r1, {r0, r1, r2, r3, r8}
  b4:	00130113 	andseq	r0, r3, r3, lsl r1
  b8:	00211000 	eoreq	r1, r1, r0
  bc:	0b2f1349 	bleq	bc4de8 <startup-0x1f43b218>
  c0:	21110000 	tstcs	r1, r0
  c4:	2f134900 	svccs	0x00134900
  c8:	12000005 	andne	r0, r0, #5
  cc:	0b0b0113 	bleq	2c0520 <startup-0x1fd3fae0>
  d0:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
  d4:	00001301 	andeq	r1, r0, r1, lsl #6
  d8:	03000d13 	movweq	r0, #3347	; 0xd13
  dc:	3b0b3a08 	blcc	2ce904 <startup-0x1fd316fc>
  e0:	38134905 	ldmdacc	r3, {r0, r2, r8, fp, lr}
  e4:	1400000b 	strne	r0, [r0], #-11
  e8:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
  ec:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
  f0:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
  f4:	0000193c 	andeq	r1, r0, ip, lsr r9
  f8:	03003415 	movweq	r3, #1045	; 0x415
  fc:	3b0b3a0e 	blcc	2ce93c <startup-0x1fd316c4>
 100:	3f13490b 	svccc	0x0013490b
 104:	00193c19 	andseq	r3, r9, r9, lsl ip
 108:	01041600 	tsteq	r4, r0, lsl #12
 10c:	0b0b0b3e 	bleq	2c2e0c <startup-0x1fd3d1f4>
 110:	0b3a1349 	bleq	e84e3c <startup-0x1f17b1c4>
 114:	1301053b 	movwne	r0, #5435	; 0x153b
 118:	13170000 	tstne	r7, #0
 11c:	3a0b0b01 	bcc	2c2d28 <startup-0x1fd3d2d8>
 120:	010b3b0b 	tsteq	fp, fp, lsl #22
 124:	18000013 	stmdane	r0, {r0, r1, r4}
 128:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
 12c:	0b3b0b3a 	bleq	ec2e1c <startup-0x1f13d1e4>
 130:	0b381349 	bleq	e04e5c <startup-0x1f1fb1a4>
 134:	0d190000 	ldceq	0, cr0, [r9, #-0]
 138:	3a080300 	bcc	200d40 <startup-0x1fdff2c0>
 13c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 140:	000b3813 	andeq	r3, fp, r3, lsl r8
 144:	000d1a00 	andeq	r1, sp, r0, lsl #20
 148:	0b3a0e03 	bleq	e8395c <startup-0x1f17c6a4>
 14c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 150:	0b0d0b0b 	bleq	342d84 <startup-0x1fcbd27c>
 154:	0b380b0c 	bleq	e02d8c <startup-0x1f1fd274>
 158:	0d1b0000 	ldceq	0, cr0, [fp, #-0]
 15c:	3a080300 	bcc	200d64 <startup-0x1fdff29c>
 160:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 164:	0d0b0b13 	vstreq	d0, [fp, #-76]	; 0xffffffb4
 168:	380b0c0b 	stmdacc	fp, {r0, r1, r3, sl, fp}
 16c:	1c00000b 	stcne	0, cr0, [r0], {11}
 170:	0b3e0104 	bleq	f80588 <startup-0x1f07fa78>
 174:	13490b0b 	movtne	r0, #39691	; 0x9b0b
 178:	0b3b0b3a 	bleq	ec2e68 <startup-0x1f13d198>
 17c:	00001301 	andeq	r1, r0, r1, lsl #6
 180:	0b01171d 	bleq	45dfc <startup-0x1ffba204>
 184:	3b0b3a0b 	blcc	2ce9b8 <startup-0x1fd31648>
 188:	0013010b 	andseq	r0, r3, fp, lsl #2
 18c:	000d1e00 	andeq	r1, sp, r0, lsl #28
 190:	0b3a0e03 	bleq	e839a4 <startup-0x1f17c65c>
 194:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 198:	151f0000 	ldrne	r0, [pc, #-0]	; 1a0 <startup-0x1ffffe60>
 19c:	01192701 	tsteq	r9, r1, lsl #14
 1a0:	20000013 	andcs	r0, r0, r3, lsl r0
 1a4:	13490005 	movtne	r0, #36869	; 0x9005
 1a8:	0f210000 	svceq	0x00210000
 1ac:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
 1b0:	22000013 	andcs	r0, r0, #19
 1b4:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 1b8:	0b3b0b3a 	bleq	ec2ea8 <startup-0x1f13d158>
 1bc:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
 1c0:	00001802 	andeq	r1, r0, r2, lsl #16
 1c4:	3f012e23 	svccc	0x00012e23
 1c8:	3a0e0319 	bcc	380e34 <startup-0x1fc7f1cc>
 1cc:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 1d0:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
 1d4:	96184006 	ldrls	r4, [r8], -r6
 1d8:	13011942 	movwne	r1, #6466	; 0x1942
 1dc:	34240000 	strtcc	r0, [r4], #-0
 1e0:	3a0e0300 	bcc	380de8 <startup-0x1fc7f218>
 1e4:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 1e8:	00180213 	andseq	r0, r8, r3, lsl r2
 1ec:	00342500 	eorseq	r2, r4, r0, lsl #10
 1f0:	0b3a0e03 	bleq	e83a04 <startup-0x1f17c5fc>
 1f4:	1349053b 	movtne	r0, #38203	; 0x953b
 1f8:	00001802 	andeq	r1, r0, r2, lsl #16
 1fc:	3f012e26 	svccc	0x00012e26
 200:	3a0e0319 	bcc	380e6c <startup-0x1fc7f194>
 204:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 208:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 20c:	96184006 	ldrls	r4, [r8], -r6
 210:	13011942 	movwne	r1, #6466	; 0x1942
 214:	0b270000 	bleq	9c021c <startup-0x1f63fde4>
 218:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
 21c:	28000006 	stmdacs	r0, {r1, r2}
 220:	08030005 	stmdaeq	r3, {r0, r2}
 224:	0b3b0b3a 	bleq	ec2f14 <startup-0x1f13d0ec>
 228:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 22c:	2e290000 	cdpcs	0, 2, cr0, cr9, cr0, {0}
 230:	03193f01 	tsteq	r9, #1, 30
 234:	3b0b3a0e 	blcc	2cea74 <startup-0x1fd3158c>
 238:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
 23c:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
 240:	96184006 	ldrls	r4, [r8], -r6
 244:	13011942 	movwne	r1, #6466	; 0x1942
 248:	052a0000 	streq	r0, [sl, #-0]!
 24c:	3a0e0300 	bcc	380e54 <startup-0x1fc7f1ac>
 250:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 254:	00180213 	andseq	r0, r8, r3, lsl r2
 258:	012e2b00 			; <UNDEFINED> instruction: 0x012e2b00
 25c:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 260:	0b3b0b3a 	bleq	ec2f50 <startup-0x1f13d0b0>
 264:	13491927 	movtne	r1, #39207	; 0x9927
 268:	06120111 			; <UNDEFINED> instruction: 0x06120111
 26c:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 270:	00130119 	andseq	r0, r3, r9, lsl r1
 274:	012e2c00 			; <UNDEFINED> instruction: 0x012e2c00
 278:	0b3a0e03 	bleq	e83a8c <startup-0x1f17c574>
 27c:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
 280:	06120111 			; <UNDEFINED> instruction: 0x06120111
 284:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 288:	2d000019 	stccs	0, cr0, [r0, #-100]	; 0xffffff9c
 28c:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
 290:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 294:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 298:	01000000 	mrseq	r0, (UNDEF: 0)
 29c:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
 2a0:	0e030b13 	vmoveq.32	d3[0], r0
 2a4:	01110e1b 	tsteq	r1, fp, lsl lr
 2a8:	17100612 			; <UNDEFINED> instruction: 0x17100612
 2ac:	24020000 	strcs	r0, [r2], #-0
 2b0:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 2b4:	000e030b 	andeq	r0, lr, fp, lsl #6
 2b8:	00160300 	andseq	r0, r6, r0, lsl #6
 2bc:	0b3a0e03 	bleq	e83ad0 <startup-0x1f17c530>
 2c0:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 2c4:	24040000 	strcs	r0, [r4], #-0
 2c8:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 2cc:	0008030b 	andeq	r0, r8, fp, lsl #6
 2d0:	00350500 	eorseq	r0, r5, r0, lsl #10
 2d4:	00001349 	andeq	r1, r0, r9, asr #6
 2d8:	49010106 	stmdbmi	r1, {r1, r2, r8}
 2dc:	00130113 	andseq	r0, r3, r3, lsl r1
 2e0:	00210700 	eoreq	r0, r1, r0, lsl #14
 2e4:	0b2f1349 	bleq	bc5010 <startup-0x1f43aff0>
 2e8:	34080000 	strcc	r0, [r8], #-0
 2ec:	3a0e0300 	bcc	380ef4 <startup-0x1fc7f10c>
 2f0:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 2f4:	3c193f13 	ldccc	15, cr3, [r9], {19}
 2f8:	09000019 	stmdbeq	r0, {r0, r3, r4}
 2fc:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 300:	0b3b0b3a 	bleq	ec2ff0 <startup-0x1f13d010>
 304:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
 308:	0000193c 	andeq	r1, r0, ip, lsr r9
 30c:	3e01040a 	cdpcc	4, 0, cr0, cr1, cr10, {0}
 310:	490b0b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp}
 314:	3b0b3a13 	blcc	2ceb68 <startup-0x1fd31498>
 318:	00130105 	andseq	r0, r3, r5, lsl #2
 31c:	00280b00 	eoreq	r0, r8, r0, lsl #22
 320:	0b1c0e03 	bleq	703b34 <startup-0x1f8fc4cc>
 324:	280c0000 	stmdacs	ip, {}	; <UNPREDICTABLE>
 328:	1c080300 	stcne	3, cr0, [r8], {-0}
 32c:	0d00000b 	stceq	0, cr0, [r0, #-44]	; 0xffffffd4
 330:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
 334:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 338:	00001349 	andeq	r1, r0, r9, asr #6
 33c:	0b01130e 	bleq	44f7c <startup-0x1ffbb084>
 340:	3b0b3a0b 	blcc	2ceb74 <startup-0x1fd3148c>
 344:	00130105 	andseq	r0, r3, r5, lsl #2
 348:	000d0f00 	andeq	r0, sp, r0, lsl #30
 34c:	0b3a0803 	bleq	e82360 <startup-0x1f17dca0>
 350:	1349053b 	movtne	r0, #38203	; 0x953b
 354:	00000b38 	andeq	r0, r0, r8, lsr fp
 358:	03000d10 	movweq	r0, #3344	; 0xd10
 35c:	3b0b3a0e 	blcc	2ceb9c <startup-0x1fd31464>
 360:	38134905 	ldmdacc	r3, {r0, r2, r8, fp, lr}
 364:	1100000b 	tstne	r0, fp
 368:	050b0113 	streq	r0, [fp, #-275]	; 0xfffffeed
 36c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 370:	00001301 	andeq	r1, r0, r1, lsl #6
 374:	03000d12 	movweq	r0, #3346	; 0xd12
 378:	3b0b3a0e 	blcc	2cebb8 <startup-0x1fd31448>
 37c:	38134905 	ldmdacc	r3, {r0, r2, r8, fp, lr}
 380:	13000005 	movwne	r0, #5
 384:	0803000d 	stmdaeq	r3, {r0, r2, r3}
 388:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 38c:	05381349 	ldreq	r1, [r8, #-841]!	; 0xfffffcb7
 390:	13140000 	tstne	r4, #0
 394:	3a0b0b01 	bcc	2c2fa0 <startup-0x1fd3d060>
 398:	010b3b0b 	tsteq	fp, fp, lsl #22
 39c:	15000013 	strne	r0, [r0, #-19]	; 0xffffffed
 3a0:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
 3a4:	0b3b0b3a 	bleq	ec3094 <startup-0x1f13cf6c>
 3a8:	0b381349 	bleq	e050d4 <startup-0x1f1faf2c>
 3ac:	0d160000 	ldceq	0, cr0, [r6, #-0]
 3b0:	3a080300 	bcc	200fb8 <startup-0x1fdff048>
 3b4:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 3b8:	000b3813 	andeq	r3, fp, r3, lsl r8
 3bc:	012e1700 			; <UNDEFINED> instruction: 0x012e1700
 3c0:	0b3a0e03 	bleq	e83bd4 <startup-0x1f17c42c>
 3c4:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
 3c8:	01111349 	tsteq	r1, r9, asr #6
 3cc:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 3d0:	01194297 			; <UNDEFINED> instruction: 0x01194297
 3d4:	18000013 	stmdane	r0, {r0, r1, r4}
 3d8:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
 3dc:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 3e0:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 3e4:	34190000 	ldrcc	r0, [r9], #-0
 3e8:	3a0e0300 	bcc	380ff0 <startup-0x1fc7f010>
 3ec:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 3f0:	00180213 	andseq	r0, r8, r3, lsl r2
 3f4:	012e1a00 			; <UNDEFINED> instruction: 0x012e1a00
 3f8:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 3fc:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 400:	01111927 	tsteq	r1, r7, lsr #18
 404:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 408:	01194297 			; <UNDEFINED> instruction: 0x01194297
 40c:	1b000013 	blne	460 <startup-0x1ffffba0>
 410:	0b0b000f 	bleq	2c0454 <startup-0x1fd3fbac>
 414:	00001349 	andeq	r1, r0, r9, asr #6
 418:	3f012e1c 	svccc	0x00012e1c
 41c:	3a0e0319 	bcc	381088 <startup-0x1fc7ef78>
 420:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
 424:	11134919 	tstne	r3, r9, lsl r9
 428:	40061201 	andmi	r1, r6, r1, lsl #4
 42c:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 430:	00001301 	andeq	r1, r0, r1, lsl #6
 434:	3f012e1d 	svccc	0x00012e1d
 438:	3a0e0319 	bcc	3810a4 <startup-0x1fc7ef5c>
 43c:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
 440:	11134919 	tstne	r3, r9, lsl r9
 444:	40061201 	andmi	r1, r6, r1, lsl #4
 448:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 44c:	00001301 	andeq	r1, r0, r1, lsl #6
 450:	3f012e1e 	svccc	0x00012e1e
 454:	3a0e0319 	bcc	3810c0 <startup-0x1fc7ef40>
 458:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 45c:	11134919 	tstne	r3, r9, lsl r9
 460:	40061201 	andmi	r1, r6, r1, lsl #4
 464:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 468:	00001301 	andeq	r1, r0, r1, lsl #6
 46c:	0300051f 	movweq	r0, #1311	; 0x51f
 470:	3b0b3a0e 	blcc	2cecb0 <startup-0x1fd31350>
 474:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 478:	20000018 	andcs	r0, r0, r8, lsl r0
 47c:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 480:	0b3b0b3a 	bleq	ec3170 <startup-0x1f13ce90>
 484:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 488:	2e210000 	cdpcs	0, 2, cr0, cr1, cr0, {0}
 48c:	03193f01 	tsteq	r9, #1, 30
 490:	3b0b3a0e 	blcc	2cecd0 <startup-0x1fd31330>
 494:	1119270b 	tstne	r9, fp, lsl #14
 498:	40061201 	andmi	r1, r6, r1, lsl #4
 49c:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 4a0:	01000000 	mrseq	r0, (UNDEF: 0)
 4a4:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
 4a8:	0e030b13 	vmoveq.32	d3[0], r0
 4ac:	17550e1b 	smmlane	r5, fp, lr, r0
 4b0:	17100111 			; <UNDEFINED> instruction: 0x17100111
 4b4:	04020000 	streq	r0, [r2], #-0
 4b8:	3e0e0301 	cdpcc	3, 0, cr0, cr14, cr1, {0}
 4bc:	490b0b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp}
 4c0:	3b0b3a13 	blcc	2ced14 <startup-0x1fd312ec>
 4c4:	0013010b 	andseq	r0, r3, fp, lsl #2
 4c8:	00280300 	eoreq	r0, r8, r0, lsl #6
 4cc:	0d1c0e03 	ldceq	14, cr0, [ip, #-12]
 4d0:	28040000 	stmdacs	r4, {}	; <UNPREDICTABLE>
 4d4:	1c0e0300 	stcne	3, cr0, [lr], {-0}
 4d8:	0500000b 	streq	r0, [r0, #-11]
 4dc:	0b0b0024 	bleq	2c0574 <startup-0x1fd3fa8c>
 4e0:	0e030b3e 	vmoveq.16	d3[0], r0
 4e4:	16060000 	strne	r0, [r6], -r0
 4e8:	3a0e0300 	bcc	3810f0 <startup-0x1fc7ef10>
 4ec:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 4f0:	07000013 	smladeq	r0, r3, r0, r0
 4f4:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
 4f8:	0b3b0b3a 	bleq	ec31e8 <startup-0x1f13ce18>
 4fc:	00001349 	andeq	r1, r0, r9, asr #6
 500:	0b002408 	bleq	9528 <startup-0x1fff6ad8>
 504:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
 508:	09000008 	stmdbeq	r0, {r3}
 50c:	13490035 	movtne	r0, #36917	; 0x9035
 510:	260a0000 	strcs	r0, [sl], -r0
 514:	00134900 	andseq	r4, r3, r0, lsl #18
 518:	01130b00 	tsteq	r3, r0, lsl #22
 51c:	0b3a050b 	bleq	e81950 <startup-0x1f17e6b0>
 520:	1301053b 	movwne	r0, #5435	; 0x153b
 524:	0d0c0000 	stceq	0, cr0, [ip, #-0]
 528:	3a0e0300 	bcc	381130 <startup-0x1fc7eed0>
 52c:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 530:	000b3813 	andeq	r3, fp, r3, lsl r8
 534:	000d0d00 	andeq	r0, sp, r0, lsl #26
 538:	0b3a0e03 	bleq	e83d4c <startup-0x1f17c2b4>
 53c:	1349053b 	movtne	r0, #38203	; 0x953b
 540:	00000538 	andeq	r0, r0, r8, lsr r5
 544:	03000d0e 	movweq	r0, #3342	; 0xd0e
 548:	3b0b3a08 	blcc	2ced70 <startup-0x1fd31290>
 54c:	38134905 	ldmdacc	r3, {r0, r2, r8, fp, lr}
 550:	0f000005 	svceq	0x00000005
 554:	13490101 	movtne	r0, #37121	; 0x9101
 558:	00001301 	andeq	r1, r0, r1, lsl #6
 55c:	49002110 	stmdbmi	r0, {r4, r8, sp}
 560:	000b2f13 	andeq	r2, fp, r3, lsl pc
 564:	00211100 	eoreq	r1, r1, r0, lsl #2
 568:	052f1349 	streq	r1, [pc, #-841]!	; 227 <startup-0x1ffffdd9>
 56c:	13120000 	tstne	r2, #0
 570:	3a0b0b01 	bcc	2c317c <startup-0x1fd3ce84>
 574:	01053b0b 	tsteq	r5, fp, lsl #22
 578:	13000013 	movwne	r0, #19
 57c:	0803000d 	stmdaeq	r3, {r0, r2, r3}
 580:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 584:	0b381349 	bleq	e052b0 <startup-0x1f1fad50>
 588:	34140000 	ldrcc	r0, [r4], #-0
 58c:	3a0e0300 	bcc	381194 <startup-0x1fc7ee6c>
 590:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 594:	3c193f13 	ldccc	15, cr3, [r9], {19}
 598:	15000019 	strne	r0, [r0, #-25]	; 0xffffffe7
 59c:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 5a0:	0b3b0b3a 	bleq	ec3290 <startup-0x1f13cd70>
 5a4:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
 5a8:	0000193c 	andeq	r1, r0, ip, lsr r9
 5ac:	3e010416 	cfmvdlrcc	mvd1, r0
 5b0:	490b0b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp}
 5b4:	3b0b3a13 	blcc	2cee08 <startup-0x1fd311f8>
 5b8:	00130105 	andseq	r0, r3, r5, lsl #2
 5bc:	00281700 	eoreq	r1, r8, r0, lsl #14
 5c0:	0b1c0803 	bleq	7025d4 <startup-0x1f8fda2c>
 5c4:	13180000 	tstne	r8, #0
 5c8:	3a0b0b01 	bcc	2c31d4 <startup-0x1fd3ce2c>
 5cc:	010b3b0b 	tsteq	fp, fp, lsl #22
 5d0:	19000013 	stmdbne	r0, {r0, r1, r4}
 5d4:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
 5d8:	0b3b0b3a 	bleq	ec32c8 <startup-0x1f13cd38>
 5dc:	0b381349 	bleq	e05308 <startup-0x1f1facf8>
 5e0:	341a0000 	ldrcc	r0, [sl], #-0
 5e4:	3a0e0300 	bcc	3811ec <startup-0x1fc7ee14>
 5e8:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 5ec:	00180213 	andseq	r0, r8, r3, lsl r2
 5f0:	01041b00 	tsteq	r4, r0, lsl #22
 5f4:	0b0b0b3e 	bleq	2c32f4 <startup-0x1fd3cd0c>
 5f8:	0b3a1349 	bleq	e85324 <startup-0x1f17acdc>
 5fc:	13010b3b 	movwne	r0, #6971	; 0x1b3b
 600:	131c0000 	tstne	ip, #0
 604:	0b0e0301 	bleq	381210 <startup-0x1fc7edf0>
 608:	3b0b3a0b 	blcc	2cee3c <startup-0x1fd311c4>
 60c:	0013010b 	andseq	r0, r3, fp, lsl #2
 610:	000d1d00 	andeq	r1, sp, r0, lsl #26
 614:	0b3a0803 	bleq	e82628 <startup-0x1f17d9d8>
 618:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 61c:	00000b38 	andeq	r0, r0, r8, lsr fp
 620:	0b000f1e 	bleq	42a0 <startup-0x1fffbd60>
 624:	0013490b 	andseq	r4, r3, fp, lsl #18
 628:	000d1f00 	andeq	r1, sp, r0, lsl #30
 62c:	0b3a0e03 	bleq	e83e40 <startup-0x1f17c1c0>
 630:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 634:	0b0d0b0b 	bleq	343268 <startup-0x1fcbcd98>
 638:	0b380b0c 	bleq	e03270 <startup-0x1f1fcd90>
 63c:	0d200000 	stceq	0, cr0, [r0, #-0]
 640:	3a080300 	bcc	201248 <startup-0x1fdfedb8>
 644:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 648:	0d0b0b13 	vstreq	d0, [fp, #-76]	; 0xffffffb4
 64c:	380b0c0b 	stmdacc	fp, {r0, r1, r3, sl, fp}
 650:	2100000b 	tstcs	r0, fp
 654:	08030034 	stmdaeq	r3, {r2, r4, r5}
 658:	0b3b0b3a 	bleq	ec3348 <startup-0x1f13ccb8>
 65c:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
 660:	00001802 	andeq	r1, r0, r2, lsl #16
 664:	03003422 	movweq	r3, #1058	; 0x422
 668:	3b0b3a0e 	blcc	2ceea8 <startup-0x1fd31158>
 66c:	3f13490b 	svccc	0x0013490b
 670:	00180219 	andseq	r0, r8, r9, lsl r2
 674:	012e2300 			; <UNDEFINED> instruction: 0x012e2300
 678:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 67c:	0b3b0b3a 	bleq	ec336c <startup-0x1f13cc94>
 680:	01111927 	tsteq	r1, r7, lsr #18
 684:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 688:	01194296 			; <UNDEFINED> instruction: 0x01194296
 68c:	24000013 	strcs	r0, [r0], #-19	; 0xffffffed
 690:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
 694:	0b3b0b3a 	bleq	ec3384 <startup-0x1f13cc7c>
 698:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 69c:	0b250000 	bleq	9406a4 <startup-0x1f6bf95c>
 6a0:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
 6a4:	26000006 	strcs	r0, [r0], -r6
 6a8:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 6ac:	0b3a0e03 	bleq	e83ec0 <startup-0x1f17c140>
 6b0:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 6b4:	06120111 			; <UNDEFINED> instruction: 0x06120111
 6b8:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 6bc:	00130119 	andseq	r0, r3, r9, lsl r1
 6c0:	00052700 	andeq	r2, r5, r0, lsl #14
 6c4:	0b3a0803 	bleq	e826d8 <startup-0x1f17d928>
 6c8:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 6cc:	00001802 	andeq	r1, r0, r2, lsl #16
 6d0:	11010b28 	tstne	r1, r8, lsr #22
 6d4:	01061201 	tsteq	r6, r1, lsl #4
 6d8:	29000013 	stmdbcs	r0, {r0, r1, r4}
 6dc:	08030034 	stmdaeq	r3, {r2, r4, r5}
 6e0:	0b3b0b3a 	bleq	ec33d0 <startup-0x1f13cc30>
 6e4:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 6e8:	212a0000 			; <UNDEFINED> instruction: 0x212a0000
 6ec:	2f134900 	svccs	0x00134900
 6f0:	2b000018 	blcs	758 <startup-0x1ffff8a8>
 6f4:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
 6f8:	0b3a0e03 	bleq	e83f0c <startup-0x1f17c0f4>
 6fc:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 700:	06120111 			; <UNDEFINED> instruction: 0x06120111
 704:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 708:	2c000019 	stccs	0, cr0, [r0], {25}
 70c:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
 710:	0b3a0e03 	bleq	e83f24 <startup-0x1f17c0dc>
 714:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 718:	06120111 			; <UNDEFINED> instruction: 0x06120111
 71c:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 720:	2d000019 	stccs	0, cr0, [r0, #-100]	; 0xffffff9c
 724:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 728:	0b3a0e03 	bleq	e83f3c <startup-0x1f17c0c4>
 72c:	01110b3b 	tsteq	r1, fp, lsr fp
 730:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 734:	01194296 			; <UNDEFINED> instruction: 0x01194296
 738:	2e000013 	mcrcs	0, 0, r0, cr0, cr3, {0}
 73c:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 740:	0b3a0e03 	bleq	e83f54 <startup-0x1f17c0ac>
 744:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
 748:	06120111 			; <UNDEFINED> instruction: 0x06120111
 74c:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 750:	00130119 	andseq	r0, r3, r9, lsl r1
 754:	00052f00 	andeq	r2, r5, r0, lsl #30
 758:	0b3a0e03 	bleq	e83f6c <startup-0x1f17c094>
 75c:	1349053b 	movtne	r0, #38203	; 0x953b
 760:	00001802 	andeq	r1, r0, r2, lsl #16
 764:	3f012e30 	svccc	0x00012e30
 768:	3a0e0319 	bcc	3813d4 <startup-0x1fc7ec2c>
 76c:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
 770:	11134919 	tstne	r3, r9, lsl r9
 774:	40061201 	andmi	r1, r6, r1, lsl #4
 778:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 77c:	00001301 	andeq	r1, r0, r1, lsl #6
 780:	03003431 	movweq	r3, #1073	; 0x431
 784:	3b0b3a0e 	blcc	2cefc4 <startup-0x1fd3103c>
 788:	02134905 	andseq	r4, r3, #81920	; 0x14000
 78c:	32000018 	andcc	r0, r0, #24
 790:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
 794:	0b3a0e03 	bleq	e83fa8 <startup-0x1f17c058>
 798:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
 79c:	06120111 			; <UNDEFINED> instruction: 0x06120111
 7a0:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 7a4:	33000019 	movwcc	r0, #25
 7a8:	08030034 	stmdaeq	r3, {r2, r4, r5}
 7ac:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 7b0:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 7b4:	2e340000 	cdpcs	0, 3, cr0, cr4, cr0, {0}
 7b8:	03193f01 	tsteq	r9, #1, 30
 7bc:	3b0b3a0e 	blcc	2ceffc <startup-0x1fd31004>
 7c0:	11192705 	tstne	r9, r5, lsl #14
 7c4:	40061201 	andmi	r1, r6, r1, lsl #4
 7c8:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 7cc:	00001301 	andeq	r1, r0, r1, lsl #6
 7d0:	3f002e35 	svccc	0x00002e35
 7d4:	3a0e0319 	bcc	381440 <startup-0x1fc7ebc0>
 7d8:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
 7dc:	11134919 	tstne	r3, r9, lsl r9
 7e0:	40061201 	andmi	r1, r6, r1, lsl #4
 7e4:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 7e8:	2e360000 	cdpcs	0, 3, cr0, cr6, cr0, {0}
 7ec:	03193f01 	tsteq	r9, #1, 30
 7f0:	3b0b3a0e 	blcc	2cf030 <startup-0x1fd30fd0>
 7f4:	49192705 	ldmdbmi	r9, {r0, r2, r8, r9, sl, sp}
 7f8:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
 7fc:	96184006 	ldrls	r4, [r8], -r6
 800:	13011942 	movwne	r1, #6466	; 0x1942
 804:	2e370000 	cdpcs	0, 3, cr0, cr7, cr0, {0}
 808:	3a0e0301 	bcc	381414 <startup-0x1fc7ebec>
 80c:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
 810:	11134919 	tstne	r3, r9, lsl r9
 814:	40061201 	andmi	r1, r6, r1, lsl #4
 818:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 81c:	00001301 	andeq	r1, r0, r1, lsl #6
 820:	03012e38 	movweq	r2, #7736	; 0x1e38
 824:	3b0b3a0e 	blcc	2cf064 <startup-0x1fd30f9c>
 828:	11192705 	tstne	r9, r5, lsl #14
 82c:	40061201 	andmi	r1, r6, r1, lsl #4
 830:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 834:	01000000 	mrseq	r0, (UNDEF: 0)
 838:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
 83c:	0e030b13 	vmoveq.32	d3[0], r0
 840:	01110e1b 	tsteq	r1, fp, lsl lr
 844:	17100612 			; <UNDEFINED> instruction: 0x17100612
 848:	24020000 	strcs	r0, [r2], #-0
 84c:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 850:	000e030b 	andeq	r0, lr, fp, lsl #6
 854:	00160300 	andseq	r0, r6, r0, lsl #6
 858:	0b3a0e03 	bleq	e8406c <startup-0x1f17bf94>
 85c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 860:	24040000 	strcs	r0, [r4], #-0
 864:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 868:	0008030b 	andeq	r0, r8, fp, lsl #6
 86c:	00350500 	eorseq	r0, r5, r0, lsl #10
 870:	00001349 	andeq	r1, r0, r9, asr #6
 874:	03003406 	movweq	r3, #1030	; 0x406
 878:	3b0b3a0e 	blcc	2cf0b8 <startup-0x1fd30f48>
 87c:	3f134905 	svccc	0x00134905
 880:	00193c19 	andseq	r3, r9, r9, lsl ip
 884:	00340700 	eorseq	r0, r4, r0, lsl #14
 888:	0b3a0e03 	bleq	e8409c <startup-0x1f17bf64>
 88c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 890:	193c193f 	ldmdbne	ip!, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
 894:	04080000 	streq	r0, [r8], #-0
 898:	0b0b3e01 	bleq	2d00a4 <startup-0x1fd2ff5c>
 89c:	3a13490b 	bcc	4d2cd0 <startup-0x1fb2d330>
 8a0:	01053b0b 	tsteq	r5, fp, lsl #22
 8a4:	09000013 	stmdbeq	r0, {r0, r1, r4}
 8a8:	0e030028 	cdpeq	0, 0, cr0, cr3, cr8, {1}
 8ac:	00000b1c 	andeq	r0, r0, ip, lsl fp
 8b0:	0300280a 	movweq	r2, #2058	; 0x80a
 8b4:	000b1c08 	andeq	r1, fp, r8, lsl #24
 8b8:	00160b00 	andseq	r0, r6, r0, lsl #22
 8bc:	0b3a0e03 	bleq	e840d0 <startup-0x1f17bf30>
 8c0:	1349053b 	movtne	r0, #38203	; 0x953b
 8c4:	130c0000 	movwne	r0, #49152	; 0xc000
 8c8:	3a0b0b01 	bcc	2c34d4 <startup-0x1fd3cb2c>
 8cc:	01053b0b 	tsteq	r5, fp, lsl #22
 8d0:	0d000013 	stceq	0, cr0, [r0, #-76]	; 0xffffffb4
 8d4:	0803000d 	stmdaeq	r3, {r0, r2, r3}
 8d8:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 8dc:	0b381349 	bleq	e05608 <startup-0x1f1fa9f8>
 8e0:	2e0e0000 	cdpcs	0, 0, cr0, cr14, cr0, {0}
 8e4:	03193f01 	tsteq	r9, #1, 30
 8e8:	3b0b3a0e 	blcc	2cf128 <startup-0x1fd30ed8>
 8ec:	11192705 	tstne	r9, r5, lsl #14
 8f0:	40061201 	andmi	r1, r6, r1, lsl #4
 8f4:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 8f8:	00001301 	andeq	r1, r0, r1, lsl #6
 8fc:	0300050f 	movweq	r0, #1295	; 0x50f
 900:	3b0b3a0e 	blcc	2cf140 <startup-0x1fd30ec0>
 904:	02134905 	andseq	r4, r3, #81920	; 0x14000
 908:	10000018 	andne	r0, r0, r8, lsl r0
 90c:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 910:	0b3a0e03 	bleq	e84124 <startup-0x1f17bedc>
 914:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
 918:	01111349 	tsteq	r1, r9, asr #6
 91c:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 920:	01194297 			; <UNDEFINED> instruction: 0x01194297
 924:	11000013 	tstne	r0, r3, lsl r0
 928:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 92c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 930:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 934:	2e120000 	cdpcs	0, 1, cr0, cr2, cr0, {0}
 938:	03193f00 	tsteq	r9, #0, 30
 93c:	3b0b3a0e 	blcc	2cf17c <startup-0x1fd30e84>
 940:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
 944:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
 948:	97184006 	ldrls	r4, [r8, -r6]
 94c:	00001942 	andeq	r1, r0, r2, asr #18
 950:	3f012e13 	svccc	0x00012e13
 954:	3a0e0319 	bcc	3815c0 <startup-0x1fc7ea40>
 958:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 95c:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 960:	97184006 	ldrls	r4, [r8, -r6]
 964:	13011942 	movwne	r1, #6466	; 0x1942
 968:	05140000 	ldreq	r0, [r4, #-0]
 96c:	3a0e0300 	bcc	381574 <startup-0x1fc7ea8c>
 970:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 974:	00180213 	andseq	r0, r8, r3, lsl r2
 978:	002e1500 	eoreq	r1, lr, r0, lsl #10
 97c:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 980:	0b3b0b3a 	bleq	ec3670 <startup-0x1f13c990>
 984:	01111927 	tsteq	r1, r7, lsr #18
 988:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 98c:	00194296 	mulseq	r9, r6, r2
 990:	11010000 	mrsne	r0, (UNDEF: 1)
 994:	130e2501 	movwne	r2, #58625	; 0xe501
 998:	1b0e030b 	blne	3815cc <startup-0x1fc7ea34>
 99c:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
 9a0:	00171006 	andseq	r1, r7, r6
 9a4:	00240200 	eoreq	r0, r4, r0, lsl #4
 9a8:	0b3e0b0b 	bleq	f835dc <startup-0x1f07ca24>
 9ac:	00000e03 	andeq	r0, r0, r3, lsl #28
 9b0:	03001603 	movweq	r1, #1539	; 0x603
 9b4:	3b0b3a0e 	blcc	2cf1f4 <startup-0x1fd30e0c>
 9b8:	0013490b 	andseq	r4, r3, fp, lsl #18
 9bc:	00240400 	eoreq	r0, r4, r0, lsl #8
 9c0:	0b3e0b0b 	bleq	f835f4 <startup-0x1f07ca0c>
 9c4:	00000803 	andeq	r0, r0, r3, lsl #16
 9c8:	49003505 	stmdbmi	r0, {r0, r2, r8, sl, ip, sp}
 9cc:	06000013 			; <UNDEFINED> instruction: 0x06000013
 9d0:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 9d4:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 9d8:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
 9dc:	0000193c 	andeq	r1, r0, ip, lsr r9
 9e0:	03003407 	movweq	r3, #1031	; 0x407
 9e4:	3b0b3a0e 	blcc	2cf224 <startup-0x1fd30ddc>
 9e8:	3f13490b 	svccc	0x0013490b
 9ec:	00193c19 	andseq	r3, r9, r9, lsl ip
 9f0:	01130800 	tsteq	r3, r0, lsl #16
 9f4:	0b3a0b0b 	bleq	e83628 <startup-0x1f17c9d8>
 9f8:	13010b3b 	movwne	r0, #6971	; 0x1b3b
 9fc:	0d090000 	stceq	0, cr0, [r9, #-0]
 a00:	3a0e0300 	bcc	381608 <startup-0x1fc7e9f8>
 a04:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 a08:	000b3813 	andeq	r3, fp, r3, lsl r8
 a0c:	000d0a00 	andeq	r0, sp, r0, lsl #20
 a10:	0b3a0803 	bleq	e82a24 <startup-0x1f17d5dc>
 a14:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 a18:	00000b38 	andeq	r0, r0, r8, lsr fp
 a1c:	4901010b 	stmdbmi	r1, {r0, r1, r3, r8}
 a20:	00130113 	andseq	r0, r3, r3, lsl r1
 a24:	00210c00 	eoreq	r0, r1, r0, lsl #24
 a28:	0b2f1349 	bleq	bc5754 <startup-0x1f43a8ac>
 a2c:	0d0d0000 	stceq	0, cr0, [sp, #-0]
 a30:	3a0e0300 	bcc	381638 <startup-0x1fc7e9c8>
 a34:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 a38:	0d0b0b13 	vstreq	d0, [fp, #-76]	; 0xffffffb4
 a3c:	380b0c0b 	stmdacc	fp, {r0, r1, r3, sl, fp}
 a40:	0e00000b 	cdpeq	0, 0, cr0, cr0, cr11, {0}
 a44:	0803000d 	stmdaeq	r3, {r0, r2, r3}
 a48:	0b3b0b3a 	bleq	ec3738 <startup-0x1f13c8c8>
 a4c:	0b0b1349 	bleq	2c5778 <startup-0x1fd3a888>
 a50:	0b0c0b0d 	bleq	30368c <startup-0x1fcfc974>
 a54:	00000b38 	andeq	r0, r0, r8, lsr fp
 a58:	3f012e0f 	svccc	0x00012e0f
 a5c:	3a0e0319 	bcc	3816c8 <startup-0x1fc7e938>
 a60:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 a64:	11134919 	tstne	r3, r9, lsl r9
 a68:	40061201 	andmi	r1, r6, r1, lsl #4
 a6c:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 a70:	00001301 	andeq	r1, r0, r1, lsl #6
 a74:	03000510 	movweq	r0, #1296	; 0x510
 a78:	3b0b3a08 	blcc	2cf2a0 <startup-0x1fd30d60>
 a7c:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 a80:	11000018 	tstne	r0, r8, lsl r0
 a84:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
 a88:	0b3b0b3a 	bleq	ec3778 <startup-0x1f13c888>
 a8c:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 a90:	34120000 	ldrcc	r0, [r2], #-0
 a94:	3a0e0300 	bcc	38169c <startup-0x1fc7e964>
 a98:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 a9c:	00180213 	andseq	r0, r8, r3, lsl r2
 aa0:	000f1300 	andeq	r1, pc, r0, lsl #6
 aa4:	13490b0b 	movtne	r0, #39691	; 0x9b0b
 aa8:	2e140000 	cdpcs	0, 1, cr0, cr4, cr0, {0}
 aac:	03193f01 	tsteq	r9, #1, 30
 ab0:	3b0b3a0e 	blcc	2cf2f0 <startup-0x1fd30d10>
 ab4:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
 ab8:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
 abc:	97184006 	ldrls	r4, [r8, -r6]
 ac0:	00001942 	andeq	r1, r0, r2, asr #18
 ac4:	01110100 	tsteq	r1, r0, lsl #2
 ac8:	0b130e25 	bleq	4c4364 <startup-0x1fb3bc9c>
 acc:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
 ad0:	06120111 			; <UNDEFINED> instruction: 0x06120111
 ad4:	00001710 	andeq	r1, r0, r0, lsl r7
 ad8:	0b002402 	bleq	9ae8 <startup-0x1fff6518>
 adc:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
 ae0:	0300000e 	movweq	r0, #14
 ae4:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
 ae8:	0b3b0b3a 	bleq	ec37d8 <startup-0x1f13c828>
 aec:	00001349 	andeq	r1, r0, r9, asr #6
 af0:	0b002404 	bleq	9b08 <startup-0x1fff64f8>
 af4:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
 af8:	05000008 	streq	r0, [r0, #-8]
 afc:	0b0b0113 	bleq	2c0f50 <startup-0x1fd3f0b0>
 b00:	0b3b0b3a 	bleq	ec37f0 <startup-0x1f13c810>
 b04:	00001301 	andeq	r1, r0, r1, lsl #6
 b08:	03000d06 	movweq	r0, #3334	; 0xd06
 b0c:	3b0b3a0e 	blcc	2cf34c <startup-0x1fd30cb4>
 b10:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
 b14:	0700000b 	streq	r0, [r0, -fp]
 b18:	0803000d 	stmdaeq	r3, {r0, r2, r3}
 b1c:	0b3b0b3a 	bleq	ec380c <startup-0x1f13c7f4>
 b20:	0b381349 	bleq	e0584c <startup-0x1f1fa7b4>
 b24:	01080000 	mrseq	r0, (UNDEF: 8)
 b28:	01134901 	tsteq	r3, r1, lsl #18
 b2c:	09000013 	stmdbeq	r0, {r0, r1, r4}
 b30:	13490021 	movtne	r0, #36897	; 0x9021
 b34:	00000b2f 	andeq	r0, r0, pc, lsr #22
 b38:	3f012e0a 	svccc	0x00012e0a
 b3c:	3a0e0319 	bcc	3817a8 <startup-0x1fc7e858>
 b40:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 b44:	11134919 	tstne	r3, r9, lsl r9
 b48:	40061201 	andmi	r1, r6, r1, lsl #4
 b4c:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 b50:	00001301 	andeq	r1, r0, r1, lsl #6
 b54:	0300050b 	movweq	r0, #1291	; 0x50b
 b58:	3b0b3a0e 	blcc	2cf398 <startup-0x1fd30c68>
 b5c:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 b60:	0c000018 	stceq	0, cr0, [r0], {24}
 b64:	0b0b000f 	bleq	2c0ba8 <startup-0x1fd3f458>
 b68:	00001349 	andeq	r1, r0, r9, asr #6
 b6c:	3f012e0d 	svccc	0x00012e0d
 b70:	3a0e0319 	bcc	3817dc <startup-0x1fc7e824>
 b74:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 b78:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 b7c:	97184006 	ldrls	r4, [r8, -r6]
 b80:	13011942 	movwne	r1, #6466	; 0x1942
 b84:	340e0000 	strcc	r0, [lr], #-0
 b88:	3a0e0300 	bcc	381790 <startup-0x1fc7e870>
 b8c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 b90:	00180213 	andseq	r0, r8, r3, lsl r2
 b94:	012e0f00 			; <UNDEFINED> instruction: 0x012e0f00
 b98:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 b9c:	0b3b0b3a 	bleq	ec388c <startup-0x1f13c774>
 ba0:	01111927 	tsteq	r1, r7, lsr #18
 ba4:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 ba8:	00194297 	mulseq	r9, r7, r2
 bac:	11010000 	mrsne	r0, (UNDEF: 1)
 bb0:	130e2501 	movwne	r2, #58625	; 0xe501
 bb4:	1b0e030b 	blne	3817e8 <startup-0x1fc7e818>
 bb8:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
 bbc:	00171006 	andseq	r1, r7, r6
 bc0:	00240200 	eoreq	r0, r4, r0, lsl #4
 bc4:	0b3e0b0b 	bleq	f837f8 <startup-0x1f07c808>
 bc8:	00000e03 	andeq	r0, r0, r3, lsl #28
 bcc:	03001603 	movweq	r1, #1539	; 0x603
 bd0:	3b0b3a0e 	blcc	2cf410 <startup-0x1fd30bf0>
 bd4:	0013490b 	andseq	r4, r3, fp, lsl #18
 bd8:	00240400 	eoreq	r0, r4, r0, lsl #8
 bdc:	0b3e0b0b 	bleq	f83810 <startup-0x1f07c7f0>
 be0:	00000803 	andeq	r0, r0, r3, lsl #16
 be4:	49003505 	stmdbmi	r0, {r0, r2, r8, sl, ip, sp}
 be8:	06000013 			; <UNDEFINED> instruction: 0x06000013
 bec:	13490026 	movtne	r0, #36902	; 0x9026
 bf0:	13070000 	movwne	r0, #28672	; 0x7000
 bf4:	3a050b01 	bcc	143800 <startup-0x1febc800>
 bf8:	01053b0b 	tsteq	r5, fp, lsl #22
 bfc:	08000013 	stmdaeq	r0, {r0, r1, r4}
 c00:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
 c04:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 c08:	0b381349 	bleq	e05934 <startup-0x1f1fa6cc>
 c0c:	0d090000 	stceq	0, cr0, [r9, #-0]
 c10:	3a0e0300 	bcc	381818 <startup-0x1fc7e7e8>
 c14:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 c18:	00053813 	andeq	r3, r5, r3, lsl r8
 c1c:	000d0a00 	andeq	r0, sp, r0, lsl #20
 c20:	0b3a0803 	bleq	e82c34 <startup-0x1f17d3cc>
 c24:	1349053b 	movtne	r0, #38203	; 0x953b
 c28:	00000538 	andeq	r0, r0, r8, lsr r5
 c2c:	4901010b 	stmdbmi	r1, {r0, r1, r3, r8}
 c30:	00130113 	andseq	r0, r3, r3, lsl r1
 c34:	00210c00 	eoreq	r0, r1, r0, lsl #24
 c38:	0b2f1349 	bleq	bc5964 <startup-0x1f43a69c>
 c3c:	210d0000 	mrscs	r0, (UNDEF: 13)
 c40:	2f134900 	svccs	0x00134900
 c44:	0e000005 	cdpeq	0, 0, cr0, cr0, cr5, {0}
 c48:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
 c4c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 c50:	00001349 	andeq	r1, r0, r9, asr #6
 c54:	0b01130f 	bleq	45898 <startup-0x1ffba768>
 c58:	3b0b3a0b 	blcc	2cf48c <startup-0x1fd30b74>
 c5c:	00130105 	andseq	r0, r3, r5, lsl #2
 c60:	000d1000 	andeq	r1, sp, r0
 c64:	0b3a0803 	bleq	e82c78 <startup-0x1f17d388>
 c68:	1349053b 	movtne	r0, #38203	; 0x953b
 c6c:	00000b38 	andeq	r0, r0, r8, lsr fp
 c70:	03003411 	movweq	r3, #1041	; 0x411
 c74:	3b0b3a0e 	blcc	2cf4b4 <startup-0x1fd30b4c>
 c78:	3f134905 	svccc	0x00134905
 c7c:	00193c19 	andseq	r3, r9, r9, lsl ip
 c80:	00341200 	eorseq	r1, r4, r0, lsl #4
 c84:	0b3a0e03 	bleq	e84498 <startup-0x1f17bb68>
 c88:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 c8c:	193c193f 	ldmdbne	ip!, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
 c90:	04130000 	ldreq	r0, [r3], #-0
 c94:	0b0b3e01 	bleq	2d04a0 <startup-0x1fd2fb60>
 c98:	3a13490b 	bcc	4d30cc <startup-0x1fb2cf34>
 c9c:	01053b0b 	tsteq	r5, fp, lsl #22
 ca0:	14000013 	strne	r0, [r0], #-19	; 0xffffffed
 ca4:	0e030028 	cdpeq	0, 0, cr0, cr3, cr8, {1}
 ca8:	00000b1c 	andeq	r0, r0, ip, lsl fp
 cac:	0b011315 	bleq	45908 <startup-0x1ffba6f8>
 cb0:	3b0b3a0b 	blcc	2cf4e4 <startup-0x1fd30b1c>
 cb4:	0013010b 	andseq	r0, r3, fp, lsl #2
 cb8:	000d1600 	andeq	r1, sp, r0, lsl #12
 cbc:	0b3a0e03 	bleq	e844d0 <startup-0x1f17bb30>
 cc0:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 cc4:	00000b38 	andeq	r0, r0, r8, lsr fp
 cc8:	3f012e17 	svccc	0x00012e17
 ccc:	3a0e0319 	bcc	381938 <startup-0x1fc7e6c8>
 cd0:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 cd4:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 cd8:	97184006 	ldrls	r4, [r8, -r6]
 cdc:	13011942 	movwne	r1, #6466	; 0x1942
 ce0:	05180000 	ldreq	r0, [r8, #-0]
 ce4:	3a0e0300 	bcc	3818ec <startup-0x1fc7e714>
 ce8:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 cec:	00180213 	andseq	r0, r8, r3, lsl r2
 cf0:	00341900 	eorseq	r1, r4, r0, lsl #18
 cf4:	0b3a0e03 	bleq	e84508 <startup-0x1f17baf8>
 cf8:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 cfc:	00001802 	andeq	r1, r0, r2, lsl #16
 d00:	0b000f1a 	bleq	4970 <startup-0x1fffb690>
 d04:	0013490b 	andseq	r4, r3, fp, lsl #18
 d08:	012e1b00 			; <UNDEFINED> instruction: 0x012e1b00
 d0c:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 d10:	0b3b0b3a 	bleq	ec3a00 <startup-0x1f13c600>
 d14:	01111927 	tsteq	r1, r7, lsr #18
 d18:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 d1c:	00194297 	mulseq	r9, r7, r2
 d20:	11010000 	mrsne	r0, (UNDEF: 1)
 d24:	130e2501 	movwne	r2, #58625	; 0xe501
 d28:	1b0e030b 	blne	38195c <startup-0x1fc7e6a4>
 d2c:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
 d30:	00171006 	andseq	r1, r7, r6
 d34:	00240200 	eoreq	r0, r4, r0, lsl #4
 d38:	0b3e0b0b 	bleq	f8396c <startup-0x1f07c694>
 d3c:	00000e03 	andeq	r0, r0, r3, lsl #28
 d40:	03001603 	movweq	r1, #1539	; 0x603
 d44:	3b0b3a0e 	blcc	2cf584 <startup-0x1fd30a7c>
 d48:	0013490b 	andseq	r4, r3, fp, lsl #18
 d4c:	00240400 	eoreq	r0, r4, r0, lsl #8
 d50:	0b3e0b0b 	bleq	f83984 <startup-0x1f07c67c>
 d54:	00000803 	andeq	r0, r0, r3, lsl #16
 d58:	49003505 	stmdbmi	r0, {r0, r2, r8, sl, ip, sp}
 d5c:	06000013 			; <UNDEFINED> instruction: 0x06000013
 d60:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 d64:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 d68:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
 d6c:	0000193c 	andeq	r1, r0, ip, lsr r9
 d70:	03003407 	movweq	r3, #1031	; 0x407
 d74:	3b0b3a0e 	blcc	2cf5b4 <startup-0x1fd30a4c>
 d78:	3f13490b 	svccc	0x0013490b
 d7c:	00193c19 	andseq	r3, r9, r9, lsl ip
 d80:	01040800 	tsteq	r4, r0, lsl #16
 d84:	0b0b0b3e 	bleq	2c3a84 <startup-0x1fd3c57c>
 d88:	0b3a1349 	bleq	e85ab4 <startup-0x1f17a54c>
 d8c:	1301053b 	movwne	r0, #5435	; 0x153b
 d90:	28090000 	stmdacs	r9, {}	; <UNPREDICTABLE>
 d94:	1c0e0300 	stcne	3, cr0, [lr], {-0}
 d98:	0a00000b 	beq	dcc <startup-0x1ffff234>
 d9c:	0b0b0113 	bleq	2c11f0 <startup-0x1fd3ee10>
 da0:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 da4:	00001301 	andeq	r1, r0, r1, lsl #6
 da8:	03000d0b 	movweq	r0, #3339	; 0xd0b
 dac:	3b0b3a0e 	blcc	2cf5ec <startup-0x1fd30a14>
 db0:	38134905 	ldmdacc	r3, {r0, r2, r8, fp, lr}
 db4:	0c00000b 	stceq	0, cr0, [r0], {11}
 db8:	0803000d 	stmdaeq	r3, {r0, r2, r3}
 dbc:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 dc0:	0b381349 	bleq	e05aec <startup-0x1f1fa514>
 dc4:	010d0000 	mrseq	r0, (UNDEF: 13)
 dc8:	01134901 	tsteq	r3, r1, lsl #18
 dcc:	0e000013 	mcreq	0, 0, r0, cr0, cr3, {0}
 dd0:	13490021 	movtne	r0, #36897	; 0x9021
 dd4:	00000b2f 	andeq	r0, r0, pc, lsr #22
 dd8:	0300160f 	movweq	r1, #1551	; 0x60f
 ddc:	3b0b3a0e 	blcc	2cf61c <startup-0x1fd309e4>
 de0:	00134905 	andseq	r4, r3, r5, lsl #18
 de4:	01041000 	mrseq	r1, (UNDEF: 4)
 de8:	0b0b0b3e 	bleq	2c3ae8 <startup-0x1fd3c518>
 dec:	0b3a1349 	bleq	e85b18 <startup-0x1f17a4e8>
 df0:	13010b3b 	movwne	r0, #6971	; 0x1b3b
 df4:	13110000 	tstne	r1, #0
 df8:	3a0b0b01 	bcc	2c3a04 <startup-0x1fd3c5fc>
 dfc:	010b3b0b 	tsteq	fp, fp, lsl #22
 e00:	12000013 	andne	r0, r0, #19
 e04:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
 e08:	0b3b0b3a 	bleq	ec3af8 <startup-0x1f13c508>
 e0c:	0b381349 	bleq	e05b38 <startup-0x1f1fa4c8>
 e10:	2e130000 	cdpcs	0, 1, cr0, cr3, cr0, {0}
 e14:	03193f01 	tsteq	r9, #1, 30
 e18:	3b0b3a0e 	blcc	2cf658 <startup-0x1fd309a8>
 e1c:	11192705 	tstne	r9, r5, lsl #14
 e20:	40061201 	andmi	r1, r6, r1, lsl #4
 e24:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 e28:	00001301 	andeq	r1, r0, r1, lsl #6
 e2c:	03000514 	movweq	r0, #1300	; 0x514
 e30:	3b0b3a0e 	blcc	2cf670 <startup-0x1fd30990>
 e34:	02134905 	andseq	r4, r3, #81920	; 0x14000
 e38:	15000018 	strne	r0, [r0, #-24]	; 0xffffffe8
 e3c:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 e40:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 e44:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 e48:	0f160000 	svceq	0x00160000
 e4c:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
 e50:	17000013 	smladne	r0, r3, r0, r0
 e54:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 e58:	0b3a0e03 	bleq	e8466c <startup-0x1f17b994>
 e5c:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
 e60:	01111349 	tsteq	r1, r9, asr #6
 e64:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 e68:	01194297 			; <UNDEFINED> instruction: 0x01194297
 e6c:	18000013 	stmdane	r0, {r0, r1, r4}
 e70:	08030034 	stmdaeq	r3, {r2, r4, r5}
 e74:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 e78:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 e7c:	2e190000 	cdpcs	0, 1, cr0, cr9, cr0, {0}
 e80:	03193f01 	tsteq	r9, #1, 30
 e84:	3b0b3a0e 	blcc	2cf6c4 <startup-0x1fd3093c>
 e88:	1119270b 	tstne	r9, fp, lsl #14
 e8c:	40061201 	andmi	r1, r6, r1, lsl #4
 e90:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 e94:	00001301 	andeq	r1, r0, r1, lsl #6
 e98:	0300051a 	movweq	r0, #1306	; 0x51a
 e9c:	3b0b3a0e 	blcc	2cf6dc <startup-0x1fd30924>
 ea0:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 ea4:	1b000018 	blne	f0c <startup-0x1ffff0f4>
 ea8:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 eac:	0b3b0b3a 	bleq	ec3b9c <startup-0x1f13c464>
 eb0:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 eb4:	341c0000 	ldrcc	r0, [ip], #-0
 eb8:	3a080300 	bcc	201ac0 <startup-0x1fdfe540>
 ebc:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 ec0:	00180213 	andseq	r0, r8, r3, lsl r2
 ec4:	012e1d00 			; <UNDEFINED> instruction: 0x012e1d00
 ec8:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 ecc:	0b3b0b3a 	bleq	ec3bbc <startup-0x1f13c444>
 ed0:	01111927 	tsteq	r1, r7, lsr #18
 ed4:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 ed8:	00194296 	mulseq	r9, r6, r2
	...

Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	0000001c 	andeq	r0, r0, ip, lsl r0
   4:	00000002 	andeq	r0, r0, r2
   8:	00040000 	andeq	r0, r4, r0
   c:	00000000 	andeq	r0, r0, r0
  10:	20000010 	andcs	r0, r0, r0, lsl r0
  14:	00000788 	andeq	r0, r0, r8, lsl #15
	...
  20:	0000001c 	andeq	r0, r0, ip, lsl r0
  24:	10e00002 	rscne	r0, r0, r2
  28:	00040000 	andeq	r0, r4, r0
  2c:	00000000 	andeq	r0, r0, r0
  30:	20000798 	mulcs	r0, r8, r7
  34:	000011d2 	ldrdeq	r1, [r0], -r2
	...
  40:	00000024 	andeq	r0, r0, r4, lsr #32
  44:	1c8a0002 	stcne	0, cr0, [sl], {2}
  48:	00040000 	andeq	r0, r4, r0
  4c:	00000000 	andeq	r0, r0, r0
  50:	2000196c 	andcs	r1, r0, ip, ror #18
  54:	000016ae 	andeq	r1, r0, lr, lsr #13
  58:	20000000 	andcs	r0, r0, r0
  5c:	0000000c 	andeq	r0, r0, ip
	...
  68:	0000001c 	andeq	r0, r0, ip, lsl r0
  6c:	37c20002 	strbcc	r0, [r2, r2]
  70:	00040000 	andeq	r0, r4, r0
  74:	00000000 	andeq	r0, r0, r0
  78:	2000301c 	andcs	r3, r0, ip, lsl r0
  7c:	00000174 	andeq	r0, r0, r4, ror r1
	...
  88:	0000001c 	andeq	r0, r0, ip, lsl r0
  8c:	3a530002 	bcc	14c009c <startup-0x1eb3ff64>
  90:	00040000 	andeq	r0, r4, r0
  94:	00000000 	andeq	r0, r0, r0
  98:	20003190 	mulcs	r0, r0, r1
  9c:	0000022e 	andeq	r0, r0, lr, lsr #4
	...
  a8:	0000001c 	andeq	r0, r0, ip, lsl r0
  ac:	3ebb0002 	cdpcc	0, 11, cr0, cr11, cr2, {0}
  b0:	00040000 	andeq	r0, r4, r0
  b4:	00000000 	andeq	r0, r0, r0
  b8:	200033be 			; <UNDEFINED> instruction: 0x200033be
  bc:	00000128 	andeq	r0, r0, r8, lsr #2
	...
  c8:	0000001c 	andeq	r0, r0, ip, lsl r0
  cc:	40680002 	rsbmi	r0, r8, r2
  d0:	00040000 	andeq	r0, r4, r0
  d4:	00000000 	andeq	r0, r0, r0
  d8:	200034e8 	andcs	r3, r0, r8, ror #9
  dc:	000001c4 	andeq	r0, r0, r4, asr #3
	...
  e8:	0000001c 	andeq	r0, r0, ip, lsl r0
  ec:	45af0002 	strmi	r0, [pc, #2]!	; f6 <startup-0x1fffff0a>
  f0:	00040000 	andeq	r0, r4, r0
  f4:	00000000 	andeq	r0, r0, r0
  f8:	200036ac 	andcs	r3, r0, ip, lsr #13
  fc:	0000050e 	andeq	r0, r0, lr, lsl #10
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
       0:	000002c0 	andeq	r0, r0, r0, asr #5
       4:	01b90002 			; <UNDEFINED> instruction: 0x01b90002
       8:	01020000 	mrseq	r0, (UNDEF: 2)
       c:	000d0efb 	strdeq	r0, [sp], -fp
      10:	01010101 	tsteq	r1, r1, lsl #2
      14:	01000000 	mrseq	r0, (UNDEF: 0)
      18:	2e010000 	cdpcs	0, 0, cr0, cr1, cr0, {0}
      1c:	696c2f2e 	stmdbvs	ip!, {r1, r2, r3, r5, r8, r9, sl, fp, sp}^
      20:	54532f62 	ldrbpl	r2, [r3], #-3938	; 0xfffff09e
      24:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
      28:	696c5f34 	stmdbvs	ip!, {r2, r4, r5, r8, r9, sl, fp, ip, lr}^
      2c:	4d432f62 	stclmi	15, cr2, [r3, #-392]	; 0xfffffe78
      30:	2f534953 	svccs	0x00534953
      34:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
      38:	00656475 	rsbeq	r6, r5, r5, ror r4
      3c:	552f3a43 	strpl	r3, [pc, #-2627]!	; fffff601 <GPIO_Ports+0xdfffb7f9>
      40:	73726573 	cmnvc	r2, #482344960	; 0x1cc00000
      44:	6164412f 	cmnvs	r4, pc, lsr #2
      48:	4f2f746d 	svcmi	0x002f746d
      4c:	7244656e 	subvc	r6, r4, #461373440	; 0x1b800000
      50:	2f657669 	svccs	0x00657669
      54:	756b6f44 	strbvc	r6, [fp, #-3908]!	; 0xfffff0bc
      58:	746e656d 	strbtvc	r6, [lr], #-1389	; 0xfffffa93
      5c:	7469472f 	strbtvc	r4, [r9], #-1839	; 0xfffff8d1
      60:	2f627548 	svccs	0x00627548
      64:	32544144 	subscc	r4, r4, #68, 2
      68:	4c2d3039 	stcmi	0, cr3, [sp], #-228	; 0xffffff1c
      6c:	736d7261 	cmnvc	sp, #268435462	; 0x10000006
      70:	65747379 	ldrbvs	r7, [r4, #-889]!	; 0xfffffc87
      74:	6f6b2f6d 	svcvs	0x006b2f6d
      78:	696c2f64 	stmdbvs	ip!, {r2, r5, r6, r8, r9, sl, fp, sp}^
      7c:	2e2e0062 	cdpcs	0, 2, cr0, cr14, cr2, {3}
      80:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
      84:	4d54532f 	ldclmi	3, cr5, [r4, #-188]	; 0xffffff44
      88:	34463233 	strbcc	r3, [r6], #-563	; 0xfffffdcd
      8c:	62696c5f 	rsbvs	r6, r9, #24320	; 0x5f00
      90:	4d54532f 	ldclmi	3, cr5, [r4, #-188]	; 0xffffff44
      94:	34463233 	strbcc	r3, [r6], #-563	; 0xfffffdcd
      98:	535f7878 	cmppl	pc, #120, 16	; 0x780000
      9c:	65506474 	ldrbvs	r6, [r0, #-1140]	; 0xfffffb8c
      a0:	68706972 	ldmdavs	r0!, {r1, r4, r5, r6, r8, fp, sp, lr}^
      a4:	6972445f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, sl, lr}^
      a8:	2f726576 	svccs	0x00726576
      ac:	00636e69 	rsbeq	r6, r3, r9, ror #28
      b0:	635c3a63 	cmpvs	ip, #405504	; 0x63000
      b4:	70616573 	rsbvc	r6, r1, r3, ror r5
      b8:	6f635c70 	svcvs	0x00635c70
      bc:	696c6564 	stmdbvs	ip!, {r2, r5, r6, r8, sl, sp, lr}^
      c0:	745c6574 	ldrbvc	r6, [ip], #-1396	; 0xfffffa8c
      c4:	736c6f6f 	cmnvc	ip, #444	; 0x1bc
      c8:	6363675c 	cmnvs	r3, #92, 14	; 0x1700000
      cc:	6d72612d 	ldfvse	f6, [r2, #-180]!	; 0xffffff4c
      d0:	6d72615c 	ldfvse	f6, [r2, #-368]!	; 0xfffffe90
      d4:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
      d8:	61652d65 	cmnvs	r5, r5, ror #26
      dc:	695c6962 	ldmdbvs	ip, {r1, r5, r6, r8, fp, sp, lr}^
      e0:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
      e4:	6d5c6564 	cfldr64vs	mvdx6, [ip, #-400]	; 0xfffffe70
      e8:	69686361 	stmdbvs	r8!, {r0, r5, r6, r8, r9, sp, lr}^
      ec:	6300656e 	movwvs	r6, #1390	; 0x56e
      f0:	73635c3a 	cmnvc	r3, #14848	; 0x3a00
      f4:	70706165 	rsbsvc	r6, r0, r5, ror #2
      f8:	646f635c 	strbtvs	r6, [pc], #-860	; 100 <startup-0x1fffff00>
      fc:	74696c65 	strbtvc	r6, [r9], #-3173	; 0xfffff39b
     100:	6f745c65 	svcvs	0x00745c65
     104:	5c736c6f 	ldclpl	12, cr6, [r3], #-444	; 0xfffffe44
     108:	2d636367 	stclcs	3, cr6, [r3, #-412]!	; 0xfffffe64
     10c:	5c6d7261 	sfmpl	f7, 2, [sp], #-388	; 0xfffffe7c
     110:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
     114:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
     118:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
     11c:	6e695c69 	cdpvs	12, 6, cr5, cr9, cr9, {3}
     120:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
     124:	79735c65 	ldmdbvc	r3!, {r0, r2, r5, r6, sl, fp, ip, lr}^
     128:	63000073 	movwvs	r0, #115	; 0x73
     12c:	5f65726f 	svcpl	0x0065726f
     130:	2e346d63 	cdpcs	13, 3, cr6, cr4, cr3, {3}
     134:	00010068 	andeq	r0, r1, r8, rrx
     138:	4e414300 	cdpmi	3, 4, cr4, cr1, cr0, {0}
     13c:	0200632e 	andeq	r6, r0, #-1207959552	; 0xb8000000
     140:	74730000 	ldrbtvc	r0, [r3], #-0
     144:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
     148:	2e787834 	mrccs	8, 3, r7, cr8, cr4, {1}
     14c:	00030068 	andeq	r0, r3, r8, rrx
     150:	65645f00 	strbvs	r5, [r4, #-3840]!	; 0xfffff100
     154:	6c756166 	ldfvse	f6, [r5], #-408	; 0xfffffe68
     158:	79745f74 	ldmdbvc	r4!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
     15c:	2e736570 	mrccs	5, 3, r6, cr3, cr0, {3}
     160:	00040068 	andeq	r0, r4, r8, rrx
     164:	74735f00 	ldrbtvc	r5, [r3], #-3840	; 0xfffff100
     168:	746e6964 	strbtvc	r6, [lr], #-2404	; 0xfffff69c
     16c:	0500682e 	streq	r6, [r0, #-2094]	; 0xfffff7d2
     170:	79730000 	ldmdbvc	r3!, {}^	; <UNPREDICTABLE>
     174:	6d657473 	cfstrdvs	mvd7, [r5, #-460]!	; 0xfffffe34
     178:	6d74735f 	ldclvs	3, cr7, [r4, #-380]!	; 0xfffffe84
     17c:	34663233 	strbtcc	r3, [r6], #-563	; 0xfffffdcd
     180:	682e7878 	stmdavs	lr!, {r3, r4, r5, r6, fp, ip, sp, lr}
     184:	00000300 	andeq	r0, r0, r0, lsl #6
     188:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
     18c:	78346632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, sp, lr}
     190:	61635f78 	smcvs	13816	; 0x35f8
     194:	00682e6e 	rsbeq	r2, r8, lr, ror #28
     198:	43000003 	movwmi	r0, #3
     19c:	682e4e41 	stmdavs	lr!, {r0, r6, r9, sl, fp, lr}
     1a0:	00000200 	andeq	r0, r0, r0, lsl #4
     1a4:	6373696d 	cmnvs	r3, #1785856	; 0x1b4000
     1a8:	0300682e 	movweq	r6, #2094	; 0x82e
     1ac:	74730000 	ldrbtvc	r0, [r3], #-0
     1b0:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
     1b4:	5f787834 	svcpl	0x00787834
     1b8:	6f697067 	svcvs	0x00697067
     1bc:	0300682e 	movweq	r6, #2094	; 0x82e
     1c0:	00000000 	andeq	r0, r0, r0
     1c4:	00100205 	andseq	r0, r0, r5, lsl #4
     1c8:	dd032000 	stcle	0, cr2, [r3, #-0]
     1cc:	4b75010c 	blmi	1d40604 <startup-0x1e2bf9fc>
     1d0:	04d81ecd 	ldrbeq	r1, [r8], #3789	; 0xecd
     1d4:	73c30302 	bicvc	r0, r3, #134217728	; 0x8000000
     1d8:	914b3d90 			; <UNDEFINED> instruction: 0x914b3d90
     1dc:	02040200 	andeq	r0, r4, #0, 4
     1e0:	0402002c 	streq	r0, [r2], #-44	; 0xffffffd4
     1e4:	06580601 	ldrbeq	r0, [r8], -r1, lsl #12
     1e8:	6769214f 	strbvs	r2, [r9, -pc, asr #2]!
     1ec:	59868386 	stmibpl	r6, {r1, r2, r7, r8, r9, pc}
     1f0:	4b593d3d 	blmi	164f6ec <startup-0x1e9b0914>
     1f4:	3d3d4b59 	fldmdbxcc	sp!, {d4-d47}	;@ Deprecated
     1f8:	5967794b 	stmdbpl	r7!, {r0, r1, r3, r6, r8, fp, ip, sp, lr}^
     1fc:	5b594fa0 	blpl	1654084 <startup-0x1e9abf7c>
     200:	67bdc967 	ldrvs	ip, [sp, r7, ror #18]!
     204:	919faf4b 	orrsls	sl, pc, fp, asr #30
     208:	02007677 	andeq	r7, r0, #124780544	; 0x7700000
     20c:	63030204 	movwvs	r0, #12804	; 0x3204
     210:	0402004a 	streq	r0, [r2], #-74	; 0xffffffb6
     214:	06660601 	strbteq	r0, [r6], -r1, lsl #12
     218:	21582303 	cmpcs	r8, r3, lsl #6
     21c:	864b67d9 			; <UNDEFINED> instruction: 0x864b67d9
     220:	4c3d3d59 	ldcmi	13, cr3, [sp], #-356	; 0xfffffe9c
     224:	02003d77 	andeq	r3, r0, #7616	; 0x1dc0
     228:	004b0304 	subeq	r0, fp, r4, lsl #6
     22c:	57030402 	strpl	r0, [r3, -r2, lsl #8]
     230:	01040200 	mrseq	r0, R12_usr
     234:	4d065806 	stcmi	8, cr5, [r6, #-24]	; 0xffffffe8
     238:	4b4f4c4f 	blmi	13d337c <startup-0x1ec2cc84>
     23c:	5dc9673f 	stclpl	7, cr6, [r9, #252]	; 0xfc
     240:	4ec9594b 			; <UNDEFINED> instruction: 0x4ec9594b
     244:	763ecc75 			; <UNDEFINED> instruction: 0x763ecc75
     248:	914b6977 	hvcls	46743	; 0xb697
     24c:	3d679495 	cfstrdcc	mvd9, [r7, #-596]!	; 0xfffffdac
     250:	9fa35a4c 	svcls	0x00a35a4c
     254:	f5c99faf 			; <UNDEFINED> instruction: 0xf5c99faf
     258:	22084bbb 	andcs	r4, r8, #191488	; 0x2ec00
     25c:	02040200 	andeq	r0, r4, #0, 4
     260:	00666c03 	rsbeq	r6, r6, r3, lsl #24
     264:	06010402 	streq	r0, [r1], -r2, lsl #8
     268:	17030666 	strne	r0, [r3, -r6, ror #12]
     26c:	3e3de758 	mrccc	7, 1, lr, cr13, cr8, {2}
     270:	4bad944c 	blmi	feb653a8 <GPIO_Ports+0xdeb615a0>
     274:	02001308 	andeq	r1, r0, #8, 6	; 0x20000000
     278:	77030204 	strvc	r0, [r3, -r4, lsl #4]
     27c:	04020058 	streq	r0, [r2], #-88	; 0xffffffa8
     280:	06580601 	ldrbeq	r0, [r8], -r1, lsl #12
     284:	ae4a0c03 	cdpge	12, 4, cr0, cr10, cr3, {0}
     288:	4d676741 	stclmi	7, cr6, [r7, #-260]!	; 0xfffffefc
     28c:	68676d67 	stmdavs	r7!, {r0, r1, r2, r5, r6, r8, sl, fp, sp, lr}^
     290:	3d3d3d4b 	ldccc	13, cr3, [sp, #-300]!	; 0xfffffed4
     294:	3d4b683d 	stclcc	8, cr6, [fp, #-244]	; 0xffffff0c
     298:	683d3d3d 	ldmdavs	sp!, {r0, r2, r3, r4, r5, r8, sl, fp, ip, sp}
     29c:	3d3d3d3d 	ldccc	13, cr3, [sp, #-244]!	; 0xffffff0c
     2a0:	3d3d683d 	ldccc	8, cr6, [sp, #-244]!	; 0xffffff0c
     2a4:	683d3d3d 	ldmdavs	sp!, {r0, r2, r3, r4, r5, r8, sl, fp, ip, sp}
     2a8:	3d3d3d4b 	ldccc	13, cr3, [sp, #-300]!	; 0xfffffed4
     2ac:	3d4b4d4d 	stclcc	13, cr4, [fp, #-308]	; 0xfffffecc
     2b0:	3d3d3d3d 	ldccc	13, cr3, [sp, #-244]!	; 0xffffff0c
     2b4:	3f3d3d3f 	svccc	0x003d3d3f
     2b8:	4b3fa030 	blmi	fe8380 <startup-0x1f017c80>
     2bc:	022f3069 	eoreq	r3, pc, #105	; 0x69
     2c0:	0101000c 	tsteq	r1, ip
     2c4:	00000421 	andeq	r0, r0, r1, lsr #8
     2c8:	01c70002 	biceq	r0, r7, r2
     2cc:	01020000 	mrseq	r0, (UNDEF: 2)
     2d0:	000d0efb 	strdeq	r0, [sp], -fp
     2d4:	01010101 	tsteq	r1, r1, lsl #2
     2d8:	01000000 	mrseq	r0, (UNDEF: 0)
     2dc:	43010000 	movwmi	r0, #4096	; 0x1000
     2e0:	73552f3a 	cmpvc	r5, #58, 30	; 0xe8
     2e4:	2f737265 	svccs	0x00737265
     2e8:	6d616441 	cfstrdvs	mvd6, [r1, #-260]!	; 0xfffffefc
     2ec:	6e4f2f74 	mcrvs	15, 2, r2, cr15, cr4, {3}
     2f0:	69724465 	ldmdbvs	r2!, {r0, r2, r5, r6, sl, lr}^
     2f4:	442f6576 	strtmi	r6, [pc], #-1398	; 2fc <startup-0x1ffffd04>
     2f8:	6d756b6f 	fldmdbxvs	r5!, {d22-d76}	;@ Deprecated
     2fc:	2f746e65 	svccs	0x00746e65
     300:	48746947 	ldmdami	r4!, {r0, r1, r2, r6, r8, fp, sp, lr}^
     304:	442f6275 	strtmi	r6, [pc], #-629	; 30c <startup-0x1ffffcf4>
     308:	39325441 	ldmdbcc	r2!, {r0, r6, sl, ip, lr}
     30c:	614c2d30 	cmpvs	ip, r0, lsr sp
     310:	79736d72 	ldmdbvc	r3!, {r1, r4, r5, r6, r8, sl, fp, sp, lr}^
     314:	6d657473 	cfstrdvs	mvd7, [r5, #-460]!	; 0xfffffe34
     318:	646f6b2f 	strbtvs	r6, [pc], #-2863	; 320 <startup-0x1ffffce0>
     31c:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
     320:	4d54532f 	ldclmi	3, cr5, [r4, #-188]	; 0xffffff44
     324:	34463233 	strbcc	r3, [r6], #-563	; 0xfffffdcd
     328:	62696c5f 	rsbvs	r6, r9, #24320	; 0x5f00
     32c:	4d54532f 	ldclmi	3, cr5, [r4, #-188]	; 0xffffff44
     330:	34463233 	strbcc	r3, [r6], #-563	; 0xfffffdcd
     334:	535f7878 	cmppl	pc, #120, 16	; 0x780000
     338:	65506474 	ldrbvs	r6, [r0, #-1140]	; 0xfffffb8c
     33c:	68706972 	ldmdavs	r0!, {r1, r4, r5, r6, r8, fp, sp, lr}^
     340:	6972445f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, sl, lr}^
     344:	2f726576 	svccs	0x00726576
     348:	00637273 	rsbeq	r7, r3, r3, ror r2
     34c:	635c3a63 	cmpvs	ip, #405504	; 0x63000
     350:	70616573 	rsbvc	r6, r1, r3, ror r5
     354:	6f635c70 	svcvs	0x00635c70
     358:	696c6564 	stmdbvs	ip!, {r2, r5, r6, r8, sl, sp, lr}^
     35c:	745c6574 	ldrbvc	r6, [ip], #-1396	; 0xfffffa8c
     360:	736c6f6f 	cmnvc	ip, #444	; 0x1bc
     364:	6363675c 	cmnvs	r3, #92, 14	; 0x1700000
     368:	6d72612d 	ldfvse	f6, [r2, #-180]!	; 0xffffff4c
     36c:	6d72615c 	ldfvse	f6, [r2, #-368]!	; 0xfffffe90
     370:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
     374:	61652d65 	cmnvs	r5, r5, ror #26
     378:	695c6962 	ldmdbvs	ip, {r1, r5, r6, r8, fp, sp, lr}^
     37c:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
     380:	6d5c6564 	cfldr64vs	mvdx6, [ip, #-400]	; 0xfffffe70
     384:	69686361 	stmdbvs	r8!, {r0, r5, r6, r8, r9, sp, lr}^
     388:	6300656e 	movwvs	r6, #1390	; 0x56e
     38c:	73635c3a 	cmnvc	r3, #14848	; 0x3a00
     390:	70706165 	rsbsvc	r6, r0, r5, ror #2
     394:	646f635c 	strbtvs	r6, [pc], #-860	; 39c <startup-0x1ffffc64>
     398:	74696c65 	strbtvc	r6, [r9], #-3173	; 0xfffff39b
     39c:	6f745c65 	svcvs	0x00745c65
     3a0:	5c736c6f 	ldclpl	12, cr6, [r3], #-444	; 0xfffffe44
     3a4:	2d636367 	stclcs	3, cr6, [r3, #-412]!	; 0xfffffe64
     3a8:	5c6d7261 	sfmpl	f7, 2, [sp], #-388	; 0xfffffe7c
     3ac:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
     3b0:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
     3b4:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
     3b8:	6e695c69 	cdpvs	12, 6, cr5, cr9, cr9, {3}
     3bc:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
     3c0:	79735c65 	ldmdbvc	r3!, {r0, r2, r5, r6, sl, fp, ip, lr}^
     3c4:	2e2e0073 	mcrcs	0, 1, r0, cr14, cr3, {3}
     3c8:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
     3cc:	4d54532f 	ldclmi	3, cr5, [r4, #-188]	; 0xffffff44
     3d0:	34463233 	strbcc	r3, [r6], #-563	; 0xfffffdcd
     3d4:	62696c5f 	rsbvs	r6, r9, #24320	; 0x5f00
     3d8:	534d432f 	movtpl	r4, #54063	; 0xd32f
     3dc:	692f5349 	stmdbvs	pc!, {r0, r3, r6, r8, r9, ip, lr}	; <UNPREDICTABLE>
     3e0:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
     3e4:	2e006564 	cfsh32cs	mvfx6, mvfx0, #52
     3e8:	696c2f2e 	stmdbvs	ip!, {r1, r2, r3, r5, r8, r9, sl, fp, sp}^
     3ec:	54532f62 	ldrbpl	r2, [r3], #-3938	; 0xfffff09e
     3f0:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
     3f4:	696c5f34 	stmdbvs	ip!, {r2, r4, r5, r8, r9, sl, fp, ip, lr}^
     3f8:	54532f62 	ldrbpl	r2, [r3], #-3938	; 0xfffff09e
     3fc:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
     400:	5f787834 	svcpl	0x00787834
     404:	50647453 	rsbpl	r7, r4, r3, asr r4
     408:	70697265 	rsbvc	r7, r9, r5, ror #4
     40c:	72445f68 	subvc	r5, r4, #104, 30	; 0x1a0
     410:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
     414:	636e692f 	cmnvs	lr, #770048	; 0xbc000
     418:	74730000 	ldrbtvc	r0, [r3], #-0
     41c:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
     420:	5f787834 	svcpl	0x00787834
     424:	2e6e6163 	powcsez	f6, f6, f3
     428:	00010063 	andeq	r0, r1, r3, rrx
     42c:	65645f00 	strbvs	r5, [r4, #-3840]!	; 0xfffff100
     430:	6c756166 	ldfvse	f6, [r5], #-408	; 0xfffffe68
     434:	79745f74 	ldmdbvc	r4!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
     438:	2e736570 	mrccs	5, 3, r6, cr3, cr0, {3}
     43c:	00020068 	andeq	r0, r2, r8, rrx
     440:	74735f00 	ldrbtvc	r5, [r3], #-3840	; 0xfffff100
     444:	746e6964 	strbtvc	r6, [lr], #-2404	; 0xfffff69c
     448:	0300682e 	movweq	r6, #2094	; 0x82e
     44c:	6f630000 	svcvs	0x00630000
     450:	635f6572 	cmpvs	pc, #478150656	; 0x1c800000
     454:	682e346d 	stmdavs	lr!, {r0, r2, r3, r5, r6, sl, ip, sp}
     458:	00000400 	andeq	r0, r0, r0, lsl #8
     45c:	74737973 	ldrbtvc	r7, [r3], #-2419	; 0xfffff68d
     460:	735f6d65 	cmpvc	pc, #6464	; 0x1940
     464:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
     468:	78783466 	ldmdavc	r8!, {r1, r2, r5, r6, sl, ip, sp}^
     46c:	0500682e 	streq	r6, [r0, #-2094]	; 0xfffff7d2
     470:	74730000 	ldrbtvc	r0, [r3], #-0
     474:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
     478:	2e787834 	mrccs	8, 3, r7, cr8, cr4, {1}
     47c:	00050068 	andeq	r0, r5, r8, rrx
     480:	6d747300 	ldclvs	3, cr7, [r4, #-0]
     484:	34663233 	strbtcc	r3, [r6], #-563	; 0xfffffdcd
     488:	635f7878 	cmpvs	pc, #120, 16	; 0x780000
     48c:	682e6e61 	stmdavs	lr!, {r0, r5, r6, r9, sl, fp, sp, lr}
     490:	00000500 	andeq	r0, r0, r0, lsl #10
     494:	02050000 	andeq	r0, r5, #0
     498:	20000798 	mulcs	r0, r8, r7
     49c:	0101a703 	tsteq	r1, r3, lsl #14
     4a0:	03684d4e 	cmneq	r8, #4992	; 0x1380
     4a4:	681b661b 	ldmdavs	fp, {r0, r1, r3, r4, r9, sl, sp, lr}
     4a8:	740d0369 	strvc	r0, [sp], #-873	; 0xfffffc97
     4ac:	10034b59 	andne	r4, r3, r9, asr fp
     4b0:	2269772e 	rsbcs	r7, r9, #12058624	; 0xb80000
     4b4:	0402003a 	streq	r0, [r2], #-58	; 0xffffffc6
     4b8:	06660601 	strbteq	r0, [r6], -r1, lsl #12
     4bc:	4c5d6850 	mrrcmi	8, 5, r6, sp, cr0
     4c0:	784c7878 	stmdavc	ip, {r3, r4, r5, r6, fp, ip, sp, lr}^
     4c4:	78784c78 	ldmdavc	r8!, {r3, r4, r5, r6, sl, fp, lr}^
     4c8:	4c78784c 	ldclmi	8, cr7, [r8], #-304	; 0xfffffed0
     4cc:	784c7878 	stmdavc	ip, {r3, r4, r5, r6, fp, ip, sp, lr}^
     4d0:	223b3d78 	eorscs	r3, fp, #120, 26	; 0x1e00
     4d4:	223b223b 	eorscs	r2, fp, #-1342177277	; 0xb0000003
     4d8:	77351d3b 			; <UNDEFINED> instruction: 0x77351d3b
     4dc:	003a2230 	eorseq	r2, sl, r0, lsr r2
     4e0:	06010402 	streq	r0, [r1], -r2, lsl #8
     4e4:	68500666 	ldmdavs	r0, {r1, r2, r5, r6, r9, sl}^
     4e8:	033d4f5c 	teqeq	sp, #92, 30	; 0x170
     4ec:	4b7400e9 	blmi	1d00898 <startup-0x1e2ff768>
     4f0:	afa16936 	svcge	0x00a16936
     4f4:	3a3db14d 	bcc	f6ca30 <startup-0x1f0935d0>
     4f8:	3d512d4b 	ldclcc	13, cr2, [r1, #-300]	; 0xfffffed4
     4fc:	6b2d4b3a 	blvs	b531ec <startup-0x1f4ace14>
     500:	3a3da14d 	bcc	f68a3c <startup-0x1f0975c4>
     504:	3d4f2d4b 	stclcc	13, cr2, [pc, #-300]	; 3e0 <startup-0x1ffffc20>
     508:	6c2d4b3a 			; <UNDEFINED> instruction: 0x6c2d4b3a
     50c:	4da2bf4d 	stcmi	15, cr11, [r2, #308]!	; 0x134
     510:	4ca24daf 	stcmi	13, cr4, [r2], #700	; 0x2bc
     514:	0903ada2 	stmdbeq	r3, {r1, r5, r7, r8, sl, fp, sp, pc}
     518:	3f3f4e66 	svccc	0x003f4e66
     51c:	3f3f3f3f 	svccc	0x003f3f3f
     520:	3f3f3f3f 	svccc	0x003f3f3f
     524:	4a1f033d 	bmi	7c1220 <startup-0x1f83ede0>
     528:	bd9fa16b 	ldfltd	f2, [pc, #428]	; 6dc <startup-0x1ffff924>
     52c:	820d03ad 	andhi	r0, sp, #-1275068414	; 0xb4000002
     530:	1e7b4d79 	mrcne	13, 3, r4, cr11, cr9, {3}
     534:	74100368 	ldrvc	r0, [r0], #-872	; 0xfffffc98
     538:	bb694d78 	bllt	1a53b20 <startup-0x1e5ac4e0>
     53c:	ba0c03bb 	blt	301430 <startup-0x1fcfebd0>
     540:	77207903 	strvc	r7, [r0, -r3, lsl #18]!
     544:	03aeadad 			; <UNDEFINED> instruction: 0x03aeadad
     548:	5259661f 	subspl	r6, r9, #32505856	; 0x1f00000
     54c:	5a925a92 	bpl	fe496f9c <GPIO_Ports+0xde493194>
     550:	694d5c92 	stmdbvs	sp, {r1, r4, r7, sl, fp, ip, lr}^
     554:	2d9f4de5 	ldccs	13, cr4, [pc, #916]	; 8f0 <startup-0x1ffff710>
     558:	222d9f96 	eorcs	r9, sp, #600	; 0x258
     55c:	757a1f2d 	ldrbvc	r1, [sl, #-3885]!	; 0xfffff0d3
     560:	3f082f08 	svccc	0x00082f08
     564:	3b223b3d 	blcc	88f260 <startup-0x1f770da0>
     568:	2c303922 			; <UNDEFINED> instruction: 0x2c303922
     56c:	223b3d78 	eorscs	r3, fp, #120, 26	; 0x1e00
     570:	3039223b 	eorscc	r2, r9, fp, lsr r2
     574:	3dd8792c 	vldrcc.16	s15, [r8, #88]	; 0x58	; <UNPREDICTABLE>
     578:	754a0b03 	strbvc	r0, [sl, #-2819]	; 0xfffff4fd
     57c:	22598534 	subscs	r8, r9, #52, 10	; 0xd000000
     580:	22592259 	subscs	r2, r9, #-1879048187	; 0x90000005
     584:	9308222f 	movwls	r2, #33327	; 0x822f
     588:	212f222f 			; <UNDEFINED> instruction: 0x212f222f
     58c:	222f212f 	eorcs	r2, pc, #-1073741813	; 0xc000000b
     590:	212f212f 			; <UNDEFINED> instruction: 0x212f212f
     594:	222f212f 	eorcs	r2, pc, #-1073741813	; 0xc000000b
     598:	080a032f 	stmdaeq	sl, {r0, r1, r2, r3, r5, r8, r9}
     59c:	09037912 	stmdbeq	r3, {r1, r4, r8, fp, ip, sp, lr}
     5a0:	20790382 	rsbscs	r0, r9, r2, lsl #7
     5a4:	21752167 	cmncs	r5, r7, ror #2
     5a8:	20032475 	andcs	r2, r3, r5, ror r4
     5ac:	4cbb954a 	cfldr32mi	mvfx9, [fp], #296	; 0x128
     5b0:	d8cabdcc 	stmiale	sl, {r2, r3, r6, r7, r8, sl, fp, ip, sp, pc}^
     5b4:	c9c9bbca 	stmibgt	r9, {r1, r3, r6, r7, r8, r9, fp, ip, sp, pc}^
     5b8:	c9c9bbc9 	stmibgt	r9, {r0, r3, r6, r7, r8, r9, fp, ip, sp, pc}^
     5bc:	1e6d4ccb 	cdpne	12, 6, cr4, cr13, cr11, {6}
     5c0:	4a0a0368 	bmi	281368 <startup-0x1fd7ec98>
     5c4:	1e6d4c79 	mcrne	12, 3, r4, cr13, cr9, {3}
     5c8:	4a0a0368 	bmi	281370 <startup-0x1fd7ec90>
     5cc:	924c4e75 	subls	r4, ip, #1872	; 0x750
     5d0:	3d4c944c 	cfstrdcc	mvd9, [ip, #-304]	; 0xfffffed0
     5d4:	754a2003 	strbvc	r2, [sl, #-3]
     5d8:	854d344d 	strbhi	r3, [sp, #-1101]	; 0xfffffbb3
     5dc:	02003a22 	andeq	r3, r0, #139264	; 0x22000
     5e0:	66060104 	strvs	r0, [r6], -r4, lsl #2
     5e4:	5c684006 	stclpl	0, cr4, [r8], #-24	; 0xffffffe8
     5e8:	22774d5b 	rsbscs	r4, r7, #5824	; 0x16c0
     5ec:	0402003a 	streq	r0, [r2], #-58	; 0xffffffc6
     5f0:	06580601 	ldrbeq	r0, [r8], -r1, lsl #12
     5f4:	5b5c5a40 	blpl	1716efc <startup-0x1e8e9104>
     5f8:	3a22854d 	bcc	8a1b34 <startup-0x1f75e4cc>
     5fc:	01040200 	mrseq	r0, R12_usr
     600:	40066606 	andmi	r6, r6, r6, lsl #12
     604:	4d5d5c68 	ldclmi	12, cr5, [sp, #-416]	; 0xfffffe60
     608:	6609033d 			; <UNDEFINED> instruction: 0x6609033d
     60c:	6985504b 	stmibvs	r5, {r0, r1, r3, r6, ip, lr}
     610:	09033d4d 	stmdbeq	r3, {r0, r2, r3, r6, r8, sl, fp, ip, sp}
     614:	502f4b4a 	eorpl	r4, pc, sl, asr #22
     618:	003a2277 	eorseq	r2, sl, r7, ror r2
     61c:	06010402 	streq	r0, [r1], -r2, lsl #8
     620:	69400666 	stmdbvs	r0, {r1, r2, r5, r6, r9, sl}^
     624:	28033d4d 	stmdacs	r3, {r0, r2, r3, r6, r8, sl, fp, ip, sp}
     628:	85504b66 	ldrbhi	r4, [r0, #-2918]	; 0xfffff49a
     62c:	4a0f033d 	bmi	3c1328 <startup-0x1fc3ecd8>
     630:	2f5b504b 	svccs	0x005b504b
     634:	4b4a0a03 	blmi	1282e48 <startup-0x1ed7d1b8>
     638:	032f5b50 			; <UNDEFINED> instruction: 0x032f5b50
     63c:	7a4a01c3 	bvc	1280d50 <startup-0x1ed7f2b0>
     640:	761e6d4d 	ldrvc	r6, [lr], -sp, asr #26
     644:	594a1903 	stmdbpl	sl, {r0, r1, r8, fp, ip}^
     648:	5d775b51 	fldmdbxpl	r7!, {d21-d60}	;@ Deprecated
     64c:	5d775b5b 	fldmdbxpl	r7!, {d21-d65}	;@ Deprecated
     650:	5d775b5b 	fldmdbxpl	r7!, {d21-d65}	;@ Deprecated
     654:	5d775b5b 	fldmdbxpl	r7!, {d21-d65}	;@ Deprecated
     658:	4e5d775e 	mrcmi	7, 2, r7, cr13, cr14, {2}
     65c:	4a15033d 	bmi	541358 <startup-0x1fabeca8>
     660:	034d3359 	movteq	r3, #54105	; 0xd359
     664:	69033c1b 	stmdbvs	r3, {r0, r1, r3, r4, sl, fp, ip, sp}
     668:	035b4c20 	cmpeq	fp, #32, 24	; 0x2000
     66c:	70033c12 	andvc	r3, r3, r2, lsl ip
     670:	0d035b20 	vstreq	d5, [r3, #-128]	; 0xffffff80
     674:	2075033c 	rsbscs	r0, r5, ip, lsr r3
     678:	3f1d445b 	svccc	0x001d445b
     67c:	59741903 	ldmdbpl	r4!, {r0, r1, r8, fp, ip}^
     680:	3b026950 	blcc	9abc8 <startup-0x1ff65438>
     684:	9f23ad16 	svcls	0x0023ad16
     688:	9f239f23 	svcls	0x00239f23
     68c:	9f239f23 	svcls	0x00239f23
     690:	9f239f23 	svcls	0x00239f23
     694:	9f239f23 	svcls	0x00239f23
     698:	9f239f23 	svcls	0x00239f23
     69c:	9f239f23 	svcls	0x00239f23
     6a0:	4e344b23 	vaddmi.f64	d4, d4, d19
     6a4:	6617033d 			; <UNDEFINED> instruction: 0x6617033d
     6a8:	f23b035d 	vcge.s<illegal width 64>	q0, <illegal reg q5.5>, <illegal reg q6.5>
     6ac:	03204503 			; <UNDEFINED> instruction: 0x03204503
     6b0:	45034a3b 	strmi	r4, [r3, #-2619]	; 0xfffff5c5
     6b4:	f23b0320 	vcgt.s<illegal width 64>	d0, d11, d16
     6b8:	03204503 			; <UNDEFINED> instruction: 0x03204503
     6bc:	4903ba3b 	stmdbmi	r3, {r0, r1, r3, r4, r5, r9, fp, ip, sp, pc}
     6c0:	3d233d20 	stccc	13, cr3, [r3, #-128]!	; 0xffffff80
     6c4:	3d233d23 	stccc	13, cr3, [r3, #-140]!	; 0xffffff74
     6c8:	3d233d23 	stccc	13, cr3, [r3, #-140]!	; 0xffffff74
     6cc:	3e233d23 	cdpcc	13, 2, cr3, cr3, cr3, {1}
     6d0:	3e233e23 	cdpcc	14, 2, cr3, cr3, cr3, {1}
     6d4:	233d3e23 	teqcs	sp, #560	; 0x230
     6d8:	03243e3e 			; <UNDEFINED> instruction: 0x03243e3e
     6dc:	4c59740c 	cfldrdmi	mvd7, [r9], {12}
     6e0:	3d4c5d4d 	stclcc	13, cr5, [ip, #-308]	; 0xfffffecc
     6e4:	01000402 	tsteq	r0, r2, lsl #8
     6e8:	0005d001 	andeq	sp, r5, r1
     6ec:	2a000200 	bcs	ef4 <startup-0x1ffff10c>
     6f0:	02000002 	andeq	r0, r0, #2
     6f4:	0d0efb01 	vstreq	d15, [lr, #-4]
     6f8:	01010100 	mrseq	r0, (UNDEF: 17)
     6fc:	00000001 	andeq	r0, r0, r1
     700:	01000001 	tsteq	r0, r1
     704:	6c2f2e2e 	stcvs	14, cr2, [pc], #-184	; 654 <startup-0x1ffff9ac>
     708:	532f6269 			; <UNDEFINED> instruction: 0x532f6269
     70c:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
     710:	6c5f3446 	cfldrdvs	mvd3, [pc], {70}	; 0x46
     714:	432f6269 			; <UNDEFINED> instruction: 0x432f6269
     718:	5349534d 	movtpl	r5, #37709	; 0x934d
     71c:	636e692f 	cmnvs	lr, #770048	; 0xbc000
     720:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
     724:	2f2e2e00 	svccs	0x002e2e00
     728:	2f62696c 	svccs	0x0062696c
     72c:	334d5453 	movtcc	r5, #54355	; 0xd453
     730:	5f344632 	svcpl	0x00344632
     734:	2f62696c 	svccs	0x0062696c
     738:	334d5453 	movtcc	r5, #54355	; 0xd453
     73c:	78344632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, lr}
     740:	74535f78 	ldrbvc	r5, [r3], #-3960	; 0xfffff088
     744:	72655064 	rsbvc	r5, r5, #100	; 0x64
     748:	5f687069 	svcpl	0x00687069
     74c:	76697244 	strbtvc	r7, [r9], -r4, asr #4
     750:	732f7265 			; <UNDEFINED> instruction: 0x732f7265
     754:	43006372 	movwmi	r6, #882	; 0x372
     758:	73552f3a 	cmpvc	r5, #58, 30	; 0xe8
     75c:	2f737265 	svccs	0x00737265
     760:	6d616441 	cfstrdvs	mvd6, [r1, #-260]!	; 0xfffffefc
     764:	6e4f2f74 	mcrvs	15, 2, r2, cr15, cr4, {3}
     768:	69724465 	ldmdbvs	r2!, {r0, r2, r5, r6, sl, lr}^
     76c:	442f6576 	strtmi	r6, [pc], #-1398	; 774 <startup-0x1ffff88c>
     770:	6d756b6f 	fldmdbxvs	r5!, {d22-d76}	;@ Deprecated
     774:	2f746e65 	svccs	0x00746e65
     778:	48746947 	ldmdami	r4!, {r0, r1, r2, r6, r8, fp, sp, lr}^
     77c:	442f6275 	strtmi	r6, [pc], #-629	; 784 <startup-0x1ffff87c>
     780:	39325441 	ldmdbcc	r2!, {r0, r6, sl, ip, lr}
     784:	614c2d30 	cmpvs	ip, r0, lsr sp
     788:	79736d72 	ldmdbvc	r3!, {r1, r4, r5, r6, r8, sl, fp, sp, lr}^
     78c:	6d657473 	cfstrdvs	mvd7, [r5, #-460]!	; 0xfffffe34
     790:	646f6b2f 	strbtvs	r6, [pc], #-2863	; 798 <startup-0x1ffff868>
     794:	6f6f442f 	svcvs	0x006f442f
     798:	2e2e0072 	mcrcs	0, 1, r0, cr14, cr2, {3}
     79c:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
     7a0:	4d54532f 	ldclmi	3, cr5, [r4, #-188]	; 0xffffff44
     7a4:	34463233 	strbcc	r3, [r6], #-563	; 0xfffffdcd
     7a8:	62696c5f 	rsbvs	r6, r9, #24320	; 0x5f00
     7ac:	4d54532f 	ldclmi	3, cr5, [r4, #-188]	; 0xffffff44
     7b0:	34463233 	strbcc	r3, [r6], #-563	; 0xfffffdcd
     7b4:	535f7878 	cmppl	pc, #120, 16	; 0x780000
     7b8:	65506474 	ldrbvs	r6, [r0, #-1140]	; 0xfffffb8c
     7bc:	68706972 	ldmdavs	r0!, {r1, r4, r5, r6, r8, fp, sp, lr}^
     7c0:	6972445f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, sl, lr}^
     7c4:	2f726576 	svccs	0x00726576
     7c8:	00636e69 	rsbeq	r6, r3, r9, ror #28
     7cc:	635c3a63 	cmpvs	ip, #405504	; 0x63000
     7d0:	70616573 	rsbvc	r6, r1, r3, ror r5
     7d4:	6f635c70 	svcvs	0x00635c70
     7d8:	696c6564 	stmdbvs	ip!, {r2, r5, r6, r8, sl, sp, lr}^
     7dc:	745c6574 	ldrbvc	r6, [ip], #-1396	; 0xfffffa8c
     7e0:	736c6f6f 	cmnvc	ip, #444	; 0x1bc
     7e4:	6363675c 	cmnvs	r3, #92, 14	; 0x1700000
     7e8:	6d72612d 	ldfvse	f6, [r2, #-180]!	; 0xffffff4c
     7ec:	6d72615c 	ldfvse	f6, [r2, #-368]!	; 0xfffffe90
     7f0:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
     7f4:	61652d65 	cmnvs	r5, r5, ror #26
     7f8:	695c6962 	ldmdbvs	ip, {r1, r5, r6, r8, fp, sp, lr}^
     7fc:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
     800:	6d5c6564 	cfldr64vs	mvdx6, [ip, #-400]	; 0xfffffe70
     804:	69686361 	stmdbvs	r8!, {r0, r5, r6, r8, r9, sp, lr}^
     808:	6300656e 	movwvs	r6, #1390	; 0x56e
     80c:	73635c3a 	cmnvc	r3, #14848	; 0x3a00
     810:	70706165 	rsbsvc	r6, r0, r5, ror #2
     814:	646f635c 	strbtvs	r6, [pc], #-860	; 81c <startup-0x1ffff7e4>
     818:	74696c65 	strbtvc	r6, [r9], #-3173	; 0xfffff39b
     81c:	6f745c65 	svcvs	0x00745c65
     820:	5c736c6f 	ldclpl	12, cr6, [r3], #-444	; 0xfffffe44
     824:	2d636367 	stclcs	3, cr6, [r3, #-412]!	; 0xfffffe64
     828:	5c6d7261 	sfmpl	f7, 2, [sp], #-388	; 0xfffffe7c
     82c:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
     830:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
     834:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
     838:	6e695c69 	cdpvs	12, 6, cr5, cr9, cr9, {3}
     83c:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
     840:	79735c65 	ldmdbvc	r3!, {r0, r2, r5, r6, sl, fp, ip, lr}^
     844:	2e2e0073 	mcrcs	0, 1, r0, cr14, cr3, {3}
     848:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
     84c:	6f630000 	svcvs	0x00630000
     850:	635f6572 	cmpvs	pc, #478150656	; 0x1c800000
     854:	682e346d 	stmdavs	lr!, {r0, r2, r3, r5, r6, sl, ip, sp}
     858:	00000100 	andeq	r0, r0, r0, lsl #2
     85c:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
     860:	78346632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, sp, lr}
     864:	63725f78 	cmnvs	r2, #120, 30	; 0x1e0
     868:	00632e63 	rsbeq	r2, r3, r3, ror #28
     86c:	69000002 	stmdbvs	r0, {r1}
     870:	2e74696e 	vsubcs.f16	s13, s8, s29	; <UNPREDICTABLE>
     874:	00030068 	andeq	r0, r3, r8, rrx
     878:	61747300 	cmnvs	r4, r0, lsl #6
     87c:	70757472 	rsbsvc	r7, r5, r2, ror r4
     880:	0300632e 	movweq	r6, #814	; 0x32e
     884:	74730000 	ldrbtvc	r0, [r3], #-0
     888:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
     88c:	2e787834 	mrccs	8, 3, r7, cr8, cr4, {1}
     890:	00040068 	andeq	r0, r4, r8, rrx
     894:	65645f00 	strbvs	r5, [r4, #-3840]!	; 0xfffff100
     898:	6c756166 	ldfvse	f6, [r5], #-408	; 0xfffffe68
     89c:	79745f74 	ldmdbvc	r4!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
     8a0:	2e736570 	mrccs	5, 3, r6, cr3, cr0, {3}
     8a4:	00050068 	andeq	r0, r5, r8, rrx
     8a8:	74735f00 	ldrbtvc	r5, [r3], #-3840	; 0xfffff100
     8ac:	746e6964 	strbtvc	r6, [lr], #-2404	; 0xfffff69c
     8b0:	0600682e 	streq	r6, [r0], -lr, lsr #16
     8b4:	79730000 	ldmdbvc	r3!, {}^	; <UNPREDICTABLE>
     8b8:	6d657473 	cfstrdvs	mvd7, [r5, #-460]!	; 0xfffffe34
     8bc:	6d74735f 	ldclvs	3, cr7, [r4, #-380]!	; 0xfffffe84
     8c0:	34663233 	strbtcc	r3, [r6], #-563	; 0xfffffdcd
     8c4:	682e7878 	stmdavs	lr!, {r3, r4, r5, r6, fp, ip, sp, lr}
     8c8:	00000400 	andeq	r0, r0, r0, lsl #8
     8cc:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
     8d0:	78346632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, sp, lr}
     8d4:	63725f78 	cmnvs	r2, #120, 30	; 0x1e0
     8d8:	00682e63 	rsbeq	r2, r8, r3, ror #28
     8dc:	73000004 	movwvc	r0, #4
     8e0:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
     8e4:	78783466 	ldmdavc	r8!, {r1, r2, r5, r6, sl, ip, sp}^
     8e8:	6970675f 	ldmdbvs	r0!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, sp, lr}^
     8ec:	00682e6f 	rsbeq	r2, r8, pc, ror #28
     8f0:	73000004 	movwvc	r0, #4
     8f4:	74726174 	ldrbtvc	r6, [r2], #-372	; 0xfffffe8c
     8f8:	682e7075 	stmdavs	lr!, {r0, r2, r4, r5, r6, ip, sp, lr}
     8fc:	00000300 	andeq	r0, r0, r0, lsl #6
     900:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
     904:	78346632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, sp, lr}
     908:	61635f78 	smcvs	13816	; 0x35f8
     90c:	00682e6e 	rsbeq	r2, r8, lr, ror #28
     910:	63000004 	movwvs	r0, #4
     914:	682e6e61 	stmdavs	lr!, {r0, r5, r6, r9, sl, fp, sp, lr}
     918:	00000700 	andeq	r0, r0, r0, lsl #14
     91c:	02050000 	andeq	r0, r5, #0
     920:	2000196c 	andcs	r1, r0, ip, ror #18
     924:	010cdd03 	tsteq	ip, r3, lsl #26
     928:	1ecd4b75 			; <UNDEFINED> instruction: 0x1ecd4b75
     92c:	00fc03d8 	ldrsbteq	r0, [ip], #56	; 0x38
     930:	02004b90 	andeq	r4, r0, #144, 22	; 0x24000
     934:	58060104 	stmdapl	r6, {r2, r8}
     938:	674b3006 	strbvs	r3, [fp, -r6]
     93c:	04213f3d 	strteq	r3, [r1], #-3901	; 0xfffff0c3
     940:	73f70302 	mvnsvc	r0, #134217728	; 0x8000000
     944:	3f693082 	svccc	0x00693082
     948:	4e4f4069 	cdpmi	0, 4, cr4, cr15, cr9, {3}
     94c:	03503f69 	cmpeq	r0, #420	; 0x1a4
     950:	3f6be417 	svccc	0x006be417
     954:	740f034b 	strvc	r0, [pc], #-843	; 95c <startup-0x1ffff6a4>
     958:	003d2f3d 	eorseq	r2, sp, sp, lsr pc
     95c:	40020402 	andmi	r0, r2, r2, lsl #8
     960:	02040200 	andeq	r0, r4, #0, 4
     964:	04020067 	streq	r0, [r2], #-103	; 0xffffff99
     968:	02003d02 	andeq	r3, r0, #2, 26	; 0x80
     96c:	58060104 	stmdapl	r6, {r2, r8}
     970:	4e5a4c06 	cdpmi	12, 5, cr4, cr10, cr6, {0}
     974:	0b032f3e 	bleq	cc674 <startup-0x1ff3398c>
     978:	3f32674a 	svccc	0x0032674a
     97c:	033d694d 	teqeq	sp, #1261568	; 0x134000
     980:	4b6a7415 	blmi	1a9d9dc <startup-0x1e562624>
     984:	6c661403 	cfstrdvs	mvd1, [r6], #-12
     988:	0b033f3f 	bleq	d068c <startup-0x1ff2f974>
     98c:	20790366 	rsbscs	r0, r9, r6, ror #6
     990:	243d233d 	ldrtcs	r2, [sp], #-829	; 0xfffffcc3
     994:	6a740f03 	bvs	1d045a8 <startup-0x1e2fba58>
     998:	00de034b 	sbcseq	r0, lr, fp, asr #6
     99c:	2dbb7c66 	ldccs	12, cr7, [fp, #408]!	; 0x198
     9a0:	660e033e 			; <UNDEFINED> instruction: 0x660e033e
     9a4:	1a034b69 	bne	d3750 <startup-0x1ff2c8b0>
     9a8:	03835d66 	orreq	r5, r3, #6528	; 0x1980
     9ac:	69740185 	ldmdbvs	r4!, {r0, r2, r7, r8}^
     9b0:	00e9034b 	rsceq	r0, r9, fp, asr #6
     9b4:	03ad6c66 			; <UNDEFINED> instruction: 0x03ad6c66
     9b8:	4b69740d 	blmi	1a5d9f4 <startup-0x1e5a260c>
     9bc:	69660e03 	stmdbvs	r6!, {r0, r1, r9, sl, fp}^
     9c0:	6615034b 	ldrvs	r0, [r5], -fp, asr #6
     9c4:	4d3f3459 	cfldrsmi	mvf3, [pc, #-356]!	; 868 <startup-0x1ffff798>
     9c8:	18034169 	stmdane	r3, {r0, r3, r5, r6, r8, lr}
     9cc:	3f345990 	svccc	0x00345990
     9d0:	0341694d 	movteq	r6, #6477	; 0x194d
     9d4:	4b7401b3 	blmi	1d010a8 <startup-0x1e2fef58>
     9d8:	4d4d3f33 	stclmi	15, cr3, [sp, #-204]	; 0xffffff34
     9dc:	660d033d 			; <UNDEFINED> instruction: 0x660d033d
     9e0:	1703672f 	strne	r6, [r3, -pc, lsr #14]
     9e4:	3f334b66 	svccc	0x00334b66
     9e8:	033d4d4d 	teqeq	sp, #4928	; 0x1340
     9ec:	334b660f 	movtcc	r6, #46607	; 0xb60f
     9f0:	3d4d4d3f 	stclcc	13, cr4, [sp, #-252]	; 0xffffff04
     9f4:	4b820f03 	blmi	fe084608 <GPIO_Ports+0xde080800>
     9f8:	5b4d3f33 	blpl	13506cc <startup-0x1ecaf934>
     9fc:	9024033d 	eorls	r0, r4, sp, lsr r3
     a00:	775ac04b 	ldrbvc	ip, [sl, -fp, asr #32]
     a04:	263d223d 			; <UNDEFINED> instruction: 0x263d223d
     a08:	db3f5a67 	blle	fd73ac <startup-0x1f028c54>
     a0c:	038383cb 	orreq	r8, r3, #738197507	; 0x2c000003
     a10:	253d201b 	ldrcs	r2, [sp, #-27]!	; 0xffffffe5
     a14:	69683d59 	stmdbvs	r8!, {r0, r3, r4, r6, r8, sl, fp, ip, sp}^
     a18:	69683d67 	stmdbvs	r8!, {r0, r1, r2, r5, r6, r8, sl, fp, ip, sp}^
     a1c:	67683d67 	strbvs	r3, [r8, -r7, ror #26]!
     a20:	4bba3f03 	blmi	fee90634 <GPIO_Ports+0xdee8c82c>
     a24:	4d3f8433 	cfldrsmi	mvf8, [pc, #-204]!	; 960 <startup-0x1ffff6a0>
     a28:	03834069 	orreq	r4, r3, #105	; 0x69
     a2c:	4b6a9e0a 	blmi	1aa825c <startup-0x1e557da4>
     a30:	69660c03 	stmdbvs	r6!, {r0, r1, sl, fp}^
     a34:	01b8034b 			; <UNDEFINED> instruction: 0x01b8034b
     a38:	033d4e66 	teqeq	sp, #1632	; 0x660
     a3c:	334b7416 	movtcc	r7, #46102	; 0xb416
     a40:	4b4d4d4d 	blmi	1353f7c <startup-0x1ecac084>
     a44:	4b821403 	blmi	fe085a58 <GPIO_Ports+0xde081c50>
     a48:	4d4d4d33 	stclmi	13, cr4, [sp, #-204]	; 0xffffff34
     a4c:	8211034b 	andshi	r0, r1, #738197505	; 0x2c000001
     a50:	4d4d334b 	stclmi	3, cr3, [sp, #-300]	; 0xfffffed4
     a54:	10034b5b 	andne	r4, r3, fp, asr fp
     a58:	4d334b74 	vldmdbmi	r3!, {d4-<overflow reg d61>}
     a5c:	034b694d 	movteq	r6, #47437	; 0xb94d
     a60:	4b8200d3 	blmi	fe080db4 <GPIO_Ports+0xde07cfac>
     a64:	4d4d4d33 	stclmi	13, cr4, [sp, #-204]	; 0xffffff34
     a68:	00f0034b 	rscseq	r0, r0, fp, asr #6
     a6c:	033d4e82 	teqeq	sp, #2080	; 0x820
     a70:	4c797425 	cfldrdmi	mvd7, [r9], #-148	; 0xffffff6c
     a74:	03761e6c 	cmneq	r6, #108, 28	; 0x6c0
     a78:	4c797413 	cfldrdmi	mvd7, [r9], #-76	; 0xffffffb4
     a7c:	03761e6c 	cmneq	r6, #108, 28	; 0x6c0
     a80:	4c797411 	cfldrdmi	mvd7, [r9], #-68	; 0xffffffbc
     a84:	03761e6c 	cmneq	r6, #108, 28	; 0x6c0
     a88:	4c79742c 	cfldrdmi	mvd7, [r9], #-176	; 0xffffff50
     a8c:	03761e6c 	cmneq	r6, #108, 28	; 0x6c0
     a90:	4c797427 	cfldrdmi	mvd7, [r9], #-156	; 0xffffff64
     a94:	03761e6c 	cmneq	r6, #108, 28	; 0x6c0
     a98:	4c79741d 	cfldrdmi	mvd7, [r9], #-116	; 0xffffff8c
     a9c:	03761e6c 	cmneq	r6, #108, 28	; 0x6c0
     aa0:	4c797410 	cfldrdmi	mvd7, [r9], #-64	; 0xffffffc0
     aa4:	03761e6c 	cmneq	r6, #108, 28	; 0x6c0
     aa8:	4c79740e 	cfldrdmi	mvd7, [r9], #-56	; 0xffffffc8
     aac:	03761e6c 	cmneq	r6, #108, 28	; 0x6c0
     ab0:	4c787429 	cfldrdmi	mvd7, [r8], #-164	; 0xffffff5c
     ab4:	03761e6c 	cmneq	r6, #108, 28	; 0x6c0
     ab8:	4c787423 	cfldrdmi	mvd7, [r8], #-140	; 0xffffff74
     abc:	03761e6c 	cmneq	r6, #108, 28	; 0x6c0
     ac0:	4c787425 	cfldrdmi	mvd7, [r8], #-148	; 0xffffff6c
     ac4:	03761e6c 	cmneq	r6, #108, 28	; 0x6c0
     ac8:	4c787414 	cfldrdmi	mvd7, [r8], #-80	; 0xffffffb0
     acc:	03761e6c 	cmneq	r6, #108, 28	; 0x6c0
     ad0:	4c787412 	cfldrdmi	mvd7, [r8], #-72	; 0xffffffb8
     ad4:	03761e6c 	cmneq	r6, #108, 28	; 0x6c0
     ad8:	4c78742d 	cfldrdmi	mvd7, [r8], #-180	; 0xffffff4c
     adc:	03761e6c 	cmneq	r6, #108, 28	; 0x6c0
     ae0:	4c787428 	cfldrdmi	mvd7, [r8], #-160	; 0xffffff60
     ae4:	03761e6c 	cmneq	r6, #108, 28	; 0x6c0
     ae8:	4c6a740c 	cfstrdmi	mvd7, [sl], #-48	; 0xffffffd0
     aec:	03681e6c 	cmneq	r8, #108, 28	; 0x6c0
     af0:	947402ac 	ldrbtls	r0, [r4], #-684	; 0xfffffd54
     af4:	ae1e974d 	cdpge	7, 1, cr9, cr14, cr13, {2}
     af8:	67661703 	strbvs	r1, [r6, -r3, lsl #14]!
     afc:	59502f2f 	ldmdbpl	r0, {r0, r1, r2, r3, r5, r8, r9, sl, fp, sp}^
     b00:	4e3e4c3e 	mrcmi	12, 1, r4, cr14, cr14, {1}
     b04:	5c765940 			; <UNDEFINED> instruction: 0x5c765940
     b08:	0a033d4d 	beq	d0044 <startup-0x1ff2ffbc>
     b0c:	03753066 	cmneq	r5, #102	; 0x66
     b10:	50675811 	rsbpl	r5, r7, r1, lsl r8
     b14:	3d4d5c68 	stclcc	12, cr5, [sp, #-416]	; 0xfffffe60
     b18:	6c661103 	stfvse	f1, [r6], #-12
     b1c:	0303044b 	movweq	r0, #13387	; 0x344b
     b20:	4066679d 	mlsmi	r6, sp, r7, r6
     b24:	3d3d4b4b 	fldmdbxcc	sp!, {d4-d40}	;@ Deprecated
     b28:	4b693d3d 	blmi	1a50024 <startup-0x1e5affdc>
     b2c:	693d3d3d 	ldmdbvs	sp!, {r0, r2, r3, r4, r5, r8, sl, fp, ip, sp}
     b30:	3d3d4b4b 	fldmdbxcc	sp!, {d4-d40}	;@ Deprecated
     b34:	4b693d3d 	blmi	1a50030 <startup-0x1e5affd0>
     b38:	693d3d3d 	ldmdbvs	sp!, {r0, r2, r3, r4, r5, r8, sl, fp, ip, sp}
     b3c:	3d3d4b4b 	fldmdbxcc	sp!, {d4-d40}	;@ Deprecated
     b40:	4b693d3d 	blmi	1a5003c <startup-0x1e5affc4>
     b44:	693d3d3d 	ldmdbvs	sp!, {r0, r2, r3, r4, r5, r8, sl, fp, ip, sp}
     b48:	3d3d4b4b 	fldmdbxcc	sp!, {d4-d40}	;@ Deprecated
     b4c:	4b693d3d 	blmi	1a50048 <startup-0x1e5affb8>
     b50:	693d3d3d 	ldmdbvs	sp!, {r0, r2, r3, r4, r5, r8, sl, fp, ip, sp}
     b54:	3d3d4b4b 	fldmdbxcc	sp!, {d4-d40}	;@ Deprecated
     b58:	04673d3d 	strbteq	r3, [r7], #-3389	; 0xfffff2c3
     b5c:	08580304 	ldmdaeq	r8, {r2, r8, r9}^
     b60:	5a592f2e 	bpl	164c820 <startup-0x1e9b37e0>
     b64:	3e683e3e 	mcrcc	14, 3, r3, cr8, cr14, {1}
     b68:	594bad30 	stmdbpl	fp, {r4, r5, r8, sl, fp, sp, pc}^
     b6c:	01040200 	mrseq	r0, R12_usr
     b70:	59062006 	stmdbpl	r6, {r1, r2, sp}
     b74:	3d4b2f76 	stclcc	15, cr2, [fp, #-472]	; 0xfffffe28
     b78:	2f2f3d42 	svccs	0x002f3d42
     b7c:	02002f2f 	andeq	r2, r0, #47, 30	; 0xbc
     b80:	20060104 	andcs	r0, r6, r4, lsl #2
     b84:	3e2f5d06 	cdpcc	13, 2, cr5, cr15, cr6, {0}
     b88:	0200c93e 	andeq	ip, r0, #1015808	; 0xf8000
     b8c:	00390204 	eorseq	r0, r9, r4, lsl #4
     b90:	06010402 	streq	r0, [r1], -r2, lsl #8
     b94:	0402003c 	streq	r0, [r2], #-60	; 0xffffffc4
     b98:	003a0602 	eorseq	r0, sl, r2, lsl #12
     b9c:	06010402 	streq	r0, [r1], -r2, lsl #8
     ba0:	0903063c 	stmdbeq	r3, {r2, r3, r4, r5, r9, sl}
     ba4:	132f023c 			; <UNDEFINED> instruction: 0x132f023c
     ba8:	c93e3e2f 	ldmdbgt	lr!, {r0, r1, r2, r3, r5, r9, sl, fp, ip, sp}
     bac:	7575bbad 	ldrbvc	fp, [r5, #-2989]!	; 0xfffff453
     bb0:	0200a075 	andeq	sl, r0, #117	; 0x75
     bb4:	76030204 	strvc	r0, [r3], -r4, lsl #4
     bb8:	0402003c 	streq	r0, [r2], #-60	; 0xffffffc4
     bbc:	003c0601 	eorseq	r0, ip, r1, lsl #12
     bc0:	06020402 	streq	r0, [r2], -r2, lsl #8
     bc4:	0402003a 	streq	r0, [r2], #-58	; 0xffffffc6
     bc8:	063c0601 	ldrteq	r0, [ip], -r1, lsl #12
     bcc:	673c1103 	ldrvs	r1, [ip, -r3, lsl #2]!
     bd0:	0200774b 	andeq	r7, r0, #19660800	; 0x12c0000
     bd4:	003e0304 	eorseq	r0, lr, r4, lsl #6
     bd8:	f3030402 	vshl.u8	d0, d2, d3
     bdc:	03040200 	movweq	r0, #16896	; 0x4200
     be0:	04020039 	streq	r0, [r2], #-57	; 0xffffffc7
     be4:	063c0601 	ldrteq	r0, [ip], -r1, lsl #12
     be8:	0402006c 	streq	r0, [r2], #-108	; 0xffffff94
     bec:	02005a03 	andeq	r5, r0, #12288	; 0x3000
     bf0:	00f30304 	rscseq	r0, r3, r4, lsl #6
     bf4:	39030402 	stmdbcc	r3, {r1, sl}
     bf8:	01040200 	mrseq	r0, R12_usr
     bfc:	41063c06 	tstmi	r6, r6, lsl #24
     c00:	0402003d 	streq	r0, [r2], #-61	; 0xffffffc3
     c04:	02003e03 	andeq	r3, r0, #3, 28	; 0x30
     c08:	00f00304 	rscseq	r0, r0, r4, lsl #6
     c0c:	06010402 	streq	r0, [r1], -r2, lsl #8
     c10:	4b6a063c 	blmi	1a82508 <startup-0x1e57daf8>
     c14:	03040200 	movweq	r0, #16896	; 0x4200
     c18:	0402003e 	streq	r0, [r2], #-62	; 0xffffffc2
     c1c:	0200f003 	andeq	pc, r0, #3
     c20:	3c060104 	stfccs	f0, [r6], {4}
     c24:	3f5c6c06 	svccc	0x005c6c06
     c28:	e92108a0 	stmdb	r1!, {r5, r7, fp}
     c2c:	3ed89284 	cdpcc	2, 13, cr9, cr8, cr4, {4}
     c30:	01040200 	mrseq	r0, R12_usr
     c34:	08069006 	stmdaeq	r6, {r1, r2, ip, pc}
     c38:	1625025a 			; <UNDEFINED> instruction: 0x1625025a
     c3c:	040200f4 	streq	r0, [r2], #-244	; 0xffffff0c
     c40:	00900601 	addseq	r0, r0, r1, lsl #12
     c44:	08020402 	stmdaeq	r2, {r1, sl}
     c48:	d7920658 			; <UNDEFINED> instruction: 0xd7920658
     c4c:	02040200 	andeq	r0, r4, #0, 4
     c50:	90087303 	andls	r7, r8, r3, lsl #6
     c54:	01040200 	mrseq	r0, R12_usr
     c58:	02003c06 	andeq	r3, r0, #1536	; 0x600
     c5c:	03060204 	movweq	r0, #25092	; 0x6204
     c60:	0200746f 	andeq	r7, r0, #1862270976	; 0x6f000000
     c64:	3c060104 	stfccs	f0, [r6], {4}
     c68:	27030674 	smlsdxcs	r3, r4, r6, r0
     c6c:	594b4b66 	stmdbpl	fp, {r1, r2, r5, r6, r8, r9, fp, lr}^
     c70:	4b923f59 	blmi	fe4909dc <GPIO_Ports+0xde48cbd4>
     c74:	6731312f 	ldrvs	r3, [r1, -pc, lsr #2]!
     c78:	59756759 	ldmdbpl	r5!, {r0, r3, r4, r6, r8, r9, sl, sp, lr}^
     c7c:	835967af 	cmphi	r9, #45875200	; 0x2bc0000
     c80:	4ba05959 	blmi	fe8171ec <GPIO_Ports+0xde8133e4>
     c84:	02006786 	andeq	r6, r0, #35127296	; 0x2180000
     c88:	00670104 	rsbeq	r0, r7, r4, lsl #2
     c8c:	49010402 	stmdbmi	r1, {r1, sl}
     c90:	5b224922 	blpl	893120 <startup-0x1f76cee0>
     c94:	555922bb 	ldrbpl	r2, [r9, #-699]	; 0xfffffd45
     c98:	01040200 	mrseq	r0, R12_usr
     c9c:	50065806 	andpl	r5, r6, r6, lsl #16
     ca0:	af089ff4 	svcge	0x00089ff4
     ca4:	0007024b 	andeq	r0, r7, fp, asr #4
     ca8:	04040101 	streq	r0, [r4], #-257	; 0xfffffeff
     cac:	00020500 	andeq	r0, r2, r0, lsl #10
     cb0:	03200000 	nopeq	{0}	; <UNPREDICTABLE>
     cb4:	5e13010f 	mufpls	f0, f3, #10.0
     cb8:	01000302 	tsteq	r0, r2, lsl #6
     cbc:	00020101 	andeq	r0, r2, r1, lsl #2
     cc0:	b4000200 	strlt	r0, [r0], #-512	; 0xfffffe00
     cc4:	02000001 	andeq	r0, r0, #1
     cc8:	0d0efb01 	vstreq	d15, [lr, #-4]
     ccc:	01010100 	mrseq	r0, (UNDEF: 17)
     cd0:	00000001 	andeq	r0, r0, r1
     cd4:	01000001 	tsteq	r0, r1
     cd8:	552f3a43 	strpl	r3, [pc, #-2627]!	; 29d <startup-0x1ffffd63>
     cdc:	73726573 	cmnvc	r2, #482344960	; 0x1cc00000
     ce0:	6164412f 	cmnvs	r4, pc, lsr #2
     ce4:	4f2f746d 	svcmi	0x002f746d
     ce8:	7244656e 	subvc	r6, r4, #461373440	; 0x1b800000
     cec:	2f657669 	svccs	0x00657669
     cf0:	756b6f44 	strbvc	r6, [fp, #-3908]!	; 0xfffff0bc
     cf4:	746e656d 	strbtvc	r6, [lr], #-1389	; 0xfffffa93
     cf8:	7469472f 	strbtvc	r4, [r9], #-1839	; 0xfffff8d1
     cfc:	2f627548 	svccs	0x00627548
     d00:	32544144 	subscc	r4, r4, #68, 2
     d04:	4c2d3039 	stcmi	0, cr3, [sp], #-228	; 0xffffff1c
     d08:	736d7261 	cmnvc	sp, #268435462	; 0x10000006
     d0c:	65747379 	ldrbvs	r7, [r4, #-889]!	; 0xfffffc87
     d10:	6f6b2f6d 	svcvs	0x006b2f6d
     d14:	696c2f64 	stmdbvs	ip!, {r2, r5, r6, r8, r9, sl, fp, sp}^
     d18:	54532f62 	ldrbpl	r2, [r3], #-3938	; 0xfffff09e
     d1c:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
     d20:	696c5f34 	stmdbvs	ip!, {r2, r4, r5, r8, r9, sl, fp, ip, lr}^
     d24:	54532f62 	ldrbpl	r2, [r3], #-3938	; 0xfffff09e
     d28:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
     d2c:	5f787834 	svcpl	0x00787834
     d30:	50647453 	rsbpl	r7, r4, r3, asr r4
     d34:	70697265 	rsbvc	r7, r9, r5, ror #4
     d38:	72445f68 	subvc	r5, r4, #104, 30	; 0x1a0
     d3c:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
     d40:	6372732f 	cmnvs	r2, #-1140850688	; 0xbc000000
     d44:	5c3a6300 	ldcpl	3, cr6, [sl], #-0
     d48:	61657363 	cmnvs	r5, r3, ror #6
     d4c:	635c7070 	cmpvs	ip, #112	; 0x70
     d50:	6c65646f 	cfstrdvs	mvd6, [r5], #-444	; 0xfffffe44
     d54:	5c657469 	cfstrdpl	mvd7, [r5], #-420	; 0xfffffe5c
     d58:	6c6f6f74 	stclvs	15, cr6, [pc], #-464	; b90 <startup-0x1ffff470>
     d5c:	63675c73 	cmnvs	r7, #29440	; 0x7300
     d60:	72612d63 	rsbvc	r2, r1, #6336	; 0x18c0
     d64:	72615c6d 	rsbvc	r5, r1, #27904	; 0x6d00
     d68:	6f6e2d6d 	svcvs	0x006e2d6d
     d6c:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
     d70:	5c696261 	sfmpl	f6, 2, [r9], #-388	; 0xfffffe7c
     d74:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
     d78:	5c656475 	cfstrdpl	mvd6, [r5], #-468	; 0xfffffe2c
     d7c:	6863616d 	stmdavs	r3!, {r0, r2, r3, r5, r6, r8, sp, lr}^
     d80:	00656e69 	rsbeq	r6, r5, r9, ror #28
     d84:	635c3a63 	cmpvs	ip, #405504	; 0x63000
     d88:	70616573 	rsbvc	r6, r1, r3, ror r5
     d8c:	6f635c70 	svcvs	0x00635c70
     d90:	696c6564 	stmdbvs	ip!, {r2, r5, r6, r8, sl, sp, lr}^
     d94:	745c6574 	ldrbvc	r6, [ip], #-1396	; 0xfffffa8c
     d98:	736c6f6f 	cmnvc	ip, #444	; 0x1bc
     d9c:	6363675c 	cmnvs	r3, #92, 14	; 0x1700000
     da0:	6d72612d 	ldfvse	f6, [r2, #-180]!	; 0xffffff4c
     da4:	6d72615c 	ldfvse	f6, [r2, #-368]!	; 0xfffffe90
     da8:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
     dac:	61652d65 	cmnvs	r5, r5, ror #26
     db0:	695c6962 	ldmdbvs	ip, {r1, r5, r6, r8, fp, sp, lr}^
     db4:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
     db8:	735c6564 	cmpvc	ip, #100, 10	; 0x19000000
     dbc:	2e007379 	mcrcs	3, 0, r7, cr0, cr9, {3}
     dc0:	696c2f2e 	stmdbvs	ip!, {r1, r2, r3, r5, r8, r9, sl, fp, sp}^
     dc4:	54532f62 	ldrbpl	r2, [r3], #-3938	; 0xfffff09e
     dc8:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
     dcc:	696c5f34 	stmdbvs	ip!, {r2, r4, r5, r8, r9, sl, fp, ip, lr}^
     dd0:	4d432f62 	stclmi	15, cr2, [r3, #-392]	; 0xfffffe78
     dd4:	2f534953 	svccs	0x00534953
     dd8:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
     ddc:	00656475 	rsbeq	r6, r5, r5, ror r4
     de0:	6c2f2e2e 	stcvs	14, cr2, [pc], #-184	; d30 <startup-0x1ffff2d0>
     de4:	532f6269 			; <UNDEFINED> instruction: 0x532f6269
     de8:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
     dec:	6c5f3446 	cfldrdvs	mvd3, [pc], {70}	; 0x46
     df0:	532f6269 			; <UNDEFINED> instruction: 0x532f6269
     df4:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
     df8:	78783446 	ldmdavc	r8!, {r1, r2, r6, sl, ip, sp}^
     dfc:	6474535f 	ldrbtvs	r5, [r4], #-863	; 0xfffffca1
     e00:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
     e04:	445f6870 	ldrbmi	r6, [pc], #-2160	; e0c <startup-0x1ffff1f4>
     e08:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
     e0c:	6e692f72 	mcrvs	15, 3, r2, cr9, cr2, {3}
     e10:	73000063 	movwvc	r0, #99	; 0x63
     e14:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
     e18:	78783466 	ldmdavc	r8!, {r1, r2, r5, r6, sl, ip, sp}^
     e1c:	676e725f 			; <UNDEFINED> instruction: 0x676e725f
     e20:	0100632e 	tsteq	r0, lr, lsr #6
     e24:	645f0000 	ldrbvs	r0, [pc], #-0	; e2c <startup-0x1ffff1d4>
     e28:	75616665 	strbvc	r6, [r1, #-1637]!	; 0xfffff99b
     e2c:	745f746c 	ldrbvc	r7, [pc], #-1132	; e34 <startup-0x1ffff1cc>
     e30:	73657079 	cmnvc	r5, #121	; 0x79
     e34:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
     e38:	735f0000 	cmpvc	pc, #0
     e3c:	6e696474 	mcrvs	4, 3, r6, cr9, cr4, {3}
     e40:	00682e74 	rsbeq	r2, r8, r4, ror lr
     e44:	63000003 	movwvs	r0, #3
     e48:	5f65726f 	svcpl	0x0065726f
     e4c:	2e346d63 	cdpcs	13, 3, cr6, cr4, cr3, {3}
     e50:	00040068 	andeq	r0, r4, r8, rrx
     e54:	73797300 	cmnvc	r9, #0, 6
     e58:	5f6d6574 	svcpl	0x006d6574
     e5c:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
     e60:	78346632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, sp, lr}
     e64:	00682e78 	rsbeq	r2, r8, r8, ror lr
     e68:	73000005 	movwvc	r0, #5
     e6c:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
     e70:	78783466 	ldmdavc	r8!, {r1, r2, r5, r6, sl, ip, sp}^
     e74:	0500682e 	streq	r6, [r0, #-2094]	; 0xfffff7d2
     e78:	00000000 	andeq	r0, r0, r0
     e7c:	301c0205 	andscc	r0, ip, r5, lsl #4
     e80:	e3032000 	movw	r2, #12288	; 0x3000
     e84:	4d310100 	ldfmis	f0, [r1, #-0]
     e88:	034a0903 	movteq	r0, #43267	; 0xa903
     e8c:	4d6a3c09 	stclmi	12, cr3, [sl, #-36]!	; 0xffffffdc
     e90:	03681e6d 	cmneq	r8, #1744	; 0x6d0
     e94:	2f306630 	svccs	0x00306630
     e98:	6600d803 	strvs	sp, [r0], -r3, lsl #16
     e9c:	1e6d4d6a 	cdpne	13, 6, cr4, cr13, cr10, {3}
     ea0:	740c0368 	strvc	r0, [ip], #-872	; 0xfffffc98
     ea4:	5d694f67 	stclpl	15, cr4, [r9, #-412]!	; 0xfffffe64
     ea8:	0f033d4d 	svceq	0x00033d4d
     eac:	03676a66 	cmneq	r7, #417792	; 0x66000
     eb0:	4f67660b 	svcmi	0x0067660b
     eb4:	3d4d5d69 	stclcc	13, cr5, [sp, #-420]	; 0xfffffe5c
     eb8:	6b660c03 	blvs	1983ecc <startup-0x1e67c134>
     ebc:	00060267 	andeq	r0, r6, r7, ror #4
     ec0:	01f30101 	mvnseq	r0, r1, lsl #2
     ec4:	00020000 	andeq	r0, r2, r0
     ec8:	00000199 	muleq	r0, r9, r1
     ecc:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
     ed0:	0101000d 	tsteq	r1, sp
     ed4:	00000101 	andeq	r0, r0, r1, lsl #2
     ed8:	00000100 	andeq	r0, r0, r0, lsl #2
     edc:	2f3a4301 	svccs	0x003a4301
     ee0:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
     ee4:	64412f73 	strbvs	r2, [r1], #-3955	; 0xfffff08d
     ee8:	2f746d61 	svccs	0x00746d61
     eec:	44656e4f 	strbtmi	r6, [r5], #-3663	; 0xfffff1b1
     ef0:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
     ef4:	6b6f442f 	blvs	1bd1fb8 <startup-0x1e42e048>
     ef8:	6e656d75 	mcrvs	13, 3, r6, cr5, cr5, {3}
     efc:	69472f74 	stmdbvs	r7, {r2, r4, r5, r6, r8, r9, sl, fp, sp}^
     f00:	62754874 	rsbsvs	r4, r5, #116, 16	; 0x740000
     f04:	5441442f 	strbpl	r4, [r1], #-1071	; 0xfffffbd1
     f08:	2d303932 			; <UNDEFINED> instruction: 0x2d303932
     f0c:	6d72614c 	ldfvse	f6, [r2, #-304]!	; 0xfffffed0
     f10:	74737973 	ldrbtvc	r7, [r3], #-2419	; 0xfffff68d
     f14:	6b2f6d65 	blvs	bdc4b0 <startup-0x1f423b50>
     f18:	6c2f646f 	cfstrsvs	mvf6, [pc], #-444	; d64 <startup-0x1ffff29c>
     f1c:	63006269 	movwvs	r6, #617	; 0x269
     f20:	73635c3a 	cmnvc	r3, #14848	; 0x3a00
     f24:	70706165 	rsbsvc	r6, r0, r5, ror #2
     f28:	646f635c 	strbtvs	r6, [pc], #-860	; f30 <startup-0x1ffff0d0>
     f2c:	74696c65 	strbtvc	r6, [r9], #-3173	; 0xfffff39b
     f30:	6f745c65 	svcvs	0x00745c65
     f34:	5c736c6f 	ldclpl	12, cr6, [r3], #-444	; 0xfffffe44
     f38:	2d636367 	stclcs	3, cr6, [r3, #-412]!	; 0xfffffe64
     f3c:	5c6d7261 	sfmpl	f7, 2, [sp], #-388	; 0xfffffe7c
     f40:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
     f44:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
     f48:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
     f4c:	6e695c69 	cdpvs	12, 6, cr5, cr9, cr9, {3}
     f50:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
     f54:	616d5c65 	cmnvs	sp, r5, ror #24
     f58:	6e696863 	cdpvs	8, 6, cr6, cr9, cr3, {3}
     f5c:	3a630065 	bcc	18c10f8 <startup-0x1e73ef08>
     f60:	6573635c 	ldrbvs	r6, [r3, #-860]!	; 0xfffffca4
     f64:	5c707061 	ldclpl	0, cr7, [r0], #-388	; 0xfffffe7c
     f68:	65646f63 	strbvs	r6, [r4, #-3939]!	; 0xfffff09d
     f6c:	6574696c 	ldrbvs	r6, [r4, #-2412]!	; 0xfffff694
     f70:	6f6f745c 	svcvs	0x006f745c
     f74:	675c736c 	ldrbvs	r7, [ip, -ip, ror #6]
     f78:	612d6363 			; <UNDEFINED> instruction: 0x612d6363
     f7c:	615c6d72 	cmpvs	ip, r2, ror sp
     f80:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
     f84:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
     f88:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
     f8c:	636e695c 	cmnvs	lr, #92, 18	; 0x170000
     f90:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
     f94:	7379735c 	cmnvc	r9, #92, 6	; 0x70000001
     f98:	2f2e2e00 	svccs	0x002e2e00
     f9c:	2f62696c 	svccs	0x0062696c
     fa0:	334d5453 	movtcc	r5, #54355	; 0xd453
     fa4:	5f344632 	svcpl	0x00344632
     fa8:	2f62696c 	svccs	0x0062696c
     fac:	49534d43 	ldmdbmi	r3, {r0, r1, r6, r8, sl, fp, lr}^
     fb0:	6e692f53 	mcrvs	15, 3, r2, cr9, cr3, {2}
     fb4:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
     fb8:	2e2e0065 	cdpcs	0, 2, cr0, cr14, cr5, {3}
     fbc:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
     fc0:	4d54532f 	ldclmi	3, cr5, [r4, #-188]	; 0xffffff44
     fc4:	34463233 	strbcc	r3, [r6], #-563	; 0xfffffdcd
     fc8:	62696c5f 	rsbvs	r6, r9, #24320	; 0x5f00
     fcc:	4d54532f 	ldclmi	3, cr5, [r4, #-188]	; 0xffffff44
     fd0:	34463233 	strbcc	r3, [r6], #-563	; 0xfffffdcd
     fd4:	535f7878 	cmppl	pc, #120, 16	; 0x780000
     fd8:	65506474 	ldrbvs	r6, [r0, #-1140]	; 0xfffffb8c
     fdc:	68706972 	ldmdavs	r0!, {r1, r4, r5, r6, r8, fp, sp, lr}^
     fe0:	6972445f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, sl, lr}^
     fe4:	2f726576 	svccs	0x00726576
     fe8:	00636e69 	rsbeq	r6, r3, r9, ror #28
     fec:	6c2f2e2e 	stcvs	14, cr2, [pc], #-184	; f3c <startup-0x1ffff0c4>
     ff0:	00006269 	andeq	r6, r0, r9, ror #4
     ff4:	454e4143 	strbmi	r4, [lr, #-323]	; 0xfffffebd
     ff8:	646f636e 	strbtvs	r6, [pc], #-878	; 1000 <startup-0x1ffff000>
     ffc:	00632e65 	rsbeq	r2, r3, r5, ror #28
    1000:	5f000001 	svcpl	0x00000001
    1004:	61666564 	cmnvs	r6, r4, ror #10
    1008:	5f746c75 	svcpl	0x00746c75
    100c:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
    1010:	00682e73 	rsbeq	r2, r8, r3, ror lr
    1014:	5f000002 	svcpl	0x00000002
    1018:	69647473 	stmdbvs	r4!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
    101c:	682e746e 	stmdavs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
    1020:	00000300 	andeq	r0, r0, r0, lsl #6
    1024:	65726f63 	ldrbvs	r6, [r2, #-3939]!	; 0xfffff09d
    1028:	346d635f 	strbtcc	r6, [sp], #-863	; 0xfffffca1
    102c:	0400682e 	streq	r6, [r0], #-2094	; 0xfffff7d2
    1030:	79730000 	ldmdbvc	r3!, {}^	; <UNPREDICTABLE>
    1034:	6d657473 	cfstrdvs	mvd7, [r5, #-460]!	; 0xfffffe34
    1038:	6d74735f 	ldclvs	3, cr7, [r4, #-380]!	; 0xfffffe84
    103c:	34663233 	strbtcc	r3, [r6], #-563	; 0xfffffdcd
    1040:	682e7878 	stmdavs	lr!, {r3, r4, r5, r6, fp, ip, sp, lr}
    1044:	00000500 	andeq	r0, r0, r0, lsl #10
    1048:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
    104c:	78346632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, sp, lr}
    1050:	61635f78 	smcvs	13816	; 0x35f8
    1054:	00682e6e 	rsbeq	r2, r8, lr, ror #28
    1058:	43000005 	movwmi	r0, #5
    105c:	682e4e41 	stmdavs	lr!, {r0, r6, r9, sl, fp, lr}
    1060:	00000600 	andeq	r0, r0, r0, lsl #12
    1064:	02050000 	andeq	r0, r5, #0
    1068:	20003190 	mulcs	r0, r0, r1
    106c:	0200f319 	andeq	pc, r0, #1677721600	; 0x64000000
    1070:	66060104 	strvs	r0, [r6], -r4, lsl #2
    1074:	3f314b06 	svccc	0x00314b06
    1078:	5af3912f 	bpl	ffce553c <GPIO_Ports+0xdfce1734>
    107c:	4b3f3d3d 	blmi	fd0578 <startup-0x1f02fa88>
    1080:	6869755c 	stmdavs	r9!, {r2, r3, r4, r6, r8, sl, ip, sp, lr}^
    1084:	01040200 	mrseq	r0, R12_usr
    1088:	4a090321 	bmi	241d14 <startup-0x1fdbe2ec>
    108c:	912f3fad 			; <UNDEFINED> instruction: 0x912f3fad
    1090:	3d3e5a59 	vldmdbcc	lr!, {s10-s98}
    1094:	59594b3f 	ldmdbpl	r9, {r0, r1, r2, r3, r4, r5, r8, r9, fp, lr}^
    1098:	754c2168 	strbvc	r2, [ip, #-360]	; 0xfffffe98
    109c:	59912f3f 	ldmibpl	r1, {r0, r1, r2, r3, r4, r5, r8, r9, sl, fp, sp}
    10a0:	3f3d3e5a 	svccc	0x003d3e5a
    10a4:	595a5969 	ldmdbpl	sl, {r0, r3, r5, r6, r8, fp, ip, lr}^
    10a8:	5a4b3f3e 	bpl	12d0da8 <startup-0x1ed2f258>
    10ac:	3e2f3e75 	mcrcc	14, 1, r3, cr15, cr5, {3}
    10b0:	213f3e3d 	teqcs	pc, sp, lsr lr	; <UNPREDICTABLE>
    10b4:	01000402 	tsteq	r0, r2, lsl #8
    10b8:	00014e01 	andeq	r4, r1, r1, lsl #28
    10bc:	08000200 	stmdaeq	r0, {r9}
    10c0:	02000001 	andeq	r0, r0, #1
    10c4:	0d0efb01 	vstreq	d15, [lr, #-4]
    10c8:	01010100 	mrseq	r0, (UNDEF: 17)
    10cc:	00000001 	andeq	r0, r0, r1
    10d0:	01000001 	tsteq	r0, r1
    10d4:	552f3a43 	strpl	r3, [pc, #-2627]!	; 699 <startup-0x1ffff967>
    10d8:	73726573 	cmnvc	r2, #482344960	; 0x1cc00000
    10dc:	6164412f 	cmnvs	r4, pc, lsr #2
    10e0:	4f2f746d 	svcmi	0x002f746d
    10e4:	7244656e 	subvc	r6, r4, #461373440	; 0x1b800000
    10e8:	2f657669 	svccs	0x00657669
    10ec:	756b6f44 	strbvc	r6, [fp, #-3908]!	; 0xfffff0bc
    10f0:	746e656d 	strbtvc	r6, [lr], #-1389	; 0xfffffa93
    10f4:	7469472f 	strbtvc	r4, [r9], #-1839	; 0xfffff8d1
    10f8:	2f627548 	svccs	0x00627548
    10fc:	32544144 	subscc	r4, r4, #68, 2
    1100:	4c2d3039 	stcmi	0, cr3, [sp], #-228	; 0xffffff1c
    1104:	736d7261 	cmnvc	sp, #268435462	; 0x10000006
    1108:	65747379 	ldrbvs	r7, [r4, #-889]!	; 0xfffffc87
    110c:	6f6b2f6d 	svcvs	0x006b2f6d
    1110:	696c2f64 	stmdbvs	ip!, {r2, r5, r6, r8, r9, sl, fp, sp}^
    1114:	3a630062 	bcc	18c12a4 <startup-0x1e73ed5c>
    1118:	6573635c 	ldrbvs	r6, [r3, #-860]!	; 0xfffffca4
    111c:	5c707061 	ldclpl	0, cr7, [r0], #-388	; 0xfffffe7c
    1120:	65646f63 	strbvs	r6, [r4, #-3939]!	; 0xfffff09d
    1124:	6574696c 	ldrbvs	r6, [r4, #-2412]!	; 0xfffff694
    1128:	6f6f745c 	svcvs	0x006f745c
    112c:	675c736c 	ldrbvs	r7, [ip, -ip, ror #6]
    1130:	612d6363 			; <UNDEFINED> instruction: 0x612d6363
    1134:	615c6d72 	cmpvs	ip, r2, ror sp
    1138:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    113c:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    1140:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    1144:	636e695c 	cmnvs	lr, #92, 18	; 0x170000
    1148:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    114c:	63616d5c 	cmnvs	r1, #92, 26	; 0x1700
    1150:	656e6968 	strbvs	r6, [lr, #-2408]!	; 0xfffff698
    1154:	5c3a6300 	ldcpl	3, cr6, [sl], #-0
    1158:	61657363 	cmnvs	r5, r3, ror #6
    115c:	635c7070 	cmpvs	ip, #112	; 0x70
    1160:	6c65646f 	cfstrdvs	mvd6, [r5], #-444	; 0xfffffe44
    1164:	5c657469 	cfstrdpl	mvd7, [r5], #-420	; 0xfffffe5c
    1168:	6c6f6f74 	stclvs	15, cr6, [pc], #-464	; fa0 <startup-0x1ffff060>
    116c:	63675c73 	cmnvs	r7, #29440	; 0x7300
    1170:	72612d63 	rsbvc	r2, r1, #6336	; 0x18c0
    1174:	72615c6d 	rsbvc	r5, r1, #27904	; 0x6d00
    1178:	6f6e2d6d 	svcvs	0x006e2d6d
    117c:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    1180:	5c696261 	sfmpl	f6, 2, [r9], #-388	; 0xfffffe7c
    1184:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    1188:	5c656475 	cfstrdpl	mvd6, [r5], #-468	; 0xfffffe2c
    118c:	00737973 	rsbseq	r7, r3, r3, ror r9
    1190:	66756200 	ldrbtvs	r6, [r5], -r0, lsl #4
    1194:	2e726566 	cdpcs	5, 7, cr6, cr2, cr6, {3}
    1198:	00010063 	andeq	r0, r1, r3, rrx
    119c:	65645f00 	strbvs	r5, [r4, #-3840]!	; 0xfffff100
    11a0:	6c756166 	ldfvse	f6, [r5], #-408	; 0xfffffe68
    11a4:	79745f74 	ldmdbvc	r4!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    11a8:	2e736570 	mrccs	5, 3, r6, cr3, cr0, {3}
    11ac:	00020068 	andeq	r0, r2, r8, rrx
    11b0:	74735f00 	ldrbtvc	r5, [r3], #-3840	; 0xfffff100
    11b4:	746e6964 	strbtvc	r6, [lr], #-2404	; 0xfffff69c
    11b8:	0300682e 	movweq	r6, #2094	; 0x82e
    11bc:	75620000 	strbvc	r0, [r2, #-0]!
    11c0:	72656666 	rsbvc	r6, r5, #106954752	; 0x6600000
    11c4:	0100682e 	tsteq	r0, lr, lsr #16
    11c8:	00000000 	andeq	r0, r0, r0
    11cc:	33be0205 			; <UNDEFINED> instruction: 0x33be0205
    11d0:	4b152000 	blmi	5491d8 <startup-0x1fab6e28>
    11d4:	4e4b4b4b 	vmlsmi.f64	d20, d11, d11
    11d8:	c9325976 	ldmdbgt	r2!, {r1, r2, r4, r5, r6, r8, fp, ip, lr}
    11dc:	214c5985 	smlalbbcs	r5, ip, r5, r9
    11e0:	02007a4e 	andeq	r7, r0, #319488	; 0x4e000
    11e4:	58060104 	stmdapl	r6, {r2, r8}
    11e8:	02040200 	andeq	r0, r4, #0, 4
    11ec:	04020066 	streq	r0, [r2], #-102	; 0xffffff9a
    11f0:	02002004 	andeq	r2, r0, #4
    11f4:	3f060404 	svccc	0x00060404
    11f8:	04040200 	streq	r0, [r4], #-512	; 0xfffffe00
    11fc:	595a4e67 	ldmdbpl	sl, {r0, r1, r2, r5, r6, r9, sl, fp, lr}^
    1200:	5985c932 	stmibpl	r5, {r1, r4, r5, r8, fp, lr, pc}
    1204:	0402214c 	streq	r2, [r2], #-332	; 0xfffffeb4
    1208:	fa010100 	blx	41610 <startup-0x1ffbe9f0>
    120c:	02000001 	andeq	r0, r0, #1
    1210:	0001b500 	andeq	fp, r1, r0, lsl #10
    1214:	fb010200 	blx	41a1e <startup-0x1ffbe5e2>
    1218:	01000d0e 	tsteq	r0, lr, lsl #26
    121c:	00010101 	andeq	r0, r1, r1, lsl #2
    1220:	00010000 	andeq	r0, r1, r0
    1224:	3a430100 	bcc	10c162c <startup-0x1ef3e9d4>
    1228:	6573552f 	ldrbvs	r5, [r3, #-1327]!	; 0xfffffad1
    122c:	412f7372 			; <UNDEFINED> instruction: 0x412f7372
    1230:	746d6164 	strbtvc	r6, [sp], #-356	; 0xfffffe9c
    1234:	656e4f2f 	strbvs	r4, [lr, #-3887]!	; 0xfffff0d1
    1238:	76697244 	strbtvc	r7, [r9], -r4, asr #4
    123c:	6f442f65 	svcvs	0x00442f65
    1240:	656d756b 	strbvs	r7, [sp, #-1387]!	; 0xfffffa95
    1244:	472f746e 	strmi	r7, [pc, -lr, ror #8]!
    1248:	75487469 	strbvc	r7, [r8, #-1129]	; 0xfffffb97
    124c:	41442f62 	cmpmi	r4, r2, ror #30
    1250:	30393254 	eorscc	r3, r9, r4, asr r2
    1254:	72614c2d 	rsbvc	r4, r1, #11520	; 0x2d00
    1258:	7379736d 	cmnvc	r9, #-1275068415	; 0xb4000001
    125c:	2f6d6574 	svccs	0x006d6574
    1260:	2f646f6b 	svccs	0x00646f6b
    1264:	2f62696c 	svccs	0x0062696c
    1268:	334d5453 	movtcc	r5, #54355	; 0xd453
    126c:	5f344632 	svcpl	0x00344632
    1270:	2f62696c 	svccs	0x0062696c
    1274:	334d5453 	movtcc	r5, #54355	; 0xd453
    1278:	78344632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, lr}
    127c:	74535f78 	ldrbvc	r5, [r3], #-3960	; 0xfffff088
    1280:	72655064 	rsbvc	r5, r5, #100	; 0x64
    1284:	5f687069 	svcpl	0x00687069
    1288:	76697244 	strbtvc	r7, [r9], -r4, asr #4
    128c:	732f7265 			; <UNDEFINED> instruction: 0x732f7265
    1290:	63006372 	movwvs	r6, #882	; 0x372
    1294:	73635c3a 	cmnvc	r3, #14848	; 0x3a00
    1298:	70706165 	rsbsvc	r6, r0, r5, ror #2
    129c:	646f635c 	strbtvs	r6, [pc], #-860	; 12a4 <startup-0x1fffed5c>
    12a0:	74696c65 	strbtvc	r6, [r9], #-3173	; 0xfffff39b
    12a4:	6f745c65 	svcvs	0x00745c65
    12a8:	5c736c6f 	ldclpl	12, cr6, [r3], #-444	; 0xfffffe44
    12ac:	2d636367 	stclcs	3, cr6, [r3, #-412]!	; 0xfffffe64
    12b0:	5c6d7261 	sfmpl	f7, 2, [sp], #-388	; 0xfffffe7c
    12b4:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    12b8:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    12bc:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    12c0:	6e695c69 	cdpvs	12, 6, cr5, cr9, cr9, {3}
    12c4:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    12c8:	616d5c65 	cmnvs	sp, r5, ror #24
    12cc:	6e696863 	cdpvs	8, 6, cr6, cr9, cr3, {3}
    12d0:	3a630065 	bcc	18c146c <startup-0x1e73eb94>
    12d4:	6573635c 	ldrbvs	r6, [r3, #-860]!	; 0xfffffca4
    12d8:	5c707061 	ldclpl	0, cr7, [r0], #-388	; 0xfffffe7c
    12dc:	65646f63 	strbvs	r6, [r4, #-3939]!	; 0xfffff09d
    12e0:	6574696c 	ldrbvs	r6, [r4, #-2412]!	; 0xfffff694
    12e4:	6f6f745c 	svcvs	0x006f745c
    12e8:	675c736c 	ldrbvs	r7, [ip, -ip, ror #6]
    12ec:	612d6363 			; <UNDEFINED> instruction: 0x612d6363
    12f0:	615c6d72 	cmpvs	ip, r2, ror sp
    12f4:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    12f8:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    12fc:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    1300:	636e695c 	cmnvs	lr, #92, 18	; 0x170000
    1304:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    1308:	7379735c 	cmnvc	r9, #92, 6	; 0x70000001
    130c:	2f2e2e00 	svccs	0x002e2e00
    1310:	2f62696c 	svccs	0x0062696c
    1314:	334d5453 	movtcc	r5, #54355	; 0xd453
    1318:	5f344632 	svcpl	0x00344632
    131c:	2f62696c 	svccs	0x0062696c
    1320:	49534d43 	ldmdbmi	r3, {r0, r1, r6, r8, sl, fp, lr}^
    1324:	6e692f53 	mcrvs	15, 3, r2, cr9, cr3, {2}
    1328:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    132c:	2e2e0065 	cdpcs	0, 2, cr0, cr14, cr5, {3}
    1330:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    1334:	4d54532f 	ldclmi	3, cr5, [r4, #-188]	; 0xffffff44
    1338:	34463233 	strbcc	r3, [r6], #-563	; 0xfffffdcd
    133c:	62696c5f 	rsbvs	r6, r9, #24320	; 0x5f00
    1340:	4d54532f 	ldclmi	3, cr5, [r4, #-188]	; 0xffffff44
    1344:	34463233 	strbcc	r3, [r6], #-563	; 0xfffffdcd
    1348:	535f7878 	cmppl	pc, #120, 16	; 0x780000
    134c:	65506474 	ldrbvs	r6, [r0, #-1140]	; 0xfffffb8c
    1350:	68706972 	ldmdavs	r0!, {r1, r4, r5, r6, r8, fp, sp, lr}^
    1354:	6972445f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, sl, lr}^
    1358:	2f726576 	svccs	0x00726576
    135c:	00636e69 	rsbeq	r6, r3, r9, ror #28
    1360:	73696d00 	cmnvc	r9, #0, 26
    1364:	00632e63 	rsbeq	r2, r3, r3, ror #28
    1368:	5f000001 	svcpl	0x00000001
    136c:	61666564 	cmnvs	r6, r4, ror #10
    1370:	5f746c75 	svcpl	0x00746c75
    1374:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
    1378:	00682e73 	rsbeq	r2, r8, r3, ror lr
    137c:	5f000002 	svcpl	0x00000002
    1380:	69647473 	stmdbvs	r4!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
    1384:	682e746e 	stmdavs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
    1388:	00000300 	andeq	r0, r0, r0, lsl #6
    138c:	65726f63 	ldrbvs	r6, [r2, #-3939]!	; 0xfffff09d
    1390:	346d635f 	strbtcc	r6, [sp], #-863	; 0xfffffca1
    1394:	0400682e 	streq	r6, [r0], #-2094	; 0xfffff7d2
    1398:	79730000 	ldmdbvc	r3!, {}^	; <UNPREDICTABLE>
    139c:	6d657473 	cfstrdvs	mvd7, [r5, #-460]!	; 0xfffffe34
    13a0:	6d74735f 	ldclvs	3, cr7, [r4, #-380]!	; 0xfffffe84
    13a4:	34663233 	strbtcc	r3, [r6], #-563	; 0xfffffdcd
    13a8:	682e7878 	stmdavs	lr!, {r3, r4, r5, r6, fp, ip, sp, lr}
    13ac:	00000500 	andeq	r0, r0, r0, lsl #10
    13b0:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
    13b4:	78346632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, sp, lr}
    13b8:	00682e78 	rsbeq	r2, r8, r8, ror lr
    13bc:	6d000005 	stcvs	0, cr0, [r0, #-20]	; 0xffffffec
    13c0:	2e637369 	cdpcs	3, 6, cr7, cr3, cr9, {3}
    13c4:	00050068 	andeq	r0, r5, r8, rrx
    13c8:	05000000 	streq	r0, [r0, #-0]
    13cc:	0034e802 	eorseq	lr, r4, r2, lsl #16
    13d0:	00f60320 	rscseq	r0, r6, r0, lsr #6
    13d4:	03594f01 	cmpeq	r9, #1, 30
    13d8:	c14b900c 	cmpgt	fp, ip
    13dc:	92759f4d 	rsbsls	r9, r5, #308	; 0x134
    13e0:	b05aae91 			; <UNDEFINED> instruction: 0xb05aae91
    13e4:	032d6757 			; <UNDEFINED> instruction: 0x032d6757
    13e8:	571e2e09 	ldrpl	r2, [lr, -r9, lsl #28]
    13ec:	034d2d67 	movteq	r2, #56679	; 0xdd67
    13f0:	835d900c 	cmphi	sp, #12
    13f4:	95900d03 	ldrls	r0, [r0, #3331]	; 0xd03
    13f8:	841e7a4c 	ldrhi	r7, [lr], #-2636	; 0xfffff5b4
    13fc:	4d740b03 	fldmdbxmi	r4!, {d16}	;@ Deprecated
    1400:	681e6c3e 	ldmdavs	lr, {r1, r2, r3, r4, r5, sl, fp, sp, lr}
    1404:	01000602 	tsteq	r0, r2, lsl #12
    1408:	0002b501 	andeq	fp, r2, r1, lsl #10
    140c:	c9000200 	stmdbgt	r0, {r9}
    1410:	02000001 	andeq	r0, r0, #1
    1414:	0d0efb01 	vstreq	d15, [lr, #-4]
    1418:	01010100 	mrseq	r0, (UNDEF: 17)
    141c:	00000001 	andeq	r0, r0, r1
    1420:	01000001 	tsteq	r0, r1
    1424:	552f3a43 	strpl	r3, [pc, #-2627]!	; 9e9 <startup-0x1ffff617>
    1428:	73726573 	cmnvc	r2, #482344960	; 0x1cc00000
    142c:	6164412f 	cmnvs	r4, pc, lsr #2
    1430:	4f2f746d 	svcmi	0x002f746d
    1434:	7244656e 	subvc	r6, r4, #461373440	; 0x1b800000
    1438:	2f657669 	svccs	0x00657669
    143c:	756b6f44 	strbvc	r6, [fp, #-3908]!	; 0xfffff0bc
    1440:	746e656d 	strbtvc	r6, [lr], #-1389	; 0xfffffa93
    1444:	7469472f 	strbtvc	r4, [r9], #-1839	; 0xfffff8d1
    1448:	2f627548 	svccs	0x00627548
    144c:	32544144 	subscc	r4, r4, #68, 2
    1450:	4c2d3039 	stcmi	0, cr3, [sp], #-228	; 0xffffff1c
    1454:	736d7261 	cmnvc	sp, #268435462	; 0x10000006
    1458:	65747379 	ldrbvs	r7, [r4, #-889]!	; 0xfffffc87
    145c:	6f6b2f6d 	svcvs	0x006b2f6d
    1460:	696c2f64 	stmdbvs	ip!, {r2, r5, r6, r8, r9, sl, fp, sp}^
    1464:	54532f62 	ldrbpl	r2, [r3], #-3938	; 0xfffff09e
    1468:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
    146c:	696c5f34 	stmdbvs	ip!, {r2, r4, r5, r8, r9, sl, fp, ip, lr}^
    1470:	54532f62 	ldrbpl	r2, [r3], #-3938	; 0xfffff09e
    1474:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
    1478:	5f787834 	svcpl	0x00787834
    147c:	50647453 	rsbpl	r7, r4, r3, asr r4
    1480:	70697265 	rsbvc	r7, r9, r5, ror #4
    1484:	72445f68 	subvc	r5, r4, #104, 30	; 0x1a0
    1488:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
    148c:	6372732f 	cmnvs	r2, #-1140850688	; 0xbc000000
    1490:	5c3a6300 	ldcpl	3, cr6, [sl], #-0
    1494:	61657363 	cmnvs	r5, r3, ror #6
    1498:	635c7070 	cmpvs	ip, #112	; 0x70
    149c:	6c65646f 	cfstrdvs	mvd6, [r5], #-444	; 0xfffffe44
    14a0:	5c657469 	cfstrdpl	mvd7, [r5], #-420	; 0xfffffe5c
    14a4:	6c6f6f74 	stclvs	15, cr6, [pc], #-464	; 12dc <startup-0x1fffed24>
    14a8:	63675c73 	cmnvs	r7, #29440	; 0x7300
    14ac:	72612d63 	rsbvc	r2, r1, #6336	; 0x18c0
    14b0:	72615c6d 	rsbvc	r5, r1, #27904	; 0x6d00
    14b4:	6f6e2d6d 	svcvs	0x006e2d6d
    14b8:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    14bc:	5c696261 	sfmpl	f6, 2, [r9], #-388	; 0xfffffe7c
    14c0:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    14c4:	5c656475 	cfstrdpl	mvd6, [r5], #-468	; 0xfffffe2c
    14c8:	6863616d 	stmdavs	r3!, {r0, r2, r3, r5, r6, r8, sp, lr}^
    14cc:	00656e69 	rsbeq	r6, r5, r9, ror #28
    14d0:	635c3a63 	cmpvs	ip, #405504	; 0x63000
    14d4:	70616573 	rsbvc	r6, r1, r3, ror r5
    14d8:	6f635c70 	svcvs	0x00635c70
    14dc:	696c6564 	stmdbvs	ip!, {r2, r5, r6, r8, sl, sp, lr}^
    14e0:	745c6574 	ldrbvc	r6, [ip], #-1396	; 0xfffffa8c
    14e4:	736c6f6f 	cmnvc	ip, #444	; 0x1bc
    14e8:	6363675c 	cmnvs	r3, #92, 14	; 0x1700000
    14ec:	6d72612d 	ldfvse	f6, [r2, #-180]!	; 0xffffff4c
    14f0:	6d72615c 	ldfvse	f6, [r2, #-368]!	; 0xfffffe90
    14f4:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    14f8:	61652d65 	cmnvs	r5, r5, ror #26
    14fc:	695c6962 	ldmdbvs	ip, {r1, r5, r6, r8, fp, sp, lr}^
    1500:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    1504:	735c6564 	cmpvc	ip, #100, 10	; 0x19000000
    1508:	2e007379 	mcrcs	3, 0, r7, cr0, cr9, {3}
    150c:	696c2f2e 	stmdbvs	ip!, {r1, r2, r3, r5, r8, r9, sl, fp, sp}^
    1510:	54532f62 	ldrbpl	r2, [r3], #-3938	; 0xfffff09e
    1514:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
    1518:	696c5f34 	stmdbvs	ip!, {r2, r4, r5, r8, r9, sl, fp, ip, lr}^
    151c:	4d432f62 	stclmi	15, cr2, [r3, #-392]	; 0xfffffe78
    1520:	2f534953 	svccs	0x00534953
    1524:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    1528:	00656475 	rsbeq	r6, r5, r5, ror r4
    152c:	6c2f2e2e 	stcvs	14, cr2, [pc], #-184	; 147c <startup-0x1fffeb84>
    1530:	532f6269 			; <UNDEFINED> instruction: 0x532f6269
    1534:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
    1538:	6c5f3446 	cfldrdvs	mvd3, [pc], {70}	; 0x46
    153c:	532f6269 			; <UNDEFINED> instruction: 0x532f6269
    1540:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
    1544:	78783446 	ldmdavc	r8!, {r1, r2, r6, sl, ip, sp}^
    1548:	6474535f 	ldrbtvs	r5, [r4], #-863	; 0xfffffca1
    154c:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
    1550:	445f6870 	ldrbmi	r6, [pc], #-2160	; 1558 <startup-0x1fffeaa8>
    1554:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
    1558:	6e692f72 	mcrvs	15, 3, r2, cr9, cr2, {3}
    155c:	73000063 	movwvc	r0, #99	; 0x63
    1560:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
    1564:	78783466 	ldmdavc	r8!, {r1, r2, r5, r6, sl, ip, sp}^
    1568:	6970675f 	ldmdbvs	r0!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, sp, lr}^
    156c:	00632e6f 	rsbeq	r2, r3, pc, ror #28
    1570:	5f000001 	svcpl	0x00000001
    1574:	61666564 	cmnvs	r6, r4, ror #10
    1578:	5f746c75 	svcpl	0x00746c75
    157c:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
    1580:	00682e73 	rsbeq	r2, r8, r3, ror lr
    1584:	5f000002 	svcpl	0x00000002
    1588:	69647473 	stmdbvs	r4!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
    158c:	682e746e 	stmdavs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
    1590:	00000300 	andeq	r0, r0, r0, lsl #6
    1594:	65726f63 	ldrbvs	r6, [r2, #-3939]!	; 0xfffff09d
    1598:	346d635f 	strbtcc	r6, [sp], #-863	; 0xfffffca1
    159c:	0400682e 	streq	r6, [r0], #-2094	; 0xfffff7d2
    15a0:	79730000 	ldmdbvc	r3!, {}^	; <UNPREDICTABLE>
    15a4:	6d657473 	cfstrdvs	mvd7, [r5, #-460]!	; 0xfffffe34
    15a8:	6d74735f 	ldclvs	3, cr7, [r4, #-380]!	; 0xfffffe84
    15ac:	34663233 	strbtcc	r3, [r6], #-563	; 0xfffffdcd
    15b0:	682e7878 	stmdavs	lr!, {r3, r4, r5, r6, fp, ip, sp, lr}
    15b4:	00000500 	andeq	r0, r0, r0, lsl #10
    15b8:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
    15bc:	78346632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, sp, lr}
    15c0:	00682e78 	rsbeq	r2, r8, r8, ror lr
    15c4:	73000005 	movwvc	r0, #5
    15c8:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
    15cc:	78783466 	ldmdavc	r8!, {r1, r2, r5, r6, sl, ip, sp}^
    15d0:	6970675f 	ldmdbvs	r0!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, sp, lr}^
    15d4:	00682e6f 	rsbeq	r2, r8, pc, ror #28
    15d8:	00000005 	andeq	r0, r0, r5
    15dc:	ac020500 	cfstr32ge	mvfx0, [r2], {-0}
    15e0:	03200036 			; <UNDEFINED> instruction: 0x03200036
    15e4:	4e0100ff 	mcrmi	0, 0, r0, cr1, cr15, {7}
    15e8:	38034b4c 	stmdacc	r3, {r2, r3, r6, r8, r9, fp, lr}
    15ec:	204a034a 	subcs	r0, sl, sl, asr #6
    15f0:	33034b4c 	movwcc	r4, #15180	; 0x3b4c
    15f4:	204f034a 	subcs	r0, pc, sl, asr #6
    15f8:	2e034b4c 	vmlscs.f64	d4, d3, d12
    15fc:	2054034a 	subscs	r0, r4, sl, asr #6
    1600:	29034b4c 	stmdbcs	r3, {r2, r3, r6, r8, r9, fp, lr}
    1604:	2059034a 	subscs	r0, r9, sl, asr #6
    1608:	24034b4c 	strcs	r4, [r3], #-2892	; 0xfffff4b4
    160c:	205e034a 	subscs	r0, lr, sl, asr #6
    1610:	1f034b4c 	svcne	0x00034b4c
    1614:	2063034a 	rsbcs	r0, r3, sl, asr #6
    1618:	1a034b4c 	bne	d4350 <startup-0x1ff2bcb0>
    161c:	2068034a 	rsbcs	r0, r8, sl, asr #6
    1620:	15034b4c 	strne	r4, [r3, #-2892]	; 0xfffff4b4
    1624:	206e034a 	rsbcs	r0, lr, sl, asr #6
    1628:	0f03674c 	svceq	0x0003674c
    162c:	20730366 	rsbscs	r0, r3, r6, ror #6
    1630:	0a03674c 	beq	db368 <startup-0x1ff24c98>
    1634:	207a0366 	rsbscs	r0, sl, r6, ror #6
    1638:	0369674c 	cmneq	r9, #76, 14	; 0x1300000
    163c:	5990080c 	ldmibpl	r0, {r2, r3, fp}
    1640:	3e660a03 	vmulcc.f32	s1, s12, s6
    1644:	ad4c5a5a 	vstrge	s11, [ip, #-360]	; 0xfffffe98
    1648:	040200bc 	streq	r0, [r2], #-188	; 0xffffff44
    164c:	064a0601 	strbeq	r0, [sl], -r1, lsl #12
    1650:	adc0ad50 	stclge	13, cr10, [r0, #320]	; 0x140
    1654:	0200bbcc 	andeq	fp, r0, #204, 22	; 0x33000
    1658:	62030204 	andvs	r0, r3, #4, 4	; 0x40000000
    165c:	040200ba 	streq	r0, [r2], #-186	; 0xffffff46
    1660:	063c0601 	ldrteq	r0, [ip], -r1, lsl #12
    1664:	523c2103 	eorspl	r2, ip, #-1073741824	; 0xc0000000
    1668:	3d3d3d4c 	ldccc	13, cr3, [sp, #-304]!	; 0xfffffed0
    166c:	10033d3d 	andne	r3, r3, sp, lsr sp
    1670:	5a427574 	bpl	109ec48 <startup-0x1ef613b8>
    1674:	3e3e4c3e 	mrccc	12, 1, r4, cr14, cr14, {1}
    1678:	4a1c033d 	bmi	702374 <startup-0x1f8fdc8c>
    167c:	5c685075 	stclpl	0, cr5, [r8], #-468	; 0xfffffe2c
    1680:	0a033d4c 	beq	d0bb8 <startup-0x1ff2f448>
    1684:	033d4e4a 	teqeq	sp, #1184	; 0x4a0
    1688:	50754a0c 	rsbspl	r4, r5, ip, lsl #20
    168c:	3d4c5c68 	stclcc	12, cr5, [ip, #-416]	; 0xfffffe60
    1690:	4e4a0a03 	vmlami.f32	s1, s20, s6
    1694:	4a0f033d 	bmi	3c2390 <startup-0x1fc3dc70>
    1698:	0f034b79 	svceq	0x00034b79
    169c:	034b794a 	movteq	r7, #47434	; 0xb94a
    16a0:	4cc04a10 	vstmiami	r0, {s9-s24}
    16a4:	034c1e50 	movteq	r1, #52816	; 0xce50
    16a8:	4b784a0b 	blmi	1e13edc <startup-0x1e1ec124>
    16ac:	784a0b03 	stmdavc	sl, {r0, r1, r8, r9, fp}^
    16b0:	00ce0375 	sbceq	r0, lr, r5, ror r3
    16b4:	352fbb4a 	strcc	fp, [pc, #-2890]!	; b72 <startup-0x1ffff48e>
    16b8:	bbc9089f 	bllt	ff24393c <GPIO_Ports+0xdf23fb34>
    16bc:	0004029f 	muleq	r4, pc, r2	; <UNPREDICTABLE>
    16c0:	Address 0x000016c0 is out of bounds.


Disassembly of section .debug_str:

00000000 <.debug_str>:
       0:	52455352 	subpl	r5, r5, #1207959553	; 0x48000001
       4:	31444556 	cmpcc	r4, r6, asr r5
       8:	43545200 	cmpmi	r4, #0, 4
       c:	554b575f 	strbpl	r5, [fp, #-1887]	; 0xfffff8a1
      10:	52495f50 	subpl	r5, r9, #80, 30	; 0x140
      14:	45006e51 	strmi	r6, [r0, #-3665]	; 0xfffff1af
      18:	32495458 	subcc	r5, r9, #88, 8	; 0x58000000
      1c:	5152495f 	cmppl	r2, pc, asr r9
      20:	4d44006e 	stclmi	0, cr0, [r4, #-440]	; 0xfffffe48
      24:	535f3141 	cmppl	pc, #1073741840	; 0x40000010
      28:	61657274 	smcvs	22308	; 0x5724
      2c:	495f366d 	ldmdbmi	pc, {r0, r2, r3, r5, r6, r9, sl, ip, sp}^	; <UNPREDICTABLE>
      30:	006e5152 	rsbeq	r5, lr, r2, asr r1
      34:	384d4954 	stmdacc	sp, {r2, r4, r6, r8, fp, lr}^
      38:	5f50555f 	svcpl	0x0050555f
      3c:	314d4954 	cmpcc	sp, r4, asr r9
      40:	52495f33 	subpl	r5, r9, #51, 30	; 0xcc
      44:	53006e51 	movwpl	r6, #3665	; 0xe51
      48:	69737365 	ldmdbvs	r3!, {r0, r2, r5, r6, r8, r9, ip, sp, lr}^
      4c:	44496e6f 	strbmi	r6, [r9], #-3695	; 0xfffff191
      50:	6e616300 	cdpvs	3, 6, cr6, cr1, cr0, {0}
      54:	696e695f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, sp, lr}^
      58:	656e0074 	strbvs	r0, [lr, #-116]!	; 0xffffff8c
      5c:	6e614877 	mcrvs	8, 3, r4, cr1, cr7, {3}
      60:	72656c64 	rsbvc	r6, r5, #100, 24	; 0x6400
      64:	4e414300 	cdpmi	3, 4, cr4, cr1, cr0, {0}
      68:	696e495f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, lr}^
      6c:	70795474 	rsbsvc	r5, r9, r4, ror r4
      70:	66654465 	strbtvs	r4, [r5], -r5, ror #8
      74:	4e414300 	cdpmi	3, 4, cr4, cr1, cr0, {0}
      78:	6c69465f 	stclvs	6, cr4, [r9], #-380	; 0xfffffe84
      7c:	49726574 	ldmdbmi	r2!, {r2, r4, r5, r6, r8, sl, sp, lr}^
      80:	776f4c64 	strbvc	r4, [pc, -r4, ror #24]!
      84:	36317500 	ldrtcc	r7, [r1], -r0, lsl #10
      88:	73746962 	cmnvc	r4, #1605632	; 0x188000
      8c:	414d4400 	cmpmi	sp, r0, lsl #8
      90:	74535f32 	ldrbvc	r5, [r3], #-3890	; 0xfffff0ce
      94:	6d616572 	cfstr64vs	mvdx6, [r1, #-456]!	; 0xfffffe38
      98:	52495f31 	subpl	r5, r9, #49, 30	; 0xc4
      9c:	47006e51 	smlsdmi	r0, r1, lr, r6
      a0:	5f4f4950 	svcpl	0x004f4950
      a4:	64507550 	ldrbvs	r7, [r0], #-1360	; 0xfffffab0
      a8:	504f4e5f 	subpl	r4, pc, pc, asr lr	; <UNPREDICTABLE>
      ac:	004c4c55 	subeq	r4, ip, r5, asr ip
      b0:	524f5456 	subpl	r5, pc, #1442840576	; 0x56000000
      b4:	49505300 	ldmdbmi	r0, {r8, r9, ip, lr}^
      b8:	52495f33 	subpl	r5, r9, #51, 30	; 0xcc
      bc:	46006e51 			; <UNDEFINED> instruction: 0x46006e51
      c0:	4853414c 	ldmdami	r3, {r2, r3, r6, r8, lr}^
      c4:	5152495f 	cmppl	r2, pc, asr r9
      c8:	4143006e 	cmpmi	r3, lr, rrx
      cc:	7369644e 	cmnvc	r9, #1308622848	; 0x4e000000
      d0:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
      d4:	746c6946 	strbtvc	r6, [ip], #-2374	; 0xfffff6ba
      d8:	61487265 	cmpvs	r8, r5, ror #4
      dc:	656c646e 	strbvs	r6, [ip, #-1134]!	; 0xfffffb92
      e0:	43440072 	movtmi	r0, #16498	; 0x4072
      e4:	495f494d 	ldmdbmi	pc, {r0, r2, r3, r6, r8, fp, lr}^	; <UNPREDICTABLE>
      e8:	006e5152 	rsbeq	r5, lr, r2, asr r1
      ec:	74617473 	strbtvc	r7, [r1], #-1139	; 0xfffffb8d
      f0:	41430065 	cmpmi	r3, r5, rrx
      f4:	54545f4e 	ldrbpl	r5, [r4], #-3918	; 0xfffff0b2
      f8:	43004d43 	movwmi	r4, #3395	; 0xd43
      fc:	4d5f4e41 	ldclmi	14, cr4, [pc, #-260]	; 0 <startup-0x20000000>
     100:	0065646f 	rsbeq	r6, r5, pc, ror #8
     104:	4f495047 	svcmi	0x00495047
     108:	7079544f 	rsbsvc	r5, r9, pc, asr #8
     10c:	79545f65 	ldmdbvc	r4, {r0, r2, r5, r6, r8, r9, sl, fp, ip, lr}^
     110:	65446570 	strbvs	r6, [r4, #-1392]	; 0xfffffa90
     114:	49540066 	ldmdbmi	r4, {r1, r2, r5, r6}^
     118:	495f324d 	ldmdbmi	pc, {r0, r2, r3, r6, r9, ip, sp}^	; <UNPREDICTABLE>
     11c:	006e5152 	rsbeq	r5, lr, r2, asr r1
     120:	65436f74 	strbvs	r6, [r3, #-3956]	; 0xfffff08c
     124:	6172746e 	cmnvs	r2, lr, ror #8
     128:	4349006c 	movtmi	r0, #36972	; 0x906c
     12c:	73005250 	movwvc	r5, #592	; 0x250
     130:	69737365 	ldmdbvs	r3!, {r0, r2, r5, r6, r8, r9, ip, sp, lr}^
     134:	44496e6f 	strbmi	r6, [r9], #-3695	; 0xfffff191
     138:	49564e00 	ldmdbmi	r6, {r9, sl, fp, lr}^
     13c:	6e495f43 	cdpvs	15, 4, cr5, cr9, cr3, {2}
     140:	74537469 	ldrbvc	r7, [r3], #-1129	; 0xfffffb97
     144:	74637572 	strbtvc	r7, [r3], #-1394	; 0xfffffa8e
     148:	00657275 	rsbeq	r7, r5, r5, ror r2
     14c:	324e4143 	subcc	r4, lr, #-1073741808	; 0xc0000010
     150:	3058525f 	subscc	r5, r8, pc, asr r2
     154:	5152495f 	cmppl	r2, pc, asr r9
     158:	5355006e 	cmppl	r5, #110	; 0x6e
     15c:	36545241 	ldrbcc	r5, [r4], -r1, asr #4
     160:	5152495f 	cmppl	r2, pc, asr r9
     164:	4143006e 	cmpmi	r3, lr, rrx
     168:	69465f4e 	stmdbvs	r6, {r1, r2, r3, r6, r8, r9, sl, fp, ip, lr}^
     16c:	7265746c 	rsbvc	r7, r5, #108, 8	; 0x6c000000
     170:	6c616353 	stclvs	3, cr6, [r1], #-332	; 0xfffffeb4
     174:	5f5f0065 	svcpl	0x005f0065
     178:	746e6975 	strbtvc	r6, [lr], #-2421	; 0xfffff68b
     17c:	00745f38 	rsbseq	r5, r4, r8, lsr pc
     180:	32495053 	subcc	r5, r9, #83	; 0x53
     184:	5152495f 	cmppl	r2, pc, asr r9
     188:	4954006e 	ldmdbmi	r4, {r1, r2, r3, r5, r6}^
     18c:	425f384d 	subsmi	r3, pc, #5046272	; 0x4d0000
     190:	545f4b52 	ldrbpl	r4, [pc], #-2898	; 198 <startup-0x1ffffe68>
     194:	32314d49 	eorscc	r4, r1, #4672	; 0x1240
     198:	5152495f 	cmppl	r2, pc, asr r9
     19c:	5047006e 	subpl	r0, r7, lr, rrx
     1a0:	505f4f49 	subspl	r4, pc, r9, asr #30
     1a4:	5f645075 	svcpl	0x00645075
     1a8:	4e574f44 	cdpmi	15, 5, cr4, cr7, cr4, {2}
     1ac:	6e616300 	cdpvs	3, 6, cr6, cr1, cr0, {0}
     1b0:	7172695f 	cmnvc	r2, pc, asr r9
     1b4:	6e61685f 	mcrvs	8, 3, r6, cr1, cr15, {2}
     1b8:	72656c64 	rsbvc	r6, r5, #100, 24	; 0x6400
     1bc:	49564e00 	ldmdbmi	r6, {r9, sl, fp, lr}^
     1c0:	52495f43 	subpl	r5, r9, #268	; 0x10c
     1c4:	61684351 	cmnvs	r8, r1, asr r3
     1c8:	6c656e6e 	stclvs	14, cr6, [r5], #-440	; 0xfffffe48
     1cc:	00646d43 	rsbeq	r6, r4, r3, asr #26
     1d0:	43524941 	cmpmi	r2, #1064960	; 0x104000
     1d4:	6f6e0052 	svcvs	0x006e0052
     1d8:	73736553 	cmnvc	r3, #348127232	; 0x14c00000
     1dc:	496e6f69 	stmdbmi	lr!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
     1e0:	50430064 	subpl	r0, r3, r4, rrx
     1e4:	00444955 	subeq	r4, r4, r5, asr r9
     1e8:	32414d44 	subcc	r4, r1, #68, 26	; 0x1100
     1ec:	7274535f 	rsbsvc	r5, r4, #2080374785	; 0x7c000001
     1f0:	356d6165 	strbcc	r6, [sp, #-357]!	; 0xfffffe9b
     1f4:	5152495f 	cmppl	r2, pc, asr r9
     1f8:	5047006e 	subpl	r0, r7, lr, rrx
     1fc:	4d5f4f49 	ldclmi	15, cr4, [pc, #-292]	; e0 <startup-0x1fffff20>
     200:	5f65646f 	svcpl	0x0065646f
     204:	54004641 	strpl	r4, [r0], #-1601	; 0xfffff9bf
     208:	5f314d49 	svcpl	0x00314d49
     20c:	5f475254 	svcpl	0x00475254
     210:	5f4d4f43 	svcpl	0x004d4f43
     214:	314d4954 	cmpcc	sp, r4, asr r9
     218:	52495f31 	subpl	r5, r9, #49, 30	; 0xc4
     21c:	47006e51 	smlsdmi	r0, r1, lr, r6
     220:	5f4f4950 	svcpl	0x004f4950
     224:	65646f4d 	strbvs	r6, [r4, #-3917]!	; 0xfffff0b3
     228:	004e415f 	subeq	r4, lr, pc, asr r1
     22c:	734e4143 	movtvc	r4, #57667	; 0xe143
     230:	4d646e65 	stclmi	14, cr6, [r4, #-404]!	; 0xfffffe6c
     234:	61737365 	cmnvs	r3, r5, ror #6
     238:	72006567 	andvc	r6, r0, #432013312	; 0x19c00000
     23c:	67734d78 			; <UNDEFINED> instruction: 0x67734d78
     240:	73795300 	cmnvc	r9, #0, 6
     244:	6b636954 	blvs	18da79c <startup-0x1e725864>
     248:	5152495f 	cmppl	r2, pc, asr r9
     24c:	5355006e 	cmppl	r5, #110	; 0x6e
     250:	33545241 	cmpcc	r4, #268435460	; 0x10000004
     254:	5152495f 	cmppl	r2, pc, asr r9
     258:	4349006e 	movtmi	r0, #36974	; 0x906e
     25c:	52005253 	andpl	r5, r0, #805306373	; 0x30000005
     260:	00523046 	subseq	r3, r2, r6, asr #32
     264:	4f495047 	svcmi	0x00495047
     268:	79544f5f 	ldmdbvc	r4, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, lr}^
     26c:	4f5f6570 	svcmi	0x005f6570
     270:	50470044 	subpl	r0, r7, r4, asr #32
     274:	495f4f49 	ldmdbmi	pc, {r0, r3, r6, r8, r9, sl, fp, lr}^	; <UNPREDICTABLE>
     278:	5474696e 	ldrbtpl	r6, [r4], #-2414	; 0xfffff692
     27c:	44657079 	strbtmi	r7, [r5], #-121	; 0xffffff87
     280:	43006665 	movwmi	r6, #1637	; 0x665
     284:	465f4e41 	ldrbmi	r4, [pc], -r1, asr #28
     288:	65746c69 	ldrbvs	r6, [r4, #-3177]!	; 0xfffff397
     28c:	67655272 			; <UNDEFINED> instruction: 0x67655272
     290:	65747369 	ldrbvs	r7, [r4, #-873]!	; 0xfffffc97
     294:	79545f72 	ldmdbvc	r4, {r1, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
     298:	65446570 	strbvs	r6, [r4, #-1392]	; 0xfffffa90
     29c:	46730066 	ldrbtmi	r0, [r3], -r6, rrx
     2a0:	4d4f4649 	stclmi	6, cr4, [pc, #-292]	; 184 <startup-0x1ffffe7c>
     2a4:	426c6961 	rsbmi	r6, ip, #1589248	; 0x184000
     2a8:	4400786f 	strmi	r7, [r0], #-2159	; 0xfffff791
     2ac:	5f31414d 	svcpl	0x0031414d
     2b0:	65727453 	ldrbvs	r7, [r2, #-1107]!	; 0xfffffbad
     2b4:	5f326d61 	svcpl	0x00326d61
     2b8:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     2bc:	53455200 	movtpl	r5, #20992	; 0x5200
     2c0:	45565245 	ldrbmi	r5, [r6, #-581]	; 0xfffffdbb
     2c4:	52003044 	andpl	r3, r0, #68	; 0x44
     2c8:	52455345 	subpl	r5, r5, #335544321	; 0x14000001
     2cc:	31444556 	cmpcc	r4, r6, asr r5
     2d0:	736e7500 	cmnvc	lr, #0, 10
     2d4:	656e6769 	strbvs	r6, [lr, #-1897]!	; 0xfffff897
     2d8:	68632064 	stmdavs	r3!, {r2, r5, r6, sp}^
     2dc:	44007261 	strmi	r7, [r0], #-609	; 0xfffffd9f
     2e0:	5f32414d 	svcpl	0x0032414d
     2e4:	65727453 	ldrbvs	r7, [r2, #-1107]!	; 0xfffffbad
     2e8:	5f346d61 	svcpl	0x00346d61
     2ec:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     2f0:	53455200 	movtpl	r5, #20992	; 0x5200
     2f4:	45565245 	ldrbmi	r5, [r6, #-581]	; 0xfffffdbb
     2f8:	52003444 	andpl	r3, r0, #68, 8	; 0x44000000
     2fc:	52455345 	subpl	r5, r5, #335544321	; 0x14000001
     300:	35444556 	strbcc	r4, [r4, #-1366]	; 0xfffffaaa
     304:	31465200 	mrscc	r5, (UNDEF: 102)
     308:	41490052 	qdaddmi	r0, r2, r9
     30c:	47005242 	strmi	r5, [r0, -r2, asr #4]
     310:	5f4f4950 	svcpl	0x004f4950
     314:	7079544f 	rsbsvc	r5, r9, pc, asr #8
     318:	50505f65 	subspl	r5, r0, r5, ror #30
     31c:	43324900 	teqmi	r2, #0, 18
     320:	52455f31 	subpl	r5, r5, #49, 30	; 0xc4
     324:	5152495f 	cmppl	r2, pc, asr r9
     328:	4143006e 	cmpmi	r3, lr, rrx
     32c:	69465f4e 	stmdbvs	r6, {r1, r2, r3, r6, r8, r9, sl, fp, ip, lr}^
     330:	7265746c 	rsbvc	r7, r5, #108, 8	; 0x6c000000
     334:	4f464946 	svcmi	0x00464946
     338:	69737341 	ldmdbvs	r3!, {r0, r6, r8, r9, ip, sp, lr}^
     33c:	656d6e67 	strbvs	r6, [sp, #-3687]!	; 0xfffff199
     340:	4300746e 	movwmi	r7, #1134	; 0x46e
     344:	415f4e41 	cmpmi	pc, r1, asr #28
     348:	004d4f42 	subeq	r4, sp, r2, asr #30
     34c:	324e4143 	subcc	r4, lr, #-1073741808	; 0xc0000010
     350:	4543535f 	strbmi	r5, [r3, #-863]	; 0xfffffca1
     354:	5152495f 	cmppl	r2, pc, asr r9
     358:	6568006e 	strbvs	r0, [r8, #-110]!	; 0xffffff92
     35c:	72656461 	rsbvc	r6, r5, #1627389952	; 0x61000000
     360:	64745300 	ldrbtvs	r5, [r4], #-768	; 0xfffffd00
     364:	52006449 	andpl	r6, r0, #1224736768	; 0x49000000
     368:	52455345 	subpl	r5, r5, #335544321	; 0x14000001
     36c:	32444556 	subcc	r4, r4, #360710144	; 0x15800000
     370:	53455200 	movtpl	r5, #20992	; 0x5200
     374:	45565245 	ldrbmi	r5, [r6, #-581]	; 0xfffffdbb
     378:	54003344 	strpl	r3, [r0], #-836	; 0xfffffcbc
     37c:	5f354d49 	svcpl	0x00354d49
     380:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     384:	61735500 	cmnvs	r3, r0, lsl #10
     388:	61466567 	cmpvs	r6, r7, ror #10
     38c:	5f746c75 	svcpl	0x00746c75
     390:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     394:	73655300 	cmnvc	r5, #0, 6
     398:	6e6f6973 			; <UNDEFINED> instruction: 0x6e6f6973
     39c:	63414449 	movtvs	r4, #5193	; 0x1449
     3a0:	65766974 	ldrbvs	r6, [r6, #-2420]!	; 0xfffff68c
     3a4:	42435300 	submi	r5, r3, #0, 6
     3a8:	7079545f 	rsbsvc	r5, r9, pc, asr r4
     3ac:	50470065 	subpl	r0, r7, r5, rrx
     3b0:	75504f49 	ldrbvc	r4, [r0, #-3913]	; 0xfffff0b7
     3b4:	545f6450 	ldrbpl	r6, [pc], #-1104	; 3bc <startup-0x1ffffc44>
     3b8:	44657079 	strbtmi	r7, [r5], #-121	; 0xffffff87
     3bc:	44006665 	strmi	r6, [r0], #-1637	; 0xfffff99b
     3c0:	00525346 	subseq	r5, r2, r6, asr #6
     3c4:	614e4143 	cmpvs	lr, r3, asr #2
     3c8:	76697463 	strbtvc	r7, [r9], -r3, ror #8
     3cc:	46657461 	strbtmi	r7, [r5], -r1, ror #8
     3d0:	65746c69 	ldrbvs	r6, [r4, #-3177]!	; 0xfffff397
     3d4:	6e614872 	mcrvs	8, 3, r4, cr1, cr2, {3}
     3d8:	72656c64 	rsbvc	r6, r5, #100, 24	; 0x6400
     3dc:	49564e00 	ldmdbmi	r6, {r9, sl, fp, lr}^
     3e0:	52495f43 	subpl	r5, r9, #268	; 0x10c
     3e4:	61684351 	cmnvs	r8, r1, asr r3
     3e8:	6c656e6e 	stclvs	14, cr6, [r5], #-440	; 0xfffffe48
     3ec:	65657250 	strbvs	r7, [r5, #-592]!	; 0xfffffdb0
     3f0:	6974706d 	ldmdbvs	r4!, {r0, r2, r3, r5, r6, ip, sp, lr}^
     3f4:	72506e6f 	subsvc	r6, r0, #1776	; 0x6f0
     3f8:	69726f69 	ldmdbvs	r2!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
     3fc:	5f007974 	svcpl	0x00007974
     400:	6e69755f 	mcrvs	5, 3, r7, cr9, cr15, {2}
     404:	5f363174 	svcpl	0x00363174
     408:	50470074 	subpl	r0, r7, r4, ror r0
     40c:	4c5f4f49 	mrrcmi	15, 4, r4, pc, cr9	; <UNPREDICTABLE>
     410:	535f776f 	cmppl	pc, #29097984	; 0x1bc0000
     414:	64656570 	strbtvs	r6, [r5], #-1392	; 0xfffffa90
     418:	4e414300 	cdpmi	3, 4, cr4, cr1, cr0, {0}
     41c:	58525f31 	ldmdapl	r2, {r0, r4, r5, r8, r9, sl, fp, ip, lr}^
     420:	52495f30 	subpl	r5, r9, #48, 30	; 0xc0
     424:	43006e51 	movwmi	r6, #3665	; 0xe51
     428:	465f4e41 	ldrbmi	r4, [pc], -r1, asr #28
     42c:	65746c69 	ldrbvs	r6, [r4, #-3177]!	; 0xfffff397
     430:	74634172 	strbtvc	r4, [r3], #-370	; 0xfffffe8e
     434:	74617669 	strbtvc	r7, [r1], #-1641	; 0xfffff997
     438:	006e6f69 	rsbeq	r6, lr, r9, ror #30
     43c:	555c3a43 	ldrbpl	r3, [ip, #-2627]	; 0xfffff5bd
     440:	73726573 	cmnvc	r2, #482344960	; 0x1cc00000
     444:	6164415c 	cmnvs	r4, ip, asr r1
     448:	4f5c746d 	svcmi	0x005c746d
     44c:	7244656e 	subvc	r6, r4, #461373440	; 0x1b800000
     450:	5c657669 	stclpl	6, cr7, [r5], #-420	; 0xfffffe5c
     454:	756b6f44 	strbvc	r6, [fp, #-3908]!	; 0xfffff0bc
     458:	746e656d 	strbtvc	r6, [lr], #-1389	; 0xfffffa93
     45c:	7469475c 	strbtvc	r4, [r9], #-1884	; 0xfffff8a4
     460:	5c627548 	cfstr64pl	mvdx7, [r2], #-288	; 0xfffffee0
     464:	32544144 	subscc	r4, r4, #68, 2
     468:	4c2d3039 	stcmi	0, cr3, [sp], #-228	; 0xffffff1c
     46c:	736d7261 	cmnvc	sp, #268435462	; 0x10000006
     470:	65747379 	ldrbvs	r7, [r4, #-889]!	; 0xfffffc87
     474:	6f6b5c6d 	svcvs	0x006b5c6d
     478:	6f445c64 	svcvs	0x00445c64
     47c:	4800726f 	stmdami	r0, {r0, r1, r2, r3, r5, r6, r9, ip, sp, lr}
     480:	00525346 	subseq	r5, r2, r6, asr #6
     484:	64616548 	strbtvs	r6, [r1], #-1352	; 0xfffffab8
     488:	45007265 	strmi	r7, [r0, #-613]	; 0xfffffd9b
     48c:	64497478 	strbvs	r7, [r9], #-1144	; 0xfffffb88
     490:	4e414300 	cdpmi	3, 4, cr4, cr1, cr0, {0}
     494:	6c69465f 	stclvs	6, cr4, [r9], #-380	; 0xfffffe84
     498:	49726574 	ldmdbmi	r2!, {r2, r4, r5, r6, r8, sl, sp, lr}^
     49c:	5374696e 	cmnpl	r4, #1802240	; 0x1b8000
     4a0:	63757274 	cmnvs	r5, #116, 4	; 0x40000007
     4a4:	65727574 	ldrbvs	r7, [r2, #-1396]!	; 0xfffffa8c
     4a8:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
     4ac:	52495f34 	subpl	r5, r9, #52, 30	; 0xd0
     4b0:	47006e51 	smlsdmi	r0, r1, lr, r6
     4b4:	4320554e 			; <UNDEFINED> instruction: 0x4320554e
     4b8:	37203939 			; <UNDEFINED> instruction: 0x37203939
     4bc:	312e322e 			; <UNDEFINED> instruction: 0x312e322e
     4c0:	31303220 	teqcc	r0, r0, lsr #4
     4c4:	30393037 	eorscc	r3, r9, r7, lsr r0
     4c8:	72282034 	eorvc	r2, r8, #52	; 0x34
     4cc:	61656c65 	cmnvs	r5, r5, ror #24
     4d0:	20296573 	eorcs	r6, r9, r3, ror r5
     4d4:	4d52415b 	ldfmie	f4, [r2, #-364]	; 0xfffffe94
     4d8:	626d652f 	rsbvs	r6, sp, #197132288	; 0xbc00000
     4dc:	65646465 	strbvs	r6, [r4, #-1125]!	; 0xfffffb9b
     4e0:	2d372d64 	ldccs	13, cr2, [r7, #-400]!	; 0xfffffe70
     4e4:	6e617262 	cdpvs	2, 6, cr7, cr1, cr2, {3}
     4e8:	72206863 	eorvc	r6, r0, #6488064	; 0x630000
     4ec:	73697665 	cmnvc	r9, #105906176	; 0x6500000
     4f0:	206e6f69 	rsbcs	r6, lr, r9, ror #30
     4f4:	32353532 	eorscc	r3, r5, #209715200	; 0xc800000
     4f8:	205d3430 	subscs	r3, sp, r0, lsr r4
     4fc:	68746d2d 	ldmdavs	r4!, {r0, r2, r3, r5, r8, sl, fp, sp, lr}^
     500:	20626d75 	rsbcs	r6, r2, r5, ror sp
     504:	72616d2d 	rsbvc	r6, r1, #2880	; 0xb40
     508:	613d6863 	teqvs	sp, r3, ror #16
     50c:	36766d72 			; <UNDEFINED> instruction: 0x36766d72
     510:	2d206d2d 	stccs	13, cr6, [r0, #-180]!	; 0xffffff4c
     514:	6f6c666d 	svcvs	0x006c666d
     518:	612d7461 			; <UNDEFINED> instruction: 0x612d7461
     51c:	733d6962 	teqvc	sp, #1605632	; 0x188000
     520:	2074666f 	rsbscs	r6, r4, pc, ror #12
     524:	68746d2d 	ldmdavs	r4!, {r0, r2, r3, r5, r8, sl, fp, sp, lr}^
     528:	20626d75 	rsbcs	r6, r2, r5, ror sp
     52c:	72616d2d 	rsbvc	r6, r1, #2880	; 0xb40
     530:	613d6863 	teqvs	sp, r3, ror #16
     534:	36766d72 			; <UNDEFINED> instruction: 0x36766d72
     538:	2d206d2d 	stccs	13, cr6, [r0, #-180]!	; 0xffffff4c
     53c:	4f2d2067 	svcmi	0x002d2067
     540:	732d2030 			; <UNDEFINED> instruction: 0x732d2030
     544:	633d6474 	teqvs	sp, #116, 8	; 0x74000000
     548:	43003939 	movwmi	r3, #2361	; 0x939
     54c:	78546e61 	ldmdavc	r4, {r0, r5, r6, r9, sl, fp, sp, lr}^
     550:	0067734d 	rsbeq	r7, r7, sp, asr #6
     554:	53434853 	movtpl	r4, #14419	; 0x3853
     558:	54530052 	ldrbpl	r0, [r3], #-82	; 0xffffffae
     55c:	49005249 	stmdbmi	r0, {r0, r3, r6, r9, ip, lr}
     560:	5f314332 	svcpl	0x00314332
     564:	495f5645 	ldmdbmi	pc, {r0, r2, r6, r9, sl, ip, lr}^	; <UNPREDICTABLE>
     568:	006e5152 	rsbeq	r5, lr, r2, asr r1
     56c:	5f6e6163 	svcpl	0x006e6163
     570:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xfffff197
     574:	6174735f 	cmnvs	r4, pc, asr r3
     578:	00737574 	rsbseq	r7, r3, r4, ror r5
     57c:	4f495047 	svcmi	0x00495047
     580:	646f4d5f 	strbtvs	r4, [pc], #-3423	; 588 <startup-0x1ffffa78>
     584:	554f5f65 	strbpl	r5, [pc, #-3941]	; fffff627 <GPIO_Ports+0xdfffb81f>
     588:	41430054 	qdaddmi	r0, r4, r3
     58c:	6e495f4e 	cdpvs	15, 4, cr5, cr9, cr14, {2}
     590:	74537469 	ldrbvc	r7, [r3], #-1129	; 0xfffffb97
     594:	74637572 	strbtvc	r7, [r3], #-1394	; 0xfffffa8e
     598:	00657275 	rsbeq	r7, r5, r5, ror r2
     59c:	5f4e4143 	svcpl	0x004e4143
     5a0:	00574a53 	subseq	r4, r7, r3, asr sl
     5a4:	314d4954 	cmpcc	sp, r4, asr r9
     5a8:	5f43435f 	svcpl	0x0043435f
     5ac:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     5b0:	53414800 	movtpl	r4, #6144	; 0x1800
     5b4:	4e525f48 	cdpmi	15, 5, cr5, cr2, cr8, {2}
     5b8:	52495f47 	subpl	r5, r9, #284	; 0x11c
     5bc:	45006e51 	strmi	r6, [r0, #-3665]	; 0xfffff1af
     5c0:	31495458 	cmpcc	r9, r8, asr r4
     5c4:	5152495f 	cmppl	r2, pc, asr r9
     5c8:	4143006e 	cmpmi	r3, lr, rrx
     5cc:	545f314e 	ldrbpl	r3, [pc], #-334	; 5d4 <startup-0x1ffffa2c>
     5d0:	52495f58 	subpl	r5, r9, #88, 30	; 0x160
     5d4:	44006e51 	strmi	r6, [r0], #-3665	; 0xfffff1af
     5d8:	5f31414d 	svcpl	0x0031414d
     5dc:	65727453 	ldrbvs	r7, [r2, #-1107]!	; 0xfffffbad
     5e0:	5f356d61 	svcpl	0x00356d61
     5e4:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     5e8:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
     5ec:	52545f38 	subspl	r5, r4, #56, 30	; 0xe0
     5f0:	4f435f47 	svcmi	0x00435f47
     5f4:	49545f4d 	ldmdbmi	r4, {r0, r2, r3, r6, r8, r9, sl, fp, ip, lr}^
     5f8:	5f34314d 	svcpl	0x0034314d
     5fc:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     600:	414d4400 	cmpmi	sp, r0, lsl #8
     604:	74535f32 	ldrbvc	r5, [r3], #-3890	; 0xfffff0ce
     608:	6d616572 	cfstr64vs	mvdx6, [r1, #-456]!	; 0xfffffe38
     60c:	52495f37 	subpl	r5, r9, #55, 30	; 0xdc
     610:	4f006e51 	svcmi	0x00006e51
     614:	465f4754 			; <UNDEFINED> instruction: 0x465f4754
     618:	52495f53 	subpl	r5, r9, #332	; 0x14c
     61c:	4e006e51 	mcrmi	14, 0, r6, cr0, cr1, {2}
     620:	614d6e6f 	cmpvs	sp, pc, ror #28
     624:	62616b73 	rsbvs	r6, r1, #117760	; 0x1cc00
     628:	6e49656c 	cdpvs	5, 4, cr6, cr9, cr12, {3}
     62c:	52495f74 	subpl	r5, r9, #116, 30	; 0x1d0
     630:	57006e51 	smlsdpl	r0, r1, lr, r6
     634:	5f474457 	svcpl	0x00474457
     638:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     63c:	47544f00 	ldrbmi	r4, [r4, -r0, lsl #30]
     640:	5f53485f 	svcpl	0x0053485f
     644:	50554b57 	subspl	r4, r5, r7, asr fp
     648:	5152495f 	cmppl	r2, pc, asr r9
     64c:	654d006e 	strbvs	r0, [sp, #-110]	; 0xffffff92
     650:	79726f6d 	ldmdbvc	r2!, {r0, r2, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
     654:	616e614d 	cmnvs	lr, sp, asr #2
     658:	656d6567 	strbvs	r6, [sp, #-1383]!	; 0xfffffa99
     65c:	495f746e 	ldmdbmi	pc, {r1, r2, r3, r5, r6, sl, ip, sp, lr}^	; <UNPREDICTABLE>
     660:	006e5152 	rsbeq	r5, lr, r2, asr r1
     664:	74737953 	ldrbtvc	r7, [r3], #-2387	; 0xfffff6ad
     668:	6f436d65 	svcvs	0x00436d65
     66c:	6c436572 	cfstr64vs	mvdx6, [r3], {114}	; 0x72
     670:	006b636f 	rsbeq	r6, fp, pc, ror #6
     674:	504d4154 	subpl	r4, sp, r4, asr r1
     678:	4154535f 	cmpmi	r4, pc, asr r3
     67c:	495f504d 	ldmdbmi	pc, {r0, r2, r3, r6, ip, lr}^	; <UNPREDICTABLE>
     680:	006e5152 	rsbeq	r5, lr, r2, asr r1
     684:	314e4143 	cmpcc	lr, r3, asr #2
     688:	4543535f 	strbmi	r5, [r3, #-863]	; 0xfffffca1
     68c:	5152495f 	cmppl	r2, pc, asr r9
     690:	5249006e 	subpl	r0, r9, #110	; 0x6e
     694:	545f6e51 	ldrbpl	r6, [pc], #-3665	; 69c <startup-0x1ffff964>
     698:	00657079 	rsbeq	r7, r5, r9, ror r0
     69c:	4f495047 	svcmi	0x00495047
     6a0:	646f4d5f 	strbtvs	r4, [pc], #-3423	; 6a8 <startup-0x1ffff958>
     6a4:	4e495f65 	cdpmi	15, 4, cr5, cr9, cr5, {3}
     6a8:	414d4400 	cmpmi	sp, r0, lsl #8
     6ac:	74535f32 	ldrbvc	r5, [r3], #-3890	; 0xfffff0ce
     6b0:	6d616572 	cfstr64vs	mvdx6, [r1, #-456]!	; 0xfffffe38
     6b4:	52495f30 	subpl	r5, r9, #48, 30	; 0xc0
     6b8:	4c006e51 	stcmi	14, cr6, [r0], {81}	; 0x51
     6bc:	00524b43 	subseq	r4, r2, r3, asr #22
     6c0:	32433249 	subcc	r3, r3, #-1879048188	; 0x90000004
     6c4:	5f52455f 	svcpl	0x0052455f
     6c8:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     6cc:	4e414300 	cdpmi	3, 4, cr4, cr1, cr0, {0}
     6d0:	6572505f 	ldrbvs	r5, [r2, #-95]!	; 0xffffffa1
     6d4:	6c616373 	stclvs	3, cr6, [r1], #-460	; 0xfffffe34
     6d8:	4f007265 	svcmi	0x00007265
     6dc:	45455053 	strbmi	r5, [r5, #-83]	; 0xffffffad
     6e0:	42005244 	andmi	r5, r0, #68, 4	; 0x40000004
     6e4:	61467375 	hvcvs	26421	; 0x6735
     6e8:	5f746c75 	svcpl	0x00746c75
     6ec:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     6f0:	52415500 	subpl	r5, r1, #0, 10
     6f4:	495f3554 	ldmdbmi	pc, {r2, r4, r6, r8, sl, ip, sp}^	; <UNPREDICTABLE>
     6f8:	006e5152 	rsbeq	r5, lr, r2, asr r1
     6fc:	314d4954 	cmpcc	sp, r4, asr r9
     700:	4b52425f 	blmi	1491084 <startup-0x1eb6ef7c>
     704:	4d49545f 	cfstrdmi	mvd5, [r9, #-380]	; 0xfffffe84
     708:	52495f39 	subpl	r5, r9, #57, 30	; 0xe4
     70c:	47006e51 	smlsdmi	r0, r1, lr, r6
     710:	5f4f4950 	svcpl	0x004f4950
     714:	7079544f 	rsbsvc	r5, r9, pc, asr #8
     718:	5f5f0065 	svcpl	0x005f0065
     71c:	746e6975 	strbtvc	r6, [lr], #-2421	; 0xfffff68b
     720:	745f3233 	ldrbvc	r3, [pc], #-563	; 728 <startup-0x1ffff8d8>
     724:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
     728:	654d5f4f 	strbvs	r5, [sp, #-3919]	; 0xfffff0b1
     72c:	6d756964 			; <UNDEFINED> instruction: 0x6d756964
     730:	6570535f 	ldrbvs	r5, [r0, #-863]!	; 0xfffffca1
     734:	54006465 	strpl	r6, [r0], #-1125	; 0xfffffb9b
     738:	5f374d49 	svcpl	0x00374d49
     73c:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     740:	6e6f6c00 	cdpvs	12, 6, cr6, cr15, cr0, {0}
     744:	6f6c2067 	svcvs	0x006c2067
     748:	6920676e 	stmdbvs	r0!, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}
     74c:	4500746e 	strmi	r7, [r0, #-1134]	; 0xfffffb92
     750:	575f4854 			; <UNDEFINED> instruction: 0x575f4854
     754:	5f50554b 	svcpl	0x0050554b
     758:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     75c:	47544f00 	ldrbmi	r4, [r4, -r0, lsl #30]
     760:	5f53485f 	svcpl	0x0053485f
     764:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     768:	50555000 	subspl	r5, r5, r0
     76c:	6d005244 	sfmvs	f5, 4, [r0, #-272]	; 0xfffffef0
     770:	79546773 	ldmdbvc	r4, {r0, r1, r4, r5, r6, r8, r9, sl, sp, lr}^
     774:	53006570 	movwpl	r6, #1392	; 0x570
     778:	5f314950 	svcpl	0x00314950
     77c:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     780:	696e7500 	stmdbvs	lr!, {r8, sl, ip, sp, lr}^
     784:	69466e6f 	stmdbvs	r6, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
     788:	7265746c 	rsbvc	r7, r5, #108, 8	; 0x6c000000
     78c:	6e616800 	cdpvs	8, 6, cr6, cr1, cr0, {0}
     790:	72656c64 	rsbvc	r6, r5, #100, 24	; 0x6400
     794:	7473694c 	ldrbtvc	r6, [r3], #-2380	; 0xfffff6b4
     798:	43565300 	cmpmi	r6, #0, 6
     79c:	5f6c6c61 	svcpl	0x006c6c61
     7a0:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     7a4:	52534200 	subspl	r4, r3, #0, 4
     7a8:	42004852 	andmi	r4, r0, #5373952	; 0x520000
     7ac:	4c525253 	lfmmi	f5, 2, [r2], {83}	; 0x53
     7b0:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
     7b4:	69485f4f 	stmdbvs	r8, {r0, r1, r2, r3, r6, r8, r9, sl, fp, ip, lr}^
     7b8:	535f6867 	cmppl	pc, #6750208	; 0x670000
     7bc:	64656570 	strbtvs	r6, [r5], #-1392	; 0xfffffa90
     7c0:	73616d00 	cmnvc	r1, #0, 26
     7c4:	3a43006b 	bcc	10c0978 <startup-0x1ef3f688>
     7c8:	6573552f 	ldrbvs	r5, [r3, #-1327]!	; 0xfffffad1
     7cc:	412f7372 			; <UNDEFINED> instruction: 0x412f7372
     7d0:	746d6164 	strbtvc	r6, [sp], #-356	; 0xfffffe9c
     7d4:	656e4f2f 	strbvs	r4, [lr, #-3887]!	; 0xfffff0d1
     7d8:	76697244 	strbtvc	r7, [r9], -r4, asr #4
     7dc:	6f442f65 	svcvs	0x00442f65
     7e0:	656d756b 	strbvs	r7, [sp, #-1387]!	; 0xfffffa95
     7e4:	472f746e 	strmi	r7, [pc, -lr, ror #8]!
     7e8:	75487469 	strbvc	r7, [r8, #-1129]	; 0xfffffb97
     7ec:	41442f62 	cmpmi	r4, r2, ror #30
     7f0:	30393254 	eorscc	r3, r9, r4, asr r2
     7f4:	72614c2d 	rsbvc	r4, r1, #11520	; 0x2d00
     7f8:	7379736d 	cmnvc	r9, #-1275068415	; 0xb4000001
     7fc:	2f6d6574 	svccs	0x006d6574
     800:	2f646f6b 	svccs	0x00646f6b
     804:	2f62696c 	svccs	0x0062696c
     808:	2e4e4143 	dvfcsem	f4, f6, f3
     80c:	50460063 	subpl	r0, r6, r3, rrx
     810:	52495f55 	subpl	r5, r9, #340	; 0x154
     814:	55006e51 	strpl	r6, [r0, #-3665]	; 0xfffff1af
     818:	34545241 	ldrbcc	r5, [r4], #-577	; 0xfffffdbf
     81c:	5152495f 	cmppl	r2, pc, asr r9
     820:	4143006e 	cmpmi	r3, lr, rrx
     824:	46525f4e 	ldrbmi	r5, [r2], -lr, asr #30
     828:	4f004d4c 	svcmi	0x00004d4c
     82c:	465f4754 			; <UNDEFINED> instruction: 0x465f4754
     830:	4b575f53 	blmi	15d8584 <startup-0x1ea27a7c>
     834:	495f5055 	ldmdbmi	pc, {r0, r2, r4, r6, ip, lr}^	; <UNPREDICTABLE>
     838:	006e5152 	rsbeq	r5, lr, r2, asr r1
     83c:	49545845 	ldmdbmi	r4, {r0, r2, r6, fp, ip, lr}^
     840:	52495f34 	subpl	r5, r9, #52, 30	; 0xd0
     844:	54006e51 	strpl	r6, [r0], #-3665	; 0xfffff1af
     848:	5f364d49 	svcpl	0x00364d49
     84c:	5f434144 	svcpl	0x00434144
     850:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     854:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
     858:	70535f4f 	subsvc	r5, r3, pc, asr #30
     85c:	00646565 	rsbeq	r6, r4, r5, ror #10
     860:	32433249 	subcc	r3, r3, #-1879048188	; 0x90000004
     864:	5f56455f 	svcpl	0x0056455f
     868:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     86c:	314d4600 	cmpcc	sp, r0, lsl #12
     870:	44520052 	ldrbmi	r0, [r2], #-82	; 0xffffffae
     874:	54005248 	strpl	r5, [r0], #-584	; 0xfffffdb8
     878:	00524844 	subseq	r4, r2, r4, asr #16
     87c:	52414642 	subpl	r4, r1, #69206016	; 0x4200000
     880:	4e414300 	cdpmi	3, 4, cr4, cr1, cr0, {0}
     884:	6c69465f 	stclvs	6, cr4, [r9], #-380	; 0xfffffe84
     888:	4d726574 	cfldr64mi	mvdx6, [r2, #-464]!	; 0xfffffe30
     88c:	496b7361 	stmdbmi	fp!, {r0, r5, r6, r8, r9, ip, sp, lr}^
     890:	67694864 	strbvs	r4, [r9, -r4, ror #16]!
     894:	736d0068 	cmnvc	sp, #104	; 0x68
     898:	6d754e67 	ldclvs	14, cr4, [r5, #-412]!	; 0xfffffe64
     89c:	414d4400 	cmpmi	sp, r0, lsl #8
     8a0:	74535f31 	ldrbvc	r5, [r3], #-3889	; 0xfffff0cf
     8a4:	6d616572 	cfstr64vs	mvdx6, [r1, #-456]!	; 0xfffffe38
     8a8:	52495f31 	subpl	r5, r9, #49, 30	; 0xc4
     8ac:	44006e51 	strmi	r6, [r0], #-3665	; 0xfffff1af
     8b0:	5f32414d 	svcpl	0x0032414d
     8b4:	65727453 	ldrbvs	r7, [r2, #-1107]!	; 0xfffffbad
     8b8:	5f336d61 	svcpl	0x00336d61
     8bc:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     8c0:	4e414300 	cdpmi	3, 4, cr4, cr1, cr0, {0}
     8c4:	58545f32 	ldmdapl	r4, {r1, r4, r5, r8, r9, sl, fp, ip, lr}^
     8c8:	5152495f 	cmppl	r2, pc, asr r9
     8cc:	4143006e 	cmpmi	r3, lr, rrx
     8d0:	79545f4e 	ldmdbvc	r4, {r1, r2, r3, r6, r8, r9, sl, fp, ip, lr}^
     8d4:	65446570 	strbvs	r6, [r4, #-1392]	; 0xfffffa90
     8d8:	41430066 	cmpmi	r3, r6, rrx
     8dc:	69465f4e 	stmdbvs	r6, {r1, r2, r3, r6, r8, r9, sl, fp, ip, lr}^
     8e0:	7265746c 	rsbvc	r7, r5, #108, 8	; 0x6c000000
     8e4:	626d754e 	rsbvs	r7, sp, #327155712	; 0x13800000
     8e8:	5f007265 	svcpl	0x00007265
     8ec:	756e755f 	strbvc	r7, [lr, #-1375]!	; 0xfffffaa1
     8f0:	00646573 	rsbeq	r6, r4, r3, ror r5
     8f4:	6c694673 	stclvs	6, cr4, [r9], #-460	; 0xfffffe34
     8f8:	52726574 	rsbspl	r6, r2, #116, 10	; 0x1d000000
     8fc:	73696765 	cmnvc	r9, #26476544	; 0x1940000
     900:	00726574 	rsbseq	r6, r2, r4, ror r5
     904:	4349564e 	movtmi	r5, #38478	; 0x964e
     908:	5152495f 	cmppl	r2, pc, asr r9
     90c:	6e616843 	cdpvs	8, 6, cr6, cr1, cr3, {2}
     910:	006c656e 	rsbeq	r6, ip, lr, ror #10
     914:	4349564e 	movtmi	r5, #38478	; 0x964e
     918:	5152495f 	cmppl	r2, pc, asr r9
     91c:	6e616843 	cdpvs	8, 6, cr6, cr1, cr3, {2}
     920:	536c656e 	cmnpl	ip, #461373440	; 0x1b800000
     924:	72506275 	subsvc	r6, r0, #1342177287	; 0x50000007
     928:	69726f69 	ldmdbvs	r2!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
     92c:	44007974 	strmi	r7, [r0], #-2420	; 0xfffff68c
     930:	42415349 	submi	r5, r1, #603979777	; 0x24000001
     934:	4300454c 	movwmi	r4, #1356	; 0x54c
     938:	78526e61 	ldmdavc	r2, {r0, r5, r6, r9, sl, fp, sp, lr}^
     93c:	0067734d 	rsbeq	r7, r7, sp, asr #6
     940:	644e4143 	strbvs	r4, [lr], #-323	; 0xfffffebd
     944:	62617369 	rsbvs	r7, r1, #-1543503871	; 0xa4000001
     948:	6c41656c 	cfstr64vs	mvdx6, [r1], {108}	; 0x6c
     94c:	6c69466c 	stclvs	6, cr4, [r9], #-432	; 0xfffffe50
     950:	48726574 	ldmdami	r2!, {r2, r4, r5, r6, r8, sl, sp, lr}^
     954:	6c646e61 	stclvs	14, cr6, [r4], #-388	; 0xfffffe7c
     958:	00737265 	rsbseq	r7, r3, r5, ror #4
     95c:	746c6966 	strbtvc	r6, [ip], #-2406	; 0xfffff69a
     960:	6e557265 	cdpvs	2, 5, cr7, cr5, cr5, {3}
     964:	006e6f69 	rsbeq	r6, lr, r9, ror #30
     968:	684e4143 	stmdavs	lr, {r0, r1, r6, r8, lr}^
     96c:	6c646e61 	stclvs	14, cr6, [r4], #-388	; 0xfffffe7c
     970:	694c7265 	stmdbvs	ip, {r0, r2, r5, r6, r9, ip, sp, lr}^
     974:	6f4e7473 	svcvs	0x004e7473
     978:	6c754674 	ldclvs	6, cr4, [r5], #-464	; 0xfffffe30
     97c:	4d44006c 	stclmi	0, cr0, [r4, #-432]	; 0xfffffe50
     980:	535f3141 	cmppl	pc, #1073741840	; 0x40000010
     984:	61657274 	smcvs	22308	; 0x5724
     988:	495f306d 	ldmdbmi	pc, {r0, r2, r3, r5, r6, ip, sp}^	; <UNPREDICTABLE>
     98c:	006e5152 	rsbeq	r5, lr, r2, asr r1
     990:	5f435452 	svcpl	0x00435452
     994:	72616c41 	rsbvc	r6, r1, #16640	; 0x4100
     998:	52495f6d 	subpl	r5, r9, #436	; 0x1b4
     99c:	43006e51 	movwmi	r6, #3665	; 0xe51
     9a0:	415f4e41 	cmpmi	pc, r1, asr #28
     9a4:	004d5557 	subeq	r5, sp, r7, asr r5
     9a8:	4349564e 	movtmi	r5, #38478	; 0x964e
     9ac:	7079545f 	rsbsvc	r5, r9, pc, asr r4
     9b0:	75460065 	strbvc	r0, [r6, #-101]	; 0xffffff9b
     9b4:	6974636e 	ldmdbvs	r4!, {r1, r2, r3, r5, r6, r8, r9, sp, lr}^
     9b8:	6c616e6f 	stclvs	14, cr6, [r1], #-444	; 0xfffffe44
     9bc:	74617453 	strbtvc	r7, [r1], #-1107	; 0xfffffbad
     9c0:	32490065 	subcc	r0, r9, #101	; 0x65
     9c4:	455f3343 	ldrbmi	r3, [pc, #-835]	; 689 <startup-0x1ffff977>
     9c8:	52495f52 	subpl	r5, r9, #328	; 0x148
     9cc:	43006e51 	movwmi	r6, #3665	; 0xe51
     9d0:	5f505952 	svcpl	0x00505952
     9d4:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     9d8:	54584500 	ldrbpl	r4, [r8], #-1280	; 0xfffffb00
     9dc:	5f353149 	svcpl	0x00353149
     9e0:	495f3031 	ldmdbmi	pc, {r0, r4, r5, ip, sp}^	; <UNPREDICTABLE>
     9e4:	006e5152 	rsbeq	r5, lr, r2, asr r1
     9e8:	676e6f6c 	strbvs	r6, [lr, -ip, ror #30]!
     9ec:	6e6f6c20 	cdpvs	12, 6, cr6, cr15, cr0, {1}
     9f0:	6e752067 	cdpvs	0, 7, cr2, cr5, cr7, {3}
     9f4:	6e676973 			; <UNDEFINED> instruction: 0x6e676973
     9f8:	69206465 	stmdbvs	r0!, {r0, r2, r5, r6, sl, sp, lr}
     9fc:	5400746e 	strpl	r7, [r0], #-1134	; 0xfffffb92
     a00:	5f334d49 	svcpl	0x00334d49
     a04:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     a08:	41535500 	cmpmi	r3, r0, lsl #10
     a0c:	5f315452 	svcpl	0x00315452
     a10:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     a14:	4e414300 	cdpmi	3, 4, cr4, cr1, cr0, {0}
     a18:	52414e5f 	subpl	r4, r1, #1520	; 0x5f0
     a1c:	44520054 	ldrbmi	r0, [r2], #-84	; 0xffffffac
     a20:	4300524c 	movwmi	r5, #588	; 0x24c
     a24:	465f4e41 	ldrbmi	r4, [pc], -r1, asr #28
     a28:	4d4f4649 	stclmi	6, cr4, [pc, #-292]	; 90c <startup-0x1ffff6f4>
     a2c:	426c6961 	rsbmi	r6, ip, #1589248	; 0x184000
     a30:	545f786f 	ldrbpl	r7, [pc], #-2159	; a38 <startup-0x1ffff5c8>
     a34:	44657079 	strbtmi	r7, [r5], #-121	; 0xffffff87
     a38:	47006665 	strmi	r6, [r0, -r5, ror #12]
     a3c:	5f4f4950 	svcpl	0x004f4950
     a40:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xfffff1b7
     a44:	75727453 	ldrbvc	r7, [r2, #-1107]!	; 0xfffffbad
     a48:	72757463 	rsbsvc	r7, r5, #1660944384	; 0x63000000
     a4c:	50470065 	subpl	r0, r7, r5, rrx
     a50:	4d5f4f49 	ldclmi	15, cr4, [pc, #-292]	; 934 <startup-0x1ffff6cc>
     a54:	0065646f 	rsbeq	r6, r5, pc, ror #8
     a58:	524c4454 	subpl	r4, ip, #84, 8	; 0x54000000
     a5c:	4e414300 	cdpmi	3, 4, cr4, cr1, cr0, {0}
     a60:	58525f32 	ldmdapl	r2, {r1, r4, r5, r8, r9, sl, fp, ip, lr}^
     a64:	52495f31 	subpl	r5, r9, #49, 30	; 0xc4
     a68:	41006e51 	tstmi	r0, r1, asr lr
     a6c:	495f4344 	ldmdbmi	pc, {r2, r6, r8, r9, lr}^	; <UNPREDICTABLE>
     a70:	006e5152 	rsbeq	r5, lr, r2, asr r1
     a74:	5f4e4143 	svcpl	0x004e4143
     a78:	746c6946 	strbtvc	r6, [ip], #-2374	; 0xfffff6ba
     a7c:	64497265 	strbvs	r7, [r9], #-613	; 0xfffffd9b
     a80:	68676948 	stmdavs	r7!, {r3, r6, r8, fp, sp, lr}^
     a84:	45434900 	strbmi	r4, [r3, #-2304]	; 0xfffff700
     a88:	50470052 	subpl	r0, r7, r2, asr r0
     a8c:	6f4d4f49 	svcvs	0x004d4f49
     a90:	545f6564 	ldrbpl	r6, [pc], #-1380	; a98 <startup-0x1ffff568>
     a94:	44657079 	strbtmi	r7, [r5], #-121	; 0xffffff87
     a98:	50006665 	andpl	r6, r0, r5, ror #12
     a9c:	495f4456 	ldmdbmi	pc, {r1, r2, r4, r6, sl, lr}^	; <UNPREDICTABLE>
     aa0:	006e5152 	rsbeq	r5, lr, r2, asr r1
     aa4:	52534641 	subspl	r4, r3, #68157440	; 0x4100000
     aa8:	59544f00 	ldmdbpl	r4, {r8, r9, sl, fp, lr}^
     aac:	00524550 	subseq	r4, r2, r0, asr r5
     ab0:	464e4143 	strbmi	r4, [lr], -r3, asr #2
     ab4:	65746c69 	ldrbvs	r6, [r4, #-3177]!	; 0xfffff397
     ab8:	6e614872 	mcrvs	8, 3, r4, cr1, cr2, {3}
     abc:	72656c64 	rsbvc	r6, r5, #100, 24	; 0x6400
     ac0:	4d534600 	ldclmi	6, cr4, [r3, #-0]
     ac4:	52495f43 	subpl	r5, r9, #268	; 0x10c
     ac8:	45006e51 	strmi	r6, [r0, #-3665]	; 0xfffff1af
     acc:	30495458 	subcc	r5, r9, r8, asr r4
     ad0:	5152495f 	cmppl	r2, pc, asr r9
     ad4:	4643006e 	strbmi	r0, [r3], -lr, rrx
     ad8:	44005253 	strmi	r5, [r0], #-595	; 0xfffffdad
     adc:	5f31414d 	svcpl	0x0031414d
     ae0:	65727453 	ldrbvs	r7, [r2, #-1107]!	; 0xfffffbad
     ae4:	5f346d61 	svcpl	0x00346d61
     ae8:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     aec:	414d4400 	cmpmi	sp, r0, lsl #8
     af0:	74535f32 	ldrbvc	r5, [r3], #-3890	; 0xfffff0ce
     af4:	6d616572 	cfstr64vs	mvdx6, [r1, #-456]!	; 0xfffffe38
     af8:	52495f36 	subpl	r5, r9, #54, 30	; 0xd8
     afc:	47006e51 	smlsdmi	r0, r1, lr, r6
     b00:	534f4950 	movtpl	r4, #63824	; 0xf950
     b04:	64656570 	strbtvs	r6, [r5], #-1392	; 0xfffffa90
     b08:	7079545f 	rsbsvc	r5, r9, pc, asr r4
     b0c:	66654465 	strbtvs	r4, [r5], -r5, ror #8
     b10:	62654400 	rsbvs	r4, r5, #0, 8
     b14:	6f4d6775 	svcvs	0x004d6775
     b18:	6f74696e 	svcvs	0x0074696e
     b1c:	52495f72 	subpl	r5, r9, #456	; 0x1c8
     b20:	47006e51 	smlsdmi	r0, r1, lr, r6
     b24:	5f4f4950 	svcpl	0x004f4950
     b28:	006e6950 	rsbeq	r6, lr, r0, asr r9
     b2c:	52315346 	eorspl	r5, r1, #402653185	; 0x18000001
     b30:	43324900 	teqmi	r2, #0, 18
     b34:	56455f33 			; <UNDEFINED> instruction: 0x56455f33
     b38:	5152495f 	cmppl	r2, pc, asr r9
     b3c:	4143006e 	cmpmi	r3, lr, rrx
     b40:	78545f4e 	ldmdavc	r4, {r1, r2, r3, r6, r8, r9, sl, fp, ip, lr}^
     b44:	6c69614d 	stfvse	f6, [r9], #-308	; 0xfffffecc
     b48:	5f786f42 	svcpl	0x00786f42
     b4c:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0xfffff6ac
     b50:	00666544 	rsbeq	r6, r6, r4, asr #10
     b54:	4f495047 	svcmi	0x00495047
     b58:	5075505f 	rsbspl	r5, r5, pc, asr r0
     b5c:	54450064 	strbpl	r0, [r5], #-100	; 0xffffff9c
     b60:	52495f48 	subpl	r5, r9, #72, 30	; 0x120
     b64:	43006e51 	movwmi	r6, #3665	; 0xe51
     b68:	465f4e41 	ldrbmi	r4, [pc], -r1, asr #28
     b6c:	65746c69 	ldrbvs	r6, [r4, #-3177]!	; 0xfffff397
     b70:	73614d72 	cmnvc	r1, #7296	; 0x1c80
     b74:	4c64496b 			; <UNDEFINED> instruction: 0x4c64496b
     b78:	4d00776f 	stcmi	7, cr7, [r0, #-444]	; 0xfffffe44
     b7c:	0052464d 	subseq	r4, r2, sp, asr #12
     b80:	41464d4d 	cmpmi	r6, sp, asr #26
     b84:	68730052 	ldmdavs	r3!, {r1, r4, r6}^
     b88:	2074726f 	rsbscs	r7, r4, pc, ror #4
     b8c:	00746e69 	rsbseq	r6, r4, r9, ror #28
     b90:	5f434352 	svcpl	0x00434352
     b94:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     b98:	41464600 	cmpmi	r6, r0, lsl #12
     b9c:	49005231 	stmdbmi	r0, {r0, r4, r5, r9, ip, lr}
     ba0:	00524153 	subseq	r4, r2, r3, asr r1
     ba4:	31414d44 	cmpcc	r1, r4, asr #26
     ba8:	7274535f 	rsbsvc	r5, r4, #2080374785	; 0x7c000001
     bac:	336d6165 	cmncc	sp, #1073741849	; 0x40000019
     bb0:	5152495f 	cmppl	r2, pc, asr r9
     bb4:	5355006e 	cmppl	r5, #110	; 0x6e
     bb8:	32545241 	subscc	r5, r4, #268435460	; 0x10000004
     bbc:	5152495f 	cmppl	r2, pc, asr r9
     bc0:	6e69006e 	cdpvs	0, 6, cr0, cr9, cr14, {3}
     bc4:	00786564 	rsbseq	r6, r8, r4, ror #10
     bc8:	42414e45 	submi	r4, r1, #1104	; 0x450
     bcc:	4300454c 	movwmi	r4, #1356	; 0x54c
     bd0:	425f4e41 	subsmi	r4, pc, #1040	; 0x410
     bd4:	43003153 	movwmi	r3, #339	; 0x153
     bd8:	425f4e41 	subsmi	r4, pc, #1040	; 0x410
     bdc:	43003253 	movwmi	r3, #595	; 0x253
     be0:	465f4e41 	ldrbmi	r4, [pc], -r1, asr #28
     be4:	65746c69 	ldrbvs	r6, [r4, #-3177]!	; 0xfffff397
     be8:	646f4d72 	strbtvs	r4, [pc], #-3442	; bf0 <startup-0x1ffff410>
     bec:	41430065 	cmpmi	r3, r5, rrx
     bf0:	6464614e 	strbtvs	r6, [r4], #-334	; 0xfffffeb2
     bf4:	746c6946 	strbtvc	r6, [ip], #-2374	; 0xfffff6ba
     bf8:	61487265 	cmpvs	r8, r5, ror #4
     bfc:	656c646e 	strbvs	r6, [ip, #-1134]!	; 0xfffffb92
     c00:	69660072 	stmdbvs	r6!, {r1, r4, r5, r6}^
     c04:	7265746c 	rsbvc	r7, r5, #108, 8	; 0x6c000000
     c08:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
     c0c:	79545f4f 	ldmdbvc	r4, {r0, r1, r2, r3, r6, r8, r9, sl, fp, ip, lr}^
     c10:	65446570 	strbvs	r6, [r4, #-1392]	; 0xfffffa90
     c14:	49540066 	ldmdbmi	r4, {r1, r2, r5, r6}^
     c18:	555f314d 	ldrbpl	r3, [pc, #-333]	; ad3 <startup-0x1ffff52d>
     c1c:	49545f50 	ldmdbmi	r4, {r4, r6, r8, r9, sl, fp, ip, lr}^
     c20:	5f30314d 	svcpl	0x0030314d
     c24:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     c28:	4d544900 	vldrmi.16	s9, [r4, #-0]	; <UNPREDICTABLE>
     c2c:	4278525f 	rsbsmi	r5, r8, #-268435451	; 0xf0000005
     c30:	65666675 	strbvs	r6, [r6, #-1653]!	; 0xfffff98b
     c34:	41430072 	hvcmi	12290	; 0x3002
     c38:	6c69464e 	stclvs	6, cr4, [r9], #-312	; 0xfffffec8
     c3c:	00726574 	rsbseq	r6, r2, r4, ror r5
     c40:	6f696e75 	svcvs	0x00696e75
     c44:	73614d6e 	cmnvc	r1, #7040	; 0x1b80
     c48:	544f006b 	strbpl	r0, [pc], #-107	; c50 <startup-0x1ffff3b0>
     c4c:	53485f47 	movtpl	r5, #36679	; 0x8f47
     c50:	3150455f 	cmpcc	r0, pc, asr r5
     c54:	54554f5f 	ldrbpl	r4, [r5], #-3935	; 0xfffff0a1
     c58:	5152495f 	cmppl	r2, pc, asr r9
     c5c:	4f4d006e 	svcmi	0x004d006e
     c60:	00524544 	subseq	r4, r2, r4, asr #10
     c64:	4349564e 	movtmi	r5, #38478	; 0x964e
     c68:	7465535f 	strbtvc	r5, [r5], #-863	; 0xfffffca1
     c6c:	6f697250 	svcvs	0x00697250
     c70:	79746972 	ldmdbvc	r4!, {r1, r4, r5, r6, r8, fp, sp, lr}^
     c74:	4e414300 	cdpmi	3, 4, cr4, cr1, cr0, {0}
     c78:	58525f31 	ldmdapl	r2, {r0, r4, r5, r8, r9, sl, fp, ip, lr}^
     c7c:	52495f31 	subpl	r5, r9, #49, 30	; 0xc4
     c80:	47006e51 	smlsdmi	r0, r1, lr, r6
     c84:	5f4f4950 	svcpl	0x004f4950
     c88:	64507550 	ldrbvs	r7, [r0], #-1360	; 0xfffffab0
     c8c:	0050555f 	subseq	r5, r0, pc, asr r5
     c90:	49545845 	ldmdbmi	r4, {r0, r2, r6, fp, ip, lr}^
     c94:	5f355f39 	svcpl	0x00355f39
     c98:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     c9c:	49564e00 	ldmdbmi	r6, {r9, sl, fp, lr}^
     ca0:	6e495f43 	cdpvs	15, 4, cr5, cr9, cr3, {2}
     ca4:	79547469 	ldmdbvc	r4, {r0, r3, r5, r6, sl, ip, sp, lr}^
     ca8:	65446570 	strbvs	r6, [r4, #-1392]	; 0xfffffa90
     cac:	68730066 	ldmdavs	r3!, {r1, r2, r5, r6}^
     cb0:	2074726f 	rsbscs	r7, r4, pc, ror #4
     cb4:	69736e75 	ldmdbvs	r3!, {r0, r2, r4, r5, r6, r9, sl, fp, sp, lr}^
     cb8:	64656e67 	strbtvs	r6, [r5], #-3687	; 0xfffff199
     cbc:	746e6920 	strbtvc	r6, [lr], #-2336	; 0xfffff6e0
     cc0:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
     cc4:	43435f38 	movtmi	r5, #16184	; 0x3f38
     cc8:	5152495f 	cmppl	r2, pc, asr r9
     ccc:	4453006e 	ldrbmi	r0, [r3], #-110	; 0xffffff92
     cd0:	495f4f49 	ldmdbmi	pc, {r0, r3, r6, r8, r9, sl, fp, lr}^	; <UNPREDICTABLE>
     cd4:	006e5152 	rsbeq	r5, lr, r2, asr r1
     cd8:	43415043 	movtmi	r5, #4163	; 0x1043
     cdc:	53490052 	movtpl	r0, #36946	; 0x9052
     ce0:	45005250 	strmi	r5, [r0, #-592]	; 0xfffffdb0
     ce4:	33495458 	movtcc	r5, #37976	; 0x9458
     ce8:	5152495f 	cmppl	r2, pc, asr r9
     cec:	6550006e 	ldrbvs	r0, [r0, #-110]	; 0xffffff92
     cf0:	5653646e 	ldrbpl	r6, [r3], -lr, ror #8
     cf4:	5152495f 	cmppl	r2, pc, asr r9
     cf8:	544f006e 	strbpl	r0, [pc], #-110	; d00 <startup-0x1ffff300>
     cfc:	53485f47 	movtpl	r5, #36679	; 0x8f47
     d00:	3150455f 	cmpcc	r0, pc, asr r5
     d04:	5f4e495f 	svcpl	0x004e495f
     d08:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     d0c:	78547300 	ldmdavc	r4, {r8, r9, ip, sp, lr}^
     d10:	6c69614d 	stfvse	f6, [r9], #-308	; 0xfffffecc
     d14:	00786f42 	rsbseq	r6, r8, r2, asr #30
     d18:	31414d44 	cmpcc	r1, r4, asr #26
     d1c:	7274535f 	rsbsvc	r5, r4, #2080374785	; 0x7c000001
     d20:	376d6165 	strbcc	r6, [sp, -r5, ror #2]!
     d24:	5152495f 	cmppl	r2, pc, asr r9
     d28:	5f5f006e 	svcpl	0x005f006e
     d2c:	33746e69 	cmncc	r4, #1680	; 0x690
     d30:	00745f32 	rsbseq	r5, r4, r2, lsr pc
     d34:	52455349 	subpl	r5, r5, #603979777	; 0x24000001
     d38:	4e414300 	cdpmi	3, 4, cr4, cr1, cr0, {0}
     d3c:	6c69465f 	stclvs	6, cr4, [r9], #-380	; 0xfffffe84
     d40:	49726574 	ldmdbmi	r2!, {r2, r4, r5, r6, r8, sl, sp, lr}^
     d44:	5474696e 	ldrbtpl	r6, [r4], #-2414	; 0xfffff692
     d48:	44657079 	strbtmi	r7, [r5], #-121	; 0xffffff87
     d4c:	52006665 	andpl	r6, r0, #105906176	; 0x6500000
     d50:	00525444 	subseq	r5, r2, r4, asr #8
     d54:	5f4e4143 	svcpl	0x004e4143
     d58:	50465854 	subpl	r5, r6, r4, asr r8
     d5c:	54445400 	strbpl	r5, [r4], #-1024	; 0xfffffc00
     d60:	65730052 	ldrbvs	r0, [r3, #-82]!	; 0xffffffae
     d64:	73655374 	cmnvc	r5, #116, 6	; 0xd0000001
     d68:	6e6f6973 			; <UNDEFINED> instruction: 0x6e6f6973
     d6c:	44006449 	strmi	r6, [r0], #-1097	; 0xfffffbb7
     d70:	5f32414d 	svcpl	0x0032414d
     d74:	65727453 	ldrbvs	r7, [r2, #-1107]!	; 0xfffffbad
     d78:	5f326d61 	svcpl	0x00326d61
     d7c:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     d80:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
     d84:	61465f4f 	cmpvs	r6, pc, asr #30
     d88:	535f7473 	cmppl	pc, #1929379840	; 0x73000000
     d8c:	64656570 	strbtvs	r6, [r5], #-1392	; 0xfffffa90
     d90:	4e414300 	cdpmi	3, 4, cr4, cr1, cr0, {0}
     d94:	4965445f 	stmdbmi	r5!, {r0, r1, r2, r3, r4, r6, sl, lr}^
     d98:	0074696e 	rsbseq	r6, r4, lr, ror #18
     d9c:	5f4e4143 	svcpl	0x004e4143
     da0:	61656c43 	cmnvs	r5, r3, asr #24
     da4:	616c4672 	smcvs	50274	; 0xc462
     da8:	78520067 	ldmdavc	r2, {r0, r1, r2, r5, r6}^
     dac:	7373654d 	cmnvc	r3, #322961408	; 0x13400000
     db0:	00656761 	rsbeq	r6, r5, r1, ror #14
     db4:	552f3a43 	strpl	r3, [pc, #-2627]!	; 379 <startup-0x1ffffc87>
     db8:	73726573 	cmnvc	r2, #482344960	; 0x1cc00000
     dbc:	6164412f 	cmnvs	r4, pc, lsr #2
     dc0:	4f2f746d 	svcmi	0x002f746d
     dc4:	7244656e 	subvc	r6, r4, #461373440	; 0x1b800000
     dc8:	2f657669 	svccs	0x00657669
     dcc:	756b6f44 	strbvc	r6, [fp, #-3908]!	; 0xfffff0bc
     dd0:	746e656d 	strbtvc	r6, [lr], #-1389	; 0xfffffa93
     dd4:	7469472f 	strbtvc	r4, [r9], #-1839	; 0xfffff8d1
     dd8:	2f627548 	svccs	0x00627548
     ddc:	32544144 	subscc	r4, r4, #68, 2
     de0:	4c2d3039 	stcmi	0, cr3, [sp], #-228	; 0xffffff1c
     de4:	736d7261 	cmnvc	sp, #268435462	; 0x10000006
     de8:	65747379 	ldrbvs	r7, [r4, #-889]!	; 0xfffffc87
     dec:	6f6b2f6d 	svcvs	0x006b2f6d
     df0:	696c2f64 	stmdbvs	ip!, {r2, r5, r6, r8, r9, sl, fp, sp}^
     df4:	54532f62 	ldrbpl	r2, [r3], #-3938	; 0xfffff09e
     df8:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
     dfc:	696c5f34 	stmdbvs	ip!, {r2, r4, r5, r8, r9, sl, fp, ip, lr}^
     e00:	54532f62 	ldrbpl	r2, [r3], #-3938	; 0xfffff09e
     e04:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
     e08:	5f787834 	svcpl	0x00787834
     e0c:	50647453 	rsbpl	r7, r4, r3, asr r4
     e10:	70697265 	rsbvc	r7, r9, r5, ror #4
     e14:	72445f68 	subvc	r5, r4, #104, 30	; 0x1a0
     e18:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
     e1c:	6372732f 	cmnvs	r2, #-1140850688	; 0xbc000000
     e20:	6d74732f 	ldclvs	3, cr7, [r4, #-188]!	; 0xffffff44
     e24:	34663233 	strbtcc	r3, [r6], #-563	; 0xfffffdcd
     e28:	635f7878 	cmpvs	pc, #120, 16	; 0x780000
     e2c:	632e6e61 			; <UNDEFINED> instruction: 0x632e6e61
     e30:	4e414300 	cdpmi	3, 4, cr4, cr1, cr0, {0}
     e34:	7274535f 	rsbsvc	r5, r4, #2080374785	; 0x7c000001
     e38:	49746375 	ldmdbmi	r4!, {r0, r2, r4, r5, r6, r8, r9, sp, lr}^
     e3c:	0074696e 	rsbseq	r6, r4, lr, ror #18
     e40:	65656c73 	strbvs	r6, [r5, #-3187]!	; 0xfffff38d
     e44:	61747370 	cmnvs	r4, r0, ror r3
     e48:	00737574 	rsbseq	r7, r3, r4, ror r5
     e4c:	5f4e4143 	svcpl	0x004e4143
     e50:	746c6946 	strbtvc	r6, [ip], #-2374	; 0xfffff6ba
     e54:	6e497265 	cdpvs	2, 4, cr7, cr9, cr5, {3}
     e58:	74537469 	ldrbvc	r7, [r3], #-1129	; 0xfffffb97
     e5c:	74637572 	strbtvc	r7, [r3], #-1394	; 0xfffffa8e
     e60:	4e414300 	cdpmi	3, 4, cr4, cr1, cr0, {0}
     e64:	4649465f 			; <UNDEFINED> instruction: 0x4649465f
     e68:	6c65524f 	sfmvs	f5, 2, [r5], #-316	; 0xfffffec4
     e6c:	65736165 	ldrbvs	r6, [r3, #-357]!	; 0xfffffe9b
     e70:	4e414300 	cdpmi	3, 4, cr4, cr1, cr0, {0}
     e74:	4354545f 	cmpmi	r4, #1593835520	; 0x5f000000
     e78:	6f4d6d6f 	svcvs	0x004d6d6f
     e7c:	6d436564 	cfstr64vs	mvdx6, [r3, #-400]	; 0xfffffe70
     e80:	656d0064 	strbvs	r0, [sp, #-100]!	; 0xffffff9c
     e84:	67617373 			; <UNDEFINED> instruction: 0x67617373
     e88:	65705f65 	ldrbvs	r5, [r0, #-3941]!	; 0xfffff09b
     e8c:	6e69646e 	cdpvs	4, 6, cr6, cr9, cr14, {3}
     e90:	41430067 	cmpmi	r3, r7, rrx
     e94:	72545f4e 	subsvc	r5, r4, #312	; 0x138
     e98:	6d736e61 	ldclvs	14, cr6, [r3, #-388]!	; 0xfffffe7c
     e9c:	74537469 	ldrbvc	r7, [r3], #-1129	; 0xfffffb97
     ea0:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
     ea4:	4e414300 	cdpmi	3, 4, cr4, cr1, cr0, {0}
     ea8:	6e61425f 	mcrvs	2, 3, r4, cr1, cr15, {2}
     eac:	6d754e6b 	ldclvs	14, cr4, [r5, #-428]!	; 0xfffffe54
     eb0:	00726562 	rsbseq	r6, r2, r2, ror #10
     eb4:	5f4e4143 	svcpl	0x004e4143
     eb8:	4c746547 	cfldr64mi	mvdx6, [r4], #-284	; 0xfffffee4
     ebc:	72544253 	subsvc	r4, r4, #805306373	; 0x30000005
     ec0:	6d736e61 	ldclvs	14, cr6, [r3, #-388]!	; 0xfffffe7c
     ec4:	72457469 	subvc	r7, r5, #1761607680	; 0x69000000
     ec8:	43726f72 	cmnmi	r2, #456	; 0x1c8
     ecc:	746e756f 	strbtvc	r7, [lr], #-1391	; 0xfffffa91
     ed0:	43007265 	movwmi	r7, #613	; 0x265
     ed4:	475f4e41 	ldrbmi	r4, [pc, -r1, asr #28]
     ed8:	614c7465 	cmpvs	ip, r5, ror #8
     edc:	72457473 	subvc	r7, r5, #1929379840	; 0x73000000
     ee0:	43726f72 	cmnmi	r2, #456	; 0x1c8
     ee4:	0065646f 	rsbeq	r6, r5, pc, ror #8
     ee8:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xfffff1b7
     eec:	74617453 	strbtvc	r7, [r1], #-1107	; 0xfffffbad
     ef0:	43007375 	movwmi	r7, #885	; 0x375
     ef4:	575f4e41 	ldrbpl	r4, [pc, -r1, asr #28]
     ef8:	55656b61 	strbpl	r6, [r5, #-2913]!	; 0xfffff49f
     efc:	654e0070 	strbvs	r0, [lr, #-112]	; 0xffffff90
     f00:	61745377 	cmnvs	r4, r7, ror r3
     f04:	43006574 	movwmi	r6, #1396	; 0x574
     f08:	435f4e41 	cmpmi	pc, #1040	; 0x410
     f0c:	65636e61 	strbvs	r6, [r3, #-3681]!	; 0xfffff19f
     f10:	6172546c 	cmnvs	r2, ip, ror #8
     f14:	696d736e 	stmdbvs	sp!, {r1, r2, r3, r5, r6, r8, r9, ip, sp, lr}^
     f18:	41430074 	hvcmi	12292	; 0x3004
     f1c:	6e495f4e 	cdpvs	15, 4, cr5, cr9, cr14, {2}
     f20:	74537469 	ldrbvc	r7, [r3], #-1129	; 0xfffffb97
     f24:	74637572 	strbtvc	r7, [r3], #-1394	; 0xfffffa8e
     f28:	4d785400 	cfldrdmi	mvd5, [r8, #-0]
     f2c:	61737365 	cmnvs	r3, r5, ror #6
     f30:	43006567 	movwmi	r6, #1383	; 0x567
     f34:	4d5f4e41 	ldclmi	14, cr4, [pc, #-260]	; e38 <startup-0x1ffff1c8>
     f38:	61737365 	cmnvs	r3, r5, ror #6
     f3c:	65506567 	ldrbvs	r6, [r0, #-1383]	; 0xfffffa99
     f40:	6e69646e 	cdpvs	4, 6, cr6, cr9, cr14, {3}
     f44:	41430067 	cmpmi	r3, r7, rrx
     f48:	6c535f4e 	mrrcvs	15, 4, r5, r3, cr14
     f4c:	53657661 	cmnpl	r5, #101711872	; 0x6100000
     f50:	74726174 	ldrbtvc	r6, [r2], #-372	; 0xfffffe8c
     f54:	6b6e6142 	blvs	1b99464 <startup-0x1e466b9c>
     f58:	4e414300 	cdpmi	3, 4, cr4, cr1, cr0, {0}
     f5c:	65704f5f 	ldrbvs	r4, [r0, #-3935]!	; 0xfffff0a1
     f60:	69746172 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, sp, lr}^
     f64:	6f4d676e 	svcvs	0x004d676e
     f68:	65526564 	ldrbvs	r6, [r2, #-1380]	; 0xfffffa9c
     f6c:	73657571 	cmnvc	r5, #473956352	; 0x1c400000
     f70:	69740074 	ldmdbvs	r4!, {r2, r4, r5, r6}^
     f74:	756f656d 	strbvc	r6, [pc, #-1389]!	; a0f <startup-0x1ffff5f1>
     f78:	41430074 	hvcmi	12292	; 0x3004
     f7c:	72545f4e 	subsvc	r5, r4, #312	; 0x138
     f80:	6d736e61 	ldclvs	14, cr6, [r3, #-388]!	; 0xfffffe7c
     f84:	43007469 	movwmi	r7, #1129	; 0x469
     f88:	495f4e41 	ldmdbmi	pc, {r0, r6, r9, sl, fp, lr}^	; <UNPREDICTABLE>
     f8c:	41430054 	qdaddmi	r0, r4, r3
     f90:	6e495f4e 	cdpvs	15, 4, cr5, cr9, cr14, {2}
     f94:	43007469 	movwmi	r7, #1129	; 0x469
     f98:	535f4e41 	cmppl	pc, #1040	; 0x410
     f9c:	7065656c 	rsbvc	r6, r5, ip, ror #10
     fa0:	5f744900 	svcpl	0x00744900
     fa4:	00746942 	rsbseq	r6, r4, r2, asr #18
     fa8:	5f4e4143 	svcpl	0x004e4143
     fac:	49746547 	ldmdbmi	r4!, {r0, r1, r2, r6, r8, sl, sp, lr}^
     fb0:	61745354 	cmnvs	r4, r4, asr r3
     fb4:	00737574 	rsbseq	r7, r3, r4, ror r5
     fb8:	5f4e4143 	svcpl	0x004e4143
     fbc:	47414c46 	strbmi	r4, [r1, -r6, asr #24]
     fc0:	69617700 	stmdbvs	r1!, {r8, r9, sl, ip, sp, lr}^
     fc4:	6c735f74 	ldclvs	15, cr5, [r3], #-464	; 0xfffffe30
     fc8:	46006b61 	strmi	r6, [r0], -r1, ror #22
     fcc:	4e4f4649 	cdpmi	6, 4, cr4, cr15, cr9, {2}
     fd0:	65626d75 	strbvs	r6, [r2, #-3445]!	; 0xfffff28b
     fd4:	72650072 	rsbvc	r0, r5, #114	; 0x72
     fd8:	63726f72 	cmnvs	r2, #456	; 0x1c8
     fdc:	0065646f 	rsbeq	r6, r5, pc, ror #8
     fe0:	646e6570 	strbtvs	r6, [lr], #-1392	; 0xfffffa90
     fe4:	62676e69 	rsbvs	r6, r7, #1680	; 0x690
     fe8:	74737469 	ldrbtvc	r7, [r3], #-1129	; 0xfffffb97
     fec:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
     ff0:	4e414300 	cdpmi	3, 4, cr4, cr1, cr0, {0}
     ff4:	6765525f 			; <UNDEFINED> instruction: 0x6765525f
     ff8:	4e414300 	cdpmi	3, 4, cr4, cr1, cr0, {0}
     ffc:	4742445f 	smlsldmi	r4, r2, pc, r4	; <UNPREDICTABLE>
    1000:	65657246 	strbvs	r7, [r5, #-582]!	; 0xfffffdba
    1004:	4300657a 	movwmi	r6, #1402	; 0x57a
    1008:	4f5f4e41 	svcmi	0x005f4e41
    100c:	61726570 	cmnvs	r2, r0, ror r5
    1010:	676e6974 			; <UNDEFINED> instruction: 0x676e6974
    1014:	65646f4d 	strbvs	r6, [r4, #-3917]!	; 0xfffff0b3
    1018:	616c6600 	cmnvs	ip, r0, lsl #12
    101c:	706d7467 	rsbvc	r7, sp, r7, ror #8
    1020:	4e414300 	cdpmi	3, 4, cr4, cr1, cr0, {0}
    1024:	7465475f 	strbtvc	r4, [r5], #-1887	; 0xfffff8a1
    1028:	67616c46 	strbvs	r6, [r1, -r6, asr #24]!
    102c:	74617453 	strbtvc	r7, [r1], #-1107	; 0xfffffbad
    1030:	43007375 	movwmi	r7, #885	; 0x375
    1034:	495f4e41 	ldmdbmi	pc, {r0, r6, r9, sl, fp, lr}^	; <UNPREDICTABLE>
    1038:	6e6f4354 	mcrvs	3, 3, r4, cr15, cr4, {2}
    103c:	00676966 	rsbeq	r6, r7, r6, ror #18
    1040:	784e4143 	stmdavc	lr, {r0, r1, r6, r8, lr}^
    1044:	4e414300 	cdpmi	3, 4, cr4, cr1, cr0, {0}
    1048:	6365525f 	cmnvs	r5, #-268435451	; 0xf0000005
    104c:	65766965 	ldrbvs	r6, [r6, #-2405]!	; 0xfffff69b
    1050:	61725400 	cmnvs	r2, r0, lsl #8
    1054:	696d736e 	stmdbvs	sp!, {r1, r2, r3, r5, r6, r8, r9, ip, sp, lr}^
    1058:	69614d74 	stmdbvs	r1!, {r2, r4, r5, r6, r8, sl, fp, lr}^
    105c:	786f626c 	stmdavc	pc!, {r2, r3, r5, r6, r9, sp, lr}^	; <UNPREDICTABLE>
    1060:	65684300 	strbvs	r4, [r8, #-768]!	; 0xfffffd00
    1064:	54496b63 	strbpl	r6, [r9], #-2915	; 0xfffff49d
    1068:	74617453 	strbtvc	r7, [r1], #-1107	; 0xfffffbad
    106c:	43007375 	movwmi	r7, #885	; 0x375
    1070:	435f4e41 	cmpmi	pc, #1040	; 0x410
    1074:	7261656c 	rsbvc	r6, r1, #108, 10	; 0x1b000000
    1078:	65505449 	ldrbvs	r5, [r0, #-1097]	; 0xfffffbb7
    107c:	6e69646e 	cdpvs	4, 6, cr6, cr9, cr14, {3}
    1080:	74694267 	strbtvc	r4, [r9], #-615	; 0xfffffd99
    1084:	61727400 	cmnvs	r2, r0, lsl #8
    1088:	696d736e 	stmdbvs	sp!, {r1, r2, r3, r5, r6, r8, r9, ip, sp, lr}^
    108c:	616d5f74 	smcvs	54772	; 0xd5f4
    1090:	6f626c69 	svcvs	0x00626c69
    1094:	41430078 	hvcmi	12296	; 0x3008
    1098:	65475f4e 	strbvs	r5, [r7, #-3918]	; 0xfffff0b2
    109c:	63655274 	cmnvs	r5, #116, 4	; 0x40000007
    10a0:	65766965 	ldrbvs	r6, [r6, #-2405]!	; 0xfffff69b
    10a4:	6f727245 	svcvs	0x00727245
    10a8:	756f4372 	strbvc	r4, [pc, #-882]!	; d3e <startup-0x1ffff2c2>
    10ac:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
    10b0:	6c696600 	stclvs	6, cr6, [r9], #-0
    10b4:	5f726574 	svcpl	0x00726574
    10b8:	626d756e 	rsbvs	r7, sp, #461373440	; 0x1b800000
    10bc:	625f7265 	subsvs	r7, pc, #1342177286	; 0x50000006
    10c0:	705f7469 	subsvc	r7, pc, r9, ror #8
    10c4:	7700736f 	strvc	r7, [r0, -pc, ror #6]
    10c8:	75656b61 	strbvc	r6, [r5, #-2913]!	; 0xfffff49f
    10cc:	61747370 	cmnvs	r4, r0, ror r3
    10d0:	00737574 	rsbseq	r7, r3, r4, ror r5
    10d4:	5f4e4143 	svcpl	0x004e4143
    10d8:	746c6946 	strbtvc	r6, [ip], #-2374	; 0xfffff6ba
    10dc:	6e497265 	cdpvs	2, 4, cr7, cr9, cr5, {3}
    10e0:	77007469 	strvc	r7, [r0, -r9, ror #8]
    10e4:	5f746961 	svcpl	0x00746961
    10e8:	006b6361 	rsbeq	r6, fp, r1, ror #6
    10ec:	706c6c70 	rsbvc	r6, ip, r0, ror ip
    10f0:	4c4c5000 	marmi	acc0, r5, ip
    10f4:	43533249 	cmpmi	r3, #-1879048188	; 0x90000004
    10f8:	00524746 	subseq	r4, r2, r6, asr #14
    10fc:	5f434352 	svcpl	0x00434352
    1100:	43533249 	cmpmi	r3, #-1879048188	; 0x90000004
    1104:	6f434b4c 	svcvs	0x00434b4c
    1108:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    110c:	636f6e00 	cmnvs	pc, #0, 28
    1110:	52006469 	andpl	r6, r0, #1761607680	; 0x69000000
    1114:	475f4343 	ldrbmi	r4, [pc, -r3, asr #6]
    1118:	6c437465 	cfstrdvs	mvd7, [r3], {101}	; 0x65
    111c:	736b636f 	cmnvc	fp, #-1140850687	; 0xbc000001
    1120:	71657246 	cmnvc	r5, r6, asr #4
    1124:	4c434800 	mcrrmi	8, 0, r4, r3, cr0
    1128:	72465f4b 	subvc	r5, r6, #300	; 0x12c
    112c:	65757165 	ldrbvs	r7, [r5, #-357]!	; 0xfffffe9b
    1130:	0079636e 	rsbseq	r6, r9, lr, ror #6
    1134:	5f434352 	svcpl	0x00434352
    1138:	32425041 	subcc	r5, r2, #65	; 0x41
    113c:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
    1140:	6c436870 	mcrrvs	8, 7, r6, r3, cr0
    1144:	4c6b636f 	stclmi	3, cr6, [fp], #-444	; 0xfffffe44
    1148:	646f4d50 	strbtvs	r4, [pc], #-3408	; 1150 <startup-0x1fffeeb0>
    114c:	646d4365 	strbtvs	r4, [sp], #-869	; 0xfffffc9b
    1150:	43435200 	movtmi	r5, #12800	; 0x3200
    1154:	4248415f 	submi	r4, r8, #-1073741801	; 0xc0000017
    1158:	72655032 	rsbvc	r5, r5, #50	; 0x32
    115c:	43687069 	cmnmi	r8, #105	; 0x69
    1160:	6b636f6c 	blvs	18dcf18 <startup-0x1e7230e8>
    1164:	6f4d504c 	svcvs	0x004d504c
    1168:	6d436564 	cfstr64vs	mvdx6, [r3, #-400]	; 0xfffffe70
    116c:	6e690064 	cdpvs	0, 6, cr0, cr9, cr4, {3}
    1170:	725f7469 	subsvc	r7, pc, #1761607680	; 0x69000000
    1174:	5200676e 	andpl	r6, r0, #28835840	; 0x1b80000
    1178:	415f4343 	cmpmi	pc, r3, asr #6
    117c:	50314250 	eorspl	r4, r1, r0, asr r2
    1180:	70697265 	rsbvc	r7, r9, r5, ror #4
    1184:	73655268 	cmnvc	r5, #104, 4	; 0x80000006
    1188:	6d437465 	cfstrdvs	mvd7, [r3, #-404]	; 0xfffffe6c
    118c:	43520064 	cmpmi	r2, #100	; 0x64
    1190:	6f4d5f43 	svcvs	0x004d5f43
    1194:	52006564 	andpl	r6, r0, #100, 10	; 0x19000000
    1198:	525f4343 	subspl	r4, pc, #201326593	; 0xc000001
    119c:	4c434354 	mcrrmi	3, 5, r4, r3, cr4
    11a0:	756f534b 	strbvc	r5, [pc, #-843]!	; e5d <startup-0x1ffff1a3>
    11a4:	00656372 	rsbeq	r6, r5, r2, ror r3
    11a8:	5f434352 	svcpl	0x00434352
    11ac:	32424841 	subcc	r4, r2, #4259840	; 0x410000
    11b0:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
    11b4:	6c436870 	mcrrvs	8, 7, r6, r3, cr0
    11b8:	436b636f 	cmnmi	fp, #-1140850687	; 0xbc000001
    11bc:	6400646d 	strvs	r6, [r0], #-1133	; 0xfffffb93
    11c0:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
    11c4:	6f446e00 	svcvs	0x00446e00
    11c8:	0073726f 	rsbseq	r7, r3, pc, ror #4
    11cc:	65526469 	ldrbvs	r6, [r2, #-1129]	; 0xfffffb97
    11d0:	73657571 	cmnvc	r5, #473956352	; 0x1c400000
    11d4:	43520074 	cmpmi	r2, #116	; 0x74
    11d8:	4c505f43 	mrrcmi	15, 4, r5, r0, cr3
    11dc:	5332494c 	teqpl	r2, #76, 18	; 0x130000
    11e0:	00646d43 	rsbeq	r6, r4, r3, asr #26
    11e4:	5f434352 	svcpl	0x00434352
    11e8:	4b4c4348 	blmi	1311f10 <startup-0x1ecee0f0>
    11ec:	6d697400 	cfstrdvs	mvd7, [r9, #-0]
    11f0:	616c5f65 	cmnvs	ip, r5, ror #30
    11f4:	41006d72 	tstmi	r0, r2, ror sp
    11f8:	4c324248 	lfmmi	f4, 4, [r2], #-288	; 0xfffffee0
    11fc:	524e4550 	subpl	r4, lr, #80, 10	; 0x14000000
    1200:	43435200 	movtmi	r5, #12800	; 0x3200
    1204:	4941535f 	stmdbmi	r1, {r0, r1, r2, r3, r4, r6, r8, r9, ip, lr}^
    1208:	534c4c50 	movtpl	r4, #52304	; 0xcc50
    120c:	6c434941 	mcrrvs	9, 4, r4, r3, cr1	; <UNPREDICTABLE>
    1210:	7669446b 	strbtvc	r4, [r9], -fp, ror #8
    1214:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    1218:	69006769 	stmdbvs	r0, {r0, r3, r5, r6, r8, r9, sl, sp, lr}
    121c:	5f74696e 	svcpl	0x0074696e
    1220:	4f495047 	svcmi	0x00495047
    1224:	726f505f 	rsbvc	r5, pc, #95	; 0x5f
    1228:	53007374 	movwpl	r7, #884	; 0x374
    122c:	69547379 	ldmdbvs	r4, {r0, r3, r4, r5, r6, r8, r9, ip, sp, lr}^
    1230:	485f6b63 	ldmdami	pc, {r0, r1, r5, r6, r8, r9, fp, sp, lr}^	; <UNPREDICTABLE>
    1234:	6c646e61 	stclvs	14, cr6, [r4], #-388	; 0xfffffe7c
    1238:	52007265 	andpl	r7, r0, #1342177286	; 0x50000006
    123c:	4c5f4343 	mrrcmi	3, 4, r4, pc, cr3	; <UNPREDICTABLE>
    1240:	43434454 	movtmi	r4, #13396	; 0x3454
    1244:	69444b4c 	stmdbvs	r4, {r2, r3, r6, r8, r9, fp, lr}^
    1248:	6e6f4376 	mcrvs	3, 3, r4, cr15, cr6, {3}
    124c:	00676966 	rsbeq	r6, r7, r6, ror #18
    1250:	5f434352 	svcpl	0x00434352
    1254:	33424841 	movtcc	r4, #10305	; 0x2841
    1258:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
    125c:	65526870 	ldrbvs	r6, [r2, #-2160]	; 0xfffff790
    1260:	43746573 	cmnmi	r4, #482344960	; 0x1cc00000
    1264:	5200646d 	andpl	r6, r0, #1828716544	; 0x6d000000
    1268:	505f4343 	subspl	r4, pc, r3, asr #6
    126c:	324b4c43 	subcc	r4, fp, #17152	; 0x4300
    1270:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    1274:	63006769 	movwvs	r6, #1897	; 0x769
    1278:	72746e6f 	rsbsvc	r6, r4, #1776	; 0x6f0
    127c:	69626c6f 	stmdbvs	r2!, {r0, r1, r2, r3, r5, r6, sl, fp, sp, lr}^
    1280:	52007374 	andpl	r7, r0, #116, 6	; 0xd0000001
    1284:	445f4343 	ldrbmi	r4, [pc], #-835	; 128c <startup-0x1fffed74>
    1288:	696e4965 	stmdbvs	lr!, {r0, r2, r5, r6, r8, fp, lr}^
    128c:	43520074 	cmpmi	r2, #116	; 0x74
    1290:	41535f43 	cmpmi	r3, r3, asr #30
    1294:	6f6c4249 	svcvs	0x006c4249
    1298:	43426b63 	movtmi	r6, #11107	; 0x2b63
    129c:	6f434b4c 	svcvs	0x00434b4c
    12a0:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    12a4:	42504100 	subsmi	r4, r0, #0, 2
    12a8:	524e4532 	subpl	r4, lr, #209715200	; 0xc800000
    12ac:	43435200 	movtmi	r5, #12800	; 0x3200
    12b0:	7465475f 	strbtvc	r4, [r5], #-1887	; 0xfffff8a1
    12b4:	43535953 	cmpmi	r3, #1359872	; 0x14c000
    12b8:	6f534b4c 	svcvs	0x00534b4c
    12bc:	65637275 	strbvs	r7, [r3, #-629]!	; 0xfffffd8b
    12c0:	42484100 	submi	r4, r8, #0, 2
    12c4:	45504c31 	ldrbmi	r4, [r0, #-3121]	; 0xfffff3cf
    12c8:	5200524e 	andpl	r5, r0, #-536870908	; 0xe0000004
    12cc:	505f4343 	subspl	r4, pc, r3, asr #6
    12d0:	32494c4c 	subcc	r4, r9, #76, 24	; 0x4c00
    12d4:	76694453 			; <UNDEFINED> instruction: 0x76694453
    12d8:	43520051 	cmpmi	r2, #81	; 0x51
    12dc:	48415f43 	stmdami	r1, {r0, r1, r6, r8, r9, sl, fp, ip, lr}^
    12e0:	65503342 	ldrbvs	r3, [r0, #-834]	; 0xfffffcbe
    12e4:	68706972 	ldmdavs	r0!, {r1, r4, r5, r6, r8, fp, sp, lr}^
    12e8:	4b434400 	blmi	10d22f0 <startup-0x1ef2dd10>
    12ec:	52474643 	subpl	r4, r7, #70254592	; 0x4300000
    12f0:	43435200 	movtmi	r5, #12800	; 0x3200
    12f4:	4f434d5f 	svcmi	0x00434d5f
    12f8:	76694432 			; <UNDEFINED> instruction: 0x76694432
    12fc:	43435200 	movtmi	r5, #12800	; 0x3200
    1300:	5359535f 	cmppl	r9, #2080374785	; 0x7c000001
    1304:	534b4c43 	movtpl	r4, #48195	; 0xbc43
    1308:	6372756f 	cmnvs	r2, #465567744	; 0x1bc00000
    130c:	43520065 	cmpmi	r2, #101	; 0x65
    1310:	4c505f43 	mrrcmi	15, 4, r5, r0, cr3
    1314:	756f534c 	strbvc	r5, [pc, #-844]!	; fd0 <startup-0x1ffff030>
    1318:	00656372 	rsbeq	r6, r5, r2, ror r3
    131c:	5f434352 	svcpl	0x00434352
    1320:	31425041 	cmpcc	r2, r1, asr #32
    1324:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
    1328:	6c436870 	mcrrvs	8, 7, r6, r3, cr0
    132c:	436b636f 	cmnmi	fp, #-1140850687	; 0xbc000001
    1330:	5200646d 	andpl	r6, r0, #1828716544	; 0x6d000000
    1334:	52455345 	subpl	r5, r5, #335544321	; 0x14000001
    1338:	36444556 			; <UNDEFINED> instruction: 0x36444556
    133c:	43435200 	movtmi	r5, #12800	; 0x3200
    1340:	45534c5f 	ldrbmi	r4, [r3, #-3167]	; 0xfffff3a1
    1344:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    1348:	41006769 	tstmi	r0, r9, ror #14
    134c:	52314248 	eorspl	r4, r1, #72, 4	; 0x80000004
    1350:	00525453 	subseq	r5, r2, r3, asr r4
    1354:	5f434352 	svcpl	0x00434352
    1358:	32425041 	subcc	r5, r2, #65	; 0x41
    135c:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
    1360:	65526870 	ldrbvs	r6, [r2, #-2160]	; 0xfffff790
    1364:	43746573 	cmnmi	r4, #482344960	; 0x1cc00000
    1368:	7200646d 	andvc	r6, r0, #1828716544	; 0x6d000000
    136c:	72757465 	rsbsvc	r7, r5, #1694498816	; 0x65000000
    1370:	646f436e 	strbtvs	r4, [pc], #-878	; 1378 <startup-0x1fffec88>
    1374:	43520065 	cmpmi	r2, #101	; 0x65
    1378:	48415f43 	stmdami	r1, {r0, r1, r6, r8, r9, sl, fp, ip, lr}^
    137c:	65503342 	ldrbvs	r3, [r0, #-834]	; 0xfffffcbe
    1380:	68706972 	ldmdavs	r0!, {r1, r4, r5, r6, r8, fp, sp, lr}^
    1384:	636f6c43 	cmnvs	pc, #17152	; 0x4300
    1388:	4d504c6b 	ldclmi	12, cr4, [r0, #-428]	; 0xfffffe54
    138c:	4365646f 	cmnmi	r5, #1862270976	; 0x6f000000
    1390:	4100646d 	tstmi	r0, sp, ror #8
    1394:	45324248 	ldrmi	r4, [r2, #-584]!	; 0xfffffdb8
    1398:	5000524e 	andpl	r5, r0, lr, asr #4
    139c:	324b4c43 	subcc	r4, fp, #17152	; 0x4300
    13a0:	6572465f 	ldrbvs	r4, [r2, #-1631]!	; 0xfffff9a1
    13a4:	6e657571 	mcrvs	5, 3, r7, cr5, cr1, {3}
    13a8:	47007963 	strmi	r7, [r0, -r3, ror #18]
    13ac:	5f4f4950 	svcpl	0x004f4950
    13b0:	64616572 	strbtvs	r6, [r1], #-1394	; 0xfffffa8e
    13b4:	43435200 	movtmi	r5, #12800	; 0x3200
    13b8:	5359535f 	cmppl	r9, #2080374785	; 0x7c000001
    13bc:	004b4c43 	subeq	r4, fp, r3, asr #24
    13c0:	4b4c4350 	blmi	1312108 <startup-0x1ecedef8>
    13c4:	72465f31 	subvc	r5, r6, #49, 30	; 0xc4
    13c8:	65757165 	ldrbvs	r7, [r5, #-357]!	; 0xfffffe9b
    13cc:	0079636e 	rsbseq	r6, r9, lr, ror #6
    13d0:	4d4c4c50 	stclmi	12, cr4, [ip, #-320]	; 0xfffffec0
    13d4:	4c4c5000 	marmi	acc0, r5, ip
    13d8:	4c500050 	mrrcmi	0, 5, r0, r0, cr0	; <UNPREDICTABLE>
    13dc:	5200514c 	andpl	r5, r0, #76, 2
    13e0:	4c5f4343 	mrrcmi	3, 4, r4, pc, cr3	; <UNPREDICTABLE>
    13e4:	6d434953 	vstrvs.16	s9, [r3, #-166]	; 0xffffff5a	; <UNPREDICTABLE>
    13e8:	6c700064 	ldclvs	0, cr0, [r0], #-400	; 0xfffffe70
    13ec:	756f736c 	strbvc	r7, [pc, #-876]!	; 1088 <startup-0x1fffef78>
    13f0:	00656372 	rsbeq	r6, r5, r2, ror r3
    13f4:	756f6d61 	strbvc	r6, [pc, #-3425]!	; 69b <startup-0x1ffff965>
    13f8:	664f746e 	strbvs	r7, [pc], -lr, ror #8
    13fc:	69746341 	ldmdbvs	r4!, {r0, r6, r8, r9, sp, lr}^
    1400:	6f446576 	svcvs	0x00446576
    1404:	0073726f 	rsbseq	r7, r3, pc, ror #4
    1408:	5f434352 	svcpl	0x00434352
    140c:	4b4c4348 	blmi	1312134 <startup-0x1ecedecc>
    1410:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    1414:	52006769 	andpl	r6, r0, #27525120	; 0x1a40000
    1418:	485f4343 	ldmdami	pc, {r0, r1, r6, r8, r9, lr}^	; <UNPREDICTABLE>
    141c:	6f434553 	svcvs	0x00434553
    1420:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    1424:	43444200 	movtmi	r4, #16896	; 0x4200
    1428:	43520052 	cmpmi	r2, #82	; 0x52
    142c:	534c5f43 	movtpl	r5, #53059	; 0xcf43
    1430:	43520045 	cmpmi	r2, #69	; 0x45
    1434:	41535f43 	cmpmi	r3, r3, asr #30
    1438:	6f6c4249 	svcvs	0x006c4249
    143c:	43416b63 	movtmi	r6, #7011	; 0x1b63
    1440:	6f434b4c 	svcvs	0x00434b4c
    1444:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    1448:	61747300 	cmnvs	r4, r0, lsl #6
    144c:	70757472 	rsbsvc	r7, r5, r2, ror r4
    1450:	6e756f63 	cdpvs	15, 7, cr6, cr5, cr3, {3}
    1454:	00726574 	rsbseq	r6, r2, r4, ror r5
    1458:	5f434352 	svcpl	0x00434352
    145c:	534c4c50 	movtpl	r4, #52304	; 0xcc50
    1460:	6f434941 	svcvs	0x00434941
    1464:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    1468:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
    146c:	69505f4f 	ldmdbvs	r0, {r0, r1, r2, r3, r6, r8, r9, sl, fp, ip, lr}^
    1470:	5200736e 	andpl	r7, r0, #-1207959551	; 0xb8000001
    1474:	485f4343 	ldmdami	pc, {r0, r1, r6, r8, r9, lr}^	; <UNPREDICTABLE>
    1478:	52004553 	andpl	r4, r0, #348127232	; 0x14c00000
    147c:	4d5f4343 	ldclmi	3, cr4, [pc, #-268]	; 1378 <startup-0x1fffec88>
    1480:	43314f43 	teqmi	r1, #268	; 0x10c
    1484:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    1488:	43520067 	cmpmi	r2, #103	; 0x67
    148c:	50415f43 	subpl	r5, r1, r3, asr #30
    1490:	65503242 	ldrbvs	r3, [r0, #-578]	; 0xfffffdbe
    1494:	68706972 	ldmdavs	r0!, {r1, r4, r5, r6, r8, fp, sp, lr}^
    1498:	636f6c43 	cmnvs	pc, #17152	; 0x4300
    149c:	646d436b 	strbtvs	r4, [sp], #-875	; 0xfffffc95
    14a0:	43435200 	movtmi	r5, #12800	; 0x3200
    14a4:	4c4c505f 	mcrrmi	0, 5, r5, ip, cr15
    14a8:	44494153 	strbmi	r4, [r9], #-339	; 0xfffffead
    14ac:	00517669 	subseq	r7, r1, r9, ror #12
    14b0:	5f434352 	svcpl	0x00434352
    14b4:	534c4c50 	movtpl	r4, #52304	; 0xcc50
    14b8:	69444941 	stmdbvs	r4, {r0, r6, r8, fp, lr}^
    14bc:	52005276 	andpl	r5, r0, #1610612743	; 0x60000007
    14c0:	535f4343 	cmppl	pc, #201326593	; 0xc000001
    14c4:	6c424941 	mcrrvs	9, 4, r4, r2, cr1	; <UNPREDICTABLE>
    14c8:	426b636f 	rsbmi	r6, fp, #-1140850687	; 0xbc000001
    14cc:	534b4c43 	movtpl	r4, #48195	; 0xbc43
    14d0:	6372756f 	cmnvs	r2, #465567744	; 0x1bc00000
    14d4:	65730065 	ldrbvs	r0, [r3, #-101]!	; 0xffffff9b
    14d8:	6c41646e 	cfstrdvs	mvd6, [r1], {110}	; 0x6e
    14dc:	006d7261 	rsbeq	r7, sp, r1, ror #4
    14e0:	69646e72 	stmdbvs	r4!, {r1, r4, r5, r6, r9, sl, fp, sp, lr}^
    14e4:	43520064 	cmpmi	r2, #100	; 0x64
    14e8:	434d5f43 	movtmi	r5, #57155	; 0xdf43
    14ec:	6f43324f 	svcvs	0x0043324f
    14f0:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    14f4:	74656700 	strbtvc	r6, [r5], #-1792	; 0xfffff900
    14f8:	52006449 	andpl	r6, r0, #1224736768	; 0x49000000
    14fc:	495f4343 	ldmdbmi	pc, {r0, r1, r6, r8, r9, lr}^	; <UNPREDICTABLE>
    1500:	4c435332 	mcrrmi	3, 3, r5, r3, cr2
    1504:	756f534b 	strbvc	r5, [pc, #-843]!	; 11c1 <startup-0x1fffee3f>
    1508:	00656372 	rsbeq	r6, r5, r2, ror r3
    150c:	4f525245 	svcmi	0x00525245
    1510:	736d0052 	cmnvc	sp, #82	; 0x52
    1514:	6b636954 	blvs	18dba6c <startup-0x1e724594>
    1518:	43520073 	cmpmi	r2, #115	; 0x73
    151c:	43505f43 	cmpmi	r0, #268	; 0x10c
    1520:	43314b4c 	teqmi	r1, #76, 22	; 0x13000
    1524:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    1528:	69740067 	ldmdbvs	r4!, {r0, r1, r2, r5, r6}^
    152c:	00736b63 	rsbseq	r6, r3, r3, ror #22
    1530:	434c4c50 	movtmi	r4, #52304	; 0xcc50
    1534:	00524746 	subseq	r4, r2, r6, asr #14
    1538:	74736574 	ldrbtvc	r6, [r3], #-1396	; 0xfffffa8c
    153c:	0067734d 	rsbeq	r7, r7, sp, asr #6
    1540:	5f434352 	svcpl	0x00434352
    1544:	61656c43 	cmnvs	r5, r3, asr #24
    1548:	616c4672 	smcvs	50274	; 0xc462
    154c:	50410067 	subpl	r0, r1, r7, rrx
    1550:	42484142 	submi	r4, r8, #-2147483632	; 0x80000010
    1554:	73657250 	cmnvc	r5, #80, 4
    1558:	62615463 	rsbvs	r5, r1, #1660944384	; 0x63000000
    155c:	5200656c 	andpl	r6, r0, #108, 10	; 0x1b000000
    1560:	535f4343 	cmppl	pc, #201326593	; 0xc000001
    1564:	4c504941 	mrrcmi	9, 4, r4, r0, cr1	; <UNPREDICTABLE>
    1568:	5332494c 	teqpl	r2, #76, 18	; 0x130000
    156c:	446b6c43 	strbtmi	r6, [fp], #-3139	; 0xfffff3bd
    1570:	6f437669 	svcvs	0x00437669
    1574:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    1578:	43535300 	cmpmi	r3, #0, 6
    157c:	41005247 	tstmi	r0, r7, asr #4
    1580:	52324250 	eorspl	r4, r2, #80, 4
    1584:	00525453 	subseq	r5, r2, r3, asr r4
    1588:	5f434352 	svcpl	0x00434352
    158c:	46746547 	ldrbtmi	r6, [r4], -r7, asr #10
    1590:	5367616c 	cmnpl	r7, #108, 2
    1594:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0xfffffe8c
    1598:	43520073 	cmpmi	r2, #115	; 0x73
    159c:	6c435f43 	mcrrvs	15, 4, r5, r3, cr3
    15a0:	736b636f 	cmnvc	fp, #-1140850687	; 0xbc000001
    15a4:	43435200 	movtmi	r5, #12800	; 0x3200
    15a8:	4354495f 	cmpmi	r4, #1556480	; 0x17c000
    15ac:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    15b0:	43520067 	cmpmi	r2, #103	; 0x67
    15b4:	53485f43 	movtpl	r5, #36675	; 0x8f43
    15b8:	646d4349 	strbtvs	r4, [sp], #-841	; 0xfffffcb7
    15bc:	43435200 	movtmi	r5, #12800	; 0x3200
    15c0:	6a64415f 	bvs	1911b44 <startup-0x1e6ee4bc>
    15c4:	48747375 	ldmdami	r4!, {r0, r2, r4, r5, r6, r8, r9, ip, sp, lr}^
    15c8:	61434953 	cmpvs	r3, r3, asr r9
    15cc:	7262696c 	rsbvc	r6, r2, #108, 18	; 0x1b0000
    15d0:	6f697461 	svcvs	0x00697461
    15d4:	6c61566e 	stclvs	6, cr5, [r1], #-440	; 0xfffffe48
    15d8:	41006575 	tstmi	r0, r5, ror r5
    15dc:	4c324250 	lfmmi	f4, 4, [r2], #-320	; 0xfffffec0
    15e0:	524e4550 	subpl	r4, lr, #80, 10	; 0x14000000
    15e4:	43435200 	movtmi	r5, #12800	; 0x3200
    15e8:	4250415f 	subsmi	r4, r0, #-1073741801	; 0xc0000017
    15ec:	72655031 	rsbvc	r5, r5, #49	; 0x31
    15f0:	00687069 	rsbeq	r7, r8, r9, rrx
    15f4:	5f434352 	svcpl	0x00434352
    15f8:	43435452 	movtmi	r5, #13394	; 0x3452
    15fc:	6f434b4c 	svcvs	0x00434b4c
    1600:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    1604:	43435200 	movtmi	r5, #12800	; 0x3200
    1608:	414c465f 	cmpmi	ip, pc, asr r6
    160c:	43520047 	cmpmi	r2, #71	; 0x47
    1610:	65475f43 	strbvs	r5, [r7, #-3907]	; 0xfffff0bd
    1614:	53544974 	cmppl	r4, #116, 18	; 0x1d0000
    1618:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0xfffffe8c
    161c:	54430073 	strbpl	r0, [r3], #-115	; 0xffffff8d
    1620:	52004c52 	andpl	r4, r0, #20992	; 0x5200
    1624:	435f4343 	cmpmi	pc, #201326593	; 0xc000001
    1628:	7261656c 	rsbvc	r6, r1, #108, 10	; 0x1b000000
    162c:	65505449 	ldrbvs	r5, [r0, #-1097]	; 0xfffffbb7
    1630:	6e69646e 	cdpvs	4, 6, cr6, cr9, cr14, {3}
    1634:	74694267 	strbtvc	r4, [r9], #-615	; 0xfffffd99
    1638:	43435200 	movtmi	r5, #12800	; 0x3200
    163c:	6f6c435f 	svcvs	0x006c435f
    1640:	65536b63 	ldrbvs	r6, [r3, #-2915]	; 0xfffff49d
    1644:	69727563 	ldmdbvs	r2!, {r0, r1, r5, r6, r8, sl, ip, sp, lr}^
    1648:	79537974 	ldmdbvc	r3, {r2, r4, r5, r6, r8, fp, ip, sp, lr}^
    164c:	6d657473 	cfstrdvs	mvd7, [r5, #-460]!	; 0xfffffe34
    1650:	00646d43 	rsbeq	r6, r4, r3, asr #26
    1654:	5f434352 	svcpl	0x00434352
    1658:	434d4954 	movtmi	r4, #55636	; 0xd954
    165c:	72504b4c 	subsvc	r4, r0, #76, 22	; 0x13000
    1660:	6f437365 	svcvs	0x00437365
    1664:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    1668:	43435200 	movtmi	r5, #12800	; 0x3200
    166c:	4941535f 	stmdbmi	r1, {r0, r1, r2, r3, r4, r6, r8, r9, ip, lr}^
    1670:	636f6c42 	cmnvs	pc, #16896	; 0x4200
    1674:	4c43416b 	stfmie	f4, [r3], {107}	; 0x6b
    1678:	756f534b 	strbvc	r5, [pc, #-843]!	; 1335 <startup-0x1fffeccb>
    167c:	00656372 	rsbeq	r6, r5, r2, ror r3
    1680:	74737973 	ldrbtvc	r7, [r3], #-2419	; 0xfffff68d
    1684:	5f6b6369 	svcpl	0x006b6369
    1688:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xfffff1b7
    168c:	61747300 	cmnvs	r4, r0, lsl #6
    1690:	72737574 	rsbsvc	r7, r3, #116, 10	; 0x1d000000
    1694:	52006765 	andpl	r6, r0, #26476544	; 0x1940000
    1698:	415f4343 	cmpmi	pc, r3, asr #6
    169c:	50324250 	eorspl	r4, r2, r0, asr r2
    16a0:	70697265 	rsbvc	r7, r9, r5, ror #4
    16a4:	50410068 	subpl	r0, r1, r8, rrx
    16a8:	504c3142 	subpl	r3, ip, r2, asr #2
    16ac:	00524e45 	subseq	r4, r2, r5, asr #28
    16b0:	69746361 	ldmdbvs	r4!, {r0, r5, r6, r8, r9, sp, lr}^
    16b4:	645f6576 	ldrbvs	r6, [pc], #-1398	; 16bc <startup-0x1fffe944>
    16b8:	73726f6f 	cmnvc	r2, #444	; 0x1bc
    16bc:	474b4300 	strbmi	r4, [fp, -r0, lsl #6]
    16c0:	4e455441 	cdpmi	4, 4, cr5, cr5, cr1, {2}
    16c4:	4c500052 	mrrcmi	0, 5, r0, r0, cr2	; <UNPREDICTABLE>
    16c8:	4941534c 	stmdbmi	r1, {r2, r3, r6, r8, r9, ip, lr}^
    16cc:	4c50004e 	mrrcmi	0, 4, r0, r0, cr14	; <UNPREDICTABLE>
    16d0:	4941534c 	stmdbmi	r1, {r2, r3, r6, r8, r9, ip, lr}^
    16d4:	4c500051 	mrrcmi	0, 5, r0, r0, cr1	; <UNPREDICTABLE>
    16d8:	4941534c 	stmdbmi	r1, {r2, r3, r6, r8, r9, ip, lr}^
    16dc:	43520052 	cmpmi	r2, #82	; 0x52
    16e0:	434d5f43 	movtmi	r5, #57155	; 0xdf43
    16e4:	6f53314f 	svcvs	0x0053314f
    16e8:	65637275 	strbvs	r7, [r3, #-629]!	; 0xfffffd8b
    16ec:	43435200 	movtmi	r5, #12800	; 0x3200
    16f0:	4248415f 	submi	r4, r8, #-1073741801	; 0xc0000017
    16f4:	72655033 	rsbvc	r5, r5, #51	; 0x33
    16f8:	43687069 	cmnmi	r8, #105	; 0x69
    16fc:	6b636f6c 	blvs	18dd4b4 <startup-0x1e722b4c>
    1700:	00646d43 	rsbeq	r6, r4, r3, asr #26
    1704:	54737953 	ldrbtpl	r7, [r3], #-2387	; 0xfffff6ad
    1708:	5f6b6369 	svcpl	0x006b6369
    170c:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0xfffff6ac
    1710:	6d697400 	cfstrdvs	mvd7, [r9, #-0]
    1714:	65635f65 	strbvs	r5, [r3, #-3941]!	; 0xfffff09b
    1718:	6172746e 	cmnvs	r2, lr, ror #8
    171c:	616c5f6c 	cmnvs	ip, ip, ror #30
    1720:	52006d72 	andpl	r6, r0, #7296	; 0x1c80
    1724:	505f4343 	subspl	r4, pc, r3, asr #6
    1728:	6d434c4c 	stclvs	12, cr4, [r3, #-304]	; 0xfffffed0
    172c:	43520064 	cmpmi	r2, #100	; 0x64
    1730:	61425f43 	cmpvs	r2, r3, asr #30
    1734:	70756b63 	rsbsvc	r6, r5, r3, ror #22
    1738:	65736552 	ldrbvs	r6, [r3, #-1362]!	; 0xfffffaae
    173c:	646d4374 	strbtvs	r4, [sp], #-884	; 0xfffffc8c
    1740:	42484100 	submi	r4, r8, #0, 2
    1744:	54535233 	ldrbpl	r5, [r3], #-563	; 0xfffffdcd
    1748:	72450052 	subvc	r0, r5, #82	; 0x52
    174c:	53726f72 	cmnpl	r2, #456	; 0x1c8
    1750:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0xfffffe8c
    1754:	74730073 	ldrbtvc	r0, [r3], #-115	; 0xffffff8d
    1758:	75747261 	ldrbvc	r7, [r4, #-609]!	; 0xfffffd9f
    175c:	43520070 	cmpmi	r2, #112	; 0x70
    1760:	434d5f43 	movtmi	r5, #57155	; 0xdf43
    1764:	6f53324f 	svcvs	0x0053324f
    1768:	65637275 	strbvs	r7, [r3, #-629]!	; 0xfffffd8b
    176c:	42504100 	subsmi	r4, r0, #0, 2
    1770:	54535231 	ldrbpl	r5, [r3], #-561	; 0xfffffdcf
    1774:	50410052 	subpl	r0, r1, r2, asr r0
    1778:	4e453142 	dvfmism	f3, f5, f2
    177c:	43520052 	cmpmi	r2, #82	; 0x52
    1780:	434d5f43 	movtmi	r5, #57155	; 0xdf43
    1784:	6944314f 	stmdbvs	r4, {r0, r1, r2, r3, r6, r8, ip, sp}^
    1788:	64690076 	strbtvs	r0, [r9], #-118	; 0xffffff8a
    178c:	69737341 	ldmdbvs	r3!, {r0, r6, r8, r9, ip, sp, lr}^
    1790:	485f6e67 	ldmdami	pc, {r0, r1, r2, r5, r6, r9, sl, fp, sp, lr}^	; <UNPREDICTABLE>
    1794:	6c646e61 	stclvs	14, cr6, [r4], #-388	; 0xfffffe7c
    1798:	52007265 	andpl	r7, r0, #1342177286	; 0x50000006
    179c:	575f4343 	ldrbpl	r4, [pc, -r3, asr #6]
    17a0:	46746961 	ldrbtmi	r6, [r4], -r1, ror #18
    17a4:	5348726f 	movtpl	r7, #33391	; 0x826f
    17a8:	61745345 	cmnvs	r4, r5, asr #6
    17ac:	70557472 	subsvc	r7, r5, r2, ror r4
    17b0:	43555300 	cmpmi	r5, #0, 6
    17b4:	53534543 	cmppl	r3, #281018368	; 0x10c00000
    17b8:	43435200 	movtmi	r5, #12800	; 0x3200
    17bc:	45534c5f 	ldrbmi	r4, [r3, #-3167]	; 0xfffff3a1
    17c0:	65646f4d 	strbvs	r6, [r4, #-3917]!	; 0xfffff0b3
    17c4:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    17c8:	41006769 	tstmi	r0, r9, ror #14
    17cc:	4c334248 	lfmmi	f4, 4, [r3], #-288	; 0xfffffee0
    17d0:	524e4550 	subpl	r4, lr, #80, 10	; 0x14000000
    17d4:	73795300 	cmnvc	r9, #0, 6
    17d8:	6b636954 	blvs	18dbd30 <startup-0x1e7242d0>
    17dc:	6e6f435f 	mcrvs	3, 3, r4, cr15, cr15, {2}
    17e0:	00676966 	rsbeq	r6, r7, r6, ror #18
    17e4:	552f3a43 	strpl	r3, [pc, #-2627]!	; da9 <startup-0x1ffff257>
    17e8:	73726573 	cmnvc	r2, #482344960	; 0x1cc00000
    17ec:	6164412f 	cmnvs	r4, pc, lsr #2
    17f0:	4f2f746d 	svcmi	0x002f746d
    17f4:	7244656e 	subvc	r6, r4, #461373440	; 0x1b800000
    17f8:	2f657669 	svccs	0x00657669
    17fc:	756b6f44 	strbvc	r6, [fp, #-3908]!	; 0xfffff0bc
    1800:	746e656d 	strbtvc	r6, [lr], #-1389	; 0xfffffa93
    1804:	7469472f 	strbtvc	r4, [r9], #-1839	; 0xfffff8d1
    1808:	2f627548 	svccs	0x00627548
    180c:	32544144 	subscc	r4, r4, #68, 2
    1810:	4c2d3039 	stcmi	0, cr3, [sp], #-228	; 0xffffff1c
    1814:	736d7261 	cmnvc	sp, #268435462	; 0x10000006
    1818:	65747379 	ldrbvs	r7, [r4, #-889]!	; 0xfffffc87
    181c:	6f6b2f6d 	svcvs	0x006b2f6d
    1820:	6f442f64 	svcvs	0x00442f64
    1824:	732f726f 			; <UNDEFINED> instruction: 0x732f726f
    1828:	74726174 	ldrbtvc	r6, [r2], #-372	; 0xfffffe8c
    182c:	632e7075 			; <UNDEFINED> instruction: 0x632e7075
    1830:	4c414300 	mcrrmi	3, 0, r4, r1, cr0
    1834:	74004249 	strvc	r4, [r0], #-585	; 0xfffffdb7
    1838:	00656d69 	rsbeq	r6, r5, r9, ror #26
    183c:	72706d74 	rsbsvc	r6, r0, #116, 26	; 0x1d00
    1840:	44006765 	strmi	r6, [r0], #-1893	; 0xfffff89b
    1844:	46434b43 	strbmi	r4, [r3], -r3, asr #22
    1848:	00325247 	eorseq	r5, r2, r7, asr #4
    184c:	5f434352 	svcpl	0x00434352
    1850:	31424841 	cmpcc	r2, r1, asr #16
    1854:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
    1858:	68006870 	stmdavs	r0, {r4, r5, r6, fp, sp, lr}
    185c:	74736573 	ldrbtvc	r6, [r3], #-1395	; 0xfffffa8d
    1860:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
    1864:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
    1868:	616c5f4f 	cmnvs	ip, pc, asr #30
    186c:	4100706d 	tstmi	r0, sp, rrx
    1870:	45314248 	ldrmi	r4, [r1, #-584]!	; 0xfffffdb8
    1874:	4c00524e 	sfmmi	f5, 4, [r0], {78}	; 0x4e
    1878:	0044414f 	subeq	r4, r4, pc, asr #2
    187c:	5f434352 	svcpl	0x00434352
    1880:	31424841 	cmpcc	r2, r1, asr #16
    1884:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
    1888:	65526870 	ldrbvs	r6, [r2, #-2160]	; 0xfffff790
    188c:	43746573 	cmnmi	r4, #482344960	; 0x1cc00000
    1890:	4100646d 	tstmi	r0, sp, ror #8
    1894:	52324248 	eorspl	r4, r2, #72, 4	; 0x80000004
    1898:	00525453 	subseq	r5, r2, r3, asr r4
    189c:	5f434352 	svcpl	0x00434352
    18a0:	636f6c43 	cmnvs	pc, #17152	; 0x4300
    18a4:	7954736b 	ldmdbvc	r4, {r0, r1, r3, r5, r6, r8, r9, ip, sp, lr}^
    18a8:	65446570 	strbvs	r6, [r4, #-1392]	; 0xfffffa90
    18ac:	43520066 	cmpmi	r2, #102	; 0x66
    18b0:	79545f43 	ldmdbvc	r4, {r0, r1, r6, r8, r9, sl, fp, ip, lr}^
    18b4:	65446570 	strbvs	r6, [r4, #-1392]	; 0xfffffa90
    18b8:	61700066 	cmnvs	r0, r6, rrx
    18bc:	6f777373 	svcvs	0x00777373
    18c0:	52006472 	andpl	r6, r0, #1912602624	; 0x72000000
    18c4:	495f4343 	ldmdbmi	pc, {r0, r1, r6, r8, r9, lr}^	; <UNPREDICTABLE>
    18c8:	50470054 	subpl	r0, r7, r4, asr r0
    18cc:	745f4f49 	ldrbvc	r4, [pc], #-3913	; 18d4 <startup-0x1fffe72c>
    18d0:	00657079 	rsbeq	r7, r5, r9, ror r0
    18d4:	656d6974 	strbvs	r6, [sp, #-2420]!	; 0xfffff68c
    18d8:	6d617453 	cfstrdvs	mvd7, [r1, #-332]!	; 0xfffffeb4
    18dc:	6c700070 	ldclvs	0, cr0, [r0], #-448	; 0xfffffe40
    18e0:	6f63766c 	svcvs	0x0063766c
    18e4:	43435200 	movtmi	r5, #12800	; 0x3200
    18e8:	4250415f 	subsmi	r4, r0, #-1073741801	; 0xc0000017
    18ec:	72655031 	rsbvc	r5, r5, #49	; 0x31
    18f0:	43687069 	cmnmi	r8, #105	; 0x69
    18f4:	6b636f6c 	blvs	18dd6ac <startup-0x1e722954>
    18f8:	6f4d504c 	svcvs	0x004d504c
    18fc:	6d436564 	cfstr64vs	mvdx6, [r3, #-400]	; 0xfffffe70
    1900:	4c500064 	mrrcmi	0, 6, r0, r0, cr4	; <UNPREDICTABLE>
    1904:	5332494c 	teqpl	r2, #76, 18	; 0x130000
    1908:	4352004e 	cmpmi	r2, #78	; 0x4e
    190c:	48415f43 	stmdami	r1, {r0, r1, r6, r8, r9, sl, fp, ip, lr}^
    1910:	65503142 	ldrbvs	r3, [r0, #-322]	; 0xfffffebe
    1914:	68706972 	ldmdavs	r0!, {r1, r4, r5, r6, r8, fp, sp, lr}^
    1918:	636f6c43 	cmnvs	pc, #17152	; 0x4300
    191c:	4d504c6b 	ldclmi	12, cr4, [r0, #-428]	; 0xfffffe54
    1920:	4365646f 	cmnmi	r5, #1862270976	; 0x6f000000
    1924:	5000646d 	andpl	r6, r0, sp, ror #8
    1928:	32494c4c 	subcc	r4, r9, #76, 24	; 0x4c00
    192c:	6d005253 	sfmvs	f5, 4, [r0, #-332]	; 0xfffffeb4
    1930:	006e6961 	rsbeq	r6, lr, r1, ror #18
    1934:	696c696d 	stmdbvs	ip!, {r0, r2, r3, r5, r6, r8, fp, sp, lr}^
    1938:	72616c00 	rsbvc	r6, r1, #0, 24
    193c:	6369546d 	cmnvs	r9, #1828716544	; 0x6d000000
    1940:	4352006b 	cmpmi	r2, #107	; 0x6b
    1944:	54525f43 	ldrbpl	r5, [r2], #-3907	; 0xfffff0bd
    1948:	4b4c4343 	blmi	131265c <startup-0x1eced9a4>
    194c:	00646d43 	rsbeq	r6, r4, r3, asr #26
    1950:	5f434352 	svcpl	0x00434352
    1954:	32424841 	subcc	r4, r2, #4259840	; 0x410000
    1958:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
    195c:	61006870 	tstvs	r0, r0, ror r8
    1960:	6d72616c 	ldfvse	f6, [r2, #-432]!	; 0xfffffe50
    1964:	5f676e69 	svcpl	0x00676e69
    1968:	726f6f64 	rsbvc	r6, pc, #100, 30	; 0x190
    196c:	4c4c5000 	marmi	acc0, r5, ip
    1970:	43494153 	movtmi	r4, #37203	; 0x9153
    1974:	00524746 	subseq	r4, r2, r6, asr #14
    1978:	4e4c4c50 	mcrmi	12, 2, r4, cr12, cr0, {2}
    197c:	43435200 	movtmi	r5, #12800	; 0x3200
    1980:	4248415f 	submi	r4, r8, #-1073741801	; 0xc0000017
    1984:	72655031 	rsbvc	r5, r5, #49	; 0x31
    1988:	43687069 	cmnmi	r8, #105	; 0x69
    198c:	6b636f6c 	blvs	18dd744 <startup-0x1e7228bc>
    1990:	00646d43 	rsbeq	r6, r4, r3, asr #26
    1994:	5f434352 	svcpl	0x00434352
    1998:	494c4c50 	stmdbmi	ip, {r4, r6, sl, fp, lr}^
    199c:	6f435332 	svcvs	0x00435332
    19a0:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    19a4:	53595300 	cmppl	r9, #0, 6
    19a8:	5f4b4c43 	svcpl	0x004b4c43
    19ac:	71657246 	cmnvc	r5, r6, asr #4
    19b0:	636e6575 	cmnvs	lr, #490733568	; 0x1d400000
    19b4:	43520079 	cmpmi	r2, #121	; 0x79
    19b8:	49545f43 	ldmdbmi	r4, {r0, r1, r6, r8, r9, sl, fp, ip, lr}^
    19bc:	4b4c434d 	blmi	13126f8 <startup-0x1eced908>
    19c0:	73657250 	cmnvc	r5, #80, 4
    19c4:	656c6163 	strbvs	r6, [ip, #-355]!	; 0xfffffe9d
    19c8:	72700072 	rsbsvc	r0, r0, #114	; 0x72
    19cc:	00637365 	rsbeq	r7, r3, r5, ror #6
    19d0:	5f434352 	svcpl	0x00434352
    19d4:	32424841 	subcc	r4, r2, #4259840	; 0x410000
    19d8:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
    19dc:	65526870 	ldrbvs	r6, [r2, #-2160]	; 0xfffff790
    19e0:	43746573 	cmnmi	r4, #482344960	; 0x1cc00000
    19e4:	5200646d 	andpl	r6, r0, #1828716544	; 0x6d000000
    19e8:	505f4343 	subspl	r4, pc, r3, asr #6
    19ec:	41534c4c 	cmpmi	r3, ip, asr #24
    19f0:	646d4349 	strbtvs	r4, [sp], #-841	; 0xfffffcb7
    19f4:	42484100 	submi	r4, r8, #0, 2
    19f8:	524e4533 	subpl	r4, lr, #213909504	; 0xcc00000
    19fc:	43435200 	movtmi	r5, #12800	; 0x3200
    1a00:	5359535f 	cmppl	r9, #2080374785	; 0x7c000001
    1a04:	434b4c43 	movtmi	r4, #48195	; 0xbc43
    1a08:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    1a0c:	43520067 	cmpmi	r2, #103	; 0x67
    1a10:	4c505f43 	mrrcmi	15, 4, r5, r0, cr3
    1a14:	6e6f434c 	cdpvs	3, 6, cr4, cr15, cr12, {2}
    1a18:	00676966 	rsbeq	r6, r7, r6, ror #18
    1a1c:	6d6c6c70 	stclvs	12, cr6, [ip, #-448]!	; 0xfffffe40
    1a20:	474e5200 	strbmi	r5, [lr, -r0, lsl #4]
    1a24:	0054495f 	subseq	r4, r4, pc, asr r9
    1a28:	5f474e52 	svcpl	0x00474e52
    1a2c:	6f435449 	svcvs	0x00435449
    1a30:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    1a34:	474e5200 	strbmi	r5, [lr, -r0, lsl #4]
    1a38:	646d435f 	strbtvs	r4, [sp], #-863	; 0xfffffca1
    1a3c:	474e5200 	strbmi	r5, [lr, -r0, lsl #4]
    1a40:	7465475f 	strbtvc	r4, [r5], #-1887	; 0xfffff8a1
    1a44:	646e6152 	strbtvs	r6, [lr], #-338	; 0xfffffeae
    1a48:	754e6d6f 	strbvc	r6, [lr, #-3439]	; 0xfffff291
    1a4c:	7265626d 	rsbvc	r6, r5, #-805306362	; 0xd0000006
    1a50:	474e5200 	strbmi	r5, [lr, -r0, lsl #4]
    1a54:	4965445f 	stmdbmi	r5!, {r0, r1, r2, r3, r4, r6, sl, lr}^
    1a58:	0074696e 	rsbseq	r6, r4, lr, ror #18
    1a5c:	5f474e52 	svcpl	0x00474e52
    1a60:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0xfffff6ac
    1a64:	00666544 	rsbeq	r6, r6, r4, asr #10
    1a68:	552f3a43 	strpl	r3, [pc, #-2627]!	; 102d <startup-0x1fffefd3>
    1a6c:	73726573 	cmnvc	r2, #482344960	; 0x1cc00000
    1a70:	6164412f 	cmnvs	r4, pc, lsr #2
    1a74:	4f2f746d 	svcmi	0x002f746d
    1a78:	7244656e 	subvc	r6, r4, #461373440	; 0x1b800000
    1a7c:	2f657669 	svccs	0x00657669
    1a80:	756b6f44 	strbvc	r6, [fp, #-3908]!	; 0xfffff0bc
    1a84:	746e656d 	strbtvc	r6, [lr], #-1389	; 0xfffffa93
    1a88:	7469472f 	strbtvc	r4, [r9], #-1839	; 0xfffff8d1
    1a8c:	2f627548 	svccs	0x00627548
    1a90:	32544144 	subscc	r4, r4, #68, 2
    1a94:	4c2d3039 	stcmi	0, cr3, [sp], #-228	; 0xffffff1c
    1a98:	736d7261 	cmnvc	sp, #268435462	; 0x10000006
    1a9c:	65747379 	ldrbvs	r7, [r4, #-889]!	; 0xfffffc87
    1aa0:	6f6b2f6d 	svcvs	0x006b2f6d
    1aa4:	696c2f64 	stmdbvs	ip!, {r2, r5, r6, r8, r9, sl, fp, sp}^
    1aa8:	54532f62 	ldrbpl	r2, [r3], #-3938	; 0xfffff09e
    1aac:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
    1ab0:	696c5f34 	stmdbvs	ip!, {r2, r4, r5, r8, r9, sl, fp, ip, lr}^
    1ab4:	54532f62 	ldrbpl	r2, [r3], #-3938	; 0xfffff09e
    1ab8:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
    1abc:	5f787834 	svcpl	0x00787834
    1ac0:	50647453 	rsbpl	r7, r4, r3, asr r4
    1ac4:	70697265 	rsbvc	r7, r9, r5, ror #4
    1ac8:	72445f68 	subvc	r5, r4, #104, 30	; 0x1a0
    1acc:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
    1ad0:	6372732f 	cmnvs	r2, #-1140850688	; 0xbc000000
    1ad4:	6d74732f 	ldclvs	3, cr7, [r4, #-188]!	; 0xffffff44
    1ad8:	34663233 	strbtcc	r3, [r6], #-563	; 0xfffffdcd
    1adc:	725f7878 	subsvc	r7, pc, #120, 16	; 0x780000
    1ae0:	632e676e 			; <UNDEFINED> instruction: 0x632e676e
    1ae4:	474e5200 	strbmi	r5, [lr, -r0, lsl #4]
    1ae8:	414c465f 	cmpmi	ip, pc, asr r6
    1aec:	4e520047 	cdpmi	0, 5, cr0, cr2, cr7, {2}
    1af0:	6c435f47 	mcrrvs	15, 4, r5, r3, cr7
    1af4:	46726165 	ldrbtmi	r6, [r2], -r5, ror #2
    1af8:	0067616c 	rsbeq	r6, r7, ip, ror #2
    1afc:	5f474e52 	svcpl	0x00474e52
    1b00:	49746547 	ldmdbmi	r4!, {r0, r1, r2, r6, r8, sl, sp, lr}^
    1b04:	61745354 	cmnvs	r4, r4, asr r3
    1b08:	00737574 	rsbseq	r7, r3, r4, ror r5
    1b0c:	5f474e52 	svcpl	0x00474e52
    1b10:	61656c43 	cmnvs	r5, r3, asr #24
    1b14:	50544972 	subspl	r4, r4, r2, ror r9
    1b18:	69646e65 	stmdbvs	r4!, {r0, r2, r5, r6, r9, sl, fp, sp, lr}^
    1b1c:	6942676e 	stmdbvs	r2, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}^
    1b20:	4e520074 	mrcmi	0, 2, r0, cr2, cr4, {3}
    1b24:	65475f47 	strbvs	r5, [r7, #-3911]	; 0xfffff0b9
    1b28:	616c4674 	smcvs	50276	; 0xc464
    1b2c:	61745367 	cmnvs	r4, r7, ror #6
    1b30:	00737574 	rsbseq	r7, r3, r4, ror r5
    1b34:	726f6f64 	rsbvc	r6, pc, #100, 30	; 0x190
    1b38:	5f64695f 	svcpl	0x0064695f
    1b3c:	6f640030 	svcvs	0x00640030
    1b40:	695f726f 	ldmdbvs	pc, {r0, r1, r2, r3, r5, r6, r9, ip, sp, lr}^	; <UNPREDICTABLE>
    1b44:	00315f64 	eorseq	r5, r1, r4, ror #30
    1b48:	656d6974 	strbvs	r6, [sp, #-2420]!	; 0xfffff68c
    1b4c:	7400305f 	strvc	r3, [r0], #-95	; 0xffffffa1
    1b50:	5f656d69 	svcpl	0x00656d69
    1b54:	65720031 	ldrbvs	r0, [r2, #-49]!	; 0xffffffcf
    1b58:	73657571 	cmnvc	r5, #473956352	; 0x1c400000
    1b5c:	65640074 	strbvs	r0, [r4, #-116]!	; 0xffffff8c
    1b60:	65646f63 	strbvs	r6, [r4, #-3939]!	; 0xfffff09d
    1b64:	6f6f645f 	svcvs	0x006f645f
    1b68:	6f635f72 	svcvs	0x00635f72
    1b6c:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    1b70:	67736d5f 			; <UNDEFINED> instruction: 0x67736d5f
    1b74:	2f3a4300 	svccs	0x003a4300
    1b78:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
    1b7c:	64412f73 	strbvs	r2, [r1], #-3955	; 0xfffff08d
    1b80:	2f746d61 	svccs	0x00746d61
    1b84:	44656e4f 	strbtmi	r6, [r5], #-3663	; 0xfffff1b1
    1b88:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
    1b8c:	6b6f442f 	blvs	1bd2c50 <startup-0x1e42d3b0>
    1b90:	6e656d75 	mcrvs	13, 3, r6, cr5, cr5, {3}
    1b94:	69472f74 	stmdbvs	r7, {r2, r4, r5, r6, r8, r9, sl, fp, sp}^
    1b98:	62754874 	rsbsvs	r4, r5, #116, 16	; 0x740000
    1b9c:	5441442f 	strbpl	r4, [r1], #-1071	; 0xfffffbd1
    1ba0:	2d303932 			; <UNDEFINED> instruction: 0x2d303932
    1ba4:	6d72614c 	ldfvse	f6, [r2, #-304]!	; 0xfffffed0
    1ba8:	74737973 	ldrbtvc	r7, [r3], #-2419	; 0xfffff68d
    1bac:	6b2f6d65 	blvs	bdd148 <startup-0x1f422eb8>
    1bb0:	6c2f646f 	cfstrsvs	mvf6, [pc], #-444	; 19fc <startup-0x1fffe604>
    1bb4:	432f6269 			; <UNDEFINED> instruction: 0x432f6269
    1bb8:	6e454e41 	cdpvs	14, 4, cr4, cr5, cr1, {2}
    1bbc:	65646f63 	strbvs	r6, [r4, #-3939]!	; 0xfffff09d
    1bc0:	6500632e 	strvs	r6, [r0, #-814]	; 0xfffffcd2
    1bc4:	646f636e 	strbtvs	r6, [pc], #-878	; 1bcc <startup-0x1fffe434>
    1bc8:	73615f65 	cmnvc	r1, #404	; 0x194
    1bcc:	6e676973 			; <UNDEFINED> instruction: 0x6e676973
    1bd0:	0064695f 	rsbeq	r6, r4, pc, asr r9
    1bd4:	61746164 	cmnvs	r4, r4, ror #2
    1bd8:	696f705f 	stmdbvs	pc!, {r0, r1, r2, r3, r4, r6, ip, sp, lr}^	; <UNPREDICTABLE>
    1bdc:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
    1be0:	636e6500 	cmnvs	lr, #0, 10
    1be4:	5f65646f 	svcpl	0x0065646f
    1be8:	726f6f64 	rsbvc	r6, pc, #100, 30	; 0x190
    1bec:	6e6f635f 	mcrvs	3, 3, r6, cr15, cr15, {2}
    1bf0:	00676966 	rsbeq	r6, r7, r6, ror #18
    1bf4:	74736964 	ldrbtvc	r6, [r3], #-2404	; 0xfffff69c
    1bf8:	636f6c00 	cmnvs	pc, #0, 24
    1bfc:	0064656b 	rsbeq	r6, r4, fp, ror #10
    1c00:	69766564 	ldmdbvs	r6!, {r2, r5, r6, r8, sl, sp, lr}^
    1c04:	745f6563 	ldrbvc	r6, [pc], #-1379	; 1c0c <startup-0x1fffe3f4>
    1c08:	00657079 	rsbeq	r7, r5, r9, ror r0
    1c0c:	6f636e65 	svcvs	0x00636e65
    1c10:	725f6564 	subsvc	r6, pc, #100, 10	; 0x19000000
    1c14:	65757165 	ldrbvs	r7, [r5, #-357]!	; 0xfffffe9b
    1c18:	695f7473 	ldmdbvs	pc, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^	; <UNPREDICTABLE>
    1c1c:	6f740064 	svcvs	0x00740064
    1c20:	6e65635f 	mcrvs	3, 3, r6, cr5, cr15, {2}
    1c24:	6c617274 	sfmvs	f7, 2, [r1], #-464	; 0xfffffe30
    1c28:	636e6500 	cmnvs	lr, #0, 10
    1c2c:	5f65646f 	svcpl	0x0065646f
    1c30:	74736964 	ldrbtvc	r6, [r3], #-2404	; 0xfffff69c
    1c34:	65636e61 	strbvs	r6, [r3, #-3681]!	; 0xfffff19f
    1c38:	6e6f635f 	mcrvs	3, 3, r6, cr15, cr15, {2}
    1c3c:	00676966 	rsbeq	r6, r7, r6, ror #18
    1c40:	706d6574 	rsbvc	r6, sp, r4, ror r5
    1c44:	0064695f 	rsbeq	r6, r4, pc, asr r9
    1c48:	756c6176 	strbvc	r6, [ip, #-374]!	; 0xfffffe8a
    1c4c:	00305f65 	eorseq	r5, r0, r5, ror #30
    1c50:	756c6176 	strbvc	r6, [ip, #-374]!	; 0xfffffe8a
    1c54:	00315f65 	eorseq	r5, r1, r5, ror #30
    1c58:	66667562 	strbtvs	r7, [r6], -r2, ror #10
    1c5c:	75507265 	ldrbvc	r7, [r0, #-613]	; 0xfffffd9b
    1c60:	6f630074 	svcvs	0x00630074
    1c64:	00746e75 	rsbseq	r6, r4, r5, ror lr
    1c68:	552f3a43 	strpl	r3, [pc, #-2627]!	; 122d <startup-0x1fffedd3>
    1c6c:	73726573 	cmnvc	r2, #482344960	; 0x1cc00000
    1c70:	6164412f 	cmnvs	r4, pc, lsr #2
    1c74:	4f2f746d 	svcmi	0x002f746d
    1c78:	7244656e 	subvc	r6, r4, #461373440	; 0x1b800000
    1c7c:	2f657669 	svccs	0x00657669
    1c80:	756b6f44 	strbvc	r6, [fp, #-3908]!	; 0xfffff0bc
    1c84:	746e656d 	strbtvc	r6, [lr], #-1389	; 0xfffffa93
    1c88:	7469472f 	strbtvc	r4, [r9], #-1839	; 0xfffff8d1
    1c8c:	2f627548 	svccs	0x00627548
    1c90:	32544144 	subscc	r4, r4, #68, 2
    1c94:	4c2d3039 	stcmi	0, cr3, [sp], #-228	; 0xffffff1c
    1c98:	736d7261 	cmnvc	sp, #268435462	; 0x10000006
    1c9c:	65747379 	ldrbvs	r7, [r4, #-889]!	; 0xfffffc87
    1ca0:	6f6b2f6d 	svcvs	0x006b2f6d
    1ca4:	696c2f64 	stmdbvs	ip!, {r2, r5, r6, r8, r9, sl, fp, sp}^
    1ca8:	75622f62 	strbvc	r2, [r2, #-3938]!	; 0xfffff09e
    1cac:	72656666 	rsbvc	r6, r5, #106954752	; 0x6600000
    1cb0:	4600632e 	strmi	r6, [r0], -lr, lsr #6
    1cb4:	004f4649 	subeq	r4, pc, r9, asr #12
    1cb8:	66667562 	strbtvs	r7, [r6], -r2, ror #10
    1cbc:	764f7265 	strbvc	r7, [pc], -r5, ror #4
    1cc0:	69727265 	ldmdbvs	r2!, {r0, r2, r5, r6, r9, ip, sp, lr}^
    1cc4:	614c6564 	cmpvs	ip, r4, ror #10
    1cc8:	64007473 	strvs	r7, [r0], #-1139	; 0xfffffb8d
    1ccc:	00747365 	rsbseq	r7, r4, r5, ror #6
    1cd0:	66667562 	strbtvs	r7, [r6], -r2, ror #10
    1cd4:	656c6500 	strbvs	r6, [ip, #-1280]!	; 0xfffffb00
    1cd8:	7562006d 	strbvc	r0, [r2, #-109]!	; 0xffffff93
    1cdc:	72656666 	rsbvc	r6, r5, #106954752	; 0x6600000
    1ce0:	00746547 	rsbseq	r6, r4, r7, asr #10
    1ce4:	66667562 	strbtvs	r7, [r6], -r2, ror #10
    1ce8:	6e497265 	cdpvs	2, 4, cr7, cr9, cr5, {3}
    1cec:	62007469 	andvs	r7, r0, #1761607680	; 0x69000000
    1cf0:	65666675 	strbvs	r6, [r6, #-1653]!	; 0xfffff98b
    1cf4:	72700072 	rsbsvc	r0, r0, #114	; 0x72
    1cf8:	6e497665 	cdpvs	6, 4, cr7, cr9, cr5, {3}
    1cfc:	00786564 	rsbseq	r6, r8, r4, ror #10
    1d00:	54737953 	ldrbtpl	r7, [r3], #-2387	; 0xfffff6ad
    1d04:	5f6b6369 	svcpl	0x006b6369
    1d08:	534b4c43 	movtpl	r4, #48195	; 0xbc43
    1d0c:	6372756f 	cmnvs	r2, #465567744	; 0x1bc00000
    1d10:	564e0065 	strbpl	r0, [lr], -r5, rrx
    1d14:	495f4349 	ldmdbmi	pc, {r0, r3, r6, r8, r9, lr}^	; <UNPREDICTABLE>
    1d18:	5374696e 	cmnpl	r4, #1802240	; 0x1b8000
    1d1c:	63757274 	cmnvs	r5, #116, 4	; 0x40000007
    1d20:	564e0074 			; <UNDEFINED> instruction: 0x564e0074
    1d24:	505f4349 	subspl	r4, pc, r9, asr #6
    1d28:	726f6972 	rsbvc	r6, pc, #1867776	; 0x1c8000
    1d2c:	47797469 	ldrbmi	r7, [r9, -r9, ror #8]!
    1d30:	70756f72 	rsbsvc	r6, r5, r2, ror pc
    1d34:	49564e00 	ldmdbmi	r6, {r9, sl, fp, lr}^
    1d38:	6e495f43 	cdpvs	15, 4, cr5, cr9, cr3, {2}
    1d3c:	74007469 	strvc	r7, [r0], #-1129	; 0xfffffb97
    1d40:	7270706d 	rsbsvc	r7, r0, #109	; 0x6d
    1d44:	664f0065 	strbvs	r0, [pc], -r5, rrx
    1d48:	74657366 	strbtvc	r7, [r5], #-870	; 0xfffffc9a
    1d4c:	49564e00 	ldmdbmi	r6, {r9, sl, fp, lr}^
    1d50:	65535f43 	ldrbvs	r5, [r3, #-3907]	; 0xfffff0bd
    1d54:	63655674 	cmnvs	r5, #116, 12	; 0x7400000
    1d58:	54726f74 	ldrbtpl	r6, [r2], #-3956	; 0xfffff08c
    1d5c:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
    1d60:	706d7400 	rsbvc	r7, sp, r0, lsl #8
    1d64:	00627573 	rsbeq	r7, r2, r3, ror r5
    1d68:	4349564e 	movtmi	r5, #38478	; 0x964e
    1d6c:	7379535f 	cmnvc	r9, #2080374785	; 0x7c000001
    1d70:	4c6d6574 	cfstr64mi	mvdx6, [sp], #-464	; 0xfffffe30
    1d74:	6e6f4350 	mcrvs	3, 3, r4, cr15, cr0, {2}
    1d78:	00676966 	rsbeq	r6, r7, r6, ror #18
    1d7c:	54737953 	ldrbtpl	r7, [r3], #-2387	; 0xfffff6ad
    1d80:	5f6b6369 	svcpl	0x006b6369
    1d84:	534b4c43 	movtpl	r4, #48195	; 0xbc43
    1d88:	6372756f 	cmnvs	r2, #465567744	; 0x1bc00000
    1d8c:	6e6f4365 	cdpvs	3, 6, cr4, cr15, cr5, {3}
    1d90:	00676966 	rsbeq	r6, r7, r6, ror #18
    1d94:	70706d74 	rsbsvc	r6, r0, r4, ror sp
    1d98:	726f6972 	rsbvc	r6, pc, #1867776	; 0x1c8000
    1d9c:	00797469 	rsbseq	r7, r9, r9, ror #8
    1da0:	4349564e 	movtmi	r5, #38478	; 0x964e
    1da4:	6365565f 	cmnvs	r5, #99614720	; 0x5f00000
    1da8:	62615474 	rsbvs	r5, r1, #116, 8	; 0x74000000
    1dac:	2f3a4300 	svccs	0x003a4300
    1db0:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
    1db4:	64412f73 	strbvs	r2, [r1], #-3955	; 0xfffff08d
    1db8:	2f746d61 	svccs	0x00746d61
    1dbc:	44656e4f 	strbtmi	r6, [r5], #-3663	; 0xfffff1b1
    1dc0:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
    1dc4:	6b6f442f 	blvs	1bd2e88 <startup-0x1e42d178>
    1dc8:	6e656d75 	mcrvs	13, 3, r6, cr5, cr5, {3}
    1dcc:	69472f74 	stmdbvs	r7, {r2, r4, r5, r6, r8, r9, sl, fp, sp}^
    1dd0:	62754874 	rsbsvs	r4, r5, #116, 16	; 0x740000
    1dd4:	5441442f 	strbpl	r4, [r1], #-1071	; 0xfffffbd1
    1dd8:	2d303932 			; <UNDEFINED> instruction: 0x2d303932
    1ddc:	6d72614c 	ldfvse	f6, [r2, #-304]!	; 0xfffffed0
    1de0:	74737973 	ldrbtvc	r7, [r3], #-2419	; 0xfffff68d
    1de4:	6b2f6d65 	blvs	bdd380 <startup-0x1f422c80>
    1de8:	6c2f646f 	cfstrsvs	mvf6, [pc], #-444	; 1c34 <startup-0x1fffe3cc>
    1dec:	532f6269 			; <UNDEFINED> instruction: 0x532f6269
    1df0:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
    1df4:	6c5f3446 	cfldrdvs	mvd3, [pc], {70}	; 0x46
    1df8:	532f6269 			; <UNDEFINED> instruction: 0x532f6269
    1dfc:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
    1e00:	78783446 	ldmdavc	r8!, {r1, r2, r6, sl, ip, sp}^
    1e04:	6474535f 	ldrbtvs	r5, [r4], #-863	; 0xfffffca1
    1e08:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
    1e0c:	445f6870 	ldrbmi	r6, [pc], #-2160	; 1e14 <startup-0x1fffe1ec>
    1e10:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
    1e14:	72732f72 	rsbsvc	r2, r3, #456	; 0x1c8
    1e18:	696d2f63 	stmdbvs	sp!, {r0, r1, r5, r6, r8, r9, sl, fp, sp}^
    1e1c:	632e6373 			; <UNDEFINED> instruction: 0x632e6373
    1e20:	776f4c00 	strbvc	r4, [pc, -r0, lsl #24]!
    1e24:	65776f50 	ldrbvs	r6, [r7, #-3920]!	; 0xfffff0b0
    1e28:	646f4d72 	strbtvs	r4, [pc], #-3442	; 1e30 <startup-0x1fffe1d0>
    1e2c:	564e0065 	strbpl	r0, [lr], -r5, rrx
    1e30:	505f4349 	subspl	r4, pc, r9, asr #6
    1e34:	726f6972 	rsbvc	r6, pc, #1867776	; 0x1c8000
    1e38:	47797469 	ldrbmi	r7, [r9, -r9, ror #8]!
    1e3c:	70756f72 	rsbsvc	r6, r5, r2, ror pc
    1e40:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    1e44:	70006769 	andvc	r6, r0, r9, ror #14
    1e48:	6f706e69 	svcvs	0x00706e69
    1e4c:	69420073 	stmdbvs	r2, {r0, r1, r4, r5, r6}^
    1e50:	45535f74 	ldrbmi	r5, [r3, #-3956]	; 0xfffff08c
    1e54:	50470054 	subpl	r0, r7, r4, asr r0
    1e58:	525f4f49 	subspl	r4, pc, #292	; 0x124
    1e5c:	4f646165 	svcmi	0x00646165
    1e60:	75707475 	ldrbvc	r7, [r0, #-1141]!	; 0xfffffb8b
    1e64:	74614474 	strbtvc	r4, [r1], #-1140	; 0xfffffb8c
    1e68:	50470061 	subpl	r0, r7, r1, rrx
    1e6c:	415f4f49 	cmpmi	pc, r9, asr #30
    1e70:	65740046 	ldrbvs	r0, [r4, #-70]!	; 0xffffffba
    1e74:	4700706d 	strmi	r7, [r0, -sp, rrx]
    1e78:	5f4f4950 	svcpl	0x004f4950
    1e7c:	75727453 	ldrbvc	r7, [r2, #-1107]!	; 0xfffffbad
    1e80:	6e497463 	cdpvs	4, 4, cr7, cr9, cr3, {3}
    1e84:	42007469 	andmi	r7, r0, #1761607680	; 0x69000000
    1e88:	61567469 	cmpvs	r6, r9, ror #8
    1e8c:	6942006c 	stmdbvs	r2, {r2, r3, r5, r6}^
    1e90:	45525f74 	ldrbmi	r5, [r2, #-3956]	; 0xfffff08c
    1e94:	00544553 	subseq	r4, r4, r3, asr r5
    1e98:	4f495047 	svcmi	0x00495047
    1e9c:	6972575f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, lr}^
    1ea0:	69426574 	stmdbvs	r2, {r2, r4, r5, r6, r8, sl, sp, lr}^
    1ea4:	50470074 	subpl	r0, r7, r4, ror r0
    1ea8:	535f4f49 	cmppl	pc, #292	; 0x124
    1eac:	69427465 	stmdbvs	r2, {r0, r2, r5, r6, sl, ip, sp, lr}^
    1eb0:	47007374 	smlsdxmi	r0, r4, r3, r7
    1eb4:	5f4f4950 	svcpl	0x004f4950
    1eb8:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xfffff1b7
    1ebc:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
    1ec0:	65525f4f 	ldrbvs	r5, [r2, #-3919]	; 0xfffff0b1
    1ec4:	42746573 	rsbsmi	r6, r4, #482344960	; 0x1cc00000
    1ec8:	00737469 	rsbseq	r7, r3, r9, ror #8
    1ecc:	552f3a43 	strpl	r3, [pc, #-2627]!	; 1491 <startup-0x1fffeb6f>
    1ed0:	73726573 	cmnvc	r2, #482344960	; 0x1cc00000
    1ed4:	6164412f 	cmnvs	r4, pc, lsr #2
    1ed8:	4f2f746d 	svcmi	0x002f746d
    1edc:	7244656e 	subvc	r6, r4, #461373440	; 0x1b800000
    1ee0:	2f657669 	svccs	0x00657669
    1ee4:	756b6f44 	strbvc	r6, [fp, #-3908]!	; 0xfffff0bc
    1ee8:	746e656d 	strbtvc	r6, [lr], #-1389	; 0xfffffa93
    1eec:	7469472f 	strbtvc	r4, [r9], #-1839	; 0xfffff8d1
    1ef0:	2f627548 	svccs	0x00627548
    1ef4:	32544144 	subscc	r4, r4, #68, 2
    1ef8:	4c2d3039 	stcmi	0, cr3, [sp], #-228	; 0xffffff1c
    1efc:	736d7261 	cmnvc	sp, #268435462	; 0x10000006
    1f00:	65747379 	ldrbvs	r7, [r4, #-889]!	; 0xfffffc87
    1f04:	6f6b2f6d 	svcvs	0x006b2f6d
    1f08:	696c2f64 	stmdbvs	ip!, {r2, r5, r6, r8, r9, sl, fp, sp}^
    1f0c:	54532f62 	ldrbpl	r2, [r3], #-3938	; 0xfffff09e
    1f10:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
    1f14:	696c5f34 	stmdbvs	ip!, {r2, r4, r5, r8, r9, sl, fp, ip, lr}^
    1f18:	54532f62 	ldrbpl	r2, [r3], #-3938	; 0xfffff09e
    1f1c:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
    1f20:	5f787834 	svcpl	0x00787834
    1f24:	50647453 	rsbpl	r7, r4, r3, asr r4
    1f28:	70697265 	rsbvc	r7, r9, r5, ror #4
    1f2c:	72445f68 	subvc	r5, r4, #104, 30	; 0x1a0
    1f30:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
    1f34:	6372732f 	cmnvs	r2, #-1140850688	; 0xbc000000
    1f38:	6d74732f 	ldclvs	3, cr7, [r4, #-188]!	; 0xffffff44
    1f3c:	34663233 	strbtcc	r3, [r6], #-563	; 0xfffffdcd
    1f40:	675f7878 			; <UNDEFINED> instruction: 0x675f7878
    1f44:	2e6f6970 			; <UNDEFINED> instruction: 0x2e6f6970
    1f48:	50470063 	subpl	r0, r7, r3, rrx
    1f4c:	445f4f49 	ldrbmi	r4, [pc], #-3913	; 1f54 <startup-0x1fffe0ac>
    1f50:	696e4965 	stmdbvs	lr!, {r0, r2, r5, r6, r8, fp, lr}^
    1f54:	50470074 	subpl	r0, r7, r4, ror r0
    1f58:	525f4f49 	subspl	r4, pc, #292	; 0x124
    1f5c:	49646165 	stmdbmi	r4!, {r0, r2, r5, r6, r8, sp, lr}^
    1f60:	7475706e 	ldrbtvc	r7, [r5], #-110	; 0xffffff92
    1f64:	61746144 	cmnvs	r4, r4, asr #2
    1f68:	00746942 	rsbseq	r6, r4, r2, asr #18
    1f6c:	4f495047 	svcmi	0x00495047
    1f70:	696e495f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, lr}^
    1f74:	72745374 	rsbsvc	r5, r4, #116, 6	; 0xd0000001
    1f78:	00746375 	rsbseq	r6, r4, r5, ror r3
    1f7c:	74726f50 	ldrbtvc	r6, [r2], #-3920	; 0xfffff0b0
    1f80:	006c6156 	rsbeq	r6, ip, r6, asr r1
    1f84:	4f495047 	svcmi	0x00495047
    1f88:	6e69505f 	mcrvs	0, 3, r5, cr9, cr15, {2}
    1f8c:	72756f53 	rsbsvc	r6, r5, #332	; 0x14c
    1f90:	47006563 	strmi	r6, [r0, -r3, ror #10]
    1f94:	5f4f4950 	svcpl	0x004f4950
    1f98:	64616552 	strbtvs	r6, [r1], #-1362	; 0xfffffaae
    1f9c:	75706e49 	ldrbvc	r6, [r0, #-3657]!	; 0xfffff1b7
    1fa0:	74614474 	strbtvc	r4, [r1], #-1140	; 0xfffffb8c
    1fa4:	50470061 	subpl	r0, r7, r1, rrx
    1fa8:	505f4f49 	subspl	r4, pc, r9, asr #30
    1fac:	6f4c6e69 	svcvs	0x004c6e69
    1fb0:	6f436b63 	svcvs	0x00436b63
    1fb4:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    1fb8:	74694200 	strbtvc	r4, [r9], #-512	; 0xfffffe00
    1fbc:	69746341 	ldmdbvs	r4!, {r0, r6, r8, r9, sp, lr}^
    1fc0:	63006e6f 	movwvs	r6, #3695	; 0xe6f
    1fc4:	65727275 	ldrbvs	r7, [r2, #-629]!	; 0xfffffd8b
    1fc8:	6970746e 	ldmdbvs	r0!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}^
    1fcc:	5047006e 	subpl	r0, r7, lr, rrx
    1fd0:	575f4f49 	ldrbpl	r4, [pc, -r9, asr #30]
    1fd4:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
    1fd8:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
    1fdc:	4700784f 	strmi	r7, [r0, -pc, asr #16]
    1fe0:	5f4f4950 	svcpl	0x004f4950
    1fe4:	67676f54 			; <UNDEFINED> instruction: 0x67676f54
    1fe8:	6942656c 	stmdbvs	r2, {r2, r3, r5, r6, r8, sl, sp, lr}^
    1fec:	74007374 	strvc	r7, [r0], #-884	; 0xfffffc8c
    1ff0:	5f706d65 	svcpl	0x00706d65
    1ff4:	50470032 	subpl	r0, r7, r2, lsr r0
    1ff8:	505f4f49 	subspl	r4, pc, r9, asr #30
    1ffc:	46416e69 	strbmi	r6, [r1], -r9, ror #28
    2000:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    2004:	47006769 	strmi	r6, [r0, -r9, ror #14]
    2008:	5f4f4950 	svcpl	0x004f4950
    200c:	64616552 	strbtvs	r6, [r1], #-1362	; 0xfffffaae
    2010:	7074754f 	rsbsvc	r7, r4, pc, asr #10
    2014:	61447475 	hvcvs	18245	; 0x4745
    2018:	69426174 	stmdbvs	r2, {r2, r4, r5, r6, r8, sp, lr}^
    201c:	Address 0x0000201c is out of bounds.


Disassembly of section .comment:

00000000 <.comment>:
   0:	3a434347 	bcc	10d0d24 <startup-0x1ef2f2dc>
   4:	4e472820 	cdpmi	8, 4, cr2, cr7, cr0, {1}
   8:	6f542055 	svcvs	0x00542055
   c:	20736c6f 	rsbscs	r6, r3, pc, ror #24
  10:	20726f66 	rsbscs	r6, r2, r6, ror #30
  14:	206d7241 	rsbcs	r7, sp, r1, asr #4
  18:	65626d45 	strbvs	r6, [r2, #-3397]!	; 0xfffff2bb
  1c:	64656464 	strbtvs	r6, [r5], #-1124	; 0xfffffb9c
  20:	6f725020 	svcvs	0x00725020
  24:	73736563 	cmnvc	r3, #415236096	; 0x18c00000
  28:	2073726f 	rsbscs	r7, r3, pc, ror #4
  2c:	30322d37 	eorscc	r2, r2, r7, lsr sp
  30:	712d3731 			; <UNDEFINED> instruction: 0x712d3731
  34:	616d2d34 	cmnvs	sp, r4, lsr sp
  38:	29726f6a 	ldmdbcs	r2!, {r1, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
  3c:	322e3720 	eorcc	r3, lr, #32, 14	; 0x800000
  40:	3220312e 	eorcc	r3, r0, #-2147483637	; 0x8000000b
  44:	30373130 	eorscc	r3, r7, r0, lsr r1
  48:	20343039 	eorscs	r3, r4, r9, lsr r0
  4c:	6c657228 	sfmvs	f7, 2, [r5], #-160	; 0xffffff60
  50:	65736165 	ldrbvs	r6, [r3, #-357]!	; 0xfffffe9b
  54:	415b2029 	cmpmi	fp, r9, lsr #32
  58:	652f4d52 	strvs	r4, [pc, #-3410]!	; fffff30e <GPIO_Ports+0xdfffb506>
  5c:	6465626d 	strbtvs	r6, [r5], #-621	; 0xfffffd93
  60:	2d646564 	cfstr64cs	mvdx6, [r4, #-400]!	; 0xfffffe70
  64:	72622d37 	rsbvc	r2, r2, #3520	; 0xdc0
  68:	68636e61 	stmdavs	r3!, {r0, r5, r6, r9, sl, fp, sp, lr}^
  6c:	76657220 	strbtvc	r7, [r5], -r0, lsr #4
  70:	6f697369 	svcvs	0x00697369
  74:	3532206e 	ldrcc	r2, [r2, #-110]!	; 0xffffff92
  78:	34303235 	ldrtcc	r3, [r0], #-565	; 0xfffffdcb
  7c:	Address 0x0000007c is out of bounds.


Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00002b41 	andeq	r2, r0, r1, asr #22
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	00000021 	andeq	r0, r0, r1, lsr #32
  10:	2d533605 	ldclcs	6, cr3, [r3, #-20]	; 0xffffffec
  14:	0c06004d 	stceq	0, cr0, [r6], {77}	; 0x4d
  18:	01094d07 	tsteq	r9, r7, lsl #26
  1c:	01140412 	tsteq	r4, r2, lsl r4
  20:	03170115 	tsteq	r7, #1073741829	; 0x40000005
  24:	01190118 	tsteq	r9, r8, lsl r1
  28:	061e011a 			; <UNDEFINED> instruction: 0x061e011a

Disassembly of section .debug_frame:

00000000 <.debug_frame>:
       0:	0000000c 	andeq	r0, r0, ip
       4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
       8:	7c020001 	stcvc	0, cr0, [r2], {1}
       c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
      10:	0000001c 	andeq	r0, r0, ip, lsl r0
      14:	00000000 	andeq	r0, r0, r0
      18:	20000010 	andcs	r0, r0, r0, lsl r0
      1c:	00000060 	andeq	r0, r0, r0, rrx
      20:	40080e41 	andmi	r0, r8, r1, asr #28
      24:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
      28:	100e4101 	andne	r4, lr, r1, lsl #2
      2c:	00070d41 	andeq	r0, r7, r1, asr #26
      30:	0000001c 	andeq	r0, r0, ip, lsl r0
      34:	00000000 	andeq	r0, r0, r0
      38:	20000070 	andcs	r0, r0, r0, ror r0
      3c:	00000044 	andeq	r0, r0, r4, asr #32
      40:	40080e41 	andmi	r0, r8, r1, asr #28
      44:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
      48:	100e4101 	andne	r4, lr, r1, lsl #2
      4c:	00070d41 	andeq	r0, r7, r1, asr #26
      50:	0000001c 	andeq	r0, r0, ip, lsl r0
      54:	00000000 	andeq	r0, r0, r0
      58:	200000b4 	strhcs	r0, [r0], -r4
      5c:	00000098 	muleq	r0, r8, r0
      60:	40080e41 	andmi	r0, r8, r1, asr #28
      64:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
      68:	280e4101 	stmdacs	lr, {r0, r8, lr}
      6c:	00070d41 	andeq	r0, r7, r1, asr #26
      70:	00000020 	andeq	r0, r0, r0, lsr #32
      74:	00000000 	andeq	r0, r0, r0
      78:	2000014c 	andcs	r0, r0, ip, asr #2
      7c:	0000012c 	andeq	r0, r0, ip, lsr #2
      80:	400c0e41 	andmi	r0, ip, r1, asr #28
      84:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
      88:	018e4002 	orreq	r4, lr, r2
      8c:	41280e41 			; <UNDEFINED> instruction: 0x41280e41
      90:	0000070d 	andeq	r0, r0, sp, lsl #14
      94:	0000001c 	andeq	r0, r0, ip, lsl r0
      98:	00000000 	andeq	r0, r0, r0
      9c:	20000278 	andcs	r0, r0, r8, ror r2
      a0:	00000050 	andeq	r0, r0, r0, asr r0
      a4:	40080e41 	andmi	r0, r8, r1, asr #28
      a8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
      ac:	200e4101 	andcs	r4, lr, r1, lsl #2
      b0:	00070d41 	andeq	r0, r7, r1, asr #26
      b4:	0000001c 	andeq	r0, r0, ip, lsl r0
      b8:	00000000 	andeq	r0, r0, r0
      bc:	200002c8 	andcs	r0, r0, r8, asr #5
      c0:	00000032 	andeq	r0, r0, r2, lsr r0
      c4:	40080e41 	andmi	r0, r8, r1, asr #28
      c8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
      cc:	100e4101 	andne	r4, lr, r1, lsl #2
      d0:	00070d41 	andeq	r0, r7, r1, asr #26
      d4:	0000001c 	andeq	r0, r0, ip, lsl r0
      d8:	00000000 	andeq	r0, r0, r0
      dc:	200002fa 	strdcs	r0, [r0], -sl
      e0:	000000aa 	andeq	r0, r0, sl, lsr #1
      e4:	40080e41 	andmi	r0, r8, r1, asr #28
      e8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
      ec:	180e4101 	stmdane	lr, {r0, r8, lr}
      f0:	00070d41 	andeq	r0, r7, r1, asr #26
      f4:	0000001c 	andeq	r0, r0, ip, lsl r0
      f8:	00000000 	andeq	r0, r0, r0
      fc:	200003a4 	andcs	r0, r0, r4, lsr #7
     100:	0000006c 	andeq	r0, r0, ip, rrx
     104:	40080e41 	andmi	r0, r8, r1, asr #28
     108:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     10c:	200e4101 	andcs	r4, lr, r1, lsl #2
     110:	00070d41 	andeq	r0, r7, r1, asr #26
     114:	00000024 	andeq	r0, r0, r4, lsr #32
     118:	00000000 	andeq	r0, r0, r0
     11c:	20000410 	andcs	r0, r0, r0, lsl r4
     120:	00000134 	andeq	r0, r0, r4, lsr r1
     124:	40100e41 	andsmi	r0, r0, r1, asr #28
     128:	85400484 	strbhi	r0, [r0, #-1156]	; 0xfffffb7c
     12c:	02874003 	addeq	r4, r7, #3
     130:	41018e40 	tstmi	r1, r0, asr #28
     134:	0d41200e 	stcleq	0, cr2, [r1, #-56]	; 0xffffffc8
     138:	00000007 	andeq	r0, r0, r7
     13c:	0000001c 	andeq	r0, r0, ip, lsl r0
     140:	00000000 	andeq	r0, r0, r0
     144:	20000544 	andcs	r0, r0, r4, asr #10
     148:	00000098 	muleq	r0, r8, r0
     14c:	40080e41 	andmi	r0, r8, r1, asr #28
     150:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     154:	100e4101 	andne	r4, lr, r1, lsl #2
     158:	00070d41 	andeq	r0, r7, r1, asr #26
     15c:	00000024 	andeq	r0, r0, r4, lsr #32
     160:	00000000 	andeq	r0, r0, r0
     164:	200005dc 	ldrdcs	r0, [r0], -ip
     168:	000001bc 			; <UNDEFINED> instruction: 0x000001bc
     16c:	40140e41 	andsmi	r0, r4, r1, asr #28
     170:	85400584 	strbhi	r0, [r0, #-1412]	; 0xfffffa7c
     174:	03864004 	orreq	r4, r6, #4
     178:	40028740 	andmi	r8, r2, r0, asr #14
     17c:	0e41018e 	dvfeqd	f0, f1, #0.5
     180:	070d4138 	smladxeq	sp, r8, r1, r4
     184:	0000000c 	andeq	r0, r0, ip
     188:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     18c:	7c020001 	stcvc	0, cr0, [r2], {1}
     190:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     194:	0000001c 	andeq	r0, r0, ip, lsl r0
     198:	00000184 	andeq	r0, r0, r4, lsl #3
     19c:	20000798 	mulcs	r0, r8, r7
     1a0:	00000050 	andeq	r0, r0, r0, asr r0
     1a4:	40080e41 	andmi	r0, r8, r1, asr #28
     1a8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     1ac:	100e4101 	andne	r4, lr, r1, lsl #2
     1b0:	00070d41 	andeq	r0, r7, r1, asr #26
     1b4:	0000001c 	andeq	r0, r0, ip, lsl r0
     1b8:	00000184 	andeq	r0, r0, r4, lsl #3
     1bc:	200007e8 	andcs	r0, r0, r8, ror #15
     1c0:	000001c4 	andeq	r0, r0, r4, asr #3
     1c4:	40080e41 	andmi	r0, r8, r1, asr #28
     1c8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     1cc:	180e4101 	stmdane	lr, {r0, r8, lr}
     1d0:	00070d41 	andeq	r0, r7, r1, asr #26
     1d4:	00000020 	andeq	r0, r0, r0, lsr #32
     1d8:	00000184 	andeq	r0, r0, r4, lsl #3
     1dc:	200009ac 	andcs	r0, r0, ip, lsr #19
     1e0:	000001b0 			; <UNDEFINED> instruction: 0x000001b0
     1e4:	400c0e41 	andmi	r0, ip, r1, asr #28
     1e8:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
     1ec:	018e4002 	orreq	r4, lr, r2
     1f0:	41200e41 			; <UNDEFINED> instruction: 0x41200e41
     1f4:	0000070d 	andeq	r0, r0, sp, lsl #14
     1f8:	0000001c 	andeq	r0, r0, ip, lsl r0
     1fc:	00000184 	andeq	r0, r0, r4, lsl #3
     200:	20000b5c 	andcs	r0, r0, ip, asr fp
     204:	00000052 	andeq	r0, r0, r2, asr r0
     208:	40080e41 	andmi	r0, r8, r1, asr #28
     20c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     210:	100e4101 	andne	r4, lr, r1, lsl #2
     214:	00070d41 	andeq	r0, r7, r1, asr #26
     218:	0000001c 	andeq	r0, r0, ip, lsl r0
     21c:	00000184 	andeq	r0, r0, r4, lsl #3
     220:	20000bae 	andcs	r0, r0, lr, lsr #23
     224:	00000072 	andeq	r0, r0, r2, ror r0
     228:	40080e41 	andmi	r0, r8, r1, asr #28
     22c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     230:	100e4101 	andne	r4, lr, r1, lsl #2
     234:	00070d41 	andeq	r0, r7, r1, asr #26
     238:	0000001c 	andeq	r0, r0, ip, lsl r0
     23c:	00000184 	andeq	r0, r0, r4, lsl #3
     240:	20000c20 	andcs	r0, r0, r0, lsr #24
     244:	00000040 	andeq	r0, r0, r0, asr #32
     248:	40080e41 	andmi	r0, r8, r1, asr #28
     24c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     250:	100e4101 	andne	r4, lr, r1, lsl #2
     254:	00070d41 	andeq	r0, r7, r1, asr #26
     258:	0000001c 	andeq	r0, r0, ip, lsl r0
     25c:	00000184 	andeq	r0, r0, r4, lsl #3
     260:	20000c60 	andcs	r0, r0, r0, ror #24
     264:	000000c8 	andeq	r0, r0, r8, asr #1
     268:	40080e41 	andmi	r0, r8, r1, asr #28
     26c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     270:	100e4101 	andne	r4, lr, r1, lsl #2
     274:	00070d41 	andeq	r0, r7, r1, asr #26
     278:	00000020 	andeq	r0, r0, r0, lsr #32
     27c:	00000184 	andeq	r0, r0, r4, lsl #3
     280:	20000d28 	andcs	r0, r0, r8, lsr #26
     284:	000001e2 	andeq	r0, r0, r2, ror #3
     288:	400c0e41 	andmi	r0, ip, r1, asr #28
     28c:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
     290:	018e4002 	orreq	r4, lr, r2
     294:	41200e41 			; <UNDEFINED> instruction: 0x41200e41
     298:	0000070d 	andeq	r0, r0, sp, lsl #14
     29c:	0000001c 	andeq	r0, r0, ip, lsl r0
     2a0:	00000184 	andeq	r0, r0, r4, lsl #3
     2a4:	20000f0a 	andcs	r0, r0, sl, lsl #30
     2a8:	000000d6 	ldrdeq	r0, [r0], -r6
     2ac:	40080e41 	andmi	r0, r8, r1, asr #28
     2b0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     2b4:	180e4101 	stmdane	lr, {r0, r8, lr}
     2b8:	00070d41 	andeq	r0, r7, r1, asr #26
     2bc:	0000001c 	andeq	r0, r0, ip, lsl r0
     2c0:	00000184 	andeq	r0, r0, r4, lsl #3
     2c4:	20000fe0 	andcs	r0, r0, r0, ror #31
     2c8:	00000056 	andeq	r0, r0, r6, asr r0
     2cc:	40080e41 	andmi	r0, r8, r1, asr #28
     2d0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     2d4:	100e4101 	andne	r4, lr, r1, lsl #2
     2d8:	00070d41 	andeq	r0, r7, r1, asr #26
     2dc:	0000001c 	andeq	r0, r0, ip, lsl r0
     2e0:	00000184 	andeq	r0, r0, r4, lsl #3
     2e4:	20001036 	andcs	r1, r0, r6, lsr r0
     2e8:	000001aa 	andeq	r0, r0, sl, lsr #3
     2ec:	40080e41 	andmi	r0, r8, r1, asr #28
     2f0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     2f4:	180e4101 	stmdane	lr, {r0, r8, lr}
     2f8:	00070d41 	andeq	r0, r7, r1, asr #26
     2fc:	0000001c 	andeq	r0, r0, ip, lsl r0
     300:	00000184 	andeq	r0, r0, r4, lsl #3
     304:	200011e0 	andcs	r1, r0, r0, ror #3
     308:	00000038 	andeq	r0, r0, r8, lsr r0
     30c:	40080e41 	andmi	r0, r8, r1, asr #28
     310:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     314:	100e4101 	andne	r4, lr, r1, lsl #2
     318:	00070d41 	andeq	r0, r7, r1, asr #26
     31c:	0000001c 	andeq	r0, r0, ip, lsl r0
     320:	00000184 	andeq	r0, r0, r4, lsl #3
     324:	20001218 	andcs	r1, r0, r8, lsl r2
     328:	00000060 	andeq	r0, r0, r0, rrx
     32c:	40080e41 	andmi	r0, r8, r1, asr #28
     330:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     334:	180e4101 	stmdane	lr, {r0, r8, lr}
     338:	00070d41 	andeq	r0, r7, r1, asr #26
     33c:	0000001c 	andeq	r0, r0, ip, lsl r0
     340:	00000184 	andeq	r0, r0, r4, lsl #3
     344:	20001278 	andcs	r1, r0, r8, ror r2
     348:	00000124 	andeq	r0, r0, r4, lsr #2
     34c:	40080e41 	andmi	r0, r8, r1, asr #28
     350:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     354:	180e4101 	stmdane	lr, {r0, r8, lr}
     358:	00070d41 	andeq	r0, r7, r1, asr #26
     35c:	0000001c 	andeq	r0, r0, ip, lsl r0
     360:	00000184 	andeq	r0, r0, r4, lsl #3
     364:	2000139c 	mulcs	r0, ip, r3
     368:	00000042 	andeq	r0, r0, r2, asr #32
     36c:	40080e41 	andmi	r0, r8, r1, asr #28
     370:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     374:	180e4101 	stmdane	lr, {r0, r8, lr}
     378:	00070d41 	andeq	r0, r7, r1, asr #26
     37c:	0000001c 	andeq	r0, r0, ip, lsl r0
     380:	00000184 	andeq	r0, r0, r4, lsl #3
     384:	200013de 	ldrdcs	r1, [r0], -lr
     388:	00000062 	andeq	r0, r0, r2, rrx
     38c:	40080e41 	andmi	r0, r8, r1, asr #28
     390:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     394:	180e4101 	stmdane	lr, {r0, r8, lr}
     398:	00070d41 	andeq	r0, r7, r1, asr #26
     39c:	0000001c 	andeq	r0, r0, ip, lsl r0
     3a0:	00000184 	andeq	r0, r0, r4, lsl #3
     3a4:	20001440 	andcs	r1, r0, r0, asr #8
     3a8:	0000002e 	andeq	r0, r0, lr, lsr #32
     3ac:	40080e41 	andmi	r0, r8, r1, asr #28
     3b0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     3b4:	180e4101 	stmdane	lr, {r0, r8, lr}
     3b8:	00070d41 	andeq	r0, r7, r1, asr #26
     3bc:	0000001c 	andeq	r0, r0, ip, lsl r0
     3c0:	00000184 	andeq	r0, r0, r4, lsl #3
     3c4:	2000146e 	andcs	r1, r0, lr, ror #8
     3c8:	00000026 	andeq	r0, r0, r6, lsr #32
     3cc:	40080e41 	andmi	r0, r8, r1, asr #28
     3d0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     3d4:	180e4101 	stmdane	lr, {r0, r8, lr}
     3d8:	00070d41 	andeq	r0, r7, r1, asr #26
     3dc:	0000001c 	andeq	r0, r0, ip, lsl r0
     3e0:	00000184 	andeq	r0, r0, r4, lsl #3
     3e4:	20001494 	mulcs	r0, r4, r4
     3e8:	00000026 	andeq	r0, r0, r6, lsr #32
     3ec:	40080e41 	andmi	r0, r8, r1, asr #28
     3f0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     3f4:	180e4101 	stmdane	lr, {r0, r8, lr}
     3f8:	00070d41 	andeq	r0, r7, r1, asr #26
     3fc:	0000001c 	andeq	r0, r0, ip, lsl r0
     400:	00000184 	andeq	r0, r0, r4, lsl #3
     404:	200014ba 			; <UNDEFINED> instruction: 0x200014ba
     408:	0000003a 	andeq	r0, r0, sl, lsr r0
     40c:	40080e41 	andmi	r0, r8, r1, asr #28
     410:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     414:	180e4101 	stmdane	lr, {r0, r8, lr}
     418:	00070d41 	andeq	r0, r7, r1, asr #26
     41c:	0000001c 	andeq	r0, r0, ip, lsl r0
     420:	00000184 	andeq	r0, r0, r4, lsl #3
     424:	200014f4 	strdcs	r1, [r0], -r4
     428:	000000f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     42c:	40080e41 	andmi	r0, r8, r1, asr #28
     430:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     434:	180e4101 	stmdane	lr, {r0, r8, lr}
     438:	00070d41 	andeq	r0, r7, r1, asr #26
     43c:	0000001c 	andeq	r0, r0, ip, lsl r0
     440:	00000184 	andeq	r0, r0, r4, lsl #3
     444:	200015e4 	andcs	r1, r0, r4, ror #11
     448:	00000070 	andeq	r0, r0, r0, ror r0
     44c:	40080e41 	andmi	r0, r8, r1, asr #28
     450:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     454:	180e4101 	stmdane	lr, {r0, r8, lr}
     458:	00070d41 	andeq	r0, r7, r1, asr #26
     45c:	00000020 	andeq	r0, r0, r0, lsr #32
     460:	00000184 	andeq	r0, r0, r4, lsl #3
     464:	20001654 	andcs	r1, r0, r4, asr r6
     468:	000001f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     46c:	400c0e41 	andmi	r0, ip, r1, asr #28
     470:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
     474:	018e4002 	orreq	r4, lr, r2
     478:	41200e41 			; <UNDEFINED> instruction: 0x41200e41
     47c:	0000070d 	andeq	r0, r0, sp, lsl #14
     480:	0000001c 	andeq	r0, r0, ip, lsl r0
     484:	00000184 	andeq	r0, r0, r4, lsl #3
     488:	20001844 	andcs	r1, r0, r4, asr #16
     48c:	000000ec 	andeq	r0, r0, ip, ror #1
     490:	40080e41 	andmi	r0, r8, r1, asr #28
     494:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     498:	100e4101 	andne	r4, lr, r1, lsl #2
     49c:	00070d41 	andeq	r0, r7, r1, asr #26
     4a0:	0000001c 	andeq	r0, r0, ip, lsl r0
     4a4:	00000184 	andeq	r0, r0, r4, lsl #3
     4a8:	20001930 	andcs	r1, r0, r0, lsr r9
     4ac:	0000003a 	andeq	r0, r0, sl, lsr r0
     4b0:	40080e41 	andmi	r0, r8, r1, asr #28
     4b4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     4b8:	180e4101 	stmdane	lr, {r0, r8, lr}
     4bc:	00070d41 	andeq	r0, r7, r1, asr #26
     4c0:	0000000c 	andeq	r0, r0, ip
     4c4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     4c8:	7c020001 	stcvc	0, cr0, [r2], {1}
     4cc:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     4d0:	0000001c 	andeq	r0, r0, ip, lsl r0
     4d4:	000004c0 	andeq	r0, r0, r0, asr #9
     4d8:	2000196c 	andcs	r1, r0, ip, ror #18
     4dc:	00000060 	andeq	r0, r0, r0, rrx
     4e0:	40080e41 	andmi	r0, r8, r1, asr #28
     4e4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     4e8:	100e4101 	andne	r4, lr, r1, lsl #2
     4ec:	00070d41 	andeq	r0, r7, r1, asr #26
     4f0:	0000001c 	andeq	r0, r0, ip, lsl r0
     4f4:	000004c0 	andeq	r0, r0, r0, asr #9
     4f8:	200019cc 	andcs	r1, r0, ip, asr #19
     4fc:	00000048 	andeq	r0, r0, r8, asr #32
     500:	40080e41 	andmi	r0, r8, r1, asr #28
     504:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     508:	100e4101 	andne	r4, lr, r1, lsl #2
     50c:	00070d41 	andeq	r0, r7, r1, asr #26
     510:	00000018 	andeq	r0, r0, r8, lsl r0
     514:	000004c0 	andeq	r0, r0, r0, asr #9
     518:	20001a14 	andcs	r1, r0, r4, lsl sl
     51c:	00000070 	andeq	r0, r0, r0, ror r0
     520:	40080e41 	andmi	r0, r8, r1, asr #28
     524:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     528:	070d4101 	streq	r4, [sp, -r1, lsl #2]
     52c:	0000001c 	andeq	r0, r0, ip, lsl r0
     530:	000004c0 	andeq	r0, r0, r0, asr #9
     534:	20001a84 	andcs	r1, r0, r4, lsl #21
     538:	00000028 	andeq	r0, r0, r8, lsr #32
     53c:	40080e41 	andmi	r0, r8, r1, asr #28
     540:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     544:	100e4101 	andne	r4, lr, r1, lsl #2
     548:	00070d41 	andeq	r0, r7, r1, asr #26
     54c:	00000020 	andeq	r0, r0, r0, lsr #32
     550:	000004c0 	andeq	r0, r0, r0, asr #9
     554:	20001aac 	andcs	r1, r0, ip, lsr #21
     558:	0000005e 	andeq	r0, r0, lr, asr r0
     55c:	400c0e41 	andmi	r0, ip, r1, asr #28
     560:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
     564:	018e4002 	orreq	r4, lr, r2
     568:	41180e41 	tstmi	r8, r1, asr #28
     56c:	0000070d 	andeq	r0, r0, sp, lsl #14
     570:	0000001c 	andeq	r0, r0, ip, lsl r0
     574:	000004c0 	andeq	r0, r0, r0, asr #9
     578:	20001b0a 	andcs	r1, r0, sl, lsl #22
     57c:	0000003e 	andeq	r0, r0, lr, lsr r0
     580:	40080e41 	andmi	r0, r8, r1, asr #28
     584:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     588:	180e4101 	stmdane	lr, {r0, r8, lr}
     58c:	00070d41 	andeq	r0, r7, r1, asr #26
     590:	0000001c 	andeq	r0, r0, ip, lsl r0
     594:	000004c0 	andeq	r0, r0, r0, asr #9
     598:	20001b48 	andcs	r1, r0, r8, asr #22
     59c:	00000020 	andeq	r0, r0, r0, lsr #32
     5a0:	40080e41 	andmi	r0, r8, r1, asr #28
     5a4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     5a8:	100e4101 	andne	r4, lr, r1, lsl #2
     5ac:	00070d41 	andeq	r0, r7, r1, asr #26
     5b0:	0000001c 	andeq	r0, r0, ip, lsl r0
     5b4:	000004c0 	andeq	r0, r0, r0, asr #9
     5b8:	20001b68 	andcs	r1, r0, r8, ror #22
     5bc:	00000044 	andeq	r0, r0, r4, asr #32
     5c0:	40080e41 	andmi	r0, r8, r1, asr #28
     5c4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     5c8:	100e4101 	andne	r4, lr, r1, lsl #2
     5cc:	00070d41 	andeq	r0, r7, r1, asr #26
     5d0:	0000001c 	andeq	r0, r0, ip, lsl r0
     5d4:	000004c0 	andeq	r0, r0, r0, asr #9
     5d8:	20001bac 	andcs	r1, r0, ip, lsr #23
     5dc:	00000020 	andeq	r0, r0, r0, lsr #32
     5e0:	40080e41 	andmi	r0, r8, r1, asr #28
     5e4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     5e8:	100e4101 	andne	r4, lr, r1, lsl #2
     5ec:	00070d41 	andeq	r0, r7, r1, asr #26
     5f0:	0000001c 	andeq	r0, r0, ip, lsl r0
     5f4:	000004c0 	andeq	r0, r0, r0, asr #9
     5f8:	20001bcc 	andcs	r1, r0, ip, asr #23
     5fc:	0000003c 	andeq	r0, r0, ip, lsr r0
     600:	40080e41 	andmi	r0, r8, r1, asr #28
     604:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     608:	180e4101 	stmdane	lr, {r0, r8, lr}
     60c:	00070d41 	andeq	r0, r7, r1, asr #26
     610:	0000001c 	andeq	r0, r0, ip, lsl r0
     614:	000004c0 	andeq	r0, r0, r0, asr #9
     618:	20001c08 	andcs	r1, r0, r8, lsl #24
     61c:	00000020 	andeq	r0, r0, r0, lsr #32
     620:	40080e41 	andmi	r0, r8, r1, asr #28
     624:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     628:	100e4101 	andne	r4, lr, r1, lsl #2
     62c:	00070d41 	andeq	r0, r7, r1, asr #26
     630:	0000001c 	andeq	r0, r0, ip, lsl r0
     634:	000004c0 	andeq	r0, r0, r0, asr #9
     638:	20001c28 	andcs	r1, r0, r8, lsr #24
     63c:	00000028 	andeq	r0, r0, r8, lsr #32
     640:	40080e41 	andmi	r0, r8, r1, asr #28
     644:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     648:	100e4101 	andne	r4, lr, r1, lsl #2
     64c:	00070d41 	andeq	r0, r7, r1, asr #26
     650:	0000001c 	andeq	r0, r0, ip, lsl r0
     654:	000004c0 	andeq	r0, r0, r0, asr #9
     658:	20001c50 	andcs	r1, r0, r0, asr ip
     65c:	00000020 	andeq	r0, r0, r0, lsr #32
     660:	40080e41 	andmi	r0, r8, r1, asr #28
     664:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     668:	100e4101 	andne	r4, lr, r1, lsl #2
     66c:	00070d41 	andeq	r0, r7, r1, asr #26
     670:	0000001c 	andeq	r0, r0, ip, lsl r0
     674:	000004c0 	andeq	r0, r0, r0, asr #9
     678:	20001c70 	andcs	r1, r0, r0, ror ip
     67c:	00000030 	andeq	r0, r0, r0, lsr r0
     680:	40080e41 	andmi	r0, r8, r1, asr #28
     684:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     688:	180e4101 	stmdane	lr, {r0, r8, lr}
     68c:	00070d41 	andeq	r0, r7, r1, asr #26
     690:	0000001c 	andeq	r0, r0, ip, lsl r0
     694:	000004c0 	andeq	r0, r0, r0, asr #9
     698:	20001ca0 	andcs	r1, r0, r0, lsr #25
     69c:	00000020 	andeq	r0, r0, r0, lsr #32
     6a0:	40080e41 	andmi	r0, r8, r1, asr #28
     6a4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     6a8:	100e4101 	andne	r4, lr, r1, lsl #2
     6ac:	00070d41 	andeq	r0, r7, r1, asr #26
     6b0:	0000001c 	andeq	r0, r0, ip, lsl r0
     6b4:	000004c0 	andeq	r0, r0, r0, asr #9
     6b8:	20001cc0 	andcs	r1, r0, r0, asr #25
     6bc:	00000020 	andeq	r0, r0, r0, lsr #32
     6c0:	40080e41 	andmi	r0, r8, r1, asr #28
     6c4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     6c8:	100e4101 	andne	r4, lr, r1, lsl #2
     6cc:	00070d41 	andeq	r0, r7, r1, asr #26
     6d0:	0000001c 	andeq	r0, r0, ip, lsl r0
     6d4:	000004c0 	andeq	r0, r0, r0, asr #9
     6d8:	20001ce0 	andcs	r1, r0, r0, ror #25
     6dc:	00000040 	andeq	r0, r0, r0, asr #32
     6e0:	40080e41 	andmi	r0, r8, r1, asr #28
     6e4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     6e8:	180e4101 	stmdane	lr, {r0, r8, lr}
     6ec:	00070d41 	andeq	r0, r7, r1, asr #26
     6f0:	0000001c 	andeq	r0, r0, ip, lsl r0
     6f4:	000004c0 	andeq	r0, r0, r0, asr #9
     6f8:	20001d20 	andcs	r1, r0, r0, lsr #26
     6fc:	0000003c 	andeq	r0, r0, ip, lsr r0
     700:	40080e41 	andmi	r0, r8, r1, asr #28
     704:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     708:	180e4101 	stmdane	lr, {r0, r8, lr}
     70c:	00070d41 	andeq	r0, r7, r1, asr #26
     710:	0000001c 	andeq	r0, r0, ip, lsl r0
     714:	000004c0 	andeq	r0, r0, r0, asr #9
     718:	20001d5c 	andcs	r1, r0, ip, asr sp
     71c:	00000034 	andeq	r0, r0, r4, lsr r0
     720:	40080e41 	andmi	r0, r8, r1, asr #28
     724:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     728:	180e4101 	stmdane	lr, {r0, r8, lr}
     72c:	00070d41 	andeq	r0, r7, r1, asr #26
     730:	00000018 	andeq	r0, r0, r8, lsl r0
     734:	000004c0 	andeq	r0, r0, r0, asr #9
     738:	20001d90 	mulcs	r0, r0, sp
     73c:	0000001c 	andeq	r0, r0, ip, lsl r0
     740:	40080e41 	andmi	r0, r8, r1, asr #28
     744:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     748:	070d4101 	streq	r4, [sp, -r1, lsl #2]
     74c:	0000001c 	andeq	r0, r0, ip, lsl r0
     750:	000004c0 	andeq	r0, r0, r0, asr #9
     754:	20001dac 	andcs	r1, r0, ip, lsr #27
     758:	00000034 	andeq	r0, r0, r4, lsr r0
     75c:	40080e41 	andmi	r0, r8, r1, asr #28
     760:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     764:	180e4101 	stmdane	lr, {r0, r8, lr}
     768:	00070d41 	andeq	r0, r7, r1, asr #26
     76c:	0000001c 	andeq	r0, r0, ip, lsl r0
     770:	000004c0 	andeq	r0, r0, r0, asr #9
     774:	20001de0 	andcs	r1, r0, r0, ror #27
     778:	00000038 	andeq	r0, r0, r8, lsr r0
     77c:	40080e41 	andmi	r0, r8, r1, asr #28
     780:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     784:	180e4101 	stmdane	lr, {r0, r8, lr}
     788:	00070d41 	andeq	r0, r7, r1, asr #26
     78c:	0000001c 	andeq	r0, r0, ip, lsl r0
     790:	000004c0 	andeq	r0, r0, r0, asr #9
     794:	20001e18 	andcs	r1, r0, r8, lsl lr
     798:	0000003c 	andeq	r0, r0, ip, lsr r0
     79c:	40080e41 	andmi	r0, r8, r1, asr #28
     7a0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     7a4:	180e4101 	stmdane	lr, {r0, r8, lr}
     7a8:	00070d41 	andeq	r0, r7, r1, asr #26
     7ac:	0000001c 	andeq	r0, r0, ip, lsl r0
     7b0:	000004c0 	andeq	r0, r0, r0, asr #9
     7b4:	20001e54 	andcs	r1, r0, r4, asr lr
     7b8:	00000158 	andeq	r0, r0, r8, asr r1
     7bc:	40080e41 	andmi	r0, r8, r1, asr #28
     7c0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     7c4:	280e4101 	stmdacs	lr, {r0, r8, lr}
     7c8:	00070d41 	andeq	r0, r7, r1, asr #26
     7cc:	0000001c 	andeq	r0, r0, ip, lsl r0
     7d0:	000004c0 	andeq	r0, r0, r0, asr #9
     7d4:	20001fac 	andcs	r1, r0, ip, lsr #31
     7d8:	00000060 	andeq	r0, r0, r0, rrx
     7dc:	40080e41 	andmi	r0, r8, r1, asr #28
     7e0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     7e4:	180e4101 	stmdane	lr, {r0, r8, lr}
     7e8:	00070d41 	andeq	r0, r7, r1, asr #26
     7ec:	0000001c 	andeq	r0, r0, ip, lsl r0
     7f0:	000004c0 	andeq	r0, r0, r0, asr #9
     7f4:	2000200c 	andcs	r2, r0, ip
     7f8:	00000020 	andeq	r0, r0, r0, lsr #32
     7fc:	40080e41 	andmi	r0, r8, r1, asr #28
     800:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     804:	100e4101 	andne	r4, lr, r1, lsl #2
     808:	00070d41 	andeq	r0, r7, r1, asr #26
     80c:	0000001c 	andeq	r0, r0, ip, lsl r0
     810:	000004c0 	andeq	r0, r0, r0, asr #9
     814:	2000202c 	andcs	r2, r0, ip, lsr #32
     818:	00000020 	andeq	r0, r0, r0, lsr #32
     81c:	40080e41 	andmi	r0, r8, r1, asr #28
     820:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     824:	100e4101 	andne	r4, lr, r1, lsl #2
     828:	00070d41 	andeq	r0, r7, r1, asr #26
     82c:	0000001c 	andeq	r0, r0, ip, lsl r0
     830:	000004c0 	andeq	r0, r0, r0, asr #9
     834:	2000204c 	andcs	r2, r0, ip, asr #32
     838:	0000001c 	andeq	r0, r0, ip, lsl r0
     83c:	40080e41 	andmi	r0, r8, r1, asr #28
     840:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     844:	100e4101 	andne	r4, lr, r1, lsl #2
     848:	00070d41 	andeq	r0, r7, r1, asr #26
     84c:	0000001c 	andeq	r0, r0, ip, lsl r0
     850:	000004c0 	andeq	r0, r0, r0, asr #9
     854:	20002068 	andcs	r2, r0, r8, rrx
     858:	0000003c 	andeq	r0, r0, ip, lsr r0
     85c:	40080e41 	andmi	r0, r8, r1, asr #28
     860:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     864:	180e4101 	stmdane	lr, {r0, r8, lr}
     868:	00070d41 	andeq	r0, r7, r1, asr #26
     86c:	0000001c 	andeq	r0, r0, ip, lsl r0
     870:	000004c0 	andeq	r0, r0, r0, asr #9
     874:	200020a4 	andcs	r2, r0, r4, lsr #1
     878:	0000003c 	andeq	r0, r0, ip, lsr r0
     87c:	40080e41 	andmi	r0, r8, r1, asr #28
     880:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     884:	180e4101 	stmdane	lr, {r0, r8, lr}
     888:	00070d41 	andeq	r0, r7, r1, asr #26
     88c:	0000001c 	andeq	r0, r0, ip, lsl r0
     890:	000004c0 	andeq	r0, r0, r0, asr #9
     894:	200020e0 	andcs	r2, r0, r0, ror #1
     898:	0000003c 	andeq	r0, r0, ip, lsr r0
     89c:	40080e41 	andmi	r0, r8, r1, asr #28
     8a0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     8a4:	180e4101 	stmdane	lr, {r0, r8, lr}
     8a8:	00070d41 	andeq	r0, r7, r1, asr #26
     8ac:	0000001c 	andeq	r0, r0, ip, lsl r0
     8b0:	000004c0 	andeq	r0, r0, r0, asr #9
     8b4:	2000211c 	andcs	r2, r0, ip, lsl r1
     8b8:	00000040 	andeq	r0, r0, r0, asr #32
     8bc:	40080e41 	andmi	r0, r8, r1, asr #28
     8c0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     8c4:	180e4101 	stmdane	lr, {r0, r8, lr}
     8c8:	00070d41 	andeq	r0, r7, r1, asr #26
     8cc:	0000001c 	andeq	r0, r0, ip, lsl r0
     8d0:	000004c0 	andeq	r0, r0, r0, asr #9
     8d4:	2000215c 	andcs	r2, r0, ip, asr r1
     8d8:	0000003c 	andeq	r0, r0, ip, lsr r0
     8dc:	40080e41 	andmi	r0, r8, r1, asr #28
     8e0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     8e4:	180e4101 	stmdane	lr, {r0, r8, lr}
     8e8:	00070d41 	andeq	r0, r7, r1, asr #26
     8ec:	0000001c 	andeq	r0, r0, ip, lsl r0
     8f0:	000004c0 	andeq	r0, r0, r0, asr #9
     8f4:	20002198 	mulcs	r0, r8, r1
     8f8:	0000001c 	andeq	r0, r0, ip, lsl r0
     8fc:	40080e41 	andmi	r0, r8, r1, asr #28
     900:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     904:	100e4101 	andne	r4, lr, r1, lsl #2
     908:	00070d41 	andeq	r0, r7, r1, asr #26
     90c:	0000001c 	andeq	r0, r0, ip, lsl r0
     910:	000004c0 	andeq	r0, r0, r0, asr #9
     914:	200021b4 			; <UNDEFINED> instruction: 0x200021b4
     918:	00000040 	andeq	r0, r0, r0, asr #32
     91c:	40080e41 	andmi	r0, r8, r1, asr #28
     920:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     924:	100e4101 	andne	r4, lr, r1, lsl #2
     928:	00070d41 	andeq	r0, r7, r1, asr #26
     92c:	0000001c 	andeq	r0, r0, ip, lsl r0
     930:	000004c0 	andeq	r0, r0, r0, asr #9
     934:	200021f4 	strdcs	r2, [r0], -r4
     938:	00000040 	andeq	r0, r0, r0, asr #32
     93c:	40080e41 	andmi	r0, r8, r1, asr #28
     940:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     944:	100e4101 	andne	r4, lr, r1, lsl #2
     948:	00070d41 	andeq	r0, r7, r1, asr #26
     94c:	0000001c 	andeq	r0, r0, ip, lsl r0
     950:	000004c0 	andeq	r0, r0, r0, asr #9
     954:	20002234 	andcs	r2, r0, r4, lsr r2
     958:	00000040 	andeq	r0, r0, r0, asr #32
     95c:	40080e41 	andmi	r0, r8, r1, asr #28
     960:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     964:	100e4101 	andne	r4, lr, r1, lsl #2
     968:	00070d41 	andeq	r0, r7, r1, asr #26
     96c:	0000001c 	andeq	r0, r0, ip, lsl r0
     970:	000004c0 	andeq	r0, r0, r0, asr #9
     974:	20002274 	andcs	r2, r0, r4, ror r2
     978:	00000040 	andeq	r0, r0, r0, asr #32
     97c:	40080e41 	andmi	r0, r8, r1, asr #28
     980:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     984:	100e4101 	andne	r4, lr, r1, lsl #2
     988:	00070d41 	andeq	r0, r7, r1, asr #26
     98c:	0000001c 	andeq	r0, r0, ip, lsl r0
     990:	000004c0 	andeq	r0, r0, r0, asr #9
     994:	200022b4 			; <UNDEFINED> instruction: 0x200022b4
     998:	00000040 	andeq	r0, r0, r0, asr #32
     99c:	40080e41 	andmi	r0, r8, r1, asr #28
     9a0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     9a4:	100e4101 	andne	r4, lr, r1, lsl #2
     9a8:	00070d41 	andeq	r0, r7, r1, asr #26
     9ac:	0000001c 	andeq	r0, r0, ip, lsl r0
     9b0:	000004c0 	andeq	r0, r0, r0, asr #9
     9b4:	200022f4 	strdcs	r2, [r0], -r4
     9b8:	00000040 	andeq	r0, r0, r0, asr #32
     9bc:	40080e41 	andmi	r0, r8, r1, asr #28
     9c0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     9c4:	100e4101 	andne	r4, lr, r1, lsl #2
     9c8:	00070d41 	andeq	r0, r7, r1, asr #26
     9cc:	0000001c 	andeq	r0, r0, ip, lsl r0
     9d0:	000004c0 	andeq	r0, r0, r0, asr #9
     9d4:	20002334 	andcs	r2, r0, r4, lsr r3
     9d8:	00000040 	andeq	r0, r0, r0, asr #32
     9dc:	40080e41 	andmi	r0, r8, r1, asr #28
     9e0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     9e4:	100e4101 	andne	r4, lr, r1, lsl #2
     9e8:	00070d41 	andeq	r0, r7, r1, asr #26
     9ec:	0000001c 	andeq	r0, r0, ip, lsl r0
     9f0:	000004c0 	andeq	r0, r0, r0, asr #9
     9f4:	20002374 	andcs	r2, r0, r4, ror r3
     9f8:	00000040 	andeq	r0, r0, r0, asr #32
     9fc:	40080e41 	andmi	r0, r8, r1, asr #28
     a00:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     a04:	100e4101 	andne	r4, lr, r1, lsl #2
     a08:	00070d41 	andeq	r0, r7, r1, asr #26
     a0c:	0000001c 	andeq	r0, r0, ip, lsl r0
     a10:	000004c0 	andeq	r0, r0, r0, asr #9
     a14:	200023b4 			; <UNDEFINED> instruction: 0x200023b4
     a18:	00000040 	andeq	r0, r0, r0, asr #32
     a1c:	40080e41 	andmi	r0, r8, r1, asr #28
     a20:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     a24:	100e4101 	andne	r4, lr, r1, lsl #2
     a28:	00070d41 	andeq	r0, r7, r1, asr #26
     a2c:	0000001c 	andeq	r0, r0, ip, lsl r0
     a30:	000004c0 	andeq	r0, r0, r0, asr #9
     a34:	200023f4 	strdcs	r2, [r0], -r4
     a38:	00000040 	andeq	r0, r0, r0, asr #32
     a3c:	40080e41 	andmi	r0, r8, r1, asr #28
     a40:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     a44:	100e4101 	andne	r4, lr, r1, lsl #2
     a48:	00070d41 	andeq	r0, r7, r1, asr #26
     a4c:	0000001c 	andeq	r0, r0, ip, lsl r0
     a50:	000004c0 	andeq	r0, r0, r0, asr #9
     a54:	20002434 	andcs	r2, r0, r4, lsr r4
     a58:	00000040 	andeq	r0, r0, r0, asr #32
     a5c:	40080e41 	andmi	r0, r8, r1, asr #28
     a60:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     a64:	100e4101 	andne	r4, lr, r1, lsl #2
     a68:	00070d41 	andeq	r0, r7, r1, asr #26
     a6c:	0000001c 	andeq	r0, r0, ip, lsl r0
     a70:	000004c0 	andeq	r0, r0, r0, asr #9
     a74:	20002474 	andcs	r2, r0, r4, ror r4
     a78:	00000040 	andeq	r0, r0, r0, asr #32
     a7c:	40080e41 	andmi	r0, r8, r1, asr #28
     a80:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     a84:	100e4101 	andne	r4, lr, r1, lsl #2
     a88:	00070d41 	andeq	r0, r7, r1, asr #26
     a8c:	0000001c 	andeq	r0, r0, ip, lsl r0
     a90:	000004c0 	andeq	r0, r0, r0, asr #9
     a94:	200024b4 			; <UNDEFINED> instruction: 0x200024b4
     a98:	00000040 	andeq	r0, r0, r0, asr #32
     a9c:	40080e41 	andmi	r0, r8, r1, asr #28
     aa0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     aa4:	100e4101 	andne	r4, lr, r1, lsl #2
     aa8:	00070d41 	andeq	r0, r7, r1, asr #26
     aac:	0000001c 	andeq	r0, r0, ip, lsl r0
     ab0:	000004c0 	andeq	r0, r0, r0, asr #9
     ab4:	200024f4 	strdcs	r2, [r0], -r4
     ab8:	00000040 	andeq	r0, r0, r0, asr #32
     abc:	40080e41 	andmi	r0, r8, r1, asr #28
     ac0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     ac4:	100e4101 	andne	r4, lr, r1, lsl #2
     ac8:	00070d41 	andeq	r0, r7, r1, asr #26
     acc:	0000001c 	andeq	r0, r0, ip, lsl r0
     ad0:	000004c0 	andeq	r0, r0, r0, asr #9
     ad4:	20002534 	andcs	r2, r0, r4, lsr r5
     ad8:	00000040 	andeq	r0, r0, r0, asr #32
     adc:	40080e41 	andmi	r0, r8, r1, asr #28
     ae0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     ae4:	100e4101 	andne	r4, lr, r1, lsl #2
     ae8:	00070d41 	andeq	r0, r7, r1, asr #26
     aec:	0000001c 	andeq	r0, r0, ip, lsl r0
     af0:	000004c0 	andeq	r0, r0, r0, asr #9
     af4:	20002574 	andcs	r2, r0, r4, ror r5
     af8:	0000003c 	andeq	r0, r0, ip, lsr r0
     afc:	40080e41 	andmi	r0, r8, r1, asr #28
     b00:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     b04:	100e4101 	andne	r4, lr, r1, lsl #2
     b08:	00070d41 	andeq	r0, r7, r1, asr #26
     b0c:	0000001c 	andeq	r0, r0, ip, lsl r0
     b10:	000004c0 	andeq	r0, r0, r0, asr #9
     b14:	200025b0 			; <UNDEFINED> instruction: 0x200025b0
     b18:	00000050 	andeq	r0, r0, r0, asr r0
     b1c:	40080e41 	andmi	r0, r8, r1, asr #28
     b20:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     b24:	100e4101 	andne	r4, lr, r1, lsl #2
     b28:	00070d41 	andeq	r0, r7, r1, asr #26
     b2c:	0000001c 	andeq	r0, r0, ip, lsl r0
     b30:	000004c0 	andeq	r0, r0, r0, asr #9
     b34:	20002600 	andcs	r2, r0, r0, lsl #12
     b38:	00000084 	andeq	r0, r0, r4, lsl #1
     b3c:	40080e41 	andmi	r0, r8, r1, asr #28
     b40:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     b44:	200e4101 	andcs	r4, lr, r1, lsl #2
     b48:	00070d41 	andeq	r0, r7, r1, asr #26
     b4c:	00000018 	andeq	r0, r0, r8, lsl r0
     b50:	000004c0 	andeq	r0, r0, r0, asr #9
     b54:	20002684 	andcs	r2, r0, r4, lsl #13
     b58:	0000001c 	andeq	r0, r0, ip, lsl r0
     b5c:	40080e41 	andmi	r0, r8, r1, asr #28
     b60:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     b64:	070d4101 	streq	r4, [sp, -r1, lsl #2]
     b68:	0000001c 	andeq	r0, r0, ip, lsl r0
     b6c:	000004c0 	andeq	r0, r0, r0, asr #9
     b70:	200026a0 	andcs	r2, r0, r0, lsr #13
     b74:	00000044 	andeq	r0, r0, r4, asr #32
     b78:	40080e41 	andmi	r0, r8, r1, asr #28
     b7c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     b80:	180e4101 	stmdane	lr, {r0, r8, lr}
     b84:	00070d41 	andeq	r0, r7, r1, asr #26
     b88:	0000001c 	andeq	r0, r0, ip, lsl r0
     b8c:	000004c0 	andeq	r0, r0, r0, asr #9
     b90:	200026e4 	andcs	r2, r0, r4, ror #13
     b94:	00000020 	andeq	r0, r0, r0, lsr #32
     b98:	40080e41 	andmi	r0, r8, r1, asr #28
     b9c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     ba0:	100e4101 	andne	r4, lr, r1, lsl #2
     ba4:	00070d41 	andeq	r0, r7, r1, asr #26
     ba8:	0000001c 	andeq	r0, r0, ip, lsl r0
     bac:	000004c0 	andeq	r0, r0, r0, asr #9
     bb0:	20002704 	andcs	r2, r0, r4, lsl #14
     bb4:	000001c8 	andeq	r0, r0, r8, asr #3
     bb8:	40080e41 	andmi	r0, r8, r1, asr #28
     bbc:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     bc0:	100e4101 	andne	r4, lr, r1, lsl #2
     bc4:	00070d41 	andeq	r0, r7, r1, asr #26
     bc8:	0000000c 	andeq	r0, r0, ip
     bcc:	000004c0 	andeq	r0, r0, r0, asr #9
     bd0:	20000000 	andcs	r0, r0, r0
     bd4:	0000000c 	andeq	r0, r0, ip
     bd8:	00000018 	andeq	r0, r0, r8, lsl r0
     bdc:	000004c0 	andeq	r0, r0, r0, asr #9
     be0:	200028cc 	andcs	r2, r0, ip, asr #17
     be4:	00000018 	andeq	r0, r0, r8, lsl r0
     be8:	40080e41 	andmi	r0, r8, r1, asr #28
     bec:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     bf0:	070d4101 	streq	r4, [sp, -r1, lsl #2]
     bf4:	0000001c 	andeq	r0, r0, ip, lsl r0
     bf8:	000004c0 	andeq	r0, r0, r0, asr #9
     bfc:	200028e4 	andcs	r2, r0, r4, ror #17
     c00:	00000038 	andeq	r0, r0, r8, lsr r0
     c04:	40080e41 	andmi	r0, r8, r1, asr #28
     c08:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     c0c:	100e4101 	andne	r4, lr, r1, lsl #2
     c10:	00070d41 	andeq	r0, r7, r1, asr #26
     c14:	0000001c 	andeq	r0, r0, ip, lsl r0
     c18:	000004c0 	andeq	r0, r0, r0, asr #9
     c1c:	2000291c 	andcs	r2, r0, ip, lsl r9
     c20:	0000002c 	andeq	r0, r0, ip, lsr #32
     c24:	40080e41 	andmi	r0, r8, r1, asr #28
     c28:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     c2c:	180e4101 	stmdane	lr, {r0, r8, lr}
     c30:	00070d41 	andeq	r0, r7, r1, asr #26
     c34:	00000018 	andeq	r0, r0, r8, lsl r0
     c38:	000004c0 	andeq	r0, r0, r0, asr #9
     c3c:	20002948 	andcs	r2, r0, r8, asr #18
     c40:	00000018 	andeq	r0, r0, r8, lsl r0
     c44:	40080e41 	andmi	r0, r8, r1, asr #28
     c48:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     c4c:	070d4101 	streq	r4, [sp, -r1, lsl #2]
     c50:	00000028 	andeq	r0, r0, r8, lsr #32
     c54:	000004c0 	andeq	r0, r0, r0, asr #9
     c58:	20002960 	andcs	r2, r0, r0, ror #18
     c5c:	000004bc 			; <UNDEFINED> instruction: 0x000004bc
     c60:	40140e41 	andsmi	r0, r4, r1, asr #28
     c64:	85400584 	strbhi	r0, [r0, #-1412]	; 0xfffffa7c
     c68:	03864004 	orreq	r4, r6, #4
     c6c:	40028740 	andmi	r8, r2, r0, asr #14
     c70:	0e41018e 	dvfeqd	f0, f1, #0.5
     c74:	070c4178 	smlsdxeq	ip, r8, r1, r4
     c78:	00000068 	andeq	r0, r0, r8, rrx
     c7c:	0000001c 	andeq	r0, r0, ip, lsl r0
     c80:	000004c0 	andeq	r0, r0, r0, asr #9
     c84:	20002e1c 	andcs	r2, r0, ip, lsl lr
     c88:	0000003c 	andeq	r0, r0, ip, lsr r0
     c8c:	40080e41 	andmi	r0, r8, r1, asr #28
     c90:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     c94:	180e4101 	stmdane	lr, {r0, r8, lr}
     c98:	00070d41 	andeq	r0, r7, r1, asr #26
     c9c:	00000028 	andeq	r0, r0, r8, lsr #32
     ca0:	000004c0 	andeq	r0, r0, r0, asr #9
     ca4:	20002e58 	andcs	r2, r0, r8, asr lr
     ca8:	00000160 	andeq	r0, r0, r0, ror #2
     cac:	40140e41 	andsmi	r0, r4, r1, asr #28
     cb0:	85400584 	strbhi	r0, [r0, #-1412]	; 0xfffffa7c
     cb4:	03864004 	orreq	r4, r6, #4
     cb8:	40028740 	andmi	r8, r2, r0, asr #14
     cbc:	0e41018e 	dvfeqd	f0, f1, #0.5
     cc0:	070c4150 	smlsdeq	ip, r0, r1, r4
     cc4:	00000048 	andeq	r0, r0, r8, asr #32
     cc8:	00000024 	andeq	r0, r0, r4, lsr #32
     ccc:	000004c0 	andeq	r0, r0, r0, asr #9
     cd0:	20002fb8 			; <UNDEFINED> instruction: 0x20002fb8
     cd4:	00000062 	andeq	r0, r0, r2, rrx
     cd8:	41100e41 	tstmi	r0, r1, asr #28
     cdc:	84401c0e 	strbhi	r1, [r0], #-3086	; 0xfffff3f2
     ce0:	06874007 	streq	r4, [r7], r7
     ce4:	41058e40 	tstmi	r5, r0, asr #28
     ce8:	0d41380e 	stcleq	8, cr3, [r1, #-56]	; 0xffffffc8
     cec:	00000007 	andeq	r0, r0, r7
     cf0:	0000000c 	andeq	r0, r0, ip
     cf4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     cf8:	7c020001 	stcvc	0, cr0, [r2], {1}
     cfc:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     d00:	00000018 	andeq	r0, r0, r8, lsl r0
     d04:	00000cf0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     d08:	2000301c 	andcs	r3, r0, ip, lsl r0
     d0c:	0000001a 	andeq	r0, r0, sl, lsl r0
     d10:	40080e41 	andmi	r0, r8, r1, asr #28
     d14:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     d18:	070d4101 	streq	r4, [sp, -r1, lsl #2]
     d1c:	0000001c 	andeq	r0, r0, ip, lsl r0
     d20:	00000cf0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     d24:	20003036 	andcs	r3, r0, r6, lsr r0
     d28:	0000003a 	andeq	r0, r0, sl, lsr r0
     d2c:	40080e41 	andmi	r0, r8, r1, asr #28
     d30:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     d34:	100e4101 	andne	r4, lr, r1, lsl #2
     d38:	00070d41 	andeq	r0, r7, r1, asr #26
     d3c:	00000018 	andeq	r0, r0, r8, lsl r0
     d40:	00000cf0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     d44:	20003070 	andcs	r3, r0, r0, ror r0
     d48:	00000014 	andeq	r0, r0, r4, lsl r0
     d4c:	40080e41 	andmi	r0, r8, r1, asr #28
     d50:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     d54:	070d4101 	streq	r4, [sp, -r1, lsl #2]
     d58:	0000001c 	andeq	r0, r0, ip, lsl r0
     d5c:	00000cf0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     d60:	20003084 	andcs	r3, r0, r4, lsl #1
     d64:	0000003c 	andeq	r0, r0, ip, lsr r0
     d68:	40080e41 	andmi	r0, r8, r1, asr #28
     d6c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     d70:	100e4101 	andne	r4, lr, r1, lsl #2
     d74:	00070d41 	andeq	r0, r7, r1, asr #26
     d78:	0000001c 	andeq	r0, r0, ip, lsl r0
     d7c:	00000cf0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     d80:	200030c0 	andcs	r3, r0, r0, asr #1
     d84:	00000044 	andeq	r0, r0, r4, asr #32
     d88:	40080e41 	andmi	r0, r8, r1, asr #28
     d8c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     d90:	180e4101 	stmdane	lr, {r0, r8, lr}
     d94:	00070d41 	andeq	r0, r7, r1, asr #26
     d98:	0000001c 	andeq	r0, r0, ip, lsl r0
     d9c:	00000cf0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     da0:	20003104 	andcs	r3, r0, r4, lsl #2
     da4:	00000024 	andeq	r0, r0, r4, lsr #32
     da8:	40080e41 	andmi	r0, r8, r1, asr #28
     dac:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     db0:	100e4101 	andne	r4, lr, r1, lsl #2
     db4:	00070d41 	andeq	r0, r7, r1, asr #26
     db8:	0000001c 	andeq	r0, r0, ip, lsl r0
     dbc:	00000cf0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     dc0:	20003128 	andcs	r3, r0, r8, lsr #2
     dc4:	00000044 	andeq	r0, r0, r4, asr #32
     dc8:	40080e41 	andmi	r0, r8, r1, asr #28
     dcc:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     dd0:	180e4101 	stmdane	lr, {r0, r8, lr}
     dd4:	00070d41 	andeq	r0, r7, r1, asr #26
     dd8:	0000001c 	andeq	r0, r0, ip, lsl r0
     ddc:	00000cf0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     de0:	2000316c 	andcs	r3, r0, ip, ror #2
     de4:	00000024 	andeq	r0, r0, r4, lsr #32
     de8:	40080e41 	andmi	r0, r8, r1, asr #28
     dec:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     df0:	100e4101 	andne	r4, lr, r1, lsl #2
     df4:	00070d41 	andeq	r0, r7, r1, asr #26
     df8:	0000000c 	andeq	r0, r0, ip
     dfc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     e00:	7c020001 	stcvc	0, cr0, [r2], {1}
     e04:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     e08:	00000020 	andeq	r0, r0, r0, lsr #32
     e0c:	00000df8 	strdeq	r0, [r0], -r8
     e10:	20003190 	mulcs	r0, r0, r1
     e14:	000000d2 	ldrdeq	r0, [r0], -r2
     e18:	400c0e41 	andmi	r0, ip, r1, asr #28
     e1c:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
     e20:	018e4002 	orreq	r4, lr, r2
     e24:	41200e41 			; <UNDEFINED> instruction: 0x41200e41
     e28:	0000070d 	andeq	r0, r0, sp, lsl #14
     e2c:	0000001c 	andeq	r0, r0, ip, lsl r0
     e30:	00000df8 	strdeq	r0, [r0], -r8
     e34:	20003262 	andcs	r3, r0, r2, ror #4
     e38:	0000008a 	andeq	r0, r0, sl, lsl #1
     e3c:	40080e41 	andmi	r0, r8, r1, asr #28
     e40:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     e44:	200e4101 	andcs	r4, lr, r1, lsl #2
     e48:	00070d41 	andeq	r0, r7, r1, asr #26
     e4c:	0000001c 	andeq	r0, r0, ip, lsl r0
     e50:	00000df8 	strdeq	r0, [r0], -r8
     e54:	200032ec 	andcs	r3, r0, ip, ror #5
     e58:	00000070 	andeq	r0, r0, r0, ror r0
     e5c:	40080e41 	andmi	r0, r8, r1, asr #28
     e60:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     e64:	200e4101 	andcs	r4, lr, r1, lsl #2
     e68:	00070d41 	andeq	r0, r7, r1, asr #26
     e6c:	0000001c 	andeq	r0, r0, ip, lsl r0
     e70:	00000df8 	strdeq	r0, [r0], -r8
     e74:	2000335c 	andcs	r3, r0, ip, asr r3
     e78:	00000028 	andeq	r0, r0, r8, lsr #32
     e7c:	40080e41 	andmi	r0, r8, r1, asr #28
     e80:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     e84:	180e4101 	stmdane	lr, {r0, r8, lr}
     e88:	00070d41 	andeq	r0, r7, r1, asr #26
     e8c:	0000001c 	andeq	r0, r0, ip, lsl r0
     e90:	00000df8 	strdeq	r0, [r0], -r8
     e94:	20003384 	andcs	r3, r0, r4, lsl #7
     e98:	0000003a 	andeq	r0, r0, sl, lsr r0
     e9c:	40080e41 	andmi	r0, r8, r1, asr #28
     ea0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     ea4:	200e4101 	andcs	r4, lr, r1, lsl #2
     ea8:	00070d41 	andeq	r0, r7, r1, asr #26
     eac:	0000000c 	andeq	r0, r0, ip
     eb0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     eb4:	7c020001 	stcvc	0, cr0, [r2], {1}
     eb8:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     ebc:	0000001c 	andeq	r0, r0, ip, lsl r0
     ec0:	00000eac 	andeq	r0, r0, ip, lsr #29
     ec4:	200033be 			; <UNDEFINED> instruction: 0x200033be
     ec8:	00000028 	andeq	r0, r0, r8, lsr #32
     ecc:	40080e41 	andmi	r0, r8, r1, asr #28
     ed0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     ed4:	100e4101 	andne	r4, lr, r1, lsl #2
     ed8:	00070d41 	andeq	r0, r7, r1, asr #26
     edc:	0000001c 	andeq	r0, r0, ip, lsl r0
     ee0:	00000eac 	andeq	r0, r0, ip, lsr #29
     ee4:	200033e6 	andcs	r3, r0, r6, ror #7
     ee8:	00000062 	andeq	r0, r0, r2, rrx
     eec:	40080e41 	andmi	r0, r8, r1, asr #28
     ef0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     ef4:	100e4101 	andne	r4, lr, r1, lsl #2
     ef8:	00070d41 	andeq	r0, r7, r1, asr #26
     efc:	0000001c 	andeq	r0, r0, ip, lsl r0
     f00:	00000eac 	andeq	r0, r0, ip, lsr #29
     f04:	20003448 	andcs	r3, r0, r8, asr #8
     f08:	00000040 	andeq	r0, r0, r0, asr #32
     f0c:	40080e41 	andmi	r0, r8, r1, asr #28
     f10:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     f14:	180e4101 	stmdane	lr, {r0, r8, lr}
     f18:	00070d41 	andeq	r0, r7, r1, asr #26
     f1c:	0000001c 	andeq	r0, r0, ip, lsl r0
     f20:	00000eac 	andeq	r0, r0, ip, lsr #29
     f24:	20003488 	andcs	r3, r0, r8, lsl #9
     f28:	0000005e 	andeq	r0, r0, lr, asr r0
     f2c:	40080e41 	andmi	r0, r8, r1, asr #28
     f30:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     f34:	100e4101 	andne	r4, lr, r1, lsl #2
     f38:	00070d41 	andeq	r0, r7, r1, asr #26
     f3c:	0000000c 	andeq	r0, r0, ip
     f40:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     f44:	7c020001 	stcvc	0, cr0, [r2], {1}
     f48:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     f4c:	0000001c 	andeq	r0, r0, ip, lsl r0
     f50:	00000f3c 	andeq	r0, r0, ip, lsr pc
     f54:	200034e8 	andcs	r3, r0, r8, ror #9
     f58:	00000024 	andeq	r0, r0, r4, lsr #32
     f5c:	40080e41 	andmi	r0, r8, r1, asr #28
     f60:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     f64:	100e4101 	andne	r4, lr, r1, lsl #2
     f68:	00070d41 	andeq	r0, r7, r1, asr #26
     f6c:	00000024 	andeq	r0, r0, r4, lsr #32
     f70:	00000f3c 	andeq	r0, r0, ip, lsr pc
     f74:	2000350c 	andcs	r3, r0, ip, lsl #10
     f78:	000000f8 	strdeq	r0, [r0], -r8
     f7c:	40100e41 	andsmi	r0, r0, r1, asr #28
     f80:	85400484 	strbhi	r0, [r0, #-1156]	; 0xfffffb7c
     f84:	02874003 	addeq	r4, r7, #3
     f88:	41018e40 	tstmi	r1, r0, asr #28
     f8c:	0d41200e 	stcleq	0, cr2, [r1, #-56]	; 0xffffffc8
     f90:	00000007 	andeq	r0, r0, r7
     f94:	0000001c 	andeq	r0, r0, ip, lsl r0
     f98:	00000f3c 	andeq	r0, r0, ip, lsr pc
     f9c:	20003604 	andcs	r3, r0, r4, lsl #12
     fa0:	0000002c 	andeq	r0, r0, ip, lsr #32
     fa4:	40080e41 	andmi	r0, r8, r1, asr #28
     fa8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     fac:	100e4101 	andne	r4, lr, r1, lsl #2
     fb0:	00070d41 	andeq	r0, r7, r1, asr #26
     fb4:	0000001c 	andeq	r0, r0, ip, lsl r0
     fb8:	00000f3c 	andeq	r0, r0, ip, lsr pc
     fbc:	20003630 	andcs	r3, r0, r0, lsr r6
     fc0:	00000048 	andeq	r0, r0, r8, asr #32
     fc4:	40080e41 	andmi	r0, r8, r1, asr #28
     fc8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     fcc:	100e4101 	andne	r4, lr, r1, lsl #2
     fd0:	00070d41 	andeq	r0, r7, r1, asr #26
     fd4:	0000001c 	andeq	r0, r0, ip, lsl r0
     fd8:	00000f3c 	andeq	r0, r0, ip, lsr pc
     fdc:	20003678 	andcs	r3, r0, r8, ror r6
     fe0:	00000034 	andeq	r0, r0, r4, lsr r0
     fe4:	40080e41 	andmi	r0, r8, r1, asr #28
     fe8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     fec:	100e4101 	andne	r4, lr, r1, lsl #2
     ff0:	00070d41 	andeq	r0, r7, r1, asr #26
     ff4:	0000000c 	andeq	r0, r0, ip
     ff8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     ffc:	7c020001 	stcvc	0, cr0, [r2], {1}
    1000:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    1004:	0000001c 	andeq	r0, r0, ip, lsl r0
    1008:	00000ff4 	strdeq	r0, [r0], -r4
    100c:	200036ac 	andcs	r3, r0, ip, lsr #13
    1010:	00000170 	andeq	r0, r0, r0, ror r1
    1014:	40080e41 	andmi	r0, r8, r1, asr #28
    1018:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
    101c:	100e4101 	andne	r4, lr, r1, lsl #2
    1020:	00070d41 	andeq	r0, r7, r1, asr #26
    1024:	0000001c 	andeq	r0, r0, ip, lsl r0
    1028:	00000ff4 	strdeq	r0, [r0], -r4
    102c:	2000381c 	andcs	r3, r0, ip, lsl r8
    1030:	00000118 	andeq	r0, r0, r8, lsl r1
    1034:	40080e41 	andmi	r0, r8, r1, asr #28
    1038:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
    103c:	200e4101 	andcs	r4, lr, r1, lsl #2
    1040:	00070d41 	andeq	r0, r7, r1, asr #26
    1044:	0000001c 	andeq	r0, r0, ip, lsl r0
    1048:	00000ff4 	strdeq	r0, [r0], -r4
    104c:	20003934 	andcs	r3, r0, r4, lsr r9
    1050:	00000034 	andeq	r0, r0, r4, lsr r0
    1054:	40080e41 	andmi	r0, r8, r1, asr #28
    1058:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
    105c:	100e4101 	andne	r4, lr, r1, lsl #2
    1060:	00070d41 	andeq	r0, r7, r1, asr #26
    1064:	0000001c 	andeq	r0, r0, ip, lsl r0
    1068:	00000ff4 	strdeq	r0, [r0], -r4
    106c:	20003968 	andcs	r3, r0, r8, ror #18
    1070:	00000046 	andeq	r0, r0, r6, asr #32
    1074:	40080e41 	andmi	r0, r8, r1, asr #28
    1078:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
    107c:	180e4101 	stmdane	lr, {r0, r8, lr}
    1080:	00070d41 	andeq	r0, r7, r1, asr #26
    1084:	0000001c 	andeq	r0, r0, ip, lsl r0
    1088:	00000ff4 	strdeq	r0, [r0], -r4
    108c:	200039ae 	andcs	r3, r0, lr, lsr #19
    1090:	00000042 	andeq	r0, r0, r2, asr #32
    1094:	40080e41 	andmi	r0, r8, r1, asr #28
    1098:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
    109c:	180e4101 	stmdane	lr, {r0, r8, lr}
    10a0:	00070d41 	andeq	r0, r7, r1, asr #26
    10a4:	0000001c 	andeq	r0, r0, ip, lsl r0
    10a8:	00000ff4 	strdeq	r0, [r0], -r4
    10ac:	200039f0 	strdcs	r3, [r0], -r0
    10b0:	00000016 	andeq	r0, r0, r6, lsl r0
    10b4:	40080e41 	andmi	r0, r8, r1, asr #28
    10b8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
    10bc:	100e4101 	andne	r4, lr, r1, lsl #2
    10c0:	00070d41 	andeq	r0, r7, r1, asr #26
    10c4:	0000001c 	andeq	r0, r0, ip, lsl r0
    10c8:	00000ff4 	strdeq	r0, [r0], -r4
    10cc:	20003a06 	andcs	r3, r0, r6, lsl #20
    10d0:	00000042 	andeq	r0, r0, r2, asr #32
    10d4:	40080e41 	andmi	r0, r8, r1, asr #28
    10d8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
    10dc:	180e4101 	stmdane	lr, {r0, r8, lr}
    10e0:	00070d41 	andeq	r0, r7, r1, asr #26
    10e4:	0000001c 	andeq	r0, r0, ip, lsl r0
    10e8:	00000ff4 	strdeq	r0, [r0], -r4
    10ec:	20003a48 	andcs	r3, r0, r8, asr #20
    10f0:	00000016 	andeq	r0, r0, r6, lsl r0
    10f4:	40080e41 	andmi	r0, r8, r1, asr #28
    10f8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
    10fc:	100e4101 	andne	r4, lr, r1, lsl #2
    1100:	00070d41 	andeq	r0, r7, r1, asr #26
    1104:	0000001c 	andeq	r0, r0, ip, lsl r0
    1108:	00000ff4 	strdeq	r0, [r0], -r4
    110c:	20003a5e 	andcs	r3, r0, lr, asr sl
    1110:	0000001e 	andeq	r0, r0, lr, lsl r0
    1114:	40080e41 	andmi	r0, r8, r1, asr #28
    1118:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
    111c:	100e4101 	andne	r4, lr, r1, lsl #2
    1120:	00070d41 	andeq	r0, r7, r1, asr #26
    1124:	0000001c 	andeq	r0, r0, ip, lsl r0
    1128:	00000ff4 	strdeq	r0, [r0], -r4
    112c:	20003a7c 	andcs	r3, r0, ip, ror sl
    1130:	0000001e 	andeq	r0, r0, lr, lsl r0
    1134:	40080e41 	andmi	r0, r8, r1, asr #28
    1138:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
    113c:	100e4101 	andne	r4, lr, r1, lsl #2
    1140:	00070d41 	andeq	r0, r7, r1, asr #26
    1144:	0000001c 	andeq	r0, r0, ip, lsl r0
    1148:	00000ff4 	strdeq	r0, [r0], -r4
    114c:	20003a9a 	mulcs	r0, sl, sl
    1150:	0000003a 	andeq	r0, r0, sl, lsr r0
    1154:	40080e41 	andmi	r0, r8, r1, asr #28
    1158:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
    115c:	100e4101 	andne	r4, lr, r1, lsl #2
    1160:	00070d41 	andeq	r0, r7, r1, asr #26
    1164:	0000001c 	andeq	r0, r0, ip, lsl r0
    1168:	00000ff4 	strdeq	r0, [r0], -r4
    116c:	20003ad4 	ldrdcs	r3, [r0], -r4
    1170:	0000001e 	andeq	r0, r0, lr, lsl r0
    1174:	40080e41 	andmi	r0, r8, r1, asr #28
    1178:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
    117c:	100e4101 	andne	r4, lr, r1, lsl #2
    1180:	00070d41 	andeq	r0, r7, r1, asr #26
    1184:	0000001c 	andeq	r0, r0, ip, lsl r0
    1188:	00000ff4 	strdeq	r0, [r0], -r4
    118c:	20003af2 	strdcs	r3, [r0], -r2
    1190:	00000024 	andeq	r0, r0, r4, lsr #32
    1194:	40080e41 	andmi	r0, r8, r1, asr #28
    1198:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
    119c:	100e4101 	andne	r4, lr, r1, lsl #2
    11a0:	00070d41 	andeq	r0, r7, r1, asr #26
    11a4:	0000001c 	andeq	r0, r0, ip, lsl r0
    11a8:	00000ff4 	strdeq	r0, [r0], -r4
    11ac:	20003b16 	andcs	r3, r0, r6, lsl fp
    11b0:	000000a4 	andeq	r0, r0, r4, lsr #1
    11b4:	40080e41 	andmi	r0, r8, r1, asr #28
    11b8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
    11bc:	180e4101 	stmdane	lr, {r0, r8, lr}
    11c0:	00070d41 	andeq	r0, r7, r1, asr #26
    11c4:	0000000c 	andeq	r0, r0, ip
    11c8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    11cc:	7c010001 	stcvc	0, cr0, [r1], {1}
    11d0:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    11d4:	0000000c 	andeq	r0, r0, ip
    11d8:	000011c4 	andeq	r1, r0, r4, asr #3
    11dc:	20003bbd 			; <UNDEFINED> instruction: 0x20003bbd
    11e0:	0000010a 	andeq	r0, r0, sl, lsl #2
    11e4:	0000000c 	andeq	r0, r0, ip
    11e8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    11ec:	7c020001 	stcvc	0, cr0, [r2], {1}
    11f0:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    11f4:	0000000c 	andeq	r0, r0, ip
    11f8:	000011e4 	andeq	r1, r0, r4, ror #3
    11fc:	20003cd4 	ldrdcs	r3, [r0], -r4
    1200:	00000010 	andeq	r0, r0, r0, lsl r0

Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
   0:	2000196c 	andcs	r1, r0, ip, ror #18
   4:	2000301a 	andcs	r3, r0, sl, lsl r0
   8:	20000000 	andcs	r0, r0, r0
   c:	2000000c 	andcs	r0, r0, ip
	...
