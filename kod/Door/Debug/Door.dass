
./Debug/Door.elf:     file format elf32-littlearm


Disassembly of section .text:

20000000 <startup>:

void startup(void) __attribute__((naked)) __attribute__((section(".start_section")));

void startup(void)
{
	__asm volatile(
20000000:	4802      	ldr	r0, [pc, #8]	; (2000000c <_exit+0x4>)
20000002:	4685      	mov	sp, r0
20000004:	f000 ff78 	bl	20000ef8 <main>

20000008 <_exit>:
20000008:	e7fe      	b.n	20000008 <_exit>
		" LDR R0,=0x2001C000\n" /* set stack */
		" MOV SP,R0\n"
		" BL main\n"   /* call main */
		"_exit: B .\n" /* never return */
	);
}
2000000a:	46c0      	nop			; (mov r8, r8)
2000000c:	2001c000 	andcs	ip, r1, r0

20000010 <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
20000010:	b580      	push	{r7, lr}
20000012:	b082      	sub	sp, #8
20000014:	af00      	add	r7, sp, #0
20000016:	0002      	movs	r2, r0
20000018:	6039      	str	r1, [r7, #0]
2000001a:	1dfb      	adds	r3, r7, #7
2000001c:	701a      	strb	r2, [r3, #0]
  if((int32_t)IRQn < 0) {
2000001e:	1dfb      	adds	r3, r7, #7
20000020:	781b      	ldrb	r3, [r3, #0]
20000022:	2b7f      	cmp	r3, #127	; 0x7f
20000024:	d90d      	bls.n	20000042 <NVIC_SetPriority+0x32>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
20000026:	683b      	ldr	r3, [r7, #0]
20000028:	b2da      	uxtb	r2, r3
2000002a:	490f      	ldr	r1, [pc, #60]	; (20000068 <NVIC_SetPriority+0x58>)
2000002c:	1dfb      	adds	r3, r7, #7
2000002e:	781b      	ldrb	r3, [r3, #0]
20000030:	0018      	movs	r0, r3
20000032:	230f      	movs	r3, #15
20000034:	4003      	ands	r3, r0
20000036:	3b04      	subs	r3, #4
20000038:	0112      	lsls	r2, r2, #4
2000003a:	b2d2      	uxtb	r2, r2
2000003c:	18cb      	adds	r3, r1, r3
2000003e:	761a      	strb	r2, [r3, #24]
  }
  else {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
20000040:	e00d      	b.n	2000005e <NVIC_SetPriority+0x4e>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
20000042:	683b      	ldr	r3, [r7, #0]
20000044:	b2db      	uxtb	r3, r3
20000046:	4909      	ldr	r1, [pc, #36]	; (2000006c <NVIC_SetPriority+0x5c>)
20000048:	1dfa      	adds	r2, r7, #7
2000004a:	7812      	ldrb	r2, [r2, #0]
2000004c:	b252      	sxtb	r2, r2
2000004e:	011b      	lsls	r3, r3, #4
20000050:	b2d8      	uxtb	r0, r3
20000052:	23c0      	movs	r3, #192	; 0xc0
20000054:	009b      	lsls	r3, r3, #2
20000056:	188a      	adds	r2, r1, r2
20000058:	18d3      	adds	r3, r2, r3
2000005a:	1c02      	adds	r2, r0, #0
2000005c:	701a      	strb	r2, [r3, #0]
}
2000005e:	46c0      	nop			; (mov r8, r8)
20000060:	46bd      	mov	sp, r7
20000062:	b002      	add	sp, #8
20000064:	bd80      	pop	{r7, pc}
20000066:	46c0      	nop			; (mov r8, r8)
20000068:	e000ed00 	and	lr, r0, r0, lsl #26
2000006c:	e000e100 	and	lr, r0, r0, lsl #2

20000070 <SysTick_Config>:
    function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
20000070:	b580      	push	{r7, lr}
20000072:	b082      	sub	sp, #8
20000074:	af00      	add	r7, sp, #0
20000076:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk) { return (1UL); }    /* Reload value impossible */
20000078:	687b      	ldr	r3, [r7, #4]
2000007a:	3b01      	subs	r3, #1
2000007c:	4a0c      	ldr	r2, [pc, #48]	; (200000b0 <SysTick_Config+0x40>)
2000007e:	4293      	cmp	r3, r2
20000080:	d901      	bls.n	20000086 <SysTick_Config+0x16>
20000082:	2301      	movs	r3, #1
20000084:	e010      	b.n	200000a8 <SysTick_Config+0x38>

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
20000086:	4b0b      	ldr	r3, [pc, #44]	; (200000b4 <SysTick_Config+0x44>)
20000088:	687a      	ldr	r2, [r7, #4]
2000008a:	3a01      	subs	r2, #1
2000008c:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
2000008e:	2301      	movs	r3, #1
20000090:	425b      	negs	r3, r3
20000092:	210f      	movs	r1, #15
20000094:	0018      	movs	r0, r3
20000096:	f7ff ffbb 	bl	20000010 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
2000009a:	4b06      	ldr	r3, [pc, #24]	; (200000b4 <SysTick_Config+0x44>)
2000009c:	2200      	movs	r2, #0
2000009e:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
200000a0:	4b04      	ldr	r3, [pc, #16]	; (200000b4 <SysTick_Config+0x44>)
200000a2:	2207      	movs	r2, #7
200000a4:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
200000a6:	2300      	movs	r3, #0
}
200000a8:	0018      	movs	r0, r3
200000aa:	46bd      	mov	sp, r7
200000ac:	b002      	add	sp, #8
200000ae:	bd80      	pop	{r7, pc}
200000b0:	00ffffff 	ldrshteq	pc, [pc], #255	; <UNPREDICTABLE>
200000b4:	e000e010 	and	lr, r0, r0, lsl r0

200000b8 <RCC_DeInit>:
  *            - LSI, LSE and RTC clocks 
  * @param  None
  * @retval None
  */
void RCC_DeInit(void)
{
200000b8:	b580      	push	{r7, lr}
200000ba:	af00      	add	r7, sp, #0
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
200000bc:	4b14      	ldr	r3, [pc, #80]	; (20000110 <RCC_DeInit+0x58>)
200000be:	681a      	ldr	r2, [r3, #0]
200000c0:	4b13      	ldr	r3, [pc, #76]	; (20000110 <RCC_DeInit+0x58>)
200000c2:	2101      	movs	r1, #1
200000c4:	430a      	orrs	r2, r1
200000c6:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
200000c8:	4b11      	ldr	r3, [pc, #68]	; (20000110 <RCC_DeInit+0x58>)
200000ca:	2200      	movs	r2, #0
200000cc:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON, PLLON, PLLI2S and PLLSAI(STM32F42xxx/43xxx/446xx/469xx/479xx devices) bits */
  RCC->CR &= (uint32_t)0xEAF6FFFF;
200000ce:	4b10      	ldr	r3, [pc, #64]	; (20000110 <RCC_DeInit+0x58>)
200000d0:	681a      	ldr	r2, [r3, #0]
200000d2:	4b0f      	ldr	r3, [pc, #60]	; (20000110 <RCC_DeInit+0x58>)
200000d4:	490f      	ldr	r1, [pc, #60]	; (20000114 <RCC_DeInit+0x5c>)
200000d6:	400a      	ands	r2, r1
200000d8:	601a      	str	r2, [r3, #0]
  
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
200000da:	4b0d      	ldr	r3, [pc, #52]	; (20000110 <RCC_DeInit+0x58>)
200000dc:	4a0e      	ldr	r2, [pc, #56]	; (20000118 <RCC_DeInit+0x60>)
200000de:	605a      	str	r2, [r3, #4]

#if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F401xx) || defined(STM32F411xE) || defined(STM32F446xx) || defined(STM32F413_423xx) || defined(STM32F469_479xx)  
  /* Reset PLLI2SCFGR register */
  RCC->PLLI2SCFGR = 0x20003000;
200000e0:	4a0b      	ldr	r2, [pc, #44]	; (20000110 <RCC_DeInit+0x58>)
200000e2:	2384      	movs	r3, #132	; 0x84
200000e4:	490d      	ldr	r1, [pc, #52]	; (2000011c <RCC_DeInit+0x64>)
200000e6:	50d1      	str	r1, [r2, r3]
#endif /* STM32F40_41xxx || STM32F427_437xx || STM32F429_439xx || STM32F401xx || STM32F411xE || STM32F446xx || STM32F413_423xx || STM32F469_479xx */

#if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F446xx) || defined(STM32F469_479xx) 
  /* Reset PLLSAICFGR register, only available for STM32F42xxx/43xxx/446xx/469xx/479xx devices */
  RCC->PLLSAICFGR = 0x24003000;
200000e8:	4a09      	ldr	r2, [pc, #36]	; (20000110 <RCC_DeInit+0x58>)
200000ea:	2388      	movs	r3, #136	; 0x88
200000ec:	490c      	ldr	r1, [pc, #48]	; (20000120 <RCC_DeInit+0x68>)
200000ee:	50d1      	str	r1, [r2, r3]
#endif /* STM32F40_41xxx || STM32F427_437xx || STM32F429_439xx || STM32F446xx || STM32F469_479xx */
  
  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
200000f0:	4b07      	ldr	r3, [pc, #28]	; (20000110 <RCC_DeInit+0x58>)
200000f2:	681a      	ldr	r2, [r3, #0]
200000f4:	4b06      	ldr	r3, [pc, #24]	; (20000110 <RCC_DeInit+0x58>)
200000f6:	490b      	ldr	r1, [pc, #44]	; (20000124 <RCC_DeInit+0x6c>)
200000f8:	400a      	ands	r2, r1
200000fa:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
200000fc:	4b04      	ldr	r3, [pc, #16]	; (20000110 <RCC_DeInit+0x58>)
200000fe:	2200      	movs	r2, #0
20000100:	60da      	str	r2, [r3, #12]

  /* Disable Timers clock prescalers selection, only available for STM32F42/43xxx and STM32F413_423xx devices */
  RCC->DCKCFGR = 0x00000000;
20000102:	4a03      	ldr	r2, [pc, #12]	; (20000110 <RCC_DeInit+0x58>)
20000104:	238c      	movs	r3, #140	; 0x8c
20000106:	2100      	movs	r1, #0
20000108:	50d1      	str	r1, [r2, r3]
  
#if defined(STM32F410xx) || defined(STM32F413_423xx)
  /* Disable LPTIM and FMPI2C clock prescalers selection, only available for STM32F410xx and STM32F413_423xx devices */
  RCC->DCKCFGR2 = 0x00000000;
#endif /* STM32F410xx || STM32F413_423xx */  
}
2000010a:	46c0      	nop			; (mov r8, r8)
2000010c:	46bd      	mov	sp, r7
2000010e:	bd80      	pop	{r7, pc}
20000110:	40023800 	andmi	r3, r2, r0, lsl #16
20000114:	eaf6ffff 	b	1fdc0118 <startup-0x23fee8>
20000118:	24003010 	strcs	r3, [r0], #-16
2000011c:	20003000 	andcs	r3, r0, r0
20000120:	24003000 	strcs	r3, [r0], #-0
20000124:	fffbffff 			; <UNDEFINED> instruction: 0xfffbffff

20000128 <RCC_HSEConfig>:
  *            @arg RCC_HSE_ON: turn ON the HSE oscillator
  *            @arg RCC_HSE_Bypass: HSE oscillator bypassed with external clock
  * @retval None
  */
void RCC_HSEConfig(uint8_t RCC_HSE)
{
20000128:	b580      	push	{r7, lr}
2000012a:	b082      	sub	sp, #8
2000012c:	af00      	add	r7, sp, #0
2000012e:	0002      	movs	r2, r0
20000130:	1dfb      	adds	r3, r7, #7
20000132:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_HSE(RCC_HSE));

  /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
  *(__IO uint8_t *) CR_BYTE3_ADDRESS = RCC_HSE_OFF;
20000134:	4b05      	ldr	r3, [pc, #20]	; (2000014c <RCC_HSEConfig+0x24>)
20000136:	2200      	movs	r2, #0
20000138:	701a      	strb	r2, [r3, #0]

  /* Set the new HSE configuration -------------------------------------------*/
  *(__IO uint8_t *) CR_BYTE3_ADDRESS = RCC_HSE;
2000013a:	4a04      	ldr	r2, [pc, #16]	; (2000014c <RCC_HSEConfig+0x24>)
2000013c:	1dfb      	adds	r3, r7, #7
2000013e:	781b      	ldrb	r3, [r3, #0]
20000140:	7013      	strb	r3, [r2, #0]
}
20000142:	46c0      	nop			; (mov r8, r8)
20000144:	46bd      	mov	sp, r7
20000146:	b002      	add	sp, #8
20000148:	bd80      	pop	{r7, pc}
2000014a:	46c0      	nop			; (mov r8, r8)
2000014c:	40023802 	andmi	r3, r2, r2, lsl #16

20000150 <RCC_WaitForHSEStartUp>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: HSE oscillator is stable and ready to use
  *          - ERROR: HSE oscillator not yet ready
  */
ErrorStatus RCC_WaitForHSEStartUp(void)
{
20000150:	b590      	push	{r4, r7, lr}
20000152:	b083      	sub	sp, #12
20000154:	af00      	add	r7, sp, #0
  __IO uint32_t startupcounter = 0;
20000156:	2300      	movs	r3, #0
20000158:	603b      	str	r3, [r7, #0]
  ErrorStatus status = ERROR;
2000015a:	1dfb      	adds	r3, r7, #7
2000015c:	2200      	movs	r2, #0
2000015e:	701a      	strb	r2, [r3, #0]
  FlagStatus hsestatus = RESET;
20000160:	1dbb      	adds	r3, r7, #6
20000162:	2200      	movs	r2, #0
20000164:	701a      	strb	r2, [r3, #0]
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    hsestatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
20000166:	1dbc      	adds	r4, r7, #6
20000168:	2031      	movs	r0, #49	; 0x31
2000016a:	f000 fd9b 	bl	20000ca4 <RCC_GetFlagStatus>
2000016e:	0003      	movs	r3, r0
20000170:	7023      	strb	r3, [r4, #0]
    startupcounter++;
20000172:	683b      	ldr	r3, [r7, #0]
20000174:	3301      	adds	r3, #1
20000176:	603b      	str	r3, [r7, #0]
  } while((startupcounter != HSE_STARTUP_TIMEOUT) && (hsestatus == RESET));
20000178:	683a      	ldr	r2, [r7, #0]
2000017a:	23a0      	movs	r3, #160	; 0xa0
2000017c:	01db      	lsls	r3, r3, #7
2000017e:	429a      	cmp	r2, r3
20000180:	d003      	beq.n	2000018a <RCC_WaitForHSEStartUp+0x3a>
20000182:	1dbb      	adds	r3, r7, #6
20000184:	781b      	ldrb	r3, [r3, #0]
20000186:	2b00      	cmp	r3, #0
20000188:	d0ed      	beq.n	20000166 <RCC_WaitForHSEStartUp+0x16>

  if (RCC_GetFlagStatus(RCC_FLAG_HSERDY) != RESET)
2000018a:	2031      	movs	r0, #49	; 0x31
2000018c:	f000 fd8a 	bl	20000ca4 <RCC_GetFlagStatus>
20000190:	1e03      	subs	r3, r0, #0
20000192:	d003      	beq.n	2000019c <RCC_WaitForHSEStartUp+0x4c>
  {
    status = SUCCESS;
20000194:	1dfb      	adds	r3, r7, #7
20000196:	2201      	movs	r2, #1
20000198:	701a      	strb	r2, [r3, #0]
2000019a:	e002      	b.n	200001a2 <RCC_WaitForHSEStartUp+0x52>
  }
  else
  {
    status = ERROR;
2000019c:	1dfb      	adds	r3, r7, #7
2000019e:	2200      	movs	r2, #0
200001a0:	701a      	strb	r2, [r3, #0]
  }
  return (status);
200001a2:	1dfb      	adds	r3, r7, #7
200001a4:	781b      	ldrb	r3, [r3, #0]
}
200001a6:	0018      	movs	r0, r3
200001a8:	46bd      	mov	sp, r7
200001aa:	b003      	add	sp, #12
200001ac:	bd90      	pop	{r4, r7, pc}

200001ae <RCC_AdjustHSICalibrationValue>:
  * @param  HSICalibrationValue: specifies the calibration trimming value.
  *         This parameter must be a number between 0 and 0x1F.
  * @retval None
  */
void RCC_AdjustHSICalibrationValue(uint8_t HSICalibrationValue)
{
200001ae:	b580      	push	{r7, lr}
200001b0:	b084      	sub	sp, #16
200001b2:	af00      	add	r7, sp, #0
200001b4:	0002      	movs	r2, r0
200001b6:	1dfb      	adds	r3, r7, #7
200001b8:	701a      	strb	r2, [r3, #0]
  uint32_t tmpreg = 0;
200001ba:	2300      	movs	r3, #0
200001bc:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_CALIBRATION_VALUE(HSICalibrationValue));

  tmpreg = RCC->CR;
200001be:	4b0a      	ldr	r3, [pc, #40]	; (200001e8 <RCC_AdjustHSICalibrationValue+0x3a>)
200001c0:	681b      	ldr	r3, [r3, #0]
200001c2:	60fb      	str	r3, [r7, #12]

  /* Clear HSITRIM[4:0] bits */
  tmpreg &= ~RCC_CR_HSITRIM;
200001c4:	68fb      	ldr	r3, [r7, #12]
200001c6:	22f8      	movs	r2, #248	; 0xf8
200001c8:	4393      	bics	r3, r2
200001ca:	60fb      	str	r3, [r7, #12]

  /* Set the HSITRIM[4:0] bits according to HSICalibrationValue value */
  tmpreg |= (uint32_t)HSICalibrationValue << 3;
200001cc:	1dfb      	adds	r3, r7, #7
200001ce:	781b      	ldrb	r3, [r3, #0]
200001d0:	00db      	lsls	r3, r3, #3
200001d2:	68fa      	ldr	r2, [r7, #12]
200001d4:	4313      	orrs	r3, r2
200001d6:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CR = tmpreg;
200001d8:	4b03      	ldr	r3, [pc, #12]	; (200001e8 <RCC_AdjustHSICalibrationValue+0x3a>)
200001da:	68fa      	ldr	r2, [r7, #12]
200001dc:	601a      	str	r2, [r3, #0]
}
200001de:	46c0      	nop			; (mov r8, r8)
200001e0:	46bd      	mov	sp, r7
200001e2:	b004      	add	sp, #16
200001e4:	bd80      	pop	{r7, pc}
200001e6:	46c0      	nop			; (mov r8, r8)
200001e8:	40023800 	andmi	r3, r2, r0, lsl #16

200001ec <RCC_HSICmd>:
  * @note   When the HSI is stopped, HSIRDY flag goes low after 6 HSI oscillator
  *         clock cycles.  
  * @retval None
  */
void RCC_HSICmd(FunctionalState NewState)
{
200001ec:	b580      	push	{r7, lr}
200001ee:	b082      	sub	sp, #8
200001f0:	af00      	add	r7, sp, #0
200001f2:	0002      	movs	r2, r0
200001f4:	1dfb      	adds	r3, r7, #7
200001f6:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CR_HSION_BB = (uint32_t)NewState;
200001f8:	4b03      	ldr	r3, [pc, #12]	; (20000208 <RCC_HSICmd+0x1c>)
200001fa:	1dfa      	adds	r2, r7, #7
200001fc:	7812      	ldrb	r2, [r2, #0]
200001fe:	601a      	str	r2, [r3, #0]
}
20000200:	46c0      	nop			; (mov r8, r8)
20000202:	46bd      	mov	sp, r7
20000204:	b002      	add	sp, #8
20000206:	bd80      	pop	{r7, pc}
20000208:	42470000 	submi	r0, r7, #0

2000020c <RCC_LSEConfig>:
  *            @arg RCC_LSE_ON: turn ON the LSE oscillator
  *            @arg RCC_LSE_Bypass: LSE oscillator bypassed with external clock
  * @retval None
  */
void RCC_LSEConfig(uint8_t RCC_LSE)
{
2000020c:	b580      	push	{r7, lr}
2000020e:	b082      	sub	sp, #8
20000210:	af00      	add	r7, sp, #0
20000212:	0002      	movs	r2, r0
20000214:	1dfb      	adds	r3, r7, #7
20000216:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_LSE(RCC_LSE));

  /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
  /* Reset LSEON bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
20000218:	4b0c      	ldr	r3, [pc, #48]	; (2000024c <RCC_LSEConfig+0x40>)
2000021a:	2200      	movs	r2, #0
2000021c:	701a      	strb	r2, [r3, #0]

  /* Reset LSEBYP bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
2000021e:	4b0b      	ldr	r3, [pc, #44]	; (2000024c <RCC_LSEConfig+0x40>)
20000220:	2200      	movs	r2, #0
20000222:	701a      	strb	r2, [r3, #0]

  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch (RCC_LSE)
20000224:	1dfb      	adds	r3, r7, #7
20000226:	781b      	ldrb	r3, [r3, #0]
20000228:	2b01      	cmp	r3, #1
2000022a:	d002      	beq.n	20000232 <RCC_LSEConfig+0x26>
2000022c:	2b04      	cmp	r3, #4
2000022e:	d004      	beq.n	2000023a <RCC_LSEConfig+0x2e>
    case RCC_LSE_Bypass:
      /* Set LSEBYP and LSEON bits */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
      break;
    default:
      break;
20000230:	e007      	b.n	20000242 <RCC_LSEConfig+0x36>
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_ON;
20000232:	4b06      	ldr	r3, [pc, #24]	; (2000024c <RCC_LSEConfig+0x40>)
20000234:	2201      	movs	r2, #1
20000236:	701a      	strb	r2, [r3, #0]
      break;
20000238:	e003      	b.n	20000242 <RCC_LSEConfig+0x36>
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
2000023a:	4b04      	ldr	r3, [pc, #16]	; (2000024c <RCC_LSEConfig+0x40>)
2000023c:	2205      	movs	r2, #5
2000023e:	701a      	strb	r2, [r3, #0]
      break;
20000240:	46c0      	nop			; (mov r8, r8)
  }
}
20000242:	46c0      	nop			; (mov r8, r8)
20000244:	46bd      	mov	sp, r7
20000246:	b002      	add	sp, #8
20000248:	bd80      	pop	{r7, pc}
2000024a:	46c0      	nop			; (mov r8, r8)
2000024c:	40023870 	andmi	r3, r2, r0, ror r8

20000250 <RCC_LSICmd>:
  * @note   When the LSI is stopped, LSIRDY flag goes low after 6 LSI oscillator
  *         clock cycles. 
  * @retval None
  */
void RCC_LSICmd(FunctionalState NewState)
{
20000250:	b580      	push	{r7, lr}
20000252:	b082      	sub	sp, #8
20000254:	af00      	add	r7, sp, #0
20000256:	0002      	movs	r2, r0
20000258:	1dfb      	adds	r3, r7, #7
2000025a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CSR_LSION_BB = (uint32_t)NewState;
2000025c:	4b03      	ldr	r3, [pc, #12]	; (2000026c <RCC_LSICmd+0x1c>)
2000025e:	1dfa      	adds	r2, r7, #7
20000260:	7812      	ldrb	r2, [r2, #0]
20000262:	601a      	str	r2, [r3, #0]
}
20000264:	46c0      	nop			; (mov r8, r8)
20000266:	46bd      	mov	sp, r7
20000268:	b002      	add	sp, #8
2000026a:	bd80      	pop	{r7, pc}
2000026c:	42470e80 	submi	r0, r7, #128, 28	; 0x800

20000270 <RCC_PLLConfig>:
  *         correctly.
  *   
  * @retval None
  */
void RCC_PLLConfig(uint32_t RCC_PLLSource, uint32_t PLLM, uint32_t PLLN, uint32_t PLLP, uint32_t PLLQ)
{
20000270:	b580      	push	{r7, lr}
20000272:	b084      	sub	sp, #16
20000274:	af00      	add	r7, sp, #0
20000276:	60f8      	str	r0, [r7, #12]
20000278:	60b9      	str	r1, [r7, #8]
2000027a:	607a      	str	r2, [r7, #4]
2000027c:	603b      	str	r3, [r7, #0]
  assert_param(IS_RCC_PLLM_VALUE(PLLM));
  assert_param(IS_RCC_PLLN_VALUE(PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLP));
  assert_param(IS_RCC_PLLQ_VALUE(PLLQ));

  RCC->PLLCFGR = PLLM | (PLLN << 6) | (((PLLP >> 1) -1) << 16) | (RCC_PLLSource) |
2000027e:	687b      	ldr	r3, [r7, #4]
20000280:	019a      	lsls	r2, r3, #6
20000282:	68bb      	ldr	r3, [r7, #8]
20000284:	431a      	orrs	r2, r3
20000286:	683b      	ldr	r3, [r7, #0]
20000288:	085b      	lsrs	r3, r3, #1
2000028a:	3b01      	subs	r3, #1
2000028c:	041b      	lsls	r3, r3, #16
2000028e:	431a      	orrs	r2, r3
20000290:	68fb      	ldr	r3, [r7, #12]
20000292:	431a      	orrs	r2, r3
20000294:	0011      	movs	r1, r2
                 (PLLQ << 24);
20000296:	69bb      	ldr	r3, [r7, #24]
20000298:	061a      	lsls	r2, r3, #24
  RCC->PLLCFGR = PLLM | (PLLN << 6) | (((PLLP >> 1) -1) << 16) | (RCC_PLLSource) |
2000029a:	4b03      	ldr	r3, [pc, #12]	; (200002a8 <RCC_PLLConfig+0x38>)
2000029c:	430a      	orrs	r2, r1
2000029e:	605a      	str	r2, [r3, #4]
}
200002a0:	46c0      	nop			; (mov r8, r8)
200002a2:	46bd      	mov	sp, r7
200002a4:	b004      	add	sp, #16
200002a6:	bd80      	pop	{r7, pc}
200002a8:	40023800 	andmi	r3, r2, r0, lsl #16

200002ac <RCC_PLLCmd>:
  * @note   The main PLL is disabled by hardware when entering STOP and STANDBY modes.
  * @param  NewState: new state of the main PLL. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_PLLCmd(FunctionalState NewState)
{
200002ac:	b580      	push	{r7, lr}
200002ae:	b082      	sub	sp, #8
200002b0:	af00      	add	r7, sp, #0
200002b2:	0002      	movs	r2, r0
200002b4:	1dfb      	adds	r3, r7, #7
200002b6:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_PLLON_BB = (uint32_t)NewState;
200002b8:	4b03      	ldr	r3, [pc, #12]	; (200002c8 <RCC_PLLCmd+0x1c>)
200002ba:	1dfa      	adds	r2, r7, #7
200002bc:	7812      	ldrb	r2, [r2, #0]
200002be:	601a      	str	r2, [r3, #0]
}
200002c0:	46c0      	nop			; (mov r8, r8)
200002c2:	46bd      	mov	sp, r7
200002c4:	b002      	add	sp, #8
200002c6:	bd80      	pop	{r7, pc}
200002c8:	42470060 	submi	r0, r7, #96	; 0x60

200002cc <RCC_PLLI2SConfig>:
  *         on the I2S clock frequency.
  *   
  * @retval None
  */
void RCC_PLLI2SConfig(uint32_t PLLI2SN, uint32_t PLLI2SR)
{
200002cc:	b580      	push	{r7, lr}
200002ce:	b082      	sub	sp, #8
200002d0:	af00      	add	r7, sp, #0
200002d2:	6078      	str	r0, [r7, #4]
200002d4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RCC_PLLI2SN_VALUE(PLLI2SN));
  assert_param(IS_RCC_PLLI2SR_VALUE(PLLI2SR));

  RCC->PLLI2SCFGR = (PLLI2SN << 6) | (PLLI2SR << 28);
200002d6:	687b      	ldr	r3, [r7, #4]
200002d8:	019a      	lsls	r2, r3, #6
200002da:	683b      	ldr	r3, [r7, #0]
200002dc:	071b      	lsls	r3, r3, #28
200002de:	4904      	ldr	r1, [pc, #16]	; (200002f0 <RCC_PLLI2SConfig+0x24>)
200002e0:	4313      	orrs	r3, r2
200002e2:	2284      	movs	r2, #132	; 0x84
200002e4:	508b      	str	r3, [r1, r2]
}
200002e6:	46c0      	nop			; (mov r8, r8)
200002e8:	46bd      	mov	sp, r7
200002ea:	b002      	add	sp, #8
200002ec:	bd80      	pop	{r7, pc}
200002ee:	46c0      	nop			; (mov r8, r8)
200002f0:	40023800 	andmi	r3, r2, r0, lsl #16

200002f4 <RCC_PLLI2SCmd>:
  * @note   The PLLI2S is disabled by hardware when entering STOP and STANDBY modes.  
  * @param  NewState: new state of the PLLI2S. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_PLLI2SCmd(FunctionalState NewState)
{
200002f4:	b580      	push	{r7, lr}
200002f6:	b082      	sub	sp, #8
200002f8:	af00      	add	r7, sp, #0
200002fa:	0002      	movs	r2, r0
200002fc:	1dfb      	adds	r3, r7, #7
200002fe:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_PLLI2SON_BB = (uint32_t)NewState;
20000300:	4b03      	ldr	r3, [pc, #12]	; (20000310 <RCC_PLLI2SCmd+0x1c>)
20000302:	1dfa      	adds	r2, r7, #7
20000304:	7812      	ldrb	r2, [r2, #0]
20000306:	601a      	str	r2, [r3, #0]
}
20000308:	46c0      	nop			; (mov r8, r8)
2000030a:	46bd      	mov	sp, r7
2000030c:	b002      	add	sp, #8
2000030e:	bd80      	pop	{r7, pc}
20000310:	42470068 	submi	r0, r7, #104	; 0x68

20000314 <RCC_PLLSAIConfig>:
  *          This parameter must be a number between 2 and 7.
  *   
  * @retval None
  */
void RCC_PLLSAIConfig(uint32_t PLLSAIN, uint32_t PLLSAIQ, uint32_t PLLSAIR)
{
20000314:	b580      	push	{r7, lr}
20000316:	b084      	sub	sp, #16
20000318:	af00      	add	r7, sp, #0
2000031a:	60f8      	str	r0, [r7, #12]
2000031c:	60b9      	str	r1, [r7, #8]
2000031e:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_PLLSAIN_VALUE(PLLSAIN));
  assert_param(IS_RCC_PLLSAIR_VALUE(PLLSAIR));
  assert_param(IS_RCC_PLLSAIQ_VALUE(PLLSAIQ));
  
  RCC->PLLSAICFGR = (PLLSAIN << 6) | (PLLSAIQ << 24) | (PLLSAIR << 28);
20000320:	68fb      	ldr	r3, [r7, #12]
20000322:	019a      	lsls	r2, r3, #6
20000324:	68bb      	ldr	r3, [r7, #8]
20000326:	061b      	lsls	r3, r3, #24
20000328:	431a      	orrs	r2, r3
2000032a:	687b      	ldr	r3, [r7, #4]
2000032c:	071b      	lsls	r3, r3, #28
2000032e:	4904      	ldr	r1, [pc, #16]	; (20000340 <RCC_PLLSAIConfig+0x2c>)
20000330:	4313      	orrs	r3, r2
20000332:	2288      	movs	r2, #136	; 0x88
20000334:	508b      	str	r3, [r1, r2]
}
20000336:	46c0      	nop			; (mov r8, r8)
20000338:	46bd      	mov	sp, r7
2000033a:	b004      	add	sp, #16
2000033c:	bd80      	pop	{r7, pc}
2000033e:	46c0      	nop			; (mov r8, r8)
20000340:	40023800 	andmi	r3, r2, r0, lsl #16

20000344 <RCC_PLLSAICmd>:
  * @note   The PLLSAI is disabled by hardware when entering STOP and STANDBY modes.  
  * @param  NewState: new state of the PLLSAI. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_PLLSAICmd(FunctionalState NewState)
{
20000344:	b580      	push	{r7, lr}
20000346:	b082      	sub	sp, #8
20000348:	af00      	add	r7, sp, #0
2000034a:	0002      	movs	r2, r0
2000034c:	1dfb      	adds	r3, r7, #7
2000034e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_PLLSAION_BB = (uint32_t)NewState;
20000350:	4b03      	ldr	r3, [pc, #12]	; (20000360 <RCC_PLLSAICmd+0x1c>)
20000352:	1dfa      	adds	r2, r7, #7
20000354:	7812      	ldrb	r2, [r2, #0]
20000356:	601a      	str	r2, [r3, #0]
}
20000358:	46c0      	nop			; (mov r8, r8)
2000035a:	46bd      	mov	sp, r7
2000035c:	b002      	add	sp, #8
2000035e:	bd80      	pop	{r7, pc}
20000360:	42470070 	submi	r0, r7, #112	; 0x70

20000364 <RCC_ClockSecuritySystemCmd>:
  * @param  NewState: new state of the Clock Security System.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_ClockSecuritySystemCmd(FunctionalState NewState)
{
20000364:	b580      	push	{r7, lr}
20000366:	b082      	sub	sp, #8
20000368:	af00      	add	r7, sp, #0
2000036a:	0002      	movs	r2, r0
2000036c:	1dfb      	adds	r3, r7, #7
2000036e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_CSSON_BB = (uint32_t)NewState;
20000370:	4b03      	ldr	r3, [pc, #12]	; (20000380 <RCC_ClockSecuritySystemCmd+0x1c>)
20000372:	1dfa      	adds	r2, r7, #7
20000374:	7812      	ldrb	r2, [r2, #0]
20000376:	601a      	str	r2, [r3, #0]
}
20000378:	46c0      	nop			; (mov r8, r8)
2000037a:	46bd      	mov	sp, r7
2000037c:	b002      	add	sp, #8
2000037e:	bd80      	pop	{r7, pc}
20000380:	4247004c 	submi	r0, r7, #76	; 0x4c

20000384 <RCC_MCO1Config>:
  *            @arg RCC_MCO1Div_4: division by 4 applied to MCO1 clock
  *            @arg RCC_MCO1Div_5: division by 5 applied to MCO1 clock
  * @retval None
  */
void RCC_MCO1Config(uint32_t RCC_MCO1Source, uint32_t RCC_MCO1Div)
{
20000384:	b580      	push	{r7, lr}
20000386:	b084      	sub	sp, #16
20000388:	af00      	add	r7, sp, #0
2000038a:	6078      	str	r0, [r7, #4]
2000038c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
2000038e:	2300      	movs	r3, #0
20000390:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_MCO1SOURCE(RCC_MCO1Source));
  assert_param(IS_RCC_MCO1DIV(RCC_MCO1Div));  

  tmpreg = RCC->CFGR;
20000392:	4b0a      	ldr	r3, [pc, #40]	; (200003bc <RCC_MCO1Config+0x38>)
20000394:	689b      	ldr	r3, [r3, #8]
20000396:	60fb      	str	r3, [r7, #12]

  /* Clear MCO1[1:0] and MCO1PRE[2:0] bits */
  tmpreg &= CFGR_MCO1_RESET_MASK;
20000398:	68fb      	ldr	r3, [r7, #12]
2000039a:	4a09      	ldr	r2, [pc, #36]	; (200003c0 <RCC_MCO1Config+0x3c>)
2000039c:	4013      	ands	r3, r2
2000039e:	60fb      	str	r3, [r7, #12]

  /* Select MCO1 clock source and prescaler */
  tmpreg |= RCC_MCO1Source | RCC_MCO1Div;
200003a0:	687a      	ldr	r2, [r7, #4]
200003a2:	683b      	ldr	r3, [r7, #0]
200003a4:	4313      	orrs	r3, r2
200003a6:	68fa      	ldr	r2, [r7, #12]
200003a8:	4313      	orrs	r3, r2
200003aa:	60fb      	str	r3, [r7, #12]
  
  /* Store the new value */
  RCC->CFGR = tmpreg;
200003ac:	4b03      	ldr	r3, [pc, #12]	; (200003bc <RCC_MCO1Config+0x38>)
200003ae:	68fa      	ldr	r2, [r7, #12]
200003b0:	609a      	str	r2, [r3, #8]

#if defined(STM32F410xx)
  RCC_MCO1Cmd(ENABLE);
#endif /* STM32F410xx */   
}
200003b2:	46c0      	nop			; (mov r8, r8)
200003b4:	46bd      	mov	sp, r7
200003b6:	b004      	add	sp, #16
200003b8:	bd80      	pop	{r7, pc}
200003ba:	46c0      	nop			; (mov r8, r8)
200003bc:	40023800 	andmi	r3, r2, r0, lsl #16
200003c0:	f89fffff 			; <UNDEFINED> instruction: 0xf89fffff

200003c4 <RCC_MCO2Config>:
  * @note  For STM32F410xx devices to output I2SCLK clock on MCO2 you should have
  *        at last one of the SPI clocks enabled (SPI1, SPI2 or SPI5).
  * @retval None
  */
void RCC_MCO2Config(uint32_t RCC_MCO2Source, uint32_t RCC_MCO2Div)
{
200003c4:	b580      	push	{r7, lr}
200003c6:	b084      	sub	sp, #16
200003c8:	af00      	add	r7, sp, #0
200003ca:	6078      	str	r0, [r7, #4]
200003cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
200003ce:	2300      	movs	r3, #0
200003d0:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_MCO2SOURCE(RCC_MCO2Source));
  assert_param(IS_RCC_MCO2DIV(RCC_MCO2Div));
  
  tmpreg = RCC->CFGR;
200003d2:	4b0a      	ldr	r3, [pc, #40]	; (200003fc <RCC_MCO2Config+0x38>)
200003d4:	689b      	ldr	r3, [r3, #8]
200003d6:	60fb      	str	r3, [r7, #12]
  
  /* Clear MCO2 and MCO2PRE[2:0] bits */
  tmpreg &= CFGR_MCO2_RESET_MASK;
200003d8:	68fb      	ldr	r3, [r7, #12]
200003da:	015b      	lsls	r3, r3, #5
200003dc:	095b      	lsrs	r3, r3, #5
200003de:	60fb      	str	r3, [r7, #12]

  /* Select MCO2 clock source and prescaler */
  tmpreg |= RCC_MCO2Source | RCC_MCO2Div;
200003e0:	687a      	ldr	r2, [r7, #4]
200003e2:	683b      	ldr	r3, [r7, #0]
200003e4:	4313      	orrs	r3, r2
200003e6:	68fa      	ldr	r2, [r7, #12]
200003e8:	4313      	orrs	r3, r2
200003ea:	60fb      	str	r3, [r7, #12]
  
  /* Store the new value */
  RCC->CFGR = tmpreg;
200003ec:	4b03      	ldr	r3, [pc, #12]	; (200003fc <RCC_MCO2Config+0x38>)
200003ee:	68fa      	ldr	r2, [r7, #12]
200003f0:	609a      	str	r2, [r3, #8]

#if defined(STM32F410xx)
  RCC_MCO2Cmd(ENABLE);
#endif /* STM32F410xx */   
}
200003f2:	46c0      	nop			; (mov r8, r8)
200003f4:	46bd      	mov	sp, r7
200003f6:	b004      	add	sp, #16
200003f8:	bd80      	pop	{r7, pc}
200003fa:	46c0      	nop			; (mov r8, r8)
200003fc:	40023800 	andmi	r3, r2, r0, lsl #16

20000400 <RCC_SYSCLKConfig>:
  *            @arg RCC_SYSCLKSource_PLLCLK: PLL selected as system clock source (RCC_SYSCLKSource_PLLPCLK for STM32F446xx devices)
  *            @arg RCC_SYSCLKSource_PLLRCLK: PLL R selected as system clock source only for STM32F412xG, STM32F413_423xx and STM32F446xx devices
  * @retval None
  */
void RCC_SYSCLKConfig(uint32_t RCC_SYSCLKSource)
{
20000400:	b580      	push	{r7, lr}
20000402:	b084      	sub	sp, #16
20000404:	af00      	add	r7, sp, #0
20000406:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
20000408:	2300      	movs	r3, #0
2000040a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_SYSCLK_SOURCE(RCC_SYSCLKSource));

  tmpreg = RCC->CFGR;
2000040c:	4b08      	ldr	r3, [pc, #32]	; (20000430 <RCC_SYSCLKConfig+0x30>)
2000040e:	689b      	ldr	r3, [r3, #8]
20000410:	60fb      	str	r3, [r7, #12]

  /* Clear SW[1:0] bits */
  tmpreg &= ~RCC_CFGR_SW;
20000412:	68fb      	ldr	r3, [r7, #12]
20000414:	2203      	movs	r2, #3
20000416:	4393      	bics	r3, r2
20000418:	60fb      	str	r3, [r7, #12]

  /* Set SW[1:0] bits according to RCC_SYSCLKSource value */
  tmpreg |= RCC_SYSCLKSource;
2000041a:	68fa      	ldr	r2, [r7, #12]
2000041c:	687b      	ldr	r3, [r7, #4]
2000041e:	4313      	orrs	r3, r2
20000420:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;
20000422:	4b03      	ldr	r3, [pc, #12]	; (20000430 <RCC_SYSCLKConfig+0x30>)
20000424:	68fa      	ldr	r2, [r7, #12]
20000426:	609a      	str	r2, [r3, #8]
}
20000428:	46c0      	nop			; (mov r8, r8)
2000042a:	46bd      	mov	sp, r7
2000042c:	b004      	add	sp, #16
2000042e:	bd80      	pop	{r7, pc}
20000430:	40023800 	andmi	r3, r2, r0, lsl #16

20000434 <RCC_GetSYSCLKSource>:
  *              - 0x04: HSE used as system clock
  *              - 0x08: PLL used as system clock (PLL P for STM32F446xx devices)
  *              - 0x0C: PLL R used as system clock (only for STM32F412xG, STM32F413_423xx and STM32F446xx devices)
  */
uint8_t RCC_GetSYSCLKSource(void)
{
20000434:	b580      	push	{r7, lr}
20000436:	af00      	add	r7, sp, #0
  return ((uint8_t)(RCC->CFGR & RCC_CFGR_SWS));
20000438:	4b04      	ldr	r3, [pc, #16]	; (2000044c <RCC_GetSYSCLKSource+0x18>)
2000043a:	689b      	ldr	r3, [r3, #8]
2000043c:	b2db      	uxtb	r3, r3
2000043e:	220c      	movs	r2, #12
20000440:	4013      	ands	r3, r2
20000442:	b2db      	uxtb	r3, r3
}
20000444:	0018      	movs	r0, r3
20000446:	46bd      	mov	sp, r7
20000448:	bd80      	pop	{r7, pc}
2000044a:	46c0      	nop			; (mov r8, r8)
2000044c:	40023800 	andmi	r3, r2, r0, lsl #16

20000450 <RCC_HCLKConfig>:
  *            @arg RCC_SYSCLK_Div256: AHB clock = SYSCLK/256
  *            @arg RCC_SYSCLK_Div512: AHB clock = SYSCLK/512
  * @retval None
  */
void RCC_HCLKConfig(uint32_t RCC_SYSCLK)
{
20000450:	b580      	push	{r7, lr}
20000452:	b084      	sub	sp, #16
20000454:	af00      	add	r7, sp, #0
20000456:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
20000458:	2300      	movs	r3, #0
2000045a:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_HCLK(RCC_SYSCLK));

  tmpreg = RCC->CFGR;
2000045c:	4b08      	ldr	r3, [pc, #32]	; (20000480 <RCC_HCLKConfig+0x30>)
2000045e:	689b      	ldr	r3, [r3, #8]
20000460:	60fb      	str	r3, [r7, #12]

  /* Clear HPRE[3:0] bits */
  tmpreg &= ~RCC_CFGR_HPRE;
20000462:	68fb      	ldr	r3, [r7, #12]
20000464:	22f0      	movs	r2, #240	; 0xf0
20000466:	4393      	bics	r3, r2
20000468:	60fb      	str	r3, [r7, #12]

  /* Set HPRE[3:0] bits according to RCC_SYSCLK value */
  tmpreg |= RCC_SYSCLK;
2000046a:	68fa      	ldr	r2, [r7, #12]
2000046c:	687b      	ldr	r3, [r7, #4]
2000046e:	4313      	orrs	r3, r2
20000470:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;
20000472:	4b03      	ldr	r3, [pc, #12]	; (20000480 <RCC_HCLKConfig+0x30>)
20000474:	68fa      	ldr	r2, [r7, #12]
20000476:	609a      	str	r2, [r3, #8]
}
20000478:	46c0      	nop			; (mov r8, r8)
2000047a:	46bd      	mov	sp, r7
2000047c:	b004      	add	sp, #16
2000047e:	bd80      	pop	{r7, pc}
20000480:	40023800 	andmi	r3, r2, r0, lsl #16

20000484 <RCC_PCLK1Config>:
  *            @arg RCC_HCLK_Div8:  APB1 clock = HCLK/8
  *            @arg RCC_HCLK_Div16: APB1 clock = HCLK/16
  * @retval None
  */
void RCC_PCLK1Config(uint32_t RCC_HCLK)
{
20000484:	b580      	push	{r7, lr}
20000486:	b084      	sub	sp, #16
20000488:	af00      	add	r7, sp, #0
2000048a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
2000048c:	2300      	movs	r3, #0
2000048e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));

  tmpreg = RCC->CFGR;
20000490:	4b08      	ldr	r3, [pc, #32]	; (200004b4 <RCC_PCLK1Config+0x30>)
20000492:	689b      	ldr	r3, [r3, #8]
20000494:	60fb      	str	r3, [r7, #12]

  /* Clear PPRE1[2:0] bits */
  tmpreg &= ~RCC_CFGR_PPRE1;
20000496:	68fb      	ldr	r3, [r7, #12]
20000498:	4a07      	ldr	r2, [pc, #28]	; (200004b8 <RCC_PCLK1Config+0x34>)
2000049a:	4013      	ands	r3, r2
2000049c:	60fb      	str	r3, [r7, #12]

  /* Set PPRE1[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK;
2000049e:	68fa      	ldr	r2, [r7, #12]
200004a0:	687b      	ldr	r3, [r7, #4]
200004a2:	4313      	orrs	r3, r2
200004a4:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;
200004a6:	4b03      	ldr	r3, [pc, #12]	; (200004b4 <RCC_PCLK1Config+0x30>)
200004a8:	68fa      	ldr	r2, [r7, #12]
200004aa:	609a      	str	r2, [r3, #8]
}
200004ac:	46c0      	nop			; (mov r8, r8)
200004ae:	46bd      	mov	sp, r7
200004b0:	b004      	add	sp, #16
200004b2:	bd80      	pop	{r7, pc}
200004b4:	40023800 	andmi	r3, r2, r0, lsl #16
200004b8:	ffffe3ff 			; <UNDEFINED> instruction: 0xffffe3ff

200004bc <RCC_PCLK2Config>:
  *            @arg RCC_HCLK_Div8:  APB2 clock = HCLK/8
  *            @arg RCC_HCLK_Div16: APB2 clock = HCLK/16
  * @retval None
  */
void RCC_PCLK2Config(uint32_t RCC_HCLK)
{
200004bc:	b580      	push	{r7, lr}
200004be:	b084      	sub	sp, #16
200004c0:	af00      	add	r7, sp, #0
200004c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
200004c4:	2300      	movs	r3, #0
200004c6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));

  tmpreg = RCC->CFGR;
200004c8:	4b09      	ldr	r3, [pc, #36]	; (200004f0 <RCC_PCLK2Config+0x34>)
200004ca:	689b      	ldr	r3, [r3, #8]
200004cc:	60fb      	str	r3, [r7, #12]

  /* Clear PPRE2[2:0] bits */
  tmpreg &= ~RCC_CFGR_PPRE2;
200004ce:	68fb      	ldr	r3, [r7, #12]
200004d0:	4a08      	ldr	r2, [pc, #32]	; (200004f4 <RCC_PCLK2Config+0x38>)
200004d2:	4013      	ands	r3, r2
200004d4:	60fb      	str	r3, [r7, #12]

  /* Set PPRE2[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK << 3;
200004d6:	687b      	ldr	r3, [r7, #4]
200004d8:	00db      	lsls	r3, r3, #3
200004da:	68fa      	ldr	r2, [r7, #12]
200004dc:	4313      	orrs	r3, r2
200004de:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;
200004e0:	4b03      	ldr	r3, [pc, #12]	; (200004f0 <RCC_PCLK2Config+0x34>)
200004e2:	68fa      	ldr	r2, [r7, #12]
200004e4:	609a      	str	r2, [r3, #8]
}
200004e6:	46c0      	nop			; (mov r8, r8)
200004e8:	46bd      	mov	sp, r7
200004ea:	b004      	add	sp, #16
200004ec:	bd80      	pop	{r7, pc}
200004ee:	46c0      	nop			; (mov r8, r8)
200004f0:	40023800 	andmi	r3, r2, r0, lsl #16
200004f4:	ffff1fff 			; <UNDEFINED> instruction: 0xffff1fff

200004f8 <RCC_GetClocksFreq>:
  *         configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
200004f8:	b580      	push	{r7, lr}
200004fa:	b088      	sub	sp, #32
200004fc:	af00      	add	r7, sp, #0
200004fe:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
20000500:	2300      	movs	r3, #0
20000502:	61bb      	str	r3, [r7, #24]
20000504:	2300      	movs	r3, #0
20000506:	617b      	str	r3, [r7, #20]
20000508:	2300      	movs	r3, #0
2000050a:	61fb      	str	r3, [r7, #28]
2000050c:	2302      	movs	r3, #2
2000050e:	613b      	str	r3, [r7, #16]
20000510:	2300      	movs	r3, #0
20000512:	60fb      	str	r3, [r7, #12]
20000514:	2302      	movs	r3, #2
20000516:	60bb      	str	r3, [r7, #8]
#if defined(STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F446xx)  
  uint32_t pllr = 2;
#endif /* STM32F412xG || STM32F413_423xx || STM32F446xx */
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
20000518:	4b49      	ldr	r3, [pc, #292]	; (20000640 <RCC_GetClocksFreq+0x148>)
2000051a:	689b      	ldr	r3, [r3, #8]
2000051c:	220c      	movs	r2, #12
2000051e:	4013      	ands	r3, r2
20000520:	61bb      	str	r3, [r7, #24]
  
  switch (tmp)
20000522:	69bb      	ldr	r3, [r7, #24]
20000524:	2b04      	cmp	r3, #4
20000526:	d007      	beq.n	20000538 <RCC_GetClocksFreq+0x40>
20000528:	2b08      	cmp	r3, #8
2000052a:	d009      	beq.n	20000540 <RCC_GetClocksFreq+0x48>
2000052c:	2b00      	cmp	r3, #0
2000052e:	d141      	bne.n	200005b4 <RCC_GetClocksFreq+0xbc>
  {
  case 0x00:  /* HSI used as system clock source */
    RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
20000530:	687b      	ldr	r3, [r7, #4]
20000532:	4a44      	ldr	r2, [pc, #272]	; (20000644 <RCC_GetClocksFreq+0x14c>)
20000534:	601a      	str	r2, [r3, #0]
    break;
20000536:	e041      	b.n	200005bc <RCC_GetClocksFreq+0xc4>
  case 0x04:  /* HSE used as system clock  source */
    RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
20000538:	687b      	ldr	r3, [r7, #4]
2000053a:	4a43      	ldr	r2, [pc, #268]	; (20000648 <RCC_GetClocksFreq+0x150>)
2000053c:	601a      	str	r2, [r3, #0]
    break;
2000053e:	e03d      	b.n	200005bc <RCC_GetClocksFreq+0xc4>
  case 0x08:  /* PLL P used as system clock  source */
    
    /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLP
    */    
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
20000540:	4b3f      	ldr	r3, [pc, #252]	; (20000640 <RCC_GetClocksFreq+0x148>)
20000542:	685b      	ldr	r3, [r3, #4]
20000544:	0d9b      	lsrs	r3, r3, #22
20000546:	2201      	movs	r2, #1
20000548:	4013      	ands	r3, r2
2000054a:	60fb      	str	r3, [r7, #12]
    pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
2000054c:	4b3c      	ldr	r3, [pc, #240]	; (20000640 <RCC_GetClocksFreq+0x148>)
2000054e:	685b      	ldr	r3, [r3, #4]
20000550:	223f      	movs	r2, #63	; 0x3f
20000552:	4013      	ands	r3, r2
20000554:	60bb      	str	r3, [r7, #8]
    
    if (pllsource != 0)
20000556:	68fb      	ldr	r3, [r7, #12]
20000558:	2b00      	cmp	r3, #0
2000055a:	d00d      	beq.n	20000578 <RCC_GetClocksFreq+0x80>
    {
      /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
2000055c:	68b9      	ldr	r1, [r7, #8]
2000055e:	483a      	ldr	r0, [pc, #232]	; (20000648 <RCC_GetClocksFreq+0x150>)
20000560:	f002 fa3e 	bl	200029e0 <__udivsi3>
20000564:	0003      	movs	r3, r0
20000566:	001a      	movs	r2, r3
20000568:	4b35      	ldr	r3, [pc, #212]	; (20000640 <RCC_GetClocksFreq+0x148>)
2000056a:	685b      	ldr	r3, [r3, #4]
2000056c:	099b      	lsrs	r3, r3, #6
2000056e:	05db      	lsls	r3, r3, #23
20000570:	0ddb      	lsrs	r3, r3, #23
20000572:	4353      	muls	r3, r2
20000574:	61fb      	str	r3, [r7, #28]
20000576:	e00c      	b.n	20000592 <RCC_GetClocksFreq+0x9a>
    }
    else
    {
      /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
20000578:	68b9      	ldr	r1, [r7, #8]
2000057a:	4832      	ldr	r0, [pc, #200]	; (20000644 <RCC_GetClocksFreq+0x14c>)
2000057c:	f002 fa30 	bl	200029e0 <__udivsi3>
20000580:	0003      	movs	r3, r0
20000582:	001a      	movs	r2, r3
20000584:	4b2e      	ldr	r3, [pc, #184]	; (20000640 <RCC_GetClocksFreq+0x148>)
20000586:	685b      	ldr	r3, [r3, #4]
20000588:	099b      	lsrs	r3, r3, #6
2000058a:	05db      	lsls	r3, r3, #23
2000058c:	0ddb      	lsrs	r3, r3, #23
2000058e:	4353      	muls	r3, r2
20000590:	61fb      	str	r3, [r7, #28]
    }
    
    pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
20000592:	4b2b      	ldr	r3, [pc, #172]	; (20000640 <RCC_GetClocksFreq+0x148>)
20000594:	685b      	ldr	r3, [r3, #4]
20000596:	0c1b      	lsrs	r3, r3, #16
20000598:	2203      	movs	r2, #3
2000059a:	4013      	ands	r3, r2
2000059c:	3301      	adds	r3, #1
2000059e:	005b      	lsls	r3, r3, #1
200005a0:	613b      	str	r3, [r7, #16]
    RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
200005a2:	6939      	ldr	r1, [r7, #16]
200005a4:	69f8      	ldr	r0, [r7, #28]
200005a6:	f002 fa1b 	bl	200029e0 <__udivsi3>
200005aa:	0003      	movs	r3, r0
200005ac:	001a      	movs	r2, r3
200005ae:	687b      	ldr	r3, [r7, #4]
200005b0:	601a      	str	r2, [r3, #0]
    break;
200005b2:	e003      	b.n	200005bc <RCC_GetClocksFreq+0xc4>
    RCC_Clocks->SYSCLK_Frequency = pllvco/pllr;    
    break;
#endif /* STM32F412xG || STM32F413_423xx || STM32F446xx */
    
  default:
    RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
200005b4:	687b      	ldr	r3, [r7, #4]
200005b6:	4a23      	ldr	r2, [pc, #140]	; (20000644 <RCC_GetClocksFreq+0x14c>)
200005b8:	601a      	str	r2, [r3, #0]
    break;
200005ba:	46c0      	nop			; (mov r8, r8)
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/
  
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
200005bc:	4b20      	ldr	r3, [pc, #128]	; (20000640 <RCC_GetClocksFreq+0x148>)
200005be:	689b      	ldr	r3, [r3, #8]
200005c0:	22f0      	movs	r2, #240	; 0xf0
200005c2:	4013      	ands	r3, r2
200005c4:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 4;
200005c6:	69bb      	ldr	r3, [r7, #24]
200005c8:	091b      	lsrs	r3, r3, #4
200005ca:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
200005cc:	4a1f      	ldr	r2, [pc, #124]	; (2000064c <RCC_GetClocksFreq+0x154>)
200005ce:	69bb      	ldr	r3, [r7, #24]
200005d0:	18d3      	adds	r3, r2, r3
200005d2:	781b      	ldrb	r3, [r3, #0]
200005d4:	b2db      	uxtb	r3, r3
200005d6:	617b      	str	r3, [r7, #20]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
200005d8:	687b      	ldr	r3, [r7, #4]
200005da:	681a      	ldr	r2, [r3, #0]
200005dc:	697b      	ldr	r3, [r7, #20]
200005de:	40da      	lsrs	r2, r3
200005e0:	687b      	ldr	r3, [r7, #4]
200005e2:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
200005e4:	4b16      	ldr	r3, [pc, #88]	; (20000640 <RCC_GetClocksFreq+0x148>)
200005e6:	689a      	ldr	r2, [r3, #8]
200005e8:	23e0      	movs	r3, #224	; 0xe0
200005ea:	015b      	lsls	r3, r3, #5
200005ec:	4013      	ands	r3, r2
200005ee:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 10;
200005f0:	69bb      	ldr	r3, [r7, #24]
200005f2:	0a9b      	lsrs	r3, r3, #10
200005f4:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
200005f6:	4a15      	ldr	r2, [pc, #84]	; (2000064c <RCC_GetClocksFreq+0x154>)
200005f8:	69bb      	ldr	r3, [r7, #24]
200005fa:	18d3      	adds	r3, r2, r3
200005fc:	781b      	ldrb	r3, [r3, #0]
200005fe:	b2db      	uxtb	r3, r3
20000600:	617b      	str	r3, [r7, #20]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
20000602:	687b      	ldr	r3, [r7, #4]
20000604:	685a      	ldr	r2, [r3, #4]
20000606:	697b      	ldr	r3, [r7, #20]
20000608:	40da      	lsrs	r2, r3
2000060a:	687b      	ldr	r3, [r7, #4]
2000060c:	609a      	str	r2, [r3, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
2000060e:	4b0c      	ldr	r3, [pc, #48]	; (20000640 <RCC_GetClocksFreq+0x148>)
20000610:	689a      	ldr	r2, [r3, #8]
20000612:	23e0      	movs	r3, #224	; 0xe0
20000614:	021b      	lsls	r3, r3, #8
20000616:	4013      	ands	r3, r2
20000618:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 13;
2000061a:	69bb      	ldr	r3, [r7, #24]
2000061c:	0b5b      	lsrs	r3, r3, #13
2000061e:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
20000620:	4a0a      	ldr	r2, [pc, #40]	; (2000064c <RCC_GetClocksFreq+0x154>)
20000622:	69bb      	ldr	r3, [r7, #24]
20000624:	18d3      	adds	r3, r2, r3
20000626:	781b      	ldrb	r3, [r3, #0]
20000628:	b2db      	uxtb	r3, r3
2000062a:	617b      	str	r3, [r7, #20]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
2000062c:	687b      	ldr	r3, [r7, #4]
2000062e:	685a      	ldr	r2, [r3, #4]
20000630:	697b      	ldr	r3, [r7, #20]
20000632:	40da      	lsrs	r2, r3
20000634:	687b      	ldr	r3, [r7, #4]
20000636:	60da      	str	r2, [r3, #12]
}
20000638:	46c0      	nop			; (mov r8, r8)
2000063a:	46bd      	mov	sp, r7
2000063c:	b008      	add	sp, #32
2000063e:	bd80      	pop	{r7, pc}
20000640:	40023800 	andmi	r3, r2, r0, lsl #16
20000644:	00f42400 	rscseq	r2, r4, r0, lsl #8
20000648:	017d7840 	cmneq	sp, r0, asr #16
2000064c:	20002b20 	andcs	r2, r0, r0, lsr #22

20000650 <RCC_RTCCLKConfig>:
  *         RTC clock source).
  *  
  * @retval None
  */
void RCC_RTCCLKConfig(uint32_t RCC_RTCCLKSource)
{
20000650:	b580      	push	{r7, lr}
20000652:	b084      	sub	sp, #16
20000654:	af00      	add	r7, sp, #0
20000656:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
20000658:	2300      	movs	r3, #0
2000065a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_RTCCLK_SOURCE(RCC_RTCCLKSource));

  if ((RCC_RTCCLKSource & 0x00000300) == 0x00000300)
2000065c:	687a      	ldr	r2, [r7, #4]
2000065e:	23c0      	movs	r3, #192	; 0xc0
20000660:	009b      	lsls	r3, r3, #2
20000662:	401a      	ands	r2, r3
20000664:	23c0      	movs	r3, #192	; 0xc0
20000666:	009b      	lsls	r3, r3, #2
20000668:	429a      	cmp	r2, r3
2000066a:	d10f      	bne.n	2000068c <RCC_RTCCLKConfig+0x3c>
  { /* If HSE is selected as RTC clock source, configure HSE division factor for RTC clock */
    tmpreg = RCC->CFGR;
2000066c:	4b0d      	ldr	r3, [pc, #52]	; (200006a4 <RCC_RTCCLKConfig+0x54>)
2000066e:	689b      	ldr	r3, [r3, #8]
20000670:	60fb      	str	r3, [r7, #12]

    /* Clear RTCPRE[4:0] bits */
    tmpreg &= ~RCC_CFGR_RTCPRE;
20000672:	68fb      	ldr	r3, [r7, #12]
20000674:	4a0c      	ldr	r2, [pc, #48]	; (200006a8 <RCC_RTCCLKConfig+0x58>)
20000676:	4013      	ands	r3, r2
20000678:	60fb      	str	r3, [r7, #12]

    /* Configure HSE division factor for RTC clock */
    tmpreg |= (RCC_RTCCLKSource & 0xFFFFCFF);
2000067a:	687b      	ldr	r3, [r7, #4]
2000067c:	4a0b      	ldr	r2, [pc, #44]	; (200006ac <RCC_RTCCLKConfig+0x5c>)
2000067e:	4013      	ands	r3, r2
20000680:	68fa      	ldr	r2, [r7, #12]
20000682:	4313      	orrs	r3, r2
20000684:	60fb      	str	r3, [r7, #12]

    /* Store the new value */
    RCC->CFGR = tmpreg;
20000686:	4b07      	ldr	r3, [pc, #28]	; (200006a4 <RCC_RTCCLKConfig+0x54>)
20000688:	68fa      	ldr	r2, [r7, #12]
2000068a:	609a      	str	r2, [r3, #8]
  }
    
  /* Select the RTC clock source */
  RCC->BDCR |= (RCC_RTCCLKSource & 0x00000FFF);
2000068c:	4b05      	ldr	r3, [pc, #20]	; (200006a4 <RCC_RTCCLKConfig+0x54>)
2000068e:	6f19      	ldr	r1, [r3, #112]	; 0x70
20000690:	687b      	ldr	r3, [r7, #4]
20000692:	051b      	lsls	r3, r3, #20
20000694:	0d1a      	lsrs	r2, r3, #20
20000696:	4b03      	ldr	r3, [pc, #12]	; (200006a4 <RCC_RTCCLKConfig+0x54>)
20000698:	430a      	orrs	r2, r1
2000069a:	671a      	str	r2, [r3, #112]	; 0x70
}
2000069c:	46c0      	nop			; (mov r8, r8)
2000069e:	46bd      	mov	sp, r7
200006a0:	b004      	add	sp, #16
200006a2:	bd80      	pop	{r7, pc}
200006a4:	40023800 	andmi	r3, r2, r0, lsl #16
200006a8:	ffe0ffff 			; <UNDEFINED> instruction: 0xffe0ffff
200006ac:	0ffffcff 	svceq	0x00fffcff

200006b0 <RCC_RTCCLKCmd>:
  *         using the RCC_RTCCLKConfig function.
  * @param  NewState: new state of the RTC clock. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_RTCCLKCmd(FunctionalState NewState)
{
200006b0:	b580      	push	{r7, lr}
200006b2:	b082      	sub	sp, #8
200006b4:	af00      	add	r7, sp, #0
200006b6:	0002      	movs	r2, r0
200006b8:	1dfb      	adds	r3, r7, #7
200006ba:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) BDCR_RTCEN_BB = (uint32_t)NewState;
200006bc:	4b03      	ldr	r3, [pc, #12]	; (200006cc <RCC_RTCCLKCmd+0x1c>)
200006be:	1dfa      	adds	r2, r7, #7
200006c0:	7812      	ldrb	r2, [r2, #0]
200006c2:	601a      	str	r2, [r3, #0]
}
200006c4:	46c0      	nop			; (mov r8, r8)
200006c6:	46bd      	mov	sp, r7
200006c8:	b002      	add	sp, #8
200006ca:	bd80      	pop	{r7, pc}
200006cc:	42470e3c 	submi	r0, r7, #60, 28	; 0x3c0

200006d0 <RCC_BackupResetCmd>:
  * @param  NewState: new state of the Backup domain reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_BackupResetCmd(FunctionalState NewState)
{
200006d0:	b580      	push	{r7, lr}
200006d2:	b082      	sub	sp, #8
200006d4:	af00      	add	r7, sp, #0
200006d6:	0002      	movs	r2, r0
200006d8:	1dfb      	adds	r3, r7, #7
200006da:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) BDCR_BDRST_BB = (uint32_t)NewState;
200006dc:	4b03      	ldr	r3, [pc, #12]	; (200006ec <RCC_BackupResetCmd+0x1c>)
200006de:	1dfa      	adds	r2, r7, #7
200006e0:	7812      	ldrb	r2, [r2, #0]
200006e2:	601a      	str	r2, [r3, #0]
}
200006e4:	46c0      	nop			; (mov r8, r8)
200006e6:	46bd      	mov	sp, r7
200006e8:	b002      	add	sp, #8
200006ea:	bd80      	pop	{r7, pc}
200006ec:	42470e40 	submi	r0, r7, #64, 28	; 0x400

200006f0 <RCC_I2SCLKConfig>:
  *            @arg RCC_I2S2CLKSource_Ext: External clock mapped on the I2S_CKIN pin
  *                                        used as I2S clock source
  * @retval None
  */
void RCC_I2SCLKConfig(uint32_t RCC_I2SCLKSource)
{
200006f0:	b580      	push	{r7, lr}
200006f2:	b082      	sub	sp, #8
200006f4:	af00      	add	r7, sp, #0
200006f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_I2SCLK_SOURCE(RCC_I2SCLKSource));

  *(__IO uint32_t *) CFGR_I2SSRC_BB = RCC_I2SCLKSource;  
200006f8:	4b03      	ldr	r3, [pc, #12]	; (20000708 <RCC_I2SCLKConfig+0x18>)
200006fa:	687a      	ldr	r2, [r7, #4]
200006fc:	601a      	str	r2, [r3, #0]
}
200006fe:	46c0      	nop			; (mov r8, r8)
20000700:	46bd      	mov	sp, r7
20000702:	b002      	add	sp, #8
20000704:	bd80      	pop	{r7, pc}
20000706:	46c0      	nop			; (mov r8, r8)
20000708:	4247015c 	submi	r0, r7, #92, 2

2000070c <RCC_SAIBlockACLKConfig>:
  *            @arg RCC_SAIACLKSource_Ext: External clock mapped on the I2S_CKIN pin
  *                                        used as SAI1 Block A clock
  * @retval None
  */
void RCC_SAIBlockACLKConfig(uint32_t RCC_SAIBlockACLKSource)
{
2000070c:	b580      	push	{r7, lr}
2000070e:	b084      	sub	sp, #16
20000710:	af00      	add	r7, sp, #0
20000712:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
20000714:	2300      	movs	r3, #0
20000716:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_SAIACLK_SOURCE(RCC_SAIBlockACLKSource));
  
  tmpreg = RCC->DCKCFGR;
20000718:	4a09      	ldr	r2, [pc, #36]	; (20000740 <RCC_SAIBlockACLKConfig+0x34>)
2000071a:	238c      	movs	r3, #140	; 0x8c
2000071c:	58d3      	ldr	r3, [r2, r3]
2000071e:	60fb      	str	r3, [r7, #12]

  /* Clear RCC_DCKCFGR_SAI1ASRC[1:0] bits */
  tmpreg &= ~RCC_DCKCFGR_SAI1ASRC;
20000720:	68fb      	ldr	r3, [r7, #12]
20000722:	4a08      	ldr	r2, [pc, #32]	; (20000744 <RCC_SAIBlockACLKConfig+0x38>)
20000724:	4013      	ands	r3, r2
20000726:	60fb      	str	r3, [r7, #12]

  /* Set SAI Block A source selection value */
  tmpreg |= RCC_SAIBlockACLKSource;
20000728:	68fa      	ldr	r2, [r7, #12]
2000072a:	687b      	ldr	r3, [r7, #4]
2000072c:	4313      	orrs	r3, r2
2000072e:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->DCKCFGR = tmpreg;
20000730:	4903      	ldr	r1, [pc, #12]	; (20000740 <RCC_SAIBlockACLKConfig+0x34>)
20000732:	228c      	movs	r2, #140	; 0x8c
20000734:	68fb      	ldr	r3, [r7, #12]
20000736:	508b      	str	r3, [r1, r2]
}
20000738:	46c0      	nop			; (mov r8, r8)
2000073a:	46bd      	mov	sp, r7
2000073c:	b004      	add	sp, #16
2000073e:	bd80      	pop	{r7, pc}
20000740:	40023800 	andmi	r3, r2, r0, lsl #16
20000744:	ffcfffff 			; <UNDEFINED> instruction: 0xffcfffff

20000748 <RCC_SAIBlockBCLKConfig>:
  *            @arg RCC_SAIBCLKSource_Ext: External clock mapped on the I2S_CKIN pin
  *                                        used as SAI1 Block B clock
  * @retval None
  */
void RCC_SAIBlockBCLKConfig(uint32_t RCC_SAIBlockBCLKSource)
{
20000748:	b580      	push	{r7, lr}
2000074a:	b084      	sub	sp, #16
2000074c:	af00      	add	r7, sp, #0
2000074e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
20000750:	2300      	movs	r3, #0
20000752:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_SAIBCLK_SOURCE(RCC_SAIBlockBCLKSource));
  
  tmpreg = RCC->DCKCFGR;
20000754:	4a09      	ldr	r2, [pc, #36]	; (2000077c <RCC_SAIBlockBCLKConfig+0x34>)
20000756:	238c      	movs	r3, #140	; 0x8c
20000758:	58d3      	ldr	r3, [r2, r3]
2000075a:	60fb      	str	r3, [r7, #12]

  /* Clear RCC_DCKCFGR_SAI1BSRC[1:0] bits */
  tmpreg &= ~RCC_DCKCFGR_SAI1BSRC;
2000075c:	68fb      	ldr	r3, [r7, #12]
2000075e:	4a08      	ldr	r2, [pc, #32]	; (20000780 <RCC_SAIBlockBCLKConfig+0x38>)
20000760:	4013      	ands	r3, r2
20000762:	60fb      	str	r3, [r7, #12]

  /* Set SAI Block B source selection value */
  tmpreg |= RCC_SAIBlockBCLKSource;
20000764:	68fa      	ldr	r2, [r7, #12]
20000766:	687b      	ldr	r3, [r7, #4]
20000768:	4313      	orrs	r3, r2
2000076a:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->DCKCFGR = tmpreg;
2000076c:	4903      	ldr	r1, [pc, #12]	; (2000077c <RCC_SAIBlockBCLKConfig+0x34>)
2000076e:	228c      	movs	r2, #140	; 0x8c
20000770:	68fb      	ldr	r3, [r7, #12]
20000772:	508b      	str	r3, [r1, r2]
}
20000774:	46c0      	nop			; (mov r8, r8)
20000776:	46bd      	mov	sp, r7
20000778:	b004      	add	sp, #16
2000077a:	bd80      	pop	{r7, pc}
2000077c:	40023800 	andmi	r3, r2, r0, lsl #16
20000780:	ff3fffff 			; <UNDEFINED> instruction: 0xff3fffff

20000784 <RCC_SAIPLLI2SClkDivConfig>:
  *          SAI1 clock frequency = f(PLLI2S_Q) / RCC_PLLI2SDivQ 
  *              
  * @retval None
  */
void RCC_SAIPLLI2SClkDivConfig(uint32_t RCC_PLLI2SDivQ)  
{
20000784:	b580      	push	{r7, lr}
20000786:	b084      	sub	sp, #16
20000788:	af00      	add	r7, sp, #0
2000078a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
2000078c:	2300      	movs	r3, #0
2000078e:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(RCC_PLLI2SDivQ));
  
  tmpreg = RCC->DCKCFGR;
20000790:	4a0a      	ldr	r2, [pc, #40]	; (200007bc <RCC_SAIPLLI2SClkDivConfig+0x38>)
20000792:	238c      	movs	r3, #140	; 0x8c
20000794:	58d3      	ldr	r3, [r2, r3]
20000796:	60fb      	str	r3, [r7, #12]

  /* Clear PLLI2SDIVQ[4:0] bits */
  tmpreg &= ~(RCC_DCKCFGR_PLLI2SDIVQ);
20000798:	68fb      	ldr	r3, [r7, #12]
2000079a:	221f      	movs	r2, #31
2000079c:	4393      	bics	r3, r2
2000079e:	60fb      	str	r3, [r7, #12]

  /* Set PLLI2SDIVQ values */
  tmpreg |= (RCC_PLLI2SDivQ - 1);
200007a0:	687b      	ldr	r3, [r7, #4]
200007a2:	3b01      	subs	r3, #1
200007a4:	68fa      	ldr	r2, [r7, #12]
200007a6:	4313      	orrs	r3, r2
200007a8:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->DCKCFGR = tmpreg;
200007aa:	4904      	ldr	r1, [pc, #16]	; (200007bc <RCC_SAIPLLI2SClkDivConfig+0x38>)
200007ac:	228c      	movs	r2, #140	; 0x8c
200007ae:	68fb      	ldr	r3, [r7, #12]
200007b0:	508b      	str	r3, [r1, r2]
}
200007b2:	46c0      	nop			; (mov r8, r8)
200007b4:	46bd      	mov	sp, r7
200007b6:	b004      	add	sp, #16
200007b8:	bd80      	pop	{r7, pc}
200007ba:	46c0      	nop			; (mov r8, r8)
200007bc:	40023800 	andmi	r3, r2, r0, lsl #16

200007c0 <RCC_SAIPLLSAIClkDivConfig>:
  *          SAI1 clock frequency = f(PLLSAI_Q) / RCC_PLLSAIDivQ  
  *              
  * @retval None
  */
void RCC_SAIPLLSAIClkDivConfig(uint32_t RCC_PLLSAIDivQ)  
{
200007c0:	b580      	push	{r7, lr}
200007c2:	b084      	sub	sp, #16
200007c4:	af00      	add	r7, sp, #0
200007c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
200007c8:	2300      	movs	r3, #0
200007ca:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(RCC_PLLSAIDivQ));
  
  tmpreg = RCC->DCKCFGR;
200007cc:	4a0a      	ldr	r2, [pc, #40]	; (200007f8 <RCC_SAIPLLSAIClkDivConfig+0x38>)
200007ce:	238c      	movs	r3, #140	; 0x8c
200007d0:	58d3      	ldr	r3, [r2, r3]
200007d2:	60fb      	str	r3, [r7, #12]

  /* Clear PLLI2SDIVQ[4:0] and PLLSAIDIVQ[4:0] bits */
  tmpreg &= ~(RCC_DCKCFGR_PLLSAIDIVQ);
200007d4:	68fb      	ldr	r3, [r7, #12]
200007d6:	4a09      	ldr	r2, [pc, #36]	; (200007fc <RCC_SAIPLLSAIClkDivConfig+0x3c>)
200007d8:	4013      	ands	r3, r2
200007da:	60fb      	str	r3, [r7, #12]

  /* Set PLLSAIDIVQ values */
  tmpreg |= ((RCC_PLLSAIDivQ - 1) << 8);
200007dc:	687b      	ldr	r3, [r7, #4]
200007de:	3b01      	subs	r3, #1
200007e0:	021b      	lsls	r3, r3, #8
200007e2:	68fa      	ldr	r2, [r7, #12]
200007e4:	4313      	orrs	r3, r2
200007e6:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->DCKCFGR = tmpreg;
200007e8:	4903      	ldr	r1, [pc, #12]	; (200007f8 <RCC_SAIPLLSAIClkDivConfig+0x38>)
200007ea:	228c      	movs	r2, #140	; 0x8c
200007ec:	68fb      	ldr	r3, [r7, #12]
200007ee:	508b      	str	r3, [r1, r2]
}
200007f0:	46c0      	nop			; (mov r8, r8)
200007f2:	46bd      	mov	sp, r7
200007f4:	b004      	add	sp, #16
200007f6:	bd80      	pop	{r7, pc}
200007f8:	40023800 	andmi	r3, r2, r0, lsl #16
200007fc:	ffffe0ff 			; <UNDEFINED> instruction: 0xffffe0ff

20000800 <RCC_LTDCCLKDivConfig>:
  *            @arg RCC_PLLSAIDivR_Div16: LTDC clock = f(PLLSAI_R)/16
  *            
  * @retval None
  */
void RCC_LTDCCLKDivConfig(uint32_t RCC_PLLSAIDivR)
{
20000800:	b580      	push	{r7, lr}
20000802:	b084      	sub	sp, #16
20000804:	af00      	add	r7, sp, #0
20000806:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
20000808:	2300      	movs	r3, #0
2000080a:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_PLLSAI_DIVR_VALUE(RCC_PLLSAIDivR));
  
  tmpreg = RCC->DCKCFGR;
2000080c:	4a09      	ldr	r2, [pc, #36]	; (20000834 <RCC_LTDCCLKDivConfig+0x34>)
2000080e:	238c      	movs	r3, #140	; 0x8c
20000810:	58d3      	ldr	r3, [r2, r3]
20000812:	60fb      	str	r3, [r7, #12]

  /* Clear PLLSAIDIVR[2:0] bits */
  tmpreg &= ~RCC_DCKCFGR_PLLSAIDIVR;
20000814:	68fb      	ldr	r3, [r7, #12]
20000816:	4a08      	ldr	r2, [pc, #32]	; (20000838 <RCC_LTDCCLKDivConfig+0x38>)
20000818:	4013      	ands	r3, r2
2000081a:	60fb      	str	r3, [r7, #12]

  /* Set PLLSAIDIVR values */
  tmpreg |= RCC_PLLSAIDivR;
2000081c:	68fa      	ldr	r2, [r7, #12]
2000081e:	687b      	ldr	r3, [r7, #4]
20000820:	4313      	orrs	r3, r2
20000822:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->DCKCFGR = tmpreg;
20000824:	4903      	ldr	r1, [pc, #12]	; (20000834 <RCC_LTDCCLKDivConfig+0x34>)
20000826:	228c      	movs	r2, #140	; 0x8c
20000828:	68fb      	ldr	r3, [r7, #12]
2000082a:	508b      	str	r3, [r1, r2]
}
2000082c:	46c0      	nop			; (mov r8, r8)
2000082e:	46bd      	mov	sp, r7
20000830:	b004      	add	sp, #16
20000832:	bd80      	pop	{r7, pc}
20000834:	40023800 	andmi	r3, r2, r0, lsl #16
20000838:	fffcffff 			; <UNDEFINED> instruction: 0xfffcffff

2000083c <RCC_TIMCLKPresConfig>:
  *                 else it is equal to [(HPRE * PPREx) / 4] if PPREx is corresponding 
  *                 to division by 8 or more.
  * @retval None
  */
void RCC_TIMCLKPresConfig(uint32_t RCC_TIMCLKPrescaler)
{
2000083c:	b580      	push	{r7, lr}
2000083e:	b082      	sub	sp, #8
20000840:	af00      	add	r7, sp, #0
20000842:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_TIMCLK_PRESCALER(RCC_TIMCLKPrescaler));

  *(__IO uint32_t *) DCKCFGR_TIMPRE_BB = RCC_TIMCLKPrescaler;
20000844:	4b03      	ldr	r3, [pc, #12]	; (20000854 <RCC_TIMCLKPresConfig+0x18>)
20000846:	687a      	ldr	r2, [r7, #4]
20000848:	601a      	str	r2, [r3, #0]
}
2000084a:	46c0      	nop			; (mov r8, r8)
2000084c:	46bd      	mov	sp, r7
2000084e:	b002      	add	sp, #8
20000850:	bd80      	pop	{r7, pc}
20000852:	46c0      	nop			; (mov r8, r8)
20000854:	424711e0 	submi	r1, r7, #224, 2	; 0x38

20000858 <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
20000858:	b580      	push	{r7, lr}
2000085a:	b082      	sub	sp, #8
2000085c:	af00      	add	r7, sp, #0
2000085e:	6078      	str	r0, [r7, #4]
20000860:	000a      	movs	r2, r1
20000862:	1cfb      	adds	r3, r7, #3
20000864:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
20000866:	1cfb      	adds	r3, r7, #3
20000868:	781b      	ldrb	r3, [r3, #0]
2000086a:	2b00      	cmp	r3, #0
2000086c:	d006      	beq.n	2000087c <RCC_AHB1PeriphClockCmd+0x24>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
2000086e:	4b09      	ldr	r3, [pc, #36]	; (20000894 <RCC_AHB1PeriphClockCmd+0x3c>)
20000870:	6b19      	ldr	r1, [r3, #48]	; 0x30
20000872:	4b08      	ldr	r3, [pc, #32]	; (20000894 <RCC_AHB1PeriphClockCmd+0x3c>)
20000874:	687a      	ldr	r2, [r7, #4]
20000876:	430a      	orrs	r2, r1
20000878:	631a      	str	r2, [r3, #48]	; 0x30
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
  }
}
2000087a:	e006      	b.n	2000088a <RCC_AHB1PeriphClockCmd+0x32>
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
2000087c:	4b05      	ldr	r3, [pc, #20]	; (20000894 <RCC_AHB1PeriphClockCmd+0x3c>)
2000087e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
20000880:	687b      	ldr	r3, [r7, #4]
20000882:	43d9      	mvns	r1, r3
20000884:	4b03      	ldr	r3, [pc, #12]	; (20000894 <RCC_AHB1PeriphClockCmd+0x3c>)
20000886:	400a      	ands	r2, r1
20000888:	631a      	str	r2, [r3, #48]	; 0x30
}
2000088a:	46c0      	nop			; (mov r8, r8)
2000088c:	46bd      	mov	sp, r7
2000088e:	b002      	add	sp, #8
20000890:	bd80      	pop	{r7, pc}
20000892:	46c0      	nop			; (mov r8, r8)
20000894:	40023800 	andmi	r3, r2, r0, lsl #16

20000898 <RCC_AHB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB2PeriphClockCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
{
20000898:	b580      	push	{r7, lr}
2000089a:	b082      	sub	sp, #8
2000089c:	af00      	add	r7, sp, #0
2000089e:	6078      	str	r0, [r7, #4]
200008a0:	000a      	movs	r2, r1
200008a2:	1cfb      	adds	r3, r7, #3
200008a4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
200008a6:	1cfb      	adds	r3, r7, #3
200008a8:	781b      	ldrb	r3, [r3, #0]
200008aa:	2b00      	cmp	r3, #0
200008ac:	d006      	beq.n	200008bc <RCC_AHB2PeriphClockCmd+0x24>
  {
    RCC->AHB2ENR |= RCC_AHB2Periph;
200008ae:	4b09      	ldr	r3, [pc, #36]	; (200008d4 <RCC_AHB2PeriphClockCmd+0x3c>)
200008b0:	6b59      	ldr	r1, [r3, #52]	; 0x34
200008b2:	4b08      	ldr	r3, [pc, #32]	; (200008d4 <RCC_AHB2PeriphClockCmd+0x3c>)
200008b4:	687a      	ldr	r2, [r7, #4]
200008b6:	430a      	orrs	r2, r1
200008b8:	635a      	str	r2, [r3, #52]	; 0x34
  }
  else
  {
    RCC->AHB2ENR &= ~RCC_AHB2Periph;
  }
}
200008ba:	e006      	b.n	200008ca <RCC_AHB2PeriphClockCmd+0x32>
    RCC->AHB2ENR &= ~RCC_AHB2Periph;
200008bc:	4b05      	ldr	r3, [pc, #20]	; (200008d4 <RCC_AHB2PeriphClockCmd+0x3c>)
200008be:	6b5a      	ldr	r2, [r3, #52]	; 0x34
200008c0:	687b      	ldr	r3, [r7, #4]
200008c2:	43d9      	mvns	r1, r3
200008c4:	4b03      	ldr	r3, [pc, #12]	; (200008d4 <RCC_AHB2PeriphClockCmd+0x3c>)
200008c6:	400a      	ands	r2, r1
200008c8:	635a      	str	r2, [r3, #52]	; 0x34
}
200008ca:	46c0      	nop			; (mov r8, r8)
200008cc:	46bd      	mov	sp, r7
200008ce:	b002      	add	sp, #8
200008d0:	bd80      	pop	{r7, pc}
200008d2:	46c0      	nop			; (mov r8, r8)
200008d4:	40023800 	andmi	r3, r2, r0, lsl #16

200008d8 <RCC_AHB3PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB3PeriphClockCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
{
200008d8:	b580      	push	{r7, lr}
200008da:	b082      	sub	sp, #8
200008dc:	af00      	add	r7, sp, #0
200008de:	6078      	str	r0, [r7, #4]
200008e0:	000a      	movs	r2, r1
200008e2:	1cfb      	adds	r3, r7, #3
200008e4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
200008e6:	1cfb      	adds	r3, r7, #3
200008e8:	781b      	ldrb	r3, [r3, #0]
200008ea:	2b00      	cmp	r3, #0
200008ec:	d006      	beq.n	200008fc <RCC_AHB3PeriphClockCmd+0x24>
  {
    RCC->AHB3ENR |= RCC_AHB3Periph;
200008ee:	4b09      	ldr	r3, [pc, #36]	; (20000914 <RCC_AHB3PeriphClockCmd+0x3c>)
200008f0:	6b99      	ldr	r1, [r3, #56]	; 0x38
200008f2:	4b08      	ldr	r3, [pc, #32]	; (20000914 <RCC_AHB3PeriphClockCmd+0x3c>)
200008f4:	687a      	ldr	r2, [r7, #4]
200008f6:	430a      	orrs	r2, r1
200008f8:	639a      	str	r2, [r3, #56]	; 0x38
  }
  else
  {
    RCC->AHB3ENR &= ~RCC_AHB3Periph;
  }
}
200008fa:	e006      	b.n	2000090a <RCC_AHB3PeriphClockCmd+0x32>
    RCC->AHB3ENR &= ~RCC_AHB3Periph;
200008fc:	4b05      	ldr	r3, [pc, #20]	; (20000914 <RCC_AHB3PeriphClockCmd+0x3c>)
200008fe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
20000900:	687b      	ldr	r3, [r7, #4]
20000902:	43d9      	mvns	r1, r3
20000904:	4b03      	ldr	r3, [pc, #12]	; (20000914 <RCC_AHB3PeriphClockCmd+0x3c>)
20000906:	400a      	ands	r2, r1
20000908:	639a      	str	r2, [r3, #56]	; 0x38
}
2000090a:	46c0      	nop			; (mov r8, r8)
2000090c:	46bd      	mov	sp, r7
2000090e:	b002      	add	sp, #8
20000910:	bd80      	pop	{r7, pc}
20000912:	46c0      	nop			; (mov r8, r8)
20000914:	40023800 	andmi	r3, r2, r0, lsl #16

20000918 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
20000918:	b580      	push	{r7, lr}
2000091a:	b082      	sub	sp, #8
2000091c:	af00      	add	r7, sp, #0
2000091e:	6078      	str	r0, [r7, #4]
20000920:	000a      	movs	r2, r1
20000922:	1cfb      	adds	r3, r7, #3
20000924:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
20000926:	1cfb      	adds	r3, r7, #3
20000928:	781b      	ldrb	r3, [r3, #0]
2000092a:	2b00      	cmp	r3, #0
2000092c:	d006      	beq.n	2000093c <RCC_APB1PeriphClockCmd+0x24>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
2000092e:	4b09      	ldr	r3, [pc, #36]	; (20000954 <RCC_APB1PeriphClockCmd+0x3c>)
20000930:	6c19      	ldr	r1, [r3, #64]	; 0x40
20000932:	4b08      	ldr	r3, [pc, #32]	; (20000954 <RCC_APB1PeriphClockCmd+0x3c>)
20000934:	687a      	ldr	r2, [r7, #4]
20000936:	430a      	orrs	r2, r1
20000938:	641a      	str	r2, [r3, #64]	; 0x40
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
2000093a:	e006      	b.n	2000094a <RCC_APB1PeriphClockCmd+0x32>
    RCC->APB1ENR &= ~RCC_APB1Periph;
2000093c:	4b05      	ldr	r3, [pc, #20]	; (20000954 <RCC_APB1PeriphClockCmd+0x3c>)
2000093e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
20000940:	687b      	ldr	r3, [r7, #4]
20000942:	43d9      	mvns	r1, r3
20000944:	4b03      	ldr	r3, [pc, #12]	; (20000954 <RCC_APB1PeriphClockCmd+0x3c>)
20000946:	400a      	ands	r2, r1
20000948:	641a      	str	r2, [r3, #64]	; 0x40
}
2000094a:	46c0      	nop			; (mov r8, r8)
2000094c:	46bd      	mov	sp, r7
2000094e:	b002      	add	sp, #8
20000950:	bd80      	pop	{r7, pc}
20000952:	46c0      	nop			; (mov r8, r8)
20000954:	40023800 	andmi	r3, r2, r0, lsl #16

20000958 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
20000958:	b580      	push	{r7, lr}
2000095a:	b082      	sub	sp, #8
2000095c:	af00      	add	r7, sp, #0
2000095e:	6078      	str	r0, [r7, #4]
20000960:	000a      	movs	r2, r1
20000962:	1cfb      	adds	r3, r7, #3
20000964:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
20000966:	1cfb      	adds	r3, r7, #3
20000968:	781b      	ldrb	r3, [r3, #0]
2000096a:	2b00      	cmp	r3, #0
2000096c:	d006      	beq.n	2000097c <RCC_APB2PeriphClockCmd+0x24>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
2000096e:	4b09      	ldr	r3, [pc, #36]	; (20000994 <RCC_APB2PeriphClockCmd+0x3c>)
20000970:	6c59      	ldr	r1, [r3, #68]	; 0x44
20000972:	4b08      	ldr	r3, [pc, #32]	; (20000994 <RCC_APB2PeriphClockCmd+0x3c>)
20000974:	687a      	ldr	r2, [r7, #4]
20000976:	430a      	orrs	r2, r1
20000978:	645a      	str	r2, [r3, #68]	; 0x44
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
2000097a:	e006      	b.n	2000098a <RCC_APB2PeriphClockCmd+0x32>
    RCC->APB2ENR &= ~RCC_APB2Periph;
2000097c:	4b05      	ldr	r3, [pc, #20]	; (20000994 <RCC_APB2PeriphClockCmd+0x3c>)
2000097e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
20000980:	687b      	ldr	r3, [r7, #4]
20000982:	43d9      	mvns	r1, r3
20000984:	4b03      	ldr	r3, [pc, #12]	; (20000994 <RCC_APB2PeriphClockCmd+0x3c>)
20000986:	400a      	ands	r2, r1
20000988:	645a      	str	r2, [r3, #68]	; 0x44
}
2000098a:	46c0      	nop			; (mov r8, r8)
2000098c:	46bd      	mov	sp, r7
2000098e:	b002      	add	sp, #8
20000990:	bd80      	pop	{r7, pc}
20000992:	46c0      	nop			; (mov r8, r8)
20000994:	40023800 	andmi	r3, r2, r0, lsl #16

20000998 <RCC_AHB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphResetCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
20000998:	b580      	push	{r7, lr}
2000099a:	b082      	sub	sp, #8
2000099c:	af00      	add	r7, sp, #0
2000099e:	6078      	str	r0, [r7, #4]
200009a0:	000a      	movs	r2, r1
200009a2:	1cfb      	adds	r3, r7, #3
200009a4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_RESET_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
200009a6:	1cfb      	adds	r3, r7, #3
200009a8:	781b      	ldrb	r3, [r3, #0]
200009aa:	2b00      	cmp	r3, #0
200009ac:	d006      	beq.n	200009bc <RCC_AHB1PeriphResetCmd+0x24>
  {
    RCC->AHB1RSTR |= RCC_AHB1Periph;
200009ae:	4b09      	ldr	r3, [pc, #36]	; (200009d4 <RCC_AHB1PeriphResetCmd+0x3c>)
200009b0:	6919      	ldr	r1, [r3, #16]
200009b2:	4b08      	ldr	r3, [pc, #32]	; (200009d4 <RCC_AHB1PeriphResetCmd+0x3c>)
200009b4:	687a      	ldr	r2, [r7, #4]
200009b6:	430a      	orrs	r2, r1
200009b8:	611a      	str	r2, [r3, #16]
  }
  else
  {
    RCC->AHB1RSTR &= ~RCC_AHB1Periph;
  }
}
200009ba:	e006      	b.n	200009ca <RCC_AHB1PeriphResetCmd+0x32>
    RCC->AHB1RSTR &= ~RCC_AHB1Periph;
200009bc:	4b05      	ldr	r3, [pc, #20]	; (200009d4 <RCC_AHB1PeriphResetCmd+0x3c>)
200009be:	691a      	ldr	r2, [r3, #16]
200009c0:	687b      	ldr	r3, [r7, #4]
200009c2:	43d9      	mvns	r1, r3
200009c4:	4b03      	ldr	r3, [pc, #12]	; (200009d4 <RCC_AHB1PeriphResetCmd+0x3c>)
200009c6:	400a      	ands	r2, r1
200009c8:	611a      	str	r2, [r3, #16]
}
200009ca:	46c0      	nop			; (mov r8, r8)
200009cc:	46bd      	mov	sp, r7
200009ce:	b002      	add	sp, #8
200009d0:	bd80      	pop	{r7, pc}
200009d2:	46c0      	nop			; (mov r8, r8)
200009d4:	40023800 	andmi	r3, r2, r0, lsl #16

200009d8 <RCC_AHB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB2PeriphResetCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
{
200009d8:	b580      	push	{r7, lr}
200009da:	b082      	sub	sp, #8
200009dc:	af00      	add	r7, sp, #0
200009de:	6078      	str	r0, [r7, #4]
200009e0:	000a      	movs	r2, r1
200009e2:	1cfb      	adds	r3, r7, #3
200009e4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
200009e6:	1cfb      	adds	r3, r7, #3
200009e8:	781b      	ldrb	r3, [r3, #0]
200009ea:	2b00      	cmp	r3, #0
200009ec:	d006      	beq.n	200009fc <RCC_AHB2PeriphResetCmd+0x24>
  {
    RCC->AHB2RSTR |= RCC_AHB2Periph;
200009ee:	4b09      	ldr	r3, [pc, #36]	; (20000a14 <RCC_AHB2PeriphResetCmd+0x3c>)
200009f0:	6959      	ldr	r1, [r3, #20]
200009f2:	4b08      	ldr	r3, [pc, #32]	; (20000a14 <RCC_AHB2PeriphResetCmd+0x3c>)
200009f4:	687a      	ldr	r2, [r7, #4]
200009f6:	430a      	orrs	r2, r1
200009f8:	615a      	str	r2, [r3, #20]
  }
  else
  {
    RCC->AHB2RSTR &= ~RCC_AHB2Periph;
  }
}
200009fa:	e006      	b.n	20000a0a <RCC_AHB2PeriphResetCmd+0x32>
    RCC->AHB2RSTR &= ~RCC_AHB2Periph;
200009fc:	4b05      	ldr	r3, [pc, #20]	; (20000a14 <RCC_AHB2PeriphResetCmd+0x3c>)
200009fe:	695a      	ldr	r2, [r3, #20]
20000a00:	687b      	ldr	r3, [r7, #4]
20000a02:	43d9      	mvns	r1, r3
20000a04:	4b03      	ldr	r3, [pc, #12]	; (20000a14 <RCC_AHB2PeriphResetCmd+0x3c>)
20000a06:	400a      	ands	r2, r1
20000a08:	615a      	str	r2, [r3, #20]
}
20000a0a:	46c0      	nop			; (mov r8, r8)
20000a0c:	46bd      	mov	sp, r7
20000a0e:	b002      	add	sp, #8
20000a10:	bd80      	pop	{r7, pc}
20000a12:	46c0      	nop			; (mov r8, r8)
20000a14:	40023800 	andmi	r3, r2, r0, lsl #16

20000a18 <RCC_AHB3PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB3PeriphResetCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
{
20000a18:	b580      	push	{r7, lr}
20000a1a:	b082      	sub	sp, #8
20000a1c:	af00      	add	r7, sp, #0
20000a1e:	6078      	str	r0, [r7, #4]
20000a20:	000a      	movs	r2, r1
20000a22:	1cfb      	adds	r3, r7, #3
20000a24:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
20000a26:	1cfb      	adds	r3, r7, #3
20000a28:	781b      	ldrb	r3, [r3, #0]
20000a2a:	2b00      	cmp	r3, #0
20000a2c:	d006      	beq.n	20000a3c <RCC_AHB3PeriphResetCmd+0x24>
  {
    RCC->AHB3RSTR |= RCC_AHB3Periph;
20000a2e:	4b09      	ldr	r3, [pc, #36]	; (20000a54 <RCC_AHB3PeriphResetCmd+0x3c>)
20000a30:	6999      	ldr	r1, [r3, #24]
20000a32:	4b08      	ldr	r3, [pc, #32]	; (20000a54 <RCC_AHB3PeriphResetCmd+0x3c>)
20000a34:	687a      	ldr	r2, [r7, #4]
20000a36:	430a      	orrs	r2, r1
20000a38:	619a      	str	r2, [r3, #24]
  }
  else
  {
    RCC->AHB3RSTR &= ~RCC_AHB3Periph;
  }
}
20000a3a:	e006      	b.n	20000a4a <RCC_AHB3PeriphResetCmd+0x32>
    RCC->AHB3RSTR &= ~RCC_AHB3Periph;
20000a3c:	4b05      	ldr	r3, [pc, #20]	; (20000a54 <RCC_AHB3PeriphResetCmd+0x3c>)
20000a3e:	699a      	ldr	r2, [r3, #24]
20000a40:	687b      	ldr	r3, [r7, #4]
20000a42:	43d9      	mvns	r1, r3
20000a44:	4b03      	ldr	r3, [pc, #12]	; (20000a54 <RCC_AHB3PeriphResetCmd+0x3c>)
20000a46:	400a      	ands	r2, r1
20000a48:	619a      	str	r2, [r3, #24]
}
20000a4a:	46c0      	nop			; (mov r8, r8)
20000a4c:	46bd      	mov	sp, r7
20000a4e:	b002      	add	sp, #8
20000a50:	bd80      	pop	{r7, pc}
20000a52:	46c0      	nop			; (mov r8, r8)
20000a54:	40023800 	andmi	r3, r2, r0, lsl #16

20000a58 <RCC_APB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
20000a58:	b580      	push	{r7, lr}
20000a5a:	b082      	sub	sp, #8
20000a5c:	af00      	add	r7, sp, #0
20000a5e:	6078      	str	r0, [r7, #4]
20000a60:	000a      	movs	r2, r1
20000a62:	1cfb      	adds	r3, r7, #3
20000a64:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
20000a66:	1cfb      	adds	r3, r7, #3
20000a68:	781b      	ldrb	r3, [r3, #0]
20000a6a:	2b00      	cmp	r3, #0
20000a6c:	d006      	beq.n	20000a7c <RCC_APB1PeriphResetCmd+0x24>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
20000a6e:	4b09      	ldr	r3, [pc, #36]	; (20000a94 <RCC_APB1PeriphResetCmd+0x3c>)
20000a70:	6a19      	ldr	r1, [r3, #32]
20000a72:	4b08      	ldr	r3, [pc, #32]	; (20000a94 <RCC_APB1PeriphResetCmd+0x3c>)
20000a74:	687a      	ldr	r2, [r7, #4]
20000a76:	430a      	orrs	r2, r1
20000a78:	621a      	str	r2, [r3, #32]
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
  }
}
20000a7a:	e006      	b.n	20000a8a <RCC_APB1PeriphResetCmd+0x32>
    RCC->APB1RSTR &= ~RCC_APB1Periph;
20000a7c:	4b05      	ldr	r3, [pc, #20]	; (20000a94 <RCC_APB1PeriphResetCmd+0x3c>)
20000a7e:	6a1a      	ldr	r2, [r3, #32]
20000a80:	687b      	ldr	r3, [r7, #4]
20000a82:	43d9      	mvns	r1, r3
20000a84:	4b03      	ldr	r3, [pc, #12]	; (20000a94 <RCC_APB1PeriphResetCmd+0x3c>)
20000a86:	400a      	ands	r2, r1
20000a88:	621a      	str	r2, [r3, #32]
}
20000a8a:	46c0      	nop			; (mov r8, r8)
20000a8c:	46bd      	mov	sp, r7
20000a8e:	b002      	add	sp, #8
20000a90:	bd80      	pop	{r7, pc}
20000a92:	46c0      	nop			; (mov r8, r8)
20000a94:	40023800 	andmi	r3, r2, r0, lsl #16

20000a98 <RCC_APB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
20000a98:	b580      	push	{r7, lr}
20000a9a:	b082      	sub	sp, #8
20000a9c:	af00      	add	r7, sp, #0
20000a9e:	6078      	str	r0, [r7, #4]
20000aa0:	000a      	movs	r2, r1
20000aa2:	1cfb      	adds	r3, r7, #3
20000aa4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_RESET_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
20000aa6:	1cfb      	adds	r3, r7, #3
20000aa8:	781b      	ldrb	r3, [r3, #0]
20000aaa:	2b00      	cmp	r3, #0
20000aac:	d006      	beq.n	20000abc <RCC_APB2PeriphResetCmd+0x24>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
20000aae:	4b09      	ldr	r3, [pc, #36]	; (20000ad4 <RCC_APB2PeriphResetCmd+0x3c>)
20000ab0:	6a59      	ldr	r1, [r3, #36]	; 0x24
20000ab2:	4b08      	ldr	r3, [pc, #32]	; (20000ad4 <RCC_APB2PeriphResetCmd+0x3c>)
20000ab4:	687a      	ldr	r2, [r7, #4]
20000ab6:	430a      	orrs	r2, r1
20000ab8:	625a      	str	r2, [r3, #36]	; 0x24
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
  }
}
20000aba:	e006      	b.n	20000aca <RCC_APB2PeriphResetCmd+0x32>
    RCC->APB2RSTR &= ~RCC_APB2Periph;
20000abc:	4b05      	ldr	r3, [pc, #20]	; (20000ad4 <RCC_APB2PeriphResetCmd+0x3c>)
20000abe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
20000ac0:	687b      	ldr	r3, [r7, #4]
20000ac2:	43d9      	mvns	r1, r3
20000ac4:	4b03      	ldr	r3, [pc, #12]	; (20000ad4 <RCC_APB2PeriphResetCmd+0x3c>)
20000ac6:	400a      	ands	r2, r1
20000ac8:	625a      	str	r2, [r3, #36]	; 0x24
}
20000aca:	46c0      	nop			; (mov r8, r8)
20000acc:	46bd      	mov	sp, r7
20000ace:	b002      	add	sp, #8
20000ad0:	bd80      	pop	{r7, pc}
20000ad2:	46c0      	nop			; (mov r8, r8)
20000ad4:	40023800 	andmi	r3, r2, r0, lsl #16

20000ad8 <RCC_AHB1PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockLPModeCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
20000ad8:	b580      	push	{r7, lr}
20000ada:	b082      	sub	sp, #8
20000adc:	af00      	add	r7, sp, #0
20000ade:	6078      	str	r0, [r7, #4]
20000ae0:	000a      	movs	r2, r1
20000ae2:	1cfb      	adds	r3, r7, #3
20000ae4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_LPMODE_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
20000ae6:	1cfb      	adds	r3, r7, #3
20000ae8:	781b      	ldrb	r3, [r3, #0]
20000aea:	2b00      	cmp	r3, #0
20000aec:	d006      	beq.n	20000afc <RCC_AHB1PeriphClockLPModeCmd+0x24>
  {
    RCC->AHB1LPENR |= RCC_AHB1Periph;
20000aee:	4b09      	ldr	r3, [pc, #36]	; (20000b14 <RCC_AHB1PeriphClockLPModeCmd+0x3c>)
20000af0:	6d19      	ldr	r1, [r3, #80]	; 0x50
20000af2:	4b08      	ldr	r3, [pc, #32]	; (20000b14 <RCC_AHB1PeriphClockLPModeCmd+0x3c>)
20000af4:	687a      	ldr	r2, [r7, #4]
20000af6:	430a      	orrs	r2, r1
20000af8:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    RCC->AHB1LPENR &= ~RCC_AHB1Periph;
  }
}
20000afa:	e006      	b.n	20000b0a <RCC_AHB1PeriphClockLPModeCmd+0x32>
    RCC->AHB1LPENR &= ~RCC_AHB1Periph;
20000afc:	4b05      	ldr	r3, [pc, #20]	; (20000b14 <RCC_AHB1PeriphClockLPModeCmd+0x3c>)
20000afe:	6d1a      	ldr	r2, [r3, #80]	; 0x50
20000b00:	687b      	ldr	r3, [r7, #4]
20000b02:	43d9      	mvns	r1, r3
20000b04:	4b03      	ldr	r3, [pc, #12]	; (20000b14 <RCC_AHB1PeriphClockLPModeCmd+0x3c>)
20000b06:	400a      	ands	r2, r1
20000b08:	651a      	str	r2, [r3, #80]	; 0x50
}
20000b0a:	46c0      	nop			; (mov r8, r8)
20000b0c:	46bd      	mov	sp, r7
20000b0e:	b002      	add	sp, #8
20000b10:	bd80      	pop	{r7, pc}
20000b12:	46c0      	nop			; (mov r8, r8)
20000b14:	40023800 	andmi	r3, r2, r0, lsl #16

20000b18 <RCC_AHB2PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB2PeriphClockLPModeCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
{
20000b18:	b580      	push	{r7, lr}
20000b1a:	b082      	sub	sp, #8
20000b1c:	af00      	add	r7, sp, #0
20000b1e:	6078      	str	r0, [r7, #4]
20000b20:	000a      	movs	r2, r1
20000b22:	1cfb      	adds	r3, r7, #3
20000b24:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
20000b26:	1cfb      	adds	r3, r7, #3
20000b28:	781b      	ldrb	r3, [r3, #0]
20000b2a:	2b00      	cmp	r3, #0
20000b2c:	d006      	beq.n	20000b3c <RCC_AHB2PeriphClockLPModeCmd+0x24>
  {
    RCC->AHB2LPENR |= RCC_AHB2Periph;
20000b2e:	4b09      	ldr	r3, [pc, #36]	; (20000b54 <RCC_AHB2PeriphClockLPModeCmd+0x3c>)
20000b30:	6d59      	ldr	r1, [r3, #84]	; 0x54
20000b32:	4b08      	ldr	r3, [pc, #32]	; (20000b54 <RCC_AHB2PeriphClockLPModeCmd+0x3c>)
20000b34:	687a      	ldr	r2, [r7, #4]
20000b36:	430a      	orrs	r2, r1
20000b38:	655a      	str	r2, [r3, #84]	; 0x54
  }
  else
  {
    RCC->AHB2LPENR &= ~RCC_AHB2Periph;
  }
}
20000b3a:	e006      	b.n	20000b4a <RCC_AHB2PeriphClockLPModeCmd+0x32>
    RCC->AHB2LPENR &= ~RCC_AHB2Periph;
20000b3c:	4b05      	ldr	r3, [pc, #20]	; (20000b54 <RCC_AHB2PeriphClockLPModeCmd+0x3c>)
20000b3e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
20000b40:	687b      	ldr	r3, [r7, #4]
20000b42:	43d9      	mvns	r1, r3
20000b44:	4b03      	ldr	r3, [pc, #12]	; (20000b54 <RCC_AHB2PeriphClockLPModeCmd+0x3c>)
20000b46:	400a      	ands	r2, r1
20000b48:	655a      	str	r2, [r3, #84]	; 0x54
}
20000b4a:	46c0      	nop			; (mov r8, r8)
20000b4c:	46bd      	mov	sp, r7
20000b4e:	b002      	add	sp, #8
20000b50:	bd80      	pop	{r7, pc}
20000b52:	46c0      	nop			; (mov r8, r8)
20000b54:	40023800 	andmi	r3, r2, r0, lsl #16

20000b58 <RCC_AHB3PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB3PeriphClockLPModeCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
{
20000b58:	b580      	push	{r7, lr}
20000b5a:	b082      	sub	sp, #8
20000b5c:	af00      	add	r7, sp, #0
20000b5e:	6078      	str	r0, [r7, #4]
20000b60:	000a      	movs	r2, r1
20000b62:	1cfb      	adds	r3, r7, #3
20000b64:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
20000b66:	1cfb      	adds	r3, r7, #3
20000b68:	781b      	ldrb	r3, [r3, #0]
20000b6a:	2b00      	cmp	r3, #0
20000b6c:	d006      	beq.n	20000b7c <RCC_AHB3PeriphClockLPModeCmd+0x24>
  {
    RCC->AHB3LPENR |= RCC_AHB3Periph;
20000b6e:	4b09      	ldr	r3, [pc, #36]	; (20000b94 <RCC_AHB3PeriphClockLPModeCmd+0x3c>)
20000b70:	6d99      	ldr	r1, [r3, #88]	; 0x58
20000b72:	4b08      	ldr	r3, [pc, #32]	; (20000b94 <RCC_AHB3PeriphClockLPModeCmd+0x3c>)
20000b74:	687a      	ldr	r2, [r7, #4]
20000b76:	430a      	orrs	r2, r1
20000b78:	659a      	str	r2, [r3, #88]	; 0x58
  }
  else
  {
    RCC->AHB3LPENR &= ~RCC_AHB3Periph;
  }
}
20000b7a:	e006      	b.n	20000b8a <RCC_AHB3PeriphClockLPModeCmd+0x32>
    RCC->AHB3LPENR &= ~RCC_AHB3Periph;
20000b7c:	4b05      	ldr	r3, [pc, #20]	; (20000b94 <RCC_AHB3PeriphClockLPModeCmd+0x3c>)
20000b7e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
20000b80:	687b      	ldr	r3, [r7, #4]
20000b82:	43d9      	mvns	r1, r3
20000b84:	4b03      	ldr	r3, [pc, #12]	; (20000b94 <RCC_AHB3PeriphClockLPModeCmd+0x3c>)
20000b86:	400a      	ands	r2, r1
20000b88:	659a      	str	r2, [r3, #88]	; 0x58
}
20000b8a:	46c0      	nop			; (mov r8, r8)
20000b8c:	46bd      	mov	sp, r7
20000b8e:	b002      	add	sp, #8
20000b90:	bd80      	pop	{r7, pc}
20000b92:	46c0      	nop			; (mov r8, r8)
20000b94:	40023800 	andmi	r3, r2, r0, lsl #16

20000b98 <RCC_APB1PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockLPModeCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
20000b98:	b580      	push	{r7, lr}
20000b9a:	b082      	sub	sp, #8
20000b9c:	af00      	add	r7, sp, #0
20000b9e:	6078      	str	r0, [r7, #4]
20000ba0:	000a      	movs	r2, r1
20000ba2:	1cfb      	adds	r3, r7, #3
20000ba4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
20000ba6:	1cfb      	adds	r3, r7, #3
20000ba8:	781b      	ldrb	r3, [r3, #0]
20000baa:	2b00      	cmp	r3, #0
20000bac:	d006      	beq.n	20000bbc <RCC_APB1PeriphClockLPModeCmd+0x24>
  {
    RCC->APB1LPENR |= RCC_APB1Periph;
20000bae:	4b09      	ldr	r3, [pc, #36]	; (20000bd4 <RCC_APB1PeriphClockLPModeCmd+0x3c>)
20000bb0:	6e19      	ldr	r1, [r3, #96]	; 0x60
20000bb2:	4b08      	ldr	r3, [pc, #32]	; (20000bd4 <RCC_APB1PeriphClockLPModeCmd+0x3c>)
20000bb4:	687a      	ldr	r2, [r7, #4]
20000bb6:	430a      	orrs	r2, r1
20000bb8:	661a      	str	r2, [r3, #96]	; 0x60
  }
  else
  {
    RCC->APB1LPENR &= ~RCC_APB1Periph;
  }
}
20000bba:	e006      	b.n	20000bca <RCC_APB1PeriphClockLPModeCmd+0x32>
    RCC->APB1LPENR &= ~RCC_APB1Periph;
20000bbc:	4b05      	ldr	r3, [pc, #20]	; (20000bd4 <RCC_APB1PeriphClockLPModeCmd+0x3c>)
20000bbe:	6e1a      	ldr	r2, [r3, #96]	; 0x60
20000bc0:	687b      	ldr	r3, [r7, #4]
20000bc2:	43d9      	mvns	r1, r3
20000bc4:	4b03      	ldr	r3, [pc, #12]	; (20000bd4 <RCC_APB1PeriphClockLPModeCmd+0x3c>)
20000bc6:	400a      	ands	r2, r1
20000bc8:	661a      	str	r2, [r3, #96]	; 0x60
}
20000bca:	46c0      	nop			; (mov r8, r8)
20000bcc:	46bd      	mov	sp, r7
20000bce:	b002      	add	sp, #8
20000bd0:	bd80      	pop	{r7, pc}
20000bd2:	46c0      	nop			; (mov r8, r8)
20000bd4:	40023800 	andmi	r3, r2, r0, lsl #16

20000bd8 <RCC_APB2PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockLPModeCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
20000bd8:	b580      	push	{r7, lr}
20000bda:	b082      	sub	sp, #8
20000bdc:	af00      	add	r7, sp, #0
20000bde:	6078      	str	r0, [r7, #4]
20000be0:	000a      	movs	r2, r1
20000be2:	1cfb      	adds	r3, r7, #3
20000be4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
20000be6:	1cfb      	adds	r3, r7, #3
20000be8:	781b      	ldrb	r3, [r3, #0]
20000bea:	2b00      	cmp	r3, #0
20000bec:	d006      	beq.n	20000bfc <RCC_APB2PeriphClockLPModeCmd+0x24>
  {
    RCC->APB2LPENR |= RCC_APB2Periph;
20000bee:	4b09      	ldr	r3, [pc, #36]	; (20000c14 <RCC_APB2PeriphClockLPModeCmd+0x3c>)
20000bf0:	6e59      	ldr	r1, [r3, #100]	; 0x64
20000bf2:	4b08      	ldr	r3, [pc, #32]	; (20000c14 <RCC_APB2PeriphClockLPModeCmd+0x3c>)
20000bf4:	687a      	ldr	r2, [r7, #4]
20000bf6:	430a      	orrs	r2, r1
20000bf8:	665a      	str	r2, [r3, #100]	; 0x64
  }
  else
  {
    RCC->APB2LPENR &= ~RCC_APB2Periph;
  }
}
20000bfa:	e006      	b.n	20000c0a <RCC_APB2PeriphClockLPModeCmd+0x32>
    RCC->APB2LPENR &= ~RCC_APB2Periph;
20000bfc:	4b05      	ldr	r3, [pc, #20]	; (20000c14 <RCC_APB2PeriphClockLPModeCmd+0x3c>)
20000bfe:	6e5a      	ldr	r2, [r3, #100]	; 0x64
20000c00:	687b      	ldr	r3, [r7, #4]
20000c02:	43d9      	mvns	r1, r3
20000c04:	4b03      	ldr	r3, [pc, #12]	; (20000c14 <RCC_APB2PeriphClockLPModeCmd+0x3c>)
20000c06:	400a      	ands	r2, r1
20000c08:	665a      	str	r2, [r3, #100]	; 0x64
}
20000c0a:	46c0      	nop			; (mov r8, r8)
20000c0c:	46bd      	mov	sp, r7
20000c0e:	b002      	add	sp, #8
20000c10:	bd80      	pop	{r7, pc}
20000c12:	46c0      	nop			; (mov r8, r8)
20000c14:	40023800 	andmi	r3, r2, r0, lsl #16

20000c18 <RCC_LSEModeConfig>:
  *            @arg RCC_LSE_LOWPOWER_MODE:  LSE oscillator in low power mode.
  *            @arg RCC_LSE_HIGHDRIVE_MODE: LSE oscillator in High Drive mode.
  * @retval None
  */
void RCC_LSEModeConfig(uint8_t RCC_Mode)
{
20000c18:	b580      	push	{r7, lr}
20000c1a:	b082      	sub	sp, #8
20000c1c:	af00      	add	r7, sp, #0
20000c1e:	0002      	movs	r2, r0
20000c20:	1dfb      	adds	r3, r7, #7
20000c22:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_LSE_MODE(RCC_Mode));
  
  if(RCC_Mode == RCC_LSE_HIGHDRIVE_MODE)
20000c24:	1dfb      	adds	r3, r7, #7
20000c26:	781b      	ldrb	r3, [r3, #0]
20000c28:	2b01      	cmp	r3, #1
20000c2a:	d106      	bne.n	20000c3a <RCC_LSEModeConfig+0x22>
  {
    SET_BIT(RCC->BDCR, RCC_BDCR_LSEMOD);
20000c2c:	4b08      	ldr	r3, [pc, #32]	; (20000c50 <RCC_LSEModeConfig+0x38>)
20000c2e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
20000c30:	4b07      	ldr	r3, [pc, #28]	; (20000c50 <RCC_LSEModeConfig+0x38>)
20000c32:	2108      	movs	r1, #8
20000c34:	430a      	orrs	r2, r1
20000c36:	671a      	str	r2, [r3, #112]	; 0x70
  }
  else
  {
    CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEMOD);
  }
}
20000c38:	e005      	b.n	20000c46 <RCC_LSEModeConfig+0x2e>
    CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEMOD);
20000c3a:	4b05      	ldr	r3, [pc, #20]	; (20000c50 <RCC_LSEModeConfig+0x38>)
20000c3c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
20000c3e:	4b04      	ldr	r3, [pc, #16]	; (20000c50 <RCC_LSEModeConfig+0x38>)
20000c40:	2108      	movs	r1, #8
20000c42:	438a      	bics	r2, r1
20000c44:	671a      	str	r2, [r3, #112]	; 0x70
}
20000c46:	46c0      	nop			; (mov r8, r8)
20000c48:	46bd      	mov	sp, r7
20000c4a:	b002      	add	sp, #8
20000c4c:	bd80      	pop	{r7, pc}
20000c4e:	46c0      	nop			; (mov r8, r8)
20000c50:	40023800 	andmi	r3, r2, r0, lsl #16

20000c54 <RCC_ITConfig>:
  * @param  NewState: new state of the specified RCC interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_ITConfig(uint8_t RCC_IT, FunctionalState NewState)
{
20000c54:	b580      	push	{r7, lr}
20000c56:	b082      	sub	sp, #8
20000c58:	af00      	add	r7, sp, #0
20000c5a:	0002      	movs	r2, r0
20000c5c:	1dfb      	adds	r3, r7, #7
20000c5e:	701a      	strb	r2, [r3, #0]
20000c60:	1dbb      	adds	r3, r7, #6
20000c62:	1c0a      	adds	r2, r1, #0
20000c64:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_IT(RCC_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
20000c66:	1dbb      	adds	r3, r7, #6
20000c68:	781b      	ldrb	r3, [r3, #0]
20000c6a:	2b00      	cmp	r3, #0
20000c6c:	d009      	beq.n	20000c82 <RCC_ITConfig+0x2e>
  {
    /* Perform Byte access to RCC_CIR[14:8] bits to enable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS |= RCC_IT;
20000c6e:	4b0c      	ldr	r3, [pc, #48]	; (20000ca0 <RCC_ITConfig+0x4c>)
20000c70:	781b      	ldrb	r3, [r3, #0]
20000c72:	b2da      	uxtb	r2, r3
20000c74:	490a      	ldr	r1, [pc, #40]	; (20000ca0 <RCC_ITConfig+0x4c>)
20000c76:	1dfb      	adds	r3, r7, #7
20000c78:	781b      	ldrb	r3, [r3, #0]
20000c7a:	4313      	orrs	r3, r2
20000c7c:	b2db      	uxtb	r3, r3
20000c7e:	700b      	strb	r3, [r1, #0]
  else
  {
    /* Perform Byte access to RCC_CIR[14:8] bits to disable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS &= (uint8_t)~RCC_IT;
  }
}
20000c80:	e00a      	b.n	20000c98 <RCC_ITConfig+0x44>
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS &= (uint8_t)~RCC_IT;
20000c82:	4b07      	ldr	r3, [pc, #28]	; (20000ca0 <RCC_ITConfig+0x4c>)
20000c84:	781b      	ldrb	r3, [r3, #0]
20000c86:	b2db      	uxtb	r3, r3
20000c88:	1dfa      	adds	r2, r7, #7
20000c8a:	7812      	ldrb	r2, [r2, #0]
20000c8c:	43d2      	mvns	r2, r2
20000c8e:	b2d2      	uxtb	r2, r2
20000c90:	4903      	ldr	r1, [pc, #12]	; (20000ca0 <RCC_ITConfig+0x4c>)
20000c92:	4013      	ands	r3, r2
20000c94:	b2db      	uxtb	r3, r3
20000c96:	700b      	strb	r3, [r1, #0]
}
20000c98:	46c0      	nop			; (mov r8, r8)
20000c9a:	46bd      	mov	sp, r7
20000c9c:	b002      	add	sp, #8
20000c9e:	bd80      	pop	{r7, pc}
20000ca0:	4002380d 	andmi	r3, r2, sp, lsl #16

20000ca4 <RCC_GetFlagStatus>:
  *            @arg RCC_FLAG_WWDGRST: Window Watchdog reset
  *            @arg RCC_FLAG_LPWRRST: Low Power reset
  * @retval The new state of RCC_FLAG (SET or RESET).
  */
FlagStatus RCC_GetFlagStatus(uint8_t RCC_FLAG)
{
20000ca4:	b580      	push	{r7, lr}
20000ca6:	b086      	sub	sp, #24
20000ca8:	af00      	add	r7, sp, #0
20000caa:	0002      	movs	r2, r0
20000cac:	1dfb      	adds	r3, r7, #7
20000cae:	701a      	strb	r2, [r3, #0]
  uint32_t tmp = 0;
20000cb0:	2300      	movs	r3, #0
20000cb2:	60fb      	str	r3, [r7, #12]
  uint32_t statusreg = 0;
20000cb4:	2300      	movs	r3, #0
20000cb6:	617b      	str	r3, [r7, #20]
  FlagStatus bitstatus = RESET;
20000cb8:	2313      	movs	r3, #19
20000cba:	18fb      	adds	r3, r7, r3
20000cbc:	2200      	movs	r2, #0
20000cbe:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_FLAG(RCC_FLAG));

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
20000cc0:	1dfb      	adds	r3, r7, #7
20000cc2:	781b      	ldrb	r3, [r3, #0]
20000cc4:	095b      	lsrs	r3, r3, #5
20000cc6:	b2db      	uxtb	r3, r3
20000cc8:	60fb      	str	r3, [r7, #12]
  if (tmp == 1)               /* The flag to check is in CR register */
20000cca:	68fb      	ldr	r3, [r7, #12]
20000ccc:	2b01      	cmp	r3, #1
20000cce:	d103      	bne.n	20000cd8 <RCC_GetFlagStatus+0x34>
  {
    statusreg = RCC->CR;
20000cd0:	4b14      	ldr	r3, [pc, #80]	; (20000d24 <RCC_GetFlagStatus+0x80>)
20000cd2:	681b      	ldr	r3, [r3, #0]
20000cd4:	617b      	str	r3, [r7, #20]
20000cd6:	e009      	b.n	20000cec <RCC_GetFlagStatus+0x48>
  }
  else if (tmp == 2)          /* The flag to check is in BDCR register */
20000cd8:	68fb      	ldr	r3, [r7, #12]
20000cda:	2b02      	cmp	r3, #2
20000cdc:	d103      	bne.n	20000ce6 <RCC_GetFlagStatus+0x42>
  {
    statusreg = RCC->BDCR;
20000cde:	4b11      	ldr	r3, [pc, #68]	; (20000d24 <RCC_GetFlagStatus+0x80>)
20000ce0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
20000ce2:	617b      	str	r3, [r7, #20]
20000ce4:	e002      	b.n	20000cec <RCC_GetFlagStatus+0x48>
  }
  else                       /* The flag to check is in CSR register */
  {
    statusreg = RCC->CSR;
20000ce6:	4b0f      	ldr	r3, [pc, #60]	; (20000d24 <RCC_GetFlagStatus+0x80>)
20000ce8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
20000cea:	617b      	str	r3, [r7, #20]
  }

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_MASK;
20000cec:	1dfb      	adds	r3, r7, #7
20000cee:	781b      	ldrb	r3, [r3, #0]
20000cf0:	221f      	movs	r2, #31
20000cf2:	4013      	ands	r3, r2
20000cf4:	60fb      	str	r3, [r7, #12]
  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
20000cf6:	697a      	ldr	r2, [r7, #20]
20000cf8:	68fb      	ldr	r3, [r7, #12]
20000cfa:	40da      	lsrs	r2, r3
20000cfc:	0013      	movs	r3, r2
20000cfe:	2201      	movs	r2, #1
20000d00:	4013      	ands	r3, r2
20000d02:	d004      	beq.n	20000d0e <RCC_GetFlagStatus+0x6a>
  {
    bitstatus = SET;
20000d04:	2313      	movs	r3, #19
20000d06:	18fb      	adds	r3, r7, r3
20000d08:	2201      	movs	r2, #1
20000d0a:	701a      	strb	r2, [r3, #0]
20000d0c:	e003      	b.n	20000d16 <RCC_GetFlagStatus+0x72>
  }
  else
  {
    bitstatus = RESET;
20000d0e:	2313      	movs	r3, #19
20000d10:	18fb      	adds	r3, r7, r3
20000d12:	2200      	movs	r2, #0
20000d14:	701a      	strb	r2, [r3, #0]
  }
  /* Return the flag status */
  return bitstatus;
20000d16:	2313      	movs	r3, #19
20000d18:	18fb      	adds	r3, r7, r3
20000d1a:	781b      	ldrb	r3, [r3, #0]
}
20000d1c:	0018      	movs	r0, r3
20000d1e:	46bd      	mov	sp, r7
20000d20:	b006      	add	sp, #24
20000d22:	bd80      	pop	{r7, pc}
20000d24:	40023800 	andmi	r3, r2, r0, lsl #16

20000d28 <RCC_ClearFlag>:
  *         RCC_FLAG_IWDGRST, RCC_FLAG_WWDGRST, RCC_FLAG_LPWRRST
  * @param  None
  * @retval None
  */
void RCC_ClearFlag(void)
{
20000d28:	b580      	push	{r7, lr}
20000d2a:	af00      	add	r7, sp, #0
  /* Set RMVF bit to clear the reset flags */
  RCC->CSR |= RCC_CSR_RMVF;
20000d2c:	4b04      	ldr	r3, [pc, #16]	; (20000d40 <RCC_ClearFlag+0x18>)
20000d2e:	6f5a      	ldr	r2, [r3, #116]	; 0x74
20000d30:	4b03      	ldr	r3, [pc, #12]	; (20000d40 <RCC_ClearFlag+0x18>)
20000d32:	2180      	movs	r1, #128	; 0x80
20000d34:	0449      	lsls	r1, r1, #17
20000d36:	430a      	orrs	r2, r1
20000d38:	675a      	str	r2, [r3, #116]	; 0x74
}
20000d3a:	46c0      	nop			; (mov r8, r8)
20000d3c:	46bd      	mov	sp, r7
20000d3e:	bd80      	pop	{r7, pc}
20000d40:	40023800 	andmi	r3, r2, r0, lsl #16

20000d44 <RCC_GetITStatus>:
  *            @arg RCC_IT_PLLSAIRDY: PLLSAI clock ready interrupt (only for STM32F42xxx/43xxx/446xx/469xx/479xx devices)
  *            @arg RCC_IT_CSS: Clock Security System interrupt
  * @retval The new state of RCC_IT (SET or RESET).
  */
ITStatus RCC_GetITStatus(uint8_t RCC_IT)
{
20000d44:	b580      	push	{r7, lr}
20000d46:	b084      	sub	sp, #16
20000d48:	af00      	add	r7, sp, #0
20000d4a:	0002      	movs	r2, r0
20000d4c:	1dfb      	adds	r3, r7, #7
20000d4e:	701a      	strb	r2, [r3, #0]
  ITStatus bitstatus = RESET;
20000d50:	230f      	movs	r3, #15
20000d52:	18fb      	adds	r3, r7, r3
20000d54:	2200      	movs	r2, #0
20000d56:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_GET_IT(RCC_IT));

  /* Check the status of the specified RCC interrupt */
  if ((RCC->CIR & RCC_IT) != (uint32_t)RESET)
20000d58:	4b0a      	ldr	r3, [pc, #40]	; (20000d84 <RCC_GetITStatus+0x40>)
20000d5a:	68db      	ldr	r3, [r3, #12]
20000d5c:	1dfa      	adds	r2, r7, #7
20000d5e:	7812      	ldrb	r2, [r2, #0]
20000d60:	4013      	ands	r3, r2
20000d62:	d004      	beq.n	20000d6e <RCC_GetITStatus+0x2a>
  {
    bitstatus = SET;
20000d64:	230f      	movs	r3, #15
20000d66:	18fb      	adds	r3, r7, r3
20000d68:	2201      	movs	r2, #1
20000d6a:	701a      	strb	r2, [r3, #0]
20000d6c:	e003      	b.n	20000d76 <RCC_GetITStatus+0x32>
  }
  else
  {
    bitstatus = RESET;
20000d6e:	230f      	movs	r3, #15
20000d70:	18fb      	adds	r3, r7, r3
20000d72:	2200      	movs	r2, #0
20000d74:	701a      	strb	r2, [r3, #0]
  }
  /* Return the RCC_IT status */
  return  bitstatus;
20000d76:	230f      	movs	r3, #15
20000d78:	18fb      	adds	r3, r7, r3
20000d7a:	781b      	ldrb	r3, [r3, #0]
}
20000d7c:	0018      	movs	r0, r3
20000d7e:	46bd      	mov	sp, r7
20000d80:	b004      	add	sp, #16
20000d82:	bd80      	pop	{r7, pc}
20000d84:	40023800 	andmi	r3, r2, r0, lsl #16

20000d88 <RCC_ClearITPendingBit>:
  *            @arg RCC_IT_PLLSAIRDY: PLLSAI ready interrupt (only for STM32F42xxx/43xxx/446xx/469xx/479xx devices) 
  *            @arg RCC_IT_CSS: Clock Security System interrupt
  * @retval None
  */
void RCC_ClearITPendingBit(uint8_t RCC_IT)
{
20000d88:	b580      	push	{r7, lr}
20000d8a:	b082      	sub	sp, #8
20000d8c:	af00      	add	r7, sp, #0
20000d8e:	0002      	movs	r2, r0
20000d90:	1dfb      	adds	r3, r7, #7
20000d92:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_CLEAR_IT(RCC_IT));

  /* Perform Byte access to RCC_CIR[23:16] bits to clear the selected interrupt
     pending bits */
  *(__IO uint8_t *) CIR_BYTE3_ADDRESS = RCC_IT;
20000d94:	4a03      	ldr	r2, [pc, #12]	; (20000da4 <RCC_ClearITPendingBit+0x1c>)
20000d96:	1dfb      	adds	r3, r7, #7
20000d98:	781b      	ldrb	r3, [r3, #0]
20000d9a:	7013      	strb	r3, [r2, #0]
}
20000d9c:	46c0      	nop			; (mov r8, r8)
20000d9e:	46bd      	mov	sp, r7
20000da0:	b002      	add	sp, #8
20000da2:	bd80      	pop	{r7, pc}
20000da4:	4002380e 	andmi	r3, r2, lr, lsl #16

20000da8 <init_GPIO_Ports>:
//======================================GPIO=========================================================
void init_GPIO_Ports()
{
20000da8:	b580      	push	{r7, lr}
20000daa:	b082      	sub	sp, #8
20000dac:	af00      	add	r7, sp, #0
	/*  Function used to set the GPIO configuration to the default reset state ****/
	GPIO_InitTypeDef init;
	//GPIO E UTPORTAR
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOE, ENABLE);
20000dae:	2101      	movs	r1, #1
20000db0:	2010      	movs	r0, #16
20000db2:	f7ff fd51 	bl	20000858 <RCC_AHB1PeriphClockCmd>
	GPIO_StructInit(&init);
20000db6:	003b      	movs	r3, r7
20000db8:	0018      	movs	r0, r3
20000dba:	f000 fe57 	bl	20001a6c <GPIO_StructInit>
	init.GPIO_Pin = GPIO_Pin_1 | GPIO_Pin_3 | GPIO_Pin_5 | GPIO_Pin_7 | GPIO_Pin_9 | GPIO_Pin_11 | GPIO_Pin_13 | GPIO_Pin_15;
20000dbe:	003b      	movs	r3, r7
20000dc0:	4a37      	ldr	r2, [pc, #220]	; (20000ea0 <init_GPIO_Ports+0xf8>)
20000dc2:	601a      	str	r2, [r3, #0]
	init.GPIO_Mode = GPIO_Mode_OUT;
20000dc4:	003b      	movs	r3, r7
20000dc6:	2201      	movs	r2, #1
20000dc8:	711a      	strb	r2, [r3, #4]
	init.GPIO_OType = GPIO_OType_PP;
20000dca:	003b      	movs	r3, r7
20000dcc:	2200      	movs	r2, #0
20000dce:	719a      	strb	r2, [r3, #6]
	init.GPIO_PuPd = GPIO_PuPd_NOPULL;
20000dd0:	003b      	movs	r3, r7
20000dd2:	2200      	movs	r2, #0
20000dd4:	71da      	strb	r2, [r3, #7]
	GPIO_Init(GPIOE, &init);
20000dd6:	003b      	movs	r3, r7
20000dd8:	4a32      	ldr	r2, [pc, #200]	; (20000ea4 <init_GPIO_Ports+0xfc>)
20000dda:	0019      	movs	r1, r3
20000ddc:	0010      	movs	r0, r2
20000dde:	f000 fdb9 	bl	20001954 <GPIO_Init>
	
	//konfigurerar inport GPIO E
	GPIO_StructInit(&init);
20000de2:	003b      	movs	r3, r7
20000de4:	0018      	movs	r0, r3
20000de6:	f000 fe41 	bl	20001a6c <GPIO_StructInit>
	init.GPIO_Pin = GPIO_Pin_0 | GPIO_Pin_2 | GPIO_Pin_4 | GPIO_Pin_6 | GPIO_Pin_8 | GPIO_Pin_10 | GPIO_Pin_12 |GPIO_Pin_14;
20000dea:	003b      	movs	r3, r7
20000dec:	4a2e      	ldr	r2, [pc, #184]	; (20000ea8 <init_GPIO_Ports+0x100>)
20000dee:	601a      	str	r2, [r3, #0]
	init.GPIO_Mode = GPIO_Mode_IN;
20000df0:	003b      	movs	r3, r7
20000df2:	2200      	movs	r2, #0
20000df4:	711a      	strb	r2, [r3, #4]
	init.GPIO_PuPd = GPIO_PuPd_UP;
20000df6:	003b      	movs	r3, r7
20000df8:	2201      	movs	r2, #1
20000dfa:	71da      	strb	r2, [r3, #7]
	GPIO_Init(GPIOE, &init);
20000dfc:	003b      	movs	r3, r7
20000dfe:	4a29      	ldr	r2, [pc, #164]	; (20000ea4 <init_GPIO_Ports+0xfc>)
20000e00:	0019      	movs	r1, r3
20000e02:	0010      	movs	r0, r2
20000e04:	f000 fda6 	bl	20001954 <GPIO_Init>

    //GPIOB UTPORTAR
    RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE);
20000e08:	2101      	movs	r1, #1
20000e0a:	2002      	movs	r0, #2
20000e0c:	f7ff fd24 	bl	20000858 <RCC_AHB1PeriphClockCmd>
	GPIO_StructInit(&init);
20000e10:	003b      	movs	r3, r7
20000e12:	0018      	movs	r0, r3
20000e14:	f000 fe2a 	bl	20001a6c <GPIO_StructInit>
	init.GPIO_Pin = GPIO_Pin_1 | GPIO_Pin_3 | GPIO_Pin_5 | GPIO_Pin_7 | GPIO_Pin_9 | GPIO_Pin_11 | GPIO_Pin_13 | GPIO_Pin_15;
20000e18:	003b      	movs	r3, r7
20000e1a:	4a21      	ldr	r2, [pc, #132]	; (20000ea0 <init_GPIO_Ports+0xf8>)
20000e1c:	601a      	str	r2, [r3, #0]
	init.GPIO_Mode = GPIO_Mode_OUT;
20000e1e:	003b      	movs	r3, r7
20000e20:	2201      	movs	r2, #1
20000e22:	711a      	strb	r2, [r3, #4]
	init.GPIO_OType = GPIO_OType_PP;
20000e24:	003b      	movs	r3, r7
20000e26:	2200      	movs	r2, #0
20000e28:	719a      	strb	r2, [r3, #6]
	init.GPIO_PuPd = GPIO_PuPd_NOPULL;
20000e2a:	003b      	movs	r3, r7
20000e2c:	2200      	movs	r2, #0
20000e2e:	71da      	strb	r2, [r3, #7]
	GPIO_Init(GPIOB, &init);
20000e30:	003b      	movs	r3, r7
20000e32:	4a1e      	ldr	r2, [pc, #120]	; (20000eac <init_GPIO_Ports+0x104>)
20000e34:	0019      	movs	r1, r3
20000e36:	0010      	movs	r0, r2
20000e38:	f000 fd8c 	bl	20001954 <GPIO_Init>
	
	//konfigurerar inport GPIO B
	GPIO_StructInit(&init);
20000e3c:	003b      	movs	r3, r7
20000e3e:	0018      	movs	r0, r3
20000e40:	f000 fe14 	bl	20001a6c <GPIO_StructInit>
	init.GPIO_Pin = GPIO_Pin_0 | GPIO_Pin_2 | GPIO_Pin_4 | GPIO_Pin_6 | GPIO_Pin_8 | GPIO_Pin_10 | GPIO_Pin_12 |GPIO_Pin_14;
20000e44:	003b      	movs	r3, r7
20000e46:	4a18      	ldr	r2, [pc, #96]	; (20000ea8 <init_GPIO_Ports+0x100>)
20000e48:	601a      	str	r2, [r3, #0]
	init.GPIO_Mode = GPIO_Mode_IN;
20000e4a:	003b      	movs	r3, r7
20000e4c:	2200      	movs	r2, #0
20000e4e:	711a      	strb	r2, [r3, #4]
	init.GPIO_PuPd = GPIO_PuPd_UP;
20000e50:	003b      	movs	r3, r7
20000e52:	2201      	movs	r2, #1
20000e54:	71da      	strb	r2, [r3, #7]
	GPIO_Init(GPIOB, &init);
20000e56:	003b      	movs	r3, r7
20000e58:	4a14      	ldr	r2, [pc, #80]	; (20000eac <init_GPIO_Ports+0x104>)
20000e5a:	0019      	movs	r1, r3
20000e5c:	0010      	movs	r0, r2
20000e5e:	f000 fd79 	bl	20001954 <GPIO_Init>


	//GPIO A UTPORTAR
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOE, ENABLE);
20000e62:	2101      	movs	r1, #1
20000e64:	2010      	movs	r0, #16
20000e66:	f7ff fcf7 	bl	20000858 <RCC_AHB1PeriphClockCmd>
	GPIO_StructInit(&init);
20000e6a:	003b      	movs	r3, r7
20000e6c:	0018      	movs	r0, r3
20000e6e:	f000 fdfd 	bl	20001a6c <GPIO_StructInit>
	init.GPIO_Pin = GPIO_Pin_2;
20000e72:	003b      	movs	r3, r7
20000e74:	2204      	movs	r2, #4
20000e76:	601a      	str	r2, [r3, #0]
	init.GPIO_Mode = GPIO_Mode_OUT;
20000e78:	003b      	movs	r3, r7
20000e7a:	2201      	movs	r2, #1
20000e7c:	711a      	strb	r2, [r3, #4]
	init.GPIO_OType = GPIO_OType_PP;
20000e7e:	003b      	movs	r3, r7
20000e80:	2200      	movs	r2, #0
20000e82:	719a      	strb	r2, [r3, #6]
	init.GPIO_PuPd = GPIO_PuPd_NOPULL;
20000e84:	003b      	movs	r3, r7
20000e86:	2200      	movs	r2, #0
20000e88:	71da      	strb	r2, [r3, #7]
	GPIO_Init(GPIOA, &init);
20000e8a:	003b      	movs	r3, r7
20000e8c:	4a08      	ldr	r2, [pc, #32]	; (20000eb0 <init_GPIO_Ports+0x108>)
20000e8e:	0019      	movs	r1, r3
20000e90:	0010      	movs	r0, r2
20000e92:	f000 fd5f 	bl	20001954 <GPIO_Init>
20000e96:	46c0      	nop			; (mov r8, r8)
20000e98:	46bd      	mov	sp, r7
20000e9a:	b002      	add	sp, #8
20000e9c:	bd80      	pop	{r7, pc}
20000e9e:	46c0      	nop			; (mov r8, r8)
20000ea0:	0000aaaa 	andeq	sl, r0, sl, lsr #21
20000ea4:	40021000 	andmi	r1, r2, r0
20000ea8:	00005555 	andeq	r5, r0, r5, asr r5
20000eac:	40020400 	andmi	r0, r2, r0, lsl #8
20000eb0:	40020000 	andmi	r0, r2, r0

20000eb4 <SysTick_Handler>:
GPIO_TypeDef* GPIO_Ports[] = {GPIOE, GPIOB};

// ========================================= SYSTICK ================================================
volatile uint32_t msTicks = 0; /* Variable to store millisecond ticks */
void SysTick_Handler(void)
{ /* SysTick interrupt Handler. */
20000eb4:	b580      	push	{r7, lr}
20000eb6:	af00      	add	r7, sp, #0
	msTicks++;
20000eb8:	4b03      	ldr	r3, [pc, #12]	; (20000ec8 <SysTick_Handler+0x14>)
20000eba:	681b      	ldr	r3, [r3, #0]
20000ebc:	1c5a      	adds	r2, r3, #1
20000ebe:	4b02      	ldr	r3, [pc, #8]	; (20000ec8 <SysTick_Handler+0x14>)
20000ec0:	601a      	str	r2, [r3, #0]
}
20000ec2:	46c0      	nop			; (mov r8, r8)
20000ec4:	46bd      	mov	sp, r7
20000ec6:	bd80      	pop	{r7, pc}
20000ec8:	20002b1c 	andcs	r2, r0, ip, lsl fp

20000ecc <systick_Init>:
void systick_Init(void)
{
20000ecc:	b580      	push	{r7, lr}
20000ece:	b082      	sub	sp, #8
20000ed0:	af00      	add	r7, sp, #0
	// Initiera SysTick.
	*((void (**)(void))0x2001C03C) = SysTick_Handler;
20000ed2:	4b06      	ldr	r3, [pc, #24]	; (20000eec <systick_Init+0x20>)
20000ed4:	4a06      	ldr	r2, [pc, #24]	; (20000ef0 <systick_Init+0x24>)
20000ed6:	601a      	str	r2, [r3, #0]
	uint32_t returnCode;
	returnCode = SysTick_Config(168000000 / 1000); // Genererar ett SysTick-avbrott varje ms.
20000ed8:	4b06      	ldr	r3, [pc, #24]	; (20000ef4 <systick_Init+0x28>)
20000eda:	0018      	movs	r0, r3
20000edc:	f7ff f8c8 	bl	20000070 <SysTick_Config>
20000ee0:	0003      	movs	r3, r0
20000ee2:	607b      	str	r3, [r7, #4]

	if (returnCode != 0)
	{   // Om inte SysTick_Config lyckas...
		//typ reboot? bootloops är alltid kul
	}
}
20000ee4:	46c0      	nop			; (mov r8, r8)
20000ee6:	46bd      	mov	sp, r7
20000ee8:	b002      	add	sp, #8
20000eea:	bd80      	pop	{r7, pc}
20000eec:	2001c03c 	andcs	ip, r1, ip, lsr r0
20000ef0:	20000eb5 			; <UNDEFINED> instruction: 0x20000eb5
20000ef4:	00029040 	andeq	r9, r2, r0, asr #32

20000ef8 <main>:

void main(void)
{
20000ef8:	b5f0      	push	{r4, r5, r6, r7, lr}
20000efa:	46c6      	mov	lr, r8
20000efc:	b500      	push	{lr}
20000efe:	4cba      	ldr	r4, [pc, #744]	; (200011e8 <main+0x2f0>)
20000f00:	44a5      	add	sp, r4
20000f02:	af00      	add	r7, sp, #0
	init_GPIO_Ports();
20000f04:	f7ff ff50 	bl	20000da8 <init_GPIO_Ports>
	systick_Init();
20000f08:	f7ff ffe0 	bl	20000ecc <systick_Init>
	while(msTicks < 2000);
20000f0c:	46c0      	nop			; (mov r8, r8)
20000f0e:	4bb7      	ldr	r3, [pc, #732]	; (200011ec <main+0x2f4>)
20000f10:	681b      	ldr	r3, [r3, #0]
20000f12:	4ab7      	ldr	r2, [pc, #732]	; (200011f0 <main+0x2f8>)
20000f14:	4293      	cmp	r3, r2
20000f16:	d9fa      	bls.n	20000f0e <main+0x16>

	door door1, door2, door3, door4, door5, door6, door8, door9 ,door10, door11, door12, door13,door14,door15,door16;
	door all_doors[16] = {door1, door2, door3, door4, door5, door6, door8, door9 ,door10, door11, door12, door13,door14,door15,door16};
20000f18:	4bb6      	ldr	r3, [pc, #728]	; (200011f4 <main+0x2fc>)
20000f1a:	2281      	movs	r2, #129	; 0x81
20000f1c:	00d2      	lsls	r2, r2, #3
20000f1e:	4694      	mov	ip, r2
20000f20:	2218      	movs	r2, #24
20000f22:	4690      	mov	r8, r2
20000f24:	44b8      	add	r8, r7
20000f26:	44c4      	add	ip, r8
20000f28:	4463      	add	r3, ip
20000f2a:	0018      	movs	r0, r3
20000f2c:	2380      	movs	r3, #128	; 0x80
20000f2e:	009b      	lsls	r3, r3, #2
20000f30:	001a      	movs	r2, r3
20000f32:	2100      	movs	r1, #0
20000f34:	f001 fde9 	bl	20002b0a <memset>
20000f38:	4bae      	ldr	r3, [pc, #696]	; (200011f4 <main+0x2fc>)
20000f3a:	2681      	movs	r6, #129	; 0x81
20000f3c:	00f6      	lsls	r6, r6, #3
20000f3e:	2218      	movs	r2, #24
20000f40:	18b9      	adds	r1, r7, r2
20000f42:	198a      	adds	r2, r1, r6
20000f44:	18d2      	adds	r2, r2, r3
20000f46:	23f0      	movs	r3, #240	; 0xf0
20000f48:	009b      	lsls	r3, r3, #2
20000f4a:	2118      	movs	r1, #24
20000f4c:	468c      	mov	ip, r1
20000f4e:	44bc      	add	ip, r7
20000f50:	4463      	add	r3, ip
20000f52:	0010      	movs	r0, r2
20000f54:	0019      	movs	r1, r3
20000f56:	2320      	movs	r3, #32
20000f58:	001a      	movs	r2, r3
20000f5a:	f001 fdcd 	bl	20002af8 <memcpy>
20000f5e:	4ba5      	ldr	r3, [pc, #660]	; (200011f4 <main+0x2fc>)
20000f60:	2281      	movs	r2, #129	; 0x81
20000f62:	00d2      	lsls	r2, r2, #3
20000f64:	4694      	mov	ip, r2
20000f66:	2118      	movs	r1, #24
20000f68:	4688      	mov	r8, r1
20000f6a:	44b8      	add	r8, r7
20000f6c:	44c4      	add	ip, r8
20000f6e:	4463      	add	r3, ip
20000f70:	22e8      	movs	r2, #232	; 0xe8
20000f72:	0092      	lsls	r2, r2, #2
20000f74:	2118      	movs	r1, #24
20000f76:	468c      	mov	ip, r1
20000f78:	44bc      	add	ip, r7
20000f7a:	4462      	add	r2, ip
20000f7c:	3320      	adds	r3, #32
20000f7e:	0011      	movs	r1, r2
20000f80:	2220      	movs	r2, #32
20000f82:	0018      	movs	r0, r3
20000f84:	f001 fdb8 	bl	20002af8 <memcpy>
20000f88:	4b9a      	ldr	r3, [pc, #616]	; (200011f4 <main+0x2fc>)
20000f8a:	2281      	movs	r2, #129	; 0x81
20000f8c:	00d2      	lsls	r2, r2, #3
20000f8e:	4694      	mov	ip, r2
20000f90:	2118      	movs	r1, #24
20000f92:	4688      	mov	r8, r1
20000f94:	44b8      	add	r8, r7
20000f96:	44c4      	add	ip, r8
20000f98:	4463      	add	r3, ip
20000f9a:	22e0      	movs	r2, #224	; 0xe0
20000f9c:	0092      	lsls	r2, r2, #2
20000f9e:	2118      	movs	r1, #24
20000fa0:	468c      	mov	ip, r1
20000fa2:	44bc      	add	ip, r7
20000fa4:	4462      	add	r2, ip
20000fa6:	3340      	adds	r3, #64	; 0x40
20000fa8:	0011      	movs	r1, r2
20000faa:	2220      	movs	r2, #32
20000fac:	0018      	movs	r0, r3
20000fae:	f001 fda3 	bl	20002af8 <memcpy>
20000fb2:	4b90      	ldr	r3, [pc, #576]	; (200011f4 <main+0x2fc>)
20000fb4:	2281      	movs	r2, #129	; 0x81
20000fb6:	00d2      	lsls	r2, r2, #3
20000fb8:	4694      	mov	ip, r2
20000fba:	2118      	movs	r1, #24
20000fbc:	4688      	mov	r8, r1
20000fbe:	44b8      	add	r8, r7
20000fc0:	44c4      	add	ip, r8
20000fc2:	4463      	add	r3, ip
20000fc4:	22d8      	movs	r2, #216	; 0xd8
20000fc6:	0092      	lsls	r2, r2, #2
20000fc8:	2118      	movs	r1, #24
20000fca:	468c      	mov	ip, r1
20000fcc:	44bc      	add	ip, r7
20000fce:	4462      	add	r2, ip
20000fd0:	3360      	adds	r3, #96	; 0x60
20000fd2:	0011      	movs	r1, r2
20000fd4:	2220      	movs	r2, #32
20000fd6:	0018      	movs	r0, r3
20000fd8:	f001 fd8e 	bl	20002af8 <memcpy>
20000fdc:	4b85      	ldr	r3, [pc, #532]	; (200011f4 <main+0x2fc>)
20000fde:	2281      	movs	r2, #129	; 0x81
20000fe0:	00d2      	lsls	r2, r2, #3
20000fe2:	4694      	mov	ip, r2
20000fe4:	2118      	movs	r1, #24
20000fe6:	4688      	mov	r8, r1
20000fe8:	44b8      	add	r8, r7
20000fea:	44c4      	add	ip, r8
20000fec:	4463      	add	r3, ip
20000fee:	22d0      	movs	r2, #208	; 0xd0
20000ff0:	0092      	lsls	r2, r2, #2
20000ff2:	2118      	movs	r1, #24
20000ff4:	468c      	mov	ip, r1
20000ff6:	44bc      	add	ip, r7
20000ff8:	4462      	add	r2, ip
20000ffa:	3380      	adds	r3, #128	; 0x80
20000ffc:	0011      	movs	r1, r2
20000ffe:	2220      	movs	r2, #32
20001000:	0018      	movs	r0, r3
20001002:	f001 fd79 	bl	20002af8 <memcpy>
20001006:	4b7b      	ldr	r3, [pc, #492]	; (200011f4 <main+0x2fc>)
20001008:	2281      	movs	r2, #129	; 0x81
2000100a:	00d2      	lsls	r2, r2, #3
2000100c:	4694      	mov	ip, r2
2000100e:	2118      	movs	r1, #24
20001010:	4688      	mov	r8, r1
20001012:	44b8      	add	r8, r7
20001014:	44c4      	add	ip, r8
20001016:	4463      	add	r3, ip
20001018:	22a0      	movs	r2, #160	; 0xa0
2000101a:	21c8      	movs	r1, #200	; 0xc8
2000101c:	0089      	lsls	r1, r1, #2
2000101e:	2018      	movs	r0, #24
20001020:	4684      	mov	ip, r0
20001022:	44bc      	add	ip, r7
20001024:	4461      	add	r1, ip
20001026:	189b      	adds	r3, r3, r2
20001028:	2220      	movs	r2, #32
2000102a:	0018      	movs	r0, r3
2000102c:	f001 fd64 	bl	20002af8 <memcpy>
20001030:	4b70      	ldr	r3, [pc, #448]	; (200011f4 <main+0x2fc>)
20001032:	2281      	movs	r2, #129	; 0x81
20001034:	00d2      	lsls	r2, r2, #3
20001036:	4694      	mov	ip, r2
20001038:	2118      	movs	r1, #24
2000103a:	4688      	mov	r8, r1
2000103c:	44b8      	add	r8, r7
2000103e:	44c4      	add	ip, r8
20001040:	4463      	add	r3, ip
20001042:	22c0      	movs	r2, #192	; 0xc0
20001044:	496c      	ldr	r1, [pc, #432]	; (200011f8 <main+0x300>)
20001046:	2081      	movs	r0, #129	; 0x81
20001048:	00c0      	lsls	r0, r0, #3
2000104a:	4684      	mov	ip, r0
2000104c:	2018      	movs	r0, #24
2000104e:	4680      	mov	r8, r0
20001050:	44b8      	add	r8, r7
20001052:	44c4      	add	ip, r8
20001054:	4461      	add	r1, ip
20001056:	189b      	adds	r3, r3, r2
20001058:	2220      	movs	r2, #32
2000105a:	0018      	movs	r0, r3
2000105c:	f001 fd4c 	bl	20002af8 <memcpy>
20001060:	4b64      	ldr	r3, [pc, #400]	; (200011f4 <main+0x2fc>)
20001062:	2281      	movs	r2, #129	; 0x81
20001064:	00d2      	lsls	r2, r2, #3
20001066:	4694      	mov	ip, r2
20001068:	2118      	movs	r1, #24
2000106a:	4688      	mov	r8, r1
2000106c:	44b8      	add	r8, r7
2000106e:	44c4      	add	ip, r8
20001070:	4463      	add	r3, ip
20001072:	22e0      	movs	r2, #224	; 0xe0
20001074:	4961      	ldr	r1, [pc, #388]	; (200011fc <main+0x304>)
20001076:	2081      	movs	r0, #129	; 0x81
20001078:	00c0      	lsls	r0, r0, #3
2000107a:	4684      	mov	ip, r0
2000107c:	2018      	movs	r0, #24
2000107e:	4680      	mov	r8, r0
20001080:	44b8      	add	r8, r7
20001082:	44c4      	add	ip, r8
20001084:	4461      	add	r1, ip
20001086:	189b      	adds	r3, r3, r2
20001088:	2220      	movs	r2, #32
2000108a:	0018      	movs	r0, r3
2000108c:	f001 fd34 	bl	20002af8 <memcpy>
20001090:	4b58      	ldr	r3, [pc, #352]	; (200011f4 <main+0x2fc>)
20001092:	2218      	movs	r2, #24
20001094:	18b9      	adds	r1, r7, r2
20001096:	198a      	adds	r2, r1, r6
20001098:	18d2      	adds	r2, r2, r3
2000109a:	2380      	movs	r3, #128	; 0x80
2000109c:	005b      	lsls	r3, r3, #1
2000109e:	4958      	ldr	r1, [pc, #352]	; (20001200 <main+0x308>)
200010a0:	2081      	movs	r0, #129	; 0x81
200010a2:	00c0      	lsls	r0, r0, #3
200010a4:	4684      	mov	ip, r0
200010a6:	2018      	movs	r0, #24
200010a8:	4680      	mov	r8, r0
200010aa:	44b8      	add	r8, r7
200010ac:	44c4      	add	ip, r8
200010ae:	4461      	add	r1, ip
200010b0:	18d3      	adds	r3, r2, r3
200010b2:	2220      	movs	r2, #32
200010b4:	0018      	movs	r0, r3
200010b6:	f001 fd1f 	bl	20002af8 <memcpy>
200010ba:	4b4e      	ldr	r3, [pc, #312]	; (200011f4 <main+0x2fc>)
200010bc:	2218      	movs	r2, #24
200010be:	18b9      	adds	r1, r7, r2
200010c0:	198a      	adds	r2, r1, r6
200010c2:	18d2      	adds	r2, r2, r3
200010c4:	2390      	movs	r3, #144	; 0x90
200010c6:	005b      	lsls	r3, r3, #1
200010c8:	494e      	ldr	r1, [pc, #312]	; (20001204 <main+0x30c>)
200010ca:	2081      	movs	r0, #129	; 0x81
200010cc:	00c0      	lsls	r0, r0, #3
200010ce:	4684      	mov	ip, r0
200010d0:	2018      	movs	r0, #24
200010d2:	4680      	mov	r8, r0
200010d4:	44b8      	add	r8, r7
200010d6:	44c4      	add	ip, r8
200010d8:	4461      	add	r1, ip
200010da:	18d3      	adds	r3, r2, r3
200010dc:	2220      	movs	r2, #32
200010de:	0018      	movs	r0, r3
200010e0:	f001 fd0a 	bl	20002af8 <memcpy>
200010e4:	4b43      	ldr	r3, [pc, #268]	; (200011f4 <main+0x2fc>)
200010e6:	2218      	movs	r2, #24
200010e8:	18b9      	adds	r1, r7, r2
200010ea:	198a      	adds	r2, r1, r6
200010ec:	18d2      	adds	r2, r2, r3
200010ee:	23a0      	movs	r3, #160	; 0xa0
200010f0:	005b      	lsls	r3, r3, #1
200010f2:	4945      	ldr	r1, [pc, #276]	; (20001208 <main+0x310>)
200010f4:	2081      	movs	r0, #129	; 0x81
200010f6:	00c0      	lsls	r0, r0, #3
200010f8:	4684      	mov	ip, r0
200010fa:	2018      	movs	r0, #24
200010fc:	4680      	mov	r8, r0
200010fe:	44b8      	add	r8, r7
20001100:	44c4      	add	ip, r8
20001102:	4461      	add	r1, ip
20001104:	18d3      	adds	r3, r2, r3
20001106:	2220      	movs	r2, #32
20001108:	0018      	movs	r0, r3
2000110a:	f001 fcf5 	bl	20002af8 <memcpy>
2000110e:	4b39      	ldr	r3, [pc, #228]	; (200011f4 <main+0x2fc>)
20001110:	2218      	movs	r2, #24
20001112:	18b9      	adds	r1, r7, r2
20001114:	198a      	adds	r2, r1, r6
20001116:	18d2      	adds	r2, r2, r3
20001118:	23b0      	movs	r3, #176	; 0xb0
2000111a:	005b      	lsls	r3, r3, #1
2000111c:	493b      	ldr	r1, [pc, #236]	; (2000120c <main+0x314>)
2000111e:	2081      	movs	r0, #129	; 0x81
20001120:	00c0      	lsls	r0, r0, #3
20001122:	4684      	mov	ip, r0
20001124:	2018      	movs	r0, #24
20001126:	4680      	mov	r8, r0
20001128:	44b8      	add	r8, r7
2000112a:	44c4      	add	ip, r8
2000112c:	4461      	add	r1, ip
2000112e:	18d3      	adds	r3, r2, r3
20001130:	2220      	movs	r2, #32
20001132:	0018      	movs	r0, r3
20001134:	f001 fce0 	bl	20002af8 <memcpy>
20001138:	4b2e      	ldr	r3, [pc, #184]	; (200011f4 <main+0x2fc>)
2000113a:	2218      	movs	r2, #24
2000113c:	18b9      	adds	r1, r7, r2
2000113e:	198a      	adds	r2, r1, r6
20001140:	18d2      	adds	r2, r2, r3
20001142:	23c0      	movs	r3, #192	; 0xc0
20001144:	005b      	lsls	r3, r3, #1
20001146:	4932      	ldr	r1, [pc, #200]	; (20001210 <main+0x318>)
20001148:	2081      	movs	r0, #129	; 0x81
2000114a:	00c0      	lsls	r0, r0, #3
2000114c:	4684      	mov	ip, r0
2000114e:	2018      	movs	r0, #24
20001150:	4680      	mov	r8, r0
20001152:	44b8      	add	r8, r7
20001154:	44c4      	add	ip, r8
20001156:	4461      	add	r1, ip
20001158:	18d3      	adds	r3, r2, r3
2000115a:	2220      	movs	r2, #32
2000115c:	0018      	movs	r0, r3
2000115e:	f001 fccb 	bl	20002af8 <memcpy>
20001162:	4b24      	ldr	r3, [pc, #144]	; (200011f4 <main+0x2fc>)
20001164:	2218      	movs	r2, #24
20001166:	18b9      	adds	r1, r7, r2
20001168:	198a      	adds	r2, r1, r6
2000116a:	18d2      	adds	r2, r2, r3
2000116c:	23d0      	movs	r3, #208	; 0xd0
2000116e:	005b      	lsls	r3, r3, #1
20001170:	4928      	ldr	r1, [pc, #160]	; (20001214 <main+0x31c>)
20001172:	2081      	movs	r0, #129	; 0x81
20001174:	00c0      	lsls	r0, r0, #3
20001176:	4684      	mov	ip, r0
20001178:	2018      	movs	r0, #24
2000117a:	4680      	mov	r8, r0
2000117c:	44b8      	add	r8, r7
2000117e:	44c4      	add	ip, r8
20001180:	4461      	add	r1, ip
20001182:	18d3      	adds	r3, r2, r3
20001184:	2220      	movs	r2, #32
20001186:	0018      	movs	r0, r3
20001188:	f001 fcb6 	bl	20002af8 <memcpy>
2000118c:	4b19      	ldr	r3, [pc, #100]	; (200011f4 <main+0x2fc>)
2000118e:	2218      	movs	r2, #24
20001190:	18ba      	adds	r2, r7, r2
20001192:	1992      	adds	r2, r2, r6
20001194:	18d2      	adds	r2, r2, r3
20001196:	23e0      	movs	r3, #224	; 0xe0
20001198:	005b      	lsls	r3, r3, #1
2000119a:	491f      	ldr	r1, [pc, #124]	; (20001218 <main+0x320>)
2000119c:	2081      	movs	r0, #129	; 0x81
2000119e:	00c0      	lsls	r0, r0, #3
200011a0:	4684      	mov	ip, r0
200011a2:	2018      	movs	r0, #24
200011a4:	4680      	mov	r8, r0
200011a6:	44b8      	add	r8, r7
200011a8:	44c4      	add	ip, r8
200011aa:	4461      	add	r1, ip
200011ac:	18d3      	adds	r3, r2, r3
200011ae:	2220      	movs	r2, #32
200011b0:	0018      	movs	r0, r3
200011b2:	f001 fca1 	bl	20002af8 <memcpy>

	int amountOfActiveDoors = 0;
200011b6:	2300      	movs	r3, #0
200011b8:	22ff      	movs	r2, #255	; 0xff
200011ba:	0092      	lsls	r2, r2, #2
200011bc:	2118      	movs	r1, #24
200011be:	468c      	mov	ip, r1
200011c0:	44bc      	add	ip, r7
200011c2:	4462      	add	r2, ip
200011c4:	6013      	str	r3, [r2, #0]
	for (int j = 0; j < (sizeof(GPIO_Ports) /sizeof(GPIO_TypeDef *)); j++)
200011c6:	2300      	movs	r3, #0
200011c8:	2280      	movs	r2, #128	; 0x80
200011ca:	00d2      	lsls	r2, r2, #3
200011cc:	2118      	movs	r1, #24
200011ce:	468c      	mov	ip, r1
200011d0:	44bc      	add	ip, r7
200011d2:	4462      	add	r2, ip
200011d4:	6013      	str	r3, [r2, #0]
200011d6:	e066      	b.n	200012a6 <main+0x3ae>
	{
		for (int i = 0; i < sizeof(GPIO_Pins) / sizeof(uint16_t); i = i + 2)
200011d8:	2300      	movs	r3, #0
200011da:	4a10      	ldr	r2, [pc, #64]	; (2000121c <main+0x324>)
200011dc:	2118      	movs	r1, #24
200011de:	468c      	mov	ip, r1
200011e0:	44bc      	add	ip, r7
200011e2:	4462      	add	r2, ip
200011e4:	6013      	str	r3, [r2, #0]
200011e6:	e04a      	b.n	2000127e <main+0x386>
200011e8:	fffffbe0 			; <UNDEFINED> instruction: 0xfffffbe0
200011ec:	20002b1c 	andcs	r2, r0, ip, lsl fp
200011f0:	000007cf 	andeq	r0, r0, pc, asr #15
200011f4:	fffffbf8 			; <UNDEFINED> instruction: 0xfffffbf8
200011f8:	fffffef8 			; <UNDEFINED> instruction: 0xfffffef8
200011fc:	fffffed8 			; <UNDEFINED> instruction: 0xfffffed8
20001200:	fffffeb8 			; <UNDEFINED> instruction: 0xfffffeb8
20001204:	fffffe98 			; <UNDEFINED> instruction: 0xfffffe98
20001208:	fffffe78 			; <UNDEFINED> instruction: 0xfffffe78
2000120c:	fffffe58 			; <UNDEFINED> instruction: 0xfffffe58
20001210:	fffffe38 			; <UNDEFINED> instruction: 0xfffffe38
20001214:	fffffe18 			; <UNDEFINED> instruction: 0xfffffe18
20001218:	fffffdf8 			; <UNDEFINED> instruction: 0xfffffdf8
2000121c:	00000404 	andeq	r0, r0, r4, lsl #8
		{
			if(!GPIO_ReadInputDataBit(GPIO_Ports[j], GPIO_Pins[i])){
20001220:	4be3      	ldr	r3, [pc, #908]	; (200015b0 <main+0x6b8>)
20001222:	2280      	movs	r2, #128	; 0x80
20001224:	00d2      	lsls	r2, r2, #3
20001226:	2118      	movs	r1, #24
20001228:	468c      	mov	ip, r1
2000122a:	44bc      	add	ip, r7
2000122c:	4462      	add	r2, ip
2000122e:	6812      	ldr	r2, [r2, #0]
20001230:	0092      	lsls	r2, r2, #2
20001232:	58d0      	ldr	r0, [r2, r3]
20001234:	4bdf      	ldr	r3, [pc, #892]	; (200015b4 <main+0x6bc>)
20001236:	4ae0      	ldr	r2, [pc, #896]	; (200015b8 <main+0x6c0>)
20001238:	2118      	movs	r1, #24
2000123a:	468c      	mov	ip, r1
2000123c:	44bc      	add	ip, r7
2000123e:	4462      	add	r2, ip
20001240:	6812      	ldr	r2, [r2, #0]
20001242:	0052      	lsls	r2, r2, #1
20001244:	5ad3      	ldrh	r3, [r2, r3]
20001246:	0019      	movs	r1, r3
20001248:	f000 fc4d 	bl	20001ae6 <GPIO_ReadInputDataBit>
2000124c:	1e03      	subs	r3, r0, #0
2000124e:	d10b      	bne.n	20001268 <main+0x370>
				amountOfActiveDoors++;
20001250:	22ff      	movs	r2, #255	; 0xff
20001252:	0092      	lsls	r2, r2, #2
20001254:	2318      	movs	r3, #24
20001256:	18fb      	adds	r3, r7, r3
20001258:	189b      	adds	r3, r3, r2
2000125a:	681b      	ldr	r3, [r3, #0]
2000125c:	3301      	adds	r3, #1
2000125e:	2118      	movs	r1, #24
20001260:	468c      	mov	ip, r1
20001262:	44bc      	add	ip, r7
20001264:	4462      	add	r2, ip
20001266:	6013      	str	r3, [r2, #0]
		for (int i = 0; i < sizeof(GPIO_Pins) / sizeof(uint16_t); i = i + 2)
20001268:	4ad3      	ldr	r2, [pc, #844]	; (200015b8 <main+0x6c0>)
2000126a:	2318      	movs	r3, #24
2000126c:	18fb      	adds	r3, r7, r3
2000126e:	189b      	adds	r3, r3, r2
20001270:	681b      	ldr	r3, [r3, #0]
20001272:	3302      	adds	r3, #2
20001274:	2118      	movs	r1, #24
20001276:	468c      	mov	ip, r1
20001278:	44bc      	add	ip, r7
2000127a:	4462      	add	r2, ip
2000127c:	6013      	str	r3, [r2, #0]
2000127e:	4bce      	ldr	r3, [pc, #824]	; (200015b8 <main+0x6c0>)
20001280:	2218      	movs	r2, #24
20001282:	4694      	mov	ip, r2
20001284:	44bc      	add	ip, r7
20001286:	4463      	add	r3, ip
20001288:	681b      	ldr	r3, [r3, #0]
2000128a:	2b0f      	cmp	r3, #15
2000128c:	d9c8      	bls.n	20001220 <main+0x328>
	for (int j = 0; j < (sizeof(GPIO_Ports) /sizeof(GPIO_TypeDef *)); j++)
2000128e:	2280      	movs	r2, #128	; 0x80
20001290:	00d2      	lsls	r2, r2, #3
20001292:	2318      	movs	r3, #24
20001294:	18fb      	adds	r3, r7, r3
20001296:	189b      	adds	r3, r3, r2
20001298:	681b      	ldr	r3, [r3, #0]
2000129a:	3301      	adds	r3, #1
2000129c:	2118      	movs	r1, #24
2000129e:	468c      	mov	ip, r1
200012a0:	44bc      	add	ip, r7
200012a2:	4462      	add	r2, ip
200012a4:	6013      	str	r3, [r2, #0]
200012a6:	2380      	movs	r3, #128	; 0x80
200012a8:	00db      	lsls	r3, r3, #3
200012aa:	2218      	movs	r2, #24
200012ac:	4694      	mov	ip, r2
200012ae:	44bc      	add	ip, r7
200012b0:	4463      	add	r3, ip
200012b2:	681b      	ldr	r3, [r3, #0]
200012b4:	2b01      	cmp	r3, #1
200012b6:	d98f      	bls.n	200011d8 <main+0x2e0>
			}
		}
	}
	door active_doors[amountOfActiveDoors];
200012b8:	23ff      	movs	r3, #255	; 0xff
200012ba:	009b      	lsls	r3, r3, #2
200012bc:	2218      	movs	r2, #24
200012be:	4694      	mov	ip, r2
200012c0:	44bc      	add	ip, r7
200012c2:	4463      	add	r3, ip
200012c4:	681e      	ldr	r6, [r3, #0]
200012c6:	1e73      	subs	r3, r6, #1
200012c8:	22f9      	movs	r2, #249	; 0xf9
200012ca:	0092      	lsls	r2, r2, #2
200012cc:	2118      	movs	r1, #24
200012ce:	468c      	mov	ip, r1
200012d0:	44bc      	add	ip, r7
200012d2:	4462      	add	r2, ip
200012d4:	6013      	str	r3, [r2, #0]
200012d6:	0033      	movs	r3, r6
200012d8:	60bb      	str	r3, [r7, #8]
200012da:	2300      	movs	r3, #0
200012dc:	60fb      	str	r3, [r7, #12]
200012de:	68b9      	ldr	r1, [r7, #8]
200012e0:	68fa      	ldr	r2, [r7, #12]
200012e2:	000b      	movs	r3, r1
200012e4:	0e1b      	lsrs	r3, r3, #24
200012e6:	0010      	movs	r0, r2
200012e8:	0200      	lsls	r0, r0, #8
200012ea:	6178      	str	r0, [r7, #20]
200012ec:	6978      	ldr	r0, [r7, #20]
200012ee:	4318      	orrs	r0, r3
200012f0:	6178      	str	r0, [r7, #20]
200012f2:	000b      	movs	r3, r1
200012f4:	021b      	lsls	r3, r3, #8
200012f6:	613b      	str	r3, [r7, #16]
200012f8:	0033      	movs	r3, r6
200012fa:	603b      	str	r3, [r7, #0]
200012fc:	2300      	movs	r3, #0
200012fe:	607b      	str	r3, [r7, #4]
20001300:	6839      	ldr	r1, [r7, #0]
20001302:	687a      	ldr	r2, [r7, #4]
20001304:	000b      	movs	r3, r1
20001306:	0e1b      	lsrs	r3, r3, #24
20001308:	0010      	movs	r0, r2
2000130a:	0205      	lsls	r5, r0, #8
2000130c:	431d      	orrs	r5, r3
2000130e:	000b      	movs	r3, r1
20001310:	021c      	lsls	r4, r3, #8
20001312:	0033      	movs	r3, r6
20001314:	015b      	lsls	r3, r3, #5
20001316:	3303      	adds	r3, #3
20001318:	3307      	adds	r3, #7
2000131a:	08db      	lsrs	r3, r3, #3
2000131c:	00db      	lsls	r3, r3, #3
2000131e:	466a      	mov	r2, sp
20001320:	1ad3      	subs	r3, r2, r3
20001322:	469d      	mov	sp, r3
20001324:	466b      	mov	r3, sp
20001326:	3303      	adds	r3, #3
20001328:	089b      	lsrs	r3, r3, #2
2000132a:	009b      	lsls	r3, r3, #2
2000132c:	22f8      	movs	r2, #248	; 0xf8
2000132e:	0092      	lsls	r2, r2, #2
20001330:	2118      	movs	r1, #24
20001332:	468c      	mov	ip, r1
20001334:	44bc      	add	ip, r7
20001336:	4462      	add	r2, ip
20001338:	6013      	str	r3, [r2, #0]
	int counter = 0;
2000133a:	2300      	movs	r3, #0
2000133c:	22fe      	movs	r2, #254	; 0xfe
2000133e:	0092      	lsls	r2, r2, #2
20001340:	2118      	movs	r1, #24
20001342:	468c      	mov	ip, r1
20001344:	44bc      	add	ip, r7
20001346:	4462      	add	r2, ip
20001348:	6013      	str	r3, [r2, #0]
	for (int j = 0; j < (sizeof(GPIO_Ports) /sizeof(GPIO_TypeDef *)); j++)
2000134a:	2300      	movs	r3, #0
2000134c:	22fd      	movs	r2, #253	; 0xfd
2000134e:	0092      	lsls	r2, r2, #2
20001350:	2118      	movs	r1, #24
20001352:	468c      	mov	ip, r1
20001354:	44bc      	add	ip, r7
20001356:	4462      	add	r2, ip
20001358:	6013      	str	r3, [r2, #0]
2000135a:	e0d5      	b.n	20001508 <main+0x610>
	{
		for (int i = 0; i < sizeof(GPIO_Pins) / sizeof(uint16_t); i = i + 2)
2000135c:	2300      	movs	r3, #0
2000135e:	22fc      	movs	r2, #252	; 0xfc
20001360:	0092      	lsls	r2, r2, #2
20001362:	2118      	movs	r1, #24
20001364:	468c      	mov	ip, r1
20001366:	44bc      	add	ip, r7
20001368:	4462      	add	r2, ip
2000136a:	6013      	str	r3, [r2, #0]
2000136c:	e0b6      	b.n	200014dc <main+0x5e4>
		{
			if(!GPIO_ReadInputDataBit(GPIO_Ports[j], GPIO_Pins[i])){
2000136e:	4b90      	ldr	r3, [pc, #576]	; (200015b0 <main+0x6b8>)
20001370:	22fd      	movs	r2, #253	; 0xfd
20001372:	0092      	lsls	r2, r2, #2
20001374:	2118      	movs	r1, #24
20001376:	468c      	mov	ip, r1
20001378:	44bc      	add	ip, r7
2000137a:	4462      	add	r2, ip
2000137c:	6812      	ldr	r2, [r2, #0]
2000137e:	0092      	lsls	r2, r2, #2
20001380:	58d0      	ldr	r0, [r2, r3]
20001382:	4b8c      	ldr	r3, [pc, #560]	; (200015b4 <main+0x6bc>)
20001384:	22fc      	movs	r2, #252	; 0xfc
20001386:	0092      	lsls	r2, r2, #2
20001388:	2118      	movs	r1, #24
2000138a:	468c      	mov	ip, r1
2000138c:	44bc      	add	ip, r7
2000138e:	4462      	add	r2, ip
20001390:	6812      	ldr	r2, [r2, #0]
20001392:	0052      	lsls	r2, r2, #1
20001394:	5ad3      	ldrh	r3, [r2, r3]
20001396:	0019      	movs	r1, r3
20001398:	f000 fba5 	bl	20001ae6 <GPIO_ReadInputDataBit>
2000139c:	1e03      	subs	r3, r0, #0
2000139e:	d000      	beq.n	200013a2 <main+0x4aa>
200013a0:	e090      	b.n	200014c4 <main+0x5cc>
				all_doors[counter].GPIO_read = GPIO_Pins[i];
200013a2:	4b84      	ldr	r3, [pc, #528]	; (200015b4 <main+0x6bc>)
200013a4:	25fc      	movs	r5, #252	; 0xfc
200013a6:	00ad      	lsls	r5, r5, #2
200013a8:	2018      	movs	r0, #24
200013aa:	183a      	adds	r2, r7, r0
200013ac:	1952      	adds	r2, r2, r5
200013ae:	6812      	ldr	r2, [r2, #0]
200013b0:	0052      	lsls	r2, r2, #1
200013b2:	5ad3      	ldrh	r3, [r2, r3]
200013b4:	0019      	movs	r1, r3
200013b6:	4b81      	ldr	r3, [pc, #516]	; (200015bc <main+0x6c4>)
200013b8:	2481      	movs	r4, #129	; 0x81
200013ba:	00e4      	lsls	r4, r4, #3
200013bc:	183a      	adds	r2, r7, r0
200013be:	1912      	adds	r2, r2, r4
200013c0:	18d2      	adds	r2, r2, r3
200013c2:	20fe      	movs	r0, #254	; 0xfe
200013c4:	0080      	lsls	r0, r0, #2
200013c6:	2318      	movs	r3, #24
200013c8:	18fb      	adds	r3, r7, r3
200013ca:	181b      	adds	r3, r3, r0
200013cc:	681b      	ldr	r3, [r3, #0]
200013ce:	015b      	lsls	r3, r3, #5
200013d0:	18d3      	adds	r3, r2, r3
200013d2:	3314      	adds	r3, #20
200013d4:	6019      	str	r1, [r3, #0]
				all_doors[counter].GPIO_lamp = GPIO_Pins[i+1];
200013d6:	2318      	movs	r3, #24
200013d8:	18fb      	adds	r3, r7, r3
200013da:	195b      	adds	r3, r3, r5
200013dc:	681b      	ldr	r3, [r3, #0]
200013de:	1c5a      	adds	r2, r3, #1
200013e0:	4b74      	ldr	r3, [pc, #464]	; (200015b4 <main+0x6bc>)
200013e2:	0052      	lsls	r2, r2, #1
200013e4:	5ad3      	ldrh	r3, [r2, r3]
200013e6:	0019      	movs	r1, r3
200013e8:	4b74      	ldr	r3, [pc, #464]	; (200015bc <main+0x6c4>)
200013ea:	0025      	movs	r5, r4
200013ec:	2418      	movs	r4, #24
200013ee:	193a      	adds	r2, r7, r4
200013f0:	1952      	adds	r2, r2, r5
200013f2:	18d2      	adds	r2, r2, r3
200013f4:	193b      	adds	r3, r7, r4
200013f6:	181b      	adds	r3, r3, r0
200013f8:	681b      	ldr	r3, [r3, #0]
200013fa:	015b      	lsls	r3, r3, #5
200013fc:	18d3      	adds	r3, r2, r3
200013fe:	3310      	adds	r3, #16
20001400:	6019      	str	r1, [r3, #0]
				all_doors[counter].controlbits = 0;
20001402:	4b6e      	ldr	r3, [pc, #440]	; (200015bc <main+0x6c4>)
20001404:	0021      	movs	r1, r4
20001406:	187a      	adds	r2, r7, r1
20001408:	1952      	adds	r2, r2, r5
2000140a:	18d2      	adds	r2, r2, r3
2000140c:	187b      	adds	r3, r7, r1
2000140e:	181b      	adds	r3, r3, r0
20001410:	681b      	ldr	r3, [r3, #0]
20001412:	015b      	lsls	r3, r3, #5
20001414:	18d3      	adds	r3, r2, r3
20001416:	3304      	adds	r3, #4
20001418:	2200      	movs	r2, #0
2000141a:	601a      	str	r2, [r3, #0]
				all_doors[counter].time_larm = 0;
2000141c:	4b67      	ldr	r3, [pc, #412]	; (200015bc <main+0x6c4>)
2000141e:	187a      	adds	r2, r7, r1
20001420:	1952      	adds	r2, r2, r5
20001422:	18d2      	adds	r2, r2, r3
20001424:	187b      	adds	r3, r7, r1
20001426:	181b      	adds	r3, r3, r0
20001428:	681b      	ldr	r3, [r3, #0]
2000142a:	015b      	lsls	r3, r3, #5
2000142c:	18d3      	adds	r3, r2, r3
2000142e:	3308      	adds	r3, #8
20001430:	2200      	movs	r2, #0
20001432:	701a      	strb	r2, [r3, #0]
				all_doors[counter].time_central_larm = 2;
20001434:	4b61      	ldr	r3, [pc, #388]	; (200015bc <main+0x6c4>)
20001436:	187a      	adds	r2, r7, r1
20001438:	1952      	adds	r2, r2, r5
2000143a:	18d2      	adds	r2, r2, r3
2000143c:	187b      	adds	r3, r7, r1
2000143e:	181b      	adds	r3, r3, r0
20001440:	681b      	ldr	r3, [r3, #0]
20001442:	015b      	lsls	r3, r3, #5
20001444:	18d3      	adds	r3, r2, r3
20001446:	3309      	adds	r3, #9
20001448:	2202      	movs	r2, #2
2000144a:	701a      	strb	r2, [r3, #0]
				all_doors[counter].GPIO_type = GPIO_Ports[j];
2000144c:	4b58      	ldr	r3, [pc, #352]	; (200015b0 <main+0x6b8>)
2000144e:	22fd      	movs	r2, #253	; 0xfd
20001450:	0092      	lsls	r2, r2, #2
20001452:	2418      	movs	r4, #24
20001454:	46a4      	mov	ip, r4
20001456:	44bc      	add	ip, r7
20001458:	4462      	add	r2, ip
2000145a:	6812      	ldr	r2, [r2, #0]
2000145c:	0092      	lsls	r2, r2, #2
2000145e:	58d2      	ldr	r2, [r2, r3]
20001460:	4b56      	ldr	r3, [pc, #344]	; (200015bc <main+0x6c4>)
20001462:	187c      	adds	r4, r7, r1
20001464:	1961      	adds	r1, r4, r5
20001466:	18c9      	adds	r1, r1, r3
20001468:	0004      	movs	r4, r0
2000146a:	2318      	movs	r3, #24
2000146c:	18fb      	adds	r3, r7, r3
2000146e:	181b      	adds	r3, r3, r0
20001470:	681b      	ldr	r3, [r3, #0]
20001472:	015b      	lsls	r3, r3, #5
20001474:	18cb      	adds	r3, r1, r3
20001476:	331c      	adds	r3, #28
20001478:	601a      	str	r2, [r3, #0]
				active_doors[counter] = all_doors[counter];
2000147a:	23f8      	movs	r3, #248	; 0xf8
2000147c:	009b      	lsls	r3, r3, #2
2000147e:	2218      	movs	r2, #24
20001480:	4694      	mov	ip, r2
20001482:	44bc      	add	ip, r7
20001484:	4463      	add	r3, ip
20001486:	6818      	ldr	r0, [r3, #0]
20001488:	2118      	movs	r1, #24
2000148a:	187b      	adds	r3, r7, r1
2000148c:	191b      	adds	r3, r3, r4
2000148e:	681b      	ldr	r3, [r3, #0]
20001490:	015b      	lsls	r3, r3, #5
20001492:	4a4a      	ldr	r2, [pc, #296]	; (200015bc <main+0x6c4>)
20001494:	1879      	adds	r1, r7, r1
20001496:	1949      	adds	r1, r1, r5
20001498:	1889      	adds	r1, r1, r2
2000149a:	2218      	movs	r2, #24
2000149c:	18bd      	adds	r5, r7, r2
2000149e:	192a      	adds	r2, r5, r4
200014a0:	6812      	ldr	r2, [r2, #0]
200014a2:	0152      	lsls	r2, r2, #5
200014a4:	18c3      	adds	r3, r0, r3
200014a6:	188a      	adds	r2, r1, r2
200014a8:	ca23      	ldmia	r2!, {r0, r1, r5}
200014aa:	c323      	stmia	r3!, {r0, r1, r5}
200014ac:	ca23      	ldmia	r2!, {r0, r1, r5}
200014ae:	c323      	stmia	r3!, {r0, r1, r5}
200014b0:	ca03      	ldmia	r2!, {r0, r1}
200014b2:	c303      	stmia	r3!, {r0, r1}
				counter++;
200014b4:	2218      	movs	r2, #24
200014b6:	18bb      	adds	r3, r7, r2
200014b8:	191b      	adds	r3, r3, r4
200014ba:	681b      	ldr	r3, [r3, #0]
200014bc:	3301      	adds	r3, #1
200014be:	18ba      	adds	r2, r7, r2
200014c0:	1912      	adds	r2, r2, r4
200014c2:	6013      	str	r3, [r2, #0]
		for (int i = 0; i < sizeof(GPIO_Pins) / sizeof(uint16_t); i = i + 2)
200014c4:	22fc      	movs	r2, #252	; 0xfc
200014c6:	0092      	lsls	r2, r2, #2
200014c8:	2318      	movs	r3, #24
200014ca:	18fb      	adds	r3, r7, r3
200014cc:	189b      	adds	r3, r3, r2
200014ce:	681b      	ldr	r3, [r3, #0]
200014d0:	3302      	adds	r3, #2
200014d2:	2118      	movs	r1, #24
200014d4:	468c      	mov	ip, r1
200014d6:	44bc      	add	ip, r7
200014d8:	4462      	add	r2, ip
200014da:	6013      	str	r3, [r2, #0]
200014dc:	23fc      	movs	r3, #252	; 0xfc
200014de:	009b      	lsls	r3, r3, #2
200014e0:	2218      	movs	r2, #24
200014e2:	4694      	mov	ip, r2
200014e4:	44bc      	add	ip, r7
200014e6:	4463      	add	r3, ip
200014e8:	681b      	ldr	r3, [r3, #0]
200014ea:	2b0f      	cmp	r3, #15
200014ec:	d800      	bhi.n	200014f0 <main+0x5f8>
200014ee:	e73e      	b.n	2000136e <main+0x476>
	for (int j = 0; j < (sizeof(GPIO_Ports) /sizeof(GPIO_TypeDef *)); j++)
200014f0:	22fd      	movs	r2, #253	; 0xfd
200014f2:	0092      	lsls	r2, r2, #2
200014f4:	2318      	movs	r3, #24
200014f6:	18fb      	adds	r3, r7, r3
200014f8:	189b      	adds	r3, r3, r2
200014fa:	681b      	ldr	r3, [r3, #0]
200014fc:	3301      	adds	r3, #1
200014fe:	2118      	movs	r1, #24
20001500:	468c      	mov	ip, r1
20001502:	44bc      	add	ip, r7
20001504:	4462      	add	r2, ip
20001506:	6013      	str	r3, [r2, #0]
20001508:	23fd      	movs	r3, #253	; 0xfd
2000150a:	009b      	lsls	r3, r3, #2
2000150c:	2218      	movs	r2, #24
2000150e:	4694      	mov	ip, r2
20001510:	44bc      	add	ip, r7
20001512:	4463      	add	r3, ip
20001514:	681b      	ldr	r3, [r3, #0]
20001516:	2b01      	cmp	r3, #1
20001518:	d800      	bhi.n	2000151c <main+0x624>
2000151a:	e71f      	b.n	2000135c <main+0x464>
	door test2 = {.id = 1, .controlbits = 0, .time_larm = 0, .time_central_larm = 2, .password = 0, .GPIO_lamp = GPIO_Pin_5, .GPIO_read = GPIO_Pin_4, .larmTick = 0};
	door test3 = {.id = 2, .controlbits = 0, .time_larm = 0, .time_central_larm = 2, .password = 0, .GPIO_lamp = GPIO_Pin_9, .GPIO_read = GPIO_Pin_8, .larmTick = 0};
	door test4 = {.id = 3, .controlbits = 0, .time_larm = 0, .time_central_larm = 2, .password = 0, .GPIO_lamp = GPIO_Pin_7, .GPIO_read = GPIO_Pin_6, .larmTick = 0};
	*/
	//door active_doors[4] = {test1,test2,test3,test4};
	GPIO_SetBits(GPIOA, GPIO_Pin_2);
2000151c:	4b28      	ldr	r3, [pc, #160]	; (200015c0 <main+0x6c8>)
2000151e:	2104      	movs	r1, #4
20001520:	0018      	movs	r0, r3
20001522:	f000 fb38 	bl	20001b96 <GPIO_SetBits>
	
	while (1)
	{
		for (int i = 0; i < sizeof(active_doors)/sizeof(active_doors[0]); i++)
20001526:	2300      	movs	r3, #0
20001528:	22fb      	movs	r2, #251	; 0xfb
2000152a:	0092      	lsls	r2, r2, #2
2000152c:	2118      	movs	r1, #24
2000152e:	468c      	mov	ip, r1
20001530:	44bc      	add	ip, r7
20001532:	4462      	add	r2, ip
20001534:	6013      	str	r3, [r2, #0]
20001536:	e142      	b.n	200017be <main+0x8c6>
		{
			if (!GPIO_ReadInputDataBit(active_doors[i].GPIO_type, active_doors[i].GPIO_read)){ //GPIO pinnen är noll ifall dörren är stängd därför !
20001538:	21f8      	movs	r1, #248	; 0xf8
2000153a:	0089      	lsls	r1, r1, #2
2000153c:	2518      	movs	r5, #24
2000153e:	197b      	adds	r3, r7, r5
20001540:	185b      	adds	r3, r3, r1
20001542:	681a      	ldr	r2, [r3, #0]
20001544:	24fb      	movs	r4, #251	; 0xfb
20001546:	00a4      	lsls	r4, r4, #2
20001548:	197b      	adds	r3, r7, r5
2000154a:	191b      	adds	r3, r3, r4
2000154c:	681b      	ldr	r3, [r3, #0]
2000154e:	015b      	lsls	r3, r3, #5
20001550:	18d3      	adds	r3, r2, r3
20001552:	331c      	adds	r3, #28
20001554:	6818      	ldr	r0, [r3, #0]
20001556:	197b      	adds	r3, r7, r5
20001558:	185b      	adds	r3, r3, r1
2000155a:	681a      	ldr	r2, [r3, #0]
2000155c:	197b      	adds	r3, r7, r5
2000155e:	191b      	adds	r3, r3, r4
20001560:	681b      	ldr	r3, [r3, #0]
20001562:	015b      	lsls	r3, r3, #5
20001564:	18d3      	adds	r3, r2, r3
20001566:	3314      	adds	r3, #20
20001568:	681b      	ldr	r3, [r3, #0]
2000156a:	b29b      	uxth	r3, r3
2000156c:	0019      	movs	r1, r3
2000156e:	f000 faba 	bl	20001ae6 <GPIO_ReadInputDataBit>
20001572:	1e03      	subs	r3, r0, #0
20001574:	d128      	bne.n	200015c8 <main+0x6d0>
				active_doors[i].controlbits &= 0xFFFE; //Nollställer kontrollbiten för ifall en dörr är öppen, när den detekteras som stängd
20001576:	21f8      	movs	r1, #248	; 0xf8
20001578:	0089      	lsls	r1, r1, #2
2000157a:	2418      	movs	r4, #24
2000157c:	193b      	adds	r3, r7, r4
2000157e:	185b      	adds	r3, r3, r1
20001580:	681a      	ldr	r2, [r3, #0]
20001582:	20fb      	movs	r0, #251	; 0xfb
20001584:	0080      	lsls	r0, r0, #2
20001586:	193b      	adds	r3, r7, r4
20001588:	181b      	adds	r3, r3, r0
2000158a:	681b      	ldr	r3, [r3, #0]
2000158c:	015b      	lsls	r3, r3, #5
2000158e:	18d3      	adds	r3, r2, r3
20001590:	3304      	adds	r3, #4
20001592:	681b      	ldr	r3, [r3, #0]
20001594:	4a0b      	ldr	r2, [pc, #44]	; (200015c4 <main+0x6cc>)
20001596:	401a      	ands	r2, r3
20001598:	193b      	adds	r3, r7, r4
2000159a:	185b      	adds	r3, r3, r1
2000159c:	6819      	ldr	r1, [r3, #0]
2000159e:	193b      	adds	r3, r7, r4
200015a0:	181b      	adds	r3, r3, r0
200015a2:	681b      	ldr	r3, [r3, #0]
200015a4:	015b      	lsls	r3, r3, #5
200015a6:	18cb      	adds	r3, r1, r3
200015a8:	3304      	adds	r3, #4
200015aa:	601a      	str	r2, [r3, #0]
200015ac:	e050      	b.n	20001650 <main+0x758>
200015ae:	46c0      	nop			; (mov r8, r8)
200015b0:	20002b50 	andcs	r2, r0, r0, asr fp
200015b4:	20002b30 	andcs	r2, r0, r0, lsr fp
200015b8:	00000404 	andeq	r0, r0, r4, lsl #8
200015bc:	fffffbf8 			; <UNDEFINED> instruction: 0xfffffbf8
200015c0:	40020000 	andmi	r0, r2, r0
200015c4:	0000fffe 	strdeq	pc, [r0], -lr
			}
			else{
				if (!active_doors[i].controlbits & 1) // Kollar så att dörren inte larmar sen innan så larmtick inte uppdateras hela tiden
200015c8:	23f8      	movs	r3, #248	; 0xf8
200015ca:	009b      	lsls	r3, r3, #2
200015cc:	2218      	movs	r2, #24
200015ce:	4694      	mov	ip, r2
200015d0:	44bc      	add	ip, r7
200015d2:	4463      	add	r3, ip
200015d4:	681a      	ldr	r2, [r3, #0]
200015d6:	23fb      	movs	r3, #251	; 0xfb
200015d8:	009b      	lsls	r3, r3, #2
200015da:	2118      	movs	r1, #24
200015dc:	468c      	mov	ip, r1
200015de:	44bc      	add	ip, r7
200015e0:	4463      	add	r3, ip
200015e2:	681b      	ldr	r3, [r3, #0]
200015e4:	015b      	lsls	r3, r3, #5
200015e6:	18d3      	adds	r3, r2, r3
200015e8:	3304      	adds	r3, #4
200015ea:	681b      	ldr	r3, [r3, #0]
200015ec:	2b00      	cmp	r3, #0
200015ee:	d114      	bne.n	2000161a <main+0x722>
				{
					active_doors[i].larmTick = msTicks;
200015f0:	4b7a      	ldr	r3, [pc, #488]	; (200017dc <main+0x8e4>)
200015f2:	681b      	ldr	r3, [r3, #0]
200015f4:	0019      	movs	r1, r3
200015f6:	23f8      	movs	r3, #248	; 0xf8
200015f8:	009b      	lsls	r3, r3, #2
200015fa:	2218      	movs	r2, #24
200015fc:	4694      	mov	ip, r2
200015fe:	44bc      	add	ip, r7
20001600:	4463      	add	r3, ip
20001602:	681a      	ldr	r2, [r3, #0]
20001604:	23fb      	movs	r3, #251	; 0xfb
20001606:	009b      	lsls	r3, r3, #2
20001608:	2018      	movs	r0, #24
2000160a:	4684      	mov	ip, r0
2000160c:	44bc      	add	ip, r7
2000160e:	4463      	add	r3, ip
20001610:	681b      	ldr	r3, [r3, #0]
20001612:	015b      	lsls	r3, r3, #5
20001614:	18d3      	adds	r3, r2, r3
20001616:	3318      	adds	r3, #24
20001618:	6019      	str	r1, [r3, #0]
				}
				active_doors[i].controlbits |= 1; // sätter dörrens larm kontrollbit till 1.
2000161a:	21f8      	movs	r1, #248	; 0xf8
2000161c:	0089      	lsls	r1, r1, #2
2000161e:	2418      	movs	r4, #24
20001620:	193b      	adds	r3, r7, r4
20001622:	185b      	adds	r3, r3, r1
20001624:	681a      	ldr	r2, [r3, #0]
20001626:	20fb      	movs	r0, #251	; 0xfb
20001628:	0080      	lsls	r0, r0, #2
2000162a:	193b      	adds	r3, r7, r4
2000162c:	181b      	adds	r3, r3, r0
2000162e:	681b      	ldr	r3, [r3, #0]
20001630:	015b      	lsls	r3, r3, #5
20001632:	18d3      	adds	r3, r2, r3
20001634:	3304      	adds	r3, #4
20001636:	681b      	ldr	r3, [r3, #0]
20001638:	2201      	movs	r2, #1
2000163a:	431a      	orrs	r2, r3
2000163c:	193b      	adds	r3, r7, r4
2000163e:	185b      	adds	r3, r3, r1
20001640:	6819      	ldr	r1, [r3, #0]
20001642:	193b      	adds	r3, r7, r4
20001644:	181b      	adds	r3, r3, r0
20001646:	681b      	ldr	r3, [r3, #0]
20001648:	015b      	lsls	r3, r3, #5
2000164a:	18cb      	adds	r3, r1, r3
2000164c:	3304      	adds	r3, #4
2000164e:	601a      	str	r2, [r3, #0]
			}
			for (int i = 0; i < sizeof(active_doors)/sizeof(active_doors[0]); i++)
20001650:	2300      	movs	r3, #0
20001652:	22fa      	movs	r2, #250	; 0xfa
20001654:	0092      	lsls	r2, r2, #2
20001656:	2118      	movs	r1, #24
20001658:	468c      	mov	ip, r1
2000165a:	44bc      	add	ip, r7
2000165c:	4462      	add	r2, ip
2000165e:	6013      	str	r3, [r2, #0]
20001660:	e094      	b.n	2000178c <main+0x894>
			{
				if (active_doors[i].controlbits & 1 && msTicks > (active_doors[i].larmTick + 1000 * 10 * active_doors[i].time_larm))
20001662:	23f8      	movs	r3, #248	; 0xf8
20001664:	009b      	lsls	r3, r3, #2
20001666:	2218      	movs	r2, #24
20001668:	4694      	mov	ip, r2
2000166a:	44bc      	add	ip, r7
2000166c:	4463      	add	r3, ip
2000166e:	681a      	ldr	r2, [r3, #0]
20001670:	23fa      	movs	r3, #250	; 0xfa
20001672:	009b      	lsls	r3, r3, #2
20001674:	2118      	movs	r1, #24
20001676:	468c      	mov	ip, r1
20001678:	44bc      	add	ip, r7
2000167a:	4463      	add	r3, ip
2000167c:	681b      	ldr	r3, [r3, #0]
2000167e:	015b      	lsls	r3, r3, #5
20001680:	18d3      	adds	r3, r2, r3
20001682:	3304      	adds	r3, #4
20001684:	681b      	ldr	r3, [r3, #0]
20001686:	2201      	movs	r2, #1
20001688:	4013      	ands	r3, r2
2000168a:	d03f      	beq.n	2000170c <main+0x814>
2000168c:	21f8      	movs	r1, #248	; 0xf8
2000168e:	0089      	lsls	r1, r1, #2
20001690:	2418      	movs	r4, #24
20001692:	193b      	adds	r3, r7, r4
20001694:	185b      	adds	r3, r3, r1
20001696:	681a      	ldr	r2, [r3, #0]
20001698:	20fa      	movs	r0, #250	; 0xfa
2000169a:	0080      	lsls	r0, r0, #2
2000169c:	193b      	adds	r3, r7, r4
2000169e:	181b      	adds	r3, r3, r0
200016a0:	681b      	ldr	r3, [r3, #0]
200016a2:	015b      	lsls	r3, r3, #5
200016a4:	18d3      	adds	r3, r2, r3
200016a6:	3318      	adds	r3, #24
200016a8:	681a      	ldr	r2, [r3, #0]
200016aa:	193b      	adds	r3, r7, r4
200016ac:	185b      	adds	r3, r3, r1
200016ae:	6819      	ldr	r1, [r3, #0]
200016b0:	193b      	adds	r3, r7, r4
200016b2:	181b      	adds	r3, r3, r0
200016b4:	681b      	ldr	r3, [r3, #0]
200016b6:	015b      	lsls	r3, r3, #5
200016b8:	18cb      	adds	r3, r1, r3
200016ba:	3308      	adds	r3, #8
200016bc:	781b      	ldrb	r3, [r3, #0]
200016be:	0019      	movs	r1, r3
200016c0:	4b47      	ldr	r3, [pc, #284]	; (200017e0 <main+0x8e8>)
200016c2:	434b      	muls	r3, r1
200016c4:	18d3      	adds	r3, r2, r3
200016c6:	001a      	movs	r2, r3
200016c8:	4b44      	ldr	r3, [pc, #272]	; (200017dc <main+0x8e4>)
200016ca:	681b      	ldr	r3, [r3, #0]
200016cc:	429a      	cmp	r2, r3
200016ce:	d21d      	bcs.n	2000170c <main+0x814>
				{
					GPIO_SetBits(active_doors[i].GPIO_type, active_doors[i].GPIO_lamp); // tänder lampan ifall tiden för att dörren ska larma har gått
200016d0:	21f8      	movs	r1, #248	; 0xf8
200016d2:	0089      	lsls	r1, r1, #2
200016d4:	2518      	movs	r5, #24
200016d6:	197b      	adds	r3, r7, r5
200016d8:	185b      	adds	r3, r3, r1
200016da:	681a      	ldr	r2, [r3, #0]
200016dc:	24fa      	movs	r4, #250	; 0xfa
200016de:	00a4      	lsls	r4, r4, #2
200016e0:	197b      	adds	r3, r7, r5
200016e2:	191b      	adds	r3, r3, r4
200016e4:	681b      	ldr	r3, [r3, #0]
200016e6:	015b      	lsls	r3, r3, #5
200016e8:	18d3      	adds	r3, r2, r3
200016ea:	331c      	adds	r3, #28
200016ec:	6818      	ldr	r0, [r3, #0]
200016ee:	197b      	adds	r3, r7, r5
200016f0:	185b      	adds	r3, r3, r1
200016f2:	681a      	ldr	r2, [r3, #0]
200016f4:	197b      	adds	r3, r7, r5
200016f6:	191b      	adds	r3, r3, r4
200016f8:	681b      	ldr	r3, [r3, #0]
200016fa:	015b      	lsls	r3, r3, #5
200016fc:	18d3      	adds	r3, r2, r3
200016fe:	3310      	adds	r3, #16
20001700:	681b      	ldr	r3, [r3, #0]
20001702:	b29b      	uxth	r3, r3
20001704:	0019      	movs	r1, r3
20001706:	f000 fa46 	bl	20001b96 <GPIO_SetBits>
2000170a:	e01c      	b.n	20001746 <main+0x84e>
				}
				else
				{
					GPIO_ResetBits(active_doors[i].GPIO_type, active_doors[i].GPIO_lamp);	// släcker lampan annars
2000170c:	21f8      	movs	r1, #248	; 0xf8
2000170e:	0089      	lsls	r1, r1, #2
20001710:	2518      	movs	r5, #24
20001712:	197b      	adds	r3, r7, r5
20001714:	185b      	adds	r3, r3, r1
20001716:	681a      	ldr	r2, [r3, #0]
20001718:	24fa      	movs	r4, #250	; 0xfa
2000171a:	00a4      	lsls	r4, r4, #2
2000171c:	197b      	adds	r3, r7, r5
2000171e:	191b      	adds	r3, r3, r4
20001720:	681b      	ldr	r3, [r3, #0]
20001722:	015b      	lsls	r3, r3, #5
20001724:	18d3      	adds	r3, r2, r3
20001726:	331c      	adds	r3, #28
20001728:	6818      	ldr	r0, [r3, #0]
2000172a:	197b      	adds	r3, r7, r5
2000172c:	185b      	adds	r3, r3, r1
2000172e:	681a      	ldr	r2, [r3, #0]
20001730:	197b      	adds	r3, r7, r5
20001732:	191b      	adds	r3, r3, r4
20001734:	681b      	ldr	r3, [r3, #0]
20001736:	015b      	lsls	r3, r3, #5
20001738:	18d3      	adds	r3, r2, r3
2000173a:	3310      	adds	r3, #16
2000173c:	681b      	ldr	r3, [r3, #0]
2000173e:	b29b      	uxth	r3, r3
20001740:	0019      	movs	r1, r3
20001742:	f000 fa37 	bl	20001bb4 <GPIO_ResetBits>
				}
				if (active_doors[i].controlbits & 1 && msTicks > (active_doors[i].larmTick + 1000 * 10 * active_doors[i].time_central_larm))
20001746:	23f8      	movs	r3, #248	; 0xf8
20001748:	009b      	lsls	r3, r3, #2
2000174a:	2218      	movs	r2, #24
2000174c:	4694      	mov	ip, r2
2000174e:	44bc      	add	ip, r7
20001750:	4463      	add	r3, ip
20001752:	681a      	ldr	r2, [r3, #0]
20001754:	23fa      	movs	r3, #250	; 0xfa
20001756:	009b      	lsls	r3, r3, #2
20001758:	2118      	movs	r1, #24
2000175a:	468c      	mov	ip, r1
2000175c:	44bc      	add	ip, r7
2000175e:	4463      	add	r3, ip
20001760:	681b      	ldr	r3, [r3, #0]
20001762:	015b      	lsls	r3, r3, #5
20001764:	18d3      	adds	r3, r2, r3
20001766:	3304      	adds	r3, #4
20001768:	681b      	ldr	r3, [r3, #0]
2000176a:	2201      	movs	r2, #1
2000176c:	4013      	ands	r3, r2
2000176e:	d001      	beq.n	20001774 <main+0x87c>
20001770:	4b1a      	ldr	r3, [pc, #104]	; (200017dc <main+0x8e4>)
20001772:	681b      	ldr	r3, [r3, #0]
			for (int i = 0; i < sizeof(active_doors)/sizeof(active_doors[0]); i++)
20001774:	22fa      	movs	r2, #250	; 0xfa
20001776:	0092      	lsls	r2, r2, #2
20001778:	2318      	movs	r3, #24
2000177a:	18fb      	adds	r3, r7, r3
2000177c:	189b      	adds	r3, r3, r2
2000177e:	681b      	ldr	r3, [r3, #0]
20001780:	3301      	adds	r3, #1
20001782:	2118      	movs	r1, #24
20001784:	468c      	mov	ip, r1
20001786:	44bc      	add	ip, r7
20001788:	4462      	add	r2, ip
2000178a:	6013      	str	r3, [r2, #0]
2000178c:	0033      	movs	r3, r6
2000178e:	015b      	lsls	r3, r3, #5
20001790:	095a      	lsrs	r2, r3, #5
20001792:	23fa      	movs	r3, #250	; 0xfa
20001794:	009b      	lsls	r3, r3, #2
20001796:	2118      	movs	r1, #24
20001798:	468c      	mov	ip, r1
2000179a:	44bc      	add	ip, r7
2000179c:	4463      	add	r3, ip
2000179e:	681b      	ldr	r3, [r3, #0]
200017a0:	429a      	cmp	r2, r3
200017a2:	d900      	bls.n	200017a6 <main+0x8ae>
200017a4:	e75d      	b.n	20001662 <main+0x76a>
		for (int i = 0; i < sizeof(active_doors)/sizeof(active_doors[0]); i++)
200017a6:	22fb      	movs	r2, #251	; 0xfb
200017a8:	0092      	lsls	r2, r2, #2
200017aa:	2318      	movs	r3, #24
200017ac:	18fb      	adds	r3, r7, r3
200017ae:	189b      	adds	r3, r3, r2
200017b0:	681b      	ldr	r3, [r3, #0]
200017b2:	3301      	adds	r3, #1
200017b4:	2118      	movs	r1, #24
200017b6:	468c      	mov	ip, r1
200017b8:	44bc      	add	ip, r7
200017ba:	4462      	add	r2, ip
200017bc:	6013      	str	r3, [r2, #0]
200017be:	0033      	movs	r3, r6
200017c0:	015b      	lsls	r3, r3, #5
200017c2:	095a      	lsrs	r2, r3, #5
200017c4:	23fb      	movs	r3, #251	; 0xfb
200017c6:	009b      	lsls	r3, r3, #2
200017c8:	2118      	movs	r1, #24
200017ca:	468c      	mov	ip, r1
200017cc:	44bc      	add	ip, r7
200017ce:	4463      	add	r3, ip
200017d0:	681b      	ldr	r3, [r3, #0]
200017d2:	429a      	cmp	r2, r3
200017d4:	d900      	bls.n	200017d8 <main+0x8e0>
200017d6:	e6af      	b.n	20001538 <main+0x640>
200017d8:	e6a5      	b.n	20001526 <main+0x62e>
200017da:	46c0      	nop			; (mov r8, r8)
200017dc:	20002b1c 	andcs	r2, r0, ip, lsl fp
200017e0:	00002710 	andeq	r2, r0, r0, lsl r7

200017e4 <GPIO_DeInit>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F42xxx/43xxx devices.
  *                      x can be (A, B, C, D and H) to select the GPIO peripheral for STM32F401xx devices.  
  * @retval None
  */
void GPIO_DeInit(GPIO_TypeDef* GPIOx)
{
200017e4:	b580      	push	{r7, lr}
200017e6:	b082      	sub	sp, #8
200017e8:	af00      	add	r7, sp, #0
200017ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  if (GPIOx == GPIOA)
200017ec:	687b      	ldr	r3, [r7, #4]
200017ee:	4a4e      	ldr	r2, [pc, #312]	; (20001928 <GPIO_DeInit+0x144>)
200017f0:	4293      	cmp	r3, r2
200017f2:	d108      	bne.n	20001806 <GPIO_DeInit+0x22>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, ENABLE);
200017f4:	2101      	movs	r1, #1
200017f6:	2001      	movs	r0, #1
200017f8:	f7ff f8ce 	bl	20000998 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, DISABLE);
200017fc:	2100      	movs	r1, #0
200017fe:	2001      	movs	r0, #1
20001800:	f7ff f8ca 	bl	20000998 <RCC_AHB1PeriphResetCmd>
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, ENABLE);
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, DISABLE);
    }
  }
}
20001804:	e08c      	b.n	20001920 <GPIO_DeInit+0x13c>
  else if (GPIOx == GPIOB)
20001806:	687b      	ldr	r3, [r7, #4]
20001808:	4a48      	ldr	r2, [pc, #288]	; (2000192c <GPIO_DeInit+0x148>)
2000180a:	4293      	cmp	r3, r2
2000180c:	d108      	bne.n	20001820 <GPIO_DeInit+0x3c>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, ENABLE);
2000180e:	2101      	movs	r1, #1
20001810:	2002      	movs	r0, #2
20001812:	f7ff f8c1 	bl	20000998 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, DISABLE);
20001816:	2100      	movs	r1, #0
20001818:	2002      	movs	r0, #2
2000181a:	f7ff f8bd 	bl	20000998 <RCC_AHB1PeriphResetCmd>
}
2000181e:	e07f      	b.n	20001920 <GPIO_DeInit+0x13c>
  else if (GPIOx == GPIOC)
20001820:	687b      	ldr	r3, [r7, #4]
20001822:	4a43      	ldr	r2, [pc, #268]	; (20001930 <GPIO_DeInit+0x14c>)
20001824:	4293      	cmp	r3, r2
20001826:	d108      	bne.n	2000183a <GPIO_DeInit+0x56>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, ENABLE);
20001828:	2101      	movs	r1, #1
2000182a:	2004      	movs	r0, #4
2000182c:	f7ff f8b4 	bl	20000998 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, DISABLE);
20001830:	2100      	movs	r1, #0
20001832:	2004      	movs	r0, #4
20001834:	f7ff f8b0 	bl	20000998 <RCC_AHB1PeriphResetCmd>
}
20001838:	e072      	b.n	20001920 <GPIO_DeInit+0x13c>
  else if (GPIOx == GPIOD)
2000183a:	687b      	ldr	r3, [r7, #4]
2000183c:	4a3d      	ldr	r2, [pc, #244]	; (20001934 <GPIO_DeInit+0x150>)
2000183e:	4293      	cmp	r3, r2
20001840:	d108      	bne.n	20001854 <GPIO_DeInit+0x70>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, ENABLE);
20001842:	2101      	movs	r1, #1
20001844:	2008      	movs	r0, #8
20001846:	f7ff f8a7 	bl	20000998 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, DISABLE);
2000184a:	2100      	movs	r1, #0
2000184c:	2008      	movs	r0, #8
2000184e:	f7ff f8a3 	bl	20000998 <RCC_AHB1PeriphResetCmd>
}
20001852:	e065      	b.n	20001920 <GPIO_DeInit+0x13c>
  else if (GPIOx == GPIOE)
20001854:	687b      	ldr	r3, [r7, #4]
20001856:	4a38      	ldr	r2, [pc, #224]	; (20001938 <GPIO_DeInit+0x154>)
20001858:	4293      	cmp	r3, r2
2000185a:	d108      	bne.n	2000186e <GPIO_DeInit+0x8a>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, ENABLE);
2000185c:	2101      	movs	r1, #1
2000185e:	2010      	movs	r0, #16
20001860:	f7ff f89a 	bl	20000998 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, DISABLE);
20001864:	2100      	movs	r1, #0
20001866:	2010      	movs	r0, #16
20001868:	f7ff f896 	bl	20000998 <RCC_AHB1PeriphResetCmd>
}
2000186c:	e058      	b.n	20001920 <GPIO_DeInit+0x13c>
  else if (GPIOx == GPIOF)
2000186e:	687b      	ldr	r3, [r7, #4]
20001870:	4a32      	ldr	r2, [pc, #200]	; (2000193c <GPIO_DeInit+0x158>)
20001872:	4293      	cmp	r3, r2
20001874:	d108      	bne.n	20001888 <GPIO_DeInit+0xa4>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, ENABLE);
20001876:	2101      	movs	r1, #1
20001878:	2020      	movs	r0, #32
2000187a:	f7ff f88d 	bl	20000998 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, DISABLE);
2000187e:	2100      	movs	r1, #0
20001880:	2020      	movs	r0, #32
20001882:	f7ff f889 	bl	20000998 <RCC_AHB1PeriphResetCmd>
}
20001886:	e04b      	b.n	20001920 <GPIO_DeInit+0x13c>
  else if (GPIOx == GPIOG)
20001888:	687b      	ldr	r3, [r7, #4]
2000188a:	4a2d      	ldr	r2, [pc, #180]	; (20001940 <GPIO_DeInit+0x15c>)
2000188c:	4293      	cmp	r3, r2
2000188e:	d108      	bne.n	200018a2 <GPIO_DeInit+0xbe>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, ENABLE);
20001890:	2101      	movs	r1, #1
20001892:	2040      	movs	r0, #64	; 0x40
20001894:	f7ff f880 	bl	20000998 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, DISABLE);
20001898:	2100      	movs	r1, #0
2000189a:	2040      	movs	r0, #64	; 0x40
2000189c:	f7ff f87c 	bl	20000998 <RCC_AHB1PeriphResetCmd>
}
200018a0:	e03e      	b.n	20001920 <GPIO_DeInit+0x13c>
  else if (GPIOx == GPIOH)
200018a2:	687b      	ldr	r3, [r7, #4]
200018a4:	4a27      	ldr	r2, [pc, #156]	; (20001944 <GPIO_DeInit+0x160>)
200018a6:	4293      	cmp	r3, r2
200018a8:	d108      	bne.n	200018bc <GPIO_DeInit+0xd8>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOH, ENABLE);
200018aa:	2101      	movs	r1, #1
200018ac:	2080      	movs	r0, #128	; 0x80
200018ae:	f7ff f873 	bl	20000998 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOH, DISABLE);
200018b2:	2100      	movs	r1, #0
200018b4:	2080      	movs	r0, #128	; 0x80
200018b6:	f7ff f86f 	bl	20000998 <RCC_AHB1PeriphResetCmd>
}
200018ba:	e031      	b.n	20001920 <GPIO_DeInit+0x13c>
  else if (GPIOx == GPIOI)
200018bc:	687b      	ldr	r3, [r7, #4]
200018be:	4a22      	ldr	r2, [pc, #136]	; (20001948 <GPIO_DeInit+0x164>)
200018c0:	4293      	cmp	r3, r2
200018c2:	d10c      	bne.n	200018de <GPIO_DeInit+0xfa>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, ENABLE);
200018c4:	2380      	movs	r3, #128	; 0x80
200018c6:	005b      	lsls	r3, r3, #1
200018c8:	2101      	movs	r1, #1
200018ca:	0018      	movs	r0, r3
200018cc:	f7ff f864 	bl	20000998 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, DISABLE);
200018d0:	2380      	movs	r3, #128	; 0x80
200018d2:	005b      	lsls	r3, r3, #1
200018d4:	2100      	movs	r1, #0
200018d6:	0018      	movs	r0, r3
200018d8:	f7ff f85e 	bl	20000998 <RCC_AHB1PeriphResetCmd>
}
200018dc:	e020      	b.n	20001920 <GPIO_DeInit+0x13c>
  else if (GPIOx == GPIOJ)
200018de:	687b      	ldr	r3, [r7, #4]
200018e0:	4a1a      	ldr	r2, [pc, #104]	; (2000194c <GPIO_DeInit+0x168>)
200018e2:	4293      	cmp	r3, r2
200018e4:	d10c      	bne.n	20001900 <GPIO_DeInit+0x11c>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOJ, ENABLE);
200018e6:	2380      	movs	r3, #128	; 0x80
200018e8:	009b      	lsls	r3, r3, #2
200018ea:	2101      	movs	r1, #1
200018ec:	0018      	movs	r0, r3
200018ee:	f7ff f853 	bl	20000998 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOJ, DISABLE);
200018f2:	2380      	movs	r3, #128	; 0x80
200018f4:	009b      	lsls	r3, r3, #2
200018f6:	2100      	movs	r1, #0
200018f8:	0018      	movs	r0, r3
200018fa:	f7ff f84d 	bl	20000998 <RCC_AHB1PeriphResetCmd>
}
200018fe:	e00f      	b.n	20001920 <GPIO_DeInit+0x13c>
    if (GPIOx == GPIOK)
20001900:	687b      	ldr	r3, [r7, #4]
20001902:	4a13      	ldr	r2, [pc, #76]	; (20001950 <GPIO_DeInit+0x16c>)
20001904:	4293      	cmp	r3, r2
20001906:	d10b      	bne.n	20001920 <GPIO_DeInit+0x13c>
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, ENABLE);
20001908:	2380      	movs	r3, #128	; 0x80
2000190a:	00db      	lsls	r3, r3, #3
2000190c:	2101      	movs	r1, #1
2000190e:	0018      	movs	r0, r3
20001910:	f7ff f842 	bl	20000998 <RCC_AHB1PeriphResetCmd>
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, DISABLE);
20001914:	2380      	movs	r3, #128	; 0x80
20001916:	00db      	lsls	r3, r3, #3
20001918:	2100      	movs	r1, #0
2000191a:	0018      	movs	r0, r3
2000191c:	f7ff f83c 	bl	20000998 <RCC_AHB1PeriphResetCmd>
}
20001920:	46c0      	nop			; (mov r8, r8)
20001922:	46bd      	mov	sp, r7
20001924:	b002      	add	sp, #8
20001926:	bd80      	pop	{r7, pc}
20001928:	40020000 	andmi	r0, r2, r0
2000192c:	40020400 	andmi	r0, r2, r0, lsl #8
20001930:	40020800 	andmi	r0, r2, r0, lsl #16
20001934:	40020c00 	andmi	r0, r2, r0, lsl #24
20001938:	40021000 	andmi	r1, r2, r0
2000193c:	40021400 	andmi	r1, r2, r0, lsl #8
20001940:	40021800 	andmi	r1, r2, r0, lsl #16
20001944:	40021c00 	andmi	r1, r2, r0, lsl #24
20001948:	40022000 	andmi	r2, r2, r0
2000194c:	40022400 	andmi	r2, r2, r0, lsl #8
20001950:	40022800 	andmi	r2, r2, r0, lsl #16

20001954 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
20001954:	b580      	push	{r7, lr}
20001956:	b086      	sub	sp, #24
20001958:	af00      	add	r7, sp, #0
2000195a:	6078      	str	r0, [r7, #4]
2000195c:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
2000195e:	2300      	movs	r3, #0
20001960:	617b      	str	r3, [r7, #20]
20001962:	2300      	movs	r3, #0
20001964:	613b      	str	r3, [r7, #16]
20001966:	2300      	movs	r3, #0
20001968:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
2000196a:	2300      	movs	r3, #0
2000196c:	617b      	str	r3, [r7, #20]
2000196e:	e076      	b.n	20001a5e <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
20001970:	2201      	movs	r2, #1
20001972:	697b      	ldr	r3, [r7, #20]
20001974:	409a      	lsls	r2, r3
20001976:	0013      	movs	r3, r2
20001978:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
2000197a:	683b      	ldr	r3, [r7, #0]
2000197c:	681a      	ldr	r2, [r3, #0]
2000197e:	693b      	ldr	r3, [r7, #16]
20001980:	4013      	ands	r3, r2
20001982:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
20001984:	68fa      	ldr	r2, [r7, #12]
20001986:	693b      	ldr	r3, [r7, #16]
20001988:	429a      	cmp	r2, r3
2000198a:	d165      	bne.n	20001a58 <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
2000198c:	687b      	ldr	r3, [r7, #4]
2000198e:	681b      	ldr	r3, [r3, #0]
20001990:	697a      	ldr	r2, [r7, #20]
20001992:	0052      	lsls	r2, r2, #1
20001994:	2103      	movs	r1, #3
20001996:	4091      	lsls	r1, r2
20001998:	000a      	movs	r2, r1
2000199a:	43d2      	mvns	r2, r2
2000199c:	401a      	ands	r2, r3
2000199e:	687b      	ldr	r3, [r7, #4]
200019a0:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
200019a2:	687b      	ldr	r3, [r7, #4]
200019a4:	681a      	ldr	r2, [r3, #0]
200019a6:	683b      	ldr	r3, [r7, #0]
200019a8:	791b      	ldrb	r3, [r3, #4]
200019aa:	0019      	movs	r1, r3
200019ac:	697b      	ldr	r3, [r7, #20]
200019ae:	005b      	lsls	r3, r3, #1
200019b0:	4099      	lsls	r1, r3
200019b2:	000b      	movs	r3, r1
200019b4:	431a      	orrs	r2, r3
200019b6:	687b      	ldr	r3, [r7, #4]
200019b8:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
200019ba:	683b      	ldr	r3, [r7, #0]
200019bc:	791b      	ldrb	r3, [r3, #4]
200019be:	2b01      	cmp	r3, #1
200019c0:	d003      	beq.n	200019ca <GPIO_Init+0x76>
200019c2:	683b      	ldr	r3, [r7, #0]
200019c4:	791b      	ldrb	r3, [r3, #4]
200019c6:	2b02      	cmp	r3, #2
200019c8:	d12e      	bne.n	20001a28 <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
200019ca:	687b      	ldr	r3, [r7, #4]
200019cc:	689b      	ldr	r3, [r3, #8]
200019ce:	697a      	ldr	r2, [r7, #20]
200019d0:	0052      	lsls	r2, r2, #1
200019d2:	2103      	movs	r1, #3
200019d4:	4091      	lsls	r1, r2
200019d6:	000a      	movs	r2, r1
200019d8:	43d2      	mvns	r2, r2
200019da:	401a      	ands	r2, r3
200019dc:	687b      	ldr	r3, [r7, #4]
200019de:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
200019e0:	687b      	ldr	r3, [r7, #4]
200019e2:	689a      	ldr	r2, [r3, #8]
200019e4:	683b      	ldr	r3, [r7, #0]
200019e6:	795b      	ldrb	r3, [r3, #5]
200019e8:	0019      	movs	r1, r3
200019ea:	697b      	ldr	r3, [r7, #20]
200019ec:	005b      	lsls	r3, r3, #1
200019ee:	4099      	lsls	r1, r3
200019f0:	000b      	movs	r3, r1
200019f2:	431a      	orrs	r2, r3
200019f4:	687b      	ldr	r3, [r7, #4]
200019f6:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
200019f8:	687b      	ldr	r3, [r7, #4]
200019fa:	685b      	ldr	r3, [r3, #4]
200019fc:	697a      	ldr	r2, [r7, #20]
200019fe:	b292      	uxth	r2, r2
20001a00:	0011      	movs	r1, r2
20001a02:	2201      	movs	r2, #1
20001a04:	408a      	lsls	r2, r1
20001a06:	43d2      	mvns	r2, r2
20001a08:	401a      	ands	r2, r3
20001a0a:	687b      	ldr	r3, [r7, #4]
20001a0c:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
20001a0e:	687b      	ldr	r3, [r7, #4]
20001a10:	685b      	ldr	r3, [r3, #4]
20001a12:	683a      	ldr	r2, [r7, #0]
20001a14:	7992      	ldrb	r2, [r2, #6]
20001a16:	0011      	movs	r1, r2
20001a18:	697a      	ldr	r2, [r7, #20]
20001a1a:	b292      	uxth	r2, r2
20001a1c:	4091      	lsls	r1, r2
20001a1e:	000a      	movs	r2, r1
20001a20:	b292      	uxth	r2, r2
20001a22:	431a      	orrs	r2, r3
20001a24:	687b      	ldr	r3, [r7, #4]
20001a26:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
20001a28:	687b      	ldr	r3, [r7, #4]
20001a2a:	68db      	ldr	r3, [r3, #12]
20001a2c:	697a      	ldr	r2, [r7, #20]
20001a2e:	b292      	uxth	r2, r2
20001a30:	0052      	lsls	r2, r2, #1
20001a32:	2103      	movs	r1, #3
20001a34:	4091      	lsls	r1, r2
20001a36:	000a      	movs	r2, r1
20001a38:	43d2      	mvns	r2, r2
20001a3a:	401a      	ands	r2, r3
20001a3c:	687b      	ldr	r3, [r7, #4]
20001a3e:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
20001a40:	687b      	ldr	r3, [r7, #4]
20001a42:	68da      	ldr	r2, [r3, #12]
20001a44:	683b      	ldr	r3, [r7, #0]
20001a46:	79db      	ldrb	r3, [r3, #7]
20001a48:	0019      	movs	r1, r3
20001a4a:	697b      	ldr	r3, [r7, #20]
20001a4c:	005b      	lsls	r3, r3, #1
20001a4e:	4099      	lsls	r1, r3
20001a50:	000b      	movs	r3, r1
20001a52:	431a      	orrs	r2, r3
20001a54:	687b      	ldr	r3, [r7, #4]
20001a56:	60da      	str	r2, [r3, #12]
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
20001a58:	697b      	ldr	r3, [r7, #20]
20001a5a:	3301      	adds	r3, #1
20001a5c:	617b      	str	r3, [r7, #20]
20001a5e:	697b      	ldr	r3, [r7, #20]
20001a60:	2b0f      	cmp	r3, #15
20001a62:	d985      	bls.n	20001970 <GPIO_Init+0x1c>
    }
  }
}
20001a64:	46c0      	nop			; (mov r8, r8)
20001a66:	46bd      	mov	sp, r7
20001a68:	b006      	add	sp, #24
20001a6a:	bd80      	pop	{r7, pc}

20001a6c <GPIO_StructInit>:
  * @brief  Fills each GPIO_InitStruct member with its default value.
  * @param  GPIO_InitStruct : pointer to a GPIO_InitTypeDef structure which will be initialized.
  * @retval None
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
20001a6c:	b580      	push	{r7, lr}
20001a6e:	b082      	sub	sp, #8
20001a70:	af00      	add	r7, sp, #0
20001a72:	6078      	str	r0, [r7, #4]
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
20001a74:	687b      	ldr	r3, [r7, #4]
20001a76:	4a09      	ldr	r2, [pc, #36]	; (20001a9c <GPIO_StructInit+0x30>)
20001a78:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN;
20001a7a:	687b      	ldr	r3, [r7, #4]
20001a7c:	2200      	movs	r2, #0
20001a7e:	711a      	strb	r2, [r3, #4]
  GPIO_InitStruct->GPIO_Speed = GPIO_Speed_2MHz;
20001a80:	687b      	ldr	r3, [r7, #4]
20001a82:	2200      	movs	r2, #0
20001a84:	715a      	strb	r2, [r3, #5]
  GPIO_InitStruct->GPIO_OType = GPIO_OType_PP;
20001a86:	687b      	ldr	r3, [r7, #4]
20001a88:	2200      	movs	r2, #0
20001a8a:	719a      	strb	r2, [r3, #6]
  GPIO_InitStruct->GPIO_PuPd = GPIO_PuPd_NOPULL;
20001a8c:	687b      	ldr	r3, [r7, #4]
20001a8e:	2200      	movs	r2, #0
20001a90:	71da      	strb	r2, [r3, #7]
}
20001a92:	46c0      	nop			; (mov r8, r8)
20001a94:	46bd      	mov	sp, r7
20001a96:	b002      	add	sp, #8
20001a98:	bd80      	pop	{r7, pc}
20001a9a:	46c0      	nop			; (mov r8, r8)
20001a9c:	0000ffff 	strdeq	pc, [r0], -pc	; <UNPREDICTABLE>

20001aa0 <GPIO_PinLockConfig>:
  * @param  GPIO_Pin: specifies the port bit to be locked.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_PinLockConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
20001aa0:	b580      	push	{r7, lr}
20001aa2:	b084      	sub	sp, #16
20001aa4:	af00      	add	r7, sp, #0
20001aa6:	6078      	str	r0, [r7, #4]
20001aa8:	000a      	movs	r2, r1
20001aaa:	1cbb      	adds	r3, r7, #2
20001aac:	801a      	strh	r2, [r3, #0]
  __IO uint32_t tmp = 0x00010000;
20001aae:	2380      	movs	r3, #128	; 0x80
20001ab0:	025b      	lsls	r3, r3, #9
20001ab2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  tmp |= GPIO_Pin;
20001ab4:	1cbb      	adds	r3, r7, #2
20001ab6:	881a      	ldrh	r2, [r3, #0]
20001ab8:	68fb      	ldr	r3, [r7, #12]
20001aba:	4313      	orrs	r3, r2
20001abc:	60fb      	str	r3, [r7, #12]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
20001abe:	68fa      	ldr	r2, [r7, #12]
20001ac0:	687b      	ldr	r3, [r7, #4]
20001ac2:	61da      	str	r2, [r3, #28]
  /* Reset LCKK bit */
  GPIOx->LCKR =  GPIO_Pin;
20001ac4:	1cbb      	adds	r3, r7, #2
20001ac6:	881a      	ldrh	r2, [r3, #0]
20001ac8:	687b      	ldr	r3, [r7, #4]
20001aca:	61da      	str	r2, [r3, #28]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
20001acc:	68fa      	ldr	r2, [r7, #12]
20001ace:	687b      	ldr	r3, [r7, #4]
20001ad0:	61da      	str	r2, [r3, #28]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
20001ad2:	687b      	ldr	r3, [r7, #4]
20001ad4:	69db      	ldr	r3, [r3, #28]
20001ad6:	60fb      	str	r3, [r7, #12]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
20001ad8:	687b      	ldr	r3, [r7, #4]
20001ada:	69db      	ldr	r3, [r3, #28]
20001adc:	60fb      	str	r3, [r7, #12]
}
20001ade:	46c0      	nop			; (mov r8, r8)
20001ae0:	46bd      	mov	sp, r7
20001ae2:	b004      	add	sp, #16
20001ae4:	bd80      	pop	{r7, pc}

20001ae6 <GPIO_ReadInputDataBit>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
uint8_t GPIO_ReadInputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
20001ae6:	b580      	push	{r7, lr}
20001ae8:	b084      	sub	sp, #16
20001aea:	af00      	add	r7, sp, #0
20001aec:	6078      	str	r0, [r7, #4]
20001aee:	000a      	movs	r2, r1
20001af0:	1cbb      	adds	r3, r7, #2
20001af2:	801a      	strh	r2, [r3, #0]
  uint8_t bitstatus = 0x00;
20001af4:	230f      	movs	r3, #15
20001af6:	18fb      	adds	r3, r7, r3
20001af8:	2200      	movs	r2, #0
20001afa:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
20001afc:	687b      	ldr	r3, [r7, #4]
20001afe:	691b      	ldr	r3, [r3, #16]
20001b00:	1cba      	adds	r2, r7, #2
20001b02:	8812      	ldrh	r2, [r2, #0]
20001b04:	4013      	ands	r3, r2
20001b06:	d004      	beq.n	20001b12 <GPIO_ReadInputDataBit+0x2c>
  {
    bitstatus = (uint8_t)Bit_SET;
20001b08:	230f      	movs	r3, #15
20001b0a:	18fb      	adds	r3, r7, r3
20001b0c:	2201      	movs	r2, #1
20001b0e:	701a      	strb	r2, [r3, #0]
20001b10:	e003      	b.n	20001b1a <GPIO_ReadInputDataBit+0x34>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
20001b12:	230f      	movs	r3, #15
20001b14:	18fb      	adds	r3, r7, r3
20001b16:	2200      	movs	r2, #0
20001b18:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
20001b1a:	230f      	movs	r3, #15
20001b1c:	18fb      	adds	r3, r7, r3
20001b1e:	781b      	ldrb	r3, [r3, #0]
}
20001b20:	0018      	movs	r0, r3
20001b22:	46bd      	mov	sp, r7
20001b24:	b004      	add	sp, #16
20001b26:	bd80      	pop	{r7, pc}

20001b28 <GPIO_ReadInputData>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F42xxx/43xxx devices.
  *                      x can be (A, B, C, D and H) to select the GPIO peripheral for STM32F401xx devices. 
  * @retval GPIO input data port value.
  */
uint16_t GPIO_ReadInputData(GPIO_TypeDef* GPIOx)
{
20001b28:	b580      	push	{r7, lr}
20001b2a:	b082      	sub	sp, #8
20001b2c:	af00      	add	r7, sp, #0
20001b2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  return ((uint16_t)GPIOx->IDR);
20001b30:	687b      	ldr	r3, [r7, #4]
20001b32:	691b      	ldr	r3, [r3, #16]
20001b34:	b29b      	uxth	r3, r3
}
20001b36:	0018      	movs	r0, r3
20001b38:	46bd      	mov	sp, r7
20001b3a:	b002      	add	sp, #8
20001b3c:	bd80      	pop	{r7, pc}

20001b3e <GPIO_ReadOutputDataBit>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *          This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The output port pin value.
  */
uint8_t GPIO_ReadOutputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
20001b3e:	b580      	push	{r7, lr}
20001b40:	b084      	sub	sp, #16
20001b42:	af00      	add	r7, sp, #0
20001b44:	6078      	str	r0, [r7, #4]
20001b46:	000a      	movs	r2, r1
20001b48:	1cbb      	adds	r3, r7, #2
20001b4a:	801a      	strh	r2, [r3, #0]
  uint8_t bitstatus = 0x00;
20001b4c:	230f      	movs	r3, #15
20001b4e:	18fb      	adds	r3, r7, r3
20001b50:	2200      	movs	r2, #0
20001b52:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if (((GPIOx->ODR) & GPIO_Pin) != (uint32_t)Bit_RESET)
20001b54:	687b      	ldr	r3, [r7, #4]
20001b56:	695b      	ldr	r3, [r3, #20]
20001b58:	1cba      	adds	r2, r7, #2
20001b5a:	8812      	ldrh	r2, [r2, #0]
20001b5c:	4013      	ands	r3, r2
20001b5e:	d004      	beq.n	20001b6a <GPIO_ReadOutputDataBit+0x2c>
  {
    bitstatus = (uint8_t)Bit_SET;
20001b60:	230f      	movs	r3, #15
20001b62:	18fb      	adds	r3, r7, r3
20001b64:	2201      	movs	r2, #1
20001b66:	701a      	strb	r2, [r3, #0]
20001b68:	e003      	b.n	20001b72 <GPIO_ReadOutputDataBit+0x34>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
20001b6a:	230f      	movs	r3, #15
20001b6c:	18fb      	adds	r3, r7, r3
20001b6e:	2200      	movs	r2, #0
20001b70:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
20001b72:	230f      	movs	r3, #15
20001b74:	18fb      	adds	r3, r7, r3
20001b76:	781b      	ldrb	r3, [r3, #0]
}
20001b78:	0018      	movs	r0, r3
20001b7a:	46bd      	mov	sp, r7
20001b7c:	b004      	add	sp, #16
20001b7e:	bd80      	pop	{r7, pc}

20001b80 <GPIO_ReadOutputData>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F42xxx/43xxx devices.
  *                      x can be (A, B, C, D and H) to select the GPIO peripheral for STM32F401xx devices. 
  * @retval GPIO output data port value.
  */
uint16_t GPIO_ReadOutputData(GPIO_TypeDef* GPIOx)
{
20001b80:	b580      	push	{r7, lr}
20001b82:	b082      	sub	sp, #8
20001b84:	af00      	add	r7, sp, #0
20001b86:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  return ((uint16_t)GPIOx->ODR);
20001b88:	687b      	ldr	r3, [r7, #4]
20001b8a:	695b      	ldr	r3, [r3, #20]
20001b8c:	b29b      	uxth	r3, r3
}
20001b8e:	0018      	movs	r0, r3
20001b90:	46bd      	mov	sp, r7
20001b92:	b002      	add	sp, #8
20001b94:	bd80      	pop	{r7, pc}

20001b96 <GPIO_SetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
20001b96:	b580      	push	{r7, lr}
20001b98:	b082      	sub	sp, #8
20001b9a:	af00      	add	r7, sp, #0
20001b9c:	6078      	str	r0, [r7, #4]
20001b9e:	000a      	movs	r2, r1
20001ba0:	1cbb      	adds	r3, r7, #2
20001ba2:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRL = GPIO_Pin;
20001ba4:	687b      	ldr	r3, [r7, #4]
20001ba6:	1cba      	adds	r2, r7, #2
20001ba8:	8812      	ldrh	r2, [r2, #0]
20001baa:	831a      	strh	r2, [r3, #24]
}
20001bac:	46c0      	nop			; (mov r8, r8)
20001bae:	46bd      	mov	sp, r7
20001bb0:	b002      	add	sp, #8
20001bb2:	bd80      	pop	{r7, pc}

20001bb4 <GPIO_ResetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
20001bb4:	b580      	push	{r7, lr}
20001bb6:	b082      	sub	sp, #8
20001bb8:	af00      	add	r7, sp, #0
20001bba:	6078      	str	r0, [r7, #4]
20001bbc:	000a      	movs	r2, r1
20001bbe:	1cbb      	adds	r3, r7, #2
20001bc0:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRH = GPIO_Pin;
20001bc2:	687b      	ldr	r3, [r7, #4]
20001bc4:	1cba      	adds	r2, r7, #2
20001bc6:	8812      	ldrh	r2, [r2, #0]
20001bc8:	835a      	strh	r2, [r3, #26]
}
20001bca:	46c0      	nop			; (mov r8, r8)
20001bcc:	46bd      	mov	sp, r7
20001bce:	b002      	add	sp, #8
20001bd0:	bd80      	pop	{r7, pc}

20001bd2 <GPIO_WriteBit>:
  *            @arg Bit_RESET: to clear the port pin
  *            @arg Bit_SET: to set the port pin
  * @retval None
  */
void GPIO_WriteBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, BitAction BitVal)
{
20001bd2:	b580      	push	{r7, lr}
20001bd4:	b082      	sub	sp, #8
20001bd6:	af00      	add	r7, sp, #0
20001bd8:	6078      	str	r0, [r7, #4]
20001bda:	0008      	movs	r0, r1
20001bdc:	0011      	movs	r1, r2
20001bde:	1cbb      	adds	r3, r7, #2
20001be0:	1c02      	adds	r2, r0, #0
20001be2:	801a      	strh	r2, [r3, #0]
20001be4:	1c7b      	adds	r3, r7, #1
20001be6:	1c0a      	adds	r2, r1, #0
20001be8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal));

  if (BitVal != Bit_RESET)
20001bea:	1c7b      	adds	r3, r7, #1
20001bec:	781b      	ldrb	r3, [r3, #0]
20001bee:	2b00      	cmp	r3, #0
20001bf0:	d004      	beq.n	20001bfc <GPIO_WriteBit+0x2a>
  {
    GPIOx->BSRRL = GPIO_Pin;
20001bf2:	687b      	ldr	r3, [r7, #4]
20001bf4:	1cba      	adds	r2, r7, #2
20001bf6:	8812      	ldrh	r2, [r2, #0]
20001bf8:	831a      	strh	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRRH = GPIO_Pin ;
  }
}
20001bfa:	e003      	b.n	20001c04 <GPIO_WriteBit+0x32>
    GPIOx->BSRRH = GPIO_Pin ;
20001bfc:	687b      	ldr	r3, [r7, #4]
20001bfe:	1cba      	adds	r2, r7, #2
20001c00:	8812      	ldrh	r2, [r2, #0]
20001c02:	835a      	strh	r2, [r3, #26]
}
20001c04:	46c0      	nop			; (mov r8, r8)
20001c06:	46bd      	mov	sp, r7
20001c08:	b002      	add	sp, #8
20001c0a:	bd80      	pop	{r7, pc}

20001c0c <GPIO_Write>:
  *                      x can be (A, B, C, D and H) to select the GPIO peripheral for STM32F401xx devices. 
  * @param  PortVal: specifies the value to be written to the port output data register.
  * @retval None
  */
void GPIO_Write(GPIO_TypeDef* GPIOx, uint16_t PortVal)
{
20001c0c:	b580      	push	{r7, lr}
20001c0e:	b082      	sub	sp, #8
20001c10:	af00      	add	r7, sp, #0
20001c12:	6078      	str	r0, [r7, #4]
20001c14:	000a      	movs	r2, r1
20001c16:	1cbb      	adds	r3, r7, #2
20001c18:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR = PortVal;
20001c1a:	1cbb      	adds	r3, r7, #2
20001c1c:	881a      	ldrh	r2, [r3, #0]
20001c1e:	687b      	ldr	r3, [r7, #4]
20001c20:	615a      	str	r2, [r3, #20]
}
20001c22:	46c0      	nop			; (mov r8, r8)
20001c24:	46bd      	mov	sp, r7
20001c26:	b002      	add	sp, #8
20001c28:	bd80      	pop	{r7, pc}

20001c2a <GPIO_ToggleBits>:
  *                      x can be (A, B, C, D and H) to select the GPIO peripheral for STM32F401xx devices. 
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void GPIO_ToggleBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
20001c2a:	b580      	push	{r7, lr}
20001c2c:	b082      	sub	sp, #8
20001c2e:	af00      	add	r7, sp, #0
20001c30:	6078      	str	r0, [r7, #4]
20001c32:	000a      	movs	r2, r1
20001c34:	1cbb      	adds	r3, r7, #2
20001c36:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR ^= GPIO_Pin;
20001c38:	687b      	ldr	r3, [r7, #4]
20001c3a:	695a      	ldr	r2, [r3, #20]
20001c3c:	1cbb      	adds	r3, r7, #2
20001c3e:	881b      	ldrh	r3, [r3, #0]
20001c40:	405a      	eors	r2, r3
20001c42:	687b      	ldr	r3, [r7, #4]
20001c44:	615a      	str	r2, [r3, #20]
}
20001c46:	46c0      	nop			; (mov r8, r8)
20001c48:	46bd      	mov	sp, r7
20001c4a:	b002      	add	sp, #8
20001c4c:	bd80      	pop	{r7, pc}

20001c4e <GPIO_PinAFConfig>:
  *            @arg GPIO_AF_LTDC: Connect LTDC pins to AF14 for STM32F429xx/439xx devices. 
  *            @arg GPIO_AF_EVENTOUT: Connect EVENTOUT pins to AF15
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
20001c4e:	b580      	push	{r7, lr}
20001c50:	b084      	sub	sp, #16
20001c52:	af00      	add	r7, sp, #0
20001c54:	6078      	str	r0, [r7, #4]
20001c56:	0008      	movs	r0, r1
20001c58:	0011      	movs	r1, r2
20001c5a:	1cbb      	adds	r3, r7, #2
20001c5c:	1c02      	adds	r2, r0, #0
20001c5e:	801a      	strh	r2, [r3, #0]
20001c60:	1c7b      	adds	r3, r7, #1
20001c62:	1c0a      	adds	r2, r1, #0
20001c64:	701a      	strb	r2, [r3, #0]
  uint32_t temp = 0x00;
20001c66:	2300      	movs	r3, #0
20001c68:	60fb      	str	r3, [r7, #12]
  uint32_t temp_2 = 0x00;
20001c6a:	2300      	movs	r3, #0
20001c6c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
20001c6e:	1c7b      	adds	r3, r7, #1
20001c70:	781a      	ldrb	r2, [r3, #0]
20001c72:	1cbb      	adds	r3, r7, #2
20001c74:	881b      	ldrh	r3, [r3, #0]
20001c76:	2107      	movs	r1, #7
20001c78:	400b      	ands	r3, r1
20001c7a:	009b      	lsls	r3, r3, #2
20001c7c:	409a      	lsls	r2, r3
20001c7e:	0013      	movs	r3, r2
20001c80:	60fb      	str	r3, [r7, #12]
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
20001c82:	1cbb      	adds	r3, r7, #2
20001c84:	881b      	ldrh	r3, [r3, #0]
20001c86:	08db      	lsrs	r3, r3, #3
20001c88:	b29b      	uxth	r3, r3
20001c8a:	001a      	movs	r2, r3
20001c8c:	687b      	ldr	r3, [r7, #4]
20001c8e:	3208      	adds	r2, #8
20001c90:	0092      	lsls	r2, r2, #2
20001c92:	58d3      	ldr	r3, [r2, r3]
20001c94:	1cba      	adds	r2, r7, #2
20001c96:	8812      	ldrh	r2, [r2, #0]
20001c98:	2107      	movs	r1, #7
20001c9a:	400a      	ands	r2, r1
20001c9c:	0092      	lsls	r2, r2, #2
20001c9e:	210f      	movs	r1, #15
20001ca0:	4091      	lsls	r1, r2
20001ca2:	000a      	movs	r2, r1
20001ca4:	43d2      	mvns	r2, r2
20001ca6:	1cb9      	adds	r1, r7, #2
20001ca8:	8809      	ldrh	r1, [r1, #0]
20001caa:	08c9      	lsrs	r1, r1, #3
20001cac:	b289      	uxth	r1, r1
20001cae:	0008      	movs	r0, r1
20001cb0:	401a      	ands	r2, r3
20001cb2:	0011      	movs	r1, r2
20001cb4:	687b      	ldr	r3, [r7, #4]
20001cb6:	0002      	movs	r2, r0
20001cb8:	3208      	adds	r2, #8
20001cba:	0092      	lsls	r2, r2, #2
20001cbc:	50d1      	str	r1, [r2, r3]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
20001cbe:	1cbb      	adds	r3, r7, #2
20001cc0:	881b      	ldrh	r3, [r3, #0]
20001cc2:	08db      	lsrs	r3, r3, #3
20001cc4:	b29b      	uxth	r3, r3
20001cc6:	001a      	movs	r2, r3
20001cc8:	687b      	ldr	r3, [r7, #4]
20001cca:	3208      	adds	r2, #8
20001ccc:	0092      	lsls	r2, r2, #2
20001cce:	58d3      	ldr	r3, [r2, r3]
20001cd0:	68fa      	ldr	r2, [r7, #12]
20001cd2:	4313      	orrs	r3, r2
20001cd4:	60bb      	str	r3, [r7, #8]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
20001cd6:	1cbb      	adds	r3, r7, #2
20001cd8:	881b      	ldrh	r3, [r3, #0]
20001cda:	08db      	lsrs	r3, r3, #3
20001cdc:	b29b      	uxth	r3, r3
20001cde:	001a      	movs	r2, r3
20001ce0:	687b      	ldr	r3, [r7, #4]
20001ce2:	3208      	adds	r2, #8
20001ce4:	0092      	lsls	r2, r2, #2
20001ce6:	68b9      	ldr	r1, [r7, #8]
20001ce8:	50d1      	str	r1, [r2, r3]
}
20001cea:	46c0      	nop			; (mov r8, r8)
20001cec:	46bd      	mov	sp, r7
20001cee:	b004      	add	sp, #16
20001cf0:	bd80      	pop	{r7, pc}
20001cf2:	46c0      	nop			; (mov r8, r8)

20001cf4 <NVIC_PriorityGroupConfig>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void NVIC_PriorityGroupConfig(uint32_t NVIC_PriorityGroup)
{
20001cf4:	b580      	push	{r7, lr}
20001cf6:	b082      	sub	sp, #8
20001cf8:	af00      	add	r7, sp, #0
20001cfa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
20001cfc:	4b04      	ldr	r3, [pc, #16]	; (20001d10 <NVIC_PriorityGroupConfig+0x1c>)
20001cfe:	687a      	ldr	r2, [r7, #4]
20001d00:	4904      	ldr	r1, [pc, #16]	; (20001d14 <NVIC_PriorityGroupConfig+0x20>)
20001d02:	430a      	orrs	r2, r1
20001d04:	60da      	str	r2, [r3, #12]
}
20001d06:	46c0      	nop			; (mov r8, r8)
20001d08:	46bd      	mov	sp, r7
20001d0a:	b002      	add	sp, #8
20001d0c:	bd80      	pop	{r7, pc}
20001d0e:	46c0      	nop			; (mov r8, r8)
20001d10:	e000ed00 	and	lr, r0, r0, lsl #26
20001d14:	05fa0000 	ldrbeq	r0, [sl, #0]!

20001d18 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
20001d18:	b5b0      	push	{r4, r5, r7, lr}
20001d1a:	b084      	sub	sp, #16
20001d1c:	af00      	add	r7, sp, #0
20001d1e:	6078      	str	r0, [r7, #4]
  uint8_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
20001d20:	230f      	movs	r3, #15
20001d22:	18fb      	adds	r3, r7, r3
20001d24:	2200      	movs	r2, #0
20001d26:	701a      	strb	r2, [r3, #0]
20001d28:	230e      	movs	r3, #14
20001d2a:	18fb      	adds	r3, r7, r3
20001d2c:	2200      	movs	r2, #0
20001d2e:	701a      	strb	r2, [r3, #0]
20001d30:	230d      	movs	r3, #13
20001d32:	18fb      	adds	r3, r7, r3
20001d34:	220f      	movs	r2, #15
20001d36:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
20001d38:	687b      	ldr	r3, [r7, #4]
20001d3a:	78db      	ldrb	r3, [r3, #3]
20001d3c:	2b00      	cmp	r3, #0
20001d3e:	d04d      	beq.n	20001ddc <NVIC_Init+0xc4>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
20001d40:	4b31      	ldr	r3, [pc, #196]	; (20001e08 <NVIC_Init+0xf0>)
20001d42:	68db      	ldr	r3, [r3, #12]
20001d44:	43db      	mvns	r3, r3
20001d46:	0a1b      	lsrs	r3, r3, #8
20001d48:	b2da      	uxtb	r2, r3
20001d4a:	200f      	movs	r0, #15
20001d4c:	183b      	adds	r3, r7, r0
20001d4e:	2107      	movs	r1, #7
20001d50:	400a      	ands	r2, r1
20001d52:	701a      	strb	r2, [r3, #0]
    tmppre = (0x4 - tmppriority);
20001d54:	250e      	movs	r5, #14
20001d56:	197b      	adds	r3, r7, r5
20001d58:	183a      	adds	r2, r7, r0
20001d5a:	7812      	ldrb	r2, [r2, #0]
20001d5c:	2104      	movs	r1, #4
20001d5e:	1a8a      	subs	r2, r1, r2
20001d60:	701a      	strb	r2, [r3, #0]
    tmpsub = tmpsub >> tmppriority;
20001d62:	240d      	movs	r4, #13
20001d64:	193b      	adds	r3, r7, r4
20001d66:	781a      	ldrb	r2, [r3, #0]
20001d68:	0001      	movs	r1, r0
20001d6a:	187b      	adds	r3, r7, r1
20001d6c:	781b      	ldrb	r3, [r3, #0]
20001d6e:	411a      	asrs	r2, r3
20001d70:	193b      	adds	r3, r7, r4
20001d72:	701a      	strb	r2, [r3, #0]

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
20001d74:	687b      	ldr	r3, [r7, #4]
20001d76:	785b      	ldrb	r3, [r3, #1]
20001d78:	001a      	movs	r2, r3
20001d7a:	197b      	adds	r3, r7, r5
20001d7c:	781b      	ldrb	r3, [r3, #0]
20001d7e:	409a      	lsls	r2, r3
20001d80:	0008      	movs	r0, r1
20001d82:	187b      	adds	r3, r7, r1
20001d84:	701a      	strb	r2, [r3, #0]
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
20001d86:	687b      	ldr	r3, [r7, #4]
20001d88:	789b      	ldrb	r3, [r3, #2]
20001d8a:	193a      	adds	r2, r7, r4
20001d8c:	7812      	ldrb	r2, [r2, #0]
20001d8e:	4013      	ands	r3, r2
20001d90:	b2d9      	uxtb	r1, r3
20001d92:	183b      	adds	r3, r7, r0
20001d94:	183a      	adds	r2, r7, r0
20001d96:	7812      	ldrb	r2, [r2, #0]
20001d98:	430a      	orrs	r2, r1
20001d9a:	701a      	strb	r2, [r3, #0]
        
    tmppriority = tmppriority << 0x04;
20001d9c:	183b      	adds	r3, r7, r0
20001d9e:	183a      	adds	r2, r7, r0
20001da0:	7812      	ldrb	r2, [r2, #0]
20001da2:	0112      	lsls	r2, r2, #4
20001da4:	701a      	strb	r2, [r3, #0]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
20001da6:	4a19      	ldr	r2, [pc, #100]	; (20001e0c <NVIC_Init+0xf4>)
20001da8:	687b      	ldr	r3, [r7, #4]
20001daa:	781b      	ldrb	r3, [r3, #0]
20001dac:	0019      	movs	r1, r3
20001dae:	23c0      	movs	r3, #192	; 0xc0
20001db0:	009b      	lsls	r3, r3, #2
20001db2:	1852      	adds	r2, r2, r1
20001db4:	18d3      	adds	r3, r2, r3
20001db6:	183a      	adds	r2, r7, r0
20001db8:	7812      	ldrb	r2, [r2, #0]
20001dba:	701a      	strb	r2, [r3, #0]
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
20001dbc:	687b      	ldr	r3, [r7, #4]
20001dbe:	781b      	ldrb	r3, [r3, #0]
20001dc0:	001a      	movs	r2, r3
20001dc2:	231f      	movs	r3, #31
20001dc4:	4013      	ands	r3, r2
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
20001dc6:	4911      	ldr	r1, [pc, #68]	; (20001e0c <NVIC_Init+0xf4>)
20001dc8:	687a      	ldr	r2, [r7, #4]
20001dca:	7812      	ldrb	r2, [r2, #0]
20001dcc:	0952      	lsrs	r2, r2, #5
20001dce:	b2d2      	uxtb	r2, r2
20001dd0:	0010      	movs	r0, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
20001dd2:	2201      	movs	r2, #1
20001dd4:	409a      	lsls	r2, r3
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
20001dd6:	0083      	lsls	r3, r0, #2
20001dd8:	505a      	str	r2, [r3, r1]
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
20001dda:	e010      	b.n	20001dfe <NVIC_Init+0xe6>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
20001ddc:	687b      	ldr	r3, [r7, #4]
20001dde:	781b      	ldrb	r3, [r3, #0]
20001de0:	001a      	movs	r2, r3
20001de2:	231f      	movs	r3, #31
20001de4:	4013      	ands	r3, r2
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
20001de6:	4909      	ldr	r1, [pc, #36]	; (20001e0c <NVIC_Init+0xf4>)
20001de8:	687a      	ldr	r2, [r7, #4]
20001dea:	7812      	ldrb	r2, [r2, #0]
20001dec:	0952      	lsrs	r2, r2, #5
20001dee:	b2d2      	uxtb	r2, r2
20001df0:	0010      	movs	r0, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
20001df2:	2201      	movs	r2, #1
20001df4:	409a      	lsls	r2, r3
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
20001df6:	0003      	movs	r3, r0
20001df8:	3320      	adds	r3, #32
20001dfa:	009b      	lsls	r3, r3, #2
20001dfc:	505a      	str	r2, [r3, r1]
}
20001dfe:	46c0      	nop			; (mov r8, r8)
20001e00:	46bd      	mov	sp, r7
20001e02:	b004      	add	sp, #16
20001e04:	bdb0      	pop	{r4, r5, r7, pc}
20001e06:	46c0      	nop			; (mov r8, r8)
20001e08:	e000ed00 	and	lr, r0, r0, lsl #26
20001e0c:	e000e100 	and	lr, r0, r0, lsl #2

20001e10 <NVIC_SetVectorTable>:
  *     @arg NVIC_VectTab_FLASH: Vector Table in internal FLASH.
  * @param  Offset: Vector Table base offset field. This value must be a multiple of 0x200.
  * @retval None
  */
void NVIC_SetVectorTable(uint32_t NVIC_VectTab, uint32_t Offset)
{ 
20001e10:	b580      	push	{r7, lr}
20001e12:	b082      	sub	sp, #8
20001e14:	af00      	add	r7, sp, #0
20001e16:	6078      	str	r0, [r7, #4]
20001e18:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_VECTTAB(NVIC_VectTab));
  assert_param(IS_NVIC_OFFSET(Offset));  
   
  SCB->VTOR = NVIC_VectTab | (Offset & (uint32_t)0x1FFFFF80);
20001e1a:	683b      	ldr	r3, [r7, #0]
20001e1c:	4a05      	ldr	r2, [pc, #20]	; (20001e34 <NVIC_SetVectorTable+0x24>)
20001e1e:	4013      	ands	r3, r2
20001e20:	0019      	movs	r1, r3
20001e22:	4b05      	ldr	r3, [pc, #20]	; (20001e38 <NVIC_SetVectorTable+0x28>)
20001e24:	687a      	ldr	r2, [r7, #4]
20001e26:	430a      	orrs	r2, r1
20001e28:	609a      	str	r2, [r3, #8]
}
20001e2a:	46c0      	nop			; (mov r8, r8)
20001e2c:	46bd      	mov	sp, r7
20001e2e:	b002      	add	sp, #8
20001e30:	bd80      	pop	{r7, pc}
20001e32:	46c0      	nop			; (mov r8, r8)
20001e34:	1fffff80 	svcne	0x00ffff80
20001e38:	e000ed00 	and	lr, r0, r0, lsl #26

20001e3c <NVIC_SystemLPConfig>:
  *     @arg NVIC_LP_SLEEPONEXIT: Low Power Sleep on Exit.
  * @param  NewState: new state of LP condition. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void NVIC_SystemLPConfig(uint8_t LowPowerMode, FunctionalState NewState)
{
20001e3c:	b580      	push	{r7, lr}
20001e3e:	b082      	sub	sp, #8
20001e40:	af00      	add	r7, sp, #0
20001e42:	0002      	movs	r2, r0
20001e44:	1dfb      	adds	r3, r7, #7
20001e46:	701a      	strb	r2, [r3, #0]
20001e48:	1dbb      	adds	r3, r7, #6
20001e4a:	1c0a      	adds	r2, r1, #0
20001e4c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_LP(LowPowerMode));
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  if (NewState != DISABLE)
20001e4e:	1dbb      	adds	r3, r7, #6
20001e50:	781b      	ldrb	r3, [r3, #0]
20001e52:	2b00      	cmp	r3, #0
20001e54:	d007      	beq.n	20001e66 <NVIC_SystemLPConfig+0x2a>
  {
    SCB->SCR |= LowPowerMode;
20001e56:	4b0a      	ldr	r3, [pc, #40]	; (20001e80 <NVIC_SystemLPConfig+0x44>)
20001e58:	6919      	ldr	r1, [r3, #16]
20001e5a:	1dfb      	adds	r3, r7, #7
20001e5c:	781a      	ldrb	r2, [r3, #0]
20001e5e:	4b08      	ldr	r3, [pc, #32]	; (20001e80 <NVIC_SystemLPConfig+0x44>)
20001e60:	430a      	orrs	r2, r1
20001e62:	611a      	str	r2, [r3, #16]
  }
  else
  {
    SCB->SCR &= (uint32_t)(~(uint32_t)LowPowerMode);
  }
}
20001e64:	e007      	b.n	20001e76 <NVIC_SystemLPConfig+0x3a>
    SCB->SCR &= (uint32_t)(~(uint32_t)LowPowerMode);
20001e66:	4b06      	ldr	r3, [pc, #24]	; (20001e80 <NVIC_SystemLPConfig+0x44>)
20001e68:	691a      	ldr	r2, [r3, #16]
20001e6a:	1dfb      	adds	r3, r7, #7
20001e6c:	781b      	ldrb	r3, [r3, #0]
20001e6e:	43d9      	mvns	r1, r3
20001e70:	4b03      	ldr	r3, [pc, #12]	; (20001e80 <NVIC_SystemLPConfig+0x44>)
20001e72:	400a      	ands	r2, r1
20001e74:	611a      	str	r2, [r3, #16]
}
20001e76:	46c0      	nop			; (mov r8, r8)
20001e78:	46bd      	mov	sp, r7
20001e7a:	b002      	add	sp, #8
20001e7c:	bd80      	pop	{r7, pc}
20001e7e:	46c0      	nop			; (mov r8, r8)
20001e80:	e000ed00 	and	lr, r0, r0, lsl #26

20001e84 <SysTick_CLKSourceConfig>:
  *     @arg SysTick_CLKSource_HCLK_Div8: AHB clock divided by 8 selected as SysTick clock source.
  *     @arg SysTick_CLKSource_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void SysTick_CLKSourceConfig(uint32_t SysTick_CLKSource)
{
20001e84:	b580      	push	{r7, lr}
20001e86:	b082      	sub	sp, #8
20001e88:	af00      	add	r7, sp, #0
20001e8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(SysTick_CLKSource));
  if (SysTick_CLKSource == SysTick_CLKSource_HCLK)
20001e8c:	687b      	ldr	r3, [r7, #4]
20001e8e:	2b04      	cmp	r3, #4
20001e90:	d106      	bne.n	20001ea0 <SysTick_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SysTick_CLKSource_HCLK;
20001e92:	4b08      	ldr	r3, [pc, #32]	; (20001eb4 <SysTick_CLKSourceConfig+0x30>)
20001e94:	681a      	ldr	r2, [r3, #0]
20001e96:	4b07      	ldr	r3, [pc, #28]	; (20001eb4 <SysTick_CLKSourceConfig+0x30>)
20001e98:	2104      	movs	r1, #4
20001e9a:	430a      	orrs	r2, r1
20001e9c:	601a      	str	r2, [r3, #0]
  }
  else
  {
    SysTick->CTRL &= SysTick_CLKSource_HCLK_Div8;
  }
}
20001e9e:	e005      	b.n	20001eac <SysTick_CLKSourceConfig+0x28>
    SysTick->CTRL &= SysTick_CLKSource_HCLK_Div8;
20001ea0:	4b04      	ldr	r3, [pc, #16]	; (20001eb4 <SysTick_CLKSourceConfig+0x30>)
20001ea2:	681a      	ldr	r2, [r3, #0]
20001ea4:	4b03      	ldr	r3, [pc, #12]	; (20001eb4 <SysTick_CLKSourceConfig+0x30>)
20001ea6:	2104      	movs	r1, #4
20001ea8:	438a      	bics	r2, r1
20001eaa:	601a      	str	r2, [r3, #0]
}
20001eac:	46c0      	nop			; (mov r8, r8)
20001eae:	46bd      	mov	sp, r7
20001eb0:	b002      	add	sp, #8
20001eb2:	bd80      	pop	{r7, pc}
20001eb4:	e000e010 	and	lr, r0, r0, lsl r0

20001eb8 <bufferInit>:
#include "buffer.h"

//Nollställer bufferten
void bufferInit(FIFO *buffer) {
20001eb8:	b580      	push	{r7, lr}
20001eba:	b082      	sub	sp, #8
20001ebc:	af00      	add	r7, sp, #0
20001ebe:	6078      	str	r0, [r7, #4]
    buffer->count = 0;
20001ec0:	687b      	ldr	r3, [r7, #4]
20001ec2:	2264      	movs	r2, #100	; 0x64
20001ec4:	2100      	movs	r1, #0
20001ec6:	5499      	strb	r1, [r3, r2]
    buffer->in = 0;
20001ec8:	687b      	ldr	r3, [r7, #4]
20001eca:	2265      	movs	r2, #101	; 0x65
20001ecc:	2100      	movs	r1, #0
20001ece:	5499      	strb	r1, [r3, r2]
    buffer->out = 0;
20001ed0:	687b      	ldr	r3, [r7, #4]
20001ed2:	2266      	movs	r2, #102	; 0x66
20001ed4:	2100      	movs	r1, #0
20001ed6:	5499      	strb	r1, [r3, r2]
}
20001ed8:	46c0      	nop			; (mov r8, r8)
20001eda:	46bd      	mov	sp, r7
20001edc:	b002      	add	sp, #8
20001ede:	bd80      	pop	{r7, pc}

20001ee0 <bufferPut>:

//Lägger till ett elem i buffern.
//Returnerar 1 om det lyckades, 0 annars.
uint8_t bufferPut ( FIFO *buffer, uint8_t elem) {
20001ee0:	b580      	push	{r7, lr}
20001ee2:	b082      	sub	sp, #8
20001ee4:	af00      	add	r7, sp, #0
20001ee6:	6078      	str	r0, [r7, #4]
20001ee8:	000a      	movs	r2, r1
20001eea:	1cfb      	adds	r3, r7, #3
20001eec:	701a      	strb	r2, [r3, #0]
    //Kollar om bufferten är full.
    if (buffer->count == BUFFERSIZE){
20001eee:	687b      	ldr	r3, [r7, #4]
20001ef0:	2264      	movs	r2, #100	; 0x64
20001ef2:	5c9b      	ldrb	r3, [r3, r2]
20001ef4:	2b64      	cmp	r3, #100	; 0x64
20001ef6:	d101      	bne.n	20001efc <bufferPut+0x1c>
        return 0;
20001ef8:	2300      	movs	r3, #0
20001efa:	e01e      	b.n	20001f3a <bufferPut+0x5a>
    }

    //Lägger elem i bufferten
    buffer->buff[buffer->in++] = elem;
20001efc:	687b      	ldr	r3, [r7, #4]
20001efe:	2265      	movs	r2, #101	; 0x65
20001f00:	5c9b      	ldrb	r3, [r3, r2]
20001f02:	1c5a      	adds	r2, r3, #1
20001f04:	b2d0      	uxtb	r0, r2
20001f06:	687a      	ldr	r2, [r7, #4]
20001f08:	2165      	movs	r1, #101	; 0x65
20001f0a:	5450      	strb	r0, [r2, r1]
20001f0c:	0019      	movs	r1, r3
20001f0e:	687b      	ldr	r3, [r7, #4]
20001f10:	1cfa      	adds	r2, r7, #3
20001f12:	7812      	ldrb	r2, [r2, #0]
20001f14:	545a      	strb	r2, [r3, r1]
    buffer->count++;
20001f16:	687b      	ldr	r3, [r7, #4]
20001f18:	2264      	movs	r2, #100	; 0x64
20001f1a:	5c9b      	ldrb	r3, [r3, r2]
20001f1c:	3301      	adds	r3, #1
20001f1e:	b2d9      	uxtb	r1, r3
20001f20:	687b      	ldr	r3, [r7, #4]
20001f22:	2264      	movs	r2, #100	; 0x64
20001f24:	5499      	strb	r1, [r3, r2]

    //Justerar pekaren om vi nått slutet
    if (buffer->in == BUFFERSIZE)
20001f26:	687b      	ldr	r3, [r7, #4]
20001f28:	2265      	movs	r2, #101	; 0x65
20001f2a:	5c9b      	ldrb	r3, [r3, r2]
20001f2c:	2b64      	cmp	r3, #100	; 0x64
20001f2e:	d103      	bne.n	20001f38 <bufferPut+0x58>
        buffer->in = 0;
20001f30:	687b      	ldr	r3, [r7, #4]
20001f32:	2265      	movs	r2, #101	; 0x65
20001f34:	2100      	movs	r1, #0
20001f36:	5499      	strb	r1, [r3, r2]

    return 1;
20001f38:	2301      	movs	r3, #1
}
20001f3a:	0018      	movs	r0, r3
20001f3c:	46bd      	mov	sp, r7
20001f3e:	b002      	add	sp, #8
20001f40:	bd80      	pop	{r7, pc}

20001f42 <bufferOverrideLast>:

//Skriver över föregående elem i buffern.
//Ändrar inga indexeringsvariabler
void bufferOverrideLast ( FIFO *buffer, uint8_t elem) {
20001f42:	b580      	push	{r7, lr}
20001f44:	b084      	sub	sp, #16
20001f46:	af00      	add	r7, sp, #0
20001f48:	6078      	str	r0, [r7, #4]
20001f4a:	000a      	movs	r2, r1
20001f4c:	1cfb      	adds	r3, r7, #3
20001f4e:	701a      	strb	r2, [r3, #0]
    //Index för föregående element i buffern
    uint8_t prevIndex;

    //Om index för nästa element är 0 så blir föregående BUFFERSIZE - 1
    //annars buffer->in - 1
    prevIndex =  (buffer->in == 0) ? BUFFERSIZE - 1 : buffer->in - 1;
20001f50:	687b      	ldr	r3, [r7, #4]
20001f52:	2265      	movs	r2, #101	; 0x65
20001f54:	5c9b      	ldrb	r3, [r3, r2]
20001f56:	2b00      	cmp	r3, #0
20001f58:	d005      	beq.n	20001f66 <bufferOverrideLast+0x24>
20001f5a:	687b      	ldr	r3, [r7, #4]
20001f5c:	2265      	movs	r2, #101	; 0x65
20001f5e:	5c9b      	ldrb	r3, [r3, r2]
20001f60:	3b01      	subs	r3, #1
20001f62:	b2da      	uxtb	r2, r3
20001f64:	e000      	b.n	20001f68 <bufferOverrideLast+0x26>
20001f66:	2263      	movs	r2, #99	; 0x63
20001f68:	210f      	movs	r1, #15
20001f6a:	187b      	adds	r3, r7, r1
20001f6c:	701a      	strb	r2, [r3, #0]

    //Skriver över elem i bufferten
    buffer->buff[prevIndex] = elem;
20001f6e:	187b      	adds	r3, r7, r1
20001f70:	781b      	ldrb	r3, [r3, #0]
20001f72:	687a      	ldr	r2, [r7, #4]
20001f74:	1cf9      	adds	r1, r7, #3
20001f76:	7809      	ldrb	r1, [r1, #0]
20001f78:	54d1      	strb	r1, [r2, r3]
}
20001f7a:	46c0      	nop			; (mov r8, r8)
20001f7c:	46bd      	mov	sp, r7
20001f7e:	b004      	add	sp, #16
20001f80:	bd80      	pop	{r7, pc}

20001f82 <bufferGet>:

//Hämtar ett element från buffern till dest.
//Returnerar 1 om det lyckades, 0 annars.
uint8_t bufferGet ( FIFO *buffer, uint8_t *dest) {
20001f82:	b580      	push	{r7, lr}
20001f84:	b082      	sub	sp, #8
20001f86:	af00      	add	r7, sp, #0
20001f88:	6078      	str	r0, [r7, #4]
20001f8a:	6039      	str	r1, [r7, #0]
    //Kollar om bufferten är tom
    if (!buffer->count){
20001f8c:	687b      	ldr	r3, [r7, #4]
20001f8e:	2264      	movs	r2, #100	; 0x64
20001f90:	5c9b      	ldrb	r3, [r3, r2]
20001f92:	2b00      	cmp	r3, #0
20001f94:	d101      	bne.n	20001f9a <bufferGet+0x18>
        return 0;
20001f96:	2300      	movs	r3, #0
20001f98:	e01e      	b.n	20001fd8 <bufferGet+0x56>
    }

    //Hämtar element ur buffern till dest
    *dest = buffer->buff[buffer->out++];
20001f9a:	687b      	ldr	r3, [r7, #4]
20001f9c:	2266      	movs	r2, #102	; 0x66
20001f9e:	5c9b      	ldrb	r3, [r3, r2]
20001fa0:	1c5a      	adds	r2, r3, #1
20001fa2:	b2d0      	uxtb	r0, r2
20001fa4:	687a      	ldr	r2, [r7, #4]
20001fa6:	2166      	movs	r1, #102	; 0x66
20001fa8:	5450      	strb	r0, [r2, r1]
20001faa:	001a      	movs	r2, r3
20001fac:	687b      	ldr	r3, [r7, #4]
20001fae:	5c9a      	ldrb	r2, [r3, r2]
20001fb0:	683b      	ldr	r3, [r7, #0]
20001fb2:	701a      	strb	r2, [r3, #0]
    buffer->count--;
20001fb4:	687b      	ldr	r3, [r7, #4]
20001fb6:	2264      	movs	r2, #100	; 0x64
20001fb8:	5c9b      	ldrb	r3, [r3, r2]
20001fba:	3b01      	subs	r3, #1
20001fbc:	b2d9      	uxtb	r1, r3
20001fbe:	687b      	ldr	r3, [r7, #4]
20001fc0:	2264      	movs	r2, #100	; 0x64
20001fc2:	5499      	strb	r1, [r3, r2]

    //Justerar pekaren om vi nått slutet
    if (buffer->out == BUFFERSIZE)
20001fc4:	687b      	ldr	r3, [r7, #4]
20001fc6:	2266      	movs	r2, #102	; 0x66
20001fc8:	5c9b      	ldrb	r3, [r3, r2]
20001fca:	2b64      	cmp	r3, #100	; 0x64
20001fcc:	d103      	bne.n	20001fd6 <bufferGet+0x54>
        buffer->out = 0;
20001fce:	687b      	ldr	r3, [r7, #4]
20001fd0:	2266      	movs	r2, #102	; 0x66
20001fd2:	2100      	movs	r1, #0
20001fd4:	5499      	strb	r1, [r3, r2]

    return 1;
20001fd6:	2301      	movs	r3, #1
20001fd8:	0018      	movs	r0, r3
20001fda:	46bd      	mov	sp, r7
20001fdc:	b002      	add	sp, #8
20001fde:	bd80      	pop	{r7, pc}

20001fe0 <USART_DeInit>:
  * @param  USARTx: where x can be 1, 2, 3, 4, 5, 6, 7 or 8 to select the USART or 
  *         UART peripheral.
  * @retval None
  */
void USART_DeInit(USART_TypeDef* USARTx)
{
20001fe0:	b580      	push	{r7, lr}
20001fe2:	b082      	sub	sp, #8
20001fe4:	af00      	add	r7, sp, #0
20001fe6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  if (USARTx == USART1)
20001fe8:	687b      	ldr	r3, [r7, #4]
20001fea:	4a41      	ldr	r2, [pc, #260]	; (200020f0 <USART_DeInit+0x110>)
20001fec:	4293      	cmp	r3, r2
20001fee:	d108      	bne.n	20002002 <USART_DeInit+0x22>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, ENABLE);
20001ff0:	2101      	movs	r1, #1
20001ff2:	2010      	movs	r0, #16
20001ff4:	f7fe fd50 	bl	20000a98 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, DISABLE);
20001ff8:	2100      	movs	r1, #0
20001ffa:	2010      	movs	r0, #16
20001ffc:	f7fe fd4c 	bl	20000a98 <RCC_APB2PeriphResetCmd>
    { 
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART8, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART8, DISABLE);
    }
  }
}
20002000:	e071      	b.n	200020e6 <USART_DeInit+0x106>
  else if (USARTx == USART2)
20002002:	687b      	ldr	r3, [r7, #4]
20002004:	4a3b      	ldr	r2, [pc, #236]	; (200020f4 <USART_DeInit+0x114>)
20002006:	4293      	cmp	r3, r2
20002008:	d10c      	bne.n	20002024 <USART_DeInit+0x44>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, ENABLE);
2000200a:	2380      	movs	r3, #128	; 0x80
2000200c:	029b      	lsls	r3, r3, #10
2000200e:	2101      	movs	r1, #1
20002010:	0018      	movs	r0, r3
20002012:	f7fe fd21 	bl	20000a58 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, DISABLE);
20002016:	2380      	movs	r3, #128	; 0x80
20002018:	029b      	lsls	r3, r3, #10
2000201a:	2100      	movs	r1, #0
2000201c:	0018      	movs	r0, r3
2000201e:	f7fe fd1b 	bl	20000a58 <RCC_APB1PeriphResetCmd>
}
20002022:	e060      	b.n	200020e6 <USART_DeInit+0x106>
  else if (USARTx == USART3)
20002024:	687b      	ldr	r3, [r7, #4]
20002026:	4a34      	ldr	r2, [pc, #208]	; (200020f8 <USART_DeInit+0x118>)
20002028:	4293      	cmp	r3, r2
2000202a:	d10c      	bne.n	20002046 <USART_DeInit+0x66>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, ENABLE);
2000202c:	2380      	movs	r3, #128	; 0x80
2000202e:	02db      	lsls	r3, r3, #11
20002030:	2101      	movs	r1, #1
20002032:	0018      	movs	r0, r3
20002034:	f7fe fd10 	bl	20000a58 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, DISABLE);
20002038:	2380      	movs	r3, #128	; 0x80
2000203a:	02db      	lsls	r3, r3, #11
2000203c:	2100      	movs	r1, #0
2000203e:	0018      	movs	r0, r3
20002040:	f7fe fd0a 	bl	20000a58 <RCC_APB1PeriphResetCmd>
}
20002044:	e04f      	b.n	200020e6 <USART_DeInit+0x106>
  else if (USARTx == UART4)
20002046:	687b      	ldr	r3, [r7, #4]
20002048:	4a2c      	ldr	r2, [pc, #176]	; (200020fc <USART_DeInit+0x11c>)
2000204a:	4293      	cmp	r3, r2
2000204c:	d10c      	bne.n	20002068 <USART_DeInit+0x88>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, ENABLE);
2000204e:	2380      	movs	r3, #128	; 0x80
20002050:	031b      	lsls	r3, r3, #12
20002052:	2101      	movs	r1, #1
20002054:	0018      	movs	r0, r3
20002056:	f7fe fcff 	bl	20000a58 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, DISABLE);
2000205a:	2380      	movs	r3, #128	; 0x80
2000205c:	031b      	lsls	r3, r3, #12
2000205e:	2100      	movs	r1, #0
20002060:	0018      	movs	r0, r3
20002062:	f7fe fcf9 	bl	20000a58 <RCC_APB1PeriphResetCmd>
}
20002066:	e03e      	b.n	200020e6 <USART_DeInit+0x106>
  else if (USARTx == UART5)
20002068:	687b      	ldr	r3, [r7, #4]
2000206a:	4a25      	ldr	r2, [pc, #148]	; (20002100 <USART_DeInit+0x120>)
2000206c:	4293      	cmp	r3, r2
2000206e:	d10c      	bne.n	2000208a <USART_DeInit+0xaa>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, ENABLE);
20002070:	2380      	movs	r3, #128	; 0x80
20002072:	035b      	lsls	r3, r3, #13
20002074:	2101      	movs	r1, #1
20002076:	0018      	movs	r0, r3
20002078:	f7fe fcee 	bl	20000a58 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, DISABLE);
2000207c:	2380      	movs	r3, #128	; 0x80
2000207e:	035b      	lsls	r3, r3, #13
20002080:	2100      	movs	r1, #0
20002082:	0018      	movs	r0, r3
20002084:	f7fe fce8 	bl	20000a58 <RCC_APB1PeriphResetCmd>
}
20002088:	e02d      	b.n	200020e6 <USART_DeInit+0x106>
  else if (USARTx == USART6)
2000208a:	687b      	ldr	r3, [r7, #4]
2000208c:	4a1d      	ldr	r2, [pc, #116]	; (20002104 <USART_DeInit+0x124>)
2000208e:	4293      	cmp	r3, r2
20002090:	d108      	bne.n	200020a4 <USART_DeInit+0xc4>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, ENABLE);
20002092:	2101      	movs	r1, #1
20002094:	2020      	movs	r0, #32
20002096:	f7fe fcff 	bl	20000a98 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, DISABLE);
2000209a:	2100      	movs	r1, #0
2000209c:	2020      	movs	r0, #32
2000209e:	f7fe fcfb 	bl	20000a98 <RCC_APB2PeriphResetCmd>
}
200020a2:	e020      	b.n	200020e6 <USART_DeInit+0x106>
  else if (USARTx == UART7)
200020a4:	687b      	ldr	r3, [r7, #4]
200020a6:	4a18      	ldr	r2, [pc, #96]	; (20002108 <USART_DeInit+0x128>)
200020a8:	4293      	cmp	r3, r2
200020aa:	d10c      	bne.n	200020c6 <USART_DeInit+0xe6>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART7, ENABLE);
200020ac:	2380      	movs	r3, #128	; 0x80
200020ae:	05db      	lsls	r3, r3, #23
200020b0:	2101      	movs	r1, #1
200020b2:	0018      	movs	r0, r3
200020b4:	f7fe fcd0 	bl	20000a58 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART7, DISABLE);
200020b8:	2380      	movs	r3, #128	; 0x80
200020ba:	05db      	lsls	r3, r3, #23
200020bc:	2100      	movs	r1, #0
200020be:	0018      	movs	r0, r3
200020c0:	f7fe fcca 	bl	20000a58 <RCC_APB1PeriphResetCmd>
}
200020c4:	e00f      	b.n	200020e6 <USART_DeInit+0x106>
    if (USARTx == UART8)
200020c6:	687b      	ldr	r3, [r7, #4]
200020c8:	4a10      	ldr	r2, [pc, #64]	; (2000210c <USART_DeInit+0x12c>)
200020ca:	4293      	cmp	r3, r2
200020cc:	d10b      	bne.n	200020e6 <USART_DeInit+0x106>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART8, ENABLE);
200020ce:	2380      	movs	r3, #128	; 0x80
200020d0:	061b      	lsls	r3, r3, #24
200020d2:	2101      	movs	r1, #1
200020d4:	0018      	movs	r0, r3
200020d6:	f7fe fcbf 	bl	20000a58 <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART8, DISABLE);
200020da:	2380      	movs	r3, #128	; 0x80
200020dc:	061b      	lsls	r3, r3, #24
200020de:	2100      	movs	r1, #0
200020e0:	0018      	movs	r0, r3
200020e2:	f7fe fcb9 	bl	20000a58 <RCC_APB1PeriphResetCmd>
}
200020e6:	46c0      	nop			; (mov r8, r8)
200020e8:	46bd      	mov	sp, r7
200020ea:	b002      	add	sp, #8
200020ec:	bd80      	pop	{r7, pc}
200020ee:	46c0      	nop			; (mov r8, r8)
200020f0:	40011000 	andmi	r1, r1, r0
200020f4:	40004400 	andmi	r4, r0, r0, lsl #8
200020f8:	40004800 	andmi	r4, r0, r0, lsl #16
200020fc:	40004c00 	andmi	r4, r0, r0, lsl #24
20002100:	40005000 	andmi	r5, r0, r0
20002104:	40011400 	andmi	r1, r1, r0, lsl #8
20002108:	40007800 	andmi	r7, r0, r0, lsl #16
2000210c:	40007c00 	andmi	r7, r0, r0, lsl #24

20002110 <USART_Init>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
20002110:	b580      	push	{r7, lr}
20002112:	b08a      	sub	sp, #40	; 0x28
20002114:	af00      	add	r7, sp, #0
20002116:	6078      	str	r0, [r7, #4]
20002118:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00, apbclock = 0x00;
2000211a:	2300      	movs	r3, #0
2000211c:	627b      	str	r3, [r7, #36]	; 0x24
2000211e:	2300      	movs	r3, #0
20002120:	623b      	str	r3, [r7, #32]
  uint32_t integerdivider = 0x00;
20002122:	2300      	movs	r3, #0
20002124:	61fb      	str	r3, [r7, #28]
  uint32_t fractionaldivider = 0x00;
20002126:	2300      	movs	r3, #0
20002128:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  }

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
2000212a:	687b      	ldr	r3, [r7, #4]
2000212c:	8a1b      	ldrh	r3, [r3, #16]
2000212e:	b29b      	uxth	r3, r3
20002130:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
20002132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20002134:	4a56      	ldr	r2, [pc, #344]	; (20002290 <USART_Init+0x180>)
20002136:	4013      	ands	r3, r2
20002138:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit :
      Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
2000213a:	683b      	ldr	r3, [r7, #0]
2000213c:	88db      	ldrh	r3, [r3, #6]
2000213e:	001a      	movs	r2, r3
20002140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20002142:	4313      	orrs	r3, r2
20002144:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
20002146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20002148:	b29a      	uxth	r2, r3
2000214a:	687b      	ldr	r3, [r7, #4]
2000214c:	821a      	strh	r2, [r3, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
2000214e:	687b      	ldr	r3, [r7, #4]
20002150:	899b      	ldrh	r3, [r3, #12]
20002152:	b29b      	uxth	r3, r3
20002154:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
20002156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20002158:	4a4e      	ldr	r2, [pc, #312]	; (20002294 <USART_Init+0x184>)
2000215a:	4013      	ands	r3, r2
2000215c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
2000215e:	683b      	ldr	r3, [r7, #0]
20002160:	889a      	ldrh	r2, [r3, #4]
20002162:	683b      	ldr	r3, [r7, #0]
20002164:	891b      	ldrh	r3, [r3, #8]
20002166:	4313      	orrs	r3, r2
20002168:	b29a      	uxth	r2, r3
            USART_InitStruct->USART_Mode;
2000216a:	683b      	ldr	r3, [r7, #0]
2000216c:	895b      	ldrh	r3, [r3, #10]
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
2000216e:	4313      	orrs	r3, r2
20002170:	b29b      	uxth	r3, r3
20002172:	001a      	movs	r2, r3
20002174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20002176:	4313      	orrs	r3, r2
20002178:	627b      	str	r3, [r7, #36]	; 0x24

  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
2000217a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
2000217c:	b29a      	uxth	r2, r3
2000217e:	687b      	ldr	r3, [r7, #4]
20002180:	819a      	strh	r2, [r3, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
20002182:	687b      	ldr	r3, [r7, #4]
20002184:	8a9b      	ldrh	r3, [r3, #20]
20002186:	b29b      	uxth	r3, r3
20002188:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);
2000218a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
2000218c:	4a42      	ldr	r2, [pc, #264]	; (20002298 <USART_Init+0x188>)
2000218e:	4013      	ands	r3, r2
20002190:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART HFC : 
      Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
20002192:	683b      	ldr	r3, [r7, #0]
20002194:	899b      	ldrh	r3, [r3, #12]
20002196:	001a      	movs	r2, r3
20002198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
2000219a:	4313      	orrs	r3, r2
2000219c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
2000219e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
200021a0:	b29a      	uxth	r2, r3
200021a2:	687b      	ldr	r3, [r7, #4]
200021a4:	829a      	strh	r2, [r3, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate */
  RCC_GetClocksFreq(&RCC_ClocksStatus);
200021a6:	2308      	movs	r3, #8
200021a8:	18fb      	adds	r3, r7, r3
200021aa:	0018      	movs	r0, r3
200021ac:	f7fe f9a4 	bl	200004f8 <RCC_GetClocksFreq>

  if ((USARTx == USART1) || (USARTx == USART6))
200021b0:	687b      	ldr	r3, [r7, #4]
200021b2:	4a3a      	ldr	r2, [pc, #232]	; (2000229c <USART_Init+0x18c>)
200021b4:	4293      	cmp	r3, r2
200021b6:	d003      	beq.n	200021c0 <USART_Init+0xb0>
200021b8:	687b      	ldr	r3, [r7, #4]
200021ba:	4a39      	ldr	r2, [pc, #228]	; (200022a0 <USART_Init+0x190>)
200021bc:	4293      	cmp	r3, r2
200021be:	d104      	bne.n	200021ca <USART_Init+0xba>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
200021c0:	2308      	movs	r3, #8
200021c2:	18fb      	adds	r3, r7, r3
200021c4:	68db      	ldr	r3, [r3, #12]
200021c6:	623b      	str	r3, [r7, #32]
200021c8:	e003      	b.n	200021d2 <USART_Init+0xc2>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
200021ca:	2308      	movs	r3, #8
200021cc:	18fb      	adds	r3, r7, r3
200021ce:	689b      	ldr	r3, [r3, #8]
200021d0:	623b      	str	r3, [r7, #32]
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
200021d2:	687b      	ldr	r3, [r7, #4]
200021d4:	899b      	ldrh	r3, [r3, #12]
200021d6:	b29b      	uxth	r3, r3
200021d8:	b21b      	sxth	r3, r3
200021da:	2b00      	cmp	r3, #0
200021dc:	da0f      	bge.n	200021fe <USART_Init+0xee>
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
200021de:	6a3a      	ldr	r2, [r7, #32]
200021e0:	0013      	movs	r3, r2
200021e2:	009b      	lsls	r3, r3, #2
200021e4:	189b      	adds	r3, r3, r2
200021e6:	009a      	lsls	r2, r3, #2
200021e8:	189a      	adds	r2, r3, r2
200021ea:	683b      	ldr	r3, [r7, #0]
200021ec:	681b      	ldr	r3, [r3, #0]
200021ee:	005b      	lsls	r3, r3, #1
200021f0:	0019      	movs	r1, r3
200021f2:	0010      	movs	r0, r2
200021f4:	f000 fbf4 	bl	200029e0 <__udivsi3>
200021f8:	0003      	movs	r3, r0
200021fa:	61fb      	str	r3, [r7, #28]
200021fc:	e00e      	b.n	2000221c <USART_Init+0x10c>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
200021fe:	6a3a      	ldr	r2, [r7, #32]
20002200:	0013      	movs	r3, r2
20002202:	009b      	lsls	r3, r3, #2
20002204:	189b      	adds	r3, r3, r2
20002206:	009a      	lsls	r2, r3, #2
20002208:	189a      	adds	r2, r3, r2
2000220a:	683b      	ldr	r3, [r7, #0]
2000220c:	681b      	ldr	r3, [r3, #0]
2000220e:	009b      	lsls	r3, r3, #2
20002210:	0019      	movs	r1, r3
20002212:	0010      	movs	r0, r2
20002214:	f000 fbe4 	bl	200029e0 <__udivsi3>
20002218:	0003      	movs	r3, r0
2000221a:	61fb      	str	r3, [r7, #28]
  }
  tmpreg = (integerdivider / 100) << 4;
2000221c:	69fb      	ldr	r3, [r7, #28]
2000221e:	2164      	movs	r1, #100	; 0x64
20002220:	0018      	movs	r0, r3
20002222:	f000 fbdd 	bl	200029e0 <__udivsi3>
20002226:	0003      	movs	r3, r0
20002228:	011b      	lsls	r3, r3, #4
2000222a:	627b      	str	r3, [r7, #36]	; 0x24

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
2000222c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
2000222e:	091b      	lsrs	r3, r3, #4
20002230:	2264      	movs	r2, #100	; 0x64
20002232:	4353      	muls	r3, r2
20002234:	69fa      	ldr	r2, [r7, #28]
20002236:	1ad3      	subs	r3, r2, r3
20002238:	61bb      	str	r3, [r7, #24]

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
2000223a:	687b      	ldr	r3, [r7, #4]
2000223c:	899b      	ldrh	r3, [r3, #12]
2000223e:	b29b      	uxth	r3, r3
20002240:	b21b      	sxth	r3, r3
20002242:	2b00      	cmp	r3, #0
20002244:	da0e      	bge.n	20002264 <USART_Init+0x154>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
20002246:	69bb      	ldr	r3, [r7, #24]
20002248:	00db      	lsls	r3, r3, #3
2000224a:	3332      	adds	r3, #50	; 0x32
2000224c:	2164      	movs	r1, #100	; 0x64
2000224e:	0018      	movs	r0, r3
20002250:	f000 fbc6 	bl	200029e0 <__udivsi3>
20002254:	0003      	movs	r3, r0
20002256:	001a      	movs	r2, r3
20002258:	2307      	movs	r3, #7
2000225a:	4013      	ands	r3, r2
2000225c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
2000225e:	4313      	orrs	r3, r2
20002260:	627b      	str	r3, [r7, #36]	; 0x24
20002262:	e00d      	b.n	20002280 <USART_Init+0x170>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
20002264:	69bb      	ldr	r3, [r7, #24]
20002266:	011b      	lsls	r3, r3, #4
20002268:	3332      	adds	r3, #50	; 0x32
2000226a:	2164      	movs	r1, #100	; 0x64
2000226c:	0018      	movs	r0, r3
2000226e:	f000 fbb7 	bl	200029e0 <__udivsi3>
20002272:	0003      	movs	r3, r0
20002274:	001a      	movs	r2, r3
20002276:	230f      	movs	r3, #15
20002278:	4013      	ands	r3, r2
2000227a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
2000227c:	4313      	orrs	r3, r2
2000227e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  
  /* Write to USART BRR register */
  USARTx->BRR = (uint16_t)tmpreg;
20002280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20002282:	b29a      	uxth	r2, r3
20002284:	687b      	ldr	r3, [r7, #4]
20002286:	811a      	strh	r2, [r3, #8]
}
20002288:	46c0      	nop			; (mov r8, r8)
2000228a:	46bd      	mov	sp, r7
2000228c:	b00a      	add	sp, #40	; 0x28
2000228e:	bd80      	pop	{r7, pc}
20002290:	ffffcfff 			; <UNDEFINED> instruction: 0xffffcfff
20002294:	ffffe9f3 			; <UNDEFINED> instruction: 0xffffe9f3
20002298:	fffffcff 			; <UNDEFINED> instruction: 0xfffffcff
2000229c:	40011000 	andmi	r1, r1, r0
200022a0:	40011400 	andmi	r1, r1, r0, lsl #8

200022a4 <USART_StructInit>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void USART_StructInit(USART_InitTypeDef* USART_InitStruct)
{
200022a4:	b580      	push	{r7, lr}
200022a6:	b082      	sub	sp, #8
200022a8:	af00      	add	r7, sp, #0
200022aa:	6078      	str	r0, [r7, #4]
  /* USART_InitStruct members default value */
  USART_InitStruct->USART_BaudRate = 9600;
200022ac:	687b      	ldr	r3, [r7, #4]
200022ae:	2296      	movs	r2, #150	; 0x96
200022b0:	0192      	lsls	r2, r2, #6
200022b2:	601a      	str	r2, [r3, #0]
  USART_InitStruct->USART_WordLength = USART_WordLength_8b;
200022b4:	687b      	ldr	r3, [r7, #4]
200022b6:	2200      	movs	r2, #0
200022b8:	809a      	strh	r2, [r3, #4]
  USART_InitStruct->USART_StopBits = USART_StopBits_1;
200022ba:	687b      	ldr	r3, [r7, #4]
200022bc:	2200      	movs	r2, #0
200022be:	80da      	strh	r2, [r3, #6]
  USART_InitStruct->USART_Parity = USART_Parity_No ;
200022c0:	687b      	ldr	r3, [r7, #4]
200022c2:	2200      	movs	r2, #0
200022c4:	811a      	strh	r2, [r3, #8]
  USART_InitStruct->USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
200022c6:	687b      	ldr	r3, [r7, #4]
200022c8:	220c      	movs	r2, #12
200022ca:	815a      	strh	r2, [r3, #10]
  USART_InitStruct->USART_HardwareFlowControl = USART_HardwareFlowControl_None;  
200022cc:	687b      	ldr	r3, [r7, #4]
200022ce:	2200      	movs	r2, #0
200022d0:	819a      	strh	r2, [r3, #12]
}
200022d2:	46c0      	nop			; (mov r8, r8)
200022d4:	46bd      	mov	sp, r7
200022d6:	b002      	add	sp, #8
200022d8:	bd80      	pop	{r7, pc}

200022da <USART_ClockInit>:
  *         contains the configuration information for the specified  USART peripheral.
  * @note   The Smart Card and Synchronous modes are not available for UART4 and UART5.    
  * @retval None
  */
void USART_ClockInit(USART_TypeDef* USARTx, USART_ClockInitTypeDef* USART_ClockInitStruct)
{
200022da:	b580      	push	{r7, lr}
200022dc:	b084      	sub	sp, #16
200022de:	af00      	add	r7, sp, #0
200022e0:	6078      	str	r0, [r7, #4]
200022e2:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00;
200022e4:	2300      	movs	r3, #0
200022e6:	60fb      	str	r3, [r7, #12]
  assert_param(IS_USART_CPOL(USART_ClockInitStruct->USART_CPOL));
  assert_param(IS_USART_CPHA(USART_ClockInitStruct->USART_CPHA));
  assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));
  
/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
200022e8:	687b      	ldr	r3, [r7, #4]
200022ea:	8a1b      	ldrh	r3, [r3, #16]
200022ec:	b29b      	uxth	r3, r3
200022ee:	60fb      	str	r3, [r7, #12]
  /* Clear CLKEN, CPOL, CPHA and LBCL bits */
  tmpreg &= (uint32_t)~((uint32_t)CR2_CLOCK_CLEAR_MASK);
200022f0:	68fb      	ldr	r3, [r7, #12]
200022f2:	4a0e      	ldr	r2, [pc, #56]	; (2000232c <USART_ClockInit+0x52>)
200022f4:	4013      	ands	r3, r2
200022f6:	60fb      	str	r3, [r7, #12]
  /* Configure the USART Clock, CPOL, CPHA and LastBit ------------*/
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
200022f8:	683b      	ldr	r3, [r7, #0]
200022fa:	881a      	ldrh	r2, [r3, #0]
200022fc:	683b      	ldr	r3, [r7, #0]
200022fe:	885b      	ldrh	r3, [r3, #2]
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
20002300:	4313      	orrs	r3, r2
20002302:	b29a      	uxth	r2, r3
20002304:	683b      	ldr	r3, [r7, #0]
20002306:	889b      	ldrh	r3, [r3, #4]
20002308:	4313      	orrs	r3, r2
2000230a:	b29a      	uxth	r2, r3
2000230c:	683b      	ldr	r3, [r7, #0]
2000230e:	88db      	ldrh	r3, [r3, #6]
20002310:	4313      	orrs	r3, r2
20002312:	b29b      	uxth	r3, r3
20002314:	001a      	movs	r2, r3
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
20002316:	68fb      	ldr	r3, [r7, #12]
20002318:	4313      	orrs	r3, r2
2000231a:	60fb      	str	r3, [r7, #12]
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
2000231c:	68fb      	ldr	r3, [r7, #12]
2000231e:	b29a      	uxth	r2, r3
20002320:	687b      	ldr	r3, [r7, #4]
20002322:	821a      	strh	r2, [r3, #16]
}
20002324:	46c0      	nop			; (mov r8, r8)
20002326:	46bd      	mov	sp, r7
20002328:	b004      	add	sp, #16
2000232a:	bd80      	pop	{r7, pc}
2000232c:	fffff0ff 			; <UNDEFINED> instruction: 0xfffff0ff

20002330 <USART_ClockStructInit>:
  * @param  USART_ClockInitStruct: pointer to a USART_ClockInitTypeDef structure
  *         which will be initialized.
  * @retval None
  */
void USART_ClockStructInit(USART_ClockInitTypeDef* USART_ClockInitStruct)
{
20002330:	b580      	push	{r7, lr}
20002332:	b082      	sub	sp, #8
20002334:	af00      	add	r7, sp, #0
20002336:	6078      	str	r0, [r7, #4]
  /* USART_ClockInitStruct members default value */
  USART_ClockInitStruct->USART_Clock = USART_Clock_Disable;
20002338:	687b      	ldr	r3, [r7, #4]
2000233a:	2200      	movs	r2, #0
2000233c:	801a      	strh	r2, [r3, #0]
  USART_ClockInitStruct->USART_CPOL = USART_CPOL_Low;
2000233e:	687b      	ldr	r3, [r7, #4]
20002340:	2200      	movs	r2, #0
20002342:	805a      	strh	r2, [r3, #2]
  USART_ClockInitStruct->USART_CPHA = USART_CPHA_1Edge;
20002344:	687b      	ldr	r3, [r7, #4]
20002346:	2200      	movs	r2, #0
20002348:	809a      	strh	r2, [r3, #4]
  USART_ClockInitStruct->USART_LastBit = USART_LastBit_Disable;
2000234a:	687b      	ldr	r3, [r7, #4]
2000234c:	2200      	movs	r2, #0
2000234e:	80da      	strh	r2, [r3, #6]
}
20002350:	46c0      	nop			; (mov r8, r8)
20002352:	46bd      	mov	sp, r7
20002354:	b002      	add	sp, #8
20002356:	bd80      	pop	{r7, pc}

20002358 <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
20002358:	b580      	push	{r7, lr}
2000235a:	b082      	sub	sp, #8
2000235c:	af00      	add	r7, sp, #0
2000235e:	6078      	str	r0, [r7, #4]
20002360:	000a      	movs	r2, r1
20002362:	1cfb      	adds	r3, r7, #3
20002364:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
20002366:	1cfb      	adds	r3, r7, #3
20002368:	781b      	ldrb	r3, [r3, #0]
2000236a:	2b00      	cmp	r3, #0
2000236c:	d009      	beq.n	20002382 <USART_Cmd+0x2a>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_UE;
2000236e:	687b      	ldr	r3, [r7, #4]
20002370:	899b      	ldrh	r3, [r3, #12]
20002372:	b29b      	uxth	r3, r3
20002374:	2280      	movs	r2, #128	; 0x80
20002376:	0192      	lsls	r2, r2, #6
20002378:	4313      	orrs	r3, r2
2000237a:	b29a      	uxth	r2, r3
2000237c:	687b      	ldr	r3, [r7, #4]
2000237e:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
  }
}
20002380:	e007      	b.n	20002392 <USART_Cmd+0x3a>
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
20002382:	687b      	ldr	r3, [r7, #4]
20002384:	899b      	ldrh	r3, [r3, #12]
20002386:	b29b      	uxth	r3, r3
20002388:	4a04      	ldr	r2, [pc, #16]	; (2000239c <USART_Cmd+0x44>)
2000238a:	4013      	ands	r3, r2
2000238c:	b29a      	uxth	r2, r3
2000238e:	687b      	ldr	r3, [r7, #4]
20002390:	819a      	strh	r2, [r3, #12]
}
20002392:	46c0      	nop			; (mov r8, r8)
20002394:	46bd      	mov	sp, r7
20002396:	b002      	add	sp, #8
20002398:	bd80      	pop	{r7, pc}
2000239a:	46c0      	nop			; (mov r8, r8)
2000239c:	ffffdfff 			; <UNDEFINED> instruction: 0xffffdfff

200023a0 <USART_SetPrescaler>:
  * @param  USART_Prescaler: specifies the prescaler clock. 
  * @note   The function is used for IrDA mode with UART4 and UART5.   
  * @retval None
  */
void USART_SetPrescaler(USART_TypeDef* USARTx, uint8_t USART_Prescaler)
{ 
200023a0:	b580      	push	{r7, lr}
200023a2:	b082      	sub	sp, #8
200023a4:	af00      	add	r7, sp, #0
200023a6:	6078      	str	r0, [r7, #4]
200023a8:	000a      	movs	r2, r1
200023aa:	1cfb      	adds	r3, r7, #3
200023ac:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Clear the USART prescaler */
  USARTx->GTPR &= USART_GTPR_GT;
200023ae:	687b      	ldr	r3, [r7, #4]
200023b0:	8b1b      	ldrh	r3, [r3, #24]
200023b2:	b29b      	uxth	r3, r3
200023b4:	22ff      	movs	r2, #255	; 0xff
200023b6:	4393      	bics	r3, r2
200023b8:	b29a      	uxth	r2, r3
200023ba:	687b      	ldr	r3, [r7, #4]
200023bc:	831a      	strh	r2, [r3, #24]
  /* Set the USART prescaler */
  USARTx->GTPR |= USART_Prescaler;
200023be:	687b      	ldr	r3, [r7, #4]
200023c0:	8b1b      	ldrh	r3, [r3, #24]
200023c2:	b29a      	uxth	r2, r3
200023c4:	1cfb      	adds	r3, r7, #3
200023c6:	781b      	ldrb	r3, [r3, #0]
200023c8:	b29b      	uxth	r3, r3
200023ca:	4313      	orrs	r3, r2
200023cc:	b29a      	uxth	r2, r3
200023ce:	687b      	ldr	r3, [r7, #4]
200023d0:	831a      	strh	r2, [r3, #24]
}
200023d2:	46c0      	nop			; (mov r8, r8)
200023d4:	46bd      	mov	sp, r7
200023d6:	b002      	add	sp, #8
200023d8:	bd80      	pop	{r7, pc}

200023da <USART_OverSampling8Cmd>:
  * @param  NewState: new state of the USART 8x oversampling mode.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_OverSampling8Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
200023da:	b580      	push	{r7, lr}
200023dc:	b082      	sub	sp, #8
200023de:	af00      	add	r7, sp, #0
200023e0:	6078      	str	r0, [r7, #4]
200023e2:	000a      	movs	r2, r1
200023e4:	1cfb      	adds	r3, r7, #3
200023e6:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
200023e8:	1cfb      	adds	r3, r7, #3
200023ea:	781b      	ldrb	r3, [r3, #0]
200023ec:	2b00      	cmp	r3, #0
200023ee:	d008      	beq.n	20002402 <USART_OverSampling8Cmd+0x28>
  {
    /* Enable the 8x Oversampling mode by setting the OVER8 bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_OVER8;
200023f0:	687b      	ldr	r3, [r7, #4]
200023f2:	899b      	ldrh	r3, [r3, #12]
200023f4:	b29b      	uxth	r3, r3
200023f6:	4a09      	ldr	r2, [pc, #36]	; (2000241c <USART_OverSampling8Cmd+0x42>)
200023f8:	4313      	orrs	r3, r2
200023fa:	b29a      	uxth	r2, r3
200023fc:	687b      	ldr	r3, [r7, #4]
200023fe:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the 8x Oversampling mode by clearing the OVER8 bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_OVER8);
  }
}  
20002400:	e007      	b.n	20002412 <USART_OverSampling8Cmd+0x38>
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_OVER8);
20002402:	687b      	ldr	r3, [r7, #4]
20002404:	899b      	ldrh	r3, [r3, #12]
20002406:	b29b      	uxth	r3, r3
20002408:	045b      	lsls	r3, r3, #17
2000240a:	0c5b      	lsrs	r3, r3, #17
2000240c:	b29a      	uxth	r2, r3
2000240e:	687b      	ldr	r3, [r7, #4]
20002410:	819a      	strh	r2, [r3, #12]
}  
20002412:	46c0      	nop			; (mov r8, r8)
20002414:	46bd      	mov	sp, r7
20002416:	b002      	add	sp, #8
20002418:	bd80      	pop	{r7, pc}
2000241a:	46c0      	nop			; (mov r8, r8)
2000241c:	ffff8000 			; <UNDEFINED> instruction: 0xffff8000

20002420 <USART_OneBitMethodCmd>:
  * @param  NewState: new state of the USART one bit sampling method.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_OneBitMethodCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
20002420:	b580      	push	{r7, lr}
20002422:	b082      	sub	sp, #8
20002424:	af00      	add	r7, sp, #0
20002426:	6078      	str	r0, [r7, #4]
20002428:	000a      	movs	r2, r1
2000242a:	1cfb      	adds	r3, r7, #3
2000242c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
2000242e:	1cfb      	adds	r3, r7, #3
20002430:	781b      	ldrb	r3, [r3, #0]
20002432:	2b00      	cmp	r3, #0
20002434:	d009      	beq.n	2000244a <USART_OneBitMethodCmd+0x2a>
  {
    /* Enable the one bit method by setting the ONEBITE bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_ONEBIT;
20002436:	687b      	ldr	r3, [r7, #4]
20002438:	8a9b      	ldrh	r3, [r3, #20]
2000243a:	b29b      	uxth	r3, r3
2000243c:	2280      	movs	r2, #128	; 0x80
2000243e:	0112      	lsls	r2, r2, #4
20002440:	4313      	orrs	r3, r2
20002442:	b29a      	uxth	r2, r3
20002444:	687b      	ldr	r3, [r7, #4]
20002446:	829a      	strh	r2, [r3, #20]
  else
  {
    /* Disable the one bit method by clearing the ONEBITE bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_ONEBIT);
  }
}
20002448:	e007      	b.n	2000245a <USART_OneBitMethodCmd+0x3a>
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_ONEBIT);
2000244a:	687b      	ldr	r3, [r7, #4]
2000244c:	8a9b      	ldrh	r3, [r3, #20]
2000244e:	b29b      	uxth	r3, r3
20002450:	4a04      	ldr	r2, [pc, #16]	; (20002464 <USART_OneBitMethodCmd+0x44>)
20002452:	4013      	ands	r3, r2
20002454:	b29a      	uxth	r2, r3
20002456:	687b      	ldr	r3, [r7, #4]
20002458:	829a      	strh	r2, [r3, #20]
}
2000245a:	46c0      	nop			; (mov r8, r8)
2000245c:	46bd      	mov	sp, r7
2000245e:	b002      	add	sp, #8
20002460:	bd80      	pop	{r7, pc}
20002462:	46c0      	nop			; (mov r8, r8)
20002464:	fffff7ff 			; <UNDEFINED> instruction: 0xfffff7ff

20002468 <USART_SendData>:
  *         UART peripheral.
  * @param  Data: the data to transmit.
  * @retval None
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
20002468:	b580      	push	{r7, lr}
2000246a:	b082      	sub	sp, #8
2000246c:	af00      	add	r7, sp, #0
2000246e:	6078      	str	r0, [r7, #4]
20002470:	000a      	movs	r2, r1
20002472:	1cbb      	adds	r3, r7, #2
20002474:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 
    
  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
20002476:	1cbb      	adds	r3, r7, #2
20002478:	881b      	ldrh	r3, [r3, #0]
2000247a:	05db      	lsls	r3, r3, #23
2000247c:	0ddb      	lsrs	r3, r3, #23
2000247e:	b29a      	uxth	r2, r3
20002480:	687b      	ldr	r3, [r7, #4]
20002482:	809a      	strh	r2, [r3, #4]
}
20002484:	46c0      	nop			; (mov r8, r8)
20002486:	46bd      	mov	sp, r7
20002488:	b002      	add	sp, #8
2000248a:	bd80      	pop	{r7, pc}

2000248c <USART_ReceiveData>:
  * @param  USARTx: where x can be 1, 2, 3, 4, 5, 6, 7 or 8 to select the USART or 
  *         UART peripheral.
  * @retval The received data.
  */
uint16_t USART_ReceiveData(USART_TypeDef* USARTx)
{
2000248c:	b580      	push	{r7, lr}
2000248e:	b082      	sub	sp, #8
20002490:	af00      	add	r7, sp, #0
20002492:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Receive Data */
  return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);
20002494:	687b      	ldr	r3, [r7, #4]
20002496:	889b      	ldrh	r3, [r3, #4]
20002498:	b29b      	uxth	r3, r3
2000249a:	05db      	lsls	r3, r3, #23
2000249c:	0ddb      	lsrs	r3, r3, #23
2000249e:	b29b      	uxth	r3, r3
}
200024a0:	0018      	movs	r0, r3
200024a2:	46bd      	mov	sp, r7
200024a4:	b002      	add	sp, #8
200024a6:	bd80      	pop	{r7, pc}

200024a8 <USART_SetAddress>:
  *         UART peripheral.
  * @param  USART_Address: Indicates the address of the USART node.
  * @retval None
  */
void USART_SetAddress(USART_TypeDef* USARTx, uint8_t USART_Address)
{
200024a8:	b580      	push	{r7, lr}
200024aa:	b082      	sub	sp, #8
200024ac:	af00      	add	r7, sp, #0
200024ae:	6078      	str	r0, [r7, #4]
200024b0:	000a      	movs	r2, r1
200024b2:	1cfb      	adds	r3, r7, #3
200024b4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_ADDRESS(USART_Address)); 
    
  /* Clear the USART address */
  USARTx->CR2 &= (uint16_t)~((uint16_t)USART_CR2_ADD);
200024b6:	687b      	ldr	r3, [r7, #4]
200024b8:	8a1b      	ldrh	r3, [r3, #16]
200024ba:	b29b      	uxth	r3, r3
200024bc:	220f      	movs	r2, #15
200024be:	4393      	bics	r3, r2
200024c0:	b29a      	uxth	r2, r3
200024c2:	687b      	ldr	r3, [r7, #4]
200024c4:	821a      	strh	r2, [r3, #16]
  /* Set the USART address node */
  USARTx->CR2 |= USART_Address;
200024c6:	687b      	ldr	r3, [r7, #4]
200024c8:	8a1b      	ldrh	r3, [r3, #16]
200024ca:	b29a      	uxth	r2, r3
200024cc:	1cfb      	adds	r3, r7, #3
200024ce:	781b      	ldrb	r3, [r3, #0]
200024d0:	b29b      	uxth	r3, r3
200024d2:	4313      	orrs	r3, r2
200024d4:	b29a      	uxth	r2, r3
200024d6:	687b      	ldr	r3, [r7, #4]
200024d8:	821a      	strh	r2, [r3, #16]
}
200024da:	46c0      	nop			; (mov r8, r8)
200024dc:	46bd      	mov	sp, r7
200024de:	b002      	add	sp, #8
200024e0:	bd80      	pop	{r7, pc}

200024e2 <USART_ReceiverWakeUpCmd>:
  * @param  NewState: new state of the USART mute mode.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ReceiverWakeUpCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
200024e2:	b580      	push	{r7, lr}
200024e4:	b082      	sub	sp, #8
200024e6:	af00      	add	r7, sp, #0
200024e8:	6078      	str	r0, [r7, #4]
200024ea:	000a      	movs	r2, r1
200024ec:	1cfb      	adds	r3, r7, #3
200024ee:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 
  
  if (NewState != DISABLE)
200024f0:	1cfb      	adds	r3, r7, #3
200024f2:	781b      	ldrb	r3, [r3, #0]
200024f4:	2b00      	cmp	r3, #0
200024f6:	d008      	beq.n	2000250a <USART_ReceiverWakeUpCmd+0x28>
  {
    /* Enable the USART mute mode  by setting the RWU bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_RWU;
200024f8:	687b      	ldr	r3, [r7, #4]
200024fa:	899b      	ldrh	r3, [r3, #12]
200024fc:	b29b      	uxth	r3, r3
200024fe:	2202      	movs	r2, #2
20002500:	4313      	orrs	r3, r2
20002502:	b29a      	uxth	r2, r3
20002504:	687b      	ldr	r3, [r7, #4]
20002506:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the USART mute mode by clearing the RWU bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_RWU);
  }
}
20002508:	e007      	b.n	2000251a <USART_ReceiverWakeUpCmd+0x38>
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_RWU);
2000250a:	687b      	ldr	r3, [r7, #4]
2000250c:	899b      	ldrh	r3, [r3, #12]
2000250e:	b29b      	uxth	r3, r3
20002510:	2202      	movs	r2, #2
20002512:	4393      	bics	r3, r2
20002514:	b29a      	uxth	r2, r3
20002516:	687b      	ldr	r3, [r7, #4]
20002518:	819a      	strh	r2, [r3, #12]
}
2000251a:	46c0      	nop			; (mov r8, r8)
2000251c:	46bd      	mov	sp, r7
2000251e:	b002      	add	sp, #8
20002520:	bd80      	pop	{r7, pc}

20002522 <USART_WakeUpConfig>:
  *            @arg USART_WakeUp_IdleLine: WakeUp by an idle line detection
  *            @arg USART_WakeUp_AddressMark: WakeUp by an address mark
  * @retval None
  */
void USART_WakeUpConfig(USART_TypeDef* USARTx, uint16_t USART_WakeUp)
{
20002522:	b580      	push	{r7, lr}
20002524:	b082      	sub	sp, #8
20002526:	af00      	add	r7, sp, #0
20002528:	6078      	str	r0, [r7, #4]
2000252a:	000a      	movs	r2, r1
2000252c:	1cbb      	adds	r3, r7, #2
2000252e:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_WAKEUP(USART_WakeUp));
  
  USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_WAKE);
20002530:	687b      	ldr	r3, [r7, #4]
20002532:	899b      	ldrh	r3, [r3, #12]
20002534:	b29b      	uxth	r3, r3
20002536:	4a09      	ldr	r2, [pc, #36]	; (2000255c <USART_WakeUpConfig+0x3a>)
20002538:	4013      	ands	r3, r2
2000253a:	b29a      	uxth	r2, r3
2000253c:	687b      	ldr	r3, [r7, #4]
2000253e:	819a      	strh	r2, [r3, #12]
  USARTx->CR1 |= USART_WakeUp;
20002540:	687b      	ldr	r3, [r7, #4]
20002542:	899b      	ldrh	r3, [r3, #12]
20002544:	b29a      	uxth	r2, r3
20002546:	1cbb      	adds	r3, r7, #2
20002548:	881b      	ldrh	r3, [r3, #0]
2000254a:	4313      	orrs	r3, r2
2000254c:	b29a      	uxth	r2, r3
2000254e:	687b      	ldr	r3, [r7, #4]
20002550:	819a      	strh	r2, [r3, #12]
}
20002552:	46c0      	nop			; (mov r8, r8)
20002554:	46bd      	mov	sp, r7
20002556:	b002      	add	sp, #8
20002558:	bd80      	pop	{r7, pc}
2000255a:	46c0      	nop			; (mov r8, r8)
2000255c:	fffff7ff 			; <UNDEFINED> instruction: 0xfffff7ff

20002560 <USART_LINBreakDetectLengthConfig>:
  *            @arg USART_LINBreakDetectLength_10b: 10-bit break detection
  *            @arg USART_LINBreakDetectLength_11b: 11-bit break detection
  * @retval None
  */
void USART_LINBreakDetectLengthConfig(USART_TypeDef* USARTx, uint16_t USART_LINBreakDetectLength)
{
20002560:	b580      	push	{r7, lr}
20002562:	b082      	sub	sp, #8
20002564:	af00      	add	r7, sp, #0
20002566:	6078      	str	r0, [r7, #4]
20002568:	000a      	movs	r2, r1
2000256a:	1cbb      	adds	r3, r7, #2
2000256c:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_LIN_BREAK_DETECT_LENGTH(USART_LINBreakDetectLength));
  
  USARTx->CR2 &= (uint16_t)~((uint16_t)USART_CR2_LBDL);
2000256e:	687b      	ldr	r3, [r7, #4]
20002570:	8a1b      	ldrh	r3, [r3, #16]
20002572:	b29b      	uxth	r3, r3
20002574:	2220      	movs	r2, #32
20002576:	4393      	bics	r3, r2
20002578:	b29a      	uxth	r2, r3
2000257a:	687b      	ldr	r3, [r7, #4]
2000257c:	821a      	strh	r2, [r3, #16]
  USARTx->CR2 |= USART_LINBreakDetectLength;  
2000257e:	687b      	ldr	r3, [r7, #4]
20002580:	8a1b      	ldrh	r3, [r3, #16]
20002582:	b29a      	uxth	r2, r3
20002584:	1cbb      	adds	r3, r7, #2
20002586:	881b      	ldrh	r3, [r3, #0]
20002588:	4313      	orrs	r3, r2
2000258a:	b29a      	uxth	r2, r3
2000258c:	687b      	ldr	r3, [r7, #4]
2000258e:	821a      	strh	r2, [r3, #16]
}
20002590:	46c0      	nop			; (mov r8, r8)
20002592:	46bd      	mov	sp, r7
20002594:	b002      	add	sp, #8
20002596:	bd80      	pop	{r7, pc}

20002598 <USART_LINCmd>:
  * @param  NewState: new state of the USART LIN mode.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_LINCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
20002598:	b580      	push	{r7, lr}
2000259a:	b082      	sub	sp, #8
2000259c:	af00      	add	r7, sp, #0
2000259e:	6078      	str	r0, [r7, #4]
200025a0:	000a      	movs	r2, r1
200025a2:	1cfb      	adds	r3, r7, #3
200025a4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
200025a6:	1cfb      	adds	r3, r7, #3
200025a8:	781b      	ldrb	r3, [r3, #0]
200025aa:	2b00      	cmp	r3, #0
200025ac:	d009      	beq.n	200025c2 <USART_LINCmd+0x2a>
  {
    /* Enable the LIN mode by setting the LINEN bit in the CR2 register */
    USARTx->CR2 |= USART_CR2_LINEN;
200025ae:	687b      	ldr	r3, [r7, #4]
200025b0:	8a1b      	ldrh	r3, [r3, #16]
200025b2:	b29b      	uxth	r3, r3
200025b4:	2280      	movs	r2, #128	; 0x80
200025b6:	01d2      	lsls	r2, r2, #7
200025b8:	4313      	orrs	r3, r2
200025ba:	b29a      	uxth	r2, r3
200025bc:	687b      	ldr	r3, [r7, #4]
200025be:	821a      	strh	r2, [r3, #16]
  else
  {
    /* Disable the LIN mode by clearing the LINEN bit in the CR2 register */
    USARTx->CR2 &= (uint16_t)~((uint16_t)USART_CR2_LINEN);
  }
}
200025c0:	e007      	b.n	200025d2 <USART_LINCmd+0x3a>
    USARTx->CR2 &= (uint16_t)~((uint16_t)USART_CR2_LINEN);
200025c2:	687b      	ldr	r3, [r7, #4]
200025c4:	8a1b      	ldrh	r3, [r3, #16]
200025c6:	b29b      	uxth	r3, r3
200025c8:	4a04      	ldr	r2, [pc, #16]	; (200025dc <USART_LINCmd+0x44>)
200025ca:	4013      	ands	r3, r2
200025cc:	b29a      	uxth	r2, r3
200025ce:	687b      	ldr	r3, [r7, #4]
200025d0:	821a      	strh	r2, [r3, #16]
}
200025d2:	46c0      	nop			; (mov r8, r8)
200025d4:	46bd      	mov	sp, r7
200025d6:	b002      	add	sp, #8
200025d8:	bd80      	pop	{r7, pc}
200025da:	46c0      	nop			; (mov r8, r8)
200025dc:	ffffbfff 			; <UNDEFINED> instruction: 0xffffbfff

200025e0 <USART_SendBreak>:
  * @param  USARTx: where x can be 1, 2, 3, 4, 5, 6, 7 or 8 to select the USART or 
  *         UART peripheral.
  * @retval None
  */
void USART_SendBreak(USART_TypeDef* USARTx)
{
200025e0:	b580      	push	{r7, lr}
200025e2:	b082      	sub	sp, #8
200025e4:	af00      	add	r7, sp, #0
200025e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Send break characters */
  USARTx->CR1 |= USART_CR1_SBK;
200025e8:	687b      	ldr	r3, [r7, #4]
200025ea:	899b      	ldrh	r3, [r3, #12]
200025ec:	b29b      	uxth	r3, r3
200025ee:	2201      	movs	r2, #1
200025f0:	4313      	orrs	r3, r2
200025f2:	b29a      	uxth	r2, r3
200025f4:	687b      	ldr	r3, [r7, #4]
200025f6:	819a      	strh	r2, [r3, #12]
}
200025f8:	46c0      	nop			; (mov r8, r8)
200025fa:	46bd      	mov	sp, r7
200025fc:	b002      	add	sp, #8
200025fe:	bd80      	pop	{r7, pc}

20002600 <USART_HalfDuplexCmd>:
  * @param  NewState: new state of the USART Communication.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_HalfDuplexCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
20002600:	b580      	push	{r7, lr}
20002602:	b082      	sub	sp, #8
20002604:	af00      	add	r7, sp, #0
20002606:	6078      	str	r0, [r7, #4]
20002608:	000a      	movs	r2, r1
2000260a:	1cfb      	adds	r3, r7, #3
2000260c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
2000260e:	1cfb      	adds	r3, r7, #3
20002610:	781b      	ldrb	r3, [r3, #0]
20002612:	2b00      	cmp	r3, #0
20002614:	d008      	beq.n	20002628 <USART_HalfDuplexCmd+0x28>
  {
    /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_HDSEL;
20002616:	687b      	ldr	r3, [r7, #4]
20002618:	8a9b      	ldrh	r3, [r3, #20]
2000261a:	b29b      	uxth	r3, r3
2000261c:	2208      	movs	r2, #8
2000261e:	4313      	orrs	r3, r2
20002620:	b29a      	uxth	r2, r3
20002622:	687b      	ldr	r3, [r7, #4]
20002624:	829a      	strh	r2, [r3, #20]
  else
  {
    /* Disable the Half-Duplex mode by clearing the HDSEL bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_HDSEL);
  }
}
20002626:	e007      	b.n	20002638 <USART_HalfDuplexCmd+0x38>
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_HDSEL);
20002628:	687b      	ldr	r3, [r7, #4]
2000262a:	8a9b      	ldrh	r3, [r3, #20]
2000262c:	b29b      	uxth	r3, r3
2000262e:	2208      	movs	r2, #8
20002630:	4393      	bics	r3, r2
20002632:	b29a      	uxth	r2, r3
20002634:	687b      	ldr	r3, [r7, #4]
20002636:	829a      	strh	r2, [r3, #20]
}
20002638:	46c0      	nop			; (mov r8, r8)
2000263a:	46bd      	mov	sp, r7
2000263c:	b002      	add	sp, #8
2000263e:	bd80      	pop	{r7, pc}

20002640 <USART_SetGuardTime>:
  *         UART peripheral.
  * @param  USART_GuardTime: specifies the guard time.   
  * @retval None
  */
void USART_SetGuardTime(USART_TypeDef* USARTx, uint8_t USART_GuardTime)
{    
20002640:	b580      	push	{r7, lr}
20002642:	b082      	sub	sp, #8
20002644:	af00      	add	r7, sp, #0
20002646:	6078      	str	r0, [r7, #4]
20002648:	000a      	movs	r2, r1
2000264a:	1cfb      	adds	r3, r7, #3
2000264c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_USART_1236_PERIPH(USARTx));
  
  /* Clear the USART Guard time */
  USARTx->GTPR &= USART_GTPR_PSC;
2000264e:	687b      	ldr	r3, [r7, #4]
20002650:	8b1b      	ldrh	r3, [r3, #24]
20002652:	b29b      	uxth	r3, r3
20002654:	22ff      	movs	r2, #255	; 0xff
20002656:	4013      	ands	r3, r2
20002658:	b29a      	uxth	r2, r3
2000265a:	687b      	ldr	r3, [r7, #4]
2000265c:	831a      	strh	r2, [r3, #24]
  /* Set the USART guard time */
  USARTx->GTPR |= (uint16_t)((uint16_t)USART_GuardTime << 0x08);
2000265e:	687b      	ldr	r3, [r7, #4]
20002660:	8b1b      	ldrh	r3, [r3, #24]
20002662:	b29a      	uxth	r2, r3
20002664:	1cfb      	adds	r3, r7, #3
20002666:	781b      	ldrb	r3, [r3, #0]
20002668:	b29b      	uxth	r3, r3
2000266a:	021b      	lsls	r3, r3, #8
2000266c:	b29b      	uxth	r3, r3
2000266e:	4313      	orrs	r3, r2
20002670:	b29a      	uxth	r2, r3
20002672:	687b      	ldr	r3, [r7, #4]
20002674:	831a      	strh	r2, [r3, #24]
}
20002676:	46c0      	nop			; (mov r8, r8)
20002678:	46bd      	mov	sp, r7
2000267a:	b002      	add	sp, #8
2000267c:	bd80      	pop	{r7, pc}

2000267e <USART_SmartCardCmd>:
  * @param  NewState: new state of the Smart Card mode.
  *          This parameter can be: ENABLE or DISABLE.      
  * @retval None
  */
void USART_SmartCardCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
2000267e:	b580      	push	{r7, lr}
20002680:	b082      	sub	sp, #8
20002682:	af00      	add	r7, sp, #0
20002684:	6078      	str	r0, [r7, #4]
20002686:	000a      	movs	r2, r1
20002688:	1cfb      	adds	r3, r7, #3
2000268a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_USART_1236_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
2000268c:	1cfb      	adds	r3, r7, #3
2000268e:	781b      	ldrb	r3, [r3, #0]
20002690:	2b00      	cmp	r3, #0
20002692:	d008      	beq.n	200026a6 <USART_SmartCardCmd+0x28>
  {
    /* Enable the SC mode by setting the SCEN bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_SCEN;
20002694:	687b      	ldr	r3, [r7, #4]
20002696:	8a9b      	ldrh	r3, [r3, #20]
20002698:	b29b      	uxth	r3, r3
2000269a:	2220      	movs	r2, #32
2000269c:	4313      	orrs	r3, r2
2000269e:	b29a      	uxth	r2, r3
200026a0:	687b      	ldr	r3, [r7, #4]
200026a2:	829a      	strh	r2, [r3, #20]
  else
  {
    /* Disable the SC mode by clearing the SCEN bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_SCEN);
  }
}
200026a4:	e007      	b.n	200026b6 <USART_SmartCardCmd+0x38>
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_SCEN);
200026a6:	687b      	ldr	r3, [r7, #4]
200026a8:	8a9b      	ldrh	r3, [r3, #20]
200026aa:	b29b      	uxth	r3, r3
200026ac:	2220      	movs	r2, #32
200026ae:	4393      	bics	r3, r2
200026b0:	b29a      	uxth	r2, r3
200026b2:	687b      	ldr	r3, [r7, #4]
200026b4:	829a      	strh	r2, [r3, #20]
}
200026b6:	46c0      	nop			; (mov r8, r8)
200026b8:	46bd      	mov	sp, r7
200026ba:	b002      	add	sp, #8
200026bc:	bd80      	pop	{r7, pc}

200026be <USART_SmartCardNACKCmd>:
  * @param  NewState: new state of the NACK transmission.
  *          This parameter can be: ENABLE or DISABLE.  
  * @retval None
  */
void USART_SmartCardNACKCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
200026be:	b580      	push	{r7, lr}
200026c0:	b082      	sub	sp, #8
200026c2:	af00      	add	r7, sp, #0
200026c4:	6078      	str	r0, [r7, #4]
200026c6:	000a      	movs	r2, r1
200026c8:	1cfb      	adds	r3, r7, #3
200026ca:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_USART_1236_PERIPH(USARTx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
200026cc:	1cfb      	adds	r3, r7, #3
200026ce:	781b      	ldrb	r3, [r3, #0]
200026d0:	2b00      	cmp	r3, #0
200026d2:	d008      	beq.n	200026e6 <USART_SmartCardNACKCmd+0x28>
  {
    /* Enable the NACK transmission by setting the NACK bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_NACK;
200026d4:	687b      	ldr	r3, [r7, #4]
200026d6:	8a9b      	ldrh	r3, [r3, #20]
200026d8:	b29b      	uxth	r3, r3
200026da:	2210      	movs	r2, #16
200026dc:	4313      	orrs	r3, r2
200026de:	b29a      	uxth	r2, r3
200026e0:	687b      	ldr	r3, [r7, #4]
200026e2:	829a      	strh	r2, [r3, #20]
  else
  {
    /* Disable the NACK transmission by clearing the NACK bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_NACK);
  }
}
200026e4:	e007      	b.n	200026f6 <USART_SmartCardNACKCmd+0x38>
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_NACK);
200026e6:	687b      	ldr	r3, [r7, #4]
200026e8:	8a9b      	ldrh	r3, [r3, #20]
200026ea:	b29b      	uxth	r3, r3
200026ec:	2210      	movs	r2, #16
200026ee:	4393      	bics	r3, r2
200026f0:	b29a      	uxth	r2, r3
200026f2:	687b      	ldr	r3, [r7, #4]
200026f4:	829a      	strh	r2, [r3, #20]
}
200026f6:	46c0      	nop			; (mov r8, r8)
200026f8:	46bd      	mov	sp, r7
200026fa:	b002      	add	sp, #8
200026fc:	bd80      	pop	{r7, pc}

200026fe <USART_IrDAConfig>:
  *            @arg USART_IrDAMode_LowPower
  *            @arg USART_IrDAMode_Normal
  * @retval None
  */
void USART_IrDAConfig(USART_TypeDef* USARTx, uint16_t USART_IrDAMode)
{
200026fe:	b580      	push	{r7, lr}
20002700:	b082      	sub	sp, #8
20002702:	af00      	add	r7, sp, #0
20002704:	6078      	str	r0, [r7, #4]
20002706:	000a      	movs	r2, r1
20002708:	1cbb      	adds	r3, r7, #2
2000270a:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_IRDA_MODE(USART_IrDAMode));
    
  USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_IRLP);
2000270c:	687b      	ldr	r3, [r7, #4]
2000270e:	8a9b      	ldrh	r3, [r3, #20]
20002710:	b29b      	uxth	r3, r3
20002712:	2204      	movs	r2, #4
20002714:	4393      	bics	r3, r2
20002716:	b29a      	uxth	r2, r3
20002718:	687b      	ldr	r3, [r7, #4]
2000271a:	829a      	strh	r2, [r3, #20]
  USARTx->CR3 |= USART_IrDAMode;
2000271c:	687b      	ldr	r3, [r7, #4]
2000271e:	8a9b      	ldrh	r3, [r3, #20]
20002720:	b29a      	uxth	r2, r3
20002722:	1cbb      	adds	r3, r7, #2
20002724:	881b      	ldrh	r3, [r3, #0]
20002726:	4313      	orrs	r3, r2
20002728:	b29a      	uxth	r2, r3
2000272a:	687b      	ldr	r3, [r7, #4]
2000272c:	829a      	strh	r2, [r3, #20]
}
2000272e:	46c0      	nop			; (mov r8, r8)
20002730:	46bd      	mov	sp, r7
20002732:	b002      	add	sp, #8
20002734:	bd80      	pop	{r7, pc}

20002736 <USART_IrDACmd>:
  * @param  NewState: new state of the IrDA mode.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_IrDACmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
20002736:	b580      	push	{r7, lr}
20002738:	b082      	sub	sp, #8
2000273a:	af00      	add	r7, sp, #0
2000273c:	6078      	str	r0, [r7, #4]
2000273e:	000a      	movs	r2, r1
20002740:	1cfb      	adds	r3, r7, #3
20002742:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
    
  if (NewState != DISABLE)
20002744:	1cfb      	adds	r3, r7, #3
20002746:	781b      	ldrb	r3, [r3, #0]
20002748:	2b00      	cmp	r3, #0
2000274a:	d008      	beq.n	2000275e <USART_IrDACmd+0x28>
  {
    /* Enable the IrDA mode by setting the IREN bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_IREN;
2000274c:	687b      	ldr	r3, [r7, #4]
2000274e:	8a9b      	ldrh	r3, [r3, #20]
20002750:	b29b      	uxth	r3, r3
20002752:	2202      	movs	r2, #2
20002754:	4313      	orrs	r3, r2
20002756:	b29a      	uxth	r2, r3
20002758:	687b      	ldr	r3, [r7, #4]
2000275a:	829a      	strh	r2, [r3, #20]
  else
  {
    /* Disable the IrDA mode by clearing the IREN bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_IREN);
  }
}
2000275c:	e007      	b.n	2000276e <USART_IrDACmd+0x38>
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_IREN);
2000275e:	687b      	ldr	r3, [r7, #4]
20002760:	8a9b      	ldrh	r3, [r3, #20]
20002762:	b29b      	uxth	r3, r3
20002764:	2202      	movs	r2, #2
20002766:	4393      	bics	r3, r2
20002768:	b29a      	uxth	r2, r3
2000276a:	687b      	ldr	r3, [r7, #4]
2000276c:	829a      	strh	r2, [r3, #20]
}
2000276e:	46c0      	nop			; (mov r8, r8)
20002770:	46bd      	mov	sp, r7
20002772:	b002      	add	sp, #8
20002774:	bd80      	pop	{r7, pc}

20002776 <USART_DMACmd>:
  * @param  NewState: new state of the DMA Request sources.
  *          This parameter can be: ENABLE or DISABLE.   
  * @retval None
  */
void USART_DMACmd(USART_TypeDef* USARTx, uint16_t USART_DMAReq, FunctionalState NewState)
{
20002776:	b580      	push	{r7, lr}
20002778:	b082      	sub	sp, #8
2000277a:	af00      	add	r7, sp, #0
2000277c:	6078      	str	r0, [r7, #4]
2000277e:	0008      	movs	r0, r1
20002780:	0011      	movs	r1, r2
20002782:	1cbb      	adds	r3, r7, #2
20002784:	1c02      	adds	r2, r0, #0
20002786:	801a      	strh	r2, [r3, #0]
20002788:	1c7b      	adds	r3, r7, #1
2000278a:	1c0a      	adds	r2, r1, #0
2000278c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DMAREQ(USART_DMAReq));  
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 

  if (NewState != DISABLE)
2000278e:	1c7b      	adds	r3, r7, #1
20002790:	781b      	ldrb	r3, [r3, #0]
20002792:	2b00      	cmp	r3, #0
20002794:	d009      	beq.n	200027aa <USART_DMACmd+0x34>
  {
    /* Enable the DMA transfer for selected requests by setting the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 |= USART_DMAReq;
20002796:	687b      	ldr	r3, [r7, #4]
20002798:	8a9b      	ldrh	r3, [r3, #20]
2000279a:	b29a      	uxth	r2, r3
2000279c:	1cbb      	adds	r3, r7, #2
2000279e:	881b      	ldrh	r3, [r3, #0]
200027a0:	4313      	orrs	r3, r2
200027a2:	b29a      	uxth	r2, r3
200027a4:	687b      	ldr	r3, [r7, #4]
200027a6:	829a      	strh	r2, [r3, #20]
  {
    /* Disable the DMA transfer for selected requests by clearing the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 &= (uint16_t)~USART_DMAReq;
  }
}
200027a8:	e00a      	b.n	200027c0 <USART_DMACmd+0x4a>
    USARTx->CR3 &= (uint16_t)~USART_DMAReq;
200027aa:	687b      	ldr	r3, [r7, #4]
200027ac:	8a9b      	ldrh	r3, [r3, #20]
200027ae:	b29b      	uxth	r3, r3
200027b0:	1cba      	adds	r2, r7, #2
200027b2:	8812      	ldrh	r2, [r2, #0]
200027b4:	43d2      	mvns	r2, r2
200027b6:	b292      	uxth	r2, r2
200027b8:	4013      	ands	r3, r2
200027ba:	b29a      	uxth	r2, r3
200027bc:	687b      	ldr	r3, [r7, #4]
200027be:	829a      	strh	r2, [r3, #20]
}
200027c0:	46c0      	nop			; (mov r8, r8)
200027c2:	46bd      	mov	sp, r7
200027c4:	b002      	add	sp, #8
200027c6:	bd80      	pop	{r7, pc}

200027c8 <USART_ITConfig>:
  * @param  NewState: new state of the specified USARTx interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState)
{
200027c8:	b580      	push	{r7, lr}
200027ca:	b086      	sub	sp, #24
200027cc:	af00      	add	r7, sp, #0
200027ce:	6078      	str	r0, [r7, #4]
200027d0:	0008      	movs	r0, r1
200027d2:	0011      	movs	r1, r2
200027d4:	1cbb      	adds	r3, r7, #2
200027d6:	1c02      	adds	r2, r0, #0
200027d8:	801a      	strh	r2, [r3, #0]
200027da:	1c7b      	adds	r3, r7, #1
200027dc:	1c0a      	adds	r2, r1, #0
200027de:	701a      	strb	r2, [r3, #0]
  uint32_t usartreg = 0x00, itpos = 0x00, itmask = 0x00;
200027e0:	2300      	movs	r3, #0
200027e2:	613b      	str	r3, [r7, #16]
200027e4:	2300      	movs	r3, #0
200027e6:	60fb      	str	r3, [r7, #12]
200027e8:	2300      	movs	r3, #0
200027ea:	60bb      	str	r3, [r7, #8]
  uint32_t usartxbase = 0x00;
200027ec:	2300      	movs	r3, #0
200027ee:	617b      	str	r3, [r7, #20]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  usartxbase = (uint32_t)USARTx;
200027f0:	687b      	ldr	r3, [r7, #4]
200027f2:	617b      	str	r3, [r7, #20]

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
200027f4:	1cbb      	adds	r3, r7, #2
200027f6:	881b      	ldrh	r3, [r3, #0]
200027f8:	b2db      	uxtb	r3, r3
200027fa:	095b      	lsrs	r3, r3, #5
200027fc:	b2db      	uxtb	r3, r3
200027fe:	613b      	str	r3, [r7, #16]

  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
20002800:	1cbb      	adds	r3, r7, #2
20002802:	881b      	ldrh	r3, [r3, #0]
20002804:	221f      	movs	r2, #31
20002806:	4013      	ands	r3, r2
20002808:	60fb      	str	r3, [r7, #12]
  itmask = (((uint32_t)0x01) << itpos);
2000280a:	2201      	movs	r2, #1
2000280c:	68fb      	ldr	r3, [r7, #12]
2000280e:	409a      	lsls	r2, r3
20002810:	0013      	movs	r3, r2
20002812:	60bb      	str	r3, [r7, #8]
    
  if (usartreg == 0x01) /* The IT is in CR1 register */
20002814:	693b      	ldr	r3, [r7, #16]
20002816:	2b01      	cmp	r3, #1
20002818:	d103      	bne.n	20002822 <USART_ITConfig+0x5a>
  {
    usartxbase += 0x0C;
2000281a:	697b      	ldr	r3, [r7, #20]
2000281c:	330c      	adds	r3, #12
2000281e:	617b      	str	r3, [r7, #20]
20002820:	e009      	b.n	20002836 <USART_ITConfig+0x6e>
  }
  else if (usartreg == 0x02) /* The IT is in CR2 register */
20002822:	693b      	ldr	r3, [r7, #16]
20002824:	2b02      	cmp	r3, #2
20002826:	d103      	bne.n	20002830 <USART_ITConfig+0x68>
  {
    usartxbase += 0x10;
20002828:	697b      	ldr	r3, [r7, #20]
2000282a:	3310      	adds	r3, #16
2000282c:	617b      	str	r3, [r7, #20]
2000282e:	e002      	b.n	20002836 <USART_ITConfig+0x6e>
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14; 
20002830:	697b      	ldr	r3, [r7, #20]
20002832:	3314      	adds	r3, #20
20002834:	617b      	str	r3, [r7, #20]
  }
  if (NewState != DISABLE)
20002836:	1c7b      	adds	r3, r7, #1
20002838:	781b      	ldrb	r3, [r3, #0]
2000283a:	2b00      	cmp	r3, #0
2000283c:	d006      	beq.n	2000284c <USART_ITConfig+0x84>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
2000283e:	697b      	ldr	r3, [r7, #20]
20002840:	6819      	ldr	r1, [r3, #0]
20002842:	697b      	ldr	r3, [r7, #20]
20002844:	68ba      	ldr	r2, [r7, #8]
20002846:	430a      	orrs	r2, r1
20002848:	601a      	str	r2, [r3, #0]
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
  }
}
2000284a:	e006      	b.n	2000285a <USART_ITConfig+0x92>
    *(__IO uint32_t*)usartxbase &= ~itmask;
2000284c:	697b      	ldr	r3, [r7, #20]
2000284e:	681a      	ldr	r2, [r3, #0]
20002850:	68bb      	ldr	r3, [r7, #8]
20002852:	43d9      	mvns	r1, r3
20002854:	697b      	ldr	r3, [r7, #20]
20002856:	400a      	ands	r2, r1
20002858:	601a      	str	r2, [r3, #0]
}
2000285a:	46c0      	nop			; (mov r8, r8)
2000285c:	46bd      	mov	sp, r7
2000285e:	b006      	add	sp, #24
20002860:	bd80      	pop	{r7, pc}

20002862 <USART_GetFlagStatus>:
  *            @arg USART_FLAG_FE:   Framing Error flag
  *            @arg USART_FLAG_PE:   Parity Error flag
  * @retval The new state of USART_FLAG (SET or RESET).
  */
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
20002862:	b580      	push	{r7, lr}
20002864:	b084      	sub	sp, #16
20002866:	af00      	add	r7, sp, #0
20002868:	6078      	str	r0, [r7, #4]
2000286a:	000a      	movs	r2, r1
2000286c:	1cbb      	adds	r3, r7, #2
2000286e:	801a      	strh	r2, [r3, #0]
  FlagStatus bitstatus = RESET;
20002870:	230f      	movs	r3, #15
20002872:	18fb      	adds	r3, r7, r3
20002874:	2200      	movs	r2, #0
20002876:	701a      	strb	r2, [r3, #0]
  if (USART_FLAG == USART_FLAG_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  if ((USARTx->SR & USART_FLAG) != (uint16_t)RESET)
20002878:	687b      	ldr	r3, [r7, #4]
2000287a:	881b      	ldrh	r3, [r3, #0]
2000287c:	b29b      	uxth	r3, r3
2000287e:	1cba      	adds	r2, r7, #2
20002880:	8812      	ldrh	r2, [r2, #0]
20002882:	4013      	ands	r3, r2
20002884:	b29b      	uxth	r3, r3
20002886:	2b00      	cmp	r3, #0
20002888:	d004      	beq.n	20002894 <USART_GetFlagStatus+0x32>
  {
    bitstatus = SET;
2000288a:	230f      	movs	r3, #15
2000288c:	18fb      	adds	r3, r7, r3
2000288e:	2201      	movs	r2, #1
20002890:	701a      	strb	r2, [r3, #0]
20002892:	e003      	b.n	2000289c <USART_GetFlagStatus+0x3a>
  }
  else
  {
    bitstatus = RESET;
20002894:	230f      	movs	r3, #15
20002896:	18fb      	adds	r3, r7, r3
20002898:	2200      	movs	r2, #0
2000289a:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
2000289c:	230f      	movs	r3, #15
2000289e:	18fb      	adds	r3, r7, r3
200028a0:	781b      	ldrb	r3, [r3, #0]
}
200028a2:	0018      	movs	r0, r3
200028a4:	46bd      	mov	sp, r7
200028a6:	b004      	add	sp, #16
200028a8:	bd80      	pop	{r7, pc}

200028aa <USART_ClearFlag>:
  *          (USART_SendData()).
  *   
  * @retval None
  */
void USART_ClearFlag(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
200028aa:	b580      	push	{r7, lr}
200028ac:	b082      	sub	sp, #8
200028ae:	af00      	add	r7, sp, #0
200028b0:	6078      	str	r0, [r7, #4]
200028b2:	000a      	movs	r2, r1
200028b4:	1cbb      	adds	r3, r7, #2
200028b6:	801a      	strh	r2, [r3, #0]
  if ((USART_FLAG & USART_FLAG_CTS) == USART_FLAG_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
       
  USARTx->SR = (uint16_t)~USART_FLAG;
200028b8:	1cbb      	adds	r3, r7, #2
200028ba:	881b      	ldrh	r3, [r3, #0]
200028bc:	43db      	mvns	r3, r3
200028be:	b29a      	uxth	r2, r3
200028c0:	687b      	ldr	r3, [r7, #4]
200028c2:	801a      	strh	r2, [r3, #0]
}
200028c4:	46c0      	nop			; (mov r8, r8)
200028c6:	46bd      	mov	sp, r7
200028c8:	b002      	add	sp, #8
200028ca:	bd80      	pop	{r7, pc}

200028cc <USART_GetITStatus>:
  *            @arg USART_IT_FE:   Framing Error interrupt
  *            @arg USART_IT_PE:   Parity Error interrupt
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT)
{
200028cc:	b580      	push	{r7, lr}
200028ce:	b086      	sub	sp, #24
200028d0:	af00      	add	r7, sp, #0
200028d2:	6078      	str	r0, [r7, #4]
200028d4:	000a      	movs	r2, r1
200028d6:	1cbb      	adds	r3, r7, #2
200028d8:	801a      	strh	r2, [r3, #0]
  uint32_t bitpos = 0x00, itmask = 0x00, usartreg = 0x00;
200028da:	2300      	movs	r3, #0
200028dc:	60fb      	str	r3, [r7, #12]
200028de:	2300      	movs	r3, #0
200028e0:	617b      	str	r3, [r7, #20]
200028e2:	2300      	movs	r3, #0
200028e4:	60bb      	str	r3, [r7, #8]
  ITStatus bitstatus = RESET;
200028e6:	2313      	movs	r3, #19
200028e8:	18fb      	adds	r3, r7, r3
200028ea:	2200      	movs	r2, #0
200028ec:	701a      	strb	r2, [r3, #0]
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
200028ee:	1cbb      	adds	r3, r7, #2
200028f0:	881b      	ldrh	r3, [r3, #0]
200028f2:	b2db      	uxtb	r3, r3
200028f4:	095b      	lsrs	r3, r3, #5
200028f6:	b2db      	uxtb	r3, r3
200028f8:	60bb      	str	r3, [r7, #8]
  /* Get the interrupt position */
  itmask = USART_IT & IT_MASK;
200028fa:	1cbb      	adds	r3, r7, #2
200028fc:	881b      	ldrh	r3, [r3, #0]
200028fe:	221f      	movs	r2, #31
20002900:	4013      	ands	r3, r2
20002902:	617b      	str	r3, [r7, #20]
  itmask = (uint32_t)0x01 << itmask;
20002904:	2201      	movs	r2, #1
20002906:	697b      	ldr	r3, [r7, #20]
20002908:	409a      	lsls	r2, r3
2000290a:	0013      	movs	r3, r2
2000290c:	617b      	str	r3, [r7, #20]
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
2000290e:	68bb      	ldr	r3, [r7, #8]
20002910:	2b01      	cmp	r3, #1
20002912:	d107      	bne.n	20002924 <USART_GetITStatus+0x58>
  {
    itmask &= USARTx->CR1;
20002914:	687b      	ldr	r3, [r7, #4]
20002916:	899b      	ldrh	r3, [r3, #12]
20002918:	b29b      	uxth	r3, r3
2000291a:	001a      	movs	r2, r3
2000291c:	697b      	ldr	r3, [r7, #20]
2000291e:	4013      	ands	r3, r2
20002920:	617b      	str	r3, [r7, #20]
20002922:	e011      	b.n	20002948 <USART_GetITStatus+0x7c>
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
20002924:	68bb      	ldr	r3, [r7, #8]
20002926:	2b02      	cmp	r3, #2
20002928:	d107      	bne.n	2000293a <USART_GetITStatus+0x6e>
  {
    itmask &= USARTx->CR2;
2000292a:	687b      	ldr	r3, [r7, #4]
2000292c:	8a1b      	ldrh	r3, [r3, #16]
2000292e:	b29b      	uxth	r3, r3
20002930:	001a      	movs	r2, r3
20002932:	697b      	ldr	r3, [r7, #20]
20002934:	4013      	ands	r3, r2
20002936:	617b      	str	r3, [r7, #20]
20002938:	e006      	b.n	20002948 <USART_GetITStatus+0x7c>
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
2000293a:	687b      	ldr	r3, [r7, #4]
2000293c:	8a9b      	ldrh	r3, [r3, #20]
2000293e:	b29b      	uxth	r3, r3
20002940:	001a      	movs	r2, r3
20002942:	697b      	ldr	r3, [r7, #20]
20002944:	4013      	ands	r3, r2
20002946:	617b      	str	r3, [r7, #20]
  }
  
  bitpos = USART_IT >> 0x08;
20002948:	1cbb      	adds	r3, r7, #2
2000294a:	881b      	ldrh	r3, [r3, #0]
2000294c:	0a1b      	lsrs	r3, r3, #8
2000294e:	b29b      	uxth	r3, r3
20002950:	60fb      	str	r3, [r7, #12]
  bitpos = (uint32_t)0x01 << bitpos;
20002952:	2201      	movs	r2, #1
20002954:	68fb      	ldr	r3, [r7, #12]
20002956:	409a      	lsls	r2, r3
20002958:	0013      	movs	r3, r2
2000295a:	60fb      	str	r3, [r7, #12]
  bitpos &= USARTx->SR;
2000295c:	687b      	ldr	r3, [r7, #4]
2000295e:	881b      	ldrh	r3, [r3, #0]
20002960:	b29b      	uxth	r3, r3
20002962:	001a      	movs	r2, r3
20002964:	68fb      	ldr	r3, [r7, #12]
20002966:	4013      	ands	r3, r2
20002968:	60fb      	str	r3, [r7, #12]
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
2000296a:	697b      	ldr	r3, [r7, #20]
2000296c:	2b00      	cmp	r3, #0
2000296e:	d007      	beq.n	20002980 <USART_GetITStatus+0xb4>
20002970:	68fb      	ldr	r3, [r7, #12]
20002972:	2b00      	cmp	r3, #0
20002974:	d004      	beq.n	20002980 <USART_GetITStatus+0xb4>
  {
    bitstatus = SET;
20002976:	2313      	movs	r3, #19
20002978:	18fb      	adds	r3, r7, r3
2000297a:	2201      	movs	r2, #1
2000297c:	701a      	strb	r2, [r3, #0]
2000297e:	e003      	b.n	20002988 <USART_GetITStatus+0xbc>
  }
  else
  {
    bitstatus = RESET;
20002980:	2313      	movs	r3, #19
20002982:	18fb      	adds	r3, r7, r3
20002984:	2200      	movs	r2, #0
20002986:	701a      	strb	r2, [r3, #0]
  }
  
  return bitstatus;  
20002988:	2313      	movs	r3, #19
2000298a:	18fb      	adds	r3, r7, r3
2000298c:	781b      	ldrb	r3, [r3, #0]
}
2000298e:	0018      	movs	r0, r3
20002990:	46bd      	mov	sp, r7
20002992:	b006      	add	sp, #24
20002994:	bd80      	pop	{r7, pc}

20002996 <USART_ClearITPendingBit>:
  *          (USART_SendData()).
  *  
  * @retval None
  */
void USART_ClearITPendingBit(USART_TypeDef* USARTx, uint16_t USART_IT)
{
20002996:	b580      	push	{r7, lr}
20002998:	b084      	sub	sp, #16
2000299a:	af00      	add	r7, sp, #0
2000299c:	6078      	str	r0, [r7, #4]
2000299e:	000a      	movs	r2, r1
200029a0:	1cbb      	adds	r3, r7, #2
200029a2:	801a      	strh	r2, [r3, #0]
  uint16_t bitpos = 0x00, itmask = 0x00;
200029a4:	210e      	movs	r1, #14
200029a6:	187b      	adds	r3, r7, r1
200029a8:	2200      	movs	r2, #0
200029aa:	801a      	strh	r2, [r3, #0]
200029ac:	200c      	movs	r0, #12
200029ae:	183b      	adds	r3, r7, r0
200029b0:	2200      	movs	r2, #0
200029b2:	801a      	strh	r2, [r3, #0]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  bitpos = USART_IT >> 0x08;
200029b4:	187b      	adds	r3, r7, r1
200029b6:	1cba      	adds	r2, r7, #2
200029b8:	8812      	ldrh	r2, [r2, #0]
200029ba:	0a12      	lsrs	r2, r2, #8
200029bc:	801a      	strh	r2, [r3, #0]
  itmask = ((uint16_t)0x01 << (uint16_t)bitpos);
200029be:	187b      	adds	r3, r7, r1
200029c0:	881b      	ldrh	r3, [r3, #0]
200029c2:	2201      	movs	r2, #1
200029c4:	409a      	lsls	r2, r3
200029c6:	183b      	adds	r3, r7, r0
200029c8:	801a      	strh	r2, [r3, #0]
  USARTx->SR = (uint16_t)~itmask;
200029ca:	183b      	adds	r3, r7, r0
200029cc:	881b      	ldrh	r3, [r3, #0]
200029ce:	43db      	mvns	r3, r3
200029d0:	b29a      	uxth	r2, r3
200029d2:	687b      	ldr	r3, [r7, #4]
200029d4:	801a      	strh	r2, [r3, #0]
}
200029d6:	46c0      	nop			; (mov r8, r8)
200029d8:	46bd      	mov	sp, r7
200029da:	b004      	add	sp, #16
200029dc:	bd80      	pop	{r7, pc}
200029de:	46c0      	nop			; (mov r8, r8)

200029e0 <__udivsi3>:
200029e0:	2200      	movs	r2, #0
200029e2:	0843      	lsrs	r3, r0, #1
200029e4:	428b      	cmp	r3, r1
200029e6:	d374      	bcc.n	20002ad2 <__udivsi3+0xf2>
200029e8:	0903      	lsrs	r3, r0, #4
200029ea:	428b      	cmp	r3, r1
200029ec:	d35f      	bcc.n	20002aae <__udivsi3+0xce>
200029ee:	0a03      	lsrs	r3, r0, #8
200029f0:	428b      	cmp	r3, r1
200029f2:	d344      	bcc.n	20002a7e <__udivsi3+0x9e>
200029f4:	0b03      	lsrs	r3, r0, #12
200029f6:	428b      	cmp	r3, r1
200029f8:	d328      	bcc.n	20002a4c <__udivsi3+0x6c>
200029fa:	0c03      	lsrs	r3, r0, #16
200029fc:	428b      	cmp	r3, r1
200029fe:	d30d      	bcc.n	20002a1c <__udivsi3+0x3c>
20002a00:	22ff      	movs	r2, #255	; 0xff
20002a02:	0209      	lsls	r1, r1, #8
20002a04:	ba12      	rev	r2, r2
20002a06:	0c03      	lsrs	r3, r0, #16
20002a08:	428b      	cmp	r3, r1
20002a0a:	d302      	bcc.n	20002a12 <__udivsi3+0x32>
20002a0c:	1212      	asrs	r2, r2, #8
20002a0e:	0209      	lsls	r1, r1, #8
20002a10:	d065      	beq.n	20002ade <__udivsi3+0xfe>
20002a12:	0b03      	lsrs	r3, r0, #12
20002a14:	428b      	cmp	r3, r1
20002a16:	d319      	bcc.n	20002a4c <__udivsi3+0x6c>
20002a18:	e000      	b.n	20002a1c <__udivsi3+0x3c>
20002a1a:	0a09      	lsrs	r1, r1, #8
20002a1c:	0bc3      	lsrs	r3, r0, #15
20002a1e:	428b      	cmp	r3, r1
20002a20:	d301      	bcc.n	20002a26 <__udivsi3+0x46>
20002a22:	03cb      	lsls	r3, r1, #15
20002a24:	1ac0      	subs	r0, r0, r3
20002a26:	4152      	adcs	r2, r2
20002a28:	0b83      	lsrs	r3, r0, #14
20002a2a:	428b      	cmp	r3, r1
20002a2c:	d301      	bcc.n	20002a32 <__udivsi3+0x52>
20002a2e:	038b      	lsls	r3, r1, #14
20002a30:	1ac0      	subs	r0, r0, r3
20002a32:	4152      	adcs	r2, r2
20002a34:	0b43      	lsrs	r3, r0, #13
20002a36:	428b      	cmp	r3, r1
20002a38:	d301      	bcc.n	20002a3e <__udivsi3+0x5e>
20002a3a:	034b      	lsls	r3, r1, #13
20002a3c:	1ac0      	subs	r0, r0, r3
20002a3e:	4152      	adcs	r2, r2
20002a40:	0b03      	lsrs	r3, r0, #12
20002a42:	428b      	cmp	r3, r1
20002a44:	d301      	bcc.n	20002a4a <__udivsi3+0x6a>
20002a46:	030b      	lsls	r3, r1, #12
20002a48:	1ac0      	subs	r0, r0, r3
20002a4a:	4152      	adcs	r2, r2
20002a4c:	0ac3      	lsrs	r3, r0, #11
20002a4e:	428b      	cmp	r3, r1
20002a50:	d301      	bcc.n	20002a56 <__udivsi3+0x76>
20002a52:	02cb      	lsls	r3, r1, #11
20002a54:	1ac0      	subs	r0, r0, r3
20002a56:	4152      	adcs	r2, r2
20002a58:	0a83      	lsrs	r3, r0, #10
20002a5a:	428b      	cmp	r3, r1
20002a5c:	d301      	bcc.n	20002a62 <__udivsi3+0x82>
20002a5e:	028b      	lsls	r3, r1, #10
20002a60:	1ac0      	subs	r0, r0, r3
20002a62:	4152      	adcs	r2, r2
20002a64:	0a43      	lsrs	r3, r0, #9
20002a66:	428b      	cmp	r3, r1
20002a68:	d301      	bcc.n	20002a6e <__udivsi3+0x8e>
20002a6a:	024b      	lsls	r3, r1, #9
20002a6c:	1ac0      	subs	r0, r0, r3
20002a6e:	4152      	adcs	r2, r2
20002a70:	0a03      	lsrs	r3, r0, #8
20002a72:	428b      	cmp	r3, r1
20002a74:	d301      	bcc.n	20002a7a <__udivsi3+0x9a>
20002a76:	020b      	lsls	r3, r1, #8
20002a78:	1ac0      	subs	r0, r0, r3
20002a7a:	4152      	adcs	r2, r2
20002a7c:	d2cd      	bcs.n	20002a1a <__udivsi3+0x3a>
20002a7e:	09c3      	lsrs	r3, r0, #7
20002a80:	428b      	cmp	r3, r1
20002a82:	d301      	bcc.n	20002a88 <__udivsi3+0xa8>
20002a84:	01cb      	lsls	r3, r1, #7
20002a86:	1ac0      	subs	r0, r0, r3
20002a88:	4152      	adcs	r2, r2
20002a8a:	0983      	lsrs	r3, r0, #6
20002a8c:	428b      	cmp	r3, r1
20002a8e:	d301      	bcc.n	20002a94 <__udivsi3+0xb4>
20002a90:	018b      	lsls	r3, r1, #6
20002a92:	1ac0      	subs	r0, r0, r3
20002a94:	4152      	adcs	r2, r2
20002a96:	0943      	lsrs	r3, r0, #5
20002a98:	428b      	cmp	r3, r1
20002a9a:	d301      	bcc.n	20002aa0 <__udivsi3+0xc0>
20002a9c:	014b      	lsls	r3, r1, #5
20002a9e:	1ac0      	subs	r0, r0, r3
20002aa0:	4152      	adcs	r2, r2
20002aa2:	0903      	lsrs	r3, r0, #4
20002aa4:	428b      	cmp	r3, r1
20002aa6:	d301      	bcc.n	20002aac <__udivsi3+0xcc>
20002aa8:	010b      	lsls	r3, r1, #4
20002aaa:	1ac0      	subs	r0, r0, r3
20002aac:	4152      	adcs	r2, r2
20002aae:	08c3      	lsrs	r3, r0, #3
20002ab0:	428b      	cmp	r3, r1
20002ab2:	d301      	bcc.n	20002ab8 <__udivsi3+0xd8>
20002ab4:	00cb      	lsls	r3, r1, #3
20002ab6:	1ac0      	subs	r0, r0, r3
20002ab8:	4152      	adcs	r2, r2
20002aba:	0883      	lsrs	r3, r0, #2
20002abc:	428b      	cmp	r3, r1
20002abe:	d301      	bcc.n	20002ac4 <__udivsi3+0xe4>
20002ac0:	008b      	lsls	r3, r1, #2
20002ac2:	1ac0      	subs	r0, r0, r3
20002ac4:	4152      	adcs	r2, r2
20002ac6:	0843      	lsrs	r3, r0, #1
20002ac8:	428b      	cmp	r3, r1
20002aca:	d301      	bcc.n	20002ad0 <__udivsi3+0xf0>
20002acc:	004b      	lsls	r3, r1, #1
20002ace:	1ac0      	subs	r0, r0, r3
20002ad0:	4152      	adcs	r2, r2
20002ad2:	1a41      	subs	r1, r0, r1
20002ad4:	d200      	bcs.n	20002ad8 <__udivsi3+0xf8>
20002ad6:	4601      	mov	r1, r0
20002ad8:	4152      	adcs	r2, r2
20002ada:	4610      	mov	r0, r2
20002adc:	4770      	bx	lr
20002ade:	e7ff      	b.n	20002ae0 <__udivsi3+0x100>
20002ae0:	b501      	push	{r0, lr}
20002ae2:	2000      	movs	r0, #0
20002ae4:	f000 f806 	bl	20002af4 <__aeabi_idiv0>
20002ae8:	bd02      	pop	{r1, pc}
20002aea:	46c0      	nop			; (mov r8, r8)

20002aec <__aeabi_uidivmod>:
20002aec:	2900      	cmp	r1, #0
20002aee:	d0f7      	beq.n	20002ae0 <__udivsi3+0x100>
20002af0:	e776      	b.n	200029e0 <__udivsi3>
20002af2:	4770      	bx	lr

20002af4 <__aeabi_idiv0>:
20002af4:	4770      	bx	lr
20002af6:	46c0      	nop			; (mov r8, r8)

20002af8 <memcpy>:
20002af8:	2300      	movs	r3, #0
20002afa:	b510      	push	{r4, lr}
20002afc:	429a      	cmp	r2, r3
20002afe:	d100      	bne.n	20002b02 <memcpy+0xa>
20002b00:	bd10      	pop	{r4, pc}
20002b02:	5ccc      	ldrb	r4, [r1, r3]
20002b04:	54c4      	strb	r4, [r0, r3]
20002b06:	3301      	adds	r3, #1
20002b08:	e7f8      	b.n	20002afc <memcpy+0x4>

20002b0a <memset>:
20002b0a:	0003      	movs	r3, r0
20002b0c:	1812      	adds	r2, r2, r0
20002b0e:	4293      	cmp	r3, r2
20002b10:	d100      	bne.n	20002b14 <memset+0xa>
20002b12:	4770      	bx	lr
20002b14:	7019      	strb	r1, [r3, #0]
20002b16:	3301      	adds	r3, #1
20002b18:	e7f9      	b.n	20002b0e <memset+0x4>
	...

20002b1c <msTicks>:
20002b1c:	00000000 	andeq	r0, r0, r0

20002b20 <APBAHBPrescTable>:
20002b20:	00000000 	andeq	r0, r0, r0
20002b24:	04030201 	streq	r0, [r3], #-513	; 0xfffffdff
20002b28:	04030201 	streq	r0, [r3], #-513	; 0xfffffdff
20002b2c:	09080706 	stmdbeq	r8, {r1, r2, r8, r9, sl}

20002b30 <GPIO_Pins>:
20002b30:	00020001 	andeq	r0, r2, r1
20002b34:	00080004 	andeq	r0, r8, r4
20002b38:	00200010 	eoreq	r0, r0, r0, lsl r0
20002b3c:	00800040 	addeq	r0, r0, r0, asr #32
20002b40:	02000100 	andeq	r0, r0, #0, 2
20002b44:	08000400 	stmdaeq	r0, {sl}
20002b48:	20001000 	andcs	r1, r0, r0
20002b4c:	80004000 	andhi	r4, r0, r0

20002b50 <GPIO_Ports>:
20002b50:	40021000 	andmi	r1, r2, r0
20002b54:	40020400 	andmi	r0, r2, r0, lsl #8

Disassembly of section .debug_info:

00000000 <.debug_info>:
       0:	000018e6 	andeq	r1, r0, r6, ror #17
       4:	00000004 	andeq	r0, r0, r4
       8:	01040000 	mrseq	r0, (UNDEF: 4)
       c:	00000614 	andeq	r0, r0, r4, lsl r6
      10:	000e080c 	andeq	r0, lr, ip, lsl #16
      14:	00056800 	andeq	r6, r5, r0, lsl #16
	...
      24:	10200200 	eorne	r0, r0, r0, lsl #4
      28:	01050000 	mrseq	r0, (UNDEF: 5)
      2c:	00000253 	andeq	r0, r0, r3, asr r2
      30:	0253c805 	subseq	ip, r3, #327680	; 0x50000
      34:	fa030000 	blx	c003c <startup-0x1ff3ffc4>
      38:	72000007 	andvc	r0, r0, #7
      3c:	00087503 	andeq	r7, r8, r3, lsl #10
      40:	40037400 	andmi	r7, r3, r0, lsl #8
      44:	75000009 	strvc	r0, [r0, #-9]
      48:	00048c03 	andeq	r8, r4, r3, lsl #24
      4c:	1d037600 	stcne	6, cr7, [r3, #-0]
      50:	7b00000a 	blvc	80 <startup-0x1fffff80>
      54:	000efc03 	andeq	pc, lr, r3, lsl #24
      58:	66037c00 	strvs	r7, [r3], -r0, lsl #24
      5c:	7e000011 	mcrvc	0, 0, r0, cr0, cr1, {0}
      60:	00033803 	andeq	r3, r3, r3, lsl #16
      64:	0e047f00 	cdpeq	15, 0, cr7, cr4, cr0, {0}
      68:	00000008 	andeq	r0, r0, r8
      6c:	0006f604 	andeq	pc, r6, r4, lsl #12
      70:	9b040100 	blls	100478 <startup-0x1feffb88>
      74:	02000008 	andeq	r0, r0, #8
      78:	00000e04 	andeq	r0, r0, r4, lsl #28
      7c:	bb040300 	bllt	100c84 <startup-0x1feff37c>
      80:	04000000 	streq	r0, [r0], #-0
      84:	000f9304 	andeq	r9, pc, r4, lsl #6
      88:	7d040500 	cfstr32vc	mvfx0, [r4, #-0]
      8c:	0600000e 	streq	r0, [r0], -lr
      90:	00078304 	andeq	r8, r7, r4, lsl #6
      94:	1c040700 	stcne	7, cr0, [r4], {-0}
      98:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
      9c:	00115b04 	andseq	r5, r1, r4, lsl #22
      a0:	09040900 	stmdbeq	r4, {r8, fp}
      a4:	0a00000b 	beq	d8 <startup-0x1fffff28>
      a8:	000c9c04 	andeq	r9, ip, r4, lsl #24
      ac:	c5040b00 	strgt	r0, [r4, #-2816]	; 0xfffff500
      b0:	0c00000b 	stceq	0, cr0, [r0], {11}
      b4:	0003a904 	andeq	sl, r3, r4, lsl #18
      b8:	b2040d00 	andlt	r0, r4, #0, 26
      bc:	0e00000f 	cdpeq	0, 0, cr0, cr0, cr15, {0}
      c0:	000eaf04 	andeq	sl, lr, r4, lsl #30
      c4:	9b040f00 	blls	103ccc <startup-0x1fefc334>
      c8:	10000007 	andne	r0, r0, r7
      cc:	00002704 	andeq	r2, r0, r4, lsl #14
      d0:	94041100 	strls	r1, [r4], #-256	; 0xffffff00
      d4:	1200000d 	andne	r0, r0, #13
      d8:	00078e04 	andeq	r8, r7, r4, lsl #28
      dc:	5a041300 	bpl	104ce4 <startup-0x1fefb31c>
      e0:	14000005 	strne	r0, [r0], #-5
      e4:	0010a604 	andseq	sl, r0, r4, lsl #12
      e8:	ab041500 	blge	1054f0 <startup-0x1fefab10>
      ec:	16000008 	strne	r0, [r0], -r8
      f0:	0010d004 	andseq	sp, r0, r4
      f4:	67041700 	strvs	r1, [r4, -r0, lsl #14]
      f8:	18000009 	stmdane	r0, {r0, r3}
      fc:	00101204 	andseq	r1, r0, r4, lsl #4
     100:	a0041900 	andge	r1, r4, r0, lsl #18
     104:	1a000002 	bne	114 <startup-0x1ffffeec>
     108:	00076804 	andeq	r6, r7, r4, lsl #16
     10c:	47041b00 	strmi	r1, [r4, -r0, lsl #22]
     110:	1c000001 	stcne	0, cr0, [r0], {1}
     114:	000d4804 	andeq	r4, sp, r4, lsl #16
     118:	0a041d00 	beq	107520 <startup-0x1fef8ae0>
     11c:	1e000006 	cdpne	0, 0, cr0, cr0, cr6, {0}
     120:	00070c04 	andeq	r0, r7, r4, lsl #24
     124:	45041f00 	strmi	r1, [r4, #-3840]	; 0xfffff100
     128:	20000004 	andcs	r0, r0, r4
     12c:	000b3b04 	andeq	r3, fp, r4, lsl #22
     130:	13042100 	movwne	r2, #16640	; 0x4100
     134:	22000009 	andcs	r0, r0, #9
     138:	000a0b04 	andeq	r0, sl, r4, lsl #22
     13c:	d8042300 	stmdale	r4, {r8, r9, sp}
     140:	24000001 	strcs	r0, [r0], #-1
     144:	000d5204 	andeq	r5, sp, r4, lsl #4
     148:	c4042500 	strgt	r2, [r4], #-1280	; 0xfffffb00
     14c:	2600000f 	strcs	r0, [r0], -pc
     150:	00035404 	andeq	r5, r3, r4, lsl #8
     154:	16042700 	strne	r2, [r4], -r0, lsl #14
     158:	2800000d 	stmdacs	r0, {r0, r2, r3}
     15c:	000cce04 	andeq	ip, ip, r4, lsl #28
     160:	df042900 	svcle	0x00042900
     164:	2a00000a 	bcs	194 <startup-0x1ffffe6c>
     168:	0001e204 	andeq	lr, r1, r4, lsl #4
     16c:	39042b00 	stmdbcc	r4, {r8, r9, fp, sp}
     170:	2c000000 	stccs	0, cr0, [r0], {-0}
     174:	0007c404 	andeq	ip, r7, r4, lsl #8
     178:	28042d00 	stmdacs	r4, {r8, sl, fp, sp}
     17c:	2e000011 	mcrcs	0, 0, r0, cr0, cr1, {0}
     180:	00118504 	andseq	r8, r1, r4, lsl #10
     184:	6e042f00 	cdpvs	15, 0, cr2, cr4, cr0, {0}
     188:	3000000e 	andcc	r0, r0, lr
     18c:	00113504 	andseq	r3, r1, r4, lsl #10
     190:	82043100 	andhi	r3, r4, #0, 2
     194:	32000004 	andcc	r0, r0, #4
     198:	0000b104 	andeq	fp, r0, r4, lsl #2
     19c:	aa043300 	bge	10cda4 <startup-0x1fef325c>
     1a0:	3400000a 	strcc	r0, [r0], #-10
     1a4:	00095c04 	andeq	r5, r9, r4, lsl #24
     1a8:	19043500 	stmdbne	r4, {r8, sl, ip, sp}
     1ac:	3600000b 	strcc	r0, [r0], -fp
     1b0:	0009cd04 	andeq	ip, r9, r4, lsl #26
     1b4:	d6043700 	strle	r3, [r4], -r0, lsl #14
     1b8:	38000008 	stmdacc	r0, {r3}
     1bc:	00007a04 	andeq	r7, r0, r4, lsl #20
     1c0:	fe043900 	vseleq.f16	s6, s8, s0
     1c4:	3a000011 	bcc	210 <startup-0x1ffffdf0>
     1c8:	000be404 	andeq	lr, fp, r4, lsl #8
     1cc:	02043b00 	andeq	r3, r4, #0, 22
     1d0:	3c000004 	stccc	0, cr0, [r0], {4}
     1d4:	000f4e04 	andeq	r4, pc, r4, lsl #28
     1d8:	e5043d00 	str	r3, [r4, #-3328]	; 0xfffff300
     1dc:	3e000009 	cdpcc	0, 0, cr0, cr0, cr9, {0}
     1e0:	000bff04 	andeq	pc, fp, r4, lsl #30
     1e4:	aa043f00 	bge	10fdec <startup-0x1fef0214>
     1e8:	40000001 	andmi	r0, r0, r1
     1ec:	000d8604 	andeq	r8, sp, r4, lsl #12
     1f0:	52044100 	andpl	r4, r4, #0, 2
     1f4:	42000004 	andmi	r0, r0, #4
     1f8:	0007ee04 	andeq	lr, r7, r4, lsl #28
     1fc:	6a044300 	bvs	110e04 <startup-0x1feef1fc>
     200:	44000002 	strmi	r0, [r0], #-2
     204:	000ecb04 	andeq	ip, lr, r4, lsl #22
     208:	dc044500 	cfstr32le	mvfx4, [r4], {-0}
     20c:	46000007 	strmi	r0, [r0], -r7
     210:	0001b804 	andeq	fp, r1, r4, lsl #16
     214:	2e044700 	cdpcs	7, 0, cr4, cr4, cr0, {0}
     218:	4800000f 	stmdami	r0, {r0, r1, r2, r3}
     21c:	000cff04 	andeq	pc, ip, r4, lsl #30
     220:	64044900 	strvs	r4, [r4], #-2304	; 0xfffff700
     224:	4a000010 	bmi	26c <startup-0x1ffffd94>
     228:	00117204 	andseq	r7, r1, r4, lsl #4
     22c:	18044b00 	stmdane	r4, {r8, r9, fp, lr}
     230:	4c000008 	stcmi	0, cr0, [r0], {8}
     234:	0009f304 	andeq	pc, r9, r4, lsl #6
     238:	c6044d00 	strgt	r4, [r4], -r0, lsl #26
     23c:	4e000000 	cdpmi	0, 0, cr0, cr0, cr0, {0}
     240:	000d0c04 	andeq	r0, sp, r4, lsl #24
     244:	75044f00 	strvc	r4, [r4, #-3840]	; 0xfffff100
     248:	50000007 	andpl	r0, r0, r7
     24c:	000a8304 	andeq	r8, sl, r4, lsl #6
     250:	05005100 	streq	r5, [r0, #-256]	; 0xffffff00
     254:	03f60601 	mvnseq	r0, #1048576	; 0x100000
     258:	bf060000 	svclt	0x00060000
     25c:	05000008 	streq	r0, [r0, #-8]
     260:	0025032f 	eoreq	r0, r5, pc, lsr #6
     264:	ce070000 	cdpgt	0, 0, cr0, cr7, cr0, {0}
     268:	06000001 	streq	r0, [r0], -r1
     26c:	0002712b 	andeq	r7, r2, fp, lsr #2
     270:	08010500 	stmdaeq	r1, {r8, sl}
     274:	000003f4 	strdeq	r0, [r0], -r4
     278:	80050205 	andhi	r0, r5, r5, lsl #4
     27c:	0700000f 	streq	r0, [r0, -pc]
     280:	00000528 	andeq	r0, r0, r8, lsr #10
     284:	028a3906 	addeq	r3, sl, #98304	; 0x18000
     288:	02050000 	andeq	r0, r5, #0
     28c:	00110407 	andseq	r0, r1, r7, lsl #8
     290:	11970700 	orrsne	r0, r7, r0, lsl #14
     294:	4d060000 	stcmi	0, cr0, [r6, #-0]
     298:	0000029c 	muleq	r0, ip, r2
     29c:	dc050405 	cfstrsle	mvf0, [r5], {5}
     2a0:	07000009 	streq	r0, [r0, -r9]
     2a4:	00000985 	andeq	r0, r0, r5, lsl #19
     2a8:	02ae4f06 	adceq	r4, lr, #6, 30
     2ac:	04050000 	streq	r0, [r5], #-0
     2b0:	000d2a07 	andeq	r2, sp, r7, lsl #20
     2b4:	05080500 	streq	r0, [r8, #-1280]	; 0xfffffb00
     2b8:	000009d7 	ldrdeq	r0, [r0], -r7
     2bc:	25070805 	strcs	r0, [r7, #-2053]	; 0xfffff7fb
     2c0:	0800000d 	stmdaeq	r0, {r0, r2, r3}
     2c4:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
     2c8:	04050074 	streq	r0, [r5], #-116	; 0xffffff8c
     2cc:	000d2f07 	andeq	r2, sp, r7, lsl #30
     2d0:	01d00700 	bicseq	r0, r0, r0, lsl #14
     2d4:	18070000 	stmdane	r7, {}	; <UNPREDICTABLE>
     2d8:	00000266 	andeq	r0, r0, r6, ror #4
     2dc:	0002d109 	andeq	sp, r2, r9, lsl #2
     2e0:	02d10a00 	sbcseq	r0, r1, #0, 20
     2e4:	e1090000 	mrs	r0, (UNDEF: 9)
     2e8:	07000002 	streq	r0, [r0, -r2]
     2ec:	0000052a 	andeq	r0, r0, sl, lsr #10
     2f0:	027f2407 	rsbseq	r2, pc, #117440512	; 0x7000000
     2f4:	eb090000 	bl	2402fc <startup-0x1fdbfd04>
     2f8:	07000002 	streq	r0, [r0, -r2]
     2fc:	00001199 	muleq	r0, r9, r1
     300:	02912c07 	addseq	r2, r1, #1792	; 0x700
     304:	fb090000 	blx	24030e <startup-0x1fdbfcf2>
     308:	07000002 	streq	r0, [r0, -r2]
     30c:	00000987 	andeq	r0, r0, r7, lsl #19
     310:	02a33007 	adceq	r3, r3, #7
     314:	0b090000 	bleq	24031c <startup-0x1fdbfce4>
     318:	0a000003 	beq	32c <startup-0x1ffffcd4>
     31c:	00000316 	andeq	r0, r0, r6, lsl r3
     320:	010e040b 	tsteq	lr, fp, lsl #8
     324:	03dc01a0 	bicseq	r0, ip, #160, 2	; 0x28
     328:	b50c0000 	strlt	r0, [ip, #-0]
     32c:	01000011 	tsteq	r0, r1, lsl r0
     330:	03ec01a2 	mvneq	r0, #-2147483608	; 0x80000028
     334:	0c000000 	stceq	0, cr0, [r0], {-0}
     338:	000003e0 	andeq	r0, r0, r0, ror #7
     33c:	f101a301 			; <UNDEFINED> instruction: 0xf101a301
     340:	20000003 	andcs	r0, r0, r3
     344:	000daf0c 	andeq	sl, sp, ip, lsl #30
     348:	01a40100 			; <UNDEFINED> instruction: 0x01a40100
     34c:	000003ec 	andeq	r0, r0, ip, ror #7
     350:	00050c80 	andeq	r0, r5, r0, lsl #25
     354:	a5010000 	strge	r0, [r1, #-0]
     358:	0003f101 	andeq	pc, r3, r1, lsl #2
     35c:	450da000 	strmi	sl, [sp, #-0]
     360:	01000011 	tsteq	r0, r1, lsl r0
     364:	03ec01a6 	mvneq	r0, #-2147483607	; 0x80000029
     368:	01000000 	mrseq	r0, (UNDEF: 0)
     36c:	00046e0d 	andeq	r6, r4, sp, lsl #28
     370:	01a70100 			; <UNDEFINED> instruction: 0x01a70100
     374:	000003f1 	strdeq	r0, [r0], -r1
     378:	790d0120 	stmdbvc	sp, {r5, r8}
     37c:	01000001 	tsteq	r0, r1
     380:	03ec01a8 	mvneq	r0, #168, 2	; 0x2a
     384:	01800000 	orreq	r0, r0, r0
     388:	0004780d 	andeq	r7, r4, sp, lsl #16
     38c:	01a90100 			; <UNDEFINED> instruction: 0x01a90100
     390:	000003f1 	strdeq	r0, [r0], -r1
     394:	320d01a0 	andcc	r0, sp, #160, 2	; 0x28
     398:	01000004 	tsteq	r0, r4
     39c:	03ec01aa 	mvneq	r0, #-2147483606	; 0x8000002a
     3a0:	02000000 	andeq	r0, r0, #0
     3a4:	0004140d 	andeq	r1, r4, sp, lsl #8
     3a8:	01ab0100 			; <UNDEFINED> instruction: 0x01ab0100
     3ac:	00000401 	andeq	r0, r0, r1, lsl #8
     3b0:	490e0220 	stmdbmi	lr, {r5, r9}
     3b4:	ac010050 	stcge	0, cr0, [r1], {80}	; 0x50
     3b8:	00042101 	andeq	r2, r4, r1, lsl #2
     3bc:	0d030000 	stceq	0, cr0, [r3, #-0]
     3c0:	0000041e 	andeq	r0, r0, lr, lsl r4
     3c4:	2601ad01 	strcs	sl, [r1], -r1, lsl #26
     3c8:	f0000004 			; <UNDEFINED> instruction: 0xf0000004
     3cc:	07070d03 	streq	r0, [r7, -r3, lsl #26]
     3d0:	ae010000 	cdpge	0, 0, cr0, cr1, cr0, {0}
     3d4:	00031601 	andeq	r1, r3, r1, lsl #12
     3d8:	000e0000 	andeq	r0, lr, r0
     3dc:	0003160f 	andeq	r1, r3, pc, lsl #12
     3e0:	0003ec00 	andeq	lr, r3, r0, lsl #24
     3e4:	02ca1000 	sbceq	r1, sl, #0
     3e8:	00070000 	andeq	r0, r7, r0
     3ec:	0003dc09 	andeq	sp, r3, r9, lsl #24
     3f0:	030b0f00 	movweq	r0, #48896	; 0xbf00
     3f4:	04010000 	streq	r0, [r1], #-0
     3f8:	ca100000 	bgt	400400 <startup-0x1fbffc00>
     3fc:	17000002 	strne	r0, [r0, -r2]
     400:	030b0f00 	movweq	r0, #48896	; 0xbf00
     404:	04110000 	ldreq	r0, [r1], #-0
     408:	ca100000 	bgt	400410 <startup-0x1fbffbf0>
     40c:	37000002 	strcc	r0, [r0, -r2]
     410:	02dc0f00 	sbcseq	r0, ip, #0, 30
     414:	04210000 	strteq	r0, [r1], #-0
     418:	ca100000 	bgt	400420 <startup-0x1fbffbe0>
     41c:	ef000002 	svc	0x00000002
     420:	04110900 	ldreq	r0, [r1], #-2304	; 0xfffff700
     424:	0b0f0000 	bleq	3c042c <startup-0x1fc3fbd4>
     428:	37000003 	strcc	r0, [r0, -r3]
     42c:	11000004 	tstne	r0, r4
     430:	000002ca 	andeq	r0, r0, sl, asr #5
     434:	06000283 	streq	r0, [r0], -r3, lsl #5
     438:	00000ce5 	andeq	r0, r0, r5, ror #25
     43c:	2001af01 	andcs	sl, r1, r1, lsl #30
     440:	12000003 	andne	r0, r0, #3
     444:	01c0018c 	biceq	r0, r0, ip, lsl #3
     448:	0000055e 	andeq	r0, r0, lr, asr r5
     44c:	00023f0c 	andeq	r3, r2, ip, lsl #30
     450:	01c20100 	biceq	r0, r2, r0, lsl #2
     454:	0000031b 	andeq	r0, r0, fp, lsl r3
     458:	03680c00 	cmneq	r8, #0, 24
     45c:	c3010000 	movwgt	r0, #4096	; 0x1000
     460:	00031601 	andeq	r1, r3, r1, lsl #12
     464:	ac0c0400 	cfstrsge	mvf0, [ip], {-0}
     468:	01000000 	mrseq	r0, (UNDEF: 0)
     46c:	031601c4 	tsteq	r6, #196, 2	; 0x31
     470:	0c080000 	stceq	0, cr0, [r8], {-0}
     474:	0000020f 	andeq	r0, r0, pc, lsl #4
     478:	1601c501 	strne	ip, [r1], -r1, lsl #10
     47c:	0c000003 	stceq	0, cr0, [r0], {3}
     480:	52435313 	subpl	r5, r3, #1275068416	; 0x4c000000
     484:	01c60100 	biceq	r0, r6, r0, lsl #2
     488:	00000316 	andeq	r0, r0, r6, lsl r3
     48c:	43431310 	movtmi	r1, #13072	; 0x3310
     490:	c7010052 	smlsdgt	r1, r2, r0, r0
     494:	00031601 	andeq	r1, r3, r1, lsl #12
     498:	53131400 	tstpl	r3, #0, 8
     49c:	01005048 	tsteq	r0, r8, asr #32
     4a0:	056e01c8 	strbeq	r0, [lr, #-456]!	; 0xfffffe38
     4a4:	0c180000 	ldceq	0, cr0, [r8], {-0}
     4a8:	000006f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     4ac:	1601c901 	strne	ip, [r1], -r1, lsl #18
     4b0:	24000003 	strcs	r0, [r0], #-3
     4b4:	000e910c 	andeq	r9, lr, ip, lsl #2
     4b8:	01ca0100 	biceq	r0, sl, r0, lsl #2
     4bc:	00000316 	andeq	r0, r0, r6, lsl r3
     4c0:	05ab0c28 	streq	r0, [fp, #3112]!	; 0xc28
     4c4:	cb010000 	blgt	404cc <startup-0x1ffbfb34>
     4c8:	00031601 	andeq	r1, r3, r1, lsl #12
     4cc:	b60c2c00 	strlt	r2, [ip], -r0, lsl #24
     4d0:	01000004 	tsteq	r0, r4
     4d4:	031601cc 	tsteq	r6, #204, 2	; 0x33
     4d8:	0c300000 	ldceq	0, cr0, [r0], #-0
     4dc:	00000f7a 	andeq	r0, r0, sl, ror pc
     4e0:	1601cd01 	strne	ip, [r1], -r1, lsl #26
     4e4:	34000003 	strcc	r0, [r0], #-3
     4e8:	000bb60c 	andeq	fp, fp, ip, lsl #12
     4ec:	01ce0100 	biceq	r0, lr, r0, lsl #2
     4f0:	00000316 	andeq	r0, r0, r6, lsl r3
     4f4:	0e550c38 	mrceq	12, 2, r0, cr5, cr8, {1}
     4f8:	cf010000 	svcgt	0x00010000
     4fc:	00031601 	andeq	r1, r3, r1, lsl #12
     500:	50133c00 	andspl	r3, r3, r0, lsl #24
     504:	01005246 	tsteq	r0, r6, asr #4
     508:	058801d0 	streq	r0, [r8, #464]	; 0x1d0
     50c:	13400000 	movtne	r0, #0
     510:	00524644 	subseq	r4, r2, r4, asr #12
     514:	1b01d101 	blne	74920 <startup-0x1ff8b6e0>
     518:	48000003 	stmdami	r0, {r0, r1}
     51c:	52444113 	subpl	r4, r4, #-1073741820	; 0xc0000004
     520:	01d20100 	bicseq	r0, r2, r0, lsl #2
     524:	0000031b 	andeq	r0, r0, fp, lsl r3
     528:	0f690c4c 	svceq	0x00690c4c
     52c:	d3010000 	movwle	r0, #4096	; 0x1000
     530:	0005a201 	andeq	sl, r5, r1, lsl #4
     534:	a30c5000 	movwge	r5, #49152	; 0xc000
     538:	0100000f 	tsteq	r0, pc
     53c:	05bc01d4 	ldreq	r0, [ip, #468]!	; 0x1d4
     540:	0c600000 	stcleq	0, cr0, [r0], #-0
     544:	000003e0 	andeq	r0, r0, r0, ror #7
     548:	c101d501 	tstgt	r1, r1, lsl #10
     54c:	74000005 	strvc	r0, [r0], #-5
     550:	00113f0c 	andseq	r3, r1, ip, lsl #30
     554:	01d60100 	bicseq	r0, r6, r0, lsl #2
     558:	00000316 	andeq	r0, r0, r6, lsl r3
     55c:	dc0f0088 	stcle	0, cr0, [pc], {136}	; 0x88
     560:	6e000002 	cdpvs	0, 0, cr0, cr0, cr2, {0}
     564:	10000005 	andne	r0, r0, r5
     568:	000002ca 	andeq	r0, r0, sl, asr #5
     56c:	5e09000b 	cdppl	0, 0, cr0, cr9, cr11, {0}
     570:	0f000005 	svceq	0x00000005
     574:	0000031b 	andeq	r0, r0, fp, lsl r3
     578:	00000583 	andeq	r0, r0, r3, lsl #11
     57c:	0002ca10 	andeq	ip, r2, r0, lsl sl
     580:	0a000100 	beq	988 <startup-0x1ffff678>
     584:	00000573 	andeq	r0, r0, r3, ror r5
     588:	00058309 	andeq	r8, r5, r9, lsl #6
     58c:	031b0f00 	tsteq	fp, #0, 30
     590:	059d0000 	ldreq	r0, [sp]
     594:	ca100000 	bgt	40059c <startup-0x1fbffa64>
     598:	03000002 	movweq	r0, #2
     59c:	058d0a00 	streq	r0, [sp, #2560]	; 0xa00
     5a0:	9d090000 	stcls	0, cr0, [r9, #-0]
     5a4:	0f000005 	svceq	0x00000005
     5a8:	0000031b 	andeq	r0, r0, fp, lsl r3
     5ac:	000005b7 			; <UNDEFINED> instruction: 0x000005b7
     5b0:	0002ca10 	andeq	ip, r2, r0, lsl sl
     5b4:	0a000400 	beq	15bc <startup-0x1fffea44>
     5b8:	000005a7 	andeq	r0, r0, r7, lsr #11
     5bc:	0005b709 	andeq	fp, r5, r9, lsl #14
     5c0:	030b0f00 	movweq	r0, #48896	; 0xbf00
     5c4:	05d10000 	ldrbeq	r0, [r1]
     5c8:	ca100000 	bgt	4005d0 <startup-0x1fbffa30>
     5cc:	04000002 	streq	r0, [r0], #-2
     5d0:	049c0600 	ldreq	r0, [ip], #1536	; 0x600
     5d4:	d7010000 	strle	r0, [r1, -r0]
     5d8:	00044301 	andeq	r4, r4, r1, lsl #6
     5dc:	01101200 	tsteq	r0, r0, lsl #4
     5e0:	061b02bf 			; <UNDEFINED> instruction: 0x061b02bf
     5e4:	140c0000 	strne	r0, [ip], #-0
     5e8:	0100000b 	tsteq	r0, fp
     5ec:	031602c1 	tsteq	r6, #268435468	; 0x1000000c
     5f0:	0c000000 	stceq	0, cr0, [r0], {-0}
     5f4:	00000ee5 	andeq	r0, r0, r5, ror #29
     5f8:	1602c201 	strne	ip, [r2], -r1, lsl #4
     5fc:	04000003 	streq	r0, [r0], #-3
     600:	4c415613 	mcrrmi	6, 1, r5, r1, cr3
     604:	02c30100 	sbceq	r0, r3, #0, 2
     608:	00000316 	andeq	r0, r0, r6, lsl r3
     60c:	0e610c08 	cdpeq	12, 6, cr0, cr1, cr8, {0}
     610:	c4010000 	strgt	r0, [r1], #-0
     614:	00031b02 	andeq	r1, r3, r2, lsl #22
     618:	06000c00 	streq	r0, [r0], -r0, lsl #24
     61c:	00000c4a 	andeq	r0, r0, sl, asr #24
     620:	dd02c501 	cfstr32le	mvfx12, [r2, #-4]
     624:	0f000005 	svceq	0x00000005
     628:	0000030b 	andeq	r0, r0, fp, lsl #6
     62c:	00000637 	andeq	r0, r0, r7, lsr r6
     630:	0002ca10 	andeq	ip, r2, r0, lsl sl
     634:	14000100 	strne	r0, [r0], #-256	; 0xffffff00
     638:	00001025 	andeq	r1, r0, r5, lsr #32
     63c:	0606fa01 	streq	pc, [r6], -r1, lsl #20
     640:	15000003 	strne	r0, [r0, #-3]
     644:	0000088b 	andeq	r0, r0, fp, lsl #17
     648:	030b3b08 	movweq	r3, #47880	; 0xbb08
     64c:	07160000 	ldreq	r0, [r6, -r0]
     650:	00027101 	andeq	r7, r2, r1, lsl #2
     654:	035d0500 	cmpeq	sp, #0, 10
     658:	00000669 	andeq	r0, r0, r9, ror #12
     65c:	00127e04 	andseq	r7, r2, r4, lsl #28
     660:	53170000 	tstpl	r7, #0
     664:	01005445 	tsteq	r0, r5, asr #8
     668:	0a3f0600 	beq	fc1e70 <startup-0x1f03e190>
     66c:	5d050000 	stcpl	0, cr0, [r5, #-0]
     670:	00064e03 	andeq	r4, r6, r3, lsl #28
     674:	0b000600 	bleq	1e7c <startup-0x1fffe184>
     678:	5d050000 	stcpl	0, cr0, [r5, #-0]
     67c:	00064e03 	andeq	r4, r6, r3, lsl #28
     680:	01071600 	tsteq	r7, r0, lsl #12
     684:	00000271 	andeq	r0, r0, r1, ror r2
     688:	9c035f05 	stcls	15, cr5, [r3], {5}
     68c:	04000006 	streq	r0, [r0], #-6
     690:	00000a15 	andeq	r0, r0, r5, lsl sl
     694:	0fda0400 	svceq	0x00da0400
     698:	00010000 	andeq	r0, r1, r0
     69c:	000cef06 	andeq	lr, ip, r6, lsl #30
     6a0:	035f0500 	cmpeq	pc, #0, 10
     6a4:	00000681 	andeq	r0, r0, r1, lsl #13
     6a8:	71010716 	tstvc	r1, r6, lsl r7
     6ac:	05000002 	streq	r0, [r0, #-2]
     6b0:	06c30362 	strbeq	r0, [r3], r2, ror #6
     6b4:	0d040000 	stceq	0, cr0, [r4, #-0]
     6b8:	00000009 	andeq	r0, r0, r9
     6bc:	000d7404 	andeq	r7, sp, r4, lsl #8
     6c0:	06000100 	streq	r0, [r0], -r0, lsl #2
     6c4:	00000c90 	muleq	r0, r0, ip
     6c8:	a8036205 	stmdage	r3, {r0, r2, r9, sp, lr}
     6cc:	12000006 	andne	r0, r0, #6
     6d0:	05c30528 	strbeq	r0, [r3, #1320]	; 0x528
     6d4:	0000075b 	andeq	r0, r0, fp, asr r7
     6d8:	00108f0c 	andseq	r8, r0, ip, lsl #30
     6dc:	05c50500 	strbeq	r0, [r5, #1280]	; 0x500
     6e0:	00000316 	andeq	r0, r0, r6, lsl r3
     6e4:	0e5a0c00 	cdpeq	12, 5, cr0, cr10, cr0, {0}
     6e8:	c6050000 	strgt	r0, [r5], -r0
     6ec:	00031605 	andeq	r1, r3, r5, lsl #12
     6f0:	380c0400 	stmdacc	ip, {sl}
     6f4:	05000009 	streq	r0, [r0, #-9]
     6f8:	031605c7 	tsteq	r6, #834666496	; 0x31c00000
     6fc:	0c080000 	stceq	0, cr0, [r8], {-0}
     700:	000009ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
     704:	1605c805 	strne	ip, [r5], -r5, lsl #16
     708:	0c000003 	stceq	0, cr0, [r0], {3}
     70c:	52444913 	subpl	r4, r4, #311296	; 0x4c000
     710:	05c90500 	strbeq	r0, [r9, #1280]	; 0x500
     714:	00000316 	andeq	r0, r0, r6, lsl r3
     718:	444f1310 	strbmi	r1, [pc], #-784	; 720 <startup-0x1ffff8e0>
     71c:	ca050052 	bgt	14086c <startup-0x1febf794>
     720:	00031605 	andeq	r1, r3, r5, lsl #12
     724:	550c1400 	strpl	r1, [ip, #-1024]	; 0xfffffc00
     728:	0500000a 	streq	r0, [r0, #-10]
     72c:	02f605cb 	rscseq	r0, r6, #851443712	; 0x32c00000
     730:	0c180000 	ldceq	0, cr0, [r8], {-0}
     734:	00000a32 	andeq	r0, r0, r2, lsr sl
     738:	f605cc05 			; <UNDEFINED> instruction: 0xf605cc05
     73c:	1a000002 	bne	74c <startup-0x1ffff8b4>
     740:	0008f70c 	andeq	pc, r8, ip, lsl #14
     744:	05cd0500 	strbeq	r0, [sp, #1280]	; 0x500
     748:	00000316 	andeq	r0, r0, r6, lsl r3
     74c:	4641131c 			; <UNDEFINED> instruction: 0x4641131c
     750:	ce050052 	mcrgt	0, 0, r0, cr5, cr2, {2}
     754:	00076b05 	andeq	r6, r7, r5, lsl #22
     758:	0f002000 	svceq	0x00002000
     75c:	00000316 	andeq	r0, r0, r6, lsl r3
     760:	0000076b 	andeq	r0, r0, fp, ror #14
     764:	0002ca10 	andeq	ip, r2, r0, lsl sl
     768:	09000100 	stmdbeq	r0, {r8}
     76c:	0000075b 	andeq	r0, r0, fp, asr r7
     770:	00100506 	andseq	r0, r0, r6, lsl #10
     774:	05cf0500 	strbeq	r0, [pc, #1280]	; c7c <startup-0x1ffff384>
     778:	000006cf 	andeq	r0, r0, pc, asr #13
     77c:	64059812 	strvs	r9, [r5], #-2066	; 0xfffff7ee
     780:	00093f06 	andeq	r3, r9, r6, lsl #30
     784:	52431300 	subpl	r1, r3, #0, 6
     788:	06660500 	strbteq	r0, [r6], -r0, lsl #10
     78c:	00000316 	andeq	r0, r0, r6, lsl r3
     790:	09540c00 	ldmdbeq	r4, {sl, fp}^
     794:	67050000 	strvs	r0, [r5, -r0]
     798:	00031606 	andeq	r1, r3, r6, lsl #12
     79c:	e30c0400 	movw	r0, #50176	; 0xc400
     7a0:	05000010 	streq	r0, [r0, #-16]
     7a4:	03160668 	tsteq	r6, #104, 12	; 0x6800000
     7a8:	13080000 	movwne	r0, #32768	; 0x8000
     7ac:	00524943 	subseq	r4, r2, r3, asr #18
     7b0:	16066905 	strne	r6, [r6], -r5, lsl #18
     7b4:	0c000003 	stceq	0, cr0, [r0], {3}
     7b8:	0004bb0c 	andeq	fp, r4, ip, lsl #22
     7bc:	066a0500 	strbteq	r0, [sl], -r0, lsl #10
     7c0:	00000316 	andeq	r0, r0, r6, lsl r3
     7c4:	0f450c10 	svceq	0x00450c10
     7c8:	6b050000 	blvs	1407d0 <startup-0x1febf830>
     7cc:	00031606 	andeq	r1, r3, r6, lsl #12
     7d0:	870c1400 	strhi	r1, [ip, -r0, lsl #8]
     7d4:	0500000c 	streq	r0, [r0, #-12]
     7d8:	0316066c 	tsteq	r6, #108, 12	; 0x6c00000
     7dc:	0c180000 	ldceq	0, cr0, [r8], {-0}
     7e0:	000003e0 	andeq	r0, r0, r0, ror #7
     7e4:	0b066d05 	bleq	19bc00 <startup-0x1fe64400>
     7e8:	1c000003 	stcne	0, cr0, [r0], {3}
     7ec:	000cc50c 	andeq	ip, ip, ip, lsl #10
     7f0:	066e0500 	strbteq	r0, [lr], -r0, lsl #10
     7f4:	00000316 	andeq	r0, r0, r6, lsl r3
     7f8:	0a290c20 	beq	a43880 <startup-0x1f5bc780>
     7fc:	6f050000 	svcvs	0x00050000
     800:	00031606 	andeq	r1, r3, r6, lsl #12
     804:	ea0c2400 	b	30980c <startup-0x1fcf67f4>
     808:	05000003 	streq	r0, [r0, #-3]
     80c:	06270670 			; <UNDEFINED> instruction: 0x06270670
     810:	0c280000 	stceq	0, cr0, [r8], #-0
     814:	00000edd 	ldrdeq	r0, [r0], -sp
     818:	16067105 	strne	r7, [r6], -r5, lsl #2
     81c:	30000003 	andcc	r0, r0, r3
     820:	0005330c 	andeq	r3, r5, ip, lsl #6
     824:	06720500 	ldrbteq	r0, [r2], -r0, lsl #10
     828:	00000316 	andeq	r0, r0, r6, lsl r3
     82c:	11e50c34 	mvnne	r0, r4, lsr ip
     830:	73050000 	movwvc	r0, #20480	; 0x5000
     834:	00031606 	andeq	r1, r3, r6, lsl #12
     838:	6e0c3800 	cdpvs	8, 0, cr3, cr12, cr0, {0}
     83c:	05000004 	streq	r0, [r0, #-4]
     840:	030b0674 	movweq	r0, #46708	; 0xb674
     844:	0c3c0000 	ldceq	0, cr0, [ip], #-0
     848:	00000cdd 	ldrdeq	r0, [r0], -sp
     84c:	16067505 	strne	r7, [r6], -r5, lsl #10
     850:	40000003 	andmi	r0, r0, r3
     854:	0003030c 	andeq	r0, r3, ip, lsl #6
     858:	06760500 	ldrbteq	r0, [r6], -r0, lsl #10
     85c:	00000316 	andeq	r0, r0, r6, lsl r3
     860:	04780c44 	ldrbteq	r0, [r8], #-3140	; 0xfffff3bc
     864:	77050000 	strvc	r0, [r5, -r0]
     868:	00062706 	andeq	r2, r6, r6, lsl #14
     86c:	1f0c4800 	svcne	0x000c4800
     870:	05000003 	streq	r0, [r0, #-3]
     874:	03160678 	tsteq	r6, #120, 12	; 0x7800000
     878:	0c500000 	mraeq	r0, r0, acc0
     87c:	000001f6 	strdeq	r0, [r0], -r6
     880:	16067905 	strne	r7, [r6], -r5, lsl #18
     884:	54000003 	strpl	r0, [r0], #-3
     888:	000db40c 	andeq	fp, sp, ip, lsl #8
     88c:	067a0500 	ldrbteq	r0, [sl], -r0, lsl #10
     890:	00000316 	andeq	r0, r0, r6, lsl r3
     894:	04140c58 	ldreq	r0, [r4], #-3160	; 0xfffff3a8
     898:	7b050000 	blvc	1408a0 <startup-0x1febf760>
     89c:	00030b06 	andeq	r0, r3, r6, lsl #22
     8a0:	bb0c5c00 	bllt	3178a8 <startup-0x1fce8758>
     8a4:	0500000b 	streq	r0, [r0, #-11]
     8a8:	0316067c 	tsteq	r6, #124, 12	; 0x7c00000
     8ac:	0c600000 	stcleq	0, cr0, [r0], #-0
     8b0:	00000ab5 			; <UNDEFINED> instruction: 0x00000ab5
     8b4:	16067d05 	strne	r7, [r6], -r5, lsl #26
     8b8:	64000003 	strvs	r0, [r0], #-3
     8bc:	00041e0c 	andeq	r1, r4, ip, lsl #28
     8c0:	067e0500 	ldrbteq	r0, [lr], -r0, lsl #10
     8c4:	00000627 	andeq	r0, r0, r7, lsr #12
     8c8:	06eb0c68 	strbteq	r0, [fp], r8, ror #24
     8cc:	7f050000 	svcvc	0x00050000
     8d0:	00031606 	andeq	r1, r3, r6, lsl #12
     8d4:	43137000 	tstmi	r3, #0
     8d8:	05005253 	streq	r5, [r0, #-595]	; 0xfffffdad
     8dc:	03160680 	tsteq	r6, #128, 12	; 0x8000000
     8e0:	0c740000 	ldcleq	0, cr0, [r4], #-0
     8e4:	00000428 	andeq	r0, r0, r8, lsr #8
     8e8:	27068105 	strcs	r8, [r6, -r5, lsl #2]
     8ec:	78000006 	stmdavc	r0, {r1, r2}
     8f0:	000a050c 	andeq	r0, sl, ip, lsl #10
     8f4:	06820500 	streq	r0, [r2], r0, lsl #10
     8f8:	00000316 	andeq	r0, r0, r6, lsl r3
     8fc:	004c0c80 	subeq	r0, ip, r0, lsl #25
     900:	83050000 	movwhi	r0, #20480	; 0x5000
     904:	00031606 	andeq	r1, r3, r6, lsl #12
     908:	dd0c8400 	cfstrsle	mvf8, [ip, #-0]
     90c:	05000010 	streq	r0, [r0, #-16]
     910:	03160684 	tsteq	r6, #132, 12	; 0x8400000
     914:	0c880000 	stceq	0, cr0, [r8], {0}
     918:	00000360 	andeq	r0, r0, r0, ror #6
     91c:	16068505 	strne	r8, [r6], -r5, lsl #10
     920:	8c000003 	stchi	0, cr0, [r0], {3}
     924:	000bf60c 	andeq	pc, fp, ip, lsl #12
     928:	06860500 	streq	r0, [r6], r0, lsl #10
     92c:	00000316 	andeq	r0, r0, r6, lsl r3
     930:	0e880c90 	mcreq	12, 4, r0, cr8, cr0, {4}
     934:	87050000 	strhi	r0, [r5, -r0]
     938:	00031606 	andeq	r1, r3, r6, lsl #12
     93c:	06009400 	streq	r9, [r0], -r0, lsl #8
     940:	00000f6e 	andeq	r0, r0, lr, ror #30
     944:	7c068905 			; <UNDEFINED> instruction: 0x7c068905
     948:	18000007 	stmdane	r0, {r0, r1, r2}
     94c:	84300910 	ldrthi	r0, [r0], #-2320	; 0xfffff6f0
     950:	19000009 	stmdbne	r0, {r0, r3}
     954:	0000114a 	andeq	r1, r0, sl, asr #2
     958:	030b3209 	movweq	r3, #45577	; 0xb209
     95c:	19000000 	stmdbne	r0, {}	; <UNPREDICTABLE>
     960:	0000008c 	andeq	r0, r0, ip, lsl #1
     964:	030b3309 	movweq	r3, #45833	; 0xb309
     968:	19040000 	stmdbne	r4, {}	; <UNPREDICTABLE>
     96c:	000005c5 	andeq	r0, r0, r5, asr #11
     970:	030b3409 	movweq	r3, #46089	; 0xb409
     974:	19080000 	stmdbne	r8, {}	; <UNPREDICTABLE>
     978:	0000053b 	andeq	r0, r0, fp, lsr r5
     97c:	030b3509 	movweq	r3, #46345	; 0xb509
     980:	000c0000 	andeq	r0, ip, r0
     984:	000f5707 	andeq	r5, pc, r7, lsl #14
     988:	4b360900 	blmi	d82d90 <startup-0x1f27d270>
     98c:	0f000009 	svceq	0x00000009
     990:	000002e6 	andeq	r0, r0, r6, ror #5
     994:	0000099f 	muleq	r0, pc, r9	; <UNPREDICTABLE>
     998:	0002ca10 	andeq	ip, r2, r0, lsl sl
     99c:	0a000f00 	beq	45a4 <startup-0x1fffba5c>
     9a0:	0000098f 	andeq	r0, r0, pc, lsl #19
     9a4:	00099f09 	andeq	r9, r9, r9, lsl #30
     9a8:	09901a00 	ldmibeq	r0, {r9, fp, ip}
     9ac:	99020000 	stmdbls	r2, {}	; <UNPREDICTABLE>
     9b0:	000009a4 	andeq	r0, r0, r4, lsr #19
     9b4:	2b200305 	blcs	8015d0 <startup-0x1f7fea30>
     9b8:	071b2000 	ldreq	r2, [fp, -r0]
     9bc:	00027101 	andeq	r7, r2, r1, lsl #2
     9c0:	e0420a00 	sub	r0, r2, r0, lsl #20
     9c4:	04000009 	streq	r0, [r0], #-9
     9c8:	000008c9 	andeq	r0, r0, r9, asr #17
     9cc:	075a0400 	ldrbeq	r0, [sl, -r0, lsl #8]
     9d0:	04010000 	streq	r0, [r1], #-0
     9d4:	0000027c 	andeq	r0, r0, ip, ror r2
     9d8:	02b80402 	adcseq	r0, r8, #33554432	; 0x2000000
     9dc:	00030000 	andeq	r0, r3, r0
     9e0:	000dd307 	andeq	sp, sp, r7, lsl #6
     9e4:	ba470a00 	blt	11c31ec <startup-0x1ee3ce14>
     9e8:	1b000009 	blne	a14 <startup-0x1ffff5ec>
     9ec:	02710107 	rsbseq	r0, r1, #-1073741823	; 0xc0000001
     9f0:	4f0a0000 	svcmi	0x000a0000
     9f4:	00000a05 	andeq	r0, r0, r5, lsl #20
     9f8:	00043704 	andeq	r3, r4, r4, lsl #14
     9fc:	79040000 	stmdbvc	r4, {}	; <UNPREDICTABLE>
     a00:	01000003 	tsteq	r0, r3
     a04:	01150700 	tsteq	r5, r0, lsl #14
     a08:	520a0000 	andpl	r0, sl, #0
     a0c:	000009eb 	andeq	r0, r0, fp, ror #19
     a10:	7101071b 	tstvc	r1, fp, lsl r7
     a14:	0a000002 	beq	a24 <startup-0x1ffff5dc>
     a18:	000a365a 	andeq	r3, sl, sl, asr r6
     a1c:	054b0400 	strbeq	r0, [fp, #-1024]	; 0xfffffc00
     a20:	04000000 	streq	r0, [r0], #-0
     a24:	000009a1 	andeq	r0, r0, r1, lsr #19
     a28:	12100401 	andsne	r0, r0, #16777216	; 0x1000000
     a2c:	04020000 	streq	r0, [r2], #-0
     a30:	00000a5b 	andeq	r0, r0, fp, asr sl
     a34:	ea070003 	b	1c0a48 <startup-0x1fe3f5b8>
     a38:	0a00000e 	beq	a78 <startup-0x1ffff588>
     a3c:	000a105f 	andeq	r1, sl, pc, asr r0
     a40:	01071b00 	tsteq	r7, r0, lsl #22
     a44:	00000271 	andeq	r0, r0, r1, ror r2
     a48:	0a616e0a 	beq	185c278 <startup-0x1e7a3d88>
     a4c:	9b040000 	blls	100a54 <startup-0x1feff5ac>
     a50:	00000000 	andeq	r0, r0, r0
     a54:	0010c304 	andseq	ip, r0, r4, lsl #6
     a58:	00040100 	andeq	r0, r4, r0, lsl #2
     a5c:	02000002 	andeq	r0, r0, #2
     a60:	04a50700 	strteq	r0, [r5], #1792	; 0x700
     a64:	720a0000 	andvc	r0, sl, #0
     a68:	00000a41 	andeq	r0, r0, r1, asr #20
     a6c:	840a0818 	strhi	r0, [sl], #-2072	; 0xfffff7e8
     a70:	00000ab1 			; <UNDEFINED> instruction: 0x00000ab1
     a74:	000f0e19 	andeq	r0, pc, r9, lsl lr	; <UNPREDICTABLE>
     a78:	0b860a00 	bleq	fe183280 <GPIO_Ports+0xde180730>
     a7c:	00000003 	andeq	r0, r0, r3
     a80:	000d7c19 	andeq	r7, sp, r9, lsl ip
     a84:	e0890a00 	add	r0, r9, r0, lsl #20
     a88:	04000009 	streq	r0, [r0], #-9
     a8c:	000b3019 	andeq	r3, fp, r9, lsl r0
     a90:	368c0a00 	strcc	r0, [ip], r0, lsl #20
     a94:	0500000a 	streq	r0, [r0, #-10]
     a98:	00097a19 	andeq	r7, r9, r9, lsl sl
     a9c:	058f0a00 	streq	r0, [pc, #2560]	; 14a4 <startup-0x1fffeb5c>
     aa0:	0600000a 	streq	r0, [r0], -sl
     aa4:	000f3b19 	andeq	r3, pc, r9, lsl fp	; <UNPREDICTABLE>
     aa8:	61920a00 	orrsvs	r0, r2, r0, lsl #20
     aac:	0700000a 	streq	r0, [r0, -sl]
     ab0:	03870700 	orreq	r0, r7, #0, 14
     ab4:	940a0000 	strls	r0, [sl], #-0
     ab8:	00000a6c 	andeq	r0, r0, ip, ror #20
     abc:	0008b91c 	andeq	fp, r8, ip, lsl r9
     ac0:	010b2000 	mrseq	r2, (UNDEF: 11)
     ac4:	00000b34 	andeq	r0, r0, r4, lsr fp
     ac8:	0064691d 	rsbeq	r6, r4, sp, lsl r9
     acc:	0b34030b 	bleq	d01700 <startup-0x1f2fe900>
     ad0:	19000000 	stmdbne	r0, {}	; <UNPREDICTABLE>
     ad4:	000002d5 	ldrdeq	r0, [r0], -r5
     ad8:	02c3040b 	sbceq	r0, r3, #184549376	; 0xb000000
     adc:	19040000 	stmdbne	r4, {}	; <UNPREDICTABLE>
     ae0:	000001c4 	andeq	r0, r0, r4, asr #3
     ae4:	0b34050b 	bleq	d01f18 <startup-0x1f2fe0e8>
     ae8:	19080000 	stmdbne	r8, {}	; <UNPREDICTABLE>
     aec:	00000c57 	andeq	r0, r0, r7, asr ip
     af0:	0b34060b 	bleq	d02324 <startup-0x1f2fdcdc>
     af4:	19090000 	stmdbne	r9, {}	; <UNPREDICTABLE>
     af8:	00000f8a 	andeq	r0, r0, sl, lsl #31
     afc:	02c3070b 	sbceq	r0, r3, #2883584	; 0x2c0000
     b00:	190c0000 	stmdbne	ip, {}	; <UNPREDICTABLE>
     b04:	00000ec1 	andeq	r0, r0, r1, asr #29
     b08:	02c3080b 	sbceq	r0, r3, #720896	; 0xb0000
     b0c:	19100000 	ldmdbne	r0, {}	; <UNPREDICTABLE>
     b10:	000005b0 			; <UNDEFINED> instruction: 0x000005b0
     b14:	02c3090b 	sbceq	r0, r3, #180224	; 0x2c000
     b18:	19140000 	ldmdbne	r4, {}	; <UNPREDICTABLE>
     b1c:	00001078 	andeq	r1, r0, r8, ror r0
     b20:	02c30a0b 	sbceq	r0, r3, #45056	; 0xb000
     b24:	19180000 	ldmdbne	r8, {}	; <UNPREDICTABLE>
     b28:	00000fa8 	andeq	r0, r0, r8, lsr #31
     b2c:	0b3b0b0b 	bleq	ec3760 <startup-0x1f13c8a0>
     b30:	001c0000 	andseq	r0, ip, r0
     b34:	fd080105 	stc2	1, cr0, [r8, #-20]	; 0xffffffec
     b38:	1e000003 	cdpne	0, 0, cr0, cr0, cr3, {0}
     b3c:	00077004 	andeq	r7, r7, r4
     b40:	08ba0700 	ldmeq	sl!, {r8, r9, sl}
     b44:	0c0b0000 	stceq	0, cr0, [fp], {-0}
     b48:	00000abc 			; <UNDEFINED> instruction: 0x00000abc
     b4c:	0002eb0f 	andeq	lr, r2, pc, lsl #22
     b50:	000b5c00 	andeq	r5, fp, r0, lsl #24
     b54:	02ca1000 	sbceq	r1, sl, #0
     b58:	000f0000 	andeq	r0, pc, r0
     b5c:	0007501f 	andeq	r5, r7, pc, lsl r0
     b60:	4c170400 	cfldrsmi	mvf0, [r7], {-0}
     b64:	0500000b 	streq	r0, [r0, #-11]
     b68:	002b3003 	eoreq	r3, fp, r3
     b6c:	0b3b0f20 	bleq	ec47f4 <startup-0x1f13b80c>
     b70:	0b7d0000 	bleq	1f40b78 <startup-0x1e0bf488>
     b74:	ca100000 	bgt	400b7c <startup-0x1fbff484>
     b78:	01000002 	tsteq	r0, r2
     b7c:	02341f00 	eorseq	r1, r4, #0, 30
     b80:	1c040000 	stcne	0, cr0, [r4], {-0}
     b84:	00000b6d 	andeq	r0, r0, sp, ror #22
     b88:	2b500305 	blcs	14017a4 <startup-0x1ebfe85c>
     b8c:	201f2000 	andscs	r2, pc, r0
     b90:	04000009 	streq	r0, [r0], #-9
     b94:	0003161f 	andeq	r1, r3, pc, lsl r6
     b98:	1c030500 	cfstr32ne	mvfx0, [r3], {-0}
     b9c:	2020002b 	eorcs	r0, r0, fp, lsr #32
     ba0:	0000105f 	andeq	r1, r0, pc, asr r0
     ba4:	0ef83104 	cdpeq	1, 15, cr3, cr8, cr4, {0}
     ba8:	08ec2000 	stmiaeq	ip!, {sp}^
     bac:	9c010000 	stcls	0, cr0, [r1], {-0}
     bb0:	00000d5c 	andeq	r0, r0, ip, asr sp
     bb4:	0004db1a 	andeq	sp, r4, sl, lsl fp
     bb8:	41370400 	teqmi	r7, r0, lsl #8
     bbc:	0300000b 	movweq	r0, #11
     bc0:	1a7fa091 	bne	1fe8e0c <startup-0x1e0171f4>
     bc4:	000004e1 	andeq	r0, r0, r1, ror #9
     bc8:	0b413704 	bleq	104e7e0 <startup-0x1efb1820>
     bcc:	91030000 	mrsls	r0, (UNDEF: 3)
     bd0:	e71a7f80 	ldr	r7, [sl, -r0, lsl #31]
     bd4:	04000004 	streq	r0, [r0], #-4
     bd8:	000b4137 	andeq	r4, fp, r7, lsr r1
     bdc:	e0910300 	adds	r0, r1, r0, lsl #6
     be0:	04ed1a7e 	strbteq	r1, [sp], #2686	; 0xa7e
     be4:	37040000 	strcc	r0, [r4, -r0]
     be8:	00000b41 	andeq	r0, r0, r1, asr #22
     bec:	7ec09103 	acsvcs	f1, f3
     bf0:	0004f31a 	andeq	pc, r4, sl, lsl r3	; <UNPREDICTABLE>
     bf4:	41370400 	teqmi	r7, r0, lsl #8
     bf8:	0300000b 	movweq	r0, #11
     bfc:	1a7ea091 	bne	1fa8e48 <startup-0x1e0571b8>
     c00:	000004f9 	strdeq	r0, [r0], -r9
     c04:	0b413704 	bleq	104e81c <startup-0x1efb17e4>
     c08:	91030000 	mrsls	r0, (UNDEF: 3)
     c0c:	ff1a7e80 			; <UNDEFINED> instruction: 0xff1a7e80
     c10:	04000004 	streq	r0, [r0], #-4
     c14:	000b4137 	andeq	r4, fp, r7, lsr r1
     c18:	e0910300 	adds	r0, r1, r0, lsl #6
     c1c:	05051a7d 	streq	r1, [r5, #-2685]	; 0xfffff583
     c20:	37040000 	strcc	r0, [r4, -r0]
     c24:	00000b41 	andeq	r0, r0, r1, asr #22
     c28:	7dc09103 	stfvcp	f1, [r0, #12]
     c2c:	000dbe1a 	andeq	fp, sp, sl, lsl lr
     c30:	41370400 	teqmi	r7, r0, lsl #8
     c34:	0300000b 	movweq	r0, #11
     c38:	1a7da091 	bne	1f68e84 <startup-0x1e09717c>
     c3c:	00000dc5 	andeq	r0, r0, r5, asr #27
     c40:	0b413704 	bleq	104e858 <startup-0x1efb17a8>
     c44:	91030000 	mrsls	r0, (UNDEF: 3)
     c48:	cc1a7d80 	ldcgt	13, cr7, [sl], {128}	; 0x80
     c4c:	0400000d 	streq	r0, [r0], #-13
     c50:	000b4137 	andeq	r4, fp, r7, lsr r1
     c54:	e0910300 	adds	r0, r1, r0, lsl #6
     c58:	05d51a7c 	ldrbeq	r1, [r5, #2684]	; 0xa7c
     c5c:	37040000 	strcc	r0, [r4, -r0]
     c60:	00000b41 	andeq	r0, r0, r1, asr #22
     c64:	7cc09103 	stfvcp	f1, [r0], {3}
     c68:	000de41a 	andeq	lr, sp, sl, lsl r4
     c6c:	41370400 	teqmi	r7, r0, lsl #8
     c70:	0300000b 	movweq	r0, #11
     c74:	1a7ca091 	bne	1f28ec0 <startup-0x1e0d7140>
     c78:	00000deb 	andeq	r0, r0, fp, ror #27
     c7c:	0b413704 	bleq	104e894 <startup-0x1efb176c>
     c80:	91030000 	mrsls	r0, (UNDEF: 3)
     c84:	f21a7c80 			; <UNDEFINED> instruction: 0xf21a7c80
     c88:	0400000d 	streq	r0, [r0], #-13
     c8c:	000b4137 	andeq	r4, fp, r7, lsr r1
     c90:	e0910300 	adds	r0, r1, r0, lsl #6
     c94:	05e11a7b 	strbeq	r1, [r1, #2683]!	; 0xa7b
     c98:	38040000 	stmdacc	r4, {}	; <UNPREDICTABLE>
     c9c:	00000d5c 	andeq	r0, r0, ip, asr sp
     ca0:	77e09103 	strbvc	r9, [r0, r3, lsl #2]!
     ca4:	0006ac1a 	andeq	sl, r6, sl, lsl ip
     ca8:	c33a0400 	teqgt	sl, #0, 8
     cac:	02000002 	andeq	r0, r0, #2
     cb0:	d71a5c91 			; <UNDEFINED> instruction: 0xd71a5c91
     cb4:	0400000b 	streq	r0, [r0], #-11
     cb8:	000d6c44 	andeq	r6, sp, r4, asr #24
     cbc:	40910300 	addsmi	r0, r1, r0, lsl #6
     cc0:	07371a06 	ldreq	r1, [r7, -r6, lsl #20]!
     cc4:	45040000 	strmi	r0, [r4, #-0]
     cc8:	000002c3 	andeq	r0, r0, r3, asr #5
     ccc:	21589102 	cmpcs	r8, r2, lsl #2
     cd0:	200011c6 	andcs	r1, r0, r6, asr #3
     cd4:	000000f2 	strdeq	r0, [r0], -r2
     cd8:	00000cff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
     cdc:	04006a22 	streq	r6, [r0], #-2594	; 0xfffff5de
     ce0:	0002c33b 	andeq	ip, r2, fp, lsr r3
     ce4:	60910200 	addsvs	r0, r1, r0, lsl #4
     ce8:	0011d823 	andseq	sp, r1, r3, lsr #16
     cec:	0000b620 	andeq	fp, r0, r0, lsr #12
     cf0:	00692200 	rsbeq	r2, r9, r0, lsl #4
     cf4:	02c33d04 	sbceq	r3, r3, #4, 26	; 0x100
     cf8:	91020000 	mrsls	r0, (UNDEF: 2)
     cfc:	21000064 	tstcs	r0, r4, rrx
     d00:	2000134a 	andcs	r1, r0, sl, asr #6
     d04:	000001d2 	ldrdeq	r0, [r0], -r2
     d08:	00000d2f 	andeq	r0, r0, pc, lsr #26
     d0c:	04006a22 	streq	r6, [r0], #-2594	; 0xfffff5de
     d10:	0002c346 	andeq	ip, r2, r6, asr #6
     d14:	54910200 	ldrpl	r0, [r1], #512	; 0x200
     d18:	00135c23 	andseq	r5, r3, r3, lsr #24
     d1c:	00019420 	andeq	r9, r1, r0, lsr #8
     d20:	00692200 	rsbeq	r2, r9, r0, lsl #4
     d24:	02c34804 	sbceq	r4, r3, #4, 16	; 0x40000
     d28:	91020000 	mrsls	r0, (UNDEF: 2)
     d2c:	23000050 	movwcs	r0, #80	; 0x50
     d30:	20001526 	andcs	r1, r0, r6, lsr #10
     d34:	000002b2 			; <UNDEFINED> instruction: 0x000002b2
     d38:	04006922 	streq	r6, [r0], #-2338	; 0xfffff6de
     d3c:	0002c361 	andeq	ip, r2, r1, ror #6
     d40:	4c910200 	lfmmi	f0, 4, [r1], {0}
     d44:	00165023 	andseq	r5, r6, r3, lsr #32
     d48:	00015620 	andeq	r5, r1, r0, lsr #12
     d4c:	00692200 	rsbeq	r2, r9, r0, lsl #4
     d50:	02c36d04 	sbceq	r6, r3, #4, 26	; 0x100
     d54:	91020000 	mrsls	r0, (UNDEF: 2)
     d58:	00000048 	andeq	r0, r0, r8, asr #32
     d5c:	000b410f 	andeq	r4, fp, pc, lsl #2
     d60:	000d6c00 	andeq	r6, sp, r0, lsl #24
     d64:	02ca1000 	sbceq	r1, sl, #0
     d68:	000f0000 	andeq	r0, pc, r0
     d6c:	000b410f 	andeq	r4, fp, pc, lsl #2
     d70:	000d7f00 	andeq	r7, sp, r0, lsl #30
     d74:	02ca2400 	sbceq	r2, sl, #0, 8
     d78:	91030000 	mrsls	r0, (UNDEF: 3)
     d7c:	20000644 	andcs	r0, r0, r4, asr #12
     d80:	00000b90 	muleq	r0, r0, fp
     d84:	0ecc2404 	cdpeq	4, 12, cr2, cr12, cr4, {0}
     d88:	002c2000 	eoreq	r2, ip, r0
     d8c:	9c010000 	stcls	0, cr0, [r1], {-0}
     d90:	00000da3 	andeq	r0, r0, r3, lsr #27
     d94:	00010a1a 	andeq	r0, r1, sl, lsl sl
     d98:	0b280400 	bleq	a01da0 <startup-0x1f5fe260>
     d9c:	02000003 	andeq	r0, r0, #3
     da0:	25007491 	strcs	r7, [r0, #-1169]	; 0xfffffb6f
     da4:	00000245 	andeq	r0, r0, r5, asr #4
     da8:	0eb42004 	cdpeq	0, 11, cr2, cr4, cr4, {0}
     dac:	00182000 	andseq	r2, r8, r0
     db0:	9c010000 	stcls	0, cr0, [r1], {-0}
     db4:	000cae25 	andeq	sl, ip, r5, lsr #28
     db8:	000d0400 	andeq	r0, sp, r0, lsl #8
     dbc:	0c200000 	stceq	0, cr0, [r0], #-0
     dc0:	01000000 	mrseq	r0, (UNDEF: 0)
     dc4:	022f269c 	eoreq	r2, pc, #156, 12	; 0x9c00000
     dc8:	02030000 	andeq	r0, r3, #0
     dcc:	20000da8 	andcs	r0, r0, r8, lsr #27
     dd0:	0000010c 	andeq	r0, r0, ip, lsl #2
     dd4:	0de99c01 	stcleq	12, cr9, [r9, #4]!
     dd8:	781a0000 	ldmdavc	sl, {}	; <UNPREDICTABLE>
     ddc:	0300000e 	movweq	r0, #14
     de0:	000ab105 	andeq	fp, sl, r5, lsl #2
     de4:	70910200 	addsvc	r0, r1, r0, lsl #4
     de8:	0b482700 	bleq	120a9f0 <startup-0x1edf5610>
     dec:	5e020000 	cdppl	0, 0, cr0, cr2, cr0, {0}
     df0:	000d880c 	andeq	r8, sp, ip, lsl #16
     df4:	00002020 	andeq	r2, r0, r0, lsr #32
     df8:	0f9c0100 	svceq	0x009c0100
     dfc:	2800000e 	stmdacs	r0, {r1, r2, r3}
     e00:	00000f9c 	muleq	r0, ip, pc	; <UNPREDICTABLE>
     e04:	d10c5e02 	tstle	ip, r2, lsl #28
     e08:	02000002 	andeq	r0, r0, #2
     e0c:	29007791 	stmdbcs	r0, {r0, r4, r7, r8, r9, sl, ip, sp, lr}
     e10:	00000af9 	strdeq	r0, [r0], -r9
     e14:	750c3c02 	strvc	r3, [ip, #-3074]	; 0xfffff3fe
     e18:	44000006 	strmi	r0, [r0], #-6
     e1c:	4420000d 	strtmi	r0, [r0], #-13
     e20:	01000000 	mrseq	r0, (UNDEF: 0)
     e24:	000e489c 	muleq	lr, ip, r8
     e28:	0f9c2800 	svceq	0x009c2800
     e2c:	3c020000 	stccc	0, cr0, [r2], {-0}
     e30:	0002d10c 	andeq	sp, r2, ip, lsl #2
     e34:	6f910200 	svcvs	0x00910200
     e38:	000fd02a 	andeq	sp, pc, sl, lsr #32
     e3c:	0c3e0200 	lfmeq	f0, 4, [lr], #-0
     e40:	00000675 	andeq	r0, r0, r5, ror r6
     e44:	00779102 	rsbseq	r9, r7, r2, lsl #2
     e48:	0006cf2b 	andeq	ip, r6, fp, lsr #30
     e4c:	0c280200 	sfmeq	f0, 4, [r8], #-0
     e50:	20000d28 	andcs	r0, r0, r8, lsr #26
     e54:	0000001c 	andeq	r0, r0, ip, lsl r0
     e58:	38299c01 	stmdacc	r9!, {r0, sl, fp, ip, pc}
     e5c:	0200000a 	andeq	r0, r0, #10
     e60:	06690bfb 			; <UNDEFINED> instruction: 0x06690bfb
     e64:	0ca40000 	stceq	0, cr0, [r4]
     e68:	00842000 	addeq	r2, r4, r0
     e6c:	9c010000 	stcls	0, cr0, [r1], {-0}
     e70:	00000eb1 			; <UNDEFINED> instruction: 0x00000eb1
     e74:	000af028 	andeq	pc, sl, r8, lsr #32
     e78:	0bfb0200 	bleq	ffec1680 <GPIO_Ports+0xdfebeb30>
     e7c:	000002d1 	ldrdeq	r0, [r0], -r1
     e80:	2c679102 	stfcsp	f1, [r7], #-8
     e84:	00706d74 	rsbseq	r6, r0, r4, ror sp
     e88:	0b0bfd02 	bleq	300298 <startup-0x1fcffd68>
     e8c:	02000003 	andeq	r0, r0, #3
     e90:	9d2a6c91 	stcls	12, cr6, [sl, #-580]!	; 0xfffffdbc
     e94:	0200000b 	andeq	r0, r0, #11
     e98:	030b0bfe 	movweq	r0, #48126	; 0xbbfe
     e9c:	91020000 	mrsls	r0, (UNDEF: 2)
     ea0:	0fd02a74 	svceq	0x00d02a74
     ea4:	ff020000 			; <UNDEFINED> instruction: 0xff020000
     ea8:	0006690b 	andeq	r6, r6, fp, lsl #18
     eac:	73910200 	orrsvc	r0, r1, #0, 4
     eb0:	0a6b2700 	beq	1acaab8 <startup-0x1e535548>
     eb4:	d6020000 	strle	r0, [r2], -r0
     eb8:	000c540b 	andeq	r5, ip, fp, lsl #8
     ebc:	00005020 	andeq	r5, r0, r0, lsr #32
     ec0:	e69c0100 	ldr	r0, [ip], r0, lsl #2
     ec4:	2800000e 	stmdacs	r0, {r1, r2, r3}
     ec8:	00000f9c 	muleq	r0, ip, pc	; <UNPREDICTABLE>
     ecc:	d10bd602 	tstle	fp, r2, lsl #12
     ed0:	02000002 	andeq	r0, r0, #2
     ed4:	27287791 			; <UNDEFINED> instruction: 0x27287791
     ed8:	0200000b 	andeq	r0, r0, #11
     edc:	069c0bd6 			; <UNDEFINED> instruction: 0x069c0bd6
     ee0:	91020000 	mrsls	r0, (UNDEF: 2)
     ee4:	9d270076 	stcls	0, cr0, [r7, #-472]!	; 0xfffffe28
     ee8:	0200000d 	andeq	r0, r0, #13
     eec:	0c180a9e 			; <UNDEFINED> instruction: 0x0c180a9e
     ef0:	003c2000 	eorseq	r2, ip, r0
     ef4:	9c010000 	stcls	0, cr0, [r1], {-0}
     ef8:	00000f0c 	andeq	r0, r0, ip, lsl #30
     efc:	00013e28 	andeq	r3, r1, r8, lsr #28
     f00:	0a9e0200 	beq	fe781708 <GPIO_Ports+0xde77ebb8>
     f04:	000002d1 	ldrdeq	r0, [r0], -r1
     f08:	00779102 	rsbseq	r9, r7, r2, lsl #2
     f0c:	0000d027 	andeq	sp, r0, r7, lsr #32
     f10:	0a860200 	beq	fe181718 <GPIO_Ports+0xde17ebc8>
     f14:	20000bd8 	ldrdcs	r0, [r0], -r8
     f18:	00000040 	andeq	r0, r0, r0, asr #32
     f1c:	0f419c01 	svceq	0x00419c01
     f20:	a7280000 	strge	r0, [r8, -r0]!
     f24:	0200000b 	andeq	r0, r0, #11
     f28:	030b0a86 	movweq	r0, #47750	; 0xba86
     f2c:	91020000 	mrsls	r0, (UNDEF: 2)
     f30:	0b272874 	bleq	9cb108 <startup-0x1f634ef8>
     f34:	86020000 	strhi	r0, [r2], -r0
     f38:	00069c0a 	andeq	r9, r6, sl, lsl #24
     f3c:	73910200 	orrsvc	r0, r1, #0, 4
     f40:	0fe82700 	svceq	0x00e82700
     f44:	52020000 	andpl	r0, r2, #0
     f48:	000b980a 	andeq	r9, fp, sl, lsl #16
     f4c:	00004020 	andeq	r4, r0, r0, lsr #32
     f50:	769c0100 	ldrvc	r0, [ip], r0, lsl #2
     f54:	2800000f 	stmdacs	r0, {r0, r1, r2, r3}
     f58:	00000abf 			; <UNDEFINED> instruction: 0x00000abf
     f5c:	0b0a5202 	bleq	29576c <startup-0x1fd6a894>
     f60:	02000003 	andeq	r0, r0, #3
     f64:	27287491 			; <UNDEFINED> instruction: 0x27287491
     f68:	0200000b 	andeq	r0, r0, #11
     f6c:	069c0a52 			; <UNDEFINED> instruction: 0x069c0a52
     f70:	91020000 	mrsls	r0, (UNDEF: 2)
     f74:	0b270073 	bleq	9c1148 <startup-0x1f63eeb8>
     f78:	02000005 	andeq	r0, r0, #5
     f7c:	0b580a19 	bleq	16037e8 <startup-0x1e9fc818>
     f80:	00402000 	subeq	r2, r0, r0
     f84:	9c010000 	stcls	0, cr0, [r1], {-0}
     f88:	00000fab 	andeq	r0, r0, fp, lsr #31
     f8c:	00034528 	andeq	r4, r3, r8, lsr #10
     f90:	0a190200 	beq	641798 <startup-0x1f9be868>
     f94:	0000030b 	andeq	r0, r0, fp, lsl #6
     f98:	28749102 	ldmdacs	r4!, {r1, r8, ip, pc}^
     f9c:	00000b27 	andeq	r0, r0, r7, lsr #22
     fa0:	9c0a1902 			; <UNDEFINED> instruction: 0x9c0a1902
     fa4:	02000006 	andeq	r0, r0, #6
     fa8:	27007391 			; <UNDEFINED> instruction: 0x27007391
     fac:	000000ed 	andeq	r0, r0, sp, ror #1
     fb0:	1809fb02 	stmdane	r9, {r1, r8, r9, fp, ip, sp, lr, pc}
     fb4:	4020000b 	eormi	r0, r0, fp
     fb8:	01000000 	mrseq	r0, (UNDEF: 0)
     fbc:	000fe09c 	muleq	pc, ip, r0	; <UNPREDICTABLE>
     fc0:	10b42800 	adcsne	r2, r4, r0, lsl #16
     fc4:	fb020000 	blx	80fce <startup-0x1ff7f032>
     fc8:	00030b09 	andeq	r0, r3, r9, lsl #22
     fcc:	74910200 	ldrvc	r0, [r1], #512	; 0x200
     fd0:	000b2728 	andeq	r2, fp, r8, lsr #14
     fd4:	09fb0200 	ldmibeq	fp!, {r9}^
     fd8:	0000069c 	muleq	r0, ip, r6
     fdc:	00739102 	rsbseq	r9, r3, r2, lsl #2
     fe0:	00103a27 	andseq	r3, r0, r7, lsr #20
     fe4:	09db0200 	ldmibeq	fp, {r9}^
     fe8:	20000ad8 	ldrdcs	r0, [r0], -r8
     fec:	00000040 	andeq	r0, r0, r0, asr #32
     ff0:	10159c01 	andsne	r9, r5, r1, lsl #24
     ff4:	96280000 	strtls	r0, [r8], -r0
     ff8:	0200000e 	andeq	r0, r0, #14
     ffc:	030b09db 	movweq	r0, #47579	; 0xb9db
    1000:	91020000 	mrsls	r0, (UNDEF: 2)
    1004:	0b272874 	bleq	9cb1dc <startup-0x1f634e24>
    1008:	db020000 	blle	81010 <startup-0x1ff7eff0>
    100c:	00069c09 	andeq	r9, r6, r9, lsl #24
    1010:	73910200 	orrsvc	r0, r1, #0, 4
    1014:	04c42700 	strbeq	r2, [r4], #1792	; 0x700
    1018:	aa020000 	bge	81020 <startup-0x1ff7efe0>
    101c:	000a9809 	andeq	r9, sl, r9, lsl #16
    1020:	00004020 	andeq	r4, r0, r0, lsr #32
    1024:	4a9c0100 	bmi	fe70142c <GPIO_Ports+0xde6fe8dc>
    1028:	28000010 	stmdacs	r0, {r4}
    102c:	00000ba7 	andeq	r0, r0, r7, lsr #23
    1030:	0b09aa02 	bleq	26b840 <startup-0x1fd947c0>
    1034:	02000003 	andeq	r0, r0, #3
    1038:	27287491 			; <UNDEFINED> instruction: 0x27287491
    103c:	0200000b 	andeq	r0, r0, #11
    1040:	069c09aa 	ldreq	r0, [ip], sl, lsr #19
    1044:	91020000 	mrsls	r0, (UNDEF: 2)
    1048:	27270073 			; <UNDEFINED> instruction: 0x27270073
    104c:	02000001 	andeq	r0, r0, #1
    1050:	0a58097b 	beq	1603644 <startup-0x1e9fc9bc>
    1054:	00402000 	subeq	r2, r0, r0
    1058:	9c010000 	stcls	0, cr0, [r1], {-0}
    105c:	0000107f 	andeq	r1, r0, pc, ror r0
    1060:	000abf28 	andeq	fp, sl, r8, lsr #30
    1064:	097b0200 	ldmdbeq	fp!, {r9}^
    1068:	0000030b 	andeq	r0, r0, fp, lsl #6
    106c:	28749102 	ldmdacs	r4!, {r1, r8, ip, pc}^
    1070:	00000b27 	andeq	r0, r0, r7, lsr #22
    1074:	9c097b02 			; <UNDEFINED> instruction: 0x9c097b02
    1078:	02000006 	andeq	r0, r0, #6
    107c:	27007391 			; <UNDEFINED> instruction: 0x27007391
    1080:	00000289 	andeq	r0, r0, r9, lsl #5
    1084:	18094502 	stmdane	r9, {r1, r8, sl, lr}
    1088:	4020000a 	eormi	r0, r0, sl
    108c:	01000000 	mrseq	r0, (UNDEF: 0)
    1090:	0010b49c 	mulseq	r0, ip, r4
    1094:	03452800 	movteq	r2, #22528	; 0x5800
    1098:	45020000 	strmi	r0, [r2, #-0]
    109c:	00030b09 	andeq	r0, r3, r9, lsl #22
    10a0:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    10a4:	000b2728 	andeq	r2, fp, r8, lsr #14
    10a8:	09450200 	stmdbeq	r5, {r9}^
    10ac:	0000069c 	muleq	r0, ip, r6
    10b0:	00739102 	rsbseq	r9, r3, r2, lsl #2
    10b4:	0011c027 	andseq	ip, r1, r7, lsr #32
    10b8:	092a0200 	stmdbeq	sl!, {r9}
    10bc:	200009d8 	ldrdcs	r0, [r0], -r8
    10c0:	00000040 	andeq	r0, r0, r0, asr #32
    10c4:	10e99c01 	rscne	r9, r9, r1, lsl #24
    10c8:	b4280000 	strtlt	r0, [r8], #-0
    10cc:	02000010 	andeq	r0, r0, #16
    10d0:	030b092a 	movweq	r0, #47402	; 0xb92a
    10d4:	91020000 	mrsls	r0, (UNDEF: 2)
    10d8:	0b272874 	bleq	9cb2b0 <startup-0x1f634d50>
    10dc:	2a020000 	bcs	810e4 <startup-0x1ff7ef1c>
    10e0:	00069c09 	andeq	r9, r6, r9, lsl #24
    10e4:	73910200 	orrsvc	r0, r1, #0, 4
    10e8:	0f172700 	svceq	0x00172700
    10ec:	0d020000 	stceq	0, cr0, [r2, #-0]
    10f0:	00099809 	andeq	r9, r9, r9, lsl #16
    10f4:	00004020 	andeq	r4, r0, r0, lsr #32
    10f8:	1e9c0100 	fmlnee	f0, f4, f0
    10fc:	28000011 	stmdacs	r0, {r0, r4}
    1100:	00000e96 	muleq	r0, r6, lr
    1104:	0b090d02 	bleq	244514 <startup-0x1fdbbaec>
    1108:	02000003 	andeq	r0, r0, #3
    110c:	27287491 			; <UNDEFINED> instruction: 0x27287491
    1110:	0200000b 	andeq	r0, r0, #11
    1114:	069c090d 	ldreq	r0, [ip], sp, lsl #18
    1118:	91020000 	mrsls	r0, (UNDEF: 2)
    111c:	29270073 	stmdbcs	r7!, {r0, r1, r4, r5, r6}
    1120:	02000008 	andeq	r0, r0, #8
    1124:	095808e3 	ldmdbeq	r8, {r0, r1, r5, r6, r7, fp}^
    1128:	00402000 	subeq	r2, r0, r0
    112c:	9c010000 	stcls	0, cr0, [r1], {-0}
    1130:	00001153 	andeq	r1, r0, r3, asr r1
    1134:	000ba728 	andeq	sl, fp, r8, lsr #14
    1138:	08e30200 	stmiaeq	r3!, {r9}^
    113c:	0000030b 	andeq	r0, r0, fp, lsl #6
    1140:	28749102 	ldmdacs	r4!, {r1, r8, ip, pc}^
    1144:	00000b27 	andeq	r0, r0, r7, lsr #22
    1148:	9c08e302 	stcls	3, cr14, [r8], {2}
    114c:	02000006 	andeq	r0, r0, #6
    1150:	27007391 			; <UNDEFINED> instruction: 0x27007391
    1154:	000003c9 	andeq	r0, r0, r9, asr #7
    1158:	1808af02 	stmdane	r8, {r1, r8, r9, sl, fp, sp, pc}
    115c:	40200009 	eormi	r0, r0, r9
    1160:	01000000 	mrseq	r0, (UNDEF: 0)
    1164:	0011889c 	mulseq	r1, ip, r8
    1168:	0abf2800 	beq	fefcb170 <GPIO_Ports+0xdefc8620>
    116c:	af020000 	svcge	0x00020000
    1170:	00030b08 	andeq	r0, r3, r8, lsl #22
    1174:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    1178:	000b2728 	andeq	r2, fp, r8, lsr #14
    117c:	08af0200 	stmiaeq	pc!, {r9}	; <UNPREDICTABLE>
    1180:	0000069c 	muleq	r0, ip, r6
    1184:	00739102 	rsbseq	r9, r3, r2, lsl #2
    1188:	000c3327 	andeq	r3, ip, r7, lsr #6
    118c:	08760200 	ldmdaeq	r6!, {r9}^
    1190:	200008d8 	ldrdcs	r0, [r0], -r8
    1194:	00000040 	andeq	r0, r0, r0, asr #32
    1198:	11bd9c01 			; <UNDEFINED> instruction: 0x11bd9c01
    119c:	45280000 	strmi	r0, [r8, #-0]!
    11a0:	02000003 	andeq	r0, r0, #3
    11a4:	030b0876 	movweq	r0, #47222	; 0xb876
    11a8:	91020000 	mrsls	r0, (UNDEF: 2)
    11ac:	0b272874 	bleq	9cb384 <startup-0x1f634c7c>
    11b0:	76020000 	strvc	r0, [r2], -r0
    11b4:	00069c08 	andeq	r9, r6, r8, lsl #24
    11b8:	73910200 	orrsvc	r0, r1, #0, 4
    11bc:	01622700 	cmneq	r2, r0, lsl #14
    11c0:	58020000 	stmdapl	r2, {}	; <UNPREDICTABLE>
    11c4:	00089808 	andeq	r9, r8, r8, lsl #16
    11c8:	00004020 	andeq	r4, r0, r0, lsr #32
    11cc:	f29c0100 	vaddw.s16	q0, q6, d0
    11d0:	28000011 	stmdacs	r0, {r0, r4}
    11d4:	000010b4 	strheq	r1, [r0], -r4
    11d8:	0b085802 	bleq	2171e8 <startup-0x1fde8e18>
    11dc:	02000003 	andeq	r0, r0, #3
    11e0:	27287491 			; <UNDEFINED> instruction: 0x27287491
    11e4:	0200000b 	andeq	r0, r0, #11
    11e8:	069c0858 			; <UNDEFINED> instruction: 0x069c0858
    11ec:	91020000 	mrsls	r0, (UNDEF: 2)
    11f0:	ed270073 	stc	0, cr0, [r7, #-460]!	; 0xfffffe34
    11f4:	02000010 	andeq	r0, r0, #16
    11f8:	08580838 	ldmdaeq	r8, {r3, r4, r5, fp}^
    11fc:	00402000 	subeq	r2, r0, r0
    1200:	9c010000 	stcls	0, cr0, [r1], {-0}
    1204:	00001227 	andeq	r1, r0, r7, lsr #4
    1208:	000e9628 	andeq	r9, lr, r8, lsr #12
    120c:	08380200 	ldmdaeq	r8!, {r9}
    1210:	0000030b 	andeq	r0, r0, fp, lsl #6
    1214:	28749102 	ldmdacs	r4!, {r1, r8, ip, pc}^
    1218:	00000b27 	andeq	r0, r0, r7, lsr #22
    121c:	9c083802 	stcls	8, cr3, [r8], {2}
    1220:	02000006 	andeq	r0, r0, #6
    1224:	27007391 			; <UNDEFINED> instruction: 0x27007391
    1228:	0000017e 	andeq	r0, r0, lr, ror r1
    122c:	3c080e02 	stccc	14, cr0, [r8], {2}
    1230:	1c200008 	stcne	0, cr0, [r0], #-32	; 0xffffffe0
    1234:	01000000 	mrseq	r0, (UNDEF: 0)
    1238:	00124d9c 	mulseq	r2, ip, sp
    123c:	11a12800 			; <UNDEFINED> instruction: 0x11a12800
    1240:	0e020000 	cdpeq	0, 0, cr0, cr2, cr0, {0}
    1244:	00030b08 	andeq	r0, r3, r8, lsl #22
    1248:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    124c:	02552700 	subseq	r2, r5, #0, 14
    1250:	8e020000 	cdphi	0, 0, cr0, cr2, cr0, {0}
    1254:	00080007 	andeq	r0, r8, r7
    1258:	00003c20 	andeq	r3, r0, r0, lsr #24
    125c:	829c0100 	addshi	r0, ip, #0, 2
    1260:	28000012 	stmdacs	r0, {r1, r4}
    1264:	0000084f 	andeq	r0, r0, pc, asr #16
    1268:	0b078e02 	bleq	1e4a78 <startup-0x1fe1b588>
    126c:	02000003 	andeq	r0, r0, #3
    1270:	672a6c91 			; <UNDEFINED> instruction: 0x672a6c91
    1274:	0200000e 	andeq	r0, r0, #14
    1278:	030b0790 	movweq	r0, #46992	; 0xb790
    127c:	91020000 	mrsls	r0, (UNDEF: 2)
    1280:	15270074 	strne	r0, [r7, #-116]!	; 0xffffff8c
    1284:	02000002 	andeq	r0, r0, #2
    1288:	07c0072b 	strbeq	r0, [r0, fp, lsr #14]
    128c:	00402000 	subeq	r2, r0, r0
    1290:	9c010000 	stcls	0, cr0, [r1], {-0}
    1294:	000012b7 			; <UNDEFINED> instruction: 0x000012b7
    1298:	00084028 	andeq	r4, r8, r8, lsr #32
    129c:	072b0200 	streq	r0, [fp, -r0, lsl #4]!
    12a0:	0000030b 	andeq	r0, r0, fp, lsl #6
    12a4:	2a6c9102 	bcs	1b256b4 <startup-0x1e4da94c>
    12a8:	00000e67 	andeq	r0, r0, r7, ror #28
    12ac:	0b072d02 	bleq	1cc6bc <startup-0x1fe33944>
    12b0:	02000003 	andeq	r0, r0, #3
    12b4:	27007491 			; <UNDEFINED> instruction: 0x27007491
    12b8:	000009b3 			; <UNDEFINED> instruction: 0x000009b3
    12bc:	84070b02 	strhi	r0, [r7], #-2818	; 0xfffff4fe
    12c0:	3c200007 	stccc	0, cr0, [r0], #-28	; 0xffffffe4
    12c4:	01000000 	mrseq	r0, (UNDEF: 0)
    12c8:	0012ec9c 	mulseq	r2, ip, ip
    12cc:	03292800 			; <UNDEFINED> instruction: 0x03292800
    12d0:	0b020000 	bleq	812d8 <startup-0x1ff7ed28>
    12d4:	00030b07 	andeq	r0, r3, r7, lsl #22
    12d8:	6c910200 	lfmvs	f0, 4, [r1], {0}
    12dc:	000e672a 	andeq	r6, lr, sl, lsr #14
    12e0:	070d0200 	streq	r0, [sp, -r0, lsl #4]
    12e4:	0000030b 	andeq	r0, r0, fp, lsl #6
    12e8:	00749102 	rsbseq	r9, r4, r2, lsl #2
    12ec:	0002ec27 	andeq	lr, r2, r7, lsr #24
    12f0:	06ea0200 	strbteq	r0, [sl], r0, lsl #4
    12f4:	20000748 	andcs	r0, r0, r8, asr #14
    12f8:	0000003c 	andeq	r0, r0, ip, lsr r0
    12fc:	13219c01 			; <UNDEFINED> instruction: 0x13219c01
    1300:	5e280000 	cdppl	0, 2, cr0, cr8, cr0, {0}
    1304:	02000008 	andeq	r0, r0, #8
    1308:	030b06ea 	movweq	r0, #46826	; 0xb6ea
    130c:	91020000 	mrsls	r0, (UNDEF: 2)
    1310:	0e672a6c 	vnmuleq.f32	s5, s14, s25
    1314:	ec020000 	stc	0, cr0, [r2], {-0}
    1318:	00030b06 	andeq	r0, r3, r6, lsl #22
    131c:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    1320:	07192700 	ldreq	r2, [r9, -r0, lsl #14]
    1324:	c6020000 	strgt	r0, [r2], -r0
    1328:	00070c06 	andeq	r0, r7, r6, lsl #24
    132c:	00003c20 	andeq	r3, r0, r0, lsr #24
    1330:	569c0100 	ldrpl	r0, [ip], r0, lsl #2
    1334:	28000013 	stmdacs	r0, {r0, r1, r4}
    1338:	00000b79 	andeq	r0, r0, r9, ror fp
    133c:	0b06c602 	bleq	1b2b4c <startup-0x1fe4d4b4>
    1340:	02000003 	andeq	r0, r0, #3
    1344:	672a6c91 			; <UNDEFINED> instruction: 0x672a6c91
    1348:	0200000e 	andeq	r0, r0, #14
    134c:	030b06c8 	movweq	r0, #46792	; 0xb6c8
    1350:	91020000 	mrsls	r0, (UNDEF: 2)
    1354:	57270074 			; <UNDEFINED> instruction: 0x57270074
    1358:	02000000 	andeq	r0, r0, #0
    135c:	06f006ab 	ldrbteq	r0, [r0], fp, lsr #13
    1360:	001c2000 	andseq	r2, ip, r0
    1364:	9c010000 	stcls	0, cr0, [r1], {-0}
    1368:	0000137c 	andeq	r1, r0, ip, ror r3
    136c:	0008fc28 	andeq	pc, r8, r8, lsr #24
    1370:	06ab0200 	strteq	r0, [fp], r0, lsl #4
    1374:	0000030b 	andeq	r0, r0, fp, lsl #6
    1378:	00749102 	rsbseq	r9, r4, r2, lsl #2
    137c:	000c7427 	andeq	r7, ip, r7, lsr #8
    1380:	05ef0200 	strbeq	r0, [pc, #512]!	; 1588 <startup-0x1fffea78>
    1384:	200006d0 	ldrdcs	r0, [r0], -r0	; <UNPREDICTABLE>
    1388:	00000020 	andeq	r0, r0, r0, lsr #32
    138c:	13a29c01 			; <UNDEFINED> instruction: 0x13a29c01
    1390:	27280000 	strcs	r0, [r8, -r0]!
    1394:	0200000b 	andeq	r0, r0, #11
    1398:	069c05ef 	ldreq	r0, [ip], pc, ror #11
    139c:	91020000 	mrsls	r0, (UNDEF: 2)
    13a0:	81270077 			; <UNDEFINED> instruction: 0x81270077
    13a4:	02000010 	andeq	r0, r0, #16
    13a8:	06b005de 	ssateq	r0, #17, lr, asr #11
    13ac:	00202000 	eoreq	r2, r0, r0
    13b0:	9c010000 	stcls	0, cr0, [r1], {-0}
    13b4:	000013c8 	andeq	r1, r0, r8, asr #7
    13b8:	000b2728 	andeq	r2, fp, r8, lsr #14
    13bc:	05de0200 	ldrbeq	r0, [lr, #512]	; 0x200
    13c0:	0000069c 	muleq	r0, ip, r6
    13c4:	00779102 	rsbseq	r9, r7, r2, lsl #2
    13c8:	000ace27 	andeq	ip, sl, r7, lsr #28
    13cc:	05be0200 	ldreq	r0, [lr, #512]!	; 0x200
    13d0:	20000650 	andcs	r0, r0, r0, asr r6
    13d4:	00000060 	andeq	r0, r0, r0, rrx
    13d8:	13fd9c01 	mvnsne	r9, #256	; 0x100
    13dc:	51280000 			; <UNDEFINED> instruction: 0x51280000
    13e0:	02000001 	andeq	r0, r0, #1
    13e4:	030b05be 	movweq	r0, #46526	; 0xb5be
    13e8:	91020000 	mrsls	r0, (UNDEF: 2)
    13ec:	0e672a6c 	vnmuleq.f32	s5, s14, s25
    13f0:	c0020000 	andgt	r0, r2, r0
    13f4:	00030b05 	andeq	r0, r3, r5, lsl #22
    13f8:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    13fc:	00682d00 	rsbeq	r2, r8, r0, lsl #26
    1400:	25020000 	strcs	r0, [r2, #-0]
    1404:	0004f805 	andeq	pc, r4, r5, lsl #16
    1408:	00015820 	andeq	r5, r1, r0, lsr #16
    140c:	7d9c0100 	ldfvcs	f0, [ip]
    1410:	28000014 	stmdacs	r0, {r2, r4}
    1414:	00000a4a 	andeq	r0, r0, sl, asr #20
    1418:	7d052502 	cfstr32vc	mvfx2, [r5, #-8]
    141c:	02000014 	andeq	r0, r0, #20
    1420:	742c5c91 	strtvc	r5, [ip], #-3217	; 0xfffff36f
    1424:	0200706d 	andeq	r7, r0, #109	; 0x6d
    1428:	030b0527 	movweq	r0, #46375	; 0xb527
    142c:	91020000 	mrsls	r0, (UNDEF: 2)
    1430:	11ba2a70 			; <UNDEFINED> instruction: 0x11ba2a70
    1434:	27020000 	strcs	r0, [r2, -r0]
    1438:	00030b05 	andeq	r0, r3, r5, lsl #22
    143c:	6c910200 	lfmvs	f0, 4, [r1], {0}
    1440:	000fe12a 	andeq	lr, pc, sl, lsr #2
    1444:	05270200 	streq	r0, [r7, #-512]!	; 0xfffffe00
    1448:	0000030b 	andeq	r0, r0, fp, lsl #6
    144c:	2a749102 	bcs	1d2585c <startup-0x1e2da7a4>
    1450:	00000000 	andeq	r0, r0, r0
    1454:	0b052702 	bleq	14b064 <startup-0x1feb4f9c>
    1458:	02000003 	andeq	r0, r0, #3
    145c:	002a6891 	mlaeq	sl, r1, r8, r6
    1460:	02000006 	andeq	r0, r0, #6
    1464:	030b0527 	movweq	r0, #46375	; 0xb527
    1468:	91020000 	mrsls	r0, (UNDEF: 2)
    146c:	122e2a64 	eorne	r2, lr, #100, 20	; 0x64000
    1470:	27020000 	strcs	r0, [r2, -r0]
    1474:	00030b05 	andeq	r0, r3, r5, lsl #22
    1478:	60910200 	addsvs	r0, r1, r0, lsl #4
    147c:	84041e00 	strhi	r1, [r4], #-3584	; 0xfffff200
    1480:	27000009 	strcs	r0, [r0, -r9]
    1484:	000002c5 	andeq	r0, r0, r5, asr #5
    1488:	bc04f102 	stfltd	f7, [r4], {2}
    148c:	3c200004 	stccc	0, cr0, [r0], #-16
    1490:	01000000 	mrseq	r0, (UNDEF: 0)
    1494:	0014b89c 	mulseq	r4, ip, r8
    1498:	01a12800 			; <UNDEFINED> instruction: 0x01a12800
    149c:	f1020000 	cps	#0
    14a0:	00030b04 	andeq	r0, r3, r4, lsl #22
    14a4:	6c910200 	lfmvs	f0, 4, [r1], {0}
    14a8:	000e672a 	andeq	r6, lr, sl, lsr #14
    14ac:	04f30200 	ldrbteq	r0, [r3], #512	; 0x200
    14b0:	0000030b 	andeq	r0, r0, fp, lsl #6
    14b4:	00749102 	rsbseq	r9, r4, r2, lsl #2
    14b8:	00092827 	andeq	r2, r9, r7, lsr #16
    14bc:	04d20200 	ldrbeq	r0, [r2], #512	; 0x200
    14c0:	20000484 	andcs	r0, r0, r4, lsl #9
    14c4:	00000038 	andeq	r0, r0, r8, lsr r0
    14c8:	14ed9c01 	strbtne	r9, [sp], #3073	; 0xc01
    14cc:	a1280000 			; <UNDEFINED> instruction: 0xa1280000
    14d0:	02000001 	andeq	r0, r0, #1
    14d4:	030b04d2 	movweq	r0, #46290	; 0xb4d2
    14d8:	91020000 	mrsls	r0, (UNDEF: 2)
    14dc:	0e672a6c 	vnmuleq.f32	s5, s14, s25
    14e0:	d4020000 	strle	r0, [r2], #-0
    14e4:	00030b04 	andeq	r0, r3, r4, lsl #22
    14e8:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    14ec:	06c02700 	strbeq	r2, [r0], r0, lsl #14
    14f0:	b3020000 	movwlt	r0, #8192	; 0x2000
    14f4:	00045004 	andeq	r5, r4, r4
    14f8:	00003420 	andeq	r3, r0, r0, lsr #8
    14fc:	229c0100 	addscs	r0, ip, #0, 2
    1500:	28000015 	stmdacs	r0, {r0, r2, r4}
    1504:	000005ba 			; <UNDEFINED> instruction: 0x000005ba
    1508:	0b04b302 	bleq	12e118 <startup-0x1fed1ee8>
    150c:	02000003 	andeq	r0, r0, #3
    1510:	672a6c91 			; <UNDEFINED> instruction: 0x672a6c91
    1514:	0200000e 	andeq	r0, r0, #14
    1518:	030b04b5 	movweq	r0, #46261	; 0xb4b5
    151c:	91020000 	mrsls	r0, (UNDEF: 2)
    1520:	0b2e0074 	bleq	b816f8 <startup-0x1f47e908>
    1524:	02000003 	andeq	r0, r0, #3
    1528:	02d1049a 	sbcseq	r0, r1, #-1711276032	; 0x9a000000
    152c:	04340000 	ldrteq	r0, [r4], #-0
    1530:	001c2000 	andseq	r2, ip, r0
    1534:	9c010000 	stcls	0, cr0, [r1], {-0}
    1538:	0011ed27 	andseq	lr, r1, r7, lsr #26
    153c:	047d0200 	ldrbteq	r0, [sp], #-512	; 0xfffffe00
    1540:	20000400 	andcs	r0, r0, r0, lsl #8
    1544:	00000034 	andeq	r0, r0, r4, lsr r0
    1548:	156d9c01 	strbne	r9, [sp, #-3073]!	; 0xfffff3ff
    154c:	98280000 	stmdals	r8!, {}	; <UNPREDICTABLE>
    1550:	02000003 	andeq	r0, r0, #3
    1554:	030b047d 	movweq	r0, #46205	; 0xb47d
    1558:	91020000 	mrsls	r0, (UNDEF: 2)
    155c:	0e672a6c 	vnmuleq.f32	s5, s14, s25
    1560:	7f020000 	svcvc	0x00020000
    1564:	00030b04 	andeq	r0, r3, r4, lsl #22
    1568:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    156c:	08e82700 	stmiaeq	r8!, {r8, r9, sl, sp}^
    1570:	b5020000 	strlt	r0, [r2, #-0]
    1574:	0003c403 	andeq	ip, r3, r3, lsl #8
    1578:	00003c20 	andeq	r3, r0, r0, lsr #24
    157c:	b19c0100 	orrslt	r0, ip, r0, lsl #2
    1580:	28000015 	stmdacs	r0, {r0, r2, r4}
    1584:	00000cb6 			; <UNDEFINED> instruction: 0x00000cb6
    1588:	0b03b502 	bleq	ee998 <startup-0x1ff11668>
    158c:	02000003 	andeq	r0, r0, #3
    1590:	6d286c91 	stcvs	12, cr6, [r8, #-580]!	; 0xfffffdbc
    1594:	02000003 	andeq	r0, r0, #3
    1598:	030b03b5 	movweq	r0, #46005	; 0xb3b5
    159c:	91020000 	mrsls	r0, (UNDEF: 2)
    15a0:	0e672a68 	vnmuleq.f32	s5, s14, s17
    15a4:	b7020000 	strlt	r0, [r2, -r0]
    15a8:	00030b03 	andeq	r0, r3, r3, lsl #22
    15ac:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    15b0:	07b52700 	ldreq	r2, [r5, r0, lsl #14]!
    15b4:	88020000 	stmdahi	r2, {}	; <UNPREDICTABLE>
    15b8:	00038403 	andeq	r8, r3, r3, lsl #8
    15bc:	00004020 	andeq	r4, r0, r0, lsr #32
    15c0:	f59c0100 			; <UNDEFINED> instruction: 0xf59c0100
    15c4:	28000015 	stmdacs	r0, {r0, r2, r4}
    15c8:	00000c24 	andeq	r0, r0, r4, lsr #24
    15cc:	0b038802 	bleq	e35dc <startup-0x1ff1ca24>
    15d0:	02000003 	andeq	r0, r0, #3
    15d4:	3c286c91 	stccc	12, cr6, [r8], #-580	; 0xfffffdbc
    15d8:	0200000d 	andeq	r0, r0, #13
    15dc:	030b0388 	movweq	r0, #45960	; 0xb388
    15e0:	91020000 	mrsls	r0, (UNDEF: 2)
    15e4:	0e672a68 	vnmuleq.f32	s5, s14, s17
    15e8:	8a020000 	bhi	815f0 <startup-0x1ff7ea10>
    15ec:	00030b03 	andeq	r0, r3, r3, lsl #22
    15f0:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    15f4:	0b5e2700 	bleq	178b1fc <startup-0x1e874e04>
    15f8:	6f020000 	svcvs	0x00020000
    15fc:	00036403 	andeq	r6, r3, r3, lsl #8
    1600:	00002020 	andeq	r2, r0, r0, lsr #32
    1604:	1b9c0100 	blne	fe701a0c <GPIO_Ports+0xde6feebc>
    1608:	28000016 	stmdacs	r0, {r1, r2, r4}
    160c:	00000b27 	andeq	r0, r0, r7, lsr #22
    1610:	9c036f02 	stcls	15, cr6, [r3], {2}
    1614:	02000006 	andeq	r0, r0, #6
    1618:	27007791 			; <UNDEFINED> instruction: 0x27007791
    161c:	000011d7 	ldrdeq	r1, [r0], -r7
    1620:	44035d02 	strmi	r5, [r3], #-3330	; 0xfffff2fe
    1624:	20200003 	eorcs	r0, r0, r3
    1628:	01000000 	mrseq	r0, (UNDEF: 0)
    162c:	0016419c 	mulseq	r6, ip, r1
    1630:	0b272800 	bleq	9cb638 <startup-0x1f6349c8>
    1634:	5d020000 	stcpl	0, cr0, [r2, #-0]
    1638:	00069c03 	andeq	r9, r6, r3, lsl #24
    163c:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    1640:	073f2700 	ldreq	r2, [pc, -r0, lsl #14]!
    1644:	49020000 	stmdbmi	r2, {}	; <UNPREDICTABLE>
    1648:	00031403 	andeq	r1, r3, r3, lsl #8
    164c:	00003020 	andeq	r3, r0, r0, lsr #32
    1650:	859c0100 	ldrhi	r0, [ip, #256]	; 0x100
    1654:	28000016 	stmdacs	r0, {r1, r2, r4}
    1658:	00000c0c 	andeq	r0, r0, ip, lsl #24
    165c:	0b034902 	bleq	d3a6c <startup-0x1ff2c594>
    1660:	02000003 	andeq	r0, r0, #3
    1664:	14287491 	strtne	r7, [r8], #-1169	; 0xfffffb6f
    1668:	0200000c 	andeq	r0, r0, #12
    166c:	030b0349 	movweq	r0, #45897	; 0xb349
    1670:	91020000 	mrsls	r0, (UNDEF: 2)
    1674:	0c1c2870 	ldceq	8, cr2, [ip], {112}	; 0x70
    1678:	49020000 	stmdbmi	r2, {}	; <UNPREDICTABLE>
    167c:	00030b03 	andeq	r0, r3, r3, lsl #22
    1680:	6c910200 	lfmvs	f0, 4, [r1], {0}
    1684:	01932700 	orrseq	r2, r3, r0, lsl #14
    1688:	dc020000 	stcle	0, cr0, [r2], {-0}
    168c:	0002f402 	andeq	pc, r2, r2, lsl #8
    1690:	00002020 	andeq	r2, r0, r0, lsr #32
    1694:	ab9c0100 	blge	fe701a9c <GPIO_Ports+0xde6fef4c>
    1698:	28000016 	stmdacs	r0, {r1, r2, r4}
    169c:	00000b27 	andeq	r0, r0, r7, lsr #22
    16a0:	9c02dc02 	stcls	12, cr13, [r2], {2}
    16a4:	02000006 	andeq	r0, r0, #6
    16a8:	27007791 			; <UNDEFINED> instruction: 0x27007791
    16ac:	00001117 	andeq	r1, r0, r7, lsl r1
    16b0:	cc025102 	stfgts	f5, [r2], {2}
    16b4:	28200002 	stmdacs	r0!, {r1}
    16b8:	01000000 	mrseq	r0, (UNDEF: 0)
    16bc:	0016e09c 	mulseq	r6, ip, r0
    16c0:	10322800 	eorsne	r2, r2, r0, lsl #16
    16c4:	51020000 	mrspl	r0, (UNDEF: 2)
    16c8:	00030b02 	andeq	r0, r3, r2, lsl #22
    16cc:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    16d0:	00105728 	andseq	r5, r0, r8, lsr #14
    16d4:	02510200 	subseq	r0, r1, #0, 4
    16d8:	0000030b 	andeq	r0, r0, fp, lsl #6
    16dc:	00709102 	rsbseq	r9, r0, r2, lsl #2
    16e0:	000c6927 	andeq	r6, ip, r7, lsr #18
    16e4:	02330200 	eorseq	r0, r3, #0, 4
    16e8:	200002ac 	andcs	r0, r0, ip, lsr #5
    16ec:	00000020 	andeq	r0, r0, r0, lsr #32
    16f0:	17069c01 	strne	r9, [r6, -r1, lsl #24]
    16f4:	27280000 	strcs	r0, [r8, -r0]!
    16f8:	0200000b 	andeq	r0, r0, #11
    16fc:	069c0233 			; <UNDEFINED> instruction: 0x069c0233
    1700:	91020000 	mrsls	r0, (UNDEF: 2)
    1704:	20270077 	eorcs	r0, r7, r7, ror r0
    1708:	02000012 	andeq	r0, r0, #18
    170c:	0270021b 	rsbseq	r0, r0, #-1342177279	; 0xb0000001
    1710:	003c2000 	eorseq	r2, ip, r0
    1714:	9c010000 	stcls	0, cr0, [r1], {-0}
    1718:	00001768 	andeq	r1, r0, r8, ror #14
    171c:	0003bb28 	andeq	fp, r3, r8, lsr #22
    1720:	021b0200 	andseq	r0, fp, #0, 4
    1724:	0000030b 	andeq	r0, r0, fp, lsl #6
    1728:	28749102 	ldmdacs	r4!, {r1, r8, ip, pc}^
    172c:	000005dc 	ldrdeq	r0, [r0], -ip
    1730:	0b021b02 	bleq	88340 <startup-0x1ff77cc0>
    1734:	02000003 	andeq	r0, r0, #3
    1738:	e8287091 	stmda	r8!, {r0, r4, r7, ip, sp, lr}
    173c:	02000010 	andeq	r0, r0, #16
    1740:	030b021b 	movweq	r0, #45595	; 0xb21b
    1744:	91020000 	mrsls	r0, (UNDEF: 2)
    1748:	05eb286c 	strbeq	r2, [fp, #2156]!	; 0x86c
    174c:	1b020000 	blne	81754 <startup-0x1ff7e8ac>
    1750:	00030b02 	andeq	r0, r3, r2, lsl #22
    1754:	68910200 	ldmvs	r1, {r9}
    1758:	0005f028 	andeq	pc, r5, r8, lsr #32
    175c:	021b0200 	andseq	r0, fp, #0, 4
    1760:	0000030b 	andeq	r0, r0, fp, lsl #6
    1764:	00009102 	andeq	r9, r0, r2, lsl #2
    1768:	0005f527 	andeq	pc, r5, r7, lsr #10
    176c:	01b80200 			; <UNDEFINED> instruction: 0x01b80200
    1770:	20000250 	andcs	r0, r0, r0, asr r2
    1774:	00000020 	andeq	r0, r0, r0, lsr #32
    1778:	178e9c01 	strne	r9, [lr, r1, lsl #24]
    177c:	27280000 	strcs	r0, [r8, -r0]!
    1780:	0200000b 	andeq	r0, r0, #11
    1784:	069c01b8 			; <UNDEFINED> instruction: 0x069c01b8
    1788:	91020000 	mrsls	r0, (UNDEF: 2)
    178c:	60270077 	eorvs	r0, r7, r7, ror r0
    1790:	02000004 	andeq	r0, r0, #4
    1794:	020c0190 	andeq	r0, ip, #144, 2	; 0x24
    1798:	00442000 	subeq	r2, r4, r0
    179c:	9c010000 	stcls	0, cr0, [r1], {-0}
    17a0:	000017b4 			; <UNDEFINED> instruction: 0x000017b4
    17a4:	0006ff28 	andeq	pc, r6, r8, lsr #30
    17a8:	01900200 	orrseq	r0, r0, r0, lsl #4
    17ac:	000002d1 	ldrdeq	r0, [r0], -r1
    17b0:	00779102 	rsbseq	r9, r7, r2, lsl #2
    17b4:	000a7827 	andeq	r7, sl, r7, lsr #16
    17b8:	01770200 	cmneq	r7, r0, lsl #4
    17bc:	200001ec 	andcs	r0, r0, ip, ror #3
    17c0:	00000020 	andeq	r0, r0, r0, lsr #32
    17c4:	17da9c01 	ldrbne	r9, [sl, r1, lsl #24]
    17c8:	27280000 	strcs	r0, [r8, -r0]!
    17cc:	0200000b 	andeq	r0, r0, #11
    17d0:	069c0177 			; <UNDEFINED> instruction: 0x069c0177
    17d4:	91020000 	mrsls	r0, (UNDEF: 2)
    17d8:	8c270077 	stchi	0, cr0, [r7], #-476	; 0xfffffe24
    17dc:	0200000a 	andeq	r0, r0, #10
    17e0:	01ae0153 			; <UNDEFINED> instruction: 0x01ae0153
    17e4:	003e2000 	eorseq	r2, lr, r0
    17e8:	9c010000 	stcls	0, cr0, [r1], {-0}
    17ec:	0000180f 	andeq	r1, r0, pc, lsl #16
    17f0:	000a9628 	andeq	r9, sl, r8, lsr #12
    17f4:	01530200 	cmpeq	r3, r0, lsl #4
    17f8:	000002d1 	ldrdeq	r0, [r0], -r1
    17fc:	2a6f9102 	bcs	1be5c0c <startup-0x1e41a3f4>
    1800:	00000e67 	andeq	r0, r0, r7, ror #28
    1804:	0b015502 	bleq	56c14 <startup-0x1ffa93ec>
    1808:	02000003 	andeq	r0, r0, #3
    180c:	2f007491 	svccs	0x00007491
    1810:	00000d5e 	andeq	r0, r0, lr, asr sp
    1814:	c3013402 	movwgt	r3, #5122	; 0x1402
    1818:	50000006 	andpl	r0, r0, r6
    181c:	5e200001 	cdppl	0, 2, cr0, cr0, cr1, {0}
    1820:	01000000 	mrseq	r0, (UNDEF: 0)
    1824:	0018579c 	mulseq	r8, ip, r7
    1828:	07302a00 	ldreq	r2, [r0, -r0, lsl #20]!
    182c:	36020000 	strcc	r0, [r2], -r0
    1830:	00031601 	andeq	r1, r3, r1, lsl #12
    1834:	68910200 	ldmvs	r1, {r9}
    1838:	000ea82a 	andeq	sl, lr, sl, lsr #16
    183c:	01370200 	teqeq	r7, r0, lsl #4
    1840:	000006c3 	andeq	r0, r0, r3, asr #13
    1844:	2a6f9102 	bcs	1be5c54 <startup-0x1e41a3ac>
    1848:	00000ea5 	andeq	r0, r0, r5, lsr #29
    184c:	69013802 	stmdbvs	r1, {r1, fp, ip, sp}
    1850:	02000006 	andeq	r0, r0, #6
    1854:	27006e91 			; <UNDEFINED> instruction: 0x27006e91
    1858:	000006dd 	ldrdeq	r0, [r0], -sp
    185c:	28011c02 	stmdacs	r1, {r1, sl, fp, ip}
    1860:	28200001 	stmdacs	r0!, {r0}
    1864:	01000000 	mrseq	r0, (UNDEF: 0)
    1868:	00187d9c 	mulseq	r8, ip, sp
    186c:	07ad2800 	streq	r2, [sp, r0, lsl #16]!
    1870:	1c020000 	stcne	0, cr0, [r2], {-0}
    1874:	0002d101 	andeq	sp, r2, r1, lsl #2
    1878:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    187c:	02e12500 	rsceq	r2, r1, #0, 10
    1880:	e1020000 	mrs	r0, (UNDEF: 2)
    1884:	200000b8 	strhcs	r0, [r0], -r8
    1888:	00000070 	andeq	r0, r0, r0, ror r0
    188c:	f9309c01 			; <UNDEFINED> instruction: 0xf9309c01
    1890:	0100000d 	tsteq	r0, sp
    1894:	030b06e0 	movweq	r0, #46816	; 0xb6e0
    1898:	00700000 	rsbseq	r0, r0, r0
    189c:	00482000 	subeq	r2, r8, r0
    18a0:	9c010000 	stcls	0, cr0, [r1], {-0}
    18a4:	000018b8 			; <UNDEFINED> instruction: 0x000018b8
    18a8:	00094e28 	andeq	r4, r9, r8, lsr #28
    18ac:	06e00100 	strbteq	r0, [r0], r0, lsl #2
    18b0:	0000030b 	andeq	r0, r0, fp, lsl #6
    18b4:	00749102 	rsbseq	r9, r4, r2, lsl #2
    18b8:	00109531 	andseq	r9, r0, r1, lsr r5
    18bc:	065d0100 	ldrbeq	r0, [sp], -r0, lsl #2
    18c0:	20000010 	andcs	r0, r0, r0, lsl r0
    18c4:	00000060 	andeq	r0, r0, r0, rrx
    18c8:	20289c01 	eorcs	r9, r8, r1, lsl #24
    18cc:	01000010 	tsteq	r0, r0, lsl r0
    18d0:	025a065d 	subseq	r0, sl, #97517568	; 0x5d00000
    18d4:	91020000 	mrsls	r0, (UNDEF: 2)
    18d8:	14c52877 	strbne	r2, [r5], #2167	; 0x877
    18dc:	5d010000 	stcpl	0, cr0, [r1, #-0]
    18e0:	00030b06 	andeq	r0, r3, r6, lsl #22
    18e4:	70910200 	addsvc	r0, r1, r0, lsl #4
    18e8:	06230000 	strteq	r0, [r3], -r0
    18ec:	00040000 	andeq	r0, r4, r0
    18f0:	00000309 	andeq	r0, r0, r9, lsl #6
    18f4:	06140104 	ldreq	r0, [r4], -r4, lsl #2
    18f8:	b80c0000 	stmdalt	ip, {}	; <UNPREDICTABLE>
    18fc:	68000012 	stmdavs	r0, {r1, r4}
    1900:	e4000005 	str	r0, [r0], #-5
    1904:	0e200017 	miaeq	acc0, r7, r0
    1908:	fd000005 	stc2	0, cr0, [r0, #-20]	; 0xffffffec
    190c:	02000004 	andeq	r0, r0, #4
    1910:	03f60601 	mvnseq	r0, #1048576	; 0x100000
    1914:	ce030000 	cdpgt	0, 0, cr0, cr3, cr0, {0}
    1918:	02000001 	andeq	r0, r0, #1
    191c:	0000372b 	andeq	r3, r0, fp, lsr #14
    1920:	08010200 	stmdaeq	r1, {r9}
    1924:	000003f4 	strdeq	r0, [r0], -r4
    1928:	80050202 	andhi	r0, r5, r2, lsl #4
    192c:	0300000f 	movweq	r0, #15
    1930:	00000528 	andeq	r0, r0, r8, lsr #10
    1934:	00503902 	subseq	r3, r0, r2, lsl #18
    1938:	02020000 	andeq	r0, r2, #0
    193c:	00110407 	andseq	r0, r1, r7, lsl #8
    1940:	11970300 	orrsne	r0, r7, r0, lsl #6
    1944:	4d020000 	stcmi	0, cr0, [r2, #-0]
    1948:	00000062 	andeq	r0, r0, r2, rrx
    194c:	dc050402 	cfstrsle	mvf0, [r5], {2}
    1950:	03000009 	movweq	r0, #9
    1954:	00000985 	andeq	r0, r0, r5, lsl #19
    1958:	00744f02 	rsbseq	r4, r4, r2, lsl #30
    195c:	04020000 	streq	r0, [r2], #-0
    1960:	000d2a07 	andeq	r2, sp, r7, lsl #20
    1964:	05080200 	streq	r0, [r8, #-512]	; 0xfffffe00
    1968:	000009d7 	ldrdeq	r0, [r0], -r7
    196c:	25070802 	strcs	r0, [r7, #-2050]	; 0xfffff7fe
    1970:	0400000d 	streq	r0, [r0], #-13
    1974:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    1978:	04020074 	streq	r0, [r2], #-116	; 0xffffff8c
    197c:	000d2f07 	andeq	r2, sp, r7, lsl #30
    1980:	01d00300 	bicseq	r0, r0, r0, lsl #6
    1984:	18030000 	stmdane	r3, {}	; <UNPREDICTABLE>
    1988:	0000002c 	andeq	r0, r0, ip, lsr #32
    198c:	00052a03 	andeq	r2, r5, r3, lsl #20
    1990:	45240300 	strmi	r0, [r4, #-768]!	; 0xfffffd00
    1994:	05000000 	streq	r0, [r0, #-0]
    1998:	000000a2 	andeq	r0, r0, r2, lsr #1
    199c:	00119903 	andseq	r9, r1, r3, lsl #18
    19a0:	572c0300 	strpl	r0, [ip, -r0, lsl #6]!
    19a4:	05000000 	streq	r0, [r0, #-0]
    19a8:	000000b2 	strheq	r0, [r0], -r2
    19ac:	00098703 	andeq	r8, r9, r3, lsl #14
    19b0:	69300300 	ldmdbvs	r0!, {r8, r9}
    19b4:	05000000 	streq	r0, [r0, #-0]
    19b8:	000000c2 	andeq	r0, r0, r2, asr #1
    19bc:	00102506 	andseq	r2, r0, r6, lsl #10
    19c0:	06fa0400 	ldrbteq	r0, [sl], r0, lsl #8
    19c4:	000000bd 	strheq	r0, [r0], -sp
    19c8:	00088b07 	andeq	r8, r8, r7, lsl #22
    19cc:	c23b0500 	eorsgt	r0, fp, #0, 10
    19d0:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    19d4:	00370107 	eorseq	r0, r7, r7, lsl #2
    19d8:	5f060000 	svcpl	0x00060000
    19dc:	00010403 	andeq	r0, r1, r3, lsl #8
    19e0:	0a150900 	beq	543de8 <startup-0x1fabc218>
    19e4:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    19e8:	00000fda 	ldrdeq	r0, [r0], -sl
    19ec:	280a0001 	stmdacs	sl, {r0}
    19f0:	9005c306 	andls	ip, r5, r6, lsl #6
    19f4:	0b000001 	bleq	1a00 <startup-0x1fffe600>
    19f8:	0000108f 	andeq	r1, r0, pc, lsl #1
    19fc:	cd05c506 	cfstr32gt	mvfx12, [r5, #-24]	; 0xffffffe8
    1a00:	00000000 	andeq	r0, r0, r0
    1a04:	000e5a0b 	andeq	r5, lr, fp, lsl #20
    1a08:	05c60600 	strbeq	r0, [r6, #1536]	; 0x600
    1a0c:	000000cd 	andeq	r0, r0, sp, asr #1
    1a10:	09380b04 	ldmdbeq	r8!, {r2, r8, r9, fp}
    1a14:	c7060000 	strgt	r0, [r6, -r0]
    1a18:	0000cd05 	andeq	ip, r0, r5, lsl #26
    1a1c:	ff0b0800 			; <UNDEFINED> instruction: 0xff0b0800
    1a20:	06000009 	streq	r0, [r0], -r9
    1a24:	00cd05c8 	sbceq	r0, sp, r8, asr #11
    1a28:	0c0c0000 	stceq	0, cr0, [ip], {-0}
    1a2c:	00524449 	subseq	r4, r2, r9, asr #8
    1a30:	cd05c906 	vstrgt.16	s24, [r5, #-12]	; <UNPREDICTABLE>
    1a34:	10000000 	andne	r0, r0, r0
    1a38:	52444f0c 	subpl	r4, r4, #12, 30	; 0x30
    1a3c:	05ca0600 	strbeq	r0, [sl, #1536]	; 0x600
    1a40:	000000cd 	andeq	r0, r0, sp, asr #1
    1a44:	0a550b14 	beq	154469c <startup-0x1eabb964>
    1a48:	cb060000 	blgt	181a50 <startup-0x1fe7e5b0>
    1a4c:	0000ad05 	andeq	sl, r0, r5, lsl #26
    1a50:	320b1800 	andcc	r1, fp, #0, 16
    1a54:	0600000a 	streq	r0, [r0], -sl
    1a58:	00ad05cc 	adceq	r0, sp, ip, asr #11
    1a5c:	0b1a0000 	bleq	681a64 <startup-0x1f97e59c>
    1a60:	000008f7 	strdeq	r0, [r0], -r7
    1a64:	cd05cd06 	stcgt	13, cr12, [r5, #-24]	; 0xffffffe8
    1a68:	1c000000 	stcne	0, cr0, [r0], {-0}
    1a6c:	5246410c 	subpl	r4, r6, #12, 2
    1a70:	05ce0600 	strbeq	r0, [lr, #1536]	; 0x600
    1a74:	000001a0 	andeq	r0, r0, r0, lsr #3
    1a78:	cd0d0020 	stcgt	0, cr0, [sp, #-128]	; 0xffffff80
    1a7c:	a0000000 	andge	r0, r0, r0
    1a80:	0e000001 	cdpeq	0, 0, cr0, cr0, cr1, {0}
    1a84:	00000090 	muleq	r0, r0, r0
    1a88:	90050001 	andls	r0, r5, r1
    1a8c:	0f000001 	svceq	0x00000001
    1a90:	00001005 	andeq	r1, r0, r5
    1a94:	0405cf06 	streq	ip, [r5], #-3846	; 0xfffff0fa
    1a98:	10000001 	andne	r0, r0, r1
    1a9c:	00370107 	eorseq	r0, r7, r7, lsl #2
    1aa0:	42070000 	andmi	r0, r7, #0
    1aa4:	000001d7 	ldrdeq	r0, [r0], -r7
    1aa8:	0008c909 	andeq	ip, r8, r9, lsl #18
    1aac:	5a090000 	bpl	241ab4 <startup-0x1fdbe54c>
    1ab0:	01000007 	tsteq	r0, r7
    1ab4:	00027c09 	andeq	r7, r2, r9, lsl #24
    1ab8:	b8090200 	stmdalt	r9, {r9}
    1abc:	03000002 	movweq	r0, #2
    1ac0:	0dd30300 	ldcleq	3, cr0, [r3]
    1ac4:	47070000 	strmi	r0, [r7, -r0]
    1ac8:	000001b1 			; <UNDEFINED> instruction: 0x000001b1
    1acc:	37010710 	smladcc	r1, r0, r7, r0
    1ad0:	07000000 	streq	r0, [r0, -r0]
    1ad4:	0001fc4f 	andeq	pc, r1, pc, asr #24
    1ad8:	04370900 	ldrteq	r0, [r7], #-2304	; 0xfffff700
    1adc:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    1ae0:	00000379 	andeq	r0, r0, r9, ror r3
    1ae4:	15030001 	strne	r0, [r3, #-1]
    1ae8:	07000001 	streq	r0, [r0, -r1]
    1aec:	0001e252 	andeq	lr, r1, r2, asr r2
    1af0:	01071000 	mrseq	r1, (UNDEF: 7)
    1af4:	00000037 	andeq	r0, r0, r7, lsr r0
    1af8:	022d5a07 	eoreq	r5, sp, #28672	; 0x7000
    1afc:	4b090000 	blmi	241b04 <startup-0x1fdbe4fc>
    1b00:	00000005 	andeq	r0, r0, r5
    1b04:	0009a109 	andeq	sl, r9, r9, lsl #2
    1b08:	10090100 	andne	r0, r9, r0, lsl #2
    1b0c:	02000012 	andeq	r0, r0, #18
    1b10:	000a5b09 	andeq	r5, sl, r9, lsl #22
    1b14:	03000300 	movweq	r0, #768	; 0x300
    1b18:	00000eea 	andeq	r0, r0, sl, ror #29
    1b1c:	02075f07 	andeq	r5, r7, #7, 30
    1b20:	07100000 	ldreq	r0, [r0, -r0]
    1b24:	00003701 	andeq	r3, r0, r1, lsl #14
    1b28:	586e0700 	stmdapl	lr!, {r8, r9, sl}^
    1b2c:	09000002 	stmdbeq	r0, {r1}
    1b30:	0000009b 	muleq	r0, fp, r0
    1b34:	10c30900 	sbcne	r0, r3, r0, lsl #18
    1b38:	09010000 	stmdbeq	r1, {}	; <UNPREDICTABLE>
    1b3c:	00000200 	andeq	r0, r0, r0, lsl #4
    1b40:	a5030002 	strge	r0, [r3, #-2]
    1b44:	07000004 	streq	r0, [r0, -r4]
    1b48:	00023872 	andeq	r3, r2, r2, ror r8
    1b4c:	01071000 	mrseq	r1, (UNDEF: 7)
    1b50:	00000037 	andeq	r0, r0, r7, lsr r0
    1b54:	027d7a07 	rsbseq	r7, sp, #28672	; 0x7000
    1b58:	7a090000 	bvc	241b60 <startup-0x1fdbe4a0>
    1b5c:	00000012 	andeq	r0, r0, r2, lsl r0
    1b60:	00123a09 	andseq	r3, r2, r9, lsl #20
    1b64:	03000100 	movweq	r0, #256	; 0x100
    1b68:	000013a5 	andeq	r1, r0, r5, lsr #7
    1b6c:	02637d07 	rsbeq	r7, r3, #448	; 0x1c0
    1b70:	08110000 	ldmdaeq	r1, {}	; <UNPREDICTABLE>
    1b74:	02cd8407 	sbceq	r8, sp, #117440512	; 0x7000000
    1b78:	0e120000 	cdpeq	0, 1, cr0, cr2, cr0, {0}
    1b7c:	0700000f 	streq	r0, [r0, -pc]
    1b80:	0000c286 	andeq	ip, r0, r6, lsl #5
    1b84:	7c120000 	ldcvc	0, cr0, [r2], {-0}
    1b88:	0700000d 	streq	r0, [r0, -sp]
    1b8c:	0001d789 	andeq	sp, r1, r9, lsl #15
    1b90:	30120400 	andscc	r0, r2, r0, lsl #8
    1b94:	0700000b 	streq	r0, [r0, -fp]
    1b98:	00022d8c 	andeq	r2, r2, ip, lsl #27
    1b9c:	7a120500 	bvc	482fa4 <startup-0x1fb7d05c>
    1ba0:	07000009 	streq	r0, [r0, -r9]
    1ba4:	0001fc8f 	andeq	pc, r1, pc, lsl #25
    1ba8:	3b120600 	blcc	4833b0 <startup-0x1fb7cc50>
    1bac:	0700000f 	streq	r0, [r0, -pc]
    1bb0:	00025892 	muleq	r2, r2, r8
    1bb4:	03000700 	movweq	r0, #1792	; 0x700
    1bb8:	00000387 	andeq	r0, r0, r7, lsl #7
    1bbc:	02889407 	addeq	r9, r8, #117440512	; 0x7000000
    1bc0:	e2130000 	ands	r0, r3, #0
    1bc4:	01000013 	tsteq	r0, r3, lsl r0
    1bc8:	1c4e0243 	sfmne	f0, 2, [lr], {67}	; 0x43
    1bcc:	00a42000 	adceq	r2, r4, r0
    1bd0:	9c010000 	stcls	0, cr0, [r1], {-0}
    1bd4:	0000033a 	andeq	r0, r0, sl, lsr r3
    1bd8:	0013c514 	andseq	ip, r3, r4, lsl r5
    1bdc:	02430100 	subeq	r0, r3, #0, 2
    1be0:	0000033a 	andeq	r0, r0, sl, lsr r3
    1be4:	146c9102 	strbtne	r9, [ip], #-258	; 0xfffffefe
    1be8:	00001370 	andeq	r1, r0, r0, ror r3
    1bec:	a2024301 	andge	r4, r2, #67108864	; 0x4000000
    1bf0:	02000000 	andeq	r0, r0, #0
    1bf4:	56146a91 			; <UNDEFINED> instruction: 0x56146a91
    1bf8:	01000012 	tsteq	r0, r2, lsl r0
    1bfc:	00970243 	addseq	r0, r7, r3, asr #4
    1c00:	91020000 	mrsls	r0, (UNDEF: 2)
    1c04:	125e1569 	subsne	r1, lr, #440401920	; 0x1a400000
    1c08:	45010000 	strmi	r0, [r1, #-0]
    1c0c:	0000c202 	andeq	ip, r0, r2, lsl #4
    1c10:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    1c14:	0013db15 	andseq	sp, r3, r5, lsl fp
    1c18:	02460100 	subeq	r0, r6, #0, 2
    1c1c:	000000c2 	andeq	r0, r0, r2, asr #1
    1c20:	00709102 	rsbseq	r9, r0, r2, lsl #2
    1c24:	01a50416 			; <UNDEFINED> instruction: 0x01a50416
    1c28:	cb130000 	blgt	4c1c30 <startup-0x1fb3e3d0>
    1c2c:	01000013 	tsteq	r0, r3, lsl r0
    1c30:	1c2a01f0 	stfnes	f0, [sl], #-960	; 0xfffffc40
    1c34:	00242000 	eoreq	r2, r4, r0
    1c38:	9c010000 	stcls	0, cr0, [r1], {-0}
    1c3c:	00000375 	andeq	r0, r0, r5, ror r3
    1c40:	0013c514 	andseq	ip, r3, r4, lsl r5
    1c44:	01f00100 	mvnseq	r0, r0, lsl #2
    1c48:	0000033a 	andeq	r0, r0, sl, lsr r3
    1c4c:	14749102 	ldrbtne	r9, [r4], #-258	; 0xfffffefe
    1c50:	00000f0e 	andeq	r0, r0, lr, lsl #30
    1c54:	a201f001 	andge	pc, r1, #1
    1c58:	02000000 	andeq	r0, r0, #0
    1c5c:	13007291 	movwne	r7, #657	; 0x291
    1c60:	000013ba 			; <UNDEFINED> instruction: 0x000013ba
    1c64:	0c01e001 	stceq	0, cr14, [r1], {1}
    1c68:	1e20001c 	miane	acc0, ip, r0
    1c6c:	01000000 	mrseq	r0, (UNDEF: 0)
    1c70:	0003aa9c 	muleq	r3, ip, sl
    1c74:	13c51400 	bicne	r1, r5, #0, 8
    1c78:	e0010000 	and	r0, r1, r0
    1c7c:	00033a01 	andeq	r3, r3, r1, lsl #20
    1c80:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    1c84:	00136814 	andseq	r6, r3, r4, lsl r8
    1c88:	01e00100 	mvneq	r0, r0, lsl #2
    1c8c:	000000a2 	andeq	r0, r0, r2, lsr #1
    1c90:	00729102 	rsbseq	r9, r2, r2, lsl #2
    1c94:	00128413 	andseq	r8, r2, r3, lsl r4
    1c98:	01c70100 	biceq	r0, r7, r0, lsl #2
    1c9c:	20001bd2 	ldrdcs	r1, [r0], -r2
    1ca0:	0000003a 	andeq	r0, r0, sl, lsr r0
    1ca4:	03ee9c01 	mvneq	r9, #256	; 0x100
    1ca8:	c5140000 	ldrgt	r0, [r4, #-0]
    1cac:	01000013 	tsteq	r0, r3, lsl r0
    1cb0:	033a01c7 	teqeq	sl, #-1073741775	; 0xc0000031
    1cb4:	91020000 	mrsls	r0, (UNDEF: 2)
    1cb8:	0f0e1474 	svceq	0x000e1474
    1cbc:	c7010000 	strgt	r0, [r1, -r0]
    1cc0:	0000a201 	andeq	sl, r0, r1, lsl #4
    1cc4:	72910200 	addsvc	r0, r1, #0, 4
    1cc8:	00127314 	andseq	r7, r2, r4, lsl r3
    1ccc:	01c70100 	biceq	r0, r7, r0, lsl #2
    1cd0:	0000027d 	andeq	r0, r0, sp, ror r2
    1cd4:	00719102 	rsbseq	r9, r1, r2, lsl #2
    1cd8:	0012a913 	andseq	sl, r2, r3, lsl r9
    1cdc:	01b10100 			; <UNDEFINED> instruction: 0x01b10100
    1ce0:	20001bb4 			; <UNDEFINED> instruction: 0x20001bb4
    1ce4:	0000001e 	andeq	r0, r0, lr, lsl r0
    1ce8:	04239c01 	strteq	r9, [r3], #-3073	; 0xfffff3ff
    1cec:	c5140000 	ldrgt	r0, [r4, #-0]
    1cf0:	01000013 	tsteq	r0, r3, lsl r0
    1cf4:	033a01b1 	teqeq	sl, #1073741868	; 0x4000002c
    1cf8:	91020000 	mrsls	r0, (UNDEF: 2)
    1cfc:	0f0e1474 	svceq	0x000e1474
    1d00:	b1010000 	mrslt	r0, (UNDEF: 1)
    1d04:	0000a201 	andeq	sl, r0, r1, lsl #4
    1d08:	72910200 	addsvc	r0, r1, #0, 4
    1d0c:	12921300 	addsne	r1, r2, #0, 6
    1d10:	9c010000 	stcls	0, cr0, [r1], {-0}
    1d14:	001b9601 	andseq	r9, fp, r1, lsl #12
    1d18:	00001e20 	andeq	r1, r0, r0, lsr #28
    1d1c:	589c0100 	ldmpl	ip, {r8}
    1d20:	14000004 	strne	r0, [r0], #-4
    1d24:	000013c5 	andeq	r1, r0, r5, asr #7
    1d28:	3a019c01 	bcc	68d34 <startup-0x1ff972cc>
    1d2c:	02000003 	andeq	r0, r0, #3
    1d30:	0e147491 	cfcmpseq	r7, mvf4, mvf1
    1d34:	0100000f 	tsteq	r0, pc
    1d38:	00a2019c 	umlaleq	r0, r2, ip, r1
    1d3c:	91020000 	mrsls	r0, (UNDEF: 2)
    1d40:	42170072 	andsmi	r0, r7, #114	; 0x72
    1d44:	01000012 	tsteq	r0, r2, lsl r0
    1d48:	00a20188 	adceq	r0, r2, r8, lsl #3
    1d4c:	1b800000 	blne	fe001d54 <GPIO_Ports+0xddfff204>
    1d50:	00162000 	andseq	r2, r6, r0
    1d54:	9c010000 	stcls	0, cr0, [r1], {-0}
    1d58:	00000482 	andeq	r0, r0, r2, lsl #9
    1d5c:	0013c514 	andseq	ip, r3, r4, lsl r5
    1d60:	01880100 	orreq	r0, r8, r0, lsl #2
    1d64:	0000033a 	andeq	r0, r0, sl, lsr r3
    1d68:	00749102 	rsbseq	r9, r4, r2, lsl #2
    1d6c:	0013f317 	andseq	pc, r3, r7, lsl r3	; <UNPREDICTABLE>
    1d70:	016e0100 	cmneq	lr, r0, lsl #2
    1d74:	00000097 	muleq	r0, r7, r0
    1d78:	20001b3e 	andcs	r1, r0, lr, lsr fp
    1d7c:	00000042 	andeq	r0, r0, r2, asr #32
    1d80:	04ca9c01 	strbeq	r9, [sl], #3073	; 0xc01
    1d84:	c5140000 	ldrgt	r0, [r4, #-0]
    1d88:	01000013 	tsteq	r0, r3, lsl r0
    1d8c:	033a016e 	teqeq	sl, #-2147483621	; 0x8000001b
    1d90:	91020000 	mrsls	r0, (UNDEF: 2)
    1d94:	0f0e146c 	svceq	0x000e146c
    1d98:	6e010000 	cdpvs	0, 0, cr0, cr1, cr0, {0}
    1d9c:	0000a201 	andeq	sl, r0, r1, lsl #4
    1da0:	6a910200 	bvs	fe4425a8 <GPIO_Ports+0xde43fa58>
    1da4:	000fd015 	andeq	sp, pc, r5, lsl r0	; <UNPREDICTABLE>
    1da8:	01700100 	cmneq	r0, r0, lsl #2
    1dac:	00000097 	muleq	r0, r7, r0
    1db0:	00779102 	rsbseq	r9, r7, r2, lsl #2
    1db4:	00137f17 	andseq	r7, r3, r7, lsl pc
    1db8:	015d0100 	cmpeq	sp, r0, lsl #2
    1dbc:	000000a2 	andeq	r0, r0, r2, lsr #1
    1dc0:	20001b28 	andcs	r1, r0, r8, lsr #22
    1dc4:	00000016 	andeq	r0, r0, r6, lsl r0
    1dc8:	04f49c01 	ldrbteq	r9, [r4], #3073	; 0xc01
    1dcc:	c5140000 	ldrgt	r0, [r4, #-0]
    1dd0:	01000013 	tsteq	r0, r3, lsl r0
    1dd4:	033a015d 	teqeq	sl, #1073741847	; 0x40000017
    1dd8:	91020000 	mrsls	r0, (UNDEF: 2)
    1ddc:	42170074 	andsmi	r0, r7, #116	; 0x74
    1de0:	01000013 	tsteq	r0, r3, lsl r0
    1de4:	00970143 	addseq	r0, r7, r3, asr #2
    1de8:	1ae60000 	bne	ff981df0 <GPIO_Ports+0xdf97f2a0>
    1dec:	00422000 	subeq	r2, r2, r0
    1df0:	9c010000 	stcls	0, cr0, [r1], {-0}
    1df4:	0000053c 	andeq	r0, r0, ip, lsr r5
    1df8:	0013c514 	andseq	ip, r3, r4, lsl r5
    1dfc:	01430100 	mrseq	r0, (UNDEF: 83)
    1e00:	0000033a 	andeq	r0, r0, sl, lsr r3
    1e04:	146c9102 	strbtne	r9, [ip], #-258	; 0xfffffefe
    1e08:	00000f0e 	andeq	r0, r0, lr, lsl #30
    1e0c:	a2014301 	andge	r4, r1, #67108864	; 0x4000000
    1e10:	02000000 	andeq	r0, r0, #0
    1e14:	d0156a91 	mulsle	r5, r1, sl
    1e18:	0100000f 	tsteq	r0, pc
    1e1c:	00970145 	addseq	r0, r7, r5, asr #2
    1e20:	91020000 	mrsls	r0, (UNDEF: 2)
    1e24:	92130077 	andsls	r0, r3, #119	; 0x77
    1e28:	01000013 	tsteq	r0, r3, lsl r0
    1e2c:	1aa00115 	bne	fe802288 <GPIO_Ports+0xde7ff738>
    1e30:	00462000 	subeq	r2, r6, r0
    1e34:	9c010000 	stcls	0, cr0, [r1], {-0}
    1e38:	00000580 	andeq	r0, r0, r0, lsl #11
    1e3c:	0013c514 	andseq	ip, r3, r4, lsl r5
    1e40:	01150100 	tsteq	r5, r0, lsl #2
    1e44:	0000033a 	andeq	r0, r0, sl, lsr r3
    1e48:	146c9102 	strbtne	r9, [ip], #-258	; 0xfffffefe
    1e4c:	00000f0e 	andeq	r0, r0, lr, lsl #30
    1e50:	a2011501 	andge	r1, r1, #4194304	; 0x400000
    1e54:	02000000 	andeq	r0, r0, #0
    1e58:	74186a91 	ldrvc	r6, [r8], #-2705	; 0xfffff56f
    1e5c:	0100706d 	tsteq	r0, sp, rrx
    1e60:	00cd0117 	sbceq	r0, sp, r7, lsl r1
    1e64:	91020000 	mrsls	r0, (UNDEF: 2)
    1e68:	63190074 	tstvs	r9, #116	; 0x74
    1e6c:	01000012 	tsteq	r0, r2, lsl r0
    1e70:	001a6cfe 			; <UNDEFINED> instruction: 0x001a6cfe
    1e74:	00003420 	andeq	r3, r0, r0, lsr #8
    1e78:	a49c0100 	ldrge	r0, [ip], #256	; 0x100
    1e7c:	1a000005 	bne	1e98 <startup-0x1fffe168>
    1e80:	00001358 	andeq	r1, r0, r8, asr r3
    1e84:	05a4fe01 	streq	pc, [r4, #3585]!	; 0xe01
    1e88:	91020000 	mrsls	r0, (UNDEF: 2)
    1e8c:	04160074 	ldreq	r0, [r6], #-116	; 0xffffff8c
    1e90:	000002cd 	andeq	r0, r0, sp, asr #5
    1e94:	00129f19 	andseq	r9, r2, r9, lsl pc
    1e98:	54ca0100 	strbpl	r0, [sl], #256	; 0x100
    1e9c:	18200019 	stmdane	r0!, {r0, r3, r4}
    1ea0:	01000001 	tsteq	r0, r1
    1ea4:	0006069c 	muleq	r6, ip, r6
    1ea8:	13c51a00 	bicne	r1, r5, #0, 20
    1eac:	ca010000 	bgt	41eb4 <startup-0x1ffbe14c>
    1eb0:	0000033a 	andeq	r0, r0, sl, lsr r3
    1eb4:	1a649102 	bne	19262c4 <startup-0x1e6d9d3c>
    1eb8:	00001358 	andeq	r1, r0, r8, asr r3
    1ebc:	05a4ca01 	streq	ip, [r4, #2561]!	; 0xa01
    1ec0:	91020000 	mrsls	r0, (UNDEF: 2)
    1ec4:	12331b60 	eorsne	r1, r3, #96, 22	; 0x18000
    1ec8:	cc010000 	stcgt	0, cr0, [r1], {-0}
    1ecc:	000000c2 	andeq	r0, r0, r2, asr #1
    1ed0:	1c749102 	ldfnep	f1, [r4], #-8
    1ed4:	00736f70 	rsbseq	r6, r3, r0, ror pc
    1ed8:	00c2cc01 	sbceq	ip, r2, r1, lsl #24
    1edc:	91020000 	mrsls	r0, (UNDEF: 2)
    1ee0:	13af1b70 			; <UNDEFINED> instruction: 0x13af1b70
    1ee4:	cc010000 	stcgt	0, cr0, [r1], {-0}
    1ee8:	000000c2 	andeq	r0, r0, r2, asr #1
    1eec:	006c9102 	rsbeq	r9, ip, r2, lsl #2
    1ef0:	0013361d 	andseq	r3, r3, sp, lsl r6
    1ef4:	e47f0100 	ldrbt	r0, [pc], #-256	; 1efc <startup-0x1fffe104>
    1ef8:	70200017 	eorvc	r0, r0, r7, lsl r0
    1efc:	01000001 	tsteq	r0, r1
    1f00:	13c51a9c 	bicne	r1, r5, #156, 20	; 0x9c000
    1f04:	7f010000 	svcvc	0x00010000
    1f08:	0000033a 	andeq	r0, r0, sl, lsr r3
    1f0c:	00749102 	rsbseq	r9, r4, r2, lsl #2
    1f10:	00054300 	andeq	r4, r5, r0, lsl #6
    1f14:	c5000400 	strgt	r0, [r0, #-1024]	; 0xfffffc00
    1f18:	04000004 	streq	r0, [r0], #-4
    1f1c:	00061401 	andeq	r1, r6, r1, lsl #8
    1f20:	15280c00 	strne	r0, [r8, #-3072]!	; 0xfffff400
    1f24:	05680000 	strbeq	r0, [r8, #-0]!
    1f28:	1cf40000 	ldclne	0, cr0, [r4]
    1f2c:	01c42000 	biceq	r2, r4, r0
    1f30:	07b60000 	ldreq	r0, [r6, r0]!
    1f34:	01020000 	mrseq	r0, (UNDEF: 2)
    1f38:	0003f606 	andeq	pc, r3, r6, lsl #12
    1f3c:	01ce0300 	biceq	r0, lr, r0, lsl #6
    1f40:	2b020000 	blcs	81f48 <startup-0x1ff7e0b8>
    1f44:	00000037 	andeq	r0, r0, r7, lsr r0
    1f48:	f4080102 	vst4.8	{d0,d2,d4,d6}, [r8], r2
    1f4c:	02000003 	andeq	r0, r0, #3
    1f50:	0f800502 	svceq	0x00800502
    1f54:	02020000 	andeq	r0, r2, #0
    1f58:	00110407 	andseq	r0, r1, r7, lsl #8
    1f5c:	11970300 	orrsne	r0, r7, r0, lsl #6
    1f60:	4d020000 	stcmi	0, cr0, [r2, #-0]
    1f64:	00000057 	andeq	r0, r0, r7, asr r0
    1f68:	dc050402 	cfstrsle	mvf0, [r5], {2}
    1f6c:	03000009 	movweq	r0, #9
    1f70:	00000985 	andeq	r0, r0, r5, lsl #19
    1f74:	00694f02 	rsbeq	r4, r9, r2, lsl #30
    1f78:	04020000 	streq	r0, [r2], #-0
    1f7c:	000d2a07 	andeq	r2, sp, r7, lsl #20
    1f80:	05080200 	streq	r0, [r8, #-512]	; 0xfffffe00
    1f84:	000009d7 	ldrdeq	r0, [r0], -r7
    1f88:	25070802 	strcs	r0, [r7, #-2050]	; 0xfffff7fe
    1f8c:	0400000d 	streq	r0, [r0], #-13
    1f90:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    1f94:	04020074 	streq	r0, [r2], #-116	; 0xffffff8c
    1f98:	000d2f07 	andeq	r2, sp, r7, lsl #30
    1f9c:	01d00300 	bicseq	r0, r0, r0, lsl #6
    1fa0:	18030000 	stmdane	r3, {}	; <UNPREDICTABLE>
    1fa4:	0000002c 	andeq	r0, r0, ip, lsr #32
    1fa8:	00008c05 	andeq	r8, r0, r5, lsl #24
    1fac:	11990300 	orrsne	r0, r9, r0, lsl #6
    1fb0:	2c030000 	stccs	0, cr0, [r3], {-0}
    1fb4:	0000004c 	andeq	r0, r0, ip, asr #32
    1fb8:	00009c05 	andeq	r9, r0, r5, lsl #24
    1fbc:	09870300 	stmibeq	r7, {r8, r9}
    1fc0:	30030000 	andcc	r0, r3, r0
    1fc4:	0000005e 	andeq	r0, r0, lr, asr r0
    1fc8:	0000ac05 	andeq	sl, r0, r5, lsl #24
    1fcc:	00b70600 	adcseq	r0, r7, r0, lsl #12
    1fd0:	04070000 	streq	r0, [r7], #-0
    1fd4:	01a0040e 	lsleq	r0, lr, #8
    1fd8:	0000017d 	andeq	r0, r0, sp, ror r1
    1fdc:	0011b508 	andseq	fp, r1, r8, lsl #10
    1fe0:	01a20400 			; <UNDEFINED> instruction: 0x01a20400
    1fe4:	0000018d 	andeq	r0, r0, sp, lsl #3
    1fe8:	03e00800 	mvneq	r0, #0, 16
    1fec:	a3040000 	movwge	r0, #16384	; 0x4000
    1ff0:	00019201 	andeq	r9, r1, r1, lsl #4
    1ff4:	af082000 	svcge	0x00082000
    1ff8:	0400000d 	streq	r0, [r0], #-13
    1ffc:	018d01a4 	orreq	r0, sp, r4, lsr #3
    2000:	08800000 	stmeq	r0, {}	; <UNPREDICTABLE>
    2004:	00000005 	andeq	r0, r0, r5
    2008:	9201a504 	andls	sl, r1, #4, 10	; 0x1000000
    200c:	a0000001 	andge	r0, r0, r1
    2010:	00114509 	andseq	r4, r1, r9, lsl #10
    2014:	01a60400 			; <UNDEFINED> instruction: 0x01a60400
    2018:	0000018d 	andeq	r0, r0, sp, lsl #3
    201c:	6e090100 	adfvse	f0, f1, f0
    2020:	04000004 	streq	r0, [r0], #-4
    2024:	019201a7 	orrseq	r0, r2, r7, lsr #3
    2028:	01200000 			; <UNDEFINED> instruction: 0x01200000
    202c:	00017909 	andeq	r7, r1, r9, lsl #18
    2030:	01a80400 			; <UNDEFINED> instruction: 0x01a80400
    2034:	0000018d 	andeq	r0, r0, sp, lsl #3
    2038:	78090180 	stmdavc	r9, {r7, r8}
    203c:	04000004 	streq	r0, [r0], #-4
    2040:	019201a9 	orrseq	r0, r2, r9, lsr #3
    2044:	01a00000 	moveq	r0, r0
    2048:	00043209 	andeq	r3, r4, r9, lsl #4
    204c:	01aa0400 			; <UNDEFINED> instruction: 0x01aa0400
    2050:	0000018d 	andeq	r0, r0, sp, lsl #3
    2054:	14090200 	strne	r0, [r9], #-512	; 0xfffffe00
    2058:	04000004 	streq	r0, [r0], #-4
    205c:	01a201ab 			; <UNDEFINED> instruction: 0x01a201ab
    2060:	02200000 	eoreq	r0, r0, #0
    2064:	0050490a 	subseq	r4, r0, sl, lsl #18
    2068:	c201ac04 	andgt	sl, r1, #4, 24	; 0x400
    206c:	00000001 	andeq	r0, r0, r1
    2070:	041e0903 	ldreq	r0, [lr], #-2307	; 0xfffff6fd
    2074:	ad040000 	stcge	0, cr0, [r4, #-0]
    2078:	0001c701 	andeq	ip, r1, r1, lsl #14
    207c:	0903f000 	stmdbeq	r3, {ip, sp, lr, pc}
    2080:	00000707 	andeq	r0, r0, r7, lsl #14
    2084:	b701ae04 	strlt	sl, [r1, -r4, lsl #28]
    2088:	00000000 	andeq	r0, r0, r0
    208c:	b70b000e 	strlt	r0, [fp, -lr]
    2090:	8d000000 	stchi	0, cr0, [r0, #-0]
    2094:	0c000001 	stceq	0, cr0, [r0], {1}
    2098:	00000085 	andeq	r0, r0, r5, lsl #1
    209c:	7d050007 	stcvc	0, cr0, [r5, #-28]	; 0xffffffe4
    20a0:	0b000001 	bleq	20ac <startup-0x1fffdf54>
    20a4:	000000ac 	andeq	r0, r0, ip, lsr #1
    20a8:	000001a2 	andeq	r0, r0, r2, lsr #3
    20ac:	0000850c 	andeq	r8, r0, ip, lsl #10
    20b0:	0b001700 	bleq	7cb8 <startup-0x1fff8348>
    20b4:	000000ac 	andeq	r0, r0, ip, lsr #1
    20b8:	000001b2 			; <UNDEFINED> instruction: 0x000001b2
    20bc:	0000850c 	andeq	r8, r0, ip, lsl #10
    20c0:	0b003700 	bleq	fcc8 <startup-0x1fff0338>
    20c4:	00000097 	muleq	r0, r7, r0
    20c8:	000001c2 	andeq	r0, r0, r2, asr #3
    20cc:	0000850c 	andeq	r8, r0, ip, lsl #10
    20d0:	0500ef00 	streq	lr, [r0, #-3840]	; 0xfffff100
    20d4:	000001b2 			; <UNDEFINED> instruction: 0x000001b2
    20d8:	0000ac0b 	andeq	sl, r0, fp, lsl #24
    20dc:	0001d800 	andeq	sp, r1, r0, lsl #16
    20e0:	00850d00 	addeq	r0, r5, r0, lsl #26
    20e4:	02830000 	addeq	r0, r3, #0
    20e8:	0ce50e00 	stcleq	14, cr0, [r5]
    20ec:	af040000 	svcge	0x00040000
    20f0:	0000c101 	andeq	ip, r0, r1, lsl #2
    20f4:	048c0f00 	streq	r0, [ip], #3840	; 0xf00
    20f8:	02ff01c0 	rscseq	r0, pc, #192, 2	; 0x30
    20fc:	3f080000 	svccc	0x00080000
    2100:	04000002 	streq	r0, [r0], #-2
    2104:	00bc01c2 	adcseq	r0, ip, r2, asr #3
    2108:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    210c:	00000368 	andeq	r0, r0, r8, ror #6
    2110:	b701c304 	strlt	ip, [r1, -r4, lsl #6]
    2114:	04000000 	streq	r0, [r0], #-0
    2118:	0000ac08 	andeq	sl, r0, r8, lsl #24
    211c:	01c40400 	biceq	r0, r4, r0, lsl #8
    2120:	000000b7 	strheq	r0, [r0], -r7
    2124:	020f0808 	andeq	r0, pc, #8, 16	; 0x80000
    2128:	c5040000 	strgt	r0, [r4, #-0]
    212c:	0000b701 	andeq	fp, r0, r1, lsl #14
    2130:	53100c00 	tstpl	r0, #0, 24
    2134:	04005243 	streq	r5, [r0], #-579	; 0xfffffdbd
    2138:	00b701c6 	adcseq	r0, r7, r6, asr #3
    213c:	10100000 	andsne	r0, r0, r0
    2140:	00524343 	subseq	r4, r2, r3, asr #6
    2144:	b701c704 	strlt	ip, [r1, -r4, lsl #14]
    2148:	14000000 	strne	r0, [r0], #-0
    214c:	50485310 	subpl	r5, r8, r0, lsl r3
    2150:	01c80400 	biceq	r0, r8, r0, lsl #8
    2154:	0000030f 	andeq	r0, r0, pc, lsl #6
    2158:	06f00818 	usateq	r0, #16, r8, lsl #16
    215c:	c9040000 	stmdbgt	r4, {}	; <UNPREDICTABLE>
    2160:	0000b701 	andeq	fp, r0, r1, lsl #14
    2164:	91082400 	tstls	r8, r0, lsl #8
    2168:	0400000e 	streq	r0, [r0], #-14
    216c:	00b701ca 	adcseq	r0, r7, sl, asr #3
    2170:	08280000 	stmdaeq	r8!, {}	; <UNPREDICTABLE>
    2174:	000005ab 	andeq	r0, r0, fp, lsr #11
    2178:	b701cb04 	strlt	ip, [r1, -r4, lsl #22]
    217c:	2c000000 	stccs	0, cr0, [r0], {-0}
    2180:	0004b608 	andeq	fp, r4, r8, lsl #12
    2184:	01cc0400 	biceq	r0, ip, r0, lsl #8
    2188:	000000b7 	strheq	r0, [r0], -r7
    218c:	0f7a0830 	svceq	0x007a0830
    2190:	cd040000 	stcgt	0, cr0, [r4, #-0]
    2194:	0000b701 	andeq	fp, r0, r1, lsl #14
    2198:	b6083400 	strlt	r3, [r8], -r0, lsl #8
    219c:	0400000b 	streq	r0, [r0], #-11
    21a0:	00b701ce 	adcseq	r0, r7, lr, asr #3
    21a4:	08380000 	ldmdaeq	r8!, {}	; <UNPREDICTABLE>
    21a8:	00000e55 	andeq	r0, r0, r5, asr lr
    21ac:	b701cf04 	strlt	ip, [r1, -r4, lsl #30]
    21b0:	3c000000 	stccc	0, cr0, [r0], {-0}
    21b4:	52465010 	subpl	r5, r6, #16
    21b8:	01d00400 	bicseq	r0, r0, r0, lsl #8
    21bc:	00000329 	andeq	r0, r0, r9, lsr #6
    21c0:	46441040 	strbmi	r1, [r4], -r0, asr #32
    21c4:	d1040052 	qaddle	r0, r2, r4
    21c8:	0000bc01 	andeq	fp, r0, r1, lsl #24
    21cc:	41104800 	tstmi	r0, r0, lsl #16
    21d0:	04005244 	streq	r5, [r0], #-580	; 0xfffffdbc
    21d4:	00bc01d2 	ldrsbteq	r0, [ip], r2
    21d8:	084c0000 	stmdaeq	ip, {}^	; <UNPREDICTABLE>
    21dc:	00000f69 	andeq	r0, r0, r9, ror #30
    21e0:	4301d304 	movwmi	sp, #4868	; 0x1304
    21e4:	50000003 	andpl	r0, r0, r3
    21e8:	000fa308 	andeq	sl, pc, r8, lsl #6
    21ec:	01d40400 	bicseq	r0, r4, r0, lsl #8
    21f0:	0000035d 	andeq	r0, r0, sp, asr r3
    21f4:	03e00860 	mvneq	r0, #96, 16	; 0x600000
    21f8:	d5040000 	strle	r0, [r4, #-0]
    21fc:	00036201 	andeq	r6, r3, r1, lsl #4
    2200:	3f087400 	svccc	0x00087400
    2204:	04000011 	streq	r0, [r0], #-17	; 0xffffffef
    2208:	00b701d6 	ldrsbteq	r0, [r7], r6
    220c:	00880000 	addeq	r0, r8, r0
    2210:	0000970b 	andeq	r9, r0, fp, lsl #14
    2214:	00030f00 	andeq	r0, r3, r0, lsl #30
    2218:	00850c00 	addeq	r0, r5, r0, lsl #24
    221c:	000b0000 	andeq	r0, fp, r0
    2220:	0002ff05 	andeq	pc, r2, r5, lsl #30
    2224:	00bc0b00 	adcseq	r0, ip, r0, lsl #22
    2228:	03240000 			; <UNDEFINED> instruction: 0x03240000
    222c:	850c0000 	strhi	r0, [ip, #-0]
    2230:	01000000 	mrseq	r0, (UNDEF: 0)
    2234:	03140600 	tsteq	r4, #0, 12
    2238:	24050000 	strcs	r0, [r5], #-0
    223c:	0b000003 	bleq	2250 <startup-0x1fffddb0>
    2240:	000000bc 	strheq	r0, [r0], -ip
    2244:	0000033e 	andeq	r0, r0, lr, lsr r3
    2248:	0000850c 	andeq	r8, r0, ip, lsl #10
    224c:	06000300 	streq	r0, [r0], -r0, lsl #6
    2250:	0000032e 	andeq	r0, r0, lr, lsr #6
    2254:	00033e05 	andeq	r3, r3, r5, lsl #28
    2258:	00bc0b00 	adcseq	r0, ip, r0, lsl #22
    225c:	03580000 	cmpeq	r8, #0
    2260:	850c0000 	strhi	r0, [ip, #-0]
    2264:	04000000 	streq	r0, [r0], #-0
    2268:	03480600 	movteq	r0, #34304	; 0x8600
    226c:	58050000 	stmdapl	r5, {}	; <UNPREDICTABLE>
    2270:	0b000003 	bleq	2284 <startup-0x1fffdd7c>
    2274:	000000ac 	andeq	r0, r0, ip, lsr #1
    2278:	00000372 	andeq	r0, r0, r2, ror r3
    227c:	0000850c 	andeq	r8, r0, ip, lsl #10
    2280:	0e000400 	cfcpyseq	mvf0, mvf0
    2284:	0000049c 	muleq	r0, ip, r4
    2288:	e401d704 	str	sp, [r1], #-1796	; 0xfffff8fc
    228c:	0f000001 	svceq	0x00000001
    2290:	02bf0410 	adcseq	r0, pc, #16, 8	; 0x10000000
    2294:	000003bc 			; <UNDEFINED> instruction: 0x000003bc
    2298:	000b1408 	andeq	r1, fp, r8, lsl #8
    229c:	02c10400 	sbceq	r0, r1, #0, 8
    22a0:	000000b7 	strheq	r0, [r0], -r7
    22a4:	0ee50800 	cdpeq	8, 14, cr0, cr5, cr0, {0}
    22a8:	c2040000 	andgt	r0, r4, #0
    22ac:	0000b702 	andeq	fp, r0, r2, lsl #14
    22b0:	56100400 	ldrpl	r0, [r0], -r0, lsl #8
    22b4:	04004c41 	streq	r4, [r0], #-3137	; 0xfffff3bf
    22b8:	00b702c3 	adcseq	r0, r7, r3, asr #5
    22bc:	08080000 	stmdaeq	r8, {}	; <UNPREDICTABLE>
    22c0:	00000e61 	andeq	r0, r0, r1, ror #28
    22c4:	bc02c404 	cfstrslt	mvf12, [r2], {4}
    22c8:	0c000000 	stceq	0, cr0, [r0], {-0}
    22cc:	0c4a0e00 	mcrreq	14, 0, r0, sl, cr0
    22d0:	c5040000 	strgt	r0, [r4, #-0]
    22d4:	00037e02 	andeq	r7, r3, r2, lsl #28
    22d8:	10251100 	eorne	r1, r5, r0, lsl #2
    22dc:	fa040000 	blx	1022e4 <startup-0x1fefdd1c>
    22e0:	0000a706 	andeq	sl, r0, r6, lsl #14
    22e4:	088b1200 	stmeq	fp, {r9, ip}
    22e8:	3b050000 	blcc	1422f0 <startup-0x1febdd10>
    22ec:	000000ac 	andeq	r0, r0, ip, lsr #1
    22f0:	37010713 	smladcc	r1, r3, r7, r0
    22f4:	06000000 	streq	r0, [r0], -r0
    22f8:	03fa035f 	mvnseq	r0, #2080374785	; 0x7c000001
    22fc:	15140000 	ldrne	r0, [r4, #-0]
    2300:	0000000a 	andeq	r0, r0, sl
    2304:	000fda14 	andeq	sp, pc, r4, lsl sl	; <UNPREDICTABLE>
    2308:	0e000100 	adfeqs	f0, f0, f0
    230c:	00000cef 	andeq	r0, r0, pc, ror #25
    2310:	df035f06 	svcle	0x00035f06
    2314:	15000003 	strne	r0, [r0, #-3]
    2318:	3f360704 	svccc	0x00360704
    231c:	16000004 	strne	r0, [r0], -r4
    2320:	000014ce 	andeq	r1, r0, lr, asr #9
    2324:	008c3807 	addeq	r3, ip, r7, lsl #16
    2328:	16000000 	strne	r0, [r0], -r0
    232c:	000014f9 	strdeq	r1, [r0], -r9
    2330:	008c3d07 	addeq	r3, ip, r7, lsl #26
    2334:	16010000 	strne	r0, [r1], -r0
    2338:	000014de 	ldrdeq	r1, [r0], -lr
    233c:	008c4207 	addeq	r4, ip, r7, lsl #4
    2340:	16020000 	strne	r0, [r2], -r0
    2344:	0000141b 	andeq	r1, r0, fp, lsl r4
    2348:	03fa4707 	mvnseq	r4, #1835008	; 0x1c0000
    234c:	00030000 	andeq	r0, r3, r0
    2350:	00140a03 	andseq	r0, r4, r3, lsl #20
    2354:	064a0700 	strbeq	r0, [sl], -r0, lsl #14
    2358:	17000004 	strne	r0, [r0, -r4]
    235c:	000014aa 	andeq	r1, r0, sl, lsr #9
    2360:	1e84df01 	cdpne	15, 8, cr13, cr4, cr1, {0}
    2364:	00342000 	eorseq	r2, r4, r0
    2368:	9c010000 	stcls	0, cr0, [r1], {-0}
    236c:	0000046e 	andeq	r0, r0, lr, ror #8
    2370:	00142e18 	andseq	r2, r4, r8, lsl lr
    2374:	acdf0100 	ldfgee	f0, [pc], {0}
    2378:	02000000 	andeq	r0, r0, #0
    237c:	17007491 			; <UNDEFINED> instruction: 0x17007491
    2380:	00001496 	muleq	r0, r6, r4
    2384:	1e3cc701 	cdpne	7, 3, cr12, cr12, cr1, {0}
    2388:	00482000 	subeq	r2, r8, r0
    238c:	9c010000 	stcls	0, cr0, [r1], {-0}
    2390:	000004a0 	andeq	r0, r0, r0, lsr #9
    2394:	00159c18 	andseq	r9, r5, r8, lsl ip
    2398:	8cc70100 	stfhie	f0, [r7], {0}
    239c:	02000000 	andeq	r0, r0, #0
    23a0:	27187791 			; <UNDEFINED> instruction: 0x27187791
    23a4:	0100000b 	tsteq	r0, fp
    23a8:	0003fac7 	andeq	pc, r3, r7, asr #21
    23ac:	76910200 	ldrvc	r0, [r1], r0, lsl #4
    23b0:	147b1700 	ldrbtne	r1, [fp], #-1792	; 0xfffff900
    23b4:	b4010000 	strlt	r0, [r1], #-0
    23b8:	20001e10 	andcs	r1, r0, r0, lsl lr
    23bc:	0000002c 	andeq	r0, r0, ip, lsr #32
    23c0:	04d29c01 	ldrbeq	r9, [r2], #3073	; 0xc01
    23c4:	1b180000 	blne	6023cc <startup-0x1f9fdc34>
    23c8:	01000015 	tsteq	r0, r5, lsl r0
    23cc:	0000acb4 			; <UNDEFINED> instruction: 0x0000acb4
    23d0:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    23d4:	00147418 	andseq	r7, r4, r8, lsl r4
    23d8:	acb40100 	ldfges	f0, [r4]
    23dc:	02000000 	andeq	r0, r0, #0
    23e0:	17007091 			; <UNDEFINED> instruction: 0x17007091
    23e4:	00001463 	andeq	r1, r0, r3, ror #8
    23e8:	1d188801 	ldcne	8, cr8, [r8, #-4]
    23ec:	00f82000 	rscseq	r2, r8, r0
    23f0:	9c010000 	stcls	0, cr0, [r1], {-0}
    23f4:	00000520 	andeq	r0, r0, r0, lsr #10
    23f8:	00144018 	andseq	r4, r4, r8, lsl r0
    23fc:	20880100 	addcs	r0, r8, r0, lsl #2
    2400:	02000005 	andeq	r0, r0, #5
    2404:	c2196491 	andsgt	r6, r9, #-1862270976	; 0x91000000
    2408:	01000014 	tsteq	r0, r4, lsl r0
    240c:	00008c8a 	andeq	r8, r0, sl, lsl #25
    2410:	6f910200 	svcvs	0x00910200
    2414:	00146d19 	andseq	r6, r4, r9, lsl sp
    2418:	8c8a0100 	stfhis	f0, [sl], {0}
    241c:	02000000 	andeq	r0, r0, #0
    2420:	8f196e91 	svchi	0x00196e91
    2424:	01000014 	tsteq	r0, r4, lsl r0
    2428:	00008c8a 	andeq	r8, r0, sl, lsl #25
    242c:	6d910200 	lfmvs	f0, 4, [r1]
    2430:	3f041a00 	svccc	0x00041a00
    2434:	1b000004 	blne	244c <startup-0x1fffdbb4>
    2438:	000015a9 	andeq	r1, r0, r9, lsr #11
    243c:	1cf47601 	ldclne	6, cr7, [r4], #4
    2440:	00242000 	eoreq	r2, r4, r0
    2444:	9c010000 	stcls	0, cr0, [r1], {-0}
    2448:	00145018 	andseq	r5, r4, r8, lsl r0
    244c:	ac760100 	ldfgee	f0, [r6], #-0
    2450:	02000000 	andeq	r0, r0, #0
    2454:	00007491 	muleq	r0, r1, r4
    2458:	000001a9 	andeq	r0, r0, r9, lsr #3
    245c:	06390004 	ldrteq	r0, [r9], -r4
    2460:	01040000 	mrseq	r0, (UNDEF: 4)
    2464:	00000614 	andeq	r0, r0, r4, lsl r6
    2468:	0015d20c 	andseq	sp, r5, ip, lsl #4
    246c:	00056800 	andeq	r6, r5, r0, lsl #16
    2470:	001eb800 	andseq	fp, lr, r0, lsl #16
    2474:	00012820 	andeq	r2, r1, r0, lsr #16
    2478:	0009b400 	andeq	fp, r9, r0, lsl #8
    247c:	06010200 	streq	r0, [r1], -r0, lsl #4
    2480:	000003f6 	strdeq	r0, [r0], -r6
    2484:	0001ce03 	andeq	ip, r1, r3, lsl #28
    2488:	372b0200 	strcc	r0, [fp, -r0, lsl #4]!
    248c:	02000000 	andeq	r0, r0, #0
    2490:	03f40801 	mvnseq	r0, #65536	; 0x10000
    2494:	02020000 	andeq	r0, r2, #0
    2498:	000f8005 	andeq	r8, pc, r5
    249c:	07020200 	streq	r0, [r2, -r0, lsl #4]
    24a0:	00001104 	andeq	r1, r0, r4, lsl #2
    24a4:	dc050402 	cfstrsle	mvf0, [r5], {2}
    24a8:	02000009 	andeq	r0, r0, #9
    24ac:	0d2a0704 	stceq	7, cr0, [sl, #-16]!
    24b0:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    24b4:	0009d705 	andeq	sp, r9, r5, lsl #14
    24b8:	07080200 	streq	r0, [r8, -r0, lsl #4]
    24bc:	00000d25 	andeq	r0, r0, r5, lsr #26
    24c0:	69050404 	stmdbvs	r5, {r2, sl}
    24c4:	0200746e 	andeq	r7, r0, #1845493760	; 0x6e000000
    24c8:	0d2f0704 	stceq	7, cr0, [pc, #-16]!	; 24c0 <startup-0x1fffdb40>
    24cc:	d0030000 	andle	r0, r3, r0
    24d0:	03000001 	movweq	r0, #1
    24d4:	00002c18 	andeq	r2, r0, r8, lsl ip
    24d8:	04670500 	strbteq	r0, [r7], #-1280	; 0xfffffb00
    24dc:	0000b90c 	andeq	fp, r0, ip, lsl #18
    24e0:	163a0600 	ldrtne	r0, [sl], -r0, lsl #12
    24e4:	0e040000 	cdpeq	0, 0, cr0, cr4, cr0, {0}
    24e8:	000000b9 	strheq	r0, [r0], -r9
    24ec:	15cc0600 	strbne	r0, [ip, #1536]	; 0x600
    24f0:	11040000 	mrsne	r0, (UNDEF: 4)
    24f4:	00000076 	andeq	r0, r0, r6, ror r0
    24f8:	6e690764 	cdpvs	7, 6, cr0, cr9, cr4, {3}
    24fc:	76140400 	ldrvc	r0, [r4], -r0, lsl #8
    2500:	65000000 	strvs	r0, [r0, #-0]
    2504:	74756f07 	ldrbtvc	r6, [r5], #-3847	; 0xfffff0f9
    2508:	76170400 	ldrvc	r0, [r7], -r0, lsl #8
    250c:	66000000 	strvs	r0, [r0], -r0
    2510:	00760800 	rsbseq	r0, r6, r0, lsl #16
    2514:	00c90000 	sbceq	r0, r9, r0
    2518:	6f090000 	svcvs	0x00090000
    251c:	63000000 	movwvs	r0, #0
    2520:	161d0300 	ldrne	r0, [sp], -r0, lsl #6
    2524:	18040000 	stmdane	r4, {}	; <UNPREDICTABLE>
    2528:	00000081 	andeq	r0, r0, r1, lsl #1
    252c:	0016440a 	andseq	r4, r6, sl, lsl #8
    2530:	762d0100 	strtvc	r0, [sp], -r0, lsl #2
    2534:	82000000 	andhi	r0, r0, #0
    2538:	5e20001f 	miapl	acc0, pc, r0
    253c:	01000000 	mrseq	r0, (UNDEF: 0)
    2540:	00010a9c 	muleq	r1, ip, sl
    2544:	16590b00 	ldrbne	r0, [r9], -r0, lsl #22
    2548:	2d010000 	stccs	0, cr0, [r1, #-0]
    254c:	0000010a 	andeq	r0, r0, sl, lsl #2
    2550:	0b749102 	bleq	1d26960 <startup-0x1e2d96a0>
    2554:	00001635 	andeq	r1, r0, r5, lsr r6
    2558:	01102d01 	tsteq	r0, r1, lsl #26
    255c:	91020000 	mrsls	r0, (UNDEF: 2)
    2560:	040c0070 	streq	r0, [ip], #-112	; 0xffffff90
    2564:	000000c9 	andeq	r0, r0, r9, asr #1
    2568:	0076040c 	rsbseq	r0, r6, ip, lsl #8
    256c:	220d0000 	andcs	r0, sp, #0
    2570:	01000016 	tsteq	r0, r6, lsl r0
    2574:	001f421f 	andseq	r4, pc, pc, lsl r2	; <UNPREDICTABLE>
    2578:	00004020 	andeq	r4, r0, r0, lsr #32
    257c:	569c0100 	ldrpl	r0, [ip], r0, lsl #2
    2580:	0b000001 	bleq	258c <startup-0x1fffda74>
    2584:	00001659 	andeq	r1, r0, r9, asr r6
    2588:	010a1f01 	tsteq	sl, r1, lsl #30
    258c:	91020000 	mrsls	r0, (UNDEF: 2)
    2590:	163f0b6c 	ldrtne	r0, [pc], -ip, ror #22
    2594:	1f010000 	svcne	0x00010000
    2598:	00000076 	andeq	r0, r0, r6, ror r0
    259c:	0e6b9102 	lgneqe	f1, f2
    25a0:	00001660 	andeq	r1, r0, r0, ror #12
    25a4:	00762101 	rsbseq	r2, r6, r1, lsl #2
    25a8:	91020000 	mrsls	r0, (UNDEF: 2)
    25ac:	c20a0077 	andgt	r0, sl, #119	; 0x77
    25b0:	01000015 	tsteq	r0, r5, lsl r0
    25b4:	0000760c 	andeq	r7, r0, ip, lsl #12
    25b8:	001ee000 	andseq	lr, lr, r0
    25bc:	00006220 	andeq	r6, r0, r0, lsr #4
    25c0:	8c9c0100 	ldfhis	f0, [ip], {0}
    25c4:	0b000001 	bleq	25d0 <startup-0x1fffda30>
    25c8:	00001659 	andeq	r1, r0, r9, asr r6
    25cc:	010a0c01 	tsteq	sl, r1, lsl #24
    25d0:	91020000 	mrsls	r0, (UNDEF: 2)
    25d4:	163f0b74 			; <UNDEFINED> instruction: 0x163f0b74
    25d8:	0c010000 	stceq	0, cr0, [r1], {-0}
    25dc:	00000076 	andeq	r0, r0, r6, ror r0
    25e0:	00739102 	rsbseq	r9, r3, r2, lsl #2
    25e4:	00164e0f 	andseq	r4, r6, pc, lsl #28
    25e8:	b8040100 	stmdalt	r4, {r8}
    25ec:	2820001e 	stmdacs	r0!, {r1, r2, r3, r4}
    25f0:	01000000 	mrseq	r0, (UNDEF: 0)
    25f4:	16590b9c 			; <UNDEFINED> instruction: 0x16590b9c
    25f8:	04010000 	streq	r0, [r1], #-0
    25fc:	0000010a 	andeq	r0, r0, sl, lsl #2
    2600:	00749102 	rsbseq	r9, r4, r2, lsl #2
    2604:	0009cc00 	andeq	ip, r9, r0, lsl #24
    2608:	22000400 	andcs	r0, r0, #0, 8
    260c:	04000007 	streq	r0, [r0], #-7
    2610:	00061401 	andeq	r1, r6, r1, lsl #8
    2614:	1a3b0c00 	bne	ec561c <startup-0x1f13a9e4>
    2618:	05680000 	strbeq	r0, [r8, #-0]!
    261c:	1fe00000 	svcne	0x00e00000
    2620:	09fe2000 	ldmibeq	lr!, {sp}^
    2624:	0b060000 	bleq	18262c <startup-0x1fe7d9d4>
    2628:	01020000 	mrseq	r0, (UNDEF: 2)
    262c:	0003f606 	andeq	pc, r3, r6, lsl #12
    2630:	01ce0300 	biceq	r0, lr, r0, lsl #6
    2634:	2b020000 	blcs	8263c <startup-0x1ff7d9c4>
    2638:	00000037 	andeq	r0, r0, r7, lsr r0
    263c:	f4080102 	vst4.8	{d0,d2,d4,d6}, [r8], r2
    2640:	02000003 	andeq	r0, r0, #3
    2644:	0f800502 	svceq	0x00800502
    2648:	28030000 	stmdacs	r3, {}	; <UNPREDICTABLE>
    264c:	02000005 	andeq	r0, r0, #5
    2650:	00005039 	andeq	r5, r0, r9, lsr r0
    2654:	07020200 	streq	r0, [r2, -r0, lsl #4]
    2658:	00001104 	andeq	r1, r0, r4, lsl #2
    265c:	00119703 	andseq	r9, r1, r3, lsl #14
    2660:	624d0200 	subvs	r0, sp, #0, 4
    2664:	02000000 	andeq	r0, r0, #0
    2668:	09dc0504 	ldmibeq	ip, {r2, r8, sl}^
    266c:	85030000 	strhi	r0, [r3, #-0]
    2670:	02000009 	andeq	r0, r0, #9
    2674:	0000744f 	andeq	r7, r0, pc, asr #8
    2678:	07040200 	streq	r0, [r4, -r0, lsl #4]
    267c:	00000d2a 	andeq	r0, r0, sl, lsr #26
    2680:	d7050802 	strle	r0, [r5, -r2, lsl #16]
    2684:	02000009 	andeq	r0, r0, #9
    2688:	0d250708 	stceq	7, cr0, [r5, #-32]!	; 0xffffffe0
    268c:	04040000 	streq	r0, [r4], #-0
    2690:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
    2694:	07040200 	streq	r0, [r4, -r0, lsl #4]
    2698:	00000d2f 	andeq	r0, r0, pc, lsr #26
    269c:	0001d003 	andeq	sp, r1, r3
    26a0:	2c180300 	ldccs	3, cr0, [r8], {-0}
    26a4:	03000000 	movweq	r0, #0
    26a8:	0000052a 	andeq	r0, r0, sl, lsr #10
    26ac:	00452403 	subeq	r2, r5, r3, lsl #8
    26b0:	a2050000 	andge	r0, r5, #0
    26b4:	03000000 	movweq	r0, #0
    26b8:	00001199 	muleq	r0, r9, r1
    26bc:	00572c03 	subseq	r2, r7, r3, lsl #24
    26c0:	b2050000 	andlt	r0, r5, #0
    26c4:	03000000 	movweq	r0, #0
    26c8:	00000987 	andeq	r0, r0, r7, lsl #19
    26cc:	00693003 	rsbeq	r3, r9, r3
    26d0:	25060000 	strcs	r0, [r6, #-0]
    26d4:	04000010 	streq	r0, [r0], #-16
    26d8:	00bd06fa 	ldrshteq	r0, [sp], sl
    26dc:	8b070000 	blhi	1c26e4 <startup-0x1fe3d91c>
    26e0:	05000008 	streq	r0, [r0, #-8]
    26e4:	0000c23b 	andeq	ip, r0, fp, lsr r2
    26e8:	01070800 	tsteq	r7, r0, lsl #16
    26ec:	00000037 	andeq	r0, r0, r7, lsr r0
    26f0:	ff035d06 			; <UNDEFINED> instruction: 0xff035d06
    26f4:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    26f8:	0000127e 	andeq	r1, r0, lr, ror r2
    26fc:	45530a00 	ldrbmi	r0, [r3, #-2560]	; 0xfffff600
    2700:	00010054 	andeq	r0, r1, r4, asr r0
    2704:	000a3f0b 	andeq	r3, sl, fp, lsl #30
    2708:	035d0600 	cmpeq	sp, #0, 12
    270c:	000000e4 	andeq	r0, r0, r4, ror #1
    2710:	000b000b 	andeq	r0, fp, fp
    2714:	035d0600 	cmpeq	sp, #0, 12
    2718:	000000e4 	andeq	r0, r0, r4, ror #1
    271c:	37010708 	strcc	r0, [r1, -r8, lsl #14]
    2720:	06000000 	streq	r0, [r0], -r0
    2724:	0132035f 	teqeq	r2, pc, asr r3
    2728:	15090000 	strne	r0, [r9, #-0]
    272c:	0000000a 	andeq	r0, r0, sl
    2730:	000fda09 	andeq	sp, pc, r9, lsl #20
    2734:	0b000100 	bleq	2b3c <startup-0x1fffd4c4>
    2738:	00000cef 	andeq	r0, r0, pc, ror #25
    273c:	17035f06 	strne	r5, [r3, -r6, lsl #30]
    2740:	0c000001 	stceq	0, cr0, [r0], {1}
    2744:	0773061c 			; <UNDEFINED> instruction: 0x0773061c
    2748:	000001fc 	strdeq	r0, [r0], -ip
    274c:	0052530d 	subseq	r5, r2, sp, lsl #6
    2750:	ad077506 	cfstr32ge	mvfx7, [r7, #-24]	; 0xffffffe8
    2754:	00000000 	andeq	r0, r0, r0
    2758:	0003e00e 	andeq	lr, r3, lr
    275c:	07760600 	ldrbeq	r0, [r6, -r0, lsl #12]!
    2760:	000000a2 	andeq	r0, r0, r2, lsr #1
    2764:	52440d02 	subpl	r0, r4, #2, 26	; 0x80
    2768:	07770600 	ldrbeq	r0, [r7, -r0, lsl #12]!
    276c:	000000ad 	andeq	r0, r0, sp, lsr #1
    2770:	03ea0e04 	mvneq	r0, #4, 28	; 0x40
    2774:	78060000 	stmdavc	r6, {}	; <UNPREDICTABLE>
    2778:	0000a207 	andeq	sl, r0, r7, lsl #4
    277c:	420d0600 	andmi	r0, sp, #0, 12
    2780:	06005252 			; <UNDEFINED> instruction: 0x06005252
    2784:	00ad0779 	adceq	r0, sp, r9, ror r7
    2788:	0e080000 	cdpeq	0, 0, cr0, cr8, cr0, {0}
    278c:	0000046e 	andeq	r0, r0, lr, ror #8
    2790:	a2077a06 	andge	r7, r7, #24576	; 0x6000
    2794:	0a000000 	beq	279c <startup-0x1fffd864>
    2798:	3152430d 	cmpcc	r2, sp, lsl #6
    279c:	077b0600 	ldrbeq	r0, [fp, -r0, lsl #12]!
    27a0:	000000ad 	andeq	r0, r0, sp, lsr #1
    27a4:	04780e0c 	ldrbteq	r0, [r8], #-3596	; 0xfffff1f4
    27a8:	7c060000 	stcvc	0, cr0, [r6], {-0}
    27ac:	0000a207 	andeq	sl, r0, r7, lsl #4
    27b0:	430d0e00 	movwmi	r0, #56832	; 0xde00
    27b4:	06003252 			; <UNDEFINED> instruction: 0x06003252
    27b8:	00ad077d 	adceq	r0, sp, sp, ror r7
    27bc:	0e100000 	cdpeq	0, 1, cr0, cr0, cr0, {0}
    27c0:	00000414 	andeq	r0, r0, r4, lsl r4
    27c4:	a2077e06 	andge	r7, r7, #6, 28	; 0x60
    27c8:	12000000 	andne	r0, r0, #0
    27cc:	3352430d 	cmpcc	r2, #872415232	; 0x34000000
    27d0:	077f0600 	ldrbeq	r0, [pc, -r0, lsl #12]!
    27d4:	000000ad 	andeq	r0, r0, sp, lsr #1
    27d8:	041e0e14 	ldreq	r0, [lr], #-3604	; 0xfffff1ec
    27dc:	80060000 	andhi	r0, r6, r0
    27e0:	0000a207 	andeq	sl, r0, r7, lsl #4
    27e4:	840e1600 	strhi	r1, [lr], #-1536	; 0xfffffa00
    27e8:	06000016 			; <UNDEFINED> instruction: 0x06000016
    27ec:	00ad0781 	adceq	r0, sp, r1, lsl #15
    27f0:	0e180000 	cdpeq	0, 1, cr0, cr8, cr0, {0}
    27f4:	00000428 	andeq	r0, r0, r8, lsr #8
    27f8:	a2078206 	andge	r8, r7, #1610612736	; 0x60000000
    27fc:	1a000000 	bne	2804 <startup-0x1fffd7fc>
    2800:	16f00b00 	ldrbtne	r0, [r0], r0, lsl #22
    2804:	83060000 	movwhi	r0, #24576	; 0x6000
    2808:	00013e07 	andeq	r3, r1, r7, lsl #28
    280c:	07100f00 	ldreq	r0, [r0, -r0, lsl #30]
    2810:	00025936 	andeq	r5, r2, r6, lsr r9
    2814:	17761000 	ldrbne	r1, [r6, -r0]!
    2818:	38070000 	stmdacc	r7, {}	; <UNPREDICTABLE>
    281c:	000000c2 	andeq	r0, r0, r2, asr #1
    2820:	174a1000 	strbne	r1, [sl, -r0]
    2824:	3e070000 	cdpcc	0, 0, cr0, cr7, cr0, {0}
    2828:	000000a2 	andeq	r0, r0, r2, lsr #1
    282c:	16fe1004 	ldrbtne	r1, [lr], r4
    2830:	41070000 	mrsmi	r0, (UNDEF: 7)
    2834:	000000a2 	andeq	r0, r0, r2, lsr #1
    2838:	18141006 	ldmdane	r4, {r1, r2, ip}
    283c:	44070000 	strmi	r0, [r7], #-0
    2840:	000000a2 	andeq	r0, r0, r2, lsr #1
    2844:	18e81008 	stmiane	r8!, {r3, ip}^
    2848:	4b070000 	blmi	1c2850 <startup-0x1fe3d7b0>
    284c:	000000a2 	andeq	r0, r0, r2, lsr #1
    2850:	18bb100a 	ldmne	fp!, {r1, r3, ip}
    2854:	4e070000 	cdpmi	0, 0, cr0, cr7, cr0, {0}
    2858:	000000a2 	andeq	r0, r0, r2, lsr #1
    285c:	8603000c 	strhi	r0, [r3], -ip
    2860:	07000018 	smladeq	r0, r8, r0, r0
    2864:	00020851 	andeq	r0, r2, r1, asr r8
    2868:	07080f00 	streq	r0, [r8, -r0, lsl #30]
    286c:	00029d57 	andeq	r9, r2, r7, asr sp
    2870:	194f1000 	stmdbne	pc, {ip}^	; <UNPREDICTABLE>
    2874:	5a070000 	bpl	1c287c <startup-0x1fe3d784>
    2878:	000000a2 	andeq	r0, r0, r2, lsr #1
    287c:	1a291000 	bne	a46884 <startup-0x1f5b977c>
    2880:	5d070000 	stcpl	0, cr0, [r7, #-0]
    2884:	000000a2 	andeq	r0, r0, r2, lsr #1
    2888:	16791002 	ldrbtne	r1, [r9], -r2
    288c:	60070000 	andvs	r0, r7, r0
    2890:	000000a2 	andeq	r0, r0, r2, lsr #1
    2894:	17681004 	strbne	r1, [r8, -r4]!
    2898:	63070000 	movwvs	r0, #28672	; 0x7000
    289c:	000000a2 	andeq	r0, r0, r2, lsr #1
    28a0:	0d030006 	stceq	0, cr0, [r3, #-24]	; 0xffffffe8
    28a4:	07000017 	smladeq	r0, r7, r0, r0
    28a8:	00026466 	andeq	r6, r2, r6, ror #8
    28ac:	08100f00 	ldmdaeq	r0, {r8, r9, sl, fp}
    28b0:	0002e130 	andeq	lr, r2, r0, lsr r1
    28b4:	114a1000 	mrsne	r1, (UNDEF: 74)
    28b8:	32080000 	andcc	r0, r8, #0
    28bc:	000000c2 	andeq	r0, r0, r2, asr #1
    28c0:	008c1000 	addeq	r1, ip, r0
    28c4:	33080000 	movwcc	r0, #32768	; 0x8000
    28c8:	000000c2 	andeq	r0, r0, r2, asr #1
    28cc:	05c51004 	strbeq	r1, [r5, #4]
    28d0:	34080000 	strcc	r0, [r8], #-0
    28d4:	000000c2 	andeq	r0, r0, r2, asr #1
    28d8:	053b1008 	ldreq	r1, [fp, #-8]!
    28dc:	35080000 	strcc	r0, [r8, #-0]
    28e0:	000000c2 	andeq	r0, r0, r2, asr #1
    28e4:	5703000c 	strpl	r0, [r3, -ip]
    28e8:	0800000f 	stmdaeq	r0, {r0, r1, r2, r3}
    28ec:	0002a836 	andeq	sl, r2, r6, lsr r8
    28f0:	179d1100 	ldrne	r1, [sp, r0, lsl #2]
    28f4:	ac010000 	stcge	0, cr0, [r1], {-0}
    28f8:	00299605 	eoreq	r9, r9, r5, lsl #12
    28fc:	00004820 	andeq	r4, r0, r0, lsr #16
    2900:	3f9c0100 	svccc	0x009c0100
    2904:	12000003 	andne	r0, r0, #3
    2908:	000018b4 			; <UNDEFINED> instruction: 0x000018b4
    290c:	3f05ac01 	svccc	0x0005ac01
    2910:	02000003 	andeq	r0, r0, #3
    2914:	a6126c91 			; <UNDEFINED> instruction: 0xa6126c91
    2918:	01000019 	tsteq	r0, r9, lsl r0
    291c:	00a205ac 	adceq	r0, r2, ip, lsr #11
    2920:	91020000 	mrsls	r0, (UNDEF: 2)
    2924:	1901136a 	stmdbne	r1, {r1, r3, r5, r6, r8, r9, ip}
    2928:	ae010000 	cdpge	0, 0, cr0, cr1, cr0, {0}
    292c:	0000a205 	andeq	sl, r0, r5, lsl #4
    2930:	76910200 	ldrvc	r0, [r1], r0, lsl #4
    2934:	001a3413 	andseq	r3, sl, r3, lsl r4
    2938:	05ae0100 	streq	r0, [lr, #256]!	; 0x100
    293c:	000000a2 	andeq	r0, r0, r2, lsr #1
    2940:	00749102 	rsbseq	r9, r4, r2, lsl #2
    2944:	01fc0414 	mvnseq	r0, r4, lsl r4
    2948:	1f150000 	svcne	0x00150000
    294c:	01000019 	tsteq	r0, r9, lsl r0
    2950:	010b0562 	tsteq	fp, r2, ror #10
    2954:	28cc0000 	stmiacs	ip, {}^	; <UNPREDICTABLE>
    2958:	00ca2000 	sbceq	r2, sl, r0
    295c:	9c010000 	stcls	0, cr0, [r1], {-0}
    2960:	000003ba 			; <UNDEFINED> instruction: 0x000003ba
    2964:	0018b412 	andseq	fp, r8, r2, lsl r4
    2968:	05620100 	strbeq	r0, [r2, #-256]!	; 0xffffff00
    296c:	0000033f 	andeq	r0, r0, pc, lsr r3
    2970:	12649102 	rsbne	r9, r4, #-2147483648	; 0x80000000
    2974:	000019a6 	andeq	r1, r0, r6, lsr #19
    2978:	a2056201 	andge	r6, r5, #268435456	; 0x10000000
    297c:	02000000 	andeq	r0, r0, #0
    2980:	01136291 			; <UNDEFINED> instruction: 0x01136291
    2984:	01000019 	tsteq	r0, r9, lsl r0
    2988:	00c20564 	sbceq	r0, r2, r4, ror #10
    298c:	91020000 	mrsls	r0, (UNDEF: 2)
    2990:	1a34136c 	bne	d07748 <startup-0x1f2f88b8>
    2994:	64010000 	strvs	r0, [r1], #-0
    2998:	0000c205 	andeq	ip, r0, r5, lsl #4
    299c:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    29a0:	001acc13 	andseq	ip, sl, r3, lsl ip
    29a4:	05640100 	strbeq	r0, [r4, #-256]!	; 0xffffff00
    29a8:	000000c2 	andeq	r0, r0, r2, asr #1
    29ac:	13689102 	cmnne	r8, #-2147483648	; 0x80000000
    29b0:	00000fd0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    29b4:	0b056501 	bleq	15bdc0 <startup-0x1fea4240>
    29b8:	02000001 	andeq	r0, r0, #1
    29bc:	11007391 			; <UNDEFINED> instruction: 0x11007391
    29c0:	00001842 	andeq	r1, r0, r2, asr #16
    29c4:	aa054001 	bge	1529d0 <startup-0x1fead630>
    29c8:	22200028 	eorcs	r0, r0, #40	; 0x28
    29cc:	01000000 	mrseq	r0, (UNDEF: 0)
    29d0:	0003ef9c 	muleq	r3, ip, pc	; <UNPREDICTABLE>
    29d4:	18b41200 	ldmne	r4!, {r9, ip}
    29d8:	40010000 	andmi	r0, r1, r0
    29dc:	00033f05 	andeq	r3, r3, r5, lsl #30
    29e0:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    29e4:	0017e612 	andseq	lr, r7, r2, lsl r6
    29e8:	05400100 	strbeq	r0, [r0, #-256]	; 0xffffff00
    29ec:	000000a2 	andeq	r0, r0, r2, lsr #1
    29f0:	00729102 	rsbseq	r9, r2, r2, lsl #2
    29f4:	00199215 	andseq	r9, r9, r5, lsl r2
    29f8:	050f0100 	streq	r0, [pc, #-256]	; 2900 <startup-0x1fffd700>
    29fc:	000000ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    2a00:	20002862 	andcs	r2, r0, r2, ror #16
    2a04:	00000048 	andeq	r0, r0, r8, asr #32
    2a08:	04379c01 	ldrteq	r9, [r7], #-3073	; 0xfffff3ff
    2a0c:	b4120000 	ldrlt	r0, [r2], #-0
    2a10:	01000018 	tsteq	r0, r8, lsl r0
    2a14:	033f050f 	teqeq	pc, #62914560	; 0x3c00000
    2a18:	91020000 	mrsls	r0, (UNDEF: 2)
    2a1c:	17e6126c 	strbne	r1, [r6, ip, ror #4]!
    2a20:	0f010000 	svceq	0x00010000
    2a24:	0000a205 	andeq	sl, r0, r5, lsl #4
    2a28:	6a910200 	bvs	fe443230 <GPIO_Ports+0xde4406e0>
    2a2c:	000fd013 	andeq	sp, pc, r3, lsl r0	; <UNPREDICTABLE>
    2a30:	05110100 	ldreq	r0, [r1, #-256]	; 0xffffff00
    2a34:	000000ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    2a38:	00779102 	rsbseq	r9, r7, r2, lsl #2
    2a3c:	00189811 	andseq	r9, r8, r1, lsl r8
    2a40:	04cf0100 	strbeq	r0, [pc], #256	; 2a48 <startup-0x1fffd5b8>
    2a44:	200027c8 	andcs	r2, r0, r8, asr #15
    2a48:	0000009a 	muleq	r0, sl, r0
    2a4c:	04b79c01 	ldrteq	r9, [r7], #3073	; 0xc01
    2a50:	b4120000 	ldrlt	r0, [r2], #-0
    2a54:	01000018 	tsteq	r0, r8, lsl r0
    2a58:	033f04cf 	teqeq	pc, #-822083584	; 0xcf000000
    2a5c:	91020000 	mrsls	r0, (UNDEF: 2)
    2a60:	19a61264 	stmibne	r6!, {r2, r5, r6, r9, ip}
    2a64:	cf010000 	svcgt	0x00010000
    2a68:	0000a204 	andeq	sl, r0, r4, lsl #4
    2a6c:	62910200 	addsvs	r0, r1, #0, 4
    2a70:	000b2712 	andeq	r2, fp, r2, lsl r7
    2a74:	04cf0100 	strbeq	r0, [pc], #256	; 2a7c <startup-0x1fffd584>
    2a78:	00000132 	andeq	r0, r0, r2, lsr r1
    2a7c:	13619102 	cmnne	r1, #-2147483648	; 0x80000000
    2a80:	00001acc 	andeq	r1, r0, ip, asr #21
    2a84:	c204d101 	andgt	sp, r4, #1073741824	; 0x40000000
    2a88:	02000000 	andeq	r0, r0, #0
    2a8c:	02137091 	andseq	r7, r3, #145	; 0x91
    2a90:	01000019 	tsteq	r0, r9, lsl r0
    2a94:	00c204d1 	ldrdeq	r0, [r2], #65	; 0x41
    2a98:	91020000 	mrsls	r0, (UNDEF: 2)
    2a9c:	1a34136c 	bne	d07854 <startup-0x1f2f87ac>
    2aa0:	d1010000 	mrsle	r0, (UNDEF: 1)
    2aa4:	0000c204 	andeq	ip, r0, r4, lsl #4
    2aa8:	68910200 	ldmvs	r1, {r9}
    2aac:	00183713 	andseq	r3, r8, r3, lsl r7
    2ab0:	04d20100 	ldrbeq	r0, [r2], #256	; 0x100
    2ab4:	000000c2 	andeq	r0, r0, r2, asr #1
    2ab8:	00749102 	rsbseq	r9, r4, r2, lsl #2
    2abc:	00175b11 	andseq	r5, r7, r1, lsl fp
    2ac0:	044b0100 	strbeq	r0, [fp], #-256	; 0xffffff00
    2ac4:	20002776 	andcs	r2, r0, r6, ror r7
    2ac8:	00000052 	andeq	r0, r0, r2, asr r0
    2acc:	04fb9c01 	ldrbteq	r9, [fp], #3073	; 0xc01
    2ad0:	b4120000 	ldrlt	r0, [r2], #-0
    2ad4:	01000018 	tsteq	r0, r8, lsl r0
    2ad8:	033f044b 	teqeq	pc, #1258291200	; 0x4b000000
    2adc:	91020000 	mrsls	r0, (UNDEF: 2)
    2ae0:	18a71274 	stmiane	r7!, {r2, r4, r5, r6, r9, ip}
    2ae4:	4b010000 	blmi	42aec <startup-0x1ffbd514>
    2ae8:	0000a204 	andeq	sl, r0, r4, lsl #4
    2aec:	72910200 	addsvc	r0, r1, #0, 4
    2af0:	000b2712 	andeq	r2, fp, r2, lsl r7
    2af4:	044b0100 	strbeq	r0, [fp], #-256	; 0xffffff00
    2af8:	00000132 	andeq	r0, r0, r2, lsr r1
    2afc:	00719102 	rsbseq	r9, r1, r2, lsl #2
    2b00:	00195b11 	andseq	r5, r9, r1, lsl fp
    2b04:	041d0100 	ldreq	r0, [sp], #-256	; 0xffffff00
    2b08:	20002736 	andcs	r2, r0, r6, lsr r7
    2b0c:	00000040 	andeq	r0, r0, r0, asr #32
    2b10:	05309c01 	ldreq	r9, [r0, #-3073]!	; 0xfffff3ff
    2b14:	b4120000 	ldrlt	r0, [r2], #-0
    2b18:	01000018 	tsteq	r0, r8, lsl r0
    2b1c:	033f041d 	teqeq	pc, #486539264	; 0x1d000000
    2b20:	91020000 	mrsls	r0, (UNDEF: 2)
    2b24:	0b271274 	bleq	9c74fc <startup-0x1f638b04>
    2b28:	1d010000 	stcne	0, cr0, [r1, #-0]
    2b2c:	00013204 	andeq	r3, r1, r4, lsl #4
    2b30:	73910200 	orrsvc	r0, r1, #0, 4
    2b34:	193e1100 	ldmdbne	lr!, {r8, ip}
    2b38:	0b010000 	bleq	42b40 <startup-0x1ffbd4c0>
    2b3c:	0026fe04 	eoreq	pc, r6, r4, lsl #28
    2b40:	00003820 	andeq	r3, r0, r0, lsr #16
    2b44:	659c0100 	ldrvs	r0, [ip, #256]	; 0x100
    2b48:	12000005 	andne	r0, r0, #5
    2b4c:	000018b4 			; <UNDEFINED> instruction: 0x000018b4
    2b50:	3f040b01 	svccc	0x00040b01
    2b54:	02000003 	andeq	r0, r0, #3
    2b58:	85127491 	ldrhi	r7, [r2, #-1169]	; 0xfffffb6f
    2b5c:	01000017 	tsteq	r0, r7, lsl r0
    2b60:	00a2040b 	adceq	r0, r2, fp, lsl #8
    2b64:	91020000 	mrsls	r0, (UNDEF: 2)
    2b68:	7b110072 	blvc	442d38 <startup-0x1fbbd2c8>
    2b6c:	01000019 	tsteq	r0, r9, lsl r0
    2b70:	26be03c4 	ldrtcs	r0, [lr], r4, asr #7
    2b74:	00402000 	subeq	r2, r0, r0
    2b78:	9c010000 	stcls	0, cr0, [r1], {-0}
    2b7c:	0000059a 	muleq	r0, sl, r5
    2b80:	0018b412 	andseq	fp, r8, r2, lsl r4
    2b84:	03c40100 	biceq	r0, r4, #0, 2
    2b88:	0000033f 	andeq	r0, r0, pc, lsr r3
    2b8c:	12749102 	rsbsne	r9, r4, #-2147483648	; 0x80000000
    2b90:	00000b27 	andeq	r0, r0, r7, lsr #22
    2b94:	3203c401 	andcc	ip, r3, #16777216	; 0x1000000
    2b98:	02000001 	andeq	r0, r0, #1
    2b9c:	11007391 			; <UNDEFINED> instruction: 0x11007391
    2ba0:	000018d5 	ldrdeq	r1, [r0], -r5
    2ba4:	7e03ab01 	vmlavc.f64	d10, d3, d1
    2ba8:	40200026 	eormi	r0, r0, r6, lsr #32
    2bac:	01000000 	mrseq	r0, (UNDEF: 0)
    2bb0:	0005cf9c 	muleq	r5, ip, pc	; <UNPREDICTABLE>
    2bb4:	18b41200 	ldmne	r4!, {r9, ip}
    2bb8:	ab010000 	blge	42bc0 <startup-0x1ffbd440>
    2bbc:	00033f03 	andeq	r3, r3, r3, lsl #30
    2bc0:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    2bc4:	000b2712 	andeq	r2, fp, r2, lsl r7
    2bc8:	03ab0100 			; <UNDEFINED> instruction: 0x03ab0100
    2bcc:	00000132 	andeq	r0, r0, r2, lsr r1
    2bd0:	00739102 	rsbseq	r9, r3, r2, lsl #2
    2bd4:	00186311 	andseq	r6, r8, r1, lsl r3
    2bd8:	03980100 	orrseq	r0, r8, #0, 2
    2bdc:	20002640 	andcs	r2, r0, r0, asr #12
    2be0:	0000003e 	andeq	r0, r0, lr, lsr r0
    2be4:	06049c01 	streq	r9, [r4], -r1, lsl #24
    2be8:	b4120000 	ldrlt	r0, [r2], #-0
    2bec:	01000018 	tsteq	r0, r8, lsl r0
    2bf0:	033f0398 	teqeq	pc, #152, 6	; 0x60000002
    2bf4:	91020000 	mrsls	r0, (UNDEF: 2)
    2bf8:	17b51274 			; <UNDEFINED> instruction: 0x17b51274
    2bfc:	98010000 	stmdals	r1, {}	; <UNPREDICTABLE>
    2c00:	00009703 	andeq	r9, r0, r3, lsl #14
    2c04:	73910200 	orrsvc	r0, r1, #0, 4
    2c08:	19f41100 	ldmibne	r4!, {r8, ip}^
    2c0c:	44010000 	strmi	r0, [r1], #-0
    2c10:	00260003 	eoreq	r0, r6, r3
    2c14:	00004020 	andeq	r4, r0, r0, lsr #32
    2c18:	399c0100 	ldmibcc	ip, {r8}
    2c1c:	12000006 	andne	r0, r0, #6
    2c20:	000018b4 			; <UNDEFINED> instruction: 0x000018b4
    2c24:	3f034401 	svccc	0x00034401
    2c28:	02000003 	andeq	r0, r0, #3
    2c2c:	27127491 			; <UNDEFINED> instruction: 0x27127491
    2c30:	0100000b 	tsteq	r0, fp
    2c34:	01320344 	teqeq	r2, r4, asr #6
    2c38:	91020000 	mrsls	r0, (UNDEF: 2)
    2c3c:	76110073 			; <UNDEFINED> instruction: 0x76110073
    2c40:	01000018 	tsteq	r0, r8, lsl r0
    2c44:	25e0030f 	strbcs	r0, [r0, #783]!	; 0x30f
    2c48:	00202000 	eoreq	r2, r0, r0
    2c4c:	9c010000 	stcls	0, cr0, [r1], {-0}
    2c50:	0000065f 	andeq	r0, r0, pc, asr r6
    2c54:	0018b412 	andseq	fp, r8, r2, lsl r4
    2c58:	030f0100 	movweq	r0, #61696	; 0xf100
    2c5c:	0000033f 	andeq	r0, r0, pc, lsr r3
    2c60:	00749102 	rsbseq	r9, r4, r2, lsl #2
    2c64:	00193111 	andseq	r3, r9, r1, lsl r1
    2c68:	02f70100 	rscseq	r0, r7, #0, 2
    2c6c:	20002598 	mulcs	r0, r8, r5
    2c70:	00000048 	andeq	r0, r0, r8, asr #32
    2c74:	06949c01 	ldreq	r9, [r4], r1, lsl #24
    2c78:	b4120000 	ldrlt	r0, [r2], #-0
    2c7c:	01000018 	tsteq	r0, r8, lsl r0
    2c80:	033f02f7 	teqeq	pc, #1879048207	; 0x7000000f
    2c84:	91020000 	mrsls	r0, (UNDEF: 2)
    2c88:	0b271274 	bleq	9c7660 <startup-0x1f6389a0>
    2c8c:	f7010000 			; <UNDEFINED> instruction: 0xf7010000
    2c90:	00013202 	andeq	r3, r1, r2, lsl #4
    2c94:	73910200 	orrsvc	r0, r1, #0, 4
    2c98:	17c51100 	strbne	r1, [r5, r0, lsl #2]
    2c9c:	e5010000 	str	r0, [r1, #-0]
    2ca0:	00256002 	eoreq	r6, r5, r2
    2ca4:	00003820 	andeq	r3, r0, r0, lsr #16
    2ca8:	c99c0100 	ldmibgt	ip, {r8}
    2cac:	12000006 	andne	r0, r0, #6
    2cb0:	000018b4 			; <UNDEFINED> instruction: 0x000018b4
    2cb4:	3f02e501 	svccc	0x0002e501
    2cb8:	02000003 	andeq	r0, r0, #3
    2cbc:	bf127491 	svclt	0x00127491
    2cc0:	01000016 	tsteq	r0, r6, lsl r0
    2cc4:	00a202e5 	adceq	r0, r2, r5, ror #5
    2cc8:	91020000 	mrsls	r0, (UNDEF: 2)
    2ccc:	e1110072 	tst	r1, r2, ror r0
    2cd0:	01000019 	tsteq	r0, r9, lsl r0
    2cd4:	252202a0 	strcs	r0, [r2, #-672]!	; 0xfffffd60
    2cd8:	003e2000 	eorseq	r2, lr, r0
    2cdc:	9c010000 	stcls	0, cr0, [r1], {-0}
    2ce0:	000006fe 	strdeq	r0, [r0], -lr
    2ce4:	0018b412 	andseq	fp, r8, r2, lsl r4
    2ce8:	02a00100 	adceq	r0, r0, #0, 2
    2cec:	0000033f 	andeq	r0, r0, pc, lsr r3
    2cf0:	12749102 	rsbsne	r9, r4, #-2147483648	; 0x80000000
    2cf4:	0000173d 	andeq	r1, r0, sp, lsr r7
    2cf8:	a202a001 	andge	sl, r2, #1
    2cfc:	02000000 	andeq	r0, r0, #0
    2d00:	11007291 			; <UNDEFINED> instruction: 0x11007291
    2d04:	00001689 	andeq	r1, r0, r9, lsl #13
    2d08:	e2028501 	and	r8, r2, #4194304	; 0x400000
    2d0c:	40200024 	eormi	r0, r0, r4, lsr #32
    2d10:	01000000 	mrseq	r0, (UNDEF: 0)
    2d14:	0007339c 	muleq	r7, ip, r3
    2d18:	18b41200 	ldmne	r4!, {r9, ip}
    2d1c:	85010000 	strhi	r0, [r1, #-0]
    2d20:	00033f02 	andeq	r3, r3, r2, lsl #30
    2d24:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    2d28:	000b2712 	andeq	r2, fp, r2, lsl r7
    2d2c:	02850100 	addeq	r0, r5, #0, 2
    2d30:	00000132 	andeq	r0, r0, r2, lsr r1
    2d34:	00739102 	rsbseq	r9, r3, r2, lsl #2
    2d38:	00185211 	andseq	r5, r8, r1, lsl r2
    2d3c:	02710100 	rsbseq	r0, r1, #0, 2
    2d40:	200024a8 	andcs	r2, r0, r8, lsr #9
    2d44:	0000003a 	andeq	r0, r0, sl, lsr r0
    2d48:	07689c01 	strbeq	r9, [r8, -r1, lsl #24]!
    2d4c:	b4120000 	ldrlt	r0, [r2], #-0
    2d50:	01000018 	tsteq	r0, r8, lsl r0
    2d54:	033f0271 	teqeq	pc, #268435463	; 0x10000007
    2d58:	91020000 	mrsls	r0, (UNDEF: 2)
    2d5c:	18f31274 	ldmne	r3!, {r2, r4, r5, r6, r9, ip}^
    2d60:	71010000 	mrsvc	r0, (UNDEF: 1)
    2d64:	00009702 	andeq	r9, r0, r2, lsl #14
    2d68:	73910200 	orrsvc	r0, r1, #0, 4
    2d6c:	1aba1500 	bne	fee88174 <GPIO_Ports+0xdee85624>
    2d70:	3d010000 	stccc	0, cr0, [r1, #-0]
    2d74:	0000a202 	andeq	sl, r0, r2, lsl #4
    2d78:	00248c00 	eoreq	r8, r4, r0, lsl #24
    2d7c:	00001c20 	andeq	r1, r0, r0, lsr #24
    2d80:	929c0100 	addsls	r0, ip, #0, 2
    2d84:	12000007 	andne	r0, r0, #7
    2d88:	000018b4 			; <UNDEFINED> instruction: 0x000018b4
    2d8c:	3f023d01 	svccc	0x00023d01
    2d90:	02000003 	andeq	r0, r0, #3
    2d94:	11007491 			; <UNDEFINED> instruction: 0x11007491
    2d98:	0000172e 	andeq	r1, r0, lr, lsr #14
    2d9c:	68022d01 	stmdavs	r2, {r0, r8, sl, fp, sp}
    2da0:	24200024 	strtcs	r0, [r0], #-36	; 0xffffffdc
    2da4:	01000000 	mrseq	r0, (UNDEF: 0)
    2da8:	0007c79c 	muleq	r7, ip, r7
    2dac:	18b41200 	ldmne	r4!, {r9, ip}
    2db0:	2d010000 	stccs	0, cr0, [r1, #-0]
    2db4:	00033f02 	andeq	r3, r3, r2, lsl #30
    2db8:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    2dbc:	00173812 	andseq	r3, r7, r2, lsl r8
    2dc0:	022d0100 	eoreq	r0, sp, #0, 2
    2dc4:	000000a2 	andeq	r0, r0, r2, lsr #1
    2dc8:	00729102 	rsbseq	r9, r2, r2, lsl #2
    2dcc:	0016da11 	andseq	sp, r6, r1, lsl sl
    2dd0:	01f40100 	mvnseq	r0, r0, lsl #2
    2dd4:	20002420 	andcs	r2, r0, r0, lsr #8
    2dd8:	00000048 	andeq	r0, r0, r8, asr #32
    2ddc:	07fc9c01 	ldrbeq	r9, [ip, r1, lsl #24]!
    2de0:	b4120000 	ldrlt	r0, [r2], #-0
    2de4:	01000018 	tsteq	r0, r8, lsl r0
    2de8:	033f01f4 	teqeq	pc, #244, 2	; 0x3d
    2dec:	91020000 	mrsls	r0, (UNDEF: 2)
    2df0:	0b271274 	bleq	9c77c8 <startup-0x1f638838>
    2df4:	f4010000 	vst4.8	{d0-d3}, [r1], r0
    2df8:	00013201 	andeq	r3, r1, r1, lsl #4
    2dfc:	73910200 	orrsvc	r0, r1, #0, 4
    2e00:	19081100 	stmdbne	r8, {r8, ip}
    2e04:	da010000 	ble	42e0c <startup-0x1ffbd1f4>
    2e08:	0023da01 	eoreq	sp, r3, r1, lsl #20
    2e0c:	00004620 	andeq	r4, r0, r0, lsr #12
    2e10:	319c0100 	orrscc	r0, ip, r0, lsl #2
    2e14:	12000008 	andne	r0, r0, #8
    2e18:	000018b4 			; <UNDEFINED> instruction: 0x000018b4
    2e1c:	3f01da01 	svccc	0x0001da01
    2e20:	02000003 	andeq	r0, r0, #3
    2e24:	27127491 			; <UNDEFINED> instruction: 0x27127491
    2e28:	0100000b 	tsteq	r0, fp
    2e2c:	013201da 	teqeq	r2, sl	; <illegal shifter operand>
    2e30:	91020000 	mrsls	r0, (UNDEF: 2)
    2e34:	a1110073 	tstge	r1, r3, ror r0
    2e38:	01000016 	tsteq	r0, r6, lsl r0
    2e3c:	23a001c5 	movcs	r0, #1073741873	; 0x40000031
    2e40:	003a2000 	eorseq	r2, sl, r0
    2e44:	9c010000 	stcls	0, cr0, [r1], {-0}
    2e48:	00000866 	andeq	r0, r0, r6, ror #16
    2e4c:	0018b412 	andseq	fp, r8, r2, lsl r4
    2e50:	01c50100 	biceq	r0, r5, r0, lsl #2
    2e54:	0000033f 	andeq	r0, r0, pc, lsr r3
    2e58:	12749102 	rsbsne	r9, r4, #-2147483648	; 0x80000000
    2e5c:	00001a19 	andeq	r1, r0, r9, lsl sl
    2e60:	9701c501 	strls	ip, [r1, -r1, lsl #10]
    2e64:	02000000 	andeq	r0, r0, #0
    2e68:	11007391 			; <UNDEFINED> instruction: 0x11007391
    2e6c:	00001724 	andeq	r1, r0, r4, lsr #14
    2e70:	5801ab01 	stmdapl	r1, {r0, r8, r9, fp, sp, pc}
    2e74:	48200023 	stmdami	r0!, {r0, r1, r5}
    2e78:	01000000 	mrseq	r0, (UNDEF: 0)
    2e7c:	00089b9c 	muleq	r8, ip, fp
    2e80:	18b41200 	ldmne	r4!, {r9, ip}
    2e84:	ab010000 	blge	42e8c <startup-0x1ffbd174>
    2e88:	00033f01 	andeq	r3, r3, r1, lsl #30
    2e8c:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    2e90:	000b2712 	andeq	r2, fp, r2, lsl r7
    2e94:	01ab0100 			; <UNDEFINED> instruction: 0x01ab0100
    2e98:	00000132 	andeq	r0, r0, r2, lsr r1
    2e9c:	00739102 	rsbseq	r9, r3, r2, lsl #2
    2ea0:	00182111 	andseq	r2, r8, r1, lsl r1
    2ea4:	019a0100 	orrseq	r0, sl, r0, lsl #2
    2ea8:	20002330 	andcs	r2, r0, r0, lsr r3
    2eac:	00000028 	andeq	r0, r0, r8, lsr #32
    2eb0:	08c19c01 	stmiaeq	r1, {r0, sl, fp, ip, pc}^
    2eb4:	fe120000 	cdp2	0, 1, cr0, cr2, cr0, {0}
    2eb8:	01000017 	tsteq	r0, r7, lsl r0
    2ebc:	08c1019a 	stmiaeq	r1, {r1, r3, r4, r7, r8}^
    2ec0:	91020000 	mrsls	r0, (UNDEF: 2)
    2ec4:	04140074 	ldreq	r0, [r4], #-116	; 0xffffff8c
    2ec8:	0000029d 	muleq	r0, sp, r2
    2ecc:	0019d111 	andseq	sp, r9, r1, lsl r1
    2ed0:	017b0100 	cmneq	fp, r0, lsl #2
    2ed4:	200022da 	ldrdcs	r2, [r0], -sl
    2ed8:	00000056 	andeq	r0, r0, r6, asr r0
    2edc:	090b9c01 	stmdbeq	fp, {r0, sl, fp, ip, pc}
    2ee0:	b4120000 	ldrlt	r0, [r2], #-0
    2ee4:	01000018 	tsteq	r0, r8, lsl r0
    2ee8:	033f017b 	teqeq	pc, #-1073741794	; 0xc000001e
    2eec:	91020000 	mrsls	r0, (UNDEF: 2)
    2ef0:	17fe126c 	ldrbne	r1, [lr, ip, ror #4]!
    2ef4:	7b010000 	blvc	42efc <startup-0x1ffbd104>
    2ef8:	0008c101 	andeq	ip, r8, r1, lsl #2
    2efc:	68910200 	ldmvs	r1, {r9}
    2f00:	000e6713 	andeq	r6, lr, r3, lsl r7
    2f04:	017d0100 	cmneq	sp, r0, lsl #2
    2f08:	000000c2 	andeq	r0, r0, r2, asr #1
    2f0c:	00749102 	rsbseq	r9, r4, r2, lsl #2
    2f10:	001a0811 	andseq	r0, sl, r1, lsl r8
    2f14:	01670100 	cmneq	r7, r0, lsl #2
    2f18:	200022a4 	andcs	r2, r0, r4, lsr #5
    2f1c:	00000036 	andeq	r0, r0, r6, lsr r0
    2f20:	09319c01 	ldmdbeq	r1!, {r0, sl, fp, ip, pc}
    2f24:	af120000 	svcge	0x00120000
    2f28:	01000019 	tsteq	r0, r9, lsl r0
    2f2c:	09310167 	ldmdbeq	r1!, {r0, r1, r2, r5, r6, r8}
    2f30:	91020000 	mrsls	r0, (UNDEF: 2)
    2f34:	04140074 	ldreq	r0, [r4], #-116	; 0xffffff8c
    2f38:	00000259 	andeq	r0, r0, r9, asr r2
    2f3c:	0016b416 	andseq	fp, r6, r6, lsl r4
    2f40:	10f60100 	rscsne	r0, r6, r0, lsl #2
    2f44:	94200021 	strtls	r0, [r0], #-33	; 0xffffffdf
    2f48:	01000001 	tsteq	r0, r1
    2f4c:	0009af9c 	muleq	r9, ip, pc	; <UNPREDICTABLE>
    2f50:	18b41700 	ldmne	r4!, {r8, r9, sl, ip}
    2f54:	f6010000 			; <UNDEFINED> instruction: 0xf6010000
    2f58:	0000033f 	andeq	r0, r0, pc, lsr r3
    2f5c:	17549102 	ldrbne	r9, [r4, -r2, lsl #2]
    2f60:	000019af 	andeq	r1, r0, pc, lsr #19
    2f64:	0931f601 	ldmdbeq	r1!, {r0, r9, sl, ip, sp, lr, pc}
    2f68:	91020000 	mrsls	r0, (UNDEF: 2)
    2f6c:	0e671850 	mcreq	8, 3, r1, cr7, cr0, {2}
    2f70:	f8010000 			; <UNDEFINED> instruction: 0xf8010000
    2f74:	000000c2 	andeq	r0, r0, r2, asr #1
    2f78:	18749102 	ldmdane	r4!, {r1, r8, ip, pc}^
    2f7c:	00001794 	muleq	r0, r4, r7
    2f80:	00c2f801 	sbceq	pc, r2, r1, lsl #16
    2f84:	91020000 	mrsls	r0, (UNDEF: 2)
    2f88:	166a1870 			; <UNDEFINED> instruction: 0x166a1870
    2f8c:	f9010000 			; <UNDEFINED> instruction: 0xf9010000
    2f90:	000000c2 	andeq	r0, r0, r2, asr #1
    2f94:	186c9102 	stmdane	ip!, {r1, r8, ip, pc}^
    2f98:	00001969 	andeq	r1, r0, r9, ror #18
    2f9c:	00c2fa01 	sbceq	pc, r2, r1, lsl #20
    2fa0:	91020000 	mrsls	r0, (UNDEF: 2)
    2fa4:	19c01868 	stmibne	r0, {r3, r5, r6, fp, ip}^
    2fa8:	fb010000 	blx	42fb2 <startup-0x1ffbd04e>
    2fac:	000002e1 	andeq	r0, r0, r1, ror #5
    2fb0:	00589102 	subseq	r9, r8, r2, lsl #2
    2fb4:	0017f119 	andseq	pc, r7, r9, lsl r1	; <UNPREDICTABLE>
    2fb8:	e0bb0100 	adcs	r0, fp, r0, lsl #2
    2fbc:	3020001f 	eorcc	r0, r0, pc, lsl r0
    2fc0:	01000001 	tsteq	r0, r1
    2fc4:	18b4179c 	ldmne	r4!, {r2, r3, r4, r7, r8, r9, sl, ip}
    2fc8:	bb010000 	bllt	42fd0 <startup-0x1ffbd030>
    2fcc:	0000033f 	andeq	r0, r0, pc, lsr r3
    2fd0:	00749102 	rsbseq	r9, r4, r2, lsl #2
	...

Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
   0:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
   4:	030b130e 	movweq	r1, #45838	; 0xb30e
   8:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xfffff4f2
   c:	10011117 	andne	r1, r1, r7, lsl r1
  10:	02000017 	andeq	r0, r0, #23
  14:	0e030104 	adfeqs	f0, f3, f4
  18:	0b0b0b3e 	bleq	2c2d18 <startup-0x1fd3d2e8>
  1c:	0b3a1349 	bleq	e84d48 <startup-0x1f17b2b8>
  20:	13010b3b 	movwne	r0, #6971	; 0x1b3b
  24:	28030000 	stmdacs	r3, {}	; <UNPREDICTABLE>
  28:	1c0e0300 	stcne	3, cr0, [lr], {-0}
  2c:	0400000d 	streq	r0, [r0], #-13
  30:	0e030028 	cdpeq	0, 0, cr0, cr3, cr8, {1}
  34:	00000b1c 	andeq	r0, r0, ip, lsl fp
  38:	0b002405 	bleq	9054 <startup-0x1fff6fac>
  3c:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
  40:	0600000e 	streq	r0, [r0], -lr
  44:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
  48:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
  4c:	00001349 	andeq	r1, r0, r9, asr #6
  50:	03001607 	movweq	r1, #1543	; 0x607
  54:	3b0b3a0e 	blcc	2ce894 <startup-0x1fd3176c>
  58:	0013490b 	andseq	r4, r3, fp, lsl #18
  5c:	00240800 	eoreq	r0, r4, r0, lsl #16
  60:	0b3e0b0b 	bleq	f82c94 <startup-0x1f07d36c>
  64:	00000803 	andeq	r0, r0, r3, lsl #16
  68:	49003509 	stmdbmi	r0, {r0, r3, r8, sl, ip, sp}
  6c:	0a000013 	beq	c0 <startup-0x1fffff40>
  70:	13490026 	movtne	r0, #36902	; 0x9026
  74:	130b0000 	movwne	r0, #45056	; 0xb000
  78:	3a050b01 	bcc	142c84 <startup-0x1febd37c>
  7c:	01053b0b 	tsteq	r5, fp, lsl #22
  80:	0c000013 	stceq	0, cr0, [r0], {19}
  84:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
  88:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
  8c:	0b381349 	bleq	e04db8 <startup-0x1f1fb248>
  90:	0d0d0000 	stceq	0, cr0, [sp, #-0]
  94:	3a0e0300 	bcc	380c9c <startup-0x1fc7f364>
  98:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
  9c:	00053813 	andeq	r3, r5, r3, lsl r8
  a0:	000d0e00 	andeq	r0, sp, r0, lsl #28
  a4:	0b3a0803 	bleq	e820b8 <startup-0x1f17df48>
  a8:	1349053b 	movtne	r0, #38203	; 0x953b
  ac:	00000538 	andeq	r0, r0, r8, lsr r5
  b0:	4901010f 	stmdbmi	r1, {r0, r1, r2, r3, r8}
  b4:	00130113 	andseq	r0, r3, r3, lsl r1
  b8:	00211000 	eoreq	r1, r1, r0
  bc:	0b2f1349 	bleq	bc4de8 <startup-0x1f43b218>
  c0:	21110000 	tstcs	r1, r0
  c4:	2f134900 	svccs	0x00134900
  c8:	12000005 	andne	r0, r0, #5
  cc:	0b0b0113 	bleq	2c0520 <startup-0x1fd3fae0>
  d0:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
  d4:	00001301 	andeq	r1, r0, r1, lsl #6
  d8:	03000d13 	movweq	r0, #3347	; 0xd13
  dc:	3b0b3a08 	blcc	2ce904 <startup-0x1fd316fc>
  e0:	38134905 	ldmdacc	r3, {r0, r2, r8, fp, lr}
  e4:	1400000b 	strne	r0, [r0], #-11
  e8:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
  ec:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
  f0:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
  f4:	0000193c 	andeq	r1, r0, ip, lsr r9
  f8:	03003415 	movweq	r3, #1045	; 0x415
  fc:	3b0b3a0e 	blcc	2ce93c <startup-0x1fd316c4>
 100:	3f13490b 	svccc	0x0013490b
 104:	00193c19 	andseq	r3, r9, r9, lsl ip
 108:	01041600 	tsteq	r4, r0, lsl #12
 10c:	0b0b0b3e 	bleq	2c2e0c <startup-0x1fd3d1f4>
 110:	0b3a1349 	bleq	e84e3c <startup-0x1f17b1c4>
 114:	1301053b 	movwne	r0, #5435	; 0x153b
 118:	28170000 	ldmdacs	r7, {}	; <UNPREDICTABLE>
 11c:	1c080300 	stcne	3, cr0, [r8], {-0}
 120:	1800000b 	stmdane	r0, {r0, r1, r3}
 124:	0b0b0113 	bleq	2c0578 <startup-0x1fd3fa88>
 128:	0b3b0b3a 	bleq	ec2e18 <startup-0x1f13d1e8>
 12c:	00001301 	andeq	r1, r0, r1, lsl #6
 130:	03000d19 	movweq	r0, #3353	; 0xd19
 134:	3b0b3a0e 	blcc	2ce974 <startup-0x1fd3168c>
 138:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
 13c:	1a00000b 	bne	170 <startup-0x1ffffe90>
 140:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 144:	0b3b0b3a 	bleq	ec2e34 <startup-0x1f13d1cc>
 148:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 14c:	041b0000 	ldreq	r0, [fp], #-0
 150:	0b0b3e01 	bleq	2cf95c <startup-0x1fd306a4>
 154:	3a13490b 	bcc	4d2588 <startup-0x1fb2da78>
 158:	010b3b0b 	tsteq	fp, fp, lsl #22
 15c:	1c000013 	stcne	0, cr0, [r0], {19}
 160:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
 164:	0b3a0b0b 	bleq	e82d98 <startup-0x1f17d268>
 168:	13010b3b 	movwne	r0, #6971	; 0x1b3b
 16c:	0d1d0000 	ldceq	0, cr0, [sp, #-0]
 170:	3a080300 	bcc	200d78 <startup-0x1fdff288>
 174:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 178:	000b3813 	andeq	r3, fp, r3, lsl r8
 17c:	000f1e00 	andeq	r1, pc, r0, lsl #28
 180:	13490b0b 	movtne	r0, #39691	; 0x9b0b
 184:	341f0000 	ldrcc	r0, [pc], #-0	; 18c <startup-0x1ffffe74>
 188:	3a0e0300 	bcc	380d90 <startup-0x1fc7f270>
 18c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 190:	02193f13 	andseq	r3, r9, #19, 30	; 0x4c
 194:	20000018 	andcs	r0, r0, r8, lsl r0
 198:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 19c:	0b3a0e03 	bleq	e839b0 <startup-0x1f17c650>
 1a0:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 1a4:	06120111 			; <UNDEFINED> instruction: 0x06120111
 1a8:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 1ac:	00130119 	andseq	r0, r3, r9, lsl r1
 1b0:	010b2100 	mrseq	r2, (UNDEF: 27)
 1b4:	06120111 			; <UNDEFINED> instruction: 0x06120111
 1b8:	00001301 	andeq	r1, r0, r1, lsl #6
 1bc:	03003422 	movweq	r3, #1058	; 0x422
 1c0:	3b0b3a08 	blcc	2ce9e8 <startup-0x1fd31618>
 1c4:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 1c8:	23000018 	movwcs	r0, #24
 1cc:	0111010b 	tsteq	r1, fp, lsl #2
 1d0:	00000612 	andeq	r0, r0, r2, lsl r6
 1d4:	49002124 	stmdbmi	r0, {r2, r5, r8, sp}
 1d8:	00182f13 	andseq	r2, r8, r3, lsl pc
 1dc:	002e2500 	eoreq	r2, lr, r0, lsl #10
 1e0:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 1e4:	0b3b0b3a 	bleq	ec2ed4 <startup-0x1f13d12c>
 1e8:	01111927 	tsteq	r1, r7, lsr #18
 1ec:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 1f0:	00194297 	mulseq	r9, r7, r2
 1f4:	012e2600 			; <UNDEFINED> instruction: 0x012e2600
 1f8:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 1fc:	0b3b0b3a 	bleq	ec2eec <startup-0x1f13d114>
 200:	06120111 			; <UNDEFINED> instruction: 0x06120111
 204:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 208:	00130119 	andseq	r0, r3, r9, lsl r1
 20c:	012e2700 			; <UNDEFINED> instruction: 0x012e2700
 210:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 214:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 218:	01111927 	tsteq	r1, r7, lsr #18
 21c:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 220:	01194297 			; <UNDEFINED> instruction: 0x01194297
 224:	28000013 	stmdacs	r0, {r0, r1, r4}
 228:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
 22c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 230:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 234:	2e290000 	cdpcs	0, 2, cr0, cr9, cr0, {0}
 238:	03193f01 	tsteq	r9, #1, 30
 23c:	3b0b3a0e 	blcc	2cea7c <startup-0x1fd31584>
 240:	49192705 	ldmdbmi	r9, {r0, r2, r8, r9, sl, sp}
 244:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
 248:	97184006 	ldrls	r4, [r8, -r6]
 24c:	13011942 	movwne	r1, #6466	; 0x1942
 250:	342a0000 	strtcc	r0, [sl], #-0
 254:	3a0e0300 	bcc	380e5c <startup-0x1fc7f1a4>
 258:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 25c:	00180213 	andseq	r0, r8, r3, lsl r2
 260:	002e2b00 	eoreq	r2, lr, r0, lsl #22
 264:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 268:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 26c:	01111927 	tsteq	r1, r7, lsr #18
 270:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 274:	00194297 	mulseq	r9, r7, r2
 278:	00342c00 	eorseq	r2, r4, r0, lsl #24
 27c:	0b3a0803 	bleq	e82290 <startup-0x1f17dd70>
 280:	1349053b 	movtne	r0, #38203	; 0x953b
 284:	00001802 	andeq	r1, r0, r2, lsl #16
 288:	3f012e2d 	svccc	0x00012e2d
 28c:	3a0e0319 	bcc	380ef8 <startup-0x1fc7f108>
 290:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
 294:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 298:	96184006 	ldrls	r4, [r8], -r6
 29c:	13011942 	movwne	r1, #6466	; 0x1942
 2a0:	2e2e0000 	cdpcs	0, 2, cr0, cr14, cr0, {0}
 2a4:	03193f00 	tsteq	r9, #0, 30
 2a8:	3b0b3a0e 	blcc	2ceae8 <startup-0x1fd31518>
 2ac:	49192705 	ldmdbmi	r9, {r0, r2, r8, r9, sl, sp}
 2b0:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
 2b4:	97184006 	ldrls	r4, [r8, -r6]
 2b8:	00001942 	andeq	r1, r0, r2, asr #18
 2bc:	3f012e2f 	svccc	0x00012e2f
 2c0:	3a0e0319 	bcc	380f2c <startup-0x1fc7f0d4>
 2c4:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
 2c8:	11134919 	tstne	r3, r9, lsl r9
 2cc:	40061201 	andmi	r1, r6, r1, lsl #4
 2d0:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 2d4:	00001301 	andeq	r1, r0, r1, lsl #6
 2d8:	03012e30 	movweq	r2, #7728	; 0x1e30
 2dc:	3b0b3a0e 	blcc	2ceb1c <startup-0x1fd314e4>
 2e0:	49192705 	ldmdbmi	r9, {r0, r2, r8, r9, sl, sp}
 2e4:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
 2e8:	96184006 	ldrls	r4, [r8], -r6
 2ec:	13011942 	movwne	r1, #6466	; 0x1942
 2f0:	2e310000 	cdpcs	0, 3, cr0, cr1, cr0, {0}
 2f4:	3a0e0301 	bcc	380f00 <startup-0x1fc7f100>
 2f8:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
 2fc:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 300:	97184006 	ldrls	r4, [r8, -r6]
 304:	00001942 	andeq	r1, r0, r2, asr #18
 308:	01110100 	tsteq	r1, r0, lsl #2
 30c:	0b130e25 	bleq	4c3ba8 <startup-0x1fb3c458>
 310:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
 314:	06120111 			; <UNDEFINED> instruction: 0x06120111
 318:	00001710 	andeq	r1, r0, r0, lsl r7
 31c:	0b002402 	bleq	932c <startup-0x1fff6cd4>
 320:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
 324:	0300000e 	movweq	r0, #14
 328:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
 32c:	0b3b0b3a 	bleq	ec301c <startup-0x1f13cfe4>
 330:	00001349 	andeq	r1, r0, r9, asr #6
 334:	0b002404 	bleq	934c <startup-0x1fff6cb4>
 338:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
 33c:	05000008 	streq	r0, [r0, #-8]
 340:	13490035 	movtne	r0, #36917	; 0x9035
 344:	34060000 	strcc	r0, [r6], #-0
 348:	3a0e0300 	bcc	380f50 <startup-0x1fc7f0b0>
 34c:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 350:	3c193f13 	ldccc	15, cr3, [r9], {19}
 354:	07000019 	smladeq	r0, r9, r0, r0
 358:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 35c:	0b3b0b3a 	bleq	ec304c <startup-0x1f13cfb4>
 360:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
 364:	0000193c 	andeq	r1, r0, ip, lsr r9
 368:	3e010408 	cdpcc	4, 0, cr0, cr1, cr8, {0}
 36c:	490b0b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp}
 370:	3b0b3a13 	blcc	2cebc4 <startup-0x1fd3143c>
 374:	00130105 	andseq	r0, r3, r5, lsl #2
 378:	00280900 	eoreq	r0, r8, r0, lsl #18
 37c:	0b1c0e03 	bleq	703b90 <startup-0x1f8fc470>
 380:	130a0000 	movwne	r0, #40960	; 0xa000
 384:	3a0b0b01 	bcc	2c2f90 <startup-0x1fd3d070>
 388:	01053b0b 	tsteq	r5, fp, lsl #22
 38c:	0b000013 	bleq	3e0 <startup-0x1ffffc20>
 390:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
 394:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 398:	0b381349 	bleq	e050c4 <startup-0x1f1faf3c>
 39c:	0d0c0000 	stceq	0, cr0, [ip, #-0]
 3a0:	3a080300 	bcc	200fa8 <startup-0x1fdff058>
 3a4:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 3a8:	000b3813 	andeq	r3, fp, r3, lsl r8
 3ac:	01010d00 	tsteq	r1, r0, lsl #26
 3b0:	13011349 	movwne	r1, #4937	; 0x1349
 3b4:	210e0000 	mrscs	r0, (UNDEF: 14)
 3b8:	2f134900 	svccs	0x00134900
 3bc:	0f00000b 	svceq	0x0000000b
 3c0:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
 3c4:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 3c8:	00001349 	andeq	r1, r0, r9, asr #6
 3cc:	3e010410 	cfmvdlrcc	mvd1, r0
 3d0:	490b0b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp}
 3d4:	3b0b3a13 	blcc	2cec28 <startup-0x1fd313d8>
 3d8:	0013010b 	andseq	r0, r3, fp, lsl #2
 3dc:	01131100 	tsteq	r3, r0, lsl #2
 3e0:	0b3a0b0b 	bleq	e83014 <startup-0x1f17cfec>
 3e4:	13010b3b 	movwne	r0, #6971	; 0x1b3b
 3e8:	0d120000 	ldceq	0, cr0, [r2, #-0]
 3ec:	3a0e0300 	bcc	380ff4 <startup-0x1fc7f00c>
 3f0:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 3f4:	000b3813 	andeq	r3, fp, r3, lsl r8
 3f8:	012e1300 			; <UNDEFINED> instruction: 0x012e1300
 3fc:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 400:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 404:	01111927 	tsteq	r1, r7, lsr #18
 408:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 40c:	01194297 			; <UNDEFINED> instruction: 0x01194297
 410:	14000013 	strne	r0, [r0], #-19	; 0xffffffed
 414:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
 418:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 41c:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 420:	34150000 	ldrcc	r0, [r5], #-0
 424:	3a0e0300 	bcc	38102c <startup-0x1fc7efd4>
 428:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 42c:	00180213 	andseq	r0, r8, r3, lsl r2
 430:	000f1600 	andeq	r1, pc, r0, lsl #12
 434:	13490b0b 	movtne	r0, #39691	; 0x9b0b
 438:	2e170000 	cdpcs	0, 1, cr0, cr7, cr0, {0}
 43c:	03193f01 	tsteq	r9, #1, 30
 440:	3b0b3a0e 	blcc	2cec80 <startup-0x1fd31380>
 444:	49192705 	ldmdbmi	r9, {r0, r2, r8, r9, sl, sp}
 448:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
 44c:	97184006 	ldrls	r4, [r8, -r6]
 450:	13011942 	movwne	r1, #6466	; 0x1942
 454:	34180000 	ldrcc	r0, [r8], #-0
 458:	3a080300 	bcc	201060 <startup-0x1fdfefa0>
 45c:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 460:	00180213 	andseq	r0, r8, r3, lsl r2
 464:	012e1900 			; <UNDEFINED> instruction: 0x012e1900
 468:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 46c:	0b3b0b3a 	bleq	ec315c <startup-0x1f13cea4>
 470:	01111927 	tsteq	r1, r7, lsr #18
 474:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 478:	01194297 			; <UNDEFINED> instruction: 0x01194297
 47c:	1a000013 	bne	4d0 <startup-0x1ffffb30>
 480:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
 484:	0b3b0b3a 	bleq	ec3174 <startup-0x1f13ce8c>
 488:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 48c:	341b0000 	ldrcc	r0, [fp], #-0
 490:	3a0e0300 	bcc	381098 <startup-0x1fc7ef68>
 494:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 498:	00180213 	andseq	r0, r8, r3, lsl r2
 49c:	00341c00 	eorseq	r1, r4, r0, lsl #24
 4a0:	0b3a0803 	bleq	e824b4 <startup-0x1f17db4c>
 4a4:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 4a8:	00001802 	andeq	r1, r0, r2, lsl #16
 4ac:	3f012e1d 	svccc	0x00012e1d
 4b0:	3a0e0319 	bcc	38111c <startup-0x1fc7eee4>
 4b4:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 4b8:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 4bc:	96184006 	ldrls	r4, [r8], -r6
 4c0:	00001942 	andeq	r1, r0, r2, asr #18
 4c4:	01110100 	tsteq	r1, r0, lsl #2
 4c8:	0b130e25 	bleq	4c3d64 <startup-0x1fb3c29c>
 4cc:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
 4d0:	06120111 			; <UNDEFINED> instruction: 0x06120111
 4d4:	00001710 	andeq	r1, r0, r0, lsl r7
 4d8:	0b002402 	bleq	94e8 <startup-0x1fff6b18>
 4dc:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
 4e0:	0300000e 	movweq	r0, #14
 4e4:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
 4e8:	0b3b0b3a 	bleq	ec31d8 <startup-0x1f13ce28>
 4ec:	00001349 	andeq	r1, r0, r9, asr #6
 4f0:	0b002404 	bleq	9508 <startup-0x1fff6af8>
 4f4:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
 4f8:	05000008 	streq	r0, [r0, #-8]
 4fc:	13490035 	movtne	r0, #36917	; 0x9035
 500:	26060000 	strcs	r0, [r6], -r0
 504:	00134900 	andseq	r4, r3, r0, lsl #18
 508:	01130700 	tsteq	r3, r0, lsl #14
 50c:	0b3a050b 	bleq	e81940 <startup-0x1f17e6c0>
 510:	1301053b 	movwne	r0, #5435	; 0x153b
 514:	0d080000 	stceq	0, cr0, [r8, #-0]
 518:	3a0e0300 	bcc	381120 <startup-0x1fc7eee0>
 51c:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 520:	000b3813 	andeq	r3, fp, r3, lsl r8
 524:	000d0900 	andeq	r0, sp, r0, lsl #18
 528:	0b3a0e03 	bleq	e83d3c <startup-0x1f17c2c4>
 52c:	1349053b 	movtne	r0, #38203	; 0x953b
 530:	00000538 	andeq	r0, r0, r8, lsr r5
 534:	03000d0a 	movweq	r0, #3338	; 0xd0a
 538:	3b0b3a08 	blcc	2ced60 <startup-0x1fd312a0>
 53c:	38134905 	ldmdacc	r3, {r0, r2, r8, fp, lr}
 540:	0b000005 	bleq	55c <startup-0x1ffffaa4>
 544:	13490101 	movtne	r0, #37121	; 0x9101
 548:	00001301 	andeq	r1, r0, r1, lsl #6
 54c:	4900210c 	stmdbmi	r0, {r2, r3, r8, sp}
 550:	000b2f13 	andeq	r2, fp, r3, lsl pc
 554:	00210d00 	eoreq	r0, r1, r0, lsl #26
 558:	052f1349 	streq	r1, [pc, #-841]!	; 217 <startup-0x1ffffde9>
 55c:	160e0000 	strne	r0, [lr], -r0
 560:	3a0e0300 	bcc	381168 <startup-0x1fc7ee98>
 564:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 568:	0f000013 	svceq	0x00000013
 56c:	0b0b0113 	bleq	2c09c0 <startup-0x1fd3f640>
 570:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 574:	00001301 	andeq	r1, r0, r1, lsl #6
 578:	03000d10 	movweq	r0, #3344	; 0xd10
 57c:	3b0b3a08 	blcc	2ceda4 <startup-0x1fd3125c>
 580:	38134905 	ldmdacc	r3, {r0, r2, r8, fp, lr}
 584:	1100000b 	tstne	r0, fp
 588:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 58c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 590:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
 594:	0000193c 	andeq	r1, r0, ip, lsr r9
 598:	03003412 	movweq	r3, #1042	; 0x412
 59c:	3b0b3a0e 	blcc	2ceddc <startup-0x1fd31224>
 5a0:	3f13490b 	svccc	0x0013490b
 5a4:	00193c19 	andseq	r3, r9, r9, lsl ip
 5a8:	01041300 	mrseq	r1, LR_abt
 5ac:	0b0b0b3e 	bleq	2c32ac <startup-0x1fd3cd54>
 5b0:	0b3a1349 	bleq	e852dc <startup-0x1f17ad24>
 5b4:	1301053b 	movwne	r0, #5435	; 0x153b
 5b8:	28140000 	ldmdacs	r4, {}	; <UNPREDICTABLE>
 5bc:	1c0e0300 	stcne	3, cr0, [lr], {-0}
 5c0:	1500000b 	strne	r0, [r0, #-11]
 5c4:	0b0b0113 	bleq	2c0a18 <startup-0x1fd3f5e8>
 5c8:	0b3b0b3a 	bleq	ec32b8 <startup-0x1f13cd48>
 5cc:	00001301 	andeq	r1, r0, r1, lsl #6
 5d0:	03000d16 	movweq	r0, #3350	; 0xd16
 5d4:	3b0b3a0e 	blcc	2cee14 <startup-0x1fd311ec>
 5d8:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
 5dc:	1700000b 	strne	r0, [r0, -fp]
 5e0:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 5e4:	0b3a0e03 	bleq	e83df8 <startup-0x1f17c208>
 5e8:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 5ec:	06120111 			; <UNDEFINED> instruction: 0x06120111
 5f0:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 5f4:	00130119 	andseq	r0, r3, r9, lsl r1
 5f8:	00051800 	andeq	r1, r5, r0, lsl #16
 5fc:	0b3a0e03 	bleq	e83e10 <startup-0x1f17c1f0>
 600:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 604:	00001802 	andeq	r1, r0, r2, lsl #16
 608:	03003419 	movweq	r3, #1049	; 0x419
 60c:	3b0b3a0e 	blcc	2cee4c <startup-0x1fd311b4>
 610:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 614:	1a000018 	bne	67c <startup-0x1ffff984>
 618:	0b0b000f 	bleq	2c065c <startup-0x1fd3f9a4>
 61c:	00001349 	andeq	r1, r0, r9, asr #6
 620:	3f012e1b 	svccc	0x00012e1b
 624:	3a0e0319 	bcc	381290 <startup-0x1fc7ed70>
 628:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 62c:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 630:	97184006 	ldrls	r4, [r8, -r6]
 634:	00001942 	andeq	r1, r0, r2, asr #18
 638:	01110100 	tsteq	r1, r0, lsl #2
 63c:	0b130e25 	bleq	4c3ed8 <startup-0x1fb3c128>
 640:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
 644:	06120111 			; <UNDEFINED> instruction: 0x06120111
 648:	00001710 	andeq	r1, r0, r0, lsl r7
 64c:	0b002402 	bleq	965c <startup-0x1fff69a4>
 650:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
 654:	0300000e 	movweq	r0, #14
 658:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
 65c:	0b3b0b3a 	bleq	ec334c <startup-0x1f13ccb4>
 660:	00001349 	andeq	r1, r0, r9, asr #6
 664:	0b002404 	bleq	967c <startup-0x1fff6984>
 668:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
 66c:	05000008 	streq	r0, [r0, #-8]
 670:	0b0b0113 	bleq	2c0ac4 <startup-0x1fd3f53c>
 674:	0b3b0b3a 	bleq	ec3364 <startup-0x1f13cc9c>
 678:	00001301 	andeq	r1, r0, r1, lsl #6
 67c:	03000d06 	movweq	r0, #3334	; 0xd06
 680:	3b0b3a0e 	blcc	2ceec0 <startup-0x1fd31140>
 684:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
 688:	0700000b 	streq	r0, [r0, -fp]
 68c:	0803000d 	stmdaeq	r3, {r0, r2, r3}
 690:	0b3b0b3a 	bleq	ec3380 <startup-0x1f13cc80>
 694:	0b381349 	bleq	e053c0 <startup-0x1f1fac40>
 698:	01080000 	mrseq	r0, (UNDEF: 8)
 69c:	01134901 	tsteq	r3, r1, lsl #18
 6a0:	09000013 	stmdbeq	r0, {r0, r1, r4}
 6a4:	13490021 	movtne	r0, #36897	; 0x9021
 6a8:	00000b2f 	andeq	r0, r0, pc, lsr #22
 6ac:	3f012e0a 	svccc	0x00012e0a
 6b0:	3a0e0319 	bcc	38131c <startup-0x1fc7ece4>
 6b4:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 6b8:	11134919 	tstne	r3, r9, lsl r9
 6bc:	40061201 	andmi	r1, r6, r1, lsl #4
 6c0:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 6c4:	00001301 	andeq	r1, r0, r1, lsl #6
 6c8:	0300050b 	movweq	r0, #1291	; 0x50b
 6cc:	3b0b3a0e 	blcc	2cef0c <startup-0x1fd310f4>
 6d0:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 6d4:	0c000018 	stceq	0, cr0, [r0], {24}
 6d8:	0b0b000f 	bleq	2c071c <startup-0x1fd3f8e4>
 6dc:	00001349 	andeq	r1, r0, r9, asr #6
 6e0:	3f012e0d 	svccc	0x00012e0d
 6e4:	3a0e0319 	bcc	381350 <startup-0x1fc7ecb0>
 6e8:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 6ec:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 6f0:	97184006 	ldrls	r4, [r8, -r6]
 6f4:	13011942 	movwne	r1, #6466	; 0x1942
 6f8:	340e0000 	strcc	r0, [lr], #-0
 6fc:	3a0e0300 	bcc	381304 <startup-0x1fc7ecfc>
 700:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 704:	00180213 	andseq	r0, r8, r3, lsl r2
 708:	012e0f00 			; <UNDEFINED> instruction: 0x012e0f00
 70c:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 710:	0b3b0b3a 	bleq	ec3400 <startup-0x1f13cc00>
 714:	01111927 	tsteq	r1, r7, lsr #18
 718:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 71c:	00194297 	mulseq	r9, r7, r2
 720:	11010000 	mrsne	r0, (UNDEF: 1)
 724:	130e2501 	movwne	r2, #58625	; 0xe501
 728:	1b0e030b 	blne	38135c <startup-0x1fc7eca4>
 72c:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
 730:	00171006 	andseq	r1, r7, r6
 734:	00240200 	eoreq	r0, r4, r0, lsl #4
 738:	0b3e0b0b 	bleq	f8336c <startup-0x1f07cc94>
 73c:	00000e03 	andeq	r0, r0, r3, lsl #28
 740:	03001603 	movweq	r1, #1539	; 0x603
 744:	3b0b3a0e 	blcc	2cef84 <startup-0x1fd3107c>
 748:	0013490b 	andseq	r4, r3, fp, lsl #18
 74c:	00240400 	eoreq	r0, r4, r0, lsl #8
 750:	0b3e0b0b 	bleq	f83384 <startup-0x1f07cc7c>
 754:	00000803 	andeq	r0, r0, r3, lsl #16
 758:	49003505 	stmdbmi	r0, {r0, r2, r8, sl, ip, sp}
 75c:	06000013 			; <UNDEFINED> instruction: 0x06000013
 760:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 764:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 768:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
 76c:	0000193c 	andeq	r1, r0, ip, lsr r9
 770:	03003407 	movweq	r3, #1031	; 0x407
 774:	3b0b3a0e 	blcc	2cefb4 <startup-0x1fd3104c>
 778:	3f13490b 	svccc	0x0013490b
 77c:	00193c19 	andseq	r3, r9, r9, lsl ip
 780:	01040800 	tsteq	r4, r0, lsl #16
 784:	0b0b0b3e 	bleq	2c3484 <startup-0x1fd3cb7c>
 788:	0b3a1349 	bleq	e854b4 <startup-0x1f17ab4c>
 78c:	1301053b 	movwne	r0, #5435	; 0x153b
 790:	28090000 	stmdacs	r9, {}	; <UNPREDICTABLE>
 794:	1c0e0300 	stcne	3, cr0, [lr], {-0}
 798:	0a00000b 	beq	7cc <startup-0x1ffff834>
 79c:	08030028 	stmdaeq	r3, {r3, r5}
 7a0:	00000b1c 	andeq	r0, r0, ip, lsl fp
 7a4:	0300160b 	movweq	r1, #1547	; 0x60b
 7a8:	3b0b3a0e 	blcc	2cefe8 <startup-0x1fd31018>
 7ac:	00134905 	andseq	r4, r3, r5, lsl #18
 7b0:	01130c00 	tsteq	r3, r0, lsl #24
 7b4:	0b3a0b0b 	bleq	e833e8 <startup-0x1f17cc18>
 7b8:	1301053b 	movwne	r0, #5435	; 0x153b
 7bc:	0d0d0000 	stceq	0, cr0, [sp, #-0]
 7c0:	3a080300 	bcc	2013c8 <startup-0x1fdfec38>
 7c4:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 7c8:	000b3813 	andeq	r3, fp, r3, lsl r8
 7cc:	000d0e00 	andeq	r0, sp, r0, lsl #28
 7d0:	0b3a0e03 	bleq	e83fe4 <startup-0x1f17c01c>
 7d4:	1349053b 	movtne	r0, #38203	; 0x953b
 7d8:	00000b38 	andeq	r0, r0, r8, lsr fp
 7dc:	0b01130f 	bleq	45420 <startup-0x1ffbabe0>
 7e0:	3b0b3a0b 	blcc	2cf014 <startup-0x1fd30fec>
 7e4:	0013010b 	andseq	r0, r3, fp, lsl #2
 7e8:	000d1000 	andeq	r1, sp, r0
 7ec:	0b3a0e03 	bleq	e84000 <startup-0x1f17c000>
 7f0:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 7f4:	00000b38 	andeq	r0, r0, r8, lsr fp
 7f8:	3f012e11 	svccc	0x00012e11
 7fc:	3a0e0319 	bcc	381468 <startup-0x1fc7eb98>
 800:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
 804:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 808:	97184006 	ldrls	r4, [r8, -r6]
 80c:	13011942 	movwne	r1, #6466	; 0x1942
 810:	05120000 	ldreq	r0, [r2, #-0]
 814:	3a0e0300 	bcc	38141c <startup-0x1fc7ebe4>
 818:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 81c:	00180213 	andseq	r0, r8, r3, lsl r2
 820:	00341300 	eorseq	r1, r4, r0, lsl #6
 824:	0b3a0e03 	bleq	e84038 <startup-0x1f17bfc8>
 828:	1349053b 	movtne	r0, #38203	; 0x953b
 82c:	00001802 	andeq	r1, r0, r2, lsl #16
 830:	0b000f14 	bleq	4488 <startup-0x1fffbb78>
 834:	0013490b 	andseq	r4, r3, fp, lsl #18
 838:	012e1500 			; <UNDEFINED> instruction: 0x012e1500
 83c:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 840:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 844:	13491927 	movtne	r1, #39207	; 0x9927
 848:	06120111 			; <UNDEFINED> instruction: 0x06120111
 84c:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 850:	00130119 	andseq	r0, r3, r9, lsl r1
 854:	012e1600 			; <UNDEFINED> instruction: 0x012e1600
 858:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 85c:	0b3b0b3a 	bleq	ec354c <startup-0x1f13cab4>
 860:	01111927 	tsteq	r1, r7, lsr #18
 864:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 868:	01194296 			; <UNDEFINED> instruction: 0x01194296
 86c:	17000013 	smladne	r0, r3, r0, r0
 870:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
 874:	0b3b0b3a 	bleq	ec3564 <startup-0x1f13ca9c>
 878:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 87c:	34180000 	ldrcc	r0, [r8], #-0
 880:	3a0e0300 	bcc	381488 <startup-0x1fc7eb78>
 884:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 888:	00180213 	andseq	r0, r8, r3, lsl r2
 88c:	012e1900 			; <UNDEFINED> instruction: 0x012e1900
 890:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 894:	0b3b0b3a 	bleq	ec3584 <startup-0x1f13ca7c>
 898:	01111927 	tsteq	r1, r7, lsr #18
 89c:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 8a0:	00194296 	mulseq	r9, r6, r2
	...

Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	00000024 	andeq	r0, r0, r4, lsr #32
   4:	00000002 	andeq	r0, r0, r2
   8:	00040000 	andeq	r0, r4, r0
   c:	00000000 	andeq	r0, r0, r0
  10:	20000010 	andcs	r0, r0, r0, lsl r0
  14:	000017d4 	ldrdeq	r1, [r0], -r4
  18:	20000000 	andcs	r0, r0, r0
  1c:	0000000c 	andeq	r0, r0, ip
	...
  28:	0000001c 	andeq	r0, r0, ip, lsl r0
  2c:	18ea0002 	stmiane	sl!, {r1}^
  30:	00040000 	andeq	r0, r4, r0
  34:	00000000 	andeq	r0, r0, r0
  38:	200017e4 	andcs	r1, r0, r4, ror #15
  3c:	0000050e 	andeq	r0, r0, lr, lsl #10
	...
  48:	0000001c 	andeq	r0, r0, ip, lsl r0
  4c:	1f110002 	svcne	0x00110002
  50:	00040000 	andeq	r0, r4, r0
  54:	00000000 	andeq	r0, r0, r0
  58:	20001cf4 	strdcs	r1, [r0], -r4
  5c:	000001c4 	andeq	r0, r0, r4, asr #3
	...
  68:	0000001c 	andeq	r0, r0, ip, lsl r0
  6c:	24580002 	ldrbcs	r0, [r8], #-2
  70:	00040000 	andeq	r0, r4, r0
  74:	00000000 	andeq	r0, r0, r0
  78:	20001eb8 			; <UNDEFINED> instruction: 0x20001eb8
  7c:	00000128 	andeq	r0, r0, r8, lsr #2
	...
  88:	0000001c 	andeq	r0, r0, ip, lsl r0
  8c:	26050002 	strcs	r0, [r5], -r2
  90:	00040000 	andeq	r0, r4, r0
  94:	00000000 	andeq	r0, r0, r0
  98:	20001fe0 	andcs	r1, r0, r0, ror #31
  9c:	000009fe 	strdeq	r0, [r0], -lr
	...

Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
   0:	20000010 	andcs	r0, r0, r0, lsl r0
   4:	200017e4 	andcs	r1, r0, r4, ror #15
   8:	20000000 	andcs	r0, r0, r0
   c:	2000000c 	andcs	r0, r0, ip
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
   0:	000004f9 	strdeq	r0, [r0], -r9
   4:	02070002 	andeq	r0, r7, #2
   8:	01020000 	mrseq	r0, (UNDEF: 2)
   c:	000d0efb 	strdeq	r0, [sp], -fp
  10:	01010101 	tsteq	r1, r1, lsl #2
  14:	01000000 	mrseq	r0, (UNDEF: 0)
  18:	2e010000 	cdpcs	0, 0, cr0, cr1, cr0, {0}
  1c:	696c2f2e 	stmdbvs	ip!, {r1, r2, r3, r5, r8, r9, sl, fp, sp}^
  20:	54532f62 	ldrbpl	r2, [r3], #-3938	; 0xfffff09e
  24:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
  28:	696c5f34 	stmdbvs	ip!, {r2, r4, r5, r8, r9, sl, fp, ip, lr}^
  2c:	4d432f62 	stclmi	15, cr2, [r3, #-392]	; 0xfffffe78
  30:	2f534953 	svccs	0x00534953
  34:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
  38:	00656475 	rsbeq	r6, r5, r5, ror r4
  3c:	6c2f2e2e 	stcvs	14, cr2, [pc], #-184	; ffffff8c <GPIO_Ports+0xdfffd43c>
  40:	532f6269 			; <UNDEFINED> instruction: 0x532f6269
  44:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
  48:	6c5f3446 	cfldrdvs	mvd3, [pc], {70}	; 0x46
  4c:	532f6269 			; <UNDEFINED> instruction: 0x532f6269
  50:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
  54:	78783446 	ldmdavc	r8!, {r1, r2, r6, sl, ip, sp}^
  58:	6474535f 	ldrbtvs	r5, [r4], #-863	; 0xfffffca1
  5c:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
  60:	445f6870 	ldrbmi	r6, [pc], #-2160	; 68 <startup-0x1fffff98>
  64:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
  68:	72732f72 	rsbsvc	r2, r3, #456	; 0x1c8
  6c:	3a430063 	bcc	10c0200 <startup-0x1ef3fe00>
  70:	6573552f 	ldrbvs	r5, [r3, #-1327]!	; 0xfffffad1
  74:	412f7372 			; <UNDEFINED> instruction: 0x412f7372
  78:	746d6164 	strbtvc	r6, [sp], #-356	; 0xfffffe9c
  7c:	656e4f2f 	strbvs	r4, [lr, #-3887]!	; 0xfffff0d1
  80:	76697244 	strbtvc	r7, [r9], -r4, asr #4
  84:	6f442f65 	svcvs	0x00442f65
  88:	656d756b 	strbvs	r7, [sp, #-1387]!	; 0xfffffa95
  8c:	472f746e 	strmi	r7, [pc, -lr, ror #8]!
  90:	75487469 	strbvc	r7, [r8, #-1129]	; 0xfffffb97
  94:	41442f62 	cmpmi	r4, r2, ror #30
  98:	30393254 	eorscc	r3, r9, r4, asr r2
  9c:	72614c2d 	rsbvc	r4, r1, #11520	; 0x2d00
  a0:	7379736d 	cmnvc	r9, #-1275068415	; 0xb4000001
  a4:	2f6d6574 	svccs	0x006d6574
  a8:	2f646f6b 	svccs	0x00646f6b
  ac:	726f6f44 	rsbvc	r6, pc, #68, 30	; 0x110
  b0:	2f2e2e00 	svccs	0x002e2e00
  b4:	2f62696c 	svccs	0x0062696c
  b8:	334d5453 	movtcc	r5, #54355	; 0xd453
  bc:	5f344632 	svcpl	0x00344632
  c0:	2f62696c 	svccs	0x0062696c
  c4:	334d5453 	movtcc	r5, #54355	; 0xd453
  c8:	78344632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, lr}
  cc:	74535f78 	ldrbvc	r5, [r3], #-3960	; 0xfffff088
  d0:	72655064 	rsbvc	r5, r5, #100	; 0x64
  d4:	5f687069 	svcpl	0x00687069
  d8:	76697244 	strbtvc	r7, [r9], -r4, asr #4
  dc:	692f7265 	stmdbvs	pc!, {r0, r2, r5, r6, r9, ip, sp, lr}	; <UNPREDICTABLE>
  e0:	6300636e 	movwvs	r6, #878	; 0x36e
  e4:	73635c3a 	cmnvc	r3, #14848	; 0x3a00
  e8:	70706165 	rsbsvc	r6, r0, r5, ror #2
  ec:	646f635c 	strbtvs	r6, [pc], #-860	; f4 <startup-0x1fffff0c>
  f0:	74696c65 	strbtvc	r6, [r9], #-3173	; 0xfffff39b
  f4:	6f745c65 	svcvs	0x00745c65
  f8:	5c736c6f 	ldclpl	12, cr6, [r3], #-444	; 0xfffffe44
  fc:	2d636367 	stclcs	3, cr6, [r3, #-412]!	; 0xfffffe64
 100:	5c6d7261 	sfmpl	f7, 2, [sp], #-388	; 0xfffffe7c
 104:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
 108:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
 10c:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
 110:	6e695c69 	cdpvs	12, 6, cr5, cr9, cr9, {3}
 114:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
 118:	616d5c65 	cmnvs	sp, r5, ror #24
 11c:	6e696863 	cdpvs	8, 6, cr6, cr9, cr3, {3}
 120:	3a630065 	bcc	18c02bc <startup-0x1e73fd44>
 124:	6573635c 	ldrbvs	r6, [r3, #-860]!	; 0xfffffca4
 128:	5c707061 	ldclpl	0, cr7, [r0], #-388	; 0xfffffe7c
 12c:	65646f63 	strbvs	r6, [r4, #-3939]!	; 0xfffff09d
 130:	6574696c 	ldrbvs	r6, [r4, #-2412]!	; 0xfffff694
 134:	6f6f745c 	svcvs	0x006f745c
 138:	675c736c 	ldrbvs	r7, [ip, -ip, ror #6]
 13c:	612d6363 			; <UNDEFINED> instruction: 0x612d6363
 140:	615c6d72 	cmpvs	ip, r2, ror sp
 144:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
 148:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
 14c:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
 150:	636e695c 	cmnvs	lr, #92, 18	; 0x170000
 154:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
 158:	7379735c 	cmnvc	r9, #92, 6	; 0x70000001
 15c:	6f630000 	svcvs	0x00630000
 160:	635f6572 	cmpvs	pc, #478150656	; 0x1c800000
 164:	682e346d 	stmdavs	lr!, {r0, r2, r3, r5, r6, sl, ip, sp}
 168:	00000100 	andeq	r0, r0, r0, lsl #2
 16c:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
 170:	78346632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, sp, lr}
 174:	63725f78 	cmnvs	r2, #120, 30	; 0x1e0
 178:	00632e63 	rsbeq	r2, r3, r3, ror #28
 17c:	69000002 	stmdbvs	r0, {r1}
 180:	2e74696e 	vsubcs.f16	s13, s8, s29	; <UNPREDICTABLE>
 184:	00030068 	andeq	r0, r3, r8, rrx
 188:	61747300 	cmnvs	r4, r0, lsl #6
 18c:	70757472 	rsbsvc	r7, r5, r2, ror r4
 190:	0300632e 	movweq	r6, #814	; 0x32e
 194:	74730000 	ldrbtvc	r0, [r3], #-0
 198:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
 19c:	2e787834 	mrccs	8, 3, r7, cr8, cr4, {1}
 1a0:	00040068 	andeq	r0, r4, r8, rrx
 1a4:	65645f00 	strbvs	r5, [r4, #-3840]!	; 0xfffff100
 1a8:	6c756166 	ldfvse	f6, [r5], #-408	; 0xfffffe68
 1ac:	79745f74 	ldmdbvc	r4!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
 1b0:	2e736570 	mrccs	5, 3, r6, cr3, cr0, {3}
 1b4:	00050068 	andeq	r0, r5, r8, rrx
 1b8:	74735f00 	ldrbtvc	r5, [r3], #-3840	; 0xfffff100
 1bc:	746e6964 	strbtvc	r6, [lr], #-2404	; 0xfffff69c
 1c0:	0600682e 	streq	r6, [r0], -lr, lsr #16
 1c4:	79730000 	ldmdbvc	r3!, {}^	; <UNPREDICTABLE>
 1c8:	6d657473 	cfstrdvs	mvd7, [r5, #-460]!	; 0xfffffe34
 1cc:	6d74735f 	ldclvs	3, cr7, [r4, #-380]!	; 0xfffffe84
 1d0:	34663233 	strbtcc	r3, [r6], #-563	; 0xfffffdcd
 1d4:	682e7878 	stmdavs	lr!, {r3, r4, r5, r6, fp, ip, sp, lr}
 1d8:	00000400 	andeq	r0, r0, r0, lsl #8
 1dc:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
 1e0:	78346632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, sp, lr}
 1e4:	63725f78 	cmnvs	r2, #120, 30	; 0x1e0
 1e8:	00682e63 	rsbeq	r2, r8, r3, ror #28
 1ec:	73000004 	movwvc	r0, #4
 1f0:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
 1f4:	78783466 	ldmdavc	r8!, {r1, r2, r5, r6, sl, ip, sp}^
 1f8:	6970675f 	ldmdbvs	r0!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, sp, lr}^
 1fc:	00682e6f 	rsbeq	r2, r8, pc, ror #28
 200:	73000004 	movwvc	r0, #4
 204:	74726174 	ldrbtvc	r6, [r2], #-372	; 0xfffffe8c
 208:	682e7075 	stmdavs	lr!, {r0, r2, r4, r5, r6, ip, sp, lr}
 20c:	00000300 	andeq	r0, r0, r0, lsl #6
 210:	02050000 	andeq	r0, r5, #0
 214:	20000010 	andcs	r0, r0, r0, lsl r0
 218:	010cdd03 	tsteq	ip, r3, lsl #26
 21c:	1ecd4b75 			; <UNDEFINED> instruction: 0x1ecd4b75
 220:	00fc03d8 	ldrsbteq	r0, [ip], #56	; 0x38
 224:	02004b90 	andeq	r4, r0, #144, 22	; 0x24000
 228:	58060104 	stmdapl	r6, {r2, r8}
 22c:	674b3006 	strbvs	r3, [fp, -r6]
 230:	04213f3d 	strteq	r3, [r1], #-3901	; 0xfffff0c3
 234:	73f70302 	mvnsvc	r0, #134217728	; 0x8000000
 238:	3f693082 	svccc	0x00693082
 23c:	4e4f4069 	cdpmi	0, 4, cr4, cr15, cr9, {3}
 240:	03503f69 	cmpeq	r0, #420	; 0x1a4
 244:	3f6be417 	svccc	0x006be417
 248:	740f034b 	strvc	r0, [pc], #-843	; 250 <startup-0x1ffffdb0>
 24c:	003d2f3d 	eorseq	r2, sp, sp, lsr pc
 250:	40020402 	andmi	r0, r2, r2, lsl #8
 254:	02040200 	andeq	r0, r4, #0, 4
 258:	04020067 	streq	r0, [r2], #-103	; 0xffffff99
 25c:	02003d02 	andeq	r3, r0, #2, 26	; 0x80
 260:	58060104 	stmdapl	r6, {r2, r8}
 264:	4e5a4c06 	cdpmi	12, 5, cr4, cr10, cr6, {0}
 268:	0b032f3e 	bleq	cbf68 <startup-0x1ff34098>
 26c:	3f32674a 	svccc	0x0032674a
 270:	033d694d 	teqeq	sp, #1261568	; 0x134000
 274:	4b6a7415 	blmi	1a9d2d0 <startup-0x1e562d30>
 278:	6c661403 	cfstrdvs	mvd1, [r6], #-12
 27c:	0b033f3f 	bleq	cff80 <startup-0x1ff30080>
 280:	20790366 	rsbscs	r0, r9, r6, ror #6
 284:	243d233d 	ldrtcs	r2, [sp], #-829	; 0xfffffcc3
 288:	6a740f03 	bvs	1d03e9c <startup-0x1e2fc164>
 28c:	00de034b 	sbcseq	r0, lr, fp, asr #6
 290:	2dbb7c66 	ldccs	12, cr7, [fp, #408]!	; 0x198
 294:	660e033e 			; <UNDEFINED> instruction: 0x660e033e
 298:	1a034b69 	bne	d3044 <startup-0x1ff2cfbc>
 29c:	03835d66 	orreq	r5, r3, #6528	; 0x1980
 2a0:	69740185 	ldmdbvs	r4!, {r0, r2, r7, r8}^
 2a4:	00e9034b 	rsceq	r0, r9, fp, asr #6
 2a8:	03ad6c66 			; <UNDEFINED> instruction: 0x03ad6c66
 2ac:	4b69740d 	blmi	1a5d2e8 <startup-0x1e5a2d18>
 2b0:	69660e03 	stmdbvs	r6!, {r0, r1, r9, sl, fp}^
 2b4:	6615034b 	ldrvs	r0, [r5], -fp, asr #6
 2b8:	4d3f3459 	cfldrsmi	mvf3, [pc, #-356]!	; 15c <startup-0x1ffffea4>
 2bc:	18034169 	stmdane	r3, {r0, r3, r5, r6, r8, lr}
 2c0:	3f345990 	svccc	0x00345990
 2c4:	0341694d 	movteq	r6, #6477	; 0x194d
 2c8:	4b7401b3 	blmi	1d0099c <startup-0x1e2ff664>
 2cc:	4d4d3f33 	stclmi	15, cr3, [sp, #-204]	; 0xffffff34
 2d0:	660d033d 			; <UNDEFINED> instruction: 0x660d033d
 2d4:	1703672f 	strne	r6, [r3, -pc, lsr #14]
 2d8:	3f334b66 	svccc	0x00334b66
 2dc:	033d4d4d 	teqeq	sp, #4928	; 0x1340
 2e0:	334b660f 	movtcc	r6, #46607	; 0xb60f
 2e4:	3d4d4d3f 	stclcc	13, cr4, [sp, #-252]	; 0xffffff04
 2e8:	4b820f03 	blmi	fe083efc <GPIO_Ports+0xde0813ac>
 2ec:	5b4d3f33 	blpl	134ffc0 <startup-0x1ecb0040>
 2f0:	9024033d 	eorls	r0, r4, sp, lsr r3
 2f4:	775ac04b 	ldrbvc	ip, [sl, -fp, asr #32]
 2f8:	263d223d 			; <UNDEFINED> instruction: 0x263d223d
 2fc:	db3f5a67 	blle	fd6ca0 <startup-0x1f029360>
 300:	038383cb 	orreq	r8, r3, #738197507	; 0x2c000003
 304:	253d201b 	ldrcs	r2, [sp, #-27]!	; 0xffffffe5
 308:	69683d59 	stmdbvs	r8!, {r0, r3, r4, r6, r8, sl, fp, ip, sp}^
 30c:	69683d67 	stmdbvs	r8!, {r0, r1, r2, r5, r6, r8, sl, fp, ip, sp}^
 310:	67683d67 	strbvs	r3, [r8, -r7, ror #26]!
 314:	4bba3f03 	blmi	fee8ff28 <GPIO_Ports+0xdee8d3d8>
 318:	4d3f8433 	cfldrsmi	mvf8, [pc, #-204]!	; 254 <startup-0x1ffffdac>
 31c:	03834069 	orreq	r4, r3, #105	; 0x69
 320:	4b6a9e0a 	blmi	1aa7b50 <startup-0x1e5584b0>
 324:	69660c03 	stmdbvs	r6!, {r0, r1, sl, fp}^
 328:	01b8034b 			; <UNDEFINED> instruction: 0x01b8034b
 32c:	033d4e66 	teqeq	sp, #1632	; 0x660
 330:	334b7416 	movtcc	r7, #46102	; 0xb416
 334:	4b4d4d4d 	blmi	1353870 <startup-0x1ecac790>
 338:	4b821403 	blmi	fe08534c <GPIO_Ports+0xde0827fc>
 33c:	4d4d4d33 	stclmi	13, cr4, [sp, #-204]	; 0xffffff34
 340:	8211034b 	andshi	r0, r1, #738197505	; 0x2c000001
 344:	4d4d334b 	stclmi	3, cr3, [sp, #-300]	; 0xfffffed4
 348:	10034b5b 	andne	r4, r3, fp, asr fp
 34c:	4d334b74 	vldmdbmi	r3!, {d4-<overflow reg d61>}
 350:	034b694d 	movteq	r6, #47437	; 0xb94d
 354:	4b8200d3 	blmi	fe0806a8 <GPIO_Ports+0xde07db58>
 358:	4d4d4d33 	stclmi	13, cr4, [sp, #-204]	; 0xffffff34
 35c:	00f0034b 	rscseq	r0, r0, fp, asr #6
 360:	033d4e82 	teqeq	sp, #2080	; 0x820
 364:	4c797425 	cfldrdmi	mvd7, [r9], #-148	; 0xffffff6c
 368:	03761e6c 	cmneq	r6, #108, 28	; 0x6c0
 36c:	4c797413 	cfldrdmi	mvd7, [r9], #-76	; 0xffffffb4
 370:	03761e6c 	cmneq	r6, #108, 28	; 0x6c0
 374:	4c797411 	cfldrdmi	mvd7, [r9], #-68	; 0xffffffbc
 378:	03761e6c 	cmneq	r6, #108, 28	; 0x6c0
 37c:	4c79742c 	cfldrdmi	mvd7, [r9], #-176	; 0xffffff50
 380:	03761e6c 	cmneq	r6, #108, 28	; 0x6c0
 384:	4c797427 	cfldrdmi	mvd7, [r9], #-156	; 0xffffff64
 388:	03761e6c 	cmneq	r6, #108, 28	; 0x6c0
 38c:	4c79741d 	cfldrdmi	mvd7, [r9], #-116	; 0xffffff8c
 390:	03761e6c 	cmneq	r6, #108, 28	; 0x6c0
 394:	4c797410 	cfldrdmi	mvd7, [r9], #-64	; 0xffffffc0
 398:	03761e6c 	cmneq	r6, #108, 28	; 0x6c0
 39c:	4c79740e 	cfldrdmi	mvd7, [r9], #-56	; 0xffffffc8
 3a0:	03761e6c 	cmneq	r6, #108, 28	; 0x6c0
 3a4:	4c787429 	cfldrdmi	mvd7, [r8], #-164	; 0xffffff5c
 3a8:	03761e6c 	cmneq	r6, #108, 28	; 0x6c0
 3ac:	4c787423 	cfldrdmi	mvd7, [r8], #-140	; 0xffffff74
 3b0:	03761e6c 	cmneq	r6, #108, 28	; 0x6c0
 3b4:	4c787425 	cfldrdmi	mvd7, [r8], #-148	; 0xffffff6c
 3b8:	03761e6c 	cmneq	r6, #108, 28	; 0x6c0
 3bc:	4c787414 	cfldrdmi	mvd7, [r8], #-80	; 0xffffffb0
 3c0:	03761e6c 	cmneq	r6, #108, 28	; 0x6c0
 3c4:	4c787412 	cfldrdmi	mvd7, [r8], #-72	; 0xffffffb8
 3c8:	03761e6c 	cmneq	r6, #108, 28	; 0x6c0
 3cc:	4c78742d 	cfldrdmi	mvd7, [r8], #-180	; 0xffffff4c
 3d0:	03761e6c 	cmneq	r6, #108, 28	; 0x6c0
 3d4:	4c787428 	cfldrdmi	mvd7, [r8], #-160	; 0xffffff60
 3d8:	03761e6c 	cmneq	r6, #108, 28	; 0x6c0
 3dc:	4c6a740c 	cfstrdmi	mvd7, [sl], #-48	; 0xffffffd0
 3e0:	03681e6c 	cmneq	r8, #108, 28	; 0x6c0
 3e4:	947402ac 	ldrbtls	r0, [r4], #-684	; 0xfffffd54
 3e8:	ae1e974d 	cdpge	7, 1, cr9, cr14, cr13, {2}
 3ec:	67661703 	strbvs	r1, [r6, -r3, lsl #14]!
 3f0:	59502f2f 	ldmdbpl	r0, {r0, r1, r2, r3, r5, r8, r9, sl, fp, sp}^
 3f4:	4e3e4c3e 	mrcmi	12, 1, r4, cr14, cr14, {1}
 3f8:	5c765940 			; <UNDEFINED> instruction: 0x5c765940
 3fc:	0a033d4d 	beq	cf938 <startup-0x1ff306c8>
 400:	03753066 	cmneq	r5, #102	; 0x66
 404:	50675811 	rsbpl	r5, r7, r1, lsl r8
 408:	3d4d5c68 	stclcc	12, cr5, [sp, #-416]	; 0xfffffe60
 40c:	6c661103 	stfvse	f1, [r6], #-12
 410:	0303044b 	movweq	r0, #13387	; 0x344b
 414:	4066679d 	mlsmi	r6, sp, r7, r6
 418:	3d3d4b4b 	fldmdbxcc	sp!, {d4-d40}	;@ Deprecated
 41c:	4b693d3d 	blmi	1a4f918 <startup-0x1e5b06e8>
 420:	693d3d3d 	ldmdbvs	sp!, {r0, r2, r3, r4, r5, r8, sl, fp, ip, sp}
 424:	3d3d4b4b 	fldmdbxcc	sp!, {d4-d40}	;@ Deprecated
 428:	4b693d3d 	blmi	1a4f924 <startup-0x1e5b06dc>
 42c:	6a3d3d3d 	bvs	f4f928 <startup-0x1f0b06d8>
 430:	3d3d4b4b 	fldmdbxcc	sp!, {d4-d40}	;@ Deprecated
 434:	04673d3d 	strbteq	r3, [r7], #-3389	; 0xfffff2c3
 438:	e4720304 	ldrbt	r0, [r2], #-772	; 0xfffffcfc
 43c:	3e5a592f 	vnmlscc.f16	s11, s20, s31	; <UNPREDICTABLE>
 440:	67a16c3e 			; <UNDEFINED> instruction: 0x67a16c3e
 444:	02002f2f 	andeq	r2, r0, #47, 30	; 0xbc
 448:	20060104 	andcs	r0, r6, r4, lsl #2
 44c:	cf025b06 	svcgt	0x00025b06
 450:	92831402 	addls	r1, r3, #33554432	; 0x2000000
 454:	08142402 	ldmdaeq	r4, {r1, sl, sp}
 458:	04020075 	streq	r0, [r2], #-117	; 0xffffff8b
 45c:	0200b702 	andeq	fp, r0, #524288	; 0x80000
 460:	ac060104 	stfges	f0, [r6], {4}
 464:	02040200 	andeq	r0, r4, #0, 4
 468:	02008006 	andeq	r8, r0, #6
 46c:	ba060104 	blt	180884 <startup-0x1fe7f77c>
 470:	90090306 	andls	r0, r9, r6, lsl #6
 474:	83134102 	tsthi	r3, #-2147483648	; 0x80000000
 478:	91089292 			; <UNDEFINED> instruction: 0x91089292
 47c:	59089108 	stmdbpl	r8, {r3, r8, ip, pc}
 480:	08bbbbc9 	ldmeq	fp!, {r0, r3, r6, r7, r8, r9, fp, ip, sp, pc}
 484:	00bb0867 	adcseq	r0, fp, r7, ror #16
 488:	03020402 	movweq	r0, #9218	; 0x2402
 48c:	02008276 	andeq	r8, r0, #1610612743	; 0x60000007
 490:	ba060104 	blt	1808a8 <startup-0x1fe7f758>
 494:	02040200 	andeq	r0, r4, #0, 4
 498:	02009c06 	andeq	r9, r0, #1536	; 0x600
 49c:	ba060104 	blt	1808b4 <startup-0x1fe7f74c>
 4a0:	9e170306 	cdpls	3, 1, cr0, cr7, cr6, {0}
 4a4:	d708925c 	smlsdle	r8, ip, r2, r9
 4a8:	08152902 	ldmdaeq	r5, {r1, r8, fp, sp}
 4ac:	084c083e 	stmdaeq	ip, {r1, r2, r3, r4, r5, fp}^
 4b0:	020092a0 	andeq	r9, r0, #160, 4
 4b4:	08060104 	stmdaeq	r6, {r2, r8}
 4b8:	2202064a 	andcs	r0, r2, #77594624	; 0x4a00000
 4bc:	08cc0814 	stmiaeq	ip, {r2, r4, fp}^
 4c0:	040200bc 	streq	r0, [r2], #-188	; 0xffffff44
 4c4:	4a080601 	bmi	201cd0 <startup-0x1fdfe330>
 4c8:	02040200 	andeq	r0, r4, #0, 4
 4cc:	2e760306 	cdpcs	3, 7, cr0, cr6, cr6, {0}
 4d0:	01040200 	mrseq	r0, R12_usr
 4d4:	0200ba06 	andeq	fp, r0, #24576	; 0x6000
 4d8:	03060204 	movweq	r0, #25092	; 0x6204
 4dc:	0200c874 	andeq	ip, r0, #116, 16	; 0x740000
 4e0:	ba060104 	blt	1808f8 <startup-0x1fe7f708>
 4e4:	000602c8 	andeq	r0, r6, r8, asr #5
 4e8:	04040101 	streq	r0, [r4], #-257	; 0xfffffeff
 4ec:	00020500 	andeq	r0, r2, r0, lsl #10
 4f0:	03200000 	nopeq	{0}	; <UNPREDICTABLE>
 4f4:	5e13010d 	mufpls	f0, f3, #5.0
 4f8:	01000302 	tsteq	r0, r2, lsl #6
 4fc:	0002b501 	andeq	fp, r2, r1, lsl #10
 500:	c9000200 	stmdbgt	r0, {r9}
 504:	02000001 	andeq	r0, r0, #1
 508:	0d0efb01 	vstreq	d15, [lr, #-4]
 50c:	01010100 	mrseq	r0, (UNDEF: 17)
 510:	00000001 	andeq	r0, r0, r1
 514:	01000001 	tsteq	r0, r1
 518:	552f3a43 	strpl	r3, [pc, #-2627]!	; fffffadd <GPIO_Ports+0xdfffcf8d>
 51c:	73726573 	cmnvc	r2, #482344960	; 0x1cc00000
 520:	6164412f 	cmnvs	r4, pc, lsr #2
 524:	4f2f746d 	svcmi	0x002f746d
 528:	7244656e 	subvc	r6, r4, #461373440	; 0x1b800000
 52c:	2f657669 	svccs	0x00657669
 530:	756b6f44 	strbvc	r6, [fp, #-3908]!	; 0xfffff0bc
 534:	746e656d 	strbtvc	r6, [lr], #-1389	; 0xfffffa93
 538:	7469472f 	strbtvc	r4, [r9], #-1839	; 0xfffff8d1
 53c:	2f627548 	svccs	0x00627548
 540:	32544144 	subscc	r4, r4, #68, 2
 544:	4c2d3039 	stcmi	0, cr3, [sp], #-228	; 0xffffff1c
 548:	736d7261 	cmnvc	sp, #268435462	; 0x10000006
 54c:	65747379 	ldrbvs	r7, [r4, #-889]!	; 0xfffffc87
 550:	6f6b2f6d 	svcvs	0x006b2f6d
 554:	696c2f64 	stmdbvs	ip!, {r2, r5, r6, r8, r9, sl, fp, sp}^
 558:	54532f62 	ldrbpl	r2, [r3], #-3938	; 0xfffff09e
 55c:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
 560:	696c5f34 	stmdbvs	ip!, {r2, r4, r5, r8, r9, sl, fp, ip, lr}^
 564:	54532f62 	ldrbpl	r2, [r3], #-3938	; 0xfffff09e
 568:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
 56c:	5f787834 	svcpl	0x00787834
 570:	50647453 	rsbpl	r7, r4, r3, asr r4
 574:	70697265 	rsbvc	r7, r9, r5, ror #4
 578:	72445f68 	subvc	r5, r4, #104, 30	; 0x1a0
 57c:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
 580:	6372732f 	cmnvs	r2, #-1140850688	; 0xbc000000
 584:	5c3a6300 	ldcpl	3, cr6, [sl], #-0
 588:	61657363 	cmnvs	r5, r3, ror #6
 58c:	635c7070 	cmpvs	ip, #112	; 0x70
 590:	6c65646f 	cfstrdvs	mvd6, [r5], #-444	; 0xfffffe44
 594:	5c657469 	cfstrdpl	mvd7, [r5], #-420	; 0xfffffe5c
 598:	6c6f6f74 	stclvs	15, cr6, [pc], #-464	; 3d0 <startup-0x1ffffc30>
 59c:	63675c73 	cmnvs	r7, #29440	; 0x7300
 5a0:	72612d63 	rsbvc	r2, r1, #6336	; 0x18c0
 5a4:	72615c6d 	rsbvc	r5, r1, #27904	; 0x6d00
 5a8:	6f6e2d6d 	svcvs	0x006e2d6d
 5ac:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
 5b0:	5c696261 	sfmpl	f6, 2, [r9], #-388	; 0xfffffe7c
 5b4:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
 5b8:	5c656475 	cfstrdpl	mvd6, [r5], #-468	; 0xfffffe2c
 5bc:	6863616d 	stmdavs	r3!, {r0, r2, r3, r5, r6, r8, sp, lr}^
 5c0:	00656e69 	rsbeq	r6, r5, r9, ror #28
 5c4:	635c3a63 	cmpvs	ip, #405504	; 0x63000
 5c8:	70616573 	rsbvc	r6, r1, r3, ror r5
 5cc:	6f635c70 	svcvs	0x00635c70
 5d0:	696c6564 	stmdbvs	ip!, {r2, r5, r6, r8, sl, sp, lr}^
 5d4:	745c6574 	ldrbvc	r6, [ip], #-1396	; 0xfffffa8c
 5d8:	736c6f6f 	cmnvc	ip, #444	; 0x1bc
 5dc:	6363675c 	cmnvs	r3, #92, 14	; 0x1700000
 5e0:	6d72612d 	ldfvse	f6, [r2, #-180]!	; 0xffffff4c
 5e4:	6d72615c 	ldfvse	f6, [r2, #-368]!	; 0xfffffe90
 5e8:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
 5ec:	61652d65 	cmnvs	r5, r5, ror #26
 5f0:	695c6962 	ldmdbvs	ip, {r1, r5, r6, r8, fp, sp, lr}^
 5f4:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
 5f8:	735c6564 	cmpvc	ip, #100, 10	; 0x19000000
 5fc:	2e007379 	mcrcs	3, 0, r7, cr0, cr9, {3}
 600:	696c2f2e 	stmdbvs	ip!, {r1, r2, r3, r5, r8, r9, sl, fp, sp}^
 604:	54532f62 	ldrbpl	r2, [r3], #-3938	; 0xfffff09e
 608:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
 60c:	696c5f34 	stmdbvs	ip!, {r2, r4, r5, r8, r9, sl, fp, ip, lr}^
 610:	4d432f62 	stclmi	15, cr2, [r3, #-392]	; 0xfffffe78
 614:	2f534953 	svccs	0x00534953
 618:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
 61c:	00656475 	rsbeq	r6, r5, r5, ror r4
 620:	6c2f2e2e 	stcvs	14, cr2, [pc], #-184	; 570 <startup-0x1ffffa90>
 624:	532f6269 			; <UNDEFINED> instruction: 0x532f6269
 628:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
 62c:	6c5f3446 	cfldrdvs	mvd3, [pc], {70}	; 0x46
 630:	532f6269 			; <UNDEFINED> instruction: 0x532f6269
 634:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
 638:	78783446 	ldmdavc	r8!, {r1, r2, r6, sl, ip, sp}^
 63c:	6474535f 	ldrbtvs	r5, [r4], #-863	; 0xfffffca1
 640:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
 644:	445f6870 	ldrbmi	r6, [pc], #-2160	; 64c <startup-0x1ffff9b4>
 648:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
 64c:	6e692f72 	mcrvs	15, 3, r2, cr9, cr2, {3}
 650:	73000063 	movwvc	r0, #99	; 0x63
 654:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
 658:	78783466 	ldmdavc	r8!, {r1, r2, r5, r6, sl, ip, sp}^
 65c:	6970675f 	ldmdbvs	r0!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, sp, lr}^
 660:	00632e6f 	rsbeq	r2, r3, pc, ror #28
 664:	5f000001 	svcpl	0x00000001
 668:	61666564 	cmnvs	r6, r4, ror #10
 66c:	5f746c75 	svcpl	0x00746c75
 670:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
 674:	00682e73 	rsbeq	r2, r8, r3, ror lr
 678:	5f000002 	svcpl	0x00000002
 67c:	69647473 	stmdbvs	r4!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
 680:	682e746e 	stmdavs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
 684:	00000300 	andeq	r0, r0, r0, lsl #6
 688:	65726f63 	ldrbvs	r6, [r2, #-3939]!	; 0xfffff09d
 68c:	346d635f 	strbtcc	r6, [sp], #-863	; 0xfffffca1
 690:	0400682e 	streq	r6, [r0], #-2094	; 0xfffff7d2
 694:	79730000 	ldmdbvc	r3!, {}^	; <UNPREDICTABLE>
 698:	6d657473 	cfstrdvs	mvd7, [r5, #-460]!	; 0xfffffe34
 69c:	6d74735f 	ldclvs	3, cr7, [r4, #-380]!	; 0xfffffe84
 6a0:	34663233 	strbtcc	r3, [r6], #-563	; 0xfffffdcd
 6a4:	682e7878 	stmdavs	lr!, {r3, r4, r5, r6, fp, ip, sp, lr}
 6a8:	00000500 	andeq	r0, r0, r0, lsl #10
 6ac:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
 6b0:	78346632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, sp, lr}
 6b4:	00682e78 	rsbeq	r2, r8, r8, ror lr
 6b8:	73000005 	movwvc	r0, #5
 6bc:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
 6c0:	78783466 	ldmdavc	r8!, {r1, r2, r5, r6, sl, ip, sp}^
 6c4:	6970675f 	ldmdbvs	r0!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, sp, lr}^
 6c8:	00682e6f 	rsbeq	r2, r8, pc, ror #28
 6cc:	00000005 	andeq	r0, r0, r5
 6d0:	e4020500 	str	r0, [r2], #-1280	; 0xfffffb00
 6d4:	03200017 			; <UNDEFINED> instruction: 0x03200017
 6d8:	4e0100ff 	mcrmi	0, 0, r0, cr1, cr15, {7}
 6dc:	38034b4c 	stmdacc	r3, {r2, r3, r6, r8, r9, fp, lr}
 6e0:	204a034a 	subcs	r0, sl, sl, asr #6
 6e4:	33034b4c 	movwcc	r4, #15180	; 0x3b4c
 6e8:	204f034a 	subcs	r0, pc, sl, asr #6
 6ec:	2e034b4c 	vmlscs.f64	d4, d3, d12
 6f0:	2054034a 	subscs	r0, r4, sl, asr #6
 6f4:	29034b4c 	stmdbcs	r3, {r2, r3, r6, r8, r9, fp, lr}
 6f8:	2059034a 	subscs	r0, r9, sl, asr #6
 6fc:	24034b4c 	strcs	r4, [r3], #-2892	; 0xfffff4b4
 700:	205e034a 	subscs	r0, lr, sl, asr #6
 704:	1f034b4c 	svcne	0x00034b4c
 708:	2063034a 	rsbcs	r0, r3, sl, asr #6
 70c:	1a034b4c 	bne	d3444 <startup-0x1ff2cbbc>
 710:	2068034a 	rsbcs	r0, r8, sl, asr #6
 714:	15034b4c 	strne	r4, [r3, #-2892]	; 0xfffff4b4
 718:	206e034a 	rsbcs	r0, lr, sl, asr #6
 71c:	0f03674c 	svceq	0x0003674c
 720:	20730366 	rsbscs	r0, r3, r6, ror #6
 724:	0a03674c 	beq	da45c <startup-0x1ff25ba4>
 728:	207a0366 	rsbscs	r0, sl, r6, ror #6
 72c:	0369674c 	cmneq	r9, #76, 14	; 0x1300000
 730:	5990080c 	ldmibpl	r0, {r2, r3, fp}
 734:	3e660a03 	vmulcc.f32	s1, s12, s6
 738:	ad4c5a5a 	vstrge	s11, [ip, #-360]	; 0xfffffe98
 73c:	040200bc 	streq	r0, [r2], #-188	; 0xffffff44
 740:	064a0601 	strbeq	r0, [sl], -r1, lsl #12
 744:	adc0ad50 	stclge	13, cr10, [r0, #320]	; 0x140
 748:	0200bbcc 	andeq	fp, r0, #204, 22	; 0x33000
 74c:	62030204 	andvs	r0, r3, #4, 4	; 0x40000000
 750:	040200ba 	streq	r0, [r2], #-186	; 0xffffff46
 754:	063c0601 	ldrteq	r0, [ip], -r1, lsl #12
 758:	523c2103 	eorspl	r2, ip, #-1073741824	; 0xc0000000
 75c:	3d3d3d4c 	ldccc	13, cr3, [sp, #-304]!	; 0xfffffed0
 760:	10033d3d 	andne	r3, r3, sp, lsr sp
 764:	5a427574 	bpl	109dd3c <startup-0x1ef622c4>
 768:	3e3e4c3e 	mrccc	12, 1, r4, cr14, cr14, {1}
 76c:	4a1c033d 	bmi	701468 <startup-0x1f8feb98>
 770:	5c685075 	stclpl	0, cr5, [r8], #-468	; 0xfffffe2c
 774:	0a033d4c 	beq	cfcac <startup-0x1ff30354>
 778:	033d4e4a 	teqeq	sp, #1184	; 0x4a0
 77c:	50754a0c 	rsbspl	r4, r5, ip, lsl #20
 780:	3d4c5c68 	stclcc	12, cr5, [ip, #-416]	; 0xfffffe60
 784:	4e4a0a03 	vmlami.f32	s1, s20, s6
 788:	4a0f033d 	bmi	3c1484 <startup-0x1fc3eb7c>
 78c:	0f034b79 	svceq	0x00034b79
 790:	034b794a 	movteq	r7, #47434	; 0xb94a
 794:	4cc04a10 	vstmiami	r0, {s9-s24}
 798:	034c1e50 	movteq	r1, #52816	; 0xce50
 79c:	4b784a0b 	blmi	1e12fd0 <startup-0x1e1ed030>
 7a0:	784a0b03 	stmdavc	sl, {r0, r1, r8, r9, fp}^
 7a4:	00ce0375 	sbceq	r0, lr, r5, ror r3
 7a8:	352fbb4a 	strcc	fp, [pc, #-2890]!	; fffffc66 <GPIO_Ports+0xdfffd116>
 7ac:	bbc9089f 	bllt	ff242a30 <GPIO_Ports+0xdf23fee0>
 7b0:	0004029f 	muleq	r4, pc, r2	; <UNPREDICTABLE>
 7b4:	01fa0101 	mvnseq	r0, r1, lsl #2
 7b8:	00020000 	andeq	r0, r2, r0
 7bc:	000001b5 			; <UNDEFINED> instruction: 0x000001b5
 7c0:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
 7c4:	0101000d 	tsteq	r1, sp
 7c8:	00000101 	andeq	r0, r0, r1, lsl #2
 7cc:	00000100 	andeq	r0, r0, r0, lsl #2
 7d0:	2f3a4301 	svccs	0x003a4301
 7d4:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
 7d8:	64412f73 	strbvs	r2, [r1], #-3955	; 0xfffff08d
 7dc:	2f746d61 	svccs	0x00746d61
 7e0:	44656e4f 	strbtmi	r6, [r5], #-3663	; 0xfffff1b1
 7e4:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
 7e8:	6b6f442f 	blvs	1bd18ac <startup-0x1e42e754>
 7ec:	6e656d75 	mcrvs	13, 3, r6, cr5, cr5, {3}
 7f0:	69472f74 	stmdbvs	r7, {r2, r4, r5, r6, r8, r9, sl, fp, sp}^
 7f4:	62754874 	rsbsvs	r4, r5, #116, 16	; 0x740000
 7f8:	5441442f 	strbpl	r4, [r1], #-1071	; 0xfffffbd1
 7fc:	2d303932 			; <UNDEFINED> instruction: 0x2d303932
 800:	6d72614c 	ldfvse	f6, [r2, #-304]!	; 0xfffffed0
 804:	74737973 	ldrbtvc	r7, [r3], #-2419	; 0xfffff68d
 808:	6b2f6d65 	blvs	bdbda4 <startup-0x1f42425c>
 80c:	6c2f646f 	cfstrsvs	mvf6, [pc], #-444	; 658 <startup-0x1ffff9a8>
 810:	532f6269 			; <UNDEFINED> instruction: 0x532f6269
 814:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
 818:	6c5f3446 	cfldrdvs	mvd3, [pc], {70}	; 0x46
 81c:	532f6269 			; <UNDEFINED> instruction: 0x532f6269
 820:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
 824:	78783446 	ldmdavc	r8!, {r1, r2, r6, sl, ip, sp}^
 828:	6474535f 	ldrbtvs	r5, [r4], #-863	; 0xfffffca1
 82c:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
 830:	445f6870 	ldrbmi	r6, [pc], #-2160	; 838 <startup-0x1ffff7c8>
 834:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
 838:	72732f72 	rsbsvc	r2, r3, #456	; 0x1c8
 83c:	3a630063 	bcc	18c09d0 <startup-0x1e73f630>
 840:	6573635c 	ldrbvs	r6, [r3, #-860]!	; 0xfffffca4
 844:	5c707061 	ldclpl	0, cr7, [r0], #-388	; 0xfffffe7c
 848:	65646f63 	strbvs	r6, [r4, #-3939]!	; 0xfffff09d
 84c:	6574696c 	ldrbvs	r6, [r4, #-2412]!	; 0xfffff694
 850:	6f6f745c 	svcvs	0x006f745c
 854:	675c736c 	ldrbvs	r7, [ip, -ip, ror #6]
 858:	612d6363 			; <UNDEFINED> instruction: 0x612d6363
 85c:	615c6d72 	cmpvs	ip, r2, ror sp
 860:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
 864:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
 868:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
 86c:	636e695c 	cmnvs	lr, #92, 18	; 0x170000
 870:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
 874:	63616d5c 	cmnvs	r1, #92, 26	; 0x1700
 878:	656e6968 	strbvs	r6, [lr, #-2408]!	; 0xfffff698
 87c:	5c3a6300 	ldcpl	3, cr6, [sl], #-0
 880:	61657363 	cmnvs	r5, r3, ror #6
 884:	635c7070 	cmpvs	ip, #112	; 0x70
 888:	6c65646f 	cfstrdvs	mvd6, [r5], #-444	; 0xfffffe44
 88c:	5c657469 	cfstrdpl	mvd7, [r5], #-420	; 0xfffffe5c
 890:	6c6f6f74 	stclvs	15, cr6, [pc], #-464	; 6c8 <startup-0x1ffff938>
 894:	63675c73 	cmnvs	r7, #29440	; 0x7300
 898:	72612d63 	rsbvc	r2, r1, #6336	; 0x18c0
 89c:	72615c6d 	rsbvc	r5, r1, #27904	; 0x6d00
 8a0:	6f6e2d6d 	svcvs	0x006e2d6d
 8a4:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
 8a8:	5c696261 	sfmpl	f6, 2, [r9], #-388	; 0xfffffe7c
 8ac:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
 8b0:	5c656475 	cfstrdpl	mvd6, [r5], #-468	; 0xfffffe2c
 8b4:	00737973 	rsbseq	r7, r3, r3, ror r9
 8b8:	6c2f2e2e 	stcvs	14, cr2, [pc], #-184	; 808 <startup-0x1ffff7f8>
 8bc:	532f6269 			; <UNDEFINED> instruction: 0x532f6269
 8c0:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
 8c4:	6c5f3446 	cfldrdvs	mvd3, [pc], {70}	; 0x46
 8c8:	432f6269 			; <UNDEFINED> instruction: 0x432f6269
 8cc:	5349534d 	movtpl	r5, #37709	; 0x934d
 8d0:	636e692f 	cmnvs	lr, #770048	; 0xbc000
 8d4:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
 8d8:	2f2e2e00 	svccs	0x002e2e00
 8dc:	2f62696c 	svccs	0x0062696c
 8e0:	334d5453 	movtcc	r5, #54355	; 0xd453
 8e4:	5f344632 	svcpl	0x00344632
 8e8:	2f62696c 	svccs	0x0062696c
 8ec:	334d5453 	movtcc	r5, #54355	; 0xd453
 8f0:	78344632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, lr}
 8f4:	74535f78 	ldrbvc	r5, [r3], #-3960	; 0xfffff088
 8f8:	72655064 	rsbvc	r5, r5, #100	; 0x64
 8fc:	5f687069 	svcpl	0x00687069
 900:	76697244 	strbtvc	r7, [r9], -r4, asr #4
 904:	692f7265 	stmdbvs	pc!, {r0, r2, r5, r6, r9, ip, sp, lr}	; <UNPREDICTABLE>
 908:	0000636e 	andeq	r6, r0, lr, ror #6
 90c:	6373696d 	cmnvs	r3, #1785856	; 0x1b4000
 910:	0100632e 	tsteq	r0, lr, lsr #6
 914:	645f0000 	ldrbvs	r0, [pc], #-0	; 91c <startup-0x1ffff6e4>
 918:	75616665 	strbvc	r6, [r1, #-1637]!	; 0xfffff99b
 91c:	745f746c 	ldrbvc	r7, [pc], #-1132	; 924 <startup-0x1ffff6dc>
 920:	73657079 	cmnvc	r5, #121	; 0x79
 924:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
 928:	735f0000 	cmpvc	pc, #0
 92c:	6e696474 	mcrvs	4, 3, r6, cr9, cr4, {3}
 930:	00682e74 	rsbeq	r2, r8, r4, ror lr
 934:	63000003 	movwvs	r0, #3
 938:	5f65726f 	svcpl	0x0065726f
 93c:	2e346d63 	cdpcs	13, 3, cr6, cr4, cr3, {3}
 940:	00040068 	andeq	r0, r4, r8, rrx
 944:	73797300 	cmnvc	r9, #0, 6
 948:	5f6d6574 	svcpl	0x006d6574
 94c:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
 950:	78346632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, sp, lr}
 954:	00682e78 	rsbeq	r2, r8, r8, ror lr
 958:	73000005 	movwvc	r0, #5
 95c:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
 960:	78783466 	ldmdavc	r8!, {r1, r2, r5, r6, sl, ip, sp}^
 964:	0500682e 	streq	r6, [r0, #-2094]	; 0xfffff7d2
 968:	696d0000 	stmdbvs	sp!, {}^	; <UNPREDICTABLE>
 96c:	682e6373 	stmdavs	lr!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}
 970:	00000500 	andeq	r0, r0, r0, lsl #10
 974:	02050000 	andeq	r0, r5, #0
 978:	20001cf4 	strdcs	r1, [r0], -r4
 97c:	0100f603 	tsteq	r0, r3, lsl #12	; <UNPREDICTABLE>
 980:	0c03594f 			; <UNDEFINED> instruction: 0x0c03594f
 984:	4dc14b90 	vstrmi	d20, [r1, #576]	; 0x240
 988:	9192759f 			; <UNDEFINED> instruction: 0x9192759f
 98c:	57b05aae 	ldrpl	r5, [r0, lr, lsr #21]!
 990:	09032d67 	stmdbeq	r3, {r0, r1, r2, r5, r6, r8, sl, fp, sp}
 994:	67571e2e 	ldrbvs	r1, [r7, -lr, lsr #28]
 998:	0c034d2d 	stceq	13, cr4, [r3], {45}	; 0x2d
 99c:	03835d90 	orreq	r5, r3, #144, 26	; 0x2400
 9a0:	4c95900d 	ldcmi	0, cr9, [r5], {13}
 9a4:	03841e7a 	orreq	r1, r4, #1952	; 0x7a0
 9a8:	3e4d740b 	cdpcc	4, 4, cr7, cr13, cr11, {0}
 9ac:	02681e6c 	rsbeq	r1, r8, #108, 28	; 0x6c0
 9b0:	01010006 	tsteq	r1, r6
 9b4:	0000014e 	andeq	r0, r0, lr, asr #2
 9b8:	01080002 	tsteq	r8, r2
 9bc:	01020000 	mrseq	r0, (UNDEF: 2)
 9c0:	000d0efb 	strdeq	r0, [sp], -fp
 9c4:	01010101 	tsteq	r1, r1, lsl #2
 9c8:	01000000 	mrseq	r0, (UNDEF: 0)
 9cc:	43010000 	movwmi	r0, #4096	; 0x1000
 9d0:	73552f3a 	cmpvc	r5, #58, 30	; 0xe8
 9d4:	2f737265 	svccs	0x00737265
 9d8:	6d616441 	cfstrdvs	mvd6, [r1, #-260]!	; 0xfffffefc
 9dc:	6e4f2f74 	mcrvs	15, 2, r2, cr15, cr4, {3}
 9e0:	69724465 	ldmdbvs	r2!, {r0, r2, r5, r6, sl, lr}^
 9e4:	442f6576 	strtmi	r6, [pc], #-1398	; 9ec <startup-0x1ffff614>
 9e8:	6d756b6f 	fldmdbxvs	r5!, {d22-d76}	;@ Deprecated
 9ec:	2f746e65 	svccs	0x00746e65
 9f0:	48746947 	ldmdami	r4!, {r0, r1, r2, r6, r8, fp, sp, lr}^
 9f4:	442f6275 	strtmi	r6, [pc], #-629	; 9fc <startup-0x1ffff604>
 9f8:	39325441 	ldmdbcc	r2!, {r0, r6, sl, ip, lr}
 9fc:	614c2d30 	cmpvs	ip, r0, lsr sp
 a00:	79736d72 	ldmdbvc	r3!, {r1, r4, r5, r6, r8, sl, fp, sp, lr}^
 a04:	6d657473 	cfstrdvs	mvd7, [r5, #-460]!	; 0xfffffe34
 a08:	646f6b2f 	strbtvs	r6, [pc], #-2863	; a10 <startup-0x1ffff5f0>
 a0c:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
 a10:	5c3a6300 	ldcpl	3, cr6, [sl], #-0
 a14:	61657363 	cmnvs	r5, r3, ror #6
 a18:	635c7070 	cmpvs	ip, #112	; 0x70
 a1c:	6c65646f 	cfstrdvs	mvd6, [r5], #-444	; 0xfffffe44
 a20:	5c657469 	cfstrdpl	mvd7, [r5], #-420	; 0xfffffe5c
 a24:	6c6f6f74 	stclvs	15, cr6, [pc], #-464	; 85c <startup-0x1ffff7a4>
 a28:	63675c73 	cmnvs	r7, #29440	; 0x7300
 a2c:	72612d63 	rsbvc	r2, r1, #6336	; 0x18c0
 a30:	72615c6d 	rsbvc	r5, r1, #27904	; 0x6d00
 a34:	6f6e2d6d 	svcvs	0x006e2d6d
 a38:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
 a3c:	5c696261 	sfmpl	f6, 2, [r9], #-388	; 0xfffffe7c
 a40:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
 a44:	5c656475 	cfstrdpl	mvd6, [r5], #-468	; 0xfffffe2c
 a48:	6863616d 	stmdavs	r3!, {r0, r2, r3, r5, r6, r8, sp, lr}^
 a4c:	00656e69 	rsbeq	r6, r5, r9, ror #28
 a50:	635c3a63 	cmpvs	ip, #405504	; 0x63000
 a54:	70616573 	rsbvc	r6, r1, r3, ror r5
 a58:	6f635c70 	svcvs	0x00635c70
 a5c:	696c6564 	stmdbvs	ip!, {r2, r5, r6, r8, sl, sp, lr}^
 a60:	745c6574 	ldrbvc	r6, [ip], #-1396	; 0xfffffa8c
 a64:	736c6f6f 	cmnvc	ip, #444	; 0x1bc
 a68:	6363675c 	cmnvs	r3, #92, 14	; 0x1700000
 a6c:	6d72612d 	ldfvse	f6, [r2, #-180]!	; 0xffffff4c
 a70:	6d72615c 	ldfvse	f6, [r2, #-368]!	; 0xfffffe90
 a74:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
 a78:	61652d65 	cmnvs	r5, r5, ror #26
 a7c:	695c6962 	ldmdbvs	ip, {r1, r5, r6, r8, fp, sp, lr}^
 a80:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
 a84:	735c6564 	cmpvc	ip, #100, 10	; 0x19000000
 a88:	00007379 	andeq	r7, r0, r9, ror r3
 a8c:	66667562 	strbtvs	r7, [r6], -r2, ror #10
 a90:	632e7265 			; <UNDEFINED> instruction: 0x632e7265
 a94:	00000100 	andeq	r0, r0, r0, lsl #2
 a98:	6665645f 			; <UNDEFINED> instruction: 0x6665645f
 a9c:	746c7561 	strbtvc	r7, [ip], #-1377	; 0xfffffa9f
 aa0:	7079745f 	rsbsvc	r7, r9, pc, asr r4
 aa4:	682e7365 	stmdavs	lr!, {r0, r2, r5, r6, r8, r9, ip, sp, lr}
 aa8:	00000200 	andeq	r0, r0, r0, lsl #4
 aac:	6474735f 	ldrbtvs	r7, [r4], #-863	; 0xfffffca1
 ab0:	2e746e69 	cdpcs	14, 7, cr6, cr4, cr9, {3}
 ab4:	00030068 	andeq	r0, r3, r8, rrx
 ab8:	66756200 	ldrbtvs	r6, [r5], -r0, lsl #4
 abc:	2e726566 	cdpcs	5, 7, cr6, cr2, cr6, {3}
 ac0:	00010068 	andeq	r0, r1, r8, rrx
 ac4:	05000000 	streq	r0, [r0, #-0]
 ac8:	001eb802 	andseq	fp, lr, r2, lsl #16
 acc:	4b4b1520 	blmi	12c5f54 <startup-0x1ed3a0ac>
 ad0:	764e4b4b 	strbvc	r4, [lr], -fp, asr #22
 ad4:	85c93259 	strbhi	r3, [r9, #601]	; 0x259
 ad8:	4e214c59 	mcrmi	12, 1, r4, cr1, cr9, {2}
 adc:	0402007a 	streq	r0, [r2], #-122	; 0xffffff86
 ae0:	00580601 	subseq	r0, r8, r1, lsl #12
 ae4:	66020402 	strvs	r0, [r2], -r2, lsl #8
 ae8:	04040200 	streq	r0, [r4], #-512	; 0xfffffe00
 aec:	04020020 	streq	r0, [r2], #-32	; 0xffffffe0
 af0:	003f0604 	eorseq	r0, pc, r4, lsl #12
 af4:	67040402 	strvs	r0, [r4, -r2, lsl #8]
 af8:	32595a4e 	subscc	r5, r9, #319488	; 0x4e000
 afc:	4c5985c9 	cfldr64mi	mvdx8, [r9], {201}	; 0xc9
 b00:	00040221 	andeq	r0, r4, r1, lsr #4
 b04:	034f0101 	movteq	r0, #61697	; 0xf101
 b08:	00020000 	andeq	r0, r2, r0
 b0c:	000001de 	ldrdeq	r0, [r0], -lr
 b10:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
 b14:	0101000d 	tsteq	r1, sp
 b18:	00000101 	andeq	r0, r0, r1, lsl #2
 b1c:	00000100 	andeq	r0, r0, r0, lsl #2
 b20:	2f3a4301 	svccs	0x003a4301
 b24:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
 b28:	64412f73 	strbvs	r2, [r1], #-3955	; 0xfffff08d
 b2c:	2f746d61 	svccs	0x00746d61
 b30:	44656e4f 	strbtmi	r6, [r5], #-3663	; 0xfffff1b1
 b34:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
 b38:	6b6f442f 	blvs	1bd1bfc <startup-0x1e42e404>
 b3c:	6e656d75 	mcrvs	13, 3, r6, cr5, cr5, {3}
 b40:	69472f74 	stmdbvs	r7, {r2, r4, r5, r6, r8, r9, sl, fp, sp}^
 b44:	62754874 	rsbsvs	r4, r5, #116, 16	; 0x740000
 b48:	5441442f 	strbpl	r4, [r1], #-1071	; 0xfffffbd1
 b4c:	2d303932 			; <UNDEFINED> instruction: 0x2d303932
 b50:	6d72614c 	ldfvse	f6, [r2, #-304]!	; 0xfffffed0
 b54:	74737973 	ldrbtvc	r7, [r3], #-2419	; 0xfffff68d
 b58:	6b2f6d65 	blvs	bdc0f4 <startup-0x1f423f0c>
 b5c:	6c2f646f 	cfstrsvs	mvf6, [pc], #-444	; 9a8 <startup-0x1ffff658>
 b60:	532f6269 			; <UNDEFINED> instruction: 0x532f6269
 b64:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
 b68:	6c5f3446 	cfldrdvs	mvd3, [pc], {70}	; 0x46
 b6c:	532f6269 			; <UNDEFINED> instruction: 0x532f6269
 b70:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
 b74:	78783446 	ldmdavc	r8!, {r1, r2, r6, sl, ip, sp}^
 b78:	6474535f 	ldrbtvs	r5, [r4], #-863	; 0xfffffca1
 b7c:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
 b80:	445f6870 	ldrbmi	r6, [pc], #-2160	; b88 <startup-0x1ffff478>
 b84:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
 b88:	72732f72 	rsbsvc	r2, r3, #456	; 0x1c8
 b8c:	3a630063 	bcc	18c0d20 <startup-0x1e73f2e0>
 b90:	6573635c 	ldrbvs	r6, [r3, #-860]!	; 0xfffffca4
 b94:	5c707061 	ldclpl	0, cr7, [r0], #-388	; 0xfffffe7c
 b98:	65646f63 	strbvs	r6, [r4, #-3939]!	; 0xfffff09d
 b9c:	6574696c 	ldrbvs	r6, [r4, #-2412]!	; 0xfffff694
 ba0:	6f6f745c 	svcvs	0x006f745c
 ba4:	675c736c 	ldrbvs	r7, [ip, -ip, ror #6]
 ba8:	612d6363 			; <UNDEFINED> instruction: 0x612d6363
 bac:	615c6d72 	cmpvs	ip, r2, ror sp
 bb0:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
 bb4:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
 bb8:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
 bbc:	636e695c 	cmnvs	lr, #92, 18	; 0x170000
 bc0:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
 bc4:	63616d5c 	cmnvs	r1, #92, 26	; 0x1700
 bc8:	656e6968 	strbvs	r6, [lr, #-2408]!	; 0xfffff698
 bcc:	5c3a6300 	ldcpl	3, cr6, [sl], #-0
 bd0:	61657363 	cmnvs	r5, r3, ror #6
 bd4:	635c7070 	cmpvs	ip, #112	; 0x70
 bd8:	6c65646f 	cfstrdvs	mvd6, [r5], #-444	; 0xfffffe44
 bdc:	5c657469 	cfstrdpl	mvd7, [r5], #-420	; 0xfffffe5c
 be0:	6c6f6f74 	stclvs	15, cr6, [pc], #-464	; a18 <startup-0x1ffff5e8>
 be4:	63675c73 	cmnvs	r7, #29440	; 0x7300
 be8:	72612d63 	rsbvc	r2, r1, #6336	; 0x18c0
 bec:	72615c6d 	rsbvc	r5, r1, #27904	; 0x6d00
 bf0:	6f6e2d6d 	svcvs	0x006e2d6d
 bf4:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
 bf8:	5c696261 	sfmpl	f6, 2, [r9], #-388	; 0xfffffe7c
 bfc:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
 c00:	5c656475 	cfstrdpl	mvd6, [r5], #-468	; 0xfffffe2c
 c04:	00737973 	rsbseq	r7, r3, r3, ror r9
 c08:	6c2f2e2e 	stcvs	14, cr2, [pc], #-184	; b58 <startup-0x1ffff4a8>
 c0c:	532f6269 			; <UNDEFINED> instruction: 0x532f6269
 c10:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
 c14:	6c5f3446 	cfldrdvs	mvd3, [pc], {70}	; 0x46
 c18:	432f6269 			; <UNDEFINED> instruction: 0x432f6269
 c1c:	5349534d 	movtpl	r5, #37709	; 0x934d
 c20:	636e692f 	cmnvs	lr, #770048	; 0xbc000
 c24:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
 c28:	2f2e2e00 	svccs	0x002e2e00
 c2c:	2f62696c 	svccs	0x0062696c
 c30:	334d5453 	movtcc	r5, #54355	; 0xd453
 c34:	5f344632 	svcpl	0x00344632
 c38:	2f62696c 	svccs	0x0062696c
 c3c:	334d5453 	movtcc	r5, #54355	; 0xd453
 c40:	78344632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, lr}
 c44:	74535f78 	ldrbvc	r5, [r3], #-3960	; 0xfffff088
 c48:	72655064 	rsbvc	r5, r5, #100	; 0x64
 c4c:	5f687069 	svcpl	0x00687069
 c50:	76697244 	strbtvc	r7, [r9], -r4, asr #4
 c54:	692f7265 	stmdbvs	pc!, {r0, r2, r5, r6, r9, ip, sp, lr}	; <UNPREDICTABLE>
 c58:	0000636e 	andeq	r6, r0, lr, ror #6
 c5c:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
 c60:	78346632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, sp, lr}
 c64:	73755f78 	cmnvc	r5, #120, 30	; 0x1e0
 c68:	2e747261 	cdpcs	2, 7, cr7, cr4, cr1, {3}
 c6c:	00010063 	andeq	r0, r1, r3, rrx
 c70:	65645f00 	strbvs	r5, [r4, #-3840]!	; 0xfffff100
 c74:	6c756166 	ldfvse	f6, [r5], #-408	; 0xfffffe68
 c78:	79745f74 	ldmdbvc	r4!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
 c7c:	2e736570 	mrccs	5, 3, r6, cr3, cr0, {3}
 c80:	00020068 	andeq	r0, r2, r8, rrx
 c84:	74735f00 	ldrbtvc	r5, [r3], #-3840	; 0xfffff100
 c88:	746e6964 	strbtvc	r6, [lr], #-2404	; 0xfffff69c
 c8c:	0300682e 	movweq	r6, #2094	; 0x82e
 c90:	6f630000 	svcvs	0x00630000
 c94:	635f6572 	cmpvs	pc, #478150656	; 0x1c800000
 c98:	682e346d 	stmdavs	lr!, {r0, r2, r3, r5, r6, sl, ip, sp}
 c9c:	00000400 	andeq	r0, r0, r0, lsl #8
 ca0:	74737973 	ldrbtvc	r7, [r3], #-2419	; 0xfffff68d
 ca4:	735f6d65 	cmpvc	pc, #6464	; 0x1940
 ca8:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
 cac:	78783466 	ldmdavc	r8!, {r1, r2, r5, r6, sl, ip, sp}^
 cb0:	0500682e 	streq	r6, [r0, #-2094]	; 0xfffff7d2
 cb4:	74730000 	ldrbtvc	r0, [r3], #-0
 cb8:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
 cbc:	2e787834 	mrccs	8, 3, r7, cr8, cr4, {1}
 cc0:	00050068 	andeq	r0, r5, r8, rrx
 cc4:	6d747300 	ldclvs	3, cr7, [r4, #-0]
 cc8:	34663233 	strbtcc	r3, [r6], #-563	; 0xfffffdcd
 ccc:	755f7878 	ldrbvc	r7, [pc, #-2168]	; 45c <startup-0x1ffffba4>
 cd0:	74726173 	ldrbtvc	r6, [r2], #-371	; 0xfffffe8d
 cd4:	0500682e 	streq	r6, [r0, #-2094]	; 0xfffff7d2
 cd8:	74730000 	ldrbtvc	r0, [r3], #-0
 cdc:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
 ce0:	5f787834 	svcpl	0x00787834
 ce4:	2e636372 	mcrcs	3, 3, r6, cr3, cr2, {3}
 ce8:	00050068 	andeq	r0, r5, r8, rrx
 cec:	05000000 	streq	r0, [r0, #-0]
 cf0:	001fe002 	andseq	lr, pc, r2
 cf4:	01bb0320 			; <UNDEFINED> instruction: 0x01bb0320
 cf8:	4b4c4e01 	blmi	1314504 <startup-0x1ecebafc>
 cfc:	034a2803 	movteq	r2, #43011	; 0xa803
 d00:	674c205a 	smlsldvs	r2, ip, sl, r0
 d04:	03662303 	cmneq	r6, #201326592	; 0xc000000
 d08:	674c205f 	smlsldvs	r2, ip, pc, r0	; <UNPREDICTABLE>
 d0c:	03661e03 	cmneq	r6, #3, 28	; 0x30
 d10:	674c2064 	strbvs	r2, [ip, -r4, rrx]
 d14:	03661903 	cmneq	r6, #49152	; 0xc000
 d18:	674c2069 	strbvs	r2, [ip, -r9, rrx]
 d1c:	03661403 	cmneq	r6, #50331648	; 0x3000000
 d20:	4b4c206e 	blmi	1308ee0 <startup-0x1ecf7120>
 d24:	034a0f03 	movteq	r0, #44803	; 0xaf03
 d28:	674c2073 	smlsldxvs	r2, ip, r3, r0
 d2c:	03660a03 	cmneq	r6, #12288	; 0x3000
 d30:	674c207a 	smlsldxvs	r2, ip, sl, r0
 d34:	080c0369 	stmdaeq	ip, {r0, r3, r5, r6, r8, r9}
 d38:	2f4b594a 	svccs	0x004b594a
 d3c:	4d2e1303 	stcmi	3, cr1, [lr, #-12]!
 d40:	4d4d694e 	vstrmi.16	s13, [sp, #-156]	; 0xffffff64	; <UNPREDICTABLE>
 d44:	6a2d6750 	bvs	b5aa8c <startup-0x1f4a5574>
 d48:	694e4d4d 	stmdbvs	lr, {r0, r2, r3, r6, r8, sl, fp, lr}^
 d4c:	02005a4e 	andeq	r5, r0, #319488	; 0x4e000
 d50:	4a060104 	bmi	181168 <startup-0x1fe7ee98>
 d54:	4e5c4c06 	cdpmi	12, 5, cr4, cr12, cr6, {0}
 d58:	85e6f769 	strbhi	pc, [r6, #1897]!	; 0x769	; <UNPREDICTABLE>
 d5c:	dae86877 	ble	ffa1af40 <GPIO_Ports+0xdfa183f0>
 d60:	d609034b 	strle	r0, [r9], -fp, asr #6
 d64:	3d3d4b4c 	vldmdbcc	sp!, {d4-<overflow reg d41>}
 d68:	033d3d3d 	teqeq	sp, #3904	; 0xf40
 d6c:	03594a0c 	cmpeq	r9, #12, 20	; 0xc000
 d70:	504c2e09 	subpl	r2, ip, r9, lsl #28
 d74:	4b3fab4b 	blmi	febaa8 <startup-0x1f014558>
 d78:	4c660903 			; <UNDEFINED> instruction: 0x4c660903
 d7c:	3d3d3d3d 	ldccc	13, cr3, [sp, #-244]!	; 0xffffff0c
 d80:	794a0b03 	stmdbvc	sl, {r0, r1, r8, r9, fp}^
 d84:	841e974d 	ldrhi	r9, [lr], #-1869	; 0xfffff8b3
 d88:	79740b03 	ldmdbvc	r4!, {r0, r1, r8, r9, fp}^
 d8c:	0d039f84 	stceq	15, cr9, [r3, #-528]	; 0xfffffdf0
 d90:	894d794a 	stmdbhi	sp, {r1, r3, r6, r8, fp, ip, sp, lr}^
 d94:	0b03841e 	bleq	e1e14 <startup-0x1ff1e1ec>
 d98:	974d7974 	smlsldxls	r7, sp, r4, r9
 d9c:	2a03841e 	bcs	e1e1c <startup-0x1ff1e1e4>
 da0:	03757a74 	cmneq	r5, #116, 20	; 0x74000
 da4:	674f4a09 	strbvs	r4, [pc, -r9, lsl #20]
 da8:	7a4a2e03 	bvc	128c5bc <startup-0x1ed73a44>
 dac:	0b039f84 	bleq	e8bc4 <startup-0x1ff1743c>
 db0:	894d794a 	stmdbhi	sp, {r1, r3, r6, r8, fp, ip, sp, lr}^
 db4:	0c03841e 	cfstrseq	mvf8, [r3], {30}
 db8:	9183794a 	orrls	r7, r3, sl, asr #18
 dbc:	79743e03 	ldmdbvc	r4!, {r0, r1, r9, sl, fp, ip, sp}^
 dc0:	0b039183 	bleq	e53d4 <startup-0x1ff1ac2c>
 dc4:	974d794a 	strbls	r7, [sp, -sl, asr #18]
 dc8:	0903841e 	stmdbeq	r3, {r1, r2, r3, r4, sl, pc}
 dcc:	03834f74 	orreq	r4, r3, #116, 30	; 0x1d0
 dd0:	4d794a2f 	vldmdbmi	r9!, {s9-s55}
 dd4:	03841e89 	orreq	r1, r4, #2192	; 0x890
 dd8:	794a00c5 	stmdbvc	sl, {r0, r2, r6, r7}^
 ddc:	0b03bb84 	bleq	efbf4 <startup-0x1ff1040c>
 de0:	894d784a 	stmdbhi	sp, {r1, r3, r6, fp, ip, sp, lr}^
 de4:	0b03841e 	bleq	e1e64 <startup-0x1ff1e19c>
 de8:	894d784a 	stmdbhi	sp, {r1, r3, r6, fp, ip, sp, lr}^
 dec:	3903841e 	stmdbcc	r3, {r1, r2, r3, r4, sl, pc}
 df0:	9183794a 	orrls	r7, r3, sl, asr #18
 df4:	794a0b03 	stmdbvc	sl, {r0, r1, r8, r9, fp}^
 df8:	841e894d 	ldrhi	r8, [lr], #-2381	; 0xfffff6b3
 dfc:	c04a1f03 	subgt	r1, sl, r3, lsl #30
 e00:	ae1e984e 	cdpge	8, 1, cr9, cr14, cr14, {2}
 e04:	4a00f203 	bmi	3d618 <startup-0x1ffc29e8>
 e08:	0c0367bb 	stceq	7, cr6, [r3], {187}	; 0xbb
 e0c:	5969312e 	stmdbpl	r9!, {r1, r2, r3, r5, r8, ip, sp}^
 e10:	3e4c3e5a 	mcrcc	14, 2, r3, cr12, cr10, {2}
 e14:	6c4c3e4e 	mcrrvs	14, 4, r3, ip, cr14
 e18:	1503761e 	strne	r7, [r3, #-1566]	; 0xfffff9e2
 e1c:	0b03754a 	bleq	de34c <startup-0x1ff21cb4>
 e20:	4c5c924a 	lfmmi	f1, 3, [ip], {74}	; 0x4a
 e24:	4a1c033d 	bmi	701b20 <startup-0x1f8fe4e0>
 e28:	67740b03 	ldrbvs	r0, [r4, -r3, lsl #22]!
 e2c:	754a1603 	strbvc	r1, [sl, #-1539]	; 0xfffff9fd
 e30:	4a0c0367 	bmi	301bd4 <startup-0x1fcfe42c>
 e34:	3e5a5968 	vnmlacc.f16	s11, s20, s17	; <UNPREDICTABLE>
 e38:	77863e84 	strvc	r3, [r6, r4, lsl #29]
 e3c:	00755959 	rsbseq	r5, r5, r9, asr r9
 e40:	06010402 	streq	r0, [r1], -r2, lsl #8
 e44:	5c3e063c 	ldcpl	6, cr0, [lr], #-240	; 0xffffff10
 e48:	1d033d4d 	stcne	13, cr3, [r3, #-308]	; 0xfffffecc
 e4c:	0b03754a 	bleq	de37c <startup-0x1ff21c84>
 e50:	67675982 	strbvs	r5, [r7, -r2, lsl #19]!
 e54:	01000402 	tsteq	r0, r2, lsl #8
 e58:	Address 0x00000e58 is out of bounds.


Disassembly of section .debug_str:

00000000 <.debug_str>:
       0:	706c6c70 	rsbvc	r6, ip, r0, ror ip
       4:	45535200 	ldrbmi	r5, [r3, #-512]	; 0xfffffe00
       8:	44455652 	strbmi	r5, [r5], #-1618	; 0xfffff9ae
       c:	54520031 	ldrbpl	r0, [r2], #-49	; 0xffffffcf
      10:	4b575f43 	blmi	15d7d24 <startup-0x1ea282dc>
      14:	495f5055 	ldmdbmi	pc, {r0, r2, r4, r6, ip, lr}^	; <UNPREDICTABLE>
      18:	006e5152 	rsbeq	r5, lr, r2, asr r1
      1c:	49545845 	ldmdbmi	r4, {r0, r2, r6, fp, ip, lr}^
      20:	52495f32 	subpl	r5, r9, #50, 30	; 0xc8
      24:	44006e51 	strmi	r6, [r0], #-3665	; 0xfffff1af
      28:	5f31414d 	svcpl	0x0031414d
      2c:	65727453 	ldrbvs	r7, [r2, #-1107]!	; 0xfffffbad
      30:	5f366d61 	svcpl	0x00366d61
      34:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
      38:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
      3c:	50555f38 	subspl	r5, r5, r8, lsr pc
      40:	4d49545f 	cfstrdmi	mvd5, [r9, #-380]	; 0xfffffe84
      44:	495f3331 	ldmdbmi	pc, {r0, r4, r5, r8, r9, ip, sp}^	; <UNPREDICTABLE>
      48:	006e5152 	rsbeq	r5, lr, r2, asr r1
      4c:	494c4c50 	stmdbmi	ip, {r4, r6, sl, fp, lr}^
      50:	46435332 			; <UNDEFINED> instruction: 0x46435332
      54:	52005247 	andpl	r5, r0, #1879048196	; 0x70000004
      58:	495f4343 	ldmdbmi	pc, {r0, r1, r6, r8, r9, lr}^	; <UNPREDICTABLE>
      5c:	4c435332 	mcrrmi	3, 3, r5, r3, cr2
      60:	6e6f434b 	cdpvs	3, 6, cr4, cr15, cr11, {2}
      64:	00676966 	rsbeq	r6, r7, r6, ror #18
      68:	5f434352 	svcpl	0x00434352
      6c:	43746547 	cmnmi	r4, #297795584	; 0x11c00000
      70:	6b636f6c 	blvs	18dbe28 <startup-0x1e7241d8>
      74:	65724673 	ldrbvs	r4, [r2, #-1651]!	; 0xfffff98d
      78:	4d440071 	stclmi	0, cr0, [r4, #-452]	; 0xfffffe3c
      7c:	535f3241 	cmppl	pc, #268435460	; 0x10000004
      80:	61657274 	smcvs	22308	; 0x5724
      84:	495f316d 	ldmdbmi	pc, {r0, r2, r3, r5, r6, r8, ip, sp}^	; <UNPREDICTABLE>
      88:	006e5152 	rsbeq	r5, lr, r2, asr r1
      8c:	4b4c4348 	blmi	1310db4 <startup-0x1ecef24c>
      90:	6572465f 	ldrbvs	r4, [r2, #-1631]!	; 0xfffff9a1
      94:	6e657571 	mcrvs	5, 3, r7, cr5, cr1, {3}
      98:	47007963 	strmi	r7, [r0, -r3, ror #18]
      9c:	5f4f4950 	svcpl	0x004f4950
      a0:	64507550 	ldrbvs	r7, [r0], #-1360	; 0xfffffab0
      a4:	504f4e5f 	subpl	r4, pc, pc, asr lr	; <UNPREDICTABLE>
      a8:	004c4c55 	subeq	r4, ip, r5, asr ip
      ac:	524f5456 	subpl	r5, pc, #1442840576	; 0x56000000
      b0:	49505300 	ldmdbmi	r0, {r8, r9, ip, lr}^
      b4:	52495f33 	subpl	r5, r9, #51, 30	; 0xcc
      b8:	46006e51 			; <UNDEFINED> instruction: 0x46006e51
      bc:	4853414c 	ldmdami	r3, {r2, r3, r6, r8, lr}^
      c0:	5152495f 	cmppl	r2, pc, asr r9
      c4:	4344006e 	movtmi	r0, #16494	; 0x406e
      c8:	495f494d 	ldmdbmi	pc, {r0, r2, r3, r6, r8, fp, lr}^	; <UNPREDICTABLE>
      cc:	006e5152 	rsbeq	r5, lr, r2, asr r1
      d0:	5f434352 	svcpl	0x00434352
      d4:	32425041 	subcc	r5, r2, #65	; 0x41
      d8:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
      dc:	6c436870 	mcrrvs	8, 7, r6, r3, cr0
      e0:	4c6b636f 	stclmi	3, cr6, [fp], #-444	; 0xfffffe44
      e4:	646f4d50 	strbtvs	r4, [pc], #-3408	; ec <startup-0x1fffff14>
      e8:	646d4365 	strbtvs	r4, [sp], #-869	; 0xfffffc9b
      ec:	43435200 	movtmi	r5, #12800	; 0x3200
      f0:	4248415f 	submi	r4, r8, #-1073741801	; 0xc0000017
      f4:	72655032 	rsbvc	r5, r5, #50	; 0x32
      f8:	43687069 	cmnmi	r8, #105	; 0x69
      fc:	6b636f6c 	blvs	18dbeb4 <startup-0x1e72414c>
     100:	6f4d504c 	svcvs	0x004d504c
     104:	6d436564 	cfstr64vs	mvdx6, [r3, #-400]	; 0xfffffe70
     108:	65720064 	ldrbvs	r0, [r2, #-100]!	; 0xffffff9c
     10c:	6e727574 	mrcvs	5, 3, r7, cr2, cr4, {3}
     110:	65646f43 	strbvs	r6, [r4, #-3907]!	; 0xfffff0bd
     114:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
     118:	79544f4f 	ldmdbvc	r4, {r0, r1, r2, r3, r6, r8, r9, sl, fp, lr}^
     11c:	545f6570 	ldrbpl	r6, [pc], #-1392	; 124 <startup-0x1ffffedc>
     120:	44657079 	strbtmi	r7, [r5], #-121	; 0xffffff87
     124:	52006665 	andpl	r6, r0, #105906176	; 0x6500000
     128:	415f4343 	cmpmi	pc, r3, asr #6
     12c:	50314250 	eorspl	r4, r1, r0, asr r2
     130:	70697265 	rsbvc	r7, r9, r5, ror #4
     134:	73655268 	cmnvc	r5, #104, 4	; 0x80000006
     138:	6d437465 	cfstrdvs	mvd7, [r3, #-404]	; 0xfffffe6c
     13c:	43520064 	cmpmi	r2, #100	; 0x64
     140:	6f4d5f43 	svcvs	0x004d5f43
     144:	54006564 	strpl	r6, [r0], #-1380	; 0xfffffa9c
     148:	5f324d49 	svcpl	0x00324d49
     14c:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     150:	43435200 	movtmi	r5, #12800	; 0x3200
     154:	4354525f 	cmpmi	r4, #-268435451	; 0xf0000005
     158:	534b4c43 	movtpl	r4, #48195	; 0xbc43
     15c:	6372756f 	cmnvs	r2, #465567744	; 0x1bc00000
     160:	43520065 	cmpmi	r2, #101	; 0x65
     164:	48415f43 	stmdami	r1, {r0, r1, r6, r8, r9, sl, fp, ip, lr}^
     168:	65503242 	ldrbvs	r3, [r0, #-578]	; 0xfffffdbe
     16c:	68706972 	ldmdavs	r0!, {r1, r4, r5, r6, r8, fp, sp, lr}^
     170:	636f6c43 	cmnvs	pc, #17152	; 0x4300
     174:	646d436b 	strbtvs	r4, [sp], #-875	; 0xfffffc95
     178:	50434900 	subpl	r4, r3, r0, lsl #18
     17c:	43520052 	cmpmi	r2, #82	; 0x52
     180:	49545f43 	ldmdbmi	r4, {r0, r1, r6, r8, r9, sl, fp, ip, lr}^
     184:	4b4c434d 	blmi	1310ec0 <startup-0x1ecef140>
     188:	73657250 	cmnvc	r5, #80, 4
     18c:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
     190:	52006769 	andpl	r6, r0, #27525120	; 0x1a40000
     194:	505f4343 	subspl	r4, pc, r3, asr #6
     198:	32494c4c 	subcc	r4, r9, #76, 24	; 0x4c00
     19c:	646d4353 	strbtvs	r4, [sp], #-851	; 0xfffffcad
     1a0:	43435200 	movtmi	r5, #12800	; 0x3200
     1a4:	4c43485f 	mcrrmi	8, 5, r4, r3, cr15
     1a8:	4143004b 	cmpmi	r3, fp, asr #32
     1ac:	525f324e 	subspl	r3, pc, #-536870908	; 0xe0000004
     1b0:	495f3058 	ldmdbmi	pc, {r3, r4, r6, ip, sp}^	; <UNPREDICTABLE>
     1b4:	006e5152 	rsbeq	r5, lr, r2, asr r1
     1b8:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
     1bc:	495f3654 	ldmdbmi	pc, {r2, r4, r6, r9, sl, ip, sp}^	; <UNPREDICTABLE>
     1c0:	006e5152 	rsbeq	r5, lr, r2, asr r1
     1c4:	656d6974 	strbvs	r6, [sp, #-2420]!	; 0xfffff68c
     1c8:	72616c5f 	rsbvc	r6, r1, #24320	; 0x5f00
     1cc:	5f5f006d 	svcpl	0x005f006d
     1d0:	746e6975 	strbtvc	r6, [lr], #-2421	; 0xfffff68b
     1d4:	00745f38 	rsbseq	r5, r4, r8, lsr pc
     1d8:	32495053 	subcc	r5, r9, #83	; 0x53
     1dc:	5152495f 	cmppl	r2, pc, asr r9
     1e0:	4954006e 	ldmdbmi	r4, {r1, r2, r3, r5, r6}^
     1e4:	425f384d 	subsmi	r3, pc, #5046272	; 0x4d0000
     1e8:	545f4b52 	ldrbpl	r4, [pc], #-2898	; 1f0 <startup-0x1ffffe10>
     1ec:	32314d49 	eorscc	r4, r1, #4672	; 0x1240
     1f0:	5152495f 	cmppl	r2, pc, asr r9
     1f4:	4841006e 	stmdami	r1, {r1, r2, r3, r5, r6}^
     1f8:	504c3242 	subpl	r3, ip, r2, asr #4
     1fc:	00524e45 	subseq	r4, r2, r5, asr #28
     200:	4f495047 	svcmi	0x00495047
     204:	5075505f 	rsbspl	r5, r5, pc, asr r0
     208:	4f445f64 	svcmi	0x00445f64
     20c:	41004e57 	tstmi	r0, r7, asr lr
     210:	52435249 	subpl	r5, r3, #-1879048188	; 0x90000004
     214:	43435200 	movtmi	r5, #12800	; 0x3200
     218:	4941535f 	stmdbmi	r1, {r0, r1, r2, r3, r4, r6, r8, r9, ip, lr}^
     21c:	534c4c50 	movtpl	r4, #52304	; 0xcc50
     220:	6c434941 	mcrrvs	9, 4, r4, r3, cr1	; <UNPREDICTABLE>
     224:	7669446b 	strbtvc	r4, [r9], -fp, ror #8
     228:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
     22c:	69006769 	stmdbvs	r0, {r0, r3, r5, r6, r8, r9, sl, sp, lr}
     230:	5f74696e 	svcpl	0x0074696e
     234:	4f495047 	svcmi	0x00495047
     238:	726f505f 	rsbvc	r5, pc, #95	; 0x5f
     23c:	43007374 	movwmi	r7, #884	; 0x374
     240:	44495550 	strbmi	r5, [r9], #-1360	; 0xfffffab0
     244:	73795300 	cmnvc	r9, #0, 6
     248:	6b636954 	blvs	18da7a0 <startup-0x1e725860>
     24c:	6e61485f 	mcrvs	8, 3, r4, cr1, cr15, {2}
     250:	72656c64 	rsbvc	r6, r5, #100, 24	; 0x6400
     254:	43435200 	movtmi	r5, #12800	; 0x3200
     258:	44544c5f 	ldrbmi	r4, [r4], #-3167	; 0xfffff3a1
     25c:	4b4c4343 	blmi	1310f70 <startup-0x1ecef090>
     260:	43766944 	cmnmi	r6, #68, 18	; 0x110000
     264:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
     268:	4d440067 	stclmi	0, cr0, [r4, #-412]	; 0xfffffe64
     26c:	535f3241 	cmppl	pc, #268435460	; 0x10000004
     270:	61657274 	smcvs	22308	; 0x5724
     274:	495f356d 	ldmdbmi	pc, {r0, r2, r3, r5, r6, r8, sl, ip, sp}^	; <UNPREDICTABLE>
     278:	006e5152 	rsbeq	r5, lr, r2, asr r1
     27c:	4f495047 	svcmi	0x00495047
     280:	646f4d5f 	strbtvs	r4, [pc], #-3423	; 288 <startup-0x1ffffd78>
     284:	46415f65 	strbmi	r5, [r1], -r5, ror #30
     288:	43435200 	movtmi	r5, #12800	; 0x3200
     28c:	4248415f 	submi	r4, r8, #-1073741801	; 0xc0000017
     290:	72655033 	rsbvc	r5, r5, #51	; 0x33
     294:	52687069 	rsbpl	r7, r8, #105	; 0x69
     298:	74657365 	strbtvc	r7, [r5], #-869	; 0xfffffc9b
     29c:	00646d43 	rsbeq	r6, r4, r3, asr #26
     2a0:	314d4954 	cmpcc	sp, r4, asr r9
     2a4:	4752545f 			; <UNDEFINED> instruction: 0x4752545f
     2a8:	4d4f435f 	stclmi	3, cr4, [pc, #-380]	; 134 <startup-0x1ffffecc>
     2ac:	4d49545f 	cfstrdmi	mvd5, [r9, #-380]	; 0xfffffe84
     2b0:	495f3131 	ldmdbmi	pc, {r0, r4, r5, r8, ip, sp}^	; <UNPREDICTABLE>
     2b4:	006e5152 	rsbeq	r5, lr, r2, asr r1
     2b8:	4f495047 	svcmi	0x00495047
     2bc:	646f4d5f 	strbtvs	r4, [pc], #-3423	; 2c4 <startup-0x1ffffd3c>
     2c0:	4e415f65 	cdpmi	15, 4, cr5, cr1, cr5, {3}
     2c4:	43435200 	movtmi	r5, #12800	; 0x3200
     2c8:	4c43505f 	mcrrmi	0, 5, r5, r3, cr15
     2cc:	6f43324b 	svcvs	0x0043324b
     2d0:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
     2d4:	6e6f6300 	cdpvs	3, 6, cr6, cr15, cr0, {0}
     2d8:	6c6f7274 	sfmvs	f7, 2, [pc], #-464	; 110 <startup-0x1ffffef0>
     2dc:	73746962 	cmnvc	r4, #1605632	; 0x188000
     2e0:	43435200 	movtmi	r5, #12800	; 0x3200
     2e4:	4965445f 	stmdbmi	r5!, {r0, r1, r2, r3, r4, r6, sl, lr}^
     2e8:	0074696e 	rsbseq	r6, r4, lr, ror #18
     2ec:	5f434352 	svcpl	0x00434352
     2f0:	42494153 	submi	r4, r9, #-1073741804	; 0xc0000014
     2f4:	6b636f6c 	blvs	18dc0ac <startup-0x1e723f54>
     2f8:	4b4c4342 	blmi	1311008 <startup-0x1eceeff8>
     2fc:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
     300:	41006769 	tstmi	r0, r9, ror #14
     304:	45324250 	ldrmi	r4, [r2, #-592]!	; 0xfffffdb0
     308:	5200524e 	andpl	r5, r0, #-536870908	; 0xe0000004
     30c:	475f4343 	ldrbmi	r4, [pc, -r3, asr #6]
     310:	59537465 	ldmdbpl	r3, {r0, r2, r5, r6, sl, ip, sp, lr}^
     314:	4b4c4353 	blmi	1311068 <startup-0x1eceef98>
     318:	72756f53 	rsbsvc	r6, r5, #332	; 0x14c
     31c:	41006563 	tstmi	r0, r3, ror #10
     320:	4c314248 	lfmmi	f4, 4, [r1], #-288	; 0xfffffee0
     324:	524e4550 	subpl	r4, lr, #80, 10	; 0x14000000
     328:	43435200 	movtmi	r5, #12800	; 0x3200
     32c:	4c4c505f 	mcrrmi	0, 5, r5, ip, cr15
     330:	44533249 	ldrbmi	r3, [r3], #-585	; 0xfffffdb7
     334:	00517669 	subseq	r7, r1, r9, ror #12
     338:	54737953 	ldrbtpl	r7, [r3], #-2387	; 0xfffff6ad
     33c:	5f6b6369 	svcpl	0x006b6369
     340:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     344:	43435200 	movtmi	r5, #12800	; 0x3200
     348:	4248415f 	submi	r4, r8, #-1073741801	; 0xc0000017
     34c:	72655033 	rsbvc	r5, r5, #51	; 0x33
     350:	00687069 	rsbeq	r7, r8, r9, rrx
     354:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
     358:	495f3354 	ldmdbmi	pc, {r2, r4, r6, r8, r9, ip, sp}^	; <UNPREDICTABLE>
     35c:	006e5152 	rsbeq	r5, lr, r2, asr r1
     360:	434b4344 	movtmi	r4, #45892	; 0xb344
     364:	00524746 	subseq	r4, r2, r6, asr #14
     368:	52534349 	subspl	r4, r3, #603979777	; 0x24000001
     36c:	43435200 	movtmi	r5, #12800	; 0x3200
     370:	4f434d5f 	svcmi	0x00434d5f
     374:	76694432 			; <UNDEFINED> instruction: 0x76694432
     378:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
     37c:	544f5f4f 	strbpl	r5, [pc], #-3919	; 384 <startup-0x1ffffc7c>
     380:	5f657079 	svcpl	0x00657079
     384:	4700444f 	strmi	r4, [r0, -pc, asr #8]
     388:	5f4f4950 	svcpl	0x004f4950
     38c:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xfffff1b7
     390:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0xfffff6ac
     394:	00666544 	rsbeq	r6, r6, r4, asr #10
     398:	5f434352 	svcpl	0x00434352
     39c:	43535953 	cmpmi	r3, #1359872	; 0x14c000
     3a0:	6f534b4c 	svcvs	0x00534b4c
     3a4:	65637275 	strbvs	r7, [r3, #-629]!	; 0xfffffd8b
     3a8:	414d4400 	cmpmi	sp, r0, lsl #8
     3ac:	74535f31 	ldrbvc	r5, [r3], #-3889	; 0xfffff0cf
     3b0:	6d616572 	cfstr64vs	mvdx6, [r1, #-456]!	; 0xfffffe38
     3b4:	52495f32 	subpl	r5, r9, #50, 30	; 0xc8
     3b8:	52006e51 	andpl	r6, r0, #1296	; 0x510
     3bc:	505f4343 	subspl	r4, pc, r3, asr #6
     3c0:	6f534c4c 	svcvs	0x00534c4c
     3c4:	65637275 	strbvs	r7, [r3, #-629]!	; 0xfffffd8b
     3c8:	43435200 	movtmi	r5, #12800	; 0x3200
     3cc:	4250415f 	subsmi	r4, r0, #-1073741801	; 0xc0000017
     3d0:	72655031 	rsbvc	r5, r5, #49	; 0x31
     3d4:	43687069 	cmnmi	r8, #105	; 0x69
     3d8:	6b636f6c 	blvs	18dc190 <startup-0x1e723e70>
     3dc:	00646d43 	rsbeq	r6, r4, r3, asr #26
     3e0:	45534552 	ldrbmi	r4, [r3, #-1362]	; 0xfffffaae
     3e4:	44455652 	strbmi	r5, [r5], #-1618	; 0xfffff9ae
     3e8:	45520030 	ldrbmi	r0, [r2, #-48]	; 0xffffffd0
     3ec:	56524553 			; <UNDEFINED> instruction: 0x56524553
     3f0:	00314445 	eorseq	r4, r1, r5, asr #8
     3f4:	69736e75 	ldmdbvs	r3!, {r0, r2, r4, r5, r6, r9, sl, fp, sp, lr}^
     3f8:	64656e67 	strbtvs	r6, [r5], #-3687	; 0xfffff199
     3fc:	61686320 	cmnvs	r8, r0, lsr #6
     400:	4d440072 	stclmi	0, cr0, [r4, #-456]	; 0xfffffe38
     404:	535f3241 	cmppl	pc, #268435460	; 0x10000004
     408:	61657274 	smcvs	22308	; 0x5724
     40c:	495f346d 	ldmdbmi	pc, {r0, r2, r3, r5, r6, sl, ip, sp}^	; <UNPREDICTABLE>
     410:	006e5152 	rsbeq	r5, lr, r2, asr r1
     414:	45534552 	ldrbmi	r4, [r3, #-1362]	; 0xfffffaae
     418:	44455652 	strbmi	r5, [r5], #-1618	; 0xfffff9ae
     41c:	45520034 	ldrbmi	r0, [r2, #-52]	; 0xffffffcc
     420:	56524553 			; <UNDEFINED> instruction: 0x56524553
     424:	00354445 	eorseq	r4, r5, r5, asr #8
     428:	45534552 	ldrbmi	r4, [r3, #-1362]	; 0xfffffaae
     42c:	44455652 	strbmi	r5, [r5], #-1618	; 0xfffff9ae
     430:	41490036 	cmpmi	r9, r6, lsr r0
     434:	47005242 	strmi	r5, [r0, -r2, asr #4]
     438:	5f4f4950 	svcpl	0x004f4950
     43c:	7079544f 	rsbsvc	r5, r9, pc, asr #8
     440:	50505f65 	subspl	r5, r0, r5, ror #30
     444:	43324900 	teqmi	r2, #0, 18
     448:	52455f31 	subpl	r5, r5, #49, 30	; 0xc4
     44c:	5152495f 	cmppl	r2, pc, asr r9
     450:	4143006e 	cmpmi	r3, lr, rrx
     454:	535f324e 	cmppl	pc, #-536870908	; 0xe0000004
     458:	495f4543 	ldmdbmi	pc, {r0, r1, r6, r8, sl, lr}^	; <UNPREDICTABLE>
     45c:	006e5152 	rsbeq	r5, lr, r2, asr r1
     460:	5f434352 	svcpl	0x00434352
     464:	4345534c 	movtmi	r5, #21324	; 0x534c
     468:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
     46c:	45520067 	ldrbmi	r0, [r2, #-103]	; 0xffffff99
     470:	56524553 			; <UNDEFINED> instruction: 0x56524553
     474:	00324445 	eorseq	r4, r2, r5, asr #8
     478:	45534552 	ldrbmi	r4, [r3, #-1362]	; 0xfffffaae
     47c:	44455652 	strbmi	r5, [r5], #-1618	; 0xfffff9ae
     480:	49540033 	ldmdbmi	r4, {r0, r1, r4, r5}^
     484:	495f354d 	ldmdbmi	pc, {r0, r2, r3, r6, r8, sl, ip, sp}^	; <UNPREDICTABLE>
     488:	006e5152 	rsbeq	r5, lr, r2, asr r1
     48c:	67617355 			; <UNDEFINED> instruction: 0x67617355
     490:	75614665 	strbvc	r4, [r1, #-1637]!	; 0xfffff99b
     494:	495f746c 	ldmdbmi	pc, {r2, r3, r5, r6, sl, ip, sp, lr}^	; <UNPREDICTABLE>
     498:	006e5152 	rsbeq	r5, lr, r2, asr r1
     49c:	5f424353 	svcpl	0x00424353
     4a0:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0xfffff6ac
     4a4:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
     4a8:	5075504f 	rsbspl	r5, r5, pc, asr #32
     4ac:	79545f64 	ldmdbvc	r4, {r2, r5, r6, r8, r9, sl, fp, ip, lr}^
     4b0:	65446570 	strbvs	r6, [r4, #-1392]	; 0xfffffa90
     4b4:	46440066 	strbmi	r0, [r4], -r6, rrx
     4b8:	41005253 	tstmi	r0, r3, asr r2
     4bc:	52314248 	eorspl	r4, r1, #72, 4	; 0x80000004
     4c0:	00525453 	subseq	r5, r2, r3, asr r4
     4c4:	5f434352 	svcpl	0x00434352
     4c8:	32425041 	subcc	r5, r2, #65	; 0x41
     4cc:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
     4d0:	65526870 	ldrbvs	r6, [r2, #-2160]	; 0xfffff790
     4d4:	43746573 	cmnmi	r4, #482344960	; 0x1cc00000
     4d8:	6400646d 	strvs	r6, [r0], #-1133	; 0xfffffb93
     4dc:	31726f6f 	cmncc	r2, pc, ror #30
     4e0:	6f6f6400 	svcvs	0x006f6400
     4e4:	64003272 	strvs	r3, [r0], #-626	; 0xfffffd8e
     4e8:	33726f6f 	cmncc	r2, #444	; 0x1bc
     4ec:	6f6f6400 	svcvs	0x006f6400
     4f0:	64003472 	strvs	r3, [r0], #-1138	; 0xfffffb8e
     4f4:	35726f6f 	ldrbcc	r6, [r2, #-3951]!	; 0xfffff091
     4f8:	6f6f6400 	svcvs	0x006f6400
     4fc:	64003672 	strvs	r3, [r0], #-1650	; 0xfffff98e
     500:	38726f6f 	ldmdacc	r2!, {r0, r1, r2, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
     504:	6f6f6400 	svcvs	0x006f6400
     508:	52003972 	andpl	r3, r0, #1867776	; 0x1c8000
     50c:	415f4343 	cmpmi	pc, r3, asr #6
     510:	50334248 	eorspl	r4, r3, r8, asr #4
     514:	70697265 	rsbvc	r7, r9, r5, ror #4
     518:	6f6c4368 	svcvs	0x006c4368
     51c:	504c6b63 	subpl	r6, ip, r3, ror #22
     520:	65646f4d 	strbvs	r6, [r4, #-3917]!	; 0xfffff0b3
     524:	00646d43 	rsbeq	r6, r4, r3, asr #26
     528:	69755f5f 	ldmdbvs	r5!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, ip, lr}^
     52c:	3631746e 	ldrtcc	r7, [r1], -lr, ror #8
     530:	4100745f 	tstmi	r0, pc, asr r4
     534:	45324248 	ldrmi	r4, [r2, #-584]!	; 0xfffffdb8
     538:	5000524e 	andpl	r5, r0, lr, asr #4
     53c:	324b4c43 	subcc	r4, fp, #17152	; 0x4300
     540:	6572465f 	ldrbvs	r4, [r2, #-1631]!	; 0xfffff9a1
     544:	6e657571 	mcrvs	5, 3, r7, cr5, cr1, {3}
     548:	47007963 	strmi	r7, [r0, -r3, ror #18]
     54c:	5f4f4950 	svcpl	0x004f4950
     550:	5f776f4c 	svcpl	0x00776f4c
     554:	65657053 	strbvs	r7, [r5, #-83]!	; 0xffffffad
     558:	41430064 	cmpmi	r3, r4, rrx
     55c:	525f314e 	subspl	r3, pc, #-2147483629	; 0x80000013
     560:	495f3058 	ldmdbmi	pc, {r3, r4, r6, ip, sp}^	; <UNPREDICTABLE>
     564:	006e5152 	rsbeq	r5, lr, r2, asr r1
     568:	555c3a43 	ldrbpl	r3, [ip, #-2627]	; 0xfffff5bd
     56c:	73726573 	cmnvc	r2, #482344960	; 0x1cc00000
     570:	6164415c 	cmnvs	r4, ip, asr r1
     574:	4f5c746d 	svcmi	0x005c746d
     578:	7244656e 	subvc	r6, r4, #461373440	; 0x1b800000
     57c:	5c657669 	stclpl	6, cr7, [r5], #-420	; 0xfffffe5c
     580:	756b6f44 	strbvc	r6, [fp, #-3908]!	; 0xfffff0bc
     584:	746e656d 	strbtvc	r6, [lr], #-1389	; 0xfffffa93
     588:	7469475c 	strbtvc	r4, [r9], #-1884	; 0xfffff8a4
     58c:	5c627548 	cfstr64pl	mvdx7, [r2], #-288	; 0xfffffee0
     590:	32544144 	subscc	r4, r4, #68, 2
     594:	4c2d3039 	stcmi	0, cr3, [sp], #-228	; 0xffffff1c
     598:	736d7261 	cmnvc	sp, #268435462	; 0x10000006
     59c:	65747379 	ldrbvs	r7, [r4, #-889]!	; 0xfffffc87
     5a0:	6f6b5c6d 	svcvs	0x006b5c6d
     5a4:	6f445c64 	svcvs	0x00445c64
     5a8:	4800726f 	stmdami	r0, {r0, r1, r2, r3, r5, r6, r9, ip, sp, lr}
     5ac:	00525346 	subseq	r5, r2, r6, asr #6
     5b0:	4f495047 	svcmi	0x00495047
     5b4:	6165725f 	cmnvs	r5, pc, asr r2
     5b8:	43520064 	cmpmi	r2, #100	; 0x64
     5bc:	59535f43 	ldmdbpl	r3, {r0, r1, r6, r8, r9, sl, fp, ip, lr}^
     5c0:	4b4c4353 	blmi	1311314 <startup-0x1eceecec>
     5c4:	4c435000 	marmi	acc0, r5, r3
     5c8:	465f314b 	ldrbmi	r3, [pc], -fp, asr #2
     5cc:	75716572 	ldrbvc	r6, [r1, #-1394]!	; 0xfffffa8e
     5d0:	79636e65 	stmdbvc	r3!, {r0, r2, r5, r6, r9, sl, fp, sp, lr}^
     5d4:	6f6f6400 	svcvs	0x006f6400
     5d8:	00333172 	eorseq	r3, r3, r2, ror r1
     5dc:	4d4c4c50 	stclmi	12, cr4, [ip, #-320]	; 0xfffffec0
     5e0:	6c6c6100 	stfvse	f6, [ip], #-0
     5e4:	6f6f645f 	svcvs	0x006f645f
     5e8:	50007372 	andpl	r7, r0, r2, ror r3
     5ec:	00504c4c 	subseq	r4, r0, ip, asr #24
     5f0:	514c4c50 	cmppl	ip, r0, asr ip
     5f4:	43435200 	movtmi	r5, #12800	; 0x3200
     5f8:	49534c5f 	ldmdbmi	r3, {r0, r1, r2, r3, r4, r6, sl, fp, lr}^
     5fc:	00646d43 	rsbeq	r6, r4, r3, asr #26
     600:	736c6c70 	cmnvc	ip, #112, 24	; 0x7000
     604:	6372756f 	cmnvs	r2, #465567744	; 0x1bc00000
     608:	49540065 	ldmdbmi	r4, {r0, r2, r5, r6}^
     60c:	495f344d 	ldmdbmi	pc, {r0, r2, r3, r6, sl, ip, sp}^	; <UNPREDICTABLE>
     610:	006e5152 	rsbeq	r5, lr, r2, asr r1
     614:	20554e47 	subscs	r4, r5, r7, asr #28
     618:	20393943 	eorscs	r3, r9, r3, asr #18
     61c:	2e322e37 	mrccs	14, 1, r2, cr2, cr7, {1}
     620:	30322031 	eorscc	r2, r2, r1, lsr r0
     624:	39303731 	ldmdbcc	r0!, {r0, r4, r5, r8, r9, sl, ip, sp}
     628:	28203430 	stmdacs	r0!, {r4, r5, sl, ip, sp}
     62c:	656c6572 	strbvs	r6, [ip, #-1394]!	; 0xfffffa8e
     630:	29657361 	stmdbcs	r5!, {r0, r5, r6, r8, r9, ip, sp, lr}^
     634:	52415b20 	subpl	r5, r1, #32, 22	; 0x8000
     638:	6d652f4d 	stclvs	15, cr2, [r5, #-308]!	; 0xfffffecc
     63c:	64646562 	strbtvs	r6, [r4], #-1378	; 0xfffffa9e
     640:	372d6465 	strcc	r6, [sp, -r5, ror #8]!
     644:	6172622d 	cmnvs	r2, sp, lsr #4
     648:	2068636e 	rsbcs	r6, r8, lr, ror #6
     64c:	69766572 	ldmdbvs	r6!, {r1, r4, r5, r6, r8, sl, sp, lr}^
     650:	6e6f6973 			; <UNDEFINED> instruction: 0x6e6f6973
     654:	35353220 	ldrcc	r3, [r5, #-544]!	; 0xfffffde0
     658:	5d343032 	ldcpl	0, cr3, [r4, #-200]!	; 0xffffff38
     65c:	746d2d20 	strbtvc	r2, [sp], #-3360	; 0xfffff2e0
     660:	626d7568 	rsbvs	r7, sp, #104, 10	; 0x1a000000
     664:	616d2d20 	cmnvs	sp, r0, lsr #26
     668:	3d686372 	stclcc	3, cr6, [r8, #-456]!	; 0xfffffe38
     66c:	766d7261 	strbtvc	r7, [sp], -r1, ror #4
     670:	206d2d36 	rsbcs	r2, sp, r6, lsr sp
     674:	6c666d2d 	stclvs	13, cr6, [r6], #-180	; 0xffffff4c
     678:	2d74616f 	ldfcse	f6, [r4, #-444]!	; 0xfffffe44
     67c:	3d696261 	sfmcc	f6, 2, [r9, #-388]!	; 0xfffffe7c
     680:	74666f73 	strbtvc	r6, [r6], #-3955	; 0xfffff08d
     684:	746d2d20 	strbtvc	r2, [sp], #-3360	; 0xfffff2e0
     688:	626d7568 	rsbvs	r7, sp, #104, 10	; 0x1a000000
     68c:	616d2d20 	cmnvs	sp, r0, lsr #26
     690:	3d686372 	stclcc	3, cr6, [r8, #-456]!	; 0xfffffe38
     694:	766d7261 	strbtvc	r7, [sp], -r1, ror #4
     698:	206d2d36 	rsbcs	r2, sp, r6, lsr sp
     69c:	2d20672d 	stccs	7, cr6, [r0, #-180]!	; 0xffffff4c
     6a0:	2d20304f 	stccs	0, cr3, [r0, #-316]!	; 0xfffffec4
     6a4:	3d647473 	cfstrdcc	mvd7, [r4, #-460]!	; 0xfffffe34
     6a8:	00393963 	eorseq	r3, r9, r3, ror #18
     6ac:	756f6d61 	strbvc	r6, [pc, #-3425]!	; fffff953 <GPIO_Ports+0xdfffce03>
     6b0:	664f746e 	strbvs	r7, [pc], -lr, ror #8
     6b4:	69746341 	ldmdbvs	r4!, {r0, r6, r8, r9, sp, lr}^
     6b8:	6f446576 	svcvs	0x00446576
     6bc:	0073726f 	rsbseq	r7, r3, pc, ror #4
     6c0:	5f434352 	svcpl	0x00434352
     6c4:	4b4c4348 	blmi	13113ec <startup-0x1eceec14>
     6c8:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
     6cc:	52006769 	andpl	r6, r0, #27525120	; 0x1a40000
     6d0:	435f4343 	cmpmi	pc, #201326593	; 0xc000001
     6d4:	7261656c 	rsbvc	r6, r1, #108, 10	; 0x1b000000
     6d8:	67616c46 	strbvs	r6, [r1, -r6, asr #24]!
     6dc:	43435200 	movtmi	r5, #12800	; 0x3200
     6e0:	4553485f 	ldrbmi	r4, [r3, #-2143]	; 0xfffff7a1
     6e4:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
     6e8:	42006769 	andmi	r6, r0, #27525120	; 0x1a40000
     6ec:	00524344 	subseq	r4, r2, r4, asr #6
     6f0:	53434853 	movtpl	r4, #14419	; 0x3853
     6f4:	56500052 			; <UNDEFINED> instruction: 0x56500052
     6f8:	52495f44 	subpl	r5, r9, #68, 30	; 0x110
     6fc:	52006e51 	andpl	r6, r0, #1296	; 0x510
     700:	4c5f4343 	mrrcmi	3, 4, r4, pc, cr3	; <UNPREDICTABLE>
     704:	53004553 	movwpl	r4, #1363	; 0x553
     708:	00524954 	subseq	r4, r2, r4, asr r9
     70c:	31433249 	cmpcc	r3, r9, asr #4
     710:	5f56455f 	svcpl	0x0056455f
     714:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     718:	43435200 	movtmi	r5, #12800	; 0x3200
     71c:	4941535f 	stmdbmi	r1, {r0, r1, r2, r3, r4, r6, r8, r9, ip, lr}^
     720:	636f6c42 	cmnvs	pc, #16896	; 0x4200
     724:	4c43416b 	stfmie	f4, [r3], {107}	; 0x6b
     728:	6e6f434b 	cdpvs	3, 6, cr4, cr15, cr11, {2}
     72c:	00676966 	rsbeq	r6, r7, r6, ror #18
     730:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
     734:	63707574 	cmnvs	r0, #116, 10	; 0x1d000000
     738:	746e756f 	strbtvc	r7, [lr], #-1391	; 0xfffffa91
     73c:	52007265 	andpl	r7, r0, #1342177286	; 0x50000006
     740:	505f4343 	subspl	r4, pc, r3, asr #6
     744:	41534c4c 	cmpmi	r3, ip, asr #24
     748:	6e6f4349 	cdpvs	3, 6, cr4, cr15, cr9, {2}
     74c:	00676966 	rsbeq	r6, r7, r6, ror #18
     750:	4f495047 	svcmi	0x00495047
     754:	6e69505f 	mcrvs	0, 3, r5, cr9, cr15, {2}
     758:	50470073 	subpl	r0, r7, r3, ror r0
     75c:	4d5f4f49 	ldclmi	15, cr4, [pc, #-292]	; 640 <startup-0x1ffff9c0>
     760:	5f65646f 	svcpl	0x0065646f
     764:	0054554f 	subseq	r5, r4, pc, asr #10
     768:	314d4954 	cmpcc	sp, r4, asr r9
     76c:	5f43435f 	svcpl	0x0043435f
     770:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     774:	53414800 	movtpl	r4, #6144	; 0x1800
     778:	4e525f48 	cdpmi	15, 5, cr5, cr2, cr8, {2}
     77c:	52495f47 	subpl	r5, r9, #284	; 0x11c
     780:	45006e51 	strmi	r6, [r0, #-3665]	; 0xfffff1af
     784:	31495458 	cmpcc	r9, r8, asr r4
     788:	5152495f 	cmppl	r2, pc, asr r9
     78c:	4143006e 	cmpmi	r3, lr, rrx
     790:	545f314e 	ldrbpl	r3, [pc], #-334	; 798 <startup-0x1ffff868>
     794:	52495f58 	subpl	r5, r9, #88, 30	; 0x160
     798:	44006e51 	strmi	r6, [r0], #-3665	; 0xfffff1af
     79c:	5f31414d 	svcpl	0x0031414d
     7a0:	65727453 	ldrbvs	r7, [r2, #-1107]!	; 0xfffffbad
     7a4:	5f356d61 	svcpl	0x00356d61
     7a8:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     7ac:	43435200 	movtmi	r5, #12800	; 0x3200
     7b0:	4553485f 	ldrbmi	r4, [r3, #-2143]	; 0xfffff7a1
     7b4:	43435200 	movtmi	r5, #12800	; 0x3200
     7b8:	4f434d5f 	svcmi	0x00434d5f
     7bc:	6e6f4331 	mcrvs	3, 3, r4, cr15, cr1, {1}
     7c0:	00676966 	rsbeq	r6, r7, r6, ror #18
     7c4:	384d4954 	stmdacc	sp, {r2, r4, r6, r8, fp, lr}^
     7c8:	4752545f 			; <UNDEFINED> instruction: 0x4752545f
     7cc:	4d4f435f 	stclmi	3, cr4, [pc, #-380]	; 658 <startup-0x1ffff9a8>
     7d0:	4d49545f 	cfstrdmi	mvd5, [r9, #-380]	; 0xfffffe84
     7d4:	495f3431 	ldmdbmi	pc, {r0, r4, r5, sl, ip, sp}^	; <UNPREDICTABLE>
     7d8:	006e5152 	rsbeq	r5, lr, r2, asr r1
     7dc:	32414d44 	subcc	r4, r1, #68, 26	; 0x1100
     7e0:	7274535f 	rsbsvc	r5, r4, #2080374785	; 0x7c000001
     7e4:	376d6165 	strbcc	r6, [sp, -r5, ror #2]!
     7e8:	5152495f 	cmppl	r2, pc, asr r9
     7ec:	544f006e 	strbpl	r0, [pc], #-110	; 7f4 <startup-0x1ffff80c>
     7f0:	53465f47 	movtpl	r5, #28487	; 0x6f47
     7f4:	5152495f 	cmppl	r2, pc, asr r9
     7f8:	6f4e006e 	svcvs	0x004e006e
     7fc:	73614d6e 	cmnvc	r1, #7040	; 0x1b80
     800:	6c62616b 	stfvse	f6, [r2], #-428	; 0xfffffe54
     804:	746e4965 	strbtvc	r4, [lr], #-2405	; 0xfffff69b
     808:	5152495f 	cmppl	r2, pc, asr r9
     80c:	5757006e 	ldrbpl	r0, [r7, -lr, rrx]
     810:	495f4744 	ldmdbmi	pc, {r2, r6, r8, r9, sl, lr}^	; <UNPREDICTABLE>
     814:	006e5152 	rsbeq	r5, lr, r2, asr r1
     818:	5f47544f 	svcpl	0x0047544f
     81c:	575f5348 	ldrbpl	r5, [pc, -r8, asr #6]
     820:	5f50554b 	svcpl	0x0050554b
     824:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     828:	43435200 	movtmi	r5, #12800	; 0x3200
     82c:	4250415f 	subsmi	r4, r0, #-1073741801	; 0xc0000017
     830:	72655032 	rsbvc	r5, r5, #50	; 0x32
     834:	43687069 	cmnmi	r8, #105	; 0x69
     838:	6b636f6c 	blvs	18dc5f0 <startup-0x1e723a10>
     83c:	00646d43 	rsbeq	r6, r4, r3, asr #26
     840:	5f434352 	svcpl	0x00434352
     844:	534c4c50 	movtpl	r4, #52304	; 0xcc50
     848:	69444941 	stmdbvs	r4, {r0, r6, r8, fp, lr}^
     84c:	52005176 	andpl	r5, r0, #-2147483619	; 0x8000001d
     850:	505f4343 	subspl	r4, pc, r3, asr #6
     854:	41534c4c 	cmpmi	r3, ip, asr #24
     858:	76694449 	strbtvc	r4, [r9], -r9, asr #8
     85c:	43520052 	cmpmi	r2, #82	; 0x52
     860:	41535f43 	cmpmi	r3, r3, asr #30
     864:	6f6c4249 	svcvs	0x006c4249
     868:	43426b63 	movtmi	r6, #11107	; 0x2b63
     86c:	6f534b4c 	svcvs	0x00534b4c
     870:	65637275 	strbvs	r7, [r3, #-629]!	; 0xfffffd8b
     874:	6d654d00 	stclvs	13, cr4, [r5, #-0]
     878:	4d79726f 	lfmmi	f7, 2, [r9, #-444]!	; 0xfffffe44
     87c:	67616e61 	strbvs	r6, [r1, -r1, ror #28]!
     880:	6e656d65 	cdpvs	13, 6, cr6, cr5, cr5, {3}
     884:	52495f74 	subpl	r5, r9, #116, 30	; 0x1d0
     888:	53006e51 	movwpl	r6, #3665	; 0xe51
     88c:	65747379 	ldrbvs	r7, [r4, #-889]!	; 0xfffffc87
     890:	726f436d 	rsbvc	r4, pc, #-1275068415	; 0xb4000001
     894:	6f6c4365 	svcvs	0x006c4365
     898:	54006b63 	strpl	r6, [r0], #-2915	; 0xfffff49d
     89c:	5f504d41 	svcpl	0x00504d41
     8a0:	4d415453 	cfstrdmi	mvd5, [r1, #-332]	; 0xfffffeb4
     8a4:	52495f50 	subpl	r5, r9, #80, 30	; 0x140
     8a8:	43006e51 	movwmi	r6, #3665	; 0xe51
     8ac:	5f314e41 	svcpl	0x00314e41
     8b0:	5f454353 	svcpl	0x00454353
     8b4:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     8b8:	6f645f00 	svcvs	0x00645f00
     8bc:	4900726f 	stmdbmi	r0, {r0, r1, r2, r3, r5, r6, r9, ip, sp, lr}
     8c0:	5f6e5152 	svcpl	0x006e5152
     8c4:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0xfffff6ac
     8c8:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
     8cc:	6f4d5f4f 	svcvs	0x004d5f4f
     8d0:	495f6564 	ldmdbmi	pc, {r2, r5, r6, r8, sl, sp, lr}^	; <UNPREDICTABLE>
     8d4:	4d44004e 	stclmi	0, cr0, [r4, #-312]	; 0xfffffec8
     8d8:	535f3241 	cmppl	pc, #268435460	; 0x10000004
     8dc:	61657274 	smcvs	22308	; 0x5724
     8e0:	495f306d 	ldmdbmi	pc, {r0, r2, r3, r5, r6, ip, sp}^	; <UNPREDICTABLE>
     8e4:	006e5152 	rsbeq	r5, lr, r2, asr r1
     8e8:	5f434352 	svcpl	0x00434352
     8ec:	324f434d 	subcc	r4, pc, #872415233	; 0x34000001
     8f0:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
     8f4:	4c006769 	stcmi	7, cr6, [r0], {105}	; 0x69
     8f8:	00524b43 	subseq	r4, r2, r3, asr #22
     8fc:	5f434352 	svcpl	0x00434352
     900:	43533249 	cmpmi	r3, #-1879048188	; 0x90000004
     904:	6f534b4c 	svcvs	0x00534b4c
     908:	65637275 	strbvs	r7, [r3, #-629]!	; 0xfffffd8b
     90c:	52524500 	subspl	r4, r2, #0, 10
     910:	4900524f 	stmdbmi	r0, {r0, r1, r2, r3, r6, r9, ip, lr}
     914:	5f324332 	svcpl	0x00324332
     918:	495f5245 	ldmdbmi	pc, {r0, r2, r6, r9, ip, lr}^	; <UNPREDICTABLE>
     91c:	006e5152 	rsbeq	r5, lr, r2, asr r1
     920:	6954736d 	ldmdbvs	r4, {r0, r2, r3, r5, r6, r8, r9, ip, sp, lr}^
     924:	00736b63 	rsbseq	r6, r3, r3, ror #22
     928:	5f434352 	svcpl	0x00434352
     92c:	4b4c4350 	blmi	1311674 <startup-0x1ecee98c>
     930:	6e6f4331 	mcrvs	3, 3, r4, cr15, cr1, {1}
     934:	00676966 	rsbeq	r6, r7, r6, ror #18
     938:	4550534f 	ldrbmi	r5, [r0, #-847]	; 0xfffffcb1
     93c:	00524445 	subseq	r4, r2, r5, asr #8
     940:	46737542 	ldrbtmi	r7, [r3], -r2, asr #10
     944:	746c7561 	strbtvc	r7, [ip], #-1377	; 0xfffffa9f
     948:	5152495f 	cmppl	r2, pc, asr r9
     94c:	6974006e 	ldmdbvs	r4!, {r1, r2, r3, r5, r6}^
     950:	00736b63 	rsbseq	r6, r3, r3, ror #22
     954:	434c4c50 	movtmi	r4, #52304	; 0xcc50
     958:	00524746 	subseq	r4, r2, r6, asr #14
     95c:	54524155 	ldrbpl	r4, [r2], #-341	; 0xfffffeab
     960:	52495f35 	subpl	r5, r9, #53, 30	; 0xd4
     964:	54006e51 	strpl	r6, [r0], #-3665	; 0xfffff1af
     968:	5f314d49 	svcpl	0x00314d49
     96c:	5f4b5242 	svcpl	0x004b5242
     970:	394d4954 	stmdbcc	sp, {r2, r4, r6, r8, fp, lr}^
     974:	5152495f 	cmppl	r2, pc, asr r9
     978:	5047006e 	subpl	r0, r7, lr, rrx
     97c:	4f5f4f49 	svcmi	0x005f4f49
     980:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0xfffff6ac
     984:	755f5f00 	ldrbvc	r5, [pc, #-3840]	; fffffa8c <GPIO_Ports+0xdfffcf3c>
     988:	33746e69 	cmncc	r4, #1680	; 0x690
     98c:	00745f32 	rsbseq	r5, r4, r2, lsr pc
     990:	41425041 	cmpmi	r2, r1, asr #32
     994:	72504248 	subsvc	r4, r0, #72, 4	; 0x80000004
     998:	54637365 	strbtpl	r7, [r3], #-869	; 0xfffffc9b
     99c:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
     9a0:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
     9a4:	654d5f4f 	strbvs	r5, [sp, #-3919]	; 0xfffff0b1
     9a8:	6d756964 			; <UNDEFINED> instruction: 0x6d756964
     9ac:	6570535f 	ldrbvs	r5, [r0, #-863]!	; 0xfffffca1
     9b0:	52006465 	andpl	r6, r0, #1694498816	; 0x65000000
     9b4:	535f4343 	cmppl	pc, #201326593	; 0xc000001
     9b8:	4c504941 	mrrcmi	9, 4, r4, r0, cr1	; <UNPREDICTABLE>
     9bc:	5332494c 	teqpl	r2, #76, 18	; 0x130000
     9c0:	446b6c43 	strbtmi	r6, [fp], #-3139	; 0xfffff3bd
     9c4:	6f437669 	svcvs	0x00437669
     9c8:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
     9cc:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
     9d0:	52495f37 	subpl	r5, r9, #55, 30	; 0xdc
     9d4:	6c006e51 	stcvs	14, cr6, [r0], {81}	; 0x51
     9d8:	20676e6f 	rsbcs	r6, r7, pc, ror #28
     9dc:	676e6f6c 	strbvs	r6, [lr, -ip, ror #30]!
     9e0:	746e6920 	strbtvc	r6, [lr], #-2336	; 0xfffff6e0
     9e4:	48544500 	ldmdami	r4, {r8, sl, lr}^
     9e8:	554b575f 	strbpl	r5, [fp, #-1887]	; 0xfffff8a1
     9ec:	52495f50 	subpl	r5, r9, #80, 30	; 0x140
     9f0:	4f006e51 	svcmi	0x00006e51
     9f4:	485f4754 	ldmdami	pc, {r2, r4, r6, r8, r9, sl, lr}^	; <UNPREDICTABLE>
     9f8:	52495f53 	subpl	r5, r9, #332	; 0x14c
     9fc:	50006e51 	andpl	r6, r0, r1, asr lr
     a00:	52445055 	subpl	r5, r4, #85	; 0x55
     a04:	43535300 	cmpmi	r3, #0, 6
     a08:	53005247 	movwpl	r5, #583	; 0x247
     a0c:	5f314950 	svcpl	0x00314950
     a10:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     a14:	53494400 	movtpl	r4, #37888	; 0x9400
     a18:	454c4241 	strbmi	r4, [ip, #-577]	; 0xfffffdbf
     a1c:	43565300 	cmpmi	r6, #0, 6
     a20:	5f6c6c61 	svcpl	0x006c6c61
     a24:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     a28:	42504100 	subsmi	r4, r0, #0, 2
     a2c:	54535232 	ldrbpl	r5, [r3], #-562	; 0xfffffdce
     a30:	53420052 	movtpl	r0, #8274	; 0x2052
     a34:	00485252 	subeq	r5, r8, r2, asr r2
     a38:	5f434352 	svcpl	0x00434352
     a3c:	46746547 	ldrbtmi	r6, [r4], -r7, asr #10
     a40:	5367616c 	cmnpl	r7, #108, 2
     a44:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0xfffffe8c
     a48:	43520073 	cmpmi	r2, #115	; 0x73
     a4c:	6c435f43 	mcrrvs	15, 4, r5, r3, cr3
     a50:	736b636f 	cmnvc	fp, #-1140850687	; 0xbc000001
     a54:	52534200 	subspl	r4, r3, #0, 4
     a58:	47004c52 	smlsdmi	r0, r2, ip, r4
     a5c:	5f4f4950 	svcpl	0x004f4950
     a60:	68676948 	stmdavs	r7!, {r3, r6, r8, fp, sp, lr}^
     a64:	6570535f 	ldrbvs	r5, [r0, #-863]!	; 0xfffffca1
     a68:	52006465 	andpl	r6, r0, #1694498816	; 0x65000000
     a6c:	495f4343 	ldmdbmi	pc, {r0, r1, r6, r8, r9, lr}^	; <UNPREDICTABLE>
     a70:	6e6f4354 	mcrvs	3, 3, r4, cr15, cr4, {2}
     a74:	00676966 	rsbeq	r6, r7, r6, ror #18
     a78:	5f434352 	svcpl	0x00434352
     a7c:	43495348 	movtmi	r5, #37704	; 0x9348
     a80:	4600646d 	strmi	r6, [r0], -sp, ror #8
     a84:	495f5550 	ldmdbmi	pc, {r4, r6, r8, sl, ip, lr}^	; <UNPREDICTABLE>
     a88:	006e5152 	rsbeq	r5, lr, r2, asr r1
     a8c:	5f434352 	svcpl	0x00434352
     a90:	756a6441 	strbvc	r6, [sl, #-1089]!	; 0xfffffbbf
     a94:	53487473 	movtpl	r7, #33907	; 0x8473
     a98:	6c614349 	stclvs	3, cr4, [r1], #-292	; 0xfffffedc
     a9c:	61726269 	cmnvs	r2, r9, ror #4
     aa0:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
     aa4:	756c6156 	strbvc	r6, [ip, #-342]!	; 0xfffffeaa
     aa8:	41550065 	cmpmi	r5, r5, rrx
     aac:	5f345452 	svcpl	0x00345452
     ab0:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     ab4:	42504100 	subsmi	r4, r0, #0, 2
     ab8:	45504c32 	ldrbmi	r4, [r0, #-3122]	; 0xfffff3ce
     abc:	5200524e 	andpl	r5, r0, #-536870908	; 0xe0000004
     ac0:	415f4343 	cmpmi	pc, r3, asr #6
     ac4:	50314250 	eorspl	r4, r1, r0, asr r2
     ac8:	70697265 	rsbvc	r7, r9, r5, ror #4
     acc:	43520068 	cmpmi	r2, #104	; 0x68
     ad0:	54525f43 	ldrbpl	r5, [r2], #-3907	; 0xfffff0bd
     ad4:	4b4c4343 	blmi	13117e8 <startup-0x1ecee818>
     ad8:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
     adc:	4f006769 	svcmi	0x00006769
     ae0:	465f4754 			; <UNDEFINED> instruction: 0x465f4754
     ae4:	4b575f53 	blmi	15d8838 <startup-0x1ea277c8>
     ae8:	495f5055 	ldmdbmi	pc, {r0, r2, r4, r6, ip, lr}^	; <UNPREDICTABLE>
     aec:	006e5152 	rsbeq	r5, lr, r2, asr r1
     af0:	5f434352 	svcpl	0x00434352
     af4:	47414c46 	strbmi	r4, [r1, -r6, asr #24]
     af8:	43435200 	movtmi	r5, #12800	; 0x3200
     afc:	7465475f 	strbtvc	r4, [r5], #-1887	; 0xfffff8a1
     b00:	74535449 	ldrbvc	r5, [r3], #-1097	; 0xfffffbb7
     b04:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
     b08:	54584500 	ldrbpl	r4, [r8], #-1280	; 0xfffffb00
     b0c:	495f3449 	ldmdbmi	pc, {r0, r3, r6, sl, ip, sp}^	; <UNPREDICTABLE>
     b10:	006e5152 	rsbeq	r5, lr, r2, asr r1
     b14:	4c525443 	cfldrdmi	mvd5, [r2], {67}	; 0x43
     b18:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
     b1c:	41445f36 	cmpmi	r4, r6, lsr pc
     b20:	52495f43 	subpl	r5, r9, #268	; 0x10c
     b24:	4e006e51 	mcrmi	14, 0, r6, cr0, cr1, {2}
     b28:	74537765 	ldrbvc	r7, [r3], #-1893	; 0xfffff89b
     b2c:	00657461 	rsbeq	r7, r5, r1, ror #8
     b30:	4f495047 	svcmi	0x00495047
     b34:	6570535f 	ldrbvs	r5, [r0, #-863]!	; 0xfffffca1
     b38:	49006465 	stmdbmi	r0, {r0, r2, r5, r6, sl, sp, lr}
     b3c:	5f324332 	svcpl	0x00324332
     b40:	495f5645 	ldmdbmi	pc, {r0, r2, r6, r9, sl, ip, lr}^	; <UNPREDICTABLE>
     b44:	006e5152 	rsbeq	r5, lr, r2, asr r1
     b48:	5f434352 	svcpl	0x00434352
     b4c:	61656c43 	cmnvs	r5, r3, asr #24
     b50:	50544972 	subspl	r4, r4, r2, ror r9
     b54:	69646e65 	stmdbvs	r4!, {r0, r2, r5, r6, r9, sl, fp, sp, lr}^
     b58:	6942676e 	stmdbvs	r2, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}^
     b5c:	43520074 	cmpmi	r2, #116	; 0x74
     b60:	6c435f43 	mcrrvs	15, 4, r5, r3, cr3
     b64:	536b636f 	cmnpl	fp, #-1140850687	; 0xbc000001
     b68:	72756365 	rsbsvc	r6, r5, #-1811939327	; 0x94000001
     b6c:	53797469 	cmnpl	r9, #1761607680	; 0x69000000
     b70:	65747379 	ldrbvs	r7, [r4, #-889]!	; 0xfffffc87
     b74:	646d436d 	strbtvs	r4, [sp], #-877	; 0xfffffc93
     b78:	43435200 	movtmi	r5, #12800	; 0x3200
     b7c:	4941535f 	stmdbmi	r1, {r0, r1, r2, r3, r4, r6, r8, r9, ip, lr}^
     b80:	636f6c42 	cmnvs	pc, #16896	; 0x4200
     b84:	4c43416b 	stfmie	f4, [r3], {107}	; 0x6b
     b88:	756f534b 	strbvc	r5, [pc, #-843]!	; 845 <startup-0x1ffff7bb>
     b8c:	00656372 	rsbeq	r6, r5, r2, ror r3
     b90:	74737973 	ldrbtvc	r7, [r3], #-2419	; 0xfffff68d
     b94:	5f6b6369 	svcpl	0x006b6369
     b98:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xfffff1b7
     b9c:	61747300 	cmnvs	r4, r0, lsl #6
     ba0:	72737574 	rsbsvc	r7, r3, #116, 10	; 0x1d000000
     ba4:	52006765 	andpl	r6, r0, #26476544	; 0x1940000
     ba8:	415f4343 	cmpmi	pc, r3, asr #6
     bac:	50324250 	eorspl	r4, r2, r0, asr r2
     bb0:	70697265 	rsbvc	r7, r9, r5, ror #4
     bb4:	46420068 	strbmi	r0, [r2], -r8, rrx
     bb8:	41005241 	tstmi	r0, r1, asr #4
     bbc:	4c314250 	lfmmi	f4, 4, [r1], #-320	; 0xfffffec0
     bc0:	524e4550 	subpl	r4, lr, #80, 10	; 0x14000000
     bc4:	414d4400 	cmpmi	sp, r0, lsl #8
     bc8:	74535f31 	ldrbvc	r5, [r3], #-3889	; 0xfffff0cf
     bcc:	6d616572 	cfstr64vs	mvdx6, [r1, #-456]!	; 0xfffffe38
     bd0:	52495f31 	subpl	r5, r9, #49, 30	; 0xc4
     bd4:	61006e51 	tstvs	r0, r1, asr lr
     bd8:	76697463 	strbtvc	r7, [r9], -r3, ror #8
     bdc:	6f645f65 	svcvs	0x00645f65
     be0:	0073726f 	rsbseq	r7, r3, pc, ror #4
     be4:	32414d44 	subcc	r4, r1, #68, 26	; 0x1100
     be8:	7274535f 	rsbsvc	r5, r4, #2080374785	; 0x7c000001
     bec:	336d6165 	cmncc	sp, #1073741849	; 0x40000019
     bf0:	5152495f 	cmppl	r2, pc, asr r9
     bf4:	4b43006e 	blmi	10c0db4 <startup-0x1ef3f24c>
     bf8:	45544147 	ldrbmi	r4, [r4, #-327]	; 0xfffffeb9
     bfc:	4300524e 	movwmi	r5, #590	; 0x24e
     c00:	5f324e41 	svcpl	0x00324e41
     c04:	495f5854 	ldmdbmi	pc, {r2, r4, r6, fp, ip, lr}^	; <UNPREDICTABLE>
     c08:	006e5152 	rsbeq	r5, lr, r2, asr r1
     c0c:	534c4c50 	movtpl	r4, #52304	; 0xcc50
     c10:	004e4941 	subeq	r4, lr, r1, asr #18
     c14:	534c4c50 	movtpl	r4, #52304	; 0xcc50
     c18:	00514941 	subseq	r4, r1, r1, asr #18
     c1c:	534c4c50 	movtpl	r4, #52304	; 0xcc50
     c20:	00524941 	subseq	r4, r2, r1, asr #18
     c24:	5f434352 	svcpl	0x00434352
     c28:	314f434d 	cmpcc	pc, sp, asr #6
     c2c:	72756f53 	rsbsvc	r6, r5, #332	; 0x14c
     c30:	52006563 	andpl	r6, r0, #415236096	; 0x18c00000
     c34:	415f4343 	cmpmi	pc, r3, asr #6
     c38:	50334248 	eorspl	r4, r3, r8, asr #4
     c3c:	70697265 	rsbvc	r7, r9, r5, ror #4
     c40:	6f6c4368 	svcvs	0x006c4368
     c44:	6d436b63 	vstrvs	d22, [r3, #-396]	; 0xfffffe74
     c48:	79530064 	ldmdbvc	r3, {r2, r5, r6}^
     c4c:	63695473 	cmnvs	r9, #1929379840	; 0x73000000
     c50:	79545f6b 	ldmdbvc	r4, {r0, r1, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
     c54:	74006570 	strvc	r6, [r0], #-1392	; 0xfffffa90
     c58:	5f656d69 	svcpl	0x00656d69
     c5c:	746e6563 	strbtvc	r6, [lr], #-1379	; 0xfffffa9d
     c60:	5f6c6172 	svcpl	0x006c6172
     c64:	6d72616c 	ldfvse	f6, [r2, #-432]!	; 0xfffffe50
     c68:	43435200 	movtmi	r5, #12800	; 0x3200
     c6c:	4c4c505f 	mcrrmi	0, 5, r5, ip, cr15
     c70:	00646d43 	rsbeq	r6, r4, r3, asr #26
     c74:	5f434352 	svcpl	0x00434352
     c78:	6b636142 	blvs	18d9188 <startup-0x1e726e78>
     c7c:	65527075 	ldrbvs	r7, [r2, #-117]	; 0xffffff8b
     c80:	43746573 	cmnmi	r4, #482344960	; 0x1cc00000
     c84:	4100646d 	tstmi	r0, sp, ror #8
     c88:	52334248 	eorspl	r4, r3, #72, 4	; 0x80000004
     c8c:	00525453 	subseq	r5, r2, r3, asr r4
     c90:	6f727245 	svcvs	0x00727245
     c94:	61745372 	cmnvs	r4, r2, ror r3
     c98:	00737574 	rsbseq	r7, r3, r4, ror r5
     c9c:	31414d44 	cmpcc	r1, r4, asr #26
     ca0:	7274535f 	rsbsvc	r5, r4, #2080374785	; 0x7c000001
     ca4:	306d6165 	rsbcc	r6, sp, r5, ror #2
     ca8:	5152495f 	cmppl	r2, pc, asr r9
     cac:	7473006e 	ldrbtvc	r0, [r3], #-110	; 0xffffff92
     cb0:	75747261 	ldrbvc	r7, [r4, #-609]!	; 0xfffffd9f
     cb4:	43520070 	cmpmi	r2, #112	; 0x70
     cb8:	434d5f43 	movtmi	r5, #57155	; 0xdf43
     cbc:	6f53324f 	svcvs	0x0053324f
     cc0:	65637275 	strbvs	r7, [r3, #-629]!	; 0xfffffd8b
     cc4:	42504100 	subsmi	r4, r0, #0, 2
     cc8:	54535231 	ldrbpl	r5, [r3], #-561	; 0xfffffdcf
     ccc:	54520052 	ldrbpl	r0, [r2], #-82	; 0xffffffae
     cd0:	6c415f43 	mcrrvs	15, 4, r5, r1, cr3
     cd4:	5f6d7261 	svcpl	0x006d7261
     cd8:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     cdc:	42504100 	subsmi	r4, r0, #0, 2
     ce0:	524e4531 	subpl	r4, lr, #205520896	; 0xc400000
     ce4:	49564e00 	ldmdbmi	r6, {r9, sl, fp, lr}^
     ce8:	79545f43 	ldmdbvc	r4, {r0, r1, r6, r8, r9, sl, fp, ip, lr}^
     cec:	46006570 			; <UNDEFINED> instruction: 0x46006570
     cf0:	74636e75 	strbtvc	r6, [r3], #-3701	; 0xfffff18b
     cf4:	616e6f69 	cmnvs	lr, r9, ror #30
     cf8:	6174536c 	cmnvs	r4, ip, ror #6
     cfc:	49006574 	stmdbmi	r0, {r2, r4, r5, r6, r8, sl, sp, lr}
     d00:	5f334332 	svcpl	0x00334332
     d04:	495f5245 	ldmdbmi	pc, {r0, r2, r6, r9, ip, lr}^	; <UNPREDICTABLE>
     d08:	006e5152 	rsbeq	r5, lr, r2, asr r1
     d0c:	50595243 	subspl	r5, r9, r3, asr #4
     d10:	5152495f 	cmppl	r2, pc, asr r9
     d14:	5845006e 	stmdapl	r5, {r1, r2, r3, r5, r6}^
     d18:	35314954 	ldrcc	r4, [r1, #-2388]!	; 0xfffff6ac
     d1c:	5f30315f 	svcpl	0x0030315f
     d20:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     d24:	6e6f6c00 	cdpvs	12, 6, cr6, cr15, cr0, {0}
     d28:	6f6c2067 	svcvs	0x006c2067
     d2c:	7520676e 	strvc	r6, [r0, #-1902]!	; 0xfffff892
     d30:	6769736e 	strbvs	r7, [r9, -lr, ror #6]!
     d34:	2064656e 	rsbcs	r6, r4, lr, ror #10
     d38:	00746e69 	rsbseq	r6, r4, r9, ror #28
     d3c:	5f434352 	svcpl	0x00434352
     d40:	314f434d 	cmpcc	pc, sp, asr #6
     d44:	00766944 	rsbseq	r6, r6, r4, asr #18
     d48:	334d4954 	movtcc	r4, #55636	; 0xd954
     d4c:	5152495f 	cmppl	r2, pc, asr r9
     d50:	5355006e 	cmppl	r5, #110	; 0x6e
     d54:	31545241 	cmpcc	r4, r1, asr #4
     d58:	5152495f 	cmppl	r2, pc, asr r9
     d5c:	4352006e 	cmpmi	r2, #110	; 0x6e
     d60:	61575f43 	cmpvs	r7, r3, asr #30
     d64:	6f467469 	svcvs	0x00467469
     d68:	45534872 	ldrbmi	r4, [r3, #-2162]	; 0xfffff78e
     d6c:	72617453 	rsbvc	r7, r1, #1392508928	; 0x53000000
     d70:	00705574 	rsbseq	r5, r0, r4, ror r5
     d74:	43435553 	movtmi	r5, #13651	; 0x3553
     d78:	00535345 	subseq	r5, r3, r5, asr #6
     d7c:	4f495047 	svcmi	0x00495047
     d80:	646f4d5f 	strbtvs	r4, [pc], #-3423	; d88 <startup-0x1ffff278>
     d84:	41430065 	cmpmi	r3, r5, rrx
     d88:	525f324e 	subspl	r3, pc, #-536870908	; 0xe0000004
     d8c:	495f3158 	ldmdbmi	pc, {r3, r4, r6, r8, ip, sp}^	; <UNPREDICTABLE>
     d90:	006e5152 	rsbeq	r5, lr, r2, asr r1
     d94:	5f434441 	svcpl	0x00434441
     d98:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     d9c:	43435200 	movtmi	r5, #12800	; 0x3200
     da0:	45534c5f 	ldrbmi	r4, [r3, #-3167]	; 0xfffff3a1
     da4:	65646f4d 	strbvs	r6, [r4, #-3917]!	; 0xfffff0b3
     da8:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
     dac:	49006769 	stmdbmi	r0, {r0, r3, r5, r6, r8, r9, sl, sp, lr}
     db0:	00524543 	subseq	r4, r2, r3, asr #10
     db4:	33424841 	movtcc	r4, #10305	; 0x2841
     db8:	4e45504c 	cdpmi	0, 4, cr5, cr5, cr12, {2}
     dbc:	6f640052 	svcvs	0x00640052
     dc0:	3031726f 	eorscc	r7, r1, pc, ror #4
     dc4:	6f6f6400 	svcvs	0x006f6400
     dc8:	00313172 	eorseq	r3, r1, r2, ror r1
     dcc:	726f6f64 	rsbvc	r6, pc, #100, 30	; 0x190
     dd0:	47003231 	smladxmi	r0, r1, r2, r3
     dd4:	4d4f4950 	vstrmi.16	s9, [pc, #-160]	; d3c <startup-0x1ffff2c4>	; <UNPREDICTABLE>
     dd8:	5f65646f 	svcpl	0x0065646f
     ddc:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0xfffff6ac
     de0:	00666544 	rsbeq	r6, r6, r4, asr #10
     de4:	726f6f64 	rsbvc	r6, pc, #100, 30	; 0x190
     de8:	64003431 	strvs	r3, [r0], #-1073	; 0xfffffbcf
     dec:	31726f6f 	cmncc	r2, pc, ror #30
     df0:	6f640035 	svcvs	0x00640035
     df4:	3631726f 	ldrtcc	r7, [r1], -pc, ror #4
     df8:	73795300 	cmnvc	r9, #0, 6
     dfc:	6b636954 	blvs	18db354 <startup-0x1e724cac>
     e00:	6e6f435f 	mcrvs	3, 3, r4, cr15, cr15, {2}
     e04:	00676966 	rsbeq	r6, r7, r6, ror #18
     e08:	552f3a43 	strpl	r3, [pc, #-2627]!	; 3cd <startup-0x1ffffc33>
     e0c:	73726573 	cmnvc	r2, #482344960	; 0x1cc00000
     e10:	6164412f 	cmnvs	r4, pc, lsr #2
     e14:	4f2f746d 	svcmi	0x002f746d
     e18:	7244656e 	subvc	r6, r4, #461373440	; 0x1b800000
     e1c:	2f657669 	svccs	0x00657669
     e20:	756b6f44 	strbvc	r6, [fp, #-3908]!	; 0xfffff0bc
     e24:	746e656d 	strbtvc	r6, [lr], #-1389	; 0xfffffa93
     e28:	7469472f 	strbtvc	r4, [r9], #-1839	; 0xfffff8d1
     e2c:	2f627548 	svccs	0x00627548
     e30:	32544144 	subscc	r4, r4, #68, 2
     e34:	4c2d3039 	stcmi	0, cr3, [sp], #-228	; 0xffffff1c
     e38:	736d7261 	cmnvc	sp, #268435462	; 0x10000006
     e3c:	65747379 	ldrbvs	r7, [r4, #-889]!	; 0xfffffc87
     e40:	6f6b2f6d 	svcvs	0x006b2f6d
     e44:	6f442f64 	svcvs	0x00442f64
     e48:	732f726f 			; <UNDEFINED> instruction: 0x732f726f
     e4c:	74726174 	ldrbtvc	r6, [r2], #-372	; 0xfffffe8c
     e50:	632e7075 			; <UNDEFINED> instruction: 0x632e7075
     e54:	53464100 	movtpl	r4, #24832	; 0x6100
     e58:	544f0052 	strbpl	r0, [pc], #-82	; e60 <startup-0x1ffff1a0>
     e5c:	52455059 	subpl	r5, r5, #89	; 0x59
     e60:	4c414300 	mcrrmi	3, 0, r4, r1, cr0
     e64:	74004249 	strvc	r4, [r0], #-585	; 0xfffffdb7
     e68:	6572706d 	ldrbvs	r7, [r2, #-109]!	; 0xffffff93
     e6c:	53460067 	movtpl	r0, #24679	; 0x6067
     e70:	495f434d 	ldmdbmi	pc, {r0, r2, r3, r6, r8, r9, lr}^	; <UNPREDICTABLE>
     e74:	006e5152 	rsbeq	r5, lr, r2, asr r1
     e78:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xfffff197
     e7c:	54584500 	ldrbpl	r4, [r8], #-1280	; 0xfffffb00
     e80:	495f3049 	ldmdbmi	pc, {r0, r3, r6, ip, sp}^	; <UNPREDICTABLE>
     e84:	006e5152 	rsbeq	r5, lr, r2, asr r1
     e88:	434b4344 	movtmi	r4, #45892	; 0xb344
     e8c:	32524746 	subscc	r4, r2, #18350080	; 0x1180000
     e90:	53464300 	movtpl	r4, #25344	; 0x6300
     e94:	43520052 	cmpmi	r2, #82	; 0x52
     e98:	48415f43 	stmdami	r1, {r0, r1, r6, r8, r9, sl, fp, ip, lr}^
     e9c:	65503142 	ldrbvs	r3, [r0, #-322]	; 0xfffffebe
     ea0:	68706972 	ldmdavs	r0!, {r1, r4, r5, r6, r8, fp, sp, lr}^
     ea4:	65736800 	ldrbvs	r6, [r3, #-2048]!	; 0xfffff800
     ea8:	74617473 	strbtvc	r7, [r1], #-1139	; 0xfffffb8d
     eac:	44007375 	strmi	r7, [r0], #-885	; 0xfffffc8b
     eb0:	5f31414d 	svcpl	0x0031414d
     eb4:	65727453 	ldrbvs	r7, [r2, #-1107]!	; 0xfffffbad
     eb8:	5f346d61 	svcpl	0x00346d61
     ebc:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     ec0:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
     ec4:	616c5f4f 	cmnvs	ip, pc, asr #30
     ec8:	4400706d 	strmi	r7, [r0], #-109	; 0xffffff93
     ecc:	5f32414d 	svcpl	0x0032414d
     ed0:	65727453 	ldrbvs	r7, [r2, #-1107]!	; 0xfffffbad
     ed4:	5f366d61 	svcpl	0x00366d61
     ed8:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     edc:	42484100 	submi	r4, r8, #0, 2
     ee0:	524e4531 	subpl	r4, lr, #205520896	; 0xc400000
     ee4:	414f4c00 	cmpmi	pc, r0, lsl #24
     ee8:	50470044 	subpl	r0, r7, r4, asr #32
     eec:	70534f49 	subsvc	r4, r3, r9, asr #30
     ef0:	5f646565 	svcpl	0x00646565
     ef4:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0xfffff6ac
     ef8:	00666544 	rsbeq	r6, r6, r4, asr #10
     efc:	75626544 	strbvc	r6, [r2, #-1348]!	; 0xfffffabc
     f00:	6e6f4d67 	cdpvs	13, 6, cr4, cr15, cr7, {3}
     f04:	726f7469 	rsbvc	r7, pc, #1761607680	; 0x69000000
     f08:	5152495f 	cmppl	r2, pc, asr r9
     f0c:	5047006e 	subpl	r0, r7, lr, rrx
     f10:	505f4f49 	subspl	r4, pc, r9, asr #30
     f14:	52006e69 	andpl	r6, r0, #1680	; 0x690
     f18:	415f4343 	cmpmi	pc, r3, asr #6
     f1c:	50314248 	eorspl	r4, r1, r8, asr #4
     f20:	70697265 	rsbvc	r7, r9, r5, ror #4
     f24:	73655268 	cmnvc	r5, #104, 4	; 0x80000006
     f28:	6d437465 	cfstrdvs	mvd7, [r3, #-404]	; 0xfffffe6c
     f2c:	32490064 	subcc	r0, r9, #100	; 0x64
     f30:	455f3343 	ldrbmi	r3, [pc, #-835]	; bf5 <startup-0x1ffff40b>
     f34:	52495f56 	subpl	r5, r9, #344	; 0x158
     f38:	47006e51 	smlsdmi	r0, r1, lr, r6
     f3c:	5f4f4950 	svcpl	0x004f4950
     f40:	64507550 	ldrbvs	r7, [r0], #-1360	; 0xfffffab0
     f44:	42484100 	submi	r4, r8, #0, 2
     f48:	54535232 	ldrbpl	r5, [r3], #-562	; 0xfffffdce
     f4c:	54450052 	strbpl	r0, [r5], #-82	; 0xffffffae
     f50:	52495f48 	subpl	r5, r9, #72, 30	; 0x120
     f54:	52006e51 	andpl	r6, r0, #1296	; 0x510
     f58:	435f4343 	cmpmi	pc, #201326593	; 0xc000001
     f5c:	6b636f6c 	blvs	18dcd14 <startup-0x1e7232ec>
     f60:	70795473 	rsbsvc	r5, r9, r3, ror r4
     f64:	66654465 	strbtvs	r4, [r5], -r5, ror #8
     f68:	464d4d00 	strbmi	r4, [sp], -r0, lsl #26
     f6c:	43520052 	cmpmi	r2, #82	; 0x52
     f70:	79545f43 	ldmdbvc	r4, {r0, r1, r6, r8, r9, sl, fp, ip, lr}^
     f74:	65446570 	strbvs	r6, [r4, #-1392]	; 0xfffffa90
     f78:	4d4d0066 	stclmi	0, cr0, [sp, #-408]	; 0xfffffe68
     f7c:	00524146 	subseq	r4, r2, r6, asr #2
     f80:	726f6873 	rsbvc	r6, pc, #7536640	; 0x730000
     f84:	6e692074 	mcrvs	0, 3, r2, cr9, cr4, {3}
     f88:	61700074 	cmnvs	r0, r4, ror r0
     f8c:	6f777373 	svcvs	0x00777373
     f90:	52006472 	andpl	r6, r0, #1912602624	; 0x72000000
     f94:	495f4343 	ldmdbmi	pc, {r0, r1, r6, r8, r9, lr}^	; <UNPREDICTABLE>
     f98:	006e5152 	rsbeq	r5, lr, r2, asr r1
     f9c:	5f434352 	svcpl	0x00434352
     fa0:	49005449 	stmdbmi	r0, {r0, r3, r6, sl, ip, lr}
     fa4:	00524153 	subseq	r4, r2, r3, asr r1
     fa8:	4f495047 	svcmi	0x00495047
     fac:	7079745f 	rsbsvc	r7, r9, pc, asr r4
     fb0:	4d440065 	stclmi	0, cr0, [r4, #-404]	; 0xfffffe6c
     fb4:	535f3141 	cmppl	pc, #1073741840	; 0x40000010
     fb8:	61657274 	smcvs	22308	; 0x5724
     fbc:	495f336d 	ldmdbmi	pc, {r0, r2, r3, r5, r6, r8, r9, ip, sp}^	; <UNPREDICTABLE>
     fc0:	006e5152 	rsbeq	r5, lr, r2, asr r1
     fc4:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
     fc8:	495f3254 	ldmdbmi	pc, {r2, r4, r6, r9, ip, sp}^	; <UNPREDICTABLE>
     fcc:	006e5152 	rsbeq	r5, lr, r2, asr r1
     fd0:	73746962 	cmnvc	r4, #1605632	; 0x188000
     fd4:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0xfffffe8c
     fd8:	4e450073 	mcrmi	0, 2, r0, cr5, cr3, {3}
     fdc:	454c4241 	strbmi	r4, [ip, #-577]	; 0xfffffdbf
     fe0:	6c6c7000 	stclvs	0, cr7, [ip], #-0
     fe4:	006f6376 	rsbeq	r6, pc, r6, ror r3	; <UNPREDICTABLE>
     fe8:	5f434352 	svcpl	0x00434352
     fec:	31425041 	cmpcc	r2, r1, asr #32
     ff0:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
     ff4:	6c436870 	mcrrvs	8, 7, r6, r3, cr0
     ff8:	4c6b636f 	stclmi	3, cr6, [fp], #-444	; 0xfffffe44
     ffc:	646f4d50 	strbtvs	r4, [pc], #-3408	; 1004 <startup-0x1fffeffc>
    1000:	646d4365 	strbtvs	r4, [sp], #-869	; 0xfffffc9b
    1004:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
    1008:	79545f4f 	ldmdbvc	r4, {r0, r1, r2, r3, r6, r8, r9, sl, fp, ip, lr}^
    100c:	65446570 	strbvs	r6, [r4, #-1392]	; 0xfffffa90
    1010:	49540066 	ldmdbmi	r4, {r1, r2, r5, r6}^
    1014:	555f314d 	ldrbpl	r3, [pc, #-333]	; ecf <startup-0x1ffff131>
    1018:	49545f50 	ldmdbmi	r4, {r4, r6, r8, r9, sl, fp, ip, lr}^
    101c:	5f30314d 	svcpl	0x0030314d
    1020:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
    1024:	4d544900 	vldrmi.16	s9, [r4, #-0]	; <UNPREDICTABLE>
    1028:	4278525f 	rsbsmi	r5, r8, #-268435451	; 0xf0000005
    102c:	65666675 	strbvs	r6, [r6, #-1653]!	; 0xfffff98b
    1030:	4c500072 	mrrcmi	0, 7, r0, r0, cr2	; <UNPREDICTABLE>
    1034:	5332494c 	teqpl	r2, #76, 18	; 0x130000
    1038:	4352004e 	cmpmi	r2, #78	; 0x4e
    103c:	48415f43 	stmdami	r1, {r0, r1, r6, r8, r9, sl, fp, ip, lr}^
    1040:	65503142 	ldrbvs	r3, [r0, #-322]	; 0xfffffebe
    1044:	68706972 	ldmdavs	r0!, {r1, r4, r5, r6, r8, fp, sp, lr}^
    1048:	636f6c43 	cmnvs	pc, #17152	; 0x4300
    104c:	4d504c6b 	ldclmi	12, cr4, [r0, #-428]	; 0xfffffe54
    1050:	4365646f 	cmnmi	r5, #1862270976	; 0x6f000000
    1054:	5000646d 	andpl	r6, r0, sp, ror #8
    1058:	32494c4c 	subcc	r4, r9, #76, 24	; 0x4c00
    105c:	6d005253 	sfmvs	f5, 4, [r0, #-332]	; 0xfffffeb4
    1060:	006e6961 	rsbeq	r6, lr, r1, ror #18
    1064:	5f47544f 	svcpl	0x0047544f
    1068:	455f5348 	ldrbmi	r5, [pc, #-840]	; d28 <startup-0x1ffff2d8>
    106c:	4f5f3150 	svcmi	0x005f3150
    1070:	495f5455 	ldmdbmi	pc, {r0, r2, r4, r6, sl, ip, lr}^	; <UNPREDICTABLE>
    1074:	006e5152 	rsbeq	r5, lr, r2, asr r1
    1078:	6d72616c 	ldfvse	f6, [r2, #-432]!	; 0xfffffe50
    107c:	6b636954 	blvs	18db5d4 <startup-0x1e724a2c>
    1080:	43435200 	movtmi	r5, #12800	; 0x3200
    1084:	4354525f 	cmpmi	r4, #-268435451	; 0xf0000005
    1088:	434b4c43 	movtmi	r4, #48195	; 0xbc43
    108c:	4d00646d 	cfstrsmi	mvf6, [r0, #-436]	; 0xfffffe4c
    1090:	5245444f 	subpl	r4, r5, #1325400064	; 0x4f000000
    1094:	49564e00 	ldmdbmi	r6, {r9, sl, fp, lr}^
    1098:	65535f43 	ldrbvs	r5, [r3, #-3907]	; 0xfffff0bd
    109c:	69725074 	ldmdbvs	r2!, {r2, r4, r5, r6, ip, lr}^
    10a0:	7469726f 	strbtvc	r7, [r9], #-623	; 0xfffffd91
    10a4:	41430079 	hvcmi	12297	; 0x3009
    10a8:	525f314e 	subspl	r3, pc, #-2147483629	; 0x80000013
    10ac:	495f3158 	ldmdbmi	pc, {r3, r4, r6, r8, ip, sp}^	; <UNPREDICTABLE>
    10b0:	006e5152 	rsbeq	r5, lr, r2, asr r1
    10b4:	5f434352 	svcpl	0x00434352
    10b8:	32424841 	subcc	r4, r2, #4259840	; 0x410000
    10bc:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
    10c0:	47006870 	smlsdxmi	r0, r0, r8, r6
    10c4:	5f4f4950 	svcpl	0x004f4950
    10c8:	64507550 	ldrbvs	r7, [r0], #-1360	; 0xfffffab0
    10cc:	0050555f 	subseq	r5, r0, pc, asr r5
    10d0:	49545845 	ldmdbmi	r4, {r0, r2, r6, fp, ip, lr}^
    10d4:	5f355f39 	svcpl	0x00355f39
    10d8:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
    10dc:	4c4c5000 	marmi	acc0, r5, ip
    10e0:	43494153 	movtmi	r4, #37203	; 0x9153
    10e4:	00524746 	subseq	r4, r2, r6, asr #14
    10e8:	4e4c4c50 	mcrmi	12, 2, r4, cr12, cr0, {2}
    10ec:	43435200 	movtmi	r5, #12800	; 0x3200
    10f0:	4248415f 	submi	r4, r8, #-1073741801	; 0xc0000017
    10f4:	72655031 	rsbvc	r5, r5, #49	; 0x31
    10f8:	43687069 	cmnmi	r8, #105	; 0x69
    10fc:	6b636f6c 	blvs	18dceb4 <startup-0x1e72314c>
    1100:	00646d43 	rsbeq	r6, r4, r3, asr #26
    1104:	726f6873 	rsbvc	r6, pc, #7536640	; 0x730000
    1108:	6e752074 	mrcvs	0, 3, r2, cr5, cr4, {3}
    110c:	6e676973 			; <UNDEFINED> instruction: 0x6e676973
    1110:	69206465 	stmdbvs	r0!, {r0, r2, r5, r6, sl, sp, lr}
    1114:	5200746e 	andpl	r7, r0, #1845493760	; 0x6e000000
    1118:	505f4343 	subspl	r4, pc, r3, asr #6
    111c:	32494c4c 	subcc	r4, r9, #76, 24	; 0x4c00
    1120:	6e6f4353 	mcrvs	3, 3, r4, cr15, cr3, {2}
    1124:	00676966 	rsbeq	r6, r7, r6, ror #18
    1128:	384d4954 	stmdacc	sp, {r2, r4, r6, r8, fp, lr}^
    112c:	5f43435f 	svcpl	0x0043435f
    1130:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
    1134:	49445300 	stmdbmi	r4, {r8, r9, ip, lr}^
    1138:	52495f4f 	subpl	r5, r9, #316	; 0x13c
    113c:	43006e51 	movwmi	r6, #3665	; 0xe51
    1140:	52434150 	subpl	r4, r3, #80, 2
    1144:	50534900 	subspl	r4, r3, r0, lsl #18
    1148:	59530052 	ldmdbpl	r3, {r1, r4, r6}^
    114c:	4b4c4353 	blmi	1311ea0 <startup-0x1ecee160>
    1150:	6572465f 	ldrbvs	r4, [r2, #-1631]!	; 0xfffff9a1
    1154:	6e657571 	mcrvs	5, 3, r7, cr5, cr1, {3}
    1158:	45007963 	strmi	r7, [r0, #-2403]	; 0xfffff69d
    115c:	33495458 	movtcc	r5, #37976	; 0x9458
    1160:	5152495f 	cmppl	r2, pc, asr r9
    1164:	6550006e 	ldrbvs	r0, [r0, #-110]	; 0xffffff92
    1168:	5653646e 	ldrbpl	r6, [r3], -lr, ror #8
    116c:	5152495f 	cmppl	r2, pc, asr r9
    1170:	544f006e 	strbpl	r0, [pc], #-110	; 1178 <startup-0x1fffee88>
    1174:	53485f47 	movtpl	r5, #36679	; 0x8f47
    1178:	3150455f 	cmpcc	r0, pc, asr r5
    117c:	5f4e495f 	svcpl	0x004e495f
    1180:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
    1184:	414d4400 	cmpmi	sp, r0, lsl #8
    1188:	74535f31 	ldrbvc	r5, [r3], #-3889	; 0xfffff0cf
    118c:	6d616572 	cfstr64vs	mvdx6, [r1, #-456]!	; 0xfffffe38
    1190:	52495f37 	subpl	r5, r9, #55, 30	; 0xdc
    1194:	5f006e51 	svcpl	0x00006e51
    1198:	746e695f 	strbtvc	r6, [lr], #-2399	; 0xfffff6a1
    119c:	745f3233 	ldrbvc	r3, [pc], #-563	; 11a4 <startup-0x1fffee5c>
    11a0:	43435200 	movtmi	r5, #12800	; 0x3200
    11a4:	4d49545f 	cfstrdmi	mvd5, [r9, #-380]	; 0xfffffe84
    11a8:	504b4c43 	subpl	r4, fp, r3, asr #24
    11ac:	63736572 	cmnvs	r3, #478150656	; 0x1c800000
    11b0:	72656c61 	rsbvc	r6, r5, #24832	; 0x6100
    11b4:	45534900 	ldrbmi	r4, [r3, #-2304]	; 0xfffff700
    11b8:	72700052 	rsbsvc	r0, r0, #82	; 0x52
    11bc:	00637365 	rsbeq	r7, r3, r5, ror #6
    11c0:	5f434352 	svcpl	0x00434352
    11c4:	32424841 	subcc	r4, r2, #4259840	; 0x410000
    11c8:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
    11cc:	65526870 	ldrbvs	r6, [r2, #-2160]	; 0xfffff790
    11d0:	43746573 	cmnmi	r4, #482344960	; 0x1cc00000
    11d4:	5200646d 	andpl	r6, r0, #1828716544	; 0x6d000000
    11d8:	505f4343 	subspl	r4, pc, r3, asr #6
    11dc:	41534c4c 	cmpmi	r3, ip, asr #24
    11e0:	646d4349 	strbtvs	r4, [sp], #-841	; 0xfffffcb7
    11e4:	42484100 	submi	r4, r8, #0, 2
    11e8:	524e4533 	subpl	r4, lr, #213909504	; 0xcc00000
    11ec:	43435200 	movtmi	r5, #12800	; 0x3200
    11f0:	5359535f 	cmppl	r9, #2080374785	; 0x7c000001
    11f4:	434b4c43 	movtmi	r4, #48195	; 0xbc43
    11f8:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    11fc:	4d440067 	stclmi	0, cr0, [r4, #-412]	; 0xfffffe64
    1200:	535f3241 	cmppl	pc, #268435460	; 0x10000004
    1204:	61657274 	smcvs	22308	; 0x5724
    1208:	495f326d 	ldmdbmi	pc, {r0, r2, r3, r5, r6, r9, ip, sp}^	; <UNPREDICTABLE>
    120c:	006e5152 	rsbeq	r5, lr, r2, asr r1
    1210:	4f495047 	svcmi	0x00495047
    1214:	7361465f 	cmnvc	r1, #99614720	; 0x5f00000
    1218:	70535f74 	subsvc	r5, r3, r4, ror pc
    121c:	00646565 	rsbeq	r6, r4, r5, ror #10
    1220:	5f434352 	svcpl	0x00434352
    1224:	434c4c50 	movtmi	r4, #52304	; 0xcc50
    1228:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    122c:	6c700067 	ldclvs	0, cr0, [r0], #-412	; 0xfffffe64
    1230:	70006d6c 	andvc	r6, r0, ip, ror #26
    1234:	6f706e69 	svcvs	0x00706e69
    1238:	69420073 	stmdbvs	r2, {r0, r1, r4, r5, r6}^
    123c:	45535f74 	ldrbmi	r5, [r3, #-3956]	; 0xfffff08c
    1240:	50470054 	subpl	r0, r7, r4, asr r0
    1244:	525f4f49 	subspl	r4, pc, #292	; 0x124
    1248:	4f646165 	svcmi	0x00646165
    124c:	75707475 	ldrbvc	r7, [r0, #-1141]!	; 0xfffffb8b
    1250:	74614474 	strbtvc	r4, [r1], #-1140	; 0xfffffb8c
    1254:	50470061 	subpl	r0, r7, r1, rrx
    1258:	415f4f49 	cmpmi	pc, r9, asr #30
    125c:	65740046 	ldrbvs	r0, [r4, #-70]!	; 0xffffffba
    1260:	4700706d 	strmi	r7, [r0, -sp, rrx]
    1264:	5f4f4950 	svcpl	0x004f4950
    1268:	75727453 	ldrbvc	r7, [r2, #-1107]!	; 0xfffffbad
    126c:	6e497463 	cdpvs	4, 4, cr7, cr9, cr3, {3}
    1270:	42007469 	andmi	r7, r0, #1761607680	; 0x69000000
    1274:	61567469 	cmpvs	r6, r9, ror #8
    1278:	6942006c 	stmdbvs	r2, {r2, r3, r5, r6}^
    127c:	45525f74 	ldrbmi	r5, [r2, #-3956]	; 0xfffff08c
    1280:	00544553 	subseq	r4, r4, r3, asr r5
    1284:	4f495047 	svcmi	0x00495047
    1288:	6972575f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, lr}^
    128c:	69426574 	stmdbvs	r2, {r2, r4, r5, r6, r8, sl, sp, lr}^
    1290:	50470074 	subpl	r0, r7, r4, ror r0
    1294:	535f4f49 	cmppl	pc, #292	; 0x124
    1298:	69427465 	stmdbvs	r2, {r0, r2, r5, r6, sl, ip, sp, lr}^
    129c:	47007374 	smlsdxmi	r0, r4, r3, r7
    12a0:	5f4f4950 	svcpl	0x004f4950
    12a4:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xfffff1b7
    12a8:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
    12ac:	65525f4f 	ldrbvs	r5, [r2, #-3919]	; 0xfffff0b1
    12b0:	42746573 	rsbsmi	r6, r4, #482344960	; 0x1cc00000
    12b4:	00737469 	rsbseq	r7, r3, r9, ror #8
    12b8:	552f3a43 	strpl	r3, [pc, #-2627]!	; 87d <startup-0x1ffff783>
    12bc:	73726573 	cmnvc	r2, #482344960	; 0x1cc00000
    12c0:	6164412f 	cmnvs	r4, pc, lsr #2
    12c4:	4f2f746d 	svcmi	0x002f746d
    12c8:	7244656e 	subvc	r6, r4, #461373440	; 0x1b800000
    12cc:	2f657669 	svccs	0x00657669
    12d0:	756b6f44 	strbvc	r6, [fp, #-3908]!	; 0xfffff0bc
    12d4:	746e656d 	strbtvc	r6, [lr], #-1389	; 0xfffffa93
    12d8:	7469472f 	strbtvc	r4, [r9], #-1839	; 0xfffff8d1
    12dc:	2f627548 	svccs	0x00627548
    12e0:	32544144 	subscc	r4, r4, #68, 2
    12e4:	4c2d3039 	stcmi	0, cr3, [sp], #-228	; 0xffffff1c
    12e8:	736d7261 	cmnvc	sp, #268435462	; 0x10000006
    12ec:	65747379 	ldrbvs	r7, [r4, #-889]!	; 0xfffffc87
    12f0:	6f6b2f6d 	svcvs	0x006b2f6d
    12f4:	696c2f64 	stmdbvs	ip!, {r2, r5, r6, r8, r9, sl, fp, sp}^
    12f8:	54532f62 	ldrbpl	r2, [r3], #-3938	; 0xfffff09e
    12fc:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
    1300:	696c5f34 	stmdbvs	ip!, {r2, r4, r5, r8, r9, sl, fp, ip, lr}^
    1304:	54532f62 	ldrbpl	r2, [r3], #-3938	; 0xfffff09e
    1308:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
    130c:	5f787834 	svcpl	0x00787834
    1310:	50647453 	rsbpl	r7, r4, r3, asr r4
    1314:	70697265 	rsbvc	r7, r9, r5, ror #4
    1318:	72445f68 	subvc	r5, r4, #104, 30	; 0x1a0
    131c:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
    1320:	6372732f 	cmnvs	r2, #-1140850688	; 0xbc000000
    1324:	6d74732f 	ldclvs	3, cr7, [r4, #-188]!	; 0xffffff44
    1328:	34663233 	strbtcc	r3, [r6], #-563	; 0xfffffdcd
    132c:	675f7878 			; <UNDEFINED> instruction: 0x675f7878
    1330:	2e6f6970 			; <UNDEFINED> instruction: 0x2e6f6970
    1334:	50470063 	subpl	r0, r7, r3, rrx
    1338:	445f4f49 	ldrbmi	r4, [pc], #-3913	; 1340 <startup-0x1fffecc0>
    133c:	696e4965 	stmdbvs	lr!, {r0, r2, r5, r6, r8, fp, lr}^
    1340:	50470074 	subpl	r0, r7, r4, ror r0
    1344:	525f4f49 	subspl	r4, pc, #292	; 0x124
    1348:	49646165 	stmdbmi	r4!, {r0, r2, r5, r6, r8, sp, lr}^
    134c:	7475706e 	ldrbtvc	r7, [r5], #-110	; 0xffffff92
    1350:	61746144 	cmnvs	r4, r4, asr #2
    1354:	00746942 	rsbseq	r6, r4, r2, asr #18
    1358:	4f495047 	svcmi	0x00495047
    135c:	696e495f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, lr}^
    1360:	72745374 	rsbsvc	r5, r4, #116, 6	; 0xd0000001
    1364:	00746375 	rsbseq	r6, r4, r5, ror r3
    1368:	74726f50 	ldrbtvc	r6, [r2], #-3920	; 0xfffff0b0
    136c:	006c6156 	rsbeq	r6, ip, r6, asr r1
    1370:	4f495047 	svcmi	0x00495047
    1374:	6e69505f 	mcrvs	0, 3, r5, cr9, cr15, {2}
    1378:	72756f53 	rsbsvc	r6, r5, #332	; 0x14c
    137c:	47006563 	strmi	r6, [r0, -r3, ror #10]
    1380:	5f4f4950 	svcpl	0x004f4950
    1384:	64616552 	strbtvs	r6, [r1], #-1362	; 0xfffffaae
    1388:	75706e49 	ldrbvc	r6, [r0, #-3657]!	; 0xfffff1b7
    138c:	74614474 	strbtvc	r4, [r1], #-1140	; 0xfffffb8c
    1390:	50470061 	subpl	r0, r7, r1, rrx
    1394:	505f4f49 	subspl	r4, pc, r9, asr #30
    1398:	6f4c6e69 	svcvs	0x004c6e69
    139c:	6f436b63 	svcvs	0x00436b63
    13a0:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    13a4:	74694200 	strbtvc	r4, [r9], #-512	; 0xfffffe00
    13a8:	69746341 	ldmdbvs	r4!, {r0, r6, r8, r9, sp, lr}^
    13ac:	63006e6f 	movwvs	r6, #3695	; 0xe6f
    13b0:	65727275 	ldrbvs	r7, [r2, #-629]!	; 0xfffffd8b
    13b4:	6970746e 	ldmdbvs	r0!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}^
    13b8:	5047006e 	subpl	r0, r7, lr, rrx
    13bc:	575f4f49 	ldrbpl	r4, [pc, -r9, asr #30]
    13c0:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
    13c4:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
    13c8:	4700784f 	strmi	r7, [r0, -pc, asr #16]
    13cc:	5f4f4950 	svcpl	0x004f4950
    13d0:	67676f54 			; <UNDEFINED> instruction: 0x67676f54
    13d4:	6942656c 	stmdbvs	r2, {r2, r3, r5, r6, r8, sl, sp, lr}^
    13d8:	74007374 	strvc	r7, [r0], #-884	; 0xfffffc8c
    13dc:	5f706d65 	svcpl	0x00706d65
    13e0:	50470032 	subpl	r0, r7, r2, lsr r0
    13e4:	505f4f49 	subspl	r4, pc, r9, asr #30
    13e8:	46416e69 	strbmi	r6, [r1], -r9, ror #28
    13ec:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    13f0:	47006769 	strmi	r6, [r0, -r9, ror #14]
    13f4:	5f4f4950 	svcpl	0x004f4950
    13f8:	64616552 	strbtvs	r6, [r1], #-1362	; 0xfffffaae
    13fc:	7074754f 	rsbsvc	r7, r4, pc, asr #10
    1400:	61447475 	hvcvs	18245	; 0x4745
    1404:	69426174 	stmdbvs	r2, {r2, r4, r5, r6, r8, sp, lr}^
    1408:	564e0074 			; <UNDEFINED> instruction: 0x564e0074
    140c:	495f4349 	ldmdbmi	pc, {r0, r3, r6, r8, r9, lr}^	; <UNPREDICTABLE>
    1410:	5474696e 	ldrbtpl	r6, [r4], #-2414	; 0xfffff692
    1414:	44657079 	strbtmi	r7, [r5], #-121	; 0xffffff87
    1418:	4e006665 	cfmadd32mi	mvax3, mvfx6, mvfx0, mvfx5
    141c:	5f434956 	svcpl	0x00434956
    1420:	43515249 	cmpmi	r1, #-1879048188	; 0x90000004
    1424:	6e6e6168 	powvsez	f6, f6, #0.0
    1428:	6d436c65 	stclvs	12, cr6, [r3, #-404]	; 0xfffffe6c
    142c:	79530064 	ldmdbvc	r3, {r2, r5, r6}^
    1430:	63695473 	cmnvs	r9, #1929379840	; 0x73000000
    1434:	4c435f6b 	mcrrmi	15, 6, r5, r3, cr11
    1438:	756f534b 	strbvc	r5, [pc, #-843]!	; 10f5 <startup-0x1fffef0b>
    143c:	00656372 	rsbeq	r6, r5, r2, ror r3
    1440:	4349564e 	movtmi	r5, #38478	; 0x964e
    1444:	696e495f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, lr}^
    1448:	72745374 	rsbsvc	r5, r4, #116, 6	; 0xd0000001
    144c:	00746375 	rsbseq	r6, r4, r5, ror r3
    1450:	4349564e 	movtmi	r5, #38478	; 0x964e
    1454:	6972505f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, ip, lr}^
    1458:	7469726f 	strbtvc	r7, [r9], #-623	; 0xfffffd91
    145c:	6f724779 	svcvs	0x00724779
    1460:	4e007075 	mcrmi	0, 0, r7, cr0, cr5, {3}
    1464:	5f434956 	svcpl	0x00434956
    1468:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xfffff1b7
    146c:	706d7400 	rsbvc	r7, sp, r0, lsl #8
    1470:	00657270 	rsbeq	r7, r5, r0, ror r2
    1474:	7366664f 	cmnvc	r6, #82837504	; 0x4f00000
    1478:	4e007465 	cdpmi	4, 0, cr7, cr0, cr5, {3}
    147c:	5f434956 	svcpl	0x00434956
    1480:	56746553 			; <UNDEFINED> instruction: 0x56746553
    1484:	6f746365 	svcvs	0x00746365
    1488:	62615472 	rsbvs	r5, r1, #1912602624	; 0x72000000
    148c:	7400656c 	strvc	r6, [r0], #-1388	; 0xfffffa94
    1490:	7573706d 	ldrbvc	r7, [r3, #-109]!	; 0xffffff93
    1494:	564e0062 	strbpl	r0, [lr], -r2, rrx
    1498:	535f4349 	cmppl	pc, #603979777	; 0x24000001
    149c:	65747379 	ldrbvs	r7, [r4, #-889]!	; 0xfffffc87
    14a0:	43504c6d 	cmpmi	r0, #27904	; 0x6d00
    14a4:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    14a8:	79530067 	ldmdbvc	r3, {r0, r1, r2, r5, r6}^
    14ac:	63695473 	cmnvs	r9, #1929379840	; 0x73000000
    14b0:	4c435f6b 	mcrrmi	15, 6, r5, r3, cr11
    14b4:	756f534b 	strbvc	r5, [pc, #-843]!	; 1171 <startup-0x1fffee8f>
    14b8:	43656372 	cmnmi	r5, #-939524095	; 0xc8000001
    14bc:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    14c0:	6d740067 	ldclvs	0, cr0, [r4, #-412]!	; 0xfffffe64
    14c4:	69727070 	ldmdbvs	r2!, {r4, r5, r6, ip, sp, lr}^
    14c8:	7469726f 	strbtvc	r7, [r9], #-623	; 0xfffffd91
    14cc:	564e0079 			; <UNDEFINED> instruction: 0x564e0079
    14d0:	495f4349 	ldmdbmi	pc, {r0, r3, r6, r8, r9, lr}^	; <UNPREDICTABLE>
    14d4:	68435152 	stmdavs	r3, {r1, r4, r6, r8, ip, lr}^
    14d8:	656e6e61 	strbvs	r6, [lr, #-3681]!	; 0xfffff19f
    14dc:	564e006c 	strbpl	r0, [lr], -ip, rrx
    14e0:	495f4349 	ldmdbmi	pc, {r0, r3, r6, r8, r9, lr}^	; <UNPREDICTABLE>
    14e4:	68435152 	stmdavs	r3, {r1, r4, r6, r8, ip, lr}^
    14e8:	656e6e61 	strbvs	r6, [lr, #-3681]!	; 0xfffff19f
    14ec:	6275536c 	rsbsvs	r5, r5, #108, 6	; 0xb0000001
    14f0:	6f697250 	svcvs	0x00697250
    14f4:	79746972 	ldmdbvc	r4!, {r1, r4, r5, r6, r8, fp, sp, lr}^
    14f8:	49564e00 	ldmdbmi	r6, {r9, sl, fp, lr}^
    14fc:	52495f43 	subpl	r5, r9, #268	; 0x10c
    1500:	61684351 	cmnvs	r8, r1, asr r3
    1504:	6c656e6e 	stclvs	14, cr6, [r5], #-440	; 0xfffffe48
    1508:	65657250 	strbvs	r7, [r5, #-592]!	; 0xfffffdb0
    150c:	6974706d 	ldmdbvs	r4!, {r0, r2, r3, r5, r6, ip, sp, lr}^
    1510:	72506e6f 	subsvc	r6, r0, #1776	; 0x6f0
    1514:	69726f69 	ldmdbvs	r2!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
    1518:	4e007974 			; <UNDEFINED> instruction: 0x4e007974
    151c:	5f434956 	svcpl	0x00434956
    1520:	74636556 	strbtvc	r6, [r3], #-1366	; 0xfffffaaa
    1524:	00626154 	rsbeq	r6, r2, r4, asr r1
    1528:	552f3a43 	strpl	r3, [pc, #-2627]!	; aed <startup-0x1ffff513>
    152c:	73726573 	cmnvc	r2, #482344960	; 0x1cc00000
    1530:	6164412f 	cmnvs	r4, pc, lsr #2
    1534:	4f2f746d 	svcmi	0x002f746d
    1538:	7244656e 	subvc	r6, r4, #461373440	; 0x1b800000
    153c:	2f657669 	svccs	0x00657669
    1540:	756b6f44 	strbvc	r6, [fp, #-3908]!	; 0xfffff0bc
    1544:	746e656d 	strbtvc	r6, [lr], #-1389	; 0xfffffa93
    1548:	7469472f 	strbtvc	r4, [r9], #-1839	; 0xfffff8d1
    154c:	2f627548 	svccs	0x00627548
    1550:	32544144 	subscc	r4, r4, #68, 2
    1554:	4c2d3039 	stcmi	0, cr3, [sp], #-228	; 0xffffff1c
    1558:	736d7261 	cmnvc	sp, #268435462	; 0x10000006
    155c:	65747379 	ldrbvs	r7, [r4, #-889]!	; 0xfffffc87
    1560:	6f6b2f6d 	svcvs	0x006b2f6d
    1564:	696c2f64 	stmdbvs	ip!, {r2, r5, r6, r8, r9, sl, fp, sp}^
    1568:	54532f62 	ldrbpl	r2, [r3], #-3938	; 0xfffff09e
    156c:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
    1570:	696c5f34 	stmdbvs	ip!, {r2, r4, r5, r8, r9, sl, fp, ip, lr}^
    1574:	54532f62 	ldrbpl	r2, [r3], #-3938	; 0xfffff09e
    1578:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
    157c:	5f787834 	svcpl	0x00787834
    1580:	50647453 	rsbpl	r7, r4, r3, asr r4
    1584:	70697265 	rsbvc	r7, r9, r5, ror #4
    1588:	72445f68 	subvc	r5, r4, #104, 30	; 0x1a0
    158c:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
    1590:	6372732f 	cmnvs	r2, #-1140850688	; 0xbc000000
    1594:	73696d2f 	cmnvc	r9, #3008	; 0xbc0
    1598:	00632e63 	rsbeq	r2, r3, r3, ror #28
    159c:	50776f4c 	rsbspl	r6, r7, ip, asr #30
    15a0:	7265776f 	rsbvc	r7, r5, #29097984	; 0x1bc0000
    15a4:	65646f4d 	strbvs	r6, [r4, #-3917]!	; 0xfffff0b3
    15a8:	49564e00 	ldmdbmi	r6, {r9, sl, fp, lr}^
    15ac:	72505f43 	subsvc	r5, r0, #268	; 0x10c
    15b0:	69726f69 	ldmdbvs	r2!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
    15b4:	72477974 	subvc	r7, r7, #116, 18	; 0x1d0000
    15b8:	4370756f 	cmnmi	r0, #465567744	; 0x1bc00000
    15bc:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    15c0:	75620067 	strbvc	r0, [r2, #-103]!	; 0xffffff99
    15c4:	72656666 	rsbvc	r6, r5, #106954752	; 0x6600000
    15c8:	00747550 	rsbseq	r7, r4, r0, asr r5
    15cc:	6e756f63 	cdpvs	15, 7, cr6, cr5, cr3, {3}
    15d0:	3a430074 	bcc	10c17a8 <startup-0x1ef3e858>
    15d4:	6573552f 	ldrbvs	r5, [r3, #-1327]!	; 0xfffffad1
    15d8:	412f7372 			; <UNDEFINED> instruction: 0x412f7372
    15dc:	746d6164 	strbtvc	r6, [sp], #-356	; 0xfffffe9c
    15e0:	656e4f2f 	strbvs	r4, [lr, #-3887]!	; 0xfffff0d1
    15e4:	76697244 	strbtvc	r7, [r9], -r4, asr #4
    15e8:	6f442f65 	svcvs	0x00442f65
    15ec:	656d756b 	strbvs	r7, [sp, #-1387]!	; 0xfffffa95
    15f0:	472f746e 	strmi	r7, [pc, -lr, ror #8]!
    15f4:	75487469 	strbvc	r7, [r8, #-1129]	; 0xfffffb97
    15f8:	41442f62 	cmpmi	r4, r2, ror #30
    15fc:	30393254 	eorscc	r3, r9, r4, asr r2
    1600:	72614c2d 	rsbvc	r4, r1, #11520	; 0x2d00
    1604:	7379736d 	cmnvc	r9, #-1275068415	; 0xb4000001
    1608:	2f6d6574 	svccs	0x006d6574
    160c:	2f646f6b 	svccs	0x00646f6b
    1610:	2f62696c 	svccs	0x0062696c
    1614:	66667562 	strbtvs	r7, [r6], -r2, ror #10
    1618:	632e7265 			; <UNDEFINED> instruction: 0x632e7265
    161c:	46494600 	strbmi	r4, [r9], -r0, lsl #12
    1620:	7562004f 	strbvc	r0, [r2, #-79]!	; 0xffffffb1
    1624:	72656666 	rsbvc	r6, r5, #106954752	; 0x6600000
    1628:	7265764f 	rsbvc	r7, r5, #82837504	; 0x4f00000
    162c:	65646972 	strbvs	r6, [r4, #-2418]!	; 0xfffff68e
    1630:	7473614c 	ldrbtvc	r6, [r3], #-332	; 0xfffffeb4
    1634:	73656400 	cmnvc	r5, #0, 8
    1638:	75620074 	strbvc	r0, [r2, #-116]!	; 0xffffff8c
    163c:	65006666 	strvs	r6, [r0, #-1638]	; 0xfffff99a
    1640:	006d656c 	rsbeq	r6, sp, ip, ror #10
    1644:	66667562 	strbtvs	r7, [r6], -r2, ror #10
    1648:	65477265 	strbvs	r7, [r7, #-613]	; 0xfffffd9b
    164c:	75620074 	strbvc	r0, [r2, #-116]!	; 0xffffff8c
    1650:	72656666 	rsbvc	r6, r5, #106954752	; 0x6600000
    1654:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xfffff1b7
    1658:	66756200 	ldrbtvs	r6, [r5], -r0, lsl #4
    165c:	00726566 	rsbseq	r6, r2, r6, ror #10
    1660:	76657270 			; <UNDEFINED> instruction: 0x76657270
    1664:	65646e49 	strbvs	r6, [r4, #-3657]!	; 0xfffff1b7
    1668:	6e690078 	mcrvs	0, 3, r0, cr9, cr8, {3}
    166c:	65676574 	strbvs	r6, [r7, #-1396]!	; 0xfffffa8c
    1670:	76696472 			; <UNDEFINED> instruction: 0x76696472
    1674:	72656469 	rsbvc	r6, r5, #1761607680	; 0x69000000
    1678:	41535500 	cmpmi	r3, r0, lsl #10
    167c:	435f5452 	cmpmi	pc, #1375731712	; 0x52000000
    1680:	00414850 	subeq	r4, r1, r0, asr r8
    1684:	52505447 	subspl	r5, r0, #1191182336	; 0x47000000
    1688:	41535500 	cmpmi	r3, r0, lsl #10
    168c:	525f5452 	subspl	r5, pc, #1375731712	; 0x52000000
    1690:	69656365 	stmdbvs	r5!, {r0, r2, r5, r6, r8, r9, sp, lr}^
    1694:	57726576 			; <UNDEFINED> instruction: 0x57726576
    1698:	55656b61 	strbpl	r6, [r5, #-2913]!	; 0xfffff49f
    169c:	646d4370 	strbtvs	r4, [sp], #-880	; 0xfffffc90
    16a0:	41535500 	cmpmi	r3, r0, lsl #10
    16a4:	535f5452 	cmppl	pc, #1375731712	; 0x52000000
    16a8:	72507465 	subsvc	r7, r0, #1694498816	; 0x65000000
    16ac:	61637365 	cmnvs	r3, r5, ror #6
    16b0:	0072656c 	rsbseq	r6, r2, ip, ror #10
    16b4:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    16b8:	6e495f54 	mcrvs	15, 2, r5, cr9, cr4, {2}
    16bc:	55007469 	strpl	r7, [r0, #-1129]	; 0xfffffb97
    16c0:	54524153 	ldrbpl	r4, [r2], #-339	; 0xfffffead
    16c4:	4e494c5f 	mcrmi	12, 2, r4, cr9, cr15, {2}
    16c8:	61657242 	cmnvs	r5, r2, asr #4
    16cc:	7465446b 	strbtvc	r4, [r5], #-1131	; 0xfffffb95
    16d0:	4c746365 	ldclmi	3, cr6, [r4], #-404	; 0xfffffe6c
    16d4:	74676e65 	strbtvc	r6, [r7], #-3685	; 0xfffff19b
    16d8:	53550068 	cmppl	r5, #104	; 0x68
    16dc:	5f545241 	svcpl	0x00545241
    16e0:	42656e4f 	rsbmi	r6, r5, #1264	; 0x4f0
    16e4:	654d7469 	strbvs	r7, [sp, #-1129]	; 0xfffffb97
    16e8:	646f6874 	strbtvs	r6, [pc], #-2164	; 16f0 <startup-0x1fffe910>
    16ec:	00646d43 	rsbeq	r6, r4, r3, asr #26
    16f0:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    16f4:	79545f54 	ldmdbvc	r4, {r2, r4, r6, r8, r9, sl, fp, ip, lr}^
    16f8:	65446570 	strbvs	r6, [r4, #-1392]	; 0xfffffa90
    16fc:	53550066 	cmppl	r5, #102	; 0x66
    1700:	5f545241 	svcpl	0x00545241
    1704:	706f7453 	rsbvc	r7, pc, r3, asr r4	; <UNPREDICTABLE>
    1708:	73746942 	cmnvc	r4, #1081344	; 0x108000
    170c:	41535500 	cmpmi	r3, r0, lsl #10
    1710:	435f5452 	cmpmi	pc, #1375731712	; 0x52000000
    1714:	6b636f6c 	blvs	18dd4cc <startup-0x1e722b34>
    1718:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xfffff1b7
    171c:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0xfffff6ac
    1720:	00666544 	rsbeq	r6, r6, r4, asr #10
    1724:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    1728:	6d435f54 	stclvs	15, cr5, [r3, #-336]	; 0xfffffeb0
    172c:	53550064 	cmppl	r5, #100	; 0x64
    1730:	5f545241 	svcpl	0x00545241
    1734:	646e6553 	strbtvs	r6, [lr], #-1363	; 0xfffffaad
    1738:	61746144 	cmnvs	r4, r4, asr #2
    173c:	41535500 	cmpmi	r3, r0, lsl #10
    1740:	575f5452 			; <UNDEFINED> instruction: 0x575f5452
    1744:	55656b61 	strbpl	r6, [r5, #-2913]!	; 0xfffff49f
    1748:	53550070 	cmppl	r5, #112	; 0x70
    174c:	5f545241 	svcpl	0x00545241
    1750:	64726f57 	ldrbtvs	r6, [r2], #-3927	; 0xfffff0a9
    1754:	676e654c 	strbvs	r6, [lr, -ip, asr #10]!
    1758:	55006874 	strpl	r6, [r0, #-2164]	; 0xfffff78c
    175c:	54524153 	ldrbpl	r4, [r2], #-339	; 0xfffffead
    1760:	414d445f 	cmpmi	sp, pc, asr r4
    1764:	00646d43 	rsbeq	r6, r4, r3, asr #26
    1768:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    176c:	614c5f54 	cmpvs	ip, r4, asr pc
    1770:	69427473 	stmdbvs	r2, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
    1774:	53550074 	cmppl	r5, #116	; 0x74
    1778:	5f545241 	svcpl	0x00545241
    177c:	64756142 	ldrbtvs	r6, [r5], #-322	; 0xfffffebe
    1780:	65746152 	ldrbvs	r6, [r4, #-338]!	; 0xfffffeae
    1784:	41535500 	cmpmi	r3, r0, lsl #10
    1788:	495f5452 	ldmdbmi	pc, {r1, r4, r6, sl, ip, lr}^	; <UNPREDICTABLE>
    178c:	4d414472 	cfstrdmi	mvd4, [r1, #-456]	; 0xfffffe38
    1790:	0065646f 	rsbeq	r6, r5, pc, ror #8
    1794:	63627061 	cmnvs	r2, #97	; 0x61
    1798:	6b636f6c 	blvs	18dd550 <startup-0x1e722ab0>
    179c:	41535500 	cmpmi	r3, r0, lsl #10
    17a0:	435f5452 	cmpmi	pc, #1375731712	; 0x52000000
    17a4:	7261656c 	rsbvc	r6, r1, #108, 10	; 0x1b000000
    17a8:	65505449 	ldrbvs	r5, [r0, #-1097]	; 0xfffffbb7
    17ac:	6e69646e 	cdpvs	4, 6, cr6, cr9, cr14, {3}
    17b0:	74694267 	strbtvc	r4, [r9], #-615	; 0xfffffd99
    17b4:	41535500 	cmpmi	r3, r0, lsl #10
    17b8:	475f5452 			; <UNDEFINED> instruction: 0x475f5452
    17bc:	64726175 	ldrbtvs	r6, [r2], #-373	; 0xfffffe8b
    17c0:	656d6954 	strbvs	r6, [sp, #-2388]!	; 0xfffff6ac
    17c4:	41535500 	cmpmi	r3, r0, lsl #10
    17c8:	4c5f5452 	cfldrdmi	mvd5, [pc], {82}	; 0x52
    17cc:	72424e49 	subvc	r4, r2, #1168	; 0x490
    17d0:	446b6165 	strbtmi	r6, [fp], #-357	; 0xfffffe9b
    17d4:	63657465 	cmnvs	r5, #1694498816	; 0x65000000
    17d8:	6e654c74 	mcrvs	12, 3, r4, cr5, cr4, {3}
    17dc:	43687467 	cmnmi	r8, #1728053248	; 0x67000000
    17e0:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    17e4:	53550067 	cmppl	r5, #103	; 0x67
    17e8:	5f545241 	svcpl	0x00545241
    17ec:	47414c46 	strbmi	r4, [r1, -r6, asr #24]
    17f0:	41535500 	cmpmi	r3, r0, lsl #10
    17f4:	445f5452 	ldrbmi	r5, [pc], #-1106	; 17fc <startup-0x1fffe804>
    17f8:	696e4965 	stmdbvs	lr!, {r0, r2, r5, r6, r8, fp, lr}^
    17fc:	53550074 	cmppl	r5, #116	; 0x74
    1800:	5f545241 	svcpl	0x00545241
    1804:	636f6c43 	cmnvs	pc, #17152	; 0x4300
    1808:	696e496b 	stmdbvs	lr!, {r0, r1, r3, r5, r6, r8, fp, lr}^
    180c:	72745374 	rsbsvc	r5, r4, #116, 6	; 0xd0000001
    1810:	00746375 	rsbseq	r6, r4, r5, ror r3
    1814:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    1818:	61505f54 	cmpvs	r0, r4, asr pc
    181c:	79746972 	ldmdbvc	r4!, {r1, r4, r5, r6, r8, fp, sp, lr}^
    1820:	41535500 	cmpmi	r3, r0, lsl #10
    1824:	435f5452 	cmpmi	pc, #1375731712	; 0x52000000
    1828:	6b636f6c 	blvs	18dd5e0 <startup-0x1e722a20>
    182c:	75727453 	ldrbvc	r7, [r2, #-1107]!	; 0xfffffbad
    1830:	6e497463 	cdpvs	4, 4, cr7, cr9, cr3, {3}
    1834:	75007469 	strvc	r7, [r0, #-1129]	; 0xfffffb97
    1838:	74726173 	ldrbtvc	r6, [r2], #-371	; 0xfffffe8d
    183c:	73616278 	cmnvc	r1, #120, 4	; 0x80000007
    1840:	53550065 	cmppl	r5, #101	; 0x65
    1844:	5f545241 	svcpl	0x00545241
    1848:	61656c43 	cmnvs	r5, r3, asr #24
    184c:	616c4672 	smcvs	50274	; 0xc462
    1850:	53550067 	cmppl	r5, #103	; 0x67
    1854:	5f545241 	svcpl	0x00545241
    1858:	41746553 	cmnmi	r4, r3, asr r5
    185c:	65726464 	ldrbvs	r6, [r2, #-1124]!	; 0xfffffb9c
    1860:	55007373 	strpl	r7, [r0, #-883]	; 0xfffffc8d
    1864:	54524153 	ldrbpl	r4, [r2], #-339	; 0xfffffead
    1868:	7465535f 	strbtvc	r5, [r5], #-863	; 0xfffffca1
    186c:	72617547 	rsbvc	r7, r1, #297795584	; 0x11c00000
    1870:	6d695464 	cfstrdvs	mvd5, [r9, #-400]!	; 0xfffffe70
    1874:	53550065 	cmppl	r5, #101	; 0x65
    1878:	5f545241 	svcpl	0x00545241
    187c:	646e6553 	strbtvs	r6, [lr], #-1363	; 0xfffffaad
    1880:	61657242 	cmnvs	r5, r2, asr #4
    1884:	5355006b 	cmppl	r5, #107	; 0x6b
    1888:	5f545241 	svcpl	0x00545241
    188c:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xfffff1b7
    1890:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0xfffff6ac
    1894:	00666544 	rsbeq	r6, r6, r4, asr #10
    1898:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    189c:	54495f54 	strbpl	r5, [r9], #-3924	; 0xfffff0ac
    18a0:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    18a4:	55006769 	strpl	r6, [r0, #-1897]	; 0xfffff897
    18a8:	54524153 	ldrbpl	r4, [r2], #-339	; 0xfffffead
    18ac:	414d445f 	cmpmi	sp, pc, asr r4
    18b0:	00716552 	rsbseq	r6, r1, r2, asr r5
    18b4:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    18b8:	55007854 	strpl	r7, [r0, #-2132]	; 0xfffff7ac
    18bc:	54524153 	ldrbpl	r4, [r2], #-339	; 0xfffffead
    18c0:	7261485f 	rsbvc	r4, r1, #6225920	; 0x5f0000
    18c4:	72617764 	rsbvc	r7, r1, #100, 14	; 0x1900000
    18c8:	6f6c4665 	svcvs	0x006c4665
    18cc:	6e6f4377 	mcrvs	3, 3, r4, cr15, cr7, {3}
    18d0:	6c6f7274 	sfmvs	f7, 2, [pc], #-464	; 1708 <startup-0x1fffe8f8>
    18d4:	41535500 	cmpmi	r3, r0, lsl #10
    18d8:	535f5452 	cmppl	pc, #1375731712	; 0x52000000
    18dc:	7472616d 	ldrbtvc	r6, [r2], #-365	; 0xfffffe93
    18e0:	64726143 	ldrbtvs	r6, [r2], #-323	; 0xfffffebd
    18e4:	00646d43 	rsbeq	r6, r4, r3, asr #26
    18e8:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    18ec:	6f4d5f54 	svcvs	0x004d5f54
    18f0:	55006564 	strpl	r6, [r0, #-1380]	; 0xfffffa9c
    18f4:	54524153 	ldrbpl	r4, [r2], #-339	; 0xfffffead
    18f8:	6464415f 	strbtvs	r4, [r4], #-351	; 0xfffffea1
    18fc:	73736572 	cmnvc	r3, #478150656	; 0x1c800000
    1900:	74696200 	strbtvc	r6, [r9], #-512	; 0xfffffe00
    1904:	00736f70 	rsbseq	r6, r3, r0, ror pc
    1908:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    190c:	764f5f54 			; <UNDEFINED> instruction: 0x764f5f54
    1910:	61537265 	cmpvs	r3, r5, ror #4
    1914:	696c706d 	stmdbvs	ip!, {r0, r2, r3, r5, r6, ip, sp, lr}^
    1918:	4338676e 	teqmi	r8, #28835840	; 0x1b80000
    191c:	5500646d 	strpl	r6, [r0, #-1133]	; 0xfffffb93
    1920:	54524153 	ldrbpl	r4, [r2], #-339	; 0xfffffead
    1924:	7465475f 	strbtvc	r4, [r5], #-1887	; 0xfffff8a1
    1928:	74535449 	ldrbvc	r5, [r3], #-1097	; 0xfffffbb7
    192c:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
    1930:	41535500 	cmpmi	r3, r0, lsl #10
    1934:	4c5f5452 	cfldrdmi	mvd5, [pc], {82}	; 0x52
    1938:	6d434e49 	stclvs	14, cr4, [r3, #-292]	; 0xfffffedc
    193c:	53550064 	cmppl	r5, #100	; 0x64
    1940:	5f545241 	svcpl	0x00545241
    1944:	41447249 	cmpmi	r4, r9, asr #4
    1948:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    194c:	55006769 	strpl	r6, [r0, #-1897]	; 0xfffff897
    1950:	54524153 	ldrbpl	r4, [r2], #-339	; 0xfffffead
    1954:	6f6c435f 	svcvs	0x006c435f
    1958:	55006b63 	strpl	r6, [r0, #-2915]	; 0xfffff49d
    195c:	54524153 	ldrbpl	r4, [r2], #-339	; 0xfffffead
    1960:	4472495f 	ldrbtmi	r4, [r2], #-2399	; 0xfffff6a1
    1964:	646d4341 	strbtvs	r4, [sp], #-833	; 0xfffffcbf
    1968:	61726600 	cmnvs	r2, r0, lsl #12
    196c:	6f697463 	svcvs	0x00697463
    1970:	646c616e 	strbtvs	r6, [ip], #-366	; 0xfffffe92
    1974:	64697669 	strbtvs	r7, [r9], #-1641	; 0xfffff997
    1978:	55007265 	strpl	r7, [r0, #-613]	; 0xfffffd9b
    197c:	54524153 	ldrbpl	r4, [r2], #-339	; 0xfffffead
    1980:	616d535f 	cmnvs	sp, pc, asr r3
    1984:	61437472 	hvcvs	14146	; 0x3742
    1988:	414e6472 	hvcmi	58946	; 0xe642
    198c:	6d434b43 	vstrvs	d20, [r3, #-268]	; 0xfffffef4
    1990:	53550064 	cmppl	r5, #100	; 0x64
    1994:	5f545241 	svcpl	0x00545241
    1998:	46746547 	ldrbtmi	r6, [r4], -r7, asr #10
    199c:	5367616c 	cmnpl	r7, #108, 2
    19a0:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0xfffffe8c
    19a4:	53550073 	cmppl	r5, #115	; 0x73
    19a8:	5f545241 	svcpl	0x00545241
    19ac:	55005449 	strpl	r5, [r0, #-1097]	; 0xfffffbb7
    19b0:	54524153 	ldrbpl	r4, [r2], #-339	; 0xfffffead
    19b4:	696e495f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, lr}^
    19b8:	72745374 	rsbsvc	r5, r4, #116, 6	; 0xd0000001
    19bc:	00746375 	rsbseq	r6, r4, r5, ror r3
    19c0:	5f434352 	svcpl	0x00434352
    19c4:	636f6c43 	cmnvs	pc, #17152	; 0x4300
    19c8:	7453736b 	ldrbvc	r7, [r3], #-875	; 0xfffffc95
    19cc:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
    19d0:	41535500 	cmpmi	r3, r0, lsl #10
    19d4:	435f5452 	cmpmi	pc, #1375731712	; 0x52000000
    19d8:	6b636f6c 	blvs	18dd790 <startup-0x1e722870>
    19dc:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xfffff1b7
    19e0:	41535500 	cmpmi	r3, r0, lsl #10
    19e4:	575f5452 			; <UNDEFINED> instruction: 0x575f5452
    19e8:	55656b61 	strbpl	r6, [r5, #-2913]!	; 0xfffff49f
    19ec:	6e6f4370 	mcrvs	3, 3, r4, cr15, cr0, {3}
    19f0:	00676966 	rsbeq	r6, r7, r6, ror #18
    19f4:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    19f8:	61485f54 	cmpvs	r8, r4, asr pc
    19fc:	7544666c 	strbvc	r6, [r4, #-1644]	; 0xfffff994
    1a00:	78656c70 	stmdavc	r5!, {r4, r5, r6, sl, fp, sp, lr}^
    1a04:	00646d43 	rsbeq	r6, r4, r3, asr #26
    1a08:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    1a0c:	74535f54 	ldrbvc	r5, [r3], #-3924	; 0xfffff0ac
    1a10:	74637572 	strbtvc	r7, [r3], #-1394	; 0xfffffa8e
    1a14:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xfffff1b7
    1a18:	41535500 	cmpmi	r3, r0, lsl #10
    1a1c:	505f5452 	subspl	r5, pc, r2, asr r4	; <UNPREDICTABLE>
    1a20:	63736572 	cmnvs	r3, #478150656	; 0x1c800000
    1a24:	72656c61 	rsbvc	r6, r5, #24832	; 0x6100
    1a28:	41535500 	cmpmi	r3, r0, lsl #10
    1a2c:	435f5452 	cmpmi	pc, #1375731712	; 0x52000000
    1a30:	004c4f50 	subeq	r4, ip, r0, asr pc
    1a34:	616d7469 	cmnvs	sp, r9, ror #8
    1a38:	43006b73 	movwmi	r6, #2931	; 0xb73
    1a3c:	73552f3a 	cmpvc	r5, #58, 30	; 0xe8
    1a40:	2f737265 	svccs	0x00737265
    1a44:	6d616441 	cfstrdvs	mvd6, [r1, #-260]!	; 0xfffffefc
    1a48:	6e4f2f74 	mcrvs	15, 2, r2, cr15, cr4, {3}
    1a4c:	69724465 	ldmdbvs	r2!, {r0, r2, r5, r6, sl, lr}^
    1a50:	442f6576 	strtmi	r6, [pc], #-1398	; 1a58 <startup-0x1fffe5a8>
    1a54:	6d756b6f 	fldmdbxvs	r5!, {d22-d76}	;@ Deprecated
    1a58:	2f746e65 	svccs	0x00746e65
    1a5c:	48746947 	ldmdami	r4!, {r0, r1, r2, r6, r8, fp, sp, lr}^
    1a60:	442f6275 	strtmi	r6, [pc], #-629	; 1a68 <startup-0x1fffe598>
    1a64:	39325441 	ldmdbcc	r2!, {r0, r6, sl, ip, lr}
    1a68:	614c2d30 	cmpvs	ip, r0, lsr sp
    1a6c:	79736d72 	ldmdbvc	r3!, {r1, r4, r5, r6, r8, sl, fp, sp, lr}^
    1a70:	6d657473 	cfstrdvs	mvd7, [r5, #-460]!	; 0xfffffe34
    1a74:	646f6b2f 	strbtvs	r6, [pc], #-2863	; 1a7c <startup-0x1fffe584>
    1a78:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    1a7c:	4d54532f 	ldclmi	3, cr5, [r4, #-188]	; 0xffffff44
    1a80:	34463233 	strbcc	r3, [r6], #-563	; 0xfffffdcd
    1a84:	62696c5f 	rsbvs	r6, r9, #24320	; 0x5f00
    1a88:	4d54532f 	ldclmi	3, cr5, [r4, #-188]	; 0xffffff44
    1a8c:	34463233 	strbcc	r3, [r6], #-563	; 0xfffffdcd
    1a90:	535f7878 	cmppl	pc, #120, 16	; 0x780000
    1a94:	65506474 	ldrbvs	r6, [r0, #-1140]	; 0xfffffb8c
    1a98:	68706972 	ldmdavs	r0!, {r1, r4, r5, r6, r8, fp, sp, lr}^
    1a9c:	6972445f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, sl, lr}^
    1aa0:	2f726576 	svccs	0x00726576
    1aa4:	2f637273 	svccs	0x00637273
    1aa8:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
    1aac:	78346632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, sp, lr}
    1ab0:	73755f78 	cmnvc	r5, #120, 30	; 0x1e0
    1ab4:	2e747261 	cdpcs	2, 7, cr7, cr4, cr1, {3}
    1ab8:	53550063 	cmppl	r5, #99	; 0x63
    1abc:	5f545241 	svcpl	0x00545241
    1ac0:	65636552 	strbvs	r6, [r3, #-1362]!	; 0xfffffaae
    1ac4:	44657669 	strbtmi	r7, [r5], #-1641	; 0xfffff997
    1ac8:	00617461 	rsbeq	r7, r1, r1, ror #8
    1acc:	72617375 	rsbvc	r7, r1, #-738197503	; 0xd4000001
    1ad0:	67657274 			; <UNDEFINED> instruction: 0x67657274
	...

Disassembly of section .comment:

00000000 <.comment>:
   0:	3a434347 	bcc	10d0d24 <startup-0x1ef2f2dc>
   4:	4e472820 	cdpmi	8, 4, cr2, cr7, cr0, {1}
   8:	6f542055 	svcvs	0x00542055
   c:	20736c6f 	rsbscs	r6, r3, pc, ror #24
  10:	20726f66 	rsbscs	r6, r2, r6, ror #30
  14:	206d7241 	rsbcs	r7, sp, r1, asr #4
  18:	65626d45 	strbvs	r6, [r2, #-3397]!	; 0xfffff2bb
  1c:	64656464 	strbtvs	r6, [r5], #-1124	; 0xfffffb9c
  20:	6f725020 	svcvs	0x00725020
  24:	73736563 	cmnvc	r3, #415236096	; 0x18c00000
  28:	2073726f 	rsbscs	r7, r3, pc, ror #4
  2c:	30322d37 	eorscc	r2, r2, r7, lsr sp
  30:	712d3731 			; <UNDEFINED> instruction: 0x712d3731
  34:	616d2d34 	cmnvs	sp, r4, lsr sp
  38:	29726f6a 	ldmdbcs	r2!, {r1, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
  3c:	322e3720 	eorcc	r3, lr, #32, 14	; 0x800000
  40:	3220312e 	eorcc	r3, r0, #-2147483637	; 0x8000000b
  44:	30373130 	eorscc	r3, r7, r0, lsr r1
  48:	20343039 	eorscs	r3, r4, r9, lsr r0
  4c:	6c657228 	sfmvs	f7, 2, [r5], #-160	; 0xffffff60
  50:	65736165 	ldrbvs	r6, [r3, #-357]!	; 0xfffffe9b
  54:	415b2029 	cmpmi	fp, r9, lsr #32
  58:	652f4d52 	strvs	r4, [pc, #-3410]!	; fffff30e <GPIO_Ports+0xdfffc7be>
  5c:	6465626d 	strbtvs	r6, [r5], #-621	; 0xfffffd93
  60:	2d646564 	cfstr64cs	mvdx6, [r4, #-400]!	; 0xfffffe70
  64:	72622d37 	rsbvc	r2, r2, #3520	; 0xdc0
  68:	68636e61 	stmdavs	r3!, {r0, r5, r6, r9, sl, fp, sp, lr}^
  6c:	76657220 	strbtvc	r7, [r5], -r0, lsr #4
  70:	6f697369 	svcvs	0x00697369
  74:	3532206e 	ldrcc	r2, [r2, #-110]!	; 0xffffff92
  78:	34303235 	ldrtcc	r3, [r0], #-565	; 0xfffffdcb
  7c:	Address 0x0000007c is out of bounds.


Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00002b41 	andeq	r2, r0, r1, asr #22
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	00000021 	andeq	r0, r0, r1, lsr #32
  10:	2d533605 	ldclcs	6, cr3, [r3, #-20]	; 0xffffffec
  14:	0c06004d 	stceq	0, cr0, [r6], {77}	; 0x4d
  18:	01094d07 	tsteq	r9, r7, lsl #26
  1c:	01140412 	tsteq	r4, r2, lsl r4
  20:	03170115 	tsteq	r7, #1073741829	; 0x40000005
  24:	01190118 	tsteq	r9, r8, lsl r1
  28:	061e011a 			; <UNDEFINED> instruction: 0x061e011a

Disassembly of section .debug_frame:

00000000 <.debug_frame>:
   0:	0000000c 	andeq	r0, r0, ip
   4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   8:	7c020001 	stcvc	0, cr0, [r2], {1}
   c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  10:	0000001c 	andeq	r0, r0, ip, lsl r0
  14:	00000000 	andeq	r0, r0, r0
  18:	20000010 	andcs	r0, r0, r0, lsl r0
  1c:	00000060 	andeq	r0, r0, r0, rrx
  20:	40080e41 	andmi	r0, r8, r1, asr #28
  24:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  28:	100e4101 	andne	r4, lr, r1, lsl #2
  2c:	00070d41 	andeq	r0, r7, r1, asr #26
  30:	0000001c 	andeq	r0, r0, ip, lsl r0
  34:	00000000 	andeq	r0, r0, r0
  38:	20000070 	andcs	r0, r0, r0, ror r0
  3c:	00000048 	andeq	r0, r0, r8, asr #32
  40:	40080e41 	andmi	r0, r8, r1, asr #28
  44:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  48:	100e4101 	andne	r4, lr, r1, lsl #2
  4c:	00070d41 	andeq	r0, r7, r1, asr #26
  50:	00000018 	andeq	r0, r0, r8, lsl r0
  54:	00000000 	andeq	r0, r0, r0
  58:	200000b8 	strhcs	r0, [r0], -r8
  5c:	00000070 	andeq	r0, r0, r0, ror r0
  60:	40080e41 	andmi	r0, r8, r1, asr #28
  64:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  68:	070d4101 	streq	r4, [sp, -r1, lsl #2]
  6c:	0000001c 	andeq	r0, r0, ip, lsl r0
  70:	00000000 	andeq	r0, r0, r0
  74:	20000128 	andcs	r0, r0, r8, lsr #2
  78:	00000028 	andeq	r0, r0, r8, lsr #32
  7c:	40080e41 	andmi	r0, r8, r1, asr #28
  80:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  84:	100e4101 	andne	r4, lr, r1, lsl #2
  88:	00070d41 	andeq	r0, r7, r1, asr #26
  8c:	00000020 	andeq	r0, r0, r0, lsr #32
  90:	00000000 	andeq	r0, r0, r0
  94:	20000150 	andcs	r0, r0, r0, asr r1
  98:	0000005e 	andeq	r0, r0, lr, asr r0
  9c:	400c0e41 	andmi	r0, ip, r1, asr #28
  a0:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
  a4:	018e4002 	orreq	r4, lr, r2
  a8:	41180e41 	tstmi	r8, r1, asr #28
  ac:	0000070d 	andeq	r0, r0, sp, lsl #14
  b0:	0000001c 	andeq	r0, r0, ip, lsl r0
  b4:	00000000 	andeq	r0, r0, r0
  b8:	200001ae 	andcs	r0, r0, lr, lsr #3
  bc:	0000003e 	andeq	r0, r0, lr, lsr r0
  c0:	40080e41 	andmi	r0, r8, r1, asr #28
  c4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  c8:	180e4101 	stmdane	lr, {r0, r8, lr}
  cc:	00070d41 	andeq	r0, r7, r1, asr #26
  d0:	0000001c 	andeq	r0, r0, ip, lsl r0
  d4:	00000000 	andeq	r0, r0, r0
  d8:	200001ec 	andcs	r0, r0, ip, ror #3
  dc:	00000020 	andeq	r0, r0, r0, lsr #32
  e0:	40080e41 	andmi	r0, r8, r1, asr #28
  e4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  e8:	100e4101 	andne	r4, lr, r1, lsl #2
  ec:	00070d41 	andeq	r0, r7, r1, asr #26
  f0:	0000001c 	andeq	r0, r0, ip, lsl r0
  f4:	00000000 	andeq	r0, r0, r0
  f8:	2000020c 	andcs	r0, r0, ip, lsl #4
  fc:	00000044 	andeq	r0, r0, r4, asr #32
 100:	40080e41 	andmi	r0, r8, r1, asr #28
 104:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 108:	100e4101 	andne	r4, lr, r1, lsl #2
 10c:	00070d41 	andeq	r0, r7, r1, asr #26
 110:	0000001c 	andeq	r0, r0, ip, lsl r0
 114:	00000000 	andeq	r0, r0, r0
 118:	20000250 	andcs	r0, r0, r0, asr r2
 11c:	00000020 	andeq	r0, r0, r0, lsr #32
 120:	40080e41 	andmi	r0, r8, r1, asr #28
 124:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 128:	100e4101 	andne	r4, lr, r1, lsl #2
 12c:	00070d41 	andeq	r0, r7, r1, asr #26
 130:	0000001c 	andeq	r0, r0, ip, lsl r0
 134:	00000000 	andeq	r0, r0, r0
 138:	20000270 	andcs	r0, r0, r0, ror r2
 13c:	0000003c 	andeq	r0, r0, ip, lsr r0
 140:	40080e41 	andmi	r0, r8, r1, asr #28
 144:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 148:	180e4101 	stmdane	lr, {r0, r8, lr}
 14c:	00070d41 	andeq	r0, r7, r1, asr #26
 150:	0000001c 	andeq	r0, r0, ip, lsl r0
 154:	00000000 	andeq	r0, r0, r0
 158:	200002ac 	andcs	r0, r0, ip, lsr #5
 15c:	00000020 	andeq	r0, r0, r0, lsr #32
 160:	40080e41 	andmi	r0, r8, r1, asr #28
 164:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 168:	100e4101 	andne	r4, lr, r1, lsl #2
 16c:	00070d41 	andeq	r0, r7, r1, asr #26
 170:	0000001c 	andeq	r0, r0, ip, lsl r0
 174:	00000000 	andeq	r0, r0, r0
 178:	200002cc 	andcs	r0, r0, ip, asr #5
 17c:	00000028 	andeq	r0, r0, r8, lsr #32
 180:	40080e41 	andmi	r0, r8, r1, asr #28
 184:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 188:	100e4101 	andne	r4, lr, r1, lsl #2
 18c:	00070d41 	andeq	r0, r7, r1, asr #26
 190:	0000001c 	andeq	r0, r0, ip, lsl r0
 194:	00000000 	andeq	r0, r0, r0
 198:	200002f4 	strdcs	r0, [r0], -r4
 19c:	00000020 	andeq	r0, r0, r0, lsr #32
 1a0:	40080e41 	andmi	r0, r8, r1, asr #28
 1a4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 1a8:	100e4101 	andne	r4, lr, r1, lsl #2
 1ac:	00070d41 	andeq	r0, r7, r1, asr #26
 1b0:	0000001c 	andeq	r0, r0, ip, lsl r0
 1b4:	00000000 	andeq	r0, r0, r0
 1b8:	20000314 	andcs	r0, r0, r4, lsl r3
 1bc:	00000030 	andeq	r0, r0, r0, lsr r0
 1c0:	40080e41 	andmi	r0, r8, r1, asr #28
 1c4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 1c8:	180e4101 	stmdane	lr, {r0, r8, lr}
 1cc:	00070d41 	andeq	r0, r7, r1, asr #26
 1d0:	0000001c 	andeq	r0, r0, ip, lsl r0
 1d4:	00000000 	andeq	r0, r0, r0
 1d8:	20000344 	andcs	r0, r0, r4, asr #6
 1dc:	00000020 	andeq	r0, r0, r0, lsr #32
 1e0:	40080e41 	andmi	r0, r8, r1, asr #28
 1e4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 1e8:	100e4101 	andne	r4, lr, r1, lsl #2
 1ec:	00070d41 	andeq	r0, r7, r1, asr #26
 1f0:	0000001c 	andeq	r0, r0, ip, lsl r0
 1f4:	00000000 	andeq	r0, r0, r0
 1f8:	20000364 	andcs	r0, r0, r4, ror #6
 1fc:	00000020 	andeq	r0, r0, r0, lsr #32
 200:	40080e41 	andmi	r0, r8, r1, asr #28
 204:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 208:	100e4101 	andne	r4, lr, r1, lsl #2
 20c:	00070d41 	andeq	r0, r7, r1, asr #26
 210:	0000001c 	andeq	r0, r0, ip, lsl r0
 214:	00000000 	andeq	r0, r0, r0
 218:	20000384 	andcs	r0, r0, r4, lsl #7
 21c:	00000040 	andeq	r0, r0, r0, asr #32
 220:	40080e41 	andmi	r0, r8, r1, asr #28
 224:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 228:	180e4101 	stmdane	lr, {r0, r8, lr}
 22c:	00070d41 	andeq	r0, r7, r1, asr #26
 230:	0000001c 	andeq	r0, r0, ip, lsl r0
 234:	00000000 	andeq	r0, r0, r0
 238:	200003c4 	andcs	r0, r0, r4, asr #7
 23c:	0000003c 	andeq	r0, r0, ip, lsr r0
 240:	40080e41 	andmi	r0, r8, r1, asr #28
 244:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 248:	180e4101 	stmdane	lr, {r0, r8, lr}
 24c:	00070d41 	andeq	r0, r7, r1, asr #26
 250:	0000001c 	andeq	r0, r0, ip, lsl r0
 254:	00000000 	andeq	r0, r0, r0
 258:	20000400 	andcs	r0, r0, r0, lsl #8
 25c:	00000034 	andeq	r0, r0, r4, lsr r0
 260:	40080e41 	andmi	r0, r8, r1, asr #28
 264:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 268:	180e4101 	stmdane	lr, {r0, r8, lr}
 26c:	00070d41 	andeq	r0, r7, r1, asr #26
 270:	00000018 	andeq	r0, r0, r8, lsl r0
 274:	00000000 	andeq	r0, r0, r0
 278:	20000434 	andcs	r0, r0, r4, lsr r4
 27c:	0000001c 	andeq	r0, r0, ip, lsl r0
 280:	40080e41 	andmi	r0, r8, r1, asr #28
 284:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 288:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 28c:	0000001c 	andeq	r0, r0, ip, lsl r0
 290:	00000000 	andeq	r0, r0, r0
 294:	20000450 	andcs	r0, r0, r0, asr r4
 298:	00000034 	andeq	r0, r0, r4, lsr r0
 29c:	40080e41 	andmi	r0, r8, r1, asr #28
 2a0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 2a4:	180e4101 	stmdane	lr, {r0, r8, lr}
 2a8:	00070d41 	andeq	r0, r7, r1, asr #26
 2ac:	0000001c 	andeq	r0, r0, ip, lsl r0
 2b0:	00000000 	andeq	r0, r0, r0
 2b4:	20000484 	andcs	r0, r0, r4, lsl #9
 2b8:	00000038 	andeq	r0, r0, r8, lsr r0
 2bc:	40080e41 	andmi	r0, r8, r1, asr #28
 2c0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 2c4:	180e4101 	stmdane	lr, {r0, r8, lr}
 2c8:	00070d41 	andeq	r0, r7, r1, asr #26
 2cc:	0000001c 	andeq	r0, r0, ip, lsl r0
 2d0:	00000000 	andeq	r0, r0, r0
 2d4:	200004bc 			; <UNDEFINED> instruction: 0x200004bc
 2d8:	0000003c 	andeq	r0, r0, ip, lsr r0
 2dc:	40080e41 	andmi	r0, r8, r1, asr #28
 2e0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 2e4:	180e4101 	stmdane	lr, {r0, r8, lr}
 2e8:	00070d41 	andeq	r0, r7, r1, asr #26
 2ec:	0000001c 	andeq	r0, r0, ip, lsl r0
 2f0:	00000000 	andeq	r0, r0, r0
 2f4:	200004f8 	strdcs	r0, [r0], -r8
 2f8:	00000158 	andeq	r0, r0, r8, asr r1
 2fc:	40080e41 	andmi	r0, r8, r1, asr #28
 300:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 304:	280e4101 	stmdacs	lr, {r0, r8, lr}
 308:	00070d41 	andeq	r0, r7, r1, asr #26
 30c:	0000001c 	andeq	r0, r0, ip, lsl r0
 310:	00000000 	andeq	r0, r0, r0
 314:	20000650 	andcs	r0, r0, r0, asr r6
 318:	00000060 	andeq	r0, r0, r0, rrx
 31c:	40080e41 	andmi	r0, r8, r1, asr #28
 320:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 324:	180e4101 	stmdane	lr, {r0, r8, lr}
 328:	00070d41 	andeq	r0, r7, r1, asr #26
 32c:	0000001c 	andeq	r0, r0, ip, lsl r0
 330:	00000000 	andeq	r0, r0, r0
 334:	200006b0 			; <UNDEFINED> instruction: 0x200006b0
 338:	00000020 	andeq	r0, r0, r0, lsr #32
 33c:	40080e41 	andmi	r0, r8, r1, asr #28
 340:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 344:	100e4101 	andne	r4, lr, r1, lsl #2
 348:	00070d41 	andeq	r0, r7, r1, asr #26
 34c:	0000001c 	andeq	r0, r0, ip, lsl r0
 350:	00000000 	andeq	r0, r0, r0
 354:	200006d0 	ldrdcs	r0, [r0], -r0	; <UNPREDICTABLE>
 358:	00000020 	andeq	r0, r0, r0, lsr #32
 35c:	40080e41 	andmi	r0, r8, r1, asr #28
 360:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 364:	100e4101 	andne	r4, lr, r1, lsl #2
 368:	00070d41 	andeq	r0, r7, r1, asr #26
 36c:	0000001c 	andeq	r0, r0, ip, lsl r0
 370:	00000000 	andeq	r0, r0, r0
 374:	200006f0 	strdcs	r0, [r0], -r0	; <UNPREDICTABLE>
 378:	0000001c 	andeq	r0, r0, ip, lsl r0
 37c:	40080e41 	andmi	r0, r8, r1, asr #28
 380:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 384:	100e4101 	andne	r4, lr, r1, lsl #2
 388:	00070d41 	andeq	r0, r7, r1, asr #26
 38c:	0000001c 	andeq	r0, r0, ip, lsl r0
 390:	00000000 	andeq	r0, r0, r0
 394:	2000070c 	andcs	r0, r0, ip, lsl #14
 398:	0000003c 	andeq	r0, r0, ip, lsr r0
 39c:	40080e41 	andmi	r0, r8, r1, asr #28
 3a0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 3a4:	180e4101 	stmdane	lr, {r0, r8, lr}
 3a8:	00070d41 	andeq	r0, r7, r1, asr #26
 3ac:	0000001c 	andeq	r0, r0, ip, lsl r0
 3b0:	00000000 	andeq	r0, r0, r0
 3b4:	20000748 	andcs	r0, r0, r8, asr #14
 3b8:	0000003c 	andeq	r0, r0, ip, lsr r0
 3bc:	40080e41 	andmi	r0, r8, r1, asr #28
 3c0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 3c4:	180e4101 	stmdane	lr, {r0, r8, lr}
 3c8:	00070d41 	andeq	r0, r7, r1, asr #26
 3cc:	0000001c 	andeq	r0, r0, ip, lsl r0
 3d0:	00000000 	andeq	r0, r0, r0
 3d4:	20000784 	andcs	r0, r0, r4, lsl #15
 3d8:	0000003c 	andeq	r0, r0, ip, lsr r0
 3dc:	40080e41 	andmi	r0, r8, r1, asr #28
 3e0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 3e4:	180e4101 	stmdane	lr, {r0, r8, lr}
 3e8:	00070d41 	andeq	r0, r7, r1, asr #26
 3ec:	0000001c 	andeq	r0, r0, ip, lsl r0
 3f0:	00000000 	andeq	r0, r0, r0
 3f4:	200007c0 	andcs	r0, r0, r0, asr #15
 3f8:	00000040 	andeq	r0, r0, r0, asr #32
 3fc:	40080e41 	andmi	r0, r8, r1, asr #28
 400:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 404:	180e4101 	stmdane	lr, {r0, r8, lr}
 408:	00070d41 	andeq	r0, r7, r1, asr #26
 40c:	0000001c 	andeq	r0, r0, ip, lsl r0
 410:	00000000 	andeq	r0, r0, r0
 414:	20000800 	andcs	r0, r0, r0, lsl #16
 418:	0000003c 	andeq	r0, r0, ip, lsr r0
 41c:	40080e41 	andmi	r0, r8, r1, asr #28
 420:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 424:	180e4101 	stmdane	lr, {r0, r8, lr}
 428:	00070d41 	andeq	r0, r7, r1, asr #26
 42c:	0000001c 	andeq	r0, r0, ip, lsl r0
 430:	00000000 	andeq	r0, r0, r0
 434:	2000083c 	andcs	r0, r0, ip, lsr r8
 438:	0000001c 	andeq	r0, r0, ip, lsl r0
 43c:	40080e41 	andmi	r0, r8, r1, asr #28
 440:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 444:	100e4101 	andne	r4, lr, r1, lsl #2
 448:	00070d41 	andeq	r0, r7, r1, asr #26
 44c:	0000001c 	andeq	r0, r0, ip, lsl r0
 450:	00000000 	andeq	r0, r0, r0
 454:	20000858 	andcs	r0, r0, r8, asr r8
 458:	00000040 	andeq	r0, r0, r0, asr #32
 45c:	40080e41 	andmi	r0, r8, r1, asr #28
 460:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 464:	100e4101 	andne	r4, lr, r1, lsl #2
 468:	00070d41 	andeq	r0, r7, r1, asr #26
 46c:	0000001c 	andeq	r0, r0, ip, lsl r0
 470:	00000000 	andeq	r0, r0, r0
 474:	20000898 	mulcs	r0, r8, r8
 478:	00000040 	andeq	r0, r0, r0, asr #32
 47c:	40080e41 	andmi	r0, r8, r1, asr #28
 480:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 484:	100e4101 	andne	r4, lr, r1, lsl #2
 488:	00070d41 	andeq	r0, r7, r1, asr #26
 48c:	0000001c 	andeq	r0, r0, ip, lsl r0
 490:	00000000 	andeq	r0, r0, r0
 494:	200008d8 	ldrdcs	r0, [r0], -r8
 498:	00000040 	andeq	r0, r0, r0, asr #32
 49c:	40080e41 	andmi	r0, r8, r1, asr #28
 4a0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 4a4:	100e4101 	andne	r4, lr, r1, lsl #2
 4a8:	00070d41 	andeq	r0, r7, r1, asr #26
 4ac:	0000001c 	andeq	r0, r0, ip, lsl r0
 4b0:	00000000 	andeq	r0, r0, r0
 4b4:	20000918 	andcs	r0, r0, r8, lsl r9
 4b8:	00000040 	andeq	r0, r0, r0, asr #32
 4bc:	40080e41 	andmi	r0, r8, r1, asr #28
 4c0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 4c4:	100e4101 	andne	r4, lr, r1, lsl #2
 4c8:	00070d41 	andeq	r0, r7, r1, asr #26
 4cc:	0000001c 	andeq	r0, r0, ip, lsl r0
 4d0:	00000000 	andeq	r0, r0, r0
 4d4:	20000958 	andcs	r0, r0, r8, asr r9
 4d8:	00000040 	andeq	r0, r0, r0, asr #32
 4dc:	40080e41 	andmi	r0, r8, r1, asr #28
 4e0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 4e4:	100e4101 	andne	r4, lr, r1, lsl #2
 4e8:	00070d41 	andeq	r0, r7, r1, asr #26
 4ec:	0000001c 	andeq	r0, r0, ip, lsl r0
 4f0:	00000000 	andeq	r0, r0, r0
 4f4:	20000998 	mulcs	r0, r8, r9
 4f8:	00000040 	andeq	r0, r0, r0, asr #32
 4fc:	40080e41 	andmi	r0, r8, r1, asr #28
 500:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 504:	100e4101 	andne	r4, lr, r1, lsl #2
 508:	00070d41 	andeq	r0, r7, r1, asr #26
 50c:	0000001c 	andeq	r0, r0, ip, lsl r0
 510:	00000000 	andeq	r0, r0, r0
 514:	200009d8 	ldrdcs	r0, [r0], -r8
 518:	00000040 	andeq	r0, r0, r0, asr #32
 51c:	40080e41 	andmi	r0, r8, r1, asr #28
 520:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 524:	100e4101 	andne	r4, lr, r1, lsl #2
 528:	00070d41 	andeq	r0, r7, r1, asr #26
 52c:	0000001c 	andeq	r0, r0, ip, lsl r0
 530:	00000000 	andeq	r0, r0, r0
 534:	20000a18 	andcs	r0, r0, r8, lsl sl
 538:	00000040 	andeq	r0, r0, r0, asr #32
 53c:	40080e41 	andmi	r0, r8, r1, asr #28
 540:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 544:	100e4101 	andne	r4, lr, r1, lsl #2
 548:	00070d41 	andeq	r0, r7, r1, asr #26
 54c:	0000001c 	andeq	r0, r0, ip, lsl r0
 550:	00000000 	andeq	r0, r0, r0
 554:	20000a58 	andcs	r0, r0, r8, asr sl
 558:	00000040 	andeq	r0, r0, r0, asr #32
 55c:	40080e41 	andmi	r0, r8, r1, asr #28
 560:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 564:	100e4101 	andne	r4, lr, r1, lsl #2
 568:	00070d41 	andeq	r0, r7, r1, asr #26
 56c:	0000001c 	andeq	r0, r0, ip, lsl r0
 570:	00000000 	andeq	r0, r0, r0
 574:	20000a98 	mulcs	r0, r8, sl
 578:	00000040 	andeq	r0, r0, r0, asr #32
 57c:	40080e41 	andmi	r0, r8, r1, asr #28
 580:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 584:	100e4101 	andne	r4, lr, r1, lsl #2
 588:	00070d41 	andeq	r0, r7, r1, asr #26
 58c:	0000001c 	andeq	r0, r0, ip, lsl r0
 590:	00000000 	andeq	r0, r0, r0
 594:	20000ad8 	ldrdcs	r0, [r0], -r8
 598:	00000040 	andeq	r0, r0, r0, asr #32
 59c:	40080e41 	andmi	r0, r8, r1, asr #28
 5a0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 5a4:	100e4101 	andne	r4, lr, r1, lsl #2
 5a8:	00070d41 	andeq	r0, r7, r1, asr #26
 5ac:	0000001c 	andeq	r0, r0, ip, lsl r0
 5b0:	00000000 	andeq	r0, r0, r0
 5b4:	20000b18 	andcs	r0, r0, r8, lsl fp
 5b8:	00000040 	andeq	r0, r0, r0, asr #32
 5bc:	40080e41 	andmi	r0, r8, r1, asr #28
 5c0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 5c4:	100e4101 	andne	r4, lr, r1, lsl #2
 5c8:	00070d41 	andeq	r0, r7, r1, asr #26
 5cc:	0000001c 	andeq	r0, r0, ip, lsl r0
 5d0:	00000000 	andeq	r0, r0, r0
 5d4:	20000b58 	andcs	r0, r0, r8, asr fp
 5d8:	00000040 	andeq	r0, r0, r0, asr #32
 5dc:	40080e41 	andmi	r0, r8, r1, asr #28
 5e0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 5e4:	100e4101 	andne	r4, lr, r1, lsl #2
 5e8:	00070d41 	andeq	r0, r7, r1, asr #26
 5ec:	0000001c 	andeq	r0, r0, ip, lsl r0
 5f0:	00000000 	andeq	r0, r0, r0
 5f4:	20000b98 	mulcs	r0, r8, fp
 5f8:	00000040 	andeq	r0, r0, r0, asr #32
 5fc:	40080e41 	andmi	r0, r8, r1, asr #28
 600:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 604:	100e4101 	andne	r4, lr, r1, lsl #2
 608:	00070d41 	andeq	r0, r7, r1, asr #26
 60c:	0000001c 	andeq	r0, r0, ip, lsl r0
 610:	00000000 	andeq	r0, r0, r0
 614:	20000bd8 	ldrdcs	r0, [r0], -r8
 618:	00000040 	andeq	r0, r0, r0, asr #32
 61c:	40080e41 	andmi	r0, r8, r1, asr #28
 620:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 624:	100e4101 	andne	r4, lr, r1, lsl #2
 628:	00070d41 	andeq	r0, r7, r1, asr #26
 62c:	0000001c 	andeq	r0, r0, ip, lsl r0
 630:	00000000 	andeq	r0, r0, r0
 634:	20000c18 	andcs	r0, r0, r8, lsl ip
 638:	0000003c 	andeq	r0, r0, ip, lsr r0
 63c:	40080e41 	andmi	r0, r8, r1, asr #28
 640:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 644:	100e4101 	andne	r4, lr, r1, lsl #2
 648:	00070d41 	andeq	r0, r7, r1, asr #26
 64c:	0000001c 	andeq	r0, r0, ip, lsl r0
 650:	00000000 	andeq	r0, r0, r0
 654:	20000c54 	andcs	r0, r0, r4, asr ip
 658:	00000050 	andeq	r0, r0, r0, asr r0
 65c:	40080e41 	andmi	r0, r8, r1, asr #28
 660:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 664:	100e4101 	andne	r4, lr, r1, lsl #2
 668:	00070d41 	andeq	r0, r7, r1, asr #26
 66c:	0000001c 	andeq	r0, r0, ip, lsl r0
 670:	00000000 	andeq	r0, r0, r0
 674:	20000ca4 	andcs	r0, r0, r4, lsr #25
 678:	00000084 	andeq	r0, r0, r4, lsl #1
 67c:	40080e41 	andmi	r0, r8, r1, asr #28
 680:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 684:	200e4101 	andcs	r4, lr, r1, lsl #2
 688:	00070d41 	andeq	r0, r7, r1, asr #26
 68c:	00000018 	andeq	r0, r0, r8, lsl r0
 690:	00000000 	andeq	r0, r0, r0
 694:	20000d28 	andcs	r0, r0, r8, lsr #26
 698:	0000001c 	andeq	r0, r0, ip, lsl r0
 69c:	40080e41 	andmi	r0, r8, r1, asr #28
 6a0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 6a4:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 6a8:	0000001c 	andeq	r0, r0, ip, lsl r0
 6ac:	00000000 	andeq	r0, r0, r0
 6b0:	20000d44 	andcs	r0, r0, r4, asr #26
 6b4:	00000044 	andeq	r0, r0, r4, asr #32
 6b8:	40080e41 	andmi	r0, r8, r1, asr #28
 6bc:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 6c0:	180e4101 	stmdane	lr, {r0, r8, lr}
 6c4:	00070d41 	andeq	r0, r7, r1, asr #26
 6c8:	0000001c 	andeq	r0, r0, ip, lsl r0
 6cc:	00000000 	andeq	r0, r0, r0
 6d0:	20000d88 	andcs	r0, r0, r8, lsl #27
 6d4:	00000020 	andeq	r0, r0, r0, lsr #32
 6d8:	40080e41 	andmi	r0, r8, r1, asr #28
 6dc:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 6e0:	100e4101 	andne	r4, lr, r1, lsl #2
 6e4:	00070d41 	andeq	r0, r7, r1, asr #26
 6e8:	0000001c 	andeq	r0, r0, ip, lsl r0
 6ec:	00000000 	andeq	r0, r0, r0
 6f0:	20000da8 	andcs	r0, r0, r8, lsr #27
 6f4:	0000010c 	andeq	r0, r0, ip, lsl #2
 6f8:	40080e41 	andmi	r0, r8, r1, asr #28
 6fc:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 700:	100e4101 	andne	r4, lr, r1, lsl #2
 704:	00070d41 	andeq	r0, r7, r1, asr #26
 708:	0000000c 	andeq	r0, r0, ip
 70c:	00000000 	andeq	r0, r0, r0
 710:	20000000 	andcs	r0, r0, r0
 714:	0000000c 	andeq	r0, r0, ip
 718:	00000018 	andeq	r0, r0, r8, lsl r0
 71c:	00000000 	andeq	r0, r0, r0
 720:	20000eb4 			; <UNDEFINED> instruction: 0x20000eb4
 724:	00000018 	andeq	r0, r0, r8, lsl r0
 728:	40080e41 	andmi	r0, r8, r1, asr #28
 72c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 730:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 734:	0000001c 	andeq	r0, r0, ip, lsl r0
 738:	00000000 	andeq	r0, r0, r0
 73c:	20000ecc 	andcs	r0, r0, ip, asr #29
 740:	0000002c 	andeq	r0, r0, ip, lsr #32
 744:	40080e41 	andmi	r0, r8, r1, asr #28
 748:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 74c:	100e4101 	andne	r4, lr, r1, lsl #2
 750:	00070d41 	andeq	r0, r7, r1, asr #26
 754:	0000002c 	andeq	r0, r0, ip, lsr #32
 758:	00000000 	andeq	r0, r0, r0
 75c:	20000ef8 	strdcs	r0, [r0], -r8
 760:	000008ec 	andeq	r0, r0, ip, ror #17
 764:	40140e41 	andsmi	r0, r4, r1, asr #28
 768:	85400584 	strbhi	r0, [r0, #-1412]	; 0xfffffa7c
 76c:	03864004 	orreq	r4, r6, #4
 770:	40028740 	andmi	r8, r2, r0, asr #14
 774:	0e42018e 	dvfeqd	f0, f2, #0.5
 778:	06884018 	pkhbteq	r4, r8, r8
 77c:	08b80e42 	ldmeq	r8!, {r1, r6, r9, sl, fp}
 780:	00070d41 	andeq	r0, r7, r1, asr #26
 784:	0000000c 	andeq	r0, r0, ip
 788:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 78c:	7c020001 	stcvc	0, cr0, [r2], {1}
 790:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 794:	0000001c 	andeq	r0, r0, ip, lsl r0
 798:	00000784 	andeq	r0, r0, r4, lsl #15
 79c:	200017e4 	andcs	r1, r0, r4, ror #15
 7a0:	00000170 	andeq	r0, r0, r0, ror r1
 7a4:	40080e41 	andmi	r0, r8, r1, asr #28
 7a8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 7ac:	100e4101 	andne	r4, lr, r1, lsl #2
 7b0:	00070d41 	andeq	r0, r7, r1, asr #26
 7b4:	0000001c 	andeq	r0, r0, ip, lsl r0
 7b8:	00000784 	andeq	r0, r0, r4, lsl #15
 7bc:	20001954 	andcs	r1, r0, r4, asr r9
 7c0:	00000118 	andeq	r0, r0, r8, lsl r1
 7c4:	40080e41 	andmi	r0, r8, r1, asr #28
 7c8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 7cc:	200e4101 	andcs	r4, lr, r1, lsl #2
 7d0:	00070d41 	andeq	r0, r7, r1, asr #26
 7d4:	0000001c 	andeq	r0, r0, ip, lsl r0
 7d8:	00000784 	andeq	r0, r0, r4, lsl #15
 7dc:	20001a6c 	andcs	r1, r0, ip, ror #20
 7e0:	00000034 	andeq	r0, r0, r4, lsr r0
 7e4:	40080e41 	andmi	r0, r8, r1, asr #28
 7e8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 7ec:	100e4101 	andne	r4, lr, r1, lsl #2
 7f0:	00070d41 	andeq	r0, r7, r1, asr #26
 7f4:	0000001c 	andeq	r0, r0, ip, lsl r0
 7f8:	00000784 	andeq	r0, r0, r4, lsl #15
 7fc:	20001aa0 	andcs	r1, r0, r0, lsr #21
 800:	00000046 	andeq	r0, r0, r6, asr #32
 804:	40080e41 	andmi	r0, r8, r1, asr #28
 808:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 80c:	180e4101 	stmdane	lr, {r0, r8, lr}
 810:	00070d41 	andeq	r0, r7, r1, asr #26
 814:	0000001c 	andeq	r0, r0, ip, lsl r0
 818:	00000784 	andeq	r0, r0, r4, lsl #15
 81c:	20001ae6 	andcs	r1, r0, r6, ror #21
 820:	00000042 	andeq	r0, r0, r2, asr #32
 824:	40080e41 	andmi	r0, r8, r1, asr #28
 828:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 82c:	180e4101 	stmdane	lr, {r0, r8, lr}
 830:	00070d41 	andeq	r0, r7, r1, asr #26
 834:	0000001c 	andeq	r0, r0, ip, lsl r0
 838:	00000784 	andeq	r0, r0, r4, lsl #15
 83c:	20001b28 	andcs	r1, r0, r8, lsr #22
 840:	00000016 	andeq	r0, r0, r6, lsl r0
 844:	40080e41 	andmi	r0, r8, r1, asr #28
 848:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 84c:	100e4101 	andne	r4, lr, r1, lsl #2
 850:	00070d41 	andeq	r0, r7, r1, asr #26
 854:	0000001c 	andeq	r0, r0, ip, lsl r0
 858:	00000784 	andeq	r0, r0, r4, lsl #15
 85c:	20001b3e 	andcs	r1, r0, lr, lsr fp
 860:	00000042 	andeq	r0, r0, r2, asr #32
 864:	40080e41 	andmi	r0, r8, r1, asr #28
 868:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 86c:	180e4101 	stmdane	lr, {r0, r8, lr}
 870:	00070d41 	andeq	r0, r7, r1, asr #26
 874:	0000001c 	andeq	r0, r0, ip, lsl r0
 878:	00000784 	andeq	r0, r0, r4, lsl #15
 87c:	20001b80 	andcs	r1, r0, r0, lsl #23
 880:	00000016 	andeq	r0, r0, r6, lsl r0
 884:	40080e41 	andmi	r0, r8, r1, asr #28
 888:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 88c:	100e4101 	andne	r4, lr, r1, lsl #2
 890:	00070d41 	andeq	r0, r7, r1, asr #26
 894:	0000001c 	andeq	r0, r0, ip, lsl r0
 898:	00000784 	andeq	r0, r0, r4, lsl #15
 89c:	20001b96 	mulcs	r0, r6, fp
 8a0:	0000001e 	andeq	r0, r0, lr, lsl r0
 8a4:	40080e41 	andmi	r0, r8, r1, asr #28
 8a8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 8ac:	100e4101 	andne	r4, lr, r1, lsl #2
 8b0:	00070d41 	andeq	r0, r7, r1, asr #26
 8b4:	0000001c 	andeq	r0, r0, ip, lsl r0
 8b8:	00000784 	andeq	r0, r0, r4, lsl #15
 8bc:	20001bb4 			; <UNDEFINED> instruction: 0x20001bb4
 8c0:	0000001e 	andeq	r0, r0, lr, lsl r0
 8c4:	40080e41 	andmi	r0, r8, r1, asr #28
 8c8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 8cc:	100e4101 	andne	r4, lr, r1, lsl #2
 8d0:	00070d41 	andeq	r0, r7, r1, asr #26
 8d4:	0000001c 	andeq	r0, r0, ip, lsl r0
 8d8:	00000784 	andeq	r0, r0, r4, lsl #15
 8dc:	20001bd2 	ldrdcs	r1, [r0], -r2
 8e0:	0000003a 	andeq	r0, r0, sl, lsr r0
 8e4:	40080e41 	andmi	r0, r8, r1, asr #28
 8e8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 8ec:	100e4101 	andne	r4, lr, r1, lsl #2
 8f0:	00070d41 	andeq	r0, r7, r1, asr #26
 8f4:	0000001c 	andeq	r0, r0, ip, lsl r0
 8f8:	00000784 	andeq	r0, r0, r4, lsl #15
 8fc:	20001c0c 	andcs	r1, r0, ip, lsl #24
 900:	0000001e 	andeq	r0, r0, lr, lsl r0
 904:	40080e41 	andmi	r0, r8, r1, asr #28
 908:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 90c:	100e4101 	andne	r4, lr, r1, lsl #2
 910:	00070d41 	andeq	r0, r7, r1, asr #26
 914:	0000001c 	andeq	r0, r0, ip, lsl r0
 918:	00000784 	andeq	r0, r0, r4, lsl #15
 91c:	20001c2a 	andcs	r1, r0, sl, lsr #24
 920:	00000024 	andeq	r0, r0, r4, lsr #32
 924:	40080e41 	andmi	r0, r8, r1, asr #28
 928:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 92c:	100e4101 	andne	r4, lr, r1, lsl #2
 930:	00070d41 	andeq	r0, r7, r1, asr #26
 934:	0000001c 	andeq	r0, r0, ip, lsl r0
 938:	00000784 	andeq	r0, r0, r4, lsl #15
 93c:	20001c4e 	andcs	r1, r0, lr, asr #24
 940:	000000a4 	andeq	r0, r0, r4, lsr #1
 944:	40080e41 	andmi	r0, r8, r1, asr #28
 948:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 94c:	180e4101 	stmdane	lr, {r0, r8, lr}
 950:	00070d41 	andeq	r0, r7, r1, asr #26
 954:	0000000c 	andeq	r0, r0, ip
 958:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 95c:	7c020001 	stcvc	0, cr0, [r2], {1}
 960:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 964:	0000001c 	andeq	r0, r0, ip, lsl r0
 968:	00000954 	andeq	r0, r0, r4, asr r9
 96c:	20001cf4 	strdcs	r1, [r0], -r4
 970:	00000024 	andeq	r0, r0, r4, lsr #32
 974:	40080e41 	andmi	r0, r8, r1, asr #28
 978:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 97c:	100e4101 	andne	r4, lr, r1, lsl #2
 980:	00070d41 	andeq	r0, r7, r1, asr #26
 984:	00000024 	andeq	r0, r0, r4, lsr #32
 988:	00000954 	andeq	r0, r0, r4, asr r9
 98c:	20001d18 	andcs	r1, r0, r8, lsl sp
 990:	000000f8 	strdeq	r0, [r0], -r8
 994:	40100e41 	andsmi	r0, r0, r1, asr #28
 998:	85400484 	strbhi	r0, [r0, #-1156]	; 0xfffffb7c
 99c:	02874003 	addeq	r4, r7, #3
 9a0:	41018e40 	tstmi	r1, r0, asr #28
 9a4:	0d41200e 	stcleq	0, cr2, [r1, #-56]	; 0xffffffc8
 9a8:	00000007 	andeq	r0, r0, r7
 9ac:	0000001c 	andeq	r0, r0, ip, lsl r0
 9b0:	00000954 	andeq	r0, r0, r4, asr r9
 9b4:	20001e10 	andcs	r1, r0, r0, lsl lr
 9b8:	0000002c 	andeq	r0, r0, ip, lsr #32
 9bc:	40080e41 	andmi	r0, r8, r1, asr #28
 9c0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 9c4:	100e4101 	andne	r4, lr, r1, lsl #2
 9c8:	00070d41 	andeq	r0, r7, r1, asr #26
 9cc:	0000001c 	andeq	r0, r0, ip, lsl r0
 9d0:	00000954 	andeq	r0, r0, r4, asr r9
 9d4:	20001e3c 	andcs	r1, r0, ip, lsr lr
 9d8:	00000048 	andeq	r0, r0, r8, asr #32
 9dc:	40080e41 	andmi	r0, r8, r1, asr #28
 9e0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 9e4:	100e4101 	andne	r4, lr, r1, lsl #2
 9e8:	00070d41 	andeq	r0, r7, r1, asr #26
 9ec:	0000001c 	andeq	r0, r0, ip, lsl r0
 9f0:	00000954 	andeq	r0, r0, r4, asr r9
 9f4:	20001e84 	andcs	r1, r0, r4, lsl #29
 9f8:	00000034 	andeq	r0, r0, r4, lsr r0
 9fc:	40080e41 	andmi	r0, r8, r1, asr #28
 a00:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 a04:	100e4101 	andne	r4, lr, r1, lsl #2
 a08:	00070d41 	andeq	r0, r7, r1, asr #26
 a0c:	0000000c 	andeq	r0, r0, ip
 a10:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 a14:	7c020001 	stcvc	0, cr0, [r2], {1}
 a18:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 a1c:	0000001c 	andeq	r0, r0, ip, lsl r0
 a20:	00000a0c 	andeq	r0, r0, ip, lsl #20
 a24:	20001eb8 			; <UNDEFINED> instruction: 0x20001eb8
 a28:	00000028 	andeq	r0, r0, r8, lsr #32
 a2c:	40080e41 	andmi	r0, r8, r1, asr #28
 a30:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 a34:	100e4101 	andne	r4, lr, r1, lsl #2
 a38:	00070d41 	andeq	r0, r7, r1, asr #26
 a3c:	0000001c 	andeq	r0, r0, ip, lsl r0
 a40:	00000a0c 	andeq	r0, r0, ip, lsl #20
 a44:	20001ee0 	andcs	r1, r0, r0, ror #29
 a48:	00000062 	andeq	r0, r0, r2, rrx
 a4c:	40080e41 	andmi	r0, r8, r1, asr #28
 a50:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 a54:	100e4101 	andne	r4, lr, r1, lsl #2
 a58:	00070d41 	andeq	r0, r7, r1, asr #26
 a5c:	0000001c 	andeq	r0, r0, ip, lsl r0
 a60:	00000a0c 	andeq	r0, r0, ip, lsl #20
 a64:	20001f42 	andcs	r1, r0, r2, asr #30
 a68:	00000040 	andeq	r0, r0, r0, asr #32
 a6c:	40080e41 	andmi	r0, r8, r1, asr #28
 a70:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 a74:	180e4101 	stmdane	lr, {r0, r8, lr}
 a78:	00070d41 	andeq	r0, r7, r1, asr #26
 a7c:	0000001c 	andeq	r0, r0, ip, lsl r0
 a80:	00000a0c 	andeq	r0, r0, ip, lsl #20
 a84:	20001f82 	andcs	r1, r0, r2, lsl #31
 a88:	0000005e 	andeq	r0, r0, lr, asr r0
 a8c:	40080e41 	andmi	r0, r8, r1, asr #28
 a90:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 a94:	100e4101 	andne	r4, lr, r1, lsl #2
 a98:	00070d41 	andeq	r0, r7, r1, asr #26
 a9c:	0000000c 	andeq	r0, r0, ip
 aa0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 aa4:	7c020001 	stcvc	0, cr0, [r2], {1}
 aa8:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 aac:	0000001c 	andeq	r0, r0, ip, lsl r0
 ab0:	00000a9c 	muleq	r0, ip, sl
 ab4:	20001fe0 	andcs	r1, r0, r0, ror #31
 ab8:	00000130 	andeq	r0, r0, r0, lsr r1
 abc:	40080e41 	andmi	r0, r8, r1, asr #28
 ac0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 ac4:	100e4101 	andne	r4, lr, r1, lsl #2
 ac8:	00070d41 	andeq	r0, r7, r1, asr #26
 acc:	0000001c 	andeq	r0, r0, ip, lsl r0
 ad0:	00000a9c 	muleq	r0, ip, sl
 ad4:	20002110 	andcs	r2, r0, r0, lsl r1
 ad8:	00000194 	muleq	r0, r4, r1
 adc:	40080e41 	andmi	r0, r8, r1, asr #28
 ae0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 ae4:	300e4101 	andcc	r4, lr, r1, lsl #2
 ae8:	00070d41 	andeq	r0, r7, r1, asr #26
 aec:	0000001c 	andeq	r0, r0, ip, lsl r0
 af0:	00000a9c 	muleq	r0, ip, sl
 af4:	200022a4 	andcs	r2, r0, r4, lsr #5
 af8:	00000036 	andeq	r0, r0, r6, lsr r0
 afc:	40080e41 	andmi	r0, r8, r1, asr #28
 b00:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 b04:	100e4101 	andne	r4, lr, r1, lsl #2
 b08:	00070d41 	andeq	r0, r7, r1, asr #26
 b0c:	0000001c 	andeq	r0, r0, ip, lsl r0
 b10:	00000a9c 	muleq	r0, ip, sl
 b14:	200022da 	ldrdcs	r2, [r0], -sl
 b18:	00000056 	andeq	r0, r0, r6, asr r0
 b1c:	40080e41 	andmi	r0, r8, r1, asr #28
 b20:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 b24:	180e4101 	stmdane	lr, {r0, r8, lr}
 b28:	00070d41 	andeq	r0, r7, r1, asr #26
 b2c:	0000001c 	andeq	r0, r0, ip, lsl r0
 b30:	00000a9c 	muleq	r0, ip, sl
 b34:	20002330 	andcs	r2, r0, r0, lsr r3
 b38:	00000028 	andeq	r0, r0, r8, lsr #32
 b3c:	40080e41 	andmi	r0, r8, r1, asr #28
 b40:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 b44:	100e4101 	andne	r4, lr, r1, lsl #2
 b48:	00070d41 	andeq	r0, r7, r1, asr #26
 b4c:	0000001c 	andeq	r0, r0, ip, lsl r0
 b50:	00000a9c 	muleq	r0, ip, sl
 b54:	20002358 	andcs	r2, r0, r8, asr r3
 b58:	00000048 	andeq	r0, r0, r8, asr #32
 b5c:	40080e41 	andmi	r0, r8, r1, asr #28
 b60:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 b64:	100e4101 	andne	r4, lr, r1, lsl #2
 b68:	00070d41 	andeq	r0, r7, r1, asr #26
 b6c:	0000001c 	andeq	r0, r0, ip, lsl r0
 b70:	00000a9c 	muleq	r0, ip, sl
 b74:	200023a0 	andcs	r2, r0, r0, lsr #7
 b78:	0000003a 	andeq	r0, r0, sl, lsr r0
 b7c:	40080e41 	andmi	r0, r8, r1, asr #28
 b80:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 b84:	100e4101 	andne	r4, lr, r1, lsl #2
 b88:	00070d41 	andeq	r0, r7, r1, asr #26
 b8c:	0000001c 	andeq	r0, r0, ip, lsl r0
 b90:	00000a9c 	muleq	r0, ip, sl
 b94:	200023da 	ldrdcs	r2, [r0], -sl
 b98:	00000046 	andeq	r0, r0, r6, asr #32
 b9c:	40080e41 	andmi	r0, r8, r1, asr #28
 ba0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 ba4:	100e4101 	andne	r4, lr, r1, lsl #2
 ba8:	00070d41 	andeq	r0, r7, r1, asr #26
 bac:	0000001c 	andeq	r0, r0, ip, lsl r0
 bb0:	00000a9c 	muleq	r0, ip, sl
 bb4:	20002420 	andcs	r2, r0, r0, lsr #8
 bb8:	00000048 	andeq	r0, r0, r8, asr #32
 bbc:	40080e41 	andmi	r0, r8, r1, asr #28
 bc0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 bc4:	100e4101 	andne	r4, lr, r1, lsl #2
 bc8:	00070d41 	andeq	r0, r7, r1, asr #26
 bcc:	0000001c 	andeq	r0, r0, ip, lsl r0
 bd0:	00000a9c 	muleq	r0, ip, sl
 bd4:	20002468 	andcs	r2, r0, r8, ror #8
 bd8:	00000024 	andeq	r0, r0, r4, lsr #32
 bdc:	40080e41 	andmi	r0, r8, r1, asr #28
 be0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 be4:	100e4101 	andne	r4, lr, r1, lsl #2
 be8:	00070d41 	andeq	r0, r7, r1, asr #26
 bec:	0000001c 	andeq	r0, r0, ip, lsl r0
 bf0:	00000a9c 	muleq	r0, ip, sl
 bf4:	2000248c 	andcs	r2, r0, ip, lsl #9
 bf8:	0000001c 	andeq	r0, r0, ip, lsl r0
 bfc:	40080e41 	andmi	r0, r8, r1, asr #28
 c00:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 c04:	100e4101 	andne	r4, lr, r1, lsl #2
 c08:	00070d41 	andeq	r0, r7, r1, asr #26
 c0c:	0000001c 	andeq	r0, r0, ip, lsl r0
 c10:	00000a9c 	muleq	r0, ip, sl
 c14:	200024a8 	andcs	r2, r0, r8, lsr #9
 c18:	0000003a 	andeq	r0, r0, sl, lsr r0
 c1c:	40080e41 	andmi	r0, r8, r1, asr #28
 c20:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 c24:	100e4101 	andne	r4, lr, r1, lsl #2
 c28:	00070d41 	andeq	r0, r7, r1, asr #26
 c2c:	0000001c 	andeq	r0, r0, ip, lsl r0
 c30:	00000a9c 	muleq	r0, ip, sl
 c34:	200024e2 	andcs	r2, r0, r2, ror #9
 c38:	00000040 	andeq	r0, r0, r0, asr #32
 c3c:	40080e41 	andmi	r0, r8, r1, asr #28
 c40:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 c44:	100e4101 	andne	r4, lr, r1, lsl #2
 c48:	00070d41 	andeq	r0, r7, r1, asr #26
 c4c:	0000001c 	andeq	r0, r0, ip, lsl r0
 c50:	00000a9c 	muleq	r0, ip, sl
 c54:	20002522 	andcs	r2, r0, r2, lsr #10
 c58:	0000003e 	andeq	r0, r0, lr, lsr r0
 c5c:	40080e41 	andmi	r0, r8, r1, asr #28
 c60:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 c64:	100e4101 	andne	r4, lr, r1, lsl #2
 c68:	00070d41 	andeq	r0, r7, r1, asr #26
 c6c:	0000001c 	andeq	r0, r0, ip, lsl r0
 c70:	00000a9c 	muleq	r0, ip, sl
 c74:	20002560 	andcs	r2, r0, r0, ror #10
 c78:	00000038 	andeq	r0, r0, r8, lsr r0
 c7c:	40080e41 	andmi	r0, r8, r1, asr #28
 c80:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 c84:	100e4101 	andne	r4, lr, r1, lsl #2
 c88:	00070d41 	andeq	r0, r7, r1, asr #26
 c8c:	0000001c 	andeq	r0, r0, ip, lsl r0
 c90:	00000a9c 	muleq	r0, ip, sl
 c94:	20002598 	mulcs	r0, r8, r5
 c98:	00000048 	andeq	r0, r0, r8, asr #32
 c9c:	40080e41 	andmi	r0, r8, r1, asr #28
 ca0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 ca4:	100e4101 	andne	r4, lr, r1, lsl #2
 ca8:	00070d41 	andeq	r0, r7, r1, asr #26
 cac:	0000001c 	andeq	r0, r0, ip, lsl r0
 cb0:	00000a9c 	muleq	r0, ip, sl
 cb4:	200025e0 	andcs	r2, r0, r0, ror #11
 cb8:	00000020 	andeq	r0, r0, r0, lsr #32
 cbc:	40080e41 	andmi	r0, r8, r1, asr #28
 cc0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 cc4:	100e4101 	andne	r4, lr, r1, lsl #2
 cc8:	00070d41 	andeq	r0, r7, r1, asr #26
 ccc:	0000001c 	andeq	r0, r0, ip, lsl r0
 cd0:	00000a9c 	muleq	r0, ip, sl
 cd4:	20002600 	andcs	r2, r0, r0, lsl #12
 cd8:	00000040 	andeq	r0, r0, r0, asr #32
 cdc:	40080e41 	andmi	r0, r8, r1, asr #28
 ce0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 ce4:	100e4101 	andne	r4, lr, r1, lsl #2
 ce8:	00070d41 	andeq	r0, r7, r1, asr #26
 cec:	0000001c 	andeq	r0, r0, ip, lsl r0
 cf0:	00000a9c 	muleq	r0, ip, sl
 cf4:	20002640 	andcs	r2, r0, r0, asr #12
 cf8:	0000003e 	andeq	r0, r0, lr, lsr r0
 cfc:	40080e41 	andmi	r0, r8, r1, asr #28
 d00:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 d04:	100e4101 	andne	r4, lr, r1, lsl #2
 d08:	00070d41 	andeq	r0, r7, r1, asr #26
 d0c:	0000001c 	andeq	r0, r0, ip, lsl r0
 d10:	00000a9c 	muleq	r0, ip, sl
 d14:	2000267e 	andcs	r2, r0, lr, ror r6
 d18:	00000040 	andeq	r0, r0, r0, asr #32
 d1c:	40080e41 	andmi	r0, r8, r1, asr #28
 d20:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 d24:	100e4101 	andne	r4, lr, r1, lsl #2
 d28:	00070d41 	andeq	r0, r7, r1, asr #26
 d2c:	0000001c 	andeq	r0, r0, ip, lsl r0
 d30:	00000a9c 	muleq	r0, ip, sl
 d34:	200026be 			; <UNDEFINED> instruction: 0x200026be
 d38:	00000040 	andeq	r0, r0, r0, asr #32
 d3c:	40080e41 	andmi	r0, r8, r1, asr #28
 d40:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 d44:	100e4101 	andne	r4, lr, r1, lsl #2
 d48:	00070d41 	andeq	r0, r7, r1, asr #26
 d4c:	0000001c 	andeq	r0, r0, ip, lsl r0
 d50:	00000a9c 	muleq	r0, ip, sl
 d54:	200026fe 	strdcs	r2, [r0], -lr
 d58:	00000038 	andeq	r0, r0, r8, lsr r0
 d5c:	40080e41 	andmi	r0, r8, r1, asr #28
 d60:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 d64:	100e4101 	andne	r4, lr, r1, lsl #2
 d68:	00070d41 	andeq	r0, r7, r1, asr #26
 d6c:	0000001c 	andeq	r0, r0, ip, lsl r0
 d70:	00000a9c 	muleq	r0, ip, sl
 d74:	20002736 	andcs	r2, r0, r6, lsr r7
 d78:	00000040 	andeq	r0, r0, r0, asr #32
 d7c:	40080e41 	andmi	r0, r8, r1, asr #28
 d80:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 d84:	100e4101 	andne	r4, lr, r1, lsl #2
 d88:	00070d41 	andeq	r0, r7, r1, asr #26
 d8c:	0000001c 	andeq	r0, r0, ip, lsl r0
 d90:	00000a9c 	muleq	r0, ip, sl
 d94:	20002776 	andcs	r2, r0, r6, ror r7
 d98:	00000052 	andeq	r0, r0, r2, asr r0
 d9c:	40080e41 	andmi	r0, r8, r1, asr #28
 da0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 da4:	100e4101 	andne	r4, lr, r1, lsl #2
 da8:	00070d41 	andeq	r0, r7, r1, asr #26
 dac:	0000001c 	andeq	r0, r0, ip, lsl r0
 db0:	00000a9c 	muleq	r0, ip, sl
 db4:	200027c8 	andcs	r2, r0, r8, asr #15
 db8:	0000009a 	muleq	r0, sl, r0
 dbc:	40080e41 	andmi	r0, r8, r1, asr #28
 dc0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 dc4:	200e4101 	andcs	r4, lr, r1, lsl #2
 dc8:	00070d41 	andeq	r0, r7, r1, asr #26
 dcc:	0000001c 	andeq	r0, r0, ip, lsl r0
 dd0:	00000a9c 	muleq	r0, ip, sl
 dd4:	20002862 	andcs	r2, r0, r2, ror #16
 dd8:	00000048 	andeq	r0, r0, r8, asr #32
 ddc:	40080e41 	andmi	r0, r8, r1, asr #28
 de0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 de4:	180e4101 	stmdane	lr, {r0, r8, lr}
 de8:	00070d41 	andeq	r0, r7, r1, asr #26
 dec:	0000001c 	andeq	r0, r0, ip, lsl r0
 df0:	00000a9c 	muleq	r0, ip, sl
 df4:	200028aa 	andcs	r2, r0, sl, lsr #17
 df8:	00000022 	andeq	r0, r0, r2, lsr #32
 dfc:	40080e41 	andmi	r0, r8, r1, asr #28
 e00:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 e04:	100e4101 	andne	r4, lr, r1, lsl #2
 e08:	00070d41 	andeq	r0, r7, r1, asr #26
 e0c:	0000001c 	andeq	r0, r0, ip, lsl r0
 e10:	00000a9c 	muleq	r0, ip, sl
 e14:	200028cc 	andcs	r2, r0, ip, asr #17
 e18:	000000ca 	andeq	r0, r0, sl, asr #1
 e1c:	40080e41 	andmi	r0, r8, r1, asr #28
 e20:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 e24:	200e4101 	andcs	r4, lr, r1, lsl #2
 e28:	00070d41 	andeq	r0, r7, r1, asr #26
 e2c:	0000001c 	andeq	r0, r0, ip, lsl r0
 e30:	00000a9c 	muleq	r0, ip, sl
 e34:	20002996 	mulcs	r0, r6, r9
 e38:	00000048 	andeq	r0, r0, r8, asr #32
 e3c:	40080e41 	andmi	r0, r8, r1, asr #28
 e40:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 e44:	180e4101 	stmdane	lr, {r0, r8, lr}
 e48:	00070d41 	andeq	r0, r7, r1, asr #26
 e4c:	0000000c 	andeq	r0, r0, ip
 e50:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 e54:	7c010001 	stcvc	0, cr0, [r1], {1}
 e58:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 e5c:	0000000c 	andeq	r0, r0, ip
 e60:	00000e4c 	andeq	r0, r0, ip, asr #28
 e64:	200029e1 	andcs	r2, r0, r1, ror #19
 e68:	0000010a 	andeq	r0, r0, sl, lsl #2
 e6c:	0000000c 	andeq	r0, r0, ip
 e70:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 e74:	7c020001 	stcvc	0, cr0, [r2], {1}
 e78:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 e7c:	00000014 	andeq	r0, r0, r4, lsl r0
 e80:	00000e6c 	andeq	r0, r0, ip, ror #28
 e84:	20002af8 	strdcs	r2, [r0], -r8
 e88:	00000012 	andeq	r0, r0, r2, lsl r0
 e8c:	84080e42 	strhi	r0, [r8], #-3650	; 0xfffff1be
 e90:	00018e02 	andeq	r8, r1, r2, lsl #28
 e94:	0000000c 	andeq	r0, r0, ip
 e98:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 e9c:	7c020001 	stcvc	0, cr0, [r2], {1}
 ea0:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 ea4:	0000000c 	andeq	r0, r0, ip
 ea8:	00000e94 	muleq	r0, r4, lr
 eac:	20002b0a 	andcs	r2, r0, sl, lsl #22
 eb0:	00000010 	andeq	r0, r0, r0, lsl r0
