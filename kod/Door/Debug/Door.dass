
./Debug/Door.elf:     file format elf32-littlearm


Disassembly of section .text:

20000000 <startup>:

void startup(void) __attribute__((naked)) __attribute__((section(".start_section")));

void startup(void)
{
	__asm volatile(
20000000:	4802      	ldr	r0, [pc, #8]	; (2000000c <_exit+0x4>)
20000002:	4685      	mov	sp, r0
20000004:	f000 fff2 	bl	20000fec <main>

20000008 <_exit>:
20000008:	e7fe      	b.n	20000008 <_exit>
		" LDR R0,=0x2001C000\n" /* set stack */
		" MOV SP,R0\n"
		" BL main\n"   /* call main */
		"_exit: B .\n" /* never return */
	);
}
2000000a:	46c0      	nop			; (mov r8, r8)
2000000c:	2001c000 	andcs	ip, r1, r0

20000010 <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
20000010:	b580      	push	{r7, lr}
20000012:	b082      	sub	sp, #8
20000014:	af00      	add	r7, sp, #0
20000016:	0002      	movs	r2, r0
20000018:	6039      	str	r1, [r7, #0]
2000001a:	1dfb      	adds	r3, r7, #7
2000001c:	701a      	strb	r2, [r3, #0]
  if((int32_t)IRQn < 0) {
2000001e:	1dfb      	adds	r3, r7, #7
20000020:	781b      	ldrb	r3, [r3, #0]
20000022:	2b7f      	cmp	r3, #127	; 0x7f
20000024:	d90d      	bls.n	20000042 <NVIC_SetPriority+0x32>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
20000026:	683b      	ldr	r3, [r7, #0]
20000028:	b2da      	uxtb	r2, r3
2000002a:	490f      	ldr	r1, [pc, #60]	; (20000068 <NVIC_SetPriority+0x58>)
2000002c:	1dfb      	adds	r3, r7, #7
2000002e:	781b      	ldrb	r3, [r3, #0]
20000030:	0018      	movs	r0, r3
20000032:	230f      	movs	r3, #15
20000034:	4003      	ands	r3, r0
20000036:	3b04      	subs	r3, #4
20000038:	0112      	lsls	r2, r2, #4
2000003a:	b2d2      	uxtb	r2, r2
2000003c:	18cb      	adds	r3, r1, r3
2000003e:	761a      	strb	r2, [r3, #24]
  }
  else {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
20000040:	e00d      	b.n	2000005e <NVIC_SetPriority+0x4e>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
20000042:	683b      	ldr	r3, [r7, #0]
20000044:	b2db      	uxtb	r3, r3
20000046:	4909      	ldr	r1, [pc, #36]	; (2000006c <NVIC_SetPriority+0x5c>)
20000048:	1dfa      	adds	r2, r7, #7
2000004a:	7812      	ldrb	r2, [r2, #0]
2000004c:	b252      	sxtb	r2, r2
2000004e:	011b      	lsls	r3, r3, #4
20000050:	b2d8      	uxtb	r0, r3
20000052:	23c0      	movs	r3, #192	; 0xc0
20000054:	009b      	lsls	r3, r3, #2
20000056:	188a      	adds	r2, r1, r2
20000058:	18d3      	adds	r3, r2, r3
2000005a:	1c02      	adds	r2, r0, #0
2000005c:	701a      	strb	r2, [r3, #0]
}
2000005e:	46c0      	nop			; (mov r8, r8)
20000060:	46bd      	mov	sp, r7
20000062:	b002      	add	sp, #8
20000064:	bd80      	pop	{r7, pc}
20000066:	46c0      	nop			; (mov r8, r8)
20000068:	e000ed00 	and	lr, r0, r0, lsl #26
2000006c:	e000e100 	and	lr, r0, r0, lsl #2

20000070 <SysTick_Config>:
    function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
20000070:	b580      	push	{r7, lr}
20000072:	b082      	sub	sp, #8
20000074:	af00      	add	r7, sp, #0
20000076:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk) { return (1UL); }    /* Reload value impossible */
20000078:	687b      	ldr	r3, [r7, #4]
2000007a:	3b01      	subs	r3, #1
2000007c:	4a0c      	ldr	r2, [pc, #48]	; (200000b0 <SysTick_Config+0x40>)
2000007e:	4293      	cmp	r3, r2
20000080:	d901      	bls.n	20000086 <SysTick_Config+0x16>
20000082:	2301      	movs	r3, #1
20000084:	e010      	b.n	200000a8 <SysTick_Config+0x38>

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
20000086:	4b0b      	ldr	r3, [pc, #44]	; (200000b4 <SysTick_Config+0x44>)
20000088:	687a      	ldr	r2, [r7, #4]
2000008a:	3a01      	subs	r2, #1
2000008c:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
2000008e:	2301      	movs	r3, #1
20000090:	425b      	negs	r3, r3
20000092:	210f      	movs	r1, #15
20000094:	0018      	movs	r0, r3
20000096:	f7ff ffbb 	bl	20000010 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
2000009a:	4b06      	ldr	r3, [pc, #24]	; (200000b4 <SysTick_Config+0x44>)
2000009c:	2200      	movs	r2, #0
2000009e:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
200000a0:	4b04      	ldr	r3, [pc, #16]	; (200000b4 <SysTick_Config+0x44>)
200000a2:	2207      	movs	r2, #7
200000a4:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
200000a6:	2300      	movs	r3, #0
}
200000a8:	0018      	movs	r0, r3
200000aa:	46bd      	mov	sp, r7
200000ac:	b002      	add	sp, #8
200000ae:	bd80      	pop	{r7, pc}
200000b0:	00ffffff 	ldrshteq	pc, [pc], #255	; <UNPREDICTABLE>
200000b4:	e000e010 	and	lr, r0, r0, lsl r0

200000b8 <RCC_DeInit>:
  *            - LSI, LSE and RTC clocks 
  * @param  None
  * @retval None
  */
void RCC_DeInit(void)
{
200000b8:	b580      	push	{r7, lr}
200000ba:	af00      	add	r7, sp, #0
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
200000bc:	4b14      	ldr	r3, [pc, #80]	; (20000110 <RCC_DeInit+0x58>)
200000be:	681a      	ldr	r2, [r3, #0]
200000c0:	4b13      	ldr	r3, [pc, #76]	; (20000110 <RCC_DeInit+0x58>)
200000c2:	2101      	movs	r1, #1
200000c4:	430a      	orrs	r2, r1
200000c6:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
200000c8:	4b11      	ldr	r3, [pc, #68]	; (20000110 <RCC_DeInit+0x58>)
200000ca:	2200      	movs	r2, #0
200000cc:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON, PLLON, PLLI2S and PLLSAI(STM32F42xxx/43xxx/446xx/469xx/479xx devices) bits */
  RCC->CR &= (uint32_t)0xEAF6FFFF;
200000ce:	4b10      	ldr	r3, [pc, #64]	; (20000110 <RCC_DeInit+0x58>)
200000d0:	681a      	ldr	r2, [r3, #0]
200000d2:	4b0f      	ldr	r3, [pc, #60]	; (20000110 <RCC_DeInit+0x58>)
200000d4:	490f      	ldr	r1, [pc, #60]	; (20000114 <RCC_DeInit+0x5c>)
200000d6:	400a      	ands	r2, r1
200000d8:	601a      	str	r2, [r3, #0]
  
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
200000da:	4b0d      	ldr	r3, [pc, #52]	; (20000110 <RCC_DeInit+0x58>)
200000dc:	4a0e      	ldr	r2, [pc, #56]	; (20000118 <RCC_DeInit+0x60>)
200000de:	605a      	str	r2, [r3, #4]

#if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F401xx) || defined(STM32F411xE) || defined(STM32F446xx) || defined(STM32F413_423xx) || defined(STM32F469_479xx)  
  /* Reset PLLI2SCFGR register */
  RCC->PLLI2SCFGR = 0x20003000;
200000e0:	4a0b      	ldr	r2, [pc, #44]	; (20000110 <RCC_DeInit+0x58>)
200000e2:	2384      	movs	r3, #132	; 0x84
200000e4:	490d      	ldr	r1, [pc, #52]	; (2000011c <RCC_DeInit+0x64>)
200000e6:	50d1      	str	r1, [r2, r3]
#endif /* STM32F40_41xxx || STM32F427_437xx || STM32F429_439xx || STM32F401xx || STM32F411xE || STM32F446xx || STM32F413_423xx || STM32F469_479xx */

#if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F446xx) || defined(STM32F469_479xx) 
  /* Reset PLLSAICFGR register, only available for STM32F42xxx/43xxx/446xx/469xx/479xx devices */
  RCC->PLLSAICFGR = 0x24003000;
200000e8:	4a09      	ldr	r2, [pc, #36]	; (20000110 <RCC_DeInit+0x58>)
200000ea:	2388      	movs	r3, #136	; 0x88
200000ec:	490c      	ldr	r1, [pc, #48]	; (20000120 <RCC_DeInit+0x68>)
200000ee:	50d1      	str	r1, [r2, r3]
#endif /* STM32F40_41xxx || STM32F427_437xx || STM32F429_439xx || STM32F446xx || STM32F469_479xx */
  
  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
200000f0:	4b07      	ldr	r3, [pc, #28]	; (20000110 <RCC_DeInit+0x58>)
200000f2:	681a      	ldr	r2, [r3, #0]
200000f4:	4b06      	ldr	r3, [pc, #24]	; (20000110 <RCC_DeInit+0x58>)
200000f6:	490b      	ldr	r1, [pc, #44]	; (20000124 <RCC_DeInit+0x6c>)
200000f8:	400a      	ands	r2, r1
200000fa:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
200000fc:	4b04      	ldr	r3, [pc, #16]	; (20000110 <RCC_DeInit+0x58>)
200000fe:	2200      	movs	r2, #0
20000100:	60da      	str	r2, [r3, #12]

  /* Disable Timers clock prescalers selection, only available for STM32F42/43xxx and STM32F413_423xx devices */
  RCC->DCKCFGR = 0x00000000;
20000102:	4a03      	ldr	r2, [pc, #12]	; (20000110 <RCC_DeInit+0x58>)
20000104:	238c      	movs	r3, #140	; 0x8c
20000106:	2100      	movs	r1, #0
20000108:	50d1      	str	r1, [r2, r3]
  
#if defined(STM32F410xx) || defined(STM32F413_423xx)
  /* Disable LPTIM and FMPI2C clock prescalers selection, only available for STM32F410xx and STM32F413_423xx devices */
  RCC->DCKCFGR2 = 0x00000000;
#endif /* STM32F410xx || STM32F413_423xx */  
}
2000010a:	46c0      	nop			; (mov r8, r8)
2000010c:	46bd      	mov	sp, r7
2000010e:	bd80      	pop	{r7, pc}
20000110:	40023800 	andmi	r3, r2, r0, lsl #16
20000114:	eaf6ffff 	b	1fdc0118 <startup-0x23fee8>
20000118:	24003010 	strcs	r3, [r0], #-16
2000011c:	20003000 	andcs	r3, r0, r0
20000120:	24003000 	strcs	r3, [r0], #-0
20000124:	fffbffff 			; <UNDEFINED> instruction: 0xfffbffff

20000128 <RCC_HSEConfig>:
  *            @arg RCC_HSE_ON: turn ON the HSE oscillator
  *            @arg RCC_HSE_Bypass: HSE oscillator bypassed with external clock
  * @retval None
  */
void RCC_HSEConfig(uint8_t RCC_HSE)
{
20000128:	b580      	push	{r7, lr}
2000012a:	b082      	sub	sp, #8
2000012c:	af00      	add	r7, sp, #0
2000012e:	0002      	movs	r2, r0
20000130:	1dfb      	adds	r3, r7, #7
20000132:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_HSE(RCC_HSE));

  /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
  *(__IO uint8_t *) CR_BYTE3_ADDRESS = RCC_HSE_OFF;
20000134:	4b05      	ldr	r3, [pc, #20]	; (2000014c <RCC_HSEConfig+0x24>)
20000136:	2200      	movs	r2, #0
20000138:	701a      	strb	r2, [r3, #0]

  /* Set the new HSE configuration -------------------------------------------*/
  *(__IO uint8_t *) CR_BYTE3_ADDRESS = RCC_HSE;
2000013a:	4a04      	ldr	r2, [pc, #16]	; (2000014c <RCC_HSEConfig+0x24>)
2000013c:	1dfb      	adds	r3, r7, #7
2000013e:	781b      	ldrb	r3, [r3, #0]
20000140:	7013      	strb	r3, [r2, #0]
}
20000142:	46c0      	nop			; (mov r8, r8)
20000144:	46bd      	mov	sp, r7
20000146:	b002      	add	sp, #8
20000148:	bd80      	pop	{r7, pc}
2000014a:	46c0      	nop			; (mov r8, r8)
2000014c:	40023802 	andmi	r3, r2, r2, lsl #16

20000150 <RCC_WaitForHSEStartUp>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: HSE oscillator is stable and ready to use
  *          - ERROR: HSE oscillator not yet ready
  */
ErrorStatus RCC_WaitForHSEStartUp(void)
{
20000150:	b590      	push	{r4, r7, lr}
20000152:	b083      	sub	sp, #12
20000154:	af00      	add	r7, sp, #0
  __IO uint32_t startupcounter = 0;
20000156:	2300      	movs	r3, #0
20000158:	603b      	str	r3, [r7, #0]
  ErrorStatus status = ERROR;
2000015a:	1dfb      	adds	r3, r7, #7
2000015c:	2200      	movs	r2, #0
2000015e:	701a      	strb	r2, [r3, #0]
  FlagStatus hsestatus = RESET;
20000160:	1dbb      	adds	r3, r7, #6
20000162:	2200      	movs	r2, #0
20000164:	701a      	strb	r2, [r3, #0]
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    hsestatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
20000166:	1dbc      	adds	r4, r7, #6
20000168:	2031      	movs	r0, #49	; 0x31
2000016a:	f000 fd9b 	bl	20000ca4 <RCC_GetFlagStatus>
2000016e:	0003      	movs	r3, r0
20000170:	7023      	strb	r3, [r4, #0]
    startupcounter++;
20000172:	683b      	ldr	r3, [r7, #0]
20000174:	3301      	adds	r3, #1
20000176:	603b      	str	r3, [r7, #0]
  } while((startupcounter != HSE_STARTUP_TIMEOUT) && (hsestatus == RESET));
20000178:	683a      	ldr	r2, [r7, #0]
2000017a:	23a0      	movs	r3, #160	; 0xa0
2000017c:	01db      	lsls	r3, r3, #7
2000017e:	429a      	cmp	r2, r3
20000180:	d003      	beq.n	2000018a <RCC_WaitForHSEStartUp+0x3a>
20000182:	1dbb      	adds	r3, r7, #6
20000184:	781b      	ldrb	r3, [r3, #0]
20000186:	2b00      	cmp	r3, #0
20000188:	d0ed      	beq.n	20000166 <RCC_WaitForHSEStartUp+0x16>

  if (RCC_GetFlagStatus(RCC_FLAG_HSERDY) != RESET)
2000018a:	2031      	movs	r0, #49	; 0x31
2000018c:	f000 fd8a 	bl	20000ca4 <RCC_GetFlagStatus>
20000190:	1e03      	subs	r3, r0, #0
20000192:	d003      	beq.n	2000019c <RCC_WaitForHSEStartUp+0x4c>
  {
    status = SUCCESS;
20000194:	1dfb      	adds	r3, r7, #7
20000196:	2201      	movs	r2, #1
20000198:	701a      	strb	r2, [r3, #0]
2000019a:	e002      	b.n	200001a2 <RCC_WaitForHSEStartUp+0x52>
  }
  else
  {
    status = ERROR;
2000019c:	1dfb      	adds	r3, r7, #7
2000019e:	2200      	movs	r2, #0
200001a0:	701a      	strb	r2, [r3, #0]
  }
  return (status);
200001a2:	1dfb      	adds	r3, r7, #7
200001a4:	781b      	ldrb	r3, [r3, #0]
}
200001a6:	0018      	movs	r0, r3
200001a8:	46bd      	mov	sp, r7
200001aa:	b003      	add	sp, #12
200001ac:	bd90      	pop	{r4, r7, pc}

200001ae <RCC_AdjustHSICalibrationValue>:
  * @param  HSICalibrationValue: specifies the calibration trimming value.
  *         This parameter must be a number between 0 and 0x1F.
  * @retval None
  */
void RCC_AdjustHSICalibrationValue(uint8_t HSICalibrationValue)
{
200001ae:	b580      	push	{r7, lr}
200001b0:	b084      	sub	sp, #16
200001b2:	af00      	add	r7, sp, #0
200001b4:	0002      	movs	r2, r0
200001b6:	1dfb      	adds	r3, r7, #7
200001b8:	701a      	strb	r2, [r3, #0]
  uint32_t tmpreg = 0;
200001ba:	2300      	movs	r3, #0
200001bc:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_CALIBRATION_VALUE(HSICalibrationValue));

  tmpreg = RCC->CR;
200001be:	4b0a      	ldr	r3, [pc, #40]	; (200001e8 <RCC_AdjustHSICalibrationValue+0x3a>)
200001c0:	681b      	ldr	r3, [r3, #0]
200001c2:	60fb      	str	r3, [r7, #12]

  /* Clear HSITRIM[4:0] bits */
  tmpreg &= ~RCC_CR_HSITRIM;
200001c4:	68fb      	ldr	r3, [r7, #12]
200001c6:	22f8      	movs	r2, #248	; 0xf8
200001c8:	4393      	bics	r3, r2
200001ca:	60fb      	str	r3, [r7, #12]

  /* Set the HSITRIM[4:0] bits according to HSICalibrationValue value */
  tmpreg |= (uint32_t)HSICalibrationValue << 3;
200001cc:	1dfb      	adds	r3, r7, #7
200001ce:	781b      	ldrb	r3, [r3, #0]
200001d0:	00db      	lsls	r3, r3, #3
200001d2:	68fa      	ldr	r2, [r7, #12]
200001d4:	4313      	orrs	r3, r2
200001d6:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CR = tmpreg;
200001d8:	4b03      	ldr	r3, [pc, #12]	; (200001e8 <RCC_AdjustHSICalibrationValue+0x3a>)
200001da:	68fa      	ldr	r2, [r7, #12]
200001dc:	601a      	str	r2, [r3, #0]
}
200001de:	46c0      	nop			; (mov r8, r8)
200001e0:	46bd      	mov	sp, r7
200001e2:	b004      	add	sp, #16
200001e4:	bd80      	pop	{r7, pc}
200001e6:	46c0      	nop			; (mov r8, r8)
200001e8:	40023800 	andmi	r3, r2, r0, lsl #16

200001ec <RCC_HSICmd>:
  * @note   When the HSI is stopped, HSIRDY flag goes low after 6 HSI oscillator
  *         clock cycles.  
  * @retval None
  */
void RCC_HSICmd(FunctionalState NewState)
{
200001ec:	b580      	push	{r7, lr}
200001ee:	b082      	sub	sp, #8
200001f0:	af00      	add	r7, sp, #0
200001f2:	0002      	movs	r2, r0
200001f4:	1dfb      	adds	r3, r7, #7
200001f6:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CR_HSION_BB = (uint32_t)NewState;
200001f8:	4b03      	ldr	r3, [pc, #12]	; (20000208 <RCC_HSICmd+0x1c>)
200001fa:	1dfa      	adds	r2, r7, #7
200001fc:	7812      	ldrb	r2, [r2, #0]
200001fe:	601a      	str	r2, [r3, #0]
}
20000200:	46c0      	nop			; (mov r8, r8)
20000202:	46bd      	mov	sp, r7
20000204:	b002      	add	sp, #8
20000206:	bd80      	pop	{r7, pc}
20000208:	42470000 	submi	r0, r7, #0

2000020c <RCC_LSEConfig>:
  *            @arg RCC_LSE_ON: turn ON the LSE oscillator
  *            @arg RCC_LSE_Bypass: LSE oscillator bypassed with external clock
  * @retval None
  */
void RCC_LSEConfig(uint8_t RCC_LSE)
{
2000020c:	b580      	push	{r7, lr}
2000020e:	b082      	sub	sp, #8
20000210:	af00      	add	r7, sp, #0
20000212:	0002      	movs	r2, r0
20000214:	1dfb      	adds	r3, r7, #7
20000216:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_LSE(RCC_LSE));

  /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
  /* Reset LSEON bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
20000218:	4b0c      	ldr	r3, [pc, #48]	; (2000024c <RCC_LSEConfig+0x40>)
2000021a:	2200      	movs	r2, #0
2000021c:	701a      	strb	r2, [r3, #0]

  /* Reset LSEBYP bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
2000021e:	4b0b      	ldr	r3, [pc, #44]	; (2000024c <RCC_LSEConfig+0x40>)
20000220:	2200      	movs	r2, #0
20000222:	701a      	strb	r2, [r3, #0]

  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch (RCC_LSE)
20000224:	1dfb      	adds	r3, r7, #7
20000226:	781b      	ldrb	r3, [r3, #0]
20000228:	2b01      	cmp	r3, #1
2000022a:	d002      	beq.n	20000232 <RCC_LSEConfig+0x26>
2000022c:	2b04      	cmp	r3, #4
2000022e:	d004      	beq.n	2000023a <RCC_LSEConfig+0x2e>
    case RCC_LSE_Bypass:
      /* Set LSEBYP and LSEON bits */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
      break;
    default:
      break;
20000230:	e007      	b.n	20000242 <RCC_LSEConfig+0x36>
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_ON;
20000232:	4b06      	ldr	r3, [pc, #24]	; (2000024c <RCC_LSEConfig+0x40>)
20000234:	2201      	movs	r2, #1
20000236:	701a      	strb	r2, [r3, #0]
      break;
20000238:	e003      	b.n	20000242 <RCC_LSEConfig+0x36>
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
2000023a:	4b04      	ldr	r3, [pc, #16]	; (2000024c <RCC_LSEConfig+0x40>)
2000023c:	2205      	movs	r2, #5
2000023e:	701a      	strb	r2, [r3, #0]
      break;
20000240:	46c0      	nop			; (mov r8, r8)
  }
}
20000242:	46c0      	nop			; (mov r8, r8)
20000244:	46bd      	mov	sp, r7
20000246:	b002      	add	sp, #8
20000248:	bd80      	pop	{r7, pc}
2000024a:	46c0      	nop			; (mov r8, r8)
2000024c:	40023870 	andmi	r3, r2, r0, ror r8

20000250 <RCC_LSICmd>:
  * @note   When the LSI is stopped, LSIRDY flag goes low after 6 LSI oscillator
  *         clock cycles. 
  * @retval None
  */
void RCC_LSICmd(FunctionalState NewState)
{
20000250:	b580      	push	{r7, lr}
20000252:	b082      	sub	sp, #8
20000254:	af00      	add	r7, sp, #0
20000256:	0002      	movs	r2, r0
20000258:	1dfb      	adds	r3, r7, #7
2000025a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CSR_LSION_BB = (uint32_t)NewState;
2000025c:	4b03      	ldr	r3, [pc, #12]	; (2000026c <RCC_LSICmd+0x1c>)
2000025e:	1dfa      	adds	r2, r7, #7
20000260:	7812      	ldrb	r2, [r2, #0]
20000262:	601a      	str	r2, [r3, #0]
}
20000264:	46c0      	nop			; (mov r8, r8)
20000266:	46bd      	mov	sp, r7
20000268:	b002      	add	sp, #8
2000026a:	bd80      	pop	{r7, pc}
2000026c:	42470e80 	submi	r0, r7, #128, 28	; 0x800

20000270 <RCC_PLLConfig>:
  *         correctly.
  *   
  * @retval None
  */
void RCC_PLLConfig(uint32_t RCC_PLLSource, uint32_t PLLM, uint32_t PLLN, uint32_t PLLP, uint32_t PLLQ)
{
20000270:	b580      	push	{r7, lr}
20000272:	b084      	sub	sp, #16
20000274:	af00      	add	r7, sp, #0
20000276:	60f8      	str	r0, [r7, #12]
20000278:	60b9      	str	r1, [r7, #8]
2000027a:	607a      	str	r2, [r7, #4]
2000027c:	603b      	str	r3, [r7, #0]
  assert_param(IS_RCC_PLLM_VALUE(PLLM));
  assert_param(IS_RCC_PLLN_VALUE(PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLP));
  assert_param(IS_RCC_PLLQ_VALUE(PLLQ));

  RCC->PLLCFGR = PLLM | (PLLN << 6) | (((PLLP >> 1) -1) << 16) | (RCC_PLLSource) |
2000027e:	687b      	ldr	r3, [r7, #4]
20000280:	019a      	lsls	r2, r3, #6
20000282:	68bb      	ldr	r3, [r7, #8]
20000284:	431a      	orrs	r2, r3
20000286:	683b      	ldr	r3, [r7, #0]
20000288:	085b      	lsrs	r3, r3, #1
2000028a:	3b01      	subs	r3, #1
2000028c:	041b      	lsls	r3, r3, #16
2000028e:	431a      	orrs	r2, r3
20000290:	68fb      	ldr	r3, [r7, #12]
20000292:	431a      	orrs	r2, r3
20000294:	0011      	movs	r1, r2
                 (PLLQ << 24);
20000296:	69bb      	ldr	r3, [r7, #24]
20000298:	061a      	lsls	r2, r3, #24
  RCC->PLLCFGR = PLLM | (PLLN << 6) | (((PLLP >> 1) -1) << 16) | (RCC_PLLSource) |
2000029a:	4b03      	ldr	r3, [pc, #12]	; (200002a8 <RCC_PLLConfig+0x38>)
2000029c:	430a      	orrs	r2, r1
2000029e:	605a      	str	r2, [r3, #4]
}
200002a0:	46c0      	nop			; (mov r8, r8)
200002a2:	46bd      	mov	sp, r7
200002a4:	b004      	add	sp, #16
200002a6:	bd80      	pop	{r7, pc}
200002a8:	40023800 	andmi	r3, r2, r0, lsl #16

200002ac <RCC_PLLCmd>:
  * @note   The main PLL is disabled by hardware when entering STOP and STANDBY modes.
  * @param  NewState: new state of the main PLL. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_PLLCmd(FunctionalState NewState)
{
200002ac:	b580      	push	{r7, lr}
200002ae:	b082      	sub	sp, #8
200002b0:	af00      	add	r7, sp, #0
200002b2:	0002      	movs	r2, r0
200002b4:	1dfb      	adds	r3, r7, #7
200002b6:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_PLLON_BB = (uint32_t)NewState;
200002b8:	4b03      	ldr	r3, [pc, #12]	; (200002c8 <RCC_PLLCmd+0x1c>)
200002ba:	1dfa      	adds	r2, r7, #7
200002bc:	7812      	ldrb	r2, [r2, #0]
200002be:	601a      	str	r2, [r3, #0]
}
200002c0:	46c0      	nop			; (mov r8, r8)
200002c2:	46bd      	mov	sp, r7
200002c4:	b002      	add	sp, #8
200002c6:	bd80      	pop	{r7, pc}
200002c8:	42470060 	submi	r0, r7, #96	; 0x60

200002cc <RCC_PLLI2SConfig>:
  *         on the I2S clock frequency.
  *   
  * @retval None
  */
void RCC_PLLI2SConfig(uint32_t PLLI2SN, uint32_t PLLI2SR)
{
200002cc:	b580      	push	{r7, lr}
200002ce:	b082      	sub	sp, #8
200002d0:	af00      	add	r7, sp, #0
200002d2:	6078      	str	r0, [r7, #4]
200002d4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RCC_PLLI2SN_VALUE(PLLI2SN));
  assert_param(IS_RCC_PLLI2SR_VALUE(PLLI2SR));

  RCC->PLLI2SCFGR = (PLLI2SN << 6) | (PLLI2SR << 28);
200002d6:	687b      	ldr	r3, [r7, #4]
200002d8:	019a      	lsls	r2, r3, #6
200002da:	683b      	ldr	r3, [r7, #0]
200002dc:	071b      	lsls	r3, r3, #28
200002de:	4904      	ldr	r1, [pc, #16]	; (200002f0 <RCC_PLLI2SConfig+0x24>)
200002e0:	4313      	orrs	r3, r2
200002e2:	2284      	movs	r2, #132	; 0x84
200002e4:	508b      	str	r3, [r1, r2]
}
200002e6:	46c0      	nop			; (mov r8, r8)
200002e8:	46bd      	mov	sp, r7
200002ea:	b002      	add	sp, #8
200002ec:	bd80      	pop	{r7, pc}
200002ee:	46c0      	nop			; (mov r8, r8)
200002f0:	40023800 	andmi	r3, r2, r0, lsl #16

200002f4 <RCC_PLLI2SCmd>:
  * @note   The PLLI2S is disabled by hardware when entering STOP and STANDBY modes.  
  * @param  NewState: new state of the PLLI2S. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_PLLI2SCmd(FunctionalState NewState)
{
200002f4:	b580      	push	{r7, lr}
200002f6:	b082      	sub	sp, #8
200002f8:	af00      	add	r7, sp, #0
200002fa:	0002      	movs	r2, r0
200002fc:	1dfb      	adds	r3, r7, #7
200002fe:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_PLLI2SON_BB = (uint32_t)NewState;
20000300:	4b03      	ldr	r3, [pc, #12]	; (20000310 <RCC_PLLI2SCmd+0x1c>)
20000302:	1dfa      	adds	r2, r7, #7
20000304:	7812      	ldrb	r2, [r2, #0]
20000306:	601a      	str	r2, [r3, #0]
}
20000308:	46c0      	nop			; (mov r8, r8)
2000030a:	46bd      	mov	sp, r7
2000030c:	b002      	add	sp, #8
2000030e:	bd80      	pop	{r7, pc}
20000310:	42470068 	submi	r0, r7, #104	; 0x68

20000314 <RCC_PLLSAIConfig>:
  *          This parameter must be a number between 2 and 7.
  *   
  * @retval None
  */
void RCC_PLLSAIConfig(uint32_t PLLSAIN, uint32_t PLLSAIQ, uint32_t PLLSAIR)
{
20000314:	b580      	push	{r7, lr}
20000316:	b084      	sub	sp, #16
20000318:	af00      	add	r7, sp, #0
2000031a:	60f8      	str	r0, [r7, #12]
2000031c:	60b9      	str	r1, [r7, #8]
2000031e:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_PLLSAIN_VALUE(PLLSAIN));
  assert_param(IS_RCC_PLLSAIR_VALUE(PLLSAIR));
  assert_param(IS_RCC_PLLSAIQ_VALUE(PLLSAIQ));
  
  RCC->PLLSAICFGR = (PLLSAIN << 6) | (PLLSAIQ << 24) | (PLLSAIR << 28);
20000320:	68fb      	ldr	r3, [r7, #12]
20000322:	019a      	lsls	r2, r3, #6
20000324:	68bb      	ldr	r3, [r7, #8]
20000326:	061b      	lsls	r3, r3, #24
20000328:	431a      	orrs	r2, r3
2000032a:	687b      	ldr	r3, [r7, #4]
2000032c:	071b      	lsls	r3, r3, #28
2000032e:	4904      	ldr	r1, [pc, #16]	; (20000340 <RCC_PLLSAIConfig+0x2c>)
20000330:	4313      	orrs	r3, r2
20000332:	2288      	movs	r2, #136	; 0x88
20000334:	508b      	str	r3, [r1, r2]
}
20000336:	46c0      	nop			; (mov r8, r8)
20000338:	46bd      	mov	sp, r7
2000033a:	b004      	add	sp, #16
2000033c:	bd80      	pop	{r7, pc}
2000033e:	46c0      	nop			; (mov r8, r8)
20000340:	40023800 	andmi	r3, r2, r0, lsl #16

20000344 <RCC_PLLSAICmd>:
  * @note   The PLLSAI is disabled by hardware when entering STOP and STANDBY modes.  
  * @param  NewState: new state of the PLLSAI. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_PLLSAICmd(FunctionalState NewState)
{
20000344:	b580      	push	{r7, lr}
20000346:	b082      	sub	sp, #8
20000348:	af00      	add	r7, sp, #0
2000034a:	0002      	movs	r2, r0
2000034c:	1dfb      	adds	r3, r7, #7
2000034e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_PLLSAION_BB = (uint32_t)NewState;
20000350:	4b03      	ldr	r3, [pc, #12]	; (20000360 <RCC_PLLSAICmd+0x1c>)
20000352:	1dfa      	adds	r2, r7, #7
20000354:	7812      	ldrb	r2, [r2, #0]
20000356:	601a      	str	r2, [r3, #0]
}
20000358:	46c0      	nop			; (mov r8, r8)
2000035a:	46bd      	mov	sp, r7
2000035c:	b002      	add	sp, #8
2000035e:	bd80      	pop	{r7, pc}
20000360:	42470070 	submi	r0, r7, #112	; 0x70

20000364 <RCC_ClockSecuritySystemCmd>:
  * @param  NewState: new state of the Clock Security System.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_ClockSecuritySystemCmd(FunctionalState NewState)
{
20000364:	b580      	push	{r7, lr}
20000366:	b082      	sub	sp, #8
20000368:	af00      	add	r7, sp, #0
2000036a:	0002      	movs	r2, r0
2000036c:	1dfb      	adds	r3, r7, #7
2000036e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_CSSON_BB = (uint32_t)NewState;
20000370:	4b03      	ldr	r3, [pc, #12]	; (20000380 <RCC_ClockSecuritySystemCmd+0x1c>)
20000372:	1dfa      	adds	r2, r7, #7
20000374:	7812      	ldrb	r2, [r2, #0]
20000376:	601a      	str	r2, [r3, #0]
}
20000378:	46c0      	nop			; (mov r8, r8)
2000037a:	46bd      	mov	sp, r7
2000037c:	b002      	add	sp, #8
2000037e:	bd80      	pop	{r7, pc}
20000380:	4247004c 	submi	r0, r7, #76	; 0x4c

20000384 <RCC_MCO1Config>:
  *            @arg RCC_MCO1Div_4: division by 4 applied to MCO1 clock
  *            @arg RCC_MCO1Div_5: division by 5 applied to MCO1 clock
  * @retval None
  */
void RCC_MCO1Config(uint32_t RCC_MCO1Source, uint32_t RCC_MCO1Div)
{
20000384:	b580      	push	{r7, lr}
20000386:	b084      	sub	sp, #16
20000388:	af00      	add	r7, sp, #0
2000038a:	6078      	str	r0, [r7, #4]
2000038c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
2000038e:	2300      	movs	r3, #0
20000390:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_MCO1SOURCE(RCC_MCO1Source));
  assert_param(IS_RCC_MCO1DIV(RCC_MCO1Div));  

  tmpreg = RCC->CFGR;
20000392:	4b0a      	ldr	r3, [pc, #40]	; (200003bc <RCC_MCO1Config+0x38>)
20000394:	689b      	ldr	r3, [r3, #8]
20000396:	60fb      	str	r3, [r7, #12]

  /* Clear MCO1[1:0] and MCO1PRE[2:0] bits */
  tmpreg &= CFGR_MCO1_RESET_MASK;
20000398:	68fb      	ldr	r3, [r7, #12]
2000039a:	4a09      	ldr	r2, [pc, #36]	; (200003c0 <RCC_MCO1Config+0x3c>)
2000039c:	4013      	ands	r3, r2
2000039e:	60fb      	str	r3, [r7, #12]

  /* Select MCO1 clock source and prescaler */
  tmpreg |= RCC_MCO1Source | RCC_MCO1Div;
200003a0:	687a      	ldr	r2, [r7, #4]
200003a2:	683b      	ldr	r3, [r7, #0]
200003a4:	4313      	orrs	r3, r2
200003a6:	68fa      	ldr	r2, [r7, #12]
200003a8:	4313      	orrs	r3, r2
200003aa:	60fb      	str	r3, [r7, #12]
  
  /* Store the new value */
  RCC->CFGR = tmpreg;
200003ac:	4b03      	ldr	r3, [pc, #12]	; (200003bc <RCC_MCO1Config+0x38>)
200003ae:	68fa      	ldr	r2, [r7, #12]
200003b0:	609a      	str	r2, [r3, #8]

#if defined(STM32F410xx)
  RCC_MCO1Cmd(ENABLE);
#endif /* STM32F410xx */   
}
200003b2:	46c0      	nop			; (mov r8, r8)
200003b4:	46bd      	mov	sp, r7
200003b6:	b004      	add	sp, #16
200003b8:	bd80      	pop	{r7, pc}
200003ba:	46c0      	nop			; (mov r8, r8)
200003bc:	40023800 	andmi	r3, r2, r0, lsl #16
200003c0:	f89fffff 			; <UNDEFINED> instruction: 0xf89fffff

200003c4 <RCC_MCO2Config>:
  * @note  For STM32F410xx devices to output I2SCLK clock on MCO2 you should have
  *        at last one of the SPI clocks enabled (SPI1, SPI2 or SPI5).
  * @retval None
  */
void RCC_MCO2Config(uint32_t RCC_MCO2Source, uint32_t RCC_MCO2Div)
{
200003c4:	b580      	push	{r7, lr}
200003c6:	b084      	sub	sp, #16
200003c8:	af00      	add	r7, sp, #0
200003ca:	6078      	str	r0, [r7, #4]
200003cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
200003ce:	2300      	movs	r3, #0
200003d0:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_MCO2SOURCE(RCC_MCO2Source));
  assert_param(IS_RCC_MCO2DIV(RCC_MCO2Div));
  
  tmpreg = RCC->CFGR;
200003d2:	4b0a      	ldr	r3, [pc, #40]	; (200003fc <RCC_MCO2Config+0x38>)
200003d4:	689b      	ldr	r3, [r3, #8]
200003d6:	60fb      	str	r3, [r7, #12]
  
  /* Clear MCO2 and MCO2PRE[2:0] bits */
  tmpreg &= CFGR_MCO2_RESET_MASK;
200003d8:	68fb      	ldr	r3, [r7, #12]
200003da:	015b      	lsls	r3, r3, #5
200003dc:	095b      	lsrs	r3, r3, #5
200003de:	60fb      	str	r3, [r7, #12]

  /* Select MCO2 clock source and prescaler */
  tmpreg |= RCC_MCO2Source | RCC_MCO2Div;
200003e0:	687a      	ldr	r2, [r7, #4]
200003e2:	683b      	ldr	r3, [r7, #0]
200003e4:	4313      	orrs	r3, r2
200003e6:	68fa      	ldr	r2, [r7, #12]
200003e8:	4313      	orrs	r3, r2
200003ea:	60fb      	str	r3, [r7, #12]
  
  /* Store the new value */
  RCC->CFGR = tmpreg;
200003ec:	4b03      	ldr	r3, [pc, #12]	; (200003fc <RCC_MCO2Config+0x38>)
200003ee:	68fa      	ldr	r2, [r7, #12]
200003f0:	609a      	str	r2, [r3, #8]

#if defined(STM32F410xx)
  RCC_MCO2Cmd(ENABLE);
#endif /* STM32F410xx */   
}
200003f2:	46c0      	nop			; (mov r8, r8)
200003f4:	46bd      	mov	sp, r7
200003f6:	b004      	add	sp, #16
200003f8:	bd80      	pop	{r7, pc}
200003fa:	46c0      	nop			; (mov r8, r8)
200003fc:	40023800 	andmi	r3, r2, r0, lsl #16

20000400 <RCC_SYSCLKConfig>:
  *            @arg RCC_SYSCLKSource_PLLCLK: PLL selected as system clock source (RCC_SYSCLKSource_PLLPCLK for STM32F446xx devices)
  *            @arg RCC_SYSCLKSource_PLLRCLK: PLL R selected as system clock source only for STM32F412xG, STM32F413_423xx and STM32F446xx devices
  * @retval None
  */
void RCC_SYSCLKConfig(uint32_t RCC_SYSCLKSource)
{
20000400:	b580      	push	{r7, lr}
20000402:	b084      	sub	sp, #16
20000404:	af00      	add	r7, sp, #0
20000406:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
20000408:	2300      	movs	r3, #0
2000040a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_SYSCLK_SOURCE(RCC_SYSCLKSource));

  tmpreg = RCC->CFGR;
2000040c:	4b08      	ldr	r3, [pc, #32]	; (20000430 <RCC_SYSCLKConfig+0x30>)
2000040e:	689b      	ldr	r3, [r3, #8]
20000410:	60fb      	str	r3, [r7, #12]

  /* Clear SW[1:0] bits */
  tmpreg &= ~RCC_CFGR_SW;
20000412:	68fb      	ldr	r3, [r7, #12]
20000414:	2203      	movs	r2, #3
20000416:	4393      	bics	r3, r2
20000418:	60fb      	str	r3, [r7, #12]

  /* Set SW[1:0] bits according to RCC_SYSCLKSource value */
  tmpreg |= RCC_SYSCLKSource;
2000041a:	68fa      	ldr	r2, [r7, #12]
2000041c:	687b      	ldr	r3, [r7, #4]
2000041e:	4313      	orrs	r3, r2
20000420:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;
20000422:	4b03      	ldr	r3, [pc, #12]	; (20000430 <RCC_SYSCLKConfig+0x30>)
20000424:	68fa      	ldr	r2, [r7, #12]
20000426:	609a      	str	r2, [r3, #8]
}
20000428:	46c0      	nop			; (mov r8, r8)
2000042a:	46bd      	mov	sp, r7
2000042c:	b004      	add	sp, #16
2000042e:	bd80      	pop	{r7, pc}
20000430:	40023800 	andmi	r3, r2, r0, lsl #16

20000434 <RCC_GetSYSCLKSource>:
  *              - 0x04: HSE used as system clock
  *              - 0x08: PLL used as system clock (PLL P for STM32F446xx devices)
  *              - 0x0C: PLL R used as system clock (only for STM32F412xG, STM32F413_423xx and STM32F446xx devices)
  */
uint8_t RCC_GetSYSCLKSource(void)
{
20000434:	b580      	push	{r7, lr}
20000436:	af00      	add	r7, sp, #0
  return ((uint8_t)(RCC->CFGR & RCC_CFGR_SWS));
20000438:	4b04      	ldr	r3, [pc, #16]	; (2000044c <RCC_GetSYSCLKSource+0x18>)
2000043a:	689b      	ldr	r3, [r3, #8]
2000043c:	b2db      	uxtb	r3, r3
2000043e:	220c      	movs	r2, #12
20000440:	4013      	ands	r3, r2
20000442:	b2db      	uxtb	r3, r3
}
20000444:	0018      	movs	r0, r3
20000446:	46bd      	mov	sp, r7
20000448:	bd80      	pop	{r7, pc}
2000044a:	46c0      	nop			; (mov r8, r8)
2000044c:	40023800 	andmi	r3, r2, r0, lsl #16

20000450 <RCC_HCLKConfig>:
  *            @arg RCC_SYSCLK_Div256: AHB clock = SYSCLK/256
  *            @arg RCC_SYSCLK_Div512: AHB clock = SYSCLK/512
  * @retval None
  */
void RCC_HCLKConfig(uint32_t RCC_SYSCLK)
{
20000450:	b580      	push	{r7, lr}
20000452:	b084      	sub	sp, #16
20000454:	af00      	add	r7, sp, #0
20000456:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
20000458:	2300      	movs	r3, #0
2000045a:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_HCLK(RCC_SYSCLK));

  tmpreg = RCC->CFGR;
2000045c:	4b08      	ldr	r3, [pc, #32]	; (20000480 <RCC_HCLKConfig+0x30>)
2000045e:	689b      	ldr	r3, [r3, #8]
20000460:	60fb      	str	r3, [r7, #12]

  /* Clear HPRE[3:0] bits */
  tmpreg &= ~RCC_CFGR_HPRE;
20000462:	68fb      	ldr	r3, [r7, #12]
20000464:	22f0      	movs	r2, #240	; 0xf0
20000466:	4393      	bics	r3, r2
20000468:	60fb      	str	r3, [r7, #12]

  /* Set HPRE[3:0] bits according to RCC_SYSCLK value */
  tmpreg |= RCC_SYSCLK;
2000046a:	68fa      	ldr	r2, [r7, #12]
2000046c:	687b      	ldr	r3, [r7, #4]
2000046e:	4313      	orrs	r3, r2
20000470:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;
20000472:	4b03      	ldr	r3, [pc, #12]	; (20000480 <RCC_HCLKConfig+0x30>)
20000474:	68fa      	ldr	r2, [r7, #12]
20000476:	609a      	str	r2, [r3, #8]
}
20000478:	46c0      	nop			; (mov r8, r8)
2000047a:	46bd      	mov	sp, r7
2000047c:	b004      	add	sp, #16
2000047e:	bd80      	pop	{r7, pc}
20000480:	40023800 	andmi	r3, r2, r0, lsl #16

20000484 <RCC_PCLK1Config>:
  *            @arg RCC_HCLK_Div8:  APB1 clock = HCLK/8
  *            @arg RCC_HCLK_Div16: APB1 clock = HCLK/16
  * @retval None
  */
void RCC_PCLK1Config(uint32_t RCC_HCLK)
{
20000484:	b580      	push	{r7, lr}
20000486:	b084      	sub	sp, #16
20000488:	af00      	add	r7, sp, #0
2000048a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
2000048c:	2300      	movs	r3, #0
2000048e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));

  tmpreg = RCC->CFGR;
20000490:	4b08      	ldr	r3, [pc, #32]	; (200004b4 <RCC_PCLK1Config+0x30>)
20000492:	689b      	ldr	r3, [r3, #8]
20000494:	60fb      	str	r3, [r7, #12]

  /* Clear PPRE1[2:0] bits */
  tmpreg &= ~RCC_CFGR_PPRE1;
20000496:	68fb      	ldr	r3, [r7, #12]
20000498:	4a07      	ldr	r2, [pc, #28]	; (200004b8 <RCC_PCLK1Config+0x34>)
2000049a:	4013      	ands	r3, r2
2000049c:	60fb      	str	r3, [r7, #12]

  /* Set PPRE1[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK;
2000049e:	68fa      	ldr	r2, [r7, #12]
200004a0:	687b      	ldr	r3, [r7, #4]
200004a2:	4313      	orrs	r3, r2
200004a4:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;
200004a6:	4b03      	ldr	r3, [pc, #12]	; (200004b4 <RCC_PCLK1Config+0x30>)
200004a8:	68fa      	ldr	r2, [r7, #12]
200004aa:	609a      	str	r2, [r3, #8]
}
200004ac:	46c0      	nop			; (mov r8, r8)
200004ae:	46bd      	mov	sp, r7
200004b0:	b004      	add	sp, #16
200004b2:	bd80      	pop	{r7, pc}
200004b4:	40023800 	andmi	r3, r2, r0, lsl #16
200004b8:	ffffe3ff 			; <UNDEFINED> instruction: 0xffffe3ff

200004bc <RCC_PCLK2Config>:
  *            @arg RCC_HCLK_Div8:  APB2 clock = HCLK/8
  *            @arg RCC_HCLK_Div16: APB2 clock = HCLK/16
  * @retval None
  */
void RCC_PCLK2Config(uint32_t RCC_HCLK)
{
200004bc:	b580      	push	{r7, lr}
200004be:	b084      	sub	sp, #16
200004c0:	af00      	add	r7, sp, #0
200004c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
200004c4:	2300      	movs	r3, #0
200004c6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));

  tmpreg = RCC->CFGR;
200004c8:	4b09      	ldr	r3, [pc, #36]	; (200004f0 <RCC_PCLK2Config+0x34>)
200004ca:	689b      	ldr	r3, [r3, #8]
200004cc:	60fb      	str	r3, [r7, #12]

  /* Clear PPRE2[2:0] bits */
  tmpreg &= ~RCC_CFGR_PPRE2;
200004ce:	68fb      	ldr	r3, [r7, #12]
200004d0:	4a08      	ldr	r2, [pc, #32]	; (200004f4 <RCC_PCLK2Config+0x38>)
200004d2:	4013      	ands	r3, r2
200004d4:	60fb      	str	r3, [r7, #12]

  /* Set PPRE2[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK << 3;
200004d6:	687b      	ldr	r3, [r7, #4]
200004d8:	00db      	lsls	r3, r3, #3
200004da:	68fa      	ldr	r2, [r7, #12]
200004dc:	4313      	orrs	r3, r2
200004de:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;
200004e0:	4b03      	ldr	r3, [pc, #12]	; (200004f0 <RCC_PCLK2Config+0x34>)
200004e2:	68fa      	ldr	r2, [r7, #12]
200004e4:	609a      	str	r2, [r3, #8]
}
200004e6:	46c0      	nop			; (mov r8, r8)
200004e8:	46bd      	mov	sp, r7
200004ea:	b004      	add	sp, #16
200004ec:	bd80      	pop	{r7, pc}
200004ee:	46c0      	nop			; (mov r8, r8)
200004f0:	40023800 	andmi	r3, r2, r0, lsl #16
200004f4:	ffff1fff 			; <UNDEFINED> instruction: 0xffff1fff

200004f8 <RCC_GetClocksFreq>:
  *         configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
200004f8:	b580      	push	{r7, lr}
200004fa:	b088      	sub	sp, #32
200004fc:	af00      	add	r7, sp, #0
200004fe:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
20000500:	2300      	movs	r3, #0
20000502:	61bb      	str	r3, [r7, #24]
20000504:	2300      	movs	r3, #0
20000506:	617b      	str	r3, [r7, #20]
20000508:	2300      	movs	r3, #0
2000050a:	61fb      	str	r3, [r7, #28]
2000050c:	2302      	movs	r3, #2
2000050e:	613b      	str	r3, [r7, #16]
20000510:	2300      	movs	r3, #0
20000512:	60fb      	str	r3, [r7, #12]
20000514:	2302      	movs	r3, #2
20000516:	60bb      	str	r3, [r7, #8]
#if defined(STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F446xx)  
  uint32_t pllr = 2;
#endif /* STM32F412xG || STM32F413_423xx || STM32F446xx */
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
20000518:	4b49      	ldr	r3, [pc, #292]	; (20000640 <RCC_GetClocksFreq+0x148>)
2000051a:	689b      	ldr	r3, [r3, #8]
2000051c:	220c      	movs	r2, #12
2000051e:	4013      	ands	r3, r2
20000520:	61bb      	str	r3, [r7, #24]
  
  switch (tmp)
20000522:	69bb      	ldr	r3, [r7, #24]
20000524:	2b04      	cmp	r3, #4
20000526:	d007      	beq.n	20000538 <RCC_GetClocksFreq+0x40>
20000528:	2b08      	cmp	r3, #8
2000052a:	d009      	beq.n	20000540 <RCC_GetClocksFreq+0x48>
2000052c:	2b00      	cmp	r3, #0
2000052e:	d141      	bne.n	200005b4 <RCC_GetClocksFreq+0xbc>
  {
  case 0x00:  /* HSI used as system clock source */
    RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
20000530:	687b      	ldr	r3, [r7, #4]
20000532:	4a44      	ldr	r2, [pc, #272]	; (20000644 <RCC_GetClocksFreq+0x14c>)
20000534:	601a      	str	r2, [r3, #0]
    break;
20000536:	e041      	b.n	200005bc <RCC_GetClocksFreq+0xc4>
  case 0x04:  /* HSE used as system clock  source */
    RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
20000538:	687b      	ldr	r3, [r7, #4]
2000053a:	4a43      	ldr	r2, [pc, #268]	; (20000648 <RCC_GetClocksFreq+0x150>)
2000053c:	601a      	str	r2, [r3, #0]
    break;
2000053e:	e03d      	b.n	200005bc <RCC_GetClocksFreq+0xc4>
  case 0x08:  /* PLL P used as system clock  source */
    
    /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLP
    */    
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
20000540:	4b3f      	ldr	r3, [pc, #252]	; (20000640 <RCC_GetClocksFreq+0x148>)
20000542:	685b      	ldr	r3, [r3, #4]
20000544:	0d9b      	lsrs	r3, r3, #22
20000546:	2201      	movs	r2, #1
20000548:	4013      	ands	r3, r2
2000054a:	60fb      	str	r3, [r7, #12]
    pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
2000054c:	4b3c      	ldr	r3, [pc, #240]	; (20000640 <RCC_GetClocksFreq+0x148>)
2000054e:	685b      	ldr	r3, [r3, #4]
20000550:	223f      	movs	r2, #63	; 0x3f
20000552:	4013      	ands	r3, r2
20000554:	60bb      	str	r3, [r7, #8]
    
    if (pllsource != 0)
20000556:	68fb      	ldr	r3, [r7, #12]
20000558:	2b00      	cmp	r3, #0
2000055a:	d00d      	beq.n	20000578 <RCC_GetClocksFreq+0x80>
    {
      /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
2000055c:	68b9      	ldr	r1, [r7, #8]
2000055e:	483a      	ldr	r0, [pc, #232]	; (20000648 <RCC_GetClocksFreq+0x150>)
20000560:	f002 f86a 	bl	20002638 <__udivsi3>
20000564:	0003      	movs	r3, r0
20000566:	001a      	movs	r2, r3
20000568:	4b35      	ldr	r3, [pc, #212]	; (20000640 <RCC_GetClocksFreq+0x148>)
2000056a:	685b      	ldr	r3, [r3, #4]
2000056c:	099b      	lsrs	r3, r3, #6
2000056e:	05db      	lsls	r3, r3, #23
20000570:	0ddb      	lsrs	r3, r3, #23
20000572:	4353      	muls	r3, r2
20000574:	61fb      	str	r3, [r7, #28]
20000576:	e00c      	b.n	20000592 <RCC_GetClocksFreq+0x9a>
    }
    else
    {
      /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
20000578:	68b9      	ldr	r1, [r7, #8]
2000057a:	4832      	ldr	r0, [pc, #200]	; (20000644 <RCC_GetClocksFreq+0x14c>)
2000057c:	f002 f85c 	bl	20002638 <__udivsi3>
20000580:	0003      	movs	r3, r0
20000582:	001a      	movs	r2, r3
20000584:	4b2e      	ldr	r3, [pc, #184]	; (20000640 <RCC_GetClocksFreq+0x148>)
20000586:	685b      	ldr	r3, [r3, #4]
20000588:	099b      	lsrs	r3, r3, #6
2000058a:	05db      	lsls	r3, r3, #23
2000058c:	0ddb      	lsrs	r3, r3, #23
2000058e:	4353      	muls	r3, r2
20000590:	61fb      	str	r3, [r7, #28]
    }
    
    pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
20000592:	4b2b      	ldr	r3, [pc, #172]	; (20000640 <RCC_GetClocksFreq+0x148>)
20000594:	685b      	ldr	r3, [r3, #4]
20000596:	0c1b      	lsrs	r3, r3, #16
20000598:	2203      	movs	r2, #3
2000059a:	4013      	ands	r3, r2
2000059c:	3301      	adds	r3, #1
2000059e:	005b      	lsls	r3, r3, #1
200005a0:	613b      	str	r3, [r7, #16]
    RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
200005a2:	6939      	ldr	r1, [r7, #16]
200005a4:	69f8      	ldr	r0, [r7, #28]
200005a6:	f002 f847 	bl	20002638 <__udivsi3>
200005aa:	0003      	movs	r3, r0
200005ac:	001a      	movs	r2, r3
200005ae:	687b      	ldr	r3, [r7, #4]
200005b0:	601a      	str	r2, [r3, #0]
    break;
200005b2:	e003      	b.n	200005bc <RCC_GetClocksFreq+0xc4>
    RCC_Clocks->SYSCLK_Frequency = pllvco/pllr;    
    break;
#endif /* STM32F412xG || STM32F413_423xx || STM32F446xx */
    
  default:
    RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
200005b4:	687b      	ldr	r3, [r7, #4]
200005b6:	4a23      	ldr	r2, [pc, #140]	; (20000644 <RCC_GetClocksFreq+0x14c>)
200005b8:	601a      	str	r2, [r3, #0]
    break;
200005ba:	46c0      	nop			; (mov r8, r8)
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/
  
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
200005bc:	4b20      	ldr	r3, [pc, #128]	; (20000640 <RCC_GetClocksFreq+0x148>)
200005be:	689b      	ldr	r3, [r3, #8]
200005c0:	22f0      	movs	r2, #240	; 0xf0
200005c2:	4013      	ands	r3, r2
200005c4:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 4;
200005c6:	69bb      	ldr	r3, [r7, #24]
200005c8:	091b      	lsrs	r3, r3, #4
200005ca:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
200005cc:	4a1f      	ldr	r2, [pc, #124]	; (2000064c <RCC_GetClocksFreq+0x154>)
200005ce:	69bb      	ldr	r3, [r7, #24]
200005d0:	18d3      	adds	r3, r2, r3
200005d2:	781b      	ldrb	r3, [r3, #0]
200005d4:	b2db      	uxtb	r3, r3
200005d6:	617b      	str	r3, [r7, #20]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
200005d8:	687b      	ldr	r3, [r7, #4]
200005da:	681a      	ldr	r2, [r3, #0]
200005dc:	697b      	ldr	r3, [r7, #20]
200005de:	40da      	lsrs	r2, r3
200005e0:	687b      	ldr	r3, [r7, #4]
200005e2:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
200005e4:	4b16      	ldr	r3, [pc, #88]	; (20000640 <RCC_GetClocksFreq+0x148>)
200005e6:	689a      	ldr	r2, [r3, #8]
200005e8:	23e0      	movs	r3, #224	; 0xe0
200005ea:	015b      	lsls	r3, r3, #5
200005ec:	4013      	ands	r3, r2
200005ee:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 10;
200005f0:	69bb      	ldr	r3, [r7, #24]
200005f2:	0a9b      	lsrs	r3, r3, #10
200005f4:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
200005f6:	4a15      	ldr	r2, [pc, #84]	; (2000064c <RCC_GetClocksFreq+0x154>)
200005f8:	69bb      	ldr	r3, [r7, #24]
200005fa:	18d3      	adds	r3, r2, r3
200005fc:	781b      	ldrb	r3, [r3, #0]
200005fe:	b2db      	uxtb	r3, r3
20000600:	617b      	str	r3, [r7, #20]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
20000602:	687b      	ldr	r3, [r7, #4]
20000604:	685a      	ldr	r2, [r3, #4]
20000606:	697b      	ldr	r3, [r7, #20]
20000608:	40da      	lsrs	r2, r3
2000060a:	687b      	ldr	r3, [r7, #4]
2000060c:	609a      	str	r2, [r3, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
2000060e:	4b0c      	ldr	r3, [pc, #48]	; (20000640 <RCC_GetClocksFreq+0x148>)
20000610:	689a      	ldr	r2, [r3, #8]
20000612:	23e0      	movs	r3, #224	; 0xe0
20000614:	021b      	lsls	r3, r3, #8
20000616:	4013      	ands	r3, r2
20000618:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 13;
2000061a:	69bb      	ldr	r3, [r7, #24]
2000061c:	0b5b      	lsrs	r3, r3, #13
2000061e:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
20000620:	4a0a      	ldr	r2, [pc, #40]	; (2000064c <RCC_GetClocksFreq+0x154>)
20000622:	69bb      	ldr	r3, [r7, #24]
20000624:	18d3      	adds	r3, r2, r3
20000626:	781b      	ldrb	r3, [r3, #0]
20000628:	b2db      	uxtb	r3, r3
2000062a:	617b      	str	r3, [r7, #20]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
2000062c:	687b      	ldr	r3, [r7, #4]
2000062e:	685a      	ldr	r2, [r3, #4]
20000630:	697b      	ldr	r3, [r7, #20]
20000632:	40da      	lsrs	r2, r3
20000634:	687b      	ldr	r3, [r7, #4]
20000636:	60da      	str	r2, [r3, #12]
}
20000638:	46c0      	nop			; (mov r8, r8)
2000063a:	46bd      	mov	sp, r7
2000063c:	b008      	add	sp, #32
2000063e:	bd80      	pop	{r7, pc}
20000640:	40023800 	andmi	r3, r2, r0, lsl #16
20000644:	00f42400 	rscseq	r2, r4, r0, lsl #8
20000648:	017d7840 	cmneq	sp, r0, asr #16
2000064c:	20002754 	andcs	r2, r0, r4, asr r7

20000650 <RCC_RTCCLKConfig>:
  *         RTC clock source).
  *  
  * @retval None
  */
void RCC_RTCCLKConfig(uint32_t RCC_RTCCLKSource)
{
20000650:	b580      	push	{r7, lr}
20000652:	b084      	sub	sp, #16
20000654:	af00      	add	r7, sp, #0
20000656:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
20000658:	2300      	movs	r3, #0
2000065a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_RTCCLK_SOURCE(RCC_RTCCLKSource));

  if ((RCC_RTCCLKSource & 0x00000300) == 0x00000300)
2000065c:	687a      	ldr	r2, [r7, #4]
2000065e:	23c0      	movs	r3, #192	; 0xc0
20000660:	009b      	lsls	r3, r3, #2
20000662:	401a      	ands	r2, r3
20000664:	23c0      	movs	r3, #192	; 0xc0
20000666:	009b      	lsls	r3, r3, #2
20000668:	429a      	cmp	r2, r3
2000066a:	d10f      	bne.n	2000068c <RCC_RTCCLKConfig+0x3c>
  { /* If HSE is selected as RTC clock source, configure HSE division factor for RTC clock */
    tmpreg = RCC->CFGR;
2000066c:	4b0d      	ldr	r3, [pc, #52]	; (200006a4 <RCC_RTCCLKConfig+0x54>)
2000066e:	689b      	ldr	r3, [r3, #8]
20000670:	60fb      	str	r3, [r7, #12]

    /* Clear RTCPRE[4:0] bits */
    tmpreg &= ~RCC_CFGR_RTCPRE;
20000672:	68fb      	ldr	r3, [r7, #12]
20000674:	4a0c      	ldr	r2, [pc, #48]	; (200006a8 <RCC_RTCCLKConfig+0x58>)
20000676:	4013      	ands	r3, r2
20000678:	60fb      	str	r3, [r7, #12]

    /* Configure HSE division factor for RTC clock */
    tmpreg |= (RCC_RTCCLKSource & 0xFFFFCFF);
2000067a:	687b      	ldr	r3, [r7, #4]
2000067c:	4a0b      	ldr	r2, [pc, #44]	; (200006ac <RCC_RTCCLKConfig+0x5c>)
2000067e:	4013      	ands	r3, r2
20000680:	68fa      	ldr	r2, [r7, #12]
20000682:	4313      	orrs	r3, r2
20000684:	60fb      	str	r3, [r7, #12]

    /* Store the new value */
    RCC->CFGR = tmpreg;
20000686:	4b07      	ldr	r3, [pc, #28]	; (200006a4 <RCC_RTCCLKConfig+0x54>)
20000688:	68fa      	ldr	r2, [r7, #12]
2000068a:	609a      	str	r2, [r3, #8]
  }
    
  /* Select the RTC clock source */
  RCC->BDCR |= (RCC_RTCCLKSource & 0x00000FFF);
2000068c:	4b05      	ldr	r3, [pc, #20]	; (200006a4 <RCC_RTCCLKConfig+0x54>)
2000068e:	6f19      	ldr	r1, [r3, #112]	; 0x70
20000690:	687b      	ldr	r3, [r7, #4]
20000692:	051b      	lsls	r3, r3, #20
20000694:	0d1a      	lsrs	r2, r3, #20
20000696:	4b03      	ldr	r3, [pc, #12]	; (200006a4 <RCC_RTCCLKConfig+0x54>)
20000698:	430a      	orrs	r2, r1
2000069a:	671a      	str	r2, [r3, #112]	; 0x70
}
2000069c:	46c0      	nop			; (mov r8, r8)
2000069e:	46bd      	mov	sp, r7
200006a0:	b004      	add	sp, #16
200006a2:	bd80      	pop	{r7, pc}
200006a4:	40023800 	andmi	r3, r2, r0, lsl #16
200006a8:	ffe0ffff 			; <UNDEFINED> instruction: 0xffe0ffff
200006ac:	0ffffcff 	svceq	0x00fffcff

200006b0 <RCC_RTCCLKCmd>:
  *         using the RCC_RTCCLKConfig function.
  * @param  NewState: new state of the RTC clock. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_RTCCLKCmd(FunctionalState NewState)
{
200006b0:	b580      	push	{r7, lr}
200006b2:	b082      	sub	sp, #8
200006b4:	af00      	add	r7, sp, #0
200006b6:	0002      	movs	r2, r0
200006b8:	1dfb      	adds	r3, r7, #7
200006ba:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) BDCR_RTCEN_BB = (uint32_t)NewState;
200006bc:	4b03      	ldr	r3, [pc, #12]	; (200006cc <RCC_RTCCLKCmd+0x1c>)
200006be:	1dfa      	adds	r2, r7, #7
200006c0:	7812      	ldrb	r2, [r2, #0]
200006c2:	601a      	str	r2, [r3, #0]
}
200006c4:	46c0      	nop			; (mov r8, r8)
200006c6:	46bd      	mov	sp, r7
200006c8:	b002      	add	sp, #8
200006ca:	bd80      	pop	{r7, pc}
200006cc:	42470e3c 	submi	r0, r7, #60, 28	; 0x3c0

200006d0 <RCC_BackupResetCmd>:
  * @param  NewState: new state of the Backup domain reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_BackupResetCmd(FunctionalState NewState)
{
200006d0:	b580      	push	{r7, lr}
200006d2:	b082      	sub	sp, #8
200006d4:	af00      	add	r7, sp, #0
200006d6:	0002      	movs	r2, r0
200006d8:	1dfb      	adds	r3, r7, #7
200006da:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) BDCR_BDRST_BB = (uint32_t)NewState;
200006dc:	4b03      	ldr	r3, [pc, #12]	; (200006ec <RCC_BackupResetCmd+0x1c>)
200006de:	1dfa      	adds	r2, r7, #7
200006e0:	7812      	ldrb	r2, [r2, #0]
200006e2:	601a      	str	r2, [r3, #0]
}
200006e4:	46c0      	nop			; (mov r8, r8)
200006e6:	46bd      	mov	sp, r7
200006e8:	b002      	add	sp, #8
200006ea:	bd80      	pop	{r7, pc}
200006ec:	42470e40 	submi	r0, r7, #64, 28	; 0x400

200006f0 <RCC_I2SCLKConfig>:
  *            @arg RCC_I2S2CLKSource_Ext: External clock mapped on the I2S_CKIN pin
  *                                        used as I2S clock source
  * @retval None
  */
void RCC_I2SCLKConfig(uint32_t RCC_I2SCLKSource)
{
200006f0:	b580      	push	{r7, lr}
200006f2:	b082      	sub	sp, #8
200006f4:	af00      	add	r7, sp, #0
200006f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_I2SCLK_SOURCE(RCC_I2SCLKSource));

  *(__IO uint32_t *) CFGR_I2SSRC_BB = RCC_I2SCLKSource;  
200006f8:	4b03      	ldr	r3, [pc, #12]	; (20000708 <RCC_I2SCLKConfig+0x18>)
200006fa:	687a      	ldr	r2, [r7, #4]
200006fc:	601a      	str	r2, [r3, #0]
}
200006fe:	46c0      	nop			; (mov r8, r8)
20000700:	46bd      	mov	sp, r7
20000702:	b002      	add	sp, #8
20000704:	bd80      	pop	{r7, pc}
20000706:	46c0      	nop			; (mov r8, r8)
20000708:	4247015c 	submi	r0, r7, #92, 2

2000070c <RCC_SAIBlockACLKConfig>:
  *            @arg RCC_SAIACLKSource_Ext: External clock mapped on the I2S_CKIN pin
  *                                        used as SAI1 Block A clock
  * @retval None
  */
void RCC_SAIBlockACLKConfig(uint32_t RCC_SAIBlockACLKSource)
{
2000070c:	b580      	push	{r7, lr}
2000070e:	b084      	sub	sp, #16
20000710:	af00      	add	r7, sp, #0
20000712:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
20000714:	2300      	movs	r3, #0
20000716:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_SAIACLK_SOURCE(RCC_SAIBlockACLKSource));
  
  tmpreg = RCC->DCKCFGR;
20000718:	4a09      	ldr	r2, [pc, #36]	; (20000740 <RCC_SAIBlockACLKConfig+0x34>)
2000071a:	238c      	movs	r3, #140	; 0x8c
2000071c:	58d3      	ldr	r3, [r2, r3]
2000071e:	60fb      	str	r3, [r7, #12]

  /* Clear RCC_DCKCFGR_SAI1ASRC[1:0] bits */
  tmpreg &= ~RCC_DCKCFGR_SAI1ASRC;
20000720:	68fb      	ldr	r3, [r7, #12]
20000722:	4a08      	ldr	r2, [pc, #32]	; (20000744 <RCC_SAIBlockACLKConfig+0x38>)
20000724:	4013      	ands	r3, r2
20000726:	60fb      	str	r3, [r7, #12]

  /* Set SAI Block A source selection value */
  tmpreg |= RCC_SAIBlockACLKSource;
20000728:	68fa      	ldr	r2, [r7, #12]
2000072a:	687b      	ldr	r3, [r7, #4]
2000072c:	4313      	orrs	r3, r2
2000072e:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->DCKCFGR = tmpreg;
20000730:	4903      	ldr	r1, [pc, #12]	; (20000740 <RCC_SAIBlockACLKConfig+0x34>)
20000732:	228c      	movs	r2, #140	; 0x8c
20000734:	68fb      	ldr	r3, [r7, #12]
20000736:	508b      	str	r3, [r1, r2]
}
20000738:	46c0      	nop			; (mov r8, r8)
2000073a:	46bd      	mov	sp, r7
2000073c:	b004      	add	sp, #16
2000073e:	bd80      	pop	{r7, pc}
20000740:	40023800 	andmi	r3, r2, r0, lsl #16
20000744:	ffcfffff 			; <UNDEFINED> instruction: 0xffcfffff

20000748 <RCC_SAIBlockBCLKConfig>:
  *            @arg RCC_SAIBCLKSource_Ext: External clock mapped on the I2S_CKIN pin
  *                                        used as SAI1 Block B clock
  * @retval None
  */
void RCC_SAIBlockBCLKConfig(uint32_t RCC_SAIBlockBCLKSource)
{
20000748:	b580      	push	{r7, lr}
2000074a:	b084      	sub	sp, #16
2000074c:	af00      	add	r7, sp, #0
2000074e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
20000750:	2300      	movs	r3, #0
20000752:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_SAIBCLK_SOURCE(RCC_SAIBlockBCLKSource));
  
  tmpreg = RCC->DCKCFGR;
20000754:	4a09      	ldr	r2, [pc, #36]	; (2000077c <RCC_SAIBlockBCLKConfig+0x34>)
20000756:	238c      	movs	r3, #140	; 0x8c
20000758:	58d3      	ldr	r3, [r2, r3]
2000075a:	60fb      	str	r3, [r7, #12]

  /* Clear RCC_DCKCFGR_SAI1BSRC[1:0] bits */
  tmpreg &= ~RCC_DCKCFGR_SAI1BSRC;
2000075c:	68fb      	ldr	r3, [r7, #12]
2000075e:	4a08      	ldr	r2, [pc, #32]	; (20000780 <RCC_SAIBlockBCLKConfig+0x38>)
20000760:	4013      	ands	r3, r2
20000762:	60fb      	str	r3, [r7, #12]

  /* Set SAI Block B source selection value */
  tmpreg |= RCC_SAIBlockBCLKSource;
20000764:	68fa      	ldr	r2, [r7, #12]
20000766:	687b      	ldr	r3, [r7, #4]
20000768:	4313      	orrs	r3, r2
2000076a:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->DCKCFGR = tmpreg;
2000076c:	4903      	ldr	r1, [pc, #12]	; (2000077c <RCC_SAIBlockBCLKConfig+0x34>)
2000076e:	228c      	movs	r2, #140	; 0x8c
20000770:	68fb      	ldr	r3, [r7, #12]
20000772:	508b      	str	r3, [r1, r2]
}
20000774:	46c0      	nop			; (mov r8, r8)
20000776:	46bd      	mov	sp, r7
20000778:	b004      	add	sp, #16
2000077a:	bd80      	pop	{r7, pc}
2000077c:	40023800 	andmi	r3, r2, r0, lsl #16
20000780:	ff3fffff 			; <UNDEFINED> instruction: 0xff3fffff

20000784 <RCC_SAIPLLI2SClkDivConfig>:
  *          SAI1 clock frequency = f(PLLI2S_Q) / RCC_PLLI2SDivQ 
  *              
  * @retval None
  */
void RCC_SAIPLLI2SClkDivConfig(uint32_t RCC_PLLI2SDivQ)  
{
20000784:	b580      	push	{r7, lr}
20000786:	b084      	sub	sp, #16
20000788:	af00      	add	r7, sp, #0
2000078a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
2000078c:	2300      	movs	r3, #0
2000078e:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(RCC_PLLI2SDivQ));
  
  tmpreg = RCC->DCKCFGR;
20000790:	4a0a      	ldr	r2, [pc, #40]	; (200007bc <RCC_SAIPLLI2SClkDivConfig+0x38>)
20000792:	238c      	movs	r3, #140	; 0x8c
20000794:	58d3      	ldr	r3, [r2, r3]
20000796:	60fb      	str	r3, [r7, #12]

  /* Clear PLLI2SDIVQ[4:0] bits */
  tmpreg &= ~(RCC_DCKCFGR_PLLI2SDIVQ);
20000798:	68fb      	ldr	r3, [r7, #12]
2000079a:	221f      	movs	r2, #31
2000079c:	4393      	bics	r3, r2
2000079e:	60fb      	str	r3, [r7, #12]

  /* Set PLLI2SDIVQ values */
  tmpreg |= (RCC_PLLI2SDivQ - 1);
200007a0:	687b      	ldr	r3, [r7, #4]
200007a2:	3b01      	subs	r3, #1
200007a4:	68fa      	ldr	r2, [r7, #12]
200007a6:	4313      	orrs	r3, r2
200007a8:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->DCKCFGR = tmpreg;
200007aa:	4904      	ldr	r1, [pc, #16]	; (200007bc <RCC_SAIPLLI2SClkDivConfig+0x38>)
200007ac:	228c      	movs	r2, #140	; 0x8c
200007ae:	68fb      	ldr	r3, [r7, #12]
200007b0:	508b      	str	r3, [r1, r2]
}
200007b2:	46c0      	nop			; (mov r8, r8)
200007b4:	46bd      	mov	sp, r7
200007b6:	b004      	add	sp, #16
200007b8:	bd80      	pop	{r7, pc}
200007ba:	46c0      	nop			; (mov r8, r8)
200007bc:	40023800 	andmi	r3, r2, r0, lsl #16

200007c0 <RCC_SAIPLLSAIClkDivConfig>:
  *          SAI1 clock frequency = f(PLLSAI_Q) / RCC_PLLSAIDivQ  
  *              
  * @retval None
  */
void RCC_SAIPLLSAIClkDivConfig(uint32_t RCC_PLLSAIDivQ)  
{
200007c0:	b580      	push	{r7, lr}
200007c2:	b084      	sub	sp, #16
200007c4:	af00      	add	r7, sp, #0
200007c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
200007c8:	2300      	movs	r3, #0
200007ca:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(RCC_PLLSAIDivQ));
  
  tmpreg = RCC->DCKCFGR;
200007cc:	4a0a      	ldr	r2, [pc, #40]	; (200007f8 <RCC_SAIPLLSAIClkDivConfig+0x38>)
200007ce:	238c      	movs	r3, #140	; 0x8c
200007d0:	58d3      	ldr	r3, [r2, r3]
200007d2:	60fb      	str	r3, [r7, #12]

  /* Clear PLLI2SDIVQ[4:0] and PLLSAIDIVQ[4:0] bits */
  tmpreg &= ~(RCC_DCKCFGR_PLLSAIDIVQ);
200007d4:	68fb      	ldr	r3, [r7, #12]
200007d6:	4a09      	ldr	r2, [pc, #36]	; (200007fc <RCC_SAIPLLSAIClkDivConfig+0x3c>)
200007d8:	4013      	ands	r3, r2
200007da:	60fb      	str	r3, [r7, #12]

  /* Set PLLSAIDIVQ values */
  tmpreg |= ((RCC_PLLSAIDivQ - 1) << 8);
200007dc:	687b      	ldr	r3, [r7, #4]
200007de:	3b01      	subs	r3, #1
200007e0:	021b      	lsls	r3, r3, #8
200007e2:	68fa      	ldr	r2, [r7, #12]
200007e4:	4313      	orrs	r3, r2
200007e6:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->DCKCFGR = tmpreg;
200007e8:	4903      	ldr	r1, [pc, #12]	; (200007f8 <RCC_SAIPLLSAIClkDivConfig+0x38>)
200007ea:	228c      	movs	r2, #140	; 0x8c
200007ec:	68fb      	ldr	r3, [r7, #12]
200007ee:	508b      	str	r3, [r1, r2]
}
200007f0:	46c0      	nop			; (mov r8, r8)
200007f2:	46bd      	mov	sp, r7
200007f4:	b004      	add	sp, #16
200007f6:	bd80      	pop	{r7, pc}
200007f8:	40023800 	andmi	r3, r2, r0, lsl #16
200007fc:	ffffe0ff 			; <UNDEFINED> instruction: 0xffffe0ff

20000800 <RCC_LTDCCLKDivConfig>:
  *            @arg RCC_PLLSAIDivR_Div16: LTDC clock = f(PLLSAI_R)/16
  *            
  * @retval None
  */
void RCC_LTDCCLKDivConfig(uint32_t RCC_PLLSAIDivR)
{
20000800:	b580      	push	{r7, lr}
20000802:	b084      	sub	sp, #16
20000804:	af00      	add	r7, sp, #0
20000806:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
20000808:	2300      	movs	r3, #0
2000080a:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_PLLSAI_DIVR_VALUE(RCC_PLLSAIDivR));
  
  tmpreg = RCC->DCKCFGR;
2000080c:	4a09      	ldr	r2, [pc, #36]	; (20000834 <RCC_LTDCCLKDivConfig+0x34>)
2000080e:	238c      	movs	r3, #140	; 0x8c
20000810:	58d3      	ldr	r3, [r2, r3]
20000812:	60fb      	str	r3, [r7, #12]

  /* Clear PLLSAIDIVR[2:0] bits */
  tmpreg &= ~RCC_DCKCFGR_PLLSAIDIVR;
20000814:	68fb      	ldr	r3, [r7, #12]
20000816:	4a08      	ldr	r2, [pc, #32]	; (20000838 <RCC_LTDCCLKDivConfig+0x38>)
20000818:	4013      	ands	r3, r2
2000081a:	60fb      	str	r3, [r7, #12]

  /* Set PLLSAIDIVR values */
  tmpreg |= RCC_PLLSAIDivR;
2000081c:	68fa      	ldr	r2, [r7, #12]
2000081e:	687b      	ldr	r3, [r7, #4]
20000820:	4313      	orrs	r3, r2
20000822:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->DCKCFGR = tmpreg;
20000824:	4903      	ldr	r1, [pc, #12]	; (20000834 <RCC_LTDCCLKDivConfig+0x34>)
20000826:	228c      	movs	r2, #140	; 0x8c
20000828:	68fb      	ldr	r3, [r7, #12]
2000082a:	508b      	str	r3, [r1, r2]
}
2000082c:	46c0      	nop			; (mov r8, r8)
2000082e:	46bd      	mov	sp, r7
20000830:	b004      	add	sp, #16
20000832:	bd80      	pop	{r7, pc}
20000834:	40023800 	andmi	r3, r2, r0, lsl #16
20000838:	fffcffff 			; <UNDEFINED> instruction: 0xfffcffff

2000083c <RCC_TIMCLKPresConfig>:
  *                 else it is equal to [(HPRE * PPREx) / 4] if PPREx is corresponding 
  *                 to division by 8 or more.
  * @retval None
  */
void RCC_TIMCLKPresConfig(uint32_t RCC_TIMCLKPrescaler)
{
2000083c:	b580      	push	{r7, lr}
2000083e:	b082      	sub	sp, #8
20000840:	af00      	add	r7, sp, #0
20000842:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_TIMCLK_PRESCALER(RCC_TIMCLKPrescaler));

  *(__IO uint32_t *) DCKCFGR_TIMPRE_BB = RCC_TIMCLKPrescaler;
20000844:	4b03      	ldr	r3, [pc, #12]	; (20000854 <RCC_TIMCLKPresConfig+0x18>)
20000846:	687a      	ldr	r2, [r7, #4]
20000848:	601a      	str	r2, [r3, #0]
}
2000084a:	46c0      	nop			; (mov r8, r8)
2000084c:	46bd      	mov	sp, r7
2000084e:	b002      	add	sp, #8
20000850:	bd80      	pop	{r7, pc}
20000852:	46c0      	nop			; (mov r8, r8)
20000854:	424711e0 	submi	r1, r7, #224, 2	; 0x38

20000858 <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
20000858:	b580      	push	{r7, lr}
2000085a:	b082      	sub	sp, #8
2000085c:	af00      	add	r7, sp, #0
2000085e:	6078      	str	r0, [r7, #4]
20000860:	000a      	movs	r2, r1
20000862:	1cfb      	adds	r3, r7, #3
20000864:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
20000866:	1cfb      	adds	r3, r7, #3
20000868:	781b      	ldrb	r3, [r3, #0]
2000086a:	2b00      	cmp	r3, #0
2000086c:	d006      	beq.n	2000087c <RCC_AHB1PeriphClockCmd+0x24>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
2000086e:	4b09      	ldr	r3, [pc, #36]	; (20000894 <RCC_AHB1PeriphClockCmd+0x3c>)
20000870:	6b19      	ldr	r1, [r3, #48]	; 0x30
20000872:	4b08      	ldr	r3, [pc, #32]	; (20000894 <RCC_AHB1PeriphClockCmd+0x3c>)
20000874:	687a      	ldr	r2, [r7, #4]
20000876:	430a      	orrs	r2, r1
20000878:	631a      	str	r2, [r3, #48]	; 0x30
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
  }
}
2000087a:	e006      	b.n	2000088a <RCC_AHB1PeriphClockCmd+0x32>
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
2000087c:	4b05      	ldr	r3, [pc, #20]	; (20000894 <RCC_AHB1PeriphClockCmd+0x3c>)
2000087e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
20000880:	687b      	ldr	r3, [r7, #4]
20000882:	43d9      	mvns	r1, r3
20000884:	4b03      	ldr	r3, [pc, #12]	; (20000894 <RCC_AHB1PeriphClockCmd+0x3c>)
20000886:	400a      	ands	r2, r1
20000888:	631a      	str	r2, [r3, #48]	; 0x30
}
2000088a:	46c0      	nop			; (mov r8, r8)
2000088c:	46bd      	mov	sp, r7
2000088e:	b002      	add	sp, #8
20000890:	bd80      	pop	{r7, pc}
20000892:	46c0      	nop			; (mov r8, r8)
20000894:	40023800 	andmi	r3, r2, r0, lsl #16

20000898 <RCC_AHB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB2PeriphClockCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
{
20000898:	b580      	push	{r7, lr}
2000089a:	b082      	sub	sp, #8
2000089c:	af00      	add	r7, sp, #0
2000089e:	6078      	str	r0, [r7, #4]
200008a0:	000a      	movs	r2, r1
200008a2:	1cfb      	adds	r3, r7, #3
200008a4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
200008a6:	1cfb      	adds	r3, r7, #3
200008a8:	781b      	ldrb	r3, [r3, #0]
200008aa:	2b00      	cmp	r3, #0
200008ac:	d006      	beq.n	200008bc <RCC_AHB2PeriphClockCmd+0x24>
  {
    RCC->AHB2ENR |= RCC_AHB2Periph;
200008ae:	4b09      	ldr	r3, [pc, #36]	; (200008d4 <RCC_AHB2PeriphClockCmd+0x3c>)
200008b0:	6b59      	ldr	r1, [r3, #52]	; 0x34
200008b2:	4b08      	ldr	r3, [pc, #32]	; (200008d4 <RCC_AHB2PeriphClockCmd+0x3c>)
200008b4:	687a      	ldr	r2, [r7, #4]
200008b6:	430a      	orrs	r2, r1
200008b8:	635a      	str	r2, [r3, #52]	; 0x34
  }
  else
  {
    RCC->AHB2ENR &= ~RCC_AHB2Periph;
  }
}
200008ba:	e006      	b.n	200008ca <RCC_AHB2PeriphClockCmd+0x32>
    RCC->AHB2ENR &= ~RCC_AHB2Periph;
200008bc:	4b05      	ldr	r3, [pc, #20]	; (200008d4 <RCC_AHB2PeriphClockCmd+0x3c>)
200008be:	6b5a      	ldr	r2, [r3, #52]	; 0x34
200008c0:	687b      	ldr	r3, [r7, #4]
200008c2:	43d9      	mvns	r1, r3
200008c4:	4b03      	ldr	r3, [pc, #12]	; (200008d4 <RCC_AHB2PeriphClockCmd+0x3c>)
200008c6:	400a      	ands	r2, r1
200008c8:	635a      	str	r2, [r3, #52]	; 0x34
}
200008ca:	46c0      	nop			; (mov r8, r8)
200008cc:	46bd      	mov	sp, r7
200008ce:	b002      	add	sp, #8
200008d0:	bd80      	pop	{r7, pc}
200008d2:	46c0      	nop			; (mov r8, r8)
200008d4:	40023800 	andmi	r3, r2, r0, lsl #16

200008d8 <RCC_AHB3PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB3PeriphClockCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
{
200008d8:	b580      	push	{r7, lr}
200008da:	b082      	sub	sp, #8
200008dc:	af00      	add	r7, sp, #0
200008de:	6078      	str	r0, [r7, #4]
200008e0:	000a      	movs	r2, r1
200008e2:	1cfb      	adds	r3, r7, #3
200008e4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
200008e6:	1cfb      	adds	r3, r7, #3
200008e8:	781b      	ldrb	r3, [r3, #0]
200008ea:	2b00      	cmp	r3, #0
200008ec:	d006      	beq.n	200008fc <RCC_AHB3PeriphClockCmd+0x24>
  {
    RCC->AHB3ENR |= RCC_AHB3Periph;
200008ee:	4b09      	ldr	r3, [pc, #36]	; (20000914 <RCC_AHB3PeriphClockCmd+0x3c>)
200008f0:	6b99      	ldr	r1, [r3, #56]	; 0x38
200008f2:	4b08      	ldr	r3, [pc, #32]	; (20000914 <RCC_AHB3PeriphClockCmd+0x3c>)
200008f4:	687a      	ldr	r2, [r7, #4]
200008f6:	430a      	orrs	r2, r1
200008f8:	639a      	str	r2, [r3, #56]	; 0x38
  }
  else
  {
    RCC->AHB3ENR &= ~RCC_AHB3Periph;
  }
}
200008fa:	e006      	b.n	2000090a <RCC_AHB3PeriphClockCmd+0x32>
    RCC->AHB3ENR &= ~RCC_AHB3Periph;
200008fc:	4b05      	ldr	r3, [pc, #20]	; (20000914 <RCC_AHB3PeriphClockCmd+0x3c>)
200008fe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
20000900:	687b      	ldr	r3, [r7, #4]
20000902:	43d9      	mvns	r1, r3
20000904:	4b03      	ldr	r3, [pc, #12]	; (20000914 <RCC_AHB3PeriphClockCmd+0x3c>)
20000906:	400a      	ands	r2, r1
20000908:	639a      	str	r2, [r3, #56]	; 0x38
}
2000090a:	46c0      	nop			; (mov r8, r8)
2000090c:	46bd      	mov	sp, r7
2000090e:	b002      	add	sp, #8
20000910:	bd80      	pop	{r7, pc}
20000912:	46c0      	nop			; (mov r8, r8)
20000914:	40023800 	andmi	r3, r2, r0, lsl #16

20000918 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
20000918:	b580      	push	{r7, lr}
2000091a:	b082      	sub	sp, #8
2000091c:	af00      	add	r7, sp, #0
2000091e:	6078      	str	r0, [r7, #4]
20000920:	000a      	movs	r2, r1
20000922:	1cfb      	adds	r3, r7, #3
20000924:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
20000926:	1cfb      	adds	r3, r7, #3
20000928:	781b      	ldrb	r3, [r3, #0]
2000092a:	2b00      	cmp	r3, #0
2000092c:	d006      	beq.n	2000093c <RCC_APB1PeriphClockCmd+0x24>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
2000092e:	4b09      	ldr	r3, [pc, #36]	; (20000954 <RCC_APB1PeriphClockCmd+0x3c>)
20000930:	6c19      	ldr	r1, [r3, #64]	; 0x40
20000932:	4b08      	ldr	r3, [pc, #32]	; (20000954 <RCC_APB1PeriphClockCmd+0x3c>)
20000934:	687a      	ldr	r2, [r7, #4]
20000936:	430a      	orrs	r2, r1
20000938:	641a      	str	r2, [r3, #64]	; 0x40
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
2000093a:	e006      	b.n	2000094a <RCC_APB1PeriphClockCmd+0x32>
    RCC->APB1ENR &= ~RCC_APB1Periph;
2000093c:	4b05      	ldr	r3, [pc, #20]	; (20000954 <RCC_APB1PeriphClockCmd+0x3c>)
2000093e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
20000940:	687b      	ldr	r3, [r7, #4]
20000942:	43d9      	mvns	r1, r3
20000944:	4b03      	ldr	r3, [pc, #12]	; (20000954 <RCC_APB1PeriphClockCmd+0x3c>)
20000946:	400a      	ands	r2, r1
20000948:	641a      	str	r2, [r3, #64]	; 0x40
}
2000094a:	46c0      	nop			; (mov r8, r8)
2000094c:	46bd      	mov	sp, r7
2000094e:	b002      	add	sp, #8
20000950:	bd80      	pop	{r7, pc}
20000952:	46c0      	nop			; (mov r8, r8)
20000954:	40023800 	andmi	r3, r2, r0, lsl #16

20000958 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
20000958:	b580      	push	{r7, lr}
2000095a:	b082      	sub	sp, #8
2000095c:	af00      	add	r7, sp, #0
2000095e:	6078      	str	r0, [r7, #4]
20000960:	000a      	movs	r2, r1
20000962:	1cfb      	adds	r3, r7, #3
20000964:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
20000966:	1cfb      	adds	r3, r7, #3
20000968:	781b      	ldrb	r3, [r3, #0]
2000096a:	2b00      	cmp	r3, #0
2000096c:	d006      	beq.n	2000097c <RCC_APB2PeriphClockCmd+0x24>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
2000096e:	4b09      	ldr	r3, [pc, #36]	; (20000994 <RCC_APB2PeriphClockCmd+0x3c>)
20000970:	6c59      	ldr	r1, [r3, #68]	; 0x44
20000972:	4b08      	ldr	r3, [pc, #32]	; (20000994 <RCC_APB2PeriphClockCmd+0x3c>)
20000974:	687a      	ldr	r2, [r7, #4]
20000976:	430a      	orrs	r2, r1
20000978:	645a      	str	r2, [r3, #68]	; 0x44
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
2000097a:	e006      	b.n	2000098a <RCC_APB2PeriphClockCmd+0x32>
    RCC->APB2ENR &= ~RCC_APB2Periph;
2000097c:	4b05      	ldr	r3, [pc, #20]	; (20000994 <RCC_APB2PeriphClockCmd+0x3c>)
2000097e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
20000980:	687b      	ldr	r3, [r7, #4]
20000982:	43d9      	mvns	r1, r3
20000984:	4b03      	ldr	r3, [pc, #12]	; (20000994 <RCC_APB2PeriphClockCmd+0x3c>)
20000986:	400a      	ands	r2, r1
20000988:	645a      	str	r2, [r3, #68]	; 0x44
}
2000098a:	46c0      	nop			; (mov r8, r8)
2000098c:	46bd      	mov	sp, r7
2000098e:	b002      	add	sp, #8
20000990:	bd80      	pop	{r7, pc}
20000992:	46c0      	nop			; (mov r8, r8)
20000994:	40023800 	andmi	r3, r2, r0, lsl #16

20000998 <RCC_AHB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphResetCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
20000998:	b580      	push	{r7, lr}
2000099a:	b082      	sub	sp, #8
2000099c:	af00      	add	r7, sp, #0
2000099e:	6078      	str	r0, [r7, #4]
200009a0:	000a      	movs	r2, r1
200009a2:	1cfb      	adds	r3, r7, #3
200009a4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_RESET_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
200009a6:	1cfb      	adds	r3, r7, #3
200009a8:	781b      	ldrb	r3, [r3, #0]
200009aa:	2b00      	cmp	r3, #0
200009ac:	d006      	beq.n	200009bc <RCC_AHB1PeriphResetCmd+0x24>
  {
    RCC->AHB1RSTR |= RCC_AHB1Periph;
200009ae:	4b09      	ldr	r3, [pc, #36]	; (200009d4 <RCC_AHB1PeriphResetCmd+0x3c>)
200009b0:	6919      	ldr	r1, [r3, #16]
200009b2:	4b08      	ldr	r3, [pc, #32]	; (200009d4 <RCC_AHB1PeriphResetCmd+0x3c>)
200009b4:	687a      	ldr	r2, [r7, #4]
200009b6:	430a      	orrs	r2, r1
200009b8:	611a      	str	r2, [r3, #16]
  }
  else
  {
    RCC->AHB1RSTR &= ~RCC_AHB1Periph;
  }
}
200009ba:	e006      	b.n	200009ca <RCC_AHB1PeriphResetCmd+0x32>
    RCC->AHB1RSTR &= ~RCC_AHB1Periph;
200009bc:	4b05      	ldr	r3, [pc, #20]	; (200009d4 <RCC_AHB1PeriphResetCmd+0x3c>)
200009be:	691a      	ldr	r2, [r3, #16]
200009c0:	687b      	ldr	r3, [r7, #4]
200009c2:	43d9      	mvns	r1, r3
200009c4:	4b03      	ldr	r3, [pc, #12]	; (200009d4 <RCC_AHB1PeriphResetCmd+0x3c>)
200009c6:	400a      	ands	r2, r1
200009c8:	611a      	str	r2, [r3, #16]
}
200009ca:	46c0      	nop			; (mov r8, r8)
200009cc:	46bd      	mov	sp, r7
200009ce:	b002      	add	sp, #8
200009d0:	bd80      	pop	{r7, pc}
200009d2:	46c0      	nop			; (mov r8, r8)
200009d4:	40023800 	andmi	r3, r2, r0, lsl #16

200009d8 <RCC_AHB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB2PeriphResetCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
{
200009d8:	b580      	push	{r7, lr}
200009da:	b082      	sub	sp, #8
200009dc:	af00      	add	r7, sp, #0
200009de:	6078      	str	r0, [r7, #4]
200009e0:	000a      	movs	r2, r1
200009e2:	1cfb      	adds	r3, r7, #3
200009e4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
200009e6:	1cfb      	adds	r3, r7, #3
200009e8:	781b      	ldrb	r3, [r3, #0]
200009ea:	2b00      	cmp	r3, #0
200009ec:	d006      	beq.n	200009fc <RCC_AHB2PeriphResetCmd+0x24>
  {
    RCC->AHB2RSTR |= RCC_AHB2Periph;
200009ee:	4b09      	ldr	r3, [pc, #36]	; (20000a14 <RCC_AHB2PeriphResetCmd+0x3c>)
200009f0:	6959      	ldr	r1, [r3, #20]
200009f2:	4b08      	ldr	r3, [pc, #32]	; (20000a14 <RCC_AHB2PeriphResetCmd+0x3c>)
200009f4:	687a      	ldr	r2, [r7, #4]
200009f6:	430a      	orrs	r2, r1
200009f8:	615a      	str	r2, [r3, #20]
  }
  else
  {
    RCC->AHB2RSTR &= ~RCC_AHB2Periph;
  }
}
200009fa:	e006      	b.n	20000a0a <RCC_AHB2PeriphResetCmd+0x32>
    RCC->AHB2RSTR &= ~RCC_AHB2Periph;
200009fc:	4b05      	ldr	r3, [pc, #20]	; (20000a14 <RCC_AHB2PeriphResetCmd+0x3c>)
200009fe:	695a      	ldr	r2, [r3, #20]
20000a00:	687b      	ldr	r3, [r7, #4]
20000a02:	43d9      	mvns	r1, r3
20000a04:	4b03      	ldr	r3, [pc, #12]	; (20000a14 <RCC_AHB2PeriphResetCmd+0x3c>)
20000a06:	400a      	ands	r2, r1
20000a08:	615a      	str	r2, [r3, #20]
}
20000a0a:	46c0      	nop			; (mov r8, r8)
20000a0c:	46bd      	mov	sp, r7
20000a0e:	b002      	add	sp, #8
20000a10:	bd80      	pop	{r7, pc}
20000a12:	46c0      	nop			; (mov r8, r8)
20000a14:	40023800 	andmi	r3, r2, r0, lsl #16

20000a18 <RCC_AHB3PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB3PeriphResetCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
{
20000a18:	b580      	push	{r7, lr}
20000a1a:	b082      	sub	sp, #8
20000a1c:	af00      	add	r7, sp, #0
20000a1e:	6078      	str	r0, [r7, #4]
20000a20:	000a      	movs	r2, r1
20000a22:	1cfb      	adds	r3, r7, #3
20000a24:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
20000a26:	1cfb      	adds	r3, r7, #3
20000a28:	781b      	ldrb	r3, [r3, #0]
20000a2a:	2b00      	cmp	r3, #0
20000a2c:	d006      	beq.n	20000a3c <RCC_AHB3PeriphResetCmd+0x24>
  {
    RCC->AHB3RSTR |= RCC_AHB3Periph;
20000a2e:	4b09      	ldr	r3, [pc, #36]	; (20000a54 <RCC_AHB3PeriphResetCmd+0x3c>)
20000a30:	6999      	ldr	r1, [r3, #24]
20000a32:	4b08      	ldr	r3, [pc, #32]	; (20000a54 <RCC_AHB3PeriphResetCmd+0x3c>)
20000a34:	687a      	ldr	r2, [r7, #4]
20000a36:	430a      	orrs	r2, r1
20000a38:	619a      	str	r2, [r3, #24]
  }
  else
  {
    RCC->AHB3RSTR &= ~RCC_AHB3Periph;
  }
}
20000a3a:	e006      	b.n	20000a4a <RCC_AHB3PeriphResetCmd+0x32>
    RCC->AHB3RSTR &= ~RCC_AHB3Periph;
20000a3c:	4b05      	ldr	r3, [pc, #20]	; (20000a54 <RCC_AHB3PeriphResetCmd+0x3c>)
20000a3e:	699a      	ldr	r2, [r3, #24]
20000a40:	687b      	ldr	r3, [r7, #4]
20000a42:	43d9      	mvns	r1, r3
20000a44:	4b03      	ldr	r3, [pc, #12]	; (20000a54 <RCC_AHB3PeriphResetCmd+0x3c>)
20000a46:	400a      	ands	r2, r1
20000a48:	619a      	str	r2, [r3, #24]
}
20000a4a:	46c0      	nop			; (mov r8, r8)
20000a4c:	46bd      	mov	sp, r7
20000a4e:	b002      	add	sp, #8
20000a50:	bd80      	pop	{r7, pc}
20000a52:	46c0      	nop			; (mov r8, r8)
20000a54:	40023800 	andmi	r3, r2, r0, lsl #16

20000a58 <RCC_APB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
20000a58:	b580      	push	{r7, lr}
20000a5a:	b082      	sub	sp, #8
20000a5c:	af00      	add	r7, sp, #0
20000a5e:	6078      	str	r0, [r7, #4]
20000a60:	000a      	movs	r2, r1
20000a62:	1cfb      	adds	r3, r7, #3
20000a64:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
20000a66:	1cfb      	adds	r3, r7, #3
20000a68:	781b      	ldrb	r3, [r3, #0]
20000a6a:	2b00      	cmp	r3, #0
20000a6c:	d006      	beq.n	20000a7c <RCC_APB1PeriphResetCmd+0x24>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
20000a6e:	4b09      	ldr	r3, [pc, #36]	; (20000a94 <RCC_APB1PeriphResetCmd+0x3c>)
20000a70:	6a19      	ldr	r1, [r3, #32]
20000a72:	4b08      	ldr	r3, [pc, #32]	; (20000a94 <RCC_APB1PeriphResetCmd+0x3c>)
20000a74:	687a      	ldr	r2, [r7, #4]
20000a76:	430a      	orrs	r2, r1
20000a78:	621a      	str	r2, [r3, #32]
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
  }
}
20000a7a:	e006      	b.n	20000a8a <RCC_APB1PeriphResetCmd+0x32>
    RCC->APB1RSTR &= ~RCC_APB1Periph;
20000a7c:	4b05      	ldr	r3, [pc, #20]	; (20000a94 <RCC_APB1PeriphResetCmd+0x3c>)
20000a7e:	6a1a      	ldr	r2, [r3, #32]
20000a80:	687b      	ldr	r3, [r7, #4]
20000a82:	43d9      	mvns	r1, r3
20000a84:	4b03      	ldr	r3, [pc, #12]	; (20000a94 <RCC_APB1PeriphResetCmd+0x3c>)
20000a86:	400a      	ands	r2, r1
20000a88:	621a      	str	r2, [r3, #32]
}
20000a8a:	46c0      	nop			; (mov r8, r8)
20000a8c:	46bd      	mov	sp, r7
20000a8e:	b002      	add	sp, #8
20000a90:	bd80      	pop	{r7, pc}
20000a92:	46c0      	nop			; (mov r8, r8)
20000a94:	40023800 	andmi	r3, r2, r0, lsl #16

20000a98 <RCC_APB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
20000a98:	b580      	push	{r7, lr}
20000a9a:	b082      	sub	sp, #8
20000a9c:	af00      	add	r7, sp, #0
20000a9e:	6078      	str	r0, [r7, #4]
20000aa0:	000a      	movs	r2, r1
20000aa2:	1cfb      	adds	r3, r7, #3
20000aa4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_RESET_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
20000aa6:	1cfb      	adds	r3, r7, #3
20000aa8:	781b      	ldrb	r3, [r3, #0]
20000aaa:	2b00      	cmp	r3, #0
20000aac:	d006      	beq.n	20000abc <RCC_APB2PeriphResetCmd+0x24>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
20000aae:	4b09      	ldr	r3, [pc, #36]	; (20000ad4 <RCC_APB2PeriphResetCmd+0x3c>)
20000ab0:	6a59      	ldr	r1, [r3, #36]	; 0x24
20000ab2:	4b08      	ldr	r3, [pc, #32]	; (20000ad4 <RCC_APB2PeriphResetCmd+0x3c>)
20000ab4:	687a      	ldr	r2, [r7, #4]
20000ab6:	430a      	orrs	r2, r1
20000ab8:	625a      	str	r2, [r3, #36]	; 0x24
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
  }
}
20000aba:	e006      	b.n	20000aca <RCC_APB2PeriphResetCmd+0x32>
    RCC->APB2RSTR &= ~RCC_APB2Periph;
20000abc:	4b05      	ldr	r3, [pc, #20]	; (20000ad4 <RCC_APB2PeriphResetCmd+0x3c>)
20000abe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
20000ac0:	687b      	ldr	r3, [r7, #4]
20000ac2:	43d9      	mvns	r1, r3
20000ac4:	4b03      	ldr	r3, [pc, #12]	; (20000ad4 <RCC_APB2PeriphResetCmd+0x3c>)
20000ac6:	400a      	ands	r2, r1
20000ac8:	625a      	str	r2, [r3, #36]	; 0x24
}
20000aca:	46c0      	nop			; (mov r8, r8)
20000acc:	46bd      	mov	sp, r7
20000ace:	b002      	add	sp, #8
20000ad0:	bd80      	pop	{r7, pc}
20000ad2:	46c0      	nop			; (mov r8, r8)
20000ad4:	40023800 	andmi	r3, r2, r0, lsl #16

20000ad8 <RCC_AHB1PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockLPModeCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
20000ad8:	b580      	push	{r7, lr}
20000ada:	b082      	sub	sp, #8
20000adc:	af00      	add	r7, sp, #0
20000ade:	6078      	str	r0, [r7, #4]
20000ae0:	000a      	movs	r2, r1
20000ae2:	1cfb      	adds	r3, r7, #3
20000ae4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_LPMODE_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
20000ae6:	1cfb      	adds	r3, r7, #3
20000ae8:	781b      	ldrb	r3, [r3, #0]
20000aea:	2b00      	cmp	r3, #0
20000aec:	d006      	beq.n	20000afc <RCC_AHB1PeriphClockLPModeCmd+0x24>
  {
    RCC->AHB1LPENR |= RCC_AHB1Periph;
20000aee:	4b09      	ldr	r3, [pc, #36]	; (20000b14 <RCC_AHB1PeriphClockLPModeCmd+0x3c>)
20000af0:	6d19      	ldr	r1, [r3, #80]	; 0x50
20000af2:	4b08      	ldr	r3, [pc, #32]	; (20000b14 <RCC_AHB1PeriphClockLPModeCmd+0x3c>)
20000af4:	687a      	ldr	r2, [r7, #4]
20000af6:	430a      	orrs	r2, r1
20000af8:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    RCC->AHB1LPENR &= ~RCC_AHB1Periph;
  }
}
20000afa:	e006      	b.n	20000b0a <RCC_AHB1PeriphClockLPModeCmd+0x32>
    RCC->AHB1LPENR &= ~RCC_AHB1Periph;
20000afc:	4b05      	ldr	r3, [pc, #20]	; (20000b14 <RCC_AHB1PeriphClockLPModeCmd+0x3c>)
20000afe:	6d1a      	ldr	r2, [r3, #80]	; 0x50
20000b00:	687b      	ldr	r3, [r7, #4]
20000b02:	43d9      	mvns	r1, r3
20000b04:	4b03      	ldr	r3, [pc, #12]	; (20000b14 <RCC_AHB1PeriphClockLPModeCmd+0x3c>)
20000b06:	400a      	ands	r2, r1
20000b08:	651a      	str	r2, [r3, #80]	; 0x50
}
20000b0a:	46c0      	nop			; (mov r8, r8)
20000b0c:	46bd      	mov	sp, r7
20000b0e:	b002      	add	sp, #8
20000b10:	bd80      	pop	{r7, pc}
20000b12:	46c0      	nop			; (mov r8, r8)
20000b14:	40023800 	andmi	r3, r2, r0, lsl #16

20000b18 <RCC_AHB2PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB2PeriphClockLPModeCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
{
20000b18:	b580      	push	{r7, lr}
20000b1a:	b082      	sub	sp, #8
20000b1c:	af00      	add	r7, sp, #0
20000b1e:	6078      	str	r0, [r7, #4]
20000b20:	000a      	movs	r2, r1
20000b22:	1cfb      	adds	r3, r7, #3
20000b24:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
20000b26:	1cfb      	adds	r3, r7, #3
20000b28:	781b      	ldrb	r3, [r3, #0]
20000b2a:	2b00      	cmp	r3, #0
20000b2c:	d006      	beq.n	20000b3c <RCC_AHB2PeriphClockLPModeCmd+0x24>
  {
    RCC->AHB2LPENR |= RCC_AHB2Periph;
20000b2e:	4b09      	ldr	r3, [pc, #36]	; (20000b54 <RCC_AHB2PeriphClockLPModeCmd+0x3c>)
20000b30:	6d59      	ldr	r1, [r3, #84]	; 0x54
20000b32:	4b08      	ldr	r3, [pc, #32]	; (20000b54 <RCC_AHB2PeriphClockLPModeCmd+0x3c>)
20000b34:	687a      	ldr	r2, [r7, #4]
20000b36:	430a      	orrs	r2, r1
20000b38:	655a      	str	r2, [r3, #84]	; 0x54
  }
  else
  {
    RCC->AHB2LPENR &= ~RCC_AHB2Periph;
  }
}
20000b3a:	e006      	b.n	20000b4a <RCC_AHB2PeriphClockLPModeCmd+0x32>
    RCC->AHB2LPENR &= ~RCC_AHB2Periph;
20000b3c:	4b05      	ldr	r3, [pc, #20]	; (20000b54 <RCC_AHB2PeriphClockLPModeCmd+0x3c>)
20000b3e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
20000b40:	687b      	ldr	r3, [r7, #4]
20000b42:	43d9      	mvns	r1, r3
20000b44:	4b03      	ldr	r3, [pc, #12]	; (20000b54 <RCC_AHB2PeriphClockLPModeCmd+0x3c>)
20000b46:	400a      	ands	r2, r1
20000b48:	655a      	str	r2, [r3, #84]	; 0x54
}
20000b4a:	46c0      	nop			; (mov r8, r8)
20000b4c:	46bd      	mov	sp, r7
20000b4e:	b002      	add	sp, #8
20000b50:	bd80      	pop	{r7, pc}
20000b52:	46c0      	nop			; (mov r8, r8)
20000b54:	40023800 	andmi	r3, r2, r0, lsl #16

20000b58 <RCC_AHB3PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB3PeriphClockLPModeCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
{
20000b58:	b580      	push	{r7, lr}
20000b5a:	b082      	sub	sp, #8
20000b5c:	af00      	add	r7, sp, #0
20000b5e:	6078      	str	r0, [r7, #4]
20000b60:	000a      	movs	r2, r1
20000b62:	1cfb      	adds	r3, r7, #3
20000b64:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
20000b66:	1cfb      	adds	r3, r7, #3
20000b68:	781b      	ldrb	r3, [r3, #0]
20000b6a:	2b00      	cmp	r3, #0
20000b6c:	d006      	beq.n	20000b7c <RCC_AHB3PeriphClockLPModeCmd+0x24>
  {
    RCC->AHB3LPENR |= RCC_AHB3Periph;
20000b6e:	4b09      	ldr	r3, [pc, #36]	; (20000b94 <RCC_AHB3PeriphClockLPModeCmd+0x3c>)
20000b70:	6d99      	ldr	r1, [r3, #88]	; 0x58
20000b72:	4b08      	ldr	r3, [pc, #32]	; (20000b94 <RCC_AHB3PeriphClockLPModeCmd+0x3c>)
20000b74:	687a      	ldr	r2, [r7, #4]
20000b76:	430a      	orrs	r2, r1
20000b78:	659a      	str	r2, [r3, #88]	; 0x58
  }
  else
  {
    RCC->AHB3LPENR &= ~RCC_AHB3Periph;
  }
}
20000b7a:	e006      	b.n	20000b8a <RCC_AHB3PeriphClockLPModeCmd+0x32>
    RCC->AHB3LPENR &= ~RCC_AHB3Periph;
20000b7c:	4b05      	ldr	r3, [pc, #20]	; (20000b94 <RCC_AHB3PeriphClockLPModeCmd+0x3c>)
20000b7e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
20000b80:	687b      	ldr	r3, [r7, #4]
20000b82:	43d9      	mvns	r1, r3
20000b84:	4b03      	ldr	r3, [pc, #12]	; (20000b94 <RCC_AHB3PeriphClockLPModeCmd+0x3c>)
20000b86:	400a      	ands	r2, r1
20000b88:	659a      	str	r2, [r3, #88]	; 0x58
}
20000b8a:	46c0      	nop			; (mov r8, r8)
20000b8c:	46bd      	mov	sp, r7
20000b8e:	b002      	add	sp, #8
20000b90:	bd80      	pop	{r7, pc}
20000b92:	46c0      	nop			; (mov r8, r8)
20000b94:	40023800 	andmi	r3, r2, r0, lsl #16

20000b98 <RCC_APB1PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockLPModeCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
20000b98:	b580      	push	{r7, lr}
20000b9a:	b082      	sub	sp, #8
20000b9c:	af00      	add	r7, sp, #0
20000b9e:	6078      	str	r0, [r7, #4]
20000ba0:	000a      	movs	r2, r1
20000ba2:	1cfb      	adds	r3, r7, #3
20000ba4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
20000ba6:	1cfb      	adds	r3, r7, #3
20000ba8:	781b      	ldrb	r3, [r3, #0]
20000baa:	2b00      	cmp	r3, #0
20000bac:	d006      	beq.n	20000bbc <RCC_APB1PeriphClockLPModeCmd+0x24>
  {
    RCC->APB1LPENR |= RCC_APB1Periph;
20000bae:	4b09      	ldr	r3, [pc, #36]	; (20000bd4 <RCC_APB1PeriphClockLPModeCmd+0x3c>)
20000bb0:	6e19      	ldr	r1, [r3, #96]	; 0x60
20000bb2:	4b08      	ldr	r3, [pc, #32]	; (20000bd4 <RCC_APB1PeriphClockLPModeCmd+0x3c>)
20000bb4:	687a      	ldr	r2, [r7, #4]
20000bb6:	430a      	orrs	r2, r1
20000bb8:	661a      	str	r2, [r3, #96]	; 0x60
  }
  else
  {
    RCC->APB1LPENR &= ~RCC_APB1Periph;
  }
}
20000bba:	e006      	b.n	20000bca <RCC_APB1PeriphClockLPModeCmd+0x32>
    RCC->APB1LPENR &= ~RCC_APB1Periph;
20000bbc:	4b05      	ldr	r3, [pc, #20]	; (20000bd4 <RCC_APB1PeriphClockLPModeCmd+0x3c>)
20000bbe:	6e1a      	ldr	r2, [r3, #96]	; 0x60
20000bc0:	687b      	ldr	r3, [r7, #4]
20000bc2:	43d9      	mvns	r1, r3
20000bc4:	4b03      	ldr	r3, [pc, #12]	; (20000bd4 <RCC_APB1PeriphClockLPModeCmd+0x3c>)
20000bc6:	400a      	ands	r2, r1
20000bc8:	661a      	str	r2, [r3, #96]	; 0x60
}
20000bca:	46c0      	nop			; (mov r8, r8)
20000bcc:	46bd      	mov	sp, r7
20000bce:	b002      	add	sp, #8
20000bd0:	bd80      	pop	{r7, pc}
20000bd2:	46c0      	nop			; (mov r8, r8)
20000bd4:	40023800 	andmi	r3, r2, r0, lsl #16

20000bd8 <RCC_APB2PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockLPModeCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
20000bd8:	b580      	push	{r7, lr}
20000bda:	b082      	sub	sp, #8
20000bdc:	af00      	add	r7, sp, #0
20000bde:	6078      	str	r0, [r7, #4]
20000be0:	000a      	movs	r2, r1
20000be2:	1cfb      	adds	r3, r7, #3
20000be4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
20000be6:	1cfb      	adds	r3, r7, #3
20000be8:	781b      	ldrb	r3, [r3, #0]
20000bea:	2b00      	cmp	r3, #0
20000bec:	d006      	beq.n	20000bfc <RCC_APB2PeriphClockLPModeCmd+0x24>
  {
    RCC->APB2LPENR |= RCC_APB2Periph;
20000bee:	4b09      	ldr	r3, [pc, #36]	; (20000c14 <RCC_APB2PeriphClockLPModeCmd+0x3c>)
20000bf0:	6e59      	ldr	r1, [r3, #100]	; 0x64
20000bf2:	4b08      	ldr	r3, [pc, #32]	; (20000c14 <RCC_APB2PeriphClockLPModeCmd+0x3c>)
20000bf4:	687a      	ldr	r2, [r7, #4]
20000bf6:	430a      	orrs	r2, r1
20000bf8:	665a      	str	r2, [r3, #100]	; 0x64
  }
  else
  {
    RCC->APB2LPENR &= ~RCC_APB2Periph;
  }
}
20000bfa:	e006      	b.n	20000c0a <RCC_APB2PeriphClockLPModeCmd+0x32>
    RCC->APB2LPENR &= ~RCC_APB2Periph;
20000bfc:	4b05      	ldr	r3, [pc, #20]	; (20000c14 <RCC_APB2PeriphClockLPModeCmd+0x3c>)
20000bfe:	6e5a      	ldr	r2, [r3, #100]	; 0x64
20000c00:	687b      	ldr	r3, [r7, #4]
20000c02:	43d9      	mvns	r1, r3
20000c04:	4b03      	ldr	r3, [pc, #12]	; (20000c14 <RCC_APB2PeriphClockLPModeCmd+0x3c>)
20000c06:	400a      	ands	r2, r1
20000c08:	665a      	str	r2, [r3, #100]	; 0x64
}
20000c0a:	46c0      	nop			; (mov r8, r8)
20000c0c:	46bd      	mov	sp, r7
20000c0e:	b002      	add	sp, #8
20000c10:	bd80      	pop	{r7, pc}
20000c12:	46c0      	nop			; (mov r8, r8)
20000c14:	40023800 	andmi	r3, r2, r0, lsl #16

20000c18 <RCC_LSEModeConfig>:
  *            @arg RCC_LSE_LOWPOWER_MODE:  LSE oscillator in low power mode.
  *            @arg RCC_LSE_HIGHDRIVE_MODE: LSE oscillator in High Drive mode.
  * @retval None
  */
void RCC_LSEModeConfig(uint8_t RCC_Mode)
{
20000c18:	b580      	push	{r7, lr}
20000c1a:	b082      	sub	sp, #8
20000c1c:	af00      	add	r7, sp, #0
20000c1e:	0002      	movs	r2, r0
20000c20:	1dfb      	adds	r3, r7, #7
20000c22:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_LSE_MODE(RCC_Mode));
  
  if(RCC_Mode == RCC_LSE_HIGHDRIVE_MODE)
20000c24:	1dfb      	adds	r3, r7, #7
20000c26:	781b      	ldrb	r3, [r3, #0]
20000c28:	2b01      	cmp	r3, #1
20000c2a:	d106      	bne.n	20000c3a <RCC_LSEModeConfig+0x22>
  {
    SET_BIT(RCC->BDCR, RCC_BDCR_LSEMOD);
20000c2c:	4b08      	ldr	r3, [pc, #32]	; (20000c50 <RCC_LSEModeConfig+0x38>)
20000c2e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
20000c30:	4b07      	ldr	r3, [pc, #28]	; (20000c50 <RCC_LSEModeConfig+0x38>)
20000c32:	2108      	movs	r1, #8
20000c34:	430a      	orrs	r2, r1
20000c36:	671a      	str	r2, [r3, #112]	; 0x70
  }
  else
  {
    CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEMOD);
  }
}
20000c38:	e005      	b.n	20000c46 <RCC_LSEModeConfig+0x2e>
    CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEMOD);
20000c3a:	4b05      	ldr	r3, [pc, #20]	; (20000c50 <RCC_LSEModeConfig+0x38>)
20000c3c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
20000c3e:	4b04      	ldr	r3, [pc, #16]	; (20000c50 <RCC_LSEModeConfig+0x38>)
20000c40:	2108      	movs	r1, #8
20000c42:	438a      	bics	r2, r1
20000c44:	671a      	str	r2, [r3, #112]	; 0x70
}
20000c46:	46c0      	nop			; (mov r8, r8)
20000c48:	46bd      	mov	sp, r7
20000c4a:	b002      	add	sp, #8
20000c4c:	bd80      	pop	{r7, pc}
20000c4e:	46c0      	nop			; (mov r8, r8)
20000c50:	40023800 	andmi	r3, r2, r0, lsl #16

20000c54 <RCC_ITConfig>:
  * @param  NewState: new state of the specified RCC interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_ITConfig(uint8_t RCC_IT, FunctionalState NewState)
{
20000c54:	b580      	push	{r7, lr}
20000c56:	b082      	sub	sp, #8
20000c58:	af00      	add	r7, sp, #0
20000c5a:	0002      	movs	r2, r0
20000c5c:	1dfb      	adds	r3, r7, #7
20000c5e:	701a      	strb	r2, [r3, #0]
20000c60:	1dbb      	adds	r3, r7, #6
20000c62:	1c0a      	adds	r2, r1, #0
20000c64:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_IT(RCC_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
20000c66:	1dbb      	adds	r3, r7, #6
20000c68:	781b      	ldrb	r3, [r3, #0]
20000c6a:	2b00      	cmp	r3, #0
20000c6c:	d009      	beq.n	20000c82 <RCC_ITConfig+0x2e>
  {
    /* Perform Byte access to RCC_CIR[14:8] bits to enable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS |= RCC_IT;
20000c6e:	4b0c      	ldr	r3, [pc, #48]	; (20000ca0 <RCC_ITConfig+0x4c>)
20000c70:	781b      	ldrb	r3, [r3, #0]
20000c72:	b2da      	uxtb	r2, r3
20000c74:	490a      	ldr	r1, [pc, #40]	; (20000ca0 <RCC_ITConfig+0x4c>)
20000c76:	1dfb      	adds	r3, r7, #7
20000c78:	781b      	ldrb	r3, [r3, #0]
20000c7a:	4313      	orrs	r3, r2
20000c7c:	b2db      	uxtb	r3, r3
20000c7e:	700b      	strb	r3, [r1, #0]
  else
  {
    /* Perform Byte access to RCC_CIR[14:8] bits to disable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS &= (uint8_t)~RCC_IT;
  }
}
20000c80:	e00a      	b.n	20000c98 <RCC_ITConfig+0x44>
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS &= (uint8_t)~RCC_IT;
20000c82:	4b07      	ldr	r3, [pc, #28]	; (20000ca0 <RCC_ITConfig+0x4c>)
20000c84:	781b      	ldrb	r3, [r3, #0]
20000c86:	b2db      	uxtb	r3, r3
20000c88:	1dfa      	adds	r2, r7, #7
20000c8a:	7812      	ldrb	r2, [r2, #0]
20000c8c:	43d2      	mvns	r2, r2
20000c8e:	b2d2      	uxtb	r2, r2
20000c90:	4903      	ldr	r1, [pc, #12]	; (20000ca0 <RCC_ITConfig+0x4c>)
20000c92:	4013      	ands	r3, r2
20000c94:	b2db      	uxtb	r3, r3
20000c96:	700b      	strb	r3, [r1, #0]
}
20000c98:	46c0      	nop			; (mov r8, r8)
20000c9a:	46bd      	mov	sp, r7
20000c9c:	b002      	add	sp, #8
20000c9e:	bd80      	pop	{r7, pc}
20000ca0:	4002380d 	andmi	r3, r2, sp, lsl #16

20000ca4 <RCC_GetFlagStatus>:
  *            @arg RCC_FLAG_WWDGRST: Window Watchdog reset
  *            @arg RCC_FLAG_LPWRRST: Low Power reset
  * @retval The new state of RCC_FLAG (SET or RESET).
  */
FlagStatus RCC_GetFlagStatus(uint8_t RCC_FLAG)
{
20000ca4:	b580      	push	{r7, lr}
20000ca6:	b086      	sub	sp, #24
20000ca8:	af00      	add	r7, sp, #0
20000caa:	0002      	movs	r2, r0
20000cac:	1dfb      	adds	r3, r7, #7
20000cae:	701a      	strb	r2, [r3, #0]
  uint32_t tmp = 0;
20000cb0:	2300      	movs	r3, #0
20000cb2:	60fb      	str	r3, [r7, #12]
  uint32_t statusreg = 0;
20000cb4:	2300      	movs	r3, #0
20000cb6:	617b      	str	r3, [r7, #20]
  FlagStatus bitstatus = RESET;
20000cb8:	2313      	movs	r3, #19
20000cba:	18fb      	adds	r3, r7, r3
20000cbc:	2200      	movs	r2, #0
20000cbe:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_FLAG(RCC_FLAG));

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
20000cc0:	1dfb      	adds	r3, r7, #7
20000cc2:	781b      	ldrb	r3, [r3, #0]
20000cc4:	095b      	lsrs	r3, r3, #5
20000cc6:	b2db      	uxtb	r3, r3
20000cc8:	60fb      	str	r3, [r7, #12]
  if (tmp == 1)               /* The flag to check is in CR register */
20000cca:	68fb      	ldr	r3, [r7, #12]
20000ccc:	2b01      	cmp	r3, #1
20000cce:	d103      	bne.n	20000cd8 <RCC_GetFlagStatus+0x34>
  {
    statusreg = RCC->CR;
20000cd0:	4b14      	ldr	r3, [pc, #80]	; (20000d24 <RCC_GetFlagStatus+0x80>)
20000cd2:	681b      	ldr	r3, [r3, #0]
20000cd4:	617b      	str	r3, [r7, #20]
20000cd6:	e009      	b.n	20000cec <RCC_GetFlagStatus+0x48>
  }
  else if (tmp == 2)          /* The flag to check is in BDCR register */
20000cd8:	68fb      	ldr	r3, [r7, #12]
20000cda:	2b02      	cmp	r3, #2
20000cdc:	d103      	bne.n	20000ce6 <RCC_GetFlagStatus+0x42>
  {
    statusreg = RCC->BDCR;
20000cde:	4b11      	ldr	r3, [pc, #68]	; (20000d24 <RCC_GetFlagStatus+0x80>)
20000ce0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
20000ce2:	617b      	str	r3, [r7, #20]
20000ce4:	e002      	b.n	20000cec <RCC_GetFlagStatus+0x48>
  }
  else                       /* The flag to check is in CSR register */
  {
    statusreg = RCC->CSR;
20000ce6:	4b0f      	ldr	r3, [pc, #60]	; (20000d24 <RCC_GetFlagStatus+0x80>)
20000ce8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
20000cea:	617b      	str	r3, [r7, #20]
  }

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_MASK;
20000cec:	1dfb      	adds	r3, r7, #7
20000cee:	781b      	ldrb	r3, [r3, #0]
20000cf0:	221f      	movs	r2, #31
20000cf2:	4013      	ands	r3, r2
20000cf4:	60fb      	str	r3, [r7, #12]
  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
20000cf6:	697a      	ldr	r2, [r7, #20]
20000cf8:	68fb      	ldr	r3, [r7, #12]
20000cfa:	40da      	lsrs	r2, r3
20000cfc:	0013      	movs	r3, r2
20000cfe:	2201      	movs	r2, #1
20000d00:	4013      	ands	r3, r2
20000d02:	d004      	beq.n	20000d0e <RCC_GetFlagStatus+0x6a>
  {
    bitstatus = SET;
20000d04:	2313      	movs	r3, #19
20000d06:	18fb      	adds	r3, r7, r3
20000d08:	2201      	movs	r2, #1
20000d0a:	701a      	strb	r2, [r3, #0]
20000d0c:	e003      	b.n	20000d16 <RCC_GetFlagStatus+0x72>
  }
  else
  {
    bitstatus = RESET;
20000d0e:	2313      	movs	r3, #19
20000d10:	18fb      	adds	r3, r7, r3
20000d12:	2200      	movs	r2, #0
20000d14:	701a      	strb	r2, [r3, #0]
  }
  /* Return the flag status */
  return bitstatus;
20000d16:	2313      	movs	r3, #19
20000d18:	18fb      	adds	r3, r7, r3
20000d1a:	781b      	ldrb	r3, [r3, #0]
}
20000d1c:	0018      	movs	r0, r3
20000d1e:	46bd      	mov	sp, r7
20000d20:	b006      	add	sp, #24
20000d22:	bd80      	pop	{r7, pc}
20000d24:	40023800 	andmi	r3, r2, r0, lsl #16

20000d28 <RCC_ClearFlag>:
  *         RCC_FLAG_IWDGRST, RCC_FLAG_WWDGRST, RCC_FLAG_LPWRRST
  * @param  None
  * @retval None
  */
void RCC_ClearFlag(void)
{
20000d28:	b580      	push	{r7, lr}
20000d2a:	af00      	add	r7, sp, #0
  /* Set RMVF bit to clear the reset flags */
  RCC->CSR |= RCC_CSR_RMVF;
20000d2c:	4b04      	ldr	r3, [pc, #16]	; (20000d40 <RCC_ClearFlag+0x18>)
20000d2e:	6f5a      	ldr	r2, [r3, #116]	; 0x74
20000d30:	4b03      	ldr	r3, [pc, #12]	; (20000d40 <RCC_ClearFlag+0x18>)
20000d32:	2180      	movs	r1, #128	; 0x80
20000d34:	0449      	lsls	r1, r1, #17
20000d36:	430a      	orrs	r2, r1
20000d38:	675a      	str	r2, [r3, #116]	; 0x74
}
20000d3a:	46c0      	nop			; (mov r8, r8)
20000d3c:	46bd      	mov	sp, r7
20000d3e:	bd80      	pop	{r7, pc}
20000d40:	40023800 	andmi	r3, r2, r0, lsl #16

20000d44 <RCC_GetITStatus>:
  *            @arg RCC_IT_PLLSAIRDY: PLLSAI clock ready interrupt (only for STM32F42xxx/43xxx/446xx/469xx/479xx devices)
  *            @arg RCC_IT_CSS: Clock Security System interrupt
  * @retval The new state of RCC_IT (SET or RESET).
  */
ITStatus RCC_GetITStatus(uint8_t RCC_IT)
{
20000d44:	b580      	push	{r7, lr}
20000d46:	b084      	sub	sp, #16
20000d48:	af00      	add	r7, sp, #0
20000d4a:	0002      	movs	r2, r0
20000d4c:	1dfb      	adds	r3, r7, #7
20000d4e:	701a      	strb	r2, [r3, #0]
  ITStatus bitstatus = RESET;
20000d50:	230f      	movs	r3, #15
20000d52:	18fb      	adds	r3, r7, r3
20000d54:	2200      	movs	r2, #0
20000d56:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_GET_IT(RCC_IT));

  /* Check the status of the specified RCC interrupt */
  if ((RCC->CIR & RCC_IT) != (uint32_t)RESET)
20000d58:	4b0a      	ldr	r3, [pc, #40]	; (20000d84 <RCC_GetITStatus+0x40>)
20000d5a:	68db      	ldr	r3, [r3, #12]
20000d5c:	1dfa      	adds	r2, r7, #7
20000d5e:	7812      	ldrb	r2, [r2, #0]
20000d60:	4013      	ands	r3, r2
20000d62:	d004      	beq.n	20000d6e <RCC_GetITStatus+0x2a>
  {
    bitstatus = SET;
20000d64:	230f      	movs	r3, #15
20000d66:	18fb      	adds	r3, r7, r3
20000d68:	2201      	movs	r2, #1
20000d6a:	701a      	strb	r2, [r3, #0]
20000d6c:	e003      	b.n	20000d76 <RCC_GetITStatus+0x32>
  }
  else
  {
    bitstatus = RESET;
20000d6e:	230f      	movs	r3, #15
20000d70:	18fb      	adds	r3, r7, r3
20000d72:	2200      	movs	r2, #0
20000d74:	701a      	strb	r2, [r3, #0]
  }
  /* Return the RCC_IT status */
  return  bitstatus;
20000d76:	230f      	movs	r3, #15
20000d78:	18fb      	adds	r3, r7, r3
20000d7a:	781b      	ldrb	r3, [r3, #0]
}
20000d7c:	0018      	movs	r0, r3
20000d7e:	46bd      	mov	sp, r7
20000d80:	b004      	add	sp, #16
20000d82:	bd80      	pop	{r7, pc}
20000d84:	40023800 	andmi	r3, r2, r0, lsl #16

20000d88 <RCC_ClearITPendingBit>:
  *            @arg RCC_IT_PLLSAIRDY: PLLSAI ready interrupt (only for STM32F42xxx/43xxx/446xx/469xx/479xx devices) 
  *            @arg RCC_IT_CSS: Clock Security System interrupt
  * @retval None
  */
void RCC_ClearITPendingBit(uint8_t RCC_IT)
{
20000d88:	b580      	push	{r7, lr}
20000d8a:	b082      	sub	sp, #8
20000d8c:	af00      	add	r7, sp, #0
20000d8e:	0002      	movs	r2, r0
20000d90:	1dfb      	adds	r3, r7, #7
20000d92:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_CLEAR_IT(RCC_IT));

  /* Perform Byte access to RCC_CIR[23:16] bits to clear the selected interrupt
     pending bits */
  *(__IO uint8_t *) CIR_BYTE3_ADDRESS = RCC_IT;
20000d94:	4a03      	ldr	r2, [pc, #12]	; (20000da4 <RCC_ClearITPendingBit+0x1c>)
20000d96:	1dfb      	adds	r3, r7, #7
20000d98:	781b      	ldrb	r3, [r3, #0]
20000d9a:	7013      	strb	r3, [r2, #0]
}
20000d9c:	46c0      	nop			; (mov r8, r8)
20000d9e:	46bd      	mov	sp, r7
20000da0:	b002      	add	sp, #8
20000da2:	bd80      	pop	{r7, pc}
20000da4:	4002380e 	andmi	r3, r2, lr, lsl #16

20000da8 <init_GPIO_Ports>:
//======================================GPIO=========================================================
void init_GPIO_Ports()
{
20000da8:	b580      	push	{r7, lr}
20000daa:	b082      	sub	sp, #8
20000dac:	af00      	add	r7, sp, #0
	/*  Function used to set the GPIO configuration to the default reset state ****/
	GPIO_InitTypeDef init;
	//GPIO E UTPORTAR
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOE, ENABLE);
20000dae:	2101      	movs	r1, #1
20000db0:	2010      	movs	r0, #16
20000db2:	f7ff fd51 	bl	20000858 <RCC_AHB1PeriphClockCmd>
	GPIO_StructInit(&init);
20000db6:	003b      	movs	r3, r7
20000db8:	0018      	movs	r0, r3
20000dba:	f000 fc83 	bl	200016c4 <GPIO_StructInit>
	init.GPIO_Pin = GPIO_Pin_1 | GPIO_Pin_3 | GPIO_Pin_5 | GPIO_Pin_7 | GPIO_Pin_9 | GPIO_Pin_11 | GPIO_Pin_13 | GPIO_Pin_15;
20000dbe:	003b      	movs	r3, r7
20000dc0:	4a64      	ldr	r2, [pc, #400]	; (20000f54 <init_GPIO_Ports+0x1ac>)
20000dc2:	601a      	str	r2, [r3, #0]
	init.GPIO_Mode = GPIO_Mode_OUT;
20000dc4:	003b      	movs	r3, r7
20000dc6:	2201      	movs	r2, #1
20000dc8:	711a      	strb	r2, [r3, #4]
	init.GPIO_OType = GPIO_OType_PP;
20000dca:	003b      	movs	r3, r7
20000dcc:	2200      	movs	r2, #0
20000dce:	719a      	strb	r2, [r3, #6]
	init.GPIO_PuPd = GPIO_PuPd_NOPULL;
20000dd0:	003b      	movs	r3, r7
20000dd2:	2200      	movs	r2, #0
20000dd4:	71da      	strb	r2, [r3, #7]
	GPIO_Init(GPIOE, &init);
20000dd6:	003b      	movs	r3, r7
20000dd8:	4a5f      	ldr	r2, [pc, #380]	; (20000f58 <init_GPIO_Ports+0x1b0>)
20000dda:	0019      	movs	r1, r3
20000ddc:	0010      	movs	r0, r2
20000dde:	f000 fbe5 	bl	200015ac <GPIO_Init>
	
	//konfigurerar inport GPIO E
	GPIO_StructInit(&init);
20000de2:	003b      	movs	r3, r7
20000de4:	0018      	movs	r0, r3
20000de6:	f000 fc6d 	bl	200016c4 <GPIO_StructInit>
	init.GPIO_Pin = GPIO_Pin_0 | GPIO_Pin_2 | GPIO_Pin_4 | GPIO_Pin_6 | GPIO_Pin_8 | GPIO_Pin_10 | GPIO_Pin_12 |GPIO_Pin_14;
20000dea:	003b      	movs	r3, r7
20000dec:	4a5b      	ldr	r2, [pc, #364]	; (20000f5c <init_GPIO_Ports+0x1b4>)
20000dee:	601a      	str	r2, [r3, #0]
	init.GPIO_Mode = GPIO_Mode_IN;
20000df0:	003b      	movs	r3, r7
20000df2:	2200      	movs	r2, #0
20000df4:	711a      	strb	r2, [r3, #4]
	init.GPIO_PuPd = GPIO_PuPd_UP;
20000df6:	003b      	movs	r3, r7
20000df8:	2201      	movs	r2, #1
20000dfa:	71da      	strb	r2, [r3, #7]
	GPIO_Init(GPIOE, &init);
20000dfc:	003b      	movs	r3, r7
20000dfe:	4a56      	ldr	r2, [pc, #344]	; (20000f58 <init_GPIO_Ports+0x1b0>)
20000e00:	0019      	movs	r1, r3
20000e02:	0010      	movs	r0, r2
20000e04:	f000 fbd2 	bl	200015ac <GPIO_Init>

    //GPIOA UTPORTAR
    RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
20000e08:	2101      	movs	r1, #1
20000e0a:	2001      	movs	r0, #1
20000e0c:	f7ff fd24 	bl	20000858 <RCC_AHB1PeriphClockCmd>
	GPIO_StructInit(&init);
20000e10:	003b      	movs	r3, r7
20000e12:	0018      	movs	r0, r3
20000e14:	f000 fc56 	bl	200016c4 <GPIO_StructInit>
	init.GPIO_Pin = GPIO_Pin_1 | GPIO_Pin_3 | GPIO_Pin_5 | GPIO_Pin_7 | GPIO_Pin_9 | GPIO_Pin_11 | GPIO_Pin_13 | GPIO_Pin_15;
20000e18:	003b      	movs	r3, r7
20000e1a:	4a4e      	ldr	r2, [pc, #312]	; (20000f54 <init_GPIO_Ports+0x1ac>)
20000e1c:	601a      	str	r2, [r3, #0]
	init.GPIO_Mode = GPIO_Mode_OUT;
20000e1e:	003b      	movs	r3, r7
20000e20:	2201      	movs	r2, #1
20000e22:	711a      	strb	r2, [r3, #4]
	init.GPIO_OType = GPIO_OType_PP;
20000e24:	003b      	movs	r3, r7
20000e26:	2200      	movs	r2, #0
20000e28:	719a      	strb	r2, [r3, #6]
	init.GPIO_PuPd = GPIO_PuPd_NOPULL;
20000e2a:	003b      	movs	r3, r7
20000e2c:	2200      	movs	r2, #0
20000e2e:	71da      	strb	r2, [r3, #7]
	GPIO_Init(GPIOA, &init);
20000e30:	003b      	movs	r3, r7
20000e32:	4a4b      	ldr	r2, [pc, #300]	; (20000f60 <init_GPIO_Ports+0x1b8>)
20000e34:	0019      	movs	r1, r3
20000e36:	0010      	movs	r0, r2
20000e38:	f000 fbb8 	bl	200015ac <GPIO_Init>
	
	//konfigurerar inport GPIO a
	GPIO_StructInit(&init);
20000e3c:	003b      	movs	r3, r7
20000e3e:	0018      	movs	r0, r3
20000e40:	f000 fc40 	bl	200016c4 <GPIO_StructInit>
	init.GPIO_Pin = GPIO_Pin_0 | GPIO_Pin_2 | GPIO_Pin_4 | GPIO_Pin_6 | GPIO_Pin_8 | GPIO_Pin_10 | GPIO_Pin_12 |GPIO_Pin_14;
20000e44:	003b      	movs	r3, r7
20000e46:	4a45      	ldr	r2, [pc, #276]	; (20000f5c <init_GPIO_Ports+0x1b4>)
20000e48:	601a      	str	r2, [r3, #0]
	init.GPIO_Mode = GPIO_Mode_IN;
20000e4a:	003b      	movs	r3, r7
20000e4c:	2200      	movs	r2, #0
20000e4e:	711a      	strb	r2, [r3, #4]
	init.GPIO_PuPd = GPIO_PuPd_UP;
20000e50:	003b      	movs	r3, r7
20000e52:	2201      	movs	r2, #1
20000e54:	71da      	strb	r2, [r3, #7]
	GPIO_Init(GPIOA, &init);
20000e56:	003b      	movs	r3, r7
20000e58:	4a41      	ldr	r2, [pc, #260]	; (20000f60 <init_GPIO_Ports+0x1b8>)
20000e5a:	0019      	movs	r1, r3
20000e5c:	0010      	movs	r0, r2
20000e5e:	f000 fba5 	bl	200015ac <GPIO_Init>

	//GPIO C UTPORTAR
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC, ENABLE);
20000e62:	2101      	movs	r1, #1
20000e64:	2004      	movs	r0, #4
20000e66:	f7ff fcf7 	bl	20000858 <RCC_AHB1PeriphClockCmd>
	GPIO_StructInit(&init);
20000e6a:	003b      	movs	r3, r7
20000e6c:	0018      	movs	r0, r3
20000e6e:	f000 fc29 	bl	200016c4 <GPIO_StructInit>
	init.GPIO_Pin = GPIO_Pin_1 | GPIO_Pin_3 | GPIO_Pin_5 | GPIO_Pin_7 | GPIO_Pin_9 | GPIO_Pin_11 | GPIO_Pin_13 | GPIO_Pin_15;
20000e72:	003b      	movs	r3, r7
20000e74:	4a37      	ldr	r2, [pc, #220]	; (20000f54 <init_GPIO_Ports+0x1ac>)
20000e76:	601a      	str	r2, [r3, #0]
	init.GPIO_Mode = GPIO_Mode_OUT;
20000e78:	003b      	movs	r3, r7
20000e7a:	2201      	movs	r2, #1
20000e7c:	711a      	strb	r2, [r3, #4]
	init.GPIO_OType = GPIO_OType_PP;
20000e7e:	003b      	movs	r3, r7
20000e80:	2200      	movs	r2, #0
20000e82:	719a      	strb	r2, [r3, #6]
	init.GPIO_PuPd = GPIO_PuPd_NOPULL;
20000e84:	003b      	movs	r3, r7
20000e86:	2200      	movs	r2, #0
20000e88:	71da      	strb	r2, [r3, #7]
	GPIO_Init(GPIOC, &init);
20000e8a:	003b      	movs	r3, r7
20000e8c:	4a35      	ldr	r2, [pc, #212]	; (20000f64 <init_GPIO_Ports+0x1bc>)
20000e8e:	0019      	movs	r1, r3
20000e90:	0010      	movs	r0, r2
20000e92:	f000 fb8b 	bl	200015ac <GPIO_Init>
	
	//konfigurerar inport GPIO C
	GPIO_StructInit(&init);
20000e96:	003b      	movs	r3, r7
20000e98:	0018      	movs	r0, r3
20000e9a:	f000 fc13 	bl	200016c4 <GPIO_StructInit>
	init.GPIO_Pin = GPIO_Pin_0 | GPIO_Pin_2 | GPIO_Pin_4 | GPIO_Pin_6 | GPIO_Pin_8 | GPIO_Pin_10 | GPIO_Pin_12 |GPIO_Pin_14;
20000e9e:	003b      	movs	r3, r7
20000ea0:	4a2e      	ldr	r2, [pc, #184]	; (20000f5c <init_GPIO_Ports+0x1b4>)
20000ea2:	601a      	str	r2, [r3, #0]
	init.GPIO_Mode = GPIO_Mode_IN;
20000ea4:	003b      	movs	r3, r7
20000ea6:	2200      	movs	r2, #0
20000ea8:	711a      	strb	r2, [r3, #4]
	init.GPIO_PuPd = GPIO_PuPd_UP;
20000eaa:	003b      	movs	r3, r7
20000eac:	2201      	movs	r2, #1
20000eae:	71da      	strb	r2, [r3, #7]
	GPIO_Init(GPIOC, &init);
20000eb0:	003b      	movs	r3, r7
20000eb2:	4a2c      	ldr	r2, [pc, #176]	; (20000f64 <init_GPIO_Ports+0x1bc>)
20000eb4:	0019      	movs	r1, r3
20000eb6:	0010      	movs	r0, r2
20000eb8:	f000 fb78 	bl	200015ac <GPIO_Init>

	//GPIO D UTPORTAR
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOD, ENABLE);
20000ebc:	2101      	movs	r1, #1
20000ebe:	2008      	movs	r0, #8
20000ec0:	f7ff fcca 	bl	20000858 <RCC_AHB1PeriphClockCmd>
	GPIO_StructInit(&init);
20000ec4:	003b      	movs	r3, r7
20000ec6:	0018      	movs	r0, r3
20000ec8:	f000 fbfc 	bl	200016c4 <GPIO_StructInit>
	init.GPIO_Pin = GPIO_Pin_1 | GPIO_Pin_3 | GPIO_Pin_5 | GPIO_Pin_7 | GPIO_Pin_9 | GPIO_Pin_11 | GPIO_Pin_13 | GPIO_Pin_15;
20000ecc:	003b      	movs	r3, r7
20000ece:	4a21      	ldr	r2, [pc, #132]	; (20000f54 <init_GPIO_Ports+0x1ac>)
20000ed0:	601a      	str	r2, [r3, #0]
	init.GPIO_Mode = GPIO_Mode_OUT;
20000ed2:	003b      	movs	r3, r7
20000ed4:	2201      	movs	r2, #1
20000ed6:	711a      	strb	r2, [r3, #4]
	init.GPIO_OType = GPIO_OType_PP;
20000ed8:	003b      	movs	r3, r7
20000eda:	2200      	movs	r2, #0
20000edc:	719a      	strb	r2, [r3, #6]
	init.GPIO_PuPd = GPIO_PuPd_NOPULL;
20000ede:	003b      	movs	r3, r7
20000ee0:	2200      	movs	r2, #0
20000ee2:	71da      	strb	r2, [r3, #7]
	GPIO_Init(GPIOD, &init);
20000ee4:	003b      	movs	r3, r7
20000ee6:	4a20      	ldr	r2, [pc, #128]	; (20000f68 <init_GPIO_Ports+0x1c0>)
20000ee8:	0019      	movs	r1, r3
20000eea:	0010      	movs	r0, r2
20000eec:	f000 fb5e 	bl	200015ac <GPIO_Init>
	
	//konfigurerar inport GPIO D
	GPIO_StructInit(&init);
20000ef0:	003b      	movs	r3, r7
20000ef2:	0018      	movs	r0, r3
20000ef4:	f000 fbe6 	bl	200016c4 <GPIO_StructInit>
	init.GPIO_Pin = GPIO_Pin_0 | GPIO_Pin_2 | GPIO_Pin_4 | GPIO_Pin_6 | GPIO_Pin_8 | GPIO_Pin_10 | GPIO_Pin_12 |GPIO_Pin_14;
20000ef8:	003b      	movs	r3, r7
20000efa:	4a18      	ldr	r2, [pc, #96]	; (20000f5c <init_GPIO_Ports+0x1b4>)
20000efc:	601a      	str	r2, [r3, #0]
	init.GPIO_Mode = GPIO_Mode_IN;
20000efe:	003b      	movs	r3, r7
20000f00:	2200      	movs	r2, #0
20000f02:	711a      	strb	r2, [r3, #4]
	init.GPIO_PuPd = GPIO_PuPd_UP;
20000f04:	003b      	movs	r3, r7
20000f06:	2201      	movs	r2, #1
20000f08:	71da      	strb	r2, [r3, #7]
	GPIO_Init(GPIOD, &init);
20000f0a:	003b      	movs	r3, r7
20000f0c:	4a16      	ldr	r2, [pc, #88]	; (20000f68 <init_GPIO_Ports+0x1c0>)
20000f0e:	0019      	movs	r1, r3
20000f10:	0010      	movs	r0, r2
20000f12:	f000 fb4b 	bl	200015ac <GPIO_Init>

	//GPIO B UTPORTAR
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE);
20000f16:	2101      	movs	r1, #1
20000f18:	2002      	movs	r0, #2
20000f1a:	f7ff fc9d 	bl	20000858 <RCC_AHB1PeriphClockCmd>
	GPIO_StructInit(&init);
20000f1e:	003b      	movs	r3, r7
20000f20:	0018      	movs	r0, r3
20000f22:	f000 fbcf 	bl	200016c4 <GPIO_StructInit>
	init.GPIO_Pin = GPIO_Pin_2;
20000f26:	003b      	movs	r3, r7
20000f28:	2204      	movs	r2, #4
20000f2a:	601a      	str	r2, [r3, #0]
	init.GPIO_Mode = GPIO_Mode_OUT;
20000f2c:	003b      	movs	r3, r7
20000f2e:	2201      	movs	r2, #1
20000f30:	711a      	strb	r2, [r3, #4]
	init.GPIO_OType = GPIO_OType_PP;
20000f32:	003b      	movs	r3, r7
20000f34:	2200      	movs	r2, #0
20000f36:	719a      	strb	r2, [r3, #6]
	init.GPIO_PuPd = GPIO_PuPd_NOPULL;
20000f38:	003b      	movs	r3, r7
20000f3a:	2200      	movs	r2, #0
20000f3c:	71da      	strb	r2, [r3, #7]
	GPIO_Init(GPIOB, &init);
20000f3e:	003b      	movs	r3, r7
20000f40:	4a0a      	ldr	r2, [pc, #40]	; (20000f6c <init_GPIO_Ports+0x1c4>)
20000f42:	0019      	movs	r1, r3
20000f44:	0010      	movs	r0, r2
20000f46:	f000 fb31 	bl	200015ac <GPIO_Init>
20000f4a:	46c0      	nop			; (mov r8, r8)
20000f4c:	46bd      	mov	sp, r7
20000f4e:	b002      	add	sp, #8
20000f50:	bd80      	pop	{r7, pc}
20000f52:	46c0      	nop			; (mov r8, r8)
20000f54:	0000aaaa 	andeq	sl, r0, sl, lsr #21
20000f58:	40021000 	andmi	r1, r2, r0
20000f5c:	00005555 	andeq	r5, r0, r5, asr r5
20000f60:	40020000 	andmi	r0, r2, r0
20000f64:	40020800 	andmi	r0, r2, r0, lsl #16
20000f68:	40020c00 	andmi	r0, r2, r0, lsl #24
20000f6c:	40020400 	andmi	r0, r2, r0, lsl #8

20000f70 <SysTick_Handler>:
GPIO_TypeDef* GPIO_Ports[] = {GPIOE, GPIOA, GPIOC, GPIOD};

// ========================================= SYSTICK ================================================
volatile uint32_t msTicks = 0; /* Variable to store millisecond ticks */
void SysTick_Handler(void)
{ /* SysTick interrupt Handler. */
20000f70:	b580      	push	{r7, lr}
20000f72:	af00      	add	r7, sp, #0
	msTicks++;
20000f74:	4b03      	ldr	r3, [pc, #12]	; (20000f84 <SysTick_Handler+0x14>)
20000f76:	681b      	ldr	r3, [r3, #0]
20000f78:	1c5a      	adds	r2, r3, #1
20000f7a:	4b02      	ldr	r3, [pc, #8]	; (20000f84 <SysTick_Handler+0x14>)
20000f7c:	601a      	str	r2, [r3, #0]
}
20000f7e:	46c0      	nop			; (mov r8, r8)
20000f80:	46bd      	mov	sp, r7
20000f82:	bd80      	pop	{r7, pc}
20000f84:	20002750 	andcs	r2, r0, r0, asr r7

20000f88 <systick_Init>:
void systick_Init(void)
{
20000f88:	b580      	push	{r7, lr}
20000f8a:	b082      	sub	sp, #8
20000f8c:	af00      	add	r7, sp, #0
	// Initiera SysTick.
	*((void (**)(void))0x2001C03C) = SysTick_Handler;
20000f8e:	4b09      	ldr	r3, [pc, #36]	; (20000fb4 <systick_Init+0x2c>)
20000f90:	4a09      	ldr	r2, [pc, #36]	; (20000fb8 <systick_Init+0x30>)
20000f92:	601a      	str	r2, [r3, #0]
	uint32_t returnCode;
	returnCode = SysTick_Config(168000000 / 1000); // Genererar ett SysTick-avbrott varje ms.
20000f94:	4b09      	ldr	r3, [pc, #36]	; (20000fbc <systick_Init+0x34>)
20000f96:	0018      	movs	r0, r3
20000f98:	f7ff f86a 	bl	20000070 <SysTick_Config>
20000f9c:	0003      	movs	r3, r0
20000f9e:	607b      	str	r3, [r7, #4]

	if (returnCode != 0)
20000fa0:	687b      	ldr	r3, [r7, #4]
20000fa2:	2b00      	cmp	r3, #0
20000fa4:	d001      	beq.n	20000faa <systick_Init+0x22>
	{   
		systick_Init();
20000fa6:	f7ff ffef 	bl	20000f88 <systick_Init>
	}
}
20000faa:	46c0      	nop			; (mov r8, r8)
20000fac:	46bd      	mov	sp, r7
20000fae:	b002      	add	sp, #8
20000fb0:	bd80      	pop	{r7, pc}
20000fb2:	46c0      	nop			; (mov r8, r8)
20000fb4:	2001c03c 	andcs	ip, r1, ip, lsr r0
20000fb8:	20000f71 	andcs	r0, r0, r1, ror pc
20000fbc:	00029040 	andeq	r9, r2, r0, asr #32

20000fc0 <delay>:
void delay (int mili){
20000fc0:	b580      	push	{r7, lr}
20000fc2:	b084      	sub	sp, #16
20000fc4:	af00      	add	r7, sp, #0
20000fc6:	6078      	str	r0, [r7, #4]
		int time = msTicks + mili;
20000fc8:	4b07      	ldr	r3, [pc, #28]	; (20000fe8 <delay+0x28>)
20000fca:	681a      	ldr	r2, [r3, #0]
20000fcc:	687b      	ldr	r3, [r7, #4]
20000fce:	18d3      	adds	r3, r2, r3
20000fd0:	60fb      	str	r3, [r7, #12]
		while(time > msTicks);
20000fd2:	46c0      	nop			; (mov r8, r8)
20000fd4:	68fa      	ldr	r2, [r7, #12]
20000fd6:	4b04      	ldr	r3, [pc, #16]	; (20000fe8 <delay+0x28>)
20000fd8:	681b      	ldr	r3, [r3, #0]
20000fda:	429a      	cmp	r2, r3
20000fdc:	d8fa      	bhi.n	20000fd4 <delay+0x14>
	}
20000fde:	46c0      	nop			; (mov r8, r8)
20000fe0:	46bd      	mov	sp, r7
20000fe2:	b004      	add	sp, #16
20000fe4:	bd80      	pop	{r7, pc}
20000fe6:	46c0      	nop			; (mov r8, r8)
20000fe8:	20002750 	andcs	r2, r0, r0, asr r7

20000fec <main>:

void main(void)
{
20000fec:	b5f0      	push	{r4, r5, r6, r7, lr}
20000fee:	b095      	sub	sp, #84	; 0x54
20000ff0:	af00      	add	r7, sp, #0
	init_GPIO_Ports();
20000ff2:	f7ff fed9 	bl	20000da8 <init_GPIO_Ports>
	systick_Init();
20000ff6:	f7ff ffc7 	bl	20000f88 <systick_Init>
	while(msTicks < 2000);
20000ffa:	46c0      	nop			; (mov r8, r8)
20000ffc:	4bd8      	ldr	r3, [pc, #864]	; (20001360 <main+0x374>)
20000ffe:	681b      	ldr	r3, [r3, #0]
20001000:	4ad8      	ldr	r2, [pc, #864]	; (20001364 <main+0x378>)
20001002:	4293      	cmp	r3, r2
20001004:	d9fa      	bls.n	20000ffc <main+0x10>

	//door door1, door2, door3, door4, door5, door6, door8, door9 ,door10, door11, door12, door13,door14,door15,door16, door17, door18, door19, door20, door21, door22, door23, door24 ,door25, door26, door27, door28,door29,door30,door31,door32;
	//door all_doors[32] = {door1, door2, door3, door4, door5, door6, door8, door9 ,door10, door11, door12, door13,door14,door15,door16, door17, door18, door19, door20, door21, door22, door23, door24 ,door25, door26, door27, door28,door29,door30,door31,door32};

	int amountOfActiveDoors = 0;
20001006:	2300      	movs	r3, #0
20001008:	647b      	str	r3, [r7, #68]	; 0x44
	for (int j = 0; j < (sizeof(GPIO_Ports) /sizeof(GPIO_TypeDef *)); j++)
2000100a:	2300      	movs	r3, #0
2000100c:	64bb      	str	r3, [r7, #72]	; 0x48
2000100e:	e01b      	b.n	20001048 <main+0x5c>
	{
		for (int i = 0; i < sizeof(GPIO_Pins) / sizeof(uint16_t); i = i + 2)
20001010:	2300      	movs	r3, #0
20001012:	64fb      	str	r3, [r7, #76]	; 0x4c
20001014:	e012      	b.n	2000103c <main+0x50>
		{
			if(!GPIO_ReadInputDataBit(GPIO_Ports[j], GPIO_Pins[i])){
20001016:	4bd4      	ldr	r3, [pc, #848]	; (20001368 <main+0x37c>)
20001018:	6cba      	ldr	r2, [r7, #72]	; 0x48
2000101a:	0092      	lsls	r2, r2, #2
2000101c:	58d0      	ldr	r0, [r2, r3]
2000101e:	4bd3      	ldr	r3, [pc, #844]	; (2000136c <main+0x380>)
20001020:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
20001022:	0052      	lsls	r2, r2, #1
20001024:	5ad3      	ldrh	r3, [r2, r3]
20001026:	0019      	movs	r1, r3
20001028:	f000 fb89 	bl	2000173e <GPIO_ReadInputDataBit>
2000102c:	1e03      	subs	r3, r0, #0
2000102e:	d102      	bne.n	20001036 <main+0x4a>
				amountOfActiveDoors++;
20001030:	6c7b      	ldr	r3, [r7, #68]	; 0x44
20001032:	3301      	adds	r3, #1
20001034:	647b      	str	r3, [r7, #68]	; 0x44
		for (int i = 0; i < sizeof(GPIO_Pins) / sizeof(uint16_t); i = i + 2)
20001036:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
20001038:	3302      	adds	r3, #2
2000103a:	64fb      	str	r3, [r7, #76]	; 0x4c
2000103c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
2000103e:	2b0f      	cmp	r3, #15
20001040:	d9e9      	bls.n	20001016 <main+0x2a>
	for (int j = 0; j < (sizeof(GPIO_Ports) /sizeof(GPIO_TypeDef *)); j++)
20001042:	6cbb      	ldr	r3, [r7, #72]	; 0x48
20001044:	3301      	adds	r3, #1
20001046:	64bb      	str	r3, [r7, #72]	; 0x48
20001048:	6cbb      	ldr	r3, [r7, #72]	; 0x48
2000104a:	2b03      	cmp	r3, #3
2000104c:	d9e0      	bls.n	20001010 <main+0x24>
			}
		}
	}
	door active_doors[amountOfActiveDoors];
2000104e:	6c7e      	ldr	r6, [r7, #68]	; 0x44
20001050:	1e73      	subs	r3, r6, #1
20001052:	61fb      	str	r3, [r7, #28]
20001054:	0033      	movs	r3, r6
20001056:	60bb      	str	r3, [r7, #8]
20001058:	2300      	movs	r3, #0
2000105a:	60fb      	str	r3, [r7, #12]
2000105c:	68b9      	ldr	r1, [r7, #8]
2000105e:	68fa      	ldr	r2, [r7, #12]
20001060:	000b      	movs	r3, r1
20001062:	0e1b      	lsrs	r3, r3, #24
20001064:	0010      	movs	r0, r2
20001066:	0200      	lsls	r0, r0, #8
20001068:	6178      	str	r0, [r7, #20]
2000106a:	6978      	ldr	r0, [r7, #20]
2000106c:	4318      	orrs	r0, r3
2000106e:	6178      	str	r0, [r7, #20]
20001070:	000b      	movs	r3, r1
20001072:	021b      	lsls	r3, r3, #8
20001074:	613b      	str	r3, [r7, #16]
20001076:	0033      	movs	r3, r6
20001078:	603b      	str	r3, [r7, #0]
2000107a:	2300      	movs	r3, #0
2000107c:	607b      	str	r3, [r7, #4]
2000107e:	6839      	ldr	r1, [r7, #0]
20001080:	687a      	ldr	r2, [r7, #4]
20001082:	000b      	movs	r3, r1
20001084:	0e1b      	lsrs	r3, r3, #24
20001086:	0010      	movs	r0, r2
20001088:	0205      	lsls	r5, r0, #8
2000108a:	431d      	orrs	r5, r3
2000108c:	000b      	movs	r3, r1
2000108e:	021c      	lsls	r4, r3, #8
20001090:	0033      	movs	r3, r6
20001092:	015b      	lsls	r3, r3, #5
20001094:	3303      	adds	r3, #3
20001096:	3307      	adds	r3, #7
20001098:	08db      	lsrs	r3, r3, #3
2000109a:	00db      	lsls	r3, r3, #3
2000109c:	466a      	mov	r2, sp
2000109e:	1ad3      	subs	r3, r2, r3
200010a0:	469d      	mov	sp, r3
200010a2:	466b      	mov	r3, sp
200010a4:	3303      	adds	r3, #3
200010a6:	089b      	lsrs	r3, r3, #2
200010a8:	009b      	lsls	r3, r3, #2
200010aa:	61bb      	str	r3, [r7, #24]
	int counter = 0;
200010ac:	2300      	movs	r3, #0
200010ae:	643b      	str	r3, [r7, #64]	; 0x40
	for (int j = 0; j < (sizeof(GPIO_Ports) /sizeof(GPIO_TypeDef *)); j++)
200010b0:	2300      	movs	r3, #0
200010b2:	63fb      	str	r3, [r7, #60]	; 0x3c
200010b4:	e051      	b.n	2000115a <main+0x16e>
	{
		for (int i = 0; i < sizeof(GPIO_Pins) / sizeof(uint16_t); i = i + 2)
200010b6:	2300      	movs	r3, #0
200010b8:	63bb      	str	r3, [r7, #56]	; 0x38
200010ba:	e048      	b.n	2000114e <main+0x162>
		{
			if(!GPIO_ReadInputDataBit(GPIO_Ports[j], GPIO_Pins[i])){
200010bc:	4baa      	ldr	r3, [pc, #680]	; (20001368 <main+0x37c>)
200010be:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
200010c0:	0092      	lsls	r2, r2, #2
200010c2:	58d0      	ldr	r0, [r2, r3]
200010c4:	4ba9      	ldr	r3, [pc, #676]	; (2000136c <main+0x380>)
200010c6:	6bba      	ldr	r2, [r7, #56]	; 0x38
200010c8:	0052      	lsls	r2, r2, #1
200010ca:	5ad3      	ldrh	r3, [r2, r3]
200010cc:	0019      	movs	r1, r3
200010ce:	f000 fb36 	bl	2000173e <GPIO_ReadInputDataBit>
200010d2:	1e03      	subs	r3, r0, #0
200010d4:	d138      	bne.n	20001148 <main+0x15c>
				active_doors[counter].GPIO_read = GPIO_Pins[i];
200010d6:	4ba5      	ldr	r3, [pc, #660]	; (2000136c <main+0x380>)
200010d8:	6bba      	ldr	r2, [r7, #56]	; 0x38
200010da:	0052      	lsls	r2, r2, #1
200010dc:	5ad3      	ldrh	r3, [r2, r3]
200010de:	0019      	movs	r1, r3
200010e0:	69ba      	ldr	r2, [r7, #24]
200010e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
200010e4:	015b      	lsls	r3, r3, #5
200010e6:	18d3      	adds	r3, r2, r3
200010e8:	3314      	adds	r3, #20
200010ea:	6019      	str	r1, [r3, #0]
				active_doors[counter].GPIO_lamp = GPIO_Pins[i+1];
200010ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
200010ee:	1c5a      	adds	r2, r3, #1
200010f0:	4b9e      	ldr	r3, [pc, #632]	; (2000136c <main+0x380>)
200010f2:	0052      	lsls	r2, r2, #1
200010f4:	5ad3      	ldrh	r3, [r2, r3]
200010f6:	0019      	movs	r1, r3
200010f8:	69ba      	ldr	r2, [r7, #24]
200010fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
200010fc:	015b      	lsls	r3, r3, #5
200010fe:	18d3      	adds	r3, r2, r3
20001100:	3310      	adds	r3, #16
20001102:	6019      	str	r1, [r3, #0]
				active_doors[counter].controlbits = 0;
20001104:	69ba      	ldr	r2, [r7, #24]
20001106:	6c3b      	ldr	r3, [r7, #64]	; 0x40
20001108:	015b      	lsls	r3, r3, #5
2000110a:	18d3      	adds	r3, r2, r3
2000110c:	3304      	adds	r3, #4
2000110e:	2200      	movs	r2, #0
20001110:	601a      	str	r2, [r3, #0]
				active_doors[counter].time_larm = 0;
20001112:	69ba      	ldr	r2, [r7, #24]
20001114:	6c3b      	ldr	r3, [r7, #64]	; 0x40
20001116:	015b      	lsls	r3, r3, #5
20001118:	18d3      	adds	r3, r2, r3
2000111a:	3308      	adds	r3, #8
2000111c:	2200      	movs	r2, #0
2000111e:	701a      	strb	r2, [r3, #0]
				active_doors[counter].time_central_larm = 2;
20001120:	69ba      	ldr	r2, [r7, #24]
20001122:	6c3b      	ldr	r3, [r7, #64]	; 0x40
20001124:	015b      	lsls	r3, r3, #5
20001126:	18d3      	adds	r3, r2, r3
20001128:	3309      	adds	r3, #9
2000112a:	2202      	movs	r2, #2
2000112c:	701a      	strb	r2, [r3, #0]
				active_doors[counter].GPIO_type = GPIO_Ports[j];
2000112e:	4b8e      	ldr	r3, [pc, #568]	; (20001368 <main+0x37c>)
20001130:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
20001132:	0092      	lsls	r2, r2, #2
20001134:	58d2      	ldr	r2, [r2, r3]
20001136:	69b9      	ldr	r1, [r7, #24]
20001138:	6c3b      	ldr	r3, [r7, #64]	; 0x40
2000113a:	015b      	lsls	r3, r3, #5
2000113c:	18cb      	adds	r3, r1, r3
2000113e:	331c      	adds	r3, #28
20001140:	601a      	str	r2, [r3, #0]
				//active_doors[counter] = all_doors[counter];
				counter++;
20001142:	6c3b      	ldr	r3, [r7, #64]	; 0x40
20001144:	3301      	adds	r3, #1
20001146:	643b      	str	r3, [r7, #64]	; 0x40
		for (int i = 0; i < sizeof(GPIO_Pins) / sizeof(uint16_t); i = i + 2)
20001148:	6bbb      	ldr	r3, [r7, #56]	; 0x38
2000114a:	3302      	adds	r3, #2
2000114c:	63bb      	str	r3, [r7, #56]	; 0x38
2000114e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
20001150:	2b0f      	cmp	r3, #15
20001152:	d9b3      	bls.n	200010bc <main+0xd0>
	for (int j = 0; j < (sizeof(GPIO_Ports) /sizeof(GPIO_TypeDef *)); j++)
20001154:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
20001156:	3301      	adds	r3, #1
20001158:	63fb      	str	r3, [r7, #60]	; 0x3c
2000115a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
2000115c:	2b03      	cmp	r3, #3
2000115e:	d9aa      	bls.n	200010b6 <main+0xca>
			}
		}
	}
	// ================================== LIGHTS =========================================================
	for (int i = 0; i < sizeof(active_doors)/sizeof(active_doors[0]); i++) //CHRISTMAST LIGHTS FTW
20001160:	2300      	movs	r3, #0
20001162:	637b      	str	r3, [r7, #52]	; 0x34
20001164:	e015      	b.n	20001192 <main+0x1a6>
	{
		GPIO_SetBits(active_doors[i].GPIO_type, active_doors[i].GPIO_lamp);
20001166:	69ba      	ldr	r2, [r7, #24]
20001168:	6b7b      	ldr	r3, [r7, #52]	; 0x34
2000116a:	015b      	lsls	r3, r3, #5
2000116c:	18d3      	adds	r3, r2, r3
2000116e:	331c      	adds	r3, #28
20001170:	6818      	ldr	r0, [r3, #0]
20001172:	69ba      	ldr	r2, [r7, #24]
20001174:	6b7b      	ldr	r3, [r7, #52]	; 0x34
20001176:	015b      	lsls	r3, r3, #5
20001178:	18d3      	adds	r3, r2, r3
2000117a:	3310      	adds	r3, #16
2000117c:	681b      	ldr	r3, [r3, #0]
2000117e:	b29b      	uxth	r3, r3
20001180:	0019      	movs	r1, r3
20001182:	f000 fb34 	bl	200017ee <GPIO_SetBits>
		delay(100);	
20001186:	2064      	movs	r0, #100	; 0x64
20001188:	f7ff ff1a 	bl	20000fc0 <delay>
	for (int i = 0; i < sizeof(active_doors)/sizeof(active_doors[0]); i++) //CHRISTMAST LIGHTS FTW
2000118c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
2000118e:	3301      	adds	r3, #1
20001190:	637b      	str	r3, [r7, #52]	; 0x34
20001192:	0033      	movs	r3, r6
20001194:	015b      	lsls	r3, r3, #5
20001196:	095a      	lsrs	r2, r3, #5
20001198:	6b7b      	ldr	r3, [r7, #52]	; 0x34
2000119a:	429a      	cmp	r2, r3
2000119c:	d8e3      	bhi.n	20001166 <main+0x17a>
		
	}
	for (int i = sizeof(active_doors)/sizeof(active_doors[0]); i >= 0 ; i--) //CHRISTMAST LIGHTS FTW
2000119e:	0033      	movs	r3, r6
200011a0:	015b      	lsls	r3, r3, #5
200011a2:	095b      	lsrs	r3, r3, #5
200011a4:	633b      	str	r3, [r7, #48]	; 0x30
200011a6:	e015      	b.n	200011d4 <main+0x1e8>
	{
		GPIO_ResetBits(active_doors[i].GPIO_type, active_doors[i].GPIO_lamp);
200011a8:	69ba      	ldr	r2, [r7, #24]
200011aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
200011ac:	015b      	lsls	r3, r3, #5
200011ae:	18d3      	adds	r3, r2, r3
200011b0:	331c      	adds	r3, #28
200011b2:	6818      	ldr	r0, [r3, #0]
200011b4:	69ba      	ldr	r2, [r7, #24]
200011b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
200011b8:	015b      	lsls	r3, r3, #5
200011ba:	18d3      	adds	r3, r2, r3
200011bc:	3310      	adds	r3, #16
200011be:	681b      	ldr	r3, [r3, #0]
200011c0:	b29b      	uxth	r3, r3
200011c2:	0019      	movs	r1, r3
200011c4:	f000 fb22 	bl	2000180c <GPIO_ResetBits>
		delay(100);
200011c8:	2064      	movs	r0, #100	; 0x64
200011ca:	f7ff fef9 	bl	20000fc0 <delay>
	for (int i = sizeof(active_doors)/sizeof(active_doors[0]); i >= 0 ; i--) //CHRISTMAST LIGHTS FTW
200011ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
200011d0:	3b01      	subs	r3, #1
200011d2:	633b      	str	r3, [r7, #48]	; 0x30
200011d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
200011d6:	2b00      	cmp	r3, #0
200011d8:	dae6      	bge.n	200011a8 <main+0x1bc>
	}
	delay(200);
200011da:	20c8      	movs	r0, #200	; 0xc8
200011dc:	f7ff fef0 	bl	20000fc0 <delay>
	for (int i = 0; i < sizeof(active_doors)/sizeof(active_doors[0]); i++) //CHRISTMAST LIGHTS FTW
200011e0:	2300      	movs	r3, #0
200011e2:	62fb      	str	r3, [r7, #44]	; 0x2c
200011e4:	e012      	b.n	2000120c <main+0x220>
	{
		GPIO_SetBits(active_doors[i].GPIO_type, active_doors[i].GPIO_lamp);
200011e6:	69ba      	ldr	r2, [r7, #24]
200011e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
200011ea:	015b      	lsls	r3, r3, #5
200011ec:	18d3      	adds	r3, r2, r3
200011ee:	331c      	adds	r3, #28
200011f0:	6818      	ldr	r0, [r3, #0]
200011f2:	69ba      	ldr	r2, [r7, #24]
200011f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
200011f6:	015b      	lsls	r3, r3, #5
200011f8:	18d3      	adds	r3, r2, r3
200011fa:	3310      	adds	r3, #16
200011fc:	681b      	ldr	r3, [r3, #0]
200011fe:	b29b      	uxth	r3, r3
20001200:	0019      	movs	r1, r3
20001202:	f000 faf4 	bl	200017ee <GPIO_SetBits>
	for (int i = 0; i < sizeof(active_doors)/sizeof(active_doors[0]); i++) //CHRISTMAST LIGHTS FTW
20001206:	6afb      	ldr	r3, [r7, #44]	; 0x2c
20001208:	3301      	adds	r3, #1
2000120a:	62fb      	str	r3, [r7, #44]	; 0x2c
2000120c:	0033      	movs	r3, r6
2000120e:	015b      	lsls	r3, r3, #5
20001210:	095a      	lsrs	r2, r3, #5
20001212:	6afb      	ldr	r3, [r7, #44]	; 0x2c
20001214:	429a      	cmp	r2, r3
20001216:	d8e6      	bhi.n	200011e6 <main+0x1fa>
	}
	delay(3000);
20001218:	4b55      	ldr	r3, [pc, #340]	; (20001370 <main+0x384>)
2000121a:	0018      	movs	r0, r3
2000121c:	f7ff fed0 	bl	20000fc0 <delay>
	for (int i = 0; i < sizeof(active_doors)/sizeof(active_doors[0]); i++) //CHRISTMAST LIGHTS FTW
20001220:	2300      	movs	r3, #0
20001222:	62bb      	str	r3, [r7, #40]	; 0x28
20001224:	e012      	b.n	2000124c <main+0x260>
	{
		GPIO_ResetBits(active_doors[i].GPIO_type, active_doors[i].GPIO_lamp);
20001226:	69ba      	ldr	r2, [r7, #24]
20001228:	6abb      	ldr	r3, [r7, #40]	; 0x28
2000122a:	015b      	lsls	r3, r3, #5
2000122c:	18d3      	adds	r3, r2, r3
2000122e:	331c      	adds	r3, #28
20001230:	6818      	ldr	r0, [r3, #0]
20001232:	69ba      	ldr	r2, [r7, #24]
20001234:	6abb      	ldr	r3, [r7, #40]	; 0x28
20001236:	015b      	lsls	r3, r3, #5
20001238:	18d3      	adds	r3, r2, r3
2000123a:	3310      	adds	r3, #16
2000123c:	681b      	ldr	r3, [r3, #0]
2000123e:	b29b      	uxth	r3, r3
20001240:	0019      	movs	r1, r3
20001242:	f000 fae3 	bl	2000180c <GPIO_ResetBits>
	for (int i = 0; i < sizeof(active_doors)/sizeof(active_doors[0]); i++) //CHRISTMAST LIGHTS FTW
20001246:	6abb      	ldr	r3, [r7, #40]	; 0x28
20001248:	3301      	adds	r3, #1
2000124a:	62bb      	str	r3, [r7, #40]	; 0x28
2000124c:	0033      	movs	r3, r6
2000124e:	015b      	lsls	r3, r3, #5
20001250:	095a      	lsrs	r2, r3, #5
20001252:	6abb      	ldr	r3, [r7, #40]	; 0x28
20001254:	429a      	cmp	r2, r3
20001256:	d8e6      	bhi.n	20001226 <main+0x23a>
	}
	

	GPIO_SetBits(GPIOB, GPIO_Pin_2);
20001258:	4b46      	ldr	r3, [pc, #280]	; (20001374 <main+0x388>)
2000125a:	2104      	movs	r1, #4
2000125c:	0018      	movs	r0, r3
2000125e:	f000 fac6 	bl	200017ee <GPIO_SetBits>
	//active_doors[2].controlbits |= 4;
	while (1)
	{
		for (int i = 0; i < sizeof(active_doors)/sizeof(active_doors[0]); i++)
20001262:	2300      	movs	r3, #0
20001264:	627b      	str	r3, [r7, #36]	; 0x24
20001266:	e0dd      	b.n	20001424 <main+0x438>
		{
			if (!(active_doors[i].controlbits & 4))
20001268:	69ba      	ldr	r2, [r7, #24]
2000126a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
2000126c:	015b      	lsls	r3, r3, #5
2000126e:	18d3      	adds	r3, r2, r3
20001270:	3304      	adds	r3, #4
20001272:	681b      	ldr	r3, [r3, #0]
20001274:	2204      	movs	r2, #4
20001276:	4013      	ands	r3, r2
20001278:	d000      	beq.n	2000127c <main+0x290>
2000127a:	e0d0      	b.n	2000141e <main+0x432>
				{
				if (!GPIO_ReadInputDataBit(active_doors[i].GPIO_type, active_doors[i].GPIO_read)){ //GPIO pinnen är noll ifall dörren är stängd därför !
2000127c:	69ba      	ldr	r2, [r7, #24]
2000127e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20001280:	015b      	lsls	r3, r3, #5
20001282:	18d3      	adds	r3, r2, r3
20001284:	331c      	adds	r3, #28
20001286:	6818      	ldr	r0, [r3, #0]
20001288:	69ba      	ldr	r2, [r7, #24]
2000128a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
2000128c:	015b      	lsls	r3, r3, #5
2000128e:	18d3      	adds	r3, r2, r3
20001290:	3314      	adds	r3, #20
20001292:	681b      	ldr	r3, [r3, #0]
20001294:	b29b      	uxth	r3, r3
20001296:	0019      	movs	r1, r3
20001298:	f000 fa51 	bl	2000173e <GPIO_ReadInputDataBit>
2000129c:	1e03      	subs	r3, r0, #0
2000129e:	d10e      	bne.n	200012be <main+0x2d2>
					active_doors[i].controlbits &= 0xFFFC; //Nollställer kontrollbiten för ifall en dörr är öppen och spam kontrollbiten för 
200012a0:	69ba      	ldr	r2, [r7, #24]
200012a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
200012a4:	015b      	lsls	r3, r3, #5
200012a6:	18d3      	adds	r3, r2, r3
200012a8:	3304      	adds	r3, #4
200012aa:	681b      	ldr	r3, [r3, #0]
200012ac:	4a32      	ldr	r2, [pc, #200]	; (20001378 <main+0x38c>)
200012ae:	401a      	ands	r2, r3
200012b0:	69b9      	ldr	r1, [r7, #24]
200012b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
200012b4:	015b      	lsls	r3, r3, #5
200012b6:	18cb      	adds	r3, r1, r3
200012b8:	3304      	adds	r3, #4
200012ba:	601a      	str	r2, [r3, #0]
200012bc:	e01e      	b.n	200012fc <main+0x310>
					//att skicka medelande till centralenheten, när den detekteras som stängd
					
				}
				else{
					if (!active_doors[i].controlbits & 1) // Kollar så att dörren inte larmar sen innan så larmtick inte uppdateras hela tiden
200012be:	69ba      	ldr	r2, [r7, #24]
200012c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
200012c2:	015b      	lsls	r3, r3, #5
200012c4:	18d3      	adds	r3, r2, r3
200012c6:	3304      	adds	r3, #4
200012c8:	681b      	ldr	r3, [r3, #0]
200012ca:	2b00      	cmp	r3, #0
200012cc:	d108      	bne.n	200012e0 <main+0x2f4>
					{
						active_doors[i].larmTick = msTicks;
200012ce:	4b24      	ldr	r3, [pc, #144]	; (20001360 <main+0x374>)
200012d0:	681b      	ldr	r3, [r3, #0]
200012d2:	0019      	movs	r1, r3
200012d4:	69ba      	ldr	r2, [r7, #24]
200012d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
200012d8:	015b      	lsls	r3, r3, #5
200012da:	18d3      	adds	r3, r2, r3
200012dc:	3318      	adds	r3, #24
200012de:	6019      	str	r1, [r3, #0]
					}
					active_doors[i].controlbits |= 1; // sätter dörrens larm kontrollbit till 1.
200012e0:	69ba      	ldr	r2, [r7, #24]
200012e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
200012e4:	015b      	lsls	r3, r3, #5
200012e6:	18d3      	adds	r3, r2, r3
200012e8:	3304      	adds	r3, #4
200012ea:	681b      	ldr	r3, [r3, #0]
200012ec:	2201      	movs	r2, #1
200012ee:	431a      	orrs	r2, r3
200012f0:	69b9      	ldr	r1, [r7, #24]
200012f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
200012f4:	015b      	lsls	r3, r3, #5
200012f6:	18cb      	adds	r3, r1, r3
200012f8:	3304      	adds	r3, #4
200012fa:	601a      	str	r2, [r3, #0]
				}
				for (int i = 0; i < sizeof(active_doors)/sizeof(active_doors[0]); i++)
200012fc:	2300      	movs	r3, #0
200012fe:	623b      	str	r3, [r7, #32]
20001300:	e086      	b.n	20001410 <main+0x424>
				{
					if (active_doors[i].controlbits & 1 && msTicks > (active_doors[i].larmTick + 1000 * 10 * active_doors[i].time_larm))
20001302:	69ba      	ldr	r2, [r7, #24]
20001304:	6a3b      	ldr	r3, [r7, #32]
20001306:	015b      	lsls	r3, r3, #5
20001308:	18d3      	adds	r3, r2, r3
2000130a:	3304      	adds	r3, #4
2000130c:	681b      	ldr	r3, [r3, #0]
2000130e:	2201      	movs	r2, #1
20001310:	4013      	ands	r3, r2
20001312:	d035      	beq.n	20001380 <main+0x394>
20001314:	69ba      	ldr	r2, [r7, #24]
20001316:	6a3b      	ldr	r3, [r7, #32]
20001318:	015b      	lsls	r3, r3, #5
2000131a:	18d3      	adds	r3, r2, r3
2000131c:	3318      	adds	r3, #24
2000131e:	681a      	ldr	r2, [r3, #0]
20001320:	69b9      	ldr	r1, [r7, #24]
20001322:	6a3b      	ldr	r3, [r7, #32]
20001324:	015b      	lsls	r3, r3, #5
20001326:	18cb      	adds	r3, r1, r3
20001328:	3308      	adds	r3, #8
2000132a:	781b      	ldrb	r3, [r3, #0]
2000132c:	0019      	movs	r1, r3
2000132e:	4b13      	ldr	r3, [pc, #76]	; (2000137c <main+0x390>)
20001330:	434b      	muls	r3, r1
20001332:	18d3      	adds	r3, r2, r3
20001334:	001a      	movs	r2, r3
20001336:	4b0a      	ldr	r3, [pc, #40]	; (20001360 <main+0x374>)
20001338:	681b      	ldr	r3, [r3, #0]
2000133a:	429a      	cmp	r2, r3
2000133c:	d220      	bcs.n	20001380 <main+0x394>
					{
						GPIO_SetBits(active_doors[i].GPIO_type, active_doors[i].GPIO_lamp); // tänder lampan ifall tiden för att dörren ska larma har gått
2000133e:	69ba      	ldr	r2, [r7, #24]
20001340:	6a3b      	ldr	r3, [r7, #32]
20001342:	015b      	lsls	r3, r3, #5
20001344:	18d3      	adds	r3, r2, r3
20001346:	331c      	adds	r3, #28
20001348:	6818      	ldr	r0, [r3, #0]
2000134a:	69ba      	ldr	r2, [r7, #24]
2000134c:	6a3b      	ldr	r3, [r7, #32]
2000134e:	015b      	lsls	r3, r3, #5
20001350:	18d3      	adds	r3, r2, r3
20001352:	3310      	adds	r3, #16
20001354:	681b      	ldr	r3, [r3, #0]
20001356:	b29b      	uxth	r3, r3
20001358:	0019      	movs	r1, r3
2000135a:	f000 fa48 	bl	200017ee <GPIO_SetBits>
2000135e:	e01f      	b.n	200013a0 <main+0x3b4>
20001360:	20002750 	andcs	r2, r0, r0, asr r7
20001364:	000007cf 	andeq	r0, r0, pc, asr #15
20001368:	20002784 	andcs	r2, r0, r4, lsl #15
2000136c:	20002764 	andcs	r2, r0, r4, ror #14
20001370:	00000bb8 			; <UNDEFINED> instruction: 0x00000bb8
20001374:	40020400 	andmi	r0, r2, r0, lsl #8
20001378:	0000fffc 	strdeq	pc, [r0], -ip
2000137c:	00002710 	andeq	r2, r0, r0, lsl r7
					}
					else
					{
						GPIO_ResetBits(active_doors[i].GPIO_type, active_doors[i].GPIO_lamp);	// släcker lampan annars
20001380:	69ba      	ldr	r2, [r7, #24]
20001382:	6a3b      	ldr	r3, [r7, #32]
20001384:	015b      	lsls	r3, r3, #5
20001386:	18d3      	adds	r3, r2, r3
20001388:	331c      	adds	r3, #28
2000138a:	6818      	ldr	r0, [r3, #0]
2000138c:	69ba      	ldr	r2, [r7, #24]
2000138e:	6a3b      	ldr	r3, [r7, #32]
20001390:	015b      	lsls	r3, r3, #5
20001392:	18d3      	adds	r3, r2, r3
20001394:	3310      	adds	r3, #16
20001396:	681b      	ldr	r3, [r3, #0]
20001398:	b29b      	uxth	r3, r3
2000139a:	0019      	movs	r1, r3
2000139c:	f000 fa36 	bl	2000180c <GPIO_ResetBits>
					}
					if (active_doors[i].controlbits & 1 && msTicks > (active_doors[i].larmTick + 1000 * 10 * active_doors[i].time_central_larm) && active_doors[i].controlbits & 2)
200013a0:	69ba      	ldr	r2, [r7, #24]
200013a2:	6a3b      	ldr	r3, [r7, #32]
200013a4:	015b      	lsls	r3, r3, #5
200013a6:	18d3      	adds	r3, r2, r3
200013a8:	3304      	adds	r3, #4
200013aa:	681b      	ldr	r3, [r3, #0]
200013ac:	2201      	movs	r2, #1
200013ae:	4013      	ands	r3, r2
200013b0:	d02b      	beq.n	2000140a <main+0x41e>
200013b2:	69ba      	ldr	r2, [r7, #24]
200013b4:	6a3b      	ldr	r3, [r7, #32]
200013b6:	015b      	lsls	r3, r3, #5
200013b8:	18d3      	adds	r3, r2, r3
200013ba:	3318      	adds	r3, #24
200013bc:	681a      	ldr	r2, [r3, #0]
200013be:	69b9      	ldr	r1, [r7, #24]
200013c0:	6a3b      	ldr	r3, [r7, #32]
200013c2:	015b      	lsls	r3, r3, #5
200013c4:	18cb      	adds	r3, r1, r3
200013c6:	3309      	adds	r3, #9
200013c8:	781b      	ldrb	r3, [r3, #0]
200013ca:	0019      	movs	r1, r3
200013cc:	4b19      	ldr	r3, [pc, #100]	; (20001434 <main+0x448>)
200013ce:	434b      	muls	r3, r1
200013d0:	18d3      	adds	r3, r2, r3
200013d2:	001a      	movs	r2, r3
200013d4:	4b18      	ldr	r3, [pc, #96]	; (20001438 <main+0x44c>)
200013d6:	681b      	ldr	r3, [r3, #0]
200013d8:	429a      	cmp	r2, r3
200013da:	d216      	bcs.n	2000140a <main+0x41e>
200013dc:	69ba      	ldr	r2, [r7, #24]
200013de:	6a3b      	ldr	r3, [r7, #32]
200013e0:	015b      	lsls	r3, r3, #5
200013e2:	18d3      	adds	r3, r2, r3
200013e4:	3304      	adds	r3, #4
200013e6:	681b      	ldr	r3, [r3, #0]
200013e8:	2202      	movs	r2, #2
200013ea:	4013      	ands	r3, r2
200013ec:	d00d      	beq.n	2000140a <main+0x41e>
					{
						active_doors[i].controlbits |= 2;
200013ee:	69ba      	ldr	r2, [r7, #24]
200013f0:	6a3b      	ldr	r3, [r7, #32]
200013f2:	015b      	lsls	r3, r3, #5
200013f4:	18d3      	adds	r3, r2, r3
200013f6:	3304      	adds	r3, #4
200013f8:	681b      	ldr	r3, [r3, #0]
200013fa:	2202      	movs	r2, #2
200013fc:	431a      	orrs	r2, r3
200013fe:	69b9      	ldr	r1, [r7, #24]
20001400:	6a3b      	ldr	r3, [r7, #32]
20001402:	015b      	lsls	r3, r3, #5
20001404:	18cb      	adds	r3, r1, r3
20001406:	3304      	adds	r3, #4
20001408:	601a      	str	r2, [r3, #0]
				for (int i = 0; i < sizeof(active_doors)/sizeof(active_doors[0]); i++)
2000140a:	6a3b      	ldr	r3, [r7, #32]
2000140c:	3301      	adds	r3, #1
2000140e:	623b      	str	r3, [r7, #32]
20001410:	0033      	movs	r3, r6
20001412:	015b      	lsls	r3, r3, #5
20001414:	095a      	lsrs	r2, r3, #5
20001416:	6a3b      	ldr	r3, [r7, #32]
20001418:	429a      	cmp	r2, r3
2000141a:	d900      	bls.n	2000141e <main+0x432>
2000141c:	e771      	b.n	20001302 <main+0x316>
		for (int i = 0; i < sizeof(active_doors)/sizeof(active_doors[0]); i++)
2000141e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20001420:	3301      	adds	r3, #1
20001422:	627b      	str	r3, [r7, #36]	; 0x24
20001424:	0033      	movs	r3, r6
20001426:	015b      	lsls	r3, r3, #5
20001428:	095a      	lsrs	r2, r3, #5
2000142a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
2000142c:	429a      	cmp	r2, r3
2000142e:	d900      	bls.n	20001432 <main+0x446>
20001430:	e71a      	b.n	20001268 <main+0x27c>
20001432:	e716      	b.n	20001262 <main+0x276>
20001434:	00002710 	andeq	r2, r0, r0, lsl r7
20001438:	20002750 	andcs	r2, r0, r0, asr r7

2000143c <GPIO_DeInit>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F42xxx/43xxx devices.
  *                      x can be (A, B, C, D and H) to select the GPIO peripheral for STM32F401xx devices.  
  * @retval None
  */
void GPIO_DeInit(GPIO_TypeDef* GPIOx)
{
2000143c:	b580      	push	{r7, lr}
2000143e:	b082      	sub	sp, #8
20001440:	af00      	add	r7, sp, #0
20001442:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  if (GPIOx == GPIOA)
20001444:	687b      	ldr	r3, [r7, #4]
20001446:	4a4e      	ldr	r2, [pc, #312]	; (20001580 <GPIO_DeInit+0x144>)
20001448:	4293      	cmp	r3, r2
2000144a:	d108      	bne.n	2000145e <GPIO_DeInit+0x22>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, ENABLE);
2000144c:	2101      	movs	r1, #1
2000144e:	2001      	movs	r0, #1
20001450:	f7ff faa2 	bl	20000998 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, DISABLE);
20001454:	2100      	movs	r1, #0
20001456:	2001      	movs	r0, #1
20001458:	f7ff fa9e 	bl	20000998 <RCC_AHB1PeriphResetCmd>
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, ENABLE);
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, DISABLE);
    }
  }
}
2000145c:	e08c      	b.n	20001578 <GPIO_DeInit+0x13c>
  else if (GPIOx == GPIOB)
2000145e:	687b      	ldr	r3, [r7, #4]
20001460:	4a48      	ldr	r2, [pc, #288]	; (20001584 <GPIO_DeInit+0x148>)
20001462:	4293      	cmp	r3, r2
20001464:	d108      	bne.n	20001478 <GPIO_DeInit+0x3c>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, ENABLE);
20001466:	2101      	movs	r1, #1
20001468:	2002      	movs	r0, #2
2000146a:	f7ff fa95 	bl	20000998 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, DISABLE);
2000146e:	2100      	movs	r1, #0
20001470:	2002      	movs	r0, #2
20001472:	f7ff fa91 	bl	20000998 <RCC_AHB1PeriphResetCmd>
}
20001476:	e07f      	b.n	20001578 <GPIO_DeInit+0x13c>
  else if (GPIOx == GPIOC)
20001478:	687b      	ldr	r3, [r7, #4]
2000147a:	4a43      	ldr	r2, [pc, #268]	; (20001588 <GPIO_DeInit+0x14c>)
2000147c:	4293      	cmp	r3, r2
2000147e:	d108      	bne.n	20001492 <GPIO_DeInit+0x56>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, ENABLE);
20001480:	2101      	movs	r1, #1
20001482:	2004      	movs	r0, #4
20001484:	f7ff fa88 	bl	20000998 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, DISABLE);
20001488:	2100      	movs	r1, #0
2000148a:	2004      	movs	r0, #4
2000148c:	f7ff fa84 	bl	20000998 <RCC_AHB1PeriphResetCmd>
}
20001490:	e072      	b.n	20001578 <GPIO_DeInit+0x13c>
  else if (GPIOx == GPIOD)
20001492:	687b      	ldr	r3, [r7, #4]
20001494:	4a3d      	ldr	r2, [pc, #244]	; (2000158c <GPIO_DeInit+0x150>)
20001496:	4293      	cmp	r3, r2
20001498:	d108      	bne.n	200014ac <GPIO_DeInit+0x70>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, ENABLE);
2000149a:	2101      	movs	r1, #1
2000149c:	2008      	movs	r0, #8
2000149e:	f7ff fa7b 	bl	20000998 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, DISABLE);
200014a2:	2100      	movs	r1, #0
200014a4:	2008      	movs	r0, #8
200014a6:	f7ff fa77 	bl	20000998 <RCC_AHB1PeriphResetCmd>
}
200014aa:	e065      	b.n	20001578 <GPIO_DeInit+0x13c>
  else if (GPIOx == GPIOE)
200014ac:	687b      	ldr	r3, [r7, #4]
200014ae:	4a38      	ldr	r2, [pc, #224]	; (20001590 <GPIO_DeInit+0x154>)
200014b0:	4293      	cmp	r3, r2
200014b2:	d108      	bne.n	200014c6 <GPIO_DeInit+0x8a>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, ENABLE);
200014b4:	2101      	movs	r1, #1
200014b6:	2010      	movs	r0, #16
200014b8:	f7ff fa6e 	bl	20000998 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, DISABLE);
200014bc:	2100      	movs	r1, #0
200014be:	2010      	movs	r0, #16
200014c0:	f7ff fa6a 	bl	20000998 <RCC_AHB1PeriphResetCmd>
}
200014c4:	e058      	b.n	20001578 <GPIO_DeInit+0x13c>
  else if (GPIOx == GPIOF)
200014c6:	687b      	ldr	r3, [r7, #4]
200014c8:	4a32      	ldr	r2, [pc, #200]	; (20001594 <GPIO_DeInit+0x158>)
200014ca:	4293      	cmp	r3, r2
200014cc:	d108      	bne.n	200014e0 <GPIO_DeInit+0xa4>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, ENABLE);
200014ce:	2101      	movs	r1, #1
200014d0:	2020      	movs	r0, #32
200014d2:	f7ff fa61 	bl	20000998 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, DISABLE);
200014d6:	2100      	movs	r1, #0
200014d8:	2020      	movs	r0, #32
200014da:	f7ff fa5d 	bl	20000998 <RCC_AHB1PeriphResetCmd>
}
200014de:	e04b      	b.n	20001578 <GPIO_DeInit+0x13c>
  else if (GPIOx == GPIOG)
200014e0:	687b      	ldr	r3, [r7, #4]
200014e2:	4a2d      	ldr	r2, [pc, #180]	; (20001598 <GPIO_DeInit+0x15c>)
200014e4:	4293      	cmp	r3, r2
200014e6:	d108      	bne.n	200014fa <GPIO_DeInit+0xbe>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, ENABLE);
200014e8:	2101      	movs	r1, #1
200014ea:	2040      	movs	r0, #64	; 0x40
200014ec:	f7ff fa54 	bl	20000998 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, DISABLE);
200014f0:	2100      	movs	r1, #0
200014f2:	2040      	movs	r0, #64	; 0x40
200014f4:	f7ff fa50 	bl	20000998 <RCC_AHB1PeriphResetCmd>
}
200014f8:	e03e      	b.n	20001578 <GPIO_DeInit+0x13c>
  else if (GPIOx == GPIOH)
200014fa:	687b      	ldr	r3, [r7, #4]
200014fc:	4a27      	ldr	r2, [pc, #156]	; (2000159c <GPIO_DeInit+0x160>)
200014fe:	4293      	cmp	r3, r2
20001500:	d108      	bne.n	20001514 <GPIO_DeInit+0xd8>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOH, ENABLE);
20001502:	2101      	movs	r1, #1
20001504:	2080      	movs	r0, #128	; 0x80
20001506:	f7ff fa47 	bl	20000998 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOH, DISABLE);
2000150a:	2100      	movs	r1, #0
2000150c:	2080      	movs	r0, #128	; 0x80
2000150e:	f7ff fa43 	bl	20000998 <RCC_AHB1PeriphResetCmd>
}
20001512:	e031      	b.n	20001578 <GPIO_DeInit+0x13c>
  else if (GPIOx == GPIOI)
20001514:	687b      	ldr	r3, [r7, #4]
20001516:	4a22      	ldr	r2, [pc, #136]	; (200015a0 <GPIO_DeInit+0x164>)
20001518:	4293      	cmp	r3, r2
2000151a:	d10c      	bne.n	20001536 <GPIO_DeInit+0xfa>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, ENABLE);
2000151c:	2380      	movs	r3, #128	; 0x80
2000151e:	005b      	lsls	r3, r3, #1
20001520:	2101      	movs	r1, #1
20001522:	0018      	movs	r0, r3
20001524:	f7ff fa38 	bl	20000998 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, DISABLE);
20001528:	2380      	movs	r3, #128	; 0x80
2000152a:	005b      	lsls	r3, r3, #1
2000152c:	2100      	movs	r1, #0
2000152e:	0018      	movs	r0, r3
20001530:	f7ff fa32 	bl	20000998 <RCC_AHB1PeriphResetCmd>
}
20001534:	e020      	b.n	20001578 <GPIO_DeInit+0x13c>
  else if (GPIOx == GPIOJ)
20001536:	687b      	ldr	r3, [r7, #4]
20001538:	4a1a      	ldr	r2, [pc, #104]	; (200015a4 <GPIO_DeInit+0x168>)
2000153a:	4293      	cmp	r3, r2
2000153c:	d10c      	bne.n	20001558 <GPIO_DeInit+0x11c>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOJ, ENABLE);
2000153e:	2380      	movs	r3, #128	; 0x80
20001540:	009b      	lsls	r3, r3, #2
20001542:	2101      	movs	r1, #1
20001544:	0018      	movs	r0, r3
20001546:	f7ff fa27 	bl	20000998 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOJ, DISABLE);
2000154a:	2380      	movs	r3, #128	; 0x80
2000154c:	009b      	lsls	r3, r3, #2
2000154e:	2100      	movs	r1, #0
20001550:	0018      	movs	r0, r3
20001552:	f7ff fa21 	bl	20000998 <RCC_AHB1PeriphResetCmd>
}
20001556:	e00f      	b.n	20001578 <GPIO_DeInit+0x13c>
    if (GPIOx == GPIOK)
20001558:	687b      	ldr	r3, [r7, #4]
2000155a:	4a13      	ldr	r2, [pc, #76]	; (200015a8 <GPIO_DeInit+0x16c>)
2000155c:	4293      	cmp	r3, r2
2000155e:	d10b      	bne.n	20001578 <GPIO_DeInit+0x13c>
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, ENABLE);
20001560:	2380      	movs	r3, #128	; 0x80
20001562:	00db      	lsls	r3, r3, #3
20001564:	2101      	movs	r1, #1
20001566:	0018      	movs	r0, r3
20001568:	f7ff fa16 	bl	20000998 <RCC_AHB1PeriphResetCmd>
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, DISABLE);
2000156c:	2380      	movs	r3, #128	; 0x80
2000156e:	00db      	lsls	r3, r3, #3
20001570:	2100      	movs	r1, #0
20001572:	0018      	movs	r0, r3
20001574:	f7ff fa10 	bl	20000998 <RCC_AHB1PeriphResetCmd>
}
20001578:	46c0      	nop			; (mov r8, r8)
2000157a:	46bd      	mov	sp, r7
2000157c:	b002      	add	sp, #8
2000157e:	bd80      	pop	{r7, pc}
20001580:	40020000 	andmi	r0, r2, r0
20001584:	40020400 	andmi	r0, r2, r0, lsl #8
20001588:	40020800 	andmi	r0, r2, r0, lsl #16
2000158c:	40020c00 	andmi	r0, r2, r0, lsl #24
20001590:	40021000 	andmi	r1, r2, r0
20001594:	40021400 	andmi	r1, r2, r0, lsl #8
20001598:	40021800 	andmi	r1, r2, r0, lsl #16
2000159c:	40021c00 	andmi	r1, r2, r0, lsl #24
200015a0:	40022000 	andmi	r2, r2, r0
200015a4:	40022400 	andmi	r2, r2, r0, lsl #8
200015a8:	40022800 	andmi	r2, r2, r0, lsl #16

200015ac <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
200015ac:	b580      	push	{r7, lr}
200015ae:	b086      	sub	sp, #24
200015b0:	af00      	add	r7, sp, #0
200015b2:	6078      	str	r0, [r7, #4]
200015b4:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
200015b6:	2300      	movs	r3, #0
200015b8:	617b      	str	r3, [r7, #20]
200015ba:	2300      	movs	r3, #0
200015bc:	613b      	str	r3, [r7, #16]
200015be:	2300      	movs	r3, #0
200015c0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
200015c2:	2300      	movs	r3, #0
200015c4:	617b      	str	r3, [r7, #20]
200015c6:	e076      	b.n	200016b6 <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
200015c8:	2201      	movs	r2, #1
200015ca:	697b      	ldr	r3, [r7, #20]
200015cc:	409a      	lsls	r2, r3
200015ce:	0013      	movs	r3, r2
200015d0:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
200015d2:	683b      	ldr	r3, [r7, #0]
200015d4:	681a      	ldr	r2, [r3, #0]
200015d6:	693b      	ldr	r3, [r7, #16]
200015d8:	4013      	ands	r3, r2
200015da:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
200015dc:	68fa      	ldr	r2, [r7, #12]
200015de:	693b      	ldr	r3, [r7, #16]
200015e0:	429a      	cmp	r2, r3
200015e2:	d165      	bne.n	200016b0 <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
200015e4:	687b      	ldr	r3, [r7, #4]
200015e6:	681b      	ldr	r3, [r3, #0]
200015e8:	697a      	ldr	r2, [r7, #20]
200015ea:	0052      	lsls	r2, r2, #1
200015ec:	2103      	movs	r1, #3
200015ee:	4091      	lsls	r1, r2
200015f0:	000a      	movs	r2, r1
200015f2:	43d2      	mvns	r2, r2
200015f4:	401a      	ands	r2, r3
200015f6:	687b      	ldr	r3, [r7, #4]
200015f8:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
200015fa:	687b      	ldr	r3, [r7, #4]
200015fc:	681a      	ldr	r2, [r3, #0]
200015fe:	683b      	ldr	r3, [r7, #0]
20001600:	791b      	ldrb	r3, [r3, #4]
20001602:	0019      	movs	r1, r3
20001604:	697b      	ldr	r3, [r7, #20]
20001606:	005b      	lsls	r3, r3, #1
20001608:	4099      	lsls	r1, r3
2000160a:	000b      	movs	r3, r1
2000160c:	431a      	orrs	r2, r3
2000160e:	687b      	ldr	r3, [r7, #4]
20001610:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
20001612:	683b      	ldr	r3, [r7, #0]
20001614:	791b      	ldrb	r3, [r3, #4]
20001616:	2b01      	cmp	r3, #1
20001618:	d003      	beq.n	20001622 <GPIO_Init+0x76>
2000161a:	683b      	ldr	r3, [r7, #0]
2000161c:	791b      	ldrb	r3, [r3, #4]
2000161e:	2b02      	cmp	r3, #2
20001620:	d12e      	bne.n	20001680 <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
20001622:	687b      	ldr	r3, [r7, #4]
20001624:	689b      	ldr	r3, [r3, #8]
20001626:	697a      	ldr	r2, [r7, #20]
20001628:	0052      	lsls	r2, r2, #1
2000162a:	2103      	movs	r1, #3
2000162c:	4091      	lsls	r1, r2
2000162e:	000a      	movs	r2, r1
20001630:	43d2      	mvns	r2, r2
20001632:	401a      	ands	r2, r3
20001634:	687b      	ldr	r3, [r7, #4]
20001636:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
20001638:	687b      	ldr	r3, [r7, #4]
2000163a:	689a      	ldr	r2, [r3, #8]
2000163c:	683b      	ldr	r3, [r7, #0]
2000163e:	795b      	ldrb	r3, [r3, #5]
20001640:	0019      	movs	r1, r3
20001642:	697b      	ldr	r3, [r7, #20]
20001644:	005b      	lsls	r3, r3, #1
20001646:	4099      	lsls	r1, r3
20001648:	000b      	movs	r3, r1
2000164a:	431a      	orrs	r2, r3
2000164c:	687b      	ldr	r3, [r7, #4]
2000164e:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
20001650:	687b      	ldr	r3, [r7, #4]
20001652:	685b      	ldr	r3, [r3, #4]
20001654:	697a      	ldr	r2, [r7, #20]
20001656:	b292      	uxth	r2, r2
20001658:	0011      	movs	r1, r2
2000165a:	2201      	movs	r2, #1
2000165c:	408a      	lsls	r2, r1
2000165e:	43d2      	mvns	r2, r2
20001660:	401a      	ands	r2, r3
20001662:	687b      	ldr	r3, [r7, #4]
20001664:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
20001666:	687b      	ldr	r3, [r7, #4]
20001668:	685b      	ldr	r3, [r3, #4]
2000166a:	683a      	ldr	r2, [r7, #0]
2000166c:	7992      	ldrb	r2, [r2, #6]
2000166e:	0011      	movs	r1, r2
20001670:	697a      	ldr	r2, [r7, #20]
20001672:	b292      	uxth	r2, r2
20001674:	4091      	lsls	r1, r2
20001676:	000a      	movs	r2, r1
20001678:	b292      	uxth	r2, r2
2000167a:	431a      	orrs	r2, r3
2000167c:	687b      	ldr	r3, [r7, #4]
2000167e:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
20001680:	687b      	ldr	r3, [r7, #4]
20001682:	68db      	ldr	r3, [r3, #12]
20001684:	697a      	ldr	r2, [r7, #20]
20001686:	b292      	uxth	r2, r2
20001688:	0052      	lsls	r2, r2, #1
2000168a:	2103      	movs	r1, #3
2000168c:	4091      	lsls	r1, r2
2000168e:	000a      	movs	r2, r1
20001690:	43d2      	mvns	r2, r2
20001692:	401a      	ands	r2, r3
20001694:	687b      	ldr	r3, [r7, #4]
20001696:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
20001698:	687b      	ldr	r3, [r7, #4]
2000169a:	68da      	ldr	r2, [r3, #12]
2000169c:	683b      	ldr	r3, [r7, #0]
2000169e:	79db      	ldrb	r3, [r3, #7]
200016a0:	0019      	movs	r1, r3
200016a2:	697b      	ldr	r3, [r7, #20]
200016a4:	005b      	lsls	r3, r3, #1
200016a6:	4099      	lsls	r1, r3
200016a8:	000b      	movs	r3, r1
200016aa:	431a      	orrs	r2, r3
200016ac:	687b      	ldr	r3, [r7, #4]
200016ae:	60da      	str	r2, [r3, #12]
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
200016b0:	697b      	ldr	r3, [r7, #20]
200016b2:	3301      	adds	r3, #1
200016b4:	617b      	str	r3, [r7, #20]
200016b6:	697b      	ldr	r3, [r7, #20]
200016b8:	2b0f      	cmp	r3, #15
200016ba:	d985      	bls.n	200015c8 <GPIO_Init+0x1c>
    }
  }
}
200016bc:	46c0      	nop			; (mov r8, r8)
200016be:	46bd      	mov	sp, r7
200016c0:	b006      	add	sp, #24
200016c2:	bd80      	pop	{r7, pc}

200016c4 <GPIO_StructInit>:
  * @brief  Fills each GPIO_InitStruct member with its default value.
  * @param  GPIO_InitStruct : pointer to a GPIO_InitTypeDef structure which will be initialized.
  * @retval None
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
200016c4:	b580      	push	{r7, lr}
200016c6:	b082      	sub	sp, #8
200016c8:	af00      	add	r7, sp, #0
200016ca:	6078      	str	r0, [r7, #4]
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
200016cc:	687b      	ldr	r3, [r7, #4]
200016ce:	4a09      	ldr	r2, [pc, #36]	; (200016f4 <GPIO_StructInit+0x30>)
200016d0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN;
200016d2:	687b      	ldr	r3, [r7, #4]
200016d4:	2200      	movs	r2, #0
200016d6:	711a      	strb	r2, [r3, #4]
  GPIO_InitStruct->GPIO_Speed = GPIO_Speed_2MHz;
200016d8:	687b      	ldr	r3, [r7, #4]
200016da:	2200      	movs	r2, #0
200016dc:	715a      	strb	r2, [r3, #5]
  GPIO_InitStruct->GPIO_OType = GPIO_OType_PP;
200016de:	687b      	ldr	r3, [r7, #4]
200016e0:	2200      	movs	r2, #0
200016e2:	719a      	strb	r2, [r3, #6]
  GPIO_InitStruct->GPIO_PuPd = GPIO_PuPd_NOPULL;
200016e4:	687b      	ldr	r3, [r7, #4]
200016e6:	2200      	movs	r2, #0
200016e8:	71da      	strb	r2, [r3, #7]
}
200016ea:	46c0      	nop			; (mov r8, r8)
200016ec:	46bd      	mov	sp, r7
200016ee:	b002      	add	sp, #8
200016f0:	bd80      	pop	{r7, pc}
200016f2:	46c0      	nop			; (mov r8, r8)
200016f4:	0000ffff 	strdeq	pc, [r0], -pc	; <UNPREDICTABLE>

200016f8 <GPIO_PinLockConfig>:
  * @param  GPIO_Pin: specifies the port bit to be locked.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_PinLockConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
200016f8:	b580      	push	{r7, lr}
200016fa:	b084      	sub	sp, #16
200016fc:	af00      	add	r7, sp, #0
200016fe:	6078      	str	r0, [r7, #4]
20001700:	000a      	movs	r2, r1
20001702:	1cbb      	adds	r3, r7, #2
20001704:	801a      	strh	r2, [r3, #0]
  __IO uint32_t tmp = 0x00010000;
20001706:	2380      	movs	r3, #128	; 0x80
20001708:	025b      	lsls	r3, r3, #9
2000170a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  tmp |= GPIO_Pin;
2000170c:	1cbb      	adds	r3, r7, #2
2000170e:	881a      	ldrh	r2, [r3, #0]
20001710:	68fb      	ldr	r3, [r7, #12]
20001712:	4313      	orrs	r3, r2
20001714:	60fb      	str	r3, [r7, #12]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
20001716:	68fa      	ldr	r2, [r7, #12]
20001718:	687b      	ldr	r3, [r7, #4]
2000171a:	61da      	str	r2, [r3, #28]
  /* Reset LCKK bit */
  GPIOx->LCKR =  GPIO_Pin;
2000171c:	1cbb      	adds	r3, r7, #2
2000171e:	881a      	ldrh	r2, [r3, #0]
20001720:	687b      	ldr	r3, [r7, #4]
20001722:	61da      	str	r2, [r3, #28]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
20001724:	68fa      	ldr	r2, [r7, #12]
20001726:	687b      	ldr	r3, [r7, #4]
20001728:	61da      	str	r2, [r3, #28]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
2000172a:	687b      	ldr	r3, [r7, #4]
2000172c:	69db      	ldr	r3, [r3, #28]
2000172e:	60fb      	str	r3, [r7, #12]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
20001730:	687b      	ldr	r3, [r7, #4]
20001732:	69db      	ldr	r3, [r3, #28]
20001734:	60fb      	str	r3, [r7, #12]
}
20001736:	46c0      	nop			; (mov r8, r8)
20001738:	46bd      	mov	sp, r7
2000173a:	b004      	add	sp, #16
2000173c:	bd80      	pop	{r7, pc}

2000173e <GPIO_ReadInputDataBit>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
uint8_t GPIO_ReadInputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
2000173e:	b580      	push	{r7, lr}
20001740:	b084      	sub	sp, #16
20001742:	af00      	add	r7, sp, #0
20001744:	6078      	str	r0, [r7, #4]
20001746:	000a      	movs	r2, r1
20001748:	1cbb      	adds	r3, r7, #2
2000174a:	801a      	strh	r2, [r3, #0]
  uint8_t bitstatus = 0x00;
2000174c:	230f      	movs	r3, #15
2000174e:	18fb      	adds	r3, r7, r3
20001750:	2200      	movs	r2, #0
20001752:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
20001754:	687b      	ldr	r3, [r7, #4]
20001756:	691b      	ldr	r3, [r3, #16]
20001758:	1cba      	adds	r2, r7, #2
2000175a:	8812      	ldrh	r2, [r2, #0]
2000175c:	4013      	ands	r3, r2
2000175e:	d004      	beq.n	2000176a <GPIO_ReadInputDataBit+0x2c>
  {
    bitstatus = (uint8_t)Bit_SET;
20001760:	230f      	movs	r3, #15
20001762:	18fb      	adds	r3, r7, r3
20001764:	2201      	movs	r2, #1
20001766:	701a      	strb	r2, [r3, #0]
20001768:	e003      	b.n	20001772 <GPIO_ReadInputDataBit+0x34>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
2000176a:	230f      	movs	r3, #15
2000176c:	18fb      	adds	r3, r7, r3
2000176e:	2200      	movs	r2, #0
20001770:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
20001772:	230f      	movs	r3, #15
20001774:	18fb      	adds	r3, r7, r3
20001776:	781b      	ldrb	r3, [r3, #0]
}
20001778:	0018      	movs	r0, r3
2000177a:	46bd      	mov	sp, r7
2000177c:	b004      	add	sp, #16
2000177e:	bd80      	pop	{r7, pc}

20001780 <GPIO_ReadInputData>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F42xxx/43xxx devices.
  *                      x can be (A, B, C, D and H) to select the GPIO peripheral for STM32F401xx devices. 
  * @retval GPIO input data port value.
  */
uint16_t GPIO_ReadInputData(GPIO_TypeDef* GPIOx)
{
20001780:	b580      	push	{r7, lr}
20001782:	b082      	sub	sp, #8
20001784:	af00      	add	r7, sp, #0
20001786:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  return ((uint16_t)GPIOx->IDR);
20001788:	687b      	ldr	r3, [r7, #4]
2000178a:	691b      	ldr	r3, [r3, #16]
2000178c:	b29b      	uxth	r3, r3
}
2000178e:	0018      	movs	r0, r3
20001790:	46bd      	mov	sp, r7
20001792:	b002      	add	sp, #8
20001794:	bd80      	pop	{r7, pc}

20001796 <GPIO_ReadOutputDataBit>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *          This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The output port pin value.
  */
uint8_t GPIO_ReadOutputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
20001796:	b580      	push	{r7, lr}
20001798:	b084      	sub	sp, #16
2000179a:	af00      	add	r7, sp, #0
2000179c:	6078      	str	r0, [r7, #4]
2000179e:	000a      	movs	r2, r1
200017a0:	1cbb      	adds	r3, r7, #2
200017a2:	801a      	strh	r2, [r3, #0]
  uint8_t bitstatus = 0x00;
200017a4:	230f      	movs	r3, #15
200017a6:	18fb      	adds	r3, r7, r3
200017a8:	2200      	movs	r2, #0
200017aa:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if (((GPIOx->ODR) & GPIO_Pin) != (uint32_t)Bit_RESET)
200017ac:	687b      	ldr	r3, [r7, #4]
200017ae:	695b      	ldr	r3, [r3, #20]
200017b0:	1cba      	adds	r2, r7, #2
200017b2:	8812      	ldrh	r2, [r2, #0]
200017b4:	4013      	ands	r3, r2
200017b6:	d004      	beq.n	200017c2 <GPIO_ReadOutputDataBit+0x2c>
  {
    bitstatus = (uint8_t)Bit_SET;
200017b8:	230f      	movs	r3, #15
200017ba:	18fb      	adds	r3, r7, r3
200017bc:	2201      	movs	r2, #1
200017be:	701a      	strb	r2, [r3, #0]
200017c0:	e003      	b.n	200017ca <GPIO_ReadOutputDataBit+0x34>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
200017c2:	230f      	movs	r3, #15
200017c4:	18fb      	adds	r3, r7, r3
200017c6:	2200      	movs	r2, #0
200017c8:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
200017ca:	230f      	movs	r3, #15
200017cc:	18fb      	adds	r3, r7, r3
200017ce:	781b      	ldrb	r3, [r3, #0]
}
200017d0:	0018      	movs	r0, r3
200017d2:	46bd      	mov	sp, r7
200017d4:	b004      	add	sp, #16
200017d6:	bd80      	pop	{r7, pc}

200017d8 <GPIO_ReadOutputData>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F42xxx/43xxx devices.
  *                      x can be (A, B, C, D and H) to select the GPIO peripheral for STM32F401xx devices. 
  * @retval GPIO output data port value.
  */
uint16_t GPIO_ReadOutputData(GPIO_TypeDef* GPIOx)
{
200017d8:	b580      	push	{r7, lr}
200017da:	b082      	sub	sp, #8
200017dc:	af00      	add	r7, sp, #0
200017de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  return ((uint16_t)GPIOx->ODR);
200017e0:	687b      	ldr	r3, [r7, #4]
200017e2:	695b      	ldr	r3, [r3, #20]
200017e4:	b29b      	uxth	r3, r3
}
200017e6:	0018      	movs	r0, r3
200017e8:	46bd      	mov	sp, r7
200017ea:	b002      	add	sp, #8
200017ec:	bd80      	pop	{r7, pc}

200017ee <GPIO_SetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
200017ee:	b580      	push	{r7, lr}
200017f0:	b082      	sub	sp, #8
200017f2:	af00      	add	r7, sp, #0
200017f4:	6078      	str	r0, [r7, #4]
200017f6:	000a      	movs	r2, r1
200017f8:	1cbb      	adds	r3, r7, #2
200017fa:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRL = GPIO_Pin;
200017fc:	687b      	ldr	r3, [r7, #4]
200017fe:	1cba      	adds	r2, r7, #2
20001800:	8812      	ldrh	r2, [r2, #0]
20001802:	831a      	strh	r2, [r3, #24]
}
20001804:	46c0      	nop			; (mov r8, r8)
20001806:	46bd      	mov	sp, r7
20001808:	b002      	add	sp, #8
2000180a:	bd80      	pop	{r7, pc}

2000180c <GPIO_ResetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
2000180c:	b580      	push	{r7, lr}
2000180e:	b082      	sub	sp, #8
20001810:	af00      	add	r7, sp, #0
20001812:	6078      	str	r0, [r7, #4]
20001814:	000a      	movs	r2, r1
20001816:	1cbb      	adds	r3, r7, #2
20001818:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRH = GPIO_Pin;
2000181a:	687b      	ldr	r3, [r7, #4]
2000181c:	1cba      	adds	r2, r7, #2
2000181e:	8812      	ldrh	r2, [r2, #0]
20001820:	835a      	strh	r2, [r3, #26]
}
20001822:	46c0      	nop			; (mov r8, r8)
20001824:	46bd      	mov	sp, r7
20001826:	b002      	add	sp, #8
20001828:	bd80      	pop	{r7, pc}

2000182a <GPIO_WriteBit>:
  *            @arg Bit_RESET: to clear the port pin
  *            @arg Bit_SET: to set the port pin
  * @retval None
  */
void GPIO_WriteBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, BitAction BitVal)
{
2000182a:	b580      	push	{r7, lr}
2000182c:	b082      	sub	sp, #8
2000182e:	af00      	add	r7, sp, #0
20001830:	6078      	str	r0, [r7, #4]
20001832:	0008      	movs	r0, r1
20001834:	0011      	movs	r1, r2
20001836:	1cbb      	adds	r3, r7, #2
20001838:	1c02      	adds	r2, r0, #0
2000183a:	801a      	strh	r2, [r3, #0]
2000183c:	1c7b      	adds	r3, r7, #1
2000183e:	1c0a      	adds	r2, r1, #0
20001840:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal));

  if (BitVal != Bit_RESET)
20001842:	1c7b      	adds	r3, r7, #1
20001844:	781b      	ldrb	r3, [r3, #0]
20001846:	2b00      	cmp	r3, #0
20001848:	d004      	beq.n	20001854 <GPIO_WriteBit+0x2a>
  {
    GPIOx->BSRRL = GPIO_Pin;
2000184a:	687b      	ldr	r3, [r7, #4]
2000184c:	1cba      	adds	r2, r7, #2
2000184e:	8812      	ldrh	r2, [r2, #0]
20001850:	831a      	strh	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRRH = GPIO_Pin ;
  }
}
20001852:	e003      	b.n	2000185c <GPIO_WriteBit+0x32>
    GPIOx->BSRRH = GPIO_Pin ;
20001854:	687b      	ldr	r3, [r7, #4]
20001856:	1cba      	adds	r2, r7, #2
20001858:	8812      	ldrh	r2, [r2, #0]
2000185a:	835a      	strh	r2, [r3, #26]
}
2000185c:	46c0      	nop			; (mov r8, r8)
2000185e:	46bd      	mov	sp, r7
20001860:	b002      	add	sp, #8
20001862:	bd80      	pop	{r7, pc}

20001864 <GPIO_Write>:
  *                      x can be (A, B, C, D and H) to select the GPIO peripheral for STM32F401xx devices. 
  * @param  PortVal: specifies the value to be written to the port output data register.
  * @retval None
  */
void GPIO_Write(GPIO_TypeDef* GPIOx, uint16_t PortVal)
{
20001864:	b580      	push	{r7, lr}
20001866:	b082      	sub	sp, #8
20001868:	af00      	add	r7, sp, #0
2000186a:	6078      	str	r0, [r7, #4]
2000186c:	000a      	movs	r2, r1
2000186e:	1cbb      	adds	r3, r7, #2
20001870:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR = PortVal;
20001872:	1cbb      	adds	r3, r7, #2
20001874:	881a      	ldrh	r2, [r3, #0]
20001876:	687b      	ldr	r3, [r7, #4]
20001878:	615a      	str	r2, [r3, #20]
}
2000187a:	46c0      	nop			; (mov r8, r8)
2000187c:	46bd      	mov	sp, r7
2000187e:	b002      	add	sp, #8
20001880:	bd80      	pop	{r7, pc}

20001882 <GPIO_ToggleBits>:
  *                      x can be (A, B, C, D and H) to select the GPIO peripheral for STM32F401xx devices. 
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void GPIO_ToggleBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
20001882:	b580      	push	{r7, lr}
20001884:	b082      	sub	sp, #8
20001886:	af00      	add	r7, sp, #0
20001888:	6078      	str	r0, [r7, #4]
2000188a:	000a      	movs	r2, r1
2000188c:	1cbb      	adds	r3, r7, #2
2000188e:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR ^= GPIO_Pin;
20001890:	687b      	ldr	r3, [r7, #4]
20001892:	695a      	ldr	r2, [r3, #20]
20001894:	1cbb      	adds	r3, r7, #2
20001896:	881b      	ldrh	r3, [r3, #0]
20001898:	405a      	eors	r2, r3
2000189a:	687b      	ldr	r3, [r7, #4]
2000189c:	615a      	str	r2, [r3, #20]
}
2000189e:	46c0      	nop			; (mov r8, r8)
200018a0:	46bd      	mov	sp, r7
200018a2:	b002      	add	sp, #8
200018a4:	bd80      	pop	{r7, pc}

200018a6 <GPIO_PinAFConfig>:
  *            @arg GPIO_AF_LTDC: Connect LTDC pins to AF14 for STM32F429xx/439xx devices. 
  *            @arg GPIO_AF_EVENTOUT: Connect EVENTOUT pins to AF15
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
200018a6:	b580      	push	{r7, lr}
200018a8:	b084      	sub	sp, #16
200018aa:	af00      	add	r7, sp, #0
200018ac:	6078      	str	r0, [r7, #4]
200018ae:	0008      	movs	r0, r1
200018b0:	0011      	movs	r1, r2
200018b2:	1cbb      	adds	r3, r7, #2
200018b4:	1c02      	adds	r2, r0, #0
200018b6:	801a      	strh	r2, [r3, #0]
200018b8:	1c7b      	adds	r3, r7, #1
200018ba:	1c0a      	adds	r2, r1, #0
200018bc:	701a      	strb	r2, [r3, #0]
  uint32_t temp = 0x00;
200018be:	2300      	movs	r3, #0
200018c0:	60fb      	str	r3, [r7, #12]
  uint32_t temp_2 = 0x00;
200018c2:	2300      	movs	r3, #0
200018c4:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
200018c6:	1c7b      	adds	r3, r7, #1
200018c8:	781a      	ldrb	r2, [r3, #0]
200018ca:	1cbb      	adds	r3, r7, #2
200018cc:	881b      	ldrh	r3, [r3, #0]
200018ce:	2107      	movs	r1, #7
200018d0:	400b      	ands	r3, r1
200018d2:	009b      	lsls	r3, r3, #2
200018d4:	409a      	lsls	r2, r3
200018d6:	0013      	movs	r3, r2
200018d8:	60fb      	str	r3, [r7, #12]
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
200018da:	1cbb      	adds	r3, r7, #2
200018dc:	881b      	ldrh	r3, [r3, #0]
200018de:	08db      	lsrs	r3, r3, #3
200018e0:	b29b      	uxth	r3, r3
200018e2:	001a      	movs	r2, r3
200018e4:	687b      	ldr	r3, [r7, #4]
200018e6:	3208      	adds	r2, #8
200018e8:	0092      	lsls	r2, r2, #2
200018ea:	58d3      	ldr	r3, [r2, r3]
200018ec:	1cba      	adds	r2, r7, #2
200018ee:	8812      	ldrh	r2, [r2, #0]
200018f0:	2107      	movs	r1, #7
200018f2:	400a      	ands	r2, r1
200018f4:	0092      	lsls	r2, r2, #2
200018f6:	210f      	movs	r1, #15
200018f8:	4091      	lsls	r1, r2
200018fa:	000a      	movs	r2, r1
200018fc:	43d2      	mvns	r2, r2
200018fe:	1cb9      	adds	r1, r7, #2
20001900:	8809      	ldrh	r1, [r1, #0]
20001902:	08c9      	lsrs	r1, r1, #3
20001904:	b289      	uxth	r1, r1
20001906:	0008      	movs	r0, r1
20001908:	401a      	ands	r2, r3
2000190a:	0011      	movs	r1, r2
2000190c:	687b      	ldr	r3, [r7, #4]
2000190e:	0002      	movs	r2, r0
20001910:	3208      	adds	r2, #8
20001912:	0092      	lsls	r2, r2, #2
20001914:	50d1      	str	r1, [r2, r3]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
20001916:	1cbb      	adds	r3, r7, #2
20001918:	881b      	ldrh	r3, [r3, #0]
2000191a:	08db      	lsrs	r3, r3, #3
2000191c:	b29b      	uxth	r3, r3
2000191e:	001a      	movs	r2, r3
20001920:	687b      	ldr	r3, [r7, #4]
20001922:	3208      	adds	r2, #8
20001924:	0092      	lsls	r2, r2, #2
20001926:	58d3      	ldr	r3, [r2, r3]
20001928:	68fa      	ldr	r2, [r7, #12]
2000192a:	4313      	orrs	r3, r2
2000192c:	60bb      	str	r3, [r7, #8]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
2000192e:	1cbb      	adds	r3, r7, #2
20001930:	881b      	ldrh	r3, [r3, #0]
20001932:	08db      	lsrs	r3, r3, #3
20001934:	b29b      	uxth	r3, r3
20001936:	001a      	movs	r2, r3
20001938:	687b      	ldr	r3, [r7, #4]
2000193a:	3208      	adds	r2, #8
2000193c:	0092      	lsls	r2, r2, #2
2000193e:	68b9      	ldr	r1, [r7, #8]
20001940:	50d1      	str	r1, [r2, r3]
}
20001942:	46c0      	nop			; (mov r8, r8)
20001944:	46bd      	mov	sp, r7
20001946:	b004      	add	sp, #16
20001948:	bd80      	pop	{r7, pc}
2000194a:	46c0      	nop			; (mov r8, r8)

2000194c <NVIC_PriorityGroupConfig>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void NVIC_PriorityGroupConfig(uint32_t NVIC_PriorityGroup)
{
2000194c:	b580      	push	{r7, lr}
2000194e:	b082      	sub	sp, #8
20001950:	af00      	add	r7, sp, #0
20001952:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
20001954:	4b04      	ldr	r3, [pc, #16]	; (20001968 <NVIC_PriorityGroupConfig+0x1c>)
20001956:	687a      	ldr	r2, [r7, #4]
20001958:	4904      	ldr	r1, [pc, #16]	; (2000196c <NVIC_PriorityGroupConfig+0x20>)
2000195a:	430a      	orrs	r2, r1
2000195c:	60da      	str	r2, [r3, #12]
}
2000195e:	46c0      	nop			; (mov r8, r8)
20001960:	46bd      	mov	sp, r7
20001962:	b002      	add	sp, #8
20001964:	bd80      	pop	{r7, pc}
20001966:	46c0      	nop			; (mov r8, r8)
20001968:	e000ed00 	and	lr, r0, r0, lsl #26
2000196c:	05fa0000 	ldrbeq	r0, [sl, #0]!

20001970 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
20001970:	b5b0      	push	{r4, r5, r7, lr}
20001972:	b084      	sub	sp, #16
20001974:	af00      	add	r7, sp, #0
20001976:	6078      	str	r0, [r7, #4]
  uint8_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
20001978:	230f      	movs	r3, #15
2000197a:	18fb      	adds	r3, r7, r3
2000197c:	2200      	movs	r2, #0
2000197e:	701a      	strb	r2, [r3, #0]
20001980:	230e      	movs	r3, #14
20001982:	18fb      	adds	r3, r7, r3
20001984:	2200      	movs	r2, #0
20001986:	701a      	strb	r2, [r3, #0]
20001988:	230d      	movs	r3, #13
2000198a:	18fb      	adds	r3, r7, r3
2000198c:	220f      	movs	r2, #15
2000198e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
20001990:	687b      	ldr	r3, [r7, #4]
20001992:	78db      	ldrb	r3, [r3, #3]
20001994:	2b00      	cmp	r3, #0
20001996:	d04d      	beq.n	20001a34 <NVIC_Init+0xc4>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
20001998:	4b31      	ldr	r3, [pc, #196]	; (20001a60 <NVIC_Init+0xf0>)
2000199a:	68db      	ldr	r3, [r3, #12]
2000199c:	43db      	mvns	r3, r3
2000199e:	0a1b      	lsrs	r3, r3, #8
200019a0:	b2da      	uxtb	r2, r3
200019a2:	200f      	movs	r0, #15
200019a4:	183b      	adds	r3, r7, r0
200019a6:	2107      	movs	r1, #7
200019a8:	400a      	ands	r2, r1
200019aa:	701a      	strb	r2, [r3, #0]
    tmppre = (0x4 - tmppriority);
200019ac:	250e      	movs	r5, #14
200019ae:	197b      	adds	r3, r7, r5
200019b0:	183a      	adds	r2, r7, r0
200019b2:	7812      	ldrb	r2, [r2, #0]
200019b4:	2104      	movs	r1, #4
200019b6:	1a8a      	subs	r2, r1, r2
200019b8:	701a      	strb	r2, [r3, #0]
    tmpsub = tmpsub >> tmppriority;
200019ba:	240d      	movs	r4, #13
200019bc:	193b      	adds	r3, r7, r4
200019be:	781a      	ldrb	r2, [r3, #0]
200019c0:	0001      	movs	r1, r0
200019c2:	187b      	adds	r3, r7, r1
200019c4:	781b      	ldrb	r3, [r3, #0]
200019c6:	411a      	asrs	r2, r3
200019c8:	193b      	adds	r3, r7, r4
200019ca:	701a      	strb	r2, [r3, #0]

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
200019cc:	687b      	ldr	r3, [r7, #4]
200019ce:	785b      	ldrb	r3, [r3, #1]
200019d0:	001a      	movs	r2, r3
200019d2:	197b      	adds	r3, r7, r5
200019d4:	781b      	ldrb	r3, [r3, #0]
200019d6:	409a      	lsls	r2, r3
200019d8:	0008      	movs	r0, r1
200019da:	187b      	adds	r3, r7, r1
200019dc:	701a      	strb	r2, [r3, #0]
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
200019de:	687b      	ldr	r3, [r7, #4]
200019e0:	789b      	ldrb	r3, [r3, #2]
200019e2:	193a      	adds	r2, r7, r4
200019e4:	7812      	ldrb	r2, [r2, #0]
200019e6:	4013      	ands	r3, r2
200019e8:	b2d9      	uxtb	r1, r3
200019ea:	183b      	adds	r3, r7, r0
200019ec:	183a      	adds	r2, r7, r0
200019ee:	7812      	ldrb	r2, [r2, #0]
200019f0:	430a      	orrs	r2, r1
200019f2:	701a      	strb	r2, [r3, #0]
        
    tmppriority = tmppriority << 0x04;
200019f4:	183b      	adds	r3, r7, r0
200019f6:	183a      	adds	r2, r7, r0
200019f8:	7812      	ldrb	r2, [r2, #0]
200019fa:	0112      	lsls	r2, r2, #4
200019fc:	701a      	strb	r2, [r3, #0]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
200019fe:	4a19      	ldr	r2, [pc, #100]	; (20001a64 <NVIC_Init+0xf4>)
20001a00:	687b      	ldr	r3, [r7, #4]
20001a02:	781b      	ldrb	r3, [r3, #0]
20001a04:	0019      	movs	r1, r3
20001a06:	23c0      	movs	r3, #192	; 0xc0
20001a08:	009b      	lsls	r3, r3, #2
20001a0a:	1852      	adds	r2, r2, r1
20001a0c:	18d3      	adds	r3, r2, r3
20001a0e:	183a      	adds	r2, r7, r0
20001a10:	7812      	ldrb	r2, [r2, #0]
20001a12:	701a      	strb	r2, [r3, #0]
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
20001a14:	687b      	ldr	r3, [r7, #4]
20001a16:	781b      	ldrb	r3, [r3, #0]
20001a18:	001a      	movs	r2, r3
20001a1a:	231f      	movs	r3, #31
20001a1c:	4013      	ands	r3, r2
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
20001a1e:	4911      	ldr	r1, [pc, #68]	; (20001a64 <NVIC_Init+0xf4>)
20001a20:	687a      	ldr	r2, [r7, #4]
20001a22:	7812      	ldrb	r2, [r2, #0]
20001a24:	0952      	lsrs	r2, r2, #5
20001a26:	b2d2      	uxtb	r2, r2
20001a28:	0010      	movs	r0, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
20001a2a:	2201      	movs	r2, #1
20001a2c:	409a      	lsls	r2, r3
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
20001a2e:	0083      	lsls	r3, r0, #2
20001a30:	505a      	str	r2, [r3, r1]
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
20001a32:	e010      	b.n	20001a56 <NVIC_Init+0xe6>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
20001a34:	687b      	ldr	r3, [r7, #4]
20001a36:	781b      	ldrb	r3, [r3, #0]
20001a38:	001a      	movs	r2, r3
20001a3a:	231f      	movs	r3, #31
20001a3c:	4013      	ands	r3, r2
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
20001a3e:	4909      	ldr	r1, [pc, #36]	; (20001a64 <NVIC_Init+0xf4>)
20001a40:	687a      	ldr	r2, [r7, #4]
20001a42:	7812      	ldrb	r2, [r2, #0]
20001a44:	0952      	lsrs	r2, r2, #5
20001a46:	b2d2      	uxtb	r2, r2
20001a48:	0010      	movs	r0, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
20001a4a:	2201      	movs	r2, #1
20001a4c:	409a      	lsls	r2, r3
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
20001a4e:	0003      	movs	r3, r0
20001a50:	3320      	adds	r3, #32
20001a52:	009b      	lsls	r3, r3, #2
20001a54:	505a      	str	r2, [r3, r1]
}
20001a56:	46c0      	nop			; (mov r8, r8)
20001a58:	46bd      	mov	sp, r7
20001a5a:	b004      	add	sp, #16
20001a5c:	bdb0      	pop	{r4, r5, r7, pc}
20001a5e:	46c0      	nop			; (mov r8, r8)
20001a60:	e000ed00 	and	lr, r0, r0, lsl #26
20001a64:	e000e100 	and	lr, r0, r0, lsl #2

20001a68 <NVIC_SetVectorTable>:
  *     @arg NVIC_VectTab_FLASH: Vector Table in internal FLASH.
  * @param  Offset: Vector Table base offset field. This value must be a multiple of 0x200.
  * @retval None
  */
void NVIC_SetVectorTable(uint32_t NVIC_VectTab, uint32_t Offset)
{ 
20001a68:	b580      	push	{r7, lr}
20001a6a:	b082      	sub	sp, #8
20001a6c:	af00      	add	r7, sp, #0
20001a6e:	6078      	str	r0, [r7, #4]
20001a70:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_VECTTAB(NVIC_VectTab));
  assert_param(IS_NVIC_OFFSET(Offset));  
   
  SCB->VTOR = NVIC_VectTab | (Offset & (uint32_t)0x1FFFFF80);
20001a72:	683b      	ldr	r3, [r7, #0]
20001a74:	4a05      	ldr	r2, [pc, #20]	; (20001a8c <NVIC_SetVectorTable+0x24>)
20001a76:	4013      	ands	r3, r2
20001a78:	0019      	movs	r1, r3
20001a7a:	4b05      	ldr	r3, [pc, #20]	; (20001a90 <NVIC_SetVectorTable+0x28>)
20001a7c:	687a      	ldr	r2, [r7, #4]
20001a7e:	430a      	orrs	r2, r1
20001a80:	609a      	str	r2, [r3, #8]
}
20001a82:	46c0      	nop			; (mov r8, r8)
20001a84:	46bd      	mov	sp, r7
20001a86:	b002      	add	sp, #8
20001a88:	bd80      	pop	{r7, pc}
20001a8a:	46c0      	nop			; (mov r8, r8)
20001a8c:	1fffff80 	svcne	0x00ffff80
20001a90:	e000ed00 	and	lr, r0, r0, lsl #26

20001a94 <NVIC_SystemLPConfig>:
  *     @arg NVIC_LP_SLEEPONEXIT: Low Power Sleep on Exit.
  * @param  NewState: new state of LP condition. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void NVIC_SystemLPConfig(uint8_t LowPowerMode, FunctionalState NewState)
{
20001a94:	b580      	push	{r7, lr}
20001a96:	b082      	sub	sp, #8
20001a98:	af00      	add	r7, sp, #0
20001a9a:	0002      	movs	r2, r0
20001a9c:	1dfb      	adds	r3, r7, #7
20001a9e:	701a      	strb	r2, [r3, #0]
20001aa0:	1dbb      	adds	r3, r7, #6
20001aa2:	1c0a      	adds	r2, r1, #0
20001aa4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_LP(LowPowerMode));
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  if (NewState != DISABLE)
20001aa6:	1dbb      	adds	r3, r7, #6
20001aa8:	781b      	ldrb	r3, [r3, #0]
20001aaa:	2b00      	cmp	r3, #0
20001aac:	d007      	beq.n	20001abe <NVIC_SystemLPConfig+0x2a>
  {
    SCB->SCR |= LowPowerMode;
20001aae:	4b0a      	ldr	r3, [pc, #40]	; (20001ad8 <NVIC_SystemLPConfig+0x44>)
20001ab0:	6919      	ldr	r1, [r3, #16]
20001ab2:	1dfb      	adds	r3, r7, #7
20001ab4:	781a      	ldrb	r2, [r3, #0]
20001ab6:	4b08      	ldr	r3, [pc, #32]	; (20001ad8 <NVIC_SystemLPConfig+0x44>)
20001ab8:	430a      	orrs	r2, r1
20001aba:	611a      	str	r2, [r3, #16]
  }
  else
  {
    SCB->SCR &= (uint32_t)(~(uint32_t)LowPowerMode);
  }
}
20001abc:	e007      	b.n	20001ace <NVIC_SystemLPConfig+0x3a>
    SCB->SCR &= (uint32_t)(~(uint32_t)LowPowerMode);
20001abe:	4b06      	ldr	r3, [pc, #24]	; (20001ad8 <NVIC_SystemLPConfig+0x44>)
20001ac0:	691a      	ldr	r2, [r3, #16]
20001ac2:	1dfb      	adds	r3, r7, #7
20001ac4:	781b      	ldrb	r3, [r3, #0]
20001ac6:	43d9      	mvns	r1, r3
20001ac8:	4b03      	ldr	r3, [pc, #12]	; (20001ad8 <NVIC_SystemLPConfig+0x44>)
20001aca:	400a      	ands	r2, r1
20001acc:	611a      	str	r2, [r3, #16]
}
20001ace:	46c0      	nop			; (mov r8, r8)
20001ad0:	46bd      	mov	sp, r7
20001ad2:	b002      	add	sp, #8
20001ad4:	bd80      	pop	{r7, pc}
20001ad6:	46c0      	nop			; (mov r8, r8)
20001ad8:	e000ed00 	and	lr, r0, r0, lsl #26

20001adc <SysTick_CLKSourceConfig>:
  *     @arg SysTick_CLKSource_HCLK_Div8: AHB clock divided by 8 selected as SysTick clock source.
  *     @arg SysTick_CLKSource_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void SysTick_CLKSourceConfig(uint32_t SysTick_CLKSource)
{
20001adc:	b580      	push	{r7, lr}
20001ade:	b082      	sub	sp, #8
20001ae0:	af00      	add	r7, sp, #0
20001ae2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(SysTick_CLKSource));
  if (SysTick_CLKSource == SysTick_CLKSource_HCLK)
20001ae4:	687b      	ldr	r3, [r7, #4]
20001ae6:	2b04      	cmp	r3, #4
20001ae8:	d106      	bne.n	20001af8 <SysTick_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SysTick_CLKSource_HCLK;
20001aea:	4b08      	ldr	r3, [pc, #32]	; (20001b0c <SysTick_CLKSourceConfig+0x30>)
20001aec:	681a      	ldr	r2, [r3, #0]
20001aee:	4b07      	ldr	r3, [pc, #28]	; (20001b0c <SysTick_CLKSourceConfig+0x30>)
20001af0:	2104      	movs	r1, #4
20001af2:	430a      	orrs	r2, r1
20001af4:	601a      	str	r2, [r3, #0]
  }
  else
  {
    SysTick->CTRL &= SysTick_CLKSource_HCLK_Div8;
  }
}
20001af6:	e005      	b.n	20001b04 <SysTick_CLKSourceConfig+0x28>
    SysTick->CTRL &= SysTick_CLKSource_HCLK_Div8;
20001af8:	4b04      	ldr	r3, [pc, #16]	; (20001b0c <SysTick_CLKSourceConfig+0x30>)
20001afa:	681a      	ldr	r2, [r3, #0]
20001afc:	4b03      	ldr	r3, [pc, #12]	; (20001b0c <SysTick_CLKSourceConfig+0x30>)
20001afe:	2104      	movs	r1, #4
20001b00:	438a      	bics	r2, r1
20001b02:	601a      	str	r2, [r3, #0]
}
20001b04:	46c0      	nop			; (mov r8, r8)
20001b06:	46bd      	mov	sp, r7
20001b08:	b002      	add	sp, #8
20001b0a:	bd80      	pop	{r7, pc}
20001b0c:	e000e010 	and	lr, r0, r0, lsl r0

20001b10 <bufferInit>:
#include "buffer.h"

//Nollställer bufferten
void bufferInit(FIFO *buffer) {
20001b10:	b580      	push	{r7, lr}
20001b12:	b082      	sub	sp, #8
20001b14:	af00      	add	r7, sp, #0
20001b16:	6078      	str	r0, [r7, #4]
    buffer->count = 0;
20001b18:	687b      	ldr	r3, [r7, #4]
20001b1a:	2264      	movs	r2, #100	; 0x64
20001b1c:	2100      	movs	r1, #0
20001b1e:	5499      	strb	r1, [r3, r2]
    buffer->in = 0;
20001b20:	687b      	ldr	r3, [r7, #4]
20001b22:	2265      	movs	r2, #101	; 0x65
20001b24:	2100      	movs	r1, #0
20001b26:	5499      	strb	r1, [r3, r2]
    buffer->out = 0;
20001b28:	687b      	ldr	r3, [r7, #4]
20001b2a:	2266      	movs	r2, #102	; 0x66
20001b2c:	2100      	movs	r1, #0
20001b2e:	5499      	strb	r1, [r3, r2]
}
20001b30:	46c0      	nop			; (mov r8, r8)
20001b32:	46bd      	mov	sp, r7
20001b34:	b002      	add	sp, #8
20001b36:	bd80      	pop	{r7, pc}

20001b38 <bufferPut>:

//Lägger till ett elem i buffern.
//Returnerar 1 om det lyckades, 0 annars.
uint8_t bufferPut ( FIFO *buffer, uint8_t elem) {
20001b38:	b580      	push	{r7, lr}
20001b3a:	b082      	sub	sp, #8
20001b3c:	af00      	add	r7, sp, #0
20001b3e:	6078      	str	r0, [r7, #4]
20001b40:	000a      	movs	r2, r1
20001b42:	1cfb      	adds	r3, r7, #3
20001b44:	701a      	strb	r2, [r3, #0]
    //Kollar om bufferten är full.
    if (buffer->count == BUFFERSIZE){
20001b46:	687b      	ldr	r3, [r7, #4]
20001b48:	2264      	movs	r2, #100	; 0x64
20001b4a:	5c9b      	ldrb	r3, [r3, r2]
20001b4c:	2b64      	cmp	r3, #100	; 0x64
20001b4e:	d101      	bne.n	20001b54 <bufferPut+0x1c>
        return 0;
20001b50:	2300      	movs	r3, #0
20001b52:	e01e      	b.n	20001b92 <bufferPut+0x5a>
    }

    //Lägger elem i bufferten
    buffer->buff[buffer->in++] = elem;
20001b54:	687b      	ldr	r3, [r7, #4]
20001b56:	2265      	movs	r2, #101	; 0x65
20001b58:	5c9b      	ldrb	r3, [r3, r2]
20001b5a:	1c5a      	adds	r2, r3, #1
20001b5c:	b2d0      	uxtb	r0, r2
20001b5e:	687a      	ldr	r2, [r7, #4]
20001b60:	2165      	movs	r1, #101	; 0x65
20001b62:	5450      	strb	r0, [r2, r1]
20001b64:	0019      	movs	r1, r3
20001b66:	687b      	ldr	r3, [r7, #4]
20001b68:	1cfa      	adds	r2, r7, #3
20001b6a:	7812      	ldrb	r2, [r2, #0]
20001b6c:	545a      	strb	r2, [r3, r1]
    buffer->count++;
20001b6e:	687b      	ldr	r3, [r7, #4]
20001b70:	2264      	movs	r2, #100	; 0x64
20001b72:	5c9b      	ldrb	r3, [r3, r2]
20001b74:	3301      	adds	r3, #1
20001b76:	b2d9      	uxtb	r1, r3
20001b78:	687b      	ldr	r3, [r7, #4]
20001b7a:	2264      	movs	r2, #100	; 0x64
20001b7c:	5499      	strb	r1, [r3, r2]

    //Justerar pekaren om vi nått slutet
    if (buffer->in == BUFFERSIZE)
20001b7e:	687b      	ldr	r3, [r7, #4]
20001b80:	2265      	movs	r2, #101	; 0x65
20001b82:	5c9b      	ldrb	r3, [r3, r2]
20001b84:	2b64      	cmp	r3, #100	; 0x64
20001b86:	d103      	bne.n	20001b90 <bufferPut+0x58>
        buffer->in = 0;
20001b88:	687b      	ldr	r3, [r7, #4]
20001b8a:	2265      	movs	r2, #101	; 0x65
20001b8c:	2100      	movs	r1, #0
20001b8e:	5499      	strb	r1, [r3, r2]

    return 1;
20001b90:	2301      	movs	r3, #1
}
20001b92:	0018      	movs	r0, r3
20001b94:	46bd      	mov	sp, r7
20001b96:	b002      	add	sp, #8
20001b98:	bd80      	pop	{r7, pc}

20001b9a <bufferOverrideLast>:

//Skriver över föregående elem i buffern.
//Ändrar inga indexeringsvariabler
void bufferOverrideLast ( FIFO *buffer, uint8_t elem) {
20001b9a:	b580      	push	{r7, lr}
20001b9c:	b084      	sub	sp, #16
20001b9e:	af00      	add	r7, sp, #0
20001ba0:	6078      	str	r0, [r7, #4]
20001ba2:	000a      	movs	r2, r1
20001ba4:	1cfb      	adds	r3, r7, #3
20001ba6:	701a      	strb	r2, [r3, #0]
    //Index för föregående element i buffern
    uint8_t prevIndex;

    //Om index för nästa element är 0 så blir föregående BUFFERSIZE - 1
    //annars buffer->in - 1
    prevIndex =  (buffer->in == 0) ? BUFFERSIZE - 1 : buffer->in - 1;
20001ba8:	687b      	ldr	r3, [r7, #4]
20001baa:	2265      	movs	r2, #101	; 0x65
20001bac:	5c9b      	ldrb	r3, [r3, r2]
20001bae:	2b00      	cmp	r3, #0
20001bb0:	d005      	beq.n	20001bbe <bufferOverrideLast+0x24>
20001bb2:	687b      	ldr	r3, [r7, #4]
20001bb4:	2265      	movs	r2, #101	; 0x65
20001bb6:	5c9b      	ldrb	r3, [r3, r2]
20001bb8:	3b01      	subs	r3, #1
20001bba:	b2da      	uxtb	r2, r3
20001bbc:	e000      	b.n	20001bc0 <bufferOverrideLast+0x26>
20001bbe:	2263      	movs	r2, #99	; 0x63
20001bc0:	210f      	movs	r1, #15
20001bc2:	187b      	adds	r3, r7, r1
20001bc4:	701a      	strb	r2, [r3, #0]

    //Skriver över elem i bufferten
    buffer->buff[prevIndex] = elem;
20001bc6:	187b      	adds	r3, r7, r1
20001bc8:	781b      	ldrb	r3, [r3, #0]
20001bca:	687a      	ldr	r2, [r7, #4]
20001bcc:	1cf9      	adds	r1, r7, #3
20001bce:	7809      	ldrb	r1, [r1, #0]
20001bd0:	54d1      	strb	r1, [r2, r3]
}
20001bd2:	46c0      	nop			; (mov r8, r8)
20001bd4:	46bd      	mov	sp, r7
20001bd6:	b004      	add	sp, #16
20001bd8:	bd80      	pop	{r7, pc}

20001bda <bufferGet>:

//Hämtar ett element från buffern till dest.
//Returnerar 1 om det lyckades, 0 annars.
uint8_t bufferGet ( FIFO *buffer, uint8_t *dest) {
20001bda:	b580      	push	{r7, lr}
20001bdc:	b082      	sub	sp, #8
20001bde:	af00      	add	r7, sp, #0
20001be0:	6078      	str	r0, [r7, #4]
20001be2:	6039      	str	r1, [r7, #0]
    //Kollar om bufferten är tom
    if (!buffer->count){
20001be4:	687b      	ldr	r3, [r7, #4]
20001be6:	2264      	movs	r2, #100	; 0x64
20001be8:	5c9b      	ldrb	r3, [r3, r2]
20001bea:	2b00      	cmp	r3, #0
20001bec:	d101      	bne.n	20001bf2 <bufferGet+0x18>
        return 0;
20001bee:	2300      	movs	r3, #0
20001bf0:	e01e      	b.n	20001c30 <bufferGet+0x56>
    }

    //Hämtar element ur buffern till dest
    *dest = buffer->buff[buffer->out++];
20001bf2:	687b      	ldr	r3, [r7, #4]
20001bf4:	2266      	movs	r2, #102	; 0x66
20001bf6:	5c9b      	ldrb	r3, [r3, r2]
20001bf8:	1c5a      	adds	r2, r3, #1
20001bfa:	b2d0      	uxtb	r0, r2
20001bfc:	687a      	ldr	r2, [r7, #4]
20001bfe:	2166      	movs	r1, #102	; 0x66
20001c00:	5450      	strb	r0, [r2, r1]
20001c02:	001a      	movs	r2, r3
20001c04:	687b      	ldr	r3, [r7, #4]
20001c06:	5c9a      	ldrb	r2, [r3, r2]
20001c08:	683b      	ldr	r3, [r7, #0]
20001c0a:	701a      	strb	r2, [r3, #0]
    buffer->count--;
20001c0c:	687b      	ldr	r3, [r7, #4]
20001c0e:	2264      	movs	r2, #100	; 0x64
20001c10:	5c9b      	ldrb	r3, [r3, r2]
20001c12:	3b01      	subs	r3, #1
20001c14:	b2d9      	uxtb	r1, r3
20001c16:	687b      	ldr	r3, [r7, #4]
20001c18:	2264      	movs	r2, #100	; 0x64
20001c1a:	5499      	strb	r1, [r3, r2]

    //Justerar pekaren om vi nått slutet
    if (buffer->out == BUFFERSIZE)
20001c1c:	687b      	ldr	r3, [r7, #4]
20001c1e:	2266      	movs	r2, #102	; 0x66
20001c20:	5c9b      	ldrb	r3, [r3, r2]
20001c22:	2b64      	cmp	r3, #100	; 0x64
20001c24:	d103      	bne.n	20001c2e <bufferGet+0x54>
        buffer->out = 0;
20001c26:	687b      	ldr	r3, [r7, #4]
20001c28:	2266      	movs	r2, #102	; 0x66
20001c2a:	2100      	movs	r1, #0
20001c2c:	5499      	strb	r1, [r3, r2]

    return 1;
20001c2e:	2301      	movs	r3, #1
20001c30:	0018      	movs	r0, r3
20001c32:	46bd      	mov	sp, r7
20001c34:	b002      	add	sp, #8
20001c36:	bd80      	pop	{r7, pc}

20001c38 <USART_DeInit>:
  * @param  USARTx: where x can be 1, 2, 3, 4, 5, 6, 7 or 8 to select the USART or 
  *         UART peripheral.
  * @retval None
  */
void USART_DeInit(USART_TypeDef* USARTx)
{
20001c38:	b580      	push	{r7, lr}
20001c3a:	b082      	sub	sp, #8
20001c3c:	af00      	add	r7, sp, #0
20001c3e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  if (USARTx == USART1)
20001c40:	687b      	ldr	r3, [r7, #4]
20001c42:	4a41      	ldr	r2, [pc, #260]	; (20001d48 <USART_DeInit+0x110>)
20001c44:	4293      	cmp	r3, r2
20001c46:	d108      	bne.n	20001c5a <USART_DeInit+0x22>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, ENABLE);
20001c48:	2101      	movs	r1, #1
20001c4a:	2010      	movs	r0, #16
20001c4c:	f7fe ff24 	bl	20000a98 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, DISABLE);
20001c50:	2100      	movs	r1, #0
20001c52:	2010      	movs	r0, #16
20001c54:	f7fe ff20 	bl	20000a98 <RCC_APB2PeriphResetCmd>
    { 
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART8, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART8, DISABLE);
    }
  }
}
20001c58:	e071      	b.n	20001d3e <USART_DeInit+0x106>
  else if (USARTx == USART2)
20001c5a:	687b      	ldr	r3, [r7, #4]
20001c5c:	4a3b      	ldr	r2, [pc, #236]	; (20001d4c <USART_DeInit+0x114>)
20001c5e:	4293      	cmp	r3, r2
20001c60:	d10c      	bne.n	20001c7c <USART_DeInit+0x44>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, ENABLE);
20001c62:	2380      	movs	r3, #128	; 0x80
20001c64:	029b      	lsls	r3, r3, #10
20001c66:	2101      	movs	r1, #1
20001c68:	0018      	movs	r0, r3
20001c6a:	f7fe fef5 	bl	20000a58 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, DISABLE);
20001c6e:	2380      	movs	r3, #128	; 0x80
20001c70:	029b      	lsls	r3, r3, #10
20001c72:	2100      	movs	r1, #0
20001c74:	0018      	movs	r0, r3
20001c76:	f7fe feef 	bl	20000a58 <RCC_APB1PeriphResetCmd>
}
20001c7a:	e060      	b.n	20001d3e <USART_DeInit+0x106>
  else if (USARTx == USART3)
20001c7c:	687b      	ldr	r3, [r7, #4]
20001c7e:	4a34      	ldr	r2, [pc, #208]	; (20001d50 <USART_DeInit+0x118>)
20001c80:	4293      	cmp	r3, r2
20001c82:	d10c      	bne.n	20001c9e <USART_DeInit+0x66>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, ENABLE);
20001c84:	2380      	movs	r3, #128	; 0x80
20001c86:	02db      	lsls	r3, r3, #11
20001c88:	2101      	movs	r1, #1
20001c8a:	0018      	movs	r0, r3
20001c8c:	f7fe fee4 	bl	20000a58 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, DISABLE);
20001c90:	2380      	movs	r3, #128	; 0x80
20001c92:	02db      	lsls	r3, r3, #11
20001c94:	2100      	movs	r1, #0
20001c96:	0018      	movs	r0, r3
20001c98:	f7fe fede 	bl	20000a58 <RCC_APB1PeriphResetCmd>
}
20001c9c:	e04f      	b.n	20001d3e <USART_DeInit+0x106>
  else if (USARTx == UART4)
20001c9e:	687b      	ldr	r3, [r7, #4]
20001ca0:	4a2c      	ldr	r2, [pc, #176]	; (20001d54 <USART_DeInit+0x11c>)
20001ca2:	4293      	cmp	r3, r2
20001ca4:	d10c      	bne.n	20001cc0 <USART_DeInit+0x88>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, ENABLE);
20001ca6:	2380      	movs	r3, #128	; 0x80
20001ca8:	031b      	lsls	r3, r3, #12
20001caa:	2101      	movs	r1, #1
20001cac:	0018      	movs	r0, r3
20001cae:	f7fe fed3 	bl	20000a58 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, DISABLE);
20001cb2:	2380      	movs	r3, #128	; 0x80
20001cb4:	031b      	lsls	r3, r3, #12
20001cb6:	2100      	movs	r1, #0
20001cb8:	0018      	movs	r0, r3
20001cba:	f7fe fecd 	bl	20000a58 <RCC_APB1PeriphResetCmd>
}
20001cbe:	e03e      	b.n	20001d3e <USART_DeInit+0x106>
  else if (USARTx == UART5)
20001cc0:	687b      	ldr	r3, [r7, #4]
20001cc2:	4a25      	ldr	r2, [pc, #148]	; (20001d58 <USART_DeInit+0x120>)
20001cc4:	4293      	cmp	r3, r2
20001cc6:	d10c      	bne.n	20001ce2 <USART_DeInit+0xaa>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, ENABLE);
20001cc8:	2380      	movs	r3, #128	; 0x80
20001cca:	035b      	lsls	r3, r3, #13
20001ccc:	2101      	movs	r1, #1
20001cce:	0018      	movs	r0, r3
20001cd0:	f7fe fec2 	bl	20000a58 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, DISABLE);
20001cd4:	2380      	movs	r3, #128	; 0x80
20001cd6:	035b      	lsls	r3, r3, #13
20001cd8:	2100      	movs	r1, #0
20001cda:	0018      	movs	r0, r3
20001cdc:	f7fe febc 	bl	20000a58 <RCC_APB1PeriphResetCmd>
}
20001ce0:	e02d      	b.n	20001d3e <USART_DeInit+0x106>
  else if (USARTx == USART6)
20001ce2:	687b      	ldr	r3, [r7, #4]
20001ce4:	4a1d      	ldr	r2, [pc, #116]	; (20001d5c <USART_DeInit+0x124>)
20001ce6:	4293      	cmp	r3, r2
20001ce8:	d108      	bne.n	20001cfc <USART_DeInit+0xc4>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, ENABLE);
20001cea:	2101      	movs	r1, #1
20001cec:	2020      	movs	r0, #32
20001cee:	f7fe fed3 	bl	20000a98 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, DISABLE);
20001cf2:	2100      	movs	r1, #0
20001cf4:	2020      	movs	r0, #32
20001cf6:	f7fe fecf 	bl	20000a98 <RCC_APB2PeriphResetCmd>
}
20001cfa:	e020      	b.n	20001d3e <USART_DeInit+0x106>
  else if (USARTx == UART7)
20001cfc:	687b      	ldr	r3, [r7, #4]
20001cfe:	4a18      	ldr	r2, [pc, #96]	; (20001d60 <USART_DeInit+0x128>)
20001d00:	4293      	cmp	r3, r2
20001d02:	d10c      	bne.n	20001d1e <USART_DeInit+0xe6>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART7, ENABLE);
20001d04:	2380      	movs	r3, #128	; 0x80
20001d06:	05db      	lsls	r3, r3, #23
20001d08:	2101      	movs	r1, #1
20001d0a:	0018      	movs	r0, r3
20001d0c:	f7fe fea4 	bl	20000a58 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART7, DISABLE);
20001d10:	2380      	movs	r3, #128	; 0x80
20001d12:	05db      	lsls	r3, r3, #23
20001d14:	2100      	movs	r1, #0
20001d16:	0018      	movs	r0, r3
20001d18:	f7fe fe9e 	bl	20000a58 <RCC_APB1PeriphResetCmd>
}
20001d1c:	e00f      	b.n	20001d3e <USART_DeInit+0x106>
    if (USARTx == UART8)
20001d1e:	687b      	ldr	r3, [r7, #4]
20001d20:	4a10      	ldr	r2, [pc, #64]	; (20001d64 <USART_DeInit+0x12c>)
20001d22:	4293      	cmp	r3, r2
20001d24:	d10b      	bne.n	20001d3e <USART_DeInit+0x106>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART8, ENABLE);
20001d26:	2380      	movs	r3, #128	; 0x80
20001d28:	061b      	lsls	r3, r3, #24
20001d2a:	2101      	movs	r1, #1
20001d2c:	0018      	movs	r0, r3
20001d2e:	f7fe fe93 	bl	20000a58 <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART8, DISABLE);
20001d32:	2380      	movs	r3, #128	; 0x80
20001d34:	061b      	lsls	r3, r3, #24
20001d36:	2100      	movs	r1, #0
20001d38:	0018      	movs	r0, r3
20001d3a:	f7fe fe8d 	bl	20000a58 <RCC_APB1PeriphResetCmd>
}
20001d3e:	46c0      	nop			; (mov r8, r8)
20001d40:	46bd      	mov	sp, r7
20001d42:	b002      	add	sp, #8
20001d44:	bd80      	pop	{r7, pc}
20001d46:	46c0      	nop			; (mov r8, r8)
20001d48:	40011000 	andmi	r1, r1, r0
20001d4c:	40004400 	andmi	r4, r0, r0, lsl #8
20001d50:	40004800 	andmi	r4, r0, r0, lsl #16
20001d54:	40004c00 	andmi	r4, r0, r0, lsl #24
20001d58:	40005000 	andmi	r5, r0, r0
20001d5c:	40011400 	andmi	r1, r1, r0, lsl #8
20001d60:	40007800 	andmi	r7, r0, r0, lsl #16
20001d64:	40007c00 	andmi	r7, r0, r0, lsl #24

20001d68 <USART_Init>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
20001d68:	b580      	push	{r7, lr}
20001d6a:	b08a      	sub	sp, #40	; 0x28
20001d6c:	af00      	add	r7, sp, #0
20001d6e:	6078      	str	r0, [r7, #4]
20001d70:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00, apbclock = 0x00;
20001d72:	2300      	movs	r3, #0
20001d74:	627b      	str	r3, [r7, #36]	; 0x24
20001d76:	2300      	movs	r3, #0
20001d78:	623b      	str	r3, [r7, #32]
  uint32_t integerdivider = 0x00;
20001d7a:	2300      	movs	r3, #0
20001d7c:	61fb      	str	r3, [r7, #28]
  uint32_t fractionaldivider = 0x00;
20001d7e:	2300      	movs	r3, #0
20001d80:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  }

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
20001d82:	687b      	ldr	r3, [r7, #4]
20001d84:	8a1b      	ldrh	r3, [r3, #16]
20001d86:	b29b      	uxth	r3, r3
20001d88:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
20001d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20001d8c:	4a56      	ldr	r2, [pc, #344]	; (20001ee8 <USART_Init+0x180>)
20001d8e:	4013      	ands	r3, r2
20001d90:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit :
      Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
20001d92:	683b      	ldr	r3, [r7, #0]
20001d94:	88db      	ldrh	r3, [r3, #6]
20001d96:	001a      	movs	r2, r3
20001d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20001d9a:	4313      	orrs	r3, r2
20001d9c:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
20001d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20001da0:	b29a      	uxth	r2, r3
20001da2:	687b      	ldr	r3, [r7, #4]
20001da4:	821a      	strh	r2, [r3, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
20001da6:	687b      	ldr	r3, [r7, #4]
20001da8:	899b      	ldrh	r3, [r3, #12]
20001daa:	b29b      	uxth	r3, r3
20001dac:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
20001dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20001db0:	4a4e      	ldr	r2, [pc, #312]	; (20001eec <USART_Init+0x184>)
20001db2:	4013      	ands	r3, r2
20001db4:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
20001db6:	683b      	ldr	r3, [r7, #0]
20001db8:	889a      	ldrh	r2, [r3, #4]
20001dba:	683b      	ldr	r3, [r7, #0]
20001dbc:	891b      	ldrh	r3, [r3, #8]
20001dbe:	4313      	orrs	r3, r2
20001dc0:	b29a      	uxth	r2, r3
            USART_InitStruct->USART_Mode;
20001dc2:	683b      	ldr	r3, [r7, #0]
20001dc4:	895b      	ldrh	r3, [r3, #10]
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
20001dc6:	4313      	orrs	r3, r2
20001dc8:	b29b      	uxth	r3, r3
20001dca:	001a      	movs	r2, r3
20001dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20001dce:	4313      	orrs	r3, r2
20001dd0:	627b      	str	r3, [r7, #36]	; 0x24

  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
20001dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20001dd4:	b29a      	uxth	r2, r3
20001dd6:	687b      	ldr	r3, [r7, #4]
20001dd8:	819a      	strh	r2, [r3, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
20001dda:	687b      	ldr	r3, [r7, #4]
20001ddc:	8a9b      	ldrh	r3, [r3, #20]
20001dde:	b29b      	uxth	r3, r3
20001de0:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);
20001de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20001de4:	4a42      	ldr	r2, [pc, #264]	; (20001ef0 <USART_Init+0x188>)
20001de6:	4013      	ands	r3, r2
20001de8:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART HFC : 
      Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
20001dea:	683b      	ldr	r3, [r7, #0]
20001dec:	899b      	ldrh	r3, [r3, #12]
20001dee:	001a      	movs	r2, r3
20001df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20001df2:	4313      	orrs	r3, r2
20001df4:	627b      	str	r3, [r7, #36]	; 0x24

  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
20001df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20001df8:	b29a      	uxth	r2, r3
20001dfa:	687b      	ldr	r3, [r7, #4]
20001dfc:	829a      	strh	r2, [r3, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate */
  RCC_GetClocksFreq(&RCC_ClocksStatus);
20001dfe:	2308      	movs	r3, #8
20001e00:	18fb      	adds	r3, r7, r3
20001e02:	0018      	movs	r0, r3
20001e04:	f7fe fb78 	bl	200004f8 <RCC_GetClocksFreq>

  if ((USARTx == USART1) || (USARTx == USART6))
20001e08:	687b      	ldr	r3, [r7, #4]
20001e0a:	4a3a      	ldr	r2, [pc, #232]	; (20001ef4 <USART_Init+0x18c>)
20001e0c:	4293      	cmp	r3, r2
20001e0e:	d003      	beq.n	20001e18 <USART_Init+0xb0>
20001e10:	687b      	ldr	r3, [r7, #4]
20001e12:	4a39      	ldr	r2, [pc, #228]	; (20001ef8 <USART_Init+0x190>)
20001e14:	4293      	cmp	r3, r2
20001e16:	d104      	bne.n	20001e22 <USART_Init+0xba>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
20001e18:	2308      	movs	r3, #8
20001e1a:	18fb      	adds	r3, r7, r3
20001e1c:	68db      	ldr	r3, [r3, #12]
20001e1e:	623b      	str	r3, [r7, #32]
20001e20:	e003      	b.n	20001e2a <USART_Init+0xc2>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
20001e22:	2308      	movs	r3, #8
20001e24:	18fb      	adds	r3, r7, r3
20001e26:	689b      	ldr	r3, [r3, #8]
20001e28:	623b      	str	r3, [r7, #32]
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
20001e2a:	687b      	ldr	r3, [r7, #4]
20001e2c:	899b      	ldrh	r3, [r3, #12]
20001e2e:	b29b      	uxth	r3, r3
20001e30:	b21b      	sxth	r3, r3
20001e32:	2b00      	cmp	r3, #0
20001e34:	da0f      	bge.n	20001e56 <USART_Init+0xee>
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
20001e36:	6a3a      	ldr	r2, [r7, #32]
20001e38:	0013      	movs	r3, r2
20001e3a:	009b      	lsls	r3, r3, #2
20001e3c:	189b      	adds	r3, r3, r2
20001e3e:	009a      	lsls	r2, r3, #2
20001e40:	189a      	adds	r2, r3, r2
20001e42:	683b      	ldr	r3, [r7, #0]
20001e44:	681b      	ldr	r3, [r3, #0]
20001e46:	005b      	lsls	r3, r3, #1
20001e48:	0019      	movs	r1, r3
20001e4a:	0010      	movs	r0, r2
20001e4c:	f000 fbf4 	bl	20002638 <__udivsi3>
20001e50:	0003      	movs	r3, r0
20001e52:	61fb      	str	r3, [r7, #28]
20001e54:	e00e      	b.n	20001e74 <USART_Init+0x10c>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
20001e56:	6a3a      	ldr	r2, [r7, #32]
20001e58:	0013      	movs	r3, r2
20001e5a:	009b      	lsls	r3, r3, #2
20001e5c:	189b      	adds	r3, r3, r2
20001e5e:	009a      	lsls	r2, r3, #2
20001e60:	189a      	adds	r2, r3, r2
20001e62:	683b      	ldr	r3, [r7, #0]
20001e64:	681b      	ldr	r3, [r3, #0]
20001e66:	009b      	lsls	r3, r3, #2
20001e68:	0019      	movs	r1, r3
20001e6a:	0010      	movs	r0, r2
20001e6c:	f000 fbe4 	bl	20002638 <__udivsi3>
20001e70:	0003      	movs	r3, r0
20001e72:	61fb      	str	r3, [r7, #28]
  }
  tmpreg = (integerdivider / 100) << 4;
20001e74:	69fb      	ldr	r3, [r7, #28]
20001e76:	2164      	movs	r1, #100	; 0x64
20001e78:	0018      	movs	r0, r3
20001e7a:	f000 fbdd 	bl	20002638 <__udivsi3>
20001e7e:	0003      	movs	r3, r0
20001e80:	011b      	lsls	r3, r3, #4
20001e82:	627b      	str	r3, [r7, #36]	; 0x24

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
20001e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20001e86:	091b      	lsrs	r3, r3, #4
20001e88:	2264      	movs	r2, #100	; 0x64
20001e8a:	4353      	muls	r3, r2
20001e8c:	69fa      	ldr	r2, [r7, #28]
20001e8e:	1ad3      	subs	r3, r2, r3
20001e90:	61bb      	str	r3, [r7, #24]

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
20001e92:	687b      	ldr	r3, [r7, #4]
20001e94:	899b      	ldrh	r3, [r3, #12]
20001e96:	b29b      	uxth	r3, r3
20001e98:	b21b      	sxth	r3, r3
20001e9a:	2b00      	cmp	r3, #0
20001e9c:	da0e      	bge.n	20001ebc <USART_Init+0x154>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
20001e9e:	69bb      	ldr	r3, [r7, #24]
20001ea0:	00db      	lsls	r3, r3, #3
20001ea2:	3332      	adds	r3, #50	; 0x32
20001ea4:	2164      	movs	r1, #100	; 0x64
20001ea6:	0018      	movs	r0, r3
20001ea8:	f000 fbc6 	bl	20002638 <__udivsi3>
20001eac:	0003      	movs	r3, r0
20001eae:	001a      	movs	r2, r3
20001eb0:	2307      	movs	r3, #7
20001eb2:	4013      	ands	r3, r2
20001eb4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
20001eb6:	4313      	orrs	r3, r2
20001eb8:	627b      	str	r3, [r7, #36]	; 0x24
20001eba:	e00d      	b.n	20001ed8 <USART_Init+0x170>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
20001ebc:	69bb      	ldr	r3, [r7, #24]
20001ebe:	011b      	lsls	r3, r3, #4
20001ec0:	3332      	adds	r3, #50	; 0x32
20001ec2:	2164      	movs	r1, #100	; 0x64
20001ec4:	0018      	movs	r0, r3
20001ec6:	f000 fbb7 	bl	20002638 <__udivsi3>
20001eca:	0003      	movs	r3, r0
20001ecc:	001a      	movs	r2, r3
20001ece:	230f      	movs	r3, #15
20001ed0:	4013      	ands	r3, r2
20001ed2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
20001ed4:	4313      	orrs	r3, r2
20001ed6:	627b      	str	r3, [r7, #36]	; 0x24
  }
  
  /* Write to USART BRR register */
  USARTx->BRR = (uint16_t)tmpreg;
20001ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20001eda:	b29a      	uxth	r2, r3
20001edc:	687b      	ldr	r3, [r7, #4]
20001ede:	811a      	strh	r2, [r3, #8]
}
20001ee0:	46c0      	nop			; (mov r8, r8)
20001ee2:	46bd      	mov	sp, r7
20001ee4:	b00a      	add	sp, #40	; 0x28
20001ee6:	bd80      	pop	{r7, pc}
20001ee8:	ffffcfff 			; <UNDEFINED> instruction: 0xffffcfff
20001eec:	ffffe9f3 			; <UNDEFINED> instruction: 0xffffe9f3
20001ef0:	fffffcff 			; <UNDEFINED> instruction: 0xfffffcff
20001ef4:	40011000 	andmi	r1, r1, r0
20001ef8:	40011400 	andmi	r1, r1, r0, lsl #8

20001efc <USART_StructInit>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void USART_StructInit(USART_InitTypeDef* USART_InitStruct)
{
20001efc:	b580      	push	{r7, lr}
20001efe:	b082      	sub	sp, #8
20001f00:	af00      	add	r7, sp, #0
20001f02:	6078      	str	r0, [r7, #4]
  /* USART_InitStruct members default value */
  USART_InitStruct->USART_BaudRate = 9600;
20001f04:	687b      	ldr	r3, [r7, #4]
20001f06:	2296      	movs	r2, #150	; 0x96
20001f08:	0192      	lsls	r2, r2, #6
20001f0a:	601a      	str	r2, [r3, #0]
  USART_InitStruct->USART_WordLength = USART_WordLength_8b;
20001f0c:	687b      	ldr	r3, [r7, #4]
20001f0e:	2200      	movs	r2, #0
20001f10:	809a      	strh	r2, [r3, #4]
  USART_InitStruct->USART_StopBits = USART_StopBits_1;
20001f12:	687b      	ldr	r3, [r7, #4]
20001f14:	2200      	movs	r2, #0
20001f16:	80da      	strh	r2, [r3, #6]
  USART_InitStruct->USART_Parity = USART_Parity_No ;
20001f18:	687b      	ldr	r3, [r7, #4]
20001f1a:	2200      	movs	r2, #0
20001f1c:	811a      	strh	r2, [r3, #8]
  USART_InitStruct->USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
20001f1e:	687b      	ldr	r3, [r7, #4]
20001f20:	220c      	movs	r2, #12
20001f22:	815a      	strh	r2, [r3, #10]
  USART_InitStruct->USART_HardwareFlowControl = USART_HardwareFlowControl_None;  
20001f24:	687b      	ldr	r3, [r7, #4]
20001f26:	2200      	movs	r2, #0
20001f28:	819a      	strh	r2, [r3, #12]
}
20001f2a:	46c0      	nop			; (mov r8, r8)
20001f2c:	46bd      	mov	sp, r7
20001f2e:	b002      	add	sp, #8
20001f30:	bd80      	pop	{r7, pc}

20001f32 <USART_ClockInit>:
  *         contains the configuration information for the specified  USART peripheral.
  * @note   The Smart Card and Synchronous modes are not available for UART4 and UART5.    
  * @retval None
  */
void USART_ClockInit(USART_TypeDef* USARTx, USART_ClockInitTypeDef* USART_ClockInitStruct)
{
20001f32:	b580      	push	{r7, lr}
20001f34:	b084      	sub	sp, #16
20001f36:	af00      	add	r7, sp, #0
20001f38:	6078      	str	r0, [r7, #4]
20001f3a:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00;
20001f3c:	2300      	movs	r3, #0
20001f3e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_USART_CPOL(USART_ClockInitStruct->USART_CPOL));
  assert_param(IS_USART_CPHA(USART_ClockInitStruct->USART_CPHA));
  assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));
  
/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
20001f40:	687b      	ldr	r3, [r7, #4]
20001f42:	8a1b      	ldrh	r3, [r3, #16]
20001f44:	b29b      	uxth	r3, r3
20001f46:	60fb      	str	r3, [r7, #12]
  /* Clear CLKEN, CPOL, CPHA and LBCL bits */
  tmpreg &= (uint32_t)~((uint32_t)CR2_CLOCK_CLEAR_MASK);
20001f48:	68fb      	ldr	r3, [r7, #12]
20001f4a:	4a0e      	ldr	r2, [pc, #56]	; (20001f84 <USART_ClockInit+0x52>)
20001f4c:	4013      	ands	r3, r2
20001f4e:	60fb      	str	r3, [r7, #12]
  /* Configure the USART Clock, CPOL, CPHA and LastBit ------------*/
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
20001f50:	683b      	ldr	r3, [r7, #0]
20001f52:	881a      	ldrh	r2, [r3, #0]
20001f54:	683b      	ldr	r3, [r7, #0]
20001f56:	885b      	ldrh	r3, [r3, #2]
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
20001f58:	4313      	orrs	r3, r2
20001f5a:	b29a      	uxth	r2, r3
20001f5c:	683b      	ldr	r3, [r7, #0]
20001f5e:	889b      	ldrh	r3, [r3, #4]
20001f60:	4313      	orrs	r3, r2
20001f62:	b29a      	uxth	r2, r3
20001f64:	683b      	ldr	r3, [r7, #0]
20001f66:	88db      	ldrh	r3, [r3, #6]
20001f68:	4313      	orrs	r3, r2
20001f6a:	b29b      	uxth	r3, r3
20001f6c:	001a      	movs	r2, r3
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
20001f6e:	68fb      	ldr	r3, [r7, #12]
20001f70:	4313      	orrs	r3, r2
20001f72:	60fb      	str	r3, [r7, #12]
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
20001f74:	68fb      	ldr	r3, [r7, #12]
20001f76:	b29a      	uxth	r2, r3
20001f78:	687b      	ldr	r3, [r7, #4]
20001f7a:	821a      	strh	r2, [r3, #16]
}
20001f7c:	46c0      	nop			; (mov r8, r8)
20001f7e:	46bd      	mov	sp, r7
20001f80:	b004      	add	sp, #16
20001f82:	bd80      	pop	{r7, pc}
20001f84:	fffff0ff 			; <UNDEFINED> instruction: 0xfffff0ff

20001f88 <USART_ClockStructInit>:
  * @param  USART_ClockInitStruct: pointer to a USART_ClockInitTypeDef structure
  *         which will be initialized.
  * @retval None
  */
void USART_ClockStructInit(USART_ClockInitTypeDef* USART_ClockInitStruct)
{
20001f88:	b580      	push	{r7, lr}
20001f8a:	b082      	sub	sp, #8
20001f8c:	af00      	add	r7, sp, #0
20001f8e:	6078      	str	r0, [r7, #4]
  /* USART_ClockInitStruct members default value */
  USART_ClockInitStruct->USART_Clock = USART_Clock_Disable;
20001f90:	687b      	ldr	r3, [r7, #4]
20001f92:	2200      	movs	r2, #0
20001f94:	801a      	strh	r2, [r3, #0]
  USART_ClockInitStruct->USART_CPOL = USART_CPOL_Low;
20001f96:	687b      	ldr	r3, [r7, #4]
20001f98:	2200      	movs	r2, #0
20001f9a:	805a      	strh	r2, [r3, #2]
  USART_ClockInitStruct->USART_CPHA = USART_CPHA_1Edge;
20001f9c:	687b      	ldr	r3, [r7, #4]
20001f9e:	2200      	movs	r2, #0
20001fa0:	809a      	strh	r2, [r3, #4]
  USART_ClockInitStruct->USART_LastBit = USART_LastBit_Disable;
20001fa2:	687b      	ldr	r3, [r7, #4]
20001fa4:	2200      	movs	r2, #0
20001fa6:	80da      	strh	r2, [r3, #6]
}
20001fa8:	46c0      	nop			; (mov r8, r8)
20001faa:	46bd      	mov	sp, r7
20001fac:	b002      	add	sp, #8
20001fae:	bd80      	pop	{r7, pc}

20001fb0 <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
20001fb0:	b580      	push	{r7, lr}
20001fb2:	b082      	sub	sp, #8
20001fb4:	af00      	add	r7, sp, #0
20001fb6:	6078      	str	r0, [r7, #4]
20001fb8:	000a      	movs	r2, r1
20001fba:	1cfb      	adds	r3, r7, #3
20001fbc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
20001fbe:	1cfb      	adds	r3, r7, #3
20001fc0:	781b      	ldrb	r3, [r3, #0]
20001fc2:	2b00      	cmp	r3, #0
20001fc4:	d009      	beq.n	20001fda <USART_Cmd+0x2a>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_UE;
20001fc6:	687b      	ldr	r3, [r7, #4]
20001fc8:	899b      	ldrh	r3, [r3, #12]
20001fca:	b29b      	uxth	r3, r3
20001fcc:	2280      	movs	r2, #128	; 0x80
20001fce:	0192      	lsls	r2, r2, #6
20001fd0:	4313      	orrs	r3, r2
20001fd2:	b29a      	uxth	r2, r3
20001fd4:	687b      	ldr	r3, [r7, #4]
20001fd6:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
  }
}
20001fd8:	e007      	b.n	20001fea <USART_Cmd+0x3a>
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
20001fda:	687b      	ldr	r3, [r7, #4]
20001fdc:	899b      	ldrh	r3, [r3, #12]
20001fde:	b29b      	uxth	r3, r3
20001fe0:	4a04      	ldr	r2, [pc, #16]	; (20001ff4 <USART_Cmd+0x44>)
20001fe2:	4013      	ands	r3, r2
20001fe4:	b29a      	uxth	r2, r3
20001fe6:	687b      	ldr	r3, [r7, #4]
20001fe8:	819a      	strh	r2, [r3, #12]
}
20001fea:	46c0      	nop			; (mov r8, r8)
20001fec:	46bd      	mov	sp, r7
20001fee:	b002      	add	sp, #8
20001ff0:	bd80      	pop	{r7, pc}
20001ff2:	46c0      	nop			; (mov r8, r8)
20001ff4:	ffffdfff 			; <UNDEFINED> instruction: 0xffffdfff

20001ff8 <USART_SetPrescaler>:
  * @param  USART_Prescaler: specifies the prescaler clock. 
  * @note   The function is used for IrDA mode with UART4 and UART5.   
  * @retval None
  */
void USART_SetPrescaler(USART_TypeDef* USARTx, uint8_t USART_Prescaler)
{ 
20001ff8:	b580      	push	{r7, lr}
20001ffa:	b082      	sub	sp, #8
20001ffc:	af00      	add	r7, sp, #0
20001ffe:	6078      	str	r0, [r7, #4]
20002000:	000a      	movs	r2, r1
20002002:	1cfb      	adds	r3, r7, #3
20002004:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Clear the USART prescaler */
  USARTx->GTPR &= USART_GTPR_GT;
20002006:	687b      	ldr	r3, [r7, #4]
20002008:	8b1b      	ldrh	r3, [r3, #24]
2000200a:	b29b      	uxth	r3, r3
2000200c:	22ff      	movs	r2, #255	; 0xff
2000200e:	4393      	bics	r3, r2
20002010:	b29a      	uxth	r2, r3
20002012:	687b      	ldr	r3, [r7, #4]
20002014:	831a      	strh	r2, [r3, #24]
  /* Set the USART prescaler */
  USARTx->GTPR |= USART_Prescaler;
20002016:	687b      	ldr	r3, [r7, #4]
20002018:	8b1b      	ldrh	r3, [r3, #24]
2000201a:	b29a      	uxth	r2, r3
2000201c:	1cfb      	adds	r3, r7, #3
2000201e:	781b      	ldrb	r3, [r3, #0]
20002020:	b29b      	uxth	r3, r3
20002022:	4313      	orrs	r3, r2
20002024:	b29a      	uxth	r2, r3
20002026:	687b      	ldr	r3, [r7, #4]
20002028:	831a      	strh	r2, [r3, #24]
}
2000202a:	46c0      	nop			; (mov r8, r8)
2000202c:	46bd      	mov	sp, r7
2000202e:	b002      	add	sp, #8
20002030:	bd80      	pop	{r7, pc}

20002032 <USART_OverSampling8Cmd>:
  * @param  NewState: new state of the USART 8x oversampling mode.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_OverSampling8Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
20002032:	b580      	push	{r7, lr}
20002034:	b082      	sub	sp, #8
20002036:	af00      	add	r7, sp, #0
20002038:	6078      	str	r0, [r7, #4]
2000203a:	000a      	movs	r2, r1
2000203c:	1cfb      	adds	r3, r7, #3
2000203e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
20002040:	1cfb      	adds	r3, r7, #3
20002042:	781b      	ldrb	r3, [r3, #0]
20002044:	2b00      	cmp	r3, #0
20002046:	d008      	beq.n	2000205a <USART_OverSampling8Cmd+0x28>
  {
    /* Enable the 8x Oversampling mode by setting the OVER8 bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_OVER8;
20002048:	687b      	ldr	r3, [r7, #4]
2000204a:	899b      	ldrh	r3, [r3, #12]
2000204c:	b29b      	uxth	r3, r3
2000204e:	4a09      	ldr	r2, [pc, #36]	; (20002074 <USART_OverSampling8Cmd+0x42>)
20002050:	4313      	orrs	r3, r2
20002052:	b29a      	uxth	r2, r3
20002054:	687b      	ldr	r3, [r7, #4]
20002056:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the 8x Oversampling mode by clearing the OVER8 bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_OVER8);
  }
}  
20002058:	e007      	b.n	2000206a <USART_OverSampling8Cmd+0x38>
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_OVER8);
2000205a:	687b      	ldr	r3, [r7, #4]
2000205c:	899b      	ldrh	r3, [r3, #12]
2000205e:	b29b      	uxth	r3, r3
20002060:	045b      	lsls	r3, r3, #17
20002062:	0c5b      	lsrs	r3, r3, #17
20002064:	b29a      	uxth	r2, r3
20002066:	687b      	ldr	r3, [r7, #4]
20002068:	819a      	strh	r2, [r3, #12]
}  
2000206a:	46c0      	nop			; (mov r8, r8)
2000206c:	46bd      	mov	sp, r7
2000206e:	b002      	add	sp, #8
20002070:	bd80      	pop	{r7, pc}
20002072:	46c0      	nop			; (mov r8, r8)
20002074:	ffff8000 			; <UNDEFINED> instruction: 0xffff8000

20002078 <USART_OneBitMethodCmd>:
  * @param  NewState: new state of the USART one bit sampling method.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_OneBitMethodCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
20002078:	b580      	push	{r7, lr}
2000207a:	b082      	sub	sp, #8
2000207c:	af00      	add	r7, sp, #0
2000207e:	6078      	str	r0, [r7, #4]
20002080:	000a      	movs	r2, r1
20002082:	1cfb      	adds	r3, r7, #3
20002084:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
20002086:	1cfb      	adds	r3, r7, #3
20002088:	781b      	ldrb	r3, [r3, #0]
2000208a:	2b00      	cmp	r3, #0
2000208c:	d009      	beq.n	200020a2 <USART_OneBitMethodCmd+0x2a>
  {
    /* Enable the one bit method by setting the ONEBITE bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_ONEBIT;
2000208e:	687b      	ldr	r3, [r7, #4]
20002090:	8a9b      	ldrh	r3, [r3, #20]
20002092:	b29b      	uxth	r3, r3
20002094:	2280      	movs	r2, #128	; 0x80
20002096:	0112      	lsls	r2, r2, #4
20002098:	4313      	orrs	r3, r2
2000209a:	b29a      	uxth	r2, r3
2000209c:	687b      	ldr	r3, [r7, #4]
2000209e:	829a      	strh	r2, [r3, #20]
  else
  {
    /* Disable the one bit method by clearing the ONEBITE bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_ONEBIT);
  }
}
200020a0:	e007      	b.n	200020b2 <USART_OneBitMethodCmd+0x3a>
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_ONEBIT);
200020a2:	687b      	ldr	r3, [r7, #4]
200020a4:	8a9b      	ldrh	r3, [r3, #20]
200020a6:	b29b      	uxth	r3, r3
200020a8:	4a04      	ldr	r2, [pc, #16]	; (200020bc <USART_OneBitMethodCmd+0x44>)
200020aa:	4013      	ands	r3, r2
200020ac:	b29a      	uxth	r2, r3
200020ae:	687b      	ldr	r3, [r7, #4]
200020b0:	829a      	strh	r2, [r3, #20]
}
200020b2:	46c0      	nop			; (mov r8, r8)
200020b4:	46bd      	mov	sp, r7
200020b6:	b002      	add	sp, #8
200020b8:	bd80      	pop	{r7, pc}
200020ba:	46c0      	nop			; (mov r8, r8)
200020bc:	fffff7ff 			; <UNDEFINED> instruction: 0xfffff7ff

200020c0 <USART_SendData>:
  *         UART peripheral.
  * @param  Data: the data to transmit.
  * @retval None
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
200020c0:	b580      	push	{r7, lr}
200020c2:	b082      	sub	sp, #8
200020c4:	af00      	add	r7, sp, #0
200020c6:	6078      	str	r0, [r7, #4]
200020c8:	000a      	movs	r2, r1
200020ca:	1cbb      	adds	r3, r7, #2
200020cc:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 
    
  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
200020ce:	1cbb      	adds	r3, r7, #2
200020d0:	881b      	ldrh	r3, [r3, #0]
200020d2:	05db      	lsls	r3, r3, #23
200020d4:	0ddb      	lsrs	r3, r3, #23
200020d6:	b29a      	uxth	r2, r3
200020d8:	687b      	ldr	r3, [r7, #4]
200020da:	809a      	strh	r2, [r3, #4]
}
200020dc:	46c0      	nop			; (mov r8, r8)
200020de:	46bd      	mov	sp, r7
200020e0:	b002      	add	sp, #8
200020e2:	bd80      	pop	{r7, pc}

200020e4 <USART_ReceiveData>:
  * @param  USARTx: where x can be 1, 2, 3, 4, 5, 6, 7 or 8 to select the USART or 
  *         UART peripheral.
  * @retval The received data.
  */
uint16_t USART_ReceiveData(USART_TypeDef* USARTx)
{
200020e4:	b580      	push	{r7, lr}
200020e6:	b082      	sub	sp, #8
200020e8:	af00      	add	r7, sp, #0
200020ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Receive Data */
  return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);
200020ec:	687b      	ldr	r3, [r7, #4]
200020ee:	889b      	ldrh	r3, [r3, #4]
200020f0:	b29b      	uxth	r3, r3
200020f2:	05db      	lsls	r3, r3, #23
200020f4:	0ddb      	lsrs	r3, r3, #23
200020f6:	b29b      	uxth	r3, r3
}
200020f8:	0018      	movs	r0, r3
200020fa:	46bd      	mov	sp, r7
200020fc:	b002      	add	sp, #8
200020fe:	bd80      	pop	{r7, pc}

20002100 <USART_SetAddress>:
  *         UART peripheral.
  * @param  USART_Address: Indicates the address of the USART node.
  * @retval None
  */
void USART_SetAddress(USART_TypeDef* USARTx, uint8_t USART_Address)
{
20002100:	b580      	push	{r7, lr}
20002102:	b082      	sub	sp, #8
20002104:	af00      	add	r7, sp, #0
20002106:	6078      	str	r0, [r7, #4]
20002108:	000a      	movs	r2, r1
2000210a:	1cfb      	adds	r3, r7, #3
2000210c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_ADDRESS(USART_Address)); 
    
  /* Clear the USART address */
  USARTx->CR2 &= (uint16_t)~((uint16_t)USART_CR2_ADD);
2000210e:	687b      	ldr	r3, [r7, #4]
20002110:	8a1b      	ldrh	r3, [r3, #16]
20002112:	b29b      	uxth	r3, r3
20002114:	220f      	movs	r2, #15
20002116:	4393      	bics	r3, r2
20002118:	b29a      	uxth	r2, r3
2000211a:	687b      	ldr	r3, [r7, #4]
2000211c:	821a      	strh	r2, [r3, #16]
  /* Set the USART address node */
  USARTx->CR2 |= USART_Address;
2000211e:	687b      	ldr	r3, [r7, #4]
20002120:	8a1b      	ldrh	r3, [r3, #16]
20002122:	b29a      	uxth	r2, r3
20002124:	1cfb      	adds	r3, r7, #3
20002126:	781b      	ldrb	r3, [r3, #0]
20002128:	b29b      	uxth	r3, r3
2000212a:	4313      	orrs	r3, r2
2000212c:	b29a      	uxth	r2, r3
2000212e:	687b      	ldr	r3, [r7, #4]
20002130:	821a      	strh	r2, [r3, #16]
}
20002132:	46c0      	nop			; (mov r8, r8)
20002134:	46bd      	mov	sp, r7
20002136:	b002      	add	sp, #8
20002138:	bd80      	pop	{r7, pc}

2000213a <USART_ReceiverWakeUpCmd>:
  * @param  NewState: new state of the USART mute mode.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ReceiverWakeUpCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
2000213a:	b580      	push	{r7, lr}
2000213c:	b082      	sub	sp, #8
2000213e:	af00      	add	r7, sp, #0
20002140:	6078      	str	r0, [r7, #4]
20002142:	000a      	movs	r2, r1
20002144:	1cfb      	adds	r3, r7, #3
20002146:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 
  
  if (NewState != DISABLE)
20002148:	1cfb      	adds	r3, r7, #3
2000214a:	781b      	ldrb	r3, [r3, #0]
2000214c:	2b00      	cmp	r3, #0
2000214e:	d008      	beq.n	20002162 <USART_ReceiverWakeUpCmd+0x28>
  {
    /* Enable the USART mute mode  by setting the RWU bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_RWU;
20002150:	687b      	ldr	r3, [r7, #4]
20002152:	899b      	ldrh	r3, [r3, #12]
20002154:	b29b      	uxth	r3, r3
20002156:	2202      	movs	r2, #2
20002158:	4313      	orrs	r3, r2
2000215a:	b29a      	uxth	r2, r3
2000215c:	687b      	ldr	r3, [r7, #4]
2000215e:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the USART mute mode by clearing the RWU bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_RWU);
  }
}
20002160:	e007      	b.n	20002172 <USART_ReceiverWakeUpCmd+0x38>
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_RWU);
20002162:	687b      	ldr	r3, [r7, #4]
20002164:	899b      	ldrh	r3, [r3, #12]
20002166:	b29b      	uxth	r3, r3
20002168:	2202      	movs	r2, #2
2000216a:	4393      	bics	r3, r2
2000216c:	b29a      	uxth	r2, r3
2000216e:	687b      	ldr	r3, [r7, #4]
20002170:	819a      	strh	r2, [r3, #12]
}
20002172:	46c0      	nop			; (mov r8, r8)
20002174:	46bd      	mov	sp, r7
20002176:	b002      	add	sp, #8
20002178:	bd80      	pop	{r7, pc}

2000217a <USART_WakeUpConfig>:
  *            @arg USART_WakeUp_IdleLine: WakeUp by an idle line detection
  *            @arg USART_WakeUp_AddressMark: WakeUp by an address mark
  * @retval None
  */
void USART_WakeUpConfig(USART_TypeDef* USARTx, uint16_t USART_WakeUp)
{
2000217a:	b580      	push	{r7, lr}
2000217c:	b082      	sub	sp, #8
2000217e:	af00      	add	r7, sp, #0
20002180:	6078      	str	r0, [r7, #4]
20002182:	000a      	movs	r2, r1
20002184:	1cbb      	adds	r3, r7, #2
20002186:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_WAKEUP(USART_WakeUp));
  
  USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_WAKE);
20002188:	687b      	ldr	r3, [r7, #4]
2000218a:	899b      	ldrh	r3, [r3, #12]
2000218c:	b29b      	uxth	r3, r3
2000218e:	4a09      	ldr	r2, [pc, #36]	; (200021b4 <USART_WakeUpConfig+0x3a>)
20002190:	4013      	ands	r3, r2
20002192:	b29a      	uxth	r2, r3
20002194:	687b      	ldr	r3, [r7, #4]
20002196:	819a      	strh	r2, [r3, #12]
  USARTx->CR1 |= USART_WakeUp;
20002198:	687b      	ldr	r3, [r7, #4]
2000219a:	899b      	ldrh	r3, [r3, #12]
2000219c:	b29a      	uxth	r2, r3
2000219e:	1cbb      	adds	r3, r7, #2
200021a0:	881b      	ldrh	r3, [r3, #0]
200021a2:	4313      	orrs	r3, r2
200021a4:	b29a      	uxth	r2, r3
200021a6:	687b      	ldr	r3, [r7, #4]
200021a8:	819a      	strh	r2, [r3, #12]
}
200021aa:	46c0      	nop			; (mov r8, r8)
200021ac:	46bd      	mov	sp, r7
200021ae:	b002      	add	sp, #8
200021b0:	bd80      	pop	{r7, pc}
200021b2:	46c0      	nop			; (mov r8, r8)
200021b4:	fffff7ff 			; <UNDEFINED> instruction: 0xfffff7ff

200021b8 <USART_LINBreakDetectLengthConfig>:
  *            @arg USART_LINBreakDetectLength_10b: 10-bit break detection
  *            @arg USART_LINBreakDetectLength_11b: 11-bit break detection
  * @retval None
  */
void USART_LINBreakDetectLengthConfig(USART_TypeDef* USARTx, uint16_t USART_LINBreakDetectLength)
{
200021b8:	b580      	push	{r7, lr}
200021ba:	b082      	sub	sp, #8
200021bc:	af00      	add	r7, sp, #0
200021be:	6078      	str	r0, [r7, #4]
200021c0:	000a      	movs	r2, r1
200021c2:	1cbb      	adds	r3, r7, #2
200021c4:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_LIN_BREAK_DETECT_LENGTH(USART_LINBreakDetectLength));
  
  USARTx->CR2 &= (uint16_t)~((uint16_t)USART_CR2_LBDL);
200021c6:	687b      	ldr	r3, [r7, #4]
200021c8:	8a1b      	ldrh	r3, [r3, #16]
200021ca:	b29b      	uxth	r3, r3
200021cc:	2220      	movs	r2, #32
200021ce:	4393      	bics	r3, r2
200021d0:	b29a      	uxth	r2, r3
200021d2:	687b      	ldr	r3, [r7, #4]
200021d4:	821a      	strh	r2, [r3, #16]
  USARTx->CR2 |= USART_LINBreakDetectLength;  
200021d6:	687b      	ldr	r3, [r7, #4]
200021d8:	8a1b      	ldrh	r3, [r3, #16]
200021da:	b29a      	uxth	r2, r3
200021dc:	1cbb      	adds	r3, r7, #2
200021de:	881b      	ldrh	r3, [r3, #0]
200021e0:	4313      	orrs	r3, r2
200021e2:	b29a      	uxth	r2, r3
200021e4:	687b      	ldr	r3, [r7, #4]
200021e6:	821a      	strh	r2, [r3, #16]
}
200021e8:	46c0      	nop			; (mov r8, r8)
200021ea:	46bd      	mov	sp, r7
200021ec:	b002      	add	sp, #8
200021ee:	bd80      	pop	{r7, pc}

200021f0 <USART_LINCmd>:
  * @param  NewState: new state of the USART LIN mode.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_LINCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
200021f0:	b580      	push	{r7, lr}
200021f2:	b082      	sub	sp, #8
200021f4:	af00      	add	r7, sp, #0
200021f6:	6078      	str	r0, [r7, #4]
200021f8:	000a      	movs	r2, r1
200021fa:	1cfb      	adds	r3, r7, #3
200021fc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
200021fe:	1cfb      	adds	r3, r7, #3
20002200:	781b      	ldrb	r3, [r3, #0]
20002202:	2b00      	cmp	r3, #0
20002204:	d009      	beq.n	2000221a <USART_LINCmd+0x2a>
  {
    /* Enable the LIN mode by setting the LINEN bit in the CR2 register */
    USARTx->CR2 |= USART_CR2_LINEN;
20002206:	687b      	ldr	r3, [r7, #4]
20002208:	8a1b      	ldrh	r3, [r3, #16]
2000220a:	b29b      	uxth	r3, r3
2000220c:	2280      	movs	r2, #128	; 0x80
2000220e:	01d2      	lsls	r2, r2, #7
20002210:	4313      	orrs	r3, r2
20002212:	b29a      	uxth	r2, r3
20002214:	687b      	ldr	r3, [r7, #4]
20002216:	821a      	strh	r2, [r3, #16]
  else
  {
    /* Disable the LIN mode by clearing the LINEN bit in the CR2 register */
    USARTx->CR2 &= (uint16_t)~((uint16_t)USART_CR2_LINEN);
  }
}
20002218:	e007      	b.n	2000222a <USART_LINCmd+0x3a>
    USARTx->CR2 &= (uint16_t)~((uint16_t)USART_CR2_LINEN);
2000221a:	687b      	ldr	r3, [r7, #4]
2000221c:	8a1b      	ldrh	r3, [r3, #16]
2000221e:	b29b      	uxth	r3, r3
20002220:	4a04      	ldr	r2, [pc, #16]	; (20002234 <USART_LINCmd+0x44>)
20002222:	4013      	ands	r3, r2
20002224:	b29a      	uxth	r2, r3
20002226:	687b      	ldr	r3, [r7, #4]
20002228:	821a      	strh	r2, [r3, #16]
}
2000222a:	46c0      	nop			; (mov r8, r8)
2000222c:	46bd      	mov	sp, r7
2000222e:	b002      	add	sp, #8
20002230:	bd80      	pop	{r7, pc}
20002232:	46c0      	nop			; (mov r8, r8)
20002234:	ffffbfff 			; <UNDEFINED> instruction: 0xffffbfff

20002238 <USART_SendBreak>:
  * @param  USARTx: where x can be 1, 2, 3, 4, 5, 6, 7 or 8 to select the USART or 
  *         UART peripheral.
  * @retval None
  */
void USART_SendBreak(USART_TypeDef* USARTx)
{
20002238:	b580      	push	{r7, lr}
2000223a:	b082      	sub	sp, #8
2000223c:	af00      	add	r7, sp, #0
2000223e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Send break characters */
  USARTx->CR1 |= USART_CR1_SBK;
20002240:	687b      	ldr	r3, [r7, #4]
20002242:	899b      	ldrh	r3, [r3, #12]
20002244:	b29b      	uxth	r3, r3
20002246:	2201      	movs	r2, #1
20002248:	4313      	orrs	r3, r2
2000224a:	b29a      	uxth	r2, r3
2000224c:	687b      	ldr	r3, [r7, #4]
2000224e:	819a      	strh	r2, [r3, #12]
}
20002250:	46c0      	nop			; (mov r8, r8)
20002252:	46bd      	mov	sp, r7
20002254:	b002      	add	sp, #8
20002256:	bd80      	pop	{r7, pc}

20002258 <USART_HalfDuplexCmd>:
  * @param  NewState: new state of the USART Communication.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_HalfDuplexCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
20002258:	b580      	push	{r7, lr}
2000225a:	b082      	sub	sp, #8
2000225c:	af00      	add	r7, sp, #0
2000225e:	6078      	str	r0, [r7, #4]
20002260:	000a      	movs	r2, r1
20002262:	1cfb      	adds	r3, r7, #3
20002264:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
20002266:	1cfb      	adds	r3, r7, #3
20002268:	781b      	ldrb	r3, [r3, #0]
2000226a:	2b00      	cmp	r3, #0
2000226c:	d008      	beq.n	20002280 <USART_HalfDuplexCmd+0x28>
  {
    /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_HDSEL;
2000226e:	687b      	ldr	r3, [r7, #4]
20002270:	8a9b      	ldrh	r3, [r3, #20]
20002272:	b29b      	uxth	r3, r3
20002274:	2208      	movs	r2, #8
20002276:	4313      	orrs	r3, r2
20002278:	b29a      	uxth	r2, r3
2000227a:	687b      	ldr	r3, [r7, #4]
2000227c:	829a      	strh	r2, [r3, #20]
  else
  {
    /* Disable the Half-Duplex mode by clearing the HDSEL bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_HDSEL);
  }
}
2000227e:	e007      	b.n	20002290 <USART_HalfDuplexCmd+0x38>
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_HDSEL);
20002280:	687b      	ldr	r3, [r7, #4]
20002282:	8a9b      	ldrh	r3, [r3, #20]
20002284:	b29b      	uxth	r3, r3
20002286:	2208      	movs	r2, #8
20002288:	4393      	bics	r3, r2
2000228a:	b29a      	uxth	r2, r3
2000228c:	687b      	ldr	r3, [r7, #4]
2000228e:	829a      	strh	r2, [r3, #20]
}
20002290:	46c0      	nop			; (mov r8, r8)
20002292:	46bd      	mov	sp, r7
20002294:	b002      	add	sp, #8
20002296:	bd80      	pop	{r7, pc}

20002298 <USART_SetGuardTime>:
  *         UART peripheral.
  * @param  USART_GuardTime: specifies the guard time.   
  * @retval None
  */
void USART_SetGuardTime(USART_TypeDef* USARTx, uint8_t USART_GuardTime)
{    
20002298:	b580      	push	{r7, lr}
2000229a:	b082      	sub	sp, #8
2000229c:	af00      	add	r7, sp, #0
2000229e:	6078      	str	r0, [r7, #4]
200022a0:	000a      	movs	r2, r1
200022a2:	1cfb      	adds	r3, r7, #3
200022a4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_USART_1236_PERIPH(USARTx));
  
  /* Clear the USART Guard time */
  USARTx->GTPR &= USART_GTPR_PSC;
200022a6:	687b      	ldr	r3, [r7, #4]
200022a8:	8b1b      	ldrh	r3, [r3, #24]
200022aa:	b29b      	uxth	r3, r3
200022ac:	22ff      	movs	r2, #255	; 0xff
200022ae:	4013      	ands	r3, r2
200022b0:	b29a      	uxth	r2, r3
200022b2:	687b      	ldr	r3, [r7, #4]
200022b4:	831a      	strh	r2, [r3, #24]
  /* Set the USART guard time */
  USARTx->GTPR |= (uint16_t)((uint16_t)USART_GuardTime << 0x08);
200022b6:	687b      	ldr	r3, [r7, #4]
200022b8:	8b1b      	ldrh	r3, [r3, #24]
200022ba:	b29a      	uxth	r2, r3
200022bc:	1cfb      	adds	r3, r7, #3
200022be:	781b      	ldrb	r3, [r3, #0]
200022c0:	b29b      	uxth	r3, r3
200022c2:	021b      	lsls	r3, r3, #8
200022c4:	b29b      	uxth	r3, r3
200022c6:	4313      	orrs	r3, r2
200022c8:	b29a      	uxth	r2, r3
200022ca:	687b      	ldr	r3, [r7, #4]
200022cc:	831a      	strh	r2, [r3, #24]
}
200022ce:	46c0      	nop			; (mov r8, r8)
200022d0:	46bd      	mov	sp, r7
200022d2:	b002      	add	sp, #8
200022d4:	bd80      	pop	{r7, pc}

200022d6 <USART_SmartCardCmd>:
  * @param  NewState: new state of the Smart Card mode.
  *          This parameter can be: ENABLE or DISABLE.      
  * @retval None
  */
void USART_SmartCardCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
200022d6:	b580      	push	{r7, lr}
200022d8:	b082      	sub	sp, #8
200022da:	af00      	add	r7, sp, #0
200022dc:	6078      	str	r0, [r7, #4]
200022de:	000a      	movs	r2, r1
200022e0:	1cfb      	adds	r3, r7, #3
200022e2:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_USART_1236_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
200022e4:	1cfb      	adds	r3, r7, #3
200022e6:	781b      	ldrb	r3, [r3, #0]
200022e8:	2b00      	cmp	r3, #0
200022ea:	d008      	beq.n	200022fe <USART_SmartCardCmd+0x28>
  {
    /* Enable the SC mode by setting the SCEN bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_SCEN;
200022ec:	687b      	ldr	r3, [r7, #4]
200022ee:	8a9b      	ldrh	r3, [r3, #20]
200022f0:	b29b      	uxth	r3, r3
200022f2:	2220      	movs	r2, #32
200022f4:	4313      	orrs	r3, r2
200022f6:	b29a      	uxth	r2, r3
200022f8:	687b      	ldr	r3, [r7, #4]
200022fa:	829a      	strh	r2, [r3, #20]
  else
  {
    /* Disable the SC mode by clearing the SCEN bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_SCEN);
  }
}
200022fc:	e007      	b.n	2000230e <USART_SmartCardCmd+0x38>
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_SCEN);
200022fe:	687b      	ldr	r3, [r7, #4]
20002300:	8a9b      	ldrh	r3, [r3, #20]
20002302:	b29b      	uxth	r3, r3
20002304:	2220      	movs	r2, #32
20002306:	4393      	bics	r3, r2
20002308:	b29a      	uxth	r2, r3
2000230a:	687b      	ldr	r3, [r7, #4]
2000230c:	829a      	strh	r2, [r3, #20]
}
2000230e:	46c0      	nop			; (mov r8, r8)
20002310:	46bd      	mov	sp, r7
20002312:	b002      	add	sp, #8
20002314:	bd80      	pop	{r7, pc}

20002316 <USART_SmartCardNACKCmd>:
  * @param  NewState: new state of the NACK transmission.
  *          This parameter can be: ENABLE or DISABLE.  
  * @retval None
  */
void USART_SmartCardNACKCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
20002316:	b580      	push	{r7, lr}
20002318:	b082      	sub	sp, #8
2000231a:	af00      	add	r7, sp, #0
2000231c:	6078      	str	r0, [r7, #4]
2000231e:	000a      	movs	r2, r1
20002320:	1cfb      	adds	r3, r7, #3
20002322:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_USART_1236_PERIPH(USARTx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
20002324:	1cfb      	adds	r3, r7, #3
20002326:	781b      	ldrb	r3, [r3, #0]
20002328:	2b00      	cmp	r3, #0
2000232a:	d008      	beq.n	2000233e <USART_SmartCardNACKCmd+0x28>
  {
    /* Enable the NACK transmission by setting the NACK bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_NACK;
2000232c:	687b      	ldr	r3, [r7, #4]
2000232e:	8a9b      	ldrh	r3, [r3, #20]
20002330:	b29b      	uxth	r3, r3
20002332:	2210      	movs	r2, #16
20002334:	4313      	orrs	r3, r2
20002336:	b29a      	uxth	r2, r3
20002338:	687b      	ldr	r3, [r7, #4]
2000233a:	829a      	strh	r2, [r3, #20]
  else
  {
    /* Disable the NACK transmission by clearing the NACK bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_NACK);
  }
}
2000233c:	e007      	b.n	2000234e <USART_SmartCardNACKCmd+0x38>
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_NACK);
2000233e:	687b      	ldr	r3, [r7, #4]
20002340:	8a9b      	ldrh	r3, [r3, #20]
20002342:	b29b      	uxth	r3, r3
20002344:	2210      	movs	r2, #16
20002346:	4393      	bics	r3, r2
20002348:	b29a      	uxth	r2, r3
2000234a:	687b      	ldr	r3, [r7, #4]
2000234c:	829a      	strh	r2, [r3, #20]
}
2000234e:	46c0      	nop			; (mov r8, r8)
20002350:	46bd      	mov	sp, r7
20002352:	b002      	add	sp, #8
20002354:	bd80      	pop	{r7, pc}

20002356 <USART_IrDAConfig>:
  *            @arg USART_IrDAMode_LowPower
  *            @arg USART_IrDAMode_Normal
  * @retval None
  */
void USART_IrDAConfig(USART_TypeDef* USARTx, uint16_t USART_IrDAMode)
{
20002356:	b580      	push	{r7, lr}
20002358:	b082      	sub	sp, #8
2000235a:	af00      	add	r7, sp, #0
2000235c:	6078      	str	r0, [r7, #4]
2000235e:	000a      	movs	r2, r1
20002360:	1cbb      	adds	r3, r7, #2
20002362:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_IRDA_MODE(USART_IrDAMode));
    
  USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_IRLP);
20002364:	687b      	ldr	r3, [r7, #4]
20002366:	8a9b      	ldrh	r3, [r3, #20]
20002368:	b29b      	uxth	r3, r3
2000236a:	2204      	movs	r2, #4
2000236c:	4393      	bics	r3, r2
2000236e:	b29a      	uxth	r2, r3
20002370:	687b      	ldr	r3, [r7, #4]
20002372:	829a      	strh	r2, [r3, #20]
  USARTx->CR3 |= USART_IrDAMode;
20002374:	687b      	ldr	r3, [r7, #4]
20002376:	8a9b      	ldrh	r3, [r3, #20]
20002378:	b29a      	uxth	r2, r3
2000237a:	1cbb      	adds	r3, r7, #2
2000237c:	881b      	ldrh	r3, [r3, #0]
2000237e:	4313      	orrs	r3, r2
20002380:	b29a      	uxth	r2, r3
20002382:	687b      	ldr	r3, [r7, #4]
20002384:	829a      	strh	r2, [r3, #20]
}
20002386:	46c0      	nop			; (mov r8, r8)
20002388:	46bd      	mov	sp, r7
2000238a:	b002      	add	sp, #8
2000238c:	bd80      	pop	{r7, pc}

2000238e <USART_IrDACmd>:
  * @param  NewState: new state of the IrDA mode.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_IrDACmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
2000238e:	b580      	push	{r7, lr}
20002390:	b082      	sub	sp, #8
20002392:	af00      	add	r7, sp, #0
20002394:	6078      	str	r0, [r7, #4]
20002396:	000a      	movs	r2, r1
20002398:	1cfb      	adds	r3, r7, #3
2000239a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
    
  if (NewState != DISABLE)
2000239c:	1cfb      	adds	r3, r7, #3
2000239e:	781b      	ldrb	r3, [r3, #0]
200023a0:	2b00      	cmp	r3, #0
200023a2:	d008      	beq.n	200023b6 <USART_IrDACmd+0x28>
  {
    /* Enable the IrDA mode by setting the IREN bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_IREN;
200023a4:	687b      	ldr	r3, [r7, #4]
200023a6:	8a9b      	ldrh	r3, [r3, #20]
200023a8:	b29b      	uxth	r3, r3
200023aa:	2202      	movs	r2, #2
200023ac:	4313      	orrs	r3, r2
200023ae:	b29a      	uxth	r2, r3
200023b0:	687b      	ldr	r3, [r7, #4]
200023b2:	829a      	strh	r2, [r3, #20]
  else
  {
    /* Disable the IrDA mode by clearing the IREN bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_IREN);
  }
}
200023b4:	e007      	b.n	200023c6 <USART_IrDACmd+0x38>
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_IREN);
200023b6:	687b      	ldr	r3, [r7, #4]
200023b8:	8a9b      	ldrh	r3, [r3, #20]
200023ba:	b29b      	uxth	r3, r3
200023bc:	2202      	movs	r2, #2
200023be:	4393      	bics	r3, r2
200023c0:	b29a      	uxth	r2, r3
200023c2:	687b      	ldr	r3, [r7, #4]
200023c4:	829a      	strh	r2, [r3, #20]
}
200023c6:	46c0      	nop			; (mov r8, r8)
200023c8:	46bd      	mov	sp, r7
200023ca:	b002      	add	sp, #8
200023cc:	bd80      	pop	{r7, pc}

200023ce <USART_DMACmd>:
  * @param  NewState: new state of the DMA Request sources.
  *          This parameter can be: ENABLE or DISABLE.   
  * @retval None
  */
void USART_DMACmd(USART_TypeDef* USARTx, uint16_t USART_DMAReq, FunctionalState NewState)
{
200023ce:	b580      	push	{r7, lr}
200023d0:	b082      	sub	sp, #8
200023d2:	af00      	add	r7, sp, #0
200023d4:	6078      	str	r0, [r7, #4]
200023d6:	0008      	movs	r0, r1
200023d8:	0011      	movs	r1, r2
200023da:	1cbb      	adds	r3, r7, #2
200023dc:	1c02      	adds	r2, r0, #0
200023de:	801a      	strh	r2, [r3, #0]
200023e0:	1c7b      	adds	r3, r7, #1
200023e2:	1c0a      	adds	r2, r1, #0
200023e4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DMAREQ(USART_DMAReq));  
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 

  if (NewState != DISABLE)
200023e6:	1c7b      	adds	r3, r7, #1
200023e8:	781b      	ldrb	r3, [r3, #0]
200023ea:	2b00      	cmp	r3, #0
200023ec:	d009      	beq.n	20002402 <USART_DMACmd+0x34>
  {
    /* Enable the DMA transfer for selected requests by setting the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 |= USART_DMAReq;
200023ee:	687b      	ldr	r3, [r7, #4]
200023f0:	8a9b      	ldrh	r3, [r3, #20]
200023f2:	b29a      	uxth	r2, r3
200023f4:	1cbb      	adds	r3, r7, #2
200023f6:	881b      	ldrh	r3, [r3, #0]
200023f8:	4313      	orrs	r3, r2
200023fa:	b29a      	uxth	r2, r3
200023fc:	687b      	ldr	r3, [r7, #4]
200023fe:	829a      	strh	r2, [r3, #20]
  {
    /* Disable the DMA transfer for selected requests by clearing the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 &= (uint16_t)~USART_DMAReq;
  }
}
20002400:	e00a      	b.n	20002418 <USART_DMACmd+0x4a>
    USARTx->CR3 &= (uint16_t)~USART_DMAReq;
20002402:	687b      	ldr	r3, [r7, #4]
20002404:	8a9b      	ldrh	r3, [r3, #20]
20002406:	b29b      	uxth	r3, r3
20002408:	1cba      	adds	r2, r7, #2
2000240a:	8812      	ldrh	r2, [r2, #0]
2000240c:	43d2      	mvns	r2, r2
2000240e:	b292      	uxth	r2, r2
20002410:	4013      	ands	r3, r2
20002412:	b29a      	uxth	r2, r3
20002414:	687b      	ldr	r3, [r7, #4]
20002416:	829a      	strh	r2, [r3, #20]
}
20002418:	46c0      	nop			; (mov r8, r8)
2000241a:	46bd      	mov	sp, r7
2000241c:	b002      	add	sp, #8
2000241e:	bd80      	pop	{r7, pc}

20002420 <USART_ITConfig>:
  * @param  NewState: new state of the specified USARTx interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState)
{
20002420:	b580      	push	{r7, lr}
20002422:	b086      	sub	sp, #24
20002424:	af00      	add	r7, sp, #0
20002426:	6078      	str	r0, [r7, #4]
20002428:	0008      	movs	r0, r1
2000242a:	0011      	movs	r1, r2
2000242c:	1cbb      	adds	r3, r7, #2
2000242e:	1c02      	adds	r2, r0, #0
20002430:	801a      	strh	r2, [r3, #0]
20002432:	1c7b      	adds	r3, r7, #1
20002434:	1c0a      	adds	r2, r1, #0
20002436:	701a      	strb	r2, [r3, #0]
  uint32_t usartreg = 0x00, itpos = 0x00, itmask = 0x00;
20002438:	2300      	movs	r3, #0
2000243a:	613b      	str	r3, [r7, #16]
2000243c:	2300      	movs	r3, #0
2000243e:	60fb      	str	r3, [r7, #12]
20002440:	2300      	movs	r3, #0
20002442:	60bb      	str	r3, [r7, #8]
  uint32_t usartxbase = 0x00;
20002444:	2300      	movs	r3, #0
20002446:	617b      	str	r3, [r7, #20]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  usartxbase = (uint32_t)USARTx;
20002448:	687b      	ldr	r3, [r7, #4]
2000244a:	617b      	str	r3, [r7, #20]

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
2000244c:	1cbb      	adds	r3, r7, #2
2000244e:	881b      	ldrh	r3, [r3, #0]
20002450:	b2db      	uxtb	r3, r3
20002452:	095b      	lsrs	r3, r3, #5
20002454:	b2db      	uxtb	r3, r3
20002456:	613b      	str	r3, [r7, #16]

  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
20002458:	1cbb      	adds	r3, r7, #2
2000245a:	881b      	ldrh	r3, [r3, #0]
2000245c:	221f      	movs	r2, #31
2000245e:	4013      	ands	r3, r2
20002460:	60fb      	str	r3, [r7, #12]
  itmask = (((uint32_t)0x01) << itpos);
20002462:	2201      	movs	r2, #1
20002464:	68fb      	ldr	r3, [r7, #12]
20002466:	409a      	lsls	r2, r3
20002468:	0013      	movs	r3, r2
2000246a:	60bb      	str	r3, [r7, #8]
    
  if (usartreg == 0x01) /* The IT is in CR1 register */
2000246c:	693b      	ldr	r3, [r7, #16]
2000246e:	2b01      	cmp	r3, #1
20002470:	d103      	bne.n	2000247a <USART_ITConfig+0x5a>
  {
    usartxbase += 0x0C;
20002472:	697b      	ldr	r3, [r7, #20]
20002474:	330c      	adds	r3, #12
20002476:	617b      	str	r3, [r7, #20]
20002478:	e009      	b.n	2000248e <USART_ITConfig+0x6e>
  }
  else if (usartreg == 0x02) /* The IT is in CR2 register */
2000247a:	693b      	ldr	r3, [r7, #16]
2000247c:	2b02      	cmp	r3, #2
2000247e:	d103      	bne.n	20002488 <USART_ITConfig+0x68>
  {
    usartxbase += 0x10;
20002480:	697b      	ldr	r3, [r7, #20]
20002482:	3310      	adds	r3, #16
20002484:	617b      	str	r3, [r7, #20]
20002486:	e002      	b.n	2000248e <USART_ITConfig+0x6e>
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14; 
20002488:	697b      	ldr	r3, [r7, #20]
2000248a:	3314      	adds	r3, #20
2000248c:	617b      	str	r3, [r7, #20]
  }
  if (NewState != DISABLE)
2000248e:	1c7b      	adds	r3, r7, #1
20002490:	781b      	ldrb	r3, [r3, #0]
20002492:	2b00      	cmp	r3, #0
20002494:	d006      	beq.n	200024a4 <USART_ITConfig+0x84>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
20002496:	697b      	ldr	r3, [r7, #20]
20002498:	6819      	ldr	r1, [r3, #0]
2000249a:	697b      	ldr	r3, [r7, #20]
2000249c:	68ba      	ldr	r2, [r7, #8]
2000249e:	430a      	orrs	r2, r1
200024a0:	601a      	str	r2, [r3, #0]
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
  }
}
200024a2:	e006      	b.n	200024b2 <USART_ITConfig+0x92>
    *(__IO uint32_t*)usartxbase &= ~itmask;
200024a4:	697b      	ldr	r3, [r7, #20]
200024a6:	681a      	ldr	r2, [r3, #0]
200024a8:	68bb      	ldr	r3, [r7, #8]
200024aa:	43d9      	mvns	r1, r3
200024ac:	697b      	ldr	r3, [r7, #20]
200024ae:	400a      	ands	r2, r1
200024b0:	601a      	str	r2, [r3, #0]
}
200024b2:	46c0      	nop			; (mov r8, r8)
200024b4:	46bd      	mov	sp, r7
200024b6:	b006      	add	sp, #24
200024b8:	bd80      	pop	{r7, pc}

200024ba <USART_GetFlagStatus>:
  *            @arg USART_FLAG_FE:   Framing Error flag
  *            @arg USART_FLAG_PE:   Parity Error flag
  * @retval The new state of USART_FLAG (SET or RESET).
  */
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
200024ba:	b580      	push	{r7, lr}
200024bc:	b084      	sub	sp, #16
200024be:	af00      	add	r7, sp, #0
200024c0:	6078      	str	r0, [r7, #4]
200024c2:	000a      	movs	r2, r1
200024c4:	1cbb      	adds	r3, r7, #2
200024c6:	801a      	strh	r2, [r3, #0]
  FlagStatus bitstatus = RESET;
200024c8:	230f      	movs	r3, #15
200024ca:	18fb      	adds	r3, r7, r3
200024cc:	2200      	movs	r2, #0
200024ce:	701a      	strb	r2, [r3, #0]
  if (USART_FLAG == USART_FLAG_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  if ((USARTx->SR & USART_FLAG) != (uint16_t)RESET)
200024d0:	687b      	ldr	r3, [r7, #4]
200024d2:	881b      	ldrh	r3, [r3, #0]
200024d4:	b29b      	uxth	r3, r3
200024d6:	1cba      	adds	r2, r7, #2
200024d8:	8812      	ldrh	r2, [r2, #0]
200024da:	4013      	ands	r3, r2
200024dc:	b29b      	uxth	r3, r3
200024de:	2b00      	cmp	r3, #0
200024e0:	d004      	beq.n	200024ec <USART_GetFlagStatus+0x32>
  {
    bitstatus = SET;
200024e2:	230f      	movs	r3, #15
200024e4:	18fb      	adds	r3, r7, r3
200024e6:	2201      	movs	r2, #1
200024e8:	701a      	strb	r2, [r3, #0]
200024ea:	e003      	b.n	200024f4 <USART_GetFlagStatus+0x3a>
  }
  else
  {
    bitstatus = RESET;
200024ec:	230f      	movs	r3, #15
200024ee:	18fb      	adds	r3, r7, r3
200024f0:	2200      	movs	r2, #0
200024f2:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
200024f4:	230f      	movs	r3, #15
200024f6:	18fb      	adds	r3, r7, r3
200024f8:	781b      	ldrb	r3, [r3, #0]
}
200024fa:	0018      	movs	r0, r3
200024fc:	46bd      	mov	sp, r7
200024fe:	b004      	add	sp, #16
20002500:	bd80      	pop	{r7, pc}

20002502 <USART_ClearFlag>:
  *          (USART_SendData()).
  *   
  * @retval None
  */
void USART_ClearFlag(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
20002502:	b580      	push	{r7, lr}
20002504:	b082      	sub	sp, #8
20002506:	af00      	add	r7, sp, #0
20002508:	6078      	str	r0, [r7, #4]
2000250a:	000a      	movs	r2, r1
2000250c:	1cbb      	adds	r3, r7, #2
2000250e:	801a      	strh	r2, [r3, #0]
  if ((USART_FLAG & USART_FLAG_CTS) == USART_FLAG_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
       
  USARTx->SR = (uint16_t)~USART_FLAG;
20002510:	1cbb      	adds	r3, r7, #2
20002512:	881b      	ldrh	r3, [r3, #0]
20002514:	43db      	mvns	r3, r3
20002516:	b29a      	uxth	r2, r3
20002518:	687b      	ldr	r3, [r7, #4]
2000251a:	801a      	strh	r2, [r3, #0]
}
2000251c:	46c0      	nop			; (mov r8, r8)
2000251e:	46bd      	mov	sp, r7
20002520:	b002      	add	sp, #8
20002522:	bd80      	pop	{r7, pc}

20002524 <USART_GetITStatus>:
  *            @arg USART_IT_FE:   Framing Error interrupt
  *            @arg USART_IT_PE:   Parity Error interrupt
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT)
{
20002524:	b580      	push	{r7, lr}
20002526:	b086      	sub	sp, #24
20002528:	af00      	add	r7, sp, #0
2000252a:	6078      	str	r0, [r7, #4]
2000252c:	000a      	movs	r2, r1
2000252e:	1cbb      	adds	r3, r7, #2
20002530:	801a      	strh	r2, [r3, #0]
  uint32_t bitpos = 0x00, itmask = 0x00, usartreg = 0x00;
20002532:	2300      	movs	r3, #0
20002534:	60fb      	str	r3, [r7, #12]
20002536:	2300      	movs	r3, #0
20002538:	617b      	str	r3, [r7, #20]
2000253a:	2300      	movs	r3, #0
2000253c:	60bb      	str	r3, [r7, #8]
  ITStatus bitstatus = RESET;
2000253e:	2313      	movs	r3, #19
20002540:	18fb      	adds	r3, r7, r3
20002542:	2200      	movs	r2, #0
20002544:	701a      	strb	r2, [r3, #0]
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
20002546:	1cbb      	adds	r3, r7, #2
20002548:	881b      	ldrh	r3, [r3, #0]
2000254a:	b2db      	uxtb	r3, r3
2000254c:	095b      	lsrs	r3, r3, #5
2000254e:	b2db      	uxtb	r3, r3
20002550:	60bb      	str	r3, [r7, #8]
  /* Get the interrupt position */
  itmask = USART_IT & IT_MASK;
20002552:	1cbb      	adds	r3, r7, #2
20002554:	881b      	ldrh	r3, [r3, #0]
20002556:	221f      	movs	r2, #31
20002558:	4013      	ands	r3, r2
2000255a:	617b      	str	r3, [r7, #20]
  itmask = (uint32_t)0x01 << itmask;
2000255c:	2201      	movs	r2, #1
2000255e:	697b      	ldr	r3, [r7, #20]
20002560:	409a      	lsls	r2, r3
20002562:	0013      	movs	r3, r2
20002564:	617b      	str	r3, [r7, #20]
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
20002566:	68bb      	ldr	r3, [r7, #8]
20002568:	2b01      	cmp	r3, #1
2000256a:	d107      	bne.n	2000257c <USART_GetITStatus+0x58>
  {
    itmask &= USARTx->CR1;
2000256c:	687b      	ldr	r3, [r7, #4]
2000256e:	899b      	ldrh	r3, [r3, #12]
20002570:	b29b      	uxth	r3, r3
20002572:	001a      	movs	r2, r3
20002574:	697b      	ldr	r3, [r7, #20]
20002576:	4013      	ands	r3, r2
20002578:	617b      	str	r3, [r7, #20]
2000257a:	e011      	b.n	200025a0 <USART_GetITStatus+0x7c>
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
2000257c:	68bb      	ldr	r3, [r7, #8]
2000257e:	2b02      	cmp	r3, #2
20002580:	d107      	bne.n	20002592 <USART_GetITStatus+0x6e>
  {
    itmask &= USARTx->CR2;
20002582:	687b      	ldr	r3, [r7, #4]
20002584:	8a1b      	ldrh	r3, [r3, #16]
20002586:	b29b      	uxth	r3, r3
20002588:	001a      	movs	r2, r3
2000258a:	697b      	ldr	r3, [r7, #20]
2000258c:	4013      	ands	r3, r2
2000258e:	617b      	str	r3, [r7, #20]
20002590:	e006      	b.n	200025a0 <USART_GetITStatus+0x7c>
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
20002592:	687b      	ldr	r3, [r7, #4]
20002594:	8a9b      	ldrh	r3, [r3, #20]
20002596:	b29b      	uxth	r3, r3
20002598:	001a      	movs	r2, r3
2000259a:	697b      	ldr	r3, [r7, #20]
2000259c:	4013      	ands	r3, r2
2000259e:	617b      	str	r3, [r7, #20]
  }
  
  bitpos = USART_IT >> 0x08;
200025a0:	1cbb      	adds	r3, r7, #2
200025a2:	881b      	ldrh	r3, [r3, #0]
200025a4:	0a1b      	lsrs	r3, r3, #8
200025a6:	b29b      	uxth	r3, r3
200025a8:	60fb      	str	r3, [r7, #12]
  bitpos = (uint32_t)0x01 << bitpos;
200025aa:	2201      	movs	r2, #1
200025ac:	68fb      	ldr	r3, [r7, #12]
200025ae:	409a      	lsls	r2, r3
200025b0:	0013      	movs	r3, r2
200025b2:	60fb      	str	r3, [r7, #12]
  bitpos &= USARTx->SR;
200025b4:	687b      	ldr	r3, [r7, #4]
200025b6:	881b      	ldrh	r3, [r3, #0]
200025b8:	b29b      	uxth	r3, r3
200025ba:	001a      	movs	r2, r3
200025bc:	68fb      	ldr	r3, [r7, #12]
200025be:	4013      	ands	r3, r2
200025c0:	60fb      	str	r3, [r7, #12]
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
200025c2:	697b      	ldr	r3, [r7, #20]
200025c4:	2b00      	cmp	r3, #0
200025c6:	d007      	beq.n	200025d8 <USART_GetITStatus+0xb4>
200025c8:	68fb      	ldr	r3, [r7, #12]
200025ca:	2b00      	cmp	r3, #0
200025cc:	d004      	beq.n	200025d8 <USART_GetITStatus+0xb4>
  {
    bitstatus = SET;
200025ce:	2313      	movs	r3, #19
200025d0:	18fb      	adds	r3, r7, r3
200025d2:	2201      	movs	r2, #1
200025d4:	701a      	strb	r2, [r3, #0]
200025d6:	e003      	b.n	200025e0 <USART_GetITStatus+0xbc>
  }
  else
  {
    bitstatus = RESET;
200025d8:	2313      	movs	r3, #19
200025da:	18fb      	adds	r3, r7, r3
200025dc:	2200      	movs	r2, #0
200025de:	701a      	strb	r2, [r3, #0]
  }
  
  return bitstatus;  
200025e0:	2313      	movs	r3, #19
200025e2:	18fb      	adds	r3, r7, r3
200025e4:	781b      	ldrb	r3, [r3, #0]
}
200025e6:	0018      	movs	r0, r3
200025e8:	46bd      	mov	sp, r7
200025ea:	b006      	add	sp, #24
200025ec:	bd80      	pop	{r7, pc}

200025ee <USART_ClearITPendingBit>:
  *          (USART_SendData()).
  *  
  * @retval None
  */
void USART_ClearITPendingBit(USART_TypeDef* USARTx, uint16_t USART_IT)
{
200025ee:	b580      	push	{r7, lr}
200025f0:	b084      	sub	sp, #16
200025f2:	af00      	add	r7, sp, #0
200025f4:	6078      	str	r0, [r7, #4]
200025f6:	000a      	movs	r2, r1
200025f8:	1cbb      	adds	r3, r7, #2
200025fa:	801a      	strh	r2, [r3, #0]
  uint16_t bitpos = 0x00, itmask = 0x00;
200025fc:	210e      	movs	r1, #14
200025fe:	187b      	adds	r3, r7, r1
20002600:	2200      	movs	r2, #0
20002602:	801a      	strh	r2, [r3, #0]
20002604:	200c      	movs	r0, #12
20002606:	183b      	adds	r3, r7, r0
20002608:	2200      	movs	r2, #0
2000260a:	801a      	strh	r2, [r3, #0]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  bitpos = USART_IT >> 0x08;
2000260c:	187b      	adds	r3, r7, r1
2000260e:	1cba      	adds	r2, r7, #2
20002610:	8812      	ldrh	r2, [r2, #0]
20002612:	0a12      	lsrs	r2, r2, #8
20002614:	801a      	strh	r2, [r3, #0]
  itmask = ((uint16_t)0x01 << (uint16_t)bitpos);
20002616:	187b      	adds	r3, r7, r1
20002618:	881b      	ldrh	r3, [r3, #0]
2000261a:	2201      	movs	r2, #1
2000261c:	409a      	lsls	r2, r3
2000261e:	183b      	adds	r3, r7, r0
20002620:	801a      	strh	r2, [r3, #0]
  USARTx->SR = (uint16_t)~itmask;
20002622:	183b      	adds	r3, r7, r0
20002624:	881b      	ldrh	r3, [r3, #0]
20002626:	43db      	mvns	r3, r3
20002628:	b29a      	uxth	r2, r3
2000262a:	687b      	ldr	r3, [r7, #4]
2000262c:	801a      	strh	r2, [r3, #0]
}
2000262e:	46c0      	nop			; (mov r8, r8)
20002630:	46bd      	mov	sp, r7
20002632:	b004      	add	sp, #16
20002634:	bd80      	pop	{r7, pc}
20002636:	46c0      	nop			; (mov r8, r8)

20002638 <__udivsi3>:
20002638:	2200      	movs	r2, #0
2000263a:	0843      	lsrs	r3, r0, #1
2000263c:	428b      	cmp	r3, r1
2000263e:	d374      	bcc.n	2000272a <__udivsi3+0xf2>
20002640:	0903      	lsrs	r3, r0, #4
20002642:	428b      	cmp	r3, r1
20002644:	d35f      	bcc.n	20002706 <__udivsi3+0xce>
20002646:	0a03      	lsrs	r3, r0, #8
20002648:	428b      	cmp	r3, r1
2000264a:	d344      	bcc.n	200026d6 <__udivsi3+0x9e>
2000264c:	0b03      	lsrs	r3, r0, #12
2000264e:	428b      	cmp	r3, r1
20002650:	d328      	bcc.n	200026a4 <__udivsi3+0x6c>
20002652:	0c03      	lsrs	r3, r0, #16
20002654:	428b      	cmp	r3, r1
20002656:	d30d      	bcc.n	20002674 <__udivsi3+0x3c>
20002658:	22ff      	movs	r2, #255	; 0xff
2000265a:	0209      	lsls	r1, r1, #8
2000265c:	ba12      	rev	r2, r2
2000265e:	0c03      	lsrs	r3, r0, #16
20002660:	428b      	cmp	r3, r1
20002662:	d302      	bcc.n	2000266a <__udivsi3+0x32>
20002664:	1212      	asrs	r2, r2, #8
20002666:	0209      	lsls	r1, r1, #8
20002668:	d065      	beq.n	20002736 <__udivsi3+0xfe>
2000266a:	0b03      	lsrs	r3, r0, #12
2000266c:	428b      	cmp	r3, r1
2000266e:	d319      	bcc.n	200026a4 <__udivsi3+0x6c>
20002670:	e000      	b.n	20002674 <__udivsi3+0x3c>
20002672:	0a09      	lsrs	r1, r1, #8
20002674:	0bc3      	lsrs	r3, r0, #15
20002676:	428b      	cmp	r3, r1
20002678:	d301      	bcc.n	2000267e <__udivsi3+0x46>
2000267a:	03cb      	lsls	r3, r1, #15
2000267c:	1ac0      	subs	r0, r0, r3
2000267e:	4152      	adcs	r2, r2
20002680:	0b83      	lsrs	r3, r0, #14
20002682:	428b      	cmp	r3, r1
20002684:	d301      	bcc.n	2000268a <__udivsi3+0x52>
20002686:	038b      	lsls	r3, r1, #14
20002688:	1ac0      	subs	r0, r0, r3
2000268a:	4152      	adcs	r2, r2
2000268c:	0b43      	lsrs	r3, r0, #13
2000268e:	428b      	cmp	r3, r1
20002690:	d301      	bcc.n	20002696 <__udivsi3+0x5e>
20002692:	034b      	lsls	r3, r1, #13
20002694:	1ac0      	subs	r0, r0, r3
20002696:	4152      	adcs	r2, r2
20002698:	0b03      	lsrs	r3, r0, #12
2000269a:	428b      	cmp	r3, r1
2000269c:	d301      	bcc.n	200026a2 <__udivsi3+0x6a>
2000269e:	030b      	lsls	r3, r1, #12
200026a0:	1ac0      	subs	r0, r0, r3
200026a2:	4152      	adcs	r2, r2
200026a4:	0ac3      	lsrs	r3, r0, #11
200026a6:	428b      	cmp	r3, r1
200026a8:	d301      	bcc.n	200026ae <__udivsi3+0x76>
200026aa:	02cb      	lsls	r3, r1, #11
200026ac:	1ac0      	subs	r0, r0, r3
200026ae:	4152      	adcs	r2, r2
200026b0:	0a83      	lsrs	r3, r0, #10
200026b2:	428b      	cmp	r3, r1
200026b4:	d301      	bcc.n	200026ba <__udivsi3+0x82>
200026b6:	028b      	lsls	r3, r1, #10
200026b8:	1ac0      	subs	r0, r0, r3
200026ba:	4152      	adcs	r2, r2
200026bc:	0a43      	lsrs	r3, r0, #9
200026be:	428b      	cmp	r3, r1
200026c0:	d301      	bcc.n	200026c6 <__udivsi3+0x8e>
200026c2:	024b      	lsls	r3, r1, #9
200026c4:	1ac0      	subs	r0, r0, r3
200026c6:	4152      	adcs	r2, r2
200026c8:	0a03      	lsrs	r3, r0, #8
200026ca:	428b      	cmp	r3, r1
200026cc:	d301      	bcc.n	200026d2 <__udivsi3+0x9a>
200026ce:	020b      	lsls	r3, r1, #8
200026d0:	1ac0      	subs	r0, r0, r3
200026d2:	4152      	adcs	r2, r2
200026d4:	d2cd      	bcs.n	20002672 <__udivsi3+0x3a>
200026d6:	09c3      	lsrs	r3, r0, #7
200026d8:	428b      	cmp	r3, r1
200026da:	d301      	bcc.n	200026e0 <__udivsi3+0xa8>
200026dc:	01cb      	lsls	r3, r1, #7
200026de:	1ac0      	subs	r0, r0, r3
200026e0:	4152      	adcs	r2, r2
200026e2:	0983      	lsrs	r3, r0, #6
200026e4:	428b      	cmp	r3, r1
200026e6:	d301      	bcc.n	200026ec <__udivsi3+0xb4>
200026e8:	018b      	lsls	r3, r1, #6
200026ea:	1ac0      	subs	r0, r0, r3
200026ec:	4152      	adcs	r2, r2
200026ee:	0943      	lsrs	r3, r0, #5
200026f0:	428b      	cmp	r3, r1
200026f2:	d301      	bcc.n	200026f8 <__udivsi3+0xc0>
200026f4:	014b      	lsls	r3, r1, #5
200026f6:	1ac0      	subs	r0, r0, r3
200026f8:	4152      	adcs	r2, r2
200026fa:	0903      	lsrs	r3, r0, #4
200026fc:	428b      	cmp	r3, r1
200026fe:	d301      	bcc.n	20002704 <__udivsi3+0xcc>
20002700:	010b      	lsls	r3, r1, #4
20002702:	1ac0      	subs	r0, r0, r3
20002704:	4152      	adcs	r2, r2
20002706:	08c3      	lsrs	r3, r0, #3
20002708:	428b      	cmp	r3, r1
2000270a:	d301      	bcc.n	20002710 <__udivsi3+0xd8>
2000270c:	00cb      	lsls	r3, r1, #3
2000270e:	1ac0      	subs	r0, r0, r3
20002710:	4152      	adcs	r2, r2
20002712:	0883      	lsrs	r3, r0, #2
20002714:	428b      	cmp	r3, r1
20002716:	d301      	bcc.n	2000271c <__udivsi3+0xe4>
20002718:	008b      	lsls	r3, r1, #2
2000271a:	1ac0      	subs	r0, r0, r3
2000271c:	4152      	adcs	r2, r2
2000271e:	0843      	lsrs	r3, r0, #1
20002720:	428b      	cmp	r3, r1
20002722:	d301      	bcc.n	20002728 <__udivsi3+0xf0>
20002724:	004b      	lsls	r3, r1, #1
20002726:	1ac0      	subs	r0, r0, r3
20002728:	4152      	adcs	r2, r2
2000272a:	1a41      	subs	r1, r0, r1
2000272c:	d200      	bcs.n	20002730 <__udivsi3+0xf8>
2000272e:	4601      	mov	r1, r0
20002730:	4152      	adcs	r2, r2
20002732:	4610      	mov	r0, r2
20002734:	4770      	bx	lr
20002736:	e7ff      	b.n	20002738 <__udivsi3+0x100>
20002738:	b501      	push	{r0, lr}
2000273a:	2000      	movs	r0, #0
2000273c:	f000 f806 	bl	2000274c <__aeabi_idiv0>
20002740:	bd02      	pop	{r1, pc}
20002742:	46c0      	nop			; (mov r8, r8)

20002744 <__aeabi_uidivmod>:
20002744:	2900      	cmp	r1, #0
20002746:	d0f7      	beq.n	20002738 <__udivsi3+0x100>
20002748:	e776      	b.n	20002638 <__udivsi3>
2000274a:	4770      	bx	lr

2000274c <__aeabi_idiv0>:
2000274c:	4770      	bx	lr
2000274e:	46c0      	nop			; (mov r8, r8)

20002750 <msTicks>:
20002750:	00000000 	andeq	r0, r0, r0

20002754 <APBAHBPrescTable>:
20002754:	00000000 	andeq	r0, r0, r0
20002758:	04030201 	streq	r0, [r3], #-513	; 0xfffffdff
2000275c:	04030201 	streq	r0, [r3], #-513	; 0xfffffdff
20002760:	09080706 	stmdbeq	r8, {r1, r2, r8, r9, sl}

20002764 <GPIO_Pins>:
20002764:	00020001 	andeq	r0, r2, r1
20002768:	00080004 	andeq	r0, r8, r4
2000276c:	00200010 	eoreq	r0, r0, r0, lsl r0
20002770:	00800040 	addeq	r0, r0, r0, asr #32
20002774:	02000100 	andeq	r0, r0, #0, 2
20002778:	08000400 	stmdaeq	r0, {sl}
2000277c:	20001000 	andcs	r1, r0, r0
20002780:	80004000 	andhi	r4, r0, r0

20002784 <GPIO_Ports>:
20002784:	40021000 	andmi	r1, r2, r0
20002788:	40020000 	andmi	r0, r2, r0
2000278c:	40020800 	andmi	r0, r2, r0, lsl #16
20002790:	40020c00 	andmi	r0, r2, r0, lsl #24

Disassembly of section .debug_info:

00000000 <.debug_info>:
       0:	00001884 	andeq	r1, r0, r4, lsl #17
       4:	00000004 	andeq	r0, r0, r4
       8:	01040000 	mrseq	r0, (UNDEF: 4)
       c:	000005c9 	andeq	r0, r0, r9, asr #11
      10:	000da80c 	andeq	sl, sp, ip, lsl #16
      14:	00052900 	andeq	r2, r5, r0, lsl #18
	...
      24:	0fc50200 	svceq	0x00c50200
      28:	01050000 	mrseq	r0, (UNDEF: 5)
      2c:	00000253 	andeq	r0, r0, r3, asr r2
      30:	0253c805 	subseq	ip, r3, #327680	; 0x50000
      34:	af030000 	svcge	0x00030000
      38:	72000007 	andvc	r0, r0, #7
      3c:	00082a03 	andeq	r2, r8, r3, lsl #20
      40:	f5037400 			; <UNDEFINED> instruction: 0xf5037400
      44:	75000008 	strvc	r0, [r0, #-8]
      48:	00047203 	andeq	r7, r4, r3, lsl #4
      4c:	d2037600 	andle	r7, r3, #0, 12
      50:	7b000009 	blvc	7c <startup-0x1fffff84>
      54:	000ea103 	andeq	sl, lr, r3, lsl #2
      58:	0b037c00 	bleq	df060 <startup-0x1ff20fa0>
      5c:	7e000011 	mcrvc	0, 0, r0, cr0, cr1, {0}
      60:	00031e03 	andeq	r1, r3, r3, lsl #28
      64:	c3047f00 	movwgt	r7, #20224	; 0x4f00
      68:	00000007 	andeq	r0, r0, r7
      6c:	0006ab04 	andeq	sl, r6, r4, lsl #22
      70:	50040100 	andpl	r0, r4, r0, lsl #2
      74:	02000008 	andeq	r0, r0, #8
      78:	00000e04 	andeq	r0, r0, r4, lsl #28
      7c:	bb040300 	bllt	100c84 <startup-0x1feff37c>
      80:	04000000 	streq	r0, [r0], #-0
      84:	000f3804 	andeq	r3, pc, r4, lsl #16
      88:	22040500 	andcs	r0, r4, #0, 10
      8c:	0600000e 	streq	r0, [r0], -lr
      90:	00073804 	andeq	r3, r7, r4, lsl #16
      94:	1c040700 	stcne	7, cr0, [r4], {-0}
      98:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
      9c:	00110004 	andseq	r0, r1, r4
      a0:	be040900 	vmlalt.f16	s0, s8, s0	; <UNPREDICTABLE>
      a4:	0a00000a 	beq	d4 <startup-0x1fffff2c>
      a8:	000c6604 	andeq	r6, ip, r4, lsl #12
      ac:	8f040b00 	svchi	0x00040b00
      b0:	0c00000b 	stceq	0, cr0, [r0], {11}
      b4:	00038f04 	andeq	r8, r3, r4, lsl #30
      b8:	57040d00 	strpl	r0, [r4, -r0, lsl #26]
      bc:	0e00000f 	cdpeq	0, 0, cr0, cr0, cr15, {0}
      c0:	000e5404 	andeq	r5, lr, r4, lsl #8
      c4:	50040f00 	andpl	r0, r4, r0, lsl #30
      c8:	10000007 	andne	r0, r0, r7
      cc:	00002704 	andeq	r2, r0, r4, lsl #14
      d0:	5e041100 	adfpls	f1, f4, f0
      d4:	1200000d 	andne	r0, r0, #13
      d8:	00074304 	andeq	r4, r7, r4, lsl #6
      dc:	1b041300 	blne	104ce4 <startup-0x1fefb31c>
      e0:	14000005 	strne	r0, [r0], #-5
      e4:	00105004 	andseq	r5, r0, r4
      e8:	60041500 	andvs	r1, r4, r0, lsl #10
      ec:	16000008 	strne	r0, [r0], -r8
      f0:	00107a04 	andseq	r7, r0, r4, lsl #20
      f4:	1c041700 	stcne	7, cr1, [r4], {-0}
      f8:	18000009 	stmdane	r0, {r0, r3}
      fc:	000fb704 	andeq	fp, pc, r4, lsl #14
     100:	86041900 	strhi	r1, [r4], -r0, lsl #18
     104:	1a000002 	bne	114 <startup-0x1ffffeec>
     108:	00071d04 	andeq	r1, r7, r4, lsl #26
     10c:	3c041b00 			; <UNDEFINED> instruction: 0x3c041b00
     110:	1c000001 	stcne	0, cr0, [r0], {1}
     114:	000d1204 	andeq	r1, sp, r4, lsl #4
     118:	bf041d00 	svclt	0x00041d00
     11c:	1e000005 	cdpne	0, 0, cr0, cr0, cr5, {0}
     120:	0006c104 	andeq	ip, r6, r4, lsl #2
     124:	2b041f00 	blcs	107d2c <startup-0x1fef82d4>
     128:	20000004 	andcs	r0, r0, r4
     12c:	000af004 	andeq	pc, sl, r4
     130:	c8042100 	stmdagt	r4, {r8, sp}
     134:	22000008 	andcs	r0, r0, #8
     138:	0009c004 	andeq	ip, r9, r4
     13c:	be042300 	cdplt	3, 0, cr2, cr4, cr0, {0}
     140:	24000001 	strcs	r0, [r0], #-1
     144:	000d1c04 	andeq	r1, sp, r4, lsl #24
     148:	69042500 	stmdbvs	r4, {r8, sl, sp}
     14c:	2600000f 	strcs	r0, [r0], -pc
     150:	00033a04 	andeq	r3, r3, r4, lsl #20
     154:	e0042700 	and	r2, r4, r0, lsl #14
     158:	2800000c 	stmdacs	r0, {r2, r3}
     15c:	000c9804 	andeq	r9, ip, r4, lsl #16
     160:	94042900 	strls	r2, [r4], #-2304	; 0xfffff700
     164:	2a00000a 	bcs	194 <startup-0x1ffffe6c>
     168:	0001c804 	andeq	ip, r1, r4, lsl #16
     16c:	39042b00 	stmdbcc	r4, {r8, r9, fp, sp}
     170:	2c000000 	stccs	0, cr0, [r0], {-0}
     174:	00077904 	andeq	r7, r7, r4, lsl #18
     178:	cd042d00 	stcgt	13, cr2, [r4, #-0]
     17c:	2e000010 	mcrcs	0, 0, r0, cr0, cr0, {0}
     180:	00112a04 	andseq	r2, r1, r4, lsl #20
     184:	13042f00 	movwne	r2, #20224	; 0x4f00
     188:	3000000e 	andcc	r0, r0, lr
     18c:	0010da04 	andseq	sp, r0, r4, lsl #20
     190:	68043100 	stmdavs	r4, {r8, ip, sp}
     194:	32000004 	andcc	r0, r0, #4
     198:	0000b104 	andeq	fp, r0, r4, lsl #2
     19c:	5f043300 	svcpl	0x00043300
     1a0:	3400000a 	strcc	r0, [r0], #-10
     1a4:	00091104 	andeq	r1, r9, r4, lsl #2
     1a8:	ce043500 	cfsh32gt	mvfx3, mvfx4, #0
     1ac:	3600000a 	strcc	r0, [r0], -sl
     1b0:	00098204 	andeq	r8, r9, r4, lsl #4
     1b4:	8b043700 	blhi	10ddbc <startup-0x1fef2244>
     1b8:	38000008 	stmdacc	r0, {r3}
     1bc:	00007a04 	andeq	r7, r0, r4, lsl #20
     1c0:	a3043900 	movwge	r3, #18688	; 0x4900
     1c4:	3a000011 	bcc	210 <startup-0x1ffffdf0>
     1c8:	000bae04 	andeq	sl, fp, r4, lsl #28
     1cc:	e8043b00 	stmda	r4, {r8, r9, fp, ip, sp}
     1d0:	3c000003 	stccc	0, cr0, [r0], {3}
     1d4:	000ef304 	andeq	pc, lr, r4, lsl #6
     1d8:	9a043d00 	bls	10f5e0 <startup-0x1fef0a20>
     1dc:	3e000009 	cdpcc	0, 0, cr0, cr0, cr9, {0}
     1e0:	000bc904 	andeq	ip, fp, r4, lsl #18
     1e4:	90043f00 	andls	r3, r4, r0, lsl #30
     1e8:	40000001 	andmi	r0, r0, r1
     1ec:	000d5004 	andeq	r5, sp, r4
     1f0:	38044100 	stmdacc	r4, {r8, lr}
     1f4:	42000004 	andmi	r0, r0, #4
     1f8:	0007a304 	andeq	sl, r7, r4, lsl #6
     1fc:	50044300 	andpl	r4, r4, r0, lsl #6
     200:	44000002 	strmi	r0, [r0], #-2
     204:	000e7004 	andeq	r7, lr, r4
     208:	91044500 	tstls	r4, r0, lsl #10
     20c:	46000007 	strmi	r0, [r0], -r7
     210:	00019e04 	andeq	r9, r1, r4, lsl #28
     214:	d3044700 	movwle	r4, #18176	; 0x4700
     218:	4800000e 	stmdami	r0, {r1, r2, r3}
     21c:	000cc904 	andeq	ip, ip, r4, lsl #18
     220:	0e044900 	vmlaeq.f16	s8, s8, s0	; <UNPREDICTABLE>
     224:	4a000010 	bmi	26c <startup-0x1ffffd94>
     228:	00111704 	andseq	r1, r1, r4, lsl #14
     22c:	cd044b00 	vstrgt	d4, [r4, #-0]
     230:	4c000007 	stcmi	0, cr0, [r0], {7}
     234:	0009a804 	andeq	sl, r9, r4, lsl #16
     238:	c6044d00 	strgt	r4, [r4], -r0, lsl #26
     23c:	4e000000 	cdpmi	0, 0, cr0, cr0, cr0, {0}
     240:	000cd604 	andeq	sp, ip, r4, lsl #12
     244:	2a044f00 	bcs	113e4c <startup-0x1feec1b4>
     248:	50000007 	andpl	r0, r0, r7
     24c:	000a3804 	andeq	r3, sl, r4, lsl #16
     250:	05005100 	streq	r5, [r0, #-256]	; 0xffffff00
     254:	03dc0601 	bicseq	r0, ip, #1048576	; 0x100000
     258:	74060000 	strvc	r0, [r6], #-0
     25c:	05000008 	streq	r0, [r0, #-8]
     260:	0025032f 	eoreq	r0, r5, pc, lsr #6
     264:	b4070000 	strlt	r0, [r7], #-0
     268:	06000001 	streq	r0, [r0], -r1
     26c:	0002712b 	andeq	r7, r2, fp, lsr #2
     270:	08010500 	stmdaeq	r1, {r8, sl}
     274:	000003da 	ldrdeq	r0, [r0], -sl
     278:	25050205 	strcs	r0, [r5, #-517]	; 0xfffffdfb
     27c:	0700000f 	streq	r0, [r0, -pc]
     280:	000004e9 	andeq	r0, r0, r9, ror #9
     284:	028a3906 	addeq	r3, sl, #98304	; 0x18000
     288:	02050000 	andeq	r0, r5, #0
     28c:	0010a907 	andseq	sl, r0, r7, lsl #18
     290:	113c0700 	teqne	ip, r0, lsl #14
     294:	4d060000 	stcmi	0, cr0, [r6, #-0]
     298:	0000029c 	muleq	r0, ip, r2
     29c:	91050405 	tstls	r5, r5, lsl #8
     2a0:	07000009 	streq	r0, [r0, -r9]
     2a4:	0000093a 	andeq	r0, r0, sl, lsr r9
     2a8:	02ae4f06 	adceq	r4, lr, #6, 30
     2ac:	04050000 	streq	r0, [r5], #-0
     2b0:	000cf407 	andeq	pc, ip, r7, lsl #8
     2b4:	05080500 	streq	r0, [r8, #-1280]	; 0xfffffb00
     2b8:	0000098c 	andeq	r0, r0, ip, lsl #19
     2bc:	ef070805 	svc	0x00070805
     2c0:	0800000c 	stmdaeq	r0, {r2, r3}
     2c4:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
     2c8:	04050074 	streq	r0, [r5], #-116	; 0xffffff8c
     2cc:	000cf907 	andeq	pc, ip, r7, lsl #18
     2d0:	01b60700 			; <UNDEFINED> instruction: 0x01b60700
     2d4:	18070000 	stmdane	r7, {}	; <UNPREDICTABLE>
     2d8:	00000266 	andeq	r0, r0, r6, ror #4
     2dc:	0002d109 	andeq	sp, r2, r9, lsl #2
     2e0:	02d10a00 	sbcseq	r0, r1, #0, 20
     2e4:	e1090000 	mrs	r0, (UNDEF: 9)
     2e8:	07000002 	streq	r0, [r0, -r2]
     2ec:	000004eb 	andeq	r0, r0, fp, ror #9
     2f0:	027f2407 	rsbseq	r2, pc, #117440512	; 0x7000000
     2f4:	eb090000 	bl	2402fc <startup-0x1fdbfd04>
     2f8:	07000002 	streq	r0, [r0, -r2]
     2fc:	0000113e 	andeq	r1, r0, lr, lsr r1
     300:	02912c07 	addseq	r2, r1, #1792	; 0x700
     304:	fb090000 	blx	24030e <startup-0x1fdbfcf2>
     308:	07000002 	streq	r0, [r0, -r2]
     30c:	0000093c 	andeq	r0, r0, ip, lsr r9
     310:	02a33007 	adceq	r3, r3, #7
     314:	0b090000 	bleq	24031c <startup-0x1fdbfce4>
     318:	0a000003 	beq	32c <startup-0x1ffffcd4>
     31c:	00000316 	andeq	r0, r0, r6, lsl r3
     320:	010e040b 	tsteq	lr, fp, lsl #8
     324:	03dc01a0 	bicseq	r0, ip, #160, 2	; 0x28
     328:	5a0c0000 	bpl	300330 <startup-0x1fcffcd0>
     32c:	01000011 	tsteq	r0, r1, lsl r0
     330:	03ec01a2 	mvneq	r0, #-2147483608	; 0x80000028
     334:	0c000000 	stceq	0, cr0, [r0], {-0}
     338:	000003c6 	andeq	r0, r0, r6, asr #7
     33c:	f101a301 			; <UNDEFINED> instruction: 0xf101a301
     340:	20000003 	andcs	r0, r0, r3
     344:	000d790c 	andeq	r7, sp, ip, lsl #18
     348:	01a40100 			; <UNDEFINED> instruction: 0x01a40100
     34c:	000003ec 	andeq	r0, r0, ip, ror #7
     350:	00050c80 	andeq	r0, r5, r0, lsl #25
     354:	a5010000 	strge	r0, [r1, #-0]
     358:	0003f101 	andeq	pc, r3, r1, lsl #2
     35c:	ea0da000 	b	368364 <startup-0x1fc97c9c>
     360:	01000010 	tsteq	r0, r0, lsl r0
     364:	03ec01a6 	mvneq	r0, #-2147483607	; 0x80000029
     368:	01000000 	mrseq	r0, (UNDEF: 0)
     36c:	0004540d 	andeq	r5, r4, sp, lsl #8
     370:	01a70100 			; <UNDEFINED> instruction: 0x01a70100
     374:	000003f1 	strdeq	r0, [r0], -r1
     378:	6e0d0120 	adfvsep	f0, f5, f0
     37c:	01000001 	tsteq	r0, r1
     380:	03ec01a8 	mvneq	r0, #168, 2	; 0x2a
     384:	01800000 	orreq	r0, r0, r0
     388:	00045e0d 	andeq	r5, r4, sp, lsl #28
     38c:	01a90100 			; <UNDEFINED> instruction: 0x01a90100
     390:	000003f1 	strdeq	r0, [r0], -r1
     394:	180d01a0 	stmdane	sp, {r5, r7, r8}
     398:	01000004 	tsteq	r0, r4
     39c:	03ec01aa 	mvneq	r0, #-2147483606	; 0x8000002a
     3a0:	02000000 	andeq	r0, r0, #0
     3a4:	0003fa0d 	andeq	pc, r3, sp, lsl #20
     3a8:	01ab0100 			; <UNDEFINED> instruction: 0x01ab0100
     3ac:	00000401 	andeq	r0, r0, r1, lsl #8
     3b0:	490e0220 	stmdbmi	lr, {r5, r9}
     3b4:	ac010050 	stcge	0, cr0, [r1], {80}	; 0x50
     3b8:	00042101 	andeq	r2, r4, r1, lsl #2
     3bc:	0d030000 	stceq	0, cr0, [r3, #-0]
     3c0:	00000404 	andeq	r0, r0, r4, lsl #8
     3c4:	2601ad01 	strcs	sl, [r1], -r1, lsl #26
     3c8:	f0000004 			; <UNDEFINED> instruction: 0xf0000004
     3cc:	06bc0d03 	ldrteq	r0, [ip], r3, lsl #26
     3d0:	ae010000 	cdpge	0, 0, cr0, cr1, cr0, {0}
     3d4:	00031601 	andeq	r1, r3, r1, lsl #12
     3d8:	000e0000 	andeq	r0, lr, r0
     3dc:	0003160f 	andeq	r1, r3, pc, lsl #12
     3e0:	0003ec00 	andeq	lr, r3, r0, lsl #24
     3e4:	02ca1000 	sbceq	r1, sl, #0
     3e8:	00070000 	andeq	r0, r7, r0
     3ec:	0003dc09 	andeq	sp, r3, r9, lsl #24
     3f0:	030b0f00 	movweq	r0, #48896	; 0xbf00
     3f4:	04010000 	streq	r0, [r1], #-0
     3f8:	ca100000 	bgt	400400 <startup-0x1fbffc00>
     3fc:	17000002 	strne	r0, [r0, -r2]
     400:	030b0f00 	movweq	r0, #48896	; 0xbf00
     404:	04110000 	ldreq	r0, [r1], #-0
     408:	ca100000 	bgt	400410 <startup-0x1fbffbf0>
     40c:	37000002 	strcc	r0, [r0, -r2]
     410:	02dc0f00 	sbcseq	r0, ip, #0, 30
     414:	04210000 	strteq	r0, [r1], #-0
     418:	ca100000 	bgt	400420 <startup-0x1fbffbe0>
     41c:	ef000002 	svc	0x00000002
     420:	04110900 	ldreq	r0, [r1], #-2304	; 0xfffff700
     424:	0b0f0000 	bleq	3c042c <startup-0x1fc3fbd4>
     428:	37000003 	strcc	r0, [r0, -r3]
     42c:	11000004 	tstne	r0, r4
     430:	000002ca 	andeq	r0, r0, sl, asr #5
     434:	06000283 	streq	r0, [r0], -r3, lsl #5
     438:	00000caf 	andeq	r0, r0, pc, lsr #25
     43c:	2001af01 	andcs	sl, r1, r1, lsl #30
     440:	12000003 	andne	r0, r0, #3
     444:	01c0018c 	biceq	r0, r0, ip, lsl #3
     448:	0000055e 	andeq	r0, r0, lr, asr r5
     44c:	0002250c 	andeq	r2, r2, ip, lsl #10
     450:	01c20100 	biceq	r0, r2, r0, lsl #2
     454:	0000031b 	andeq	r0, r0, fp, lsl r3
     458:	034e0c00 	movteq	r0, #60416	; 0xec00
     45c:	c3010000 	movwgt	r0, #4096	; 0x1000
     460:	00031601 	andeq	r1, r3, r1, lsl #12
     464:	ac0c0400 	cfstrsge	mvf0, [ip], {-0}
     468:	01000000 	mrseq	r0, (UNDEF: 0)
     46c:	031601c4 	tsteq	r6, #196, 2	; 0x31
     470:	0c080000 	stceq	0, cr0, [r8], {-0}
     474:	000001f5 	strdeq	r0, [r0], -r5
     478:	1601c501 	strne	ip, [r1], -r1, lsl #10
     47c:	0c000003 	stceq	0, cr0, [r0], {3}
     480:	52435313 	subpl	r5, r3, #1275068416	; 0x4c000000
     484:	01c60100 	biceq	r0, r6, r0, lsl #2
     488:	00000316 	andeq	r0, r0, r6, lsl r3
     48c:	43431310 	movtmi	r1, #13072	; 0x3310
     490:	c7010052 	smlsdgt	r1, r2, r0, r0
     494:	00031601 	andeq	r1, r3, r1, lsl #12
     498:	53131400 	tstpl	r3, #0, 8
     49c:	01005048 	tsteq	r0, r8, asr #32
     4a0:	056e01c8 	strbeq	r0, [lr, #-456]!	; 0xfffffe38
     4a4:	0c180000 	ldceq	0, cr0, [r8], {-0}
     4a8:	000006a5 	andeq	r0, r0, r5, lsr #13
     4ac:	1601c901 	strne	ip, [r1], -r1, lsl #18
     4b0:	24000003 	strcs	r0, [r0], #-3
     4b4:	000e360c 	andeq	r3, lr, ip, lsl #12
     4b8:	01ca0100 	biceq	r0, sl, r0, lsl #2
     4bc:	00000316 	andeq	r0, r0, r6, lsl r3
     4c0:	056c0c28 	strbeq	r0, [ip, #-3112]!	; 0xfffff3d8
     4c4:	cb010000 	blgt	404cc <startup-0x1ffbfb34>
     4c8:	00031601 	andeq	r1, r3, r1, lsl #12
     4cc:	9c0c2c00 	stcls	12, cr2, [ip], {-0}
     4d0:	01000004 	tsteq	r0, r4
     4d4:	031601cc 	tsteq	r6, #204, 2	; 0x33
     4d8:	0c300000 	ldceq	0, cr0, [r0], #-0
     4dc:	00000f1f 	andeq	r0, r0, pc, lsl pc
     4e0:	1601cd01 	strne	ip, [r1], -r1, lsl #26
     4e4:	34000003 	strcc	r0, [r0], #-3
     4e8:	000b800c 	andeq	r8, fp, ip
     4ec:	01ce0100 	biceq	r0, lr, r0, lsl #2
     4f0:	00000316 	andeq	r0, r0, r6, lsl r3
     4f4:	0df50c38 	ldcleq	12, cr0, [r5, #224]!	; 0xe0
     4f8:	cf010000 	svcgt	0x00010000
     4fc:	00031601 	andeq	r1, r3, r1, lsl #12
     500:	50133c00 	andspl	r3, r3, r0, lsl #24
     504:	01005246 	tsteq	r0, r6, asr #4
     508:	058801d0 	streq	r0, [r8, #464]	; 0x1d0
     50c:	13400000 	movtne	r0, #0
     510:	00524644 	subseq	r4, r2, r4, asr #12
     514:	1b01d101 	blne	74920 <startup-0x1ff8b6e0>
     518:	48000003 	stmdami	r0, {r0, r1}
     51c:	52444113 	subpl	r4, r4, #-1073741820	; 0xc0000004
     520:	01d20100 	bicseq	r0, r2, r0, lsl #2
     524:	0000031b 	andeq	r0, r0, fp, lsl r3
     528:	0f0e0c4c 	svceq	0x000e0c4c
     52c:	d3010000 	movwle	r0, #4096	; 0x1000
     530:	0005a201 	andeq	sl, r5, r1, lsl #4
     534:	480c5000 	stmdami	ip, {ip, lr}
     538:	0100000f 	tsteq	r0, pc
     53c:	05bc01d4 	ldreq	r0, [ip, #468]!	; 0x1d4
     540:	0c600000 	stcleq	0, cr0, [r0], #-0
     544:	000003c6 	andeq	r0, r0, r6, asr #7
     548:	c101d501 	tstgt	r1, r1, lsl #10
     54c:	74000005 	strvc	r0, [r0], #-5
     550:	0010e40c 	andseq	lr, r0, ip, lsl #8
     554:	01d60100 	bicseq	r0, r6, r0, lsl #2
     558:	00000316 	andeq	r0, r0, r6, lsl r3
     55c:	dc0f0088 	stcle	0, cr0, [pc], {136}	; 0x88
     560:	6e000002 	cdpvs	0, 0, cr0, cr0, cr2, {0}
     564:	10000005 	andne	r0, r0, r5
     568:	000002ca 	andeq	r0, r0, sl, asr #5
     56c:	5e09000b 	cdppl	0, 0, cr0, cr9, cr11, {0}
     570:	0f000005 	svceq	0x00000005
     574:	0000031b 	andeq	r0, r0, fp, lsl r3
     578:	00000583 	andeq	r0, r0, r3, lsl #11
     57c:	0002ca10 	andeq	ip, r2, r0, lsl sl
     580:	0a000100 	beq	988 <startup-0x1ffff678>
     584:	00000573 	andeq	r0, r0, r3, ror r5
     588:	00058309 	andeq	r8, r5, r9, lsl #6
     58c:	031b0f00 	tsteq	fp, #0, 30
     590:	059d0000 	ldreq	r0, [sp]
     594:	ca100000 	bgt	40059c <startup-0x1fbffa64>
     598:	03000002 	movweq	r0, #2
     59c:	058d0a00 	streq	r0, [sp, #2560]	; 0xa00
     5a0:	9d090000 	stcls	0, cr0, [r9, #-0]
     5a4:	0f000005 	svceq	0x00000005
     5a8:	0000031b 	andeq	r0, r0, fp, lsl r3
     5ac:	000005b7 			; <UNDEFINED> instruction: 0x000005b7
     5b0:	0002ca10 	andeq	ip, r2, r0, lsl sl
     5b4:	0a000400 	beq	15bc <startup-0x1fffea44>
     5b8:	000005a7 	andeq	r0, r0, r7, lsr #11
     5bc:	0005b709 	andeq	fp, r5, r9, lsl #14
     5c0:	030b0f00 	movweq	r0, #48896	; 0xbf00
     5c4:	05d10000 	ldrbeq	r0, [r1]
     5c8:	ca100000 	bgt	4005d0 <startup-0x1fbffa30>
     5cc:	04000002 	streq	r0, [r0], #-2
     5d0:	04820600 	streq	r0, [r2], #1536	; 0x600
     5d4:	d7010000 	strle	r0, [r1, -r0]
     5d8:	00044301 	andeq	r4, r4, r1, lsl #6
     5dc:	01101200 	tsteq	r0, r0, lsl #4
     5e0:	061b02bf 			; <UNDEFINED> instruction: 0x061b02bf
     5e4:	c90c0000 	stmdbgt	ip, {}	; <UNPREDICTABLE>
     5e8:	0100000a 	tsteq	r0, sl
     5ec:	031602c1 	tsteq	r6, #268435468	; 0x1000000c
     5f0:	0c000000 	stceq	0, cr0, [r0], {-0}
     5f4:	00000e8a 	andeq	r0, r0, sl, lsl #29
     5f8:	1602c201 	strne	ip, [r2], -r1, lsl #4
     5fc:	04000003 	streq	r0, [r0], #-3
     600:	4c415613 	mcrrmi	6, 1, r5, r1, cr3
     604:	02c30100 	sbceq	r0, r3, #0, 2
     608:	00000316 	andeq	r0, r0, r6, lsl r3
     60c:	0e010c08 	cdpeq	12, 0, cr0, cr1, cr8, {0}
     610:	c4010000 	strgt	r0, [r1], #-0
     614:	00031b02 	andeq	r1, r3, r2, lsl #22
     618:	06000c00 	streq	r0, [r0], -r0, lsl #24
     61c:	00000c14 	andeq	r0, r0, r4, lsl ip
     620:	dd02c501 	cfstr32le	mvfx12, [r2, #-4]
     624:	0f000005 	svceq	0x00000005
     628:	0000030b 	andeq	r0, r0, fp, lsl #6
     62c:	00000637 	andeq	r0, r0, r7, lsr r6
     630:	0002ca10 	andeq	ip, r2, r0, lsl sl
     634:	14000100 	strne	r0, [r0], #-256	; 0xffffff00
     638:	00000fca 	andeq	r0, r0, sl, asr #31
     63c:	0606fa01 	streq	pc, [r6], -r1, lsl #20
     640:	15000003 	strne	r0, [r0, #-3]
     644:	00000840 	andeq	r0, r0, r0, asr #16
     648:	030b3b08 	movweq	r3, #47880	; 0xbb08
     64c:	07160000 	ldreq	r0, [r6, -r0]
     650:	00027101 	andeq	r7, r2, r1, lsl #2
     654:	035d0500 	cmpeq	sp, #0, 10
     658:	00000669 	andeq	r0, r0, r9, ror #12
     65c:	00122304 	andseq	r2, r2, r4, lsl #6
     660:	53170000 	tstpl	r7, #0
     664:	01005445 	tsteq	r0, r5, asr #8
     668:	09f40600 	ldmibeq	r4!, {r9, sl}^
     66c:	5d050000 	stcpl	0, cr0, [r5, #-0]
     670:	00064e03 	andeq	r4, r6, r3, lsl #28
     674:	0ab50600 	beq	fed41e7c <GPIO_Ports+0xded3f6f8>
     678:	5d050000 	stcpl	0, cr0, [r5, #-0]
     67c:	00064e03 	andeq	r4, r6, r3, lsl #28
     680:	01071600 	tsteq	r7, r0, lsl #12
     684:	00000271 	andeq	r0, r0, r1, ror r2
     688:	9c035f05 	stcls	15, cr5, [r3], {5}
     68c:	04000006 	streq	r0, [r0], #-6
     690:	000009ca 	andeq	r0, r0, sl, asr #19
     694:	0f7f0400 	svceq	0x007f0400
     698:	00010000 	andeq	r0, r1, r0
     69c:	000cb906 	andeq	fp, ip, r6, lsl #18
     6a0:	035f0500 	cmpeq	pc, #0, 10
     6a4:	00000681 	andeq	r0, r0, r1, lsl #13
     6a8:	71010716 	tstvc	r1, r6, lsl r7
     6ac:	05000002 	streq	r0, [r0, #-2]
     6b0:	06c30362 	strbeq	r0, [r3], r2, ror #6
     6b4:	c2040000 	andgt	r0, r4, #0
     6b8:	00000008 	andeq	r0, r0, r8
     6bc:	000d3e04 	andeq	r3, sp, r4, lsl #28
     6c0:	06000100 	streq	r0, [r0], -r0, lsl #2
     6c4:	00000c5a 	andeq	r0, r0, sl, asr ip
     6c8:	a8036205 	stmdage	r3, {r0, r2, r9, sp, lr}
     6cc:	12000006 	andne	r0, r0, #6
     6d0:	05c30528 	strbeq	r0, [r3, #1320]	; 0x528
     6d4:	0000075b 	andeq	r0, r0, fp, asr r7
     6d8:	0010390c 	andseq	r3, r0, ip, lsl #18
     6dc:	05c50500 	strbeq	r0, [r5, #1280]	; 0x500
     6e0:	00000316 	andeq	r0, r0, r6, lsl r3
     6e4:	0dfa0c00 	ldcleq	12, cr0, [sl]
     6e8:	c6050000 	strgt	r0, [r5], -r0
     6ec:	00031605 	andeq	r1, r3, r5, lsl #12
     6f0:	ed0c0400 	cfstrs	mvf0, [ip, #-0]
     6f4:	05000008 	streq	r0, [r0, #-8]
     6f8:	031605c7 	tsteq	r6, #834666496	; 0x31c00000
     6fc:	0c080000 	stceq	0, cr0, [r8], {-0}
     700:	000009b4 			; <UNDEFINED> instruction: 0x000009b4
     704:	1605c805 	strne	ip, [r5], -r5, lsl #16
     708:	0c000003 	stceq	0, cr0, [r0], {3}
     70c:	52444913 	subpl	r4, r4, #311296	; 0x4c000
     710:	05c90500 	strbeq	r0, [r9, #1280]	; 0x500
     714:	00000316 	andeq	r0, r0, r6, lsl r3
     718:	444f1310 	strbmi	r1, [pc], #-784	; 720 <startup-0x1ffff8e0>
     71c:	ca050052 	bgt	14086c <startup-0x1febf794>
     720:	00031605 	andeq	r1, r3, r5, lsl #12
     724:	0a0c1400 	beq	30572c <startup-0x1fcfa8d4>
     728:	0500000a 	streq	r0, [r0, #-10]
     72c:	02f605cb 	rscseq	r0, r6, #851443712	; 0x32c00000
     730:	0c180000 	ldceq	0, cr0, [r8], {-0}
     734:	000009e7 	andeq	r0, r0, r7, ror #19
     738:	f605cc05 			; <UNDEFINED> instruction: 0xf605cc05
     73c:	1a000002 	bne	74c <startup-0x1ffff8b4>
     740:	0008ac0c 	andeq	sl, r8, ip, lsl #24
     744:	05cd0500 	strbeq	r0, [sp, #1280]	; 0x500
     748:	00000316 	andeq	r0, r0, r6, lsl r3
     74c:	4641131c 			; <UNDEFINED> instruction: 0x4641131c
     750:	ce050052 	mcrgt	0, 0, r0, cr5, cr2, {2}
     754:	00076b05 	andeq	r6, r7, r5, lsl #22
     758:	0f002000 	svceq	0x00002000
     75c:	00000316 	andeq	r0, r0, r6, lsl r3
     760:	0000076b 	andeq	r0, r0, fp, ror #14
     764:	0002ca10 	andeq	ip, r2, r0, lsl sl
     768:	09000100 	stmdbeq	r0, {r8}
     76c:	0000075b 	andeq	r0, r0, fp, asr r7
     770:	000faa06 	andeq	sl, pc, r6, lsl #20
     774:	05cf0500 	strbeq	r0, [pc, #1280]	; c7c <startup-0x1ffff384>
     778:	000006cf 	andeq	r0, r0, pc, asr #13
     77c:	64059812 	strvs	r9, [r5], #-2066	; 0xfffff7ee
     780:	00093f06 	andeq	r3, r9, r6, lsl #30
     784:	52431300 	subpl	r1, r3, #0, 6
     788:	06660500 	strbteq	r0, [r6], -r0, lsl #10
     78c:	00000316 	andeq	r0, r0, r6, lsl r3
     790:	09090c00 	stmdbeq	r9, {sl, fp}
     794:	67050000 	strvs	r0, [r5, -r0]
     798:	00031606 	andeq	r1, r3, r6, lsl #12
     79c:	8d0c0400 	cfstrshi	mvf0, [ip, #-0]
     7a0:	05000010 	streq	r0, [r0, #-16]
     7a4:	03160668 	tsteq	r6, #104, 12	; 0x6800000
     7a8:	13080000 	movwne	r0, #32768	; 0x8000
     7ac:	00524943 	subseq	r4, r2, r3, asr #18
     7b0:	16066905 	strne	r6, [r6], -r5, lsl #18
     7b4:	0c000003 	stceq	0, cr0, [r0], {3}
     7b8:	0004a10c 	andeq	sl, r4, ip, lsl #2
     7bc:	066a0500 	strbteq	r0, [sl], -r0, lsl #10
     7c0:	00000316 	andeq	r0, r0, r6, lsl r3
     7c4:	0eea0c10 	mcreq	12, 7, r0, cr10, cr0, {0}
     7c8:	6b050000 	blvs	1407d0 <startup-0x1febf830>
     7cc:	00031606 	andeq	r1, r3, r6, lsl #12
     7d0:	510c1400 	tstpl	ip, r0, lsl #8
     7d4:	0500000c 	streq	r0, [r0, #-12]
     7d8:	0316066c 	tsteq	r6, #108, 12	; 0x6c00000
     7dc:	0c180000 	ldceq	0, cr0, [r8], {-0}
     7e0:	000003c6 	andeq	r0, r0, r6, asr #7
     7e4:	0b066d05 	bleq	19bc00 <startup-0x1fe64400>
     7e8:	1c000003 	stcne	0, cr0, [r0], {3}
     7ec:	000c8f0c 	andeq	r8, ip, ip, lsl #30
     7f0:	066e0500 	strbteq	r0, [lr], -r0, lsl #10
     7f4:	00000316 	andeq	r0, r0, r6, lsl r3
     7f8:	09de0c20 	ldmibeq	lr, {r5, sl, fp}^
     7fc:	6f050000 	svcvs	0x00050000
     800:	00031606 	andeq	r1, r3, r6, lsl #12
     804:	d00c2400 	andle	r2, ip, r0, lsl #8
     808:	05000003 	streq	r0, [r0, #-3]
     80c:	06270670 			; <UNDEFINED> instruction: 0x06270670
     810:	0c280000 	stceq	0, cr0, [r8], #-0
     814:	00000e82 	andeq	r0, r0, r2, lsl #29
     818:	16067105 	strne	r7, [r6], -r5, lsl #2
     81c:	30000003 	andcc	r0, r0, r3
     820:	0004f40c 	andeq	pc, r4, ip, lsl #8
     824:	06720500 	ldrbteq	r0, [r2], -r0, lsl #10
     828:	00000316 	andeq	r0, r0, r6, lsl r3
     82c:	118a0c34 	orrne	r0, sl, r4, lsr ip
     830:	73050000 	movwvc	r0, #20480	; 0x5000
     834:	00031606 	andeq	r1, r3, r6, lsl #12
     838:	540c3800 	strpl	r3, [ip], #-2048	; 0xfffff800
     83c:	05000004 	streq	r0, [r0, #-4]
     840:	030b0674 	movweq	r0, #46708	; 0xb674
     844:	0c3c0000 	ldceq	0, cr0, [ip], #-0
     848:	00000ca7 	andeq	r0, r0, r7, lsr #25
     84c:	16067505 	strne	r7, [r6], -r5, lsl #10
     850:	40000003 	andmi	r0, r0, r3
     854:	0002e90c 	andeq	lr, r2, ip, lsl #18
     858:	06760500 	ldrbteq	r0, [r6], -r0, lsl #10
     85c:	00000316 	andeq	r0, r0, r6, lsl r3
     860:	045e0c44 	ldrbeq	r0, [lr], #-3140	; 0xfffff3bc
     864:	77050000 	strvc	r0, [r5, -r0]
     868:	00062706 	andeq	r2, r6, r6, lsl #14
     86c:	050c4800 	streq	r4, [ip, #-2048]	; 0xfffff800
     870:	05000003 	streq	r0, [r0, #-3]
     874:	03160678 	tsteq	r6, #120, 12	; 0x7800000
     878:	0c500000 	mraeq	r0, r0, acc0
     87c:	000001dc 	ldrdeq	r0, [r0], -ip
     880:	16067905 	strne	r7, [r6], -r5, lsl #18
     884:	54000003 	strpl	r0, [r0], #-3
     888:	000d7e0c 	andeq	r7, sp, ip, lsl #28
     88c:	067a0500 	ldrbteq	r0, [sl], -r0, lsl #10
     890:	00000316 	andeq	r0, r0, r6, lsl r3
     894:	03fa0c58 	mvnseq	r0, #88, 24	; 0x5800
     898:	7b050000 	blvc	1408a0 <startup-0x1febf760>
     89c:	00030b06 	andeq	r0, r3, r6, lsl #22
     8a0:	850c5c00 	strhi	r5, [ip, #-3072]	; 0xfffff400
     8a4:	0500000b 	streq	r0, [r0, #-11]
     8a8:	0316067c 	tsteq	r6, #124, 12	; 0x7c00000
     8ac:	0c600000 	stcleq	0, cr0, [r0], #-0
     8b0:	00000a6a 	andeq	r0, r0, sl, ror #20
     8b4:	16067d05 	strne	r7, [r6], -r5, lsl #26
     8b8:	64000003 	strvs	r0, [r0], #-3
     8bc:	0004040c 	andeq	r0, r4, ip, lsl #8
     8c0:	067e0500 	ldrbteq	r0, [lr], -r0, lsl #10
     8c4:	00000627 	andeq	r0, r0, r7, lsr #12
     8c8:	06a00c68 	strteq	r0, [r0], r8, ror #24
     8cc:	7f050000 	svcvc	0x00050000
     8d0:	00031606 	andeq	r1, r3, r6, lsl #12
     8d4:	43137000 	tstmi	r3, #0
     8d8:	05005253 	streq	r5, [r0, #-595]	; 0xfffffdad
     8dc:	03160680 	tsteq	r6, #128, 12	; 0x8000000
     8e0:	0c740000 	ldcleq	0, cr0, [r4], #-0
     8e4:	0000040e 	andeq	r0, r0, lr, lsl #8
     8e8:	27068105 	strcs	r8, [r6, -r5, lsl #2]
     8ec:	78000006 	stmdavc	r0, {r1, r2}
     8f0:	0009ba0c 	andeq	fp, r9, ip, lsl #20
     8f4:	06820500 	streq	r0, [r2], r0, lsl #10
     8f8:	00000316 	andeq	r0, r0, r6, lsl r3
     8fc:	004c0c80 	subeq	r0, ip, r0, lsl #25
     900:	83050000 	movwhi	r0, #20480	; 0x5000
     904:	00031606 	andeq	r1, r3, r6, lsl #12
     908:	870c8400 	strhi	r8, [ip, -r0, lsl #8]
     90c:	05000010 	streq	r0, [r0, #-16]
     910:	03160684 	tsteq	r6, #132, 12	; 0x8400000
     914:	0c880000 	stceq	0, cr0, [r8], {0}
     918:	00000346 	andeq	r0, r0, r6, asr #6
     91c:	16068505 	strne	r8, [r6], -r5, lsl #10
     920:	8c000003 	stchi	0, cr0, [r0], {3}
     924:	000bc00c 	andeq	ip, fp, ip
     928:	06860500 	streq	r0, [r6], r0, lsl #10
     92c:	00000316 	andeq	r0, r0, r6, lsl r3
     930:	0e2d0c90 	mcreq	12, 1, r0, cr13, cr0, {4}
     934:	87050000 	strhi	r0, [r5, -r0]
     938:	00031606 	andeq	r1, r3, r6, lsl #12
     93c:	06009400 	streq	r9, [r0], -r0, lsl #8
     940:	00000f13 	andeq	r0, r0, r3, lsl pc
     944:	7c068905 			; <UNDEFINED> instruction: 0x7c068905
     948:	18000007 	stmdane	r0, {r0, r1, r2}
     94c:	84300910 	ldrthi	r0, [r0], #-2320	; 0xfffff6f0
     950:	19000009 	stmdbne	r0, {r0, r3}
     954:	000010ef 	andeq	r1, r0, pc, ror #1
     958:	030b3209 	movweq	r3, #45577	; 0xb209
     95c:	19000000 	stmdbne	r0, {}	; <UNPREDICTABLE>
     960:	0000008c 	andeq	r0, r0, ip, lsl #1
     964:	030b3309 	movweq	r3, #45833	; 0xb309
     968:	19040000 	stmdbne	r4, {}	; <UNPREDICTABLE>
     96c:	00000586 	andeq	r0, r0, r6, lsl #11
     970:	030b3409 	movweq	r3, #46089	; 0xb409
     974:	19080000 	stmdbne	r8, {}	; <UNPREDICTABLE>
     978:	000004fc 	strdeq	r0, [r0], -ip
     97c:	030b3509 	movweq	r3, #46345	; 0xb509
     980:	000c0000 	andeq	r0, ip, r0
     984:	000efc07 	andeq	pc, lr, r7, lsl #24
     988:	4b360900 	blmi	d82d90 <startup-0x1f27d270>
     98c:	0f000009 	svceq	0x00000009
     990:	000002e6 	andeq	r0, r0, r6, ror #5
     994:	0000099f 	muleq	r0, pc, r9	; <UNPREDICTABLE>
     998:	0002ca10 	andeq	ip, r2, r0, lsl sl
     99c:	0a000f00 	beq	45a4 <startup-0x1fffba5c>
     9a0:	0000098f 	andeq	r0, r0, pc, lsl #19
     9a4:	00099f09 	andeq	r9, r9, r9, lsl #30
     9a8:	09451a00 	stmdbeq	r5, {r9, fp, ip}^
     9ac:	99020000 	stmdbls	r2, {}	; <UNPREDICTABLE>
     9b0:	000009a4 	andeq	r0, r0, r4, lsr #19
     9b4:	27540305 	ldrbcs	r0, [r4, -r5, lsl #6]
     9b8:	071b2000 	ldreq	r2, [fp, -r0]
     9bc:	00027101 	andeq	r7, r2, r1, lsl #2
     9c0:	e0420a00 	sub	r0, r2, r0, lsl #20
     9c4:	04000009 	streq	r0, [r0], #-9
     9c8:	0000087e 	andeq	r0, r0, lr, ror r8
     9cc:	070f0400 	streq	r0, [pc, -r0, lsl #8]
     9d0:	04010000 	streq	r0, [r1], #-0
     9d4:	00000262 	andeq	r0, r0, r2, ror #4
     9d8:	029e0402 	addseq	r0, lr, #33554432	; 0x2000000
     9dc:	00030000 	andeq	r0, r3, r0
     9e0:	000d8807 	andeq	r8, sp, r7, lsl #16
     9e4:	ba470a00 	blt	11c31ec <startup-0x1ee3ce14>
     9e8:	1b000009 	blne	a14 <startup-0x1ffff5ec>
     9ec:	02710107 	rsbseq	r0, r1, #-1073741823	; 0xc0000001
     9f0:	4f0a0000 	svcmi	0x000a0000
     9f4:	00000a05 	andeq	r0, r0, r5, lsl #20
     9f8:	00041d04 	andeq	r1, r4, r4, lsl #26
     9fc:	5f040000 	svcpl	0x00040000
     a00:	01000003 	tsteq	r0, r3
     a04:	010a0700 	tsteq	sl, r0, lsl #14
     a08:	520a0000 	andpl	r0, sl, #0
     a0c:	000009eb 	andeq	r0, r0, fp, ror #19
     a10:	7101071b 	tstvc	r1, fp, lsl r7
     a14:	0a000002 	beq	a24 <startup-0x1ffff5dc>
     a18:	000a365a 	andeq	r3, sl, sl, asr r6
     a1c:	050c0400 	streq	r0, [ip, #-1024]	; 0xfffffc00
     a20:	04000000 	streq	r0, [r0], #-0
     a24:	00000956 	andeq	r0, r0, r6, asr r9
     a28:	11b50401 			; <UNDEFINED> instruction: 0x11b50401
     a2c:	04020000 	streq	r0, [r2], #-0
     a30:	00000a10 	andeq	r0, r0, r0, lsl sl
     a34:	8f070003 	svchi	0x00070003
     a38:	0a00000e 	beq	a78 <startup-0x1ffff588>
     a3c:	000a105f 	andeq	r1, sl, pc, asr r0
     a40:	01071b00 	tsteq	r7, r0, lsl #22
     a44:	00000271 	andeq	r0, r0, r1, ror r2
     a48:	0a616e0a 	beq	185c278 <startup-0x1e7a3d88>
     a4c:	9b040000 	blls	100a54 <startup-0x1feff5ac>
     a50:	00000000 	andeq	r0, r0, r0
     a54:	00106d04 	andseq	r6, r0, r4, lsl #26
     a58:	e6040100 	str	r0, [r4], -r0, lsl #2
     a5c:	02000001 	andeq	r0, r0, #1
     a60:	048b0700 	streq	r0, [fp], #1792	; 0x700
     a64:	720a0000 	andvc	r0, sl, #0
     a68:	00000a41 	andeq	r0, r0, r1, asr #20
     a6c:	840a0818 	strhi	r0, [sl], #-2072	; 0xfffff7e8
     a70:	00000ab1 			; <UNDEFINED> instruction: 0x00000ab1
     a74:	000eb319 	andeq	fp, lr, r9, lsl r3
     a78:	0b860a00 	bleq	fe183280 <GPIO_Ports+0xde180afc>
     a7c:	00000003 	andeq	r0, r0, r3
     a80:	000d4619 	andeq	r4, sp, r9, lsl r6
     a84:	e0890a00 	add	r0, r9, r0, lsl #20
     a88:	04000009 	streq	r0, [r0], #-9
     a8c:	000ae519 	andeq	lr, sl, r9, lsl r5
     a90:	368c0a00 	strcc	r0, [ip], r0, lsl #20
     a94:	0500000a 	streq	r0, [r0, #-10]
     a98:	00092f19 	andeq	r2, r9, r9, lsl pc
     a9c:	058f0a00 	streq	r0, [pc, #2560]	; 14a4 <startup-0x1fffeb5c>
     aa0:	0600000a 	streq	r0, [r0], -sl
     aa4:	000ee019 	andeq	lr, lr, r9, lsl r0
     aa8:	61920a00 	orrsvs	r0, r2, r0, lsl #20
     aac:	0700000a 	streq	r0, [r0, -sl]
     ab0:	036d0700 	cmneq	sp, #0, 14
     ab4:	940a0000 	strls	r0, [sl], #-0
     ab8:	00000a6c 	andeq	r0, r0, ip, ror #20
     abc:	00086e1c 	andeq	r6, r8, ip, lsl lr
     ac0:	010b2000 	mrseq	r2, (UNDEF: 11)
     ac4:	00000b34 	andeq	r0, r0, r4, lsr fp
     ac8:	0064691d 	rsbeq	r6, r4, sp, lsl r9
     acc:	0b34030b 	bleq	d01700 <startup-0x1f2fe900>
     ad0:	19000000 	stmdbne	r0, {}	; <UNPREDICTABLE>
     ad4:	000002bb 			; <UNDEFINED> instruction: 0x000002bb
     ad8:	02c3040b 	sbceq	r0, r3, #184549376	; 0xb000000
     adc:	19040000 	stmdbne	r4, {}	; <UNPREDICTABLE>
     ae0:	000001aa 	andeq	r0, r0, sl, lsr #3
     ae4:	0b34050b 	bleq	d01f18 <startup-0x1f2fe0e8>
     ae8:	19080000 	stmdbne	r8, {}	; <UNPREDICTABLE>
     aec:	00000c21 	andeq	r0, r0, r1, lsr #24
     af0:	0b34060b 	bleq	d02324 <startup-0x1f2fdcdc>
     af4:	19090000 	stmdbne	r9, {}	; <UNPREDICTABLE>
     af8:	00000f2f 	andeq	r0, r0, pc, lsr #30
     afc:	02c3070b 	sbceq	r0, r3, #2883584	; 0x2c0000
     b00:	190c0000 	stmdbne	ip, {}	; <UNPREDICTABLE>
     b04:	00000e66 	andeq	r0, r0, r6, ror #28
     b08:	02c3080b 	sbceq	r0, r3, #720896	; 0xb0000
     b0c:	19100000 	ldmdbne	r0, {}	; <UNPREDICTABLE>
     b10:	00000571 	andeq	r0, r0, r1, ror r5
     b14:	02c3090b 	sbceq	r0, r3, #180224	; 0x2c000
     b18:	19140000 	ldmdbne	r4, {}	; <UNPREDICTABLE>
     b1c:	00001022 	andeq	r1, r0, r2, lsr #32
     b20:	02c30a0b 	sbceq	r0, r3, #45056	; 0xb000
     b24:	19180000 	ldmdbne	r8, {}	; <UNPREDICTABLE>
     b28:	00000f4d 	andeq	r0, r0, sp, asr #30
     b2c:	0b3b0b0b 	bleq	ec3760 <startup-0x1f13c8a0>
     b30:	001c0000 	andseq	r0, ip, r0
     b34:	e3080105 	movw	r0, #33029	; 0x8105
     b38:	1e000003 	cdpne	0, 0, cr0, cr0, cr3, {0}
     b3c:	00077004 	andeq	r7, r7, r4
     b40:	086f0700 	stmdaeq	pc!, {r8, r9, sl}^	; <UNPREDICTABLE>
     b44:	0c0b0000 	stceq	0, cr0, [fp], {-0}
     b48:	00000abc 			; <UNDEFINED> instruction: 0x00000abc
     b4c:	0002eb0f 	andeq	lr, r2, pc, lsl #22
     b50:	000b5c00 	andeq	r5, fp, r0, lsl #24
     b54:	02ca1000 	sbceq	r1, sl, #0
     b58:	000f0000 	andeq	r0, pc, r0
     b5c:	0007051f 	andeq	r0, r7, pc, lsl r5
     b60:	4c170400 	cfldrsmi	mvf0, [r7], {-0}
     b64:	0500000b 	streq	r0, [r0, #-11]
     b68:	00276403 	eoreq	r6, r7, r3, lsl #8
     b6c:	0b3b0f20 	bleq	ec47f4 <startup-0x1f13b80c>
     b70:	0b7d0000 	bleq	1f40b78 <startup-0x1e0bf488>
     b74:	ca100000 	bgt	400b7c <startup-0x1fbff484>
     b78:	03000002 	movweq	r0, #2
     b7c:	021a1f00 	andseq	r1, sl, #0, 30
     b80:	1c040000 	stcne	0, cr0, [r4], {-0}
     b84:	00000b6d 	andeq	r0, r0, sp, ror #22
     b88:	27840305 	strcs	r0, [r4, r5, lsl #6]
     b8c:	d51f2000 	ldrle	r2, [pc, #-0]	; b94 <startup-0x1ffff46c>
     b90:	04000008 	streq	r0, [r0], #-8
     b94:	0003161f 	andeq	r1, r3, pc, lsl r6
     b98:	50030500 	andpl	r0, r3, r0, lsl #10
     b9c:	20200027 	eorcs	r0, r0, r7, lsr #32
     ba0:	00001004 	andeq	r1, r0, r4
     ba4:	0fec3504 	svceq	0x00ec3504
     ba8:	04502000 	ldrbeq	r2, [r0], #-0
     bac:	9c010000 	stcls	0, cr0, [r1], {-0}
     bb0:	00000cd7 	ldrdeq	r0, [r0], -r7
     bb4:	0006611a 	andeq	r6, r6, sl, lsl r1
     bb8:	c33e0400 	teqgt	lr, #0, 8
     bbc:	02000002 	andeq	r0, r0, #2
     bc0:	a11a5c91 			; <UNDEFINED> instruction: 0xa11a5c91
     bc4:	0400000b 	streq	r0, [r0], #-11
     bc8:	000cd748 	andeq	sp, ip, r8, asr #14
     bcc:	b0910400 	addslt	r0, r1, r0, lsl #8
     bd0:	ec1a067f 	ldc	6, cr0, [sl], {127}	; 0x7f
     bd4:	04000006 	streq	r0, [r0], #-6
     bd8:	0002c349 	andeq	ip, r2, r9, asr #6
     bdc:	58910200 	ldmpl	r1, {r9}
     be0:	00100a21 	andseq	r0, r0, r1, lsr #20
     be4:	00004420 	andeq	r4, r0, r0, lsr #8
     be8:	000c1000 	andeq	r1, ip, r0
     bec:	006a2200 	rsbeq	r2, sl, r0, lsl #4
     bf0:	02c33f04 	sbceq	r3, r3, #4, 30
     bf4:	91020000 	mrsls	r0, (UNDEF: 2)
     bf8:	10102360 	andsne	r2, r0, r0, ror #6
     bfc:	00322000 	eorseq	r2, r2, r0
     c00:	69220000 	stmdbvs	r2!, {}	; <UNPREDICTABLE>
     c04:	c3410400 	movtgt	r0, #5120	; 0x1400
     c08:	02000002 	andeq	r0, r0, #2
     c0c:	00006491 	muleq	r0, r1, r4
     c10:	0010b021 	andseq	fp, r0, r1, lsr #32
     c14:	0000b020 	andeq	fp, r0, r0, lsr #32
     c18:	000c4000 	andeq	r4, ip, r0
     c1c:	006a2200 	rsbeq	r2, sl, r0, lsl #4
     c20:	02c34a04 	sbceq	r4, r3, #4, 20	; 0x4000
     c24:	91020000 	mrsls	r0, (UNDEF: 2)
     c28:	10b62354 	adcsne	r2, r6, r4, asr r3
     c2c:	009e2000 	addseq	r2, lr, r0
     c30:	69220000 	stmdbvs	r2!, {}	; <UNPREDICTABLE>
     c34:	c34c0400 	movtgt	r0, #50176	; 0xc400
     c38:	02000002 	andeq	r0, r0, #2
     c3c:	00005091 	muleq	r0, r1, r0
     c40:	00116021 	andseq	r6, r1, r1, lsr #32
     c44:	00003e20 	andeq	r3, r0, r0, lsr #28
     c48:	000c5a00 	andeq	r5, ip, r0, lsl #20
     c4c:	00692200 	rsbeq	r2, r9, r0, lsl #4
     c50:	02c35b04 	sbceq	r5, r3, #4, 22	; 0x1000
     c54:	91020000 	mrsls	r0, (UNDEF: 2)
     c58:	9e21004c 	cdpls	0, 2, cr0, cr1, cr12, {2}
     c5c:	3c200011 	stccc	0, cr0, [r0], #-68	; 0xffffffbc
     c60:	74000000 	strvc	r0, [r0], #-0
     c64:	2200000c 	andcs	r0, r0, #12
     c68:	61040069 	tstvs	r4, r9, rrx
     c6c:	000002c3 	andeq	r0, r0, r3, asr #5
     c70:	00489102 	subeq	r9, r8, r2, lsl #2
     c74:	0011e021 	andseq	lr, r1, r1, lsr #32
     c78:	00003820 	andeq	r3, r0, r0, lsr #16
     c7c:	000c8e00 	andeq	r8, ip, r0, lsl #28
     c80:	00692200 	rsbeq	r2, r9, r0, lsl #4
     c84:	02c36704 	sbceq	r6, r3, #4, 14	; 0x100000
     c88:	91020000 	mrsls	r0, (UNDEF: 2)
     c8c:	20210044 	eorcs	r0, r1, r4, asr #32
     c90:	38200012 	stmdacc	r0!, {r1, r4}
     c94:	a8000000 	stmdage	r0, {}	; <UNPREDICTABLE>
     c98:	2200000c 	andcs	r0, r0, #12
     c9c:	6c040069 	stcvs	0, cr0, [r4], {105}	; 0x69
     ca0:	000002c3 	andeq	r0, r0, r3, asr #5
     ca4:	00409102 	subeq	r9, r0, r2, lsl #2
     ca8:	00126223 	andseq	r6, r2, r3, lsr #4
     cac:	0001d020 	andeq	sp, r1, r0, lsr #32
     cb0:	00692200 	rsbeq	r2, r9, r0, lsl #4
     cb4:	02c37604 	sbceq	r7, r3, #4, 12	; 0x400000
     cb8:	91030000 	mrsls	r0, (UNDEF: 3)
     cbc:	fc237fbc 	stc2	15, cr7, [r3], #-752	; 0xfffffd10
     cc0:	22200012 	eorcs	r0, r0, #18
     cc4:	22000001 	andcs	r0, r0, #1
     cc8:	86040069 	strhi	r0, [r4], -r9, rrx
     ccc:	000002c3 	andeq	r0, r0, r3, asr #5
     cd0:	7fb89103 	svcvc	0x00b89103
     cd4:	0f000000 	svceq	0x00000000
     cd8:	00000b41 	andeq	r0, r0, r1, asr #22
     cdc:	00000ceb 	andeq	r0, r0, fp, ror #25
     ce0:	0002ca24 	andeq	ip, r2, r4, lsr #20
     ce4:	b4910400 	ldrlt	r0, [r1], #1024	; 0x400
     ce8:	2500067f 	strcs	r0, [r0, #-1663]	; 0xfffff981
     cec:	00000173 	andeq	r0, r0, r3, ror r1
     cf0:	0fc03004 	svceq	0x00c03004
     cf4:	002c2000 	eoreq	r2, ip, r0
     cf8:	9c010000 	stcls	0, cr0, [r1], {-0}
     cfc:	00000d1d 	andeq	r0, r0, sp, lsl sp
     d00:	00100926 	andseq	r0, r0, r6, lsr #18
     d04:	c3300400 	teqgt	r0, #0, 8
     d08:	02000002 	andeq	r0, r0, #2
     d0c:	071a6c91 			; <UNDEFINED> instruction: 0x071a6c91
     d10:	0400000e 	streq	r0, [r0], #-14
     d14:	0002c331 	andeq	ip, r2, r1, lsr r3
     d18:	74910200 	ldrvc	r0, [r1], #512	; 0x200
     d1c:	0b5a2000 	bleq	1688d24 <startup-0x1e9772dc>
     d20:	24040000 	strcs	r0, [r4], #-0
     d24:	20000f88 	andcs	r0, r0, r8, lsl #31
     d28:	00000038 	andeq	r0, r0, r8, lsr r0
     d2c:	0d419c01 	stcleq	12, cr9, [r1, #-4]
     d30:	c11a0000 	tstgt	sl, r0
     d34:	04000004 	streq	r0, [r0], #-4
     d38:	00030b28 	andeq	r0, r3, r8, lsr #22
     d3c:	74910200 	ldrvc	r0, [r1], #512	; 0x200
     d40:	022b2700 	eoreq	r2, fp, #0, 14
     d44:	20040000 	andcs	r0, r4, r0
     d48:	20000f70 	andcs	r0, r0, r0, ror pc
     d4c:	00000018 	andeq	r0, r0, r8, lsl r0
     d50:	78279c01 	stmdavc	r7!, {r0, sl, fp, ip, pc}
     d54:	0400000c 	streq	r0, [r0], #-12
     d58:	0000000d 	andeq	r0, r0, sp
     d5c:	00000c20 	andeq	r0, r0, r0, lsr #24
     d60:	289c0100 	ldmcs	ip, {r8}
     d64:	00000215 	andeq	r0, r0, r5, lsl r2
     d68:	0da80203 	sfmeq	f0, 4, [r8, #12]!
     d6c:	01c82000 	biceq	r2, r8, r0
     d70:	9c010000 	stcls	0, cr0, [r1], {-0}
     d74:	00000d87 	andeq	r0, r0, r7, lsl #27
     d78:	000e1d1a 	andeq	r1, lr, sl, lsl sp
     d7c:	b1050300 	mrslt	r0, SP_abt
     d80:	0200000a 	andeq	r0, r0, #10
     d84:	29007091 	stmdbcs	r0, {r0, r4, r7, ip, sp, lr}
     d88:	00000afd 	strdeq	r0, [r0], -sp
     d8c:	880c5e02 	stmdahi	ip, {r1, r9, sl, fp, ip, lr}
     d90:	2020000d 	eorcs	r0, r0, sp
     d94:	01000000 	mrseq	r0, (UNDEF: 0)
     d98:	000dad9c 	muleq	sp, ip, sp
     d9c:	0f412a00 	svceq	0x00412a00
     da0:	5e020000 	cdppl	0, 0, cr0, cr2, cr0, {0}
     da4:	0002d10c 	andeq	sp, r2, ip, lsl #2
     da8:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
     dac:	0aae2b00 	beq	feb8b9b4 <GPIO_Ports+0xdeb89230>
     db0:	3c020000 	stccc	0, cr0, [r2], {-0}
     db4:	0006750c 	andeq	r7, r6, ip, lsl #10
     db8:	000d4400 	andeq	r4, sp, r0, lsl #8
     dbc:	00004420 	andeq	r4, r0, r0, lsr #8
     dc0:	e69c0100 	ldr	r0, [ip], r0, lsl #2
     dc4:	2a00000d 	bcs	e00 <startup-0x1ffff200>
     dc8:	00000f41 	andeq	r0, r0, r1, asr #30
     dcc:	d10c3c02 	tstle	ip, r2, lsl #24
     dd0:	02000002 	andeq	r0, r0, #2
     dd4:	752c6f91 	strvc	r6, [ip, #-3985]!	; 0xfffff06f
     dd8:	0200000f 	andeq	r0, r0, #15
     ddc:	06750c3e 			; <UNDEFINED> instruction: 0x06750c3e
     de0:	91020000 	mrsls	r0, (UNDEF: 2)
     de4:	842d0077 	strthi	r0, [sp], #-119	; 0xffffff89
     de8:	02000006 	andeq	r0, r0, #6
     dec:	0d280c28 	stceq	12, cr0, [r8, #-160]!	; 0xffffff60
     df0:	001c2000 	andseq	r2, ip, r0
     df4:	9c010000 	stcls	0, cr0, [r1], {-0}
     df8:	0009ed2b 	andeq	lr, r9, fp, lsr #26
     dfc:	0bfb0200 	bleq	ffec1604 <GPIO_Ports+0xdfebee80>
     e00:	00000669 	andeq	r0, r0, r9, ror #12
     e04:	20000ca4 	andcs	r0, r0, r4, lsr #25
     e08:	00000084 	andeq	r0, r0, r4, lsl #1
     e0c:	0e4f9c01 	cdpeq	12, 4, cr9, cr15, cr1, {0}
     e10:	a52a0000 	strge	r0, [sl, #-0]!
     e14:	0200000a 	andeq	r0, r0, #10
     e18:	02d10bfb 	sbcseq	r0, r1, #257024	; 0x3ec00
     e1c:	91020000 	mrsls	r0, (UNDEF: 2)
     e20:	6d742e67 	ldclvs	14, cr2, [r4, #-412]!	; 0xfffffe64
     e24:	fd020070 	stc2	0, cr0, [r2, #-448]	; 0xfffffe40
     e28:	00030b0b 	andeq	r0, r3, fp, lsl #22
     e2c:	6c910200 	lfmvs	f0, 4, [r1], {0}
     e30:	000b672c 	andeq	r6, fp, ip, lsr #14
     e34:	0bfe0200 	bleq	fff8163c <GPIO_Ports+0xdff7eeb8>
     e38:	0000030b 	andeq	r0, r0, fp, lsl #6
     e3c:	2c749102 	ldfcsp	f1, [r4], #-8
     e40:	00000f75 	andeq	r0, r0, r5, ror pc
     e44:	690bff02 	stmdbvs	fp, {r1, r8, r9, sl, fp, ip, sp, lr, pc}
     e48:	02000006 	andeq	r0, r0, #6
     e4c:	29007391 	stmdbcs	r0, {r0, r4, r7, r8, r9, ip, sp, lr}
     e50:	00000a20 	andeq	r0, r0, r0, lsr #20
     e54:	540bd602 	strpl	sp, [fp], #-1538	; 0xfffff9fe
     e58:	5020000c 	eorpl	r0, r0, ip
     e5c:	01000000 	mrseq	r0, (UNDEF: 0)
     e60:	000e849c 	muleq	lr, ip, r4
     e64:	0f412a00 	svceq	0x00412a00
     e68:	d6020000 	strle	r0, [r2], -r0
     e6c:	0002d10b 	andeq	sp, r2, fp, lsl #2
     e70:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
     e74:	000adc2a 	andeq	sp, sl, sl, lsr #24
     e78:	0bd60200 	bleq	ff581680 <GPIO_Ports+0xdf57eefc>
     e7c:	0000069c 	muleq	r0, ip, r6
     e80:	00769102 	rsbseq	r9, r6, r2, lsl #2
     e84:	000d6729 	andeq	r6, sp, r9, lsr #14
     e88:	0a9e0200 	beq	fe781690 <GPIO_Ports+0xde77ef0c>
     e8c:	20000c18 	andcs	r0, r0, r8, lsl ip
     e90:	0000003c 	andeq	r0, r0, ip, lsr r0
     e94:	0eaa9c01 	cdpeq	12, 10, cr9, cr10, cr1, {0}
     e98:	332a0000 			; <UNDEFINED> instruction: 0x332a0000
     e9c:	02000001 	andeq	r0, r0, #1
     ea0:	02d10a9e 	sbcseq	r0, r1, #647168	; 0x9e000
     ea4:	91020000 	mrsls	r0, (UNDEF: 2)
     ea8:	d0290077 	eorle	r0, r9, r7, ror r0
     eac:	02000000 	andeq	r0, r0, #0
     eb0:	0bd80a86 	bleq	ff6038d0 <GPIO_Ports+0xdf60114c>
     eb4:	00402000 	subeq	r2, r0, r0
     eb8:	9c010000 	stcls	0, cr0, [r1], {-0}
     ebc:	00000edf 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
     ec0:	000b712a 	andeq	r7, fp, sl, lsr #2
     ec4:	0a860200 	beq	fe1816cc <GPIO_Ports+0xde17ef48>
     ec8:	0000030b 	andeq	r0, r0, fp, lsl #6
     ecc:	2a749102 	bcs	1d252dc <startup-0x1e2dad24>
     ed0:	00000adc 	ldrdeq	r0, [r0], -ip
     ed4:	9c0a8602 	stcls	6, cr8, [sl], {2}
     ed8:	02000006 	andeq	r0, r0, #6
     edc:	29007391 	stmdbcs	r0, {r0, r4, r7, r8, r9, ip, sp, lr}
     ee0:	00000f8d 	andeq	r0, r0, sp, lsl #31
     ee4:	980a5202 	stmdals	sl, {r1, r9, ip, lr}
     ee8:	4020000b 	eormi	r0, r0, fp
     eec:	01000000 	mrseq	r0, (UNDEF: 0)
     ef0:	000f149c 	muleq	pc, ip, r4	; <UNPREDICTABLE>
     ef4:	0a742a00 	beq	1d0b6fc <startup-0x1e2f4904>
     ef8:	52020000 	andpl	r0, r2, #0
     efc:	00030b0a 	andeq	r0, r3, sl, lsl #22
     f00:	74910200 	ldrvc	r0, [r1], #512	; 0x200
     f04:	000adc2a 	andeq	sp, sl, sl, lsr #24
     f08:	0a520200 	beq	1481710 <startup-0x1eb7e8f0>
     f0c:	0000069c 	muleq	r0, ip, r6
     f10:	00739102 	rsbseq	r9, r3, r2, lsl #2
     f14:	0004cc29 	andeq	ip, r4, r9, lsr #24
     f18:	0a190200 	beq	641720 <startup-0x1f9be8e0>
     f1c:	20000b58 	andcs	r0, r0, r8, asr fp
     f20:	00000040 	andeq	r0, r0, r0, asr #32
     f24:	0f499c01 	svceq	0x00499c01
     f28:	2b2a0000 	blcs	a80f30 <startup-0x1f57f0d0>
     f2c:	02000003 	andeq	r0, r0, #3
     f30:	030b0a19 	movweq	r0, #47641	; 0xba19
     f34:	91020000 	mrsls	r0, (UNDEF: 2)
     f38:	0adc2a74 	beq	ff70b910 <GPIO_Ports+0xdf70918c>
     f3c:	19020000 	stmdbne	r2, {}	; <UNPREDICTABLE>
     f40:	00069c0a 	andeq	r9, r6, sl, lsl #24
     f44:	73910200 	orrsvc	r0, r1, #0, 4
     f48:	00ed2900 	rsceq	r2, sp, r0, lsl #18
     f4c:	fb020000 	blx	80f56 <startup-0x1ff7f0aa>
     f50:	000b1809 	andeq	r1, fp, r9, lsl #16
     f54:	00004020 	andeq	r4, r0, r0, lsr #32
     f58:	7e9c0100 	fmlvce	f0, f4, f0
     f5c:	2a00000f 	bcs	fa0 <startup-0x1ffff060>
     f60:	0000105e 	andeq	r1, r0, lr, asr r0
     f64:	0b09fb02 	bleq	27fb74 <startup-0x1fd8048c>
     f68:	02000003 	andeq	r0, r0, #3
     f6c:	dc2a7491 	cfstrsle	mvf7, [sl], #-580	; 0xfffffdbc
     f70:	0200000a 	andeq	r0, r0, #10
     f74:	069c09fb 			; <UNDEFINED> instruction: 0x069c09fb
     f78:	91020000 	mrsls	r0, (UNDEF: 2)
     f7c:	df290073 	svcle	0x00290073
     f80:	0200000f 	andeq	r0, r0, #15
     f84:	0ad809db 	beq	ff6036f8 <GPIO_Ports+0xdf600f74>
     f88:	00402000 	subeq	r2, r0, r0
     f8c:	9c010000 	stcls	0, cr0, [r1], {-0}
     f90:	00000fb3 			; <UNDEFINED> instruction: 0x00000fb3
     f94:	000e3b2a 	andeq	r3, lr, sl, lsr #22
     f98:	09db0200 	ldmibeq	fp, {r9}^
     f9c:	0000030b 	andeq	r0, r0, fp, lsl #6
     fa0:	2a749102 	bcs	1d253b0 <startup-0x1e2dac50>
     fa4:	00000adc 	ldrdeq	r0, [r0], -ip
     fa8:	9c09db02 			; <UNDEFINED> instruction: 0x9c09db02
     fac:	02000006 	andeq	r0, r0, #6
     fb0:	29007391 	stmdbcs	r0, {r0, r4, r7, r8, r9, ip, sp, lr}
     fb4:	000004aa 	andeq	r0, r0, sl, lsr #9
     fb8:	9809aa02 	stmdals	r9, {r1, r9, fp, sp, pc}
     fbc:	4020000a 	eormi	r0, r0, sl
     fc0:	01000000 	mrseq	r0, (UNDEF: 0)
     fc4:	000fe89c 	muleq	pc, ip, r8	; <UNPREDICTABLE>
     fc8:	0b712a00 	bleq	1c4b7d0 <startup-0x1e3b4830>
     fcc:	aa020000 	bge	80fd4 <startup-0x1ff7f02c>
     fd0:	00030b09 	andeq	r0, r3, r9, lsl #22
     fd4:	74910200 	ldrvc	r0, [r1], #512	; 0x200
     fd8:	000adc2a 	andeq	sp, sl, sl, lsr #24
     fdc:	09aa0200 	stmibeq	sl!, {r9}
     fe0:	0000069c 	muleq	r0, ip, r6
     fe4:	00739102 	rsbseq	r9, r3, r2, lsl #2
     fe8:	00011c29 	andeq	r1, r1, r9, lsr #24
     fec:	097b0200 	ldmdbeq	fp!, {r9}^
     ff0:	20000a58 	andcs	r0, r0, r8, asr sl
     ff4:	00000040 	andeq	r0, r0, r0, asr #32
     ff8:	101d9c01 	andsne	r9, sp, r1, lsl #24
     ffc:	742a0000 	strtvc	r0, [sl], #-0
    1000:	0200000a 	andeq	r0, r0, #10
    1004:	030b097b 	movweq	r0, #47483	; 0xb97b
    1008:	91020000 	mrsls	r0, (UNDEF: 2)
    100c:	0adc2a74 	beq	ff70b9e4 <GPIO_Ports+0xdf709260>
    1010:	7b020000 	blvc	81018 <startup-0x1ff7efe8>
    1014:	00069c09 	andeq	r9, r6, r9, lsl #24
    1018:	73910200 	orrsvc	r0, r1, #0, 4
    101c:	026f2900 	rsbeq	r2, pc, #0, 18
    1020:	45020000 	strmi	r0, [r2, #-0]
    1024:	000a1809 	andeq	r1, sl, r9, lsl #16
    1028:	00004020 	andeq	r4, r0, r0, lsr #32
    102c:	529c0100 	addspl	r0, ip, #0, 2
    1030:	2a000010 	bcs	1078 <startup-0x1fffef88>
    1034:	0000032b 	andeq	r0, r0, fp, lsr #6
    1038:	0b094502 	bleq	252448 <startup-0x1fdadbb8>
    103c:	02000003 	andeq	r0, r0, #3
    1040:	dc2a7491 	cfstrsle	mvf7, [sl], #-580	; 0xfffffdbc
    1044:	0200000a 	andeq	r0, r0, #10
    1048:	069c0945 	ldreq	r0, [ip], r5, asr #18
    104c:	91020000 	mrsls	r0, (UNDEF: 2)
    1050:	65290073 	strvs	r0, [r9, #-115]!	; 0xffffff8d
    1054:	02000011 	andeq	r0, r0, #17
    1058:	09d8092a 	ldmibeq	r8, {r1, r3, r5, r8, fp}^
    105c:	00402000 	subeq	r2, r0, r0
    1060:	9c010000 	stcls	0, cr0, [r1], {-0}
    1064:	00001087 	andeq	r1, r0, r7, lsl #1
    1068:	00105e2a 	andseq	r5, r0, sl, lsr #28
    106c:	092a0200 	stmdbeq	sl!, {r9}
    1070:	0000030b 	andeq	r0, r0, fp, lsl #6
    1074:	2a749102 	bcs	1d25484 <startup-0x1e2dab7c>
    1078:	00000adc 	ldrdeq	r0, [r0], -ip
    107c:	9c092a02 			; <UNDEFINED> instruction: 0x9c092a02
    1080:	02000006 	andeq	r0, r0, #6
    1084:	29007391 	stmdbcs	r0, {r0, r4, r7, r8, r9, ip, sp, lr}
    1088:	00000ebc 			; <UNDEFINED> instruction: 0x00000ebc
    108c:	98090d02 	stmdals	r9, {r1, r8, sl, fp}
    1090:	40200009 	eormi	r0, r0, r9
    1094:	01000000 	mrseq	r0, (UNDEF: 0)
    1098:	0010bc9c 	mulseq	r0, ip, ip
    109c:	0e3b2a00 	vaddeq.f32	s4, s22, s0
    10a0:	0d020000 	stceq	0, cr0, [r2, #-0]
    10a4:	00030b09 	andeq	r0, r3, r9, lsl #22
    10a8:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    10ac:	000adc2a 	andeq	sp, sl, sl, lsr #24
    10b0:	090d0200 	stmdbeq	sp, {r9}
    10b4:	0000069c 	muleq	r0, ip, r6
    10b8:	00739102 	rsbseq	r9, r3, r2, lsl #2
    10bc:	0007de29 	andeq	sp, r7, r9, lsr #28
    10c0:	08e30200 	stmiaeq	r3!, {r9}^
    10c4:	20000958 	andcs	r0, r0, r8, asr r9
    10c8:	00000040 	andeq	r0, r0, r0, asr #32
    10cc:	10f19c01 	rscsne	r9, r1, r1, lsl #24
    10d0:	712a0000 			; <UNDEFINED> instruction: 0x712a0000
    10d4:	0200000b 	andeq	r0, r0, #11
    10d8:	030b08e3 	movweq	r0, #47331	; 0xb8e3
    10dc:	91020000 	mrsls	r0, (UNDEF: 2)
    10e0:	0adc2a74 	beq	ff70bab8 <GPIO_Ports+0xdf709334>
    10e4:	e3020000 	movw	r0, #8192	; 0x2000
    10e8:	00069c08 	andeq	r9, r6, r8, lsl #24
    10ec:	73910200 	orrsvc	r0, r1, #0, 4
    10f0:	03af2900 			; <UNDEFINED> instruction: 0x03af2900
    10f4:	af020000 	svcge	0x00020000
    10f8:	00091808 	andeq	r1, r9, r8, lsl #16
    10fc:	00004020 	andeq	r4, r0, r0, lsr #32
    1100:	269c0100 	ldrcs	r0, [ip], r0, lsl #2
    1104:	2a000011 	bcs	1150 <startup-0x1fffeeb0>
    1108:	00000a74 	andeq	r0, r0, r4, ror sl
    110c:	0b08af02 	bleq	22cd1c <startup-0x1fdd32e4>
    1110:	02000003 	andeq	r0, r0, #3
    1114:	dc2a7491 	cfstrsle	mvf7, [sl], #-580	; 0xfffffdbc
    1118:	0200000a 	andeq	r0, r0, #10
    111c:	069c08af 	ldreq	r0, [ip], pc, lsr #17
    1120:	91020000 	mrsls	r0, (UNDEF: 2)
    1124:	fd290073 	stc2	0, cr0, [r9, #-460]!	; 0xfffffe34
    1128:	0200000b 	andeq	r0, r0, #11
    112c:	08d80876 	ldmeq	r8, {r1, r2, r4, r5, r6, fp}^
    1130:	00402000 	subeq	r2, r0, r0
    1134:	9c010000 	stcls	0, cr0, [r1], {-0}
    1138:	0000115b 	andeq	r1, r0, fp, asr r1
    113c:	00032b2a 	andeq	r2, r3, sl, lsr #22
    1140:	08760200 	ldmdaeq	r6!, {r9}^
    1144:	0000030b 	andeq	r0, r0, fp, lsl #6
    1148:	2a749102 	bcs	1d25558 <startup-0x1e2daaa8>
    114c:	00000adc 	ldrdeq	r0, [r0], -ip
    1150:	9c087602 	stcls	6, cr7, [r8], {2}
    1154:	02000006 	andeq	r0, r0, #6
    1158:	29007391 	stmdbcs	r0, {r0, r4, r7, r8, r9, ip, sp, lr}
    115c:	00000157 	andeq	r0, r0, r7, asr r1
    1160:	98085802 	stmdals	r8, {r1, fp, ip, lr}
    1164:	40200008 	eormi	r0, r0, r8
    1168:	01000000 	mrseq	r0, (UNDEF: 0)
    116c:	0011909c 	mulseq	r1, ip, r0
    1170:	105e2a00 	subsne	r2, lr, r0, lsl #20
    1174:	58020000 	stmdapl	r2, {}	; <UNPREDICTABLE>
    1178:	00030b08 	andeq	r0, r3, r8, lsl #22
    117c:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    1180:	000adc2a 	andeq	sp, sl, sl, lsr #24
    1184:	08580200 	ldmdaeq	r8, {r9}^
    1188:	0000069c 	muleq	r0, ip, r6
    118c:	00739102 	rsbseq	r9, r3, r2, lsl #2
    1190:	00109229 	andseq	r9, r0, r9, lsr #4
    1194:	08380200 	ldmdaeq	r8!, {r9}
    1198:	20000858 	andcs	r0, r0, r8, asr r8
    119c:	00000040 	andeq	r0, r0, r0, asr #32
    11a0:	11c59c01 	bicne	r9, r5, r1, lsl #24
    11a4:	3b2a0000 	blcc	a811ac <startup-0x1f57ee54>
    11a8:	0200000e 	andeq	r0, r0, #14
    11ac:	030b0838 	movweq	r0, #47160	; 0xb838
    11b0:	91020000 	mrsls	r0, (UNDEF: 2)
    11b4:	0adc2a74 	beq	ff70bb8c <GPIO_Ports+0xdf709408>
    11b8:	38020000 	stmdacc	r2, {}	; <UNPREDICTABLE>
    11bc:	00069c08 	andeq	r9, r6, r8, lsl #24
    11c0:	73910200 	orrsvc	r0, r1, #0, 4
    11c4:	0b2e2900 	bleq	b8b5cc <startup-0x1f474a34>
    11c8:	0e020000 	cdpeq	0, 0, cr0, cr2, cr0, {0}
    11cc:	00083c08 	andeq	r3, r8, r8, lsl #24
    11d0:	00001c20 	andeq	r1, r0, r0, lsr #24
    11d4:	eb9c0100 	bl	fe7015dc <GPIO_Ports+0xde6fee58>
    11d8:	2a000011 	bcs	1224 <startup-0x1fffeddc>
    11dc:	00001146 	andeq	r1, r0, r6, asr #2
    11e0:	0b080e02 	bleq	2049f0 <startup-0x1fdfb610>
    11e4:	02000003 	andeq	r0, r0, #3
    11e8:	29007491 	stmdbcs	r0, {r0, r4, r7, sl, ip, sp, lr}
    11ec:	0000023b 	andeq	r0, r0, fp, lsr r2
    11f0:	00078e02 	andeq	r8, r7, r2, lsl #28
    11f4:	3c200008 	stccc	0, cr0, [r0], #-32	; 0xffffffe0
    11f8:	01000000 	mrseq	r0, (UNDEF: 0)
    11fc:	0012209c 	mulseq	r2, ip, r0
    1200:	08042a00 	stmdaeq	r4, {r9, fp, sp}
    1204:	8e020000 	cdphi	0, 0, cr0, cr2, cr0, {0}
    1208:	00030b07 	andeq	r0, r3, r7, lsl #22
    120c:	6c910200 	lfmvs	f0, 4, [r1], {0}
    1210:	000e0c2c 	andeq	r0, lr, ip, lsr #24
    1214:	07900200 	ldreq	r0, [r0, r0, lsl #4]
    1218:	0000030b 	andeq	r0, r0, fp, lsl #6
    121c:	00749102 	rsbseq	r9, r4, r2, lsl #2
    1220:	0001fb29 	andeq	pc, r1, r9, lsr #22
    1224:	072b0200 	streq	r0, [fp, -r0, lsl #4]!
    1228:	200007c0 	andcs	r0, r0, r0, asr #15
    122c:	00000040 	andeq	r0, r0, r0, asr #32
    1230:	12559c01 	subsne	r9, r5, #256	; 0x100
    1234:	f52a0000 			; <UNDEFINED> instruction: 0xf52a0000
    1238:	02000007 	andeq	r0, r0, #7
    123c:	030b072b 	movweq	r0, #46891	; 0xb72b
    1240:	91020000 	mrsls	r0, (UNDEF: 2)
    1244:	0e0c2c6c 	cdpeq	12, 0, cr2, cr12, cr12, {3}
    1248:	2d020000 	stccs	0, cr0, [r2, #-0]
    124c:	00030b07 	andeq	r0, r3, r7, lsl #22
    1250:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    1254:	09682900 	stmdbeq	r8!, {r8, fp, sp}^
    1258:	0b020000 	bleq	81260 <startup-0x1ff7eda0>
    125c:	00078407 	andeq	r8, r7, r7, lsl #8
    1260:	00003c20 	andeq	r3, r0, r0, lsr #24
    1264:	8a9c0100 	bhi	fe70166c <GPIO_Ports+0xde6feee8>
    1268:	2a000012 	bcs	12b8 <startup-0x1fffed48>
    126c:	0000030f 	andeq	r0, r0, pc, lsl #6
    1270:	0b070b02 	bleq	1c3e80 <startup-0x1fe3c180>
    1274:	02000003 	andeq	r0, r0, #3
    1278:	0c2c6c91 	stceq	12, cr6, [ip], #-580	; 0xfffffdbc
    127c:	0200000e 	andeq	r0, r0, #14
    1280:	030b070d 	movweq	r0, #46861	; 0xb70d
    1284:	91020000 	mrsls	r0, (UNDEF: 2)
    1288:	d2290074 	eorle	r0, r9, #116	; 0x74
    128c:	02000002 	andeq	r0, r0, #2
    1290:	074806ea 	strbeq	r0, [r8, -sl, ror #13]
    1294:	003c2000 	eorseq	r2, ip, r0
    1298:	9c010000 	stcls	0, cr0, [r1], {-0}
    129c:	000012bf 			; <UNDEFINED> instruction: 0x000012bf
    12a0:	0008132a 	andeq	r1, r8, sl, lsr #6
    12a4:	06ea0200 	strbteq	r0, [sl], r0, lsl #4
    12a8:	0000030b 	andeq	r0, r0, fp, lsl #6
    12ac:	2c6c9102 	stfcsp	f1, [ip], #-8
    12b0:	00000e0c 	andeq	r0, r0, ip, lsl #28
    12b4:	0b06ec02 	bleq	1bc2c4 <startup-0x1fe43d3c>
    12b8:	02000003 	andeq	r0, r0, #3
    12bc:	29007491 	stmdbcs	r0, {r0, r4, r7, sl, ip, sp, lr}
    12c0:	000006ce 	andeq	r0, r0, lr, asr #13
    12c4:	0c06c602 	stceq	6, cr12, [r6], {2}
    12c8:	3c200007 	stccc	0, cr0, [r0], #-28	; 0xffffffe4
    12cc:	01000000 	mrseq	r0, (UNDEF: 0)
    12d0:	0012f49c 	mulseq	r2, ip, r4
    12d4:	0b432a00 	bleq	10cbadc <startup-0x1ef34524>
    12d8:	c6020000 	strgt	r0, [r2], -r0
    12dc:	00030b06 	andeq	r0, r3, r6, lsl #22
    12e0:	6c910200 	lfmvs	f0, 4, [r1], {0}
    12e4:	000e0c2c 	andeq	r0, lr, ip, lsr #24
    12e8:	06c80200 	strbeq	r0, [r8], r0, lsl #4
    12ec:	0000030b 	andeq	r0, r0, fp, lsl #6
    12f0:	00749102 	rsbseq	r9, r4, r2, lsl #2
    12f4:	00005729 	andeq	r5, r0, r9, lsr #14
    12f8:	06ab0200 	strteq	r0, [fp], r0, lsl #4
    12fc:	200006f0 	strdcs	r0, [r0], -r0	; <UNPREDICTABLE>
    1300:	0000001c 	andeq	r0, r0, ip, lsl r0
    1304:	131a9c01 	tstne	sl, #256	; 0x100
    1308:	b12a0000 			; <UNDEFINED> instruction: 0xb12a0000
    130c:	02000008 	andeq	r0, r0, #8
    1310:	030b06ab 	movweq	r0, #46763	; 0xb6ab
    1314:	91020000 	mrsls	r0, (UNDEF: 2)
    1318:	3e290074 	mcrcc	0, 1, r0, cr9, cr4, {3}
    131c:	0200000c 	andeq	r0, r0, #12
    1320:	06d005ef 	ldrbeq	r0, [r0], pc, ror #11
    1324:	00202000 	eoreq	r2, r0, r0
    1328:	9c010000 	stcls	0, cr0, [r1], {-0}
    132c:	00001340 	andeq	r1, r0, r0, asr #6
    1330:	000adc2a 	andeq	sp, sl, sl, lsr #24
    1334:	05ef0200 	strbeq	r0, [pc, #512]!	; 153c <startup-0x1fffeac4>
    1338:	0000069c 	muleq	r0, ip, r6
    133c:	00779102 	rsbseq	r9, r7, r2, lsl #2
    1340:	00102b29 	andseq	r2, r0, r9, lsr #22
    1344:	05de0200 	ldrbeq	r0, [lr, #512]	; 0x200
    1348:	200006b0 			; <UNDEFINED> instruction: 0x200006b0
    134c:	00000020 	andeq	r0, r0, r0, lsr #32
    1350:	13669c01 	cmnne	r6, #256	; 0x100
    1354:	dc2a0000 	stcle	0, cr0, [sl], #-0
    1358:	0200000a 	andeq	r0, r0, #10
    135c:	069c05de 			; <UNDEFINED> instruction: 0x069c05de
    1360:	91020000 	mrsls	r0, (UNDEF: 2)
    1364:	83290077 			; <UNDEFINED> instruction: 0x83290077
    1368:	0200000a 	andeq	r0, r0, #10
    136c:	065005be 			; <UNDEFINED> instruction: 0x065005be
    1370:	00602000 	rsbeq	r2, r0, r0
    1374:	9c010000 	stcls	0, cr0, [r1], {-0}
    1378:	0000139b 	muleq	r0, fp, r3
    137c:	0001462a 	andeq	r4, r1, sl, lsr #12
    1380:	05be0200 	ldreq	r0, [lr, #512]!	; 0x200
    1384:	0000030b 	andeq	r0, r0, fp, lsl #6
    1388:	2c6c9102 	stfcsp	f1, [ip], #-8
    138c:	00000e0c 	andeq	r0, r0, ip, lsl #28
    1390:	0b05c002 	bleq	1713a0 <startup-0x1fe8ec60>
    1394:	02000003 	andeq	r0, r0, #3
    1398:	2f007491 	svccs	0x00007491
    139c:	00000068 	andeq	r0, r0, r8, rrx
    13a0:	f8052502 			; <UNDEFINED> instruction: 0xf8052502
    13a4:	58200004 	stmdapl	r0!, {r2}
    13a8:	01000001 	tsteq	r0, r1
    13ac:	00141b9c 	mulseq	r4, ip, fp
    13b0:	09ff2a00 	ldmibeq	pc!, {r9, fp, sp}^	; <UNPREDICTABLE>
    13b4:	25020000 	strcs	r0, [r2, #-0]
    13b8:	00141b05 	andseq	r1, r4, r5, lsl #22
    13bc:	5c910200 	lfmpl	f0, 4, [r1], {0}
    13c0:	706d742e 	rsbvc	r7, sp, lr, lsr #8
    13c4:	05270200 	streq	r0, [r7, #-512]!	; 0xfffffe00
    13c8:	0000030b 	andeq	r0, r0, fp, lsl #6
    13cc:	2c709102 	ldfcsp	f1, [r0], #-8
    13d0:	0000115f 	andeq	r1, r0, pc, asr r1
    13d4:	0b052702 	bleq	14afe4 <startup-0x1feb501c>
    13d8:	02000003 	andeq	r0, r0, #3
    13dc:	862c6c91 			; <UNDEFINED> instruction: 0x862c6c91
    13e0:	0200000f 	andeq	r0, r0, #15
    13e4:	030b0527 	movweq	r0, #46375	; 0xb527
    13e8:	91020000 	mrsls	r0, (UNDEF: 2)
    13ec:	00002c74 	andeq	r2, r0, r4, ror ip
    13f0:	27020000 	strcs	r0, [r2, -r0]
    13f4:	00030b05 	andeq	r0, r3, r5, lsl #22
    13f8:	68910200 	ldmvs	r1, {r9}
    13fc:	0005b52c 	andeq	fp, r5, ip, lsr #10
    1400:	05270200 	streq	r0, [r7, #-512]!	; 0xfffffe00
    1404:	0000030b 	andeq	r0, r0, fp, lsl #6
    1408:	2c649102 	stfcsp	f1, [r4], #-8
    140c:	000011d3 	ldrdeq	r1, [r0], -r3
    1410:	0b052702 	bleq	14b020 <startup-0x1feb4fe0>
    1414:	02000003 	andeq	r0, r0, #3
    1418:	1e006091 	mcrne	0, 0, r6, cr0, cr1, {4}
    141c:	00098404 	andeq	r8, r9, r4, lsl #8
    1420:	02ab2900 	adceq	r2, fp, #0, 18
    1424:	f1020000 	cps	#0
    1428:	0004bc04 	andeq	fp, r4, r4, lsl #24
    142c:	00003c20 	andeq	r3, r0, r0, lsr #24
    1430:	569c0100 	ldrpl	r0, [ip], r0, lsl #2
    1434:	2a000014 	bcs	148c <startup-0x1fffeb74>
    1438:	00000187 	andeq	r0, r0, r7, lsl #3
    143c:	0b04f102 	bleq	13d84c <startup-0x1fec27b4>
    1440:	02000003 	andeq	r0, r0, #3
    1444:	0c2c6c91 	stceq	12, cr6, [ip], #-580	; 0xfffffdbc
    1448:	0200000e 	andeq	r0, r0, #14
    144c:	030b04f3 	movweq	r0, #46323	; 0xb4f3
    1450:	91020000 	mrsls	r0, (UNDEF: 2)
    1454:	dd290074 	stcle	0, cr0, [r9, #-464]!	; 0xfffffe30
    1458:	02000008 	andeq	r0, r0, #8
    145c:	048404d2 	streq	r0, [r4], #1234	; 0x4d2
    1460:	00382000 	eorseq	r2, r8, r0
    1464:	9c010000 	stcls	0, cr0, [r1], {-0}
    1468:	0000148b 	andeq	r1, r0, fp, lsl #9
    146c:	0001872a 	andeq	r8, r1, sl, lsr #14
    1470:	04d20200 	ldrbeq	r0, [r2], #512	; 0x200
    1474:	0000030b 	andeq	r0, r0, fp, lsl #6
    1478:	2c6c9102 	stfcsp	f1, [ip], #-8
    147c:	00000e0c 	andeq	r0, r0, ip, lsl #28
    1480:	0b04d402 	bleq	136490 <startup-0x1fec9b70>
    1484:	02000003 	andeq	r0, r0, #3
    1488:	29007491 	stmdbcs	r0, {r0, r4, r7, sl, ip, sp, lr}
    148c:	00000675 	andeq	r0, r0, r5, ror r6
    1490:	5004b302 	andpl	fp, r4, r2, lsl #6
    1494:	34200004 	strtcc	r0, [r0], #-4
    1498:	01000000 	mrseq	r0, (UNDEF: 0)
    149c:	0014c09c 	mulseq	r4, ip, r0
    14a0:	057b2a00 	ldrbeq	r2, [fp, #-2560]!	; 0xfffff600
    14a4:	b3020000 	movwlt	r0, #8192	; 0x2000
    14a8:	00030b04 	andeq	r0, r3, r4, lsl #22
    14ac:	6c910200 	lfmvs	f0, 4, [r1], {0}
    14b0:	000e0c2c 	andeq	r0, lr, ip, lsr #24
    14b4:	04b50200 	ldrteq	r0, [r5], #512	; 0x200
    14b8:	0000030b 	andeq	r0, r0, fp, lsl #6
    14bc:	00749102 	rsbseq	r9, r4, r2, lsl #2
    14c0:	0002f130 	andeq	pc, r2, r0, lsr r1	; <UNPREDICTABLE>
    14c4:	049a0200 	ldreq	r0, [sl], #512	; 0x200
    14c8:	000002d1 	ldrdeq	r0, [r0], -r1
    14cc:	20000434 	andcs	r0, r0, r4, lsr r4
    14d0:	0000001c 	andeq	r0, r0, ip, lsl r0
    14d4:	92299c01 	eorls	r9, r9, #256	; 0x100
    14d8:	02000011 	andeq	r0, r0, #17
    14dc:	0400047d 	streq	r0, [r0], #-1149	; 0xfffffb83
    14e0:	00342000 	eorseq	r2, r4, r0
    14e4:	9c010000 	stcls	0, cr0, [r1], {-0}
    14e8:	0000150b 	andeq	r1, r0, fp, lsl #10
    14ec:	00037e2a 	andeq	r7, r3, sl, lsr #28
    14f0:	047d0200 	ldrbteq	r0, [sp], #-512	; 0xfffffe00
    14f4:	0000030b 	andeq	r0, r0, fp, lsl #6
    14f8:	2c6c9102 	stfcsp	f1, [ip], #-8
    14fc:	00000e0c 	andeq	r0, r0, ip, lsl #28
    1500:	0b047f02 	bleq	121110 <startup-0x1fedeef0>
    1504:	02000003 	andeq	r0, r0, #3
    1508:	29007491 	stmdbcs	r0, {r0, r4, r7, sl, ip, sp, lr}
    150c:	0000089d 	muleq	r0, sp, r8
    1510:	c403b502 	strgt	fp, [r3], #-1282	; 0xfffffafe
    1514:	3c200003 	stccc	0, cr0, [r0], #-12
    1518:	01000000 	mrseq	r0, (UNDEF: 0)
    151c:	00154f9c 	mulseq	r5, ip, pc	; <UNPREDICTABLE>
    1520:	0c802a00 	vstmiaeq	r0, {s4-s3}
    1524:	b5020000 	strlt	r0, [r2, #-0]
    1528:	00030b03 	andeq	r0, r3, r3, lsl #22
    152c:	6c910200 	lfmvs	f0, 4, [r1], {0}
    1530:	0003532a 	andeq	r5, r3, sl, lsr #6
    1534:	03b50200 			; <UNDEFINED> instruction: 0x03b50200
    1538:	0000030b 	andeq	r0, r0, fp, lsl #6
    153c:	2c689102 	stfcsp	f1, [r8], #-8
    1540:	00000e0c 	andeq	r0, r0, ip, lsl #28
    1544:	0b03b702 	bleq	ef154 <startup-0x1ff10eac>
    1548:	02000003 	andeq	r0, r0, #3
    154c:	29007491 	stmdbcs	r0, {r0, r4, r7, sl, ip, sp, lr}
    1550:	0000076a 	andeq	r0, r0, sl, ror #14
    1554:	84038802 	strhi	r8, [r3], #-2050	; 0xfffff7fe
    1558:	40200003 	eormi	r0, r0, r3
    155c:	01000000 	mrseq	r0, (UNDEF: 0)
    1560:	0015939c 	mulseq	r5, ip, r3
    1564:	0bee2a00 	bleq	ffb8bd6c <GPIO_Ports+0xdfb895e8>
    1568:	88020000 	stmdahi	r2, {}	; <UNPREDICTABLE>
    156c:	00030b03 	andeq	r0, r3, r3, lsl #22
    1570:	6c910200 	lfmvs	f0, 4, [r1], {0}
    1574:	000d062a 	andeq	r0, sp, sl, lsr #12
    1578:	03880200 	orreq	r0, r8, #0, 4
    157c:	0000030b 	andeq	r0, r0, fp, lsl #6
    1580:	2c689102 	stfcsp	f1, [r8], #-8
    1584:	00000e0c 	andeq	r0, r0, ip, lsl #28
    1588:	0b038a02 	bleq	e3d98 <startup-0x1ff1c268>
    158c:	02000003 	andeq	r0, r0, #3
    1590:	29007491 	stmdbcs	r0, {r0, r4, r7, sl, ip, sp, lr}
    1594:	00000b13 	andeq	r0, r0, r3, lsl fp
    1598:	64036f02 	strvs	r6, [r3], #-3842	; 0xfffff0fe
    159c:	20200003 	eorcs	r0, r0, r3
    15a0:	01000000 	mrseq	r0, (UNDEF: 0)
    15a4:	0015b99c 	mulseq	r5, ip, r9
    15a8:	0adc2a00 	beq	ff70bdb0 <GPIO_Ports+0xdf70962c>
    15ac:	6f020000 	svcvs	0x00020000
    15b0:	00069c03 	andeq	r9, r6, r3, lsl #24
    15b4:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    15b8:	117c2900 	cmnne	ip, r0, lsl #18
    15bc:	5d020000 	stcpl	0, cr0, [r2, #-0]
    15c0:	00034403 	andeq	r4, r3, r3, lsl #8
    15c4:	00002020 	andeq	r2, r0, r0, lsr #32
    15c8:	df9c0100 	svcle	0x009c0100
    15cc:	2a000015 	bcs	1628 <startup-0x1fffe9d8>
    15d0:	00000adc 	ldrdeq	r0, [r0], -ip
    15d4:	9c035d02 	stcls	13, cr5, [r3], {2}
    15d8:	02000006 	andeq	r0, r0, #6
    15dc:	29007791 	stmdbcs	r0, {r0, r4, r7, r8, r9, sl, ip, sp, lr}
    15e0:	000006f4 	strdeq	r0, [r0], -r4
    15e4:	14034902 	strne	r4, [r3], #-2306	; 0xfffff6fe
    15e8:	30200003 	eorcc	r0, r0, r3
    15ec:	01000000 	mrseq	r0, (UNDEF: 0)
    15f0:	0016239c 	mulseq	r6, ip, r3
    15f4:	0bd62a00 	bleq	ff58bdfc <GPIO_Ports+0xdf589678>
    15f8:	49020000 	stmdbmi	r2, {}	; <UNPREDICTABLE>
    15fc:	00030b03 	andeq	r0, r3, r3, lsl #22
    1600:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    1604:	000bde2a 	andeq	sp, fp, sl, lsr #28
    1608:	03490200 	movteq	r0, #37376	; 0x9200
    160c:	0000030b 	andeq	r0, r0, fp, lsl #6
    1610:	2a709102 	bcs	1c25a20 <startup-0x1e3da5e0>
    1614:	00000be6 	andeq	r0, r0, r6, ror #23
    1618:	0b034902 	bleq	d3a28 <startup-0x1ff2c5d8>
    161c:	02000003 	andeq	r0, r0, #3
    1620:	29006c91 	stmdbcs	r0, {r0, r4, r7, sl, fp, sp, lr}
    1624:	00000179 	andeq	r0, r0, r9, ror r1
    1628:	f402dc02 			; <UNDEFINED> instruction: 0xf402dc02
    162c:	20200002 	eorcs	r0, r0, r2
    1630:	01000000 	mrseq	r0, (UNDEF: 0)
    1634:	0016499c 	mulseq	r6, ip, r9
    1638:	0adc2a00 	beq	ff70be40 <GPIO_Ports+0xdf7096bc>
    163c:	dc020000 	stcle	0, cr0, [r2], {-0}
    1640:	00069c02 	andeq	r9, r6, r2, lsl #24
    1644:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    1648:	10bc2900 	adcsne	r2, ip, r0, lsl #18
    164c:	51020000 	mrspl	r0, (UNDEF: 2)
    1650:	0002cc02 	andeq	ip, r2, r2, lsl #24
    1654:	00002820 	andeq	r2, r0, r0, lsr #16
    1658:	7e9c0100 	fmlvce	f0, f4, f0
    165c:	2a000016 	bcs	16bc <startup-0x1fffe944>
    1660:	00000fd7 	ldrdeq	r0, [r0], -r7
    1664:	0b025102 	bleq	95a74 <startup-0x1ff6a58c>
    1668:	02000003 	andeq	r0, r0, #3
    166c:	fc2a7491 	stc2	4, cr7, [sl], #-580	; 0xfffffdbc
    1670:	0200000f 	andeq	r0, r0, #15
    1674:	030b0251 	movweq	r0, #45649	; 0xb251
    1678:	91020000 	mrsls	r0, (UNDEF: 2)
    167c:	33290070 			; <UNDEFINED> instruction: 0x33290070
    1680:	0200000c 	andeq	r0, r0, #12
    1684:	02ac0233 	adceq	r0, ip, #805306371	; 0x30000003
    1688:	00202000 	eoreq	r2, r0, r0
    168c:	9c010000 	stcls	0, cr0, [r1], {-0}
    1690:	000016a4 	andeq	r1, r0, r4, lsr #13
    1694:	000adc2a 	andeq	sp, sl, sl, lsr #24
    1698:	02330200 	eorseq	r0, r3, #0, 4
    169c:	0000069c 	muleq	r0, ip, r6
    16a0:	00779102 	rsbseq	r9, r7, r2, lsl #2
    16a4:	0011c529 	andseq	ip, r1, r9, lsr #10
    16a8:	021b0200 	andseq	r0, fp, #0, 4
    16ac:	20000270 	andcs	r0, r0, r0, ror r2
    16b0:	0000003c 	andeq	r0, r0, ip, lsr r0
    16b4:	17069c01 	strne	r9, [r6, -r1, lsl #24]
    16b8:	a12a0000 			; <UNDEFINED> instruction: 0xa12a0000
    16bc:	02000003 	andeq	r0, r0, #3
    16c0:	030b021b 	movweq	r0, #45595	; 0xb21b
    16c4:	91020000 	mrsls	r0, (UNDEF: 2)
    16c8:	05962a74 	ldreq	r2, [r6, #2676]	; 0xa74
    16cc:	1b020000 	blne	816d4 <startup-0x1ff7e92c>
    16d0:	00030b02 	andeq	r0, r3, r2, lsl #22
    16d4:	70910200 	addsvc	r0, r1, r0, lsl #4
    16d8:	00059b2a 	andeq	r9, r5, sl, lsr #22
    16dc:	021b0200 	andseq	r0, fp, #0, 4
    16e0:	0000030b 	andeq	r0, r0, fp, lsl #6
    16e4:	2a6c9102 	bcs	1b25af4 <startup-0x1e4da50c>
    16e8:	000005a0 	andeq	r0, r0, r0, lsr #11
    16ec:	0b021b02 	bleq	882fc <startup-0x1ff77d04>
    16f0:	02000003 	andeq	r0, r0, #3
    16f4:	a52a6891 	strge	r6, [sl, #-2193]!	; 0xfffff76f
    16f8:	02000005 	andeq	r0, r0, #5
    16fc:	030b021b 	movweq	r0, #45595	; 0xb21b
    1700:	91020000 	mrsls	r0, (UNDEF: 2)
    1704:	aa290000 	bge	a4170c <startup-0x1f5be8f4>
    1708:	02000005 	andeq	r0, r0, #5
    170c:	025001b8 	subseq	r0, r0, #184, 2	; 0x2e
    1710:	00202000 	eoreq	r2, r0, r0
    1714:	9c010000 	stcls	0, cr0, [r1], {-0}
    1718:	0000172c 	andeq	r1, r0, ip, lsr #14
    171c:	000adc2a 	andeq	sp, sl, sl, lsr #24
    1720:	01b80200 			; <UNDEFINED> instruction: 0x01b80200
    1724:	0000069c 	muleq	r0, ip, r6
    1728:	00779102 	rsbseq	r9, r7, r2, lsl #2
    172c:	00044629 	andeq	r4, r4, r9, lsr #12
    1730:	01900200 	orrseq	r0, r0, r0, lsl #4
    1734:	2000020c 	andcs	r0, r0, ip, lsl #4
    1738:	00000044 	andeq	r0, r0, r4, asr #32
    173c:	17529c01 	ldrbne	r9, [r2, -r1, lsl #24]
    1740:	b42a0000 	strtlt	r0, [sl], #-0
    1744:	02000006 	andeq	r0, r0, #6
    1748:	02d10190 	sbcseq	r0, r1, #144, 2	; 0x24
    174c:	91020000 	mrsls	r0, (UNDEF: 2)
    1750:	2d290077 	stccs	0, cr0, [r9, #-476]!	; 0xfffffe24
    1754:	0200000a 	andeq	r0, r0, #10
    1758:	01ec0177 	mvneq	r0, r7, ror r1
    175c:	00202000 	eoreq	r2, r0, r0
    1760:	9c010000 	stcls	0, cr0, [r1], {-0}
    1764:	00001778 	andeq	r1, r0, r8, ror r7
    1768:	000adc2a 	andeq	sp, sl, sl, lsr #24
    176c:	01770200 	cmneq	r7, r0, lsl #4
    1770:	0000069c 	muleq	r0, ip, r6
    1774:	00779102 	rsbseq	r9, r7, r2, lsl #2
    1778:	000a4129 	andeq	r4, sl, r9, lsr #2
    177c:	01530200 	cmpeq	r3, r0, lsl #4
    1780:	200001ae 	andcs	r0, r0, lr, lsr #3
    1784:	0000003e 	andeq	r0, r0, lr, lsr r0
    1788:	17ad9c01 	strne	r9, [sp, r1, lsl #24]!
    178c:	4b2a0000 	blmi	a81794 <startup-0x1f57e86c>
    1790:	0200000a 	andeq	r0, r0, #10
    1794:	02d10153 	sbcseq	r0, r1, #-1073741804	; 0xc0000014
    1798:	91020000 	mrsls	r0, (UNDEF: 2)
    179c:	0e0c2c6f 	cdpeq	12, 0, cr2, cr12, cr15, {3}
    17a0:	55020000 	strpl	r0, [r2, #-0]
    17a4:	00030b01 	andeq	r0, r3, r1, lsl #22
    17a8:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    17ac:	0d283100 	stfeqs	f3, [r8, #-0]
    17b0:	34020000 	strcc	r0, [r2], #-0
    17b4:	0006c301 	andeq	ip, r6, r1, lsl #6
    17b8:	00015000 	andeq	r5, r1, r0
    17bc:	00005e20 	andeq	r5, r0, r0, lsr #28
    17c0:	f59c0100 			; <UNDEFINED> instruction: 0xf59c0100
    17c4:	2c000017 	stccs	0, cr0, [r0], {23}
    17c8:	000006e5 	andeq	r0, r0, r5, ror #13
    17cc:	16013602 	strne	r3, [r1], -r2, lsl #12
    17d0:	02000003 	andeq	r0, r0, #3
    17d4:	4d2c6891 	stcmi	8, cr6, [ip, #-580]!	; 0xfffffdbc
    17d8:	0200000e 	andeq	r0, r0, #14
    17dc:	06c30137 			; <UNDEFINED> instruction: 0x06c30137
    17e0:	91020000 	mrsls	r0, (UNDEF: 2)
    17e4:	0e4a2c6f 	cdpeq	12, 4, cr2, cr10, cr15, {3}
    17e8:	38020000 	stmdacc	r2, {}	; <UNPREDICTABLE>
    17ec:	00066901 	andeq	r6, r6, r1, lsl #18
    17f0:	6e910200 	cdpvs	2, 9, cr0, cr1, cr0, {0}
    17f4:	06922900 	ldreq	r2, [r2], r0, lsl #18
    17f8:	1c020000 	stcne	0, cr0, [r2], {-0}
    17fc:	00012801 	andeq	r2, r1, r1, lsl #16
    1800:	00002820 	andeq	r2, r0, r0, lsr #16
    1804:	1b9c0100 	blne	fe701c0c <GPIO_Ports+0xde6ff488>
    1808:	2a000018 	bcs	1870 <startup-0x1fffe790>
    180c:	00000762 	andeq	r0, r0, r2, ror #14
    1810:	d1011c02 	tstle	r1, r2, lsl #24
    1814:	02000002 	andeq	r0, r0, #2
    1818:	27007791 			; <UNDEFINED> instruction: 0x27007791
    181c:	000002c7 	andeq	r0, r0, r7, asr #5
    1820:	00b8e102 	adcseq	lr, r8, r2, lsl #2
    1824:	00702000 	rsbseq	r2, r0, r0
    1828:	9c010000 	stcls	0, cr0, [r1], {-0}
    182c:	000d9932 	andeq	r9, sp, r2, lsr r9
    1830:	06e00100 	strbteq	r0, [r0], r0, lsl #2
    1834:	0000030b 	andeq	r0, r0, fp, lsl #6
    1838:	20000070 	andcs	r0, r0, r0, ror r0
    183c:	00000048 	andeq	r0, r0, r8, asr #32
    1840:	18569c01 	ldmdane	r6, {r0, sl, fp, ip, pc}^
    1844:	032a0000 			; <UNDEFINED> instruction: 0x032a0000
    1848:	01000009 	tsteq	r0, r9
    184c:	030b06e0 	movweq	r0, #46816	; 0xb6e0
    1850:	91020000 	mrsls	r0, (UNDEF: 2)
    1854:	3f330074 	svccc	0x00330074
    1858:	01000010 	tsteq	r0, r0, lsl r0
    185c:	0010065d 	andseq	r0, r0, sp, asr r6
    1860:	00602000 	rsbeq	r2, r0, r0
    1864:	9c010000 	stcls	0, cr0, [r1], {-0}
    1868:	000fc52a 	andeq	ip, pc, sl, lsr #10
    186c:	065d0100 	ldrbeq	r0, [sp], -r0, lsl #2
    1870:	0000025a 	andeq	r0, r0, sl, asr r2
    1874:	2a779102 	bcs	1de5c84 <startup-0x1e21a37c>
    1878:	0000146a 	andeq	r1, r0, sl, ror #8
    187c:	0b065d01 	bleq	198c88 <startup-0x1fe67378>
    1880:	02000003 	andeq	r0, r0, #3
    1884:	00007091 	muleq	r0, r1, r0
    1888:	00000623 	andeq	r0, r0, r3, lsr #12
    188c:	03320004 	teqeq	r2, #4
    1890:	01040000 	mrseq	r0, (UNDEF: 4)
    1894:	000005c9 	andeq	r0, r0, r9, asr #11
    1898:	00125d0c 	andseq	r5, r2, ip, lsl #26
    189c:	00052900 	andeq	r2, r5, r0, lsl #18
    18a0:	00143c00 	andseq	r3, r4, r0, lsl #24
    18a4:	00050e20 	andeq	r0, r5, r0, lsr #28
    18a8:	00056900 	andeq	r6, r5, r0, lsl #18
    18ac:	06010200 	streq	r0, [r1], -r0, lsl #4
    18b0:	000003dc 	ldrdeq	r0, [r0], -ip
    18b4:	0001b403 	andeq	fp, r1, r3, lsl #8
    18b8:	372b0200 	strcc	r0, [fp, -r0, lsl #4]!
    18bc:	02000000 	andeq	r0, r0, #0
    18c0:	03da0801 	bicseq	r0, sl, #65536	; 0x10000
    18c4:	02020000 	andeq	r0, r2, #0
    18c8:	000f2505 	andeq	r2, pc, r5, lsl #10
    18cc:	04e90300 	strbteq	r0, [r9], #768	; 0x300
    18d0:	39020000 	stmdbcc	r2, {}	; <UNPREDICTABLE>
    18d4:	00000050 	andeq	r0, r0, r0, asr r0
    18d8:	a9070202 	stmdbge	r7, {r1, r9}
    18dc:	03000010 	movweq	r0, #16
    18e0:	0000113c 	andeq	r1, r0, ip, lsr r1
    18e4:	00624d02 	rsbeq	r4, r2, r2, lsl #26
    18e8:	04020000 	streq	r0, [r2], #-0
    18ec:	00099105 	andeq	r9, r9, r5, lsl #2
    18f0:	093a0300 	ldmdbeq	sl!, {r8, r9}
    18f4:	4f020000 	svcmi	0x00020000
    18f8:	00000074 	andeq	r0, r0, r4, ror r0
    18fc:	f4070402 	vst3.8	{d0-d2}, [r7], r2
    1900:	0200000c 	andeq	r0, r0, #12
    1904:	098c0508 	stmibeq	ip, {r3, r8, sl}
    1908:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    190c:	000cef07 	andeq	lr, ip, r7, lsl #30
    1910:	05040400 	streq	r0, [r4, #-1024]	; 0xfffffc00
    1914:	00746e69 	rsbseq	r6, r4, r9, ror #28
    1918:	f9070402 			; <UNDEFINED> instruction: 0xf9070402
    191c:	0300000c 	movweq	r0, #12
    1920:	000001b6 			; <UNDEFINED> instruction: 0x000001b6
    1924:	002c1803 	eoreq	r1, ip, r3, lsl #16
    1928:	eb030000 	bl	c1930 <startup-0x1ff3e6d0>
    192c:	03000004 	movweq	r0, #4
    1930:	00004524 	andeq	r4, r0, r4, lsr #10
    1934:	00a20500 	adceq	r0, r2, r0, lsl #10
    1938:	3e030000 	cdpcc	0, 0, cr0, cr3, cr0, {0}
    193c:	03000011 	movweq	r0, #17
    1940:	0000572c 	andeq	r5, r0, ip, lsr #14
    1944:	00b20500 	adcseq	r0, r2, r0, lsl #10
    1948:	3c030000 	stccc	0, cr0, [r3], {-0}
    194c:	03000009 	movweq	r0, #9
    1950:	00006930 	andeq	r6, r0, r0, lsr r9
    1954:	00c20500 	sbceq	r0, r2, r0, lsl #10
    1958:	ca060000 	bgt	181960 <startup-0x1fe7e6a0>
    195c:	0400000f 	streq	r0, [r0], #-15
    1960:	00bd06fa 	ldrshteq	r0, [sp], sl
    1964:	40070000 	andmi	r0, r7, r0
    1968:	05000008 	streq	r0, [r0, #-8]
    196c:	0000c23b 	andeq	ip, r0, fp, lsr r2
    1970:	01070800 	tsteq	r7, r0, lsl #16
    1974:	00000037 	andeq	r0, r0, r7, lsr r0
    1978:	04035f06 	streq	r5, [r3], #-3846	; 0xfffff0fa
    197c:	09000001 	stmdbeq	r0, {r0}
    1980:	000009ca 	andeq	r0, r0, sl, asr #19
    1984:	0f7f0900 	svceq	0x007f0900
    1988:	00010000 	andeq	r0, r1, r0
    198c:	c306280a 	movwgt	r2, #26634	; 0x680a
    1990:	00019005 	andeq	r9, r1, r5
    1994:	10390b00 	eorsne	r0, r9, r0, lsl #22
    1998:	c5060000 	strgt	r0, [r6, #-0]
    199c:	0000cd05 	andeq	ip, r0, r5, lsl #26
    19a0:	fa0b0000 	blx	2c19a8 <startup-0x1fd3e658>
    19a4:	0600000d 	streq	r0, [r0], -sp
    19a8:	00cd05c6 	sbceq	r0, sp, r6, asr #11
    19ac:	0b040000 	bleq	1019b4 <startup-0x1fefe64c>
    19b0:	000008ed 	andeq	r0, r0, sp, ror #17
    19b4:	cd05c706 	stcgt	7, cr12, [r5, #-24]	; 0xffffffe8
    19b8:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    19bc:	0009b40b 	andeq	fp, r9, fp, lsl #8
    19c0:	05c80600 	strbeq	r0, [r8, #1536]	; 0x600
    19c4:	000000cd 	andeq	r0, r0, sp, asr #1
    19c8:	44490c0c 	strbmi	r0, [r9], #-3084	; 0xfffff3f4
    19cc:	c9060052 	stmdbgt	r6, {r1, r4, r6}
    19d0:	0000cd05 	andeq	ip, r0, r5, lsl #26
    19d4:	4f0c1000 	svcmi	0x000c1000
    19d8:	06005244 	streq	r5, [r0], -r4, asr #4
    19dc:	00cd05ca 	sbceq	r0, sp, sl, asr #11
    19e0:	0b140000 	bleq	5019e8 <startup-0x1fafe618>
    19e4:	00000a0a 	andeq	r0, r0, sl, lsl #20
    19e8:	ad05cb06 	vstrge	d12, [r5, #-24]	; 0xffffffe8
    19ec:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    19f0:	0009e70b 	andeq	lr, r9, fp, lsl #14
    19f4:	05cc0600 	strbeq	r0, [ip, #1536]	; 0x600
    19f8:	000000ad 	andeq	r0, r0, sp, lsr #1
    19fc:	08ac0b1a 	stmiaeq	ip!, {r1, r3, r4, r8, r9, fp}
    1a00:	cd060000 	stcgt	0, cr0, [r6, #-0]
    1a04:	0000cd05 	andeq	ip, r0, r5, lsl #26
    1a08:	410c1c00 	tstmi	ip, r0, lsl #24
    1a0c:	06005246 	streq	r5, [r0], -r6, asr #4
    1a10:	01a005ce 	asreq	r0, lr, #11
    1a14:	00200000 	eoreq	r0, r0, r0
    1a18:	0000cd0d 	andeq	ip, r0, sp, lsl #26
    1a1c:	0001a000 	andeq	sl, r1, r0
    1a20:	00900e00 	addseq	r0, r0, r0, lsl #28
    1a24:	00010000 	andeq	r0, r1, r0
    1a28:	00019005 	andeq	r9, r1, r5
    1a2c:	0faa0f00 	svceq	0x00aa0f00
    1a30:	cf060000 	svcgt	0x00060000
    1a34:	00010405 	andeq	r0, r1, r5, lsl #8
    1a38:	01071000 	mrseq	r1, (UNDEF: 7)
    1a3c:	00000037 	andeq	r0, r0, r7, lsr r0
    1a40:	01d74207 	bicseq	r4, r7, r7, lsl #4
    1a44:	7e090000 	cdpvc	0, 0, cr0, cr9, cr0, {0}
    1a48:	00000008 	andeq	r0, r0, r8
    1a4c:	00070f09 	andeq	r0, r7, r9, lsl #30
    1a50:	62090100 	andvs	r0, r9, #0, 2
    1a54:	02000002 	andeq	r0, r0, #2
    1a58:	00029e09 	andeq	r9, r2, r9, lsl #28
    1a5c:	03000300 	movweq	r0, #768	; 0x300
    1a60:	00000d88 	andeq	r0, r0, r8, lsl #27
    1a64:	01b14707 			; <UNDEFINED> instruction: 0x01b14707
    1a68:	07100000 	ldreq	r0, [r0, -r0]
    1a6c:	00003701 	andeq	r3, r0, r1, lsl #14
    1a70:	fc4f0700 	mcrr2	7, 0, r0, pc, cr0	; <UNPREDICTABLE>
    1a74:	09000001 	stmdbeq	r0, {r0}
    1a78:	0000041d 	andeq	r0, r0, sp, lsl r4
    1a7c:	035f0900 	cmpeq	pc, #0, 18
    1a80:	00010000 	andeq	r0, r1, r0
    1a84:	00010a03 	andeq	r0, r1, r3, lsl #20
    1a88:	e2520700 	subs	r0, r2, #0, 14
    1a8c:	10000001 	andne	r0, r0, r1
    1a90:	00370107 	eorseq	r0, r7, r7, lsl #2
    1a94:	5a070000 	bpl	1c1a9c <startup-0x1fe3e564>
    1a98:	0000022d 	andeq	r0, r0, sp, lsr #4
    1a9c:	00050c09 	andeq	r0, r5, r9, lsl #24
    1aa0:	56090000 	strpl	r0, [r9], -r0
    1aa4:	01000009 	tsteq	r0, r9
    1aa8:	0011b509 	andseq	fp, r1, r9, lsl #10
    1aac:	10090200 	andne	r0, r9, r0, lsl #4
    1ab0:	0300000a 	movweq	r0, #10
    1ab4:	0e8f0300 	cdpeq	3, 8, cr0, cr15, cr0, {0}
    1ab8:	5f070000 	svcpl	0x00070000
    1abc:	00000207 	andeq	r0, r0, r7, lsl #4
    1ac0:	37010710 	smladcc	r1, r0, r7, r0
    1ac4:	07000000 	streq	r0, [r0, -r0]
    1ac8:	0002586e 	andeq	r5, r2, lr, ror #16
    1acc:	009b0900 	addseq	r0, fp, r0, lsl #18
    1ad0:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    1ad4:	0000106d 	andeq	r1, r0, sp, rrx
    1ad8:	01e60901 	mvneq	r0, r1, lsl #18
    1adc:	00020000 	andeq	r0, r2, r0
    1ae0:	00048b03 	andeq	r8, r4, r3, lsl #22
    1ae4:	38720700 	ldmdacc	r2!, {r8, r9, sl}^
    1ae8:	10000002 	andne	r0, r0, r2
    1aec:	00370107 	eorseq	r0, r7, r7, lsl #2
    1af0:	7a070000 	bvc	1c1af8 <startup-0x1fe3e508>
    1af4:	0000027d 	andeq	r0, r0, sp, ror r2
    1af8:	00121f09 	andseq	r1, r2, r9, lsl #30
    1afc:	df090000 	svcle	0x00090000
    1b00:	01000011 	tsteq	r0, r1, lsl r0
    1b04:	134a0300 	movtne	r0, #41728	; 0xa300
    1b08:	7d070000 	stcvc	0, cr0, [r7, #-0]
    1b0c:	00000263 	andeq	r0, r0, r3, ror #4
    1b10:	84070811 	strhi	r0, [r7], #-2065	; 0xfffff7ef
    1b14:	000002cd 	andeq	r0, r0, sp, asr #5
    1b18:	000eb312 	andeq	fp, lr, r2, lsl r3
    1b1c:	c2860700 	addgt	r0, r6, #0, 14
    1b20:	00000000 	andeq	r0, r0, r0
    1b24:	000d4612 	andeq	r4, sp, r2, lsl r6
    1b28:	d7890700 	strle	r0, [r9, r0, lsl #14]
    1b2c:	04000001 	streq	r0, [r0], #-1
    1b30:	000ae512 	andeq	lr, sl, r2, lsl r5
    1b34:	2d8c0700 	stccs	7, cr0, [ip]
    1b38:	05000002 	streq	r0, [r0, #-2]
    1b3c:	00092f12 	andeq	r2, r9, r2, lsl pc
    1b40:	fc8f0700 	stc2	7, cr0, [pc], {0}
    1b44:	06000001 	streq	r0, [r0], -r1
    1b48:	000ee012 	andeq	lr, lr, r2, lsl r0
    1b4c:	58920700 	ldmpl	r2, {r8, r9, sl}
    1b50:	07000002 	streq	r0, [r0, -r2]
    1b54:	036d0300 	cmneq	sp, #0, 6
    1b58:	94070000 	strls	r0, [r7], #-0
    1b5c:	00000288 	andeq	r0, r0, r8, lsl #5
    1b60:	00138713 	andseq	r8, r3, r3, lsl r7
    1b64:	02430100 	subeq	r0, r3, #0, 2
    1b68:	200018a6 	andcs	r1, r0, r6, lsr #17
    1b6c:	000000a4 	andeq	r0, r0, r4, lsr #1
    1b70:	033a9c01 	teqeq	sl, #256	; 0x100
    1b74:	6a140000 	bvs	501b7c <startup-0x1fafe484>
    1b78:	01000013 	tsteq	r0, r3, lsl r0
    1b7c:	033a0243 	teqeq	sl, #805306372	; 0x30000004
    1b80:	91020000 	mrsls	r0, (UNDEF: 2)
    1b84:	1315146c 	tstne	r5, #108, 8	; 0x6c000000
    1b88:	43010000 	movwmi	r0, #4096	; 0x1000
    1b8c:	0000a202 	andeq	sl, r0, r2, lsl #4
    1b90:	6a910200 	bvs	fe442398 <GPIO_Ports+0xde43fc14>
    1b94:	0011fb14 	andseq	pc, r1, r4, lsl fp	; <UNPREDICTABLE>
    1b98:	02430100 	subeq	r0, r3, #0, 2
    1b9c:	00000097 	muleq	r0, r7, r0
    1ba0:	15699102 	strbne	r9, [r9, #-258]!	; 0xfffffefe
    1ba4:	00001203 	andeq	r1, r0, r3, lsl #4
    1ba8:	c2024501 	andgt	r4, r2, #4194304	; 0x400000
    1bac:	02000000 	andeq	r0, r0, #0
    1bb0:	80157491 	mulshi	r5, r1, r4
    1bb4:	01000013 	tsteq	r0, r3, lsl r0
    1bb8:	00c20246 	sbceq	r0, r2, r6, asr #4
    1bbc:	91020000 	mrsls	r0, (UNDEF: 2)
    1bc0:	04160070 	ldreq	r0, [r6], #-112	; 0xffffff90
    1bc4:	000001a5 	andeq	r0, r0, r5, lsr #3
    1bc8:	00137013 	andseq	r7, r3, r3, lsl r0
    1bcc:	01f00100 	mvnseq	r0, r0, lsl #2
    1bd0:	20001882 	andcs	r1, r0, r2, lsl #17
    1bd4:	00000024 	andeq	r0, r0, r4, lsr #32
    1bd8:	03759c01 	cmneq	r5, #256	; 0x100
    1bdc:	6a140000 	bvs	501be4 <startup-0x1fafe41c>
    1be0:	01000013 	tsteq	r0, r3, lsl r0
    1be4:	033a01f0 	teqeq	sl, #240, 2	; 0x3c
    1be8:	91020000 	mrsls	r0, (UNDEF: 2)
    1bec:	0eb31474 	mrceq	4, 5, r1, cr3, cr4, {3}
    1bf0:	f0010000 			; <UNDEFINED> instruction: 0xf0010000
    1bf4:	0000a201 	andeq	sl, r0, r1, lsl #4
    1bf8:	72910200 	addsvc	r0, r1, #0, 4
    1bfc:	135f1300 	cmpne	pc, #0, 6
    1c00:	e0010000 	and	r0, r1, r0
    1c04:	00186401 	andseq	r6, r8, r1, lsl #8
    1c08:	00001e20 	andeq	r1, r0, r0, lsr #28
    1c0c:	aa9c0100 	bge	fe702014 <GPIO_Ports+0xde6ff890>
    1c10:	14000003 	strne	r0, [r0], #-3
    1c14:	0000136a 	andeq	r1, r0, sl, ror #6
    1c18:	3a01e001 	bcc	79c24 <startup-0x1ff863dc>
    1c1c:	02000003 	andeq	r0, r0, #3
    1c20:	0d147491 	cfldrseq	mvf7, [r4, #-580]	; 0xfffffdbc
    1c24:	01000013 	tsteq	r0, r3, lsl r0
    1c28:	00a201e0 	adceq	r0, r2, r0, ror #3
    1c2c:	91020000 	mrsls	r0, (UNDEF: 2)
    1c30:	29130072 	ldmdbcs	r3, {r1, r4, r5, r6}
    1c34:	01000012 	tsteq	r0, r2, lsl r0
    1c38:	182a01c7 	stmdane	sl!, {r0, r1, r2, r6, r7, r8}
    1c3c:	003a2000 	eorseq	r2, sl, r0
    1c40:	9c010000 	stcls	0, cr0, [r1], {-0}
    1c44:	000003ee 	andeq	r0, r0, lr, ror #7
    1c48:	00136a14 	andseq	r6, r3, r4, lsl sl
    1c4c:	01c70100 	biceq	r0, r7, r0, lsl #2
    1c50:	0000033a 	andeq	r0, r0, sl, lsr r3
    1c54:	14749102 	ldrbtne	r9, [r4], #-258	; 0xfffffefe
    1c58:	00000eb3 			; <UNDEFINED> instruction: 0x00000eb3
    1c5c:	a201c701 	andge	ip, r1, #262144	; 0x40000
    1c60:	02000000 	andeq	r0, r0, #0
    1c64:	18147291 	ldmdane	r4, {r0, r4, r7, r9, ip, sp, lr}
    1c68:	01000012 	tsteq	r0, r2, lsl r0
    1c6c:	027d01c7 	rsbseq	r0, sp, #-1073741775	; 0xc0000031
    1c70:	91020000 	mrsls	r0, (UNDEF: 2)
    1c74:	4e130071 	mrcmi	0, 0, r0, cr3, cr1, {3}
    1c78:	01000012 	tsteq	r0, r2, lsl r0
    1c7c:	180c01b1 	stmdane	ip, {r0, r4, r5, r7, r8}
    1c80:	001e2000 	andseq	r2, lr, r0
    1c84:	9c010000 	stcls	0, cr0, [r1], {-0}
    1c88:	00000423 	andeq	r0, r0, r3, lsr #8
    1c8c:	00136a14 	andseq	r6, r3, r4, lsl sl
    1c90:	01b10100 			; <UNDEFINED> instruction: 0x01b10100
    1c94:	0000033a 	andeq	r0, r0, sl, lsr r3
    1c98:	14749102 	ldrbtne	r9, [r4], #-258	; 0xfffffefe
    1c9c:	00000eb3 			; <UNDEFINED> instruction: 0x00000eb3
    1ca0:	a201b101 	andge	fp, r1, #1073741824	; 0x40000000
    1ca4:	02000000 	andeq	r0, r0, #0
    1ca8:	13007291 	movwne	r7, #657	; 0x291
    1cac:	00001237 	andeq	r1, r0, r7, lsr r2
    1cb0:	ee019c01 	cdp	12, 0, cr9, cr1, cr1, {0}
    1cb4:	1e200017 	miane	acc0, r7, r0
    1cb8:	01000000 	mrseq	r0, (UNDEF: 0)
    1cbc:	0004589c 	muleq	r4, ip, r8
    1cc0:	136a1400 	cmnne	sl, #0, 8
    1cc4:	9c010000 	stcls	0, cr0, [r1], {-0}
    1cc8:	00033a01 	andeq	r3, r3, r1, lsl #20
    1ccc:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    1cd0:	000eb314 	andeq	fp, lr, r4, lsl r3
    1cd4:	019c0100 	orrseq	r0, ip, r0, lsl #2
    1cd8:	000000a2 	andeq	r0, r0, r2, lsr #1
    1cdc:	00729102 	rsbseq	r9, r2, r2, lsl #2
    1ce0:	0011e717 	andseq	lr, r1, r7, lsl r7
    1ce4:	01880100 	orreq	r0, r8, r0, lsl #2
    1ce8:	000000a2 	andeq	r0, r0, r2, lsr #1
    1cec:	200017d8 	ldrdcs	r1, [r0], -r8
    1cf0:	00000016 	andeq	r0, r0, r6, lsl r0
    1cf4:	04829c01 	streq	r9, [r2], #3073	; 0xc01
    1cf8:	6a140000 	bvs	501d00 <startup-0x1fafe300>
    1cfc:	01000013 	tsteq	r0, r3, lsl r0
    1d00:	033a0188 	teqeq	sl, #136, 2	; 0x22
    1d04:	91020000 	mrsls	r0, (UNDEF: 2)
    1d08:	98170074 	ldmdals	r7, {r2, r4, r5, r6}
    1d0c:	01000013 	tsteq	r0, r3, lsl r0
    1d10:	0097016e 	addseq	r0, r7, lr, ror #2
    1d14:	17960000 	ldrne	r0, [r6, r0]
    1d18:	00422000 	subeq	r2, r2, r0
    1d1c:	9c010000 	stcls	0, cr0, [r1], {-0}
    1d20:	000004ca 	andeq	r0, r0, sl, asr #9
    1d24:	00136a14 	andseq	r6, r3, r4, lsl sl
    1d28:	016e0100 	cmneq	lr, r0, lsl #2
    1d2c:	0000033a 	andeq	r0, r0, sl, lsr r3
    1d30:	146c9102 	strbtne	r9, [ip], #-258	; 0xfffffefe
    1d34:	00000eb3 			; <UNDEFINED> instruction: 0x00000eb3
    1d38:	a2016e01 	andge	r6, r1, #1, 28
    1d3c:	02000000 	andeq	r0, r0, #0
    1d40:	75156a91 	ldrvc	r6, [r5, #-2705]	; 0xfffff56f
    1d44:	0100000f 	tsteq	r0, pc
    1d48:	00970170 	addseq	r0, r7, r0, ror r1
    1d4c:	91020000 	mrsls	r0, (UNDEF: 2)
    1d50:	24170077 	ldrcs	r0, [r7], #-119	; 0xffffff89
    1d54:	01000013 	tsteq	r0, r3, lsl r0
    1d58:	00a2015d 	adceq	r0, r2, sp, asr r1
    1d5c:	17800000 	strne	r0, [r0, r0]
    1d60:	00162000 	andseq	r2, r6, r0
    1d64:	9c010000 	stcls	0, cr0, [r1], {-0}
    1d68:	000004f4 	strdeq	r0, [r0], -r4
    1d6c:	00136a14 	andseq	r6, r3, r4, lsl sl
    1d70:	015d0100 	cmpeq	sp, r0, lsl #2
    1d74:	0000033a 	andeq	r0, r0, sl, lsr r3
    1d78:	00749102 	rsbseq	r9, r4, r2, lsl #2
    1d7c:	0012e717 	andseq	lr, r2, r7, lsl r7
    1d80:	01430100 	mrseq	r0, (UNDEF: 83)
    1d84:	00000097 	muleq	r0, r7, r0
    1d88:	2000173e 	andcs	r1, r0, lr, lsr r7
    1d8c:	00000042 	andeq	r0, r0, r2, asr #32
    1d90:	053c9c01 	ldreq	r9, [ip, #-3073]!	; 0xfffff3ff
    1d94:	6a140000 	bvs	501d9c <startup-0x1fafe264>
    1d98:	01000013 	tsteq	r0, r3, lsl r0
    1d9c:	033a0143 	teqeq	sl, #-1073741808	; 0xc0000010
    1da0:	91020000 	mrsls	r0, (UNDEF: 2)
    1da4:	0eb3146c 	cdpeq	4, 11, cr1, cr3, cr12, {3}
    1da8:	43010000 	movwmi	r0, #4096	; 0x1000
    1dac:	0000a201 	andeq	sl, r0, r1, lsl #4
    1db0:	6a910200 	bvs	fe4425b8 <GPIO_Ports+0xde43fe34>
    1db4:	000f7515 	andeq	r7, pc, r5, lsl r5	; <UNPREDICTABLE>
    1db8:	01450100 	mrseq	r0, (UNDEF: 85)
    1dbc:	00000097 	muleq	r0, r7, r0
    1dc0:	00779102 	rsbseq	r9, r7, r2, lsl #2
    1dc4:	00133713 	andseq	r3, r3, r3, lsl r7
    1dc8:	01150100 	tsteq	r5, r0, lsl #2
    1dcc:	200016f8 	strdcs	r1, [r0], -r8
    1dd0:	00000046 	andeq	r0, r0, r6, asr #32
    1dd4:	05809c01 	streq	r9, [r0, #3073]	; 0xc01
    1dd8:	6a140000 	bvs	501de0 <startup-0x1fafe220>
    1ddc:	01000013 	tsteq	r0, r3, lsl r0
    1de0:	033a0115 	teqeq	sl, #1073741829	; 0x40000005
    1de4:	91020000 	mrsls	r0, (UNDEF: 2)
    1de8:	0eb3146c 	cdpeq	4, 11, cr1, cr3, cr12, {3}
    1dec:	15010000 	strne	r0, [r1, #-0]
    1df0:	0000a201 	andeq	sl, r0, r1, lsl #4
    1df4:	6a910200 	bvs	fe4425fc <GPIO_Ports+0xde43fe78>
    1df8:	706d7418 	rsbvc	r7, sp, r8, lsl r4
    1dfc:	01170100 	tsteq	r7, r0, lsl #2
    1e00:	000000cd 	andeq	r0, r0, sp, asr #1
    1e04:	00749102 	rsbseq	r9, r4, r2, lsl #2
    1e08:	00120819 	andseq	r0, r2, r9, lsl r8
    1e0c:	c4fe0100 	ldrbtgt	r0, [lr], #256	; 0x100
    1e10:	34200016 	strtcc	r0, [r0], #-22	; 0xffffffea
    1e14:	01000000 	mrseq	r0, (UNDEF: 0)
    1e18:	0005a49c 	muleq	r5, ip, r4
    1e1c:	12fd1a00 	rscsne	r1, sp, #0, 20
    1e20:	fe010000 	cdp2	0, 0, cr0, cr1, cr0, {0}
    1e24:	000005a4 	andeq	r0, r0, r4, lsr #11
    1e28:	00749102 	rsbseq	r9, r4, r2, lsl #2
    1e2c:	02cd0416 	sbceq	r0, sp, #369098752	; 0x16000000
    1e30:	44190000 	ldrmi	r0, [r9], #-0
    1e34:	01000012 	tsteq	r0, r2, lsl r0
    1e38:	0015acca 	andseq	sl, r5, sl, asr #25
    1e3c:	00011820 	andeq	r1, r1, r0, lsr #16
    1e40:	069c0100 	ldreq	r0, [ip], r0, lsl #2
    1e44:	1a000006 	bne	1e64 <startup-0x1fffe19c>
    1e48:	0000136a 	andeq	r1, r0, sl, ror #6
    1e4c:	033aca01 	teqeq	sl, #4096	; 0x1000
    1e50:	91020000 	mrsls	r0, (UNDEF: 2)
    1e54:	12fd1a64 	rscsne	r1, sp, #100, 20	; 0x64000
    1e58:	ca010000 	bgt	41e60 <startup-0x1ffbe1a0>
    1e5c:	000005a4 	andeq	r0, r0, r4, lsr #11
    1e60:	1b609102 	blne	1826270 <startup-0x1e7d9d90>
    1e64:	000011d8 	ldrdeq	r1, [r0], -r8
    1e68:	00c2cc01 	sbceq	ip, r2, r1, lsl #24
    1e6c:	91020000 	mrsls	r0, (UNDEF: 2)
    1e70:	6f701c74 	svcvs	0x00701c74
    1e74:	cc010073 	stcgt	0, cr0, [r1], {115}	; 0x73
    1e78:	000000c2 	andeq	r0, r0, r2, asr #1
    1e7c:	1b709102 	blne	1c2628c <startup-0x1e3d9d74>
    1e80:	00001354 	andeq	r1, r0, r4, asr r3
    1e84:	00c2cc01 	sbceq	ip, r2, r1, lsl #24
    1e88:	91020000 	mrsls	r0, (UNDEF: 2)
    1e8c:	db1d006c 	blle	742044 <startup-0x1f8bdfbc>
    1e90:	01000012 	tsteq	r0, r2, lsl r0
    1e94:	00143c7f 	andseq	r3, r4, pc, ror ip
    1e98:	00017020 	andeq	r7, r1, r0, lsr #32
    1e9c:	1a9c0100 	bne	fe7022a4 <GPIO_Ports+0xde6ffb20>
    1ea0:	0000136a 	andeq	r1, r0, sl, ror #6
    1ea4:	033a7f01 	teqeq	sl, #1, 30
    1ea8:	91020000 	mrsls	r0, (UNDEF: 2)
    1eac:	43000074 	movwmi	r0, #116	; 0x74
    1eb0:	04000005 	streq	r0, [r0], #-5
    1eb4:	0004ee00 	andeq	lr, r4, r0, lsl #28
    1eb8:	c9010400 	stmdbgt	r1, {sl}
    1ebc:	0c000005 	stceq	0, cr0, [r0], {5}
    1ec0:	000014cd 	andeq	r1, r0, sp, asr #9
    1ec4:	00000529 	andeq	r0, r0, r9, lsr #10
    1ec8:	2000194c 	andcs	r1, r0, ip, asr #18
    1ecc:	000001c4 	andeq	r0, r0, r4, asr #3
    1ed0:	00000822 	andeq	r0, r0, r2, lsr #16
    1ed4:	dc060102 	stfles	f0, [r6], {2}
    1ed8:	03000003 	movweq	r0, #3
    1edc:	000001b4 			; <UNDEFINED> instruction: 0x000001b4
    1ee0:	00372b02 	eorseq	r2, r7, r2, lsl #22
    1ee4:	01020000 	mrseq	r0, (UNDEF: 2)
    1ee8:	0003da08 	andeq	sp, r3, r8, lsl #20
    1eec:	05020200 	streq	r0, [r2, #-512]	; 0xfffffe00
    1ef0:	00000f25 	andeq	r0, r0, r5, lsr #30
    1ef4:	a9070202 	stmdbge	r7, {r1, r9}
    1ef8:	03000010 	movweq	r0, #16
    1efc:	0000113c 	andeq	r1, r0, ip, lsr r1
    1f00:	00574d02 	subseq	r4, r7, r2, lsl #26
    1f04:	04020000 	streq	r0, [r2], #-0
    1f08:	00099105 	andeq	r9, r9, r5, lsl #2
    1f0c:	093a0300 	ldmdbeq	sl!, {r8, r9}
    1f10:	4f020000 	svcmi	0x00020000
    1f14:	00000069 	andeq	r0, r0, r9, rrx
    1f18:	f4070402 	vst3.8	{d0-d2}, [r7], r2
    1f1c:	0200000c 	andeq	r0, r0, #12
    1f20:	098c0508 	stmibeq	ip, {r3, r8, sl}
    1f24:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    1f28:	000cef07 	andeq	lr, ip, r7, lsl #30
    1f2c:	05040400 	streq	r0, [r4, #-1024]	; 0xfffffc00
    1f30:	00746e69 	rsbseq	r6, r4, r9, ror #28
    1f34:	f9070402 			; <UNDEFINED> instruction: 0xf9070402
    1f38:	0300000c 	movweq	r0, #12
    1f3c:	000001b6 			; <UNDEFINED> instruction: 0x000001b6
    1f40:	002c1803 	eoreq	r1, ip, r3, lsl #16
    1f44:	8c050000 	stchi	0, cr0, [r5], {-0}
    1f48:	03000000 	movweq	r0, #0
    1f4c:	0000113e 	andeq	r1, r0, lr, lsr r1
    1f50:	004c2c03 	subeq	r2, ip, r3, lsl #24
    1f54:	9c050000 	stcls	0, cr0, [r5], {-0}
    1f58:	03000000 	movweq	r0, #0
    1f5c:	0000093c 	andeq	r0, r0, ip, lsr r9
    1f60:	005e3003 	subseq	r3, lr, r3
    1f64:	ac050000 	stcge	0, cr0, [r5], {-0}
    1f68:	06000000 	streq	r0, [r0], -r0
    1f6c:	000000b7 	strheq	r0, [r0], -r7
    1f70:	040e0407 	streq	r0, [lr], #-1031	; 0xfffffbf9
    1f74:	017d01a0 	cmneq	sp, r0, lsr #3
    1f78:	5a080000 	bpl	201f80 <startup-0x1fdfe080>
    1f7c:	04000011 	streq	r0, [r0], #-17	; 0xffffffef
    1f80:	018d01a2 	orreq	r0, sp, r2, lsr #3
    1f84:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    1f88:	000003c6 	andeq	r0, r0, r6, asr #7
    1f8c:	9201a304 	andls	sl, r1, #4, 6	; 0x10000000
    1f90:	20000001 	andcs	r0, r0, r1
    1f94:	000d7908 	andeq	r7, sp, r8, lsl #18
    1f98:	01a40400 			; <UNDEFINED> instruction: 0x01a40400
    1f9c:	0000018d 	andeq	r0, r0, sp, lsl #3
    1fa0:	00050880 	andeq	r0, r5, r0, lsl #17
    1fa4:	a5040000 	strge	r0, [r4, #-0]
    1fa8:	00019201 	andeq	r9, r1, r1, lsl #4
    1fac:	ea09a000 	b	269fb4 <startup-0x1fd9604c>
    1fb0:	04000010 	streq	r0, [r0], #-16
    1fb4:	018d01a6 	orreq	r0, sp, r6, lsr #3
    1fb8:	01000000 	mrseq	r0, (UNDEF: 0)
    1fbc:	00045409 	andeq	r5, r4, r9, lsl #8
    1fc0:	01a70400 			; <UNDEFINED> instruction: 0x01a70400
    1fc4:	00000192 	muleq	r0, r2, r1
    1fc8:	6e090120 	adfvsep	f0, f1, f0
    1fcc:	04000001 	streq	r0, [r0], #-1
    1fd0:	018d01a8 	orreq	r0, sp, r8, lsr #3
    1fd4:	01800000 	orreq	r0, r0, r0
    1fd8:	00045e09 	andeq	r5, r4, r9, lsl #28
    1fdc:	01a90400 			; <UNDEFINED> instruction: 0x01a90400
    1fe0:	00000192 	muleq	r0, r2, r1
    1fe4:	180901a0 	stmdane	r9, {r5, r7, r8}
    1fe8:	04000004 	streq	r0, [r0], #-4
    1fec:	018d01aa 	orreq	r0, sp, sl, lsr #3
    1ff0:	02000000 	andeq	r0, r0, #0
    1ff4:	0003fa09 	andeq	pc, r3, r9, lsl #20
    1ff8:	01ab0400 			; <UNDEFINED> instruction: 0x01ab0400
    1ffc:	000001a2 	andeq	r0, r0, r2, lsr #3
    2000:	490a0220 	stmdbmi	sl, {r5, r9}
    2004:	ac040050 	stcge	0, cr0, [r4], {80}	; 0x50
    2008:	0001c201 	andeq	ip, r1, r1, lsl #4
    200c:	09030000 	stmdbeq	r3, {}	; <UNPREDICTABLE>
    2010:	00000404 	andeq	r0, r0, r4, lsl #8
    2014:	c701ad04 	strgt	sl, [r1, -r4, lsl #26]
    2018:	f0000001 			; <UNDEFINED> instruction: 0xf0000001
    201c:	06bc0903 	ldrteq	r0, [ip], r3, lsl #18
    2020:	ae040000 	cdpge	0, 0, cr0, cr4, cr0, {0}
    2024:	0000b701 	andeq	fp, r0, r1, lsl #14
    2028:	000e0000 	andeq	r0, lr, r0
    202c:	0000b70b 	andeq	fp, r0, fp, lsl #14
    2030:	00018d00 	andeq	r8, r1, r0, lsl #26
    2034:	00850c00 	addeq	r0, r5, r0, lsl #24
    2038:	00070000 	andeq	r0, r7, r0
    203c:	00017d05 	andeq	r7, r1, r5, lsl #26
    2040:	00ac0b00 	adceq	r0, ip, r0, lsl #22
    2044:	01a20000 			; <UNDEFINED> instruction: 0x01a20000
    2048:	850c0000 	strhi	r0, [ip, #-0]
    204c:	17000000 	strne	r0, [r0, -r0]
    2050:	00ac0b00 	adceq	r0, ip, r0, lsl #22
    2054:	01b20000 			; <UNDEFINED> instruction: 0x01b20000
    2058:	850c0000 	strhi	r0, [ip, #-0]
    205c:	37000000 	strcc	r0, [r0, -r0]
    2060:	00970b00 	addseq	r0, r7, r0, lsl #22
    2064:	01c20000 	biceq	r0, r2, r0
    2068:	850c0000 	strhi	r0, [ip, #-0]
    206c:	ef000000 	svc	0x00000000
    2070:	01b20500 			; <UNDEFINED> instruction: 0x01b20500
    2074:	ac0b0000 	stcge	0, cr0, [fp], {-0}
    2078:	d8000000 	stmdale	r0, {}	; <UNPREDICTABLE>
    207c:	0d000001 	stceq	0, cr0, [r0, #-4]
    2080:	00000085 	andeq	r0, r0, r5, lsl #1
    2084:	0e000283 	cdpeq	2, 0, cr0, cr0, cr3, {4}
    2088:	00000caf 	andeq	r0, r0, pc, lsr #25
    208c:	c101af04 	tstgt	r1, r4, lsl #30
    2090:	0f000000 	svceq	0x00000000
    2094:	01c0048c 	biceq	r0, r0, ip, lsl #9
    2098:	000002ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    209c:	00022508 	andeq	r2, r2, r8, lsl #10
    20a0:	01c20400 	biceq	r0, r2, r0, lsl #8
    20a4:	000000bc 	strheq	r0, [r0], -ip
    20a8:	034e0800 	movteq	r0, #59392	; 0xe800
    20ac:	c3040000 	movwgt	r0, #16384	; 0x4000
    20b0:	0000b701 	andeq	fp, r0, r1, lsl #14
    20b4:	ac080400 	cfstrsge	mvf0, [r8], {-0}
    20b8:	04000000 	streq	r0, [r0], #-0
    20bc:	00b701c4 	adcseq	r0, r7, r4, asr #3
    20c0:	08080000 	stmdaeq	r8, {}	; <UNPREDICTABLE>
    20c4:	000001f5 	strdeq	r0, [r0], -r5
    20c8:	b701c504 	strlt	ip, [r1, -r4, lsl #10]
    20cc:	0c000000 	stceq	0, cr0, [r0], {-0}
    20d0:	52435310 	subpl	r5, r3, #16, 6	; 0x40000000
    20d4:	01c60400 	biceq	r0, r6, r0, lsl #8
    20d8:	000000b7 	strheq	r0, [r0], -r7
    20dc:	43431010 	movtmi	r1, #12304	; 0x3010
    20e0:	c7040052 	smlsdgt	r4, r2, r0, r0
    20e4:	0000b701 	andeq	fp, r0, r1, lsl #14
    20e8:	53101400 	tstpl	r0, #0, 8
    20ec:	04005048 	streq	r5, [r0], #-72	; 0xffffffb8
    20f0:	030f01c8 	movweq	r0, #61896	; 0xf1c8
    20f4:	08180000 	ldmdaeq	r8, {}	; <UNPREDICTABLE>
    20f8:	000006a5 	andeq	r0, r0, r5, lsr #13
    20fc:	b701c904 	strlt	ip, [r1, -r4, lsl #18]
    2100:	24000000 	strcs	r0, [r0], #-0
    2104:	000e3608 	andeq	r3, lr, r8, lsl #12
    2108:	01ca0400 	biceq	r0, sl, r0, lsl #8
    210c:	000000b7 	strheq	r0, [r0], -r7
    2110:	056c0828 	strbeq	r0, [ip, #-2088]!	; 0xfffff7d8
    2114:	cb040000 	blgt	10211c <startup-0x1fefdee4>
    2118:	0000b701 	andeq	fp, r0, r1, lsl #14
    211c:	9c082c00 	stcls	12, cr2, [r8], {-0}
    2120:	04000004 	streq	r0, [r0], #-4
    2124:	00b701cc 	adcseq	r0, r7, ip, asr #3
    2128:	08300000 	ldmdaeq	r0!, {}	; <UNPREDICTABLE>
    212c:	00000f1f 	andeq	r0, r0, pc, lsl pc
    2130:	b701cd04 	strlt	ip, [r1, -r4, lsl #26]
    2134:	34000000 	strcc	r0, [r0], #-0
    2138:	000b8008 	andeq	r8, fp, r8
    213c:	01ce0400 	biceq	r0, lr, r0, lsl #8
    2140:	000000b7 	strheq	r0, [r0], -r7
    2144:	0df50838 	ldcleq	8, cr0, [r5, #224]!	; 0xe0
    2148:	cf040000 	svcgt	0x00040000
    214c:	0000b701 	andeq	fp, r0, r1, lsl #14
    2150:	50103c00 	andspl	r3, r0, r0, lsl #24
    2154:	04005246 	streq	r5, [r0], #-582	; 0xfffffdba
    2158:	032901d0 			; <UNDEFINED> instruction: 0x032901d0
    215c:	10400000 	subne	r0, r0, r0
    2160:	00524644 	subseq	r4, r2, r4, asr #12
    2164:	bc01d104 	stfltd	f5, [r1], {4}
    2168:	48000000 	stmdami	r0, {}	; <UNPREDICTABLE>
    216c:	52444110 	subpl	r4, r4, #16, 2
    2170:	01d20400 	bicseq	r0, r2, r0, lsl #8
    2174:	000000bc 	strheq	r0, [r0], -ip
    2178:	0f0e084c 	svceq	0x000e084c
    217c:	d3040000 	movwle	r0, #16384	; 0x4000
    2180:	00034301 	andeq	r4, r3, r1, lsl #6
    2184:	48085000 	stmdami	r8, {ip, lr}
    2188:	0400000f 	streq	r0, [r0], #-15
    218c:	035d01d4 	cmpeq	sp, #212, 2	; 0x35
    2190:	08600000 	stmdaeq	r0!, {}^	; <UNPREDICTABLE>
    2194:	000003c6 	andeq	r0, r0, r6, asr #7
    2198:	6201d504 	andvs	sp, r1, #4, 10	; 0x1000000
    219c:	74000003 	strvc	r0, [r0], #-3
    21a0:	0010e408 	andseq	lr, r0, r8, lsl #8
    21a4:	01d60400 	bicseq	r0, r6, r0, lsl #8
    21a8:	000000b7 	strheq	r0, [r0], -r7
    21ac:	970b0088 	strls	r0, [fp, -r8, lsl #1]
    21b0:	0f000000 	svceq	0x00000000
    21b4:	0c000003 	stceq	0, cr0, [r0], {3}
    21b8:	00000085 	andeq	r0, r0, r5, lsl #1
    21bc:	ff05000b 			; <UNDEFINED> instruction: 0xff05000b
    21c0:	0b000002 	bleq	21d0 <startup-0x1fffde30>
    21c4:	000000bc 	strheq	r0, [r0], -ip
    21c8:	00000324 	andeq	r0, r0, r4, lsr #6
    21cc:	0000850c 	andeq	r8, r0, ip, lsl #10
    21d0:	06000100 	streq	r0, [r0], -r0, lsl #2
    21d4:	00000314 	andeq	r0, r0, r4, lsl r3
    21d8:	00032405 	andeq	r2, r3, r5, lsl #8
    21dc:	00bc0b00 	adcseq	r0, ip, r0, lsl #22
    21e0:	033e0000 	teqeq	lr, #0
    21e4:	850c0000 	strhi	r0, [ip, #-0]
    21e8:	03000000 	movweq	r0, #0
    21ec:	032e0600 			; <UNDEFINED> instruction: 0x032e0600
    21f0:	3e050000 	cdpcc	0, 0, cr0, cr5, cr0, {0}
    21f4:	0b000003 	bleq	2208 <startup-0x1fffddf8>
    21f8:	000000bc 	strheq	r0, [r0], -ip
    21fc:	00000358 	andeq	r0, r0, r8, asr r3
    2200:	0000850c 	andeq	r8, r0, ip, lsl #10
    2204:	06000400 	streq	r0, [r0], -r0, lsl #8
    2208:	00000348 	andeq	r0, r0, r8, asr #6
    220c:	00035805 	andeq	r5, r3, r5, lsl #16
    2210:	00ac0b00 	adceq	r0, ip, r0, lsl #22
    2214:	03720000 	cmneq	r2, #0
    2218:	850c0000 	strhi	r0, [ip, #-0]
    221c:	04000000 	streq	r0, [r0], #-0
    2220:	04820e00 	streq	r0, [r2], #3584	; 0xe00
    2224:	d7040000 	strle	r0, [r4, -r0]
    2228:	0001e401 	andeq	lr, r1, r1, lsl #8
    222c:	04100f00 	ldreq	r0, [r0], #-3840	; 0xfffff100
    2230:	03bc02bf 			; <UNDEFINED> instruction: 0x03bc02bf
    2234:	c9080000 	stmdbgt	r8, {}	; <UNPREDICTABLE>
    2238:	0400000a 	streq	r0, [r0], #-10
    223c:	00b702c1 	adcseq	r0, r7, r1, asr #5
    2240:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    2244:	00000e8a 	andeq	r0, r0, sl, lsl #29
    2248:	b702c204 	strlt	ip, [r2, -r4, lsl #4]
    224c:	04000000 	streq	r0, [r0], #-0
    2250:	4c415610 	mcrrmi	6, 1, r5, r1, cr0
    2254:	02c30400 	sbceq	r0, r3, #0, 8
    2258:	000000b7 	strheq	r0, [r0], -r7
    225c:	0e010808 	cdpeq	8, 0, cr0, cr1, cr8, {0}
    2260:	c4040000 	strgt	r0, [r4], #-0
    2264:	0000bc02 	andeq	fp, r0, r2, lsl #24
    2268:	0e000c00 	cdpeq	12, 0, cr0, cr0, cr0, {0}
    226c:	00000c14 	andeq	r0, r0, r4, lsl ip
    2270:	7e02c504 	cfsh32vc	mvfx12, mvfx2, #4
    2274:	11000003 	tstne	r0, r3
    2278:	00000fca 	andeq	r0, r0, sl, asr #31
    227c:	a706fa04 	strge	pc, [r6, -r4, lsl #20]
    2280:	12000000 	andne	r0, r0, #0
    2284:	00000840 	andeq	r0, r0, r0, asr #16
    2288:	00ac3b05 	adceq	r3, ip, r5, lsl #22
    228c:	07130000 	ldreq	r0, [r3, -r0]
    2290:	00003701 	andeq	r3, r0, r1, lsl #14
    2294:	035f0600 	cmpeq	pc, #0, 12
    2298:	000003fa 	strdeq	r0, [r0], -sl
    229c:	0009ca14 	andeq	ip, r9, r4, lsl sl
    22a0:	7f140000 	svcvc	0x00140000
    22a4:	0100000f 	tsteq	r0, pc
    22a8:	0cb90e00 	ldceq	14, cr0, [r9]
    22ac:	5f060000 	svcpl	0x00060000
    22b0:	0003df03 	andeq	sp, r3, r3, lsl #30
    22b4:	07041500 	streq	r1, [r4, -r0, lsl #10]
    22b8:	00043f36 	andeq	r3, r4, r6, lsr pc
    22bc:	14731600 	ldrbtne	r1, [r3], #-1536	; 0xfffffa00
    22c0:	38070000 	stmdacc	r7, {}	; <UNPREDICTABLE>
    22c4:	0000008c 	andeq	r0, r0, ip, lsl #1
    22c8:	149e1600 	ldrne	r1, [lr], #1536	; 0x600
    22cc:	3d070000 	stccc	0, cr0, [r7, #-0]
    22d0:	0000008c 	andeq	r0, r0, ip, lsl #1
    22d4:	14831601 	strne	r1, [r3], #1537	; 0x601
    22d8:	42070000 	andmi	r0, r7, #0
    22dc:	0000008c 	andeq	r0, r0, ip, lsl #1
    22e0:	13c01602 	bicne	r1, r0, #2097152	; 0x200000
    22e4:	47070000 	strmi	r0, [r7, -r0]
    22e8:	000003fa 	strdeq	r0, [r0], -sl
    22ec:	af030003 	svcge	0x00030003
    22f0:	07000013 	smladeq	r0, r3, r0, r0
    22f4:	0004064a 	andeq	r0, r4, sl, asr #12
    22f8:	144f1700 	strbne	r1, [pc], #-1792	; 2300 <startup-0x1fffdd00>
    22fc:	df010000 	svcle	0x00010000
    2300:	20001adc 	ldrdcs	r1, [r0], -ip
    2304:	00000034 	andeq	r0, r0, r4, lsr r0
    2308:	046e9c01 	strbteq	r9, [lr], #-3073	; 0xfffff3ff
    230c:	d3180000 	tstle	r8, #0
    2310:	01000013 	tsteq	r0, r3, lsl r0
    2314:	0000acdf 	ldrdeq	sl, [r0], -pc	; <UNPREDICTABLE>
    2318:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    231c:	143b1700 	ldrtne	r1, [fp], #-1792	; 0xfffff900
    2320:	c7010000 	strgt	r0, [r1, -r0]
    2324:	20001a94 	mulcs	r0, r4, sl
    2328:	00000048 	andeq	r0, r0, r8, asr #32
    232c:	04a09c01 	strteq	r9, [r0], #3073	; 0xc01
    2330:	41180000 	tstmi	r8, r0
    2334:	01000015 	tsteq	r0, r5, lsl r0
    2338:	00008cc7 	andeq	r8, r0, r7, asr #25
    233c:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    2340:	000adc18 	andeq	sp, sl, r8, lsl ip
    2344:	fac70100 	blx	ff1c274c <GPIO_Ports+0xdf1bffc8>
    2348:	02000003 	andeq	r0, r0, #3
    234c:	17007691 			; <UNDEFINED> instruction: 0x17007691
    2350:	00001420 	andeq	r1, r0, r0, lsr #8
    2354:	1a68b401 	bne	1a2f360 <startup-0x1e5d0ca0>
    2358:	002c2000 	eoreq	r2, ip, r0
    235c:	9c010000 	stcls	0, cr0, [r1], {-0}
    2360:	000004d2 	ldrdeq	r0, [r0], -r2
    2364:	0014c018 	andseq	ip, r4, r8, lsl r0
    2368:	acb40100 	ldfges	f0, [r4]
    236c:	02000000 	andeq	r0, r0, #0
    2370:	19187491 	ldmdbne	r8, {r0, r4, r7, sl, ip, sp, lr}
    2374:	01000014 	tsteq	r0, r4, lsl r0
    2378:	0000acb4 			; <UNDEFINED> instruction: 0x0000acb4
    237c:	70910200 	addsvc	r0, r1, r0, lsl #4
    2380:	14081700 	strne	r1, [r8], #-1792	; 0xfffff900
    2384:	88010000 	stmdahi	r1, {}	; <UNPREDICTABLE>
    2388:	20001970 	andcs	r1, r0, r0, ror r9
    238c:	000000f8 	strdeq	r0, [r0], -r8
    2390:	05209c01 	streq	r9, [r0, #-3073]!	; 0xfffff3ff
    2394:	e5180000 	ldr	r0, [r8, #-0]
    2398:	01000013 	tsteq	r0, r3, lsl r0
    239c:	00052088 	andeq	r2, r5, r8, lsl #1
    23a0:	64910200 	ldrvs	r0, [r1], #512	; 0x200
    23a4:	00146719 	andseq	r6, r4, r9, lsl r7
    23a8:	8c8a0100 	stfhis	f0, [sl], {0}
    23ac:	02000000 	andeq	r0, r0, #0
    23b0:	12196f91 	andsne	r6, r9, #580	; 0x244
    23b4:	01000014 	tsteq	r0, r4, lsl r0
    23b8:	00008c8a 	andeq	r8, r0, sl, lsl #25
    23bc:	6e910200 	cdpvs	2, 9, cr0, cr1, cr0, {0}
    23c0:	00143419 	andseq	r3, r4, r9, lsl r4
    23c4:	8c8a0100 	stfhis	f0, [sl], {0}
    23c8:	02000000 	andeq	r0, r0, #0
    23cc:	1a006d91 	bne	1da18 <startup-0x1ffe25e8>
    23d0:	00043f04 	andeq	r3, r4, r4, lsl #30
    23d4:	154e1b00 	strbne	r1, [lr, #-2816]	; 0xfffff500
    23d8:	76010000 	strvc	r0, [r1], -r0
    23dc:	2000194c 	andcs	r1, r0, ip, asr #18
    23e0:	00000024 	andeq	r0, r0, r4, lsr #32
    23e4:	f5189c01 			; <UNDEFINED> instruction: 0xf5189c01
    23e8:	01000013 	tsteq	r0, r3, lsl r0
    23ec:	0000ac76 	andeq	sl, r0, r6, ror ip
    23f0:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    23f4:	01a90000 			; <UNDEFINED> instruction: 0x01a90000
    23f8:	00040000 	andeq	r0, r4, r0
    23fc:	00000662 	andeq	r0, r0, r2, ror #12
    2400:	05c90104 	strbeq	r0, [r9, #260]	; 0x104
    2404:	770c0000 	strvc	r0, [ip, -r0]
    2408:	29000015 	stmdbcs	r0, {r0, r2, r4}
    240c:	10000005 	andne	r0, r0, r5
    2410:	2820001b 	stmdacs	r0!, {r0, r1, r3, r4}
    2414:	20000001 	andcs	r0, r0, r1
    2418:	0200000a 	andeq	r0, r0, #10
    241c:	03dc0601 	bicseq	r0, ip, #1048576	; 0x100000
    2420:	b4030000 	strlt	r0, [r3], #-0
    2424:	02000001 	andeq	r0, r0, #1
    2428:	0000372b 	andeq	r3, r0, fp, lsr #14
    242c:	08010200 	stmdaeq	r1, {r9}
    2430:	000003da 	ldrdeq	r0, [r0], -sl
    2434:	25050202 	strcs	r0, [r5, #-514]	; 0xfffffdfe
    2438:	0200000f 	andeq	r0, r0, #15
    243c:	10a90702 	adcne	r0, r9, r2, lsl #14
    2440:	04020000 	streq	r0, [r2], #-0
    2444:	00099105 	andeq	r9, r9, r5, lsl #2
    2448:	07040200 	streq	r0, [r4, -r0, lsl #4]
    244c:	00000cf4 	strdeq	r0, [r0], -r4
    2450:	8c050802 	stchi	8, cr0, [r5], {2}
    2454:	02000009 	andeq	r0, r0, #9
    2458:	0cef0708 	stcleq	7, cr0, [pc], #32	; 2480 <startup-0x1fffdb80>
    245c:	04040000 	streq	r0, [r4], #-0
    2460:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
    2464:	07040200 	streq	r0, [r4, -r0, lsl #4]
    2468:	00000cf9 	strdeq	r0, [r0], -r9
    246c:	0001b603 	andeq	fp, r1, r3, lsl #12
    2470:	2c180300 	ldccs	3, cr0, [r8], {-0}
    2474:	05000000 	streq	r0, [r0, #-0]
    2478:	b90c0467 	stmdblt	ip, {r0, r1, r2, r5, r6, sl}
    247c:	06000000 	streq	r0, [r0], -r0
    2480:	000015df 	ldrdeq	r1, [r0], -pc	; <UNPREDICTABLE>
    2484:	00b90e04 	adcseq	r0, r9, r4, lsl #28
    2488:	06000000 	streq	r0, [r0], -r0
    248c:	00001571 	andeq	r1, r0, r1, ror r5
    2490:	00761104 	rsbseq	r1, r6, r4, lsl #2
    2494:	07640000 	strbeq	r0, [r4, -r0]!
    2498:	04006e69 	streq	r6, [r0], #-3689	; 0xfffff197
    249c:	00007614 	andeq	r7, r0, r4, lsl r6
    24a0:	6f076500 	svcvs	0x00076500
    24a4:	04007475 	streq	r7, [r0], #-1141	; 0xfffffb8b
    24a8:	00007617 	andeq	r7, r0, r7, lsl r6
    24ac:	08006600 	stmdaeq	r0, {r9, sl, sp, lr}
    24b0:	00000076 	andeq	r0, r0, r6, ror r0
    24b4:	000000c9 	andeq	r0, r0, r9, asr #1
    24b8:	00006f09 	andeq	r6, r0, r9, lsl #30
    24bc:	03006300 	movweq	r6, #768	; 0x300
    24c0:	000015c2 	andeq	r1, r0, r2, asr #11
    24c4:	00811804 	addeq	r1, r1, r4, lsl #16
    24c8:	e90a0000 	stmdb	sl, {}	; <UNPREDICTABLE>
    24cc:	01000015 	tsteq	r0, r5, lsl r0
    24d0:	0000762d 	andeq	r7, r0, sp, lsr #12
    24d4:	001bda00 	andseq	sp, fp, r0, lsl #20
    24d8:	00005e20 	andeq	r5, r0, r0, lsr #28
    24dc:	0a9c0100 	beq	fe7028e4 <GPIO_Ports+0xde700160>
    24e0:	0b000001 	bleq	24ec <startup-0x1fffdb14>
    24e4:	000015fe 	strdeq	r1, [r0], -lr
    24e8:	010a2d01 	tsteq	sl, r1, lsl #26
    24ec:	91020000 	mrsls	r0, (UNDEF: 2)
    24f0:	15da0b74 	ldrbne	r0, [sl, #2932]	; 0xb74
    24f4:	2d010000 	stccs	0, cr0, [r1, #-0]
    24f8:	00000110 	andeq	r0, r0, r0, lsl r1
    24fc:	00709102 	rsbseq	r9, r0, r2, lsl #2
    2500:	00c9040c 	sbceq	r0, r9, ip, lsl #8
    2504:	040c0000 	streq	r0, [ip], #-0
    2508:	00000076 	andeq	r0, r0, r6, ror r0
    250c:	0015c70d 	andseq	ip, r5, sp, lsl #14
    2510:	9a1f0100 	bls	7c2918 <startup-0x1f83d6e8>
    2514:	4020001b 	eormi	r0, r0, fp, lsl r0
    2518:	01000000 	mrseq	r0, (UNDEF: 0)
    251c:	0001569c 	muleq	r1, ip, r6
    2520:	15fe0b00 	ldrbne	r0, [lr, #2816]!	; 0xb00
    2524:	1f010000 	svcne	0x00010000
    2528:	0000010a 	andeq	r0, r0, sl, lsl #2
    252c:	0b6c9102 	bleq	1b2693c <startup-0x1e4d96c4>
    2530:	000015e4 	andeq	r1, r0, r4, ror #11
    2534:	00761f01 	rsbseq	r1, r6, r1, lsl #30
    2538:	91020000 	mrsls	r0, (UNDEF: 2)
    253c:	16050e6b 	strne	r0, [r5], -fp, ror #28
    2540:	21010000 	mrscs	r0, (UNDEF: 1)
    2544:	00000076 	andeq	r0, r0, r6, ror r0
    2548:	00779102 	rsbseq	r9, r7, r2, lsl #2
    254c:	0015670a 	andseq	r6, r5, sl, lsl #14
    2550:	760c0100 	strvc	r0, [ip], -r0, lsl #2
    2554:	38000000 	stmdacc	r0, {}	; <UNPREDICTABLE>
    2558:	6220001b 	eorvs	r0, r0, #27
    255c:	01000000 	mrseq	r0, (UNDEF: 0)
    2560:	00018c9c 	muleq	r1, ip, ip
    2564:	15fe0b00 	ldrbne	r0, [lr, #2816]!	; 0xb00
    2568:	0c010000 	stceq	0, cr0, [r1], {-0}
    256c:	0000010a 	andeq	r0, r0, sl, lsl #2
    2570:	0b749102 	bleq	1d26980 <startup-0x1e2d9680>
    2574:	000015e4 	andeq	r1, r0, r4, ror #11
    2578:	00760c01 	rsbseq	r0, r6, r1, lsl #24
    257c:	91020000 	mrsls	r0, (UNDEF: 2)
    2580:	f30f0073 	vqadd.u8	q0, <illegal reg q7.5>, <illegal reg q9.5>
    2584:	01000015 	tsteq	r0, r5, lsl r0
    2588:	001b1004 	andseq	r1, fp, r4
    258c:	00002820 	andeq	r2, r0, r0, lsr #16
    2590:	0b9c0100 	bleq	fe702998 <GPIO_Ports+0xde700214>
    2594:	000015fe 	strdeq	r1, [r0], -lr
    2598:	010a0401 	tsteq	sl, r1, lsl #8
    259c:	91020000 	mrsls	r0, (UNDEF: 2)
    25a0:	cc000074 	stcgt	0, cr0, [r0], {116}	; 0x74
    25a4:	04000009 	streq	r0, [r0], #-9
    25a8:	00074b00 	andeq	r4, r7, r0, lsl #22
    25ac:	c9010400 	stmdbgt	r1, {sl}
    25b0:	0c000005 	stceq	0, cr0, [r0], {5}
    25b4:	000019e0 	andeq	r1, r0, r0, ror #19
    25b8:	00000529 	andeq	r0, r0, r9, lsr #10
    25bc:	20001c38 	andcs	r1, r0, r8, lsr ip
    25c0:	000009fe 	strdeq	r0, [r0], -lr
    25c4:	00000b72 	andeq	r0, r0, r2, ror fp
    25c8:	dc060102 	stfles	f0, [r6], {2}
    25cc:	03000003 	movweq	r0, #3
    25d0:	000001b4 			; <UNDEFINED> instruction: 0x000001b4
    25d4:	00372b02 	eorseq	r2, r7, r2, lsl #22
    25d8:	01020000 	mrseq	r0, (UNDEF: 2)
    25dc:	0003da08 	andeq	sp, r3, r8, lsl #20
    25e0:	05020200 	streq	r0, [r2, #-512]	; 0xfffffe00
    25e4:	00000f25 	andeq	r0, r0, r5, lsr #30
    25e8:	0004e903 	andeq	lr, r4, r3, lsl #18
    25ec:	50390200 	eorspl	r0, r9, r0, lsl #4
    25f0:	02000000 	andeq	r0, r0, #0
    25f4:	10a90702 	adcne	r0, r9, r2, lsl #14
    25f8:	3c030000 	stccc	0, cr0, [r3], {-0}
    25fc:	02000011 	andeq	r0, r0, #17
    2600:	0000624d 	andeq	r6, r0, sp, asr #4
    2604:	05040200 	streq	r0, [r4, #-512]	; 0xfffffe00
    2608:	00000991 	muleq	r0, r1, r9
    260c:	00093a03 	andeq	r3, r9, r3, lsl #20
    2610:	744f0200 	strbvc	r0, [pc], #-512	; 2618 <startup-0x1fffd9e8>
    2614:	02000000 	andeq	r0, r0, #0
    2618:	0cf40704 	ldcleq	7, cr0, [r4], #16
    261c:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    2620:	00098c05 	andeq	r8, r9, r5, lsl #24
    2624:	07080200 	streq	r0, [r8, -r0, lsl #4]
    2628:	00000cef 	andeq	r0, r0, pc, ror #25
    262c:	69050404 	stmdbvs	r5, {r2, sl}
    2630:	0200746e 	andeq	r7, r0, #1845493760	; 0x6e000000
    2634:	0cf90704 	ldcleq	7, cr0, [r9], #16
    2638:	b6030000 	strlt	r0, [r3], -r0
    263c:	03000001 	movweq	r0, #1
    2640:	00002c18 	andeq	r2, r0, r8, lsl ip
    2644:	04eb0300 	strbteq	r0, [fp], #768	; 0x300
    2648:	24030000 	strcs	r0, [r3], #-0
    264c:	00000045 	andeq	r0, r0, r5, asr #32
    2650:	0000a205 	andeq	sl, r0, r5, lsl #4
    2654:	113e0300 	teqne	lr, r0, lsl #6
    2658:	2c030000 	stccs	0, cr0, [r3], {-0}
    265c:	00000057 	andeq	r0, r0, r7, asr r0
    2660:	0000b205 	andeq	fp, r0, r5, lsl #4
    2664:	093c0300 	ldmdbeq	ip!, {r8, r9}
    2668:	30030000 	andcc	r0, r3, r0
    266c:	00000069 	andeq	r0, r0, r9, rrx
    2670:	000fca06 	andeq	ip, pc, r6, lsl #20
    2674:	06fa0400 	ldrbteq	r0, [sl], r0, lsl #8
    2678:	000000bd 	strheq	r0, [r0], -sp
    267c:	00084007 	andeq	r4, r8, r7
    2680:	c23b0500 	eorsgt	r0, fp, #0, 10
    2684:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    2688:	00370107 	eorseq	r0, r7, r7, lsl #2
    268c:	5d060000 	stcpl	0, cr0, [r6, #-0]
    2690:	0000ff03 	andeq	pc, r0, r3, lsl #30
    2694:	12230900 	eorne	r0, r3, #0, 18
    2698:	0a000000 	beq	26a0 <startup-0x1fffd960>
    269c:	00544553 	subseq	r4, r4, r3, asr r5
    26a0:	f40b0001 	vst4.8	{d0-d3}, [fp], r1
    26a4:	06000009 	streq	r0, [r0], -r9
    26a8:	00e4035d 	rsceq	r0, r4, sp, asr r3
    26ac:	b50b0000 	strlt	r0, [fp, #-0]
    26b0:	0600000a 	streq	r0, [r0], -sl
    26b4:	00e4035d 	rsceq	r0, r4, sp, asr r3
    26b8:	07080000 	streq	r0, [r8, -r0]
    26bc:	00003701 	andeq	r3, r0, r1, lsl #14
    26c0:	035f0600 	cmpeq	pc, #0, 12
    26c4:	00000132 	andeq	r0, r0, r2, lsr r1
    26c8:	0009ca09 	andeq	ip, r9, r9, lsl #20
    26cc:	7f090000 	svcvc	0x00090000
    26d0:	0100000f 	tsteq	r0, pc
    26d4:	0cb90b00 	vldmiaeq	r9!, {d0-d-1}
    26d8:	5f060000 	svcpl	0x00060000
    26dc:	00011703 	andeq	r1, r1, r3, lsl #14
    26e0:	061c0c00 	ldreq	r0, [ip], -r0, lsl #24
    26e4:	01fc0773 	mvnseq	r0, r3, ror r7
    26e8:	530d0000 	movwpl	r0, #53248	; 0xd000
    26ec:	75060052 	strvc	r0, [r6, #-82]	; 0xffffffae
    26f0:	0000ad07 	andeq	sl, r0, r7, lsl #26
    26f4:	c60e0000 	strgt	r0, [lr], -r0
    26f8:	06000003 	streq	r0, [r0], -r3
    26fc:	00a20776 	adceq	r0, r2, r6, ror r7
    2700:	0d020000 	stceq	0, cr0, [r2, #-0]
    2704:	06005244 	streq	r5, [r0], -r4, asr #4
    2708:	00ad0777 	adceq	r0, sp, r7, ror r7
    270c:	0e040000 	cdpeq	0, 0, cr0, cr4, cr0, {0}
    2710:	000003d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    2714:	a2077806 	andge	r7, r7, #393216	; 0x60000
    2718:	06000000 	streq	r0, [r0], -r0
    271c:	5252420d 	subspl	r4, r2, #-805306368	; 0xd0000000
    2720:	07790600 	ldrbeq	r0, [r9, -r0, lsl #12]!
    2724:	000000ad 	andeq	r0, r0, sp, lsr #1
    2728:	04540e08 	ldrbeq	r0, [r4], #-3592	; 0xfffff1f8
    272c:	7a060000 	bvc	182734 <startup-0x1fe7d8cc>
    2730:	0000a207 	andeq	sl, r0, r7, lsl #4
    2734:	430d0a00 	movwmi	r0, #55808	; 0xda00
    2738:	06003152 			; <UNDEFINED> instruction: 0x06003152
    273c:	00ad077b 	adceq	r0, sp, fp, ror r7
    2740:	0e0c0000 	cdpeq	0, 0, cr0, cr12, cr0, {0}
    2744:	0000045e 	andeq	r0, r0, lr, asr r4
    2748:	a2077c06 	andge	r7, r7, #1536	; 0x600
    274c:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    2750:	3252430d 	subscc	r4, r2, #872415232	; 0x34000000
    2754:	077d0600 	ldrbeq	r0, [sp, -r0, lsl #12]!
    2758:	000000ad 	andeq	r0, r0, sp, lsr #1
    275c:	03fa0e10 	mvnseq	r0, #16, 28	; 0x100
    2760:	7e060000 	cdpvc	0, 0, cr0, cr6, cr0, {0}
    2764:	0000a207 	andeq	sl, r0, r7, lsl #4
    2768:	430d1200 	movwmi	r1, #53760	; 0xd200
    276c:	06003352 			; <UNDEFINED> instruction: 0x06003352
    2770:	00ad077f 	adceq	r0, sp, pc, ror r7
    2774:	0e140000 	cdpeq	0, 1, cr0, cr4, cr0, {0}
    2778:	00000404 	andeq	r0, r0, r4, lsl #8
    277c:	a2078006 	andge	r8, r7, #6
    2780:	16000000 	strne	r0, [r0], -r0
    2784:	0016290e 	andseq	r2, r6, lr, lsl #18
    2788:	07810600 	streq	r0, [r1, r0, lsl #12]
    278c:	000000ad 	andeq	r0, r0, sp, lsr #1
    2790:	040e0e18 	streq	r0, [lr], #-3608	; 0xfffff1e8
    2794:	82060000 	andhi	r0, r6, #0
    2798:	0000a207 	andeq	sl, r0, r7, lsl #4
    279c:	0b001a00 	bleq	8fa4 <startup-0x1fff705c>
    27a0:	00001695 	muleq	r0, r5, r6
    27a4:	3e078306 	cdpcc	3, 0, cr8, cr7, cr6, {0}
    27a8:	0f000001 	svceq	0x00000001
    27ac:	59360710 	ldmdbpl	r6!, {r4, r8, r9, sl}
    27b0:	10000002 	andne	r0, r0, r2
    27b4:	0000171b 	andeq	r1, r0, fp, lsl r7
    27b8:	00c23807 	sbceq	r3, r2, r7, lsl #16
    27bc:	10000000 	andne	r0, r0, r0
    27c0:	000016ef 	andeq	r1, r0, pc, ror #13
    27c4:	00a23e07 	adceq	r3, r2, r7, lsl #28
    27c8:	10040000 	andne	r0, r4, r0
    27cc:	000016a3 	andeq	r1, r0, r3, lsr #13
    27d0:	00a24107 	adceq	r4, r2, r7, lsl #2
    27d4:	10060000 	andne	r0, r6, r0
    27d8:	000017b9 			; <UNDEFINED> instruction: 0x000017b9
    27dc:	00a24407 	adceq	r4, r2, r7, lsl #8
    27e0:	10080000 	andne	r0, r8, r0
    27e4:	0000188d 	andeq	r1, r0, sp, lsl #17
    27e8:	00a24b07 	adceq	r4, r2, r7, lsl #22
    27ec:	100a0000 	andne	r0, sl, r0
    27f0:	00001860 	andeq	r1, r0, r0, ror #16
    27f4:	00a24e07 	adceq	r4, r2, r7, lsl #28
    27f8:	000c0000 	andeq	r0, ip, r0
    27fc:	00182b03 	andseq	r2, r8, r3, lsl #22
    2800:	08510700 	ldmdaeq	r1, {r8, r9, sl}^
    2804:	0f000002 	svceq	0x00000002
    2808:	9d570708 	ldclls	7, cr0, [r7, #-32]	; 0xffffffe0
    280c:	10000002 	andne	r0, r0, r2
    2810:	000018f4 	strdeq	r1, [r0], -r4
    2814:	00a25a07 	adceq	r5, r2, r7, lsl #20
    2818:	10000000 	andne	r0, r0, r0
    281c:	000019ce 	andeq	r1, r0, lr, asr #19
    2820:	00a25d07 	adceq	r5, r2, r7, lsl #26
    2824:	10020000 	andne	r0, r2, r0
    2828:	0000161e 	andeq	r1, r0, lr, lsl r6
    282c:	00a26007 	adceq	r6, r2, r7
    2830:	10040000 	andne	r0, r4, r0
    2834:	0000170d 	andeq	r1, r0, sp, lsl #14
    2838:	00a26307 	adceq	r6, r2, r7, lsl #6
    283c:	00060000 	andeq	r0, r6, r0
    2840:	0016b203 	andseq	fp, r6, r3, lsl #4
    2844:	64660700 	strbtvs	r0, [r6], #-1792	; 0xfffff900
    2848:	0f000002 	svceq	0x00000002
    284c:	e1300810 	teq	r0, r0, lsl r8
    2850:	10000002 	andne	r0, r0, r2
    2854:	000010ef 	andeq	r1, r0, pc, ror #1
    2858:	00c23208 	sbceq	r3, r2, r8, lsl #4
    285c:	10000000 	andne	r0, r0, r0
    2860:	0000008c 	andeq	r0, r0, ip, lsl #1
    2864:	00c23308 	sbceq	r3, r2, r8, lsl #6
    2868:	10040000 	andne	r0, r4, r0
    286c:	00000586 	andeq	r0, r0, r6, lsl #11
    2870:	00c23408 	sbceq	r3, r2, r8, lsl #8
    2874:	10080000 	andne	r0, r8, r0
    2878:	000004fc 	strdeq	r0, [r0], -ip
    287c:	00c23508 	sbceq	r3, r2, r8, lsl #10
    2880:	000c0000 	andeq	r0, ip, r0
    2884:	000efc03 	andeq	pc, lr, r3, lsl #24
    2888:	a8360800 	ldmdage	r6!, {fp}
    288c:	11000002 	tstne	r0, r2
    2890:	00001742 	andeq	r1, r0, r2, asr #14
    2894:	ee05ac01 	cdp	12, 0, cr10, cr5, cr1, {0}
    2898:	48200025 	stmdami	r0!, {r0, r2, r5}
    289c:	01000000 	mrseq	r0, (UNDEF: 0)
    28a0:	00033f9c 	muleq	r3, ip, pc	; <UNPREDICTABLE>
    28a4:	18591200 	ldmdane	r9, {r9, ip}^
    28a8:	ac010000 	stcge	0, cr0, [r1], {-0}
    28ac:	00033f05 	andeq	r3, r3, r5, lsl #30
    28b0:	6c910200 	lfmvs	f0, 4, [r1], {0}
    28b4:	00194b12 	andseq	r4, r9, r2, lsl fp
    28b8:	05ac0100 	streq	r0, [ip, #256]!	; 0x100
    28bc:	000000a2 	andeq	r0, r0, r2, lsr #1
    28c0:	136a9102 	cmnne	sl, #-2147483648	; 0x80000000
    28c4:	000018a6 	andeq	r1, r0, r6, lsr #17
    28c8:	a205ae01 	andge	sl, r5, #1, 28
    28cc:	02000000 	andeq	r0, r0, #0
    28d0:	d9137691 	ldmdble	r3, {r0, r4, r7, r9, sl, ip, sp, lr}
    28d4:	01000019 	tsteq	r0, r9, lsl r0
    28d8:	00a205ae 	adceq	r0, r2, lr, lsr #11
    28dc:	91020000 	mrsls	r0, (UNDEF: 2)
    28e0:	04140074 	ldreq	r0, [r4], #-116	; 0xffffff8c
    28e4:	000001fc 	strdeq	r0, [r0], -ip
    28e8:	0018c415 	andseq	ip, r8, r5, lsl r4
    28ec:	05620100 	strbeq	r0, [r2, #-256]!	; 0xffffff00
    28f0:	0000010b 	andeq	r0, r0, fp, lsl #2
    28f4:	20002524 	andcs	r2, r0, r4, lsr #10
    28f8:	000000ca 	andeq	r0, r0, sl, asr #1
    28fc:	03ba9c01 			; <UNDEFINED> instruction: 0x03ba9c01
    2900:	59120000 	ldmdbpl	r2, {}	; <UNPREDICTABLE>
    2904:	01000018 	tsteq	r0, r8, lsl r0
    2908:	033f0562 	teqeq	pc, #411041792	; 0x18800000
    290c:	91020000 	mrsls	r0, (UNDEF: 2)
    2910:	194b1264 	stmdbne	fp, {r2, r5, r6, r9, ip}^
    2914:	62010000 	andvs	r0, r1, #0
    2918:	0000a205 	andeq	sl, r0, r5, lsl #4
    291c:	62910200 	addsvs	r0, r1, #0, 4
    2920:	0018a613 	andseq	sl, r8, r3, lsl r6
    2924:	05640100 	strbeq	r0, [r4, #-256]!	; 0xffffff00
    2928:	000000c2 	andeq	r0, r0, r2, asr #1
    292c:	136c9102 	cmnne	ip, #-2147483648	; 0x80000000
    2930:	000019d9 	ldrdeq	r1, [r0], -r9
    2934:	c2056401 	andgt	r6, r5, #16777216	; 0x1000000
    2938:	02000000 	andeq	r0, r0, #0
    293c:	71137491 			; <UNDEFINED> instruction: 0x71137491
    2940:	0100001a 	tsteq	r0, sl, lsl r0
    2944:	00c20564 	sbceq	r0, r2, r4, ror #10
    2948:	91020000 	mrsls	r0, (UNDEF: 2)
    294c:	0f751368 	svceq	0x00751368
    2950:	65010000 	strvs	r0, [r1, #-0]
    2954:	00010b05 	andeq	r0, r1, r5, lsl #22
    2958:	73910200 	orrsvc	r0, r1, #0, 4
    295c:	17e71100 	strbne	r1, [r7, r0, lsl #2]!
    2960:	40010000 	andmi	r0, r1, r0
    2964:	00250205 	eoreq	r0, r5, r5, lsl #4
    2968:	00002220 	andeq	r2, r0, r0, lsr #4
    296c:	ef9c0100 	svc	0x009c0100
    2970:	12000003 	andne	r0, r0, #3
    2974:	00001859 	andeq	r1, r0, r9, asr r8
    2978:	3f054001 	svccc	0x00054001
    297c:	02000003 	andeq	r0, r0, #3
    2980:	8b127491 	blhi	49fbcc <startup-0x1fb60434>
    2984:	01000017 	tsteq	r0, r7, lsl r0
    2988:	00a20540 	adceq	r0, r2, r0, asr #10
    298c:	91020000 	mrsls	r0, (UNDEF: 2)
    2990:	37150072 			; <UNDEFINED> instruction: 0x37150072
    2994:	01000019 	tsteq	r0, r9, lsl r0
    2998:	00ff050f 	rscseq	r0, pc, pc, lsl #10
    299c:	24ba0000 	ldrtcs	r0, [sl], #0
    29a0:	00482000 	subeq	r2, r8, r0
    29a4:	9c010000 	stcls	0, cr0, [r1], {-0}
    29a8:	00000437 	andeq	r0, r0, r7, lsr r4
    29ac:	00185912 	andseq	r5, r8, r2, lsl r9
    29b0:	050f0100 	streq	r0, [pc, #-256]	; 28b8 <startup-0x1fffd748>
    29b4:	0000033f 	andeq	r0, r0, pc, lsr r3
    29b8:	126c9102 	rsbne	r9, ip, #-2147483648	; 0x80000000
    29bc:	0000178b 	andeq	r1, r0, fp, lsl #15
    29c0:	a2050f01 	andge	r0, r5, #1, 30
    29c4:	02000000 	andeq	r0, r0, #0
    29c8:	75136a91 	ldrvc	r6, [r3, #-2705]	; 0xfffff56f
    29cc:	0100000f 	tsteq	r0, pc
    29d0:	00ff0511 	rscseq	r0, pc, r1, lsl r5	; <UNPREDICTABLE>
    29d4:	91020000 	mrsls	r0, (UNDEF: 2)
    29d8:	3d110077 	ldccc	0, cr0, [r1, #-476]	; 0xfffffe24
    29dc:	01000018 	tsteq	r0, r8, lsl r0
    29e0:	242004cf 	strtcs	r0, [r0], #-1231	; 0xfffffb31
    29e4:	009a2000 	addseq	r2, sl, r0
    29e8:	9c010000 	stcls	0, cr0, [r1], {-0}
    29ec:	000004b7 			; <UNDEFINED> instruction: 0x000004b7
    29f0:	00185912 	andseq	r5, r8, r2, lsl r9
    29f4:	04cf0100 	strbeq	r0, [pc], #256	; 29fc <startup-0x1fffd604>
    29f8:	0000033f 	andeq	r0, r0, pc, lsr r3
    29fc:	12649102 	rsbne	r9, r4, #-2147483648	; 0x80000000
    2a00:	0000194b 	andeq	r1, r0, fp, asr #18
    2a04:	a204cf01 	andge	ip, r4, #1, 30
    2a08:	02000000 	andeq	r0, r0, #0
    2a0c:	dc126291 	lfmle	f6, 4, [r2], {145}	; 0x91
    2a10:	0100000a 	tsteq	r0, sl
    2a14:	013204cf 	teqeq	r2, pc, asr #9
    2a18:	91020000 	mrsls	r0, (UNDEF: 2)
    2a1c:	1a711361 	bne	1c477a8 <startup-0x1e3b8858>
    2a20:	d1010000 	mrsle	r0, (UNDEF: 1)
    2a24:	0000c204 	andeq	ip, r0, r4, lsl #4
    2a28:	70910200 	addsvc	r0, r1, r0, lsl #4
    2a2c:	0018a713 	andseq	sl, r8, r3, lsl r7
    2a30:	04d10100 	ldrbeq	r0, [r1], #256	; 0x100
    2a34:	000000c2 	andeq	r0, r0, r2, asr #1
    2a38:	136c9102 	cmnne	ip, #-2147483648	; 0x80000000
    2a3c:	000019d9 	ldrdeq	r1, [r0], -r9
    2a40:	c204d101 	andgt	sp, r4, #1073741824	; 0x40000000
    2a44:	02000000 	andeq	r0, r0, #0
    2a48:	dc136891 	ldcle	8, cr6, [r3], {145}	; 0x91
    2a4c:	01000017 	tsteq	r0, r7, lsl r0
    2a50:	00c204d2 	ldrdeq	r0, [r2], #66	; 0x42
    2a54:	91020000 	mrsls	r0, (UNDEF: 2)
    2a58:	00110074 	andseq	r0, r1, r4, ror r0
    2a5c:	01000017 	tsteq	r0, r7, lsl r0
    2a60:	23ce044b 	biccs	r0, lr, #1258291200	; 0x4b000000
    2a64:	00522000 	subseq	r2, r2, r0
    2a68:	9c010000 	stcls	0, cr0, [r1], {-0}
    2a6c:	000004fb 	strdeq	r0, [r0], -fp
    2a70:	00185912 	andseq	r5, r8, r2, lsl r9
    2a74:	044b0100 	strbeq	r0, [fp], #-256	; 0xffffff00
    2a78:	0000033f 	andeq	r0, r0, pc, lsr r3
    2a7c:	12749102 	rsbsne	r9, r4, #-2147483648	; 0x80000000
    2a80:	0000184c 	andeq	r1, r0, ip, asr #16
    2a84:	a2044b01 	andge	r4, r4, #1024	; 0x400
    2a88:	02000000 	andeq	r0, r0, #0
    2a8c:	dc127291 	lfmle	f7, 4, [r2], {145}	; 0x91
    2a90:	0100000a 	tsteq	r0, sl
    2a94:	0132044b 	teqeq	r2, fp, asr #8
    2a98:	91020000 	mrsls	r0, (UNDEF: 2)
    2a9c:	00110071 	andseq	r0, r1, r1, ror r0
    2aa0:	01000019 	tsteq	r0, r9, lsl r0
    2aa4:	238e041d 	orrcs	r0, lr, #486539264	; 0x1d000000
    2aa8:	00402000 	subeq	r2, r0, r0
    2aac:	9c010000 	stcls	0, cr0, [r1], {-0}
    2ab0:	00000530 	andeq	r0, r0, r0, lsr r5
    2ab4:	00185912 	andseq	r5, r8, r2, lsl r9
    2ab8:	041d0100 	ldreq	r0, [sp], #-256	; 0xffffff00
    2abc:	0000033f 	andeq	r0, r0, pc, lsr r3
    2ac0:	12749102 	rsbsne	r9, r4, #-2147483648	; 0x80000000
    2ac4:	00000adc 	ldrdeq	r0, [r0], -ip
    2ac8:	32041d01 	andcc	r1, r4, #1, 26	; 0x40
    2acc:	02000001 	andeq	r0, r0, #1
    2ad0:	11007391 			; <UNDEFINED> instruction: 0x11007391
    2ad4:	000018e3 	andeq	r1, r0, r3, ror #17
    2ad8:	56040b01 	strpl	r0, [r4], -r1, lsl #22
    2adc:	38200023 	stmdacc	r0!, {r0, r1, r5}
    2ae0:	01000000 	mrseq	r0, (UNDEF: 0)
    2ae4:	0005659c 	muleq	r5, ip, r5
    2ae8:	18591200 	ldmdane	r9, {r9, ip}^
    2aec:	0b010000 	bleq	42af4 <startup-0x1ffbd50c>
    2af0:	00033f04 	andeq	r3, r3, r4, lsl #30
    2af4:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    2af8:	00172a12 	andseq	r2, r7, r2, lsl sl
    2afc:	040b0100 	streq	r0, [fp], #-256	; 0xffffff00
    2b00:	000000a2 	andeq	r0, r0, r2, lsr #1
    2b04:	00729102 	rsbseq	r9, r2, r2, lsl #2
    2b08:	00192011 	andseq	r2, r9, r1, lsl r0
    2b0c:	03c40100 	biceq	r0, r4, #0, 2
    2b10:	20002316 	andcs	r2, r0, r6, lsl r3
    2b14:	00000040 	andeq	r0, r0, r0, asr #32
    2b18:	059a9c01 	ldreq	r9, [sl, #3073]	; 0xc01
    2b1c:	59120000 	ldmdbpl	r2, {}	; <UNPREDICTABLE>
    2b20:	01000018 	tsteq	r0, r8, lsl r0
    2b24:	033f03c4 	teqeq	pc, #196, 6	; 0x10000003
    2b28:	91020000 	mrsls	r0, (UNDEF: 2)
    2b2c:	0adc1274 	beq	ff707504 <GPIO_Ports+0xdf704d80>
    2b30:	c4010000 	strgt	r0, [r1], #-0
    2b34:	00013203 	andeq	r3, r1, r3, lsl #4
    2b38:	73910200 	orrsvc	r0, r1, #0, 4
    2b3c:	187a1100 	ldmdane	sl!, {r8, ip}^
    2b40:	ab010000 	blge	42b48 <startup-0x1ffbd4b8>
    2b44:	0022d603 	eoreq	sp, r2, r3, lsl #12
    2b48:	00004020 	andeq	r4, r0, r0, lsr #32
    2b4c:	cf9c0100 	svcgt	0x009c0100
    2b50:	12000005 	andne	r0, r0, #5
    2b54:	00001859 	andeq	r1, r0, r9, asr r8
    2b58:	3f03ab01 	svccc	0x0003ab01
    2b5c:	02000003 	andeq	r0, r0, #3
    2b60:	dc127491 	cfldrsle	mvf7, [r2], {145}	; 0x91
    2b64:	0100000a 	tsteq	r0, sl
    2b68:	013203ab 	teqeq	r2, fp, lsr #7
    2b6c:	91020000 	mrsls	r0, (UNDEF: 2)
    2b70:	08110073 	ldmdaeq	r1, {r0, r1, r4, r5, r6}
    2b74:	01000018 	tsteq	r0, r8, lsl r0
    2b78:	22980398 	addscs	r0, r8, #152, 6	; 0x60000002
    2b7c:	003e2000 	eorseq	r2, lr, r0
    2b80:	9c010000 	stcls	0, cr0, [r1], {-0}
    2b84:	00000604 	andeq	r0, r0, r4, lsl #12
    2b88:	00185912 	andseq	r5, r8, r2, lsl r9
    2b8c:	03980100 	orrseq	r0, r8, #0, 2
    2b90:	0000033f 	andeq	r0, r0, pc, lsr r3
    2b94:	12749102 	rsbsne	r9, r4, #-2147483648	; 0x80000000
    2b98:	0000175a 	andeq	r1, r0, sl, asr r7
    2b9c:	97039801 	strls	r9, [r3, -r1, lsl #16]
    2ba0:	02000000 	andeq	r0, r0, #0
    2ba4:	11007391 			; <UNDEFINED> instruction: 0x11007391
    2ba8:	00001999 	muleq	r0, r9, r9
    2bac:	58034401 	stmdapl	r3, {r0, sl, lr}
    2bb0:	40200022 	eormi	r0, r0, r2, lsr #32
    2bb4:	01000000 	mrseq	r0, (UNDEF: 0)
    2bb8:	0006399c 	muleq	r6, ip, r9
    2bbc:	18591200 	ldmdane	r9, {r9, ip}^
    2bc0:	44010000 	strmi	r0, [r1], #-0
    2bc4:	00033f03 	andeq	r3, r3, r3, lsl #30
    2bc8:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    2bcc:	000adc12 	andeq	sp, sl, r2, lsl ip
    2bd0:	03440100 	movteq	r0, #16640	; 0x4100
    2bd4:	00000132 	andeq	r0, r0, r2, lsr r1
    2bd8:	00739102 	rsbseq	r9, r3, r2, lsl #2
    2bdc:	00181b11 	andseq	r1, r8, r1, lsl fp
    2be0:	030f0100 	movweq	r0, #61696	; 0xf100
    2be4:	20002238 	andcs	r2, r0, r8, lsr r2
    2be8:	00000020 	andeq	r0, r0, r0, lsr #32
    2bec:	065f9c01 	ldrbeq	r9, [pc], -r1, lsl #24
    2bf0:	59120000 	ldmdbpl	r2, {}	; <UNPREDICTABLE>
    2bf4:	01000018 	tsteq	r0, r8, lsl r0
    2bf8:	033f030f 	teqeq	pc, #1006632960	; 0x3c000000
    2bfc:	91020000 	mrsls	r0, (UNDEF: 2)
    2c00:	d6110074 			; <UNDEFINED> instruction: 0xd6110074
    2c04:	01000018 	tsteq	r0, r8, lsl r0
    2c08:	21f002f7 	ldrshcs	r0, [r0, #39]!	; 0x27
    2c0c:	00482000 	subeq	r2, r8, r0
    2c10:	9c010000 	stcls	0, cr0, [r1], {-0}
    2c14:	00000694 	muleq	r0, r4, r6
    2c18:	00185912 	andseq	r5, r8, r2, lsl r9
    2c1c:	02f70100 	rscseq	r0, r7, #0, 2
    2c20:	0000033f 	andeq	r0, r0, pc, lsr r3
    2c24:	12749102 	rsbsne	r9, r4, #-2147483648	; 0x80000000
    2c28:	00000adc 	ldrdeq	r0, [r0], -ip
    2c2c:	3202f701 	andcc	pc, r2, #262144	; 0x40000
    2c30:	02000001 	andeq	r0, r0, #1
    2c34:	11007391 			; <UNDEFINED> instruction: 0x11007391
    2c38:	0000176a 	andeq	r1, r0, sl, ror #14
    2c3c:	b802e501 	stmdalt	r2, {r0, r8, sl, sp, lr, pc}
    2c40:	38200021 	stmdacc	r0!, {r0, r5}
    2c44:	01000000 	mrseq	r0, (UNDEF: 0)
    2c48:	0006c99c 	muleq	r6, ip, r9
    2c4c:	18591200 	ldmdane	r9, {r9, ip}^
    2c50:	e5010000 	str	r0, [r1, #-0]
    2c54:	00033f02 	andeq	r3, r3, r2, lsl #30
    2c58:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    2c5c:	00166412 	andseq	r6, r6, r2, lsl r4
    2c60:	02e50100 	rsceq	r0, r5, #0, 2
    2c64:	000000a2 	andeq	r0, r0, r2, lsr #1
    2c68:	00729102 	rsbseq	r9, r2, r2, lsl #2
    2c6c:	00198611 	andseq	r8, r9, r1, lsl r6
    2c70:	02a00100 	adceq	r0, r0, #0, 2
    2c74:	2000217a 	andcs	r2, r0, sl, ror r1
    2c78:	0000003e 	andeq	r0, r0, lr, lsr r0
    2c7c:	06fe9c01 	ldrbteq	r9, [lr], r1, lsl #24
    2c80:	59120000 	ldmdbpl	r2, {}	; <UNPREDICTABLE>
    2c84:	01000018 	tsteq	r0, r8, lsl r0
    2c88:	033f02a0 	teqeq	pc, #160, 4
    2c8c:	91020000 	mrsls	r0, (UNDEF: 2)
    2c90:	16e21274 			; <UNDEFINED> instruction: 0x16e21274
    2c94:	a0010000 	andge	r0, r1, r0
    2c98:	0000a202 	andeq	sl, r0, r2, lsl #4
    2c9c:	72910200 	addsvc	r0, r1, #0, 4
    2ca0:	162e1100 	strtne	r1, [lr], -r0, lsl #2
    2ca4:	85010000 	strhi	r0, [r1, #-0]
    2ca8:	00213a02 	eoreq	r3, r1, r2, lsl #20
    2cac:	00004020 	andeq	r4, r0, r0, lsr #32
    2cb0:	339c0100 	orrscc	r0, ip, #0, 2
    2cb4:	12000007 	andne	r0, r0, #7
    2cb8:	00001859 	andeq	r1, r0, r9, asr r8
    2cbc:	3f028501 	svccc	0x00028501
    2cc0:	02000003 	andeq	r0, r0, #3
    2cc4:	dc127491 	cfldrsle	mvf7, [r2], {145}	; 0x91
    2cc8:	0100000a 	tsteq	r0, sl
    2ccc:	01320285 	teqeq	r2, r5, lsl #5
    2cd0:	91020000 	mrsls	r0, (UNDEF: 2)
    2cd4:	f7110073 			; <UNDEFINED> instruction: 0xf7110073
    2cd8:	01000017 	tsteq	r0, r7, lsl r0
    2cdc:	21000271 	tstcs	r0, r1, ror r2
    2ce0:	003a2000 	eorseq	r2, sl, r0
    2ce4:	9c010000 	stcls	0, cr0, [r1], {-0}
    2ce8:	00000768 	andeq	r0, r0, r8, ror #14
    2cec:	00185912 	andseq	r5, r8, r2, lsl r9
    2cf0:	02710100 	rsbseq	r0, r1, #0, 2
    2cf4:	0000033f 	andeq	r0, r0, pc, lsr r3
    2cf8:	12749102 	rsbsne	r9, r4, #-2147483648	; 0x80000000
    2cfc:	00001898 	muleq	r0, r8, r8
    2d00:	97027101 	strls	r7, [r2, -r1, lsl #2]
    2d04:	02000000 	andeq	r0, r0, #0
    2d08:	15007391 	strne	r7, [r0, #-913]	; 0xfffffc6f
    2d0c:	00001a5f 	andeq	r1, r0, pc, asr sl
    2d10:	a2023d01 	andge	r3, r2, #1, 26	; 0x40
    2d14:	e4000000 	str	r0, [r0], #-0
    2d18:	1c200020 	stcne	0, cr0, [r0], #-128	; 0xffffff80
    2d1c:	01000000 	mrseq	r0, (UNDEF: 0)
    2d20:	0007929c 	muleq	r7, ip, r2
    2d24:	18591200 	ldmdane	r9, {r9, ip}^
    2d28:	3d010000 	stccc	0, cr0, [r1, #-0]
    2d2c:	00033f02 	andeq	r3, r3, r2, lsl #30
    2d30:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    2d34:	16d31100 	ldrbne	r1, [r3], r0, lsl #2
    2d38:	2d010000 	stccs	0, cr0, [r1, #-0]
    2d3c:	0020c002 	eoreq	ip, r0, r2
    2d40:	00002420 	andeq	r2, r0, r0, lsr #8
    2d44:	c79c0100 	ldrgt	r0, [ip, r0, lsl #2]
    2d48:	12000007 	andne	r0, r0, #7
    2d4c:	00001859 	andeq	r1, r0, r9, asr r8
    2d50:	3f022d01 	svccc	0x00022d01
    2d54:	02000003 	andeq	r0, r0, #3
    2d58:	dd127491 	cfldrsle	mvf7, [r2, #-580]	; 0xfffffdbc
    2d5c:	01000016 	tsteq	r0, r6, lsl r0
    2d60:	00a2022d 	adceq	r0, r2, sp, lsr #4
    2d64:	91020000 	mrsls	r0, (UNDEF: 2)
    2d68:	7f110072 	svcvc	0x00110072
    2d6c:	01000016 	tsteq	r0, r6, lsl r0
    2d70:	207801f4 	ldrshtcs	r0, [r8], #-20	; 0xffffffec
    2d74:	00482000 	subeq	r2, r8, r0
    2d78:	9c010000 	stcls	0, cr0, [r1], {-0}
    2d7c:	000007fc 	strdeq	r0, [r0], -ip
    2d80:	00185912 	andseq	r5, r8, r2, lsl r9
    2d84:	01f40100 	mvnseq	r0, r0, lsl #2
    2d88:	0000033f 	andeq	r0, r0, pc, lsr r3
    2d8c:	12749102 	rsbsne	r9, r4, #-2147483648	; 0x80000000
    2d90:	00000adc 	ldrdeq	r0, [r0], -ip
    2d94:	3201f401 	andcc	pc, r1, #16777216	; 0x1000000
    2d98:	02000001 	andeq	r0, r0, #1
    2d9c:	11007391 			; <UNDEFINED> instruction: 0x11007391
    2da0:	000018ad 	andeq	r1, r0, sp, lsr #17
    2da4:	3201da01 	andcc	sp, r1, #4096	; 0x1000
    2da8:	46200020 	strtmi	r0, [r0], -r0, lsr #32
    2dac:	01000000 	mrseq	r0, (UNDEF: 0)
    2db0:	0008319c 	muleq	r8, ip, r1
    2db4:	18591200 	ldmdane	r9, {r9, ip}^
    2db8:	da010000 	ble	42dc0 <startup-0x1ffbd240>
    2dbc:	00033f01 	andeq	r3, r3, r1, lsl #30
    2dc0:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    2dc4:	000adc12 	andeq	sp, sl, r2, lsl ip
    2dc8:	01da0100 	bicseq	r0, sl, r0, lsl #2
    2dcc:	00000132 	andeq	r0, r0, r2, lsr r1
    2dd0:	00739102 	rsbseq	r9, r3, r2, lsl #2
    2dd4:	00164611 	andseq	r4, r6, r1, lsl r6
    2dd8:	01c50100 	biceq	r0, r5, r0, lsl #2
    2ddc:	20001ff8 	strdcs	r1, [r0], -r8
    2de0:	0000003a 	andeq	r0, r0, sl, lsr r0
    2de4:	08669c01 	stmdaeq	r6!, {r0, sl, fp, ip, pc}^
    2de8:	59120000 	ldmdbpl	r2, {}	; <UNPREDICTABLE>
    2dec:	01000018 	tsteq	r0, r8, lsl r0
    2df0:	033f01c5 	teqeq	pc, #1073741873	; 0x40000031
    2df4:	91020000 	mrsls	r0, (UNDEF: 2)
    2df8:	19be1274 	ldmibne	lr!, {r2, r4, r5, r6, r9, ip}
    2dfc:	c5010000 	strgt	r0, [r1, #-0]
    2e00:	00009701 	andeq	r9, r0, r1, lsl #14
    2e04:	73910200 	orrsvc	r0, r1, #0, 4
    2e08:	16c91100 	strbne	r1, [r9], r0, lsl #2
    2e0c:	ab010000 	blge	42e14 <startup-0x1ffbd1ec>
    2e10:	001fb001 	andseq	fp, pc, r1
    2e14:	00004820 	andeq	r4, r0, r0, lsr #16
    2e18:	9b9c0100 	blls	fe703220 <GPIO_Ports+0xde700a9c>
    2e1c:	12000008 	andne	r0, r0, #8
    2e20:	00001859 	andeq	r1, r0, r9, asr r8
    2e24:	3f01ab01 	svccc	0x0001ab01
    2e28:	02000003 	andeq	r0, r0, #3
    2e2c:	dc127491 	cfldrsle	mvf7, [r2], {145}	; 0x91
    2e30:	0100000a 	tsteq	r0, sl
    2e34:	013201ab 	teqeq	r2, fp, lsr #3
    2e38:	91020000 	mrsls	r0, (UNDEF: 2)
    2e3c:	c6110073 			; <UNDEFINED> instruction: 0xc6110073
    2e40:	01000017 	tsteq	r0, r7, lsl r0
    2e44:	1f88019a 	svcne	0x0088019a
    2e48:	00282000 	eoreq	r2, r8, r0
    2e4c:	9c010000 	stcls	0, cr0, [r1], {-0}
    2e50:	000008c1 	andeq	r0, r0, r1, asr #17
    2e54:	0017a312 	andseq	sl, r7, r2, lsl r3
    2e58:	019a0100 	orrseq	r0, sl, r0, lsl #2
    2e5c:	000008c1 	andeq	r0, r0, r1, asr #17
    2e60:	00749102 	rsbseq	r9, r4, r2, lsl #2
    2e64:	029d0414 	addseq	r0, sp, #20, 8	; 0x14000000
    2e68:	76110000 	ldrvc	r0, [r1], -r0
    2e6c:	01000019 	tsteq	r0, r9, lsl r0
    2e70:	1f32017b 	svcne	0x0032017b
    2e74:	00562000 	subseq	r2, r6, r0
    2e78:	9c010000 	stcls	0, cr0, [r1], {-0}
    2e7c:	0000090b 	andeq	r0, r0, fp, lsl #18
    2e80:	00185912 	andseq	r5, r8, r2, lsl r9
    2e84:	017b0100 	cmneq	fp, r0, lsl #2
    2e88:	0000033f 	andeq	r0, r0, pc, lsr r3
    2e8c:	126c9102 	rsbne	r9, ip, #-2147483648	; 0x80000000
    2e90:	000017a3 	andeq	r1, r0, r3, lsr #15
    2e94:	c1017b01 	tstgt	r1, r1, lsl #22
    2e98:	02000008 	andeq	r0, r0, #8
    2e9c:	0c136891 	ldceq	8, cr6, [r3], {145}	; 0x91
    2ea0:	0100000e 	tsteq	r0, lr
    2ea4:	00c2017d 	sbceq	r0, r2, sp, ror r1
    2ea8:	91020000 	mrsls	r0, (UNDEF: 2)
    2eac:	ad110074 	ldcge	0, cr0, [r1, #-464]	; 0xfffffe30
    2eb0:	01000019 	tsteq	r0, r9, lsl r0
    2eb4:	1efc0167 	cdpne	1, 15, cr0, cr12, cr7, {3}
    2eb8:	00362000 	eorseq	r2, r6, r0
    2ebc:	9c010000 	stcls	0, cr0, [r1], {-0}
    2ec0:	00000931 	andeq	r0, r0, r1, lsr r9
    2ec4:	00195412 	andseq	r5, r9, r2, lsl r4
    2ec8:	01670100 	cmneq	r7, r0, lsl #2
    2ecc:	00000931 	andeq	r0, r0, r1, lsr r9
    2ed0:	00749102 	rsbseq	r9, r4, r2, lsl #2
    2ed4:	02590414 	subseq	r0, r9, #20, 8	; 0x14000000
    2ed8:	59160000 	ldmdbpl	r6, {}	; <UNPREDICTABLE>
    2edc:	01000016 	tsteq	r0, r6, lsl r0
    2ee0:	001d68f6 			; <UNDEFINED> instruction: 0x001d68f6
    2ee4:	00019420 	andeq	r9, r1, r0, lsr #8
    2ee8:	af9c0100 	svcge	0x009c0100
    2eec:	17000009 	strne	r0, [r0, -r9]
    2ef0:	00001859 	andeq	r1, r0, r9, asr r8
    2ef4:	033ff601 	teqeq	pc, #1048576	; 0x100000	; <UNPREDICTABLE>
    2ef8:	91020000 	mrsls	r0, (UNDEF: 2)
    2efc:	19541754 	ldmdbne	r4, {r2, r4, r6, r8, r9, sl, ip}^
    2f00:	f6010000 			; <UNDEFINED> instruction: 0xf6010000
    2f04:	00000931 	andeq	r0, r0, r1, lsr r9
    2f08:	18509102 	ldmdane	r0, {r1, r8, ip, pc}^
    2f0c:	00000e0c 	andeq	r0, r0, ip, lsl #28
    2f10:	00c2f801 	sbceq	pc, r2, r1, lsl #16
    2f14:	91020000 	mrsls	r0, (UNDEF: 2)
    2f18:	17391874 			; <UNDEFINED> instruction: 0x17391874
    2f1c:	f8010000 			; <UNDEFINED> instruction: 0xf8010000
    2f20:	000000c2 	andeq	r0, r0, r2, asr #1
    2f24:	18709102 	ldmdane	r0!, {r1, r8, ip, pc}^
    2f28:	0000160f 	andeq	r1, r0, pc, lsl #12
    2f2c:	00c2f901 	sbceq	pc, r2, r1, lsl #18
    2f30:	91020000 	mrsls	r0, (UNDEF: 2)
    2f34:	190e186c 	stmdbne	lr, {r2, r3, r5, r6, fp, ip}
    2f38:	fa010000 	blx	42f40 <startup-0x1ffbd0c0>
    2f3c:	000000c2 	andeq	r0, r0, r2, asr #1
    2f40:	18689102 	stmdane	r8!, {r1, r8, ip, pc}^
    2f44:	00001965 	andeq	r1, r0, r5, ror #18
    2f48:	02e1fb01 	rsceq	pc, r1, #1024	; 0x400
    2f4c:	91020000 	mrsls	r0, (UNDEF: 2)
    2f50:	96190058 			; <UNDEFINED> instruction: 0x96190058
    2f54:	01000017 	tsteq	r0, r7, lsl r0
    2f58:	001c38bb 			; <UNDEFINED> instruction: 0x001c38bb
    2f5c:	00013020 	andeq	r3, r1, r0, lsr #32
    2f60:	179c0100 	ldrne	r0, [ip, r0, lsl #2]
    2f64:	00001859 	andeq	r1, r0, r9, asr r8
    2f68:	033fbb01 	teqeq	pc, #1024	; 0x400
    2f6c:	91020000 	mrsls	r0, (UNDEF: 2)
    2f70:	Address 0x00002f70 is out of bounds.


Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
   0:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
   4:	030b130e 	movweq	r1, #45838	; 0xb30e
   8:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xfffff4f2
   c:	10011117 	andne	r1, r1, r7, lsl r1
  10:	02000017 	andeq	r0, r0, #23
  14:	0e030104 	adfeqs	f0, f3, f4
  18:	0b0b0b3e 	bleq	2c2d18 <startup-0x1fd3d2e8>
  1c:	0b3a1349 	bleq	e84d48 <startup-0x1f17b2b8>
  20:	13010b3b 	movwne	r0, #6971	; 0x1b3b
  24:	28030000 	stmdacs	r3, {}	; <UNPREDICTABLE>
  28:	1c0e0300 	stcne	3, cr0, [lr], {-0}
  2c:	0400000d 	streq	r0, [r0], #-13
  30:	0e030028 	cdpeq	0, 0, cr0, cr3, cr8, {1}
  34:	00000b1c 	andeq	r0, r0, ip, lsl fp
  38:	0b002405 	bleq	9054 <startup-0x1fff6fac>
  3c:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
  40:	0600000e 	streq	r0, [r0], -lr
  44:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
  48:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
  4c:	00001349 	andeq	r1, r0, r9, asr #6
  50:	03001607 	movweq	r1, #1543	; 0x607
  54:	3b0b3a0e 	blcc	2ce894 <startup-0x1fd3176c>
  58:	0013490b 	andseq	r4, r3, fp, lsl #18
  5c:	00240800 	eoreq	r0, r4, r0, lsl #16
  60:	0b3e0b0b 	bleq	f82c94 <startup-0x1f07d36c>
  64:	00000803 	andeq	r0, r0, r3, lsl #16
  68:	49003509 	stmdbmi	r0, {r0, r3, r8, sl, ip, sp}
  6c:	0a000013 	beq	c0 <startup-0x1fffff40>
  70:	13490026 	movtne	r0, #36902	; 0x9026
  74:	130b0000 	movwne	r0, #45056	; 0xb000
  78:	3a050b01 	bcc	142c84 <startup-0x1febd37c>
  7c:	01053b0b 	tsteq	r5, fp, lsl #22
  80:	0c000013 	stceq	0, cr0, [r0], {19}
  84:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
  88:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
  8c:	0b381349 	bleq	e04db8 <startup-0x1f1fb248>
  90:	0d0d0000 	stceq	0, cr0, [sp, #-0]
  94:	3a0e0300 	bcc	380c9c <startup-0x1fc7f364>
  98:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
  9c:	00053813 	andeq	r3, r5, r3, lsl r8
  a0:	000d0e00 	andeq	r0, sp, r0, lsl #28
  a4:	0b3a0803 	bleq	e820b8 <startup-0x1f17df48>
  a8:	1349053b 	movtne	r0, #38203	; 0x953b
  ac:	00000538 	andeq	r0, r0, r8, lsr r5
  b0:	4901010f 	stmdbmi	r1, {r0, r1, r2, r3, r8}
  b4:	00130113 	andseq	r0, r3, r3, lsl r1
  b8:	00211000 	eoreq	r1, r1, r0
  bc:	0b2f1349 	bleq	bc4de8 <startup-0x1f43b218>
  c0:	21110000 	tstcs	r1, r0
  c4:	2f134900 	svccs	0x00134900
  c8:	12000005 	andne	r0, r0, #5
  cc:	0b0b0113 	bleq	2c0520 <startup-0x1fd3fae0>
  d0:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
  d4:	00001301 	andeq	r1, r0, r1, lsl #6
  d8:	03000d13 	movweq	r0, #3347	; 0xd13
  dc:	3b0b3a08 	blcc	2ce904 <startup-0x1fd316fc>
  e0:	38134905 	ldmdacc	r3, {r0, r2, r8, fp, lr}
  e4:	1400000b 	strne	r0, [r0], #-11
  e8:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
  ec:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
  f0:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
  f4:	0000193c 	andeq	r1, r0, ip, lsr r9
  f8:	03003415 	movweq	r3, #1045	; 0x415
  fc:	3b0b3a0e 	blcc	2ce93c <startup-0x1fd316c4>
 100:	3f13490b 	svccc	0x0013490b
 104:	00193c19 	andseq	r3, r9, r9, lsl ip
 108:	01041600 	tsteq	r4, r0, lsl #12
 10c:	0b0b0b3e 	bleq	2c2e0c <startup-0x1fd3d1f4>
 110:	0b3a1349 	bleq	e84e3c <startup-0x1f17b1c4>
 114:	1301053b 	movwne	r0, #5435	; 0x153b
 118:	28170000 	ldmdacs	r7, {}	; <UNPREDICTABLE>
 11c:	1c080300 	stcne	3, cr0, [r8], {-0}
 120:	1800000b 	stmdane	r0, {r0, r1, r3}
 124:	0b0b0113 	bleq	2c0578 <startup-0x1fd3fa88>
 128:	0b3b0b3a 	bleq	ec2e18 <startup-0x1f13d1e8>
 12c:	00001301 	andeq	r1, r0, r1, lsl #6
 130:	03000d19 	movweq	r0, #3353	; 0xd19
 134:	3b0b3a0e 	blcc	2ce974 <startup-0x1fd3168c>
 138:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
 13c:	1a00000b 	bne	170 <startup-0x1ffffe90>
 140:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 144:	0b3b0b3a 	bleq	ec2e34 <startup-0x1f13d1cc>
 148:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 14c:	041b0000 	ldreq	r0, [fp], #-0
 150:	0b0b3e01 	bleq	2cf95c <startup-0x1fd306a4>
 154:	3a13490b 	bcc	4d2588 <startup-0x1fb2da78>
 158:	010b3b0b 	tsteq	fp, fp, lsl #22
 15c:	1c000013 	stcne	0, cr0, [r0], {19}
 160:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
 164:	0b3a0b0b 	bleq	e82d98 <startup-0x1f17d268>
 168:	13010b3b 	movwne	r0, #6971	; 0x1b3b
 16c:	0d1d0000 	ldceq	0, cr0, [sp, #-0]
 170:	3a080300 	bcc	200d78 <startup-0x1fdff288>
 174:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 178:	000b3813 	andeq	r3, fp, r3, lsl r8
 17c:	000f1e00 	andeq	r1, pc, r0, lsl #28
 180:	13490b0b 	movtne	r0, #39691	; 0x9b0b
 184:	341f0000 	ldrcc	r0, [pc], #-0	; 18c <startup-0x1ffffe74>
 188:	3a0e0300 	bcc	380d90 <startup-0x1fc7f270>
 18c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 190:	02193f13 	andseq	r3, r9, #19, 30	; 0x4c
 194:	20000018 	andcs	r0, r0, r8, lsl r0
 198:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 19c:	0b3a0e03 	bleq	e839b0 <startup-0x1f17c650>
 1a0:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 1a4:	06120111 			; <UNDEFINED> instruction: 0x06120111
 1a8:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 1ac:	00130119 	andseq	r0, r3, r9, lsl r1
 1b0:	010b2100 	mrseq	r2, (UNDEF: 27)
 1b4:	06120111 			; <UNDEFINED> instruction: 0x06120111
 1b8:	00001301 	andeq	r1, r0, r1, lsl #6
 1bc:	03003422 	movweq	r3, #1058	; 0x422
 1c0:	3b0b3a08 	blcc	2ce9e8 <startup-0x1fd31618>
 1c4:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 1c8:	23000018 	movwcs	r0, #24
 1cc:	0111010b 	tsteq	r1, fp, lsl #2
 1d0:	00000612 	andeq	r0, r0, r2, lsl r6
 1d4:	49002124 	stmdbmi	r0, {r2, r5, r8, sp}
 1d8:	00182f13 	andseq	r2, r8, r3, lsl pc
 1dc:	012e2500 			; <UNDEFINED> instruction: 0x012e2500
 1e0:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 1e4:	0b3b0b3a 	bleq	ec2ed4 <startup-0x1f13d12c>
 1e8:	01111927 	tsteq	r1, r7, lsr #18
 1ec:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 1f0:	01194297 			; <UNDEFINED> instruction: 0x01194297
 1f4:	26000013 			; <UNDEFINED> instruction: 0x26000013
 1f8:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
 1fc:	0b3b0b3a 	bleq	ec2eec <startup-0x1f13d114>
 200:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 204:	2e270000 	cdpcs	0, 2, cr0, cr7, cr0, {0}
 208:	03193f00 	tsteq	r9, #0, 30
 20c:	3b0b3a0e 	blcc	2cea4c <startup-0x1fd315b4>
 210:	1119270b 	tstne	r9, fp, lsl #14
 214:	40061201 	andmi	r1, r6, r1, lsl #4
 218:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 21c:	2e280000 	cdpcs	0, 2, cr0, cr8, cr0, {0}
 220:	03193f01 	tsteq	r9, #1, 30
 224:	3b0b3a0e 	blcc	2cea64 <startup-0x1fd3159c>
 228:	1201110b 	andne	r1, r1, #-1073741822	; 0xc0000002
 22c:	96184006 	ldrls	r4, [r8], -r6
 230:	13011942 	movwne	r1, #6466	; 0x1942
 234:	2e290000 	cdpcs	0, 2, cr0, cr9, cr0, {0}
 238:	03193f01 	tsteq	r9, #1, 30
 23c:	3b0b3a0e 	blcc	2cea7c <startup-0x1fd31584>
 240:	11192705 	tstne	r9, r5, lsl #14
 244:	40061201 	andmi	r1, r6, r1, lsl #4
 248:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 24c:	00001301 	andeq	r1, r0, r1, lsl #6
 250:	0300052a 	movweq	r0, #1322	; 0x52a
 254:	3b0b3a0e 	blcc	2cea94 <startup-0x1fd3156c>
 258:	02134905 	andseq	r4, r3, #81920	; 0x14000
 25c:	2b000018 	blcs	2c4 <startup-0x1ffffd3c>
 260:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 264:	0b3a0e03 	bleq	e83a78 <startup-0x1f17c588>
 268:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
 26c:	01111349 	tsteq	r1, r9, asr #6
 270:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 274:	01194297 			; <UNDEFINED> instruction: 0x01194297
 278:	2c000013 	stccs	0, cr0, [r0], {19}
 27c:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 280:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 284:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 288:	2e2d0000 	cdpcs	0, 2, cr0, cr13, cr0, {0}
 28c:	03193f00 	tsteq	r9, #0, 30
 290:	3b0b3a0e 	blcc	2cead0 <startup-0x1fd31530>
 294:	11192705 	tstne	r9, r5, lsl #14
 298:	40061201 	andmi	r1, r6, r1, lsl #4
 29c:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 2a0:	342e0000 	strtcc	r0, [lr], #-0
 2a4:	3a080300 	bcc	200eac <startup-0x1fdff154>
 2a8:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 2ac:	00180213 	andseq	r0, r8, r3, lsl r2
 2b0:	012e2f00 			; <UNDEFINED> instruction: 0x012e2f00
 2b4:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 2b8:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 2bc:	01111927 	tsteq	r1, r7, lsr #18
 2c0:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 2c4:	01194296 			; <UNDEFINED> instruction: 0x01194296
 2c8:	30000013 	andcc	r0, r0, r3, lsl r0
 2cc:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
 2d0:	0b3a0e03 	bleq	e83ae4 <startup-0x1f17c51c>
 2d4:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
 2d8:	01111349 	tsteq	r1, r9, asr #6
 2dc:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 2e0:	00194297 	mulseq	r9, r7, r2
 2e4:	012e3100 			; <UNDEFINED> instruction: 0x012e3100
 2e8:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 2ec:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 2f0:	13491927 	movtne	r1, #39207	; 0x9927
 2f4:	06120111 			; <UNDEFINED> instruction: 0x06120111
 2f8:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 2fc:	00130119 	andseq	r0, r3, r9, lsl r1
 300:	012e3200 			; <UNDEFINED> instruction: 0x012e3200
 304:	0b3a0e03 	bleq	e83b18 <startup-0x1f17c4e8>
 308:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
 30c:	01111349 	tsteq	r1, r9, asr #6
 310:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 314:	01194296 			; <UNDEFINED> instruction: 0x01194296
 318:	33000013 	movwcc	r0, #19
 31c:	0e03012e 	adfeqsp	f0, f3, #0.5
 320:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 324:	01111927 	tsteq	r1, r7, lsr #18
 328:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 32c:	00194297 	mulseq	r9, r7, r2
 330:	11010000 	mrsne	r0, (UNDEF: 1)
 334:	130e2501 	movwne	r2, #58625	; 0xe501
 338:	1b0e030b 	blne	380f6c <startup-0x1fc7f094>
 33c:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
 340:	00171006 	andseq	r1, r7, r6
 344:	00240200 	eoreq	r0, r4, r0, lsl #4
 348:	0b3e0b0b 	bleq	f82f7c <startup-0x1f07d084>
 34c:	00000e03 	andeq	r0, r0, r3, lsl #28
 350:	03001603 	movweq	r1, #1539	; 0x603
 354:	3b0b3a0e 	blcc	2ceb94 <startup-0x1fd3146c>
 358:	0013490b 	andseq	r4, r3, fp, lsl #18
 35c:	00240400 	eoreq	r0, r4, r0, lsl #8
 360:	0b3e0b0b 	bleq	f82f94 <startup-0x1f07d06c>
 364:	00000803 	andeq	r0, r0, r3, lsl #16
 368:	49003505 	stmdbmi	r0, {r0, r2, r8, sl, ip, sp}
 36c:	06000013 			; <UNDEFINED> instruction: 0x06000013
 370:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 374:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 378:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
 37c:	0000193c 	andeq	r1, r0, ip, lsr r9
 380:	03003407 	movweq	r3, #1031	; 0x407
 384:	3b0b3a0e 	blcc	2cebc4 <startup-0x1fd3143c>
 388:	3f13490b 	svccc	0x0013490b
 38c:	00193c19 	andseq	r3, r9, r9, lsl ip
 390:	01040800 	tsteq	r4, r0, lsl #16
 394:	0b0b0b3e 	bleq	2c3094 <startup-0x1fd3cf6c>
 398:	0b3a1349 	bleq	e850c4 <startup-0x1f17af3c>
 39c:	1301053b 	movwne	r0, #5435	; 0x153b
 3a0:	28090000 	stmdacs	r9, {}	; <UNPREDICTABLE>
 3a4:	1c0e0300 	stcne	3, cr0, [lr], {-0}
 3a8:	0a00000b 	beq	3dc <startup-0x1ffffc24>
 3ac:	0b0b0113 	bleq	2c0800 <startup-0x1fd3f800>
 3b0:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 3b4:	00001301 	andeq	r1, r0, r1, lsl #6
 3b8:	03000d0b 	movweq	r0, #3339	; 0xd0b
 3bc:	3b0b3a0e 	blcc	2cebfc <startup-0x1fd31404>
 3c0:	38134905 	ldmdacc	r3, {r0, r2, r8, fp, lr}
 3c4:	0c00000b 	stceq	0, cr0, [r0], {11}
 3c8:	0803000d 	stmdaeq	r3, {r0, r2, r3}
 3cc:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 3d0:	0b381349 	bleq	e050fc <startup-0x1f1faf04>
 3d4:	010d0000 	mrseq	r0, (UNDEF: 13)
 3d8:	01134901 	tsteq	r3, r1, lsl #18
 3dc:	0e000013 	mcreq	0, 0, r0, cr0, cr3, {0}
 3e0:	13490021 	movtne	r0, #36897	; 0x9021
 3e4:	00000b2f 	andeq	r0, r0, pc, lsr #22
 3e8:	0300160f 	movweq	r1, #1551	; 0x60f
 3ec:	3b0b3a0e 	blcc	2cec2c <startup-0x1fd313d4>
 3f0:	00134905 	andseq	r4, r3, r5, lsl #18
 3f4:	01041000 	mrseq	r1, (UNDEF: 4)
 3f8:	0b0b0b3e 	bleq	2c30f8 <startup-0x1fd3cf08>
 3fc:	0b3a1349 	bleq	e85128 <startup-0x1f17aed8>
 400:	13010b3b 	movwne	r0, #6971	; 0x1b3b
 404:	13110000 	tstne	r1, #0
 408:	3a0b0b01 	bcc	2c3014 <startup-0x1fd3cfec>
 40c:	010b3b0b 	tsteq	fp, fp, lsl #22
 410:	12000013 	andne	r0, r0, #19
 414:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
 418:	0b3b0b3a 	bleq	ec3108 <startup-0x1f13cef8>
 41c:	0b381349 	bleq	e05148 <startup-0x1f1faeb8>
 420:	2e130000 	cdpcs	0, 1, cr0, cr3, cr0, {0}
 424:	03193f01 	tsteq	r9, #1, 30
 428:	3b0b3a0e 	blcc	2cec68 <startup-0x1fd31398>
 42c:	11192705 	tstne	r9, r5, lsl #14
 430:	40061201 	andmi	r1, r6, r1, lsl #4
 434:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 438:	00001301 	andeq	r1, r0, r1, lsl #6
 43c:	03000514 	movweq	r0, #1300	; 0x514
 440:	3b0b3a0e 	blcc	2cec80 <startup-0x1fd31380>
 444:	02134905 	andseq	r4, r3, #81920	; 0x14000
 448:	15000018 	strne	r0, [r0, #-24]	; 0xffffffe8
 44c:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 450:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 454:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 458:	0f160000 	svceq	0x00160000
 45c:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
 460:	17000013 	smladne	r0, r3, r0, r0
 464:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 468:	0b3a0e03 	bleq	e83c7c <startup-0x1f17c384>
 46c:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
 470:	01111349 	tsteq	r1, r9, asr #6
 474:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 478:	01194297 			; <UNDEFINED> instruction: 0x01194297
 47c:	18000013 	stmdane	r0, {r0, r1, r4}
 480:	08030034 	stmdaeq	r3, {r2, r4, r5}
 484:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 488:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 48c:	2e190000 	cdpcs	0, 1, cr0, cr9, cr0, {0}
 490:	03193f01 	tsteq	r9, #1, 30
 494:	3b0b3a0e 	blcc	2cecd4 <startup-0x1fd3132c>
 498:	1119270b 	tstne	r9, fp, lsl #14
 49c:	40061201 	andmi	r1, r6, r1, lsl #4
 4a0:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 4a4:	00001301 	andeq	r1, r0, r1, lsl #6
 4a8:	0300051a 	movweq	r0, #1306	; 0x51a
 4ac:	3b0b3a0e 	blcc	2cecec <startup-0x1fd31314>
 4b0:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 4b4:	1b000018 	blne	51c <startup-0x1ffffae4>
 4b8:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 4bc:	0b3b0b3a 	bleq	ec31ac <startup-0x1f13ce54>
 4c0:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 4c4:	341c0000 	ldrcc	r0, [ip], #-0
 4c8:	3a080300 	bcc	2010d0 <startup-0x1fdfef30>
 4cc:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 4d0:	00180213 	andseq	r0, r8, r3, lsl r2
 4d4:	012e1d00 			; <UNDEFINED> instruction: 0x012e1d00
 4d8:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 4dc:	0b3b0b3a 	bleq	ec31cc <startup-0x1f13ce34>
 4e0:	01111927 	tsteq	r1, r7, lsr #18
 4e4:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 4e8:	00194296 	mulseq	r9, r6, r2
 4ec:	11010000 	mrsne	r0, (UNDEF: 1)
 4f0:	130e2501 	movwne	r2, #58625	; 0xe501
 4f4:	1b0e030b 	blne	381128 <startup-0x1fc7eed8>
 4f8:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
 4fc:	00171006 	andseq	r1, r7, r6
 500:	00240200 	eoreq	r0, r4, r0, lsl #4
 504:	0b3e0b0b 	bleq	f83138 <startup-0x1f07cec8>
 508:	00000e03 	andeq	r0, r0, r3, lsl #28
 50c:	03001603 	movweq	r1, #1539	; 0x603
 510:	3b0b3a0e 	blcc	2ced50 <startup-0x1fd312b0>
 514:	0013490b 	andseq	r4, r3, fp, lsl #18
 518:	00240400 	eoreq	r0, r4, r0, lsl #8
 51c:	0b3e0b0b 	bleq	f83150 <startup-0x1f07ceb0>
 520:	00000803 	andeq	r0, r0, r3, lsl #16
 524:	49003505 	stmdbmi	r0, {r0, r2, r8, sl, ip, sp}
 528:	06000013 			; <UNDEFINED> instruction: 0x06000013
 52c:	13490026 	movtne	r0, #36902	; 0x9026
 530:	13070000 	movwne	r0, #28672	; 0x7000
 534:	3a050b01 	bcc	143140 <startup-0x1febcec0>
 538:	01053b0b 	tsteq	r5, fp, lsl #22
 53c:	08000013 	stmdaeq	r0, {r0, r1, r4}
 540:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
 544:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 548:	0b381349 	bleq	e05274 <startup-0x1f1fad8c>
 54c:	0d090000 	stceq	0, cr0, [r9, #-0]
 550:	3a0e0300 	bcc	381158 <startup-0x1fc7eea8>
 554:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 558:	00053813 	andeq	r3, r5, r3, lsl r8
 55c:	000d0a00 	andeq	r0, sp, r0, lsl #20
 560:	0b3a0803 	bleq	e82574 <startup-0x1f17da8c>
 564:	1349053b 	movtne	r0, #38203	; 0x953b
 568:	00000538 	andeq	r0, r0, r8, lsr r5
 56c:	4901010b 	stmdbmi	r1, {r0, r1, r3, r8}
 570:	00130113 	andseq	r0, r3, r3, lsl r1
 574:	00210c00 	eoreq	r0, r1, r0, lsl #24
 578:	0b2f1349 	bleq	bc52a4 <startup-0x1f43ad5c>
 57c:	210d0000 	mrscs	r0, (UNDEF: 13)
 580:	2f134900 	svccs	0x00134900
 584:	0e000005 	cdpeq	0, 0, cr0, cr0, cr5, {0}
 588:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
 58c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 590:	00001349 	andeq	r1, r0, r9, asr #6
 594:	0b01130f 	bleq	451d8 <startup-0x1ffbae28>
 598:	3b0b3a0b 	blcc	2cedcc <startup-0x1fd31234>
 59c:	00130105 	andseq	r0, r3, r5, lsl #2
 5a0:	000d1000 	andeq	r1, sp, r0
 5a4:	0b3a0803 	bleq	e825b8 <startup-0x1f17da48>
 5a8:	1349053b 	movtne	r0, #38203	; 0x953b
 5ac:	00000b38 	andeq	r0, r0, r8, lsr fp
 5b0:	03003411 	movweq	r3, #1041	; 0x411
 5b4:	3b0b3a0e 	blcc	2cedf4 <startup-0x1fd3120c>
 5b8:	3f134905 	svccc	0x00134905
 5bc:	00193c19 	andseq	r3, r9, r9, lsl ip
 5c0:	00341200 	eorseq	r1, r4, r0, lsl #4
 5c4:	0b3a0e03 	bleq	e83dd8 <startup-0x1f17c228>
 5c8:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 5cc:	193c193f 	ldmdbne	ip!, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
 5d0:	04130000 	ldreq	r0, [r3], #-0
 5d4:	0b0b3e01 	bleq	2cfde0 <startup-0x1fd30220>
 5d8:	3a13490b 	bcc	4d2a0c <startup-0x1fb2d5f4>
 5dc:	01053b0b 	tsteq	r5, fp, lsl #22
 5e0:	14000013 	strne	r0, [r0], #-19	; 0xffffffed
 5e4:	0e030028 	cdpeq	0, 0, cr0, cr3, cr8, {1}
 5e8:	00000b1c 	andeq	r0, r0, ip, lsl fp
 5ec:	0b011315 	bleq	45248 <startup-0x1ffbadb8>
 5f0:	3b0b3a0b 	blcc	2cee24 <startup-0x1fd311dc>
 5f4:	0013010b 	andseq	r0, r3, fp, lsl #2
 5f8:	000d1600 	andeq	r1, sp, r0, lsl #12
 5fc:	0b3a0e03 	bleq	e83e10 <startup-0x1f17c1f0>
 600:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 604:	00000b38 	andeq	r0, r0, r8, lsr fp
 608:	3f012e17 	svccc	0x00012e17
 60c:	3a0e0319 	bcc	381278 <startup-0x1fc7ed88>
 610:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 614:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 618:	97184006 	ldrls	r4, [r8, -r6]
 61c:	13011942 	movwne	r1, #6466	; 0x1942
 620:	05180000 	ldreq	r0, [r8, #-0]
 624:	3a0e0300 	bcc	38122c <startup-0x1fc7edd4>
 628:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 62c:	00180213 	andseq	r0, r8, r3, lsl r2
 630:	00341900 	eorseq	r1, r4, r0, lsl #18
 634:	0b3a0e03 	bleq	e83e48 <startup-0x1f17c1b8>
 638:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 63c:	00001802 	andeq	r1, r0, r2, lsl #16
 640:	0b000f1a 	bleq	42b0 <startup-0x1fffbd50>
 644:	0013490b 	andseq	r4, r3, fp, lsl #18
 648:	012e1b00 			; <UNDEFINED> instruction: 0x012e1b00
 64c:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 650:	0b3b0b3a 	bleq	ec3340 <startup-0x1f13ccc0>
 654:	01111927 	tsteq	r1, r7, lsr #18
 658:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 65c:	00194297 	mulseq	r9, r7, r2
 660:	11010000 	mrsne	r0, (UNDEF: 1)
 664:	130e2501 	movwne	r2, #58625	; 0xe501
 668:	1b0e030b 	blne	38129c <startup-0x1fc7ed64>
 66c:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
 670:	00171006 	andseq	r1, r7, r6
 674:	00240200 	eoreq	r0, r4, r0, lsl #4
 678:	0b3e0b0b 	bleq	f832ac <startup-0x1f07cd54>
 67c:	00000e03 	andeq	r0, r0, r3, lsl #28
 680:	03001603 	movweq	r1, #1539	; 0x603
 684:	3b0b3a0e 	blcc	2ceec4 <startup-0x1fd3113c>
 688:	0013490b 	andseq	r4, r3, fp, lsl #18
 68c:	00240400 	eoreq	r0, r4, r0, lsl #8
 690:	0b3e0b0b 	bleq	f832c4 <startup-0x1f07cd3c>
 694:	00000803 	andeq	r0, r0, r3, lsl #16
 698:	0b011305 	bleq	452b4 <startup-0x1ffbad4c>
 69c:	3b0b3a0b 	blcc	2ceed0 <startup-0x1fd31130>
 6a0:	0013010b 	andseq	r0, r3, fp, lsl #2
 6a4:	000d0600 	andeq	r0, sp, r0, lsl #12
 6a8:	0b3a0e03 	bleq	e83ebc <startup-0x1f17c144>
 6ac:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 6b0:	00000b38 	andeq	r0, r0, r8, lsr fp
 6b4:	03000d07 	movweq	r0, #3335	; 0xd07
 6b8:	3b0b3a08 	blcc	2ceee0 <startup-0x1fd31120>
 6bc:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
 6c0:	0800000b 	stmdaeq	r0, {r0, r1, r3}
 6c4:	13490101 	movtne	r0, #37121	; 0x9101
 6c8:	00001301 	andeq	r1, r0, r1, lsl #6
 6cc:	49002109 	stmdbmi	r0, {r0, r3, r8, sp}
 6d0:	000b2f13 	andeq	r2, fp, r3, lsl pc
 6d4:	012e0a00 			; <UNDEFINED> instruction: 0x012e0a00
 6d8:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 6dc:	0b3b0b3a 	bleq	ec33cc <startup-0x1f13cc34>
 6e0:	13491927 	movtne	r1, #39207	; 0x9927
 6e4:	06120111 			; <UNDEFINED> instruction: 0x06120111
 6e8:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 6ec:	00130119 	andseq	r0, r3, r9, lsl r1
 6f0:	00050b00 	andeq	r0, r5, r0, lsl #22
 6f4:	0b3a0e03 	bleq	e83f08 <startup-0x1f17c0f8>
 6f8:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 6fc:	00001802 	andeq	r1, r0, r2, lsl #16
 700:	0b000f0c 	bleq	4338 <startup-0x1fffbcc8>
 704:	0013490b 	andseq	r4, r3, fp, lsl #18
 708:	012e0d00 			; <UNDEFINED> instruction: 0x012e0d00
 70c:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 710:	0b3b0b3a 	bleq	ec3400 <startup-0x1f13cc00>
 714:	01111927 	tsteq	r1, r7, lsr #18
 718:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 71c:	01194297 			; <UNDEFINED> instruction: 0x01194297
 720:	0e000013 	mcreq	0, 0, r0, cr0, cr3, {0}
 724:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 728:	0b3b0b3a 	bleq	ec3418 <startup-0x1f13cbe8>
 72c:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 730:	2e0f0000 	cdpcs	0, 0, cr0, cr15, cr0, {0}
 734:	03193f01 	tsteq	r9, #1, 30
 738:	3b0b3a0e 	blcc	2cef78 <startup-0x1fd31088>
 73c:	1119270b 	tstne	r9, fp, lsl #14
 740:	40061201 	andmi	r1, r6, r1, lsl #4
 744:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 748:	01000000 	mrseq	r0, (UNDEF: 0)
 74c:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
 750:	0e030b13 	vmoveq.32	d3[0], r0
 754:	01110e1b 	tsteq	r1, fp, lsl lr
 758:	17100612 			; <UNDEFINED> instruction: 0x17100612
 75c:	24020000 	strcs	r0, [r2], #-0
 760:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 764:	000e030b 	andeq	r0, lr, fp, lsl #6
 768:	00160300 	andseq	r0, r6, r0, lsl #6
 76c:	0b3a0e03 	bleq	e83f80 <startup-0x1f17c080>
 770:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 774:	24040000 	strcs	r0, [r4], #-0
 778:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 77c:	0008030b 	andeq	r0, r8, fp, lsl #6
 780:	00350500 	eorseq	r0, r5, r0, lsl #10
 784:	00001349 	andeq	r1, r0, r9, asr #6
 788:	03003406 	movweq	r3, #1030	; 0x406
 78c:	3b0b3a0e 	blcc	2cefcc <startup-0x1fd31034>
 790:	3f134905 	svccc	0x00134905
 794:	00193c19 	andseq	r3, r9, r9, lsl ip
 798:	00340700 	eorseq	r0, r4, r0, lsl #14
 79c:	0b3a0e03 	bleq	e83fb0 <startup-0x1f17c050>
 7a0:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 7a4:	193c193f 	ldmdbne	ip!, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
 7a8:	04080000 	streq	r0, [r8], #-0
 7ac:	0b0b3e01 	bleq	2cffb8 <startup-0x1fd30048>
 7b0:	3a13490b 	bcc	4d2be4 <startup-0x1fb2d41c>
 7b4:	01053b0b 	tsteq	r5, fp, lsl #22
 7b8:	09000013 	stmdbeq	r0, {r0, r1, r4}
 7bc:	0e030028 	cdpeq	0, 0, cr0, cr3, cr8, {1}
 7c0:	00000b1c 	andeq	r0, r0, ip, lsl fp
 7c4:	0300280a 	movweq	r2, #2058	; 0x80a
 7c8:	000b1c08 	andeq	r1, fp, r8, lsl #24
 7cc:	00160b00 	andseq	r0, r6, r0, lsl #22
 7d0:	0b3a0e03 	bleq	e83fe4 <startup-0x1f17c01c>
 7d4:	1349053b 	movtne	r0, #38203	; 0x953b
 7d8:	130c0000 	movwne	r0, #49152	; 0xc000
 7dc:	3a0b0b01 	bcc	2c33e8 <startup-0x1fd3cc18>
 7e0:	01053b0b 	tsteq	r5, fp, lsl #22
 7e4:	0d000013 	stceq	0, cr0, [r0, #-76]	; 0xffffffb4
 7e8:	0803000d 	stmdaeq	r3, {r0, r2, r3}
 7ec:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 7f0:	0b381349 	bleq	e0551c <startup-0x1f1faae4>
 7f4:	0d0e0000 	stceq	0, cr0, [lr, #-0]
 7f8:	3a0e0300 	bcc	381400 <startup-0x1fc7ec00>
 7fc:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 800:	000b3813 	andeq	r3, fp, r3, lsl r8
 804:	01130f00 	tsteq	r3, r0, lsl #30
 808:	0b3a0b0b 	bleq	e8343c <startup-0x1f17cbc4>
 80c:	13010b3b 	movwne	r0, #6971	; 0x1b3b
 810:	0d100000 	ldceq	0, cr0, [r0, #-0]
 814:	3a0e0300 	bcc	38141c <startup-0x1fc7ebe4>
 818:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 81c:	000b3813 	andeq	r3, fp, r3, lsl r8
 820:	012e1100 			; <UNDEFINED> instruction: 0x012e1100
 824:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 828:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 82c:	01111927 	tsteq	r1, r7, lsr #18
 830:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 834:	01194297 			; <UNDEFINED> instruction: 0x01194297
 838:	12000013 	andne	r0, r0, #19
 83c:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
 840:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 844:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 848:	34130000 	ldrcc	r0, [r3], #-0
 84c:	3a0e0300 	bcc	381454 <startup-0x1fc7ebac>
 850:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 854:	00180213 	andseq	r0, r8, r3, lsl r2
 858:	000f1400 	andeq	r1, pc, r0, lsl #8
 85c:	13490b0b 	movtne	r0, #39691	; 0x9b0b
 860:	2e150000 	cdpcs	0, 1, cr0, cr5, cr0, {0}
 864:	03193f01 	tsteq	r9, #1, 30
 868:	3b0b3a0e 	blcc	2cf0a8 <startup-0x1fd30f58>
 86c:	49192705 	ldmdbmi	r9, {r0, r2, r8, r9, sl, sp}
 870:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
 874:	97184006 	ldrls	r4, [r8, -r6]
 878:	13011942 	movwne	r1, #6466	; 0x1942
 87c:	2e160000 	cdpcs	0, 1, cr0, cr6, cr0, {0}
 880:	03193f01 	tsteq	r9, #1, 30
 884:	3b0b3a0e 	blcc	2cf0c4 <startup-0x1fd30f3c>
 888:	1119270b 	tstne	r9, fp, lsl #14
 88c:	40061201 	andmi	r1, r6, r1, lsl #4
 890:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 894:	00001301 	andeq	r1, r0, r1, lsl #6
 898:	03000517 	movweq	r0, #1303	; 0x517
 89c:	3b0b3a0e 	blcc	2cf0dc <startup-0x1fd30f24>
 8a0:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 8a4:	18000018 	stmdane	r0, {r3, r4}
 8a8:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 8ac:	0b3b0b3a 	bleq	ec359c <startup-0x1f13ca64>
 8b0:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 8b4:	2e190000 	cdpcs	0, 1, cr0, cr9, cr0, {0}
 8b8:	03193f01 	tsteq	r9, #1, 30
 8bc:	3b0b3a0e 	blcc	2cf0fc <startup-0x1fd30f04>
 8c0:	1119270b 	tstne	r9, fp, lsl #14
 8c4:	40061201 	andmi	r1, r6, r1, lsl #4
 8c8:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 8cc:	Address 0x000008cc is out of bounds.


Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	00000024 	andeq	r0, r0, r4, lsr #32
   4:	00000002 	andeq	r0, r0, r2
   8:	00040000 	andeq	r0, r4, r0
   c:	00000000 	andeq	r0, r0, r0
  10:	20000010 	andcs	r0, r0, r0, lsl r0
  14:	0000142c 	andeq	r1, r0, ip, lsr #8
  18:	20000000 	andcs	r0, r0, r0
  1c:	0000000c 	andeq	r0, r0, ip
	...
  28:	0000001c 	andeq	r0, r0, ip, lsl r0
  2c:	18880002 	stmne	r8, {r1}
  30:	00040000 	andeq	r0, r4, r0
  34:	00000000 	andeq	r0, r0, r0
  38:	2000143c 	andcs	r1, r0, ip, lsr r4
  3c:	0000050e 	andeq	r0, r0, lr, lsl #10
	...
  48:	0000001c 	andeq	r0, r0, ip, lsl r0
  4c:	1eaf0002 	cdpne	0, 10, cr0, cr15, cr2, {0}
  50:	00040000 	andeq	r0, r4, r0
  54:	00000000 	andeq	r0, r0, r0
  58:	2000194c 	andcs	r1, r0, ip, asr #18
  5c:	000001c4 	andeq	r0, r0, r4, asr #3
	...
  68:	0000001c 	andeq	r0, r0, ip, lsl r0
  6c:	23f60002 	mvnscs	r0, #2
  70:	00040000 	andeq	r0, r4, r0
  74:	00000000 	andeq	r0, r0, r0
  78:	20001b10 	andcs	r1, r0, r0, lsl fp
  7c:	00000128 	andeq	r0, r0, r8, lsr #2
	...
  88:	0000001c 	andeq	r0, r0, ip, lsl r0
  8c:	25a30002 	strcs	r0, [r3, #2]!
  90:	00040000 	andeq	r0, r4, r0
  94:	00000000 	andeq	r0, r0, r0
  98:	20001c38 	andcs	r1, r0, r8, lsr ip
  9c:	000009fe 	strdeq	r0, [r0], -lr
	...

Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
   0:	20000010 	andcs	r0, r0, r0, lsl r0
   4:	2000143c 	andcs	r1, r0, ip, lsr r4
   8:	20000000 	andcs	r0, r0, r0
   c:	2000000c 	andcs	r0, r0, ip
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
   0:	00000565 	andeq	r0, r0, r5, ror #10
   4:	02070002 	andeq	r0, r7, #2
   8:	01020000 	mrseq	r0, (UNDEF: 2)
   c:	000d0efb 	strdeq	r0, [sp], -fp
  10:	01010101 	tsteq	r1, r1, lsl #2
  14:	01000000 	mrseq	r0, (UNDEF: 0)
  18:	2e010000 	cdpcs	0, 0, cr0, cr1, cr0, {0}
  1c:	696c2f2e 	stmdbvs	ip!, {r1, r2, r3, r5, r8, r9, sl, fp, sp}^
  20:	54532f62 	ldrbpl	r2, [r3], #-3938	; 0xfffff09e
  24:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
  28:	696c5f34 	stmdbvs	ip!, {r2, r4, r5, r8, r9, sl, fp, ip, lr}^
  2c:	4d432f62 	stclmi	15, cr2, [r3, #-392]	; 0xfffffe78
  30:	2f534953 	svccs	0x00534953
  34:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
  38:	00656475 	rsbeq	r6, r5, r5, ror r4
  3c:	6c2f2e2e 	stcvs	14, cr2, [pc], #-184	; ffffff8c <GPIO_Ports+0xdfffd808>
  40:	532f6269 			; <UNDEFINED> instruction: 0x532f6269
  44:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
  48:	6c5f3446 	cfldrdvs	mvd3, [pc], {70}	; 0x46
  4c:	532f6269 			; <UNDEFINED> instruction: 0x532f6269
  50:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
  54:	78783446 	ldmdavc	r8!, {r1, r2, r6, sl, ip, sp}^
  58:	6474535f 	ldrbtvs	r5, [r4], #-863	; 0xfffffca1
  5c:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
  60:	445f6870 	ldrbmi	r6, [pc], #-2160	; 68 <startup-0x1fffff98>
  64:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
  68:	72732f72 	rsbsvc	r2, r3, #456	; 0x1c8
  6c:	3a430063 	bcc	10c0200 <startup-0x1ef3fe00>
  70:	6573552f 	ldrbvs	r5, [r3, #-1327]!	; 0xfffffad1
  74:	412f7372 			; <UNDEFINED> instruction: 0x412f7372
  78:	746d6164 	strbtvc	r6, [sp], #-356	; 0xfffffe9c
  7c:	656e4f2f 	strbvs	r4, [lr, #-3887]!	; 0xfffff0d1
  80:	76697244 	strbtvc	r7, [r9], -r4, asr #4
  84:	6f442f65 	svcvs	0x00442f65
  88:	656d756b 	strbvs	r7, [sp, #-1387]!	; 0xfffffa95
  8c:	472f746e 	strmi	r7, [pc, -lr, ror #8]!
  90:	75487469 	strbvc	r7, [r8, #-1129]	; 0xfffffb97
  94:	41442f62 	cmpmi	r4, r2, ror #30
  98:	30393254 	eorscc	r3, r9, r4, asr r2
  9c:	72614c2d 	rsbvc	r4, r1, #11520	; 0x2d00
  a0:	7379736d 	cmnvc	r9, #-1275068415	; 0xb4000001
  a4:	2f6d6574 	svccs	0x006d6574
  a8:	2f646f6b 	svccs	0x00646f6b
  ac:	726f6f44 	rsbvc	r6, pc, #68, 30	; 0x110
  b0:	2f2e2e00 	svccs	0x002e2e00
  b4:	2f62696c 	svccs	0x0062696c
  b8:	334d5453 	movtcc	r5, #54355	; 0xd453
  bc:	5f344632 	svcpl	0x00344632
  c0:	2f62696c 	svccs	0x0062696c
  c4:	334d5453 	movtcc	r5, #54355	; 0xd453
  c8:	78344632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, lr}
  cc:	74535f78 	ldrbvc	r5, [r3], #-3960	; 0xfffff088
  d0:	72655064 	rsbvc	r5, r5, #100	; 0x64
  d4:	5f687069 	svcpl	0x00687069
  d8:	76697244 	strbtvc	r7, [r9], -r4, asr #4
  dc:	692f7265 	stmdbvs	pc!, {r0, r2, r5, r6, r9, ip, sp, lr}	; <UNPREDICTABLE>
  e0:	6300636e 	movwvs	r6, #878	; 0x36e
  e4:	73635c3a 	cmnvc	r3, #14848	; 0x3a00
  e8:	70706165 	rsbsvc	r6, r0, r5, ror #2
  ec:	646f635c 	strbtvs	r6, [pc], #-860	; f4 <startup-0x1fffff0c>
  f0:	74696c65 	strbtvc	r6, [r9], #-3173	; 0xfffff39b
  f4:	6f745c65 	svcvs	0x00745c65
  f8:	5c736c6f 	ldclpl	12, cr6, [r3], #-444	; 0xfffffe44
  fc:	2d636367 	stclcs	3, cr6, [r3, #-412]!	; 0xfffffe64
 100:	5c6d7261 	sfmpl	f7, 2, [sp], #-388	; 0xfffffe7c
 104:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
 108:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
 10c:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
 110:	6e695c69 	cdpvs	12, 6, cr5, cr9, cr9, {3}
 114:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
 118:	616d5c65 	cmnvs	sp, r5, ror #24
 11c:	6e696863 	cdpvs	8, 6, cr6, cr9, cr3, {3}
 120:	3a630065 	bcc	18c02bc <startup-0x1e73fd44>
 124:	6573635c 	ldrbvs	r6, [r3, #-860]!	; 0xfffffca4
 128:	5c707061 	ldclpl	0, cr7, [r0], #-388	; 0xfffffe7c
 12c:	65646f63 	strbvs	r6, [r4, #-3939]!	; 0xfffff09d
 130:	6574696c 	ldrbvs	r6, [r4, #-2412]!	; 0xfffff694
 134:	6f6f745c 	svcvs	0x006f745c
 138:	675c736c 	ldrbvs	r7, [ip, -ip, ror #6]
 13c:	612d6363 			; <UNDEFINED> instruction: 0x612d6363
 140:	615c6d72 	cmpvs	ip, r2, ror sp
 144:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
 148:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
 14c:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
 150:	636e695c 	cmnvs	lr, #92, 18	; 0x170000
 154:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
 158:	7379735c 	cmnvc	r9, #92, 6	; 0x70000001
 15c:	6f630000 	svcvs	0x00630000
 160:	635f6572 	cmpvs	pc, #478150656	; 0x1c800000
 164:	682e346d 	stmdavs	lr!, {r0, r2, r3, r5, r6, sl, ip, sp}
 168:	00000100 	andeq	r0, r0, r0, lsl #2
 16c:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
 170:	78346632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, sp, lr}
 174:	63725f78 	cmnvs	r2, #120, 30	; 0x1e0
 178:	00632e63 	rsbeq	r2, r3, r3, ror #28
 17c:	69000002 	stmdbvs	r0, {r1}
 180:	2e74696e 	vsubcs.f16	s13, s8, s29	; <UNPREDICTABLE>
 184:	00030068 	andeq	r0, r3, r8, rrx
 188:	61747300 	cmnvs	r4, r0, lsl #6
 18c:	70757472 	rsbsvc	r7, r5, r2, ror r4
 190:	0300632e 	movweq	r6, #814	; 0x32e
 194:	74730000 	ldrbtvc	r0, [r3], #-0
 198:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
 19c:	2e787834 	mrccs	8, 3, r7, cr8, cr4, {1}
 1a0:	00040068 	andeq	r0, r4, r8, rrx
 1a4:	65645f00 	strbvs	r5, [r4, #-3840]!	; 0xfffff100
 1a8:	6c756166 	ldfvse	f6, [r5], #-408	; 0xfffffe68
 1ac:	79745f74 	ldmdbvc	r4!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
 1b0:	2e736570 	mrccs	5, 3, r6, cr3, cr0, {3}
 1b4:	00050068 	andeq	r0, r5, r8, rrx
 1b8:	74735f00 	ldrbtvc	r5, [r3], #-3840	; 0xfffff100
 1bc:	746e6964 	strbtvc	r6, [lr], #-2404	; 0xfffff69c
 1c0:	0600682e 	streq	r6, [r0], -lr, lsr #16
 1c4:	79730000 	ldmdbvc	r3!, {}^	; <UNPREDICTABLE>
 1c8:	6d657473 	cfstrdvs	mvd7, [r5, #-460]!	; 0xfffffe34
 1cc:	6d74735f 	ldclvs	3, cr7, [r4, #-380]!	; 0xfffffe84
 1d0:	34663233 	strbtcc	r3, [r6], #-563	; 0xfffffdcd
 1d4:	682e7878 	stmdavs	lr!, {r3, r4, r5, r6, fp, ip, sp, lr}
 1d8:	00000400 	andeq	r0, r0, r0, lsl #8
 1dc:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
 1e0:	78346632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, sp, lr}
 1e4:	63725f78 	cmnvs	r2, #120, 30	; 0x1e0
 1e8:	00682e63 	rsbeq	r2, r8, r3, ror #28
 1ec:	73000004 	movwvc	r0, #4
 1f0:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
 1f4:	78783466 	ldmdavc	r8!, {r1, r2, r5, r6, sl, ip, sp}^
 1f8:	6970675f 	ldmdbvs	r0!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, sp, lr}^
 1fc:	00682e6f 	rsbeq	r2, r8, pc, ror #28
 200:	73000004 	movwvc	r0, #4
 204:	74726174 	ldrbtvc	r6, [r2], #-372	; 0xfffffe8c
 208:	682e7075 	stmdavs	lr!, {r0, r2, r4, r5, r6, ip, sp, lr}
 20c:	00000300 	andeq	r0, r0, r0, lsl #6
 210:	02050000 	andeq	r0, r5, #0
 214:	20000010 	andcs	r0, r0, r0, lsl r0
 218:	010cdd03 	tsteq	ip, r3, lsl #26
 21c:	1ecd4b75 			; <UNDEFINED> instruction: 0x1ecd4b75
 220:	00fc03d8 	ldrsbteq	r0, [ip], #56	; 0x38
 224:	02004b90 	andeq	r4, r0, #144, 22	; 0x24000
 228:	58060104 	stmdapl	r6, {r2, r8}
 22c:	674b3006 	strbvs	r3, [fp, -r6]
 230:	04213f3d 	strteq	r3, [r1], #-3901	; 0xfffff0c3
 234:	73f70302 	mvnsvc	r0, #134217728	; 0x8000000
 238:	3f693082 	svccc	0x00693082
 23c:	4e4f4069 	cdpmi	0, 4, cr4, cr15, cr9, {3}
 240:	03503f69 	cmpeq	r0, #420	; 0x1a4
 244:	3f6be417 	svccc	0x006be417
 248:	740f034b 	strvc	r0, [pc], #-843	; 250 <startup-0x1ffffdb0>
 24c:	003d2f3d 	eorseq	r2, sp, sp, lsr pc
 250:	40020402 	andmi	r0, r2, r2, lsl #8
 254:	02040200 	andeq	r0, r4, #0, 4
 258:	04020067 	streq	r0, [r2], #-103	; 0xffffff99
 25c:	02003d02 	andeq	r3, r0, #2, 26	; 0x80
 260:	58060104 	stmdapl	r6, {r2, r8}
 264:	4e5a4c06 	cdpmi	12, 5, cr4, cr10, cr6, {0}
 268:	0b032f3e 	bleq	cbf68 <startup-0x1ff34098>
 26c:	3f32674a 	svccc	0x0032674a
 270:	033d694d 	teqeq	sp, #1261568	; 0x134000
 274:	4b6a7415 	blmi	1a9d2d0 <startup-0x1e562d30>
 278:	6c661403 	cfstrdvs	mvd1, [r6], #-12
 27c:	0b033f3f 	bleq	cff80 <startup-0x1ff30080>
 280:	20790366 	rsbscs	r0, r9, r6, ror #6
 284:	243d233d 	ldrtcs	r2, [sp], #-829	; 0xfffffcc3
 288:	6a740f03 	bvs	1d03e9c <startup-0x1e2fc164>
 28c:	00de034b 	sbcseq	r0, lr, fp, asr #6
 290:	2dbb7c66 	ldccs	12, cr7, [fp, #408]!	; 0x198
 294:	660e033e 			; <UNDEFINED> instruction: 0x660e033e
 298:	1a034b69 	bne	d3044 <startup-0x1ff2cfbc>
 29c:	03835d66 	orreq	r5, r3, #6528	; 0x1980
 2a0:	69740185 	ldmdbvs	r4!, {r0, r2, r7, r8}^
 2a4:	00e9034b 	rsceq	r0, r9, fp, asr #6
 2a8:	03ad6c66 			; <UNDEFINED> instruction: 0x03ad6c66
 2ac:	4b69740d 	blmi	1a5d2e8 <startup-0x1e5a2d18>
 2b0:	69660e03 	stmdbvs	r6!, {r0, r1, r9, sl, fp}^
 2b4:	6615034b 	ldrvs	r0, [r5], -fp, asr #6
 2b8:	4d3f3459 	cfldrsmi	mvf3, [pc, #-356]!	; 15c <startup-0x1ffffea4>
 2bc:	18034169 	stmdane	r3, {r0, r3, r5, r6, r8, lr}
 2c0:	3f345990 	svccc	0x00345990
 2c4:	0341694d 	movteq	r6, #6477	; 0x194d
 2c8:	4b7401b3 	blmi	1d0099c <startup-0x1e2ff664>
 2cc:	4d4d3f33 	stclmi	15, cr3, [sp, #-204]	; 0xffffff34
 2d0:	660d033d 			; <UNDEFINED> instruction: 0x660d033d
 2d4:	1703672f 	strne	r6, [r3, -pc, lsr #14]
 2d8:	3f334b66 	svccc	0x00334b66
 2dc:	033d4d4d 	teqeq	sp, #4928	; 0x1340
 2e0:	334b660f 	movtcc	r6, #46607	; 0xb60f
 2e4:	3d4d4d3f 	stclcc	13, cr4, [sp, #-252]	; 0xffffff04
 2e8:	4b820f03 	blmi	fe083efc <GPIO_Ports+0xde081778>
 2ec:	5b4d3f33 	blpl	134ffc0 <startup-0x1ecb0040>
 2f0:	9024033d 	eorls	r0, r4, sp, lsr r3
 2f4:	775ac04b 	ldrbvc	ip, [sl, -fp, asr #32]
 2f8:	263d223d 			; <UNDEFINED> instruction: 0x263d223d
 2fc:	db3f5a67 	blle	fd6ca0 <startup-0x1f029360>
 300:	038383cb 	orreq	r8, r3, #738197507	; 0x2c000003
 304:	253d201b 	ldrcs	r2, [sp, #-27]!	; 0xffffffe5
 308:	69683d59 	stmdbvs	r8!, {r0, r3, r4, r6, r8, sl, fp, ip, sp}^
 30c:	69683d67 	stmdbvs	r8!, {r0, r1, r2, r5, r6, r8, sl, fp, ip, sp}^
 310:	67683d67 	strbvs	r3, [r8, -r7, ror #26]!
 314:	4bba3f03 	blmi	fee8ff28 <GPIO_Ports+0xdee8d7a4>
 318:	4d3f8433 	cfldrsmi	mvf8, [pc, #-204]!	; 254 <startup-0x1ffffdac>
 31c:	03834069 	orreq	r4, r3, #105	; 0x69
 320:	4b6a9e0a 	blmi	1aa7b50 <startup-0x1e5584b0>
 324:	69660c03 	stmdbvs	r6!, {r0, r1, sl, fp}^
 328:	01b8034b 			; <UNDEFINED> instruction: 0x01b8034b
 32c:	033d4e66 	teqeq	sp, #1632	; 0x660
 330:	334b7416 	movtcc	r7, #46102	; 0xb416
 334:	4b4d4d4d 	blmi	1353870 <startup-0x1ecac790>
 338:	4b821403 	blmi	fe08534c <GPIO_Ports+0xde082bc8>
 33c:	4d4d4d33 	stclmi	13, cr4, [sp, #-204]	; 0xffffff34
 340:	8211034b 	andshi	r0, r1, #738197505	; 0x2c000001
 344:	4d4d334b 	stclmi	3, cr3, [sp, #-300]	; 0xfffffed4
 348:	10034b5b 	andne	r4, r3, fp, asr fp
 34c:	4d334b74 	vldmdbmi	r3!, {d4-<overflow reg d61>}
 350:	034b694d 	movteq	r6, #47437	; 0xb94d
 354:	4b8200d3 	blmi	fe0806a8 <GPIO_Ports+0xde07df24>
 358:	4d4d4d33 	stclmi	13, cr4, [sp, #-204]	; 0xffffff34
 35c:	00f0034b 	rscseq	r0, r0, fp, asr #6
 360:	033d4e82 	teqeq	sp, #2080	; 0x820
 364:	4c797425 	cfldrdmi	mvd7, [r9], #-148	; 0xffffff6c
 368:	03761e6c 	cmneq	r6, #108, 28	; 0x6c0
 36c:	4c797413 	cfldrdmi	mvd7, [r9], #-76	; 0xffffffb4
 370:	03761e6c 	cmneq	r6, #108, 28	; 0x6c0
 374:	4c797411 	cfldrdmi	mvd7, [r9], #-68	; 0xffffffbc
 378:	03761e6c 	cmneq	r6, #108, 28	; 0x6c0
 37c:	4c79742c 	cfldrdmi	mvd7, [r9], #-176	; 0xffffff50
 380:	03761e6c 	cmneq	r6, #108, 28	; 0x6c0
 384:	4c797427 	cfldrdmi	mvd7, [r9], #-156	; 0xffffff64
 388:	03761e6c 	cmneq	r6, #108, 28	; 0x6c0
 38c:	4c79741d 	cfldrdmi	mvd7, [r9], #-116	; 0xffffff8c
 390:	03761e6c 	cmneq	r6, #108, 28	; 0x6c0
 394:	4c797410 	cfldrdmi	mvd7, [r9], #-64	; 0xffffffc0
 398:	03761e6c 	cmneq	r6, #108, 28	; 0x6c0
 39c:	4c79740e 	cfldrdmi	mvd7, [r9], #-56	; 0xffffffc8
 3a0:	03761e6c 	cmneq	r6, #108, 28	; 0x6c0
 3a4:	4c787429 	cfldrdmi	mvd7, [r8], #-164	; 0xffffff5c
 3a8:	03761e6c 	cmneq	r6, #108, 28	; 0x6c0
 3ac:	4c787423 	cfldrdmi	mvd7, [r8], #-140	; 0xffffff74
 3b0:	03761e6c 	cmneq	r6, #108, 28	; 0x6c0
 3b4:	4c787425 	cfldrdmi	mvd7, [r8], #-148	; 0xffffff6c
 3b8:	03761e6c 	cmneq	r6, #108, 28	; 0x6c0
 3bc:	4c787414 	cfldrdmi	mvd7, [r8], #-80	; 0xffffffb0
 3c0:	03761e6c 	cmneq	r6, #108, 28	; 0x6c0
 3c4:	4c787412 	cfldrdmi	mvd7, [r8], #-72	; 0xffffffb8
 3c8:	03761e6c 	cmneq	r6, #108, 28	; 0x6c0
 3cc:	4c78742d 	cfldrdmi	mvd7, [r8], #-180	; 0xffffff4c
 3d0:	03761e6c 	cmneq	r6, #108, 28	; 0x6c0
 3d4:	4c787428 	cfldrdmi	mvd7, [r8], #-160	; 0xffffff60
 3d8:	03761e6c 	cmneq	r6, #108, 28	; 0x6c0
 3dc:	4c6a740c 	cfstrdmi	mvd7, [sl], #-48	; 0xffffffd0
 3e0:	03681e6c 	cmneq	r8, #108, 28	; 0x6c0
 3e4:	947402ac 	ldrbtls	r0, [r4], #-684	; 0xfffffd54
 3e8:	ae1e974d 	cdpge	7, 1, cr9, cr14, cr13, {2}
 3ec:	67661703 	strbvs	r1, [r6, -r3, lsl #14]!
 3f0:	59502f2f 	ldmdbpl	r0, {r0, r1, r2, r3, r5, r8, r9, sl, fp, sp}^
 3f4:	4e3e4c3e 	mrcmi	12, 1, r4, cr14, cr14, {1}
 3f8:	5c765940 			; <UNDEFINED> instruction: 0x5c765940
 3fc:	0a033d4d 	beq	cf938 <startup-0x1ff306c8>
 400:	03753066 	cmneq	r5, #102	; 0x66
 404:	50675811 	rsbpl	r5, r7, r1, lsl r8
 408:	3d4d5c68 	stclcc	12, cr5, [sp, #-416]	; 0xfffffe60
 40c:	6c661103 	stfvse	f1, [r6], #-12
 410:	0303044b 	movweq	r0, #13387	; 0x344b
 414:	4066679d 	mlsmi	r6, sp, r7, r6
 418:	3d3d4b4b 	fldmdbxcc	sp!, {d4-d40}	;@ Deprecated
 41c:	4b693d3d 	blmi	1a4f918 <startup-0x1e5b06e8>
 420:	693d3d3d 	ldmdbvs	sp!, {r0, r2, r3, r4, r5, r8, sl, fp, ip, sp}
 424:	3d3d4b4b 	fldmdbxcc	sp!, {d4-d40}	;@ Deprecated
 428:	4b693d3d 	blmi	1a4f924 <startup-0x1e5b06dc>
 42c:	693d3d3d 	ldmdbvs	sp!, {r0, r2, r3, r4, r5, r8, sl, fp, ip, sp}
 430:	3d3d4b4b 	fldmdbxcc	sp!, {d4-d40}	;@ Deprecated
 434:	4b693d3d 	blmi	1a4f930 <startup-0x1e5b06d0>
 438:	693d3d3d 	ldmdbvs	sp!, {r0, r2, r3, r4, r5, r8, sl, fp, ip, sp}
 43c:	3d3d4b4b 	fldmdbxcc	sp!, {d4-d40}	;@ Deprecated
 440:	4b693d3d 	blmi	1a4f93c <startup-0x1e5b06c4>
 444:	693d3d3d 	ldmdbvs	sp!, {r0, r2, r3, r4, r5, r8, sl, fp, ip, sp}
 448:	3d3d4b4b 	fldmdbxcc	sp!, {d4-d40}	;@ Deprecated
 44c:	04673d3d 	strbteq	r3, [r7], #-3389	; 0xfffff2c3
 450:	08530304 	ldmdaeq	r3, {r2, r8, r9}^
 454:	5a592f2e 	bpl	164c114 <startup-0x1e9b3eec>
 458:	3e683e3e 	mcrcc	14, 3, r3, cr8, cr14, {1}
 45c:	594bad30 	stmdbpl	fp, {r4, r5, r8, sl, fp, sp, pc}^
 460:	01040200 	mrseq	r0, R12_usr
 464:	59062006 	stmdbpl	r6, {r1, r2, sp}
 468:	2f2f3d77 	svccs	0x002f3d77
 46c:	01040200 	mrseq	r0, R12_usr
 470:	5d062006 	stcpl	0, cr2, [r6, #-24]	; 0xffffffe8
 474:	c93e3e2f 	ldmdbgt	lr!, {r0, r1, r2, r3, r5, r9, sl, fp, ip, sp}
 478:	02040200 	andeq	r0, r4, #0, 4
 47c:	04020039 	streq	r0, [r2], #-57	; 0xffffffc7
 480:	003c0601 	eorseq	r0, ip, r1, lsl #12
 484:	06020402 	streq	r0, [r2], -r2, lsl #8
 488:	0402003a 	streq	r0, [r2], #-58	; 0xffffffc6
 48c:	063c0601 	ldrteq	r0, [ip], -r1, lsl #12
 490:	023c0903 	eorseq	r0, ip, #49152	; 0xc000
 494:	3e2f132f 	cdpcc	3, 2, cr1, cr15, cr15, {1}
 498:	bbadc93e 	bllt	feb72998 <GPIO_Ports+0xdeb70214>
 49c:	a0757575 	rsbsge	r7, r5, r5, ror r5
 4a0:	02040200 	andeq	r0, r4, #0, 4
 4a4:	003c7603 	eorseq	r7, ip, r3, lsl #12
 4a8:	06010402 	streq	r0, [r1], -r2, lsl #8
 4ac:	0402003c 	streq	r0, [r2], #-60	; 0xffffffc4
 4b0:	003a0602 	eorseq	r0, sl, r2, lsl #12
 4b4:	06010402 	streq	r0, [r1], -r2, lsl #8
 4b8:	1103063c 	tstne	r3, ip, lsr r6
 4bc:	0402003c 	streq	r0, [r2], #-60	; 0xffffffc4
 4c0:	02003e03 	andeq	r3, r0, #3, 28	; 0x30
 4c4:	00f30304 	rscseq	r0, r3, r4, lsl #6
 4c8:	39030402 	stmdbcc	r3, {r1, sl}
 4cc:	01040200 	mrseq	r0, R12_usr
 4d0:	6c063c06 	stcvs	12, cr3, [r6], {6}
 4d4:	03040200 	movweq	r0, #16896	; 0x4200
 4d8:	0402005a 	streq	r0, [r2], #-90	; 0xffffffa6
 4dc:	0200f303 	andeq	pc, r0, #201326592	; 0xc000000
 4e0:	00390304 	eorseq	r0, r9, r4, lsl #6
 4e4:	06010402 	streq	r0, [r1], -r2, lsl #8
 4e8:	3d41063c 	stclcc	6, cr0, [r1, #-240]	; 0xffffff10
 4ec:	03040200 	movweq	r0, #16896	; 0x4200
 4f0:	0402003e 	streq	r0, [r2], #-62	; 0xffffffc2
 4f4:	0200f003 	andeq	pc, r0, #3
 4f8:	3c060104 	stfccs	f0, [r6], {4}
 4fc:	004b6a06 	subeq	r6, fp, r6, lsl #20
 500:	3e030402 	cdpcc	4, 0, cr0, cr3, cr2, {0}
 504:	03040200 	movweq	r0, #16896	; 0x4200
 508:	040200f0 	streq	r0, [r2], #-240	; 0xffffff10
 50c:	063c0601 	ldrteq	r0, [ip], -r1, lsl #12
 510:	a03e5c6c 	eorsge	r5, lr, ip, ror #24
 514:	84e92108 	strbthi	r2, [r9], #264	; 0x108
 518:	003ed892 	mlaseq	lr, r2, r8, sp
 51c:	06010402 	streq	r0, [r1], -r2, lsl #8
 520:	4c080690 	stcmi	6, cr0, [r8], {144}	; 0x90
 524:	00f4f608 	rscseq	pc, r4, r8, lsl #12
 528:	06010402 	streq	r0, [r1], -r2, lsl #8
 52c:	04020090 	streq	r0, [r2], #-144	; 0xffffff70
 530:	064a0802 	strbeq	r0, [sl], -r2, lsl #16
 534:	04020092 	streq	r0, [r2], #-146	; 0xffffff6e
 538:	d6740302 	ldrbtle	r0, [r4], -r2, lsl #6
 53c:	01040200 	mrseq	r0, R12_usr
 540:	02003c06 	andeq	r3, r0, #1536	; 0x600
 544:	03060204 	movweq	r0, #25092	; 0x6204
 548:	02007470 	andeq	r7, r0, #112, 8	; 0x70000000
 54c:	3c060104 	stfccs	f0, [r6], {4}
 550:	00050274 	andeq	r0, r5, r4, ror r2
 554:	04040101 	streq	r0, [r4], #-257	; 0xfffffeff
 558:	00020500 	andeq	r0, r2, r0, lsl #10
 55c:	03200000 	nopeq	{0}	; <UNPREDICTABLE>
 560:	5e13010d 	mufpls	f0, f3, #5.0
 564:	01000302 	tsteq	r0, r2, lsl #6
 568:	0002b501 	andeq	fp, r2, r1, lsl #10
 56c:	c9000200 	stmdbgt	r0, {r9}
 570:	02000001 	andeq	r0, r0, #1
 574:	0d0efb01 	vstreq	d15, [lr, #-4]
 578:	01010100 	mrseq	r0, (UNDEF: 17)
 57c:	00000001 	andeq	r0, r0, r1
 580:	01000001 	tsteq	r0, r1
 584:	552f3a43 	strpl	r3, [pc, #-2627]!	; fffffb49 <GPIO_Ports+0xdfffd3c5>
 588:	73726573 	cmnvc	r2, #482344960	; 0x1cc00000
 58c:	6164412f 	cmnvs	r4, pc, lsr #2
 590:	4f2f746d 	svcmi	0x002f746d
 594:	7244656e 	subvc	r6, r4, #461373440	; 0x1b800000
 598:	2f657669 	svccs	0x00657669
 59c:	756b6f44 	strbvc	r6, [fp, #-3908]!	; 0xfffff0bc
 5a0:	746e656d 	strbtvc	r6, [lr], #-1389	; 0xfffffa93
 5a4:	7469472f 	strbtvc	r4, [r9], #-1839	; 0xfffff8d1
 5a8:	2f627548 	svccs	0x00627548
 5ac:	32544144 	subscc	r4, r4, #68, 2
 5b0:	4c2d3039 	stcmi	0, cr3, [sp], #-228	; 0xffffff1c
 5b4:	736d7261 	cmnvc	sp, #268435462	; 0x10000006
 5b8:	65747379 	ldrbvs	r7, [r4, #-889]!	; 0xfffffc87
 5bc:	6f6b2f6d 	svcvs	0x006b2f6d
 5c0:	696c2f64 	stmdbvs	ip!, {r2, r5, r6, r8, r9, sl, fp, sp}^
 5c4:	54532f62 	ldrbpl	r2, [r3], #-3938	; 0xfffff09e
 5c8:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
 5cc:	696c5f34 	stmdbvs	ip!, {r2, r4, r5, r8, r9, sl, fp, ip, lr}^
 5d0:	54532f62 	ldrbpl	r2, [r3], #-3938	; 0xfffff09e
 5d4:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
 5d8:	5f787834 	svcpl	0x00787834
 5dc:	50647453 	rsbpl	r7, r4, r3, asr r4
 5e0:	70697265 	rsbvc	r7, r9, r5, ror #4
 5e4:	72445f68 	subvc	r5, r4, #104, 30	; 0x1a0
 5e8:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
 5ec:	6372732f 	cmnvs	r2, #-1140850688	; 0xbc000000
 5f0:	5c3a6300 	ldcpl	3, cr6, [sl], #-0
 5f4:	61657363 	cmnvs	r5, r3, ror #6
 5f8:	635c7070 	cmpvs	ip, #112	; 0x70
 5fc:	6c65646f 	cfstrdvs	mvd6, [r5], #-444	; 0xfffffe44
 600:	5c657469 	cfstrdpl	mvd7, [r5], #-420	; 0xfffffe5c
 604:	6c6f6f74 	stclvs	15, cr6, [pc], #-464	; 43c <startup-0x1ffffbc4>
 608:	63675c73 	cmnvs	r7, #29440	; 0x7300
 60c:	72612d63 	rsbvc	r2, r1, #6336	; 0x18c0
 610:	72615c6d 	rsbvc	r5, r1, #27904	; 0x6d00
 614:	6f6e2d6d 	svcvs	0x006e2d6d
 618:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
 61c:	5c696261 	sfmpl	f6, 2, [r9], #-388	; 0xfffffe7c
 620:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
 624:	5c656475 	cfstrdpl	mvd6, [r5], #-468	; 0xfffffe2c
 628:	6863616d 	stmdavs	r3!, {r0, r2, r3, r5, r6, r8, sp, lr}^
 62c:	00656e69 	rsbeq	r6, r5, r9, ror #28
 630:	635c3a63 	cmpvs	ip, #405504	; 0x63000
 634:	70616573 	rsbvc	r6, r1, r3, ror r5
 638:	6f635c70 	svcvs	0x00635c70
 63c:	696c6564 	stmdbvs	ip!, {r2, r5, r6, r8, sl, sp, lr}^
 640:	745c6574 	ldrbvc	r6, [ip], #-1396	; 0xfffffa8c
 644:	736c6f6f 	cmnvc	ip, #444	; 0x1bc
 648:	6363675c 	cmnvs	r3, #92, 14	; 0x1700000
 64c:	6d72612d 	ldfvse	f6, [r2, #-180]!	; 0xffffff4c
 650:	6d72615c 	ldfvse	f6, [r2, #-368]!	; 0xfffffe90
 654:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
 658:	61652d65 	cmnvs	r5, r5, ror #26
 65c:	695c6962 	ldmdbvs	ip, {r1, r5, r6, r8, fp, sp, lr}^
 660:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
 664:	735c6564 	cmpvc	ip, #100, 10	; 0x19000000
 668:	2e007379 	mcrcs	3, 0, r7, cr0, cr9, {3}
 66c:	696c2f2e 	stmdbvs	ip!, {r1, r2, r3, r5, r8, r9, sl, fp, sp}^
 670:	54532f62 	ldrbpl	r2, [r3], #-3938	; 0xfffff09e
 674:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
 678:	696c5f34 	stmdbvs	ip!, {r2, r4, r5, r8, r9, sl, fp, ip, lr}^
 67c:	4d432f62 	stclmi	15, cr2, [r3, #-392]	; 0xfffffe78
 680:	2f534953 	svccs	0x00534953
 684:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
 688:	00656475 	rsbeq	r6, r5, r5, ror r4
 68c:	6c2f2e2e 	stcvs	14, cr2, [pc], #-184	; 5dc <startup-0x1ffffa24>
 690:	532f6269 			; <UNDEFINED> instruction: 0x532f6269
 694:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
 698:	6c5f3446 	cfldrdvs	mvd3, [pc], {70}	; 0x46
 69c:	532f6269 			; <UNDEFINED> instruction: 0x532f6269
 6a0:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
 6a4:	78783446 	ldmdavc	r8!, {r1, r2, r6, sl, ip, sp}^
 6a8:	6474535f 	ldrbtvs	r5, [r4], #-863	; 0xfffffca1
 6ac:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
 6b0:	445f6870 	ldrbmi	r6, [pc], #-2160	; 6b8 <startup-0x1ffff948>
 6b4:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
 6b8:	6e692f72 	mcrvs	15, 3, r2, cr9, cr2, {3}
 6bc:	73000063 	movwvc	r0, #99	; 0x63
 6c0:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
 6c4:	78783466 	ldmdavc	r8!, {r1, r2, r5, r6, sl, ip, sp}^
 6c8:	6970675f 	ldmdbvs	r0!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, sp, lr}^
 6cc:	00632e6f 	rsbeq	r2, r3, pc, ror #28
 6d0:	5f000001 	svcpl	0x00000001
 6d4:	61666564 	cmnvs	r6, r4, ror #10
 6d8:	5f746c75 	svcpl	0x00746c75
 6dc:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
 6e0:	00682e73 	rsbeq	r2, r8, r3, ror lr
 6e4:	5f000002 	svcpl	0x00000002
 6e8:	69647473 	stmdbvs	r4!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
 6ec:	682e746e 	stmdavs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
 6f0:	00000300 	andeq	r0, r0, r0, lsl #6
 6f4:	65726f63 	ldrbvs	r6, [r2, #-3939]!	; 0xfffff09d
 6f8:	346d635f 	strbtcc	r6, [sp], #-863	; 0xfffffca1
 6fc:	0400682e 	streq	r6, [r0], #-2094	; 0xfffff7d2
 700:	79730000 	ldmdbvc	r3!, {}^	; <UNPREDICTABLE>
 704:	6d657473 	cfstrdvs	mvd7, [r5, #-460]!	; 0xfffffe34
 708:	6d74735f 	ldclvs	3, cr7, [r4, #-380]!	; 0xfffffe84
 70c:	34663233 	strbtcc	r3, [r6], #-563	; 0xfffffdcd
 710:	682e7878 	stmdavs	lr!, {r3, r4, r5, r6, fp, ip, sp, lr}
 714:	00000500 	andeq	r0, r0, r0, lsl #10
 718:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
 71c:	78346632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, sp, lr}
 720:	00682e78 	rsbeq	r2, r8, r8, ror lr
 724:	73000005 	movwvc	r0, #5
 728:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
 72c:	78783466 	ldmdavc	r8!, {r1, r2, r5, r6, sl, ip, sp}^
 730:	6970675f 	ldmdbvs	r0!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, sp, lr}^
 734:	00682e6f 	rsbeq	r2, r8, pc, ror #28
 738:	00000005 	andeq	r0, r0, r5
 73c:	3c020500 	cfstr32cc	mvfx0, [r2], {-0}
 740:	03200014 			; <UNDEFINED> instruction: 0x03200014
 744:	4e0100ff 	mcrmi	0, 0, r0, cr1, cr15, {7}
 748:	38034b4c 	stmdacc	r3, {r2, r3, r6, r8, r9, fp, lr}
 74c:	204a034a 	subcs	r0, sl, sl, asr #6
 750:	33034b4c 	movwcc	r4, #15180	; 0x3b4c
 754:	204f034a 	subcs	r0, pc, sl, asr #6
 758:	2e034b4c 	vmlscs.f64	d4, d3, d12
 75c:	2054034a 	subscs	r0, r4, sl, asr #6
 760:	29034b4c 	stmdbcs	r3, {r2, r3, r6, r8, r9, fp, lr}
 764:	2059034a 	subscs	r0, r9, sl, asr #6
 768:	24034b4c 	strcs	r4, [r3], #-2892	; 0xfffff4b4
 76c:	205e034a 	subscs	r0, lr, sl, asr #6
 770:	1f034b4c 	svcne	0x00034b4c
 774:	2063034a 	rsbcs	r0, r3, sl, asr #6
 778:	1a034b4c 	bne	d34b0 <startup-0x1ff2cb50>
 77c:	2068034a 	rsbcs	r0, r8, sl, asr #6
 780:	15034b4c 	strne	r4, [r3, #-2892]	; 0xfffff4b4
 784:	206e034a 	rsbcs	r0, lr, sl, asr #6
 788:	0f03674c 	svceq	0x0003674c
 78c:	20730366 	rsbscs	r0, r3, r6, ror #6
 790:	0a03674c 	beq	da4c8 <startup-0x1ff25b38>
 794:	207a0366 	rsbscs	r0, sl, r6, ror #6
 798:	0369674c 	cmneq	r9, #76, 14	; 0x1300000
 79c:	5990080c 	ldmibpl	r0, {r2, r3, fp}
 7a0:	3e660a03 	vmulcc.f32	s1, s12, s6
 7a4:	ad4c5a5a 	vstrge	s11, [ip, #-360]	; 0xfffffe98
 7a8:	040200bc 	streq	r0, [r2], #-188	; 0xffffff44
 7ac:	064a0601 	strbeq	r0, [sl], -r1, lsl #12
 7b0:	adc0ad50 	stclge	13, cr10, [r0, #320]	; 0x140
 7b4:	0200bbcc 	andeq	fp, r0, #204, 22	; 0x33000
 7b8:	62030204 	andvs	r0, r3, #4, 4	; 0x40000000
 7bc:	040200ba 	streq	r0, [r2], #-186	; 0xffffff46
 7c0:	063c0601 	ldrteq	r0, [ip], -r1, lsl #12
 7c4:	523c2103 	eorspl	r2, ip, #-1073741824	; 0xc0000000
 7c8:	3d3d3d4c 	ldccc	13, cr3, [sp, #-304]!	; 0xfffffed0
 7cc:	10033d3d 	andne	r3, r3, sp, lsr sp
 7d0:	5a427574 	bpl	109dda8 <startup-0x1ef62258>
 7d4:	3e3e4c3e 	mrccc	12, 1, r4, cr14, cr14, {1}
 7d8:	4a1c033d 	bmi	7014d4 <startup-0x1f8feb2c>
 7dc:	5c685075 	stclpl	0, cr5, [r8], #-468	; 0xfffffe2c
 7e0:	0a033d4c 	beq	cfd18 <startup-0x1ff302e8>
 7e4:	033d4e4a 	teqeq	sp, #1184	; 0x4a0
 7e8:	50754a0c 	rsbspl	r4, r5, ip, lsl #20
 7ec:	3d4c5c68 	stclcc	12, cr5, [ip, #-416]	; 0xfffffe60
 7f0:	4e4a0a03 	vmlami.f32	s1, s20, s6
 7f4:	4a0f033d 	bmi	3c14f0 <startup-0x1fc3eb10>
 7f8:	0f034b79 	svceq	0x00034b79
 7fc:	034b794a 	movteq	r7, #47434	; 0xb94a
 800:	4cc04a10 	vstmiami	r0, {s9-s24}
 804:	034c1e50 	movteq	r1, #52816	; 0xce50
 808:	4b784a0b 	blmi	1e1303c <startup-0x1e1ecfc4>
 80c:	784a0b03 	stmdavc	sl, {r0, r1, r8, r9, fp}^
 810:	00ce0375 	sbceq	r0, lr, r5, ror r3
 814:	352fbb4a 	strcc	fp, [pc, #-2890]!	; fffffcd2 <GPIO_Ports+0xdfffd54e>
 818:	bbc9089f 	bllt	ff242a9c <GPIO_Ports+0xdf240318>
 81c:	0004029f 	muleq	r4, pc, r2	; <UNPREDICTABLE>
 820:	01fa0101 	mvnseq	r0, r1, lsl #2
 824:	00020000 	andeq	r0, r2, r0
 828:	000001b5 			; <UNDEFINED> instruction: 0x000001b5
 82c:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
 830:	0101000d 	tsteq	r1, sp
 834:	00000101 	andeq	r0, r0, r1, lsl #2
 838:	00000100 	andeq	r0, r0, r0, lsl #2
 83c:	2f3a4301 	svccs	0x003a4301
 840:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
 844:	64412f73 	strbvs	r2, [r1], #-3955	; 0xfffff08d
 848:	2f746d61 	svccs	0x00746d61
 84c:	44656e4f 	strbtmi	r6, [r5], #-3663	; 0xfffff1b1
 850:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
 854:	6b6f442f 	blvs	1bd1918 <startup-0x1e42e6e8>
 858:	6e656d75 	mcrvs	13, 3, r6, cr5, cr5, {3}
 85c:	69472f74 	stmdbvs	r7, {r2, r4, r5, r6, r8, r9, sl, fp, sp}^
 860:	62754874 	rsbsvs	r4, r5, #116, 16	; 0x740000
 864:	5441442f 	strbpl	r4, [r1], #-1071	; 0xfffffbd1
 868:	2d303932 			; <UNDEFINED> instruction: 0x2d303932
 86c:	6d72614c 	ldfvse	f6, [r2, #-304]!	; 0xfffffed0
 870:	74737973 	ldrbtvc	r7, [r3], #-2419	; 0xfffff68d
 874:	6b2f6d65 	blvs	bdbe10 <startup-0x1f4241f0>
 878:	6c2f646f 	cfstrsvs	mvf6, [pc], #-444	; 6c4 <startup-0x1ffff93c>
 87c:	532f6269 			; <UNDEFINED> instruction: 0x532f6269
 880:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
 884:	6c5f3446 	cfldrdvs	mvd3, [pc], {70}	; 0x46
 888:	532f6269 			; <UNDEFINED> instruction: 0x532f6269
 88c:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
 890:	78783446 	ldmdavc	r8!, {r1, r2, r6, sl, ip, sp}^
 894:	6474535f 	ldrbtvs	r5, [r4], #-863	; 0xfffffca1
 898:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
 89c:	445f6870 	ldrbmi	r6, [pc], #-2160	; 8a4 <startup-0x1ffff75c>
 8a0:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
 8a4:	72732f72 	rsbsvc	r2, r3, #456	; 0x1c8
 8a8:	3a630063 	bcc	18c0a3c <startup-0x1e73f5c4>
 8ac:	6573635c 	ldrbvs	r6, [r3, #-860]!	; 0xfffffca4
 8b0:	5c707061 	ldclpl	0, cr7, [r0], #-388	; 0xfffffe7c
 8b4:	65646f63 	strbvs	r6, [r4, #-3939]!	; 0xfffff09d
 8b8:	6574696c 	ldrbvs	r6, [r4, #-2412]!	; 0xfffff694
 8bc:	6f6f745c 	svcvs	0x006f745c
 8c0:	675c736c 	ldrbvs	r7, [ip, -ip, ror #6]
 8c4:	612d6363 			; <UNDEFINED> instruction: 0x612d6363
 8c8:	615c6d72 	cmpvs	ip, r2, ror sp
 8cc:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
 8d0:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
 8d4:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
 8d8:	636e695c 	cmnvs	lr, #92, 18	; 0x170000
 8dc:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
 8e0:	63616d5c 	cmnvs	r1, #92, 26	; 0x1700
 8e4:	656e6968 	strbvs	r6, [lr, #-2408]!	; 0xfffff698
 8e8:	5c3a6300 	ldcpl	3, cr6, [sl], #-0
 8ec:	61657363 	cmnvs	r5, r3, ror #6
 8f0:	635c7070 	cmpvs	ip, #112	; 0x70
 8f4:	6c65646f 	cfstrdvs	mvd6, [r5], #-444	; 0xfffffe44
 8f8:	5c657469 	cfstrdpl	mvd7, [r5], #-420	; 0xfffffe5c
 8fc:	6c6f6f74 	stclvs	15, cr6, [pc], #-464	; 734 <startup-0x1ffff8cc>
 900:	63675c73 	cmnvs	r7, #29440	; 0x7300
 904:	72612d63 	rsbvc	r2, r1, #6336	; 0x18c0
 908:	72615c6d 	rsbvc	r5, r1, #27904	; 0x6d00
 90c:	6f6e2d6d 	svcvs	0x006e2d6d
 910:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
 914:	5c696261 	sfmpl	f6, 2, [r9], #-388	; 0xfffffe7c
 918:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
 91c:	5c656475 	cfstrdpl	mvd6, [r5], #-468	; 0xfffffe2c
 920:	00737973 	rsbseq	r7, r3, r3, ror r9
 924:	6c2f2e2e 	stcvs	14, cr2, [pc], #-184	; 874 <startup-0x1ffff78c>
 928:	532f6269 			; <UNDEFINED> instruction: 0x532f6269
 92c:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
 930:	6c5f3446 	cfldrdvs	mvd3, [pc], {70}	; 0x46
 934:	432f6269 			; <UNDEFINED> instruction: 0x432f6269
 938:	5349534d 	movtpl	r5, #37709	; 0x934d
 93c:	636e692f 	cmnvs	lr, #770048	; 0xbc000
 940:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
 944:	2f2e2e00 	svccs	0x002e2e00
 948:	2f62696c 	svccs	0x0062696c
 94c:	334d5453 	movtcc	r5, #54355	; 0xd453
 950:	5f344632 	svcpl	0x00344632
 954:	2f62696c 	svccs	0x0062696c
 958:	334d5453 	movtcc	r5, #54355	; 0xd453
 95c:	78344632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, lr}
 960:	74535f78 	ldrbvc	r5, [r3], #-3960	; 0xfffff088
 964:	72655064 	rsbvc	r5, r5, #100	; 0x64
 968:	5f687069 	svcpl	0x00687069
 96c:	76697244 	strbtvc	r7, [r9], -r4, asr #4
 970:	692f7265 	stmdbvs	pc!, {r0, r2, r5, r6, r9, ip, sp, lr}	; <UNPREDICTABLE>
 974:	0000636e 	andeq	r6, r0, lr, ror #6
 978:	6373696d 	cmnvs	r3, #1785856	; 0x1b4000
 97c:	0100632e 	tsteq	r0, lr, lsr #6
 980:	645f0000 	ldrbvs	r0, [pc], #-0	; 988 <startup-0x1ffff678>
 984:	75616665 	strbvc	r6, [r1, #-1637]!	; 0xfffff99b
 988:	745f746c 	ldrbvc	r7, [pc], #-1132	; 990 <startup-0x1ffff670>
 98c:	73657079 	cmnvc	r5, #121	; 0x79
 990:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
 994:	735f0000 	cmpvc	pc, #0
 998:	6e696474 	mcrvs	4, 3, r6, cr9, cr4, {3}
 99c:	00682e74 	rsbeq	r2, r8, r4, ror lr
 9a0:	63000003 	movwvs	r0, #3
 9a4:	5f65726f 	svcpl	0x0065726f
 9a8:	2e346d63 	cdpcs	13, 3, cr6, cr4, cr3, {3}
 9ac:	00040068 	andeq	r0, r4, r8, rrx
 9b0:	73797300 	cmnvc	r9, #0, 6
 9b4:	5f6d6574 	svcpl	0x006d6574
 9b8:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
 9bc:	78346632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, sp, lr}
 9c0:	00682e78 	rsbeq	r2, r8, r8, ror lr
 9c4:	73000005 	movwvc	r0, #5
 9c8:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
 9cc:	78783466 	ldmdavc	r8!, {r1, r2, r5, r6, sl, ip, sp}^
 9d0:	0500682e 	streq	r6, [r0, #-2094]	; 0xfffff7d2
 9d4:	696d0000 	stmdbvs	sp!, {}^	; <UNPREDICTABLE>
 9d8:	682e6373 	stmdavs	lr!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}
 9dc:	00000500 	andeq	r0, r0, r0, lsl #10
 9e0:	02050000 	andeq	r0, r5, #0
 9e4:	2000194c 	andcs	r1, r0, ip, asr #18
 9e8:	0100f603 	tsteq	r0, r3, lsl #12	; <UNPREDICTABLE>
 9ec:	0c03594f 			; <UNDEFINED> instruction: 0x0c03594f
 9f0:	4dc14b90 	vstrmi	d20, [r1, #576]	; 0x240
 9f4:	9192759f 			; <UNDEFINED> instruction: 0x9192759f
 9f8:	57b05aae 	ldrpl	r5, [r0, lr, lsr #21]!
 9fc:	09032d67 	stmdbeq	r3, {r0, r1, r2, r5, r6, r8, sl, fp, sp}
 a00:	67571e2e 	ldrbvs	r1, [r7, -lr, lsr #28]
 a04:	0c034d2d 	stceq	13, cr4, [r3], {45}	; 0x2d
 a08:	03835d90 	orreq	r5, r3, #144, 26	; 0x2400
 a0c:	4c95900d 	ldcmi	0, cr9, [r5], {13}
 a10:	03841e7a 	orreq	r1, r4, #1952	; 0x7a0
 a14:	3e4d740b 	cdpcc	4, 4, cr7, cr13, cr11, {0}
 a18:	02681e6c 	rsbeq	r1, r8, #108, 28	; 0x6c0
 a1c:	01010006 	tsteq	r1, r6
 a20:	0000014e 	andeq	r0, r0, lr, asr #2
 a24:	01080002 	tsteq	r8, r2
 a28:	01020000 	mrseq	r0, (UNDEF: 2)
 a2c:	000d0efb 	strdeq	r0, [sp], -fp
 a30:	01010101 	tsteq	r1, r1, lsl #2
 a34:	01000000 	mrseq	r0, (UNDEF: 0)
 a38:	43010000 	movwmi	r0, #4096	; 0x1000
 a3c:	73552f3a 	cmpvc	r5, #58, 30	; 0xe8
 a40:	2f737265 	svccs	0x00737265
 a44:	6d616441 	cfstrdvs	mvd6, [r1, #-260]!	; 0xfffffefc
 a48:	6e4f2f74 	mcrvs	15, 2, r2, cr15, cr4, {3}
 a4c:	69724465 	ldmdbvs	r2!, {r0, r2, r5, r6, sl, lr}^
 a50:	442f6576 	strtmi	r6, [pc], #-1398	; a58 <startup-0x1ffff5a8>
 a54:	6d756b6f 	fldmdbxvs	r5!, {d22-d76}	;@ Deprecated
 a58:	2f746e65 	svccs	0x00746e65
 a5c:	48746947 	ldmdami	r4!, {r0, r1, r2, r6, r8, fp, sp, lr}^
 a60:	442f6275 	strtmi	r6, [pc], #-629	; a68 <startup-0x1ffff598>
 a64:	39325441 	ldmdbcc	r2!, {r0, r6, sl, ip, lr}
 a68:	614c2d30 	cmpvs	ip, r0, lsr sp
 a6c:	79736d72 	ldmdbvc	r3!, {r1, r4, r5, r6, r8, sl, fp, sp, lr}^
 a70:	6d657473 	cfstrdvs	mvd7, [r5, #-460]!	; 0xfffffe34
 a74:	646f6b2f 	strbtvs	r6, [pc], #-2863	; a7c <startup-0x1ffff584>
 a78:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
 a7c:	5c3a6300 	ldcpl	3, cr6, [sl], #-0
 a80:	61657363 	cmnvs	r5, r3, ror #6
 a84:	635c7070 	cmpvs	ip, #112	; 0x70
 a88:	6c65646f 	cfstrdvs	mvd6, [r5], #-444	; 0xfffffe44
 a8c:	5c657469 	cfstrdpl	mvd7, [r5], #-420	; 0xfffffe5c
 a90:	6c6f6f74 	stclvs	15, cr6, [pc], #-464	; 8c8 <startup-0x1ffff738>
 a94:	63675c73 	cmnvs	r7, #29440	; 0x7300
 a98:	72612d63 	rsbvc	r2, r1, #6336	; 0x18c0
 a9c:	72615c6d 	rsbvc	r5, r1, #27904	; 0x6d00
 aa0:	6f6e2d6d 	svcvs	0x006e2d6d
 aa4:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
 aa8:	5c696261 	sfmpl	f6, 2, [r9], #-388	; 0xfffffe7c
 aac:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
 ab0:	5c656475 	cfstrdpl	mvd6, [r5], #-468	; 0xfffffe2c
 ab4:	6863616d 	stmdavs	r3!, {r0, r2, r3, r5, r6, r8, sp, lr}^
 ab8:	00656e69 	rsbeq	r6, r5, r9, ror #28
 abc:	635c3a63 	cmpvs	ip, #405504	; 0x63000
 ac0:	70616573 	rsbvc	r6, r1, r3, ror r5
 ac4:	6f635c70 	svcvs	0x00635c70
 ac8:	696c6564 	stmdbvs	ip!, {r2, r5, r6, r8, sl, sp, lr}^
 acc:	745c6574 	ldrbvc	r6, [ip], #-1396	; 0xfffffa8c
 ad0:	736c6f6f 	cmnvc	ip, #444	; 0x1bc
 ad4:	6363675c 	cmnvs	r3, #92, 14	; 0x1700000
 ad8:	6d72612d 	ldfvse	f6, [r2, #-180]!	; 0xffffff4c
 adc:	6d72615c 	ldfvse	f6, [r2, #-368]!	; 0xfffffe90
 ae0:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
 ae4:	61652d65 	cmnvs	r5, r5, ror #26
 ae8:	695c6962 	ldmdbvs	ip, {r1, r5, r6, r8, fp, sp, lr}^
 aec:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
 af0:	735c6564 	cmpvc	ip, #100, 10	; 0x19000000
 af4:	00007379 	andeq	r7, r0, r9, ror r3
 af8:	66667562 	strbtvs	r7, [r6], -r2, ror #10
 afc:	632e7265 			; <UNDEFINED> instruction: 0x632e7265
 b00:	00000100 	andeq	r0, r0, r0, lsl #2
 b04:	6665645f 			; <UNDEFINED> instruction: 0x6665645f
 b08:	746c7561 	strbtvc	r7, [ip], #-1377	; 0xfffffa9f
 b0c:	7079745f 	rsbsvc	r7, r9, pc, asr r4
 b10:	682e7365 	stmdavs	lr!, {r0, r2, r5, r6, r8, r9, ip, sp, lr}
 b14:	00000200 	andeq	r0, r0, r0, lsl #4
 b18:	6474735f 	ldrbtvs	r7, [r4], #-863	; 0xfffffca1
 b1c:	2e746e69 	cdpcs	14, 7, cr6, cr4, cr9, {3}
 b20:	00030068 	andeq	r0, r3, r8, rrx
 b24:	66756200 	ldrbtvs	r6, [r5], -r0, lsl #4
 b28:	2e726566 	cdpcs	5, 7, cr6, cr2, cr6, {3}
 b2c:	00010068 	andeq	r0, r1, r8, rrx
 b30:	05000000 	streq	r0, [r0, #-0]
 b34:	001b1002 	andseq	r1, fp, r2
 b38:	4b4b1520 	blmi	12c5fc0 <startup-0x1ed3a040>
 b3c:	764e4b4b 	strbvc	r4, [lr], -fp, asr #22
 b40:	85c93259 	strbhi	r3, [r9, #601]	; 0x259
 b44:	4e214c59 	mcrmi	12, 1, r4, cr1, cr9, {2}
 b48:	0402007a 	streq	r0, [r2], #-122	; 0xffffff86
 b4c:	00580601 	subseq	r0, r8, r1, lsl #12
 b50:	66020402 	strvs	r0, [r2], -r2, lsl #8
 b54:	04040200 	streq	r0, [r4], #-512	; 0xfffffe00
 b58:	04020020 	streq	r0, [r2], #-32	; 0xffffffe0
 b5c:	003f0604 	eorseq	r0, pc, r4, lsl #12
 b60:	67040402 	strvs	r0, [r4, -r2, lsl #8]
 b64:	32595a4e 	subscc	r5, r9, #319488	; 0x4e000
 b68:	4c5985c9 	cfldr64mi	mvdx8, [r9], {201}	; 0xc9
 b6c:	00040221 	andeq	r0, r4, r1, lsr #4
 b70:	034f0101 	movteq	r0, #61697	; 0xf101
 b74:	00020000 	andeq	r0, r2, r0
 b78:	000001de 	ldrdeq	r0, [r0], -lr
 b7c:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
 b80:	0101000d 	tsteq	r1, sp
 b84:	00000101 	andeq	r0, r0, r1, lsl #2
 b88:	00000100 	andeq	r0, r0, r0, lsl #2
 b8c:	2f3a4301 	svccs	0x003a4301
 b90:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
 b94:	64412f73 	strbvs	r2, [r1], #-3955	; 0xfffff08d
 b98:	2f746d61 	svccs	0x00746d61
 b9c:	44656e4f 	strbtmi	r6, [r5], #-3663	; 0xfffff1b1
 ba0:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
 ba4:	6b6f442f 	blvs	1bd1c68 <startup-0x1e42e398>
 ba8:	6e656d75 	mcrvs	13, 3, r6, cr5, cr5, {3}
 bac:	69472f74 	stmdbvs	r7, {r2, r4, r5, r6, r8, r9, sl, fp, sp}^
 bb0:	62754874 	rsbsvs	r4, r5, #116, 16	; 0x740000
 bb4:	5441442f 	strbpl	r4, [r1], #-1071	; 0xfffffbd1
 bb8:	2d303932 			; <UNDEFINED> instruction: 0x2d303932
 bbc:	6d72614c 	ldfvse	f6, [r2, #-304]!	; 0xfffffed0
 bc0:	74737973 	ldrbtvc	r7, [r3], #-2419	; 0xfffff68d
 bc4:	6b2f6d65 	blvs	bdc160 <startup-0x1f423ea0>
 bc8:	6c2f646f 	cfstrsvs	mvf6, [pc], #-444	; a14 <startup-0x1ffff5ec>
 bcc:	532f6269 			; <UNDEFINED> instruction: 0x532f6269
 bd0:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
 bd4:	6c5f3446 	cfldrdvs	mvd3, [pc], {70}	; 0x46
 bd8:	532f6269 			; <UNDEFINED> instruction: 0x532f6269
 bdc:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
 be0:	78783446 	ldmdavc	r8!, {r1, r2, r6, sl, ip, sp}^
 be4:	6474535f 	ldrbtvs	r5, [r4], #-863	; 0xfffffca1
 be8:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
 bec:	445f6870 	ldrbmi	r6, [pc], #-2160	; bf4 <startup-0x1ffff40c>
 bf0:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
 bf4:	72732f72 	rsbsvc	r2, r3, #456	; 0x1c8
 bf8:	3a630063 	bcc	18c0d8c <startup-0x1e73f274>
 bfc:	6573635c 	ldrbvs	r6, [r3, #-860]!	; 0xfffffca4
 c00:	5c707061 	ldclpl	0, cr7, [r0], #-388	; 0xfffffe7c
 c04:	65646f63 	strbvs	r6, [r4, #-3939]!	; 0xfffff09d
 c08:	6574696c 	ldrbvs	r6, [r4, #-2412]!	; 0xfffff694
 c0c:	6f6f745c 	svcvs	0x006f745c
 c10:	675c736c 	ldrbvs	r7, [ip, -ip, ror #6]
 c14:	612d6363 			; <UNDEFINED> instruction: 0x612d6363
 c18:	615c6d72 	cmpvs	ip, r2, ror sp
 c1c:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
 c20:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
 c24:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
 c28:	636e695c 	cmnvs	lr, #92, 18	; 0x170000
 c2c:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
 c30:	63616d5c 	cmnvs	r1, #92, 26	; 0x1700
 c34:	656e6968 	strbvs	r6, [lr, #-2408]!	; 0xfffff698
 c38:	5c3a6300 	ldcpl	3, cr6, [sl], #-0
 c3c:	61657363 	cmnvs	r5, r3, ror #6
 c40:	635c7070 	cmpvs	ip, #112	; 0x70
 c44:	6c65646f 	cfstrdvs	mvd6, [r5], #-444	; 0xfffffe44
 c48:	5c657469 	cfstrdpl	mvd7, [r5], #-420	; 0xfffffe5c
 c4c:	6c6f6f74 	stclvs	15, cr6, [pc], #-464	; a84 <startup-0x1ffff57c>
 c50:	63675c73 	cmnvs	r7, #29440	; 0x7300
 c54:	72612d63 	rsbvc	r2, r1, #6336	; 0x18c0
 c58:	72615c6d 	rsbvc	r5, r1, #27904	; 0x6d00
 c5c:	6f6e2d6d 	svcvs	0x006e2d6d
 c60:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
 c64:	5c696261 	sfmpl	f6, 2, [r9], #-388	; 0xfffffe7c
 c68:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
 c6c:	5c656475 	cfstrdpl	mvd6, [r5], #-468	; 0xfffffe2c
 c70:	00737973 	rsbseq	r7, r3, r3, ror r9
 c74:	6c2f2e2e 	stcvs	14, cr2, [pc], #-184	; bc4 <startup-0x1ffff43c>
 c78:	532f6269 			; <UNDEFINED> instruction: 0x532f6269
 c7c:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
 c80:	6c5f3446 	cfldrdvs	mvd3, [pc], {70}	; 0x46
 c84:	432f6269 			; <UNDEFINED> instruction: 0x432f6269
 c88:	5349534d 	movtpl	r5, #37709	; 0x934d
 c8c:	636e692f 	cmnvs	lr, #770048	; 0xbc000
 c90:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
 c94:	2f2e2e00 	svccs	0x002e2e00
 c98:	2f62696c 	svccs	0x0062696c
 c9c:	334d5453 	movtcc	r5, #54355	; 0xd453
 ca0:	5f344632 	svcpl	0x00344632
 ca4:	2f62696c 	svccs	0x0062696c
 ca8:	334d5453 	movtcc	r5, #54355	; 0xd453
 cac:	78344632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, lr}
 cb0:	74535f78 	ldrbvc	r5, [r3], #-3960	; 0xfffff088
 cb4:	72655064 	rsbvc	r5, r5, #100	; 0x64
 cb8:	5f687069 	svcpl	0x00687069
 cbc:	76697244 	strbtvc	r7, [r9], -r4, asr #4
 cc0:	692f7265 	stmdbvs	pc!, {r0, r2, r5, r6, r9, ip, sp, lr}	; <UNPREDICTABLE>
 cc4:	0000636e 	andeq	r6, r0, lr, ror #6
 cc8:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
 ccc:	78346632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, sp, lr}
 cd0:	73755f78 	cmnvc	r5, #120, 30	; 0x1e0
 cd4:	2e747261 	cdpcs	2, 7, cr7, cr4, cr1, {3}
 cd8:	00010063 	andeq	r0, r1, r3, rrx
 cdc:	65645f00 	strbvs	r5, [r4, #-3840]!	; 0xfffff100
 ce0:	6c756166 	ldfvse	f6, [r5], #-408	; 0xfffffe68
 ce4:	79745f74 	ldmdbvc	r4!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
 ce8:	2e736570 	mrccs	5, 3, r6, cr3, cr0, {3}
 cec:	00020068 	andeq	r0, r2, r8, rrx
 cf0:	74735f00 	ldrbtvc	r5, [r3], #-3840	; 0xfffff100
 cf4:	746e6964 	strbtvc	r6, [lr], #-2404	; 0xfffff69c
 cf8:	0300682e 	movweq	r6, #2094	; 0x82e
 cfc:	6f630000 	svcvs	0x00630000
 d00:	635f6572 	cmpvs	pc, #478150656	; 0x1c800000
 d04:	682e346d 	stmdavs	lr!, {r0, r2, r3, r5, r6, sl, ip, sp}
 d08:	00000400 	andeq	r0, r0, r0, lsl #8
 d0c:	74737973 	ldrbtvc	r7, [r3], #-2419	; 0xfffff68d
 d10:	735f6d65 	cmpvc	pc, #6464	; 0x1940
 d14:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
 d18:	78783466 	ldmdavc	r8!, {r1, r2, r5, r6, sl, ip, sp}^
 d1c:	0500682e 	streq	r6, [r0, #-2094]	; 0xfffff7d2
 d20:	74730000 	ldrbtvc	r0, [r3], #-0
 d24:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
 d28:	2e787834 	mrccs	8, 3, r7, cr8, cr4, {1}
 d2c:	00050068 	andeq	r0, r5, r8, rrx
 d30:	6d747300 	ldclvs	3, cr7, [r4, #-0]
 d34:	34663233 	strbtcc	r3, [r6], #-563	; 0xfffffdcd
 d38:	755f7878 	ldrbvc	r7, [pc, #-2168]	; 4c8 <startup-0x1ffffb38>
 d3c:	74726173 	ldrbtvc	r6, [r2], #-371	; 0xfffffe8d
 d40:	0500682e 	streq	r6, [r0, #-2094]	; 0xfffff7d2
 d44:	74730000 	ldrbtvc	r0, [r3], #-0
 d48:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
 d4c:	5f787834 	svcpl	0x00787834
 d50:	2e636372 	mcrcs	3, 3, r6, cr3, cr2, {3}
 d54:	00050068 	andeq	r0, r5, r8, rrx
 d58:	05000000 	streq	r0, [r0, #-0]
 d5c:	001c3802 	andseq	r3, ip, r2, lsl #16
 d60:	01bb0320 			; <UNDEFINED> instruction: 0x01bb0320
 d64:	4b4c4e01 	blmi	1314570 <startup-0x1eceba90>
 d68:	034a2803 	movteq	r2, #43011	; 0xa803
 d6c:	674c205a 	smlsldvs	r2, ip, sl, r0
 d70:	03662303 	cmneq	r6, #201326592	; 0xc000000
 d74:	674c205f 	smlsldvs	r2, ip, pc, r0	; <UNPREDICTABLE>
 d78:	03661e03 	cmneq	r6, #3, 28	; 0x30
 d7c:	674c2064 	strbvs	r2, [ip, -r4, rrx]
 d80:	03661903 	cmneq	r6, #49152	; 0xc000
 d84:	674c2069 	strbvs	r2, [ip, -r9, rrx]
 d88:	03661403 	cmneq	r6, #50331648	; 0x3000000
 d8c:	4b4c206e 	blmi	1308f4c <startup-0x1ecf70b4>
 d90:	034a0f03 	movteq	r0, #44803	; 0xaf03
 d94:	674c2073 	smlsldxvs	r2, ip, r3, r0
 d98:	03660a03 	cmneq	r6, #12288	; 0x3000
 d9c:	674c207a 	smlsldxvs	r2, ip, sl, r0
 da0:	080c0369 	stmdaeq	ip, {r0, r3, r5, r6, r8, r9}
 da4:	2f4b594a 	svccs	0x004b594a
 da8:	4d2e1303 	stcmi	3, cr1, [lr, #-12]!
 dac:	4d4d694e 	vstrmi.16	s13, [sp, #-156]	; 0xffffff64	; <UNPREDICTABLE>
 db0:	6a2d6750 	bvs	b5aaf8 <startup-0x1f4a5508>
 db4:	694e4d4d 	stmdbvs	lr, {r0, r2, r3, r6, r8, sl, fp, lr}^
 db8:	02005a4e 	andeq	r5, r0, #319488	; 0x4e000
 dbc:	4a060104 	bmi	1811d4 <startup-0x1fe7ee2c>
 dc0:	4e5c4c06 	cdpmi	12, 5, cr4, cr12, cr6, {0}
 dc4:	85e6f769 	strbhi	pc, [r6, #1897]!	; 0x769	; <UNPREDICTABLE>
 dc8:	dae86877 	ble	ffa1afac <GPIO_Ports+0xdfa18828>
 dcc:	d609034b 	strle	r0, [r9], -fp, asr #6
 dd0:	3d3d4b4c 	vldmdbcc	sp!, {d4-<overflow reg d41>}
 dd4:	033d3d3d 	teqeq	sp, #3904	; 0xf40
 dd8:	03594a0c 	cmpeq	r9, #12, 20	; 0xc000
 ddc:	504c2e09 	subpl	r2, ip, r9, lsl #28
 de0:	4b3fab4b 	blmi	febb14 <startup-0x1f0144ec>
 de4:	4c660903 			; <UNDEFINED> instruction: 0x4c660903
 de8:	3d3d3d3d 	ldccc	13, cr3, [sp, #-244]!	; 0xffffff0c
 dec:	794a0b03 	stmdbvc	sl, {r0, r1, r8, r9, fp}^
 df0:	841e974d 	ldrhi	r9, [lr], #-1869	; 0xfffff8b3
 df4:	79740b03 	ldmdbvc	r4!, {r0, r1, r8, r9, fp}^
 df8:	0d039f84 	stceq	15, cr9, [r3, #-528]	; 0xfffffdf0
 dfc:	894d794a 	stmdbhi	sp, {r1, r3, r6, r8, fp, ip, sp, lr}^
 e00:	0b03841e 	bleq	e1e80 <startup-0x1ff1e180>
 e04:	974d7974 	smlsldxls	r7, sp, r4, r9
 e08:	2a03841e 	bcs	e1e88 <startup-0x1ff1e178>
 e0c:	03757a74 	cmneq	r5, #116, 20	; 0x74000
 e10:	674f4a09 	strbvs	r4, [pc, -r9, lsl #20]
 e14:	7a4a2e03 	bvc	128c628 <startup-0x1ed739d8>
 e18:	0b039f84 	bleq	e8c30 <startup-0x1ff173d0>
 e1c:	894d794a 	stmdbhi	sp, {r1, r3, r6, r8, fp, ip, sp, lr}^
 e20:	0c03841e 	cfstrseq	mvf8, [r3], {30}
 e24:	9183794a 	orrls	r7, r3, sl, asr #18
 e28:	79743e03 	ldmdbvc	r4!, {r0, r1, r9, sl, fp, ip, sp}^
 e2c:	0b039183 	bleq	e5440 <startup-0x1ff1abc0>
 e30:	974d794a 	strbls	r7, [sp, -sl, asr #18]
 e34:	0903841e 	stmdbeq	r3, {r1, r2, r3, r4, sl, pc}
 e38:	03834f74 	orreq	r4, r3, #116, 30	; 0x1d0
 e3c:	4d794a2f 	vldmdbmi	r9!, {s9-s55}
 e40:	03841e89 	orreq	r1, r4, #2192	; 0x890
 e44:	794a00c5 	stmdbvc	sl, {r0, r2, r6, r7}^
 e48:	0b03bb84 	bleq	efc60 <startup-0x1ff103a0>
 e4c:	894d784a 	stmdbhi	sp, {r1, r3, r6, fp, ip, sp, lr}^
 e50:	0b03841e 	bleq	e1ed0 <startup-0x1ff1e130>
 e54:	894d784a 	stmdbhi	sp, {r1, r3, r6, fp, ip, sp, lr}^
 e58:	3903841e 	stmdbcc	r3, {r1, r2, r3, r4, sl, pc}
 e5c:	9183794a 	orrls	r7, r3, sl, asr #18
 e60:	794a0b03 	stmdbvc	sl, {r0, r1, r8, r9, fp}^
 e64:	841e894d 	ldrhi	r8, [lr], #-2381	; 0xfffff6b3
 e68:	c04a1f03 	subgt	r1, sl, r3, lsl #30
 e6c:	ae1e984e 	cdpge	8, 1, cr9, cr14, cr14, {2}
 e70:	4a00f203 	bmi	3d684 <startup-0x1ffc297c>
 e74:	0c0367bb 	stceq	7, cr6, [r3], {187}	; 0xbb
 e78:	5969312e 	stmdbpl	r9!, {r1, r2, r3, r5, r8, ip, sp}^
 e7c:	3e4c3e5a 	mcrcc	14, 2, r3, cr12, cr10, {2}
 e80:	6c4c3e4e 	mcrrvs	14, 4, r3, ip, cr14
 e84:	1503761e 	strne	r7, [r3, #-1566]	; 0xfffff9e2
 e88:	0b03754a 	bleq	de3b8 <startup-0x1ff21c48>
 e8c:	4c5c924a 	lfmmi	f1, 3, [ip], {74}	; 0x4a
 e90:	4a1c033d 	bmi	701b8c <startup-0x1f8fe474>
 e94:	67740b03 	ldrbvs	r0, [r4, -r3, lsl #22]!
 e98:	754a1603 	strbvc	r1, [sl, #-1539]	; 0xfffff9fd
 e9c:	4a0c0367 	bmi	301c40 <startup-0x1fcfe3c0>
 ea0:	3e5a5968 	vnmlacc.f16	s11, s20, s17	; <UNPREDICTABLE>
 ea4:	77863e84 	strvc	r3, [r6, r4, lsl #29]
 ea8:	00755959 	rsbseq	r5, r5, r9, asr r9
 eac:	06010402 	streq	r0, [r1], -r2, lsl #8
 eb0:	5c3e063c 	ldcpl	6, cr0, [lr], #-240	; 0xffffff10
 eb4:	1d033d4d 	stcne	13, cr3, [r3, #-308]	; 0xfffffecc
 eb8:	0b03754a 	bleq	de3e8 <startup-0x1ff21c18>
 ebc:	67675982 	strbvs	r5, [r7, -r2, lsl #19]!
 ec0:	01000402 	tsteq	r0, r2, lsl #8
 ec4:	Address 0x00000ec4 is out of bounds.


Disassembly of section .debug_str:

00000000 <.debug_str>:
       0:	706c6c70 	rsbvc	r6, ip, r0, ror ip
       4:	45535200 	ldrbmi	r5, [r3, #-512]	; 0xfffffe00
       8:	44455652 	strbmi	r5, [r5], #-1618	; 0xfffff9ae
       c:	54520031 	ldrbpl	r0, [r2], #-49	; 0xffffffcf
      10:	4b575f43 	blmi	15d7d24 <startup-0x1ea282dc>
      14:	495f5055 	ldmdbmi	pc, {r0, r2, r4, r6, ip, lr}^	; <UNPREDICTABLE>
      18:	006e5152 	rsbeq	r5, lr, r2, asr r1
      1c:	49545845 	ldmdbmi	r4, {r0, r2, r6, fp, ip, lr}^
      20:	52495f32 	subpl	r5, r9, #50, 30	; 0xc8
      24:	44006e51 	strmi	r6, [r0], #-3665	; 0xfffff1af
      28:	5f31414d 	svcpl	0x0031414d
      2c:	65727453 	ldrbvs	r7, [r2, #-1107]!	; 0xfffffbad
      30:	5f366d61 	svcpl	0x00366d61
      34:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
      38:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
      3c:	50555f38 	subspl	r5, r5, r8, lsr pc
      40:	4d49545f 	cfstrdmi	mvd5, [r9, #-380]	; 0xfffffe84
      44:	495f3331 	ldmdbmi	pc, {r0, r4, r5, r8, r9, ip, sp}^	; <UNPREDICTABLE>
      48:	006e5152 	rsbeq	r5, lr, r2, asr r1
      4c:	494c4c50 	stmdbmi	ip, {r4, r6, sl, fp, lr}^
      50:	46435332 			; <UNDEFINED> instruction: 0x46435332
      54:	52005247 	andpl	r5, r0, #1879048196	; 0x70000004
      58:	495f4343 	ldmdbmi	pc, {r0, r1, r6, r8, r9, lr}^	; <UNPREDICTABLE>
      5c:	4c435332 	mcrrmi	3, 3, r5, r3, cr2
      60:	6e6f434b 	cdpvs	3, 6, cr4, cr15, cr11, {2}
      64:	00676966 	rsbeq	r6, r7, r6, ror #18
      68:	5f434352 	svcpl	0x00434352
      6c:	43746547 	cmnmi	r4, #297795584	; 0x11c00000
      70:	6b636f6c 	blvs	18dbe28 <startup-0x1e7241d8>
      74:	65724673 	ldrbvs	r4, [r2, #-1651]!	; 0xfffff98d
      78:	4d440071 	stclmi	0, cr0, [r4, #-452]	; 0xfffffe3c
      7c:	535f3241 	cmppl	pc, #268435460	; 0x10000004
      80:	61657274 	smcvs	22308	; 0x5724
      84:	495f316d 	ldmdbmi	pc, {r0, r2, r3, r5, r6, r8, ip, sp}^	; <UNPREDICTABLE>
      88:	006e5152 	rsbeq	r5, lr, r2, asr r1
      8c:	4b4c4348 	blmi	1310db4 <startup-0x1ecef24c>
      90:	6572465f 	ldrbvs	r4, [r2, #-1631]!	; 0xfffff9a1
      94:	6e657571 	mcrvs	5, 3, r7, cr5, cr1, {3}
      98:	47007963 	strmi	r7, [r0, -r3, ror #18]
      9c:	5f4f4950 	svcpl	0x004f4950
      a0:	64507550 	ldrbvs	r7, [r0], #-1360	; 0xfffffab0
      a4:	504f4e5f 	subpl	r4, pc, pc, asr lr	; <UNPREDICTABLE>
      a8:	004c4c55 	subeq	r4, ip, r5, asr ip
      ac:	524f5456 	subpl	r5, pc, #1442840576	; 0x56000000
      b0:	49505300 	ldmdbmi	r0, {r8, r9, ip, lr}^
      b4:	52495f33 	subpl	r5, r9, #51, 30	; 0xcc
      b8:	46006e51 			; <UNDEFINED> instruction: 0x46006e51
      bc:	4853414c 	ldmdami	r3, {r2, r3, r6, r8, lr}^
      c0:	5152495f 	cmppl	r2, pc, asr r9
      c4:	4344006e 	movtmi	r0, #16494	; 0x406e
      c8:	495f494d 	ldmdbmi	pc, {r0, r2, r3, r6, r8, fp, lr}^	; <UNPREDICTABLE>
      cc:	006e5152 	rsbeq	r5, lr, r2, asr r1
      d0:	5f434352 	svcpl	0x00434352
      d4:	32425041 	subcc	r5, r2, #65	; 0x41
      d8:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
      dc:	6c436870 	mcrrvs	8, 7, r6, r3, cr0
      e0:	4c6b636f 	stclmi	3, cr6, [fp], #-444	; 0xfffffe44
      e4:	646f4d50 	strbtvs	r4, [pc], #-3408	; ec <startup-0x1fffff14>
      e8:	646d4365 	strbtvs	r4, [sp], #-869	; 0xfffffc9b
      ec:	43435200 	movtmi	r5, #12800	; 0x3200
      f0:	4248415f 	submi	r4, r8, #-1073741801	; 0xc0000017
      f4:	72655032 	rsbvc	r5, r5, #50	; 0x32
      f8:	43687069 	cmnmi	r8, #105	; 0x69
      fc:	6b636f6c 	blvs	18dbeb4 <startup-0x1e72414c>
     100:	6f4d504c 	svcvs	0x004d504c
     104:	6d436564 	cfstr64vs	mvdx6, [r3, #-400]	; 0xfffffe70
     108:	50470064 	subpl	r0, r7, r4, rrx
     10c:	544f4f49 	strbpl	r4, [pc], #-3913	; 114 <startup-0x1ffffeec>
     110:	5f657079 	svcpl	0x00657079
     114:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0xfffff6ac
     118:	00666544 	rsbeq	r6, r6, r4, asr #10
     11c:	5f434352 	svcpl	0x00434352
     120:	31425041 	cmpcc	r2, r1, asr #32
     124:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
     128:	65526870 	ldrbvs	r6, [r2, #-2160]	; 0xfffff790
     12c:	43746573 	cmnmi	r4, #482344960	; 0x1cc00000
     130:	5200646d 	andpl	r6, r0, #1828716544	; 0x6d000000
     134:	4d5f4343 	ldclmi	3, cr4, [pc, #-268]	; 30 <startup-0x1fffffd0>
     138:	0065646f 	rsbeq	r6, r5, pc, ror #8
     13c:	324d4954 	subcc	r4, sp, #84, 18	; 0x150000
     140:	5152495f 	cmppl	r2, pc, asr r9
     144:	4352006e 	cmpmi	r2, #110	; 0x6e
     148:	54525f43 	ldrbpl	r5, [r2], #-3907	; 0xfffff0bd
     14c:	4b4c4343 	blmi	1310e60 <startup-0x1ecef1a0>
     150:	72756f53 	rsbsvc	r6, r5, #332	; 0x14c
     154:	52006563 	andpl	r6, r0, #415236096	; 0x18c00000
     158:	415f4343 	cmpmi	pc, r3, asr #6
     15c:	50324248 	eorspl	r4, r2, r8, asr #4
     160:	70697265 	rsbvc	r7, r9, r5, ror #4
     164:	6f6c4368 	svcvs	0x006c4368
     168:	6d436b63 	vstrvs	d22, [r3, #-396]	; 0xfffffe74
     16c:	43490064 	movtmi	r0, #36964	; 0x9064
     170:	64005250 	strvs	r5, [r0], #-592	; 0xfffffdb0
     174:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
     178:	43435200 	movtmi	r5, #12800	; 0x3200
     17c:	4c4c505f 	mcrrmi	0, 5, r5, ip, cr15
     180:	43533249 	cmpmi	r3, #-1879048188	; 0x90000004
     184:	5200646d 	andpl	r6, r0, #1828716544	; 0x6d000000
     188:	485f4343 	ldmdami	pc, {r0, r1, r6, r8, r9, lr}^	; <UNPREDICTABLE>
     18c:	004b4c43 	subeq	r4, fp, r3, asr #24
     190:	324e4143 	subcc	r4, lr, #-1073741808	; 0xc0000010
     194:	3058525f 	subscc	r5, r8, pc, asr r2
     198:	5152495f 	cmppl	r2, pc, asr r9
     19c:	5355006e 	cmppl	r5, #110	; 0x6e
     1a0:	36545241 	ldrbcc	r5, [r4], -r1, asr #4
     1a4:	5152495f 	cmppl	r2, pc, asr r9
     1a8:	6974006e 	ldmdbvs	r4!, {r1, r2, r3, r5, r6}^
     1ac:	6c5f656d 	cfldr64vs	mvdx6, [pc], {109}	; 0x6d
     1b0:	006d7261 	rsbeq	r7, sp, r1, ror #4
     1b4:	69755f5f 	ldmdbvs	r5!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, ip, lr}^
     1b8:	5f38746e 	svcpl	0x0038746e
     1bc:	50530074 	subspl	r0, r3, r4, ror r0
     1c0:	495f3249 	ldmdbmi	pc, {r0, r3, r6, r9, ip, sp}^	; <UNPREDICTABLE>
     1c4:	006e5152 	rsbeq	r5, lr, r2, asr r1
     1c8:	384d4954 	stmdacc	sp, {r2, r4, r6, r8, fp, lr}^
     1cc:	4b52425f 	blmi	1490b50 <startup-0x1eb6f4b0>
     1d0:	4d49545f 	cfstrdmi	mvd5, [r9, #-380]	; 0xfffffe84
     1d4:	495f3231 	ldmdbmi	pc, {r0, r4, r5, r9, ip, sp}^	; <UNPREDICTABLE>
     1d8:	006e5152 	rsbeq	r5, lr, r2, asr r1
     1dc:	32424841 	subcc	r4, r2, #4259840	; 0x410000
     1e0:	4e45504c 	cdpmi	0, 4, cr5, cr5, cr12, {2}
     1e4:	50470052 	subpl	r0, r7, r2, asr r0
     1e8:	505f4f49 	subspl	r4, pc, r9, asr #30
     1ec:	5f645075 	svcpl	0x00645075
     1f0:	4e574f44 	cdpmi	15, 5, cr4, cr7, cr4, {2}
     1f4:	52494100 	subpl	r4, r9, #0, 2
     1f8:	52005243 	andpl	r5, r0, #805306372	; 0x30000004
     1fc:	535f4343 	cmppl	pc, #201326593	; 0xc000001
     200:	4c504941 	mrrcmi	9, 4, r4, r0, cr1	; <UNPREDICTABLE>
     204:	4941534c 	stmdbmi	r1, {r2, r3, r6, r8, r9, ip, lr}^
     208:	446b6c43 	strbtmi	r6, [fp], #-3139	; 0xfffff3bd
     20c:	6f437669 	svcvs	0x00437669
     210:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
     214:	696e6900 	stmdbvs	lr!, {r8, fp, sp, lr}^
     218:	50475f74 	subpl	r5, r7, r4, ror pc
     21c:	505f4f49 	subspl	r4, pc, r9, asr #30
     220:	7374726f 	cmnvc	r4, #-268435450	; 0xf0000006
     224:	55504300 	ldrbpl	r4, [r0, #-768]	; 0xfffffd00
     228:	53004449 	movwpl	r4, #1097	; 0x449
     22c:	69547379 	ldmdbvs	r4, {r0, r3, r4, r5, r6, r8, r9, ip, sp, lr}^
     230:	485f6b63 	ldmdami	pc, {r0, r1, r5, r6, r8, r9, fp, sp, lr}^	; <UNPREDICTABLE>
     234:	6c646e61 	stclvs	14, cr6, [r4], #-388	; 0xfffffe7c
     238:	52007265 	andpl	r7, r0, #1342177286	; 0x50000006
     23c:	4c5f4343 	mrrcmi	3, 4, r4, pc, cr3	; <UNPREDICTABLE>
     240:	43434454 	movtmi	r4, #13396	; 0x3454
     244:	69444b4c 	stmdbvs	r4, {r2, r3, r6, r8, r9, fp, lr}^
     248:	6e6f4376 	mcrvs	3, 3, r4, cr15, cr6, {3}
     24c:	00676966 	rsbeq	r6, r7, r6, ror #18
     250:	32414d44 	subcc	r4, r1, #68, 26	; 0x1100
     254:	7274535f 	rsbsvc	r5, r4, #2080374785	; 0x7c000001
     258:	356d6165 	strbcc	r6, [sp, #-357]!	; 0xfffffe9b
     25c:	5152495f 	cmppl	r2, pc, asr r9
     260:	5047006e 	subpl	r0, r7, lr, rrx
     264:	4d5f4f49 	ldclmi	15, cr4, [pc, #-292]	; 148 <startup-0x1ffffeb8>
     268:	5f65646f 	svcpl	0x0065646f
     26c:	52004641 	andpl	r4, r0, #68157440	; 0x4100000
     270:	415f4343 	cmpmi	pc, r3, asr #6
     274:	50334248 	eorspl	r4, r3, r8, asr #4
     278:	70697265 	rsbvc	r7, r9, r5, ror #4
     27c:	73655268 	cmnvc	r5, #104, 4	; 0x80000006
     280:	6d437465 	cfstrdvs	mvd7, [r3, #-404]	; 0xfffffe6c
     284:	49540064 	ldmdbmi	r4, {r2, r5, r6}^
     288:	545f314d 	ldrbpl	r3, [pc], #-333	; 290 <startup-0x1ffffd70>
     28c:	435f4752 	cmpmi	pc, #21495808	; 0x1480000
     290:	545f4d4f 	ldrbpl	r4, [pc], #-3407	; 298 <startup-0x1ffffd68>
     294:	31314d49 	teqcc	r1, r9, asr #26
     298:	5152495f 	cmppl	r2, pc, asr r9
     29c:	5047006e 	subpl	r0, r7, lr, rrx
     2a0:	4d5f4f49 	ldclmi	15, cr4, [pc, #-292]	; 184 <startup-0x1ffffe7c>
     2a4:	5f65646f 	svcpl	0x0065646f
     2a8:	52004e41 	andpl	r4, r0, #1040	; 0x410
     2ac:	505f4343 	subspl	r4, pc, r3, asr #6
     2b0:	324b4c43 	subcc	r4, fp, #17152	; 0x4300
     2b4:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
     2b8:	63006769 	movwvs	r6, #1897	; 0x769
     2bc:	72746e6f 	rsbsvc	r6, r4, #1776	; 0x6f0
     2c0:	69626c6f 	stmdbvs	r2!, {r0, r1, r2, r3, r5, r6, sl, fp, sp, lr}^
     2c4:	52007374 	andpl	r7, r0, #116, 6	; 0xd0000001
     2c8:	445f4343 	ldrbmi	r4, [pc], #-835	; 2d0 <startup-0x1ffffd30>
     2cc:	696e4965 	stmdbvs	lr!, {r0, r2, r5, r6, r8, fp, lr}^
     2d0:	43520074 	cmpmi	r2, #116	; 0x74
     2d4:	41535f43 	cmpmi	r3, r3, asr #30
     2d8:	6f6c4249 	svcvs	0x006c4249
     2dc:	43426b63 	movtmi	r6, #11107	; 0x2b63
     2e0:	6f434b4c 	svcvs	0x00434b4c
     2e4:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
     2e8:	42504100 	subsmi	r4, r0, #0, 2
     2ec:	524e4532 	subpl	r4, lr, #209715200	; 0xc800000
     2f0:	43435200 	movtmi	r5, #12800	; 0x3200
     2f4:	7465475f 	strbtvc	r4, [r5], #-1887	; 0xfffff8a1
     2f8:	43535953 	cmpmi	r3, #1359872	; 0x14c000
     2fc:	6f534b4c 	svcvs	0x00534b4c
     300:	65637275 	strbvs	r7, [r3, #-629]!	; 0xfffffd8b
     304:	42484100 	submi	r4, r8, #0, 2
     308:	45504c31 	ldrbmi	r4, [r0, #-3121]	; 0xfffff3cf
     30c:	5200524e 	andpl	r5, r0, #-536870908	; 0xe0000004
     310:	505f4343 	subspl	r4, pc, r3, asr #6
     314:	32494c4c 	subcc	r4, r9, #76, 24	; 0x4c00
     318:	76694453 			; <UNDEFINED> instruction: 0x76694453
     31c:	79530051 	ldmdbvc	r3, {r0, r4, r6}^
     320:	63695473 	cmnvs	r9, #1929379840	; 0x73000000
     324:	52495f6b 	subpl	r5, r9, #428	; 0x1ac
     328:	52006e51 	andpl	r6, r0, #1296	; 0x510
     32c:	415f4343 	cmpmi	pc, r3, asr #6
     330:	50334248 	eorspl	r4, r3, r8, asr #4
     334:	70697265 	rsbvc	r7, r9, r5, ror #4
     338:	53550068 	cmppl	r5, #104	; 0x68
     33c:	33545241 	cmpcc	r4, #268435460	; 0x10000004
     340:	5152495f 	cmppl	r2, pc, asr r9
     344:	4344006e 	movtmi	r0, #16494	; 0x406e
     348:	4746434b 	strbmi	r4, [r6, -fp, asr #6]
     34c:	43490052 	movtmi	r0, #36946	; 0x9052
     350:	52005253 	andpl	r5, r0, #805306373	; 0x30000005
     354:	4d5f4343 	ldclmi	3, cr4, [pc, #-268]	; 250 <startup-0x1ffffdb0>
     358:	44324f43 	ldrtmi	r4, [r2], #-3907	; 0xfffff0bd
     35c:	47007669 	strmi	r7, [r0, -r9, ror #12]
     360:	5f4f4950 	svcpl	0x004f4950
     364:	7079544f 	rsbsvc	r5, r9, pc, asr #8
     368:	444f5f65 	strbmi	r5, [pc], #-3941	; 370 <startup-0x1ffffc90>
     36c:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
     370:	6e495f4f 	cdpvs	15, 4, cr5, cr9, cr15, {2}
     374:	79547469 	ldmdbvc	r4, {r0, r3, r5, r6, sl, ip, sp, lr}^
     378:	65446570 	strbvs	r6, [r4, #-1392]	; 0xfffffa90
     37c:	43520066 	cmpmi	r2, #102	; 0x66
     380:	59535f43 	ldmdbpl	r3, {r0, r1, r6, r8, r9, sl, fp, ip, lr}^
     384:	4b4c4353 	blmi	13110d8 <startup-0x1eceef28>
     388:	72756f53 	rsbsvc	r6, r5, #332	; 0x14c
     38c:	44006563 	strmi	r6, [r0], #-1379	; 0xfffffa9d
     390:	5f31414d 	svcpl	0x0031414d
     394:	65727453 	ldrbvs	r7, [r2, #-1107]!	; 0xfffffbad
     398:	5f326d61 	svcpl	0x00326d61
     39c:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     3a0:	43435200 	movtmi	r5, #12800	; 0x3200
     3a4:	4c4c505f 	mcrrmi	0, 5, r5, ip, cr15
     3a8:	72756f53 	rsbsvc	r6, r5, #332	; 0x14c
     3ac:	52006563 	andpl	r6, r0, #415236096	; 0x18c00000
     3b0:	415f4343 	cmpmi	pc, r3, asr #6
     3b4:	50314250 	eorspl	r4, r1, r0, asr r2
     3b8:	70697265 	rsbvc	r7, r9, r5, ror #4
     3bc:	6f6c4368 	svcvs	0x006c4368
     3c0:	6d436b63 	vstrvs	d22, [r3, #-396]	; 0xfffffe74
     3c4:	45520064 	ldrbmi	r0, [r2, #-100]	; 0xffffff9c
     3c8:	56524553 			; <UNDEFINED> instruction: 0x56524553
     3cc:	00304445 	eorseq	r4, r0, r5, asr #8
     3d0:	45534552 	ldrbmi	r4, [r3, #-1362]	; 0xfffffaae
     3d4:	44455652 	strbmi	r5, [r5], #-1618	; 0xfffff9ae
     3d8:	6e750031 	mrcvs	0, 3, r0, cr5, cr1, {1}
     3dc:	6e676973 			; <UNDEFINED> instruction: 0x6e676973
     3e0:	63206465 			; <UNDEFINED> instruction: 0x63206465
     3e4:	00726168 	rsbseq	r6, r2, r8, ror #2
     3e8:	32414d44 	subcc	r4, r1, #68, 26	; 0x1100
     3ec:	7274535f 	rsbsvc	r5, r4, #2080374785	; 0x7c000001
     3f0:	346d6165 	strbtcc	r6, [sp], #-357	; 0xfffffe9b
     3f4:	5152495f 	cmppl	r2, pc, asr r9
     3f8:	4552006e 	ldrbmi	r0, [r2, #-110]	; 0xffffff92
     3fc:	56524553 			; <UNDEFINED> instruction: 0x56524553
     400:	00344445 	eorseq	r4, r4, r5, asr #8
     404:	45534552 	ldrbmi	r4, [r3, #-1362]	; 0xfffffaae
     408:	44455652 	strbmi	r5, [r5], #-1618	; 0xfffff9ae
     40c:	45520035 	ldrbmi	r0, [r2, #-53]	; 0xffffffcb
     410:	56524553 			; <UNDEFINED> instruction: 0x56524553
     414:	00364445 	eorseq	r4, r6, r5, asr #8
     418:	52424149 	subpl	r4, r2, #1073741842	; 0x40000012
     41c:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
     420:	544f5f4f 	strbpl	r5, [pc], #-3919	; 428 <startup-0x1ffffbd8>
     424:	5f657079 	svcpl	0x00657079
     428:	49005050 	stmdbmi	r0, {r4, r6, ip, lr}
     42c:	5f314332 	svcpl	0x00314332
     430:	495f5245 	ldmdbmi	pc, {r0, r2, r6, r9, ip, lr}^	; <UNPREDICTABLE>
     434:	006e5152 	rsbeq	r5, lr, r2, asr r1
     438:	324e4143 	subcc	r4, lr, #-1073741808	; 0xc0000010
     43c:	4543535f 	strbmi	r5, [r3, #-863]	; 0xfffffca1
     440:	5152495f 	cmppl	r2, pc, asr r9
     444:	4352006e 	cmpmi	r2, #110	; 0x6e
     448:	534c5f43 	movtpl	r5, #53059	; 0xcf43
     44c:	6e6f4345 	cdpvs	3, 6, cr4, cr15, cr5, {2}
     450:	00676966 	rsbeq	r6, r7, r6, ror #18
     454:	45534552 	ldrbmi	r4, [r3, #-1362]	; 0xfffffaae
     458:	44455652 	strbmi	r5, [r5], #-1618	; 0xfffff9ae
     45c:	45520032 	ldrbmi	r0, [r2, #-50]	; 0xffffffce
     460:	56524553 			; <UNDEFINED> instruction: 0x56524553
     464:	00334445 	eorseq	r4, r3, r5, asr #8
     468:	354d4954 	strbcc	r4, [sp, #-2388]	; 0xfffff6ac
     46c:	5152495f 	cmppl	r2, pc, asr r9
     470:	7355006e 	cmpvc	r5, #110	; 0x6e
     474:	46656761 	strbtmi	r6, [r5], -r1, ror #14
     478:	746c7561 	strbtvc	r7, [ip], #-1377	; 0xfffffa9f
     47c:	5152495f 	cmppl	r2, pc, asr r9
     480:	4353006e 	cmpmi	r3, #110	; 0x6e
     484:	79545f42 	ldmdbvc	r4, {r1, r6, r8, r9, sl, fp, ip, lr}^
     488:	47006570 	smlsdxmi	r0, r0, r5, r6
     48c:	504f4950 	subpl	r4, pc, r0, asr r9	; <UNPREDICTABLE>
     490:	5f645075 	svcpl	0x00645075
     494:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0xfffff6ac
     498:	00666544 	rsbeq	r6, r6, r4, asr #10
     49c:	52534644 	subspl	r4, r3, #68, 12	; 0x4400000
     4a0:	42484100 	submi	r4, r8, #0, 2
     4a4:	54535231 	ldrbpl	r5, [r3], #-561	; 0xfffffdcf
     4a8:	43520052 	cmpmi	r2, #82	; 0x52
     4ac:	50415f43 	subpl	r5, r1, r3, asr #30
     4b0:	65503242 	ldrbvs	r3, [r0, #-578]	; 0xfffffdbe
     4b4:	68706972 	ldmdavs	r0!, {r1, r4, r5, r6, r8, fp, sp, lr}^
     4b8:	65736552 	ldrbvs	r6, [r3, #-1362]!	; 0xfffffaae
     4bc:	646d4374 	strbtvs	r4, [sp], #-884	; 0xfffffc8c
     4c0:	74657200 	strbtvc	r7, [r5], #-512	; 0xfffffe00
     4c4:	436e7275 	cmnmi	lr, #1342177287	; 0x50000007
     4c8:	0065646f 	rsbeq	r6, r5, pc, ror #8
     4cc:	5f434352 	svcpl	0x00434352
     4d0:	33424841 	movtcc	r4, #10305	; 0x2841
     4d4:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
     4d8:	6c436870 	mcrrvs	8, 7, r6, r3, cr0
     4dc:	4c6b636f 	stclmi	3, cr6, [fp], #-444	; 0xfffffe44
     4e0:	646f4d50 	strbtvs	r4, [pc], #-3408	; 4e8 <startup-0x1ffffb18>
     4e4:	646d4365 	strbtvs	r4, [sp], #-869	; 0xfffffc9b
     4e8:	755f5f00 	ldrbvc	r5, [pc, #-3840]	; fffff5f0 <GPIO_Ports+0xdfffce6c>
     4ec:	31746e69 	cmncc	r4, r9, ror #28
     4f0:	00745f36 	rsbseq	r5, r4, r6, lsr pc
     4f4:	32424841 	subcc	r4, r2, #4259840	; 0x410000
     4f8:	00524e45 	subseq	r4, r2, r5, asr #28
     4fc:	4b4c4350 	blmi	1311244 <startup-0x1eceedbc>
     500:	72465f32 	subvc	r5, r6, #50, 30	; 0xc8
     504:	65757165 	ldrbvs	r7, [r5, #-357]!	; 0xfffffe9b
     508:	0079636e 	rsbseq	r6, r9, lr, ror #6
     50c:	4f495047 	svcmi	0x00495047
     510:	776f4c5f 			; <UNDEFINED> instruction: 0x776f4c5f
     514:	6570535f 	ldrbvs	r5, [r0, #-863]!	; 0xfffffca1
     518:	43006465 	movwmi	r6, #1125	; 0x465
     51c:	5f314e41 	svcpl	0x00314e41
     520:	5f305852 	svcpl	0x00305852
     524:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     528:	5c3a4300 	ldcpl	3, cr4, [sl], #-0
     52c:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
     530:	64415c73 	strbvs	r5, [r1], #-3187	; 0xfffff38d
     534:	5c746d61 	ldclpl	13, cr6, [r4], #-388	; 0xfffffe7c
     538:	44656e4f 	strbtmi	r6, [r5], #-3663	; 0xfffff1b1
     53c:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
     540:	6b6f445c 	blvs	1bd16b8 <startup-0x1e42e948>
     544:	6e656d75 	mcrvs	13, 3, r6, cr5, cr5, {3}
     548:	69475c74 	stmdbvs	r7, {r2, r4, r5, r6, sl, fp, ip, lr}^
     54c:	62754874 	rsbsvs	r4, r5, #116, 16	; 0x740000
     550:	5441445c 	strbpl	r4, [r1], #-1116	; 0xfffffba4
     554:	2d303932 			; <UNDEFINED> instruction: 0x2d303932
     558:	6d72614c 	ldfvse	f6, [r2, #-304]!	; 0xfffffed0
     55c:	74737973 	ldrbtvc	r7, [r3], #-2419	; 0xfffff68d
     560:	6b5c6d65 	blvs	171bafc <startup-0x1e8e4504>
     564:	445c646f 	ldrbmi	r6, [ip], #-1135	; 0xfffffb91
     568:	00726f6f 	rsbseq	r6, r2, pc, ror #30
     56c:	52534648 	subspl	r4, r3, #72, 12	; 0x4800000
     570:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
     574:	65725f4f 	ldrbvs	r5, [r2, #-3919]!	; 0xfffff0b1
     578:	52006461 	andpl	r6, r0, #1627389952	; 0x61000000
     57c:	535f4343 	cmppl	pc, #201326593	; 0xc000001
     580:	4c435359 	mcrrmi	3, 5, r5, r3, cr9
     584:	4350004b 	cmpmi	r0, #75	; 0x4b
     588:	5f314b4c 	svcpl	0x00314b4c
     58c:	71657246 	cmnvc	r5, r6, asr #4
     590:	636e6575 	cmnvs	lr, #490733568	; 0x1d400000
     594:	4c500079 	mrrcmi	0, 7, r0, r0, cr9	; <UNPREDICTABLE>
     598:	50004d4c 	andpl	r4, r0, ip, asr #26
     59c:	004e4c4c 	subeq	r4, lr, ip, asr #24
     5a0:	504c4c50 	subpl	r4, ip, r0, asr ip
     5a4:	4c4c5000 	marmi	acc0, r5, ip
     5a8:	43520051 	cmpmi	r2, #81	; 0x51
     5ac:	534c5f43 	movtpl	r5, #53059	; 0xcf43
     5b0:	646d4349 	strbtvs	r4, [sp], #-841	; 0xfffffcb7
     5b4:	6c6c7000 	stclvs	0, cr7, [ip], #-0
     5b8:	72756f73 	rsbsvc	r6, r5, #460	; 0x1cc
     5bc:	54006563 	strpl	r6, [r0], #-1379	; 0xfffffa9d
     5c0:	5f344d49 	svcpl	0x00344d49
     5c4:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     5c8:	554e4700 	strbpl	r4, [lr, #-1792]	; 0xfffff900
     5cc:	39394320 	ldmdbcc	r9!, {r5, r8, r9, lr}
     5d0:	322e3720 	eorcc	r3, lr, #32, 14	; 0x800000
     5d4:	3220312e 	eorcc	r3, r0, #-2147483637	; 0x8000000b
     5d8:	30373130 	eorscc	r3, r7, r0, lsr r1
     5dc:	20343039 	eorscs	r3, r4, r9, lsr r0
     5e0:	6c657228 	sfmvs	f7, 2, [r5], #-160	; 0xffffff60
     5e4:	65736165 	ldrbvs	r6, [r3, #-357]!	; 0xfffffe9b
     5e8:	415b2029 	cmpmi	fp, r9, lsr #32
     5ec:	652f4d52 	strvs	r4, [pc, #-3410]!	; fffff8a2 <GPIO_Ports+0xdfffd11e>
     5f0:	6465626d 	strbtvs	r6, [r5], #-621	; 0xfffffd93
     5f4:	2d646564 	cfstr64cs	mvdx6, [r4, #-400]!	; 0xfffffe70
     5f8:	72622d37 	rsbvc	r2, r2, #3520	; 0xdc0
     5fc:	68636e61 	stmdavs	r3!, {r0, r5, r6, r9, sl, fp, sp, lr}^
     600:	76657220 	strbtvc	r7, [r5], -r0, lsr #4
     604:	6f697369 	svcvs	0x00697369
     608:	3532206e 	ldrcc	r2, [r2, #-110]!	; 0xffffff92
     60c:	34303235 	ldrtcc	r3, [r0], #-565	; 0xfffffdcb
     610:	6d2d205d 	stcvs	0, cr2, [sp, #-372]!	; 0xfffffe8c
     614:	6d756874 	ldclvs	8, cr6, [r5, #-464]!	; 0xfffffe30
     618:	6d2d2062 	stcvs	0, cr2, [sp, #-392]!	; 0xfffffe78
     61c:	68637261 	stmdavs	r3!, {r0, r5, r6, r9, ip, sp, lr}^
     620:	6d72613d 	ldfvse	f6, [r2, #-244]!	; 0xffffff0c
     624:	6d2d3676 	stcvs	6, cr3, [sp, #-472]!	; 0xfffffe28
     628:	666d2d20 	strbtvs	r2, [sp], -r0, lsr #26
     62c:	74616f6c 	strbtvc	r6, [r1], #-3948	; 0xfffff094
     630:	6962612d 	stmdbvs	r2!, {r0, r2, r3, r5, r8, sp, lr}^
     634:	666f733d 			; <UNDEFINED> instruction: 0x666f733d
     638:	6d2d2074 	stcvs	0, cr2, [sp, #-464]!	; 0xfffffe30
     63c:	6d756874 	ldclvs	8, cr6, [r5, #-464]!	; 0xfffffe30
     640:	6d2d2062 	stcvs	0, cr2, [sp, #-392]!	; 0xfffffe78
     644:	68637261 	stmdavs	r3!, {r0, r5, r6, r9, ip, sp, lr}^
     648:	6d72613d 	ldfvse	f6, [r2, #-244]!	; 0xffffff0c
     64c:	6d2d3676 	stcvs	6, cr3, [sp, #-472]!	; 0xfffffe28
     650:	20672d20 	rsbcs	r2, r7, r0, lsr #26
     654:	20304f2d 	eorscs	r4, r0, sp, lsr #30
     658:	6474732d 	ldrbtvs	r7, [r4], #-813	; 0xfffffcd3
     65c:	3939633d 	ldmdbcc	r9!, {r0, r2, r3, r4, r5, r8, r9, sp, lr}
     660:	6f6d6100 	svcvs	0x006d6100
     664:	4f746e75 	svcmi	0x00746e75
     668:	74634166 	strbtvc	r4, [r3], #-358	; 0xfffffe9a
     66c:	44657669 	strbtmi	r7, [r5], #-1641	; 0xfffff997
     670:	73726f6f 	cmnvc	r2, #444	; 0x1bc
     674:	43435200 	movtmi	r5, #12800	; 0x3200
     678:	4c43485f 	mcrrmi	8, 5, r4, r3, cr15
     67c:	6e6f434b 	cdpvs	3, 6, cr4, cr15, cr11, {2}
     680:	00676966 	rsbeq	r6, r7, r6, ror #18
     684:	5f434352 	svcpl	0x00434352
     688:	61656c43 	cmnvs	r5, r3, asr #24
     68c:	616c4672 	smcvs	50274	; 0xc462
     690:	43520067 	cmpmi	r2, #103	; 0x67
     694:	53485f43 	movtpl	r5, #36675	; 0x8f43
     698:	6e6f4345 	cdpvs	3, 6, cr4, cr15, cr5, {2}
     69c:	00676966 	rsbeq	r6, r7, r6, ror #18
     6a0:	52434442 	subpl	r4, r3, #1107296256	; 0x42000000
     6a4:	43485300 	movtmi	r5, #33536	; 0x8300
     6a8:	50005253 	andpl	r5, r0, r3, asr r2
     6ac:	495f4456 	ldmdbmi	pc, {r1, r2, r4, r6, sl, lr}^	; <UNPREDICTABLE>
     6b0:	006e5152 	rsbeq	r5, lr, r2, asr r1
     6b4:	5f434352 	svcpl	0x00434352
     6b8:	0045534c 	subeq	r5, r5, ip, asr #6
     6bc:	52495453 	subpl	r5, r9, #1392508928	; 0x53000000
     6c0:	43324900 	teqmi	r2, #0, 18
     6c4:	56455f31 			; <UNDEFINED> instruction: 0x56455f31
     6c8:	5152495f 	cmppl	r2, pc, asr r9
     6cc:	4352006e 	cmpmi	r2, #110	; 0x6e
     6d0:	41535f43 	cmpmi	r3, r3, asr #30
     6d4:	6f6c4249 	svcvs	0x006c4249
     6d8:	43416b63 	movtmi	r6, #7011	; 0x1b63
     6dc:	6f434b4c 	svcvs	0x00434b4c
     6e0:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
     6e4:	61747300 	cmnvs	r4, r0, lsl #6
     6e8:	70757472 	rsbsvc	r7, r5, r2, ror r4
     6ec:	6e756f63 	cdpvs	15, 7, cr6, cr5, cr3, {3}
     6f0:	00726574 	rsbseq	r6, r2, r4, ror r5
     6f4:	5f434352 	svcpl	0x00434352
     6f8:	534c4c50 	movtpl	r4, #52304	; 0xcc50
     6fc:	6f434941 	svcvs	0x00434941
     700:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
     704:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
     708:	69505f4f 	ldmdbvs	r0, {r0, r1, r2, r3, r6, r8, r9, sl, fp, ip, lr}^
     70c:	4700736e 	strmi	r7, [r0, -lr, ror #6]
     710:	5f4f4950 	svcpl	0x004f4950
     714:	65646f4d 	strbvs	r6, [r4, #-3917]!	; 0xfffff0b3
     718:	54554f5f 	ldrbpl	r4, [r5], #-3935	; 0xfffff0a1
     71c:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
     720:	43435f31 	movtmi	r5, #16177	; 0x3f31
     724:	5152495f 	cmppl	r2, pc, asr r9
     728:	4148006e 	cmpmi	r8, lr, rrx
     72c:	525f4853 	subspl	r4, pc, #5439488	; 0x530000
     730:	495f474e 	ldmdbmi	pc, {r1, r2, r3, r6, r8, r9, sl, lr}^	; <UNPREDICTABLE>
     734:	006e5152 	rsbeq	r5, lr, r2, asr r1
     738:	49545845 	ldmdbmi	r4, {r0, r2, r6, fp, ip, lr}^
     73c:	52495f31 	subpl	r5, r9, #49, 30	; 0xc4
     740:	43006e51 	movwmi	r6, #3665	; 0xe51
     744:	5f314e41 	svcpl	0x00314e41
     748:	495f5854 	ldmdbmi	pc, {r2, r4, r6, fp, ip, lr}^	; <UNPREDICTABLE>
     74c:	006e5152 	rsbeq	r5, lr, r2, asr r1
     750:	31414d44 	cmpcc	r1, r4, asr #26
     754:	7274535f 	rsbsvc	r5, r4, #2080374785	; 0x7c000001
     758:	356d6165 	strbcc	r6, [sp, #-357]!	; 0xfffffe9b
     75c:	5152495f 	cmppl	r2, pc, asr r9
     760:	4352006e 	cmpmi	r2, #110	; 0x6e
     764:	53485f43 	movtpl	r5, #36675	; 0x8f43
     768:	43520045 	cmpmi	r2, #69	; 0x45
     76c:	434d5f43 	movtmi	r5, #57155	; 0xdf43
     770:	6f43314f 	svcvs	0x0043314f
     774:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
     778:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
     77c:	52545f38 	subspl	r5, r4, #56, 30	; 0xe0
     780:	4f435f47 	svcmi	0x00435f47
     784:	49545f4d 	ldmdbmi	r4, {r0, r2, r3, r6, r8, r9, sl, fp, ip, lr}^
     788:	5f34314d 	svcpl	0x0034314d
     78c:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     790:	414d4400 	cmpmi	sp, r0, lsl #8
     794:	74535f32 	ldrbvc	r5, [r3], #-3890	; 0xfffff0ce
     798:	6d616572 	cfstr64vs	mvdx6, [r1, #-456]!	; 0xfffffe38
     79c:	52495f37 	subpl	r5, r9, #55, 30	; 0xdc
     7a0:	4f006e51 	svcmi	0x00006e51
     7a4:	465f4754 			; <UNDEFINED> instruction: 0x465f4754
     7a8:	52495f53 	subpl	r5, r9, #332	; 0x14c
     7ac:	4e006e51 	mcrmi	14, 0, r6, cr0, cr1, {2}
     7b0:	614d6e6f 	cmpvs	sp, pc, ror #28
     7b4:	62616b73 	rsbvs	r6, r1, #117760	; 0x1cc00
     7b8:	6e49656c 	cdpvs	5, 4, cr6, cr9, cr12, {3}
     7bc:	52495f74 	subpl	r5, r9, #116, 30	; 0x1d0
     7c0:	57006e51 	smlsdpl	r0, r1, lr, r6
     7c4:	5f474457 	svcpl	0x00474457
     7c8:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     7cc:	47544f00 	ldrbmi	r4, [r4, -r0, lsl #30]
     7d0:	5f53485f 	svcpl	0x0053485f
     7d4:	50554b57 	subspl	r4, r5, r7, asr fp
     7d8:	5152495f 	cmppl	r2, pc, asr r9
     7dc:	4352006e 	cmpmi	r2, #110	; 0x6e
     7e0:	50415f43 	subpl	r5, r1, r3, asr #30
     7e4:	65503242 	ldrbvs	r3, [r0, #-578]	; 0xfffffdbe
     7e8:	68706972 	ldmdavs	r0!, {r1, r4, r5, r6, r8, fp, sp, lr}^
     7ec:	636f6c43 	cmnvs	pc, #17152	; 0x4300
     7f0:	646d436b 	strbtvs	r4, [sp], #-875	; 0xfffffc95
     7f4:	43435200 	movtmi	r5, #12800	; 0x3200
     7f8:	4c4c505f 	mcrrmi	0, 5, r5, ip, cr15
     7fc:	44494153 	strbmi	r4, [r9], #-339	; 0xfffffead
     800:	00517669 	subseq	r7, r1, r9, ror #12
     804:	5f434352 	svcpl	0x00434352
     808:	534c4c50 	movtpl	r4, #52304	; 0xcc50
     80c:	69444941 	stmdbvs	r4, {r0, r6, r8, fp, lr}^
     810:	52005276 	andpl	r5, r0, #1610612743	; 0x60000007
     814:	535f4343 	cmppl	pc, #201326593	; 0xc000001
     818:	6c424941 	mcrrvs	9, 4, r4, r2, cr1	; <UNPREDICTABLE>
     81c:	426b636f 	rsbmi	r6, fp, #-1140850687	; 0xbc000001
     820:	534b4c43 	movtpl	r4, #48195	; 0xbc43
     824:	6372756f 	cmnvs	r2, #465567744	; 0x1bc00000
     828:	654d0065 	strbvs	r0, [sp, #-101]	; 0xffffff9b
     82c:	79726f6d 	ldmdbvc	r2!, {r0, r2, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
     830:	616e614d 	cmnvs	lr, sp, asr #2
     834:	656d6567 	strbvs	r6, [sp, #-1383]!	; 0xfffffa99
     838:	495f746e 	ldmdbmi	pc, {r1, r2, r3, r5, r6, sl, ip, sp, lr}^	; <UNPREDICTABLE>
     83c:	006e5152 	rsbeq	r5, lr, r2, asr r1
     840:	74737953 	ldrbtvc	r7, [r3], #-2387	; 0xfffff6ad
     844:	6f436d65 	svcvs	0x00436d65
     848:	6c436572 	cfstr64vs	mvdx6, [r3], {114}	; 0x72
     84c:	006b636f 	rsbeq	r6, fp, pc, ror #6
     850:	504d4154 	subpl	r4, sp, r4, asr r1
     854:	4154535f 	cmpmi	r4, pc, asr r3
     858:	495f504d 	ldmdbmi	pc, {r0, r2, r3, r6, ip, lr}^	; <UNPREDICTABLE>
     85c:	006e5152 	rsbeq	r5, lr, r2, asr r1
     860:	314e4143 	cmpcc	lr, r3, asr #2
     864:	4543535f 	strbmi	r5, [r3, #-863]	; 0xfffffca1
     868:	5152495f 	cmppl	r2, pc, asr r9
     86c:	645f006e 	ldrbvs	r0, [pc], #-110	; 874 <startup-0x1ffff78c>
     870:	00726f6f 	rsbseq	r6, r2, pc, ror #30
     874:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     878:	7079545f 	rsbsvc	r5, r9, pc, asr r4
     87c:	50470065 	subpl	r0, r7, r5, rrx
     880:	4d5f4f49 	ldclmi	15, cr4, [pc, #-292]	; 764 <startup-0x1ffff89c>
     884:	5f65646f 	svcpl	0x0065646f
     888:	44004e49 	strmi	r4, [r0], #-3657	; 0xfffff1b7
     88c:	5f32414d 	svcpl	0x0032414d
     890:	65727453 	ldrbvs	r7, [r2, #-1107]!	; 0xfffffbad
     894:	5f306d61 	svcpl	0x00306d61
     898:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     89c:	43435200 	movtmi	r5, #12800	; 0x3200
     8a0:	4f434d5f 	svcmi	0x00434d5f
     8a4:	6e6f4332 	mcrvs	3, 3, r4, cr15, cr2, {1}
     8a8:	00676966 	rsbeq	r6, r7, r6, ror #18
     8ac:	524b434c 	subpl	r4, fp, #76, 6	; 0x30000001
     8b0:	43435200 	movtmi	r5, #12800	; 0x3200
     8b4:	5332495f 	teqpl	r2, #1556480	; 0x17c000
     8b8:	534b4c43 	movtpl	r4, #48195	; 0xbc43
     8bc:	6372756f 	cmnvs	r2, #465567744	; 0x1bc00000
     8c0:	52450065 	subpl	r0, r5, #101	; 0x65
     8c4:	00524f52 	subseq	r4, r2, r2, asr pc
     8c8:	32433249 	subcc	r3, r3, #-1879048188	; 0x90000004
     8cc:	5f52455f 	svcpl	0x0052455f
     8d0:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     8d4:	54736d00 	ldrbtpl	r6, [r3], #-3328	; 0xfffff300
     8d8:	736b6369 	cmnvc	fp, #-1543503871	; 0xa4000001
     8dc:	43435200 	movtmi	r5, #12800	; 0x3200
     8e0:	4c43505f 	mcrrmi	0, 5, r5, r3, cr15
     8e4:	6f43314b 	svcvs	0x0043314b
     8e8:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
     8ec:	50534f00 	subspl	r4, r3, r0, lsl #30
     8f0:	52444545 	subpl	r4, r4, #289406976	; 0x11400000
     8f4:	73754200 	cmnvc	r5, #0, 4
     8f8:	6c756146 	ldfvse	f6, [r5], #-280	; 0xfffffee8
     8fc:	52495f74 	subpl	r5, r9, #116, 30	; 0x1d0
     900:	74006e51 	strvc	r6, [r0], #-3665	; 0xfffff1af
     904:	736b6369 	cmnvc	fp, #-1543503871	; 0xa4000001
     908:	4c4c5000 	marmi	acc0, r5, ip
     90c:	52474643 	subpl	r4, r7, #70254592	; 0x4300000
     910:	52415500 	subpl	r5, r1, #0, 10
     914:	495f3554 	ldmdbmi	pc, {r2, r4, r6, r8, sl, ip, sp}^	; <UNPREDICTABLE>
     918:	006e5152 	rsbeq	r5, lr, r2, asr r1
     91c:	314d4954 	cmpcc	sp, r4, asr r9
     920:	4b52425f 	blmi	14912a4 <startup-0x1eb6ed5c>
     924:	4d49545f 	cfstrdmi	mvd5, [r9, #-380]	; 0xfffffe84
     928:	52495f39 	subpl	r5, r9, #57, 30	; 0xe4
     92c:	47006e51 	smlsdmi	r0, r1, lr, r6
     930:	5f4f4950 	svcpl	0x004f4950
     934:	7079544f 	rsbsvc	r5, r9, pc, asr #8
     938:	5f5f0065 	svcpl	0x005f0065
     93c:	746e6975 	strbtvc	r6, [lr], #-2421	; 0xfffff68b
     940:	745f3233 	ldrbvc	r3, [pc], #-563	; 948 <startup-0x1ffff6b8>
     944:	42504100 	subsmi	r4, r0, #0, 2
     948:	50424841 	subpl	r4, r2, r1, asr #16
     94c:	63736572 	cmnvs	r3, #478150656	; 0x1c800000
     950:	6c626154 	stfvse	f6, [r2], #-336	; 0xfffffeb0
     954:	50470065 	subpl	r0, r7, r5, rrx
     958:	4d5f4f49 	ldclmi	15, cr4, [pc, #-292]	; 83c <startup-0x1ffff7c4>
     95c:	75696465 	strbvc	r6, [r9, #-1125]!	; 0xfffffb9b
     960:	70535f6d 	subsvc	r5, r3, sp, ror #30
     964:	00646565 	rsbeq	r6, r4, r5, ror #10
     968:	5f434352 	svcpl	0x00434352
     96c:	50494153 	subpl	r4, r9, r3, asr r1
     970:	32494c4c 	subcc	r4, r9, #76, 24	; 0x4c00
     974:	6b6c4353 	blvs	1b116c8 <startup-0x1e4ee938>
     978:	43766944 	cmnmi	r6, #68, 18	; 0x110000
     97c:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
     980:	49540067 	ldmdbmi	r4, {r0, r1, r2, r5, r6}^
     984:	495f374d 	ldmdbmi	pc, {r0, r2, r3, r6, r8, r9, sl, ip, sp}^	; <UNPREDICTABLE>
     988:	006e5152 	rsbeq	r5, lr, r2, asr r1
     98c:	676e6f6c 	strbvs	r6, [lr, -ip, ror #30]!
     990:	6e6f6c20 	cdpvs	12, 6, cr6, cr15, cr0, {1}
     994:	6e692067 	cdpvs	0, 6, cr2, cr9, cr7, {3}
     998:	54450074 	strbpl	r0, [r5], #-116	; 0xffffff8c
     99c:	4b575f48 	blmi	15d86c4 <startup-0x1ea2793c>
     9a0:	495f5055 	ldmdbmi	pc, {r0, r2, r4, r6, ip, lr}^	; <UNPREDICTABLE>
     9a4:	006e5152 	rsbeq	r5, lr, r2, asr r1
     9a8:	5f47544f 	svcpl	0x0047544f
     9ac:	495f5348 	ldmdbmi	pc, {r3, r6, r8, r9, ip, lr}^	; <UNPREDICTABLE>
     9b0:	006e5152 	rsbeq	r5, lr, r2, asr r1
     9b4:	44505550 	ldrbmi	r5, [r0], #-1360	; 0xfffffab0
     9b8:	53530052 	cmppl	r3, #82	; 0x52
     9bc:	00524743 	subseq	r4, r2, r3, asr #14
     9c0:	31495053 	qdaddcc	r5, r3, r9
     9c4:	5152495f 	cmppl	r2, pc, asr r9
     9c8:	4944006e 	stmdbmi	r4, {r1, r2, r3, r5, r6}^
     9cc:	4c424153 	stfmie	f4, [r2], {83}	; 0x53
     9d0:	56530045 	ldrbpl	r0, [r3], -r5, asr #32
     9d4:	6c6c6143 	stfvse	f6, [ip], #-268	; 0xfffffef4
     9d8:	5152495f 	cmppl	r2, pc, asr r9
     9dc:	5041006e 	subpl	r0, r1, lr, rrx
     9e0:	53523242 	cmppl	r2, #536870916	; 0x20000004
     9e4:	42005254 	andmi	r5, r0, #84, 4	; 0x40000005
     9e8:	48525253 	ldmdami	r2, {r0, r1, r4, r6, r9, ip, lr}^
     9ec:	43435200 	movtmi	r5, #12800	; 0x3200
     9f0:	7465475f 	strbtvc	r4, [r5], #-1887	; 0xfffff8a1
     9f4:	67616c46 	strbvs	r6, [r1, -r6, asr #24]!
     9f8:	74617453 	strbtvc	r7, [r1], #-1107	; 0xfffffbad
     9fc:	52007375 	andpl	r7, r0, #-738197503	; 0xd4000001
     a00:	435f4343 	cmpmi	pc, #201326593	; 0xc000001
     a04:	6b636f6c 	blvs	18dc7bc <startup-0x1e723844>
     a08:	53420073 	movtpl	r0, #8307	; 0x2073
     a0c:	004c5252 	subeq	r5, ip, r2, asr r2
     a10:	4f495047 	svcmi	0x00495047
     a14:	6769485f 			; <UNDEFINED> instruction: 0x6769485f
     a18:	70535f68 	subsvc	r5, r3, r8, ror #30
     a1c:	00646565 	rsbeq	r6, r4, r5, ror #10
     a20:	5f434352 	svcpl	0x00434352
     a24:	6f435449 	svcvs	0x00435449
     a28:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
     a2c:	43435200 	movtmi	r5, #12800	; 0x3200
     a30:	4953485f 	ldmdbmi	r3, {r0, r1, r2, r3, r4, r6, fp, lr}^
     a34:	00646d43 	rsbeq	r6, r4, r3, asr #26
     a38:	5f555046 	svcpl	0x00555046
     a3c:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     a40:	43435200 	movtmi	r5, #12800	; 0x3200
     a44:	6a64415f 	bvs	1910fc8 <startup-0x1e6ef038>
     a48:	48747375 	ldmdami	r4!, {r0, r2, r4, r5, r6, r8, r9, ip, sp, lr}^
     a4c:	61434953 	cmpvs	r3, r3, asr r9
     a50:	7262696c 	rsbvc	r6, r2, #108, 18	; 0x1b0000
     a54:	6f697461 	svcvs	0x00697461
     a58:	6c61566e 	stclvs	6, cr5, [r1], #-440	; 0xfffffe48
     a5c:	55006575 	strpl	r6, [r0, #-1397]	; 0xfffffa8b
     a60:	34545241 	ldrbcc	r5, [r4], #-577	; 0xfffffdbf
     a64:	5152495f 	cmppl	r2, pc, asr r9
     a68:	5041006e 	subpl	r0, r1, lr, rrx
     a6c:	504c3242 	subpl	r3, ip, r2, asr #4
     a70:	00524e45 	subseq	r4, r2, r5, asr #28
     a74:	5f434352 	svcpl	0x00434352
     a78:	31425041 	cmpcc	r2, r1, asr #32
     a7c:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
     a80:	52006870 	andpl	r6, r0, #112, 16	; 0x700000
     a84:	525f4343 	subspl	r4, pc, #201326593	; 0xc000001
     a88:	4c434354 	mcrrmi	3, 5, r4, r3, cr4
     a8c:	6e6f434b 	cdpvs	3, 6, cr4, cr15, cr11, {2}
     a90:	00676966 	rsbeq	r6, r7, r6, ror #18
     a94:	5f47544f 	svcpl	0x0047544f
     a98:	575f5346 	ldrbpl	r5, [pc, -r6, asr #6]
     a9c:	5f50554b 	svcpl	0x0050554b
     aa0:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     aa4:	43435200 	movtmi	r5, #12800	; 0x3200
     aa8:	414c465f 	cmpmi	ip, pc, asr r6
     aac:	43520047 	cmpmi	r2, #71	; 0x47
     ab0:	65475f43 	strbvs	r5, [r7, #-3907]	; 0xfffff0bd
     ab4:	53544974 	cmppl	r4, #116, 18	; 0x1d0000
     ab8:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0xfffffe8c
     abc:	58450073 	stmdapl	r5, {r0, r1, r4, r5, r6}^
     ac0:	5f344954 	svcpl	0x00344954
     ac4:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     ac8:	52544300 	subspl	r4, r4, #0, 6
     acc:	4954004c 	ldmdbmi	r4, {r2, r3, r6}^
     ad0:	445f364d 	ldrbmi	r3, [pc], #-1613	; ad8 <startup-0x1ffff528>
     ad4:	495f4341 	ldmdbmi	pc, {r0, r6, r8, r9, lr}^	; <UNPREDICTABLE>
     ad8:	006e5152 	rsbeq	r5, lr, r2, asr r1
     adc:	5377654e 	cmnpl	r7, #327155712	; 0x13800000
     ae0:	65746174 	ldrbvs	r6, [r4, #-372]!	; 0xfffffe8c
     ae4:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
     ae8:	70535f4f 	subsvc	r5, r3, pc, asr #30
     aec:	00646565 	rsbeq	r6, r4, r5, ror #10
     af0:	32433249 	subcc	r3, r3, #-1879048188	; 0x90000004
     af4:	5f56455f 	svcpl	0x0056455f
     af8:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     afc:	43435200 	movtmi	r5, #12800	; 0x3200
     b00:	656c435f 	strbvs	r4, [ip, #-863]!	; 0xfffffca1
     b04:	54497261 	strbpl	r7, [r9], #-609	; 0xfffffd9f
     b08:	646e6550 	strbtvs	r6, [lr], #-1360	; 0xfffffab0
     b0c:	42676e69 	rsbmi	r6, r7, #1680	; 0x690
     b10:	52007469 	andpl	r7, r0, #1761607680	; 0x69000000
     b14:	435f4343 	cmpmi	pc, #201326593	; 0xc000001
     b18:	6b636f6c 	blvs	18dc8d0 <startup-0x1e723730>
     b1c:	75636553 	strbvc	r6, [r3, #-1363]!	; 0xfffffaad
     b20:	79746972 	ldmdbvc	r4!, {r1, r4, r5, r6, r8, fp, sp, lr}^
     b24:	74737953 	ldrbtvc	r7, [r3], #-2387	; 0xfffff6ad
     b28:	6d436d65 	stclvs	13, cr6, [r3, #-404]	; 0xfffffe6c
     b2c:	43520064 	cmpmi	r2, #100	; 0x64
     b30:	49545f43 	ldmdbmi	r4, {r0, r1, r6, r8, r9, sl, fp, ip, lr}^
     b34:	4b4c434d 	blmi	1311870 <startup-0x1ecee790>
     b38:	73657250 	cmnvc	r5, #80, 4
     b3c:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
     b40:	52006769 	andpl	r6, r0, #27525120	; 0x1a40000
     b44:	535f4343 	cmppl	pc, #201326593	; 0xc000001
     b48:	6c424941 	mcrrvs	9, 4, r4, r2, cr1	; <UNPREDICTABLE>
     b4c:	416b636f 	cmnmi	fp, pc, ror #6
     b50:	534b4c43 	movtpl	r4, #48195	; 0xbc43
     b54:	6372756f 	cmnvs	r2, #465567744	; 0x1bc00000
     b58:	79730065 	ldmdbvc	r3!, {r0, r2, r5, r6}^
     b5c:	63697473 	cmnvs	r9, #1929379840	; 0x73000000
     b60:	6e495f6b 	cdpvs	15, 4, cr5, cr9, cr11, {3}
     b64:	73007469 	movwvc	r7, #1129	; 0x469
     b68:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0xfffffe8c
     b6c:	67657273 			; <UNDEFINED> instruction: 0x67657273
     b70:	43435200 	movtmi	r5, #12800	; 0x3200
     b74:	4250415f 	subsmi	r4, r0, #-1073741801	; 0xc0000017
     b78:	72655032 	rsbvc	r5, r5, #50	; 0x32
     b7c:	00687069 	rsbeq	r7, r8, r9, rrx
     b80:	52414642 	subpl	r4, r1, #69206016	; 0x4200000
     b84:	42504100 	subsmi	r4, r0, #0, 2
     b88:	45504c31 	ldrbmi	r4, [r0, #-3121]	; 0xfffff3cf
     b8c:	4400524e 	strmi	r5, [r0], #-590	; 0xfffffdb2
     b90:	5f31414d 	svcpl	0x0031414d
     b94:	65727453 	ldrbvs	r7, [r2, #-1107]!	; 0xfffffbad
     b98:	5f316d61 	svcpl	0x00316d61
     b9c:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     ba0:	74636100 	strbtvc	r6, [r3], #-256	; 0xffffff00
     ba4:	5f657669 	svcpl	0x00657669
     ba8:	726f6f64 	rsbvc	r6, pc, #100, 30	; 0x190
     bac:	4d440073 	stclmi	0, cr0, [r4, #-460]	; 0xfffffe34
     bb0:	535f3241 	cmppl	pc, #268435460	; 0x10000004
     bb4:	61657274 	smcvs	22308	; 0x5724
     bb8:	495f336d 	ldmdbmi	pc, {r0, r2, r3, r5, r6, r8, r9, ip, sp}^	; <UNPREDICTABLE>
     bbc:	006e5152 	rsbeq	r5, lr, r2, asr r1
     bc0:	41474b43 	cmpmi	r7, r3, asr #22
     bc4:	524e4554 	subpl	r4, lr, #84, 10	; 0x15000000
     bc8:	4e414300 	cdpmi	3, 4, cr4, cr1, cr0, {0}
     bcc:	58545f32 	ldmdapl	r4, {r1, r4, r5, r8, r9, sl, fp, ip, lr}^
     bd0:	5152495f 	cmppl	r2, pc, asr r9
     bd4:	4c50006e 	mrrcmi	0, 6, r0, r0, cr14	; <UNPREDICTABLE>
     bd8:	4941534c 	stmdbmi	r1, {r2, r3, r6, r8, r9, ip, lr}^
     bdc:	4c50004e 	mrrcmi	0, 4, r0, r0, cr14	; <UNPREDICTABLE>
     be0:	4941534c 	stmdbmi	r1, {r2, r3, r6, r8, r9, ip, lr}^
     be4:	4c500051 	mrrcmi	0, 5, r0, r0, cr1	; <UNPREDICTABLE>
     be8:	4941534c 	stmdbmi	r1, {r2, r3, r6, r8, r9, ip, lr}^
     bec:	43520052 	cmpmi	r2, #82	; 0x52
     bf0:	434d5f43 	movtmi	r5, #57155	; 0xdf43
     bf4:	6f53314f 	svcvs	0x0053314f
     bf8:	65637275 	strbvs	r7, [r3, #-629]!	; 0xfffffd8b
     bfc:	43435200 	movtmi	r5, #12800	; 0x3200
     c00:	4248415f 	submi	r4, r8, #-1073741801	; 0xc0000017
     c04:	72655033 	rsbvc	r5, r5, #51	; 0x33
     c08:	43687069 	cmnmi	r8, #105	; 0x69
     c0c:	6b636f6c 	blvs	18dc9c4 <startup-0x1e72363c>
     c10:	00646d43 	rsbeq	r6, r4, r3, asr #26
     c14:	54737953 	ldrbtpl	r7, [r3], #-2387	; 0xfffff6ad
     c18:	5f6b6369 	svcpl	0x006b6369
     c1c:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0xfffff6ac
     c20:	6d697400 	cfstrdvs	mvd7, [r9, #-0]
     c24:	65635f65 	strbvs	r5, [r3, #-3941]!	; 0xfffff09b
     c28:	6172746e 	cmnvs	r2, lr, ror #8
     c2c:	616c5f6c 	cmnvs	ip, ip, ror #30
     c30:	52006d72 	andpl	r6, r0, #7296	; 0x1c80
     c34:	505f4343 	subspl	r4, pc, r3, asr #6
     c38:	6d434c4c 	stclvs	12, cr4, [r3, #-304]	; 0xfffffed0
     c3c:	43520064 	cmpmi	r2, #100	; 0x64
     c40:	61425f43 	cmpvs	r2, r3, asr #30
     c44:	70756b63 	rsbsvc	r6, r5, r3, ror #22
     c48:	65736552 	ldrbvs	r6, [r3, #-1362]!	; 0xfffffaae
     c4c:	646d4374 	strbtvs	r4, [sp], #-884	; 0xfffffc8c
     c50:	42484100 	submi	r4, r8, #0, 2
     c54:	54535233 	ldrbpl	r5, [r3], #-563	; 0xfffffdcd
     c58:	72450052 	subvc	r0, r5, #82	; 0x52
     c5c:	53726f72 	cmnpl	r2, #456	; 0x1c8
     c60:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0xfffffe8c
     c64:	4d440073 	stclmi	0, cr0, [r4, #-460]	; 0xfffffe34
     c68:	535f3141 	cmppl	pc, #1073741840	; 0x40000010
     c6c:	61657274 	smcvs	22308	; 0x5724
     c70:	495f306d 	ldmdbmi	pc, {r0, r2, r3, r5, r6, ip, sp}^	; <UNPREDICTABLE>
     c74:	006e5152 	rsbeq	r5, lr, r2, asr r1
     c78:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
     c7c:	00707574 	rsbseq	r7, r0, r4, ror r5
     c80:	5f434352 	svcpl	0x00434352
     c84:	324f434d 	subcc	r4, pc, #872415233	; 0x34000001
     c88:	72756f53 	rsbsvc	r6, r5, #332	; 0x14c
     c8c:	41006563 	tstmi	r0, r3, ror #10
     c90:	52314250 	eorspl	r4, r1, #80, 4
     c94:	00525453 	subseq	r5, r2, r3, asr r4
     c98:	5f435452 	svcpl	0x00435452
     c9c:	72616c41 	rsbvc	r6, r1, #16640	; 0x4100
     ca0:	52495f6d 	subpl	r5, r9, #436	; 0x1b4
     ca4:	41006e51 	tstmi	r0, r1, asr lr
     ca8:	45314250 	ldrmi	r4, [r1, #-592]!	; 0xfffffdb0
     cac:	4e00524e 	cdpmi	2, 0, cr5, cr0, cr14, {2}
     cb0:	5f434956 	svcpl	0x00434956
     cb4:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0xfffff6ac
     cb8:	6e754600 	cdpvs	6, 7, cr4, cr5, cr0, {0}
     cbc:	6f697463 	svcvs	0x00697463
     cc0:	536c616e 	cmnpl	ip, #-2147483621	; 0x8000001b
     cc4:	65746174 	ldrbvs	r6, [r4, #-372]!	; 0xfffffe8c
     cc8:	43324900 	teqmi	r2, #0, 18
     ccc:	52455f33 	subpl	r5, r5, #51, 30	; 0xcc
     cd0:	5152495f 	cmppl	r2, pc, asr r9
     cd4:	5243006e 	subpl	r0, r3, #110	; 0x6e
     cd8:	495f5059 	ldmdbmi	pc, {r0, r3, r4, r6, ip, lr}^	; <UNPREDICTABLE>
     cdc:	006e5152 	rsbeq	r5, lr, r2, asr r1
     ce0:	49545845 	ldmdbmi	r4, {r0, r2, r6, fp, ip, lr}^
     ce4:	315f3531 	cmpcc	pc, r1, lsr r5	; <UNPREDICTABLE>
     ce8:	52495f30 	subpl	r5, r9, #48, 30	; 0xc0
     cec:	6c006e51 	stcvs	14, cr6, [r0], {81}	; 0x51
     cf0:	20676e6f 	rsbcs	r6, r7, pc, ror #28
     cf4:	676e6f6c 	strbvs	r6, [lr, -ip, ror #30]!
     cf8:	736e7520 	cmnvc	lr, #32, 10	; 0x8000000
     cfc:	656e6769 	strbvs	r6, [lr, #-1897]!	; 0xfffff897
     d00:	6e692064 	cdpvs	0, 6, cr2, cr9, cr4, {3}
     d04:	43520074 	cmpmi	r2, #116	; 0x74
     d08:	434d5f43 	movtmi	r5, #57155	; 0xdf43
     d0c:	6944314f 	stmdbvs	r4, {r0, r1, r2, r3, r6, r8, ip, sp}^
     d10:	49540076 	ldmdbmi	r4, {r1, r2, r4, r5, r6}^
     d14:	495f334d 	ldmdbmi	pc, {r0, r2, r3, r6, r8, r9, ip, sp}^	; <UNPREDICTABLE>
     d18:	006e5152 	rsbeq	r5, lr, r2, asr r1
     d1c:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
     d20:	495f3154 	ldmdbmi	pc, {r2, r4, r6, r8, ip, sp}^	; <UNPREDICTABLE>
     d24:	006e5152 	rsbeq	r5, lr, r2, asr r1
     d28:	5f434352 	svcpl	0x00434352
     d2c:	74696157 	strbtvc	r6, [r9], #-343	; 0xfffffea9
     d30:	48726f46 	ldmdami	r2!, {r1, r2, r6, r8, r9, sl, fp, sp, lr}^
     d34:	74534553 	ldrbvc	r4, [r3], #-1363	; 0xfffffaad
     d38:	55747261 	ldrbpl	r7, [r4, #-609]!	; 0xfffffd9f
     d3c:	55530070 	ldrbpl	r0, [r3, #-112]	; 0xffffff90
     d40:	53454343 	movtpl	r4, #21315	; 0x5343
     d44:	50470053 	subpl	r0, r7, r3, asr r0
     d48:	4d5f4f49 	ldclmi	15, cr4, [pc, #-292]	; c2c <startup-0x1ffff3d4>
     d4c:	0065646f 	rsbeq	r6, r5, pc, ror #8
     d50:	324e4143 	subcc	r4, lr, #-1073741808	; 0xc0000010
     d54:	3158525f 	cmpcc	r8, pc, asr r2
     d58:	5152495f 	cmppl	r2, pc, asr r9
     d5c:	4441006e 	strbmi	r0, [r1], #-110	; 0xffffff92
     d60:	52495f43 	subpl	r5, r9, #268	; 0x10c
     d64:	52006e51 	andpl	r6, r0, #1296	; 0x510
     d68:	4c5f4343 	mrrcmi	3, 4, r4, pc, cr3	; <UNPREDICTABLE>
     d6c:	6f4d4553 	svcvs	0x004d4553
     d70:	6f436564 	svcvs	0x00436564
     d74:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
     d78:	45434900 	strbmi	r4, [r3, #-2304]	; 0xfffff700
     d7c:	48410052 	stmdami	r1, {r1, r4, r6}^
     d80:	504c3342 	subpl	r3, ip, r2, asr #6
     d84:	00524e45 	subseq	r4, r2, r5, asr #28
     d88:	4f495047 	svcmi	0x00495047
     d8c:	65646f4d 	strbvs	r6, [r4, #-3917]!	; 0xfffff0b3
     d90:	7079545f 	rsbsvc	r5, r9, pc, asr r4
     d94:	66654465 	strbtvs	r4, [r5], -r5, ror #8
     d98:	73795300 	cmnvc	r9, #0, 6
     d9c:	6b636954 	blvs	18db2f4 <startup-0x1e724d0c>
     da0:	6e6f435f 	mcrvs	3, 3, r4, cr15, cr15, {2}
     da4:	00676966 	rsbeq	r6, r7, r6, ror #18
     da8:	552f3a43 	strpl	r3, [pc, #-2627]!	; 36d <startup-0x1ffffc93>
     dac:	73726573 	cmnvc	r2, #482344960	; 0x1cc00000
     db0:	6164412f 	cmnvs	r4, pc, lsr #2
     db4:	4f2f746d 	svcmi	0x002f746d
     db8:	7244656e 	subvc	r6, r4, #461373440	; 0x1b800000
     dbc:	2f657669 	svccs	0x00657669
     dc0:	756b6f44 	strbvc	r6, [fp, #-3908]!	; 0xfffff0bc
     dc4:	746e656d 	strbtvc	r6, [lr], #-1389	; 0xfffffa93
     dc8:	7469472f 	strbtvc	r4, [r9], #-1839	; 0xfffff8d1
     dcc:	2f627548 	svccs	0x00627548
     dd0:	32544144 	subscc	r4, r4, #68, 2
     dd4:	4c2d3039 	stcmi	0, cr3, [sp], #-228	; 0xffffff1c
     dd8:	736d7261 	cmnvc	sp, #268435462	; 0x10000006
     ddc:	65747379 	ldrbvs	r7, [r4, #-889]!	; 0xfffffc87
     de0:	6f6b2f6d 	svcvs	0x006b2f6d
     de4:	6f442f64 	svcvs	0x00442f64
     de8:	732f726f 			; <UNDEFINED> instruction: 0x732f726f
     dec:	74726174 	ldrbtvc	r6, [r2], #-372	; 0xfffffe8c
     df0:	632e7075 			; <UNDEFINED> instruction: 0x632e7075
     df4:	53464100 	movtpl	r4, #24832	; 0x6100
     df8:	544f0052 	strbpl	r0, [pc], #-82	; e00 <startup-0x1ffff200>
     dfc:	52455059 	subpl	r5, r5, #89	; 0x59
     e00:	4c414300 	mcrrmi	3, 0, r4, r1, cr0
     e04:	74004249 	strvc	r4, [r0], #-585	; 0xfffffdb7
     e08:	00656d69 	rsbeq	r6, r5, r9, ror #26
     e0c:	72706d74 	rsbsvc	r6, r0, #116, 26	; 0x1d00
     e10:	46006765 	strmi	r6, [r0], -r5, ror #14
     e14:	5f434d53 	svcpl	0x00434d53
     e18:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     e1c:	696e6900 	stmdbvs	lr!, {r8, fp, sp, lr}^
     e20:	58450074 	stmdapl	r5, {r2, r4, r5, r6}^
     e24:	5f304954 	svcpl	0x00304954
     e28:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     e2c:	4b434400 	blmi	10d1e34 <startup-0x1ef2e1cc>
     e30:	52474643 	subpl	r4, r7, #70254592	; 0x4300000
     e34:	46430032 			; <UNDEFINED> instruction: 0x46430032
     e38:	52005253 	andpl	r5, r0, #805306373	; 0x30000005
     e3c:	415f4343 	cmpmi	pc, r3, asr #6
     e40:	50314248 	eorspl	r4, r1, r8, asr #4
     e44:	70697265 	rsbvc	r7, r9, r5, ror #4
     e48:	73680068 	cmnvc	r8, #104	; 0x68
     e4c:	61747365 	cmnvs	r4, r5, ror #6
     e50:	00737574 	rsbseq	r7, r3, r4, ror r5
     e54:	31414d44 	cmpcc	r1, r4, asr #26
     e58:	7274535f 	rsbsvc	r5, r4, #2080374785	; 0x7c000001
     e5c:	346d6165 	strbtcc	r6, [sp], #-357	; 0xfffffe9b
     e60:	5152495f 	cmppl	r2, pc, asr r9
     e64:	5047006e 	subpl	r0, r7, lr, rrx
     e68:	6c5f4f49 	mrrcvs	15, 4, r4, pc, cr9	; <UNPREDICTABLE>
     e6c:	00706d61 	rsbseq	r6, r0, r1, ror #26
     e70:	32414d44 	subcc	r4, r1, #68, 26	; 0x1100
     e74:	7274535f 	rsbsvc	r5, r4, #2080374785	; 0x7c000001
     e78:	366d6165 	strbtcc	r6, [sp], -r5, ror #2
     e7c:	5152495f 	cmppl	r2, pc, asr r9
     e80:	4841006e 	stmdami	r1, {r1, r2, r3, r5, r6}^
     e84:	4e453142 	dvfmism	f3, f5, f2
     e88:	4f4c0052 	svcmi	0x004c0052
     e8c:	47004441 	strmi	r4, [r0, -r1, asr #8]
     e90:	534f4950 	movtpl	r4, #63824	; 0xf950
     e94:	64656570 	strbtvs	r6, [r5], #-1392	; 0xfffffa90
     e98:	7079545f 	rsbsvc	r5, r9, pc, asr r4
     e9c:	66654465 	strbtvs	r4, [r5], -r5, ror #8
     ea0:	62654400 	rsbvs	r4, r5, #0, 8
     ea4:	6f4d6775 	svcvs	0x004d6775
     ea8:	6f74696e 	svcvs	0x0074696e
     eac:	52495f72 	subpl	r5, r9, #456	; 0x1c8
     eb0:	47006e51 	smlsdmi	r0, r1, lr, r6
     eb4:	5f4f4950 	svcpl	0x004f4950
     eb8:	006e6950 	rsbeq	r6, lr, r0, asr r9
     ebc:	5f434352 	svcpl	0x00434352
     ec0:	31424841 	cmpcc	r2, r1, asr #16
     ec4:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
     ec8:	65526870 	ldrbvs	r6, [r2, #-2160]	; 0xfffff790
     ecc:	43746573 	cmnmi	r4, #482344960	; 0x1cc00000
     ed0:	4900646d 	stmdbmi	r0, {r0, r2, r3, r5, r6, sl, sp, lr}
     ed4:	5f334332 	svcpl	0x00334332
     ed8:	495f5645 	ldmdbmi	pc, {r0, r2, r6, r9, sl, ip, lr}^	; <UNPREDICTABLE>
     edc:	006e5152 	rsbeq	r5, lr, r2, asr r1
     ee0:	4f495047 	svcmi	0x00495047
     ee4:	5075505f 	rsbspl	r5, r5, pc, asr r0
     ee8:	48410064 	stmdami	r1, {r2, r5, r6}^
     eec:	53523242 	cmppl	r2, #536870916	; 0x20000004
     ef0:	45005254 	strmi	r5, [r0, #-596]	; 0xfffffdac
     ef4:	495f4854 	ldmdbmi	pc, {r2, r4, r6, fp, lr}^	; <UNPREDICTABLE>
     ef8:	006e5152 	rsbeq	r5, lr, r2, asr r1
     efc:	5f434352 	svcpl	0x00434352
     f00:	636f6c43 	cmnvs	pc, #17152	; 0x4300
     f04:	7954736b 	ldmdbvc	r4, {r0, r1, r3, r5, r6, r8, r9, ip, sp, lr}^
     f08:	65446570 	strbvs	r6, [r4, #-1392]	; 0xfffffa90
     f0c:	4d4d0066 	stclmi	0, cr0, [sp, #-408]	; 0xfffffe68
     f10:	52005246 	andpl	r5, r0, #1610612740	; 0x60000004
     f14:	545f4343 	ldrbpl	r4, [pc], #-835	; f1c <startup-0x1ffff0e4>
     f18:	44657079 	strbtmi	r7, [r5], #-121	; 0xffffff87
     f1c:	4d006665 	stcmi	6, cr6, [r0, #-404]	; 0xfffffe6c
     f20:	5241464d 	subpl	r4, r1, #80740352	; 0x4d00000
     f24:	6f687300 	svcvs	0x00687300
     f28:	69207472 	stmdbvs	r0!, {r1, r4, r5, r6, sl, ip, sp, lr}
     f2c:	7000746e 	andvc	r7, r0, lr, ror #8
     f30:	77737361 	ldrbvc	r7, [r3, -r1, ror #6]!
     f34:	0064726f 	rsbeq	r7, r4, pc, ror #4
     f38:	5f434352 	svcpl	0x00434352
     f3c:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     f40:	43435200 	movtmi	r5, #12800	; 0x3200
     f44:	0054495f 	subseq	r4, r4, pc, asr r9
     f48:	52415349 	subpl	r5, r1, #603979777	; 0x24000001
     f4c:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
     f50:	79745f4f 	ldmdbvc	r4!, {r0, r1, r2, r3, r6, r8, r9, sl, fp, ip, lr}^
     f54:	44006570 	strmi	r6, [r0], #-1392	; 0xfffffa90
     f58:	5f31414d 	svcpl	0x0031414d
     f5c:	65727453 	ldrbvs	r7, [r2, #-1107]!	; 0xfffffbad
     f60:	5f336d61 	svcpl	0x00336d61
     f64:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     f68:	41535500 	cmpmi	r3, r0, lsl #10
     f6c:	5f325452 	svcpl	0x00325452
     f70:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     f74:	74696200 	strbtvc	r6, [r9], #-512	; 0xfffffe00
     f78:	74617473 	strbtvc	r7, [r1], #-1139	; 0xfffffb8d
     f7c:	45007375 	strmi	r7, [r0, #-885]	; 0xfffffc8b
     f80:	4c42414e 	stfmie	f4, [r2], {78}	; 0x4e
     f84:	6c700045 	ldclvs	0, cr0, [r0], #-276	; 0xfffffeec
     f88:	6f63766c 	svcvs	0x0063766c
     f8c:	43435200 	movtmi	r5, #12800	; 0x3200
     f90:	4250415f 	subsmi	r4, r0, #-1073741801	; 0xc0000017
     f94:	72655031 	rsbvc	r5, r5, #49	; 0x31
     f98:	43687069 	cmnmi	r8, #105	; 0x69
     f9c:	6b636f6c 	blvs	18dcd54 <startup-0x1e7232ac>
     fa0:	6f4d504c 	svcvs	0x004d504c
     fa4:	6d436564 	cfstr64vs	mvdx6, [r3, #-400]	; 0xfffffe70
     fa8:	50470064 	subpl	r0, r7, r4, rrx
     fac:	545f4f49 	ldrbpl	r4, [pc], #-3913	; fb4 <startup-0x1ffff04c>
     fb0:	44657079 	strbtmi	r7, [r5], #-121	; 0xffffff87
     fb4:	54006665 	strpl	r6, [r0], #-1637	; 0xfffff99b
     fb8:	5f314d49 	svcpl	0x00314d49
     fbc:	545f5055 	ldrbpl	r5, [pc], #-85	; fc4 <startup-0x1ffff03c>
     fc0:	30314d49 	eorscc	r4, r1, r9, asr #26
     fc4:	5152495f 	cmppl	r2, pc, asr r9
     fc8:	5449006e 	strbpl	r0, [r9], #-110	; 0xffffff92
     fcc:	78525f4d 	ldmdavc	r2, {r0, r2, r3, r6, r8, r9, sl, fp, ip, lr}^
     fd0:	66667542 	strbtvs	r7, [r6], -r2, asr #10
     fd4:	50007265 	andpl	r7, r0, r5, ror #4
     fd8:	32494c4c 	subcc	r4, r9, #76, 24	; 0x4c00
     fdc:	52004e53 	andpl	r4, r0, #1328	; 0x530
     fe0:	415f4343 	cmpmi	pc, r3, asr #6
     fe4:	50314248 	eorspl	r4, r1, r8, asr #4
     fe8:	70697265 	rsbvc	r7, r9, r5, ror #4
     fec:	6f6c4368 	svcvs	0x006c4368
     ff0:	504c6b63 	subpl	r6, ip, r3, ror #22
     ff4:	65646f4d 	strbvs	r6, [r4, #-3917]!	; 0xfffff0b3
     ff8:	00646d43 	rsbeq	r6, r4, r3, asr #26
     ffc:	494c4c50 	stmdbmi	ip, {r4, r6, sl, fp, lr}^
    1000:	00525332 	subseq	r5, r2, r2, lsr r3
    1004:	6e69616d 	powvsez	f6, f1, #5.0
    1008:	6c696d00 	stclvs	13, cr6, [r9], #-0
    100c:	544f0069 	strbpl	r0, [pc], #-105	; 1014 <startup-0x1fffefec>
    1010:	53485f47 	movtpl	r5, #36679	; 0x8f47
    1014:	3150455f 	cmpcc	r0, pc, asr r5
    1018:	54554f5f 	ldrbpl	r4, [r5], #-3935	; 0xfffff0a1
    101c:	5152495f 	cmppl	r2, pc, asr r9
    1020:	616c006e 	cmnvs	ip, lr, rrx
    1024:	69546d72 	ldmdbvs	r4, {r1, r4, r5, r6, r8, sl, fp, sp, lr}^
    1028:	52006b63 	andpl	r6, r0, #101376	; 0x18c00
    102c:	525f4343 	subspl	r4, pc, #201326593	; 0xc000001
    1030:	4c434354 	mcrrmi	3, 5, r4, r3, cr4
    1034:	646d434b 	strbtvs	r4, [sp], #-843	; 0xfffffcb5
    1038:	444f4d00 	strbmi	r4, [pc], #-3328	; 1040 <startup-0x1fffefc0>
    103c:	4e005245 	cdpmi	2, 0, cr5, cr0, cr5, {2}
    1040:	5f434956 	svcpl	0x00434956
    1044:	50746553 	rsbspl	r6, r4, r3, asr r5
    1048:	726f6972 	rsbvc	r6, pc, #1867776	; 0x1c8000
    104c:	00797469 	rsbseq	r7, r9, r9, ror #8
    1050:	314e4143 	cmpcc	lr, r3, asr #2
    1054:	3158525f 	cmpcc	r8, pc, asr r2
    1058:	5152495f 	cmppl	r2, pc, asr r9
    105c:	4352006e 	cmpmi	r2, #110	; 0x6e
    1060:	48415f43 	stmdami	r1, {r0, r1, r6, r8, r9, sl, fp, ip, lr}^
    1064:	65503242 	ldrbvs	r3, [r0, #-578]	; 0xfffffdbe
    1068:	68706972 	ldmdavs	r0!, {r1, r4, r5, r6, r8, fp, sp, lr}^
    106c:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
    1070:	75505f4f 	ldrbvc	r5, [r0, #-3919]	; 0xfffff0b1
    1074:	555f6450 	ldrbpl	r6, [pc, #-1104]	; c2c <startup-0x1ffff3d4>
    1078:	58450050 	stmdapl	r5, {r4, r6}^
    107c:	5f394954 	svcpl	0x00394954
    1080:	52495f35 	subpl	r5, r9, #53, 30	; 0xd4
    1084:	50006e51 	andpl	r6, r0, r1, asr lr
    1088:	41534c4c 	cmpmi	r3, ip, asr #24
    108c:	47464349 	strbmi	r4, [r6, -r9, asr #6]
    1090:	43520052 	cmpmi	r2, #82	; 0x52
    1094:	48415f43 	stmdami	r1, {r0, r1, r6, r8, r9, sl, fp, ip, lr}^
    1098:	65503142 	ldrbvs	r3, [r0, #-322]	; 0xfffffebe
    109c:	68706972 	ldmdavs	r0!, {r1, r4, r5, r6, r8, fp, sp, lr}^
    10a0:	636f6c43 	cmnvs	pc, #17152	; 0x4300
    10a4:	646d436b 	strbtvs	r4, [sp], #-875	; 0xfffffc95
    10a8:	6f687300 	svcvs	0x00687300
    10ac:	75207472 	strvc	r7, [r0, #-1138]!	; 0xfffffb8e
    10b0:	6769736e 	strbvs	r7, [r9, -lr, ror #6]!
    10b4:	2064656e 	rsbcs	r6, r4, lr, ror #10
    10b8:	00746e69 	rsbseq	r6, r4, r9, ror #28
    10bc:	5f434352 	svcpl	0x00434352
    10c0:	494c4c50 	stmdbmi	ip, {r4, r6, sl, fp, lr}^
    10c4:	6f435332 	svcvs	0x00435332
    10c8:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    10cc:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    10d0:	43435f38 	movtmi	r5, #16184	; 0x3f38
    10d4:	5152495f 	cmppl	r2, pc, asr r9
    10d8:	4453006e 	ldrbmi	r0, [r3], #-110	; 0xffffff92
    10dc:	495f4f49 	ldmdbmi	pc, {r0, r3, r6, r8, r9, sl, fp, lr}^	; <UNPREDICTABLE>
    10e0:	006e5152 	rsbeq	r5, lr, r2, asr r1
    10e4:	43415043 	movtmi	r5, #4163	; 0x1043
    10e8:	53490052 	movtpl	r0, #36946	; 0x9052
    10ec:	53005250 	movwpl	r5, #592	; 0x250
    10f0:	4c435359 	mcrrmi	3, 5, r5, r3, cr9
    10f4:	72465f4b 	subvc	r5, r6, #300	; 0x12c
    10f8:	65757165 	ldrbvs	r7, [r5, #-357]!	; 0xfffffe9b
    10fc:	0079636e 	rsbseq	r6, r9, lr, ror #6
    1100:	49545845 	ldmdbmi	r4, {r0, r2, r6, fp, ip, lr}^
    1104:	52495f33 	subpl	r5, r9, #51, 30	; 0xcc
    1108:	50006e51 	andpl	r6, r0, r1, asr lr
    110c:	53646e65 	cmnpl	r4, #1616	; 0x650
    1110:	52495f56 	subpl	r5, r9, #344	; 0x158
    1114:	4f006e51 	svcmi	0x00006e51
    1118:	485f4754 	ldmdami	pc, {r2, r4, r6, r8, r9, sl, lr}^	; <UNPREDICTABLE>
    111c:	50455f53 	subpl	r5, r5, r3, asr pc
    1120:	4e495f31 	mcrmi	15, 2, r5, cr9, cr1, {1}
    1124:	5152495f 	cmppl	r2, pc, asr r9
    1128:	4d44006e 	stclmi	0, cr0, [r4, #-440]	; 0xfffffe48
    112c:	535f3141 	cmppl	pc, #1073741840	; 0x40000010
    1130:	61657274 	smcvs	22308	; 0x5724
    1134:	495f376d 	ldmdbmi	pc, {r0, r2, r3, r5, r6, r8, r9, sl, ip, sp}^	; <UNPREDICTABLE>
    1138:	006e5152 	rsbeq	r5, lr, r2, asr r1
    113c:	6e695f5f 	mcrvs	15, 3, r5, cr9, cr15, {2}
    1140:	5f323374 	svcpl	0x00323374
    1144:	43520074 	cmpmi	r2, #116	; 0x74
    1148:	49545f43 	ldmdbmi	r4, {r0, r1, r6, r8, r9, sl, fp, ip, lr}^
    114c:	4b4c434d 	blmi	1311e88 <startup-0x1ecee178>
    1150:	73657250 	cmnvc	r5, #80, 4
    1154:	656c6163 	strbvs	r6, [ip, #-355]!	; 0xfffffe9d
    1158:	53490072 	movtpl	r0, #36978	; 0x9072
    115c:	70005245 	andvc	r5, r0, r5, asr #4
    1160:	63736572 	cmnvs	r3, #478150656	; 0x1c800000
    1164:	43435200 	movtmi	r5, #12800	; 0x3200
    1168:	4248415f 	submi	r4, r8, #-1073741801	; 0xc0000017
    116c:	72655032 	rsbvc	r5, r5, #50	; 0x32
    1170:	52687069 	rsbpl	r7, r8, #105	; 0x69
    1174:	74657365 	strbtvc	r7, [r5], #-869	; 0xfffffc9b
    1178:	00646d43 	rsbeq	r6, r4, r3, asr #26
    117c:	5f434352 	svcpl	0x00434352
    1180:	534c4c50 	movtpl	r4, #52304	; 0xcc50
    1184:	6d434941 	vstrvs.16	s9, [r3, #-130]	; 0xffffff7e	; <UNPREDICTABLE>
    1188:	48410064 	stmdami	r1, {r2, r5, r6}^
    118c:	4e453342 	cdpmi	3, 4, cr3, cr5, cr2, {2}
    1190:	43520052 	cmpmi	r2, #82	; 0x52
    1194:	59535f43 	ldmdbpl	r3, {r0, r1, r6, r8, r9, sl, fp, ip, lr}^
    1198:	4b4c4353 	blmi	1311eec <startup-0x1ecee114>
    119c:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    11a0:	44006769 	strmi	r6, [r0], #-1897	; 0xfffff897
    11a4:	5f32414d 	svcpl	0x0032414d
    11a8:	65727453 	ldrbvs	r7, [r2, #-1107]!	; 0xfffffbad
    11ac:	5f326d61 	svcpl	0x00326d61
    11b0:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
    11b4:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
    11b8:	61465f4f 	cmpvs	r6, pc, asr #30
    11bc:	535f7473 	cmppl	pc, #1929379840	; 0x73000000
    11c0:	64656570 	strbtvs	r6, [r5], #-1392	; 0xfffffa90
    11c4:	43435200 	movtmi	r5, #12800	; 0x3200
    11c8:	4c4c505f 	mcrrmi	0, 5, r5, ip, cr15
    11cc:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    11d0:	70006769 	andvc	r6, r0, r9, ror #14
    11d4:	006d6c6c 	rsbeq	r6, sp, ip, ror #24
    11d8:	706e6970 	rsbvc	r6, lr, r0, ror r9
    11dc:	4200736f 	andmi	r7, r0, #-1140850687	; 0xbc000001
    11e0:	535f7469 	cmppl	pc, #1761607680	; 0x69000000
    11e4:	47005445 	strmi	r5, [r0, -r5, asr #8]
    11e8:	5f4f4950 	svcpl	0x004f4950
    11ec:	64616552 	strbtvs	r6, [r1], #-1362	; 0xfffffaae
    11f0:	7074754f 	rsbsvc	r7, r4, pc, asr #10
    11f4:	61447475 	hvcvs	18245	; 0x4745
    11f8:	47006174 	smlsdxmi	r0, r4, r1, r6
    11fc:	5f4f4950 	svcpl	0x004f4950
    1200:	74004641 	strvc	r4, [r0], #-1601	; 0xfffff9bf
    1204:	00706d65 	rsbseq	r6, r0, r5, ror #26
    1208:	4f495047 	svcmi	0x00495047
    120c:	7274535f 	rsbsvc	r5, r4, #2080374785	; 0x7c000001
    1210:	49746375 	ldmdbmi	r4!, {r0, r2, r4, r5, r6, r8, r9, sp, lr}^
    1214:	0074696e 	rsbseq	r6, r4, lr, ror #18
    1218:	56746942 	ldrbtpl	r6, [r4], -r2, asr #18
    121c:	42006c61 	andmi	r6, r0, #24832	; 0x6100
    1220:	525f7469 	subspl	r7, pc, #1761607680	; 0x69000000
    1224:	54455345 	strbpl	r5, [r5], #-837	; 0xfffffcbb
    1228:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
    122c:	72575f4f 	subsvc	r5, r7, #316	; 0x13c
    1230:	42657469 	rsbmi	r7, r5, #1761607680	; 0x69000000
    1234:	47007469 	strmi	r7, [r0, -r9, ror #8]
    1238:	5f4f4950 	svcpl	0x004f4950
    123c:	42746553 	rsbsmi	r6, r4, #348127232	; 0x14c00000
    1240:	00737469 	rsbseq	r7, r3, r9, ror #8
    1244:	4f495047 	svcmi	0x00495047
    1248:	696e495f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, lr}^
    124c:	50470074 	subpl	r0, r7, r4, ror r0
    1250:	525f4f49 	subspl	r4, pc, #292	; 0x124
    1254:	74657365 	strbtvc	r7, [r5], #-869	; 0xfffffc9b
    1258:	73746942 	cmnvc	r4, #1081344	; 0x108000
    125c:	2f3a4300 	svccs	0x003a4300
    1260:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
    1264:	64412f73 	strbvs	r2, [r1], #-3955	; 0xfffff08d
    1268:	2f746d61 	svccs	0x00746d61
    126c:	44656e4f 	strbtmi	r6, [r5], #-3663	; 0xfffff1b1
    1270:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
    1274:	6b6f442f 	blvs	1bd2338 <startup-0x1e42dcc8>
    1278:	6e656d75 	mcrvs	13, 3, r6, cr5, cr5, {3}
    127c:	69472f74 	stmdbvs	r7, {r2, r4, r5, r6, r8, r9, sl, fp, sp}^
    1280:	62754874 	rsbsvs	r4, r5, #116, 16	; 0x740000
    1284:	5441442f 	strbpl	r4, [r1], #-1071	; 0xfffffbd1
    1288:	2d303932 			; <UNDEFINED> instruction: 0x2d303932
    128c:	6d72614c 	ldfvse	f6, [r2, #-304]!	; 0xfffffed0
    1290:	74737973 	ldrbtvc	r7, [r3], #-2419	; 0xfffff68d
    1294:	6b2f6d65 	blvs	bdc830 <startup-0x1f4237d0>
    1298:	6c2f646f 	cfstrsvs	mvf6, [pc], #-444	; 10e4 <startup-0x1fffef1c>
    129c:	532f6269 			; <UNDEFINED> instruction: 0x532f6269
    12a0:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
    12a4:	6c5f3446 	cfldrdvs	mvd3, [pc], {70}	; 0x46
    12a8:	532f6269 			; <UNDEFINED> instruction: 0x532f6269
    12ac:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
    12b0:	78783446 	ldmdavc	r8!, {r1, r2, r6, sl, ip, sp}^
    12b4:	6474535f 	ldrbtvs	r5, [r4], #-863	; 0xfffffca1
    12b8:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
    12bc:	445f6870 	ldrbmi	r6, [pc], #-2160	; 12c4 <startup-0x1fffed3c>
    12c0:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
    12c4:	72732f72 	rsbsvc	r2, r3, #456	; 0x1c8
    12c8:	74732f63 	ldrbtvc	r2, [r3], #-3939	; 0xfffff09d
    12cc:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
    12d0:	5f787834 	svcpl	0x00787834
    12d4:	6f697067 	svcvs	0x00697067
    12d8:	4700632e 	strmi	r6, [r0, -lr, lsr #6]
    12dc:	5f4f4950 	svcpl	0x004f4950
    12e0:	6e496544 	cdpvs	5, 4, cr6, cr9, cr4, {2}
    12e4:	47007469 	strmi	r7, [r0, -r9, ror #8]
    12e8:	5f4f4950 	svcpl	0x004f4950
    12ec:	64616552 	strbtvs	r6, [r1], #-1362	; 0xfffffaae
    12f0:	75706e49 	ldrbvc	r6, [r0, #-3657]!	; 0xfffff1b7
    12f4:	74614474 	strbtvc	r4, [r1], #-1140	; 0xfffffb8c
    12f8:	74694261 	strbtvc	r4, [r9], #-609	; 0xfffffd9f
    12fc:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
    1300:	6e495f4f 	cdpvs	15, 4, cr5, cr9, cr15, {2}
    1304:	74537469 	ldrbvc	r7, [r3], #-1129	; 0xfffffb97
    1308:	74637572 	strbtvc	r7, [r3], #-1394	; 0xfffffa8e
    130c:	726f5000 	rsbvc	r5, pc, #0
    1310:	6c615674 	stclvs	6, cr5, [r1], #-464	; 0xfffffe30
    1314:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
    1318:	69505f4f 	ldmdbvs	r0, {r0, r1, r2, r3, r6, r8, r9, sl, fp, ip, lr}^
    131c:	756f536e 	strbvc	r5, [pc, #-878]!	; fb6 <startup-0x1ffff04a>
    1320:	00656372 	rsbeq	r6, r5, r2, ror r3
    1324:	4f495047 	svcmi	0x00495047
    1328:	6165525f 	cmnvs	r5, pc, asr r2
    132c:	706e4964 	rsbvc	r4, lr, r4, ror #18
    1330:	61447475 	hvcvs	18245	; 0x4745
    1334:	47006174 	smlsdxmi	r0, r4, r1, r6
    1338:	5f4f4950 	svcpl	0x004f4950
    133c:	4c6e6950 			; <UNDEFINED> instruction: 0x4c6e6950
    1340:	436b636f 	cmnmi	fp, #-1140850687	; 0xbc000001
    1344:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    1348:	69420067 	stmdbvs	r2, {r0, r1, r2, r5, r6}^
    134c:	74634174 	strbtvc	r4, [r3], #-372	; 0xfffffe8c
    1350:	006e6f69 	rsbeq	r6, lr, r9, ror #30
    1354:	72727563 	rsbsvc	r7, r2, #415236096	; 0x18c00000
    1358:	70746e65 	rsbsvc	r6, r4, r5, ror #28
    135c:	47006e69 	strmi	r6, [r0, -r9, ror #28]
    1360:	5f4f4950 	svcpl	0x004f4950
    1364:	74697257 	strbtvc	r7, [r9], #-599	; 0xfffffda9
    1368:	50470065 	subpl	r0, r7, r5, rrx
    136c:	00784f49 	rsbseq	r4, r8, r9, asr #30
    1370:	4f495047 	svcmi	0x00495047
    1374:	676f545f 			; <UNDEFINED> instruction: 0x676f545f
    1378:	42656c67 	rsbmi	r6, r5, #26368	; 0x6700
    137c:	00737469 	rsbseq	r7, r3, r9, ror #8
    1380:	706d6574 	rsbvc	r6, sp, r4, ror r5
    1384:	4700325f 	smlsdmi	r0, pc, r2, r3	; <UNPREDICTABLE>
    1388:	5f4f4950 	svcpl	0x004f4950
    138c:	416e6950 	cmnmi	lr, r0, asr r9
    1390:	6e6f4346 	cdpvs	3, 6, cr4, cr15, cr6, {2}
    1394:	00676966 	rsbeq	r6, r7, r6, ror #18
    1398:	4f495047 	svcmi	0x00495047
    139c:	6165525f 	cmnvs	r5, pc, asr r2
    13a0:	74754f64 	ldrbtvc	r4, [r5], #-3940	; 0xfffff09c
    13a4:	44747570 	ldrbtmi	r7, [r4], #-1392	; 0xfffffa90
    13a8:	42617461 	rsbmi	r7, r1, #1627389952	; 0x61000000
    13ac:	4e007469 	cdpmi	4, 0, cr7, cr0, cr9, {3}
    13b0:	5f434956 	svcpl	0x00434956
    13b4:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xfffff1b7
    13b8:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0xfffff6ac
    13bc:	00666544 	rsbeq	r6, r6, r4, asr #10
    13c0:	4349564e 	movtmi	r5, #38478	; 0x964e
    13c4:	5152495f 	cmppl	r2, pc, asr r9
    13c8:	6e616843 	cdpvs	8, 6, cr6, cr1, cr3, {2}
    13cc:	436c656e 	cmnmi	ip, #461373440	; 0x1b800000
    13d0:	5300646d 	movwpl	r6, #1133	; 0x46d
    13d4:	69547379 	ldmdbvs	r4, {r0, r3, r4, r5, r6, r8, r9, ip, sp, lr}^
    13d8:	435f6b63 	cmpmi	pc, #101376	; 0x18c00
    13dc:	6f534b4c 	svcvs	0x00534b4c
    13e0:	65637275 	strbvs	r7, [r3, #-629]!	; 0xfffffd8b
    13e4:	49564e00 	ldmdbmi	r6, {r9, sl, fp, lr}^
    13e8:	6e495f43 	cdpvs	15, 4, cr5, cr9, cr3, {2}
    13ec:	74537469 	ldrbvc	r7, [r3], #-1129	; 0xfffffb97
    13f0:	74637572 	strbtvc	r7, [r3], #-1394	; 0xfffffa8e
    13f4:	49564e00 	ldmdbmi	r6, {r9, sl, fp, lr}^
    13f8:	72505f43 	subsvc	r5, r0, #268	; 0x10c
    13fc:	69726f69 	ldmdbvs	r2!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
    1400:	72477974 	subvc	r7, r7, #116, 18	; 0x1d0000
    1404:	0070756f 	rsbseq	r7, r0, pc, ror #10
    1408:	4349564e 	movtmi	r5, #38478	; 0x964e
    140c:	696e495f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, lr}^
    1410:	6d740074 	ldclvs	0, cr0, [r4, #-464]!	; 0xfffffe30
    1414:	65727070 	ldrbvs	r7, [r2, #-112]!	; 0xffffff90
    1418:	66664f00 	strbtvs	r4, [r6], -r0, lsl #30
    141c:	00746573 	rsbseq	r6, r4, r3, ror r5
    1420:	4349564e 	movtmi	r5, #38478	; 0x964e
    1424:	7465535f 	strbtvc	r5, [r5], #-863	; 0xfffffca1
    1428:	74636556 	strbtvc	r6, [r3], #-1366	; 0xfffffaaa
    142c:	6154726f 	cmpvs	r4, pc, ror #4
    1430:	00656c62 	rsbeq	r6, r5, r2, ror #24
    1434:	73706d74 	cmnvc	r0, #116, 26	; 0x1d00
    1438:	4e006275 	mcrmi	2, 0, r6, cr0, cr5, {3}
    143c:	5f434956 	svcpl	0x00434956
    1440:	74737953 	ldrbtvc	r7, [r3], #-2387	; 0xfffff6ad
    1444:	504c6d65 	subpl	r6, ip, r5, ror #26
    1448:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    144c:	53006769 	movwpl	r6, #1897	; 0x769
    1450:	69547379 	ldmdbvs	r4, {r0, r3, r4, r5, r6, r8, r9, ip, sp, lr}^
    1454:	435f6b63 	cmpmi	pc, #101376	; 0x18c00
    1458:	6f534b4c 	svcvs	0x00534b4c
    145c:	65637275 	strbvs	r7, [r3, #-629]!	; 0xfffffd8b
    1460:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    1464:	74006769 	strvc	r6, [r0], #-1897	; 0xfffff897
    1468:	7270706d 	rsbsvc	r7, r0, #109	; 0x6d
    146c:	69726f69 	ldmdbvs	r2!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
    1470:	4e007974 			; <UNDEFINED> instruction: 0x4e007974
    1474:	5f434956 	svcpl	0x00434956
    1478:	43515249 	cmpmi	r1, #-1879048188	; 0x90000004
    147c:	6e6e6168 	powvsez	f6, f6, #0.0
    1480:	4e006c65 	cdpmi	12, 0, cr6, cr0, cr5, {3}
    1484:	5f434956 	svcpl	0x00434956
    1488:	43515249 	cmpmi	r1, #-1879048188	; 0x90000004
    148c:	6e6e6168 	powvsez	f6, f6, #0.0
    1490:	75536c65 	ldrbvc	r6, [r3, #-3173]	; 0xfffff39b
    1494:	69725062 	ldmdbvs	r2!, {r1, r5, r6, ip, lr}^
    1498:	7469726f 	strbtvc	r7, [r9], #-623	; 0xfffffd91
    149c:	564e0079 			; <UNDEFINED> instruction: 0x564e0079
    14a0:	495f4349 	ldmdbmi	pc, {r0, r3, r6, r8, r9, lr}^	; <UNPREDICTABLE>
    14a4:	68435152 	stmdavs	r3, {r1, r4, r6, r8, ip, lr}^
    14a8:	656e6e61 	strbvs	r6, [lr, #-3681]!	; 0xfffff19f
    14ac:	6572506c 	ldrbvs	r5, [r2, #-108]!	; 0xffffff94
    14b0:	74706d65 	ldrbtvc	r6, [r0], #-3429	; 0xfffff29b
    14b4:	506e6f69 	rsbpl	r6, lr, r9, ror #30
    14b8:	726f6972 	rsbvc	r6, pc, #1867776	; 0x1c8000
    14bc:	00797469 	rsbseq	r7, r9, r9, ror #8
    14c0:	4349564e 	movtmi	r5, #38478	; 0x964e
    14c4:	6365565f 	cmnvs	r5, #99614720	; 0x5f00000
    14c8:	62615474 	rsbvs	r5, r1, #116, 8	; 0x74000000
    14cc:	2f3a4300 	svccs	0x003a4300
    14d0:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
    14d4:	64412f73 	strbvs	r2, [r1], #-3955	; 0xfffff08d
    14d8:	2f746d61 	svccs	0x00746d61
    14dc:	44656e4f 	strbtmi	r6, [r5], #-3663	; 0xfffff1b1
    14e0:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
    14e4:	6b6f442f 	blvs	1bd25a8 <startup-0x1e42da58>
    14e8:	6e656d75 	mcrvs	13, 3, r6, cr5, cr5, {3}
    14ec:	69472f74 	stmdbvs	r7, {r2, r4, r5, r6, r8, r9, sl, fp, sp}^
    14f0:	62754874 	rsbsvs	r4, r5, #116, 16	; 0x740000
    14f4:	5441442f 	strbpl	r4, [r1], #-1071	; 0xfffffbd1
    14f8:	2d303932 			; <UNDEFINED> instruction: 0x2d303932
    14fc:	6d72614c 	ldfvse	f6, [r2, #-304]!	; 0xfffffed0
    1500:	74737973 	ldrbtvc	r7, [r3], #-2419	; 0xfffff68d
    1504:	6b2f6d65 	blvs	bdcaa0 <startup-0x1f423560>
    1508:	6c2f646f 	cfstrsvs	mvf6, [pc], #-444	; 1354 <startup-0x1fffecac>
    150c:	532f6269 			; <UNDEFINED> instruction: 0x532f6269
    1510:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
    1514:	6c5f3446 	cfldrdvs	mvd3, [pc], {70}	; 0x46
    1518:	532f6269 			; <UNDEFINED> instruction: 0x532f6269
    151c:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
    1520:	78783446 	ldmdavc	r8!, {r1, r2, r6, sl, ip, sp}^
    1524:	6474535f 	ldrbtvs	r5, [r4], #-863	; 0xfffffca1
    1528:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
    152c:	445f6870 	ldrbmi	r6, [pc], #-2160	; 1534 <startup-0x1fffeacc>
    1530:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
    1534:	72732f72 	rsbsvc	r2, r3, #456	; 0x1c8
    1538:	696d2f63 	stmdbvs	sp!, {r0, r1, r5, r6, r8, r9, sl, fp, sp}^
    153c:	632e6373 			; <UNDEFINED> instruction: 0x632e6373
    1540:	776f4c00 	strbvc	r4, [pc, -r0, lsl #24]!
    1544:	65776f50 	ldrbvs	r6, [r7, #-3920]!	; 0xfffff0b0
    1548:	646f4d72 	strbtvs	r4, [pc], #-3442	; 1550 <startup-0x1fffeab0>
    154c:	564e0065 	strbpl	r0, [lr], -r5, rrx
    1550:	505f4349 	subspl	r4, pc, r9, asr #6
    1554:	726f6972 	rsbvc	r6, pc, #1867776	; 0x1c8000
    1558:	47797469 	ldrbmi	r7, [r9, -r9, ror #8]!
    155c:	70756f72 	rsbsvc	r6, r5, r2, ror pc
    1560:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    1564:	62006769 	andvs	r6, r0, #27525120	; 0x1a40000
    1568:	65666675 	strbvs	r6, [r6, #-1653]!	; 0xfffff98b
    156c:	74755072 	ldrbtvc	r5, [r5], #-114	; 0xffffff8e
    1570:	756f6300 	strbvc	r6, [pc, #-768]!	; 1278 <startup-0x1fffed88>
    1574:	4300746e 	movwmi	r7, #1134	; 0x46e
    1578:	73552f3a 	cmpvc	r5, #58, 30	; 0xe8
    157c:	2f737265 	svccs	0x00737265
    1580:	6d616441 	cfstrdvs	mvd6, [r1, #-260]!	; 0xfffffefc
    1584:	6e4f2f74 	mcrvs	15, 2, r2, cr15, cr4, {3}
    1588:	69724465 	ldmdbvs	r2!, {r0, r2, r5, r6, sl, lr}^
    158c:	442f6576 	strtmi	r6, [pc], #-1398	; 1594 <startup-0x1fffea6c>
    1590:	6d756b6f 	fldmdbxvs	r5!, {d22-d76}	;@ Deprecated
    1594:	2f746e65 	svccs	0x00746e65
    1598:	48746947 	ldmdami	r4!, {r0, r1, r2, r6, r8, fp, sp, lr}^
    159c:	442f6275 	strtmi	r6, [pc], #-629	; 15a4 <startup-0x1fffea5c>
    15a0:	39325441 	ldmdbcc	r2!, {r0, r6, sl, ip, lr}
    15a4:	614c2d30 	cmpvs	ip, r0, lsr sp
    15a8:	79736d72 	ldmdbvc	r3!, {r1, r4, r5, r6, r8, sl, fp, sp, lr}^
    15ac:	6d657473 	cfstrdvs	mvd7, [r5, #-460]!	; 0xfffffe34
    15b0:	646f6b2f 	strbtvs	r6, [pc], #-2863	; 15b8 <startup-0x1fffea48>
    15b4:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    15b8:	6675622f 	ldrbtvs	r6, [r5], -pc, lsr #4
    15bc:	2e726566 	cdpcs	5, 7, cr6, cr2, cr6, {3}
    15c0:	49460063 	stmdbmi	r6, {r0, r1, r5, r6}^
    15c4:	62004f46 	andvs	r4, r0, #280	; 0x118
    15c8:	65666675 	strbvs	r6, [r6, #-1653]!	; 0xfffff98b
    15cc:	65764f72 	ldrbvs	r4, [r6, #-3954]!	; 0xfffff08e
    15d0:	64697272 	strbtvs	r7, [r9], #-626	; 0xfffffd8e
    15d4:	73614c65 	cmnvc	r1, #25856	; 0x6500
    15d8:	65640074 	strbvs	r0, [r4, #-116]!	; 0xffffff8c
    15dc:	62007473 	andvs	r7, r0, #1929379840	; 0x73000000
    15e0:	00666675 	rsbeq	r6, r6, r5, ror r6
    15e4:	6d656c65 	stclvs	12, cr6, [r5, #-404]!	; 0xfffffe6c
    15e8:	66756200 	ldrbtvs	r6, [r5], -r0, lsl #4
    15ec:	47726566 	ldrbmi	r6, [r2, -r6, ror #10]!
    15f0:	62007465 	andvs	r7, r0, #1694498816	; 0x65000000
    15f4:	65666675 	strbvs	r6, [r6, #-1653]!	; 0xfffff98b
    15f8:	696e4972 	stmdbvs	lr!, {r1, r4, r5, r6, r8, fp, lr}^
    15fc:	75620074 	strbvc	r0, [r2, #-116]!	; 0xffffff8c
    1600:	72656666 	rsbvc	r6, r5, #106954752	; 0x6600000
    1604:	65727000 	ldrbvs	r7, [r2, #-0]!
    1608:	646e4976 	strbtvs	r4, [lr], #-2422	; 0xfffff68a
    160c:	69007865 	stmdbvs	r0, {r0, r2, r5, r6, fp, ip, sp, lr}
    1610:	6765746e 	strbvs	r7, [r5, -lr, ror #8]!
    1614:	69647265 	stmdbvs	r4!, {r0, r2, r5, r6, r9, ip, sp, lr}^
    1618:	65646976 	strbvs	r6, [r4, #-2422]!	; 0xfffff68a
    161c:	53550072 	cmppl	r5, #114	; 0x72
    1620:	5f545241 	svcpl	0x00545241
    1624:	41485043 	cmpmi	r8, r3, asr #32
    1628:	50544700 	subspl	r4, r4, r0, lsl #14
    162c:	53550052 	cmppl	r5, #82	; 0x52
    1630:	5f545241 	svcpl	0x00545241
    1634:	65636552 	strbvs	r6, [r3, #-1362]!	; 0xfffffaae
    1638:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
    163c:	656b6157 	strbvs	r6, [fp, #-343]!	; 0xfffffea9
    1640:	6d437055 	stclvs	0, cr7, [r3, #-340]	; 0xfffffeac
    1644:	53550064 	cmppl	r5, #100	; 0x64
    1648:	5f545241 	svcpl	0x00545241
    164c:	50746553 	rsbspl	r6, r4, r3, asr r5
    1650:	63736572 	cmnvs	r3, #478150656	; 0x1c800000
    1654:	72656c61 	rsbvc	r6, r5, #24832	; 0x6100
    1658:	41535500 	cmpmi	r3, r0, lsl #10
    165c:	495f5452 	ldmdbmi	pc, {r1, r4, r6, sl, ip, lr}^	; <UNPREDICTABLE>
    1660:	0074696e 	rsbseq	r6, r4, lr, ror #18
    1664:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    1668:	494c5f54 	stmdbmi	ip, {r2, r4, r6, r8, r9, sl, fp, ip, lr}^
    166c:	6572424e 	ldrbvs	r4, [r2, #-590]!	; 0xfffffdb2
    1670:	65446b61 	strbvs	r6, [r4, #-2913]	; 0xfffff49f
    1674:	74636574 	strbtvc	r6, [r3], #-1396	; 0xfffffa8c
    1678:	676e654c 	strbvs	r6, [lr, -ip, asr #10]!
    167c:	55006874 	strpl	r6, [r0, #-2164]	; 0xfffff78c
    1680:	54524153 	ldrbpl	r4, [r2], #-339	; 0xfffffead
    1684:	656e4f5f 	strbvs	r4, [lr, #-3935]!	; 0xfffff0a1
    1688:	4d746942 			; <UNDEFINED> instruction: 0x4d746942
    168c:	6f687465 	svcvs	0x00687465
    1690:	646d4364 	strbtvs	r4, [sp], #-868	; 0xfffffc9c
    1694:	41535500 	cmpmi	r3, r0, lsl #10
    1698:	545f5452 	ldrbpl	r5, [pc], #-1106	; 16a0 <startup-0x1fffe960>
    169c:	44657079 	strbtmi	r7, [r5], #-121	; 0xffffff87
    16a0:	55006665 	strpl	r6, [r0, #-1637]	; 0xfffff99b
    16a4:	54524153 	ldrbpl	r4, [r2], #-339	; 0xfffffead
    16a8:	6f74535f 	svcvs	0x0074535f
    16ac:	74694270 	strbtvc	r4, [r9], #-624	; 0xfffffd90
    16b0:	53550073 	cmppl	r5, #115	; 0x73
    16b4:	5f545241 	svcpl	0x00545241
    16b8:	636f6c43 	cmnvs	pc, #17152	; 0x4300
    16bc:	696e496b 	stmdbvs	lr!, {r0, r1, r3, r5, r6, r8, fp, lr}^
    16c0:	70795474 	rsbsvc	r5, r9, r4, ror r4
    16c4:	66654465 	strbtvs	r4, [r5], -r5, ror #8
    16c8:	41535500 	cmpmi	r3, r0, lsl #10
    16cc:	435f5452 	cmpmi	pc, #1375731712	; 0x52000000
    16d0:	5500646d 	strpl	r6, [r0, #-1133]	; 0xfffffb93
    16d4:	54524153 	ldrbpl	r4, [r2], #-339	; 0xfffffead
    16d8:	6e65535f 	mcrvs	3, 3, r5, cr5, cr15, {2}
    16dc:	74614464 	strbtvc	r4, [r1], #-1124	; 0xfffffb9c
    16e0:	53550061 	cmppl	r5, #97	; 0x61
    16e4:	5f545241 	svcpl	0x00545241
    16e8:	656b6157 	strbvs	r6, [fp, #-343]!	; 0xfffffea9
    16ec:	55007055 	strpl	r7, [r0, #-85]	; 0xffffffab
    16f0:	54524153 	ldrbpl	r4, [r2], #-339	; 0xfffffead
    16f4:	726f575f 	rsbvc	r5, pc, #24903680	; 0x17c0000
    16f8:	6e654c64 	cdpvs	12, 6, cr4, cr5, cr4, {3}
    16fc:	00687467 	rsbeq	r7, r8, r7, ror #8
    1700:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    1704:	4d445f54 	stclmi	15, cr5, [r4, #-336]	; 0xfffffeb0
    1708:	646d4341 	strbtvs	r4, [sp], #-833	; 0xfffffcbf
    170c:	41535500 	cmpmi	r3, r0, lsl #10
    1710:	4c5f5452 	cfldrdmi	mvd5, [pc], {82}	; 0x52
    1714:	42747361 	rsbsmi	r7, r4, #-2080374783	; 0x84000001
    1718:	55007469 	strpl	r7, [r0, #-1129]	; 0xfffffb97
    171c:	54524153 	ldrbpl	r4, [r2], #-339	; 0xfffffead
    1720:	7561425f 	strbvc	r4, [r1, #-607]!	; 0xfffffda1
    1724:	74615264 	strbtvc	r5, [r1], #-612	; 0xfffffd9c
    1728:	53550065 	cmppl	r5, #101	; 0x65
    172c:	5f545241 	svcpl	0x00545241
    1730:	41447249 	cmpmi	r4, r9, asr #4
    1734:	65646f4d 	strbvs	r6, [r4, #-3917]!	; 0xfffff0b3
    1738:	62706100 	rsbsvs	r6, r0, #0, 2
    173c:	636f6c63 	cmnvs	pc, #25344	; 0x6300
    1740:	5355006b 	cmppl	r5, #107	; 0x6b
    1744:	5f545241 	svcpl	0x00545241
    1748:	61656c43 	cmnvs	r5, r3, asr #24
    174c:	50544972 	subspl	r4, r4, r2, ror r9
    1750:	69646e65 	stmdbvs	r4!, {r0, r2, r5, r6, r9, sl, fp, sp, lr}^
    1754:	6942676e 	stmdbvs	r2, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}^
    1758:	53550074 	cmppl	r5, #116	; 0x74
    175c:	5f545241 	svcpl	0x00545241
    1760:	72617547 	rsbvc	r7, r1, #297795584	; 0x11c00000
    1764:	6d695464 	cfstrdvs	mvd5, [r9, #-400]!	; 0xfffffe70
    1768:	53550065 	cmppl	r5, #101	; 0x65
    176c:	5f545241 	svcpl	0x00545241
    1770:	424e494c 	submi	r4, lr, #76, 18	; 0x130000
    1774:	6b616572 	blvs	185ad44 <startup-0x1e7a52bc>
    1778:	65746544 	ldrbvs	r6, [r4, #-1348]!	; 0xfffffabc
    177c:	654c7463 	strbvs	r7, [ip, #-1123]	; 0xfffffb9d
    1780:	6874676e 	ldmdavs	r4!, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}^
    1784:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    1788:	55006769 	strpl	r6, [r0, #-1897]	; 0xfffff897
    178c:	54524153 	ldrbpl	r4, [r2], #-339	; 0xfffffead
    1790:	414c465f 	cmpmi	ip, pc, asr r6
    1794:	53550047 	cmppl	r5, #71	; 0x47
    1798:	5f545241 	svcpl	0x00545241
    179c:	6e496544 	cdpvs	5, 4, cr6, cr9, cr4, {2}
    17a0:	55007469 	strpl	r7, [r0, #-1129]	; 0xfffffb97
    17a4:	54524153 	ldrbpl	r4, [r2], #-339	; 0xfffffead
    17a8:	6f6c435f 	svcvs	0x006c435f
    17ac:	6e496b63 	vmlsvs.f64	d22, d9, d19
    17b0:	74537469 	ldrbvc	r7, [r3], #-1129	; 0xfffffb97
    17b4:	74637572 	strbtvc	r7, [r3], #-1394	; 0xfffffa8e
    17b8:	41535500 	cmpmi	r3, r0, lsl #10
    17bc:	505f5452 	subspl	r5, pc, r2, asr r4	; <UNPREDICTABLE>
    17c0:	74697261 	strbtvc	r7, [r9], #-609	; 0xfffffd9f
    17c4:	53550079 	cmppl	r5, #121	; 0x79
    17c8:	5f545241 	svcpl	0x00545241
    17cc:	636f6c43 	cmnvs	pc, #17152	; 0x4300
    17d0:	7274536b 	rsbsvc	r5, r4, #-1409286143	; 0xac000001
    17d4:	49746375 	ldmdbmi	r4!, {r0, r2, r4, r5, r6, r8, r9, sp, lr}^
    17d8:	0074696e 	rsbseq	r6, r4, lr, ror #18
    17dc:	72617375 	rsbvc	r7, r1, #-738197503	; 0xd4000001
    17e0:	61627874 	smcvs	10116	; 0x2784
    17e4:	55006573 	strpl	r6, [r0, #-1395]	; 0xfffffa8d
    17e8:	54524153 	ldrbpl	r4, [r2], #-339	; 0xfffffead
    17ec:	656c435f 	strbvs	r4, [ip, #-863]!	; 0xfffffca1
    17f0:	6c467261 	sfmvs	f7, 2, [r6], {97}	; 0x61
    17f4:	55006761 	strpl	r6, [r0, #-1889]	; 0xfffff89f
    17f8:	54524153 	ldrbpl	r4, [r2], #-339	; 0xfffffead
    17fc:	7465535f 	strbtvc	r5, [r5], #-863	; 0xfffffca1
    1800:	72646441 	rsbvc	r6, r4, #1090519040	; 0x41000000
    1804:	00737365 	rsbseq	r7, r3, r5, ror #6
    1808:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    180c:	65535f54 	ldrbvs	r5, [r3, #-3924]	; 0xfffff0ac
    1810:	61754774 	cmnvs	r5, r4, ror r7
    1814:	69546472 	ldmdbvs	r4, {r1, r4, r5, r6, sl, sp, lr}^
    1818:	5500656d 	strpl	r6, [r0, #-1389]	; 0xfffffa93
    181c:	54524153 	ldrbpl	r4, [r2], #-339	; 0xfffffead
    1820:	6e65535f 	mcrvs	3, 3, r5, cr5, cr15, {2}
    1824:	65724264 	ldrbvs	r4, [r2, #-612]!	; 0xfffffd9c
    1828:	55006b61 	strpl	r6, [r0, #-2913]	; 0xfffff49f
    182c:	54524153 	ldrbpl	r4, [r2], #-339	; 0xfffffead
    1830:	696e495f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, lr}^
    1834:	70795474 	rsbsvc	r5, r9, r4, ror r4
    1838:	66654465 	strbtvs	r4, [r5], -r5, ror #8
    183c:	41535500 	cmpmi	r3, r0, lsl #10
    1840:	495f5452 	ldmdbmi	pc, {r1, r4, r6, sl, ip, lr}^	; <UNPREDICTABLE>
    1844:	6e6f4354 	mcrvs	3, 3, r4, cr15, cr4, {2}
    1848:	00676966 	rsbeq	r6, r7, r6, ror #18
    184c:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    1850:	4d445f54 	stclmi	15, cr5, [r4, #-336]	; 0xfffffeb0
    1854:	71655241 	cmnvc	r5, r1, asr #4
    1858:	41535500 	cmpmi	r3, r0, lsl #10
    185c:	00785452 	rsbseq	r5, r8, r2, asr r4
    1860:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    1864:	61485f54 	cmpvs	r8, r4, asr pc
    1868:	61776472 	cmnvs	r7, r2, ror r4
    186c:	6c466572 	cfstr64vs	mvdx6, [r6], {114}	; 0x72
    1870:	6f43776f 	svcvs	0x0043776f
    1874:	6f72746e 	svcvs	0x0072746e
    1878:	5355006c 	cmppl	r5, #108	; 0x6c
    187c:	5f545241 	svcpl	0x00545241
    1880:	72616d53 	rsbvc	r6, r1, #5312	; 0x14c0
    1884:	72614374 	rsbvc	r4, r1, #116, 6	; 0xd0000001
    1888:	646d4364 	strbtvs	r4, [sp], #-868	; 0xfffffc9c
    188c:	41535500 	cmpmi	r3, r0, lsl #10
    1890:	4d5f5452 	cfldrdmi	mvd5, [pc, #-328]	; 1750 <startup-0x1fffe8b0>
    1894:	0065646f 	rsbeq	r6, r5, pc, ror #8
    1898:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    189c:	64415f54 	strbvs	r5, [r1], #-3924	; 0xfffff0ac
    18a0:	73657264 	cmnvc	r5, #100, 4	; 0x40000006
    18a4:	69620073 	stmdbvs	r2!, {r0, r1, r4, r5, r6}^
    18a8:	736f7074 	cmnvc	pc, #116	; 0x74
    18ac:	41535500 	cmpmi	r3, r0, lsl #10
    18b0:	4f5f5452 	svcmi	0x005f5452
    18b4:	53726576 	cmnpl	r2, #494927872	; 0x1d800000
    18b8:	6c706d61 	ldclvs	13, cr6, [r0], #-388	; 0xfffffe7c
    18bc:	38676e69 	stmdacc	r7!, {r0, r3, r5, r6, r9, sl, fp, sp, lr}^
    18c0:	00646d43 	rsbeq	r6, r4, r3, asr #26
    18c4:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    18c8:	65475f54 	strbvs	r5, [r7, #-3924]	; 0xfffff0ac
    18cc:	53544974 	cmppl	r4, #116, 18	; 0x1d0000
    18d0:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0xfffffe8c
    18d4:	53550073 	cmppl	r5, #115	; 0x73
    18d8:	5f545241 	svcpl	0x00545241
    18dc:	434e494c 	movtmi	r4, #59724	; 0xe94c
    18e0:	5500646d 	strpl	r6, [r0, #-1133]	; 0xfffffb93
    18e4:	54524153 	ldrbpl	r4, [r2], #-339	; 0xfffffead
    18e8:	4472495f 	ldrbtmi	r4, [r2], #-2399	; 0xfffff6a1
    18ec:	6e6f4341 	cdpvs	3, 6, cr4, cr15, cr1, {2}
    18f0:	00676966 	rsbeq	r6, r7, r6, ror #18
    18f4:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    18f8:	6c435f54 	mcrrvs	15, 5, r5, r3, cr4
    18fc:	006b636f 	rsbeq	r6, fp, pc, ror #6
    1900:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    1904:	72495f54 	subvc	r5, r9, #84, 30	; 0x150
    1908:	6d434144 	stfvse	f4, [r3, #-272]	; 0xfffffef0
    190c:	72660064 	rsbvc	r0, r6, #100	; 0x64
    1910:	69746361 	ldmdbvs	r4!, {r0, r5, r6, r8, r9, sp, lr}^
    1914:	6c616e6f 	stclvs	14, cr6, [r1], #-444	; 0xfffffe44
    1918:	69766964 	ldmdbvs	r6!, {r2, r5, r6, r8, fp, sp, lr}^
    191c:	00726564 	rsbseq	r6, r2, r4, ror #10
    1920:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    1924:	6d535f54 	ldclvs	15, cr5, [r3, #-336]	; 0xfffffeb0
    1928:	43747261 	cmnmi	r4, #268435462	; 0x10000006
    192c:	4e647261 	cdpmi	2, 6, cr7, cr4, cr1, {3}
    1930:	434b4341 	movtmi	r4, #45889	; 0xb341
    1934:	5500646d 	strpl	r6, [r0, #-1133]	; 0xfffffb93
    1938:	54524153 	ldrbpl	r4, [r2], #-339	; 0xfffffead
    193c:	7465475f 	strbtvc	r4, [r5], #-1887	; 0xfffff8a1
    1940:	67616c46 	strbvs	r6, [r1, -r6, asr #24]!
    1944:	74617453 	strbtvc	r7, [r1], #-1107	; 0xfffffbad
    1948:	55007375 	strpl	r7, [r0, #-885]	; 0xfffffc8b
    194c:	54524153 	ldrbpl	r4, [r2], #-339	; 0xfffffead
    1950:	0054495f 	subseq	r4, r4, pc, asr r9
    1954:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    1958:	6e495f54 	mcrvs	15, 2, r5, cr9, cr4, {2}
    195c:	74537469 	ldrbvc	r7, [r3], #-1129	; 0xfffffb97
    1960:	74637572 	strbtvc	r7, [r3], #-1394	; 0xfffffa8e
    1964:	43435200 	movtmi	r5, #12800	; 0x3200
    1968:	6f6c435f 	svcvs	0x006c435f
    196c:	53736b63 	cmnpl	r3, #101376	; 0x18c00
    1970:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0xfffffe8c
    1974:	53550073 	cmppl	r5, #115	; 0x73
    1978:	5f545241 	svcpl	0x00545241
    197c:	636f6c43 	cmnvs	pc, #17152	; 0x4300
    1980:	696e496b 	stmdbvs	lr!, {r0, r1, r3, r5, r6, r8, fp, lr}^
    1984:	53550074 	cmppl	r5, #116	; 0x74
    1988:	5f545241 	svcpl	0x00545241
    198c:	656b6157 	strbvs	r6, [fp, #-343]!	; 0xfffffea9
    1990:	6f437055 	svcvs	0x00437055
    1994:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    1998:	41535500 	cmpmi	r3, r0, lsl #10
    199c:	485f5452 	ldmdami	pc, {r1, r4, r6, sl, ip, lr}^	; <UNPREDICTABLE>
    19a0:	44666c61 	strbtmi	r6, [r6], #-3169	; 0xfffff39f
    19a4:	656c7075 	strbvs	r7, [ip, #-117]!	; 0xffffff8b
    19a8:	646d4378 	strbtvs	r4, [sp], #-888	; 0xfffffc88
    19ac:	41535500 	cmpmi	r3, r0, lsl #10
    19b0:	535f5452 	cmppl	pc, #1375731712	; 0x52000000
    19b4:	63757274 	cmnvs	r5, #116, 4	; 0x40000007
    19b8:	696e4974 	stmdbvs	lr!, {r2, r4, r5, r6, r8, fp, lr}^
    19bc:	53550074 	cmppl	r5, #116	; 0x74
    19c0:	5f545241 	svcpl	0x00545241
    19c4:	73657250 	cmnvc	r5, #80, 4
    19c8:	656c6163 	strbvs	r6, [ip, #-355]!	; 0xfffffe9d
    19cc:	53550072 	cmppl	r5, #114	; 0x72
    19d0:	5f545241 	svcpl	0x00545241
    19d4:	4c4f5043 	mcrrmi	0, 4, r5, pc, cr3
    19d8:	6d746900 			; <UNDEFINED> instruction: 0x6d746900
    19dc:	006b7361 	rsbeq	r7, fp, r1, ror #6
    19e0:	552f3a43 	strpl	r3, [pc, #-2627]!	; fa5 <startup-0x1ffff05b>
    19e4:	73726573 	cmnvc	r2, #482344960	; 0x1cc00000
    19e8:	6164412f 	cmnvs	r4, pc, lsr #2
    19ec:	4f2f746d 	svcmi	0x002f746d
    19f0:	7244656e 	subvc	r6, r4, #461373440	; 0x1b800000
    19f4:	2f657669 	svccs	0x00657669
    19f8:	756b6f44 	strbvc	r6, [fp, #-3908]!	; 0xfffff0bc
    19fc:	746e656d 	strbtvc	r6, [lr], #-1389	; 0xfffffa93
    1a00:	7469472f 	strbtvc	r4, [r9], #-1839	; 0xfffff8d1
    1a04:	2f627548 	svccs	0x00627548
    1a08:	32544144 	subscc	r4, r4, #68, 2
    1a0c:	4c2d3039 	stcmi	0, cr3, [sp], #-228	; 0xffffff1c
    1a10:	736d7261 	cmnvc	sp, #268435462	; 0x10000006
    1a14:	65747379 	ldrbvs	r7, [r4, #-889]!	; 0xfffffc87
    1a18:	6f6b2f6d 	svcvs	0x006b2f6d
    1a1c:	696c2f64 	stmdbvs	ip!, {r2, r5, r6, r8, r9, sl, fp, sp}^
    1a20:	54532f62 	ldrbpl	r2, [r3], #-3938	; 0xfffff09e
    1a24:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
    1a28:	696c5f34 	stmdbvs	ip!, {r2, r4, r5, r8, r9, sl, fp, ip, lr}^
    1a2c:	54532f62 	ldrbpl	r2, [r3], #-3938	; 0xfffff09e
    1a30:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
    1a34:	5f787834 	svcpl	0x00787834
    1a38:	50647453 	rsbpl	r7, r4, r3, asr r4
    1a3c:	70697265 	rsbvc	r7, r9, r5, ror #4
    1a40:	72445f68 	subvc	r5, r4, #104, 30	; 0x1a0
    1a44:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
    1a48:	6372732f 	cmnvs	r2, #-1140850688	; 0xbc000000
    1a4c:	6d74732f 	ldclvs	3, cr7, [r4, #-188]!	; 0xffffff44
    1a50:	34663233 	strbtcc	r3, [r6], #-563	; 0xfffffdcd
    1a54:	755f7878 	ldrbvc	r7, [pc, #-2168]	; 11e4 <startup-0x1fffee1c>
    1a58:	74726173 	ldrbtvc	r6, [r2], #-371	; 0xfffffe8d
    1a5c:	5500632e 	strpl	r6, [r0, #-814]	; 0xfffffcd2
    1a60:	54524153 	ldrbpl	r4, [r2], #-339	; 0xfffffead
    1a64:	6365525f 	cmnvs	r5, #-268435451	; 0xf0000005
    1a68:	65766965 	ldrbvs	r6, [r6, #-2405]!	; 0xfffff69b
    1a6c:	61746144 	cmnvs	r4, r4, asr #2
    1a70:	61737500 	cmnvs	r3, r0, lsl #10
    1a74:	65727472 	ldrbvs	r7, [r2, #-1138]!	; 0xfffffb8e
    1a78:	Address 0x00001a78 is out of bounds.


Disassembly of section .comment:

00000000 <.comment>:
   0:	3a434347 	bcc	10d0d24 <startup-0x1ef2f2dc>
   4:	4e472820 	cdpmi	8, 4, cr2, cr7, cr0, {1}
   8:	6f542055 	svcvs	0x00542055
   c:	20736c6f 	rsbscs	r6, r3, pc, ror #24
  10:	20726f66 	rsbscs	r6, r2, r6, ror #30
  14:	206d7241 	rsbcs	r7, sp, r1, asr #4
  18:	65626d45 	strbvs	r6, [r2, #-3397]!	; 0xfffff2bb
  1c:	64656464 	strbtvs	r6, [r5], #-1124	; 0xfffffb9c
  20:	6f725020 	svcvs	0x00725020
  24:	73736563 	cmnvc	r3, #415236096	; 0x18c00000
  28:	2073726f 	rsbscs	r7, r3, pc, ror #4
  2c:	30322d37 	eorscc	r2, r2, r7, lsr sp
  30:	712d3731 			; <UNDEFINED> instruction: 0x712d3731
  34:	616d2d34 	cmnvs	sp, r4, lsr sp
  38:	29726f6a 	ldmdbcs	r2!, {r1, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
  3c:	322e3720 	eorcc	r3, lr, #32, 14	; 0x800000
  40:	3220312e 	eorcc	r3, r0, #-2147483637	; 0x8000000b
  44:	30373130 	eorscc	r3, r7, r0, lsr r1
  48:	20343039 	eorscs	r3, r4, r9, lsr r0
  4c:	6c657228 	sfmvs	f7, 2, [r5], #-160	; 0xffffff60
  50:	65736165 	ldrbvs	r6, [r3, #-357]!	; 0xfffffe9b
  54:	415b2029 	cmpmi	fp, r9, lsr #32
  58:	652f4d52 	strvs	r4, [pc, #-3410]!	; fffff30e <GPIO_Ports+0xdfffcb8a>
  5c:	6465626d 	strbtvs	r6, [r5], #-621	; 0xfffffd93
  60:	2d646564 	cfstr64cs	mvdx6, [r4, #-400]!	; 0xfffffe70
  64:	72622d37 	rsbvc	r2, r2, #3520	; 0xdc0
  68:	68636e61 	stmdavs	r3!, {r0, r5, r6, r9, sl, fp, sp, lr}^
  6c:	76657220 	strbtvc	r7, [r5], -r0, lsr #4
  70:	6f697369 	svcvs	0x00697369
  74:	3532206e 	ldrcc	r2, [r2, #-110]!	; 0xffffff92
  78:	34303235 	ldrtcc	r3, [r0], #-565	; 0xfffffdcb
  7c:	Address 0x0000007c is out of bounds.


Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00002b41 	andeq	r2, r0, r1, asr #22
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	00000021 	andeq	r0, r0, r1, lsr #32
  10:	2d533605 	ldclcs	6, cr3, [r3, #-20]	; 0xffffffec
  14:	0c06004d 	stceq	0, cr0, [r6], {77}	; 0x4d
  18:	01094d07 	tsteq	r9, r7, lsl #26
  1c:	01140412 	tsteq	r4, r2, lsl r4
  20:	03170115 	tsteq	r7, #1073741829	; 0x40000005
  24:	01190118 	tsteq	r9, r8, lsl r1
  28:	061e011a 			; <UNDEFINED> instruction: 0x061e011a

Disassembly of section .debug_frame:

00000000 <.debug_frame>:
   0:	0000000c 	andeq	r0, r0, ip
   4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   8:	7c020001 	stcvc	0, cr0, [r2], {1}
   c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  10:	0000001c 	andeq	r0, r0, ip, lsl r0
  14:	00000000 	andeq	r0, r0, r0
  18:	20000010 	andcs	r0, r0, r0, lsl r0
  1c:	00000060 	andeq	r0, r0, r0, rrx
  20:	40080e41 	andmi	r0, r8, r1, asr #28
  24:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  28:	100e4101 	andne	r4, lr, r1, lsl #2
  2c:	00070d41 	andeq	r0, r7, r1, asr #26
  30:	0000001c 	andeq	r0, r0, ip, lsl r0
  34:	00000000 	andeq	r0, r0, r0
  38:	20000070 	andcs	r0, r0, r0, ror r0
  3c:	00000048 	andeq	r0, r0, r8, asr #32
  40:	40080e41 	andmi	r0, r8, r1, asr #28
  44:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  48:	100e4101 	andne	r4, lr, r1, lsl #2
  4c:	00070d41 	andeq	r0, r7, r1, asr #26
  50:	00000018 	andeq	r0, r0, r8, lsl r0
  54:	00000000 	andeq	r0, r0, r0
  58:	200000b8 	strhcs	r0, [r0], -r8
  5c:	00000070 	andeq	r0, r0, r0, ror r0
  60:	40080e41 	andmi	r0, r8, r1, asr #28
  64:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  68:	070d4101 	streq	r4, [sp, -r1, lsl #2]
  6c:	0000001c 	andeq	r0, r0, ip, lsl r0
  70:	00000000 	andeq	r0, r0, r0
  74:	20000128 	andcs	r0, r0, r8, lsr #2
  78:	00000028 	andeq	r0, r0, r8, lsr #32
  7c:	40080e41 	andmi	r0, r8, r1, asr #28
  80:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  84:	100e4101 	andne	r4, lr, r1, lsl #2
  88:	00070d41 	andeq	r0, r7, r1, asr #26
  8c:	00000020 	andeq	r0, r0, r0, lsr #32
  90:	00000000 	andeq	r0, r0, r0
  94:	20000150 	andcs	r0, r0, r0, asr r1
  98:	0000005e 	andeq	r0, r0, lr, asr r0
  9c:	400c0e41 	andmi	r0, ip, r1, asr #28
  a0:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
  a4:	018e4002 	orreq	r4, lr, r2
  a8:	41180e41 	tstmi	r8, r1, asr #28
  ac:	0000070d 	andeq	r0, r0, sp, lsl #14
  b0:	0000001c 	andeq	r0, r0, ip, lsl r0
  b4:	00000000 	andeq	r0, r0, r0
  b8:	200001ae 	andcs	r0, r0, lr, lsr #3
  bc:	0000003e 	andeq	r0, r0, lr, lsr r0
  c0:	40080e41 	andmi	r0, r8, r1, asr #28
  c4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  c8:	180e4101 	stmdane	lr, {r0, r8, lr}
  cc:	00070d41 	andeq	r0, r7, r1, asr #26
  d0:	0000001c 	andeq	r0, r0, ip, lsl r0
  d4:	00000000 	andeq	r0, r0, r0
  d8:	200001ec 	andcs	r0, r0, ip, ror #3
  dc:	00000020 	andeq	r0, r0, r0, lsr #32
  e0:	40080e41 	andmi	r0, r8, r1, asr #28
  e4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  e8:	100e4101 	andne	r4, lr, r1, lsl #2
  ec:	00070d41 	andeq	r0, r7, r1, asr #26
  f0:	0000001c 	andeq	r0, r0, ip, lsl r0
  f4:	00000000 	andeq	r0, r0, r0
  f8:	2000020c 	andcs	r0, r0, ip, lsl #4
  fc:	00000044 	andeq	r0, r0, r4, asr #32
 100:	40080e41 	andmi	r0, r8, r1, asr #28
 104:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 108:	100e4101 	andne	r4, lr, r1, lsl #2
 10c:	00070d41 	andeq	r0, r7, r1, asr #26
 110:	0000001c 	andeq	r0, r0, ip, lsl r0
 114:	00000000 	andeq	r0, r0, r0
 118:	20000250 	andcs	r0, r0, r0, asr r2
 11c:	00000020 	andeq	r0, r0, r0, lsr #32
 120:	40080e41 	andmi	r0, r8, r1, asr #28
 124:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 128:	100e4101 	andne	r4, lr, r1, lsl #2
 12c:	00070d41 	andeq	r0, r7, r1, asr #26
 130:	0000001c 	andeq	r0, r0, ip, lsl r0
 134:	00000000 	andeq	r0, r0, r0
 138:	20000270 	andcs	r0, r0, r0, ror r2
 13c:	0000003c 	andeq	r0, r0, ip, lsr r0
 140:	40080e41 	andmi	r0, r8, r1, asr #28
 144:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 148:	180e4101 	stmdane	lr, {r0, r8, lr}
 14c:	00070d41 	andeq	r0, r7, r1, asr #26
 150:	0000001c 	andeq	r0, r0, ip, lsl r0
 154:	00000000 	andeq	r0, r0, r0
 158:	200002ac 	andcs	r0, r0, ip, lsr #5
 15c:	00000020 	andeq	r0, r0, r0, lsr #32
 160:	40080e41 	andmi	r0, r8, r1, asr #28
 164:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 168:	100e4101 	andne	r4, lr, r1, lsl #2
 16c:	00070d41 	andeq	r0, r7, r1, asr #26
 170:	0000001c 	andeq	r0, r0, ip, lsl r0
 174:	00000000 	andeq	r0, r0, r0
 178:	200002cc 	andcs	r0, r0, ip, asr #5
 17c:	00000028 	andeq	r0, r0, r8, lsr #32
 180:	40080e41 	andmi	r0, r8, r1, asr #28
 184:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 188:	100e4101 	andne	r4, lr, r1, lsl #2
 18c:	00070d41 	andeq	r0, r7, r1, asr #26
 190:	0000001c 	andeq	r0, r0, ip, lsl r0
 194:	00000000 	andeq	r0, r0, r0
 198:	200002f4 	strdcs	r0, [r0], -r4
 19c:	00000020 	andeq	r0, r0, r0, lsr #32
 1a0:	40080e41 	andmi	r0, r8, r1, asr #28
 1a4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 1a8:	100e4101 	andne	r4, lr, r1, lsl #2
 1ac:	00070d41 	andeq	r0, r7, r1, asr #26
 1b0:	0000001c 	andeq	r0, r0, ip, lsl r0
 1b4:	00000000 	andeq	r0, r0, r0
 1b8:	20000314 	andcs	r0, r0, r4, lsl r3
 1bc:	00000030 	andeq	r0, r0, r0, lsr r0
 1c0:	40080e41 	andmi	r0, r8, r1, asr #28
 1c4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 1c8:	180e4101 	stmdane	lr, {r0, r8, lr}
 1cc:	00070d41 	andeq	r0, r7, r1, asr #26
 1d0:	0000001c 	andeq	r0, r0, ip, lsl r0
 1d4:	00000000 	andeq	r0, r0, r0
 1d8:	20000344 	andcs	r0, r0, r4, asr #6
 1dc:	00000020 	andeq	r0, r0, r0, lsr #32
 1e0:	40080e41 	andmi	r0, r8, r1, asr #28
 1e4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 1e8:	100e4101 	andne	r4, lr, r1, lsl #2
 1ec:	00070d41 	andeq	r0, r7, r1, asr #26
 1f0:	0000001c 	andeq	r0, r0, ip, lsl r0
 1f4:	00000000 	andeq	r0, r0, r0
 1f8:	20000364 	andcs	r0, r0, r4, ror #6
 1fc:	00000020 	andeq	r0, r0, r0, lsr #32
 200:	40080e41 	andmi	r0, r8, r1, asr #28
 204:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 208:	100e4101 	andne	r4, lr, r1, lsl #2
 20c:	00070d41 	andeq	r0, r7, r1, asr #26
 210:	0000001c 	andeq	r0, r0, ip, lsl r0
 214:	00000000 	andeq	r0, r0, r0
 218:	20000384 	andcs	r0, r0, r4, lsl #7
 21c:	00000040 	andeq	r0, r0, r0, asr #32
 220:	40080e41 	andmi	r0, r8, r1, asr #28
 224:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 228:	180e4101 	stmdane	lr, {r0, r8, lr}
 22c:	00070d41 	andeq	r0, r7, r1, asr #26
 230:	0000001c 	andeq	r0, r0, ip, lsl r0
 234:	00000000 	andeq	r0, r0, r0
 238:	200003c4 	andcs	r0, r0, r4, asr #7
 23c:	0000003c 	andeq	r0, r0, ip, lsr r0
 240:	40080e41 	andmi	r0, r8, r1, asr #28
 244:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 248:	180e4101 	stmdane	lr, {r0, r8, lr}
 24c:	00070d41 	andeq	r0, r7, r1, asr #26
 250:	0000001c 	andeq	r0, r0, ip, lsl r0
 254:	00000000 	andeq	r0, r0, r0
 258:	20000400 	andcs	r0, r0, r0, lsl #8
 25c:	00000034 	andeq	r0, r0, r4, lsr r0
 260:	40080e41 	andmi	r0, r8, r1, asr #28
 264:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 268:	180e4101 	stmdane	lr, {r0, r8, lr}
 26c:	00070d41 	andeq	r0, r7, r1, asr #26
 270:	00000018 	andeq	r0, r0, r8, lsl r0
 274:	00000000 	andeq	r0, r0, r0
 278:	20000434 	andcs	r0, r0, r4, lsr r4
 27c:	0000001c 	andeq	r0, r0, ip, lsl r0
 280:	40080e41 	andmi	r0, r8, r1, asr #28
 284:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 288:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 28c:	0000001c 	andeq	r0, r0, ip, lsl r0
 290:	00000000 	andeq	r0, r0, r0
 294:	20000450 	andcs	r0, r0, r0, asr r4
 298:	00000034 	andeq	r0, r0, r4, lsr r0
 29c:	40080e41 	andmi	r0, r8, r1, asr #28
 2a0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 2a4:	180e4101 	stmdane	lr, {r0, r8, lr}
 2a8:	00070d41 	andeq	r0, r7, r1, asr #26
 2ac:	0000001c 	andeq	r0, r0, ip, lsl r0
 2b0:	00000000 	andeq	r0, r0, r0
 2b4:	20000484 	andcs	r0, r0, r4, lsl #9
 2b8:	00000038 	andeq	r0, r0, r8, lsr r0
 2bc:	40080e41 	andmi	r0, r8, r1, asr #28
 2c0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 2c4:	180e4101 	stmdane	lr, {r0, r8, lr}
 2c8:	00070d41 	andeq	r0, r7, r1, asr #26
 2cc:	0000001c 	andeq	r0, r0, ip, lsl r0
 2d0:	00000000 	andeq	r0, r0, r0
 2d4:	200004bc 			; <UNDEFINED> instruction: 0x200004bc
 2d8:	0000003c 	andeq	r0, r0, ip, lsr r0
 2dc:	40080e41 	andmi	r0, r8, r1, asr #28
 2e0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 2e4:	180e4101 	stmdane	lr, {r0, r8, lr}
 2e8:	00070d41 	andeq	r0, r7, r1, asr #26
 2ec:	0000001c 	andeq	r0, r0, ip, lsl r0
 2f0:	00000000 	andeq	r0, r0, r0
 2f4:	200004f8 	strdcs	r0, [r0], -r8
 2f8:	00000158 	andeq	r0, r0, r8, asr r1
 2fc:	40080e41 	andmi	r0, r8, r1, asr #28
 300:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 304:	280e4101 	stmdacs	lr, {r0, r8, lr}
 308:	00070d41 	andeq	r0, r7, r1, asr #26
 30c:	0000001c 	andeq	r0, r0, ip, lsl r0
 310:	00000000 	andeq	r0, r0, r0
 314:	20000650 	andcs	r0, r0, r0, asr r6
 318:	00000060 	andeq	r0, r0, r0, rrx
 31c:	40080e41 	andmi	r0, r8, r1, asr #28
 320:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 324:	180e4101 	stmdane	lr, {r0, r8, lr}
 328:	00070d41 	andeq	r0, r7, r1, asr #26
 32c:	0000001c 	andeq	r0, r0, ip, lsl r0
 330:	00000000 	andeq	r0, r0, r0
 334:	200006b0 			; <UNDEFINED> instruction: 0x200006b0
 338:	00000020 	andeq	r0, r0, r0, lsr #32
 33c:	40080e41 	andmi	r0, r8, r1, asr #28
 340:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 344:	100e4101 	andne	r4, lr, r1, lsl #2
 348:	00070d41 	andeq	r0, r7, r1, asr #26
 34c:	0000001c 	andeq	r0, r0, ip, lsl r0
 350:	00000000 	andeq	r0, r0, r0
 354:	200006d0 	ldrdcs	r0, [r0], -r0	; <UNPREDICTABLE>
 358:	00000020 	andeq	r0, r0, r0, lsr #32
 35c:	40080e41 	andmi	r0, r8, r1, asr #28
 360:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 364:	100e4101 	andne	r4, lr, r1, lsl #2
 368:	00070d41 	andeq	r0, r7, r1, asr #26
 36c:	0000001c 	andeq	r0, r0, ip, lsl r0
 370:	00000000 	andeq	r0, r0, r0
 374:	200006f0 	strdcs	r0, [r0], -r0	; <UNPREDICTABLE>
 378:	0000001c 	andeq	r0, r0, ip, lsl r0
 37c:	40080e41 	andmi	r0, r8, r1, asr #28
 380:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 384:	100e4101 	andne	r4, lr, r1, lsl #2
 388:	00070d41 	andeq	r0, r7, r1, asr #26
 38c:	0000001c 	andeq	r0, r0, ip, lsl r0
 390:	00000000 	andeq	r0, r0, r0
 394:	2000070c 	andcs	r0, r0, ip, lsl #14
 398:	0000003c 	andeq	r0, r0, ip, lsr r0
 39c:	40080e41 	andmi	r0, r8, r1, asr #28
 3a0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 3a4:	180e4101 	stmdane	lr, {r0, r8, lr}
 3a8:	00070d41 	andeq	r0, r7, r1, asr #26
 3ac:	0000001c 	andeq	r0, r0, ip, lsl r0
 3b0:	00000000 	andeq	r0, r0, r0
 3b4:	20000748 	andcs	r0, r0, r8, asr #14
 3b8:	0000003c 	andeq	r0, r0, ip, lsr r0
 3bc:	40080e41 	andmi	r0, r8, r1, asr #28
 3c0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 3c4:	180e4101 	stmdane	lr, {r0, r8, lr}
 3c8:	00070d41 	andeq	r0, r7, r1, asr #26
 3cc:	0000001c 	andeq	r0, r0, ip, lsl r0
 3d0:	00000000 	andeq	r0, r0, r0
 3d4:	20000784 	andcs	r0, r0, r4, lsl #15
 3d8:	0000003c 	andeq	r0, r0, ip, lsr r0
 3dc:	40080e41 	andmi	r0, r8, r1, asr #28
 3e0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 3e4:	180e4101 	stmdane	lr, {r0, r8, lr}
 3e8:	00070d41 	andeq	r0, r7, r1, asr #26
 3ec:	0000001c 	andeq	r0, r0, ip, lsl r0
 3f0:	00000000 	andeq	r0, r0, r0
 3f4:	200007c0 	andcs	r0, r0, r0, asr #15
 3f8:	00000040 	andeq	r0, r0, r0, asr #32
 3fc:	40080e41 	andmi	r0, r8, r1, asr #28
 400:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 404:	180e4101 	stmdane	lr, {r0, r8, lr}
 408:	00070d41 	andeq	r0, r7, r1, asr #26
 40c:	0000001c 	andeq	r0, r0, ip, lsl r0
 410:	00000000 	andeq	r0, r0, r0
 414:	20000800 	andcs	r0, r0, r0, lsl #16
 418:	0000003c 	andeq	r0, r0, ip, lsr r0
 41c:	40080e41 	andmi	r0, r8, r1, asr #28
 420:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 424:	180e4101 	stmdane	lr, {r0, r8, lr}
 428:	00070d41 	andeq	r0, r7, r1, asr #26
 42c:	0000001c 	andeq	r0, r0, ip, lsl r0
 430:	00000000 	andeq	r0, r0, r0
 434:	2000083c 	andcs	r0, r0, ip, lsr r8
 438:	0000001c 	andeq	r0, r0, ip, lsl r0
 43c:	40080e41 	andmi	r0, r8, r1, asr #28
 440:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 444:	100e4101 	andne	r4, lr, r1, lsl #2
 448:	00070d41 	andeq	r0, r7, r1, asr #26
 44c:	0000001c 	andeq	r0, r0, ip, lsl r0
 450:	00000000 	andeq	r0, r0, r0
 454:	20000858 	andcs	r0, r0, r8, asr r8
 458:	00000040 	andeq	r0, r0, r0, asr #32
 45c:	40080e41 	andmi	r0, r8, r1, asr #28
 460:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 464:	100e4101 	andne	r4, lr, r1, lsl #2
 468:	00070d41 	andeq	r0, r7, r1, asr #26
 46c:	0000001c 	andeq	r0, r0, ip, lsl r0
 470:	00000000 	andeq	r0, r0, r0
 474:	20000898 	mulcs	r0, r8, r8
 478:	00000040 	andeq	r0, r0, r0, asr #32
 47c:	40080e41 	andmi	r0, r8, r1, asr #28
 480:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 484:	100e4101 	andne	r4, lr, r1, lsl #2
 488:	00070d41 	andeq	r0, r7, r1, asr #26
 48c:	0000001c 	andeq	r0, r0, ip, lsl r0
 490:	00000000 	andeq	r0, r0, r0
 494:	200008d8 	ldrdcs	r0, [r0], -r8
 498:	00000040 	andeq	r0, r0, r0, asr #32
 49c:	40080e41 	andmi	r0, r8, r1, asr #28
 4a0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 4a4:	100e4101 	andne	r4, lr, r1, lsl #2
 4a8:	00070d41 	andeq	r0, r7, r1, asr #26
 4ac:	0000001c 	andeq	r0, r0, ip, lsl r0
 4b0:	00000000 	andeq	r0, r0, r0
 4b4:	20000918 	andcs	r0, r0, r8, lsl r9
 4b8:	00000040 	andeq	r0, r0, r0, asr #32
 4bc:	40080e41 	andmi	r0, r8, r1, asr #28
 4c0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 4c4:	100e4101 	andne	r4, lr, r1, lsl #2
 4c8:	00070d41 	andeq	r0, r7, r1, asr #26
 4cc:	0000001c 	andeq	r0, r0, ip, lsl r0
 4d0:	00000000 	andeq	r0, r0, r0
 4d4:	20000958 	andcs	r0, r0, r8, asr r9
 4d8:	00000040 	andeq	r0, r0, r0, asr #32
 4dc:	40080e41 	andmi	r0, r8, r1, asr #28
 4e0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 4e4:	100e4101 	andne	r4, lr, r1, lsl #2
 4e8:	00070d41 	andeq	r0, r7, r1, asr #26
 4ec:	0000001c 	andeq	r0, r0, ip, lsl r0
 4f0:	00000000 	andeq	r0, r0, r0
 4f4:	20000998 	mulcs	r0, r8, r9
 4f8:	00000040 	andeq	r0, r0, r0, asr #32
 4fc:	40080e41 	andmi	r0, r8, r1, asr #28
 500:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 504:	100e4101 	andne	r4, lr, r1, lsl #2
 508:	00070d41 	andeq	r0, r7, r1, asr #26
 50c:	0000001c 	andeq	r0, r0, ip, lsl r0
 510:	00000000 	andeq	r0, r0, r0
 514:	200009d8 	ldrdcs	r0, [r0], -r8
 518:	00000040 	andeq	r0, r0, r0, asr #32
 51c:	40080e41 	andmi	r0, r8, r1, asr #28
 520:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 524:	100e4101 	andne	r4, lr, r1, lsl #2
 528:	00070d41 	andeq	r0, r7, r1, asr #26
 52c:	0000001c 	andeq	r0, r0, ip, lsl r0
 530:	00000000 	andeq	r0, r0, r0
 534:	20000a18 	andcs	r0, r0, r8, lsl sl
 538:	00000040 	andeq	r0, r0, r0, asr #32
 53c:	40080e41 	andmi	r0, r8, r1, asr #28
 540:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 544:	100e4101 	andne	r4, lr, r1, lsl #2
 548:	00070d41 	andeq	r0, r7, r1, asr #26
 54c:	0000001c 	andeq	r0, r0, ip, lsl r0
 550:	00000000 	andeq	r0, r0, r0
 554:	20000a58 	andcs	r0, r0, r8, asr sl
 558:	00000040 	andeq	r0, r0, r0, asr #32
 55c:	40080e41 	andmi	r0, r8, r1, asr #28
 560:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 564:	100e4101 	andne	r4, lr, r1, lsl #2
 568:	00070d41 	andeq	r0, r7, r1, asr #26
 56c:	0000001c 	andeq	r0, r0, ip, lsl r0
 570:	00000000 	andeq	r0, r0, r0
 574:	20000a98 	mulcs	r0, r8, sl
 578:	00000040 	andeq	r0, r0, r0, asr #32
 57c:	40080e41 	andmi	r0, r8, r1, asr #28
 580:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 584:	100e4101 	andne	r4, lr, r1, lsl #2
 588:	00070d41 	andeq	r0, r7, r1, asr #26
 58c:	0000001c 	andeq	r0, r0, ip, lsl r0
 590:	00000000 	andeq	r0, r0, r0
 594:	20000ad8 	ldrdcs	r0, [r0], -r8
 598:	00000040 	andeq	r0, r0, r0, asr #32
 59c:	40080e41 	andmi	r0, r8, r1, asr #28
 5a0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 5a4:	100e4101 	andne	r4, lr, r1, lsl #2
 5a8:	00070d41 	andeq	r0, r7, r1, asr #26
 5ac:	0000001c 	andeq	r0, r0, ip, lsl r0
 5b0:	00000000 	andeq	r0, r0, r0
 5b4:	20000b18 	andcs	r0, r0, r8, lsl fp
 5b8:	00000040 	andeq	r0, r0, r0, asr #32
 5bc:	40080e41 	andmi	r0, r8, r1, asr #28
 5c0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 5c4:	100e4101 	andne	r4, lr, r1, lsl #2
 5c8:	00070d41 	andeq	r0, r7, r1, asr #26
 5cc:	0000001c 	andeq	r0, r0, ip, lsl r0
 5d0:	00000000 	andeq	r0, r0, r0
 5d4:	20000b58 	andcs	r0, r0, r8, asr fp
 5d8:	00000040 	andeq	r0, r0, r0, asr #32
 5dc:	40080e41 	andmi	r0, r8, r1, asr #28
 5e0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 5e4:	100e4101 	andne	r4, lr, r1, lsl #2
 5e8:	00070d41 	andeq	r0, r7, r1, asr #26
 5ec:	0000001c 	andeq	r0, r0, ip, lsl r0
 5f0:	00000000 	andeq	r0, r0, r0
 5f4:	20000b98 	mulcs	r0, r8, fp
 5f8:	00000040 	andeq	r0, r0, r0, asr #32
 5fc:	40080e41 	andmi	r0, r8, r1, asr #28
 600:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 604:	100e4101 	andne	r4, lr, r1, lsl #2
 608:	00070d41 	andeq	r0, r7, r1, asr #26
 60c:	0000001c 	andeq	r0, r0, ip, lsl r0
 610:	00000000 	andeq	r0, r0, r0
 614:	20000bd8 	ldrdcs	r0, [r0], -r8
 618:	00000040 	andeq	r0, r0, r0, asr #32
 61c:	40080e41 	andmi	r0, r8, r1, asr #28
 620:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 624:	100e4101 	andne	r4, lr, r1, lsl #2
 628:	00070d41 	andeq	r0, r7, r1, asr #26
 62c:	0000001c 	andeq	r0, r0, ip, lsl r0
 630:	00000000 	andeq	r0, r0, r0
 634:	20000c18 	andcs	r0, r0, r8, lsl ip
 638:	0000003c 	andeq	r0, r0, ip, lsr r0
 63c:	40080e41 	andmi	r0, r8, r1, asr #28
 640:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 644:	100e4101 	andne	r4, lr, r1, lsl #2
 648:	00070d41 	andeq	r0, r7, r1, asr #26
 64c:	0000001c 	andeq	r0, r0, ip, lsl r0
 650:	00000000 	andeq	r0, r0, r0
 654:	20000c54 	andcs	r0, r0, r4, asr ip
 658:	00000050 	andeq	r0, r0, r0, asr r0
 65c:	40080e41 	andmi	r0, r8, r1, asr #28
 660:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 664:	100e4101 	andne	r4, lr, r1, lsl #2
 668:	00070d41 	andeq	r0, r7, r1, asr #26
 66c:	0000001c 	andeq	r0, r0, ip, lsl r0
 670:	00000000 	andeq	r0, r0, r0
 674:	20000ca4 	andcs	r0, r0, r4, lsr #25
 678:	00000084 	andeq	r0, r0, r4, lsl #1
 67c:	40080e41 	andmi	r0, r8, r1, asr #28
 680:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 684:	200e4101 	andcs	r4, lr, r1, lsl #2
 688:	00070d41 	andeq	r0, r7, r1, asr #26
 68c:	00000018 	andeq	r0, r0, r8, lsl r0
 690:	00000000 	andeq	r0, r0, r0
 694:	20000d28 	andcs	r0, r0, r8, lsr #26
 698:	0000001c 	andeq	r0, r0, ip, lsl r0
 69c:	40080e41 	andmi	r0, r8, r1, asr #28
 6a0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 6a4:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 6a8:	0000001c 	andeq	r0, r0, ip, lsl r0
 6ac:	00000000 	andeq	r0, r0, r0
 6b0:	20000d44 	andcs	r0, r0, r4, asr #26
 6b4:	00000044 	andeq	r0, r0, r4, asr #32
 6b8:	40080e41 	andmi	r0, r8, r1, asr #28
 6bc:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 6c0:	180e4101 	stmdane	lr, {r0, r8, lr}
 6c4:	00070d41 	andeq	r0, r7, r1, asr #26
 6c8:	0000001c 	andeq	r0, r0, ip, lsl r0
 6cc:	00000000 	andeq	r0, r0, r0
 6d0:	20000d88 	andcs	r0, r0, r8, lsl #27
 6d4:	00000020 	andeq	r0, r0, r0, lsr #32
 6d8:	40080e41 	andmi	r0, r8, r1, asr #28
 6dc:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 6e0:	100e4101 	andne	r4, lr, r1, lsl #2
 6e4:	00070d41 	andeq	r0, r7, r1, asr #26
 6e8:	0000001c 	andeq	r0, r0, ip, lsl r0
 6ec:	00000000 	andeq	r0, r0, r0
 6f0:	20000da8 	andcs	r0, r0, r8, lsr #27
 6f4:	000001c8 	andeq	r0, r0, r8, asr #3
 6f8:	40080e41 	andmi	r0, r8, r1, asr #28
 6fc:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 700:	100e4101 	andne	r4, lr, r1, lsl #2
 704:	00070d41 	andeq	r0, r7, r1, asr #26
 708:	0000000c 	andeq	r0, r0, ip
 70c:	00000000 	andeq	r0, r0, r0
 710:	20000000 	andcs	r0, r0, r0
 714:	0000000c 	andeq	r0, r0, ip
 718:	00000018 	andeq	r0, r0, r8, lsl r0
 71c:	00000000 	andeq	r0, r0, r0
 720:	20000f70 	andcs	r0, r0, r0, ror pc
 724:	00000018 	andeq	r0, r0, r8, lsl r0
 728:	40080e41 	andmi	r0, r8, r1, asr #28
 72c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 730:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 734:	0000001c 	andeq	r0, r0, ip, lsl r0
 738:	00000000 	andeq	r0, r0, r0
 73c:	20000f88 	andcs	r0, r0, r8, lsl #31
 740:	00000038 	andeq	r0, r0, r8, lsr r0
 744:	40080e41 	andmi	r0, r8, r1, asr #28
 748:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 74c:	100e4101 	andne	r4, lr, r1, lsl #2
 750:	00070d41 	andeq	r0, r7, r1, asr #26
 754:	0000001c 	andeq	r0, r0, ip, lsl r0
 758:	00000000 	andeq	r0, r0, r0
 75c:	20000fc0 	andcs	r0, r0, r0, asr #31
 760:	0000002c 	andeq	r0, r0, ip, lsr #32
 764:	40080e41 	andmi	r0, r8, r1, asr #28
 768:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 76c:	180e4101 	stmdane	lr, {r0, r8, lr}
 770:	00070d41 	andeq	r0, r7, r1, asr #26
 774:	00000024 	andeq	r0, r0, r4, lsr #32
 778:	00000000 	andeq	r0, r0, r0
 77c:	20000fec 	andcs	r0, r0, ip, ror #31
 780:	00000450 	andeq	r0, r0, r0, asr r4
 784:	40140e41 	andsmi	r0, r4, r1, asr #28
 788:	85400584 	strbhi	r0, [r0, #-1412]	; 0xfffffa7c
 78c:	03864004 	orreq	r4, r6, #4
 790:	40028740 	andmi	r8, r2, r0, asr #14
 794:	0e41018e 	dvfeqd	f0, f1, #0.5
 798:	070d4168 	streq	r4, [sp, -r8, ror #2]
 79c:	0000000c 	andeq	r0, r0, ip
 7a0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 7a4:	7c020001 	stcvc	0, cr0, [r2], {1}
 7a8:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 7ac:	0000001c 	andeq	r0, r0, ip, lsl r0
 7b0:	0000079c 	muleq	r0, ip, r7
 7b4:	2000143c 	andcs	r1, r0, ip, lsr r4
 7b8:	00000170 	andeq	r0, r0, r0, ror r1
 7bc:	40080e41 	andmi	r0, r8, r1, asr #28
 7c0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 7c4:	100e4101 	andne	r4, lr, r1, lsl #2
 7c8:	00070d41 	andeq	r0, r7, r1, asr #26
 7cc:	0000001c 	andeq	r0, r0, ip, lsl r0
 7d0:	0000079c 	muleq	r0, ip, r7
 7d4:	200015ac 	andcs	r1, r0, ip, lsr #11
 7d8:	00000118 	andeq	r0, r0, r8, lsl r1
 7dc:	40080e41 	andmi	r0, r8, r1, asr #28
 7e0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 7e4:	200e4101 	andcs	r4, lr, r1, lsl #2
 7e8:	00070d41 	andeq	r0, r7, r1, asr #26
 7ec:	0000001c 	andeq	r0, r0, ip, lsl r0
 7f0:	0000079c 	muleq	r0, ip, r7
 7f4:	200016c4 	andcs	r1, r0, r4, asr #13
 7f8:	00000034 	andeq	r0, r0, r4, lsr r0
 7fc:	40080e41 	andmi	r0, r8, r1, asr #28
 800:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 804:	100e4101 	andne	r4, lr, r1, lsl #2
 808:	00070d41 	andeq	r0, r7, r1, asr #26
 80c:	0000001c 	andeq	r0, r0, ip, lsl r0
 810:	0000079c 	muleq	r0, ip, r7
 814:	200016f8 	strdcs	r1, [r0], -r8
 818:	00000046 	andeq	r0, r0, r6, asr #32
 81c:	40080e41 	andmi	r0, r8, r1, asr #28
 820:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 824:	180e4101 	stmdane	lr, {r0, r8, lr}
 828:	00070d41 	andeq	r0, r7, r1, asr #26
 82c:	0000001c 	andeq	r0, r0, ip, lsl r0
 830:	0000079c 	muleq	r0, ip, r7
 834:	2000173e 	andcs	r1, r0, lr, lsr r7
 838:	00000042 	andeq	r0, r0, r2, asr #32
 83c:	40080e41 	andmi	r0, r8, r1, asr #28
 840:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 844:	180e4101 	stmdane	lr, {r0, r8, lr}
 848:	00070d41 	andeq	r0, r7, r1, asr #26
 84c:	0000001c 	andeq	r0, r0, ip, lsl r0
 850:	0000079c 	muleq	r0, ip, r7
 854:	20001780 	andcs	r1, r0, r0, lsl #15
 858:	00000016 	andeq	r0, r0, r6, lsl r0
 85c:	40080e41 	andmi	r0, r8, r1, asr #28
 860:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 864:	100e4101 	andne	r4, lr, r1, lsl #2
 868:	00070d41 	andeq	r0, r7, r1, asr #26
 86c:	0000001c 	andeq	r0, r0, ip, lsl r0
 870:	0000079c 	muleq	r0, ip, r7
 874:	20001796 	mulcs	r0, r6, r7
 878:	00000042 	andeq	r0, r0, r2, asr #32
 87c:	40080e41 	andmi	r0, r8, r1, asr #28
 880:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 884:	180e4101 	stmdane	lr, {r0, r8, lr}
 888:	00070d41 	andeq	r0, r7, r1, asr #26
 88c:	0000001c 	andeq	r0, r0, ip, lsl r0
 890:	0000079c 	muleq	r0, ip, r7
 894:	200017d8 	ldrdcs	r1, [r0], -r8
 898:	00000016 	andeq	r0, r0, r6, lsl r0
 89c:	40080e41 	andmi	r0, r8, r1, asr #28
 8a0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 8a4:	100e4101 	andne	r4, lr, r1, lsl #2
 8a8:	00070d41 	andeq	r0, r7, r1, asr #26
 8ac:	0000001c 	andeq	r0, r0, ip, lsl r0
 8b0:	0000079c 	muleq	r0, ip, r7
 8b4:	200017ee 	andcs	r1, r0, lr, ror #15
 8b8:	0000001e 	andeq	r0, r0, lr, lsl r0
 8bc:	40080e41 	andmi	r0, r8, r1, asr #28
 8c0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 8c4:	100e4101 	andne	r4, lr, r1, lsl #2
 8c8:	00070d41 	andeq	r0, r7, r1, asr #26
 8cc:	0000001c 	andeq	r0, r0, ip, lsl r0
 8d0:	0000079c 	muleq	r0, ip, r7
 8d4:	2000180c 	andcs	r1, r0, ip, lsl #16
 8d8:	0000001e 	andeq	r0, r0, lr, lsl r0
 8dc:	40080e41 	andmi	r0, r8, r1, asr #28
 8e0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 8e4:	100e4101 	andne	r4, lr, r1, lsl #2
 8e8:	00070d41 	andeq	r0, r7, r1, asr #26
 8ec:	0000001c 	andeq	r0, r0, ip, lsl r0
 8f0:	0000079c 	muleq	r0, ip, r7
 8f4:	2000182a 	andcs	r1, r0, sl, lsr #16
 8f8:	0000003a 	andeq	r0, r0, sl, lsr r0
 8fc:	40080e41 	andmi	r0, r8, r1, asr #28
 900:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 904:	100e4101 	andne	r4, lr, r1, lsl #2
 908:	00070d41 	andeq	r0, r7, r1, asr #26
 90c:	0000001c 	andeq	r0, r0, ip, lsl r0
 910:	0000079c 	muleq	r0, ip, r7
 914:	20001864 	andcs	r1, r0, r4, ror #16
 918:	0000001e 	andeq	r0, r0, lr, lsl r0
 91c:	40080e41 	andmi	r0, r8, r1, asr #28
 920:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 924:	100e4101 	andne	r4, lr, r1, lsl #2
 928:	00070d41 	andeq	r0, r7, r1, asr #26
 92c:	0000001c 	andeq	r0, r0, ip, lsl r0
 930:	0000079c 	muleq	r0, ip, r7
 934:	20001882 	andcs	r1, r0, r2, lsl #17
 938:	00000024 	andeq	r0, r0, r4, lsr #32
 93c:	40080e41 	andmi	r0, r8, r1, asr #28
 940:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 944:	100e4101 	andne	r4, lr, r1, lsl #2
 948:	00070d41 	andeq	r0, r7, r1, asr #26
 94c:	0000001c 	andeq	r0, r0, ip, lsl r0
 950:	0000079c 	muleq	r0, ip, r7
 954:	200018a6 	andcs	r1, r0, r6, lsr #17
 958:	000000a4 	andeq	r0, r0, r4, lsr #1
 95c:	40080e41 	andmi	r0, r8, r1, asr #28
 960:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 964:	180e4101 	stmdane	lr, {r0, r8, lr}
 968:	00070d41 	andeq	r0, r7, r1, asr #26
 96c:	0000000c 	andeq	r0, r0, ip
 970:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 974:	7c020001 	stcvc	0, cr0, [r2], {1}
 978:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 97c:	0000001c 	andeq	r0, r0, ip, lsl r0
 980:	0000096c 	andeq	r0, r0, ip, ror #18
 984:	2000194c 	andcs	r1, r0, ip, asr #18
 988:	00000024 	andeq	r0, r0, r4, lsr #32
 98c:	40080e41 	andmi	r0, r8, r1, asr #28
 990:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 994:	100e4101 	andne	r4, lr, r1, lsl #2
 998:	00070d41 	andeq	r0, r7, r1, asr #26
 99c:	00000024 	andeq	r0, r0, r4, lsr #32
 9a0:	0000096c 	andeq	r0, r0, ip, ror #18
 9a4:	20001970 	andcs	r1, r0, r0, ror r9
 9a8:	000000f8 	strdeq	r0, [r0], -r8
 9ac:	40100e41 	andsmi	r0, r0, r1, asr #28
 9b0:	85400484 	strbhi	r0, [r0, #-1156]	; 0xfffffb7c
 9b4:	02874003 	addeq	r4, r7, #3
 9b8:	41018e40 	tstmi	r1, r0, asr #28
 9bc:	0d41200e 	stcleq	0, cr2, [r1, #-56]	; 0xffffffc8
 9c0:	00000007 	andeq	r0, r0, r7
 9c4:	0000001c 	andeq	r0, r0, ip, lsl r0
 9c8:	0000096c 	andeq	r0, r0, ip, ror #18
 9cc:	20001a68 	andcs	r1, r0, r8, ror #20
 9d0:	0000002c 	andeq	r0, r0, ip, lsr #32
 9d4:	40080e41 	andmi	r0, r8, r1, asr #28
 9d8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 9dc:	100e4101 	andne	r4, lr, r1, lsl #2
 9e0:	00070d41 	andeq	r0, r7, r1, asr #26
 9e4:	0000001c 	andeq	r0, r0, ip, lsl r0
 9e8:	0000096c 	andeq	r0, r0, ip, ror #18
 9ec:	20001a94 	mulcs	r0, r4, sl
 9f0:	00000048 	andeq	r0, r0, r8, asr #32
 9f4:	40080e41 	andmi	r0, r8, r1, asr #28
 9f8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 9fc:	100e4101 	andne	r4, lr, r1, lsl #2
 a00:	00070d41 	andeq	r0, r7, r1, asr #26
 a04:	0000001c 	andeq	r0, r0, ip, lsl r0
 a08:	0000096c 	andeq	r0, r0, ip, ror #18
 a0c:	20001adc 	ldrdcs	r1, [r0], -ip
 a10:	00000034 	andeq	r0, r0, r4, lsr r0
 a14:	40080e41 	andmi	r0, r8, r1, asr #28
 a18:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 a1c:	100e4101 	andne	r4, lr, r1, lsl #2
 a20:	00070d41 	andeq	r0, r7, r1, asr #26
 a24:	0000000c 	andeq	r0, r0, ip
 a28:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 a2c:	7c020001 	stcvc	0, cr0, [r2], {1}
 a30:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 a34:	0000001c 	andeq	r0, r0, ip, lsl r0
 a38:	00000a24 	andeq	r0, r0, r4, lsr #20
 a3c:	20001b10 	andcs	r1, r0, r0, lsl fp
 a40:	00000028 	andeq	r0, r0, r8, lsr #32
 a44:	40080e41 	andmi	r0, r8, r1, asr #28
 a48:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 a4c:	100e4101 	andne	r4, lr, r1, lsl #2
 a50:	00070d41 	andeq	r0, r7, r1, asr #26
 a54:	0000001c 	andeq	r0, r0, ip, lsl r0
 a58:	00000a24 	andeq	r0, r0, r4, lsr #20
 a5c:	20001b38 	andcs	r1, r0, r8, lsr fp
 a60:	00000062 	andeq	r0, r0, r2, rrx
 a64:	40080e41 	andmi	r0, r8, r1, asr #28
 a68:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 a6c:	100e4101 	andne	r4, lr, r1, lsl #2
 a70:	00070d41 	andeq	r0, r7, r1, asr #26
 a74:	0000001c 	andeq	r0, r0, ip, lsl r0
 a78:	00000a24 	andeq	r0, r0, r4, lsr #20
 a7c:	20001b9a 	mulcs	r0, sl, fp
 a80:	00000040 	andeq	r0, r0, r0, asr #32
 a84:	40080e41 	andmi	r0, r8, r1, asr #28
 a88:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 a8c:	180e4101 	stmdane	lr, {r0, r8, lr}
 a90:	00070d41 	andeq	r0, r7, r1, asr #26
 a94:	0000001c 	andeq	r0, r0, ip, lsl r0
 a98:	00000a24 	andeq	r0, r0, r4, lsr #20
 a9c:	20001bda 	ldrdcs	r1, [r0], -sl
 aa0:	0000005e 	andeq	r0, r0, lr, asr r0
 aa4:	40080e41 	andmi	r0, r8, r1, asr #28
 aa8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 aac:	100e4101 	andne	r4, lr, r1, lsl #2
 ab0:	00070d41 	andeq	r0, r7, r1, asr #26
 ab4:	0000000c 	andeq	r0, r0, ip
 ab8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 abc:	7c020001 	stcvc	0, cr0, [r2], {1}
 ac0:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 ac4:	0000001c 	andeq	r0, r0, ip, lsl r0
 ac8:	00000ab4 			; <UNDEFINED> instruction: 0x00000ab4
 acc:	20001c38 	andcs	r1, r0, r8, lsr ip
 ad0:	00000130 	andeq	r0, r0, r0, lsr r1
 ad4:	40080e41 	andmi	r0, r8, r1, asr #28
 ad8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 adc:	100e4101 	andne	r4, lr, r1, lsl #2
 ae0:	00070d41 	andeq	r0, r7, r1, asr #26
 ae4:	0000001c 	andeq	r0, r0, ip, lsl r0
 ae8:	00000ab4 			; <UNDEFINED> instruction: 0x00000ab4
 aec:	20001d68 	andcs	r1, r0, r8, ror #26
 af0:	00000194 	muleq	r0, r4, r1
 af4:	40080e41 	andmi	r0, r8, r1, asr #28
 af8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 afc:	300e4101 	andcc	r4, lr, r1, lsl #2
 b00:	00070d41 	andeq	r0, r7, r1, asr #26
 b04:	0000001c 	andeq	r0, r0, ip, lsl r0
 b08:	00000ab4 			; <UNDEFINED> instruction: 0x00000ab4
 b0c:	20001efc 	strdcs	r1, [r0], -ip
 b10:	00000036 	andeq	r0, r0, r6, lsr r0
 b14:	40080e41 	andmi	r0, r8, r1, asr #28
 b18:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 b1c:	100e4101 	andne	r4, lr, r1, lsl #2
 b20:	00070d41 	andeq	r0, r7, r1, asr #26
 b24:	0000001c 	andeq	r0, r0, ip, lsl r0
 b28:	00000ab4 			; <UNDEFINED> instruction: 0x00000ab4
 b2c:	20001f32 	andcs	r1, r0, r2, lsr pc
 b30:	00000056 	andeq	r0, r0, r6, asr r0
 b34:	40080e41 	andmi	r0, r8, r1, asr #28
 b38:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 b3c:	180e4101 	stmdane	lr, {r0, r8, lr}
 b40:	00070d41 	andeq	r0, r7, r1, asr #26
 b44:	0000001c 	andeq	r0, r0, ip, lsl r0
 b48:	00000ab4 			; <UNDEFINED> instruction: 0x00000ab4
 b4c:	20001f88 	andcs	r1, r0, r8, lsl #31
 b50:	00000028 	andeq	r0, r0, r8, lsr #32
 b54:	40080e41 	andmi	r0, r8, r1, asr #28
 b58:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 b5c:	100e4101 	andne	r4, lr, r1, lsl #2
 b60:	00070d41 	andeq	r0, r7, r1, asr #26
 b64:	0000001c 	andeq	r0, r0, ip, lsl r0
 b68:	00000ab4 			; <UNDEFINED> instruction: 0x00000ab4
 b6c:	20001fb0 			; <UNDEFINED> instruction: 0x20001fb0
 b70:	00000048 	andeq	r0, r0, r8, asr #32
 b74:	40080e41 	andmi	r0, r8, r1, asr #28
 b78:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 b7c:	100e4101 	andne	r4, lr, r1, lsl #2
 b80:	00070d41 	andeq	r0, r7, r1, asr #26
 b84:	0000001c 	andeq	r0, r0, ip, lsl r0
 b88:	00000ab4 			; <UNDEFINED> instruction: 0x00000ab4
 b8c:	20001ff8 	strdcs	r1, [r0], -r8
 b90:	0000003a 	andeq	r0, r0, sl, lsr r0
 b94:	40080e41 	andmi	r0, r8, r1, asr #28
 b98:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 b9c:	100e4101 	andne	r4, lr, r1, lsl #2
 ba0:	00070d41 	andeq	r0, r7, r1, asr #26
 ba4:	0000001c 	andeq	r0, r0, ip, lsl r0
 ba8:	00000ab4 			; <UNDEFINED> instruction: 0x00000ab4
 bac:	20002032 	andcs	r2, r0, r2, lsr r0
 bb0:	00000046 	andeq	r0, r0, r6, asr #32
 bb4:	40080e41 	andmi	r0, r8, r1, asr #28
 bb8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 bbc:	100e4101 	andne	r4, lr, r1, lsl #2
 bc0:	00070d41 	andeq	r0, r7, r1, asr #26
 bc4:	0000001c 	andeq	r0, r0, ip, lsl r0
 bc8:	00000ab4 			; <UNDEFINED> instruction: 0x00000ab4
 bcc:	20002078 	andcs	r2, r0, r8, ror r0
 bd0:	00000048 	andeq	r0, r0, r8, asr #32
 bd4:	40080e41 	andmi	r0, r8, r1, asr #28
 bd8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 bdc:	100e4101 	andne	r4, lr, r1, lsl #2
 be0:	00070d41 	andeq	r0, r7, r1, asr #26
 be4:	0000001c 	andeq	r0, r0, ip, lsl r0
 be8:	00000ab4 			; <UNDEFINED> instruction: 0x00000ab4
 bec:	200020c0 	andcs	r2, r0, r0, asr #1
 bf0:	00000024 	andeq	r0, r0, r4, lsr #32
 bf4:	40080e41 	andmi	r0, r8, r1, asr #28
 bf8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 bfc:	100e4101 	andne	r4, lr, r1, lsl #2
 c00:	00070d41 	andeq	r0, r7, r1, asr #26
 c04:	0000001c 	andeq	r0, r0, ip, lsl r0
 c08:	00000ab4 			; <UNDEFINED> instruction: 0x00000ab4
 c0c:	200020e4 	andcs	r2, r0, r4, ror #1
 c10:	0000001c 	andeq	r0, r0, ip, lsl r0
 c14:	40080e41 	andmi	r0, r8, r1, asr #28
 c18:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 c1c:	100e4101 	andne	r4, lr, r1, lsl #2
 c20:	00070d41 	andeq	r0, r7, r1, asr #26
 c24:	0000001c 	andeq	r0, r0, ip, lsl r0
 c28:	00000ab4 			; <UNDEFINED> instruction: 0x00000ab4
 c2c:	20002100 	andcs	r2, r0, r0, lsl #2
 c30:	0000003a 	andeq	r0, r0, sl, lsr r0
 c34:	40080e41 	andmi	r0, r8, r1, asr #28
 c38:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 c3c:	100e4101 	andne	r4, lr, r1, lsl #2
 c40:	00070d41 	andeq	r0, r7, r1, asr #26
 c44:	0000001c 	andeq	r0, r0, ip, lsl r0
 c48:	00000ab4 			; <UNDEFINED> instruction: 0x00000ab4
 c4c:	2000213a 	andcs	r2, r0, sl, lsr r1
 c50:	00000040 	andeq	r0, r0, r0, asr #32
 c54:	40080e41 	andmi	r0, r8, r1, asr #28
 c58:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 c5c:	100e4101 	andne	r4, lr, r1, lsl #2
 c60:	00070d41 	andeq	r0, r7, r1, asr #26
 c64:	0000001c 	andeq	r0, r0, ip, lsl r0
 c68:	00000ab4 			; <UNDEFINED> instruction: 0x00000ab4
 c6c:	2000217a 	andcs	r2, r0, sl, ror r1
 c70:	0000003e 	andeq	r0, r0, lr, lsr r0
 c74:	40080e41 	andmi	r0, r8, r1, asr #28
 c78:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 c7c:	100e4101 	andne	r4, lr, r1, lsl #2
 c80:	00070d41 	andeq	r0, r7, r1, asr #26
 c84:	0000001c 	andeq	r0, r0, ip, lsl r0
 c88:	00000ab4 			; <UNDEFINED> instruction: 0x00000ab4
 c8c:	200021b8 			; <UNDEFINED> instruction: 0x200021b8
 c90:	00000038 	andeq	r0, r0, r8, lsr r0
 c94:	40080e41 	andmi	r0, r8, r1, asr #28
 c98:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 c9c:	100e4101 	andne	r4, lr, r1, lsl #2
 ca0:	00070d41 	andeq	r0, r7, r1, asr #26
 ca4:	0000001c 	andeq	r0, r0, ip, lsl r0
 ca8:	00000ab4 			; <UNDEFINED> instruction: 0x00000ab4
 cac:	200021f0 	strdcs	r2, [r0], -r0
 cb0:	00000048 	andeq	r0, r0, r8, asr #32
 cb4:	40080e41 	andmi	r0, r8, r1, asr #28
 cb8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 cbc:	100e4101 	andne	r4, lr, r1, lsl #2
 cc0:	00070d41 	andeq	r0, r7, r1, asr #26
 cc4:	0000001c 	andeq	r0, r0, ip, lsl r0
 cc8:	00000ab4 			; <UNDEFINED> instruction: 0x00000ab4
 ccc:	20002238 	andcs	r2, r0, r8, lsr r2
 cd0:	00000020 	andeq	r0, r0, r0, lsr #32
 cd4:	40080e41 	andmi	r0, r8, r1, asr #28
 cd8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 cdc:	100e4101 	andne	r4, lr, r1, lsl #2
 ce0:	00070d41 	andeq	r0, r7, r1, asr #26
 ce4:	0000001c 	andeq	r0, r0, ip, lsl r0
 ce8:	00000ab4 			; <UNDEFINED> instruction: 0x00000ab4
 cec:	20002258 	andcs	r2, r0, r8, asr r2
 cf0:	00000040 	andeq	r0, r0, r0, asr #32
 cf4:	40080e41 	andmi	r0, r8, r1, asr #28
 cf8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 cfc:	100e4101 	andne	r4, lr, r1, lsl #2
 d00:	00070d41 	andeq	r0, r7, r1, asr #26
 d04:	0000001c 	andeq	r0, r0, ip, lsl r0
 d08:	00000ab4 			; <UNDEFINED> instruction: 0x00000ab4
 d0c:	20002298 	mulcs	r0, r8, r2
 d10:	0000003e 	andeq	r0, r0, lr, lsr r0
 d14:	40080e41 	andmi	r0, r8, r1, asr #28
 d18:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 d1c:	100e4101 	andne	r4, lr, r1, lsl #2
 d20:	00070d41 	andeq	r0, r7, r1, asr #26
 d24:	0000001c 	andeq	r0, r0, ip, lsl r0
 d28:	00000ab4 			; <UNDEFINED> instruction: 0x00000ab4
 d2c:	200022d6 	ldrdcs	r2, [r0], -r6
 d30:	00000040 	andeq	r0, r0, r0, asr #32
 d34:	40080e41 	andmi	r0, r8, r1, asr #28
 d38:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 d3c:	100e4101 	andne	r4, lr, r1, lsl #2
 d40:	00070d41 	andeq	r0, r7, r1, asr #26
 d44:	0000001c 	andeq	r0, r0, ip, lsl r0
 d48:	00000ab4 			; <UNDEFINED> instruction: 0x00000ab4
 d4c:	20002316 	andcs	r2, r0, r6, lsl r3
 d50:	00000040 	andeq	r0, r0, r0, asr #32
 d54:	40080e41 	andmi	r0, r8, r1, asr #28
 d58:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 d5c:	100e4101 	andne	r4, lr, r1, lsl #2
 d60:	00070d41 	andeq	r0, r7, r1, asr #26
 d64:	0000001c 	andeq	r0, r0, ip, lsl r0
 d68:	00000ab4 			; <UNDEFINED> instruction: 0x00000ab4
 d6c:	20002356 	andcs	r2, r0, r6, asr r3
 d70:	00000038 	andeq	r0, r0, r8, lsr r0
 d74:	40080e41 	andmi	r0, r8, r1, asr #28
 d78:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 d7c:	100e4101 	andne	r4, lr, r1, lsl #2
 d80:	00070d41 	andeq	r0, r7, r1, asr #26
 d84:	0000001c 	andeq	r0, r0, ip, lsl r0
 d88:	00000ab4 			; <UNDEFINED> instruction: 0x00000ab4
 d8c:	2000238e 	andcs	r2, r0, lr, lsl #7
 d90:	00000040 	andeq	r0, r0, r0, asr #32
 d94:	40080e41 	andmi	r0, r8, r1, asr #28
 d98:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 d9c:	100e4101 	andne	r4, lr, r1, lsl #2
 da0:	00070d41 	andeq	r0, r7, r1, asr #26
 da4:	0000001c 	andeq	r0, r0, ip, lsl r0
 da8:	00000ab4 			; <UNDEFINED> instruction: 0x00000ab4
 dac:	200023ce 	andcs	r2, r0, lr, asr #7
 db0:	00000052 	andeq	r0, r0, r2, asr r0
 db4:	40080e41 	andmi	r0, r8, r1, asr #28
 db8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 dbc:	100e4101 	andne	r4, lr, r1, lsl #2
 dc0:	00070d41 	andeq	r0, r7, r1, asr #26
 dc4:	0000001c 	andeq	r0, r0, ip, lsl r0
 dc8:	00000ab4 			; <UNDEFINED> instruction: 0x00000ab4
 dcc:	20002420 	andcs	r2, r0, r0, lsr #8
 dd0:	0000009a 	muleq	r0, sl, r0
 dd4:	40080e41 	andmi	r0, r8, r1, asr #28
 dd8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 ddc:	200e4101 	andcs	r4, lr, r1, lsl #2
 de0:	00070d41 	andeq	r0, r7, r1, asr #26
 de4:	0000001c 	andeq	r0, r0, ip, lsl r0
 de8:	00000ab4 			; <UNDEFINED> instruction: 0x00000ab4
 dec:	200024ba 			; <UNDEFINED> instruction: 0x200024ba
 df0:	00000048 	andeq	r0, r0, r8, asr #32
 df4:	40080e41 	andmi	r0, r8, r1, asr #28
 df8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 dfc:	180e4101 	stmdane	lr, {r0, r8, lr}
 e00:	00070d41 	andeq	r0, r7, r1, asr #26
 e04:	0000001c 	andeq	r0, r0, ip, lsl r0
 e08:	00000ab4 			; <UNDEFINED> instruction: 0x00000ab4
 e0c:	20002502 	andcs	r2, r0, r2, lsl #10
 e10:	00000022 	andeq	r0, r0, r2, lsr #32
 e14:	40080e41 	andmi	r0, r8, r1, asr #28
 e18:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 e1c:	100e4101 	andne	r4, lr, r1, lsl #2
 e20:	00070d41 	andeq	r0, r7, r1, asr #26
 e24:	0000001c 	andeq	r0, r0, ip, lsl r0
 e28:	00000ab4 			; <UNDEFINED> instruction: 0x00000ab4
 e2c:	20002524 	andcs	r2, r0, r4, lsr #10
 e30:	000000ca 	andeq	r0, r0, sl, asr #1
 e34:	40080e41 	andmi	r0, r8, r1, asr #28
 e38:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 e3c:	200e4101 	andcs	r4, lr, r1, lsl #2
 e40:	00070d41 	andeq	r0, r7, r1, asr #26
 e44:	0000001c 	andeq	r0, r0, ip, lsl r0
 e48:	00000ab4 			; <UNDEFINED> instruction: 0x00000ab4
 e4c:	200025ee 	andcs	r2, r0, lr, ror #11
 e50:	00000048 	andeq	r0, r0, r8, asr #32
 e54:	40080e41 	andmi	r0, r8, r1, asr #28
 e58:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 e5c:	180e4101 	stmdane	lr, {r0, r8, lr}
 e60:	00070d41 	andeq	r0, r7, r1, asr #26
 e64:	0000000c 	andeq	r0, r0, ip
 e68:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 e6c:	7c010001 	stcvc	0, cr0, [r1], {1}
 e70:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 e74:	0000000c 	andeq	r0, r0, ip
 e78:	00000e64 	andeq	r0, r0, r4, ror #28
 e7c:	20002639 	andcs	r2, r0, r9, lsr r6
 e80:	0000010a 	andeq	r0, r0, sl, lsl #2
