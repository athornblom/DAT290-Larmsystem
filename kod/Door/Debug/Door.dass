
./Debug/Door.elf:     file format elf32-littlearm


Disassembly of section .text:

20000000 <startup>:
#include "door_can.h"
void startup(void) __attribute__((naked)) __attribute__((section(".start_section")));

void startup(void)
{
	__asm volatile(
20000000:	4802      	ldr	r0, [pc, #8]	; (2000000c <_exit+0x4>)
20000002:	4685      	mov	sp, r0
20000004:	f000 fef2 	bl	20000dec <main>

20000008 <_exit>:
20000008:	e7fe      	b.n	20000008 <_exit>
		" LDR R0,=0x2001C000\n" /* set stack */
		" MOV SP,R0\n"
		" BL main\n"   /* call main */
		"_exit: B .\n" /* never return */
	);
}
2000000a:	46c0      	nop			; (mov r8, r8)
2000000c:	2001c000 	andcs	ip, r1, r0

20000010 <init_rng>:
#include "door_can.h"

//======================================== Slumptals generator CAN =========================================
void init_rng(void){
20000010:	b580      	push	{r7, lr}
20000012:	af00      	add	r7, sp, #0
	RCC_AHB2PeriphClockCmd(RCC_AHB2Periph_RNG, ENABLE);
20000014:	2101      	movs	r1, #1
20000016:	2040      	movs	r0, #64	; 0x40
20000018:	f003 fb4c 	bl	200036b4 <RCC_AHB2PeriphClockCmd>
    RNG_Cmd(ENABLE);
2000001c:	2001      	movs	r0, #1
2000001e:	f000 ff76 	bl	20000f0e <RNG_Cmd>
}
20000022:	46c0      	nop			; (mov r8, r8)
20000024:	46bd      	mov	sp, r7
20000026:	bd80      	pop	{r7, pc}

20000028 <idAssign_Handler>:

void idAssign_Handler(CanRxMsg* msg){
20000028:	b580      	push	{r7, lr}
2000002a:	b084      	sub	sp, #16
2000002c:	af00      	add	r7, sp, #0
2000002e:	6078      	str	r0, [r7, #4]
		uint32_t rndid = decode_tempID(msg);
20000030:	687b      	ldr	r3, [r7, #4]
20000032:	0018      	movs	r0, r3
20000034:	f000 faa1 	bl	2000057a <decode_tempID>
20000038:	0003      	movs	r3, r0
2000003a:	60fb      	str	r3, [r7, #12]
		if(rndid == id){
2000003c:	4b09      	ldr	r3, [pc, #36]	; (20000064 <idAssign_Handler+0x3c>)
2000003e:	681b      	ldr	r3, [r3, #0]
20000040:	68fa      	ldr	r2, [r7, #12]
20000042:	429a      	cmp	r2, r3
20000044:	d10a      	bne.n	2000005c <idAssign_Handler+0x34>
			id = decode_ID(msg);
20000046:	687b      	ldr	r3, [r7, #4]
20000048:	0018      	movs	r0, r3
2000004a:	f000 fab3 	bl	200005b4 <decode_ID>
2000004e:	0003      	movs	r3, r0
20000050:	001a      	movs	r2, r3
20000052:	4b04      	ldr	r3, [pc, #16]	; (20000064 <idAssign_Handler+0x3c>)
20000054:	601a      	str	r2, [r3, #0]
			nocid = 0;
20000056:	4b04      	ldr	r3, [pc, #16]	; (20000068 <idAssign_Handler+0x40>)
20000058:	2200      	movs	r2, #0
2000005a:	701a      	strb	r2, [r3, #0]

		}
	}
2000005c:	46c0      	nop			; (mov r8, r8)
2000005e:	46bd      	mov	sp, r7
20000060:	b004      	add	sp, #16
20000062:	bd80      	pop	{r7, pc}
20000064:	20003e08 	andcs	r3, r0, r8, lsl #28
20000068:	20003ef4 	strdcs	r3, [r0], -r4

2000006c <getId>:

void getId (int nDoors){
2000006c:	b5f0      	push	{r4, r5, r6, r7, lr}
2000006e:	b08f      	sub	sp, #60	; 0x3c
20000070:	af02      	add	r7, sp, #8
20000072:	6078      	str	r0, [r7, #4]
    CANFilter filter = empty_mask;
20000074:	2300      	movs	r3, #0
20000076:	62bb      	str	r3, [r7, #40]	; 0x28
    CANFilter mask = empty_mask;
20000078:	2300      	movs	r3, #0
2000007a:	627b      	str	r3, [r7, #36]	; 0x24

    //används för omvandling
    Header header = empty_header;
2000007c:	2300      	movs	r3, #0
2000007e:	623b      	str	r3, [r7, #32]

    //skriver mask
    mask.IDE = 1;
20000080:	2024      	movs	r0, #36	; 0x24
20000082:	183b      	adds	r3, r7, r0
20000084:	781a      	ldrb	r2, [r3, #0]
20000086:	2104      	movs	r1, #4
20000088:	430a      	orrs	r2, r1
2000008a:	701a      	strb	r2, [r3, #0]
    mask.RTR = 1;
2000008c:	183b      	adds	r3, r7, r0
2000008e:	781a      	ldrb	r2, [r3, #0]
20000090:	2102      	movs	r1, #2
20000092:	430a      	orrs	r2, r1
20000094:	701a      	strb	r2, [r3, #0]
    header.msgType = ~0;
20000096:	2023      	movs	r0, #35	; 0x23
20000098:	183b      	adds	r3, r7, r0
2000009a:	781a      	ldrb	r2, [r3, #0]
2000009c:	211c      	movs	r1, #28
2000009e:	430a      	orrs	r2, r1
200000a0:	701a      	strb	r2, [r3, #0]
    header.ID = ~0;
200000a2:	2422      	movs	r4, #34	; 0x22
200000a4:	193b      	adds	r3, r7, r4
200000a6:	881a      	ldrh	r2, [r3, #0]
200000a8:	21fe      	movs	r1, #254	; 0xfe
200000aa:	0049      	lsls	r1, r1, #1
200000ac:	430a      	orrs	r2, r1
200000ae:	801a      	strh	r2, [r3, #0]
    header.toCentral = ~0;
200000b0:	183b      	adds	r3, r7, r0
200000b2:	781a      	ldrb	r2, [r3, #0]
200000b4:	2102      	movs	r1, #2
200000b6:	430a      	orrs	r2, r1
200000b8:	701a      	strb	r2, [r3, #0]
    HEADERtoUINT32(header, mask.ID);
200000ba:	2520      	movs	r5, #32
200000bc:	197b      	adds	r3, r7, r5
200000be:	681b      	ldr	r3, [r3, #0]
200000c0:	00db      	lsls	r3, r3, #3
200000c2:	08db      	lsrs	r3, r3, #3
200000c4:	00db      	lsls	r3, r3, #3
200000c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
200000c8:	2107      	movs	r1, #7
200000ca:	400a      	ands	r2, r1
200000cc:	4313      	orrs	r3, r2
200000ce:	627b      	str	r3, [r7, #36]	; 0x24

    //Skriver filter
    filter.IDE = 1;
200000d0:	2628      	movs	r6, #40	; 0x28
200000d2:	19bb      	adds	r3, r7, r6
200000d4:	781a      	ldrb	r2, [r3, #0]
200000d6:	2104      	movs	r1, #4
200000d8:	430a      	orrs	r2, r1
200000da:	701a      	strb	r2, [r3, #0]
    filter.RTR = 0;
200000dc:	19bb      	adds	r3, r7, r6
200000de:	781a      	ldrb	r2, [r3, #0]
200000e0:	2102      	movs	r1, #2
200000e2:	438a      	bics	r2, r1
200000e4:	701a      	strb	r2, [r3, #0]
    header.msgType = assignID_msg_type;
200000e6:	183b      	adds	r3, r7, r0
200000e8:	781a      	ldrb	r2, [r3, #0]
200000ea:	211c      	movs	r1, #28
200000ec:	438a      	bics	r2, r1
200000ee:	1c11      	adds	r1, r2, #0
200000f0:	2208      	movs	r2, #8
200000f2:	430a      	orrs	r2, r1
200000f4:	701a      	strb	r2, [r3, #0]
    header.ID = 0;
200000f6:	193b      	adds	r3, r7, r4
200000f8:	881a      	ldrh	r2, [r3, #0]
200000fa:	492e      	ldr	r1, [pc, #184]	; (200001b4 <getId+0x148>)
200000fc:	400a      	ands	r2, r1
200000fe:	801a      	strh	r2, [r3, #0]
    header.toCentral = 0;
20000100:	183b      	adds	r3, r7, r0
20000102:	781a      	ldrb	r2, [r3, #0]
20000104:	2102      	movs	r1, #2
20000106:	438a      	bics	r2, r1
20000108:	701a      	strb	r2, [r3, #0]
    HEADERtoUINT32(header, filter.ID);
2000010a:	197b      	adds	r3, r7, r5
2000010c:	681b      	ldr	r3, [r3, #0]
2000010e:	00db      	lsls	r3, r3, #3
20000110:	08db      	lsrs	r3, r3, #3
20000112:	00db      	lsls	r3, r3, #3
20000114:	6aba      	ldr	r2, [r7, #40]	; 0x28
20000116:	2107      	movs	r1, #7
20000118:	400a      	ands	r2, r1
2000011a:	4313      	orrs	r3, r2
2000011c:	62bb      	str	r3, [r7, #40]	; 0x28

    if (CANhandlerListNotFull()){
2000011e:	f002 f8bd 	bl	2000229c <CANhandlerListNotFull>
20000122:	1e03      	subs	r3, r0, #0
20000124:	d007      	beq.n	20000136 <getId+0xca>
        CANaddFilterHandler(idAssign_Handler, &filter, &mask);
20000126:	2324      	movs	r3, #36	; 0x24
20000128:	18fa      	adds	r2, r7, r3
2000012a:	2328      	movs	r3, #40	; 0x28
2000012c:	18f9      	adds	r1, r7, r3
2000012e:	4b22      	ldr	r3, [pc, #136]	; (200001b8 <getId+0x14c>)
20000130:	0018      	movs	r0, r3
20000132:	f002 f921 	bl	20002378 <CANaddFilterHandler>
    }


    int timeStamp = msTicks + 60 * 1000; 
20000136:	4b21      	ldr	r3, [pc, #132]	; (200001bc <getId+0x150>)
20000138:	681b      	ldr	r3, [r3, #0]
2000013a:	4a21      	ldr	r2, [pc, #132]	; (200001c0 <getId+0x154>)
2000013c:	4694      	mov	ip, r2
2000013e:	4463      	add	r3, ip
20000140:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (RNG_GetFlagStatus(RNG_FLAG_DRDY) == SET && //Nytt meddelande finns
20000142:	2001      	movs	r0, #1
20000144:	f000 ff28 	bl	20000f98 <RNG_GetFlagStatus>
20000148:	0003      	movs	r3, r0
2000014a:	2b01      	cmp	r3, #1
2000014c:	d12e      	bne.n	200001ac <getId+0x140>
        RNG_GetFlagStatus(RNG_FLAG_CECS) == RESET && //Inget klockfel
2000014e:	2002      	movs	r0, #2
20000150:	f000 ff22 	bl	20000f98 <RNG_GetFlagStatus>
20000154:	1e03      	subs	r3, r0, #0
    if (RNG_GetFlagStatus(RNG_FLAG_DRDY) == SET && //Nytt meddelande finns
20000156:	d129      	bne.n	200001ac <getId+0x140>
        RNG_GetFlagStatus(RNG_FLAG_SECS) == RESET){ //Inget seedfel
20000158:	2004      	movs	r0, #4
2000015a:	f000 ff1d 	bl	20000f98 <RNG_GetFlagStatus>
2000015e:	1e03      	subs	r3, r0, #0
        RNG_GetFlagStatus(RNG_FLAG_CECS) == RESET && //Inget klockfel
20000160:	d124      	bne.n	200001ac <getId+0x140>
            id = RNG_GetRandomNumber();
20000162:	f000 fef1 	bl	20000f48 <RNG_GetRandomNumber>
20000166:	0002      	movs	r2, r0
20000168:	4b16      	ldr	r3, [pc, #88]	; (200001c4 <getId+0x158>)
2000016a:	601a      	str	r2, [r3, #0]
            CanTxMsg idRequest;
            
            encode_request_id(&idRequest,id,0, nDoors, 69);
2000016c:	4b15      	ldr	r3, [pc, #84]	; (200001c4 <getId+0x158>)
2000016e:	6819      	ldr	r1, [r3, #0]
20000170:	687b      	ldr	r3, [r7, #4]
20000172:	b2da      	uxtb	r2, r3
20000174:	230c      	movs	r3, #12
20000176:	18f8      	adds	r0, r7, r3
20000178:	2345      	movs	r3, #69	; 0x45
2000017a:	9300      	str	r3, [sp, #0]
2000017c:	0013      	movs	r3, r2
2000017e:	2200      	movs	r2, #0
20000180:	f000 f8a8 	bl	200002d4 <encode_request_id>
            while (msTicks < timeStamp && nocid)
20000184:	e009      	b.n	2000019a <getId+0x12e>
            {
                CANsendMessage(&idRequest);
20000186:	230c      	movs	r3, #12
20000188:	18fb      	adds	r3, r7, r3
2000018a:	0018      	movs	r0, r3
2000018c:	f002 f9cb 	bl	20002526 <CANsendMessage>
                delay(1000);
20000190:	23fa      	movs	r3, #250	; 0xfa
20000192:	009b      	lsls	r3, r3, #2
20000194:	0018      	movs	r0, r3
20000196:	f000 fb01 	bl	2000079c <delay>
            while (msTicks < timeStamp && nocid)
2000019a:	4b08      	ldr	r3, [pc, #32]	; (200001bc <getId+0x150>)
2000019c:	681a      	ldr	r2, [r3, #0]
2000019e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
200001a0:	429a      	cmp	r2, r3
200001a2:	d203      	bcs.n	200001ac <getId+0x140>
200001a4:	4b08      	ldr	r3, [pc, #32]	; (200001c8 <getId+0x15c>)
200001a6:	781b      	ldrb	r3, [r3, #0]
200001a8:	2b00      	cmp	r3, #0
200001aa:	d1ec      	bne.n	20000186 <getId+0x11a>
            }
        }
}
200001ac:	46c0      	nop			; (mov r8, r8)
200001ae:	46bd      	mov	sp, r7
200001b0:	b00d      	add	sp, #52	; 0x34
200001b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
200001b4:	fffffe03 			; <UNDEFINED> instruction: 0xfffffe03
200001b8:	20000029 	andcs	r0, r0, r9, lsr #32
200001bc:	20003e04 	andcs	r3, r0, r4, lsl #28
200001c0:	0000ea60 	andeq	lr, r0, r0, ror #20
200001c4:	20003e08 	andcs	r3, r0, r8, lsl #28
200001c8:	20003ef4 	strdcs	r3, [r0], -r4

200001cc <sendAlarm>:

void sendAlarm (char Doorid){
200001cc:	b590      	push	{r4, r7, lr}
200001ce:	b089      	sub	sp, #36	; 0x24
200001d0:	af00      	add	r7, sp, #0
200001d2:	0002      	movs	r2, r0
200001d4:	1dfb      	adds	r3, r7, #7
200001d6:	701a      	strb	r2, [r3, #0]
    CanTxMsg AMsg;
    encode_door_larm_msg(&AMsg,(char) id,Doorid);	
200001d8:	4b08      	ldr	r3, [pc, #32]	; (200001fc <sendAlarm+0x30>)
200001da:	681b      	ldr	r3, [r3, #0]
200001dc:	b2d9      	uxtb	r1, r3
200001de:	1dfb      	adds	r3, r7, #7
200001e0:	781a      	ldrb	r2, [r3, #0]
200001e2:	240c      	movs	r4, #12
200001e4:	193b      	adds	r3, r7, r4
200001e6:	0018      	movs	r0, r3
200001e8:	f000 f91a 	bl	20000420 <encode_door_larm_msg>
    CANsendMessage(&AMsg);
200001ec:	193b      	adds	r3, r7, r4
200001ee:	0018      	movs	r0, r3
200001f0:	f002 f999 	bl	20002526 <CANsendMessage>
200001f4:	46c0      	nop			; (mov r8, r8)
200001f6:	46bd      	mov	sp, r7
200001f8:	b009      	add	sp, #36	; 0x24
200001fa:	bd90      	pop	{r4, r7, pc}
200001fc:	20003e08 	andcs	r3, r0, r8, lsl #28

20000200 <encode_door_time_config>:
#include "stm32f4xx.h"
#include "stm32f4xx_rcc.h"
#include "stm32f4xx_gpio.h"


uint8_t encode_door_time_config(CanTxMsg *msg, uint8_t to_central, uint8_t door_id_0, uint8_t door_id_1, uint16_t time_0, uint16_t time_1, uint8_t locked){
20000200:	b590      	push	{r4, r7, lr}
20000202:	b085      	sub	sp, #20
20000204:	af00      	add	r7, sp, #0
20000206:	6078      	str	r0, [r7, #4]
20000208:	000c      	movs	r4, r1
2000020a:	0010      	movs	r0, r2
2000020c:	0019      	movs	r1, r3
2000020e:	1cfb      	adds	r3, r7, #3
20000210:	1c22      	adds	r2, r4, #0
20000212:	701a      	strb	r2, [r3, #0]
20000214:	1cbb      	adds	r3, r7, #2
20000216:	1c02      	adds	r2, r0, #0
20000218:	701a      	strb	r2, [r3, #0]
2000021a:	1c7b      	adds	r3, r7, #1
2000021c:	1c0a      	adds	r2, r1, #0
2000021e:	701a      	strb	r2, [r3, #0]
    if(door_id_0 > door_id_1 || door_id_1 > 31){
20000220:	1cba      	adds	r2, r7, #2
20000222:	1c7b      	adds	r3, r7, #1
20000224:	7812      	ldrb	r2, [r2, #0]
20000226:	781b      	ldrb	r3, [r3, #0]
20000228:	429a      	cmp	r2, r3
2000022a:	d803      	bhi.n	20000234 <encode_door_time_config+0x34>
2000022c:	1c7b      	adds	r3, r7, #1
2000022e:	781b      	ldrb	r3, [r3, #0]
20000230:	2b1f      	cmp	r3, #31
20000232:	d901      	bls.n	20000238 <encode_door_time_config+0x38>
        return 0;
20000234:	2300      	movs	r3, #0
20000236:	e049      	b.n	200002cc <encode_door_time_config+0xcc>
    }
    
    uint8_t *data_pointer =  &(msg->Data);
20000238:	687b      	ldr	r3, [r7, #4]
2000023a:	330b      	adds	r3, #11
2000023c:	60fb      	str	r3, [r7, #12]
    
    
    Header header = empty_header;
2000023e:	2300      	movs	r3, #0
20000240:	60bb      	str	r3, [r7, #8]
    header.msgType = 2;
20000242:	200b      	movs	r0, #11
20000244:	183b      	adds	r3, r7, r0
20000246:	781a      	ldrb	r2, [r3, #0]
20000248:	211c      	movs	r1, #28
2000024a:	438a      	bics	r2, r1
2000024c:	1c11      	adds	r1, r2, #0
2000024e:	2208      	movs	r2, #8
20000250:	430a      	orrs	r2, r1
20000252:	701a      	strb	r2, [r3, #0]
    header.toCentral = to_central;
20000254:	1cfb      	adds	r3, r7, #3
20000256:	781b      	ldrb	r3, [r3, #0]
20000258:	2201      	movs	r2, #1
2000025a:	4013      	ands	r3, r2
2000025c:	b2da      	uxtb	r2, r3
2000025e:	183b      	adds	r3, r7, r0
20000260:	2101      	movs	r1, #1
20000262:	400a      	ands	r2, r1
20000264:	1890      	adds	r0, r2, r2
20000266:	781a      	ldrb	r2, [r3, #0]
20000268:	2102      	movs	r1, #2
2000026a:	438a      	bics	r2, r1
2000026c:	1c11      	adds	r1, r2, #0
2000026e:	1c02      	adds	r2, r0, #0
20000270:	430a      	orrs	r2, r1
20000272:	701a      	strb	r2, [r3, #0]
    HEADERtoUINT32(header, msg->ExtId);
20000274:	2308      	movs	r3, #8
20000276:	18fb      	adds	r3, r7, r3
20000278:	681a      	ldr	r2, [r3, #0]
2000027a:	687b      	ldr	r3, [r7, #4]
2000027c:	605a      	str	r2, [r3, #4]
    
    msg->DLC = 7;
2000027e:	687b      	ldr	r3, [r7, #4]
20000280:	2207      	movs	r2, #7
20000282:	729a      	strb	r2, [r3, #10]
    msg->IDE = CAN_Id_Extended;
20000284:	687b      	ldr	r3, [r7, #4]
20000286:	2204      	movs	r2, #4
20000288:	721a      	strb	r2, [r3, #8]
    msg->RTR = CAN_RTR_Data;
2000028a:	687b      	ldr	r3, [r7, #4]
2000028c:	2200      	movs	r2, #0
2000028e:	725a      	strb	r2, [r3, #9]
    
    //Dörrintervall skrivs till de 16 första databitarna
    *data_pointer = door_id_0;
20000290:	68fb      	ldr	r3, [r7, #12]
20000292:	1cba      	adds	r2, r7, #2
20000294:	7812      	ldrb	r2, [r2, #0]
20000296:	701a      	strb	r2, [r3, #0]
    *(data_pointer + 1) = door_id_1;
20000298:	68fb      	ldr	r3, [r7, #12]
2000029a:	3301      	adds	r3, #1
2000029c:	1c7a      	adds	r2, r7, #1
2000029e:	7812      	ldrb	r2, [r2, #0]
200002a0:	701a      	strb	r2, [r3, #0]
    
    
    //De två tidsvärdena skrivs till bit 16-47
    *(data_pointer + 2) = time_0;
200002a2:	68fb      	ldr	r3, [r7, #12]
200002a4:	3302      	adds	r3, #2
200002a6:	2220      	movs	r2, #32
200002a8:	18ba      	adds	r2, r7, r2
200002aa:	8812      	ldrh	r2, [r2, #0]
200002ac:	b2d2      	uxtb	r2, r2
200002ae:	701a      	strb	r2, [r3, #0]
    *(data_pointer + 4) = time_1;
200002b0:	68fb      	ldr	r3, [r7, #12]
200002b2:	3304      	adds	r3, #4
200002b4:	2224      	movs	r2, #36	; 0x24
200002b6:	18ba      	adds	r2, r7, r2
200002b8:	8812      	ldrh	r2, [r2, #0]
200002ba:	b2d2      	uxtb	r2, r2
200002bc:	701a      	strb	r2, [r3, #0]
    
    //Låsflagga skrivs till bit 48-55
    *(data_pointer + 6) = locked;
200002be:	68fb      	ldr	r3, [r7, #12]
200002c0:	3306      	adds	r3, #6
200002c2:	2228      	movs	r2, #40	; 0x28
200002c4:	18ba      	adds	r2, r7, r2
200002c6:	7812      	ldrb	r2, [r2, #0]
200002c8:	701a      	strb	r2, [r3, #0]
    
    return 1;
200002ca:	2301      	movs	r3, #1
}
200002cc:	0018      	movs	r0, r3
200002ce:	46bd      	mov	sp, r7
200002d0:	b005      	add	sp, #20
200002d2:	bd90      	pop	{r4, r7, pc}

200002d4 <encode_request_id>:
 * uint32_t temp_id: temporärt, förslagsvis slumpgenererat id
 * uint8_t device_type: 0 för dörrenhet, 1 för rörelseenhet
 * uint8_t value_0: antal dörrar eller rörelsesensorer
 * uint8_t value_1: antal vibrationssensorer
 */
uint8_t encode_request_id(CanTxMsg *msg, uint32_t temp_id, uint8_t device_type, uint8_t value_0, uint8_t value_1){
200002d4:	b580      	push	{r7, lr}
200002d6:	b086      	sub	sp, #24
200002d8:	af00      	add	r7, sp, #0
200002da:	60f8      	str	r0, [r7, #12]
200002dc:	60b9      	str	r1, [r7, #8]
200002de:	0019      	movs	r1, r3
200002e0:	1dfb      	adds	r3, r7, #7
200002e2:	701a      	strb	r2, [r3, #0]
200002e4:	1dbb      	adds	r3, r7, #6
200002e6:	1c0a      	adds	r2, r1, #0
200002e8:	701a      	strb	r2, [r3, #0]
    Header header = empty_header;
200002ea:	2300      	movs	r3, #0
200002ec:	617b      	str	r3, [r7, #20]
    header.msgType = reqID_msg_type;
200002ee:	2017      	movs	r0, #23
200002f0:	183b      	adds	r3, r7, r0
200002f2:	781a      	ldrb	r2, [r3, #0]
200002f4:	211c      	movs	r1, #28
200002f6:	438a      	bics	r2, r1
200002f8:	1c11      	adds	r1, r2, #0
200002fa:	220c      	movs	r2, #12
200002fc:	430a      	orrs	r2, r1
200002fe:	701a      	strb	r2, [r3, #0]
    header.toCentral = 1;
20000300:	183b      	adds	r3, r7, r0
20000302:	781a      	ldrb	r2, [r3, #0]
20000304:	2102      	movs	r1, #2
20000306:	430a      	orrs	r2, r1
20000308:	701a      	strb	r2, [r3, #0]
    HEADERtoUINT32(header, msg->ExtId);
2000030a:	2314      	movs	r3, #20
2000030c:	18fb      	adds	r3, r7, r3
2000030e:	681a      	ldr	r2, [r3, #0]
20000310:	68fb      	ldr	r3, [r7, #12]
20000312:	605a      	str	r2, [r3, #4]

    msg->DLC = reqID_msg_length;
20000314:	68fb      	ldr	r3, [r7, #12]
20000316:	2207      	movs	r2, #7
20000318:	729a      	strb	r2, [r3, #10]
    msg->IDE = CAN_Id_Extended;
2000031a:	68fb      	ldr	r3, [r7, #12]
2000031c:	2204      	movs	r2, #4
2000031e:	721a      	strb	r2, [r3, #8]
    msg->RTR = CAN_RTR_Data;
20000320:	68fb      	ldr	r3, [r7, #12]
20000322:	2200      	movs	r2, #0
20000324:	725a      	strb	r2, [r3, #9]
    
    //Id skrivs in i bytearrayen för data
    msg->Data[0] = (uint8_t)temp_id;
20000326:	68bb      	ldr	r3, [r7, #8]
20000328:	b2da      	uxtb	r2, r3
2000032a:	68fb      	ldr	r3, [r7, #12]
2000032c:	72da      	strb	r2, [r3, #11]
    msg->Data[1] = (uint8_t)(temp_id >> 8);
2000032e:	68bb      	ldr	r3, [r7, #8]
20000330:	0a1b      	lsrs	r3, r3, #8
20000332:	b2da      	uxtb	r2, r3
20000334:	68fb      	ldr	r3, [r7, #12]
20000336:	731a      	strb	r2, [r3, #12]
    msg->Data[2] = (uint8_t)(temp_id >> 16);
20000338:	68bb      	ldr	r3, [r7, #8]
2000033a:	0c1b      	lsrs	r3, r3, #16
2000033c:	b2da      	uxtb	r2, r3
2000033e:	68fb      	ldr	r3, [r7, #12]
20000340:	735a      	strb	r2, [r3, #13]
    msg->Data[3] = (uint8_t)(temp_id >> 24);
20000342:	68bb      	ldr	r3, [r7, #8]
20000344:	0e1b      	lsrs	r3, r3, #24
20000346:	b2da      	uxtb	r2, r3
20000348:	68fb      	ldr	r3, [r7, #12]
2000034a:	739a      	strb	r2, [r3, #14]

    msg->Data[4] = device_type;
2000034c:	68fb      	ldr	r3, [r7, #12]
2000034e:	1dfa      	adds	r2, r7, #7
20000350:	7812      	ldrb	r2, [r2, #0]
20000352:	73da      	strb	r2, [r3, #15]
    msg->Data[5] = value_0;
20000354:	68fb      	ldr	r3, [r7, #12]
20000356:	1dba      	adds	r2, r7, #6
20000358:	7812      	ldrb	r2, [r2, #0]
2000035a:	741a      	strb	r2, [r3, #16]
    msg->Data[6] = value_1;
2000035c:	68fb      	ldr	r3, [r7, #12]
2000035e:	2220      	movs	r2, #32
20000360:	18ba      	adds	r2, r7, r2
20000362:	7812      	ldrb	r2, [r2, #0]
20000364:	745a      	strb	r2, [r3, #17]
    
    return 1;
20000366:	2301      	movs	r3, #1
}
20000368:	0018      	movs	r0, r3
2000036a:	46bd      	mov	sp, r7
2000036c:	b006      	add	sp, #24
2000036e:	bd80      	pop	{r7, pc}

20000370 <encode_assign_id>:
//Encodar en id-tilldelning
//msg är en pektare till meddelande som ska skickas
//request är en pekare till förfrågan
//id är id man tilldelar enheten
//Returnerar 1 om det lyckade 0 annars
uint8_t encode_assign_id(CanTxMsg *msg, CanRxMsg *request, uint8_t id){
20000370:	b580      	push	{r7, lr}
20000372:	b086      	sub	sp, #24
20000374:	af00      	add	r7, sp, #0
20000376:	60f8      	str	r0, [r7, #12]
20000378:	60b9      	str	r1, [r7, #8]
2000037a:	1dfb      	adds	r3, r7, #7
2000037c:	701a      	strb	r2, [r3, #0]
    //Kollar så längden av request stämmer för idReq
    if (request->DLC == reqID_msg_length){
2000037e:	68bb      	ldr	r3, [r7, #8]
20000380:	7a9b      	ldrb	r3, [r3, #10]
20000382:	2b07      	cmp	r3, #7
20000384:	d133      	bne.n	200003ee <encode_assign_id+0x7e>
        Header header = empty_header;
20000386:	2300      	movs	r3, #0
20000388:	617b      	str	r3, [r7, #20]
        header.msgType = assignID_msg_type;
2000038a:	2017      	movs	r0, #23
2000038c:	183b      	adds	r3, r7, r0
2000038e:	781a      	ldrb	r2, [r3, #0]
20000390:	211c      	movs	r1, #28
20000392:	438a      	bics	r2, r1
20000394:	1c11      	adds	r1, r2, #0
20000396:	2208      	movs	r2, #8
20000398:	430a      	orrs	r2, r1
2000039a:	701a      	strb	r2, [r3, #0]
        header.toCentral = 0;
2000039c:	183b      	adds	r3, r7, r0
2000039e:	781a      	ldrb	r2, [r3, #0]
200003a0:	2102      	movs	r1, #2
200003a2:	438a      	bics	r2, r1
200003a4:	701a      	strb	r2, [r3, #0]
        HEADERtoUINT32(header, msg->ExtId);
200003a6:	2314      	movs	r3, #20
200003a8:	18fb      	adds	r3, r7, r3
200003aa:	681a      	ldr	r2, [r3, #0]
200003ac:	68fb      	ldr	r3, [r7, #12]
200003ae:	605a      	str	r2, [r3, #4]

        msg->DLC = assignID_msg_length;
200003b0:	68fb      	ldr	r3, [r7, #12]
200003b2:	2205      	movs	r2, #5
200003b4:	729a      	strb	r2, [r3, #10]
        msg->IDE = CAN_Id_Extended;
200003b6:	68fb      	ldr	r3, [r7, #12]
200003b8:	2204      	movs	r2, #4
200003ba:	721a      	strb	r2, [r3, #8]
        msg->RTR = CAN_RTR_Data;
200003bc:	68fb      	ldr	r3, [r7, #12]
200003be:	2200      	movs	r2, #0
200003c0:	725a      	strb	r2, [r3, #9]

        //Första 4 bytes är slumptalet från förfrågan
       msg->Data[0] = request->Data[0];
200003c2:	68bb      	ldr	r3, [r7, #8]
200003c4:	7ada      	ldrb	r2, [r3, #11]
200003c6:	68fb      	ldr	r3, [r7, #12]
200003c8:	72da      	strb	r2, [r3, #11]
       msg->Data[1] = request->Data[1];
200003ca:	68bb      	ldr	r3, [r7, #8]
200003cc:	7b1a      	ldrb	r2, [r3, #12]
200003ce:	68fb      	ldr	r3, [r7, #12]
200003d0:	731a      	strb	r2, [r3, #12]
       msg->Data[2] = request->Data[2];
200003d2:	68bb      	ldr	r3, [r7, #8]
200003d4:	7b5a      	ldrb	r2, [r3, #13]
200003d6:	68fb      	ldr	r3, [r7, #12]
200003d8:	735a      	strb	r2, [r3, #13]
       msg->Data[3] = request->Data[3];
200003da:	68bb      	ldr	r3, [r7, #8]
200003dc:	7b9a      	ldrb	r2, [r3, #14]
200003de:	68fb      	ldr	r3, [r7, #12]
200003e0:	739a      	strb	r2, [r3, #14]

        //Id skickas i andra byten
        msg->Data[4] = id;
200003e2:	68fb      	ldr	r3, [r7, #12]
200003e4:	1dfa      	adds	r2, r7, #7
200003e6:	7812      	ldrb	r2, [r2, #0]
200003e8:	73da      	strb	r2, [r3, #15]

        return 1;
200003ea:	2301      	movs	r3, #1
200003ec:	e000      	b.n	200003f0 <encode_assign_id+0x80>
    }
    return 0;
200003ee:	2300      	movs	r3, #0
}
200003f0:	0018      	movs	r0, r3
200003f2:	46bd      	mov	sp, r7
200003f4:	b006      	add	sp, #24
200003f6:	bd80      	pop	{r7, pc}

200003f8 <encode_distance_config>:

uint8_t encode_distance_config(CanTxMsg *msg, uint32_t dist){
200003f8:	b580      	push	{r7, lr}
200003fa:	b084      	sub	sp, #16
200003fc:	af00      	add	r7, sp, #0
200003fe:	6078      	str	r0, [r7, #4]
20000400:	6039      	str	r1, [r7, #0]
    uint8_t *data_pointer =  &(msg->Data[0]);
20000402:	687b      	ldr	r3, [r7, #4]
20000404:	330b      	adds	r3, #11
20000406:	60fb      	str	r3, [r7, #12]
    
    msg->DLC = 4;
20000408:	687b      	ldr	r3, [r7, #4]
2000040a:	2204      	movs	r2, #4
2000040c:	729a      	strb	r2, [r3, #10]
    
    //Avstånd skrivs in i bytearrayen för data
    *data_pointer = dist;
2000040e:	683b      	ldr	r3, [r7, #0]
20000410:	b2da      	uxtb	r2, r3
20000412:	68fb      	ldr	r3, [r7, #12]
20000414:	701a      	strb	r2, [r3, #0]
}
20000416:	46c0      	nop			; (mov r8, r8)
20000418:	0018      	movs	r0, r3
2000041a:	46bd      	mov	sp, r7
2000041c:	b004      	add	sp, #16
2000041e:	bd80      	pop	{r7, pc}

20000420 <encode_door_larm_msg>:

//Encodar ett larmmeddelande från dörrenhet
//msg är en pekare till meddelandet som ska skickas
//unitID är enhetens egna ID
//id är idt till dörren som larmar
void encode_door_larm_msg(CanTxMsg *msg, uint8_t uinitID, uint8_t id){
20000420:	b590      	push	{r4, r7, lr}
20000422:	b085      	sub	sp, #20
20000424:	af00      	add	r7, sp, #0
20000426:	6078      	str	r0, [r7, #4]
20000428:	0008      	movs	r0, r1
2000042a:	0011      	movs	r1, r2
2000042c:	1cfb      	adds	r3, r7, #3
2000042e:	1c02      	adds	r2, r0, #0
20000430:	701a      	strb	r2, [r3, #0]
20000432:	1cbb      	adds	r3, r7, #2
20000434:	1c0a      	adds	r2, r1, #0
20000436:	701a      	strb	r2, [r3, #0]
    Header header = empty_header;
20000438:	2300      	movs	r3, #0
2000043a:	60fb      	str	r3, [r7, #12]
    header.msgType = larm_msg_type;
2000043c:	240f      	movs	r4, #15
2000043e:	193b      	adds	r3, r7, r4
20000440:	781a      	ldrb	r2, [r3, #0]
20000442:	211c      	movs	r1, #28
20000444:	438a      	bics	r2, r1
20000446:	701a      	strb	r2, [r3, #0]
    header.ID = uinitID;
20000448:	1cfb      	adds	r3, r7, #3
2000044a:	781b      	ldrb	r3, [r3, #0]
2000044c:	227f      	movs	r2, #127	; 0x7f
2000044e:	4013      	ands	r3, r2
20000450:	b2da      	uxtb	r2, r3
20000452:	230e      	movs	r3, #14
20000454:	18fb      	adds	r3, r7, r3
20000456:	1c11      	adds	r1, r2, #0
20000458:	227f      	movs	r2, #127	; 0x7f
2000045a:	400a      	ands	r2, r1
2000045c:	0090      	lsls	r0, r2, #2
2000045e:	881a      	ldrh	r2, [r3, #0]
20000460:	4910      	ldr	r1, [pc, #64]	; (200004a4 <encode_door_larm_msg+0x84>)
20000462:	400a      	ands	r2, r1
20000464:	1c11      	adds	r1, r2, #0
20000466:	1c02      	adds	r2, r0, #0
20000468:	430a      	orrs	r2, r1
2000046a:	801a      	strh	r2, [r3, #0]
    header.toCentral = 1;
2000046c:	193b      	adds	r3, r7, r4
2000046e:	781a      	ldrb	r2, [r3, #0]
20000470:	2102      	movs	r1, #2
20000472:	430a      	orrs	r2, r1
20000474:	701a      	strb	r2, [r3, #0]
    HEADERtoUINT32(header, msg->ExtId);
20000476:	230c      	movs	r3, #12
20000478:	18fb      	adds	r3, r7, r3
2000047a:	681a      	ldr	r2, [r3, #0]
2000047c:	687b      	ldr	r3, [r7, #4]
2000047e:	605a      	str	r2, [r3, #4]

    msg->DLC = door_larm_msg_length;
20000480:	687b      	ldr	r3, [r7, #4]
20000482:	2201      	movs	r2, #1
20000484:	729a      	strb	r2, [r3, #10]
    msg->IDE = CAN_Id_Extended;
20000486:	687b      	ldr	r3, [r7, #4]
20000488:	2204      	movs	r2, #4
2000048a:	721a      	strb	r2, [r3, #8]
    msg->RTR = CAN_RTR_Data;
2000048c:	687b      	ldr	r3, [r7, #4]
2000048e:	2200      	movs	r2, #0
20000490:	725a      	strb	r2, [r3, #9]

    msg->Data[0] = id;
20000492:	687b      	ldr	r3, [r7, #4]
20000494:	1cba      	adds	r2, r7, #2
20000496:	7812      	ldrb	r2, [r2, #0]
20000498:	72da      	strb	r2, [r3, #11]
}
2000049a:	46c0      	nop			; (mov r8, r8)
2000049c:	46bd      	mov	sp, r7
2000049e:	b005      	add	sp, #20
200004a0:	bd90      	pop	{r4, r7, pc}
200004a2:	46c0      	nop			; (mov r8, r8)
200004a4:	fffffe03 			; <UNDEFINED> instruction: 0xfffffe03

200004a8 <encode_motion_larm_msg>:
//Encodar ett larmmeddelande från rörelseenhet
//msg är en pekare till meddelandet som ska skickas
//unitID är enhetens egna ID
//sensorType är antingen motion_sensor eller vibration_sensor
//id är idt till sensorn som larmar
void encode_motion_larm_msg(CanTxMsg *msg, uint8_t uinitID, uint8_t sensorType, uint8_t id){
200004a8:	b590      	push	{r4, r7, lr}
200004aa:	b085      	sub	sp, #20
200004ac:	af00      	add	r7, sp, #0
200004ae:	6078      	str	r0, [r7, #4]
200004b0:	000c      	movs	r4, r1
200004b2:	0010      	movs	r0, r2
200004b4:	0019      	movs	r1, r3
200004b6:	1cfb      	adds	r3, r7, #3
200004b8:	1c22      	adds	r2, r4, #0
200004ba:	701a      	strb	r2, [r3, #0]
200004bc:	1cbb      	adds	r3, r7, #2
200004be:	1c02      	adds	r2, r0, #0
200004c0:	701a      	strb	r2, [r3, #0]
200004c2:	1c7b      	adds	r3, r7, #1
200004c4:	1c0a      	adds	r2, r1, #0
200004c6:	701a      	strb	r2, [r3, #0]
    Header header = empty_header;
200004c8:	2300      	movs	r3, #0
200004ca:	60fb      	str	r3, [r7, #12]
    header.msgType = larm_msg_type;
200004cc:	240f      	movs	r4, #15
200004ce:	193b      	adds	r3, r7, r4
200004d0:	781a      	ldrb	r2, [r3, #0]
200004d2:	211c      	movs	r1, #28
200004d4:	438a      	bics	r2, r1
200004d6:	701a      	strb	r2, [r3, #0]
    header.ID = uinitID;
200004d8:	1cfb      	adds	r3, r7, #3
200004da:	781b      	ldrb	r3, [r3, #0]
200004dc:	227f      	movs	r2, #127	; 0x7f
200004de:	4013      	ands	r3, r2
200004e0:	b2da      	uxtb	r2, r3
200004e2:	230e      	movs	r3, #14
200004e4:	18fb      	adds	r3, r7, r3
200004e6:	1c11      	adds	r1, r2, #0
200004e8:	227f      	movs	r2, #127	; 0x7f
200004ea:	400a      	ands	r2, r1
200004ec:	0090      	lsls	r0, r2, #2
200004ee:	881a      	ldrh	r2, [r3, #0]
200004f0:	4912      	ldr	r1, [pc, #72]	; (2000053c <encode_motion_larm_msg+0x94>)
200004f2:	400a      	ands	r2, r1
200004f4:	1c11      	adds	r1, r2, #0
200004f6:	1c02      	adds	r2, r0, #0
200004f8:	430a      	orrs	r2, r1
200004fa:	801a      	strh	r2, [r3, #0]
    header.toCentral = 1;
200004fc:	193b      	adds	r3, r7, r4
200004fe:	781a      	ldrb	r2, [r3, #0]
20000500:	2102      	movs	r1, #2
20000502:	430a      	orrs	r2, r1
20000504:	701a      	strb	r2, [r3, #0]
    HEADERtoUINT32(header, msg->ExtId);
20000506:	230c      	movs	r3, #12
20000508:	18fb      	adds	r3, r7, r3
2000050a:	681a      	ldr	r2, [r3, #0]
2000050c:	687b      	ldr	r3, [r7, #4]
2000050e:	605a      	str	r2, [r3, #4]

    msg->DLC = motion_larm_msg_length;
20000510:	687b      	ldr	r3, [r7, #4]
20000512:	2202      	movs	r2, #2
20000514:	729a      	strb	r2, [r3, #10]
    msg->IDE = CAN_Id_Extended;
20000516:	687b      	ldr	r3, [r7, #4]
20000518:	2204      	movs	r2, #4
2000051a:	721a      	strb	r2, [r3, #8]
    msg->RTR = CAN_RTR_Data;
2000051c:	687b      	ldr	r3, [r7, #4]
2000051e:	2200      	movs	r2, #0
20000520:	725a      	strb	r2, [r3, #9]

    msg->Data[0] = sensorType;
20000522:	687b      	ldr	r3, [r7, #4]
20000524:	1cba      	adds	r2, r7, #2
20000526:	7812      	ldrb	r2, [r2, #0]
20000528:	72da      	strb	r2, [r3, #11]
    msg->Data[1] = id;
2000052a:	687b      	ldr	r3, [r7, #4]
2000052c:	1c7a      	adds	r2, r7, #1
2000052e:	7812      	ldrb	r2, [r2, #0]
20000530:	731a      	strb	r2, [r3, #12]
}
20000532:	46c0      	nop			; (mov r8, r8)
20000534:	46bd      	mov	sp, r7
20000536:	b005      	add	sp, #20
20000538:	bd90      	pop	{r4, r7, pc}
2000053a:	46c0      	nop			; (mov r8, r8)
2000053c:	fffffe03 			; <UNDEFINED> instruction: 0xfffffe03

20000540 <decode_door_config_msg>:

uint8_t decode_door_config_msg(CanRxMsg *msg, uint8_t *door_id_0, uint8_t *door_id_1, uint16_t *time_0, uint16_t *time_1, uint8_t *locked) {
20000540:	b580      	push	{r7, lr}
20000542:	b086      	sub	sp, #24
20000544:	af00      	add	r7, sp, #0
20000546:	60f8      	str	r0, [r7, #12]
20000548:	60b9      	str	r1, [r7, #8]
2000054a:	607a      	str	r2, [r7, #4]
2000054c:	603b      	str	r3, [r7, #0]
    uint8_t *data_pointer =  &(msg->Data);
2000054e:	68fb      	ldr	r3, [r7, #12]
20000550:	330b      	adds	r3, #11
20000552:	617b      	str	r3, [r7, #20]
    
    door_id_0 = data_pointer;
20000554:	697b      	ldr	r3, [r7, #20]
20000556:	60bb      	str	r3, [r7, #8]
    door_id_1 = data_pointer + 1;
20000558:	697b      	ldr	r3, [r7, #20]
2000055a:	3301      	adds	r3, #1
2000055c:	607b      	str	r3, [r7, #4]
    
    time_0 = data_pointer + 2;
2000055e:	697b      	ldr	r3, [r7, #20]
20000560:	3302      	adds	r3, #2
20000562:	603b      	str	r3, [r7, #0]
    time_1 = data_pointer + 4;
20000564:	697b      	ldr	r3, [r7, #20]
20000566:	3304      	adds	r3, #4
20000568:	623b      	str	r3, [r7, #32]
    
    locked = data_pointer + 6;
2000056a:	697b      	ldr	r3, [r7, #20]
2000056c:	3306      	adds	r3, #6
2000056e:	627b      	str	r3, [r7, #36]	; 0x24
    
    
    return 1;
20000570:	2301      	movs	r3, #1
}
20000572:	0018      	movs	r0, r3
20000574:	46bd      	mov	sp, r7
20000576:	b006      	add	sp, #24
20000578:	bd80      	pop	{r7, pc}

2000057a <decode_tempID>:

//Returnerar tempID ur ett ID-tilldelings meddelande
//Filtrering av header måste redan ha gjorts
uint32_t decode_tempID(CanRxMsg *msg){
2000057a:	b580      	push	{r7, lr}
2000057c:	b082      	sub	sp, #8
2000057e:	af00      	add	r7, sp, #0
20000580:	6078      	str	r0, [r7, #4]
    if (msg->DLC == assignID_msg_length){
20000582:	687b      	ldr	r3, [r7, #4]
20000584:	7a9b      	ldrb	r3, [r3, #10]
20000586:	2b05      	cmp	r3, #5
20000588:	d10f      	bne.n	200005aa <decode_tempID+0x30>
        return (((uint32_t)msg->Data[0])) | (((uint32_t)msg->Data[1]) << 8) | (((uint32_t)msg->Data[2]) << 16) | (((uint32_t)msg->Data[3]) << 24);
2000058a:	687b      	ldr	r3, [r7, #4]
2000058c:	7adb      	ldrb	r3, [r3, #11]
2000058e:	001a      	movs	r2, r3
20000590:	687b      	ldr	r3, [r7, #4]
20000592:	7b1b      	ldrb	r3, [r3, #12]
20000594:	021b      	lsls	r3, r3, #8
20000596:	431a      	orrs	r2, r3
20000598:	687b      	ldr	r3, [r7, #4]
2000059a:	7b5b      	ldrb	r3, [r3, #13]
2000059c:	041b      	lsls	r3, r3, #16
2000059e:	431a      	orrs	r2, r3
200005a0:	687b      	ldr	r3, [r7, #4]
200005a2:	7b9b      	ldrb	r3, [r3, #14]
200005a4:	061b      	lsls	r3, r3, #24
200005a6:	4313      	orrs	r3, r2
200005a8:	e000      	b.n	200005ac <decode_tempID+0x32>
    }
    return 0;
200005aa:	2300      	movs	r3, #0
}
200005ac:	0018      	movs	r0, r3
200005ae:	46bd      	mov	sp, r7
200005b0:	b002      	add	sp, #8
200005b2:	bd80      	pop	{r7, pc}

200005b4 <decode_ID>:

//Returnerar ID ur ett ID-tilldelings meddelande
//Filtrering av header och rätt tempID måste redan ha gjorts
uint8_t decode_ID(CanRxMsg *msg){
200005b4:	b580      	push	{r7, lr}
200005b6:	b082      	sub	sp, #8
200005b8:	af00      	add	r7, sp, #0
200005ba:	6078      	str	r0, [r7, #4]
    if (msg->DLC == assignID_msg_length){
200005bc:	687b      	ldr	r3, [r7, #4]
200005be:	7a9b      	ldrb	r3, [r3, #10]
200005c0:	2b05      	cmp	r3, #5
200005c2:	d102      	bne.n	200005ca <decode_ID+0x16>
        return msg->Data[4];
200005c4:	687b      	ldr	r3, [r7, #4]
200005c6:	7bdb      	ldrb	r3, [r3, #15]
200005c8:	e7ff      	b.n	200005ca <decode_ID+0x16>
    }
}
200005ca:	0018      	movs	r0, r3
200005cc:	46bd      	mov	sp, r7
200005ce:	b002      	add	sp, #8
200005d0:	bd80      	pop	{r7, pc}
200005d2:	46c0      	nop			; (mov r8, r8)

200005d4 <init_GPIO_Ports>:
#include "init_GPIO.h"
//======================================GPIO=========================================================
void init_GPIO_Ports()
{
200005d4:	b580      	push	{r7, lr}
200005d6:	b082      	sub	sp, #8
200005d8:	af00      	add	r7, sp, #0
	/*  Function used to set the GPIO configuration to the default reset state ****/
	GPIO_InitTypeDef init;
	//GPIO E UTPORTAR
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOE, ENABLE);
200005da:	2101      	movs	r1, #1
200005dc:	2010      	movs	r0, #16
200005de:	f003 f849 	bl	20003674 <RCC_AHB1PeriphClockCmd>
	GPIO_StructInit(&init);
200005e2:	003b      	movs	r3, r7
200005e4:	0018      	movs	r0, r3
200005e6:	f002 fb31 	bl	20002c4c <GPIO_StructInit>
	init.GPIO_Pin = GPIO_Pin_1 | GPIO_Pin_3 | GPIO_Pin_5 | GPIO_Pin_7 | GPIO_Pin_9 | GPIO_Pin_11 | GPIO_Pin_13 | GPIO_Pin_15;
200005ea:	003b      	movs	r3, r7
200005ec:	4a64      	ldr	r2, [pc, #400]	; (20000780 <init_GPIO_Ports+0x1ac>)
200005ee:	601a      	str	r2, [r3, #0]
	init.GPIO_Mode = GPIO_Mode_OUT;
200005f0:	003b      	movs	r3, r7
200005f2:	2201      	movs	r2, #1
200005f4:	711a      	strb	r2, [r3, #4]
	init.GPIO_OType = GPIO_OType_PP;
200005f6:	003b      	movs	r3, r7
200005f8:	2200      	movs	r2, #0
200005fa:	719a      	strb	r2, [r3, #6]
	init.GPIO_PuPd = GPIO_PuPd_NOPULL;
200005fc:	003b      	movs	r3, r7
200005fe:	2200      	movs	r2, #0
20000600:	71da      	strb	r2, [r3, #7]
	GPIO_Init(GPIOE, &init);
20000602:	003b      	movs	r3, r7
20000604:	4a5f      	ldr	r2, [pc, #380]	; (20000784 <init_GPIO_Ports+0x1b0>)
20000606:	0019      	movs	r1, r3
20000608:	0010      	movs	r0, r2
2000060a:	f002 fa93 	bl	20002b34 <GPIO_Init>
	
	//konfigurerar inport GPIO E
	GPIO_StructInit(&init);
2000060e:	003b      	movs	r3, r7
20000610:	0018      	movs	r0, r3
20000612:	f002 fb1b 	bl	20002c4c <GPIO_StructInit>
	init.GPIO_Pin = GPIO_Pin_0 | GPIO_Pin_2 | GPIO_Pin_4 | GPIO_Pin_6 | GPIO_Pin_8 | GPIO_Pin_10 | GPIO_Pin_12 |GPIO_Pin_14;
20000616:	003b      	movs	r3, r7
20000618:	4a5b      	ldr	r2, [pc, #364]	; (20000788 <init_GPIO_Ports+0x1b4>)
2000061a:	601a      	str	r2, [r3, #0]
	init.GPIO_Mode = GPIO_Mode_IN;
2000061c:	003b      	movs	r3, r7
2000061e:	2200      	movs	r2, #0
20000620:	711a      	strb	r2, [r3, #4]
	init.GPIO_PuPd = GPIO_PuPd_UP;
20000622:	003b      	movs	r3, r7
20000624:	2201      	movs	r2, #1
20000626:	71da      	strb	r2, [r3, #7]
	GPIO_Init(GPIOE, &init);
20000628:	003b      	movs	r3, r7
2000062a:	4a56      	ldr	r2, [pc, #344]	; (20000784 <init_GPIO_Ports+0x1b0>)
2000062c:	0019      	movs	r1, r3
2000062e:	0010      	movs	r0, r2
20000630:	f002 fa80 	bl	20002b34 <GPIO_Init>

    //GPIOA UTPORTAR
    RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
20000634:	2101      	movs	r1, #1
20000636:	2001      	movs	r0, #1
20000638:	f003 f81c 	bl	20003674 <RCC_AHB1PeriphClockCmd>
	GPIO_StructInit(&init);
2000063c:	003b      	movs	r3, r7
2000063e:	0018      	movs	r0, r3
20000640:	f002 fb04 	bl	20002c4c <GPIO_StructInit>
	init.GPIO_Pin = GPIO_Pin_1 | GPIO_Pin_3 | GPIO_Pin_5 | GPIO_Pin_7 | GPIO_Pin_9 | GPIO_Pin_11 | GPIO_Pin_13 | GPIO_Pin_15;
20000644:	003b      	movs	r3, r7
20000646:	4a4e      	ldr	r2, [pc, #312]	; (20000780 <init_GPIO_Ports+0x1ac>)
20000648:	601a      	str	r2, [r3, #0]
	init.GPIO_Mode = GPIO_Mode_OUT;
2000064a:	003b      	movs	r3, r7
2000064c:	2201      	movs	r2, #1
2000064e:	711a      	strb	r2, [r3, #4]
	init.GPIO_OType = GPIO_OType_PP;
20000650:	003b      	movs	r3, r7
20000652:	2200      	movs	r2, #0
20000654:	719a      	strb	r2, [r3, #6]
	init.GPIO_PuPd = GPIO_PuPd_NOPULL;
20000656:	003b      	movs	r3, r7
20000658:	2200      	movs	r2, #0
2000065a:	71da      	strb	r2, [r3, #7]
	GPIO_Init(GPIOA, &init);
2000065c:	003b      	movs	r3, r7
2000065e:	4a4b      	ldr	r2, [pc, #300]	; (2000078c <init_GPIO_Ports+0x1b8>)
20000660:	0019      	movs	r1, r3
20000662:	0010      	movs	r0, r2
20000664:	f002 fa66 	bl	20002b34 <GPIO_Init>
	
	//konfigurerar inport GPIO a
	GPIO_StructInit(&init);
20000668:	003b      	movs	r3, r7
2000066a:	0018      	movs	r0, r3
2000066c:	f002 faee 	bl	20002c4c <GPIO_StructInit>
	init.GPIO_Pin = GPIO_Pin_0 | GPIO_Pin_2 | GPIO_Pin_4 | GPIO_Pin_6 | GPIO_Pin_8 | GPIO_Pin_10 | GPIO_Pin_12 |GPIO_Pin_14;
20000670:	003b      	movs	r3, r7
20000672:	4a45      	ldr	r2, [pc, #276]	; (20000788 <init_GPIO_Ports+0x1b4>)
20000674:	601a      	str	r2, [r3, #0]
	init.GPIO_Mode = GPIO_Mode_IN;
20000676:	003b      	movs	r3, r7
20000678:	2200      	movs	r2, #0
2000067a:	711a      	strb	r2, [r3, #4]
	init.GPIO_PuPd = GPIO_PuPd_UP;
2000067c:	003b      	movs	r3, r7
2000067e:	2201      	movs	r2, #1
20000680:	71da      	strb	r2, [r3, #7]
	GPIO_Init(GPIOA, &init);
20000682:	003b      	movs	r3, r7
20000684:	4a41      	ldr	r2, [pc, #260]	; (2000078c <init_GPIO_Ports+0x1b8>)
20000686:	0019      	movs	r1, r3
20000688:	0010      	movs	r0, r2
2000068a:	f002 fa53 	bl	20002b34 <GPIO_Init>

	//GPIO C UTPORTAR
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC, ENABLE);
2000068e:	2101      	movs	r1, #1
20000690:	2004      	movs	r0, #4
20000692:	f002 ffef 	bl	20003674 <RCC_AHB1PeriphClockCmd>
	GPIO_StructInit(&init);
20000696:	003b      	movs	r3, r7
20000698:	0018      	movs	r0, r3
2000069a:	f002 fad7 	bl	20002c4c <GPIO_StructInit>
	init.GPIO_Pin = GPIO_Pin_1 | GPIO_Pin_3 | GPIO_Pin_5 | GPIO_Pin_7 | GPIO_Pin_9 | GPIO_Pin_11 | GPIO_Pin_13 | GPIO_Pin_15;
2000069e:	003b      	movs	r3, r7
200006a0:	4a37      	ldr	r2, [pc, #220]	; (20000780 <init_GPIO_Ports+0x1ac>)
200006a2:	601a      	str	r2, [r3, #0]
	init.GPIO_Mode = GPIO_Mode_OUT;
200006a4:	003b      	movs	r3, r7
200006a6:	2201      	movs	r2, #1
200006a8:	711a      	strb	r2, [r3, #4]
	init.GPIO_OType = GPIO_OType_PP;
200006aa:	003b      	movs	r3, r7
200006ac:	2200      	movs	r2, #0
200006ae:	719a      	strb	r2, [r3, #6]
	init.GPIO_PuPd = GPIO_PuPd_NOPULL;
200006b0:	003b      	movs	r3, r7
200006b2:	2200      	movs	r2, #0
200006b4:	71da      	strb	r2, [r3, #7]
	GPIO_Init(GPIOC, &init);
200006b6:	003b      	movs	r3, r7
200006b8:	4a35      	ldr	r2, [pc, #212]	; (20000790 <init_GPIO_Ports+0x1bc>)
200006ba:	0019      	movs	r1, r3
200006bc:	0010      	movs	r0, r2
200006be:	f002 fa39 	bl	20002b34 <GPIO_Init>
	
	//konfigurerar inport GPIO C
	GPIO_StructInit(&init);
200006c2:	003b      	movs	r3, r7
200006c4:	0018      	movs	r0, r3
200006c6:	f002 fac1 	bl	20002c4c <GPIO_StructInit>
	init.GPIO_Pin = GPIO_Pin_0 | GPIO_Pin_2 | GPIO_Pin_4 | GPIO_Pin_6 | GPIO_Pin_8 | GPIO_Pin_10 | GPIO_Pin_12 |GPIO_Pin_14;
200006ca:	003b      	movs	r3, r7
200006cc:	4a2e      	ldr	r2, [pc, #184]	; (20000788 <init_GPIO_Ports+0x1b4>)
200006ce:	601a      	str	r2, [r3, #0]
	init.GPIO_Mode = GPIO_Mode_IN;
200006d0:	003b      	movs	r3, r7
200006d2:	2200      	movs	r2, #0
200006d4:	711a      	strb	r2, [r3, #4]
	init.GPIO_PuPd = GPIO_PuPd_UP;
200006d6:	003b      	movs	r3, r7
200006d8:	2201      	movs	r2, #1
200006da:	71da      	strb	r2, [r3, #7]
	GPIO_Init(GPIOC, &init);
200006dc:	003b      	movs	r3, r7
200006de:	4a2c      	ldr	r2, [pc, #176]	; (20000790 <init_GPIO_Ports+0x1bc>)
200006e0:	0019      	movs	r1, r3
200006e2:	0010      	movs	r0, r2
200006e4:	f002 fa26 	bl	20002b34 <GPIO_Init>

	//GPIO D UTPORTAR
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOD, ENABLE);
200006e8:	2101      	movs	r1, #1
200006ea:	2008      	movs	r0, #8
200006ec:	f002 ffc2 	bl	20003674 <RCC_AHB1PeriphClockCmd>
	GPIO_StructInit(&init);
200006f0:	003b      	movs	r3, r7
200006f2:	0018      	movs	r0, r3
200006f4:	f002 faaa 	bl	20002c4c <GPIO_StructInit>
	init.GPIO_Pin = GPIO_Pin_1 | GPIO_Pin_3 | GPIO_Pin_5 | GPIO_Pin_7 | GPIO_Pin_9 | GPIO_Pin_11 | GPIO_Pin_13 | GPIO_Pin_15;
200006f8:	003b      	movs	r3, r7
200006fa:	4a21      	ldr	r2, [pc, #132]	; (20000780 <init_GPIO_Ports+0x1ac>)
200006fc:	601a      	str	r2, [r3, #0]
	init.GPIO_Mode = GPIO_Mode_OUT;
200006fe:	003b      	movs	r3, r7
20000700:	2201      	movs	r2, #1
20000702:	711a      	strb	r2, [r3, #4]
	init.GPIO_OType = GPIO_OType_PP;
20000704:	003b      	movs	r3, r7
20000706:	2200      	movs	r2, #0
20000708:	719a      	strb	r2, [r3, #6]
	init.GPIO_PuPd = GPIO_PuPd_NOPULL;
2000070a:	003b      	movs	r3, r7
2000070c:	2200      	movs	r2, #0
2000070e:	71da      	strb	r2, [r3, #7]
	GPIO_Init(GPIOD, &init);
20000710:	003b      	movs	r3, r7
20000712:	4a20      	ldr	r2, [pc, #128]	; (20000794 <init_GPIO_Ports+0x1c0>)
20000714:	0019      	movs	r1, r3
20000716:	0010      	movs	r0, r2
20000718:	f002 fa0c 	bl	20002b34 <GPIO_Init>
	
	//konfigurerar inport GPIO D
	GPIO_StructInit(&init);
2000071c:	003b      	movs	r3, r7
2000071e:	0018      	movs	r0, r3
20000720:	f002 fa94 	bl	20002c4c <GPIO_StructInit>
	init.GPIO_Pin = GPIO_Pin_0 | GPIO_Pin_2 | GPIO_Pin_4 | GPIO_Pin_6 | GPIO_Pin_8 | GPIO_Pin_10 | GPIO_Pin_12 |GPIO_Pin_14;
20000724:	003b      	movs	r3, r7
20000726:	4a18      	ldr	r2, [pc, #96]	; (20000788 <init_GPIO_Ports+0x1b4>)
20000728:	601a      	str	r2, [r3, #0]
	init.GPIO_Mode = GPIO_Mode_IN;
2000072a:	003b      	movs	r3, r7
2000072c:	2200      	movs	r2, #0
2000072e:	711a      	strb	r2, [r3, #4]
	init.GPIO_PuPd = GPIO_PuPd_UP;
20000730:	003b      	movs	r3, r7
20000732:	2201      	movs	r2, #1
20000734:	71da      	strb	r2, [r3, #7]
	GPIO_Init(GPIOD, &init);
20000736:	003b      	movs	r3, r7
20000738:	4a16      	ldr	r2, [pc, #88]	; (20000794 <init_GPIO_Ports+0x1c0>)
2000073a:	0019      	movs	r1, r3
2000073c:	0010      	movs	r0, r2
2000073e:	f002 f9f9 	bl	20002b34 <GPIO_Init>

	//GPIO B UTPORTAR
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE);
20000742:	2101      	movs	r1, #1
20000744:	2002      	movs	r0, #2
20000746:	f002 ff95 	bl	20003674 <RCC_AHB1PeriphClockCmd>
	GPIO_StructInit(&init);
2000074a:	003b      	movs	r3, r7
2000074c:	0018      	movs	r0, r3
2000074e:	f002 fa7d 	bl	20002c4c <GPIO_StructInit>
	init.GPIO_Pin = GPIO_Pin_2;
20000752:	003b      	movs	r3, r7
20000754:	2204      	movs	r2, #4
20000756:	601a      	str	r2, [r3, #0]
	init.GPIO_Mode = GPIO_Mode_OUT;
20000758:	003b      	movs	r3, r7
2000075a:	2201      	movs	r2, #1
2000075c:	711a      	strb	r2, [r3, #4]
	init.GPIO_OType = GPIO_OType_PP;
2000075e:	003b      	movs	r3, r7
20000760:	2200      	movs	r2, #0
20000762:	719a      	strb	r2, [r3, #6]
	init.GPIO_PuPd = GPIO_PuPd_NOPULL;
20000764:	003b      	movs	r3, r7
20000766:	2200      	movs	r2, #0
20000768:	71da      	strb	r2, [r3, #7]
	GPIO_Init(GPIOB, &init);
2000076a:	003b      	movs	r3, r7
2000076c:	4a0a      	ldr	r2, [pc, #40]	; (20000798 <init_GPIO_Ports+0x1c4>)
2000076e:	0019      	movs	r1, r3
20000770:	0010      	movs	r0, r2
20000772:	f002 f9df 	bl	20002b34 <GPIO_Init>
20000776:	46c0      	nop			; (mov r8, r8)
20000778:	46bd      	mov	sp, r7
2000077a:	b002      	add	sp, #8
2000077c:	bd80      	pop	{r7, pc}
2000077e:	46c0      	nop			; (mov r8, r8)
20000780:	0000aaaa 	andeq	sl, r0, sl, lsr #21
20000784:	40021000 	andmi	r1, r2, r0
20000788:	00005555 	andeq	r5, r0, r5, asr r5
2000078c:	40020000 	andmi	r0, r2, r0
20000790:	40020800 	andmi	r0, r2, r0, lsl #16
20000794:	40020c00 	andmi	r0, r2, r0, lsl #24
20000798:	40020400 	andmi	r0, r2, r0, lsl #8

2000079c <delay>:
// =============================== ALL FUNCTIONS FOR THE DOORS CHECKING
const int larming = 1;
const int cLarm = 2;
const int dissarmedBit = 4;
// allmäna
void delay (int mili){
2000079c:	b580      	push	{r7, lr}
2000079e:	b084      	sub	sp, #16
200007a0:	af00      	add	r7, sp, #0
200007a2:	6078      	str	r0, [r7, #4]
		int time = msTicks + mili;
200007a4:	4b07      	ldr	r3, [pc, #28]	; (200007c4 <delay+0x28>)
200007a6:	681a      	ldr	r2, [r3, #0]
200007a8:	687b      	ldr	r3, [r7, #4]
200007aa:	18d3      	adds	r3, r2, r3
200007ac:	60fb      	str	r3, [r7, #12]
		while(time > msTicks);
200007ae:	46c0      	nop			; (mov r8, r8)
200007b0:	68fa      	ldr	r2, [r7, #12]
200007b2:	4b04      	ldr	r3, [pc, #16]	; (200007c4 <delay+0x28>)
200007b4:	681b      	ldr	r3, [r3, #0]
200007b6:	429a      	cmp	r2, r3
200007b8:	d8fa      	bhi.n	200007b0 <delay+0x14>
	}
200007ba:	46c0      	nop			; (mov r8, r8)
200007bc:	46bd      	mov	sp, r7
200007be:	b004      	add	sp, #16
200007c0:	bd80      	pop	{r7, pc}
200007c2:	46c0      	nop			; (mov r8, r8)
200007c4:	20003e04 	andcs	r3, r0, r4, lsl #28

200007c8 <is_door_armed>:

// functions for while loop in main
int is_door_armed(int controlbitts){
200007c8:	b580      	push	{r7, lr}
200007ca:	b082      	sub	sp, #8
200007cc:	af00      	add	r7, sp, #0
200007ce:	6078      	str	r0, [r7, #4]
    if (controlbitts & dissarmedBit){
200007d0:	2204      	movs	r2, #4
200007d2:	687b      	ldr	r3, [r7, #4]
200007d4:	4013      	ands	r3, r2
200007d6:	d001      	beq.n	200007dc <is_door_armed+0x14>
        return 0;
200007d8:	2300      	movs	r3, #0
200007da:	e000      	b.n	200007de <is_door_armed+0x16>
    } else
    {
        return 1;
200007dc:	2301      	movs	r3, #1
    }
}
200007de:	0018      	movs	r0, r3
200007e0:	46bd      	mov	sp, r7
200007e2:	b002      	add	sp, #8
200007e4:	bd80      	pop	{r7, pc}

200007e6 <check_door_status>:

void check_door_status (door *aDoors, int arrayLength){
200007e6:	b580      	push	{r7, lr}
200007e8:	b084      	sub	sp, #16
200007ea:	af00      	add	r7, sp, #0
200007ec:	6078      	str	r0, [r7, #4]
200007ee:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < arrayLength; i++)
200007f0:	2300      	movs	r3, #0
200007f2:	60fb      	str	r3, [r7, #12]
200007f4:	e036      	b.n	20000864 <check_door_status+0x7e>
    {
        if (is_door_armed(aDoors->controlbits))
200007f6:	687b      	ldr	r3, [r7, #4]
200007f8:	685b      	ldr	r3, [r3, #4]
200007fa:	0018      	movs	r0, r3
200007fc:	f7ff ffe4 	bl	200007c8 <is_door_armed>
20000800:	1e03      	subs	r3, r0, #0
20000802:	d029      	beq.n	20000858 <check_door_status+0x72>
        {
           if (!GPIO_ReadInputDataBit(aDoors->GPIO_type, aDoors->GPIO_read)){ //GPIO pinnen är noll ifall dörren är stängd därför !
20000804:	687b      	ldr	r3, [r7, #4]
20000806:	69da      	ldr	r2, [r3, #28]
20000808:	687b      	ldr	r3, [r7, #4]
2000080a:	695b      	ldr	r3, [r3, #20]
2000080c:	b29b      	uxth	r3, r3
2000080e:	0019      	movs	r1, r3
20000810:	0010      	movs	r0, r2
20000812:	f002 fa58 	bl	20002cc6 <GPIO_ReadInputDataBit>
20000816:	1e03      	subs	r3, r0, #0
20000818:	d10a      	bne.n	20000830 <check_door_status+0x4a>
					aDoors->controlbits &= 0xFFFF - larming - cLarm; //Nollställer kontrollbiten för larm ifall en dörr är öppen och spam kontrollbiten för central		
2000081a:	687b      	ldr	r3, [r7, #4]
2000081c:	685b      	ldr	r3, [r3, #4]
2000081e:	2201      	movs	r2, #1
20000820:	4914      	ldr	r1, [pc, #80]	; (20000874 <check_door_status+0x8e>)
20000822:	1a8a      	subs	r2, r1, r2
20000824:	2102      	movs	r1, #2
20000826:	1a52      	subs	r2, r2, r1
20000828:	401a      	ands	r2, r3
2000082a:	687b      	ldr	r3, [r7, #4]
2000082c:	605a      	str	r2, [r3, #4]
2000082e:	e013      	b.n	20000858 <check_door_status+0x72>
			}
			else{
                if (!aDoors->controlbits & larming) // Kollar så att dörren inte larmar sen innan så larmtick inte uppdateras hela tiden
20000830:	687b      	ldr	r3, [r7, #4]
20000832:	685b      	ldr	r3, [r3, #4]
20000834:	425a      	negs	r2, r3
20000836:	4153      	adcs	r3, r2
20000838:	b2db      	uxtb	r3, r3
2000083a:	001a      	movs	r2, r3
2000083c:	2301      	movs	r3, #1
2000083e:	4013      	ands	r3, r2
20000840:	d004      	beq.n	2000084c <check_door_status+0x66>
                {
                    aDoors->larmTick = msTicks;
20000842:	4b0d      	ldr	r3, [pc, #52]	; (20000878 <check_door_status+0x92>)
20000844:	681b      	ldr	r3, [r3, #0]
20000846:	001a      	movs	r2, r3
20000848:	687b      	ldr	r3, [r7, #4]
2000084a:	619a      	str	r2, [r3, #24]
                }
                aDoors->controlbits |= larming; //sätter dörrens kontrolbit för larm
2000084c:	687b      	ldr	r3, [r7, #4]
2000084e:	685b      	ldr	r3, [r3, #4]
20000850:	2201      	movs	r2, #1
20000852:	431a      	orrs	r2, r3
20000854:	687b      	ldr	r3, [r7, #4]
20000856:	605a      	str	r2, [r3, #4]
            }
        }
       aDoors++;   
20000858:	687b      	ldr	r3, [r7, #4]
2000085a:	3320      	adds	r3, #32
2000085c:	607b      	str	r3, [r7, #4]
    for (int i = 0; i < arrayLength; i++)
2000085e:	68fb      	ldr	r3, [r7, #12]
20000860:	3301      	adds	r3, #1
20000862:	60fb      	str	r3, [r7, #12]
20000864:	68fa      	ldr	r2, [r7, #12]
20000866:	683b      	ldr	r3, [r7, #0]
20000868:	429a      	cmp	r2, r3
2000086a:	dbc4      	blt.n	200007f6 <check_door_status+0x10>
    }
    
}
2000086c:	46c0      	nop			; (mov r8, r8)
2000086e:	46bd      	mov	sp, r7
20000870:	b004      	add	sp, #16
20000872:	bd80      	pop	{r7, pc}
20000874:	0000ffff 	strdeq	pc, [r0], -pc	; <UNPREDICTABLE>
20000878:	20003e04 	andcs	r3, r0, r4, lsl #28

2000087c <door_uppdate_lamps>:

void door_uppdate_lamps (door *door){
2000087c:	b580      	push	{r7, lr}
2000087e:	b084      	sub	sp, #16
20000880:	af00      	add	r7, sp, #0
20000882:	6078      	str	r0, [r7, #4]
    uint32_t larmTime = door->larmTick + 1000 * 10 * door->time_larm;
20000884:	687b      	ldr	r3, [r7, #4]
20000886:	699a      	ldr	r2, [r3, #24]
20000888:	687b      	ldr	r3, [r7, #4]
2000088a:	7a1b      	ldrb	r3, [r3, #8]
2000088c:	0019      	movs	r1, r3
2000088e:	4b12      	ldr	r3, [pc, #72]	; (200008d8 <door_uppdate_lamps+0x5c>)
20000890:	434b      	muls	r3, r1
20000892:	18d3      	adds	r3, r2, r3
20000894:	60fb      	str	r3, [r7, #12]
    if (door->controlbits & larming && msTicks > larmTime) {
20000896:	687b      	ldr	r3, [r7, #4]
20000898:	685b      	ldr	r3, [r3, #4]
2000089a:	2201      	movs	r2, #1
2000089c:	4013      	ands	r3, r2
2000089e:	d00e      	beq.n	200008be <door_uppdate_lamps+0x42>
200008a0:	4b0e      	ldr	r3, [pc, #56]	; (200008dc <door_uppdate_lamps+0x60>)
200008a2:	681b      	ldr	r3, [r3, #0]
200008a4:	68fa      	ldr	r2, [r7, #12]
200008a6:	429a      	cmp	r2, r3
200008a8:	d209      	bcs.n	200008be <door_uppdate_lamps+0x42>
            GPIO_SetBits(door->GPIO_type, door->GPIO_lamp); // tänder lampan ifall tiden för att dörren ska larma har gått
200008aa:	687b      	ldr	r3, [r7, #4]
200008ac:	69da      	ldr	r2, [r3, #28]
200008ae:	687b      	ldr	r3, [r7, #4]
200008b0:	691b      	ldr	r3, [r3, #16]
200008b2:	b29b      	uxth	r3, r3
200008b4:	0019      	movs	r1, r3
200008b6:	0010      	movs	r0, r2
200008b8:	f002 fa5d 	bl	20002d76 <GPIO_SetBits>
200008bc:	e008      	b.n	200008d0 <door_uppdate_lamps+0x54>
    }
    else{
            GPIO_ResetBits(door->GPIO_type, door->GPIO_lamp);	// släcker lampan annars
200008be:	687b      	ldr	r3, [r7, #4]
200008c0:	69da      	ldr	r2, [r3, #28]
200008c2:	687b      	ldr	r3, [r7, #4]
200008c4:	691b      	ldr	r3, [r3, #16]
200008c6:	b29b      	uxth	r3, r3
200008c8:	0019      	movs	r1, r3
200008ca:	0010      	movs	r0, r2
200008cc:	f002 fa62 	bl	20002d94 <GPIO_ResetBits>
        }
}
200008d0:	46c0      	nop			; (mov r8, r8)
200008d2:	46bd      	mov	sp, r7
200008d4:	b004      	add	sp, #16
200008d6:	bd80      	pop	{r7, pc}
200008d8:	00002710 	andeq	r2, r0, r0, lsl r7
200008dc:	20003e04 	andcs	r3, r0, r4, lsl #28

200008e0 <central_larm>:

int central_larm(door *door){
200008e0:	b580      	push	{r7, lr}
200008e2:	b084      	sub	sp, #16
200008e4:	af00      	add	r7, sp, #0
200008e6:	6078      	str	r0, [r7, #4]
    uint32_t larmTime = door->larmTick + 1000 * 10 * door->time_central_larm;
200008e8:	687b      	ldr	r3, [r7, #4]
200008ea:	699a      	ldr	r2, [r3, #24]
200008ec:	687b      	ldr	r3, [r7, #4]
200008ee:	7a5b      	ldrb	r3, [r3, #9]
200008f0:	0019      	movs	r1, r3
200008f2:	4b10      	ldr	r3, [pc, #64]	; (20000934 <central_larm+0x54>)
200008f4:	434b      	muls	r3, r1
200008f6:	18d3      	adds	r3, r2, r3
200008f8:	60fb      	str	r3, [r7, #12]
    if(door->controlbits&larming && msTicks>larmTime && !(door->controlbits & cLarm)){
200008fa:	687b      	ldr	r3, [r7, #4]
200008fc:	685b      	ldr	r3, [r3, #4]
200008fe:	2201      	movs	r2, #1
20000900:	4013      	ands	r3, r2
20000902:	d011      	beq.n	20000928 <central_larm+0x48>
20000904:	4b0c      	ldr	r3, [pc, #48]	; (20000938 <central_larm+0x58>)
20000906:	681b      	ldr	r3, [r3, #0]
20000908:	68fa      	ldr	r2, [r7, #12]
2000090a:	429a      	cmp	r2, r3
2000090c:	d20c      	bcs.n	20000928 <central_larm+0x48>
2000090e:	687b      	ldr	r3, [r7, #4]
20000910:	685b      	ldr	r3, [r3, #4]
20000912:	2202      	movs	r2, #2
20000914:	4013      	ands	r3, r2
20000916:	d107      	bne.n	20000928 <central_larm+0x48>
    	door->controlbits |= cLarm;    
20000918:	687b      	ldr	r3, [r7, #4]
2000091a:	685b      	ldr	r3, [r3, #4]
2000091c:	2202      	movs	r2, #2
2000091e:	431a      	orrs	r2, r3
20000920:	687b      	ldr	r3, [r7, #4]
20000922:	605a      	str	r2, [r3, #4]
        return 1;
20000924:	2301      	movs	r3, #1
20000926:	e000      	b.n	2000092a <central_larm+0x4a>
    }else{
        return 0;
20000928:	2300      	movs	r3, #0
    }
}
2000092a:	0018      	movs	r0, r3
2000092c:	46bd      	mov	sp, r7
2000092e:	b004      	add	sp, #16
20000930:	bd80      	pop	{r7, pc}
20000932:	46c0      	nop			; (mov r8, r8)
20000934:	00002710 	andeq	r2, r0, r0, lsl r7
20000938:	20003e04 	andcs	r3, r0, r4, lsl #28

2000093c <startup_lights>:

// ================================== LIGHTS ========================================================= 
void startup_lights (door *aDoors, int aLength){
2000093c:	b580      	push	{r7, lr}
2000093e:	b086      	sub	sp, #24
20000940:	af00      	add	r7, sp, #0
20000942:	6078      	str	r0, [r7, #4]
20000944:	6039      	str	r1, [r7, #0]
	
	for (int i = 0; i < aLength; i++) //CHRISTMAST LIGHTS FTW
20000946:	2300      	movs	r3, #0
20000948:	617b      	str	r3, [r7, #20]
2000094a:	e011      	b.n	20000970 <startup_lights+0x34>
	{
		GPIO_SetBits(aDoors->GPIO_type, aDoors->GPIO_lamp);
2000094c:	687b      	ldr	r3, [r7, #4]
2000094e:	69da      	ldr	r2, [r3, #28]
20000950:	687b      	ldr	r3, [r7, #4]
20000952:	691b      	ldr	r3, [r3, #16]
20000954:	b29b      	uxth	r3, r3
20000956:	0019      	movs	r1, r3
20000958:	0010      	movs	r0, r2
2000095a:	f002 fa0c 	bl	20002d76 <GPIO_SetBits>
		delay(100);	
2000095e:	2064      	movs	r0, #100	; 0x64
20000960:	f7ff ff1c 	bl	2000079c <delay>
        aDoors++;
20000964:	687b      	ldr	r3, [r7, #4]
20000966:	3320      	adds	r3, #32
20000968:	607b      	str	r3, [r7, #4]
	for (int i = 0; i < aLength; i++) //CHRISTMAST LIGHTS FTW
2000096a:	697b      	ldr	r3, [r7, #20]
2000096c:	3301      	adds	r3, #1
2000096e:	617b      	str	r3, [r7, #20]
20000970:	697a      	ldr	r2, [r7, #20]
20000972:	683b      	ldr	r3, [r7, #0]
20000974:	429a      	cmp	r2, r3
20000976:	dbe9      	blt.n	2000094c <startup_lights+0x10>
		
	}
	for (int i = aLength; i > 0 ; i--) //CHRISTMAST LIGHTS FTW
20000978:	683b      	ldr	r3, [r7, #0]
2000097a:	613b      	str	r3, [r7, #16]
2000097c:	e011      	b.n	200009a2 <startup_lights+0x66>
	{
		GPIO_ResetBits(aDoors->GPIO_type, aDoors->GPIO_lamp);
2000097e:	687b      	ldr	r3, [r7, #4]
20000980:	69da      	ldr	r2, [r3, #28]
20000982:	687b      	ldr	r3, [r7, #4]
20000984:	691b      	ldr	r3, [r3, #16]
20000986:	b29b      	uxth	r3, r3
20000988:	0019      	movs	r1, r3
2000098a:	0010      	movs	r0, r2
2000098c:	f002 fa02 	bl	20002d94 <GPIO_ResetBits>
		delay(100);
20000990:	2064      	movs	r0, #100	; 0x64
20000992:	f7ff ff03 	bl	2000079c <delay>
        aDoors--;
20000996:	687b      	ldr	r3, [r7, #4]
20000998:	3b20      	subs	r3, #32
2000099a:	607b      	str	r3, [r7, #4]
	for (int i = aLength; i > 0 ; i--) //CHRISTMAST LIGHTS FTW
2000099c:	693b      	ldr	r3, [r7, #16]
2000099e:	3b01      	subs	r3, #1
200009a0:	613b      	str	r3, [r7, #16]
200009a2:	693b      	ldr	r3, [r7, #16]
200009a4:	2b00      	cmp	r3, #0
200009a6:	dcea      	bgt.n	2000097e <startup_lights+0x42>
	}
	delay(200);
200009a8:	20c8      	movs	r0, #200	; 0xc8
200009aa:	f7ff fef7 	bl	2000079c <delay>
	for (int i = 0; i < aLength; i++) //CHRISTMAST LIGHTS FTW
200009ae:	2300      	movs	r3, #0
200009b0:	60fb      	str	r3, [r7, #12]
200009b2:	e00e      	b.n	200009d2 <startup_lights+0x96>
	{
		GPIO_SetBits(aDoors->GPIO_type, aDoors->GPIO_lamp);
200009b4:	687b      	ldr	r3, [r7, #4]
200009b6:	69da      	ldr	r2, [r3, #28]
200009b8:	687b      	ldr	r3, [r7, #4]
200009ba:	691b      	ldr	r3, [r3, #16]
200009bc:	b29b      	uxth	r3, r3
200009be:	0019      	movs	r1, r3
200009c0:	0010      	movs	r0, r2
200009c2:	f002 f9d8 	bl	20002d76 <GPIO_SetBits>
        aDoors++;
200009c6:	687b      	ldr	r3, [r7, #4]
200009c8:	3320      	adds	r3, #32
200009ca:	607b      	str	r3, [r7, #4]
	for (int i = 0; i < aLength; i++) //CHRISTMAST LIGHTS FTW
200009cc:	68fb      	ldr	r3, [r7, #12]
200009ce:	3301      	adds	r3, #1
200009d0:	60fb      	str	r3, [r7, #12]
200009d2:	68fa      	ldr	r2, [r7, #12]
200009d4:	683b      	ldr	r3, [r7, #0]
200009d6:	429a      	cmp	r2, r3
200009d8:	dbec      	blt.n	200009b4 <startup_lights+0x78>
	}
	delay(3000);
200009da:	4b0f      	ldr	r3, [pc, #60]	; (20000a18 <startup_lights+0xdc>)
200009dc:	0018      	movs	r0, r3
200009de:	f7ff fedd 	bl	2000079c <delay>
	for (int i = 0; i < aLength; i++) //CHRISTMAST LIGHTS FTW
200009e2:	2300      	movs	r3, #0
200009e4:	60bb      	str	r3, [r7, #8]
200009e6:	e00e      	b.n	20000a06 <startup_lights+0xca>
	{
		GPIO_ResetBits(aDoors->GPIO_type, aDoors->GPIO_lamp);
200009e8:	687b      	ldr	r3, [r7, #4]
200009ea:	69da      	ldr	r2, [r3, #28]
200009ec:	687b      	ldr	r3, [r7, #4]
200009ee:	691b      	ldr	r3, [r3, #16]
200009f0:	b29b      	uxth	r3, r3
200009f2:	0019      	movs	r1, r3
200009f4:	0010      	movs	r0, r2
200009f6:	f002 f9cd 	bl	20002d94 <GPIO_ResetBits>
        aDoors--;
200009fa:	687b      	ldr	r3, [r7, #4]
200009fc:	3b20      	subs	r3, #32
200009fe:	607b      	str	r3, [r7, #4]
	for (int i = 0; i < aLength; i++) //CHRISTMAST LIGHTS FTW
20000a00:	68bb      	ldr	r3, [r7, #8]
20000a02:	3301      	adds	r3, #1
20000a04:	60bb      	str	r3, [r7, #8]
20000a06:	68ba      	ldr	r2, [r7, #8]
20000a08:	683b      	ldr	r3, [r7, #0]
20000a0a:	429a      	cmp	r2, r3
20000a0c:	dbec      	blt.n	200009e8 <startup_lights+0xac>
	}
20000a0e:	46c0      	nop			; (mov r8, r8)
20000a10:	46bd      	mov	sp, r7
20000a12:	b006      	add	sp, #24
20000a14:	bd80      	pop	{r7, pc}
20000a16:	46c0      	nop			; (mov r8, r8)
20000a18:	00000bb8 			; <UNDEFINED> instruction: 0x00000bb8

20000a1c <NVIC_PriorityGroupConfig>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void NVIC_PriorityGroupConfig(uint32_t NVIC_PriorityGroup)
{
20000a1c:	b580      	push	{r7, lr}
20000a1e:	b082      	sub	sp, #8
20000a20:	af00      	add	r7, sp, #0
20000a22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
20000a24:	4b04      	ldr	r3, [pc, #16]	; (20000a38 <NVIC_PriorityGroupConfig+0x1c>)
20000a26:	687a      	ldr	r2, [r7, #4]
20000a28:	4904      	ldr	r1, [pc, #16]	; (20000a3c <NVIC_PriorityGroupConfig+0x20>)
20000a2a:	430a      	orrs	r2, r1
20000a2c:	60da      	str	r2, [r3, #12]
}
20000a2e:	46c0      	nop			; (mov r8, r8)
20000a30:	46bd      	mov	sp, r7
20000a32:	b002      	add	sp, #8
20000a34:	bd80      	pop	{r7, pc}
20000a36:	46c0      	nop			; (mov r8, r8)
20000a38:	e000ed00 	and	lr, r0, r0, lsl #26
20000a3c:	05fa0000 	ldrbeq	r0, [sl, #0]!

20000a40 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
20000a40:	b5b0      	push	{r4, r5, r7, lr}
20000a42:	b084      	sub	sp, #16
20000a44:	af00      	add	r7, sp, #0
20000a46:	6078      	str	r0, [r7, #4]
  uint8_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
20000a48:	230f      	movs	r3, #15
20000a4a:	18fb      	adds	r3, r7, r3
20000a4c:	2200      	movs	r2, #0
20000a4e:	701a      	strb	r2, [r3, #0]
20000a50:	230e      	movs	r3, #14
20000a52:	18fb      	adds	r3, r7, r3
20000a54:	2200      	movs	r2, #0
20000a56:	701a      	strb	r2, [r3, #0]
20000a58:	230d      	movs	r3, #13
20000a5a:	18fb      	adds	r3, r7, r3
20000a5c:	220f      	movs	r2, #15
20000a5e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
20000a60:	687b      	ldr	r3, [r7, #4]
20000a62:	78db      	ldrb	r3, [r3, #3]
20000a64:	2b00      	cmp	r3, #0
20000a66:	d04d      	beq.n	20000b04 <NVIC_Init+0xc4>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
20000a68:	4b31      	ldr	r3, [pc, #196]	; (20000b30 <NVIC_Init+0xf0>)
20000a6a:	68db      	ldr	r3, [r3, #12]
20000a6c:	43db      	mvns	r3, r3
20000a6e:	0a1b      	lsrs	r3, r3, #8
20000a70:	b2da      	uxtb	r2, r3
20000a72:	200f      	movs	r0, #15
20000a74:	183b      	adds	r3, r7, r0
20000a76:	2107      	movs	r1, #7
20000a78:	400a      	ands	r2, r1
20000a7a:	701a      	strb	r2, [r3, #0]
    tmppre = (0x4 - tmppriority);
20000a7c:	250e      	movs	r5, #14
20000a7e:	197b      	adds	r3, r7, r5
20000a80:	183a      	adds	r2, r7, r0
20000a82:	7812      	ldrb	r2, [r2, #0]
20000a84:	2104      	movs	r1, #4
20000a86:	1a8a      	subs	r2, r1, r2
20000a88:	701a      	strb	r2, [r3, #0]
    tmpsub = tmpsub >> tmppriority;
20000a8a:	240d      	movs	r4, #13
20000a8c:	193b      	adds	r3, r7, r4
20000a8e:	781a      	ldrb	r2, [r3, #0]
20000a90:	0001      	movs	r1, r0
20000a92:	187b      	adds	r3, r7, r1
20000a94:	781b      	ldrb	r3, [r3, #0]
20000a96:	411a      	asrs	r2, r3
20000a98:	193b      	adds	r3, r7, r4
20000a9a:	701a      	strb	r2, [r3, #0]

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
20000a9c:	687b      	ldr	r3, [r7, #4]
20000a9e:	785b      	ldrb	r3, [r3, #1]
20000aa0:	001a      	movs	r2, r3
20000aa2:	197b      	adds	r3, r7, r5
20000aa4:	781b      	ldrb	r3, [r3, #0]
20000aa6:	409a      	lsls	r2, r3
20000aa8:	0008      	movs	r0, r1
20000aaa:	187b      	adds	r3, r7, r1
20000aac:	701a      	strb	r2, [r3, #0]
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
20000aae:	687b      	ldr	r3, [r7, #4]
20000ab0:	789b      	ldrb	r3, [r3, #2]
20000ab2:	193a      	adds	r2, r7, r4
20000ab4:	7812      	ldrb	r2, [r2, #0]
20000ab6:	4013      	ands	r3, r2
20000ab8:	b2d9      	uxtb	r1, r3
20000aba:	183b      	adds	r3, r7, r0
20000abc:	183a      	adds	r2, r7, r0
20000abe:	7812      	ldrb	r2, [r2, #0]
20000ac0:	430a      	orrs	r2, r1
20000ac2:	701a      	strb	r2, [r3, #0]
        
    tmppriority = tmppriority << 0x04;
20000ac4:	183b      	adds	r3, r7, r0
20000ac6:	183a      	adds	r2, r7, r0
20000ac8:	7812      	ldrb	r2, [r2, #0]
20000aca:	0112      	lsls	r2, r2, #4
20000acc:	701a      	strb	r2, [r3, #0]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
20000ace:	4a19      	ldr	r2, [pc, #100]	; (20000b34 <NVIC_Init+0xf4>)
20000ad0:	687b      	ldr	r3, [r7, #4]
20000ad2:	781b      	ldrb	r3, [r3, #0]
20000ad4:	0019      	movs	r1, r3
20000ad6:	23c0      	movs	r3, #192	; 0xc0
20000ad8:	009b      	lsls	r3, r3, #2
20000ada:	1852      	adds	r2, r2, r1
20000adc:	18d3      	adds	r3, r2, r3
20000ade:	183a      	adds	r2, r7, r0
20000ae0:	7812      	ldrb	r2, [r2, #0]
20000ae2:	701a      	strb	r2, [r3, #0]
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
20000ae4:	687b      	ldr	r3, [r7, #4]
20000ae6:	781b      	ldrb	r3, [r3, #0]
20000ae8:	001a      	movs	r2, r3
20000aea:	231f      	movs	r3, #31
20000aec:	4013      	ands	r3, r2
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
20000aee:	4911      	ldr	r1, [pc, #68]	; (20000b34 <NVIC_Init+0xf4>)
20000af0:	687a      	ldr	r2, [r7, #4]
20000af2:	7812      	ldrb	r2, [r2, #0]
20000af4:	0952      	lsrs	r2, r2, #5
20000af6:	b2d2      	uxtb	r2, r2
20000af8:	0010      	movs	r0, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
20000afa:	2201      	movs	r2, #1
20000afc:	409a      	lsls	r2, r3
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
20000afe:	0083      	lsls	r3, r0, #2
20000b00:	505a      	str	r2, [r3, r1]
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
20000b02:	e010      	b.n	20000b26 <NVIC_Init+0xe6>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
20000b04:	687b      	ldr	r3, [r7, #4]
20000b06:	781b      	ldrb	r3, [r3, #0]
20000b08:	001a      	movs	r2, r3
20000b0a:	231f      	movs	r3, #31
20000b0c:	4013      	ands	r3, r2
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
20000b0e:	4909      	ldr	r1, [pc, #36]	; (20000b34 <NVIC_Init+0xf4>)
20000b10:	687a      	ldr	r2, [r7, #4]
20000b12:	7812      	ldrb	r2, [r2, #0]
20000b14:	0952      	lsrs	r2, r2, #5
20000b16:	b2d2      	uxtb	r2, r2
20000b18:	0010      	movs	r0, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
20000b1a:	2201      	movs	r2, #1
20000b1c:	409a      	lsls	r2, r3
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
20000b1e:	0003      	movs	r3, r0
20000b20:	3320      	adds	r3, #32
20000b22:	009b      	lsls	r3, r3, #2
20000b24:	505a      	str	r2, [r3, r1]
}
20000b26:	46c0      	nop			; (mov r8, r8)
20000b28:	46bd      	mov	sp, r7
20000b2a:	b004      	add	sp, #16
20000b2c:	bdb0      	pop	{r4, r5, r7, pc}
20000b2e:	46c0      	nop			; (mov r8, r8)
20000b30:	e000ed00 	and	lr, r0, r0, lsl #26
20000b34:	e000e100 	and	lr, r0, r0, lsl #2

20000b38 <NVIC_SetVectorTable>:
  *     @arg NVIC_VectTab_FLASH: Vector Table in internal FLASH.
  * @param  Offset: Vector Table base offset field. This value must be a multiple of 0x200.
  * @retval None
  */
void NVIC_SetVectorTable(uint32_t NVIC_VectTab, uint32_t Offset)
{ 
20000b38:	b580      	push	{r7, lr}
20000b3a:	b082      	sub	sp, #8
20000b3c:	af00      	add	r7, sp, #0
20000b3e:	6078      	str	r0, [r7, #4]
20000b40:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_VECTTAB(NVIC_VectTab));
  assert_param(IS_NVIC_OFFSET(Offset));  
   
  SCB->VTOR = NVIC_VectTab | (Offset & (uint32_t)0x1FFFFF80);
20000b42:	683b      	ldr	r3, [r7, #0]
20000b44:	4a05      	ldr	r2, [pc, #20]	; (20000b5c <NVIC_SetVectorTable+0x24>)
20000b46:	4013      	ands	r3, r2
20000b48:	0019      	movs	r1, r3
20000b4a:	4b05      	ldr	r3, [pc, #20]	; (20000b60 <NVIC_SetVectorTable+0x28>)
20000b4c:	687a      	ldr	r2, [r7, #4]
20000b4e:	430a      	orrs	r2, r1
20000b50:	609a      	str	r2, [r3, #8]
}
20000b52:	46c0      	nop			; (mov r8, r8)
20000b54:	46bd      	mov	sp, r7
20000b56:	b002      	add	sp, #8
20000b58:	bd80      	pop	{r7, pc}
20000b5a:	46c0      	nop			; (mov r8, r8)
20000b5c:	1fffff80 	svcne	0x00ffff80
20000b60:	e000ed00 	and	lr, r0, r0, lsl #26

20000b64 <NVIC_SystemLPConfig>:
  *     @arg NVIC_LP_SLEEPONEXIT: Low Power Sleep on Exit.
  * @param  NewState: new state of LP condition. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void NVIC_SystemLPConfig(uint8_t LowPowerMode, FunctionalState NewState)
{
20000b64:	b580      	push	{r7, lr}
20000b66:	b082      	sub	sp, #8
20000b68:	af00      	add	r7, sp, #0
20000b6a:	0002      	movs	r2, r0
20000b6c:	1dfb      	adds	r3, r7, #7
20000b6e:	701a      	strb	r2, [r3, #0]
20000b70:	1dbb      	adds	r3, r7, #6
20000b72:	1c0a      	adds	r2, r1, #0
20000b74:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_LP(LowPowerMode));
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  if (NewState != DISABLE)
20000b76:	1dbb      	adds	r3, r7, #6
20000b78:	781b      	ldrb	r3, [r3, #0]
20000b7a:	2b00      	cmp	r3, #0
20000b7c:	d007      	beq.n	20000b8e <NVIC_SystemLPConfig+0x2a>
  {
    SCB->SCR |= LowPowerMode;
20000b7e:	4b0a      	ldr	r3, [pc, #40]	; (20000ba8 <NVIC_SystemLPConfig+0x44>)
20000b80:	6919      	ldr	r1, [r3, #16]
20000b82:	1dfb      	adds	r3, r7, #7
20000b84:	781a      	ldrb	r2, [r3, #0]
20000b86:	4b08      	ldr	r3, [pc, #32]	; (20000ba8 <NVIC_SystemLPConfig+0x44>)
20000b88:	430a      	orrs	r2, r1
20000b8a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    SCB->SCR &= (uint32_t)(~(uint32_t)LowPowerMode);
  }
}
20000b8c:	e007      	b.n	20000b9e <NVIC_SystemLPConfig+0x3a>
    SCB->SCR &= (uint32_t)(~(uint32_t)LowPowerMode);
20000b8e:	4b06      	ldr	r3, [pc, #24]	; (20000ba8 <NVIC_SystemLPConfig+0x44>)
20000b90:	691a      	ldr	r2, [r3, #16]
20000b92:	1dfb      	adds	r3, r7, #7
20000b94:	781b      	ldrb	r3, [r3, #0]
20000b96:	43d9      	mvns	r1, r3
20000b98:	4b03      	ldr	r3, [pc, #12]	; (20000ba8 <NVIC_SystemLPConfig+0x44>)
20000b9a:	400a      	ands	r2, r1
20000b9c:	611a      	str	r2, [r3, #16]
}
20000b9e:	46c0      	nop			; (mov r8, r8)
20000ba0:	46bd      	mov	sp, r7
20000ba2:	b002      	add	sp, #8
20000ba4:	bd80      	pop	{r7, pc}
20000ba6:	46c0      	nop			; (mov r8, r8)
20000ba8:	e000ed00 	and	lr, r0, r0, lsl #26

20000bac <SysTick_CLKSourceConfig>:
  *     @arg SysTick_CLKSource_HCLK_Div8: AHB clock divided by 8 selected as SysTick clock source.
  *     @arg SysTick_CLKSource_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void SysTick_CLKSourceConfig(uint32_t SysTick_CLKSource)
{
20000bac:	b580      	push	{r7, lr}
20000bae:	b082      	sub	sp, #8
20000bb0:	af00      	add	r7, sp, #0
20000bb2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(SysTick_CLKSource));
  if (SysTick_CLKSource == SysTick_CLKSource_HCLK)
20000bb4:	687b      	ldr	r3, [r7, #4]
20000bb6:	2b04      	cmp	r3, #4
20000bb8:	d106      	bne.n	20000bc8 <SysTick_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SysTick_CLKSource_HCLK;
20000bba:	4b08      	ldr	r3, [pc, #32]	; (20000bdc <SysTick_CLKSourceConfig+0x30>)
20000bbc:	681a      	ldr	r2, [r3, #0]
20000bbe:	4b07      	ldr	r3, [pc, #28]	; (20000bdc <SysTick_CLKSourceConfig+0x30>)
20000bc0:	2104      	movs	r1, #4
20000bc2:	430a      	orrs	r2, r1
20000bc4:	601a      	str	r2, [r3, #0]
  }
  else
  {
    SysTick->CTRL &= SysTick_CLKSource_HCLK_Div8;
  }
}
20000bc6:	e005      	b.n	20000bd4 <SysTick_CLKSourceConfig+0x28>
    SysTick->CTRL &= SysTick_CLKSource_HCLK_Div8;
20000bc8:	4b04      	ldr	r3, [pc, #16]	; (20000bdc <SysTick_CLKSourceConfig+0x30>)
20000bca:	681a      	ldr	r2, [r3, #0]
20000bcc:	4b03      	ldr	r3, [pc, #12]	; (20000bdc <SysTick_CLKSourceConfig+0x30>)
20000bce:	2104      	movs	r1, #4
20000bd0:	438a      	bics	r2, r1
20000bd2:	601a      	str	r2, [r3, #0]
}
20000bd4:	46c0      	nop			; (mov r8, r8)
20000bd6:	46bd      	mov	sp, r7
20000bd8:	b002      	add	sp, #8
20000bda:	bd80      	pop	{r7, pc}
20000bdc:	e000e010 	and	lr, r0, r0, lsl r0

20000be0 <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
20000be0:	b580      	push	{r7, lr}
20000be2:	b082      	sub	sp, #8
20000be4:	af00      	add	r7, sp, #0
20000be6:	0002      	movs	r2, r0
20000be8:	6039      	str	r1, [r7, #0]
20000bea:	1dfb      	adds	r3, r7, #7
20000bec:	701a      	strb	r2, [r3, #0]
  if((int32_t)IRQn < 0) {
20000bee:	1dfb      	adds	r3, r7, #7
20000bf0:	781b      	ldrb	r3, [r3, #0]
20000bf2:	2b7f      	cmp	r3, #127	; 0x7f
20000bf4:	d90d      	bls.n	20000c12 <NVIC_SetPriority+0x32>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
20000bf6:	683b      	ldr	r3, [r7, #0]
20000bf8:	b2da      	uxtb	r2, r3
20000bfa:	490f      	ldr	r1, [pc, #60]	; (20000c38 <NVIC_SetPriority+0x58>)
20000bfc:	1dfb      	adds	r3, r7, #7
20000bfe:	781b      	ldrb	r3, [r3, #0]
20000c00:	0018      	movs	r0, r3
20000c02:	230f      	movs	r3, #15
20000c04:	4003      	ands	r3, r0
20000c06:	3b04      	subs	r3, #4
20000c08:	0112      	lsls	r2, r2, #4
20000c0a:	b2d2      	uxtb	r2, r2
20000c0c:	18cb      	adds	r3, r1, r3
20000c0e:	761a      	strb	r2, [r3, #24]
  }
  else {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
20000c10:	e00d      	b.n	20000c2e <NVIC_SetPriority+0x4e>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
20000c12:	683b      	ldr	r3, [r7, #0]
20000c14:	b2db      	uxtb	r3, r3
20000c16:	4909      	ldr	r1, [pc, #36]	; (20000c3c <NVIC_SetPriority+0x5c>)
20000c18:	1dfa      	adds	r2, r7, #7
20000c1a:	7812      	ldrb	r2, [r2, #0]
20000c1c:	b252      	sxtb	r2, r2
20000c1e:	011b      	lsls	r3, r3, #4
20000c20:	b2d8      	uxtb	r0, r3
20000c22:	23c0      	movs	r3, #192	; 0xc0
20000c24:	009b      	lsls	r3, r3, #2
20000c26:	188a      	adds	r2, r1, r2
20000c28:	18d3      	adds	r3, r2, r3
20000c2a:	1c02      	adds	r2, r0, #0
20000c2c:	701a      	strb	r2, [r3, #0]
}
20000c2e:	46c0      	nop			; (mov r8, r8)
20000c30:	46bd      	mov	sp, r7
20000c32:	b002      	add	sp, #8
20000c34:	bd80      	pop	{r7, pc}
20000c36:	46c0      	nop			; (mov r8, r8)
20000c38:	e000ed00 	and	lr, r0, r0, lsl #26
20000c3c:	e000e100 	and	lr, r0, r0, lsl #2

20000c40 <SysTick_Config>:
    function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
20000c40:	b580      	push	{r7, lr}
20000c42:	b082      	sub	sp, #8
20000c44:	af00      	add	r7, sp, #0
20000c46:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk) { return (1UL); }    /* Reload value impossible */
20000c48:	687b      	ldr	r3, [r7, #4]
20000c4a:	3b01      	subs	r3, #1
20000c4c:	4a0c      	ldr	r2, [pc, #48]	; (20000c80 <SysTick_Config+0x40>)
20000c4e:	4293      	cmp	r3, r2
20000c50:	d901      	bls.n	20000c56 <SysTick_Config+0x16>
20000c52:	2301      	movs	r3, #1
20000c54:	e010      	b.n	20000c78 <SysTick_Config+0x38>

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
20000c56:	4b0b      	ldr	r3, [pc, #44]	; (20000c84 <SysTick_Config+0x44>)
20000c58:	687a      	ldr	r2, [r7, #4]
20000c5a:	3a01      	subs	r2, #1
20000c5c:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
20000c5e:	2301      	movs	r3, #1
20000c60:	425b      	negs	r3, r3
20000c62:	210f      	movs	r1, #15
20000c64:	0018      	movs	r0, r3
20000c66:	f7ff ffbb 	bl	20000be0 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
20000c6a:	4b06      	ldr	r3, [pc, #24]	; (20000c84 <SysTick_Config+0x44>)
20000c6c:	2200      	movs	r2, #0
20000c6e:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
20000c70:	4b04      	ldr	r3, [pc, #16]	; (20000c84 <SysTick_Config+0x44>)
20000c72:	2207      	movs	r2, #7
20000c74:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
20000c76:	2300      	movs	r3, #0
}
20000c78:	0018      	movs	r0, r3
20000c7a:	46bd      	mov	sp, r7
20000c7c:	b002      	add	sp, #8
20000c7e:	bd80      	pop	{r7, pc}
20000c80:	00ffffff 	ldrshteq	pc, [pc], #255	; <UNPREDICTABLE>
20000c84:	e000e010 	and	lr, r0, r0, lsl r0

20000c88 <num_active_doors>:
	GPIO_Pin_6, GPIO_Pin_7, GPIO_Pin_8, GPIO_Pin_9, GPIO_Pin_10, GPIO_Pin_11,
	GPIO_Pin_12, GPIO_Pin_13, GPIO_Pin_14, GPIO_Pin_15};

GPIO_TypeDef* GPIO_Ports[] = {GPIOE, GPIOA, GPIOD, GPIOC};

void num_active_doors (int *counter){
20000c88:	b580      	push	{r7, lr}
20000c8a:	b084      	sub	sp, #16
20000c8c:	af00      	add	r7, sp, #0
20000c8e:	6078      	str	r0, [r7, #4]
	for (int j = 0; j < (sizeof(GPIO_Ports) /sizeof(GPIO_TypeDef *)); j++)
20000c90:	2300      	movs	r3, #0
20000c92:	60fb      	str	r3, [r7, #12]
20000c94:	e01d      	b.n	20000cd2 <num_active_doors+0x4a>
		{
			for (int i = 0; i < sizeof(GPIO_Pins) / sizeof(uint16_t); i = i + 2)
20000c96:	2300      	movs	r3, #0
20000c98:	60bb      	str	r3, [r7, #8]
20000c9a:	e014      	b.n	20000cc6 <num_active_doors+0x3e>
			{
				if(!GPIO_ReadInputDataBit(GPIO_Ports[j], GPIO_Pins[i])){
20000c9c:	4b10      	ldr	r3, [pc, #64]	; (20000ce0 <num_active_doors+0x58>)
20000c9e:	68fa      	ldr	r2, [r7, #12]
20000ca0:	0092      	lsls	r2, r2, #2
20000ca2:	58d0      	ldr	r0, [r2, r3]
20000ca4:	4b0f      	ldr	r3, [pc, #60]	; (20000ce4 <num_active_doors+0x5c>)
20000ca6:	68ba      	ldr	r2, [r7, #8]
20000ca8:	0052      	lsls	r2, r2, #1
20000caa:	5ad3      	ldrh	r3, [r2, r3]
20000cac:	0019      	movs	r1, r3
20000cae:	f002 f80a 	bl	20002cc6 <GPIO_ReadInputDataBit>
20000cb2:	1e03      	subs	r3, r0, #0
20000cb4:	d104      	bne.n	20000cc0 <num_active_doors+0x38>
					(*counter)++;
20000cb6:	687b      	ldr	r3, [r7, #4]
20000cb8:	681b      	ldr	r3, [r3, #0]
20000cba:	1c5a      	adds	r2, r3, #1
20000cbc:	687b      	ldr	r3, [r7, #4]
20000cbe:	601a      	str	r2, [r3, #0]
			for (int i = 0; i < sizeof(GPIO_Pins) / sizeof(uint16_t); i = i + 2)
20000cc0:	68bb      	ldr	r3, [r7, #8]
20000cc2:	3302      	adds	r3, #2
20000cc4:	60bb      	str	r3, [r7, #8]
20000cc6:	68bb      	ldr	r3, [r7, #8]
20000cc8:	2b0f      	cmp	r3, #15
20000cca:	d9e7      	bls.n	20000c9c <num_active_doors+0x14>
	for (int j = 0; j < (sizeof(GPIO_Ports) /sizeof(GPIO_TypeDef *)); j++)
20000ccc:	68fb      	ldr	r3, [r7, #12]
20000cce:	3301      	adds	r3, #1
20000cd0:	60fb      	str	r3, [r7, #12]
20000cd2:	68fb      	ldr	r3, [r7, #12]
20000cd4:	2b03      	cmp	r3, #3
20000cd6:	d9de      	bls.n	20000c96 <num_active_doors+0xe>
				}
			}
		}
}
20000cd8:	46c0      	nop			; (mov r8, r8)
20000cda:	46bd      	mov	sp, r7
20000cdc:	b004      	add	sp, #16
20000cde:	bd80      	pop	{r7, pc}
20000ce0:	20003f18 	andcs	r3, r0, r8, lsl pc
20000ce4:	20003ef8 	strdcs	r3, [r0], -r8

20000ce8 <active_doors_add_doors>:
void active_doors_add_doors(door *active_doors,int saftyNum){
20000ce8:	b580      	push	{r7, lr}
20000cea:	b086      	sub	sp, #24
20000cec:	af00      	add	r7, sp, #0
20000cee:	6078      	str	r0, [r7, #4]
20000cf0:	6039      	str	r1, [r7, #0]
	int counter = 0;
20000cf2:	2300      	movs	r3, #0
20000cf4:	617b      	str	r3, [r7, #20]
	for (int j = 0; j < (sizeof(GPIO_Ports) /sizeof(GPIO_TypeDef *)); j++)
20000cf6:	2300      	movs	r3, #0
20000cf8:	613b      	str	r3, [r7, #16]
20000cfa:	e044      	b.n	20000d86 <active_doors_add_doors+0x9e>
	{
		for (int i = 0; i < sizeof(GPIO_Pins) / sizeof(uint16_t); i = i + 2)
20000cfc:	2300      	movs	r3, #0
20000cfe:	60fb      	str	r3, [r7, #12]
20000d00:	e03b      	b.n	20000d7a <active_doors_add_doors+0x92>
		{
			if(!GPIO_ReadInputDataBit(GPIO_Ports[j], GPIO_Pins[i]) && counter < saftyNum){
20000d02:	4b24      	ldr	r3, [pc, #144]	; (20000d94 <active_doors_add_doors+0xac>)
20000d04:	693a      	ldr	r2, [r7, #16]
20000d06:	0092      	lsls	r2, r2, #2
20000d08:	58d0      	ldr	r0, [r2, r3]
20000d0a:	4b23      	ldr	r3, [pc, #140]	; (20000d98 <active_doors_add_doors+0xb0>)
20000d0c:	68fa      	ldr	r2, [r7, #12]
20000d0e:	0052      	lsls	r2, r2, #1
20000d10:	5ad3      	ldrh	r3, [r2, r3]
20000d12:	0019      	movs	r1, r3
20000d14:	f001 ffd7 	bl	20002cc6 <GPIO_ReadInputDataBit>
20000d18:	1e03      	subs	r3, r0, #0
20000d1a:	d12b      	bne.n	20000d74 <active_doors_add_doors+0x8c>
20000d1c:	697a      	ldr	r2, [r7, #20]
20000d1e:	683b      	ldr	r3, [r7, #0]
20000d20:	429a      	cmp	r2, r3
20000d22:	da27      	bge.n	20000d74 <active_doors_add_doors+0x8c>
				active_doors->id = counter;
20000d24:	697b      	ldr	r3, [r7, #20]
20000d26:	b2da      	uxtb	r2, r3
20000d28:	687b      	ldr	r3, [r7, #4]
20000d2a:	701a      	strb	r2, [r3, #0]
				active_doors->GPIO_read = GPIO_Pins[i];
20000d2c:	4b1a      	ldr	r3, [pc, #104]	; (20000d98 <active_doors_add_doors+0xb0>)
20000d2e:	68fa      	ldr	r2, [r7, #12]
20000d30:	0052      	lsls	r2, r2, #1
20000d32:	5ad3      	ldrh	r3, [r2, r3]
20000d34:	001a      	movs	r2, r3
20000d36:	687b      	ldr	r3, [r7, #4]
20000d38:	615a      	str	r2, [r3, #20]
				active_doors->GPIO_lamp = GPIO_Pins[i+1];
20000d3a:	68fb      	ldr	r3, [r7, #12]
20000d3c:	1c5a      	adds	r2, r3, #1
20000d3e:	4b16      	ldr	r3, [pc, #88]	; (20000d98 <active_doors_add_doors+0xb0>)
20000d40:	0052      	lsls	r2, r2, #1
20000d42:	5ad3      	ldrh	r3, [r2, r3]
20000d44:	001a      	movs	r2, r3
20000d46:	687b      	ldr	r3, [r7, #4]
20000d48:	611a      	str	r2, [r3, #16]
				active_doors->controlbits = 0;
20000d4a:	687b      	ldr	r3, [r7, #4]
20000d4c:	2200      	movs	r2, #0
20000d4e:	605a      	str	r2, [r3, #4]
				active_doors->time_larm = 0;
20000d50:	687b      	ldr	r3, [r7, #4]
20000d52:	2200      	movs	r2, #0
20000d54:	721a      	strb	r2, [r3, #8]
				active_doors->time_central_larm = 0;
20000d56:	687b      	ldr	r3, [r7, #4]
20000d58:	2200      	movs	r2, #0
20000d5a:	725a      	strb	r2, [r3, #9]
				active_doors->GPIO_type = GPIO_Ports[j];
20000d5c:	4b0d      	ldr	r3, [pc, #52]	; (20000d94 <active_doors_add_doors+0xac>)
20000d5e:	693a      	ldr	r2, [r7, #16]
20000d60:	0092      	lsls	r2, r2, #2
20000d62:	58d2      	ldr	r2, [r2, r3]
20000d64:	687b      	ldr	r3, [r7, #4]
20000d66:	61da      	str	r2, [r3, #28]
				active_doors++;
20000d68:	687b      	ldr	r3, [r7, #4]
20000d6a:	3320      	adds	r3, #32
20000d6c:	607b      	str	r3, [r7, #4]
				counter++;
20000d6e:	697b      	ldr	r3, [r7, #20]
20000d70:	3301      	adds	r3, #1
20000d72:	617b      	str	r3, [r7, #20]
		for (int i = 0; i < sizeof(GPIO_Pins) / sizeof(uint16_t); i = i + 2)
20000d74:	68fb      	ldr	r3, [r7, #12]
20000d76:	3302      	adds	r3, #2
20000d78:	60fb      	str	r3, [r7, #12]
20000d7a:	68fb      	ldr	r3, [r7, #12]
20000d7c:	2b0f      	cmp	r3, #15
20000d7e:	d9c0      	bls.n	20000d02 <active_doors_add_doors+0x1a>
	for (int j = 0; j < (sizeof(GPIO_Ports) /sizeof(GPIO_TypeDef *)); j++)
20000d80:	693b      	ldr	r3, [r7, #16]
20000d82:	3301      	adds	r3, #1
20000d84:	613b      	str	r3, [r7, #16]
20000d86:	693b      	ldr	r3, [r7, #16]
20000d88:	2b03      	cmp	r3, #3
20000d8a:	d9b7      	bls.n	20000cfc <active_doors_add_doors+0x14>
			}
		}
	}
}
20000d8c:	46c0      	nop			; (mov r8, r8)
20000d8e:	46bd      	mov	sp, r7
20000d90:	b006      	add	sp, #24
20000d92:	bd80      	pop	{r7, pc}
20000d94:	20003f18 	andcs	r3, r0, r8, lsl pc
20000d98:	20003ef8 	strdcs	r3, [r0], -r8

20000d9c <SysTick_Handler>:


// ========================================= SYSTICK ================================================
volatile uint32_t msTicks = 0;
void SysTick_Handler(void)
{ /* SysTick interrupt Handler. */
20000d9c:	b580      	push	{r7, lr}
20000d9e:	af00      	add	r7, sp, #0
	msTicks++;
20000da0:	4b03      	ldr	r3, [pc, #12]	; (20000db0 <SysTick_Handler+0x14>)
20000da2:	681b      	ldr	r3, [r3, #0]
20000da4:	1c5a      	adds	r2, r3, #1
20000da6:	4b02      	ldr	r3, [pc, #8]	; (20000db0 <SysTick_Handler+0x14>)
20000da8:	601a      	str	r2, [r3, #0]
}
20000daa:	46c0      	nop			; (mov r8, r8)
20000dac:	46bd      	mov	sp, r7
20000dae:	bd80      	pop	{r7, pc}
20000db0:	20003e04 	andcs	r3, r0, r4, lsl #28

20000db4 <systick_Init>:

void systick_Init(void)
{
20000db4:	b580      	push	{r7, lr}
20000db6:	b082      	sub	sp, #8
20000db8:	af00      	add	r7, sp, #0
	// Initiera SysTick.
	*((void (**)(void))0x2001C03C) = SysTick_Handler;
20000dba:	4b09      	ldr	r3, [pc, #36]	; (20000de0 <systick_Init+0x2c>)
20000dbc:	4a09      	ldr	r2, [pc, #36]	; (20000de4 <systick_Init+0x30>)
20000dbe:	601a      	str	r2, [r3, #0]
	uint32_t returnCode;
	returnCode = SysTick_Config(168000000 / 1000); // Genererar ett SysTick-avbrott varje ms.
20000dc0:	4b09      	ldr	r3, [pc, #36]	; (20000de8 <systick_Init+0x34>)
20000dc2:	0018      	movs	r0, r3
20000dc4:	f7ff ff3c 	bl	20000c40 <SysTick_Config>
20000dc8:	0003      	movs	r3, r0
20000dca:	607b      	str	r3, [r7, #4]

	if (returnCode != 0)
20000dcc:	687b      	ldr	r3, [r7, #4]
20000dce:	2b00      	cmp	r3, #0
20000dd0:	d001      	beq.n	20000dd6 <systick_Init+0x22>
	{   
		systick_Init();
20000dd2:	f7ff ffef 	bl	20000db4 <systick_Init>
	}
}
20000dd6:	46c0      	nop			; (mov r8, r8)
20000dd8:	46bd      	mov	sp, r7
20000dda:	b002      	add	sp, #8
20000ddc:	bd80      	pop	{r7, pc}
20000dde:	46c0      	nop			; (mov r8, r8)
20000de0:	2001c03c 	andcs	ip, r1, ip, lsr r0
20000de4:	20000d9d 	mulcs	r0, sp, sp
20000de8:	00029040 	andeq	r9, r2, r0, asr #32

20000dec <main>:

void main(void)
{
20000dec:	b5f0      	push	{r4, r5, r6, r7, lr}
20000dee:	b08b      	sub	sp, #44	; 0x2c
20000df0:	af00      	add	r7, sp, #0
	init_GPIO_Ports();
20000df2:	f7ff fbef 	bl	200005d4 <init_GPIO_Ports>
	systick_Init();
20000df6:	f7ff ffdd 	bl	20000db4 <systick_Init>
	can_init();
20000dfa:	f001 fd05 	bl	20002808 <can_init>
	init_rng();
20000dfe:	f7ff f907 	bl	20000010 <init_rng>
	delay(2000);
20000e02:	23fa      	movs	r3, #250	; 0xfa
20000e04:	00db      	lsls	r3, r3, #3
20000e06:	0018      	movs	r0, r3
20000e08:	f7ff fcc8 	bl	2000079c <delay>

	int amountOfActiveDoors = 0;
20000e0c:	2300      	movs	r3, #0
20000e0e:	61bb      	str	r3, [r7, #24]
	num_active_doors(&amountOfActiveDoors);
20000e10:	2318      	movs	r3, #24
20000e12:	18fb      	adds	r3, r7, r3
20000e14:	0018      	movs	r0, r3
20000e16:	f7ff ff37 	bl	20000c88 <num_active_doors>
	door active_doors[amountOfActiveDoors];
20000e1a:	69bb      	ldr	r3, [r7, #24]
20000e1c:	1e5a      	subs	r2, r3, #1
20000e1e:	623a      	str	r2, [r7, #32]
20000e20:	001a      	movs	r2, r3
20000e22:	60ba      	str	r2, [r7, #8]
20000e24:	2200      	movs	r2, #0
20000e26:	60fa      	str	r2, [r7, #12]
20000e28:	68b8      	ldr	r0, [r7, #8]
20000e2a:	68f9      	ldr	r1, [r7, #12]
20000e2c:	0002      	movs	r2, r0
20000e2e:	0e12      	lsrs	r2, r2, #24
20000e30:	000e      	movs	r6, r1
20000e32:	0236      	lsls	r6, r6, #8
20000e34:	617e      	str	r6, [r7, #20]
20000e36:	697e      	ldr	r6, [r7, #20]
20000e38:	4316      	orrs	r6, r2
20000e3a:	617e      	str	r6, [r7, #20]
20000e3c:	0002      	movs	r2, r0
20000e3e:	0212      	lsls	r2, r2, #8
20000e40:	613a      	str	r2, [r7, #16]
20000e42:	001a      	movs	r2, r3
20000e44:	603a      	str	r2, [r7, #0]
20000e46:	2200      	movs	r2, #0
20000e48:	607a      	str	r2, [r7, #4]
20000e4a:	6838      	ldr	r0, [r7, #0]
20000e4c:	6879      	ldr	r1, [r7, #4]
20000e4e:	0002      	movs	r2, r0
20000e50:	0e12      	lsrs	r2, r2, #24
20000e52:	000e      	movs	r6, r1
20000e54:	0235      	lsls	r5, r6, #8
20000e56:	4315      	orrs	r5, r2
20000e58:	0002      	movs	r2, r0
20000e5a:	0214      	lsls	r4, r2, #8
20000e5c:	015b      	lsls	r3, r3, #5
20000e5e:	3303      	adds	r3, #3
20000e60:	3307      	adds	r3, #7
20000e62:	08db      	lsrs	r3, r3, #3
20000e64:	00db      	lsls	r3, r3, #3
20000e66:	466a      	mov	r2, sp
20000e68:	1ad3      	subs	r3, r2, r3
20000e6a:	469d      	mov	sp, r3
20000e6c:	466b      	mov	r3, sp
20000e6e:	3303      	adds	r3, #3
20000e70:	089b      	lsrs	r3, r3, #2
20000e72:	009b      	lsls	r3, r3, #2
20000e74:	61fb      	str	r3, [r7, #28]
	active_doors_add_doors(&active_doors[0], amountOfActiveDoors);
20000e76:	69fb      	ldr	r3, [r7, #28]
20000e78:	69ba      	ldr	r2, [r7, #24]
20000e7a:	0011      	movs	r1, r2
20000e7c:	0018      	movs	r0, r3
20000e7e:	f7ff ff33 	bl	20000ce8 <active_doors_add_doors>
	
	getId(amountOfActiveDoors);
20000e82:	69bb      	ldr	r3, [r7, #24]
20000e84:	0018      	movs	r0, r3
20000e86:	f7ff f8f1 	bl	2000006c <getId>

	startup_lights(&active_doors[0],amountOfActiveDoors);
20000e8a:	69fb      	ldr	r3, [r7, #28]
20000e8c:	69ba      	ldr	r2, [r7, #24]
20000e8e:	0011      	movs	r1, r2
20000e90:	0018      	movs	r0, r3
20000e92:	f7ff fd53 	bl	2000093c <startup_lights>
	GPIO_SetBits(GPIOB, GPIO_Pin_2); // tells system is ready
20000e96:	4b16      	ldr	r3, [pc, #88]	; (20000ef0 <main+0x104>)
20000e98:	2104      	movs	r1, #4
20000e9a:	0018      	movs	r0, r3
20000e9c:	f001 ff6b 	bl	20002d76 <GPIO_SetBits>

	while (1)
	{
		check_door_status(&active_doors[0],amountOfActiveDoors);
20000ea0:	69fb      	ldr	r3, [r7, #28]
20000ea2:	69ba      	ldr	r2, [r7, #24]
20000ea4:	0011      	movs	r1, r2
20000ea6:	0018      	movs	r0, r3
20000ea8:	f7ff fc9d 	bl	200007e6 <check_door_status>
		for (int i = 0; i < amountOfActiveDoors; i++)
20000eac:	2300      	movs	r3, #0
20000eae:	627b      	str	r3, [r7, #36]	; 0x24
20000eb0:	e019      	b.n	20000ee6 <main+0xfa>
			{
				door_uppdate_lamps(&active_doors[i]);
20000eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20000eb4:	015b      	lsls	r3, r3, #5
20000eb6:	69fa      	ldr	r2, [r7, #28]
20000eb8:	18d3      	adds	r3, r2, r3
20000eba:	0018      	movs	r0, r3
20000ebc:	f7ff fcde 	bl	2000087c <door_uppdate_lamps>
				if (central_larm(&active_doors[i]))
20000ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20000ec2:	015b      	lsls	r3, r3, #5
20000ec4:	69fa      	ldr	r2, [r7, #28]
20000ec6:	18d3      	adds	r3, r2, r3
20000ec8:	0018      	movs	r0, r3
20000eca:	f7ff fd09 	bl	200008e0 <central_larm>
20000ece:	1e03      	subs	r3, r0, #0
20000ed0:	d006      	beq.n	20000ee0 <main+0xf4>
				{
					sendAlarm((active_doors[i].id));
20000ed2:	69fb      	ldr	r3, [r7, #28]
20000ed4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
20000ed6:	0152      	lsls	r2, r2, #5
20000ed8:	5cd3      	ldrb	r3, [r2, r3]
20000eda:	0018      	movs	r0, r3
20000edc:	f7ff f976 	bl	200001cc <sendAlarm>
		for (int i = 0; i < amountOfActiveDoors; i++)
20000ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20000ee2:	3301      	adds	r3, #1
20000ee4:	627b      	str	r3, [r7, #36]	; 0x24
20000ee6:	69bb      	ldr	r3, [r7, #24]
20000ee8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
20000eea:	429a      	cmp	r2, r3
20000eec:	dbe1      	blt.n	20000eb2 <main+0xc6>
		check_door_status(&active_doors[0],amountOfActiveDoors);
20000eee:	e7d7      	b.n	20000ea0 <main+0xb4>
20000ef0:	40020400 	andmi	r0, r2, r0, lsl #8

20000ef4 <RNG_DeInit>:
  * @brief  De-initializes the RNG peripheral registers to their default reset values.
  * @param  None
  * @retval None
  */
void RNG_DeInit(void)
{
20000ef4:	b580      	push	{r7, lr}
20000ef6:	af00      	add	r7, sp, #0
#if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F469_479xx)  
  /* Enable RNG reset state */
  RCC_AHB2PeriphResetCmd(RCC_AHB2Periph_RNG, ENABLE);
20000ef8:	2101      	movs	r1, #1
20000efa:	2040      	movs	r0, #64	; 0x40
20000efc:	f002 fc7a 	bl	200037f4 <RCC_AHB2PeriphResetCmd>

  /* Release RNG from reset state */
  RCC_AHB2PeriphResetCmd(RCC_AHB2Periph_RNG, DISABLE);
20000f00:	2100      	movs	r1, #0
20000f02:	2040      	movs	r0, #64	; 0x40
20000f04:	f002 fc76 	bl	200037f4 <RCC_AHB2PeriphResetCmd>
  RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_RNG, ENABLE);

  /* Release RNG from reset state */
  RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_RNG, DISABLE); 
#endif /* STM32F410xx*/  
}
20000f08:	46c0      	nop			; (mov r8, r8)
20000f0a:	46bd      	mov	sp, r7
20000f0c:	bd80      	pop	{r7, pc}

20000f0e <RNG_Cmd>:
  * @param  NewState: new state of the RNG peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RNG_Cmd(FunctionalState NewState)
{
20000f0e:	b580      	push	{r7, lr}
20000f10:	b082      	sub	sp, #8
20000f12:	af00      	add	r7, sp, #0
20000f14:	0002      	movs	r2, r0
20000f16:	1dfb      	adds	r3, r7, #7
20000f18:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
20000f1a:	1dfb      	adds	r3, r7, #7
20000f1c:	781b      	ldrb	r3, [r3, #0]
20000f1e:	2b00      	cmp	r3, #0
20000f20:	d006      	beq.n	20000f30 <RNG_Cmd+0x22>
  {
    /* Enable the RNG */
    RNG->CR |= RNG_CR_RNGEN;
20000f22:	4b08      	ldr	r3, [pc, #32]	; (20000f44 <RNG_Cmd+0x36>)
20000f24:	681a      	ldr	r2, [r3, #0]
20000f26:	4b07      	ldr	r3, [pc, #28]	; (20000f44 <RNG_Cmd+0x36>)
20000f28:	2104      	movs	r1, #4
20000f2a:	430a      	orrs	r2, r1
20000f2c:	601a      	str	r2, [r3, #0]
  else
  {
    /* Disable the RNG */
    RNG->CR &= ~RNG_CR_RNGEN;
  }
}
20000f2e:	e005      	b.n	20000f3c <RNG_Cmd+0x2e>
    RNG->CR &= ~RNG_CR_RNGEN;
20000f30:	4b04      	ldr	r3, [pc, #16]	; (20000f44 <RNG_Cmd+0x36>)
20000f32:	681a      	ldr	r2, [r3, #0]
20000f34:	4b03      	ldr	r3, [pc, #12]	; (20000f44 <RNG_Cmd+0x36>)
20000f36:	2104      	movs	r1, #4
20000f38:	438a      	bics	r2, r1
20000f3a:	601a      	str	r2, [r3, #0]
}
20000f3c:	46c0      	nop			; (mov r8, r8)
20000f3e:	46bd      	mov	sp, r7
20000f40:	b002      	add	sp, #8
20000f42:	bd80      	pop	{r7, pc}
20000f44:	50060800 	andpl	r0, r6, r0, lsl #16

20000f48 <RNG_GetRandomNumber>:
  *         
  * @param  None
  * @retval 32-bit random number.
  */
uint32_t RNG_GetRandomNumber(void)
{
20000f48:	b580      	push	{r7, lr}
20000f4a:	af00      	add	r7, sp, #0
  /* Return the 32 bit random number from the DR register */
  return RNG->DR;
20000f4c:	4b02      	ldr	r3, [pc, #8]	; (20000f58 <RNG_GetRandomNumber+0x10>)
20000f4e:	689b      	ldr	r3, [r3, #8]
}
20000f50:	0018      	movs	r0, r3
20000f52:	46bd      	mov	sp, r7
20000f54:	bd80      	pop	{r7, pc}
20000f56:	46c0      	nop			; (mov r8, r8)
20000f58:	50060800 	andpl	r0, r6, r0, lsl #16

20000f5c <RNG_ITConfig>:
  * @param  NewState: new state of the RNG interrupt.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RNG_ITConfig(FunctionalState NewState)
{
20000f5c:	b580      	push	{r7, lr}
20000f5e:	b082      	sub	sp, #8
20000f60:	af00      	add	r7, sp, #0
20000f62:	0002      	movs	r2, r0
20000f64:	1dfb      	adds	r3, r7, #7
20000f66:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
20000f68:	1dfb      	adds	r3, r7, #7
20000f6a:	781b      	ldrb	r3, [r3, #0]
20000f6c:	2b00      	cmp	r3, #0
20000f6e:	d006      	beq.n	20000f7e <RNG_ITConfig+0x22>
  {
    /* Enable the RNG interrupt */
    RNG->CR |= RNG_CR_IE;
20000f70:	4b08      	ldr	r3, [pc, #32]	; (20000f94 <RNG_ITConfig+0x38>)
20000f72:	681a      	ldr	r2, [r3, #0]
20000f74:	4b07      	ldr	r3, [pc, #28]	; (20000f94 <RNG_ITConfig+0x38>)
20000f76:	2108      	movs	r1, #8
20000f78:	430a      	orrs	r2, r1
20000f7a:	601a      	str	r2, [r3, #0]
  else
  {
    /* Disable the RNG interrupt */
    RNG->CR &= ~RNG_CR_IE;
  }
}
20000f7c:	e005      	b.n	20000f8a <RNG_ITConfig+0x2e>
    RNG->CR &= ~RNG_CR_IE;
20000f7e:	4b05      	ldr	r3, [pc, #20]	; (20000f94 <RNG_ITConfig+0x38>)
20000f80:	681a      	ldr	r2, [r3, #0]
20000f82:	4b04      	ldr	r3, [pc, #16]	; (20000f94 <RNG_ITConfig+0x38>)
20000f84:	2108      	movs	r1, #8
20000f86:	438a      	bics	r2, r1
20000f88:	601a      	str	r2, [r3, #0]
}
20000f8a:	46c0      	nop			; (mov r8, r8)
20000f8c:	46bd      	mov	sp, r7
20000f8e:	b002      	add	sp, #8
20000f90:	bd80      	pop	{r7, pc}
20000f92:	46c0      	nop			; (mov r8, r8)
20000f94:	50060800 	andpl	r0, r6, r0, lsl #16

20000f98 <RNG_GetFlagStatus>:
  *            @arg RNG_FLAG_CECS: Clock Error Current flag.
  *            @arg RNG_FLAG_SECS: Seed Error Current flag.
  * @retval The new state of RNG_FLAG (SET or RESET).
  */
FlagStatus RNG_GetFlagStatus(uint8_t RNG_FLAG)
{
20000f98:	b580      	push	{r7, lr}
20000f9a:	b084      	sub	sp, #16
20000f9c:	af00      	add	r7, sp, #0
20000f9e:	0002      	movs	r2, r0
20000fa0:	1dfb      	adds	r3, r7, #7
20000fa2:	701a      	strb	r2, [r3, #0]
  FlagStatus bitstatus = RESET;
20000fa4:	230f      	movs	r3, #15
20000fa6:	18fb      	adds	r3, r7, r3
20000fa8:	2200      	movs	r2, #0
20000faa:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RNG_GET_FLAG(RNG_FLAG));

  /* Check the status of the specified RNG flag */
  if ((RNG->SR & RNG_FLAG) != (uint8_t)RESET)
20000fac:	4b0a      	ldr	r3, [pc, #40]	; (20000fd8 <RNG_GetFlagStatus+0x40>)
20000fae:	685b      	ldr	r3, [r3, #4]
20000fb0:	1dfa      	adds	r2, r7, #7
20000fb2:	7812      	ldrb	r2, [r2, #0]
20000fb4:	4013      	ands	r3, r2
20000fb6:	d004      	beq.n	20000fc2 <RNG_GetFlagStatus+0x2a>
  {
    /* RNG_FLAG is set */
    bitstatus = SET;
20000fb8:	230f      	movs	r3, #15
20000fba:	18fb      	adds	r3, r7, r3
20000fbc:	2201      	movs	r2, #1
20000fbe:	701a      	strb	r2, [r3, #0]
20000fc0:	e003      	b.n	20000fca <RNG_GetFlagStatus+0x32>
  }
  else
  {
    /* RNG_FLAG is reset */
    bitstatus = RESET;
20000fc2:	230f      	movs	r3, #15
20000fc4:	18fb      	adds	r3, r7, r3
20000fc6:	2200      	movs	r2, #0
20000fc8:	701a      	strb	r2, [r3, #0]
  }
  /* Return the RNG_FLAG status */
  return  bitstatus;
20000fca:	230f      	movs	r3, #15
20000fcc:	18fb      	adds	r3, r7, r3
20000fce:	781b      	ldrb	r3, [r3, #0]
}
20000fd0:	0018      	movs	r0, r3
20000fd2:	46bd      	mov	sp, r7
20000fd4:	b004      	add	sp, #16
20000fd6:	bd80      	pop	{r7, pc}
20000fd8:	50060800 	andpl	r0, r6, r0, lsl #16

20000fdc <RNG_ClearFlag>:
  *         This flag is cleared only by reading the Random number data (using 
  *         RNG_GetRandomNumber() function).                           
  * @retval None
  */
void RNG_ClearFlag(uint8_t RNG_FLAG)
{
20000fdc:	b580      	push	{r7, lr}
20000fde:	b082      	sub	sp, #8
20000fe0:	af00      	add	r7, sp, #0
20000fe2:	0002      	movs	r2, r0
20000fe4:	1dfb      	adds	r3, r7, #7
20000fe6:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RNG_CLEAR_FLAG(RNG_FLAG));
  /* Clear the selected RNG flags */
  RNG->SR = ~(uint32_t)(((uint32_t)RNG_FLAG) << 4);
20000fe8:	1dfb      	adds	r3, r7, #7
20000fea:	781b      	ldrb	r3, [r3, #0]
20000fec:	011a      	lsls	r2, r3, #4
20000fee:	4b03      	ldr	r3, [pc, #12]	; (20000ffc <RNG_ClearFlag+0x20>)
20000ff0:	43d2      	mvns	r2, r2
20000ff2:	605a      	str	r2, [r3, #4]
}
20000ff4:	46c0      	nop			; (mov r8, r8)
20000ff6:	46bd      	mov	sp, r7
20000ff8:	b002      	add	sp, #8
20000ffa:	bd80      	pop	{r7, pc}
20000ffc:	50060800 	andpl	r0, r6, r0, lsl #16

20001000 <RNG_GetITStatus>:
  *            @arg RNG_IT_CEI: Clock Error Interrupt.
  *            @arg RNG_IT_SEI: Seed Error Interrupt.                   
  * @retval The new state of RNG_IT (SET or RESET).
  */
ITStatus RNG_GetITStatus(uint8_t RNG_IT)
{
20001000:	b580      	push	{r7, lr}
20001002:	b084      	sub	sp, #16
20001004:	af00      	add	r7, sp, #0
20001006:	0002      	movs	r2, r0
20001008:	1dfb      	adds	r3, r7, #7
2000100a:	701a      	strb	r2, [r3, #0]
  ITStatus bitstatus = RESET;
2000100c:	230f      	movs	r3, #15
2000100e:	18fb      	adds	r3, r7, r3
20001010:	2200      	movs	r2, #0
20001012:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RNG_GET_IT(RNG_IT));

  /* Check the status of the specified RNG interrupt */
  if ((RNG->SR & RNG_IT) != (uint8_t)RESET)
20001014:	4b0a      	ldr	r3, [pc, #40]	; (20001040 <RNG_GetITStatus+0x40>)
20001016:	685b      	ldr	r3, [r3, #4]
20001018:	1dfa      	adds	r2, r7, #7
2000101a:	7812      	ldrb	r2, [r2, #0]
2000101c:	4013      	ands	r3, r2
2000101e:	d004      	beq.n	2000102a <RNG_GetITStatus+0x2a>
  {
    /* RNG_IT is set */
    bitstatus = SET;
20001020:	230f      	movs	r3, #15
20001022:	18fb      	adds	r3, r7, r3
20001024:	2201      	movs	r2, #1
20001026:	701a      	strb	r2, [r3, #0]
20001028:	e003      	b.n	20001032 <RNG_GetITStatus+0x32>
  }
  else
  {
    /* RNG_IT is reset */
    bitstatus = RESET;
2000102a:	230f      	movs	r3, #15
2000102c:	18fb      	adds	r3, r7, r3
2000102e:	2200      	movs	r2, #0
20001030:	701a      	strb	r2, [r3, #0]
  }
  /* Return the RNG_IT status */
  return bitstatus;
20001032:	230f      	movs	r3, #15
20001034:	18fb      	adds	r3, r7, r3
20001036:	781b      	ldrb	r3, [r3, #0]
}
20001038:	0018      	movs	r0, r3
2000103a:	46bd      	mov	sp, r7
2000103c:	b004      	add	sp, #16
2000103e:	bd80      	pop	{r7, pc}
20001040:	50060800 	andpl	r0, r6, r0, lsl #16

20001044 <RNG_ClearITPendingBit>:
  *            @arg RNG_IT_CEI: Clock Error Interrupt.
  *            @arg RNG_IT_SEI: Seed Error Interrupt.
  * @retval None
  */
void RNG_ClearITPendingBit(uint8_t RNG_IT)
{
20001044:	b580      	push	{r7, lr}
20001046:	b082      	sub	sp, #8
20001048:	af00      	add	r7, sp, #0
2000104a:	0002      	movs	r2, r0
2000104c:	1dfb      	adds	r3, r7, #7
2000104e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RNG_IT(RNG_IT));

  /* Clear the selected RNG interrupt pending bit */
  RNG->SR = (uint8_t)~RNG_IT;
20001050:	1dfb      	adds	r3, r7, #7
20001052:	781b      	ldrb	r3, [r3, #0]
20001054:	43db      	mvns	r3, r3
20001056:	b2da      	uxtb	r2, r3
20001058:	4b02      	ldr	r3, [pc, #8]	; (20001064 <RNG_ClearITPendingBit+0x20>)
2000105a:	605a      	str	r2, [r3, #4]
}
2000105c:	46c0      	nop			; (mov r8, r8)
2000105e:	46bd      	mov	sp, r7
20001060:	b002      	add	sp, #8
20001062:	bd80      	pop	{r7, pc}
20001064:	50060800 	andpl	r0, r6, r0, lsl #16

20001068 <CAN_DeInit>:
  * @param  CANx: where x can be 1,2 or 3 to select the CAN peripheral.
  * @note   CAN3 peripheral is available only for STM32F413_423xx devices
  * @retval None.
  */
void CAN_DeInit(CAN_TypeDef* CANx)
{
20001068:	b580      	push	{r7, lr}
2000106a:	b082      	sub	sp, #8
2000106c:	af00      	add	r7, sp, #0
2000106e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
 
  if (CANx == CAN1)
20001070:	687b      	ldr	r3, [r7, #4]
20001072:	4a10      	ldr	r2, [pc, #64]	; (200010b4 <CAN_DeInit+0x4c>)
20001074:	4293      	cmp	r3, r2
20001076:	d10c      	bne.n	20001092 <CAN_DeInit+0x2a>
  {
    /* Enable CAN1 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_CAN1, ENABLE);
20001078:	2380      	movs	r3, #128	; 0x80
2000107a:	049b      	lsls	r3, r3, #18
2000107c:	2101      	movs	r1, #1
2000107e:	0018      	movs	r0, r3
20001080:	f002 fbf8 	bl	20003874 <RCC_APB1PeriphResetCmd>
    /* Release CAN1 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_CAN1, DISABLE);
20001084:	2380      	movs	r3, #128	; 0x80
20001086:	049b      	lsls	r3, r3, #18
20001088:	2100      	movs	r1, #0
2000108a:	0018      	movs	r0, r3
2000108c:	f002 fbf2 	bl	20003874 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_CAN2, ENABLE);
    /* Release CAN2 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_CAN2, DISABLE);
  }
#endif /* STM32F413_423xx */
}
20001090:	e00b      	b.n	200010aa <CAN_DeInit+0x42>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_CAN2, ENABLE);
20001092:	2380      	movs	r3, #128	; 0x80
20001094:	04db      	lsls	r3, r3, #19
20001096:	2101      	movs	r1, #1
20001098:	0018      	movs	r0, r3
2000109a:	f002 fbeb 	bl	20003874 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_CAN2, DISABLE);
2000109e:	2380      	movs	r3, #128	; 0x80
200010a0:	04db      	lsls	r3, r3, #19
200010a2:	2100      	movs	r1, #0
200010a4:	0018      	movs	r0, r3
200010a6:	f002 fbe5 	bl	20003874 <RCC_APB1PeriphResetCmd>
}
200010aa:	46c0      	nop			; (mov r8, r8)
200010ac:	46bd      	mov	sp, r7
200010ae:	b002      	add	sp, #8
200010b0:	bd80      	pop	{r7, pc}
200010b2:	46c0      	nop			; (mov r8, r8)
200010b4:	40006400 	andmi	r6, r0, r0, lsl #8

200010b8 <CAN_Init>:
  * @note   CAN3 peripheral is available only for STM32F413_423xx devices
  * @retval Constant indicates initialization succeed which will be 
  *         CAN_InitStatus_Failed or CAN_InitStatus_Success.
  */
uint8_t CAN_Init(CAN_TypeDef* CANx, CAN_InitTypeDef* CAN_InitStruct)
{
200010b8:	b580      	push	{r7, lr}
200010ba:	b084      	sub	sp, #16
200010bc:	af00      	add	r7, sp, #0
200010be:	6078      	str	r0, [r7, #4]
200010c0:	6039      	str	r1, [r7, #0]
  uint8_t InitStatus = CAN_InitStatus_Failed;
200010c2:	230f      	movs	r3, #15
200010c4:	18fb      	adds	r3, r7, r3
200010c6:	2200      	movs	r2, #0
200010c8:	701a      	strb	r2, [r3, #0]
  uint32_t wait_ack = 0x00000000;
200010ca:	2300      	movs	r3, #0
200010cc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_CAN_BS1(CAN_InitStruct->CAN_BS1));
  assert_param(IS_CAN_BS2(CAN_InitStruct->CAN_BS2));
  assert_param(IS_CAN_PRESCALER(CAN_InitStruct->CAN_Prescaler));

  /* Exit from sleep mode */
  CANx->MCR &= (~(uint32_t)CAN_MCR_SLEEP);
200010ce:	687b      	ldr	r3, [r7, #4]
200010d0:	681b      	ldr	r3, [r3, #0]
200010d2:	2202      	movs	r2, #2
200010d4:	4393      	bics	r3, r2
200010d6:	001a      	movs	r2, r3
200010d8:	687b      	ldr	r3, [r7, #4]
200010da:	601a      	str	r2, [r3, #0]

  /* Request initialisation */
  CANx->MCR |= CAN_MCR_INRQ ;
200010dc:	687b      	ldr	r3, [r7, #4]
200010de:	681b      	ldr	r3, [r3, #0]
200010e0:	2201      	movs	r2, #1
200010e2:	431a      	orrs	r2, r3
200010e4:	687b      	ldr	r3, [r7, #4]
200010e6:	601a      	str	r2, [r3, #0]

  /* Wait the acknowledge */
  while (((CANx->MSR & CAN_MSR_INAK) != CAN_MSR_INAK) && (wait_ack != INAK_TIMEOUT))
200010e8:	e002      	b.n	200010f0 <CAN_Init+0x38>
  {
    wait_ack++;
200010ea:	68bb      	ldr	r3, [r7, #8]
200010ec:	3301      	adds	r3, #1
200010ee:	60bb      	str	r3, [r7, #8]
  while (((CANx->MSR & CAN_MSR_INAK) != CAN_MSR_INAK) && (wait_ack != INAK_TIMEOUT))
200010f0:	687b      	ldr	r3, [r7, #4]
200010f2:	685b      	ldr	r3, [r3, #4]
200010f4:	2201      	movs	r2, #1
200010f6:	4013      	ands	r3, r2
200010f8:	2b01      	cmp	r3, #1
200010fa:	d003      	beq.n	20001104 <CAN_Init+0x4c>
200010fc:	68bb      	ldr	r3, [r7, #8]
200010fe:	4a5e      	ldr	r2, [pc, #376]	; (20001278 <CAN_Init+0x1c0>)
20001100:	4293      	cmp	r3, r2
20001102:	d1f2      	bne.n	200010ea <CAN_Init+0x32>
  }

  /* Check acknowledge */
  if ((CANx->MSR & CAN_MSR_INAK) != CAN_MSR_INAK)
20001104:	687b      	ldr	r3, [r7, #4]
20001106:	685b      	ldr	r3, [r3, #4]
20001108:	2201      	movs	r2, #1
2000110a:	4013      	ands	r3, r2
2000110c:	2b01      	cmp	r3, #1
2000110e:	d004      	beq.n	2000111a <CAN_Init+0x62>
  {
    InitStatus = CAN_InitStatus_Failed;
20001110:	230f      	movs	r3, #15
20001112:	18fb      	adds	r3, r7, r3
20001114:	2200      	movs	r2, #0
20001116:	701a      	strb	r2, [r3, #0]
20001118:	e0a6      	b.n	20001268 <CAN_Init+0x1b0>
  }
  else 
  {
    /* Set the time triggered communication mode */
    if (CAN_InitStruct->CAN_TTCM == ENABLE)
2000111a:	683b      	ldr	r3, [r7, #0]
2000111c:	799b      	ldrb	r3, [r3, #6]
2000111e:	2b01      	cmp	r3, #1
20001120:	d106      	bne.n	20001130 <CAN_Init+0x78>
    {
      CANx->MCR |= CAN_MCR_TTCM;
20001122:	687b      	ldr	r3, [r7, #4]
20001124:	681b      	ldr	r3, [r3, #0]
20001126:	2280      	movs	r2, #128	; 0x80
20001128:	431a      	orrs	r2, r3
2000112a:	687b      	ldr	r3, [r7, #4]
2000112c:	601a      	str	r2, [r3, #0]
2000112e:	e006      	b.n	2000113e <CAN_Init+0x86>
    }
    else
    {
      CANx->MCR &= ~(uint32_t)CAN_MCR_TTCM;
20001130:	687b      	ldr	r3, [r7, #4]
20001132:	681b      	ldr	r3, [r3, #0]
20001134:	2280      	movs	r2, #128	; 0x80
20001136:	4393      	bics	r3, r2
20001138:	001a      	movs	r2, r3
2000113a:	687b      	ldr	r3, [r7, #4]
2000113c:	601a      	str	r2, [r3, #0]
    }

    /* Set the automatic bus-off management */
    if (CAN_InitStruct->CAN_ABOM == ENABLE)
2000113e:	683b      	ldr	r3, [r7, #0]
20001140:	79db      	ldrb	r3, [r3, #7]
20001142:	2b01      	cmp	r3, #1
20001144:	d106      	bne.n	20001154 <CAN_Init+0x9c>
    {
      CANx->MCR |= CAN_MCR_ABOM;
20001146:	687b      	ldr	r3, [r7, #4]
20001148:	681b      	ldr	r3, [r3, #0]
2000114a:	2240      	movs	r2, #64	; 0x40
2000114c:	431a      	orrs	r2, r3
2000114e:	687b      	ldr	r3, [r7, #4]
20001150:	601a      	str	r2, [r3, #0]
20001152:	e006      	b.n	20001162 <CAN_Init+0xaa>
    }
    else
    {
      CANx->MCR &= ~(uint32_t)CAN_MCR_ABOM;
20001154:	687b      	ldr	r3, [r7, #4]
20001156:	681b      	ldr	r3, [r3, #0]
20001158:	2240      	movs	r2, #64	; 0x40
2000115a:	4393      	bics	r3, r2
2000115c:	001a      	movs	r2, r3
2000115e:	687b      	ldr	r3, [r7, #4]
20001160:	601a      	str	r2, [r3, #0]
    }

    /* Set the automatic wake-up mode */
    if (CAN_InitStruct->CAN_AWUM == ENABLE)
20001162:	683b      	ldr	r3, [r7, #0]
20001164:	7a1b      	ldrb	r3, [r3, #8]
20001166:	2b01      	cmp	r3, #1
20001168:	d106      	bne.n	20001178 <CAN_Init+0xc0>
    {
      CANx->MCR |= CAN_MCR_AWUM;
2000116a:	687b      	ldr	r3, [r7, #4]
2000116c:	681b      	ldr	r3, [r3, #0]
2000116e:	2220      	movs	r2, #32
20001170:	431a      	orrs	r2, r3
20001172:	687b      	ldr	r3, [r7, #4]
20001174:	601a      	str	r2, [r3, #0]
20001176:	e006      	b.n	20001186 <CAN_Init+0xce>
    }
    else
    {
      CANx->MCR &= ~(uint32_t)CAN_MCR_AWUM;
20001178:	687b      	ldr	r3, [r7, #4]
2000117a:	681b      	ldr	r3, [r3, #0]
2000117c:	2220      	movs	r2, #32
2000117e:	4393      	bics	r3, r2
20001180:	001a      	movs	r2, r3
20001182:	687b      	ldr	r3, [r7, #4]
20001184:	601a      	str	r2, [r3, #0]
    }

    /* Set the no automatic retransmission */
    if (CAN_InitStruct->CAN_NART == ENABLE)
20001186:	683b      	ldr	r3, [r7, #0]
20001188:	7a5b      	ldrb	r3, [r3, #9]
2000118a:	2b01      	cmp	r3, #1
2000118c:	d106      	bne.n	2000119c <CAN_Init+0xe4>
    {
      CANx->MCR |= CAN_MCR_NART;
2000118e:	687b      	ldr	r3, [r7, #4]
20001190:	681b      	ldr	r3, [r3, #0]
20001192:	2210      	movs	r2, #16
20001194:	431a      	orrs	r2, r3
20001196:	687b      	ldr	r3, [r7, #4]
20001198:	601a      	str	r2, [r3, #0]
2000119a:	e006      	b.n	200011aa <CAN_Init+0xf2>
    }
    else
    {
      CANx->MCR &= ~(uint32_t)CAN_MCR_NART;
2000119c:	687b      	ldr	r3, [r7, #4]
2000119e:	681b      	ldr	r3, [r3, #0]
200011a0:	2210      	movs	r2, #16
200011a2:	4393      	bics	r3, r2
200011a4:	001a      	movs	r2, r3
200011a6:	687b      	ldr	r3, [r7, #4]
200011a8:	601a      	str	r2, [r3, #0]
    }

    /* Set the receive FIFO locked mode */
    if (CAN_InitStruct->CAN_RFLM == ENABLE)
200011aa:	683b      	ldr	r3, [r7, #0]
200011ac:	7a9b      	ldrb	r3, [r3, #10]
200011ae:	2b01      	cmp	r3, #1
200011b0:	d106      	bne.n	200011c0 <CAN_Init+0x108>
    {
      CANx->MCR |= CAN_MCR_RFLM;
200011b2:	687b      	ldr	r3, [r7, #4]
200011b4:	681b      	ldr	r3, [r3, #0]
200011b6:	2208      	movs	r2, #8
200011b8:	431a      	orrs	r2, r3
200011ba:	687b      	ldr	r3, [r7, #4]
200011bc:	601a      	str	r2, [r3, #0]
200011be:	e006      	b.n	200011ce <CAN_Init+0x116>
    }
    else
    {
      CANx->MCR &= ~(uint32_t)CAN_MCR_RFLM;
200011c0:	687b      	ldr	r3, [r7, #4]
200011c2:	681b      	ldr	r3, [r3, #0]
200011c4:	2208      	movs	r2, #8
200011c6:	4393      	bics	r3, r2
200011c8:	001a      	movs	r2, r3
200011ca:	687b      	ldr	r3, [r7, #4]
200011cc:	601a      	str	r2, [r3, #0]
    }

    /* Set the transmit FIFO priority */
    if (CAN_InitStruct->CAN_TXFP == ENABLE)
200011ce:	683b      	ldr	r3, [r7, #0]
200011d0:	7adb      	ldrb	r3, [r3, #11]
200011d2:	2b01      	cmp	r3, #1
200011d4:	d106      	bne.n	200011e4 <CAN_Init+0x12c>
    {
      CANx->MCR |= CAN_MCR_TXFP;
200011d6:	687b      	ldr	r3, [r7, #4]
200011d8:	681b      	ldr	r3, [r3, #0]
200011da:	2204      	movs	r2, #4
200011dc:	431a      	orrs	r2, r3
200011de:	687b      	ldr	r3, [r7, #4]
200011e0:	601a      	str	r2, [r3, #0]
200011e2:	e006      	b.n	200011f2 <CAN_Init+0x13a>
    }
    else
    {
      CANx->MCR &= ~(uint32_t)CAN_MCR_TXFP;
200011e4:	687b      	ldr	r3, [r7, #4]
200011e6:	681b      	ldr	r3, [r3, #0]
200011e8:	2204      	movs	r2, #4
200011ea:	4393      	bics	r3, r2
200011ec:	001a      	movs	r2, r3
200011ee:	687b      	ldr	r3, [r7, #4]
200011f0:	601a      	str	r2, [r3, #0]
    }

    /* Set the bit timing register */
    CANx->BTR = (uint32_t)((uint32_t)CAN_InitStruct->CAN_Mode << 30) | \
200011f2:	683b      	ldr	r3, [r7, #0]
200011f4:	789b      	ldrb	r3, [r3, #2]
200011f6:	079a      	lsls	r2, r3, #30
                ((uint32_t)CAN_InitStruct->CAN_SJW << 24) | \
200011f8:	683b      	ldr	r3, [r7, #0]
200011fa:	78db      	ldrb	r3, [r3, #3]
200011fc:	061b      	lsls	r3, r3, #24
    CANx->BTR = (uint32_t)((uint32_t)CAN_InitStruct->CAN_Mode << 30) | \
200011fe:	431a      	orrs	r2, r3
                ((uint32_t)CAN_InitStruct->CAN_BS1 << 16) | \
20001200:	683b      	ldr	r3, [r7, #0]
20001202:	791b      	ldrb	r3, [r3, #4]
20001204:	041b      	lsls	r3, r3, #16
                ((uint32_t)CAN_InitStruct->CAN_SJW << 24) | \
20001206:	431a      	orrs	r2, r3
                ((uint32_t)CAN_InitStruct->CAN_BS2 << 20) | \
20001208:	683b      	ldr	r3, [r7, #0]
2000120a:	795b      	ldrb	r3, [r3, #5]
2000120c:	051b      	lsls	r3, r3, #20
                ((uint32_t)CAN_InitStruct->CAN_BS1 << 16) | \
2000120e:	431a      	orrs	r2, r3
               ((uint32_t)CAN_InitStruct->CAN_Prescaler - 1);
20001210:	683b      	ldr	r3, [r7, #0]
20001212:	881b      	ldrh	r3, [r3, #0]
20001214:	3b01      	subs	r3, #1
                ((uint32_t)CAN_InitStruct->CAN_BS2 << 20) | \
20001216:	431a      	orrs	r2, r3
    CANx->BTR = (uint32_t)((uint32_t)CAN_InitStruct->CAN_Mode << 30) | \
20001218:	687b      	ldr	r3, [r7, #4]
2000121a:	61da      	str	r2, [r3, #28]

    /* Request leave initialisation */
    CANx->MCR &= ~(uint32_t)CAN_MCR_INRQ;
2000121c:	687b      	ldr	r3, [r7, #4]
2000121e:	681b      	ldr	r3, [r3, #0]
20001220:	2201      	movs	r2, #1
20001222:	4393      	bics	r3, r2
20001224:	001a      	movs	r2, r3
20001226:	687b      	ldr	r3, [r7, #4]
20001228:	601a      	str	r2, [r3, #0]

   /* Wait the acknowledge */
   wait_ack = 0;
2000122a:	2300      	movs	r3, #0
2000122c:	60bb      	str	r3, [r7, #8]

   while (((CANx->MSR & CAN_MSR_INAK) == CAN_MSR_INAK) && (wait_ack != INAK_TIMEOUT))
2000122e:	e002      	b.n	20001236 <CAN_Init+0x17e>
   {
     wait_ack++;
20001230:	68bb      	ldr	r3, [r7, #8]
20001232:	3301      	adds	r3, #1
20001234:	60bb      	str	r3, [r7, #8]
   while (((CANx->MSR & CAN_MSR_INAK) == CAN_MSR_INAK) && (wait_ack != INAK_TIMEOUT))
20001236:	687b      	ldr	r3, [r7, #4]
20001238:	685b      	ldr	r3, [r3, #4]
2000123a:	2201      	movs	r2, #1
2000123c:	4013      	ands	r3, r2
2000123e:	2b01      	cmp	r3, #1
20001240:	d103      	bne.n	2000124a <CAN_Init+0x192>
20001242:	68bb      	ldr	r3, [r7, #8]
20001244:	4a0c      	ldr	r2, [pc, #48]	; (20001278 <CAN_Init+0x1c0>)
20001246:	4293      	cmp	r3, r2
20001248:	d1f2      	bne.n	20001230 <CAN_Init+0x178>
   }

    /* ...and check acknowledged */
    if ((CANx->MSR & CAN_MSR_INAK) == CAN_MSR_INAK)
2000124a:	687b      	ldr	r3, [r7, #4]
2000124c:	685b      	ldr	r3, [r3, #4]
2000124e:	2201      	movs	r2, #1
20001250:	4013      	ands	r3, r2
20001252:	2b01      	cmp	r3, #1
20001254:	d104      	bne.n	20001260 <CAN_Init+0x1a8>
    {
      InitStatus = CAN_InitStatus_Failed;
20001256:	230f      	movs	r3, #15
20001258:	18fb      	adds	r3, r7, r3
2000125a:	2200      	movs	r2, #0
2000125c:	701a      	strb	r2, [r3, #0]
2000125e:	e003      	b.n	20001268 <CAN_Init+0x1b0>
    }
    else
    {
      InitStatus = CAN_InitStatus_Success ;
20001260:	230f      	movs	r3, #15
20001262:	18fb      	adds	r3, r7, r3
20001264:	2201      	movs	r2, #1
20001266:	701a      	strb	r2, [r3, #0]
    }
  }

  /* At this step, return the status of initialization */
  return InitStatus;
20001268:	230f      	movs	r3, #15
2000126a:	18fb      	adds	r3, r7, r3
2000126c:	781b      	ldrb	r3, [r3, #0]
}
2000126e:	0018      	movs	r0, r3
20001270:	46bd      	mov	sp, r7
20001272:	b004      	add	sp, #16
20001274:	bd80      	pop	{r7, pc}
20001276:	46c0      	nop			; (mov r8, r8)
20001278:	0000ffff 	strdeq	pc, [r0], -pc	; <UNPREDICTABLE>

2000127c <CAN_FilterInit>:
  * @param  CAN_FilterInitStruct: pointer to a CAN_FilterInitTypeDef structure that
  *         contains the configuration information.
  * @retval None
  */
void CAN_FilterInit(CAN_FilterInitTypeDef* CAN_FilterInitStruct)
{
2000127c:	b590      	push	{r4, r7, lr}
2000127e:	b085      	sub	sp, #20
20001280:	af00      	add	r7, sp, #0
20001282:	6078      	str	r0, [r7, #4]
  uint32_t filter_number_bit_pos = 0;
20001284:	2300      	movs	r3, #0
20001286:	60fb      	str	r3, [r7, #12]
  assert_param(IS_CAN_FILTER_MODE(CAN_FilterInitStruct->CAN_FilterMode));
  assert_param(IS_CAN_FILTER_SCALE(CAN_FilterInitStruct->CAN_FilterScale));
  assert_param(IS_CAN_FILTER_FIFO(CAN_FilterInitStruct->CAN_FilterFIFOAssignment));
  assert_param(IS_FUNCTIONAL_STATE(CAN_FilterInitStruct->CAN_FilterActivation));

  filter_number_bit_pos = ((uint32_t)1) << CAN_FilterInitStruct->CAN_FilterNumber;
20001288:	687b      	ldr	r3, [r7, #4]
2000128a:	7a9b      	ldrb	r3, [r3, #10]
2000128c:	001a      	movs	r2, r3
2000128e:	2301      	movs	r3, #1
20001290:	4093      	lsls	r3, r2
20001292:	60fb      	str	r3, [r7, #12]

  /* Initialisation mode for the filter */
  CAN1->FMR |= FMR_FINIT;
20001294:	4a64      	ldr	r2, [pc, #400]	; (20001428 <CAN_FilterInit+0x1ac>)
20001296:	2380      	movs	r3, #128	; 0x80
20001298:	009b      	lsls	r3, r3, #2
2000129a:	58d3      	ldr	r3, [r2, r3]
2000129c:	4962      	ldr	r1, [pc, #392]	; (20001428 <CAN_FilterInit+0x1ac>)
2000129e:	2201      	movs	r2, #1
200012a0:	431a      	orrs	r2, r3
200012a2:	2380      	movs	r3, #128	; 0x80
200012a4:	009b      	lsls	r3, r3, #2
200012a6:	50ca      	str	r2, [r1, r3]

  /* Filter Deactivation */
  CAN1->FA1R &= ~(uint32_t)filter_number_bit_pos;
200012a8:	4a5f      	ldr	r2, [pc, #380]	; (20001428 <CAN_FilterInit+0x1ac>)
200012aa:	2387      	movs	r3, #135	; 0x87
200012ac:	009b      	lsls	r3, r3, #2
200012ae:	58d3      	ldr	r3, [r2, r3]
200012b0:	68fa      	ldr	r2, [r7, #12]
200012b2:	43d2      	mvns	r2, r2
200012b4:	495c      	ldr	r1, [pc, #368]	; (20001428 <CAN_FilterInit+0x1ac>)
200012b6:	401a      	ands	r2, r3
200012b8:	2387      	movs	r3, #135	; 0x87
200012ba:	009b      	lsls	r3, r3, #2
200012bc:	50ca      	str	r2, [r1, r3]

  /* Filter Scale */
  if (CAN_FilterInitStruct->CAN_FilterScale == CAN_FilterScale_16bit)
200012be:	687b      	ldr	r3, [r7, #4]
200012c0:	7b1b      	ldrb	r3, [r3, #12]
200012c2:	2b00      	cmp	r3, #0
200012c4:	d12c      	bne.n	20001320 <CAN_FilterInit+0xa4>
  {
    /* 16-bit scale for the filter */
    CAN1->FS1R &= ~(uint32_t)filter_number_bit_pos;
200012c6:	4a58      	ldr	r2, [pc, #352]	; (20001428 <CAN_FilterInit+0x1ac>)
200012c8:	2383      	movs	r3, #131	; 0x83
200012ca:	009b      	lsls	r3, r3, #2
200012cc:	58d3      	ldr	r3, [r2, r3]
200012ce:	68fa      	ldr	r2, [r7, #12]
200012d0:	43d2      	mvns	r2, r2
200012d2:	4955      	ldr	r1, [pc, #340]	; (20001428 <CAN_FilterInit+0x1ac>)
200012d4:	401a      	ands	r2, r3
200012d6:	2383      	movs	r3, #131	; 0x83
200012d8:	009b      	lsls	r3, r3, #2
200012da:	50ca      	str	r2, [r1, r3]

    /* First 16-bit identifier and First 16-bit mask */
    /* Or First 16-bit identifier and Second 16-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdLow) << 16) |
200012dc:	687b      	ldr	r3, [r7, #4]
200012de:	88db      	ldrh	r3, [r3, #6]
200012e0:	041b      	lsls	r3, r3, #16
        (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdLow);
200012e2:	687a      	ldr	r2, [r7, #4]
200012e4:	8852      	ldrh	r2, [r2, #2]
200012e6:	0014      	movs	r4, r2
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
200012e8:	494f      	ldr	r1, [pc, #316]	; (20001428 <CAN_FilterInit+0x1ac>)
200012ea:	687a      	ldr	r2, [r7, #4]
200012ec:	7a92      	ldrb	r2, [r2, #10]
200012ee:	0010      	movs	r0, r2
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdLow) << 16) |
200012f0:	4323      	orrs	r3, r4
200012f2:	001a      	movs	r2, r3
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
200012f4:	0003      	movs	r3, r0
200012f6:	3348      	adds	r3, #72	; 0x48
200012f8:	00db      	lsls	r3, r3, #3
200012fa:	505a      	str	r2, [r3, r1]

    /* Second 16-bit identifier and Second 16-bit mask */
    /* Or Third 16-bit identifier and Fourth 16-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR2 = 
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdHigh) << 16) |
200012fc:	687b      	ldr	r3, [r7, #4]
200012fe:	889b      	ldrh	r3, [r3, #4]
20001300:	041b      	lsls	r3, r3, #16
        (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdHigh);
20001302:	687a      	ldr	r2, [r7, #4]
20001304:	8812      	ldrh	r2, [r2, #0]
20001306:	0014      	movs	r4, r2
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR2 = 
20001308:	4947      	ldr	r1, [pc, #284]	; (20001428 <CAN_FilterInit+0x1ac>)
2000130a:	687a      	ldr	r2, [r7, #4]
2000130c:	7a92      	ldrb	r2, [r2, #10]
2000130e:	0010      	movs	r0, r2
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdHigh) << 16) |
20001310:	4323      	orrs	r3, r4
20001312:	001a      	movs	r2, r3
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR2 = 
20001314:	0003      	movs	r3, r0
20001316:	3348      	adds	r3, #72	; 0x48
20001318:	00db      	lsls	r3, r3, #3
2000131a:	18cb      	adds	r3, r1, r3
2000131c:	3304      	adds	r3, #4
2000131e:	601a      	str	r2, [r3, #0]
  }

  if (CAN_FilterInitStruct->CAN_FilterScale == CAN_FilterScale_32bit)
20001320:	687b      	ldr	r3, [r7, #4]
20001322:	7b1b      	ldrb	r3, [r3, #12]
20001324:	2b01      	cmp	r3, #1
20001326:	d12b      	bne.n	20001380 <CAN_FilterInit+0x104>
  {
    /* 32-bit scale for the filter */
    CAN1->FS1R |= filter_number_bit_pos;
20001328:	4a3f      	ldr	r2, [pc, #252]	; (20001428 <CAN_FilterInit+0x1ac>)
2000132a:	2383      	movs	r3, #131	; 0x83
2000132c:	009b      	lsls	r3, r3, #2
2000132e:	58d2      	ldr	r2, [r2, r3]
20001330:	493d      	ldr	r1, [pc, #244]	; (20001428 <CAN_FilterInit+0x1ac>)
20001332:	68fb      	ldr	r3, [r7, #12]
20001334:	431a      	orrs	r2, r3
20001336:	2383      	movs	r3, #131	; 0x83
20001338:	009b      	lsls	r3, r3, #2
2000133a:	50ca      	str	r2, [r1, r3]
    /* 32-bit identifier or First 32-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdHigh) << 16) |
2000133c:	687b      	ldr	r3, [r7, #4]
2000133e:	881b      	ldrh	r3, [r3, #0]
20001340:	041b      	lsls	r3, r3, #16
        (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdLow);
20001342:	687a      	ldr	r2, [r7, #4]
20001344:	8852      	ldrh	r2, [r2, #2]
20001346:	0014      	movs	r4, r2
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
20001348:	4937      	ldr	r1, [pc, #220]	; (20001428 <CAN_FilterInit+0x1ac>)
2000134a:	687a      	ldr	r2, [r7, #4]
2000134c:	7a92      	ldrb	r2, [r2, #10]
2000134e:	0010      	movs	r0, r2
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdHigh) << 16) |
20001350:	4323      	orrs	r3, r4
20001352:	001a      	movs	r2, r3
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
20001354:	0003      	movs	r3, r0
20001356:	3348      	adds	r3, #72	; 0x48
20001358:	00db      	lsls	r3, r3, #3
2000135a:	505a      	str	r2, [r3, r1]
    /* 32-bit mask or Second 32-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR2 = 
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdHigh) << 16) |
2000135c:	687b      	ldr	r3, [r7, #4]
2000135e:	889b      	ldrh	r3, [r3, #4]
20001360:	041b      	lsls	r3, r3, #16
        (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdLow);
20001362:	687a      	ldr	r2, [r7, #4]
20001364:	88d2      	ldrh	r2, [r2, #6]
20001366:	0014      	movs	r4, r2
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR2 = 
20001368:	492f      	ldr	r1, [pc, #188]	; (20001428 <CAN_FilterInit+0x1ac>)
2000136a:	687a      	ldr	r2, [r7, #4]
2000136c:	7a92      	ldrb	r2, [r2, #10]
2000136e:	0010      	movs	r0, r2
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdHigh) << 16) |
20001370:	4323      	orrs	r3, r4
20001372:	001a      	movs	r2, r3
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR2 = 
20001374:	0003      	movs	r3, r0
20001376:	3348      	adds	r3, #72	; 0x48
20001378:	00db      	lsls	r3, r3, #3
2000137a:	18cb      	adds	r3, r1, r3
2000137c:	3304      	adds	r3, #4
2000137e:	601a      	str	r2, [r3, #0]
  }

  /* Filter Mode */
  if (CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdMask)
20001380:	687b      	ldr	r3, [r7, #4]
20001382:	7adb      	ldrb	r3, [r3, #11]
20001384:	2b00      	cmp	r3, #0
20001386:	d10b      	bne.n	200013a0 <CAN_FilterInit+0x124>
  {
    /*Id/Mask mode for the filter*/
    CAN1->FM1R &= ~(uint32_t)filter_number_bit_pos;
20001388:	4a27      	ldr	r2, [pc, #156]	; (20001428 <CAN_FilterInit+0x1ac>)
2000138a:	2381      	movs	r3, #129	; 0x81
2000138c:	009b      	lsls	r3, r3, #2
2000138e:	58d3      	ldr	r3, [r2, r3]
20001390:	68fa      	ldr	r2, [r7, #12]
20001392:	43d2      	mvns	r2, r2
20001394:	4924      	ldr	r1, [pc, #144]	; (20001428 <CAN_FilterInit+0x1ac>)
20001396:	401a      	ands	r2, r3
20001398:	2381      	movs	r3, #129	; 0x81
2000139a:	009b      	lsls	r3, r3, #2
2000139c:	50ca      	str	r2, [r1, r3]
2000139e:	e009      	b.n	200013b4 <CAN_FilterInit+0x138>
  }
  else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
  {
    /*Identifier list mode for the filter*/
    CAN1->FM1R |= (uint32_t)filter_number_bit_pos;
200013a0:	4a21      	ldr	r2, [pc, #132]	; (20001428 <CAN_FilterInit+0x1ac>)
200013a2:	2381      	movs	r3, #129	; 0x81
200013a4:	009b      	lsls	r3, r3, #2
200013a6:	58d2      	ldr	r2, [r2, r3]
200013a8:	491f      	ldr	r1, [pc, #124]	; (20001428 <CAN_FilterInit+0x1ac>)
200013aa:	68fb      	ldr	r3, [r7, #12]
200013ac:	431a      	orrs	r2, r3
200013ae:	2381      	movs	r3, #129	; 0x81
200013b0:	009b      	lsls	r3, r3, #2
200013b2:	50ca      	str	r2, [r1, r3]
  }

  /* Filter FIFO assignment */
  if (CAN_FilterInitStruct->CAN_FilterFIFOAssignment == CAN_Filter_FIFO0)
200013b4:	687b      	ldr	r3, [r7, #4]
200013b6:	891b      	ldrh	r3, [r3, #8]
200013b8:	2b00      	cmp	r3, #0
200013ba:	d10a      	bne.n	200013d2 <CAN_FilterInit+0x156>
  {
    /* FIFO 0 assignation for the filter */
    CAN1->FFA1R &= ~(uint32_t)filter_number_bit_pos;
200013bc:	4a1a      	ldr	r2, [pc, #104]	; (20001428 <CAN_FilterInit+0x1ac>)
200013be:	2385      	movs	r3, #133	; 0x85
200013c0:	009b      	lsls	r3, r3, #2
200013c2:	58d3      	ldr	r3, [r2, r3]
200013c4:	68fa      	ldr	r2, [r7, #12]
200013c6:	43d2      	mvns	r2, r2
200013c8:	4917      	ldr	r1, [pc, #92]	; (20001428 <CAN_FilterInit+0x1ac>)
200013ca:	401a      	ands	r2, r3
200013cc:	2385      	movs	r3, #133	; 0x85
200013ce:	009b      	lsls	r3, r3, #2
200013d0:	50ca      	str	r2, [r1, r3]
  }

  if (CAN_FilterInitStruct->CAN_FilterFIFOAssignment == CAN_Filter_FIFO1)
200013d2:	687b      	ldr	r3, [r7, #4]
200013d4:	891b      	ldrh	r3, [r3, #8]
200013d6:	2b01      	cmp	r3, #1
200013d8:	d109      	bne.n	200013ee <CAN_FilterInit+0x172>
  {
    /* FIFO 1 assignation for the filter */
    CAN1->FFA1R |= (uint32_t)filter_number_bit_pos;
200013da:	4a13      	ldr	r2, [pc, #76]	; (20001428 <CAN_FilterInit+0x1ac>)
200013dc:	2385      	movs	r3, #133	; 0x85
200013de:	009b      	lsls	r3, r3, #2
200013e0:	58d2      	ldr	r2, [r2, r3]
200013e2:	4911      	ldr	r1, [pc, #68]	; (20001428 <CAN_FilterInit+0x1ac>)
200013e4:	68fb      	ldr	r3, [r7, #12]
200013e6:	431a      	orrs	r2, r3
200013e8:	2385      	movs	r3, #133	; 0x85
200013ea:	009b      	lsls	r3, r3, #2
200013ec:	50ca      	str	r2, [r1, r3]
  }
  
  /* Filter activation */
  if (CAN_FilterInitStruct->CAN_FilterActivation == ENABLE)
200013ee:	687b      	ldr	r3, [r7, #4]
200013f0:	7b5b      	ldrb	r3, [r3, #13]
200013f2:	2b01      	cmp	r3, #1
200013f4:	d109      	bne.n	2000140a <CAN_FilterInit+0x18e>
  {
    CAN1->FA1R |= filter_number_bit_pos;
200013f6:	4a0c      	ldr	r2, [pc, #48]	; (20001428 <CAN_FilterInit+0x1ac>)
200013f8:	2387      	movs	r3, #135	; 0x87
200013fa:	009b      	lsls	r3, r3, #2
200013fc:	58d2      	ldr	r2, [r2, r3]
200013fe:	490a      	ldr	r1, [pc, #40]	; (20001428 <CAN_FilterInit+0x1ac>)
20001400:	68fb      	ldr	r3, [r7, #12]
20001402:	431a      	orrs	r2, r3
20001404:	2387      	movs	r3, #135	; 0x87
20001406:	009b      	lsls	r3, r3, #2
20001408:	50ca      	str	r2, [r1, r3]
  }

  /* Leave the initialisation mode for the filter */
  CAN1->FMR &= ~FMR_FINIT;
2000140a:	4a07      	ldr	r2, [pc, #28]	; (20001428 <CAN_FilterInit+0x1ac>)
2000140c:	2380      	movs	r3, #128	; 0x80
2000140e:	009b      	lsls	r3, r3, #2
20001410:	58d3      	ldr	r3, [r2, r3]
20001412:	4905      	ldr	r1, [pc, #20]	; (20001428 <CAN_FilterInit+0x1ac>)
20001414:	2201      	movs	r2, #1
20001416:	4393      	bics	r3, r2
20001418:	001a      	movs	r2, r3
2000141a:	2380      	movs	r3, #128	; 0x80
2000141c:	009b      	lsls	r3, r3, #2
2000141e:	50ca      	str	r2, [r1, r3]
}
20001420:	46c0      	nop			; (mov r8, r8)
20001422:	46bd      	mov	sp, r7
20001424:	b005      	add	sp, #20
20001426:	bd90      	pop	{r4, r7, pc}
20001428:	40006400 	andmi	r6, r0, r0, lsl #8

2000142c <CAN_StructInit>:
  * @brief  Fills each CAN_InitStruct member with its default value.
  * @param  CAN_InitStruct: pointer to a CAN_InitTypeDef structure which ill be initialized.
  * @retval None
  */
void CAN_StructInit(CAN_InitTypeDef* CAN_InitStruct)
{
2000142c:	b580      	push	{r7, lr}
2000142e:	b082      	sub	sp, #8
20001430:	af00      	add	r7, sp, #0
20001432:	6078      	str	r0, [r7, #4]
  /* Reset CAN init structure parameters values */
  
  /* Initialize the time triggered communication mode */
  CAN_InitStruct->CAN_TTCM = DISABLE;
20001434:	687b      	ldr	r3, [r7, #4]
20001436:	2200      	movs	r2, #0
20001438:	719a      	strb	r2, [r3, #6]
  
  /* Initialize the automatic bus-off management */
  CAN_InitStruct->CAN_ABOM = DISABLE;
2000143a:	687b      	ldr	r3, [r7, #4]
2000143c:	2200      	movs	r2, #0
2000143e:	71da      	strb	r2, [r3, #7]
  
  /* Initialize the automatic wake-up mode */
  CAN_InitStruct->CAN_AWUM = DISABLE;
20001440:	687b      	ldr	r3, [r7, #4]
20001442:	2200      	movs	r2, #0
20001444:	721a      	strb	r2, [r3, #8]
  
  /* Initialize the no automatic retransmission */
  CAN_InitStruct->CAN_NART = DISABLE;
20001446:	687b      	ldr	r3, [r7, #4]
20001448:	2200      	movs	r2, #0
2000144a:	725a      	strb	r2, [r3, #9]
  
  /* Initialize the receive FIFO locked mode */
  CAN_InitStruct->CAN_RFLM = DISABLE;
2000144c:	687b      	ldr	r3, [r7, #4]
2000144e:	2200      	movs	r2, #0
20001450:	729a      	strb	r2, [r3, #10]
  
  /* Initialize the transmit FIFO priority */
  CAN_InitStruct->CAN_TXFP = DISABLE;
20001452:	687b      	ldr	r3, [r7, #4]
20001454:	2200      	movs	r2, #0
20001456:	72da      	strb	r2, [r3, #11]
  
  /* Initialize the CAN_Mode member */
  CAN_InitStruct->CAN_Mode = CAN_Mode_Normal;
20001458:	687b      	ldr	r3, [r7, #4]
2000145a:	2200      	movs	r2, #0
2000145c:	709a      	strb	r2, [r3, #2]
  
  /* Initialize the CAN_SJW member */
  CAN_InitStruct->CAN_SJW = CAN_SJW_1tq;
2000145e:	687b      	ldr	r3, [r7, #4]
20001460:	2200      	movs	r2, #0
20001462:	70da      	strb	r2, [r3, #3]
  
  /* Initialize the CAN_BS1 member */
  CAN_InitStruct->CAN_BS1 = CAN_BS1_4tq;
20001464:	687b      	ldr	r3, [r7, #4]
20001466:	2203      	movs	r2, #3
20001468:	711a      	strb	r2, [r3, #4]
  
  /* Initialize the CAN_BS2 member */
  CAN_InitStruct->CAN_BS2 = CAN_BS2_3tq;
2000146a:	687b      	ldr	r3, [r7, #4]
2000146c:	2202      	movs	r2, #2
2000146e:	715a      	strb	r2, [r3, #5]
  
  /* Initialize the CAN_Prescaler member */
  CAN_InitStruct->CAN_Prescaler = 1;
20001470:	687b      	ldr	r3, [r7, #4]
20001472:	2201      	movs	r2, #1
20001474:	801a      	strh	r2, [r3, #0]
}
20001476:	46c0      	nop			; (mov r8, r8)
20001478:	46bd      	mov	sp, r7
2000147a:	b002      	add	sp, #8
2000147c:	bd80      	pop	{r7, pc}

2000147e <CAN_SlaveStartBank>:
  * @brief  Select the start bank filter for slave CAN.
  * @param  CAN_BankNumber: Select the start slave bank filter from 1..27.
  * @retval None
  */
void CAN_SlaveStartBank(uint8_t CAN_BankNumber) 
{
2000147e:	b580      	push	{r7, lr}
20001480:	b082      	sub	sp, #8
20001482:	af00      	add	r7, sp, #0
20001484:	0002      	movs	r2, r0
20001486:	1dfb      	adds	r3, r7, #7
20001488:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_CAN_BANKNUMBER(CAN_BankNumber));
  
  /* Enter Initialisation mode for the filter */
  CAN1->FMR |= FMR_FINIT;
2000148a:	4a17      	ldr	r2, [pc, #92]	; (200014e8 <CAN_SlaveStartBank+0x6a>)
2000148c:	2380      	movs	r3, #128	; 0x80
2000148e:	009b      	lsls	r3, r3, #2
20001490:	58d3      	ldr	r3, [r2, r3]
20001492:	4915      	ldr	r1, [pc, #84]	; (200014e8 <CAN_SlaveStartBank+0x6a>)
20001494:	2201      	movs	r2, #1
20001496:	431a      	orrs	r2, r3
20001498:	2380      	movs	r3, #128	; 0x80
2000149a:	009b      	lsls	r3, r3, #2
2000149c:	50ca      	str	r2, [r1, r3]
  
  /* Select the start slave bank */
  CAN1->FMR &= (uint32_t)0xFFFFC0F1 ;
2000149e:	4a12      	ldr	r2, [pc, #72]	; (200014e8 <CAN_SlaveStartBank+0x6a>)
200014a0:	2380      	movs	r3, #128	; 0x80
200014a2:	009b      	lsls	r3, r3, #2
200014a4:	58d3      	ldr	r3, [r2, r3]
200014a6:	4910      	ldr	r1, [pc, #64]	; (200014e8 <CAN_SlaveStartBank+0x6a>)
200014a8:	4a10      	ldr	r2, [pc, #64]	; (200014ec <CAN_SlaveStartBank+0x6e>)
200014aa:	401a      	ands	r2, r3
200014ac:	2380      	movs	r3, #128	; 0x80
200014ae:	009b      	lsls	r3, r3, #2
200014b0:	50ca      	str	r2, [r1, r3]
  CAN1->FMR |= (uint32_t)(CAN_BankNumber)<<8;
200014b2:	4a0d      	ldr	r2, [pc, #52]	; (200014e8 <CAN_SlaveStartBank+0x6a>)
200014b4:	2380      	movs	r3, #128	; 0x80
200014b6:	009b      	lsls	r3, r3, #2
200014b8:	58d2      	ldr	r2, [r2, r3]
200014ba:	1dfb      	adds	r3, r7, #7
200014bc:	781b      	ldrb	r3, [r3, #0]
200014be:	021b      	lsls	r3, r3, #8
200014c0:	4909      	ldr	r1, [pc, #36]	; (200014e8 <CAN_SlaveStartBank+0x6a>)
200014c2:	431a      	orrs	r2, r3
200014c4:	2380      	movs	r3, #128	; 0x80
200014c6:	009b      	lsls	r3, r3, #2
200014c8:	50ca      	str	r2, [r1, r3]
  
  /* Leave Initialisation mode for the filter */
  CAN1->FMR &= ~FMR_FINIT;
200014ca:	4a07      	ldr	r2, [pc, #28]	; (200014e8 <CAN_SlaveStartBank+0x6a>)
200014cc:	2380      	movs	r3, #128	; 0x80
200014ce:	009b      	lsls	r3, r3, #2
200014d0:	58d3      	ldr	r3, [r2, r3]
200014d2:	4905      	ldr	r1, [pc, #20]	; (200014e8 <CAN_SlaveStartBank+0x6a>)
200014d4:	2201      	movs	r2, #1
200014d6:	4393      	bics	r3, r2
200014d8:	001a      	movs	r2, r3
200014da:	2380      	movs	r3, #128	; 0x80
200014dc:	009b      	lsls	r3, r3, #2
200014de:	50ca      	str	r2, [r1, r3]
}
200014e0:	46c0      	nop			; (mov r8, r8)
200014e2:	46bd      	mov	sp, r7
200014e4:	b002      	add	sp, #8
200014e6:	bd80      	pop	{r7, pc}
200014e8:	40006400 	andmi	r6, r0, r0, lsl #8
200014ec:	ffffc0f1 			; <UNDEFINED> instruction: 0xffffc0f1

200014f0 <CAN_DBGFreeze>:
  *          or DISABLE (CAN is working during debug).
  * @note   CAN3 peripheral is available only for STM32F413_423xx devices
  * @retval None
  */
void CAN_DBGFreeze(CAN_TypeDef* CANx, FunctionalState NewState)
{
200014f0:	b580      	push	{r7, lr}
200014f2:	b082      	sub	sp, #8
200014f4:	af00      	add	r7, sp, #0
200014f6:	6078      	str	r0, [r7, #4]
200014f8:	000a      	movs	r2, r1
200014fa:	1cfb      	adds	r3, r7, #3
200014fc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
200014fe:	1cfb      	adds	r3, r7, #3
20001500:	781b      	ldrb	r3, [r3, #0]
20001502:	2b00      	cmp	r3, #0
20001504:	d007      	beq.n	20001516 <CAN_DBGFreeze+0x26>
  {
    /* Enable Debug Freeze  */
    CANx->MCR |= MCR_DBF;
20001506:	687b      	ldr	r3, [r7, #4]
20001508:	681b      	ldr	r3, [r3, #0]
2000150a:	2280      	movs	r2, #128	; 0x80
2000150c:	0252      	lsls	r2, r2, #9
2000150e:	431a      	orrs	r2, r3
20001510:	687b      	ldr	r3, [r7, #4]
20001512:	601a      	str	r2, [r3, #0]
  else
  {
    /* Disable Debug Freeze */
    CANx->MCR &= ~MCR_DBF;
  }
}
20001514:	e005      	b.n	20001522 <CAN_DBGFreeze+0x32>
    CANx->MCR &= ~MCR_DBF;
20001516:	687b      	ldr	r3, [r7, #4]
20001518:	681b      	ldr	r3, [r3, #0]
2000151a:	4a04      	ldr	r2, [pc, #16]	; (2000152c <CAN_DBGFreeze+0x3c>)
2000151c:	401a      	ands	r2, r3
2000151e:	687b      	ldr	r3, [r7, #4]
20001520:	601a      	str	r2, [r3, #0]
}
20001522:	46c0      	nop			; (mov r8, r8)
20001524:	46bd      	mov	sp, r7
20001526:	b002      	add	sp, #8
20001528:	bd80      	pop	{r7, pc}
2000152a:	46c0      	nop			; (mov r8, r8)
2000152c:	fffeffff 			; <UNDEFINED> instruction: 0xfffeffff

20001530 <CAN_TTComModeCmd>:
  *         in data byte 7.
  * @note   CAN3 peripheral is available only for STM32F413_423xx devices
  * @retval None
  */
void CAN_TTComModeCmd(CAN_TypeDef* CANx, FunctionalState NewState)
{
20001530:	b580      	push	{r7, lr}
20001532:	b082      	sub	sp, #8
20001534:	af00      	add	r7, sp, #0
20001536:	6078      	str	r0, [r7, #4]
20001538:	000a      	movs	r2, r1
2000153a:	1cfb      	adds	r3, r7, #3
2000153c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
2000153e:	1cfb      	adds	r3, r7, #3
20001540:	781b      	ldrb	r3, [r3, #0]
20001542:	2b00      	cmp	r3, #0
20001544:	d02a      	beq.n	2000159c <CAN_TTComModeCmd+0x6c>
  {
    /* Enable the TTCM mode */
    CANx->MCR |= CAN_MCR_TTCM;
20001546:	687b      	ldr	r3, [r7, #4]
20001548:	681b      	ldr	r3, [r3, #0]
2000154a:	2280      	movs	r2, #128	; 0x80
2000154c:	431a      	orrs	r2, r3
2000154e:	687b      	ldr	r3, [r7, #4]
20001550:	601a      	str	r2, [r3, #0]

    /* Set TGT bits */
    CANx->sTxMailBox[0].TDTR |= ((uint32_t)CAN_TDT0R_TGT);
20001552:	687a      	ldr	r2, [r7, #4]
20001554:	23c2      	movs	r3, #194	; 0xc2
20001556:	005b      	lsls	r3, r3, #1
20001558:	58d3      	ldr	r3, [r2, r3]
2000155a:	2280      	movs	r2, #128	; 0x80
2000155c:	0052      	lsls	r2, r2, #1
2000155e:	431a      	orrs	r2, r3
20001560:	0011      	movs	r1, r2
20001562:	687a      	ldr	r2, [r7, #4]
20001564:	23c2      	movs	r3, #194	; 0xc2
20001566:	005b      	lsls	r3, r3, #1
20001568:	50d1      	str	r1, [r2, r3]
    CANx->sTxMailBox[1].TDTR |= ((uint32_t)CAN_TDT1R_TGT);
2000156a:	687a      	ldr	r2, [r7, #4]
2000156c:	23ca      	movs	r3, #202	; 0xca
2000156e:	005b      	lsls	r3, r3, #1
20001570:	58d3      	ldr	r3, [r2, r3]
20001572:	2280      	movs	r2, #128	; 0x80
20001574:	0052      	lsls	r2, r2, #1
20001576:	431a      	orrs	r2, r3
20001578:	0011      	movs	r1, r2
2000157a:	687a      	ldr	r2, [r7, #4]
2000157c:	23ca      	movs	r3, #202	; 0xca
2000157e:	005b      	lsls	r3, r3, #1
20001580:	50d1      	str	r1, [r2, r3]
    CANx->sTxMailBox[2].TDTR |= ((uint32_t)CAN_TDT2R_TGT);
20001582:	687a      	ldr	r2, [r7, #4]
20001584:	23d2      	movs	r3, #210	; 0xd2
20001586:	005b      	lsls	r3, r3, #1
20001588:	58d3      	ldr	r3, [r2, r3]
2000158a:	2280      	movs	r2, #128	; 0x80
2000158c:	0052      	lsls	r2, r2, #1
2000158e:	431a      	orrs	r2, r3
20001590:	0011      	movs	r1, r2
20001592:	687a      	ldr	r2, [r7, #4]
20001594:	23d2      	movs	r3, #210	; 0xd2
20001596:	005b      	lsls	r3, r3, #1
20001598:	50d1      	str	r1, [r2, r3]
    /* Reset TGT bits */
    CANx->sTxMailBox[0].TDTR &= ((uint32_t)~CAN_TDT0R_TGT);
    CANx->sTxMailBox[1].TDTR &= ((uint32_t)~CAN_TDT1R_TGT);
    CANx->sTxMailBox[2].TDTR &= ((uint32_t)~CAN_TDT2R_TGT);
  }
}
2000159a:	e027      	b.n	200015ec <CAN_TTComModeCmd+0xbc>
    CANx->MCR &= (uint32_t)(~(uint32_t)CAN_MCR_TTCM);
2000159c:	687b      	ldr	r3, [r7, #4]
2000159e:	681b      	ldr	r3, [r3, #0]
200015a0:	2280      	movs	r2, #128	; 0x80
200015a2:	4393      	bics	r3, r2
200015a4:	001a      	movs	r2, r3
200015a6:	687b      	ldr	r3, [r7, #4]
200015a8:	601a      	str	r2, [r3, #0]
    CANx->sTxMailBox[0].TDTR &= ((uint32_t)~CAN_TDT0R_TGT);
200015aa:	687a      	ldr	r2, [r7, #4]
200015ac:	23c2      	movs	r3, #194	; 0xc2
200015ae:	005b      	lsls	r3, r3, #1
200015b0:	58d3      	ldr	r3, [r2, r3]
200015b2:	4a10      	ldr	r2, [pc, #64]	; (200015f4 <CAN_TTComModeCmd+0xc4>)
200015b4:	4013      	ands	r3, r2
200015b6:	0019      	movs	r1, r3
200015b8:	687a      	ldr	r2, [r7, #4]
200015ba:	23c2      	movs	r3, #194	; 0xc2
200015bc:	005b      	lsls	r3, r3, #1
200015be:	50d1      	str	r1, [r2, r3]
    CANx->sTxMailBox[1].TDTR &= ((uint32_t)~CAN_TDT1R_TGT);
200015c0:	687a      	ldr	r2, [r7, #4]
200015c2:	23ca      	movs	r3, #202	; 0xca
200015c4:	005b      	lsls	r3, r3, #1
200015c6:	58d3      	ldr	r3, [r2, r3]
200015c8:	4a0a      	ldr	r2, [pc, #40]	; (200015f4 <CAN_TTComModeCmd+0xc4>)
200015ca:	4013      	ands	r3, r2
200015cc:	0019      	movs	r1, r3
200015ce:	687a      	ldr	r2, [r7, #4]
200015d0:	23ca      	movs	r3, #202	; 0xca
200015d2:	005b      	lsls	r3, r3, #1
200015d4:	50d1      	str	r1, [r2, r3]
    CANx->sTxMailBox[2].TDTR &= ((uint32_t)~CAN_TDT2R_TGT);
200015d6:	687a      	ldr	r2, [r7, #4]
200015d8:	23d2      	movs	r3, #210	; 0xd2
200015da:	005b      	lsls	r3, r3, #1
200015dc:	58d3      	ldr	r3, [r2, r3]
200015de:	4a05      	ldr	r2, [pc, #20]	; (200015f4 <CAN_TTComModeCmd+0xc4>)
200015e0:	4013      	ands	r3, r2
200015e2:	0019      	movs	r1, r3
200015e4:	687a      	ldr	r2, [r7, #4]
200015e6:	23d2      	movs	r3, #210	; 0xd2
200015e8:	005b      	lsls	r3, r3, #1
200015ea:	50d1      	str	r1, [r2, r3]
}
200015ec:	46c0      	nop			; (mov r8, r8)
200015ee:	46bd      	mov	sp, r7
200015f0:	b002      	add	sp, #8
200015f2:	bd80      	pop	{r7, pc}
200015f4:	fffffeff 			; <UNDEFINED> instruction: 0xfffffeff

200015f8 <CAN_Transmit>:
  * @note   CAN3 peripheral is available only for STM32F413_423xx devices
  * @retval The number of the mailbox that is used for transmission or
  *         CAN_TxStatus_NoMailBox if there is no empty mailbox.
  */
uint8_t CAN_Transmit(CAN_TypeDef* CANx, CanTxMsg* TxMessage)
{
200015f8:	b590      	push	{r4, r7, lr}
200015fa:	b085      	sub	sp, #20
200015fc:	af00      	add	r7, sp, #0
200015fe:	6078      	str	r0, [r7, #4]
20001600:	6039      	str	r1, [r7, #0]
  uint8_t transmit_mailbox = 0;
20001602:	230f      	movs	r3, #15
20001604:	18fb      	adds	r3, r7, r3
20001606:	2200      	movs	r2, #0
20001608:	701a      	strb	r2, [r3, #0]
  assert_param(IS_CAN_IDTYPE(TxMessage->IDE));
  assert_param(IS_CAN_RTR(TxMessage->RTR));
  assert_param(IS_CAN_DLC(TxMessage->DLC));

  /* Select one empty transmit mailbox */
  if ((CANx->TSR&CAN_TSR_TME0) == CAN_TSR_TME0)
2000160a:	687b      	ldr	r3, [r7, #4]
2000160c:	689a      	ldr	r2, [r3, #8]
2000160e:	2380      	movs	r3, #128	; 0x80
20001610:	04db      	lsls	r3, r3, #19
20001612:	401a      	ands	r2, r3
20001614:	2380      	movs	r3, #128	; 0x80
20001616:	04db      	lsls	r3, r3, #19
20001618:	429a      	cmp	r2, r3
2000161a:	d104      	bne.n	20001626 <CAN_Transmit+0x2e>
  {
    transmit_mailbox = 0;
2000161c:	230f      	movs	r3, #15
2000161e:	18fb      	adds	r3, r7, r3
20001620:	2200      	movs	r2, #0
20001622:	701a      	strb	r2, [r3, #0]
20001624:	e01f      	b.n	20001666 <CAN_Transmit+0x6e>
  }
  else if ((CANx->TSR&CAN_TSR_TME1) == CAN_TSR_TME1)
20001626:	687b      	ldr	r3, [r7, #4]
20001628:	689a      	ldr	r2, [r3, #8]
2000162a:	2380      	movs	r3, #128	; 0x80
2000162c:	051b      	lsls	r3, r3, #20
2000162e:	401a      	ands	r2, r3
20001630:	2380      	movs	r3, #128	; 0x80
20001632:	051b      	lsls	r3, r3, #20
20001634:	429a      	cmp	r2, r3
20001636:	d104      	bne.n	20001642 <CAN_Transmit+0x4a>
  {
    transmit_mailbox = 1;
20001638:	230f      	movs	r3, #15
2000163a:	18fb      	adds	r3, r7, r3
2000163c:	2201      	movs	r2, #1
2000163e:	701a      	strb	r2, [r3, #0]
20001640:	e011      	b.n	20001666 <CAN_Transmit+0x6e>
  }
  else if ((CANx->TSR&CAN_TSR_TME2) == CAN_TSR_TME2)
20001642:	687b      	ldr	r3, [r7, #4]
20001644:	689a      	ldr	r2, [r3, #8]
20001646:	2380      	movs	r3, #128	; 0x80
20001648:	055b      	lsls	r3, r3, #21
2000164a:	401a      	ands	r2, r3
2000164c:	2380      	movs	r3, #128	; 0x80
2000164e:	055b      	lsls	r3, r3, #21
20001650:	429a      	cmp	r2, r3
20001652:	d104      	bne.n	2000165e <CAN_Transmit+0x66>
  {
    transmit_mailbox = 2;
20001654:	230f      	movs	r3, #15
20001656:	18fb      	adds	r3, r7, r3
20001658:	2202      	movs	r2, #2
2000165a:	701a      	strb	r2, [r3, #0]
2000165c:	e003      	b.n	20001666 <CAN_Transmit+0x6e>
  }
  else
  {
    transmit_mailbox = CAN_TxStatus_NoMailBox;
2000165e:	230f      	movs	r3, #15
20001660:	18fb      	adds	r3, r7, r3
20001662:	2204      	movs	r2, #4
20001664:	701a      	strb	r2, [r3, #0]
  }

  if (transmit_mailbox != CAN_TxStatus_NoMailBox)
20001666:	230f      	movs	r3, #15
20001668:	18fb      	adds	r3, r7, r3
2000166a:	781b      	ldrb	r3, [r3, #0]
2000166c:	2b04      	cmp	r3, #4
2000166e:	d100      	bne.n	20001672 <CAN_Transmit+0x7a>
20001670:	e0ac      	b.n	200017cc <CAN_Transmit+0x1d4>
  {
    /* Set up the Id */
    CANx->sTxMailBox[transmit_mailbox].TIR &= TMIDxR_TXRQ;
20001672:	210f      	movs	r1, #15
20001674:	187b      	adds	r3, r7, r1
20001676:	781a      	ldrb	r2, [r3, #0]
20001678:	687b      	ldr	r3, [r7, #4]
2000167a:	3218      	adds	r2, #24
2000167c:	0112      	lsls	r2, r2, #4
2000167e:	58d3      	ldr	r3, [r2, r3]
20001680:	187a      	adds	r2, r7, r1
20001682:	7812      	ldrb	r2, [r2, #0]
20001684:	2101      	movs	r1, #1
20001686:	4019      	ands	r1, r3
20001688:	687b      	ldr	r3, [r7, #4]
2000168a:	3218      	adds	r2, #24
2000168c:	0112      	lsls	r2, r2, #4
2000168e:	50d1      	str	r1, [r2, r3]
    if (TxMessage->IDE == CAN_Id_Standard)
20001690:	683b      	ldr	r3, [r7, #0]
20001692:	7a1b      	ldrb	r3, [r3, #8]
20001694:	2b00      	cmp	r3, #0
20001696:	d114      	bne.n	200016c2 <CAN_Transmit+0xca>
    {
      assert_param(IS_CAN_STDID(TxMessage->StdId));  
      CANx->sTxMailBox[transmit_mailbox].TIR |= ((TxMessage->StdId << 21) | \
20001698:	200f      	movs	r0, #15
2000169a:	183b      	adds	r3, r7, r0
2000169c:	781a      	ldrb	r2, [r3, #0]
2000169e:	687b      	ldr	r3, [r7, #4]
200016a0:	3218      	adds	r2, #24
200016a2:	0112      	lsls	r2, r2, #4
200016a4:	58d1      	ldr	r1, [r2, r3]
200016a6:	683b      	ldr	r3, [r7, #0]
200016a8:	681b      	ldr	r3, [r3, #0]
200016aa:	055b      	lsls	r3, r3, #21
                                                  TxMessage->RTR);
200016ac:	683a      	ldr	r2, [r7, #0]
200016ae:	7a52      	ldrb	r2, [r2, #9]
      CANx->sTxMailBox[transmit_mailbox].TIR |= ((TxMessage->StdId << 21) | \
200016b0:	4313      	orrs	r3, r2
200016b2:	183a      	adds	r2, r7, r0
200016b4:	7812      	ldrb	r2, [r2, #0]
200016b6:	4319      	orrs	r1, r3
200016b8:	687b      	ldr	r3, [r7, #4]
200016ba:	3218      	adds	r2, #24
200016bc:	0112      	lsls	r2, r2, #4
200016be:	50d1      	str	r1, [r2, r3]
200016c0:	e016      	b.n	200016f0 <CAN_Transmit+0xf8>
    }
    else
    {
      assert_param(IS_CAN_EXTID(TxMessage->ExtId));
      CANx->sTxMailBox[transmit_mailbox].TIR |= ((TxMessage->ExtId << 3) | \
200016c2:	200f      	movs	r0, #15
200016c4:	183b      	adds	r3, r7, r0
200016c6:	781a      	ldrb	r2, [r3, #0]
200016c8:	687b      	ldr	r3, [r7, #4]
200016ca:	3218      	adds	r2, #24
200016cc:	0112      	lsls	r2, r2, #4
200016ce:	58d1      	ldr	r1, [r2, r3]
200016d0:	683b      	ldr	r3, [r7, #0]
200016d2:	685b      	ldr	r3, [r3, #4]
200016d4:	00db      	lsls	r3, r3, #3
                                                  TxMessage->IDE | \
200016d6:	683a      	ldr	r2, [r7, #0]
200016d8:	7a12      	ldrb	r2, [r2, #8]
      CANx->sTxMailBox[transmit_mailbox].TIR |= ((TxMessage->ExtId << 3) | \
200016da:	4313      	orrs	r3, r2
                                                  TxMessage->RTR);
200016dc:	683a      	ldr	r2, [r7, #0]
200016de:	7a52      	ldrb	r2, [r2, #9]
                                                  TxMessage->IDE | \
200016e0:	4313      	orrs	r3, r2
      CANx->sTxMailBox[transmit_mailbox].TIR |= ((TxMessage->ExtId << 3) | \
200016e2:	183a      	adds	r2, r7, r0
200016e4:	7812      	ldrb	r2, [r2, #0]
200016e6:	4319      	orrs	r1, r3
200016e8:	687b      	ldr	r3, [r7, #4]
200016ea:	3218      	adds	r2, #24
200016ec:	0112      	lsls	r2, r2, #4
200016ee:	50d1      	str	r1, [r2, r3]
    }
    
    /* Set up the DLC */
    TxMessage->DLC &= (uint8_t)0x0000000F;
200016f0:	683b      	ldr	r3, [r7, #0]
200016f2:	7a9b      	ldrb	r3, [r3, #10]
200016f4:	220f      	movs	r2, #15
200016f6:	4013      	ands	r3, r2
200016f8:	b2da      	uxtb	r2, r3
200016fa:	683b      	ldr	r3, [r7, #0]
200016fc:	729a      	strb	r2, [r3, #10]
    CANx->sTxMailBox[transmit_mailbox].TDTR &= (uint32_t)0xFFFFFFF0;
200016fe:	240f      	movs	r4, #15
20001700:	193b      	adds	r3, r7, r4
20001702:	781b      	ldrb	r3, [r3, #0]
20001704:	687a      	ldr	r2, [r7, #4]
20001706:	3318      	adds	r3, #24
20001708:	011b      	lsls	r3, r3, #4
2000170a:	18d3      	adds	r3, r2, r3
2000170c:	3304      	adds	r3, #4
2000170e:	681a      	ldr	r2, [r3, #0]
20001710:	193b      	adds	r3, r7, r4
20001712:	781b      	ldrb	r3, [r3, #0]
20001714:	210f      	movs	r1, #15
20001716:	438a      	bics	r2, r1
20001718:	6879      	ldr	r1, [r7, #4]
2000171a:	3318      	adds	r3, #24
2000171c:	011b      	lsls	r3, r3, #4
2000171e:	18cb      	adds	r3, r1, r3
20001720:	3304      	adds	r3, #4
20001722:	601a      	str	r2, [r3, #0]
    CANx->sTxMailBox[transmit_mailbox].TDTR |= TxMessage->DLC;
20001724:	193b      	adds	r3, r7, r4
20001726:	781b      	ldrb	r3, [r3, #0]
20001728:	687a      	ldr	r2, [r7, #4]
2000172a:	3318      	adds	r3, #24
2000172c:	011b      	lsls	r3, r3, #4
2000172e:	18d3      	adds	r3, r2, r3
20001730:	3304      	adds	r3, #4
20001732:	681a      	ldr	r2, [r3, #0]
20001734:	683b      	ldr	r3, [r7, #0]
20001736:	7a9b      	ldrb	r3, [r3, #10]
20001738:	0019      	movs	r1, r3
2000173a:	193b      	adds	r3, r7, r4
2000173c:	781b      	ldrb	r3, [r3, #0]
2000173e:	430a      	orrs	r2, r1
20001740:	6879      	ldr	r1, [r7, #4]
20001742:	3318      	adds	r3, #24
20001744:	011b      	lsls	r3, r3, #4
20001746:	18cb      	adds	r3, r1, r3
20001748:	3304      	adds	r3, #4
2000174a:	601a      	str	r2, [r3, #0]

    /* Set up the data field */
    CANx->sTxMailBox[transmit_mailbox].TDLR = (((uint32_t)TxMessage->Data[3] << 24) | 
2000174c:	683b      	ldr	r3, [r7, #0]
2000174e:	7b9b      	ldrb	r3, [r3, #14]
20001750:	061a      	lsls	r2, r3, #24
                                             ((uint32_t)TxMessage->Data[2] << 16) |
20001752:	683b      	ldr	r3, [r7, #0]
20001754:	7b5b      	ldrb	r3, [r3, #13]
20001756:	041b      	lsls	r3, r3, #16
    CANx->sTxMailBox[transmit_mailbox].TDLR = (((uint32_t)TxMessage->Data[3] << 24) | 
20001758:	431a      	orrs	r2, r3
                                             ((uint32_t)TxMessage->Data[1] << 8) | 
2000175a:	683b      	ldr	r3, [r7, #0]
2000175c:	7b1b      	ldrb	r3, [r3, #12]
2000175e:	021b      	lsls	r3, r3, #8
                                             ((uint32_t)TxMessage->Data[2] << 16) |
20001760:	4313      	orrs	r3, r2
                                             ((uint32_t)TxMessage->Data[0]));
20001762:	683a      	ldr	r2, [r7, #0]
20001764:	7ad2      	ldrb	r2, [r2, #11]
20001766:	0010      	movs	r0, r2
    CANx->sTxMailBox[transmit_mailbox].TDLR = (((uint32_t)TxMessage->Data[3] << 24) | 
20001768:	193a      	adds	r2, r7, r4
2000176a:	7811      	ldrb	r1, [r2, #0]
                                             ((uint32_t)TxMessage->Data[1] << 8) | 
2000176c:	4303      	orrs	r3, r0
2000176e:	001a      	movs	r2, r3
    CANx->sTxMailBox[transmit_mailbox].TDLR = (((uint32_t)TxMessage->Data[3] << 24) | 
20001770:	6878      	ldr	r0, [r7, #4]
20001772:	23c4      	movs	r3, #196	; 0xc4
20001774:	005b      	lsls	r3, r3, #1
20001776:	0109      	lsls	r1, r1, #4
20001778:	1841      	adds	r1, r0, r1
2000177a:	18cb      	adds	r3, r1, r3
2000177c:	601a      	str	r2, [r3, #0]
    CANx->sTxMailBox[transmit_mailbox].TDHR = (((uint32_t)TxMessage->Data[7] << 24) | 
2000177e:	683b      	ldr	r3, [r7, #0]
20001780:	7c9b      	ldrb	r3, [r3, #18]
20001782:	061a      	lsls	r2, r3, #24
                                             ((uint32_t)TxMessage->Data[6] << 16) |
20001784:	683b      	ldr	r3, [r7, #0]
20001786:	7c5b      	ldrb	r3, [r3, #17]
20001788:	041b      	lsls	r3, r3, #16
    CANx->sTxMailBox[transmit_mailbox].TDHR = (((uint32_t)TxMessage->Data[7] << 24) | 
2000178a:	431a      	orrs	r2, r3
                                             ((uint32_t)TxMessage->Data[5] << 8) |
2000178c:	683b      	ldr	r3, [r7, #0]
2000178e:	7c1b      	ldrb	r3, [r3, #16]
20001790:	021b      	lsls	r3, r3, #8
                                             ((uint32_t)TxMessage->Data[6] << 16) |
20001792:	4313      	orrs	r3, r2
                                             ((uint32_t)TxMessage->Data[4]));
20001794:	683a      	ldr	r2, [r7, #0]
20001796:	7bd2      	ldrb	r2, [r2, #15]
20001798:	0010      	movs	r0, r2
    CANx->sTxMailBox[transmit_mailbox].TDHR = (((uint32_t)TxMessage->Data[7] << 24) | 
2000179a:	193a      	adds	r2, r7, r4
2000179c:	7811      	ldrb	r1, [r2, #0]
                                             ((uint32_t)TxMessage->Data[5] << 8) |
2000179e:	4303      	orrs	r3, r0
200017a0:	001a      	movs	r2, r3
    CANx->sTxMailBox[transmit_mailbox].TDHR = (((uint32_t)TxMessage->Data[7] << 24) | 
200017a2:	6878      	ldr	r0, [r7, #4]
200017a4:	23c6      	movs	r3, #198	; 0xc6
200017a6:	005b      	lsls	r3, r3, #1
200017a8:	0109      	lsls	r1, r1, #4
200017aa:	1841      	adds	r1, r0, r1
200017ac:	18cb      	adds	r3, r1, r3
200017ae:	601a      	str	r2, [r3, #0]
    /* Request transmission */
    CANx->sTxMailBox[transmit_mailbox].TIR |= TMIDxR_TXRQ;
200017b0:	193b      	adds	r3, r7, r4
200017b2:	781a      	ldrb	r2, [r3, #0]
200017b4:	687b      	ldr	r3, [r7, #4]
200017b6:	3218      	adds	r2, #24
200017b8:	0112      	lsls	r2, r2, #4
200017ba:	58d3      	ldr	r3, [r2, r3]
200017bc:	193a      	adds	r2, r7, r4
200017be:	7812      	ldrb	r2, [r2, #0]
200017c0:	2101      	movs	r1, #1
200017c2:	4319      	orrs	r1, r3
200017c4:	687b      	ldr	r3, [r7, #4]
200017c6:	3218      	adds	r2, #24
200017c8:	0112      	lsls	r2, r2, #4
200017ca:	50d1      	str	r1, [r2, r3]
  }
  return transmit_mailbox;
200017cc:	230f      	movs	r3, #15
200017ce:	18fb      	adds	r3, r7, r3
200017d0:	781b      	ldrb	r3, [r3, #0]
}
200017d2:	0018      	movs	r0, r3
200017d4:	46bd      	mov	sp, r7
200017d6:	b005      	add	sp, #20
200017d8:	bd90      	pop	{r4, r7, pc}

200017da <CAN_TransmitStatus>:
  * @note   CAN3 peripheral is available only for STM32F413_423xx devices
  * @retval CAN_TxStatus_Ok if the CAN driver transmits the message, 
  *         CAN_TxStatus_Failed in an other case.
  */
uint8_t CAN_TransmitStatus(CAN_TypeDef* CANx, uint8_t TransmitMailbox)
{
200017da:	b580      	push	{r7, lr}
200017dc:	b084      	sub	sp, #16
200017de:	af00      	add	r7, sp, #0
200017e0:	6078      	str	r0, [r7, #4]
200017e2:	000a      	movs	r2, r1
200017e4:	1cfb      	adds	r3, r7, #3
200017e6:	701a      	strb	r2, [r3, #0]
  uint32_t state = 0;
200017e8:	2300      	movs	r3, #0
200017ea:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_TRANSMITMAILBOX(TransmitMailbox));
 
  switch (TransmitMailbox)
200017ec:	1cfb      	adds	r3, r7, #3
200017ee:	781b      	ldrb	r3, [r3, #0]
200017f0:	2b01      	cmp	r3, #1
200017f2:	d009      	beq.n	20001808 <CAN_TransmitStatus+0x2e>
200017f4:	2b02      	cmp	r3, #2
200017f6:	d00d      	beq.n	20001814 <CAN_TransmitStatus+0x3a>
200017f8:	2b00      	cmp	r3, #0
200017fa:	d111      	bne.n	20001820 <CAN_TransmitStatus+0x46>
  {
    case (CAN_TXMAILBOX_0): 
      state =   CANx->TSR &  (CAN_TSR_RQCP0 | CAN_TSR_TXOK0 | CAN_TSR_TME0);
200017fc:	687b      	ldr	r3, [r7, #4]
200017fe:	689b      	ldr	r3, [r3, #8]
20001800:	4a25      	ldr	r2, [pc, #148]	; (20001898 <CAN_TransmitStatus+0xbe>)
20001802:	4013      	ands	r3, r2
20001804:	60fb      	str	r3, [r7, #12]
      break;
20001806:	e00e      	b.n	20001826 <CAN_TransmitStatus+0x4c>
    case (CAN_TXMAILBOX_1): 
      state =   CANx->TSR &  (CAN_TSR_RQCP1 | CAN_TSR_TXOK1 | CAN_TSR_TME1);
20001808:	687b      	ldr	r3, [r7, #4]
2000180a:	689b      	ldr	r3, [r3, #8]
2000180c:	4a23      	ldr	r2, [pc, #140]	; (2000189c <CAN_TransmitStatus+0xc2>)
2000180e:	4013      	ands	r3, r2
20001810:	60fb      	str	r3, [r7, #12]
      break;
20001812:	e008      	b.n	20001826 <CAN_TransmitStatus+0x4c>
    case (CAN_TXMAILBOX_2): 
      state =   CANx->TSR &  (CAN_TSR_RQCP2 | CAN_TSR_TXOK2 | CAN_TSR_TME2);
20001814:	687b      	ldr	r3, [r7, #4]
20001816:	689b      	ldr	r3, [r3, #8]
20001818:	4a21      	ldr	r2, [pc, #132]	; (200018a0 <CAN_TransmitStatus+0xc6>)
2000181a:	4013      	ands	r3, r2
2000181c:	60fb      	str	r3, [r7, #12]
      break;
2000181e:	e002      	b.n	20001826 <CAN_TransmitStatus+0x4c>
    default:
      state = CAN_TxStatus_Failed;
20001820:	2300      	movs	r3, #0
20001822:	60fb      	str	r3, [r7, #12]
      break;
20001824:	46c0      	nop			; (mov r8, r8)
  }
  switch (state)
20001826:	68fb      	ldr	r3, [r7, #12]
20001828:	4a1e      	ldr	r2, [pc, #120]	; (200018a4 <CAN_TransmitStatus+0xca>)
2000182a:	4293      	cmp	r3, r2
2000182c:	d01b      	beq.n	20001866 <CAN_TransmitStatus+0x8c>
2000182e:	4a1d      	ldr	r2, [pc, #116]	; (200018a4 <CAN_TransmitStatus+0xca>)
20001830:	4293      	cmp	r3, r2
20001832:	d808      	bhi.n	20001846 <CAN_TransmitStatus+0x6c>
20001834:	4a1c      	ldr	r2, [pc, #112]	; (200018a8 <CAN_TransmitStatus+0xce>)
20001836:	4293      	cmp	r3, r2
20001838:	d012      	beq.n	20001860 <CAN_TransmitStatus+0x86>
2000183a:	4a17      	ldr	r2, [pc, #92]	; (20001898 <CAN_TransmitStatus+0xbe>)
2000183c:	4293      	cmp	r3, r2
2000183e:	d018      	beq.n	20001872 <CAN_TransmitStatus+0x98>
20001840:	2b00      	cmp	r3, #0
20001842:	d00a      	beq.n	2000185a <CAN_TransmitStatus+0x80>
20001844:	e01e      	b.n	20001884 <CAN_TransmitStatus+0xaa>
20001846:	4a19      	ldr	r2, [pc, #100]	; (200018ac <CAN_TransmitStatus+0xd2>)
20001848:	4293      	cmp	r3, r2
2000184a:	d00f      	beq.n	2000186c <CAN_TransmitStatus+0x92>
2000184c:	4a14      	ldr	r2, [pc, #80]	; (200018a0 <CAN_TransmitStatus+0xc6>)
2000184e:	4293      	cmp	r3, r2
20001850:	d015      	beq.n	2000187e <CAN_TransmitStatus+0xa4>
20001852:	4a12      	ldr	r2, [pc, #72]	; (2000189c <CAN_TransmitStatus+0xc2>)
20001854:	4293      	cmp	r3, r2
20001856:	d00f      	beq.n	20001878 <CAN_TransmitStatus+0x9e>
20001858:	e014      	b.n	20001884 <CAN_TransmitStatus+0xaa>
  {
      /* transmit pending  */
    case (0x0): state = CAN_TxStatus_Pending;
2000185a:	2302      	movs	r3, #2
2000185c:	60fb      	str	r3, [r7, #12]
      break;
2000185e:	e014      	b.n	2000188a <CAN_TransmitStatus+0xb0>
      /* transmit failed  */
     case (CAN_TSR_RQCP0 | CAN_TSR_TME0): state = CAN_TxStatus_Failed;
20001860:	2300      	movs	r3, #0
20001862:	60fb      	str	r3, [r7, #12]
      break;
20001864:	e011      	b.n	2000188a <CAN_TransmitStatus+0xb0>
     case (CAN_TSR_RQCP1 | CAN_TSR_TME1): state = CAN_TxStatus_Failed;
20001866:	2300      	movs	r3, #0
20001868:	60fb      	str	r3, [r7, #12]
      break;
2000186a:	e00e      	b.n	2000188a <CAN_TransmitStatus+0xb0>
     case (CAN_TSR_RQCP2 | CAN_TSR_TME2): state = CAN_TxStatus_Failed;
2000186c:	2300      	movs	r3, #0
2000186e:	60fb      	str	r3, [r7, #12]
      break;
20001870:	e00b      	b.n	2000188a <CAN_TransmitStatus+0xb0>
      /* transmit succeeded  */
    case (CAN_TSR_RQCP0 | CAN_TSR_TXOK0 | CAN_TSR_TME0):state = CAN_TxStatus_Ok;
20001872:	2301      	movs	r3, #1
20001874:	60fb      	str	r3, [r7, #12]
      break;
20001876:	e008      	b.n	2000188a <CAN_TransmitStatus+0xb0>
    case (CAN_TSR_RQCP1 | CAN_TSR_TXOK1 | CAN_TSR_TME1):state = CAN_TxStatus_Ok;
20001878:	2301      	movs	r3, #1
2000187a:	60fb      	str	r3, [r7, #12]
      break;
2000187c:	e005      	b.n	2000188a <CAN_TransmitStatus+0xb0>
    case (CAN_TSR_RQCP2 | CAN_TSR_TXOK2 | CAN_TSR_TME2):state = CAN_TxStatus_Ok;
2000187e:	2301      	movs	r3, #1
20001880:	60fb      	str	r3, [r7, #12]
      break;
20001882:	e002      	b.n	2000188a <CAN_TransmitStatus+0xb0>
    default: state = CAN_TxStatus_Failed;
20001884:	2300      	movs	r3, #0
20001886:	60fb      	str	r3, [r7, #12]
      break;
20001888:	46c0      	nop			; (mov r8, r8)
  }
  return (uint8_t) state;
2000188a:	68fb      	ldr	r3, [r7, #12]
2000188c:	b2db      	uxtb	r3, r3
}
2000188e:	0018      	movs	r0, r3
20001890:	46bd      	mov	sp, r7
20001892:	b004      	add	sp, #16
20001894:	bd80      	pop	{r7, pc}
20001896:	46c0      	nop			; (mov r8, r8)
20001898:	04000003 	streq	r0, [r0], #-3
2000189c:	08000300 	stmdaeq	r0, {r8, r9}
200018a0:	10030000 	andne	r0, r3, r0
200018a4:	08000100 	stmdaeq	r0, {r8}
200018a8:	04000001 	streq	r0, [r0], #-1
200018ac:	10010000 	andne	r0, r1, r0

200018b0 <CAN_CancelTransmit>:
  * @param  Mailbox: Mailbox number.
  * @note   CAN3 peripheral is available only for STM32F413_423xx devices
  * @retval None
  */
void CAN_CancelTransmit(CAN_TypeDef* CANx, uint8_t Mailbox)
{
200018b0:	b580      	push	{r7, lr}
200018b2:	b082      	sub	sp, #8
200018b4:	af00      	add	r7, sp, #0
200018b6:	6078      	str	r0, [r7, #4]
200018b8:	000a      	movs	r2, r1
200018ba:	1cfb      	adds	r3, r7, #3
200018bc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_TRANSMITMAILBOX(Mailbox));
  /* abort transmission */
  switch (Mailbox)
200018be:	1cfb      	adds	r3, r7, #3
200018c0:	781b      	ldrb	r3, [r3, #0]
200018c2:	2b01      	cmp	r3, #1
200018c4:	d00b      	beq.n	200018de <CAN_CancelTransmit+0x2e>
200018c6:	2b02      	cmp	r3, #2
200018c8:	d011      	beq.n	200018ee <CAN_CancelTransmit+0x3e>
200018ca:	2b00      	cmp	r3, #0
200018cc:	d000      	beq.n	200018d0 <CAN_CancelTransmit+0x20>
    case (CAN_TXMAILBOX_1): CANx->TSR |= CAN_TSR_ABRQ1;
      break;
    case (CAN_TXMAILBOX_2): CANx->TSR |= CAN_TSR_ABRQ2;
      break;
    default:
      break;
200018ce:	e016      	b.n	200018fe <CAN_CancelTransmit+0x4e>
    case (CAN_TXMAILBOX_0): CANx->TSR |= CAN_TSR_ABRQ0;
200018d0:	687b      	ldr	r3, [r7, #4]
200018d2:	689b      	ldr	r3, [r3, #8]
200018d4:	2280      	movs	r2, #128	; 0x80
200018d6:	431a      	orrs	r2, r3
200018d8:	687b      	ldr	r3, [r7, #4]
200018da:	609a      	str	r2, [r3, #8]
      break;
200018dc:	e00f      	b.n	200018fe <CAN_CancelTransmit+0x4e>
    case (CAN_TXMAILBOX_1): CANx->TSR |= CAN_TSR_ABRQ1;
200018de:	687b      	ldr	r3, [r7, #4]
200018e0:	689b      	ldr	r3, [r3, #8]
200018e2:	2280      	movs	r2, #128	; 0x80
200018e4:	0212      	lsls	r2, r2, #8
200018e6:	431a      	orrs	r2, r3
200018e8:	687b      	ldr	r3, [r7, #4]
200018ea:	609a      	str	r2, [r3, #8]
      break;
200018ec:	e007      	b.n	200018fe <CAN_CancelTransmit+0x4e>
    case (CAN_TXMAILBOX_2): CANx->TSR |= CAN_TSR_ABRQ2;
200018ee:	687b      	ldr	r3, [r7, #4]
200018f0:	689b      	ldr	r3, [r3, #8]
200018f2:	2280      	movs	r2, #128	; 0x80
200018f4:	0412      	lsls	r2, r2, #16
200018f6:	431a      	orrs	r2, r3
200018f8:	687b      	ldr	r3, [r7, #4]
200018fa:	609a      	str	r2, [r3, #8]
      break;
200018fc:	46c0      	nop			; (mov r8, r8)
  }
}
200018fe:	46c0      	nop			; (mov r8, r8)
20001900:	46bd      	mov	sp, r7
20001902:	b002      	add	sp, #8
20001904:	bd80      	pop	{r7, pc}

20001906 <CAN_Receive>:
  *         CAN DLC, CAN data and FMI number.
  * @note   CAN3 peripheral is available only for STM32F413_423xx devices
  * @retval None
  */
void CAN_Receive(CAN_TypeDef* CANx, uint8_t FIFONumber, CanRxMsg* RxMessage)
{
20001906:	b580      	push	{r7, lr}
20001908:	b084      	sub	sp, #16
2000190a:	af00      	add	r7, sp, #0
2000190c:	60f8      	str	r0, [r7, #12]
2000190e:	607a      	str	r2, [r7, #4]
20001910:	200b      	movs	r0, #11
20001912:	183b      	adds	r3, r7, r0
20001914:	1c0a      	adds	r2, r1, #0
20001916:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_FIFO(FIFONumber));
  /* Get the Id */
  RxMessage->IDE = (uint8_t)0x04 & CANx->sFIFOMailBox[FIFONumber].RIR;
20001918:	183b      	adds	r3, r7, r0
2000191a:	781a      	ldrb	r2, [r3, #0]
2000191c:	68fb      	ldr	r3, [r7, #12]
2000191e:	321b      	adds	r2, #27
20001920:	0112      	lsls	r2, r2, #4
20001922:	58d3      	ldr	r3, [r2, r3]
20001924:	b2db      	uxtb	r3, r3
20001926:	2204      	movs	r2, #4
20001928:	4013      	ands	r3, r2
2000192a:	b2da      	uxtb	r2, r3
2000192c:	687b      	ldr	r3, [r7, #4]
2000192e:	721a      	strb	r2, [r3, #8]
  if (RxMessage->IDE == CAN_Id_Standard)
20001930:	687b      	ldr	r3, [r7, #4]
20001932:	7a1b      	ldrb	r3, [r3, #8]
20001934:	2b00      	cmp	r3, #0
20001936:	d10c      	bne.n	20001952 <CAN_Receive+0x4c>
  {
    RxMessage->StdId = (uint32_t)0x000007FF & (CANx->sFIFOMailBox[FIFONumber].RIR >> 21);
20001938:	230b      	movs	r3, #11
2000193a:	18fb      	adds	r3, r7, r3
2000193c:	781a      	ldrb	r2, [r3, #0]
2000193e:	68fb      	ldr	r3, [r7, #12]
20001940:	321b      	adds	r2, #27
20001942:	0112      	lsls	r2, r2, #4
20001944:	58d3      	ldr	r3, [r2, r3]
20001946:	0d5b      	lsrs	r3, r3, #21
20001948:	055b      	lsls	r3, r3, #21
2000194a:	0d5a      	lsrs	r2, r3, #21
2000194c:	687b      	ldr	r3, [r7, #4]
2000194e:	601a      	str	r2, [r3, #0]
20001950:	e00b      	b.n	2000196a <CAN_Receive+0x64>
  }
  else
  {
    RxMessage->ExtId = (uint32_t)0x1FFFFFFF & (CANx->sFIFOMailBox[FIFONumber].RIR >> 3);
20001952:	230b      	movs	r3, #11
20001954:	18fb      	adds	r3, r7, r3
20001956:	781a      	ldrb	r2, [r3, #0]
20001958:	68fb      	ldr	r3, [r7, #12]
2000195a:	321b      	adds	r2, #27
2000195c:	0112      	lsls	r2, r2, #4
2000195e:	58d3      	ldr	r3, [r2, r3]
20001960:	08db      	lsrs	r3, r3, #3
20001962:	00db      	lsls	r3, r3, #3
20001964:	08da      	lsrs	r2, r3, #3
20001966:	687b      	ldr	r3, [r7, #4]
20001968:	605a      	str	r2, [r3, #4]
  }
  
  RxMessage->RTR = (uint8_t)0x02 & CANx->sFIFOMailBox[FIFONumber].RIR;
2000196a:	210b      	movs	r1, #11
2000196c:	187b      	adds	r3, r7, r1
2000196e:	781a      	ldrb	r2, [r3, #0]
20001970:	68fb      	ldr	r3, [r7, #12]
20001972:	321b      	adds	r2, #27
20001974:	0112      	lsls	r2, r2, #4
20001976:	58d3      	ldr	r3, [r2, r3]
20001978:	b2db      	uxtb	r3, r3
2000197a:	2202      	movs	r2, #2
2000197c:	4013      	ands	r3, r2
2000197e:	b2da      	uxtb	r2, r3
20001980:	687b      	ldr	r3, [r7, #4]
20001982:	725a      	strb	r2, [r3, #9]
  /* Get the DLC */
  RxMessage->DLC = (uint8_t)0x0F & CANx->sFIFOMailBox[FIFONumber].RDTR;
20001984:	187b      	adds	r3, r7, r1
20001986:	781b      	ldrb	r3, [r3, #0]
20001988:	68fa      	ldr	r2, [r7, #12]
2000198a:	331b      	adds	r3, #27
2000198c:	011b      	lsls	r3, r3, #4
2000198e:	18d3      	adds	r3, r2, r3
20001990:	3304      	adds	r3, #4
20001992:	681b      	ldr	r3, [r3, #0]
20001994:	b2db      	uxtb	r3, r3
20001996:	220f      	movs	r2, #15
20001998:	4013      	ands	r3, r2
2000199a:	b2da      	uxtb	r2, r3
2000199c:	687b      	ldr	r3, [r7, #4]
2000199e:	729a      	strb	r2, [r3, #10]
  /* Get the FMI */
  RxMessage->FMI = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDTR >> 8);
200019a0:	0008      	movs	r0, r1
200019a2:	183b      	adds	r3, r7, r0
200019a4:	781b      	ldrb	r3, [r3, #0]
200019a6:	68fa      	ldr	r2, [r7, #12]
200019a8:	331b      	adds	r3, #27
200019aa:	011b      	lsls	r3, r3, #4
200019ac:	18d3      	adds	r3, r2, r3
200019ae:	3304      	adds	r3, #4
200019b0:	681b      	ldr	r3, [r3, #0]
200019b2:	0a1b      	lsrs	r3, r3, #8
200019b4:	b2da      	uxtb	r2, r3
200019b6:	687b      	ldr	r3, [r7, #4]
200019b8:	74da      	strb	r2, [r3, #19]
  /* Get the data field */
  RxMessage->Data[0] = (uint8_t)0xFF & CANx->sFIFOMailBox[FIFONumber].RDLR;
200019ba:	183b      	adds	r3, r7, r0
200019bc:	781a      	ldrb	r2, [r3, #0]
200019be:	68f9      	ldr	r1, [r7, #12]
200019c0:	23dc      	movs	r3, #220	; 0xdc
200019c2:	005b      	lsls	r3, r3, #1
200019c4:	0112      	lsls	r2, r2, #4
200019c6:	188a      	adds	r2, r1, r2
200019c8:	18d3      	adds	r3, r2, r3
200019ca:	681b      	ldr	r3, [r3, #0]
200019cc:	b2da      	uxtb	r2, r3
200019ce:	687b      	ldr	r3, [r7, #4]
200019d0:	72da      	strb	r2, [r3, #11]
  RxMessage->Data[1] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDLR >> 8);
200019d2:	183b      	adds	r3, r7, r0
200019d4:	781a      	ldrb	r2, [r3, #0]
200019d6:	68f9      	ldr	r1, [r7, #12]
200019d8:	23dc      	movs	r3, #220	; 0xdc
200019da:	005b      	lsls	r3, r3, #1
200019dc:	0112      	lsls	r2, r2, #4
200019de:	188a      	adds	r2, r1, r2
200019e0:	18d3      	adds	r3, r2, r3
200019e2:	681b      	ldr	r3, [r3, #0]
200019e4:	0a1b      	lsrs	r3, r3, #8
200019e6:	b2da      	uxtb	r2, r3
200019e8:	687b      	ldr	r3, [r7, #4]
200019ea:	731a      	strb	r2, [r3, #12]
  RxMessage->Data[2] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDLR >> 16);
200019ec:	183b      	adds	r3, r7, r0
200019ee:	781a      	ldrb	r2, [r3, #0]
200019f0:	68f9      	ldr	r1, [r7, #12]
200019f2:	23dc      	movs	r3, #220	; 0xdc
200019f4:	005b      	lsls	r3, r3, #1
200019f6:	0112      	lsls	r2, r2, #4
200019f8:	188a      	adds	r2, r1, r2
200019fa:	18d3      	adds	r3, r2, r3
200019fc:	681b      	ldr	r3, [r3, #0]
200019fe:	0c1b      	lsrs	r3, r3, #16
20001a00:	b2da      	uxtb	r2, r3
20001a02:	687b      	ldr	r3, [r7, #4]
20001a04:	735a      	strb	r2, [r3, #13]
  RxMessage->Data[3] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDLR >> 24);
20001a06:	183b      	adds	r3, r7, r0
20001a08:	781a      	ldrb	r2, [r3, #0]
20001a0a:	68f9      	ldr	r1, [r7, #12]
20001a0c:	23dc      	movs	r3, #220	; 0xdc
20001a0e:	005b      	lsls	r3, r3, #1
20001a10:	0112      	lsls	r2, r2, #4
20001a12:	188a      	adds	r2, r1, r2
20001a14:	18d3      	adds	r3, r2, r3
20001a16:	681b      	ldr	r3, [r3, #0]
20001a18:	0e1b      	lsrs	r3, r3, #24
20001a1a:	b2da      	uxtb	r2, r3
20001a1c:	687b      	ldr	r3, [r7, #4]
20001a1e:	739a      	strb	r2, [r3, #14]
  RxMessage->Data[4] = (uint8_t)0xFF & CANx->sFIFOMailBox[FIFONumber].RDHR;
20001a20:	183b      	adds	r3, r7, r0
20001a22:	781a      	ldrb	r2, [r3, #0]
20001a24:	68f9      	ldr	r1, [r7, #12]
20001a26:	23de      	movs	r3, #222	; 0xde
20001a28:	005b      	lsls	r3, r3, #1
20001a2a:	0112      	lsls	r2, r2, #4
20001a2c:	188a      	adds	r2, r1, r2
20001a2e:	18d3      	adds	r3, r2, r3
20001a30:	681b      	ldr	r3, [r3, #0]
20001a32:	b2da      	uxtb	r2, r3
20001a34:	687b      	ldr	r3, [r7, #4]
20001a36:	73da      	strb	r2, [r3, #15]
  RxMessage->Data[5] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDHR >> 8);
20001a38:	183b      	adds	r3, r7, r0
20001a3a:	781a      	ldrb	r2, [r3, #0]
20001a3c:	68f9      	ldr	r1, [r7, #12]
20001a3e:	23de      	movs	r3, #222	; 0xde
20001a40:	005b      	lsls	r3, r3, #1
20001a42:	0112      	lsls	r2, r2, #4
20001a44:	188a      	adds	r2, r1, r2
20001a46:	18d3      	adds	r3, r2, r3
20001a48:	681b      	ldr	r3, [r3, #0]
20001a4a:	0a1b      	lsrs	r3, r3, #8
20001a4c:	b2da      	uxtb	r2, r3
20001a4e:	687b      	ldr	r3, [r7, #4]
20001a50:	741a      	strb	r2, [r3, #16]
  RxMessage->Data[6] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDHR >> 16);
20001a52:	183b      	adds	r3, r7, r0
20001a54:	781a      	ldrb	r2, [r3, #0]
20001a56:	68f9      	ldr	r1, [r7, #12]
20001a58:	23de      	movs	r3, #222	; 0xde
20001a5a:	005b      	lsls	r3, r3, #1
20001a5c:	0112      	lsls	r2, r2, #4
20001a5e:	188a      	adds	r2, r1, r2
20001a60:	18d3      	adds	r3, r2, r3
20001a62:	681b      	ldr	r3, [r3, #0]
20001a64:	0c1b      	lsrs	r3, r3, #16
20001a66:	b2da      	uxtb	r2, r3
20001a68:	687b      	ldr	r3, [r7, #4]
20001a6a:	745a      	strb	r2, [r3, #17]
  RxMessage->Data[7] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDHR >> 24);
20001a6c:	183b      	adds	r3, r7, r0
20001a6e:	781a      	ldrb	r2, [r3, #0]
20001a70:	68f9      	ldr	r1, [r7, #12]
20001a72:	23de      	movs	r3, #222	; 0xde
20001a74:	005b      	lsls	r3, r3, #1
20001a76:	0112      	lsls	r2, r2, #4
20001a78:	188a      	adds	r2, r1, r2
20001a7a:	18d3      	adds	r3, r2, r3
20001a7c:	681b      	ldr	r3, [r3, #0]
20001a7e:	0e1b      	lsrs	r3, r3, #24
20001a80:	b2da      	uxtb	r2, r3
20001a82:	687b      	ldr	r3, [r7, #4]
20001a84:	749a      	strb	r2, [r3, #18]
  /* Release the FIFO */
  /* Release FIFO0 */
  if (FIFONumber == CAN_FIFO0)
20001a86:	183b      	adds	r3, r7, r0
20001a88:	781b      	ldrb	r3, [r3, #0]
20001a8a:	2b00      	cmp	r3, #0
20001a8c:	d106      	bne.n	20001a9c <CAN_Receive+0x196>
  {
    CANx->RF0R |= CAN_RF0R_RFOM0;
20001a8e:	68fb      	ldr	r3, [r7, #12]
20001a90:	68db      	ldr	r3, [r3, #12]
20001a92:	2220      	movs	r2, #32
20001a94:	431a      	orrs	r2, r3
20001a96:	68fb      	ldr	r3, [r7, #12]
20001a98:	60da      	str	r2, [r3, #12]
  /* Release FIFO1 */
  else /* FIFONumber == CAN_FIFO1 */
  {
    CANx->RF1R |= CAN_RF1R_RFOM1;
  }
}
20001a9a:	e005      	b.n	20001aa8 <CAN_Receive+0x1a2>
    CANx->RF1R |= CAN_RF1R_RFOM1;
20001a9c:	68fb      	ldr	r3, [r7, #12]
20001a9e:	691b      	ldr	r3, [r3, #16]
20001aa0:	2220      	movs	r2, #32
20001aa2:	431a      	orrs	r2, r3
20001aa4:	68fb      	ldr	r3, [r7, #12]
20001aa6:	611a      	str	r2, [r3, #16]
}
20001aa8:	46c0      	nop			; (mov r8, r8)
20001aaa:	46bd      	mov	sp, r7
20001aac:	b004      	add	sp, #16
20001aae:	bd80      	pop	{r7, pc}

20001ab0 <CAN_FIFORelease>:
  * @param  FIFONumber: FIFO to release, CAN_FIFO0 or CAN_FIFO1.
  * @note   CAN3 peripheral is available only for STM32F413_423xx devices
  * @retval None
  */
void CAN_FIFORelease(CAN_TypeDef* CANx, uint8_t FIFONumber)
{
20001ab0:	b580      	push	{r7, lr}
20001ab2:	b082      	sub	sp, #8
20001ab4:	af00      	add	r7, sp, #0
20001ab6:	6078      	str	r0, [r7, #4]
20001ab8:	000a      	movs	r2, r1
20001aba:	1cfb      	adds	r3, r7, #3
20001abc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_FIFO(FIFONumber));
  /* Release FIFO0 */
  if (FIFONumber == CAN_FIFO0)
20001abe:	1cfb      	adds	r3, r7, #3
20001ac0:	781b      	ldrb	r3, [r3, #0]
20001ac2:	2b00      	cmp	r3, #0
20001ac4:	d106      	bne.n	20001ad4 <CAN_FIFORelease+0x24>
  {
    CANx->RF0R |= CAN_RF0R_RFOM0;
20001ac6:	687b      	ldr	r3, [r7, #4]
20001ac8:	68db      	ldr	r3, [r3, #12]
20001aca:	2220      	movs	r2, #32
20001acc:	431a      	orrs	r2, r3
20001ace:	687b      	ldr	r3, [r7, #4]
20001ad0:	60da      	str	r2, [r3, #12]
  /* Release FIFO1 */
  else /* FIFONumber == CAN_FIFO1 */
  {
    CANx->RF1R |= CAN_RF1R_RFOM1;
  }
}
20001ad2:	e005      	b.n	20001ae0 <CAN_FIFORelease+0x30>
    CANx->RF1R |= CAN_RF1R_RFOM1;
20001ad4:	687b      	ldr	r3, [r7, #4]
20001ad6:	691b      	ldr	r3, [r3, #16]
20001ad8:	2220      	movs	r2, #32
20001ada:	431a      	orrs	r2, r3
20001adc:	687b      	ldr	r3, [r7, #4]
20001ade:	611a      	str	r2, [r3, #16]
}
20001ae0:	46c0      	nop			; (mov r8, r8)
20001ae2:	46bd      	mov	sp, r7
20001ae4:	b002      	add	sp, #8
20001ae6:	bd80      	pop	{r7, pc}

20001ae8 <CAN_MessagePending>:
  * @param  FIFONumber: Receive FIFO number, CAN_FIFO0 or CAN_FIFO1.
  * @note   CAN3 peripheral is available only for STM32F413_423xx devices
  * @retval NbMessage : which is the number of pending message.
  */
uint8_t CAN_MessagePending(CAN_TypeDef* CANx, uint8_t FIFONumber)
{
20001ae8:	b580      	push	{r7, lr}
20001aea:	b084      	sub	sp, #16
20001aec:	af00      	add	r7, sp, #0
20001aee:	6078      	str	r0, [r7, #4]
20001af0:	000a      	movs	r2, r1
20001af2:	1cfb      	adds	r3, r7, #3
20001af4:	701a      	strb	r2, [r3, #0]
  uint8_t message_pending=0;
20001af6:	230f      	movs	r3, #15
20001af8:	18fb      	adds	r3, r7, r3
20001afa:	2200      	movs	r2, #0
20001afc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_FIFO(FIFONumber));
  if (FIFONumber == CAN_FIFO0)
20001afe:	1cfb      	adds	r3, r7, #3
20001b00:	781b      	ldrb	r3, [r3, #0]
20001b02:	2b00      	cmp	r3, #0
20001b04:	d108      	bne.n	20001b18 <CAN_MessagePending+0x30>
  {
    message_pending = (uint8_t)(CANx->RF0R&(uint32_t)0x03);
20001b06:	687b      	ldr	r3, [r7, #4]
20001b08:	68db      	ldr	r3, [r3, #12]
20001b0a:	b2da      	uxtb	r2, r3
20001b0c:	230f      	movs	r3, #15
20001b0e:	18fb      	adds	r3, r7, r3
20001b10:	2103      	movs	r1, #3
20001b12:	400a      	ands	r2, r1
20001b14:	701a      	strb	r2, [r3, #0]
20001b16:	e010      	b.n	20001b3a <CAN_MessagePending+0x52>
  }
  else if (FIFONumber == CAN_FIFO1)
20001b18:	1cfb      	adds	r3, r7, #3
20001b1a:	781b      	ldrb	r3, [r3, #0]
20001b1c:	2b01      	cmp	r3, #1
20001b1e:	d108      	bne.n	20001b32 <CAN_MessagePending+0x4a>
  {
    message_pending = (uint8_t)(CANx->RF1R&(uint32_t)0x03);
20001b20:	687b      	ldr	r3, [r7, #4]
20001b22:	691b      	ldr	r3, [r3, #16]
20001b24:	b2da      	uxtb	r2, r3
20001b26:	230f      	movs	r3, #15
20001b28:	18fb      	adds	r3, r7, r3
20001b2a:	2103      	movs	r1, #3
20001b2c:	400a      	ands	r2, r1
20001b2e:	701a      	strb	r2, [r3, #0]
20001b30:	e003      	b.n	20001b3a <CAN_MessagePending+0x52>
  }
  else
  {
    message_pending = 0;
20001b32:	230f      	movs	r3, #15
20001b34:	18fb      	adds	r3, r7, r3
20001b36:	2200      	movs	r2, #0
20001b38:	701a      	strb	r2, [r3, #0]
  }
  return message_pending;
20001b3a:	230f      	movs	r3, #15
20001b3c:	18fb      	adds	r3, r7, r3
20001b3e:	781b      	ldrb	r3, [r3, #0]
}
20001b40:	0018      	movs	r0, r3
20001b42:	46bd      	mov	sp, r7
20001b44:	b004      	add	sp, #16
20001b46:	bd80      	pop	{r7, pc}

20001b48 <CAN_OperatingModeRequest>:
  * @retval status of the requested mode which can be 
  *         - CAN_ModeStatus_Failed:  CAN failed entering the specific mode 
  *         - CAN_ModeStatus_Success: CAN Succeed entering the specific mode 
  */
uint8_t CAN_OperatingModeRequest(CAN_TypeDef* CANx, uint8_t CAN_OperatingMode)
{
20001b48:	b580      	push	{r7, lr}
20001b4a:	b084      	sub	sp, #16
20001b4c:	af00      	add	r7, sp, #0
20001b4e:	6078      	str	r0, [r7, #4]
20001b50:	000a      	movs	r2, r1
20001b52:	1cfb      	adds	r3, r7, #3
20001b54:	701a      	strb	r2, [r3, #0]
  uint8_t status = CAN_ModeStatus_Failed;
20001b56:	230f      	movs	r3, #15
20001b58:	18fb      	adds	r3, r7, r3
20001b5a:	2200      	movs	r2, #0
20001b5c:	701a      	strb	r2, [r3, #0]
  
  /* Timeout for INAK or also for SLAK bits*/
  uint32_t timeout = INAK_TIMEOUT; 
20001b5e:	4b42      	ldr	r3, [pc, #264]	; (20001c68 <CAN_OperatingModeRequest+0x120>)
20001b60:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_OPERATING_MODE(CAN_OperatingMode));

  if (CAN_OperatingMode == CAN_OperatingMode_Initialization)
20001b62:	1cfb      	adds	r3, r7, #3
20001b64:	781b      	ldrb	r3, [r3, #0]
20001b66:	2b00      	cmp	r3, #0
20001b68:	d124      	bne.n	20001bb4 <CAN_OperatingModeRequest+0x6c>
  {
    /* Request initialisation */
    CANx->MCR = (uint32_t)((CANx->MCR & (uint32_t)(~(uint32_t)CAN_MCR_SLEEP)) | CAN_MCR_INRQ);
20001b6a:	687b      	ldr	r3, [r7, #4]
20001b6c:	681b      	ldr	r3, [r3, #0]
20001b6e:	2203      	movs	r2, #3
20001b70:	4393      	bics	r3, r2
20001b72:	2201      	movs	r2, #1
20001b74:	431a      	orrs	r2, r3
20001b76:	687b      	ldr	r3, [r7, #4]
20001b78:	601a      	str	r2, [r3, #0]

    /* Wait the acknowledge */
    while (((CANx->MSR & CAN_MODE_MASK) != CAN_MSR_INAK) && (timeout != 0))
20001b7a:	e002      	b.n	20001b82 <CAN_OperatingModeRequest+0x3a>
    {
      timeout--;
20001b7c:	68bb      	ldr	r3, [r7, #8]
20001b7e:	3b01      	subs	r3, #1
20001b80:	60bb      	str	r3, [r7, #8]
    while (((CANx->MSR & CAN_MODE_MASK) != CAN_MSR_INAK) && (timeout != 0))
20001b82:	687b      	ldr	r3, [r7, #4]
20001b84:	685b      	ldr	r3, [r3, #4]
20001b86:	2203      	movs	r2, #3
20001b88:	4013      	ands	r3, r2
20001b8a:	2b01      	cmp	r3, #1
20001b8c:	d002      	beq.n	20001b94 <CAN_OperatingModeRequest+0x4c>
20001b8e:	68bb      	ldr	r3, [r7, #8]
20001b90:	2b00      	cmp	r3, #0
20001b92:	d1f3      	bne.n	20001b7c <CAN_OperatingModeRequest+0x34>
    }
    if ((CANx->MSR & CAN_MODE_MASK) != CAN_MSR_INAK)
20001b94:	687b      	ldr	r3, [r7, #4]
20001b96:	685b      	ldr	r3, [r3, #4]
20001b98:	2203      	movs	r2, #3
20001b9a:	4013      	ands	r3, r2
20001b9c:	2b01      	cmp	r3, #1
20001b9e:	d004      	beq.n	20001baa <CAN_OperatingModeRequest+0x62>
    {
      status = CAN_ModeStatus_Failed;
20001ba0:	230f      	movs	r3, #15
20001ba2:	18fb      	adds	r3, r7, r3
20001ba4:	2200      	movs	r2, #0
20001ba6:	701a      	strb	r2, [r3, #0]
20001ba8:	e057      	b.n	20001c5a <CAN_OperatingModeRequest+0x112>
    }
    else
    {
      status = CAN_ModeStatus_Success;
20001baa:	230f      	movs	r3, #15
20001bac:	18fb      	adds	r3, r7, r3
20001bae:	2201      	movs	r2, #1
20001bb0:	701a      	strb	r2, [r3, #0]
20001bb2:	e052      	b.n	20001c5a <CAN_OperatingModeRequest+0x112>
    }
  }
  else  if (CAN_OperatingMode == CAN_OperatingMode_Normal)
20001bb4:	1cfb      	adds	r3, r7, #3
20001bb6:	781b      	ldrb	r3, [r3, #0]
20001bb8:	2b01      	cmp	r3, #1
20001bba:	d121      	bne.n	20001c00 <CAN_OperatingModeRequest+0xb8>
  {
    /* Request leave initialisation and sleep mode  and enter Normal mode */
    CANx->MCR &= (uint32_t)(~(CAN_MCR_SLEEP|CAN_MCR_INRQ));
20001bbc:	687b      	ldr	r3, [r7, #4]
20001bbe:	681b      	ldr	r3, [r3, #0]
20001bc0:	2203      	movs	r2, #3
20001bc2:	4393      	bics	r3, r2
20001bc4:	001a      	movs	r2, r3
20001bc6:	687b      	ldr	r3, [r7, #4]
20001bc8:	601a      	str	r2, [r3, #0]

    /* Wait the acknowledge */
    while (((CANx->MSR & CAN_MODE_MASK) != 0) && (timeout!=0))
20001bca:	e002      	b.n	20001bd2 <CAN_OperatingModeRequest+0x8a>
    {
      timeout--;
20001bcc:	68bb      	ldr	r3, [r7, #8]
20001bce:	3b01      	subs	r3, #1
20001bd0:	60bb      	str	r3, [r7, #8]
    while (((CANx->MSR & CAN_MODE_MASK) != 0) && (timeout!=0))
20001bd2:	687b      	ldr	r3, [r7, #4]
20001bd4:	685b      	ldr	r3, [r3, #4]
20001bd6:	2203      	movs	r2, #3
20001bd8:	4013      	ands	r3, r2
20001bda:	d002      	beq.n	20001be2 <CAN_OperatingModeRequest+0x9a>
20001bdc:	68bb      	ldr	r3, [r7, #8]
20001bde:	2b00      	cmp	r3, #0
20001be0:	d1f4      	bne.n	20001bcc <CAN_OperatingModeRequest+0x84>
    }
    if ((CANx->MSR & CAN_MODE_MASK) != 0)
20001be2:	687b      	ldr	r3, [r7, #4]
20001be4:	685b      	ldr	r3, [r3, #4]
20001be6:	2203      	movs	r2, #3
20001be8:	4013      	ands	r3, r2
20001bea:	d004      	beq.n	20001bf6 <CAN_OperatingModeRequest+0xae>
    {
      status = CAN_ModeStatus_Failed;
20001bec:	230f      	movs	r3, #15
20001bee:	18fb      	adds	r3, r7, r3
20001bf0:	2200      	movs	r2, #0
20001bf2:	701a      	strb	r2, [r3, #0]
20001bf4:	e031      	b.n	20001c5a <CAN_OperatingModeRequest+0x112>
    }
    else
    {
      status = CAN_ModeStatus_Success;
20001bf6:	230f      	movs	r3, #15
20001bf8:	18fb      	adds	r3, r7, r3
20001bfa:	2201      	movs	r2, #1
20001bfc:	701a      	strb	r2, [r3, #0]
20001bfe:	e02c      	b.n	20001c5a <CAN_OperatingModeRequest+0x112>
    }
  }
  else  if (CAN_OperatingMode == CAN_OperatingMode_Sleep)
20001c00:	1cfb      	adds	r3, r7, #3
20001c02:	781b      	ldrb	r3, [r3, #0]
20001c04:	2b02      	cmp	r3, #2
20001c06:	d124      	bne.n	20001c52 <CAN_OperatingModeRequest+0x10a>
  {
    /* Request Sleep mode */
    CANx->MCR = (uint32_t)((CANx->MCR & (uint32_t)(~(uint32_t)CAN_MCR_INRQ)) | CAN_MCR_SLEEP);
20001c08:	687b      	ldr	r3, [r7, #4]
20001c0a:	681b      	ldr	r3, [r3, #0]
20001c0c:	2203      	movs	r2, #3
20001c0e:	4393      	bics	r3, r2
20001c10:	2202      	movs	r2, #2
20001c12:	431a      	orrs	r2, r3
20001c14:	687b      	ldr	r3, [r7, #4]
20001c16:	601a      	str	r2, [r3, #0]

    /* Wait the acknowledge */
    while (((CANx->MSR & CAN_MODE_MASK) != CAN_MSR_SLAK) && (timeout!=0))
20001c18:	e002      	b.n	20001c20 <CAN_OperatingModeRequest+0xd8>
    {
      timeout--;
20001c1a:	68bb      	ldr	r3, [r7, #8]
20001c1c:	3b01      	subs	r3, #1
20001c1e:	60bb      	str	r3, [r7, #8]
    while (((CANx->MSR & CAN_MODE_MASK) != CAN_MSR_SLAK) && (timeout!=0))
20001c20:	687b      	ldr	r3, [r7, #4]
20001c22:	685b      	ldr	r3, [r3, #4]
20001c24:	2203      	movs	r2, #3
20001c26:	4013      	ands	r3, r2
20001c28:	2b02      	cmp	r3, #2
20001c2a:	d002      	beq.n	20001c32 <CAN_OperatingModeRequest+0xea>
20001c2c:	68bb      	ldr	r3, [r7, #8]
20001c2e:	2b00      	cmp	r3, #0
20001c30:	d1f3      	bne.n	20001c1a <CAN_OperatingModeRequest+0xd2>
    }
    if ((CANx->MSR & CAN_MODE_MASK) != CAN_MSR_SLAK)
20001c32:	687b      	ldr	r3, [r7, #4]
20001c34:	685b      	ldr	r3, [r3, #4]
20001c36:	2203      	movs	r2, #3
20001c38:	4013      	ands	r3, r2
20001c3a:	2b02      	cmp	r3, #2
20001c3c:	d004      	beq.n	20001c48 <CAN_OperatingModeRequest+0x100>
    {
      status = CAN_ModeStatus_Failed;
20001c3e:	230f      	movs	r3, #15
20001c40:	18fb      	adds	r3, r7, r3
20001c42:	2200      	movs	r2, #0
20001c44:	701a      	strb	r2, [r3, #0]
20001c46:	e008      	b.n	20001c5a <CAN_OperatingModeRequest+0x112>
    }
    else
    {
      status = CAN_ModeStatus_Success;
20001c48:	230f      	movs	r3, #15
20001c4a:	18fb      	adds	r3, r7, r3
20001c4c:	2201      	movs	r2, #1
20001c4e:	701a      	strb	r2, [r3, #0]
20001c50:	e003      	b.n	20001c5a <CAN_OperatingModeRequest+0x112>
    }
  }
  else
  {
    status = CAN_ModeStatus_Failed;
20001c52:	230f      	movs	r3, #15
20001c54:	18fb      	adds	r3, r7, r3
20001c56:	2200      	movs	r2, #0
20001c58:	701a      	strb	r2, [r3, #0]
  }

  return  (uint8_t) status;
20001c5a:	230f      	movs	r3, #15
20001c5c:	18fb      	adds	r3, r7, r3
20001c5e:	781b      	ldrb	r3, [r3, #0]
}
20001c60:	0018      	movs	r0, r3
20001c62:	46bd      	mov	sp, r7
20001c64:	b004      	add	sp, #16
20001c66:	bd80      	pop	{r7, pc}
20001c68:	0000ffff 	strdeq	pc, [r0], -pc	; <UNPREDICTABLE>

20001c6c <CAN_Sleep>:
  * @param  CANx: where x can be 1,2 or 3 to select the CAN peripheral.
  * @note   CAN3 peripheral is available only for STM32F413_423xx devices
  * @retval CAN_Sleep_Ok if sleep entered, CAN_Sleep_Failed otherwise.
  */
uint8_t CAN_Sleep(CAN_TypeDef* CANx)
{
20001c6c:	b580      	push	{r7, lr}
20001c6e:	b084      	sub	sp, #16
20001c70:	af00      	add	r7, sp, #0
20001c72:	6078      	str	r0, [r7, #4]
  uint8_t sleepstatus = CAN_Sleep_Failed;
20001c74:	230f      	movs	r3, #15
20001c76:	18fb      	adds	r3, r7, r3
20001c78:	2200      	movs	r2, #0
20001c7a:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
    
  /* Request Sleep mode */
   CANx->MCR = (((CANx->MCR) & (uint32_t)(~(uint32_t)CAN_MCR_INRQ)) | CAN_MCR_SLEEP);
20001c7c:	687b      	ldr	r3, [r7, #4]
20001c7e:	681b      	ldr	r3, [r3, #0]
20001c80:	2203      	movs	r2, #3
20001c82:	4393      	bics	r3, r2
20001c84:	2202      	movs	r2, #2
20001c86:	431a      	orrs	r2, r3
20001c88:	687b      	ldr	r3, [r7, #4]
20001c8a:	601a      	str	r2, [r3, #0]
   
  /* Sleep mode status */
  if ((CANx->MSR & (CAN_MSR_SLAK|CAN_MSR_INAK)) == CAN_MSR_SLAK)
20001c8c:	687b      	ldr	r3, [r7, #4]
20001c8e:	685b      	ldr	r3, [r3, #4]
20001c90:	2203      	movs	r2, #3
20001c92:	4013      	ands	r3, r2
20001c94:	2b02      	cmp	r3, #2
20001c96:	d103      	bne.n	20001ca0 <CAN_Sleep+0x34>
  {
    /* Sleep mode not entered */
    sleepstatus =  CAN_Sleep_Ok;
20001c98:	230f      	movs	r3, #15
20001c9a:	18fb      	adds	r3, r7, r3
20001c9c:	2201      	movs	r2, #1
20001c9e:	701a      	strb	r2, [r3, #0]
  }
  /* return sleep mode status */
   return (uint8_t)sleepstatus;
20001ca0:	230f      	movs	r3, #15
20001ca2:	18fb      	adds	r3, r7, r3
20001ca4:	781b      	ldrb	r3, [r3, #0]
}
20001ca6:	0018      	movs	r0, r3
20001ca8:	46bd      	mov	sp, r7
20001caa:	b004      	add	sp, #16
20001cac:	bd80      	pop	{r7, pc}

20001cae <CAN_WakeUp>:
  * @param  CANx: where x can be 1,2 or 3 to select the CAN peripheral.
  * @note   CAN3 peripheral is available only for STM32F413_423xx devices
  * @retval CAN_WakeUp_Ok if sleep mode left, CAN_WakeUp_Failed otherwise.
  */
uint8_t CAN_WakeUp(CAN_TypeDef* CANx)
{
20001cae:	b580      	push	{r7, lr}
20001cb0:	b084      	sub	sp, #16
20001cb2:	af00      	add	r7, sp, #0
20001cb4:	6078      	str	r0, [r7, #4]
  uint32_t wait_slak = SLAK_TIMEOUT;
20001cb6:	4b15      	ldr	r3, [pc, #84]	; (20001d0c <CAN_WakeUp+0x5e>)
20001cb8:	60fb      	str	r3, [r7, #12]
  uint8_t wakeupstatus = CAN_WakeUp_Failed;
20001cba:	230b      	movs	r3, #11
20001cbc:	18fb      	adds	r3, r7, r3
20001cbe:	2200      	movs	r2, #0
20001cc0:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
    
  /* Wake up request */
  CANx->MCR &= ~(uint32_t)CAN_MCR_SLEEP;
20001cc2:	687b      	ldr	r3, [r7, #4]
20001cc4:	681b      	ldr	r3, [r3, #0]
20001cc6:	2202      	movs	r2, #2
20001cc8:	4393      	bics	r3, r2
20001cca:	001a      	movs	r2, r3
20001ccc:	687b      	ldr	r3, [r7, #4]
20001cce:	601a      	str	r2, [r3, #0]
    
  /* Sleep mode status */
  while(((CANx->MSR & CAN_MSR_SLAK) == CAN_MSR_SLAK)&&(wait_slak!=0x00))
20001cd0:	e002      	b.n	20001cd8 <CAN_WakeUp+0x2a>
  {
   wait_slak--;
20001cd2:	68fb      	ldr	r3, [r7, #12]
20001cd4:	3b01      	subs	r3, #1
20001cd6:	60fb      	str	r3, [r7, #12]
  while(((CANx->MSR & CAN_MSR_SLAK) == CAN_MSR_SLAK)&&(wait_slak!=0x00))
20001cd8:	687b      	ldr	r3, [r7, #4]
20001cda:	685b      	ldr	r3, [r3, #4]
20001cdc:	2202      	movs	r2, #2
20001cde:	4013      	ands	r3, r2
20001ce0:	2b02      	cmp	r3, #2
20001ce2:	d102      	bne.n	20001cea <CAN_WakeUp+0x3c>
20001ce4:	68fb      	ldr	r3, [r7, #12]
20001ce6:	2b00      	cmp	r3, #0
20001ce8:	d1f3      	bne.n	20001cd2 <CAN_WakeUp+0x24>
  }
  if((CANx->MSR & CAN_MSR_SLAK) != CAN_MSR_SLAK)
20001cea:	687b      	ldr	r3, [r7, #4]
20001cec:	685b      	ldr	r3, [r3, #4]
20001cee:	2202      	movs	r2, #2
20001cf0:	4013      	ands	r3, r2
20001cf2:	2b02      	cmp	r3, #2
20001cf4:	d003      	beq.n	20001cfe <CAN_WakeUp+0x50>
  {
   /* wake up done : Sleep mode exited */
    wakeupstatus = CAN_WakeUp_Ok;
20001cf6:	230b      	movs	r3, #11
20001cf8:	18fb      	adds	r3, r7, r3
20001cfa:	2201      	movs	r2, #1
20001cfc:	701a      	strb	r2, [r3, #0]
  }
  /* return wakeup status */
  return (uint8_t)wakeupstatus;
20001cfe:	230b      	movs	r3, #11
20001d00:	18fb      	adds	r3, r7, r3
20001d02:	781b      	ldrb	r3, [r3, #0]
}
20001d04:	0018      	movs	r0, r3
20001d06:	46bd      	mov	sp, r7
20001d08:	b004      	add	sp, #16
20001d0a:	bd80      	pop	{r7, pc}
20001d0c:	0000ffff 	strdeq	pc, [r0], -pc	; <UNPREDICTABLE>

20001d10 <CAN_GetLastErrorCode>:
  *          - CAN_ERRORCODE_BitDominantErr: Bit Dominant Error
  *          - CAN_ERRORCODE_CRCErr: CRC Error
  *          - CAN_ERRORCODE_SoftwareSetErr: Software Set Error  
  */
uint8_t CAN_GetLastErrorCode(CAN_TypeDef* CANx)
{
20001d10:	b580      	push	{r7, lr}
20001d12:	b084      	sub	sp, #16
20001d14:	af00      	add	r7, sp, #0
20001d16:	6078      	str	r0, [r7, #4]
  uint8_t errorcode=0;
20001d18:	210f      	movs	r1, #15
20001d1a:	187b      	adds	r3, r7, r1
20001d1c:	2200      	movs	r2, #0
20001d1e:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  
  /* Get the error code*/
  errorcode = (((uint8_t)CANx->ESR) & (uint8_t)CAN_ESR_LEC);
20001d20:	687b      	ldr	r3, [r7, #4]
20001d22:	699b      	ldr	r3, [r3, #24]
20001d24:	b2da      	uxtb	r2, r3
20001d26:	0008      	movs	r0, r1
20001d28:	187b      	adds	r3, r7, r1
20001d2a:	2170      	movs	r1, #112	; 0x70
20001d2c:	400a      	ands	r2, r1
20001d2e:	701a      	strb	r2, [r3, #0]
  
  /* Return the error code*/
  return errorcode;
20001d30:	0001      	movs	r1, r0
20001d32:	187b      	adds	r3, r7, r1
20001d34:	781b      	ldrb	r3, [r3, #0]
}
20001d36:	0018      	movs	r0, r3
20001d38:	46bd      	mov	sp, r7
20001d3a:	b004      	add	sp, #16
20001d3c:	bd80      	pop	{r7, pc}

20001d3e <CAN_GetReceiveErrorCounter>:
  * @param  CANx: where x can be 1,2 or 3 to select the CAN peripheral.
  * @note   CAN3 peripheral is available only for STM32F413_423xx devices
  * @retval CAN Receive Error Counter. 
  */
uint8_t CAN_GetReceiveErrorCounter(CAN_TypeDef* CANx)
{
20001d3e:	b580      	push	{r7, lr}
20001d40:	b084      	sub	sp, #16
20001d42:	af00      	add	r7, sp, #0
20001d44:	6078      	str	r0, [r7, #4]
  uint8_t counter=0;
20001d46:	210f      	movs	r1, #15
20001d48:	187b      	adds	r3, r7, r1
20001d4a:	2200      	movs	r2, #0
20001d4c:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  
  /* Get the Receive Error Counter*/
  counter = (uint8_t)((CANx->ESR & CAN_ESR_REC)>> 24);
20001d4e:	687b      	ldr	r3, [r7, #4]
20001d50:	699b      	ldr	r3, [r3, #24]
20001d52:	0e1a      	lsrs	r2, r3, #24
20001d54:	187b      	adds	r3, r7, r1
20001d56:	701a      	strb	r2, [r3, #0]
  
  /* Return the Receive Error Counter*/
  return counter;
20001d58:	187b      	adds	r3, r7, r1
20001d5a:	781b      	ldrb	r3, [r3, #0]
}
20001d5c:	0018      	movs	r0, r3
20001d5e:	46bd      	mov	sp, r7
20001d60:	b004      	add	sp, #16
20001d62:	bd80      	pop	{r7, pc}

20001d64 <CAN_GetLSBTransmitErrorCounter>:
  * @param  CANx: where x can be 1,2 or 3 to select the CAN peripheral.
  * @note   CAN3 peripheral is available only for STM32F413_423xx devices
  * @retval LSB of the 9-bit CAN Transmit Error Counter. 
  */
uint8_t CAN_GetLSBTransmitErrorCounter(CAN_TypeDef* CANx)
{
20001d64:	b580      	push	{r7, lr}
20001d66:	b084      	sub	sp, #16
20001d68:	af00      	add	r7, sp, #0
20001d6a:	6078      	str	r0, [r7, #4]
  uint8_t counter=0;
20001d6c:	210f      	movs	r1, #15
20001d6e:	187b      	adds	r3, r7, r1
20001d70:	2200      	movs	r2, #0
20001d72:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  
  /* Get the LSB of the 9-bit CANx Transmit Error Counter(TEC) */
  counter = (uint8_t)((CANx->ESR & CAN_ESR_TEC)>> 16);
20001d74:	687b      	ldr	r3, [r7, #4]
20001d76:	699b      	ldr	r3, [r3, #24]
20001d78:	0c1a      	lsrs	r2, r3, #16
20001d7a:	187b      	adds	r3, r7, r1
20001d7c:	701a      	strb	r2, [r3, #0]
  
  /* Return the LSB of the 9-bit CANx Transmit Error Counter(TEC) */
  return counter;
20001d7e:	187b      	adds	r3, r7, r1
20001d80:	781b      	ldrb	r3, [r3, #0]
}
20001d82:	0018      	movs	r0, r3
20001d84:	46bd      	mov	sp, r7
20001d86:	b004      	add	sp, #16
20001d88:	bd80      	pop	{r7, pc}

20001d8a <CAN_ITConfig>:
  * @note   CAN3 peripheral is available only for STM32F413_423xx devices
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void CAN_ITConfig(CAN_TypeDef* CANx, uint32_t CAN_IT, FunctionalState NewState)
{
20001d8a:	b580      	push	{r7, lr}
20001d8c:	b084      	sub	sp, #16
20001d8e:	af00      	add	r7, sp, #0
20001d90:	60f8      	str	r0, [r7, #12]
20001d92:	60b9      	str	r1, [r7, #8]
20001d94:	1dfb      	adds	r3, r7, #7
20001d96:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_IT(CAN_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
20001d98:	1dfb      	adds	r3, r7, #7
20001d9a:	781b      	ldrb	r3, [r3, #0]
20001d9c:	2b00      	cmp	r3, #0
20001d9e:	d006      	beq.n	20001dae <CAN_ITConfig+0x24>
  {
    /* Enable the selected CANx interrupt */
    CANx->IER |= CAN_IT;
20001da0:	68fb      	ldr	r3, [r7, #12]
20001da2:	695a      	ldr	r2, [r3, #20]
20001da4:	68bb      	ldr	r3, [r7, #8]
20001da6:	431a      	orrs	r2, r3
20001da8:	68fb      	ldr	r3, [r7, #12]
20001daa:	615a      	str	r2, [r3, #20]
  else
  {
    /* Disable the selected CANx interrupt */
    CANx->IER &= ~CAN_IT;
  }
}
20001dac:	e006      	b.n	20001dbc <CAN_ITConfig+0x32>
    CANx->IER &= ~CAN_IT;
20001dae:	68fb      	ldr	r3, [r7, #12]
20001db0:	695b      	ldr	r3, [r3, #20]
20001db2:	68ba      	ldr	r2, [r7, #8]
20001db4:	43d2      	mvns	r2, r2
20001db6:	401a      	ands	r2, r3
20001db8:	68fb      	ldr	r3, [r7, #12]
20001dba:	615a      	str	r2, [r3, #20]
}
20001dbc:	46c0      	nop			; (mov r8, r8)
20001dbe:	46bd      	mov	sp, r7
20001dc0:	b004      	add	sp, #16
20001dc2:	bd80      	pop	{r7, pc}

20001dc4 <CAN_GetFlagStatus>:
  *            @arg CAN_FLAG_LEC: Last error code Flag
  * @note   CAN3 peripheral is available only for STM32F413_423xx devices
  * @retval The new state of CAN_FLAG (SET or RESET).
  */
FlagStatus CAN_GetFlagStatus(CAN_TypeDef* CANx, uint32_t CAN_FLAG)
{
20001dc4:	b580      	push	{r7, lr}
20001dc6:	b084      	sub	sp, #16
20001dc8:	af00      	add	r7, sp, #0
20001dca:	6078      	str	r0, [r7, #4]
20001dcc:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
20001dce:	230f      	movs	r3, #15
20001dd0:	18fb      	adds	r3, r7, r3
20001dd2:	2200      	movs	r2, #0
20001dd4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_GET_FLAG(CAN_FLAG));
  

  if((CAN_FLAG & CAN_FLAGS_ESR) != (uint32_t)RESET)
20001dd6:	683a      	ldr	r2, [r7, #0]
20001dd8:	23f0      	movs	r3, #240	; 0xf0
20001dda:	041b      	lsls	r3, r3, #16
20001ddc:	4013      	ands	r3, r2
20001dde:	d010      	beq.n	20001e02 <CAN_GetFlagStatus+0x3e>
  { 
    /* Check the status of the specified CAN flag */
    if ((CANx->ESR & (CAN_FLAG & 0x000FFFFF)) != (uint32_t)RESET)
20001de0:	687b      	ldr	r3, [r7, #4]
20001de2:	699b      	ldr	r3, [r3, #24]
20001de4:	683a      	ldr	r2, [r7, #0]
20001de6:	4013      	ands	r3, r2
20001de8:	031b      	lsls	r3, r3, #12
20001dea:	0b1b      	lsrs	r3, r3, #12
20001dec:	d004      	beq.n	20001df8 <CAN_GetFlagStatus+0x34>
    { 
      /* CAN_FLAG is set */
      bitstatus = SET;
20001dee:	230f      	movs	r3, #15
20001df0:	18fb      	adds	r3, r7, r3
20001df2:	2201      	movs	r2, #1
20001df4:	701a      	strb	r2, [r3, #0]
20001df6:	e056      	b.n	20001ea6 <CAN_GetFlagStatus+0xe2>
    }
    else
    { 
      /* CAN_FLAG is reset */
      bitstatus = RESET;
20001df8:	230f      	movs	r3, #15
20001dfa:	18fb      	adds	r3, r7, r3
20001dfc:	2200      	movs	r2, #0
20001dfe:	701a      	strb	r2, [r3, #0]
20001e00:	e051      	b.n	20001ea6 <CAN_GetFlagStatus+0xe2>
    }
  }
  else if((CAN_FLAG & CAN_FLAGS_MSR) != (uint32_t)RESET)
20001e02:	683a      	ldr	r2, [r7, #0]
20001e04:	2380      	movs	r3, #128	; 0x80
20001e06:	045b      	lsls	r3, r3, #17
20001e08:	4013      	ands	r3, r2
20001e0a:	d010      	beq.n	20001e2e <CAN_GetFlagStatus+0x6a>
  { 
    /* Check the status of the specified CAN flag */
    if ((CANx->MSR & (CAN_FLAG & 0x000FFFFF)) != (uint32_t)RESET)
20001e0c:	687b      	ldr	r3, [r7, #4]
20001e0e:	685b      	ldr	r3, [r3, #4]
20001e10:	683a      	ldr	r2, [r7, #0]
20001e12:	4013      	ands	r3, r2
20001e14:	031b      	lsls	r3, r3, #12
20001e16:	0b1b      	lsrs	r3, r3, #12
20001e18:	d004      	beq.n	20001e24 <CAN_GetFlagStatus+0x60>
    { 
      /* CAN_FLAG is set */
      bitstatus = SET;
20001e1a:	230f      	movs	r3, #15
20001e1c:	18fb      	adds	r3, r7, r3
20001e1e:	2201      	movs	r2, #1
20001e20:	701a      	strb	r2, [r3, #0]
20001e22:	e040      	b.n	20001ea6 <CAN_GetFlagStatus+0xe2>
    }
    else
    { 
      /* CAN_FLAG is reset */
      bitstatus = RESET;
20001e24:	230f      	movs	r3, #15
20001e26:	18fb      	adds	r3, r7, r3
20001e28:	2200      	movs	r2, #0
20001e2a:	701a      	strb	r2, [r3, #0]
20001e2c:	e03b      	b.n	20001ea6 <CAN_GetFlagStatus+0xe2>
    }
  }
  else if((CAN_FLAG & CAN_FLAGS_TSR) != (uint32_t)RESET)
20001e2e:	683a      	ldr	r2, [r7, #0]
20001e30:	2380      	movs	r3, #128	; 0x80
20001e32:	051b      	lsls	r3, r3, #20
20001e34:	4013      	ands	r3, r2
20001e36:	d010      	beq.n	20001e5a <CAN_GetFlagStatus+0x96>
  { 
    /* Check the status of the specified CAN flag */
    if ((CANx->TSR & (CAN_FLAG & 0x000FFFFF)) != (uint32_t)RESET)
20001e38:	687b      	ldr	r3, [r7, #4]
20001e3a:	689b      	ldr	r3, [r3, #8]
20001e3c:	683a      	ldr	r2, [r7, #0]
20001e3e:	4013      	ands	r3, r2
20001e40:	031b      	lsls	r3, r3, #12
20001e42:	0b1b      	lsrs	r3, r3, #12
20001e44:	d004      	beq.n	20001e50 <CAN_GetFlagStatus+0x8c>
    { 
      /* CAN_FLAG is set */
      bitstatus = SET;
20001e46:	230f      	movs	r3, #15
20001e48:	18fb      	adds	r3, r7, r3
20001e4a:	2201      	movs	r2, #1
20001e4c:	701a      	strb	r2, [r3, #0]
20001e4e:	e02a      	b.n	20001ea6 <CAN_GetFlagStatus+0xe2>
    }
    else
    { 
      /* CAN_FLAG is reset */
      bitstatus = RESET;
20001e50:	230f      	movs	r3, #15
20001e52:	18fb      	adds	r3, r7, r3
20001e54:	2200      	movs	r2, #0
20001e56:	701a      	strb	r2, [r3, #0]
20001e58:	e025      	b.n	20001ea6 <CAN_GetFlagStatus+0xe2>
    }
  }
  else if((CAN_FLAG & CAN_FLAGS_RF0R) != (uint32_t)RESET)
20001e5a:	683a      	ldr	r2, [r7, #0]
20001e5c:	2380      	movs	r3, #128	; 0x80
20001e5e:	049b      	lsls	r3, r3, #18
20001e60:	4013      	ands	r3, r2
20001e62:	d010      	beq.n	20001e86 <CAN_GetFlagStatus+0xc2>
  { 
    /* Check the status of the specified CAN flag */
    if ((CANx->RF0R & (CAN_FLAG & 0x000FFFFF)) != (uint32_t)RESET)
20001e64:	687b      	ldr	r3, [r7, #4]
20001e66:	68db      	ldr	r3, [r3, #12]
20001e68:	683a      	ldr	r2, [r7, #0]
20001e6a:	4013      	ands	r3, r2
20001e6c:	031b      	lsls	r3, r3, #12
20001e6e:	0b1b      	lsrs	r3, r3, #12
20001e70:	d004      	beq.n	20001e7c <CAN_GetFlagStatus+0xb8>
    { 
      /* CAN_FLAG is set */
      bitstatus = SET;
20001e72:	230f      	movs	r3, #15
20001e74:	18fb      	adds	r3, r7, r3
20001e76:	2201      	movs	r2, #1
20001e78:	701a      	strb	r2, [r3, #0]
20001e7a:	e014      	b.n	20001ea6 <CAN_GetFlagStatus+0xe2>
    }
    else
    { 
      /* CAN_FLAG is reset */
      bitstatus = RESET;
20001e7c:	230f      	movs	r3, #15
20001e7e:	18fb      	adds	r3, r7, r3
20001e80:	2200      	movs	r2, #0
20001e82:	701a      	strb	r2, [r3, #0]
20001e84:	e00f      	b.n	20001ea6 <CAN_GetFlagStatus+0xe2>
    }
  }
  else /* If(CAN_FLAG & CAN_FLAGS_RF1R != (uint32_t)RESET) */
  { 
    /* Check the status of the specified CAN flag */
    if ((uint32_t)(CANx->RF1R & (CAN_FLAG & 0x000FFFFF)) != (uint32_t)RESET)
20001e86:	687b      	ldr	r3, [r7, #4]
20001e88:	691b      	ldr	r3, [r3, #16]
20001e8a:	683a      	ldr	r2, [r7, #0]
20001e8c:	4013      	ands	r3, r2
20001e8e:	031b      	lsls	r3, r3, #12
20001e90:	0b1b      	lsrs	r3, r3, #12
20001e92:	d004      	beq.n	20001e9e <CAN_GetFlagStatus+0xda>
    { 
      /* CAN_FLAG is set */
      bitstatus = SET;
20001e94:	230f      	movs	r3, #15
20001e96:	18fb      	adds	r3, r7, r3
20001e98:	2201      	movs	r2, #1
20001e9a:	701a      	strb	r2, [r3, #0]
20001e9c:	e003      	b.n	20001ea6 <CAN_GetFlagStatus+0xe2>
    }
    else
    { 
      /* CAN_FLAG is reset */
      bitstatus = RESET;
20001e9e:	230f      	movs	r3, #15
20001ea0:	18fb      	adds	r3, r7, r3
20001ea2:	2200      	movs	r2, #0
20001ea4:	701a      	strb	r2, [r3, #0]
    }
  }
  /* Return the CAN_FLAG status */
  return  bitstatus;
20001ea6:	230f      	movs	r3, #15
20001ea8:	18fb      	adds	r3, r7, r3
20001eaa:	781b      	ldrb	r3, [r3, #0]
}
20001eac:	0018      	movs	r0, r3
20001eae:	46bd      	mov	sp, r7
20001eb0:	b004      	add	sp, #16
20001eb2:	bd80      	pop	{r7, pc}

20001eb4 <CAN_ClearFlag>:
  *            @arg CAN_FLAG_LEC: Last error code Flag
  * @note   CAN3 peripheral is available only for STM32F413_423xx devices
  * @retval None
  */
void CAN_ClearFlag(CAN_TypeDef* CANx, uint32_t CAN_FLAG)
{
20001eb4:	b580      	push	{r7, lr}
20001eb6:	b084      	sub	sp, #16
20001eb8:	af00      	add	r7, sp, #0
20001eba:	6078      	str	r0, [r7, #4]
20001ebc:	6039      	str	r1, [r7, #0]
  uint32_t flagtmp=0;
20001ebe:	2300      	movs	r3, #0
20001ec0:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_CLEAR_FLAG(CAN_FLAG));
  
  if (CAN_FLAG == CAN_FLAG_LEC) /* ESR register */
20001ec2:	683b      	ldr	r3, [r7, #0]
20001ec4:	4a16      	ldr	r2, [pc, #88]	; (20001f20 <CAN_ClearFlag+0x6c>)
20001ec6:	4293      	cmp	r3, r2
20001ec8:	d103      	bne.n	20001ed2 <CAN_ClearFlag+0x1e>
  {
    /* Clear the selected CAN flags */
    CANx->ESR = (uint32_t)RESET;
20001eca:	687b      	ldr	r3, [r7, #4]
20001ecc:	2200      	movs	r2, #0
20001ece:	619a      	str	r2, [r3, #24]
    {
      /* Operating mode Flags */
      CANx->MSR = (uint32_t)(flagtmp);
    }
  }
}
20001ed0:	e021      	b.n	20001f16 <CAN_ClearFlag+0x62>
    flagtmp = CAN_FLAG & 0x000FFFFF;
20001ed2:	683b      	ldr	r3, [r7, #0]
20001ed4:	031b      	lsls	r3, r3, #12
20001ed6:	0b1b      	lsrs	r3, r3, #12
20001ed8:	60fb      	str	r3, [r7, #12]
    if ((CAN_FLAG & CAN_FLAGS_RF0R)!=(uint32_t)RESET)
20001eda:	683a      	ldr	r2, [r7, #0]
20001edc:	2380      	movs	r3, #128	; 0x80
20001ede:	049b      	lsls	r3, r3, #18
20001ee0:	4013      	ands	r3, r2
20001ee2:	d003      	beq.n	20001eec <CAN_ClearFlag+0x38>
      CANx->RF0R = (uint32_t)(flagtmp);
20001ee4:	687b      	ldr	r3, [r7, #4]
20001ee6:	68fa      	ldr	r2, [r7, #12]
20001ee8:	60da      	str	r2, [r3, #12]
}
20001eea:	e014      	b.n	20001f16 <CAN_ClearFlag+0x62>
    else if ((CAN_FLAG & CAN_FLAGS_RF1R)!=(uint32_t)RESET)
20001eec:	683a      	ldr	r2, [r7, #0]
20001eee:	2380      	movs	r3, #128	; 0x80
20001ef0:	04db      	lsls	r3, r3, #19
20001ef2:	4013      	ands	r3, r2
20001ef4:	d003      	beq.n	20001efe <CAN_ClearFlag+0x4a>
      CANx->RF1R = (uint32_t)(flagtmp);
20001ef6:	687b      	ldr	r3, [r7, #4]
20001ef8:	68fa      	ldr	r2, [r7, #12]
20001efa:	611a      	str	r2, [r3, #16]
}
20001efc:	e00b      	b.n	20001f16 <CAN_ClearFlag+0x62>
    else if ((CAN_FLAG & CAN_FLAGS_TSR)!=(uint32_t)RESET)
20001efe:	683a      	ldr	r2, [r7, #0]
20001f00:	2380      	movs	r3, #128	; 0x80
20001f02:	051b      	lsls	r3, r3, #20
20001f04:	4013      	ands	r3, r2
20001f06:	d003      	beq.n	20001f10 <CAN_ClearFlag+0x5c>
      CANx->TSR = (uint32_t)(flagtmp);
20001f08:	687b      	ldr	r3, [r7, #4]
20001f0a:	68fa      	ldr	r2, [r7, #12]
20001f0c:	609a      	str	r2, [r3, #8]
}
20001f0e:	e002      	b.n	20001f16 <CAN_ClearFlag+0x62>
      CANx->MSR = (uint32_t)(flagtmp);
20001f10:	687b      	ldr	r3, [r7, #4]
20001f12:	68fa      	ldr	r2, [r7, #12]
20001f14:	605a      	str	r2, [r3, #4]
}
20001f16:	46c0      	nop			; (mov r8, r8)
20001f18:	46bd      	mov	sp, r7
20001f1a:	b004      	add	sp, #16
20001f1c:	bd80      	pop	{r7, pc}
20001f1e:	46c0      	nop			; (mov r8, r8)
20001f20:	30f00070 	rscscc	r0, r0, r0, ror r0

20001f24 <CAN_GetITStatus>:
  *            @arg CAN_IT_ERR: Error Interrupt
  * @note   CAN3 peripheral is available only for STM32F413_423xx devices
  * @retval The current state of CAN_IT (SET or RESET).
  */
ITStatus CAN_GetITStatus(CAN_TypeDef* CANx, uint32_t CAN_IT)
{
20001f24:	b590      	push	{r4, r7, lr}
20001f26:	b085      	sub	sp, #20
20001f28:	af00      	add	r7, sp, #0
20001f2a:	6078      	str	r0, [r7, #4]
20001f2c:	6039      	str	r1, [r7, #0]
  ITStatus itstatus = RESET;
20001f2e:	230f      	movs	r3, #15
20001f30:	18fb      	adds	r3, r7, r3
20001f32:	2200      	movs	r2, #0
20001f34:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_IT(CAN_IT));
  
  /* check the interrupt enable bit */
 if((CANx->IER & CAN_IT) != RESET)
20001f36:	687b      	ldr	r3, [r7, #4]
20001f38:	695b      	ldr	r3, [r3, #20]
20001f3a:	683a      	ldr	r2, [r7, #0]
20001f3c:	4013      	ands	r3, r2
20001f3e:	d100      	bne.n	20001f42 <CAN_GetITStatus+0x1e>
20001f40:	e0db      	b.n	200020fa <CAN_GetITStatus+0x1d6>
 {
   /* in case the Interrupt is enabled, .... */
    switch (CAN_IT)
20001f42:	683b      	ldr	r3, [r7, #0]
20001f44:	2b40      	cmp	r3, #64	; 0x40
20001f46:	d100      	bne.n	20001f4a <CAN_GetITStatus+0x26>
20001f48:	e079      	b.n	2000203e <CAN_GetITStatus+0x11a>
20001f4a:	d80e      	bhi.n	20001f6a <CAN_GetITStatus+0x46>
20001f4c:	2b04      	cmp	r3, #4
20001f4e:	d04a      	beq.n	20001fe6 <CAN_GetITStatus+0xc2>
20001f50:	d804      	bhi.n	20001f5c <CAN_GetITStatus+0x38>
20001f52:	2b01      	cmp	r3, #1
20001f54:	d030      	beq.n	20001fb8 <CAN_GetITStatus+0x94>
20001f56:	2b02      	cmp	r3, #2
20001f58:	d03a      	beq.n	20001fd0 <CAN_GetITStatus+0xac>
20001f5a:	e0c8      	b.n	200020ee <CAN_GetITStatus+0x1ca>
20001f5c:	2b10      	cmp	r3, #16
20001f5e:	d058      	beq.n	20002012 <CAN_GetITStatus+0xee>
20001f60:	2b20      	cmp	r3, #32
20001f62:	d061      	beq.n	20002028 <CAN_GetITStatus+0x104>
20001f64:	2b08      	cmp	r3, #8
20001f66:	d049      	beq.n	20001ffc <CAN_GetITStatus+0xd8>
20001f68:	e0c1      	b.n	200020ee <CAN_GetITStatus+0x1ca>
20001f6a:	2280      	movs	r2, #128	; 0x80
20001f6c:	0112      	lsls	r2, r2, #4
20001f6e:	4293      	cmp	r3, r2
20001f70:	d100      	bne.n	20001f74 <CAN_GetITStatus+0x50>
20001f72:	e0a6      	b.n	200020c2 <CAN_GetITStatus+0x19e>
20001f74:	2280      	movs	r2, #128	; 0x80
20001f76:	0112      	lsls	r2, r2, #4
20001f78:	4293      	cmp	r3, r2
20001f7a:	d80f      	bhi.n	20001f9c <CAN_GetITStatus+0x78>
20001f7c:	2280      	movs	r2, #128	; 0x80
20001f7e:	0092      	lsls	r2, r2, #2
20001f80:	4293      	cmp	r3, r2
20001f82:	d100      	bne.n	20001f86 <CAN_GetITStatus+0x62>
20001f84:	e087      	b.n	20002096 <CAN_GetITStatus+0x172>
20001f86:	2280      	movs	r2, #128	; 0x80
20001f88:	00d2      	lsls	r2, r2, #3
20001f8a:	4293      	cmp	r3, r2
20001f8c:	d100      	bne.n	20001f90 <CAN_GetITStatus+0x6c>
20001f8e:	e08d      	b.n	200020ac <CAN_GetITStatus+0x188>
20001f90:	2280      	movs	r2, #128	; 0x80
20001f92:	0052      	lsls	r2, r2, #1
20001f94:	4293      	cmp	r3, r2
20001f96:	d100      	bne.n	20001f9a <CAN_GetITStatus+0x76>
20001f98:	e072      	b.n	20002080 <CAN_GetITStatus+0x15c>
20001f9a:	e0a8      	b.n	200020ee <CAN_GetITStatus+0x1ca>
20001f9c:	2280      	movs	r2, #128	; 0x80
20001f9e:	0252      	lsls	r2, r2, #9
20001fa0:	4293      	cmp	r3, r2
20001fa2:	d057      	beq.n	20002054 <CAN_GetITStatus+0x130>
20001fa4:	2280      	movs	r2, #128	; 0x80
20001fa6:	0292      	lsls	r2, r2, #10
20001fa8:	4293      	cmp	r3, r2
20001faa:	d05e      	beq.n	2000206a <CAN_GetITStatus+0x146>
20001fac:	2280      	movs	r2, #128	; 0x80
20001fae:	0212      	lsls	r2, r2, #8
20001fb0:	4293      	cmp	r3, r2
20001fb2:	d100      	bne.n	20001fb6 <CAN_GetITStatus+0x92>
20001fb4:	e090      	b.n	200020d8 <CAN_GetITStatus+0x1b4>
20001fb6:	e09a      	b.n	200020ee <CAN_GetITStatus+0x1ca>
    {
      case CAN_IT_TME:
        /* Check CAN_TSR_RQCPx bits */
        itstatus = CheckITStatus(CANx->TSR, CAN_TSR_RQCP0|CAN_TSR_RQCP1|CAN_TSR_RQCP2);  
20001fb8:	687b      	ldr	r3, [r7, #4]
20001fba:	689b      	ldr	r3, [r3, #8]
20001fbc:	220f      	movs	r2, #15
20001fbe:	18bc      	adds	r4, r7, r2
20001fc0:	4a53      	ldr	r2, [pc, #332]	; (20002110 <CAN_GetITStatus+0x1ec>)
20001fc2:	0011      	movs	r1, r2
20001fc4:	0018      	movs	r0, r3
20001fc6:	f000 f91b 	bl	20002200 <CheckITStatus>
20001fca:	0003      	movs	r3, r0
20001fcc:	7023      	strb	r3, [r4, #0]
        break;
20001fce:	e098      	b.n	20002102 <CAN_GetITStatus+0x1de>
      case CAN_IT_FMP0:
        /* Check CAN_RF0R_FMP0 bit */
        itstatus = CheckITStatus(CANx->RF0R, CAN_RF0R_FMP0);  
20001fd0:	687b      	ldr	r3, [r7, #4]
20001fd2:	68db      	ldr	r3, [r3, #12]
20001fd4:	220f      	movs	r2, #15
20001fd6:	18bc      	adds	r4, r7, r2
20001fd8:	2103      	movs	r1, #3
20001fda:	0018      	movs	r0, r3
20001fdc:	f000 f910 	bl	20002200 <CheckITStatus>
20001fe0:	0003      	movs	r3, r0
20001fe2:	7023      	strb	r3, [r4, #0]
        break;
20001fe4:	e08d      	b.n	20002102 <CAN_GetITStatus+0x1de>
      case CAN_IT_FF0:
        /* Check CAN_RF0R_FULL0 bit */
        itstatus = CheckITStatus(CANx->RF0R, CAN_RF0R_FULL0);  
20001fe6:	687b      	ldr	r3, [r7, #4]
20001fe8:	68db      	ldr	r3, [r3, #12]
20001fea:	220f      	movs	r2, #15
20001fec:	18bc      	adds	r4, r7, r2
20001fee:	2108      	movs	r1, #8
20001ff0:	0018      	movs	r0, r3
20001ff2:	f000 f905 	bl	20002200 <CheckITStatus>
20001ff6:	0003      	movs	r3, r0
20001ff8:	7023      	strb	r3, [r4, #0]
        break;
20001ffa:	e082      	b.n	20002102 <CAN_GetITStatus+0x1de>
      case CAN_IT_FOV0:
        /* Check CAN_RF0R_FOVR0 bit */
        itstatus = CheckITStatus(CANx->RF0R, CAN_RF0R_FOVR0);  
20001ffc:	687b      	ldr	r3, [r7, #4]
20001ffe:	68db      	ldr	r3, [r3, #12]
20002000:	220f      	movs	r2, #15
20002002:	18bc      	adds	r4, r7, r2
20002004:	2110      	movs	r1, #16
20002006:	0018      	movs	r0, r3
20002008:	f000 f8fa 	bl	20002200 <CheckITStatus>
2000200c:	0003      	movs	r3, r0
2000200e:	7023      	strb	r3, [r4, #0]
        break;
20002010:	e077      	b.n	20002102 <CAN_GetITStatus+0x1de>
      case CAN_IT_FMP1:
        /* Check CAN_RF1R_FMP1 bit */
        itstatus = CheckITStatus(CANx->RF1R, CAN_RF1R_FMP1);  
20002012:	687b      	ldr	r3, [r7, #4]
20002014:	691b      	ldr	r3, [r3, #16]
20002016:	220f      	movs	r2, #15
20002018:	18bc      	adds	r4, r7, r2
2000201a:	2103      	movs	r1, #3
2000201c:	0018      	movs	r0, r3
2000201e:	f000 f8ef 	bl	20002200 <CheckITStatus>
20002022:	0003      	movs	r3, r0
20002024:	7023      	strb	r3, [r4, #0]
        break;
20002026:	e06c      	b.n	20002102 <CAN_GetITStatus+0x1de>
      case CAN_IT_FF1:
        /* Check CAN_RF1R_FULL1 bit */
        itstatus = CheckITStatus(CANx->RF1R, CAN_RF1R_FULL1);  
20002028:	687b      	ldr	r3, [r7, #4]
2000202a:	691b      	ldr	r3, [r3, #16]
2000202c:	220f      	movs	r2, #15
2000202e:	18bc      	adds	r4, r7, r2
20002030:	2108      	movs	r1, #8
20002032:	0018      	movs	r0, r3
20002034:	f000 f8e4 	bl	20002200 <CheckITStatus>
20002038:	0003      	movs	r3, r0
2000203a:	7023      	strb	r3, [r4, #0]
        break;
2000203c:	e061      	b.n	20002102 <CAN_GetITStatus+0x1de>
      case CAN_IT_FOV1:
        /* Check CAN_RF1R_FOVR1 bit */
        itstatus = CheckITStatus(CANx->RF1R, CAN_RF1R_FOVR1);  
2000203e:	687b      	ldr	r3, [r7, #4]
20002040:	691b      	ldr	r3, [r3, #16]
20002042:	220f      	movs	r2, #15
20002044:	18bc      	adds	r4, r7, r2
20002046:	2110      	movs	r1, #16
20002048:	0018      	movs	r0, r3
2000204a:	f000 f8d9 	bl	20002200 <CheckITStatus>
2000204e:	0003      	movs	r3, r0
20002050:	7023      	strb	r3, [r4, #0]
        break;
20002052:	e056      	b.n	20002102 <CAN_GetITStatus+0x1de>
      case CAN_IT_WKU:
        /* Check CAN_MSR_WKUI bit */
        itstatus = CheckITStatus(CANx->MSR, CAN_MSR_WKUI);  
20002054:	687b      	ldr	r3, [r7, #4]
20002056:	685b      	ldr	r3, [r3, #4]
20002058:	220f      	movs	r2, #15
2000205a:	18bc      	adds	r4, r7, r2
2000205c:	2108      	movs	r1, #8
2000205e:	0018      	movs	r0, r3
20002060:	f000 f8ce 	bl	20002200 <CheckITStatus>
20002064:	0003      	movs	r3, r0
20002066:	7023      	strb	r3, [r4, #0]
        break;
20002068:	e04b      	b.n	20002102 <CAN_GetITStatus+0x1de>
      case CAN_IT_SLK:
        /* Check CAN_MSR_SLAKI bit */
        itstatus = CheckITStatus(CANx->MSR, CAN_MSR_SLAKI);  
2000206a:	687b      	ldr	r3, [r7, #4]
2000206c:	685b      	ldr	r3, [r3, #4]
2000206e:	220f      	movs	r2, #15
20002070:	18bc      	adds	r4, r7, r2
20002072:	2110      	movs	r1, #16
20002074:	0018      	movs	r0, r3
20002076:	f000 f8c3 	bl	20002200 <CheckITStatus>
2000207a:	0003      	movs	r3, r0
2000207c:	7023      	strb	r3, [r4, #0]
        break;
2000207e:	e040      	b.n	20002102 <CAN_GetITStatus+0x1de>
      case CAN_IT_EWG:
        /* Check CAN_ESR_EWGF bit */
        itstatus = CheckITStatus(CANx->ESR, CAN_ESR_EWGF);  
20002080:	687b      	ldr	r3, [r7, #4]
20002082:	699b      	ldr	r3, [r3, #24]
20002084:	220f      	movs	r2, #15
20002086:	18bc      	adds	r4, r7, r2
20002088:	2101      	movs	r1, #1
2000208a:	0018      	movs	r0, r3
2000208c:	f000 f8b8 	bl	20002200 <CheckITStatus>
20002090:	0003      	movs	r3, r0
20002092:	7023      	strb	r3, [r4, #0]
        break;
20002094:	e035      	b.n	20002102 <CAN_GetITStatus+0x1de>
      case CAN_IT_EPV:
        /* Check CAN_ESR_EPVF bit */
        itstatus = CheckITStatus(CANx->ESR, CAN_ESR_EPVF);  
20002096:	687b      	ldr	r3, [r7, #4]
20002098:	699b      	ldr	r3, [r3, #24]
2000209a:	220f      	movs	r2, #15
2000209c:	18bc      	adds	r4, r7, r2
2000209e:	2102      	movs	r1, #2
200020a0:	0018      	movs	r0, r3
200020a2:	f000 f8ad 	bl	20002200 <CheckITStatus>
200020a6:	0003      	movs	r3, r0
200020a8:	7023      	strb	r3, [r4, #0]
        break;
200020aa:	e02a      	b.n	20002102 <CAN_GetITStatus+0x1de>
      case CAN_IT_BOF:
        /* Check CAN_ESR_BOFF bit */
        itstatus = CheckITStatus(CANx->ESR, CAN_ESR_BOFF);  
200020ac:	687b      	ldr	r3, [r7, #4]
200020ae:	699b      	ldr	r3, [r3, #24]
200020b0:	220f      	movs	r2, #15
200020b2:	18bc      	adds	r4, r7, r2
200020b4:	2104      	movs	r1, #4
200020b6:	0018      	movs	r0, r3
200020b8:	f000 f8a2 	bl	20002200 <CheckITStatus>
200020bc:	0003      	movs	r3, r0
200020be:	7023      	strb	r3, [r4, #0]
        break;
200020c0:	e01f      	b.n	20002102 <CAN_GetITStatus+0x1de>
      case CAN_IT_LEC:
        /* Check CAN_ESR_LEC bit */
        itstatus = CheckITStatus(CANx->ESR, CAN_ESR_LEC);  
200020c2:	687b      	ldr	r3, [r7, #4]
200020c4:	699b      	ldr	r3, [r3, #24]
200020c6:	220f      	movs	r2, #15
200020c8:	18bc      	adds	r4, r7, r2
200020ca:	2170      	movs	r1, #112	; 0x70
200020cc:	0018      	movs	r0, r3
200020ce:	f000 f897 	bl	20002200 <CheckITStatus>
200020d2:	0003      	movs	r3, r0
200020d4:	7023      	strb	r3, [r4, #0]
        break;
200020d6:	e014      	b.n	20002102 <CAN_GetITStatus+0x1de>
      case CAN_IT_ERR:
        /* Check CAN_MSR_ERRI bit */ 
        itstatus = CheckITStatus(CANx->MSR, CAN_MSR_ERRI); 
200020d8:	687b      	ldr	r3, [r7, #4]
200020da:	685b      	ldr	r3, [r3, #4]
200020dc:	220f      	movs	r2, #15
200020de:	18bc      	adds	r4, r7, r2
200020e0:	2104      	movs	r1, #4
200020e2:	0018      	movs	r0, r3
200020e4:	f000 f88c 	bl	20002200 <CheckITStatus>
200020e8:	0003      	movs	r3, r0
200020ea:	7023      	strb	r3, [r4, #0]
        break;
200020ec:	e009      	b.n	20002102 <CAN_GetITStatus+0x1de>
      default:
        /* in case of error, return RESET */
        itstatus = RESET;
200020ee:	230f      	movs	r3, #15
200020f0:	18fb      	adds	r3, r7, r3
200020f2:	2200      	movs	r2, #0
200020f4:	701a      	strb	r2, [r3, #0]
        break;
200020f6:	46c0      	nop			; (mov r8, r8)
200020f8:	e003      	b.n	20002102 <CAN_GetITStatus+0x1de>
    }
  }
  else
  {
   /* in case the Interrupt is not enabled, return RESET */
    itstatus  = RESET;
200020fa:	230f      	movs	r3, #15
200020fc:	18fb      	adds	r3, r7, r3
200020fe:	2200      	movs	r2, #0
20002100:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return the CAN_IT status */
  return  itstatus;
20002102:	230f      	movs	r3, #15
20002104:	18fb      	adds	r3, r7, r3
20002106:	781b      	ldrb	r3, [r3, #0]
}
20002108:	0018      	movs	r0, r3
2000210a:	46bd      	mov	sp, r7
2000210c:	b005      	add	sp, #20
2000210e:	bd90      	pop	{r4, r7, pc}
20002110:	00010101 	andeq	r0, r1, r1, lsl #2

20002114 <CAN_ClearITPendingBit>:
  *            @arg CAN_IT_ERR: Error Interrupt
  * @note   CAN3 peripheral is available only for STM32F413_423xx devices
  * @retval None
  */
void CAN_ClearITPendingBit(CAN_TypeDef* CANx, uint32_t CAN_IT)
{
20002114:	b580      	push	{r7, lr}
20002116:	b082      	sub	sp, #8
20002118:	af00      	add	r7, sp, #0
2000211a:	6078      	str	r0, [r7, #4]
2000211c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_CLEAR_IT(CAN_IT));

  switch (CAN_IT)
2000211e:	683b      	ldr	r3, [r7, #0]
20002120:	2280      	movs	r2, #128	; 0x80
20002122:	0052      	lsls	r2, r2, #1
20002124:	4293      	cmp	r3, r2
20002126:	d04a      	beq.n	200021be <CAN_ClearITPendingBit+0xaa>
20002128:	2280      	movs	r2, #128	; 0x80
2000212a:	0052      	lsls	r2, r2, #1
2000212c:	4293      	cmp	r3, r2
2000212e:	d80c      	bhi.n	2000214a <CAN_ClearITPendingBit+0x36>
20002130:	2b08      	cmp	r3, #8
20002132:	d030      	beq.n	20002196 <CAN_ClearITPendingBit+0x82>
20002134:	d804      	bhi.n	20002140 <CAN_ClearITPendingBit+0x2c>
20002136:	2b01      	cmp	r3, #1
20002138:	d025      	beq.n	20002186 <CAN_ClearITPendingBit+0x72>
2000213a:	2b04      	cmp	r3, #4
2000213c:	d027      	beq.n	2000218e <CAN_ClearITPendingBit+0x7a>
      /* Clear CAN_MSR_ERRI (rc_w1) */
      CANx->MSR = CAN_MSR_ERRI; 
       /* @note BOFF, EPVF and EWGF Flags are cleared by hardware depending on the CAN Bus status*/
       break;
    default:
       break;
2000213e:	e058      	b.n	200021f2 <CAN_ClearITPendingBit+0xde>
  switch (CAN_IT)
20002140:	2b20      	cmp	r3, #32
20002142:	d02c      	beq.n	2000219e <CAN_ClearITPendingBit+0x8a>
20002144:	2b40      	cmp	r3, #64	; 0x40
20002146:	d02e      	beq.n	200021a6 <CAN_ClearITPendingBit+0x92>
       break;
20002148:	e053      	b.n	200021f2 <CAN_ClearITPendingBit+0xde>
  switch (CAN_IT)
2000214a:	2280      	movs	r2, #128	; 0x80
2000214c:	0112      	lsls	r2, r2, #4
2000214e:	4293      	cmp	r3, r2
20002150:	d041      	beq.n	200021d6 <CAN_ClearITPendingBit+0xc2>
20002152:	2280      	movs	r2, #128	; 0x80
20002154:	0112      	lsls	r2, r2, #4
20002156:	4293      	cmp	r3, r2
20002158:	d808      	bhi.n	2000216c <CAN_ClearITPendingBit+0x58>
2000215a:	2280      	movs	r2, #128	; 0x80
2000215c:	0092      	lsls	r2, r2, #2
2000215e:	4293      	cmp	r3, r2
20002160:	d031      	beq.n	200021c6 <CAN_ClearITPendingBit+0xb2>
20002162:	2280      	movs	r2, #128	; 0x80
20002164:	00d2      	lsls	r2, r2, #3
20002166:	4293      	cmp	r3, r2
20002168:	d031      	beq.n	200021ce <CAN_ClearITPendingBit+0xba>
       break;
2000216a:	e042      	b.n	200021f2 <CAN_ClearITPendingBit+0xde>
  switch (CAN_IT)
2000216c:	2280      	movs	r2, #128	; 0x80
2000216e:	0252      	lsls	r2, r2, #9
20002170:	4293      	cmp	r3, r2
20002172:	d01c      	beq.n	200021ae <CAN_ClearITPendingBit+0x9a>
20002174:	2280      	movs	r2, #128	; 0x80
20002176:	0292      	lsls	r2, r2, #10
20002178:	4293      	cmp	r3, r2
2000217a:	d01c      	beq.n	200021b6 <CAN_ClearITPendingBit+0xa2>
2000217c:	2280      	movs	r2, #128	; 0x80
2000217e:	0212      	lsls	r2, r2, #8
20002180:	4293      	cmp	r3, r2
20002182:	d02f      	beq.n	200021e4 <CAN_ClearITPendingBit+0xd0>
       break;
20002184:	e035      	b.n	200021f2 <CAN_ClearITPendingBit+0xde>
      CANx->TSR = CAN_TSR_RQCP0|CAN_TSR_RQCP1|CAN_TSR_RQCP2;  
20002186:	687b      	ldr	r3, [r7, #4]
20002188:	4a1c      	ldr	r2, [pc, #112]	; (200021fc <CAN_ClearITPendingBit+0xe8>)
2000218a:	609a      	str	r2, [r3, #8]
      break;
2000218c:	e031      	b.n	200021f2 <CAN_ClearITPendingBit+0xde>
      CANx->RF0R = CAN_RF0R_FULL0; 
2000218e:	687b      	ldr	r3, [r7, #4]
20002190:	2208      	movs	r2, #8
20002192:	60da      	str	r2, [r3, #12]
      break;
20002194:	e02d      	b.n	200021f2 <CAN_ClearITPendingBit+0xde>
      CANx->RF0R = CAN_RF0R_FOVR0; 
20002196:	687b      	ldr	r3, [r7, #4]
20002198:	2210      	movs	r2, #16
2000219a:	60da      	str	r2, [r3, #12]
      break;
2000219c:	e029      	b.n	200021f2 <CAN_ClearITPendingBit+0xde>
      CANx->RF1R = CAN_RF1R_FULL1;  
2000219e:	687b      	ldr	r3, [r7, #4]
200021a0:	2208      	movs	r2, #8
200021a2:	611a      	str	r2, [r3, #16]
      break;
200021a4:	e025      	b.n	200021f2 <CAN_ClearITPendingBit+0xde>
      CANx->RF1R = CAN_RF1R_FOVR1; 
200021a6:	687b      	ldr	r3, [r7, #4]
200021a8:	2210      	movs	r2, #16
200021aa:	611a      	str	r2, [r3, #16]
      break;
200021ac:	e021      	b.n	200021f2 <CAN_ClearITPendingBit+0xde>
      CANx->MSR = CAN_MSR_WKUI;  
200021ae:	687b      	ldr	r3, [r7, #4]
200021b0:	2208      	movs	r2, #8
200021b2:	605a      	str	r2, [r3, #4]
      break;
200021b4:	e01d      	b.n	200021f2 <CAN_ClearITPendingBit+0xde>
      CANx->MSR = CAN_MSR_SLAKI;   
200021b6:	687b      	ldr	r3, [r7, #4]
200021b8:	2210      	movs	r2, #16
200021ba:	605a      	str	r2, [r3, #4]
      break;
200021bc:	e019      	b.n	200021f2 <CAN_ClearITPendingBit+0xde>
      CANx->MSR = CAN_MSR_ERRI;
200021be:	687b      	ldr	r3, [r7, #4]
200021c0:	2204      	movs	r2, #4
200021c2:	605a      	str	r2, [r3, #4]
      break;
200021c4:	e015      	b.n	200021f2 <CAN_ClearITPendingBit+0xde>
      CANx->MSR = CAN_MSR_ERRI; 
200021c6:	687b      	ldr	r3, [r7, #4]
200021c8:	2204      	movs	r2, #4
200021ca:	605a      	str	r2, [r3, #4]
      break;
200021cc:	e011      	b.n	200021f2 <CAN_ClearITPendingBit+0xde>
      CANx->MSR = CAN_MSR_ERRI; 
200021ce:	687b      	ldr	r3, [r7, #4]
200021d0:	2204      	movs	r2, #4
200021d2:	605a      	str	r2, [r3, #4]
       break;
200021d4:	e00d      	b.n	200021f2 <CAN_ClearITPendingBit+0xde>
      CANx->ESR = RESET; 
200021d6:	687b      	ldr	r3, [r7, #4]
200021d8:	2200      	movs	r2, #0
200021da:	619a      	str	r2, [r3, #24]
      CANx->MSR = CAN_MSR_ERRI; 
200021dc:	687b      	ldr	r3, [r7, #4]
200021de:	2204      	movs	r2, #4
200021e0:	605a      	str	r2, [r3, #4]
      break;
200021e2:	e006      	b.n	200021f2 <CAN_ClearITPendingBit+0xde>
      CANx->ESR = RESET; 
200021e4:	687b      	ldr	r3, [r7, #4]
200021e6:	2200      	movs	r2, #0
200021e8:	619a      	str	r2, [r3, #24]
      CANx->MSR = CAN_MSR_ERRI; 
200021ea:	687b      	ldr	r3, [r7, #4]
200021ec:	2204      	movs	r2, #4
200021ee:	605a      	str	r2, [r3, #4]
       break;
200021f0:	46c0      	nop			; (mov r8, r8)
   }
}
200021f2:	46c0      	nop			; (mov r8, r8)
200021f4:	46bd      	mov	sp, r7
200021f6:	b002      	add	sp, #8
200021f8:	bd80      	pop	{r7, pc}
200021fa:	46c0      	nop			; (mov r8, r8)
200021fc:	00010101 	andeq	r0, r1, r1, lsl #2

20002200 <CheckITStatus>:
  * @param  CAN_Reg: specifies the CAN interrupt register to check.
  * @param  It_Bit: specifies the interrupt source bit to check.
  * @retval The new state of the CAN Interrupt (SET or RESET).
  */
static ITStatus CheckITStatus(uint32_t CAN_Reg, uint32_t It_Bit)
{
20002200:	b580      	push	{r7, lr}
20002202:	b084      	sub	sp, #16
20002204:	af00      	add	r7, sp, #0
20002206:	6078      	str	r0, [r7, #4]
20002208:	6039      	str	r1, [r7, #0]
  ITStatus pendingbitstatus = RESET;
2000220a:	230f      	movs	r3, #15
2000220c:	18fb      	adds	r3, r7, r3
2000220e:	2200      	movs	r2, #0
20002210:	701a      	strb	r2, [r3, #0]
  
  if ((CAN_Reg & It_Bit) != (uint32_t)RESET)
20002212:	687b      	ldr	r3, [r7, #4]
20002214:	683a      	ldr	r2, [r7, #0]
20002216:	4013      	ands	r3, r2
20002218:	d004      	beq.n	20002224 <CheckITStatus+0x24>
  {
    /* CAN_IT is set */
    pendingbitstatus = SET;
2000221a:	230f      	movs	r3, #15
2000221c:	18fb      	adds	r3, r7, r3
2000221e:	2201      	movs	r2, #1
20002220:	701a      	strb	r2, [r3, #0]
20002222:	e003      	b.n	2000222c <CheckITStatus+0x2c>
  }
  else
  {
    /* CAN_IT is reset */
    pendingbitstatus = RESET;
20002224:	230f      	movs	r3, #15
20002226:	18fb      	adds	r3, r7, r3
20002228:	2200      	movs	r2, #0
2000222a:	701a      	strb	r2, [r3, #0]
  }
  return pendingbitstatus;
2000222c:	230f      	movs	r3, #15
2000222e:	18fb      	adds	r3, r7, r3
20002230:	781b      	ldrb	r3, [r3, #0]
}
20002232:	0018      	movs	r0, r3
20002234:	46bd      	mov	sp, r7
20002236:	b004      	add	sp, #16
20002238:	bd80      	pop	{r7, pc}
2000223a:	46c0      	nop			; (mov r8, r8)

2000223c <NVIC_SetPriority>:
{
2000223c:	b580      	push	{r7, lr}
2000223e:	b082      	sub	sp, #8
20002240:	af00      	add	r7, sp, #0
20002242:	0002      	movs	r2, r0
20002244:	6039      	str	r1, [r7, #0]
20002246:	1dfb      	adds	r3, r7, #7
20002248:	701a      	strb	r2, [r3, #0]
  if((int32_t)IRQn < 0) {
2000224a:	1dfb      	adds	r3, r7, #7
2000224c:	781b      	ldrb	r3, [r3, #0]
2000224e:	2b7f      	cmp	r3, #127	; 0x7f
20002250:	d90d      	bls.n	2000226e <NVIC_SetPriority+0x32>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
20002252:	683b      	ldr	r3, [r7, #0]
20002254:	b2da      	uxtb	r2, r3
20002256:	490f      	ldr	r1, [pc, #60]	; (20002294 <NVIC_SetPriority+0x58>)
20002258:	1dfb      	adds	r3, r7, #7
2000225a:	781b      	ldrb	r3, [r3, #0]
2000225c:	0018      	movs	r0, r3
2000225e:	230f      	movs	r3, #15
20002260:	4003      	ands	r3, r0
20002262:	3b04      	subs	r3, #4
20002264:	0112      	lsls	r2, r2, #4
20002266:	b2d2      	uxtb	r2, r2
20002268:	18cb      	adds	r3, r1, r3
2000226a:	761a      	strb	r2, [r3, #24]
}
2000226c:	e00d      	b.n	2000228a <NVIC_SetPriority+0x4e>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
2000226e:	683b      	ldr	r3, [r7, #0]
20002270:	b2db      	uxtb	r3, r3
20002272:	4909      	ldr	r1, [pc, #36]	; (20002298 <NVIC_SetPriority+0x5c>)
20002274:	1dfa      	adds	r2, r7, #7
20002276:	7812      	ldrb	r2, [r2, #0]
20002278:	b252      	sxtb	r2, r2
2000227a:	011b      	lsls	r3, r3, #4
2000227c:	b2d8      	uxtb	r0, r3
2000227e:	23c0      	movs	r3, #192	; 0xc0
20002280:	009b      	lsls	r3, r3, #2
20002282:	188a      	adds	r2, r1, r2
20002284:	18d3      	adds	r3, r2, r3
20002286:	1c02      	adds	r2, r0, #0
20002288:	701a      	strb	r2, [r3, #0]
}
2000228a:	46c0      	nop			; (mov r8, r8)
2000228c:	46bd      	mov	sp, r7
2000228e:	b002      	add	sp, #8
20002290:	bd80      	pop	{r7, pc}
20002292:	46c0      	nop			; (mov r8, r8)
20002294:	e000ed00 	and	lr, r0, r0, lsl #26
20002298:	e000e100 	and	lr, r0, r0, lsl #2

2000229c <CANhandlerListNotFull>:
uint8_t SessionIDActive;
uint32_t SessionID;

//Kollar om det finns plats i handlerList
//Returnerar 1 om det finns plats, 0 annars
uint8_t CANhandlerListNotFull(void){
2000229c:	b580      	push	{r7, lr}
2000229e:	b082      	sub	sp, #8
200022a0:	af00      	add	r7, sp, #0
    for (uint8_t index = 0; index < HANDLERLISTSIZE; index++){
200022a2:	1dfb      	adds	r3, r7, #7
200022a4:	2200      	movs	r2, #0
200022a6:	701a      	strb	r2, [r3, #0]
200022a8:	e00f      	b.n	200022ca <CANhandlerListNotFull+0x2e>
            if (handlerList[index].state == DISABLE){
200022aa:	1dfb      	adds	r3, r7, #7
200022ac:	781b      	ldrb	r3, [r3, #0]
200022ae:	4a0b      	ldr	r2, [pc, #44]	; (200022dc <CANhandlerListNotFull+0x40>)
200022b0:	011b      	lsls	r3, r3, #4
200022b2:	18d3      	adds	r3, r2, r3
200022b4:	330c      	adds	r3, #12
200022b6:	781b      	ldrb	r3, [r3, #0]
200022b8:	2b00      	cmp	r3, #0
200022ba:	d101      	bne.n	200022c0 <CANhandlerListNotFull+0x24>
                return 1;
200022bc:	2301      	movs	r3, #1
200022be:	e009      	b.n	200022d4 <CANhandlerListNotFull+0x38>
    for (uint8_t index = 0; index < HANDLERLISTSIZE; index++){
200022c0:	1dfb      	adds	r3, r7, #7
200022c2:	781a      	ldrb	r2, [r3, #0]
200022c4:	1dfb      	adds	r3, r7, #7
200022c6:	3201      	adds	r2, #1
200022c8:	701a      	strb	r2, [r3, #0]
200022ca:	1dfb      	adds	r3, r7, #7
200022cc:	781b      	ldrb	r3, [r3, #0]
200022ce:	2b0d      	cmp	r3, #13
200022d0:	d9eb      	bls.n	200022aa <CANhandlerListNotFull+0xe>
            }
    }
    return 0;
200022d2:	2300      	movs	r3, #0
}
200022d4:	0018      	movs	r0, r3
200022d6:	46bd      	mov	sp, r7
200022d8:	b002      	add	sp, #8
200022da:	bd80      	pop	{r7, pc}
200022dc:	20003e10 	andcs	r3, r0, r0, lsl lr

200022e0 <CANactivateFilterHandler>:

//Ativerar ett filtet med index från handlerList
void CANactivateFilterHandler (uint8_t index){
200022e0:	b580      	push	{r7, lr}
200022e2:	b088      	sub	sp, #32
200022e4:	af00      	add	r7, sp, #0
200022e6:	0002      	movs	r2, r0
200022e8:	1dfb      	adds	r3, r7, #7
200022ea:	701a      	strb	r2, [r3, #0]
            handlerList[index].state = ENABLE;
200022ec:	1dfb      	adds	r3, r7, #7
200022ee:	781b      	ldrb	r3, [r3, #0]
200022f0:	4a20      	ldr	r2, [pc, #128]	; (20002374 <CANactivateFilterHandler+0x94>)
200022f2:	011b      	lsls	r3, r3, #4
200022f4:	18d3      	adds	r3, r2, r3
200022f6:	330c      	adds	r3, #12
200022f8:	2201      	movs	r2, #1
200022fa:	701a      	strb	r2, [r3, #0]

            //Union för omvandling mellan CANFilter och uint16_t
            filterUnion unionFilter, unionMask;
            unionFilter.filter = handlerList[index].filter;
200022fc:	1dfb      	adds	r3, r7, #7
200022fe:	781b      	ldrb	r3, [r3, #0]
20002300:	4a1c      	ldr	r2, [pc, #112]	; (20002374 <CANactivateFilterHandler+0x94>)
20002302:	011b      	lsls	r3, r3, #4
20002304:	18d3      	adds	r3, r2, r3
20002306:	3304      	adds	r3, #4
20002308:	681b      	ldr	r3, [r3, #0]
2000230a:	61fb      	str	r3, [r7, #28]
            unionMask.filter = handlerList[index].mask;
2000230c:	1dfb      	adds	r3, r7, #7
2000230e:	781b      	ldrb	r3, [r3, #0]
20002310:	4a18      	ldr	r2, [pc, #96]	; (20002374 <CANactivateFilterHandler+0x94>)
20002312:	011b      	lsls	r3, r3, #4
20002314:	18d3      	adds	r3, r2, r3
20002316:	3308      	adds	r3, #8
20002318:	681b      	ldr	r3, [r3, #0]
2000231a:	61bb      	str	r3, [r7, #24]

            /* CAN filter init */
            CAN_FilterInitTypeDef CAN_FilterInitStructure;
            CAN_FilterInitStructure.CAN_FilterNumber = index;
2000231c:	2108      	movs	r1, #8
2000231e:	187b      	adds	r3, r7, r1
20002320:	1dfa      	adds	r2, r7, #7
20002322:	7812      	ldrb	r2, [r2, #0]
20002324:	729a      	strb	r2, [r3, #10]
            CAN_FilterInitStructure.CAN_FilterMode = CAN_FilterMode_IdMask;
20002326:	187b      	adds	r3, r7, r1
20002328:	2200      	movs	r2, #0
2000232a:	72da      	strb	r2, [r3, #11]
            CAN_FilterInitStructure.CAN_FilterScale = CAN_FilterScale_32bit;
2000232c:	187b      	adds	r3, r7, r1
2000232e:	2201      	movs	r2, #1
20002330:	731a      	strb	r2, [r3, #12]
            CAN_FilterInitStructure.CAN_FilterIdHigh = unionFilter.u16bits[1];
20002332:	201c      	movs	r0, #28
20002334:	183b      	adds	r3, r7, r0
20002336:	885a      	ldrh	r2, [r3, #2]
20002338:	187b      	adds	r3, r7, r1
2000233a:	801a      	strh	r2, [r3, #0]
            CAN_FilterInitStructure.CAN_FilterIdLow = unionFilter.u16bits[0];
2000233c:	183b      	adds	r3, r7, r0
2000233e:	881a      	ldrh	r2, [r3, #0]
20002340:	187b      	adds	r3, r7, r1
20002342:	805a      	strh	r2, [r3, #2]
            CAN_FilterInitStructure.CAN_FilterMaskIdHigh = unionMask.u16bits[1];
20002344:	2018      	movs	r0, #24
20002346:	183b      	adds	r3, r7, r0
20002348:	885a      	ldrh	r2, [r3, #2]
2000234a:	187b      	adds	r3, r7, r1
2000234c:	809a      	strh	r2, [r3, #4]
            CAN_FilterInitStructure.CAN_FilterMaskIdLow = unionMask.u16bits[0];
2000234e:	183b      	adds	r3, r7, r0
20002350:	881a      	ldrh	r2, [r3, #0]
20002352:	187b      	adds	r3, r7, r1
20002354:	80da      	strh	r2, [r3, #6]
            CAN_FilterInitStructure.CAN_FilterFIFOAssignment = 0;
20002356:	187b      	adds	r3, r7, r1
20002358:	2200      	movs	r2, #0
2000235a:	811a      	strh	r2, [r3, #8]
            CAN_FilterInitStructure.CAN_FilterActivation = ENABLE;
2000235c:	187b      	adds	r3, r7, r1
2000235e:	2201      	movs	r2, #1
20002360:	735a      	strb	r2, [r3, #13]
            CAN_FilterInit(&CAN_FilterInitStructure);
20002362:	187b      	adds	r3, r7, r1
20002364:	0018      	movs	r0, r3
20002366:	f7fe ff89 	bl	2000127c <CAN_FilterInit>
}
2000236a:	46c0      	nop			; (mov r8, r8)
2000236c:	46bd      	mov	sp, r7
2000236e:	b008      	add	sp, #32
20002370:	bd80      	pop	{r7, pc}
20002372:	46c0      	nop			; (mov r8, r8)
20002374:	20003e10 	andcs	r3, r0, r0, lsl lr

20002378 <CANaddFilterHandler>:

//Lägger till ett filter, returnerar index för filtret i handlerList
//Om session ID är aktiverat läggs det automatiskt till i filtret
//Kolla att det finns plats i handlerList innan med handlerListNotFull()
uint8_t CANaddFilterHandler(void (*newHandler)(CanRxMsg *), CANFilter *filter, CANFilter *mask){
20002378:	b590      	push	{r4, r7, lr}
2000237a:	b087      	sub	sp, #28
2000237c:	af00      	add	r7, sp, #0
2000237e:	60f8      	str	r0, [r7, #12]
20002380:	60b9      	str	r1, [r7, #8]
20002382:	607a      	str	r2, [r7, #4]
    for (uint8_t index = 0; index < HANDLERLISTSIZE; index++){
20002384:	2317      	movs	r3, #23
20002386:	18fb      	adds	r3, r7, r3
20002388:	2200      	movs	r2, #0
2000238a:	701a      	strb	r2, [r3, #0]
2000238c:	e076      	b.n	2000247c <CANaddFilterHandler+0x104>
        if (handlerList[index].state == DISABLE){
2000238e:	2317      	movs	r3, #23
20002390:	18fb      	adds	r3, r7, r3
20002392:	781b      	ldrb	r3, [r3, #0]
20002394:	4a3e      	ldr	r2, [pc, #248]	; (20002490 <CANaddFilterHandler+0x118>)
20002396:	011b      	lsls	r3, r3, #4
20002398:	18d3      	adds	r3, r2, r3
2000239a:	330c      	adds	r3, #12
2000239c:	781b      	ldrb	r3, [r3, #0]
2000239e:	2b00      	cmp	r3, #0
200023a0:	d166      	bne.n	20002470 <CANaddFilterHandler+0xf8>
            //Aktiverar session ID om det är aktivt
            if (SessionIDActive == SESSIONIDACTIVE){
200023a2:	4b3c      	ldr	r3, [pc, #240]	; (20002494 <CANaddFilterHandler+0x11c>)
200023a4:	781b      	ldrb	r3, [r3, #0]
200023a6:	2b01      	cmp	r3, #1
200023a8:	d13d      	bne.n	20002426 <CANaddFilterHandler+0xae>
                //Används för omvandling och tilldeling av sessionID
                Header header;

                //Alla meddelanden med sessionID aktivt måste vara extended
                filter->IDE = 1;
200023aa:	68bb      	ldr	r3, [r7, #8]
200023ac:	781a      	ldrb	r2, [r3, #0]
200023ae:	2104      	movs	r1, #4
200023b0:	430a      	orrs	r2, r1
200023b2:	701a      	strb	r2, [r3, #0]
                mask->IDE = 1;
200023b4:	687b      	ldr	r3, [r7, #4]
200023b6:	781a      	ldrb	r2, [r3, #0]
200023b8:	2104      	movs	r1, #4
200023ba:	430a      	orrs	r2, r1
200023bc:	701a      	strb	r2, [r3, #0]

                //Skriver sessionID
                UINT32toHEADER(filter->ID, header);
200023be:	68bb      	ldr	r3, [r7, #8]
200023c0:	681b      	ldr	r3, [r3, #0]
200023c2:	08da      	lsrs	r2, r3, #3
200023c4:	2010      	movs	r0, #16
200023c6:	183b      	adds	r3, r7, r0
200023c8:	601a      	str	r2, [r3, #0]
                header.sessionID = SessionID;
200023ca:	4b33      	ldr	r3, [pc, #204]	; (20002498 <CANaddFilterHandler+0x120>)
200023cc:	681b      	ldr	r3, [r3, #0]
200023ce:	059b      	lsls	r3, r3, #22
200023d0:	0d9b      	lsrs	r3, r3, #22
200023d2:	b29b      	uxth	r3, r3
200023d4:	059b      	lsls	r3, r3, #22
200023d6:	0d9b      	lsrs	r3, r3, #22
200023d8:	021b      	lsls	r3, r3, #8
200023da:	693a      	ldr	r2, [r7, #16]
200023dc:	492f      	ldr	r1, [pc, #188]	; (2000249c <CANaddFilterHandler+0x124>)
200023de:	400a      	ands	r2, r1
200023e0:	4313      	orrs	r3, r2
200023e2:	613b      	str	r3, [r7, #16]
                HEADERtoUINT32(header, filter->ID);
200023e4:	0004      	movs	r4, r0
200023e6:	183b      	adds	r3, r7, r0
200023e8:	681b      	ldr	r3, [r3, #0]
200023ea:	00db      	lsls	r3, r3, #3
200023ec:	08da      	lsrs	r2, r3, #3
200023ee:	68bb      	ldr	r3, [r7, #8]
200023f0:	00d2      	lsls	r2, r2, #3
200023f2:	6819      	ldr	r1, [r3, #0]
200023f4:	2007      	movs	r0, #7
200023f6:	4001      	ands	r1, r0
200023f8:	430a      	orrs	r2, r1
200023fa:	601a      	str	r2, [r3, #0]

                //Skriver sessionID masken
                UINT32toHEADER(mask->ID, header);
200023fc:	687b      	ldr	r3, [r7, #4]
200023fe:	681b      	ldr	r3, [r3, #0]
20002400:	08da      	lsrs	r2, r3, #3
20002402:	0020      	movs	r0, r4
20002404:	183b      	adds	r3, r7, r0
20002406:	601a      	str	r2, [r3, #0]
                header.sessionID = ~0;
20002408:	693b      	ldr	r3, [r7, #16]
2000240a:	4a25      	ldr	r2, [pc, #148]	; (200024a0 <CANaddFilterHandler+0x128>)
2000240c:	4313      	orrs	r3, r2
2000240e:	613b      	str	r3, [r7, #16]
                HEADERtoUINT32(header, mask->ID);
20002410:	183b      	adds	r3, r7, r0
20002412:	681b      	ldr	r3, [r3, #0]
20002414:	00db      	lsls	r3, r3, #3
20002416:	08da      	lsrs	r2, r3, #3
20002418:	687b      	ldr	r3, [r7, #4]
2000241a:	00d2      	lsls	r2, r2, #3
2000241c:	6819      	ldr	r1, [r3, #0]
2000241e:	2007      	movs	r0, #7
20002420:	4001      	ands	r1, r0
20002422:	430a      	orrs	r2, r1
20002424:	601a      	str	r2, [r3, #0]
            }

            handlerList[index].filter = *filter;
20002426:	2117      	movs	r1, #23
20002428:	187b      	adds	r3, r7, r1
2000242a:	781b      	ldrb	r3, [r3, #0]
2000242c:	4a18      	ldr	r2, [pc, #96]	; (20002490 <CANaddFilterHandler+0x118>)
2000242e:	011b      	lsls	r3, r3, #4
20002430:	18d3      	adds	r3, r2, r3
20002432:	3304      	adds	r3, #4
20002434:	68ba      	ldr	r2, [r7, #8]
20002436:	6812      	ldr	r2, [r2, #0]
20002438:	601a      	str	r2, [r3, #0]
            handlerList[index].mask = *mask;
2000243a:	187b      	adds	r3, r7, r1
2000243c:	781b      	ldrb	r3, [r3, #0]
2000243e:	4a14      	ldr	r2, [pc, #80]	; (20002490 <CANaddFilterHandler+0x118>)
20002440:	011b      	lsls	r3, r3, #4
20002442:	18d3      	adds	r3, r2, r3
20002444:	3308      	adds	r3, #8
20002446:	687a      	ldr	r2, [r7, #4]
20002448:	6812      	ldr	r2, [r2, #0]
2000244a:	601a      	str	r2, [r3, #0]
            handlerList[index].handler = newHandler;
2000244c:	0008      	movs	r0, r1
2000244e:	187b      	adds	r3, r7, r1
20002450:	781a      	ldrb	r2, [r3, #0]
20002452:	4b0f      	ldr	r3, [pc, #60]	; (20002490 <CANaddFilterHandler+0x118>)
20002454:	0112      	lsls	r2, r2, #4
20002456:	68f9      	ldr	r1, [r7, #12]
20002458:	50d1      	str	r1, [r2, r3]

            //Aktiverar filtret
            CANactivateFilterHandler(index);
2000245a:	0001      	movs	r1, r0
2000245c:	000c      	movs	r4, r1
2000245e:	187b      	adds	r3, r7, r1
20002460:	781b      	ldrb	r3, [r3, #0]
20002462:	0018      	movs	r0, r3
20002464:	f7ff ff3c 	bl	200022e0 <CANactivateFilterHandler>

            return index;
20002468:	0021      	movs	r1, r4
2000246a:	187b      	adds	r3, r7, r1
2000246c:	781b      	ldrb	r3, [r3, #0]
2000246e:	e00b      	b.n	20002488 <CANaddFilterHandler+0x110>
    for (uint8_t index = 0; index < HANDLERLISTSIZE; index++){
20002470:	2117      	movs	r1, #23
20002472:	187b      	adds	r3, r7, r1
20002474:	781a      	ldrb	r2, [r3, #0]
20002476:	187b      	adds	r3, r7, r1
20002478:	3201      	adds	r2, #1
2000247a:	701a      	strb	r2, [r3, #0]
2000247c:	2317      	movs	r3, #23
2000247e:	18fb      	adds	r3, r7, r3
20002480:	781b      	ldrb	r3, [r3, #0]
20002482:	2b0d      	cmp	r3, #13
20002484:	d983      	bls.n	2000238e <CANaddFilterHandler+0x16>
        }
    }

    //Detta händer bara om man inte kollat så det finns plats innan man lägger till filtret.
    //Skulle man sedan avaktivera filtret med denna index så händer ingenting, se CANdisableFilterHandler.
    return HANDLERLISTSIZE;
20002486:	230e      	movs	r3, #14
}
20002488:	0018      	movs	r0, r3
2000248a:	46bd      	mov	sp, r7
2000248c:	b007      	add	sp, #28
2000248e:	bd90      	pop	{r4, r7, pc}
20002490:	20003e10 	andcs	r3, r0, r0, lsl lr
20002494:	20003ef0 	strdcs	r3, [r0], -r0
20002498:	20003e0c 	andcs	r3, r0, ip, lsl #28
2000249c:	fffc00ff 			; <UNDEFINED> instruction: 0xfffc00ff
200024a0:	0003ff00 	andeq	pc, r3, r0, lsl #30

200024a4 <CANdisableFilterHandler>:

//Avaktiverar CANFilterHandler med index index från handlerList
void CANdisableFilterHandler(uint8_t index){
200024a4:	b580      	push	{r7, lr}
200024a6:	b086      	sub	sp, #24
200024a8:	af00      	add	r7, sp, #0
200024aa:	0002      	movs	r2, r0
200024ac:	1dfb      	adds	r3, r7, #7
200024ae:	701a      	strb	r2, [r3, #0]
    if (index < HANDLERLISTSIZE){
200024b0:	1dfb      	adds	r3, r7, #7
200024b2:	781b      	ldrb	r3, [r3, #0]
200024b4:	2b0d      	cmp	r3, #13
200024b6:	d816      	bhi.n	200024e6 <CANdisableFilterHandler+0x42>
        handlerList[index].state = DISABLE;
200024b8:	1dfb      	adds	r3, r7, #7
200024ba:	781b      	ldrb	r3, [r3, #0]
200024bc:	4a0c      	ldr	r2, [pc, #48]	; (200024f0 <CANdisableFilterHandler+0x4c>)
200024be:	011b      	lsls	r3, r3, #4
200024c0:	18d3      	adds	r3, r2, r3
200024c2:	330c      	adds	r3, #12
200024c4:	2200      	movs	r2, #0
200024c6:	701a      	strb	r2, [r3, #0]

        //Avaktiverar filtret
        CAN_FilterInitTypeDef CAN_FilterInitStructure;
        CAN_FilterInitStructure.CAN_FilterNumber = index;
200024c8:	2108      	movs	r1, #8
200024ca:	187b      	adds	r3, r7, r1
200024cc:	1dfa      	adds	r2, r7, #7
200024ce:	7812      	ldrb	r2, [r2, #0]
200024d0:	729a      	strb	r2, [r3, #10]
        CAN_FilterInitStructure.CAN_FilterFIFOAssignment = 0;
200024d2:	187b      	adds	r3, r7, r1
200024d4:	2200      	movs	r2, #0
200024d6:	811a      	strh	r2, [r3, #8]
        CAN_FilterInitStructure.CAN_FilterActivation = DISABLE;
200024d8:	187b      	adds	r3, r7, r1
200024da:	2200      	movs	r2, #0
200024dc:	735a      	strb	r2, [r3, #13]
        CAN_FilterInit(&CAN_FilterInitStructure);
200024de:	187b      	adds	r3, r7, r1
200024e0:	0018      	movs	r0, r3
200024e2:	f7fe fecb 	bl	2000127c <CAN_FilterInit>
    }
}
200024e6:	46c0      	nop			; (mov r8, r8)
200024e8:	46bd      	mov	sp, r7
200024ea:	b006      	add	sp, #24
200024ec:	bd80      	pop	{r7, pc}
200024ee:	46c0      	nop			; (mov r8, r8)
200024f0:	20003e10 	andcs	r3, r0, r0, lsl lr

200024f4 <CANdisableAllFilterHandlers>:

//Avaktiverar alla CANFilterHandlers
void CANdisableAllFilterHandlers(void){
200024f4:	b580      	push	{r7, lr}
200024f6:	b082      	sub	sp, #8
200024f8:	af00      	add	r7, sp, #0
    for (uint8_t index = 0; index < HANDLERLISTSIZE; index++){
200024fa:	1dfb      	adds	r3, r7, #7
200024fc:	2200      	movs	r2, #0
200024fe:	701a      	strb	r2, [r3, #0]
20002500:	e009      	b.n	20002516 <CANdisableAllFilterHandlers+0x22>
        CANdisableFilterHandler(index);
20002502:	1dfb      	adds	r3, r7, #7
20002504:	781b      	ldrb	r3, [r3, #0]
20002506:	0018      	movs	r0, r3
20002508:	f7ff ffcc 	bl	200024a4 <CANdisableFilterHandler>
    for (uint8_t index = 0; index < HANDLERLISTSIZE; index++){
2000250c:	1dfb      	adds	r3, r7, #7
2000250e:	781a      	ldrb	r2, [r3, #0]
20002510:	1dfb      	adds	r3, r7, #7
20002512:	3201      	adds	r2, #1
20002514:	701a      	strb	r2, [r3, #0]
20002516:	1dfb      	adds	r3, r7, #7
20002518:	781b      	ldrb	r3, [r3, #0]
2000251a:	2b0d      	cmp	r3, #13
2000251c:	d9f1      	bls.n	20002502 <CANdisableAllFilterHandlers+0xe>
    }
}
2000251e:	46c0      	nop			; (mov r8, r8)
20002520:	46bd      	mov	sp, r7
20002522:	b002      	add	sp, #8
20002524:	bd80      	pop	{r7, pc}

20002526 <CANsendMessage>:

//Skickar ett CAN-meddelande
//Omvandlar till extended om det inte redan är det samt session ID är aktivt
//Returnderar numret för mailboxen som används eller CAN_TxStatus_NoMailBox om det misslyckades
uint8_t CANsendMessage(CanTxMsg *msg){
20002526:	b580      	push	{r7, lr}
20002528:	b084      	sub	sp, #16
2000252a:	af00      	add	r7, sp, #0
2000252c:	6078      	str	r0, [r7, #4]
    //Justerar endast meddelandet om sessionID är aktivt
    if (SessionIDActive == SESSIONIDACTIVE){
2000252e:	4b24      	ldr	r3, [pc, #144]	; (200025c0 <CANsendMessage+0x9a>)
20002530:	781b      	ldrb	r3, [r3, #0]
20002532:	2b01      	cmp	r3, #1
20002534:	d138      	bne.n	200025a8 <CANsendMessage+0x82>
        //Används för omvandling och tilldeling av session ID
        Header header;

        //Om standardmeddelande omvandla till extended
        if (msg->IDE == CAN_Id_Standard){
20002536:	687b      	ldr	r3, [r7, #4]
20002538:	7a1b      	ldrb	r3, [r3, #8]
2000253a:	2b00      	cmp	r3, #0
2000253c:	d11a      	bne.n	20002574 <CANsendMessage+0x4e>
            msg->IDE = CAN_Id_Extended;
2000253e:	687b      	ldr	r3, [r7, #4]
20002540:	2204      	movs	r2, #4
20002542:	721a      	strb	r2, [r3, #8]

            //Skriver sessionID
            UINT32toHEADER(msg->StdId << STDtoEXTLENGTHDIFF, header);
20002544:	687b      	ldr	r3, [r7, #4]
20002546:	681a      	ldr	r2, [r3, #0]
20002548:	200c      	movs	r0, #12
2000254a:	183b      	adds	r3, r7, r0
2000254c:	0492      	lsls	r2, r2, #18
2000254e:	601a      	str	r2, [r3, #0]
            header.sessionID = SessionID;
20002550:	4b1c      	ldr	r3, [pc, #112]	; (200025c4 <CANsendMessage+0x9e>)
20002552:	681b      	ldr	r3, [r3, #0]
20002554:	059b      	lsls	r3, r3, #22
20002556:	0d9b      	lsrs	r3, r3, #22
20002558:	b29b      	uxth	r3, r3
2000255a:	059b      	lsls	r3, r3, #22
2000255c:	0d9b      	lsrs	r3, r3, #22
2000255e:	021b      	lsls	r3, r3, #8
20002560:	68fa      	ldr	r2, [r7, #12]
20002562:	4919      	ldr	r1, [pc, #100]	; (200025c8 <CANsendMessage+0xa2>)
20002564:	400a      	ands	r2, r1
20002566:	4313      	orrs	r3, r2
20002568:	60fb      	str	r3, [r7, #12]
            HEADERtoUINT32(header, msg->ExtId);
2000256a:	183b      	adds	r3, r7, r0
2000256c:	681a      	ldr	r2, [r3, #0]
2000256e:	687b      	ldr	r3, [r7, #4]
20002570:	605a      	str	r2, [r3, #4]
20002572:	e019      	b.n	200025a8 <CANsendMessage+0x82>
        }

        //Annars om det redan är ett meddelande med extended ID
        //justeras endast sessionsbitarna om sessions ID är aktivt
        else if (msg->IDE == CAN_Id_Extended){
20002574:	687b      	ldr	r3, [r7, #4]
20002576:	7a1b      	ldrb	r3, [r3, #8]
20002578:	2b04      	cmp	r3, #4
2000257a:	d115      	bne.n	200025a8 <CANsendMessage+0x82>
            UINT32toHEADER(msg->ExtId, header);
2000257c:	200c      	movs	r0, #12
2000257e:	183b      	adds	r3, r7, r0
20002580:	687a      	ldr	r2, [r7, #4]
20002582:	6852      	ldr	r2, [r2, #4]
20002584:	601a      	str	r2, [r3, #0]
            header.sessionID = SessionID;
20002586:	4b0f      	ldr	r3, [pc, #60]	; (200025c4 <CANsendMessage+0x9e>)
20002588:	681b      	ldr	r3, [r3, #0]
2000258a:	059b      	lsls	r3, r3, #22
2000258c:	0d9b      	lsrs	r3, r3, #22
2000258e:	b29b      	uxth	r3, r3
20002590:	059b      	lsls	r3, r3, #22
20002592:	0d9b      	lsrs	r3, r3, #22
20002594:	021b      	lsls	r3, r3, #8
20002596:	68fa      	ldr	r2, [r7, #12]
20002598:	490b      	ldr	r1, [pc, #44]	; (200025c8 <CANsendMessage+0xa2>)
2000259a:	400a      	ands	r2, r1
2000259c:	4313      	orrs	r3, r2
2000259e:	60fb      	str	r3, [r7, #12]
            HEADERtoUINT32(header, msg->ExtId);
200025a0:	183b      	adds	r3, r7, r0
200025a2:	681a      	ldr	r2, [r3, #0]
200025a4:	687b      	ldr	r3, [r7, #4]
200025a6:	605a      	str	r2, [r3, #4]
        }
    }

	return CAN_Transmit(CAN1, msg);
200025a8:	687b      	ldr	r3, [r7, #4]
200025aa:	4a08      	ldr	r2, [pc, #32]	; (200025cc <CANsendMessage+0xa6>)
200025ac:	0019      	movs	r1, r3
200025ae:	0010      	movs	r0, r2
200025b0:	f7ff f822 	bl	200015f8 <CAN_Transmit>
200025b4:	0003      	movs	r3, r0
}
200025b6:	0018      	movs	r0, r3
200025b8:	46bd      	mov	sp, r7
200025ba:	b004      	add	sp, #16
200025bc:	bd80      	pop	{r7, pc}
200025be:	46c0      	nop			; (mov r8, r8)
200025c0:	20003ef0 	strdcs	r3, [r0], -r0
200025c4:	20003e0c 	andcs	r3, r0, ip, lsl #28
200025c8:	fffc00ff 			; <UNDEFINED> instruction: 0xfffc00ff
200025cc:	40006400 	andmi	r6, r0, r0, lsl #8

200025d0 <can_irq_handler>:

//Avbrottshanterare för mottagna meddelanden på FIFO 0.
//Anropar meddelandes hanteringsfunktion.
void can_irq_handler(void){
200025d0:	b580      	push	{r7, lr}
200025d2:	b086      	sub	sp, #24
200025d4:	af00      	add	r7, sp, #0
    //Kollar FIFO 0 pending Interrupt
    if(CAN_GetITStatus(CAN1, CAN_IT_FMP0)) {
200025d6:	4b17      	ldr	r3, [pc, #92]	; (20002634 <can_irq_handler+0x64>)
200025d8:	2102      	movs	r1, #2
200025da:	0018      	movs	r0, r3
200025dc:	f7ff fca2 	bl	20001f24 <CAN_GetITStatus>
200025e0:	1e03      	subs	r3, r0, #0
200025e2:	d022      	beq.n	2000262a <can_irq_handler+0x5a>
        //Kollar så att det finns meddelande som väntar i FIFO0
        if (CAN_MessagePending(CAN1, CAN_FIFO0)) {
200025e4:	4b13      	ldr	r3, [pc, #76]	; (20002634 <can_irq_handler+0x64>)
200025e6:	2100      	movs	r1, #0
200025e8:	0018      	movs	r0, r3
200025ea:	f7ff fa7d 	bl	20001ae8 <CAN_MessagePending>
200025ee:	1e03      	subs	r3, r0, #0
200025f0:	d01b      	beq.n	2000262a <can_irq_handler+0x5a>
            //Läser meddelandet
            CanRxMsg rxMsg;
            CAN_Receive(CAN1, CAN_FIFO0, &rxMsg);
200025f2:	1d3b      	adds	r3, r7, #4
200025f4:	480f      	ldr	r0, [pc, #60]	; (20002634 <can_irq_handler+0x64>)
200025f6:	001a      	movs	r2, r3
200025f8:	2100      	movs	r1, #0
200025fa:	f7ff f984 	bl	20001906 <CAN_Receive>

            //Anropar hanteringsfunktionen för meddelandet
            if (rxMsg.FMI < HANDLERLISTSIZE){
200025fe:	1d3b      	adds	r3, r7, #4
20002600:	7cdb      	ldrb	r3, [r3, #19]
20002602:	2b0d      	cmp	r3, #13
20002604:	d811      	bhi.n	2000262a <can_irq_handler+0x5a>
                if (handlerList[rxMsg.FMI].state == ENABLE){
20002606:	1d3b      	adds	r3, r7, #4
20002608:	7cdb      	ldrb	r3, [r3, #19]
2000260a:	4a0b      	ldr	r2, [pc, #44]	; (20002638 <can_irq_handler+0x68>)
2000260c:	011b      	lsls	r3, r3, #4
2000260e:	18d3      	adds	r3, r2, r3
20002610:	330c      	adds	r3, #12
20002612:	781b      	ldrb	r3, [r3, #0]
20002614:	2b01      	cmp	r3, #1
20002616:	d108      	bne.n	2000262a <can_irq_handler+0x5a>
                    handlerList[rxMsg.FMI].handler(&rxMsg);
20002618:	1d3b      	adds	r3, r7, #4
2000261a:	7cdb      	ldrb	r3, [r3, #19]
2000261c:	001a      	movs	r2, r3
2000261e:	4b06      	ldr	r3, [pc, #24]	; (20002638 <can_irq_handler+0x68>)
20002620:	0112      	lsls	r2, r2, #4
20002622:	58d3      	ldr	r3, [r2, r3]
20002624:	1d3a      	adds	r2, r7, #4
20002626:	0010      	movs	r0, r2
20002628:	4798      	blx	r3
                }
            }
        }
    }
}
2000262a:	46c0      	nop			; (mov r8, r8)
2000262c:	46bd      	mov	sp, r7
2000262e:	b006      	add	sp, #24
20002630:	bd80      	pop	{r7, pc}
20002632:	46c0      	nop			; (mov r8, r8)
20002634:	40006400 	andmi	r6, r0, r0, lsl #8
20002638:	20003e10 	andcs	r3, r0, r0, lsl lr

2000263c <setSessionId>:

//Sätter session ID,  ändra även session ID för aktiva filter
//Använder de första 10 bitarna av ID
void setSessionId(uint16_t ID){
2000263c:	b5b0      	push	{r4, r5, r7, lr}
2000263e:	b084      	sub	sp, #16
20002640:	af00      	add	r7, sp, #0
20002642:	0002      	movs	r2, r0
20002644:	1dbb      	adds	r3, r7, #6
20002646:	801a      	strh	r2, [r3, #0]
    SessionIDActive = SESSIONIDACTIVE;
20002648:	4b44      	ldr	r3, [pc, #272]	; (2000275c <setSessionId+0x120>)
2000264a:	2201      	movs	r2, #1
2000264c:	701a      	strb	r2, [r3, #0]
    SessionID = ID;
2000264e:	1dbb      	adds	r3, r7, #6
20002650:	881a      	ldrh	r2, [r3, #0]
20002652:	4b43      	ldr	r3, [pc, #268]	; (20002760 <setSessionId+0x124>)
20002654:	601a      	str	r2, [r3, #0]

    for (uint8_t index = 0; index < HANDLERLISTSIZE; index++){
20002656:	230f      	movs	r3, #15
20002658:	18fb      	adds	r3, r7, r3
2000265a:	2200      	movs	r2, #0
2000265c:	701a      	strb	r2, [r3, #0]
2000265e:	e073      	b.n	20002748 <setSessionId+0x10c>
        //Justerar filter som är aktiva
        if(handlerList[index].state == ENABLE){
20002660:	230f      	movs	r3, #15
20002662:	18fb      	adds	r3, r7, r3
20002664:	781b      	ldrb	r3, [r3, #0]
20002666:	4a3f      	ldr	r2, [pc, #252]	; (20002764 <setSessionId+0x128>)
20002668:	011b      	lsls	r3, r3, #4
2000266a:	18d3      	adds	r3, r2, r3
2000266c:	330c      	adds	r3, #12
2000266e:	781b      	ldrb	r3, [r3, #0]
20002670:	2b01      	cmp	r3, #1
20002672:	d163      	bne.n	2000273c <setSessionId+0x100>
            //Används för omvandling
            Header header;

            //Filtrer och masken måste vara av typ extended
            handlerList[index].filter.IDE = 1;
20002674:	200f      	movs	r0, #15
20002676:	183b      	adds	r3, r7, r0
20002678:	781b      	ldrb	r3, [r3, #0]
2000267a:	4a3a      	ldr	r2, [pc, #232]	; (20002764 <setSessionId+0x128>)
2000267c:	011b      	lsls	r3, r3, #4
2000267e:	18d3      	adds	r3, r2, r3
20002680:	791a      	ldrb	r2, [r3, #4]
20002682:	2104      	movs	r1, #4
20002684:	430a      	orrs	r2, r1
20002686:	711a      	strb	r2, [r3, #4]
            handlerList[index].mask.IDE = 1;
20002688:	183b      	adds	r3, r7, r0
2000268a:	781b      	ldrb	r3, [r3, #0]
2000268c:	4a35      	ldr	r2, [pc, #212]	; (20002764 <setSessionId+0x128>)
2000268e:	2108      	movs	r1, #8
20002690:	011b      	lsls	r3, r3, #4
20002692:	18d3      	adds	r3, r2, r3
20002694:	185b      	adds	r3, r3, r1
20002696:	781a      	ldrb	r2, [r3, #0]
20002698:	2104      	movs	r1, #4
2000269a:	430a      	orrs	r2, r1
2000269c:	701a      	strb	r2, [r3, #0]

            //Ändrar filter
            UINT32toHEADER(handlerList[index].filter.ID, header);
2000269e:	183b      	adds	r3, r7, r0
200026a0:	781b      	ldrb	r3, [r3, #0]
200026a2:	4a30      	ldr	r2, [pc, #192]	; (20002764 <setSessionId+0x128>)
200026a4:	011b      	lsls	r3, r3, #4
200026a6:	18d3      	adds	r3, r2, r3
200026a8:	685b      	ldr	r3, [r3, #4]
200026aa:	08da      	lsrs	r2, r3, #3
200026ac:	2508      	movs	r5, #8
200026ae:	197b      	adds	r3, r7, r5
200026b0:	601a      	str	r2, [r3, #0]
            header.sessionID = SessionID;
200026b2:	4b2b      	ldr	r3, [pc, #172]	; (20002760 <setSessionId+0x124>)
200026b4:	681b      	ldr	r3, [r3, #0]
200026b6:	059b      	lsls	r3, r3, #22
200026b8:	0d9b      	lsrs	r3, r3, #22
200026ba:	b29b      	uxth	r3, r3
200026bc:	059b      	lsls	r3, r3, #22
200026be:	0d9b      	lsrs	r3, r3, #22
200026c0:	021b      	lsls	r3, r3, #8
200026c2:	68ba      	ldr	r2, [r7, #8]
200026c4:	4928      	ldr	r1, [pc, #160]	; (20002768 <setSessionId+0x12c>)
200026c6:	400a      	ands	r2, r1
200026c8:	4313      	orrs	r3, r2
200026ca:	60bb      	str	r3, [r7, #8]
            HEADERtoUINT32(header, handlerList[index].filter.ID);
200026cc:	197b      	adds	r3, r7, r5
200026ce:	681a      	ldr	r2, [r3, #0]
200026d0:	0004      	movs	r4, r0
200026d2:	183b      	adds	r3, r7, r0
200026d4:	781b      	ldrb	r3, [r3, #0]
200026d6:	00d2      	lsls	r2, r2, #3
200026d8:	08d2      	lsrs	r2, r2, #3
200026da:	4922      	ldr	r1, [pc, #136]	; (20002764 <setSessionId+0x128>)
200026dc:	011b      	lsls	r3, r3, #4
200026de:	18cb      	adds	r3, r1, r3
200026e0:	00d2      	lsls	r2, r2, #3
200026e2:	6859      	ldr	r1, [r3, #4]
200026e4:	2007      	movs	r0, #7
200026e6:	4001      	ands	r1, r0
200026e8:	430a      	orrs	r2, r1
200026ea:	605a      	str	r2, [r3, #4]

            //Ändrar masken
            UINT32toHEADER(handlerList[index].mask.ID, header);
200026ec:	0020      	movs	r0, r4
200026ee:	183b      	adds	r3, r7, r0
200026f0:	781b      	ldrb	r3, [r3, #0]
200026f2:	4a1c      	ldr	r2, [pc, #112]	; (20002764 <setSessionId+0x128>)
200026f4:	2108      	movs	r1, #8
200026f6:	011b      	lsls	r3, r3, #4
200026f8:	18d3      	adds	r3, r2, r3
200026fa:	185b      	adds	r3, r3, r1
200026fc:	681b      	ldr	r3, [r3, #0]
200026fe:	08da      	lsrs	r2, r3, #3
20002700:	197b      	adds	r3, r7, r5
20002702:	601a      	str	r2, [r3, #0]
            header.sessionID = ~0;
20002704:	68bb      	ldr	r3, [r7, #8]
20002706:	4a19      	ldr	r2, [pc, #100]	; (2000276c <setSessionId+0x130>)
20002708:	4313      	orrs	r3, r2
2000270a:	60bb      	str	r3, [r7, #8]
            HEADERtoUINT32(header, handlerList[index].mask.ID);
2000270c:	197b      	adds	r3, r7, r5
2000270e:	681a      	ldr	r2, [r3, #0]
20002710:	0004      	movs	r4, r0
20002712:	183b      	adds	r3, r7, r0
20002714:	781b      	ldrb	r3, [r3, #0]
20002716:	00d2      	lsls	r2, r2, #3
20002718:	08d2      	lsrs	r2, r2, #3
2000271a:	4912      	ldr	r1, [pc, #72]	; (20002764 <setSessionId+0x128>)
2000271c:	2008      	movs	r0, #8
2000271e:	011b      	lsls	r3, r3, #4
20002720:	18cb      	adds	r3, r1, r3
20002722:	181b      	adds	r3, r3, r0
20002724:	00d2      	lsls	r2, r2, #3
20002726:	6819      	ldr	r1, [r3, #0]
20002728:	2007      	movs	r0, #7
2000272a:	4001      	ands	r1, r0
2000272c:	430a      	orrs	r2, r1
2000272e:	601a      	str	r2, [r3, #0]

            CANactivateFilterHandler(index);
20002730:	0020      	movs	r0, r4
20002732:	183b      	adds	r3, r7, r0
20002734:	781b      	ldrb	r3, [r3, #0]
20002736:	0018      	movs	r0, r3
20002738:	f7ff fdd2 	bl	200022e0 <CANactivateFilterHandler>
    for (uint8_t index = 0; index < HANDLERLISTSIZE; index++){
2000273c:	210f      	movs	r1, #15
2000273e:	187b      	adds	r3, r7, r1
20002740:	781a      	ldrb	r2, [r3, #0]
20002742:	187b      	adds	r3, r7, r1
20002744:	3201      	adds	r2, #1
20002746:	701a      	strb	r2, [r3, #0]
20002748:	230f      	movs	r3, #15
2000274a:	18fb      	adds	r3, r7, r3
2000274c:	781b      	ldrb	r3, [r3, #0]
2000274e:	2b0d      	cmp	r3, #13
20002750:	d986      	bls.n	20002660 <setSessionId+0x24>
        }
    }
}
20002752:	46c0      	nop			; (mov r8, r8)
20002754:	46bd      	mov	sp, r7
20002756:	b004      	add	sp, #16
20002758:	bdb0      	pop	{r4, r5, r7, pc}
2000275a:	46c0      	nop			; (mov r8, r8)
2000275c:	20003ef0 	strdcs	r3, [r0], -r0
20002760:	20003e0c 	andcs	r3, r0, ip, lsl #28
20002764:	20003e10 	andcs	r3, r0, r0, lsl lr
20002768:	fffc00ff 			; <UNDEFINED> instruction: 0xfffc00ff
2000276c:	0003ff00 	andeq	pc, r3, r0, lsl #30

20002770 <noSessionId>:

//Avaktiverar session ID för aktiva filter och kommande filter
void noSessionId(void){
20002770:	b580      	push	{r7, lr}
20002772:	b082      	sub	sp, #8
20002774:	af00      	add	r7, sp, #0
    SessionIDActive = SESSIONIDINACTIVE;
20002776:	4b21      	ldr	r3, [pc, #132]	; (200027fc <noSessionId+0x8c>)
20002778:	2200      	movs	r2, #0
2000277a:	701a      	strb	r2, [r3, #0]

    for (uint8_t index = 0; index < HANDLERLISTSIZE; index++){
2000277c:	1dfb      	adds	r3, r7, #7
2000277e:	2200      	movs	r2, #0
20002780:	701a      	strb	r2, [r3, #0]
20002782:	e032      	b.n	200027ea <noSessionId+0x7a>
        //Avaktiverar filtering för sessionID på de aktiva filtren
        if(handlerList[index].state == ENABLE){
20002784:	1dfb      	adds	r3, r7, #7
20002786:	781b      	ldrb	r3, [r3, #0]
20002788:	4a1d      	ldr	r2, [pc, #116]	; (20002800 <noSessionId+0x90>)
2000278a:	011b      	lsls	r3, r3, #4
2000278c:	18d3      	adds	r3, r2, r3
2000278e:	330c      	adds	r3, #12
20002790:	781b      	ldrb	r3, [r3, #0]
20002792:	2b01      	cmp	r3, #1
20002794:	d124      	bne.n	200027e0 <noSessionId+0x70>
            //Används för omvandling
            Header header;

            UINT32toHEADER(handlerList[index].mask.ID, header);
20002796:	1dfb      	adds	r3, r7, #7
20002798:	781b      	ldrb	r3, [r3, #0]
2000279a:	4a19      	ldr	r2, [pc, #100]	; (20002800 <noSessionId+0x90>)
2000279c:	2108      	movs	r1, #8
2000279e:	011b      	lsls	r3, r3, #4
200027a0:	18d3      	adds	r3, r2, r3
200027a2:	185b      	adds	r3, r3, r1
200027a4:	681b      	ldr	r3, [r3, #0]
200027a6:	08da      	lsrs	r2, r3, #3
200027a8:	003b      	movs	r3, r7
200027aa:	601a      	str	r2, [r3, #0]
            header.sessionID  = 0;
200027ac:	683b      	ldr	r3, [r7, #0]
200027ae:	4a15      	ldr	r2, [pc, #84]	; (20002804 <noSessionId+0x94>)
200027b0:	4013      	ands	r3, r2
200027b2:	603b      	str	r3, [r7, #0]
            HEADERtoUINT32(header, handlerList[index].mask.ID);
200027b4:	003b      	movs	r3, r7
200027b6:	681a      	ldr	r2, [r3, #0]
200027b8:	1dfb      	adds	r3, r7, #7
200027ba:	781b      	ldrb	r3, [r3, #0]
200027bc:	00d2      	lsls	r2, r2, #3
200027be:	08d2      	lsrs	r2, r2, #3
200027c0:	490f      	ldr	r1, [pc, #60]	; (20002800 <noSessionId+0x90>)
200027c2:	2008      	movs	r0, #8
200027c4:	011b      	lsls	r3, r3, #4
200027c6:	18cb      	adds	r3, r1, r3
200027c8:	181b      	adds	r3, r3, r0
200027ca:	00d2      	lsls	r2, r2, #3
200027cc:	6819      	ldr	r1, [r3, #0]
200027ce:	2007      	movs	r0, #7
200027d0:	4001      	ands	r1, r0
200027d2:	430a      	orrs	r2, r1
200027d4:	601a      	str	r2, [r3, #0]
            CANactivateFilterHandler(index);
200027d6:	1dfb      	adds	r3, r7, #7
200027d8:	781b      	ldrb	r3, [r3, #0]
200027da:	0018      	movs	r0, r3
200027dc:	f7ff fd80 	bl	200022e0 <CANactivateFilterHandler>
    for (uint8_t index = 0; index < HANDLERLISTSIZE; index++){
200027e0:	1dfb      	adds	r3, r7, #7
200027e2:	781a      	ldrb	r2, [r3, #0]
200027e4:	1dfb      	adds	r3, r7, #7
200027e6:	3201      	adds	r2, #1
200027e8:	701a      	strb	r2, [r3, #0]
200027ea:	1dfb      	adds	r3, r7, #7
200027ec:	781b      	ldrb	r3, [r3, #0]
200027ee:	2b0d      	cmp	r3, #13
200027f0:	d9c8      	bls.n	20002784 <noSessionId+0x14>
        }
    }
}
200027f2:	46c0      	nop			; (mov r8, r8)
200027f4:	46bd      	mov	sp, r7
200027f6:	b002      	add	sp, #8
200027f8:	bd80      	pop	{r7, pc}
200027fa:	46c0      	nop			; (mov r8, r8)
200027fc:	20003ef0 	strdcs	r3, [r0], -r0
20002800:	20003e10 	andcs	r3, r0, r0, lsl lr
20002804:	fffc00ff 			; <UNDEFINED> instruction: 0xfffc00ff

20002808 <can_init>:

uint8_t can_init() {
20002808:	b5f0      	push	{r4, r5, r6, r7, lr}
2000280a:	b089      	sub	sp, #36	; 0x24
2000280c:	af00      	add	r7, sp, #0
	CAN_InitTypeDef CAN_InitStructure;
	NVIC_InitTypeDef NVIC_InitStructure;
	GPIO_InitTypeDef GPIO_InitStructure;

	RCC_APB1PeriphClockCmd(RCC_APB1Periph_CAN1, ENABLE);
2000280e:	2380      	movs	r3, #128	; 0x80
20002810:	049b      	lsls	r3, r3, #18
20002812:	2101      	movs	r1, #1
20002814:	0018      	movs	r0, r3
20002816:	f000 ff8d 	bl	20003734 <RCC_APB1PeriphClockCmd>
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);
2000281a:	2380      	movs	r3, #128	; 0x80
2000281c:	01db      	lsls	r3, r3, #7
2000281e:	2101      	movs	r1, #1
20002820:	0018      	movs	r0, r3
20002822:	f000 ffa7 	bl	20003774 <RCC_APB2PeriphClockCmd>
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE);
20002826:	2101      	movs	r1, #1
20002828:	2002      	movs	r0, #2
2000282a:	f000 ff23 	bl	20003674 <RCC_AHB1PeriphClockCmd>

	// Connect CAN pins to AF9. See more below
	GPIO_PinAFConfig(GPIOB, GPIO_PinSource9, GPIO_AF_CAN1);
2000282e:	4b61      	ldr	r3, [pc, #388]	; (200029b4 <can_init+0x1ac>)
20002830:	2209      	movs	r2, #9
20002832:	2109      	movs	r1, #9
20002834:	0018      	movs	r0, r3
20002836:	f000 fafa 	bl	20002e2e <GPIO_PinAFConfig>
    GPIO_PinAFConfig(GPIOB, GPIO_PinSource8, GPIO_AF_CAN1);  
2000283a:	4b5e      	ldr	r3, [pc, #376]	; (200029b4 <can_init+0x1ac>)
2000283c:	2209      	movs	r2, #9
2000283e:	2108      	movs	r1, #8
20002840:	0018      	movs	r0, r3
20002842:	f000 faf4 	bl	20002e2e <GPIO_PinAFConfig>
	// Configure CAN RX and TX pins
	// See page 41 of MD407 reference manual
	// Connect CAN1 pins to AF
    // PB9 - CAN1 TX
    // PB8 - CAN1 RX
    GPIO_PinAFConfig(GPIOB, GPIO_PinSource9, GPIO_AF_CAN1);  	
20002846:	4b5b      	ldr	r3, [pc, #364]	; (200029b4 <can_init+0x1ac>)
20002848:	2209      	movs	r2, #9
2000284a:	2109      	movs	r1, #9
2000284c:	0018      	movs	r0, r3
2000284e:	f000 faee 	bl	20002e2e <GPIO_PinAFConfig>
    GPIO_PinAFConfig(GPIOB, GPIO_PinSource8, GPIO_AF_CAN1);  
20002852:	4b58      	ldr	r3, [pc, #352]	; (200029b4 <can_init+0x1ac>)
20002854:	2209      	movs	r2, #9
20002856:	2108      	movs	r1, #8
20002858:	0018      	movs	r0, r3
2000285a:	f000 fae8 	bl	20002e2e <GPIO_PinAFConfig>

    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_9;
2000285e:	1d3b      	adds	r3, r7, #4
20002860:	2280      	movs	r2, #128	; 0x80
20002862:	0092      	lsls	r2, r2, #2
20002864:	601a      	str	r2, [r3, #0]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
20002866:	1d3b      	adds	r3, r7, #4
20002868:	2202      	movs	r2, #2
2000286a:	711a      	strb	r2, [r3, #4]
    GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
2000286c:	1d3b      	adds	r3, r7, #4
2000286e:	2200      	movs	r2, #0
20002870:	719a      	strb	r2, [r3, #6]
    GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
20002872:	1d3b      	adds	r3, r7, #4
20002874:	2200      	movs	r2, #0
20002876:	71da      	strb	r2, [r3, #7]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
20002878:	1d3b      	adds	r3, r7, #4
2000287a:	2202      	movs	r2, #2
2000287c:	715a      	strb	r2, [r3, #5]
    GPIO_Init(GPIOB, &GPIO_InitStructure);	
2000287e:	1d3b      	adds	r3, r7, #4
20002880:	4a4c      	ldr	r2, [pc, #304]	; (200029b4 <can_init+0x1ac>)
20002882:	0019      	movs	r1, r3
20002884:	0010      	movs	r0, r2
20002886:	f000 f955 	bl	20002b34 <GPIO_Init>

    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_8;	
2000288a:	1d3b      	adds	r3, r7, #4
2000288c:	2280      	movs	r2, #128	; 0x80
2000288e:	0052      	lsls	r2, r2, #1
20002890:	601a      	str	r2, [r3, #0]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
20002892:	1d3b      	adds	r3, r7, #4
20002894:	2202      	movs	r2, #2
20002896:	711a      	strb	r2, [r3, #4]
    GPIO_InitStructure.GPIO_OType = GPIO_Mode_IN;
20002898:	1d3b      	adds	r3, r7, #4
2000289a:	2200      	movs	r2, #0
2000289c:	719a      	strb	r2, [r3, #6]
    GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;	
2000289e:	1d3b      	adds	r3, r7, #4
200028a0:	2201      	movs	r2, #1
200028a2:	71da      	strb	r2, [r3, #7]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
200028a4:	1d3b      	adds	r3, r7, #4
200028a6:	2202      	movs	r2, #2
200028a8:	715a      	strb	r2, [r3, #5]
    GPIO_Init(GPIOB, &GPIO_InitStructure);
200028aa:	1d3b      	adds	r3, r7, #4
200028ac:	4a41      	ldr	r2, [pc, #260]	; (200029b4 <can_init+0x1ac>)
200028ae:	0019      	movs	r1, r3
200028b0:	0010      	movs	r0, r2
200028b2:	f000 f93f 	bl	20002b34 <GPIO_Init>
    
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_6;
200028b6:	1d3b      	adds	r3, r7, #4
200028b8:	2240      	movs	r2, #64	; 0x40
200028ba:	601a      	str	r2, [r3, #0]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
200028bc:	1d3b      	adds	r3, r7, #4
200028be:	2202      	movs	r2, #2
200028c0:	711a      	strb	r2, [r3, #4]
    GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
200028c2:	1d3b      	adds	r3, r7, #4
200028c4:	2200      	movs	r2, #0
200028c6:	719a      	strb	r2, [r3, #6]
    GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
200028c8:	1d3b      	adds	r3, r7, #4
200028ca:	2200      	movs	r2, #0
200028cc:	71da      	strb	r2, [r3, #7]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
200028ce:	1d3b      	adds	r3, r7, #4
200028d0:	2202      	movs	r2, #2
200028d2:	715a      	strb	r2, [r3, #5]
    GPIO_Init(GPIOB, &GPIO_InitStructure);	
200028d4:	1d3b      	adds	r3, r7, #4
200028d6:	4a37      	ldr	r2, [pc, #220]	; (200029b4 <can_init+0x1ac>)
200028d8:	0019      	movs	r1, r3
200028da:	0010      	movs	r0, r2
200028dc:	f000 f92a 	bl	20002b34 <GPIO_Init>

    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_5;	
200028e0:	1d3b      	adds	r3, r7, #4
200028e2:	2220      	movs	r2, #32
200028e4:	601a      	str	r2, [r3, #0]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
200028e6:	1d3b      	adds	r3, r7, #4
200028e8:	2202      	movs	r2, #2
200028ea:	711a      	strb	r2, [r3, #4]
    GPIO_InitStructure.GPIO_OType = GPIO_Mode_IN;
200028ec:	1d3b      	adds	r3, r7, #4
200028ee:	2200      	movs	r2, #0
200028f0:	719a      	strb	r2, [r3, #6]
    GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;	
200028f2:	1d3b      	adds	r3, r7, #4
200028f4:	2201      	movs	r2, #1
200028f6:	71da      	strb	r2, [r3, #7]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
200028f8:	1d3b      	adds	r3, r7, #4
200028fa:	2202      	movs	r2, #2
200028fc:	715a      	strb	r2, [r3, #5]
    GPIO_Init(GPIOB, &GPIO_InitStructure);
200028fe:	1d3b      	adds	r3, r7, #4
20002900:	4a2c      	ldr	r2, [pc, #176]	; (200029b4 <can_init+0x1ac>)
20002902:	0019      	movs	r1, r3
20002904:	0010      	movs	r0, r2
20002906:	f000 f915 	bl	20002b34 <GPIO_Init>
	
	NVIC_InitStructure.NVIC_IRQChannel = CAN1_RX0_IRQn;
2000290a:	210c      	movs	r1, #12
2000290c:	187b      	adds	r3, r7, r1
2000290e:	2214      	movs	r2, #20
20002910:	701a      	strb	r2, [r3, #0]
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = __CAN_IRQ_PRIORITY;
20002912:	187b      	adds	r3, r7, r1
20002914:	2202      	movs	r2, #2
20002916:	705a      	strb	r2, [r3, #1]
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0x2;
20002918:	187b      	adds	r3, r7, r1
2000291a:	2202      	movs	r2, #2
2000291c:	709a      	strb	r2, [r3, #2]
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
2000291e:	187b      	adds	r3, r7, r1
20002920:	2201      	movs	r2, #1
20002922:	70da      	strb	r2, [r3, #3]
	NVIC_Init(&NVIC_InitStructure);
20002924:	187b      	adds	r3, r7, r1
20002926:	0018      	movs	r0, r3
20002928:	f7fe f88a 	bl	20000a40 <NVIC_Init>

	/* CAN register init */
	CAN_DeInit(CAN1);
2000292c:	4b22      	ldr	r3, [pc, #136]	; (200029b8 <can_init+0x1b0>)
2000292e:	0018      	movs	r0, r3
20002930:	f7fe fb9a 	bl	20001068 <CAN_DeInit>

	/* CAN cell init */
	CAN_InitStructure.CAN_TTCM = DISABLE; // time-triggered communication mode = DISABLED
20002934:	2510      	movs	r5, #16
20002936:	197b      	adds	r3, r7, r5
20002938:	2200      	movs	r2, #0
2000293a:	719a      	strb	r2, [r3, #6]
    CAN_InitStructure.CAN_ABOM = DISABLE; // automatic bus-off management mode = DISABLED
2000293c:	197b      	adds	r3, r7, r5
2000293e:	2200      	movs	r2, #0
20002940:	71da      	strb	r2, [r3, #7]
    CAN_InitStructure.CAN_AWUM = DISABLE; // automatic wake-up mode = DISABLED
20002942:	197b      	adds	r3, r7, r5
20002944:	2200      	movs	r2, #0
20002946:	721a      	strb	r2, [r3, #8]
    CAN_InitStructure.CAN_NART = DISABLE; // non-automatic retransmission mode = DISABLED
20002948:	197b      	adds	r3, r7, r5
2000294a:	2200      	movs	r2, #0
2000294c:	725a      	strb	r2, [r3, #9]
    CAN_InitStructure.CAN_RFLM = DISABLE; // receive FIFO locked mode = DISABLED
2000294e:	197b      	adds	r3, r7, r5
20002950:	2200      	movs	r2, #0
20002952:	729a      	strb	r2, [r3, #10]
    CAN_InitStructure.CAN_TXFP = DISABLE; // transmit FIFO priority = DISABLED
20002954:	197b      	adds	r3, r7, r5
20002956:	2200      	movs	r2, #0
20002958:	72da      	strb	r2, [r3, #11]
    CAN_InitStructure.CAN_Mode = CAN_Mode_Normal; // normal CAN mode
2000295a:	197b      	adds	r3, r7, r5
2000295c:	2200      	movs	r2, #0
2000295e:	709a      	strb	r2, [r3, #2]

	/* CAN Baudrate = 1 MBps (CAN clocked at 30 MHz) */
	CAN_InitStructure.CAN_BS1 = CAN_BS1_3tq;
20002960:	197b      	adds	r3, r7, r5
20002962:	2202      	movs	r2, #2
20002964:	711a      	strb	r2, [r3, #4]
	CAN_InitStructure.CAN_BS2 = CAN_BS2_4tq;
20002966:	197b      	adds	r3, r7, r5
20002968:	2203      	movs	r2, #3
2000296a:	715a      	strb	r2, [r3, #5]
	CAN_InitStructure.CAN_Prescaler = 7;
2000296c:	197b      	adds	r3, r7, r5
2000296e:	2207      	movs	r2, #7
20002970:	801a      	strh	r2, [r3, #0]

    //Avaktiverar alla filter
    CANdisableAllFilterHandlers();
20002972:	f7ff fdbf 	bl	200024f4 <CANdisableAllFilterHandlers>

	uint8_t can_init_status = CAN_Init(CAN1, &CAN_InitStructure);
20002976:	261f      	movs	r6, #31
20002978:	19bc      	adds	r4, r7, r6
2000297a:	197b      	adds	r3, r7, r5
2000297c:	4a0e      	ldr	r2, [pc, #56]	; (200029b8 <can_init+0x1b0>)
2000297e:	0019      	movs	r1, r3
20002980:	0010      	movs	r0, r2
20002982:	f7fe fb99 	bl	200010b8 <CAN_Init>
20002986:	0003      	movs	r3, r0
20002988:	7023      	strb	r3, [r4, #0]

	*((void (**)(void) ) CAN1_IRQ_VECTOR ) = can_irq_handler;
2000298a:	4b0c      	ldr	r3, [pc, #48]	; (200029bc <can_init+0x1b4>)
2000298c:	4a0c      	ldr	r2, [pc, #48]	; (200029c0 <can_init+0x1b8>)
2000298e:	601a      	str	r2, [r3, #0]
	// We need the following function because it's not equivalent to what NVIC_Init does with respect
	// to IRQ priority. Which seems bananas to me...
    NVIC_SetPriority( CAN1_RX0_IRQn, __CAN_IRQ_PRIORITY);
20002990:	2102      	movs	r1, #2
20002992:	2014      	movs	r0, #20
20002994:	f7ff fc52 	bl	2000223c <NVIC_SetPriority>
	CAN_ITConfig(CAN1, CAN_IT_FMP0, ENABLE);
20002998:	4b07      	ldr	r3, [pc, #28]	; (200029b8 <can_init+0x1b0>)
2000299a:	2201      	movs	r2, #1
2000299c:	2102      	movs	r1, #2
2000299e:	0018      	movs	r0, r3
200029a0:	f7ff f9f3 	bl	20001d8a <CAN_ITConfig>

    //Avaktiverar Session ID
    noSessionId();
200029a4:	f7ff fee4 	bl	20002770 <noSessionId>

	return can_init_status;
200029a8:	19bb      	adds	r3, r7, r6
200029aa:	781b      	ldrb	r3, [r3, #0]
200029ac:	0018      	movs	r0, r3
200029ae:	46bd      	mov	sp, r7
200029b0:	b009      	add	sp, #36	; 0x24
200029b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
200029b4:	40020400 	andmi	r0, r2, r0, lsl #8
200029b8:	40006400 	andmi	r6, r0, r0, lsl #8
200029bc:	2001c090 	mulcs	r1, r0, r0
200029c0:	200025d1 	ldrdcs	r2, [r0], -r1

200029c4 <GPIO_DeInit>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F42xxx/43xxx devices.
  *                      x can be (A, B, C, D and H) to select the GPIO peripheral for STM32F401xx devices.  
  * @retval None
  */
void GPIO_DeInit(GPIO_TypeDef* GPIOx)
{
200029c4:	b580      	push	{r7, lr}
200029c6:	b082      	sub	sp, #8
200029c8:	af00      	add	r7, sp, #0
200029ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  if (GPIOx == GPIOA)
200029cc:	687b      	ldr	r3, [r7, #4]
200029ce:	4a4e      	ldr	r2, [pc, #312]	; (20002b08 <GPIO_DeInit+0x144>)
200029d0:	4293      	cmp	r3, r2
200029d2:	d108      	bne.n	200029e6 <GPIO_DeInit+0x22>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, ENABLE);
200029d4:	2101      	movs	r1, #1
200029d6:	2001      	movs	r0, #1
200029d8:	f000 feec 	bl	200037b4 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, DISABLE);
200029dc:	2100      	movs	r1, #0
200029de:	2001      	movs	r0, #1
200029e0:	f000 fee8 	bl	200037b4 <RCC_AHB1PeriphResetCmd>
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, ENABLE);
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, DISABLE);
    }
  }
}
200029e4:	e08c      	b.n	20002b00 <GPIO_DeInit+0x13c>
  else if (GPIOx == GPIOB)
200029e6:	687b      	ldr	r3, [r7, #4]
200029e8:	4a48      	ldr	r2, [pc, #288]	; (20002b0c <GPIO_DeInit+0x148>)
200029ea:	4293      	cmp	r3, r2
200029ec:	d108      	bne.n	20002a00 <GPIO_DeInit+0x3c>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, ENABLE);
200029ee:	2101      	movs	r1, #1
200029f0:	2002      	movs	r0, #2
200029f2:	f000 fedf 	bl	200037b4 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, DISABLE);
200029f6:	2100      	movs	r1, #0
200029f8:	2002      	movs	r0, #2
200029fa:	f000 fedb 	bl	200037b4 <RCC_AHB1PeriphResetCmd>
}
200029fe:	e07f      	b.n	20002b00 <GPIO_DeInit+0x13c>
  else if (GPIOx == GPIOC)
20002a00:	687b      	ldr	r3, [r7, #4]
20002a02:	4a43      	ldr	r2, [pc, #268]	; (20002b10 <GPIO_DeInit+0x14c>)
20002a04:	4293      	cmp	r3, r2
20002a06:	d108      	bne.n	20002a1a <GPIO_DeInit+0x56>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, ENABLE);
20002a08:	2101      	movs	r1, #1
20002a0a:	2004      	movs	r0, #4
20002a0c:	f000 fed2 	bl	200037b4 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, DISABLE);
20002a10:	2100      	movs	r1, #0
20002a12:	2004      	movs	r0, #4
20002a14:	f000 fece 	bl	200037b4 <RCC_AHB1PeriphResetCmd>
}
20002a18:	e072      	b.n	20002b00 <GPIO_DeInit+0x13c>
  else if (GPIOx == GPIOD)
20002a1a:	687b      	ldr	r3, [r7, #4]
20002a1c:	4a3d      	ldr	r2, [pc, #244]	; (20002b14 <GPIO_DeInit+0x150>)
20002a1e:	4293      	cmp	r3, r2
20002a20:	d108      	bne.n	20002a34 <GPIO_DeInit+0x70>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, ENABLE);
20002a22:	2101      	movs	r1, #1
20002a24:	2008      	movs	r0, #8
20002a26:	f000 fec5 	bl	200037b4 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, DISABLE);
20002a2a:	2100      	movs	r1, #0
20002a2c:	2008      	movs	r0, #8
20002a2e:	f000 fec1 	bl	200037b4 <RCC_AHB1PeriphResetCmd>
}
20002a32:	e065      	b.n	20002b00 <GPIO_DeInit+0x13c>
  else if (GPIOx == GPIOE)
20002a34:	687b      	ldr	r3, [r7, #4]
20002a36:	4a38      	ldr	r2, [pc, #224]	; (20002b18 <GPIO_DeInit+0x154>)
20002a38:	4293      	cmp	r3, r2
20002a3a:	d108      	bne.n	20002a4e <GPIO_DeInit+0x8a>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, ENABLE);
20002a3c:	2101      	movs	r1, #1
20002a3e:	2010      	movs	r0, #16
20002a40:	f000 feb8 	bl	200037b4 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, DISABLE);
20002a44:	2100      	movs	r1, #0
20002a46:	2010      	movs	r0, #16
20002a48:	f000 feb4 	bl	200037b4 <RCC_AHB1PeriphResetCmd>
}
20002a4c:	e058      	b.n	20002b00 <GPIO_DeInit+0x13c>
  else if (GPIOx == GPIOF)
20002a4e:	687b      	ldr	r3, [r7, #4]
20002a50:	4a32      	ldr	r2, [pc, #200]	; (20002b1c <GPIO_DeInit+0x158>)
20002a52:	4293      	cmp	r3, r2
20002a54:	d108      	bne.n	20002a68 <GPIO_DeInit+0xa4>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, ENABLE);
20002a56:	2101      	movs	r1, #1
20002a58:	2020      	movs	r0, #32
20002a5a:	f000 feab 	bl	200037b4 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, DISABLE);
20002a5e:	2100      	movs	r1, #0
20002a60:	2020      	movs	r0, #32
20002a62:	f000 fea7 	bl	200037b4 <RCC_AHB1PeriphResetCmd>
}
20002a66:	e04b      	b.n	20002b00 <GPIO_DeInit+0x13c>
  else if (GPIOx == GPIOG)
20002a68:	687b      	ldr	r3, [r7, #4]
20002a6a:	4a2d      	ldr	r2, [pc, #180]	; (20002b20 <GPIO_DeInit+0x15c>)
20002a6c:	4293      	cmp	r3, r2
20002a6e:	d108      	bne.n	20002a82 <GPIO_DeInit+0xbe>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, ENABLE);
20002a70:	2101      	movs	r1, #1
20002a72:	2040      	movs	r0, #64	; 0x40
20002a74:	f000 fe9e 	bl	200037b4 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, DISABLE);
20002a78:	2100      	movs	r1, #0
20002a7a:	2040      	movs	r0, #64	; 0x40
20002a7c:	f000 fe9a 	bl	200037b4 <RCC_AHB1PeriphResetCmd>
}
20002a80:	e03e      	b.n	20002b00 <GPIO_DeInit+0x13c>
  else if (GPIOx == GPIOH)
20002a82:	687b      	ldr	r3, [r7, #4]
20002a84:	4a27      	ldr	r2, [pc, #156]	; (20002b24 <GPIO_DeInit+0x160>)
20002a86:	4293      	cmp	r3, r2
20002a88:	d108      	bne.n	20002a9c <GPIO_DeInit+0xd8>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOH, ENABLE);
20002a8a:	2101      	movs	r1, #1
20002a8c:	2080      	movs	r0, #128	; 0x80
20002a8e:	f000 fe91 	bl	200037b4 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOH, DISABLE);
20002a92:	2100      	movs	r1, #0
20002a94:	2080      	movs	r0, #128	; 0x80
20002a96:	f000 fe8d 	bl	200037b4 <RCC_AHB1PeriphResetCmd>
}
20002a9a:	e031      	b.n	20002b00 <GPIO_DeInit+0x13c>
  else if (GPIOx == GPIOI)
20002a9c:	687b      	ldr	r3, [r7, #4]
20002a9e:	4a22      	ldr	r2, [pc, #136]	; (20002b28 <GPIO_DeInit+0x164>)
20002aa0:	4293      	cmp	r3, r2
20002aa2:	d10c      	bne.n	20002abe <GPIO_DeInit+0xfa>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, ENABLE);
20002aa4:	2380      	movs	r3, #128	; 0x80
20002aa6:	005b      	lsls	r3, r3, #1
20002aa8:	2101      	movs	r1, #1
20002aaa:	0018      	movs	r0, r3
20002aac:	f000 fe82 	bl	200037b4 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, DISABLE);
20002ab0:	2380      	movs	r3, #128	; 0x80
20002ab2:	005b      	lsls	r3, r3, #1
20002ab4:	2100      	movs	r1, #0
20002ab6:	0018      	movs	r0, r3
20002ab8:	f000 fe7c 	bl	200037b4 <RCC_AHB1PeriphResetCmd>
}
20002abc:	e020      	b.n	20002b00 <GPIO_DeInit+0x13c>
  else if (GPIOx == GPIOJ)
20002abe:	687b      	ldr	r3, [r7, #4]
20002ac0:	4a1a      	ldr	r2, [pc, #104]	; (20002b2c <GPIO_DeInit+0x168>)
20002ac2:	4293      	cmp	r3, r2
20002ac4:	d10c      	bne.n	20002ae0 <GPIO_DeInit+0x11c>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOJ, ENABLE);
20002ac6:	2380      	movs	r3, #128	; 0x80
20002ac8:	009b      	lsls	r3, r3, #2
20002aca:	2101      	movs	r1, #1
20002acc:	0018      	movs	r0, r3
20002ace:	f000 fe71 	bl	200037b4 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOJ, DISABLE);
20002ad2:	2380      	movs	r3, #128	; 0x80
20002ad4:	009b      	lsls	r3, r3, #2
20002ad6:	2100      	movs	r1, #0
20002ad8:	0018      	movs	r0, r3
20002ada:	f000 fe6b 	bl	200037b4 <RCC_AHB1PeriphResetCmd>
}
20002ade:	e00f      	b.n	20002b00 <GPIO_DeInit+0x13c>
    if (GPIOx == GPIOK)
20002ae0:	687b      	ldr	r3, [r7, #4]
20002ae2:	4a13      	ldr	r2, [pc, #76]	; (20002b30 <GPIO_DeInit+0x16c>)
20002ae4:	4293      	cmp	r3, r2
20002ae6:	d10b      	bne.n	20002b00 <GPIO_DeInit+0x13c>
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, ENABLE);
20002ae8:	2380      	movs	r3, #128	; 0x80
20002aea:	00db      	lsls	r3, r3, #3
20002aec:	2101      	movs	r1, #1
20002aee:	0018      	movs	r0, r3
20002af0:	f000 fe60 	bl	200037b4 <RCC_AHB1PeriphResetCmd>
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, DISABLE);
20002af4:	2380      	movs	r3, #128	; 0x80
20002af6:	00db      	lsls	r3, r3, #3
20002af8:	2100      	movs	r1, #0
20002afa:	0018      	movs	r0, r3
20002afc:	f000 fe5a 	bl	200037b4 <RCC_AHB1PeriphResetCmd>
}
20002b00:	46c0      	nop			; (mov r8, r8)
20002b02:	46bd      	mov	sp, r7
20002b04:	b002      	add	sp, #8
20002b06:	bd80      	pop	{r7, pc}
20002b08:	40020000 	andmi	r0, r2, r0
20002b0c:	40020400 	andmi	r0, r2, r0, lsl #8
20002b10:	40020800 	andmi	r0, r2, r0, lsl #16
20002b14:	40020c00 	andmi	r0, r2, r0, lsl #24
20002b18:	40021000 	andmi	r1, r2, r0
20002b1c:	40021400 	andmi	r1, r2, r0, lsl #8
20002b20:	40021800 	andmi	r1, r2, r0, lsl #16
20002b24:	40021c00 	andmi	r1, r2, r0, lsl #24
20002b28:	40022000 	andmi	r2, r2, r0
20002b2c:	40022400 	andmi	r2, r2, r0, lsl #8
20002b30:	40022800 	andmi	r2, r2, r0, lsl #16

20002b34 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
20002b34:	b580      	push	{r7, lr}
20002b36:	b086      	sub	sp, #24
20002b38:	af00      	add	r7, sp, #0
20002b3a:	6078      	str	r0, [r7, #4]
20002b3c:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
20002b3e:	2300      	movs	r3, #0
20002b40:	617b      	str	r3, [r7, #20]
20002b42:	2300      	movs	r3, #0
20002b44:	613b      	str	r3, [r7, #16]
20002b46:	2300      	movs	r3, #0
20002b48:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
20002b4a:	2300      	movs	r3, #0
20002b4c:	617b      	str	r3, [r7, #20]
20002b4e:	e076      	b.n	20002c3e <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
20002b50:	2201      	movs	r2, #1
20002b52:	697b      	ldr	r3, [r7, #20]
20002b54:	409a      	lsls	r2, r3
20002b56:	0013      	movs	r3, r2
20002b58:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
20002b5a:	683b      	ldr	r3, [r7, #0]
20002b5c:	681a      	ldr	r2, [r3, #0]
20002b5e:	693b      	ldr	r3, [r7, #16]
20002b60:	4013      	ands	r3, r2
20002b62:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
20002b64:	68fa      	ldr	r2, [r7, #12]
20002b66:	693b      	ldr	r3, [r7, #16]
20002b68:	429a      	cmp	r2, r3
20002b6a:	d165      	bne.n	20002c38 <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
20002b6c:	687b      	ldr	r3, [r7, #4]
20002b6e:	681b      	ldr	r3, [r3, #0]
20002b70:	697a      	ldr	r2, [r7, #20]
20002b72:	0052      	lsls	r2, r2, #1
20002b74:	2103      	movs	r1, #3
20002b76:	4091      	lsls	r1, r2
20002b78:	000a      	movs	r2, r1
20002b7a:	43d2      	mvns	r2, r2
20002b7c:	401a      	ands	r2, r3
20002b7e:	687b      	ldr	r3, [r7, #4]
20002b80:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
20002b82:	687b      	ldr	r3, [r7, #4]
20002b84:	681a      	ldr	r2, [r3, #0]
20002b86:	683b      	ldr	r3, [r7, #0]
20002b88:	791b      	ldrb	r3, [r3, #4]
20002b8a:	0019      	movs	r1, r3
20002b8c:	697b      	ldr	r3, [r7, #20]
20002b8e:	005b      	lsls	r3, r3, #1
20002b90:	4099      	lsls	r1, r3
20002b92:	000b      	movs	r3, r1
20002b94:	431a      	orrs	r2, r3
20002b96:	687b      	ldr	r3, [r7, #4]
20002b98:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
20002b9a:	683b      	ldr	r3, [r7, #0]
20002b9c:	791b      	ldrb	r3, [r3, #4]
20002b9e:	2b01      	cmp	r3, #1
20002ba0:	d003      	beq.n	20002baa <GPIO_Init+0x76>
20002ba2:	683b      	ldr	r3, [r7, #0]
20002ba4:	791b      	ldrb	r3, [r3, #4]
20002ba6:	2b02      	cmp	r3, #2
20002ba8:	d12e      	bne.n	20002c08 <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
20002baa:	687b      	ldr	r3, [r7, #4]
20002bac:	689b      	ldr	r3, [r3, #8]
20002bae:	697a      	ldr	r2, [r7, #20]
20002bb0:	0052      	lsls	r2, r2, #1
20002bb2:	2103      	movs	r1, #3
20002bb4:	4091      	lsls	r1, r2
20002bb6:	000a      	movs	r2, r1
20002bb8:	43d2      	mvns	r2, r2
20002bba:	401a      	ands	r2, r3
20002bbc:	687b      	ldr	r3, [r7, #4]
20002bbe:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
20002bc0:	687b      	ldr	r3, [r7, #4]
20002bc2:	689a      	ldr	r2, [r3, #8]
20002bc4:	683b      	ldr	r3, [r7, #0]
20002bc6:	795b      	ldrb	r3, [r3, #5]
20002bc8:	0019      	movs	r1, r3
20002bca:	697b      	ldr	r3, [r7, #20]
20002bcc:	005b      	lsls	r3, r3, #1
20002bce:	4099      	lsls	r1, r3
20002bd0:	000b      	movs	r3, r1
20002bd2:	431a      	orrs	r2, r3
20002bd4:	687b      	ldr	r3, [r7, #4]
20002bd6:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
20002bd8:	687b      	ldr	r3, [r7, #4]
20002bda:	685b      	ldr	r3, [r3, #4]
20002bdc:	697a      	ldr	r2, [r7, #20]
20002bde:	b292      	uxth	r2, r2
20002be0:	0011      	movs	r1, r2
20002be2:	2201      	movs	r2, #1
20002be4:	408a      	lsls	r2, r1
20002be6:	43d2      	mvns	r2, r2
20002be8:	401a      	ands	r2, r3
20002bea:	687b      	ldr	r3, [r7, #4]
20002bec:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
20002bee:	687b      	ldr	r3, [r7, #4]
20002bf0:	685b      	ldr	r3, [r3, #4]
20002bf2:	683a      	ldr	r2, [r7, #0]
20002bf4:	7992      	ldrb	r2, [r2, #6]
20002bf6:	0011      	movs	r1, r2
20002bf8:	697a      	ldr	r2, [r7, #20]
20002bfa:	b292      	uxth	r2, r2
20002bfc:	4091      	lsls	r1, r2
20002bfe:	000a      	movs	r2, r1
20002c00:	b292      	uxth	r2, r2
20002c02:	431a      	orrs	r2, r3
20002c04:	687b      	ldr	r3, [r7, #4]
20002c06:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
20002c08:	687b      	ldr	r3, [r7, #4]
20002c0a:	68db      	ldr	r3, [r3, #12]
20002c0c:	697a      	ldr	r2, [r7, #20]
20002c0e:	b292      	uxth	r2, r2
20002c10:	0052      	lsls	r2, r2, #1
20002c12:	2103      	movs	r1, #3
20002c14:	4091      	lsls	r1, r2
20002c16:	000a      	movs	r2, r1
20002c18:	43d2      	mvns	r2, r2
20002c1a:	401a      	ands	r2, r3
20002c1c:	687b      	ldr	r3, [r7, #4]
20002c1e:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
20002c20:	687b      	ldr	r3, [r7, #4]
20002c22:	68da      	ldr	r2, [r3, #12]
20002c24:	683b      	ldr	r3, [r7, #0]
20002c26:	79db      	ldrb	r3, [r3, #7]
20002c28:	0019      	movs	r1, r3
20002c2a:	697b      	ldr	r3, [r7, #20]
20002c2c:	005b      	lsls	r3, r3, #1
20002c2e:	4099      	lsls	r1, r3
20002c30:	000b      	movs	r3, r1
20002c32:	431a      	orrs	r2, r3
20002c34:	687b      	ldr	r3, [r7, #4]
20002c36:	60da      	str	r2, [r3, #12]
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
20002c38:	697b      	ldr	r3, [r7, #20]
20002c3a:	3301      	adds	r3, #1
20002c3c:	617b      	str	r3, [r7, #20]
20002c3e:	697b      	ldr	r3, [r7, #20]
20002c40:	2b0f      	cmp	r3, #15
20002c42:	d985      	bls.n	20002b50 <GPIO_Init+0x1c>
    }
  }
}
20002c44:	46c0      	nop			; (mov r8, r8)
20002c46:	46bd      	mov	sp, r7
20002c48:	b006      	add	sp, #24
20002c4a:	bd80      	pop	{r7, pc}

20002c4c <GPIO_StructInit>:
  * @brief  Fills each GPIO_InitStruct member with its default value.
  * @param  GPIO_InitStruct : pointer to a GPIO_InitTypeDef structure which will be initialized.
  * @retval None
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
20002c4c:	b580      	push	{r7, lr}
20002c4e:	b082      	sub	sp, #8
20002c50:	af00      	add	r7, sp, #0
20002c52:	6078      	str	r0, [r7, #4]
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
20002c54:	687b      	ldr	r3, [r7, #4]
20002c56:	4a09      	ldr	r2, [pc, #36]	; (20002c7c <GPIO_StructInit+0x30>)
20002c58:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN;
20002c5a:	687b      	ldr	r3, [r7, #4]
20002c5c:	2200      	movs	r2, #0
20002c5e:	711a      	strb	r2, [r3, #4]
  GPIO_InitStruct->GPIO_Speed = GPIO_Speed_2MHz;
20002c60:	687b      	ldr	r3, [r7, #4]
20002c62:	2200      	movs	r2, #0
20002c64:	715a      	strb	r2, [r3, #5]
  GPIO_InitStruct->GPIO_OType = GPIO_OType_PP;
20002c66:	687b      	ldr	r3, [r7, #4]
20002c68:	2200      	movs	r2, #0
20002c6a:	719a      	strb	r2, [r3, #6]
  GPIO_InitStruct->GPIO_PuPd = GPIO_PuPd_NOPULL;
20002c6c:	687b      	ldr	r3, [r7, #4]
20002c6e:	2200      	movs	r2, #0
20002c70:	71da      	strb	r2, [r3, #7]
}
20002c72:	46c0      	nop			; (mov r8, r8)
20002c74:	46bd      	mov	sp, r7
20002c76:	b002      	add	sp, #8
20002c78:	bd80      	pop	{r7, pc}
20002c7a:	46c0      	nop			; (mov r8, r8)
20002c7c:	0000ffff 	strdeq	pc, [r0], -pc	; <UNPREDICTABLE>

20002c80 <GPIO_PinLockConfig>:
  * @param  GPIO_Pin: specifies the port bit to be locked.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_PinLockConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
20002c80:	b580      	push	{r7, lr}
20002c82:	b084      	sub	sp, #16
20002c84:	af00      	add	r7, sp, #0
20002c86:	6078      	str	r0, [r7, #4]
20002c88:	000a      	movs	r2, r1
20002c8a:	1cbb      	adds	r3, r7, #2
20002c8c:	801a      	strh	r2, [r3, #0]
  __IO uint32_t tmp = 0x00010000;
20002c8e:	2380      	movs	r3, #128	; 0x80
20002c90:	025b      	lsls	r3, r3, #9
20002c92:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  tmp |= GPIO_Pin;
20002c94:	1cbb      	adds	r3, r7, #2
20002c96:	881a      	ldrh	r2, [r3, #0]
20002c98:	68fb      	ldr	r3, [r7, #12]
20002c9a:	4313      	orrs	r3, r2
20002c9c:	60fb      	str	r3, [r7, #12]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
20002c9e:	68fa      	ldr	r2, [r7, #12]
20002ca0:	687b      	ldr	r3, [r7, #4]
20002ca2:	61da      	str	r2, [r3, #28]
  /* Reset LCKK bit */
  GPIOx->LCKR =  GPIO_Pin;
20002ca4:	1cbb      	adds	r3, r7, #2
20002ca6:	881a      	ldrh	r2, [r3, #0]
20002ca8:	687b      	ldr	r3, [r7, #4]
20002caa:	61da      	str	r2, [r3, #28]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
20002cac:	68fa      	ldr	r2, [r7, #12]
20002cae:	687b      	ldr	r3, [r7, #4]
20002cb0:	61da      	str	r2, [r3, #28]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
20002cb2:	687b      	ldr	r3, [r7, #4]
20002cb4:	69db      	ldr	r3, [r3, #28]
20002cb6:	60fb      	str	r3, [r7, #12]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
20002cb8:	687b      	ldr	r3, [r7, #4]
20002cba:	69db      	ldr	r3, [r3, #28]
20002cbc:	60fb      	str	r3, [r7, #12]
}
20002cbe:	46c0      	nop			; (mov r8, r8)
20002cc0:	46bd      	mov	sp, r7
20002cc2:	b004      	add	sp, #16
20002cc4:	bd80      	pop	{r7, pc}

20002cc6 <GPIO_ReadInputDataBit>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
uint8_t GPIO_ReadInputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
20002cc6:	b580      	push	{r7, lr}
20002cc8:	b084      	sub	sp, #16
20002cca:	af00      	add	r7, sp, #0
20002ccc:	6078      	str	r0, [r7, #4]
20002cce:	000a      	movs	r2, r1
20002cd0:	1cbb      	adds	r3, r7, #2
20002cd2:	801a      	strh	r2, [r3, #0]
  uint8_t bitstatus = 0x00;
20002cd4:	230f      	movs	r3, #15
20002cd6:	18fb      	adds	r3, r7, r3
20002cd8:	2200      	movs	r2, #0
20002cda:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
20002cdc:	687b      	ldr	r3, [r7, #4]
20002cde:	691b      	ldr	r3, [r3, #16]
20002ce0:	1cba      	adds	r2, r7, #2
20002ce2:	8812      	ldrh	r2, [r2, #0]
20002ce4:	4013      	ands	r3, r2
20002ce6:	d004      	beq.n	20002cf2 <GPIO_ReadInputDataBit+0x2c>
  {
    bitstatus = (uint8_t)Bit_SET;
20002ce8:	230f      	movs	r3, #15
20002cea:	18fb      	adds	r3, r7, r3
20002cec:	2201      	movs	r2, #1
20002cee:	701a      	strb	r2, [r3, #0]
20002cf0:	e003      	b.n	20002cfa <GPIO_ReadInputDataBit+0x34>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
20002cf2:	230f      	movs	r3, #15
20002cf4:	18fb      	adds	r3, r7, r3
20002cf6:	2200      	movs	r2, #0
20002cf8:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
20002cfa:	230f      	movs	r3, #15
20002cfc:	18fb      	adds	r3, r7, r3
20002cfe:	781b      	ldrb	r3, [r3, #0]
}
20002d00:	0018      	movs	r0, r3
20002d02:	46bd      	mov	sp, r7
20002d04:	b004      	add	sp, #16
20002d06:	bd80      	pop	{r7, pc}

20002d08 <GPIO_ReadInputData>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F42xxx/43xxx devices.
  *                      x can be (A, B, C, D and H) to select the GPIO peripheral for STM32F401xx devices. 
  * @retval GPIO input data port value.
  */
uint16_t GPIO_ReadInputData(GPIO_TypeDef* GPIOx)
{
20002d08:	b580      	push	{r7, lr}
20002d0a:	b082      	sub	sp, #8
20002d0c:	af00      	add	r7, sp, #0
20002d0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  return ((uint16_t)GPIOx->IDR);
20002d10:	687b      	ldr	r3, [r7, #4]
20002d12:	691b      	ldr	r3, [r3, #16]
20002d14:	b29b      	uxth	r3, r3
}
20002d16:	0018      	movs	r0, r3
20002d18:	46bd      	mov	sp, r7
20002d1a:	b002      	add	sp, #8
20002d1c:	bd80      	pop	{r7, pc}

20002d1e <GPIO_ReadOutputDataBit>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *          This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The output port pin value.
  */
uint8_t GPIO_ReadOutputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
20002d1e:	b580      	push	{r7, lr}
20002d20:	b084      	sub	sp, #16
20002d22:	af00      	add	r7, sp, #0
20002d24:	6078      	str	r0, [r7, #4]
20002d26:	000a      	movs	r2, r1
20002d28:	1cbb      	adds	r3, r7, #2
20002d2a:	801a      	strh	r2, [r3, #0]
  uint8_t bitstatus = 0x00;
20002d2c:	230f      	movs	r3, #15
20002d2e:	18fb      	adds	r3, r7, r3
20002d30:	2200      	movs	r2, #0
20002d32:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if (((GPIOx->ODR) & GPIO_Pin) != (uint32_t)Bit_RESET)
20002d34:	687b      	ldr	r3, [r7, #4]
20002d36:	695b      	ldr	r3, [r3, #20]
20002d38:	1cba      	adds	r2, r7, #2
20002d3a:	8812      	ldrh	r2, [r2, #0]
20002d3c:	4013      	ands	r3, r2
20002d3e:	d004      	beq.n	20002d4a <GPIO_ReadOutputDataBit+0x2c>
  {
    bitstatus = (uint8_t)Bit_SET;
20002d40:	230f      	movs	r3, #15
20002d42:	18fb      	adds	r3, r7, r3
20002d44:	2201      	movs	r2, #1
20002d46:	701a      	strb	r2, [r3, #0]
20002d48:	e003      	b.n	20002d52 <GPIO_ReadOutputDataBit+0x34>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
20002d4a:	230f      	movs	r3, #15
20002d4c:	18fb      	adds	r3, r7, r3
20002d4e:	2200      	movs	r2, #0
20002d50:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
20002d52:	230f      	movs	r3, #15
20002d54:	18fb      	adds	r3, r7, r3
20002d56:	781b      	ldrb	r3, [r3, #0]
}
20002d58:	0018      	movs	r0, r3
20002d5a:	46bd      	mov	sp, r7
20002d5c:	b004      	add	sp, #16
20002d5e:	bd80      	pop	{r7, pc}

20002d60 <GPIO_ReadOutputData>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F42xxx/43xxx devices.
  *                      x can be (A, B, C, D and H) to select the GPIO peripheral for STM32F401xx devices. 
  * @retval GPIO output data port value.
  */
uint16_t GPIO_ReadOutputData(GPIO_TypeDef* GPIOx)
{
20002d60:	b580      	push	{r7, lr}
20002d62:	b082      	sub	sp, #8
20002d64:	af00      	add	r7, sp, #0
20002d66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  return ((uint16_t)GPIOx->ODR);
20002d68:	687b      	ldr	r3, [r7, #4]
20002d6a:	695b      	ldr	r3, [r3, #20]
20002d6c:	b29b      	uxth	r3, r3
}
20002d6e:	0018      	movs	r0, r3
20002d70:	46bd      	mov	sp, r7
20002d72:	b002      	add	sp, #8
20002d74:	bd80      	pop	{r7, pc}

20002d76 <GPIO_SetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
20002d76:	b580      	push	{r7, lr}
20002d78:	b082      	sub	sp, #8
20002d7a:	af00      	add	r7, sp, #0
20002d7c:	6078      	str	r0, [r7, #4]
20002d7e:	000a      	movs	r2, r1
20002d80:	1cbb      	adds	r3, r7, #2
20002d82:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRL = GPIO_Pin;
20002d84:	687b      	ldr	r3, [r7, #4]
20002d86:	1cba      	adds	r2, r7, #2
20002d88:	8812      	ldrh	r2, [r2, #0]
20002d8a:	831a      	strh	r2, [r3, #24]
}
20002d8c:	46c0      	nop			; (mov r8, r8)
20002d8e:	46bd      	mov	sp, r7
20002d90:	b002      	add	sp, #8
20002d92:	bd80      	pop	{r7, pc}

20002d94 <GPIO_ResetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
20002d94:	b580      	push	{r7, lr}
20002d96:	b082      	sub	sp, #8
20002d98:	af00      	add	r7, sp, #0
20002d9a:	6078      	str	r0, [r7, #4]
20002d9c:	000a      	movs	r2, r1
20002d9e:	1cbb      	adds	r3, r7, #2
20002da0:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRH = GPIO_Pin;
20002da2:	687b      	ldr	r3, [r7, #4]
20002da4:	1cba      	adds	r2, r7, #2
20002da6:	8812      	ldrh	r2, [r2, #0]
20002da8:	835a      	strh	r2, [r3, #26]
}
20002daa:	46c0      	nop			; (mov r8, r8)
20002dac:	46bd      	mov	sp, r7
20002dae:	b002      	add	sp, #8
20002db0:	bd80      	pop	{r7, pc}

20002db2 <GPIO_WriteBit>:
  *            @arg Bit_RESET: to clear the port pin
  *            @arg Bit_SET: to set the port pin
  * @retval None
  */
void GPIO_WriteBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, BitAction BitVal)
{
20002db2:	b580      	push	{r7, lr}
20002db4:	b082      	sub	sp, #8
20002db6:	af00      	add	r7, sp, #0
20002db8:	6078      	str	r0, [r7, #4]
20002dba:	0008      	movs	r0, r1
20002dbc:	0011      	movs	r1, r2
20002dbe:	1cbb      	adds	r3, r7, #2
20002dc0:	1c02      	adds	r2, r0, #0
20002dc2:	801a      	strh	r2, [r3, #0]
20002dc4:	1c7b      	adds	r3, r7, #1
20002dc6:	1c0a      	adds	r2, r1, #0
20002dc8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal));

  if (BitVal != Bit_RESET)
20002dca:	1c7b      	adds	r3, r7, #1
20002dcc:	781b      	ldrb	r3, [r3, #0]
20002dce:	2b00      	cmp	r3, #0
20002dd0:	d004      	beq.n	20002ddc <GPIO_WriteBit+0x2a>
  {
    GPIOx->BSRRL = GPIO_Pin;
20002dd2:	687b      	ldr	r3, [r7, #4]
20002dd4:	1cba      	adds	r2, r7, #2
20002dd6:	8812      	ldrh	r2, [r2, #0]
20002dd8:	831a      	strh	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRRH = GPIO_Pin ;
  }
}
20002dda:	e003      	b.n	20002de4 <GPIO_WriteBit+0x32>
    GPIOx->BSRRH = GPIO_Pin ;
20002ddc:	687b      	ldr	r3, [r7, #4]
20002dde:	1cba      	adds	r2, r7, #2
20002de0:	8812      	ldrh	r2, [r2, #0]
20002de2:	835a      	strh	r2, [r3, #26]
}
20002de4:	46c0      	nop			; (mov r8, r8)
20002de6:	46bd      	mov	sp, r7
20002de8:	b002      	add	sp, #8
20002dea:	bd80      	pop	{r7, pc}

20002dec <GPIO_Write>:
  *                      x can be (A, B, C, D and H) to select the GPIO peripheral for STM32F401xx devices. 
  * @param  PortVal: specifies the value to be written to the port output data register.
  * @retval None
  */
void GPIO_Write(GPIO_TypeDef* GPIOx, uint16_t PortVal)
{
20002dec:	b580      	push	{r7, lr}
20002dee:	b082      	sub	sp, #8
20002df0:	af00      	add	r7, sp, #0
20002df2:	6078      	str	r0, [r7, #4]
20002df4:	000a      	movs	r2, r1
20002df6:	1cbb      	adds	r3, r7, #2
20002df8:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR = PortVal;
20002dfa:	1cbb      	adds	r3, r7, #2
20002dfc:	881a      	ldrh	r2, [r3, #0]
20002dfe:	687b      	ldr	r3, [r7, #4]
20002e00:	615a      	str	r2, [r3, #20]
}
20002e02:	46c0      	nop			; (mov r8, r8)
20002e04:	46bd      	mov	sp, r7
20002e06:	b002      	add	sp, #8
20002e08:	bd80      	pop	{r7, pc}

20002e0a <GPIO_ToggleBits>:
  *                      x can be (A, B, C, D and H) to select the GPIO peripheral for STM32F401xx devices. 
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void GPIO_ToggleBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
20002e0a:	b580      	push	{r7, lr}
20002e0c:	b082      	sub	sp, #8
20002e0e:	af00      	add	r7, sp, #0
20002e10:	6078      	str	r0, [r7, #4]
20002e12:	000a      	movs	r2, r1
20002e14:	1cbb      	adds	r3, r7, #2
20002e16:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR ^= GPIO_Pin;
20002e18:	687b      	ldr	r3, [r7, #4]
20002e1a:	695a      	ldr	r2, [r3, #20]
20002e1c:	1cbb      	adds	r3, r7, #2
20002e1e:	881b      	ldrh	r3, [r3, #0]
20002e20:	405a      	eors	r2, r3
20002e22:	687b      	ldr	r3, [r7, #4]
20002e24:	615a      	str	r2, [r3, #20]
}
20002e26:	46c0      	nop			; (mov r8, r8)
20002e28:	46bd      	mov	sp, r7
20002e2a:	b002      	add	sp, #8
20002e2c:	bd80      	pop	{r7, pc}

20002e2e <GPIO_PinAFConfig>:
  *            @arg GPIO_AF_LTDC: Connect LTDC pins to AF14 for STM32F429xx/439xx devices. 
  *            @arg GPIO_AF_EVENTOUT: Connect EVENTOUT pins to AF15
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
20002e2e:	b580      	push	{r7, lr}
20002e30:	b084      	sub	sp, #16
20002e32:	af00      	add	r7, sp, #0
20002e34:	6078      	str	r0, [r7, #4]
20002e36:	0008      	movs	r0, r1
20002e38:	0011      	movs	r1, r2
20002e3a:	1cbb      	adds	r3, r7, #2
20002e3c:	1c02      	adds	r2, r0, #0
20002e3e:	801a      	strh	r2, [r3, #0]
20002e40:	1c7b      	adds	r3, r7, #1
20002e42:	1c0a      	adds	r2, r1, #0
20002e44:	701a      	strb	r2, [r3, #0]
  uint32_t temp = 0x00;
20002e46:	2300      	movs	r3, #0
20002e48:	60fb      	str	r3, [r7, #12]
  uint32_t temp_2 = 0x00;
20002e4a:	2300      	movs	r3, #0
20002e4c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
20002e4e:	1c7b      	adds	r3, r7, #1
20002e50:	781a      	ldrb	r2, [r3, #0]
20002e52:	1cbb      	adds	r3, r7, #2
20002e54:	881b      	ldrh	r3, [r3, #0]
20002e56:	2107      	movs	r1, #7
20002e58:	400b      	ands	r3, r1
20002e5a:	009b      	lsls	r3, r3, #2
20002e5c:	409a      	lsls	r2, r3
20002e5e:	0013      	movs	r3, r2
20002e60:	60fb      	str	r3, [r7, #12]
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
20002e62:	1cbb      	adds	r3, r7, #2
20002e64:	881b      	ldrh	r3, [r3, #0]
20002e66:	08db      	lsrs	r3, r3, #3
20002e68:	b29b      	uxth	r3, r3
20002e6a:	001a      	movs	r2, r3
20002e6c:	687b      	ldr	r3, [r7, #4]
20002e6e:	3208      	adds	r2, #8
20002e70:	0092      	lsls	r2, r2, #2
20002e72:	58d3      	ldr	r3, [r2, r3]
20002e74:	1cba      	adds	r2, r7, #2
20002e76:	8812      	ldrh	r2, [r2, #0]
20002e78:	2107      	movs	r1, #7
20002e7a:	400a      	ands	r2, r1
20002e7c:	0092      	lsls	r2, r2, #2
20002e7e:	210f      	movs	r1, #15
20002e80:	4091      	lsls	r1, r2
20002e82:	000a      	movs	r2, r1
20002e84:	43d2      	mvns	r2, r2
20002e86:	1cb9      	adds	r1, r7, #2
20002e88:	8809      	ldrh	r1, [r1, #0]
20002e8a:	08c9      	lsrs	r1, r1, #3
20002e8c:	b289      	uxth	r1, r1
20002e8e:	0008      	movs	r0, r1
20002e90:	401a      	ands	r2, r3
20002e92:	0011      	movs	r1, r2
20002e94:	687b      	ldr	r3, [r7, #4]
20002e96:	0002      	movs	r2, r0
20002e98:	3208      	adds	r2, #8
20002e9a:	0092      	lsls	r2, r2, #2
20002e9c:	50d1      	str	r1, [r2, r3]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
20002e9e:	1cbb      	adds	r3, r7, #2
20002ea0:	881b      	ldrh	r3, [r3, #0]
20002ea2:	08db      	lsrs	r3, r3, #3
20002ea4:	b29b      	uxth	r3, r3
20002ea6:	001a      	movs	r2, r3
20002ea8:	687b      	ldr	r3, [r7, #4]
20002eaa:	3208      	adds	r2, #8
20002eac:	0092      	lsls	r2, r2, #2
20002eae:	58d3      	ldr	r3, [r2, r3]
20002eb0:	68fa      	ldr	r2, [r7, #12]
20002eb2:	4313      	orrs	r3, r2
20002eb4:	60bb      	str	r3, [r7, #8]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
20002eb6:	1cbb      	adds	r3, r7, #2
20002eb8:	881b      	ldrh	r3, [r3, #0]
20002eba:	08db      	lsrs	r3, r3, #3
20002ebc:	b29b      	uxth	r3, r3
20002ebe:	001a      	movs	r2, r3
20002ec0:	687b      	ldr	r3, [r7, #4]
20002ec2:	3208      	adds	r2, #8
20002ec4:	0092      	lsls	r2, r2, #2
20002ec6:	68b9      	ldr	r1, [r7, #8]
20002ec8:	50d1      	str	r1, [r2, r3]
}
20002eca:	46c0      	nop			; (mov r8, r8)
20002ecc:	46bd      	mov	sp, r7
20002ece:	b004      	add	sp, #16
20002ed0:	bd80      	pop	{r7, pc}
20002ed2:	46c0      	nop			; (mov r8, r8)

20002ed4 <RCC_DeInit>:
  *            - LSI, LSE and RTC clocks 
  * @param  None
  * @retval None
  */
void RCC_DeInit(void)
{
20002ed4:	b580      	push	{r7, lr}
20002ed6:	af00      	add	r7, sp, #0
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
20002ed8:	4b14      	ldr	r3, [pc, #80]	; (20002f2c <RCC_DeInit+0x58>)
20002eda:	681a      	ldr	r2, [r3, #0]
20002edc:	4b13      	ldr	r3, [pc, #76]	; (20002f2c <RCC_DeInit+0x58>)
20002ede:	2101      	movs	r1, #1
20002ee0:	430a      	orrs	r2, r1
20002ee2:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
20002ee4:	4b11      	ldr	r3, [pc, #68]	; (20002f2c <RCC_DeInit+0x58>)
20002ee6:	2200      	movs	r2, #0
20002ee8:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON, PLLON, PLLI2S and PLLSAI(STM32F42xxx/43xxx/446xx/469xx/479xx devices) bits */
  RCC->CR &= (uint32_t)0xEAF6FFFF;
20002eea:	4b10      	ldr	r3, [pc, #64]	; (20002f2c <RCC_DeInit+0x58>)
20002eec:	681a      	ldr	r2, [r3, #0]
20002eee:	4b0f      	ldr	r3, [pc, #60]	; (20002f2c <RCC_DeInit+0x58>)
20002ef0:	490f      	ldr	r1, [pc, #60]	; (20002f30 <RCC_DeInit+0x5c>)
20002ef2:	400a      	ands	r2, r1
20002ef4:	601a      	str	r2, [r3, #0]
  
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
20002ef6:	4b0d      	ldr	r3, [pc, #52]	; (20002f2c <RCC_DeInit+0x58>)
20002ef8:	4a0e      	ldr	r2, [pc, #56]	; (20002f34 <RCC_DeInit+0x60>)
20002efa:	605a      	str	r2, [r3, #4]

#if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F401xx) || defined(STM32F411xE) || defined(STM32F446xx) || defined(STM32F413_423xx) || defined(STM32F469_479xx)  
  /* Reset PLLI2SCFGR register */
  RCC->PLLI2SCFGR = 0x20003000;
20002efc:	4a0b      	ldr	r2, [pc, #44]	; (20002f2c <RCC_DeInit+0x58>)
20002efe:	2384      	movs	r3, #132	; 0x84
20002f00:	490d      	ldr	r1, [pc, #52]	; (20002f38 <RCC_DeInit+0x64>)
20002f02:	50d1      	str	r1, [r2, r3]
#endif /* STM32F40_41xxx || STM32F427_437xx || STM32F429_439xx || STM32F401xx || STM32F411xE || STM32F446xx || STM32F413_423xx || STM32F469_479xx */

#if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F446xx) || defined(STM32F469_479xx) 
  /* Reset PLLSAICFGR register, only available for STM32F42xxx/43xxx/446xx/469xx/479xx devices */
  RCC->PLLSAICFGR = 0x24003000;
20002f04:	4a09      	ldr	r2, [pc, #36]	; (20002f2c <RCC_DeInit+0x58>)
20002f06:	2388      	movs	r3, #136	; 0x88
20002f08:	490c      	ldr	r1, [pc, #48]	; (20002f3c <RCC_DeInit+0x68>)
20002f0a:	50d1      	str	r1, [r2, r3]
#endif /* STM32F40_41xxx || STM32F427_437xx || STM32F429_439xx || STM32F446xx || STM32F469_479xx */
  
  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
20002f0c:	4b07      	ldr	r3, [pc, #28]	; (20002f2c <RCC_DeInit+0x58>)
20002f0e:	681a      	ldr	r2, [r3, #0]
20002f10:	4b06      	ldr	r3, [pc, #24]	; (20002f2c <RCC_DeInit+0x58>)
20002f12:	490b      	ldr	r1, [pc, #44]	; (20002f40 <RCC_DeInit+0x6c>)
20002f14:	400a      	ands	r2, r1
20002f16:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
20002f18:	4b04      	ldr	r3, [pc, #16]	; (20002f2c <RCC_DeInit+0x58>)
20002f1a:	2200      	movs	r2, #0
20002f1c:	60da      	str	r2, [r3, #12]

  /* Disable Timers clock prescalers selection, only available for STM32F42/43xxx and STM32F413_423xx devices */
  RCC->DCKCFGR = 0x00000000;
20002f1e:	4a03      	ldr	r2, [pc, #12]	; (20002f2c <RCC_DeInit+0x58>)
20002f20:	238c      	movs	r3, #140	; 0x8c
20002f22:	2100      	movs	r1, #0
20002f24:	50d1      	str	r1, [r2, r3]
  
#if defined(STM32F410xx) || defined(STM32F413_423xx)
  /* Disable LPTIM and FMPI2C clock prescalers selection, only available for STM32F410xx and STM32F413_423xx devices */
  RCC->DCKCFGR2 = 0x00000000;
#endif /* STM32F410xx || STM32F413_423xx */  
}
20002f26:	46c0      	nop			; (mov r8, r8)
20002f28:	46bd      	mov	sp, r7
20002f2a:	bd80      	pop	{r7, pc}
20002f2c:	40023800 	andmi	r3, r2, r0, lsl #16
20002f30:	eaf6ffff 	b	1fdc2f34 <startup-0x23d0cc>
20002f34:	24003010 	strcs	r3, [r0], #-16
20002f38:	20003000 	andcs	r3, r0, r0
20002f3c:	24003000 	strcs	r3, [r0], #-0
20002f40:	fffbffff 			; <UNDEFINED> instruction: 0xfffbffff

20002f44 <RCC_HSEConfig>:
  *            @arg RCC_HSE_ON: turn ON the HSE oscillator
  *            @arg RCC_HSE_Bypass: HSE oscillator bypassed with external clock
  * @retval None
  */
void RCC_HSEConfig(uint8_t RCC_HSE)
{
20002f44:	b580      	push	{r7, lr}
20002f46:	b082      	sub	sp, #8
20002f48:	af00      	add	r7, sp, #0
20002f4a:	0002      	movs	r2, r0
20002f4c:	1dfb      	adds	r3, r7, #7
20002f4e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_HSE(RCC_HSE));

  /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
  *(__IO uint8_t *) CR_BYTE3_ADDRESS = RCC_HSE_OFF;
20002f50:	4b05      	ldr	r3, [pc, #20]	; (20002f68 <RCC_HSEConfig+0x24>)
20002f52:	2200      	movs	r2, #0
20002f54:	701a      	strb	r2, [r3, #0]

  /* Set the new HSE configuration -------------------------------------------*/
  *(__IO uint8_t *) CR_BYTE3_ADDRESS = RCC_HSE;
20002f56:	4a04      	ldr	r2, [pc, #16]	; (20002f68 <RCC_HSEConfig+0x24>)
20002f58:	1dfb      	adds	r3, r7, #7
20002f5a:	781b      	ldrb	r3, [r3, #0]
20002f5c:	7013      	strb	r3, [r2, #0]
}
20002f5e:	46c0      	nop			; (mov r8, r8)
20002f60:	46bd      	mov	sp, r7
20002f62:	b002      	add	sp, #8
20002f64:	bd80      	pop	{r7, pc}
20002f66:	46c0      	nop			; (mov r8, r8)
20002f68:	40023802 	andmi	r3, r2, r2, lsl #16

20002f6c <RCC_WaitForHSEStartUp>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: HSE oscillator is stable and ready to use
  *          - ERROR: HSE oscillator not yet ready
  */
ErrorStatus RCC_WaitForHSEStartUp(void)
{
20002f6c:	b590      	push	{r4, r7, lr}
20002f6e:	b083      	sub	sp, #12
20002f70:	af00      	add	r7, sp, #0
  __IO uint32_t startupcounter = 0;
20002f72:	2300      	movs	r3, #0
20002f74:	603b      	str	r3, [r7, #0]
  ErrorStatus status = ERROR;
20002f76:	1dfb      	adds	r3, r7, #7
20002f78:	2200      	movs	r2, #0
20002f7a:	701a      	strb	r2, [r3, #0]
  FlagStatus hsestatus = RESET;
20002f7c:	1dbb      	adds	r3, r7, #6
20002f7e:	2200      	movs	r2, #0
20002f80:	701a      	strb	r2, [r3, #0]
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    hsestatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
20002f82:	1dbc      	adds	r4, r7, #6
20002f84:	2031      	movs	r0, #49	; 0x31
20002f86:	f000 fd9b 	bl	20003ac0 <RCC_GetFlagStatus>
20002f8a:	0003      	movs	r3, r0
20002f8c:	7023      	strb	r3, [r4, #0]
    startupcounter++;
20002f8e:	683b      	ldr	r3, [r7, #0]
20002f90:	3301      	adds	r3, #1
20002f92:	603b      	str	r3, [r7, #0]
  } while((startupcounter != HSE_STARTUP_TIMEOUT) && (hsestatus == RESET));
20002f94:	683a      	ldr	r2, [r7, #0]
20002f96:	23a0      	movs	r3, #160	; 0xa0
20002f98:	01db      	lsls	r3, r3, #7
20002f9a:	429a      	cmp	r2, r3
20002f9c:	d003      	beq.n	20002fa6 <RCC_WaitForHSEStartUp+0x3a>
20002f9e:	1dbb      	adds	r3, r7, #6
20002fa0:	781b      	ldrb	r3, [r3, #0]
20002fa2:	2b00      	cmp	r3, #0
20002fa4:	d0ed      	beq.n	20002f82 <RCC_WaitForHSEStartUp+0x16>

  if (RCC_GetFlagStatus(RCC_FLAG_HSERDY) != RESET)
20002fa6:	2031      	movs	r0, #49	; 0x31
20002fa8:	f000 fd8a 	bl	20003ac0 <RCC_GetFlagStatus>
20002fac:	1e03      	subs	r3, r0, #0
20002fae:	d003      	beq.n	20002fb8 <RCC_WaitForHSEStartUp+0x4c>
  {
    status = SUCCESS;
20002fb0:	1dfb      	adds	r3, r7, #7
20002fb2:	2201      	movs	r2, #1
20002fb4:	701a      	strb	r2, [r3, #0]
20002fb6:	e002      	b.n	20002fbe <RCC_WaitForHSEStartUp+0x52>
  }
  else
  {
    status = ERROR;
20002fb8:	1dfb      	adds	r3, r7, #7
20002fba:	2200      	movs	r2, #0
20002fbc:	701a      	strb	r2, [r3, #0]
  }
  return (status);
20002fbe:	1dfb      	adds	r3, r7, #7
20002fc0:	781b      	ldrb	r3, [r3, #0]
}
20002fc2:	0018      	movs	r0, r3
20002fc4:	46bd      	mov	sp, r7
20002fc6:	b003      	add	sp, #12
20002fc8:	bd90      	pop	{r4, r7, pc}

20002fca <RCC_AdjustHSICalibrationValue>:
  * @param  HSICalibrationValue: specifies the calibration trimming value.
  *         This parameter must be a number between 0 and 0x1F.
  * @retval None
  */
void RCC_AdjustHSICalibrationValue(uint8_t HSICalibrationValue)
{
20002fca:	b580      	push	{r7, lr}
20002fcc:	b084      	sub	sp, #16
20002fce:	af00      	add	r7, sp, #0
20002fd0:	0002      	movs	r2, r0
20002fd2:	1dfb      	adds	r3, r7, #7
20002fd4:	701a      	strb	r2, [r3, #0]
  uint32_t tmpreg = 0;
20002fd6:	2300      	movs	r3, #0
20002fd8:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_CALIBRATION_VALUE(HSICalibrationValue));

  tmpreg = RCC->CR;
20002fda:	4b0a      	ldr	r3, [pc, #40]	; (20003004 <RCC_AdjustHSICalibrationValue+0x3a>)
20002fdc:	681b      	ldr	r3, [r3, #0]
20002fde:	60fb      	str	r3, [r7, #12]

  /* Clear HSITRIM[4:0] bits */
  tmpreg &= ~RCC_CR_HSITRIM;
20002fe0:	68fb      	ldr	r3, [r7, #12]
20002fe2:	22f8      	movs	r2, #248	; 0xf8
20002fe4:	4393      	bics	r3, r2
20002fe6:	60fb      	str	r3, [r7, #12]

  /* Set the HSITRIM[4:0] bits according to HSICalibrationValue value */
  tmpreg |= (uint32_t)HSICalibrationValue << 3;
20002fe8:	1dfb      	adds	r3, r7, #7
20002fea:	781b      	ldrb	r3, [r3, #0]
20002fec:	00db      	lsls	r3, r3, #3
20002fee:	68fa      	ldr	r2, [r7, #12]
20002ff0:	4313      	orrs	r3, r2
20002ff2:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CR = tmpreg;
20002ff4:	4b03      	ldr	r3, [pc, #12]	; (20003004 <RCC_AdjustHSICalibrationValue+0x3a>)
20002ff6:	68fa      	ldr	r2, [r7, #12]
20002ff8:	601a      	str	r2, [r3, #0]
}
20002ffa:	46c0      	nop			; (mov r8, r8)
20002ffc:	46bd      	mov	sp, r7
20002ffe:	b004      	add	sp, #16
20003000:	bd80      	pop	{r7, pc}
20003002:	46c0      	nop			; (mov r8, r8)
20003004:	40023800 	andmi	r3, r2, r0, lsl #16

20003008 <RCC_HSICmd>:
  * @note   When the HSI is stopped, HSIRDY flag goes low after 6 HSI oscillator
  *         clock cycles.  
  * @retval None
  */
void RCC_HSICmd(FunctionalState NewState)
{
20003008:	b580      	push	{r7, lr}
2000300a:	b082      	sub	sp, #8
2000300c:	af00      	add	r7, sp, #0
2000300e:	0002      	movs	r2, r0
20003010:	1dfb      	adds	r3, r7, #7
20003012:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CR_HSION_BB = (uint32_t)NewState;
20003014:	4b03      	ldr	r3, [pc, #12]	; (20003024 <RCC_HSICmd+0x1c>)
20003016:	1dfa      	adds	r2, r7, #7
20003018:	7812      	ldrb	r2, [r2, #0]
2000301a:	601a      	str	r2, [r3, #0]
}
2000301c:	46c0      	nop			; (mov r8, r8)
2000301e:	46bd      	mov	sp, r7
20003020:	b002      	add	sp, #8
20003022:	bd80      	pop	{r7, pc}
20003024:	42470000 	submi	r0, r7, #0

20003028 <RCC_LSEConfig>:
  *            @arg RCC_LSE_ON: turn ON the LSE oscillator
  *            @arg RCC_LSE_Bypass: LSE oscillator bypassed with external clock
  * @retval None
  */
void RCC_LSEConfig(uint8_t RCC_LSE)
{
20003028:	b580      	push	{r7, lr}
2000302a:	b082      	sub	sp, #8
2000302c:	af00      	add	r7, sp, #0
2000302e:	0002      	movs	r2, r0
20003030:	1dfb      	adds	r3, r7, #7
20003032:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_LSE(RCC_LSE));

  /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
  /* Reset LSEON bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
20003034:	4b0c      	ldr	r3, [pc, #48]	; (20003068 <RCC_LSEConfig+0x40>)
20003036:	2200      	movs	r2, #0
20003038:	701a      	strb	r2, [r3, #0]

  /* Reset LSEBYP bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
2000303a:	4b0b      	ldr	r3, [pc, #44]	; (20003068 <RCC_LSEConfig+0x40>)
2000303c:	2200      	movs	r2, #0
2000303e:	701a      	strb	r2, [r3, #0]

  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch (RCC_LSE)
20003040:	1dfb      	adds	r3, r7, #7
20003042:	781b      	ldrb	r3, [r3, #0]
20003044:	2b01      	cmp	r3, #1
20003046:	d002      	beq.n	2000304e <RCC_LSEConfig+0x26>
20003048:	2b04      	cmp	r3, #4
2000304a:	d004      	beq.n	20003056 <RCC_LSEConfig+0x2e>
    case RCC_LSE_Bypass:
      /* Set LSEBYP and LSEON bits */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
      break;
    default:
      break;
2000304c:	e007      	b.n	2000305e <RCC_LSEConfig+0x36>
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_ON;
2000304e:	4b06      	ldr	r3, [pc, #24]	; (20003068 <RCC_LSEConfig+0x40>)
20003050:	2201      	movs	r2, #1
20003052:	701a      	strb	r2, [r3, #0]
      break;
20003054:	e003      	b.n	2000305e <RCC_LSEConfig+0x36>
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
20003056:	4b04      	ldr	r3, [pc, #16]	; (20003068 <RCC_LSEConfig+0x40>)
20003058:	2205      	movs	r2, #5
2000305a:	701a      	strb	r2, [r3, #0]
      break;
2000305c:	46c0      	nop			; (mov r8, r8)
  }
}
2000305e:	46c0      	nop			; (mov r8, r8)
20003060:	46bd      	mov	sp, r7
20003062:	b002      	add	sp, #8
20003064:	bd80      	pop	{r7, pc}
20003066:	46c0      	nop			; (mov r8, r8)
20003068:	40023870 	andmi	r3, r2, r0, ror r8

2000306c <RCC_LSICmd>:
  * @note   When the LSI is stopped, LSIRDY flag goes low after 6 LSI oscillator
  *         clock cycles. 
  * @retval None
  */
void RCC_LSICmd(FunctionalState NewState)
{
2000306c:	b580      	push	{r7, lr}
2000306e:	b082      	sub	sp, #8
20003070:	af00      	add	r7, sp, #0
20003072:	0002      	movs	r2, r0
20003074:	1dfb      	adds	r3, r7, #7
20003076:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CSR_LSION_BB = (uint32_t)NewState;
20003078:	4b03      	ldr	r3, [pc, #12]	; (20003088 <RCC_LSICmd+0x1c>)
2000307a:	1dfa      	adds	r2, r7, #7
2000307c:	7812      	ldrb	r2, [r2, #0]
2000307e:	601a      	str	r2, [r3, #0]
}
20003080:	46c0      	nop			; (mov r8, r8)
20003082:	46bd      	mov	sp, r7
20003084:	b002      	add	sp, #8
20003086:	bd80      	pop	{r7, pc}
20003088:	42470e80 	submi	r0, r7, #128, 28	; 0x800

2000308c <RCC_PLLConfig>:
  *         correctly.
  *   
  * @retval None
  */
void RCC_PLLConfig(uint32_t RCC_PLLSource, uint32_t PLLM, uint32_t PLLN, uint32_t PLLP, uint32_t PLLQ)
{
2000308c:	b580      	push	{r7, lr}
2000308e:	b084      	sub	sp, #16
20003090:	af00      	add	r7, sp, #0
20003092:	60f8      	str	r0, [r7, #12]
20003094:	60b9      	str	r1, [r7, #8]
20003096:	607a      	str	r2, [r7, #4]
20003098:	603b      	str	r3, [r7, #0]
  assert_param(IS_RCC_PLLM_VALUE(PLLM));
  assert_param(IS_RCC_PLLN_VALUE(PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLP));
  assert_param(IS_RCC_PLLQ_VALUE(PLLQ));

  RCC->PLLCFGR = PLLM | (PLLN << 6) | (((PLLP >> 1) -1) << 16) | (RCC_PLLSource) |
2000309a:	687b      	ldr	r3, [r7, #4]
2000309c:	019a      	lsls	r2, r3, #6
2000309e:	68bb      	ldr	r3, [r7, #8]
200030a0:	431a      	orrs	r2, r3
200030a2:	683b      	ldr	r3, [r7, #0]
200030a4:	085b      	lsrs	r3, r3, #1
200030a6:	3b01      	subs	r3, #1
200030a8:	041b      	lsls	r3, r3, #16
200030aa:	431a      	orrs	r2, r3
200030ac:	68fb      	ldr	r3, [r7, #12]
200030ae:	431a      	orrs	r2, r3
200030b0:	0011      	movs	r1, r2
                 (PLLQ << 24);
200030b2:	69bb      	ldr	r3, [r7, #24]
200030b4:	061a      	lsls	r2, r3, #24
  RCC->PLLCFGR = PLLM | (PLLN << 6) | (((PLLP >> 1) -1) << 16) | (RCC_PLLSource) |
200030b6:	4b03      	ldr	r3, [pc, #12]	; (200030c4 <RCC_PLLConfig+0x38>)
200030b8:	430a      	orrs	r2, r1
200030ba:	605a      	str	r2, [r3, #4]
}
200030bc:	46c0      	nop			; (mov r8, r8)
200030be:	46bd      	mov	sp, r7
200030c0:	b004      	add	sp, #16
200030c2:	bd80      	pop	{r7, pc}
200030c4:	40023800 	andmi	r3, r2, r0, lsl #16

200030c8 <RCC_PLLCmd>:
  * @note   The main PLL is disabled by hardware when entering STOP and STANDBY modes.
  * @param  NewState: new state of the main PLL. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_PLLCmd(FunctionalState NewState)
{
200030c8:	b580      	push	{r7, lr}
200030ca:	b082      	sub	sp, #8
200030cc:	af00      	add	r7, sp, #0
200030ce:	0002      	movs	r2, r0
200030d0:	1dfb      	adds	r3, r7, #7
200030d2:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_PLLON_BB = (uint32_t)NewState;
200030d4:	4b03      	ldr	r3, [pc, #12]	; (200030e4 <RCC_PLLCmd+0x1c>)
200030d6:	1dfa      	adds	r2, r7, #7
200030d8:	7812      	ldrb	r2, [r2, #0]
200030da:	601a      	str	r2, [r3, #0]
}
200030dc:	46c0      	nop			; (mov r8, r8)
200030de:	46bd      	mov	sp, r7
200030e0:	b002      	add	sp, #8
200030e2:	bd80      	pop	{r7, pc}
200030e4:	42470060 	submi	r0, r7, #96	; 0x60

200030e8 <RCC_PLLI2SConfig>:
  *         on the I2S clock frequency.
  *   
  * @retval None
  */
void RCC_PLLI2SConfig(uint32_t PLLI2SN, uint32_t PLLI2SR)
{
200030e8:	b580      	push	{r7, lr}
200030ea:	b082      	sub	sp, #8
200030ec:	af00      	add	r7, sp, #0
200030ee:	6078      	str	r0, [r7, #4]
200030f0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RCC_PLLI2SN_VALUE(PLLI2SN));
  assert_param(IS_RCC_PLLI2SR_VALUE(PLLI2SR));

  RCC->PLLI2SCFGR = (PLLI2SN << 6) | (PLLI2SR << 28);
200030f2:	687b      	ldr	r3, [r7, #4]
200030f4:	019a      	lsls	r2, r3, #6
200030f6:	683b      	ldr	r3, [r7, #0]
200030f8:	071b      	lsls	r3, r3, #28
200030fa:	4904      	ldr	r1, [pc, #16]	; (2000310c <RCC_PLLI2SConfig+0x24>)
200030fc:	4313      	orrs	r3, r2
200030fe:	2284      	movs	r2, #132	; 0x84
20003100:	508b      	str	r3, [r1, r2]
}
20003102:	46c0      	nop			; (mov r8, r8)
20003104:	46bd      	mov	sp, r7
20003106:	b002      	add	sp, #8
20003108:	bd80      	pop	{r7, pc}
2000310a:	46c0      	nop			; (mov r8, r8)
2000310c:	40023800 	andmi	r3, r2, r0, lsl #16

20003110 <RCC_PLLI2SCmd>:
  * @note   The PLLI2S is disabled by hardware when entering STOP and STANDBY modes.  
  * @param  NewState: new state of the PLLI2S. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_PLLI2SCmd(FunctionalState NewState)
{
20003110:	b580      	push	{r7, lr}
20003112:	b082      	sub	sp, #8
20003114:	af00      	add	r7, sp, #0
20003116:	0002      	movs	r2, r0
20003118:	1dfb      	adds	r3, r7, #7
2000311a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_PLLI2SON_BB = (uint32_t)NewState;
2000311c:	4b03      	ldr	r3, [pc, #12]	; (2000312c <RCC_PLLI2SCmd+0x1c>)
2000311e:	1dfa      	adds	r2, r7, #7
20003120:	7812      	ldrb	r2, [r2, #0]
20003122:	601a      	str	r2, [r3, #0]
}
20003124:	46c0      	nop			; (mov r8, r8)
20003126:	46bd      	mov	sp, r7
20003128:	b002      	add	sp, #8
2000312a:	bd80      	pop	{r7, pc}
2000312c:	42470068 	submi	r0, r7, #104	; 0x68

20003130 <RCC_PLLSAIConfig>:
  *          This parameter must be a number between 2 and 7.
  *   
  * @retval None
  */
void RCC_PLLSAIConfig(uint32_t PLLSAIN, uint32_t PLLSAIQ, uint32_t PLLSAIR)
{
20003130:	b580      	push	{r7, lr}
20003132:	b084      	sub	sp, #16
20003134:	af00      	add	r7, sp, #0
20003136:	60f8      	str	r0, [r7, #12]
20003138:	60b9      	str	r1, [r7, #8]
2000313a:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_PLLSAIN_VALUE(PLLSAIN));
  assert_param(IS_RCC_PLLSAIR_VALUE(PLLSAIR));
  assert_param(IS_RCC_PLLSAIQ_VALUE(PLLSAIQ));
  
  RCC->PLLSAICFGR = (PLLSAIN << 6) | (PLLSAIQ << 24) | (PLLSAIR << 28);
2000313c:	68fb      	ldr	r3, [r7, #12]
2000313e:	019a      	lsls	r2, r3, #6
20003140:	68bb      	ldr	r3, [r7, #8]
20003142:	061b      	lsls	r3, r3, #24
20003144:	431a      	orrs	r2, r3
20003146:	687b      	ldr	r3, [r7, #4]
20003148:	071b      	lsls	r3, r3, #28
2000314a:	4904      	ldr	r1, [pc, #16]	; (2000315c <RCC_PLLSAIConfig+0x2c>)
2000314c:	4313      	orrs	r3, r2
2000314e:	2288      	movs	r2, #136	; 0x88
20003150:	508b      	str	r3, [r1, r2]
}
20003152:	46c0      	nop			; (mov r8, r8)
20003154:	46bd      	mov	sp, r7
20003156:	b004      	add	sp, #16
20003158:	bd80      	pop	{r7, pc}
2000315a:	46c0      	nop			; (mov r8, r8)
2000315c:	40023800 	andmi	r3, r2, r0, lsl #16

20003160 <RCC_PLLSAICmd>:
  * @note   The PLLSAI is disabled by hardware when entering STOP and STANDBY modes.  
  * @param  NewState: new state of the PLLSAI. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_PLLSAICmd(FunctionalState NewState)
{
20003160:	b580      	push	{r7, lr}
20003162:	b082      	sub	sp, #8
20003164:	af00      	add	r7, sp, #0
20003166:	0002      	movs	r2, r0
20003168:	1dfb      	adds	r3, r7, #7
2000316a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_PLLSAION_BB = (uint32_t)NewState;
2000316c:	4b03      	ldr	r3, [pc, #12]	; (2000317c <RCC_PLLSAICmd+0x1c>)
2000316e:	1dfa      	adds	r2, r7, #7
20003170:	7812      	ldrb	r2, [r2, #0]
20003172:	601a      	str	r2, [r3, #0]
}
20003174:	46c0      	nop			; (mov r8, r8)
20003176:	46bd      	mov	sp, r7
20003178:	b002      	add	sp, #8
2000317a:	bd80      	pop	{r7, pc}
2000317c:	42470070 	submi	r0, r7, #112	; 0x70

20003180 <RCC_ClockSecuritySystemCmd>:
  * @param  NewState: new state of the Clock Security System.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_ClockSecuritySystemCmd(FunctionalState NewState)
{
20003180:	b580      	push	{r7, lr}
20003182:	b082      	sub	sp, #8
20003184:	af00      	add	r7, sp, #0
20003186:	0002      	movs	r2, r0
20003188:	1dfb      	adds	r3, r7, #7
2000318a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_CSSON_BB = (uint32_t)NewState;
2000318c:	4b03      	ldr	r3, [pc, #12]	; (2000319c <RCC_ClockSecuritySystemCmd+0x1c>)
2000318e:	1dfa      	adds	r2, r7, #7
20003190:	7812      	ldrb	r2, [r2, #0]
20003192:	601a      	str	r2, [r3, #0]
}
20003194:	46c0      	nop			; (mov r8, r8)
20003196:	46bd      	mov	sp, r7
20003198:	b002      	add	sp, #8
2000319a:	bd80      	pop	{r7, pc}
2000319c:	4247004c 	submi	r0, r7, #76	; 0x4c

200031a0 <RCC_MCO1Config>:
  *            @arg RCC_MCO1Div_4: division by 4 applied to MCO1 clock
  *            @arg RCC_MCO1Div_5: division by 5 applied to MCO1 clock
  * @retval None
  */
void RCC_MCO1Config(uint32_t RCC_MCO1Source, uint32_t RCC_MCO1Div)
{
200031a0:	b580      	push	{r7, lr}
200031a2:	b084      	sub	sp, #16
200031a4:	af00      	add	r7, sp, #0
200031a6:	6078      	str	r0, [r7, #4]
200031a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
200031aa:	2300      	movs	r3, #0
200031ac:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_MCO1SOURCE(RCC_MCO1Source));
  assert_param(IS_RCC_MCO1DIV(RCC_MCO1Div));  

  tmpreg = RCC->CFGR;
200031ae:	4b0a      	ldr	r3, [pc, #40]	; (200031d8 <RCC_MCO1Config+0x38>)
200031b0:	689b      	ldr	r3, [r3, #8]
200031b2:	60fb      	str	r3, [r7, #12]

  /* Clear MCO1[1:0] and MCO1PRE[2:0] bits */
  tmpreg &= CFGR_MCO1_RESET_MASK;
200031b4:	68fb      	ldr	r3, [r7, #12]
200031b6:	4a09      	ldr	r2, [pc, #36]	; (200031dc <RCC_MCO1Config+0x3c>)
200031b8:	4013      	ands	r3, r2
200031ba:	60fb      	str	r3, [r7, #12]

  /* Select MCO1 clock source and prescaler */
  tmpreg |= RCC_MCO1Source | RCC_MCO1Div;
200031bc:	687a      	ldr	r2, [r7, #4]
200031be:	683b      	ldr	r3, [r7, #0]
200031c0:	4313      	orrs	r3, r2
200031c2:	68fa      	ldr	r2, [r7, #12]
200031c4:	4313      	orrs	r3, r2
200031c6:	60fb      	str	r3, [r7, #12]
  
  /* Store the new value */
  RCC->CFGR = tmpreg;
200031c8:	4b03      	ldr	r3, [pc, #12]	; (200031d8 <RCC_MCO1Config+0x38>)
200031ca:	68fa      	ldr	r2, [r7, #12]
200031cc:	609a      	str	r2, [r3, #8]

#if defined(STM32F410xx)
  RCC_MCO1Cmd(ENABLE);
#endif /* STM32F410xx */   
}
200031ce:	46c0      	nop			; (mov r8, r8)
200031d0:	46bd      	mov	sp, r7
200031d2:	b004      	add	sp, #16
200031d4:	bd80      	pop	{r7, pc}
200031d6:	46c0      	nop			; (mov r8, r8)
200031d8:	40023800 	andmi	r3, r2, r0, lsl #16
200031dc:	f89fffff 			; <UNDEFINED> instruction: 0xf89fffff

200031e0 <RCC_MCO2Config>:
  * @note  For STM32F410xx devices to output I2SCLK clock on MCO2 you should have
  *        at last one of the SPI clocks enabled (SPI1, SPI2 or SPI5).
  * @retval None
  */
void RCC_MCO2Config(uint32_t RCC_MCO2Source, uint32_t RCC_MCO2Div)
{
200031e0:	b580      	push	{r7, lr}
200031e2:	b084      	sub	sp, #16
200031e4:	af00      	add	r7, sp, #0
200031e6:	6078      	str	r0, [r7, #4]
200031e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
200031ea:	2300      	movs	r3, #0
200031ec:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_MCO2SOURCE(RCC_MCO2Source));
  assert_param(IS_RCC_MCO2DIV(RCC_MCO2Div));
  
  tmpreg = RCC->CFGR;
200031ee:	4b0a      	ldr	r3, [pc, #40]	; (20003218 <RCC_MCO2Config+0x38>)
200031f0:	689b      	ldr	r3, [r3, #8]
200031f2:	60fb      	str	r3, [r7, #12]
  
  /* Clear MCO2 and MCO2PRE[2:0] bits */
  tmpreg &= CFGR_MCO2_RESET_MASK;
200031f4:	68fb      	ldr	r3, [r7, #12]
200031f6:	015b      	lsls	r3, r3, #5
200031f8:	095b      	lsrs	r3, r3, #5
200031fa:	60fb      	str	r3, [r7, #12]

  /* Select MCO2 clock source and prescaler */
  tmpreg |= RCC_MCO2Source | RCC_MCO2Div;
200031fc:	687a      	ldr	r2, [r7, #4]
200031fe:	683b      	ldr	r3, [r7, #0]
20003200:	4313      	orrs	r3, r2
20003202:	68fa      	ldr	r2, [r7, #12]
20003204:	4313      	orrs	r3, r2
20003206:	60fb      	str	r3, [r7, #12]
  
  /* Store the new value */
  RCC->CFGR = tmpreg;
20003208:	4b03      	ldr	r3, [pc, #12]	; (20003218 <RCC_MCO2Config+0x38>)
2000320a:	68fa      	ldr	r2, [r7, #12]
2000320c:	609a      	str	r2, [r3, #8]

#if defined(STM32F410xx)
  RCC_MCO2Cmd(ENABLE);
#endif /* STM32F410xx */   
}
2000320e:	46c0      	nop			; (mov r8, r8)
20003210:	46bd      	mov	sp, r7
20003212:	b004      	add	sp, #16
20003214:	bd80      	pop	{r7, pc}
20003216:	46c0      	nop			; (mov r8, r8)
20003218:	40023800 	andmi	r3, r2, r0, lsl #16

2000321c <RCC_SYSCLKConfig>:
  *            @arg RCC_SYSCLKSource_PLLCLK: PLL selected as system clock source (RCC_SYSCLKSource_PLLPCLK for STM32F446xx devices)
  *            @arg RCC_SYSCLKSource_PLLRCLK: PLL R selected as system clock source only for STM32F412xG, STM32F413_423xx and STM32F446xx devices
  * @retval None
  */
void RCC_SYSCLKConfig(uint32_t RCC_SYSCLKSource)
{
2000321c:	b580      	push	{r7, lr}
2000321e:	b084      	sub	sp, #16
20003220:	af00      	add	r7, sp, #0
20003222:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
20003224:	2300      	movs	r3, #0
20003226:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_SYSCLK_SOURCE(RCC_SYSCLKSource));

  tmpreg = RCC->CFGR;
20003228:	4b08      	ldr	r3, [pc, #32]	; (2000324c <RCC_SYSCLKConfig+0x30>)
2000322a:	689b      	ldr	r3, [r3, #8]
2000322c:	60fb      	str	r3, [r7, #12]

  /* Clear SW[1:0] bits */
  tmpreg &= ~RCC_CFGR_SW;
2000322e:	68fb      	ldr	r3, [r7, #12]
20003230:	2203      	movs	r2, #3
20003232:	4393      	bics	r3, r2
20003234:	60fb      	str	r3, [r7, #12]

  /* Set SW[1:0] bits according to RCC_SYSCLKSource value */
  tmpreg |= RCC_SYSCLKSource;
20003236:	68fa      	ldr	r2, [r7, #12]
20003238:	687b      	ldr	r3, [r7, #4]
2000323a:	4313      	orrs	r3, r2
2000323c:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;
2000323e:	4b03      	ldr	r3, [pc, #12]	; (2000324c <RCC_SYSCLKConfig+0x30>)
20003240:	68fa      	ldr	r2, [r7, #12]
20003242:	609a      	str	r2, [r3, #8]
}
20003244:	46c0      	nop			; (mov r8, r8)
20003246:	46bd      	mov	sp, r7
20003248:	b004      	add	sp, #16
2000324a:	bd80      	pop	{r7, pc}
2000324c:	40023800 	andmi	r3, r2, r0, lsl #16

20003250 <RCC_GetSYSCLKSource>:
  *              - 0x04: HSE used as system clock
  *              - 0x08: PLL used as system clock (PLL P for STM32F446xx devices)
  *              - 0x0C: PLL R used as system clock (only for STM32F412xG, STM32F413_423xx and STM32F446xx devices)
  */
uint8_t RCC_GetSYSCLKSource(void)
{
20003250:	b580      	push	{r7, lr}
20003252:	af00      	add	r7, sp, #0
  return ((uint8_t)(RCC->CFGR & RCC_CFGR_SWS));
20003254:	4b04      	ldr	r3, [pc, #16]	; (20003268 <RCC_GetSYSCLKSource+0x18>)
20003256:	689b      	ldr	r3, [r3, #8]
20003258:	b2db      	uxtb	r3, r3
2000325a:	220c      	movs	r2, #12
2000325c:	4013      	ands	r3, r2
2000325e:	b2db      	uxtb	r3, r3
}
20003260:	0018      	movs	r0, r3
20003262:	46bd      	mov	sp, r7
20003264:	bd80      	pop	{r7, pc}
20003266:	46c0      	nop			; (mov r8, r8)
20003268:	40023800 	andmi	r3, r2, r0, lsl #16

2000326c <RCC_HCLKConfig>:
  *            @arg RCC_SYSCLK_Div256: AHB clock = SYSCLK/256
  *            @arg RCC_SYSCLK_Div512: AHB clock = SYSCLK/512
  * @retval None
  */
void RCC_HCLKConfig(uint32_t RCC_SYSCLK)
{
2000326c:	b580      	push	{r7, lr}
2000326e:	b084      	sub	sp, #16
20003270:	af00      	add	r7, sp, #0
20003272:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
20003274:	2300      	movs	r3, #0
20003276:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_HCLK(RCC_SYSCLK));

  tmpreg = RCC->CFGR;
20003278:	4b08      	ldr	r3, [pc, #32]	; (2000329c <RCC_HCLKConfig+0x30>)
2000327a:	689b      	ldr	r3, [r3, #8]
2000327c:	60fb      	str	r3, [r7, #12]

  /* Clear HPRE[3:0] bits */
  tmpreg &= ~RCC_CFGR_HPRE;
2000327e:	68fb      	ldr	r3, [r7, #12]
20003280:	22f0      	movs	r2, #240	; 0xf0
20003282:	4393      	bics	r3, r2
20003284:	60fb      	str	r3, [r7, #12]

  /* Set HPRE[3:0] bits according to RCC_SYSCLK value */
  tmpreg |= RCC_SYSCLK;
20003286:	68fa      	ldr	r2, [r7, #12]
20003288:	687b      	ldr	r3, [r7, #4]
2000328a:	4313      	orrs	r3, r2
2000328c:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;
2000328e:	4b03      	ldr	r3, [pc, #12]	; (2000329c <RCC_HCLKConfig+0x30>)
20003290:	68fa      	ldr	r2, [r7, #12]
20003292:	609a      	str	r2, [r3, #8]
}
20003294:	46c0      	nop			; (mov r8, r8)
20003296:	46bd      	mov	sp, r7
20003298:	b004      	add	sp, #16
2000329a:	bd80      	pop	{r7, pc}
2000329c:	40023800 	andmi	r3, r2, r0, lsl #16

200032a0 <RCC_PCLK1Config>:
  *            @arg RCC_HCLK_Div8:  APB1 clock = HCLK/8
  *            @arg RCC_HCLK_Div16: APB1 clock = HCLK/16
  * @retval None
  */
void RCC_PCLK1Config(uint32_t RCC_HCLK)
{
200032a0:	b580      	push	{r7, lr}
200032a2:	b084      	sub	sp, #16
200032a4:	af00      	add	r7, sp, #0
200032a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
200032a8:	2300      	movs	r3, #0
200032aa:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));

  tmpreg = RCC->CFGR;
200032ac:	4b08      	ldr	r3, [pc, #32]	; (200032d0 <RCC_PCLK1Config+0x30>)
200032ae:	689b      	ldr	r3, [r3, #8]
200032b0:	60fb      	str	r3, [r7, #12]

  /* Clear PPRE1[2:0] bits */
  tmpreg &= ~RCC_CFGR_PPRE1;
200032b2:	68fb      	ldr	r3, [r7, #12]
200032b4:	4a07      	ldr	r2, [pc, #28]	; (200032d4 <RCC_PCLK1Config+0x34>)
200032b6:	4013      	ands	r3, r2
200032b8:	60fb      	str	r3, [r7, #12]

  /* Set PPRE1[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK;
200032ba:	68fa      	ldr	r2, [r7, #12]
200032bc:	687b      	ldr	r3, [r7, #4]
200032be:	4313      	orrs	r3, r2
200032c0:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;
200032c2:	4b03      	ldr	r3, [pc, #12]	; (200032d0 <RCC_PCLK1Config+0x30>)
200032c4:	68fa      	ldr	r2, [r7, #12]
200032c6:	609a      	str	r2, [r3, #8]
}
200032c8:	46c0      	nop			; (mov r8, r8)
200032ca:	46bd      	mov	sp, r7
200032cc:	b004      	add	sp, #16
200032ce:	bd80      	pop	{r7, pc}
200032d0:	40023800 	andmi	r3, r2, r0, lsl #16
200032d4:	ffffe3ff 			; <UNDEFINED> instruction: 0xffffe3ff

200032d8 <RCC_PCLK2Config>:
  *            @arg RCC_HCLK_Div8:  APB2 clock = HCLK/8
  *            @arg RCC_HCLK_Div16: APB2 clock = HCLK/16
  * @retval None
  */
void RCC_PCLK2Config(uint32_t RCC_HCLK)
{
200032d8:	b580      	push	{r7, lr}
200032da:	b084      	sub	sp, #16
200032dc:	af00      	add	r7, sp, #0
200032de:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
200032e0:	2300      	movs	r3, #0
200032e2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));

  tmpreg = RCC->CFGR;
200032e4:	4b09      	ldr	r3, [pc, #36]	; (2000330c <RCC_PCLK2Config+0x34>)
200032e6:	689b      	ldr	r3, [r3, #8]
200032e8:	60fb      	str	r3, [r7, #12]

  /* Clear PPRE2[2:0] bits */
  tmpreg &= ~RCC_CFGR_PPRE2;
200032ea:	68fb      	ldr	r3, [r7, #12]
200032ec:	4a08      	ldr	r2, [pc, #32]	; (20003310 <RCC_PCLK2Config+0x38>)
200032ee:	4013      	ands	r3, r2
200032f0:	60fb      	str	r3, [r7, #12]

  /* Set PPRE2[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK << 3;
200032f2:	687b      	ldr	r3, [r7, #4]
200032f4:	00db      	lsls	r3, r3, #3
200032f6:	68fa      	ldr	r2, [r7, #12]
200032f8:	4313      	orrs	r3, r2
200032fa:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;
200032fc:	4b03      	ldr	r3, [pc, #12]	; (2000330c <RCC_PCLK2Config+0x34>)
200032fe:	68fa      	ldr	r2, [r7, #12]
20003300:	609a      	str	r2, [r3, #8]
}
20003302:	46c0      	nop			; (mov r8, r8)
20003304:	46bd      	mov	sp, r7
20003306:	b004      	add	sp, #16
20003308:	bd80      	pop	{r7, pc}
2000330a:	46c0      	nop			; (mov r8, r8)
2000330c:	40023800 	andmi	r3, r2, r0, lsl #16
20003310:	ffff1fff 			; <UNDEFINED> instruction: 0xffff1fff

20003314 <RCC_GetClocksFreq>:
  *         configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
20003314:	b580      	push	{r7, lr}
20003316:	b088      	sub	sp, #32
20003318:	af00      	add	r7, sp, #0
2000331a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
2000331c:	2300      	movs	r3, #0
2000331e:	61bb      	str	r3, [r7, #24]
20003320:	2300      	movs	r3, #0
20003322:	617b      	str	r3, [r7, #20]
20003324:	2300      	movs	r3, #0
20003326:	61fb      	str	r3, [r7, #28]
20003328:	2302      	movs	r3, #2
2000332a:	613b      	str	r3, [r7, #16]
2000332c:	2300      	movs	r3, #0
2000332e:	60fb      	str	r3, [r7, #12]
20003330:	2302      	movs	r3, #2
20003332:	60bb      	str	r3, [r7, #8]
#if defined(STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F446xx)  
  uint32_t pllr = 2;
#endif /* STM32F412xG || STM32F413_423xx || STM32F446xx */
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
20003334:	4b49      	ldr	r3, [pc, #292]	; (2000345c <RCC_GetClocksFreq+0x148>)
20003336:	689b      	ldr	r3, [r3, #8]
20003338:	220c      	movs	r2, #12
2000333a:	4013      	ands	r3, r2
2000333c:	61bb      	str	r3, [r7, #24]
  
  switch (tmp)
2000333e:	69bb      	ldr	r3, [r7, #24]
20003340:	2b04      	cmp	r3, #4
20003342:	d007      	beq.n	20003354 <RCC_GetClocksFreq+0x40>
20003344:	2b08      	cmp	r3, #8
20003346:	d009      	beq.n	2000335c <RCC_GetClocksFreq+0x48>
20003348:	2b00      	cmp	r3, #0
2000334a:	d141      	bne.n	200033d0 <RCC_GetClocksFreq+0xbc>
  {
  case 0x00:  /* HSI used as system clock source */
    RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
2000334c:	687b      	ldr	r3, [r7, #4]
2000334e:	4a44      	ldr	r2, [pc, #272]	; (20003460 <RCC_GetClocksFreq+0x14c>)
20003350:	601a      	str	r2, [r3, #0]
    break;
20003352:	e041      	b.n	200033d8 <RCC_GetClocksFreq+0xc4>
  case 0x04:  /* HSE used as system clock  source */
    RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
20003354:	687b      	ldr	r3, [r7, #4]
20003356:	4a43      	ldr	r2, [pc, #268]	; (20003464 <RCC_GetClocksFreq+0x150>)
20003358:	601a      	str	r2, [r3, #0]
    break;
2000335a:	e03d      	b.n	200033d8 <RCC_GetClocksFreq+0xc4>
  case 0x08:  /* PLL P used as system clock  source */
    
    /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLP
    */    
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
2000335c:	4b3f      	ldr	r3, [pc, #252]	; (2000345c <RCC_GetClocksFreq+0x148>)
2000335e:	685b      	ldr	r3, [r3, #4]
20003360:	0d9b      	lsrs	r3, r3, #22
20003362:	2201      	movs	r2, #1
20003364:	4013      	ands	r3, r2
20003366:	60fb      	str	r3, [r7, #12]
    pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
20003368:	4b3c      	ldr	r3, [pc, #240]	; (2000345c <RCC_GetClocksFreq+0x148>)
2000336a:	685b      	ldr	r3, [r3, #4]
2000336c:	223f      	movs	r2, #63	; 0x3f
2000336e:	4013      	ands	r3, r2
20003370:	60bb      	str	r3, [r7, #8]
    
    if (pllsource != 0)
20003372:	68fb      	ldr	r3, [r7, #12]
20003374:	2b00      	cmp	r3, #0
20003376:	d00d      	beq.n	20003394 <RCC_GetClocksFreq+0x80>
    {
      /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
20003378:	68b9      	ldr	r1, [r7, #8]
2000337a:	483a      	ldr	r0, [pc, #232]	; (20003464 <RCC_GetClocksFreq+0x150>)
2000337c:	f000 fcb6 	bl	20003cec <__udivsi3>
20003380:	0003      	movs	r3, r0
20003382:	001a      	movs	r2, r3
20003384:	4b35      	ldr	r3, [pc, #212]	; (2000345c <RCC_GetClocksFreq+0x148>)
20003386:	685b      	ldr	r3, [r3, #4]
20003388:	099b      	lsrs	r3, r3, #6
2000338a:	05db      	lsls	r3, r3, #23
2000338c:	0ddb      	lsrs	r3, r3, #23
2000338e:	4353      	muls	r3, r2
20003390:	61fb      	str	r3, [r7, #28]
20003392:	e00c      	b.n	200033ae <RCC_GetClocksFreq+0x9a>
    }
    else
    {
      /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
20003394:	68b9      	ldr	r1, [r7, #8]
20003396:	4832      	ldr	r0, [pc, #200]	; (20003460 <RCC_GetClocksFreq+0x14c>)
20003398:	f000 fca8 	bl	20003cec <__udivsi3>
2000339c:	0003      	movs	r3, r0
2000339e:	001a      	movs	r2, r3
200033a0:	4b2e      	ldr	r3, [pc, #184]	; (2000345c <RCC_GetClocksFreq+0x148>)
200033a2:	685b      	ldr	r3, [r3, #4]
200033a4:	099b      	lsrs	r3, r3, #6
200033a6:	05db      	lsls	r3, r3, #23
200033a8:	0ddb      	lsrs	r3, r3, #23
200033aa:	4353      	muls	r3, r2
200033ac:	61fb      	str	r3, [r7, #28]
    }
    
    pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
200033ae:	4b2b      	ldr	r3, [pc, #172]	; (2000345c <RCC_GetClocksFreq+0x148>)
200033b0:	685b      	ldr	r3, [r3, #4]
200033b2:	0c1b      	lsrs	r3, r3, #16
200033b4:	2203      	movs	r2, #3
200033b6:	4013      	ands	r3, r2
200033b8:	3301      	adds	r3, #1
200033ba:	005b      	lsls	r3, r3, #1
200033bc:	613b      	str	r3, [r7, #16]
    RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
200033be:	6939      	ldr	r1, [r7, #16]
200033c0:	69f8      	ldr	r0, [r7, #28]
200033c2:	f000 fc93 	bl	20003cec <__udivsi3>
200033c6:	0003      	movs	r3, r0
200033c8:	001a      	movs	r2, r3
200033ca:	687b      	ldr	r3, [r7, #4]
200033cc:	601a      	str	r2, [r3, #0]
    break;
200033ce:	e003      	b.n	200033d8 <RCC_GetClocksFreq+0xc4>
    RCC_Clocks->SYSCLK_Frequency = pllvco/pllr;    
    break;
#endif /* STM32F412xG || STM32F413_423xx || STM32F446xx */
    
  default:
    RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
200033d0:	687b      	ldr	r3, [r7, #4]
200033d2:	4a23      	ldr	r2, [pc, #140]	; (20003460 <RCC_GetClocksFreq+0x14c>)
200033d4:	601a      	str	r2, [r3, #0]
    break;
200033d6:	46c0      	nop			; (mov r8, r8)
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/
  
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
200033d8:	4b20      	ldr	r3, [pc, #128]	; (2000345c <RCC_GetClocksFreq+0x148>)
200033da:	689b      	ldr	r3, [r3, #8]
200033dc:	22f0      	movs	r2, #240	; 0xf0
200033de:	4013      	ands	r3, r2
200033e0:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 4;
200033e2:	69bb      	ldr	r3, [r7, #24]
200033e4:	091b      	lsrs	r3, r3, #4
200033e6:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
200033e8:	4a1f      	ldr	r2, [pc, #124]	; (20003468 <RCC_GetClocksFreq+0x154>)
200033ea:	69bb      	ldr	r3, [r7, #24]
200033ec:	18d3      	adds	r3, r2, r3
200033ee:	781b      	ldrb	r3, [r3, #0]
200033f0:	b2db      	uxtb	r3, r3
200033f2:	617b      	str	r3, [r7, #20]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
200033f4:	687b      	ldr	r3, [r7, #4]
200033f6:	681a      	ldr	r2, [r3, #0]
200033f8:	697b      	ldr	r3, [r7, #20]
200033fa:	40da      	lsrs	r2, r3
200033fc:	687b      	ldr	r3, [r7, #4]
200033fe:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
20003400:	4b16      	ldr	r3, [pc, #88]	; (2000345c <RCC_GetClocksFreq+0x148>)
20003402:	689a      	ldr	r2, [r3, #8]
20003404:	23e0      	movs	r3, #224	; 0xe0
20003406:	015b      	lsls	r3, r3, #5
20003408:	4013      	ands	r3, r2
2000340a:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 10;
2000340c:	69bb      	ldr	r3, [r7, #24]
2000340e:	0a9b      	lsrs	r3, r3, #10
20003410:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
20003412:	4a15      	ldr	r2, [pc, #84]	; (20003468 <RCC_GetClocksFreq+0x154>)
20003414:	69bb      	ldr	r3, [r7, #24]
20003416:	18d3      	adds	r3, r2, r3
20003418:	781b      	ldrb	r3, [r3, #0]
2000341a:	b2db      	uxtb	r3, r3
2000341c:	617b      	str	r3, [r7, #20]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
2000341e:	687b      	ldr	r3, [r7, #4]
20003420:	685a      	ldr	r2, [r3, #4]
20003422:	697b      	ldr	r3, [r7, #20]
20003424:	40da      	lsrs	r2, r3
20003426:	687b      	ldr	r3, [r7, #4]
20003428:	609a      	str	r2, [r3, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
2000342a:	4b0c      	ldr	r3, [pc, #48]	; (2000345c <RCC_GetClocksFreq+0x148>)
2000342c:	689a      	ldr	r2, [r3, #8]
2000342e:	23e0      	movs	r3, #224	; 0xe0
20003430:	021b      	lsls	r3, r3, #8
20003432:	4013      	ands	r3, r2
20003434:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 13;
20003436:	69bb      	ldr	r3, [r7, #24]
20003438:	0b5b      	lsrs	r3, r3, #13
2000343a:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
2000343c:	4a0a      	ldr	r2, [pc, #40]	; (20003468 <RCC_GetClocksFreq+0x154>)
2000343e:	69bb      	ldr	r3, [r7, #24]
20003440:	18d3      	adds	r3, r2, r3
20003442:	781b      	ldrb	r3, [r3, #0]
20003444:	b2db      	uxtb	r3, r3
20003446:	617b      	str	r3, [r7, #20]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
20003448:	687b      	ldr	r3, [r7, #4]
2000344a:	685a      	ldr	r2, [r3, #4]
2000344c:	697b      	ldr	r3, [r7, #20]
2000344e:	40da      	lsrs	r2, r3
20003450:	687b      	ldr	r3, [r7, #4]
20003452:	60da      	str	r2, [r3, #12]
}
20003454:	46c0      	nop			; (mov r8, r8)
20003456:	46bd      	mov	sp, r7
20003458:	b008      	add	sp, #32
2000345a:	bd80      	pop	{r7, pc}
2000345c:	40023800 	andmi	r3, r2, r0, lsl #16
20003460:	00f42400 	rscseq	r2, r4, r0, lsl #8
20003464:	017d7840 	cmneq	sp, r0, asr #16
20003468:	20003f28 	andcs	r3, r0, r8, lsr #30

2000346c <RCC_RTCCLKConfig>:
  *         RTC clock source).
  *  
  * @retval None
  */
void RCC_RTCCLKConfig(uint32_t RCC_RTCCLKSource)
{
2000346c:	b580      	push	{r7, lr}
2000346e:	b084      	sub	sp, #16
20003470:	af00      	add	r7, sp, #0
20003472:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
20003474:	2300      	movs	r3, #0
20003476:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_RTCCLK_SOURCE(RCC_RTCCLKSource));

  if ((RCC_RTCCLKSource & 0x00000300) == 0x00000300)
20003478:	687a      	ldr	r2, [r7, #4]
2000347a:	23c0      	movs	r3, #192	; 0xc0
2000347c:	009b      	lsls	r3, r3, #2
2000347e:	401a      	ands	r2, r3
20003480:	23c0      	movs	r3, #192	; 0xc0
20003482:	009b      	lsls	r3, r3, #2
20003484:	429a      	cmp	r2, r3
20003486:	d10f      	bne.n	200034a8 <RCC_RTCCLKConfig+0x3c>
  { /* If HSE is selected as RTC clock source, configure HSE division factor for RTC clock */
    tmpreg = RCC->CFGR;
20003488:	4b0d      	ldr	r3, [pc, #52]	; (200034c0 <RCC_RTCCLKConfig+0x54>)
2000348a:	689b      	ldr	r3, [r3, #8]
2000348c:	60fb      	str	r3, [r7, #12]

    /* Clear RTCPRE[4:0] bits */
    tmpreg &= ~RCC_CFGR_RTCPRE;
2000348e:	68fb      	ldr	r3, [r7, #12]
20003490:	4a0c      	ldr	r2, [pc, #48]	; (200034c4 <RCC_RTCCLKConfig+0x58>)
20003492:	4013      	ands	r3, r2
20003494:	60fb      	str	r3, [r7, #12]

    /* Configure HSE division factor for RTC clock */
    tmpreg |= (RCC_RTCCLKSource & 0xFFFFCFF);
20003496:	687b      	ldr	r3, [r7, #4]
20003498:	4a0b      	ldr	r2, [pc, #44]	; (200034c8 <RCC_RTCCLKConfig+0x5c>)
2000349a:	4013      	ands	r3, r2
2000349c:	68fa      	ldr	r2, [r7, #12]
2000349e:	4313      	orrs	r3, r2
200034a0:	60fb      	str	r3, [r7, #12]

    /* Store the new value */
    RCC->CFGR = tmpreg;
200034a2:	4b07      	ldr	r3, [pc, #28]	; (200034c0 <RCC_RTCCLKConfig+0x54>)
200034a4:	68fa      	ldr	r2, [r7, #12]
200034a6:	609a      	str	r2, [r3, #8]
  }
    
  /* Select the RTC clock source */
  RCC->BDCR |= (RCC_RTCCLKSource & 0x00000FFF);
200034a8:	4b05      	ldr	r3, [pc, #20]	; (200034c0 <RCC_RTCCLKConfig+0x54>)
200034aa:	6f19      	ldr	r1, [r3, #112]	; 0x70
200034ac:	687b      	ldr	r3, [r7, #4]
200034ae:	051b      	lsls	r3, r3, #20
200034b0:	0d1a      	lsrs	r2, r3, #20
200034b2:	4b03      	ldr	r3, [pc, #12]	; (200034c0 <RCC_RTCCLKConfig+0x54>)
200034b4:	430a      	orrs	r2, r1
200034b6:	671a      	str	r2, [r3, #112]	; 0x70
}
200034b8:	46c0      	nop			; (mov r8, r8)
200034ba:	46bd      	mov	sp, r7
200034bc:	b004      	add	sp, #16
200034be:	bd80      	pop	{r7, pc}
200034c0:	40023800 	andmi	r3, r2, r0, lsl #16
200034c4:	ffe0ffff 			; <UNDEFINED> instruction: 0xffe0ffff
200034c8:	0ffffcff 	svceq	0x00fffcff

200034cc <RCC_RTCCLKCmd>:
  *         using the RCC_RTCCLKConfig function.
  * @param  NewState: new state of the RTC clock. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_RTCCLKCmd(FunctionalState NewState)
{
200034cc:	b580      	push	{r7, lr}
200034ce:	b082      	sub	sp, #8
200034d0:	af00      	add	r7, sp, #0
200034d2:	0002      	movs	r2, r0
200034d4:	1dfb      	adds	r3, r7, #7
200034d6:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) BDCR_RTCEN_BB = (uint32_t)NewState;
200034d8:	4b03      	ldr	r3, [pc, #12]	; (200034e8 <RCC_RTCCLKCmd+0x1c>)
200034da:	1dfa      	adds	r2, r7, #7
200034dc:	7812      	ldrb	r2, [r2, #0]
200034de:	601a      	str	r2, [r3, #0]
}
200034e0:	46c0      	nop			; (mov r8, r8)
200034e2:	46bd      	mov	sp, r7
200034e4:	b002      	add	sp, #8
200034e6:	bd80      	pop	{r7, pc}
200034e8:	42470e3c 	submi	r0, r7, #60, 28	; 0x3c0

200034ec <RCC_BackupResetCmd>:
  * @param  NewState: new state of the Backup domain reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_BackupResetCmd(FunctionalState NewState)
{
200034ec:	b580      	push	{r7, lr}
200034ee:	b082      	sub	sp, #8
200034f0:	af00      	add	r7, sp, #0
200034f2:	0002      	movs	r2, r0
200034f4:	1dfb      	adds	r3, r7, #7
200034f6:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) BDCR_BDRST_BB = (uint32_t)NewState;
200034f8:	4b03      	ldr	r3, [pc, #12]	; (20003508 <RCC_BackupResetCmd+0x1c>)
200034fa:	1dfa      	adds	r2, r7, #7
200034fc:	7812      	ldrb	r2, [r2, #0]
200034fe:	601a      	str	r2, [r3, #0]
}
20003500:	46c0      	nop			; (mov r8, r8)
20003502:	46bd      	mov	sp, r7
20003504:	b002      	add	sp, #8
20003506:	bd80      	pop	{r7, pc}
20003508:	42470e40 	submi	r0, r7, #64, 28	; 0x400

2000350c <RCC_I2SCLKConfig>:
  *            @arg RCC_I2S2CLKSource_Ext: External clock mapped on the I2S_CKIN pin
  *                                        used as I2S clock source
  * @retval None
  */
void RCC_I2SCLKConfig(uint32_t RCC_I2SCLKSource)
{
2000350c:	b580      	push	{r7, lr}
2000350e:	b082      	sub	sp, #8
20003510:	af00      	add	r7, sp, #0
20003512:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_I2SCLK_SOURCE(RCC_I2SCLKSource));

  *(__IO uint32_t *) CFGR_I2SSRC_BB = RCC_I2SCLKSource;  
20003514:	4b03      	ldr	r3, [pc, #12]	; (20003524 <RCC_I2SCLKConfig+0x18>)
20003516:	687a      	ldr	r2, [r7, #4]
20003518:	601a      	str	r2, [r3, #0]
}
2000351a:	46c0      	nop			; (mov r8, r8)
2000351c:	46bd      	mov	sp, r7
2000351e:	b002      	add	sp, #8
20003520:	bd80      	pop	{r7, pc}
20003522:	46c0      	nop			; (mov r8, r8)
20003524:	4247015c 	submi	r0, r7, #92, 2

20003528 <RCC_SAIBlockACLKConfig>:
  *            @arg RCC_SAIACLKSource_Ext: External clock mapped on the I2S_CKIN pin
  *                                        used as SAI1 Block A clock
  * @retval None
  */
void RCC_SAIBlockACLKConfig(uint32_t RCC_SAIBlockACLKSource)
{
20003528:	b580      	push	{r7, lr}
2000352a:	b084      	sub	sp, #16
2000352c:	af00      	add	r7, sp, #0
2000352e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
20003530:	2300      	movs	r3, #0
20003532:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_SAIACLK_SOURCE(RCC_SAIBlockACLKSource));
  
  tmpreg = RCC->DCKCFGR;
20003534:	4a09      	ldr	r2, [pc, #36]	; (2000355c <RCC_SAIBlockACLKConfig+0x34>)
20003536:	238c      	movs	r3, #140	; 0x8c
20003538:	58d3      	ldr	r3, [r2, r3]
2000353a:	60fb      	str	r3, [r7, #12]

  /* Clear RCC_DCKCFGR_SAI1ASRC[1:0] bits */
  tmpreg &= ~RCC_DCKCFGR_SAI1ASRC;
2000353c:	68fb      	ldr	r3, [r7, #12]
2000353e:	4a08      	ldr	r2, [pc, #32]	; (20003560 <RCC_SAIBlockACLKConfig+0x38>)
20003540:	4013      	ands	r3, r2
20003542:	60fb      	str	r3, [r7, #12]

  /* Set SAI Block A source selection value */
  tmpreg |= RCC_SAIBlockACLKSource;
20003544:	68fa      	ldr	r2, [r7, #12]
20003546:	687b      	ldr	r3, [r7, #4]
20003548:	4313      	orrs	r3, r2
2000354a:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->DCKCFGR = tmpreg;
2000354c:	4903      	ldr	r1, [pc, #12]	; (2000355c <RCC_SAIBlockACLKConfig+0x34>)
2000354e:	228c      	movs	r2, #140	; 0x8c
20003550:	68fb      	ldr	r3, [r7, #12]
20003552:	508b      	str	r3, [r1, r2]
}
20003554:	46c0      	nop			; (mov r8, r8)
20003556:	46bd      	mov	sp, r7
20003558:	b004      	add	sp, #16
2000355a:	bd80      	pop	{r7, pc}
2000355c:	40023800 	andmi	r3, r2, r0, lsl #16
20003560:	ffcfffff 			; <UNDEFINED> instruction: 0xffcfffff

20003564 <RCC_SAIBlockBCLKConfig>:
  *            @arg RCC_SAIBCLKSource_Ext: External clock mapped on the I2S_CKIN pin
  *                                        used as SAI1 Block B clock
  * @retval None
  */
void RCC_SAIBlockBCLKConfig(uint32_t RCC_SAIBlockBCLKSource)
{
20003564:	b580      	push	{r7, lr}
20003566:	b084      	sub	sp, #16
20003568:	af00      	add	r7, sp, #0
2000356a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
2000356c:	2300      	movs	r3, #0
2000356e:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_SAIBCLK_SOURCE(RCC_SAIBlockBCLKSource));
  
  tmpreg = RCC->DCKCFGR;
20003570:	4a09      	ldr	r2, [pc, #36]	; (20003598 <RCC_SAIBlockBCLKConfig+0x34>)
20003572:	238c      	movs	r3, #140	; 0x8c
20003574:	58d3      	ldr	r3, [r2, r3]
20003576:	60fb      	str	r3, [r7, #12]

  /* Clear RCC_DCKCFGR_SAI1BSRC[1:0] bits */
  tmpreg &= ~RCC_DCKCFGR_SAI1BSRC;
20003578:	68fb      	ldr	r3, [r7, #12]
2000357a:	4a08      	ldr	r2, [pc, #32]	; (2000359c <RCC_SAIBlockBCLKConfig+0x38>)
2000357c:	4013      	ands	r3, r2
2000357e:	60fb      	str	r3, [r7, #12]

  /* Set SAI Block B source selection value */
  tmpreg |= RCC_SAIBlockBCLKSource;
20003580:	68fa      	ldr	r2, [r7, #12]
20003582:	687b      	ldr	r3, [r7, #4]
20003584:	4313      	orrs	r3, r2
20003586:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->DCKCFGR = tmpreg;
20003588:	4903      	ldr	r1, [pc, #12]	; (20003598 <RCC_SAIBlockBCLKConfig+0x34>)
2000358a:	228c      	movs	r2, #140	; 0x8c
2000358c:	68fb      	ldr	r3, [r7, #12]
2000358e:	508b      	str	r3, [r1, r2]
}
20003590:	46c0      	nop			; (mov r8, r8)
20003592:	46bd      	mov	sp, r7
20003594:	b004      	add	sp, #16
20003596:	bd80      	pop	{r7, pc}
20003598:	40023800 	andmi	r3, r2, r0, lsl #16
2000359c:	ff3fffff 			; <UNDEFINED> instruction: 0xff3fffff

200035a0 <RCC_SAIPLLI2SClkDivConfig>:
  *          SAI1 clock frequency = f(PLLI2S_Q) / RCC_PLLI2SDivQ 
  *              
  * @retval None
  */
void RCC_SAIPLLI2SClkDivConfig(uint32_t RCC_PLLI2SDivQ)  
{
200035a0:	b580      	push	{r7, lr}
200035a2:	b084      	sub	sp, #16
200035a4:	af00      	add	r7, sp, #0
200035a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
200035a8:	2300      	movs	r3, #0
200035aa:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(RCC_PLLI2SDivQ));
  
  tmpreg = RCC->DCKCFGR;
200035ac:	4a0a      	ldr	r2, [pc, #40]	; (200035d8 <RCC_SAIPLLI2SClkDivConfig+0x38>)
200035ae:	238c      	movs	r3, #140	; 0x8c
200035b0:	58d3      	ldr	r3, [r2, r3]
200035b2:	60fb      	str	r3, [r7, #12]

  /* Clear PLLI2SDIVQ[4:0] bits */
  tmpreg &= ~(RCC_DCKCFGR_PLLI2SDIVQ);
200035b4:	68fb      	ldr	r3, [r7, #12]
200035b6:	221f      	movs	r2, #31
200035b8:	4393      	bics	r3, r2
200035ba:	60fb      	str	r3, [r7, #12]

  /* Set PLLI2SDIVQ values */
  tmpreg |= (RCC_PLLI2SDivQ - 1);
200035bc:	687b      	ldr	r3, [r7, #4]
200035be:	3b01      	subs	r3, #1
200035c0:	68fa      	ldr	r2, [r7, #12]
200035c2:	4313      	orrs	r3, r2
200035c4:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->DCKCFGR = tmpreg;
200035c6:	4904      	ldr	r1, [pc, #16]	; (200035d8 <RCC_SAIPLLI2SClkDivConfig+0x38>)
200035c8:	228c      	movs	r2, #140	; 0x8c
200035ca:	68fb      	ldr	r3, [r7, #12]
200035cc:	508b      	str	r3, [r1, r2]
}
200035ce:	46c0      	nop			; (mov r8, r8)
200035d0:	46bd      	mov	sp, r7
200035d2:	b004      	add	sp, #16
200035d4:	bd80      	pop	{r7, pc}
200035d6:	46c0      	nop			; (mov r8, r8)
200035d8:	40023800 	andmi	r3, r2, r0, lsl #16

200035dc <RCC_SAIPLLSAIClkDivConfig>:
  *          SAI1 clock frequency = f(PLLSAI_Q) / RCC_PLLSAIDivQ  
  *              
  * @retval None
  */
void RCC_SAIPLLSAIClkDivConfig(uint32_t RCC_PLLSAIDivQ)  
{
200035dc:	b580      	push	{r7, lr}
200035de:	b084      	sub	sp, #16
200035e0:	af00      	add	r7, sp, #0
200035e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
200035e4:	2300      	movs	r3, #0
200035e6:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(RCC_PLLSAIDivQ));
  
  tmpreg = RCC->DCKCFGR;
200035e8:	4a0a      	ldr	r2, [pc, #40]	; (20003614 <RCC_SAIPLLSAIClkDivConfig+0x38>)
200035ea:	238c      	movs	r3, #140	; 0x8c
200035ec:	58d3      	ldr	r3, [r2, r3]
200035ee:	60fb      	str	r3, [r7, #12]

  /* Clear PLLI2SDIVQ[4:0] and PLLSAIDIVQ[4:0] bits */
  tmpreg &= ~(RCC_DCKCFGR_PLLSAIDIVQ);
200035f0:	68fb      	ldr	r3, [r7, #12]
200035f2:	4a09      	ldr	r2, [pc, #36]	; (20003618 <RCC_SAIPLLSAIClkDivConfig+0x3c>)
200035f4:	4013      	ands	r3, r2
200035f6:	60fb      	str	r3, [r7, #12]

  /* Set PLLSAIDIVQ values */
  tmpreg |= ((RCC_PLLSAIDivQ - 1) << 8);
200035f8:	687b      	ldr	r3, [r7, #4]
200035fa:	3b01      	subs	r3, #1
200035fc:	021b      	lsls	r3, r3, #8
200035fe:	68fa      	ldr	r2, [r7, #12]
20003600:	4313      	orrs	r3, r2
20003602:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->DCKCFGR = tmpreg;
20003604:	4903      	ldr	r1, [pc, #12]	; (20003614 <RCC_SAIPLLSAIClkDivConfig+0x38>)
20003606:	228c      	movs	r2, #140	; 0x8c
20003608:	68fb      	ldr	r3, [r7, #12]
2000360a:	508b      	str	r3, [r1, r2]
}
2000360c:	46c0      	nop			; (mov r8, r8)
2000360e:	46bd      	mov	sp, r7
20003610:	b004      	add	sp, #16
20003612:	bd80      	pop	{r7, pc}
20003614:	40023800 	andmi	r3, r2, r0, lsl #16
20003618:	ffffe0ff 			; <UNDEFINED> instruction: 0xffffe0ff

2000361c <RCC_LTDCCLKDivConfig>:
  *            @arg RCC_PLLSAIDivR_Div16: LTDC clock = f(PLLSAI_R)/16
  *            
  * @retval None
  */
void RCC_LTDCCLKDivConfig(uint32_t RCC_PLLSAIDivR)
{
2000361c:	b580      	push	{r7, lr}
2000361e:	b084      	sub	sp, #16
20003620:	af00      	add	r7, sp, #0
20003622:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
20003624:	2300      	movs	r3, #0
20003626:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_PLLSAI_DIVR_VALUE(RCC_PLLSAIDivR));
  
  tmpreg = RCC->DCKCFGR;
20003628:	4a09      	ldr	r2, [pc, #36]	; (20003650 <RCC_LTDCCLKDivConfig+0x34>)
2000362a:	238c      	movs	r3, #140	; 0x8c
2000362c:	58d3      	ldr	r3, [r2, r3]
2000362e:	60fb      	str	r3, [r7, #12]

  /* Clear PLLSAIDIVR[2:0] bits */
  tmpreg &= ~RCC_DCKCFGR_PLLSAIDIVR;
20003630:	68fb      	ldr	r3, [r7, #12]
20003632:	4a08      	ldr	r2, [pc, #32]	; (20003654 <RCC_LTDCCLKDivConfig+0x38>)
20003634:	4013      	ands	r3, r2
20003636:	60fb      	str	r3, [r7, #12]

  /* Set PLLSAIDIVR values */
  tmpreg |= RCC_PLLSAIDivR;
20003638:	68fa      	ldr	r2, [r7, #12]
2000363a:	687b      	ldr	r3, [r7, #4]
2000363c:	4313      	orrs	r3, r2
2000363e:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->DCKCFGR = tmpreg;
20003640:	4903      	ldr	r1, [pc, #12]	; (20003650 <RCC_LTDCCLKDivConfig+0x34>)
20003642:	228c      	movs	r2, #140	; 0x8c
20003644:	68fb      	ldr	r3, [r7, #12]
20003646:	508b      	str	r3, [r1, r2]
}
20003648:	46c0      	nop			; (mov r8, r8)
2000364a:	46bd      	mov	sp, r7
2000364c:	b004      	add	sp, #16
2000364e:	bd80      	pop	{r7, pc}
20003650:	40023800 	andmi	r3, r2, r0, lsl #16
20003654:	fffcffff 			; <UNDEFINED> instruction: 0xfffcffff

20003658 <RCC_TIMCLKPresConfig>:
  *                 else it is equal to [(HPRE * PPREx) / 4] if PPREx is corresponding 
  *                 to division by 8 or more.
  * @retval None
  */
void RCC_TIMCLKPresConfig(uint32_t RCC_TIMCLKPrescaler)
{
20003658:	b580      	push	{r7, lr}
2000365a:	b082      	sub	sp, #8
2000365c:	af00      	add	r7, sp, #0
2000365e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_TIMCLK_PRESCALER(RCC_TIMCLKPrescaler));

  *(__IO uint32_t *) DCKCFGR_TIMPRE_BB = RCC_TIMCLKPrescaler;
20003660:	4b03      	ldr	r3, [pc, #12]	; (20003670 <RCC_TIMCLKPresConfig+0x18>)
20003662:	687a      	ldr	r2, [r7, #4]
20003664:	601a      	str	r2, [r3, #0]
}
20003666:	46c0      	nop			; (mov r8, r8)
20003668:	46bd      	mov	sp, r7
2000366a:	b002      	add	sp, #8
2000366c:	bd80      	pop	{r7, pc}
2000366e:	46c0      	nop			; (mov r8, r8)
20003670:	424711e0 	submi	r1, r7, #224, 2	; 0x38

20003674 <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
20003674:	b580      	push	{r7, lr}
20003676:	b082      	sub	sp, #8
20003678:	af00      	add	r7, sp, #0
2000367a:	6078      	str	r0, [r7, #4]
2000367c:	000a      	movs	r2, r1
2000367e:	1cfb      	adds	r3, r7, #3
20003680:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
20003682:	1cfb      	adds	r3, r7, #3
20003684:	781b      	ldrb	r3, [r3, #0]
20003686:	2b00      	cmp	r3, #0
20003688:	d006      	beq.n	20003698 <RCC_AHB1PeriphClockCmd+0x24>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
2000368a:	4b09      	ldr	r3, [pc, #36]	; (200036b0 <RCC_AHB1PeriphClockCmd+0x3c>)
2000368c:	6b19      	ldr	r1, [r3, #48]	; 0x30
2000368e:	4b08      	ldr	r3, [pc, #32]	; (200036b0 <RCC_AHB1PeriphClockCmd+0x3c>)
20003690:	687a      	ldr	r2, [r7, #4]
20003692:	430a      	orrs	r2, r1
20003694:	631a      	str	r2, [r3, #48]	; 0x30
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
  }
}
20003696:	e006      	b.n	200036a6 <RCC_AHB1PeriphClockCmd+0x32>
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
20003698:	4b05      	ldr	r3, [pc, #20]	; (200036b0 <RCC_AHB1PeriphClockCmd+0x3c>)
2000369a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
2000369c:	687b      	ldr	r3, [r7, #4]
2000369e:	43d9      	mvns	r1, r3
200036a0:	4b03      	ldr	r3, [pc, #12]	; (200036b0 <RCC_AHB1PeriphClockCmd+0x3c>)
200036a2:	400a      	ands	r2, r1
200036a4:	631a      	str	r2, [r3, #48]	; 0x30
}
200036a6:	46c0      	nop			; (mov r8, r8)
200036a8:	46bd      	mov	sp, r7
200036aa:	b002      	add	sp, #8
200036ac:	bd80      	pop	{r7, pc}
200036ae:	46c0      	nop			; (mov r8, r8)
200036b0:	40023800 	andmi	r3, r2, r0, lsl #16

200036b4 <RCC_AHB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB2PeriphClockCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
{
200036b4:	b580      	push	{r7, lr}
200036b6:	b082      	sub	sp, #8
200036b8:	af00      	add	r7, sp, #0
200036ba:	6078      	str	r0, [r7, #4]
200036bc:	000a      	movs	r2, r1
200036be:	1cfb      	adds	r3, r7, #3
200036c0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
200036c2:	1cfb      	adds	r3, r7, #3
200036c4:	781b      	ldrb	r3, [r3, #0]
200036c6:	2b00      	cmp	r3, #0
200036c8:	d006      	beq.n	200036d8 <RCC_AHB2PeriphClockCmd+0x24>
  {
    RCC->AHB2ENR |= RCC_AHB2Periph;
200036ca:	4b09      	ldr	r3, [pc, #36]	; (200036f0 <RCC_AHB2PeriphClockCmd+0x3c>)
200036cc:	6b59      	ldr	r1, [r3, #52]	; 0x34
200036ce:	4b08      	ldr	r3, [pc, #32]	; (200036f0 <RCC_AHB2PeriphClockCmd+0x3c>)
200036d0:	687a      	ldr	r2, [r7, #4]
200036d2:	430a      	orrs	r2, r1
200036d4:	635a      	str	r2, [r3, #52]	; 0x34
  }
  else
  {
    RCC->AHB2ENR &= ~RCC_AHB2Periph;
  }
}
200036d6:	e006      	b.n	200036e6 <RCC_AHB2PeriphClockCmd+0x32>
    RCC->AHB2ENR &= ~RCC_AHB2Periph;
200036d8:	4b05      	ldr	r3, [pc, #20]	; (200036f0 <RCC_AHB2PeriphClockCmd+0x3c>)
200036da:	6b5a      	ldr	r2, [r3, #52]	; 0x34
200036dc:	687b      	ldr	r3, [r7, #4]
200036de:	43d9      	mvns	r1, r3
200036e0:	4b03      	ldr	r3, [pc, #12]	; (200036f0 <RCC_AHB2PeriphClockCmd+0x3c>)
200036e2:	400a      	ands	r2, r1
200036e4:	635a      	str	r2, [r3, #52]	; 0x34
}
200036e6:	46c0      	nop			; (mov r8, r8)
200036e8:	46bd      	mov	sp, r7
200036ea:	b002      	add	sp, #8
200036ec:	bd80      	pop	{r7, pc}
200036ee:	46c0      	nop			; (mov r8, r8)
200036f0:	40023800 	andmi	r3, r2, r0, lsl #16

200036f4 <RCC_AHB3PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB3PeriphClockCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
{
200036f4:	b580      	push	{r7, lr}
200036f6:	b082      	sub	sp, #8
200036f8:	af00      	add	r7, sp, #0
200036fa:	6078      	str	r0, [r7, #4]
200036fc:	000a      	movs	r2, r1
200036fe:	1cfb      	adds	r3, r7, #3
20003700:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
20003702:	1cfb      	adds	r3, r7, #3
20003704:	781b      	ldrb	r3, [r3, #0]
20003706:	2b00      	cmp	r3, #0
20003708:	d006      	beq.n	20003718 <RCC_AHB3PeriphClockCmd+0x24>
  {
    RCC->AHB3ENR |= RCC_AHB3Periph;
2000370a:	4b09      	ldr	r3, [pc, #36]	; (20003730 <RCC_AHB3PeriphClockCmd+0x3c>)
2000370c:	6b99      	ldr	r1, [r3, #56]	; 0x38
2000370e:	4b08      	ldr	r3, [pc, #32]	; (20003730 <RCC_AHB3PeriphClockCmd+0x3c>)
20003710:	687a      	ldr	r2, [r7, #4]
20003712:	430a      	orrs	r2, r1
20003714:	639a      	str	r2, [r3, #56]	; 0x38
  }
  else
  {
    RCC->AHB3ENR &= ~RCC_AHB3Periph;
  }
}
20003716:	e006      	b.n	20003726 <RCC_AHB3PeriphClockCmd+0x32>
    RCC->AHB3ENR &= ~RCC_AHB3Periph;
20003718:	4b05      	ldr	r3, [pc, #20]	; (20003730 <RCC_AHB3PeriphClockCmd+0x3c>)
2000371a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
2000371c:	687b      	ldr	r3, [r7, #4]
2000371e:	43d9      	mvns	r1, r3
20003720:	4b03      	ldr	r3, [pc, #12]	; (20003730 <RCC_AHB3PeriphClockCmd+0x3c>)
20003722:	400a      	ands	r2, r1
20003724:	639a      	str	r2, [r3, #56]	; 0x38
}
20003726:	46c0      	nop			; (mov r8, r8)
20003728:	46bd      	mov	sp, r7
2000372a:	b002      	add	sp, #8
2000372c:	bd80      	pop	{r7, pc}
2000372e:	46c0      	nop			; (mov r8, r8)
20003730:	40023800 	andmi	r3, r2, r0, lsl #16

20003734 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
20003734:	b580      	push	{r7, lr}
20003736:	b082      	sub	sp, #8
20003738:	af00      	add	r7, sp, #0
2000373a:	6078      	str	r0, [r7, #4]
2000373c:	000a      	movs	r2, r1
2000373e:	1cfb      	adds	r3, r7, #3
20003740:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
20003742:	1cfb      	adds	r3, r7, #3
20003744:	781b      	ldrb	r3, [r3, #0]
20003746:	2b00      	cmp	r3, #0
20003748:	d006      	beq.n	20003758 <RCC_APB1PeriphClockCmd+0x24>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
2000374a:	4b09      	ldr	r3, [pc, #36]	; (20003770 <RCC_APB1PeriphClockCmd+0x3c>)
2000374c:	6c19      	ldr	r1, [r3, #64]	; 0x40
2000374e:	4b08      	ldr	r3, [pc, #32]	; (20003770 <RCC_APB1PeriphClockCmd+0x3c>)
20003750:	687a      	ldr	r2, [r7, #4]
20003752:	430a      	orrs	r2, r1
20003754:	641a      	str	r2, [r3, #64]	; 0x40
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
20003756:	e006      	b.n	20003766 <RCC_APB1PeriphClockCmd+0x32>
    RCC->APB1ENR &= ~RCC_APB1Periph;
20003758:	4b05      	ldr	r3, [pc, #20]	; (20003770 <RCC_APB1PeriphClockCmd+0x3c>)
2000375a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
2000375c:	687b      	ldr	r3, [r7, #4]
2000375e:	43d9      	mvns	r1, r3
20003760:	4b03      	ldr	r3, [pc, #12]	; (20003770 <RCC_APB1PeriphClockCmd+0x3c>)
20003762:	400a      	ands	r2, r1
20003764:	641a      	str	r2, [r3, #64]	; 0x40
}
20003766:	46c0      	nop			; (mov r8, r8)
20003768:	46bd      	mov	sp, r7
2000376a:	b002      	add	sp, #8
2000376c:	bd80      	pop	{r7, pc}
2000376e:	46c0      	nop			; (mov r8, r8)
20003770:	40023800 	andmi	r3, r2, r0, lsl #16

20003774 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
20003774:	b580      	push	{r7, lr}
20003776:	b082      	sub	sp, #8
20003778:	af00      	add	r7, sp, #0
2000377a:	6078      	str	r0, [r7, #4]
2000377c:	000a      	movs	r2, r1
2000377e:	1cfb      	adds	r3, r7, #3
20003780:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
20003782:	1cfb      	adds	r3, r7, #3
20003784:	781b      	ldrb	r3, [r3, #0]
20003786:	2b00      	cmp	r3, #0
20003788:	d006      	beq.n	20003798 <RCC_APB2PeriphClockCmd+0x24>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
2000378a:	4b09      	ldr	r3, [pc, #36]	; (200037b0 <RCC_APB2PeriphClockCmd+0x3c>)
2000378c:	6c59      	ldr	r1, [r3, #68]	; 0x44
2000378e:	4b08      	ldr	r3, [pc, #32]	; (200037b0 <RCC_APB2PeriphClockCmd+0x3c>)
20003790:	687a      	ldr	r2, [r7, #4]
20003792:	430a      	orrs	r2, r1
20003794:	645a      	str	r2, [r3, #68]	; 0x44
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
20003796:	e006      	b.n	200037a6 <RCC_APB2PeriphClockCmd+0x32>
    RCC->APB2ENR &= ~RCC_APB2Periph;
20003798:	4b05      	ldr	r3, [pc, #20]	; (200037b0 <RCC_APB2PeriphClockCmd+0x3c>)
2000379a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
2000379c:	687b      	ldr	r3, [r7, #4]
2000379e:	43d9      	mvns	r1, r3
200037a0:	4b03      	ldr	r3, [pc, #12]	; (200037b0 <RCC_APB2PeriphClockCmd+0x3c>)
200037a2:	400a      	ands	r2, r1
200037a4:	645a      	str	r2, [r3, #68]	; 0x44
}
200037a6:	46c0      	nop			; (mov r8, r8)
200037a8:	46bd      	mov	sp, r7
200037aa:	b002      	add	sp, #8
200037ac:	bd80      	pop	{r7, pc}
200037ae:	46c0      	nop			; (mov r8, r8)
200037b0:	40023800 	andmi	r3, r2, r0, lsl #16

200037b4 <RCC_AHB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphResetCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
200037b4:	b580      	push	{r7, lr}
200037b6:	b082      	sub	sp, #8
200037b8:	af00      	add	r7, sp, #0
200037ba:	6078      	str	r0, [r7, #4]
200037bc:	000a      	movs	r2, r1
200037be:	1cfb      	adds	r3, r7, #3
200037c0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_RESET_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
200037c2:	1cfb      	adds	r3, r7, #3
200037c4:	781b      	ldrb	r3, [r3, #0]
200037c6:	2b00      	cmp	r3, #0
200037c8:	d006      	beq.n	200037d8 <RCC_AHB1PeriphResetCmd+0x24>
  {
    RCC->AHB1RSTR |= RCC_AHB1Periph;
200037ca:	4b09      	ldr	r3, [pc, #36]	; (200037f0 <RCC_AHB1PeriphResetCmd+0x3c>)
200037cc:	6919      	ldr	r1, [r3, #16]
200037ce:	4b08      	ldr	r3, [pc, #32]	; (200037f0 <RCC_AHB1PeriphResetCmd+0x3c>)
200037d0:	687a      	ldr	r2, [r7, #4]
200037d2:	430a      	orrs	r2, r1
200037d4:	611a      	str	r2, [r3, #16]
  }
  else
  {
    RCC->AHB1RSTR &= ~RCC_AHB1Periph;
  }
}
200037d6:	e006      	b.n	200037e6 <RCC_AHB1PeriphResetCmd+0x32>
    RCC->AHB1RSTR &= ~RCC_AHB1Periph;
200037d8:	4b05      	ldr	r3, [pc, #20]	; (200037f0 <RCC_AHB1PeriphResetCmd+0x3c>)
200037da:	691a      	ldr	r2, [r3, #16]
200037dc:	687b      	ldr	r3, [r7, #4]
200037de:	43d9      	mvns	r1, r3
200037e0:	4b03      	ldr	r3, [pc, #12]	; (200037f0 <RCC_AHB1PeriphResetCmd+0x3c>)
200037e2:	400a      	ands	r2, r1
200037e4:	611a      	str	r2, [r3, #16]
}
200037e6:	46c0      	nop			; (mov r8, r8)
200037e8:	46bd      	mov	sp, r7
200037ea:	b002      	add	sp, #8
200037ec:	bd80      	pop	{r7, pc}
200037ee:	46c0      	nop			; (mov r8, r8)
200037f0:	40023800 	andmi	r3, r2, r0, lsl #16

200037f4 <RCC_AHB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB2PeriphResetCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
{
200037f4:	b580      	push	{r7, lr}
200037f6:	b082      	sub	sp, #8
200037f8:	af00      	add	r7, sp, #0
200037fa:	6078      	str	r0, [r7, #4]
200037fc:	000a      	movs	r2, r1
200037fe:	1cfb      	adds	r3, r7, #3
20003800:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
20003802:	1cfb      	adds	r3, r7, #3
20003804:	781b      	ldrb	r3, [r3, #0]
20003806:	2b00      	cmp	r3, #0
20003808:	d006      	beq.n	20003818 <RCC_AHB2PeriphResetCmd+0x24>
  {
    RCC->AHB2RSTR |= RCC_AHB2Periph;
2000380a:	4b09      	ldr	r3, [pc, #36]	; (20003830 <RCC_AHB2PeriphResetCmd+0x3c>)
2000380c:	6959      	ldr	r1, [r3, #20]
2000380e:	4b08      	ldr	r3, [pc, #32]	; (20003830 <RCC_AHB2PeriphResetCmd+0x3c>)
20003810:	687a      	ldr	r2, [r7, #4]
20003812:	430a      	orrs	r2, r1
20003814:	615a      	str	r2, [r3, #20]
  }
  else
  {
    RCC->AHB2RSTR &= ~RCC_AHB2Periph;
  }
}
20003816:	e006      	b.n	20003826 <RCC_AHB2PeriphResetCmd+0x32>
    RCC->AHB2RSTR &= ~RCC_AHB2Periph;
20003818:	4b05      	ldr	r3, [pc, #20]	; (20003830 <RCC_AHB2PeriphResetCmd+0x3c>)
2000381a:	695a      	ldr	r2, [r3, #20]
2000381c:	687b      	ldr	r3, [r7, #4]
2000381e:	43d9      	mvns	r1, r3
20003820:	4b03      	ldr	r3, [pc, #12]	; (20003830 <RCC_AHB2PeriphResetCmd+0x3c>)
20003822:	400a      	ands	r2, r1
20003824:	615a      	str	r2, [r3, #20]
}
20003826:	46c0      	nop			; (mov r8, r8)
20003828:	46bd      	mov	sp, r7
2000382a:	b002      	add	sp, #8
2000382c:	bd80      	pop	{r7, pc}
2000382e:	46c0      	nop			; (mov r8, r8)
20003830:	40023800 	andmi	r3, r2, r0, lsl #16

20003834 <RCC_AHB3PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB3PeriphResetCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
{
20003834:	b580      	push	{r7, lr}
20003836:	b082      	sub	sp, #8
20003838:	af00      	add	r7, sp, #0
2000383a:	6078      	str	r0, [r7, #4]
2000383c:	000a      	movs	r2, r1
2000383e:	1cfb      	adds	r3, r7, #3
20003840:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
20003842:	1cfb      	adds	r3, r7, #3
20003844:	781b      	ldrb	r3, [r3, #0]
20003846:	2b00      	cmp	r3, #0
20003848:	d006      	beq.n	20003858 <RCC_AHB3PeriphResetCmd+0x24>
  {
    RCC->AHB3RSTR |= RCC_AHB3Periph;
2000384a:	4b09      	ldr	r3, [pc, #36]	; (20003870 <RCC_AHB3PeriphResetCmd+0x3c>)
2000384c:	6999      	ldr	r1, [r3, #24]
2000384e:	4b08      	ldr	r3, [pc, #32]	; (20003870 <RCC_AHB3PeriphResetCmd+0x3c>)
20003850:	687a      	ldr	r2, [r7, #4]
20003852:	430a      	orrs	r2, r1
20003854:	619a      	str	r2, [r3, #24]
  }
  else
  {
    RCC->AHB3RSTR &= ~RCC_AHB3Periph;
  }
}
20003856:	e006      	b.n	20003866 <RCC_AHB3PeriphResetCmd+0x32>
    RCC->AHB3RSTR &= ~RCC_AHB3Periph;
20003858:	4b05      	ldr	r3, [pc, #20]	; (20003870 <RCC_AHB3PeriphResetCmd+0x3c>)
2000385a:	699a      	ldr	r2, [r3, #24]
2000385c:	687b      	ldr	r3, [r7, #4]
2000385e:	43d9      	mvns	r1, r3
20003860:	4b03      	ldr	r3, [pc, #12]	; (20003870 <RCC_AHB3PeriphResetCmd+0x3c>)
20003862:	400a      	ands	r2, r1
20003864:	619a      	str	r2, [r3, #24]
}
20003866:	46c0      	nop			; (mov r8, r8)
20003868:	46bd      	mov	sp, r7
2000386a:	b002      	add	sp, #8
2000386c:	bd80      	pop	{r7, pc}
2000386e:	46c0      	nop			; (mov r8, r8)
20003870:	40023800 	andmi	r3, r2, r0, lsl #16

20003874 <RCC_APB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
20003874:	b580      	push	{r7, lr}
20003876:	b082      	sub	sp, #8
20003878:	af00      	add	r7, sp, #0
2000387a:	6078      	str	r0, [r7, #4]
2000387c:	000a      	movs	r2, r1
2000387e:	1cfb      	adds	r3, r7, #3
20003880:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
20003882:	1cfb      	adds	r3, r7, #3
20003884:	781b      	ldrb	r3, [r3, #0]
20003886:	2b00      	cmp	r3, #0
20003888:	d006      	beq.n	20003898 <RCC_APB1PeriphResetCmd+0x24>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
2000388a:	4b09      	ldr	r3, [pc, #36]	; (200038b0 <RCC_APB1PeriphResetCmd+0x3c>)
2000388c:	6a19      	ldr	r1, [r3, #32]
2000388e:	4b08      	ldr	r3, [pc, #32]	; (200038b0 <RCC_APB1PeriphResetCmd+0x3c>)
20003890:	687a      	ldr	r2, [r7, #4]
20003892:	430a      	orrs	r2, r1
20003894:	621a      	str	r2, [r3, #32]
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
  }
}
20003896:	e006      	b.n	200038a6 <RCC_APB1PeriphResetCmd+0x32>
    RCC->APB1RSTR &= ~RCC_APB1Periph;
20003898:	4b05      	ldr	r3, [pc, #20]	; (200038b0 <RCC_APB1PeriphResetCmd+0x3c>)
2000389a:	6a1a      	ldr	r2, [r3, #32]
2000389c:	687b      	ldr	r3, [r7, #4]
2000389e:	43d9      	mvns	r1, r3
200038a0:	4b03      	ldr	r3, [pc, #12]	; (200038b0 <RCC_APB1PeriphResetCmd+0x3c>)
200038a2:	400a      	ands	r2, r1
200038a4:	621a      	str	r2, [r3, #32]
}
200038a6:	46c0      	nop			; (mov r8, r8)
200038a8:	46bd      	mov	sp, r7
200038aa:	b002      	add	sp, #8
200038ac:	bd80      	pop	{r7, pc}
200038ae:	46c0      	nop			; (mov r8, r8)
200038b0:	40023800 	andmi	r3, r2, r0, lsl #16

200038b4 <RCC_APB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
200038b4:	b580      	push	{r7, lr}
200038b6:	b082      	sub	sp, #8
200038b8:	af00      	add	r7, sp, #0
200038ba:	6078      	str	r0, [r7, #4]
200038bc:	000a      	movs	r2, r1
200038be:	1cfb      	adds	r3, r7, #3
200038c0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_RESET_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
200038c2:	1cfb      	adds	r3, r7, #3
200038c4:	781b      	ldrb	r3, [r3, #0]
200038c6:	2b00      	cmp	r3, #0
200038c8:	d006      	beq.n	200038d8 <RCC_APB2PeriphResetCmd+0x24>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
200038ca:	4b09      	ldr	r3, [pc, #36]	; (200038f0 <RCC_APB2PeriphResetCmd+0x3c>)
200038cc:	6a59      	ldr	r1, [r3, #36]	; 0x24
200038ce:	4b08      	ldr	r3, [pc, #32]	; (200038f0 <RCC_APB2PeriphResetCmd+0x3c>)
200038d0:	687a      	ldr	r2, [r7, #4]
200038d2:	430a      	orrs	r2, r1
200038d4:	625a      	str	r2, [r3, #36]	; 0x24
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
  }
}
200038d6:	e006      	b.n	200038e6 <RCC_APB2PeriphResetCmd+0x32>
    RCC->APB2RSTR &= ~RCC_APB2Periph;
200038d8:	4b05      	ldr	r3, [pc, #20]	; (200038f0 <RCC_APB2PeriphResetCmd+0x3c>)
200038da:	6a5a      	ldr	r2, [r3, #36]	; 0x24
200038dc:	687b      	ldr	r3, [r7, #4]
200038de:	43d9      	mvns	r1, r3
200038e0:	4b03      	ldr	r3, [pc, #12]	; (200038f0 <RCC_APB2PeriphResetCmd+0x3c>)
200038e2:	400a      	ands	r2, r1
200038e4:	625a      	str	r2, [r3, #36]	; 0x24
}
200038e6:	46c0      	nop			; (mov r8, r8)
200038e8:	46bd      	mov	sp, r7
200038ea:	b002      	add	sp, #8
200038ec:	bd80      	pop	{r7, pc}
200038ee:	46c0      	nop			; (mov r8, r8)
200038f0:	40023800 	andmi	r3, r2, r0, lsl #16

200038f4 <RCC_AHB1PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockLPModeCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
200038f4:	b580      	push	{r7, lr}
200038f6:	b082      	sub	sp, #8
200038f8:	af00      	add	r7, sp, #0
200038fa:	6078      	str	r0, [r7, #4]
200038fc:	000a      	movs	r2, r1
200038fe:	1cfb      	adds	r3, r7, #3
20003900:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_LPMODE_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
20003902:	1cfb      	adds	r3, r7, #3
20003904:	781b      	ldrb	r3, [r3, #0]
20003906:	2b00      	cmp	r3, #0
20003908:	d006      	beq.n	20003918 <RCC_AHB1PeriphClockLPModeCmd+0x24>
  {
    RCC->AHB1LPENR |= RCC_AHB1Periph;
2000390a:	4b09      	ldr	r3, [pc, #36]	; (20003930 <RCC_AHB1PeriphClockLPModeCmd+0x3c>)
2000390c:	6d19      	ldr	r1, [r3, #80]	; 0x50
2000390e:	4b08      	ldr	r3, [pc, #32]	; (20003930 <RCC_AHB1PeriphClockLPModeCmd+0x3c>)
20003910:	687a      	ldr	r2, [r7, #4]
20003912:	430a      	orrs	r2, r1
20003914:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    RCC->AHB1LPENR &= ~RCC_AHB1Periph;
  }
}
20003916:	e006      	b.n	20003926 <RCC_AHB1PeriphClockLPModeCmd+0x32>
    RCC->AHB1LPENR &= ~RCC_AHB1Periph;
20003918:	4b05      	ldr	r3, [pc, #20]	; (20003930 <RCC_AHB1PeriphClockLPModeCmd+0x3c>)
2000391a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
2000391c:	687b      	ldr	r3, [r7, #4]
2000391e:	43d9      	mvns	r1, r3
20003920:	4b03      	ldr	r3, [pc, #12]	; (20003930 <RCC_AHB1PeriphClockLPModeCmd+0x3c>)
20003922:	400a      	ands	r2, r1
20003924:	651a      	str	r2, [r3, #80]	; 0x50
}
20003926:	46c0      	nop			; (mov r8, r8)
20003928:	46bd      	mov	sp, r7
2000392a:	b002      	add	sp, #8
2000392c:	bd80      	pop	{r7, pc}
2000392e:	46c0      	nop			; (mov r8, r8)
20003930:	40023800 	andmi	r3, r2, r0, lsl #16

20003934 <RCC_AHB2PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB2PeriphClockLPModeCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
{
20003934:	b580      	push	{r7, lr}
20003936:	b082      	sub	sp, #8
20003938:	af00      	add	r7, sp, #0
2000393a:	6078      	str	r0, [r7, #4]
2000393c:	000a      	movs	r2, r1
2000393e:	1cfb      	adds	r3, r7, #3
20003940:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
20003942:	1cfb      	adds	r3, r7, #3
20003944:	781b      	ldrb	r3, [r3, #0]
20003946:	2b00      	cmp	r3, #0
20003948:	d006      	beq.n	20003958 <RCC_AHB2PeriphClockLPModeCmd+0x24>
  {
    RCC->AHB2LPENR |= RCC_AHB2Periph;
2000394a:	4b09      	ldr	r3, [pc, #36]	; (20003970 <RCC_AHB2PeriphClockLPModeCmd+0x3c>)
2000394c:	6d59      	ldr	r1, [r3, #84]	; 0x54
2000394e:	4b08      	ldr	r3, [pc, #32]	; (20003970 <RCC_AHB2PeriphClockLPModeCmd+0x3c>)
20003950:	687a      	ldr	r2, [r7, #4]
20003952:	430a      	orrs	r2, r1
20003954:	655a      	str	r2, [r3, #84]	; 0x54
  }
  else
  {
    RCC->AHB2LPENR &= ~RCC_AHB2Periph;
  }
}
20003956:	e006      	b.n	20003966 <RCC_AHB2PeriphClockLPModeCmd+0x32>
    RCC->AHB2LPENR &= ~RCC_AHB2Periph;
20003958:	4b05      	ldr	r3, [pc, #20]	; (20003970 <RCC_AHB2PeriphClockLPModeCmd+0x3c>)
2000395a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
2000395c:	687b      	ldr	r3, [r7, #4]
2000395e:	43d9      	mvns	r1, r3
20003960:	4b03      	ldr	r3, [pc, #12]	; (20003970 <RCC_AHB2PeriphClockLPModeCmd+0x3c>)
20003962:	400a      	ands	r2, r1
20003964:	655a      	str	r2, [r3, #84]	; 0x54
}
20003966:	46c0      	nop			; (mov r8, r8)
20003968:	46bd      	mov	sp, r7
2000396a:	b002      	add	sp, #8
2000396c:	bd80      	pop	{r7, pc}
2000396e:	46c0      	nop			; (mov r8, r8)
20003970:	40023800 	andmi	r3, r2, r0, lsl #16

20003974 <RCC_AHB3PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB3PeriphClockLPModeCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
{
20003974:	b580      	push	{r7, lr}
20003976:	b082      	sub	sp, #8
20003978:	af00      	add	r7, sp, #0
2000397a:	6078      	str	r0, [r7, #4]
2000397c:	000a      	movs	r2, r1
2000397e:	1cfb      	adds	r3, r7, #3
20003980:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
20003982:	1cfb      	adds	r3, r7, #3
20003984:	781b      	ldrb	r3, [r3, #0]
20003986:	2b00      	cmp	r3, #0
20003988:	d006      	beq.n	20003998 <RCC_AHB3PeriphClockLPModeCmd+0x24>
  {
    RCC->AHB3LPENR |= RCC_AHB3Periph;
2000398a:	4b09      	ldr	r3, [pc, #36]	; (200039b0 <RCC_AHB3PeriphClockLPModeCmd+0x3c>)
2000398c:	6d99      	ldr	r1, [r3, #88]	; 0x58
2000398e:	4b08      	ldr	r3, [pc, #32]	; (200039b0 <RCC_AHB3PeriphClockLPModeCmd+0x3c>)
20003990:	687a      	ldr	r2, [r7, #4]
20003992:	430a      	orrs	r2, r1
20003994:	659a      	str	r2, [r3, #88]	; 0x58
  }
  else
  {
    RCC->AHB3LPENR &= ~RCC_AHB3Periph;
  }
}
20003996:	e006      	b.n	200039a6 <RCC_AHB3PeriphClockLPModeCmd+0x32>
    RCC->AHB3LPENR &= ~RCC_AHB3Periph;
20003998:	4b05      	ldr	r3, [pc, #20]	; (200039b0 <RCC_AHB3PeriphClockLPModeCmd+0x3c>)
2000399a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
2000399c:	687b      	ldr	r3, [r7, #4]
2000399e:	43d9      	mvns	r1, r3
200039a0:	4b03      	ldr	r3, [pc, #12]	; (200039b0 <RCC_AHB3PeriphClockLPModeCmd+0x3c>)
200039a2:	400a      	ands	r2, r1
200039a4:	659a      	str	r2, [r3, #88]	; 0x58
}
200039a6:	46c0      	nop			; (mov r8, r8)
200039a8:	46bd      	mov	sp, r7
200039aa:	b002      	add	sp, #8
200039ac:	bd80      	pop	{r7, pc}
200039ae:	46c0      	nop			; (mov r8, r8)
200039b0:	40023800 	andmi	r3, r2, r0, lsl #16

200039b4 <RCC_APB1PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockLPModeCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
200039b4:	b580      	push	{r7, lr}
200039b6:	b082      	sub	sp, #8
200039b8:	af00      	add	r7, sp, #0
200039ba:	6078      	str	r0, [r7, #4]
200039bc:	000a      	movs	r2, r1
200039be:	1cfb      	adds	r3, r7, #3
200039c0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
200039c2:	1cfb      	adds	r3, r7, #3
200039c4:	781b      	ldrb	r3, [r3, #0]
200039c6:	2b00      	cmp	r3, #0
200039c8:	d006      	beq.n	200039d8 <RCC_APB1PeriphClockLPModeCmd+0x24>
  {
    RCC->APB1LPENR |= RCC_APB1Periph;
200039ca:	4b09      	ldr	r3, [pc, #36]	; (200039f0 <RCC_APB1PeriphClockLPModeCmd+0x3c>)
200039cc:	6e19      	ldr	r1, [r3, #96]	; 0x60
200039ce:	4b08      	ldr	r3, [pc, #32]	; (200039f0 <RCC_APB1PeriphClockLPModeCmd+0x3c>)
200039d0:	687a      	ldr	r2, [r7, #4]
200039d2:	430a      	orrs	r2, r1
200039d4:	661a      	str	r2, [r3, #96]	; 0x60
  }
  else
  {
    RCC->APB1LPENR &= ~RCC_APB1Periph;
  }
}
200039d6:	e006      	b.n	200039e6 <RCC_APB1PeriphClockLPModeCmd+0x32>
    RCC->APB1LPENR &= ~RCC_APB1Periph;
200039d8:	4b05      	ldr	r3, [pc, #20]	; (200039f0 <RCC_APB1PeriphClockLPModeCmd+0x3c>)
200039da:	6e1a      	ldr	r2, [r3, #96]	; 0x60
200039dc:	687b      	ldr	r3, [r7, #4]
200039de:	43d9      	mvns	r1, r3
200039e0:	4b03      	ldr	r3, [pc, #12]	; (200039f0 <RCC_APB1PeriphClockLPModeCmd+0x3c>)
200039e2:	400a      	ands	r2, r1
200039e4:	661a      	str	r2, [r3, #96]	; 0x60
}
200039e6:	46c0      	nop			; (mov r8, r8)
200039e8:	46bd      	mov	sp, r7
200039ea:	b002      	add	sp, #8
200039ec:	bd80      	pop	{r7, pc}
200039ee:	46c0      	nop			; (mov r8, r8)
200039f0:	40023800 	andmi	r3, r2, r0, lsl #16

200039f4 <RCC_APB2PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockLPModeCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
200039f4:	b580      	push	{r7, lr}
200039f6:	b082      	sub	sp, #8
200039f8:	af00      	add	r7, sp, #0
200039fa:	6078      	str	r0, [r7, #4]
200039fc:	000a      	movs	r2, r1
200039fe:	1cfb      	adds	r3, r7, #3
20003a00:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
20003a02:	1cfb      	adds	r3, r7, #3
20003a04:	781b      	ldrb	r3, [r3, #0]
20003a06:	2b00      	cmp	r3, #0
20003a08:	d006      	beq.n	20003a18 <RCC_APB2PeriphClockLPModeCmd+0x24>
  {
    RCC->APB2LPENR |= RCC_APB2Periph;
20003a0a:	4b09      	ldr	r3, [pc, #36]	; (20003a30 <RCC_APB2PeriphClockLPModeCmd+0x3c>)
20003a0c:	6e59      	ldr	r1, [r3, #100]	; 0x64
20003a0e:	4b08      	ldr	r3, [pc, #32]	; (20003a30 <RCC_APB2PeriphClockLPModeCmd+0x3c>)
20003a10:	687a      	ldr	r2, [r7, #4]
20003a12:	430a      	orrs	r2, r1
20003a14:	665a      	str	r2, [r3, #100]	; 0x64
  }
  else
  {
    RCC->APB2LPENR &= ~RCC_APB2Periph;
  }
}
20003a16:	e006      	b.n	20003a26 <RCC_APB2PeriphClockLPModeCmd+0x32>
    RCC->APB2LPENR &= ~RCC_APB2Periph;
20003a18:	4b05      	ldr	r3, [pc, #20]	; (20003a30 <RCC_APB2PeriphClockLPModeCmd+0x3c>)
20003a1a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
20003a1c:	687b      	ldr	r3, [r7, #4]
20003a1e:	43d9      	mvns	r1, r3
20003a20:	4b03      	ldr	r3, [pc, #12]	; (20003a30 <RCC_APB2PeriphClockLPModeCmd+0x3c>)
20003a22:	400a      	ands	r2, r1
20003a24:	665a      	str	r2, [r3, #100]	; 0x64
}
20003a26:	46c0      	nop			; (mov r8, r8)
20003a28:	46bd      	mov	sp, r7
20003a2a:	b002      	add	sp, #8
20003a2c:	bd80      	pop	{r7, pc}
20003a2e:	46c0      	nop			; (mov r8, r8)
20003a30:	40023800 	andmi	r3, r2, r0, lsl #16

20003a34 <RCC_LSEModeConfig>:
  *            @arg RCC_LSE_LOWPOWER_MODE:  LSE oscillator in low power mode.
  *            @arg RCC_LSE_HIGHDRIVE_MODE: LSE oscillator in High Drive mode.
  * @retval None
  */
void RCC_LSEModeConfig(uint8_t RCC_Mode)
{
20003a34:	b580      	push	{r7, lr}
20003a36:	b082      	sub	sp, #8
20003a38:	af00      	add	r7, sp, #0
20003a3a:	0002      	movs	r2, r0
20003a3c:	1dfb      	adds	r3, r7, #7
20003a3e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_LSE_MODE(RCC_Mode));
  
  if(RCC_Mode == RCC_LSE_HIGHDRIVE_MODE)
20003a40:	1dfb      	adds	r3, r7, #7
20003a42:	781b      	ldrb	r3, [r3, #0]
20003a44:	2b01      	cmp	r3, #1
20003a46:	d106      	bne.n	20003a56 <RCC_LSEModeConfig+0x22>
  {
    SET_BIT(RCC->BDCR, RCC_BDCR_LSEMOD);
20003a48:	4b08      	ldr	r3, [pc, #32]	; (20003a6c <RCC_LSEModeConfig+0x38>)
20003a4a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
20003a4c:	4b07      	ldr	r3, [pc, #28]	; (20003a6c <RCC_LSEModeConfig+0x38>)
20003a4e:	2108      	movs	r1, #8
20003a50:	430a      	orrs	r2, r1
20003a52:	671a      	str	r2, [r3, #112]	; 0x70
  }
  else
  {
    CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEMOD);
  }
}
20003a54:	e005      	b.n	20003a62 <RCC_LSEModeConfig+0x2e>
    CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEMOD);
20003a56:	4b05      	ldr	r3, [pc, #20]	; (20003a6c <RCC_LSEModeConfig+0x38>)
20003a58:	6f1a      	ldr	r2, [r3, #112]	; 0x70
20003a5a:	4b04      	ldr	r3, [pc, #16]	; (20003a6c <RCC_LSEModeConfig+0x38>)
20003a5c:	2108      	movs	r1, #8
20003a5e:	438a      	bics	r2, r1
20003a60:	671a      	str	r2, [r3, #112]	; 0x70
}
20003a62:	46c0      	nop			; (mov r8, r8)
20003a64:	46bd      	mov	sp, r7
20003a66:	b002      	add	sp, #8
20003a68:	bd80      	pop	{r7, pc}
20003a6a:	46c0      	nop			; (mov r8, r8)
20003a6c:	40023800 	andmi	r3, r2, r0, lsl #16

20003a70 <RCC_ITConfig>:
  * @param  NewState: new state of the specified RCC interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_ITConfig(uint8_t RCC_IT, FunctionalState NewState)
{
20003a70:	b580      	push	{r7, lr}
20003a72:	b082      	sub	sp, #8
20003a74:	af00      	add	r7, sp, #0
20003a76:	0002      	movs	r2, r0
20003a78:	1dfb      	adds	r3, r7, #7
20003a7a:	701a      	strb	r2, [r3, #0]
20003a7c:	1dbb      	adds	r3, r7, #6
20003a7e:	1c0a      	adds	r2, r1, #0
20003a80:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_IT(RCC_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
20003a82:	1dbb      	adds	r3, r7, #6
20003a84:	781b      	ldrb	r3, [r3, #0]
20003a86:	2b00      	cmp	r3, #0
20003a88:	d009      	beq.n	20003a9e <RCC_ITConfig+0x2e>
  {
    /* Perform Byte access to RCC_CIR[14:8] bits to enable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS |= RCC_IT;
20003a8a:	4b0c      	ldr	r3, [pc, #48]	; (20003abc <RCC_ITConfig+0x4c>)
20003a8c:	781b      	ldrb	r3, [r3, #0]
20003a8e:	b2da      	uxtb	r2, r3
20003a90:	490a      	ldr	r1, [pc, #40]	; (20003abc <RCC_ITConfig+0x4c>)
20003a92:	1dfb      	adds	r3, r7, #7
20003a94:	781b      	ldrb	r3, [r3, #0]
20003a96:	4313      	orrs	r3, r2
20003a98:	b2db      	uxtb	r3, r3
20003a9a:	700b      	strb	r3, [r1, #0]
  else
  {
    /* Perform Byte access to RCC_CIR[14:8] bits to disable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS &= (uint8_t)~RCC_IT;
  }
}
20003a9c:	e00a      	b.n	20003ab4 <RCC_ITConfig+0x44>
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS &= (uint8_t)~RCC_IT;
20003a9e:	4b07      	ldr	r3, [pc, #28]	; (20003abc <RCC_ITConfig+0x4c>)
20003aa0:	781b      	ldrb	r3, [r3, #0]
20003aa2:	b2db      	uxtb	r3, r3
20003aa4:	1dfa      	adds	r2, r7, #7
20003aa6:	7812      	ldrb	r2, [r2, #0]
20003aa8:	43d2      	mvns	r2, r2
20003aaa:	b2d2      	uxtb	r2, r2
20003aac:	4903      	ldr	r1, [pc, #12]	; (20003abc <RCC_ITConfig+0x4c>)
20003aae:	4013      	ands	r3, r2
20003ab0:	b2db      	uxtb	r3, r3
20003ab2:	700b      	strb	r3, [r1, #0]
}
20003ab4:	46c0      	nop			; (mov r8, r8)
20003ab6:	46bd      	mov	sp, r7
20003ab8:	b002      	add	sp, #8
20003aba:	bd80      	pop	{r7, pc}
20003abc:	4002380d 	andmi	r3, r2, sp, lsl #16

20003ac0 <RCC_GetFlagStatus>:
  *            @arg RCC_FLAG_WWDGRST: Window Watchdog reset
  *            @arg RCC_FLAG_LPWRRST: Low Power reset
  * @retval The new state of RCC_FLAG (SET or RESET).
  */
FlagStatus RCC_GetFlagStatus(uint8_t RCC_FLAG)
{
20003ac0:	b580      	push	{r7, lr}
20003ac2:	b086      	sub	sp, #24
20003ac4:	af00      	add	r7, sp, #0
20003ac6:	0002      	movs	r2, r0
20003ac8:	1dfb      	adds	r3, r7, #7
20003aca:	701a      	strb	r2, [r3, #0]
  uint32_t tmp = 0;
20003acc:	2300      	movs	r3, #0
20003ace:	60fb      	str	r3, [r7, #12]
  uint32_t statusreg = 0;
20003ad0:	2300      	movs	r3, #0
20003ad2:	617b      	str	r3, [r7, #20]
  FlagStatus bitstatus = RESET;
20003ad4:	2313      	movs	r3, #19
20003ad6:	18fb      	adds	r3, r7, r3
20003ad8:	2200      	movs	r2, #0
20003ada:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_FLAG(RCC_FLAG));

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
20003adc:	1dfb      	adds	r3, r7, #7
20003ade:	781b      	ldrb	r3, [r3, #0]
20003ae0:	095b      	lsrs	r3, r3, #5
20003ae2:	b2db      	uxtb	r3, r3
20003ae4:	60fb      	str	r3, [r7, #12]
  if (tmp == 1)               /* The flag to check is in CR register */
20003ae6:	68fb      	ldr	r3, [r7, #12]
20003ae8:	2b01      	cmp	r3, #1
20003aea:	d103      	bne.n	20003af4 <RCC_GetFlagStatus+0x34>
  {
    statusreg = RCC->CR;
20003aec:	4b14      	ldr	r3, [pc, #80]	; (20003b40 <RCC_GetFlagStatus+0x80>)
20003aee:	681b      	ldr	r3, [r3, #0]
20003af0:	617b      	str	r3, [r7, #20]
20003af2:	e009      	b.n	20003b08 <RCC_GetFlagStatus+0x48>
  }
  else if (tmp == 2)          /* The flag to check is in BDCR register */
20003af4:	68fb      	ldr	r3, [r7, #12]
20003af6:	2b02      	cmp	r3, #2
20003af8:	d103      	bne.n	20003b02 <RCC_GetFlagStatus+0x42>
  {
    statusreg = RCC->BDCR;
20003afa:	4b11      	ldr	r3, [pc, #68]	; (20003b40 <RCC_GetFlagStatus+0x80>)
20003afc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
20003afe:	617b      	str	r3, [r7, #20]
20003b00:	e002      	b.n	20003b08 <RCC_GetFlagStatus+0x48>
  }
  else                       /* The flag to check is in CSR register */
  {
    statusreg = RCC->CSR;
20003b02:	4b0f      	ldr	r3, [pc, #60]	; (20003b40 <RCC_GetFlagStatus+0x80>)
20003b04:	6f5b      	ldr	r3, [r3, #116]	; 0x74
20003b06:	617b      	str	r3, [r7, #20]
  }

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_MASK;
20003b08:	1dfb      	adds	r3, r7, #7
20003b0a:	781b      	ldrb	r3, [r3, #0]
20003b0c:	221f      	movs	r2, #31
20003b0e:	4013      	ands	r3, r2
20003b10:	60fb      	str	r3, [r7, #12]
  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
20003b12:	697a      	ldr	r2, [r7, #20]
20003b14:	68fb      	ldr	r3, [r7, #12]
20003b16:	40da      	lsrs	r2, r3
20003b18:	0013      	movs	r3, r2
20003b1a:	2201      	movs	r2, #1
20003b1c:	4013      	ands	r3, r2
20003b1e:	d004      	beq.n	20003b2a <RCC_GetFlagStatus+0x6a>
  {
    bitstatus = SET;
20003b20:	2313      	movs	r3, #19
20003b22:	18fb      	adds	r3, r7, r3
20003b24:	2201      	movs	r2, #1
20003b26:	701a      	strb	r2, [r3, #0]
20003b28:	e003      	b.n	20003b32 <RCC_GetFlagStatus+0x72>
  }
  else
  {
    bitstatus = RESET;
20003b2a:	2313      	movs	r3, #19
20003b2c:	18fb      	adds	r3, r7, r3
20003b2e:	2200      	movs	r2, #0
20003b30:	701a      	strb	r2, [r3, #0]
  }
  /* Return the flag status */
  return bitstatus;
20003b32:	2313      	movs	r3, #19
20003b34:	18fb      	adds	r3, r7, r3
20003b36:	781b      	ldrb	r3, [r3, #0]
}
20003b38:	0018      	movs	r0, r3
20003b3a:	46bd      	mov	sp, r7
20003b3c:	b006      	add	sp, #24
20003b3e:	bd80      	pop	{r7, pc}
20003b40:	40023800 	andmi	r3, r2, r0, lsl #16

20003b44 <RCC_ClearFlag>:
  *         RCC_FLAG_IWDGRST, RCC_FLAG_WWDGRST, RCC_FLAG_LPWRRST
  * @param  None
  * @retval None
  */
void RCC_ClearFlag(void)
{
20003b44:	b580      	push	{r7, lr}
20003b46:	af00      	add	r7, sp, #0
  /* Set RMVF bit to clear the reset flags */
  RCC->CSR |= RCC_CSR_RMVF;
20003b48:	4b04      	ldr	r3, [pc, #16]	; (20003b5c <RCC_ClearFlag+0x18>)
20003b4a:	6f5a      	ldr	r2, [r3, #116]	; 0x74
20003b4c:	4b03      	ldr	r3, [pc, #12]	; (20003b5c <RCC_ClearFlag+0x18>)
20003b4e:	2180      	movs	r1, #128	; 0x80
20003b50:	0449      	lsls	r1, r1, #17
20003b52:	430a      	orrs	r2, r1
20003b54:	675a      	str	r2, [r3, #116]	; 0x74
}
20003b56:	46c0      	nop			; (mov r8, r8)
20003b58:	46bd      	mov	sp, r7
20003b5a:	bd80      	pop	{r7, pc}
20003b5c:	40023800 	andmi	r3, r2, r0, lsl #16

20003b60 <RCC_GetITStatus>:
  *            @arg RCC_IT_PLLSAIRDY: PLLSAI clock ready interrupt (only for STM32F42xxx/43xxx/446xx/469xx/479xx devices)
  *            @arg RCC_IT_CSS: Clock Security System interrupt
  * @retval The new state of RCC_IT (SET or RESET).
  */
ITStatus RCC_GetITStatus(uint8_t RCC_IT)
{
20003b60:	b580      	push	{r7, lr}
20003b62:	b084      	sub	sp, #16
20003b64:	af00      	add	r7, sp, #0
20003b66:	0002      	movs	r2, r0
20003b68:	1dfb      	adds	r3, r7, #7
20003b6a:	701a      	strb	r2, [r3, #0]
  ITStatus bitstatus = RESET;
20003b6c:	230f      	movs	r3, #15
20003b6e:	18fb      	adds	r3, r7, r3
20003b70:	2200      	movs	r2, #0
20003b72:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_GET_IT(RCC_IT));

  /* Check the status of the specified RCC interrupt */
  if ((RCC->CIR & RCC_IT) != (uint32_t)RESET)
20003b74:	4b0a      	ldr	r3, [pc, #40]	; (20003ba0 <RCC_GetITStatus+0x40>)
20003b76:	68db      	ldr	r3, [r3, #12]
20003b78:	1dfa      	adds	r2, r7, #7
20003b7a:	7812      	ldrb	r2, [r2, #0]
20003b7c:	4013      	ands	r3, r2
20003b7e:	d004      	beq.n	20003b8a <RCC_GetITStatus+0x2a>
  {
    bitstatus = SET;
20003b80:	230f      	movs	r3, #15
20003b82:	18fb      	adds	r3, r7, r3
20003b84:	2201      	movs	r2, #1
20003b86:	701a      	strb	r2, [r3, #0]
20003b88:	e003      	b.n	20003b92 <RCC_GetITStatus+0x32>
  }
  else
  {
    bitstatus = RESET;
20003b8a:	230f      	movs	r3, #15
20003b8c:	18fb      	adds	r3, r7, r3
20003b8e:	2200      	movs	r2, #0
20003b90:	701a      	strb	r2, [r3, #0]
  }
  /* Return the RCC_IT status */
  return  bitstatus;
20003b92:	230f      	movs	r3, #15
20003b94:	18fb      	adds	r3, r7, r3
20003b96:	781b      	ldrb	r3, [r3, #0]
}
20003b98:	0018      	movs	r0, r3
20003b9a:	46bd      	mov	sp, r7
20003b9c:	b004      	add	sp, #16
20003b9e:	bd80      	pop	{r7, pc}
20003ba0:	40023800 	andmi	r3, r2, r0, lsl #16

20003ba4 <RCC_ClearITPendingBit>:
  *            @arg RCC_IT_PLLSAIRDY: PLLSAI ready interrupt (only for STM32F42xxx/43xxx/446xx/469xx/479xx devices) 
  *            @arg RCC_IT_CSS: Clock Security System interrupt
  * @retval None
  */
void RCC_ClearITPendingBit(uint8_t RCC_IT)
{
20003ba4:	b580      	push	{r7, lr}
20003ba6:	b082      	sub	sp, #8
20003ba8:	af00      	add	r7, sp, #0
20003baa:	0002      	movs	r2, r0
20003bac:	1dfb      	adds	r3, r7, #7
20003bae:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_CLEAR_IT(RCC_IT));

  /* Perform Byte access to RCC_CIR[23:16] bits to clear the selected interrupt
     pending bits */
  *(__IO uint8_t *) CIR_BYTE3_ADDRESS = RCC_IT;
20003bb0:	4a03      	ldr	r2, [pc, #12]	; (20003bc0 <RCC_ClearITPendingBit+0x1c>)
20003bb2:	1dfb      	adds	r3, r7, #7
20003bb4:	781b      	ldrb	r3, [r3, #0]
20003bb6:	7013      	strb	r3, [r2, #0]
}
20003bb8:	46c0      	nop			; (mov r8, r8)
20003bba:	46bd      	mov	sp, r7
20003bbc:	b002      	add	sp, #8
20003bbe:	bd80      	pop	{r7, pc}
20003bc0:	4002380e 	andmi	r3, r2, lr, lsl #16

20003bc4 <bufferInit>:
#include "buffer.h"

//Nollställer bufferten
void bufferInit(FIFO *buffer) {
20003bc4:	b580      	push	{r7, lr}
20003bc6:	b082      	sub	sp, #8
20003bc8:	af00      	add	r7, sp, #0
20003bca:	6078      	str	r0, [r7, #4]
    buffer->count = 0;
20003bcc:	687b      	ldr	r3, [r7, #4]
20003bce:	2264      	movs	r2, #100	; 0x64
20003bd0:	2100      	movs	r1, #0
20003bd2:	5499      	strb	r1, [r3, r2]
    buffer->in = 0;
20003bd4:	687b      	ldr	r3, [r7, #4]
20003bd6:	2265      	movs	r2, #101	; 0x65
20003bd8:	2100      	movs	r1, #0
20003bda:	5499      	strb	r1, [r3, r2]
    buffer->out = 0;
20003bdc:	687b      	ldr	r3, [r7, #4]
20003bde:	2266      	movs	r2, #102	; 0x66
20003be0:	2100      	movs	r1, #0
20003be2:	5499      	strb	r1, [r3, r2]
}
20003be4:	46c0      	nop			; (mov r8, r8)
20003be6:	46bd      	mov	sp, r7
20003be8:	b002      	add	sp, #8
20003bea:	bd80      	pop	{r7, pc}

20003bec <bufferPut>:

//Lägger till ett elem i buffern.
//Returnerar 1 om det lyckades, 0 annars.
uint8_t bufferPut ( FIFO *buffer, uint8_t elem) {
20003bec:	b580      	push	{r7, lr}
20003bee:	b082      	sub	sp, #8
20003bf0:	af00      	add	r7, sp, #0
20003bf2:	6078      	str	r0, [r7, #4]
20003bf4:	000a      	movs	r2, r1
20003bf6:	1cfb      	adds	r3, r7, #3
20003bf8:	701a      	strb	r2, [r3, #0]
    //Kollar om bufferten är full.
    if (buffer->count == BUFFERSIZE){
20003bfa:	687b      	ldr	r3, [r7, #4]
20003bfc:	2264      	movs	r2, #100	; 0x64
20003bfe:	5c9b      	ldrb	r3, [r3, r2]
20003c00:	2b64      	cmp	r3, #100	; 0x64
20003c02:	d101      	bne.n	20003c08 <bufferPut+0x1c>
        return 0;
20003c04:	2300      	movs	r3, #0
20003c06:	e01e      	b.n	20003c46 <bufferPut+0x5a>
    }

    //Lägger elem i bufferten
    buffer->buff[buffer->in++] = elem;
20003c08:	687b      	ldr	r3, [r7, #4]
20003c0a:	2265      	movs	r2, #101	; 0x65
20003c0c:	5c9b      	ldrb	r3, [r3, r2]
20003c0e:	1c5a      	adds	r2, r3, #1
20003c10:	b2d0      	uxtb	r0, r2
20003c12:	687a      	ldr	r2, [r7, #4]
20003c14:	2165      	movs	r1, #101	; 0x65
20003c16:	5450      	strb	r0, [r2, r1]
20003c18:	0019      	movs	r1, r3
20003c1a:	687b      	ldr	r3, [r7, #4]
20003c1c:	1cfa      	adds	r2, r7, #3
20003c1e:	7812      	ldrb	r2, [r2, #0]
20003c20:	545a      	strb	r2, [r3, r1]
    buffer->count++;
20003c22:	687b      	ldr	r3, [r7, #4]
20003c24:	2264      	movs	r2, #100	; 0x64
20003c26:	5c9b      	ldrb	r3, [r3, r2]
20003c28:	3301      	adds	r3, #1
20003c2a:	b2d9      	uxtb	r1, r3
20003c2c:	687b      	ldr	r3, [r7, #4]
20003c2e:	2264      	movs	r2, #100	; 0x64
20003c30:	5499      	strb	r1, [r3, r2]

    //Justerar pekaren om vi nått slutet
    if (buffer->in == BUFFERSIZE)
20003c32:	687b      	ldr	r3, [r7, #4]
20003c34:	2265      	movs	r2, #101	; 0x65
20003c36:	5c9b      	ldrb	r3, [r3, r2]
20003c38:	2b64      	cmp	r3, #100	; 0x64
20003c3a:	d103      	bne.n	20003c44 <bufferPut+0x58>
        buffer->in = 0;
20003c3c:	687b      	ldr	r3, [r7, #4]
20003c3e:	2265      	movs	r2, #101	; 0x65
20003c40:	2100      	movs	r1, #0
20003c42:	5499      	strb	r1, [r3, r2]

    return 1;
20003c44:	2301      	movs	r3, #1
}
20003c46:	0018      	movs	r0, r3
20003c48:	46bd      	mov	sp, r7
20003c4a:	b002      	add	sp, #8
20003c4c:	bd80      	pop	{r7, pc}

20003c4e <bufferOverrideLast>:

//Skriver över föregående elem i buffern.
//Ändrar inga indexeringsvariabler
void bufferOverrideLast ( FIFO *buffer, uint8_t elem) {
20003c4e:	b580      	push	{r7, lr}
20003c50:	b084      	sub	sp, #16
20003c52:	af00      	add	r7, sp, #0
20003c54:	6078      	str	r0, [r7, #4]
20003c56:	000a      	movs	r2, r1
20003c58:	1cfb      	adds	r3, r7, #3
20003c5a:	701a      	strb	r2, [r3, #0]
    //Index för föregående element i buffern
    uint8_t prevIndex;

    //Om index för nästa element är 0 så blir föregående BUFFERSIZE - 1
    //annars buffer->in - 1
    prevIndex =  (buffer->in == 0) ? BUFFERSIZE - 1 : buffer->in - 1;
20003c5c:	687b      	ldr	r3, [r7, #4]
20003c5e:	2265      	movs	r2, #101	; 0x65
20003c60:	5c9b      	ldrb	r3, [r3, r2]
20003c62:	2b00      	cmp	r3, #0
20003c64:	d005      	beq.n	20003c72 <bufferOverrideLast+0x24>
20003c66:	687b      	ldr	r3, [r7, #4]
20003c68:	2265      	movs	r2, #101	; 0x65
20003c6a:	5c9b      	ldrb	r3, [r3, r2]
20003c6c:	3b01      	subs	r3, #1
20003c6e:	b2da      	uxtb	r2, r3
20003c70:	e000      	b.n	20003c74 <bufferOverrideLast+0x26>
20003c72:	2263      	movs	r2, #99	; 0x63
20003c74:	210f      	movs	r1, #15
20003c76:	187b      	adds	r3, r7, r1
20003c78:	701a      	strb	r2, [r3, #0]

    //Skriver över elem i bufferten
    buffer->buff[prevIndex] = elem;
20003c7a:	187b      	adds	r3, r7, r1
20003c7c:	781b      	ldrb	r3, [r3, #0]
20003c7e:	687a      	ldr	r2, [r7, #4]
20003c80:	1cf9      	adds	r1, r7, #3
20003c82:	7809      	ldrb	r1, [r1, #0]
20003c84:	54d1      	strb	r1, [r2, r3]
}
20003c86:	46c0      	nop			; (mov r8, r8)
20003c88:	46bd      	mov	sp, r7
20003c8a:	b004      	add	sp, #16
20003c8c:	bd80      	pop	{r7, pc}

20003c8e <bufferGet>:

//Hämtar ett element från buffern till dest.
//Returnerar 1 om det lyckades, 0 annars.
uint8_t bufferGet ( FIFO *buffer, uint8_t *dest) {
20003c8e:	b580      	push	{r7, lr}
20003c90:	b082      	sub	sp, #8
20003c92:	af00      	add	r7, sp, #0
20003c94:	6078      	str	r0, [r7, #4]
20003c96:	6039      	str	r1, [r7, #0]
    //Kollar om bufferten är tom
    if (!buffer->count){
20003c98:	687b      	ldr	r3, [r7, #4]
20003c9a:	2264      	movs	r2, #100	; 0x64
20003c9c:	5c9b      	ldrb	r3, [r3, r2]
20003c9e:	2b00      	cmp	r3, #0
20003ca0:	d101      	bne.n	20003ca6 <bufferGet+0x18>
        return 0;
20003ca2:	2300      	movs	r3, #0
20003ca4:	e01e      	b.n	20003ce4 <bufferGet+0x56>
    }

    //Hämtar element ur buffern till dest
    *dest = buffer->buff[buffer->out++];
20003ca6:	687b      	ldr	r3, [r7, #4]
20003ca8:	2266      	movs	r2, #102	; 0x66
20003caa:	5c9b      	ldrb	r3, [r3, r2]
20003cac:	1c5a      	adds	r2, r3, #1
20003cae:	b2d0      	uxtb	r0, r2
20003cb0:	687a      	ldr	r2, [r7, #4]
20003cb2:	2166      	movs	r1, #102	; 0x66
20003cb4:	5450      	strb	r0, [r2, r1]
20003cb6:	001a      	movs	r2, r3
20003cb8:	687b      	ldr	r3, [r7, #4]
20003cba:	5c9a      	ldrb	r2, [r3, r2]
20003cbc:	683b      	ldr	r3, [r7, #0]
20003cbe:	701a      	strb	r2, [r3, #0]
    buffer->count--;
20003cc0:	687b      	ldr	r3, [r7, #4]
20003cc2:	2264      	movs	r2, #100	; 0x64
20003cc4:	5c9b      	ldrb	r3, [r3, r2]
20003cc6:	3b01      	subs	r3, #1
20003cc8:	b2d9      	uxtb	r1, r3
20003cca:	687b      	ldr	r3, [r7, #4]
20003ccc:	2264      	movs	r2, #100	; 0x64
20003cce:	5499      	strb	r1, [r3, r2]

    //Justerar pekaren om vi nått slutet
    if (buffer->out == BUFFERSIZE)
20003cd0:	687b      	ldr	r3, [r7, #4]
20003cd2:	2266      	movs	r2, #102	; 0x66
20003cd4:	5c9b      	ldrb	r3, [r3, r2]
20003cd6:	2b64      	cmp	r3, #100	; 0x64
20003cd8:	d103      	bne.n	20003ce2 <bufferGet+0x54>
        buffer->out = 0;
20003cda:	687b      	ldr	r3, [r7, #4]
20003cdc:	2266      	movs	r2, #102	; 0x66
20003cde:	2100      	movs	r1, #0
20003ce0:	5499      	strb	r1, [r3, r2]

    return 1;
20003ce2:	2301      	movs	r3, #1
20003ce4:	0018      	movs	r0, r3
20003ce6:	46bd      	mov	sp, r7
20003ce8:	b002      	add	sp, #8
20003cea:	bd80      	pop	{r7, pc}

20003cec <__udivsi3>:
20003cec:	2200      	movs	r2, #0
20003cee:	0843      	lsrs	r3, r0, #1
20003cf0:	428b      	cmp	r3, r1
20003cf2:	d374      	bcc.n	20003dde <__udivsi3+0xf2>
20003cf4:	0903      	lsrs	r3, r0, #4
20003cf6:	428b      	cmp	r3, r1
20003cf8:	d35f      	bcc.n	20003dba <__udivsi3+0xce>
20003cfa:	0a03      	lsrs	r3, r0, #8
20003cfc:	428b      	cmp	r3, r1
20003cfe:	d344      	bcc.n	20003d8a <__udivsi3+0x9e>
20003d00:	0b03      	lsrs	r3, r0, #12
20003d02:	428b      	cmp	r3, r1
20003d04:	d328      	bcc.n	20003d58 <__udivsi3+0x6c>
20003d06:	0c03      	lsrs	r3, r0, #16
20003d08:	428b      	cmp	r3, r1
20003d0a:	d30d      	bcc.n	20003d28 <__udivsi3+0x3c>
20003d0c:	22ff      	movs	r2, #255	; 0xff
20003d0e:	0209      	lsls	r1, r1, #8
20003d10:	ba12      	rev	r2, r2
20003d12:	0c03      	lsrs	r3, r0, #16
20003d14:	428b      	cmp	r3, r1
20003d16:	d302      	bcc.n	20003d1e <__udivsi3+0x32>
20003d18:	1212      	asrs	r2, r2, #8
20003d1a:	0209      	lsls	r1, r1, #8
20003d1c:	d065      	beq.n	20003dea <__udivsi3+0xfe>
20003d1e:	0b03      	lsrs	r3, r0, #12
20003d20:	428b      	cmp	r3, r1
20003d22:	d319      	bcc.n	20003d58 <__udivsi3+0x6c>
20003d24:	e000      	b.n	20003d28 <__udivsi3+0x3c>
20003d26:	0a09      	lsrs	r1, r1, #8
20003d28:	0bc3      	lsrs	r3, r0, #15
20003d2a:	428b      	cmp	r3, r1
20003d2c:	d301      	bcc.n	20003d32 <__udivsi3+0x46>
20003d2e:	03cb      	lsls	r3, r1, #15
20003d30:	1ac0      	subs	r0, r0, r3
20003d32:	4152      	adcs	r2, r2
20003d34:	0b83      	lsrs	r3, r0, #14
20003d36:	428b      	cmp	r3, r1
20003d38:	d301      	bcc.n	20003d3e <__udivsi3+0x52>
20003d3a:	038b      	lsls	r3, r1, #14
20003d3c:	1ac0      	subs	r0, r0, r3
20003d3e:	4152      	adcs	r2, r2
20003d40:	0b43      	lsrs	r3, r0, #13
20003d42:	428b      	cmp	r3, r1
20003d44:	d301      	bcc.n	20003d4a <__udivsi3+0x5e>
20003d46:	034b      	lsls	r3, r1, #13
20003d48:	1ac0      	subs	r0, r0, r3
20003d4a:	4152      	adcs	r2, r2
20003d4c:	0b03      	lsrs	r3, r0, #12
20003d4e:	428b      	cmp	r3, r1
20003d50:	d301      	bcc.n	20003d56 <__udivsi3+0x6a>
20003d52:	030b      	lsls	r3, r1, #12
20003d54:	1ac0      	subs	r0, r0, r3
20003d56:	4152      	adcs	r2, r2
20003d58:	0ac3      	lsrs	r3, r0, #11
20003d5a:	428b      	cmp	r3, r1
20003d5c:	d301      	bcc.n	20003d62 <__udivsi3+0x76>
20003d5e:	02cb      	lsls	r3, r1, #11
20003d60:	1ac0      	subs	r0, r0, r3
20003d62:	4152      	adcs	r2, r2
20003d64:	0a83      	lsrs	r3, r0, #10
20003d66:	428b      	cmp	r3, r1
20003d68:	d301      	bcc.n	20003d6e <__udivsi3+0x82>
20003d6a:	028b      	lsls	r3, r1, #10
20003d6c:	1ac0      	subs	r0, r0, r3
20003d6e:	4152      	adcs	r2, r2
20003d70:	0a43      	lsrs	r3, r0, #9
20003d72:	428b      	cmp	r3, r1
20003d74:	d301      	bcc.n	20003d7a <__udivsi3+0x8e>
20003d76:	024b      	lsls	r3, r1, #9
20003d78:	1ac0      	subs	r0, r0, r3
20003d7a:	4152      	adcs	r2, r2
20003d7c:	0a03      	lsrs	r3, r0, #8
20003d7e:	428b      	cmp	r3, r1
20003d80:	d301      	bcc.n	20003d86 <__udivsi3+0x9a>
20003d82:	020b      	lsls	r3, r1, #8
20003d84:	1ac0      	subs	r0, r0, r3
20003d86:	4152      	adcs	r2, r2
20003d88:	d2cd      	bcs.n	20003d26 <__udivsi3+0x3a>
20003d8a:	09c3      	lsrs	r3, r0, #7
20003d8c:	428b      	cmp	r3, r1
20003d8e:	d301      	bcc.n	20003d94 <__udivsi3+0xa8>
20003d90:	01cb      	lsls	r3, r1, #7
20003d92:	1ac0      	subs	r0, r0, r3
20003d94:	4152      	adcs	r2, r2
20003d96:	0983      	lsrs	r3, r0, #6
20003d98:	428b      	cmp	r3, r1
20003d9a:	d301      	bcc.n	20003da0 <__udivsi3+0xb4>
20003d9c:	018b      	lsls	r3, r1, #6
20003d9e:	1ac0      	subs	r0, r0, r3
20003da0:	4152      	adcs	r2, r2
20003da2:	0943      	lsrs	r3, r0, #5
20003da4:	428b      	cmp	r3, r1
20003da6:	d301      	bcc.n	20003dac <__udivsi3+0xc0>
20003da8:	014b      	lsls	r3, r1, #5
20003daa:	1ac0      	subs	r0, r0, r3
20003dac:	4152      	adcs	r2, r2
20003dae:	0903      	lsrs	r3, r0, #4
20003db0:	428b      	cmp	r3, r1
20003db2:	d301      	bcc.n	20003db8 <__udivsi3+0xcc>
20003db4:	010b      	lsls	r3, r1, #4
20003db6:	1ac0      	subs	r0, r0, r3
20003db8:	4152      	adcs	r2, r2
20003dba:	08c3      	lsrs	r3, r0, #3
20003dbc:	428b      	cmp	r3, r1
20003dbe:	d301      	bcc.n	20003dc4 <__udivsi3+0xd8>
20003dc0:	00cb      	lsls	r3, r1, #3
20003dc2:	1ac0      	subs	r0, r0, r3
20003dc4:	4152      	adcs	r2, r2
20003dc6:	0883      	lsrs	r3, r0, #2
20003dc8:	428b      	cmp	r3, r1
20003dca:	d301      	bcc.n	20003dd0 <__udivsi3+0xe4>
20003dcc:	008b      	lsls	r3, r1, #2
20003dce:	1ac0      	subs	r0, r0, r3
20003dd0:	4152      	adcs	r2, r2
20003dd2:	0843      	lsrs	r3, r0, #1
20003dd4:	428b      	cmp	r3, r1
20003dd6:	d301      	bcc.n	20003ddc <__udivsi3+0xf0>
20003dd8:	004b      	lsls	r3, r1, #1
20003dda:	1ac0      	subs	r0, r0, r3
20003ddc:	4152      	adcs	r2, r2
20003dde:	1a41      	subs	r1, r0, r1
20003de0:	d200      	bcs.n	20003de4 <__udivsi3+0xf8>
20003de2:	4601      	mov	r1, r0
20003de4:	4152      	adcs	r2, r2
20003de6:	4610      	mov	r0, r2
20003de8:	4770      	bx	lr
20003dea:	e7ff      	b.n	20003dec <__udivsi3+0x100>
20003dec:	b501      	push	{r0, lr}
20003dee:	2000      	movs	r0, #0
20003df0:	f000 f806 	bl	20003e00 <__aeabi_idiv0>
20003df4:	bd02      	pop	{r1, pc}
20003df6:	46c0      	nop			; (mov r8, r8)

20003df8 <__aeabi_uidivmod>:
20003df8:	2900      	cmp	r1, #0
20003dfa:	d0f7      	beq.n	20003dec <__udivsi3+0x100>
20003dfc:	e776      	b.n	20003cec <__udivsi3>
20003dfe:	4770      	bx	lr

20003e00 <__aeabi_idiv0>:
20003e00:	4770      	bx	lr
20003e02:	46c0      	nop			; (mov r8, r8)

20003e04 <msTicks>:
20003e04:	00000000 	andeq	r0, r0, r0

20003e08 <id>:
20003e08:	00000000 	andeq	r0, r0, r0

20003e0c <SessionID>:
20003e0c:	00000000 	andeq	r0, r0, r0

20003e10 <handlerList>:
	...

20003ef0 <SessionIDActive>:
20003ef0:	00000000 	andeq	r0, r0, r0

20003ef4 <nocid>:
20003ef4:	00000001 	andeq	r0, r0, r1

20003ef8 <GPIO_Pins>:
20003ef8:	00020001 	andeq	r0, r2, r1
20003efc:	00080004 	andeq	r0, r8, r4
20003f00:	00200010 	eoreq	r0, r0, r0, lsl r0
20003f04:	00800040 	addeq	r0, r0, r0, asr #32
20003f08:	02000100 	andeq	r0, r0, #0, 2
20003f0c:	08000400 	stmdaeq	r0, {sl}
20003f10:	20001000 	andcs	r1, r0, r0
20003f14:	80004000 	andhi	r4, r0, r0

20003f18 <GPIO_Ports>:
20003f18:	40021000 	andmi	r1, r2, r0
20003f1c:	40020000 	andmi	r0, r2, r0
20003f20:	40020c00 	andmi	r0, r2, r0, lsl #24
20003f24:	40020800 	andmi	r0, r2, r0, lsl #16

20003f28 <APBAHBPrescTable>:
20003f28:	00000000 	andeq	r0, r0, r0
20003f2c:	04030201 	streq	r0, [r3], #-513	; 0xfffffdff
20003f30:	04030201 	streq	r0, [r3], #-513	; 0xfffffdff
20003f34:	09080706 	stmdbeq	r8, {r1, r2, r8, r9, sl}

20003f38 <larming>:
20003f38:	00000001 	andeq	r0, r0, r1

20003f3c <cLarm>:
20003f3c:	00000002 	andeq	r0, r0, r2

20003f40 <dissarmedBit>:
20003f40:	00000004 	andeq	r0, r0, r4

Disassembly of section .debug_info:

00000000 <.debug_info>:
       0:	000003ba 			; <UNDEFINED> instruction: 0x000003ba
       4:	00000004 	andeq	r0, r0, r4
       8:	01040000 	mrseq	r0, (UNDEF: 4)
       c:	00000051 	andeq	r0, r0, r1, asr r0
      10:	00018a0c 	andeq	r8, r1, ip, lsl #20
      14:	0001df00 	andeq	sp, r1, r0, lsl #30
      18:	00001000 	andeq	r1, r0, r0
      1c:	0001f020 	andeq	pc, r1, r0, lsr #32
      20:	00000000 	andeq	r0, r0, r0
      24:	06010200 	streq	r0, [r1], -r0, lsl #4
      28:	0000011a 	andeq	r0, r0, sl, lsl r1
      2c:	00000a03 	andeq	r0, r0, r3, lsl #20
      30:	372b0200 	strcc	r0, [fp, -r0, lsl #4]!
      34:	02000000 	andeq	r0, r0, #0
      38:	01180801 	tsteq	r8, r1, lsl #16
      3c:	02020000 	andeq	r0, r2, #0
      40:	00003c05 	andeq	r3, r0, r5, lsl #24
      44:	07020200 	streq	r0, [r2, -r0, lsl #4]
      48:	00000281 	andeq	r0, r0, r1, lsl #5
      4c:	00002b03 	andeq	r2, r0, r3, lsl #22
      50:	574d0200 	strbpl	r0, [sp, -r0, lsl #4]
      54:	02000000 	andeq	r0, r0, #0
      58:	022d0504 	eoreq	r0, sp, #4, 10	; 0x1000000
      5c:	63030000 	movwvs	r0, #12288	; 0x3000
      60:	02000001 	andeq	r0, r0, #1
      64:	0000694f 	andeq	r6, r0, pc, asr #18
      68:	07040200 	streq	r0, [r4, -r0, lsl #4]
      6c:	00000106 	andeq	r0, r0, r6, lsl #2
      70:	28050802 	stmdacs	r5, {r1, fp}
      74:	02000002 	andeq	r0, r0, #2
      78:	01010708 	tsteq	r1, r8, lsl #14
      7c:	04040000 	streq	r0, [r4], #-0
      80:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
      84:	07040200 	streq	r0, [r4, -r0, lsl #4]
      88:	0000010b 	andeq	r0, r0, fp, lsl #2
      8c:	00000c03 	andeq	r0, r0, r3, lsl #24
      90:	2c180300 	ldccs	3, cr0, [r8], {-0}
      94:	03000000 	movweq	r0, #0
      98:	0000002d 	andeq	r0, r0, sp, lsr #32
      9c:	004c2c03 	subeq	r2, ip, r3, lsl #24
      a0:	97050000 	strls	r0, [r5, -r0]
      a4:	03000000 	movweq	r0, #0
      a8:	00000165 	andeq	r0, r0, r5, ror #2
      ac:	005e3003 	subseq	r3, lr, r3
      b0:	a7050000 	strge	r0, [r5, -r0]
      b4:	06000000 	streq	r0, [r0], -r0
      b8:	0000014a 	andeq	r0, r0, sl, asr #2
      bc:	a206fa04 	andge	pc, r6, #4, 20	; 0x4000
      c0:	07000000 	streq	r0, [r0, -r0]
      c4:	00000241 	andeq	r0, r0, r1, asr #4
      c8:	00a73b05 	adceq	r3, r7, r5, lsl #22
      cc:	07080000 	streq	r0, [r8, -r0]
      d0:	00003701 	andeq	r3, r0, r1, lsl #14
      d4:	035d0600 	cmpeq	sp, #0, 12
      d8:	000000e9 	andeq	r0, r0, r9, ror #1
      dc:	00188109 	andseq	r8, r8, r9, lsl #2
      e0:	530a0000 	movwpl	r0, #40960	; 0xa000
      e4:	01005445 	tsteq	r0, r5, asr #8
      e8:	01070800 	tsteq	r7, r0, lsl #16
      ec:	00000037 	andeq	r0, r0, r7, lsr r0
      f0:	04035f06 	streq	r5, [r3], #-3846	; 0xfffff0fa
      f4:	09000001 	stmdbeq	r0, {r0}
      f8:	00000142 	andeq	r0, r0, r2, asr #2
      fc:	00fa0900 	rscseq	r0, sl, r0, lsl #18
     100:	00010000 	andeq	r0, r1, r0
     104:	8d07140b 	cfstrshi	mvf1, [r7, #-44]	; 0xffffffd4
     108:	00000155 	andeq	r0, r0, r5, asr r1
     10c:	0002360c 	andeq	r3, r2, ip, lsl #12
     110:	a78f0700 	strge	r0, [pc, r0, lsl #14]
     114:	00000000 	andeq	r0, r0, r0
     118:	0002220c 	andeq	r2, r2, ip, lsl #4
     11c:	a7920700 	ldrge	r0, [r2, r0, lsl #14]
     120:	04000000 	streq	r0, [r0], #-0
     124:	4544490d 	strbmi	r4, [r4, #-2317]	; 0xfffff6f3
     128:	8c950700 	ldchi	7, cr0, [r5], {0}
     12c:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
     130:	5254520d 	subspl	r5, r4, #-805306368	; 0xd0000000
     134:	8c990700 	ldchi	7, cr0, [r9], {0}
     138:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
     13c:	434c440d 	movtmi	r4, #50189	; 0xc40d
     140:	8c9d0700 	ldchi	7, cr0, [sp], {0}
     144:	0a000000 	beq	14c <startup-0x1ffffeb4>
     148:	0019900c 	andseq	r9, r9, ip
     14c:	55a10700 	strpl	r0, [r1, #1792]!	; 0x700
     150:	0b000001 	bleq	15c <startup-0x1ffffea4>
     154:	008c0e00 	addeq	r0, ip, r0, lsl #28
     158:	01650000 	cmneq	r5, r0
     15c:	850f0000 	strhi	r0, [pc, #-0]	; 164 <startup-0x1ffffe9c>
     160:	07000000 	streq	r0, [r0, -r0]
     164:	01260300 			; <UNDEFINED> instruction: 0x01260300
     168:	a3070000 	movwge	r0, #28672	; 0x7000
     16c:	00000104 	andeq	r0, r0, r4, lsl #2
     170:	a807140b 	stmdage	r7, {r0, r1, r3, sl, ip}
     174:	000001cd 	andeq	r0, r0, sp, asr #3
     178:	0002360c 	andeq	r3, r2, ip, lsl #12
     17c:	a7aa0700 	strge	r0, [sl, r0, lsl #14]!
     180:	00000000 	andeq	r0, r0, r0
     184:	0002220c 	andeq	r2, r2, ip, lsl #4
     188:	a7ad0700 	strge	r0, [sp, r0, lsl #14]!
     18c:	04000000 	streq	r0, [r0], #-0
     190:	4544490d 	strbmi	r4, [r4, #-2317]	; 0xfffff6f3
     194:	8cb00700 	ldchi	7, cr0, [r0]
     198:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
     19c:	5254520d 	subspl	r5, r4, #-805306368	; 0xd0000000
     1a0:	8cb40700 	ldchi	7, cr0, [r4]
     1a4:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
     1a8:	434c440d 	movtmi	r4, #50189	; 0xc40d
     1ac:	8cb80700 	ldchi	7, cr0, [r8]
     1b0:	0a000000 	beq	1b8 <startup-0x1ffffe48>
     1b4:	0019900c 	andseq	r9, r9, ip
     1b8:	55bb0700 	ldrpl	r0, [fp, #1792]!	; 0x700
     1bc:	0b000001 	bleq	1c8 <startup-0x1ffffe38>
     1c0:	494d460d 	stmdbmi	sp, {r0, r2, r3, r9, sl, lr}^
     1c4:	8cbe0700 	ldchi	7, cr0, [lr]
     1c8:	13000000 	movwne	r0, #0
     1cc:	02670300 	rsbeq	r0, r7, #0, 6
     1d0:	c1070000 	mrsgt	r0, (UNDEF: 7)
     1d4:	00000170 	andeq	r0, r0, r0, ror r1
     1d8:	1308040b 	movwne	r0, #33803	; 0x840b
     1dc:	0000023a 	andeq	r0, r0, sl, lsr r2
     1e0:	00003510 	andeq	r3, r0, r0, lsl r5
     1e4:	a7150800 	ldrge	r0, [r5, -r0, lsl #16]
     1e8:	04000000 	streq	r0, [r0], #-0
     1ec:	10001808 	andne	r1, r0, r8, lsl #16
     1f0:	00000000 	andeq	r0, r0, r0
     1f4:	00a71908 	adceq	r1, r7, r8, lsl #18
     1f8:	0a040000 	beq	100200 <startup-0x1feffe00>
     1fc:	4911000e 	ldmdbmi	r1, {r1, r2, r3}
     200:	1d080044 	stcne	0, cr0, [r8, #-272]	; 0xfffffef0
     204:	000000a7 	andeq	r0, r0, r7, lsr #1
     208:	00070704 	andeq	r0, r7, r4, lsl #14
     20c:	00018010 	andeq	r8, r1, r0, lsl r0
     210:	a7210800 	strge	r0, [r1, -r0, lsl #16]!
     214:	04000000 	streq	r0, [r0], #-0
     218:	10000601 	andne	r0, r0, r1, lsl #12
     21c:	0000001b 	andeq	r0, r0, fp, lsl r0
     220:	00a72408 	adceq	r2, r7, r8, lsl #8
     224:	03040000 	movweq	r0, #16384	; 0x4000
     228:	23100003 	tstcs	r0, #3
     22c:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
     230:	0000a727 	andeq	sl, r0, r7, lsr #14
     234:	00030400 	andeq	r0, r3, r0, lsl #8
     238:	94030000 	strls	r0, [r3], #-0
     23c:	08000002 	stmdaeq	r0, {r1}
     240:	0001d828 	andeq	sp, r1, r8, lsr #16
     244:	08040b00 	stmdaeq	r4, {r8, r9, fp}
     248:	0002892d 	andeq	r8, r2, sp, lsr #18
     24c:	00461000 	subeq	r1, r6, r0
     250:	2f080000 	svccs	0x00080000
     254:	000000a7 	andeq	r0, r0, r7, lsr #1
     258:	001f0104 	andseq	r0, pc, r4, lsl #2
     25c:	52545211 	subspl	r5, r4, #268435457	; 0x10000001
     260:	a7320800 	ldrge	r0, [r2, -r0, lsl #16]!
     264:	04000000 	streq	r0, [r0], #-0
     268:	11001e01 	tstne	r0, r1, lsl #28
     26c:	00454449 	subeq	r4, r5, r9, asr #8
     270:	00a73508 	adceq	r3, r7, r8, lsl #10
     274:	01040000 	mrseq	r0, (UNDEF: 4)
     278:	4911001d 	ldmdbmi	r1, {r0, r2, r3, r4}
     27c:	37080044 	strcc	r0, [r8, -r4, asr #32]
     280:	000000a7 	andeq	r0, r0, r7, lsr #1
     284:	00001d04 	andeq	r1, r0, r4, lsl #26
     288:	016e0300 	cmneq	lr, r0, lsl #6
     28c:	38080000 	stmdacc	r8, {}	; <UNPREDICTABLE>
     290:	00000245 	andeq	r0, r0, r5, asr #4
     294:	21080102 	tstcs	r8, r2, lsl #2
     298:	12000001 	andne	r0, r0, #1
     29c:	00000178 	andeq	r0, r0, r8, ror r1
     2a0:	00b21109 	adcseq	r1, r2, r9, lsl #2
     2a4:	03050000 	movweq	r0, #20480	; 0x5000
     2a8:	20003e04 	andcs	r3, r0, r4, lsl #28
     2ac:	00646913 	rsbeq	r6, r4, r3, lsl r9
     2b0:	00a71209 	adceq	r1, r7, r9, lsl #4
     2b4:	03050000 	movweq	r0, #20480	; 0x5000
     2b8:	20003e08 	andcs	r3, r0, r8, lsl #28
     2bc:	00026112 	andeq	r6, r2, r2, lsl r1
     2c0:	94130900 	ldrls	r0, [r3], #-2304	; 0xfffff700
     2c4:	05000002 	streq	r0, [r0, #-2]
     2c8:	003ef403 	eorseq	pc, lr, r3, lsl #8
     2cc:	02771420 	rsbseq	r1, r7, #32, 8	; 0x20000000
     2d0:	3e010000 	cdpcc	0, 0, cr0, cr1, cr0, {0}
     2d4:	200001cc 	andcs	r0, r0, ip, asr #3
     2d8:	00000034 	andeq	r0, r0, r4, lsr r0
     2dc:	02ff9c01 	rscseq	r9, pc, #256	; 0x100
     2e0:	14150000 	ldrne	r0, [r5], #-0
     2e4:	01000000 	mrseq	r0, (UNDEF: 0)
     2e8:	0002943e 	andeq	r9, r2, lr, lsr r4
     2ec:	57910200 	ldrpl	r0, [r1, r0, lsl #4]
     2f0:	00015e16 	andeq	r5, r1, r6, lsl lr
     2f4:	653f0100 	ldrvs	r0, [pc, #-256]!	; 1fc <startup-0x1ffffe04>
     2f8:	02000001 	andeq	r0, r0, #1
     2fc:	14005c91 	strne	r5, [r0], #-3217	; 0xfffff36f
     300:	0000029b 	muleq	r0, fp, r2
     304:	006c1201 	rsbeq	r1, ip, r1, lsl #4
     308:	01602000 	cmneq	r0, r0
     30c:	9c010000 	stcls	0, cr0, [r1], {-0}
     310:	00000374 	andeq	r0, r0, r4, ror r3
     314:	0001d815 	andeq	sp, r1, r5, lsl r8
     318:	7e120100 	mufvcs	f0, f2, f0
     31c:	03000000 	movweq	r0, #0
     320:	167fbc91 			; <UNDEFINED> instruction: 0x167fbc91
     324:	00000157 	andeq	r0, r0, r7, asr r1
     328:	02891301 	addeq	r1, r9, #67108864	; 0x4000000
     32c:	91020000 	mrsls	r0, (UNDEF: 2)
     330:	023c1660 	eorseq	r1, ip, #96, 12	; 0x6000000
     334:	14010000 	strne	r0, [r1], #-0
     338:	00000289 	andeq	r0, r0, r9, lsl #5
     33c:	165c9102 	ldrbne	r9, [ip], -r2, lsl #2
     340:	00000270 	andeq	r0, r0, r0, ror r2
     344:	023a1701 	eorseq	r1, sl, #262144	; 0x40000
     348:	91020000 	mrsls	r0, (UNDEF: 2)
     34c:	012f1658 			; <UNDEFINED> instruction: 0x012f1658
     350:	2e010000 	cdpcs	0, 0, cr0, cr1, cr0, {0}
     354:	0000007e 	andeq	r0, r0, lr, ror r0
     358:	17649102 	strbne	r9, [r4, -r2, lsl #2]!
     35c:	20000162 	andcs	r0, r0, r2, ror #2
     360:	0000004a 	andeq	r0, r0, sl, asr #32
     364:	00025116 	andeq	r5, r2, r6, lsl r1
     368:	65330100 	ldrvs	r0, [r3, #-256]!	; 0xffffff00
     36c:	02000001 	andeq	r0, r0, #1
     370:	00004491 	muleq	r0, r1, r4
     374:	0000e914 	andeq	lr, r0, r4, lsl r9
     378:	28090100 	stmdacs	r9, {r8}
     37c:	44200000 	strtmi	r0, [r0], #-0
     380:	01000000 	mrseq	r0, (UNDEF: 0)
     384:	0003a69c 	muleq	r3, ip, r6
     388:	736d1800 	cmnvc	sp, #0, 16
     38c:	09010067 	stmdbeq	r1, {r0, r1, r2, r5, r6}
     390:	000003a6 	andeq	r0, r0, r6, lsr #7
     394:	166c9102 	strbtne	r9, [ip], -r2, lsl #2
     398:	0000025b 	andeq	r0, r0, fp, asr r2
     39c:	00a70a01 	adceq	r0, r7, r1, lsl #20
     3a0:	91020000 	mrsls	r0, (UNDEF: 2)
     3a4:	04190074 	ldreq	r0, [r9], #-116	; 0xffffff8c
     3a8:	000001cd 	andeq	r0, r0, sp, asr #3
     3ac:	0001391a 	andeq	r3, r1, sl, lsl r9
     3b0:	10040100 	andne	r0, r4, r0, lsl #2
     3b4:	18200000 	stmdane	r0!, {}	; <UNPREDICTABLE>
     3b8:	01000000 	mrseq	r0, (UNDEF: 0)
     3bc:	054a009c 	strbeq	r0, [sl, #-156]	; 0xffffff64
     3c0:	00040000 	andeq	r0, r4, r0
     3c4:	0000017d 	andeq	r0, r0, sp, ror r1
     3c8:	00510104 	subseq	r0, r1, r4, lsl #2
     3cc:	8f0c0000 	svchi	0x000c0000
     3d0:	df000003 	svcle	0x00000003
     3d4:	00000001 	andeq	r0, r0, r1
     3d8:	d2200002 	eorle	r0, r0, #2
     3dc:	07000003 	streq	r0, [r0, -r3]
     3e0:	02000002 	andeq	r0, r0, #2
     3e4:	011a0601 	tsteq	sl, r1, lsl #12
     3e8:	0a030000 	beq	c03f0 <startup-0x1ff3fc10>
     3ec:	02000000 	andeq	r0, r0, #0
     3f0:	0000372b 	andeq	r3, r0, fp, lsr #14
     3f4:	08010200 	stmdaeq	r1, {r9}
     3f8:	00000118 	andeq	r0, r0, r8, lsl r1
     3fc:	3c050202 	sfmcc	f0, 4, [r5], {2}
     400:	03000000 	movweq	r0, #0
     404:	000002b8 			; <UNDEFINED> instruction: 0x000002b8
     408:	00503902 	subseq	r3, r0, r2, lsl #18
     40c:	02020000 	andeq	r0, r2, #0
     410:	00028107 	andeq	r8, r2, r7, lsl #2
     414:	002b0300 	eoreq	r0, fp, r0, lsl #6
     418:	4d020000 	stcmi	0, cr0, [r2, #-0]
     41c:	00000062 	andeq	r0, r0, r2, rrx
     420:	2d050402 	cfstrscs	mvf0, [r5, #-8]
     424:	03000002 	movweq	r0, #2
     428:	00000163 	andeq	r0, r0, r3, ror #2
     42c:	00744f02 	rsbseq	r4, r4, r2, lsl #30
     430:	04020000 	streq	r0, [r2], #-0
     434:	00010607 	andeq	r0, r1, r7, lsl #12
     438:	05080200 	streq	r0, [r8, #-512]	; 0xfffffe00
     43c:	00000228 	andeq	r0, r0, r8, lsr #4
     440:	01070802 	tsteq	r7, r2, lsl #16
     444:	04000001 	streq	r0, [r0], #-1
     448:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
     44c:	04020074 	streq	r0, [r2], #-116	; 0xffffff8c
     450:	00010b07 	andeq	r0, r1, r7, lsl #22
     454:	000c0300 	andeq	r0, ip, r0, lsl #6
     458:	18030000 	stmdane	r3, {}	; <UNPREDICTABLE>
     45c:	0000002c 	andeq	r0, r0, ip, lsr #32
     460:	0002ba03 	andeq	fp, r2, r3, lsl #20
     464:	45240300 	strmi	r0, [r4, #-768]!	; 0xfffffd00
     468:	03000000 	movweq	r0, #0
     46c:	0000002d 	andeq	r0, r0, sp, lsr #32
     470:	00572c03 	subseq	r2, r7, r3, lsl #24
     474:	ad050000 	stcge	0, cr0, [r5, #-0]
     478:	03000000 	movweq	r0, #0
     47c:	00000165 	andeq	r0, r0, r5, ror #2
     480:	00693003 	rsbeq	r3, r9, r3
     484:	4a060000 	bmi	18048c <startup-0x1fe7fb74>
     488:	04000001 	streq	r0, [r0], #-1
     48c:	00b806fa 	ldrshteq	r0, [r8], sl
     490:	41070000 	mrsmi	r0, (UNDEF: 7)
     494:	05000002 	streq	r0, [r0, #-2]
     498:	0000bd3b 	andeq	fp, r0, fp, lsr sp
     49c:	06140800 	ldreq	r0, [r4], -r0, lsl #16
     4a0:	0001308d 	andeq	r3, r1, sp, lsl #1
     4a4:	02360900 	eorseq	r0, r6, #0, 18
     4a8:	8f060000 	svchi	0x00060000
     4ac:	000000bd 	strheq	r0, [r0], -sp
     4b0:	02220900 	eoreq	r0, r2, #0, 18
     4b4:	92060000 	andls	r0, r6, #0
     4b8:	000000bd 	strheq	r0, [r0], -sp
     4bc:	44490a04 	strbmi	r0, [r9], #-2564	; 0xfffff5fc
     4c0:	95060045 	strls	r0, [r6, #-69]	; 0xffffffbb
     4c4:	00000097 	muleq	r0, r7, r0
     4c8:	54520a08 	ldrbpl	r0, [r2], #-2568	; 0xfffff5f8
     4cc:	99060052 	stmdbls	r6, {r1, r4, r6}
     4d0:	00000097 	muleq	r0, r7, r0
     4d4:	4c440a09 	mcrrmi	10, 0, r0, r4, cr9
     4d8:	9d060043 	stcls	0, cr0, [r6, #-268]	; 0xfffffef4
     4dc:	00000097 	muleq	r0, r7, r0
     4e0:	1990090a 	ldmibne	r0, {r1, r3, r8, fp}
     4e4:	a1060000 	mrsge	r0, (UNDEF: 6)
     4e8:	00000130 	andeq	r0, r0, r0, lsr r1
     4ec:	970b000b 	strls	r0, [fp, -fp]
     4f0:	40000000 	andmi	r0, r0, r0
     4f4:	0c000001 	stceq	0, cr0, [r0], {1}
     4f8:	00000090 	muleq	r0, r0, r0
     4fc:	26030007 	strcs	r0, [r3], -r7
     500:	06000001 	streq	r0, [r0], -r1
     504:	0000dfa3 	andeq	sp, r0, r3, lsr #31
     508:	06140800 	ldreq	r0, [r4], -r0, lsl #16
     50c:	0001a8a8 	andeq	sl, r1, r8, lsr #17
     510:	02360900 	eorseq	r0, r6, #0, 18
     514:	aa060000 	bge	18051c <startup-0x1fe7fae4>
     518:	000000bd 	strheq	r0, [r0], -sp
     51c:	02220900 	eoreq	r0, r2, #0, 18
     520:	ad060000 	stcge	0, cr0, [r6, #-0]
     524:	000000bd 	strheq	r0, [r0], -sp
     528:	44490a04 	strbmi	r0, [r9], #-2564	; 0xfffff5fc
     52c:	b0060045 	andlt	r0, r6, r5, asr #32
     530:	00000097 	muleq	r0, r7, r0
     534:	54520a08 	ldrbpl	r0, [r2], #-2568	; 0xfffff5f8
     538:	b4060052 	strlt	r0, [r6], #-82	; 0xffffffae
     53c:	00000097 	muleq	r0, r7, r0
     540:	4c440a09 	mcrrmi	10, 0, r0, r4, cr9
     544:	b8060043 	stmdalt	r6, {r0, r1, r6}
     548:	00000097 	muleq	r0, r7, r0
     54c:	1990090a 	ldmibne	r0, {r1, r3, r8, fp}
     550:	bb060000 	bllt	180558 <startup-0x1fe7faa8>
     554:	00000130 	andeq	r0, r0, r0, lsr r1
     558:	4d460a0b 	vstrmi	s1, [r6, #-44]	; 0xffffffd4
     55c:	be060049 	cdplt	0, 0, cr0, cr6, cr9, {2}
     560:	00000097 	muleq	r0, r7, r0
     564:	67030013 	smladvs	r3, r3, r0, r0
     568:	06000002 	streq	r0, [r0], -r2
     56c:	00014bc1 	andeq	r4, r1, r1, asr #23
     570:	07040800 	streq	r0, [r4, -r0, lsl #16]
     574:	00021513 	andeq	r1, r2, r3, lsl r5
     578:	00350d00 	eorseq	r0, r5, r0, lsl #26
     57c:	15070000 	strne	r0, [r7, #-0]
     580:	000000bd 	strheq	r0, [r0], -sp
     584:	00180804 	andseq	r0, r8, r4, lsl #16
     588:	0000000d 	andeq	r0, r0, sp
     58c:	bd190700 	ldclt	7, cr0, [r9, #-0]
     590:	04000000 	streq	r0, [r0], #-0
     594:	0e000e0a 	cdpeq	14, 0, cr0, cr0, cr10, {0}
     598:	07004449 	streq	r4, [r0, -r9, asr #8]
     59c:	0000bd1d 	andeq	fp, r0, sp, lsl sp
     5a0:	07070400 	streq	r0, [r7, -r0, lsl #8]
     5a4:	01800d00 	orreq	r0, r0, r0, lsl #26
     5a8:	21070000 	mrscs	r0, (UNDEF: 7)
     5ac:	000000bd 	strheq	r0, [r0], -sp
     5b0:	00060104 	andeq	r0, r6, r4, lsl #2
     5b4:	00001b0d 	andeq	r1, r0, sp, lsl #22
     5b8:	bd240700 	stclt	7, cr0, [r4, #-0]
     5bc:	04000000 	streq	r0, [r0], #-0
     5c0:	0d000303 	stceq	3, cr0, [r0, #-12]
     5c4:	00000023 	andeq	r0, r0, r3, lsr #32
     5c8:	00bd2707 	adcseq	r2, sp, r7, lsl #14
     5cc:	03040000 	movweq	r0, #16384	; 0x4000
     5d0:	03000000 	movweq	r0, #0
     5d4:	00000294 	muleq	r0, r4, r2
     5d8:	01b32807 			; <UNDEFINED> instruction: 0x01b32807
     5dc:	f50f0000 			; <UNDEFINED> instruction: 0xf50f0000
     5e0:	01000003 	tsteq	r0, r3
     5e4:	000097af 	andeq	r9, r0, pc, lsr #15
     5e8:	0005b400 	andeq	fp, r5, r0, lsl #8
     5ec:	00001e20 	andeq	r1, r0, r0, lsr #28
     5f0:	489c0100 	ldmmi	ip, {r8}
     5f4:	10000002 	andne	r0, r0, r2
     5f8:	0067736d 	rsbeq	r7, r7, sp, ror #6
     5fc:	0248af01 	subeq	sl, r8, #1, 30
     600:	91020000 	mrsls	r0, (UNDEF: 2)
     604:	04110074 	ldreq	r0, [r1], #-116	; 0xffffff8c
     608:	000001a8 	andeq	r0, r0, r8, lsr #3
     60c:	0003530f 	andeq	r5, r3, pc, lsl #6
     610:	bda60100 	stflts	f0, [r6]
     614:	7a000000 	bvc	61c <startup-0x1ffff9e4>
     618:	3a200005 	bcc	800634 <startup-0x1f7ff9cc>
     61c:	01000000 	mrseq	r0, (UNDEF: 0)
     620:	0002769c 	muleq	r2, ip, r6
     624:	736d1000 	cmnvc	sp, #0
     628:	a6010067 	strge	r0, [r1], -r7, rrx
     62c:	00000248 	andeq	r0, r0, r8, asr #4
     630:	00749102 	rsbseq	r9, r4, r2, lsl #2
     634:	0003610f 	andeq	r6, r3, pc, lsl #2
     638:	97950100 	ldrls	r0, [r5, r0, lsl #2]
     63c:	40000000 	andmi	r0, r0, r0
     640:	3a200005 	bcc	80065c <startup-0x1f7ff9a4>
     644:	01000000 	mrseq	r0, (UNDEF: 0)
     648:	0002f29c 	muleq	r2, ip, r2
     64c:	736d1000 	cmnvc	sp, #0
     650:	95010067 	strls	r0, [r1, #-103]	; 0xffffff99
     654:	00000248 	andeq	r0, r0, r8, asr #4
     658:	126c9102 	rsbne	r9, ip, #-2147483648	; 0x80000000
     65c:	0000032d 	andeq	r0, r0, sp, lsr #6
     660:	02f29501 	rscseq	r9, r2, #4194304	; 0x400000
     664:	91020000 	mrsls	r0, (UNDEF: 2)
     668:	03491268 	movteq	r1, #37480	; 0x9268
     66c:	95010000 	strls	r0, [r1, #-0]
     670:	000002f2 	strdeq	r0, [r0], -r2
     674:	12649102 	rsbne	r9, r4, #-2147483648	; 0x80000000
     678:	0000040f 	andeq	r0, r0, pc, lsl #8
     67c:	02f89501 	rscseq	r9, r8, #4194304	; 0x400000
     680:	91020000 	mrsls	r0, (UNDEF: 2)
     684:	04161260 	ldreq	r1, [r6], #-608	; 0xfffffda0
     688:	95010000 	strls	r0, [r1, #-0]
     68c:	000002f8 	strdeq	r0, [r0], -r8
     690:	12009102 	andne	r9, r0, #-2147483648	; 0x80000000
     694:	00000342 	andeq	r0, r0, r2, asr #6
     698:	02f29501 	rscseq	r9, r2, #4194304	; 0x400000
     69c:	91020000 	mrsls	r0, (UNDEF: 2)
     6a0:	02ea1304 	rsceq	r1, sl, #4, 6	; 0x10000000
     6a4:	96010000 	strls	r0, [r1], -r0
     6a8:	000002f2 	strdeq	r0, [r0], -r2
     6ac:	00749102 	rsbseq	r9, r4, r2, lsl #2
     6b0:	00970411 	addseq	r0, r7, r1, lsl r4
     6b4:	04110000 	ldreq	r0, [r1], #-0
     6b8:	000000a2 	andeq	r0, r0, r2, lsr #1
     6bc:	0002cb14 	andeq	ip, r2, r4, lsl fp
     6c0:	a8860100 	stmge	r6, {r8}
     6c4:	98200004 	stmdals	r0!, {r2}
     6c8:	01000000 	mrseq	r0, (UNDEF: 0)
     6cc:	0003599c 	muleq	r3, ip, r9
     6d0:	736d1000 	cmnvc	sp, #0
     6d4:	86010067 	strhi	r0, [r1], -r7, rrx
     6d8:	00000359 	andeq	r0, r0, r9, asr r3
     6dc:	12649102 	rsbne	r9, r4, #-2147483648	; 0x80000000
     6e0:	000002e2 	andeq	r0, r0, r2, ror #5
     6e4:	00978601 	addseq	r8, r7, r1, lsl #12
     6e8:	91020000 	mrsls	r0, (UNDEF: 2)
     6ec:	02a11263 	adceq	r1, r1, #805306374	; 0x30000006
     6f0:	86010000 	strhi	r0, [r1], -r0
     6f4:	00000097 	muleq	r0, r7, r0
     6f8:	10629102 	rsbne	r9, r2, r2, lsl #2
     6fc:	01006469 	tsteq	r0, r9, ror #8
     700:	00009786 	andeq	r9, r0, r6, lsl #15
     704:	61910200 	orrsvs	r0, r1, r0, lsl #4
     708:	00027013 	andeq	r7, r2, r3, lsl r0
     70c:	15870100 	strne	r0, [r7, #256]	; 0x100
     710:	02000002 	andeq	r0, r0, #2
     714:	11006c91 			; <UNDEFINED> instruction: 0x11006c91
     718:	00014004 	andeq	r4, r1, r4
     71c:	041d1400 	ldreq	r1, [sp], #-1024	; 0xfffffc00
     720:	73010000 	movwvc	r0, #4096	; 0x1000
     724:	20000420 	andcs	r0, r0, r0, lsr #8
     728:	00000088 	andeq	r0, r0, r8, lsl #1
     72c:	03ac9c01 			; <UNDEFINED> instruction: 0x03ac9c01
     730:	6d100000 	ldcvs	0, cr0, [r0, #-0]
     734:	01006773 	tsteq	r0, r3, ror r7
     738:	00035973 	andeq	r5, r3, r3, ror r9
     73c:	64910200 	ldrvs	r0, [r1], #512	; 0x200
     740:	0002e212 	andeq	lr, r2, r2, lsl r2
     744:	97730100 	ldrbls	r0, [r3, -r0, lsl #2]!
     748:	02000000 	andeq	r0, r0, #0
     74c:	69106391 	ldmdbvs	r0, {r0, r4, r7, r8, r9, sp, lr}
     750:	73010064 	movwvc	r0, #4196	; 0x1064
     754:	00000097 	muleq	r0, r7, r0
     758:	13629102 	cmnne	r2, #-2147483648	; 0x80000000
     75c:	00000270 	andeq	r0, r0, r0, ror r2
     760:	02157401 	andseq	r7, r5, #16777216	; 0x1000000
     764:	91020000 	mrsls	r0, (UNDEF: 2)
     768:	780f006c 	stmdavc	pc, {r2, r3, r5, r6}	; <UNPREDICTABLE>
     76c:	01000003 	tsteq	r0, r3
     770:	00009766 	andeq	r9, r0, r6, ror #14
     774:	0003f800 	andeq	pc, r3, r0, lsl #16
     778:	00002820 	andeq	r2, r0, r0, lsr #16
     77c:	f09c0100 			; <UNDEFINED> instruction: 0xf09c0100
     780:	10000003 	andne	r0, r0, r3
     784:	0067736d 	rsbeq	r7, r7, sp, ror #6
     788:	03596601 	cmpeq	r9, #1048576	; 0x100000
     78c:	91020000 	mrsls	r0, (UNDEF: 2)
     790:	0328126c 			; <UNDEFINED> instruction: 0x0328126c
     794:	66010000 	strvs	r0, [r1], -r0
     798:	000000bd 	strheq	r0, [r0], -sp
     79c:	13689102 	cmnne	r8, #-2147483648	; 0x80000000
     7a0:	000002ea 	andeq	r0, r0, sl, ror #5
     7a4:	02f26701 	rscseq	r6, r2, #262144	; 0x40000
     7a8:	91020000 	mrsls	r0, (UNDEF: 2)
     7ac:	0f0f0074 	svceq	0x000f0074
     7b0:	01000003 	tsteq	r0, r3
     7b4:	0000974c 	andeq	r9, r0, ip, asr #14
     7b8:	00037000 	andeq	r7, r3, r0
     7bc:	00008820 	andeq	r8, r0, r0, lsr #16
     7c0:	4b9c0100 	blmi	fe700bc8 <dissarmedBit+0xde6fcc88>
     7c4:	10000004 	andne	r0, r0, r4
     7c8:	0067736d 	rsbeq	r7, r7, sp, ror #6
     7cc:	03594c01 	cmpeq	r9, #256	; 0x100
     7d0:	91020000 	mrsls	r0, (UNDEF: 2)
     7d4:	0320126c 			; <UNDEFINED> instruction: 0x0320126c
     7d8:	4c010000 	stcmi	0, cr0, [r1], {-0}
     7dc:	00000248 	andeq	r0, r0, r8, asr #4
     7e0:	10689102 	rsbne	r9, r8, r2, lsl #2
     7e4:	01006469 	tsteq	r0, r9, ror #8
     7e8:	0000974c 	andeq	r9, r0, ip, asr #14
     7ec:	67910200 	ldrvs	r0, [r1, r0, lsl #4]
     7f0:	00038615 	andeq	r8, r3, r5, lsl r6
     7f4:	00006820 	andeq	r6, r0, r0, lsr #16
     7f8:	02701300 	rsbseq	r1, r0, #0, 6
     7fc:	4f010000 	svcmi	0x00010000
     800:	00000215 	andeq	r0, r0, r5, lsl r2
     804:	00749102 	rsbseq	r9, r4, r2, lsl #2
     808:	03e30f00 	mvneq	r0, #0, 30
     80c:	30010000 	andcc	r0, r1, r0
     810:	00000097 	muleq	r0, r7, r0
     814:	200002d4 	ldrdcs	r0, [r0], -r4
     818:	0000009c 	muleq	r0, ip, r0
     81c:	04b99c01 	ldrteq	r9, [r9], #3073	; 0xc01
     820:	6d100000 	ldcvs	0, cr0, [r0, #-0]
     824:	01006773 	tsteq	r0, r3, ror r7
     828:	00035930 	andeq	r5, r3, r0, lsr r9
     82c:	6c910200 	lfmvs	f0, 4, [r1], {0}
     830:	00040712 	andeq	r0, r4, r2, lsl r7
     834:	bd300100 	ldflts	f0, [r0, #-0]
     838:	02000000 	andeq	r0, r0, #0
     83c:	ac126891 	ldcge	8, cr6, [r2], {145}	; 0x91
     840:	01000002 	tsteq	r0, r2
     844:	00009730 	andeq	r9, r0, r0, lsr r7
     848:	67910200 	ldrvs	r0, [r1, r0, lsl #4]
     84c:	0002c312 	andeq	ip, r2, r2, lsl r3
     850:	97300100 	ldrls	r0, [r0, -r0, lsl #2]!
     854:	02000000 	andeq	r0, r0, #0
     858:	ff126691 			; <UNDEFINED> instruction: 0xff126691
     85c:	01000003 	tsteq	r0, r3
     860:	00009730 	andeq	r9, r0, r0, lsr r7
     864:	00910200 	addseq	r0, r1, r0, lsl #4
     868:	00027013 	andeq	r7, r2, r3, lsl r0
     86c:	15310100 	ldrne	r0, [r1, #-256]!	; 0xffffff00
     870:	02000002 	andeq	r0, r0, #2
     874:	16007491 			; <UNDEFINED> instruction: 0x16007491
     878:	000002f7 	strdeq	r0, [r0], -r7
     87c:	00970901 	addseq	r0, r7, r1, lsl #18
     880:	02000000 	andeq	r0, r0, #0
     884:	00d42000 	sbcseq	r2, r4, r0
     888:	9c010000 	stcls	0, cr0, [r1], {-0}
     88c:	67736d10 			; <UNDEFINED> instruction: 0x67736d10
     890:	59090100 	stmdbpl	r9, {r8}
     894:	02000003 	andeq	r0, r0, #3
     898:	37126491 			; <UNDEFINED> instruction: 0x37126491
     89c:	01000003 	tsteq	r0, r3
     8a0:	00009709 	andeq	r9, r0, r9, lsl #14
     8a4:	63910200 	orrsvs	r0, r1, #0, 4
     8a8:	00032d12 	andeq	r2, r3, r2, lsl sp
     8ac:	97090100 	strls	r0, [r9, -r0, lsl #2]
     8b0:	02000000 	andeq	r0, r0, #0
     8b4:	49126291 	ldmdbmi	r2, {r0, r4, r7, r9, sp, lr}
     8b8:	01000003 	tsteq	r0, r3
     8bc:	00009709 	andeq	r9, r0, r9, lsl #14
     8c0:	61910200 	orrsvs	r0, r1, r0, lsl #4
     8c4:	00040f12 	andeq	r0, r4, r2, lsl pc
     8c8:	a2090100 	andge	r0, r9, #0, 2
     8cc:	02000000 	andeq	r0, r0, #0
     8d0:	16120091 			; <UNDEFINED> instruction: 0x16120091
     8d4:	01000004 	tsteq	r0, r4
     8d8:	0000a209 	andeq	sl, r0, r9, lsl #4
     8dc:	04910200 	ldreq	r0, [r1], #512	; 0x200
     8e0:	00034212 	andeq	r4, r3, r2, lsl r2
     8e4:	97090100 	strls	r0, [r9, -r0, lsl #2]
     8e8:	02000000 	andeq	r0, r0, #0
     8ec:	ea130891 	b	4c2b38 <startup-0x1fb3d4c8>
     8f0:	01000002 	tsteq	r0, r2
     8f4:	0002f20e 	andeq	pc, r2, lr, lsl #4
     8f8:	6c910200 	lfmvs	f0, 4, [r1], {0}
     8fc:	00027013 	andeq	r7, r2, r3, lsl r0
     900:	15110100 	ldrne	r0, [r1, #-256]	; 0xffffff00
     904:	02000002 	andeq	r0, r0, #2
     908:	00006891 	muleq	r0, r1, r8
     90c:	000002ba 			; <UNDEFINED> instruction: 0x000002ba
     910:	02d30004 	sbcseq	r0, r3, #4
     914:	01040000 	mrseq	r0, (UNDEF: 4)
     918:	00000051 	andeq	r0, r0, r1, asr r0
     91c:	0005570c 	andeq	r5, r5, ip, lsl #14
     920:	0001df00 	andeq	sp, r1, r0, lsl #30
     924:	0005d400 	andeq	sp, r5, r0, lsl #8
     928:	0001c820 	andeq	ip, r1, r0, lsr #16
     92c:	00043100 	andeq	r3, r4, r0, lsl #2
     930:	06010200 	streq	r0, [r1], -r0, lsl #4
     934:	0000011a 	andeq	r0, r0, sl, lsl r1
     938:	18080102 	stmdane	r8, {r1, r8}
     93c:	02000001 	andeq	r0, r0, #1
     940:	003c0502 	eorseq	r0, ip, r2, lsl #10
     944:	b8030000 	stmdalt	r3, {}	; <UNPREDICTABLE>
     948:	02000002 	andeq	r0, r0, #2
     94c:	00004539 	andeq	r4, r0, r9, lsr r5
     950:	07020200 	streq	r0, [r2, -r0, lsl #4]
     954:	00000281 	andeq	r0, r0, r1, lsl #5
     958:	00002b03 	andeq	r2, r0, r3, lsl #22
     95c:	574d0200 	strbpl	r0, [sp, -r0, lsl #4]
     960:	02000000 	andeq	r0, r0, #0
     964:	022d0504 	eoreq	r0, sp, #4, 10	; 0x1000000
     968:	63030000 	movwvs	r0, #12288	; 0x3000
     96c:	02000001 	andeq	r0, r0, #1
     970:	0000694f 	andeq	r6, r0, pc, asr #18
     974:	07040200 	streq	r0, [r4, -r0, lsl #4]
     978:	00000106 	andeq	r0, r0, r6, lsl #2
     97c:	28050802 	stmdacs	r5, {r1, fp}
     980:	02000002 	andeq	r0, r0, #2
     984:	01010708 	tsteq	r1, r8, lsl #14
     988:	04040000 	streq	r0, [r4], #-0
     98c:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
     990:	07040200 	streq	r0, [r4, -r0, lsl #4]
     994:	0000010b 	andeq	r0, r0, fp, lsl #2
     998:	0002ba03 	andeq	fp, r2, r3, lsl #20
     99c:	3a240300 	bcc	9015a4 <startup-0x1f6fea5c>
     9a0:	05000000 	streq	r0, [r0, #-0]
     9a4:	0000008c 	andeq	r0, r0, ip, lsl #1
     9a8:	00002d03 	andeq	r2, r0, r3, lsl #26
     9ac:	4c2c0300 	stcmi	3, cr0, [ip], #-0
     9b0:	05000000 	streq	r0, [r0, #-0]
     9b4:	0000009c 	muleq	r0, ip, r0
     9b8:	00016503 	andeq	r6, r1, r3, lsl #10
     9bc:	5e300300 	cdppl	3, 3, cr0, cr0, cr0, {0}
     9c0:	05000000 	streq	r0, [r0, #-0]
     9c4:	000000ac 	andeq	r0, r0, ip, lsr #1
     9c8:	00014a06 	andeq	r4, r1, r6, lsl #20
     9cc:	06fa0400 	ldrbteq	r0, [sl], r0, lsl #8
     9d0:	000000a7 	andeq	r0, r0, r7, lsr #1
     9d4:	00024107 	andeq	r4, r2, r7, lsl #2
     9d8:	ac3b0500 	cfldr32ge	mvfx0, [fp], #-0
     9dc:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
     9e0:	002c0107 	eoreq	r0, ip, r7, lsl #2
     9e4:	5f060000 	svcpl	0x00060000
     9e8:	0000ee03 	andeq	lr, r0, r3, lsl #28
     9ec:	01420900 	cmpeq	r2, r0, lsl #18
     9f0:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
     9f4:	000000fa 	strdeq	r0, [r0], -sl
     9f8:	280a0001 	stmdacs	sl, {r0}
     9fc:	7a05c306 	bvc	17161c <startup-0x1fe8e9e4>
     a00:	0b000001 	bleq	a0c <startup-0x1ffff5f4>
     a04:	00000488 	andeq	r0, r0, r8, lsl #9
     a08:	b705c506 	strlt	ip, [r5, -r6, lsl #10]
     a0c:	00000000 	andeq	r0, r0, r0
     a10:	0004980b 	andeq	r9, r4, fp, lsl #16
     a14:	05c60600 	strbeq	r0, [r6, #1536]	; 0x600
     a18:	000000b7 	strheq	r0, [r0], -r7
     a1c:	05210b04 	streq	r0, [r1, #-2820]!	; 0xfffff4fc
     a20:	c7060000 	strgt	r0, [r6, -r0]
     a24:	0000b705 	andeq	fp, r0, r5, lsl #14
     a28:	360b0800 	strcc	r0, [fp], -r0, lsl #16
     a2c:	06000005 	streq	r0, [r0], -r5
     a30:	00b705c8 	adcseq	r0, r7, r8, asr #11
     a34:	0c0c0000 	stceq	0, cr0, [ip], {-0}
     a38:	00524449 	subseq	r4, r2, r9, asr #8
     a3c:	b705c906 	strlt	ip, [r5, -r6, lsl #18]
     a40:	10000000 	andne	r0, r0, r0
     a44:	52444f0c 	subpl	r4, r4, #12, 30	; 0x30
     a48:	05ca0600 	strbeq	r0, [sl, #1536]	; 0x600
     a4c:	000000b7 	strheq	r0, [r0], -r7
     a50:	05e50b14 	strbeq	r0, [r5, #2836]!	; 0xb14
     a54:	cb060000 	blgt	180a5c <startup-0x1fe7f5a4>
     a58:	00009705 	andeq	r9, r0, r5, lsl #14
     a5c:	bc0b1800 	stclt	8, cr1, [fp], {-0}
     a60:	06000004 	streq	r0, [r0], -r4
     a64:	009705cc 	addseq	r0, r7, ip, asr #11
     a68:	0b1a0000 	bleq	680a70 <startup-0x1f97f590>
     a6c:	0000043d 	andeq	r0, r0, sp, lsr r4
     a70:	b705cd06 	strlt	ip, [r5, -r6, lsl #26]
     a74:	1c000000 	stcne	0, cr0, [r0], {-0}
     a78:	5246410c 	subpl	r4, r6, #12, 2
     a7c:	05ce0600 	strbeq	r0, [lr, #1536]	; 0x600
     a80:	0000018a 	andeq	r0, r0, sl, lsl #3
     a84:	b70d0020 	strlt	r0, [sp, -r0, lsr #32]
     a88:	8a000000 	bhi	a90 <startup-0x1ffff570>
     a8c:	0e000001 	cdpeq	0, 0, cr0, cr0, cr1, {0}
     a90:	00000085 	andeq	r0, r0, r5, lsl #1
     a94:	7a050001 	bvc	140aa0 <startup-0x1febf560>
     a98:	0f000001 	svceq	0x00000001
     a9c:	00000529 	andeq	r0, r0, r9, lsr #10
     aa0:	ee05cf06 	cdp	15, 0, cr12, cr5, cr6, {0}
     aa4:	10000000 	andne	r0, r0, r0
     aa8:	002c0107 	eoreq	r0, ip, r7, lsl #2
     aac:	42070000 	andmi	r0, r7, #0
     ab0:	000001c1 	andeq	r0, r0, r1, asr #3
     ab4:	0004af09 	andeq	sl, r4, r9, lsl #30
     ab8:	f4090000 	vst4.8	{d0-d3}, [r9], r0
     abc:	01000005 	tsteq	r0, r5
     ac0:	00044209 	andeq	r4, r4, r9, lsl #4
     ac4:	7b090200 	blvc	2412cc <startup-0x1fdbed34>
     ac8:	03000004 	movweq	r0, #4
     acc:	06020300 	streq	r0, [r2], -r0, lsl #6
     ad0:	47070000 	strmi	r0, [r7, -r0]
     ad4:	0000019b 	muleq	r0, fp, r1
     ad8:	2c010710 	stccs	7, cr0, [r1], {16}
     adc:	07000000 	streq	r0, [r0, -r0]
     ae0:	0001e64f 	andeq	lr, r1, pc, asr #12
     ae4:	053c0900 	ldreq	r0, [ip, #-2304]!	; 0xfffff700
     ae8:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
     aec:	0000045e 	andeq	r0, r0, lr, asr r4
     af0:	a6030001 	strge	r0, [r3], -r1
     af4:	07000005 	streq	r0, [r0, -r5]
     af8:	0001cc52 	andeq	ip, r1, r2, asr ip
     afc:	01071000 	mrseq	r1, (UNDEF: 7)
     b00:	0000002c 	andeq	r0, r0, ip, lsr #32
     b04:	02175a07 	andseq	r5, r7, #28672	; 0x7000
     b08:	6c090000 	stcvs	0, cr0, [r9], {-0}
     b0c:	00000004 	andeq	r0, r0, r4
     b10:	0004ec09 	andeq	lr, r4, r9, lsl #24
     b14:	dc090100 	stfles	f0, [r9], {-0}
     b18:	02000004 	andeq	r0, r0, #4
     b1c:	0004c209 	andeq	ip, r4, r9, lsl #4
     b20:	03000300 	movweq	r0, #768	; 0x300
     b24:	0000050f 	andeq	r0, r0, pc, lsl #10
     b28:	01f15f07 	mvnseq	r5, r7, lsl #30
     b2c:	07100000 	ldreq	r0, [r0, -r0]
     b30:	00002c01 	andeq	r2, r0, r1, lsl #24
     b34:	426e0700 	rsbmi	r0, lr, #0, 14
     b38:	09000002 	stmdbeq	r0, {r1}
     b3c:	000004fe 	strdeq	r0, [r0], -lr
     b40:	054a0900 	strbeq	r0, [sl, #-2304]	; 0xfffff700
     b44:	09010000 	stmdbeq	r1, {}	; <UNPREDICTABLE>
     b48:	0000044f 	andeq	r0, r0, pc, asr #8
     b4c:	d4030002 	strle	r0, [r3], #-2
     b50:	07000005 	streq	r0, [r0, -r5]
     b54:	00022272 	andeq	r2, r2, r2, ror r2
     b58:	07081100 	streq	r1, [r8, -r0, lsl #2]
     b5c:	00029284 	andeq	r9, r2, r4, lsl #5
     b60:	05eb1200 	strbeq	r1, [fp, #512]!	; 0x200
     b64:	86070000 	strhi	r0, [r7], -r0
     b68:	000000ac 	andeq	r0, r0, ip, lsr #1
     b6c:	048e1200 	streq	r1, [lr], #512	; 0x200
     b70:	89070000 	stmdbhi	r7, {}	; <UNPREDICTABLE>
     b74:	000001c1 	andeq	r0, r0, r1, asr #3
     b78:	04321204 	ldrteq	r1, [r2], #-516	; 0xfffffdfc
     b7c:	8c070000 	stchi	0, cr0, [r7], {-0}
     b80:	00000217 	andeq	r0, r0, r7, lsl r2
     b84:	05b81205 	ldreq	r1, [r8, #517]!	; 0x205
     b88:	8f070000 	svchi	0x00070000
     b8c:	000001e6 	andeq	r0, r0, r6, ror #3
     b90:	04d21206 	ldrbeq	r1, [r2], #518	; 0x206
     b94:	92070000 	andls	r0, r7, #0
     b98:	00000242 	andeq	r0, r0, r2, asr #4
     b9c:	c3030007 	movwgt	r0, #12295	; 0x3007
     ba0:	07000005 	streq	r0, [r0, -r5]
     ba4:	00024d94 	muleq	r2, r4, sp
     ba8:	049f1300 	ldreq	r1, [pc], #768	; bb0 <startup-0x1ffff450>
     bac:	03010000 	movweq	r0, #4096	; 0x1000
     bb0:	200005d4 	ldrdcs	r0, [r0], -r4
     bb4:	000001c8 	andeq	r0, r0, r8, asr #3
     bb8:	6c149c01 	ldcvs	12, cr9, [r4], {1}
     bbc:	01000016 	tsteq	r0, r6, lsl r0
     bc0:	00029206 	andeq	r9, r2, r6, lsl #4
     bc4:	70910200 	addsvc	r0, r1, r0, lsl #4
     bc8:	04190000 	ldreq	r0, [r9], #-0
     bcc:	00040000 	andeq	r0, r4, r0
     bd0:	000003e9 	andeq	r0, r0, r9, ror #7
     bd4:	00510104 	subseq	r0, r1, r4, lsl #2
     bd8:	990c0000 	stmdbls	ip, {}	; <UNPREDICTABLE>
     bdc:	df000006 	svcle	0x00000006
     be0:	9c000001 	stcls	0, cr0, [r0], {1}
     be4:	80200007 	eorhi	r0, r0, r7
     be8:	1a000002 	bne	bf8 <startup-0x1ffff408>
     bec:	02000006 	andeq	r0, r0, #6
     bf0:	011a0601 	tsteq	sl, r1, lsl #12
     bf4:	01020000 	mrseq	r0, (UNDEF: 2)
     bf8:	00011808 	andeq	r1, r1, r8, lsl #16
     bfc:	05020200 	streq	r0, [r2, #-512]	; 0xfffffe00
     c00:	0000003c 	andeq	r0, r0, ip, lsr r0
     c04:	0002b803 	andeq	fp, r2, r3, lsl #16
     c08:	45390200 	ldrmi	r0, [r9, #-512]!	; 0xfffffe00
     c0c:	02000000 	andeq	r0, r0, #0
     c10:	02810702 	addeq	r0, r1, #524288	; 0x80000
     c14:	2b030000 	blcs	c0c1c <startup-0x1ff3f3e4>
     c18:	02000000 	andeq	r0, r0, #0
     c1c:	0000574d 	andeq	r5, r0, sp, asr #14
     c20:	05040200 	streq	r0, [r4, #-512]	; 0xfffffe00
     c24:	0000022d 	andeq	r0, r0, sp, lsr #4
     c28:	00016303 	andeq	r6, r1, r3, lsl #6
     c2c:	694f0200 	stmdbvs	pc, {r9}^	; <UNPREDICTABLE>
     c30:	02000000 	andeq	r0, r0, #0
     c34:	01060704 	tsteq	r6, r4, lsl #14
     c38:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
     c3c:	00022805 	andeq	r2, r2, r5, lsl #16
     c40:	07080200 	streq	r0, [r8, -r0, lsl #4]
     c44:	00000101 	andeq	r0, r0, r1, lsl #2
     c48:	69050404 	stmdbvs	r5, {r2, sl}
     c4c:	0500746e 	streq	r7, [r0, #-1134]	; 0xfffffb92
     c50:	0000007e 	andeq	r0, r0, lr, ror r0
     c54:	0b070402 	bleq	1c1c64 <startup-0x1fe3e39c>
     c58:	03000001 	movweq	r0, #1
     c5c:	000002ba 			; <UNDEFINED> instruction: 0x000002ba
     c60:	003a2403 	eorseq	r2, sl, r3, lsl #8
     c64:	91060000 	mrsls	r0, (UNDEF: 6)
     c68:	03000000 	movweq	r0, #0
     c6c:	0000002d 	andeq	r0, r0, sp, lsr #32
     c70:	004c2c03 	subeq	r2, ip, r3, lsl #24
     c74:	a1060000 	mrsge	r0, (UNDEF: 6)
     c78:	03000000 	movweq	r0, #0
     c7c:	00000165 	andeq	r0, r0, r5, ror #2
     c80:	005e3003 	subseq	r3, lr, r3
     c84:	b1060000 	mrslt	r0, (UNDEF: 6)
     c88:	07000000 	streq	r0, [r0, -r0]
     c8c:	0000014a 	andeq	r0, r0, sl, asr #2
     c90:	ac06fa04 			; <UNDEFINED> instruction: 0xac06fa04
     c94:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
     c98:	00000241 	andeq	r0, r0, r1, asr #4
     c9c:	00b13b05 	adcseq	r3, r1, r5, lsl #22
     ca0:	28090000 	stmdacs	r9, {}	; <UNPREDICTABLE>
     ca4:	6405c306 	strvs	ip, [r5], #-774	; 0xfffffcfa
     ca8:	0a000001 	beq	cb4 <startup-0x1ffff34c>
     cac:	00000488 	andeq	r0, r0, r8, lsl #9
     cb0:	bc05c506 	cfstr32lt	mvfx12, [r5], {6}
     cb4:	00000000 	andeq	r0, r0, r0
     cb8:	0004980a 	andeq	r9, r4, sl, lsl #16
     cbc:	05c60600 	strbeq	r0, [r6, #1536]	; 0x600
     cc0:	000000bc 	strheq	r0, [r0], -ip
     cc4:	05210a04 	streq	r0, [r1, #-2564]!	; 0xfffff5fc
     cc8:	c7060000 	strgt	r0, [r6, -r0]
     ccc:	0000bc05 	andeq	fp, r0, r5, lsl #24
     cd0:	360a0800 	strcc	r0, [sl], -r0, lsl #16
     cd4:	06000005 	streq	r0, [r0], -r5
     cd8:	00bc05c8 	adcseq	r0, ip, r8, asr #11
     cdc:	0b0c0000 	bleq	300ce4 <startup-0x1fcff31c>
     ce0:	00524449 	subseq	r4, r2, r9, asr #8
     ce4:	bc05c906 			; <UNDEFINED> instruction: 0xbc05c906
     ce8:	10000000 	andne	r0, r0, r0
     cec:	52444f0b 	subpl	r4, r4, #11, 30	; 0x2c
     cf0:	05ca0600 	strbeq	r0, [sl, #1536]	; 0x600
     cf4:	000000bc 	strheq	r0, [r0], -ip
     cf8:	05e50a14 	strbeq	r0, [r5, #2580]!	; 0xa14
     cfc:	cb060000 	blgt	180d04 <startup-0x1fe7f2fc>
     d00:	00009c05 	andeq	r9, r0, r5, lsl #24
     d04:	bc0a1800 	stclt	8, cr1, [sl], {-0}
     d08:	06000004 	streq	r0, [r0], -r4
     d0c:	009c05cc 	addseq	r0, ip, ip, asr #11
     d10:	0a1a0000 	beq	680d18 <startup-0x1f97f2e8>
     d14:	0000043d 	andeq	r0, r0, sp, lsr r4
     d18:	bc05cd06 	stclt	13, cr12, [r5], {6}
     d1c:	1c000000 	stcne	0, cr0, [r0], {-0}
     d20:	5246410b 	subpl	r4, r6, #-1073741822	; 0xc0000002
     d24:	05ce0600 	strbeq	r0, [lr, #1536]	; 0x600
     d28:	00000174 	andeq	r0, r0, r4, ror r1
     d2c:	bc0c0020 	stclt	0, cr0, [ip], {32}
     d30:	74000000 	strvc	r0, [r0], #-0
     d34:	0d000001 	stceq	0, cr0, [r0, #-4]
     d38:	0000008a 	andeq	r0, r0, sl, lsl #1
     d3c:	64060001 	strvs	r0, [r6], #-1
     d40:	0e000001 	cdpeq	0, 0, cr0, cr0, cr1, {0}
     d44:	00000529 	andeq	r0, r0, r9, lsr #10
     d48:	d805cf06 	stmdale	r5, {r1, r2, r8, r9, sl, fp, lr, pc}
     d4c:	0f000000 	svceq	0x00000000
     d50:	0000063c 	andeq	r0, r0, ip, lsr r6
     d54:	fd040720 	stc2	7, cr0, [r4, #-128]	; 0xffffff80
     d58:	10000001 	andne	r0, r0, r1
     d5c:	07006469 	streq	r6, [r0, -r9, ror #8]
     d60:	0001fd06 	andeq	pc, r1, r6, lsl #26
     d64:	26110000 	ldrcs	r0, [r1], -r0
     d68:	07000006 	streq	r0, [r0, -r6]
     d6c:	00007e07 	andeq	r7, r0, r7, lsl #28
     d70:	32110400 	andscc	r0, r1, #0, 8
     d74:	07000006 	streq	r0, [r0, -r6]
     d78:	0001fd08 	andeq	pc, r1, r8, lsl #26
     d7c:	e8110800 	ldmda	r1, {fp}
     d80:	07000006 	streq	r0, [r0, -r6]
     d84:	0001fd09 	andeq	pc, r1, r9, lsl #26
     d88:	55110900 	ldrpl	r0, [r1, #-2304]	; 0xfffff700
     d8c:	07000007 	streq	r0, [r0, -r7]
     d90:	00007e0a 	andeq	r7, r0, sl, lsl #28
     d94:	23110c00 	tstcs	r1, #0, 24
     d98:	07000007 	streq	r0, [r0, -r7]
     d9c:	00007e0b 	andeq	r7, r0, fp, lsl #28
     da0:	1c111000 	ldcne	0, cr1, [r1], {-0}
     da4:	07000006 	streq	r0, [r0, -r6]
     da8:	00007e0c 	andeq	r7, r0, ip, lsl #28
     dac:	13111400 	tstne	r1, #0, 8
     db0:	07000006 	streq	r0, [r0, -r6]
     db4:	00007e0d 	andeq	r7, r0, sp, lsl #28
     db8:	7a111800 	bvc	446dc0 <startup-0x1fbb9240>
     dbc:	07000006 	streq	r0, [r0, -r6]
     dc0:	0002040e 	andeq	r0, r2, lr, lsl #8
     dc4:	02001c00 	andeq	r1, r0, #0, 24
     dc8:	01210801 			; <UNDEFINED> instruction: 0x01210801
     dcc:	04120000 	ldreq	r0, [r2], #-0
     dd0:	00000179 	andeq	r0, r0, r9, ror r1
     dd4:	00063d03 	andeq	r3, r6, r3, lsl #26
     dd8:	850f0700 	strhi	r0, [pc, #-1792]	; 6e0 <startup-0x1ffff920>
     ddc:	13000001 	movwne	r0, #1
     de0:	00000178 	andeq	r0, r0, r8, ror r1
     de4:	00bc1107 	adcseq	r1, ip, r7, lsl #2
     de8:	03050000 	movweq	r0, #20480	; 0x5000
     dec:	20003e04 	andcs	r3, r0, r4, lsl #28
     df0:	00646914 	rsbeq	r6, r4, r4, lsl r9
     df4:	00b11207 	adcseq	r1, r1, r7, lsl #4
     df8:	03050000 	movweq	r0, #20480	; 0x5000
     dfc:	20003e08 	andcs	r3, r0, r8, lsl #28
     e00:	00026113 	andeq	r6, r2, r3, lsl r1
     e04:	fd130700 	ldc2	7, cr0, [r3, #-0]
     e08:	05000001 	streq	r0, [r0, #-1]
     e0c:	003ef403 	eorseq	pc, lr, r3, lsl #8
     e10:	06911320 	ldreq	r1, [r1], r0, lsr #6
     e14:	05010000 	streq	r0, [r1, #-0]
     e18:	00000085 	andeq	r0, r0, r5, lsl #1
     e1c:	3f380305 	svccc	0x00380305
     e20:	8b132000 	blhi	4c8e28 <startup-0x1fb371d8>
     e24:	01000006 	tsteq	r0, r6
     e28:	00008506 	andeq	r8, r0, r6, lsl #10
     e2c:	3c030500 	cfstr32cc	mvfx0, [r3], {-0}
     e30:	1320003f 			; <UNDEFINED> instruction: 0x1320003f
     e34:	00000748 	andeq	r0, r0, r8, asr #14
     e38:	00850701 	addeq	r0, r5, r1, lsl #14
     e3c:	03050000 	movweq	r0, #20480	; 0x5000
     e40:	20003f40 	andcs	r3, r0, r0, asr #30
     e44:	00064815 	andeq	r4, r6, r5, lsl r8
     e48:	3c420100 	stfcce	f0, [r2], {-0}
     e4c:	e0200009 	eor	r0, r0, r9
     e50:	01000000 	mrseq	r0, (UNDEF: 0)
     e54:	0003109c 	muleq	r3, ip, r0
     e58:	06841600 	streq	r1, [r4], r0, lsl #12
     e5c:	42010000 	andmi	r0, r1, #0
     e60:	00000310 	andeq	r0, r0, r0, lsl r3
     e64:	16649102 	strbtne	r9, [r4], -r2, lsl #2
     e68:	00000672 	andeq	r0, r0, r2, ror r6
     e6c:	007e4201 	rsbseq	r4, lr, r1, lsl #4
     e70:	91020000 	mrsls	r0, (UNDEF: 2)
     e74:	09461760 	stmdbeq	r6, {r5, r6, r8, r9, sl, ip}^
     e78:	00322000 	eorseq	r2, r2, r0
     e7c:	02c50000 	sbceq	r0, r5, #0
     e80:	69180000 	ldmdbvs	r8, {}	; <UNPREDICTABLE>
     e84:	7e440100 	dvfvcs	f0, f4, f0
     e88:	02000000 	andeq	r0, r0, #0
     e8c:	17007491 			; <UNDEFINED> instruction: 0x17007491
     e90:	20000978 	andcs	r0, r0, r8, ror r9
     e94:	00000030 	andeq	r0, r0, r0, lsr r0
     e98:	000002df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
     e9c:	01006918 	tsteq	r0, r8, lsl r9
     ea0:	00007e4b 	andeq	r7, r0, fp, asr #28
     ea4:	70910200 	addsvc	r0, r1, r0, lsl #4
     ea8:	09ae1700 	stmibeq	lr!, {r8, r9, sl, ip}
     eac:	002c2000 	eoreq	r2, ip, r0
     eb0:	02f90000 	rscseq	r0, r9, #0
     eb4:	69180000 	ldmdbvs	r8, {}	; <UNPREDICTABLE>
     eb8:	7e520100 	rdfvcs	f0, f2, f0
     ebc:	02000000 	andeq	r0, r0, #0
     ec0:	19006c91 	stmdbne	r0, {r0, r4, r7, sl, fp, sp, lr}
     ec4:	200009e2 	andcs	r0, r0, r2, ror #19
     ec8:	0000002c 	andeq	r0, r0, ip, lsr #32
     ecc:	01006918 	tsteq	r0, r8, lsl r9
     ed0:	00007e58 	andeq	r7, r0, r8, asr lr
     ed4:	68910200 	ldmvs	r1, {r9}
     ed8:	04120000 	ldreq	r0, [r2], #-0
     edc:	0000020a 	andeq	r0, r0, sl, lsl #4
     ee0:	0006ed1a 	andeq	lr, r6, sl, lsl sp
     ee4:	7e370100 	rsfvcs	f0, f7, f0
     ee8:	e0000000 	and	r0, r0, r0
     eec:	5c200008 	stcpl	0, cr0, [r0], #-32	; 0xffffffe0
     ef0:	01000000 	mrseq	r0, (UNDEF: 0)
     ef4:	00034c9c 	muleq	r3, ip, ip
     ef8:	063d1600 	ldrteq	r1, [sp], -r0, lsl #12
     efc:	37010000 	strcc	r0, [r1, -r0]
     f00:	00000310 	andeq	r0, r0, r0, lsl r3
     f04:	1b6c9102 	blne	1b25314 <startup-0x1e4dacec>
     f08:	0000072d 	andeq	r0, r0, sp, lsr #14
     f0c:	00b13801 	adcseq	r3, r1, r1, lsl #16
     f10:	91020000 	mrsls	r0, (UNDEF: 2)
     f14:	04150074 	ldreq	r0, [r5], #-116	; 0xffffff8c
     f18:	01000007 	tsteq	r0, r7
     f1c:	00087c2d 	andeq	r7, r8, sp, lsr #24
     f20:	00006420 	andeq	r6, r0, r0, lsr #8
     f24:	7e9c0100 	fmlvce	f0, f4, f0
     f28:	16000003 	strne	r0, [r0], -r3
     f2c:	0000063d 	andeq	r0, r0, sp, lsr r6
     f30:	03102d01 	tsteq	r0, #1, 26	; 0x40
     f34:	91020000 	mrsls	r0, (UNDEF: 2)
     f38:	072d1b6c 	streq	r1, [sp, -ip, ror #22]!
     f3c:	2e010000 	cdpcs	0, 0, cr0, cr1, cr0, {0}
     f40:	000000b1 	strheq	r0, [r0], -r1
     f44:	00749102 	rsbseq	r9, r4, r2, lsl #2
     f48:	00073615 	andeq	r3, r7, r5, lsl r6
     f4c:	e6180100 	ldr	r0, [r8], -r0, lsl #2
     f50:	96200007 	strtls	r0, [r0], -r7
     f54:	01000000 	mrseq	r0, (UNDEF: 0)
     f58:	0003c69c 	muleq	r3, ip, r6
     f5c:	06841600 	streq	r1, [r4], r0, lsl #12
     f60:	18010000 	stmdane	r1, {}	; <UNPREDICTABLE>
     f64:	00000310 	andeq	r0, r0, r0, lsl r3
     f68:	166c9102 	strbtne	r9, [ip], -r2, lsl #2
     f6c:	00000717 	andeq	r0, r0, r7, lsl r7
     f70:	007e1801 	rsbseq	r1, lr, r1, lsl #16
     f74:	91020000 	mrsls	r0, (UNDEF: 2)
     f78:	07f01968 	ldrbeq	r1, [r0, r8, ror #18]!
     f7c:	007c2000 	rsbseq	r2, ip, r0
     f80:	69180000 	ldmdbvs	r8, {}	; <UNPREDICTABLE>
     f84:	7e190100 	mufvce	f0, f1, f0
     f88:	02000000 	andeq	r0, r0, #0
     f8c:	00007491 	muleq	r0, r1, r4
     f90:	0006571a 	andeq	r5, r6, sl, lsl r7
     f94:	7e0f0100 	adfvce	f0, f7, f0
     f98:	c8000000 	stmdagt	r0, {}	; <UNPREDICTABLE>
     f9c:	1e200007 	cdpne	0, 2, cr0, cr0, cr7, {0}
     fa0:	01000000 	mrseq	r0, (UNDEF: 0)
     fa4:	0003ee9c 	muleq	r3, ip, lr
     fa8:	06651600 	strbteq	r1, [r5], -r0, lsl #12
     fac:	0f010000 	svceq	0x00010000
     fb0:	0000007e 	andeq	r0, r0, lr, ror r0
     fb4:	00749102 	rsbseq	r9, r4, r2, lsl #2
     fb8:	0006421c 	andeq	r4, r6, ip, lsl r2
     fbc:	9c090100 	stflss	f0, [r9], {-0}
     fc0:	2c200007 	stccs	0, cr0, [r0], #-28	; 0xffffffe4
     fc4:	01000000 	mrseq	r0, (UNDEF: 0)
     fc8:	06ff169c 	usateq	r1, #31, ip, lsl #13
     fcc:	09010000 	stmdbeq	r1, {}	; <UNPREDICTABLE>
     fd0:	0000007e 	andeq	r0, r0, lr, ror r0
     fd4:	1b6c9102 	blne	1b253e4 <startup-0x1e4dac1c>
     fd8:	000006fa 	strdeq	r0, [r0], -sl
     fdc:	007e0a01 	rsbseq	r0, lr, r1, lsl #20
     fe0:	91020000 	mrsls	r0, (UNDEF: 2)
     fe4:	43000074 	movwmi	r0, #116	; 0x74
     fe8:	04000005 	streq	r0, [r0], #-5
     fec:	00058100 	andeq	r8, r5, r0, lsl #2
     ff0:	51010400 	tstpl	r1, r0, lsl #8
     ff4:	0c000000 	stceq	0, cr0, [r0], {-0}
     ff8:	0000095e 	andeq	r0, r0, lr, asr r9
     ffc:	000001df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    1000:	20000a1c 	andcs	r0, r0, ip, lsl sl
    1004:	000001c4 	andeq	r0, r0, r4, asr #3
    1008:	0000087b 	andeq	r0, r0, fp, ror r8
    100c:	1a060102 	bne	18141c <startup-0x1fe7ebe4>
    1010:	03000001 	movweq	r0, #1
    1014:	0000000a 	andeq	r0, r0, sl
    1018:	00372b02 	eorseq	r2, r7, r2, lsl #22
    101c:	01020000 	mrseq	r0, (UNDEF: 2)
    1020:	00011808 	andeq	r1, r1, r8, lsl #16
    1024:	05020200 	streq	r0, [r2, #-512]	; 0xfffffe00
    1028:	0000003c 	andeq	r0, r0, ip, lsr r0
    102c:	81070202 	tsthi	r7, r2, lsl #4
    1030:	03000002 	movweq	r0, #2
    1034:	0000002b 	andeq	r0, r0, fp, lsr #32
    1038:	00574d02 	subseq	r4, r7, r2, lsl #26
    103c:	04020000 	streq	r0, [r2], #-0
    1040:	00022d05 	andeq	r2, r2, r5, lsl #26
    1044:	01630300 	cmneq	r3, r0, lsl #6
    1048:	4f020000 	svcmi	0x00020000
    104c:	00000069 	andeq	r0, r0, r9, rrx
    1050:	06070402 	streq	r0, [r7], -r2, lsl #8
    1054:	02000001 	andeq	r0, r0, #1
    1058:	02280508 	eoreq	r0, r8, #8, 10	; 0x2000000
    105c:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    1060:	00010107 	andeq	r0, r1, r7, lsl #2
    1064:	05040400 	streq	r0, [r4, #-1024]	; 0xfffffc00
    1068:	00746e69 	rsbseq	r6, r4, r9, ror #28
    106c:	0b070402 	bleq	1c207c <startup-0x1fe3df84>
    1070:	03000001 	movweq	r0, #1
    1074:	0000000c 	andeq	r0, r0, ip
    1078:	002c1803 	eoreq	r1, ip, r3, lsl #16
    107c:	8c050000 	stchi	0, cr0, [r5], {-0}
    1080:	03000000 	movweq	r0, #0
    1084:	0000002d 	andeq	r0, r0, sp, lsr #32
    1088:	004c2c03 	subeq	r2, ip, r3, lsl #24
    108c:	9c050000 	stcls	0, cr0, [r5], {-0}
    1090:	03000000 	movweq	r0, #0
    1094:	00000165 	andeq	r0, r0, r5, ror #2
    1098:	005e3003 	subseq	r3, lr, r3
    109c:	ac050000 	stcge	0, cr0, [r5], {-0}
    10a0:	06000000 	streq	r0, [r0], -r0
    10a4:	000000b7 	strheq	r0, [r0], -r7
    10a8:	040e0407 	streq	r0, [lr], #-1031	; 0xfffffbf9
    10ac:	017d01a0 	cmneq	sp, r0, lsr #3
    10b0:	d9080000 	stmdble	r8, {}	; <UNPREDICTABLE>
    10b4:	04000007 	streq	r0, [r0], #-7
    10b8:	018d01a2 	orreq	r0, sp, r2, lsr #3
    10bc:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    10c0:	000008de 	ldrdeq	r0, [r0], -lr
    10c4:	9201a304 	andls	sl, r1, #4, 6	; 0x10000000
    10c8:	20000001 	andcs	r0, r0, r1
    10cc:	00084408 	andeq	r4, r8, r8, lsl #8
    10d0:	01a40400 			; <UNDEFINED> instruction: 0x01a40400
    10d4:	0000018d 	andeq	r0, r0, sp, lsl #3
    10d8:	07fa0880 	ldrbeq	r0, [sl, r0, lsl #17]!
    10dc:	a5040000 	strge	r0, [r4, #-0]
    10e0:	00019201 	andeq	r9, r1, r1, lsl #4
    10e4:	9f09a000 	svcls	0x0009a000
    10e8:	04000008 	streq	r0, [r0], #-8
    10ec:	018d01a6 	orreq	r0, sp, r6, lsr #3
    10f0:	01000000 	mrseq	r0, (UNDEF: 0)
    10f4:	0008e809 	andeq	lr, r8, r9, lsl #16
    10f8:	01a70400 			; <UNDEFINED> instruction: 0x01a70400
    10fc:	00000192 	muleq	r0, r2, r1
    1100:	33090120 	movwcc	r0, #37152	; 0x9120
    1104:	04000008 	streq	r0, [r0], #-8
    1108:	018d01a8 	orreq	r0, sp, r8, lsr #3
    110c:	01800000 	orreq	r0, r0, r0
    1110:	0008f209 	andeq	pc, r8, r9, lsl #4
    1114:	01a90400 			; <UNDEFINED> instruction: 0x01a90400
    1118:	00000192 	muleq	r0, r2, r1
    111c:	5e0901a0 	adfpl<illegal precision>p	f0, f1, f0
    1120:	04000007 	streq	r0, [r0], #-7
    1124:	018d01aa 	orreq	r0, sp, sl, lsr #3
    1128:	02000000 	andeq	r0, r0, #0
    112c:	0008fc09 	andeq	pc, r8, r9, lsl #24
    1130:	01ab0400 			; <UNDEFINED> instruction: 0x01ab0400
    1134:	000001a2 	andeq	r0, r0, r2, lsr #3
    1138:	490a0220 	stmdbmi	sl, {r5, r9}
    113c:	ac040050 	stcge	0, cr0, [r4], {80}	; 0x50
    1140:	0001c201 	andeq	ip, r1, r1, lsl #4
    1144:	09030000 	stmdbeq	r3, {}	; <UNPREDICTABLE>
    1148:	00000906 	andeq	r0, r0, r6, lsl #18
    114c:	c701ad04 	strgt	sl, [r1, -r4, lsl #26]
    1150:	f0000001 			; <UNDEFINED> instruction: 0xf0000001
    1154:	07f00903 	ldrbeq	r0, [r0, r3, lsl #18]!
    1158:	ae040000 	cdpge	0, 0, cr0, cr4, cr0, {0}
    115c:	0000b701 	andeq	fp, r0, r1, lsl #14
    1160:	000e0000 	andeq	r0, lr, r0
    1164:	0000b70b 	andeq	fp, r0, fp, lsl #14
    1168:	00018d00 	andeq	r8, r1, r0, lsl #26
    116c:	00850c00 	addeq	r0, r5, r0, lsl #24
    1170:	00070000 	andeq	r0, r7, r0
    1174:	00017d05 	andeq	r7, r1, r5, lsl #26
    1178:	00ac0b00 	adceq	r0, ip, r0, lsl #22
    117c:	01a20000 			; <UNDEFINED> instruction: 0x01a20000
    1180:	850c0000 	strhi	r0, [ip, #-0]
    1184:	17000000 	strne	r0, [r0, -r0]
    1188:	00ac0b00 	adceq	r0, ip, r0, lsl #22
    118c:	01b20000 			; <UNDEFINED> instruction: 0x01b20000
    1190:	850c0000 	strhi	r0, [ip, #-0]
    1194:	37000000 	strcc	r0, [r0, -r0]
    1198:	00970b00 	addseq	r0, r7, r0, lsl #22
    119c:	01c20000 	biceq	r0, r2, r0
    11a0:	850c0000 	strhi	r0, [ip, #-0]
    11a4:	ef000000 	svc	0x00000000
    11a8:	01b20500 			; <UNDEFINED> instruction: 0x01b20500
    11ac:	ac0b0000 	stcge	0, cr0, [fp], {-0}
    11b0:	d8000000 	stmdale	r0, {}	; <UNPREDICTABLE>
    11b4:	0d000001 	stceq	0, cr0, [r0, #-4]
    11b8:	00000085 	andeq	r0, r0, r5, lsl #1
    11bc:	0e000283 	cdpeq	2, 0, cr0, cr0, cr3, {4}
    11c0:	00000910 	andeq	r0, r0, r0, lsl r9
    11c4:	c101af04 	tstgt	r1, r4, lsl #30
    11c8:	0f000000 	svceq	0x00000000
    11cc:	01c0048c 	biceq	r0, r0, ip, lsl #9
    11d0:	000002ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    11d4:	0007d308 	andeq	sp, r7, r8, lsl #6
    11d8:	01c20400 	biceq	r0, r2, r0, lsl #8
    11dc:	000000bc 	strheq	r0, [r0], -ip
    11e0:	07f50800 	ldrbeq	r0, [r5, r0, lsl #16]!
    11e4:	c3040000 	movwgt	r0, #16384	; 0x4000
    11e8:	0000b701 	andeq	fp, r0, r1, lsl #14
    11ec:	95080400 	strls	r0, [r8, #-1024]	; 0xfffffc00
    11f0:	04000008 	streq	r0, [r0], #-8
    11f4:	00b701c4 	adcseq	r0, r7, r4, asr #3
    11f8:	08080000 	stmdaeq	r8, {}	; <UNPREDICTABLE>
    11fc:	00000814 	andeq	r0, r0, r4, lsl r8
    1200:	b701c504 	strlt	ip, [r1, -r4, lsl #10]
    1204:	0c000000 	stceq	0, cr0, [r0], {-0}
    1208:	52435310 	subpl	r5, r3, #16, 6	; 0x40000000
    120c:	01c60400 	biceq	r0, r6, r0, lsl #8
    1210:	000000b7 	strheq	r0, [r0], -r7
    1214:	43431010 	movtmi	r1, #12304	; 0x3010
    1218:	c7040052 	smlsdgt	r4, r2, r0, r0
    121c:	0000b701 	andeq	fp, r0, r1, lsl #14
    1220:	53101400 	tstpl	r0, #0, 8
    1224:	04005048 	streq	r5, [r0], #-72	; 0xffffffb8
    1228:	030f01c8 	movweq	r0, #61896	; 0xf1c8
    122c:	08180000 	ldmdaeq	r8, {}	; <UNPREDICTABLE>
    1230:	0000083e 	andeq	r0, r0, lr, lsr r8
    1234:	b701c904 	strlt	ip, [r1, -r4, lsl #18]
    1238:	24000000 	strcs	r0, [r0], #-0
    123c:	00080f08 	andeq	r0, r8, r8, lsl #30
    1240:	01ca0400 	biceq	r0, sl, r0, lsl #8
    1244:	000000b7 	strheq	r0, [r0], -r7
    1248:	08d40828 	ldmeq	r4, {r3, r5, fp}^
    124c:	cb040000 	blgt	101254 <startup-0x1fefedac>
    1250:	0000b701 	andeq	fp, r0, r1, lsl #14
    1254:	a4082c00 	strge	r2, [r8], #-3072	; 0xfffff400
    1258:	04000008 	streq	r0, [r0], #-8
    125c:	00b701cc 	adcseq	r0, r7, ip, asr #3
    1260:	08300000 	ldmdaeq	r0!, {}	; <UNPREDICTABLE>
    1264:	000007bc 			; <UNDEFINED> instruction: 0x000007bc
    1268:	b701cd04 	strlt	ip, [r1, -r4, lsl #26]
    126c:	34000000 	strcc	r0, [r0], #-0
    1270:	00080a08 	andeq	r0, r8, r8, lsl #20
    1274:	01ce0400 	biceq	r0, lr, r0, lsl #8
    1278:	000000b7 	strheq	r0, [r0], -r7
    127c:	09d20838 	ldmibeq	r2, {r3, r4, r5, fp}^
    1280:	cf040000 	svcgt	0x00040000
    1284:	0000b701 	andeq	fp, r0, r1, lsl #14
    1288:	50103c00 	andspl	r3, r0, r0, lsl #24
    128c:	04005246 	streq	r5, [r0], #-582	; 0xfffffdba
    1290:	032901d0 			; <UNDEFINED> instruction: 0x032901d0
    1294:	10400000 	subne	r0, r0, r0
    1298:	00524644 	subseq	r4, r2, r4, asr #12
    129c:	bc01d104 	stfltd	f5, [r1], {4}
    12a0:	48000000 	stmdami	r0, {}	; <UNPREDICTABLE>
    12a4:	52444110 	subpl	r4, r4, #16, 2
    12a8:	01d20400 	bicseq	r0, r2, r0, lsl #8
    12ac:	000000bc 	strheq	r0, [r0], -ip
    12b0:	08d9084c 	ldmeq	r9, {r2, r3, r6, fp}^
    12b4:	d3040000 	movwle	r0, #16384	; 0x4000
    12b8:	00034301 	andeq	r4, r3, r1, lsl #6
    12bc:	9a085000 	bls	2152c4 <startup-0x1fdead3c>
    12c0:	04000008 	streq	r0, [r0], #-8
    12c4:	035d01d4 	cmpeq	sp, #212, 2	; 0x35
    12c8:	08600000 	stmdaeq	r0!, {}^	; <UNPREDICTABLE>
    12cc:	000008de 	ldrdeq	r0, [r0], -lr
    12d0:	6201d504 	andvs	sp, r1, #4, 10	; 0x1000000
    12d4:	74000003 	strvc	r0, [r0], #-3
    12d8:	0009e408 	andeq	lr, r9, r8, lsl #8
    12dc:	01d60400 	bicseq	r0, r6, r0, lsl #8
    12e0:	000000b7 	strheq	r0, [r0], -r7
    12e4:	970b0088 	strls	r0, [fp, -r8, lsl #1]
    12e8:	0f000000 	svceq	0x00000000
    12ec:	0c000003 	stceq	0, cr0, [r0], {3}
    12f0:	00000085 	andeq	r0, r0, r5, lsl #1
    12f4:	ff05000b 			; <UNDEFINED> instruction: 0xff05000b
    12f8:	0b000002 	bleq	1308 <startup-0x1fffecf8>
    12fc:	000000bc 	strheq	r0, [r0], -ip
    1300:	00000324 	andeq	r0, r0, r4, lsr #6
    1304:	0000850c 	andeq	r8, r0, ip, lsl #10
    1308:	06000100 	streq	r0, [r0], -r0, lsl #2
    130c:	00000314 	andeq	r0, r0, r4, lsl r3
    1310:	00032405 	andeq	r2, r3, r5, lsl #8
    1314:	00bc0b00 	adcseq	r0, ip, r0, lsl #22
    1318:	033e0000 	teqeq	lr, #0
    131c:	850c0000 	strhi	r0, [ip, #-0]
    1320:	03000000 	movweq	r0, #0
    1324:	032e0600 			; <UNDEFINED> instruction: 0x032e0600
    1328:	3e050000 	cdpcc	0, 0, cr0, cr5, cr0, {0}
    132c:	0b000003 	bleq	1340 <startup-0x1fffecc0>
    1330:	000000bc 	strheq	r0, [r0], -ip
    1334:	00000358 	andeq	r0, r0, r8, asr r3
    1338:	0000850c 	andeq	r8, r0, ip, lsl #10
    133c:	06000400 	streq	r0, [r0], -r0, lsl #8
    1340:	00000348 	andeq	r0, r0, r8, asr #6
    1344:	00035805 	andeq	r5, r3, r5, lsl #16
    1348:	00ac0b00 	adceq	r0, ip, r0, lsl #22
    134c:	03720000 	cmneq	r2, #0
    1350:	850c0000 	strhi	r0, [ip, #-0]
    1354:	04000000 	streq	r0, [r0], #-0
    1358:	07de0e00 	ldrbeq	r0, [lr, r0, lsl #28]
    135c:	d7040000 	strle	r0, [r4, -r0]
    1360:	0001e401 	andeq	lr, r1, r1, lsl #8
    1364:	04100f00 	ldreq	r0, [r0], #-3840	; 0xfffff100
    1368:	03bc02bf 			; <UNDEFINED> instruction: 0x03bc02bf
    136c:	1a080000 	bne	201374 <startup-0x1fdfec8c>
    1370:	04000008 	streq	r0, [r0], #-8
    1374:	00b702c1 	adcseq	r0, r7, r1, asr #5
    1378:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    137c:	00000959 	andeq	r0, r0, r9, asr r9
    1380:	b702c204 	strlt	ip, [r2, -r4, lsl #4]
    1384:	04000000 	streq	r0, [r0], #-0
    1388:	4c415610 	mcrrmi	6, 1, r5, r1, cr0
    138c:	02c30400 	sbceq	r0, r3, #0, 8
    1390:	000000b7 	strheq	r0, [r0], -r7
    1394:	08380808 	ldmdaeq	r8!, {r3, fp}
    1398:	c4040000 	strgt	r0, [r4], #-0
    139c:	0000bc02 	andeq	fp, r0, r2, lsl #24
    13a0:	0e000c00 	cdpeq	12, 0, cr0, cr0, cr0, {0}
    13a4:	0000087c 	andeq	r0, r0, ip, ror r8
    13a8:	7e02c504 	cfsh32vc	mvfx12, mvfx2, #4
    13ac:	11000003 	tstne	r0, r3
    13b0:	0000014a 	andeq	r0, r0, sl, asr #2
    13b4:	a706fa04 	strge	pc, [r6, -r4, lsl #20]
    13b8:	12000000 	andne	r0, r0, #0
    13bc:	00000241 	andeq	r0, r0, r1, asr #4
    13c0:	00ac3b05 	adceq	r3, ip, r5, lsl #22
    13c4:	07130000 	ldreq	r0, [r3, -r0]
    13c8:	00003701 	andeq	r3, r0, r1, lsl #14
    13cc:	035f0600 	cmpeq	pc, #0, 12
    13d0:	000003fa 	strdeq	r0, [r0], -sl
    13d4:	00014214 	andeq	r4, r1, r4, lsl r2
    13d8:	fa140000 	blx	5013e0 <startup-0x1fafec20>
    13dc:	01000000 	mrseq	r0, (UNDEF: 0)
    13e0:	093c0e00 	ldmdbeq	ip!, {r9, sl, fp}
    13e4:	5f060000 	svcpl	0x00060000
    13e8:	0003df03 	andeq	sp, r3, r3, lsl #30
    13ec:	07041500 	streq	r1, [r4, -r0, lsl #10]
    13f0:	00043f36 	andeq	r3, r4, r6, lsr pc
    13f4:	08a91600 	stmiaeq	r9!, {r9, sl, ip}
    13f8:	38070000 	stmdacc	r7, {}	; <UNPREDICTABLE>
    13fc:	0000008c 	andeq	r0, r0, ip, lsl #1
    1400:	091a1600 	ldmdbeq	sl, {r9, sl, ip}
    1404:	3d070000 	stccc	0, cr0, [r7, #-0]
    1408:	0000008c 	andeq	r0, r0, ip, lsl #1
    140c:	08b91601 	ldmeq	r9!, {r0, r9, sl, ip}
    1410:	42070000 	andmi	r0, r7, #0
    1414:	0000008c 	andeq	r0, r0, ip, lsl #1
    1418:	07741602 	ldrbeq	r1, [r4, -r2, lsl #12]!
    141c:	47070000 	strmi	r0, [r7, -r0]
    1420:	000003fa 	strdeq	r0, [r0], -sl
    1424:	63030003 	movwvs	r0, #12291	; 0x3003
    1428:	07000007 	streq	r0, [r0, -r7]
    142c:	0004064a 	andeq	r0, r4, sl, asr #12
    1430:	08641700 	stmdaeq	r4!, {r8, r9, sl, ip}^
    1434:	df010000 	svcle	0x00010000
    1438:	20000bac 	andcs	r0, r0, ip, lsr #23
    143c:	00000034 	andeq	r0, r0, r4, lsr r0
    1440:	046e9c01 	strbteq	r9, [lr], #-3073	; 0xfffff3ff
    1444:	87180000 	ldrhi	r0, [r8, -r0]
    1448:	01000007 	tsteq	r0, r7
    144c:	0000acdf 	ldrdeq	sl, [r0], -pc	; <UNPREDICTABLE>
    1450:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    1454:	08501700 	ldmdaeq	r0, {r8, r9, sl, ip}^
    1458:	c7010000 	strgt	r0, [r1, -r0]
    145c:	20000b64 	andcs	r0, r0, r4, ror #22
    1460:	00000048 	andeq	r0, r0, r8, asr #32
    1464:	04a09c01 	strteq	r9, [r0], #3073	; 0xc01
    1468:	d7180000 	ldrle	r0, [r8, -r0]
    146c:	01000009 	tsteq	r0, r9
    1470:	00008cc7 	andeq	r8, r0, r7, asr #25
    1474:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    1478:	0007e718 	andeq	lr, r7, r8, lsl r7
    147c:	fac70100 	blx	ff1c1884 <dissarmedBit+0xdf1bd944>
    1480:	02000003 	andeq	r0, r0, #3
    1484:	17007691 			; <UNDEFINED> instruction: 0x17007691
    1488:	0000081f 	andeq	r0, r0, pc, lsl r8
    148c:	0b38b401 	bleq	e2e498 <startup-0x1f1d1b68>
    1490:	002c2000 	eoreq	r2, ip, r0
    1494:	9c010000 	stcls	0, cr0, [r1], {-0}
    1498:	000004d2 	ldrdeq	r0, [r0], -r2
    149c:	00094c18 	andeq	r4, r9, r8, lsl ip
    14a0:	acb40100 	ldfges	f0, [r4]
    14a4:	02000000 	andeq	r0, r0, #0
    14a8:	03187491 	tsteq	r8, #-1862270976	; 0x91000000
    14ac:	01000008 	tsteq	r0, r8
    14b0:	0000acb4 			; <UNDEFINED> instruction: 0x0000acb4
    14b4:	70910200 	addsvc	r0, r1, r0, lsl #4
    14b8:	07c21700 	strbeq	r1, [r2, r0, lsl #14]
    14bc:	88010000 	stmdahi	r1, {}	; <UNPREDICTABLE>
    14c0:	20000a40 	andcs	r0, r0, r0, asr #20
    14c4:	000000f8 	strdeq	r0, [r0], -r8
    14c8:	05209c01 	streq	r9, [r0, #-3073]!	; 0xfffff3ff
    14cc:	99180000 	ldmdbls	r8, {}	; <UNPREDICTABLE>
    14d0:	01000007 	tsteq	r0, r7
    14d4:	00052088 	andeq	r2, r5, r8, lsl #1
    14d8:	64910200 	ldrvs	r0, [r1], #512	; 0x200
    14dc:	00088919 	andeq	r8, r8, r9, lsl r9
    14e0:	8c8a0100 	stfhis	f0, [sl], {0}
    14e4:	02000000 	andeq	r0, r0, #0
    14e8:	cc196f91 	ldcgt	15, cr6, [r9], {145}	; 0x91
    14ec:	01000007 	tsteq	r0, r7
    14f0:	00008c8a 	andeq	r8, r0, sl, lsl #25
    14f4:	6e910200 	cdpvs	2, 9, cr0, cr1, cr0, {0}
    14f8:	00084919 	andeq	r4, r8, r9, lsl r9
    14fc:	8c8a0100 	stfhis	f0, [sl], {0}
    1500:	02000000 	andeq	r0, r0, #0
    1504:	1a006d91 	bne	1cb50 <startup-0x1ffe34b0>
    1508:	00043f04 	andeq	r3, r4, r4, lsl #30
    150c:	09ea1b00 	stmibeq	sl!, {r8, r9, fp, ip}^
    1510:	76010000 	strvc	r0, [r1], -r0
    1514:	20000a1c 	andcs	r0, r0, ip, lsl sl
    1518:	00000024 	andeq	r0, r0, r4, lsr #32
    151c:	a9189c01 	ldmdbge	r8, {r0, sl, fp, ip, pc}
    1520:	01000007 	tsteq	r0, r7
    1524:	0000ac76 	andeq	sl, r0, r6, ror ip
    1528:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    152c:	09a70000 	stmibeq	r7!, {}	; <UNPREDICTABLE>
    1530:	00040000 	andeq	r0, r4, r0
    1534:	000006f5 	strdeq	r0, [r0], -r5
    1538:	00510104 	subseq	r0, r1, r4, lsl #2
    153c:	e10c0000 	mrs	r0, (UNDEF: 12)
    1540:	df00000c 	svcle	0x0000000c
    1544:	00000001 	andeq	r0, r0, r1
    1548:	00000000 	andeq	r0, r0, r0
    154c:	79000000 	stmdbvc	r0, {}	; <UNPREDICTABLE>
    1550:	0200000a 	andeq	r0, r0, #10
    1554:	00000d3c 	andeq	r0, r0, ip, lsr sp
    1558:	02530105 	subseq	r0, r3, #1073741825	; 0x40000001
    155c:	c8030000 	stmdagt	r3, {}	; <UNPREDICTABLE>
    1560:	00000253 	andeq	r0, r0, r3, asr r2
    1564:	000ed803 	andeq	sp, lr, r3, lsl #16
    1568:	ea037200 	b	ddd70 <startup-0x1ff22290>
    156c:	7400000b 	strvc	r0, [r0], #-11
    1570:	000b9103 	andeq	r9, fp, r3, lsl #2
    1574:	b0037500 	andlt	r7, r3, r0, lsl #10
    1578:	7600000c 	strvc	r0, [r0], -ip
    157c:	000c1a03 	andeq	r1, ip, r3, lsl #20
    1580:	0b037b00 	bleq	e0188 <startup-0x1ff1fe78>
    1584:	7c00000f 	stcvc	0, cr0, [r0], {15}
    1588:	000b7203 	andeq	r7, fp, r3, lsl #4
    158c:	a3037e00 	movwge	r7, #15872	; 0x3e00
    1590:	7f00000c 	svcvc	0x0000000c
    1594:	000a9604 	andeq	r9, sl, r4, lsl #12
    1598:	11040000 	mrsne	r0, (UNDEF: 4)
    159c:	0100000a 	tsteq	r0, sl
    15a0:	000efb04 	andeq	pc, lr, r4, lsl #22
    15a4:	88040200 	stmdahi	r4, {r9}
    15a8:	0300000a 	movweq	r0, #10
    15ac:	000e4d04 	andeq	r4, lr, r4, lsl #26
    15b0:	c0040400 	andgt	r0, r4, r0, lsl #8
    15b4:	0500000f 	streq	r0, [r0, #-15]
    15b8:	000f4504 	andeq	r4, pc, r4, lsl #10
    15bc:	e4040600 	str	r0, [r4], #-1536	; 0xfffffa00
    15c0:	0700000f 	streq	r0, [r0, -pc]
    15c4:	000e4204 	andeq	r4, lr, r4, lsl #4
    15c8:	81040800 	tsthi	r4, r0, lsl #16
    15cc:	0900000d 	stmdbeq	r0, {r0, r2, r3}
    15d0:	000e0604 	andeq	r0, lr, r4, lsl #12
    15d4:	ef040a00 	svc	0x00040a00
    15d8:	0b00000f 	bleq	161c <startup-0x1fffe9e4>
    15dc:	000c5e04 	andeq	r5, ip, r4, lsl #28
    15e0:	96040c00 	strls	r0, [r4], -r0, lsl #24
    15e4:	0d00000d 	stceq	0, cr0, [r0, #-52]	; 0xffffffcc
    15e8:	000bc604 	andeq	ip, fp, r4, lsl #12
    15ec:	59040e00 	stmdbpl	r4, {r9, sl, fp}
    15f0:	0f00000d 	svceq	0x0000000d
    15f4:	000b0e04 	andeq	r0, fp, r4, lsl #28
    15f8:	d8041000 	stmdale	r4, {ip}
    15fc:	1100000b 	tstne	r0, fp
    1600:	000f7004 	andeq	r7, pc, r4
    1604:	38041200 	stmdacc	r4, {r9, ip}
    1608:	1300000c 	movwne	r0, #12
    160c:	000a0304 	andeq	r0, sl, r4, lsl #6
    1610:	28041400 	stmdacs	r4, {sl, ip}
    1614:	1500000a 	strne	r0, [r0, #-10]
    1618:	000fa404 	andeq	sl, pc, r4, lsl #8
    161c:	20041600 	andcs	r1, r4, r0, lsl #12
    1620:	1700000b 	strne	r0, [r0, -fp]
    1624:	000df304 	andeq	pc, sp, r4, lsl #6
    1628:	2e041800 	cdpcs	8, 0, cr1, cr4, cr0, {0}
    162c:	1900000d 	stmdbne	r0, {r0, r2, r3}
    1630:	000e2a04 	andeq	r2, lr, r4, lsl #20
    1634:	0d041a00 	vstreq	s2, [r4, #-0]
    1638:	1b00000c 	blne	1670 <startup-0x1fffe990>
    163c:	000f3b04 	andeq	r3, pc, r4, lsl #22
    1640:	da041c00 	ble	108648 <startup-0x1fef79b8>
    1644:	1d00000f 	stcne	0, cr0, [r0, #-60]	; 0xffffffc4
    1648:	000a7e04 	andeq	r7, sl, r4, lsl #28
    164c:	43041e00 	movwmi	r1, #19968	; 0x4e00
    1650:	1f00000a 	svcne	0x0000000a
    1654:	000f6304 	andeq	r6, pc, r4, lsl #6
    1658:	f9042000 			; <UNDEFINED> instruction: 0xf9042000
    165c:	2100000a 	tstcs	r0, sl
    1660:	000a7104 	andeq	r7, sl, r4, lsl #2
    1664:	54042200 	strpl	r2, [r4], #-512	; 0xfffffe00
    1668:	2300000c 	movwcs	r0, #12
    166c:	000d8c04 	andeq	r8, sp, r4, lsl #24
    1670:	aa042400 	bge	10a678 <startup-0x1fef5988>
    1674:	2500000a 	strcs	r0, [r0, #-10]
    1678:	000e6204 	andeq	r6, lr, r4, lsl #4
    167c:	2f042600 	svccs	0x00042600
    1680:	2700000f 	strcs	r0, [r0, -pc]
    1684:	000c4504 	andeq	r4, ip, r4, lsl #10
    1688:	62042800 	andvs	r2, r4, #0, 16
    168c:	2900000a 	stmdbcs	r0, {r1, r3}
    1690:	000b6104 	andeq	r6, fp, r4, lsl #2
    1694:	8f042a00 	svchi	0x00042a00
    1698:	2b00000c 	blcs	16d0 <startup-0x1fffe930>
    169c:	000b7e04 	andeq	r7, fp, r4, lsl #28
    16a0:	c0042c00 	andgt	r2, r4, r0, lsl #24
    16a4:	2d00000c 	stccs	0, cr0, [r0, #-48]	; 0xffffffd0
    16a8:	000eae04 	andeq	sl, lr, r4, lsl #28
    16ac:	92042e00 	andls	r2, r4, #0, 28
    16b0:	2f00000e 	svccs	0x0000000e
    16b4:	000de904 	andeq	lr, sp, r4, lsl #18
    16b8:	a0043000 	andge	r3, r4, r0
    16bc:	3100000a 	tstcc	r0, sl
    16c0:	000d7704 	andeq	r7, sp, r4, lsl #14
    16c4:	cd043200 	sfmgt	f3, 4, [r4, #-0]
    16c8:	3300000d 	movwcc	r0, #13
    16cc:	000b5604 	andeq	r5, fp, r4, lsl #12
    16d0:	1f043400 	svcne	0x00043400
    16d4:	3500000e 	strcc	r0, [r0, #-14]
    16d8:	000b4804 	andeq	r4, fp, r4, lsl #16
    16dc:	bb043600 	bllt	10eee4 <startup-0x1fef111c>
    16e0:	3700000e 	strcc	r0, [r0, -lr]
    16e4:	000f1d04 	andeq	r1, pc, r4, lsl #26
    16e8:	79043800 	stmdbvc	r4, {fp, ip, sp}
    16ec:	3900000f 	stmdbcc	r0, {r0, r1, r2, r3}
    16f0:	000c2604 	andeq	r2, ip, r4, lsl #12
    16f4:	47043a00 	strmi	r3, [r4, -r0, lsl #20]
    16f8:	3b00000d 	blcc	1734 <startup-0x1fffe8cc>
    16fc:	000dd704 	andeq	sp, sp, r4, lsl #14
    1700:	d8043c00 	stmdale	r4, {sl, fp, ip, sp}
    1704:	3d00000c 	stccc	0, cr0, [r0, #-48]	; 0xffffffd0
    1708:	000b3a04 	andeq	r3, fp, r4, lsl #20
    170c:	a8043e00 	stmdage	r4, {r9, sl, fp, ip, sp}
    1710:	3f00000d 	svccc	0x0000000d
    1714:	000a1a04 	andeq	r1, sl, r4, lsl #20
    1718:	81044000 	mrshi	r4, (UNDEF: 4)
    171c:	4100000c 	tstmi	r0, ip
    1720:	000fb204 	andeq	fp, pc, r4, lsl #4
    1724:	b5044200 	strlt	r4, [r4, #-512]	; 0xfffffe00
    1728:	4300000d 	movwmi	r0, #13
    172c:	000a5004 	andeq	r5, sl, r4
    1730:	e7044400 	str	r4, [r4, -r0, lsl #8]
    1734:	4500000a 	strmi	r0, [r0, #-10]
    1738:	000baa04 	andeq	sl, fp, r4, lsl #20
    173c:	6b044600 	blvs	112f44 <startup-0x1feed0bc>
    1740:	4700000d 	strmi	r0, [r0, -sp]
    1744:	000c0004 	andeq	r0, ip, r4
    1748:	36044800 	strcc	r4, [r4], -r0, lsl #16
    174c:	4900000a 	stmdbmi	r0, {r1, r3}
    1750:	000e7e04 	andeq	r7, lr, r4, lsl #28
    1754:	c5044a00 	strgt	r4, [r4, #-2560]	; 0xfffff600
    1758:	4b00000e 	blmi	1798 <startup-0x1fffe868>
    175c:	000fc904 	andeq	ip, pc, r4, lsl #18
    1760:	c1044c00 	tstgt	r4, r0, lsl #24
    1764:	4d00000d 	stcmi	0, cr0, [r0, #-52]	; 0xffffffcc
    1768:	000bbc04 	andeq	fp, fp, r4, lsl #24
    176c:	a4044e00 	strge	r4, [r4], #-3584	; 0xfffff200
    1770:	4f00000e 	svcmi	0x0000000e
    1774:	000e1104 	andeq	r1, lr, r4, lsl #2
    1778:	5a045000 	bpl	115780 <startup-0x1feea880>
    177c:	5100000f 	tstpl	r0, pc
    1780:	06010500 	streq	r0, [r1], -r0, lsl #10
    1784:	0000011a 	andeq	r0, r0, sl, lsl r1
    1788:	000e5806 	andeq	r5, lr, r6, lsl #16
    178c:	032f0300 			; <UNDEFINED> instruction: 0x032f0300
    1790:	00000025 	andeq	r0, r0, r5, lsr #32
    1794:	00000a07 	andeq	r0, r0, r7, lsl #20
    1798:	712b0400 			; <UNDEFINED> instruction: 0x712b0400
    179c:	05000002 	streq	r0, [r0, #-2]
    17a0:	01180801 	tsteq	r8, r1, lsl #16
    17a4:	02050000 	andeq	r0, r5, #0
    17a8:	00003c05 	andeq	r3, r0, r5, lsl #24
    17ac:	02b80700 	adcseq	r0, r8, #0, 14
    17b0:	39040000 	stmdbcc	r4, {}	; <UNPREDICTABLE>
    17b4:	0000028a 	andeq	r0, r0, sl, lsl #5
    17b8:	81070205 	tsthi	r7, r5, lsl #4
    17bc:	07000002 	streq	r0, [r0, -r2]
    17c0:	0000002b 	andeq	r0, r0, fp, lsr #32
    17c4:	029c4d04 	addseq	r4, ip, #4, 26	; 0x100
    17c8:	04050000 	streq	r0, [r5], #-0
    17cc:	00022d05 	andeq	r2, r2, r5, lsl #26
    17d0:	01630700 	cmneq	r3, r0, lsl #14
    17d4:	4f040000 	svcmi	0x00040000
    17d8:	000002ae 	andeq	r0, r0, lr, lsr #5
    17dc:	06070405 	streq	r0, [r7], -r5, lsl #8
    17e0:	05000001 	streq	r0, [r0, #-1]
    17e4:	02280508 	eoreq	r0, r8, #8, 10	; 0x2000000
    17e8:	08050000 	stmdaeq	r5, {}	; <UNPREDICTABLE>
    17ec:	00010107 	andeq	r0, r1, r7, lsl #2
    17f0:	05040800 	streq	r0, [r4, #-2048]	; 0xfffff800
    17f4:	00746e69 	rsbseq	r6, r4, r9, ror #28
    17f8:	0b070405 	bleq	1c2814 <startup-0x1fe3d7ec>
    17fc:	07000001 	streq	r0, [r0, -r1]
    1800:	0000000c 	andeq	r0, r0, ip
    1804:	02661805 	rsbeq	r1, r6, #327680	; 0x50000
    1808:	d1090000 	mrsle	r0, (UNDEF: 9)
    180c:	07000002 	streq	r0, [r0, -r2]
    1810:	000002ba 			; <UNDEFINED> instruction: 0x000002ba
    1814:	027f2405 	rsbseq	r2, pc, #83886080	; 0x5000000
    1818:	e1090000 	mrs	r0, (UNDEF: 9)
    181c:	07000002 	streq	r0, [r0, -r2]
    1820:	0000002d 	andeq	r0, r0, sp, lsr #32
    1824:	02912c05 	addseq	r2, r1, #1280	; 0x500
    1828:	f1090000 			; <UNDEFINED> instruction: 0xf1090000
    182c:	07000002 	streq	r0, [r0, -r2]
    1830:	00000165 	andeq	r0, r0, r5, ror #2
    1834:	02a33005 	adceq	r3, r3, #5
    1838:	01090000 	mrseq	r0, (UNDEF: 9)
    183c:	0a000003 	beq	1850 <startup-0x1fffe7b0>
    1840:	0000030c 	andeq	r0, r0, ip, lsl #6
    1844:	010e040b 	tsteq	lr, fp, lsl #8
    1848:	03d201a0 	bicseq	r0, r2, #160, 2	; 0x28
    184c:	d90c0000 	stmdble	ip, {}	; <UNPREDICTABLE>
    1850:	01000007 	tsteq	r0, r7
    1854:	03e201a2 	mvneq	r0, #-2147483608	; 0x80000028
    1858:	0c000000 	stceq	0, cr0, [r0], {-0}
    185c:	000008de 	ldrdeq	r0, [r0], -lr
    1860:	e701a301 	str	sl, [r1, -r1, lsl #6]
    1864:	20000003 	andcs	r0, r0, r3
    1868:	0008440c 	andeq	r4, r8, ip, lsl #8
    186c:	01a40100 			; <UNDEFINED> instruction: 0x01a40100
    1870:	000003e2 	andeq	r0, r0, r2, ror #7
    1874:	07fa0c80 	ldrbeq	r0, [sl, r0, lsl #25]!
    1878:	a5010000 	strge	r0, [r1, #-0]
    187c:	0003e701 	andeq	lr, r3, r1, lsl #14
    1880:	9f0da000 	svcls	0x000da000
    1884:	01000008 	tsteq	r0, r8
    1888:	03e201a6 	mvneq	r0, #-2147483607	; 0x80000029
    188c:	01000000 	mrseq	r0, (UNDEF: 0)
    1890:	0008e80d 	andeq	lr, r8, sp, lsl #16
    1894:	01a70100 			; <UNDEFINED> instruction: 0x01a70100
    1898:	000003e7 	andeq	r0, r0, r7, ror #7
    189c:	330d0120 	movwcc	r0, #53536	; 0xd120
    18a0:	01000008 	tsteq	r0, r8
    18a4:	03e201a8 	mvneq	r0, #168, 2	; 0x2a
    18a8:	01800000 	orreq	r0, r0, r0
    18ac:	0008f20d 	andeq	pc, r8, sp, lsl #4
    18b0:	01a90100 			; <UNDEFINED> instruction: 0x01a90100
    18b4:	000003e7 	andeq	r0, r0, r7, ror #7
    18b8:	5e0d01a0 	adfpl<illegal precision>p	f0, f5, f0
    18bc:	01000007 	tsteq	r0, r7
    18c0:	03e201aa 	mvneq	r0, #-2147483606	; 0x8000002a
    18c4:	02000000 	andeq	r0, r0, #0
    18c8:	0008fc0d 	andeq	pc, r8, sp, lsl #24
    18cc:	01ab0100 			; <UNDEFINED> instruction: 0x01ab0100
    18d0:	000003f7 	strdeq	r0, [r0], -r7
    18d4:	490e0220 	stmdbmi	lr, {r5, r9}
    18d8:	ac010050 	stcge	0, cr0, [r1], {80}	; 0x50
    18dc:	00041701 	andeq	r1, r4, r1, lsl #14
    18e0:	0d030000 	stceq	0, cr0, [r3, #-0]
    18e4:	00000906 	andeq	r0, r0, r6, lsl #18
    18e8:	1c01ad01 	stcne	13, cr10, [r1], {1}
    18ec:	f0000004 			; <UNDEFINED> instruction: 0xf0000004
    18f0:	07f00d03 	ldrbeq	r0, [r0, r3, lsl #26]!
    18f4:	ae010000 	cdpge	0, 0, cr0, cr1, cr0, {0}
    18f8:	00030c01 	andeq	r0, r3, r1, lsl #24
    18fc:	000e0000 	andeq	r0, lr, r0
    1900:	00030c0f 	andeq	r0, r3, pc, lsl #24
    1904:	0003e200 	andeq	lr, r3, r0, lsl #4
    1908:	02ca1000 	sbceq	r1, sl, #0
    190c:	00070000 	andeq	r0, r7, r0
    1910:	0003d209 	andeq	sp, r3, r9, lsl #4
    1914:	03010f00 	movweq	r0, #7936	; 0x1f00
    1918:	03f70000 	mvnseq	r0, #0
    191c:	ca100000 	bgt	401924 <startup-0x1fbfe6dc>
    1920:	17000002 	strne	r0, [r0, -r2]
    1924:	03010f00 	movweq	r0, #7936	; 0x1f00
    1928:	04070000 	streq	r0, [r7], #-0
    192c:	ca100000 	bgt	401934 <startup-0x1fbfe6cc>
    1930:	37000002 	strcc	r0, [r0, -r2]
    1934:	02dc0f00 	sbcseq	r0, ip, #0, 30
    1938:	04170000 	ldreq	r0, [r7], #-0
    193c:	ca100000 	bgt	401944 <startup-0x1fbfe6bc>
    1940:	ef000002 	svc	0x00000002
    1944:	04070900 	streq	r0, [r7], #-2304	; 0xfffff700
    1948:	010f0000 	mrseq	r0, CPSR
    194c:	2d000003 	stccs	0, cr0, [r0, #-12]
    1950:	11000004 	tstne	r0, r4
    1954:	000002ca 	andeq	r0, r0, sl, asr #5
    1958:	06000283 	streq	r0, [r0], -r3, lsl #5
    195c:	00000910 	andeq	r0, r0, r0, lsl r9
    1960:	1601af01 	strne	sl, [r1], -r1, lsl #30
    1964:	12000003 	andne	r0, r0, #3
    1968:	01c0018c 	biceq	r0, r0, ip, lsl #3
    196c:	00000554 	andeq	r0, r0, r4, asr r5
    1970:	0007d30c 	andeq	sp, r7, ip, lsl #6
    1974:	01c20100 	biceq	r0, r2, r0, lsl #2
    1978:	00000311 	andeq	r0, r0, r1, lsl r3
    197c:	07f50c00 	ldrbeq	r0, [r5, r0, lsl #24]!
    1980:	c3010000 	movwgt	r0, #4096	; 0x1000
    1984:	00030c01 	andeq	r0, r3, r1, lsl #24
    1988:	950c0400 	strls	r0, [ip, #-1024]	; 0xfffffc00
    198c:	01000008 	tsteq	r0, r8
    1990:	030c01c4 	movweq	r0, #49604	; 0xc1c4
    1994:	0c080000 	stceq	0, cr0, [r8], {-0}
    1998:	00000814 	andeq	r0, r0, r4, lsl r8
    199c:	0c01c501 	cfstr32eq	mvfx12, [r1], {1}
    19a0:	0c000003 	stceq	0, cr0, [r0], {3}
    19a4:	52435313 	subpl	r5, r3, #1275068416	; 0x4c000000
    19a8:	01c60100 	biceq	r0, r6, r0, lsl #2
    19ac:	0000030c 	andeq	r0, r0, ip, lsl #6
    19b0:	43431310 	movtmi	r1, #13072	; 0x3310
    19b4:	c7010052 	smlsdgt	r1, r2, r0, r0
    19b8:	00030c01 	andeq	r0, r3, r1, lsl #24
    19bc:	53131400 	tstpl	r3, #0, 8
    19c0:	01005048 	tsteq	r0, r8, asr #32
    19c4:	056401c8 	strbeq	r0, [r4, #-456]!	; 0xfffffe38
    19c8:	0c180000 	ldceq	0, cr0, [r8], {-0}
    19cc:	0000083e 	andeq	r0, r0, lr, lsr r8
    19d0:	0c01c901 			; <UNDEFINED> instruction: 0x0c01c901
    19d4:	24000003 	strcs	r0, [r0], #-3
    19d8:	00080f0c 	andeq	r0, r8, ip, lsl #30
    19dc:	01ca0100 	biceq	r0, sl, r0, lsl #2
    19e0:	0000030c 	andeq	r0, r0, ip, lsl #6
    19e4:	08d40c28 	ldmeq	r4, {r3, r5, sl, fp}^
    19e8:	cb010000 	blgt	419f0 <startup-0x1ffbe610>
    19ec:	00030c01 	andeq	r0, r3, r1, lsl #24
    19f0:	a40c2c00 	strge	r2, [ip], #-3072	; 0xfffff400
    19f4:	01000008 	tsteq	r0, r8
    19f8:	030c01cc 	movweq	r0, #49612	; 0xc1cc
    19fc:	0c300000 	ldceq	0, cr0, [r0], #-0
    1a00:	000007bc 			; <UNDEFINED> instruction: 0x000007bc
    1a04:	0c01cd01 	stceq	13, cr12, [r1], {1}
    1a08:	34000003 	strcc	r0, [r0], #-3
    1a0c:	00080a0c 	andeq	r0, r8, ip, lsl #20
    1a10:	01ce0100 	biceq	r0, lr, r0, lsl #2
    1a14:	0000030c 	andeq	r0, r0, ip, lsl #6
    1a18:	09d20c38 	ldmibeq	r2, {r3, r4, r5, sl, fp}^
    1a1c:	cf010000 	svcgt	0x00010000
    1a20:	00030c01 	andeq	r0, r3, r1, lsl #24
    1a24:	50133c00 	andspl	r3, r3, r0, lsl #24
    1a28:	01005246 	tsteq	r0, r6, asr #4
    1a2c:	057e01d0 	ldrbeq	r0, [lr, #-464]!	; 0xfffffe30
    1a30:	13400000 	movtne	r0, #0
    1a34:	00524644 	subseq	r4, r2, r4, asr #12
    1a38:	1101d101 	tstne	r1, r1, lsl #2
    1a3c:	48000003 	stmdami	r0, {r0, r1}
    1a40:	52444113 	subpl	r4, r4, #-1073741820	; 0xc0000004
    1a44:	01d20100 	bicseq	r0, r2, r0, lsl #2
    1a48:	00000311 	andeq	r0, r0, r1, lsl r3
    1a4c:	08d90c4c 	ldmeq	r9, {r2, r3, r6, sl, fp}^
    1a50:	d3010000 	movwle	r0, #4096	; 0x1000
    1a54:	00059801 	andeq	r9, r5, r1, lsl #16
    1a58:	9a0c5000 	bls	315a60 <startup-0x1fcea5a0>
    1a5c:	01000008 	tsteq	r0, r8
    1a60:	05b201d4 	ldreq	r0, [r2, #468]!	; 0x1d4
    1a64:	0c600000 	stcleq	0, cr0, [r0], #-0
    1a68:	000008de 	ldrdeq	r0, [r0], -lr
    1a6c:	b701d501 	strlt	sp, [r1, -r1, lsl #10]
    1a70:	74000005 	strvc	r0, [r0], #-5
    1a74:	0009e40c 	andeq	lr, r9, ip, lsl #8
    1a78:	01d60100 	bicseq	r0, r6, r0, lsl #2
    1a7c:	0000030c 	andeq	r0, r0, ip, lsl #6
    1a80:	dc0f0088 	stcle	0, cr0, [pc], {136}	; 0x88
    1a84:	64000002 	strvs	r0, [r0], #-2
    1a88:	10000005 	andne	r0, r0, r5
    1a8c:	000002ca 	andeq	r0, r0, sl, asr #5
    1a90:	5409000b 	strpl	r0, [r9], #-11
    1a94:	0f000005 	svceq	0x00000005
    1a98:	00000311 	andeq	r0, r0, r1, lsl r3
    1a9c:	00000579 	andeq	r0, r0, r9, ror r5
    1aa0:	0002ca10 	andeq	ip, r2, r0, lsl sl
    1aa4:	0a000100 	beq	1eac <startup-0x1fffe154>
    1aa8:	00000569 	andeq	r0, r0, r9, ror #10
    1aac:	00057909 	andeq	r7, r5, r9, lsl #18
    1ab0:	03110f00 	tsteq	r1, #0, 30
    1ab4:	05930000 	ldreq	r0, [r3]
    1ab8:	ca100000 	bgt	401ac0 <startup-0x1fbfe540>
    1abc:	03000002 	movweq	r0, #2
    1ac0:	05830a00 	streq	r0, [r3, #2560]	; 0xa00
    1ac4:	93090000 	movwls	r0, #36864	; 0x9000
    1ac8:	0f000005 	svceq	0x00000005
    1acc:	00000311 	andeq	r0, r0, r1, lsl r3
    1ad0:	000005ad 	andeq	r0, r0, sp, lsr #11
    1ad4:	0002ca10 	andeq	ip, r2, r0, lsl sl
    1ad8:	0a000400 	beq	2ae0 <startup-0x1fffd520>
    1adc:	0000059d 	muleq	r0, sp, r5
    1ae0:	0005ad09 	andeq	sl, r5, r9, lsl #26
    1ae4:	03010f00 	movweq	r0, #7936	; 0x1f00
    1ae8:	05c70000 	strbeq	r0, [r7]
    1aec:	ca100000 	bgt	401af4 <startup-0x1fbfe50c>
    1af0:	04000002 	streq	r0, [r0], #-2
    1af4:	07de0600 	ldrbeq	r0, [lr, r0, lsl #12]
    1af8:	d7010000 	strle	r0, [r1, -r0]
    1afc:	00043901 	andeq	r3, r4, r1, lsl #18
    1b00:	01101200 	tsteq	r0, r0, lsl #4
    1b04:	061102bf 			; <UNDEFINED> instruction: 0x061102bf
    1b08:	1a0c0000 	bne	301b10 <startup-0x1fcfe4f0>
    1b0c:	01000008 	tsteq	r0, r8
    1b10:	030c02c1 	movweq	r0, #49857	; 0xc2c1
    1b14:	0c000000 	stceq	0, cr0, [r0], {-0}
    1b18:	00000959 	andeq	r0, r0, r9, asr r9
    1b1c:	0c02c201 	sfmeq	f4, 1, [r2], {1}
    1b20:	04000003 	streq	r0, [r0], #-3
    1b24:	4c415613 	mcrrmi	6, 1, r5, r1, cr3
    1b28:	02c30100 	sbceq	r0, r3, #0, 2
    1b2c:	0000030c 	andeq	r0, r0, ip, lsl #6
    1b30:	08380c08 	ldmdaeq	r8!, {r3, sl, fp}
    1b34:	c4010000 	strgt	r0, [r1], #-0
    1b38:	00031102 	andeq	r1, r3, r2, lsl #2
    1b3c:	06000c00 	streq	r0, [r0], -r0, lsl #24
    1b40:	0000087c 	andeq	r0, r0, ip, ror r8
    1b44:	d302c501 	movwle	ip, #9473	; 0x2501
    1b48:	14000005 	strne	r0, [r0], #-5
    1b4c:	0000014a 	andeq	r0, r0, sl, asr #2
    1b50:	fc06fa01 	stc2	10, cr15, [r6], {1}	; <UNPREDICTABLE>
    1b54:	15000002 	strne	r0, [r0, #-2]
    1b58:	00000241 	andeq	r0, r0, r1, asr #4
    1b5c:	03013b06 	movweq	r3, #6918	; 0x1b06
    1b60:	28120000 	ldmdacs	r2, {}	; <UNPREDICTABLE>
    1b64:	c005c303 	andgt	ip, r5, r3, lsl #6
    1b68:	0c000006 	stceq	0, cr0, [r0], {6}
    1b6c:	00000488 	andeq	r0, r0, r8, lsl #9
    1b70:	0c05c503 	cfstr32eq	mvfx12, [r5], {3}
    1b74:	00000003 	andeq	r0, r0, r3
    1b78:	0004980c 	andeq	r9, r4, ip, lsl #16
    1b7c:	05c60300 	strbeq	r0, [r6, #768]	; 0x300
    1b80:	0000030c 	andeq	r0, r0, ip, lsl #6
    1b84:	05210c04 	streq	r0, [r1, #-3076]!	; 0xfffff3fc
    1b88:	c7030000 	strgt	r0, [r3, -r0]
    1b8c:	00030c05 	andeq	r0, r3, r5, lsl #24
    1b90:	360c0800 	strcc	r0, [ip], -r0, lsl #16
    1b94:	03000005 	movweq	r0, #5
    1b98:	030c05c8 	movweq	r0, #50632	; 0xc5c8
    1b9c:	130c0000 	movwne	r0, #49152	; 0xc000
    1ba0:	00524449 	subseq	r4, r2, r9, asr #8
    1ba4:	0c05c903 			; <UNDEFINED> instruction: 0x0c05c903
    1ba8:	10000003 	andne	r0, r0, r3
    1bac:	52444f13 	subpl	r4, r4, #19, 30	; 0x4c
    1bb0:	05ca0300 	strbeq	r0, [sl, #768]	; 0x300
    1bb4:	0000030c 	andeq	r0, r0, ip, lsl #6
    1bb8:	05e50c14 	strbeq	r0, [r5, #3092]!	; 0xc14
    1bbc:	cb030000 	blgt	c1bc4 <startup-0x1ff3e43c>
    1bc0:	0002ec05 	andeq	lr, r2, r5, lsl #24
    1bc4:	bc0c1800 	stclt	8, cr1, [ip], {-0}
    1bc8:	03000004 	movweq	r0, #4
    1bcc:	02ec05cc 	rsceq	r0, ip, #204, 10	; 0x33000000
    1bd0:	0c1a0000 	ldceq	0, cr0, [sl], {-0}
    1bd4:	0000043d 	andeq	r0, r0, sp, lsr r4
    1bd8:	0c05cd03 	stceq	13, cr12, [r5], {3}
    1bdc:	1c000003 	stcne	0, cr0, [r0], {3}
    1be0:	52464113 	subpl	r4, r6, #-1073741820	; 0xc0000004
    1be4:	05ce0300 	strbeq	r0, [lr, #768]	; 0x300
    1be8:	000006d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    1bec:	0c0f0020 	stceq	0, cr0, [pc], {32}
    1bf0:	d0000003 	andle	r0, r0, r3
    1bf4:	10000006 	andne	r0, r0, r6
    1bf8:	000002ca 	andeq	r0, r0, sl, asr #5
    1bfc:	c0090001 	andgt	r0, r9, r1
    1c00:	06000006 	streq	r0, [r0], -r6
    1c04:	00000529 	andeq	r0, r0, r9, lsr #10
    1c08:	3405cf03 	strcc	ip, [r5], #-3843	; 0xfffff0fd
    1c0c:	16000006 	strne	r0, [r0], -r6
    1c10:	0000063c 	andeq	r0, r0, ip, lsr r6
    1c14:	59040720 	stmdbpl	r4, {r5, r8, r9, sl}
    1c18:	17000007 	strne	r0, [r0, -r7]
    1c1c:	07006469 	streq	r6, [r0, -r9, ror #8]
    1c20:	00075906 	andeq	r5, r7, r6, lsl #18
    1c24:	26180000 	ldrcs	r0, [r8], -r0
    1c28:	07000006 	streq	r0, [r0, -r6]
    1c2c:	0002c307 	andeq	ip, r2, r7, lsl #6
    1c30:	32180400 	andscc	r0, r8, #0, 8
    1c34:	07000006 	streq	r0, [r0, -r6]
    1c38:	00075908 	andeq	r5, r7, r8, lsl #18
    1c3c:	e8180800 	ldmda	r8, {fp}
    1c40:	07000006 	streq	r0, [r0, -r6]
    1c44:	00075909 	andeq	r5, r7, r9, lsl #18
    1c48:	55180900 	ldrpl	r0, [r8, #-2304]	; 0xfffff700
    1c4c:	07000007 	streq	r0, [r0, -r7]
    1c50:	0002c30a 	andeq	ip, r2, sl, lsl #6
    1c54:	23180c00 	tstcs	r8, #0, 24
    1c58:	07000007 	streq	r0, [r0, -r7]
    1c5c:	0002c30b 	andeq	ip, r2, fp, lsl #6
    1c60:	1c181000 	ldcne	0, cr1, [r8], {-0}
    1c64:	07000006 	streq	r0, [r0, -r6]
    1c68:	0002c30c 	andeq	ip, r2, ip, lsl #6
    1c6c:	13181400 	tstne	r8, #0, 8
    1c70:	07000006 	streq	r0, [r0, -r6]
    1c74:	0002c30d 	andeq	ip, r2, sp, lsl #6
    1c78:	7a181800 	bvc	607c80 <startup-0x1f9f8380>
    1c7c:	07000006 	streq	r0, [r0, -r6]
    1c80:	0007600e 	andeq	r6, r7, lr
    1c84:	05001c00 	streq	r1, [r0, #-3072]	; 0xfffff400
    1c88:	01210801 			; <UNDEFINED> instruction: 0x01210801
    1c8c:	04190000 	ldreq	r0, [r9], #-0
    1c90:	000006d5 	ldrdeq	r0, [r0], -r5
    1c94:	00063d07 	andeq	r3, r6, r7, lsl #26
    1c98:	e10f0700 	tst	pc, r0, lsl #14
    1c9c:	1a000006 	bne	1cbc <startup-0x1fffe344>
    1ca0:	00000178 	andeq	r0, r0, r8, ror r1
    1ca4:	030c1107 	movweq	r1, #49415	; 0xc107
    1ca8:	03050000 	movweq	r0, #20480	; 0x5000
    1cac:	20003e04 	andcs	r3, r0, r4, lsl #28
    1cb0:	0064691b 	rsbeq	r6, r4, fp, lsl r9
    1cb4:	03011207 	movweq	r1, #4615	; 0x1207
    1cb8:	03050000 	movweq	r0, #20480	; 0x5000
    1cbc:	20003e08 	andcs	r3, r0, r8, lsl #28
    1cc0:	0002611a 	andeq	r6, r2, sl, lsl r1
    1cc4:	59130700 	ldmdbpl	r3, {r8, r9, sl}
    1cc8:	05000007 	streq	r0, [r0, #-7]
    1ccc:	003ef403 	eorseq	pc, lr, r3, lsl #8
    1cd0:	02e10f20 	rsceq	r0, r1, #32, 30	; 0x80
    1cd4:	07b30000 	ldreq	r0, [r3, r0]!
    1cd8:	ca100000 	bgt	401ce0 <startup-0x1fbfe320>
    1cdc:	0f000002 	svceq	0x00000002
    1ce0:	0f501a00 	svceq	0x00501a00
    1ce4:	18020000 	stmdane	r2, {}	; <UNPREDICTABLE>
    1ce8:	000007a3 	andeq	r0, r0, r3, lsr #15
    1cec:	3ef80305 	cdpcc	3, 15, cr0, cr8, cr5, {0}
    1cf0:	600f2000 	andvs	r2, pc, r0
    1cf4:	d4000007 	strle	r0, [r0], #-7
    1cf8:	10000007 	andne	r0, r0, r7
    1cfc:	000002ca 	andeq	r0, r0, sl, asr #5
    1d00:	a41a0003 	ldrge	r0, [sl], #-3
    1d04:	02000004 	andeq	r0, r0, #4
    1d08:	0007c41d 	andeq	ip, r7, sp, lsl r4
    1d0c:	18030500 	stmdane	r3, {r8, sl}
    1d10:	1c20003f 	stcne	0, cr0, [r0], #-252	; 0xffffff04
    1d14:	00000f8b 	andeq	r0, r0, fp, lsl #31
    1d18:	0dec5402 	cfstrdeq	mvd5, [ip, #8]!
    1d1c:	01082000 	mrseq	r2, (UNDEF: 8)
    1d20:	9c010000 	stcls	0, cr0, [r1], {-0}
    1d24:	0000082e 	andeq	r0, r0, lr, lsr #16
    1d28:	000f901d 	andeq	r9, pc, sp, lsl r0	; <UNPREDICTABLE>
    1d2c:	c35c0200 	cmpgt	ip, #0, 4
    1d30:	02000002 	andeq	r0, r0, #2
    1d34:	c31d5891 	tstgt	sp, #9502720	; 0x910000
    1d38:	0200000a 	andeq	r0, r0, #10
    1d3c:	00082e5e 	andeq	r2, r8, lr, asr lr
    1d40:	5c910300 	ldcpl	3, cr0, [r1], {0}
    1d44:	0eac1e06 	cdpeq	14, 10, cr1, cr12, cr6, {0}
    1d48:	00422000 	subeq	r2, r2, r0
    1d4c:	691f0000 	ldmdbvs	pc, {}	; <UNPREDICTABLE>
    1d50:	c3690200 	cmngt	r9, #0, 4
    1d54:	02000002 	andeq	r0, r0, #2
    1d58:	00006491 	muleq	r0, r1, r4
    1d5c:	0007660f 	andeq	r6, r7, pc, lsl #12
    1d60:	00084100 	andeq	r4, r8, r0, lsl #2
    1d64:	02ca2000 	sbceq	r2, sl, #0
    1d68:	91030000 	mrsls	r0, (UNDEF: 3)
    1d6c:	1c000660 	stcne	6, cr0, [r0], {96}	; 0x60
    1d70:	00000b2d 	andeq	r0, r0, sp, lsr #22
    1d74:	0db44702 	ldceq	7, cr4, [r4, #8]!
    1d78:	00382000 	eorseq	r2, r8, r0
    1d7c:	9c010000 	stcls	0, cr0, [r1], {-0}
    1d80:	00000865 	andeq	r0, r0, r5, ror #16
    1d84:	000b9f1d 	andeq	r9, fp, sp, lsl pc
    1d88:	014b0200 	mrseq	r0, (UNDEF: 107)
    1d8c:	02000003 	andeq	r0, r0, #3
    1d90:	21007491 			; <UNDEFINED> instruction: 0x21007491
    1d94:	00000e6e 	andeq	r0, r0, lr, ror #28
    1d98:	0d9c4202 	lfmeq	f4, 4, [ip, #8]
    1d9c:	00182000 	andseq	r2, r8, r0
    1da0:	9c010000 	stcls	0, cr0, [r1], {-0}
    1da4:	000ad01c 	andeq	sp, sl, ip, lsl r0
    1da8:	e82a0200 	stmda	sl!, {r9}
    1dac:	b420000c 	strtlt	r0, [r0], #-12
    1db0:	01000000 	mrseq	r0, (UNDEF: 0)
    1db4:	0008e29c 	muleq	r8, ip, r2
    1db8:	0ac32200 	beq	ff0ca5c0 <dissarmedBit+0xdf0c6680>
    1dbc:	2a020000 	bcs	81dc4 <startup-0x1ff7e23c>
    1dc0:	000008e2 	andeq	r0, r0, r2, ror #17
    1dc4:	22649102 	rsbcs	r9, r4, #-2147483648	; 0x80000000
    1dc8:	00000ab6 			; <UNDEFINED> instruction: 0x00000ab6
    1dcc:	02c32a02 	sbceq	r2, r3, #8192	; 0x2000
    1dd0:	91020000 	mrsls	r0, (UNDEF: 2)
    1dd4:	20d81d60 	sbcscs	r1, r8, r0, ror #26
    1dd8:	2b020000 	blcs	81de0 <startup-0x1ff7e220>
    1ddc:	000002c3 	andeq	r0, r0, r3, asr #5
    1de0:	1e749102 	expnes	f1, f2
    1de4:	20000cf6 	strdcs	r0, [r0], -r6
    1de8:	00000096 	muleq	r0, r6, r0
    1dec:	02006a1f 	andeq	r6, r0, #126976	; 0x1f000
    1df0:	0002c32c 	andeq	ip, r2, ip, lsr #6
    1df4:	70910200 	addsvc	r0, r1, r0, lsl #4
    1df8:	000cfc1e 	andeq	pc, ip, lr, lsl ip	; <UNPREDICTABLE>
    1dfc:	00008420 	andeq	r8, r0, r0, lsr #8
    1e00:	00691f00 	rsbeq	r1, r9, r0, lsl #30
    1e04:	02c32e02 	sbceq	r2, r3, #2, 28
    1e08:	91020000 	mrsls	r0, (UNDEF: 2)
    1e0c:	0000006c 	andeq	r0, r0, ip, rrx
    1e10:	07660419 			; <UNDEFINED> instruction: 0x07660419
    1e14:	bf1c0000 	svclt	0x001c0000
    1e18:	0200000a 	andeq	r0, r0, #10
    1e1c:	000c881f 	andeq	r8, ip, pc, lsl r8
    1e20:	00006020 	andeq	r6, r0, r0, lsr #32
    1e24:	389c0100 	ldmcc	ip, {r8}
    1e28:	22000009 	andcs	r0, r0, #9
    1e2c:	000020d8 	ldrdeq	r2, [r0], -r8
    1e30:	09381f02 	ldmdbeq	r8!, {r1, r8, r9, sl, fp, ip}
    1e34:	91020000 	mrsls	r0, (UNDEF: 2)
    1e38:	0c901e6c 	ldceq	14, cr1, [r0], {108}	; 0x6c
    1e3c:	00482000 	subeq	r2, r8, r0
    1e40:	6a1f0000 	bvs	7c1e48 <startup-0x1f83e1b8>
    1e44:	c3200200 	nopgt	{0}	; <UNPREDICTABLE>
    1e48:	02000002 	andeq	r0, r0, #2
    1e4c:	961e7491 			; <UNDEFINED> instruction: 0x961e7491
    1e50:	3620000c 	strtcc	r0, [r0], -ip
    1e54:	1f000000 	svcne	0x00000000
    1e58:	22020069 	andcs	r0, r2, #105	; 0x69
    1e5c:	000002c3 	andeq	r0, r0, r3, asr #5
    1e60:	00709102 	rsbseq	r9, r0, r2, lsl #2
    1e64:	04190000 	ldreq	r0, [r9], #-0
    1e68:	000002c3 	andeq	r0, r0, r3, asr #5
    1e6c:	000b0621 	andeq	r0, fp, r1, lsr #12
    1e70:	000b0200 	andeq	r0, fp, r0, lsl #4
    1e74:	0c200000 	stceq	0, cr0, [r0], #-0
    1e78:	01000000 	mrseq	r0, (UNDEF: 0)
    1e7c:	0eec239c 	mcreq	3, 7, r2, cr12, cr12, {4}
    1e80:	e0010000 	and	r0, r1, r0
    1e84:	00030106 	andeq	r0, r3, r6, lsl #2
    1e88:	000c4000 	andeq	r4, ip, r0
    1e8c:	00004820 	andeq	r4, r0, r0, lsr #16
    1e90:	799c0100 	ldmibvc	ip, {r8}
    1e94:	24000009 	strcs	r0, [r0], #-9
    1e98:	00000d41 	andeq	r0, r0, r1, asr #26
    1e9c:	0106e001 	tsteq	r6, r1
    1ea0:	02000003 	andeq	r0, r0, #3
    1ea4:	25007491 	strcs	r7, [r0, #-1169]	; 0xfffffb6f
    1ea8:	00000c70 	andeq	r0, r0, r0, ror ip
    1eac:	e0065d01 	and	r5, r6, r1, lsl #26
    1eb0:	6020000b 	eorvs	r0, r0, fp
    1eb4:	01000000 	mrseq	r0, (UNDEF: 0)
    1eb8:	0d3c249c 	cfldrseq	mvf2, [ip, #-624]!	; 0xfffffd90
    1ebc:	5d010000 	stcpl	0, cr0, [r1, #-0]
    1ec0:	00025a06 	andeq	r5, r2, r6, lsl #20
    1ec4:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    1ec8:	00088c24 	andeq	r8, r8, r4, lsr #24
    1ecc:	065d0100 	ldrbeq	r0, [sp], -r0, lsl #2
    1ed0:	00000301 	andeq	r0, r0, r1, lsl #6
    1ed4:	00709102 	rsbseq	r9, r0, r2, lsl #2
    1ed8:	00028d00 	andeq	r8, r2, r0, lsl #26
    1edc:	07000400 	streq	r0, [r0, -r0, lsl #8]
    1ee0:	04000009 	streq	r0, [r0], #-9
    1ee4:	00005101 	andeq	r5, r0, r1, lsl #2
    1ee8:	10480c00 	subne	r0, r8, r0, lsl #24
    1eec:	01df0000 	bicseq	r0, pc, r0
    1ef0:	0ef40000 	cdpeq	0, 15, cr0, cr4, cr0, {0}
    1ef4:	01742000 	cmneq	r4, r0
    1ef8:	0ccf0000 	stcleq	0, cr0, [pc], {0}
    1efc:	01020000 	mrseq	r0, (UNDEF: 2)
    1f00:	00011a06 	andeq	r1, r1, r6, lsl #20
    1f04:	000a0300 	andeq	r0, sl, r0, lsl #6
    1f08:	2b020000 	blcs	81f10 <startup-0x1ff7e0f0>
    1f0c:	00000037 	andeq	r0, r0, r7, lsr r0
    1f10:	18080102 	stmdane	r8, {r1, r8}
    1f14:	02000001 	andeq	r0, r0, #1
    1f18:	003c0502 	eorseq	r0, ip, r2, lsl #10
    1f1c:	02020000 	andeq	r0, r2, #0
    1f20:	00028107 	andeq	r8, r2, r7, lsl #2
    1f24:	002b0300 	eoreq	r0, fp, r0, lsl #6
    1f28:	4d020000 	stcmi	0, cr0, [r2, #-0]
    1f2c:	00000057 	andeq	r0, r0, r7, asr r0
    1f30:	2d050402 	cfstrscs	mvf0, [r5, #-8]
    1f34:	03000002 	movweq	r0, #2
    1f38:	00000163 	andeq	r0, r0, r3, ror #2
    1f3c:	00694f02 	rsbeq	r4, r9, r2, lsl #30
    1f40:	04020000 	streq	r0, [r2], #-0
    1f44:	00010607 	andeq	r0, r1, r7, lsl #12
    1f48:	05080200 	streq	r0, [r8, #-512]	; 0xfffffe00
    1f4c:	00000228 	andeq	r0, r0, r8, lsr #4
    1f50:	01070802 	tsteq	r7, r2, lsl #16
    1f54:	04000001 	streq	r0, [r0], #-1
    1f58:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    1f5c:	04020074 	streq	r0, [r2], #-116	; 0xffffff8c
    1f60:	00010b07 	andeq	r0, r1, r7, lsl #22
    1f64:	000c0300 	andeq	r0, ip, r0, lsl #6
    1f68:	18030000 	stmdane	r3, {}	; <UNPREDICTABLE>
    1f6c:	0000002c 	andeq	r0, r0, ip, lsr #32
    1f70:	00002d03 	andeq	r2, r0, r3, lsl #26
    1f74:	4c2c0300 	stcmi	3, cr0, [ip], #-0
    1f78:	05000000 	streq	r0, [r0, #-0]
    1f7c:	00000097 	muleq	r0, r7, r0
    1f80:	00016503 	andeq	r6, r1, r3, lsl #10
    1f84:	5e300300 	cdppl	3, 3, cr0, cr0, cr0, {0}
    1f88:	05000000 	streq	r0, [r0, #-0]
    1f8c:	000000a7 	andeq	r0, r0, r7, lsr #1
    1f90:	00014a06 	andeq	r4, r1, r6, lsl #20
    1f94:	06fa0400 	ldrbteq	r0, [sl], r0, lsl #8
    1f98:	000000a2 	andeq	r0, r0, r2, lsr #1
    1f9c:	00024107 	andeq	r4, r2, r7, lsl #2
    1fa0:	a73b0500 	ldrge	r0, [fp, -r0, lsl #10]!
    1fa4:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    1fa8:	00370107 	eorseq	r0, r7, r7, lsl #2
    1fac:	5d060000 	stcpl	0, cr0, [r6, #-0]
    1fb0:	0000e903 	andeq	lr, r0, r3, lsl #18
    1fb4:	18810900 	stmne	r1, {r8, fp}
    1fb8:	0a000000 	beq	1fc0 <startup-0x1fffe040>
    1fbc:	00544553 	subseq	r4, r4, r3, asr r5
    1fc0:	090b0001 	stmdbeq	fp, {r0}
    1fc4:	0600001f 			; <UNDEFINED> instruction: 0x0600001f
    1fc8:	00ce035d 	sbceq	r0, lr, sp, asr r3
    1fcc:	b50b0000 	strlt	r0, [fp, #-0]
    1fd0:	06000015 			; <UNDEFINED> instruction: 0x06000015
    1fd4:	00ce035d 	sbceq	r0, lr, sp, asr r3
    1fd8:	07080000 	streq	r0, [r8, -r0]
    1fdc:	00003701 	andeq	r3, r0, r1, lsl #14
    1fe0:	035f0600 	cmpeq	pc, #0, 12
    1fe4:	0000011c 	andeq	r0, r0, ip, lsl r1
    1fe8:	00014209 	andeq	r4, r1, r9, lsl #4
    1fec:	fa090000 	blx	241ff4 <startup-0x1fdbe00c>
    1ff0:	01000000 	mrseq	r0, (UNDEF: 0)
    1ff4:	093c0b00 	ldmdbeq	ip!, {r8, r9, fp}
    1ff8:	5f060000 	svcpl	0x00060000
    1ffc:	00010103 	andeq	r0, r1, r3, lsl #2
    2000:	060c0c00 	streq	r0, [ip], -r0, lsl #24
    2004:	015607d9 	ldrsbeq	r0, [r6, #-121]	; 0xffffff87
    2008:	430d0000 	movwmi	r0, #53248	; 0xd000
    200c:	db060052 	blle	18215c <startup-0x1fe7dea4>
    2010:	0000b207 	andeq	fp, r0, r7, lsl #4
    2014:	530d0000 	movwpl	r0, #53248	; 0xd000
    2018:	dc060052 	stcle	0, cr0, [r6], {82}	; 0x52
    201c:	0000b207 	andeq	fp, r0, r7, lsl #4
    2020:	440d0400 	strmi	r0, [sp], #-1024	; 0xfffffc00
    2024:	dd060052 	stcle	0, cr0, [r6, #-328]	; 0xfffffeb8
    2028:	0000b207 	andeq	fp, r0, r7, lsl #4
    202c:	0b000800 	bleq	4034 <startup-0x1fffbfcc>
    2030:	0000103c 	andeq	r1, r0, ip, lsr r0
    2034:	2807de06 	stmdacs	r7, {r1, r2, r9, sl, fp, ip, lr, pc}
    2038:	0e000001 	cdpeq	0, 0, cr0, cr0, cr1, {0}
    203c:	000010ec 	andeq	r1, r0, ip, ror #1
    2040:	44017d01 	strmi	r7, [r1], #-3329	; 0xfffff2ff
    2044:	24200010 	strtcs	r0, [r0], #-16
    2048:	01000000 	mrseq	r0, (UNDEF: 0)
    204c:	0001889c 	muleq	r1, ip, r8
    2050:	10010f00 	andne	r0, r1, r0, lsl #30
    2054:	7d010000 	stcvc	0, cr0, [r1, #-0]
    2058:	00008c01 	andeq	r8, r0, r1, lsl #24
    205c:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    2060:	10dc1000 	sbcsne	r1, ip, r0
    2064:	5f010000 	svcpl	0x00010000
    2068:	0000f501 	andeq	pc, r0, r1, lsl #10
    206c:	00100000 	andseq	r0, r0, r0
    2070:	00004420 	andeq	r4, r0, r0, lsr #8
    2074:	c19c0100 	orrsgt	r0, ip, r0, lsl #2
    2078:	0f000001 	svceq	0x00000001
    207c:	00001001 	andeq	r1, r0, r1
    2080:	8c015f01 	stchi	15, cr5, [r1], {1}
    2084:	02000000 	andeq	r0, r0, #0
    2088:	8e116f91 	mrchi	15, 0, r6, cr1, cr1, {4}
    208c:	01000014 	tsteq	r0, r4, lsl r0
    2090:	00f50161 	rscseq	r0, r5, r1, ror #2
    2094:	91020000 	mrsls	r0, (UNDEF: 2)
    2098:	ce0e0077 	mcrgt	0, 0, r0, cr14, cr7, {3}
    209c:	01000010 	tsteq	r0, r0, lsl r0
    20a0:	0fdc014f 	svceq	0x00dc014f
    20a4:	00242000 	eoreq	r2, r4, r0
    20a8:	9c010000 	stcls	0, cr0, [r1], {-0}
    20ac:	000001e7 	andeq	r0, r0, r7, ror #3
    20b0:	0010c50f 	andseq	ip, r0, pc, lsl #10
    20b4:	014f0100 	mrseq	r0, (UNDEF: 95)
    20b8:	0000008c 	andeq	r0, r0, ip, lsl #1
    20bc:	00779102 	rsbseq	r9, r7, r2, lsl #2
    20c0:	00110210 	andseq	r0, r1, r0, lsl r2
    20c4:	012e0100 			; <UNDEFINED> instruction: 0x012e0100
    20c8:	000000e9 	andeq	r0, r0, r9, ror #1
    20cc:	20000f98 	mulcs	r0, r8, pc	; <UNPREDICTABLE>
    20d0:	00000044 	andeq	r0, r0, r4, asr #32
    20d4:	02209c01 	eoreq	r9, r0, #256	; 0x100
    20d8:	c50f0000 	strgt	r0, [pc, #-0]	; 20e0 <startup-0x1fffdf20>
    20dc:	01000010 	tsteq	r0, r0, lsl r0
    20e0:	008c012e 	addeq	r0, ip, lr, lsr #2
    20e4:	91020000 	mrsls	r0, (UNDEF: 2)
    20e8:	148e116f 	strne	r1, [lr], #367	; 0x16f
    20ec:	30010000 	andcc	r0, r1, r0
    20f0:	0000e901 	andeq	lr, r0, r1, lsl #18
    20f4:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    20f8:	10080e00 	andne	r0, r8, r0, lsl #28
    20fc:	14010000 	strne	r0, [r1], #-0
    2100:	000f5c01 	andeq	r5, pc, r1, lsl #24
    2104:	00003c20 	andeq	r3, r0, r0, lsr #24
    2108:	469c0100 	ldrmi	r0, [ip], r0, lsl #2
    210c:	0f000002 	svceq	0x00000002
    2110:	000007e7 	andeq	r0, r0, r7, ror #15
    2114:	1c011401 	cfstrsne	mvf1, [r1], {1}
    2118:	02000001 	andeq	r0, r0, #1
    211c:	12007791 	andne	r7, r0, #38010880	; 0x2440000
    2120:	0000101d 	andeq	r1, r0, sp, lsl r0
    2124:	00a7b901 	adceq	fp, r7, r1, lsl #18
    2128:	0f480000 	svceq	0x00480000
    212c:	00142000 	andseq	r2, r4, r0
    2130:	9c010000 	stcls	0, cr0, [r1], {-0}
    2134:	00101513 	andseq	r1, r0, r3, lsl r5
    2138:	0e7b0100 	rpweqe	f0, f3, f0
    213c:	3a20000f 	bcc	802180 <startup-0x1f7fde80>
    2140:	01000000 	mrseq	r0, (UNDEF: 0)
    2144:	00027f9c 	muleq	r2, ip, pc	; <UNPREDICTABLE>
    2148:	07e71400 	strbeq	r1, [r7, r0, lsl #8]!
    214c:	7b010000 	blvc	42154 <startup-0x1ffbdeac>
    2150:	0000011c 	andeq	r0, r0, ip, lsl r1
    2154:	00779102 	rsbseq	r9, r7, r2, lsl #2
    2158:	00103115 	andseq	r3, r0, r5, lsl r1
    215c:	f4630100 	vld4.8	{d16,d18,d20,d22}, [r3], r0
    2160:	1a20000e 	bne	8021a0 <startup-0x1f7fde60>
    2164:	01000000 	mrseq	r0, (UNDEF: 0)
    2168:	0ba6009c 	bleq	fe9823e0 <dissarmedBit+0xde97e4a0>
    216c:	00040000 	andeq	r0, r4, r0
    2170:	00000a62 	andeq	r0, r0, r2, ror #20
    2174:	00510104 	subseq	r0, r1, r4, lsl #2
    2178:	370c0000 	strcc	r0, [ip, -r0]
    217c:	df000011 	svcle	0x00000011
    2180:	68000001 	stmdavs	r0, {r0}
    2184:	d2200010 	eorle	r0, r0, #16
    2188:	d4000011 	strle	r0, [r0], #-17	; 0xffffffef
    218c:	0200000e 	andeq	r0, r0, #14
    2190:	011a0601 	tsteq	sl, r1, lsl #12
    2194:	0a030000 	beq	c219c <startup-0x1ff3de64>
    2198:	02000000 	andeq	r0, r0, #0
    219c:	0000372b 	andeq	r3, r0, fp, lsr #14
    21a0:	08010200 	stmdaeq	r1, {r9}
    21a4:	00000118 	andeq	r0, r0, r8, lsl r1
    21a8:	3c050202 	sfmcc	f0, 4, [r5], {2}
    21ac:	03000000 	movweq	r0, #0
    21b0:	000002b8 			; <UNDEFINED> instruction: 0x000002b8
    21b4:	00503902 	subseq	r3, r0, r2, lsl #18
    21b8:	02020000 	andeq	r0, r2, #0
    21bc:	00028107 	andeq	r8, r2, r7, lsl #2
    21c0:	002b0300 	eoreq	r0, fp, r0, lsl #6
    21c4:	4d020000 	stcmi	0, cr0, [r2, #-0]
    21c8:	00000062 	andeq	r0, r0, r2, rrx
    21cc:	2d050402 	cfstrscs	mvf0, [r5, #-8]
    21d0:	03000002 	movweq	r0, #2
    21d4:	00000163 	andeq	r0, r0, r3, ror #2
    21d8:	00744f02 	rsbseq	r4, r4, r2, lsl #30
    21dc:	04020000 	streq	r0, [r2], #-0
    21e0:	00010607 	andeq	r0, r1, r7, lsl #12
    21e4:	05080200 	streq	r0, [r8, #-512]	; 0xfffffe00
    21e8:	00000228 	andeq	r0, r0, r8, lsr #4
    21ec:	01070802 	tsteq	r7, r2, lsl #16
    21f0:	04000001 	streq	r0, [r0], #-1
    21f4:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    21f8:	04020074 	streq	r0, [r2], #-116	; 0xffffff8c
    21fc:	00010b07 	andeq	r0, r1, r7, lsl #22
    2200:	000c0300 	andeq	r0, ip, r0, lsl #6
    2204:	18030000 	stmdane	r3, {}	; <UNPREDICTABLE>
    2208:	0000002c 	andeq	r0, r0, ip, lsr #32
    220c:	0002ba03 	andeq	fp, r2, r3, lsl #20
    2210:	45240300 	strmi	r0, [r4, #-768]!	; 0xfffffd00
    2214:	03000000 	movweq	r0, #0
    2218:	0000002d 	andeq	r0, r0, sp, lsr #32
    221c:	00572c03 	subseq	r2, r7, r3, lsl #24
    2220:	ad050000 	stcge	0, cr0, [r5, #-0]
    2224:	03000000 	movweq	r0, #0
    2228:	00000165 	andeq	r0, r0, r5, ror #2
    222c:	00693003 	rsbeq	r3, r9, r3
    2230:	bd050000 	stclt	0, cr0, [r5, #-0]
    2234:	06000000 	streq	r0, [r0], -r0
    2238:	000000bd 	strheq	r0, [r0], -sp
    223c:	000000dd 	ldrdeq	r0, [r0], -sp
    2240:	00009007 	andeq	r9, r0, r7
    2244:	08000700 	stmdaeq	r0, {r8, r9, sl}
    2248:	0000014a 	andeq	r0, r0, sl, asr #2
    224c:	b806fa04 	stmdalt	r6, {r2, r9, fp, ip, sp, lr, pc}
    2250:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    2254:	00000241 	andeq	r0, r0, r1, asr #4
    2258:	00bd3b05 	adcseq	r3, sp, r5, lsl #22
    225c:	070a0000 	streq	r0, [sl, -r0]
    2260:	00003701 	andeq	r3, r0, r1, lsl #14
    2264:	035d0600 	cmpeq	sp, #0, 12
    2268:	0000010f 	andeq	r0, r0, pc, lsl #2
    226c:	0018810b 	andseq	r8, r8, fp, lsl #2
    2270:	530c0000 	movwpl	r0, #49152	; 0xc000
    2274:	01005445 	tsteq	r0, r5, asr #8
    2278:	1f090d00 	svcne	0x00090d00
    227c:	5d060000 	stcpl	0, cr0, [r6, #-0]
    2280:	0000f403 	andeq	pc, r0, r3, lsl #8
    2284:	15b50d00 	ldrne	r0, [r5, #3328]!	; 0xd00
    2288:	5d060000 	stcpl	0, cr0, [r6, #-0]
    228c:	0000f403 	andeq	pc, r0, r3, lsl #8
    2290:	01070a00 	tsteq	r7, r0, lsl #20
    2294:	00000037 	andeq	r0, r0, r7, lsr r0
    2298:	42035f06 	andmi	r5, r3, #6, 30
    229c:	0b000001 	bleq	22a8 <startup-0x1fffdd58>
    22a0:	00000142 	andeq	r0, r0, r2, asr #2
    22a4:	00fa0b00 	rscseq	r0, sl, r0, lsl #22
    22a8:	00010000 	andeq	r0, r1, r0
    22ac:	00093c0d 	andeq	r3, r9, sp, lsl #24
    22b0:	035f0600 	cmpeq	pc, #0, 12
    22b4:	00000127 	andeq	r0, r0, r7, lsr #2
    22b8:	9506100e 	strls	r1, [r6, #-14]
    22bc:	00018c03 	andeq	r8, r1, r3, lsl #24
    22c0:	49540f00 	ldmdbmi	r4, {r8, r9, sl, fp}^
    22c4:	97060052 	smlsdls	r6, r2, r0, r0
    22c8:	0000c803 	andeq	ip, r0, r3, lsl #16
    22cc:	b7100000 	ldrlt	r0, [r0, -r0]
    22d0:	06000013 			; <UNDEFINED> instruction: 0x06000013
    22d4:	00c80398 	smulleq	r0, r8, r8, r3
    22d8:	10040000 	andne	r0, r4, r0
    22dc:	000012aa 	andeq	r1, r0, sl, lsr #5
    22e0:	c8039906 	stmdagt	r3, {r1, r2, r8, fp, ip, pc}
    22e4:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    22e8:	00142c10 	andseq	r2, r4, r0, lsl ip
    22ec:	039a0600 	orrseq	r0, sl, #0, 12
    22f0:	000000c8 	andeq	r0, r0, r8, asr #1
    22f4:	da0d000c 	ble	34232c <startup-0x1fcbdcd4>
    22f8:	06000014 			; <UNDEFINED> instruction: 0x06000014
    22fc:	014e039b 			; <UNDEFINED> instruction: 0x014e039b
    2300:	100e0000 	andne	r0, lr, r0
    2304:	d603a106 	strle	sl, [r3], -r6, lsl #2
    2308:	0f000001 	svceq	0x00000001
    230c:	00524952 	subseq	r4, r2, r2, asr r9
    2310:	c803a306 	stmdagt	r3, {r1, r2, r8, r9, sp, pc}
    2314:	00000000 	andeq	r0, r0, r0
    2318:	00136b10 	andseq	r6, r3, r0, lsl fp
    231c:	03a40600 			; <UNDEFINED> instruction: 0x03a40600
    2320:	000000c8 	andeq	r0, r0, r8, asr #1
    2324:	13011004 	movwne	r1, #4100	; 0x1004
    2328:	a5060000 	strge	r0, [r6, #-0]
    232c:	0000c803 	andeq	ip, r0, r3, lsl #16
    2330:	2f100800 	svccs	0x00100800
    2334:	06000015 			; <UNDEFINED> instruction: 0x06000015
    2338:	00c803a6 	sbceq	r0, r8, r6, lsr #7
    233c:	000c0000 	andeq	r0, ip, r0
    2340:	0013cc0d 	andseq	ip, r3, sp, lsl #24
    2344:	03a70600 			; <UNDEFINED> instruction: 0x03a70600
    2348:	00000198 	muleq	r0, r8, r1
    234c:	ad06080e 	stcge	8, cr0, [r6, #-56]	; 0xffffffc8
    2350:	00020603 	andeq	r0, r2, r3, lsl #12
    2354:	52460f00 	subpl	r0, r6, #0, 30
    2358:	af060031 	svcge	0x00060031
    235c:	0000c803 	andeq	ip, r0, r3, lsl #16
    2360:	460f0000 	strmi	r0, [pc], -r0
    2364:	06003252 			; <UNDEFINED> instruction: 0x06003252
    2368:	00c803b0 	strheq	r0, [r8], #48	; 0x30
    236c:	00040000 	andeq	r0, r4, r0
    2370:	00137a0d 	andseq	r7, r3, sp, lsl #20
    2374:	03b10600 			; <UNDEFINED> instruction: 0x03b10600
    2378:	000001e2 	andeq	r0, r0, r2, ror #3
    237c:	06032011 			; <UNDEFINED> instruction: 0x06032011
    2380:	034803b7 	movteq	r0, #33719	; 0x83b7
    2384:	4d0f0000 	stcmi	0, cr0, [pc, #-0]	; 238c <startup-0x1fffdc74>
    2388:	06005243 	streq	r5, [r0], -r3, asr #4
    238c:	00c803b9 	strheq	r0, [r8], #57	; 0x39
    2390:	0f000000 	svceq	0x00000000
    2394:	0052534d 	subseq	r5, r2, sp, asr #6
    2398:	c803ba06 	stmdagt	r3, {r1, r2, r9, fp, ip, sp, pc}
    239c:	04000000 	streq	r0, [r0], #-0
    23a0:	5253540f 	subspl	r5, r3, #251658240	; 0xf000000
    23a4:	03bb0600 			; <UNDEFINED> instruction: 0x03bb0600
    23a8:	000000c8 	andeq	r0, r0, r8, asr #1
    23ac:	12da1008 	sbcsne	r1, sl, #8
    23b0:	bc060000 	stclt	0, cr0, [r6], {-0}
    23b4:	0000c803 	andeq	ip, r0, r3, lsl #16
    23b8:	75100c00 	ldrvc	r0, [r0, #-3072]	; 0xfffff400
    23bc:	06000013 			; <UNDEFINED> instruction: 0x06000013
    23c0:	00c803bd 	strheq	r0, [r8], #61	; 0x3d
    23c4:	0f100000 	svceq	0x00100000
    23c8:	00524549 	subseq	r4, r2, r9, asr #10
    23cc:	c803be06 	stmdagt	r3, {r1, r2, r9, sl, fp, ip, sp, pc}
    23d0:	14000000 	strne	r0, [r0], #-0
    23d4:	5253450f 	subspl	r4, r3, #62914560	; 0x3c00000
    23d8:	03bf0600 			; <UNDEFINED> instruction: 0x03bf0600
    23dc:	000000c8 	andeq	r0, r0, r8, asr #1
    23e0:	54420f18 	strbpl	r0, [r2], #-3864	; 0xfffff0e8
    23e4:	c0060052 	andgt	r0, r6, r2, asr r0
    23e8:	0000c803 	andeq	ip, r0, r3, lsl #16
    23ec:	de101c00 	cdple	12, 1, cr1, cr0, cr0, {0}
    23f0:	06000008 	streq	r0, [r0], -r8
    23f4:	034803c1 	movteq	r0, #33729	; 0x83c1
    23f8:	12200000 	eorne	r0, r0, #0
    23fc:	0000133f 	andeq	r1, r0, pc, lsr r3
    2400:	5803c206 	stmdapl	r3, {r1, r2, r9, lr, pc}
    2404:	80000003 	andhi	r0, r0, r3
    2408:	15451201 	strbne	r1, [r5, #-513]	; 0xfffffdff
    240c:	c3060000 	movwgt	r0, #24576	; 0x6000
    2410:	00036803 	andeq	r6, r3, r3, lsl #16
    2414:	1201b000 	andne	fp, r1, #0
    2418:	0000145e 	andeq	r1, r0, lr, asr r4
    241c:	7803c406 	stmdavc	r3, {r1, r2, sl, lr, pc}
    2420:	d0000003 	andle	r0, r0, r3
    2424:	4d461301 	stclmi	3, cr1, [r6, #-4]
    2428:	c5060052 	strgt	r0, [r6, #-82]	; 0xffffffae
    242c:	0000c803 	andeq	ip, r0, r3, lsl #16
    2430:	12020000 	andne	r0, r2, #0
    2434:	000013b2 			; <UNDEFINED> instruction: 0x000013b2
    2438:	c803c606 	stmdagt	r3, {r1, r2, r9, sl, lr, pc}
    243c:	04000000 	streq	r0, [r0], #-0
    2440:	08e81202 	stmiaeq	r8!, {r1, r9, ip}^
    2444:	c7060000 	strgt	r0, [r6, -r0]
    2448:	0000bd03 	andeq	fp, r0, r3, lsl #26
    244c:	12020800 	andne	r0, r2, #0, 16
    2450:	00001370 	andeq	r1, r0, r0, ror r3
    2454:	c803c806 	stmdagt	r3, {r1, r2, fp, lr, pc}
    2458:	0c000000 	stceq	0, cr0, [r0], {-0}
    245c:	08f21202 	ldmeq	r2!, {r1, r9, ip}^
    2460:	c9060000 	stmdbgt	r6, {}	; <UNPREDICTABLE>
    2464:	0000bd03 	andeq	fp, r0, r3, lsl #26
    2468:	12021000 	andne	r1, r2, #0
    246c:	00001431 	andeq	r1, r0, r1, lsr r4
    2470:	c803ca06 	stmdagt	r3, {r1, r2, r9, fp, lr, pc}
    2474:	14000000 	strne	r0, [r0], #-0
    2478:	08fc1202 	ldmeq	ip!, {r1, r9, ip}^
    247c:	cb060000 	blgt	182484 <startup-0x1fe7db7c>
    2480:	0000bd03 	andeq	fp, r0, r3, lsl #26
    2484:	12021800 	andne	r1, r2, #0, 16
    2488:	00001432 	andeq	r1, r0, r2, lsr r4
    248c:	c803cc06 	stmdagt	r3, {r1, r2, sl, fp, lr, pc}
    2490:	1c000000 	stcne	0, cr0, [r0], {-0}
    2494:	09061202 	stmdbeq	r6, {r1, r9, ip}
    2498:	cd060000 	stcgt	0, cr0, [r6, #-0]
    249c:	0000cd03 	andeq	ip, r0, r3, lsl #26
    24a0:	12022000 	andne	r2, r2, #0
    24a4:	00001395 	muleq	r0, r5, r3
    24a8:	8803ce06 	stmdahi	r3, {r1, r2, r9, sl, fp, lr, pc}
    24ac:	40000003 	andmi	r0, r0, r3
    24b0:	bd060002 	stclt	0, cr0, [r6, #-8]
    24b4:	58000000 	stmdapl	r0, {}	; <UNPREDICTABLE>
    24b8:	07000003 	streq	r0, [r0, -r3]
    24bc:	00000090 	muleq	r0, r0, r0
    24c0:	8c060057 	stchi	0, cr0, [r6], {87}	; 0x57
    24c4:	68000001 	stmdavs	r0, {r0}
    24c8:	07000003 	streq	r0, [r0, -r3]
    24cc:	00000090 	muleq	r0, r0, r0
    24d0:	d6060002 	strle	r0, [r6], -r2
    24d4:	78000001 	stmdavc	r0, {r0}
    24d8:	07000003 	streq	r0, [r0, -r3]
    24dc:	00000090 	muleq	r0, r0, r0
    24e0:	bd060001 	stclt	0, cr0, [r6, #-4]
    24e4:	88000000 	stmdahi	r0, {}	; <UNPREDICTABLE>
    24e8:	07000003 	streq	r0, [r0, -r3]
    24ec:	00000090 	muleq	r0, r0, r0
    24f0:	0606000b 	streq	r0, [r6], -fp
    24f4:	98000002 	stmdals	r0, {r1}
    24f8:	07000003 	streq	r0, [r0, -r3]
    24fc:	00000090 	muleq	r0, r0, r0
    2500:	c30d001b 	movwgt	r0, #53275	; 0xd01b
    2504:	06000011 			; <UNDEFINED> instruction: 0x06000011
    2508:	021203cf 	andseq	r0, r2, #1006632963	; 0x3c000003
    250c:	0c140000 	ldceq	0, cr0, [r4], {-0}
    2510:	04313d07 	ldrteq	r3, [r1], #-3335	; 0xfffff2f9
    2514:	50150000 	andspl	r0, r5, r0
    2518:	07000014 	smladeq	r0, r4, r0, r0
    251c:	0000a23f 	andeq	sl, r0, pc, lsr r2
    2520:	9b150000 	blls	542528 <startup-0x1fabdad8>
    2524:	07000012 	smladeq	r0, r2, r0, r0
    2528:	00009742 	andeq	r9, r0, r2, asr #14
    252c:	28150200 	ldmdacs	r5, {r9}
    2530:	07000016 	smladeq	r0, r6, r0, r0
    2534:	00009745 	andeq	r9, r0, r5, asr #14
    2538:	49150300 	ldmdbmi	r5, {r8, r9}
    253c:	07000012 	smladeq	r0, r2, r0, r0
    2540:	0000974a 	andeq	r9, r0, sl, asr #14
    2544:	51150400 	tstpl	r5, r0, lsl #8
    2548:	07000012 	smladeq	r0, r2, r0, r0
    254c:	0000974e 	andeq	r9, r0, lr, asr #14
    2550:	ee150500 	cfmul32	mvfx0, mvfx5, mvfx0
    2554:	07000015 	smladeq	r0, r5, r0, r0
    2558:	00014251 	andeq	r4, r1, r1, asr r2
    255c:	06150600 	ldreq	r0, [r5], -r0, lsl #12
    2560:	07000013 	smladeq	r0, r3, r0, r0
    2564:	00014254 	andeq	r4, r1, r4, asr r2
    2568:	3c150700 	ldccc	7, cr0, [r5], {-0}
    256c:	07000015 	smladeq	r0, r5, r0, r0
    2570:	00014257 	andeq	r4, r1, r7, asr r2
    2574:	4c150800 	ldcmi	8, cr0, [r5], {-0}
    2578:	07000016 	smladeq	r0, r6, r0, r0
    257c:	0001425a 	andeq	r4, r1, sl, asr r2
    2580:	64150900 	ldrvs	r0, [r5], #-2304	; 0xfffff700
    2584:	07000015 	smladeq	r0, r5, r0, r0
    2588:	0001425d 	andeq	r4, r1, sp, asr r2
    258c:	d4150a00 	ldrle	r0, [r5], #-2560	; 0xfffff600
    2590:	07000015 	smladeq	r0, r5, r0, r0
    2594:	00014260 	andeq	r4, r1, r0, ror #4
    2598:	03000b00 	movweq	r0, #2816	; 0xb00
    259c:	000014b1 			; <UNDEFINED> instruction: 0x000014b1
    25a0:	03a46207 			; <UNDEFINED> instruction: 0x03a46207
    25a4:	0e140000 	cdpeq	0, 1, cr0, cr4, cr0, {0}
    25a8:	04b16707 	ldrteq	r6, [r1], #1799	; 0x707
    25ac:	98150000 	ldmdals	r5, {}	; <UNPREDICTABLE>
    25b0:	07000014 	smladeq	r0, r4, r0, r0
    25b4:	0000a269 	andeq	sl, r0, r9, ror #4
    25b8:	37150000 	ldrcc	r0, [r5, -r0]
    25bc:	07000014 	smladeq	r0, r4, r0, r0
    25c0:	0000a26d 	andeq	sl, r0, sp, ror #4
    25c4:	21150200 	tstcs	r5, r0, lsl #4
    25c8:	07000012 	smladeq	r0, r2, r0, r0
    25cc:	0000a271 	andeq	sl, r0, r1, ror r2
    25d0:	68150400 	ldmdavs	r5, {sl}
    25d4:	07000012 	smladeq	r0, r2, r0, r0
    25d8:	0000a276 	andeq	sl, r0, r6, ror r2
    25dc:	c1150600 	tstgt	r5, r0, lsl #12
    25e0:	07000014 	smladeq	r0, r4, r0, r0
    25e4:	0000a27b 	andeq	sl, r0, fp, ror r2
    25e8:	0b150800 	bleq	5445f0 <startup-0x1fabba10>
    25ec:	07000014 	smladeq	r0, r4, r0, r0
    25f0:	0000977e 	andeq	r9, r0, lr, ror r7
    25f4:	0e150a00 	vnmlseq.f32	s0, s10, s0
    25f8:	07000015 	smladeq	r0, r5, r0, r0
    25fc:	00009780 	andeq	r9, r0, r0, lsl #15
    2600:	fe150b00 	vselvs.f64	d0, d5, d0
    2604:	07000014 	smladeq	r0, r4, r0, r0
    2608:	00009783 	andeq	r9, r0, r3, lsl #15
    260c:	7f150c00 	svcvc	0x00150c00
    2610:	07000015 	smladeq	r0, r5, r0, r0
    2614:	00014286 	andeq	r4, r1, r6, lsl #5
    2618:	03000d00 	movweq	r0, #3328	; 0xd00
    261c:	000013f5 	strdeq	r1, [r0], -r5
    2620:	043c8807 	ldrteq	r8, [ip], #-2055	; 0xfffff7f9
    2624:	14140000 	ldrne	r0, [r4], #-0
    2628:	050d8d07 	streq	r8, [sp, #-3335]	; 0xfffff2f9
    262c:	36150000 	ldrcc	r0, [r5], -r0
    2630:	07000002 	streq	r0, [r0, -r2]
    2634:	0000bd8f 	andeq	fp, r0, pc, lsl #27
    2638:	22150000 	andscs	r0, r5, #0
    263c:	07000002 	streq	r0, [r0, -r2]
    2640:	0000bd92 	muleq	r0, r2, sp
    2644:	49160400 	ldmdbmi	r6, {sl}
    2648:	07004544 	streq	r4, [r0, -r4, asr #10]
    264c:	00009795 	muleq	r0, r5, r7
    2650:	52160800 	andspl	r0, r6, #0, 16
    2654:	07005254 	smlsdeq	r0, r4, r2, r5
    2658:	00009799 	muleq	r0, r9, r7
    265c:	44160900 	ldrmi	r0, [r6], #-2304	; 0xfffff700
    2660:	0700434c 	streq	r4, [r0, -ip, asr #6]
    2664:	0000979d 	muleq	r0, sp, r7
    2668:	90150a00 	andsls	r0, r5, r0, lsl #20
    266c:	07000019 	smladeq	r0, r9, r0, r0
    2670:	00050da1 	andeq	r0, r5, r1, lsr #27
    2674:	06000b00 	streq	r0, [r0], -r0, lsl #22
    2678:	00000097 	muleq	r0, r7, r0
    267c:	0000051d 	andeq	r0, r0, sp, lsl r5
    2680:	00009007 	andeq	r9, r0, r7
    2684:	03000700 	movweq	r0, #1792	; 0x700
    2688:	00000126 	andeq	r0, r0, r6, lsr #2
    268c:	04bca307 	ldrteq	sl, [ip], #775	; 0x307
    2690:	14140000 	ldrne	r0, [r4], #-0
    2694:	0585a807 	streq	sl, [r5, #2055]	; 0x807
    2698:	36150000 	ldrcc	r0, [r5], -r0
    269c:	07000002 	streq	r0, [r0, -r2]
    26a0:	0000bdaa 	andeq	fp, r0, sl, lsr #27
    26a4:	22150000 	andscs	r0, r5, #0
    26a8:	07000002 	streq	r0, [r0, -r2]
    26ac:	0000bdad 	andeq	fp, r0, sp, lsr #27
    26b0:	49160400 	ldmdbmi	r6, {sl}
    26b4:	07004544 	streq	r4, [r0, -r4, asr #10]
    26b8:	000097b0 			; <UNDEFINED> instruction: 0x000097b0
    26bc:	52160800 	andspl	r0, r6, #0, 16
    26c0:	07005254 	smlsdeq	r0, r4, r2, r5
    26c4:	000097b4 			; <UNDEFINED> instruction: 0x000097b4
    26c8:	44160900 	ldrmi	r0, [r6], #-2304	; 0xfffff700
    26cc:	0700434c 	streq	r4, [r0, -ip, asr #6]
    26d0:	000097b8 			; <UNDEFINED> instruction: 0x000097b8
    26d4:	90150a00 	andsls	r0, r5, r0, lsl #20
    26d8:	07000019 	smladeq	r0, r9, r0, r0
    26dc:	00050dbb 			; <UNDEFINED> instruction: 0x00050dbb
    26e0:	46160b00 	ldrmi	r0, [r6], -r0, lsl #22
    26e4:	0700494d 	streq	r4, [r0, -sp, asr #18]
    26e8:	000097be 			; <UNDEFINED> instruction: 0x000097be
    26ec:	03001300 	movweq	r1, #768	; 0x300
    26f0:	00000267 	andeq	r0, r0, r7, ror #4
    26f4:	0528c107 	streq	ip, [r8, #-263]!	; 0xfffffef9
    26f8:	b0170000 	andslt	r0, r7, r0
    26fc:	01000015 	tsteq	r0, r5, lsl r0
    2700:	011b0723 	tsteq	fp, r3, lsr #14
    2704:	22000000 	andcs	r0, r0, #0
    2708:	003a2000 	eorseq	r2, sl, r0
    270c:	9c010000 	stcls	0, cr0, [r1], {-0}
    2710:	000005d8 	ldrdeq	r0, [r0], -r8
    2714:	0014a918 	andseq	sl, r4, r8, lsl r9
    2718:	07230100 	streq	r0, [r3, -r0, lsl #2]!
    271c:	000000bd 	strheq	r0, [r0], -sp
    2720:	186c9102 	stmdane	ip!, {r1, r8, ip, pc}^
    2724:	000013ee 	andeq	r1, r0, lr, ror #7
    2728:	bd072301 	stclt	3, cr2, [r7, #-4]
    272c:	02000000 	andeq	r0, r0, #0
    2730:	87196891 			; <UNDEFINED> instruction: 0x87196891
    2734:	01000014 	tsteq	r0, r4, lsl r0
    2738:	011b0725 	tsteq	fp, r5, lsr #14
    273c:	91020000 	mrsls	r0, (UNDEF: 2)
    2740:	be1a0077 	mrclt	0, 0, r0, cr10, cr7, {3}
    2744:	01000015 	tsteq	r0, r5, lsl r0
    2748:	211406d5 			; <UNDEFINED> instruction: 0x211406d5
    274c:	00ec2000 	rsceq	r2, ip, r0
    2750:	9c010000 	stcls	0, cr0, [r1], {-0}
    2754:	0000060d 	andeq	r0, r0, sp, lsl #12
    2758:	00157a18 	andseq	r7, r5, r8, lsl sl
    275c:	06d50100 	ldrbeq	r0, [r5], r0, lsl #2
    2760:	0000060d 	andeq	r0, r0, sp, lsl #12
    2764:	18749102 	ldmdane	r4!, {r1, r8, ip, pc}^
    2768:	000013bc 			; <UNDEFINED> instruction: 0x000013bc
    276c:	bd06d501 	cfstr32lt	mvfx13, [r6, #-4]
    2770:	02000000 	andeq	r0, r0, #0
    2774:	1b007091 	blne	1e9c0 <startup-0x1ffe1640>
    2778:	00039804 	andeq	r9, r3, r4, lsl #16
    277c:	141c1c00 	ldrne	r1, [ip], #-3072	; 0xfffff400
    2780:	6c010000 	stcvs	0, cr0, [r1], {-0}
    2784:	00011b06 	andeq	r1, r1, r6, lsl #22
    2788:	001f2400 	andseq	r2, pc, r0, lsl #8
    278c:	0001f020 	andeq	pc, r1, r0, lsr #32
    2790:	5b9c0100 	blpl	fe702b98 <dissarmedBit+0xde6fec58>
    2794:	18000006 	stmdane	r0, {r1, r2}
    2798:	0000157a 	andeq	r1, r0, sl, ror r5
    279c:	0d066c01 	stceq	12, cr6, [r6, #-4]
    27a0:	02000006 	andeq	r0, r0, #6
    27a4:	bc186491 	cfldrslt	mvf6, [r8], {145}	; 0x91
    27a8:	01000013 	tsteq	r0, r3, lsl r0
    27ac:	00bd066c 	adcseq	r0, sp, ip, ror #12
    27b0:	91020000 	mrsls	r0, (UNDEF: 2)
    27b4:	148f1960 	strne	r1, [pc], #2400	; 27bc <startup-0x1fffd844>
    27b8:	6e010000 	cdpvs	0, 0, cr0, cr1, cr0, {0}
    27bc:	00011b06 	andeq	r1, r1, r6, lsl #22
    27c0:	6f910200 	svcvs	0x00910200
    27c4:	111f1a00 	tstne	pc, r0, lsl #20
    27c8:	2f010000 	svccs	0x00010000
    27cc:	001eb406 	andseq	fp, lr, r6, lsl #8
    27d0:	00007020 	andeq	r7, r0, r0, lsr #32
    27d4:	9f9c0100 	svcls	0x009c0100
    27d8:	18000006 	stmdane	r0, {r1, r2}
    27dc:	0000157a 	andeq	r1, r0, sl, ror r5
    27e0:	0d062f01 	stceq	15, cr2, [r6, #-4]
    27e4:	02000006 	andeq	r0, r0, #6
    27e8:	47186c91 			; <UNDEFINED> instruction: 0x47186c91
    27ec:	01000014 	tsteq	r0, r4, lsl r0
    27f0:	00bd062f 	adcseq	r0, sp, pc, lsr #12
    27f4:	91020000 	mrsls	r0, (UNDEF: 2)
    27f8:	15341968 	ldrne	r1, [r4, #-2408]!	; 0xfffff698
    27fc:	31010000 	mrscc	r0, (UNDEF: 1)
    2800:	0000bd06 	andeq	fp, r0, r6, lsl #26
    2804:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    2808:	15521d00 	ldrbne	r1, [r2, #-3328]	; 0xfffff300
    280c:	ca010000 	bgt	42814 <startup-0x1ffbd7ec>
    2810:	00010f05 	andeq	r0, r1, r5, lsl #30
    2814:	001dc400 	andseq	ip, sp, r0, lsl #8
    2818:	0000f020 	andeq	pc, r0, r0, lsr #32
    281c:	e79c0100 	ldr	r0, [ip, r0, lsl #2]
    2820:	18000006 	stmdane	r0, {r1, r2}
    2824:	0000157a 	andeq	r1, r0, sl, ror r5
    2828:	0d05ca01 	vstreq	s24, [r5, #-4]
    282c:	02000006 	andeq	r0, r0, #6
    2830:	47186c91 			; <UNDEFINED> instruction: 0x47186c91
    2834:	01000014 	tsteq	r0, r4, lsl r0
    2838:	00bd05ca 	adcseq	r0, sp, sl, asr #11
    283c:	91020000 	mrsls	r0, (UNDEF: 2)
    2840:	148e1968 	strne	r1, [lr], #2408	; 0x968
    2844:	cc010000 	stcgt	0, cr0, [r1], {-0}
    2848:	00010f05 	andeq	r0, r1, r5, lsl #30
    284c:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    2850:	156d1a00 	strbne	r1, [sp, #-2560]!	; 0xfffff600
    2854:	a1010000 	mrsge	r0, (UNDEF: 1)
    2858:	001d8a05 	andseq	r8, sp, r5, lsl #20
    285c:	00003a20 	andeq	r3, r0, r0, lsr #20
    2860:	2b9c0100 	blcs	fe702c68 <dissarmedBit+0xde6fed28>
    2864:	18000007 	stmdane	r0, {r0, r1, r2}
    2868:	0000157a 	andeq	r1, r0, sl, ror r5
    286c:	0d05a101 	stfeqd	f2, [r5, #-4]
    2870:	02000006 	andeq	r0, r0, #6
    2874:	bc187491 	cfldrslt	mvf7, [r8], {145}	; 0x91
    2878:	01000013 	tsteq	r0, r3, lsl r0
    287c:	00bd05a1 	adcseq	r0, sp, r1, lsr #11
    2880:	91020000 	mrsls	r0, (UNDEF: 2)
    2884:	07e71870 			; <UNDEFINED> instruction: 0x07e71870
    2888:	a1010000 	mrsge	r0, (UNDEF: 1)
    288c:	00014205 	andeq	r4, r1, r5, lsl #4
    2890:	6f910200 	svcvs	0x00910200
    2894:	127c1d00 	rsbsne	r1, ip, #0, 26
    2898:	d3010000 	movwle	r0, #4096	; 0x1000
    289c:	00009704 	andeq	r9, r0, r4, lsl #14
    28a0:	001d6400 	andseq	r6, sp, r0, lsl #8
    28a4:	00002620 	andeq	r2, r0, r0, lsr #12
    28a8:	649c0100 	ldrvs	r0, [ip], #256	; 0x100
    28ac:	18000007 	stmdane	r0, {r0, r1, r2}
    28b0:	0000157a 	andeq	r1, r0, sl, ror r5
    28b4:	0d04d301 	stceq	3, cr13, [r4, #-4]
    28b8:	02000006 	andeq	r0, r0, #6
    28bc:	d8196c91 	ldmdale	r9, {r0, r4, r7, sl, fp, sp, lr}
    28c0:	01000020 	tsteq	r0, r0, lsr #32
    28c4:	009704d5 			; <UNDEFINED> instruction: 0x009704d5
    28c8:	91020000 	mrsls	r0, (UNDEF: 2)
    28cc:	f71d0077 			; <UNDEFINED> instruction: 0xf71d0077
    28d0:	01000015 	tsteq	r0, r5, lsl r0
    28d4:	009704be 			; <UNDEFINED> instruction: 0x009704be
    28d8:	1d3e0000 	ldcne	0, cr0, [lr, #-0]
    28dc:	00262000 	eoreq	r2, r6, r0
    28e0:	9c010000 	stcls	0, cr0, [r1], {-0}
    28e4:	0000079d 	muleq	r0, sp, r7
    28e8:	00157a18 	andseq	r7, r5, r8, lsl sl
    28ec:	04be0100 	ldrteq	r0, [lr], #256	; 0x100
    28f0:	0000060d 	andeq	r0, r0, sp, lsl #12
    28f4:	196c9102 	stmdbne	ip!, {r1, r8, ip, pc}^
    28f8:	000020d8 	ldrdeq	r2, [r0], -r8
    28fc:	9704c001 	strls	ip, [r4, -r1]
    2900:	02000000 	andeq	r0, r0, #0
    2904:	1d007791 	stcne	7, cr7, [r0, #-580]	; 0xfffffdbc
    2908:	000012af 	andeq	r1, r0, pc, lsr #5
    290c:	9704a401 	strls	sl, [r4, -r1, lsl #8]
    2910:	10000000 	andne	r0, r0, r0
    2914:	2e20001d 	miacs	acc0, sp, r0
    2918:	01000000 	mrseq	r0, (UNDEF: 0)
    291c:	0007d69c 	muleq	r7, ip, r6
    2920:	157a1800 	ldrbne	r1, [sl, #-2048]!	; 0xfffff800
    2924:	a4010000 	strge	r0, [r1], #-0
    2928:	00060d04 	andeq	r0, r6, r4, lsl #26
    292c:	6c910200 	lfmvs	f0, 4, [r1], {0}
    2930:	00147d19 	andseq	r7, r4, r9, lsl sp
    2934:	04a60100 	strteq	r0, [r6], #256	; 0x100
    2938:	00000097 	muleq	r0, r7, r0
    293c:	00779102 	rsbseq	r9, r7, r2, lsl #2
    2940:	0012cf1d 	andseq	ip, r2, sp, lsl pc
    2944:	04660100 	strbteq	r0, [r6], #-256	; 0xffffff00
    2948:	00000097 	muleq	r0, r7, r0
    294c:	20001cae 	andcs	r1, r0, lr, lsr #25
    2950:	00000062 	andeq	r0, r0, r2, rrx
    2954:	081e9c01 	ldmdaeq	lr, {r0, sl, fp, ip, pc}
    2958:	7a180000 	bvc	602960 <startup-0x1f9fd6a0>
    295c:	01000015 	tsteq	r0, r5, lsl r0
    2960:	060d0466 	streq	r0, [sp], -r6, ror #8
    2964:	91020000 	mrsls	r0, (UNDEF: 2)
    2968:	1468196c 	strbtne	r1, [r8], #-2412	; 0xfffff694
    296c:	68010000 	stmdavs	r1, {}	; <UNPREDICTABLE>
    2970:	0000bd04 	andeq	fp, r0, r4, lsl #26
    2974:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    2978:	00163019 	andseq	r3, r6, r9, lsl r0
    297c:	04690100 	strbteq	r0, [r9], #-256	; 0xffffff00
    2980:	00000097 	muleq	r0, r7, r0
    2984:	00739102 	rsbseq	r9, r3, r2, lsl #2
    2988:	0013e41d 	andseq	lr, r3, sp, lsl r4
    298c:	044c0100 	strbeq	r0, [ip], #-256	; 0xffffff00
    2990:	00000097 	muleq	r0, r7, r0
    2994:	20001c6c 	andcs	r1, r0, ip, ror #24
    2998:	00000042 	andeq	r0, r0, r2, asr #32
    299c:	08579c01 	ldmdaeq	r7, {r0, sl, fp, ip, pc}^
    29a0:	7a180000 	bvc	6029a8 <startup-0x1f9fd658>
    29a4:	01000015 	tsteq	r0, r5, lsl r0
    29a8:	060d044c 	streq	r0, [sp], -ip, asr #8
    29ac:	91020000 	mrsls	r0, (UNDEF: 2)
    29b0:	11cf196c 	bicne	r1, pc, ip, ror #18
    29b4:	4e010000 	cdpmi	0, 0, cr0, cr1, cr0, {0}
    29b8:	00009704 	andeq	r9, r0, r4, lsl #14
    29bc:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    29c0:	134a1d00 	movtne	r1, #44288	; 0xad00
    29c4:	fa010000 	blx	429cc <startup-0x1ffbd634>
    29c8:	00009703 	andeq	r9, r0, r3, lsl #14
    29cc:	001b4800 	andseq	r4, fp, r0, lsl #16
    29d0:	00012420 	andeq	r2, r1, r0, lsr #8
    29d4:	ae9c0100 	fmlgee	f0, f4, f0
    29d8:	18000008 	stmdane	r0, {r3}
    29dc:	0000157a 	andeq	r1, r0, sl, ror r5
    29e0:	0d03fa01 	vstreq	s30, [r3, #-4]
    29e4:	02000006 	andeq	r0, r0, #6
    29e8:	1d186c91 	ldcne	12, cr6, [r8, #-580]	; 0xfffffdbc
    29ec:	01000015 	tsteq	r0, r5, lsl r0
    29f0:	009703fa 			; <UNDEFINED> instruction: 0x009703fa
    29f4:	91020000 	mrsls	r0, (UNDEF: 2)
    29f8:	0741196b 	strbeq	r1, [r1, -fp, ror #18]
    29fc:	fc010000 	stc2	0, cr0, [r1], {-0}
    2a00:	00009703 	andeq	r9, r0, r3, lsl #14
    2a04:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    2a08:	00136319 	andseq	r6, r3, r9, lsl r3
    2a0c:	03ff0100 	mvnseq	r0, #0, 2
    2a10:	000000bd 	strheq	r0, [r0], -sp
    2a14:	00709102 	rsbseq	r9, r0, r2, lsl #2
    2a18:	0013191d 	andseq	r1, r3, sp, lsl r9
    2a1c:	03c80100 	biceq	r0, r8, #0, 2
    2a20:	00000097 	muleq	r0, r7, r0
    2a24:	20001ae8 	andcs	r1, r0, r8, ror #21
    2a28:	00000060 	andeq	r0, r0, r0, rrx
    2a2c:	08f69c01 	ldmeq	r6!, {r0, sl, fp, ip, pc}^
    2a30:	7a180000 	bvc	602a38 <startup-0x1f9fd5c8>
    2a34:	01000015 	tsteq	r0, r5, lsl r0
    2a38:	060d03c8 	streq	r0, [sp], -r8, asr #7
    2a3c:	91020000 	mrsls	r0, (UNDEF: 2)
    2a40:	1472186c 	ldrbtne	r1, [r2], #-2156	; 0xfffff794
    2a44:	c8010000 	stmdagt	r1, {}	; <UNPREDICTABLE>
    2a48:	00009703 	andeq	r9, r0, r3, lsl #14
    2a4c:	6b910200 	blvs	fe443254 <dissarmedBit+0xde43f314>
    2a50:	00121119 	andseq	r1, r2, r9, lsl r1
    2a54:	03ca0100 	biceq	r0, sl, #0, 2
    2a58:	00000097 	muleq	r0, r7, r0
    2a5c:	00779102 	rsbseq	r9, r7, r2, lsl #2
    2a60:	0011f01a 	andseq	pc, r1, sl, lsl r0	; <UNPREDICTABLE>
    2a64:	03b00100 	movseq	r0, #0, 2
    2a68:	20001ab0 			; <UNDEFINED> instruction: 0x20001ab0
    2a6c:	00000038 	andeq	r0, r0, r8, lsr r0
    2a70:	092b9c01 	stmdbeq	fp!, {r0, sl, fp, ip, pc}
    2a74:	7a180000 	bvc	602a7c <startup-0x1f9fd584>
    2a78:	01000015 	tsteq	r0, r5, lsl r0
    2a7c:	060d03b0 			; <UNDEFINED> instruction: 0x060d03b0
    2a80:	91020000 	mrsls	r0, (UNDEF: 2)
    2a84:	14721874 	ldrbtne	r1, [r2], #-2164	; 0xfffff78c
    2a88:	b0010000 	andlt	r0, r1, r0
    2a8c:	00009703 	andeq	r9, r0, r3, lsl #14
    2a90:	73910200 	orrsvc	r0, r1, #0, 4
    2a94:	15941a00 	ldrne	r1, [r4, #2560]	; 0xa00
    2a98:	7e010000 	cdpvc	0, 0, cr0, cr1, cr0, {0}
    2a9c:	00190603 	andseq	r0, r9, r3, lsl #12
    2aa0:	0001aa20 	andeq	sl, r1, r0, lsr #20
    2aa4:	6f9c0100 	svcvs	0x009c0100
    2aa8:	18000009 	stmdane	r0, {r0, r3}
    2aac:	0000157a 	andeq	r1, r0, sl, ror r5
    2ab0:	0d037e01 	stceq	14, cr7, [r3, #-4]
    2ab4:	02000006 	andeq	r0, r0, #6
    2ab8:	72187491 	andsvc	r7, r8, #-1862270976	; 0x91000000
    2abc:	01000014 	tsteq	r0, r4, lsl r0
    2ac0:	0097037e 	addseq	r0, r7, lr, ror r3
    2ac4:	91020000 	mrsls	r0, (UNDEF: 2)
    2ac8:	112d1873 			; <UNDEFINED> instruction: 0x112d1873
    2acc:	7e010000 	cdpvc	0, 0, cr0, cr1, cr0, {0}
    2ad0:	00096f03 	andeq	r6, r9, r3, lsl #30
    2ad4:	6c910200 	lfmvs	f0, 4, [r1], {0}
    2ad8:	85041b00 	strhi	r1, [r4, #-2816]	; 0xfffff500
    2adc:	1a000005 	bne	2af8 <startup-0x1fffd508>
    2ae0:	000012df 	ldrdeq	r1, [r0], -pc	; <UNPREDICTABLE>
    2ae4:	b0034e01 	andlt	r4, r3, r1, lsl #28
    2ae8:	56200018 			; <UNDEFINED> instruction: 0x56200018
    2aec:	01000000 	mrseq	r0, (UNDEF: 0)
    2af0:	0009aa9c 	muleq	r9, ip, sl
    2af4:	157a1800 	ldrbne	r1, [sl, #-2048]!	; 0xfffff800
    2af8:	4e010000 	cdpmi	0, 0, cr0, cr1, cr0, {0}
    2afc:	00060d03 	andeq	r0, r6, r3, lsl #26
    2b00:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    2b04:	0015a818 	andseq	sl, r5, r8, lsl r8
    2b08:	034e0100 	movteq	r0, #57600	; 0xe100
    2b0c:	00000097 	muleq	r0, r7, r0
    2b10:	00739102 	rsbseq	r9, r3, r2, lsl #2
    2b14:	0012361d 	andseq	r3, r2, sp, lsl r6
    2b18:	03170100 	tsteq	r7, #0, 2
    2b1c:	00000097 	muleq	r0, r7, r0
    2b20:	200017da 	ldrdcs	r1, [r0], -sl
    2b24:	000000d6 	ldrdeq	r0, [r0], -r6
    2b28:	09f29c01 	ldmibeq	r2!, {r0, sl, fp, ip, pc}^
    2b2c:	7a180000 	bvc	602b34 <startup-0x1f9fd4cc>
    2b30:	01000015 	tsteq	r0, r5, lsl r0
    2b34:	060d0317 			; <UNDEFINED> instruction: 0x060d0317
    2b38:	91020000 	mrsls	r0, (UNDEF: 2)
    2b3c:	15a0186c 	strne	r1, [r0, #2156]!	; 0x86c
    2b40:	17010000 	strne	r0, [r1, -r0]
    2b44:	00009703 	andeq	r9, r0, r3, lsl #14
    2b48:	6b910200 	blvs	fe443350 <dissarmedBit+0xde43f410>
    2b4c:	0012a419 	andseq	sl, r2, r9, lsl r4
    2b50:	03190100 	tsteq	r9, #0, 2
    2b54:	000000bd 	strheq	r0, [r0], -sp
    2b58:	00749102 	rsbseq	r9, r4, r2, lsl #2
    2b5c:	0013a51d 	andseq	sl, r3, sp, lsl r5
    2b60:	02ce0100 	sbceq	r0, lr, #0, 2
    2b64:	00000097 	muleq	r0, r7, r0
    2b68:	200015f8 	strdcs	r1, [r0], -r8
    2b6c:	000001e2 	andeq	r0, r0, r2, ror #3
    2b70:	0a3a9c01 	beq	ea9b7c <startup-0x1f156484>
    2b74:	7a180000 	bvc	602b7c <startup-0x1f9fd484>
    2b78:	01000015 	tsteq	r0, r5, lsl r0
    2b7c:	060d02ce 	streq	r0, [sp], -lr, asr #5
    2b80:	91020000 	mrsls	r0, (UNDEF: 2)
    2b84:	130f1864 	movwne	r1, #63588	; 0xf864
    2b88:	ce010000 	cdpgt	0, 0, cr0, cr1, cr0, {0}
    2b8c:	000a3a02 	andeq	r3, sl, r2, lsl #20
    2b90:	60910200 	addsvs	r0, r1, r0, lsl #4
    2b94:	0015dd19 	andseq	sp, r5, r9, lsl sp
    2b98:	02d00100 	sbcseq	r0, r0, #0, 2
    2b9c:	00000097 	muleq	r0, r7, r0
    2ba0:	006f9102 	rsbeq	r9, pc, r2, lsl #2
    2ba4:	051d041b 	ldreq	r0, [sp, #-1051]	; 0xfffffbe5
    2ba8:	001a0000 	andseq	r0, sl, r0
    2bac:	01000012 	tsteq	r0, r2, lsl r0
    2bb0:	15300297 	ldrne	r0, [r0, #-663]!	; 0xfffffd69
    2bb4:	00c82000 	sbceq	r2, r8, r0
    2bb8:	9c010000 	stcls	0, cr0, [r1], {-0}
    2bbc:	00000a75 	andeq	r0, r0, r5, ror sl
    2bc0:	00157a18 	andseq	r7, r5, r8, lsl sl
    2bc4:	02970100 	addseq	r0, r7, #0, 2
    2bc8:	0000060d 	andeq	r0, r0, sp, lsl #12
    2bcc:	18749102 	ldmdane	r4!, {r1, r8, ip, pc}^
    2bd0:	000007e7 	andeq	r0, r0, r7, ror #15
    2bd4:	42029701 	andmi	r9, r2, #262144	; 0x40000
    2bd8:	02000001 	andeq	r0, r0, #1
    2bdc:	1a007391 	bne	1fa28 <startup-0x1ffe05d8>
    2be0:	000014f0 	strdeq	r1, [r0], -r0
    2be4:	f0027801 			; <UNDEFINED> instruction: 0xf0027801
    2be8:	40200014 	eormi	r0, r0, r4, lsl r0
    2bec:	01000000 	mrseq	r0, (UNDEF: 0)
    2bf0:	000aaa9c 	muleq	sl, ip, sl
    2bf4:	157a1800 	ldrbne	r1, [sl, #-2048]!	; 0xfffff800
    2bf8:	78010000 	stmdavc	r1, {}	; <UNPREDICTABLE>
    2bfc:	00060d02 	andeq	r0, r6, r2, lsl #26
    2c00:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    2c04:	0007e718 	andeq	lr, r7, r8, lsl r7
    2c08:	02780100 	rsbseq	r0, r8, #0, 2
    2c0c:	00000142 	andeq	r0, r0, r2, asr #2
    2c10:	00739102 	rsbseq	r9, r3, r2, lsl #2
    2c14:	00132c1a 	andseq	r2, r3, sl, lsl ip
    2c18:	025e0100 	subseq	r0, lr, #0, 2
    2c1c:	2000147e 	andcs	r1, r0, lr, ror r4
    2c20:	00000072 	andeq	r0, r0, r2, ror r0
    2c24:	0ad09c01 	beq	ff429c30 <dissarmedBit+0xdf425cf0>
    2c28:	59180000 	ldmdbpl	r8, {}	; <UNPREDICTABLE>
    2c2c:	01000012 	tsteq	r0, r2, lsl r0
    2c30:	0097025e 	addseq	r0, r7, lr, asr r2
    2c34:	91020000 	mrsls	r0, (UNDEF: 2)
    2c38:	b41a0077 	ldrlt	r0, [sl], #-119	; 0xffffff89
    2c3c:	01000011 	tsteq	r0, r1, lsl r0
    2c40:	142c021c 	strtne	r0, [ip], #-540	; 0xfffffde4
    2c44:	00522000 	subseq	r2, r2, r0
    2c48:	9c010000 	stcls	0, cr0, [r1], {-0}
    2c4c:	00000af6 	strdeq	r0, [r0], -r6
    2c50:	0012f218 	andseq	pc, r2, r8, lsl r2	; <UNPREDICTABLE>
    2c54:	021c0100 	andseq	r0, ip, #0, 2
    2c58:	00000af6 	strdeq	r0, [r0], -r6
    2c5c:	00749102 	rsbseq	r9, r4, r2, lsl #2
    2c60:	0431041b 	ldrteq	r0, [r1], #-1051	; 0xfffffbe5
    2c64:	3d1a0000 	ldccc	0, cr0, [sl, #-0]
    2c68:	01000016 	tsteq	r0, r6, lsl r0
    2c6c:	127c01c0 	rsbsne	r0, ip, #192, 2	; 0x30
    2c70:	01b02000 	movseq	r2, r0
    2c74:	9c010000 	stcls	0, cr0, [r1], {-0}
    2c78:	00000b31 	andeq	r0, r0, r1, lsr fp
    2c7c:	0011db18 	andseq	sp, r1, r8, lsl fp
    2c80:	01c00100 	biceq	r0, r0, r0, lsl #2
    2c84:	00000b31 	andeq	r0, r0, r1, lsr fp
    2c88:	19649102 	stmdbne	r4!, {r1, r8, ip, pc}^
    2c8c:	00001612 	andeq	r1, r0, r2, lsl r6
    2c90:	bd01c201 	sfmlt	f4, 1, [r1, #-4]
    2c94:	02000000 	andeq	r0, r0, #0
    2c98:	1b006c91 	blne	1dee4 <startup-0x1ffe211c>
    2c9c:	0004b104 	andeq	fp, r4, r4, lsl #2
    2ca0:	13c31e00 	bicne	r1, r3, #0, 28
    2ca4:	d8010000 	stmdale	r1, {}	; <UNPREDICTABLE>
    2ca8:	00000097 	muleq	r0, r7, r0
    2cac:	200010b8 	strhcs	r1, [r0], -r8
    2cb0:	000001c4 	andeq	r0, r0, r4, asr #3
    2cb4:	0b899c01 	bleq	fe269cc0 <dissarmedBit+0xde265d80>
    2cb8:	7a1f0000 	bvc	7c2cc0 <startup-0x1f83d340>
    2cbc:	01000015 	tsteq	r0, r5, lsl r0
    2cc0:	00060dd8 	ldrdeq	r0, [r6], -r8
    2cc4:	6c910200 	lfmvs	f0, 4, [r1], {0}
    2cc8:	0012f21f 	andseq	pc, r2, pc, lsl r2	; <UNPREDICTABLE>
    2ccc:	f6d80100 			; <UNDEFINED> instruction: 0xf6d80100
    2cd0:	0200000a 	andeq	r0, r0, #10
    2cd4:	c4206891 	strtgt	r6, [r0], #-2193	; 0xfffff76f
    2cd8:	01000012 	tsteq	r0, r2, lsl r0
    2cdc:	000097da 	ldrdeq	r9, [r0], -sl
    2ce0:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    2ce4:	00165520 	andseq	r5, r6, r0, lsr #10
    2ce8:	bddb0100 	ldflte	f0, [fp]
    2cec:	02000000 	andeq	r0, r0, #0
    2cf0:	21007091 	swpcs	r7, r1, [r0]
    2cf4:	00001114 	andeq	r1, r0, r4, lsl r1
    2cf8:	1068a701 	rsbne	sl, r8, r1, lsl #14
    2cfc:	00502000 	subseq	r2, r0, r0
    2d00:	9c010000 	stcls	0, cr0, [r1], {-0}
    2d04:	00157a1f 	andseq	r7, r5, pc, lsl sl
    2d08:	0da70100 	stfeqs	f0, [r7]
    2d0c:	02000006 	andeq	r0, r0, #6
    2d10:	00007491 	muleq	r0, r1, r4
    2d14:	000010dc 	ldrdeq	r1, [r0], -ip
    2d18:	0c6a0004 	stcleq	0, cr0, [sl], #-16
    2d1c:	01040000 	mrseq	r0, (UNDEF: 4)
    2d20:	00000051 	andeq	r0, r0, r1, asr r0
    2d24:	00175b0c 	andseq	r5, r7, ip, lsl #22
    2d28:	0001df00 	andeq	sp, r1, r0, lsl #30
    2d2c:	00223c00 	eoreq	r3, r2, r0, lsl #24
    2d30:	00078820 	andeq	r8, r7, r0, lsr #16
    2d34:	0012f900 	andseq	pc, r2, r0, lsl #18
    2d38:	0d3c0200 	lfmeq	f0, 4, [ip, #-0]
    2d3c:	01050000 	mrseq	r0, (UNDEF: 5)
    2d40:	00000253 	andeq	r0, r0, r3, asr r2
    2d44:	0253c803 	subseq	ip, r3, #196608	; 0x30000
    2d48:	d8030000 	stmdale	r3, {}	; <UNPREDICTABLE>
    2d4c:	7200000e 	andvc	r0, r0, #14
    2d50:	000bea03 	andeq	lr, fp, r3, lsl #20
    2d54:	91037400 	tstls	r3, r0, lsl #8
    2d58:	7500000b 	strvc	r0, [r0, #-11]
    2d5c:	000cb003 	andeq	fp, ip, r3
    2d60:	1a037600 	bne	e0568 <startup-0x1ff1fa98>
    2d64:	7b00000c 	blvc	2d9c <startup-0x1fffd264>
    2d68:	000f0b03 	andeq	r0, pc, r3, lsl #22
    2d6c:	72037c00 	andvc	r7, r3, #0, 24
    2d70:	7e00000b 	cdpvc	0, 0, cr0, cr0, cr11, {0}
    2d74:	000ca303 	andeq	sl, ip, r3, lsl #6
    2d78:	96047f00 	strls	r7, [r4], -r0, lsl #30
    2d7c:	0000000a 	andeq	r0, r0, sl
    2d80:	000a1104 	andeq	r1, sl, r4, lsl #2
    2d84:	fb040100 	blx	10318e <startup-0x1fefce72>
    2d88:	0200000e 	andeq	r0, r0, #14
    2d8c:	000a8804 	andeq	r8, sl, r4, lsl #16
    2d90:	4d040300 	stcmi	3, cr0, [r4, #-0]
    2d94:	0400000e 	streq	r0, [r0], #-14
    2d98:	000fc004 	andeq	ip, pc, r4
    2d9c:	45040500 	strmi	r0, [r4, #-1280]	; 0xfffffb00
    2da0:	0600000f 	streq	r0, [r0], -pc
    2da4:	000fe404 	andeq	lr, pc, r4, lsl #8
    2da8:	42040700 	andmi	r0, r4, #0, 14
    2dac:	0800000e 	stmdaeq	r0, {r1, r2, r3}
    2db0:	000d8104 	andeq	r8, sp, r4, lsl #2
    2db4:	06040900 	streq	r0, [r4], -r0, lsl #18
    2db8:	0a00000e 	beq	2df8 <startup-0x1fffd208>
    2dbc:	000fef04 	andeq	lr, pc, r4, lsl #30
    2dc0:	5e040b00 	vmlapl.f64	d0, d4, d0
    2dc4:	0c00000c 	stceq	0, cr0, [r0], {12}
    2dc8:	000d9604 	andeq	r9, sp, r4, lsl #12
    2dcc:	c6040d00 	strgt	r0, [r4], -r0, lsl #26
    2dd0:	0e00000b 	cdpeq	0, 0, cr0, cr0, cr11, {0}
    2dd4:	000d5904 	andeq	r5, sp, r4, lsl #18
    2dd8:	0e040f00 	cdpeq	15, 0, cr0, cr4, cr0, {0}
    2ddc:	1000000b 	andne	r0, r0, fp
    2de0:	000bd804 	andeq	sp, fp, r4, lsl #16
    2de4:	70041100 	andvc	r1, r4, r0, lsl #2
    2de8:	1200000f 	andne	r0, r0, #15
    2dec:	000c3804 	andeq	r3, ip, r4, lsl #16
    2df0:	03041300 	movweq	r1, #17152	; 0x4300
    2df4:	1400000a 	strne	r0, [r0], #-10
    2df8:	000a2804 	andeq	r2, sl, r4, lsl #16
    2dfc:	a4041500 	strge	r1, [r4], #-1280	; 0xfffffb00
    2e00:	1600000f 	strne	r0, [r0], -pc
    2e04:	000b2004 	andeq	r2, fp, r4
    2e08:	f3041700 	vabd.u8	d1, d4, d0
    2e0c:	1800000d 	stmdane	r0, {r0, r2, r3}
    2e10:	000d2e04 	andeq	r2, sp, r4, lsl #28
    2e14:	2a041900 	bcs	10921c <startup-0x1fef6de4>
    2e18:	1a00000e 	bne	2e58 <startup-0x1fffd1a8>
    2e1c:	000c0d04 	andeq	r0, ip, r4, lsl #26
    2e20:	3b041b00 	blcc	109a28 <startup-0x1fef65d8>
    2e24:	1c00000f 	stcne	0, cr0, [r0], {15}
    2e28:	000fda04 	andeq	sp, pc, r4, lsl #20
    2e2c:	7e041d00 	cdpvc	13, 0, cr1, cr4, cr0, {0}
    2e30:	1e00000a 	cdpne	0, 0, cr0, cr0, cr10, {0}
    2e34:	000a4304 	andeq	r4, sl, r4, lsl #6
    2e38:	63041f00 	movwvs	r1, #20224	; 0x4f00
    2e3c:	2000000f 	andcs	r0, r0, pc
    2e40:	000af904 	andeq	pc, sl, r4, lsl #18
    2e44:	71042100 	mrsvc	r2, (UNDEF: 20)
    2e48:	2200000a 	andcs	r0, r0, #10
    2e4c:	000c5404 	andeq	r5, ip, r4, lsl #8
    2e50:	8c042300 	stchi	3, cr2, [r4], {-0}
    2e54:	2400000d 	strcs	r0, [r0], #-13
    2e58:	000aaa04 	andeq	sl, sl, r4, lsl #20
    2e5c:	62042500 	andvs	r2, r4, #0, 10
    2e60:	2600000e 	strcs	r0, [r0], -lr
    2e64:	000f2f04 	andeq	r2, pc, r4, lsl #30
    2e68:	45042700 	strmi	r2, [r4, #-1792]	; 0xfffff900
    2e6c:	2800000c 	stmdacs	r0, {r2, r3}
    2e70:	000a6204 	andeq	r6, sl, r4, lsl #4
    2e74:	61042900 	tstvs	r4, r0, lsl #18
    2e78:	2a00000b 	bcs	2eac <startup-0x1fffd154>
    2e7c:	000c8f04 	andeq	r8, ip, r4, lsl #30
    2e80:	7e042b00 	vmlavc.f64	d2, d4, d0
    2e84:	2c00000b 	stccs	0, cr0, [r0], {11}
    2e88:	000cc004 	andeq	ip, ip, r4
    2e8c:	ae042d00 	cdpge	13, 0, cr2, cr4, cr0, {0}
    2e90:	2e00000e 	cdpcs	0, 0, cr0, cr0, cr14, {0}
    2e94:	000e9204 	andeq	r9, lr, r4, lsl #4
    2e98:	e9042f00 	stmdb	r4, {r8, r9, sl, fp, sp}
    2e9c:	3000000d 	andcc	r0, r0, sp
    2ea0:	000aa004 	andeq	sl, sl, r4
    2ea4:	77043100 	strvc	r3, [r4, -r0, lsl #2]
    2ea8:	3200000d 	andcc	r0, r0, #13
    2eac:	000dcd04 	andeq	ip, sp, r4, lsl #26
    2eb0:	56043300 	strpl	r3, [r4], -r0, lsl #6
    2eb4:	3400000b 	strcc	r0, [r0], #-11
    2eb8:	000e1f04 	andeq	r1, lr, r4, lsl #30
    2ebc:	48043500 	stmdami	r4, {r8, sl, ip, sp}
    2ec0:	3600000b 	strcc	r0, [r0], -fp
    2ec4:	000ebb04 	andeq	fp, lr, r4, lsl #22
    2ec8:	1d043700 	stcne	7, cr3, [r4, #-0]
    2ecc:	3800000f 	stmdacc	r0, {r0, r1, r2, r3}
    2ed0:	000f7904 	andeq	r7, pc, r4, lsl #18
    2ed4:	26043900 	strcs	r3, [r4], -r0, lsl #18
    2ed8:	3a00000c 	bcc	2f10 <startup-0x1fffd0f0>
    2edc:	000d4704 	andeq	r4, sp, r4, lsl #14
    2ee0:	d7043b00 	strle	r3, [r4, -r0, lsl #22]
    2ee4:	3c00000d 	stccc	0, cr0, [r0], {13}
    2ee8:	000cd804 	andeq	sp, ip, r4, lsl #16
    2eec:	3a043d00 	bcc	1122f4 <startup-0x1feedd0c>
    2ef0:	3e00000b 	cdpcc	0, 0, cr0, cr0, cr11, {0}
    2ef4:	000da804 	andeq	sl, sp, r4, lsl #16
    2ef8:	1a043f00 	bne	112b00 <startup-0x1feed500>
    2efc:	4000000a 	andmi	r0, r0, sl
    2f00:	000c8104 	andeq	r8, ip, r4, lsl #2
    2f04:	b2044100 	andlt	r4, r4, #0, 2
    2f08:	4200000f 	andmi	r0, r0, #15
    2f0c:	000db504 	andeq	fp, sp, r4, lsl #10
    2f10:	50044300 	andpl	r4, r4, r0, lsl #6
    2f14:	4400000a 	strmi	r0, [r0], #-10
    2f18:	000ae704 	andeq	lr, sl, r4, lsl #14
    2f1c:	aa044500 	bge	114324 <startup-0x1feebcdc>
    2f20:	4600000b 	strmi	r0, [r0], -fp
    2f24:	000d6b04 	andeq	r6, sp, r4, lsl #22
    2f28:	00044700 	andeq	r4, r4, r0, lsl #14
    2f2c:	4800000c 	stmdami	r0, {r2, r3}
    2f30:	000a3604 	andeq	r3, sl, r4, lsl #12
    2f34:	7e044900 	vmlavc.f16	s8, s8, s0	; <UNPREDICTABLE>
    2f38:	4a00000e 	bmi	2f78 <startup-0x1fffd088>
    2f3c:	000ec504 	andeq	ip, lr, r4, lsl #10
    2f40:	c9044b00 	stmdbgt	r4, {r8, r9, fp, lr}
    2f44:	4c00000f 	stcmi	0, cr0, [r0], {15}
    2f48:	000dc104 	andeq	ip, sp, r4, lsl #2
    2f4c:	bc044d00 	stclt	13, cr4, [r4], {-0}
    2f50:	4e00000b 	cdpmi	0, 0, cr0, cr0, cr11, {0}
    2f54:	000ea404 	andeq	sl, lr, r4, lsl #8
    2f58:	11044f00 	tstne	r4, r0, lsl #30
    2f5c:	5000000e 	andpl	r0, r0, lr
    2f60:	000f5a04 	andeq	r5, pc, r4, lsl #20
    2f64:	05005100 	streq	r5, [r0, #-256]	; 0xffffff00
    2f68:	011a0601 	tsteq	sl, r1, lsl #12
    2f6c:	58060000 	stmdapl	r6, {}	; <UNPREDICTABLE>
    2f70:	0300000e 	movweq	r0, #14
    2f74:	0025032f 	eoreq	r0, r5, pc, lsr #6
    2f78:	0a070000 	beq	1c2f80 <startup-0x1fe3d080>
    2f7c:	04000000 	streq	r0, [r0], #-0
    2f80:	0002712b 	andeq	r7, r2, fp, lsr #2
    2f84:	08010500 	stmdaeq	r1, {r8, sl}
    2f88:	00000118 	andeq	r0, r0, r8, lsl r1
    2f8c:	3c050205 	sfmcc	f0, 4, [r5], {5}
    2f90:	07000000 	streq	r0, [r0, -r0]
    2f94:	000002b8 			; <UNDEFINED> instruction: 0x000002b8
    2f98:	028a3904 	addeq	r3, sl, #4, 18	; 0x10000
    2f9c:	02050000 	andeq	r0, r5, #0
    2fa0:	00028107 	andeq	r8, r2, r7, lsl #2
    2fa4:	002b0700 	eoreq	r0, fp, r0, lsl #14
    2fa8:	4d040000 	stcmi	0, cr0, [r4, #-0]
    2fac:	0000029c 	muleq	r0, ip, r2
    2fb0:	2d050405 	cfstrscs	mvf0, [r5, #-20]	; 0xffffffec
    2fb4:	07000002 	streq	r0, [r0, -r2]
    2fb8:	00000163 	andeq	r0, r0, r3, ror #2
    2fbc:	02ae4f04 	adceq	r4, lr, #4, 30
    2fc0:	04050000 	streq	r0, [r5], #-0
    2fc4:	00010607 	andeq	r0, r1, r7, lsl #12
    2fc8:	05080500 	streq	r0, [r8, #-1280]	; 0xfffffb00
    2fcc:	00000228 	andeq	r0, r0, r8, lsr #4
    2fd0:	01070805 	tsteq	r7, r5, lsl #16
    2fd4:	08000001 	stmdaeq	r0, {r0}
    2fd8:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    2fdc:	04050074 	streq	r0, [r5], #-116	; 0xffffff8c
    2fe0:	00010b07 	andeq	r0, r1, r7, lsl #22
    2fe4:	000c0700 	andeq	r0, ip, r0, lsl #14
    2fe8:	18050000 	stmdane	r5, {}	; <UNPREDICTABLE>
    2fec:	00000266 	andeq	r0, r0, r6, ror #4
    2ff0:	0002d109 	andeq	sp, r2, r9, lsl #2
    2ff4:	02ba0700 	adcseq	r0, sl, #0, 14
    2ff8:	24050000 	strcs	r0, [r5], #-0
    2ffc:	0000027f 	andeq	r0, r0, pc, ror r2
    3000:	0002e109 	andeq	lr, r2, r9, lsl #2
    3004:	002d0700 	eoreq	r0, sp, r0, lsl #14
    3008:	2c050000 	stccs	0, cr0, [r5], {-0}
    300c:	00000291 	muleq	r0, r1, r2
    3010:	0002f109 	andeq	pc, r2, r9, lsl #2
    3014:	01650700 	cmneq	r5, r0, lsl #14
    3018:	30050000 	andcc	r0, r5, r0
    301c:	000002a3 	andeq	r0, r0, r3, lsr #5
    3020:	00030109 	andeq	r0, r3, r9, lsl #2
    3024:	030c0a00 	movweq	r0, #51712	; 0xca00
    3028:	040b0000 	streq	r0, [fp], #-0
    302c:	01a0010e 	lsleq	r0, lr, #2
    3030:	000003d2 	ldrdeq	r0, [r0], -r2
    3034:	0007d90c 	andeq	sp, r7, ip, lsl #18
    3038:	01a20100 			; <UNDEFINED> instruction: 0x01a20100
    303c:	000003e2 	andeq	r0, r0, r2, ror #7
    3040:	08de0c00 	ldmeq	lr, {sl, fp}^
    3044:	a3010000 	movwge	r0, #4096	; 0x1000
    3048:	0003e701 	andeq	lr, r3, r1, lsl #14
    304c:	440c2000 	strmi	r2, [ip], #-0
    3050:	01000008 	tsteq	r0, r8
    3054:	03e201a4 	mvneq	r0, #164, 2	; 0x29
    3058:	0c800000 	stceq	0, cr0, [r0], {0}
    305c:	000007fa 	strdeq	r0, [r0], -sl
    3060:	e701a501 	str	sl, [r1, -r1, lsl #10]
    3064:	a0000003 	andge	r0, r0, r3
    3068:	00089f0d 	andeq	r9, r8, sp, lsl #30
    306c:	01a60100 			; <UNDEFINED> instruction: 0x01a60100
    3070:	000003e2 	andeq	r0, r0, r2, ror #7
    3074:	e80d0100 	stmda	sp, {r8}
    3078:	01000008 	tsteq	r0, r8
    307c:	03e701a7 	mvneq	r0, #-1073741783	; 0xc0000029
    3080:	01200000 			; <UNDEFINED> instruction: 0x01200000
    3084:	0008330d 	andeq	r3, r8, sp, lsl #6
    3088:	01a80100 			; <UNDEFINED> instruction: 0x01a80100
    308c:	000003e2 	andeq	r0, r0, r2, ror #7
    3090:	f20d0180 	vrhadd.s8	d0, d29, d0
    3094:	01000008 	tsteq	r0, r8
    3098:	03e701a9 	mvneq	r0, #1073741866	; 0x4000002a
    309c:	01a00000 	moveq	r0, r0
    30a0:	00075e0d 	andeq	r5, r7, sp, lsl #28
    30a4:	01aa0100 			; <UNDEFINED> instruction: 0x01aa0100
    30a8:	000003e2 	andeq	r0, r0, r2, ror #7
    30ac:	fc0d0200 	stc2	2, cr0, [sp], {-0}
    30b0:	01000008 	tsteq	r0, r8
    30b4:	03f701ab 	mvnseq	r0, #-1073741782	; 0xc000002a
    30b8:	02200000 	eoreq	r0, r0, #0
    30bc:	0050490e 	subseq	r4, r0, lr, lsl #18
    30c0:	1701ac01 	strne	sl, [r1, -r1, lsl #24]
    30c4:	00000004 	andeq	r0, r0, r4
    30c8:	09060d03 	stmdbeq	r6, {r0, r1, r8, sl, fp}
    30cc:	ad010000 	stcge	0, cr0, [r1, #-0]
    30d0:	00041c01 	andeq	r1, r4, r1, lsl #24
    30d4:	0d03f000 	stceq	0, cr15, [r3, #-0]
    30d8:	000007f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    30dc:	0c01ae01 	stceq	14, cr10, [r1], {1}
    30e0:	00000003 	andeq	r0, r0, r3
    30e4:	0c0f000e 	stceq	0, cr0, [pc], {14}
    30e8:	e2000003 	and	r0, r0, #3
    30ec:	10000003 	andne	r0, r0, r3
    30f0:	000002ca 	andeq	r0, r0, sl, asr #5
    30f4:	d2090007 	andle	r0, r9, #7
    30f8:	0f000003 	svceq	0x00000003
    30fc:	00000301 	andeq	r0, r0, r1, lsl #6
    3100:	000003f7 	strdeq	r0, [r0], -r7
    3104:	0002ca10 	andeq	ip, r2, r0, lsl sl
    3108:	0f001700 	svceq	0x00001700
    310c:	00000301 	andeq	r0, r0, r1, lsl #6
    3110:	00000407 	andeq	r0, r0, r7, lsl #8
    3114:	0002ca10 	andeq	ip, r2, r0, lsl sl
    3118:	0f003700 	svceq	0x00003700
    311c:	000002dc 	ldrdeq	r0, [r0], -ip
    3120:	00000417 	andeq	r0, r0, r7, lsl r4
    3124:	0002ca10 	andeq	ip, r2, r0, lsl sl
    3128:	0900ef00 	stmdbeq	r0, {r8, r9, sl, fp, sp, lr, pc}
    312c:	00000407 	andeq	r0, r0, r7, lsl #8
    3130:	0003010f 	andeq	r0, r3, pc, lsl #2
    3134:	00042d00 	andeq	r2, r4, r0, lsl #26
    3138:	02ca1100 	sbceq	r1, sl, #0, 2
    313c:	02830000 	addeq	r0, r3, #0
    3140:	09100600 	ldmdbeq	r0, {r9, sl}
    3144:	af010000 	svcge	0x00010000
    3148:	00031601 	andeq	r1, r3, r1, lsl #12
    314c:	018c1200 	orreq	r1, ip, r0, lsl #4
    3150:	055401c0 	ldrbeq	r0, [r4, #-448]	; 0xfffffe40
    3154:	d30c0000 	movwle	r0, #49152	; 0xc000
    3158:	01000007 	tsteq	r0, r7
    315c:	031101c2 	tsteq	r1, #-2147483600	; 0x80000030
    3160:	0c000000 	stceq	0, cr0, [r0], {-0}
    3164:	000007f5 	strdeq	r0, [r0], -r5
    3168:	0c01c301 	stceq	3, cr12, [r1], {1}
    316c:	04000003 	streq	r0, [r0], #-3
    3170:	0008950c 	andeq	r9, r8, ip, lsl #10
    3174:	01c40100 	biceq	r0, r4, r0, lsl #2
    3178:	0000030c 	andeq	r0, r0, ip, lsl #6
    317c:	08140c08 	ldmdaeq	r4, {r3, sl, fp}
    3180:	c5010000 	strgt	r0, [r1, #-0]
    3184:	00030c01 	andeq	r0, r3, r1, lsl #24
    3188:	53130c00 	tstpl	r3, #0, 24
    318c:	01005243 	tsteq	r0, r3, asr #4
    3190:	030c01c6 	movweq	r0, #49606	; 0xc1c6
    3194:	13100000 	tstne	r0, #0
    3198:	00524343 	subseq	r4, r2, r3, asr #6
    319c:	0c01c701 	stceq	7, cr12, [r1], {1}
    31a0:	14000003 	strne	r0, [r0], #-3
    31a4:	50485313 	subpl	r5, r8, r3, lsl r3
    31a8:	01c80100 	biceq	r0, r8, r0, lsl #2
    31ac:	00000564 	andeq	r0, r0, r4, ror #10
    31b0:	083e0c18 	ldmdaeq	lr!, {r3, r4, sl, fp}
    31b4:	c9010000 	stmdbgt	r1, {}	; <UNPREDICTABLE>
    31b8:	00030c01 	andeq	r0, r3, r1, lsl #24
    31bc:	0f0c2400 	svceq	0x000c2400
    31c0:	01000008 	tsteq	r0, r8
    31c4:	030c01ca 	movweq	r0, #49610	; 0xc1ca
    31c8:	0c280000 	stceq	0, cr0, [r8], #-0
    31cc:	000008d4 	ldrdeq	r0, [r0], -r4
    31d0:	0c01cb01 			; <UNDEFINED> instruction: 0x0c01cb01
    31d4:	2c000003 	stccs	0, cr0, [r0], {3}
    31d8:	0008a40c 	andeq	sl, r8, ip, lsl #8
    31dc:	01cc0100 	biceq	r0, ip, r0, lsl #2
    31e0:	0000030c 	andeq	r0, r0, ip, lsl #6
    31e4:	07bc0c30 			; <UNDEFINED> instruction: 0x07bc0c30
    31e8:	cd010000 	stcgt	0, cr0, [r1, #-0]
    31ec:	00030c01 	andeq	r0, r3, r1, lsl #24
    31f0:	0a0c3400 	beq	3101f8 <startup-0x1fcefe08>
    31f4:	01000008 	tsteq	r0, r8
    31f8:	030c01ce 	movweq	r0, #49614	; 0xc1ce
    31fc:	0c380000 	ldceq	0, cr0, [r8], #-0
    3200:	000009d2 	ldrdeq	r0, [r0], -r2
    3204:	0c01cf01 	stceq	15, cr12, [r1], {1}
    3208:	3c000003 	stccc	0, cr0, [r0], {3}
    320c:	52465013 	subpl	r5, r6, #19
    3210:	01d00100 	bicseq	r0, r0, r0, lsl #2
    3214:	0000057e 	andeq	r0, r0, lr, ror r5
    3218:	46441340 	strbmi	r1, [r4], -r0, asr #6
    321c:	d1010052 	qaddle	r0, r2, r1
    3220:	00031101 	andeq	r1, r3, r1, lsl #2
    3224:	41134800 	tstmi	r3, r0, lsl #16
    3228:	01005244 	tsteq	r0, r4, asr #4
    322c:	031101d2 	tsteq	r1, #-2147483596	; 0x80000034
    3230:	0c4c0000 	mareq	acc0, r0, ip
    3234:	000008d9 	ldrdeq	r0, [r0], -r9
    3238:	9801d301 	stmdals	r1, {r0, r8, r9, ip, lr, pc}
    323c:	50000005 	andpl	r0, r0, r5
    3240:	00089a0c 	andeq	r9, r8, ip, lsl #20
    3244:	01d40100 	bicseq	r0, r4, r0, lsl #2
    3248:	000005b2 			; <UNDEFINED> instruction: 0x000005b2
    324c:	08de0c60 	ldmeq	lr, {r5, r6, sl, fp}^
    3250:	d5010000 	strle	r0, [r1, #-0]
    3254:	0005b701 	andeq	fp, r5, r1, lsl #14
    3258:	e40c7400 	str	r7, [ip], #-1024	; 0xfffffc00
    325c:	01000009 	tsteq	r0, r9
    3260:	030c01d6 	movweq	r0, #49622	; 0xc1d6
    3264:	00880000 	addeq	r0, r8, r0
    3268:	0002dc0f 	andeq	sp, r2, pc, lsl #24
    326c:	00056400 	andeq	r6, r5, r0, lsl #8
    3270:	02ca1000 	sbceq	r1, sl, #0
    3274:	000b0000 	andeq	r0, fp, r0
    3278:	00055409 	andeq	r5, r5, r9, lsl #8
    327c:	03110f00 	tsteq	r1, #0, 30
    3280:	05790000 	ldrbeq	r0, [r9, #-0]!
    3284:	ca100000 	bgt	40328c <startup-0x1fbfcd74>
    3288:	01000002 	tsteq	r0, r2
    328c:	05690a00 	strbeq	r0, [r9, #-2560]!	; 0xfffff600
    3290:	79090000 	stmdbvc	r9, {}	; <UNPREDICTABLE>
    3294:	0f000005 	svceq	0x00000005
    3298:	00000311 	andeq	r0, r0, r1, lsl r3
    329c:	00000593 	muleq	r0, r3, r5
    32a0:	0002ca10 	andeq	ip, r2, r0, lsl sl
    32a4:	0a000300 	beq	3eac <startup-0x1fffc154>
    32a8:	00000583 	andeq	r0, r0, r3, lsl #11
    32ac:	00059309 	andeq	r9, r5, r9, lsl #6
    32b0:	03110f00 	tsteq	r1, #0, 30
    32b4:	05ad0000 	streq	r0, [sp, #0]!
    32b8:	ca100000 	bgt	4032c0 <startup-0x1fbfcd40>
    32bc:	04000002 	streq	r0, [r0], #-2
    32c0:	059d0a00 	ldreq	r0, [sp, #2560]	; 0xa00
    32c4:	ad090000 	stcge	0, cr0, [r9, #-0]
    32c8:	0f000005 	svceq	0x00000005
    32cc:	00000301 	andeq	r0, r0, r1, lsl #6
    32d0:	000005c7 	andeq	r0, r0, r7, asr #11
    32d4:	0002ca10 	andeq	ip, r2, r0, lsl sl
    32d8:	06000400 	streq	r0, [r0], -r0, lsl #8
    32dc:	000007de 	ldrdeq	r0, [r0], -lr
    32e0:	3901d701 	stmdbcc	r1, {r0, r8, r9, sl, ip, lr, pc}
    32e4:	0f000004 	svceq	0x00000004
    32e8:	00000301 	andeq	r0, r0, r1, lsl #6
    32ec:	000005e3 	andeq	r0, r0, r3, ror #11
    32f0:	0002ca10 	andeq	ip, r2, r0, lsl sl
    32f4:	14000700 	strne	r0, [r0], #-1792	; 0xfffff900
    32f8:	0000014a 	andeq	r0, r0, sl, asr #2
    32fc:	fc06fa01 	stc2	10, cr15, [r6], {1}	; <UNPREDICTABLE>
    3300:	15000002 	strne	r0, [r0, #-2]
    3304:	00000241 	andeq	r0, r0, r1, asr #4
    3308:	03013b06 	movweq	r3, #6918	; 0x1b06
    330c:	07160000 	ldreq	r0, [r6, -r0]
    3310:	00027101 	andeq	r7, r2, r1, lsl #2
    3314:	035f0300 	cmpeq	pc, #0, 6
    3318:	00000615 	andeq	r0, r0, r5, lsl r6
    331c:	00014204 	andeq	r4, r1, r4, lsl #4
    3320:	fa040000 	blx	103328 <startup-0x1fefccd8>
    3324:	01000000 	mrseq	r0, (UNDEF: 0)
    3328:	093c0600 	ldmdbeq	ip!, {r9, sl}
    332c:	5f030000 	svcpl	0x00030000
    3330:	0005fa03 	andeq	pc, r5, r3, lsl #20
    3334:	03101200 	tsteq	r0, #0, 4
    3338:	065f0395 			; <UNDEFINED> instruction: 0x065f0395
    333c:	54130000 	ldrpl	r0, [r3], #-0
    3340:	03005249 	movweq	r5, #585	; 0x249
    3344:	030c0397 	movweq	r0, #50071	; 0xc397
    3348:	0c000000 	stceq	0, cr0, [r0], {-0}
    334c:	000013b7 			; <UNDEFINED> instruction: 0x000013b7
    3350:	0c039803 	stceq	8, cr9, [r3], {3}
    3354:	04000003 	streq	r0, [r0], #-3
    3358:	0012aa0c 	andseq	sl, r2, ip, lsl #20
    335c:	03990300 	orrseq	r0, r9, #0, 6
    3360:	0000030c 	andeq	r0, r0, ip, lsl #6
    3364:	142c0c08 	strtne	r0, [ip], #-3080	; 0xfffff3f8
    3368:	9a030000 	bls	c3370 <startup-0x1ff3cc90>
    336c:	00030c03 	andeq	r0, r3, r3, lsl #24
    3370:	06000c00 	streq	r0, [r0], -r0, lsl #24
    3374:	000014da 	ldrdeq	r1, [r0], -sl
    3378:	21039b03 	tstcs	r3, r3, lsl #22
    337c:	12000006 	andne	r0, r0, #6
    3380:	03a10310 			; <UNDEFINED> instruction: 0x03a10310
    3384:	000006a9 	andeq	r0, r0, r9, lsr #13
    3388:	52495213 	subpl	r5, r9, #805306369	; 0x30000001
    338c:	03a30300 			; <UNDEFINED> instruction: 0x03a30300
    3390:	0000030c 	andeq	r0, r0, ip, lsl #6
    3394:	136b0c00 	cmnne	fp, #0, 24
    3398:	a4030000 	strge	r0, [r3], #-0
    339c:	00030c03 	andeq	r0, r3, r3, lsl #24
    33a0:	010c0400 	tsteq	ip, r0, lsl #8
    33a4:	03000013 	movweq	r0, #19
    33a8:	030c03a5 	movweq	r0, #50085	; 0xc3a5
    33ac:	0c080000 	stceq	0, cr0, [r8], {-0}
    33b0:	0000152f 	andeq	r1, r0, pc, lsr #10
    33b4:	0c03a603 	stceq	6, cr10, [r3], {3}
    33b8:	0c000003 	stceq	0, cr0, [r0], {3}
    33bc:	13cc0600 	bicne	r0, ip, #0, 12
    33c0:	a7030000 	strge	r0, [r3, -r0]
    33c4:	00066b03 	andeq	r6, r6, r3, lsl #22
    33c8:	03081200 	movweq	r1, #33280	; 0x8200
    33cc:	06d903ad 	ldrbeq	r0, [r9], sp, lsr #7
    33d0:	46130000 	ldrmi	r0, [r3], -r0
    33d4:	03003152 	movweq	r3, #338	; 0x152
    33d8:	030c03af 	movweq	r0, #50095	; 0xc3af
    33dc:	13000000 	movwne	r0, #0
    33e0:	00325246 	eorseq	r5, r2, r6, asr #4
    33e4:	0c03b003 	stceq	0, cr11, [r3], {3}
    33e8:	04000003 	streq	r0, [r0], #-3
    33ec:	137a0600 	cmnne	sl, #0, 12
    33f0:	b1030000 	mrslt	r0, (UNDEF: 3)
    33f4:	0006b503 	andeq	fp, r6, r3, lsl #10
    33f8:	03200b00 	nopeq	{0}	; <UNPREDICTABLE>
    33fc:	1b03b703 	blne	f1010 <startup-0x1ff0eff0>
    3400:	13000008 	movwne	r0, #8
    3404:	0052434d 	subseq	r4, r2, sp, asr #6
    3408:	0c03b903 			; <UNDEFINED> instruction: 0x0c03b903
    340c:	00000003 	andeq	r0, r0, r3
    3410:	52534d13 	subspl	r4, r3, #1216	; 0x4c0
    3414:	03ba0300 			; <UNDEFINED> instruction: 0x03ba0300
    3418:	0000030c 	andeq	r0, r0, ip, lsl #6
    341c:	53541304 	cmppl	r4, #4, 6	; 0x10000000
    3420:	bb030052 	bllt	c3570 <startup-0x1ff3ca90>
    3424:	00030c03 	andeq	r0, r3, r3, lsl #24
    3428:	da0c0800 	ble	305430 <startup-0x1fcfabd0>
    342c:	03000012 	movweq	r0, #18
    3430:	030c03bc 	movweq	r0, #50108	; 0xc3bc
    3434:	0c0c0000 	stceq	0, cr0, [ip], {-0}
    3438:	00001375 	andeq	r1, r0, r5, ror r3
    343c:	0c03bd03 	stceq	13, cr11, [r3], {3}
    3440:	10000003 	andne	r0, r0, r3
    3444:	52454913 	subpl	r4, r5, #311296	; 0x4c000
    3448:	03be0300 			; <UNDEFINED> instruction: 0x03be0300
    344c:	0000030c 	andeq	r0, r0, ip, lsl #6
    3450:	53451314 	movtpl	r1, #21268	; 0x5314
    3454:	bf030052 	svclt	0x00030052
    3458:	00030c03 	andeq	r0, r3, r3, lsl #24
    345c:	42131800 	andsmi	r1, r3, #0, 16
    3460:	03005254 	movweq	r5, #596	; 0x254
    3464:	030c03c0 	movweq	r0, #50112	; 0xc3c0
    3468:	0c1c0000 	ldceq	0, cr0, [ip], {-0}
    346c:	000008de 	ldrdeq	r0, [r0], -lr
    3470:	1b03c103 	blne	f3884 <startup-0x1ff0c77c>
    3474:	20000008 	andcs	r0, r0, r8
    3478:	00133f0d 	andseq	r3, r3, sp, lsl #30
    347c:	03c20300 	biceq	r0, r2, #0, 6
    3480:	0000082b 	andeq	r0, r0, fp, lsr #16
    3484:	450d0180 	strmi	r0, [sp, #-384]	; 0xfffffe80
    3488:	03000015 	movweq	r0, #21
    348c:	083b03c3 	ldmdaeq	fp!, {r0, r1, r6, r7, r8, r9}
    3490:	01b00000 	movseq	r0, r0
    3494:	00145e0d 	andseq	r5, r4, sp, lsl #28
    3498:	03c40300 	biceq	r0, r4, #0, 6
    349c:	0000084b 	andeq	r0, r0, fp, asr #16
    34a0:	460e01d0 			; <UNDEFINED> instruction: 0x460e01d0
    34a4:	0300524d 	movweq	r5, #589	; 0x24d
    34a8:	030c03c5 	movweq	r0, #50117	; 0xc3c5
    34ac:	02000000 	andeq	r0, r0, #0
    34b0:	0013b20d 	andseq	fp, r3, sp, lsl #4
    34b4:	03c60300 	biceq	r0, r6, #0, 6
    34b8:	0000030c 	andeq	r0, r0, ip, lsl #6
    34bc:	e80d0204 	stmda	sp, {r2, r9}
    34c0:	03000008 	movweq	r0, #8
    34c4:	030103c7 	movweq	r0, #5063	; 0x13c7
    34c8:	02080000 	andeq	r0, r8, #0
    34cc:	0013700d 	andseq	r7, r3, sp
    34d0:	03c80300 	biceq	r0, r8, #0, 6
    34d4:	0000030c 	andeq	r0, r0, ip, lsl #6
    34d8:	f20d020c 	vhsub.s8	d0, d13, d12
    34dc:	03000008 	movweq	r0, #8
    34e0:	030103c9 	movweq	r0, #5065	; 0x13c9
    34e4:	02100000 	andseq	r0, r0, #0
    34e8:	0014310d 	andseq	r3, r4, sp, lsl #2
    34ec:	03ca0300 	biceq	r0, sl, #0, 6
    34f0:	0000030c 	andeq	r0, r0, ip, lsl #6
    34f4:	fc0d0214 	stc2	2, cr0, [sp], {20}
    34f8:	03000008 	movweq	r0, #8
    34fc:	030103cb 	movweq	r0, #5067	; 0x13cb
    3500:	02180000 	andseq	r0, r8, #0
    3504:	0014320d 	andseq	r3, r4, sp, lsl #4
    3508:	03cc0300 	biceq	r0, ip, #0, 6
    350c:	0000030c 	andeq	r0, r0, ip, lsl #6
    3510:	060d021c 			; <UNDEFINED> instruction: 0x060d021c
    3514:	03000009 	movweq	r0, #9
    3518:	05d303cd 	ldrbeq	r0, [r3, #973]	; 0x3cd
    351c:	02200000 	eoreq	r0, r0, #0
    3520:	0013950d 	andseq	r9, r3, sp, lsl #10
    3524:	03ce0300 	biceq	r0, lr, #0, 6
    3528:	0000085b 	andeq	r0, r0, fp, asr r8
    352c:	0f000240 	svceq	0x00000240
    3530:	00000301 	andeq	r0, r0, r1, lsl #6
    3534:	0000082b 	andeq	r0, r0, fp, lsr #16
    3538:	0002ca10 	andeq	ip, r2, r0, lsl sl
    353c:	0f005700 	svceq	0x00005700
    3540:	0000065f 	andeq	r0, r0, pc, asr r6
    3544:	0000083b 	andeq	r0, r0, fp, lsr r8
    3548:	0002ca10 	andeq	ip, r2, r0, lsl sl
    354c:	0f000200 	svceq	0x00000200
    3550:	000006a9 	andeq	r0, r0, r9, lsr #13
    3554:	0000084b 	andeq	r0, r0, fp, asr #16
    3558:	0002ca10 	andeq	ip, r2, r0, lsl sl
    355c:	0f000100 	svceq	0x00000100
    3560:	00000301 	andeq	r0, r0, r1, lsl #6
    3564:	0000085b 	andeq	r0, r0, fp, asr r8
    3568:	0002ca10 	andeq	ip, r2, r0, lsl sl
    356c:	0f000b00 	svceq	0x00000b00
    3570:	000006d9 	ldrdeq	r0, [r0], -r9
    3574:	0000086b 	andeq	r0, r0, fp, ror #16
    3578:	0002ca10 	andeq	ip, r2, r0, lsl sl
    357c:	06001b00 	streq	r1, [r0], -r0, lsl #22
    3580:	000011c3 	andeq	r1, r0, r3, asr #3
    3584:	e503cf03 	str	ip, [r3, #-3843]	; 0xfffff0fd
    3588:	12000006 	andne	r0, r0, #6
    358c:	05c30328 	strbeq	r0, [r3, #808]	; 0x328
    3590:	00000903 	andeq	r0, r0, r3, lsl #18
    3594:	0004880c 	andeq	r8, r4, ip, lsl #16
    3598:	05c50300 	strbeq	r0, [r5, #768]	; 0x300
    359c:	0000030c 	andeq	r0, r0, ip, lsl #6
    35a0:	04980c00 	ldreq	r0, [r8], #3072	; 0xc00
    35a4:	c6030000 	strgt	r0, [r3], -r0
    35a8:	00030c05 	andeq	r0, r3, r5, lsl #24
    35ac:	210c0400 	tstcs	ip, r0, lsl #8
    35b0:	03000005 	movweq	r0, #5
    35b4:	030c05c7 	movweq	r0, #50631	; 0xc5c7
    35b8:	0c080000 	stceq	0, cr0, [r8], {-0}
    35bc:	00000536 	andeq	r0, r0, r6, lsr r5
    35c0:	0c05c803 	stceq	8, cr12, [r5], {3}
    35c4:	0c000003 	stceq	0, cr0, [r0], {3}
    35c8:	52444913 	subpl	r4, r4, #311296	; 0x4c000
    35cc:	05c90300 	strbeq	r0, [r9, #768]	; 0x300
    35d0:	0000030c 	andeq	r0, r0, ip, lsl #6
    35d4:	444f1310 	strbmi	r1, [pc], #-784	; 35dc <startup-0x1fffca24>
    35d8:	ca030052 	bgt	c3728 <startup-0x1ff3c8d8>
    35dc:	00030c05 	andeq	r0, r3, r5, lsl #24
    35e0:	e50c1400 	str	r1, [ip, #-1024]	; 0xfffffc00
    35e4:	03000005 	movweq	r0, #5
    35e8:	02ec05cb 	rsceq	r0, ip, #851443712	; 0x32c00000
    35ec:	0c180000 	ldceq	0, cr0, [r8], {-0}
    35f0:	000004bc 			; <UNDEFINED> instruction: 0x000004bc
    35f4:	ec05cc03 	stc	12, cr12, [r5], {3}
    35f8:	1a000002 	bne	3608 <startup-0x1fffc9f8>
    35fc:	00043d0c 	andeq	r3, r4, ip, lsl #26
    3600:	05cd0300 	strbeq	r0, [sp, #768]	; 0x300
    3604:	0000030c 	andeq	r0, r0, ip, lsl #6
    3608:	4641131c 			; <UNDEFINED> instruction: 0x4641131c
    360c:	ce030052 	mcrgt	0, 0, r0, cr3, cr2, {2}
    3610:	00091305 	andeq	r1, r9, r5, lsl #6
    3614:	0f002000 	svceq	0x00002000
    3618:	0000030c 	andeq	r0, r0, ip, lsl #6
    361c:	00000913 	andeq	r0, r0, r3, lsl r9
    3620:	0002ca10 	andeq	ip, r2, r0, lsl sl
    3624:	09000100 	stmdbeq	r0, {r8}
    3628:	00000903 	andeq	r0, r0, r3, lsl #18
    362c:	00052906 	andeq	r2, r5, r6, lsl #18
    3630:	05cf0300 	strbeq	r0, [pc, #768]	; 3938 <startup-0x1fffc6c8>
    3634:	00000877 	andeq	r0, r0, r7, ror r8
    3638:	3d070c17 	stccc	12, cr0, [r7, #-92]	; 0xffffffa4
    363c:	000009b1 			; <UNDEFINED> instruction: 0x000009b1
    3640:	00145018 	andseq	r5, r4, r8, lsl r0
    3644:	e13f0700 	teq	pc, r0, lsl #14
    3648:	00000002 	andeq	r0, r0, r2
    364c:	00129b18 	andseq	r9, r2, r8, lsl fp
    3650:	d1420700 	cmple	r2, r0, lsl #14
    3654:	02000002 	andeq	r0, r0, #2
    3658:	00162818 	andseq	r2, r6, r8, lsl r8
    365c:	d1450700 	cmple	r5, r0, lsl #14
    3660:	03000002 	movweq	r0, #2
    3664:	00124918 	andseq	r4, r2, r8, lsl r9
    3668:	d14a0700 	cmple	sl, r0, lsl #14
    366c:	04000002 	streq	r0, [r0], #-2
    3670:	00125118 	andseq	r5, r2, r8, lsl r1
    3674:	d14e0700 	cmple	lr, r0, lsl #14
    3678:	05000002 	streq	r0, [r0, #-2]
    367c:	0015ee18 	andseq	lr, r5, r8, lsl lr
    3680:	15510700 	ldrbne	r0, [r1, #-1792]	; 0xfffff900
    3684:	06000006 	streq	r0, [r0], -r6
    3688:	00130618 	andseq	r0, r3, r8, lsl r6
    368c:	15540700 	ldrbne	r0, [r4, #-1792]	; 0xfffff900
    3690:	07000006 	streq	r0, [r0, -r6]
    3694:	00153c18 	andseq	r3, r5, r8, lsl ip
    3698:	15570700 	ldrbne	r0, [r7, #-1792]	; 0xfffff900
    369c:	08000006 	stmdaeq	r0, {r1, r2}
    36a0:	00164c18 	andseq	r4, r6, r8, lsl ip
    36a4:	155a0700 	ldrbne	r0, [sl, #-1792]	; 0xfffff900
    36a8:	09000006 	stmdbeq	r0, {r1, r2}
    36ac:	00156418 	andseq	r6, r5, r8, lsl r4
    36b0:	155d0700 	ldrbne	r0, [sp, #-1792]	; 0xfffff900
    36b4:	0a000006 	beq	36d4 <startup-0x1fffc92c>
    36b8:	0015d418 	andseq	sp, r5, r8, lsl r4
    36bc:	15600700 	strbne	r0, [r0, #-1792]!	; 0xfffff900
    36c0:	0b000006 	bleq	36e0 <startup-0x1fffc920>
    36c4:	14b10700 	ldrtne	r0, [r1], #1792	; 0x700
    36c8:	62070000 	andvs	r0, r7, #0
    36cc:	00000924 	andeq	r0, r0, r4, lsr #18
    36d0:	67070e17 	smladvs	r7, r7, lr, r0
    36d4:	00000a31 	andeq	r0, r0, r1, lsr sl
    36d8:	00149818 	andseq	r9, r4, r8, lsl r8
    36dc:	e1690700 	cmn	r9, r0, lsl #14
    36e0:	00000002 	andeq	r0, r0, r2
    36e4:	00143718 	andseq	r3, r4, r8, lsl r7
    36e8:	e16d0700 	cmn	sp, r0, lsl #14
    36ec:	02000002 	andeq	r0, r0, #2
    36f0:	00122118 	andseq	r2, r2, r8, lsl r1
    36f4:	e1710700 	cmn	r1, r0, lsl #14
    36f8:	04000002 	streq	r0, [r0], #-2
    36fc:	00126818 	andseq	r6, r2, r8, lsl r8
    3700:	e1760700 	cmn	r6, r0, lsl #14
    3704:	06000002 	streq	r0, [r0], -r2
    3708:	0014c118 	andseq	ip, r4, r8, lsl r1
    370c:	e17b0700 	cmn	fp, r0, lsl #14
    3710:	08000002 	stmdaeq	r0, {r1}
    3714:	00140b18 	andseq	r0, r4, r8, lsl fp
    3718:	d17e0700 	cmnle	lr, r0, lsl #14
    371c:	0a000002 	beq	372c <startup-0x1fffc8d4>
    3720:	00150e18 	andseq	r0, r5, r8, lsl lr
    3724:	d1800700 	orrle	r0, r0, r0, lsl #14
    3728:	0b000002 	bleq	3738 <startup-0x1fffc8c8>
    372c:	0014fe18 	andseq	pc, r4, r8, lsl lr	; <UNPREDICTABLE>
    3730:	d1830700 	orrle	r0, r3, r0, lsl #14
    3734:	0c000002 	stceq	0, cr0, [r0], {2}
    3738:	00157f18 	andseq	r7, r5, r8, lsl pc
    373c:	15860700 	strne	r0, [r6, #1792]	; 0x700
    3740:	0d000006 	stceq	0, cr0, [r0, #-24]	; 0xffffffe8
    3744:	13f50700 	mvnsne	r0, #0, 14
    3748:	88070000 	stmdahi	r7, {}	; <UNPREDICTABLE>
    374c:	000009bc 			; <UNDEFINED> instruction: 0x000009bc
    3750:	8d071417 	cfstrshi	mvf1, [r7, #-92]	; 0xffffffa4
    3754:	00000a8d 	andeq	r0, r0, sp, lsl #21
    3758:	00023618 	andeq	r3, r2, r8, lsl r6
    375c:	018f0700 	orreq	r0, pc, r0, lsl #14
    3760:	00000003 	andeq	r0, r0, r3
    3764:	00022218 	andeq	r2, r2, r8, lsl r2
    3768:	01920700 	orrseq	r0, r2, r0, lsl #14
    376c:	04000003 	streq	r0, [r0], #-3
    3770:	45444919 	strbmi	r4, [r4, #-2329]	; 0xfffff6e7
    3774:	d1950700 	orrsle	r0, r5, r0, lsl #14
    3778:	08000002 	stmdaeq	r0, {r1}
    377c:	52545219 	subspl	r5, r4, #-1879048191	; 0x90000001
    3780:	d1990700 	orrsle	r0, r9, r0, lsl #14
    3784:	09000002 	stmdbeq	r0, {r1}
    3788:	434c4419 	movtmi	r4, #50201	; 0xc419
    378c:	d19d0700 	orrsle	r0, sp, r0, lsl #14
    3790:	0a000002 	beq	37a0 <startup-0x1fffc860>
    3794:	00199018 	andseq	r9, r9, r8, lsl r0
    3798:	8da10700 	stchi	7, cr0, [r1]
    379c:	0b00000a 	bleq	37cc <startup-0x1fffc834>
    37a0:	02d10f00 	sbcseq	r0, r1, #0, 30
    37a4:	0a9d0000 	beq	fe7437ac <dissarmedBit+0xde73f86c>
    37a8:	ca100000 	bgt	4037b0 <startup-0x1fbfc850>
    37ac:	07000002 	streq	r0, [r0, -r2]
    37b0:	01260700 			; <UNDEFINED> instruction: 0x01260700
    37b4:	a3070000 	movwge	r0, #28672	; 0x7000
    37b8:	00000a3c 	andeq	r0, r0, ip, lsr sl
    37bc:	a8071417 	stmdage	r7, {r0, r1, r2, r4, sl, ip}
    37c0:	00000b05 	andeq	r0, r0, r5, lsl #22
    37c4:	00023618 	andeq	r3, r2, r8, lsl r6
    37c8:	01aa0700 			; <UNDEFINED> instruction: 0x01aa0700
    37cc:	00000003 	andeq	r0, r0, r3
    37d0:	00022218 	andeq	r2, r2, r8, lsl r2
    37d4:	01ad0700 			; <UNDEFINED> instruction: 0x01ad0700
    37d8:	04000003 	streq	r0, [r0], #-3
    37dc:	45444919 	strbmi	r4, [r4, #-2329]	; 0xfffff6e7
    37e0:	d1b00700 	lslsle	r0, r0, #14
    37e4:	08000002 	stmdaeq	r0, {r1}
    37e8:	52545219 	subspl	r5, r4, #-1879048191	; 0x90000001
    37ec:	d1b40700 			; <UNDEFINED> instruction: 0xd1b40700
    37f0:	09000002 	stmdbeq	r0, {r1}
    37f4:	434c4419 	movtmi	r4, #50201	; 0xc419
    37f8:	d1b80700 			; <UNDEFINED> instruction: 0xd1b80700
    37fc:	0a000002 	beq	380c <startup-0x1fffc7f4>
    3800:	00199018 	andseq	r9, r9, r8, lsl r0
    3804:	8dbb0700 	ldchi	7, cr0, [fp]
    3808:	0b00000a 	bleq	3838 <startup-0x1fffc7c8>
    380c:	494d4619 	stmdbmi	sp, {r0, r3, r4, r9, sl, lr}^
    3810:	d1be0700 			; <UNDEFINED> instruction: 0xd1be0700
    3814:	13000002 	movwne	r0, #2
    3818:	02670700 	rsbeq	r0, r7, #0, 14
    381c:	c1070000 	mrsgt	r0, (UNDEF: 7)
    3820:	00000aa8 	andeq	r0, r0, r8, lsr #21
    3824:	13080417 	movwne	r0, #33815	; 0x8417
    3828:	00000b72 	andeq	r0, r0, r2, ror fp
    382c:	0000351a 	andeq	r3, r0, sl, lsl r5
    3830:	01150800 	tsteq	r5, r0, lsl #16
    3834:	04000003 	streq	r0, [r0], #-3
    3838:	1a001808 	bne	9860 <startup-0x1fff67a0>
    383c:	00000000 	andeq	r0, r0, r0
    3840:	03011908 	movweq	r1, #6408	; 0x1908
    3844:	0a040000 	beq	10384c <startup-0x1fefc7b4>
    3848:	491b000e 	ldmdbmi	fp, {r1, r2, r3}
    384c:	1d080044 	stcne	0, cr0, [r8, #-272]	; 0xfffffef0
    3850:	00000301 	andeq	r0, r0, r1, lsl #6
    3854:	00070704 	andeq	r0, r7, r4, lsl #14
    3858:	0001801a 	andeq	r8, r1, sl, lsl r0
    385c:	01210800 			; <UNDEFINED> instruction: 0x01210800
    3860:	04000003 	streq	r0, [r0], #-3
    3864:	1a000601 	bne	5070 <startup-0x1fffaf90>
    3868:	0000001b 	andeq	r0, r0, fp, lsl r0
    386c:	03012408 	movweq	r2, #5128	; 0x1408
    3870:	03040000 	movweq	r0, #16384	; 0x4000
    3874:	231a0003 	tstcs	sl, #3
    3878:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    387c:	00030127 	andeq	r0, r3, r7, lsr #2
    3880:	00030400 	andeq	r0, r3, r0, lsl #8
    3884:	94070000 	strls	r0, [r7], #-0
    3888:	08000002 	stmdaeq	r0, {r1}
    388c:	000b1028 	andeq	r1, fp, r8, lsr #32
    3890:	08041700 	stmdaeq	r4, {r8, r9, sl, ip}
    3894:	000bc12d 	andeq	ip, fp, sp, lsr #2
    3898:	00461a00 	subeq	r1, r6, r0, lsl #20
    389c:	2f080000 	svccs	0x00080000
    38a0:	00000301 	andeq	r0, r0, r1, lsl #6
    38a4:	001f0104 	andseq	r0, pc, r4, lsl #2
    38a8:	5254521b 	subspl	r5, r4, #-1342177279	; 0xb0000001
    38ac:	01320800 	teqeq	r2, r0, lsl #16
    38b0:	04000003 	streq	r0, [r0], #-3
    38b4:	1b001e01 	blne	b0c0 <startup-0x1fff4f40>
    38b8:	00454449 	subeq	r4, r5, r9, asr #8
    38bc:	03013508 	movweq	r3, #5384	; 0x1508
    38c0:	01040000 	mrseq	r0, (UNDEF: 4)
    38c4:	491b001d 	ldmdbmi	fp, {r0, r2, r3, r4}
    38c8:	37080044 	strcc	r0, [r8, -r4, asr #32]
    38cc:	00000301 	andeq	r0, r0, r1, lsl #6
    38d0:	00001d04 	andeq	r1, r0, r4, lsl #26
    38d4:	016e0700 	cmneq	lr, r0, lsl #14
    38d8:	38080000 	stmdacc	r8, {}	; <UNPREDICTABLE>
    38dc:	00000b7d 	andeq	r0, r0, sp, ror fp
    38e0:	36090417 			; <UNDEFINED> instruction: 0x36090417
    38e4:	00000c05 	andeq	r0, r0, r5, lsl #24
    38e8:	0008a918 	andeq	sl, r8, r8, lsl r9
    38ec:	d1380900 	teqle	r8, r0, lsl #18
    38f0:	00000002 	andeq	r0, r0, r2
    38f4:	00091a18 	andeq	r1, r9, r8, lsl sl
    38f8:	d13d0900 	teqle	sp, r0, lsl #18
    38fc:	01000002 	tsteq	r0, r2
    3900:	0008b918 	andeq	fp, r8, r8, lsl r9
    3904:	d1420900 	cmple	r2, r0, lsl #18
    3908:	02000002 	andeq	r0, r0, #2
    390c:	00077418 	andeq	r7, r7, r8, lsl r4
    3910:	15470900 	strbne	r0, [r7, #-2304]	; 0xfffff700
    3914:	03000006 	movweq	r0, #6
    3918:	07630700 	strbeq	r0, [r3, -r0, lsl #14]!
    391c:	4a090000 	bmi	243924 <startup-0x1fdbc6dc>
    3920:	00000bcc 	andeq	r0, r0, ip, asr #23
    3924:	7101071c 	tstvc	r1, ip, lsl r7
    3928:	0a000002 	beq	3938 <startup-0x1fffc6c8>
    392c:	000c3642 	andeq	r3, ip, r2, asr #12
    3930:	04af0400 	strteq	r0, [pc], #1024	; 3938 <startup-0x1fffc6c8>
    3934:	04000000 	streq	r0, [r0], #-0
    3938:	000005f4 	strdeq	r0, [r0], -r4
    393c:	04420401 	strbeq	r0, [r2], #-1025	; 0xfffffbff
    3940:	04020000 	streq	r0, [r2], #-0
    3944:	0000047b 	andeq	r0, r0, fp, ror r4
    3948:	02070003 	andeq	r0, r7, #3
    394c:	0a000006 	beq	396c <startup-0x1fffc694>
    3950:	000c1047 	andeq	r1, ip, r7, asr #32
    3954:	01071c00 	tsteq	r7, r0, lsl #24
    3958:	00000271 	andeq	r0, r0, r1, ror r2
    395c:	0c5b4f0a 	mrrceq	15, 0, r4, fp, cr10
    3960:	3c040000 	stccc	0, cr0, [r4], {-0}
    3964:	00000005 	andeq	r0, r0, r5
    3968:	00045e04 	andeq	r5, r4, r4, lsl #28
    396c:	07000100 	streq	r0, [r0, -r0, lsl #2]
    3970:	000005a6 	andeq	r0, r0, r6, lsr #11
    3974:	0c41520a 	sfmeq	f5, 2, [r1], {10}
    3978:	071c0000 	ldreq	r0, [ip, -r0]
    397c:	00027101 	andeq	r7, r2, r1, lsl #2
    3980:	8c5a0a00 	mrrchi	10, 0, r0, sl, cr0
    3984:	0400000c 	streq	r0, [r0], #-12
    3988:	0000046c 	andeq	r0, r0, ip, ror #8
    398c:	04ec0400 	strbteq	r0, [ip], #1024	; 0x400
    3990:	04010000 	streq	r0, [r1], #-0
    3994:	000004dc 	ldrdeq	r0, [r0], -ip
    3998:	04c20402 	strbeq	r0, [r2], #1026	; 0x402
    399c:	00030000 	andeq	r0, r3, r0
    39a0:	00050f07 	andeq	r0, r5, r7, lsl #30
    39a4:	665f0a00 	ldrbvs	r0, [pc], -r0, lsl #20
    39a8:	1c00000c 	stcne	0, cr0, [r0], {12}
    39ac:	02710107 	rsbseq	r0, r1, #-1073741823	; 0xc0000001
    39b0:	6e0a0000 	cdpvs	0, 0, cr0, cr10, cr0, {0}
    39b4:	00000cb7 			; <UNDEFINED> instruction: 0x00000cb7
    39b8:	0004fe04 	andeq	pc, r4, r4, lsl #28
    39bc:	4a040000 	bmi	1039c4 <startup-0x1fefc63c>
    39c0:	01000005 	tsteq	r0, r5
    39c4:	00044f04 	andeq	r4, r4, r4, lsl #30
    39c8:	07000200 	streq	r0, [r0, -r0, lsl #4]
    39cc:	000005d4 	ldrdeq	r0, [r0], -r4
    39d0:	0c97720a 	lfmeq	f7, 4, [r7], {10}
    39d4:	08170000 	ldmdaeq	r7, {}	; <UNPREDICTABLE>
    39d8:	0d07840a 	cfstrseq	mvf8, [r7, #-40]	; 0xffffffd8
    39dc:	eb180000 	bl	6039e4 <startup-0x1f9fc61c>
    39e0:	0a000005 	beq	39fc <startup-0x1fffc604>
    39e4:	00030186 	andeq	r0, r3, r6, lsl #3
    39e8:	8e180000 	cdphi	0, 1, cr0, cr8, cr0, {0}
    39ec:	0a000004 	beq	3a04 <startup-0x1fffc5fc>
    39f0:	000c3689 	andeq	r3, ip, r9, lsl #13
    39f4:	32180400 	andscc	r0, r8, #0, 8
    39f8:	0a000004 	beq	3a10 <startup-0x1fffc5f0>
    39fc:	000c8c8c 	andeq	r8, ip, ip, lsl #25
    3a00:	b8180500 	ldmdalt	r8, {r8, sl}
    3a04:	0a000005 	beq	3a20 <startup-0x1fffc5e0>
    3a08:	000c5b8f 	andeq	r5, ip, pc, lsl #23
    3a0c:	d2180600 	andsle	r0, r8, #0, 12
    3a10:	0a000004 	beq	3a28 <startup-0x1fffc5d8>
    3a14:	000cb792 	muleq	ip, r2, r7
    3a18:	07000700 	streq	r0, [r0, -r0, lsl #14]
    3a1c:	000005c3 	andeq	r0, r0, r3, asr #11
    3a20:	0cc2940a 	cfstrdeq	mvd9, [r2], {10}
    3a24:	041d0000 	ldreq	r0, [sp], #-0
    3a28:	0d310f02 	ldceq	15, cr0, [r1, #-8]!
    3a2c:	7c1e0000 	ldcvc	0, cr0, [lr], {-0}
    3a30:	02000016 	andeq	r0, r0, #22
    3a34:	000d3110 	andeq	r3, sp, r0, lsl r1
    3a38:	01571e00 	cmpeq	r7, r0, lsl #28
    3a3c:	11020000 	mrsne	r0, (UNDEF: 2)
    3a40:	00000bc1 	andeq	r0, r0, r1, asr #23
    3a44:	02e10f00 	rsceq	r0, r1, #0, 30
    3a48:	0d410000 	stcleq	0, cr0, [r1, #-0]
    3a4c:	ca100000 	bgt	403a54 <startup-0x1fbfc5ac>
    3a50:	01000002 	tsteq	r0, r2
    3a54:	17bf0700 	ldrne	r0, [pc, r0, lsl #14]!
    3a58:	12020000 	andne	r0, r2, #0
    3a5c:	00000d12 	andeq	r0, r0, r2, lsl sp
    3a60:	14021017 	strne	r1, [r2], #-23	; 0xffffffe9
    3a64:	00000d85 	andeq	r0, r0, r5, lsl #27
    3a68:	0016b718 	andseq	fp, r6, r8, lsl r7
    3a6c:	96150200 	ldrls	r0, [r5], -r0, lsl #4
    3a70:	0000000d 	andeq	r0, r0, sp
    3a74:	00015718 	andeq	r5, r1, r8, lsl r7
    3a78:	c1160200 	tstgt	r6, r0, lsl #4
    3a7c:	0400000b 	streq	r0, [r0], #-11
    3a80:	00023c18 	andeq	r3, r2, r8, lsl ip
    3a84:	c1170200 	tstgt	r7, r0, lsl #4
    3a88:	0800000b 	stmdaeq	r0, {r0, r1, r3}
    3a8c:	0012a418 	andseq	sl, r2, r8, lsl r4
    3a90:	15180200 	ldrne	r0, [r8, #-512]	; 0xfffffe00
    3a94:	0c000006 	stceq	0, cr0, [r0], {6}
    3a98:	0d901f00 	ldceq	15, cr1, [r0]
    3a9c:	90200000 	eorls	r0, r0, r0
    3aa0:	0000000d 	andeq	r0, r0, sp
    3aa4:	0b050421 	bleq	144b30 <startup-0x1febb4d0>
    3aa8:	04210000 	strteq	r0, [r1], #-0
    3aac:	00000d85 	andeq	r0, r0, r5, lsl #27
    3ab0:	0017f407 	andseq	pc, r7, r7, lsl #8
    3ab4:	4c190200 	lfmmi	f0, 4, [r9], {-0}
    3ab8:	0f00000d 	svceq	0x0000000d
    3abc:	00000d9c 	muleq	r0, ip, sp
    3ac0:	00000db7 			; <UNDEFINED> instruction: 0x00000db7
    3ac4:	0002ca10 	andeq	ip, r2, r0, lsl sl
    3ac8:	22000d00 	andcs	r0, r0, #0, 26
    3acc:	0000174f 	andeq	r1, r0, pc, asr #14
    3ad0:	0da71e02 	stceq	14, cr1, [r7, #8]!
    3ad4:	03050000 	movweq	r0, #20480	; 0x5000
    3ad8:	20003e10 	andcs	r3, r0, r0, lsl lr
    3adc:	0016e022 	andseq	lr, r6, r2, lsr #32
    3ae0:	d1230200 			; <UNDEFINED> instruction: 0xd1230200
    3ae4:	05000002 	streq	r0, [r0, #-2]
    3ae8:	003ef003 	eorseq	pc, lr, r3
    3aec:	165e2220 	ldrbne	r2, [lr], -r0, lsr #4
    3af0:	24020000 	strcs	r0, [r2], #-0
    3af4:	00000301 	andeq	r0, r0, r1, lsl #6
    3af8:	3e0c0305 	cdpcc	3, 0, cr0, cr12, cr5, {0}
    3afc:	68232000 	stmdavs	r3!, {sp}
    3b00:	02000016 	andeq	r0, r0, #22
    3b04:	0002d1ec 	andeq	sp, r2, ip, ror #3
    3b08:	00280800 	eoreq	r0, r8, r0, lsl #16
    3b0c:	0001bc20 	andeq	fp, r1, r0, lsr #24
    3b10:	3d9c0100 	ldfccs	f0, [ip]
    3b14:	2400000e 	strcs	r0, [r0], #-14
    3b18:	00001731 	andeq	r1, r0, r1, lsr r7
    3b1c:	09b1ed02 	ldmibeq	r1!, {r1, r8, sl, fp, sp, lr, pc}
    3b20:	91020000 	mrsls	r0, (UNDEF: 2)
    3b24:	169c2458 			; <UNDEFINED> instruction: 0x169c2458
    3b28:	ee020000 	cdp	0, 0, cr0, cr2, cr0, {0}
    3b2c:	00000c05 	andeq	r0, r0, r5, lsl #24
    3b30:	24549102 	ldrbcs	r9, [r4], #-258	; 0xfffffefe
    3b34:	000017e1 	andeq	r1, r0, r1, ror #15
    3b38:	0d07ef02 	stceq	15, cr14, [r7, #-8]
    3b3c:	91020000 	mrsls	r0, (UNDEF: 2)
    3b40:	1721254c 	strne	r2, [r1, -ip, asr #10]!
    3b44:	37020000 	strcc	r0, [r2, -r0]
    3b48:	0002d101 	andeq	sp, r2, r1, lsl #2
    3b4c:	67910200 	ldrvs	r0, [r1, r0, lsl #4]
    3b50:	16bf2600 	ldrtne	r2, [pc], r0, lsl #12
    3b54:	db020000 	blle	83b5c <startup-0x1ff7c4a4>
    3b58:	20002770 	andcs	r2, r0, r0, ror r7
    3b5c:	00000098 	muleq	r0, r8, r0
    3b60:	0e839c01 	cdpeq	12, 8, cr9, cr3, cr1, {0}
    3b64:	7c270000 	stcvc	0, cr0, [r7], #-0
    3b68:	76200027 	strtvc	r0, [r0], -r7, lsr #32
    3b6c:	24000000 	strcs	r0, [r0], #-0
    3b70:	00001805 	andeq	r1, r0, r5, lsl #16
    3b74:	02d1de02 	sbcseq	sp, r1, #2, 28
    3b78:	91020000 	mrsls	r0, (UNDEF: 2)
    3b7c:	27962777 			; <UNDEFINED> instruction: 0x27962777
    3b80:	004a2000 	subeq	r2, sl, r0
    3b84:	70240000 	eorvc	r0, r4, r0
    3b88:	02000002 	andeq	r0, r0, #2
    3b8c:	000b72e2 	andeq	r7, fp, r2, ror #5
    3b90:	70910200 	addsvc	r0, r1, r0, lsl #4
    3b94:	26000000 	strcs	r0, [r0], -r0
    3b98:	00001829 	andeq	r1, r0, r9, lsr #16
    3b9c:	263cbd02 	ldrtcs	fp, [ip], -r2, lsl #26
    3ba0:	01342000 	teqeq	r4, r0
    3ba4:	9c010000 	stcls	0, cr0, [r1], {-0}
    3ba8:	00000ed6 	ldrdeq	r0, [r0], -r6
    3bac:	00444928 	subeq	r4, r4, r8, lsr #18
    3bb0:	02e1bd02 	rsceq	fp, r1, #2, 26	; 0x80
    3bb4:	91020000 	mrsls	r0, (UNDEF: 2)
    3bb8:	26562766 	ldrbcs	r2, [r6], -r6, ror #14
    3bbc:	00fc2000 	rscseq	r2, ip, r0
    3bc0:	05240000 	streq	r0, [r4, #-0]!
    3bc4:	02000018 	andeq	r0, r0, #24
    3bc8:	0002d1c1 	andeq	sp, r2, r1, asr #3
    3bcc:	6f910200 	svcvs	0x00910200
    3bd0:	00267427 	eoreq	r7, r6, r7, lsr #8
    3bd4:	0000c820 	andeq	ip, r0, r0, lsr #16
    3bd8:	02702400 	rsbseq	r2, r0, #0, 8
    3bdc:	c5020000 	strgt	r0, [r2, #-0]
    3be0:	00000b72 	andeq	r0, r0, r2, ror fp
    3be4:	00689102 	rsbeq	r9, r8, r2, lsl #2
    3be8:	af260000 	svcge	0x00260000
    3bec:	02000016 	andeq	r0, r0, #22
    3bf0:	0025d0a8 	eoreq	sp, r5, r8, lsr #1
    3bf4:	00006c20 	andeq	r6, r0, r0, lsr #24
    3bf8:	049c0100 	ldreq	r0, [ip], #256	; 0x100
    3bfc:	2700000f 	strcs	r0, [r0, -pc]
    3c00:	200025f2 	strdcs	r2, [r0], -r2	; <UNPREDICTABLE>
    3c04:	00000038 	andeq	r0, r0, r8, lsr r0
    3c08:	0016da24 	andseq	sp, r6, r4, lsr #20
    3c0c:	05ae0200 	streq	r0, [lr, #512]!	; 0x200
    3c10:	0200000b 	andeq	r0, r0, #11
    3c14:	00006491 	muleq	r0, r1, r4
    3c18:	0016cb29 	andseq	ip, r6, r9, lsr #22
    3c1c:	d18a0200 	orrle	r0, sl, r0, lsl #4
    3c20:	26000002 	strcs	r0, [r0], -r2
    3c24:	aa200025 	bge	803cc0 <startup-0x1f7fc340>
    3c28:	01000000 	mrseq	r0, (UNDEF: 0)
    3c2c:	000f449c 	muleq	pc, ip, r4	; <UNPREDICTABLE>
    3c30:	736d2800 	cmnvc	sp, #0, 16
    3c34:	8a020067 	bhi	83dd8 <startup-0x1ff7c228>
    3c38:	00000f44 	andeq	r0, r0, r4, asr #30
    3c3c:	276c9102 	strbcs	r9, [ip, -r2, lsl #2]!
    3c40:	20002536 	andcs	r2, r0, r6, lsr r5
    3c44:	00000072 	andeq	r0, r0, r2, ror r0
    3c48:	00027024 	andeq	r7, r2, r4, lsr #32
    3c4c:	728e0200 	addvc	r0, lr, #0, 4
    3c50:	0200000b 	andeq	r0, r0, #11
    3c54:	00007491 	muleq	r0, r1, r4
    3c58:	0a9d0421 	beq	fe744ce4 <dissarmedBit+0xde740da4>
    3c5c:	a3260000 			; <UNDEFINED> instruction: 0xa3260000
    3c60:	02000017 	andeq	r0, r0, #23
    3c64:	0024f481 	eoreq	pc, r4, r1, lsl #9
    3c68:	00003220 	andeq	r3, r0, r0, lsr #4
    3c6c:	789c0100 	ldmvc	ip, {r8}
    3c70:	2700000f 	strcs	r0, [r0, -pc]
    3c74:	200024fa 	strdcs	r2, [r0], -sl
    3c78:	00000024 	andeq	r0, r0, r4, lsr #32
    3c7c:	00180524 	andseq	r0, r8, r4, lsr #10
    3c80:	d1820200 	orrle	r0, r2, r0, lsl #4
    3c84:	02000002 	andeq	r0, r0, #2
    3c88:	00007791 	muleq	r0, r1, r7
    3c8c:	00168426 	andseq	r8, r6, r6, lsr #8
    3c90:	a4730200 	ldrbtge	r0, [r3], #-512	; 0xfffffe00
    3c94:	50200024 	eorpl	r0, r0, r4, lsr #32
    3c98:	01000000 	mrseq	r0, (UNDEF: 0)
    3c9c:	000fb49c 	muleq	pc, ip, r4	; <UNPREDICTABLE>
    3ca0:	18052a00 	stmdane	r5, {r9, fp, sp}
    3ca4:	73020000 	movwvc	r0, #8192	; 0x2000
    3ca8:	000002d1 	ldrdeq	r0, [r0], -r1
    3cac:	27679102 	strbcs	r9, [r7, -r2, lsl #2]!
    3cb0:	200024b8 			; <UNDEFINED> instruction: 0x200024b8
    3cb4:	0000002e 	andeq	r0, r0, lr, lsr #32
    3cb8:	00170924 	andseq	r0, r7, r4, lsr #18
    3cbc:	31780200 	cmncc	r8, r0, lsl #4
    3cc0:	0200000a 	andeq	r0, r0, #10
    3cc4:	00006891 	muleq	r0, r1, r8
    3cc8:	00180b29 	andseq	r0, r8, r9, lsr #22
    3ccc:	d14b0200 	mrsle	r0, (UNDEF: 107)
    3cd0:	78000002 	stmdavc	r0, {r1}
    3cd4:	2c200023 	stccs	0, cr0, [r0], #-140	; 0xffffff74
    3cd8:	01000001 	tsteq	r0, r1
    3cdc:	0010289c 	mulseq	r0, ip, r8
    3ce0:	16712a00 	ldrbtne	r2, [r1], -r0, lsl #20
    3ce4:	4b020000 	blmi	83cec <startup-0x1ff7c314>
    3ce8:	00000d96 	muleq	r0, r6, sp
    3cec:	2a649102 	bcs	19280fc <startup-0x1e6d7f04>
    3cf0:	00000157 	andeq	r0, r0, r7, asr r1
    3cf4:	10284b02 	eorne	r4, r8, r2, lsl #22
    3cf8:	91020000 	mrsls	r0, (UNDEF: 2)
    3cfc:	023c2a60 	eorseq	r2, ip, #96, 20	; 0x60000
    3d00:	4b020000 	blmi	83d08 <startup-0x1ff7c2f8>
    3d04:	00001028 	andeq	r1, r0, r8, lsr #32
    3d08:	275c9102 	ldrbcs	r9, [ip, -r2, lsl #2]
    3d0c:	20002384 	andcs	r2, r0, r4, lsl #7
    3d10:	00000102 	andeq	r0, r0, r2, lsl #2
    3d14:	00180524 	andseq	r0, r8, r4, lsr #10
    3d18:	d14c0200 	mrsle	r0, (UNDEF: 108)
    3d1c:	02000002 	andeq	r0, r0, #2
    3d20:	aa276f91 	bge	9dfb6c <startup-0x1f620494>
    3d24:	7c200023 	stcvc	0, cr0, [r0], #-140	; 0xffffff74
    3d28:	24000000 	strcs	r0, [r0], #-0
    3d2c:	00000270 	andeq	r0, r0, r0, ror r2
    3d30:	0b725102 	bleq	1c98140 <startup-0x1e367ec0>
    3d34:	91020000 	mrsls	r0, (UNDEF: 2)
    3d38:	00000068 	andeq	r0, r0, r8, rrx
    3d3c:	0bc10421 	bleq	ff044dc8 <dissarmedBit+0xdf040e88>
    3d40:	f0260000 			; <UNDEFINED> instruction: 0xf0260000
    3d44:	02000016 	andeq	r0, r0, #22
    3d48:	0022e032 	eoreq	lr, r2, r2, lsr r0
    3d4c:	00009820 	andeq	r9, r0, r0, lsr #16
    3d50:	7c9c0100 	ldfvcs	f0, [ip], {0}
    3d54:	2a000010 	bcs	3d9c <startup-0x1fffc264>
    3d58:	00001805 	andeq	r1, r0, r5, lsl #16
    3d5c:	02d13202 	sbcseq	r3, r1, #536870912	; 0x20000000
    3d60:	91020000 	mrsls	r0, (UNDEF: 2)
    3d64:	1743245f 	smlsldne	r2, r3, pc, r4	; <UNPREDICTABLE>
    3d68:	36020000 	strcc	r0, [r2], -r0
    3d6c:	00000d41 	andeq	r0, r0, r1, asr #26
    3d70:	24749102 	ldrbtcs	r9, [r4], #-258	; 0xfffffefe
    3d74:	0000181f 	andeq	r1, r0, pc, lsl r8
    3d78:	0d413602 	stcleq	6, cr3, [r1, #-8]
    3d7c:	91020000 	mrsls	r0, (UNDEF: 2)
    3d80:	17092470 	smlsdxne	r9, r0, r4, r2
    3d84:	3b020000 	blcc	83d8c <startup-0x1ff7c274>
    3d88:	00000a31 	andeq	r0, r0, r1, lsr sl
    3d8c:	00609102 	rsbeq	r9, r0, r2, lsl #2
    3d90:	0017cb2b 	andseq	ip, r7, fp, lsr #22
    3d94:	d1280200 			; <UNDEFINED> instruction: 0xd1280200
    3d98:	9c000002 	stcls	0, cr0, [r0], {2}
    3d9c:	44200022 	strtmi	r0, [r0], #-34	; 0xffffffde
    3da0:	01000000 	mrseq	r0, (UNDEF: 0)
    3da4:	0010ae9c 	mulseq	r0, ip, lr
    3da8:	22a22700 	adccs	r2, r2, #0, 14
    3dac:	00302000 	eorseq	r2, r0, r0
    3db0:	05240000 	streq	r0, [r4, #-0]!
    3db4:	02000018 	andeq	r0, r0, #24
    3db8:	0002d129 	andeq	sp, r2, r9, lsr #2
    3dbc:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    3dc0:	702c0000 	eorvc	r0, ip, r0
    3dc4:	0100000c 	tsteq	r0, ip
    3dc8:	223c065d 	eorscs	r0, ip, #97517568	; 0x5d00000
    3dcc:	00602000 	rsbeq	r2, r0, r0
    3dd0:	9c010000 	stcls	0, cr0, [r1], {-0}
    3dd4:	000d3c2d 	andeq	r3, sp, sp, lsr #24
    3dd8:	065d0100 	ldrbeq	r0, [sp], -r0, lsl #2
    3ddc:	0000025a 	andeq	r0, r0, sl, asr r2
    3de0:	2d779102 	ldfcsp	f1, [r7, #-8]!
    3de4:	0000088c 	andeq	r0, r0, ip, lsl #17
    3de8:	01065d01 	tsteq	r6, r1, lsl #26
    3dec:	02000003 	andeq	r0, r0, #3
    3df0:	00007091 	muleq	r0, r1, r0
    3df4:	00000623 	andeq	r0, r0, r3, lsr #12
    3df8:	0f050004 	svceq	0x00050004
    3dfc:	01040000 	mrseq	r0, (UNDEF: 4)
    3e00:	00000051 	andeq	r0, r0, r1, asr r0
    3e04:	0018bb0c 	andseq	fp, r8, ip, lsl #22
    3e08:	0001df00 	andeq	sp, r1, r0, lsl #30
    3e0c:	0029c400 	eoreq	ip, r9, r0, lsl #8
    3e10:	00050e20 	andeq	r0, r5, r0, lsr #28
    3e14:	0015bd00 	andseq	fp, r5, r0, lsl #26
    3e18:	06010200 	streq	r0, [r1], -r0, lsl #4
    3e1c:	0000011a 	andeq	r0, r0, sl, lsl r1
    3e20:	00000a03 	andeq	r0, r0, r3, lsl #20
    3e24:	372b0200 	strcc	r0, [fp, -r0, lsl #4]!
    3e28:	02000000 	andeq	r0, r0, #0
    3e2c:	01180801 	tsteq	r8, r1, lsl #16
    3e30:	02020000 	andeq	r0, r2, #0
    3e34:	00003c05 	andeq	r3, r0, r5, lsl #24
    3e38:	02b80300 	adcseq	r0, r8, #0, 6
    3e3c:	39020000 	stmdbcc	r2, {}	; <UNPREDICTABLE>
    3e40:	00000050 	andeq	r0, r0, r0, asr r0
    3e44:	81070202 	tsthi	r7, r2, lsl #4
    3e48:	03000002 	movweq	r0, #2
    3e4c:	0000002b 	andeq	r0, r0, fp, lsr #32
    3e50:	00624d02 	rsbeq	r4, r2, r2, lsl #26
    3e54:	04020000 	streq	r0, [r2], #-0
    3e58:	00022d05 	andeq	r2, r2, r5, lsl #26
    3e5c:	01630300 	cmneq	r3, r0, lsl #6
    3e60:	4f020000 	svcmi	0x00020000
    3e64:	00000074 	andeq	r0, r0, r4, ror r0
    3e68:	06070402 	streq	r0, [r7], -r2, lsl #8
    3e6c:	02000001 	andeq	r0, r0, #1
    3e70:	02280508 	eoreq	r0, r8, #8, 10	; 0x2000000
    3e74:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    3e78:	00010107 	andeq	r0, r1, r7, lsl #2
    3e7c:	05040400 	streq	r0, [r4, #-1024]	; 0xfffffc00
    3e80:	00746e69 	rsbseq	r6, r4, r9, ror #28
    3e84:	0b070402 	bleq	1c4e94 <startup-0x1fe3b16c>
    3e88:	03000001 	movweq	r0, #1
    3e8c:	0000000c 	andeq	r0, r0, ip
    3e90:	002c1803 	eoreq	r1, ip, r3, lsl #16
    3e94:	ba030000 	blt	c3e9c <startup-0x1ff3c164>
    3e98:	03000002 	movweq	r0, #2
    3e9c:	00004524 	andeq	r4, r0, r4, lsr #10
    3ea0:	00a20500 	adceq	r0, r2, r0, lsl #10
    3ea4:	2d030000 	stccs	0, cr0, [r3, #-0]
    3ea8:	03000000 	movweq	r0, #0
    3eac:	0000572c 	andeq	r5, r0, ip, lsr #14
    3eb0:	00b20500 	adcseq	r0, r2, r0, lsl #10
    3eb4:	65030000 	strvs	r0, [r3, #-0]
    3eb8:	03000001 	movweq	r0, #1
    3ebc:	00006930 	andeq	r6, r0, r0, lsr r9
    3ec0:	00c20500 	sbceq	r0, r2, r0, lsl #10
    3ec4:	4a060000 	bmi	183ecc <startup-0x1fe7c134>
    3ec8:	04000001 	streq	r0, [r0], #-1
    3ecc:	00bd06fa 	ldrshteq	r0, [sp], sl
    3ed0:	41070000 	mrsmi	r0, (UNDEF: 7)
    3ed4:	05000002 	streq	r0, [r0, #-2]
    3ed8:	0000c23b 	andeq	ip, r0, fp, lsr r2
    3edc:	01070800 	tsteq	r7, r0, lsl #16
    3ee0:	00000037 	andeq	r0, r0, r7, lsr r0
    3ee4:	04035f06 	streq	r5, [r3], #-3846	; 0xfffff0fa
    3ee8:	09000001 	stmdbeq	r0, {r0}
    3eec:	00000142 	andeq	r0, r0, r2, asr #2
    3ef0:	00fa0900 	rscseq	r0, sl, r0, lsl #18
    3ef4:	00010000 	andeq	r0, r1, r0
    3ef8:	c306280a 	movwgt	r2, #26634	; 0x680a
    3efc:	00019005 	andeq	r9, r1, r5
    3f00:	04880b00 	streq	r0, [r8], #2816	; 0xb00
    3f04:	c5060000 	strgt	r0, [r6, #-0]
    3f08:	0000cd05 	andeq	ip, r0, r5, lsl #26
    3f0c:	980b0000 	stmdals	fp, {}	; <UNPREDICTABLE>
    3f10:	06000004 	streq	r0, [r0], -r4
    3f14:	00cd05c6 	sbceq	r0, sp, r6, asr #11
    3f18:	0b040000 	bleq	103f20 <startup-0x1fefc0e0>
    3f1c:	00000521 	andeq	r0, r0, r1, lsr #10
    3f20:	cd05c706 	stcgt	7, cr12, [r5, #-24]	; 0xffffffe8
    3f24:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    3f28:	0005360b 	andeq	r3, r5, fp, lsl #12
    3f2c:	05c80600 	strbeq	r0, [r8, #1536]	; 0x600
    3f30:	000000cd 	andeq	r0, r0, sp, asr #1
    3f34:	44490c0c 	strbmi	r0, [r9], #-3084	; 0xfffff3f4
    3f38:	c9060052 	stmdbgt	r6, {r1, r4, r6}
    3f3c:	0000cd05 	andeq	ip, r0, r5, lsl #26
    3f40:	4f0c1000 	svcmi	0x000c1000
    3f44:	06005244 	streq	r5, [r0], -r4, asr #4
    3f48:	00cd05ca 	sbceq	r0, sp, sl, asr #11
    3f4c:	0b140000 	bleq	503f54 <startup-0x1fafc0ac>
    3f50:	000005e5 	andeq	r0, r0, r5, ror #11
    3f54:	ad05cb06 	vstrge	d12, [r5, #-24]	; 0xffffffe8
    3f58:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    3f5c:	0004bc0b 	andeq	fp, r4, fp, lsl #24
    3f60:	05cc0600 	strbeq	r0, [ip, #1536]	; 0x600
    3f64:	000000ad 	andeq	r0, r0, sp, lsr #1
    3f68:	043d0b1a 	ldrteq	r0, [sp], #-2842	; 0xfffff4e6
    3f6c:	cd060000 	stcgt	0, cr0, [r6, #-0]
    3f70:	0000cd05 	andeq	ip, r0, r5, lsl #26
    3f74:	410c1c00 	tstmi	ip, r0, lsl #24
    3f78:	06005246 	streq	r5, [r0], -r6, asr #4
    3f7c:	01a005ce 	asreq	r0, lr, #11
    3f80:	00200000 	eoreq	r0, r0, r0
    3f84:	0000cd0d 	andeq	ip, r0, sp, lsl #26
    3f88:	0001a000 	andeq	sl, r1, r0
    3f8c:	00900e00 	addseq	r0, r0, r0, lsl #28
    3f90:	00010000 	andeq	r0, r1, r0
    3f94:	00019005 	andeq	r9, r1, r5
    3f98:	05290f00 	streq	r0, [r9, #-3840]!	; 0xfffff100
    3f9c:	cf060000 	svcgt	0x00060000
    3fa0:	00010405 	andeq	r0, r1, r5, lsl #8
    3fa4:	01071000 	mrseq	r1, (UNDEF: 7)
    3fa8:	00000037 	andeq	r0, r0, r7, lsr r0
    3fac:	01d74207 	bicseq	r4, r7, r7, lsl #4
    3fb0:	af090000 	svcge	0x00090000
    3fb4:	00000004 	andeq	r0, r0, r4
    3fb8:	0005f409 	andeq	pc, r5, r9, lsl #8
    3fbc:	42090100 	andmi	r0, r9, #0, 2
    3fc0:	02000004 	andeq	r0, r0, #4
    3fc4:	00047b09 	andeq	r7, r4, r9, lsl #22
    3fc8:	03000300 	movweq	r0, #768	; 0x300
    3fcc:	00000602 	andeq	r0, r0, r2, lsl #12
    3fd0:	01b14707 			; <UNDEFINED> instruction: 0x01b14707
    3fd4:	07100000 	ldreq	r0, [r0, -r0]
    3fd8:	00003701 	andeq	r3, r0, r1, lsl #14
    3fdc:	fc4f0700 	mcrr2	7, 0, r0, pc, cr0	; <UNPREDICTABLE>
    3fe0:	09000001 	stmdbeq	r0, {r0}
    3fe4:	0000053c 	andeq	r0, r0, ip, lsr r5
    3fe8:	045e0900 	ldrbeq	r0, [lr], #-2304	; 0xfffff700
    3fec:	00010000 	andeq	r0, r1, r0
    3ff0:	0005a603 	andeq	sl, r5, r3, lsl #12
    3ff4:	e2520700 	subs	r0, r2, #0, 14
    3ff8:	10000001 	andne	r0, r0, r1
    3ffc:	00370107 	eorseq	r0, r7, r7, lsl #2
    4000:	5a070000 	bpl	1c4008 <startup-0x1fe3bff8>
    4004:	0000022d 	andeq	r0, r0, sp, lsr #4
    4008:	00046c09 	andeq	r6, r4, r9, lsl #24
    400c:	ec090000 	stc	0, cr0, [r9], {-0}
    4010:	01000004 	tsteq	r0, r4
    4014:	0004dc09 	andeq	sp, r4, r9, lsl #24
    4018:	c2090200 	andgt	r0, r9, #0, 4
    401c:	03000004 	movweq	r0, #4
    4020:	050f0300 	streq	r0, [pc, #-768]	; 3d28 <startup-0x1fffc2d8>
    4024:	5f070000 	svcpl	0x00070000
    4028:	00000207 	andeq	r0, r0, r7, lsl #4
    402c:	37010710 	smladcc	r1, r0, r7, r0
    4030:	07000000 	streq	r0, [r0, -r0]
    4034:	0002586e 	andeq	r5, r2, lr, ror #16
    4038:	04fe0900 	ldrbteq	r0, [lr], #2304	; 0x900
    403c:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    4040:	0000054a 	andeq	r0, r0, sl, asr #10
    4044:	044f0901 	strbeq	r0, [pc], #-2305	; 404c <startup-0x1fffbfb4>
    4048:	00020000 	andeq	r0, r2, r0
    404c:	0005d403 	andeq	sp, r5, r3, lsl #8
    4050:	38720700 	ldmdacc	r2!, {r8, r9, sl}^
    4054:	10000002 	andne	r0, r0, r2
    4058:	00370107 	eorseq	r0, r7, r7, lsl #2
    405c:	7a070000 	bvc	1c4064 <startup-0x1fe3bf9c>
    4060:	0000027d 	andeq	r0, r0, sp, ror r2
    4064:	00187d09 	andseq	r7, r8, r9, lsl #26
    4068:	3d090000 	stccc	0, cr0, [r9, #-0]
    406c:	01000018 	tsteq	r0, r8, lsl r0
    4070:	19a80300 	stmibne	r8!, {r8, r9}
    4074:	7d070000 	stcvc	0, cr0, [r7, #-0]
    4078:	00000263 	andeq	r0, r0, r3, ror #4
    407c:	84070811 	strhi	r0, [r7], #-2065	; 0xfffff7ef
    4080:	000002cd 	andeq	r0, r0, sp, asr #5
    4084:	0005eb12 	andeq	lr, r5, r2, lsl fp
    4088:	c2860700 	addgt	r0, r6, #0, 14
    408c:	00000000 	andeq	r0, r0, r0
    4090:	00048e12 	andeq	r8, r4, r2, lsl lr
    4094:	d7890700 	strle	r0, [r9, r0, lsl #14]
    4098:	04000001 	streq	r0, [r0], #-1
    409c:	00043212 	andeq	r3, r4, r2, lsl r2
    40a0:	2d8c0700 	stccs	7, cr0, [ip]
    40a4:	05000002 	streq	r0, [r0, #-2]
    40a8:	0005b812 	andeq	fp, r5, r2, lsl r8
    40ac:	fc8f0700 	stc2	7, cr0, [pc], {0}
    40b0:	06000001 	streq	r0, [r0], -r1
    40b4:	0004d212 	andeq	sp, r4, r2, lsl r2
    40b8:	58920700 	ldmpl	r2, {r8, r9, sl}
    40bc:	07000002 	streq	r0, [r0, -r2]
    40c0:	05c30300 	strbeq	r0, [r3, #768]	; 0x300
    40c4:	94070000 	strls	r0, [r7], #-0
    40c8:	00000288 	andeq	r0, r0, r8, lsl #5
    40cc:	0019e513 	andseq	lr, r9, r3, lsl r5
    40d0:	02430100 	subeq	r0, r3, #0, 2
    40d4:	20002e2e 	andcs	r2, r0, lr, lsr #28
    40d8:	000000a4 	andeq	r0, r0, r4, lsr #1
    40dc:	033a9c01 	teqeq	sl, #256	; 0x100
    40e0:	c8140000 	ldmdagt	r4, {}	; <UNPREDICTABLE>
    40e4:	01000019 	tsteq	r0, r9, lsl r0
    40e8:	033a0243 	teqeq	sl, #805306372	; 0x30000004
    40ec:	91020000 	mrsls	r0, (UNDEF: 2)
    40f0:	1973146c 	ldmdbne	r3!, {r2, r3, r5, r6, sl, ip}^
    40f4:	43010000 	movwmi	r0, #4096	; 0x1000
    40f8:	0000a202 	andeq	sl, r0, r2, lsl #4
    40fc:	6a910200 	bvs	fe444904 <dissarmedBit+0xde4409c4>
    4100:	00185914 	andseq	r5, r8, r4, lsl r9
    4104:	02430100 	subeq	r0, r3, #0, 2
    4108:	00000097 	muleq	r0, r7, r0
    410c:	15699102 	strbne	r9, [r9, #-258]!	; 0xfffffefe
    4110:	00001861 	andeq	r1, r0, r1, ror #16
    4114:	c2024501 	andgt	r4, r2, #4194304	; 0x400000
    4118:	02000000 	andeq	r0, r0, #0
    411c:	de157491 	cfcmpsle	r7, mvf5, mvf1
    4120:	01000019 	tsteq	r0, r9, lsl r0
    4124:	00c20246 	sbceq	r0, r2, r6, asr #4
    4128:	91020000 	mrsls	r0, (UNDEF: 2)
    412c:	04160070 	ldreq	r0, [r6], #-112	; 0xffffff90
    4130:	000001a5 	andeq	r0, r0, r5, lsr #3
    4134:	0019ce13 	andseq	ip, r9, r3, lsl lr
    4138:	01f00100 	mvnseq	r0, r0, lsl #2
    413c:	20002e0a 	andcs	r2, r0, sl, lsl #28
    4140:	00000024 	andeq	r0, r0, r4, lsr #32
    4144:	03759c01 	cmneq	r5, #256	; 0x100
    4148:	c8140000 	ldmdagt	r4, {}	; <UNPREDICTABLE>
    414c:	01000019 	tsteq	r0, r9, lsl r0
    4150:	033a01f0 	teqeq	sl, #240, 2	; 0x3c
    4154:	91020000 	mrsls	r0, (UNDEF: 2)
    4158:	05eb1474 	strbeq	r1, [fp, #1140]!	; 0x474
    415c:	f0010000 			; <UNDEFINED> instruction: 0xf0010000
    4160:	0000a201 	andeq	sl, r0, r1, lsl #4
    4164:	72910200 	addsvc	r0, r1, #0, 4
    4168:	19bd1300 	ldmibne	sp!, {r8, r9, ip}
    416c:	e0010000 	and	r0, r1, r0
    4170:	002dec01 	eoreq	lr, sp, r1, lsl #24
    4174:	00001e20 	andeq	r1, r0, r0, lsr #28
    4178:	aa9c0100 	bge	fe704580 <dissarmedBit+0xde700640>
    417c:	14000003 	strne	r0, [r0], #-3
    4180:	000019c8 	andeq	r1, r0, r8, asr #19
    4184:	3a01e001 	bcc	7c190 <startup-0x1ff83e70>
    4188:	02000003 	andeq	r0, r0, #3
    418c:	6b147491 	blvs	5213d8 <startup-0x1fadec28>
    4190:	01000019 	tsteq	r0, r9, lsl r0
    4194:	00a201e0 	adceq	r0, r2, r0, ror #3
    4198:	91020000 	mrsls	r0, (UNDEF: 2)
    419c:	87130072 			; <UNDEFINED> instruction: 0x87130072
    41a0:	01000018 	tsteq	r0, r8, lsl r0
    41a4:	2db201c7 	ldfcss	f0, [r2, #796]!	; 0x31c
    41a8:	003a2000 	eorseq	r2, sl, r0
    41ac:	9c010000 	stcls	0, cr0, [r1], {-0}
    41b0:	000003ee 	andeq	r0, r0, lr, ror #7
    41b4:	0019c814 	andseq	ip, r9, r4, lsl r8
    41b8:	01c70100 	biceq	r0, r7, r0, lsl #2
    41bc:	0000033a 	andeq	r0, r0, sl, lsr r3
    41c0:	14749102 	ldrbtne	r9, [r4], #-258	; 0xfffffefe
    41c4:	000005eb 	andeq	r0, r0, fp, ror #11
    41c8:	a201c701 	andge	ip, r1, #262144	; 0x40000
    41cc:	02000000 	andeq	r0, r0, #0
    41d0:	76147291 			; <UNDEFINED> instruction: 0x76147291
    41d4:	01000018 	tsteq	r0, r8, lsl r0
    41d8:	027d01c7 	rsbseq	r0, sp, #-1073741775	; 0xc0000031
    41dc:	91020000 	mrsls	r0, (UNDEF: 2)
    41e0:	ac130071 	ldcge	0, cr0, [r3], {113}	; 0x71
    41e4:	01000018 	tsteq	r0, r8, lsl r0
    41e8:	2d9401b1 	ldfcss	f0, [r4, #708]	; 0x2c4
    41ec:	001e2000 	andseq	r2, lr, r0
    41f0:	9c010000 	stcls	0, cr0, [r1], {-0}
    41f4:	00000423 	andeq	r0, r0, r3, lsr #8
    41f8:	0019c814 	andseq	ip, r9, r4, lsl r8
    41fc:	01b10100 			; <UNDEFINED> instruction: 0x01b10100
    4200:	0000033a 	andeq	r0, r0, sl, lsr r3
    4204:	14749102 	ldrbtne	r9, [r4], #-258	; 0xfffffefe
    4208:	000005eb 	andeq	r0, r0, fp, ror #11
    420c:	a201b101 	andge	fp, r1, #1073741824	; 0x40000000
    4210:	02000000 	andeq	r0, r0, #0
    4214:	13007291 	movwne	r7, #657	; 0x291
    4218:	00001895 	muleq	r0, r5, r8
    421c:	76019c01 	strvc	r9, [r1], -r1, lsl #24
    4220:	1e20002d 	cdpne	0, 2, cr0, cr0, cr13, {1}
    4224:	01000000 	mrseq	r0, (UNDEF: 0)
    4228:	0004589c 	muleq	r4, ip, r8
    422c:	19c81400 	stmibne	r8, {sl, ip}^
    4230:	9c010000 	stcls	0, cr0, [r1], {-0}
    4234:	00033a01 	andeq	r3, r3, r1, lsl #20
    4238:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    423c:	0005eb14 	andeq	lr, r5, r4, lsl fp
    4240:	019c0100 	orrseq	r0, ip, r0, lsl #2
    4244:	000000a2 	andeq	r0, r0, r2, lsr #1
    4248:	00729102 	rsbseq	r9, r2, r2, lsl #2
    424c:	00184517 	andseq	r4, r8, r7, lsl r5
    4250:	01880100 	orreq	r0, r8, r0, lsl #2
    4254:	000000a2 	andeq	r0, r0, r2, lsr #1
    4258:	20002d60 	andcs	r2, r0, r0, ror #26
    425c:	00000016 	andeq	r0, r0, r6, lsl r0
    4260:	04829c01 	streq	r9, [r2], #3073	; 0xc01
    4264:	c8140000 	ldmdagt	r4, {}	; <UNPREDICTABLE>
    4268:	01000019 	tsteq	r0, r9, lsl r0
    426c:	033a0188 	teqeq	sl, #136, 2	; 0x22
    4270:	91020000 	mrsls	r0, (UNDEF: 2)
    4274:	f6170074 			; <UNDEFINED> instruction: 0xf6170074
    4278:	01000019 	tsteq	r0, r9, lsl r0
    427c:	0097016e 	addseq	r0, r7, lr, ror #2
    4280:	2d1e0000 	ldccs	0, cr0, [lr, #-0]
    4284:	00422000 	subeq	r2, r2, r0
    4288:	9c010000 	stcls	0, cr0, [r1], {-0}
    428c:	000004ca 	andeq	r0, r0, sl, asr #9
    4290:	0019c814 	andseq	ip, r9, r4, lsl r8
    4294:	016e0100 	cmneq	lr, r0, lsl #2
    4298:	0000033a 	andeq	r0, r0, sl, lsr r3
    429c:	146c9102 	strbtne	r9, [ip], #-258	; 0xfffffefe
    42a0:	000005eb 	andeq	r0, r0, fp, ror #11
    42a4:	a2016e01 	andge	r6, r1, #1, 28
    42a8:	02000000 	andeq	r0, r0, #0
    42ac:	8e156a91 			; <UNDEFINED> instruction: 0x8e156a91
    42b0:	01000014 	tsteq	r0, r4, lsl r0
    42b4:	00970170 	addseq	r0, r7, r0, ror r1
    42b8:	91020000 	mrsls	r0, (UNDEF: 2)
    42bc:	82170077 	andshi	r0, r7, #119	; 0x77
    42c0:	01000019 	tsteq	r0, r9, lsl r0
    42c4:	00a2015d 	adceq	r0, r2, sp, asr r1
    42c8:	2d080000 	stccs	0, cr0, [r8, #-0]
    42cc:	00162000 	andseq	r2, r6, r0
    42d0:	9c010000 	stcls	0, cr0, [r1], {-0}
    42d4:	000004f4 	strdeq	r0, [r0], -r4
    42d8:	0019c814 	andseq	ip, r9, r4, lsl r8
    42dc:	015d0100 	cmpeq	sp, r0, lsl #2
    42e0:	0000033a 	andeq	r0, r0, sl, lsr r3
    42e4:	00749102 	rsbseq	r9, r4, r2, lsl #2
    42e8:	00194517 	andseq	r4, r9, r7, lsl r5
    42ec:	01430100 	mrseq	r0, (UNDEF: 83)
    42f0:	00000097 	muleq	r0, r7, r0
    42f4:	20002cc6 	andcs	r2, r0, r6, asr #25
    42f8:	00000042 	andeq	r0, r0, r2, asr #32
    42fc:	053c9c01 	ldreq	r9, [ip, #-3073]!	; 0xfffff3ff
    4300:	c8140000 	ldmdagt	r4, {}	; <UNPREDICTABLE>
    4304:	01000019 	tsteq	r0, r9, lsl r0
    4308:	033a0143 	teqeq	sl, #-1073741808	; 0xc0000010
    430c:	91020000 	mrsls	r0, (UNDEF: 2)
    4310:	05eb146c 	strbeq	r1, [fp, #1132]!	; 0x46c
    4314:	43010000 	movwmi	r0, #4096	; 0x1000
    4318:	0000a201 	andeq	sl, r0, r1, lsl #4
    431c:	6a910200 	bvs	fe444b24 <dissarmedBit+0xde440be4>
    4320:	00148e15 	andseq	r8, r4, r5, lsl lr
    4324:	01450100 	mrseq	r0, (UNDEF: 85)
    4328:	00000097 	muleq	r0, r7, r0
    432c:	00779102 	rsbseq	r9, r7, r2, lsl #2
    4330:	00199513 	andseq	r9, r9, r3, lsl r5
    4334:	01150100 	tsteq	r5, r0, lsl #2
    4338:	20002c80 	andcs	r2, r0, r0, lsl #25
    433c:	00000046 	andeq	r0, r0, r6, asr #32
    4340:	05809c01 	streq	r9, [r0, #3073]	; 0xc01
    4344:	c8140000 	ldmdagt	r4, {}	; <UNPREDICTABLE>
    4348:	01000019 	tsteq	r0, r9, lsl r0
    434c:	033a0115 	teqeq	sl, #1073741829	; 0x40000005
    4350:	91020000 	mrsls	r0, (UNDEF: 2)
    4354:	05eb146c 	strbeq	r1, [fp, #1132]!	; 0x46c
    4358:	15010000 	strne	r0, [r1, #-0]
    435c:	0000a201 	andeq	sl, r0, r1, lsl #4
    4360:	6a910200 	bvs	fe444b68 <dissarmedBit+0xde440c28>
    4364:	706d7418 	rsbvc	r7, sp, r8, lsl r4
    4368:	01170100 	tsteq	r7, r0, lsl #2
    436c:	000000cd 	andeq	r0, r0, sp, asr #1
    4370:	00749102 	rsbseq	r9, r4, r2, lsl #2
    4374:	00186619 	andseq	r6, r8, r9, lsl r6
    4378:	4cfe0100 	ldfmie	f0, [lr]
    437c:	3420002c 	strtcc	r0, [r0], #-44	; 0xffffffd4
    4380:	01000000 	mrseq	r0, (UNDEF: 0)
    4384:	0005a49c 	muleq	r5, ip, r4
    4388:	195b1a00 	ldmdbne	fp, {r9, fp, ip}^
    438c:	fe010000 	cdp2	0, 0, cr0, cr1, cr0, {0}
    4390:	000005a4 	andeq	r0, r0, r4, lsr #11
    4394:	00749102 	rsbseq	r9, r4, r2, lsl #2
    4398:	02cd0416 	sbceq	r0, sp, #369098752	; 0x16000000
    439c:	a2190000 	andsge	r0, r9, #0
    43a0:	01000018 	tsteq	r0, r8, lsl r0
    43a4:	002b34ca 	eoreq	r3, fp, sl, asr #9
    43a8:	00011820 	andeq	r1, r1, r0, lsr #16
    43ac:	069c0100 	ldreq	r0, [ip], r0, lsl #2
    43b0:	1a000006 	bne	43d0 <startup-0x1fffbc30>
    43b4:	000019c8 	andeq	r1, r0, r8, asr #19
    43b8:	033aca01 	teqeq	sl, #4096	; 0x1000
    43bc:	91020000 	mrsls	r0, (UNDEF: 2)
    43c0:	195b1a64 	ldmdbne	fp, {r2, r5, r6, r9, fp, ip}^
    43c4:	ca010000 	bgt	443cc <startup-0x1ffbbc34>
    43c8:	000005a4 	andeq	r0, r0, r4, lsr #11
    43cc:	1b609102 	blne	18287dc <startup-0x1e7d7824>
    43d0:	00001836 	andeq	r1, r0, r6, lsr r8
    43d4:	00c2cc01 	sbceq	ip, r2, r1, lsl #24
    43d8:	91020000 	mrsls	r0, (UNDEF: 2)
    43dc:	6f701c74 	svcvs	0x00701c74
    43e0:	cc010073 	stcgt	0, cr0, [r1], {115}	; 0x73
    43e4:	000000c2 	andeq	r0, r0, r2, asr #1
    43e8:	1b709102 	blne	1c287f8 <startup-0x1e3d7808>
    43ec:	000019b2 			; <UNDEFINED> instruction: 0x000019b2
    43f0:	00c2cc01 	sbceq	ip, r2, r1, lsl #24
    43f4:	91020000 	mrsls	r0, (UNDEF: 2)
    43f8:	391d006c 	ldmdbcc	sp, {r2, r3, r5, r6}
    43fc:	01000019 	tsteq	r0, r9, lsl r0
    4400:	0029c47f 	eoreq	ip, r9, pc, ror r4
    4404:	00017020 	andeq	r7, r1, r0, lsr #32
    4408:	1a9c0100 	bne	fe704810 <dissarmedBit+0xde7008d0>
    440c:	000019c8 	andeq	r1, r0, r8, asr #19
    4410:	033a7f01 	teqeq	sl, #1, 30
    4414:	91020000 	mrsls	r0, (UNDEF: 2)
    4418:	5f000074 	svcpl	0x00000074
    441c:	0400000e 	streq	r0, [r0], #-14
    4420:	0010c100 	andseq	ip, r0, r0, lsl #2
    4424:	51010400 	tstpl	r1, r0, lsl #8
    4428:	0c000000 	stceq	0, cr0, [r0], {-0}
    442c:	00001c0d 	andeq	r1, r0, sp, lsl #24
    4430:	000001df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    4434:	20002ed4 	ldrdcs	r2, [r0], -r4
    4438:	00000cf0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    443c:	00001876 	andeq	r1, r0, r6, ror r8
    4440:	1a060102 	bne	184850 <startup-0x1fe7b7b0>
    4444:	03000001 	movweq	r0, #1
    4448:	0000000a 	andeq	r0, r0, sl
    444c:	00372b02 	eorseq	r2, r7, r2, lsl #22
    4450:	01020000 	mrseq	r0, (UNDEF: 2)
    4454:	00011808 	andeq	r1, r1, r8, lsl #16
    4458:	05020200 	streq	r0, [r2, #-512]	; 0xfffffe00
    445c:	0000003c 	andeq	r0, r0, ip, lsr r0
    4460:	0002b803 	andeq	fp, r2, r3, lsl #16
    4464:	50390200 	eorspl	r0, r9, r0, lsl #4
    4468:	02000000 	andeq	r0, r0, #0
    446c:	02810702 	addeq	r0, r1, #524288	; 0x80000
    4470:	2b030000 	blcs	c4478 <startup-0x1ff3bb88>
    4474:	02000000 	andeq	r0, r0, #0
    4478:	0000624d 	andeq	r6, r0, sp, asr #4
    447c:	05040200 	streq	r0, [r4, #-512]	; 0xfffffe00
    4480:	0000022d 	andeq	r0, r0, sp, lsr #4
    4484:	00016303 	andeq	r6, r1, r3, lsl #6
    4488:	744f0200 	strbvc	r0, [pc], #-512	; 4490 <startup-0x1fffbb70>
    448c:	02000000 	andeq	r0, r0, #0
    4490:	01060704 	tsteq	r6, r4, lsl #14
    4494:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    4498:	00022805 	andeq	r2, r2, r5, lsl #16
    449c:	07080200 	streq	r0, [r8, -r0, lsl #4]
    44a0:	00000101 	andeq	r0, r0, r1, lsl #2
    44a4:	69050404 	stmdbvs	r5, {r2, sl}
    44a8:	0200746e 	andeq	r7, r0, #1845493760	; 0x6e000000
    44ac:	010b0704 	tsteq	fp, r4, lsl #14
    44b0:	0c030000 	stceq	0, cr0, [r3], {-0}
    44b4:	03000000 	movweq	r0, #0
    44b8:	00002c18 	andeq	r2, r0, r8, lsl ip
    44bc:	00970500 	addseq	r0, r7, r0, lsl #10
    44c0:	a2060000 	andge	r0, r6, #0
    44c4:	03000000 	movweq	r0, #0
    44c8:	000002ba 			; <UNDEFINED> instruction: 0x000002ba
    44cc:	00452403 	subeq	r2, r5, r3, lsl #8
    44d0:	2d030000 	stccs	0, cr0, [r3, #-0]
    44d4:	03000000 	movweq	r0, #0
    44d8:	0000572c 	andeq	r5, r0, ip, lsr #14
    44dc:	00b70600 	adcseq	r0, r7, r0, lsl #12
    44e0:	65030000 	strvs	r0, [r3, #-0]
    44e4:	03000001 	movweq	r0, #1
    44e8:	00006930 	andeq	r6, r0, r0, lsr r9
    44ec:	00c70600 	sbceq	r0, r7, r0, lsl #12
    44f0:	c7070000 	strgt	r0, [r7, -r0]
    44f4:	e7000000 	str	r0, [r0, -r0]
    44f8:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    44fc:	00000090 	muleq	r0, r0, r0
    4500:	4a090001 	bmi	24450c <startup-0x1fdbbaf4>
    4504:	04000001 	streq	r0, [r0], #-1
    4508:	00c206fa 	strdeq	r0, [r2], #106	; 0x6a
    450c:	410a0000 	mrsmi	r0, (UNDEF: 10)
    4510:	05000002 	streq	r0, [r0, #-2]
    4514:	0000c73b 	andeq	ip, r0, fp, lsr r7
    4518:	01070b00 	tsteq	r7, r0, lsl #22
    451c:	00000037 	andeq	r0, r0, r7, lsr r0
    4520:	19035d06 	stmdbne	r3, {r1, r2, r8, sl, fp, ip, lr}
    4524:	0c000001 	stceq	0, cr0, [r0], {1}
    4528:	00001881 	andeq	r1, r0, r1, lsl #17
    452c:	45530d00 	ldrbmi	r0, [r3, #-3328]	; 0xfffff300
    4530:	00010054 	andeq	r0, r1, r4, asr r0
    4534:	001f090e 	andseq	r0, pc, lr, lsl #18
    4538:	035d0600 	cmpeq	sp, #0, 12
    453c:	000000fe 	strdeq	r0, [r0], -lr
    4540:	0015b50e 	andseq	fp, r5, lr, lsl #10
    4544:	035d0600 	cmpeq	sp, #0, 12
    4548:	000000fe 	strdeq	r0, [r0], -lr
    454c:	3701070b 	strcc	r0, [r1, -fp, lsl #14]
    4550:	06000000 	streq	r0, [r0], -r0
    4554:	014c035f 	cmpeq	ip, pc, asr r3
    4558:	420c0000 	andmi	r0, ip, #0
    455c:	00000001 	andeq	r0, r0, r1
    4560:	0000fa0c 	andeq	pc, r0, ip, lsl #20
    4564:	0e000100 	adfeqs	f0, f0, f0
    4568:	0000093c 	andeq	r0, r0, ip, lsr r9
    456c:	31035f06 	tstcc	r3, r6, lsl #30
    4570:	0b000001 	bleq	457c <startup-0x1fffba84>
    4574:	00370107 	eorseq	r0, r7, r7, lsl #2
    4578:	62060000 	andvs	r0, r6, #0
    457c:	00017303 	andeq	r7, r1, r3, lsl #6
    4580:	1e450c00 	cdpne	12, 4, cr0, cr5, cr0, {0}
    4584:	0c000000 	stceq	0, cr0, [r0], {-0}
    4588:	0000217a 	andeq	r2, r0, sl, ror r1
    458c:	a50e0001 	strge	r0, [lr, #-1]
    4590:	0600001c 			; <UNDEFINED> instruction: 0x0600001c
    4594:	01580362 	cmpeq	r8, r2, ror #6
    4598:	980f0000 	stmdals	pc, {}	; <UNPREDICTABLE>
    459c:	42066406 	andmi	r6, r6, #100663296	; 0x6000000
    45a0:	10000003 	andne	r0, r0, r3
    45a4:	06005243 	streq	r5, [r0], -r3, asr #4
    45a8:	00d20666 	sbcseq	r0, r2, r6, ror #12
    45ac:	11000000 	mrsne	r0, (UNDEF: 0)
    45b0:	00001c8a 	andeq	r1, r0, sl, lsl #25
    45b4:	d2066706 	andle	r6, r6, #1572864	; 0x180000
    45b8:	04000000 	streq	r0, [r0], #-0
    45bc:	001ef311 	andseq	pc, lr, r1, lsl r3	; <UNPREDICTABLE>
    45c0:	06680600 	strbteq	r0, [r8], -r0, lsl #12
    45c4:	000000d2 	ldrdeq	r0, [r0], -r2
    45c8:	49431008 	stmdbmi	r3, {r3, ip}^
    45cc:	69060052 	stmdbvs	r6, {r1, r4, r6}
    45d0:	0000d206 	andeq	sp, r0, r6, lsl #4
    45d4:	41110c00 	tstmi	r1, r0, lsl #24
    45d8:	0600001b 			; <UNDEFINED> instruction: 0x0600001b
    45dc:	00d2066a 	sbcseq	r0, r2, sl, ror #12
    45e0:	11100000 	tstne	r0, r0
    45e4:	00002078 	andeq	r2, r0, r8, ror r0
    45e8:	d2066b06 	andle	r6, r6, #6144	; 0x1800
    45ec:	14000000 	strne	r0, [r0], #-0
    45f0:	001f8f11 	andseq	r8, pc, r1, lsl pc	; <UNPREDICTABLE>
    45f4:	066c0600 	strbteq	r0, [ip], -r0, lsl #12
    45f8:	000000d2 	ldrdeq	r0, [r0], -r2
    45fc:	08de1118 	ldmeq	lr, {r3, r4, r8, ip}^
    4600:	6d060000 	stcvs	0, cr0, [r6, #-0]
    4604:	0000c706 	andeq	ip, r0, r6, lsl #14
    4608:	34111c00 	ldrcc	r1, [r1], #-3072	; 0xfffff400
    460c:	06000021 	streq	r0, [r0], -r1, lsr #32
    4610:	00d2066e 	sbcseq	r0, r2, lr, ror #12
    4614:	11200000 			; <UNDEFINED> instruction: 0x11200000
    4618:	00001b81 	andeq	r1, r0, r1, lsl #23
    461c:	d2066f06 	andle	r6, r6, #6, 30
    4620:	24000000 	strcs	r0, [r0], #-0
    4624:	00145e11 	andseq	r5, r4, r1, lsl lr
    4628:	06700600 	ldrbteq	r0, [r0], -r0, lsl #12
    462c:	000000d7 	ldrdeq	r0, [r0], -r7
    4630:	21a21128 			; <UNDEFINED> instruction: 0x21a21128
    4634:	71060000 	mrsvc	r0, (UNDEF: 6)
    4638:	0000d206 	andeq	sp, r0, r6, lsl #4
    463c:	ac113000 	ldcge	0, cr3, [r1], {-0}
    4640:	06000020 	streq	r0, [r0], -r0, lsr #32
    4644:	00d20672 	sbcseq	r0, r2, r2, ror r6
    4648:	11340000 	teqne	r4, r0
    464c:	00001e86 	andeq	r1, r0, r6, lsl #29
    4650:	d2067306 	andle	r7, r6, #402653184	; 0x18000000
    4654:	38000000 	stmdacc	r0, {}	; <UNPREDICTABLE>
    4658:	0008e811 	andeq	lr, r8, r1, lsl r8
    465c:	06740600 	ldrbteq	r0, [r4], -r0, lsl #12
    4660:	000000c7 	andeq	r0, r0, r7, asr #1
    4664:	20a4113c 	adccs	r1, r4, ip, lsr r1
    4668:	75060000 	strvc	r0, [r6, #-0]
    466c:	0000d206 	andeq	sp, r0, r6, lsl #4
    4670:	87114000 	ldrhi	r4, [r1, -r0]
    4674:	0600001f 			; <UNDEFINED> instruction: 0x0600001f
    4678:	00d20676 	sbcseq	r0, r2, r6, ror r6
    467c:	11440000 	mrsne	r0, (UNDEF: 68)
    4680:	000008f2 	strdeq	r0, [r0], -r2
    4684:	d7067706 	strle	r7, [r6, -r6, lsl #14]
    4688:	48000000 	stmdami	r0, {}	; <UNPREDICTABLE>
    468c:	001af911 	andseq	pc, sl, r1, lsl r9	; <UNPREDICTABLE>
    4690:	06780600 	ldrbteq	r0, [r8], -r0, lsl #12
    4694:	000000d2 	ldrdeq	r0, [r0], -r2
    4698:	1ea01150 	mcrne	1, 5, r1, cr0, cr0, {2}
    469c:	79060000 	stmdbvc	r6, {}	; <UNPREDICTABLE>
    46a0:	0000d206 	andeq	sp, r0, r6, lsl #4
    46a4:	2a115400 	bcs	4596ac <startup-0x1fba6954>
    46a8:	06000021 	streq	r0, [r0], -r1, lsr #32
    46ac:	00d2067a 	sbcseq	r0, r2, sl, ror r6
    46b0:	11580000 	cmpne	r8, r0
    46b4:	000008fc 	strdeq	r0, [r0], -ip
    46b8:	c7067b06 	strgt	r7, [r6, -r6, lsl #22]
    46bc:	5c000000 	stcpl	0, cr0, [r0], {-0}
    46c0:	001a1e11 	andseq	r1, sl, r1, lsl lr
    46c4:	067c0600 	ldrbteq	r0, [ip], -r0, lsl #12
    46c8:	000000d2 	ldrdeq	r0, [r0], -r2
    46cc:	1df81160 	ldfnee	f1, [r8, #384]!	; 0x180
    46d0:	7d060000 	stcvc	0, cr0, [r6, #-0]
    46d4:	0000d206 	andeq	sp, r0, r6, lsl #4
    46d8:	06116400 	ldreq	r6, [r1], -r0, lsl #8
    46dc:	06000009 	streq	r0, [r0], -r9
    46e0:	00d7067e 	sbcseq	r0, r7, lr, ror r6
    46e4:	11680000 	cmnne	r8, r0
    46e8:	00002151 	andeq	r2, r0, r1, asr r1
    46ec:	d2067f06 	andle	r7, r6, #6, 30
    46f0:	70000000 	andvc	r0, r0, r0
    46f4:	52534310 	subspl	r4, r3, #16, 6	; 0x40000000
    46f8:	06800600 	streq	r0, [r0], r0, lsl #12
    46fc:	000000d2 	ldrdeq	r0, [r0], -r2
    4700:	1ef81174 	mrcne	1, 7, r1, cr8, cr4, {3}
    4704:	81060000 	mrshi	r0, (UNDEF: 6)
    4708:	0000d706 	andeq	sp, r0, r6, lsl #14
    470c:	24117800 	ldrcs	r7, [r1], #-2048	; 0xfffff800
    4710:	06000021 	streq	r0, [r0], -r1, lsr #32
    4714:	00d20682 	sbcseq	r0, r2, r2, lsl #13
    4718:	11800000 	orrne	r0, r0, r0
    471c:	00001da5 	andeq	r1, r0, r5, lsr #27
    4720:	d2068306 	andle	r8, r6, #402653184	; 0x18000000
    4724:	84000000 	strhi	r0, [r0], #-0
    4728:	001eed11 	andseq	lr, lr, r1, lsl sp
    472c:	06840600 	streq	r0, [r4], r0, lsl #12
    4730:	000000d2 	ldrdeq	r0, [r0], -r2
    4734:	1b2b1188 	blne	ac8d5c <startup-0x1f5372a4>
    4738:	85060000 	strhi	r0, [r6, #-0]
    473c:	0000d206 	andeq	sp, r0, r6, lsl #4
    4740:	48118c00 	ldmdami	r1, {sl, fp, pc}
    4744:	06000021 	streq	r0, [r0], -r1, lsr #32
    4748:	00d20686 	sbcseq	r0, r2, r6, lsl #13
    474c:	11900000 	orrsne	r0, r0, r0
    4750:	00001b4a 	andeq	r1, r0, sl, asr #22
    4754:	d2068706 	andle	r8, r6, #1572864	; 0x180000
    4758:	94000000 	strls	r0, [r0], #-0
    475c:	1d3f0e00 	ldcne	14, cr0, [pc, #-0]	; 4764 <startup-0x1fffb89c>
    4760:	89060000 	stmdbhi	r6, {}	; <UNPREDICTABLE>
    4764:	00017f06 	andeq	r7, r1, r6, lsl #30
    4768:	07101200 	ldreq	r1, [r0, -r0, lsl #4]
    476c:	00038730 	andeq	r8, r3, r0, lsr r7
    4770:	1a5e1300 	bne	1789378 <startup-0x1e876c88>
    4774:	32070000 	andcc	r0, r7, #0
    4778:	000000c7 	andeq	r0, r0, r7, asr #1
    477c:	1ce91300 	stclne	3, cr1, [r9]
    4780:	33070000 	movwcc	r0, #28672	; 0x7000
    4784:	000000c7 	andeq	r0, r0, r7, asr #1
    4788:	1ffe1304 	svcne	0x00fe1304
    478c:	34070000 	strcc	r0, [r7], #-0
    4790:	000000c7 	andeq	r0, r0, r7, asr #1
    4794:	1b5a1308 	blne	16893bc <startup-0x1e976c44>
    4798:	35070000 	strcc	r0, [r7, #-0]
    479c:	000000c7 	andeq	r0, r0, r7, asr #1
    47a0:	9003000c 	andls	r0, r3, ip
    47a4:	07000021 	streq	r0, [r0, -r1, lsr #32]
    47a8:	00034e36 	andeq	r4, r3, r6, lsr lr
    47ac:	00a70700 	adceq	r0, r7, r0, lsl #14
    47b0:	03a20000 			; <UNDEFINED> instruction: 0x03a20000
    47b4:	90080000 	andls	r0, r8, r0
    47b8:	0f000000 	svceq	0x00000000
    47bc:	03920500 	orrseq	r0, r2, #0, 10
    47c0:	a2060000 	andge	r0, r6, #0
    47c4:	14000003 	strne	r0, [r0], #-3
    47c8:	0000200e 	andeq	r2, r0, lr
    47cc:	03a79901 			; <UNDEFINED> instruction: 0x03a79901
    47d0:	03050000 	movweq	r0, #20480	; 0x5000
    47d4:	20003f28 	andcs	r3, r0, r8, lsr #30
    47d8:	001ac815 	andseq	ip, sl, r5, lsl r8
    47dc:	0c5e0100 	ldfeqe	f0, [lr], {-0}
    47e0:	20003ba4 	andcs	r3, r0, r4, lsr #23
    47e4:	00000020 	andeq	r0, r0, r0, lsr #32
    47e8:	03e39c01 	mvneq	r9, #256	; 0x100
    47ec:	de160000 	cdple	0, 1, cr0, cr6, cr0, {0}
    47f0:	0100001a 	tsteq	r0, sl, lsl r0
    47f4:	00970c5e 	addseq	r0, r7, lr, asr ip
    47f8:	91020000 	mrsls	r0, (UNDEF: 2)
    47fc:	94170077 	ldrls	r0, [r7], #-119	; 0xffffff89
    4800:	01000020 	tsteq	r0, r0, lsr #32
    4804:	01250c3c 			; <UNDEFINED> instruction: 0x01250c3c
    4808:	3b600000 	blcc	1804810 <startup-0x1e7fb7f0>
    480c:	00442000 	subeq	r2, r4, r0
    4810:	9c010000 	stcls	0, cr0, [r1], {-0}
    4814:	0000041c 	andeq	r0, r0, ip, lsl r4
    4818:	001ade16 	andseq	sp, sl, r6, lsl lr
    481c:	0c3c0100 	ldfeqs	f0, [ip], #-0
    4820:	00000097 	muleq	r0, r7, r0
    4824:	186f9102 	stmdane	pc!, {r1, r8, ip, pc}^	; <UNPREDICTABLE>
    4828:	0000148e 	andeq	r1, r0, lr, lsl #9
    482c:	250c3e01 	strcs	r3, [ip, #-3585]	; 0xfffff1ff
    4830:	02000001 	andeq	r0, r0, #1
    4834:	19007791 	stmdbne	r0, {r0, r4, r7, r8, r9, sl, ip, sp, lr}
    4838:	00001b33 	andeq	r1, r0, r3, lsr fp
    483c:	440c2801 	strmi	r2, [ip], #-2049	; 0xfffff7ff
    4840:	1c20003b 	stcne	0, cr0, [r0], #-236	; 0xffffff14
    4844:	01000000 	mrseq	r0, (UNDEF: 0)
    4848:	1f02179c 	svcne	0x0002179c
    484c:	fb010000 	blx	44856 <startup-0x1ffbb7aa>
    4850:	0001190b 	andeq	r1, r1, fp, lsl #18
    4854:	003ac000 	eorseq	ip, sl, r0
    4858:	00008420 	andeq	r8, r0, r0, lsr #8
    485c:	859c0100 	ldrhi	r0, [ip, #256]	; 0x100
    4860:	16000004 	strne	r0, [r0], -r4
    4864:	00001d0e 	andeq	r1, r0, lr, lsl #26
    4868:	970bfb01 	strls	pc, [fp, -r1, lsl #22]
    486c:	02000000 	andeq	r0, r0, #0
    4870:	741a6791 	ldrvc	r6, [sl], #-1937	; 0xfffff86f
    4874:	0100706d 	tsteq	r0, sp, rrx
    4878:	00c70bfd 	strdeq	r0, [r7], #189	; 0xbd
    487c:	91020000 	mrsls	r0, (UNDEF: 2)
    4880:	1a54186c 	bne	150aa38 <startup-0x1eaf55c8>
    4884:	fe010000 	cdp2	0, 0, cr0, cr1, cr0, {0}
    4888:	0000c70b 	andeq	ip, r0, fp, lsl #14
    488c:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    4890:	00148e18 	andseq	r8, r4, r8, lsl lr
    4894:	0bff0100 	bleq	fffc4c9c <dissarmedBit+0xdffc0d5c>
    4898:	00000119 	andeq	r0, r0, r9, lsl r1
    489c:	00739102 	rsbseq	r9, r3, r2, lsl #2
    48a0:	00216d15 	eoreq	r6, r1, r5, lsl sp
    48a4:	0bd60100 	bleq	ff584cac <dissarmedBit+0xdf580d6c>
    48a8:	20003a70 	andcs	r3, r0, r0, ror sl
    48ac:	00000050 	andeq	r0, r0, r0, asr r0
    48b0:	04ba9c01 	ldrteq	r9, [sl], #3073	; 0xc01
    48b4:	de160000 	cdple	0, 1, cr0, cr6, cr0, {0}
    48b8:	0100001a 	tsteq	r0, sl, lsl r0
    48bc:	00970bd6 			; <UNDEFINED> instruction: 0x00970bd6
    48c0:	91020000 	mrsls	r0, (UNDEF: 2)
    48c4:	07e71677 			; <UNDEFINED> instruction: 0x07e71677
    48c8:	d6010000 	strle	r0, [r1], -r0
    48cc:	00014c0b 	andeq	r4, r1, fp, lsl #24
    48d0:	76910200 	ldrvc	r0, [r1], r0, lsl #4
    48d4:	1e8e1500 	cdpne	5, 8, cr1, cr14, cr0, {0}
    48d8:	9e010000 	cdpls	0, 0, cr0, cr1, cr0, {0}
    48dc:	003a340a 	eorseq	r3, sl, sl, lsl #8
    48e0:	00003c20 	andeq	r3, r0, r0, lsr #24
    48e4:	e09c0100 	adds	r0, ip, r0, lsl #2
    48e8:	16000004 	strne	r0, [r0], -r4
    48ec:	00001f98 	muleq	r0, r8, pc	; <UNPREDICTABLE>
    48f0:	970a9e01 	strls	r9, [sl, -r1, lsl #28]
    48f4:	02000000 	andeq	r0, r0, #0
    48f8:	15007791 	strne	r7, [r0, #-1937]	; 0xfffff86f
    48fc:	00001b0e 	andeq	r1, r0, lr, lsl #22
    4900:	f40a8601 	vst1.8	{d8-d10}, [sl], r1
    4904:	40200039 	eormi	r0, r0, r9, lsr r0
    4908:	01000000 	mrseq	r0, (UNDEF: 0)
    490c:	0005159c 	muleq	r5, ip, r5
    4910:	20e01600 	rsccs	r1, r0, r0, lsl #12
    4914:	86010000 	strhi	r0, [r1], -r0
    4918:	0000c70a 	andeq	ip, r0, sl, lsl #14
    491c:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    4920:	0007e716 	andeq	lr, r7, r6, lsl r7
    4924:	0a860100 	beq	fe184d2c <dissarmedBit+0xde180dec>
    4928:	0000014c 	andeq	r0, r0, ip, asr #2
    492c:	00739102 	rsbseq	r9, r3, r2, lsl #2
    4930:	001fb815 	andseq	fp, pc, r5, lsl r8	; <UNPREDICTABLE>
    4934:	0a520100 	beq	1484d3c <startup-0x1eb7b2c4>
    4938:	200039b4 			; <UNDEFINED> instruction: 0x200039b4
    493c:	00000040 	andeq	r0, r0, r0, asr #32
    4940:	054a9c01 	strbeq	r9, [sl, #-3073]	; 0xfffff3ff
    4944:	f8160000 			; <UNDEFINED> instruction: 0xf8160000
    4948:	0100001c 	tsteq	r0, ip, lsl r0
    494c:	00c70a52 	sbceq	r0, r7, r2, asr sl
    4950:	91020000 	mrsls	r0, (UNDEF: 2)
    4954:	07e71674 			; <UNDEFINED> instruction: 0x07e71674
    4958:	52010000 	andpl	r0, r1, #0
    495c:	00014c0a 	andeq	r4, r1, sl, lsl #24
    4960:	73910200 	orrsvc	r0, r1, #0, 4
    4964:	20b41500 	adcscs	r1, r4, r0, lsl #10
    4968:	19010000 	stmdbne	r1, {}	; <UNPREDICTABLE>
    496c:	0039740a 	eorseq	r7, r9, sl, lsl #8
    4970:	00004020 	andeq	r4, r0, r0, lsr #32
    4974:	7f9c0100 	svcvc	0x009c0100
    4978:	16000005 	strne	r0, [r0], -r5
    497c:	00001e02 	andeq	r1, r0, r2, lsl #28
    4980:	c70a1901 	strgt	r1, [sl, -r1, lsl #18]
    4984:	02000000 	andeq	r0, r0, #0
    4988:	e7167491 			; <UNDEFINED> instruction: 0xe7167491
    498c:	01000007 	tsteq	r0, r7
    4990:	014c0a19 	cmpeq	ip, r9, lsl sl
    4994:	91020000 	mrsls	r0, (UNDEF: 2)
    4998:	b0150073 	andslt	r0, r5, r3, ror r0
    499c:	0100001d 	tsteq	r0, sp, lsl r0
    49a0:	393409fb 	ldmdbcc	r4!, {r0, r1, r3, r4, r5, r6, r7, r8, fp}
    49a4:	00402000 	subeq	r2, r0, r0
    49a8:	9c010000 	stcls	0, cr0, [r1], {-0}
    49ac:	000005b4 			; <UNDEFINED> instruction: 0x000005b4
    49b0:	001de916 	andseq	lr, sp, r6, lsl r9
    49b4:	09fb0100 	ldmibeq	fp!, {r8}^
    49b8:	000000c7 	andeq	r0, r0, r7, asr #1
    49bc:	16749102 	ldrbtne	r9, [r4], -r2, lsl #2
    49c0:	000007e7 	andeq	r0, r0, r7, ror #15
    49c4:	4c09fb01 			; <UNDEFINED> instruction: 0x4c09fb01
    49c8:	02000001 	andeq	r0, r0, #1
    49cc:	15007391 	strne	r7, [r0, #-913]	; 0xfffffc6f
    49d0:	000021c5 	andeq	r2, r0, r5, asr #3
    49d4:	f409db01 			; <UNDEFINED> instruction: 0xf409db01
    49d8:	40200038 	eormi	r0, r0, r8, lsr r0
    49dc:	01000000 	mrseq	r0, (UNDEF: 0)
    49e0:	0005e99c 	muleq	r5, ip, r9
    49e4:	1aea1600 	bne	ffa8a1ec <dissarmedBit+0xdfa862ac>
    49e8:	db010000 	blle	449f0 <startup-0x1ffbb610>
    49ec:	0000c709 	andeq	ip, r0, r9, lsl #14
    49f0:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    49f4:	0007e716 	andeq	lr, r7, r6, lsl r7
    49f8:	09db0100 	ldmibeq	fp, {r8}^
    49fc:	0000014c 	andeq	r0, r0, ip, asr #2
    4a00:	00739102 	rsbseq	r9, r3, r2, lsl #2
    4a04:	001eb615 	andseq	fp, lr, r5, lsl r6
    4a08:	09aa0100 	stmibeq	sl!, {r8}
    4a0c:	200038b4 			; <UNDEFINED> instruction: 0x200038b4
    4a10:	00000040 	andeq	r0, r0, r0, asr #32
    4a14:	061e9c01 	ldreq	r9, [lr], -r1, lsl #24
    4a18:	e0160000 	ands	r0, r6, r0
    4a1c:	01000020 	tsteq	r0, r0, lsr #32
    4a20:	00c709aa 	sbceq	r0, r7, sl, lsr #19
    4a24:	91020000 	mrsls	r0, (UNDEF: 2)
    4a28:	07e71674 			; <UNDEFINED> instruction: 0x07e71674
    4a2c:	aa010000 	bge	44a34 <startup-0x1ffbb5cc>
    4a30:	00014c09 	andeq	r4, r1, r9, lsl #24
    4a34:	73910200 	orrsvc	r0, r1, #0, 4
    4a38:	1a881500 	bne	fe209e40 <dissarmedBit+0xde205f00>
    4a3c:	7b010000 	blvc	44a44 <startup-0x1ffbb5bc>
    4a40:	00387409 	eorseq	r7, r8, r9, lsl #8
    4a44:	00004020 	andeq	r4, r0, r0, lsr #32
    4a48:	539c0100 	orrspl	r0, ip, #0, 2
    4a4c:	16000006 	strne	r0, [r0], -r6
    4a50:	00001cf8 	strdeq	r1, [r0], -r8
    4a54:	c7097b01 	strgt	r7, [r9, -r1, lsl #22]
    4a58:	02000000 	andeq	r0, r0, #0
    4a5c:	e7167491 			; <UNDEFINED> instruction: 0xe7167491
    4a60:	01000007 	tsteq	r0, r7
    4a64:	014c097b 	hvceq	49307	; 0xc09b
    4a68:	91020000 	mrsls	r0, (UNDEF: 2)
    4a6c:	9a150073 	bls	544c40 <startup-0x1fabb3c0>
    4a70:	0100001b 	tsteq	r0, fp, lsl r0
    4a74:	38340945 	ldmdacc	r4!, {r0, r2, r6, r8, fp}
    4a78:	00402000 	subeq	r2, r0, r0
    4a7c:	9c010000 	stcls	0, cr0, [r1], {-0}
    4a80:	00000688 	andeq	r0, r0, r8, lsl #13
    4a84:	001e0216 	andseq	r0, lr, r6, lsl r2
    4a88:	09450100 	stmdbeq	r5, {r8}^
    4a8c:	000000c7 	andeq	r0, r0, r7, asr #1
    4a90:	16749102 	ldrbtne	r9, [r4], -r2, lsl #2
    4a94:	000007e7 	andeq	r0, r0, r7, ror #15
    4a98:	4c094501 	cfstr32mi	mvfx4, [r9], {1}
    4a9c:	02000001 	andeq	r0, r0, #1
    4aa0:	15007391 	strne	r7, [r0, #-913]	; 0xfffffc6f
    4aa4:	00001fa1 	andeq	r1, r0, r1, lsr #31
    4aa8:	f4092a01 	vst1.8	{d2-d3}, [r9], r1
    4aac:	40200037 	eormi	r0, r0, r7, lsr r0
    4ab0:	01000000 	mrseq	r0, (UNDEF: 0)
    4ab4:	0006bd9c 	muleq	r6, ip, sp
    4ab8:	1de91600 	stclne	6, cr1, [r9]
    4abc:	2a010000 	bcs	44ac4 <startup-0x1ffbb53c>
    4ac0:	0000c709 	andeq	ip, r0, r9, lsl #14
    4ac4:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    4ac8:	0007e716 	andeq	lr, r7, r6, lsl r7
    4acc:	092a0100 	stmdbeq	sl!, {r8}
    4ad0:	0000014c 	andeq	r0, r0, ip, asr #2
    4ad4:	00739102 	rsbseq	r9, r3, r2, lsl #2
    4ad8:	001bc815 	andseq	ip, fp, r5, lsl r8
    4adc:	090d0100 	stmdbeq	sp, {r8}
    4ae0:	200037b4 			; <UNDEFINED> instruction: 0x200037b4
    4ae4:	00000040 	andeq	r0, r0, r0, asr #32
    4ae8:	06f29c01 	ldrbteq	r9, [r2], r1, lsl #24
    4aec:	ea160000 	b	584af4 <startup-0x1fa7b50c>
    4af0:	0100001a 	tsteq	r0, sl, lsl r0
    4af4:	00c7090d 	sbceq	r0, r7, sp, lsl #18
    4af8:	91020000 	mrsls	r0, (UNDEF: 2)
    4afc:	07e71674 			; <UNDEFINED> instruction: 0x07e71674
    4b00:	0d010000 	stceq	0, cr0, [r1, #-0]
    4b04:	00014c09 	andeq	r4, r1, r9, lsl #24
    4b08:	73910200 	orrsvc	r0, r1, #0, 4
    4b0c:	20611500 	rsbcs	r1, r1, r0, lsl #10
    4b10:	e3010000 	movw	r0, #4096	; 0x1000
    4b14:	00377408 	eorseq	r7, r7, r8, lsl #8
    4b18:	00004020 	andeq	r4, r0, r0, lsr #32
    4b1c:	279c0100 	ldrcs	r0, [ip, r0, lsl #2]
    4b20:	16000007 	strne	r0, [r0], -r7
    4b24:	000020e0 	andeq	r2, r0, r0, ror #1
    4b28:	c708e301 	strgt	lr, [r8, -r1, lsl #6]
    4b2c:	02000000 	andeq	r0, r0, #0
    4b30:	e7167491 			; <UNDEFINED> instruction: 0xe7167491
    4b34:	01000007 	tsteq	r0, r7
    4b38:	014c08e3 	smlaltteq	r0, ip, r3, r8
    4b3c:	91020000 	mrsls	r0, (UNDEF: 2)
    4b40:	56150073 			; <UNDEFINED> instruction: 0x56150073
    4b44:	01000021 	tsteq	r0, r1, lsr #32
    4b48:	373408af 	ldrcc	r0, [r4, -pc, lsr #17]!
    4b4c:	00402000 	subeq	r2, r0, r0
    4b50:	9c010000 	stcls	0, cr0, [r1], {-0}
    4b54:	0000075c 	andeq	r0, r0, ip, asr r7
    4b58:	001cf816 	andseq	pc, ip, r6, lsl r8	; <UNPREDICTABLE>
    4b5c:	08af0100 	stmiaeq	pc!, {r8}	; <UNPREDICTABLE>
    4b60:	000000c7 	andeq	r0, r0, r7, asr #1
    4b64:	16749102 	ldrbtne	r9, [r4], -r2, lsl #2
    4b68:	000007e7 	andeq	r0, r0, r7, ror #15
    4b6c:	4c08af01 	stcmi	15, cr10, [r8], {1}
    4b70:	02000001 	andeq	r0, r0, #1
    4b74:	15007391 	strne	r7, [r0, #-913]	; 0xfffffc6f
    4b78:	000021e2 	andeq	r2, r0, r2, ror #3
    4b7c:	f4087601 	vst1.8	{d7-d9}, [r8], r1
    4b80:	40200036 	eormi	r0, r0, r6, lsr r0
    4b84:	01000000 	mrseq	r0, (UNDEF: 0)
    4b88:	0007919c 	muleq	r7, ip, r1
    4b8c:	1e021600 	cfmadd32ne	mvax0, mvfx1, mvfx2, mvfx0
    4b90:	76010000 	strvc	r0, [r1], -r0
    4b94:	0000c708 	andeq	ip, r0, r8, lsl #14
    4b98:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    4b9c:	0007e716 	andeq	lr, r7, r6, lsl r7
    4ba0:	08760100 	ldmdaeq	r6!, {r8}^
    4ba4:	0000014c 	andeq	r0, r0, ip, asr #2
    4ba8:	00739102 	rsbseq	r9, r3, r2, lsl #2
    4bac:	001b6a15 	andseq	r6, fp, r5, lsl sl
    4bb0:	08580100 	ldmdaeq	r8, {r8}^
    4bb4:	200036b4 			; <UNDEFINED> instruction: 0x200036b4
    4bb8:	00000040 	andeq	r0, r0, r0, asr #32
    4bbc:	07c69c01 	strbeq	r9, [r6, r1, lsl #24]
    4bc0:	e9160000 	ldmdb	r6, {}	; <UNPREDICTABLE>
    4bc4:	0100001d 	tsteq	r0, sp, lsl r0
    4bc8:	00c70858 	sbceq	r0, r7, r8, asr r8
    4bcc:	91020000 	mrsls	r0, (UNDEF: 2)
    4bd0:	07e71674 			; <UNDEFINED> instruction: 0x07e71674
    4bd4:	58010000 	stmdapl	r1, {}	; <UNPREDICTABLE>
    4bd8:	00014c08 	andeq	r4, r1, r8, lsl #24
    4bdc:	73910200 	orrsvc	r0, r1, #0, 4
    4be0:	1f701500 	svcne	0x00701500
    4be4:	38010000 	stmdacc	r1, {}	; <UNPREDICTABLE>
    4be8:	00367408 	eorseq	r7, r6, r8, lsl #8
    4bec:	00004020 	andeq	r4, r0, r0, lsr #32
    4bf0:	fb9c0100 	blx	fe704ffa <dissarmedBit+0xde7010ba>
    4bf4:	16000007 	strne	r0, [r0], -r7
    4bf8:	00001aea 	andeq	r1, r0, sl, ror #21
    4bfc:	c7083801 	strgt	r3, [r8, -r1, lsl #16]
    4c00:	02000000 	andeq	r0, r0, #0
    4c04:	e7167491 			; <UNDEFINED> instruction: 0xe7167491
    4c08:	01000007 	tsteq	r0, r7
    4c0c:	014c0838 	cmpeq	ip, r8, lsr r8
    4c10:	91020000 	mrsls	r0, (UNDEF: 2)
    4c14:	ef150073 	svc	0x00150073
    4c18:	01000020 	tsteq	r0, r0, lsr #32
    4c1c:	3658080e 	ldrbcc	r0, [r8], -lr, lsl #16
    4c20:	001c2000 	andseq	r2, ip, r0
    4c24:	9c010000 	stcls	0, cr0, [r1], {-0}
    4c28:	00000821 	andeq	r0, r0, r1, lsr #16
    4c2c:	001f5116 	andseq	r5, pc, r6, lsl r1	; <UNPREDICTABLE>
    4c30:	080e0100 	stmdaeq	lr, {r8}
    4c34:	000000c7 	andeq	r0, r0, r7, asr #1
    4c38:	00749102 	rsbseq	r9, r4, r2, lsl #2
    4c3c:	001d9015 	andseq	r9, sp, r5, lsl r0
    4c40:	078e0100 	streq	r0, [lr, r0, lsl #2]
    4c44:	2000361c 	andcs	r3, r0, ip, lsl r6
    4c48:	0000003c 	andeq	r0, r0, ip, lsr r0
    4c4c:	08569c01 	ldmdaeq	r6, {r0, sl, fp, ip, pc}^
    4c50:	45160000 	ldrmi	r0, [r6, #-0]
    4c54:	0100001a 	tsteq	r0, sl, lsl r0
    4c58:	00c7078e 	sbceq	r0, r7, lr, lsl #15
    4c5c:	91020000 	mrsls	r0, (UNDEF: 2)
    4c60:	1b53186c 	blne	14cae18 <startup-0x1eb351e8>
    4c64:	90010000 	andls	r0, r1, r0
    4c68:	0000c707 	andeq	ip, r0, r7, lsl #14
    4c6c:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    4c70:	1aa41500 	bne	fe90a078 <dissarmedBit+0xde906138>
    4c74:	2b010000 	blcs	44c7c <startup-0x1ffbb384>
    4c78:	0035dc07 	eorseq	sp, r5, r7, lsl #24
    4c7c:	00004020 	andeq	r4, r0, r0, lsr #32
    4c80:	8b9c0100 	blhi	fe705088 <dissarmedBit+0xde701148>
    4c84:	16000008 	strne	r0, [r0], -r8
    4c88:	00001a36 	andeq	r1, r0, r6, lsr sl
    4c8c:	c7072b01 	strgt	r2, [r7, -r1, lsl #22]
    4c90:	02000000 	andeq	r0, r0, #0
    4c94:	53186c91 	tstpl	r8, #37120	; 0x9100
    4c98:	0100001b 	tsteq	r0, fp, lsl r0
    4c9c:	00c7072d 	sbceq	r0, r7, sp, lsr #14
    4ca0:	91020000 	mrsls	r0, (UNDEF: 2)
    4ca4:	1d150074 	ldcne	0, cr0, [r5, #-464]	; 0xfffffe30
    4ca8:	0100001e 	tsteq	r0, lr, lsl r0
    4cac:	35a0070b 	strcc	r0, [r0, #1803]!	; 0x70b
    4cb0:	003c2000 	eorseq	r2, ip, r0
    4cb4:	9c010000 	stcls	0, cr0, [r1], {-0}
    4cb8:	000008c0 	andeq	r0, r0, r0, asr #17
    4cbc:	001e6616 	andseq	r6, lr, r6, lsl r6
    4cc0:	070b0100 	streq	r0, [fp, -r0, lsl #2]
    4cc4:	000000c7 	andeq	r0, r0, r7, asr #1
    4cc8:	186c9102 	stmdane	ip!, {r1, r8, ip, pc}^
    4ccc:	00001b53 	andeq	r1, r0, r3, asr fp
    4cd0:	c7070d01 	strgt	r0, [r7, -r1, lsl #26]
    4cd4:	02000000 	andeq	r0, r0, #0
    4cd8:	15007491 	strne	r7, [r0, #-1169]	; 0xfffffb6f
    4cdc:	00001f22 	andeq	r1, r0, r2, lsr #30
    4ce0:	6406ea01 	strvs	lr, [r6], #-2561	; 0xfffff5ff
    4ce4:	3c200035 	stccc	0, cr0, [r0], #-212	; 0xffffff2c
    4ce8:	01000000 	mrseq	r0, (UNDEF: 0)
    4cec:	0008f59c 	muleq	r8, ip, r5
    4cf0:	1d791600 	ldclne	6, cr1, [r9, #-0]
    4cf4:	ea010000 	b	44cfc <startup-0x1ffbb304>
    4cf8:	0000c706 	andeq	ip, r0, r6, lsl #14
    4cfc:	6c910200 	lfmvs	f0, 4, [r1], {0}
    4d00:	001b5318 	andseq	r5, fp, r8, lsl r3
    4d04:	06ec0100 	strbteq	r0, [ip], r0, lsl #2
    4d08:	000000c7 	andeq	r0, r0, r7, asr #1
    4d0c:	00749102 	rsbseq	r9, r4, r2, lsl #2
    4d10:	001bb115 	andseq	fp, fp, r5, lsl r1
    4d14:	06c60100 	strbeq	r0, [r6], r0, lsl #2
    4d18:	20003528 	andcs	r3, r0, r8, lsr #10
    4d1c:	0000003c 	andeq	r0, r0, ip, lsr r0
    4d20:	092a9c01 	stmdbeq	sl!, {r0, sl, fp, ip, pc}
    4d24:	62160000 	andsvs	r0, r6, #0
    4d28:	0100001d 	tsteq	r0, sp, lsl r0
    4d2c:	00c706c6 	sbceq	r0, r7, r6, asr #13
    4d30:	91020000 	mrsls	r0, (UNDEF: 2)
    4d34:	1b53186c 	blne	14caeec <startup-0x1eb35114>
    4d38:	c8010000 	stmdagt	r1, {}	; <UNPREDICTABLE>
    4d3c:	0000c706 	andeq	ip, r0, r6, lsl #14
    4d40:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    4d44:	21041500 	tstcs	r4, r0, lsl #10
    4d48:	ab010000 	blge	44d50 <startup-0x1ffbb2b0>
    4d4c:	00350c06 	eorseq	r0, r5, r6, lsl #24
    4d50:	00001c20 	andeq	r1, r0, r0, lsr #24
    4d54:	509c0100 	addspl	r0, ip, r0, lsl #2
    4d58:	16000009 	strne	r0, [r0], -r9
    4d5c:	00001edc 	ldrdeq	r1, [r0], -ip
    4d60:	c706ab01 	strgt	sl, [r6, -r1, lsl #22]
    4d64:	02000000 	andeq	r0, r0, #0
    4d68:	15007491 	strne	r7, [r0, #-1169]	; 0xfffffb6f
    4d6c:	00001c92 	muleq	r0, r2, ip
    4d70:	ec05ef01 	stc	15, cr14, [r5], {1}
    4d74:	20200034 	eorcs	r0, r0, r4, lsr r0
    4d78:	01000000 	mrseq	r0, (UNDEF: 0)
    4d7c:	0009769c 	muleq	r9, ip, r6
    4d80:	07e71600 	strbeq	r1, [r7, r0, lsl #12]!
    4d84:	ef010000 	svc	0x00010000
    4d88:	00014c05 	andeq	r4, r1, r5, lsl #24
    4d8c:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    4d90:	1e371500 	cfabs32ne	mvfx1, mvfx7
    4d94:	de010000 	cdple	0, 0, cr0, cr1, cr0, {0}
    4d98:	0034cc05 	eorseq	ip, r4, r5, lsl #24
    4d9c:	00002020 	andeq	r2, r0, r0, lsr #32
    4da0:	9c9c0100 	ldflss	f0, [ip], {0}
    4da4:	16000009 	strne	r0, [r0], -r9
    4da8:	000007e7 	andeq	r0, r0, r7, ror #15
    4dac:	4c05de01 	stcmi	14, cr13, [r5], {1}
    4db0:	02000001 	andeq	r0, r0, #1
    4db4:	15007791 	strne	r7, [r0, #-1937]	; 0xfffff86f
    4db8:	000021aa 	andeq	r2, r0, sl, lsr #3
    4dbc:	6c05be01 	stcvs	14, cr11, [r5], {1}
    4dc0:	60200034 	eorvs	r0, r0, r4, lsr r0
    4dc4:	01000000 	mrseq	r0, (UNDEF: 0)
    4dc8:	0009d19c 	muleq	r9, ip, r1
    4dcc:	1d511600 	ldclne	6, cr1, [r1, #-0]
    4dd0:	be010000 	cdplt	0, 0, cr0, cr1, cr0, {0}
    4dd4:	0000c705 	andeq	ip, r0, r5, lsl #14
    4dd8:	6c910200 	lfmvs	f0, 4, [r1], {0}
    4ddc:	001b5318 	andseq	r5, fp, r8, lsl r3
    4de0:	05c00100 	strbeq	r0, [r0, #256]	; 0x100
    4de4:	000000c7 	andeq	r0, r0, r7, asr #1
    4de8:	00749102 	rsbseq	r9, r4, r2, lsl #2
    4dec:	00204f1b 	eoreq	r4, r0, fp, lsl pc
    4df0:	05250100 	streq	r0, [r5, #-256]!	; 0xffffff00
    4df4:	20003314 	andcs	r3, r0, r4, lsl r3
    4df8:	00000158 	andeq	r0, r0, r8, asr r1
    4dfc:	0a519c01 	beq	146be08 <startup-0x1eb941f8>
    4e00:	03160000 	tsteq	r6, #0
    4e04:	0100001b 	tsteq	r0, fp, lsl r0
    4e08:	0a510525 	beq	14462a4 <startup-0x1ebb9d5c>
    4e0c:	91020000 	mrsls	r0, (UNDEF: 2)
    4e10:	6d741a5c 	vldmdbvs	r4!, {s3-s94}
    4e14:	27010070 	smlsdxcs	r1, r0, r0, r0
    4e18:	0000c705 	andeq	ip, r0, r5, lsl #14
    4e1c:	70910200 	addsvc	r0, r1, r0, lsl #4
    4e20:	001d4b18 	andseq	r4, sp, r8, lsl fp
    4e24:	05270100 	streq	r0, [r7, #-256]!	; 0xffffff00
    4e28:	000000c7 	andeq	r0, r0, r7, asr #1
    4e2c:	186c9102 	stmdane	ip!, {r1, r8, ip, pc}^
    4e30:	00001d07 	andeq	r1, r0, r7, lsl #26
    4e34:	c7052701 	strgt	r2, [r5, -r1, lsl #14]
    4e38:	02000000 	andeq	r0, r0, #0
    4e3c:	74187491 	ldrvc	r7, [r8], #-1169	; 0xfffffb6f
    4e40:	0100001a 	tsteq	r0, sl, lsl r0
    4e44:	00c70527 	sbceq	r0, r7, r7, lsr #10
    4e48:	91020000 	mrsls	r0, (UNDEF: 2)
    4e4c:	21bb1868 			; <UNDEFINED> instruction: 0x21bb1868
    4e50:	27010000 	strcs	r0, [r1, -r0]
    4e54:	0000c705 	andeq	ip, r0, r5, lsl #14
    4e58:	64910200 	ldrvs	r0, [r1], #512	; 0x200
    4e5c:	001a6f18 	andseq	r6, sl, r8, lsl pc
    4e60:	05270100 	streq	r0, [r7, #-256]!	; 0xffffff00
    4e64:	000000c7 	andeq	r0, r0, r7, asr #1
    4e68:	00609102 	rsbeq	r9, r0, r2, lsl #2
    4e6c:	0387041c 	orreq	r0, r7, #28, 8	; 0x1c000000
    4e70:	d5150000 	ldrle	r0, [r5, #-0]
    4e74:	0100001f 	tsteq	r0, pc, lsl r0
    4e78:	32d804f1 	sbcscc	r0, r8, #-251658240	; 0xf1000000
    4e7c:	003c2000 	eorseq	r2, ip, r0
    4e80:	9c010000 	stcls	0, cr0, [r1], {-0}
    4e84:	00000a8c 	andeq	r0, r0, ip, lsl #21
    4e88:	001a0d16 	andseq	r0, sl, r6, lsl sp
    4e8c:	04f10100 	ldrbteq	r0, [r1], #256	; 0x100
    4e90:	000000c7 	andeq	r0, r0, r7, asr #1
    4e94:	186c9102 	stmdane	ip!, {r1, r8, ip, pc}^
    4e98:	00001b53 	andeq	r1, r0, r3, asr fp
    4e9c:	c704f301 	strgt	pc, [r4, -r1, lsl #6]
    4ea0:	02000000 	andeq	r0, r0, #0
    4ea4:	15007491 	strne	r7, [r0, #-1169]	; 0xfffffb6f
    4ea8:	00001b8a 	andeq	r1, r0, sl, lsl #23
    4eac:	a004d201 	andge	sp, r4, r1, lsl #4
    4eb0:	38200032 	stmdacc	r0!, {r1, r4, r5}
    4eb4:	01000000 	mrseq	r0, (UNDEF: 0)
    4eb8:	000ac19c 	muleq	sl, ip, r1
    4ebc:	1a0d1600 	bne	34a6c4 <startup-0x1fcb593c>
    4ec0:	d2010000 	andle	r0, r1, #0
    4ec4:	0000c704 	andeq	ip, r0, r4, lsl #14
    4ec8:	6c910200 	lfmvs	f0, 4, [r1], {0}
    4ecc:	001b5318 	andseq	r5, fp, r8, lsl r3
    4ed0:	04d40100 	ldrbeq	r0, [r4], #256	; 0x100
    4ed4:	000000c7 	andeq	r0, r0, r7, asr #1
    4ed8:	00749102 	rsbseq	r9, r4, r2, lsl #2
    4edc:	001bdf15 	andseq	sp, fp, r5, lsl pc
    4ee0:	04b30100 	ldrteq	r0, [r3], #256	; 0x100
    4ee4:	2000326c 	andcs	r3, r0, ip, ror #4
    4ee8:	00000034 	andeq	r0, r0, r4, lsr r0
    4eec:	0af69c01 	beq	ffdabef8 <dissarmedBit+0xdfda7fb8>
    4ef0:	26160000 	ldrcs	r0, [r6], -r0
    4ef4:	0100001d 	tsteq	r0, sp, lsl r0
    4ef8:	00c704b3 	strheq	r0, [r7], #67	; 0x43
    4efc:	91020000 	mrsls	r0, (UNDEF: 2)
    4f00:	1b53186c 	blne	14cb0b8 <startup-0x1eb34f48>
    4f04:	b5010000 	strlt	r0, [r1, #-0]
    4f08:	0000c704 	andeq	ip, r0, r4, lsl #14
    4f0c:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    4f10:	1cbf1d00 	ldcne	13, cr1, [pc]	; 4f18 <startup-0x1fffb0e8>
    4f14:	9a010000 	bls	44f1c <startup-0x1ffbb0e4>
    4f18:	00009704 	andeq	r9, r0, r4, lsl #14
    4f1c:	00325000 	eorseq	r5, r2, r0
    4f20:	00001c20 	andeq	r1, r0, r0, lsr #24
    4f24:	159c0100 	ldrne	r0, [ip, #256]	; 0x100
    4f28:	00001bee 	andeq	r1, r0, lr, ror #23
    4f2c:	1c047d01 	stcne	13, cr7, [r4], {1}
    4f30:	34200032 	strtcc	r0, [r0], #-50	; 0xffffffce
    4f34:	01000000 	mrseq	r0, (UNDEF: 0)
    4f38:	000b419c 	muleq	fp, ip, r1
    4f3c:	1fe51600 	svcne	0x00e51600
    4f40:	7d010000 	stcvc	0, cr0, [r1, #-0]
    4f44:	0000c704 	andeq	ip, r0, r4, lsl #14
    4f48:	6c910200 	lfmvs	f0, 4, [r1], {0}
    4f4c:	001b5318 	andseq	r5, fp, r8, lsl r3
    4f50:	047f0100 	ldrbteq	r0, [pc], #-256	; 4f58 <startup-0x1fffb0a8>
    4f54:	000000c7 	andeq	r0, r0, r7, asr #1
    4f58:	00749102 	rsbseq	r9, r4, r2, lsl #2
    4f5c:	00211515 	eoreq	r1, r1, r5, lsl r5
    4f60:	03b50100 			; <UNDEFINED> instruction: 0x03b50100
    4f64:	200031e0 	andcs	r3, r0, r0, ror #3
    4f68:	0000003c 	andeq	r0, r0, ip, lsr r0
    4f6c:	0b859c01 	bleq	fe16bf78 <dissarmedBit+0xde168038>
    4f70:	cd160000 	ldcgt	0, cr0, [r6, #-0]
    4f74:	0100001e 	tsteq	r0, lr, lsl r0
    4f78:	00c703b5 	strheq	r0, [r7], #53	; 0x35
    4f7c:	91020000 	mrsls	r0, (UNDEF: 2)
    4f80:	1e11166c 	cfmsub32ne	mvax3, mvfx1, mvfx1, mvfx12
    4f84:	b5010000 	strlt	r0, [r1, #-0]
    4f88:	0000c703 	andeq	ip, r0, r3, lsl #14
    4f8c:	68910200 	ldmvs	r1, {r9}
    4f90:	001b5318 	andseq	r5, fp, r8, lsl r3
    4f94:	03b70100 			; <UNDEFINED> instruction: 0x03b70100
    4f98:	000000c7 	andeq	r0, r0, r7, asr #1
    4f9c:	00749102 	rsbseq	r9, r4, r2, lsl #2
    4fa0:	001d1715 	andseq	r1, sp, r5, lsl r7
    4fa4:	03880100 	orreq	r0, r8, #0, 2
    4fa8:	200031a0 	andcs	r3, r0, r0, lsr #3
    4fac:	00000040 	andeq	r0, r0, r0, asr #32
    4fb0:	0bc99c01 	bleq	ff26bfbc <dissarmedBit+0xdf26807c>
    4fb4:	79160000 	ldmdbvc	r6, {}	; <UNPREDICTABLE>
    4fb8:	0100001a 	tsteq	r0, sl, lsl r0
    4fbc:	00c70388 	sbceq	r0, r7, r8, lsl #7
    4fc0:	91020000 	mrsls	r0, (UNDEF: 2)
    4fc4:	1eaa166c 	cdpne	6, 10, cr1, cr10, cr12, {3}
    4fc8:	88010000 	stmdahi	r1, {}	; <UNPREDICTABLE>
    4fcc:	0000c703 	andeq	ip, r0, r3, lsl #14
    4fd0:	68910200 	ldmvs	r1, {r9}
    4fd4:	001b5318 	andseq	r5, fp, r8, lsl r3
    4fd8:	038a0100 	orreq	r0, sl, #0, 2
    4fdc:	000000c7 	andeq	r0, r0, r7, asr #1
    4fe0:	00749102 	rsbseq	r9, r4, r2, lsl #2
    4fe4:	001e4b15 	andseq	r4, lr, r5, lsl fp
    4fe8:	036f0100 	cmneq	pc, #0, 2
    4fec:	20003180 	andcs	r3, r0, r0, lsl #3
    4ff0:	00000020 	andeq	r0, r0, r0, lsr #32
    4ff4:	0bef9c01 	bleq	ffbec000 <dissarmedBit+0xdfbe80c0>
    4ff8:	e7160000 	ldr	r0, [r6, -r0]
    4ffc:	01000007 	tsteq	r0, r7
    5000:	014c036f 	cmpeq	ip, pc, ror #6
    5004:	91020000 	mrsls	r0, (UNDEF: 2)
    5008:	28150077 	ldmdacs	r5, {r0, r1, r2, r4, r5, r6}
    500c:	0100001a 	tsteq	r0, sl, lsl r0
    5010:	3160035d 	cmncc	r0, sp, asr r3
    5014:	00202000 	eoreq	r2, r0, r0
    5018:	9c010000 	stcls	0, cr0, [r1], {-0}
    501c:	00000c15 	andeq	r0, r0, r5, lsl ip
    5020:	0007e716 	andeq	lr, r7, r6, lsl r7
    5024:	035d0100 	cmpeq	sp, #0, 2
    5028:	0000014c 	andeq	r0, r0, ip, asr #2
    502c:	00779102 	rsbseq	r9, r7, r2, lsl #2
    5030:	001e7515 	andseq	r7, lr, r5, lsl r5
    5034:	03490100 	movteq	r0, #37120	; 0x9100
    5038:	20003130 	andcs	r3, r0, r0, lsr r1
    503c:	00000030 	andeq	r0, r0, r0, lsr r0
    5040:	0c599c01 	mrrceq	12, 0, r9, r9, cr1	; <UNPREDICTABLE>
    5044:	39160000 	ldmdbcc	r6, {}	; <UNPREDICTABLE>
    5048:	0100001f 	tsteq	r0, pc, lsl r0
    504c:	00c70349 	sbceq	r0, r7, r9, asr #6
    5050:	91020000 	mrsls	r0, (UNDEF: 2)
    5054:	1f411674 	svcne	0x00411674
    5058:	49010000 	stmdbmi	r1, {}	; <UNPREDICTABLE>
    505c:	0000c703 	andeq	ip, r0, r3, lsl #14
    5060:	70910200 	addsvc	r0, r1, r0, lsl #4
    5064:	001f4916 	andseq	r4, pc, r6, lsl r9	; <UNPREDICTABLE>
    5068:	03490100 	movteq	r0, #37120	; 0x9100
    506c:	000000c7 	andeq	r0, r0, r7, asr #1
    5070:	006c9102 	rsbeq	r9, ip, r2, lsl #2
    5074:	001d3115 	andseq	r3, sp, r5, lsl r1
    5078:	02dc0100 	sbcseq	r0, ip, #0, 2
    507c:	20003110 	andcs	r3, r0, r0, lsl r1
    5080:	00000020 	andeq	r0, r0, r0, lsr #32
    5084:	0c7f9c01 	ldcleq	12, cr9, [pc], #-4	; 5088 <startup-0x1fffaf78>
    5088:	e7160000 	ldr	r0, [r6, -r0]
    508c:	01000007 	tsteq	r0, r7
    5090:	014c02dc 	ldrdeq	r0, [ip, #-44]	; 0xffffffd4
    5094:	91020000 	mrsls	r0, (UNDEF: 2)
    5098:	cd150077 	ldcgt	0, cr0, [r5, #-476]	; 0xfffffe24
    509c:	0100001d 	tsteq	r0, sp, lsl r0
    50a0:	30e80251 	rsccc	r0, r8, r1, asr r2
    50a4:	00282000 	eoreq	r2, r8, r0
    50a8:	9c010000 	stcls	0, cr0, [r1], {-0}
    50ac:	00000cb4 			; <UNDEFINED> instruction: 0x00000cb4
    50b0:	00204716 	eoreq	r4, r0, r6, lsl r7
    50b4:	02510100 	subseq	r0, r1, #0, 2
    50b8:	000000c7 	andeq	r0, r0, r7, asr #1
    50bc:	16749102 	ldrbtne	r9, [r4], -r2, lsl #2
    50c0:	0000208c 	andeq	r2, r0, ip, lsl #1
    50c4:	c7025101 	strgt	r5, [r2, -r1, lsl #2]
    50c8:	02000000 	andeq	r0, r0, #0
    50cc:	15007091 	strne	r7, [r0, #-145]	; 0xffffff6f
    50d0:	00001f65 	andeq	r1, r0, r5, ror #30
    50d4:	c8023301 	stmdagt	r2, {r0, r8, r9, ip, sp}
    50d8:	20200030 	eorcs	r0, r0, r0, lsr r0
    50dc:	01000000 	mrseq	r0, (UNDEF: 0)
    50e0:	000cda9c 	muleq	ip, ip, sl
    50e4:	07e71600 	strbeq	r1, [r7, r0, lsl #12]!
    50e8:	33010000 	movwcc	r0, #4096	; 0x1000
    50ec:	00014c02 	andeq	r4, r1, r2, lsl #24
    50f0:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    50f4:	21821500 	orrcs	r1, r2, r0, lsl #10
    50f8:	1b010000 	blne	45100 <startup-0x1ffbaf00>
    50fc:	00308c02 	eorseq	r8, r0, r2, lsl #24
    5100:	00003c20 	andeq	r3, r0, r0, lsr #24
    5104:	3c9c0100 	ldfccs	f0, [ip], {0}
    5108:	1600000d 	strne	r0, [r0], -sp
    510c:	00001cb1 			; <UNDEFINED> instruction: 0x00001cb1
    5110:	c7021b01 	strgt	r1, [r2, -r1, lsl #22]
    5114:	02000000 	andeq	r0, r0, #0
    5118:	e5167491 	ldr	r7, [r6, #-1169]	; 0xfffffb6f
    511c:	0100001a 	tsteq	r0, sl, lsl r0
    5120:	00c7021b 	sbceq	r0, r7, fp, lsl r2
    5124:	91020000 	mrsls	r0, (UNDEF: 2)
    5128:	1a9f1670 	bne	fe7caaf0 <dissarmedBit+0xde7c6bb0>
    512c:	1b010000 	blne	45134 <startup-0x1ffbaecc>
    5130:	0000c702 	andeq	ip, r0, r2, lsl #14
    5134:	6c910200 	lfmvs	f0, 4, [r1], {0}
    5138:	001abe16 	andseq	fp, sl, r6, lsl lr
    513c:	021b0100 	andseq	r0, fp, #0, 2
    5140:	000000c7 	andeq	r0, r0, r7, asr #1
    5144:	16689102 	strbtne	r9, [r8], -r2, lsl #2
    5148:	00001ac3 	andeq	r1, r0, r3, asr #21
    514c:	c7021b01 	strgt	r1, [r2, -r1, lsl #22]
    5150:	02000000 	andeq	r0, r0, #0
    5154:	15000091 	strne	r0, [r0, #-145]	; 0xffffff6f
    5158:	0000213d 	andeq	r2, r0, sp, lsr r1
    515c:	6c01b801 	stcvs	8, cr11, [r1], {1}
    5160:	20200030 	eorcs	r0, r0, r0, lsr r0
    5164:	01000000 	mrseq	r0, (UNDEF: 0)
    5168:	000d629c 	muleq	sp, ip, r2
    516c:	07e71600 	strbeq	r1, [r7, r0, lsl #12]!
    5170:	b8010000 	stmdalt	r1, {}	; <UNPREDICTABLE>
    5174:	00014c01 	andeq	r4, r1, r1, lsl #24
    5178:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    517c:	1bff1500 	blne	fffca584 <dissarmedBit+0xdffc6644>
    5180:	90010000 	andls	r0, r1, r0
    5184:	00302801 	eorseq	r2, r0, r1, lsl #16
    5188:	00004420 	andeq	r4, r0, r0, lsr #8
    518c:	889c0100 	ldmhi	ip, {r8}
    5190:	1600000d 	strne	r0, [r0], -sp
    5194:	00001a16 	andeq	r1, r0, r6, lsl sl
    5198:	97019001 	strls	r9, [r1, -r1]
    519c:	02000000 	andeq	r0, r0, #0
    51a0:	15007791 	strne	r7, [r0, #-1937]	; 0xfffff86f
    51a4:	00001dde 	ldrdeq	r1, [r0], -lr
    51a8:	08017701 	stmdaeq	r1, {r0, r8, r9, sl, ip, sp, lr}
    51ac:	20200030 	eorcs	r0, r0, r0, lsr r0
    51b0:	01000000 	mrseq	r0, (UNDEF: 0)
    51b4:	000dae9c 	muleq	sp, ip, lr
    51b8:	07e71600 	strbeq	r1, [r7, r0, lsl #12]!
    51bc:	77010000 	strvc	r0, [r1, -r0]
    51c0:	00014c01 	andeq	r4, r1, r1, lsl #24
    51c4:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    51c8:	201f1500 	andscs	r1, pc, r0, lsl #10
    51cc:	53010000 	movwpl	r0, #4096	; 0x1000
    51d0:	002fca01 	eoreq	ip, pc, r1, lsl #20
    51d4:	00003e20 	andeq	r3, r0, r0, lsr #28
    51d8:	e39c0100 	orrs	r0, ip, #0, 2
    51dc:	1600000d 	strne	r0, [r0], -sp
    51e0:	00002029 	andeq	r2, r0, r9, lsr #32
    51e4:	97015301 	strls	r5, [r1, -r1, lsl #6]
    51e8:	02000000 	andeq	r0, r0, #0
    51ec:	53186f91 	tstpl	r8, #580	; 0x244
    51f0:	0100001b 	tsteq	r0, fp, lsl r0
    51f4:	00c70155 	sbceq	r0, r7, r5, asr r1
    51f8:	91020000 	mrsls	r0, (UNDEF: 2)
    51fc:	d31e0074 	tstle	lr, #116	; 0x74
    5200:	0100001c 	tsteq	r0, ip, lsl r0
    5204:	01730134 	cmneq	r3, r4, lsr r1
    5208:	2f6c0000 	svccs	0x006c0000
    520c:	005e2000 	subseq	r2, lr, r0
    5210:	9c010000 	stcls	0, cr0, [r1], {-0}
    5214:	00000e2b 	andeq	r0, r0, fp, lsr #28
    5218:	0020d118 	eoreq	sp, r0, r8, lsl r1
    521c:	01360100 	teqeq	r6, r0, lsl #2
    5220:	000000d2 	ldrdeq	r0, [r0], -r2
    5224:	18689102 	stmdane	r8!, {r1, r8, ip, pc}^
    5228:	00000741 	andeq	r0, r0, r1, asr #14
    522c:	73013701 	movwvc	r3, #5889	; 0x1701
    5230:	02000001 	andeq	r0, r0, #1
    5234:	3d186f91 	ldccc	15, cr6, [r8, #-580]	; 0xfffffdbc
    5238:	01000020 	tsteq	r0, r0, lsr #32
    523c:	01190138 	tsteq	r9, r8, lsr r1
    5240:	91020000 	mrsls	r0, (UNDEF: 2)
    5244:	1415006e 	ldrne	r0, [r5], #-110	; 0xffffff92
    5248:	0100001f 	tsteq	r0, pc, lsl r0
    524c:	2f44011c 	svccs	0x0044011c
    5250:	00282000 	eoreq	r2, r8, r0
    5254:	9c010000 	stcls	0, cr0, [r1], {-0}
    5258:	00000e51 	andeq	r0, r0, r1, asr lr
    525c:	001ff616 	andseq	pc, pc, r6, lsl r6	; <UNPREDICTABLE>
    5260:	011c0100 	tsteq	ip, r0, lsl #2
    5264:	00000097 	muleq	r0, r7, r0
    5268:	00779102 	rsbseq	r9, r7, r2, lsl #2
    526c:	0020811f 	eoreq	r8, r0, pc, lsl r1
    5270:	d4e10100 	strbtle	r0, [r1], #256	; 0x100
    5274:	7020002e 	eorvc	r0, r0, lr, lsr #32
    5278:	01000000 	mrseq	r0, (UNDEF: 0)
    527c:	01a9009c 			; <UNDEFINED> instruction: 0x01a9009c
    5280:	00040000 	andeq	r0, r4, r0
    5284:	000012ac 	andeq	r1, r0, ip, lsr #5
    5288:	00510104 	subseq	r0, r1, r4, lsl #2
    528c:	090c0000 	stmdbeq	ip, {}	; <UNPREDICTABLE>
    5290:	df000022 	svcle	0x00000022
    5294:	c4000001 	strgt	r0, [r0], #-1
    5298:	2820003b 	stmdacs	r0!, {r0, r1, r3, r4, r5}
    529c:	2f000001 	svccs	0x00000001
    52a0:	0200001c 	andeq	r0, r0, #28
    52a4:	011a0601 	tsteq	sl, r1, lsl #12
    52a8:	0a030000 	beq	c52b0 <startup-0x1ff3ad50>
    52ac:	02000000 	andeq	r0, r0, #0
    52b0:	0000372b 	andeq	r3, r0, fp, lsr #14
    52b4:	08010200 	stmdaeq	r1, {r9}
    52b8:	00000118 	andeq	r0, r0, r8, lsl r1
    52bc:	3c050202 	sfmcc	f0, 4, [r5], {2}
    52c0:	02000000 	andeq	r0, r0, #0
    52c4:	02810702 	addeq	r0, r1, #524288	; 0x80000
    52c8:	04020000 	streq	r0, [r2], #-0
    52cc:	00022d05 	andeq	r2, r2, r5, lsl #26
    52d0:	07040200 	streq	r0, [r4, -r0, lsl #4]
    52d4:	00000106 	andeq	r0, r0, r6, lsl #2
    52d8:	28050802 	stmdacs	r5, {r1, fp}
    52dc:	02000002 	andeq	r0, r0, #2
    52e0:	01010708 	tsteq	r1, r8, lsl #14
    52e4:	04040000 	streq	r0, [r4], #-0
    52e8:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
    52ec:	07040200 	streq	r0, [r4, -r0, lsl #4]
    52f0:	0000010b 	andeq	r0, r0, fp, lsl #2
    52f4:	00000c03 	andeq	r0, r0, r3, lsl #24
    52f8:	2c180300 	ldccs	3, cr0, [r8], {-0}
    52fc:	05000000 	streq	r0, [r0, #-0]
    5300:	b90c0467 	stmdblt	ip, {r0, r1, r2, r5, r6, sl}
    5304:	06000000 	streq	r0, [r0], -r0
    5308:	00002271 	andeq	r2, r0, r1, ror r2
    530c:	00b90e04 	adcseq	r0, r9, r4, lsl #28
    5310:	06000000 	streq	r0, [r0], -r0
    5314:	00002203 	andeq	r2, r0, r3, lsl #4
    5318:	00761104 	rsbseq	r1, r6, r4, lsl #2
    531c:	07640000 	strbeq	r0, [r4, -r0]!
    5320:	04006e69 	streq	r6, [r0], #-3689	; 0xfffff197
    5324:	00007614 	andeq	r7, r0, r4, lsl r6
    5328:	6f076500 	svcvs	0x00076500
    532c:	04007475 	streq	r7, [r0], #-1141	; 0xfffffb8b
    5330:	00007617 	andeq	r7, r0, r7, lsl r6
    5334:	08006600 	stmdaeq	r0, {r9, sl, sp, lr}
    5338:	00000076 	andeq	r0, r0, r6, ror r0
    533c:	000000c9 	andeq	r0, r0, r9, asr #1
    5340:	00006f09 	andeq	r6, r0, r9, lsl #30
    5344:	03006300 	movweq	r6, #768	; 0x300
    5348:	00002254 	andeq	r2, r0, r4, asr r2
    534c:	00811804 	addeq	r1, r1, r4, lsl #16
    5350:	7b0a0000 	blvc	285358 <startup-0x1fd7aca8>
    5354:	01000022 	tsteq	r0, r2, lsr #32
    5358:	0000762d 	andeq	r7, r0, sp, lsr #12
    535c:	003c8e00 	eorseq	r8, ip, r0, lsl #28
    5360:	00005e20 	andeq	r5, r0, r0, lsr #28
    5364:	0a9c0100 	beq	fe70576c <dissarmedBit+0xde70182c>
    5368:	0b000001 	bleq	5374 <startup-0x1fffac8c>
    536c:	00002290 	muleq	r0, r0, r2
    5370:	010a2d01 	tsteq	sl, r1, lsl #26
    5374:	91020000 	mrsls	r0, (UNDEF: 2)
    5378:	226c0b74 	rsbcs	r0, ip, #116, 22	; 0x1d000
    537c:	2d010000 	stccs	0, cr0, [r1, #-0]
    5380:	00000110 	andeq	r0, r0, r0, lsl r1
    5384:	00709102 	rsbseq	r9, r0, r2, lsl #2
    5388:	00c9040c 	sbceq	r0, r9, ip, lsl #8
    538c:	040c0000 	streq	r0, [ip], #-0
    5390:	00000076 	andeq	r0, r0, r6, ror r0
    5394:	0022590d 	eoreq	r5, r2, sp, lsl #18
    5398:	4e1f0100 	mufmie	f0, f7, f0
    539c:	4020003c 	eormi	r0, r0, ip, lsr r0
    53a0:	01000000 	mrseq	r0, (UNDEF: 0)
    53a4:	0001569c 	muleq	r1, ip, r6
    53a8:	22900b00 	addscs	r0, r0, #0, 22
    53ac:	1f010000 	svcne	0x00010000
    53b0:	0000010a 	andeq	r0, r0, sl, lsl #2
    53b4:	0b6c9102 	bleq	1b297c4 <startup-0x1e4d683c>
    53b8:	00002276 	andeq	r2, r0, r6, ror r2
    53bc:	00761f01 	rsbseq	r1, r6, r1, lsl #30
    53c0:	91020000 	mrsls	r0, (UNDEF: 2)
    53c4:	22970e6b 	addscs	r0, r7, #1712	; 0x6b0
    53c8:	21010000 	mrscs	r0, (UNDEF: 1)
    53cc:	00000076 	andeq	r0, r0, r6, ror r0
    53d0:	00779102 	rsbseq	r9, r7, r2, lsl #2
    53d4:	0021f90a 	eoreq	pc, r1, sl, lsl #18
    53d8:	760c0100 	strvc	r0, [ip], -r0, lsl #2
    53dc:	ec000000 	stc	0, cr0, [r0], {-0}
    53e0:	6220003b 	eorvs	r0, r0, #59	; 0x3b
    53e4:	01000000 	mrseq	r0, (UNDEF: 0)
    53e8:	00018c9c 	muleq	r1, ip, ip
    53ec:	22900b00 	addscs	r0, r0, #0, 22
    53f0:	0c010000 	stceq	0, cr0, [r1], {-0}
    53f4:	0000010a 	andeq	r0, r0, sl, lsl #2
    53f8:	0b749102 	bleq	1d29808 <startup-0x1e2d67f8>
    53fc:	00002276 	andeq	r2, r0, r6, ror r2
    5400:	00760c01 	rsbseq	r0, r6, r1, lsl #24
    5404:	91020000 	mrsls	r0, (UNDEF: 2)
    5408:	850f0073 	strhi	r0, [pc, #-115]	; 539d <startup-0x1fffac63>
    540c:	01000022 	tsteq	r0, r2, lsr #32
    5410:	003bc404 	eorseq	ip, fp, r4, lsl #8
    5414:	00002820 	andeq	r2, r0, r0, lsr #16
    5418:	0b9c0100 	bleq	fe705820 <dissarmedBit+0xde7018e0>
    541c:	00002290 	muleq	r0, r0, r2
    5420:	010a0401 	tsteq	sl, r1, lsl #8
    5424:	91020000 	mrsls	r0, (UNDEF: 2)
    5428:	Address 0x00005428 is out of bounds.


Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
       0:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
       4:	030b130e 	movweq	r1, #45838	; 0xb30e
       8:	110e1b0e 	tstne	lr, lr, lsl #22
       c:	10061201 	andne	r1, r6, r1, lsl #4
      10:	02000017 	andeq	r0, r0, #23
      14:	0b0b0024 	bleq	2c00ac <startup-0x1fd3ff54>
      18:	0e030b3e 	vmoveq.16	d3[0], r0
      1c:	16030000 	strne	r0, [r3], -r0
      20:	3a0e0300 	bcc	380c28 <startup-0x1fc7f3d8>
      24:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
      28:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
      2c:	0b0b0024 	bleq	2c00c4 <startup-0x1fd3ff3c>
      30:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
      34:	35050000 	strcc	r0, [r5, #-0]
      38:	00134900 	andseq	r4, r3, r0, lsl #18
      3c:	00340600 	eorseq	r0, r4, r0, lsl #12
      40:	0b3a0e03 	bleq	e83854 <startup-0x1f17c7ac>
      44:	1349053b 	movtne	r0, #38203	; 0x953b
      48:	193c193f 	ldmdbne	ip!, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
      4c:	34070000 	strcc	r0, [r7], #-0
      50:	3a0e0300 	bcc	380c58 <startup-0x1fc7f3a8>
      54:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
      58:	3c193f13 	ldccc	15, cr3, [r9], {19}
      5c:	08000019 	stmdaeq	r0, {r0, r3, r4}
      60:	0b3e0104 	bleq	f80478 <startup-0x1f07fb88>
      64:	13490b0b 	movtne	r0, #39691	; 0x9b0b
      68:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
      6c:	00001301 	andeq	r1, r0, r1, lsl #6
      70:	03002809 	movweq	r2, #2057	; 0x809
      74:	000b1c0e 	andeq	r1, fp, lr, lsl #24
      78:	00280a00 	eoreq	r0, r8, r0, lsl #20
      7c:	0b1c0803 	bleq	702090 <startup-0x1f8fdf70>
      80:	130b0000 	movwne	r0, #45056	; 0xb000
      84:	3a0b0b01 	bcc	2c2c90 <startup-0x1fd3d370>
      88:	010b3b0b 	tsteq	fp, fp, lsl #22
      8c:	0c000013 	stceq	0, cr0, [r0], {19}
      90:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
      94:	0b3b0b3a 	bleq	ec2d84 <startup-0x1f13d27c>
      98:	0b381349 	bleq	e04dc4 <startup-0x1f1fb23c>
      9c:	0d0d0000 	stceq	0, cr0, [sp, #-0]
      a0:	3a080300 	bcc	200ca8 <startup-0x1fdff358>
      a4:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
      a8:	000b3813 	andeq	r3, fp, r3, lsl r8
      ac:	01010e00 	tsteq	r1, r0, lsl #28
      b0:	13011349 	movwne	r1, #4937	; 0x1349
      b4:	210f0000 	mrscs	r0, CPSR
      b8:	2f134900 	svccs	0x00134900
      bc:	1000000b 	andne	r0, r0, fp
      c0:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
      c4:	0b3b0b3a 	bleq	ec2db4 <startup-0x1f13d24c>
      c8:	0b0b1349 	bleq	2c4df4 <startup-0x1fd3b20c>
      cc:	0b0c0b0d 	bleq	302d08 <startup-0x1fcfd2f8>
      d0:	00000b38 	andeq	r0, r0, r8, lsr fp
      d4:	03000d11 	movweq	r0, #3345	; 0xd11
      d8:	3b0b3a08 	blcc	2ce900 <startup-0x1fd31700>
      dc:	0b13490b 	bleq	4d2510 <startup-0x1fb2daf0>
      e0:	0c0b0d0b 	stceq	13, cr0, [fp], {11}
      e4:	000b380b 	andeq	r3, fp, fp, lsl #16
      e8:	00341200 	eorseq	r1, r4, r0, lsl #4
      ec:	0b3a0e03 	bleq	e83900 <startup-0x1f17c700>
      f0:	13490b3b 	movtne	r0, #39739	; 0x9b3b
      f4:	1802193f 	stmdane	r2, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
      f8:	34130000 	ldrcc	r0, [r3], #-0
      fc:	3a080300 	bcc	200d04 <startup-0x1fdff2fc>
     100:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     104:	02193f13 	andseq	r3, r9, #19, 30	; 0x4c
     108:	14000018 	strne	r0, [r0], #-24	; 0xffffffe8
     10c:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     110:	0b3a0e03 	bleq	e83924 <startup-0x1f17c6dc>
     114:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
     118:	06120111 			; <UNDEFINED> instruction: 0x06120111
     11c:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
     120:	00130119 	andseq	r0, r3, r9, lsl r1
     124:	00051500 	andeq	r1, r5, r0, lsl #10
     128:	0b3a0e03 	bleq	e8393c <startup-0x1f17c6c4>
     12c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     130:	00001802 	andeq	r1, r0, r2, lsl #16
     134:	03003416 	movweq	r3, #1046	; 0x416
     138:	3b0b3a0e 	blcc	2ce978 <startup-0x1fd31688>
     13c:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     140:	17000018 	smladne	r0, r8, r0, r0
     144:	0111010b 	tsteq	r1, fp, lsl #2
     148:	00000612 	andeq	r0, r0, r2, lsl r6
     14c:	03000518 	movweq	r0, #1304	; 0x518
     150:	3b0b3a08 	blcc	2ce978 <startup-0x1fd31688>
     154:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     158:	19000018 	stmdbne	r0, {r3, r4}
     15c:	0b0b000f 	bleq	2c01a0 <startup-0x1fd3fe60>
     160:	00001349 	andeq	r1, r0, r9, asr #6
     164:	3f002e1a 	svccc	0x00002e1a
     168:	3a0e0319 	bcc	380dd4 <startup-0x1fc7f22c>
     16c:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     170:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
     174:	96184006 	ldrls	r4, [r8], -r6
     178:	00001942 	andeq	r1, r0, r2, asr #18
     17c:	01110100 	tsteq	r1, r0, lsl #2
     180:	0b130e25 	bleq	4c3a1c <startup-0x1fb3c5e4>
     184:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
     188:	06120111 			; <UNDEFINED> instruction: 0x06120111
     18c:	00001710 	andeq	r1, r0, r0, lsl r7
     190:	0b002402 	bleq	91a0 <startup-0x1fff6e60>
     194:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
     198:	0300000e 	movweq	r0, #14
     19c:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
     1a0:	0b3b0b3a 	bleq	ec2e90 <startup-0x1f13d170>
     1a4:	00001349 	andeq	r1, r0, r9, asr #6
     1a8:	0b002404 	bleq	91c0 <startup-0x1fff6e40>
     1ac:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
     1b0:	05000008 	streq	r0, [r0, #-8]
     1b4:	13490035 	movtne	r0, #36917	; 0x9035
     1b8:	34060000 	strcc	r0, [r6], #-0
     1bc:	3a0e0300 	bcc	380dc4 <startup-0x1fc7f23c>
     1c0:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     1c4:	3c193f13 	ldccc	15, cr3, [r9], {19}
     1c8:	07000019 	smladeq	r0, r9, r0, r0
     1cc:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     1d0:	0b3b0b3a 	bleq	ec2ec0 <startup-0x1f13d140>
     1d4:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
     1d8:	0000193c 	andeq	r1, r0, ip, lsr r9
     1dc:	0b011308 	bleq	44e04 <startup-0x1ffbb1fc>
     1e0:	3b0b3a0b 	blcc	2cea14 <startup-0x1fd315ec>
     1e4:	0013010b 	andseq	r0, r3, fp, lsl #2
     1e8:	000d0900 	andeq	r0, sp, r0, lsl #18
     1ec:	0b3a0e03 	bleq	e83a00 <startup-0x1f17c600>
     1f0:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     1f4:	00000b38 	andeq	r0, r0, r8, lsr fp
     1f8:	03000d0a 	movweq	r0, #3338	; 0xd0a
     1fc:	3b0b3a08 	blcc	2cea24 <startup-0x1fd315dc>
     200:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
     204:	0b00000b 	bleq	238 <startup-0x1ffffdc8>
     208:	13490101 	movtne	r0, #37121	; 0x9101
     20c:	00001301 	andeq	r1, r0, r1, lsl #6
     210:	4900210c 	stmdbmi	r0, {r2, r3, r8, sp}
     214:	000b2f13 	andeq	r2, fp, r3, lsl pc
     218:	000d0d00 	andeq	r0, sp, r0, lsl #26
     21c:	0b3a0e03 	bleq	e83a30 <startup-0x1f17c5d0>
     220:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     224:	0b0d0b0b 	bleq	342e58 <startup-0x1fcbd1a8>
     228:	0b380b0c 	bleq	e02e60 <startup-0x1f1fd1a0>
     22c:	0d0e0000 	stceq	0, cr0, [lr, #-0]
     230:	3a080300 	bcc	200e38 <startup-0x1fdff1c8>
     234:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     238:	0d0b0b13 	vstreq	d0, [fp, #-76]	; 0xffffffb4
     23c:	380b0c0b 	stmdacc	fp, {r0, r1, r3, sl, fp}
     240:	0f00000b 	svceq	0x0000000b
     244:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     248:	0b3a0e03 	bleq	e83a5c <startup-0x1f17c5a4>
     24c:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
     250:	01111349 	tsteq	r1, r9, asr #6
     254:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     258:	01194297 			; <UNDEFINED> instruction: 0x01194297
     25c:	10000013 	andne	r0, r0, r3, lsl r0
     260:	08030005 	stmdaeq	r3, {r0, r2}
     264:	0b3b0b3a 	bleq	ec2f54 <startup-0x1f13d0ac>
     268:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
     26c:	0f110000 	svceq	0x00110000
     270:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
     274:	12000013 	andne	r0, r0, #19
     278:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
     27c:	0b3b0b3a 	bleq	ec2f6c <startup-0x1f13d094>
     280:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
     284:	34130000 	ldrcc	r0, [r3], #-0
     288:	3a0e0300 	bcc	380e90 <startup-0x1fc7f170>
     28c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     290:	00180213 	andseq	r0, r8, r3, lsl r2
     294:	012e1400 			; <UNDEFINED> instruction: 0x012e1400
     298:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
     29c:	0b3b0b3a 	bleq	ec2f8c <startup-0x1f13d074>
     2a0:	01111927 	tsteq	r1, r7, lsr #18
     2a4:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     2a8:	01194297 			; <UNDEFINED> instruction: 0x01194297
     2ac:	15000013 	strne	r0, [r0, #-19]	; 0xffffffed
     2b0:	0111010b 	tsteq	r1, fp, lsl #2
     2b4:	00000612 	andeq	r0, r0, r2, lsl r6
     2b8:	3f012e16 	svccc	0x00012e16
     2bc:	3a0e0319 	bcc	380f28 <startup-0x1fc7f0d8>
     2c0:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     2c4:	11134919 	tstne	r3, r9, lsl r9
     2c8:	40061201 	andmi	r1, r6, r1, lsl #4
     2cc:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
     2d0:	01000000 	mrseq	r0, (UNDEF: 0)
     2d4:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
     2d8:	0e030b13 	vmoveq.32	d3[0], r0
     2dc:	01110e1b 	tsteq	r1, fp, lsl lr
     2e0:	17100612 			; <UNDEFINED> instruction: 0x17100612
     2e4:	24020000 	strcs	r0, [r2], #-0
     2e8:	3e0b0b00 	vmlacc.f64	d0, d11, d0
     2ec:	000e030b 	andeq	r0, lr, fp, lsl #6
     2f0:	00160300 	andseq	r0, r6, r0, lsl #6
     2f4:	0b3a0e03 	bleq	e83b08 <startup-0x1f17c4f8>
     2f8:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     2fc:	24040000 	strcs	r0, [r4], #-0
     300:	3e0b0b00 	vmlacc.f64	d0, d11, d0
     304:	0008030b 	andeq	r0, r8, fp, lsl #6
     308:	00350500 	eorseq	r0, r5, r0, lsl #10
     30c:	00001349 	andeq	r1, r0, r9, asr #6
     310:	03003406 	movweq	r3, #1030	; 0x406
     314:	3b0b3a0e 	blcc	2ceb54 <startup-0x1fd314ac>
     318:	3f134905 	svccc	0x00134905
     31c:	00193c19 	andseq	r3, r9, r9, lsl ip
     320:	00340700 	eorseq	r0, r4, r0, lsl #14
     324:	0b3a0e03 	bleq	e83b38 <startup-0x1f17c4c8>
     328:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     32c:	193c193f 	ldmdbne	ip!, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
     330:	04080000 	streq	r0, [r8], #-0
     334:	0b0b3e01 	bleq	2cfb40 <startup-0x1fd304c0>
     338:	3a13490b 	bcc	4d276c <startup-0x1fb2d894>
     33c:	01053b0b 	tsteq	r5, fp, lsl #22
     340:	09000013 	stmdbeq	r0, {r0, r1, r4}
     344:	0e030028 	cdpeq	0, 0, cr0, cr3, cr8, {1}
     348:	00000b1c 	andeq	r0, r0, ip, lsl fp
     34c:	0b01130a 	bleq	44f7c <startup-0x1ffbb084>
     350:	3b0b3a0b 	blcc	2ceb84 <startup-0x1fd3147c>
     354:	00130105 	andseq	r0, r3, r5, lsl #2
     358:	000d0b00 	andeq	r0, sp, r0, lsl #22
     35c:	0b3a0e03 	bleq	e83b70 <startup-0x1f17c490>
     360:	1349053b 	movtne	r0, #38203	; 0x953b
     364:	00000b38 	andeq	r0, r0, r8, lsr fp
     368:	03000d0c 	movweq	r0, #3340	; 0xd0c
     36c:	3b0b3a08 	blcc	2ceb94 <startup-0x1fd3146c>
     370:	38134905 	ldmdacc	r3, {r0, r2, r8, fp, lr}
     374:	0d00000b 	stceq	0, cr0, [r0, #-44]	; 0xffffffd4
     378:	13490101 	movtne	r0, #37121	; 0x9101
     37c:	00001301 	andeq	r1, r0, r1, lsl #6
     380:	4900210e 	stmdbmi	r0, {r1, r2, r3, r8, sp}
     384:	000b2f13 	andeq	r2, fp, r3, lsl pc
     388:	00160f00 	andseq	r0, r6, r0, lsl #30
     38c:	0b3a0e03 	bleq	e83ba0 <startup-0x1f17c460>
     390:	1349053b 	movtne	r0, #38203	; 0x953b
     394:	04100000 	ldreq	r0, [r0], #-0
     398:	0b0b3e01 	bleq	2cfba4 <startup-0x1fd3045c>
     39c:	3a13490b 	bcc	4d27d0 <startup-0x1fb2d830>
     3a0:	010b3b0b 	tsteq	fp, fp, lsl #22
     3a4:	11000013 	tstne	r0, r3, lsl r0
     3a8:	0b0b0113 	bleq	2c07fc <startup-0x1fd3f804>
     3ac:	0b3b0b3a 	bleq	ec309c <startup-0x1f13cf64>
     3b0:	00001301 	andeq	r1, r0, r1, lsl #6
     3b4:	03000d12 	movweq	r0, #3346	; 0xd12
     3b8:	3b0b3a0e 	blcc	2cebf8 <startup-0x1fd31408>
     3bc:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
     3c0:	1300000b 	movwne	r0, #11
     3c4:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     3c8:	0b3a0e03 	bleq	e83bdc <startup-0x1f17c424>
     3cc:	01110b3b 	tsteq	r1, fp, lsr fp
     3d0:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     3d4:	00194296 	mulseq	r9, r6, r2
     3d8:	00341400 	eorseq	r1, r4, r0, lsl #8
     3dc:	0b3a0e03 	bleq	e83bf0 <startup-0x1f17c410>
     3e0:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     3e4:	00001802 	andeq	r1, r0, r2, lsl #16
     3e8:	01110100 	tsteq	r1, r0, lsl #2
     3ec:	0b130e25 	bleq	4c3c88 <startup-0x1fb3c378>
     3f0:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
     3f4:	06120111 			; <UNDEFINED> instruction: 0x06120111
     3f8:	00001710 	andeq	r1, r0, r0, lsl r7
     3fc:	0b002402 	bleq	940c <startup-0x1fff6bf4>
     400:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
     404:	0300000e 	movweq	r0, #14
     408:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
     40c:	0b3b0b3a 	bleq	ec30fc <startup-0x1f13cf04>
     410:	00001349 	andeq	r1, r0, r9, asr #6
     414:	0b002404 	bleq	942c <startup-0x1fff6bd4>
     418:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
     41c:	05000008 	streq	r0, [r0, #-8]
     420:	13490026 	movtne	r0, #36902	; 0x9026
     424:	35060000 	strcc	r0, [r6, #-0]
     428:	00134900 	andseq	r4, r3, r0, lsl #18
     42c:	00340700 	eorseq	r0, r4, r0, lsl #14
     430:	0b3a0e03 	bleq	e83c44 <startup-0x1f17c3bc>
     434:	1349053b 	movtne	r0, #38203	; 0x953b
     438:	193c193f 	ldmdbne	ip!, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
     43c:	34080000 	strcc	r0, [r8], #-0
     440:	3a0e0300 	bcc	381048 <startup-0x1fc7efb8>
     444:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     448:	3c193f13 	ldccc	15, cr3, [r9], {19}
     44c:	09000019 	stmdbeq	r0, {r0, r3, r4}
     450:	0b0b0113 	bleq	2c08a4 <startup-0x1fd3f75c>
     454:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     458:	00001301 	andeq	r1, r0, r1, lsl #6
     45c:	03000d0a 	movweq	r0, #3338	; 0xd0a
     460:	3b0b3a0e 	blcc	2ceca0 <startup-0x1fd31360>
     464:	38134905 	ldmdacc	r3, {r0, r2, r8, fp, lr}
     468:	0b00000b 	bleq	49c <startup-0x1ffffb64>
     46c:	0803000d 	stmdaeq	r3, {r0, r2, r3}
     470:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     474:	0b381349 	bleq	e051a0 <startup-0x1f1fae60>
     478:	010c0000 	mrseq	r0, (UNDEF: 12)
     47c:	01134901 	tsteq	r3, r1, lsl #18
     480:	0d000013 	stceq	0, cr0, [r0, #-76]	; 0xffffffb4
     484:	13490021 	movtne	r0, #36897	; 0x9021
     488:	00000b2f 	andeq	r0, r0, pc, lsr #22
     48c:	0300160e 	movweq	r1, #1550	; 0x60e
     490:	3b0b3a0e 	blcc	2cecd0 <startup-0x1fd31330>
     494:	00134905 	andseq	r4, r3, r5, lsl #18
     498:	01130f00 	tsteq	r3, r0, lsl #30
     49c:	0b0b0e03 	bleq	2c3cb0 <startup-0x1fd3c350>
     4a0:	0b3b0b3a 	bleq	ec3190 <startup-0x1f13ce70>
     4a4:	00001301 	andeq	r1, r0, r1, lsl #6
     4a8:	03000d10 	movweq	r0, #3344	; 0xd10
     4ac:	3b0b3a08 	blcc	2cecd4 <startup-0x1fd3132c>
     4b0:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
     4b4:	1100000b 	tstne	r0, fp
     4b8:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
     4bc:	0b3b0b3a 	bleq	ec31ac <startup-0x1f13ce54>
     4c0:	0b381349 	bleq	e051ec <startup-0x1f1fae14>
     4c4:	0f120000 	svceq	0x00120000
     4c8:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
     4cc:	13000013 	movwne	r0, #19
     4d0:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     4d4:	0b3b0b3a 	bleq	ec31c4 <startup-0x1f13ce3c>
     4d8:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
     4dc:	00001802 	andeq	r1, r0, r2, lsl #16
     4e0:	03003414 	movweq	r3, #1044	; 0x414
     4e4:	3b0b3a08 	blcc	2ced0c <startup-0x1fd312f4>
     4e8:	3f13490b 	svccc	0x0013490b
     4ec:	00180219 	andseq	r0, r8, r9, lsl r2
     4f0:	012e1500 			; <UNDEFINED> instruction: 0x012e1500
     4f4:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
     4f8:	0b3b0b3a 	bleq	ec31e8 <startup-0x1f13ce18>
     4fc:	01111927 	tsteq	r1, r7, lsr #18
     500:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     504:	01194296 			; <UNDEFINED> instruction: 0x01194296
     508:	16000013 			; <UNDEFINED> instruction: 0x16000013
     50c:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
     510:	0b3b0b3a 	bleq	ec3200 <startup-0x1f13ce00>
     514:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
     518:	0b170000 	bleq	5c0520 <startup-0x1fa3fae0>
     51c:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
     520:	00130106 	andseq	r0, r3, r6, lsl #2
     524:	00341800 	eorseq	r1, r4, r0, lsl #16
     528:	0b3a0803 	bleq	e8253c <startup-0x1f17dac4>
     52c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     530:	00001802 	andeq	r1, r0, r2, lsl #16
     534:	11010b19 	tstne	r1, r9, lsl fp
     538:	00061201 	andeq	r1, r6, r1, lsl #4
     53c:	012e1a00 			; <UNDEFINED> instruction: 0x012e1a00
     540:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
     544:	0b3b0b3a 	bleq	ec3234 <startup-0x1f13cdcc>
     548:	13491927 	movtne	r1, #39207	; 0x9927
     54c:	06120111 			; <UNDEFINED> instruction: 0x06120111
     550:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
     554:	00130119 	andseq	r0, r3, r9, lsl r1
     558:	00341b00 	eorseq	r1, r4, r0, lsl #22
     55c:	0b3a0e03 	bleq	e83d70 <startup-0x1f17c290>
     560:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     564:	00001802 	andeq	r1, r0, r2, lsl #16
     568:	3f012e1c 	svccc	0x00012e1c
     56c:	3a0e0319 	bcc	3811d8 <startup-0x1fc7ee28>
     570:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     574:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
     578:	97184006 	ldrls	r4, [r8, -r6]
     57c:	00001942 	andeq	r1, r0, r2, asr #18
     580:	01110100 	tsteq	r1, r0, lsl #2
     584:	0b130e25 	bleq	4c3e20 <startup-0x1fb3c1e0>
     588:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
     58c:	06120111 			; <UNDEFINED> instruction: 0x06120111
     590:	00001710 	andeq	r1, r0, r0, lsl r7
     594:	0b002402 	bleq	95a4 <startup-0x1fff6a5c>
     598:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
     59c:	0300000e 	movweq	r0, #14
     5a0:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
     5a4:	0b3b0b3a 	bleq	ec3294 <startup-0x1f13cd6c>
     5a8:	00001349 	andeq	r1, r0, r9, asr #6
     5ac:	0b002404 	bleq	95c4 <startup-0x1fff6a3c>
     5b0:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
     5b4:	05000008 	streq	r0, [r0, #-8]
     5b8:	13490035 	movtne	r0, #36917	; 0x9035
     5bc:	26060000 	strcs	r0, [r6], -r0
     5c0:	00134900 	andseq	r4, r3, r0, lsl #18
     5c4:	01130700 	tsteq	r3, r0, lsl #14
     5c8:	0b3a050b 	bleq	e819fc <startup-0x1f17e604>
     5cc:	1301053b 	movwne	r0, #5435	; 0x153b
     5d0:	0d080000 	stceq	0, cr0, [r8, #-0]
     5d4:	3a0e0300 	bcc	3811dc <startup-0x1fc7ee24>
     5d8:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     5dc:	000b3813 	andeq	r3, fp, r3, lsl r8
     5e0:	000d0900 	andeq	r0, sp, r0, lsl #18
     5e4:	0b3a0e03 	bleq	e83df8 <startup-0x1f17c208>
     5e8:	1349053b 	movtne	r0, #38203	; 0x953b
     5ec:	00000538 	andeq	r0, r0, r8, lsr r5
     5f0:	03000d0a 	movweq	r0, #3338	; 0xd0a
     5f4:	3b0b3a08 	blcc	2cee1c <startup-0x1fd311e4>
     5f8:	38134905 	ldmdacc	r3, {r0, r2, r8, fp, lr}
     5fc:	0b000005 	bleq	618 <startup-0x1ffff9e8>
     600:	13490101 	movtne	r0, #37121	; 0x9101
     604:	00001301 	andeq	r1, r0, r1, lsl #6
     608:	4900210c 	stmdbmi	r0, {r2, r3, r8, sp}
     60c:	000b2f13 	andeq	r2, fp, r3, lsl pc
     610:	00210d00 	eoreq	r0, r1, r0, lsl #26
     614:	052f1349 	streq	r1, [pc, #-841]!	; 2d3 <startup-0x1ffffd2d>
     618:	160e0000 	strne	r0, [lr], -r0
     61c:	3a0e0300 	bcc	381224 <startup-0x1fc7eddc>
     620:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     624:	0f000013 	svceq	0x00000013
     628:	0b0b0113 	bleq	2c0a7c <startup-0x1fd3f584>
     62c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     630:	00001301 	andeq	r1, r0, r1, lsl #6
     634:	03000d10 	movweq	r0, #3344	; 0xd10
     638:	3b0b3a08 	blcc	2cee60 <startup-0x1fd311a0>
     63c:	38134905 	ldmdacc	r3, {r0, r2, r8, fp, lr}
     640:	1100000b 	tstne	r0, fp
     644:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     648:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     64c:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
     650:	0000193c 	andeq	r1, r0, ip, lsr r9
     654:	03003412 	movweq	r3, #1042	; 0x412
     658:	3b0b3a0e 	blcc	2cee98 <startup-0x1fd31168>
     65c:	3f13490b 	svccc	0x0013490b
     660:	00193c19 	andseq	r3, r9, r9, lsl ip
     664:	01041300 	mrseq	r1, LR_abt
     668:	0b0b0b3e 	bleq	2c3368 <startup-0x1fd3cc98>
     66c:	0b3a1349 	bleq	e85398 <startup-0x1f17ac68>
     670:	1301053b 	movwne	r0, #5435	; 0x153b
     674:	28140000 	ldmdacs	r4, {}	; <UNPREDICTABLE>
     678:	1c0e0300 	stcne	3, cr0, [lr], {-0}
     67c:	1500000b 	strne	r0, [r0, #-11]
     680:	0b0b0113 	bleq	2c0ad4 <startup-0x1fd3f52c>
     684:	0b3b0b3a 	bleq	ec3374 <startup-0x1f13cc8c>
     688:	00001301 	andeq	r1, r0, r1, lsl #6
     68c:	03000d16 	movweq	r0, #3350	; 0xd16
     690:	3b0b3a0e 	blcc	2ceed0 <startup-0x1fd31130>
     694:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
     698:	1700000b 	strne	r0, [r0, -fp]
     69c:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     6a0:	0b3a0e03 	bleq	e83eb4 <startup-0x1f17c14c>
     6a4:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
     6a8:	06120111 			; <UNDEFINED> instruction: 0x06120111
     6ac:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
     6b0:	00130119 	andseq	r0, r3, r9, lsl r1
     6b4:	00051800 	andeq	r1, r5, r0, lsl #16
     6b8:	0b3a0e03 	bleq	e83ecc <startup-0x1f17c134>
     6bc:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     6c0:	00001802 	andeq	r1, r0, r2, lsl #16
     6c4:	03003419 	movweq	r3, #1049	; 0x419
     6c8:	3b0b3a0e 	blcc	2cef08 <startup-0x1fd310f8>
     6cc:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     6d0:	1a000018 	bne	738 <startup-0x1ffff8c8>
     6d4:	0b0b000f 	bleq	2c0718 <startup-0x1fd3f8e8>
     6d8:	00001349 	andeq	r1, r0, r9, asr #6
     6dc:	3f012e1b 	svccc	0x00012e1b
     6e0:	3a0e0319 	bcc	38134c <startup-0x1fc7ecb4>
     6e4:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     6e8:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
     6ec:	97184006 	ldrls	r4, [r8, -r6]
     6f0:	00001942 	andeq	r1, r0, r2, asr #18
     6f4:	01110100 	tsteq	r1, r0, lsl #2
     6f8:	0b130e25 	bleq	4c3f94 <startup-0x1fb3c06c>
     6fc:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
     700:	01111755 	tsteq	r1, r5, asr r7
     704:	00001710 	andeq	r1, r0, r0, lsl r7
     708:	03010402 	movweq	r0, #5122	; 0x1402
     70c:	0b0b3e0e 	bleq	2cff4c <startup-0x1fd300b4>
     710:	3a13490b 	bcc	4d2b44 <startup-0x1fb2d4bc>
     714:	010b3b0b 	tsteq	fp, fp, lsl #22
     718:	03000013 	movweq	r0, #19
     71c:	0e030028 	cdpeq	0, 0, cr0, cr3, cr8, {1}
     720:	00000d1c 	andeq	r0, r0, ip, lsl sp
     724:	03002804 	movweq	r2, #2052	; 0x804
     728:	000b1c0e 	andeq	r1, fp, lr, lsl #24
     72c:	00240500 	eoreq	r0, r4, r0, lsl #10
     730:	0b3e0b0b 	bleq	f83364 <startup-0x1f07cc9c>
     734:	00000e03 	andeq	r0, r0, r3, lsl #28
     738:	03001606 	movweq	r1, #1542	; 0x606
     73c:	3b0b3a0e 	blcc	2cef7c <startup-0x1fd31084>
     740:	00134905 	andseq	r4, r3, r5, lsl #18
     744:	00160700 	andseq	r0, r6, r0, lsl #14
     748:	0b3a0e03 	bleq	e83f5c <startup-0x1f17c0a4>
     74c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     750:	24080000 	strcs	r0, [r8], #-0
     754:	3e0b0b00 	vmlacc.f64	d0, d11, d0
     758:	0008030b 	andeq	r0, r8, fp, lsl #6
     75c:	00350900 	eorseq	r0, r5, r0, lsl #18
     760:	00001349 	andeq	r1, r0, r9, asr #6
     764:	4900260a 	stmdbmi	r0, {r1, r3, r9, sl, sp}
     768:	0b000013 	bleq	7bc <startup-0x1ffff844>
     76c:	050b0113 	streq	r0, [fp, #-275]	; 0xfffffeed
     770:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     774:	00001301 	andeq	r1, r0, r1, lsl #6
     778:	03000d0c 	movweq	r0, #3340	; 0xd0c
     77c:	3b0b3a0e 	blcc	2cefbc <startup-0x1fd31044>
     780:	38134905 	ldmdacc	r3, {r0, r2, r8, fp, lr}
     784:	0d00000b 	stceq	0, cr0, [r0, #-44]	; 0xffffffd4
     788:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
     78c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     790:	05381349 	ldreq	r1, [r8, #-841]!	; 0xfffffcb7
     794:	0d0e0000 	stceq	0, cr0, [lr, #-0]
     798:	3a080300 	bcc	2013a0 <startup-0x1fdfec60>
     79c:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     7a0:	00053813 	andeq	r3, r5, r3, lsl r8
     7a4:	01010f00 	tsteq	r1, r0, lsl #30
     7a8:	13011349 	movwne	r1, #4937	; 0x1349
     7ac:	21100000 	tstcs	r0, r0
     7b0:	2f134900 	svccs	0x00134900
     7b4:	1100000b 	tstne	r0, fp
     7b8:	13490021 	movtne	r0, #36897	; 0x9021
     7bc:	0000052f 	andeq	r0, r0, pc, lsr #10
     7c0:	0b011312 	bleq	45410 <startup-0x1ffbabf0>
     7c4:	3b0b3a0b 	blcc	2ceff8 <startup-0x1fd31008>
     7c8:	00130105 	andseq	r0, r3, r5, lsl #2
     7cc:	000d1300 	andeq	r1, sp, r0, lsl #6
     7d0:	0b3a0803 	bleq	e827e4 <startup-0x1f17d81c>
     7d4:	1349053b 	movtne	r0, #38203	; 0x953b
     7d8:	00000b38 	andeq	r0, r0, r8, lsr fp
     7dc:	03003414 	movweq	r3, #1044	; 0x414
     7e0:	3b0b3a0e 	blcc	2cf020 <startup-0x1fd30fe0>
     7e4:	3f134905 	svccc	0x00134905
     7e8:	00193c19 	andseq	r3, r9, r9, lsl ip
     7ec:	00341500 	eorseq	r1, r4, r0, lsl #10
     7f0:	0b3a0e03 	bleq	e84004 <startup-0x1f17bffc>
     7f4:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     7f8:	193c193f 	ldmdbne	ip!, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
     7fc:	13160000 	tstne	r6, #0
     800:	0b0e0301 	bleq	38140c <startup-0x1fc7ebf4>
     804:	3b0b3a0b 	blcc	2cf038 <startup-0x1fd30fc8>
     808:	0013010b 	andseq	r0, r3, fp, lsl #2
     80c:	000d1700 	andeq	r1, sp, r0, lsl #14
     810:	0b3a0803 	bleq	e82824 <startup-0x1f17d7dc>
     814:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     818:	00000b38 	andeq	r0, r0, r8, lsr fp
     81c:	03000d18 	movweq	r0, #3352	; 0xd18
     820:	3b0b3a0e 	blcc	2cf060 <startup-0x1fd30fa0>
     824:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
     828:	1900000b 	stmdbne	r0, {r0, r1, r3}
     82c:	0b0b000f 	bleq	2c0870 <startup-0x1fd3f790>
     830:	00001349 	andeq	r1, r0, r9, asr #6
     834:	0300341a 	movweq	r3, #1050	; 0x41a
     838:	3b0b3a0e 	blcc	2cf078 <startup-0x1fd30f88>
     83c:	3f13490b 	svccc	0x0013490b
     840:	00180219 	andseq	r0, r8, r9, lsl r2
     844:	00341b00 	eorseq	r1, r4, r0, lsl #22
     848:	0b3a0803 	bleq	e8285c <startup-0x1f17d7a4>
     84c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     850:	1802193f 	stmdane	r2, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
     854:	2e1c0000 	cdpcs	0, 1, cr0, cr12, cr0, {0}
     858:	03193f01 	tsteq	r9, #1, 30
     85c:	3b0b3a0e 	blcc	2cf09c <startup-0x1fd30f64>
     860:	1119270b 	tstne	r9, fp, lsl #14
     864:	40061201 	andmi	r1, r6, r1, lsl #4
     868:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
     86c:	00001301 	andeq	r1, r0, r1, lsl #6
     870:	0300341d 	movweq	r3, #1053	; 0x41d
     874:	3b0b3a0e 	blcc	2cf0b4 <startup-0x1fd30f4c>
     878:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     87c:	1e000018 	mcrne	0, 0, r0, cr0, cr8, {0}
     880:	0111010b 	tsteq	r1, fp, lsl #2
     884:	00000612 	andeq	r0, r0, r2, lsl r6
     888:	0300341f 	movweq	r3, #1055	; 0x41f
     88c:	3b0b3a08 	blcc	2cf0b4 <startup-0x1fd30f4c>
     890:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     894:	20000018 	andcs	r0, r0, r8, lsl r0
     898:	13490021 	movtne	r0, #36897	; 0x9021
     89c:	0000182f 	andeq	r1, r0, pc, lsr #16
     8a0:	3f002e21 	svccc	0x00002e21
     8a4:	3a0e0319 	bcc	381510 <startup-0x1fc7eaf0>
     8a8:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     8ac:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
     8b0:	97184006 	ldrls	r4, [r8, -r6]
     8b4:	00001942 	andeq	r1, r0, r2, asr #18
     8b8:	03000522 	movweq	r0, #1314	; 0x522
     8bc:	3b0b3a0e 	blcc	2cf0fc <startup-0x1fd30f04>
     8c0:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     8c4:	23000018 	movwcs	r0, #24
     8c8:	0e03012e 	adfeqsp	f0, f3, #0.5
     8cc:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     8d0:	13491927 	movtne	r1, #39207	; 0x9927
     8d4:	06120111 			; <UNDEFINED> instruction: 0x06120111
     8d8:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
     8dc:	00130119 	andseq	r0, r3, r9, lsl r1
     8e0:	00052400 	andeq	r2, r5, r0, lsl #8
     8e4:	0b3a0e03 	bleq	e840f8 <startup-0x1f17bf08>
     8e8:	1349053b 	movtne	r0, #38203	; 0x953b
     8ec:	00001802 	andeq	r1, r0, r2, lsl #16
     8f0:	03012e25 	movweq	r2, #7717	; 0x1e25
     8f4:	3b0b3a0e 	blcc	2cf134 <startup-0x1fd30ecc>
     8f8:	11192705 	tstne	r9, r5, lsl #14
     8fc:	40061201 	andmi	r1, r6, r1, lsl #4
     900:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
     904:	01000000 	mrseq	r0, (UNDEF: 0)
     908:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
     90c:	0e030b13 	vmoveq.32	d3[0], r0
     910:	01110e1b 	tsteq	r1, fp, lsl lr
     914:	17100612 			; <UNDEFINED> instruction: 0x17100612
     918:	24020000 	strcs	r0, [r2], #-0
     91c:	3e0b0b00 	vmlacc.f64	d0, d11, d0
     920:	000e030b 	andeq	r0, lr, fp, lsl #6
     924:	00160300 	andseq	r0, r6, r0, lsl #6
     928:	0b3a0e03 	bleq	e8413c <startup-0x1f17bec4>
     92c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     930:	24040000 	strcs	r0, [r4], #-0
     934:	3e0b0b00 	vmlacc.f64	d0, d11, d0
     938:	0008030b 	andeq	r0, r8, fp, lsl #6
     93c:	00350500 	eorseq	r0, r5, r0, lsl #10
     940:	00001349 	andeq	r1, r0, r9, asr #6
     944:	03003406 	movweq	r3, #1030	; 0x406
     948:	3b0b3a0e 	blcc	2cf188 <startup-0x1fd30e78>
     94c:	3f134905 	svccc	0x00134905
     950:	00193c19 	andseq	r3, r9, r9, lsl ip
     954:	00340700 	eorseq	r0, r4, r0, lsl #14
     958:	0b3a0e03 	bleq	e8416c <startup-0x1f17be94>
     95c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     960:	193c193f 	ldmdbne	ip!, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
     964:	04080000 	streq	r0, [r8], #-0
     968:	0b0b3e01 	bleq	2d0174 <startup-0x1fd2fe8c>
     96c:	3a13490b 	bcc	4d2da0 <startup-0x1fb2d260>
     970:	01053b0b 	tsteq	r5, fp, lsl #22
     974:	09000013 	stmdbeq	r0, {r0, r1, r4}
     978:	0e030028 	cdpeq	0, 0, cr0, cr3, cr8, {1}
     97c:	00000b1c 	andeq	r0, r0, ip, lsl fp
     980:	0300280a 	movweq	r2, #2058	; 0x80a
     984:	000b1c08 	andeq	r1, fp, r8, lsl #24
     988:	00160b00 	andseq	r0, r6, r0, lsl #22
     98c:	0b3a0e03 	bleq	e841a0 <startup-0x1f17be60>
     990:	1349053b 	movtne	r0, #38203	; 0x953b
     994:	130c0000 	movwne	r0, #49152	; 0xc000
     998:	3a0b0b01 	bcc	2c35a4 <startup-0x1fd3ca5c>
     99c:	01053b0b 	tsteq	r5, fp, lsl #22
     9a0:	0d000013 	stceq	0, cr0, [r0, #-76]	; 0xffffffb4
     9a4:	0803000d 	stmdaeq	r3, {r0, r2, r3}
     9a8:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     9ac:	0b381349 	bleq	e056d8 <startup-0x1f1fa928>
     9b0:	2e0e0000 	cdpcs	0, 0, cr0, cr14, cr0, {0}
     9b4:	03193f01 	tsteq	r9, #1, 30
     9b8:	3b0b3a0e 	blcc	2cf1f8 <startup-0x1fd30e08>
     9bc:	11192705 	tstne	r9, r5, lsl #14
     9c0:	40061201 	andmi	r1, r6, r1, lsl #4
     9c4:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
     9c8:	00001301 	andeq	r1, r0, r1, lsl #6
     9cc:	0300050f 	movweq	r0, #1295	; 0x50f
     9d0:	3b0b3a0e 	blcc	2cf210 <startup-0x1fd30df0>
     9d4:	02134905 	andseq	r4, r3, #81920	; 0x14000
     9d8:	10000018 	andne	r0, r0, r8, lsl r0
     9dc:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     9e0:	0b3a0e03 	bleq	e841f4 <startup-0x1f17be0c>
     9e4:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
     9e8:	01111349 	tsteq	r1, r9, asr #6
     9ec:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     9f0:	01194297 			; <UNDEFINED> instruction: 0x01194297
     9f4:	11000013 	tstne	r0, r3, lsl r0
     9f8:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     9fc:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     a00:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
     a04:	2e120000 	cdpcs	0, 1, cr0, cr2, cr0, {0}
     a08:	03193f00 	tsteq	r9, #0, 30
     a0c:	3b0b3a0e 	blcc	2cf24c <startup-0x1fd30db4>
     a10:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
     a14:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
     a18:	97184006 	ldrls	r4, [r8, -r6]
     a1c:	00001942 	andeq	r1, r0, r2, asr #18
     a20:	3f012e13 	svccc	0x00012e13
     a24:	3a0e0319 	bcc	381690 <startup-0x1fc7e970>
     a28:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     a2c:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
     a30:	97184006 	ldrls	r4, [r8, -r6]
     a34:	13011942 	movwne	r1, #6466	; 0x1942
     a38:	05140000 	ldreq	r0, [r4, #-0]
     a3c:	3a0e0300 	bcc	381644 <startup-0x1fc7e9bc>
     a40:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     a44:	00180213 	andseq	r0, r8, r3, lsl r2
     a48:	002e1500 	eoreq	r1, lr, r0, lsl #10
     a4c:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
     a50:	0b3b0b3a 	bleq	ec3740 <startup-0x1f13c8c0>
     a54:	01111927 	tsteq	r1, r7, lsr #18
     a58:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     a5c:	00194296 	mulseq	r9, r6, r2
     a60:	11010000 	mrsne	r0, (UNDEF: 1)
     a64:	130e2501 	movwne	r2, #58625	; 0xe501
     a68:	1b0e030b 	blne	38169c <startup-0x1fc7e964>
     a6c:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
     a70:	00171006 	andseq	r1, r7, r6
     a74:	00240200 	eoreq	r0, r4, r0, lsl #4
     a78:	0b3e0b0b 	bleq	f836ac <startup-0x1f07c954>
     a7c:	00000e03 	andeq	r0, r0, r3, lsl #28
     a80:	03001603 	movweq	r1, #1539	; 0x603
     a84:	3b0b3a0e 	blcc	2cf2c4 <startup-0x1fd30d3c>
     a88:	0013490b 	andseq	r4, r3, fp, lsl #18
     a8c:	00240400 	eoreq	r0, r4, r0, lsl #8
     a90:	0b3e0b0b 	bleq	f836c4 <startup-0x1f07c93c>
     a94:	00000803 	andeq	r0, r0, r3, lsl #16
     a98:	49003505 	stmdbmi	r0, {r0, r2, r8, sl, ip, sp}
     a9c:	06000013 			; <UNDEFINED> instruction: 0x06000013
     aa0:	13490101 	movtne	r0, #37121	; 0x9101
     aa4:	00001301 	andeq	r1, r0, r1, lsl #6
     aa8:	49002107 	stmdbmi	r0, {r0, r1, r2, r8, sp}
     aac:	000b2f13 	andeq	r2, fp, r3, lsl pc
     ab0:	00340800 	eorseq	r0, r4, r0, lsl #16
     ab4:	0b3a0e03 	bleq	e842c8 <startup-0x1f17bd38>
     ab8:	1349053b 	movtne	r0, #38203	; 0x953b
     abc:	193c193f 	ldmdbne	ip!, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
     ac0:	34090000 	strcc	r0, [r9], #-0
     ac4:	3a0e0300 	bcc	3816cc <startup-0x1fc7e934>
     ac8:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     acc:	3c193f13 	ldccc	15, cr3, [r9], {19}
     ad0:	0a000019 	beq	b3c <startup-0x1ffff4c4>
     ad4:	0b3e0104 	bleq	f80eec <startup-0x1f07f114>
     ad8:	13490b0b 	movtne	r0, #39691	; 0x9b0b
     adc:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     ae0:	00001301 	andeq	r1, r0, r1, lsl #6
     ae4:	0300280b 	movweq	r2, #2059	; 0x80b
     ae8:	000b1c0e 	andeq	r1, fp, lr, lsl #24
     aec:	00280c00 	eoreq	r0, r8, r0, lsl #24
     af0:	0b1c0803 	bleq	702b04 <startup-0x1f8fd4fc>
     af4:	160d0000 	strne	r0, [sp], -r0
     af8:	3a0e0300 	bcc	381700 <startup-0x1fc7e900>
     afc:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     b00:	0e000013 	mcreq	0, 0, r0, cr0, cr3, {0}
     b04:	0b0b0113 	bleq	2c0f58 <startup-0x1fd3f0a8>
     b08:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     b0c:	00001301 	andeq	r1, r0, r1, lsl #6
     b10:	03000d0f 	movweq	r0, #3343	; 0xd0f
     b14:	3b0b3a08 	blcc	2cf33c <startup-0x1fd30cc4>
     b18:	38134905 	ldmdacc	r3, {r0, r2, r8, fp, lr}
     b1c:	1000000b 	andne	r0, r0, fp
     b20:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
     b24:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     b28:	0b381349 	bleq	e05854 <startup-0x1f1fa7ac>
     b2c:	13110000 	tstne	r1, #0
     b30:	3a050b01 	bcc	14373c <startup-0x1febc8c4>
     b34:	01053b0b 	tsteq	r5, fp, lsl #22
     b38:	12000013 	andne	r0, r0, #19
     b3c:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
     b40:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     b44:	05381349 	ldreq	r1, [r8, #-841]!	; 0xfffffcb7
     b48:	0d130000 	ldceq	0, cr0, [r3, #-0]
     b4c:	3a080300 	bcc	201754 <startup-0x1fdfe8ac>
     b50:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     b54:	00053813 	andeq	r3, r5, r3, lsl r8
     b58:	01131400 	tsteq	r3, r0, lsl #8
     b5c:	0b3a0b0b 	bleq	e83790 <startup-0x1f17c870>
     b60:	13010b3b 	movwne	r0, #6971	; 0x1b3b
     b64:	0d150000 	ldceq	0, cr0, [r5, #-0]
     b68:	3a0e0300 	bcc	381770 <startup-0x1fc7e890>
     b6c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     b70:	000b3813 	andeq	r3, fp, r3, lsl r8
     b74:	000d1600 	andeq	r1, sp, r0, lsl #12
     b78:	0b3a0803 	bleq	e82b8c <startup-0x1f17d474>
     b7c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     b80:	00000b38 	andeq	r0, r0, r8, lsr fp
     b84:	03012e17 	movweq	r2, #7703	; 0x1e17
     b88:	3b0b3a0e 	blcc	2cf3c8 <startup-0x1fd30c38>
     b8c:	49192705 	ldmdbmi	r9, {r0, r2, r8, r9, sl, sp}
     b90:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
     b94:	97184006 	ldrls	r4, [r8, -r6]
     b98:	13011942 	movwne	r1, #6466	; 0x1942
     b9c:	05180000 	ldreq	r0, [r8, #-0]
     ba0:	3a0e0300 	bcc	3817a8 <startup-0x1fc7e858>
     ba4:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     ba8:	00180213 	andseq	r0, r8, r3, lsl r2
     bac:	00341900 	eorseq	r1, r4, r0, lsl #18
     bb0:	0b3a0e03 	bleq	e843c4 <startup-0x1f17bc3c>
     bb4:	1349053b 	movtne	r0, #38203	; 0x953b
     bb8:	00001802 	andeq	r1, r0, r2, lsl #16
     bbc:	3f012e1a 	svccc	0x00012e1a
     bc0:	3a0e0319 	bcc	38182c <startup-0x1fc7e7d4>
     bc4:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
     bc8:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
     bcc:	97184006 	ldrls	r4, [r8, -r6]
     bd0:	13011942 	movwne	r1, #6466	; 0x1942
     bd4:	0f1b0000 	svceq	0x001b0000
     bd8:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
     bdc:	1c000013 	stcne	0, cr0, [r0], {19}
     be0:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     be4:	0b3a0e03 	bleq	e843f8 <startup-0x1f17bc08>
     be8:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
     bec:	01111349 	tsteq	r1, r9, asr #6
     bf0:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     bf4:	01194296 			; <UNDEFINED> instruction: 0x01194296
     bf8:	1d000013 	stcne	0, cr0, [r0, #-76]	; 0xffffffb4
     bfc:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     c00:	0b3a0e03 	bleq	e84414 <startup-0x1f17bbec>
     c04:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
     c08:	01111349 	tsteq	r1, r9, asr #6
     c0c:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     c10:	01194297 			; <UNDEFINED> instruction: 0x01194297
     c14:	1e000013 	mcrne	0, 0, r0, cr0, cr3, {0}
     c18:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     c1c:	0b3a0e03 	bleq	e84430 <startup-0x1f17bbd0>
     c20:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
     c24:	01111349 	tsteq	r1, r9, asr #6
     c28:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     c2c:	01194297 			; <UNDEFINED> instruction: 0x01194297
     c30:	1f000013 	svcne	0x00000013
     c34:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
     c38:	0b3b0b3a 	bleq	ec3928 <startup-0x1f13c6d8>
     c3c:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
     c40:	34200000 	strtcc	r0, [r0], #-0
     c44:	3a0e0300 	bcc	38184c <startup-0x1fc7e7b4>
     c48:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     c4c:	00180213 	andseq	r0, r8, r3, lsl r2
     c50:	012e2100 			; <UNDEFINED> instruction: 0x012e2100
     c54:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
     c58:	0b3b0b3a 	bleq	ec3948 <startup-0x1f13c6b8>
     c5c:	01111927 	tsteq	r1, r7, lsr #18
     c60:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     c64:	00194296 	mulseq	r9, r6, r2
     c68:	11010000 	mrsne	r0, (UNDEF: 1)
     c6c:	130e2501 	movwne	r2, #58625	; 0xe501
     c70:	1b0e030b 	blne	3818a4 <startup-0x1fc7e75c>
     c74:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
     c78:	00171006 	andseq	r1, r7, r6
     c7c:	01040200 	mrseq	r0, R12_usr
     c80:	0b3e0e03 	bleq	f84494 <startup-0x1f07bb6c>
     c84:	13490b0b 	movtne	r0, #39691	; 0x9b0b
     c88:	0b3b0b3a 	bleq	ec3978 <startup-0x1f13c688>
     c8c:	00001301 	andeq	r1, r0, r1, lsl #6
     c90:	03002803 	movweq	r2, #2051	; 0x803
     c94:	000d1c0e 	andeq	r1, sp, lr, lsl #24
     c98:	00280400 	eoreq	r0, r8, r0, lsl #8
     c9c:	0b1c0e03 	bleq	7044b0 <startup-0x1f8fbb50>
     ca0:	24050000 	strcs	r0, [r5], #-0
     ca4:	3e0b0b00 	vmlacc.f64	d0, d11, d0
     ca8:	000e030b 	andeq	r0, lr, fp, lsl #6
     cac:	00160600 	andseq	r0, r6, r0, lsl #12
     cb0:	0b3a0e03 	bleq	e844c4 <startup-0x1f17bb3c>
     cb4:	1349053b 	movtne	r0, #38203	; 0x953b
     cb8:	16070000 	strne	r0, [r7], -r0
     cbc:	3a0e0300 	bcc	3818c4 <startup-0x1fc7e73c>
     cc0:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     cc4:	08000013 	stmdaeq	r0, {r0, r1, r4}
     cc8:	0b0b0024 	bleq	2c0d60 <startup-0x1fd3f2a0>
     ccc:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
     cd0:	35090000 	strcc	r0, [r9, #-0]
     cd4:	00134900 	andseq	r4, r3, r0, lsl #18
     cd8:	00260a00 	eoreq	r0, r6, r0, lsl #20
     cdc:	00001349 	andeq	r1, r0, r9, asr #6
     ce0:	0b01130b 	bleq	45914 <startup-0x1ffba6ec>
     ce4:	3b0b3a05 	blcc	2cf500 <startup-0x1fd30b00>
     ce8:	00130105 	andseq	r0, r3, r5, lsl #2
     cec:	000d0c00 	andeq	r0, sp, r0, lsl #24
     cf0:	0b3a0e03 	bleq	e84504 <startup-0x1f17bafc>
     cf4:	1349053b 	movtne	r0, #38203	; 0x953b
     cf8:	00000b38 	andeq	r0, r0, r8, lsr fp
     cfc:	03000d0d 	movweq	r0, #3341	; 0xd0d
     d00:	3b0b3a0e 	blcc	2cf540 <startup-0x1fd30ac0>
     d04:	38134905 	ldmdacc	r3, {r0, r2, r8, fp, lr}
     d08:	0e000005 	cdpeq	0, 0, cr0, cr0, cr5, {0}
     d0c:	0803000d 	stmdaeq	r3, {r0, r2, r3}
     d10:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     d14:	05381349 	ldreq	r1, [r8, #-841]!	; 0xfffffcb7
     d18:	010f0000 	mrseq	r0, CPSR
     d1c:	01134901 	tsteq	r3, r1, lsl #18
     d20:	10000013 	andne	r0, r0, r3, lsl r0
     d24:	13490021 	movtne	r0, #36897	; 0x9021
     d28:	00000b2f 	andeq	r0, r0, pc, lsr #22
     d2c:	49002111 	stmdbmi	r0, {r0, r4, r8, sp}
     d30:	00052f13 	andeq	r2, r5, r3, lsl pc
     d34:	01131200 	tsteq	r3, r0, lsl #4
     d38:	0b3a0b0b 	bleq	e8396c <startup-0x1f17c694>
     d3c:	1301053b 	movwne	r0, #5435	; 0x153b
     d40:	0d130000 	ldceq	0, cr0, [r3, #-0]
     d44:	3a080300 	bcc	20194c <startup-0x1fdfe6b4>
     d48:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     d4c:	000b3813 	andeq	r3, fp, r3, lsl r8
     d50:	00341400 	eorseq	r1, r4, r0, lsl #8
     d54:	0b3a0e03 	bleq	e84568 <startup-0x1f17ba98>
     d58:	1349053b 	movtne	r0, #38203	; 0x953b
     d5c:	193c193f 	ldmdbne	ip!, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
     d60:	34150000 	ldrcc	r0, [r5], #-0
     d64:	3a0e0300 	bcc	38196c <startup-0x1fc7e694>
     d68:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     d6c:	3c193f13 	ldccc	15, cr3, [r9], {19}
     d70:	16000019 			; <UNDEFINED> instruction: 0x16000019
     d74:	0b3e0104 	bleq	f8118c <startup-0x1f07ee74>
     d78:	13490b0b 	movtne	r0, #39691	; 0x9b0b
     d7c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     d80:	00001301 	andeq	r1, r0, r1, lsl #6
     d84:	0b011317 	bleq	459e8 <startup-0x1ffba618>
     d88:	3b0b3a0b 	blcc	2cf5bc <startup-0x1fd30a44>
     d8c:	0013010b 	andseq	r0, r3, fp, lsl #2
     d90:	000d1800 	andeq	r1, sp, r0, lsl #16
     d94:	0b3a0e03 	bleq	e845a8 <startup-0x1f17ba58>
     d98:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     d9c:	00000b38 	andeq	r0, r0, r8, lsr fp
     da0:	03000d19 	movweq	r0, #3353	; 0xd19
     da4:	3b0b3a08 	blcc	2cf5cc <startup-0x1fd30a34>
     da8:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
     dac:	1a00000b 	bne	de0 <startup-0x1ffff220>
     db0:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
     db4:	0b3b0b3a 	bleq	ec3aa4 <startup-0x1f13c55c>
     db8:	0b0b1349 	bleq	2c5ae4 <startup-0x1fd3a51c>
     dbc:	0b0c0b0d 	bleq	3039f8 <startup-0x1fcfc608>
     dc0:	00000b38 	andeq	r0, r0, r8, lsr fp
     dc4:	03000d1b 	movweq	r0, #3355	; 0xd1b
     dc8:	3b0b3a08 	blcc	2cf5f0 <startup-0x1fd30a10>
     dcc:	0b13490b 	bleq	4d3200 <startup-0x1fb2ce00>
     dd0:	0c0b0d0b 	stceq	13, cr0, [fp], {11}
     dd4:	000b380b 	andeq	r3, fp, fp, lsl #16
     dd8:	01041c00 	tsteq	r4, r0, lsl #24
     ddc:	0b0b0b3e 	bleq	2c3adc <startup-0x1fd3c524>
     de0:	0b3a1349 	bleq	e85b0c <startup-0x1f17a4f4>
     de4:	13010b3b 	movwne	r0, #6971	; 0x1b3b
     de8:	171d0000 	ldrne	r0, [sp, -r0]
     dec:	3a0b0b01 	bcc	2c39f8 <startup-0x1fd3c608>
     df0:	010b3b0b 	tsteq	fp, fp, lsl #22
     df4:	1e000013 	mcrne	0, 0, r0, cr0, cr3, {0}
     df8:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
     dfc:	0b3b0b3a 	bleq	ec3aec <startup-0x1f13c514>
     e00:	00001349 	andeq	r1, r0, r9, asr #6
     e04:	2701151f 	smladcs	r1, pc, r5, r1	; <UNPREDICTABLE>
     e08:	00130119 	andseq	r0, r3, r9, lsl r1
     e0c:	00052000 	andeq	r2, r5, r0
     e10:	00001349 	andeq	r1, r0, r9, asr #6
     e14:	0b000f21 	bleq	4aa0 <startup-0x1fffb560>
     e18:	0013490b 	andseq	r4, r3, fp, lsl #18
     e1c:	00342200 	eorseq	r2, r4, r0, lsl #4
     e20:	0b3a0e03 	bleq	e84634 <startup-0x1f17b9cc>
     e24:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     e28:	1802193f 	stmdane	r2, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
     e2c:	2e230000 	cdpcs	0, 2, cr0, cr3, cr0, {0}
     e30:	03193f01 	tsteq	r9, #1, 30
     e34:	3b0b3a0e 	blcc	2cf674 <startup-0x1fd3098c>
     e38:	1113490b 	tstne	r3, fp, lsl #18
     e3c:	40061201 	andmi	r1, r6, r1, lsl #4
     e40:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
     e44:	00001301 	andeq	r1, r0, r1, lsl #6
     e48:	03003424 	movweq	r3, #1060	; 0x424
     e4c:	3b0b3a0e 	blcc	2cf68c <startup-0x1fd30974>
     e50:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     e54:	25000018 	strcs	r0, [r0, #-24]	; 0xffffffe8
     e58:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     e5c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     e60:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
     e64:	2e260000 	cdpcs	0, 2, cr0, cr6, cr0, {0}
     e68:	03193f01 	tsteq	r9, #1, 30
     e6c:	3b0b3a0e 	blcc	2cf6ac <startup-0x1fd30954>
     e70:	1119270b 	tstne	r9, fp, lsl #14
     e74:	40061201 	andmi	r1, r6, r1, lsl #4
     e78:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
     e7c:	00001301 	andeq	r1, r0, r1, lsl #6
     e80:	11010b27 	tstne	r1, r7, lsr #22
     e84:	00061201 	andeq	r1, r6, r1, lsl #4
     e88:	00052800 	andeq	r2, r5, r0, lsl #16
     e8c:	0b3a0803 	bleq	e82ea0 <startup-0x1f17d160>
     e90:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     e94:	00001802 	andeq	r1, r0, r2, lsl #16
     e98:	3f012e29 	svccc	0x00012e29
     e9c:	3a0e0319 	bcc	381b08 <startup-0x1fc7e4f8>
     ea0:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     ea4:	11134919 	tstne	r3, r9, lsl r9
     ea8:	40061201 	andmi	r1, r6, r1, lsl #4
     eac:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
     eb0:	00001301 	andeq	r1, r0, r1, lsl #6
     eb4:	0300052a 	movweq	r0, #1322	; 0x52a
     eb8:	3b0b3a0e 	blcc	2cf6f8 <startup-0x1fd30908>
     ebc:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     ec0:	2b000018 	blcs	f28 <startup-0x1ffff0d8>
     ec4:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     ec8:	0b3a0e03 	bleq	e846dc <startup-0x1f17b924>
     ecc:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
     ed0:	01111349 	tsteq	r1, r9, asr #6
     ed4:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     ed8:	01194297 			; <UNDEFINED> instruction: 0x01194297
     edc:	2c000013 	stccs	0, cr0, [r0], {19}
     ee0:	0e03012e 	adfeqsp	f0, f3, #0.5
     ee4:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     ee8:	01111927 	tsteq	r1, r7, lsr #18
     eec:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     ef0:	00194297 	mulseq	r9, r7, r2
     ef4:	00052d00 	andeq	r2, r5, r0, lsl #26
     ef8:	0b3a0e03 	bleq	e8470c <startup-0x1f17b8f4>
     efc:	1349053b 	movtne	r0, #38203	; 0x953b
     f00:	00001802 	andeq	r1, r0, r2, lsl #16
     f04:	01110100 	tsteq	r1, r0, lsl #2
     f08:	0b130e25 	bleq	4c47a4 <startup-0x1fb3b85c>
     f0c:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
     f10:	06120111 			; <UNDEFINED> instruction: 0x06120111
     f14:	00001710 	andeq	r1, r0, r0, lsl r7
     f18:	0b002402 	bleq	9f28 <startup-0x1fff60d8>
     f1c:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
     f20:	0300000e 	movweq	r0, #14
     f24:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
     f28:	0b3b0b3a 	bleq	ec3c18 <startup-0x1f13c3e8>
     f2c:	00001349 	andeq	r1, r0, r9, asr #6
     f30:	0b002404 	bleq	9f48 <startup-0x1fff60b8>
     f34:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
     f38:	05000008 	streq	r0, [r0, #-8]
     f3c:	13490035 	movtne	r0, #36917	; 0x9035
     f40:	34060000 	strcc	r0, [r6], #-0
     f44:	3a0e0300 	bcc	381b4c <startup-0x1fc7e4b4>
     f48:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     f4c:	3c193f13 	ldccc	15, cr3, [r9], {19}
     f50:	07000019 	smladeq	r0, r9, r0, r0
     f54:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     f58:	0b3b0b3a 	bleq	ec3c48 <startup-0x1f13c3b8>
     f5c:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
     f60:	0000193c 	andeq	r1, r0, ip, lsr r9
     f64:	3e010408 	cdpcc	4, 0, cr0, cr1, cr8, {0}
     f68:	490b0b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp}
     f6c:	3b0b3a13 	blcc	2cf7c0 <startup-0x1fd30840>
     f70:	00130105 	andseq	r0, r3, r5, lsl #2
     f74:	00280900 	eoreq	r0, r8, r0, lsl #18
     f78:	0b1c0e03 	bleq	70478c <startup-0x1f8fb874>
     f7c:	130a0000 	movwne	r0, #40960	; 0xa000
     f80:	3a0b0b01 	bcc	2c3b8c <startup-0x1fd3c474>
     f84:	01053b0b 	tsteq	r5, fp, lsl #22
     f88:	0b000013 	bleq	fdc <startup-0x1ffff024>
     f8c:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
     f90:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     f94:	0b381349 	bleq	e05cc0 <startup-0x1f1fa340>
     f98:	0d0c0000 	stceq	0, cr0, [ip, #-0]
     f9c:	3a080300 	bcc	201ba4 <startup-0x1fdfe45c>
     fa0:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     fa4:	000b3813 	andeq	r3, fp, r3, lsl r8
     fa8:	01010d00 	tsteq	r1, r0, lsl #26
     fac:	13011349 	movwne	r1, #4937	; 0x1349
     fb0:	210e0000 	mrscs	r0, (UNDEF: 14)
     fb4:	2f134900 	svccs	0x00134900
     fb8:	0f00000b 	svceq	0x0000000b
     fbc:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
     fc0:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     fc4:	00001349 	andeq	r1, r0, r9, asr #6
     fc8:	3e010410 	cfmvdlrcc	mvd1, r0
     fcc:	490b0b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp}
     fd0:	3b0b3a13 	blcc	2cf824 <startup-0x1fd307dc>
     fd4:	0013010b 	andseq	r0, r3, fp, lsl #2
     fd8:	01131100 	tsteq	r3, r0, lsl #2
     fdc:	0b3a0b0b 	bleq	e83c10 <startup-0x1f17c3f0>
     fe0:	13010b3b 	movwne	r0, #6971	; 0x1b3b
     fe4:	0d120000 	ldceq	0, cr0, [r2, #-0]
     fe8:	3a0e0300 	bcc	381bf0 <startup-0x1fc7e410>
     fec:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     ff0:	000b3813 	andeq	r3, fp, r3, lsl r8
     ff4:	012e1300 			; <UNDEFINED> instruction: 0x012e1300
     ff8:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
     ffc:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    1000:	01111927 	tsteq	r1, r7, lsr #18
    1004:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    1008:	01194297 			; <UNDEFINED> instruction: 0x01194297
    100c:	14000013 	strne	r0, [r0], #-19	; 0xffffffed
    1010:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
    1014:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    1018:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
    101c:	34150000 	ldrcc	r0, [r5], #-0
    1020:	3a0e0300 	bcc	381c28 <startup-0x1fc7e3d8>
    1024:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    1028:	00180213 	andseq	r0, r8, r3, lsl r2
    102c:	000f1600 	andeq	r1, pc, r0, lsl #12
    1030:	13490b0b 	movtne	r0, #39691	; 0x9b0b
    1034:	2e170000 	cdpcs	0, 1, cr0, cr7, cr0, {0}
    1038:	03193f01 	tsteq	r9, #1, 30
    103c:	3b0b3a0e 	blcc	2cf87c <startup-0x1fd30784>
    1040:	49192705 	ldmdbmi	r9, {r0, r2, r8, r9, sl, sp}
    1044:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    1048:	97184006 	ldrls	r4, [r8, -r6]
    104c:	13011942 	movwne	r1, #6466	; 0x1942
    1050:	34180000 	ldrcc	r0, [r8], #-0
    1054:	3a080300 	bcc	201c5c <startup-0x1fdfe3a4>
    1058:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    105c:	00180213 	andseq	r0, r8, r3, lsl r2
    1060:	012e1900 			; <UNDEFINED> instruction: 0x012e1900
    1064:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
    1068:	0b3b0b3a 	bleq	ec3d58 <startup-0x1f13c2a8>
    106c:	01111927 	tsteq	r1, r7, lsr #18
    1070:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    1074:	01194297 			; <UNDEFINED> instruction: 0x01194297
    1078:	1a000013 	bne	10cc <startup-0x1fffef34>
    107c:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
    1080:	0b3b0b3a 	bleq	ec3d70 <startup-0x1f13c290>
    1084:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
    1088:	341b0000 	ldrcc	r0, [fp], #-0
    108c:	3a0e0300 	bcc	381c94 <startup-0x1fc7e36c>
    1090:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1094:	00180213 	andseq	r0, r8, r3, lsl r2
    1098:	00341c00 	eorseq	r1, r4, r0, lsl #24
    109c:	0b3a0803 	bleq	e830b0 <startup-0x1f17cf50>
    10a0:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    10a4:	00001802 	andeq	r1, r0, r2, lsl #16
    10a8:	3f012e1d 	svccc	0x00012e1d
    10ac:	3a0e0319 	bcc	381d18 <startup-0x1fc7e2e8>
    10b0:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    10b4:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
    10b8:	96184006 	ldrls	r4, [r8], -r6
    10bc:	00001942 	andeq	r1, r0, r2, asr #18
    10c0:	01110100 	tsteq	r1, r0, lsl #2
    10c4:	0b130e25 	bleq	4c4960 <startup-0x1fb3b6a0>
    10c8:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
    10cc:	06120111 			; <UNDEFINED> instruction: 0x06120111
    10d0:	00001710 	andeq	r1, r0, r0, lsl r7
    10d4:	0b002402 	bleq	a0e4 <startup-0x1fff5f1c>
    10d8:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    10dc:	0300000e 	movweq	r0, #14
    10e0:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
    10e4:	0b3b0b3a 	bleq	ec3dd4 <startup-0x1f13c22c>
    10e8:	00001349 	andeq	r1, r0, r9, asr #6
    10ec:	0b002404 	bleq	a104 <startup-0x1fff5efc>
    10f0:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    10f4:	05000008 	streq	r0, [r0, #-8]
    10f8:	13490026 	movtne	r0, #36902	; 0x9026
    10fc:	35060000 	strcc	r0, [r6, #-0]
    1100:	00134900 	andseq	r4, r3, r0, lsl #18
    1104:	01010700 	tsteq	r1, r0, lsl #14
    1108:	13011349 	movwne	r1, #4937	; 0x1349
    110c:	21080000 	mrscs	r0, (UNDEF: 8)
    1110:	2f134900 	svccs	0x00134900
    1114:	0900000b 	stmdbeq	r0, {r0, r1, r3}
    1118:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    111c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    1120:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
    1124:	0000193c 	andeq	r1, r0, ip, lsr r9
    1128:	0300340a 	movweq	r3, #1034	; 0x40a
    112c:	3b0b3a0e 	blcc	2cf96c <startup-0x1fd30694>
    1130:	3f13490b 	svccc	0x0013490b
    1134:	00193c19 	andseq	r3, r9, r9, lsl ip
    1138:	01040b00 	tsteq	r4, r0, lsl #22
    113c:	0b0b0b3e 	bleq	2c3e3c <startup-0x1fd3c1c4>
    1140:	0b3a1349 	bleq	e85e6c <startup-0x1f17a194>
    1144:	1301053b 	movwne	r0, #5435	; 0x153b
    1148:	280c0000 	stmdacs	ip, {}	; <UNPREDICTABLE>
    114c:	1c0e0300 	stcne	3, cr0, [lr], {-0}
    1150:	0d00000b 	stceq	0, cr0, [r0, #-44]	; 0xffffffd4
    1154:	08030028 	stmdaeq	r3, {r3, r5}
    1158:	00000b1c 	andeq	r0, r0, ip, lsl fp
    115c:	0300160e 	movweq	r1, #1550	; 0x60e
    1160:	3b0b3a0e 	blcc	2cf9a0 <startup-0x1fd30660>
    1164:	00134905 	andseq	r4, r3, r5, lsl #18
    1168:	01130f00 	tsteq	r3, r0, lsl #30
    116c:	0b3a0b0b 	bleq	e83da0 <startup-0x1f17c260>
    1170:	1301053b 	movwne	r0, #5435	; 0x153b
    1174:	0d100000 	ldceq	0, cr0, [r0, #-0]
    1178:	3a080300 	bcc	201d80 <startup-0x1fdfe280>
    117c:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    1180:	000b3813 	andeq	r3, fp, r3, lsl r8
    1184:	000d1100 	andeq	r1, sp, r0, lsl #2
    1188:	0b3a0e03 	bleq	e8499c <startup-0x1f17b664>
    118c:	1349053b 	movtne	r0, #38203	; 0x953b
    1190:	00000b38 	andeq	r0, r0, r8, lsr fp
    1194:	0b011312 	bleq	45de4 <startup-0x1ffba21c>
    1198:	3b0b3a0b 	blcc	2cf9cc <startup-0x1fd30634>
    119c:	0013010b 	andseq	r0, r3, fp, lsl #2
    11a0:	000d1300 	andeq	r1, sp, r0, lsl #6
    11a4:	0b3a0e03 	bleq	e849b8 <startup-0x1f17b648>
    11a8:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    11ac:	00000b38 	andeq	r0, r0, r8, lsr fp
    11b0:	03003414 	movweq	r3, #1044	; 0x414
    11b4:	3b0b3a0e 	blcc	2cf9f4 <startup-0x1fd3060c>
    11b8:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    11bc:	15000018 	strne	r0, [r0, #-24]	; 0xffffffe8
    11c0:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    11c4:	0b3a0e03 	bleq	e849d8 <startup-0x1f17b628>
    11c8:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
    11cc:	06120111 			; <UNDEFINED> instruction: 0x06120111
    11d0:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    11d4:	00130119 	andseq	r0, r3, r9, lsl r1
    11d8:	00051600 	andeq	r1, r5, r0, lsl #12
    11dc:	0b3a0e03 	bleq	e849f0 <startup-0x1f17b610>
    11e0:	1349053b 	movtne	r0, #38203	; 0x953b
    11e4:	00001802 	andeq	r1, r0, r2, lsl #16
    11e8:	3f012e17 	svccc	0x00012e17
    11ec:	3a0e0319 	bcc	381e58 <startup-0x1fc7e1a8>
    11f0:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    11f4:	11134919 	tstne	r3, r9, lsl r9
    11f8:	40061201 	andmi	r1, r6, r1, lsl #4
    11fc:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
    1200:	00001301 	andeq	r1, r0, r1, lsl #6
    1204:	03003418 	movweq	r3, #1048	; 0x418
    1208:	3b0b3a0e 	blcc	2cfa48 <startup-0x1fd305b8>
    120c:	02134905 	andseq	r4, r3, #81920	; 0x14000
    1210:	19000018 	stmdbne	r0, {r3, r4}
    1214:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
    1218:	0b3a0e03 	bleq	e84a2c <startup-0x1f17b5d4>
    121c:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
    1220:	06120111 			; <UNDEFINED> instruction: 0x06120111
    1224:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    1228:	1a000019 	bne	1294 <startup-0x1fffed6c>
    122c:	08030034 	stmdaeq	r3, {r2, r4, r5}
    1230:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    1234:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
    1238:	2e1b0000 	cdpcs	0, 1, cr0, cr11, cr0, {0}
    123c:	03193f01 	tsteq	r9, #1, 30
    1240:	3b0b3a0e 	blcc	2cfa80 <startup-0x1fd30580>
    1244:	11192705 	tstne	r9, r5, lsl #14
    1248:	40061201 	andmi	r1, r6, r1, lsl #4
    124c:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
    1250:	00001301 	andeq	r1, r0, r1, lsl #6
    1254:	0b000f1c 	bleq	4ecc <startup-0x1fffb134>
    1258:	0013490b 	andseq	r4, r3, fp, lsl #18
    125c:	002e1d00 	eoreq	r1, lr, r0, lsl #26
    1260:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
    1264:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    1268:	13491927 	movtne	r1, #39207	; 0x9927
    126c:	06120111 			; <UNDEFINED> instruction: 0x06120111
    1270:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    1274:	1e000019 	mcrne	0, 0, r0, cr0, cr9, {0}
    1278:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    127c:	0b3a0e03 	bleq	e84a90 <startup-0x1f17b570>
    1280:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
    1284:	01111349 	tsteq	r1, r9, asr #6
    1288:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    128c:	01194296 			; <UNDEFINED> instruction: 0x01194296
    1290:	1f000013 	svcne	0x00000013
    1294:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
    1298:	0b3a0e03 	bleq	e84aac <startup-0x1f17b554>
    129c:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    12a0:	06120111 			; <UNDEFINED> instruction: 0x06120111
    12a4:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    12a8:	00000019 	andeq	r0, r0, r9, lsl r0
    12ac:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
    12b0:	030b130e 	movweq	r1, #45838	; 0xb30e
    12b4:	110e1b0e 	tstne	lr, lr, lsl #22
    12b8:	10061201 	andne	r1, r6, r1, lsl #4
    12bc:	02000017 	andeq	r0, r0, #23
    12c0:	0b0b0024 	bleq	2c1358 <startup-0x1fd3eca8>
    12c4:	0e030b3e 	vmoveq.16	d3[0], r0
    12c8:	16030000 	strne	r0, [r3], -r0
    12cc:	3a0e0300 	bcc	381ed4 <startup-0x1fc7e12c>
    12d0:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    12d4:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
    12d8:	0b0b0024 	bleq	2c1370 <startup-0x1fd3ec90>
    12dc:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
    12e0:	13050000 	movwne	r0, #20480	; 0x5000
    12e4:	3a0b0b01 	bcc	2c3ef0 <startup-0x1fd3c110>
    12e8:	010b3b0b 	tsteq	fp, fp, lsl #22
    12ec:	06000013 			; <UNDEFINED> instruction: 0x06000013
    12f0:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    12f4:	0b3b0b3a 	bleq	ec3fe4 <startup-0x1f13c01c>
    12f8:	0b381349 	bleq	e06024 <startup-0x1f1f9fdc>
    12fc:	0d070000 	stceq	0, cr0, [r7, #-0]
    1300:	3a080300 	bcc	201f08 <startup-0x1fdfe0f8>
    1304:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1308:	000b3813 	andeq	r3, fp, r3, lsl r8
    130c:	01010800 	tsteq	r1, r0, lsl #16
    1310:	13011349 	movwne	r1, #4937	; 0x1349
    1314:	21090000 	mrscs	r0, (UNDEF: 9)
    1318:	2f134900 	svccs	0x00134900
    131c:	0a00000b 	beq	1350 <startup-0x1fffecb0>
    1320:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    1324:	0b3a0e03 	bleq	e84b38 <startup-0x1f17b4c8>
    1328:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    132c:	01111349 	tsteq	r1, r9, asr #6
    1330:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    1334:	01194297 			; <UNDEFINED> instruction: 0x01194297
    1338:	0b000013 	bleq	138c <startup-0x1fffec74>
    133c:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
    1340:	0b3b0b3a 	bleq	ec4030 <startup-0x1f13bfd0>
    1344:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
    1348:	0f0c0000 	svceq	0x000c0000
    134c:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
    1350:	0d000013 	stceq	0, cr0, [r0, #-76]	; 0xffffffb4
    1354:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    1358:	0b3a0e03 	bleq	e84b6c <startup-0x1f17b494>
    135c:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    1360:	06120111 			; <UNDEFINED> instruction: 0x06120111
    1364:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    1368:	00130119 	andseq	r0, r3, r9, lsl r1
    136c:	00340e00 	eorseq	r0, r4, r0, lsl #28
    1370:	0b3a0e03 	bleq	e84b84 <startup-0x1f17b47c>
    1374:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    1378:	00001802 	andeq	r1, r0, r2, lsl #16
    137c:	3f012e0f 	svccc	0x00012e0f
    1380:	3a0e0319 	bcc	381fec <startup-0x1fc7e014>
    1384:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    1388:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
    138c:	97184006 	ldrls	r4, [r8, -r6]
    1390:	00001942 	andeq	r1, r0, r2, asr #18
	...

Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	0000001c 	andeq	r0, r0, ip, lsl r0
   4:	00000002 	andeq	r0, r0, r2
   8:	00040000 	andeq	r0, r4, r0
   c:	00000000 	andeq	r0, r0, r0
  10:	20000010 	andcs	r0, r0, r0, lsl r0
  14:	000001f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
	...
  20:	0000001c 	andeq	r0, r0, ip, lsl r0
  24:	03be0002 			; <UNDEFINED> instruction: 0x03be0002
  28:	00040000 	andeq	r0, r4, r0
  2c:	00000000 	andeq	r0, r0, r0
  30:	20000200 	andcs	r0, r0, r0, lsl #4
  34:	000003d2 	ldrdeq	r0, [r0], -r2
	...
  40:	0000001c 	andeq	r0, r0, ip, lsl r0
  44:	090c0002 	stmdbeq	ip, {r1}
  48:	00040000 	andeq	r0, r4, r0
  4c:	00000000 	andeq	r0, r0, r0
  50:	200005d4 	ldrdcs	r0, [r0], -r4
  54:	000001c8 	andeq	r0, r0, r8, asr #3
	...
  60:	0000001c 	andeq	r0, r0, ip, lsl r0
  64:	0bca0002 	bleq	ff280074 <dissarmedBit+0xdf27c134>
  68:	00040000 	andeq	r0, r4, r0
  6c:	00000000 	andeq	r0, r0, r0
  70:	2000079c 	mulcs	r0, ip, r7
  74:	00000280 	andeq	r0, r0, r0, lsl #5
	...
  80:	0000001c 	andeq	r0, r0, ip, lsl r0
  84:	0fe70002 	svceq	0x00e70002
  88:	00040000 	andeq	r0, r4, r0
  8c:	00000000 	andeq	r0, r0, r0
  90:	20000a1c 	andcs	r0, r0, ip, lsl sl
  94:	000001c4 	andeq	r0, r0, r4, asr #3
	...
  a0:	00000024 	andeq	r0, r0, r4, lsr #32
  a4:	152e0002 	strne	r0, [lr, #-2]!
  a8:	00040000 	andeq	r0, r4, r0
  ac:	00000000 	andeq	r0, r0, r0
  b0:	20000be0 	andcs	r0, r0, r0, ror #23
  b4:	00000314 	andeq	r0, r0, r4, lsl r3
  b8:	20000000 	andcs	r0, r0, r0
  bc:	0000000c 	andeq	r0, r0, ip
	...
  c8:	0000001c 	andeq	r0, r0, ip, lsl r0
  cc:	1ed90002 	cdpne	0, 13, cr0, cr9, cr2, {0}
  d0:	00040000 	andeq	r0, r4, r0
  d4:	00000000 	andeq	r0, r0, r0
  d8:	20000ef4 	strdcs	r0, [r0], -r4
  dc:	00000174 	andeq	r0, r0, r4, ror r1
	...
  e8:	0000001c 	andeq	r0, r0, ip, lsl r0
  ec:	216a0002 	cmncs	sl, r2
  f0:	00040000 	andeq	r0, r4, r0
  f4:	00000000 	andeq	r0, r0, r0
  f8:	20001068 	andcs	r1, r0, r8, rrx
  fc:	000011d2 	ldrdeq	r1, [r0], -r2
	...
 108:	0000001c 	andeq	r0, r0, ip, lsl r0
 10c:	2d140002 	ldccs	0, cr0, [r4, #-8]
 110:	00040000 	andeq	r0, r4, r0
 114:	00000000 	andeq	r0, r0, r0
 118:	2000223c 	andcs	r2, r0, ip, lsr r2
 11c:	00000788 	andeq	r0, r0, r8, lsl #15
	...
 128:	0000001c 	andeq	r0, r0, ip, lsl r0
 12c:	3df40002 	ldclcc	0, cr0, [r4, #8]!
 130:	00040000 	andeq	r0, r4, r0
 134:	00000000 	andeq	r0, r0, r0
 138:	200029c4 	andcs	r2, r0, r4, asr #19
 13c:	0000050e 	andeq	r0, r0, lr, lsl #10
	...
 148:	0000001c 	andeq	r0, r0, ip, lsl r0
 14c:	441b0002 	ldrmi	r0, [fp], #-2
 150:	00040000 	andeq	r0, r4, r0
 154:	00000000 	andeq	r0, r0, r0
 158:	20002ed4 	ldrdcs	r2, [r0], -r4
 15c:	00000cf0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
	...
 168:	0000001c 	andeq	r0, r0, ip, lsl r0
 16c:	527e0002 	rsbspl	r0, lr, #2
 170:	00040000 	andeq	r0, r4, r0
 174:	00000000 	andeq	r0, r0, r0
 178:	20003bc4 	andcs	r3, r0, r4, asr #23
 17c:	00000128 	andeq	r0, r0, r8, lsr #2
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
       0:	00000203 	andeq	r0, r0, r3, lsl #4
       4:	01b50002 			; <UNDEFINED> instruction: 0x01b50002
       8:	01020000 	mrseq	r0, (UNDEF: 2)
       c:	000d0efb 	strdeq	r0, [sp], -fp
      10:	01010101 	tsteq	r1, r1, lsl #2
      14:	01000000 	mrseq	r0, (UNDEF: 0)
      18:	43010000 	movwmi	r0, #4096	; 0x1000
      1c:	73552f3a 	cmpvc	r5, #58, 30	; 0xe8
      20:	2f737265 	svccs	0x00737265
      24:	6d616441 	cfstrdvs	mvd6, [r1, #-260]!	; 0xfffffefc
      28:	6e4f2f74 	mcrvs	15, 2, r2, cr15, cr4, {3}
      2c:	69724465 	ldmdbvs	r2!, {r0, r2, r5, r6, sl, lr}^
      30:	442f6576 	strtmi	r6, [pc], #-1398	; 38 <startup-0x1fffffc8>
      34:	6d756b6f 	fldmdbxvs	r5!, {d22-d76}	;@ Deprecated
      38:	2f746e65 	svccs	0x00746e65
      3c:	48746947 	ldmdami	r4!, {r0, r1, r2, r6, r8, fp, sp, lr}^
      40:	442f6275 	strtmi	r6, [pc], #-629	; 48 <startup-0x1fffffb8>
      44:	39325441 	ldmdbcc	r2!, {r0, r6, sl, ip, lr}
      48:	614c2d30 	cmpvs	ip, r0, lsr sp
      4c:	79736d72 	ldmdbvc	r3!, {r1, r4, r5, r6, r8, sl, fp, sp, lr}^
      50:	6d657473 	cfstrdvs	mvd7, [r5, #-460]!	; 0xfffffe34
      54:	646f6b2f 	strbtvs	r6, [pc], #-2863	; 5c <startup-0x1fffffa4>
      58:	6f6f442f 	svcvs	0x006f442f
      5c:	3a630072 	bcc	18c022c <startup-0x1e73fdd4>
      60:	6573635c 	ldrbvs	r6, [r3, #-860]!	; 0xfffffca4
      64:	5c707061 	ldclpl	0, cr7, [r0], #-388	; 0xfffffe7c
      68:	65646f63 	strbvs	r6, [r4, #-3939]!	; 0xfffff09d
      6c:	6574696c 	ldrbvs	r6, [r4, #-2412]!	; 0xfffff694
      70:	6f6f745c 	svcvs	0x006f745c
      74:	675c736c 	ldrbvs	r7, [ip, -ip, ror #6]
      78:	612d6363 			; <UNDEFINED> instruction: 0x612d6363
      7c:	615c6d72 	cmpvs	ip, r2, ror sp
      80:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
      84:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
      88:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
      8c:	636e695c 	cmnvs	lr, #92, 18	; 0x170000
      90:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
      94:	63616d5c 	cmnvs	r1, #92, 26	; 0x1700
      98:	656e6968 	strbvs	r6, [lr, #-2408]!	; 0xfffff698
      9c:	5c3a6300 	ldcpl	3, cr6, [sl], #-0
      a0:	61657363 	cmnvs	r5, r3, ror #6
      a4:	635c7070 	cmpvs	ip, #112	; 0x70
      a8:	6c65646f 	cfstrdvs	mvd6, [r5], #-444	; 0xfffffe44
      ac:	5c657469 	cfstrdpl	mvd7, [r5], #-420	; 0xfffffe5c
      b0:	6c6f6f74 	stclvs	15, cr6, [pc], #-464	; fffffee8 <dissarmedBit+0xdfffbfa8>
      b4:	63675c73 	cmnvs	r7, #29440	; 0x7300
      b8:	72612d63 	rsbvc	r2, r1, #6336	; 0x18c0
      bc:	72615c6d 	rsbvc	r5, r1, #27904	; 0x6d00
      c0:	6f6e2d6d 	svcvs	0x006e2d6d
      c4:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
      c8:	5c696261 	sfmpl	f6, 2, [r9], #-388	; 0xfffffe7c
      cc:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
      d0:	5c656475 	cfstrdpl	mvd6, [r5], #-468	; 0xfffffe2c
      d4:	00737973 	rsbseq	r7, r3, r3, ror r9
      d8:	6c2f2e2e 	stcvs	14, cr2, [pc], #-184	; 28 <startup-0x1fffffd8>
      dc:	532f6269 			; <UNDEFINED> instruction: 0x532f6269
      e0:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
      e4:	6c5f3446 	cfldrdvs	mvd3, [pc], {70}	; 0x46
      e8:	432f6269 			; <UNDEFINED> instruction: 0x432f6269
      ec:	5349534d 	movtpl	r5, #37709	; 0x934d
      f0:	636e692f 	cmnvs	lr, #770048	; 0xbc000
      f4:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
      f8:	2f2e2e00 	svccs	0x002e2e00
      fc:	2f62696c 	svccs	0x0062696c
     100:	334d5453 	movtcc	r5, #54355	; 0xd453
     104:	5f344632 	svcpl	0x00344632
     108:	2f62696c 	svccs	0x0062696c
     10c:	334d5453 	movtcc	r5, #54355	; 0xd453
     110:	78344632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, lr}
     114:	74535f78 	ldrbvc	r5, [r3], #-3960	; 0xfffff088
     118:	72655064 	rsbvc	r5, r5, #100	; 0x64
     11c:	5f687069 	svcpl	0x00687069
     120:	76697244 	strbtvc	r7, [r9], -r4, asr #4
     124:	692f7265 	stmdbvs	pc!, {r0, r2, r5, r6, r9, ip, sp, lr}	; <UNPREDICTABLE>
     128:	2e00636e 	cdpcs	3, 0, cr6, cr0, cr14, {3}
     12c:	696c2f2e 	stmdbvs	ip!, {r1, r2, r3, r5, r8, r9, sl, fp, sp}^
     130:	64000062 	strvs	r0, [r0], #-98	; 0xffffff9e
     134:	5f726f6f 	svcpl	0x00726f6f
     138:	2e6e6163 	powcsez	f6, f6, f3
     13c:	00010063 	andeq	r0, r1, r3, rrx
     140:	65645f00 	strbvs	r5, [r4, #-3840]!	; 0xfffff100
     144:	6c756166 	ldfvse	f6, [r5], #-408	; 0xfffffe68
     148:	79745f74 	ldmdbvc	r4!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
     14c:	2e736570 	mrccs	5, 3, r6, cr3, cr0, {3}
     150:	00020068 	andeq	r0, r2, r8, rrx
     154:	74735f00 	ldrbtvc	r5, [r3], #-3840	; 0xfffff100
     158:	746e6964 	strbtvc	r6, [lr], #-2404	; 0xfffff69c
     15c:	0300682e 	movweq	r6, #2094	; 0x82e
     160:	6f630000 	svcvs	0x00630000
     164:	635f6572 	cmpvs	pc, #478150656	; 0x1c800000
     168:	682e346d 	stmdavs	lr!, {r0, r2, r3, r5, r6, sl, ip, sp}
     16c:	00000400 	andeq	r0, r0, r0, lsl #8
     170:	74737973 	ldrbtvc	r7, [r3], #-2419	; 0xfffff68d
     174:	735f6d65 	cmpvc	pc, #6464	; 0x1940
     178:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
     17c:	78783466 	ldmdavc	r8!, {r1, r2, r5, r6, sl, ip, sp}^
     180:	0500682e 	streq	r6, [r0, #-2094]	; 0xfffff7d2
     184:	74730000 	ldrbtvc	r0, [r3], #-0
     188:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
     18c:	2e787834 	mrccs	8, 3, r7, cr8, cr4, {1}
     190:	00050068 	andeq	r0, r5, r8, rrx
     194:	6d747300 	ldclvs	3, cr7, [r4, #-0]
     198:	34663233 	strbtcc	r3, [r6], #-563	; 0xfffffdcd
     19c:	635f7878 	cmpvs	pc, #120, 16	; 0x780000
     1a0:	682e6e61 	stmdavs	lr!, {r0, r5, r6, r9, sl, fp, sp, lr}
     1a4:	00000500 	andeq	r0, r0, r0, lsl #10
     1a8:	2e6e6163 	powcsez	f6, f6, f3
     1ac:	00060068 	andeq	r0, r6, r8, rrx
     1b0:	61747300 	cmnvs	r4, r0, lsl #6
     1b4:	70757472 	rsbsvc	r7, r5, r2, ror r4
     1b8:	0100682e 	tsteq	r0, lr, lsr #16
     1bc:	00000000 	andeq	r0, r0, r0
     1c0:	00100205 	andseq	r0, r0, r5, lsl #4
     1c4:	2f152000 	svccs	0x00152000
     1c8:	4b3e3d4b 	blmi	f8f6fc <startup-0x1f070904>
     1cc:	3f835967 	svccc	0x00835967
     1d0:	312f4b84 	smlawbcc	pc, r4, fp, r4	; <UNPREDICTABLE>
     1d4:	67596731 	smmlarvs	r9, r1, r7, r6
     1d8:	67af5975 			; <UNDEFINED> instruction: 0x67af5975
     1dc:	59598359 	ldmdbpl	r9, {r0, r3, r4, r6, r8, r9, pc}^
     1e0:	67864ba0 	strvs	r4, [r6, r0, lsr #23]
     1e4:	01040200 	mrseq	r0, R12_usr
     1e8:	04020067 	streq	r0, [r2], #-103	; 0xffffff99
     1ec:	49224901 	stmdbmi	r2!, {r0, r8, fp, lr}
     1f0:	22bb5b22 	adcscs	r5, fp, #34816	; 0x8800
     1f4:	02005559 	andeq	r5, r0, #373293056	; 0x16400000
     1f8:	58060104 	stmdapl	r6, {r2, r8}
     1fc:	68f45006 	ldmvs	r4!, {r1, r2, ip, lr}^
     200:	06024b9f 			; <UNDEFINED> instruction: 0x06024b9f
     204:	26010100 	strcs	r0, [r1], -r0, lsl #2
     208:	02000002 	andeq	r0, r0, #2
     20c:	00019f00 	andeq	r9, r1, r0, lsl #30
     210:	fb010200 	blx	40a1a <startup-0x1ffbf5e6>
     214:	01000d0e 	tsteq	r0, lr, lsl #26
     218:	00010101 	andeq	r0, r1, r1, lsl #2
     21c:	00010000 	andeq	r0, r1, r0
     220:	3a430100 	bcc	10c0628 <startup-0x1ef3f9d8>
     224:	6573552f 	ldrbvs	r5, [r3, #-1327]!	; 0xfffffad1
     228:	412f7372 			; <UNDEFINED> instruction: 0x412f7372
     22c:	746d6164 	strbtvc	r6, [sp], #-356	; 0xfffffe9c
     230:	656e4f2f 	strbvs	r4, [lr, #-3887]!	; 0xfffff0d1
     234:	76697244 	strbtvc	r7, [r9], -r4, asr #4
     238:	6f442f65 	svcvs	0x00442f65
     23c:	656d756b 	strbvs	r7, [sp, #-1387]!	; 0xfffffa95
     240:	472f746e 	strmi	r7, [pc, -lr, ror #8]!
     244:	75487469 	strbvc	r7, [r8, #-1129]	; 0xfffffb97
     248:	41442f62 	cmpmi	r4, r2, ror #30
     24c:	30393254 	eorscc	r3, r9, r4, asr r2
     250:	72614c2d 	rsbvc	r4, r1, #11520	; 0x2d00
     254:	7379736d 	cmnvc	r9, #-1275068415	; 0xb4000001
     258:	2f6d6574 	svccs	0x006d6574
     25c:	2f646f6b 	svccs	0x00646f6b
     260:	0062696c 	rsbeq	r6, r2, ip, ror #18
     264:	635c3a63 	cmpvs	ip, #405504	; 0x63000
     268:	70616573 	rsbvc	r6, r1, r3, ror r5
     26c:	6f635c70 	svcvs	0x00635c70
     270:	696c6564 	stmdbvs	ip!, {r2, r5, r6, r8, sl, sp, lr}^
     274:	745c6574 	ldrbvc	r6, [ip], #-1396	; 0xfffffa8c
     278:	736c6f6f 	cmnvc	ip, #444	; 0x1bc
     27c:	6363675c 	cmnvs	r3, #92, 14	; 0x1700000
     280:	6d72612d 	ldfvse	f6, [r2, #-180]!	; 0xffffff4c
     284:	6d72615c 	ldfvse	f6, [r2, #-368]!	; 0xfffffe90
     288:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
     28c:	61652d65 	cmnvs	r5, r5, ror #26
     290:	695c6962 	ldmdbvs	ip, {r1, r5, r6, r8, fp, sp, lr}^
     294:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
     298:	6d5c6564 	cfldr64vs	mvdx6, [ip, #-400]	; 0xfffffe70
     29c:	69686361 	stmdbvs	r8!, {r0, r5, r6, r8, r9, sp, lr}^
     2a0:	6300656e 	movwvs	r6, #1390	; 0x56e
     2a4:	73635c3a 	cmnvc	r3, #14848	; 0x3a00
     2a8:	70706165 	rsbsvc	r6, r0, r5, ror #2
     2ac:	646f635c 	strbtvs	r6, [pc], #-860	; 2b4 <startup-0x1ffffd4c>
     2b0:	74696c65 	strbtvc	r6, [r9], #-3173	; 0xfffff39b
     2b4:	6f745c65 	svcvs	0x00745c65
     2b8:	5c736c6f 	ldclpl	12, cr6, [r3], #-444	; 0xfffffe44
     2bc:	2d636367 	stclcs	3, cr6, [r3, #-412]!	; 0xfffffe64
     2c0:	5c6d7261 	sfmpl	f7, 2, [sp], #-388	; 0xfffffe7c
     2c4:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
     2c8:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
     2cc:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
     2d0:	6e695c69 	cdpvs	12, 6, cr5, cr9, cr9, {3}
     2d4:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
     2d8:	79735c65 	ldmdbvc	r3!, {r0, r2, r5, r6, sl, fp, ip, lr}^
     2dc:	2e2e0073 	mcrcs	0, 1, r0, cr14, cr3, {3}
     2e0:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
     2e4:	4d54532f 	ldclmi	3, cr5, [r4, #-188]	; 0xffffff44
     2e8:	34463233 	strbcc	r3, [r6], #-563	; 0xfffffdcd
     2ec:	62696c5f 	rsbvs	r6, r9, #24320	; 0x5f00
     2f0:	534d432f 	movtpl	r4, #54063	; 0xd32f
     2f4:	692f5349 	stmdbvs	pc!, {r0, r3, r6, r8, r9, ip, lr}	; <UNPREDICTABLE>
     2f8:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
     2fc:	2e006564 	cfsh32cs	mvfx6, mvfx0, #52
     300:	696c2f2e 	stmdbvs	ip!, {r1, r2, r3, r5, r8, r9, sl, fp, sp}^
     304:	54532f62 	ldrbpl	r2, [r3], #-3938	; 0xfffff09e
     308:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
     30c:	696c5f34 	stmdbvs	ip!, {r2, r4, r5, r8, r9, sl, fp, ip, lr}^
     310:	54532f62 	ldrbpl	r2, [r3], #-3938	; 0xfffff09e
     314:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
     318:	5f787834 	svcpl	0x00787834
     31c:	50647453 	rsbpl	r7, r4, r3, asr r4
     320:	70697265 	rsbvc	r7, r9, r5, ror #4
     324:	72445f68 	subvc	r5, r4, #104, 30	; 0x1a0
     328:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
     32c:	636e692f 	cmnvs	lr, #770048	; 0xbc000
     330:	2f2e2e00 	svccs	0x002e2e00
     334:	0062696c 	rsbeq	r6, r2, ip, ror #18
     338:	4e414300 	cdpmi	3, 4, cr4, cr1, cr0, {0}
     33c:	6f636e45 	svcvs	0x00636e45
     340:	65446564 	strbvs	r6, [r4, #-1380]	; 0xfffffa9c
     344:	65646f63 	strbvs	r6, [r4, #-3939]!	; 0xfffff09d
     348:	0100632e 	tsteq	r0, lr, lsr #6
     34c:	645f0000 	ldrbvs	r0, [pc], #-0	; 354 <startup-0x1ffffcac>
     350:	75616665 	strbvc	r6, [r1, #-1637]!	; 0xfffff99b
     354:	745f746c 	ldrbvc	r7, [pc], #-1132	; 35c <startup-0x1ffffca4>
     358:	73657079 	cmnvc	r5, #121	; 0x79
     35c:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
     360:	735f0000 	cmpvc	pc, #0
     364:	6e696474 	mcrvs	4, 3, r6, cr9, cr4, {3}
     368:	00682e74 	rsbeq	r2, r8, r4, ror lr
     36c:	63000003 	movwvs	r0, #3
     370:	5f65726f 	svcpl	0x0065726f
     374:	2e346d63 	cdpcs	13, 3, cr6, cr4, cr3, {3}
     378:	00040068 	andeq	r0, r4, r8, rrx
     37c:	73797300 	cmnvc	r9, #0, 6
     380:	5f6d6574 	svcpl	0x006d6574
     384:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
     388:	78346632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, sp, lr}
     38c:	00682e78 	rsbeq	r2, r8, r8, ror lr
     390:	73000005 	movwvc	r0, #5
     394:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
     398:	78783466 	ldmdavc	r8!, {r1, r2, r5, r6, sl, ip, sp}^
     39c:	6e61635f 	mcrvs	3, 3, r6, cr1, cr15, {2}
     3a0:	0500682e 	streq	r6, [r0, #-2094]	; 0xfffff7d2
     3a4:	41430000 	mrsmi	r0, (UNDEF: 67)
     3a8:	00682e4e 	rsbeq	r2, r8, lr, asr #28
     3ac:	00000006 	andeq	r0, r0, r6
     3b0:	00020500 	andeq	r0, r2, r0, lsl #10
     3b4:	1a200002 	bne	8003c4 <startup-0x1f7ffc3c>
     3b8:	040200f3 	streq	r0, [r2], #-243	; 0xffffff0d
     3bc:	06660601 	strbteq	r0, [r6], -r1, lsl #12
     3c0:	2f3f314b 	svccs	0x003f314b
     3c4:	3d5af391 	ldclcc	3, cr15, [sl, #-580]	; 0xfffffdbc
     3c8:	5c4b3f3d 	mcrrpl	15, 3, r3, fp, cr13
     3cc:	00687775 	rsbeq	r7, r8, r5, ror r7
     3d0:	21010402 	tstcs	r1, r2, lsl #8
     3d4:	ad4a0903 	vstrge.16	s1, [sl, #-6]	; <UNPREDICTABLE>
     3d8:	5a59912f 	bpl	166489c <startup-0x1e99b764>
     3dc:	4b3f3d3d 	blmi	fcf8d8 <startup-0x1f030728>
     3e0:	4b5a5959 	blmi	169694c <startup-0x1e9696b4>
     3e4:	51215a4b 			; <UNDEFINED> instruction: 0x51215a4b
     3e8:	912f4b76 			; <UNDEFINED> instruction: 0x912f4b76
     3ec:	3d3d5a59 	vldmdbcc	sp!, {s10-s98}
     3f0:	4b4b4b3f 	blmi	12d30f4 <startup-0x1ed2cf0c>
     3f4:	00304c4d 	eorseq	r4, r0, sp, asr #24
     3f8:	21010402 	tstcs	r1, r2, lsl #8
     3fc:	3f3e594c 	svccc	0x003e594c
     400:	2fbb5e4b 	svccs	0x00bb5e4b
     404:	59210867 	stmdbpl	r1!, {r0, r1, r2, r5, r6, fp}
     408:	3e3d3d5a 	mrccc	13, 1, r3, cr13, cr10, {2}
     40c:	2ff37b4b 	svccs	0x00f37b4b
     410:	59210867 	stmdbpl	r1!, {r0, r1, r2, r5, r6, fp}
     414:	3e3d3d5a 	mrccc	13, 1, r3, cr13, cr10, {2}
     418:	75764b4b 	ldrbvc	r4, [r6, #-2891]!	; 0xfffff4b5
     41c:	3d3e2f3e 	ldccc	15, cr2, [lr, #-248]!	; 0xffffff08
     420:	4e213f3e 	mcrmi	15, 1, r3, cr1, cr14, {1}
     424:	21f44b4b 	mvnscs	r4, fp, asr #22
     428:	3e4b4b4e 	vmlscc.f64	d20, d11, d14
     42c:	01000402 	tsteq	r0, r2, lsl #8
     430:	0001e501 	andeq	lr, r1, r1, lsl #10
     434:	9a000200 	bls	c3c <startup-0x1ffff3c4>
     438:	02000001 	andeq	r0, r0, #1
     43c:	0d0efb01 	vstreq	d15, [lr, #-4]
     440:	01010100 	mrseq	r0, (UNDEF: 17)
     444:	00000001 	andeq	r0, r0, r1
     448:	01000001 	tsteq	r0, r1
     44c:	552f3a43 	strpl	r3, [pc, #-2627]!	; fffffa11 <dissarmedBit+0xdfffbad1>
     450:	73726573 	cmnvc	r2, #482344960	; 0x1cc00000
     454:	6164412f 	cmnvs	r4, pc, lsr #2
     458:	4f2f746d 	svcmi	0x002f746d
     45c:	7244656e 	subvc	r6, r4, #461373440	; 0x1b800000
     460:	2f657669 	svccs	0x00657669
     464:	756b6f44 	strbvc	r6, [fp, #-3908]!	; 0xfffff0bc
     468:	746e656d 	strbtvc	r6, [lr], #-1389	; 0xfffffa93
     46c:	7469472f 	strbtvc	r4, [r9], #-1839	; 0xfffff8d1
     470:	2f627548 	svccs	0x00627548
     474:	32544144 	subscc	r4, r4, #68, 2
     478:	4c2d3039 	stcmi	0, cr3, [sp], #-228	; 0xffffff1c
     47c:	736d7261 	cmnvc	sp, #268435462	; 0x10000006
     480:	65747379 	ldrbvs	r7, [r4, #-889]!	; 0xfffffc87
     484:	6f6b2f6d 	svcvs	0x006b2f6d
     488:	6f442f64 	svcvs	0x00442f64
     48c:	6300726f 	movwvs	r7, #623	; 0x26f
     490:	73635c3a 	cmnvc	r3, #14848	; 0x3a00
     494:	70706165 	rsbsvc	r6, r0, r5, ror #2
     498:	646f635c 	strbtvs	r6, [pc], #-860	; 4a0 <startup-0x1ffffb60>
     49c:	74696c65 	strbtvc	r6, [r9], #-3173	; 0xfffff39b
     4a0:	6f745c65 	svcvs	0x00745c65
     4a4:	5c736c6f 	ldclpl	12, cr6, [r3], #-444	; 0xfffffe44
     4a8:	2d636367 	stclcs	3, cr6, [r3, #-412]!	; 0xfffffe64
     4ac:	5c6d7261 	sfmpl	f7, 2, [sp], #-388	; 0xfffffe7c
     4b0:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
     4b4:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
     4b8:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
     4bc:	6e695c69 	cdpvs	12, 6, cr5, cr9, cr9, {3}
     4c0:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
     4c4:	616d5c65 	cmnvs	sp, r5, ror #24
     4c8:	6e696863 	cdpvs	8, 6, cr6, cr9, cr3, {3}
     4cc:	3a630065 	bcc	18c0668 <startup-0x1e73f998>
     4d0:	6573635c 	ldrbvs	r6, [r3, #-860]!	; 0xfffffca4
     4d4:	5c707061 	ldclpl	0, cr7, [r0], #-388	; 0xfffffe7c
     4d8:	65646f63 	strbvs	r6, [r4, #-3939]!	; 0xfffff09d
     4dc:	6574696c 	ldrbvs	r6, [r4, #-2412]!	; 0xfffff694
     4e0:	6f6f745c 	svcvs	0x006f745c
     4e4:	675c736c 	ldrbvs	r7, [ip, -ip, ror #6]
     4e8:	612d6363 			; <UNDEFINED> instruction: 0x612d6363
     4ec:	615c6d72 	cmpvs	ip, r2, ror sp
     4f0:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
     4f4:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
     4f8:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
     4fc:	636e695c 	cmnvs	lr, #92, 18	; 0x170000
     500:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
     504:	7379735c 	cmnvc	r9, #92, 6	; 0x70000001
     508:	2f2e2e00 	svccs	0x002e2e00
     50c:	2f62696c 	svccs	0x0062696c
     510:	334d5453 	movtcc	r5, #54355	; 0xd453
     514:	5f344632 	svcpl	0x00344632
     518:	2f62696c 	svccs	0x0062696c
     51c:	49534d43 	ldmdbmi	r3, {r0, r1, r6, r8, sl, fp, lr}^
     520:	6e692f53 	mcrvs	15, 3, r2, cr9, cr3, {2}
     524:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
     528:	2e2e0065 	cdpcs	0, 2, cr0, cr14, cr5, {3}
     52c:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
     530:	4d54532f 	ldclmi	3, cr5, [r4, #-188]	; 0xffffff44
     534:	34463233 	strbcc	r3, [r6], #-563	; 0xfffffdcd
     538:	62696c5f 	rsbvs	r6, r9, #24320	; 0x5f00
     53c:	4d54532f 	ldclmi	3, cr5, [r4, #-188]	; 0xffffff44
     540:	34463233 	strbcc	r3, [r6], #-563	; 0xfffffdcd
     544:	535f7878 	cmppl	pc, #120, 16	; 0x780000
     548:	65506474 	ldrbvs	r6, [r0, #-1140]	; 0xfffffb8c
     54c:	68706972 	ldmdavs	r0!, {r1, r4, r5, r6, r8, fp, sp, lr}^
     550:	6972445f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, sl, lr}^
     554:	2f726576 	svccs	0x00726576
     558:	00636e69 	rsbeq	r6, r3, r9, ror #28
     55c:	696e6900 	stmdbvs	lr!, {r8, fp, sp, lr}^
     560:	50472e74 	subpl	r2, r7, r4, ror lr
     564:	632e4f49 			; <UNDEFINED> instruction: 0x632e4f49
     568:	00000100 	andeq	r0, r0, r0, lsl #2
     56c:	6665645f 			; <UNDEFINED> instruction: 0x6665645f
     570:	746c7561 	strbtvc	r7, [ip], #-1377	; 0xfffffa9f
     574:	7079745f 	rsbsvc	r7, r9, pc, asr r4
     578:	682e7365 	stmdavs	lr!, {r0, r2, r5, r6, r8, r9, ip, sp, lr}
     57c:	00000200 	andeq	r0, r0, r0, lsl #4
     580:	6474735f 	ldrbtvs	r7, [r4], #-863	; 0xfffffca1
     584:	2e746e69 	cdpcs	14, 7, cr6, cr4, cr9, {3}
     588:	00030068 	andeq	r0, r3, r8, rrx
     58c:	726f6300 	rsbvc	r6, pc, #0, 6
     590:	6d635f65 	stclvs	15, cr5, [r3, #-404]!	; 0xfffffe6c
     594:	00682e34 	rsbeq	r2, r8, r4, lsr lr
     598:	73000004 	movwvc	r0, #4
     59c:	65747379 	ldrbvs	r7, [r4, #-889]!	; 0xfffffc87
     5a0:	74735f6d 	ldrbtvc	r5, [r3], #-3949	; 0xfffff093
     5a4:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
     5a8:	2e787834 	mrccs	8, 3, r7, cr8, cr4, {1}
     5ac:	00050068 	andeq	r0, r5, r8, rrx
     5b0:	6d747300 	ldclvs	3, cr7, [r4, #-0]
     5b4:	34663233 	strbtcc	r3, [r6], #-563	; 0xfffffdcd
     5b8:	682e7878 	stmdavs	lr!, {r3, r4, r5, r6, fp, ip, sp, lr}
     5bc:	00000500 	andeq	r0, r0, r0, lsl #10
     5c0:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
     5c4:	78346632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, sp, lr}
     5c8:	70675f78 	rsbvc	r5, r7, r8, ror pc
     5cc:	682e6f69 	stmdavs	lr!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}
     5d0:	00000500 	andeq	r0, r0, r0, lsl #10
     5d4:	02050000 	andeq	r0, r5, #0
     5d8:	200005d4 	ldrdcs	r0, [r0], -r4
     5dc:	4b4b4015 	blmi	12d0638 <startup-0x1ed2f9c8>
     5e0:	3d3d3d3d 	ldccc	13, cr3, [sp, #-244]!	; 0xffffff0c
     5e4:	3d3d4b69 	fldmdbxcc	sp!, {d4-d55}	;@ Deprecated
     5e8:	4b4b693d 	blmi	12daae4 <startup-0x1ed2551c>
     5ec:	3d3d3d3d 	ldccc	13, cr3, [sp, #-244]!	; 0xffffff0c
     5f0:	3d3d4b69 	fldmdbxcc	sp!, {d4-d55}	;@ Deprecated
     5f4:	4b4b693d 	blmi	12daaf0 <startup-0x1ed25510>
     5f8:	3d3d3d3d 	ldccc	13, cr3, [sp, #-244]!	; 0xffffff0c
     5fc:	3d3d4b69 	fldmdbxcc	sp!, {d4-d55}	;@ Deprecated
     600:	4b4b693d 	blmi	12daafc <startup-0x1ed25504>
     604:	3d3d3d3d 	ldccc	13, cr3, [sp, #-244]!	; 0xffffff0c
     608:	3d3d4b69 	fldmdbxcc	sp!, {d4-d55}	;@ Deprecated
     60c:	4b4b693d 	blmi	12dab08 <startup-0x1ed254f8>
     610:	3d3d3d3d 	ldccc	13, cr3, [sp, #-244]!	; 0xffffff0c
     614:	00130267 	andseq	r0, r3, r7, ror #4
     618:	025d0101 	subseq	r0, sp, #1073741824	; 0x40000000
     61c:	00020000 	andeq	r0, r2, r0
     620:	00000193 	muleq	r0, r3, r1
     624:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
     628:	0101000d 	tsteq	r1, sp
     62c:	00000101 	andeq	r0, r0, r1, lsl #2
     630:	00000100 	andeq	r0, r0, r0, lsl #2
     634:	2f3a4301 	svccs	0x003a4301
     638:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
     63c:	64412f73 	strbvs	r2, [r1], #-3955	; 0xfffff08d
     640:	2f746d61 	svccs	0x00746d61
     644:	44656e4f 	strbtmi	r6, [r5], #-3663	; 0xfffff1b1
     648:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
     64c:	6b6f442f 	blvs	1bd1710 <startup-0x1e42e8f0>
     650:	6e656d75 	mcrvs	13, 3, r6, cr5, cr5, {3}
     654:	69472f74 	stmdbvs	r7, {r2, r4, r5, r6, r8, r9, sl, fp, sp}^
     658:	62754874 	rsbsvs	r4, r5, #116, 16	; 0x740000
     65c:	5441442f 	strbpl	r4, [r1], #-1071	; 0xfffffbd1
     660:	2d303932 			; <UNDEFINED> instruction: 0x2d303932
     664:	6d72614c 	ldfvse	f6, [r2, #-304]!	; 0xfffffed0
     668:	74737973 	ldrbtvc	r7, [r3], #-2419	; 0xfffff68d
     66c:	6b2f6d65 	blvs	bdbc08 <startup-0x1f4243f8>
     670:	442f646f 	strtmi	r6, [pc], #-1135	; 678 <startup-0x1ffff988>
     674:	00726f6f 	rsbseq	r6, r2, pc, ror #30
     678:	635c3a63 	cmpvs	ip, #405504	; 0x63000
     67c:	70616573 	rsbvc	r6, r1, r3, ror r5
     680:	6f635c70 	svcvs	0x00635c70
     684:	696c6564 	stmdbvs	ip!, {r2, r5, r6, r8, sl, sp, lr}^
     688:	745c6574 	ldrbvc	r6, [ip], #-1396	; 0xfffffa8c
     68c:	736c6f6f 	cmnvc	ip, #444	; 0x1bc
     690:	6363675c 	cmnvs	r3, #92, 14	; 0x1700000
     694:	6d72612d 	ldfvse	f6, [r2, #-180]!	; 0xffffff4c
     698:	6d72615c 	ldfvse	f6, [r2, #-368]!	; 0xfffffe90
     69c:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
     6a0:	61652d65 	cmnvs	r5, r5, ror #26
     6a4:	695c6962 	ldmdbvs	ip, {r1, r5, r6, r8, fp, sp, lr}^
     6a8:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
     6ac:	6d5c6564 	cfldr64vs	mvdx6, [ip, #-400]	; 0xfffffe70
     6b0:	69686361 	stmdbvs	r8!, {r0, r5, r6, r8, r9, sp, lr}^
     6b4:	6300656e 	movwvs	r6, #1390	; 0x56e
     6b8:	73635c3a 	cmnvc	r3, #14848	; 0x3a00
     6bc:	70706165 	rsbsvc	r6, r0, r5, ror #2
     6c0:	646f635c 	strbtvs	r6, [pc], #-860	; 6c8 <startup-0x1ffff938>
     6c4:	74696c65 	strbtvc	r6, [r9], #-3173	; 0xfffff39b
     6c8:	6f745c65 	svcvs	0x00745c65
     6cc:	5c736c6f 	ldclpl	12, cr6, [r3], #-444	; 0xfffffe44
     6d0:	2d636367 	stclcs	3, cr6, [r3, #-412]!	; 0xfffffe64
     6d4:	5c6d7261 	sfmpl	f7, 2, [sp], #-388	; 0xfffffe7c
     6d8:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
     6dc:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
     6e0:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
     6e4:	6e695c69 	cdpvs	12, 6, cr5, cr9, cr9, {3}
     6e8:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
     6ec:	79735c65 	ldmdbvc	r3!, {r0, r2, r5, r6, sl, fp, ip, lr}^
     6f0:	2e2e0073 	mcrcs	0, 1, r0, cr14, cr3, {3}
     6f4:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
     6f8:	4d54532f 	ldclmi	3, cr5, [r4, #-188]	; 0xffffff44
     6fc:	34463233 	strbcc	r3, [r6], #-563	; 0xfffffdcd
     700:	62696c5f 	rsbvs	r6, r9, #24320	; 0x5f00
     704:	534d432f 	movtpl	r4, #54063	; 0xd32f
     708:	692f5349 	stmdbvs	pc!, {r0, r3, r6, r8, r9, ip, lr}	; <UNPREDICTABLE>
     70c:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
     710:	2e006564 	cfsh32cs	mvfx6, mvfx0, #52
     714:	696c2f2e 	stmdbvs	ip!, {r1, r2, r3, r5, r8, r9, sl, fp, sp}^
     718:	54532f62 	ldrbpl	r2, [r3], #-3938	; 0xfffff09e
     71c:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
     720:	696c5f34 	stmdbvs	ip!, {r2, r4, r5, r8, r9, sl, fp, ip, lr}^
     724:	54532f62 	ldrbpl	r2, [r3], #-3938	; 0xfffff09e
     728:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
     72c:	5f787834 	svcpl	0x00787834
     730:	50647453 	rsbpl	r7, r4, r3, asr r4
     734:	70697265 	rsbvc	r7, r9, r5, ror #4
     738:	72445f68 	subvc	r5, r4, #104, 30	; 0x1a0
     73c:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
     740:	636e692f 	cmnvs	lr, #770048	; 0xbc000
     744:	75660000 	strbvc	r0, [r6, #-0]!
     748:	6974636e 	ldmdbvs	r4!, {r1, r2, r3, r5, r6, r8, r9, sp, lr}^
     74c:	2e736e6f 	cdpcs	14, 7, cr6, cr3, cr15, {3}
     750:	00010063 	andeq	r0, r1, r3, rrx
     754:	65645f00 	strbvs	r5, [r4, #-3840]!	; 0xfffff100
     758:	6c756166 	ldfvse	f6, [r5], #-408	; 0xfffffe68
     75c:	79745f74 	ldmdbvc	r4!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
     760:	2e736570 	mrccs	5, 3, r6, cr3, cr0, {3}
     764:	00020068 	andeq	r0, r2, r8, rrx
     768:	74735f00 	ldrbtvc	r5, [r3], #-3840	; 0xfffff100
     76c:	746e6964 	strbtvc	r6, [lr], #-2404	; 0xfffff69c
     770:	0300682e 	movweq	r6, #2094	; 0x82e
     774:	6f630000 	svcvs	0x00630000
     778:	635f6572 	cmpvs	pc, #478150656	; 0x1c800000
     77c:	682e346d 	stmdavs	lr!, {r0, r2, r3, r5, r6, sl, ip, sp}
     780:	00000400 	andeq	r0, r0, r0, lsl #8
     784:	74737973 	ldrbtvc	r7, [r3], #-2419	; 0xfffff68d
     788:	735f6d65 	cmpvc	pc, #6464	; 0x1940
     78c:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
     790:	78783466 	ldmdavc	r8!, {r1, r2, r5, r6, sl, ip, sp}^
     794:	0500682e 	streq	r6, [r0, #-2094]	; 0xfffff7d2
     798:	74730000 	ldrbtvc	r0, [r3], #-0
     79c:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
     7a0:	2e787834 	mrccs	8, 3, r7, cr8, cr4, {1}
     7a4:	00050068 	andeq	r0, r5, r8, rrx
     7a8:	61747300 	cmnvs	r4, r0, lsl #6
     7ac:	70757472 	rsbsvc	r7, r5, r2, ror r4
     7b0:	0100682e 	tsteq	r0, lr, lsr #16
     7b4:	00000000 	andeq	r0, r0, r0
     7b8:	079c0205 	ldreq	r0, [ip, r5, lsl #4]
     7bc:	4b1a2000 	blmi	6887c4 <startup-0x1f97783c>
     7c0:	04020059 	streq	r0, [r2], #-89	; 0xffffffa7
     7c4:	06200601 	strteq	r0, [r0], -r1, lsl #12
     7c8:	4b4b7759 	blmi	12de534 <startup-0x1ed21acc>
     7cc:	594c2231 	stmdbpl	ip, {r0, r4, r5, r9, sp}^
     7d0:	afad763e 	svcge	0x00ad763e
     7d4:	02005a92 	andeq	r5, r0, #598016	; 0x92000
     7d8:	00690204 	rsbeq	r0, r9, r4, lsl #4
     7dc:	03020402 	movweq	r0, #9218	; 0x2402
     7e0:	02003c71 	andeq	r3, r0, #28928	; 0x7100
     7e4:	3c060104 	stfccs	f0, [r6], {4}
     7e8:	4a120306 	bmi	481408 <startup-0x1fb7ebf8>
     7ec:	00914b84 	addseq	r4, r1, r4, lsl #23
     7f0:	06010402 	streq	r0, [r1], -r2, lsl #8
     7f4:	a1590658 	cmpge	r9, r8, asr r6
     7f8:	914b8492 			; <UNDEFINED> instruction: 0x914b8492
     7fc:	01040200 	mrseq	r0, R12_usr
     800:	02005806 	andeq	r5, r0, #393216	; 0x60000
     804:	06580204 	ldrbeq	r0, [r8], -r4, lsl #4
     808:	22306759 	eorscs	r6, r0, #23330816	; 0x1640000
     80c:	02005a93 	andeq	r5, r0, #602112	; 0x93000
     810:	003e0304 	eorseq	r0, lr, r4, lsl #6
     814:	91030402 	tstls	r3, r2, lsl #8
     818:	03040200 	movweq	r0, #16896	; 0x4200
     81c:	0402003d 	streq	r0, [r2], #-61	; 0xffffffc3
     820:	02003803 	andeq	r3, r0, #196608	; 0x30000
     824:	3c060104 	stfccs	f0, [r6], {4}
     828:	02005106 	andeq	r5, r0, #-2147483647	; 0x80000001
     82c:	003e0304 	eorseq	r0, lr, r4, lsl #6
     830:	91030402 	tstls	r3, r2, lsl #8
     834:	03040200 	movweq	r0, #16896	; 0x4200
     838:	0402003d 	streq	r0, [r2], #-61	; 0xffffffc3
     83c:	02003803 	andeq	r3, r0, #196608	; 0x30000
     840:	3c060104 	stfccs	f0, [r6], {4}
     844:	003d4206 	eorseq	r4, sp, r6, lsl #4
     848:	3e030402 	cdpcc	4, 0, cr0, cr3, cr2, {0}
     84c:	03040200 	movweq	r0, #16896	; 0x4200
     850:	04020091 	streq	r0, [r2], #-145	; 0xffffff6f
     854:	02003903 	andeq	r3, r0, #49152	; 0xc000
     858:	3c060104 	stfccs	f0, [r6], {4}
     85c:	004b4f06 	subeq	r4, fp, r6, lsl #30
     860:	3e030402 	cdpcc	4, 0, cr0, cr3, cr2, {0}
     864:	03040200 	movweq	r0, #16896	; 0x4200
     868:	04020091 	streq	r0, [r2], #-145	; 0xffffff6f
     86c:	02003903 	andeq	r3, r0, #49152	; 0xc000
     870:	3c060104 	stfccs	f0, [r6], {4}
     874:	07024f06 	streq	r4, [r2, -r6, lsl #30]
     878:	fa010100 	blx	40c80 <startup-0x1ffbf380>
     87c:	02000001 	andeq	r0, r0, #1
     880:	0001b500 	andeq	fp, r1, r0, lsl #10
     884:	fb010200 	blx	4108e <startup-0x1ffbef72>
     888:	01000d0e 	tsteq	r0, lr, lsl #26
     88c:	00010101 	andeq	r0, r1, r1, lsl #2
     890:	00010000 	andeq	r0, r1, r0
     894:	3a430100 	bcc	10c0c9c <startup-0x1ef3f364>
     898:	6573552f 	ldrbvs	r5, [r3, #-1327]!	; 0xfffffad1
     89c:	412f7372 			; <UNDEFINED> instruction: 0x412f7372
     8a0:	746d6164 	strbtvc	r6, [sp], #-356	; 0xfffffe9c
     8a4:	656e4f2f 	strbvs	r4, [lr, #-3887]!	; 0xfffff0d1
     8a8:	76697244 	strbtvc	r7, [r9], -r4, asr #4
     8ac:	6f442f65 	svcvs	0x00442f65
     8b0:	656d756b 	strbvs	r7, [sp, #-1387]!	; 0xfffffa95
     8b4:	472f746e 	strmi	r7, [pc, -lr, ror #8]!
     8b8:	75487469 	strbvc	r7, [r8, #-1129]	; 0xfffffb97
     8bc:	41442f62 	cmpmi	r4, r2, ror #30
     8c0:	30393254 	eorscc	r3, r9, r4, asr r2
     8c4:	72614c2d 	rsbvc	r4, r1, #11520	; 0x2d00
     8c8:	7379736d 	cmnvc	r9, #-1275068415	; 0xb4000001
     8cc:	2f6d6574 	svccs	0x006d6574
     8d0:	2f646f6b 	svccs	0x00646f6b
     8d4:	2f62696c 	svccs	0x0062696c
     8d8:	334d5453 	movtcc	r5, #54355	; 0xd453
     8dc:	5f344632 	svcpl	0x00344632
     8e0:	2f62696c 	svccs	0x0062696c
     8e4:	334d5453 	movtcc	r5, #54355	; 0xd453
     8e8:	78344632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, lr}
     8ec:	74535f78 	ldrbvc	r5, [r3], #-3960	; 0xfffff088
     8f0:	72655064 	rsbvc	r5, r5, #100	; 0x64
     8f4:	5f687069 	svcpl	0x00687069
     8f8:	76697244 	strbtvc	r7, [r9], -r4, asr #4
     8fc:	732f7265 			; <UNDEFINED> instruction: 0x732f7265
     900:	63006372 	movwvs	r6, #882	; 0x372
     904:	73635c3a 	cmnvc	r3, #14848	; 0x3a00
     908:	70706165 	rsbsvc	r6, r0, r5, ror #2
     90c:	646f635c 	strbtvs	r6, [pc], #-860	; 914 <startup-0x1ffff6ec>
     910:	74696c65 	strbtvc	r6, [r9], #-3173	; 0xfffff39b
     914:	6f745c65 	svcvs	0x00745c65
     918:	5c736c6f 	ldclpl	12, cr6, [r3], #-444	; 0xfffffe44
     91c:	2d636367 	stclcs	3, cr6, [r3, #-412]!	; 0xfffffe64
     920:	5c6d7261 	sfmpl	f7, 2, [sp], #-388	; 0xfffffe7c
     924:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
     928:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
     92c:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
     930:	6e695c69 	cdpvs	12, 6, cr5, cr9, cr9, {3}
     934:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
     938:	616d5c65 	cmnvs	sp, r5, ror #24
     93c:	6e696863 	cdpvs	8, 6, cr6, cr9, cr3, {3}
     940:	3a630065 	bcc	18c0adc <startup-0x1e73f524>
     944:	6573635c 	ldrbvs	r6, [r3, #-860]!	; 0xfffffca4
     948:	5c707061 	ldclpl	0, cr7, [r0], #-388	; 0xfffffe7c
     94c:	65646f63 	strbvs	r6, [r4, #-3939]!	; 0xfffff09d
     950:	6574696c 	ldrbvs	r6, [r4, #-2412]!	; 0xfffff694
     954:	6f6f745c 	svcvs	0x006f745c
     958:	675c736c 	ldrbvs	r7, [ip, -ip, ror #6]
     95c:	612d6363 			; <UNDEFINED> instruction: 0x612d6363
     960:	615c6d72 	cmpvs	ip, r2, ror sp
     964:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
     968:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
     96c:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
     970:	636e695c 	cmnvs	lr, #92, 18	; 0x170000
     974:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
     978:	7379735c 	cmnvc	r9, #92, 6	; 0x70000001
     97c:	2f2e2e00 	svccs	0x002e2e00
     980:	2f62696c 	svccs	0x0062696c
     984:	334d5453 	movtcc	r5, #54355	; 0xd453
     988:	5f344632 	svcpl	0x00344632
     98c:	2f62696c 	svccs	0x0062696c
     990:	49534d43 	ldmdbmi	r3, {r0, r1, r6, r8, sl, fp, lr}^
     994:	6e692f53 	mcrvs	15, 3, r2, cr9, cr3, {2}
     998:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
     99c:	2e2e0065 	cdpcs	0, 2, cr0, cr14, cr5, {3}
     9a0:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
     9a4:	4d54532f 	ldclmi	3, cr5, [r4, #-188]	; 0xffffff44
     9a8:	34463233 	strbcc	r3, [r6], #-563	; 0xfffffdcd
     9ac:	62696c5f 	rsbvs	r6, r9, #24320	; 0x5f00
     9b0:	4d54532f 	ldclmi	3, cr5, [r4, #-188]	; 0xffffff44
     9b4:	34463233 	strbcc	r3, [r6], #-563	; 0xfffffdcd
     9b8:	535f7878 	cmppl	pc, #120, 16	; 0x780000
     9bc:	65506474 	ldrbvs	r6, [r0, #-1140]	; 0xfffffb8c
     9c0:	68706972 	ldmdavs	r0!, {r1, r4, r5, r6, r8, fp, sp, lr}^
     9c4:	6972445f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, sl, lr}^
     9c8:	2f726576 	svccs	0x00726576
     9cc:	00636e69 	rsbeq	r6, r3, r9, ror #28
     9d0:	73696d00 	cmnvc	r9, #0, 26
     9d4:	00632e63 	rsbeq	r2, r3, r3, ror #28
     9d8:	5f000001 	svcpl	0x00000001
     9dc:	61666564 	cmnvs	r6, r4, ror #10
     9e0:	5f746c75 	svcpl	0x00746c75
     9e4:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
     9e8:	00682e73 	rsbeq	r2, r8, r3, ror lr
     9ec:	5f000002 	svcpl	0x00000002
     9f0:	69647473 	stmdbvs	r4!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
     9f4:	682e746e 	stmdavs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
     9f8:	00000300 	andeq	r0, r0, r0, lsl #6
     9fc:	65726f63 	ldrbvs	r6, [r2, #-3939]!	; 0xfffff09d
     a00:	346d635f 	strbtcc	r6, [sp], #-863	; 0xfffffca1
     a04:	0400682e 	streq	r6, [r0], #-2094	; 0xfffff7d2
     a08:	79730000 	ldmdbvc	r3!, {}^	; <UNPREDICTABLE>
     a0c:	6d657473 	cfstrdvs	mvd7, [r5, #-460]!	; 0xfffffe34
     a10:	6d74735f 	ldclvs	3, cr7, [r4, #-380]!	; 0xfffffe84
     a14:	34663233 	strbtcc	r3, [r6], #-563	; 0xfffffdcd
     a18:	682e7878 	stmdavs	lr!, {r3, r4, r5, r6, fp, ip, sp, lr}
     a1c:	00000500 	andeq	r0, r0, r0, lsl #10
     a20:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
     a24:	78346632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, sp, lr}
     a28:	00682e78 	rsbeq	r2, r8, r8, ror lr
     a2c:	6d000005 	stcvs	0, cr0, [r0, #-20]	; 0xffffffec
     a30:	2e637369 	cdpcs	3, 6, cr7, cr3, cr9, {3}
     a34:	00050068 	andeq	r0, r5, r8, rrx
     a38:	05000000 	streq	r0, [r0, #-0]
     a3c:	000a1c02 	andeq	r1, sl, r2, lsl #24
     a40:	00f60320 	rscseq	r0, r6, r0, lsr #6
     a44:	03594f01 	cmpeq	r9, #1, 30
     a48:	c14b900c 	cmpgt	fp, ip
     a4c:	92759f4d 	rsbsls	r9, r5, #308	; 0x134
     a50:	b05aae91 			; <UNDEFINED> instruction: 0xb05aae91
     a54:	032d6757 			; <UNDEFINED> instruction: 0x032d6757
     a58:	571e2e09 	ldrpl	r2, [lr, -r9, lsl #28]
     a5c:	034d2d67 	movteq	r2, #56679	; 0xdd67
     a60:	835d900c 	cmphi	sp, #12
     a64:	95900d03 	ldrls	r0, [r0, #3331]	; 0xd03
     a68:	841e7a4c 	ldrhi	r7, [lr], #-2636	; 0xfffff5b4
     a6c:	4d740b03 	fldmdbxmi	r4!, {d16}	;@ Deprecated
     a70:	681e6c3e 	ldmdavs	lr, {r1, r2, r3, r4, r5, sl, fp, sp, lr}
     a74:	01000602 	tsteq	r0, r2, lsl #12
     a78:	00025201 	andeq	r5, r2, r1, lsl #4
     a7c:	91000200 	mrsls	r0, R8_usr
     a80:	02000001 	andeq	r0, r0, #1
     a84:	0d0efb01 	vstreq	d15, [lr, #-4]
     a88:	01010100 	mrseq	r0, (UNDEF: 17)
     a8c:	00000001 	andeq	r0, r0, r1
     a90:	01000001 	tsteq	r0, r1
     a94:	6c2f2e2e 	stcvs	14, cr2, [pc], #-184	; 9e4 <startup-0x1ffff61c>
     a98:	532f6269 			; <UNDEFINED> instruction: 0x532f6269
     a9c:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
     aa0:	6c5f3446 	cfldrdvs	mvd3, [pc], {70}	; 0x46
     aa4:	432f6269 			; <UNDEFINED> instruction: 0x432f6269
     aa8:	5349534d 	movtpl	r5, #37709	; 0x934d
     aac:	636e692f 	cmnvs	lr, #770048	; 0xbc000
     ab0:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
     ab4:	2f3a4300 	svccs	0x003a4300
     ab8:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
     abc:	64412f73 	strbvs	r2, [r1], #-3955	; 0xfffff08d
     ac0:	2f746d61 	svccs	0x00746d61
     ac4:	44656e4f 	strbtmi	r6, [r5], #-3663	; 0xfffff1b1
     ac8:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
     acc:	6b6f442f 	blvs	1bd1b90 <startup-0x1e42e470>
     ad0:	6e656d75 	mcrvs	13, 3, r6, cr5, cr5, {3}
     ad4:	69472f74 	stmdbvs	r7, {r2, r4, r5, r6, r8, r9, sl, fp, sp}^
     ad8:	62754874 	rsbsvs	r4, r5, #116, 16	; 0x740000
     adc:	5441442f 	strbpl	r4, [r1], #-1071	; 0xfffffbd1
     ae0:	2d303932 			; <UNDEFINED> instruction: 0x2d303932
     ae4:	6d72614c 	ldfvse	f6, [r2, #-304]!	; 0xfffffed0
     ae8:	74737973 	ldrbtvc	r7, [r3], #-2419	; 0xfffff68d
     aec:	6b2f6d65 	blvs	bdc088 <startup-0x1f423f78>
     af0:	442f646f 	strtmi	r6, [pc], #-1135	; af8 <startup-0x1ffff508>
     af4:	00726f6f 	rsbseq	r6, r2, pc, ror #30
     af8:	6c2f2e2e 	stcvs	14, cr2, [pc], #-184	; a48 <startup-0x1ffff5b8>
     afc:	532f6269 			; <UNDEFINED> instruction: 0x532f6269
     b00:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
     b04:	6c5f3446 	cfldrdvs	mvd3, [pc], {70}	; 0x46
     b08:	532f6269 			; <UNDEFINED> instruction: 0x532f6269
     b0c:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
     b10:	78783446 	ldmdavc	r8!, {r1, r2, r6, sl, ip, sp}^
     b14:	6474535f 	ldrbtvs	r5, [r4], #-863	; 0xfffffca1
     b18:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
     b1c:	445f6870 	ldrbmi	r6, [pc], #-2160	; b24 <startup-0x1ffff4dc>
     b20:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
     b24:	6e692f72 	mcrvs	15, 3, r2, cr9, cr2, {3}
     b28:	3a630063 	bcc	18c0cbc <startup-0x1e73f344>
     b2c:	6573635c 	ldrbvs	r6, [r3, #-860]!	; 0xfffffca4
     b30:	5c707061 	ldclpl	0, cr7, [r0], #-388	; 0xfffffe7c
     b34:	65646f63 	strbvs	r6, [r4, #-3939]!	; 0xfffff09d
     b38:	6574696c 	ldrbvs	r6, [r4, #-2412]!	; 0xfffff694
     b3c:	6f6f745c 	svcvs	0x006f745c
     b40:	675c736c 	ldrbvs	r7, [ip, -ip, ror #6]
     b44:	612d6363 			; <UNDEFINED> instruction: 0x612d6363
     b48:	615c6d72 	cmpvs	ip, r2, ror sp
     b4c:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
     b50:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
     b54:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
     b58:	636e695c 	cmnvs	lr, #92, 18	; 0x170000
     b5c:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
     b60:	63616d5c 	cmnvs	r1, #92, 26	; 0x1700
     b64:	656e6968 	strbvs	r6, [lr, #-2408]!	; 0xfffff698
     b68:	5c3a6300 	ldcpl	3, cr6, [sl], #-0
     b6c:	61657363 	cmnvs	r5, r3, ror #6
     b70:	635c7070 	cmpvs	ip, #112	; 0x70
     b74:	6c65646f 	cfstrdvs	mvd6, [r5], #-444	; 0xfffffe44
     b78:	5c657469 	cfstrdpl	mvd7, [r5], #-420	; 0xfffffe5c
     b7c:	6c6f6f74 	stclvs	15, cr6, [pc], #-464	; 9b4 <startup-0x1ffff64c>
     b80:	63675c73 	cmnvs	r7, #29440	; 0x7300
     b84:	72612d63 	rsbvc	r2, r1, #6336	; 0x18c0
     b88:	72615c6d 	rsbvc	r5, r1, #27904	; 0x6d00
     b8c:	6f6e2d6d 	svcvs	0x006e2d6d
     b90:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
     b94:	5c696261 	sfmpl	f6, 2, [r9], #-388	; 0xfffffe7c
     b98:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
     b9c:	5c656475 	cfstrdpl	mvd6, [r5], #-468	; 0xfffffe2c
     ba0:	00737973 	rsbseq	r7, r3, r3, ror r9
     ba4:	726f6300 	rsbvc	r6, pc, #0, 6
     ba8:	6d635f65 	stclvs	15, cr5, [r3, #-404]!	; 0xfffffe6c
     bac:	00682e34 	rsbeq	r2, r8, r4, lsr lr
     bb0:	73000001 	movwvc	r0, #1
     bb4:	74726174 	ldrbtvc	r6, [r2], #-372	; 0xfffffe8c
     bb8:	632e7075 			; <UNDEFINED> instruction: 0x632e7075
     bbc:	00000200 	andeq	r0, r0, r0, lsl #4
     bc0:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
     bc4:	78346632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, sp, lr}
     bc8:	00682e78 	rsbeq	r2, r8, r8, ror lr
     bcc:	5f000003 	svcpl	0x00000003
     bd0:	61666564 	cmnvs	r6, r4, ror #10
     bd4:	5f746c75 	svcpl	0x00746c75
     bd8:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
     bdc:	00682e73 	rsbeq	r2, r8, r3, ror lr
     be0:	5f000004 	svcpl	0x00000004
     be4:	69647473 	stmdbvs	r4!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
     be8:	682e746e 	stmdavs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
     bec:	00000500 	andeq	r0, r0, r0, lsl #10
     bf0:	74737973 	ldrbtvc	r7, [r3], #-2419	; 0xfffff68d
     bf4:	735f6d65 	cmpvc	pc, #6464	; 0x1940
     bf8:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
     bfc:	78783466 	ldmdavc	r8!, {r1, r2, r5, r6, sl, ip, sp}^
     c00:	0300682e 	movweq	r6, #2094	; 0x82e
     c04:	74730000 	ldrbtvc	r0, [r3], #-0
     c08:	75747261 	ldrbvc	r7, [r4, #-609]!	; 0xfffffd9f
     c0c:	00682e70 	rsbeq	r2, r8, r0, ror lr
     c10:	00000002 	andeq	r0, r0, r2
     c14:	e0020500 	and	r0, r2, r0, lsl #10
     c18:	0320000b 			; <UNDEFINED> instruction: 0x0320000b
     c1c:	75010cdd 	strvc	r0, [r1, #-3293]	; 0xfffff323
     c20:	d81ecd4b 	ldmdale	lr, {r0, r1, r3, r6, r8, sl, fp, lr, pc}
     c24:	9000fc03 	andls	pc, r0, r3, lsl #24
     c28:	0402004b 	streq	r0, [r2], #-75	; 0xffffffb5
     c2c:	06580601 	ldrbeq	r0, [r8], -r1, lsl #12
     c30:	3d674b30 	vstmdbcc	r7!, {d20-<overflow reg d43>}
     c34:	0204213f 	andeq	r2, r4, #-1073741809	; 0xc000000f
     c38:	8272b403 	rsbshi	fp, r2, #50331648	; 0x3000000
     c3c:	c93e3e4b 	ldmdbgt	lr!, {r0, r1, r3, r6, r9, sl, fp, ip, sp}
     c40:	02040200 	andeq	r0, r4, #0, 4
     c44:	04020055 	streq	r0, [r2], #-85	; 0xffffffab
     c48:	003c0601 	eorseq	r0, ip, r1, lsl #12
     c4c:	06020402 	streq	r0, [r2], -r2, lsl #8
     c50:	0402003a 	streq	r0, [r2], #-58	; 0xffffffc6
     c54:	063c0601 	ldrteq	r0, [ip], -r1, lsl #12
     c58:	833c0903 	teqhi	ip, #49152	; 0xc000
     c5c:	3e3e2f59 	mrccc	15, 1, r2, cr14, cr9, {2}
     c60:	01040200 	mrseq	r0, R12_usr
     c64:	4b06c806 	blmi	1b2c84 <startup-0x1fe4d37c>
     c68:	3d83754b 	cfstr32cc	mvfx7, [r3, #300]	; 0x12c
     c6c:	3d673d3d 	stclcc	13, cr3, [r7, #-244]!	; 0xffffff0c
     c70:	02040200 	andeq	r0, r4, #0, 4
     c74:	003c7503 	eorseq	r7, ip, r3, lsl #10
     c78:	06010402 	streq	r0, [r1], -r2, lsl #8
     c7c:	0402003c 	streq	r0, [r2], #-60	; 0xffffffc4
     c80:	003a0602 	eorseq	r0, sl, r2, lsl #12
     c84:	06010402 	streq	r0, [r1], -r2, lsl #8
     c88:	1103063c 	tstne	r3, ip, lsr r6
     c8c:	592f883c 	stmdbpl	pc!, {r2, r3, r4, r5, fp, pc}	; <UNPREDICTABLE>
     c90:	683e3e5b 	ldmdavs	lr!, {r0, r1, r3, r4, r6, r9, sl, fp, ip, sp}
     c94:	3daf303e 	stccc	0, cr3, [pc, #248]!	; d94 <startup-0x1ffff26c>
     c98:	2f2f2f2f 	svccs	0x002f2f2f
     c9c:	02592f5a 	subseq	r2, r9, #360	; 0x168
     ca0:	4c68132e 	stclmi	3, cr1, [r8], #-184	; 0xffffff48
     ca4:	3e675c67 	cdpcc	12, 6, cr5, cr7, cr7, {3}
     ca8:	02009275 	andeq	r9, r0, #1342177287	; 0x50000007
     cac:	006f0204 	rsbeq	r0, pc, r4, lsl #4
     cb0:	06010402 	streq	r0, [r1], -r2, lsl #8
     cb4:	0249063c 	subeq	r0, r9, #60, 12	; 0x3c00000
     cb8:	01010003 	tsteq	r1, r3
     cbc:	05000204 	streq	r0, [r0, #-516]	; 0xfffffdfc
     cc0:	00000002 	andeq	r0, r0, r2
     cc4:	010b0320 	tsteq	fp, r0, lsr #6
     cc8:	03025e13 	movweq	r5, #11795	; 0x2e13
     ccc:	01010100 	mrseq	r0, (UNDEF: 17)
     cd0:	02000002 	andeq	r0, r0, #2
     cd4:	0001b400 	andeq	fp, r1, r0, lsl #8
     cd8:	fb010200 	blx	414e2 <startup-0x1ffbeb1e>
     cdc:	01000d0e 	tsteq	r0, lr, lsl #26
     ce0:	00010101 	andeq	r0, r1, r1, lsl #2
     ce4:	00010000 	andeq	r0, r1, r0
     ce8:	3a430100 	bcc	10c10f0 <startup-0x1ef3ef10>
     cec:	6573552f 	ldrbvs	r5, [r3, #-1327]!	; 0xfffffad1
     cf0:	412f7372 			; <UNDEFINED> instruction: 0x412f7372
     cf4:	746d6164 	strbtvc	r6, [sp], #-356	; 0xfffffe9c
     cf8:	656e4f2f 	strbvs	r4, [lr, #-3887]!	; 0xfffff0d1
     cfc:	76697244 	strbtvc	r7, [r9], -r4, asr #4
     d00:	6f442f65 	svcvs	0x00442f65
     d04:	656d756b 	strbvs	r7, [sp, #-1387]!	; 0xfffffa95
     d08:	472f746e 	strmi	r7, [pc, -lr, ror #8]!
     d0c:	75487469 	strbvc	r7, [r8, #-1129]	; 0xfffffb97
     d10:	41442f62 	cmpmi	r4, r2, ror #30
     d14:	30393254 	eorscc	r3, r9, r4, asr r2
     d18:	72614c2d 	rsbvc	r4, r1, #11520	; 0x2d00
     d1c:	7379736d 	cmnvc	r9, #-1275068415	; 0xb4000001
     d20:	2f6d6574 	svccs	0x006d6574
     d24:	2f646f6b 	svccs	0x00646f6b
     d28:	2f62696c 	svccs	0x0062696c
     d2c:	334d5453 	movtcc	r5, #54355	; 0xd453
     d30:	5f344632 	svcpl	0x00344632
     d34:	2f62696c 	svccs	0x0062696c
     d38:	334d5453 	movtcc	r5, #54355	; 0xd453
     d3c:	78344632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, lr}
     d40:	74535f78 	ldrbvc	r5, [r3], #-3960	; 0xfffff088
     d44:	72655064 	rsbvc	r5, r5, #100	; 0x64
     d48:	5f687069 	svcpl	0x00687069
     d4c:	76697244 	strbtvc	r7, [r9], -r4, asr #4
     d50:	732f7265 			; <UNDEFINED> instruction: 0x732f7265
     d54:	63006372 	movwvs	r6, #882	; 0x372
     d58:	73635c3a 	cmnvc	r3, #14848	; 0x3a00
     d5c:	70706165 	rsbsvc	r6, r0, r5, ror #2
     d60:	646f635c 	strbtvs	r6, [pc], #-860	; d68 <startup-0x1ffff298>
     d64:	74696c65 	strbtvc	r6, [r9], #-3173	; 0xfffff39b
     d68:	6f745c65 	svcvs	0x00745c65
     d6c:	5c736c6f 	ldclpl	12, cr6, [r3], #-444	; 0xfffffe44
     d70:	2d636367 	stclcs	3, cr6, [r3, #-412]!	; 0xfffffe64
     d74:	5c6d7261 	sfmpl	f7, 2, [sp], #-388	; 0xfffffe7c
     d78:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
     d7c:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
     d80:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
     d84:	6e695c69 	cdpvs	12, 6, cr5, cr9, cr9, {3}
     d88:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
     d8c:	616d5c65 	cmnvs	sp, r5, ror #24
     d90:	6e696863 	cdpvs	8, 6, cr6, cr9, cr3, {3}
     d94:	3a630065 	bcc	18c0f30 <startup-0x1e73f0d0>
     d98:	6573635c 	ldrbvs	r6, [r3, #-860]!	; 0xfffffca4
     d9c:	5c707061 	ldclpl	0, cr7, [r0], #-388	; 0xfffffe7c
     da0:	65646f63 	strbvs	r6, [r4, #-3939]!	; 0xfffff09d
     da4:	6574696c 	ldrbvs	r6, [r4, #-2412]!	; 0xfffff694
     da8:	6f6f745c 	svcvs	0x006f745c
     dac:	675c736c 	ldrbvs	r7, [ip, -ip, ror #6]
     db0:	612d6363 			; <UNDEFINED> instruction: 0x612d6363
     db4:	615c6d72 	cmpvs	ip, r2, ror sp
     db8:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
     dbc:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
     dc0:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
     dc4:	636e695c 	cmnvs	lr, #92, 18	; 0x170000
     dc8:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
     dcc:	7379735c 	cmnvc	r9, #92, 6	; 0x70000001
     dd0:	2f2e2e00 	svccs	0x002e2e00
     dd4:	2f62696c 	svccs	0x0062696c
     dd8:	334d5453 	movtcc	r5, #54355	; 0xd453
     ddc:	5f344632 	svcpl	0x00344632
     de0:	2f62696c 	svccs	0x0062696c
     de4:	49534d43 	ldmdbmi	r3, {r0, r1, r6, r8, sl, fp, lr}^
     de8:	6e692f53 	mcrvs	15, 3, r2, cr9, cr3, {2}
     dec:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
     df0:	2e2e0065 	cdpcs	0, 2, cr0, cr14, cr5, {3}
     df4:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
     df8:	4d54532f 	ldclmi	3, cr5, [r4, #-188]	; 0xffffff44
     dfc:	34463233 	strbcc	r3, [r6], #-563	; 0xfffffdcd
     e00:	62696c5f 	rsbvs	r6, r9, #24320	; 0x5f00
     e04:	4d54532f 	ldclmi	3, cr5, [r4, #-188]	; 0xffffff44
     e08:	34463233 	strbcc	r3, [r6], #-563	; 0xfffffdcd
     e0c:	535f7878 	cmppl	pc, #120, 16	; 0x780000
     e10:	65506474 	ldrbvs	r6, [r0, #-1140]	; 0xfffffb8c
     e14:	68706972 	ldmdavs	r0!, {r1, r4, r5, r6, r8, fp, sp, lr}^
     e18:	6972445f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, sl, lr}^
     e1c:	2f726576 	svccs	0x00726576
     e20:	00636e69 	rsbeq	r6, r3, r9, ror #28
     e24:	6d747300 	ldclvs	3, cr7, [r4, #-0]
     e28:	34663233 	strbtcc	r3, [r6], #-563	; 0xfffffdcd
     e2c:	725f7878 	subsvc	r7, pc, #120, 16	; 0x780000
     e30:	632e676e 			; <UNDEFINED> instruction: 0x632e676e
     e34:	00000100 	andeq	r0, r0, r0, lsl #2
     e38:	6665645f 			; <UNDEFINED> instruction: 0x6665645f
     e3c:	746c7561 	strbtvc	r7, [ip], #-1377	; 0xfffffa9f
     e40:	7079745f 	rsbsvc	r7, r9, pc, asr r4
     e44:	682e7365 	stmdavs	lr!, {r0, r2, r5, r6, r8, r9, ip, sp, lr}
     e48:	00000200 	andeq	r0, r0, r0, lsl #4
     e4c:	6474735f 	ldrbtvs	r7, [r4], #-863	; 0xfffffca1
     e50:	2e746e69 	cdpcs	14, 7, cr6, cr4, cr9, {3}
     e54:	00030068 	andeq	r0, r3, r8, rrx
     e58:	726f6300 	rsbvc	r6, pc, #0, 6
     e5c:	6d635f65 	stclvs	15, cr5, [r3, #-404]!	; 0xfffffe6c
     e60:	00682e34 	rsbeq	r2, r8, r4, lsr lr
     e64:	73000004 	movwvc	r0, #4
     e68:	65747379 	ldrbvs	r7, [r4, #-889]!	; 0xfffffc87
     e6c:	74735f6d 	ldrbtvc	r5, [r3], #-3949	; 0xfffff093
     e70:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
     e74:	2e787834 	mrccs	8, 3, r7, cr8, cr4, {1}
     e78:	00050068 	andeq	r0, r5, r8, rrx
     e7c:	6d747300 	ldclvs	3, cr7, [r4, #-0]
     e80:	34663233 	strbtcc	r3, [r6], #-563	; 0xfffffdcd
     e84:	682e7878 	stmdavs	lr!, {r3, r4, r5, r6, fp, ip, sp, lr}
     e88:	00000500 	andeq	r0, r0, r0, lsl #10
     e8c:	02050000 	andeq	r0, r5, #0
     e90:	20000ef4 	strdcs	r0, [r0], -r4
     e94:	0100e303 	tsteq	r0, r3, lsl #6
     e98:	09034d31 	stmdbeq	r3, {r0, r4, r5, r8, sl, fp, lr}
     e9c:	3c09034a 	stccc	3, cr0, [r9], {74}	; 0x4a
     ea0:	1e6d4d6a 	cdpne	13, 6, cr4, cr13, cr10, {3}
     ea4:	66300368 	ldrtvs	r0, [r0], -r8, ror #6
     ea8:	d8032f30 	stmdale	r3, {r4, r5, r8, r9, sl, fp, sp}
     eac:	4d6a6600 	stclmi	6, cr6, [sl, #-0]
     eb0:	03681e6d 	cmneq	r8, #1744	; 0x6d0
     eb4:	4f67740c 	svcmi	0x0067740c
     eb8:	3d4d5d69 	stclcc	13, cr5, [sp, #-420]	; 0xfffffe5c
     ebc:	6a660f03 	bvs	1984ad0 <startup-0x1e67b530>
     ec0:	660b0367 	strvs	r0, [fp], -r7, ror #6
     ec4:	5d694f67 	stclpl	15, cr4, [r9, #-412]!	; 0xfffffe64
     ec8:	0c033d4d 	stceq	13, cr3, [r3], {77}	; 0x4d
     ecc:	02676b66 	rsbeq	r6, r7, #104448	; 0x19800
     ed0:	01010006 	tsteq	r1, r6
     ed4:	00000421 	andeq	r0, r0, r1, lsr #8
     ed8:	01c70002 	biceq	r0, r7, r2
     edc:	01020000 	mrseq	r0, (UNDEF: 2)
     ee0:	000d0efb 	strdeq	r0, [sp], -fp
     ee4:	01010101 	tsteq	r1, r1, lsl #2
     ee8:	01000000 	mrseq	r0, (UNDEF: 0)
     eec:	43010000 	movwmi	r0, #4096	; 0x1000
     ef0:	73552f3a 	cmpvc	r5, #58, 30	; 0xe8
     ef4:	2f737265 	svccs	0x00737265
     ef8:	6d616441 	cfstrdvs	mvd6, [r1, #-260]!	; 0xfffffefc
     efc:	6e4f2f74 	mcrvs	15, 2, r2, cr15, cr4, {3}
     f00:	69724465 	ldmdbvs	r2!, {r0, r2, r5, r6, sl, lr}^
     f04:	442f6576 	strtmi	r6, [pc], #-1398	; f0c <startup-0x1ffff0f4>
     f08:	6d756b6f 	fldmdbxvs	r5!, {d22-d76}	;@ Deprecated
     f0c:	2f746e65 	svccs	0x00746e65
     f10:	48746947 	ldmdami	r4!, {r0, r1, r2, r6, r8, fp, sp, lr}^
     f14:	442f6275 	strtmi	r6, [pc], #-629	; f1c <startup-0x1ffff0e4>
     f18:	39325441 	ldmdbcc	r2!, {r0, r6, sl, ip, lr}
     f1c:	614c2d30 	cmpvs	ip, r0, lsr sp
     f20:	79736d72 	ldmdbvc	r3!, {r1, r4, r5, r6, r8, sl, fp, sp, lr}^
     f24:	6d657473 	cfstrdvs	mvd7, [r5, #-460]!	; 0xfffffe34
     f28:	646f6b2f 	strbtvs	r6, [pc], #-2863	; f30 <startup-0x1ffff0d0>
     f2c:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
     f30:	4d54532f 	ldclmi	3, cr5, [r4, #-188]	; 0xffffff44
     f34:	34463233 	strbcc	r3, [r6], #-563	; 0xfffffdcd
     f38:	62696c5f 	rsbvs	r6, r9, #24320	; 0x5f00
     f3c:	4d54532f 	ldclmi	3, cr5, [r4, #-188]	; 0xffffff44
     f40:	34463233 	strbcc	r3, [r6], #-563	; 0xfffffdcd
     f44:	535f7878 	cmppl	pc, #120, 16	; 0x780000
     f48:	65506474 	ldrbvs	r6, [r0, #-1140]	; 0xfffffb8c
     f4c:	68706972 	ldmdavs	r0!, {r1, r4, r5, r6, r8, fp, sp, lr}^
     f50:	6972445f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, sl, lr}^
     f54:	2f726576 	svccs	0x00726576
     f58:	00637273 	rsbeq	r7, r3, r3, ror r2
     f5c:	635c3a63 	cmpvs	ip, #405504	; 0x63000
     f60:	70616573 	rsbvc	r6, r1, r3, ror r5
     f64:	6f635c70 	svcvs	0x00635c70
     f68:	696c6564 	stmdbvs	ip!, {r2, r5, r6, r8, sl, sp, lr}^
     f6c:	745c6574 	ldrbvc	r6, [ip], #-1396	; 0xfffffa8c
     f70:	736c6f6f 	cmnvc	ip, #444	; 0x1bc
     f74:	6363675c 	cmnvs	r3, #92, 14	; 0x1700000
     f78:	6d72612d 	ldfvse	f6, [r2, #-180]!	; 0xffffff4c
     f7c:	6d72615c 	ldfvse	f6, [r2, #-368]!	; 0xfffffe90
     f80:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
     f84:	61652d65 	cmnvs	r5, r5, ror #26
     f88:	695c6962 	ldmdbvs	ip, {r1, r5, r6, r8, fp, sp, lr}^
     f8c:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
     f90:	6d5c6564 	cfldr64vs	mvdx6, [ip, #-400]	; 0xfffffe70
     f94:	69686361 	stmdbvs	r8!, {r0, r5, r6, r8, r9, sp, lr}^
     f98:	6300656e 	movwvs	r6, #1390	; 0x56e
     f9c:	73635c3a 	cmnvc	r3, #14848	; 0x3a00
     fa0:	70706165 	rsbsvc	r6, r0, r5, ror #2
     fa4:	646f635c 	strbtvs	r6, [pc], #-860	; fac <startup-0x1ffff054>
     fa8:	74696c65 	strbtvc	r6, [r9], #-3173	; 0xfffff39b
     fac:	6f745c65 	svcvs	0x00745c65
     fb0:	5c736c6f 	ldclpl	12, cr6, [r3], #-444	; 0xfffffe44
     fb4:	2d636367 	stclcs	3, cr6, [r3, #-412]!	; 0xfffffe64
     fb8:	5c6d7261 	sfmpl	f7, 2, [sp], #-388	; 0xfffffe7c
     fbc:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
     fc0:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
     fc4:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
     fc8:	6e695c69 	cdpvs	12, 6, cr5, cr9, cr9, {3}
     fcc:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
     fd0:	79735c65 	ldmdbvc	r3!, {r0, r2, r5, r6, sl, fp, ip, lr}^
     fd4:	2e2e0073 	mcrcs	0, 1, r0, cr14, cr3, {3}
     fd8:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
     fdc:	4d54532f 	ldclmi	3, cr5, [r4, #-188]	; 0xffffff44
     fe0:	34463233 	strbcc	r3, [r6], #-563	; 0xfffffdcd
     fe4:	62696c5f 	rsbvs	r6, r9, #24320	; 0x5f00
     fe8:	534d432f 	movtpl	r4, #54063	; 0xd32f
     fec:	692f5349 	stmdbvs	pc!, {r0, r3, r6, r8, r9, ip, lr}	; <UNPREDICTABLE>
     ff0:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
     ff4:	2e006564 	cfsh32cs	mvfx6, mvfx0, #52
     ff8:	696c2f2e 	stmdbvs	ip!, {r1, r2, r3, r5, r8, r9, sl, fp, sp}^
     ffc:	54532f62 	ldrbpl	r2, [r3], #-3938	; 0xfffff09e
    1000:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
    1004:	696c5f34 	stmdbvs	ip!, {r2, r4, r5, r8, r9, sl, fp, ip, lr}^
    1008:	54532f62 	ldrbpl	r2, [r3], #-3938	; 0xfffff09e
    100c:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
    1010:	5f787834 	svcpl	0x00787834
    1014:	50647453 	rsbpl	r7, r4, r3, asr r4
    1018:	70697265 	rsbvc	r7, r9, r5, ror #4
    101c:	72445f68 	subvc	r5, r4, #104, 30	; 0x1a0
    1020:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
    1024:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    1028:	74730000 	ldrbtvc	r0, [r3], #-0
    102c:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
    1030:	5f787834 	svcpl	0x00787834
    1034:	2e6e6163 	powcsez	f6, f6, f3
    1038:	00010063 	andeq	r0, r1, r3, rrx
    103c:	65645f00 	strbvs	r5, [r4, #-3840]!	; 0xfffff100
    1040:	6c756166 	ldfvse	f6, [r5], #-408	; 0xfffffe68
    1044:	79745f74 	ldmdbvc	r4!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    1048:	2e736570 	mrccs	5, 3, r6, cr3, cr0, {3}
    104c:	00020068 	andeq	r0, r2, r8, rrx
    1050:	74735f00 	ldrbtvc	r5, [r3], #-3840	; 0xfffff100
    1054:	746e6964 	strbtvc	r6, [lr], #-2404	; 0xfffff69c
    1058:	0300682e 	movweq	r6, #2094	; 0x82e
    105c:	6f630000 	svcvs	0x00630000
    1060:	635f6572 	cmpvs	pc, #478150656	; 0x1c800000
    1064:	682e346d 	stmdavs	lr!, {r0, r2, r3, r5, r6, sl, ip, sp}
    1068:	00000400 	andeq	r0, r0, r0, lsl #8
    106c:	74737973 	ldrbtvc	r7, [r3], #-2419	; 0xfffff68d
    1070:	735f6d65 	cmpvc	pc, #6464	; 0x1940
    1074:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
    1078:	78783466 	ldmdavc	r8!, {r1, r2, r5, r6, sl, ip, sp}^
    107c:	0500682e 	streq	r6, [r0, #-2094]	; 0xfffff7d2
    1080:	74730000 	ldrbtvc	r0, [r3], #-0
    1084:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
    1088:	2e787834 	mrccs	8, 3, r7, cr8, cr4, {1}
    108c:	00050068 	andeq	r0, r5, r8, rrx
    1090:	6d747300 	ldclvs	3, cr7, [r4, #-0]
    1094:	34663233 	strbtcc	r3, [r6], #-563	; 0xfffffdcd
    1098:	635f7878 	cmpvs	pc, #120, 16	; 0x780000
    109c:	682e6e61 	stmdavs	lr!, {r0, r5, r6, r9, sl, fp, sp, lr}
    10a0:	00000500 	andeq	r0, r0, r0, lsl #10
    10a4:	02050000 	andeq	r0, r5, #0
    10a8:	20001068 	andcs	r1, r0, r8, rrx
    10ac:	0101a703 	tsteq	r1, r3, lsl #14
    10b0:	03684d4e 	cmneq	r8, #4992	; 0x1380
    10b4:	681b661b 	ldmdavs	fp, {r0, r1, r3, r4, r9, sl, sp, lr}
    10b8:	740d0369 	strvc	r0, [sp], #-873	; 0xfffffc97
    10bc:	10034b59 	andne	r4, r3, r9, asr fp
    10c0:	2269772e 	rsbcs	r7, r9, #12058624	; 0xb80000
    10c4:	0402003a 	streq	r0, [r2], #-58	; 0xffffffc6
    10c8:	06660601 	strbteq	r0, [r6], -r1, lsl #12
    10cc:	4c5d6850 	mrrcmi	8, 5, r6, sp, cr0
    10d0:	784c7878 	stmdavc	ip, {r3, r4, r5, r6, fp, ip, sp, lr}^
    10d4:	78784c78 	ldmdavc	r8!, {r3, r4, r5, r6, sl, fp, lr}^
    10d8:	4c78784c 	ldclmi	8, cr7, [r8], #-304	; 0xfffffed0
    10dc:	784c7878 	stmdavc	ip, {r3, r4, r5, r6, fp, ip, sp, lr}^
    10e0:	223b3d78 	eorscs	r3, fp, #120, 26	; 0x1e00
    10e4:	223b223b 	eorscs	r2, fp, #-1342177277	; 0xb0000003
    10e8:	77351d3b 			; <UNDEFINED> instruction: 0x77351d3b
    10ec:	003a2230 	eorseq	r2, sl, r0, lsr r2
    10f0:	06010402 	streq	r0, [r1], -r2, lsl #8
    10f4:	68500666 	ldmdavs	r0, {r1, r2, r5, r6, r9, sl}^
    10f8:	033d4f5c 	teqeq	sp, #92, 30	; 0x170
    10fc:	4b7400e9 	blmi	1d014a8 <startup-0x1e2feb58>
    1100:	afa16936 	svcge	0x00a16936
    1104:	3a3db14d 	bcc	f6d640 <startup-0x1f0929c0>
    1108:	3d512d4b 	ldclcc	13, cr2, [r1, #-300]	; 0xfffffed4
    110c:	6b2d4b3a 	blvs	b53dfc <startup-0x1f4ac204>
    1110:	3a3da14d 	bcc	f6964c <startup-0x1f0969b4>
    1114:	3d4f2d4b 	stclcc	13, cr2, [pc, #-300]	; ff0 <startup-0x1ffff010>
    1118:	6c2d4b3a 			; <UNDEFINED> instruction: 0x6c2d4b3a
    111c:	4da2bf4d 	stcmi	15, cr11, [r2, #308]!	; 0x134
    1120:	4ca24daf 	stcmi	13, cr4, [r2], #700	; 0x2bc
    1124:	0903ada2 	stmdbeq	r3, {r1, r5, r7, r8, sl, fp, sp, pc}
    1128:	3f3f4e66 	svccc	0x003f4e66
    112c:	3f3f3f3f 	svccc	0x003f3f3f
    1130:	3f3f3f3f 	svccc	0x003f3f3f
    1134:	4a1f033d 	bmi	7c1e30 <startup-0x1f83e1d0>
    1138:	bd9fa16b 	ldfltd	f2, [pc, #428]	; 12ec <startup-0x1fffed14>
    113c:	820d03ad 	andhi	r0, sp, #-1275068414	; 0xb4000002
    1140:	1e7b4d79 	mrcne	13, 3, r4, cr11, cr9, {3}
    1144:	74100368 	ldrvc	r0, [r0], #-872	; 0xfffffc98
    1148:	bb694d78 	bllt	1a54730 <startup-0x1e5ab8d0>
    114c:	ba0c03bb 	blt	302040 <startup-0x1fcfdfc0>
    1150:	77207903 	strvc	r7, [r0, -r3, lsl #18]!
    1154:	03aeadad 			; <UNDEFINED> instruction: 0x03aeadad
    1158:	5259661f 	subspl	r6, r9, #32505856	; 0x1f00000
    115c:	5a925a92 	bpl	fe497bac <dissarmedBit+0xde493c6c>
    1160:	694d5c92 	stmdbvs	sp, {r1, r4, r7, sl, fp, ip, lr}^
    1164:	2d9f4de5 	ldccs	13, cr4, [pc, #916]	; 1500 <startup-0x1fffeb00>
    1168:	222d9f96 	eorcs	r9, sp, #600	; 0x258
    116c:	757a1f2d 	ldrbvc	r1, [sl, #-3885]!	; 0xfffff0d3
    1170:	3f082f08 	svccc	0x00082f08
    1174:	3b223b3d 	blcc	88fe70 <startup-0x1f770190>
    1178:	2c303922 			; <UNDEFINED> instruction: 0x2c303922
    117c:	223b3d78 	eorscs	r3, fp, #120, 26	; 0x1e00
    1180:	3039223b 	eorscc	r2, r9, fp, lsr r2
    1184:	3dd8792c 	vldrcc.16	s15, [r8, #88]	; 0x58	; <UNPREDICTABLE>
    1188:	754a0b03 	strbvc	r0, [sl, #-2819]	; 0xfffff4fd
    118c:	22598534 	subscs	r8, r9, #52, 10	; 0xd000000
    1190:	22592259 	subscs	r2, r9, #-1879048187	; 0x90000005
    1194:	9308222f 	movwls	r2, #33327	; 0x822f
    1198:	212f222f 			; <UNDEFINED> instruction: 0x212f222f
    119c:	222f212f 	eorcs	r2, pc, #-1073741813	; 0xc000000b
    11a0:	212f212f 			; <UNDEFINED> instruction: 0x212f212f
    11a4:	222f212f 	eorcs	r2, pc, #-1073741813	; 0xc000000b
    11a8:	080a032f 	stmdaeq	sl, {r0, r1, r2, r3, r5, r8, r9}
    11ac:	09037912 	stmdbeq	r3, {r1, r4, r8, fp, ip, sp, lr}
    11b0:	20790382 	rsbscs	r0, r9, r2, lsl #7
    11b4:	21752167 	cmncs	r5, r7, ror #2
    11b8:	20032475 	andcs	r2, r3, r5, ror r4
    11bc:	4cbb954a 	cfldr32mi	mvfx9, [fp], #296	; 0x128
    11c0:	d8cabdcc 	stmiale	sl, {r2, r3, r6, r7, r8, sl, fp, ip, sp, pc}^
    11c4:	c9c9bbca 	stmibgt	r9, {r1, r3, r6, r7, r8, r9, fp, ip, sp, pc}^
    11c8:	c9c9bbc9 	stmibgt	r9, {r0, r3, r6, r7, r8, r9, fp, ip, sp, pc}^
    11cc:	1e6d4ccb 	cdpne	12, 6, cr4, cr13, cr11, {6}
    11d0:	4a0a0368 	bmi	281f78 <startup-0x1fd7e088>
    11d4:	1e6d4c79 	mcrne	12, 3, r4, cr13, cr9, {3}
    11d8:	4a0a0368 	bmi	281f80 <startup-0x1fd7e080>
    11dc:	924c4e75 	subls	r4, ip, #1872	; 0x750
    11e0:	3d4c944c 	cfstrdcc	mvd9, [ip, #-304]	; 0xfffffed0
    11e4:	754a2003 	strbvc	r2, [sl, #-3]
    11e8:	854d344d 	strbhi	r3, [sp, #-1101]	; 0xfffffbb3
    11ec:	02003a22 	andeq	r3, r0, #139264	; 0x22000
    11f0:	66060104 	strvs	r0, [r6], -r4, lsl #2
    11f4:	5c684006 	stclpl	0, cr4, [r8], #-24	; 0xffffffe8
    11f8:	22774d5b 	rsbscs	r4, r7, #5824	; 0x16c0
    11fc:	0402003a 	streq	r0, [r2], #-58	; 0xffffffc6
    1200:	06580601 	ldrbeq	r0, [r8], -r1, lsl #12
    1204:	5b5c5a40 	blpl	1717b0c <startup-0x1e8e84f4>
    1208:	3a22854d 	bcc	8a2744 <startup-0x1f75d8bc>
    120c:	01040200 	mrseq	r0, R12_usr
    1210:	40066606 	andmi	r6, r6, r6, lsl #12
    1214:	4d5d5c68 	ldclmi	12, cr5, [sp, #-416]	; 0xfffffe60
    1218:	6609033d 			; <UNDEFINED> instruction: 0x6609033d
    121c:	6985504b 	stmibvs	r5, {r0, r1, r3, r6, ip, lr}
    1220:	09033d4d 	stmdbeq	r3, {r0, r2, r3, r6, r8, sl, fp, ip, sp}
    1224:	502f4b4a 	eorpl	r4, pc, sl, asr #22
    1228:	003a2277 	eorseq	r2, sl, r7, ror r2
    122c:	06010402 	streq	r0, [r1], -r2, lsl #8
    1230:	69400666 	stmdbvs	r0, {r1, r2, r5, r6, r9, sl}^
    1234:	28033d4d 	stmdacs	r3, {r0, r2, r3, r6, r8, sl, fp, ip, sp}
    1238:	85504b66 	ldrbhi	r4, [r0, #-2918]	; 0xfffff49a
    123c:	4a0f033d 	bmi	3c1f38 <startup-0x1fc3e0c8>
    1240:	2f5b504b 	svccs	0x005b504b
    1244:	4b4a0a03 	blmi	1283a58 <startup-0x1ed7c5a8>
    1248:	032f5b50 			; <UNDEFINED> instruction: 0x032f5b50
    124c:	7a4a01c3 	bvc	1281960 <startup-0x1ed7e6a0>
    1250:	761e6d4d 	ldrvc	r6, [lr], -sp, asr #26
    1254:	594a1903 	stmdbpl	sl, {r0, r1, r8, fp, ip}^
    1258:	5d775b51 	fldmdbxpl	r7!, {d21-d60}	;@ Deprecated
    125c:	5d775b5b 	fldmdbxpl	r7!, {d21-d65}	;@ Deprecated
    1260:	5d775b5b 	fldmdbxpl	r7!, {d21-d65}	;@ Deprecated
    1264:	5d775b5b 	fldmdbxpl	r7!, {d21-d65}	;@ Deprecated
    1268:	4e5d775e 	mrcmi	7, 2, r7, cr13, cr14, {2}
    126c:	4a15033d 	bmi	541f68 <startup-0x1fabe098>
    1270:	034d3359 	movteq	r3, #54105	; 0xd359
    1274:	69033c1b 	stmdbvs	r3, {r0, r1, r3, r4, sl, fp, ip, sp}
    1278:	035b4c20 	cmpeq	fp, #32, 24	; 0x2000
    127c:	70033c12 	andvc	r3, r3, r2, lsl ip
    1280:	0d035b20 	vstreq	d5, [r3, #-128]	; 0xffffff80
    1284:	2075033c 	rsbscs	r0, r5, ip, lsr r3
    1288:	3f1d445b 	svccc	0x001d445b
    128c:	59741903 	ldmdbpl	r4!, {r0, r1, r8, fp, ip}^
    1290:	3b026950 	blcc	9b7d8 <startup-0x1ff64828>
    1294:	9f23ad16 	svcls	0x0023ad16
    1298:	9f239f23 	svcls	0x00239f23
    129c:	9f239f23 	svcls	0x00239f23
    12a0:	9f239f23 	svcls	0x00239f23
    12a4:	9f239f23 	svcls	0x00239f23
    12a8:	9f239f23 	svcls	0x00239f23
    12ac:	9f239f23 	svcls	0x00239f23
    12b0:	4e344b23 	vaddmi.f64	d4, d4, d19
    12b4:	6617033d 			; <UNDEFINED> instruction: 0x6617033d
    12b8:	f23b035d 	vcge.s<illegal width 64>	q0, <illegal reg q5.5>, <illegal reg q6.5>
    12bc:	03204503 			; <UNDEFINED> instruction: 0x03204503
    12c0:	45034a3b 	strmi	r4, [r3, #-2619]	; 0xfffff5c5
    12c4:	f23b0320 	vcgt.s<illegal width 64>	d0, d11, d16
    12c8:	03204503 			; <UNDEFINED> instruction: 0x03204503
    12cc:	4903ba3b 	stmdbmi	r3, {r0, r1, r3, r4, r5, r9, fp, ip, sp, pc}
    12d0:	3d233d20 	stccc	13, cr3, [r3, #-128]!	; 0xffffff80
    12d4:	3d233d23 	stccc	13, cr3, [r3, #-140]!	; 0xffffff74
    12d8:	3d233d23 	stccc	13, cr3, [r3, #-140]!	; 0xffffff74
    12dc:	3e233d23 	cdpcc	13, 2, cr3, cr3, cr3, {1}
    12e0:	3e233e23 	cdpcc	14, 2, cr3, cr3, cr3, {1}
    12e4:	233d3e23 	teqcs	sp, #560	; 0x230
    12e8:	03243e3e 			; <UNDEFINED> instruction: 0x03243e3e
    12ec:	4c59740c 	cfldrdmi	mvd7, [r9], {12}
    12f0:	3d4c5d4d 	stclcc	13, cr5, [ip, #-308]	; 0xfffffecc
    12f4:	01000402 	tsteq	r0, r2, lsl #8
    12f8:	0002c001 	andeq	ip, r2, r1
    12fc:	b9000200 	stmdblt	r0, {r9}
    1300:	02000001 	andeq	r0, r0, #1
    1304:	0d0efb01 	vstreq	d15, [lr, #-4]
    1308:	01010100 	mrseq	r0, (UNDEF: 17)
    130c:	00000001 	andeq	r0, r0, r1
    1310:	01000001 	tsteq	r0, r1
    1314:	6c2f2e2e 	stcvs	14, cr2, [pc], #-184	; 1264 <startup-0x1fffed9c>
    1318:	532f6269 			; <UNDEFINED> instruction: 0x532f6269
    131c:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
    1320:	6c5f3446 	cfldrdvs	mvd3, [pc], {70}	; 0x46
    1324:	432f6269 			; <UNDEFINED> instruction: 0x432f6269
    1328:	5349534d 	movtpl	r5, #37709	; 0x934d
    132c:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    1330:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    1334:	2f3a4300 	svccs	0x003a4300
    1338:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
    133c:	64412f73 	strbvs	r2, [r1], #-3955	; 0xfffff08d
    1340:	2f746d61 	svccs	0x00746d61
    1344:	44656e4f 	strbtmi	r6, [r5], #-3663	; 0xfffff1b1
    1348:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
    134c:	6b6f442f 	blvs	1bd2410 <startup-0x1e42dbf0>
    1350:	6e656d75 	mcrvs	13, 3, r6, cr5, cr5, {3}
    1354:	69472f74 	stmdbvs	r7, {r2, r4, r5, r6, r8, r9, sl, fp, sp}^
    1358:	62754874 	rsbsvs	r4, r5, #116, 16	; 0x740000
    135c:	5441442f 	strbpl	r4, [r1], #-1071	; 0xfffffbd1
    1360:	2d303932 			; <UNDEFINED> instruction: 0x2d303932
    1364:	6d72614c 	ldfvse	f6, [r2, #-304]!	; 0xfffffed0
    1368:	74737973 	ldrbtvc	r7, [r3], #-2419	; 0xfffff68d
    136c:	6b2f6d65 	blvs	bdc908 <startup-0x1f4236f8>
    1370:	6c2f646f 	cfstrsvs	mvf6, [pc], #-444	; 11bc <startup-0x1fffee44>
    1374:	2e006269 	cdpcs	2, 0, cr6, cr0, cr9, {3}
    1378:	696c2f2e 	stmdbvs	ip!, {r1, r2, r3, r5, r8, r9, sl, fp, sp}^
    137c:	54532f62 	ldrbpl	r2, [r3], #-3938	; 0xfffff09e
    1380:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
    1384:	696c5f34 	stmdbvs	ip!, {r2, r4, r5, r8, r9, sl, fp, ip, lr}^
    1388:	54532f62 	ldrbpl	r2, [r3], #-3938	; 0xfffff09e
    138c:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
    1390:	5f787834 	svcpl	0x00787834
    1394:	50647453 	rsbpl	r7, r4, r3, asr r4
    1398:	70697265 	rsbvc	r7, r9, r5, ror #4
    139c:	72445f68 	subvc	r5, r4, #104, 30	; 0x1a0
    13a0:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
    13a4:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    13a8:	5c3a6300 	ldcpl	3, cr6, [sl], #-0
    13ac:	61657363 	cmnvs	r5, r3, ror #6
    13b0:	635c7070 	cmpvs	ip, #112	; 0x70
    13b4:	6c65646f 	cfstrdvs	mvd6, [r5], #-444	; 0xfffffe44
    13b8:	5c657469 	cfstrdpl	mvd7, [r5], #-420	; 0xfffffe5c
    13bc:	6c6f6f74 	stclvs	15, cr6, [pc], #-464	; 11f4 <startup-0x1fffee0c>
    13c0:	63675c73 	cmnvs	r7, #29440	; 0x7300
    13c4:	72612d63 	rsbvc	r2, r1, #6336	; 0x18c0
    13c8:	72615c6d 	rsbvc	r5, r1, #27904	; 0x6d00
    13cc:	6f6e2d6d 	svcvs	0x006e2d6d
    13d0:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    13d4:	5c696261 	sfmpl	f6, 2, [r9], #-388	; 0xfffffe7c
    13d8:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    13dc:	5c656475 	cfstrdpl	mvd6, [r5], #-468	; 0xfffffe2c
    13e0:	6863616d 	stmdavs	r3!, {r0, r2, r3, r5, r6, r8, sp, lr}^
    13e4:	00656e69 	rsbeq	r6, r5, r9, ror #28
    13e8:	635c3a63 	cmpvs	ip, #405504	; 0x63000
    13ec:	70616573 	rsbvc	r6, r1, r3, ror r5
    13f0:	6f635c70 	svcvs	0x00635c70
    13f4:	696c6564 	stmdbvs	ip!, {r2, r5, r6, r8, sl, sp, lr}^
    13f8:	745c6574 	ldrbvc	r6, [ip], #-1396	; 0xfffffa8c
    13fc:	736c6f6f 	cmnvc	ip, #444	; 0x1bc
    1400:	6363675c 	cmnvs	r3, #92, 14	; 0x1700000
    1404:	6d72612d 	ldfvse	f6, [r2, #-180]!	; 0xffffff4c
    1408:	6d72615c 	ldfvse	f6, [r2, #-368]!	; 0xfffffe90
    140c:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    1410:	61652d65 	cmnvs	r5, r5, ror #26
    1414:	695c6962 	ldmdbvs	ip, {r1, r5, r6, r8, fp, sp, lr}^
    1418:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    141c:	735c6564 	cmpvc	ip, #100, 10	; 0x19000000
    1420:	00007379 	andeq	r7, r0, r9, ror r3
    1424:	65726f63 	ldrbvs	r6, [r2, #-3939]!	; 0xfffff09d
    1428:	346d635f 	strbtcc	r6, [sp], #-863	; 0xfffffca1
    142c:	0100682e 	tsteq	r0, lr, lsr #16
    1430:	41430000 	mrsmi	r0, (UNDEF: 67)
    1434:	00632e4e 	rsbeq	r2, r3, lr, asr #28
    1438:	73000002 	movwvc	r0, #2
    143c:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
    1440:	78783466 	ldmdavc	r8!, {r1, r2, r5, r6, sl, ip, sp}^
    1444:	0300682e 	movweq	r6, #2094	; 0x82e
    1448:	645f0000 	ldrbvs	r0, [pc], #-0	; 1450 <startup-0x1fffebb0>
    144c:	75616665 	strbvc	r6, [r1, #-1637]!	; 0xfffff99b
    1450:	745f746c 	ldrbvc	r7, [pc], #-1132	; 1458 <startup-0x1fffeba8>
    1454:	73657079 	cmnvc	r5, #121	; 0x79
    1458:	0400682e 	streq	r6, [r0], #-2094	; 0xfffff7d2
    145c:	735f0000 	cmpvc	pc, #0
    1460:	6e696474 	mcrvs	4, 3, r6, cr9, cr4, {3}
    1464:	00682e74 	rsbeq	r2, r8, r4, ror lr
    1468:	73000005 	movwvc	r0, #5
    146c:	65747379 	ldrbvs	r7, [r4, #-889]!	; 0xfffffc87
    1470:	74735f6d 	ldrbtvc	r5, [r3], #-3949	; 0xfffff093
    1474:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
    1478:	2e787834 	mrccs	8, 3, r7, cr8, cr4, {1}
    147c:	00030068 	andeq	r0, r3, r8, rrx
    1480:	6d747300 	ldclvs	3, cr7, [r4, #-0]
    1484:	34663233 	strbtcc	r3, [r6], #-563	; 0xfffffdcd
    1488:	635f7878 	cmpvs	pc, #120, 16	; 0x780000
    148c:	682e6e61 	stmdavs	lr!, {r0, r5, r6, r9, sl, fp, sp, lr}
    1490:	00000300 	andeq	r0, r0, r0, lsl #6
    1494:	2e4e4143 	dvfcsem	f4, f6, f3
    1498:	00020068 	andeq	r0, r2, r8, rrx
    149c:	73696d00 	cmnvc	r9, #0, 26
    14a0:	00682e63 	rsbeq	r2, r8, r3, ror #28
    14a4:	73000003 	movwvc	r0, #3
    14a8:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
    14ac:	78783466 	ldmdavc	r8!, {r1, r2, r5, r6, sl, ip, sp}^
    14b0:	6970675f 	ldmdbvs	r0!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, sp, lr}^
    14b4:	00682e6f 	rsbeq	r2, r8, pc, ror #28
    14b8:	00000003 	andeq	r0, r0, r3
    14bc:	3c020500 	cfstr32cc	mvfx0, [r2], {-0}
    14c0:	03200022 			; <UNDEFINED> instruction: 0x03200022
    14c4:	75010cdd 	strvc	r0, [r1, #-3293]	; 0xfffff323
    14c8:	d81ecd4b 	ldmdale	lr, {r0, r1, r3, r6, r8, sl, fp, lr, pc}
    14cc:	c3030204 	movwgt	r0, #12804	; 0x3204
    14d0:	4b3d9073 	blmi	f656a4 <startup-0x1f09a95c>
    14d4:	04020091 	streq	r0, [r2], #-145	; 0xffffff6f
    14d8:	02002c02 	andeq	r2, r0, #512	; 0x200
    14dc:	58060104 	stmdapl	r6, {r2, r8}
    14e0:	69214f06 	stmdbvs	r1!, {r1, r2, r8, r9, sl, fp, lr}
    14e4:	86838667 	strhi	r8, [r3], r7, ror #12
    14e8:	593d3d59 	ldmdbpl	sp!, {r0, r3, r4, r6, r8, sl, fp, ip, sp}
    14ec:	3d4b594b 	vstrcc.16	s11, [fp, #-150]	; 0xffffff6a	; <UNPREDICTABLE>
    14f0:	67794b3d 			; <UNDEFINED> instruction: 0x67794b3d
    14f4:	594fa059 	stmdbpl	pc, {r0, r3, r4, r6, sp, pc}^	; <UNPREDICTABLE>
    14f8:	bdc9675b 	stcllt	7, cr6, [r9, #364]	; 0x16c
    14fc:	9faf4b67 	svcls	0x00af4b67
    1500:	00767791 			; <UNDEFINED> instruction: 0x00767791
    1504:	03020402 	movweq	r0, #9218	; 0x2402
    1508:	02004a63 	andeq	r4, r0, #405504	; 0x63000
    150c:	66060104 	strvs	r0, [r6], -r4, lsl #2
    1510:	58230306 	stmdapl	r3!, {r1, r2, r8, r9}
    1514:	4b67d921 	blmi	19f79a0 <startup-0x1e608660>
    1518:	3d3d5986 			; <UNDEFINED> instruction: 0x3d3d5986
    151c:	003d774c 	eorseq	r7, sp, ip, asr #14
    1520:	4b030402 	blmi	c2530 <startup-0x1ff3dad0>
    1524:	03040200 	movweq	r0, #16896	; 0x4200
    1528:	04020057 	streq	r0, [r2], #-87	; 0xffffffa9
    152c:	06580601 	ldrbeq	r0, [r8], -r1, lsl #12
    1530:	4f4c4f4d 	svcmi	0x004c4f4d
    1534:	c9673f4b 	stmdbgt	r7!, {r0, r1, r3, r6, r8, r9, sl, fp, ip, sp}^
    1538:	c9594b5d 	ldmdbgt	r9, {r0, r2, r3, r4, r6, r8, r9, fp, lr}^
    153c:	3ecc754e 	cdpcc	5, 12, cr7, cr12, cr14, {2}
    1540:	4b697776 	blmi	1a5f320 <startup-0x1e5a0ce0>
    1544:	67949591 			; <UNDEFINED> instruction: 0x67949591
    1548:	a35a4c3d 	cmpge	sl, #15616	; 0x3d00
    154c:	c99faf9f 	ldmibgt	pc, {r0, r1, r2, r3, r4, r7, r8, r9, sl, fp, sp, pc}	; <UNPREDICTABLE>
    1550:	084bbbf5 	stmdaeq	fp, {r0, r2, r4, r5, r6, r7, r8, r9, fp, ip, sp, pc}^
    1554:	04020022 	streq	r0, [r2], #-34	; 0xffffffde
    1558:	666c0302 	strbtvs	r0, [ip], -r2, lsl #6
    155c:	01040200 	mrseq	r0, R12_usr
    1560:	03066606 	movweq	r6, #26118	; 0x6606
    1564:	3de75817 	stclcc	8, cr5, [r7, #92]!	; 0x5c
    1568:	ad944c3e 	ldcge	12, cr4, [r4, #248]	; 0xf8
    156c:	0013084b 	andseq	r0, r3, fp, asr #16
    1570:	03020402 	movweq	r0, #9218	; 0x2402
    1574:	02005877 	andeq	r5, r0, #7798784	; 0x770000
    1578:	58060104 	stmdapl	r6, {r2, r8}
    157c:	4a0c0306 	bmi	30219c <startup-0x1fcfde64>
    1580:	676741ae 	strbvs	r4, [r7, -lr, lsr #3]!
    1584:	676d674d 	strbvs	r6, [sp, -sp, asr #14]!
    1588:	3d3d4b68 	vldmdbcc	sp!, {d4-<overflow reg d55>}
    158c:	4b683d3d 	blmi	1a10a88 <startup-0x1e5ef578>
    1590:	3d3d3d3d 	ldccc	13, cr3, [sp, #-244]!	; 0xffffff0c
    1594:	3d3d3d68 	ldccc	13, cr3, [sp, #-416]!	; 0xfffffe60
    1598:	3d683d3d 	stclcc	13, cr3, [r8, #-244]!	; 0xffffff0c
    159c:	3d3d3d3d 	ldccc	13, cr3, [sp, #-244]!	; 0xffffff0c
    15a0:	3d3d4b68 	vldmdbcc	sp!, {d4-<overflow reg d55>}
    15a4:	4b4d4d3d 	blmi	1354aa0 <startup-0x1ecab560>
    15a8:	3d3d3d3d 	ldccc	13, cr3, [sp, #-244]!	; 0xffffff0c
    15ac:	3d3d3f3d 	ldccc	15, cr3, [sp, #-244]!	; 0xffffff0c
    15b0:	3fa0303f 	svccc	0x00a0303f
    15b4:	2f30694b 	svccs	0x0030694b
    15b8:	01000c02 	tsteq	r0, r2, lsl #24
    15bc:	0002b501 	andeq	fp, r2, r1, lsl #10
    15c0:	c9000200 	stmdbgt	r0, {r9}
    15c4:	02000001 	andeq	r0, r0, #1
    15c8:	0d0efb01 	vstreq	d15, [lr, #-4]
    15cc:	01010100 	mrseq	r0, (UNDEF: 17)
    15d0:	00000001 	andeq	r0, r0, r1
    15d4:	01000001 	tsteq	r0, r1
    15d8:	552f3a43 	strpl	r3, [pc, #-2627]!	; b9d <startup-0x1ffff463>
    15dc:	73726573 	cmnvc	r2, #482344960	; 0x1cc00000
    15e0:	6164412f 	cmnvs	r4, pc, lsr #2
    15e4:	4f2f746d 	svcmi	0x002f746d
    15e8:	7244656e 	subvc	r6, r4, #461373440	; 0x1b800000
    15ec:	2f657669 	svccs	0x00657669
    15f0:	756b6f44 	strbvc	r6, [fp, #-3908]!	; 0xfffff0bc
    15f4:	746e656d 	strbtvc	r6, [lr], #-1389	; 0xfffffa93
    15f8:	7469472f 	strbtvc	r4, [r9], #-1839	; 0xfffff8d1
    15fc:	2f627548 	svccs	0x00627548
    1600:	32544144 	subscc	r4, r4, #68, 2
    1604:	4c2d3039 	stcmi	0, cr3, [sp], #-228	; 0xffffff1c
    1608:	736d7261 	cmnvc	sp, #268435462	; 0x10000006
    160c:	65747379 	ldrbvs	r7, [r4, #-889]!	; 0xfffffc87
    1610:	6f6b2f6d 	svcvs	0x006b2f6d
    1614:	696c2f64 	stmdbvs	ip!, {r2, r5, r6, r8, r9, sl, fp, sp}^
    1618:	54532f62 	ldrbpl	r2, [r3], #-3938	; 0xfffff09e
    161c:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
    1620:	696c5f34 	stmdbvs	ip!, {r2, r4, r5, r8, r9, sl, fp, ip, lr}^
    1624:	54532f62 	ldrbpl	r2, [r3], #-3938	; 0xfffff09e
    1628:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
    162c:	5f787834 	svcpl	0x00787834
    1630:	50647453 	rsbpl	r7, r4, r3, asr r4
    1634:	70697265 	rsbvc	r7, r9, r5, ror #4
    1638:	72445f68 	subvc	r5, r4, #104, 30	; 0x1a0
    163c:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
    1640:	6372732f 	cmnvs	r2, #-1140850688	; 0xbc000000
    1644:	5c3a6300 	ldcpl	3, cr6, [sl], #-0
    1648:	61657363 	cmnvs	r5, r3, ror #6
    164c:	635c7070 	cmpvs	ip, #112	; 0x70
    1650:	6c65646f 	cfstrdvs	mvd6, [r5], #-444	; 0xfffffe44
    1654:	5c657469 	cfstrdpl	mvd7, [r5], #-420	; 0xfffffe5c
    1658:	6c6f6f74 	stclvs	15, cr6, [pc], #-464	; 1490 <startup-0x1fffeb70>
    165c:	63675c73 	cmnvs	r7, #29440	; 0x7300
    1660:	72612d63 	rsbvc	r2, r1, #6336	; 0x18c0
    1664:	72615c6d 	rsbvc	r5, r1, #27904	; 0x6d00
    1668:	6f6e2d6d 	svcvs	0x006e2d6d
    166c:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    1670:	5c696261 	sfmpl	f6, 2, [r9], #-388	; 0xfffffe7c
    1674:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    1678:	5c656475 	cfstrdpl	mvd6, [r5], #-468	; 0xfffffe2c
    167c:	6863616d 	stmdavs	r3!, {r0, r2, r3, r5, r6, r8, sp, lr}^
    1680:	00656e69 	rsbeq	r6, r5, r9, ror #28
    1684:	635c3a63 	cmpvs	ip, #405504	; 0x63000
    1688:	70616573 	rsbvc	r6, r1, r3, ror r5
    168c:	6f635c70 	svcvs	0x00635c70
    1690:	696c6564 	stmdbvs	ip!, {r2, r5, r6, r8, sl, sp, lr}^
    1694:	745c6574 	ldrbvc	r6, [ip], #-1396	; 0xfffffa8c
    1698:	736c6f6f 	cmnvc	ip, #444	; 0x1bc
    169c:	6363675c 	cmnvs	r3, #92, 14	; 0x1700000
    16a0:	6d72612d 	ldfvse	f6, [r2, #-180]!	; 0xffffff4c
    16a4:	6d72615c 	ldfvse	f6, [r2, #-368]!	; 0xfffffe90
    16a8:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    16ac:	61652d65 	cmnvs	r5, r5, ror #26
    16b0:	695c6962 	ldmdbvs	ip, {r1, r5, r6, r8, fp, sp, lr}^
    16b4:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    16b8:	735c6564 	cmpvc	ip, #100, 10	; 0x19000000
    16bc:	2e007379 	mcrcs	3, 0, r7, cr0, cr9, {3}
    16c0:	696c2f2e 	stmdbvs	ip!, {r1, r2, r3, r5, r8, r9, sl, fp, sp}^
    16c4:	54532f62 	ldrbpl	r2, [r3], #-3938	; 0xfffff09e
    16c8:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
    16cc:	696c5f34 	stmdbvs	ip!, {r2, r4, r5, r8, r9, sl, fp, ip, lr}^
    16d0:	4d432f62 	stclmi	15, cr2, [r3, #-392]	; 0xfffffe78
    16d4:	2f534953 	svccs	0x00534953
    16d8:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    16dc:	00656475 	rsbeq	r6, r5, r5, ror r4
    16e0:	6c2f2e2e 	stcvs	14, cr2, [pc], #-184	; 1630 <startup-0x1fffe9d0>
    16e4:	532f6269 			; <UNDEFINED> instruction: 0x532f6269
    16e8:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
    16ec:	6c5f3446 	cfldrdvs	mvd3, [pc], {70}	; 0x46
    16f0:	532f6269 			; <UNDEFINED> instruction: 0x532f6269
    16f4:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
    16f8:	78783446 	ldmdavc	r8!, {r1, r2, r6, sl, ip, sp}^
    16fc:	6474535f 	ldrbtvs	r5, [r4], #-863	; 0xfffffca1
    1700:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
    1704:	445f6870 	ldrbmi	r6, [pc], #-2160	; 170c <startup-0x1fffe8f4>
    1708:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
    170c:	6e692f72 	mcrvs	15, 3, r2, cr9, cr2, {3}
    1710:	73000063 	movwvc	r0, #99	; 0x63
    1714:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
    1718:	78783466 	ldmdavc	r8!, {r1, r2, r5, r6, sl, ip, sp}^
    171c:	6970675f 	ldmdbvs	r0!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, sp, lr}^
    1720:	00632e6f 	rsbeq	r2, r3, pc, ror #28
    1724:	5f000001 	svcpl	0x00000001
    1728:	61666564 	cmnvs	r6, r4, ror #10
    172c:	5f746c75 	svcpl	0x00746c75
    1730:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
    1734:	00682e73 	rsbeq	r2, r8, r3, ror lr
    1738:	5f000002 	svcpl	0x00000002
    173c:	69647473 	stmdbvs	r4!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
    1740:	682e746e 	stmdavs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
    1744:	00000300 	andeq	r0, r0, r0, lsl #6
    1748:	65726f63 	ldrbvs	r6, [r2, #-3939]!	; 0xfffff09d
    174c:	346d635f 	strbtcc	r6, [sp], #-863	; 0xfffffca1
    1750:	0400682e 	streq	r6, [r0], #-2094	; 0xfffff7d2
    1754:	79730000 	ldmdbvc	r3!, {}^	; <UNPREDICTABLE>
    1758:	6d657473 	cfstrdvs	mvd7, [r5, #-460]!	; 0xfffffe34
    175c:	6d74735f 	ldclvs	3, cr7, [r4, #-380]!	; 0xfffffe84
    1760:	34663233 	strbtcc	r3, [r6], #-563	; 0xfffffdcd
    1764:	682e7878 	stmdavs	lr!, {r3, r4, r5, r6, fp, ip, sp, lr}
    1768:	00000500 	andeq	r0, r0, r0, lsl #10
    176c:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
    1770:	78346632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, sp, lr}
    1774:	00682e78 	rsbeq	r2, r8, r8, ror lr
    1778:	73000005 	movwvc	r0, #5
    177c:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
    1780:	78783466 	ldmdavc	r8!, {r1, r2, r5, r6, sl, ip, sp}^
    1784:	6970675f 	ldmdbvs	r0!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, sp, lr}^
    1788:	00682e6f 	rsbeq	r2, r8, pc, ror #28
    178c:	00000005 	andeq	r0, r0, r5
    1790:	c4020500 	strgt	r0, [r2], #-1280	; 0xfffffb00
    1794:	03200029 			; <UNDEFINED> instruction: 0x03200029
    1798:	4e0100ff 	mcrmi	0, 0, r0, cr1, cr15, {7}
    179c:	38034b4c 	stmdacc	r3, {r2, r3, r6, r8, r9, fp, lr}
    17a0:	204a034a 	subcs	r0, sl, sl, asr #6
    17a4:	33034b4c 	movwcc	r4, #15180	; 0x3b4c
    17a8:	204f034a 	subcs	r0, pc, sl, asr #6
    17ac:	2e034b4c 	vmlscs.f64	d4, d3, d12
    17b0:	2054034a 	subscs	r0, r4, sl, asr #6
    17b4:	29034b4c 	stmdbcs	r3, {r2, r3, r6, r8, r9, fp, lr}
    17b8:	2059034a 	subscs	r0, r9, sl, asr #6
    17bc:	24034b4c 	strcs	r4, [r3], #-2892	; 0xfffff4b4
    17c0:	205e034a 	subscs	r0, lr, sl, asr #6
    17c4:	1f034b4c 	svcne	0x00034b4c
    17c8:	2063034a 	rsbcs	r0, r3, sl, asr #6
    17cc:	1a034b4c 	bne	d4504 <startup-0x1ff2bafc>
    17d0:	2068034a 	rsbcs	r0, r8, sl, asr #6
    17d4:	15034b4c 	strne	r4, [r3, #-2892]	; 0xfffff4b4
    17d8:	206e034a 	rsbcs	r0, lr, sl, asr #6
    17dc:	0f03674c 	svceq	0x0003674c
    17e0:	20730366 	rsbscs	r0, r3, r6, ror #6
    17e4:	0a03674c 	beq	db51c <startup-0x1ff24ae4>
    17e8:	207a0366 	rsbscs	r0, sl, r6, ror #6
    17ec:	0369674c 	cmneq	r9, #76, 14	; 0x1300000
    17f0:	5990080c 	ldmibpl	r0, {r2, r3, fp}
    17f4:	3e660a03 	vmulcc.f32	s1, s12, s6
    17f8:	ad4c5a5a 	vstrge	s11, [ip, #-360]	; 0xfffffe98
    17fc:	040200bc 	streq	r0, [r2], #-188	; 0xffffff44
    1800:	064a0601 	strbeq	r0, [sl], -r1, lsl #12
    1804:	adc0ad50 	stclge	13, cr10, [r0, #320]	; 0x140
    1808:	0200bbcc 	andeq	fp, r0, #204, 22	; 0x33000
    180c:	62030204 	andvs	r0, r3, #4, 4	; 0x40000000
    1810:	040200ba 	streq	r0, [r2], #-186	; 0xffffff46
    1814:	063c0601 	ldrteq	r0, [ip], -r1, lsl #12
    1818:	523c2103 	eorspl	r2, ip, #-1073741824	; 0xc0000000
    181c:	3d3d3d4c 	ldccc	13, cr3, [sp, #-304]!	; 0xfffffed0
    1820:	10033d3d 	andne	r3, r3, sp, lsr sp
    1824:	5a427574 	bpl	109edfc <startup-0x1ef61204>
    1828:	3e3e4c3e 	mrccc	12, 1, r4, cr14, cr14, {1}
    182c:	4a1c033d 	bmi	702528 <startup-0x1f8fdad8>
    1830:	5c685075 	stclpl	0, cr5, [r8], #-468	; 0xfffffe2c
    1834:	0a033d4c 	beq	d0d6c <startup-0x1ff2f294>
    1838:	033d4e4a 	teqeq	sp, #1184	; 0x4a0
    183c:	50754a0c 	rsbspl	r4, r5, ip, lsl #20
    1840:	3d4c5c68 	stclcc	12, cr5, [ip, #-416]	; 0xfffffe60
    1844:	4e4a0a03 	vmlami.f32	s1, s20, s6
    1848:	4a0f033d 	bmi	3c2544 <startup-0x1fc3dabc>
    184c:	0f034b79 	svceq	0x00034b79
    1850:	034b794a 	movteq	r7, #47434	; 0xb94a
    1854:	4cc04a10 	vstmiami	r0, {s9-s24}
    1858:	034c1e50 	movteq	r1, #52816	; 0xce50
    185c:	4b784a0b 	blmi	1e14090 <startup-0x1e1ebf70>
    1860:	784a0b03 	stmdavc	sl, {r0, r1, r8, r9, fp}^
    1864:	00ce0375 	sbceq	r0, lr, r5, ror r3
    1868:	352fbb4a 	strcc	fp, [pc, #-2890]!	; d26 <startup-0x1ffff2da>
    186c:	bbc9089f 	bllt	ff243af0 <dissarmedBit+0xdf23fbb0>
    1870:	0004029f 	muleq	r4, pc, r2	; <UNPREDICTABLE>
    1874:	03b50101 			; <UNDEFINED> instruction: 0x03b50101
    1878:	00020000 	andeq	r0, r2, r0
    187c:	000001c7 	andeq	r0, r0, r7, asr #3
    1880:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
    1884:	0101000d 	tsteq	r1, sp
    1888:	00000101 	andeq	r0, r0, r1, lsl #2
    188c:	00000100 	andeq	r0, r0, r0, lsl #2
    1890:	2f3a4301 	svccs	0x003a4301
    1894:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
    1898:	64412f73 	strbvs	r2, [r1], #-3955	; 0xfffff08d
    189c:	2f746d61 	svccs	0x00746d61
    18a0:	44656e4f 	strbtmi	r6, [r5], #-3663	; 0xfffff1b1
    18a4:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
    18a8:	6b6f442f 	blvs	1bd296c <startup-0x1e42d694>
    18ac:	6e656d75 	mcrvs	13, 3, r6, cr5, cr5, {3}
    18b0:	69472f74 	stmdbvs	r7, {r2, r4, r5, r6, r8, r9, sl, fp, sp}^
    18b4:	62754874 	rsbsvs	r4, r5, #116, 16	; 0x740000
    18b8:	5441442f 	strbpl	r4, [r1], #-1071	; 0xfffffbd1
    18bc:	2d303932 			; <UNDEFINED> instruction: 0x2d303932
    18c0:	6d72614c 	ldfvse	f6, [r2, #-304]!	; 0xfffffed0
    18c4:	74737973 	ldrbtvc	r7, [r3], #-2419	; 0xfffff68d
    18c8:	6b2f6d65 	blvs	bdce64 <startup-0x1f42319c>
    18cc:	6c2f646f 	cfstrsvs	mvf6, [pc], #-444	; 1718 <startup-0x1fffe8e8>
    18d0:	532f6269 			; <UNDEFINED> instruction: 0x532f6269
    18d4:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
    18d8:	6c5f3446 	cfldrdvs	mvd3, [pc], {70}	; 0x46
    18dc:	532f6269 			; <UNDEFINED> instruction: 0x532f6269
    18e0:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
    18e4:	78783446 	ldmdavc	r8!, {r1, r2, r6, sl, ip, sp}^
    18e8:	6474535f 	ldrbtvs	r5, [r4], #-863	; 0xfffffca1
    18ec:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
    18f0:	445f6870 	ldrbmi	r6, [pc], #-2160	; 18f8 <startup-0x1fffe708>
    18f4:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
    18f8:	72732f72 	rsbsvc	r2, r3, #456	; 0x1c8
    18fc:	3a630063 	bcc	18c1a90 <startup-0x1e73e570>
    1900:	6573635c 	ldrbvs	r6, [r3, #-860]!	; 0xfffffca4
    1904:	5c707061 	ldclpl	0, cr7, [r0], #-388	; 0xfffffe7c
    1908:	65646f63 	strbvs	r6, [r4, #-3939]!	; 0xfffff09d
    190c:	6574696c 	ldrbvs	r6, [r4, #-2412]!	; 0xfffff694
    1910:	6f6f745c 	svcvs	0x006f745c
    1914:	675c736c 	ldrbvs	r7, [ip, -ip, ror #6]
    1918:	612d6363 			; <UNDEFINED> instruction: 0x612d6363
    191c:	615c6d72 	cmpvs	ip, r2, ror sp
    1920:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    1924:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    1928:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    192c:	636e695c 	cmnvs	lr, #92, 18	; 0x170000
    1930:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    1934:	63616d5c 	cmnvs	r1, #92, 26	; 0x1700
    1938:	656e6968 	strbvs	r6, [lr, #-2408]!	; 0xfffff698
    193c:	5c3a6300 	ldcpl	3, cr6, [sl], #-0
    1940:	61657363 	cmnvs	r5, r3, ror #6
    1944:	635c7070 	cmpvs	ip, #112	; 0x70
    1948:	6c65646f 	cfstrdvs	mvd6, [r5], #-444	; 0xfffffe44
    194c:	5c657469 	cfstrdpl	mvd7, [r5], #-420	; 0xfffffe5c
    1950:	6c6f6f74 	stclvs	15, cr6, [pc], #-464	; 1788 <startup-0x1fffe878>
    1954:	63675c73 	cmnvs	r7, #29440	; 0x7300
    1958:	72612d63 	rsbvc	r2, r1, #6336	; 0x18c0
    195c:	72615c6d 	rsbvc	r5, r1, #27904	; 0x6d00
    1960:	6f6e2d6d 	svcvs	0x006e2d6d
    1964:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    1968:	5c696261 	sfmpl	f6, 2, [r9], #-388	; 0xfffffe7c
    196c:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    1970:	5c656475 	cfstrdpl	mvd6, [r5], #-468	; 0xfffffe2c
    1974:	00737973 	rsbseq	r7, r3, r3, ror r9
    1978:	6c2f2e2e 	stcvs	14, cr2, [pc], #-184	; 18c8 <startup-0x1fffe738>
    197c:	532f6269 			; <UNDEFINED> instruction: 0x532f6269
    1980:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
    1984:	6c5f3446 	cfldrdvs	mvd3, [pc], {70}	; 0x46
    1988:	432f6269 			; <UNDEFINED> instruction: 0x432f6269
    198c:	5349534d 	movtpl	r5, #37709	; 0x934d
    1990:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    1994:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    1998:	2f2e2e00 	svccs	0x002e2e00
    199c:	2f62696c 	svccs	0x0062696c
    19a0:	334d5453 	movtcc	r5, #54355	; 0xd453
    19a4:	5f344632 	svcpl	0x00344632
    19a8:	2f62696c 	svccs	0x0062696c
    19ac:	334d5453 	movtcc	r5, #54355	; 0xd453
    19b0:	78344632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, lr}
    19b4:	74535f78 	ldrbvc	r5, [r3], #-3960	; 0xfffff088
    19b8:	72655064 	rsbvc	r5, r5, #100	; 0x64
    19bc:	5f687069 	svcpl	0x00687069
    19c0:	76697244 	strbtvc	r7, [r9], -r4, asr #4
    19c4:	692f7265 	stmdbvs	pc!, {r0, r2, r5, r6, r9, ip, sp, lr}	; <UNPREDICTABLE>
    19c8:	0000636e 	andeq	r6, r0, lr, ror #6
    19cc:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
    19d0:	78346632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, sp, lr}
    19d4:	63725f78 	cmnvs	r2, #120, 30	; 0x1e0
    19d8:	00632e63 	rsbeq	r2, r3, r3, ror #28
    19dc:	5f000001 	svcpl	0x00000001
    19e0:	61666564 	cmnvs	r6, r4, ror #10
    19e4:	5f746c75 	svcpl	0x00746c75
    19e8:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
    19ec:	00682e73 	rsbeq	r2, r8, r3, ror lr
    19f0:	5f000002 	svcpl	0x00000002
    19f4:	69647473 	stmdbvs	r4!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
    19f8:	682e746e 	stmdavs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
    19fc:	00000300 	andeq	r0, r0, r0, lsl #6
    1a00:	65726f63 	ldrbvs	r6, [r2, #-3939]!	; 0xfffff09d
    1a04:	346d635f 	strbtcc	r6, [sp], #-863	; 0xfffffca1
    1a08:	0400682e 	streq	r6, [r0], #-2094	; 0xfffff7d2
    1a0c:	79730000 	ldmdbvc	r3!, {}^	; <UNPREDICTABLE>
    1a10:	6d657473 	cfstrdvs	mvd7, [r5, #-460]!	; 0xfffffe34
    1a14:	6d74735f 	ldclvs	3, cr7, [r4, #-380]!	; 0xfffffe84
    1a18:	34663233 	strbtcc	r3, [r6], #-563	; 0xfffffdcd
    1a1c:	682e7878 	stmdavs	lr!, {r3, r4, r5, r6, fp, ip, sp, lr}
    1a20:	00000500 	andeq	r0, r0, r0, lsl #10
    1a24:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
    1a28:	78346632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, sp, lr}
    1a2c:	00682e78 	rsbeq	r2, r8, r8, ror lr
    1a30:	73000005 	movwvc	r0, #5
    1a34:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
    1a38:	78783466 	ldmdavc	r8!, {r1, r2, r5, r6, sl, ip, sp}^
    1a3c:	6363725f 	cmnvs	r3, #-268435451	; 0xf0000005
    1a40:	0500682e 	streq	r6, [r0, #-2094]	; 0xfffff7d2
    1a44:	00000000 	andeq	r0, r0, r0
    1a48:	2ed40205 	cdpcs	2, 13, cr0, cr4, cr5, {0}
    1a4c:	e1032000 	mrs	r2, (UNDEF: 3)
    1a50:	69300101 	ldmdbvs	r0!, {r0, r8}
    1a54:	4f40693f 	svcmi	0x0040693f
    1a58:	503f694e 	eorspl	r6, pc, lr, asr #18
    1a5c:	6be41703 	blvs	ff907670 <dissarmedBit+0xdf903730>
    1a60:	0f034b3f 	svceq	0x00034b3f
    1a64:	3d2f3d74 	stccc	13, cr3, [pc, #-464]!	; 189c <startup-0x1fffe764>
    1a68:	02040200 	andeq	r0, r4, #0, 4
    1a6c:	04020040 	streq	r0, [r2], #-64	; 0xffffffc0
    1a70:	02006702 	andeq	r6, r0, #524288	; 0x80000
    1a74:	003d0204 	eorseq	r0, sp, r4, lsl #4
    1a78:	06010402 	streq	r0, [r1], -r2, lsl #8
    1a7c:	5a4c0658 	bpl	13033e4 <startup-0x1ecfcc1c>
    1a80:	032f3e4e 			; <UNDEFINED> instruction: 0x032f3e4e
    1a84:	32674a0b 	rsbcc	r4, r7, #45056	; 0xb000
    1a88:	3d694d3f 	stclcc	13, cr4, [r9, #-252]!	; 0xffffff04
    1a8c:	6a741503 	bvs	1d06ea0 <startup-0x1e2f9160>
    1a90:	6614034b 	ldrvs	r0, [r4], -fp, asr #6
    1a94:	033f3f6c 	teqeq	pc, #108, 30	; 0x1b0
    1a98:	7903660b 	stmdbvc	r3, {r0, r1, r3, r9, sl, sp, lr}
    1a9c:	3d233d20 	stccc	13, cr3, [r3, #-128]!	; 0xffffff80
    1aa0:	740f0324 	strvc	r0, [pc], #-804	; 1aa8 <startup-0x1fffe558>
    1aa4:	de034b6a 	vmlsle.f64	d4, d3, d26
    1aa8:	bb7c6600 	bllt	1f1b2b0 <startup-0x1e0e4d50>
    1aac:	0e033e2d 	cdpeq	14, 0, cr3, cr3, cr13, {1}
    1ab0:	034b6966 	movteq	r6, #47462	; 0xb966
    1ab4:	835d661a 	cmphi	sp, #27262976	; 0x1a00000
    1ab8:	74018503 	strvc	r8, [r1], #-1283	; 0xfffffafd
    1abc:	e9034b69 	stmdb	r3, {r0, r3, r5, r6, r8, r9, fp, lr}
    1ac0:	ad6c6600 	stclge	6, cr6, [ip, #-0]
    1ac4:	69740d03 	ldmdbvs	r4!, {r0, r1, r8, sl, fp}^
    1ac8:	660e034b 	strvs	r0, [lr], -fp, asr #6
    1acc:	15034b69 	strne	r4, [r3, #-2921]	; 0xfffff497
    1ad0:	3f345966 	svccc	0x00345966
    1ad4:	0341694d 	movteq	r6, #6477	; 0x194d
    1ad8:	34599018 	ldrbcc	r9, [r9], #-24	; 0xffffffe8
    1adc:	41694d3f 	cmnmi	r9, pc, lsr sp
    1ae0:	7401b303 	strvc	fp, [r1], #-771	; 0xfffffcfd
    1ae4:	4d3f334b 	ldcmi	3, cr3, [pc, #-300]!	; 19c0 <startup-0x1fffe640>
    1ae8:	0d033d4d 	stceq	13, cr3, [r3, #-308]	; 0xfffffecc
    1aec:	03672f66 	cmneq	r7, #408	; 0x198
    1af0:	334b6617 	movtcc	r6, #46615	; 0xb617
    1af4:	3d4d4d3f 	stclcc	13, cr4, [sp, #-252]	; 0xffffff04
    1af8:	4b660f03 	blmi	198570c <startup-0x1e67a8f4>
    1afc:	4d4d3f33 	stclmi	15, cr3, [sp, #-204]	; 0xffffff34
    1b00:	820f033d 	andhi	r0, pc, #-201326592	; 0xf4000000
    1b04:	4d3f334b 	ldcmi	3, cr3, [pc, #-300]!	; 19e0 <startup-0x1fffe620>
    1b08:	24033d5b 	strcs	r3, [r3], #-3419	; 0xfffff2a5
    1b0c:	5ac04b90 	bpl	ff014954 <dissarmedBit+0xdf010a14>
    1b10:	3d223d77 	stccc	13, cr3, [r2, #-476]!	; 0xfffffe24
    1b14:	3f5a6726 	svccc	0x005a6726
    1b18:	8383cbdb 	orrhi	ip, r3, #224256	; 0x36c00
    1b1c:	3d201b03 	fstmdbxcc	r0!, {d1}	;@ Deprecated
    1b20:	683d5925 	ldmdavs	sp!, {r0, r2, r5, r8, fp, ip, lr}
    1b24:	683d6769 	ldmdavs	sp!, {r0, r3, r5, r6, r8, r9, sl, sp, lr}
    1b28:	683d6769 	ldmdavs	sp!, {r0, r3, r5, r6, r8, r9, sl, sp, lr}
    1b2c:	ba3f0367 	blt	fc28d0 <startup-0x1f03d730>
    1b30:	3f84334b 	svccc	0x0084334b
    1b34:	8340694d 	movthi	r6, #2381	; 0x94d
    1b38:	6a9e0a03 	bvs	fe78434c <dissarmedBit+0xde78040c>
    1b3c:	660c034b 	strvs	r0, [ip], -fp, asr #6
    1b40:	b8034b69 	stmdalt	r3, {r0, r3, r5, r6, r8, r9, fp, lr}
    1b44:	3d4e6601 	stclcc	6, cr6, [lr, #-4]
    1b48:	4b741603 	blmi	1d0735c <startup-0x1e2f8ca4>
    1b4c:	4d4d4d33 	stclmi	13, cr4, [sp, #-204]	; 0xffffff34
    1b50:	8214034b 	andshi	r0, r4, #738197505	; 0x2c000001
    1b54:	4d4d334b 	stclmi	3, cr3, [sp, #-300]	; 0xfffffed4
    1b58:	11034b4d 	tstne	r3, sp, asr #22
    1b5c:	4d334b82 	vldmdbmi	r3!, {d4}
    1b60:	034b5b4d 	movteq	r5, #47949	; 0xbb4d
    1b64:	334b7410 	movtcc	r7, #46096	; 0xb410
    1b68:	4b694d4d 	blmi	1a550a4 <startup-0x1e5aaf5c>
    1b6c:	8200d303 	andhi	sp, r0, #201326592	; 0xc000000
    1b70:	4d4d334b 	stclmi	3, cr3, [sp, #-300]	; 0xfffffed4
    1b74:	f0034b4d 			; <UNDEFINED> instruction: 0xf0034b4d
    1b78:	3d4e8200 	sfmcc	f0, 3, [lr, #-0]
    1b7c:	79742503 	ldmdbvc	r4!, {r0, r1, r8, sl, sp}^
    1b80:	761e6c4c 	ldrvc	r6, [lr], -ip, asr #24
    1b84:	79741303 	ldmdbvc	r4!, {r0, r1, r8, r9, ip}^
    1b88:	761e6c4c 	ldrvc	r6, [lr], -ip, asr #24
    1b8c:	79741103 	ldmdbvc	r4!, {r0, r1, r8, ip}^
    1b90:	761e6c4c 	ldrvc	r6, [lr], -ip, asr #24
    1b94:	79742c03 	ldmdbvc	r4!, {r0, r1, sl, fp, sp}^
    1b98:	761e6c4c 	ldrvc	r6, [lr], -ip, asr #24
    1b9c:	79742703 	ldmdbvc	r4!, {r0, r1, r8, r9, sl, sp}^
    1ba0:	761e6c4c 	ldrvc	r6, [lr], -ip, asr #24
    1ba4:	79741d03 	ldmdbvc	r4!, {r0, r1, r8, sl, fp, ip}^
    1ba8:	761e6c4c 	ldrvc	r6, [lr], -ip, asr #24
    1bac:	79741003 	ldmdbvc	r4!, {r0, r1, ip}^
    1bb0:	761e6c4c 	ldrvc	r6, [lr], -ip, asr #24
    1bb4:	79740e03 	ldmdbvc	r4!, {r0, r1, r9, sl, fp}^
    1bb8:	761e6c4c 	ldrvc	r6, [lr], -ip, asr #24
    1bbc:	78742903 	ldmdavc	r4!, {r0, r1, r8, fp, sp}^
    1bc0:	761e6c4c 	ldrvc	r6, [lr], -ip, asr #24
    1bc4:	78742303 	ldmdavc	r4!, {r0, r1, r8, r9, sp}^
    1bc8:	761e6c4c 	ldrvc	r6, [lr], -ip, asr #24
    1bcc:	78742503 	ldmdavc	r4!, {r0, r1, r8, sl, sp}^
    1bd0:	761e6c4c 	ldrvc	r6, [lr], -ip, asr #24
    1bd4:	78741403 	ldmdavc	r4!, {r0, r1, sl, ip}^
    1bd8:	761e6c4c 	ldrvc	r6, [lr], -ip, asr #24
    1bdc:	78741203 	ldmdavc	r4!, {r0, r1, r9, ip}^
    1be0:	761e6c4c 	ldrvc	r6, [lr], -ip, asr #24
    1be4:	78742d03 	ldmdavc	r4!, {r0, r1, r8, sl, fp, sp}^
    1be8:	761e6c4c 	ldrvc	r6, [lr], -ip, asr #24
    1bec:	78742803 	ldmdavc	r4!, {r0, r1, fp, sp}^
    1bf0:	761e6c4c 	ldrvc	r6, [lr], -ip, asr #24
    1bf4:	6a740c03 	bvs	1d04c08 <startup-0x1e2fb3f8>
    1bf8:	681e6c4c 	ldmdavs	lr, {r2, r3, r6, sl, fp, sp, lr}
    1bfc:	7402ac03 	strvc	sl, [r2], #-3075	; 0xfffff3fd
    1c00:	1e974d94 	mrcne	13, 4, r4, cr7, cr4, {4}
    1c04:	661703ae 	ldrvs	r0, [r7], -lr, lsr #7
    1c08:	502f2f67 	eorpl	r2, pc, r7, ror #30
    1c0c:	3e4c3e59 	mcrcc	14, 2, r3, cr12, cr9, {2}
    1c10:	7659404e 	ldrbvc	r4, [r9], -lr, asr #32
    1c14:	033d4d5c 	teqeq	sp, #92, 26	; 0x1700
    1c18:	7530660a 	ldrvc	r6, [r0, #-1546]!	; 0xfffff9f6
    1c1c:	67581103 	ldrbvs	r1, [r8, -r3, lsl #2]
    1c20:	4d5c6850 	ldclmi	8, cr6, [ip, #-320]	; 0xfffffec0
    1c24:	6611033d 			; <UNDEFINED> instruction: 0x6611033d
    1c28:	06024b6c 	streq	r4, [r2], -ip, ror #22
    1c2c:	4e010100 	adfmis	f0, f1, f0
    1c30:	02000001 	andeq	r0, r0, #1
    1c34:	00010800 	andeq	r0, r1, r0, lsl #16
    1c38:	fb010200 	blx	42442 <startup-0x1ffbdbbe>
    1c3c:	01000d0e 	tsteq	r0, lr, lsl #26
    1c40:	00010101 	andeq	r0, r1, r1, lsl #2
    1c44:	00010000 	andeq	r0, r1, r0
    1c48:	3a430100 	bcc	10c2050 <startup-0x1ef3dfb0>
    1c4c:	6573552f 	ldrbvs	r5, [r3, #-1327]!	; 0xfffffad1
    1c50:	412f7372 			; <UNDEFINED> instruction: 0x412f7372
    1c54:	746d6164 	strbtvc	r6, [sp], #-356	; 0xfffffe9c
    1c58:	656e4f2f 	strbvs	r4, [lr, #-3887]!	; 0xfffff0d1
    1c5c:	76697244 	strbtvc	r7, [r9], -r4, asr #4
    1c60:	6f442f65 	svcvs	0x00442f65
    1c64:	656d756b 	strbvs	r7, [sp, #-1387]!	; 0xfffffa95
    1c68:	472f746e 	strmi	r7, [pc, -lr, ror #8]!
    1c6c:	75487469 	strbvc	r7, [r8, #-1129]	; 0xfffffb97
    1c70:	41442f62 	cmpmi	r4, r2, ror #30
    1c74:	30393254 	eorscc	r3, r9, r4, asr r2
    1c78:	72614c2d 	rsbvc	r4, r1, #11520	; 0x2d00
    1c7c:	7379736d 	cmnvc	r9, #-1275068415	; 0xb4000001
    1c80:	2f6d6574 	svccs	0x006d6574
    1c84:	2f646f6b 	svccs	0x00646f6b
    1c88:	0062696c 	rsbeq	r6, r2, ip, ror #18
    1c8c:	635c3a63 	cmpvs	ip, #405504	; 0x63000
    1c90:	70616573 	rsbvc	r6, r1, r3, ror r5
    1c94:	6f635c70 	svcvs	0x00635c70
    1c98:	696c6564 	stmdbvs	ip!, {r2, r5, r6, r8, sl, sp, lr}^
    1c9c:	745c6574 	ldrbvc	r6, [ip], #-1396	; 0xfffffa8c
    1ca0:	736c6f6f 	cmnvc	ip, #444	; 0x1bc
    1ca4:	6363675c 	cmnvs	r3, #92, 14	; 0x1700000
    1ca8:	6d72612d 	ldfvse	f6, [r2, #-180]!	; 0xffffff4c
    1cac:	6d72615c 	ldfvse	f6, [r2, #-368]!	; 0xfffffe90
    1cb0:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    1cb4:	61652d65 	cmnvs	r5, r5, ror #26
    1cb8:	695c6962 	ldmdbvs	ip, {r1, r5, r6, r8, fp, sp, lr}^
    1cbc:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    1cc0:	6d5c6564 	cfldr64vs	mvdx6, [ip, #-400]	; 0xfffffe70
    1cc4:	69686361 	stmdbvs	r8!, {r0, r5, r6, r8, r9, sp, lr}^
    1cc8:	6300656e 	movwvs	r6, #1390	; 0x56e
    1ccc:	73635c3a 	cmnvc	r3, #14848	; 0x3a00
    1cd0:	70706165 	rsbsvc	r6, r0, r5, ror #2
    1cd4:	646f635c 	strbtvs	r6, [pc], #-860	; 1cdc <startup-0x1fffe324>
    1cd8:	74696c65 	strbtvc	r6, [r9], #-3173	; 0xfffff39b
    1cdc:	6f745c65 	svcvs	0x00745c65
    1ce0:	5c736c6f 	ldclpl	12, cr6, [r3], #-444	; 0xfffffe44
    1ce4:	2d636367 	stclcs	3, cr6, [r3, #-412]!	; 0xfffffe64
    1ce8:	5c6d7261 	sfmpl	f7, 2, [sp], #-388	; 0xfffffe7c
    1cec:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    1cf0:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    1cf4:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    1cf8:	6e695c69 	cdpvs	12, 6, cr5, cr9, cr9, {3}
    1cfc:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    1d00:	79735c65 	ldmdbvc	r3!, {r0, r2, r5, r6, sl, fp, ip, lr}^
    1d04:	62000073 	andvs	r0, r0, #115	; 0x73
    1d08:	65666675 	strbvs	r6, [r6, #-1653]!	; 0xfffff98b
    1d0c:	00632e72 	rsbeq	r2, r3, r2, ror lr
    1d10:	5f000001 	svcpl	0x00000001
    1d14:	61666564 	cmnvs	r6, r4, ror #10
    1d18:	5f746c75 	svcpl	0x00746c75
    1d1c:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
    1d20:	00682e73 	rsbeq	r2, r8, r3, ror lr
    1d24:	5f000002 	svcpl	0x00000002
    1d28:	69647473 	stmdbvs	r4!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
    1d2c:	682e746e 	stmdavs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
    1d30:	00000300 	andeq	r0, r0, r0, lsl #6
    1d34:	66667562 	strbtvs	r7, [r6], -r2, ror #10
    1d38:	682e7265 	stmdavs	lr!, {r0, r2, r5, r6, r9, ip, sp, lr}
    1d3c:	00000100 	andeq	r0, r0, r0, lsl #2
    1d40:	02050000 	andeq	r0, r5, #0
    1d44:	20003bc4 	andcs	r3, r0, r4, asr #23
    1d48:	4b4b4b15 	blmi	12d49a4 <startup-0x1ed2b65c>
    1d4c:	59764e4b 	ldmdbpl	r6!, {r0, r1, r3, r6, r9, sl, fp, lr}^
    1d50:	5985c932 	stmibpl	r5, {r1, r4, r5, r8, fp, lr, pc}
    1d54:	7a4e214c 	bvc	138a28c <startup-0x1ec75d74>
    1d58:	01040200 	mrseq	r0, R12_usr
    1d5c:	02005806 	andeq	r5, r0, #393216	; 0x60000
    1d60:	00660204 	rsbeq	r0, r6, r4, lsl #4
    1d64:	20040402 	andcs	r0, r4, r2, lsl #8
    1d68:	04040200 	streq	r0, [r4], #-512	; 0xfffffe00
    1d6c:	02003f06 	andeq	r3, r0, #6, 30
    1d70:	4e670404 	cdpmi	4, 6, cr0, cr7, cr4, {0}
    1d74:	c932595a 	ldmdbgt	r2!, {r1, r3, r4, r6, r8, fp, ip, lr}
    1d78:	214c5985 	smlalbbcs	r5, ip, r5, r9
    1d7c:	01000402 	tsteq	r0, r2, lsl #8
    1d80:	Address 0x00001d80 is out of bounds.


Disassembly of section .debug_str:

00000000 <.debug_str>:
       0:	73736573 	cmnvc	r3, #482344960	; 0x1cc00000
       4:	496e6f69 	stmdbmi	lr!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
       8:	5f5f0044 	svcpl	0x005f0044
       c:	746e6975 	strbtvc	r6, [lr], #-2421	; 0xfffff68b
      10:	00745f38 	rsbseq	r5, r4, r8, lsr pc
      14:	726f6f44 	rsbvc	r6, pc, #68, 30	; 0x110
      18:	6d006469 	cfstrsvs	mvf6, [r0, #-420]	; 0xfffffe5c
      1c:	79546773 	ldmdbvc	r4, {r0, r1, r4, r5, r6, r8, r9, sl, sp, lr}^
      20:	5f006570 	svcpl	0x00006570
      24:	73756e75 	cmnvc	r5, #1872	; 0x750
      28:	5f006465 	svcpl	0x00006465
      2c:	746e695f 	strbtvc	r6, [lr], #-2399	; 0xfffff6a1
      30:	745f3233 	ldrbvc	r3, [pc], #-563	; 38 <startup-0x1fffffc8>
      34:	67736d00 	ldrbvs	r6, [r3, -r0, lsl #26]!
      38:	006d754e 	rsbeq	r7, sp, lr, asr #10
      3c:	726f6873 	rsbvc	r6, pc, #7536640	; 0x730000
      40:	6e692074 	mcrvs	0, 3, r2, cr9, cr4, {3}
      44:	5f5f0074 	svcpl	0x005f0074
      48:	73756e75 	cmnvc	r5, #1872	; 0x750
      4c:	5f5f6465 	svcpl	0x005f6465
      50:	554e4700 	strbpl	r4, [lr, #-1792]	; 0xfffff900
      54:	39394320 	ldmdbcc	r9!, {r5, r8, r9, lr}
      58:	322e3720 	eorcc	r3, lr, #32, 14	; 0x800000
      5c:	3220312e 	eorcc	r3, r0, #-2147483637	; 0x8000000b
      60:	30373130 	eorscc	r3, r7, r0, lsr r1
      64:	20343039 	eorscs	r3, r4, r9, lsr r0
      68:	6c657228 	sfmvs	f7, 2, [r5], #-160	; 0xffffff60
      6c:	65736165 	ldrbvs	r6, [r3, #-357]!	; 0xfffffe9b
      70:	415b2029 	cmpmi	fp, r9, lsr #32
      74:	652f4d52 	strvs	r4, [pc, #-3410]!	; fffff32a <dissarmedBit+0xdfffb3ea>
      78:	6465626d 	strbtvs	r6, [r5], #-621	; 0xfffffd93
      7c:	2d646564 	cfstr64cs	mvdx6, [r4, #-400]!	; 0xfffffe70
      80:	72622d37 	rsbvc	r2, r2, #3520	; 0xdc0
      84:	68636e61 	stmdavs	r3!, {r0, r5, r6, r9, sl, fp, sp, lr}^
      88:	76657220 	strbtvc	r7, [r5], -r0, lsr #4
      8c:	6f697369 	svcvs	0x00697369
      90:	3532206e 	ldrcc	r2, [r2, #-110]!	; 0xffffff92
      94:	34303235 	ldrtcc	r3, [r0], #-565	; 0xfffffdcb
      98:	6d2d205d 	stcvs	0, cr2, [sp, #-372]!	; 0xfffffe8c
      9c:	6d756874 	ldclvs	8, cr6, [r5, #-464]!	; 0xfffffe30
      a0:	6d2d2062 	stcvs	0, cr2, [sp, #-392]!	; 0xfffffe78
      a4:	68637261 	stmdavs	r3!, {r0, r5, r6, r9, ip, sp, lr}^
      a8:	6d72613d 	ldfvse	f6, [r2, #-244]!	; 0xffffff0c
      ac:	6d2d3676 	stcvs	6, cr3, [sp, #-472]!	; 0xfffffe28
      b0:	666d2d20 	strbtvs	r2, [sp], -r0, lsr #26
      b4:	74616f6c 	strbtvc	r6, [r1], #-3948	; 0xfffff094
      b8:	6962612d 	stmdbvs	r2!, {r0, r2, r3, r5, r8, sp, lr}^
      bc:	666f733d 			; <UNDEFINED> instruction: 0x666f733d
      c0:	6d2d2074 	stcvs	0, cr2, [sp, #-464]!	; 0xfffffe30
      c4:	6d756874 	ldclvs	8, cr6, [r5, #-464]!	; 0xfffffe30
      c8:	6d2d2062 	stcvs	0, cr2, [sp, #-392]!	; 0xfffffe78
      cc:	68637261 	stmdavs	r3!, {r0, r5, r6, r9, ip, sp, lr}^
      d0:	6d72613d 	ldfvse	f6, [r2, #-244]!	; 0xffffff0c
      d4:	6d2d3676 	stcvs	6, cr3, [sp, #-472]!	; 0xfffffe28
      d8:	20672d20 	rsbcs	r2, r7, r0, lsr #26
      dc:	20304f2d 	eorscs	r4, r0, sp, lsr #30
      e0:	6474732d 	ldrbtvs	r7, [r4], #-813	; 0xfffffcd3
      e4:	3939633d 	ldmdbcc	r9!, {r0, r2, r3, r4, r5, r8, r9, sp, lr}
      e8:	41646900 	cmnmi	r4, r0, lsl #18
      ec:	67697373 			; <UNDEFINED> instruction: 0x67697373
      f0:	61485f6e 	cmpvs	r8, lr, ror #30
      f4:	656c646e 	strbvs	r6, [ip, #-1134]!	; 0xfffffb92
      f8:	4e450072 	mcrmi	0, 2, r0, cr5, cr2, {3}
      fc:	454c4241 	strbmi	r4, [ip, #-577]	; 0xfffffdbf
     100:	6e6f6c00 	cdpvs	12, 6, cr6, cr15, cr0, {0}
     104:	6f6c2067 	svcvs	0x006c2067
     108:	7520676e 	strvc	r6, [r0, #-1902]!	; 0xfffff892
     10c:	6769736e 	strbvs	r7, [r9, -lr, ror #6]!
     110:	2064656e 	rsbcs	r6, r4, lr, ror #10
     114:	00746e69 	rsbseq	r6, r4, r9, ror #28
     118:	69736e75 	ldmdbvs	r3!, {r0, r2, r4, r5, r6, r9, sl, fp, sp, lr}^
     11c:	64656e67 	strbtvs	r6, [r5], #-3687	; 0xfffff199
     120:	61686320 	cmnvs	r8, r0, lsr #6
     124:	61430072 	hvcvs	12290	; 0x3002
     128:	4d78546e 	cfldrdmi	mvd5, [r8, #-440]!	; 0xfffffe48
     12c:	74006773 	strvc	r6, [r0], #-1907	; 0xfffff88d
     130:	53656d69 	cmnpl	r5, #6720	; 0x1a40
     134:	706d6174 	rsbvc	r6, sp, r4, ror r1
     138:	696e6900 	stmdbvs	lr!, {r8, fp, sp, lr}^
     13c:	6e725f74 	mrcvs	15, 3, r5, cr2, cr4, {3}
     140:	49440067 	stmdbmi	r4, {r0, r1, r2, r5, r6}^
     144:	4c424153 	stfmie	f4, [r2], {83}	; 0x53
     148:	54490045 	strbpl	r0, [r9], #-69	; 0xffffffbb
     14c:	78525f4d 	ldmdavc	r2, {r0, r2, r3, r6, r8, r9, sl, fp, ip, lr}^
     150:	66667542 	strbtvs	r7, [r6], -r2, asr #10
     154:	66007265 	strvs	r7, [r0], -r5, ror #4
     158:	65746c69 	ldrbvs	r6, [r4, #-3177]!	; 0xfffff397
     15c:	4d410072 	stclmi	0, cr0, [r1, #-456]	; 0xfffffe38
     160:	5f006773 	svcpl	0x00006773
     164:	6e69755f 	mcrvs	5, 3, r7, cr9, cr15, {2}
     168:	5f323374 	svcpl	0x00323374
     16c:	41430074 	hvcmi	12292	; 0x3004
     170:	6c69464e 	stclvs	6, cr4, [r9], #-312	; 0xfffffec8
     174:	00726574 	rsbseq	r6, r2, r4, ror r5
     178:	6954736d 	ldmdbvs	r4, {r0, r2, r3, r5, r6, r8, r9, ip, sp, lr}^
     17c:	00736b63 	rsbseq	r6, r3, r3, ror #22
     180:	65436f74 	strbvs	r6, [r3, #-3956]	; 0xfffff08c
     184:	6172746e 	cmnvs	r2, lr, ror #8
     188:	3a43006c 	bcc	10c0340 <startup-0x1ef3fcc0>
     18c:	6573552f 	ldrbvs	r5, [r3, #-1327]!	; 0xfffffad1
     190:	412f7372 			; <UNDEFINED> instruction: 0x412f7372
     194:	746d6164 	strbtvc	r6, [sp], #-356	; 0xfffffe9c
     198:	656e4f2f 	strbvs	r4, [lr, #-3887]!	; 0xfffff0d1
     19c:	76697244 	strbtvc	r7, [r9], -r4, asr #4
     1a0:	6f442f65 	svcvs	0x00442f65
     1a4:	656d756b 	strbvs	r7, [sp, #-1387]!	; 0xfffffa95
     1a8:	472f746e 	strmi	r7, [pc, -lr, ror #8]!
     1ac:	75487469 	strbvc	r7, [r8, #-1129]	; 0xfffffb97
     1b0:	41442f62 	cmpmi	r4, r2, ror #30
     1b4:	30393254 	eorscc	r3, r9, r4, asr r2
     1b8:	72614c2d 	rsbvc	r4, r1, #11520	; 0x2d00
     1bc:	7379736d 	cmnvc	r9, #-1275068415	; 0xb4000001
     1c0:	2f6d6574 	svccs	0x006d6574
     1c4:	2f646f6b 	svccs	0x00646f6b
     1c8:	726f6f44 	rsbvc	r6, pc, #68, 30	; 0x110
     1cc:	6f6f642f 	svcvs	0x006f642f
     1d0:	61635f72 	smcvs	13810	; 0x35f2
     1d4:	00632e6e 	rsbeq	r2, r3, lr, ror #28
     1d8:	6f6f446e 	svcvs	0x006f446e
     1dc:	43007372 	movwmi	r7, #882	; 0x372
     1e0:	73555c3a 	cmpvc	r5, #14848	; 0x3a00
     1e4:	5c737265 	lfmpl	f7, 2, [r3], #-404	; 0xfffffe6c
     1e8:	6d616441 	cfstrdvs	mvd6, [r1, #-260]!	; 0xfffffefc
     1ec:	6e4f5c74 	mcrvs	12, 2, r5, cr15, cr4, {3}
     1f0:	69724465 	ldmdbvs	r2!, {r0, r2, r5, r6, sl, lr}^
     1f4:	445c6576 	ldrbmi	r6, [ip], #-1398	; 0xfffffa8a
     1f8:	6d756b6f 	fldmdbxvs	r5!, {d22-d76}	;@ Deprecated
     1fc:	5c746e65 	ldclpl	14, cr6, [r4], #-404	; 0xfffffe6c
     200:	48746947 	ldmdami	r4!, {r0, r1, r2, r6, r8, fp, sp, lr}^
     204:	445c6275 	ldrbmi	r6, [ip], #-629	; 0xfffffd8b
     208:	39325441 	ldmdbcc	r2!, {r0, r6, sl, ip, lr}
     20c:	614c2d30 	cmpvs	ip, r0, lsr sp
     210:	79736d72 	ldmdbvc	r3!, {r1, r4, r5, r6, r8, sl, fp, sp, lr}^
     214:	6d657473 	cfstrdvs	mvd7, [r5, #-460]!	; 0xfffffe34
     218:	646f6b5c 	strbtvs	r6, [pc], #-2908	; 220 <startup-0x1ffffde0>
     21c:	6f6f445c 	svcvs	0x006f445c
     220:	78450072 	stmdavc	r5, {r1, r4, r5, r6}^
     224:	00644974 	rsbeq	r4, r4, r4, ror r9
     228:	676e6f6c 	strbvs	r6, [lr, -ip, ror #30]!
     22c:	6e6f6c20 	cdpvs	12, 6, cr6, cr15, cr0, {1}
     230:	6e692067 	cdpvs	0, 6, cr2, cr9, cr7, {3}
     234:	74530074 	ldrbvc	r0, [r3], #-116	; 0xffffff8c
     238:	00644964 	rsbeq	r4, r4, r4, ror #18
     23c:	6b73616d 	blvs	1cd87f8 <startup-0x1e327808>
     240:	73795300 	cmnvc	r9, #0, 6
     244:	436d6574 	cmnmi	sp, #116, 10	; 0x1d000000
     248:	4365726f 	cmnmi	r5, #-268435450	; 0xf0000006
     24c:	6b636f6c 	blvs	18dc004 <startup-0x1e723ffc>
     250:	52646900 	rsbpl	r6, r4, #0, 18
     254:	65757165 	ldrbvs	r7, [r5, #-357]!	; 0xfffffe9b
     258:	72007473 	andvc	r7, r0, #1929379840	; 0x73000000
     25c:	6469646e 	strbtvs	r6, [r9], #-1134	; 0xfffffb92
     260:	636f6e00 	cmnvs	pc, #0, 28
     264:	43006469 	movwmi	r6, #1129	; 0x469
     268:	78526e61 	ldmdavc	r2, {r0, r5, r6, r9, sl, fp, sp, lr}^
     26c:	0067734d 	rsbeq	r7, r7, sp, asr #6
     270:	64616568 	strbtvs	r6, [r1], #-1384	; 0xfffffa98
     274:	73007265 	movwvc	r7, #613	; 0x265
     278:	41646e65 	cmnmi	r4, r5, ror #28
     27c:	6d72616c 	ldfvse	f6, [r2, #-432]!	; 0xfffffe50
     280:	6f687300 	svcvs	0x00687300
     284:	75207472 	strvc	r7, [r0, #-1138]!	; 0xfffffb8e
     288:	6769736e 	strbvs	r7, [r9, -lr, ror #6]!
     28c:	2064656e 	rsbcs	r6, r4, lr, ror #10
     290:	00746e69 	rsbseq	r6, r4, r9, ror #28
     294:	64616548 	strbtvs	r6, [r1], #-1352	; 0xfffffab8
     298:	67007265 	strvs	r7, [r0, -r5, ror #4]
     29c:	64497465 	strbvs	r7, [r9], #-1125	; 0xfffffb9b
     2a0:	6e657300 	cdpvs	3, 6, cr7, cr5, cr0, {0}
     2a4:	54726f73 	ldrbtpl	r6, [r2], #-3955	; 0xfffff08d
     2a8:	00657079 	rsbeq	r7, r5, r9, ror r0
     2ac:	69766564 	ldmdbvs	r6!, {r2, r5, r6, r8, sl, sp, lr}^
     2b0:	745f6563 	ldrbvc	r6, [pc], #-1379	; 2b8 <startup-0x1ffffd48>
     2b4:	00657079 	rsbeq	r7, r5, r9, ror r0
     2b8:	69755f5f 	ldmdbvs	r5!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, ip, lr}^
     2bc:	3631746e 	ldrtcc	r7, [r1], -lr, ror #8
     2c0:	7600745f 			; <UNDEFINED> instruction: 0x7600745f
     2c4:	65756c61 	ldrbvs	r6, [r5, #-3169]!	; 0xfffff39f
     2c8:	6500305f 	strvs	r3, [r0, #-95]	; 0xffffffa1
     2cc:	646f636e 	strbtvs	r6, [pc], #-878	; 2d4 <startup-0x1ffffd2c>
     2d0:	6f6d5f65 	svcvs	0x006d5f65
     2d4:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
     2d8:	72616c5f 	rsbvc	r6, r1, #24320	; 0x5f00
     2dc:	736d5f6d 	cmnvc	sp, #436	; 0x1b4
     2e0:	69750067 	ldmdbvs	r5!, {r0, r1, r2, r5, r6}^
     2e4:	4974696e 	ldmdbmi	r4!, {r1, r2, r3, r5, r6, r8, fp, sp, lr}^
     2e8:	61640044 	cmnvs	r4, r4, asr #32
     2ec:	705f6174 	subsvc	r6, pc, r4, ror r1	; <UNPREDICTABLE>
     2f0:	746e696f 	strbtvc	r6, [lr], #-2415	; 0xfffff691
     2f4:	65007265 	strvs	r7, [r0, #-613]	; 0xfffffd9b
     2f8:	646f636e 	strbtvs	r6, [pc], #-878	; 300 <startup-0x1ffffd00>
     2fc:	6f645f65 	svcvs	0x00645f65
     300:	745f726f 	ldrbvc	r7, [pc], #-623	; 308 <startup-0x1ffffcf8>
     304:	5f656d69 	svcpl	0x00656d69
     308:	666e6f63 	strbtvs	r6, [lr], -r3, ror #30
     30c:	65006769 	strvs	r6, [r0, #-1897]	; 0xfffff897
     310:	646f636e 	strbtvs	r6, [pc], #-878	; 318 <startup-0x1ffffce8>
     314:	73615f65 	cmnvc	r1, #404	; 0x194
     318:	6e676973 			; <UNDEFINED> instruction: 0x6e676973
     31c:	0064695f 	rsbeq	r6, r4, pc, asr r9
     320:	75716572 	ldrbvc	r6, [r1, #-1394]!	; 0xfffffa8e
     324:	00747365 	rsbseq	r7, r4, r5, ror #6
     328:	74736964 	ldrbtvc	r6, [r3], #-2404	; 0xfffff69c
     32c:	6f6f6400 	svcvs	0x006f6400
     330:	64695f72 	strbtvs	r5, [r9], #-3954	; 0xfffff08e
     334:	7400305f 	strvc	r3, [r0], #-95	; 0xffffffa1
     338:	65635f6f 	strbvs	r5, [r3, #-3951]!	; 0xfffff091
     33c:	6172746e 	cmnvs	r2, lr, ror #8
     340:	6f6c006c 	svcvs	0x006c006c
     344:	64656b63 	strbtvs	r6, [r5], #-2915	; 0xfffff49d
     348:	6f6f6400 	svcvs	0x006f6400
     34c:	64695f72 	strbtvs	r5, [r9], #-3954	; 0xfffff08e
     350:	6400315f 	strvs	r3, [r0], #-351	; 0xfffffea1
     354:	646f6365 	strbtvs	r6, [pc], #-869	; 35c <startup-0x1ffffca4>
     358:	65745f65 	ldrbvs	r5, [r4, #-3941]!	; 0xfffff09b
     35c:	4449706d 	strbmi	r7, [r9], #-109	; 0xffffff93
     360:	63656400 	cmnvs	r5, #0, 8
     364:	5f65646f 	svcpl	0x0065646f
     368:	726f6f64 	rsbvc	r6, pc, #100, 30	; 0x190
     36c:	6e6f635f 	mcrvs	3, 3, r6, cr15, cr15, {2}
     370:	5f676966 	svcpl	0x00676966
     374:	0067736d 	rsbeq	r7, r7, sp, ror #6
     378:	6f636e65 	svcvs	0x00636e65
     37c:	645f6564 	ldrbvs	r6, [pc], #-1380	; 384 <startup-0x1ffffc7c>
     380:	61747369 	cmnvs	r4, r9, ror #6
     384:	5f65636e 	svcpl	0x0065636e
     388:	666e6f63 	strbtvs	r6, [lr], -r3, ror #30
     38c:	43006769 	movwmi	r6, #1897	; 0x769
     390:	73552f3a 	cmpvc	r5, #58, 30	; 0xe8
     394:	2f737265 	svccs	0x00737265
     398:	6d616441 	cfstrdvs	mvd6, [r1, #-260]!	; 0xfffffefc
     39c:	6e4f2f74 	mcrvs	15, 2, r2, cr15, cr4, {3}
     3a0:	69724465 	ldmdbvs	r2!, {r0, r2, r5, r6, sl, lr}^
     3a4:	442f6576 	strtmi	r6, [pc], #-1398	; 3ac <startup-0x1ffffc54>
     3a8:	6d756b6f 	fldmdbxvs	r5!, {d22-d76}	;@ Deprecated
     3ac:	2f746e65 	svccs	0x00746e65
     3b0:	48746947 	ldmdami	r4!, {r0, r1, r2, r6, r8, fp, sp, lr}^
     3b4:	442f6275 	strtmi	r6, [pc], #-629	; 3bc <startup-0x1ffffc44>
     3b8:	39325441 	ldmdbcc	r2!, {r0, r6, sl, ip, lr}
     3bc:	614c2d30 	cmpvs	ip, r0, lsr sp
     3c0:	79736d72 	ldmdbvc	r3!, {r1, r4, r5, r6, r8, sl, fp, sp, lr}^
     3c4:	6d657473 	cfstrdvs	mvd7, [r5, #-460]!	; 0xfffffe34
     3c8:	646f6b2f 	strbtvs	r6, [pc], #-2863	; 3d0 <startup-0x1ffffc30>
     3cc:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
     3d0:	4e41432f 	cdpmi	3, 4, cr4, cr1, cr15, {1}
     3d4:	6f636e45 	svcvs	0x00636e45
     3d8:	65446564 	strbvs	r6, [r4, #-1380]	; 0xfffffa9c
     3dc:	65646f63 	strbvs	r6, [r4, #-3939]!	; 0xfffff09d
     3e0:	6500632e 	strvs	r6, [r0, #-814]	; 0xfffffcd2
     3e4:	646f636e 	strbtvs	r6, [pc], #-878	; 3ec <startup-0x1ffffc14>
     3e8:	65725f65 	ldrbvs	r5, [r2, #-3941]!	; 0xfffff09b
     3ec:	73657571 	cmnvc	r5, #473956352	; 0x1c400000
     3f0:	64695f74 	strbtvs	r5, [r9], #-3956	; 0xfffff08c
     3f4:	63656400 	cmnvs	r5, #0, 8
     3f8:	5f65646f 	svcpl	0x0065646f
     3fc:	76004449 	strvc	r4, [r0], -r9, asr #8
     400:	65756c61 	ldrbvs	r6, [r5, #-3169]!	; 0xfffff39f
     404:	7400315f 	strvc	r3, [r0], #-351	; 0xfffffea1
     408:	5f706d65 	svcpl	0x00706d65
     40c:	74006469 	strvc	r6, [r0], #-1129	; 0xfffffb97
     410:	5f656d69 	svcpl	0x00656d69
     414:	69740030 	ldmdbvs	r4!, {r4, r5}^
     418:	315f656d 	cmpcc	pc, sp, ror #10
     41c:	636e6500 	cmnvs	lr, #0, 10
     420:	5f65646f 	svcpl	0x0065646f
     424:	726f6f64 	rsbvc	r6, pc, #100, 30	; 0x190
     428:	72616c5f 	rsbvc	r6, r1, #24320	; 0x5f00
     42c:	736d5f6d 	cmnvc	sp, #436	; 0x1b4
     430:	50470067 	subpl	r0, r7, r7, rrx
     434:	535f4f49 	cmppl	pc, #292	; 0x124
     438:	64656570 	strbtvs	r6, [r5], #-1392	; 0xfffffa90
     43c:	4b434c00 	blmi	10d3444 <startup-0x1ef2cbbc>
     440:	50470052 	subpl	r0, r7, r2, asr r0
     444:	4d5f4f49 	ldclmi	15, cr4, [pc, #-292]	; 328 <startup-0x1ffffcd8>
     448:	5f65646f 	svcpl	0x0065646f
     44c:	47004641 	strmi	r4, [r0, -r1, asr #12]
     450:	5f4f4950 	svcpl	0x004f4950
     454:	64507550 	ldrbvs	r7, [r0], #-1360	; 0xfffffab0
     458:	574f445f 	smlsldpl	r4, pc, pc, r4	; <UNPREDICTABLE>
     45c:	5047004e 	subpl	r0, r7, lr, asr #32
     460:	4f5f4f49 	svcmi	0x005f4f49
     464:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0xfffff6ac
     468:	00444f5f 	subeq	r4, r4, pc, asr pc
     46c:	4f495047 	svcmi	0x00495047
     470:	776f4c5f 			; <UNDEFINED> instruction: 0x776f4c5f
     474:	6570535f 	ldrbvs	r5, [r0, #-863]!	; 0xfffffca1
     478:	47006465 	strmi	r6, [r0, -r5, ror #8]
     47c:	5f4f4950 	svcpl	0x004f4950
     480:	65646f4d 	strbvs	r6, [r4, #-3917]!	; 0xfffff0b3
     484:	004e415f 	subeq	r4, lr, pc, asr r1
     488:	45444f4d 	strbmi	r4, [r4, #-3917]	; 0xfffff0b3
     48c:	50470052 	subpl	r0, r7, r2, asr r0
     490:	4d5f4f49 	ldclmi	15, cr4, [pc, #-292]	; 374 <startup-0x1ffffc8c>
     494:	0065646f 	rsbeq	r6, r5, pc, ror #8
     498:	5059544f 	subspl	r5, r9, pc, asr #8
     49c:	69005245 	stmdbvs	r0, {r0, r2, r6, r9, ip, lr}
     4a0:	5f74696e 	svcpl	0x0074696e
     4a4:	4f495047 	svcmi	0x00495047
     4a8:	726f505f 	rsbvc	r5, pc, #95	; 0x5f
     4ac:	47007374 	smlsdxmi	r0, r4, r3, r7
     4b0:	5f4f4950 	svcpl	0x004f4950
     4b4:	65646f4d 	strbvs	r6, [r4, #-3917]!	; 0xfffff0b3
     4b8:	004e495f 	subeq	r4, lr, pc, asr r9
     4bc:	52525342 	subspl	r5, r2, #134217729	; 0x8000001
     4c0:	50470048 	subpl	r0, r7, r8, asr #32
     4c4:	485f4f49 	ldmdami	pc, {r0, r3, r6, r8, r9, sl, fp, lr}^	; <UNPREDICTABLE>
     4c8:	5f686769 	svcpl	0x00686769
     4cc:	65657053 	strbvs	r7, [r5, #-83]!	; 0xffffffad
     4d0:	50470064 	subpl	r0, r7, r4, rrx
     4d4:	505f4f49 	subspl	r4, pc, r9, asr #30
     4d8:	00645075 	rsbeq	r5, r4, r5, ror r0
     4dc:	4f495047 	svcmi	0x00495047
     4e0:	7361465f 	cmnvc	r1, #99614720	; 0x5f00000
     4e4:	70535f74 	subsvc	r5, r3, r4, ror pc
     4e8:	00646565 	rsbeq	r6, r4, r5, ror #10
     4ec:	4f495047 	svcmi	0x00495047
     4f0:	64654d5f 	strbtvs	r4, [r5], #-3423	; 0xfffff2a1
     4f4:	5f6d7569 	svcpl	0x006d7569
     4f8:	65657053 	strbvs	r7, [r5, #-83]!	; 0xffffffad
     4fc:	50470064 	subpl	r0, r7, r4, rrx
     500:	505f4f49 	subspl	r4, pc, r9, asr #30
     504:	5f645075 	svcpl	0x00645075
     508:	55504f4e 	ldrbpl	r4, [r0, #-3918]	; 0xfffff0b2
     50c:	47004c4c 	strmi	r4, [r0, -ip, asr #24]
     510:	534f4950 	movtpl	r4, #63824	; 0xf950
     514:	64656570 	strbtvs	r6, [r5], #-1392	; 0xfffffa90
     518:	7079545f 	rsbsvc	r5, r9, pc, asr r4
     51c:	66654465 	strbtvs	r4, [r5], -r5, ror #8
     520:	50534f00 	subspl	r4, r3, r0, lsl #30
     524:	52444545 	subpl	r4, r4, #289406976	; 0x11400000
     528:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
     52c:	79545f4f 	ldmdbvc	r4, {r0, r1, r2, r3, r6, r8, r9, sl, fp, ip, lr}^
     530:	65446570 	strbvs	r6, [r4, #-1392]	; 0xfffffa90
     534:	55500066 	ldrbpl	r0, [r0, #-102]	; 0xffffff9a
     538:	00524450 	subseq	r4, r2, r0, asr r4
     53c:	4f495047 	svcmi	0x00495047
     540:	79544f5f 	ldmdbvc	r4, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, lr}^
     544:	505f6570 	subspl	r6, pc, r0, ror r5	; <UNPREDICTABLE>
     548:	50470050 	subpl	r0, r7, r0, asr r0
     54c:	505f4f49 	subspl	r4, pc, r9, asr #30
     550:	5f645075 	svcpl	0x00645075
     554:	43005055 	movwmi	r5, #85	; 0x55
     558:	73552f3a 	cmpvc	r5, #58, 30	; 0xe8
     55c:	2f737265 	svccs	0x00737265
     560:	6d616441 	cfstrdvs	mvd6, [r1, #-260]!	; 0xfffffefc
     564:	6e4f2f74 	mcrvs	15, 2, r2, cr15, cr4, {3}
     568:	69724465 	ldmdbvs	r2!, {r0, r2, r5, r6, sl, lr}^
     56c:	442f6576 	strtmi	r6, [pc], #-1398	; 574 <startup-0x1ffffa8c>
     570:	6d756b6f 	fldmdbxvs	r5!, {d22-d76}	;@ Deprecated
     574:	2f746e65 	svccs	0x00746e65
     578:	48746947 	ldmdami	r4!, {r0, r1, r2, r6, r8, fp, sp, lr}^
     57c:	442f6275 	strtmi	r6, [pc], #-629	; 584 <startup-0x1ffffa7c>
     580:	39325441 	ldmdbcc	r2!, {r0, r6, sl, ip, lr}
     584:	614c2d30 	cmpvs	ip, r0, lsr sp
     588:	79736d72 	ldmdbvc	r3!, {r1, r4, r5, r6, r8, sl, fp, sp, lr}^
     58c:	6d657473 	cfstrdvs	mvd7, [r5, #-460]!	; 0xfffffe34
     590:	646f6b2f 	strbtvs	r6, [pc], #-2863	; 598 <startup-0x1ffffa68>
     594:	6f6f442f 	svcvs	0x006f442f
     598:	6e692f72 	mcrvs	15, 3, r2, cr9, cr2, {3}
     59c:	472e7469 	strmi	r7, [lr, -r9, ror #8]!
     5a0:	2e4f4950 			; <UNDEFINED> instruction: 0x2e4f4950
     5a4:	50470063 	subpl	r0, r7, r3, rrx
     5a8:	544f4f49 	strbpl	r4, [pc], #-3913	; 5b0 <startup-0x1ffffa50>
     5ac:	5f657079 	svcpl	0x00657079
     5b0:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0xfffff6ac
     5b4:	00666544 	rsbeq	r6, r6, r4, asr #10
     5b8:	4f495047 	svcmi	0x00495047
     5bc:	79544f5f 	ldmdbvc	r4, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, lr}^
     5c0:	47006570 	smlsdxmi	r0, r0, r5, r6
     5c4:	5f4f4950 	svcpl	0x004f4950
     5c8:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xfffff1b7
     5cc:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0xfffff6ac
     5d0:	00666544 	rsbeq	r6, r6, r4, asr #10
     5d4:	4f495047 	svcmi	0x00495047
     5d8:	64507550 	ldrbvs	r7, [r0], #-1360	; 0xfffffab0
     5dc:	7079545f 	rsbsvc	r5, r9, pc, asr r4
     5e0:	66654465 	strbtvs	r4, [r5], -r5, ror #8
     5e4:	52534200 	subspl	r4, r3, #0, 4
     5e8:	47004c52 	smlsdmi	r0, r2, ip, r4
     5ec:	5f4f4950 	svcpl	0x004f4950
     5f0:	006e6950 	rsbeq	r6, lr, r0, asr r9
     5f4:	4f495047 	svcmi	0x00495047
     5f8:	646f4d5f 	strbtvs	r4, [pc], #-3423	; 600 <startup-0x1ffffa00>
     5fc:	554f5f65 	strbpl	r5, [pc, #-3941]	; fffff69f <dissarmedBit+0xdfffb75f>
     600:	50470054 	subpl	r0, r7, r4, asr r0
     604:	6f4d4f49 	svcvs	0x004d4f49
     608:	545f6564 	ldrbpl	r6, [pc], #-1380	; 610 <startup-0x1ffff9f0>
     60c:	44657079 	strbtmi	r7, [r5], #-121	; 0xffffff87
     610:	6c006665 	stcvs	6, cr6, [r0], {101}	; 0x65
     614:	546d7261 	strbtpl	r7, [sp], #-609	; 0xfffffd9f
     618:	006b6369 	rsbeq	r6, fp, r9, ror #6
     61c:	4f495047 	svcmi	0x00495047
     620:	6165725f 	cmnvs	r5, pc, asr r2
     624:	6f630064 	svcvs	0x00630064
     628:	6f72746e 	svcvs	0x0072746e
     62c:	7469626c 	strbtvc	r6, [r9], #-620	; 0xfffffd94
     630:	69740073 	ldmdbvs	r4!, {r0, r1, r4, r5, r6}^
     634:	6c5f656d 	cfldr64vs	mvdx6, [pc], {109}	; 0x6d
     638:	006d7261 	rsbeq	r7, sp, r1, ror #4
     63c:	6f6f645f 	svcvs	0x006f645f
     640:	65640072 	strbvs	r0, [r4, #-114]!	; 0xffffff8e
     644:	0079616c 	rsbseq	r6, r9, ip, ror #2
     648:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
     64c:	5f707574 	svcpl	0x00707574
     650:	6867696c 	stmdavs	r7!, {r2, r3, r5, r6, r8, fp, sp, lr}^
     654:	69007374 	stmdbvs	r0, {r2, r4, r5, r6, r8, r9, ip, sp, lr}
     658:	6f645f73 	svcvs	0x00645f73
     65c:	615f726f 	cmpvs	pc, pc, ror #4
     660:	64656d72 	strbtvs	r6, [r5], #-3442	; 0xfffff28e
     664:	6e6f6300 	cdpvs	3, 6, cr6, cr15, cr0, {0}
     668:	6c6f7274 	sfmvs	f7, 2, [pc], #-464	; 4a0 <startup-0x1ffffb60>
     66c:	74746962 	ldrbtvc	r6, [r4], #-2402	; 0xfffff69e
     670:	4c610073 	stclmi	0, cr0, [r1], #-460	; 0xfffffe34
     674:	74676e65 	strbtvc	r6, [r7], #-3685	; 0xfffff19b
     678:	50470068 	subpl	r0, r7, r8, rrx
     67c:	745f4f49 	ldrbvc	r4, [pc], #-3913	; 684 <startup-0x1ffff97c>
     680:	00657079 	rsbeq	r7, r5, r9, ror r0
     684:	6f6f4461 	svcvs	0x006f4461
     688:	63007372 	movwvs	r7, #882	; 0x372
     68c:	6d72614c 	ldfvse	f6, [r2, #-304]!	; 0xfffffed0
     690:	72616c00 	rsbvc	r6, r1, #0, 24
     694:	676e696d 	strbvs	r6, [lr, -sp, ror #18]!
     698:	2f3a4300 	svccs	0x003a4300
     69c:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
     6a0:	64412f73 	strbvs	r2, [r1], #-3955	; 0xfffff08d
     6a4:	2f746d61 	svccs	0x00746d61
     6a8:	44656e4f 	strbtmi	r6, [r5], #-3663	; 0xfffff1b1
     6ac:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
     6b0:	6b6f442f 	blvs	1bd1774 <startup-0x1e42e88c>
     6b4:	6e656d75 	mcrvs	13, 3, r6, cr5, cr5, {3}
     6b8:	69472f74 	stmdbvs	r7, {r2, r4, r5, r6, r8, r9, sl, fp, sp}^
     6bc:	62754874 	rsbsvs	r4, r5, #116, 16	; 0x740000
     6c0:	5441442f 	strbpl	r4, [r1], #-1071	; 0xfffffbd1
     6c4:	2d303932 			; <UNDEFINED> instruction: 0x2d303932
     6c8:	6d72614c 	ldfvse	f6, [r2, #-304]!	; 0xfffffed0
     6cc:	74737973 	ldrbtvc	r7, [r3], #-2419	; 0xfffff68d
     6d0:	6b2f6d65 	blvs	bdbc6c <startup-0x1f424394>
     6d4:	442f646f 	strtmi	r6, [pc], #-1135	; 6dc <startup-0x1ffff924>
     6d8:	2f726f6f 	svccs	0x00726f6f
     6dc:	636e7566 	cmnvs	lr, #427819008	; 0x19800000
     6e0:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
     6e4:	00632e73 	rsbeq	r2, r3, r3, ror lr
     6e8:	656d6974 	strbvs	r6, [sp, #-2420]!	; 0xfffff68c
     6ec:	6e65635f 	mcrvs	3, 3, r6, cr5, cr15, {2}
     6f0:	6c617274 	sfmvs	f7, 2, [r1], #-464	; 0xfffffe30
     6f4:	72616c5f 	rsbvc	r6, r1, #24320	; 0x5f00
     6f8:	6974006d 	ldmdbvs	r4!, {r0, r2, r3, r5, r6}^
     6fc:	6d00656d 	cfstr32vs	mvfx6, [r0, #-436]	; 0xfffffe4c
     700:	00696c69 	rsbeq	r6, r9, r9, ror #24
     704:	726f6f64 	rsbvc	r6, pc, #100, 30	; 0x190
     708:	7070755f 	rsbsvc	r7, r0, pc, asr r5
     70c:	65746164 	ldrbvs	r6, [r4, #-356]!	; 0xfffffe9c
     710:	6d616c5f 	stclvs	12, cr6, [r1, #-380]!	; 0xfffffe84
     714:	61007370 	tstvs	r0, r0, ror r3
     718:	79617272 	stmdbvc	r1!, {r1, r4, r5, r6, r9, ip, sp, lr}^
     71c:	676e654c 	strbvs	r6, [lr, -ip, asr #10]!
     720:	47006874 	smlsdxmi	r0, r4, r8, r6
     724:	5f4f4950 	svcpl	0x004f4950
     728:	706d616c 	rsbvc	r6, sp, ip, ror #2
     72c:	72616c00 	rsbvc	r6, r1, #0, 24
     730:	6d69546d 	cfstrdvs	mvd5, [r9, #-436]!	; 0xfffffe4c
     734:	68630065 	stmdavs	r3!, {r0, r2, r5, r6}^
     738:	5f6b6365 	svcpl	0x006b6365
     73c:	726f6f64 	rsbvc	r6, pc, #100, 30	; 0x190
     740:	6174735f 	cmnvs	r4, pc, asr r3
     744:	00737574 	rsbseq	r7, r3, r4, ror r5
     748:	73736964 	cmnvc	r3, #100, 18	; 0x190000
     74c:	656d7261 	strbvs	r7, [sp, #-609]!	; 0xfffffd9f
     750:	74694264 	strbtvc	r4, [r9], #-612	; 0xfffffd9c
     754:	73617000 	cmnvc	r1, #0
     758:	726f7773 	rsbvc	r7, pc, #30146560	; 0x1cc0000
     75c:	41490064 	cmpmi	r9, r4, rrx
     760:	4e005242 	cdpmi	2, 0, cr5, cr0, cr2, {2}
     764:	5f434956 	svcpl	0x00434956
     768:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xfffff1b7
     76c:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0xfffff6ac
     770:	00666544 	rsbeq	r6, r6, r4, asr #10
     774:	4349564e 	movtmi	r5, #38478	; 0x964e
     778:	5152495f 	cmppl	r2, pc, asr r9
     77c:	6e616843 	cdpvs	8, 6, cr6, cr1, cr3, {2}
     780:	436c656e 	cmnmi	ip, #461373440	; 0x1b800000
     784:	5300646d 	movwpl	r6, #1133	; 0x46d
     788:	69547379 	ldmdbvs	r4, {r0, r3, r4, r5, r6, r8, r9, ip, sp, lr}^
     78c:	435f6b63 	cmpmi	pc, #101376	; 0x18c00
     790:	6f534b4c 	svcvs	0x00534b4c
     794:	65637275 	strbvs	r7, [r3, #-629]!	; 0xfffffd8b
     798:	49564e00 	ldmdbmi	r6, {r9, sl, fp, lr}^
     79c:	6e495f43 	cdpvs	15, 4, cr5, cr9, cr3, {2}
     7a0:	74537469 	ldrbvc	r7, [r3], #-1129	; 0xfffffb97
     7a4:	74637572 	strbtvc	r7, [r3], #-1394	; 0xfffffa8e
     7a8:	49564e00 	ldmdbmi	r6, {r9, sl, fp, lr}^
     7ac:	72505f43 	subsvc	r5, r0, #268	; 0x10c
     7b0:	69726f69 	ldmdbvs	r2!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
     7b4:	72477974 	subvc	r7, r7, #116, 18	; 0x1d0000
     7b8:	0070756f 	rsbseq	r7, r0, pc, ror #10
     7bc:	41464d4d 	cmpmi	r6, sp, asr #26
     7c0:	564e0052 			; <UNDEFINED> instruction: 0x564e0052
     7c4:	495f4349 	ldmdbmi	pc, {r0, r3, r6, r8, r9, lr}^	; <UNPREDICTABLE>
     7c8:	0074696e 	rsbseq	r6, r4, lr, ror #18
     7cc:	70706d74 	rsbsvc	r6, r0, r4, ror sp
     7d0:	43006572 	movwmi	r6, #1394	; 0x572
     7d4:	44495550 	strbmi	r5, [r9], #-1360	; 0xfffffab0
     7d8:	45534900 	ldrbmi	r4, [r3, #-2304]	; 0xfffff700
     7dc:	43530052 	cmpmi	r3, #82	; 0x52
     7e0:	79545f42 	ldmdbvc	r4, {r1, r6, r8, r9, sl, fp, ip, lr}^
     7e4:	4e006570 	cfrshl64mi	mvdx0, mvdx0, r6
     7e8:	74537765 	ldrbvc	r7, [r3], #-1893	; 0xfffff89b
     7ec:	00657461 	rsbeq	r7, r5, r1, ror #8
     7f0:	52495453 	subpl	r5, r9, #1392508928	; 0x53000000
     7f4:	53434900 	movtpl	r4, #14592	; 0x3900
     7f8:	53520052 	cmppl	r2, #82	; 0x52
     7fc:	45565245 	ldrbmi	r5, [r6, #-581]	; 0xfffffdbb
     800:	4f003144 	svcmi	0x00003144
     804:	65736666 	ldrbvs	r6, [r3, #-1638]!	; 0xfffff99a
     808:	46420074 			; <UNDEFINED> instruction: 0x46420074
     80c:	43005241 	movwmi	r5, #577	; 0x241
     810:	00525346 	subseq	r5, r2, r6, asr #6
     814:	43524941 	cmpmi	r2, #1064960	; 0x104000
     818:	54430052 	strbpl	r0, [r3], #-82	; 0xffffffae
     81c:	4e004c52 	mcrmi	12, 0, r4, cr0, cr2, {2}
     820:	5f434956 	svcpl	0x00434956
     824:	56746553 			; <UNDEFINED> instruction: 0x56746553
     828:	6f746365 	svcvs	0x00746365
     82c:	62615472 	rsbvs	r5, r1, #1912602624	; 0x72000000
     830:	4900656c 	stmdbmi	r0, {r2, r3, r5, r6, r8, sl, sp, lr}
     834:	00525043 	subseq	r5, r2, r3, asr #32
     838:	494c4143 	stmdbmi	ip, {r0, r1, r6, r8, lr}^
     83c:	48530042 	ldmdami	r3, {r1, r6}^
     840:	00525343 	subseq	r5, r2, r3, asr #6
     844:	52454349 	subpl	r4, r5, #603979777	; 0x24000001
     848:	706d7400 	rsbvc	r7, sp, r0, lsl #8
     84c:	00627573 	rsbeq	r7, r2, r3, ror r5
     850:	4349564e 	movtmi	r5, #38478	; 0x964e
     854:	7379535f 	cmnvc	r9, #2080374785	; 0x7c000001
     858:	4c6d6574 	cfstr64mi	mvdx6, [sp], #-464	; 0xfffffe30
     85c:	6e6f4350 	mcrvs	3, 3, r4, cr15, cr0, {2}
     860:	00676966 	rsbeq	r6, r7, r6, ror #18
     864:	54737953 	ldrbtpl	r7, [r3], #-2387	; 0xfffff6ad
     868:	5f6b6369 	svcpl	0x006b6369
     86c:	534b4c43 	movtpl	r4, #48195	; 0xbc43
     870:	6372756f 	cmnvs	r2, #465567744	; 0x1bc00000
     874:	6e6f4365 	cdpvs	3, 6, cr4, cr15, cr5, {3}
     878:	00676966 	rsbeq	r6, r7, r6, ror #18
     87c:	54737953 	ldrbtpl	r7, [r3], #-2387	; 0xfffff6ad
     880:	5f6b6369 	svcpl	0x006b6369
     884:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0xfffff6ac
     888:	706d7400 	rsbvc	r7, sp, r0, lsl #8
     88c:	6f697270 	svcvs	0x00697270
     890:	79746972 	ldmdbvc	r4!, {r1, r4, r5, r6, r8, fp, sp, lr}^
     894:	4f545600 	svcmi	0x00545600
     898:	53490052 	movtpl	r0, #36946	; 0x9052
     89c:	49005241 	stmdbmi	r0, {r0, r6, r9, ip, lr}
     8a0:	00525053 	subseq	r5, r2, r3, asr r0
     8a4:	52534644 	subspl	r4, r3, #68, 12	; 0x4400000
     8a8:	49564e00 	ldmdbmi	r6, {r9, sl, fp, lr}^
     8ac:	52495f43 	subpl	r5, r9, #268	; 0x10c
     8b0:	61684351 	cmnvs	r8, r1, asr r3
     8b4:	6c656e6e 	stclvs	14, cr6, [r5], #-440	; 0xfffffe48
     8b8:	49564e00 	ldmdbmi	r6, {r9, sl, fp, lr}^
     8bc:	52495f43 	subpl	r5, r9, #268	; 0x10c
     8c0:	61684351 	cmnvs	r8, r1, asr r3
     8c4:	6c656e6e 	stclvs	14, cr6, [r5], #-440	; 0xfffffe48
     8c8:	50627553 	rsbpl	r7, r2, r3, asr r5
     8cc:	726f6972 	rsbvc	r6, pc, #1867776	; 0x1c8000
     8d0:	00797469 	rsbseq	r7, r9, r9, ror #8
     8d4:	52534648 	subspl	r4, r3, #72, 12	; 0x4800000
     8d8:	464d4d00 	strbmi	r4, [sp], -r0, lsl #26
     8dc:	45520052 	ldrbmi	r0, [r2, #-82]	; 0xffffffae
     8e0:	56524553 			; <UNDEFINED> instruction: 0x56524553
     8e4:	00304445 	eorseq	r4, r0, r5, asr #8
     8e8:	45534552 	ldrbmi	r4, [r3, #-1362]	; 0xfffffaae
     8ec:	44455652 	strbmi	r5, [r5], #-1618	; 0xfffff9ae
     8f0:	45520032 	ldrbmi	r0, [r2, #-50]	; 0xffffffce
     8f4:	56524553 			; <UNDEFINED> instruction: 0x56524553
     8f8:	00334445 	eorseq	r4, r3, r5, asr #8
     8fc:	45534552 	ldrbmi	r4, [r3, #-1362]	; 0xfffffaae
     900:	44455652 	strbmi	r5, [r5], #-1618	; 0xfffff9ae
     904:	45520034 	ldrbmi	r0, [r2, #-52]	; 0xffffffcc
     908:	56524553 			; <UNDEFINED> instruction: 0x56524553
     90c:	00354445 	eorseq	r4, r5, r5, asr #8
     910:	4349564e 	movtmi	r5, #38478	; 0x964e
     914:	7079545f 	rsbsvc	r5, r9, pc, asr r4
     918:	564e0065 	strbpl	r0, [lr], -r5, rrx
     91c:	495f4349 	ldmdbmi	pc, {r0, r3, r6, r8, r9, lr}^	; <UNPREDICTABLE>
     920:	68435152 	stmdavs	r3, {r1, r4, r6, r8, ip, lr}^
     924:	656e6e61 	strbvs	r6, [lr, #-3681]!	; 0xfffff19f
     928:	6572506c 	ldrbvs	r5, [r2, #-108]!	; 0xffffff94
     92c:	74706d65 	ldrbtvc	r6, [r0], #-3429	; 0xfffff29b
     930:	506e6f69 	rsbpl	r6, lr, r9, ror #30
     934:	726f6972 	rsbvc	r6, pc, #1867776	; 0x1c8000
     938:	00797469 	rsbseq	r7, r9, r9, ror #8
     93c:	636e7546 	cmnvs	lr, #293601280	; 0x11800000
     940:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
     944:	74536c61 	ldrbvc	r6, [r3], #-3169	; 0xfffff39f
     948:	00657461 	rsbeq	r7, r5, r1, ror #8
     94c:	4349564e 	movtmi	r5, #38478	; 0x964e
     950:	6365565f 	cmnvs	r5, #99614720	; 0x5f00000
     954:	62615474 	rsbvs	r5, r1, #116, 8	; 0x74000000
     958:	414f4c00 	cmpmi	pc, r0, lsl #24
     95c:	3a430044 	bcc	10c0a74 <startup-0x1ef3f58c>
     960:	6573552f 	ldrbvs	r5, [r3, #-1327]!	; 0xfffffad1
     964:	412f7372 			; <UNDEFINED> instruction: 0x412f7372
     968:	746d6164 	strbtvc	r6, [sp], #-356	; 0xfffffe9c
     96c:	656e4f2f 	strbvs	r4, [lr, #-3887]!	; 0xfffff0d1
     970:	76697244 	strbtvc	r7, [r9], -r4, asr #4
     974:	6f442f65 	svcvs	0x00442f65
     978:	656d756b 	strbvs	r7, [sp, #-1387]!	; 0xfffffa95
     97c:	472f746e 	strmi	r7, [pc, -lr, ror #8]!
     980:	75487469 	strbvc	r7, [r8, #-1129]	; 0xfffffb97
     984:	41442f62 	cmpmi	r4, r2, ror #30
     988:	30393254 	eorscc	r3, r9, r4, asr r2
     98c:	72614c2d 	rsbvc	r4, r1, #11520	; 0x2d00
     990:	7379736d 	cmnvc	r9, #-1275068415	; 0xb4000001
     994:	2f6d6574 	svccs	0x006d6574
     998:	2f646f6b 	svccs	0x00646f6b
     99c:	2f62696c 	svccs	0x0062696c
     9a0:	334d5453 	movtcc	r5, #54355	; 0xd453
     9a4:	5f344632 	svcpl	0x00344632
     9a8:	2f62696c 	svccs	0x0062696c
     9ac:	334d5453 	movtcc	r5, #54355	; 0xd453
     9b0:	78344632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, lr}
     9b4:	74535f78 	ldrbvc	r5, [r3], #-3960	; 0xfffff088
     9b8:	72655064 	rsbvc	r5, r5, #100	; 0x64
     9bc:	5f687069 	svcpl	0x00687069
     9c0:	76697244 	strbtvc	r7, [r9], -r4, asr #4
     9c4:	732f7265 			; <UNDEFINED> instruction: 0x732f7265
     9c8:	6d2f6372 	stcvs	3, cr6, [pc, #-456]!	; 808 <startup-0x1ffff7f8>
     9cc:	2e637369 	cdpcs	3, 6, cr7, cr3, cr9, {3}
     9d0:	46410063 	strbmi	r0, [r1], -r3, rrx
     9d4:	4c005253 	sfmmi	f5, 4, [r0], {83}	; 0x53
     9d8:	6f50776f 	svcvs	0x0050776f
     9dc:	4d726577 	cfldr64mi	mvdx6, [r2, #-476]!	; 0xfffffe24
     9e0:	0065646f 	rsbeq	r6, r5, pc, ror #8
     9e4:	43415043 	movtmi	r5, #4163	; 0x1043
     9e8:	564e0052 			; <UNDEFINED> instruction: 0x564e0052
     9ec:	505f4349 	subspl	r4, pc, r9, asr #6
     9f0:	726f6972 	rsbvc	r6, pc, #1867776	; 0x1c8000
     9f4:	47797469 	ldrbmi	r7, [r9, -r9, ror #8]!
     9f8:	70756f72 	rsbsvc	r6, r5, r2, ror pc
     9fc:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
     a00:	43006769 	movwmi	r6, #1897	; 0x769
     a04:	5f314e41 	svcpl	0x00314e41
     a08:	5f305852 	svcpl	0x00305852
     a0c:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     a10:	44565000 	ldrbmi	r5, [r6], #-0
     a14:	5152495f 	cmppl	r2, pc, asr r9
     a18:	4143006e 	cmpmi	r3, lr, rrx
     a1c:	525f324e 	subspl	r3, pc, #-536870908	; 0xe0000004
     a20:	495f3058 	ldmdbmi	pc, {r3, r4, r6, ip, sp}^	; <UNPREDICTABLE>
     a24:	006e5152 	rsbeq	r5, lr, r2, asr r1
     a28:	314e4143 	cmpcc	lr, r3, asr #2
     a2c:	3158525f 	cmpcc	r8, pc, asr r2
     a30:	5152495f 	cmppl	r2, pc, asr r9
     a34:	3249006e 	subcc	r0, r9, #110	; 0x6e
     a38:	455f3343 	ldrbmi	r3, [pc, #-835]	; 6fd <startup-0x1ffff903>
     a3c:	52495f52 	subpl	r5, r9, #328	; 0x148
     a40:	49006e51 	stmdbmi	r0, {r0, r4, r6, r9, sl, fp, sp, lr}
     a44:	5f314332 	svcpl	0x00314332
     a48:	495f5645 	ldmdbmi	pc, {r0, r2, r6, r9, sl, ip, lr}^	; <UNPREDICTABLE>
     a4c:	006e5152 	rsbeq	r5, lr, r2, asr r1
     a50:	32414d44 	subcc	r4, r1, #68, 26	; 0x1100
     a54:	7274535f 	rsbsvc	r5, r4, #2080374785	; 0x7c000001
     a58:	356d6165 	strbcc	r6, [sp, #-357]!	; 0xfffffe9b
     a5c:	5152495f 	cmppl	r2, pc, asr r9
     a60:	5452006e 	ldrbpl	r0, [r2], #-110	; 0xffffff92
     a64:	6c415f43 	mcrrvs	15, 4, r5, r1, cr3
     a68:	5f6d7261 	svcpl	0x006d7261
     a6c:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     a70:	43324900 	teqmi	r2, #0, 18
     a74:	52455f32 	subpl	r5, r5, #50, 30	; 0xc8
     a78:	5152495f 	cmppl	r2, pc, asr r9
     a7c:	4954006e 	ldmdbmi	r4, {r1, r2, r3, r5, r6}^
     a80:	495f344d 	ldmdbmi	pc, {r0, r2, r3, r6, sl, ip, sp}^	; <UNPREDICTABLE>
     a84:	006e5152 	rsbeq	r5, lr, r2, asr r1
     a88:	5f435452 	svcpl	0x00435452
     a8c:	50554b57 	subspl	r4, r5, r7, asr fp
     a90:	5152495f 	cmppl	r2, pc, asr r9
     a94:	5757006e 	ldrbpl	r0, [r7, -lr, rrx]
     a98:	495f4744 	ldmdbmi	pc, {r2, r6, r8, r9, sl, lr}^	; <UNPREDICTABLE>
     a9c:	006e5152 	rsbeq	r5, lr, r2, asr r1
     aa0:	4f494453 	svcmi	0x00494453
     aa4:	5152495f 	cmppl	r2, pc, asr r9
     aa8:	5355006e 	cmppl	r5, #110	; 0x6e
     aac:	31545241 	cmpcc	r4, r1, asr #4
     ab0:	5152495f 	cmppl	r2, pc, asr r9
     ab4:	6173006e 	cmnvs	r3, lr, rrx
     ab8:	4e797466 	cdpmi	4, 7, cr7, cr9, cr6, {3}
     abc:	6e006d75 	mcrvs	13, 0, r6, cr0, cr5, {3}
     ac0:	615f6d75 	cmpvs	pc, r5, ror sp	; <UNPREDICTABLE>
     ac4:	76697463 	strbtvc	r7, [r9], -r3, ror #8
     ac8:	6f645f65 	svcvs	0x00645f65
     acc:	0073726f 	rsbseq	r7, r3, pc, ror #4
     ad0:	69746361 	ldmdbvs	r4!, {r0, r5, r6, r8, r9, sp, lr}^
     ad4:	645f6576 	ldrbvs	r6, [pc], #-1398	; adc <startup-0x1ffff524>
     ad8:	73726f6f 	cmnvc	r2, #444	; 0x1bc
     adc:	6464615f 	strbtvs	r6, [r4], #-351	; 0xfffffea1
     ae0:	6f6f645f 	svcvs	0x006f645f
     ae4:	44007372 	strmi	r7, [r0], #-882	; 0xfffffc8e
     ae8:	5f32414d 	svcpl	0x0032414d
     aec:	65727453 	ldrbvs	r7, [r2, #-1107]!	; 0xfffffbad
     af0:	5f366d61 	svcpl	0x00366d61
     af4:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     af8:	43324900 	teqmi	r2, #0, 18
     afc:	56455f32 			; <UNDEFINED> instruction: 0x56455f32
     b00:	5152495f 	cmppl	r2, pc, asr r9
     b04:	7473006e 	ldrbtvc	r0, [r3], #-110	; 0xffffff92
     b08:	75747261 	ldrbvc	r7, [r4, #-609]!	; 0xfffffd9f
     b0c:	4d440070 	stclmi	0, cr0, [r4, #-448]	; 0xfffffe40
     b10:	535f3141 	cmppl	pc, #1073741840	; 0x40000010
     b14:	61657274 	smcvs	22308	; 0x5724
     b18:	495f356d 	ldmdbmi	pc, {r0, r2, r3, r5, r6, r8, sl, ip, sp}^	; <UNPREDICTABLE>
     b1c:	006e5152 	rsbeq	r5, lr, r2, asr r1
     b20:	49545845 	ldmdbmi	r4, {r0, r2, r6, fp, ip, lr}^
     b24:	5f355f39 	svcpl	0x00355f39
     b28:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     b2c:	73797300 	cmnvc	r9, #0, 6
     b30:	6b636974 	blvs	18db108 <startup-0x1e724ef8>
     b34:	696e495f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, lr}^
     b38:	54450074 	strbpl	r0, [r5], #-116	; 0xffffff8c
     b3c:	4b575f48 	blmi	15d8864 <startup-0x1ea2779c>
     b40:	495f5055 	ldmdbmi	pc, {r0, r2, r4, r6, ip, lr}^	; <UNPREDICTABLE>
     b44:	006e5152 	rsbeq	r5, lr, r2, asr r1
     b48:	364d4954 			; <UNDEFINED> instruction: 0x364d4954
     b4c:	4341445f 	movtmi	r4, #5215	; 0x145f
     b50:	5152495f 	cmppl	r2, pc, asr r9
     b54:	4155006e 	cmpmi	r5, lr, rrx
     b58:	5f345452 	svcpl	0x00345452
     b5c:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     b60:	47544f00 	ldrbmi	r4, [r4, -r0, lsl #30]
     b64:	5f53465f 	svcpl	0x0053465f
     b68:	50554b57 	subspl	r4, r5, r7, asr fp
     b6c:	5152495f 	cmppl	r2, pc, asr r9
     b70:	6550006e 	ldrbvs	r0, [r0, #-110]	; 0xffffff92
     b74:	5653646e 	ldrbpl	r6, [r3], -lr, ror #8
     b78:	5152495f 	cmppl	r2, pc, asr r9
     b7c:	4954006e 	ldmdbmi	r4, {r1, r2, r3, r5, r6}^
     b80:	555f384d 	ldrbpl	r3, [pc, #-2125]	; 33b <startup-0x1ffffcc5>
     b84:	49545f50 	ldmdbmi	r4, {r4, r6, r8, r9, sl, fp, ip, lr}^
     b88:	5f33314d 	svcpl	0x0033314d
     b8c:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     b90:	73754200 	cmnvc	r5, #0, 4
     b94:	6c756146 	ldfvse	f6, [r5], #-280	; 0xfffffee8
     b98:	52495f74 	subpl	r5, r9, #116, 30	; 0x1d0
     b9c:	72006e51 	andvc	r6, r0, #1296	; 0x510
     ba0:	72757465 	rsbsvc	r7, r5, #1694498816	; 0x65000000
     ba4:	646f436e 	strbtvs	r4, [pc], #-878	; bac <startup-0x1ffff454>
     ba8:	4d440065 	stclmi	0, cr0, [r4, #-404]	; 0xfffffe6c
     bac:	535f3241 	cmppl	pc, #268435460	; 0x10000004
     bb0:	61657274 	smcvs	22308	; 0x5724
     bb4:	495f376d 	ldmdbmi	pc, {r0, r2, r3, r5, r6, r8, r9, sl, ip, sp}^	; <UNPREDICTABLE>
     bb8:	006e5152 	rsbeq	r5, lr, r2, asr r1
     bbc:	494d4344 	stmdbmi	sp, {r2, r6, r8, r9, lr}^
     bc0:	5152495f 	cmppl	r2, pc, asr r9
     bc4:	4d44006e 	stclmi	0, cr0, [r4, #-440]	; 0xfffffe48
     bc8:	535f3141 	cmppl	pc, #1073741840	; 0x40000010
     bcc:	61657274 	smcvs	22308	; 0x5724
     bd0:	495f336d 	ldmdbmi	pc, {r0, r2, r3, r5, r6, r8, r9, ip, sp}^	; <UNPREDICTABLE>
     bd4:	006e5152 	rsbeq	r5, lr, r2, asr r1
     bd8:	31414d44 	cmpcc	r1, r4, asr #26
     bdc:	7274535f 	rsbsvc	r5, r4, #2080374785	; 0x7c000001
     be0:	366d6165 	strbtcc	r6, [sp], -r5, ror #2
     be4:	5152495f 	cmppl	r2, pc, asr r9
     be8:	654d006e 	strbvs	r0, [sp, #-110]	; 0xffffff92
     bec:	79726f6d 	ldmdbvc	r2!, {r0, r2, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
     bf0:	616e614d 	cmnvs	lr, sp, asr #2
     bf4:	656d6567 	strbvs	r6, [sp, #-1383]!	; 0xfffffa99
     bf8:	495f746e 	ldmdbmi	pc, {r1, r2, r3, r5, r6, sl, ip, sp, lr}^	; <UNPREDICTABLE>
     bfc:	006e5152 	rsbeq	r5, lr, r2, asr r1
     c00:	33433249 	movtcc	r3, #12873	; 0x3249
     c04:	5f56455f 	svcpl	0x0056455f
     c08:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     c0c:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
     c10:	43435f31 	movtmi	r5, #16177	; 0x3f31
     c14:	5152495f 	cmppl	r2, pc, asr r9
     c18:	5653006e 	ldrbpl	r0, [r3], -lr, rrx
     c1c:	6c6c6143 	stfvse	f6, [ip], #-268	; 0xfffffef4
     c20:	5152495f 	cmppl	r2, pc, asr r9
     c24:	4d44006e 	stclmi	0, cr0, [r4, #-440]	; 0xfffffe48
     c28:	535f3241 	cmppl	pc, #268435460	; 0x10000004
     c2c:	61657274 	smcvs	22308	; 0x5724
     c30:	495f326d 	ldmdbmi	pc, {r0, r2, r3, r5, r6, r9, ip, sp}^	; <UNPREDICTABLE>
     c34:	006e5152 	rsbeq	r5, lr, r2, asr r1
     c38:	314e4143 	cmpcc	lr, r3, asr #2
     c3c:	5f58545f 	svcpl	0x0058545f
     c40:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     c44:	54584500 	ldrbpl	r4, [r8], #-1280	; 0xfffffb00
     c48:	5f353149 	svcpl	0x00353149
     c4c:	495f3031 	ldmdbmi	pc, {r0, r4, r5, ip, sp}^	; <UNPREDICTABLE>
     c50:	006e5152 	rsbeq	r5, lr, r2, asr r1
     c54:	31495053 	qdaddcc	r5, r3, r9
     c58:	5152495f 	cmppl	r2, pc, asr r9
     c5c:	4d44006e 	stclmi	0, cr0, [r4, #-440]	; 0xfffffe48
     c60:	535f3141 	cmppl	pc, #1073741840	; 0x40000010
     c64:	61657274 	smcvs	22308	; 0x5724
     c68:	495f316d 	ldmdbmi	pc, {r0, r2, r3, r5, r6, r8, ip, sp}^	; <UNPREDICTABLE>
     c6c:	006e5152 	rsbeq	r5, lr, r2, asr r1
     c70:	4349564e 	movtmi	r5, #38478	; 0x964e
     c74:	7465535f 	strbtvc	r5, [r5], #-863	; 0xfffffca1
     c78:	6f697250 	svcvs	0x00697250
     c7c:	79746972 	ldmdbvc	r4!, {r1, r4, r5, r6, r8, fp, sp, lr}^
     c80:	4e414300 	cdpmi	3, 4, cr4, cr1, cr0, {0}
     c84:	58525f32 	ldmdapl	r2, {r1, r4, r5, r8, r9, sl, fp, ip, lr}^
     c88:	52495f31 	subpl	r5, r9, #49, 30	; 0xc4
     c8c:	54006e51 	strpl	r6, [r0], #-3665	; 0xfffff1af
     c90:	5f384d49 	svcpl	0x00384d49
     c94:	5f4b5242 	svcpl	0x004b5242
     c98:	314d4954 	cmpcc	sp, r4, asr r9
     c9c:	52495f32 	subpl	r5, r9, #50, 30	; 0xc8
     ca0:	53006e51 	movwpl	r6, #3665	; 0xe51
     ca4:	69547379 	ldmdbvs	r4, {r0, r3, r4, r5, r6, r8, r9, ip, sp, lr}^
     ca8:	495f6b63 	ldmdbmi	pc, {r0, r1, r5, r6, r8, r9, fp, sp, lr}^	; <UNPREDICTABLE>
     cac:	006e5152 	rsbeq	r5, lr, r2, asr r1
     cb0:	67617355 			; <UNDEFINED> instruction: 0x67617355
     cb4:	75614665 	strbvc	r4, [r1, #-1637]!	; 0xfffff99b
     cb8:	495f746c 	ldmdbmi	pc, {r2, r3, r5, r6, sl, ip, sp, lr}^	; <UNPREDICTABLE>
     cbc:	006e5152 	rsbeq	r5, lr, r2, asr r1
     cc0:	384d4954 	stmdacc	sp, {r2, r4, r6, r8, fp, lr}^
     cc4:	4752545f 			; <UNDEFINED> instruction: 0x4752545f
     cc8:	4d4f435f 	stclmi	3, cr4, [pc, #-380]	; b54 <startup-0x1ffff4ac>
     ccc:	4d49545f 	cfstrdmi	mvd5, [r9, #-380]	; 0xfffffe84
     cd0:	495f3431 	ldmdbmi	pc, {r0, r4, r5, sl, ip, sp}^	; <UNPREDICTABLE>
     cd4:	006e5152 	rsbeq	r5, lr, r2, asr r1
     cd8:	5f485445 	svcpl	0x00485445
     cdc:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     ce0:	2f3a4300 	svccs	0x003a4300
     ce4:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
     ce8:	64412f73 	strbvs	r2, [r1], #-3955	; 0xfffff08d
     cec:	2f746d61 	svccs	0x00746d61
     cf0:	44656e4f 	strbtmi	r6, [r5], #-3663	; 0xfffff1b1
     cf4:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
     cf8:	6b6f442f 	blvs	1bd1dbc <startup-0x1e42e244>
     cfc:	6e656d75 	mcrvs	13, 3, r6, cr5, cr5, {3}
     d00:	69472f74 	stmdbvs	r7, {r2, r4, r5, r6, r8, r9, sl, fp, sp}^
     d04:	62754874 	rsbsvs	r4, r5, #116, 16	; 0x740000
     d08:	5441442f 	strbpl	r4, [r1], #-1071	; 0xfffffbd1
     d0c:	2d303932 			; <UNDEFINED> instruction: 0x2d303932
     d10:	6d72614c 	ldfvse	f6, [r2, #-304]!	; 0xfffffed0
     d14:	74737973 	ldrbtvc	r7, [r3], #-2419	; 0xfffff68d
     d18:	6b2f6d65 	blvs	bdc2b4 <startup-0x1f423d4c>
     d1c:	442f646f 	strtmi	r6, [pc], #-1135	; d24 <startup-0x1ffff2dc>
     d20:	2f726f6f 	svccs	0x00726f6f
     d24:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
     d28:	2e707574 	mrccs	5, 3, r7, cr0, cr4, {3}
     d2c:	49540063 	ldmdbmi	r4, {r0, r1, r5, r6}^
     d30:	555f314d 	ldrbpl	r3, [pc, #-333]	; beb <startup-0x1ffff415>
     d34:	49545f50 	ldmdbmi	r4, {r4, r6, r8, r9, sl, fp, ip, lr}^
     d38:	5f30314d 	svcpl	0x0030314d
     d3c:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     d40:	63697400 	cmnvs	r9, #0, 8
     d44:	4400736b 	strmi	r7, [r0], #-875	; 0xfffffc95
     d48:	5f32414d 	svcpl	0x0032414d
     d4c:	65727453 	ldrbvs	r7, [r2, #-1107]!	; 0xfffffbad
     d50:	5f336d61 	svcpl	0x00336d61
     d54:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     d58:	414d4400 	cmpmi	sp, r0, lsl #8
     d5c:	74535f31 	ldrbvc	r5, [r3], #-3889	; 0xfffff0cf
     d60:	6d616572 	cfstr64vs	mvdx6, [r1, #-456]!	; 0xfffffe38
     d64:	52495f34 	subpl	r5, r9, #52, 30	; 0xd0
     d68:	55006e51 	strpl	r6, [r0, #-3665]	; 0xfffff1af
     d6c:	54524153 	ldrbpl	r4, [r2], #-339	; 0xfffffead
     d70:	52495f36 	subpl	r5, r9, #54, 30	; 0xd8
     d74:	54006e51 	strpl	r6, [r0], #-3665	; 0xfffff1af
     d78:	5f354d49 	svcpl	0x00354d49
     d7c:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     d80:	54584500 	ldrbpl	r4, [r8], #-1280	; 0xfffffb00
     d84:	495f3349 	ldmdbmi	pc, {r0, r3, r6, r8, r9, ip, sp}^	; <UNPREDICTABLE>
     d88:	006e5152 	rsbeq	r5, lr, r2, asr r1
     d8c:	32495053 	subcc	r5, r9, #83	; 0x53
     d90:	5152495f 	cmppl	r2, pc, asr r9
     d94:	4d44006e 	stclmi	0, cr0, [r4, #-440]	; 0xfffffe48
     d98:	535f3141 	cmppl	pc, #1073741840	; 0x40000010
     d9c:	61657274 	smcvs	22308	; 0x5724
     da0:	495f326d 	ldmdbmi	pc, {r0, r2, r3, r5, r6, r9, ip, sp}^	; <UNPREDICTABLE>
     da4:	006e5152 	rsbeq	r5, lr, r2, asr r1
     da8:	324e4143 	subcc	r4, lr, #-1073741808	; 0xc0000010
     dac:	5f58545f 	svcpl	0x0058545f
     db0:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     db4:	47544f00 	ldrbmi	r4, [r4, -r0, lsl #30]
     db8:	5f53465f 	svcpl	0x0053465f
     dbc:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     dc0:	47544f00 	ldrbmi	r4, [r4, -r0, lsl #30]
     dc4:	5f53485f 	svcpl	0x0053485f
     dc8:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     dcc:	49505300 	ldmdbmi	r0, {r8, r9, ip, lr}^
     dd0:	52495f33 	subpl	r5, r9, #51, 30	; 0xcc
     dd4:	44006e51 	strmi	r6, [r0], #-3665	; 0xfffff1af
     dd8:	5f32414d 	svcpl	0x0032414d
     ddc:	65727453 	ldrbvs	r7, [r2, #-1107]!	; 0xfffffbad
     de0:	5f346d61 	svcpl	0x00346d61
     de4:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     de8:	4d534600 	ldclmi	6, cr4, [r3, #-0]
     dec:	52495f43 	subpl	r5, r9, #268	; 0x10c
     df0:	54006e51 	strpl	r6, [r0], #-3665	; 0xfffff1af
     df4:	5f314d49 	svcpl	0x00314d49
     df8:	5f4b5242 	svcpl	0x004b5242
     dfc:	394d4954 	stmdbcc	sp, {r2, r4, r6, r8, fp, lr}^
     e00:	5152495f 	cmppl	r2, pc, asr r9
     e04:	5845006e 	stmdapl	r5, {r1, r2, r3, r5, r6}^
     e08:	5f344954 	svcpl	0x00344954
     e0c:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     e10:	53414800 	movtpl	r4, #6144	; 0x1800
     e14:	4e525f48 	cdpmi	15, 5, cr5, cr2, cr8, {2}
     e18:	52495f47 	subpl	r5, r9, #284	; 0x11c
     e1c:	55006e51 	strpl	r6, [r0, #-3665]	; 0xfffff1af
     e20:	35545241 	ldrbcc	r5, [r4, #-577]	; 0xfffffdbf
     e24:	5152495f 	cmppl	r2, pc, asr r9
     e28:	4954006e 	ldmdbmi	r4, {r1, r2, r3, r5, r6}^
     e2c:	545f314d 	ldrbpl	r3, [pc], #-333	; e34 <startup-0x1ffff1cc>
     e30:	435f4752 	cmpmi	pc, #21495808	; 0x1480000
     e34:	545f4d4f 	ldrbpl	r4, [pc], #-3407	; e3c <startup-0x1ffff1c4>
     e38:	31314d49 	teqcc	r1, r9, asr #26
     e3c:	5152495f 	cmppl	r2, pc, asr r9
     e40:	5845006e 	stmdapl	r5, {r1, r2, r3, r5, r6}^
     e44:	5f324954 	svcpl	0x00324954
     e48:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     e4c:	414c4600 	cmpmi	ip, r0, lsl #12
     e50:	495f4853 	ldmdbmi	pc, {r0, r1, r4, r6, fp, lr}^	; <UNPREDICTABLE>
     e54:	006e5152 	rsbeq	r5, lr, r2, asr r1
     e58:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     e5c:	7079545f 	rsbsvc	r5, r9, pc, asr r4
     e60:	53550065 	cmppl	r5, #101	; 0x65
     e64:	32545241 	subscc	r5, r4, #268435460	; 0x10000004
     e68:	5152495f 	cmppl	r2, pc, asr r9
     e6c:	7953006e 	ldmdbvc	r3, {r1, r2, r3, r5, r6}^
     e70:	63695473 	cmnvs	r9, #1929379840	; 0x73000000
     e74:	61485f6b 	cmpvs	r8, fp, ror #30
     e78:	656c646e 	strbvs	r6, [ip, #-1134]!	; 0xfffffb92
     e7c:	544f0072 	strbpl	r0, [pc], #-114	; e84 <startup-0x1ffff17c>
     e80:	53485f47 	movtpl	r5, #36679	; 0x8f47
     e84:	3150455f 	cmpcc	r0, pc, asr r5
     e88:	54554f5f 	ldrbpl	r4, [r5], #-3935	; 0xfffff0a1
     e8c:	5152495f 	cmppl	r2, pc, asr r9
     e90:	4d44006e 	stclmi	0, cr0, [r4, #-440]	; 0xfffffe48
     e94:	535f3141 	cmppl	pc, #1073741840	; 0x40000010
     e98:	61657274 	smcvs	22308	; 0x5724
     e9c:	495f376d 	ldmdbmi	pc, {r0, r2, r3, r5, r6, r8, r9, sl, ip, sp}^	; <UNPREDICTABLE>
     ea0:	006e5152 	rsbeq	r5, lr, r2, asr r1
     ea4:	50595243 	subspl	r5, r9, r3, asr #4
     ea8:	5152495f 	cmppl	r2, pc, asr r9
     eac:	4954006e 	ldmdbmi	r4, {r1, r2, r3, r5, r6}^
     eb0:	435f384d 	cmpmi	pc, #5046272	; 0x4d0000
     eb4:	52495f43 	subpl	r5, r9, #268	; 0x10c
     eb8:	54006e51 	strpl	r6, [r0], #-3665	; 0xfffff1af
     ebc:	5f374d49 	svcpl	0x00374d49
     ec0:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     ec4:	47544f00 	ldrbmi	r4, [r4, -r0, lsl #30]
     ec8:	5f53485f 	svcpl	0x0053485f
     ecc:	5f315045 	svcpl	0x00315045
     ed0:	495f4e49 	ldmdbmi	pc, {r0, r3, r6, r9, sl, fp, lr}^	; <UNPREDICTABLE>
     ed4:	006e5152 	rsbeq	r5, lr, r2, asr r1
     ed8:	4d6e6f4e 	stclmi	15, cr6, [lr, #-312]!	; 0xfffffec8
     edc:	616b7361 	cmnvs	fp, r1, ror #6
     ee0:	49656c62 	stmdbmi	r5!, {r1, r5, r6, sl, fp, sp, lr}^
     ee4:	495f746e 	ldmdbmi	pc, {r1, r2, r3, r5, r6, sl, ip, sp, lr}^	; <UNPREDICTABLE>
     ee8:	006e5152 	rsbeq	r5, lr, r2, asr r1
     eec:	54737953 	ldrbtpl	r7, [r3], #-2387	; 0xfffff6ad
     ef0:	5f6b6369 	svcpl	0x006b6369
     ef4:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
     ef8:	54006769 	strpl	r6, [r0], #-1897	; 0xfffff897
     efc:	5f504d41 	svcpl	0x00504d41
     f00:	4d415453 	cfstrdmi	mvd5, [r1, #-332]	; 0xfffffeb4
     f04:	52495f50 	subpl	r5, r9, #80, 30	; 0x140
     f08:	44006e51 	strmi	r6, [r0], #-3665	; 0xfffff1af
     f0c:	67756265 	ldrbvs	r6, [r5, -r5, ror #4]!
     f10:	696e6f4d 	stmdbvs	lr!, {r0, r2, r3, r6, r8, r9, sl, fp, sp, lr}^
     f14:	5f726f74 	svcpl	0x00726f74
     f18:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     f1c:	414d4400 	cmpmi	sp, r0, lsl #8
     f20:	74535f32 	ldrbvc	r5, [r3], #-3890	; 0xfffff0ce
     f24:	6d616572 	cfstr64vs	mvdx6, [r1, #-456]!	; 0xfffffe38
     f28:	52495f30 	subpl	r5, r9, #48, 30	; 0xc0
     f2c:	55006e51 	strpl	r6, [r0, #-3665]	; 0xfffff1af
     f30:	54524153 	ldrbpl	r4, [r2], #-339	; 0xfffffead
     f34:	52495f33 	subpl	r5, r9, #51, 30	; 0xcc
     f38:	54006e51 	strpl	r6, [r0], #-3665	; 0xfffff1af
     f3c:	5f324d49 	svcpl	0x00324d49
     f40:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     f44:	54584500 	ldrbpl	r4, [r8], #-1280	; 0xfffffb00
     f48:	495f3049 	ldmdbmi	pc, {r0, r3, r6, ip, sp}^	; <UNPREDICTABLE>
     f4c:	006e5152 	rsbeq	r5, lr, r2, asr r1
     f50:	4f495047 	svcmi	0x00495047
     f54:	6e69505f 	mcrvs	0, 3, r5, cr9, cr15, {2}
     f58:	50460073 	subpl	r0, r6, r3, ror r0
     f5c:	52495f55 	subpl	r5, r9, #340	; 0x154
     f60:	49006e51 	stmdbmi	r0, {r0, r4, r6, r9, sl, fp, sp, lr}
     f64:	5f314332 	svcpl	0x00314332
     f68:	495f5245 	ldmdbmi	pc, {r0, r2, r6, r9, ip, lr}^	; <UNPREDICTABLE>
     f6c:	006e5152 	rsbeq	r5, lr, r2, asr r1
     f70:	5f434441 	svcpl	0x00434441
     f74:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     f78:	414d4400 	cmpmi	sp, r0, lsl #8
     f7c:	74535f32 	ldrbvc	r5, [r3], #-3890	; 0xfffff0ce
     f80:	6d616572 	cfstr64vs	mvdx6, [r1, #-456]!	; 0xfffffe38
     f84:	52495f31 	subpl	r5, r9, #49, 30	; 0xc4
     f88:	6d006e51 	stcvs	14, cr6, [r0, #-324]	; 0xfffffebc
     f8c:	006e6961 	rsbeq	r6, lr, r1, ror #18
     f90:	756f6d61 	strbvc	r6, [pc, #-3425]!	; 237 <startup-0x1ffffdc9>
     f94:	664f746e 	strbvs	r7, [pc], -lr, ror #8
     f98:	69746341 	ldmdbvs	r4!, {r0, r6, r8, r9, sp, lr}^
     f9c:	6f446576 	svcvs	0x00446576
     fa0:	0073726f 	rsbseq	r7, r3, pc, ror #4
     fa4:	314e4143 	cmpcc	lr, r3, asr #2
     fa8:	4543535f 	strbmi	r5, [r3, #-863]	; 0xfffffca1
     fac:	5152495f 	cmppl	r2, pc, asr r9
     fb0:	4143006e 	cmpmi	r3, lr, rrx
     fb4:	535f324e 	cmppl	pc, #-536870908	; 0xe0000004
     fb8:	495f4543 	ldmdbmi	pc, {r0, r1, r6, r8, sl, lr}^	; <UNPREDICTABLE>
     fbc:	006e5152 	rsbeq	r5, lr, r2, asr r1
     fc0:	5f434352 	svcpl	0x00434352
     fc4:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     fc8:	47544f00 	ldrbmi	r4, [r4, -r0, lsl #30]
     fcc:	5f53485f 	svcpl	0x0053485f
     fd0:	50554b57 	subspl	r4, r5, r7, asr fp
     fd4:	5152495f 	cmppl	r2, pc, asr r9
     fd8:	4954006e 	ldmdbmi	r4, {r1, r2, r3, r5, r6}^
     fdc:	495f334d 	ldmdbmi	pc, {r0, r2, r3, r6, r8, r9, ip, sp}^	; <UNPREDICTABLE>
     fe0:	006e5152 	rsbeq	r5, lr, r2, asr r1
     fe4:	49545845 	ldmdbmi	r4, {r0, r2, r6, fp, ip, lr}^
     fe8:	52495f31 	subpl	r5, r9, #49, 30	; 0xc4
     fec:	44006e51 	strmi	r6, [r0], #-3665	; 0xfffff1af
     ff0:	5f31414d 	svcpl	0x0031414d
     ff4:	65727453 	ldrbvs	r7, [r2, #-1107]!	; 0xfffffbad
     ff8:	5f306d61 	svcpl	0x00306d61
     ffc:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
    1000:	474e5200 	strbmi	r5, [lr, -r0, lsl #4]
    1004:	0054495f 	subseq	r4, r4, pc, asr r9
    1008:	5f474e52 	svcpl	0x00474e52
    100c:	6f435449 	svcvs	0x00435449
    1010:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    1014:	474e5200 	strbmi	r5, [lr, -r0, lsl #4]
    1018:	646d435f 	strbtvs	r4, [sp], #-863	; 0xfffffca1
    101c:	474e5200 	strbmi	r5, [lr, -r0, lsl #4]
    1020:	7465475f 	strbtvc	r4, [r5], #-1887	; 0xfffff8a1
    1024:	646e6152 	strbtvs	r6, [lr], #-338	; 0xfffffeae
    1028:	754e6d6f 	strbvc	r6, [lr, #-3439]	; 0xfffff291
    102c:	7265626d 	rsbvc	r6, r5, #-805306362	; 0xd0000006
    1030:	474e5200 	strbmi	r5, [lr, -r0, lsl #4]
    1034:	4965445f 	stmdbmi	r5!, {r0, r1, r2, r3, r4, r6, sl, lr}^
    1038:	0074696e 	rsbseq	r6, r4, lr, ror #18
    103c:	5f474e52 	svcpl	0x00474e52
    1040:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0xfffff6ac
    1044:	00666544 	rsbeq	r6, r6, r4, asr #10
    1048:	552f3a43 	strpl	r3, [pc, #-2627]!	; 60d <startup-0x1ffff9f3>
    104c:	73726573 	cmnvc	r2, #482344960	; 0x1cc00000
    1050:	6164412f 	cmnvs	r4, pc, lsr #2
    1054:	4f2f746d 	svcmi	0x002f746d
    1058:	7244656e 	subvc	r6, r4, #461373440	; 0x1b800000
    105c:	2f657669 	svccs	0x00657669
    1060:	756b6f44 	strbvc	r6, [fp, #-3908]!	; 0xfffff0bc
    1064:	746e656d 	strbtvc	r6, [lr], #-1389	; 0xfffffa93
    1068:	7469472f 	strbtvc	r4, [r9], #-1839	; 0xfffff8d1
    106c:	2f627548 	svccs	0x00627548
    1070:	32544144 	subscc	r4, r4, #68, 2
    1074:	4c2d3039 	stcmi	0, cr3, [sp], #-228	; 0xffffff1c
    1078:	736d7261 	cmnvc	sp, #268435462	; 0x10000006
    107c:	65747379 	ldrbvs	r7, [r4, #-889]!	; 0xfffffc87
    1080:	6f6b2f6d 	svcvs	0x006b2f6d
    1084:	696c2f64 	stmdbvs	ip!, {r2, r5, r6, r8, r9, sl, fp, sp}^
    1088:	54532f62 	ldrbpl	r2, [r3], #-3938	; 0xfffff09e
    108c:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
    1090:	696c5f34 	stmdbvs	ip!, {r2, r4, r5, r8, r9, sl, fp, ip, lr}^
    1094:	54532f62 	ldrbpl	r2, [r3], #-3938	; 0xfffff09e
    1098:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
    109c:	5f787834 	svcpl	0x00787834
    10a0:	50647453 	rsbpl	r7, r4, r3, asr r4
    10a4:	70697265 	rsbvc	r7, r9, r5, ror #4
    10a8:	72445f68 	subvc	r5, r4, #104, 30	; 0x1a0
    10ac:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
    10b0:	6372732f 	cmnvs	r2, #-1140850688	; 0xbc000000
    10b4:	6d74732f 	ldclvs	3, cr7, [r4, #-188]!	; 0xffffff44
    10b8:	34663233 	strbtcc	r3, [r6], #-563	; 0xfffffdcd
    10bc:	725f7878 	subsvc	r7, pc, #120, 16	; 0x780000
    10c0:	632e676e 			; <UNDEFINED> instruction: 0x632e676e
    10c4:	474e5200 	strbmi	r5, [lr, -r0, lsl #4]
    10c8:	414c465f 	cmpmi	ip, pc, asr r6
    10cc:	4e520047 	cdpmi	0, 5, cr0, cr2, cr7, {2}
    10d0:	6c435f47 	mcrrvs	15, 4, r5, r3, cr7
    10d4:	46726165 	ldrbtmi	r6, [r2], -r5, ror #2
    10d8:	0067616c 	rsbeq	r6, r7, ip, ror #2
    10dc:	5f474e52 	svcpl	0x00474e52
    10e0:	49746547 	ldmdbmi	r4!, {r0, r1, r2, r6, r8, sl, sp, lr}^
    10e4:	61745354 	cmnvs	r4, r4, asr r3
    10e8:	00737574 	rsbseq	r7, r3, r4, ror r5
    10ec:	5f474e52 	svcpl	0x00474e52
    10f0:	61656c43 	cmnvs	r5, r3, asr #24
    10f4:	50544972 	subspl	r4, r4, r2, ror r9
    10f8:	69646e65 	stmdbvs	r4!, {r0, r2, r5, r6, r9, sl, fp, sp, lr}^
    10fc:	6942676e 	stmdbvs	r2, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}^
    1100:	4e520074 	mrcmi	0, 2, r0, cr2, cr4, {3}
    1104:	65475f47 	strbvs	r5, [r7, #-3911]	; 0xfffff0b9
    1108:	616c4674 	smcvs	50276	; 0xc464
    110c:	61745367 	cmnvs	r4, r7, ror #6
    1110:	00737574 	rsbseq	r7, r3, r4, ror r5
    1114:	5f4e4143 	svcpl	0x004e4143
    1118:	6e496544 	cdpvs	5, 4, cr6, cr9, cr4, {2}
    111c:	43007469 	movwmi	r7, #1129	; 0x469
    1120:	435f4e41 	cmpmi	pc, #1040	; 0x410
    1124:	7261656c 	rsbvc	r6, r1, #108, 10	; 0x1b000000
    1128:	67616c46 	strbvs	r6, [r1, -r6, asr #24]!
    112c:	4d785200 	lfmmi	f5, 2, [r8, #-0]
    1130:	61737365 	cmnvs	r3, r5, ror #6
    1134:	43006567 	movwmi	r6, #1383	; 0x567
    1138:	73552f3a 	cmpvc	r5, #58, 30	; 0xe8
    113c:	2f737265 	svccs	0x00737265
    1140:	6d616441 	cfstrdvs	mvd6, [r1, #-260]!	; 0xfffffefc
    1144:	6e4f2f74 	mcrvs	15, 2, r2, cr15, cr4, {3}
    1148:	69724465 	ldmdbvs	r2!, {r0, r2, r5, r6, sl, lr}^
    114c:	442f6576 	strtmi	r6, [pc], #-1398	; 1154 <startup-0x1fffeeac>
    1150:	6d756b6f 	fldmdbxvs	r5!, {d22-d76}	;@ Deprecated
    1154:	2f746e65 	svccs	0x00746e65
    1158:	48746947 	ldmdami	r4!, {r0, r1, r2, r6, r8, fp, sp, lr}^
    115c:	442f6275 	strtmi	r6, [pc], #-629	; 1164 <startup-0x1fffee9c>
    1160:	39325441 	ldmdbcc	r2!, {r0, r6, sl, ip, lr}
    1164:	614c2d30 	cmpvs	ip, r0, lsr sp
    1168:	79736d72 	ldmdbvc	r3!, {r1, r4, r5, r6, r8, sl, fp, sp, lr}^
    116c:	6d657473 	cfstrdvs	mvd7, [r5, #-460]!	; 0xfffffe34
    1170:	646f6b2f 	strbtvs	r6, [pc], #-2863	; 1178 <startup-0x1fffee88>
    1174:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    1178:	4d54532f 	ldclmi	3, cr5, [r4, #-188]	; 0xffffff44
    117c:	34463233 	strbcc	r3, [r6], #-563	; 0xfffffdcd
    1180:	62696c5f 	rsbvs	r6, r9, #24320	; 0x5f00
    1184:	4d54532f 	ldclmi	3, cr5, [r4, #-188]	; 0xffffff44
    1188:	34463233 	strbcc	r3, [r6], #-563	; 0xfffffdcd
    118c:	535f7878 	cmppl	pc, #120, 16	; 0x780000
    1190:	65506474 	ldrbvs	r6, [r0, #-1140]	; 0xfffffb8c
    1194:	68706972 	ldmdavs	r0!, {r1, r4, r5, r6, r8, fp, sp, lr}^
    1198:	6972445f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, sl, lr}^
    119c:	2f726576 	svccs	0x00726576
    11a0:	2f637273 	svccs	0x00637273
    11a4:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
    11a8:	78346632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, sp, lr}
    11ac:	61635f78 	smcvs	13816	; 0x35f8
    11b0:	00632e6e 	rsbeq	r2, r3, lr, ror #28
    11b4:	5f4e4143 	svcpl	0x004e4143
    11b8:	75727453 	ldrbvc	r7, [r2, #-1107]!	; 0xfffffbad
    11bc:	6e497463 	cdpvs	4, 4, cr7, cr9, cr3, {3}
    11c0:	43007469 	movwmi	r7, #1129	; 0x469
    11c4:	545f4e41 	ldrbpl	r4, [pc], #-3649	; 11cc <startup-0x1fffee34>
    11c8:	44657079 	strbtmi	r7, [r5], #-121	; 0xffffff87
    11cc:	73006665 	movwvc	r6, #1637	; 0x665
    11d0:	7065656c 	rsbvc	r6, r5, ip, ror #10
    11d4:	74617473 	strbtvc	r7, [r1], #-1139	; 0xfffffb8d
    11d8:	43007375 	movwmi	r7, #885	; 0x375
    11dc:	465f4e41 	ldrbmi	r4, [pc], -r1, asr #28
    11e0:	65746c69 	ldrbvs	r6, [r4, #-3177]!	; 0xfffff397
    11e4:	696e4972 	stmdbvs	lr!, {r1, r4, r5, r6, r8, fp, lr}^
    11e8:	72745374 	rsbsvc	r5, r4, #116, 6	; 0xd0000001
    11ec:	00746375 	rsbseq	r6, r4, r5, ror r3
    11f0:	5f4e4143 	svcpl	0x004e4143
    11f4:	4f464946 	svcmi	0x00464946
    11f8:	656c6552 	strbvs	r6, [ip, #-1362]!	; 0xfffffaae
    11fc:	00657361 	rsbeq	r7, r5, r1, ror #6
    1200:	5f4e4143 	svcpl	0x004e4143
    1204:	6f435454 	svcvs	0x00435454
    1208:	646f4d6d 	strbtvs	r4, [pc], #-3437	; 1210 <startup-0x1fffedf0>
    120c:	646d4365 	strbtvs	r4, [sp], #-869	; 0xfffffc9b
    1210:	73656d00 	cmnvc	r5, #0, 26
    1214:	65676173 	strbvs	r6, [r7, #-371]!	; 0xfffffe8d
    1218:	6e65705f 	mcrvs	0, 3, r7, cr5, cr15, {2}
    121c:	676e6964 	strbvs	r6, [lr, -r4, ror #18]!
    1220:	4e414300 	cdpmi	3, 4, cr4, cr1, cr0, {0}
    1224:	6c69465f 	stclvs	6, cr4, [r9], #-380	; 0xfffffe84
    1228:	4d726574 	cfldr64mi	mvdx6, [r2, #-464]!	; 0xfffffe30
    122c:	496b7361 	stmdbmi	fp!, {r0, r5, r6, r8, r9, ip, sp, lr}^
    1230:	67694864 	strbvs	r4, [r9, -r4, ror #16]!
    1234:	41430068 	cmpmi	r3, r8, rrx
    1238:	72545f4e 	subsvc	r5, r4, #312	; 0x138
    123c:	6d736e61 	ldclvs	14, cr6, [r3, #-388]!	; 0xfffffe7c
    1240:	74537469 	ldrbvc	r7, [r3], #-1129	; 0xfffffb97
    1244:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
    1248:	4e414300 	cdpmi	3, 4, cr4, cr1, cr0, {0}
    124c:	3153425f 	cmpcc	r3, pc, asr r2
    1250:	4e414300 	cdpmi	3, 4, cr4, cr1, cr0, {0}
    1254:	3253425f 	subscc	r4, r3, #-268435451	; 0xf0000005
    1258:	4e414300 	cdpmi	3, 4, cr4, cr1, cr0, {0}
    125c:	6e61425f 	mcrvs	2, 3, r4, cr1, cr15, {2}
    1260:	6d754e6b 	ldclvs	14, cr4, [r5, #-428]!	; 0xfffffe54
    1264:	00726562 	rsbseq	r6, r2, r2, ror #10
    1268:	5f4e4143 	svcpl	0x004e4143
    126c:	746c6946 	strbtvc	r6, [ip], #-2374	; 0xfffff6ba
    1270:	614d7265 	cmpvs	sp, r5, ror #4
    1274:	64496b73 	strbvs	r6, [r9], #-2931	; 0xfffff48d
    1278:	00776f4c 	rsbseq	r6, r7, ip, asr #30
    127c:	5f4e4143 	svcpl	0x004e4143
    1280:	4c746547 	cfldr64mi	mvdx6, [r4], #-284	; 0xfffffee4
    1284:	72544253 	subsvc	r4, r4, #805306373	; 0x30000005
    1288:	6d736e61 	ldclvs	14, cr6, [r3, #-388]!	; 0xfffffe7c
    128c:	72457469 	subvc	r7, r5, #1761607680	; 0x69000000
    1290:	43726f72 	cmnmi	r2, #456	; 0x1c8
    1294:	746e756f 	strbtvc	r7, [lr], #-1391	; 0xfffffa91
    1298:	43007265 	movwmi	r7, #613	; 0x265
    129c:	4d5f4e41 	ldclmi	14, cr4, [pc, #-260]	; 11a0 <startup-0x1fffee60>
    12a0:	0065646f 	rsbeq	r6, r5, pc, ror #8
    12a4:	74617473 	strbtvc	r7, [r1], #-1139	; 0xfffffb8d
    12a8:	44540065 	ldrbmi	r0, [r4], #-101	; 0xffffff9b
    12ac:	4300524c 	movwmi	r5, #588	; 0x24c
    12b0:	475f4e41 	ldrbmi	r4, [pc, -r1, asr #28]
    12b4:	614c7465 	cmpvs	ip, r5, ror #8
    12b8:	72457473 	subvc	r7, r5, #1929379840	; 0x73000000
    12bc:	43726f72 	cmnmi	r2, #456	; 0x1c8
    12c0:	0065646f 	rsbeq	r6, r5, pc, ror #8
    12c4:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xfffff1b7
    12c8:	74617453 	strbtvc	r7, [r1], #-1107	; 0xfffffbad
    12cc:	43007375 	movwmi	r7, #885	; 0x375
    12d0:	575f4e41 	ldrbpl	r4, [pc, -r1, asr #28]
    12d4:	55656b61 	strbpl	r6, [r5, #-2913]!	; 0xfffff49f
    12d8:	46520070 			; <UNDEFINED> instruction: 0x46520070
    12dc:	43005230 	movwmi	r5, #560	; 0x230
    12e0:	435f4e41 	cmpmi	pc, #1040	; 0x410
    12e4:	65636e61 	strbvs	r6, [r3, #-3681]!	; 0xfffff19f
    12e8:	6172546c 	cmnvs	r2, ip, ror #8
    12ec:	696d736e 	stmdbvs	sp!, {r1, r2, r3, r5, r6, r8, r9, ip, sp, lr}^
    12f0:	41430074 	hvcmi	12292	; 0x3004
    12f4:	6e495f4e 	cdpvs	15, 4, cr5, cr9, cr14, {2}
    12f8:	74537469 	ldrbvc	r7, [r3], #-1129	; 0xfffffb97
    12fc:	74637572 	strbtvc	r7, [r3], #-1394	; 0xfffffa8e
    1300:	4c445200 	sfmmi	f5, 2, [r4], {-0}
    1304:	41430052 	qdaddmi	r0, r2, r3
    1308:	42415f4e 	submi	r5, r1, #312	; 0x138
    130c:	54004d4f 	strpl	r4, [r0], #-3407	; 0xfffff2b1
    1310:	73654d78 	cmnvc	r5, #120, 26	; 0x1e00
    1314:	65676173 	strbvs	r6, [r7, #-371]!	; 0xfffffe8d
    1318:	4e414300 	cdpmi	3, 4, cr4, cr1, cr0, {0}
    131c:	73654d5f 	cmnvc	r5, #6080	; 0x17c0
    1320:	65676173 	strbvs	r6, [r7, #-371]!	; 0xfffffe8d
    1324:	646e6550 	strbtvs	r6, [lr], #-1360	; 0xfffffab0
    1328:	00676e69 	rsbeq	r6, r7, r9, ror #28
    132c:	5f4e4143 	svcpl	0x004e4143
    1330:	76616c53 			; <UNDEFINED> instruction: 0x76616c53
    1334:	61745365 	cmnvs	r4, r5, ror #6
    1338:	61427472 	hvcvs	10050	; 0x2742
    133c:	73006b6e 	movwvc	r6, #2926	; 0xb6e
    1340:	614d7854 	cmpvs	sp, r4, asr r8
    1344:	6f426c69 	svcvs	0x00426c69
    1348:	41430078 	hvcmi	12296	; 0x3008
    134c:	704f5f4e 	subvc	r5, pc, lr, asr #30
    1350:	74617265 	strbtvc	r7, [r1], #-613	; 0xfffffd9b
    1354:	4d676e69 	stclmi	14, cr6, [r7, #-420]!	; 0xfffffe5c
    1358:	5265646f 	rsbpl	r6, r5, #1862270976	; 0x6f000000
    135c:	65757165 	ldrbvs	r7, [r5, #-357]!	; 0xfffffe9b
    1360:	74007473 	strvc	r7, [r0], #-1139	; 0xfffffb8d
    1364:	6f656d69 	svcvs	0x00656d69
    1368:	52007475 	andpl	r7, r0, #1962934272	; 0x75000000
    136c:	00525444 	subseq	r5, r2, r4, asr #8
    1370:	52315346 	eorspl	r5, r1, #402653185	; 0x18000001
    1374:	31465200 	mrscc	r5, (UNDEF: 102)
    1378:	41430052 	qdaddmi	r0, r2, r3
    137c:	69465f4e 	stmdbvs	r6, {r1, r2, r3, r6, r8, r9, sl, fp, ip, lr}^
    1380:	7265746c 	rsbvc	r7, r5, #108, 8	; 0x6c000000
    1384:	69676552 	stmdbvs	r7!, {r1, r4, r6, r8, sl, sp, lr}^
    1388:	72657473 	rsbvc	r7, r5, #1929379840	; 0x73000000
    138c:	7079545f 	rsbsvc	r5, r9, pc, asr r4
    1390:	66654465 	strbtvs	r4, [r5], -r5, ror #8
    1394:	69467300 	stmdbvs	r6, {r8, r9, ip, sp, lr}^
    1398:	7265746c 	rsbvc	r7, r5, #108, 8	; 0x6c000000
    139c:	69676552 	stmdbvs	r7!, {r1, r4, r6, r8, sl, sp, lr}^
    13a0:	72657473 	rsbvc	r7, r5, #1929379840	; 0x73000000
    13a4:	4e414300 	cdpmi	3, 4, cr4, cr1, cr0, {0}
    13a8:	6172545f 	cmnvs	r2, pc, asr r4
    13ac:	696d736e 	stmdbvs	sp!, {r1, r2, r3, r5, r6, r8, r9, ip, sp, lr}^
    13b0:	4d460074 	stclmi	0, cr0, [r6, #-464]	; 0xfffffe30
    13b4:	54005231 	strpl	r5, [r0], #-561	; 0xfffffdcf
    13b8:	00525444 	subseq	r5, r2, r4, asr #8
    13bc:	5f4e4143 	svcpl	0x004e4143
    13c0:	43005449 	movwmi	r5, #1097	; 0x449
    13c4:	495f4e41 	ldmdbmi	pc, {r0, r6, r9, sl, fp, lr}^	; <UNPREDICTABLE>
    13c8:	0074696e 	rsbseq	r6, r4, lr, ror #18
    13cc:	5f4e4143 	svcpl	0x004e4143
    13d0:	4f464946 	svcmi	0x00464946
    13d4:	6c69614d 	stfvse	f6, [r9], #-308	; 0xfffffecc
    13d8:	5f786f42 	svcpl	0x00786f42
    13dc:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0xfffff6ac
    13e0:	00666544 	rsbeq	r6, r6, r4, asr #10
    13e4:	5f4e4143 	svcpl	0x004e4143
    13e8:	65656c53 	strbvs	r6, [r5, #-3155]!	; 0xfffff3ad
    13ec:	74490070 	strbvc	r0, [r9], #-112	; 0xffffff90
    13f0:	7469425f 	strbtvc	r4, [r9], #-607	; 0xfffffda1
    13f4:	4e414300 	cdpmi	3, 4, cr4, cr1, cr0, {0}
    13f8:	6c69465f 	stclvs	6, cr4, [r9], #-380	; 0xfffffe84
    13fc:	49726574 	ldmdbmi	r2!, {r2, r4, r5, r6, r8, sl, sp, lr}^
    1400:	5474696e 	ldrbtpl	r6, [r4], #-2414	; 0xfffff692
    1404:	44657079 	strbtmi	r7, [r5], #-121	; 0xffffff87
    1408:	43006665 	movwmi	r6, #1637	; 0x665
    140c:	465f4e41 	ldrbmi	r4, [pc], -r1, asr #28
    1410:	65746c69 	ldrbvs	r6, [r4, #-3177]!	; 0xfffff397
    1414:	6d754e72 	ldclvs	14, cr4, [r5, #-456]!	; 0xfffffe38
    1418:	00726562 	rsbseq	r6, r2, r2, ror #10
    141c:	5f4e4143 	svcpl	0x004e4143
    1420:	49746547 	ldmdbmi	r4!, {r0, r1, r2, r6, r8, sl, sp, lr}^
    1424:	61745354 	cmnvs	r4, r4, asr r3
    1428:	00737574 	rsbseq	r7, r3, r4, ror r5
    142c:	52484454 	subpl	r4, r8, #84, 8	; 0x54000000
    1430:	41464600 	cmpmi	r6, r0, lsl #12
    1434:	43005231 	movwmi	r5, #561	; 0x231
    1438:	465f4e41 	ldrbmi	r4, [pc], -r1, asr #28
    143c:	65746c69 	ldrbvs	r6, [r4, #-3177]!	; 0xfffff397
    1440:	4c644972 			; <UNDEFINED> instruction: 0x4c644972
    1444:	4300776f 	movwmi	r7, #1903	; 0x76f
    1448:	465f4e41 	ldrbmi	r4, [pc], -r1, asr #28
    144c:	0047414c 	subeq	r4, r7, ip, asr #2
    1450:	5f4e4143 	svcpl	0x004e4143
    1454:	73657250 	cmnvc	r5, #80, 4
    1458:	656c6163 	strbvs	r6, [ip, #-355]!	; 0xfffffe9d
    145c:	45520072 	ldrbmi	r0, [r2, #-114]	; 0xffffff8e
    1460:	56524553 			; <UNDEFINED> instruction: 0x56524553
    1464:	00314445 	eorseq	r4, r1, r5, asr #8
    1468:	74696177 	strbtvc	r6, [r9], #-375	; 0xfffffe89
    146c:	616c735f 	cmnvs	ip, pc, asr r3
    1470:	4946006b 	stmdbmi	r6, {r0, r1, r3, r5, r6}^
    1474:	754e4f46 	strbvc	r4, [lr, #-3910]	; 0xfffff0ba
    1478:	7265626d 	rsbvc	r6, r5, #-805306362	; 0xd0000006
    147c:	72726500 	rsbsvc	r6, r2, #0, 10
    1480:	6f63726f 	svcvs	0x0063726f
    1484:	70006564 	andvc	r6, r0, r4, ror #10
    1488:	69646e65 	stmdbvs	r4!, {r0, r2, r5, r6, r9, sl, fp, sp, lr}^
    148c:	6962676e 	stmdbvs	r2!, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}^
    1490:	61747374 	cmnvs	r4, r4, ror r3
    1494:	00737574 	rsbseq	r7, r3, r4, ror r5
    1498:	5f4e4143 	svcpl	0x004e4143
    149c:	746c6946 	strbtvc	r6, [ip], #-2374	; 0xfffff6ba
    14a0:	64497265 	strbvs	r7, [r9], #-613	; 0xfffffd9b
    14a4:	68676948 	stmdavs	r7!, {r3, r6, r8, fp, sp, lr}^
    14a8:	4e414300 	cdpmi	3, 4, cr4, cr1, cr0, {0}
    14ac:	6765525f 			; <UNDEFINED> instruction: 0x6765525f
    14b0:	4e414300 	cdpmi	3, 4, cr4, cr1, cr0, {0}
    14b4:	696e495f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, lr}^
    14b8:	70795474 	rsbsvc	r5, r9, r4, ror r4
    14bc:	66654465 	strbtvs	r4, [r5], -r5, ror #8
    14c0:	4e414300 	cdpmi	3, 4, cr4, cr1, cr0, {0}
    14c4:	6c69465f 	stclvs	6, cr4, [r9], #-380	; 0xfffffe84
    14c8:	46726574 			; <UNDEFINED> instruction: 0x46726574
    14cc:	414f4649 	cmpmi	pc, r9, asr #12
    14d0:	67697373 			; <UNDEFINED> instruction: 0x67697373
    14d4:	6e656d6e 	cdpvs	13, 6, cr6, cr5, cr14, {3}
    14d8:	41430074 	hvcmi	12292	; 0x3004
    14dc:	78545f4e 	ldmdavc	r4, {r1, r2, r3, r6, r8, r9, sl, fp, ip, lr}^
    14e0:	6c69614d 	stfvse	f6, [r9], #-308	; 0xfffffecc
    14e4:	5f786f42 	svcpl	0x00786f42
    14e8:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0xfffff6ac
    14ec:	00666544 	rsbeq	r6, r6, r4, asr #10
    14f0:	5f4e4143 	svcpl	0x004e4143
    14f4:	46474244 	strbmi	r4, [r7], -r4, asr #4
    14f8:	7a656572 	bvc	195aac8 <startup-0x1e6a5538>
    14fc:	41430065 	cmpmi	r3, r5, rrx
    1500:	69465f4e 	stmdbvs	r6, {r1, r2, r3, r6, r8, r9, sl, fp, ip, lr}^
    1504:	7265746c 	rsbvc	r7, r5, #108, 8	; 0x6c000000
    1508:	6c616353 	stclvs	3, cr6, [r1], #-332	; 0xfffffeb4
    150c:	41430065 	cmpmi	r3, r5, rrx
    1510:	69465f4e 	stmdbvs	r6, {r1, r2, r3, r6, r8, r9, sl, fp, ip, lr}^
    1514:	7265746c 	rsbvc	r7, r5, #108, 8	; 0x6c000000
    1518:	65646f4d 	strbvs	r6, [r4, #-3917]!	; 0xfffff0b3
    151c:	4e414300 	cdpmi	3, 4, cr4, cr1, cr0, {0}
    1520:	65704f5f 	ldrbvs	r4, [r0, #-3935]!	; 0xfffff0a1
    1524:	69746172 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, sp, lr}^
    1528:	6f4d676e 	svcvs	0x004d676e
    152c:	52006564 	andpl	r6, r0, #100, 10	; 0x19000000
    1530:	00524844 	subseq	r4, r2, r4, asr #16
    1534:	67616c66 	strbvs	r6, [r1, -r6, ror #24]!
    1538:	00706d74 	rsbseq	r6, r0, r4, ror sp
    153c:	5f4e4143 	svcpl	0x004e4143
    1540:	4d555741 	ldclmi	7, cr5, [r5, #-260]	; 0xfffffefc
    1544:	49467300 	stmdbmi	r6, {r8, r9, ip, sp, lr}^
    1548:	614d4f46 	cmpvs	sp, r6, asr #30
    154c:	6f426c69 	svcvs	0x00426c69
    1550:	41430078 	hvcmi	12296	; 0x3008
    1554:	65475f4e 	strbvs	r5, [r7, #-3918]	; 0xfffff0b2
    1558:	616c4674 	smcvs	50276	; 0xc464
    155c:	61745367 	cmnvs	r4, r7, ror #6
    1560:	00737574 	rsbseq	r7, r3, r4, ror r5
    1564:	5f4e4143 	svcpl	0x004e4143
    1568:	4d4c4652 	stclmi	6, cr4, [ip, #-328]	; 0xfffffeb8
    156c:	4e414300 	cdpmi	3, 4, cr4, cr1, cr0, {0}
    1570:	4354495f 	cmpmi	r4, #1556480	; 0x17c000
    1574:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    1578:	41430067 	cmpmi	r3, r7, rrx
    157c:	4300784e 	movwmi	r7, #2126	; 0x84e
    1580:	465f4e41 	ldrbmi	r4, [pc], -r1, asr #28
    1584:	65746c69 	ldrbvs	r6, [r4, #-3177]!	; 0xfffff397
    1588:	74634172 	strbtvc	r4, [r3], #-370	; 0xfffffe8e
    158c:	74617669 	strbtvc	r7, [r1], #-1641	; 0xfffff997
    1590:	006e6f69 	rsbeq	r6, lr, r9, ror #30
    1594:	5f4e4143 	svcpl	0x004e4143
    1598:	65636552 	strbvs	r6, [r3, #-1362]!	; 0xfffffaae
    159c:	00657669 	rsbeq	r7, r5, r9, ror #12
    15a0:	6e617254 	mcrvs	2, 3, r7, cr1, cr4, {2}
    15a4:	74696d73 	strbtvc	r6, [r9], #-3443	; 0xfffff28d
    15a8:	6c69614d 	stfvse	f6, [r9], #-308	; 0xfffffecc
    15ac:	00786f62 	rsbseq	r6, r8, r2, ror #30
    15b0:	63656843 	cmnvs	r5, #4390912	; 0x430000
    15b4:	5354496b 	cmppl	r4, #1753088	; 0x1ac000
    15b8:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0xfffffe8c
    15bc:	41430073 	hvcmi	12291	; 0x3003
    15c0:	6c435f4e 	mcrrvs	15, 4, r5, r3, cr14
    15c4:	49726165 	ldmdbmi	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    15c8:	6e655054 	mcrvs	0, 3, r5, cr5, cr4, {2}
    15cc:	676e6964 	strbvs	r6, [lr, -r4, ror #18]!
    15d0:	00746942 	rsbseq	r6, r4, r2, asr #18
    15d4:	5f4e4143 	svcpl	0x004e4143
    15d8:	50465854 	subpl	r5, r6, r4, asr r8
    15dc:	61727400 	cmnvs	r2, r0, lsl #8
    15e0:	696d736e 	stmdbvs	sp!, {r1, r2, r3, r5, r6, r8, r9, ip, sp, lr}^
    15e4:	616d5f74 	smcvs	54772	; 0xd5f4
    15e8:	6f626c69 	svcvs	0x00626c69
    15ec:	41430078 	hvcmi	12296	; 0x3008
    15f0:	54545f4e 	ldrbpl	r5, [r4], #-3918	; 0xfffff0b2
    15f4:	43004d43 	movwmi	r4, #3395	; 0xd43
    15f8:	475f4e41 	ldrbmi	r4, [pc, -r1, asr #28]
    15fc:	65527465 	ldrbvs	r7, [r2, #-1125]	; 0xfffffb9b
    1600:	76696563 	strbtvc	r6, [r9], -r3, ror #10
    1604:	72724565 	rsbsvc	r4, r2, #423624704	; 0x19400000
    1608:	6f43726f 	svcvs	0x0043726f
    160c:	65746e75 	ldrbvs	r6, [r4, #-3701]!	; 0xfffff18b
    1610:	69660072 	stmdbvs	r6!, {r1, r4, r5, r6}^
    1614:	7265746c 	rsbvc	r7, r5, #108, 8	; 0x6c000000
    1618:	6d756e5f 	ldclvs	14, cr6, [r5, #-380]!	; 0xfffffe84
    161c:	5f726562 	svcpl	0x00726562
    1620:	5f746962 	svcpl	0x00746962
    1624:	00736f70 	rsbseq	r6, r3, r0, ror pc
    1628:	5f4e4143 	svcpl	0x004e4143
    162c:	00574a53 	subseq	r4, r7, r3, asr sl
    1630:	656b6177 	strbvs	r6, [fp, #-375]!	; 0xfffffe89
    1634:	74737075 	ldrbtvc	r7, [r3], #-117	; 0xffffff8b
    1638:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
    163c:	4e414300 	cdpmi	3, 4, cr4, cr1, cr0, {0}
    1640:	6c69465f 	stclvs	6, cr4, [r9], #-380	; 0xfffffe84
    1644:	49726574 	ldmdbmi	r2!, {r2, r4, r5, r6, r8, sl, sp, lr}^
    1648:	0074696e 	rsbseq	r6, r4, lr, ror #18
    164c:	5f4e4143 	svcpl	0x004e4143
    1650:	5452414e 	ldrbpl	r4, [r2], #-334	; 0xfffffeb2
    1654:	69617700 	stmdbvs	r1!, {r8, r9, sl, ip, sp, lr}^
    1658:	63615f74 	cmnvs	r1, #116, 30	; 0x1d0
    165c:	6553006b 	ldrbvs	r0, [r3, #-107]	; 0xffffff95
    1660:	6f697373 	svcvs	0x00697373
    1664:	0044496e 	subeq	r4, r4, lr, ror #18
    1668:	5f6e6163 	svcpl	0x006e6163
    166c:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xfffff197
    1670:	77656e00 	strbvc	r6, [r5, -r0, lsl #28]!
    1674:	646e6148 	strbtvs	r6, [lr], #-328	; 0xfffffeb8
    1678:	0072656c 	rsbseq	r6, r2, ip, ror #10
    167c:	62363175 	eorsvs	r3, r6, #1073741853	; 0x4000001d
    1680:	00737469 	rsbseq	r7, r3, r9, ror #8
    1684:	644e4143 	strbvs	r4, [lr], #-323	; 0xfffffebd
    1688:	62617369 	rsbvs	r7, r1, #-1543503871	; 0xa4000001
    168c:	6946656c 	stmdbvs	r6, {r2, r3, r5, r6, r8, sl, sp, lr}^
    1690:	7265746c 	rsbvc	r7, r5, #108, 8	; 0x6c000000
    1694:	646e6148 	strbtvs	r6, [lr], #-328	; 0xfffffeb8
    1698:	0072656c 	rsbseq	r6, r2, ip, ror #10
    169c:	4349564e 	movtmi	r5, #38478	; 0x964e
    16a0:	696e495f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, lr}^
    16a4:	72745374 	rsbsvc	r5, r4, #116, 6	; 0xd0000001
    16a8:	75746375 	ldrbvc	r6, [r4, #-885]!	; 0xfffffc8b
    16ac:	63006572 	movwvs	r6, #1394	; 0x572
    16b0:	695f6e61 	ldmdbvs	pc, {r0, r5, r6, r9, sl, fp, sp, lr}^	; <UNPREDICTABLE>
    16b4:	685f7172 	ldmdavs	pc, {r1, r4, r5, r6, r8, ip, sp, lr}^	; <UNPREDICTABLE>
    16b8:	6c646e61 	stclvs	14, cr6, [r4], #-388	; 0xfffffe7c
    16bc:	6e007265 	cdpvs	2, 0, cr7, cr0, cr5, {3}
    16c0:	7365536f 	cmnvc	r5, #-1140850687	; 0xbc000001
    16c4:	6e6f6973 			; <UNDEFINED> instruction: 0x6e6f6973
    16c8:	43006449 	movwmi	r6, #1097	; 0x449
    16cc:	65734e41 	ldrbvs	r4, [r3, #-3649]!	; 0xfffff1bf
    16d0:	654d646e 	strbvs	r6, [sp, #-1134]	; 0xfffffb92
    16d4:	67617373 			; <UNDEFINED> instruction: 0x67617373
    16d8:	78720065 	ldmdavc	r2!, {r0, r2, r5, r6}^
    16dc:	0067734d 	rsbeq	r7, r7, sp, asr #6
    16e0:	73736553 	cmnvc	r3, #348127232	; 0x14c00000
    16e4:	496e6f69 	stmdbmi	lr!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
    16e8:	74634144 	strbtvc	r4, [r3], #-324	; 0xfffffebc
    16ec:	00657669 	rsbeq	r7, r5, r9, ror #12
    16f0:	614e4143 	cmpvs	lr, r3, asr #2
    16f4:	76697463 	strbtvc	r7, [r9], -r3, ror #8
    16f8:	46657461 	strbtmi	r7, [r5], -r1, ror #8
    16fc:	65746c69 	ldrbvs	r6, [r4, #-3177]!	; 0xfffff397
    1700:	6e614872 	mcrvs	8, 3, r4, cr1, cr2, {3}
    1704:	72656c64 	rsbvc	r6, r5, #100, 24	; 0x6400
    1708:	4e414300 	cdpmi	3, 4, cr4, cr1, cr0, {0}
    170c:	6c69465f 	stclvs	6, cr4, [r9], #-380	; 0xfffffe84
    1710:	49726574 	ldmdbmi	r2!, {r2, r4, r5, r6, r8, sl, sp, lr}^
    1714:	5374696e 	cmnpl	r4, #1802240	; 0x1b8000
    1718:	63757274 	cmnvs	r5, #116, 4	; 0x40000007
    171c:	65727574 	ldrbvs	r7, [r2, #-1396]!	; 0xfffffa8c
    1720:	6e616300 	cdpvs	3, 6, cr6, cr1, cr0, {0}
    1724:	696e695f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, sp, lr}^
    1728:	74735f74 	ldrbtvc	r5, [r3], #-3956	; 0xfffff08c
    172c:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
    1730:	4e414300 	cdpmi	3, 4, cr4, cr1, cr0, {0}
    1734:	696e495f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, lr}^
    1738:	72745374 	rsbsvc	r5, r4, #116, 6	; 0xd0000001
    173c:	75746375 	ldrbvc	r6, [r4, #-885]!	; 0xfffffc8b
    1740:	75006572 	strvc	r6, [r0, #-1394]	; 0xfffffa8e
    1744:	6e6f696e 	vnmulvs.f16	s13, s30, s29	; <UNPREDICTABLE>
    1748:	746c6946 	strbtvc	r6, [ip], #-2374	; 0xfffff6ba
    174c:	68007265 	stmdavs	r0, {r0, r2, r5, r6, r9, ip, sp, lr}
    1750:	6c646e61 	stclvs	14, cr6, [r4], #-388	; 0xfffffe7c
    1754:	694c7265 	stmdbvs	ip, {r0, r2, r5, r6, r9, ip, sp, lr}^
    1758:	43007473 	movwmi	r7, #1139	; 0x473
    175c:	73552f3a 	cmpvc	r5, #58, 30	; 0xe8
    1760:	2f737265 	svccs	0x00737265
    1764:	6d616441 	cfstrdvs	mvd6, [r1, #-260]!	; 0xfffffefc
    1768:	6e4f2f74 	mcrvs	15, 2, r2, cr15, cr4, {3}
    176c:	69724465 	ldmdbvs	r2!, {r0, r2, r5, r6, sl, lr}^
    1770:	442f6576 	strtmi	r6, [pc], #-1398	; 1778 <startup-0x1fffe888>
    1774:	6d756b6f 	fldmdbxvs	r5!, {d22-d76}	;@ Deprecated
    1778:	2f746e65 	svccs	0x00746e65
    177c:	48746947 	ldmdami	r4!, {r0, r1, r2, r6, r8, fp, sp, lr}^
    1780:	442f6275 	strtmi	r6, [pc], #-629	; 1788 <startup-0x1fffe878>
    1784:	39325441 	ldmdbcc	r2!, {r0, r6, sl, ip, lr}
    1788:	614c2d30 	cmpvs	ip, r0, lsr sp
    178c:	79736d72 	ldmdbvc	r3!, {r1, r4, r5, r6, r8, sl, fp, sp, lr}^
    1790:	6d657473 	cfstrdvs	mvd7, [r5, #-460]!	; 0xfffffe34
    1794:	646f6b2f 	strbtvs	r6, [pc], #-2863	; 179c <startup-0x1fffe864>
    1798:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    179c:	4e41432f 	cdpmi	3, 4, cr4, cr1, cr15, {1}
    17a0:	4300632e 	movwmi	r6, #814	; 0x32e
    17a4:	69644e41 	stmdbvs	r4!, {r0, r6, r9, sl, fp, lr}^
    17a8:	6c626173 	stfvse	f6, [r2], #-460	; 0xfffffe34
    17ac:	6c6c4165 	stfvse	f4, [ip], #-404	; 0xfffffe6c
    17b0:	746c6946 	strbtvc	r6, [ip], #-2374	; 0xfffff6ba
    17b4:	61487265 	cmpvs	r8, r5, ror #4
    17b8:	656c646e 	strbvs	r6, [ip, #-1134]!	; 0xfffffb92
    17bc:	66007372 			; <UNDEFINED> instruction: 0x66007372
    17c0:	65746c69 	ldrbvs	r6, [r4, #-3177]!	; 0xfffff397
    17c4:	696e5572 	stmdbvs	lr!, {r1, r4, r5, r6, r8, sl, ip, lr}^
    17c8:	43006e6f 	movwmi	r6, #3695	; 0xe6f
    17cc:	61684e41 	cmnvs	r8, r1, asr #28
    17d0:	656c646e 	strbvs	r6, [ip, #-1134]!	; 0xfffffb92
    17d4:	73694c72 	cmnvc	r9, #29184	; 0x7200
    17d8:	746f4e74 	strbtvc	r4, [pc], #-3700	; 17e0 <startup-0x1fffe820>
    17dc:	6c6c7546 	cfstr64vs	mvdx7, [ip], #-280	; 0xfffffee8
    17e0:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
    17e4:	6e495f4f 	cdpvs	15, 4, cr5, cr9, cr15, {2}
    17e8:	74537469 	ldrbvc	r7, [r3], #-1129	; 0xfffffb97
    17ec:	74637572 	strbtvc	r7, [r3], #-1394	; 0xfffffa8e
    17f0:	00657275 	rsbeq	r7, r5, r5, ror r2
    17f4:	464e4143 	strbmi	r4, [lr], -r3, asr #2
    17f8:	65746c69 	ldrbvs	r6, [r4, #-3177]!	; 0xfffff397
    17fc:	6e614872 	mcrvs	8, 3, r4, cr1, cr2, {3}
    1800:	72656c64 	rsbvc	r6, r5, #100, 24	; 0x6400
    1804:	646e6900 	strbtvs	r6, [lr], #-2304	; 0xfffff700
    1808:	43007865 	movwmi	r7, #2149	; 0x865
    180c:	64614e41 	strbtvs	r4, [r1], #-3649	; 0xfffff1bf
    1810:	6c694664 	stclvs	6, cr4, [r9], #-400	; 0xfffffe70
    1814:	48726574 	ldmdami	r2!, {r2, r4, r5, r6, r8, sl, sp, lr}^
    1818:	6c646e61 	stclvs	14, cr6, [r4], #-388	; 0xfffffe7c
    181c:	75007265 	strvc	r7, [r0, #-613]	; 0xfffffd9b
    1820:	6e6f696e 	vnmulvs.f16	s13, s30, s29	; <UNPREDICTABLE>
    1824:	6b73614d 	blvs	1cd9d60 <startup-0x1e3262a0>
    1828:	74657300 	strbtvc	r7, [r5], #-768	; 0xfffffd00
    182c:	73736553 	cmnvc	r3, #348127232	; 0x14c00000
    1830:	496e6f69 	stmdbmi	lr!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
    1834:	69700064 	ldmdbvs	r0!, {r2, r5, r6}^
    1838:	736f706e 	cmnvc	pc, #110	; 0x6e
    183c:	74694200 	strbtvc	r4, [r9], #-512	; 0xfffffe00
    1840:	5445535f 	strbpl	r5, [r5], #-863	; 0xfffffca1
    1844:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
    1848:	65525f4f 	ldrbvs	r5, [r2, #-3919]	; 0xfffff0b1
    184c:	754f6461 	strbvc	r6, [pc, #-1121]	; 13f3 <startup-0x1fffec0d>
    1850:	74757074 	ldrbtvc	r7, [r5], #-116	; 0xffffff8c
    1854:	61746144 	cmnvs	r4, r4, asr #2
    1858:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
    185c:	46415f4f 	strbmi	r5, [r1], -pc, asr #30
    1860:	6d657400 	cfstrdvs	mvd7, [r5, #-0]
    1864:	50470070 	subpl	r0, r7, r0, ror r0
    1868:	535f4f49 	cmppl	pc, #292	; 0x124
    186c:	63757274 	cmnvs	r5, #116, 4	; 0x40000007
    1870:	696e4974 	stmdbvs	lr!, {r2, r4, r5, r6, r8, fp, lr}^
    1874:	69420074 	stmdbvs	r2, {r2, r4, r5, r6}^
    1878:	6c615674 	stclvs	6, cr5, [r1], #-464	; 0xfffffe30
    187c:	74694200 	strbtvc	r4, [r9], #-512	; 0xfffffe00
    1880:	5345525f 	movtpl	r5, #21087	; 0x525f
    1884:	47005445 	strmi	r5, [r0, -r5, asr #8]
    1888:	5f4f4950 	svcpl	0x004f4950
    188c:	74697257 	strbtvc	r7, [r9], #-599	; 0xfffffda9
    1890:	74694265 	strbtvc	r4, [r9], #-613	; 0xfffffd9b
    1894:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
    1898:	65535f4f 	ldrbvs	r5, [r3, #-3919]	; 0xfffff0b1
    189c:	74694274 	strbtvc	r4, [r9], #-628	; 0xfffffd8c
    18a0:	50470073 	subpl	r0, r7, r3, ror r0
    18a4:	495f4f49 	ldmdbmi	pc, {r0, r3, r6, r8, r9, sl, fp, lr}^	; <UNPREDICTABLE>
    18a8:	0074696e 	rsbseq	r6, r4, lr, ror #18
    18ac:	4f495047 	svcmi	0x00495047
    18b0:	7365525f 	cmnvc	r5, #-268435451	; 0xf0000005
    18b4:	69427465 	stmdbvs	r2, {r0, r2, r5, r6, sl, ip, sp, lr}^
    18b8:	43007374 	movwmi	r7, #884	; 0x374
    18bc:	73552f3a 	cmpvc	r5, #58, 30	; 0xe8
    18c0:	2f737265 	svccs	0x00737265
    18c4:	6d616441 	cfstrdvs	mvd6, [r1, #-260]!	; 0xfffffefc
    18c8:	6e4f2f74 	mcrvs	15, 2, r2, cr15, cr4, {3}
    18cc:	69724465 	ldmdbvs	r2!, {r0, r2, r5, r6, sl, lr}^
    18d0:	442f6576 	strtmi	r6, [pc], #-1398	; 18d8 <startup-0x1fffe728>
    18d4:	6d756b6f 	fldmdbxvs	r5!, {d22-d76}	;@ Deprecated
    18d8:	2f746e65 	svccs	0x00746e65
    18dc:	48746947 	ldmdami	r4!, {r0, r1, r2, r6, r8, fp, sp, lr}^
    18e0:	442f6275 	strtmi	r6, [pc], #-629	; 18e8 <startup-0x1fffe718>
    18e4:	39325441 	ldmdbcc	r2!, {r0, r6, sl, ip, lr}
    18e8:	614c2d30 	cmpvs	ip, r0, lsr sp
    18ec:	79736d72 	ldmdbvc	r3!, {r1, r4, r5, r6, r8, sl, fp, sp, lr}^
    18f0:	6d657473 	cfstrdvs	mvd7, [r5, #-460]!	; 0xfffffe34
    18f4:	646f6b2f 	strbtvs	r6, [pc], #-2863	; 18fc <startup-0x1fffe704>
    18f8:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    18fc:	4d54532f 	ldclmi	3, cr5, [r4, #-188]	; 0xffffff44
    1900:	34463233 	strbcc	r3, [r6], #-563	; 0xfffffdcd
    1904:	62696c5f 	rsbvs	r6, r9, #24320	; 0x5f00
    1908:	4d54532f 	ldclmi	3, cr5, [r4, #-188]	; 0xffffff44
    190c:	34463233 	strbcc	r3, [r6], #-563	; 0xfffffdcd
    1910:	535f7878 	cmppl	pc, #120, 16	; 0x780000
    1914:	65506474 	ldrbvs	r6, [r0, #-1140]	; 0xfffffb8c
    1918:	68706972 	ldmdavs	r0!, {r1, r4, r5, r6, r8, fp, sp, lr}^
    191c:	6972445f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, sl, lr}^
    1920:	2f726576 	svccs	0x00726576
    1924:	2f637273 	svccs	0x00637273
    1928:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
    192c:	78346632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, sp, lr}
    1930:	70675f78 	rsbvc	r5, r7, r8, ror pc
    1934:	632e6f69 			; <UNDEFINED> instruction: 0x632e6f69
    1938:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
    193c:	65445f4f 	strbvs	r5, [r4, #-3919]	; 0xfffff0b1
    1940:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xfffff1b7
    1944:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
    1948:	65525f4f 	ldrbvs	r5, [r2, #-3919]	; 0xfffff0b1
    194c:	6e496461 	cdpvs	4, 4, cr6, cr9, cr1, {3}
    1950:	44747570 	ldrbtmi	r7, [r4], #-1392	; 0xfffffa90
    1954:	42617461 	rsbmi	r7, r1, #1627389952	; 0x61000000
    1958:	47007469 	strmi	r7, [r0, -r9, ror #8]
    195c:	5f4f4950 	svcpl	0x004f4950
    1960:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xfffff1b7
    1964:	75727453 	ldrbvc	r7, [r2, #-1107]!	; 0xfffffbad
    1968:	50007463 	andpl	r7, r0, r3, ror #8
    196c:	5674726f 	ldrbtpl	r7, [r4], -pc, ror #4
    1970:	47006c61 	strmi	r6, [r0, -r1, ror #24]
    1974:	5f4f4950 	svcpl	0x004f4950
    1978:	536e6950 	cmnpl	lr, #80, 18	; 0x140000
    197c:	6372756f 	cmnvs	r2, #465567744	; 0x1bc00000
    1980:	50470065 	subpl	r0, r7, r5, rrx
    1984:	525f4f49 	subspl	r4, pc, #292	; 0x124
    1988:	49646165 	stmdbmi	r4!, {r0, r2, r5, r6, r8, sp, lr}^
    198c:	7475706e 	ldrbtvc	r7, [r5], #-110	; 0xffffff92
    1990:	61746144 	cmnvs	r4, r4, asr #2
    1994:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
    1998:	69505f4f 	ldmdbvs	r0, {r0, r1, r2, r3, r6, r8, r9, sl, fp, ip, lr}^
    199c:	636f4c6e 	cmnvs	pc, #28160	; 0x6e00
    19a0:	6e6f436b 	cdpvs	3, 6, cr4, cr15, cr11, {3}
    19a4:	00676966 	rsbeq	r6, r7, r6, ror #18
    19a8:	41746942 	cmnmi	r4, r2, asr #18
    19ac:	6f697463 	svcvs	0x00697463
    19b0:	7563006e 	strbvc	r0, [r3, #-110]!	; 0xffffff92
    19b4:	6e657272 	mcrvs	2, 3, r7, cr5, cr2, {3}
    19b8:	6e697074 	mcrvs	0, 3, r7, cr9, cr4, {3}
    19bc:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
    19c0:	72575f4f 	subsvc	r5, r7, #316	; 0x13c
    19c4:	00657469 	rsbeq	r7, r5, r9, ror #8
    19c8:	4f495047 	svcmi	0x00495047
    19cc:	50470078 	subpl	r0, r7, r8, ror r0
    19d0:	545f4f49 	ldrbpl	r4, [pc], #-3913	; 19d8 <startup-0x1fffe628>
    19d4:	6c67676f 	stclvs	7, cr6, [r7], #-444	; 0xfffffe44
    19d8:	74694265 	strbtvc	r4, [r9], #-613	; 0xfffffd9b
    19dc:	65740073 	ldrbvs	r0, [r4, #-115]!	; 0xffffff8d
    19e0:	325f706d 	subscc	r7, pc, #109	; 0x6d
    19e4:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
    19e8:	69505f4f 	ldmdbvs	r0, {r0, r1, r2, r3, r6, r8, r9, sl, fp, ip, lr}^
    19ec:	4346416e 	movtmi	r4, #24942	; 0x616e
    19f0:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    19f4:	50470067 	subpl	r0, r7, r7, rrx
    19f8:	525f4f49 	subspl	r4, pc, #292	; 0x124
    19fc:	4f646165 	svcmi	0x00646165
    1a00:	75707475 	ldrbvc	r7, [r0, #-1141]!	; 0xfffffb8b
    1a04:	74614474 	strbtvc	r4, [r1], #-1140	; 0xfffffb8c
    1a08:	74694261 	strbtvc	r4, [r9], #-609	; 0xfffffd9f
    1a0c:	43435200 	movtmi	r5, #12800	; 0x3200
    1a10:	4c43485f 	mcrrmi	8, 5, r4, r3, cr15
    1a14:	4352004b 	cmpmi	r2, #75	; 0x4b
    1a18:	534c5f43 	movtpl	r5, #53059	; 0xcf43
    1a1c:	50410045 	subpl	r0, r1, r5, asr #32
    1a20:	504c3142 	subpl	r3, ip, r2, asr #2
    1a24:	00524e45 	subseq	r4, r2, r5, asr #28
    1a28:	5f434352 	svcpl	0x00434352
    1a2c:	534c4c50 	movtpl	r4, #52304	; 0xcc50
    1a30:	6d434941 	vstrvs.16	s9, [r3, #-130]	; 0xffffff7e	; <UNPREDICTABLE>
    1a34:	43520064 	cmpmi	r2, #100	; 0x64
    1a38:	4c505f43 	mrrcmi	15, 4, r5, r0, cr3
    1a3c:	4941534c 	stmdbmi	r1, {r2, r3, r6, r8, r9, ip, lr}^
    1a40:	51766944 	cmnpl	r6, r4, asr #18
    1a44:	43435200 	movtmi	r5, #12800	; 0x3200
    1a48:	4c4c505f 	mcrrmi	0, 5, r5, ip, cr15
    1a4c:	44494153 	strbmi	r4, [r9], #-339	; 0xfffffead
    1a50:	00527669 	subseq	r7, r2, r9, ror #12
    1a54:	74617473 	strbtvc	r7, [r1], #-1139	; 0xfffffb8d
    1a58:	65727375 	ldrbvs	r7, [r2, #-885]!	; 0xfffffc8b
    1a5c:	59530067 	ldmdbpl	r3, {r0, r1, r2, r5, r6}^
    1a60:	4b4c4353 	blmi	13127b4 <startup-0x1eced84c>
    1a64:	6572465f 	ldrbvs	r4, [r2, #-1631]!	; 0xfffff9a1
    1a68:	6e657571 	mcrvs	5, 3, r7, cr5, cr1, {3}
    1a6c:	70007963 	andvc	r7, r0, r3, ror #18
    1a70:	006d6c6c 	rsbeq	r6, sp, ip, ror #24
    1a74:	706c6c70 	rsbvc	r6, ip, r0, ror ip
    1a78:	43435200 	movtmi	r5, #12800	; 0x3200
    1a7c:	4f434d5f 	svcmi	0x00434d5f
    1a80:	756f5331 	strbvc	r5, [pc, #-817]!	; 1757 <startup-0x1fffe8a9>
    1a84:	00656372 	rsbeq	r6, r5, r2, ror r3
    1a88:	5f434352 	svcpl	0x00434352
    1a8c:	31425041 	cmpcc	r2, r1, asr #32
    1a90:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
    1a94:	65526870 	ldrbvs	r6, [r2, #-2160]	; 0xfffff790
    1a98:	43746573 	cmnmi	r4, #482344960	; 0x1cc00000
    1a9c:	5000646d 	andpl	r6, r0, sp, ror #8
    1aa0:	004e4c4c 	subeq	r4, lr, ip, asr #24
    1aa4:	5f434352 	svcpl	0x00434352
    1aa8:	50494153 	subpl	r4, r9, r3, asr r1
    1aac:	41534c4c 	cmpmi	r3, ip, asr #24
    1ab0:	6b6c4349 	blvs	1b127dc <startup-0x1e4ed824>
    1ab4:	43766944 	cmnmi	r6, #68, 18	; 0x110000
    1ab8:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    1abc:	4c500067 	mrrcmi	0, 6, r0, r0, cr7	; <UNPREDICTABLE>
    1ac0:	5000504c 	andpl	r5, r0, ip, asr #32
    1ac4:	00514c4c 	subseq	r4, r1, ip, asr #24
    1ac8:	5f434352 	svcpl	0x00434352
    1acc:	61656c43 	cmnvs	r5, r3, asr #24
    1ad0:	50544972 	subspl	r4, r4, r2, ror r9
    1ad4:	69646e65 	stmdbvs	r4!, {r0, r2, r5, r6, r9, sl, fp, sp, lr}^
    1ad8:	6942676e 	stmdbvs	r2, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}^
    1adc:	43520074 	cmpmi	r2, #116	; 0x74
    1ae0:	54495f43 	strbpl	r5, [r9], #-3907	; 0xfffff0bd
    1ae4:	4c4c5000 	marmi	acc0, r5, ip
    1ae8:	4352004d 	cmpmi	r2, #77	; 0x4d
    1aec:	48415f43 	stmdami	r1, {r0, r1, r6, r8, r9, sl, fp, ip, lr}^
    1af0:	65503142 	ldrbvs	r3, [r0, #-322]	; 0xfffffebe
    1af4:	68706972 	ldmdavs	r0!, {r1, r4, r5, r6, r8, fp, sp, lr}^
    1af8:	42484100 	submi	r4, r8, #0, 2
    1afc:	45504c31 	ldrbmi	r4, [r0, #-3121]	; 0xfffff3cf
    1b00:	5200524e 	andpl	r5, r0, #-536870908	; 0xe0000004
    1b04:	435f4343 	cmpmi	pc, #201326593	; 0xc000001
    1b08:	6b636f6c 	blvs	18dd8c0 <startup-0x1e722740>
    1b0c:	43520073 	cmpmi	r2, #115	; 0x73
    1b10:	50415f43 	subpl	r5, r1, r3, asr #30
    1b14:	65503242 	ldrbvs	r3, [r0, #-578]	; 0xfffffdbe
    1b18:	68706972 	ldmdavs	r0!, {r1, r4, r5, r6, r8, fp, sp, lr}^
    1b1c:	636f6c43 	cmnvs	pc, #17152	; 0x4300
    1b20:	4d504c6b 	ldclmi	12, cr4, [r0, #-428]	; 0xfffffe54
    1b24:	4365646f 	cmnmi	r5, #1862270976	; 0x6f000000
    1b28:	4400646d 	strmi	r6, [r0], #-1133	; 0xfffffb93
    1b2c:	46434b43 	strbmi	r4, [r3], -r3, asr #22
    1b30:	52005247 	andpl	r5, r0, #1879048196	; 0x70000004
    1b34:	435f4343 	cmpmi	pc, #201326593	; 0xc000001
    1b38:	7261656c 	rsbvc	r6, r1, #108, 10	; 0x1b000000
    1b3c:	67616c46 	strbvs	r6, [r1, -r6, asr #24]!
    1b40:	42484100 	submi	r4, r8, #0, 2
    1b44:	54535231 	ldrbpl	r5, [r3], #-561	; 0xfffffdcf
    1b48:	43440052 	movtmi	r0, #16466	; 0x4052
    1b4c:	4746434b 	strbmi	r4, [r6, -fp, asr #6]
    1b50:	74003252 	strvc	r3, [r0], #-594	; 0xfffffdae
    1b54:	6572706d 	ldrbvs	r7, [r2, #-109]!	; 0xffffff93
    1b58:	43500067 	cmpmi	r0, #103	; 0x67
    1b5c:	5f324b4c 	svcpl	0x00324b4c
    1b60:	71657246 	cmnvc	r5, r6, asr #4
    1b64:	636e6575 	cmnvs	lr, #490733568	; 0x1d400000
    1b68:	43520079 	cmpmi	r2, #121	; 0x79
    1b6c:	48415f43 	stmdami	r1, {r0, r1, r6, r8, r9, sl, fp, ip, lr}^
    1b70:	65503242 	ldrbvs	r3, [r0, #-578]	; 0xfffffdbe
    1b74:	68706972 	ldmdavs	r0!, {r1, r4, r5, r6, r8, fp, sp, lr}^
    1b78:	636f6c43 	cmnvs	pc, #17152	; 0x4300
    1b7c:	646d436b 	strbtvs	r4, [sp], #-875	; 0xfffffc95
    1b80:	42504100 	subsmi	r4, r0, #0, 2
    1b84:	54535232 	ldrbpl	r5, [r3], #-562	; 0xfffffdce
    1b88:	43520052 	cmpmi	r2, #82	; 0x52
    1b8c:	43505f43 	cmpmi	r0, #268	; 0x10c
    1b90:	43314b4c 	teqmi	r1, #76, 22	; 0x13000
    1b94:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    1b98:	43520067 	cmpmi	r2, #103	; 0x67
    1b9c:	48415f43 	stmdami	r1, {r0, r1, r6, r8, r9, sl, fp, ip, lr}^
    1ba0:	65503342 	ldrbvs	r3, [r0, #-834]	; 0xfffffcbe
    1ba4:	68706972 	ldmdavs	r0!, {r1, r4, r5, r6, r8, fp, sp, lr}^
    1ba8:	65736552 	ldrbvs	r6, [r3, #-1362]!	; 0xfffffaae
    1bac:	646d4374 	strbtvs	r4, [sp], #-884	; 0xfffffc8c
    1bb0:	43435200 	movtmi	r5, #12800	; 0x3200
    1bb4:	4941535f 	stmdbmi	r1, {r0, r1, r2, r3, r4, r6, r8, r9, ip, lr}^
    1bb8:	636f6c42 	cmnvs	pc, #16896	; 0x4200
    1bbc:	4c43416b 	stfmie	f4, [r3], {107}	; 0x6b
    1bc0:	6e6f434b 	cdpvs	3, 6, cr4, cr15, cr11, {2}
    1bc4:	00676966 	rsbeq	r6, r7, r6, ror #18
    1bc8:	5f434352 	svcpl	0x00434352
    1bcc:	31424841 	cmpcc	r2, r1, asr #16
    1bd0:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
    1bd4:	65526870 	ldrbvs	r6, [r2, #-2160]	; 0xfffff790
    1bd8:	43746573 	cmnmi	r4, #482344960	; 0x1cc00000
    1bdc:	5200646d 	andpl	r6, r0, #1828716544	; 0x6d000000
    1be0:	485f4343 	ldmdami	pc, {r0, r1, r6, r8, r9, lr}^	; <UNPREDICTABLE>
    1be4:	434b4c43 	movtmi	r4, #48195	; 0xbc43
    1be8:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    1bec:	43520067 	cmpmi	r2, #103	; 0x67
    1bf0:	59535f43 	ldmdbpl	r3, {r0, r1, r6, r8, r9, sl, fp, ip, lr}^
    1bf4:	4b4c4353 	blmi	1312948 <startup-0x1eced6b8>
    1bf8:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    1bfc:	52006769 	andpl	r6, r0, #27525120	; 0x1a40000
    1c00:	4c5f4343 	mrrcmi	3, 4, r4, pc, cr3	; <UNPREDICTABLE>
    1c04:	6f434553 	svcvs	0x00434553
    1c08:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    1c0c:	2f3a4300 	svccs	0x003a4300
    1c10:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
    1c14:	64412f73 	strbvs	r2, [r1], #-3955	; 0xfffff08d
    1c18:	2f746d61 	svccs	0x00746d61
    1c1c:	44656e4f 	strbtmi	r6, [r5], #-3663	; 0xfffff1b1
    1c20:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
    1c24:	6b6f442f 	blvs	1bd2ce8 <startup-0x1e42d318>
    1c28:	6e656d75 	mcrvs	13, 3, r6, cr5, cr5, {3}
    1c2c:	69472f74 	stmdbvs	r7, {r2, r4, r5, r6, r8, r9, sl, fp, sp}^
    1c30:	62754874 	rsbsvs	r4, r5, #116, 16	; 0x740000
    1c34:	5441442f 	strbpl	r4, [r1], #-1071	; 0xfffffbd1
    1c38:	2d303932 			; <UNDEFINED> instruction: 0x2d303932
    1c3c:	6d72614c 	ldfvse	f6, [r2, #-304]!	; 0xfffffed0
    1c40:	74737973 	ldrbtvc	r7, [r3], #-2419	; 0xfffff68d
    1c44:	6b2f6d65 	blvs	bdd1e0 <startup-0x1f422e20>
    1c48:	6c2f646f 	cfstrsvs	mvf6, [pc], #-444	; 1a94 <startup-0x1fffe56c>
    1c4c:	532f6269 			; <UNDEFINED> instruction: 0x532f6269
    1c50:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
    1c54:	6c5f3446 	cfldrdvs	mvd3, [pc], {70}	; 0x46
    1c58:	532f6269 			; <UNDEFINED> instruction: 0x532f6269
    1c5c:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
    1c60:	78783446 	ldmdavc	r8!, {r1, r2, r6, sl, ip, sp}^
    1c64:	6474535f 	ldrbtvs	r5, [r4], #-863	; 0xfffffca1
    1c68:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
    1c6c:	445f6870 	ldrbmi	r6, [pc], #-2160	; 1c74 <startup-0x1fffe38c>
    1c70:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
    1c74:	72732f72 	rsbsvc	r2, r3, #456	; 0x1c8
    1c78:	74732f63 	ldrbtvc	r2, [r3], #-3939	; 0xfffff09d
    1c7c:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
    1c80:	5f787834 	svcpl	0x00787834
    1c84:	2e636372 	mcrcs	3, 3, r6, cr3, cr2, {3}
    1c88:	4c500063 	mrrcmi	0, 6, r0, r0, cr3	; <UNPREDICTABLE>
    1c8c:	4746434c 	strbmi	r4, [r6, -ip, asr #6]
    1c90:	43520052 	cmpmi	r2, #82	; 0x52
    1c94:	61425f43 	cmpvs	r2, r3, asr #30
    1c98:	70756b63 	rsbsvc	r6, r5, r3, ror #22
    1c9c:	65736552 	ldrbvs	r6, [r3, #-1362]!	; 0xfffffaae
    1ca0:	646d4374 	strbtvs	r4, [sp], #-884	; 0xfffffc8c
    1ca4:	72724500 	rsbsvc	r4, r2, #0, 10
    1ca8:	7453726f 	ldrbvc	r7, [r3], #-623	; 0xfffffd91
    1cac:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
    1cb0:	43435200 	movtmi	r5, #12800	; 0x3200
    1cb4:	4c4c505f 	mcrrmi	0, 5, r5, ip, cr15
    1cb8:	72756f53 	rsbsvc	r6, r5, #332	; 0x14c
    1cbc:	52006563 	andpl	r6, r0, #415236096	; 0x18c00000
    1cc0:	475f4343 	ldrbmi	r4, [pc, -r3, asr #6]
    1cc4:	59537465 	ldmdbpl	r3, {r0, r2, r5, r6, sl, ip, sp, lr}^
    1cc8:	4b4c4353 	blmi	1312a1c <startup-0x1eced5e4>
    1ccc:	72756f53 	rsbsvc	r6, r5, #332	; 0x14c
    1cd0:	52006563 	andpl	r6, r0, #415236096	; 0x18c00000
    1cd4:	575f4343 	ldrbpl	r4, [pc, -r3, asr #6]
    1cd8:	46746961 	ldrbtmi	r6, [r4], -r1, ror #18
    1cdc:	5348726f 	movtpl	r7, #33391	; 0x826f
    1ce0:	61745345 	cmnvs	r4, r5, asr #6
    1ce4:	70557472 	subsvc	r7, r5, r2, ror r4
    1ce8:	4c434800 	mcrrmi	8, 0, r4, r3, cr0
    1cec:	72465f4b 	subvc	r5, r6, #300	; 0x12c
    1cf0:	65757165 	ldrbvs	r7, [r5, #-357]!	; 0xfffffe9b
    1cf4:	0079636e 	rsbseq	r6, r9, lr, ror #6
    1cf8:	5f434352 	svcpl	0x00434352
    1cfc:	31425041 	cmpcc	r2, r1, asr #32
    1d00:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
    1d04:	70006870 	andvc	r6, r0, r0, ror r8
    1d08:	63766c6c 	cmnvs	r6, #108, 24	; 0x6c00
    1d0c:	4352006f 	cmpmi	r2, #111	; 0x6f
    1d10:	4c465f43 	mcrrmi	15, 4, r5, r6, cr3
    1d14:	52004741 	andpl	r4, r0, #17039360	; 0x1040000
    1d18:	4d5f4343 	ldclmi	3, cr4, [pc, #-268]	; 1c14 <startup-0x1fffe3ec>
    1d1c:	43314f43 	teqmi	r1, #268	; 0x10c
    1d20:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    1d24:	43520067 	cmpmi	r2, #103	; 0x67
    1d28:	59535f43 	ldmdbpl	r3, {r0, r1, r6, r8, r9, sl, fp, ip, lr}^
    1d2c:	4b4c4353 	blmi	1312a80 <startup-0x1eced580>
    1d30:	43435200 	movtmi	r5, #12800	; 0x3200
    1d34:	4c4c505f 	mcrrmi	0, 5, r5, ip, cr15
    1d38:	43533249 	cmpmi	r3, #-1879048188	; 0x90000004
    1d3c:	5200646d 	andpl	r6, r0, #1828716544	; 0x6d000000
    1d40:	545f4343 	ldrbpl	r4, [pc], #-835	; 1d48 <startup-0x1fffe2b8>
    1d44:	44657079 	strbtmi	r7, [r5], #-121	; 0xffffff87
    1d48:	70006665 	andvc	r6, r0, r5, ror #12
    1d4c:	63736572 	cmnvs	r3, #478150656	; 0x1c800000
    1d50:	43435200 	movtmi	r5, #12800	; 0x3200
    1d54:	4354525f 	cmpmi	r4, #-268435451	; 0xf0000005
    1d58:	534b4c43 	movtpl	r4, #48195	; 0xbc43
    1d5c:	6372756f 	cmnvs	r2, #465567744	; 0x1bc00000
    1d60:	43520065 	cmpmi	r2, #101	; 0x65
    1d64:	41535f43 	cmpmi	r3, r3, asr #30
    1d68:	6f6c4249 	svcvs	0x006c4249
    1d6c:	43416b63 	movtmi	r6, #7011	; 0x1b63
    1d70:	6f534b4c 	svcvs	0x00534b4c
    1d74:	65637275 	strbvs	r7, [r3, #-629]!	; 0xfffffd8b
    1d78:	43435200 	movtmi	r5, #12800	; 0x3200
    1d7c:	4941535f 	stmdbmi	r1, {r0, r1, r2, r3, r4, r6, r8, r9, ip, lr}^
    1d80:	636f6c42 	cmnvs	pc, #16896	; 0x4200
    1d84:	4c43426b 	sfmmi	f4, 2, [r3], {107}	; 0x6b
    1d88:	756f534b 	strbvc	r5, [pc, #-843]!	; 1a45 <startup-0x1fffe5bb>
    1d8c:	00656372 	rsbeq	r6, r5, r2, ror r3
    1d90:	5f434352 	svcpl	0x00434352
    1d94:	4344544c 	movtmi	r5, #17484	; 0x444c
    1d98:	444b4c43 	strbmi	r4, [fp], #-3139	; 0xfffff3bd
    1d9c:	6f437669 	svcvs	0x00437669
    1da0:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    1da4:	4c4c5000 	marmi	acc0, r5, ip
    1da8:	43533249 	cmpmi	r3, #-1879048188	; 0x90000004
    1dac:	00524746 	subseq	r4, r2, r6, asr #14
    1db0:	5f434352 	svcpl	0x00434352
    1db4:	32424841 	subcc	r4, r2, #4259840	; 0x410000
    1db8:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
    1dbc:	6c436870 	mcrrvs	8, 7, r6, r3, cr0
    1dc0:	4c6b636f 	stclmi	3, cr6, [fp], #-444	; 0xfffffe44
    1dc4:	646f4d50 	strbtvs	r4, [pc], #-3408	; 1dcc <startup-0x1fffe234>
    1dc8:	646d4365 	strbtvs	r4, [sp], #-869	; 0xfffffc9b
    1dcc:	43435200 	movtmi	r5, #12800	; 0x3200
    1dd0:	4c4c505f 	mcrrmi	0, 5, r5, ip, cr15
    1dd4:	43533249 	cmpmi	r3, #-1879048188	; 0x90000004
    1dd8:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    1ddc:	43520067 	cmpmi	r2, #103	; 0x67
    1de0:	53485f43 	movtpl	r5, #36675	; 0x8f43
    1de4:	646d4349 	strbtvs	r4, [sp], #-841	; 0xfffffcb7
    1de8:	43435200 	movtmi	r5, #12800	; 0x3200
    1dec:	4248415f 	submi	r4, r8, #-1073741801	; 0xc0000017
    1df0:	72655032 	rsbvc	r5, r5, #50	; 0x32
    1df4:	00687069 	rsbeq	r7, r8, r9, rrx
    1df8:	32425041 	subcc	r5, r2, #65	; 0x41
    1dfc:	4e45504c 	cdpmi	0, 4, cr5, cr5, cr12, {2}
    1e00:	43520052 	cmpmi	r2, #82	; 0x52
    1e04:	48415f43 	stmdami	r1, {r0, r1, r6, r8, r9, sl, fp, ip, lr}^
    1e08:	65503342 	ldrbvs	r3, [r0, #-834]	; 0xfffffcbe
    1e0c:	68706972 	ldmdavs	r0!, {r1, r4, r5, r6, r8, fp, sp, lr}^
    1e10:	43435200 	movtmi	r5, #12800	; 0x3200
    1e14:	4f434d5f 	svcmi	0x00434d5f
    1e18:	76694432 			; <UNDEFINED> instruction: 0x76694432
    1e1c:	43435200 	movtmi	r5, #12800	; 0x3200
    1e20:	4941535f 	stmdbmi	r1, {r0, r1, r2, r3, r4, r6, r8, r9, ip, lr}^
    1e24:	494c4c50 	stmdbmi	ip, {r4, r6, sl, fp, lr}^
    1e28:	6c435332 	mcrrvs	3, 3, r5, r3, cr2
    1e2c:	7669446b 	strbtvc	r4, [r9], -fp, ror #8
    1e30:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    1e34:	52006769 	andpl	r6, r0, #27525120	; 0x1a40000
    1e38:	525f4343 	subspl	r4, pc, #201326593	; 0xc000001
    1e3c:	4c434354 	mcrrmi	3, 5, r4, r3, cr4
    1e40:	646d434b 	strbtvs	r4, [sp], #-843	; 0xfffffcb5
    1e44:	52524500 	subspl	r4, r2, #0, 10
    1e48:	5200524f 	andpl	r5, r0, #-268435452	; 0xf0000004
    1e4c:	435f4343 	cmpmi	pc, #201326593	; 0xc000001
    1e50:	6b636f6c 	blvs	18ddc08 <startup-0x1e7223f8>
    1e54:	75636553 	strbvc	r6, [r3, #-1363]!	; 0xfffffaad
    1e58:	79746972 	ldmdbvc	r4!, {r1, r4, r5, r6, r8, fp, sp, lr}^
    1e5c:	74737953 	ldrbtvc	r7, [r3], #-2387	; 0xfffff6ad
    1e60:	6d436d65 	stclvs	13, cr6, [r3, #-404]	; 0xfffffe6c
    1e64:	43520064 	cmpmi	r2, #100	; 0x64
    1e68:	4c505f43 	mrrcmi	15, 4, r5, r0, cr3
    1e6c:	5332494c 	teqpl	r2, #76, 18	; 0x130000
    1e70:	51766944 	cmnpl	r6, r4, asr #18
    1e74:	43435200 	movtmi	r5, #12800	; 0x3200
    1e78:	4c4c505f 	mcrrmi	0, 5, r5, ip, cr15
    1e7c:	43494153 	movtmi	r4, #37203	; 0x9153
    1e80:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    1e84:	48410067 	stmdami	r1, {r0, r1, r2, r5, r6}^
    1e88:	4e453342 	cdpmi	3, 4, cr3, cr5, cr2, {2}
    1e8c:	43520052 	cmpmi	r2, #82	; 0x52
    1e90:	534c5f43 	movtpl	r5, #53059	; 0xcf43
    1e94:	646f4d45 	strbtvs	r4, [pc], #-3397	; 1e9c <startup-0x1fffe164>
    1e98:	6e6f4365 	cdpvs	3, 6, cr4, cr15, cr5, {3}
    1e9c:	00676966 	rsbeq	r6, r7, r6, ror #18
    1ea0:	32424841 	subcc	r4, r2, #4259840	; 0x410000
    1ea4:	4e45504c 	cdpmi	0, 4, cr5, cr5, cr12, {2}
    1ea8:	43520052 	cmpmi	r2, #82	; 0x52
    1eac:	434d5f43 	movtmi	r5, #57155	; 0xdf43
    1eb0:	6944314f 	stmdbvs	r4, {r0, r1, r2, r3, r6, r8, ip, sp}^
    1eb4:	43520076 	cmpmi	r2, #118	; 0x76
    1eb8:	50415f43 	subpl	r5, r1, r3, asr #30
    1ebc:	65503242 	ldrbvs	r3, [r0, #-578]	; 0xfffffdbe
    1ec0:	68706972 	ldmdavs	r0!, {r1, r4, r5, r6, r8, fp, sp, lr}^
    1ec4:	65736552 	ldrbvs	r6, [r3, #-1362]!	; 0xfffffaae
    1ec8:	646d4374 	strbtvs	r4, [sp], #-884	; 0xfffffc8c
    1ecc:	43435200 	movtmi	r5, #12800	; 0x3200
    1ed0:	4f434d5f 	svcmi	0x00434d5f
    1ed4:	756f5332 	strbvc	r5, [pc, #-818]!	; 1baa <startup-0x1fffe456>
    1ed8:	00656372 	rsbeq	r6, r5, r2, ror r3
    1edc:	5f434352 	svcpl	0x00434352
    1ee0:	43533249 	cmpmi	r3, #-1879048188	; 0x90000004
    1ee4:	6f534b4c 	svcvs	0x00534b4c
    1ee8:	65637275 	strbvs	r7, [r3, #-629]!	; 0xfffffd8b
    1eec:	4c4c5000 	marmi	acc0, r5, ip
    1ef0:	43494153 	movtmi	r4, #37203	; 0x9153
    1ef4:	00524746 	subseq	r4, r2, r6, asr #14
    1ef8:	45534552 	ldrbmi	r4, [r3, #-1362]	; 0xfffffaae
    1efc:	44455652 	strbmi	r5, [r5], #-1618	; 0xfffff9ae
    1f00:	43520036 	cmpmi	r2, #54	; 0x36
    1f04:	65475f43 	strbvs	r5, [r7, #-3907]	; 0xfffff0bd
    1f08:	616c4674 	smcvs	50276	; 0xc464
    1f0c:	61745367 	cmnvs	r4, r7, ror #6
    1f10:	00737574 	rsbseq	r7, r3, r4, ror r5
    1f14:	5f434352 	svcpl	0x00434352
    1f18:	43455348 	movtmi	r5, #21320	; 0x5348
    1f1c:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    1f20:	43520067 	cmpmi	r2, #103	; 0x67
    1f24:	41535f43 	cmpmi	r3, r3, asr #30
    1f28:	6f6c4249 	svcvs	0x006c4249
    1f2c:	43426b63 	movtmi	r6, #11107	; 0x2b63
    1f30:	6f434b4c 	svcvs	0x00434b4c
    1f34:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    1f38:	4c4c5000 	marmi	acc0, r5, ip
    1f3c:	4e494153 	mcrmi	1, 2, r4, cr9, cr3, {2}
    1f40:	4c4c5000 	marmi	acc0, r5, ip
    1f44:	51494153 	cmppl	r9, r3, asr r1
    1f48:	4c4c5000 	marmi	acc0, r5, ip
    1f4c:	52494153 	subpl	r4, r9, #-1073741804	; 0xc0000014
    1f50:	43435200 	movtmi	r5, #12800	; 0x3200
    1f54:	4d49545f 	cfstrdmi	mvd5, [r9, #-380]	; 0xfffffe84
    1f58:	504b4c43 	subpl	r4, fp, r3, asr #24
    1f5c:	63736572 	cmnvs	r3, #478150656	; 0x1c800000
    1f60:	72656c61 	rsbvc	r6, r5, #24832	; 0x6100
    1f64:	43435200 	movtmi	r5, #12800	; 0x3200
    1f68:	4c4c505f 	mcrrmi	0, 5, r5, ip, cr15
    1f6c:	00646d43 	rsbeq	r6, r4, r3, asr #26
    1f70:	5f434352 	svcpl	0x00434352
    1f74:	31424841 	cmpcc	r2, r1, asr #16
    1f78:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
    1f7c:	6c436870 	mcrrvs	8, 7, r6, r3, cr0
    1f80:	436b636f 	cmnmi	fp, #-1140850687	; 0xbc000001
    1f84:	4100646d 	tstmi	r0, sp, ror #8
    1f88:	45324250 	ldrmi	r4, [r2, #-592]!	; 0xfffffdb0
    1f8c:	4100524e 	tstmi	r0, lr, asr #4
    1f90:	52334248 	eorspl	r4, r3, #72, 4	; 0x80000004
    1f94:	00525453 	subseq	r5, r2, r3, asr r4
    1f98:	5f434352 	svcpl	0x00434352
    1f9c:	65646f4d 	strbvs	r6, [r4, #-3917]!	; 0xfffff0b3
    1fa0:	43435200 	movtmi	r5, #12800	; 0x3200
    1fa4:	4248415f 	submi	r4, r8, #-1073741801	; 0xc0000017
    1fa8:	72655032 	rsbvc	r5, r5, #50	; 0x32
    1fac:	52687069 	rsbpl	r7, r8, #105	; 0x69
    1fb0:	74657365 	strbtvc	r7, [r5], #-869	; 0xfffffc9b
    1fb4:	00646d43 	rsbeq	r6, r4, r3, asr #26
    1fb8:	5f434352 	svcpl	0x00434352
    1fbc:	31425041 	cmpcc	r2, r1, asr #32
    1fc0:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
    1fc4:	6c436870 	mcrrvs	8, 7, r6, r3, cr0
    1fc8:	4c6b636f 	stclmi	3, cr6, [fp], #-444	; 0xfffffe44
    1fcc:	646f4d50 	strbtvs	r4, [pc], #-3408	; 1fd4 <startup-0x1fffe02c>
    1fd0:	646d4365 	strbtvs	r4, [sp], #-869	; 0xfffffc9b
    1fd4:	43435200 	movtmi	r5, #12800	; 0x3200
    1fd8:	4c43505f 	mcrrmi	0, 5, r5, r3, cr15
    1fdc:	6f43324b 	svcvs	0x0043324b
    1fe0:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    1fe4:	43435200 	movtmi	r5, #12800	; 0x3200
    1fe8:	5359535f 	cmppl	r9, #2080374785	; 0x7c000001
    1fec:	534b4c43 	movtpl	r4, #48195	; 0xbc43
    1ff0:	6372756f 	cmnvs	r2, #465567744	; 0x1bc00000
    1ff4:	43520065 	cmpmi	r2, #101	; 0x65
    1ff8:	53485f43 	movtpl	r5, #36675	; 0x8f43
    1ffc:	43500045 	cmpmi	r0, #69	; 0x45
    2000:	5f314b4c 	svcpl	0x00314b4c
    2004:	71657246 	cmnvc	r5, r6, asr #4
    2008:	636e6575 	cmnvs	lr, #490733568	; 0x1d400000
    200c:	50410079 	subpl	r0, r1, r9, ror r0
    2010:	42484142 	submi	r4, r8, #-2147483632	; 0x80000010
    2014:	73657250 	cmnvc	r5, #80, 4
    2018:	62615463 	rsbvs	r5, r1, #1660944384	; 0x63000000
    201c:	5200656c 	andpl	r6, r0, #108, 10	; 0x1b000000
    2020:	415f4343 	cmpmi	pc, r3, asr #6
    2024:	73756a64 	cmnvc	r5, #100, 20	; 0x64000
    2028:	49534874 	ldmdbmi	r3, {r2, r4, r5, r6, fp, lr}^
    202c:	696c6143 	stmdbvs	ip!, {r0, r1, r6, r8, sp, lr}^
    2030:	74617262 	strbtvc	r7, [r1], #-610	; 0xfffffd9e
    2034:	566e6f69 	strbtpl	r6, [lr], -r9, ror #30
    2038:	65756c61 	ldrbvs	r6, [r5, #-3169]!	; 0xfffff39f
    203c:	65736800 	ldrbvs	r6, [r3, #-2048]!	; 0xfffff800
    2040:	74617473 	strbtvc	r7, [r1], #-1139	; 0xfffffb8d
    2044:	50007375 	andpl	r7, r0, r5, ror r3
    2048:	32494c4c 	subcc	r4, r9, #76, 24	; 0x4c00
    204c:	52004e53 	andpl	r4, r0, #1328	; 0x530
    2050:	475f4343 	ldrbmi	r4, [pc, -r3, asr #6]
    2054:	6c437465 	cfstrdvs	mvd7, [r3], {101}	; 0x65
    2058:	736b636f 	cmnvc	fp, #-1140850687	; 0xbc000001
    205c:	71657246 	cmnvc	r5, r6, asr #4
    2060:	43435200 	movtmi	r5, #12800	; 0x3200
    2064:	4250415f 	subsmi	r4, r0, #-1073741801	; 0xc0000017
    2068:	72655032 	rsbvc	r5, r5, #50	; 0x32
    206c:	43687069 	cmnmi	r8, #105	; 0x69
    2070:	6b636f6c 	blvs	18dde28 <startup-0x1e7221d8>
    2074:	00646d43 	rsbeq	r6, r4, r3, asr #26
    2078:	32424841 	subcc	r4, r2, #4259840	; 0x410000
    207c:	52545352 	subspl	r5, r4, #1207959553	; 0x48000001
    2080:	43435200 	movtmi	r5, #12800	; 0x3200
    2084:	4965445f 	stmdbmi	r5!, {r0, r1, r2, r3, r4, r6, sl, lr}^
    2088:	0074696e 	rsbseq	r6, r4, lr, ror #18
    208c:	494c4c50 	stmdbmi	ip, {r4, r6, sl, fp, lr}^
    2090:	00525332 	subseq	r5, r2, r2, lsr r3
    2094:	5f434352 	svcpl	0x00434352
    2098:	49746547 	ldmdbmi	r4!, {r0, r1, r2, r6, r8, sl, sp, lr}^
    209c:	61745354 	cmnvs	r4, r4, asr r3
    20a0:	00737574 	rsbseq	r7, r3, r4, ror r5
    20a4:	31425041 	cmpcc	r2, r1, asr #32
    20a8:	00524e45 	subseq	r4, r2, r5, asr #28
    20ac:	32424841 	subcc	r4, r2, #4259840	; 0x410000
    20b0:	00524e45 	subseq	r4, r2, r5, asr #28
    20b4:	5f434352 	svcpl	0x00434352
    20b8:	33424841 	movtcc	r4, #10305	; 0x2841
    20bc:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
    20c0:	6c436870 	mcrrvs	8, 7, r6, r3, cr0
    20c4:	4c6b636f 	stclmi	3, cr6, [fp], #-444	; 0xfffffe44
    20c8:	646f4d50 	strbtvs	r4, [pc], #-3408	; 20d0 <startup-0x1fffdf30>
    20cc:	646d4365 	strbtvs	r4, [sp], #-869	; 0xfffffc9b
    20d0:	61747300 	cmnvs	r4, r0, lsl #6
    20d4:	70757472 	rsbsvc	r7, r5, r2, ror r4
    20d8:	6e756f63 	cdpvs	15, 7, cr6, cr5, cr3, {3}
    20dc:	00726574 	rsbseq	r6, r2, r4, ror r5
    20e0:	5f434352 	svcpl	0x00434352
    20e4:	32425041 	subcc	r5, r2, #65	; 0x41
    20e8:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
    20ec:	52006870 	andpl	r6, r0, #112, 16	; 0x700000
    20f0:	545f4343 	ldrbpl	r4, [pc], #-835	; 20f8 <startup-0x1fffdf08>
    20f4:	4c434d49 	mcrrmi	13, 4, r4, r3, cr9
    20f8:	6572504b 	ldrbvs	r5, [r2, #-75]!	; 0xffffffb5
    20fc:	6e6f4373 	mcrvs	3, 3, r4, cr15, cr3, {3}
    2100:	00676966 	rsbeq	r6, r7, r6, ror #18
    2104:	5f434352 	svcpl	0x00434352
    2108:	43533249 	cmpmi	r3, #-1879048188	; 0x90000004
    210c:	6f434b4c 	svcvs	0x00434b4c
    2110:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    2114:	43435200 	movtmi	r5, #12800	; 0x3200
    2118:	4f434d5f 	svcmi	0x00434d5f
    211c:	6e6f4332 	mcrvs	3, 3, r4, cr15, cr2, {1}
    2120:	00676966 	rsbeq	r6, r7, r6, ror #18
    2124:	47435353 	smlsldmi	r5, r3, r3, r3
    2128:	48410052 	stmdami	r1, {r1, r4, r6}^
    212c:	504c3342 	subpl	r3, ip, r2, asr #6
    2130:	00524e45 	subseq	r4, r2, r5, asr #28
    2134:	31425041 	cmpcc	r2, r1, asr #32
    2138:	52545352 	subspl	r5, r4, #1207959553	; 0x48000001
    213c:	43435200 	movtmi	r5, #12800	; 0x3200
    2140:	49534c5f 	ldmdbmi	r3, {r0, r1, r2, r3, r4, r6, sl, fp, lr}^
    2144:	00646d43 	rsbeq	r6, r4, r3, asr #26
    2148:	41474b43 	cmpmi	r7, r3, asr #22
    214c:	524e4554 	subpl	r4, lr, #84, 10	; 0x15000000
    2150:	43444200 	movtmi	r4, #16896	; 0x4200
    2154:	43520052 	cmpmi	r2, #82	; 0x52
    2158:	50415f43 	subpl	r5, r1, r3, asr #30
    215c:	65503142 	ldrbvs	r3, [r0, #-322]	; 0xfffffebe
    2160:	68706972 	ldmdavs	r0!, {r1, r4, r5, r6, r8, fp, sp, lr}^
    2164:	636f6c43 	cmnvs	pc, #17152	; 0x4300
    2168:	646d436b 	strbtvs	r4, [sp], #-875	; 0xfffffc95
    216c:	43435200 	movtmi	r5, #12800	; 0x3200
    2170:	4354495f 	cmpmi	r4, #1556480	; 0x17c000
    2174:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    2178:	55530067 	ldrbpl	r0, [r3, #-103]	; 0xffffff99
    217c:	53454343 	movtpl	r4, #21315	; 0x5343
    2180:	43520053 	cmpmi	r2, #83	; 0x53
    2184:	4c505f43 	mrrcmi	15, 4, r5, r0, cr3
    2188:	6e6f434c 	cdpvs	3, 6, cr4, cr15, cr12, {2}
    218c:	00676966 	rsbeq	r6, r7, r6, ror #18
    2190:	5f434352 	svcpl	0x00434352
    2194:	636f6c43 	cmnvs	pc, #17152	; 0x4300
    2198:	7954736b 	ldmdbvc	r4, {r0, r1, r3, r5, r6, r8, r9, ip, sp, lr}^
    219c:	65446570 	strbvs	r6, [r4, #-1392]	; 0xfffffa90
    21a0:	48410066 	stmdami	r1, {r1, r2, r5, r6}^
    21a4:	4e453142 	dvfmism	f3, f5, f2
    21a8:	43520052 	cmpmi	r2, #82	; 0x52
    21ac:	54525f43 	ldrbpl	r5, [r2], #-3907	; 0xfffff0bd
    21b0:	4b4c4343 	blmi	1312ec4 <startup-0x1eced13c>
    21b4:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    21b8:	70006769 	andvc	r6, r0, r9, ror #14
    21bc:	6f736c6c 	svcvs	0x00736c6c
    21c0:	65637275 	strbvs	r7, [r3, #-629]!	; 0xfffffd8b
    21c4:	43435200 	movtmi	r5, #12800	; 0x3200
    21c8:	4248415f 	submi	r4, r8, #-1073741801	; 0xc0000017
    21cc:	72655031 	rsbvc	r5, r5, #49	; 0x31
    21d0:	43687069 	cmnmi	r8, #105	; 0x69
    21d4:	6b636f6c 	blvs	18ddf8c <startup-0x1e722074>
    21d8:	6f4d504c 	svcvs	0x004d504c
    21dc:	6d436564 	cfstr64vs	mvdx6, [r3, #-400]	; 0xfffffe70
    21e0:	43520064 	cmpmi	r2, #100	; 0x64
    21e4:	48415f43 	stmdami	r1, {r0, r1, r6, r8, r9, sl, fp, ip, lr}^
    21e8:	65503342 	ldrbvs	r3, [r0, #-834]	; 0xfffffcbe
    21ec:	68706972 	ldmdavs	r0!, {r1, r4, r5, r6, r8, fp, sp, lr}^
    21f0:	636f6c43 	cmnvs	pc, #17152	; 0x4300
    21f4:	646d436b 	strbtvs	r4, [sp], #-875	; 0xfffffc95
    21f8:	66756200 	ldrbtvs	r6, [r5], -r0, lsl #4
    21fc:	50726566 	rsbspl	r6, r2, r6, ror #10
    2200:	63007475 	movwvs	r7, #1141	; 0x475
    2204:	746e756f 	strbtvc	r7, [lr], #-1391	; 0xfffffa91
    2208:	2f3a4300 	svccs	0x003a4300
    220c:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
    2210:	64412f73 	strbvs	r2, [r1], #-3955	; 0xfffff08d
    2214:	2f746d61 	svccs	0x00746d61
    2218:	44656e4f 	strbtmi	r6, [r5], #-3663	; 0xfffff1b1
    221c:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
    2220:	6b6f442f 	blvs	1bd32e4 <startup-0x1e42cd1c>
    2224:	6e656d75 	mcrvs	13, 3, r6, cr5, cr5, {3}
    2228:	69472f74 	stmdbvs	r7, {r2, r4, r5, r6, r8, r9, sl, fp, sp}^
    222c:	62754874 	rsbsvs	r4, r5, #116, 16	; 0x740000
    2230:	5441442f 	strbpl	r4, [r1], #-1071	; 0xfffffbd1
    2234:	2d303932 			; <UNDEFINED> instruction: 0x2d303932
    2238:	6d72614c 	ldfvse	f6, [r2, #-304]!	; 0xfffffed0
    223c:	74737973 	ldrbtvc	r7, [r3], #-2419	; 0xfffff68d
    2240:	6b2f6d65 	blvs	bdd7dc <startup-0x1f422824>
    2244:	6c2f646f 	cfstrsvs	mvf6, [pc], #-444	; 2090 <startup-0x1fffdf70>
    2248:	622f6269 	eorvs	r6, pc, #-1879048186	; 0x90000006
    224c:	65666675 	strbvs	r6, [r6, #-1653]!	; 0xfffff98b
    2250:	00632e72 	rsbeq	r2, r3, r2, ror lr
    2254:	4f464946 	svcmi	0x00464946
    2258:	66756200 	ldrbtvs	r6, [r5], -r0, lsl #4
    225c:	4f726566 	svcmi	0x00726566
    2260:	72726576 	rsbsvc	r6, r2, #494927872	; 0x1d800000
    2264:	4c656469 	cfstrdmi	mvd6, [r5], #-420	; 0xfffffe5c
    2268:	00747361 	rsbseq	r7, r4, r1, ror #6
    226c:	74736564 	ldrbtvc	r6, [r3], #-1380	; 0xfffffa9c
    2270:	66756200 	ldrbtvs	r6, [r5], -r0, lsl #4
    2274:	6c650066 	stclvs	0, cr0, [r5], #-408	; 0xfffffe68
    2278:	62006d65 	andvs	r6, r0, #6464	; 0x1940
    227c:	65666675 	strbvs	r6, [r6, #-1653]!	; 0xfffff98b
    2280:	74654772 	strbtvc	r4, [r5], #-1906	; 0xfffff88e
    2284:	66756200 	ldrbtvs	r6, [r5], -r0, lsl #4
    2288:	49726566 	ldmdbmi	r2!, {r1, r2, r5, r6, r8, sl, sp, lr}^
    228c:	0074696e 	rsbseq	r6, r4, lr, ror #18
    2290:	66667562 	strbtvs	r7, [r6], -r2, ror #10
    2294:	70007265 	andvc	r7, r0, r5, ror #4
    2298:	49766572 	ldmdbmi	r6!, {r1, r4, r5, r6, r8, sl, sp, lr}^
    229c:	7865646e 	stmdavc	r5!, {r1, r2, r3, r5, r6, sl, sp, lr}^
	...

Disassembly of section .comment:

00000000 <.comment>:
   0:	3a434347 	bcc	10d0d24 <startup-0x1ef2f2dc>
   4:	4e472820 	cdpmi	8, 4, cr2, cr7, cr0, {1}
   8:	6f542055 	svcvs	0x00542055
   c:	20736c6f 	rsbscs	r6, r3, pc, ror #24
  10:	20726f66 	rsbscs	r6, r2, r6, ror #30
  14:	206d7241 	rsbcs	r7, sp, r1, asr #4
  18:	65626d45 	strbvs	r6, [r2, #-3397]!	; 0xfffff2bb
  1c:	64656464 	strbtvs	r6, [r5], #-1124	; 0xfffffb9c
  20:	6f725020 	svcvs	0x00725020
  24:	73736563 	cmnvc	r3, #415236096	; 0x18c00000
  28:	2073726f 	rsbscs	r7, r3, pc, ror #4
  2c:	30322d37 	eorscc	r2, r2, r7, lsr sp
  30:	712d3731 			; <UNDEFINED> instruction: 0x712d3731
  34:	616d2d34 	cmnvs	sp, r4, lsr sp
  38:	29726f6a 	ldmdbcs	r2!, {r1, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
  3c:	322e3720 	eorcc	r3, lr, #32, 14	; 0x800000
  40:	3220312e 	eorcc	r3, r0, #-2147483637	; 0x8000000b
  44:	30373130 	eorscc	r3, r7, r0, lsr r1
  48:	20343039 	eorscs	r3, r4, r9, lsr r0
  4c:	6c657228 	sfmvs	f7, 2, [r5], #-160	; 0xffffff60
  50:	65736165 	ldrbvs	r6, [r3, #-357]!	; 0xfffffe9b
  54:	415b2029 	cmpmi	fp, r9, lsr #32
  58:	652f4d52 	strvs	r4, [pc, #-3410]!	; fffff30e <dissarmedBit+0xdfffb3ce>
  5c:	6465626d 	strbtvs	r6, [r5], #-621	; 0xfffffd93
  60:	2d646564 	cfstr64cs	mvdx6, [r4, #-400]!	; 0xfffffe70
  64:	72622d37 	rsbvc	r2, r2, #3520	; 0xdc0
  68:	68636e61 	stmdavs	r3!, {r0, r5, r6, r9, sl, fp, sp, lr}^
  6c:	76657220 	strbtvc	r7, [r5], -r0, lsr #4
  70:	6f697369 	svcvs	0x00697369
  74:	3532206e 	ldrcc	r2, [r2, #-110]!	; 0xffffff92
  78:	34303235 	ldrtcc	r3, [r0], #-565	; 0xfffffdcb
  7c:	Address 0x0000007c is out of bounds.


Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00002b41 	andeq	r2, r0, r1, asr #22
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	00000021 	andeq	r0, r0, r1, lsr #32
  10:	2d533605 	ldclcs	6, cr3, [r3, #-20]	; 0xffffffec
  14:	0c06004d 	stceq	0, cr0, [r6], {77}	; 0x4d
  18:	01094d07 	tsteq	r9, r7, lsl #26
  1c:	01140412 	tsteq	r4, r2, lsl r4
  20:	03170115 	tsteq	r7, #1073741829	; 0x40000005
  24:	01190118 	tsteq	r9, r8, lsl r1
  28:	061e011a 			; <UNDEFINED> instruction: 0x061e011a

Disassembly of section .debug_frame:

00000000 <.debug_frame>:
       0:	0000000c 	andeq	r0, r0, ip
       4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
       8:	7c020001 	stcvc	0, cr0, [r2], {1}
       c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
      10:	00000018 	andeq	r0, r0, r8, lsl r0
      14:	00000000 	andeq	r0, r0, r0
      18:	20000010 	andcs	r0, r0, r0, lsl r0
      1c:	00000018 	andeq	r0, r0, r8, lsl r0
      20:	40080e41 	andmi	r0, r8, r1, asr #28
      24:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
      28:	070d4101 	streq	r4, [sp, -r1, lsl #2]
      2c:	0000001c 	andeq	r0, r0, ip, lsl r0
      30:	00000000 	andeq	r0, r0, r0
      34:	20000028 	andcs	r0, r0, r8, lsr #32
      38:	00000044 	andeq	r0, r0, r4, asr #32
      3c:	40080e41 	andmi	r0, r8, r1, asr #28
      40:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
      44:	180e4101 	stmdane	lr, {r0, r8, lr}
      48:	00070d41 	andeq	r0, r7, r1, asr #26
      4c:	00000028 	andeq	r0, r0, r8, lsr #32
      50:	00000000 	andeq	r0, r0, r0
      54:	2000006c 	andcs	r0, r0, ip, rrx
      58:	00000160 	andeq	r0, r0, r0, ror #2
      5c:	40140e41 	andsmi	r0, r4, r1, asr #28
      60:	85400584 	strbhi	r0, [r0, #-1412]	; 0xfffffa7c
      64:	03864004 	orreq	r4, r6, #4
      68:	40028740 	andmi	r8, r2, r0, asr #14
      6c:	0e41018e 	dvfeqd	f0, f1, #0.5
      70:	070c4150 	smlsdeq	ip, r0, r1, r4
      74:	00000048 	andeq	r0, r0, r8, asr #32
      78:	00000020 	andeq	r0, r0, r0, lsr #32
      7c:	00000000 	andeq	r0, r0, r0
      80:	200001cc 	andcs	r0, r0, ip, asr #3
      84:	00000034 	andeq	r0, r0, r4, lsr r0
      88:	400c0e41 	andmi	r0, ip, r1, asr #28
      8c:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
      90:	018e4002 	orreq	r4, lr, r2
      94:	41300e41 	teqmi	r0, r1, asr #28
      98:	0000070d 	andeq	r0, r0, sp, lsl #14
      9c:	0000000c 	andeq	r0, r0, ip
      a0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
      a4:	7c020001 	stcvc	0, cr0, [r2], {1}
      a8:	000d0c0e 	andeq	r0, sp, lr, lsl #24
      ac:	00000020 	andeq	r0, r0, r0, lsr #32
      b0:	0000009c 	muleq	r0, ip, r0
      b4:	20000200 	andcs	r0, r0, r0, lsl #4
      b8:	000000d4 	ldrdeq	r0, [r0], -r4
      bc:	400c0e41 	andmi	r0, ip, r1, asr #28
      c0:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
      c4:	018e4002 	orreq	r4, lr, r2
      c8:	41200e41 			; <UNDEFINED> instruction: 0x41200e41
      cc:	0000070d 	andeq	r0, r0, sp, lsl #14
      d0:	0000001c 	andeq	r0, r0, ip, lsl r0
      d4:	0000009c 	muleq	r0, ip, r0
      d8:	200002d4 	ldrdcs	r0, [r0], -r4
      dc:	0000009c 	muleq	r0, ip, r0
      e0:	40080e41 	andmi	r0, r8, r1, asr #28
      e4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
      e8:	200e4101 	andcs	r4, lr, r1, lsl #2
      ec:	00070d41 	andeq	r0, r7, r1, asr #26
      f0:	0000001c 	andeq	r0, r0, ip, lsl r0
      f4:	0000009c 	muleq	r0, ip, r0
      f8:	20000370 	andcs	r0, r0, r0, ror r3
      fc:	00000088 	andeq	r0, r0, r8, lsl #1
     100:	40080e41 	andmi	r0, r8, r1, asr #28
     104:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     108:	200e4101 	andcs	r4, lr, r1, lsl #2
     10c:	00070d41 	andeq	r0, r7, r1, asr #26
     110:	0000001c 	andeq	r0, r0, ip, lsl r0
     114:	0000009c 	muleq	r0, ip, r0
     118:	200003f8 	strdcs	r0, [r0], -r8
     11c:	00000028 	andeq	r0, r0, r8, lsr #32
     120:	40080e41 	andmi	r0, r8, r1, asr #28
     124:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     128:	180e4101 	stmdane	lr, {r0, r8, lr}
     12c:	00070d41 	andeq	r0, r7, r1, asr #26
     130:	00000020 	andeq	r0, r0, r0, lsr #32
     134:	0000009c 	muleq	r0, ip, r0
     138:	20000420 	andcs	r0, r0, r0, lsr #8
     13c:	00000088 	andeq	r0, r0, r8, lsl #1
     140:	400c0e41 	andmi	r0, ip, r1, asr #28
     144:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
     148:	018e4002 	orreq	r4, lr, r2
     14c:	41200e41 			; <UNDEFINED> instruction: 0x41200e41
     150:	0000070d 	andeq	r0, r0, sp, lsl #14
     154:	00000020 	andeq	r0, r0, r0, lsr #32
     158:	0000009c 	muleq	r0, ip, r0
     15c:	200004a8 	andcs	r0, r0, r8, lsr #9
     160:	00000098 	muleq	r0, r8, r0
     164:	400c0e41 	andmi	r0, ip, r1, asr #28
     168:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
     16c:	018e4002 	orreq	r4, lr, r2
     170:	41200e41 			; <UNDEFINED> instruction: 0x41200e41
     174:	0000070d 	andeq	r0, r0, sp, lsl #14
     178:	0000001c 	andeq	r0, r0, ip, lsl r0
     17c:	0000009c 	muleq	r0, ip, r0
     180:	20000540 	andcs	r0, r0, r0, asr #10
     184:	0000003a 	andeq	r0, r0, sl, lsr r0
     188:	40080e41 	andmi	r0, r8, r1, asr #28
     18c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     190:	200e4101 	andcs	r4, lr, r1, lsl #2
     194:	00070d41 	andeq	r0, r7, r1, asr #26
     198:	0000001c 	andeq	r0, r0, ip, lsl r0
     19c:	0000009c 	muleq	r0, ip, r0
     1a0:	2000057a 	andcs	r0, r0, sl, ror r5
     1a4:	0000003a 	andeq	r0, r0, sl, lsr r0
     1a8:	40080e41 	andmi	r0, r8, r1, asr #28
     1ac:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     1b0:	100e4101 	andne	r4, lr, r1, lsl #2
     1b4:	00070d41 	andeq	r0, r7, r1, asr #26
     1b8:	0000001c 	andeq	r0, r0, ip, lsl r0
     1bc:	0000009c 	muleq	r0, ip, r0
     1c0:	200005b4 			; <UNDEFINED> instruction: 0x200005b4
     1c4:	0000001e 	andeq	r0, r0, lr, lsl r0
     1c8:	40080e41 	andmi	r0, r8, r1, asr #28
     1cc:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     1d0:	100e4101 	andne	r4, lr, r1, lsl #2
     1d4:	00070d41 	andeq	r0, r7, r1, asr #26
     1d8:	0000000c 	andeq	r0, r0, ip
     1dc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     1e0:	7c020001 	stcvc	0, cr0, [r2], {1}
     1e4:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     1e8:	0000001c 	andeq	r0, r0, ip, lsl r0
     1ec:	000001d8 	ldrdeq	r0, [r0], -r8
     1f0:	200005d4 	ldrdcs	r0, [r0], -r4
     1f4:	000001c8 	andeq	r0, r0, r8, asr #3
     1f8:	40080e41 	andmi	r0, r8, r1, asr #28
     1fc:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     200:	100e4101 	andne	r4, lr, r1, lsl #2
     204:	00070d41 	andeq	r0, r7, r1, asr #26
     208:	0000000c 	andeq	r0, r0, ip
     20c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     210:	7c020001 	stcvc	0, cr0, [r2], {1}
     214:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     218:	0000001c 	andeq	r0, r0, ip, lsl r0
     21c:	00000208 	andeq	r0, r0, r8, lsl #4
     220:	2000079c 	mulcs	r0, ip, r7
     224:	0000002c 	andeq	r0, r0, ip, lsr #32
     228:	40080e41 	andmi	r0, r8, r1, asr #28
     22c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     230:	180e4101 	stmdane	lr, {r0, r8, lr}
     234:	00070d41 	andeq	r0, r7, r1, asr #26
     238:	0000001c 	andeq	r0, r0, ip, lsl r0
     23c:	00000208 	andeq	r0, r0, r8, lsl #4
     240:	200007c8 	andcs	r0, r0, r8, asr #15
     244:	0000001e 	andeq	r0, r0, lr, lsl r0
     248:	40080e41 	andmi	r0, r8, r1, asr #28
     24c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     250:	100e4101 	andne	r4, lr, r1, lsl #2
     254:	00070d41 	andeq	r0, r7, r1, asr #26
     258:	0000001c 	andeq	r0, r0, ip, lsl r0
     25c:	00000208 	andeq	r0, r0, r8, lsl #4
     260:	200007e6 	andcs	r0, r0, r6, ror #15
     264:	00000096 	muleq	r0, r6, r0
     268:	40080e41 	andmi	r0, r8, r1, asr #28
     26c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     270:	180e4101 	stmdane	lr, {r0, r8, lr}
     274:	00070d41 	andeq	r0, r7, r1, asr #26
     278:	0000001c 	andeq	r0, r0, ip, lsl r0
     27c:	00000208 	andeq	r0, r0, r8, lsl #4
     280:	2000087c 	andcs	r0, r0, ip, ror r8
     284:	00000064 	andeq	r0, r0, r4, rrx
     288:	40080e41 	andmi	r0, r8, r1, asr #28
     28c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     290:	180e4101 	stmdane	lr, {r0, r8, lr}
     294:	00070d41 	andeq	r0, r7, r1, asr #26
     298:	0000001c 	andeq	r0, r0, ip, lsl r0
     29c:	00000208 	andeq	r0, r0, r8, lsl #4
     2a0:	200008e0 	andcs	r0, r0, r0, ror #17
     2a4:	0000005c 	andeq	r0, r0, ip, asr r0
     2a8:	40080e41 	andmi	r0, r8, r1, asr #28
     2ac:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     2b0:	180e4101 	stmdane	lr, {r0, r8, lr}
     2b4:	00070d41 	andeq	r0, r7, r1, asr #26
     2b8:	0000001c 	andeq	r0, r0, ip, lsl r0
     2bc:	00000208 	andeq	r0, r0, r8, lsl #4
     2c0:	2000093c 	andcs	r0, r0, ip, lsr r9
     2c4:	000000e0 	andeq	r0, r0, r0, ror #1
     2c8:	40080e41 	andmi	r0, r8, r1, asr #28
     2cc:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     2d0:	200e4101 	andcs	r4, lr, r1, lsl #2
     2d4:	00070d41 	andeq	r0, r7, r1, asr #26
     2d8:	0000000c 	andeq	r0, r0, ip
     2dc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     2e0:	7c020001 	stcvc	0, cr0, [r2], {1}
     2e4:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     2e8:	0000001c 	andeq	r0, r0, ip, lsl r0
     2ec:	000002d8 	ldrdeq	r0, [r0], -r8
     2f0:	20000a1c 	andcs	r0, r0, ip, lsl sl
     2f4:	00000024 	andeq	r0, r0, r4, lsr #32
     2f8:	40080e41 	andmi	r0, r8, r1, asr #28
     2fc:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     300:	100e4101 	andne	r4, lr, r1, lsl #2
     304:	00070d41 	andeq	r0, r7, r1, asr #26
     308:	00000024 	andeq	r0, r0, r4, lsr #32
     30c:	000002d8 	ldrdeq	r0, [r0], -r8
     310:	20000a40 	andcs	r0, r0, r0, asr #20
     314:	000000f8 	strdeq	r0, [r0], -r8
     318:	40100e41 	andsmi	r0, r0, r1, asr #28
     31c:	85400484 	strbhi	r0, [r0, #-1156]	; 0xfffffb7c
     320:	02874003 	addeq	r4, r7, #3
     324:	41018e40 	tstmi	r1, r0, asr #28
     328:	0d41200e 	stcleq	0, cr2, [r1, #-56]	; 0xffffffc8
     32c:	00000007 	andeq	r0, r0, r7
     330:	0000001c 	andeq	r0, r0, ip, lsl r0
     334:	000002d8 	ldrdeq	r0, [r0], -r8
     338:	20000b38 	andcs	r0, r0, r8, lsr fp
     33c:	0000002c 	andeq	r0, r0, ip, lsr #32
     340:	40080e41 	andmi	r0, r8, r1, asr #28
     344:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     348:	100e4101 	andne	r4, lr, r1, lsl #2
     34c:	00070d41 	andeq	r0, r7, r1, asr #26
     350:	0000001c 	andeq	r0, r0, ip, lsl r0
     354:	000002d8 	ldrdeq	r0, [r0], -r8
     358:	20000b64 	andcs	r0, r0, r4, ror #22
     35c:	00000048 	andeq	r0, r0, r8, asr #32
     360:	40080e41 	andmi	r0, r8, r1, asr #28
     364:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     368:	100e4101 	andne	r4, lr, r1, lsl #2
     36c:	00070d41 	andeq	r0, r7, r1, asr #26
     370:	0000001c 	andeq	r0, r0, ip, lsl r0
     374:	000002d8 	ldrdeq	r0, [r0], -r8
     378:	20000bac 	andcs	r0, r0, ip, lsr #23
     37c:	00000034 	andeq	r0, r0, r4, lsr r0
     380:	40080e41 	andmi	r0, r8, r1, asr #28
     384:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     388:	100e4101 	andne	r4, lr, r1, lsl #2
     38c:	00070d41 	andeq	r0, r7, r1, asr #26
     390:	0000000c 	andeq	r0, r0, ip
     394:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     398:	7c020001 	stcvc	0, cr0, [r2], {1}
     39c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     3a0:	0000001c 	andeq	r0, r0, ip, lsl r0
     3a4:	00000390 	muleq	r0, r0, r3
     3a8:	20000be0 	andcs	r0, r0, r0, ror #23
     3ac:	00000060 	andeq	r0, r0, r0, rrx
     3b0:	40080e41 	andmi	r0, r8, r1, asr #28
     3b4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     3b8:	100e4101 	andne	r4, lr, r1, lsl #2
     3bc:	00070d41 	andeq	r0, r7, r1, asr #26
     3c0:	0000001c 	andeq	r0, r0, ip, lsl r0
     3c4:	00000390 	muleq	r0, r0, r3
     3c8:	20000c40 	andcs	r0, r0, r0, asr #24
     3cc:	00000048 	andeq	r0, r0, r8, asr #32
     3d0:	40080e41 	andmi	r0, r8, r1, asr #28
     3d4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     3d8:	100e4101 	andne	r4, lr, r1, lsl #2
     3dc:	00070d41 	andeq	r0, r7, r1, asr #26
     3e0:	0000000c 	andeq	r0, r0, ip
     3e4:	00000390 	muleq	r0, r0, r3
     3e8:	20000000 	andcs	r0, r0, r0
     3ec:	0000000c 	andeq	r0, r0, ip
     3f0:	0000001c 	andeq	r0, r0, ip, lsl r0
     3f4:	00000390 	muleq	r0, r0, r3
     3f8:	20000c88 	andcs	r0, r0, r8, lsl #25
     3fc:	00000060 	andeq	r0, r0, r0, rrx
     400:	40080e41 	andmi	r0, r8, r1, asr #28
     404:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     408:	180e4101 	stmdane	lr, {r0, r8, lr}
     40c:	00070d41 	andeq	r0, r7, r1, asr #26
     410:	0000001c 	andeq	r0, r0, ip, lsl r0
     414:	00000390 	muleq	r0, r0, r3
     418:	20000ce8 	andcs	r0, r0, r8, ror #25
     41c:	000000b4 	strheq	r0, [r0], -r4
     420:	40080e41 	andmi	r0, r8, r1, asr #28
     424:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     428:	200e4101 	andcs	r4, lr, r1, lsl #2
     42c:	00070d41 	andeq	r0, r7, r1, asr #26
     430:	00000018 	andeq	r0, r0, r8, lsl r0
     434:	00000390 	muleq	r0, r0, r3
     438:	20000d9c 	mulcs	r0, ip, sp
     43c:	00000018 	andeq	r0, r0, r8, lsl r0
     440:	40080e41 	andmi	r0, r8, r1, asr #28
     444:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     448:	070d4101 	streq	r4, [sp, -r1, lsl #2]
     44c:	0000001c 	andeq	r0, r0, ip, lsl r0
     450:	00000390 	muleq	r0, r0, r3
     454:	20000db4 			; <UNDEFINED> instruction: 0x20000db4
     458:	00000038 	andeq	r0, r0, r8, lsr r0
     45c:	40080e41 	andmi	r0, r8, r1, asr #28
     460:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     464:	100e4101 	andne	r4, lr, r1, lsl #2
     468:	00070d41 	andeq	r0, r7, r1, asr #26
     46c:	00000024 	andeq	r0, r0, r4, lsr #32
     470:	00000390 	muleq	r0, r0, r3
     474:	20000dec 	andcs	r0, r0, ip, ror #27
     478:	00000108 	andeq	r0, r0, r8, lsl #2
     47c:	40140e41 	andsmi	r0, r4, r1, asr #28
     480:	85400584 	strbhi	r0, [r0, #-1412]	; 0xfffffa7c
     484:	03864004 	orreq	r4, r6, #4
     488:	40028740 	andmi	r8, r2, r0, asr #14
     48c:	0e41018e 	dvfeqd	f0, f1, #0.5
     490:	070d4140 	streq	r4, [sp, -r0, asr #2]
     494:	0000000c 	andeq	r0, r0, ip
     498:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     49c:	7c020001 	stcvc	0, cr0, [r2], {1}
     4a0:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     4a4:	00000018 	andeq	r0, r0, r8, lsl r0
     4a8:	00000494 	muleq	r0, r4, r4
     4ac:	20000ef4 	strdcs	r0, [r0], -r4
     4b0:	0000001a 	andeq	r0, r0, sl, lsl r0
     4b4:	40080e41 	andmi	r0, r8, r1, asr #28
     4b8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     4bc:	070d4101 	streq	r4, [sp, -r1, lsl #2]
     4c0:	0000001c 	andeq	r0, r0, ip, lsl r0
     4c4:	00000494 	muleq	r0, r4, r4
     4c8:	20000f0e 	andcs	r0, r0, lr, lsl #30
     4cc:	0000003a 	andeq	r0, r0, sl, lsr r0
     4d0:	40080e41 	andmi	r0, r8, r1, asr #28
     4d4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     4d8:	100e4101 	andne	r4, lr, r1, lsl #2
     4dc:	00070d41 	andeq	r0, r7, r1, asr #26
     4e0:	00000018 	andeq	r0, r0, r8, lsl r0
     4e4:	00000494 	muleq	r0, r4, r4
     4e8:	20000f48 	andcs	r0, r0, r8, asr #30
     4ec:	00000014 	andeq	r0, r0, r4, lsl r0
     4f0:	40080e41 	andmi	r0, r8, r1, asr #28
     4f4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     4f8:	070d4101 	streq	r4, [sp, -r1, lsl #2]
     4fc:	0000001c 	andeq	r0, r0, ip, lsl r0
     500:	00000494 	muleq	r0, r4, r4
     504:	20000f5c 	andcs	r0, r0, ip, asr pc
     508:	0000003c 	andeq	r0, r0, ip, lsr r0
     50c:	40080e41 	andmi	r0, r8, r1, asr #28
     510:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     514:	100e4101 	andne	r4, lr, r1, lsl #2
     518:	00070d41 	andeq	r0, r7, r1, asr #26
     51c:	0000001c 	andeq	r0, r0, ip, lsl r0
     520:	00000494 	muleq	r0, r4, r4
     524:	20000f98 	mulcs	r0, r8, pc	; <UNPREDICTABLE>
     528:	00000044 	andeq	r0, r0, r4, asr #32
     52c:	40080e41 	andmi	r0, r8, r1, asr #28
     530:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     534:	180e4101 	stmdane	lr, {r0, r8, lr}
     538:	00070d41 	andeq	r0, r7, r1, asr #26
     53c:	0000001c 	andeq	r0, r0, ip, lsl r0
     540:	00000494 	muleq	r0, r4, r4
     544:	20000fdc 	ldrdcs	r0, [r0], -ip
     548:	00000024 	andeq	r0, r0, r4, lsr #32
     54c:	40080e41 	andmi	r0, r8, r1, asr #28
     550:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     554:	100e4101 	andne	r4, lr, r1, lsl #2
     558:	00070d41 	andeq	r0, r7, r1, asr #26
     55c:	0000001c 	andeq	r0, r0, ip, lsl r0
     560:	00000494 	muleq	r0, r4, r4
     564:	20001000 	andcs	r1, r0, r0
     568:	00000044 	andeq	r0, r0, r4, asr #32
     56c:	40080e41 	andmi	r0, r8, r1, asr #28
     570:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     574:	180e4101 	stmdane	lr, {r0, r8, lr}
     578:	00070d41 	andeq	r0, r7, r1, asr #26
     57c:	0000001c 	andeq	r0, r0, ip, lsl r0
     580:	00000494 	muleq	r0, r4, r4
     584:	20001044 	andcs	r1, r0, r4, asr #32
     588:	00000024 	andeq	r0, r0, r4, lsr #32
     58c:	40080e41 	andmi	r0, r8, r1, asr #28
     590:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     594:	100e4101 	andne	r4, lr, r1, lsl #2
     598:	00070d41 	andeq	r0, r7, r1, asr #26
     59c:	0000000c 	andeq	r0, r0, ip
     5a0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     5a4:	7c020001 	stcvc	0, cr0, [r2], {1}
     5a8:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     5ac:	0000001c 	andeq	r0, r0, ip, lsl r0
     5b0:	0000059c 	muleq	r0, ip, r5
     5b4:	20001068 	andcs	r1, r0, r8, rrx
     5b8:	00000050 	andeq	r0, r0, r0, asr r0
     5bc:	40080e41 	andmi	r0, r8, r1, asr #28
     5c0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     5c4:	100e4101 	andne	r4, lr, r1, lsl #2
     5c8:	00070d41 	andeq	r0, r7, r1, asr #26
     5cc:	0000001c 	andeq	r0, r0, ip, lsl r0
     5d0:	0000059c 	muleq	r0, ip, r5
     5d4:	200010b8 	strhcs	r1, [r0], -r8
     5d8:	000001c4 	andeq	r0, r0, r4, asr #3
     5dc:	40080e41 	andmi	r0, r8, r1, asr #28
     5e0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     5e4:	180e4101 	stmdane	lr, {r0, r8, lr}
     5e8:	00070d41 	andeq	r0, r7, r1, asr #26
     5ec:	00000020 	andeq	r0, r0, r0, lsr #32
     5f0:	0000059c 	muleq	r0, ip, r5
     5f4:	2000127c 	andcs	r1, r0, ip, ror r2
     5f8:	000001b0 			; <UNDEFINED> instruction: 0x000001b0
     5fc:	400c0e41 	andmi	r0, ip, r1, asr #28
     600:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
     604:	018e4002 	orreq	r4, lr, r2
     608:	41200e41 			; <UNDEFINED> instruction: 0x41200e41
     60c:	0000070d 	andeq	r0, r0, sp, lsl #14
     610:	0000001c 	andeq	r0, r0, ip, lsl r0
     614:	0000059c 	muleq	r0, ip, r5
     618:	2000142c 	andcs	r1, r0, ip, lsr #8
     61c:	00000052 	andeq	r0, r0, r2, asr r0
     620:	40080e41 	andmi	r0, r8, r1, asr #28
     624:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     628:	100e4101 	andne	r4, lr, r1, lsl #2
     62c:	00070d41 	andeq	r0, r7, r1, asr #26
     630:	0000001c 	andeq	r0, r0, ip, lsl r0
     634:	0000059c 	muleq	r0, ip, r5
     638:	2000147e 	andcs	r1, r0, lr, ror r4
     63c:	00000072 	andeq	r0, r0, r2, ror r0
     640:	40080e41 	andmi	r0, r8, r1, asr #28
     644:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     648:	100e4101 	andne	r4, lr, r1, lsl #2
     64c:	00070d41 	andeq	r0, r7, r1, asr #26
     650:	0000001c 	andeq	r0, r0, ip, lsl r0
     654:	0000059c 	muleq	r0, ip, r5
     658:	200014f0 	strdcs	r1, [r0], -r0
     65c:	00000040 	andeq	r0, r0, r0, asr #32
     660:	40080e41 	andmi	r0, r8, r1, asr #28
     664:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     668:	100e4101 	andne	r4, lr, r1, lsl #2
     66c:	00070d41 	andeq	r0, r7, r1, asr #26
     670:	0000001c 	andeq	r0, r0, ip, lsl r0
     674:	0000059c 	muleq	r0, ip, r5
     678:	20001530 	andcs	r1, r0, r0, lsr r5
     67c:	000000c8 	andeq	r0, r0, r8, asr #1
     680:	40080e41 	andmi	r0, r8, r1, asr #28
     684:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     688:	100e4101 	andne	r4, lr, r1, lsl #2
     68c:	00070d41 	andeq	r0, r7, r1, asr #26
     690:	00000020 	andeq	r0, r0, r0, lsr #32
     694:	0000059c 	muleq	r0, ip, r5
     698:	200015f8 	strdcs	r1, [r0], -r8
     69c:	000001e2 	andeq	r0, r0, r2, ror #3
     6a0:	400c0e41 	andmi	r0, ip, r1, asr #28
     6a4:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
     6a8:	018e4002 	orreq	r4, lr, r2
     6ac:	41200e41 			; <UNDEFINED> instruction: 0x41200e41
     6b0:	0000070d 	andeq	r0, r0, sp, lsl #14
     6b4:	0000001c 	andeq	r0, r0, ip, lsl r0
     6b8:	0000059c 	muleq	r0, ip, r5
     6bc:	200017da 	ldrdcs	r1, [r0], -sl
     6c0:	000000d6 	ldrdeq	r0, [r0], -r6
     6c4:	40080e41 	andmi	r0, r8, r1, asr #28
     6c8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     6cc:	180e4101 	stmdane	lr, {r0, r8, lr}
     6d0:	00070d41 	andeq	r0, r7, r1, asr #26
     6d4:	0000001c 	andeq	r0, r0, ip, lsl r0
     6d8:	0000059c 	muleq	r0, ip, r5
     6dc:	200018b0 			; <UNDEFINED> instruction: 0x200018b0
     6e0:	00000056 	andeq	r0, r0, r6, asr r0
     6e4:	40080e41 	andmi	r0, r8, r1, asr #28
     6e8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     6ec:	100e4101 	andne	r4, lr, r1, lsl #2
     6f0:	00070d41 	andeq	r0, r7, r1, asr #26
     6f4:	0000001c 	andeq	r0, r0, ip, lsl r0
     6f8:	0000059c 	muleq	r0, ip, r5
     6fc:	20001906 	andcs	r1, r0, r6, lsl #18
     700:	000001aa 	andeq	r0, r0, sl, lsr #3
     704:	40080e41 	andmi	r0, r8, r1, asr #28
     708:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     70c:	180e4101 	stmdane	lr, {r0, r8, lr}
     710:	00070d41 	andeq	r0, r7, r1, asr #26
     714:	0000001c 	andeq	r0, r0, ip, lsl r0
     718:	0000059c 	muleq	r0, ip, r5
     71c:	20001ab0 			; <UNDEFINED> instruction: 0x20001ab0
     720:	00000038 	andeq	r0, r0, r8, lsr r0
     724:	40080e41 	andmi	r0, r8, r1, asr #28
     728:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     72c:	100e4101 	andne	r4, lr, r1, lsl #2
     730:	00070d41 	andeq	r0, r7, r1, asr #26
     734:	0000001c 	andeq	r0, r0, ip, lsl r0
     738:	0000059c 	muleq	r0, ip, r5
     73c:	20001ae8 	andcs	r1, r0, r8, ror #21
     740:	00000060 	andeq	r0, r0, r0, rrx
     744:	40080e41 	andmi	r0, r8, r1, asr #28
     748:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     74c:	180e4101 	stmdane	lr, {r0, r8, lr}
     750:	00070d41 	andeq	r0, r7, r1, asr #26
     754:	0000001c 	andeq	r0, r0, ip, lsl r0
     758:	0000059c 	muleq	r0, ip, r5
     75c:	20001b48 	andcs	r1, r0, r8, asr #22
     760:	00000124 	andeq	r0, r0, r4, lsr #2
     764:	40080e41 	andmi	r0, r8, r1, asr #28
     768:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     76c:	180e4101 	stmdane	lr, {r0, r8, lr}
     770:	00070d41 	andeq	r0, r7, r1, asr #26
     774:	0000001c 	andeq	r0, r0, ip, lsl r0
     778:	0000059c 	muleq	r0, ip, r5
     77c:	20001c6c 	andcs	r1, r0, ip, ror #24
     780:	00000042 	andeq	r0, r0, r2, asr #32
     784:	40080e41 	andmi	r0, r8, r1, asr #28
     788:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     78c:	180e4101 	stmdane	lr, {r0, r8, lr}
     790:	00070d41 	andeq	r0, r7, r1, asr #26
     794:	0000001c 	andeq	r0, r0, ip, lsl r0
     798:	0000059c 	muleq	r0, ip, r5
     79c:	20001cae 	andcs	r1, r0, lr, lsr #25
     7a0:	00000062 	andeq	r0, r0, r2, rrx
     7a4:	40080e41 	andmi	r0, r8, r1, asr #28
     7a8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     7ac:	180e4101 	stmdane	lr, {r0, r8, lr}
     7b0:	00070d41 	andeq	r0, r7, r1, asr #26
     7b4:	0000001c 	andeq	r0, r0, ip, lsl r0
     7b8:	0000059c 	muleq	r0, ip, r5
     7bc:	20001d10 	andcs	r1, r0, r0, lsl sp
     7c0:	0000002e 	andeq	r0, r0, lr, lsr #32
     7c4:	40080e41 	andmi	r0, r8, r1, asr #28
     7c8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     7cc:	180e4101 	stmdane	lr, {r0, r8, lr}
     7d0:	00070d41 	andeq	r0, r7, r1, asr #26
     7d4:	0000001c 	andeq	r0, r0, ip, lsl r0
     7d8:	0000059c 	muleq	r0, ip, r5
     7dc:	20001d3e 	andcs	r1, r0, lr, lsr sp
     7e0:	00000026 	andeq	r0, r0, r6, lsr #32
     7e4:	40080e41 	andmi	r0, r8, r1, asr #28
     7e8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     7ec:	180e4101 	stmdane	lr, {r0, r8, lr}
     7f0:	00070d41 	andeq	r0, r7, r1, asr #26
     7f4:	0000001c 	andeq	r0, r0, ip, lsl r0
     7f8:	0000059c 	muleq	r0, ip, r5
     7fc:	20001d64 	andcs	r1, r0, r4, ror #26
     800:	00000026 	andeq	r0, r0, r6, lsr #32
     804:	40080e41 	andmi	r0, r8, r1, asr #28
     808:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     80c:	180e4101 	stmdane	lr, {r0, r8, lr}
     810:	00070d41 	andeq	r0, r7, r1, asr #26
     814:	0000001c 	andeq	r0, r0, ip, lsl r0
     818:	0000059c 	muleq	r0, ip, r5
     81c:	20001d8a 	andcs	r1, r0, sl, lsl #27
     820:	0000003a 	andeq	r0, r0, sl, lsr r0
     824:	40080e41 	andmi	r0, r8, r1, asr #28
     828:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     82c:	180e4101 	stmdane	lr, {r0, r8, lr}
     830:	00070d41 	andeq	r0, r7, r1, asr #26
     834:	0000001c 	andeq	r0, r0, ip, lsl r0
     838:	0000059c 	muleq	r0, ip, r5
     83c:	20001dc4 	andcs	r1, r0, r4, asr #27
     840:	000000f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     844:	40080e41 	andmi	r0, r8, r1, asr #28
     848:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     84c:	180e4101 	stmdane	lr, {r0, r8, lr}
     850:	00070d41 	andeq	r0, r7, r1, asr #26
     854:	0000001c 	andeq	r0, r0, ip, lsl r0
     858:	0000059c 	muleq	r0, ip, r5
     85c:	20001eb4 			; <UNDEFINED> instruction: 0x20001eb4
     860:	00000070 	andeq	r0, r0, r0, ror r0
     864:	40080e41 	andmi	r0, r8, r1, asr #28
     868:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     86c:	180e4101 	stmdane	lr, {r0, r8, lr}
     870:	00070d41 	andeq	r0, r7, r1, asr #26
     874:	00000020 	andeq	r0, r0, r0, lsr #32
     878:	0000059c 	muleq	r0, ip, r5
     87c:	20001f24 	andcs	r1, r0, r4, lsr #30
     880:	000001f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     884:	400c0e41 	andmi	r0, ip, r1, asr #28
     888:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
     88c:	018e4002 	orreq	r4, lr, r2
     890:	41200e41 			; <UNDEFINED> instruction: 0x41200e41
     894:	0000070d 	andeq	r0, r0, sp, lsl #14
     898:	0000001c 	andeq	r0, r0, ip, lsl r0
     89c:	0000059c 	muleq	r0, ip, r5
     8a0:	20002114 	andcs	r2, r0, r4, lsl r1
     8a4:	000000ec 	andeq	r0, r0, ip, ror #1
     8a8:	40080e41 	andmi	r0, r8, r1, asr #28
     8ac:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     8b0:	100e4101 	andne	r4, lr, r1, lsl #2
     8b4:	00070d41 	andeq	r0, r7, r1, asr #26
     8b8:	0000001c 	andeq	r0, r0, ip, lsl r0
     8bc:	0000059c 	muleq	r0, ip, r5
     8c0:	20002200 	andcs	r2, r0, r0, lsl #4
     8c4:	0000003a 	andeq	r0, r0, sl, lsr r0
     8c8:	40080e41 	andmi	r0, r8, r1, asr #28
     8cc:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     8d0:	180e4101 	stmdane	lr, {r0, r8, lr}
     8d4:	00070d41 	andeq	r0, r7, r1, asr #26
     8d8:	0000000c 	andeq	r0, r0, ip
     8dc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     8e0:	7c020001 	stcvc	0, cr0, [r2], {1}
     8e4:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     8e8:	0000001c 	andeq	r0, r0, ip, lsl r0
     8ec:	000008d8 	ldrdeq	r0, [r0], -r8
     8f0:	2000223c 	andcs	r2, r0, ip, lsr r2
     8f4:	00000060 	andeq	r0, r0, r0, rrx
     8f8:	40080e41 	andmi	r0, r8, r1, asr #28
     8fc:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     900:	100e4101 	andne	r4, lr, r1, lsl #2
     904:	00070d41 	andeq	r0, r7, r1, asr #26
     908:	0000001c 	andeq	r0, r0, ip, lsl r0
     90c:	000008d8 	ldrdeq	r0, [r0], -r8
     910:	2000229c 	mulcs	r0, ip, r2
     914:	00000044 	andeq	r0, r0, r4, asr #32
     918:	40080e41 	andmi	r0, r8, r1, asr #28
     91c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     920:	100e4101 	andne	r4, lr, r1, lsl #2
     924:	00070d41 	andeq	r0, r7, r1, asr #26
     928:	0000001c 	andeq	r0, r0, ip, lsl r0
     92c:	000008d8 	ldrdeq	r0, [r0], -r8
     930:	200022e0 	andcs	r2, r0, r0, ror #5
     934:	00000098 	muleq	r0, r8, r0
     938:	40080e41 	andmi	r0, r8, r1, asr #28
     93c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     940:	280e4101 	stmdacs	lr, {r0, r8, lr}
     944:	00070d41 	andeq	r0, r7, r1, asr #26
     948:	00000020 	andeq	r0, r0, r0, lsr #32
     94c:	000008d8 	ldrdeq	r0, [r0], -r8
     950:	20002378 	andcs	r2, r0, r8, ror r3
     954:	0000012c 	andeq	r0, r0, ip, lsr #2
     958:	400c0e41 	andmi	r0, ip, r1, asr #28
     95c:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
     960:	018e4002 	orreq	r4, lr, r2
     964:	41280e41 			; <UNDEFINED> instruction: 0x41280e41
     968:	0000070d 	andeq	r0, r0, sp, lsl #14
     96c:	0000001c 	andeq	r0, r0, ip, lsl r0
     970:	000008d8 	ldrdeq	r0, [r0], -r8
     974:	200024a4 	andcs	r2, r0, r4, lsr #9
     978:	00000050 	andeq	r0, r0, r0, asr r0
     97c:	40080e41 	andmi	r0, r8, r1, asr #28
     980:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     984:	200e4101 	andcs	r4, lr, r1, lsl #2
     988:	00070d41 	andeq	r0, r7, r1, asr #26
     98c:	0000001c 	andeq	r0, r0, ip, lsl r0
     990:	000008d8 	ldrdeq	r0, [r0], -r8
     994:	200024f4 	strdcs	r2, [r0], -r4
     998:	00000032 	andeq	r0, r0, r2, lsr r0
     99c:	40080e41 	andmi	r0, r8, r1, asr #28
     9a0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     9a4:	100e4101 	andne	r4, lr, r1, lsl #2
     9a8:	00070d41 	andeq	r0, r7, r1, asr #26
     9ac:	0000001c 	andeq	r0, r0, ip, lsl r0
     9b0:	000008d8 	ldrdeq	r0, [r0], -r8
     9b4:	20002526 	andcs	r2, r0, r6, lsr #10
     9b8:	000000aa 	andeq	r0, r0, sl, lsr #1
     9bc:	40080e41 	andmi	r0, r8, r1, asr #28
     9c0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     9c4:	180e4101 	stmdane	lr, {r0, r8, lr}
     9c8:	00070d41 	andeq	r0, r7, r1, asr #26
     9cc:	0000001c 	andeq	r0, r0, ip, lsl r0
     9d0:	000008d8 	ldrdeq	r0, [r0], -r8
     9d4:	200025d0 	ldrdcs	r2, [r0], -r0
     9d8:	0000006c 	andeq	r0, r0, ip, rrx
     9dc:	40080e41 	andmi	r0, r8, r1, asr #28
     9e0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     9e4:	200e4101 	andcs	r4, lr, r1, lsl #2
     9e8:	00070d41 	andeq	r0, r7, r1, asr #26
     9ec:	00000024 	andeq	r0, r0, r4, lsr #32
     9f0:	000008d8 	ldrdeq	r0, [r0], -r8
     9f4:	2000263c 	andcs	r2, r0, ip, lsr r6
     9f8:	00000134 	andeq	r0, r0, r4, lsr r1
     9fc:	40100e41 	andsmi	r0, r0, r1, asr #28
     a00:	85400484 	strbhi	r0, [r0, #-1156]	; 0xfffffb7c
     a04:	02874003 	addeq	r4, r7, #3
     a08:	41018e40 	tstmi	r1, r0, asr #28
     a0c:	0d41200e 	stcleq	0, cr2, [r1, #-56]	; 0xffffffc8
     a10:	00000007 	andeq	r0, r0, r7
     a14:	0000001c 	andeq	r0, r0, ip, lsl r0
     a18:	000008d8 	ldrdeq	r0, [r0], -r8
     a1c:	20002770 	andcs	r2, r0, r0, ror r7
     a20:	00000098 	muleq	r0, r8, r0
     a24:	40080e41 	andmi	r0, r8, r1, asr #28
     a28:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     a2c:	100e4101 	andne	r4, lr, r1, lsl #2
     a30:	00070d41 	andeq	r0, r7, r1, asr #26
     a34:	00000024 	andeq	r0, r0, r4, lsr #32
     a38:	000008d8 	ldrdeq	r0, [r0], -r8
     a3c:	20002808 	andcs	r2, r0, r8, lsl #16
     a40:	000001bc 			; <UNDEFINED> instruction: 0x000001bc
     a44:	40140e41 	andsmi	r0, r4, r1, asr #28
     a48:	85400584 	strbhi	r0, [r0, #-1412]	; 0xfffffa7c
     a4c:	03864004 	orreq	r4, r6, #4
     a50:	40028740 	andmi	r8, r2, r0, asr #14
     a54:	0e41018e 	dvfeqd	f0, f1, #0.5
     a58:	070d4138 	smladxeq	sp, r8, r1, r4
     a5c:	0000000c 	andeq	r0, r0, ip
     a60:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     a64:	7c020001 	stcvc	0, cr0, [r2], {1}
     a68:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     a6c:	0000001c 	andeq	r0, r0, ip, lsl r0
     a70:	00000a5c 	andeq	r0, r0, ip, asr sl
     a74:	200029c4 	andcs	r2, r0, r4, asr #19
     a78:	00000170 	andeq	r0, r0, r0, ror r1
     a7c:	40080e41 	andmi	r0, r8, r1, asr #28
     a80:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     a84:	100e4101 	andne	r4, lr, r1, lsl #2
     a88:	00070d41 	andeq	r0, r7, r1, asr #26
     a8c:	0000001c 	andeq	r0, r0, ip, lsl r0
     a90:	00000a5c 	andeq	r0, r0, ip, asr sl
     a94:	20002b34 	andcs	r2, r0, r4, lsr fp
     a98:	00000118 	andeq	r0, r0, r8, lsl r1
     a9c:	40080e41 	andmi	r0, r8, r1, asr #28
     aa0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     aa4:	200e4101 	andcs	r4, lr, r1, lsl #2
     aa8:	00070d41 	andeq	r0, r7, r1, asr #26
     aac:	0000001c 	andeq	r0, r0, ip, lsl r0
     ab0:	00000a5c 	andeq	r0, r0, ip, asr sl
     ab4:	20002c4c 	andcs	r2, r0, ip, asr #24
     ab8:	00000034 	andeq	r0, r0, r4, lsr r0
     abc:	40080e41 	andmi	r0, r8, r1, asr #28
     ac0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     ac4:	100e4101 	andne	r4, lr, r1, lsl #2
     ac8:	00070d41 	andeq	r0, r7, r1, asr #26
     acc:	0000001c 	andeq	r0, r0, ip, lsl r0
     ad0:	00000a5c 	andeq	r0, r0, ip, asr sl
     ad4:	20002c80 	andcs	r2, r0, r0, lsl #25
     ad8:	00000046 	andeq	r0, r0, r6, asr #32
     adc:	40080e41 	andmi	r0, r8, r1, asr #28
     ae0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     ae4:	180e4101 	stmdane	lr, {r0, r8, lr}
     ae8:	00070d41 	andeq	r0, r7, r1, asr #26
     aec:	0000001c 	andeq	r0, r0, ip, lsl r0
     af0:	00000a5c 	andeq	r0, r0, ip, asr sl
     af4:	20002cc6 	andcs	r2, r0, r6, asr #25
     af8:	00000042 	andeq	r0, r0, r2, asr #32
     afc:	40080e41 	andmi	r0, r8, r1, asr #28
     b00:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     b04:	180e4101 	stmdane	lr, {r0, r8, lr}
     b08:	00070d41 	andeq	r0, r7, r1, asr #26
     b0c:	0000001c 	andeq	r0, r0, ip, lsl r0
     b10:	00000a5c 	andeq	r0, r0, ip, asr sl
     b14:	20002d08 	andcs	r2, r0, r8, lsl #26
     b18:	00000016 	andeq	r0, r0, r6, lsl r0
     b1c:	40080e41 	andmi	r0, r8, r1, asr #28
     b20:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     b24:	100e4101 	andne	r4, lr, r1, lsl #2
     b28:	00070d41 	andeq	r0, r7, r1, asr #26
     b2c:	0000001c 	andeq	r0, r0, ip, lsl r0
     b30:	00000a5c 	andeq	r0, r0, ip, asr sl
     b34:	20002d1e 	andcs	r2, r0, lr, lsl sp
     b38:	00000042 	andeq	r0, r0, r2, asr #32
     b3c:	40080e41 	andmi	r0, r8, r1, asr #28
     b40:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     b44:	180e4101 	stmdane	lr, {r0, r8, lr}
     b48:	00070d41 	andeq	r0, r7, r1, asr #26
     b4c:	0000001c 	andeq	r0, r0, ip, lsl r0
     b50:	00000a5c 	andeq	r0, r0, ip, asr sl
     b54:	20002d60 	andcs	r2, r0, r0, ror #26
     b58:	00000016 	andeq	r0, r0, r6, lsl r0
     b5c:	40080e41 	andmi	r0, r8, r1, asr #28
     b60:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     b64:	100e4101 	andne	r4, lr, r1, lsl #2
     b68:	00070d41 	andeq	r0, r7, r1, asr #26
     b6c:	0000001c 	andeq	r0, r0, ip, lsl r0
     b70:	00000a5c 	andeq	r0, r0, ip, asr sl
     b74:	20002d76 	andcs	r2, r0, r6, ror sp
     b78:	0000001e 	andeq	r0, r0, lr, lsl r0
     b7c:	40080e41 	andmi	r0, r8, r1, asr #28
     b80:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     b84:	100e4101 	andne	r4, lr, r1, lsl #2
     b88:	00070d41 	andeq	r0, r7, r1, asr #26
     b8c:	0000001c 	andeq	r0, r0, ip, lsl r0
     b90:	00000a5c 	andeq	r0, r0, ip, asr sl
     b94:	20002d94 	mulcs	r0, r4, sp
     b98:	0000001e 	andeq	r0, r0, lr, lsl r0
     b9c:	40080e41 	andmi	r0, r8, r1, asr #28
     ba0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     ba4:	100e4101 	andne	r4, lr, r1, lsl #2
     ba8:	00070d41 	andeq	r0, r7, r1, asr #26
     bac:	0000001c 	andeq	r0, r0, ip, lsl r0
     bb0:	00000a5c 	andeq	r0, r0, ip, asr sl
     bb4:	20002db2 			; <UNDEFINED> instruction: 0x20002db2
     bb8:	0000003a 	andeq	r0, r0, sl, lsr r0
     bbc:	40080e41 	andmi	r0, r8, r1, asr #28
     bc0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     bc4:	100e4101 	andne	r4, lr, r1, lsl #2
     bc8:	00070d41 	andeq	r0, r7, r1, asr #26
     bcc:	0000001c 	andeq	r0, r0, ip, lsl r0
     bd0:	00000a5c 	andeq	r0, r0, ip, asr sl
     bd4:	20002dec 	andcs	r2, r0, ip, ror #27
     bd8:	0000001e 	andeq	r0, r0, lr, lsl r0
     bdc:	40080e41 	andmi	r0, r8, r1, asr #28
     be0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     be4:	100e4101 	andne	r4, lr, r1, lsl #2
     be8:	00070d41 	andeq	r0, r7, r1, asr #26
     bec:	0000001c 	andeq	r0, r0, ip, lsl r0
     bf0:	00000a5c 	andeq	r0, r0, ip, asr sl
     bf4:	20002e0a 	andcs	r2, r0, sl, lsl #28
     bf8:	00000024 	andeq	r0, r0, r4, lsr #32
     bfc:	40080e41 	andmi	r0, r8, r1, asr #28
     c00:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     c04:	100e4101 	andne	r4, lr, r1, lsl #2
     c08:	00070d41 	andeq	r0, r7, r1, asr #26
     c0c:	0000001c 	andeq	r0, r0, ip, lsl r0
     c10:	00000a5c 	andeq	r0, r0, ip, asr sl
     c14:	20002e2e 	andcs	r2, r0, lr, lsr #28
     c18:	000000a4 	andeq	r0, r0, r4, lsr #1
     c1c:	40080e41 	andmi	r0, r8, r1, asr #28
     c20:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     c24:	180e4101 	stmdane	lr, {r0, r8, lr}
     c28:	00070d41 	andeq	r0, r7, r1, asr #26
     c2c:	0000000c 	andeq	r0, r0, ip
     c30:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     c34:	7c020001 	stcvc	0, cr0, [r2], {1}
     c38:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     c3c:	00000018 	andeq	r0, r0, r8, lsl r0
     c40:	00000c2c 	andeq	r0, r0, ip, lsr #24
     c44:	20002ed4 	ldrdcs	r2, [r0], -r4
     c48:	00000070 	andeq	r0, r0, r0, ror r0
     c4c:	40080e41 	andmi	r0, r8, r1, asr #28
     c50:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     c54:	070d4101 	streq	r4, [sp, -r1, lsl #2]
     c58:	0000001c 	andeq	r0, r0, ip, lsl r0
     c5c:	00000c2c 	andeq	r0, r0, ip, lsr #24
     c60:	20002f44 	andcs	r2, r0, r4, asr #30
     c64:	00000028 	andeq	r0, r0, r8, lsr #32
     c68:	40080e41 	andmi	r0, r8, r1, asr #28
     c6c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     c70:	100e4101 	andne	r4, lr, r1, lsl #2
     c74:	00070d41 	andeq	r0, r7, r1, asr #26
     c78:	00000020 	andeq	r0, r0, r0, lsr #32
     c7c:	00000c2c 	andeq	r0, r0, ip, lsr #24
     c80:	20002f6c 	andcs	r2, r0, ip, ror #30
     c84:	0000005e 	andeq	r0, r0, lr, asr r0
     c88:	400c0e41 	andmi	r0, ip, r1, asr #28
     c8c:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
     c90:	018e4002 	orreq	r4, lr, r2
     c94:	41180e41 	tstmi	r8, r1, asr #28
     c98:	0000070d 	andeq	r0, r0, sp, lsl #14
     c9c:	0000001c 	andeq	r0, r0, ip, lsl r0
     ca0:	00000c2c 	andeq	r0, r0, ip, lsr #24
     ca4:	20002fca 	andcs	r2, r0, sl, asr #31
     ca8:	0000003e 	andeq	r0, r0, lr, lsr r0
     cac:	40080e41 	andmi	r0, r8, r1, asr #28
     cb0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     cb4:	180e4101 	stmdane	lr, {r0, r8, lr}
     cb8:	00070d41 	andeq	r0, r7, r1, asr #26
     cbc:	0000001c 	andeq	r0, r0, ip, lsl r0
     cc0:	00000c2c 	andeq	r0, r0, ip, lsr #24
     cc4:	20003008 	andcs	r3, r0, r8
     cc8:	00000020 	andeq	r0, r0, r0, lsr #32
     ccc:	40080e41 	andmi	r0, r8, r1, asr #28
     cd0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     cd4:	100e4101 	andne	r4, lr, r1, lsl #2
     cd8:	00070d41 	andeq	r0, r7, r1, asr #26
     cdc:	0000001c 	andeq	r0, r0, ip, lsl r0
     ce0:	00000c2c 	andeq	r0, r0, ip, lsr #24
     ce4:	20003028 	andcs	r3, r0, r8, lsr #32
     ce8:	00000044 	andeq	r0, r0, r4, asr #32
     cec:	40080e41 	andmi	r0, r8, r1, asr #28
     cf0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     cf4:	100e4101 	andne	r4, lr, r1, lsl #2
     cf8:	00070d41 	andeq	r0, r7, r1, asr #26
     cfc:	0000001c 	andeq	r0, r0, ip, lsl r0
     d00:	00000c2c 	andeq	r0, r0, ip, lsr #24
     d04:	2000306c 	andcs	r3, r0, ip, rrx
     d08:	00000020 	andeq	r0, r0, r0, lsr #32
     d0c:	40080e41 	andmi	r0, r8, r1, asr #28
     d10:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     d14:	100e4101 	andne	r4, lr, r1, lsl #2
     d18:	00070d41 	andeq	r0, r7, r1, asr #26
     d1c:	0000001c 	andeq	r0, r0, ip, lsl r0
     d20:	00000c2c 	andeq	r0, r0, ip, lsr #24
     d24:	2000308c 	andcs	r3, r0, ip, lsl #1
     d28:	0000003c 	andeq	r0, r0, ip, lsr r0
     d2c:	40080e41 	andmi	r0, r8, r1, asr #28
     d30:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     d34:	180e4101 	stmdane	lr, {r0, r8, lr}
     d38:	00070d41 	andeq	r0, r7, r1, asr #26
     d3c:	0000001c 	andeq	r0, r0, ip, lsl r0
     d40:	00000c2c 	andeq	r0, r0, ip, lsr #24
     d44:	200030c8 	andcs	r3, r0, r8, asr #1
     d48:	00000020 	andeq	r0, r0, r0, lsr #32
     d4c:	40080e41 	andmi	r0, r8, r1, asr #28
     d50:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     d54:	100e4101 	andne	r4, lr, r1, lsl #2
     d58:	00070d41 	andeq	r0, r7, r1, asr #26
     d5c:	0000001c 	andeq	r0, r0, ip, lsl r0
     d60:	00000c2c 	andeq	r0, r0, ip, lsr #24
     d64:	200030e8 	andcs	r3, r0, r8, ror #1
     d68:	00000028 	andeq	r0, r0, r8, lsr #32
     d6c:	40080e41 	andmi	r0, r8, r1, asr #28
     d70:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     d74:	100e4101 	andne	r4, lr, r1, lsl #2
     d78:	00070d41 	andeq	r0, r7, r1, asr #26
     d7c:	0000001c 	andeq	r0, r0, ip, lsl r0
     d80:	00000c2c 	andeq	r0, r0, ip, lsr #24
     d84:	20003110 	andcs	r3, r0, r0, lsl r1
     d88:	00000020 	andeq	r0, r0, r0, lsr #32
     d8c:	40080e41 	andmi	r0, r8, r1, asr #28
     d90:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     d94:	100e4101 	andne	r4, lr, r1, lsl #2
     d98:	00070d41 	andeq	r0, r7, r1, asr #26
     d9c:	0000001c 	andeq	r0, r0, ip, lsl r0
     da0:	00000c2c 	andeq	r0, r0, ip, lsr #24
     da4:	20003130 	andcs	r3, r0, r0, lsr r1
     da8:	00000030 	andeq	r0, r0, r0, lsr r0
     dac:	40080e41 	andmi	r0, r8, r1, asr #28
     db0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     db4:	180e4101 	stmdane	lr, {r0, r8, lr}
     db8:	00070d41 	andeq	r0, r7, r1, asr #26
     dbc:	0000001c 	andeq	r0, r0, ip, lsl r0
     dc0:	00000c2c 	andeq	r0, r0, ip, lsr #24
     dc4:	20003160 	andcs	r3, r0, r0, ror #2
     dc8:	00000020 	andeq	r0, r0, r0, lsr #32
     dcc:	40080e41 	andmi	r0, r8, r1, asr #28
     dd0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     dd4:	100e4101 	andne	r4, lr, r1, lsl #2
     dd8:	00070d41 	andeq	r0, r7, r1, asr #26
     ddc:	0000001c 	andeq	r0, r0, ip, lsl r0
     de0:	00000c2c 	andeq	r0, r0, ip, lsr #24
     de4:	20003180 	andcs	r3, r0, r0, lsl #3
     de8:	00000020 	andeq	r0, r0, r0, lsr #32
     dec:	40080e41 	andmi	r0, r8, r1, asr #28
     df0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     df4:	100e4101 	andne	r4, lr, r1, lsl #2
     df8:	00070d41 	andeq	r0, r7, r1, asr #26
     dfc:	0000001c 	andeq	r0, r0, ip, lsl r0
     e00:	00000c2c 	andeq	r0, r0, ip, lsr #24
     e04:	200031a0 	andcs	r3, r0, r0, lsr #3
     e08:	00000040 	andeq	r0, r0, r0, asr #32
     e0c:	40080e41 	andmi	r0, r8, r1, asr #28
     e10:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     e14:	180e4101 	stmdane	lr, {r0, r8, lr}
     e18:	00070d41 	andeq	r0, r7, r1, asr #26
     e1c:	0000001c 	andeq	r0, r0, ip, lsl r0
     e20:	00000c2c 	andeq	r0, r0, ip, lsr #24
     e24:	200031e0 	andcs	r3, r0, r0, ror #3
     e28:	0000003c 	andeq	r0, r0, ip, lsr r0
     e2c:	40080e41 	andmi	r0, r8, r1, asr #28
     e30:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     e34:	180e4101 	stmdane	lr, {r0, r8, lr}
     e38:	00070d41 	andeq	r0, r7, r1, asr #26
     e3c:	0000001c 	andeq	r0, r0, ip, lsl r0
     e40:	00000c2c 	andeq	r0, r0, ip, lsr #24
     e44:	2000321c 	andcs	r3, r0, ip, lsl r2
     e48:	00000034 	andeq	r0, r0, r4, lsr r0
     e4c:	40080e41 	andmi	r0, r8, r1, asr #28
     e50:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     e54:	180e4101 	stmdane	lr, {r0, r8, lr}
     e58:	00070d41 	andeq	r0, r7, r1, asr #26
     e5c:	00000018 	andeq	r0, r0, r8, lsl r0
     e60:	00000c2c 	andeq	r0, r0, ip, lsr #24
     e64:	20003250 	andcs	r3, r0, r0, asr r2
     e68:	0000001c 	andeq	r0, r0, ip, lsl r0
     e6c:	40080e41 	andmi	r0, r8, r1, asr #28
     e70:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     e74:	070d4101 	streq	r4, [sp, -r1, lsl #2]
     e78:	0000001c 	andeq	r0, r0, ip, lsl r0
     e7c:	00000c2c 	andeq	r0, r0, ip, lsr #24
     e80:	2000326c 	andcs	r3, r0, ip, ror #4
     e84:	00000034 	andeq	r0, r0, r4, lsr r0
     e88:	40080e41 	andmi	r0, r8, r1, asr #28
     e8c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     e90:	180e4101 	stmdane	lr, {r0, r8, lr}
     e94:	00070d41 	andeq	r0, r7, r1, asr #26
     e98:	0000001c 	andeq	r0, r0, ip, lsl r0
     e9c:	00000c2c 	andeq	r0, r0, ip, lsr #24
     ea0:	200032a0 	andcs	r3, r0, r0, lsr #5
     ea4:	00000038 	andeq	r0, r0, r8, lsr r0
     ea8:	40080e41 	andmi	r0, r8, r1, asr #28
     eac:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     eb0:	180e4101 	stmdane	lr, {r0, r8, lr}
     eb4:	00070d41 	andeq	r0, r7, r1, asr #26
     eb8:	0000001c 	andeq	r0, r0, ip, lsl r0
     ebc:	00000c2c 	andeq	r0, r0, ip, lsr #24
     ec0:	200032d8 	ldrdcs	r3, [r0], -r8
     ec4:	0000003c 	andeq	r0, r0, ip, lsr r0
     ec8:	40080e41 	andmi	r0, r8, r1, asr #28
     ecc:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     ed0:	180e4101 	stmdane	lr, {r0, r8, lr}
     ed4:	00070d41 	andeq	r0, r7, r1, asr #26
     ed8:	0000001c 	andeq	r0, r0, ip, lsl r0
     edc:	00000c2c 	andeq	r0, r0, ip, lsr #24
     ee0:	20003314 	andcs	r3, r0, r4, lsl r3
     ee4:	00000158 	andeq	r0, r0, r8, asr r1
     ee8:	40080e41 	andmi	r0, r8, r1, asr #28
     eec:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     ef0:	280e4101 	stmdacs	lr, {r0, r8, lr}
     ef4:	00070d41 	andeq	r0, r7, r1, asr #26
     ef8:	0000001c 	andeq	r0, r0, ip, lsl r0
     efc:	00000c2c 	andeq	r0, r0, ip, lsr #24
     f00:	2000346c 	andcs	r3, r0, ip, ror #8
     f04:	00000060 	andeq	r0, r0, r0, rrx
     f08:	40080e41 	andmi	r0, r8, r1, asr #28
     f0c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     f10:	180e4101 	stmdane	lr, {r0, r8, lr}
     f14:	00070d41 	andeq	r0, r7, r1, asr #26
     f18:	0000001c 	andeq	r0, r0, ip, lsl r0
     f1c:	00000c2c 	andeq	r0, r0, ip, lsr #24
     f20:	200034cc 	andcs	r3, r0, ip, asr #9
     f24:	00000020 	andeq	r0, r0, r0, lsr #32
     f28:	40080e41 	andmi	r0, r8, r1, asr #28
     f2c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     f30:	100e4101 	andne	r4, lr, r1, lsl #2
     f34:	00070d41 	andeq	r0, r7, r1, asr #26
     f38:	0000001c 	andeq	r0, r0, ip, lsl r0
     f3c:	00000c2c 	andeq	r0, r0, ip, lsr #24
     f40:	200034ec 	andcs	r3, r0, ip, ror #9
     f44:	00000020 	andeq	r0, r0, r0, lsr #32
     f48:	40080e41 	andmi	r0, r8, r1, asr #28
     f4c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     f50:	100e4101 	andne	r4, lr, r1, lsl #2
     f54:	00070d41 	andeq	r0, r7, r1, asr #26
     f58:	0000001c 	andeq	r0, r0, ip, lsl r0
     f5c:	00000c2c 	andeq	r0, r0, ip, lsr #24
     f60:	2000350c 	andcs	r3, r0, ip, lsl #10
     f64:	0000001c 	andeq	r0, r0, ip, lsl r0
     f68:	40080e41 	andmi	r0, r8, r1, asr #28
     f6c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     f70:	100e4101 	andne	r4, lr, r1, lsl #2
     f74:	00070d41 	andeq	r0, r7, r1, asr #26
     f78:	0000001c 	andeq	r0, r0, ip, lsl r0
     f7c:	00000c2c 	andeq	r0, r0, ip, lsr #24
     f80:	20003528 	andcs	r3, r0, r8, lsr #10
     f84:	0000003c 	andeq	r0, r0, ip, lsr r0
     f88:	40080e41 	andmi	r0, r8, r1, asr #28
     f8c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     f90:	180e4101 	stmdane	lr, {r0, r8, lr}
     f94:	00070d41 	andeq	r0, r7, r1, asr #26
     f98:	0000001c 	andeq	r0, r0, ip, lsl r0
     f9c:	00000c2c 	andeq	r0, r0, ip, lsr #24
     fa0:	20003564 	andcs	r3, r0, r4, ror #10
     fa4:	0000003c 	andeq	r0, r0, ip, lsr r0
     fa8:	40080e41 	andmi	r0, r8, r1, asr #28
     fac:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     fb0:	180e4101 	stmdane	lr, {r0, r8, lr}
     fb4:	00070d41 	andeq	r0, r7, r1, asr #26
     fb8:	0000001c 	andeq	r0, r0, ip, lsl r0
     fbc:	00000c2c 	andeq	r0, r0, ip, lsr #24
     fc0:	200035a0 	andcs	r3, r0, r0, lsr #11
     fc4:	0000003c 	andeq	r0, r0, ip, lsr r0
     fc8:	40080e41 	andmi	r0, r8, r1, asr #28
     fcc:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     fd0:	180e4101 	stmdane	lr, {r0, r8, lr}
     fd4:	00070d41 	andeq	r0, r7, r1, asr #26
     fd8:	0000001c 	andeq	r0, r0, ip, lsl r0
     fdc:	00000c2c 	andeq	r0, r0, ip, lsr #24
     fe0:	200035dc 	ldrdcs	r3, [r0], -ip
     fe4:	00000040 	andeq	r0, r0, r0, asr #32
     fe8:	40080e41 	andmi	r0, r8, r1, asr #28
     fec:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     ff0:	180e4101 	stmdane	lr, {r0, r8, lr}
     ff4:	00070d41 	andeq	r0, r7, r1, asr #26
     ff8:	0000001c 	andeq	r0, r0, ip, lsl r0
     ffc:	00000c2c 	andeq	r0, r0, ip, lsr #24
    1000:	2000361c 	andcs	r3, r0, ip, lsl r6
    1004:	0000003c 	andeq	r0, r0, ip, lsr r0
    1008:	40080e41 	andmi	r0, r8, r1, asr #28
    100c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
    1010:	180e4101 	stmdane	lr, {r0, r8, lr}
    1014:	00070d41 	andeq	r0, r7, r1, asr #26
    1018:	0000001c 	andeq	r0, r0, ip, lsl r0
    101c:	00000c2c 	andeq	r0, r0, ip, lsr #24
    1020:	20003658 	andcs	r3, r0, r8, asr r6
    1024:	0000001c 	andeq	r0, r0, ip, lsl r0
    1028:	40080e41 	andmi	r0, r8, r1, asr #28
    102c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
    1030:	100e4101 	andne	r4, lr, r1, lsl #2
    1034:	00070d41 	andeq	r0, r7, r1, asr #26
    1038:	0000001c 	andeq	r0, r0, ip, lsl r0
    103c:	00000c2c 	andeq	r0, r0, ip, lsr #24
    1040:	20003674 	andcs	r3, r0, r4, ror r6
    1044:	00000040 	andeq	r0, r0, r0, asr #32
    1048:	40080e41 	andmi	r0, r8, r1, asr #28
    104c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
    1050:	100e4101 	andne	r4, lr, r1, lsl #2
    1054:	00070d41 	andeq	r0, r7, r1, asr #26
    1058:	0000001c 	andeq	r0, r0, ip, lsl r0
    105c:	00000c2c 	andeq	r0, r0, ip, lsr #24
    1060:	200036b4 			; <UNDEFINED> instruction: 0x200036b4
    1064:	00000040 	andeq	r0, r0, r0, asr #32
    1068:	40080e41 	andmi	r0, r8, r1, asr #28
    106c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
    1070:	100e4101 	andne	r4, lr, r1, lsl #2
    1074:	00070d41 	andeq	r0, r7, r1, asr #26
    1078:	0000001c 	andeq	r0, r0, ip, lsl r0
    107c:	00000c2c 	andeq	r0, r0, ip, lsr #24
    1080:	200036f4 	strdcs	r3, [r0], -r4
    1084:	00000040 	andeq	r0, r0, r0, asr #32
    1088:	40080e41 	andmi	r0, r8, r1, asr #28
    108c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
    1090:	100e4101 	andne	r4, lr, r1, lsl #2
    1094:	00070d41 	andeq	r0, r7, r1, asr #26
    1098:	0000001c 	andeq	r0, r0, ip, lsl r0
    109c:	00000c2c 	andeq	r0, r0, ip, lsr #24
    10a0:	20003734 	andcs	r3, r0, r4, lsr r7
    10a4:	00000040 	andeq	r0, r0, r0, asr #32
    10a8:	40080e41 	andmi	r0, r8, r1, asr #28
    10ac:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
    10b0:	100e4101 	andne	r4, lr, r1, lsl #2
    10b4:	00070d41 	andeq	r0, r7, r1, asr #26
    10b8:	0000001c 	andeq	r0, r0, ip, lsl r0
    10bc:	00000c2c 	andeq	r0, r0, ip, lsr #24
    10c0:	20003774 	andcs	r3, r0, r4, ror r7
    10c4:	00000040 	andeq	r0, r0, r0, asr #32
    10c8:	40080e41 	andmi	r0, r8, r1, asr #28
    10cc:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
    10d0:	100e4101 	andne	r4, lr, r1, lsl #2
    10d4:	00070d41 	andeq	r0, r7, r1, asr #26
    10d8:	0000001c 	andeq	r0, r0, ip, lsl r0
    10dc:	00000c2c 	andeq	r0, r0, ip, lsr #24
    10e0:	200037b4 			; <UNDEFINED> instruction: 0x200037b4
    10e4:	00000040 	andeq	r0, r0, r0, asr #32
    10e8:	40080e41 	andmi	r0, r8, r1, asr #28
    10ec:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
    10f0:	100e4101 	andne	r4, lr, r1, lsl #2
    10f4:	00070d41 	andeq	r0, r7, r1, asr #26
    10f8:	0000001c 	andeq	r0, r0, ip, lsl r0
    10fc:	00000c2c 	andeq	r0, r0, ip, lsr #24
    1100:	200037f4 	strdcs	r3, [r0], -r4
    1104:	00000040 	andeq	r0, r0, r0, asr #32
    1108:	40080e41 	andmi	r0, r8, r1, asr #28
    110c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
    1110:	100e4101 	andne	r4, lr, r1, lsl #2
    1114:	00070d41 	andeq	r0, r7, r1, asr #26
    1118:	0000001c 	andeq	r0, r0, ip, lsl r0
    111c:	00000c2c 	andeq	r0, r0, ip, lsr #24
    1120:	20003834 	andcs	r3, r0, r4, lsr r8
    1124:	00000040 	andeq	r0, r0, r0, asr #32
    1128:	40080e41 	andmi	r0, r8, r1, asr #28
    112c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
    1130:	100e4101 	andne	r4, lr, r1, lsl #2
    1134:	00070d41 	andeq	r0, r7, r1, asr #26
    1138:	0000001c 	andeq	r0, r0, ip, lsl r0
    113c:	00000c2c 	andeq	r0, r0, ip, lsr #24
    1140:	20003874 	andcs	r3, r0, r4, ror r8
    1144:	00000040 	andeq	r0, r0, r0, asr #32
    1148:	40080e41 	andmi	r0, r8, r1, asr #28
    114c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
    1150:	100e4101 	andne	r4, lr, r1, lsl #2
    1154:	00070d41 	andeq	r0, r7, r1, asr #26
    1158:	0000001c 	andeq	r0, r0, ip, lsl r0
    115c:	00000c2c 	andeq	r0, r0, ip, lsr #24
    1160:	200038b4 			; <UNDEFINED> instruction: 0x200038b4
    1164:	00000040 	andeq	r0, r0, r0, asr #32
    1168:	40080e41 	andmi	r0, r8, r1, asr #28
    116c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
    1170:	100e4101 	andne	r4, lr, r1, lsl #2
    1174:	00070d41 	andeq	r0, r7, r1, asr #26
    1178:	0000001c 	andeq	r0, r0, ip, lsl r0
    117c:	00000c2c 	andeq	r0, r0, ip, lsr #24
    1180:	200038f4 	strdcs	r3, [r0], -r4
    1184:	00000040 	andeq	r0, r0, r0, asr #32
    1188:	40080e41 	andmi	r0, r8, r1, asr #28
    118c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
    1190:	100e4101 	andne	r4, lr, r1, lsl #2
    1194:	00070d41 	andeq	r0, r7, r1, asr #26
    1198:	0000001c 	andeq	r0, r0, ip, lsl r0
    119c:	00000c2c 	andeq	r0, r0, ip, lsr #24
    11a0:	20003934 	andcs	r3, r0, r4, lsr r9
    11a4:	00000040 	andeq	r0, r0, r0, asr #32
    11a8:	40080e41 	andmi	r0, r8, r1, asr #28
    11ac:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
    11b0:	100e4101 	andne	r4, lr, r1, lsl #2
    11b4:	00070d41 	andeq	r0, r7, r1, asr #26
    11b8:	0000001c 	andeq	r0, r0, ip, lsl r0
    11bc:	00000c2c 	andeq	r0, r0, ip, lsr #24
    11c0:	20003974 	andcs	r3, r0, r4, ror r9
    11c4:	00000040 	andeq	r0, r0, r0, asr #32
    11c8:	40080e41 	andmi	r0, r8, r1, asr #28
    11cc:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
    11d0:	100e4101 	andne	r4, lr, r1, lsl #2
    11d4:	00070d41 	andeq	r0, r7, r1, asr #26
    11d8:	0000001c 	andeq	r0, r0, ip, lsl r0
    11dc:	00000c2c 	andeq	r0, r0, ip, lsr #24
    11e0:	200039b4 			; <UNDEFINED> instruction: 0x200039b4
    11e4:	00000040 	andeq	r0, r0, r0, asr #32
    11e8:	40080e41 	andmi	r0, r8, r1, asr #28
    11ec:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
    11f0:	100e4101 	andne	r4, lr, r1, lsl #2
    11f4:	00070d41 	andeq	r0, r7, r1, asr #26
    11f8:	0000001c 	andeq	r0, r0, ip, lsl r0
    11fc:	00000c2c 	andeq	r0, r0, ip, lsr #24
    1200:	200039f4 	strdcs	r3, [r0], -r4
    1204:	00000040 	andeq	r0, r0, r0, asr #32
    1208:	40080e41 	andmi	r0, r8, r1, asr #28
    120c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
    1210:	100e4101 	andne	r4, lr, r1, lsl #2
    1214:	00070d41 	andeq	r0, r7, r1, asr #26
    1218:	0000001c 	andeq	r0, r0, ip, lsl r0
    121c:	00000c2c 	andeq	r0, r0, ip, lsr #24
    1220:	20003a34 	andcs	r3, r0, r4, lsr sl
    1224:	0000003c 	andeq	r0, r0, ip, lsr r0
    1228:	40080e41 	andmi	r0, r8, r1, asr #28
    122c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
    1230:	100e4101 	andne	r4, lr, r1, lsl #2
    1234:	00070d41 	andeq	r0, r7, r1, asr #26
    1238:	0000001c 	andeq	r0, r0, ip, lsl r0
    123c:	00000c2c 	andeq	r0, r0, ip, lsr #24
    1240:	20003a70 	andcs	r3, r0, r0, ror sl
    1244:	00000050 	andeq	r0, r0, r0, asr r0
    1248:	40080e41 	andmi	r0, r8, r1, asr #28
    124c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
    1250:	100e4101 	andne	r4, lr, r1, lsl #2
    1254:	00070d41 	andeq	r0, r7, r1, asr #26
    1258:	0000001c 	andeq	r0, r0, ip, lsl r0
    125c:	00000c2c 	andeq	r0, r0, ip, lsr #24
    1260:	20003ac0 	andcs	r3, r0, r0, asr #21
    1264:	00000084 	andeq	r0, r0, r4, lsl #1
    1268:	40080e41 	andmi	r0, r8, r1, asr #28
    126c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
    1270:	200e4101 	andcs	r4, lr, r1, lsl #2
    1274:	00070d41 	andeq	r0, r7, r1, asr #26
    1278:	00000018 	andeq	r0, r0, r8, lsl r0
    127c:	00000c2c 	andeq	r0, r0, ip, lsr #24
    1280:	20003b44 	andcs	r3, r0, r4, asr #22
    1284:	0000001c 	andeq	r0, r0, ip, lsl r0
    1288:	40080e41 	andmi	r0, r8, r1, asr #28
    128c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
    1290:	070d4101 	streq	r4, [sp, -r1, lsl #2]
    1294:	0000001c 	andeq	r0, r0, ip, lsl r0
    1298:	00000c2c 	andeq	r0, r0, ip, lsr #24
    129c:	20003b60 	andcs	r3, r0, r0, ror #22
    12a0:	00000044 	andeq	r0, r0, r4, asr #32
    12a4:	40080e41 	andmi	r0, r8, r1, asr #28
    12a8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
    12ac:	180e4101 	stmdane	lr, {r0, r8, lr}
    12b0:	00070d41 	andeq	r0, r7, r1, asr #26
    12b4:	0000001c 	andeq	r0, r0, ip, lsl r0
    12b8:	00000c2c 	andeq	r0, r0, ip, lsr #24
    12bc:	20003ba4 	andcs	r3, r0, r4, lsr #23
    12c0:	00000020 	andeq	r0, r0, r0, lsr #32
    12c4:	40080e41 	andmi	r0, r8, r1, asr #28
    12c8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
    12cc:	100e4101 	andne	r4, lr, r1, lsl #2
    12d0:	00070d41 	andeq	r0, r7, r1, asr #26
    12d4:	0000000c 	andeq	r0, r0, ip
    12d8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    12dc:	7c020001 	stcvc	0, cr0, [r2], {1}
    12e0:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    12e4:	0000001c 	andeq	r0, r0, ip, lsl r0
    12e8:	000012d4 	ldrdeq	r1, [r0], -r4
    12ec:	20003bc4 	andcs	r3, r0, r4, asr #23
    12f0:	00000028 	andeq	r0, r0, r8, lsr #32
    12f4:	40080e41 	andmi	r0, r8, r1, asr #28
    12f8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
    12fc:	100e4101 	andne	r4, lr, r1, lsl #2
    1300:	00070d41 	andeq	r0, r7, r1, asr #26
    1304:	0000001c 	andeq	r0, r0, ip, lsl r0
    1308:	000012d4 	ldrdeq	r1, [r0], -r4
    130c:	20003bec 	andcs	r3, r0, ip, ror #23
    1310:	00000062 	andeq	r0, r0, r2, rrx
    1314:	40080e41 	andmi	r0, r8, r1, asr #28
    1318:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
    131c:	100e4101 	andne	r4, lr, r1, lsl #2
    1320:	00070d41 	andeq	r0, r7, r1, asr #26
    1324:	0000001c 	andeq	r0, r0, ip, lsl r0
    1328:	000012d4 	ldrdeq	r1, [r0], -r4
    132c:	20003c4e 	andcs	r3, r0, lr, asr #24
    1330:	00000040 	andeq	r0, r0, r0, asr #32
    1334:	40080e41 	andmi	r0, r8, r1, asr #28
    1338:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
    133c:	180e4101 	stmdane	lr, {r0, r8, lr}
    1340:	00070d41 	andeq	r0, r7, r1, asr #26
    1344:	0000001c 	andeq	r0, r0, ip, lsl r0
    1348:	000012d4 	ldrdeq	r1, [r0], -r4
    134c:	20003c8e 	andcs	r3, r0, lr, lsl #25
    1350:	0000005e 	andeq	r0, r0, lr, asr r0
    1354:	40080e41 	andmi	r0, r8, r1, asr #28
    1358:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
    135c:	100e4101 	andne	r4, lr, r1, lsl #2
    1360:	00070d41 	andeq	r0, r7, r1, asr #26
    1364:	0000000c 	andeq	r0, r0, ip
    1368:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    136c:	7c010001 	stcvc	0, cr0, [r1], {1}
    1370:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    1374:	0000000c 	andeq	r0, r0, ip
    1378:	00001364 	andeq	r1, r0, r4, ror #6
    137c:	20003ced 	andcs	r3, r0, sp, ror #25
    1380:	0000010a 	andeq	r0, r0, sl, lsl #2

Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
   0:	20000be0 	andcs	r0, r0, r0, ror #23
   4:	20000ef4 	strdcs	r0, [r0], -r4
   8:	20000000 	andcs	r0, r0, r0
   c:	2000000c 	andcs	r0, r0, ip
	...
